<<<<<<< HEAD
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: NOP4
=======
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// RandomizeAll ;
   4: NOP4
// mission_prefix := 08_ ;
<<<<<<< HEAD
   8: NOP4
=======
   8: LD_ADDR_EXP 42
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
<<<<<<< HEAD
  16: NOP4
=======
  16: LD_ADDR_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
<<<<<<< HEAD
  24: NOP4
=======
  24: LD_ADDR_EXP 39
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
<<<<<<< HEAD
  32: NOP4
=======
  32: LD_ADDR_EXP 18
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
<<<<<<< HEAD
  40: NOP4
=======
  40: LD_ADDR_EXP 19
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
<<<<<<< HEAD
  48: NOP4
=======
  48: LD_ADDR_EXP 20
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
<<<<<<< HEAD
  56: NOP4
=======
  56: LD_ADDR_EXP 21
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
<<<<<<< HEAD
  64: NOP4
=======
  64: LD_ADDR_EXP 33
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
<<<<<<< HEAD
  72: NOP4
=======
  72: LD_ADDR_EXP 34
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
<<<<<<< HEAD
  80: NOP4
=======
  80: LD_ADDR_EXP 38
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
<<<<<<< HEAD
  88: NOP4
=======
  88: LD_ADDR_EXP 12
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: NOP4
 103: ST_TO_ADDR
// russianAI = 0 ;
<<<<<<< HEAD
 104: NOP4
=======
 104: LD_ADDR_EXP 27
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
<<<<<<< HEAD
 112: NOP4
=======
 112: LD_ADDR_EXP 31
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
<<<<<<< HEAD
 119: NOP4
=======
 119: LD_ADDR_EXP 36
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
<<<<<<< HEAD
 127: NOP4
=======
 127: LD_ADDR_EXP 32
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
<<<<<<< HEAD
 134: NOP4
=======
 134: LD_ADDR_EXP 41
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
<<<<<<< HEAD
 142: NOP4
=======
 142: LD_ADDR_EXP 35
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
<<<<<<< HEAD
 150: NOP4
=======
 150: LD_ADDR_EXP 40
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: NOP4
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
<<<<<<< HEAD
 175: NOP4
=======
 175: LD_ADDR_EXP 44
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
<<<<<<< HEAD
 183: NOP4
=======
 183: CALL 6673 0 0
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: NOP4
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: NOP4
// PrepareBase ;
 217: NOP4
// PrepareHeroes ;
 221: NOP4
// PrepareRussianCommander ;
<<<<<<< HEAD
 225: NOP4
// PrepareRussians ;
 229: NOP4
=======
 225: CALL 5478 0 0
// PrepareRussians ;
 229: CALL 5796 0 0
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: NOP4
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: NOP4
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
<<<<<<< HEAD
 287: NOP4
 291: PPUSH
 292: NOP4
=======
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 296: PPUSH
 297: NOP4
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
<<<<<<< HEAD
 308: NOP4
// PrepareCutsceneAttack ;
 312: NOP4
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: NOP4
=======
 308: CALL 7938 0 6
// PrepareCutsceneAttack ;
 312: CALL 5530 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: NOP4
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: NOP4
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: NOP4
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: NOP4
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: NOP4
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: NOP4
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: NOP4
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: NOP4
 435: PPUSH
 436: NOP4
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: NOP4
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: NOP4
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: NOP4
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: NOP4
 496: PPUSH
 497: NOP4
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: NOP4
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
// uc_side = 1 ;
 535: LD_ADDR_OWVAR 20
 539: PUSH
 540: LD_INT 1
 542: ST_TO_ADDR
// uc_nation = 1 ;
 543: LD_ADDR_OWVAR 21
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// if gammaCommander = 1 then
<<<<<<< HEAD
 551: NOP4
=======
 551: LD_EXP 12
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 555: PUSH
 556: LD_INT 1
 558: EQUAL
 559: IFFALSE 592
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 561: NOP4
 565: PUSH
 566: LD_STRING Donaldson
 568: PPUSH
 569: LD_INT 1
 571: PPUSH
<<<<<<< HEAD
 572: NOP4
=======
 572: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 576: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 577: NOP4
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: LD_INT 0
 587: PPUSH
 588: NOP4
// end ; if gammaCommander = 2 then
<<<<<<< HEAD
 592: NOP4
=======
 592: LD_EXP 12
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 596: PUSH
 597: LD_INT 2
 599: EQUAL
 600: IFFALSE 633
// begin Brown = PrepareUnit ( Brown , true ) ;
 602: NOP4
 606: PUSH
 607: LD_STRING Brown
 609: PPUSH
 610: LD_INT 1
 612: PPUSH
<<<<<<< HEAD
 613: NOP4
=======
 613: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 617: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 618: NOP4
 622: PPUSH
 623: LD_INT 5
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: NOP4
// end ; if gammaCommander = 3 then
<<<<<<< HEAD
 633: NOP4
=======
 633: LD_EXP 12
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 637: PUSH
 638: LD_INT 3
 640: EQUAL
 641: IFFALSE 674
// begin Houten = PrepareUnit ( VanHouten , true ) ;
<<<<<<< HEAD
 643: NOP4
=======
 643: LD_ADDR_EXP 13
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 647: PUSH
 648: LD_STRING VanHouten
 650: PPUSH
 651: LD_INT 1
 653: PPUSH
<<<<<<< HEAD
 654: NOP4
 658: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 659: NOP4
=======
 654: CALL 6214 0 2
 658: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 659: LD_EXP 13
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 663: PPUSH
 664: LD_INT 5
 666: PPUSH
 667: LD_INT 0
 669: PPUSH
 670: NOP4
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
<<<<<<< HEAD
 674: NOP4
=======
 674: LD_ADDR_EXP 22
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 678: PUSH
 679: LD_STRING Harisson
 681: PPUSH
 682: LD_INT 0
 684: PPUSH
<<<<<<< HEAD
 685: NOP4
 689: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 690: NOP4
=======
 685: CALL 6214 0 2
 689: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 690: LD_ADDR_EXP 23
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 694: PUSH
 695: LD_STRING Powell
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
<<<<<<< HEAD
 701: NOP4
 705: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 706: NOP4
=======
 701: CALL 6214 0 2
 705: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 706: LD_ADDR_EXP 11
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 710: PUSH
 711: LD_STRING 07_othersGamma
 713: PPUSH
 714: NOP4
 718: ST_TO_ADDR
// tmp := 8 - others_gamma ;
 719: NOP4
 723: PUSH
 724: LD_INT 8
 726: PUSH
<<<<<<< HEAD
 727: NOP4
=======
 727: LD_EXP 11
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 731: MINUS
 732: ST_TO_ADDR
// if tmp then
 733: NOP4
 737: IFFALSE 790
// for i = 1 to tmp do
 739: NOP4
 743: PUSH
 744: DOUBLE
 745: LD_INT 1
 747: DEC
 748: ST_TO_ADDR
 749: NOP4
 753: PUSH
 754: FOR_TO
 755: IFFALSE 788
// begin PrepareHuman ( false , 1 , 5 ) ;
 757: LD_INT 0
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: LD_INT 5
 765: PPUSH
 766: NOP4
// others_gamma := others_gamma ^ CreateHuman ;
<<<<<<< HEAD
 770: NOP4
 774: PUSH
 775: NOP4
=======
 770: LD_ADDR_EXP 11
 774: PUSH
 775: LD_EXP 11
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
 779: PUSH
 780: NOP4
 784: ADD
 785: ST_TO_ADDR
// end ;
 786: GO 754
 788: POP
 789: POP
// if HexInfo ( 61 , 29 ) = 0 then
 790: LD_INT 61
 792: PPUSH
 793: LD_INT 29
 795: PPUSH
 796: NOP4
 800: PUSH
 801: LD_INT 0
 803: EQUAL
 804: IFFALSE 835
// begin bc_type := b_barracks ;
 806: LD_ADDR_OWVAR 42
 810: PUSH
 811: LD_INT 5
 813: ST_TO_ADDR
// bc_level := 6 ;
 814: LD_ADDR_OWVAR 43
 818: PUSH
 819: LD_INT 6
 821: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
 822: LD_INT 61
 824: PPUSH
 825: LD_INT 29
 827: PPUSH
 828: LD_INT 5
 830: PPUSH
 831: NOP4
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
 835: NOP4
 839: PUSH
 840: LD_INT 22
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: PUSH
 850: LD_INT 30
 852: PUSH
 853: LD_INT 31
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PPUSH
 864: NOP4
 868: ST_TO_ADDR
// for i in bun do
 869: NOP4
 873: PUSH
 874: NOP4
 878: PUSH
 879: FOR_IN
 880: IFFALSE 1012
// begin x := GetX ( i ) ;
 882: NOP4
 886: PUSH
 887: NOP4
 891: PPUSH
 892: NOP4
 896: ST_TO_ADDR
// y := GetY ( i ) ;
 897: NOP4
 901: PUSH
 902: NOP4
 906: PPUSH
 907: NOP4
 911: ST_TO_ADDR
// d := GetDir ( i ) ;
 912: NOP4
 916: PUSH
 917: NOP4
 921: PPUSH
 922: NOP4
 926: ST_TO_ADDR
// RemoveUnit ( i ) ;
 927: NOP4
 931: PPUSH
 932: NOP4
// bc_type := b_bunker ;
 936: LD_ADDR_OWVAR 42
 940: PUSH
 941: LD_INT 32
 943: ST_TO_ADDR
// bc_level := 6 ;
 944: LD_ADDR_OWVAR 43
 948: PUSH
 949: LD_INT 6
 951: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
 952: NOP4
 956: PUSH
 957: NOP4
 961: PPUSH
 962: NOP4
 966: PPUSH
 967: NOP4
 971: PPUSH
 972: NOP4
 976: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
 977: NOP4
 981: PPUSH
 982: LD_INT 5
 984: PUSH
 985: LD_INT 4
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: NOP4
 996: PUSH
 997: LD_INT 2
 999: MOD
1000: PUSH
1001: LD_INT 1
1003: PLUS
1004: ARRAY
1005: PPUSH
1006: NOP4
// end ;
1010: GO 879
1012: POP
1013: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1014: NOP4
1018: PUSH
1019: LD_INT 22
1021: PUSH
1022: LD_INT 1
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 30
1031: PUSH
1032: LD_INT 5
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: PPUSH
1043: NOP4
1047: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1048: NOP4
1052: PUSH
1053: LD_INT 22
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: PUSH
1063: LD_INT 2
1065: PUSH
1066: LD_INT 30
1068: PUSH
1069: LD_INT 6
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: LD_INT 30
1078: PUSH
1079: LD_INT 7
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 30
1088: PUSH
1089: LD_INT 8
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: NOP4
1110: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1111: NOP4
1115: PUSH
1116: LD_INT 22
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 30
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: NOP4
1144: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1145: NOP4
1149: PUSH
1150: LD_INT 22
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 30
1162: PUSH
1163: LD_INT 36
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PPUSH
1174: NOP4
1178: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1179: NOP4
1183: PUSH
1184: LD_INT 22
1186: PUSH
1187: LD_INT 1
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 2
1196: PUSH
1197: LD_INT 30
1199: PUSH
1200: LD_INT 31
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 30
1209: PUSH
1210: LD_INT 32
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: NOP4
1230: ST_TO_ADDR
// for i in others_gamma do
1231: NOP4
1235: PUSH
<<<<<<< HEAD
1236: NOP4
=======
1236: LD_EXP 11
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
1240: PUSH
1241: FOR_IN
1242: IFFALSE 1617
// begin placed := false ;
1244: NOP4
1248: PUSH
1249: LD_INT 0
1251: ST_TO_ADDR
// if GetClass ( i ) = 1 then
1252: NOP4
1256: PPUSH
1257: NOP4
1261: PUSH
1262: LD_INT 1
1264: EQUAL
1265: IFFALSE 1390
// begin if UnitFilter ( bun , [ f_empty ] ) then
1267: NOP4
1271: PPUSH
1272: LD_INT 58
1274: PUSH
1275: EMPTY
1276: LIST
1277: PPUSH
1278: NOP4
1282: IFFALSE 1321
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1284: NOP4
1288: PPUSH
1289: NOP4
1293: PPUSH
1294: LD_INT 58
1296: PUSH
1297: EMPTY
1298: LIST
1299: PPUSH
1300: NOP4
1304: PUSH
1305: LD_INT 1
1307: ARRAY
1308: PPUSH
1309: NOP4
// placed := true ;
1313: NOP4
1317: PUSH
1318: LD_INT 1
1320: ST_TO_ADDR
// end ; if arm and not placed then
1321: NOP4
1325: PUSH
1326: NOP4
1330: NOT
1331: AND
1332: IFFALSE 1390
// begin for j in arm do
1334: NOP4
1338: PUSH
1339: NOP4
1343: PUSH
1344: FOR_IN
1345: IFFALSE 1388
// if UnitsInside ( j ) < 6 then
1347: NOP4
1351: PPUSH
1352: NOP4
1356: PUSH
1357: LD_INT 6
1359: LESS
1360: IFFALSE 1386
// begin PlaceHumanInUnit ( i , j ) ;
1362: NOP4
1366: PPUSH
1367: NOP4
1371: PPUSH
1372: NOP4
// placed := true ;
1376: NOP4
1380: PUSH
1381: LD_INT 1
1383: ST_TO_ADDR
// break ;
1384: GO 1388
// end ;
1386: GO 1344
1388: POP
1389: POP
// end ; end ; if GetClass ( i ) = 3 then
1390: NOP4
1394: PPUSH
1395: NOP4
1399: PUSH
1400: LD_INT 3
1402: EQUAL
1403: IFFALSE 1507
// if fac then
1405: NOP4
1409: IFFALSE 1507
// begin if ct then
1411: NOP4
1415: IFFALSE 1443
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1417: NOP4
1421: PPUSH
1422: NOP4
1426: PUSH
1427: LD_INT 1
1429: ARRAY
1430: PPUSH
1431: NOP4
// placed := true ;
1435: NOP4
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// end ; if placed then
1443: NOP4
1447: IFFALSE 1451
// continue ;
1449: GO 1241
// for j in fac do
1451: NOP4
1455: PUSH
1456: NOP4
1460: PUSH
1461: FOR_IN
1462: IFFALSE 1505
// if UnitsInside ( j ) < 6 then
1464: NOP4
1468: PPUSH
1469: NOP4
1473: PUSH
1474: LD_INT 6
1476: LESS
1477: IFFALSE 1503
// begin PlaceHumanInUnit ( i , j ) ;
1479: NOP4
1483: PPUSH
1484: NOP4
1488: PPUSH
1489: NOP4
// placed := true ;
1493: NOP4
1497: PUSH
1498: LD_INT 1
1500: ST_TO_ADDR
// break ;
1501: GO 1505
// end ;
1503: GO 1461
1505: POP
1506: POP
// end ; if GetClass ( i ) = 4 then
1507: NOP4
1511: PPUSH
1512: NOP4
1516: PUSH
1517: LD_INT 4
1519: EQUAL
1520: IFFALSE 1584
// if lab then
1522: NOP4
1526: IFFALSE 1584
// begin for j in lab do
1528: NOP4
1532: PUSH
1533: NOP4
1537: PUSH
1538: FOR_IN
1539: IFFALSE 1582
// if UnitsInside ( j ) < 6 then
1541: NOP4
1545: PPUSH
1546: NOP4
1550: PUSH
1551: LD_INT 6
1553: LESS
1554: IFFALSE 1580
// begin PlaceHumanInUnit ( i , j ) ;
1556: NOP4
1560: PPUSH
1561: NOP4
1565: PPUSH
1566: NOP4
// placed := true ;
1570: NOP4
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// break ;
1578: GO 1582
// end ;
1580: GO 1538
1582: POP
1583: POP
// end ; if not placed then
1584: NOP4
1588: NOT
1589: IFFALSE 1615
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1591: NOP4
1595: PPUSH
1596: LD_INT 5
1598: PPUSH
1599: LD_INT 0
1601: PPUSH
1602: NOP4
// ComHold ( i ) ;
1606: NOP4
1610: PPUSH
1611: NOP4
// end ; end ;
1615: GO 1241
1617: POP
1618: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1619: NOP4
1623: PUSH
1624: NOP4
1628: PUSH
1629: LD_INT 1
1631: ARRAY
1632: PPUSH
1633: NOP4
1637: AND
1638: IFFALSE 1727
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
1640: NOP4
1644: PUSH
1645: LD_INT 22
1647: PUSH
1648: LD_INT 1
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 33
1657: PUSH
1658: LD_INT 2
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PPUSH
1669: NOP4
1673: PUSH
1674: FOR_IN
1675: IFFALSE 1725
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
1677: NOP4
1681: PPUSH
1682: NOP4
1686: PUSH
1687: LD_INT 1
1689: ARRAY
1690: PPUSH
1691: NOP4
1695: PUSH
1696: LD_INT 1
1698: PPUSH
1699: NOP4
1703: PUSH
1704: LD_INT 1
1706: ARRAY
1707: PPUSH
1708: NOP4
1712: PPUSH
1713: NOP4
1717: ARRAY
1718: PPUSH
1719: NOP4
1723: GO 1674
1725: POP
1726: POP
// end ; end ;
1727: LD_VAR 0 1
1731: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
1732: LD_INT 0
1734: PPUSH
1735: PPUSH
1736: PPUSH
1737: PPUSH
1738: PPUSH
1739: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
1740: LD_INT 71
1742: PPUSH
1743: LD_INT 5
1745: PPUSH
1746: LD_INT 1
1748: PPUSH
1749: NOP4
// blist := LoadVariable ( GammaBase , [ ] ) ;
1753: NOP4
1757: PUSH
1758: LD_STRING GammaBase
1760: PPUSH
1761: EMPTY
1762: PPUSH
1763: NOP4
1767: ST_TO_ADDR
// uc_side := 1 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 1
1775: ST_TO_ADDR
// uc_nation := 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// for i in blist do
1784: NOP4
1788: PUSH
1789: NOP4
1793: PUSH
1794: FOR_IN
1795: IFFALSE 2203
// begin bc_type := i [ 1 ] ;
1797: LD_ADDR_OWVAR 42
1801: PUSH
1802: NOP4
1806: PUSH
1807: LD_INT 1
1809: ARRAY
1810: ST_TO_ADDR
// bc_level := i [ 5 ] ;
1811: LD_ADDR_OWVAR 43
1815: PUSH
1816: NOP4
1820: PUSH
1821: LD_INT 5
1823: ARRAY
1824: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
1825: NOP4
1829: PUSH
1830: LD_INT 1
1832: ARRAY
1833: PUSH
1834: LD_INT 7
1836: PUSH
1837: LD_INT 8
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: IN
1844: IFFALSE 1900
// begin bc_kind1 := i [ 7 ] ;
1846: LD_ADDR_OWVAR 44
1850: PUSH
1851: NOP4
1855: PUSH
1856: LD_INT 7
1858: ARRAY
1859: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1860: LD_STRING 06_remoteVehs_1
1862: PPUSH
1863: LD_INT 0
1865: PPUSH
1866: NOP4
1870: PUSH
1871: LD_INT 1
1873: EQUAL
1874: IFFALSE 1886
// begin bc_kind2 := 15 ;
1876: LD_ADDR_OWVAR 45
1880: PUSH
1881: LD_INT 15
1883: ST_TO_ADDR
// end else
1884: GO 1900
// begin bc_kind2 := i [ 8 ] ;
1886: LD_ADDR_OWVAR 45
1890: PUSH
1891: NOP4
1895: PUSH
1896: LD_INT 8
1898: ARRAY
1899: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
1900: NOP4
1904: PUSH
1905: LD_INT 0
1907: EQUAL
1908: IFFALSE 2026
// begin bc_type := b_warehouse ;
1910: LD_ADDR_OWVAR 42
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
<<<<<<< HEAD
1918: NOP4
=======
1918: LD_ADDR_EXP 37
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
1922: PUSH
1923: NOP4
1927: PUSH
1928: LD_INT 2
1930: ARRAY
1931: PPUSH
1932: NOP4
1936: PUSH
1937: LD_INT 3
1939: ARRAY
1940: PPUSH
1941: NOP4
1945: PUSH
1946: LD_INT 4
1948: ARRAY
1949: PPUSH
1950: NOP4
1954: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
<<<<<<< HEAD
1955: NOP4
=======
1955: LD_EXP 37
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
1959: PPUSH
1960: LD_STRING gamma
1962: PPUSH
1963: NOP4
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 350 , 250 ] [ Difficulty ] ) ;
<<<<<<< HEAD
1967: NOP4
=======
1967: LD_EXP 37
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
1971: PPUSH
1972: NOP4
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: LD_INT 400
1982: PUSH
1983: LD_INT 350
1985: PUSH
1986: LD_INT 250
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: PUSH
1994: NOP4
1998: ARRAY
1999: PPUSH
2000: NOP4
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
<<<<<<< HEAD
2004: NOP4
=======
2004: LD_EXP 37
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
2008: PPUSH
2009: NOP4
2013: PPUSH
2014: LD_INT 2
2016: PPUSH
2017: LD_INT 200
2019: PPUSH
2020: NOP4
// end else
2024: GO 2168
// begin if bc_type = 4 then
2026: NOP4
2030: PUSH
2031: LD_INT 4
2033: EQUAL
2034: IFFALSE 2083
// begin bc_type = 5 ;
2036: LD_ADDR_OWVAR 42
2040: PUSH
2041: LD_INT 5
2043: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2044: NOP4
2048: PUSH
2049: NOP4
2053: PUSH
2054: LD_INT 2
2056: ARRAY
2057: PPUSH
2058: NOP4
2062: PUSH
2063: LD_INT 3
2065: ARRAY
2066: PPUSH
2067: NOP4
2071: PUSH
2072: LD_INT 4
2074: ARRAY
2075: PPUSH
2076: NOP4
2080: ST_TO_ADDR
// end else
2081: GO 2168
// begin bc_type := i [ 1 ] ;
2083: LD_ADDR_OWVAR 42
2087: PUSH
2088: NOP4
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2097: LD_STRING 06_remoteVehs_1
2099: PPUSH
2100: LD_INT 0
2102: PPUSH
2103: NOP4
2107: PUSH
2108: LD_INT 1
2110: EQUAL
2111: PUSH
2112: NOP4
2116: PUSH
2117: LD_INT 7
2119: EQUAL
2120: AND
2121: IFFALSE 2131
// bc_type := b_lab_full ;
2123: LD_ADDR_OWVAR 42
2127: PUSH
2128: LD_INT 8
2130: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2131: NOP4
2135: PUSH
2136: NOP4
2140: PUSH
2141: LD_INT 2
2143: ARRAY
2144: PPUSH
2145: NOP4
2149: PUSH
2150: LD_INT 3
2152: ARRAY
2153: PPUSH
2154: NOP4
2158: PUSH
2159: LD_INT 4
2161: ARRAY
2162: PPUSH
2163: NOP4
2167: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2168: NOP4
2172: PPUSH
2173: NOP4
2177: PUSH
2178: LD_INT 32
2180: EQUAL
2181: IFFALSE 2201
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2183: NOP4
2187: PPUSH
2188: NOP4
2192: PUSH
2193: LD_INT 7
2195: ARRAY
2196: PPUSH
2197: NOP4
// end ;
2201: GO 1794
2203: POP
2204: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2205: LD_INT 22
2207: PUSH
2208: LD_INT 1
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PUSH
2215: LD_INT 30
2217: PUSH
2218: LD_INT 3
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PPUSH
2229: NOP4
2233: IFFALSE 2481
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2235: NOP4
2239: PUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 30
2252: PUSH
2253: LD_INT 3
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PPUSH
2264: NOP4
2268: PUSH
2269: LD_INT 1
2271: ARRAY
2272: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
2273: NOP4
2277: PUSH
2278: NOP4
2282: PPUSH
2283: NOP4
2287: PPUSH
2288: NOP4
2292: PPUSH
2293: NOP4
2297: PPUSH
2298: NOP4
2302: PPUSH
2303: NOP4
2307: PPUSH
<<<<<<< HEAD
2308: NOP4
=======
2308: CALL 15620 0 3
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
2312: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
2313: NOP4
2317: PUSH
2318: LD_INT 19
2320: PUSH
2321: LD_INT 17
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2328: LD_STRING 06_remoteVehs_1
2330: PPUSH
2331: LD_INT 0
2333: PPUSH
2334: NOP4
2338: IFFALSE 2361
// blist := Insert ( blist , 1 , b_ext_radar ) ;
2340: NOP4
2344: PUSH
2345: NOP4
2349: PPUSH
2350: LD_INT 1
2352: PPUSH
2353: LD_INT 20
2355: PPUSH
2356: NOP4
2360: ST_TO_ADDR
// for i in tmp do
2361: NOP4
2365: PUSH
2366: NOP4
2370: PUSH
2371: FOR_IN
2372: IFFALSE 2479
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
2374: NOP4
2378: PUSH
2379: LD_INT 1
2381: ARRAY
2382: PPUSH
2383: NOP4
2387: PUSH
2388: LD_INT 2
2390: ARRAY
2391: PPUSH
2392: NOP4
2396: PUSH
2397: LD_INT 0
2399: EQUAL
2400: IFFALSE 2477
// begin bc_type := blist [ 1 ] ;
2402: LD_ADDR_OWVAR 42
2406: PUSH
2407: NOP4
2411: PUSH
2412: LD_INT 1
2414: ARRAY
2415: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2416: NOP4
2420: PUSH
2421: LD_INT 1
2423: ARRAY
2424: PPUSH
2425: NOP4
2429: PUSH
2430: LD_INT 2
2432: ARRAY
2433: PPUSH
2434: NOP4
2438: PUSH
2439: LD_INT 3
2441: ARRAY
2442: PPUSH
2443: NOP4
// blist := Delete ( blist , 1 ) ;
2447: NOP4
2451: PUSH
2452: NOP4
2456: PPUSH
2457: LD_INT 1
2459: PPUSH
2460: NOP4
2464: ST_TO_ADDR
// if blist = 0 then
2465: NOP4
2469: PUSH
2470: LD_INT 0
2472: EQUAL
2473: IFFALSE 2477
// break ;
2475: GO 2479
// end ;
2477: GO 2371
2479: POP
2480: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2481: LD_STRING 06_remoteVehs_1
2483: PPUSH
2484: LD_INT 0
2486: PPUSH
2487: NOP4
2491: PUSH
2492: LD_INT 1
2494: EQUAL
2495: IFFALSE 2699
// begin bc_type = 36 ;
2497: LD_ADDR_OWVAR 42
2501: PUSH
2502: LD_INT 36
2504: ST_TO_ADDR
// bc_level = 4 ;
2505: LD_ADDR_OWVAR 43
2509: PUSH
2510: LD_INT 4
2512: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2513: LD_INT 62
2515: PPUSH
2516: LD_INT 12
2518: PPUSH
2519: LD_INT 3
2521: PPUSH
2522: NOP4
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2526: NOP4
2530: PUSH
2531: DOUBLE
2532: LD_INT 1
2534: DEC
2535: ST_TO_ADDR
2536: LD_INT 3
2538: PUSH
2539: LD_INT 2
2541: PUSH
2542: LD_INT 2
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: NOP4
2554: ARRAY
2555: PUSH
2556: FOR_TO
2557: IFFALSE 2697
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2559: LD_ADDR_OWVAR 37
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: LD_INT 2
2569: PUSH
2570: LD_INT 3
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 1
2579: PPUSH
2580: LD_INT 2
2582: PPUSH
2583: NOP4
2587: ARRAY
2588: PUSH
2589: LD_INT 2
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: PUSH
2597: NOP4
2601: ARRAY
2602: ST_TO_ADDR
// vc_engine = 1 ;
2603: LD_ADDR_OWVAR 39
2607: PUSH
2608: LD_INT 1
2610: ST_TO_ADDR
// vc_control = 2 ;
2611: LD_ADDR_OWVAR 38
2615: PUSH
2616: LD_INT 2
2618: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2619: LD_ADDR_OWVAR 40
2623: PUSH
2624: LD_INT 3
2626: PUSH
2627: LD_INT 4
2629: PUSH
2630: LD_INT 5
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: LIST
2637: PUSH
2638: LD_INT 1
2640: PPUSH
2641: LD_INT 3
2643: PPUSH
2644: NOP4
2648: ARRAY
2649: ST_TO_ADDR
// veh = CreateVehicle ;
2650: NOP4
2654: PUSH
2655: NOP4
2659: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
2660: NOP4
2664: PPUSH
<<<<<<< HEAD
2665: NOP4
=======
2665: LD_EXP 37
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
2669: PPUSH
2670: NOP4
2674: PPUSH
<<<<<<< HEAD
2675: NOP4
=======
2675: LD_EXP 37
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
2679: PPUSH
2680: NOP4
2684: PPUSH
2685: LD_INT 7
2687: PPUSH
2688: LD_INT 0
2690: PPUSH
2691: NOP4
// end ;
2695: GO 2556
2697: POP
2698: POP
// end ; end ;
2699: LD_VAR 0 1
2703: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
// uc_side = 1 ;
2710: LD_ADDR_OWVAR 20
2714: PUSH
2715: LD_INT 1
2717: ST_TO_ADDR
// uc_nation = 1 ;
2718: LD_ADDR_OWVAR 21
2722: PUSH
2723: LD_INT 1
2725: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
<<<<<<< HEAD
2726: NOP4
=======
2726: LD_ADDR_EXP 14
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
2730: PUSH
2731: LD_STRING 06c_Denis
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
<<<<<<< HEAD
2737: NOP4
2741: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
2742: NOP4
=======
2737: CALL 6214 0 2
2741: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
2742: LD_EXP 14
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
2746: PPUSH
2747: LD_INT 4
2749: PPUSH
2750: LD_INT 0
2752: PPUSH
2753: NOP4
// Joan = PrepareUnit ( 06c_Joan , true ) ;
<<<<<<< HEAD
2757: NOP4
=======
2757: LD_ADDR_EXP 15
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
2761: PUSH
2762: LD_STRING 06c_Joan
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
<<<<<<< HEAD
2768: NOP4
2772: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
2773: NOP4
=======
2768: CALL 6214 0 2
2772: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
2773: LD_EXP 15
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
2777: PPUSH
2778: LD_INT 4
2780: PPUSH
2781: LD_INT 0
2783: PPUSH
2784: NOP4
// if not LoadVariable ( GladstoneIn07 , 0 ) then
2788: LD_STRING GladstoneIn07
2790: PPUSH
2791: LD_INT 0
2793: PPUSH
2794: NOP4
2798: NOT
2799: IFFALSE 2867
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
2801: NOP4
2805: PUSH
2806: LD_STRING 06c_Gladstone
2808: PPUSH
2809: LD_INT 1
2811: PPUSH
<<<<<<< HEAD
2812: NOP4
=======
2812: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
2816: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
2817: NOP4
2821: NOT
2822: PUSH
2823: LD_STRING GladstoneStayInDelta
2825: PPUSH
2826: LD_INT 0
2828: PPUSH
2829: NOP4
2833: AND
2834: IFFALSE 2852
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
2836: NOP4
2840: PUSH
2841: LD_STRING 05_Gladstone
2843: PPUSH
2844: LD_INT 1
2846: PPUSH
<<<<<<< HEAD
2847: NOP4
=======
2847: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
2851: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
2852: NOP4
2856: PPUSH
2857: LD_INT 4
2859: PPUSH
2860: LD_INT 0
2862: PPUSH
2863: NOP4
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
2867: LD_STRING LisaStayInDelta
2869: PPUSH
2870: LD_INT 0
2872: PPUSH
2873: NOP4
2877: IFFALSE 2910
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
2879: NOP4
2883: PUSH
2884: LD_STRING 05_Lisa
2886: PPUSH
2887: LD_INT 1
2889: PPUSH
<<<<<<< HEAD
2890: NOP4
=======
2890: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
2894: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
2895: NOP4
2899: PPUSH
2900: LD_INT 4
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: NOP4
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
2910: LD_STRING BobbyStayInDelta
2912: PPUSH
2913: LD_INT 0
2915: PPUSH
2916: NOP4
2920: IFFALSE 2953
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
2922: NOP4
2926: PUSH
2927: LD_STRING 05_Bobby
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
<<<<<<< HEAD
2933: NOP4
=======
2933: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
2937: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
2938: NOP4
2942: PPUSH
2943: LD_INT 4
2945: PPUSH
2946: LD_INT 0
2948: PPUSH
2949: NOP4
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
2953: LD_STRING CyrusStayInDelta
2955: PPUSH
2956: LD_INT 0
2958: PPUSH
2959: NOP4
2963: IFFALSE 2996
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
2965: NOP4
2969: PUSH
2970: LD_STRING 05_Cyrus
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
<<<<<<< HEAD
2976: NOP4
=======
2976: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
2980: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
2981: NOP4
2985: PPUSH
2986: LD_INT 4
2988: PPUSH
2989: LD_INT 0
2991: PPUSH
2992: NOP4
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
2996: LD_STRING BrownStayInDelta
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: NOP4
3006: IFFALSE 3039
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
3008: NOP4
3012: PUSH
3013: LD_STRING 05_Brown
3015: PPUSH
3016: LD_INT 1
3018: PPUSH
<<<<<<< HEAD
3019: NOP4
=======
3019: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3023: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3024: NOP4
3028: PPUSH
3029: LD_INT 4
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: NOP4
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
3039: LD_STRING DonaldsonStayInDelta
3041: PPUSH
3042: LD_INT 0
3044: PPUSH
3045: NOP4
3049: IFFALSE 3082
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
3051: NOP4
3055: PUSH
3056: LD_STRING 05_Donaldson
3058: PPUSH
3059: LD_INT 1
3061: PPUSH
<<<<<<< HEAD
3062: NOP4
=======
3062: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3066: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3067: NOP4
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: NOP4
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
3082: NOP4
3086: PUSH
3087: LD_STRING OtherStayInDelta
3089: PPUSH
3090: NOP4
3094: ST_TO_ADDR
// if other then
3095: NOP4
3099: IFFALSE 3144
// for j = 1 to other do
3101: NOP4
3105: PUSH
3106: DOUBLE
3107: LD_INT 1
3109: DEC
3110: ST_TO_ADDR
3111: NOP4
3115: PUSH
3116: FOR_TO
3117: IFFALSE 3142
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
3119: NOP4
3123: PUSH
3124: NOP4
3128: ARRAY
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 0
3135: PPUSH
3136: NOP4
3140: GO 3116
3142: POP
3143: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
3144: NOP4
3148: PUSH
3149: LD_STRING 06_other_apemans
3151: PPUSH
3152: NOP4
3156: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
3157: NOP4
3161: PUSH
3162: LD_INT 5
3164: PUSH
3165: LD_INT 4
3167: PUSH
3168: LD_INT 3
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: PUSH
3176: NOP4
3180: ARRAY
3181: GREATEREQUAL
3182: IFFALSE 3211
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
3184: NOP4
3188: PUSH
3189: LD_INT 5
3191: PUSH
3192: LD_INT 4
3194: PUSH
3195: LD_INT 3
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: LIST
3202: PUSH
3203: NOP4
3207: ARRAY
3208: ST_TO_ADDR
3209: GO 3221
// j := other ;
3211: NOP4
3215: PUSH
3216: NOP4
3220: ST_TO_ADDR
// for i = 1 to j do
3221: NOP4
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: NOP4
3235: PUSH
3236: FOR_TO
3237: IFFALSE 3262
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
3239: NOP4
3243: PUSH
3244: NOP4
3248: ARRAY
3249: PPUSH
3250: LD_INT 4
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: NOP4
3260: GO 3236
3262: POP
3263: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
3264: LD_INT 4
3266: PPUSH
3267: LD_INT 22
3269: PUSH
3270: LD_INT 1
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: LD_INT 21
3279: PUSH
3280: LD_INT 1
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: NOP4
3295: PPUSH
3296: LD_INT 53
3298: PPUSH
3299: LD_INT 19
3301: PPUSH
3302: NOP4
// firstAttack = 1 ;
<<<<<<< HEAD
3306: NOP4
=======
3306: LD_ADDR_EXP 33
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3310: PUSH
3311: LD_INT 1
3313: ST_TO_ADDR
// end ;
3314: LD_VAR 0 1
3318: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
3319: LD_INT 0
3321: PPUSH
3322: PPUSH
3323: PPUSH
3324: PPUSH
3325: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
3326: NOP4
3330: PUSH
3331: LD_STRING 07_vehicles
3333: PPUSH
3334: EMPTY
3335: PPUSH
3336: NOP4
3340: ST_TO_ADDR
// uc_side = 1 ;
3341: LD_ADDR_OWVAR 20
3345: PUSH
3346: LD_INT 1
3348: ST_TO_ADDR
// uc_nation = 1 ;
3349: LD_ADDR_OWVAR 21
3353: PUSH
3354: LD_INT 1
3356: ST_TO_ADDR
// if vehicles > 0 then
3357: NOP4
3361: PUSH
3362: LD_INT 0
3364: GREATER
3365: IFFALSE 3504
// begin for i = 1 to vehicles do
3367: NOP4
3371: PUSH
3372: DOUBLE
3373: LD_INT 1
3375: DEC
3376: ST_TO_ADDR
3377: NOP4
3381: PUSH
3382: FOR_TO
3383: IFFALSE 3502
// begin vc_chassis = vehicles [ i ] ;
3385: LD_ADDR_OWVAR 37
3389: PUSH
3390: NOP4
3394: PUSH
3395: NOP4
3399: ARRAY
3400: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
3401: LD_ADDR_OWVAR 39
3405: PUSH
3406: NOP4
3410: PUSH
3411: NOP4
3415: PUSH
3416: LD_INT 1
3418: PLUS
3419: ARRAY
3420: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
3421: LD_ADDR_OWVAR 38
3425: PUSH
3426: NOP4
3430: PUSH
3431: NOP4
3435: PUSH
3436: LD_INT 2
3438: PLUS
3439: ARRAY
3440: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
3441: LD_ADDR_OWVAR 40
3445: PUSH
3446: NOP4
3450: PUSH
3451: NOP4
3455: PUSH
3456: LD_INT 3
3458: PLUS
3459: ARRAY
3460: ST_TO_ADDR
// veh = CreateVehicle ;
3461: NOP4
3465: PUSH
3466: NOP4
3470: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
3471: NOP4
3475: PPUSH
3476: LD_INT 4
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: NOP4
// i = i + 3 ;
3486: NOP4
3490: PUSH
3491: NOP4
3495: PUSH
3496: LD_INT 3
3498: PLUS
3499: ST_TO_ADDR
// end ;
3500: GO 3382
3502: POP
3503: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3504: NOP4
3508: PUSH
<<<<<<< HEAD
3509: NOP4
=======
3509: LD_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3513: PUSH
3514: LD_STRING JMM
3516: STR
3517: PPUSH
3518: LD_INT 1
3520: PPUSH
<<<<<<< HEAD
3521: NOP4
3525: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3526: NOP4
=======
3521: CALL 6214 0 2
3525: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3526: LD_EXP 12
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3530: PUSH
3531: LD_INT 1
3533: EQUAL
3534: PUSH
<<<<<<< HEAD
3535: NOP4
=======
3535: LD_EXP 12
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3539: PUSH
3540: LD_INT 3
3542: EQUAL
3543: OR
3544: IFFALSE 3568
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
3546: NOP4
3550: PUSH
<<<<<<< HEAD
3551: NOP4
=======
3551: LD_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3555: PUSH
3556: LD_STRING Brown
3558: STR
3559: PPUSH
3560: LD_INT 1
3562: PPUSH
<<<<<<< HEAD
3563: NOP4
3567: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
3568: NOP4
=======
3563: CALL 6214 0 2
3567: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
3568: LD_EXP 12
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3572: PUSH
3573: LD_INT 2
3575: EQUAL
3576: PUSH
<<<<<<< HEAD
3577: NOP4
=======
3577: LD_EXP 12
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3581: PUSH
3582: LD_INT 3
3584: EQUAL
3585: OR
3586: IFFALSE 3610
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
3588: NOP4
3592: PUSH
<<<<<<< HEAD
3593: NOP4
=======
3593: LD_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3597: PUSH
3598: LD_STRING Donaldson
3600: STR
3601: PPUSH
3602: LD_INT 1
3604: PPUSH
<<<<<<< HEAD
3605: NOP4
=======
3605: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3609: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3610: NOP4
3614: PUSH
<<<<<<< HEAD
3615: NOP4
=======
3615: LD_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3619: PUSH
3620: LD_STRING Bobby
3622: STR
3623: PPUSH
3624: LD_INT 1
3626: PPUSH
<<<<<<< HEAD
3627: NOP4
=======
3627: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3631: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3632: NOP4
3636: PUSH
<<<<<<< HEAD
3637: NOP4
=======
3637: LD_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3641: PUSH
3642: LD_STRING Cyrus
3644: STR
3645: PPUSH
3646: LD_INT 1
3648: PPUSH
<<<<<<< HEAD
3649: NOP4
=======
3649: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3653: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3654: NOP4
3658: PUSH
<<<<<<< HEAD
3659: NOP4
=======
3659: LD_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3663: PUSH
3664: LD_STRING Lisa
3666: STR
3667: PPUSH
3668: LD_INT 1
3670: PPUSH
<<<<<<< HEAD
3671: NOP4
=======
3671: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3675: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3676: NOP4
3680: PUSH
<<<<<<< HEAD
3681: NOP4
=======
3681: LD_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3685: PUSH
3686: LD_STRING Frank
3688: STR
3689: PPUSH
3690: LD_INT 1
3692: PPUSH
<<<<<<< HEAD
3693: NOP4
=======
3693: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3697: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3698: NOP4
3702: PUSH
<<<<<<< HEAD
3703: NOP4
=======
3703: LD_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3707: PUSH
3708: LD_STRING Gladstone
3710: STR
3711: PPUSH
3712: LD_INT 1
3714: PPUSH
<<<<<<< HEAD
3715: NOP4
=======
3715: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3719: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3720: NOP4
3724: PUSH
<<<<<<< HEAD
3725: NOP4
=======
3725: LD_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3729: PUSH
3730: LD_STRING Kikuchi
3732: STR
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
<<<<<<< HEAD
3737: NOP4
3741: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3742: NOP4
=======
3737: CALL 6214 0 2
3741: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3742: LD_EXP 12
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3746: PUSH
3747: LD_INT 1
3749: EQUAL
3750: PUSH
<<<<<<< HEAD
3751: NOP4
=======
3751: LD_EXP 12
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3755: PUSH
3756: LD_INT 3
3758: EQUAL
3759: OR
3760: IFFALSE 3777
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3762: NOP4
3766: PPUSH
3767: LD_INT 4
3769: PPUSH
3770: LD_INT 0
3772: PPUSH
3773: NOP4
// if gammaCommander = 2 or gammaCommander = 3 then
<<<<<<< HEAD
3777: NOP4
=======
3777: LD_EXP 12
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3781: PUSH
3782: LD_INT 2
3784: EQUAL
3785: PUSH
<<<<<<< HEAD
3786: NOP4
=======
3786: LD_EXP 12
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3790: PUSH
3791: LD_INT 3
3793: EQUAL
3794: OR
3795: IFFALSE 3812
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3797: NOP4
3801: PPUSH
3802: LD_INT 4
3804: PPUSH
3805: LD_INT 0
3807: PPUSH
3808: NOP4
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3812: NOP4
3816: PUSH
3817: LD_INT 4
3819: PPUSH
3820: LD_INT 22
3822: PUSH
3823: LD_INT 1
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 21
3832: PUSH
3833: LD_INT 2
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 58
3842: PUSH
3843: EMPTY
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: PPUSH
3851: NOP4
3855: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3856: NOP4
3860: PUSH
<<<<<<< HEAD
3861: NOP4
=======
3861: LD_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3865: PUSH
3866: LD_STRING JMM
3868: STR
3869: PPUSH
3870: LD_INT 1
3872: PPUSH
<<<<<<< HEAD
3873: NOP4
=======
3873: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3877: ST_TO_ADDR
// if veh > 0 then
3878: NOP4
3882: PUSH
3883: LD_INT 0
3885: GREATER
3886: IFFALSE 3908
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
3888: NOP4
3892: PPUSH
3893: NOP4
3897: PUSH
3898: LD_INT 1
3900: ARRAY
3901: PPUSH
3902: NOP4
// end else
3906: GO 3923
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
3908: NOP4
3912: PPUSH
3913: LD_INT 4
3915: PPUSH
3916: LD_INT 0
3918: PPUSH
3919: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3923: NOP4
3927: PUSH
3928: LD_INT 4
3930: PPUSH
3931: LD_INT 22
3933: PUSH
3934: LD_INT 1
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 21
3943: PUSH
3944: LD_INT 2
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 58
3953: PUSH
3954: EMPTY
3955: LIST
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: LIST
3961: PPUSH
3962: NOP4
3966: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3967: NOP4
3971: PUSH
<<<<<<< HEAD
3972: NOP4
=======
3972: LD_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3976: PUSH
3977: LD_STRING Bobby
3979: STR
3980: PPUSH
3981: LD_INT 1
3983: PPUSH
<<<<<<< HEAD
3984: NOP4
=======
3984: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
3988: ST_TO_ADDR
// if veh > 0 then
3989: NOP4
3993: PUSH
3994: LD_INT 0
3996: GREATER
3997: IFFALSE 4019
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
3999: NOP4
4003: PPUSH
4004: NOP4
4008: PUSH
4009: LD_INT 1
4011: ARRAY
4012: PPUSH
4013: NOP4
// end else
4017: GO 4034
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4019: NOP4
4023: PPUSH
4024: LD_INT 4
4026: PPUSH
4027: LD_INT 0
4029: PPUSH
4030: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4034: NOP4
4038: PUSH
4039: LD_INT 4
4041: PPUSH
4042: LD_INT 22
4044: PUSH
4045: LD_INT 1
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: PUSH
4052: LD_INT 21
4054: PUSH
4055: LD_INT 2
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 58
4064: PUSH
4065: EMPTY
4066: LIST
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: PPUSH
4073: NOP4
4077: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4078: NOP4
4082: PUSH
<<<<<<< HEAD
4083: NOP4
=======
4083: LD_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
4087: PUSH
4088: LD_STRING Cyrus
4090: STR
4091: PPUSH
4092: LD_INT 1
4094: PPUSH
<<<<<<< HEAD
4095: NOP4
=======
4095: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
4099: ST_TO_ADDR
// if veh > 0 then
4100: NOP4
4104: PUSH
4105: LD_INT 0
4107: GREATER
4108: IFFALSE 4130
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
4110: NOP4
4114: PPUSH
4115: NOP4
4119: PUSH
4120: LD_INT 1
4122: ARRAY
4123: PPUSH
4124: NOP4
// end else
4128: GO 4145
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4130: NOP4
4134: PPUSH
4135: LD_INT 4
4137: PPUSH
4138: LD_INT 0
4140: PPUSH
4141: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4145: NOP4
4149: PUSH
4150: LD_INT 4
4152: PPUSH
4153: LD_INT 22
4155: PUSH
4156: LD_INT 1
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 21
4165: PUSH
4166: LD_INT 2
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 58
4175: PUSH
4176: EMPTY
4177: LIST
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: LIST
4183: PPUSH
4184: NOP4
4188: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4189: NOP4
4193: PUSH
<<<<<<< HEAD
4194: NOP4
=======
4194: LD_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
4198: PUSH
4199: LD_STRING Lisa
4201: STR
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
<<<<<<< HEAD
4206: NOP4
=======
4206: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
4210: ST_TO_ADDR
// if veh > 0 then
4211: NOP4
4215: PUSH
4216: LD_INT 0
4218: GREATER
4219: IFFALSE 4241
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
4221: NOP4
4225: PPUSH
4226: NOP4
4230: PUSH
4231: LD_INT 1
4233: ARRAY
4234: PPUSH
4235: NOP4
// end else
4239: GO 4256
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4241: NOP4
4245: PPUSH
4246: LD_INT 4
4248: PPUSH
4249: LD_INT 0
4251: PPUSH
4252: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4256: NOP4
4260: PUSH
4261: LD_INT 4
4263: PPUSH
4264: LD_INT 22
4266: PUSH
4267: LD_INT 1
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: LD_INT 21
4276: PUSH
4277: LD_INT 2
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 58
4286: PUSH
4287: EMPTY
4288: LIST
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: PPUSH
4295: NOP4
4299: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
4300: NOP4
4304: PUSH
<<<<<<< HEAD
4305: NOP4
=======
4305: LD_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
4309: PUSH
4310: LD_STRING Frank
4312: STR
4313: PPUSH
4314: LD_INT 1
4316: PPUSH
<<<<<<< HEAD
4317: NOP4
=======
4317: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
4321: ST_TO_ADDR
// if veh > 0 then
4322: NOP4
4326: PUSH
4327: LD_INT 0
4329: GREATER
4330: IFFALSE 4352
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
4332: NOP4
4336: PPUSH
4337: NOP4
4341: PUSH
4342: LD_INT 1
4344: ARRAY
4345: PPUSH
4346: NOP4
// end else
4350: GO 4367
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
4352: NOP4
4356: PPUSH
4357: LD_INT 4
4359: PPUSH
4360: LD_INT 0
4362: PPUSH
4363: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4367: NOP4
4371: PUSH
4372: LD_INT 4
4374: PPUSH
4375: LD_INT 22
4377: PUSH
4378: LD_INT 1
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: LD_INT 21
4387: PUSH
4388: LD_INT 2
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 58
4397: PUSH
4398: EMPTY
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PPUSH
4406: NOP4
4410: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
4411: NOP4
4415: PUSH
<<<<<<< HEAD
4416: NOP4
=======
4416: LD_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
4420: PUSH
4421: LD_STRING Gladstone
4423: STR
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
<<<<<<< HEAD
4428: NOP4
=======
4428: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
4432: ST_TO_ADDR
// if veh > 0 then
4433: NOP4
4437: PUSH
4438: LD_INT 0
4440: GREATER
4441: IFFALSE 4463
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
4443: NOP4
4447: PPUSH
4448: NOP4
4452: PUSH
4453: LD_INT 1
4455: ARRAY
4456: PPUSH
4457: NOP4
// end else
4461: GO 4478
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4463: NOP4
4467: PPUSH
4468: LD_INT 4
4470: PPUSH
4471: LD_INT 0
4473: PPUSH
4474: NOP4
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4478: NOP4
4482: PUSH
4483: LD_INT 4
4485: PPUSH
4486: LD_INT 22
4488: PUSH
4489: LD_INT 1
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 21
4498: PUSH
4499: LD_INT 2
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 58
4508: PUSH
4509: EMPTY
4510: LIST
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: LIST
4516: PPUSH
4517: NOP4
4521: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4522: NOP4
4526: PUSH
<<<<<<< HEAD
4527: NOP4
=======
4527: LD_EXP 43
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
4531: PUSH
4532: LD_STRING Kikuchi
4534: STR
4535: PPUSH
4536: LD_INT 1
4538: PPUSH
<<<<<<< HEAD
4539: NOP4
=======
4539: CALL 6214 0 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
4543: ST_TO_ADDR
// if veh > 0 then
4544: NOP4
4548: PUSH
4549: LD_INT 0
4551: GREATER
4552: IFFALSE 4574
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
4554: NOP4
4558: PPUSH
4559: NOP4
4563: PUSH
4564: LD_INT 1
4566: ARRAY
4567: PPUSH
4568: NOP4
// end else
4572: GO 4589
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
4574: NOP4
4578: PPUSH
4579: LD_INT 4
4581: PPUSH
4582: LD_INT 0
4584: PPUSH
<<<<<<< HEAD
4585: NOP4
// end ; other = CreateCharacterSet ( 07c_others ) ;
4589: NOP4
=======
4585: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4589: LD_ADDR_VAR 0 5
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
4593: PUSH
4594: LD_INT 4
4596: PPUSH
<<<<<<< HEAD
4597: NOP4
4601: ST_TO_ADDR
// for i in other do
4602: NOP4
4606: PUSH
4607: NOP4
4611: PUSH
4612: FOR_IN
4613: IFFALSE 4706
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4615: NOP4
=======
4597: LD_INT 22
4599: PUSH
4600: LD_INT 1
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 21
4609: PUSH
4610: LD_INT 2
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 58
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
4619: PUSH
4620: EMPTY
4621: LIST
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: PPUSH
4628: CALL_OW 70
4632: ST_TO_ADDR
// Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
4633: LD_ADDR_EXP 10
4637: PUSH
4638: LD_EXP 43
4642: PUSH
<<<<<<< HEAD
4643: LD_INT 58
4645: PUSH
4646: EMPTY
4647: LIST
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: PPUSH
4654: NOP4
4658: ST_TO_ADDR
// if veh > 0 then
4659: NOP4
4663: PUSH
4664: LD_INT 0
4666: GREATER
4667: IFFALSE 4689
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4669: NOP4
4673: PPUSH
4674: NOP4
4678: PUSH
4679: LD_INT 1
4681: ARRAY
4682: PPUSH
4683: NOP4
=======
4643: LD_STRING Khatam
4645: STR
4646: PPUSH
4647: LD_INT 1
4649: PPUSH
4650: CALL 6214 0 2
4654: ST_TO_ADDR
// if veh > 0 then
4655: LD_VAR 0 5
4659: PUSH
4660: LD_INT 0
4662: GREATER
4663: IFFALSE 4685
// begin PlaceHumanInUnit ( Khatam , veh [ 1 ] ) ;
4665: LD_EXP 10
4669: PPUSH
4670: LD_VAR 0 5
4674: PUSH
4675: LD_INT 1
4677: ARRAY
4678: PPUSH
4679: CALL_OW 52
// end else
4683: GO 4700
// begin PlaceUnitArea ( Khatam , GammaSupport , false ) ;
4685: LD_EXP 10
4689: PPUSH
4690: LD_INT 4
4692: PPUSH
4693: LD_INT 0
4695: PPUSH
4696: CALL_OW 49
// end ; other = CreateCharacterSet ( 07c_others ) ;
4700: LD_ADDR_VAR 0 3
4704: PUSH
4705: LD_STRING 07c_others
4707: PPUSH
4708: CALL_OW 31
4712: ST_TO_ADDR
// for i in other do
4713: LD_ADDR_VAR 0 2
4717: PUSH
4718: LD_VAR 0 3
4722: PUSH
4723: FOR_IN
4724: IFFALSE 4817
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4726: LD_ADDR_VAR 0 5
4730: PUSH
4731: LD_INT 4
4733: PPUSH
4734: LD_INT 22
4736: PUSH
4737: LD_INT 1
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 21
4746: PUSH
4747: LD_INT 2
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: LD_INT 58
4756: PUSH
4757: EMPTY
4758: LIST
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: PPUSH
4765: CALL_OW 70
4769: ST_TO_ADDR
// if veh > 0 then
4770: LD_VAR 0 5
4774: PUSH
4775: LD_INT 0
4777: GREATER
4778: IFFALSE 4800
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4780: LD_VAR 0 2
4784: PPUSH
4785: LD_VAR 0 5
4789: PUSH
4790: LD_INT 1
4792: ARRAY
4793: PPUSH
4794: CALL_OW 52
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
4798: GO 4815
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
<<<<<<< HEAD
4689: NOP4
4693: PPUSH
4694: LD_INT 4
4696: PPUSH
4697: LD_INT 0
4699: PPUSH
4700: NOP4
=======
4800: LD_VAR 0 2
4804: PPUSH
4805: LD_INT 4
4807: PPUSH
4808: LD_INT 0
4810: PPUSH
4811: CALL_OW 49
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ;
4815: GO 4723
4817: POP
4818: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
<<<<<<< HEAD
4708: LD_INT 4
4710: PPUSH
4711: LD_INT 22
4713: PUSH
4714: LD_INT 1
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PUSH
4721: EMPTY
4722: LIST
4723: PPUSH
4724: NOP4
4728: PPUSH
4729: LD_INT 53
4731: PPUSH
4732: LD_INT 19
4734: PPUSH
4735: NOP4
=======
4819: LD_INT 4
4821: PPUSH
4822: LD_INT 22
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: PPUSH
4835: CALL_OW 70
4839: PPUSH
4840: LD_INT 53
4842: PPUSH
4843: LD_INT 19
4845: PPUSH
4846: CALL_OW 111
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
4850: LD_VAR 0 1
4854: RET
// export function PrepareSikorsky ; begin
4855: LD_INT 0
4857: PPUSH
// uc_side = 4 ;
4858: LD_ADDR_OWVAR 20
4862: PUSH
4863: LD_INT 4
4865: ST_TO_ADDR
// uc_nation = 1 ;
4866: LD_ADDR_OWVAR 21
4870: PUSH
4871: LD_INT 1
4873: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
<<<<<<< HEAD
4763: NOP4
4767: PUSH
4768: LD_STRING Sikorski
4770: PPUSH
4771: LD_INT 0
4773: PPUSH
4774: NOP4
4778: ST_TO_ADDR
=======
4874: LD_ADDR_EXP 16
4878: PUSH
4879: LD_STRING Sikorski
4881: PPUSH
4882: LD_INT 0
4884: PPUSH
4885: CALL 6214 0 2
4889: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// vc_engine = 1 ;
4890: LD_ADDR_OWVAR 39
4894: PUSH
4895: LD_INT 1
4897: ST_TO_ADDR
// vc_control = 1 ;
4898: LD_ADDR_OWVAR 38
4902: PUSH
4903: LD_INT 1
4905: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
<<<<<<< HEAD
4795: LD_ADDR_OWVAR 40
4799: PUSH
4800: LD_INT 5
4802: PUSH
4803: LD_INT 3
4805: PUSH
4806: LD_INT 4
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: PUSH
4814: NOP4
4818: ARRAY
4819: ST_TO_ADDR
=======
4906: LD_ADDR_OWVAR 40
4910: PUSH
4911: LD_INT 5
4913: PUSH
4914: LD_INT 3
4916: PUSH
4917: LD_INT 4
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: PUSH
4925: LD_OWVAR 67
4929: ARRAY
4930: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// vc_chassis = 4 ;
4931: LD_ADDR_OWVAR 37
4935: PUSH
4936: LD_INT 4
4938: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
<<<<<<< HEAD
4828: NOP4
4832: PUSH
4833: NOP4
4837: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
4838: NOP4
4842: PPUSH
4843: LD_INT 9
4845: PPUSH
4846: LD_INT 0
4848: PPUSH
4849: NOP4
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
4853: NOP4
4857: PPUSH
4858: NOP4
4862: PPUSH
4863: NOP4
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
4867: NOP4
4871: PPUSH
4872: LD_INT 5
4874: PPUSH
4875: NOP4
=======
4939: LD_ADDR_EXP 17
4943: PUSH
4944: CALL_OW 45
4948: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
4949: LD_EXP 17
4953: PPUSH
4954: LD_INT 9
4956: PPUSH
4957: LD_INT 0
4959: PPUSH
4960: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
4964: LD_EXP 16
4968: PPUSH
4969: LD_EXP 17
4973: PPUSH
4974: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
4978: LD_EXP 17
4982: PPUSH
4983: LD_INT 5
4985: PPUSH
4986: CALL_OW 113
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
4990: LD_VAR 0 1
4994: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
4995: LD_INT 0
4997: PPUSH
4998: PPUSH
4999: PPUSH
5000: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
<<<<<<< HEAD
4890: NOP4
4894: PUSH
4895: DOUBLE
4896: LD_INT 1
4898: DEC
4899: ST_TO_ADDR
4900: LD_INT 8
4902: PUSH
4903: LD_INT 7
4905: PUSH
4906: LD_INT 7
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: PUSH
4914: NOP4
4918: ARRAY
4919: PUSH
4920: FOR_TO
4921: IFFALSE 5018
=======
5001: LD_ADDR_VAR 0 2
5005: PUSH
5006: DOUBLE
5007: LD_INT 1
5009: DEC
5010: ST_TO_ADDR
5011: LD_INT 8
5013: PUSH
5014: LD_INT 7
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: PUSH
5025: LD_OWVAR 67
5029: ARRAY
5030: PUSH
5031: FOR_TO
5032: IFFALSE 5129
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// begin uc_side = 4 ;
5034: LD_ADDR_OWVAR 20
5038: PUSH
5039: LD_INT 4
5041: ST_TO_ADDR
// uc_nation = 1 ;
5042: LD_ADDR_OWVAR 21
5046: PUSH
5047: LD_INT 1
5049: ST_TO_ADDR
// hc_name =  ;
5050: LD_ADDR_OWVAR 26
5054: PUSH
5055: LD_STRING 
5057: ST_TO_ADDR
// hc_gallery =  ;
5058: LD_ADDR_OWVAR 33
5062: PUSH
5063: LD_STRING 
5065: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
<<<<<<< HEAD
4955: LD_INT 0
4957: PPUSH
4958: LD_INT 1
4960: PPUSH
4961: LD_INT 5
4963: PPUSH
4964: LD_INT 8
4966: PPUSH
4967: NOP4
4971: PPUSH
4972: NOP4
// un = CreateHuman ;
4976: NOP4
4980: PUSH
4981: NOP4
4985: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4986: NOP4
4990: PPUSH
4991: LD_INT 9
4993: PPUSH
4994: LD_INT 0
4996: PPUSH
4997: NOP4
// ComMoveXY ( un , 53 , 23 ) ;
5001: NOP4
5005: PPUSH
5006: LD_INT 53
5008: PPUSH
5009: LD_INT 23
5011: PPUSH
5012: NOP4
=======
5066: LD_INT 0
5068: PPUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_INT 5
5074: PPUSH
5075: LD_INT 8
5077: PPUSH
5078: CALL_OW 12
5082: PPUSH
5083: CALL_OW 380
// un = CreateHuman ;
5087: LD_ADDR_VAR 0 3
5091: PUSH
5092: CALL_OW 44
5096: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5097: LD_VAR 0 3
5101: PPUSH
5102: LD_INT 9
5104: PPUSH
5105: LD_INT 0
5107: PPUSH
5108: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5112: LD_VAR 0 3
5116: PPUSH
5117: LD_INT 53
5119: PPUSH
5120: LD_INT 23
5122: PPUSH
5123: CALL_OW 111
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
5127: GO 5031
5129: POP
5130: POP
// for i = 1 to 3 do
<<<<<<< HEAD
5020: NOP4
5024: PUSH
5025: DOUBLE
5026: LD_INT 1
5028: DEC
5029: ST_TO_ADDR
5030: LD_INT 3
5032: PUSH
5033: FOR_TO
5034: IFFALSE 5131
=======
5131: LD_ADDR_VAR 0 2
5135: PUSH
5136: DOUBLE
5137: LD_INT 1
5139: DEC
5140: ST_TO_ADDR
5141: LD_INT 3
5143: PUSH
5144: FOR_TO
5145: IFFALSE 5242
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// begin uc_side = 4 ;
5147: LD_ADDR_OWVAR 20
5151: PUSH
5152: LD_INT 4
5154: ST_TO_ADDR
// uc_nation = 1 ;
5155: LD_ADDR_OWVAR 21
5159: PUSH
5160: LD_INT 1
5162: ST_TO_ADDR
// hc_name =  ;
5163: LD_ADDR_OWVAR 26
5167: PUSH
5168: LD_STRING 
5170: ST_TO_ADDR
// hc_gallery =  ;
5171: LD_ADDR_OWVAR 33
5175: PUSH
5176: LD_STRING 
5178: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
<<<<<<< HEAD
5068: LD_INT 0
5070: PPUSH
5071: LD_INT 4
5073: PPUSH
5074: LD_INT 5
5076: PPUSH
5077: LD_INT 8
5079: PPUSH
5080: NOP4
5084: PPUSH
5085: NOP4
// un = CreateHuman ;
5089: NOP4
5093: PUSH
5094: NOP4
5098: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5099: NOP4
5103: PPUSH
5104: LD_INT 9
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: NOP4
// ComMoveXY ( un , 53 , 23 ) ;
5114: NOP4
5118: PPUSH
5119: LD_INT 53
5121: PPUSH
5122: LD_INT 23
5124: PPUSH
5125: NOP4
=======
5179: LD_INT 0
5181: PPUSH
5182: LD_INT 4
5184: PPUSH
5185: LD_INT 5
5187: PPUSH
5188: LD_INT 8
5190: PPUSH
5191: CALL_OW 12
5195: PPUSH
5196: CALL_OW 380
// un = CreateHuman ;
5200: LD_ADDR_VAR 0 3
5204: PUSH
5205: CALL_OW 44
5209: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5210: LD_VAR 0 3
5214: PPUSH
5215: LD_INT 9
5217: PPUSH
5218: LD_INT 0
5220: PPUSH
5221: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5225: LD_VAR 0 3
5229: PPUSH
5230: LD_INT 53
5232: PPUSH
5233: LD_INT 23
5235: PPUSH
5236: CALL_OW 111
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
5240: GO 5144
5242: POP
5243: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
<<<<<<< HEAD
5133: NOP4
5137: PUSH
5138: DOUBLE
5139: LD_INT 1
5141: DEC
5142: ST_TO_ADDR
5143: LD_INT 9
5145: PUSH
5146: LD_INT 8
5148: PUSH
5149: LD_INT 7
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: LIST
5156: PUSH
5157: NOP4
5161: ARRAY
5162: PUSH
5163: FOR_TO
5164: IFFALSE 5360
=======
5244: LD_ADDR_VAR 0 2
5248: PUSH
5249: DOUBLE
5250: LD_INT 1
5252: DEC
5253: ST_TO_ADDR
5254: LD_INT 9
5256: PUSH
5257: LD_INT 8
5259: PUSH
5260: LD_INT 7
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: LIST
5267: PUSH
5268: LD_OWVAR 67
5272: ARRAY
5273: PUSH
5274: FOR_TO
5275: IFFALSE 5471
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// begin uc_side = 4 ;
5277: LD_ADDR_OWVAR 20
5281: PUSH
5282: LD_INT 4
5284: ST_TO_ADDR
// uc_nation = 1 ;
5285: LD_ADDR_OWVAR 21
5289: PUSH
5290: LD_INT 1
5292: ST_TO_ADDR
// vc_engine = 1 ;
5293: LD_ADDR_OWVAR 39
5297: PUSH
5298: LD_INT 1
5300: ST_TO_ADDR
// vc_control = 1 ;
5301: LD_ADDR_OWVAR 38
5305: PUSH
5306: LD_INT 1
5308: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
<<<<<<< HEAD
5198: LD_ADDR_OWVAR 40
5202: PUSH
5203: LD_INT 3
5205: PUSH
5206: LD_INT 4
5208: PUSH
5209: LD_INT 5
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: PUSH
5221: LD_INT 1
5223: PPUSH
5224: LD_INT 4
5226: PPUSH
5227: NOP4
5231: ARRAY
5232: ST_TO_ADDR
=======
5309: LD_ADDR_OWVAR 40
5313: PUSH
5314: LD_INT 3
5316: PUSH
5317: LD_INT 4
5319: PUSH
5320: LD_INT 5
5322: PUSH
5323: LD_INT 6
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: PUSH
5332: LD_INT 1
5334: PPUSH
5335: LD_INT 4
5337: PPUSH
5338: CALL_OW 12
5342: ARRAY
5343: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// vc_chassis = 4 ;
5344: LD_ADDR_OWVAR 37
5348: PUSH
5349: LD_INT 4
5351: ST_TO_ADDR
// veh = CreateVehicle ;
<<<<<<< HEAD
5241: NOP4
5245: PUSH
5246: NOP4
5250: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
5251: NOP4
5255: PPUSH
5256: LD_INT 9
5258: PPUSH
5259: LD_INT 0
5261: PPUSH
5262: NOP4
=======
5352: LD_ADDR_VAR 0 4
5356: PUSH
5357: CALL_OW 45
5361: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
5362: LD_VAR 0 4
5366: PPUSH
5367: LD_INT 9
5369: PPUSH
5370: LD_INT 0
5372: PPUSH
5373: CALL_OW 49
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// hc_name =  ;
5377: LD_ADDR_OWVAR 26
5381: PUSH
5382: LD_STRING 
5384: ST_TO_ADDR
// hc_gallery =  ;
5385: LD_ADDR_OWVAR 33
5389: PUSH
5390: LD_STRING 
5392: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
<<<<<<< HEAD
5282: LD_INT 0
5284: PPUSH
5285: LD_INT 3
5287: PPUSH
5288: LD_INT 5
5290: PPUSH
5291: LD_INT 8
5293: PPUSH
5294: NOP4
5298: PPUSH
5299: NOP4
// un = CreateHuman ;
5303: NOP4
5307: PUSH
5308: NOP4
5312: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5313: NOP4
5317: PPUSH
5318: NOP4
5322: PPUSH
5323: NOP4
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
5327: NOP4
5331: PUSH
5332: NOP4
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PPUSH
5341: LD_INT 53
5343: PPUSH
5344: LD_INT 23
5346: PPUSH
5347: NOP4
// wait ( 0 0$5 ) ;
5351: LD_INT 175
5353: PPUSH
5354: NOP4
=======
5393: LD_INT 0
5395: PPUSH
5396: LD_INT 3
5398: PPUSH
5399: LD_INT 5
5401: PPUSH
5402: LD_INT 8
5404: PPUSH
5405: CALL_OW 12
5409: PPUSH
5410: CALL_OW 380
// un = CreateHuman ;
5414: LD_ADDR_VAR 0 3
5418: PUSH
5419: CALL_OW 44
5423: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5424: LD_VAR 0 3
5428: PPUSH
5429: LD_VAR 0 4
5433: PPUSH
5434: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
5438: LD_VAR 0 4
5442: PUSH
5443: LD_VAR 0 3
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PPUSH
5452: LD_INT 53
5454: PPUSH
5455: LD_INT 23
5457: PPUSH
5458: CALL_OW 111
// wait ( 0 0$5 ) ;
5462: LD_INT 175
5464: PPUSH
5465: CALL_OW 67
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
5469: GO 5274
5471: POP
5472: POP
// end ; end_of_file
5473: LD_VAR 0 1
5477: RET
// export function PrepareRussianCommander ; begin
5478: LD_INT 0
5480: PPUSH
// uc_side = 3 ;
5481: LD_ADDR_OWVAR 20
5485: PUSH
5486: LD_INT 3
5488: ST_TO_ADDR
// uc_nation = 3 ;
5489: LD_ADDR_OWVAR 21
5493: PUSH
5494: LD_INT 3
5496: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
<<<<<<< HEAD
5386: NOP4
5390: PUSH
5391: LD_STRING Borodin
5393: PPUSH
5394: NOP4
5398: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
5399: NOP4
5403: PPUSH
5404: LD_INT 25
5406: PPUSH
5407: LD_INT 0
5409: PPUSH
5410: NOP4
=======
5497: LD_ADDR_EXP 24
5501: PUSH
5502: LD_STRING Borodin
5504: PPUSH
5505: CALL_OW 25
5509: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
5510: LD_EXP 24
5514: PPUSH
5515: LD_INT 25
5517: PPUSH
5518: LD_INT 0
5520: PPUSH
5521: CALL_OW 49
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
5525: LD_VAR 0 1
5529: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
5530: LD_INT 0
5532: PPUSH
5533: PPUSH
5534: PPUSH
5535: PPUSH
// for i = 1 to 10 do
<<<<<<< HEAD
5425: NOP4
5429: PUSH
5430: DOUBLE
5431: LD_INT 1
5433: DEC
5434: ST_TO_ADDR
5435: LD_INT 10
5437: PUSH
5438: FOR_TO
5439: IFFALSE 5513
=======
5536: LD_ADDR_VAR 0 2
5540: PUSH
5541: DOUBLE
5542: LD_INT 1
5544: DEC
5545: ST_TO_ADDR
5546: LD_INT 10
5548: PUSH
5549: FOR_TO
5550: IFFALSE 5624
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// begin uc_side = 6 ;
5552: LD_ADDR_OWVAR 20
5556: PUSH
5557: LD_INT 6
5559: ST_TO_ADDR
// uc_nation = 3 ;
5560: LD_ADDR_OWVAR 21
5564: PUSH
5565: LD_INT 3
5567: ST_TO_ADDR
// hc_gallery =  ;
5568: LD_ADDR_OWVAR 33
5572: PUSH
5573: LD_STRING 
5575: ST_TO_ADDR
// hc_name =  ;
5576: LD_ADDR_OWVAR 26
5580: PUSH
5581: LD_STRING 
5583: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
<<<<<<< HEAD
5473: LD_INT 0
5475: PPUSH
5476: LD_INT 1
5478: PPUSH
5479: LD_INT 3
5481: PPUSH
5482: NOP4
// un = CreateHuman ;
5486: NOP4
5490: PUSH
5491: NOP4
5495: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
5496: NOP4
5500: PPUSH
5501: LD_INT 1
5503: PPUSH
5504: LD_INT 0
5506: PPUSH
5507: NOP4
=======
5584: LD_INT 0
5586: PPUSH
5587: LD_INT 1
5589: PPUSH
5590: LD_INT 3
5592: PPUSH
5593: CALL_OW 380
// un = CreateHuman ;
5597: LD_ADDR_VAR 0 3
5601: PUSH
5602: CALL_OW 44
5606: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
5607: LD_VAR 0 3
5611: PPUSH
5612: LD_INT 1
5614: PPUSH
5615: LD_INT 0
5617: PPUSH
5618: CALL_OW 49
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
5622: GO 5549
5624: POP
5625: POP
// for i = 1 to 3 do
<<<<<<< HEAD
5515: NOP4
5519: PUSH
5520: DOUBLE
5521: LD_INT 1
5523: DEC
5524: ST_TO_ADDR
5525: LD_INT 3
5527: PUSH
5528: FOR_TO
5529: IFFALSE 5678
=======
5626: LD_ADDR_VAR 0 2
5630: PUSH
5631: DOUBLE
5632: LD_INT 1
5634: DEC
5635: ST_TO_ADDR
5636: LD_INT 3
5638: PUSH
5639: FOR_TO
5640: IFFALSE 5789
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// begin uc_side = 6 ;
5642: LD_ADDR_OWVAR 20
5646: PUSH
5647: LD_INT 6
5649: ST_TO_ADDR
// uc_nation = 3 ;
5650: LD_ADDR_OWVAR 21
5654: PUSH
5655: LD_INT 3
5657: ST_TO_ADDR
// vc_engine = 1 ;
5658: LD_ADDR_OWVAR 39
5662: PUSH
5663: LD_INT 1
5665: ST_TO_ADDR
// vc_control = 1 ;
5666: LD_ADDR_OWVAR 38
5670: PUSH
5671: LD_INT 1
5673: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
<<<<<<< HEAD
5563: LD_ADDR_OWVAR 40
5567: PUSH
5568: LD_INT 43
5570: PUSH
5571: LD_INT 44
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 1
5580: PPUSH
5581: LD_INT 2
5583: PPUSH
5584: NOP4
5588: ARRAY
5589: ST_TO_ADDR
=======
5674: LD_ADDR_OWVAR 40
5678: PUSH
5679: LD_INT 43
5681: PUSH
5682: LD_INT 44
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 1
5691: PPUSH
5692: LD_INT 2
5694: PPUSH
5695: CALL_OW 12
5699: ARRAY
5700: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// vc_chassis = 22 ;
5701: LD_ADDR_OWVAR 37
5705: PUSH
5706: LD_INT 22
5708: ST_TO_ADDR
// veh = CreateVehicle ;
<<<<<<< HEAD
5598: NOP4
5602: PUSH
5603: NOP4
5607: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
5608: NOP4
5612: PPUSH
5613: LD_INT 2
5615: PPUSH
5616: LD_INT 0
5618: PPUSH
5619: NOP4
=======
5709: LD_ADDR_VAR 0 4
5713: PUSH
5714: CALL_OW 45
5718: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
5719: LD_VAR 0 4
5723: PPUSH
5724: LD_INT 2
5726: PPUSH
5727: LD_INT 0
5729: PPUSH
5730: CALL_OW 49
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// hc_gallery =  ;
5734: LD_ADDR_OWVAR 33
5738: PUSH
5739: LD_STRING 
5741: ST_TO_ADDR
// hc_name =  ;
5742: LD_ADDR_OWVAR 26
5746: PUSH
5747: LD_STRING 
5749: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
<<<<<<< HEAD
5639: LD_INT 0
5641: PPUSH
5642: LD_INT 3
5644: PPUSH
5645: LD_INT 4
5647: PPUSH
5648: NOP4
// un = CreateHuman ;
5652: NOP4
5656: PUSH
5657: NOP4
5661: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5662: NOP4
5666: PPUSH
5667: NOP4
5671: PPUSH
5672: NOP4
=======
5750: LD_INT 0
5752: PPUSH
5753: LD_INT 3
5755: PPUSH
5756: LD_INT 4
5758: PPUSH
5759: CALL_OW 380
// un = CreateHuman ;
5763: LD_ADDR_VAR 0 3
5767: PUSH
5768: CALL_OW 44
5772: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5773: LD_VAR 0 3
5777: PPUSH
5778: LD_VAR 0 4
5782: PPUSH
5783: CALL_OW 52
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
5787: GO 5639
5789: POP
5790: POP
// end ;
5791: LD_VAR 0 1
5795: RET
// export function PrepareRussians ; var i , un ; begin
5796: LD_INT 0
5798: PPUSH
5799: PPUSH
5800: PPUSH
// for i = 1 to 14 do
<<<<<<< HEAD
5690: NOP4
5694: PUSH
5695: DOUBLE
5696: LD_INT 1
5698: DEC
5699: ST_TO_ADDR
5700: LD_INT 14
5702: PUSH
5703: FOR_TO
5704: IFFALSE 5790
=======
5801: LD_ADDR_VAR 0 2
5805: PUSH
5806: DOUBLE
5807: LD_INT 1
5809: DEC
5810: ST_TO_ADDR
5811: LD_INT 14
5813: PUSH
5814: FOR_TO
5815: IFFALSE 5901
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// begin uc_side = 3 ;
5817: LD_ADDR_OWVAR 20
5821: PUSH
5822: LD_INT 3
5824: ST_TO_ADDR
// uc_nation = 3 ;
5825: LD_ADDR_OWVAR 21
5829: PUSH
5830: LD_INT 3
5832: ST_TO_ADDR
// hc_gallery =  ;
5833: LD_ADDR_OWVAR 33
5837: PUSH
5838: LD_STRING 
5840: ST_TO_ADDR
// hc_name =  ;
5841: LD_ADDR_OWVAR 26
5845: PUSH
5846: LD_STRING 
5848: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
<<<<<<< HEAD
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 1
5743: PPUSH
5744: NOP4
5748: PPUSH
5749: NOP4
5753: PPUSH
5754: NOP4
5758: PPUSH
5759: NOP4
// un = CreateHuman ;
5763: NOP4
5767: PUSH
5768: NOP4
5772: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5773: NOP4
5777: PPUSH
5778: LD_INT 3
5780: PPUSH
5781: LD_INT 0
5783: PPUSH
5784: NOP4
=======
5849: LD_INT 0
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: LD_EXP 25
5859: PPUSH
5860: LD_EXP 26
5864: PPUSH
5865: CALL_OW 12
5869: PPUSH
5870: CALL_OW 380
// un = CreateHuman ;
5874: LD_ADDR_VAR 0 3
5878: PUSH
5879: CALL_OW 44
5883: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5884: LD_VAR 0 3
5888: PPUSH
5889: LD_INT 3
5891: PPUSH
5892: LD_INT 0
5894: PPUSH
5895: CALL_OW 49
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
5899: GO 5814
5901: POP
5902: POP
// for i = 1 to 6 do
<<<<<<< HEAD
5792: NOP4
5796: PUSH
5797: DOUBLE
5798: LD_INT 1
5800: DEC
5801: ST_TO_ADDR
5802: LD_INT 6
5804: PUSH
5805: FOR_TO
5806: IFFALSE 5892
=======
5903: LD_ADDR_VAR 0 2
5907: PUSH
5908: DOUBLE
5909: LD_INT 1
5911: DEC
5912: ST_TO_ADDR
5913: LD_INT 6
5915: PUSH
5916: FOR_TO
5917: IFFALSE 6003
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// begin uc_side = 3 ;
5919: LD_ADDR_OWVAR 20
5923: PUSH
5924: LD_INT 3
5926: ST_TO_ADDR
// uc_nation = 3 ;
5927: LD_ADDR_OWVAR 21
5931: PUSH
5932: LD_INT 3
5934: ST_TO_ADDR
// hc_gallery =  ;
5935: LD_ADDR_OWVAR 33
5939: PUSH
5940: LD_STRING 
5942: ST_TO_ADDR
// hc_name =  ;
5943: LD_ADDR_OWVAR 26
5947: PUSH
5948: LD_STRING 
5950: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
<<<<<<< HEAD
5840: LD_INT 0
5842: PPUSH
5843: LD_INT 2
5845: PPUSH
5846: NOP4
5850: PPUSH
5851: NOP4
5855: PPUSH
5856: NOP4
5860: PPUSH
5861: NOP4
// un = CreateHuman ;
5865: NOP4
5869: PUSH
5870: NOP4
5874: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5875: NOP4
5879: PPUSH
5880: LD_INT 3
5882: PPUSH
5883: LD_INT 0
5885: PPUSH
5886: NOP4
=======
5951: LD_INT 0
5953: PPUSH
5954: LD_INT 2
5956: PPUSH
5957: LD_EXP 25
5961: PPUSH
5962: LD_EXP 26
5966: PPUSH
5967: CALL_OW 12
5971: PPUSH
5972: CALL_OW 380
// un = CreateHuman ;
5976: LD_ADDR_VAR 0 3
5980: PUSH
5981: CALL_OW 44
5985: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5986: LD_VAR 0 3
5990: PPUSH
5991: LD_INT 3
5993: PPUSH
5994: LD_INT 0
5996: PPUSH
5997: CALL_OW 49
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
6001: GO 5916
6003: POP
6004: POP
// for i = 1 to 6 do
<<<<<<< HEAD
5894: NOP4
5898: PUSH
5899: DOUBLE
5900: LD_INT 1
5902: DEC
5903: ST_TO_ADDR
5904: LD_INT 6
5906: PUSH
5907: FOR_TO
5908: IFFALSE 5994
=======
6005: LD_ADDR_VAR 0 2
6009: PUSH
6010: DOUBLE
6011: LD_INT 1
6013: DEC
6014: ST_TO_ADDR
6015: LD_INT 6
6017: PUSH
6018: FOR_TO
6019: IFFALSE 6105
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// begin uc_side = 3 ;
6021: LD_ADDR_OWVAR 20
6025: PUSH
6026: LD_INT 3
6028: ST_TO_ADDR
// uc_nation = 3 ;
6029: LD_ADDR_OWVAR 21
6033: PUSH
6034: LD_INT 3
6036: ST_TO_ADDR
// hc_gallery =  ;
6037: LD_ADDR_OWVAR 33
6041: PUSH
6042: LD_STRING 
6044: ST_TO_ADDR
// hc_name =  ;
6045: LD_ADDR_OWVAR 26
6049: PUSH
6050: LD_STRING 
6052: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
<<<<<<< HEAD
5942: LD_INT 0
5944: PPUSH
5945: LD_INT 3
5947: PPUSH
5948: NOP4
5952: PPUSH
5953: NOP4
5957: PPUSH
5958: NOP4
5962: PPUSH
5963: NOP4
// un = CreateHuman ;
5967: NOP4
5971: PUSH
5972: NOP4
5976: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5977: NOP4
5981: PPUSH
5982: LD_INT 3
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: NOP4
=======
6053: LD_INT 0
6055: PPUSH
6056: LD_INT 3
6058: PPUSH
6059: LD_EXP 25
6063: PPUSH
6064: LD_EXP 26
6068: PPUSH
6069: CALL_OW 12
6073: PPUSH
6074: CALL_OW 380
// un = CreateHuman ;
6078: LD_ADDR_VAR 0 3
6082: PUSH
6083: CALL_OW 44
6087: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6088: LD_VAR 0 3
6092: PPUSH
6093: LD_INT 3
6095: PPUSH
6096: LD_INT 0
6098: PPUSH
6099: CALL_OW 49
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
6103: GO 6018
6105: POP
6106: POP
// for i = 1 to 4 do
<<<<<<< HEAD
5996: NOP4
6000: PUSH
6001: DOUBLE
6002: LD_INT 1
6004: DEC
6005: ST_TO_ADDR
6006: LD_INT 4
6008: PUSH
6009: FOR_TO
6010: IFFALSE 6096
=======
6107: LD_ADDR_VAR 0 2
6111: PUSH
6112: DOUBLE
6113: LD_INT 1
6115: DEC
6116: ST_TO_ADDR
6117: LD_INT 4
6119: PUSH
6120: FOR_TO
6121: IFFALSE 6207
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// begin uc_side = 3 ;
6123: LD_ADDR_OWVAR 20
6127: PUSH
6128: LD_INT 3
6130: ST_TO_ADDR
// uc_nation = 3 ;
6131: LD_ADDR_OWVAR 21
6135: PUSH
6136: LD_INT 3
6138: ST_TO_ADDR
// hc_gallery =  ;
6139: LD_ADDR_OWVAR 33
6143: PUSH
6144: LD_STRING 
6146: ST_TO_ADDR
// hc_name =  ;
6147: LD_ADDR_OWVAR 26
6151: PUSH
6152: LD_STRING 
6154: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
<<<<<<< HEAD
6044: LD_INT 0
6046: PPUSH
6047: LD_INT 4
6049: PPUSH
6050: NOP4
6054: PPUSH
6055: NOP4
6059: PPUSH
6060: NOP4
6064: PPUSH
6065: NOP4
// un = CreateHuman ;
6069: NOP4
6073: PUSH
6074: NOP4
6078: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6079: NOP4
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: LD_INT 0
6089: PPUSH
6090: NOP4
=======
6155: LD_INT 0
6157: PPUSH
6158: LD_INT 4
6160: PPUSH
6161: LD_EXP 25
6165: PPUSH
6166: LD_EXP 26
6170: PPUSH
6171: CALL_OW 12
6175: PPUSH
6176: CALL_OW 380
// un = CreateHuman ;
6180: LD_ADDR_VAR 0 3
6184: PUSH
6185: CALL_OW 44
6189: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6190: LD_VAR 0 3
6194: PPUSH
6195: LD_INT 3
6197: PPUSH
6198: LD_INT 0
6200: PPUSH
6201: CALL_OW 49
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
6205: GO 6120
6207: POP
6208: POP
// end ; end_of_file
6209: LD_VAR 0 1
6213: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6214: LD_INT 0
6216: PPUSH
6217: PPUSH
// if exist_mode then
<<<<<<< HEAD
6107: NOP4
6111: IFFALSE 6130
// unit := CreateCharacter ( ident ) else
6113: NOP4
6117: PUSH
6118: NOP4
6122: PPUSH
6123: NOP4
6127: ST_TO_ADDR
6128: GO 6145
// unit := NewCharacter ( ident ) ;
6130: NOP4
6134: PUSH
6135: NOP4
6139: PPUSH
6140: NOP4
6144: ST_TO_ADDR
// result := unit ;
6145: NOP4
6149: PUSH
6150: NOP4
6154: ST_TO_ADDR
=======
6218: LD_VAR 0 2
6222: IFFALSE 6241
// unit := CreateCharacter ( ident ) else
6224: LD_ADDR_VAR 0 4
6228: PUSH
6229: LD_VAR 0 1
6233: PPUSH
6234: CALL_OW 34
6238: ST_TO_ADDR
6239: GO 6256
// unit := NewCharacter ( ident ) ;
6241: LD_ADDR_VAR 0 4
6245: PUSH
6246: LD_VAR 0 1
6250: PPUSH
6251: CALL_OW 25
6255: ST_TO_ADDR
// result := unit ;
6256: LD_ADDR_VAR 0 3
6260: PUSH
6261: LD_VAR 0 4
6265: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
6266: LD_VAR 0 3
6270: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6271: LD_INT 0
6273: PPUSH
6274: PPUSH
6275: PPUSH
// rnd = rand ( 1 , characters ) ;
<<<<<<< HEAD
6165: NOP4
6169: PUSH
6170: LD_INT 1
6172: PPUSH
6173: NOP4
6177: PPUSH
6178: NOP4
6182: ST_TO_ADDR
// for i = 1 to characters do
6183: NOP4
6187: PUSH
6188: DOUBLE
6189: LD_INT 1
6191: DEC
6192: ST_TO_ADDR
6193: NOP4
6197: PUSH
6198: FOR_TO
6199: IFFALSE 6309
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6201: NOP4
6205: PUSH
6206: NOP4
6210: EQUAL
6211: PUSH
6212: NOP4
6216: PUSH
6217: NOP4
6221: ARRAY
6222: PPUSH
6223: NOP4
6227: PUSH
6228: LD_INT 1
6230: EQUAL
6231: AND
6232: IFFALSE 6254
// Say ( characters [ i ] , dialogMID ) ;
6234: NOP4
6238: PUSH
6239: NOP4
6243: ARRAY
6244: PPUSH
6245: NOP4
6249: PPUSH
6250: NOP4
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6254: NOP4
6258: PUSH
6259: NOP4
6263: EQUAL
6264: PUSH
6265: NOP4
6269: PUSH
6270: NOP4
6274: ARRAY
6275: PPUSH
6276: NOP4
6280: PUSH
6281: LD_INT 2
6283: EQUAL
6284: AND
6285: IFFALSE 6307
// Say ( characters [ i ] , dialogFID ) ;
6287: NOP4
6291: PUSH
6292: NOP4
6296: ARRAY
6297: PPUSH
6298: NOP4
6302: PPUSH
6303: NOP4
=======
6276: LD_ADDR_VAR 0 6
6280: PUSH
6281: LD_INT 1
6283: PPUSH
6284: LD_VAR 0 1
6288: PPUSH
6289: CALL_OW 12
6293: ST_TO_ADDR
// for i = 1 to characters do
6294: LD_ADDR_VAR 0 5
6298: PUSH
6299: DOUBLE
6300: LD_INT 1
6302: DEC
6303: ST_TO_ADDR
6304: LD_VAR 0 1
6308: PUSH
6309: FOR_TO
6310: IFFALSE 6420
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6312: LD_VAR 0 5
6316: PUSH
6317: LD_VAR 0 6
6321: EQUAL
6322: PUSH
6323: LD_VAR 0 1
6327: PUSH
6328: LD_VAR 0 5
6332: ARRAY
6333: PPUSH
6334: CALL_OW 258
6338: PUSH
6339: LD_INT 1
6341: EQUAL
6342: AND
6343: IFFALSE 6365
// Say ( characters [ i ] , dialogMID ) ;
6345: LD_VAR 0 1
6349: PUSH
6350: LD_VAR 0 5
6354: ARRAY
6355: PPUSH
6356: LD_VAR 0 2
6360: PPUSH
6361: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6365: LD_VAR 0 5
6369: PUSH
6370: LD_VAR 0 6
6374: EQUAL
6375: PUSH
6376: LD_VAR 0 1
6380: PUSH
6381: LD_VAR 0 5
6385: ARRAY
6386: PPUSH
6387: CALL_OW 258
6391: PUSH
6392: LD_INT 2
6394: EQUAL
6395: AND
6396: IFFALSE 6418
// Say ( characters [ i ] , dialogFID ) ;
6398: LD_VAR 0 1
6402: PUSH
6403: LD_VAR 0 5
6407: ARRAY
6408: PPUSH
6409: LD_VAR 0 3
6413: PPUSH
6414: CALL_OW 88
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
6418: GO 6309
6420: POP
6421: POP
// end ;
6422: LD_VAR 0 4
6426: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6427: LD_INT 0
6429: PPUSH
6430: PPUSH
6431: PPUSH
// uc_side := GetSide ( b ) ;
<<<<<<< HEAD
6321: LD_ADDR_OWVAR 20
6325: PUSH
6326: NOP4
6330: PPUSH
6331: NOP4
6335: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6336: LD_ADDR_OWVAR 21
6340: PUSH
6341: NOP4
6345: PPUSH
6346: NOP4
6350: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6351: LD_INT 0
6353: PPUSH
6354: LD_INT 1
6356: PPUSH
6357: NOP4
6361: PPUSH
6362: NOP4
// dir := GetDir ( b ) - 3 ;
6366: NOP4
6370: PUSH
6371: NOP4
6375: PPUSH
6376: NOP4
6380: PUSH
6381: LD_INT 3
6383: MINUS
6384: ST_TO_ADDR
// if dir < 0 then
6385: NOP4
6389: PUSH
6390: LD_INT 0
6392: LESS
6393: IFFALSE 6409
// dir := 6 + dir ;
6395: NOP4
6399: PUSH
6400: LD_INT 6
6402: PUSH
6403: NOP4
6407: PLUS
6408: ST_TO_ADDR
// un := CreateHuman ;
6409: NOP4
6413: PUSH
6414: NOP4
6418: ST_TO_ADDR
// SetDir ( un , dir ) ;
6419: NOP4
6423: PPUSH
6424: NOP4
6428: PPUSH
6429: NOP4
// PlaceHumanInUnit ( un , b ) ;
6433: NOP4
6437: PPUSH
6438: NOP4
6442: PPUSH
6443: NOP4
=======
6432: LD_ADDR_OWVAR 20
6436: PUSH
6437: LD_VAR 0 2
6441: PPUSH
6442: CALL_OW 255
6446: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6447: LD_ADDR_OWVAR 21
6451: PUSH
6452: LD_VAR 0 2
6456: PPUSH
6457: CALL_OW 248
6461: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6462: LD_INT 0
6464: PPUSH
6465: LD_INT 1
6467: PPUSH
6468: LD_VAR 0 1
6472: PPUSH
6473: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6477: LD_ADDR_VAR 0 5
6481: PUSH
6482: LD_VAR 0 2
6486: PPUSH
6487: CALL_OW 254
6491: PUSH
6492: LD_INT 3
6494: MINUS
6495: ST_TO_ADDR
// if dir < 0 then
6496: LD_VAR 0 5
6500: PUSH
6501: LD_INT 0
6503: LESS
6504: IFFALSE 6520
// dir := 6 + dir ;
6506: LD_ADDR_VAR 0 5
6510: PUSH
6511: LD_INT 6
6513: PUSH
6514: LD_VAR 0 5
6518: PLUS
6519: ST_TO_ADDR
// un := CreateHuman ;
6520: LD_ADDR_VAR 0 4
6524: PUSH
6525: CALL_OW 44
6529: ST_TO_ADDR
// SetDir ( un , dir ) ;
6530: LD_VAR 0 4
6534: PPUSH
6535: LD_VAR 0 5
6539: PPUSH
6540: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6544: LD_VAR 0 4
6548: PPUSH
6549: LD_VAR 0 2
6553: PPUSH
6554: CALL_OW 52
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
6558: LD_VAR 0 3
6562: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6563: LD_INT 0
6565: PPUSH
6566: PPUSH
6567: PPUSH
6568: PPUSH
// for i = 1 to count do
<<<<<<< HEAD
6458: NOP4
6462: PUSH
6463: DOUBLE
6464: LD_INT 1
6466: DEC
6467: ST_TO_ADDR
6468: NOP4
6472: PUSH
6473: FOR_TO
6474: IFFALSE 6555
// begin uc_side = side ;
6476: LD_ADDR_OWVAR 20
6480: PUSH
6481: NOP4
6485: ST_TO_ADDR
// uc_nation = nation ;
6486: LD_ADDR_OWVAR 21
6490: PUSH
6491: NOP4
6495: ST_TO_ADDR
=======
6569: LD_ADDR_VAR 0 8
6573: PUSH
6574: DOUBLE
6575: LD_INT 1
6577: DEC
6578: ST_TO_ADDR
6579: LD_VAR 0 6
6583: PUSH
6584: FOR_TO
6585: IFFALSE 6666
// begin uc_side = side ;
6587: LD_ADDR_OWVAR 20
6591: PUSH
6592: LD_VAR 0 1
6596: ST_TO_ADDR
// uc_nation = nation ;
6597: LD_ADDR_OWVAR 21
6601: PUSH
6602: LD_VAR 0 2
6606: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// hc_gallery =  ;
6607: LD_ADDR_OWVAR 33
6611: PUSH
6612: LD_STRING 
6614: ST_TO_ADDR
// hc_name =  ;
6615: LD_ADDR_OWVAR 26
6619: PUSH
6620: LD_STRING 
6622: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
<<<<<<< HEAD
6512: LD_INT 0
6514: PPUSH
6515: NOP4
6519: PPUSH
6520: NOP4
6524: PPUSH
6525: NOP4
// un = CreateHuman ;
6529: NOP4
6533: PUSH
6534: NOP4
6538: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6539: NOP4
6543: PPUSH
6544: NOP4
6548: PPUSH
6549: NOP4
=======
6623: LD_INT 0
6625: PPUSH
6626: LD_VAR 0 5
6630: PPUSH
6631: LD_VAR 0 4
6635: PPUSH
6636: CALL_OW 380
// un = CreateHuman ;
6640: LD_ADDR_VAR 0 10
6644: PUSH
6645: CALL_OW 44
6649: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6650: LD_VAR 0 10
6654: PPUSH
6655: LD_VAR 0 3
6659: PPUSH
6660: CALL_OW 52
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
6664: GO 6584
6666: POP
6667: POP
// end ;
6668: LD_VAR 0 7
6672: RET
// export function PrepareDifficulty ; begin
6673: LD_INT 0
6675: PPUSH
// if Difficulty = 1 then
<<<<<<< HEAD
6565: NOP4
6569: PUSH
6570: LD_INT 1
6572: EQUAL
6573: IFFALSE 6591
// begin RuSolMinLevel = 4 ;
6575: NOP4
6579: PUSH
6580: LD_INT 4
6582: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6583: NOP4
6587: PUSH
6588: LD_INT 6
6590: ST_TO_ADDR
// end ; if Difficulty = 2 then
6591: NOP4
6595: PUSH
6596: LD_INT 2
6598: EQUAL
6599: IFFALSE 6669
// begin RuSolMinLevel = 5 ;
6601: NOP4
6605: PUSH
6606: LD_INT 5
6608: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6609: NOP4
6613: PUSH
6614: LD_INT 6
6616: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
6617: LD_INT 51
6619: PPUSH
6620: LD_INT 3
6622: PPUSH
6623: LD_INT 1
6625: PPUSH
6626: NOP4
// SetTech ( 57 , 3 , state_enabled ) ;
6630: LD_INT 57
6632: PPUSH
6633: LD_INT 3
6635: PPUSH
6636: LD_INT 1
6638: PPUSH
6639: NOP4
// SetTech ( 57 , 6 , state_researched ) ;
6643: LD_INT 57
6645: PPUSH
6646: LD_INT 6
6648: PPUSH
6649: LD_INT 2
6651: PPUSH
6652: NOP4
// SetTech ( 51 , 6 , state_researched ) ;
6656: LD_INT 51
6658: PPUSH
6659: LD_INT 6
6661: PPUSH
6662: LD_INT 2
6664: PPUSH
6665: NOP4
// end ; if Difficulty = 3 then
6669: NOP4
6673: PUSH
6674: LD_INT 3
6676: EQUAL
6677: IFFALSE 6760
// begin RuSolMinLevel = 5 ;
6679: NOP4
6683: PUSH
6684: LD_INT 5
6686: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6687: NOP4
6691: PUSH
6692: LD_INT 6
6694: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
6695: LD_INT 57
6697: PPUSH
6698: LD_INT 3
6700: PPUSH
6701: LD_INT 1
6703: PPUSH
6704: NOP4
// SetTech ( 51 , 3 , state_enabled ) ;
6708: LD_INT 51
6710: PPUSH
6711: LD_INT 3
6713: PPUSH
6714: LD_INT 1
6716: PPUSH
6717: NOP4
// SetTech ( 52 , 3 , state_enabled ) ;
6721: LD_INT 52
6723: PPUSH
6724: LD_INT 3
6726: PPUSH
6727: LD_INT 1
6729: PPUSH
6730: NOP4
// SetTech ( 57 , 6 , state_researched ) ;
6734: LD_INT 57
6736: PPUSH
6737: LD_INT 6
6739: PPUSH
6740: LD_INT 2
6742: PPUSH
6743: NOP4
// SetTech ( 52 , 6 , state_researched ) ;
6747: LD_INT 52
6749: PPUSH
6750: LD_INT 6
6752: PPUSH
6753: LD_INT 2
6755: PPUSH
6756: NOP4
=======
6676: LD_OWVAR 67
6680: PUSH
6681: LD_INT 1
6683: EQUAL
6684: IFFALSE 6702
// begin RuSolMinLevel = 4 ;
6686: LD_ADDR_EXP 25
6690: PUSH
6691: LD_INT 4
6693: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6694: LD_ADDR_EXP 26
6698: PUSH
6699: LD_INT 6
6701: ST_TO_ADDR
// end ; if Difficulty = 2 then
6702: LD_OWVAR 67
6706: PUSH
6707: LD_INT 2
6709: EQUAL
6710: IFFALSE 6780
// begin RuSolMinLevel = 5 ;
6712: LD_ADDR_EXP 25
6716: PUSH
6717: LD_INT 5
6719: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6720: LD_ADDR_EXP 26
6724: PUSH
6725: LD_INT 6
6727: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
6728: LD_INT 51
6730: PPUSH
6731: LD_INT 3
6733: PPUSH
6734: LD_INT 1
6736: PPUSH
6737: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
6741: LD_INT 57
6743: PPUSH
6744: LD_INT 3
6746: PPUSH
6747: LD_INT 1
6749: PPUSH
6750: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6754: LD_INT 57
6756: PPUSH
6757: LD_INT 6
6759: PPUSH
6760: LD_INT 2
6762: PPUSH
6763: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
6767: LD_INT 51
6769: PPUSH
6770: LD_INT 6
6772: PPUSH
6773: LD_INT 2
6775: PPUSH
6776: CALL_OW 322
// end ; if Difficulty = 3 then
6780: LD_OWVAR 67
6784: PUSH
6785: LD_INT 3
6787: EQUAL
6788: IFFALSE 6871
// begin RuSolMinLevel = 5 ;
6790: LD_ADDR_EXP 25
6794: PUSH
6795: LD_INT 5
6797: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6798: LD_ADDR_EXP 26
6802: PUSH
6803: LD_INT 6
6805: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
6806: LD_INT 57
6808: PPUSH
6809: LD_INT 3
6811: PPUSH
6812: LD_INT 1
6814: PPUSH
6815: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
6819: LD_INT 51
6821: PPUSH
6822: LD_INT 3
6824: PPUSH
6825: LD_INT 1
6827: PPUSH
6828: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
6832: LD_INT 52
6834: PPUSH
6835: LD_INT 3
6837: PPUSH
6838: LD_INT 1
6840: PPUSH
6841: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6845: LD_INT 57
6847: PPUSH
6848: LD_INT 6
6850: PPUSH
6851: LD_INT 2
6853: PPUSH
6854: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
6858: LD_INT 52
6860: PPUSH
6861: LD_INT 6
6863: PPUSH
6864: LD_INT 2
6866: PPUSH
6867: CALL_OW 322
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ;
6871: LD_VAR 0 1
6875: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
6876: LD_INT 0
6878: PPUSH
6879: PPUSH
6880: PPUSH
6881: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
<<<<<<< HEAD
6771: NOP4
6775: PUSH
6776: LD_INT 22
6778: PUSH
6779: LD_INT 3
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PUSH
6786: LD_INT 25
6788: PUSH
6789: LD_INT 2
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PPUSH
6800: NOP4
6804: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
6805: NOP4
6809: PUSH
6810: LD_INT 4
6812: PUSH
6813: LD_INT 75
6815: PUSH
6816: LD_INT 79
6818: PUSH
6819: LD_INT 2
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: PUSH
6828: LD_INT 4
6830: PUSH
6831: LD_INT 113
6833: PUSH
6834: LD_INT 94
6836: PUSH
6837: LD_INT 4
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 29
6848: PUSH
6849: LD_INT 106
6851: PUSH
6852: LD_INT 97
6854: PUSH
6855: LD_INT 3
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 26
6866: PUSH
6867: LD_INT 93
6869: PUSH
6870: LD_INT 97
6872: PUSH
6873: LD_INT 5
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: LD_INT 2
6884: PUSH
6885: LD_INT 100
6887: PUSH
6888: LD_INT 89
6890: PUSH
6891: LD_INT 3
6893: PUSH
6894: EMPTY
=======
6882: LD_ADDR_VAR 0 3
6886: PUSH
6887: LD_INT 22
6889: PUSH
6890: LD_INT 3
6892: PUSH
6893: EMPTY
6894: LIST
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
6895: LIST
6896: PUSH
6897: LD_INT 25
6899: PUSH
6900: LD_INT 2
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PPUSH
6911: CALL_OW 69
6915: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
6916: LD_ADDR_VAR 0 4
6920: PUSH
6921: LD_INT 4
6923: PUSH
6924: LD_INT 75
6926: PUSH
6927: LD_INT 79
6929: PUSH
6930: LD_INT 2
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 4
6941: PUSH
6942: LD_INT 113
6944: PUSH
6945: LD_INT 94
6947: PUSH
6948: LD_INT 4
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 29
6959: PUSH
6960: LD_INT 106
6962: PUSH
6963: LD_INT 97
6965: PUSH
6966: LD_INT 3
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 26
6977: PUSH
6978: LD_INT 93
6980: PUSH
6981: LD_INT 97
6983: PUSH
6984: LD_INT 5
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 2
6995: PUSH
6996: LD_INT 100
6998: PUSH
6999: LD_INT 89
7001: PUSH
7002: LD_INT 3
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 17
7013: PUSH
7014: LD_INT 96
7016: PUSH
7017: LD_INT 89
7019: PUSH
7020: LD_INT 1
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: PUSH
7029: LD_INT 32
7031: PUSH
7032: LD_INT 78
7034: PUSH
7035: LD_INT 94
7037: PUSH
7038: LD_INT 1
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 32
7049: PUSH
7050: LD_INT 95
7052: PUSH
7053: LD_INT 82
7055: PUSH
7056: LD_INT 3
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: PUSH
7065: LD_INT 32
7067: PUSH
7068: LD_INT 104
7070: PUSH
7071: LD_INT 85
7073: PUSH
7074: LD_INT 2
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: LD_INT 32
7085: PUSH
7086: LD_INT 81
7088: PUSH
7089: LD_INT 78
7091: PUSH
7092: LD_INT 2
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 33
7103: PUSH
7104: LD_INT 109
7106: PUSH
7107: LD_INT 90
7109: PUSH
7110: LD_INT 3
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: PUSH
7119: LD_INT 33
7121: PUSH
7122: LD_INT 88
7124: PUSH
7125: LD_INT 79
7127: PUSH
7128: LD_INT 3
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 33
7139: PUSH
7140: LD_INT 76
7142: PUSH
7143: LD_INT 87
7145: PUSH
7146: LD_INT 1
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: PUSH
7155: LD_INT 26
7157: PUSH
7158: LD_INT 96
7160: PUSH
7161: LD_INT 97
7163: PUSH
7164: LD_INT 5
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: LD_INT 26
7175: PUSH
7176: LD_INT 85
7178: PUSH
7179: LD_INT 84
7181: PUSH
7182: LD_INT 2
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: PUSH
7191: LD_INT 6
7193: PUSH
7194: LD_INT 88
7196: PUSH
7197: LD_INT 95
7199: PUSH
7200: LD_INT 0
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: PUSH
7209: LD_INT 19
7211: PUSH
7212: LD_INT 103
7214: PUSH
7215: LD_INT 89
7217: PUSH
7218: LD_INT 4
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 16
7229: PUSH
7230: LD_INT 97
7232: PUSH
7233: LD_INT 86
7235: PUSH
7236: LD_INT 2
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 24
7247: PUSH
7248: LD_INT 100
7250: PUSH
7251: LD_INT 85
7253: PUSH
7254: LD_INT 3
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: ST_TO_ADDR
// for i := 1 to buildingsTab do
<<<<<<< HEAD
7173: NOP4
7177: PUSH
7178: DOUBLE
7179: LD_INT 1
7181: DEC
7182: ST_TO_ADDR
7183: NOP4
7187: PUSH
7188: FOR_TO
7189: IFFALSE 7262
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7191: NOP4
7195: PPUSH
7196: NOP4
7200: PUSH
7201: NOP4
7205: ARRAY
7206: PUSH
7207: LD_INT 1
7209: ARRAY
7210: PPUSH
7211: NOP4
7215: PUSH
7216: NOP4
7220: ARRAY
7221: PUSH
7222: LD_INT 2
7224: ARRAY
7225: PPUSH
7226: NOP4
7230: PUSH
7231: NOP4
7235: ARRAY
7236: PUSH
7237: LD_INT 3
7239: ARRAY
7240: PPUSH
7241: NOP4
7245: PUSH
7246: NOP4
7250: ARRAY
7251: PUSH
7252: LD_INT 4
7254: ARRAY
7255: PPUSH
7256: NOP4
7260: GO 7188
7262: POP
7263: POP
=======
7284: LD_ADDR_VAR 0 2
7288: PUSH
7289: DOUBLE
7290: LD_INT 1
7292: DEC
7293: ST_TO_ADDR
7294: LD_VAR 0 4
7298: PUSH
7299: FOR_TO
7300: IFFALSE 7373
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7302: LD_VAR 0 3
7306: PPUSH
7307: LD_VAR 0 4
7311: PUSH
7312: LD_VAR 0 2
7316: ARRAY
7317: PUSH
7318: LD_INT 1
7320: ARRAY
7321: PPUSH
7322: LD_VAR 0 4
7326: PUSH
7327: LD_VAR 0 2
7331: ARRAY
7332: PUSH
7333: LD_INT 2
7335: ARRAY
7336: PPUSH
7337: LD_VAR 0 4
7341: PUSH
7342: LD_VAR 0 2
7346: ARRAY
7347: PUSH
7348: LD_INT 3
7350: ARRAY
7351: PPUSH
7352: LD_VAR 0 4
7356: PUSH
7357: LD_VAR 0 2
7361: ARRAY
7362: PUSH
7363: LD_INT 4
7365: ARRAY
7366: PPUSH
7367: CALL_OW 205
7371: GO 7299
7373: POP
7374: POP
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
7375: LD_VAR 0 1
7379: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7380: LD_INT 0
7382: PPUSH
7383: PPUSH
// for i in charactersList do
<<<<<<< HEAD
7273: NOP4
7277: PUSH
7278: NOP4
7282: PUSH
7283: FOR_IN
7284: IFFALSE 7313
// begin if IsOk ( i ) then
7286: NOP4
7290: PPUSH
7291: NOP4
7295: IFFALSE 7311
// SaveCharacters ( i , ident ) ;
7297: NOP4
7301: PPUSH
7302: NOP4
7306: PPUSH
7307: NOP4
=======
7384: LD_ADDR_VAR 0 4
7388: PUSH
7389: LD_VAR 0 1
7393: PUSH
7394: FOR_IN
7395: IFFALSE 7424
// begin if IsOk ( i ) then
7397: LD_VAR 0 4
7401: PPUSH
7402: CALL_OW 302
7406: IFFALSE 7422
// SaveCharacters ( i , ident ) ;
7408: LD_VAR 0 4
7412: PPUSH
7413: LD_VAR 0 2
7417: PPUSH
7418: CALL_OW 38
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
7422: GO 7394
7424: POP
7425: POP
// end ;
7426: LD_VAR 0 3
7430: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
7431: LD_INT 0
7433: PPUSH
7434: PPUSH
7435: PPUSH
7436: PPUSH
// for i = 1 to 72 do
<<<<<<< HEAD
7326: NOP4
7330: PUSH
7331: DOUBLE
7332: LD_INT 1
7334: DEC
7335: ST_TO_ADDR
7336: LD_INT 72
7338: PUSH
7339: FOR_TO
7340: IFFALSE 7398
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
7342: NOP4
7346: PPUSH
7347: NOP4
7351: PPUSH
7352: NOP4
7356: PUSH
7357: LD_INT 1
7359: EQUAL
7360: PUSH
7361: NOP4
7365: PPUSH
7366: NOP4
7370: PPUSH
7371: NOP4
7375: PUSH
7376: LD_INT 1
7378: EQUAL
7379: AND
7380: IFFALSE 7396
// AddComResearch ( lab , i ) ;
7382: NOP4
7386: PPUSH
7387: NOP4
7391: PPUSH
7392: NOP4
7396: GO 7339
7398: POP
7399: POP
=======
7437: LD_ADDR_VAR 0 5
7441: PUSH
7442: DOUBLE
7443: LD_INT 1
7445: DEC
7446: ST_TO_ADDR
7447: LD_INT 72
7449: PUSH
7450: FOR_TO
7451: IFFALSE 7509
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
7453: LD_VAR 0 5
7457: PPUSH
7458: LD_VAR 0 1
7462: PPUSH
7463: CALL_OW 321
7467: PUSH
7468: LD_INT 1
7470: EQUAL
7471: PUSH
7472: LD_VAR 0 5
7476: PPUSH
7477: LD_VAR 0 3
7481: PPUSH
7482: CALL_OW 482
7486: PUSH
7487: LD_INT 1
7489: EQUAL
7490: AND
7491: IFFALSE 7507
// AddComResearch ( lab , i ) ;
7493: LD_VAR 0 2
7497: PPUSH
7498: LD_VAR 0 5
7502: PPUSH
7503: CALL_OW 184
7507: GO 7450
7509: POP
7510: POP
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
7511: LD_VAR 0 4
7515: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
<<<<<<< HEAD
7405: LD_INT 0
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
7411: PPUSH
7412: PPUSH
7413: PPUSH
7414: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
7415: NOP4
7419: PUSH
7420: NOP4
7424: PPUSH
7425: LD_INT 22
7427: PUSH
7428: NOP4
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 56
7439: PUSH
7440: EMPTY
7441: LIST
7442: PUSH
7443: LD_INT 24
7445: PUSH
7446: LD_INT 700
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 3
7455: PUSH
7456: LD_INT 60
7458: PUSH
7459: EMPTY
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 2
7468: PUSH
7469: LD_INT 25
7471: PUSH
7472: LD_INT 1
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 25
7481: PUSH
7482: LD_INT 5
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PUSH
7489: LD_INT 25
7491: PUSH
7492: LD_INT 8
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PUSH
7499: LD_INT 25
7501: PUSH
7502: LD_INT 9
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: PPUSH
7523: NOP4
7527: PUSH
7528: NOP4
7532: PUSH
7533: EMPTY
7534: LIST
7535: DIFF
7536: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7537: NOP4
7541: PUSH
7542: NOP4
7546: PPUSH
7547: LD_INT 22
7549: PUSH
7550: NOP4
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 30
7561: PUSH
7562: LD_INT 32
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 58
7571: PUSH
7572: EMPTY
7573: LIST
7574: PUSH
7575: LD_INT 24
7577: PUSH
7578: LD_INT 251
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: PPUSH
7591: NOP4
7595: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
7596: NOP4
7600: PUSH
7601: NOP4
7605: PPUSH
7606: LD_INT 22
7608: PUSH
7609: NOP4
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 2
7620: PUSH
7621: LD_INT 30
7623: PUSH
7624: LD_INT 4
=======
7516: LD_INT 0
7518: PPUSH
7519: PPUSH
7520: PPUSH
7521: PPUSH
7522: PPUSH
7523: PPUSH
7524: PPUSH
7525: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
7526: LD_ADDR_VAR 0 6
7530: PUSH
7531: LD_VAR 0 2
7535: PPUSH
7536: LD_INT 22
7538: PUSH
7539: LD_VAR 0 1
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 56
7550: PUSH
7551: EMPTY
7552: LIST
7553: PUSH
7554: LD_INT 24
7556: PUSH
7557: LD_INT 700
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 3
7566: PUSH
7567: LD_INT 60
7569: PUSH
7570: EMPTY
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 2
7579: PUSH
7580: LD_INT 25
7582: PUSH
7583: LD_INT 1
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 25
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 25
7602: PUSH
7603: LD_INT 8
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 25
7612: PUSH
7613: LD_INT 9
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
<<<<<<< HEAD
7630: PUSH
7631: LD_INT 30
7633: PUSH
7634: LD_INT 5
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: PUSH
7646: LD_INT 24
7648: PUSH
7649: LD_INT 251
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: LIST
7660: PPUSH
7661: NOP4
7665: ST_TO_ADDR
// if barrackList > 0 then
7666: NOP4
7670: PUSH
7671: LD_INT 0
7673: GREATER
7674: IFFALSE 7822
// begin if turretList = 0 then
7676: NOP4
7680: PUSH
7681: LD_INT 0
7683: EQUAL
7684: IFFALSE 7726
// begin if soldiers_list > 0 then
7686: NOP4
7690: PUSH
7691: LD_INT 0
7693: GREATER
7694: IFFALSE 7724
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
7696: NOP4
7700: PPUSH
7701: NOP4
7705: PUSH
7706: LD_INT 1
7708: PPUSH
7709: NOP4
7713: PPUSH
7714: NOP4
7718: ARRAY
7719: PPUSH
7720: NOP4
=======
7630: LIST
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 70
7638: PUSH
7639: LD_EXP 24
7643: PUSH
7644: EMPTY
7645: LIST
7646: DIFF
7647: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7648: LD_ADDR_VAR 0 7
7652: PUSH
7653: LD_VAR 0 2
7657: PPUSH
7658: LD_INT 22
7660: PUSH
7661: LD_VAR 0 1
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PUSH
7670: LD_INT 30
7672: PUSH
7673: LD_INT 32
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PUSH
7680: LD_INT 58
7682: PUSH
7683: EMPTY
7684: LIST
7685: PUSH
7686: LD_INT 24
7688: PUSH
7689: LD_INT 251
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 70
7706: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
7707: LD_ADDR_VAR 0 9
7711: PUSH
7712: LD_VAR 0 2
7716: PPUSH
7717: LD_INT 22
7719: PUSH
7720: LD_VAR 0 1
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 2
7731: PUSH
7732: LD_INT 30
7734: PUSH
7735: LD_INT 4
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 30
7744: PUSH
7745: LD_INT 5
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 24
7759: PUSH
7760: LD_INT 251
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: PPUSH
7772: CALL_OW 70
7776: ST_TO_ADDR
// if barrackList > 0 then
7777: LD_VAR 0 9
7781: PUSH
7782: LD_INT 0
7784: GREATER
7785: IFFALSE 7933
// begin if turretList = 0 then
7787: LD_VAR 0 7
7791: PUSH
7792: LD_INT 0
7794: EQUAL
7795: IFFALSE 7837
// begin if soldiers_list > 0 then
7797: LD_VAR 0 6
7801: PUSH
7802: LD_INT 0
7804: GREATER
7805: IFFALSE 7835
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
7807: LD_VAR 0 6
7811: PPUSH
7812: LD_VAR 0 9
7816: PUSH
7817: LD_INT 1
7819: PPUSH
7820: LD_VAR 0 9
7824: PPUSH
7825: CALL_OW 12
7829: ARRAY
7830: PPUSH
7831: CALL_OW 120
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
7835: GO 7933
// begin for i in barrackList do
<<<<<<< HEAD
7726: NOP4
7730: PUSH
7731: NOP4
7735: PUSH
7736: FOR_IN
7737: IFFALSE 7820
// begin insideUnits = UnitsInside ( i ) ;
7739: NOP4
7743: PUSH
7744: NOP4
7748: PPUSH
7749: NOP4
7753: ST_TO_ADDR
// if insideUnits > 0 then
7754: NOP4
7758: PUSH
7759: LD_INT 0
7761: GREATER
7762: IFFALSE 7786
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
7764: NOP4
7768: PUSH
7769: LD_INT 1
7771: ARRAY
7772: PPUSH
7773: NOP4
7777: PUSH
7778: LD_INT 1
7780: ARRAY
7781: PPUSH
7782: NOP4
// if soldiers_list > 0 then
7786: NOP4
7790: PUSH
7791: LD_INT 0
7793: GREATER
7794: IFFALSE 7818
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
7796: NOP4
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: PPUSH
7805: NOP4
7809: PUSH
7810: LD_INT 1
7812: ARRAY
7813: PPUSH
7814: NOP4
=======
7837: LD_ADDR_VAR 0 4
7841: PUSH
7842: LD_VAR 0 9
7846: PUSH
7847: FOR_IN
7848: IFFALSE 7931
// begin insideUnits = UnitsInside ( i ) ;
7850: LD_ADDR_VAR 0 10
7854: PUSH
7855: LD_VAR 0 4
7859: PPUSH
7860: CALL_OW 313
7864: ST_TO_ADDR
// if insideUnits > 0 then
7865: LD_VAR 0 10
7869: PUSH
7870: LD_INT 0
7872: GREATER
7873: IFFALSE 7897
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
7875: LD_VAR 0 10
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: PPUSH
7884: LD_VAR 0 7
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: PPUSH
7893: CALL_OW 120
// if soldiers_list > 0 then
7897: LD_VAR 0 6
7901: PUSH
7902: LD_INT 0
7904: GREATER
7905: IFFALSE 7929
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
7907: LD_VAR 0 6
7911: PUSH
7912: LD_INT 1
7914: ARRAY
7915: PPUSH
7916: LD_VAR 0 7
7920: PUSH
7921: LD_INT 1
7923: ARRAY
7924: PPUSH
7925: CALL_OW 120
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
7929: GO 7847
7931: POP
7932: POP
// end ; end ; end ;
7933: LD_VAR 0 3
7937: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
7938: LD_INT 0
7940: PPUSH
7941: PPUSH
7942: PPUSH
7943: PPUSH
7944: PPUSH
7945: PPUSH
// for i = 1 to infantryCount do
<<<<<<< HEAD
7835: NOP4
7839: PUSH
7840: DOUBLE
7841: LD_INT 1
7843: DEC
7844: ST_TO_ADDR
7845: NOP4
7849: PUSH
7850: FOR_TO
7851: IFFALSE 7967
// begin uc_side = side ;
7853: LD_ADDR_OWVAR 20
7857: PUSH
7858: NOP4
7862: ST_TO_ADDR
// uc_nation = nation ;
7863: LD_ADDR_OWVAR 21
7867: PUSH
7868: NOP4
7872: ST_TO_ADDR
=======
7946: LD_ADDR_VAR 0 8
7950: PUSH
7951: DOUBLE
7952: LD_INT 1
7954: DEC
7955: ST_TO_ADDR
7956: LD_VAR 0 5
7960: PUSH
7961: FOR_TO
7962: IFFALSE 8078
// begin uc_side = side ;
7964: LD_ADDR_OWVAR 20
7968: PUSH
7969: LD_VAR 0 1
7973: ST_TO_ADDR
// uc_nation = nation ;
7974: LD_ADDR_OWVAR 21
7978: PUSH
7979: LD_VAR 0 3
7983: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// hc_class = 1 ;
7984: LD_ADDR_OWVAR 28
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// hc_name =  ;
7992: LD_ADDR_OWVAR 26
7996: PUSH
7997: LD_STRING 
7999: ST_TO_ADDR
// hc_gallery =  ;
8000: LD_ADDR_OWVAR 33
8004: PUSH
8005: LD_STRING 
8007: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
<<<<<<< HEAD
7897: LD_INT 0
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: NOP4
7907: PPUSH
7908: NOP4
7912: PPUSH
7913: NOP4
7917: PPUSH
7918: NOP4
// un = CreateHuman ;
7922: NOP4
7926: PUSH
7927: NOP4
7931: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
7932: NOP4
7936: PPUSH
7937: NOP4
7941: PPUSH
7942: LD_INT 0
7944: PPUSH
7945: NOP4
// defenders_list = defenders_list ^ un ;
7949: NOP4
7953: PUSH
7954: NOP4
7958: PUSH
7959: NOP4
7963: ADD
7964: ST_TO_ADDR
=======
8008: LD_INT 0
8010: PPUSH
8011: LD_INT 1
8013: PPUSH
8014: LD_EXP 25
8018: PPUSH
8019: LD_EXP 26
8023: PPUSH
8024: CALL_OW 12
8028: PPUSH
8029: CALL_OW 380
// un = CreateHuman ;
8033: LD_ADDR_VAR 0 10
8037: PUSH
8038: CALL_OW 44
8042: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
8043: LD_VAR 0 10
8047: PPUSH
8048: LD_VAR 0 2
8052: PPUSH
8053: LD_INT 0
8055: PPUSH
8056: CALL_OW 49
// defenders_list = defenders_list ^ un ;
8060: LD_ADDR_EXP 32
8064: PUSH
8065: LD_EXP 32
8069: PUSH
8070: LD_VAR 0 10
8074: ADD
8075: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
8076: GO 7961
8078: POP
8079: POP
// for i = 1 to vehCount do
<<<<<<< HEAD
7969: NOP4
7973: PUSH
7974: DOUBLE
7975: LD_INT 1
7977: DEC
7978: ST_TO_ADDR
7979: NOP4
7983: PUSH
7984: FOR_TO
7985: IFFALSE 8192
// begin uc_side = side ;
7987: LD_ADDR_OWVAR 20
7991: PUSH
7992: NOP4
7996: ST_TO_ADDR
// uc_nation = nation ;
7997: LD_ADDR_OWVAR 21
8001: PUSH
8002: NOP4
8006: ST_TO_ADDR
=======
8080: LD_ADDR_VAR 0 8
8084: PUSH
8085: DOUBLE
8086: LD_INT 1
8088: DEC
8089: ST_TO_ADDR
8090: LD_VAR 0 6
8094: PUSH
8095: FOR_TO
8096: IFFALSE 8303
// begin uc_side = side ;
8098: LD_ADDR_OWVAR 20
8102: PUSH
8103: LD_VAR 0 1
8107: ST_TO_ADDR
// uc_nation = nation ;
8108: LD_ADDR_OWVAR 21
8112: PUSH
8113: LD_VAR 0 3
8117: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// vc_Chassis = 22 ;
8118: LD_ADDR_OWVAR 37
8122: PUSH
8123: LD_INT 22
8125: ST_TO_ADDR
// vc_engine = 1 ;
8126: LD_ADDR_OWVAR 39
8130: PUSH
8131: LD_INT 1
8133: ST_TO_ADDR
// vc_control = 1 ;
8134: LD_ADDR_OWVAR 38
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
<<<<<<< HEAD
8031: LD_ADDR_OWVAR 40
8035: PUSH
8036: LD_INT 43
8038: PUSH
8039: LD_INT 44
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PUSH
8046: LD_INT 1
8048: PPUSH
8049: LD_INT 2
8051: PPUSH
8052: NOP4
8056: ARRAY
8057: ST_TO_ADDR
// veh = CreateVehicle ;
8058: NOP4
8062: PUSH
8063: NOP4
8067: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8068: NOP4
8072: PPUSH
8073: NOP4
8077: PPUSH
8078: LD_INT 0
8080: PPUSH
8081: NOP4
// defenders_list = defenders_list ^ veh ;
8085: NOP4
8089: PUSH
8090: NOP4
8094: PUSH
8095: NOP4
8099: ADD
8100: ST_TO_ADDR
=======
8142: LD_ADDR_OWVAR 40
8146: PUSH
8147: LD_INT 43
8149: PUSH
8150: LD_INT 44
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: LD_INT 1
8159: PPUSH
8160: LD_INT 2
8162: PPUSH
8163: CALL_OW 12
8167: ARRAY
8168: ST_TO_ADDR
// veh = CreateVehicle ;
8169: LD_ADDR_VAR 0 12
8173: PUSH
8174: CALL_OW 45
8178: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8179: LD_VAR 0 12
8183: PPUSH
8184: LD_VAR 0 2
8188: PPUSH
8189: LD_INT 0
8191: PPUSH
8192: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8196: LD_ADDR_EXP 32
8200: PUSH
8201: LD_EXP 32
8205: PUSH
8206: LD_VAR 0 12
8210: ADD
8211: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// hc_class = 3 ;
8212: LD_ADDR_OWVAR 28
8216: PUSH
8217: LD_INT 3
8219: ST_TO_ADDR
// hc_name =  ;
8220: LD_ADDR_OWVAR 26
8224: PUSH
8225: LD_STRING 
8227: ST_TO_ADDR
// hc_gallery =  ;
8228: LD_ADDR_OWVAR 33
8232: PUSH
8233: LD_STRING 
8235: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
<<<<<<< HEAD
8125: LD_INT 0
8127: PPUSH
8128: LD_INT 3
8130: PPUSH
8131: NOP4
8135: PPUSH
8136: NOP4
8140: PPUSH
8141: NOP4
8145: PPUSH
8146: NOP4
// un = CreateHuman ;
8150: NOP4
8154: PUSH
8155: NOP4
8159: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8160: NOP4
8164: PPUSH
8165: NOP4
8169: PPUSH
8170: NOP4
// defenders_list = defenders_list ^ un ;
8174: NOP4
8178: PUSH
8179: NOP4
8183: PUSH
8184: NOP4
8188: ADD
8189: ST_TO_ADDR
=======
8236: LD_INT 0
8238: PPUSH
8239: LD_INT 3
8241: PPUSH
8242: LD_EXP 25
8246: PPUSH
8247: LD_EXP 26
8251: PPUSH
8252: CALL_OW 12
8256: PPUSH
8257: CALL_OW 380
// un = CreateHuman ;
8261: LD_ADDR_VAR 0 10
8265: PUSH
8266: CALL_OW 44
8270: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8271: LD_VAR 0 10
8275: PPUSH
8276: LD_VAR 0 12
8280: PPUSH
8281: CALL_OW 52
// defenders_list = defenders_list ^ un ;
8285: LD_ADDR_EXP 32
8289: PUSH
8290: LD_EXP 32
8294: PUSH
8295: LD_VAR 0 10
8299: ADD
8300: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
8301: GO 8095
8303: POP
8304: POP
// end ;
8305: LD_VAR 0 7
8309: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
8310: LD_INT 0
8312: PPUSH
8313: PPUSH
8314: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
<<<<<<< HEAD
8204: NOP4
8208: PPUSH
8209: LD_INT 22
8211: PUSH
8212: NOP4
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: EMPTY
8222: LIST
8223: PPUSH
8224: NOP4
8228: PUSH
8229: LD_INT 0
8231: EQUAL
8232: PUSH
8233: NOP4
8237: PUSH
8238: LD_INT 0
8240: GREATER
8241: AND
8242: IFFALSE 8271
// begin ComMoveXY ( defenders_list , 65 , 68 ) ;
8244: NOP4
8248: PPUSH
8249: LD_INT 65
8251: PPUSH
8252: LD_INT 68
8254: PPUSH
8255: NOP4
// SetFuel ( defenders_list , 100 ) ;
8259: NOP4
8263: PPUSH
8264: LD_INT 100
8266: PPUSH
8267: NOP4
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
8271: NOP4
8275: PPUSH
8276: LD_INT 22
8278: PUSH
8279: NOP4
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PUSH
8288: EMPTY
8289: LIST
8290: PPUSH
8291: NOP4
8295: PUSH
8296: LD_INT 0
8298: GREATER
8299: PUSH
8300: NOP4
8304: PUSH
8305: LD_INT 0
8307: GREATER
8308: AND
8309: IFFALSE 8388
// ComAgressiveMove ( defenders_list , GetX ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) ) ;
8311: NOP4
8315: PPUSH
8316: NOP4
8320: PPUSH
8321: LD_INT 22
8323: PUSH
8324: NOP4
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: EMPTY
8334: LIST
8335: PPUSH
8336: NOP4
8340: PUSH
8341: LD_INT 1
8343: ARRAY
8344: PPUSH
8345: NOP4
8349: PPUSH
8350: NOP4
8354: PPUSH
8355: LD_INT 22
8357: PUSH
8358: NOP4
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: EMPTY
8368: LIST
8369: PPUSH
8370: NOP4
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PPUSH
8379: NOP4
8383: PPUSH
8384: NOP4
=======
8315: LD_VAR 0 2
8319: PPUSH
8320: LD_INT 22
8322: PUSH
8323: LD_VAR 0 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: EMPTY
8333: LIST
8334: PPUSH
8335: CALL_OW 70
8339: PUSH
8340: LD_INT 0
8342: EQUAL
8343: PUSH
8344: LD_EXP 32
8348: PUSH
8349: LD_INT 0
8351: GREATER
8352: AND
8353: IFFALSE 8382
// begin ComMoveXY ( defenders_list , 65 , 68 ) ;
8355: LD_EXP 32
8359: PPUSH
8360: LD_INT 65
8362: PPUSH
8363: LD_INT 68
8365: PPUSH
8366: CALL_OW 111
// SetFuel ( defenders_list , 100 ) ;
8370: LD_EXP 32
8374: PPUSH
8375: LD_INT 100
8377: PPUSH
8378: CALL_OW 240
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
8382: LD_VAR 0 2
8386: PPUSH
8387: LD_INT 22
8389: PUSH
8390: LD_VAR 0 1
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: EMPTY
8400: LIST
8401: PPUSH
8402: CALL_OW 70
8406: PUSH
8407: LD_INT 0
8409: GREATER
8410: PUSH
8411: LD_EXP 32
8415: PUSH
8416: LD_INT 0
8418: GREATER
8419: AND
8420: IFFALSE 8499
// ComAgressiveMove ( defenders_list , GetX ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) ) ;
8422: LD_EXP 32
8426: PPUSH
8427: LD_VAR 0 2
8431: PPUSH
8432: LD_INT 22
8434: PUSH
8435: LD_VAR 0 1
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: EMPTY
8445: LIST
8446: PPUSH
8447: CALL_OW 70
8451: PUSH
8452: LD_INT 1
8454: ARRAY
8455: PPUSH
8456: CALL_OW 250
8460: PPUSH
8461: LD_VAR 0 2
8465: PPUSH
8466: LD_INT 22
8468: PUSH
8469: LD_VAR 0 1
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: EMPTY
8479: LIST
8480: PPUSH
8481: CALL_OW 70
8485: PUSH
8486: LD_INT 1
8488: ARRAY
8489: PPUSH
8490: CALL_OW 251
8494: PPUSH
8495: CALL_OW 114
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
8499: LD_VAR 0 3
8503: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8504: LD_INT 0
8506: PPUSH
8507: PPUSH
8508: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
<<<<<<< HEAD
8398: LD_INT 22
8400: PUSH
8401: NOP4
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: LD_INT 21
8412: PUSH
8413: LD_INT 2
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PPUSH
8424: NOP4
8428: PUSH
8429: NOP4
8433: LESSEQUAL
8434: IFFALSE 8542
// begin for i = 1 to vehCount do
8436: NOP4
8440: PUSH
8441: DOUBLE
8442: LD_INT 1
8444: DEC
8445: ST_TO_ADDR
8446: NOP4
8450: PUSH
8451: FOR_TO
8452: IFFALSE 8540
// begin weapon = weaponTab [ i ] ;
8454: NOP4
8458: PUSH
8459: NOP4
8463: PUSH
8464: NOP4
8468: ARRAY
8469: ST_TO_ADDR
// if weapon = 46 then
8470: NOP4
8474: PUSH
8475: LD_INT 46
8477: EQUAL
8478: IFFALSE 8509
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
8480: NOP4
8484: PPUSH
8485: LD_INT 24
8487: PPUSH
8488: NOP4
8492: PPUSH
8493: NOP4
8497: PPUSH
8498: NOP4
8502: PPUSH
8503: NOP4
=======
8509: LD_INT 22
8511: PUSH
8512: LD_VAR 0 1
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: LD_INT 21
8523: PUSH
8524: LD_INT 2
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: PPUSH
8535: CALL_OW 69
8539: PUSH
8540: LD_VAR 0 3
8544: LESSEQUAL
8545: IFFALSE 8653
// begin for i = 1 to vehCount do
8547: LD_ADDR_VAR 0 9
8551: PUSH
8552: DOUBLE
8553: LD_INT 1
8555: DEC
8556: ST_TO_ADDR
8557: LD_VAR 0 3
8561: PUSH
8562: FOR_TO
8563: IFFALSE 8651
// begin weapon = weaponTab [ i ] ;
8565: LD_ADDR_VAR 0 10
8569: PUSH
8570: LD_VAR 0 4
8574: PUSH
8575: LD_VAR 0 9
8579: ARRAY
8580: ST_TO_ADDR
// if weapon = 46 then
8581: LD_VAR 0 10
8585: PUSH
8586: LD_INT 46
8588: EQUAL
8589: IFFALSE 8620
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
8591: LD_VAR 0 2
8595: PPUSH
8596: LD_INT 24
8598: PPUSH
8599: LD_VAR 0 5
8603: PPUSH
8604: LD_VAR 0 6
8608: PPUSH
8609: LD_VAR 0 10
8613: PPUSH
8614: CALL_OW 185
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
8618: GO 8649
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
<<<<<<< HEAD
8509: NOP4
8513: PPUSH
8514: NOP4
8518: PPUSH
8519: NOP4
8523: PPUSH
8524: NOP4
8528: PPUSH
8529: NOP4
8533: PPUSH
8534: NOP4
=======
8620: LD_VAR 0 2
8624: PPUSH
8625: LD_VAR 0 7
8629: PPUSH
8630: LD_VAR 0 5
8634: PPUSH
8635: LD_VAR 0 6
8639: PPUSH
8640: LD_VAR 0 10
8644: PPUSH
8645: CALL_OW 185
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ;
8649: GO 8562
8651: POP
8652: POP
// end ; end ;
8653: LD_VAR 0 8
8657: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
8658: LD_INT 0
8660: PPUSH
8661: PPUSH
8662: PPUSH
8663: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
<<<<<<< HEAD
8553: NOP4
8557: PUSH
8558: LD_INT 22
8560: PUSH
8561: NOP4
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: LD_INT 21
8572: PUSH
8573: LD_INT 2
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 3
8582: PUSH
8583: LD_INT 24
8585: PUSH
8586: LD_INT 650
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: LIST
8601: PPUSH
8602: NOP4
8606: ST_TO_ADDR
// if damageVehicles > 0 then
8607: NOP4
8611: PUSH
8612: LD_INT 0
8614: GREATER
8615: IFFALSE 8636
// ComMoveXY ( damageVehicles , repX , repY ) ;
8617: NOP4
8621: PPUSH
8622: NOP4
8626: PPUSH
8627: NOP4
8631: PPUSH
8632: NOP4
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
8636: NOP4
8640: PPUSH
8641: LD_INT 95
8643: PUSH
8644: NOP4
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: LD_INT 3
8655: PUSH
8656: LD_INT 58
8658: PUSH
8659: EMPTY
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: PPUSH
8670: NOP4
8674: PUSH
8675: LD_INT 0
8677: GREATER
8678: IFFALSE 8745
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
8680: NOP4
8684: PUSH
8685: NOP4
8689: PPUSH
8690: LD_INT 95
8692: PUSH
8693: NOP4
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 58
8707: PUSH
8708: EMPTY
8709: LIST
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PPUSH
8719: NOP4
8723: PUSH
8724: FOR_IN
8725: IFFALSE 8743
// ComExitVehicle ( UnitsInside ( i ) ) ;
8727: NOP4
8731: PPUSH
8732: NOP4
8736: PPUSH
8737: NOP4
8741: GO 8724
8743: POP
8744: POP
// end ;
8745: LD_VAR 0 5
8749: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
8750: LD_INT 0
8752: PPUSH
8753: PPUSH
8754: PPUSH
8755: PPUSH
8756: PPUSH
8757: PPUSH
8758: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
8759: NOP4
=======
8664: LD_ADDR_VAR 0 8
8668: PUSH
8669: LD_INT 22
8671: PUSH
8672: LD_VAR 0 1
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 21
8683: PUSH
8684: LD_INT 2
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: LD_INT 24
8696: PUSH
8697: LD_INT 650
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: PPUSH
8713: CALL_OW 69
8717: ST_TO_ADDR
// if damageVehicles > 0 then
8718: LD_VAR 0 8
8722: PUSH
8723: LD_INT 0
8725: GREATER
8726: IFFALSE 8747
// ComMoveXY ( damageVehicles , repX , repY ) ;
8728: LD_VAR 0 8
8732: PPUSH
8733: LD_VAR 0 3
8737: PPUSH
8738: LD_VAR 0 4
8742: PPUSH
8743: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
8747: LD_VAR 0 8
8751: PPUSH
8752: LD_INT 95
8754: PUSH
8755: LD_VAR 0 2
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
8763: PUSH
8764: LD_INT 3
8766: PUSH
<<<<<<< HEAD
8767: NOP4
8771: PUSH
8772: EMPTY
8773: LIST
=======
8767: LD_INT 58
8769: PUSH
8770: EMPTY
8771: LIST
8772: PUSH
8773: EMPTY
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
8774: LIST
8775: LIST
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PPUSH
8781: CALL_OW 72
8785: PUSH
8786: LD_INT 0
8788: GREATER
8789: IFFALSE 8856
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
8791: LD_ADDR_VAR 0 6
8795: PUSH
<<<<<<< HEAD
8796: LD_INT 3
8798: PUSH
8799: LD_INT 58
8801: PUSH
8802: EMPTY
8803: LIST
8804: PUSH
8805: LD_INT 2
8807: PUSH
8808: LD_INT 34
8810: PUSH
8811: LD_INT 43
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PUSH
8818: LD_INT 34
8820: PUSH
8821: LD_INT 44
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PUSH
8828: LD_INT 34
8830: PUSH
8831: LD_INT 46
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: LIST
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: PPUSH
8855: NOP4
8859: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
8860: LD_INT 22
8862: PUSH
8863: NOP4
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 21
=======
8796: LD_VAR 0 8
8800: PPUSH
8801: LD_INT 95
8803: PUSH
8804: LD_VAR 0 2
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 3
8815: PUSH
8816: LD_INT 58
8818: PUSH
8819: EMPTY
8820: LIST
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 72
8834: PUSH
8835: FOR_IN
8836: IFFALSE 8854
// ComExitVehicle ( UnitsInside ( i ) ) ;
8838: LD_VAR 0 6
8842: PPUSH
8843: CALL_OW 313
8847: PPUSH
8848: CALL_OW 121
8852: GO 8835
8854: POP
8855: POP
// end ;
8856: LD_VAR 0 5
8860: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
8861: LD_INT 0
8863: PPUSH
8864: PPUSH
8865: PPUSH
8866: PPUSH
8867: PPUSH
8868: PPUSH
8869: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
8870: LD_ADDR_VAR 0 8
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
8874: PUSH
8875: LD_INT 22
8877: PUSH
8878: LD_VAR 0 1
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: LD_INT 21
8889: PUSH
8890: LD_INT 2
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PUSH
8897: LD_INT 24
8899: PUSH
8900: LD_INT 250
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 3
8909: PUSH
8910: LD_INT 58
8912: PUSH
8913: EMPTY
8914: LIST
8915: PUSH
8916: LD_INT 2
8918: PUSH
8919: LD_INT 34
8921: PUSH
8922: LD_INT 43
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 34
8931: PUSH
8932: LD_INT 44
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: LD_INT 34
8941: PUSH
8942: LD_INT 46
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
<<<<<<< HEAD
8948: LIST
8949: LIST
8950: PPUSH
8951: NOP4
8955: PUSH
8956: LD_INT 5
8958: PUSH
8959: LD_INT 6
8961: PUSH
8962: LD_INT 7
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: LIST
8969: PUSH
8970: NOP4
8974: ARRAY
8975: GREATEREQUAL
8976: IFFALSE 9541
// repeat wait ( 0 0$1 ) ;
8978: LD_INT 35
8980: PPUSH
8981: NOP4
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
8985: NOP4
8989: PUSH
8990: LD_INT 22
8992: PUSH
8993: NOP4
8997: PUSH
8998: EMPTY
8999: LIST
=======
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: PPUSH
8966: CALL_OW 69
8970: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
8971: LD_INT 22
8973: PUSH
8974: LD_VAR 0 1
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 21
8985: PUSH
8986: LD_INT 2
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: LD_INT 24
8995: PUSH
8996: LD_INT 1000
8998: PUSH
8999: EMPTY
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
9000: LIST
9001: LIST
9002: PUSH
9003: LD_INT 3
9005: PUSH
9006: LD_INT 58
9008: PUSH
9009: EMPTY
9010: LIST
9011: PUSH
9012: LD_INT 2
9014: PUSH
9015: LD_INT 34
9017: PUSH
9018: LD_INT 43
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PUSH
9025: LD_INT 34
9027: PUSH
9028: LD_INT 44
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PUSH
9035: LD_INT 34
9037: PUSH
9038: LD_INT 46
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: PPUSH
9062: CALL_OW 69
9066: PUSH
9067: LD_INT 5
9069: PUSH
9070: LD_INT 6
9072: PUSH
9073: LD_INT 7
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
<<<<<<< HEAD
9080: PPUSH
9081: NOP4
9085: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
9086: LD_INT 22
9088: PUSH
9089: NOP4
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: PUSH
9098: LD_INT 95
9100: PUSH
9101: NOP4
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PPUSH
9114: NOP4
9118: NOT
9119: PUSH
9120: NOP4
9124: PUSH
9125: LD_INT 0
9127: EQUAL
9128: AND
9129: IFFALSE 9184
// for i := 1 to wayX do
9131: NOP4
9135: PUSH
9136: DOUBLE
9137: LD_INT 1
9139: DEC
9140: ST_TO_ADDR
9141: NOP4
9145: PUSH
9146: FOR_TO
9147: IFFALSE 9182
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
9149: NOP4
9153: PPUSH
9154: NOP4
9158: PUSH
9159: NOP4
9163: ARRAY
9164: PPUSH
9165: NOP4
9169: PUSH
9170: NOP4
9174: ARRAY
9175: PPUSH
9176: NOP4
9180: GO 9146
9182: POP
9183: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
9184: LD_INT 22
9186: PUSH
9187: NOP4
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PUSH
9196: LD_INT 95
9198: PUSH
9199: NOP4
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PPUSH
9212: NOP4
9216: IFFALSE 9440
// begin seeEnemy = 1 ;
9218: NOP4
9222: PUSH
9223: LD_INT 1
9225: ST_TO_ADDR
// for j in vehiclesOK do
9226: NOP4
9230: PUSH
9231: NOP4
9235: PUSH
9236: FOR_IN
9237: IFFALSE 9438
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9239: NOP4
9243: PUSH
9244: LD_INT 81
9246: PUSH
9247: NOP4
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 101
9258: PUSH
9259: LD_INT 1
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PPUSH
9270: NOP4
9274: PPUSH
9275: NOP4
9279: PPUSH
9280: NOP4
9284: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9285: NOP4
9289: PUSH
9290: LD_INT 81
9292: PUSH
9293: NOP4
=======
9080: PUSH
9081: LD_OWVAR 67
9085: ARRAY
9086: GREATEREQUAL
9087: IFFALSE 9652
// repeat wait ( 0 0$1 ) ;
9089: LD_INT 35
9091: PPUSH
9092: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
9096: LD_ADDR_VAR 0 8
9100: PUSH
9101: LD_INT 22
9103: PUSH
9104: LD_VAR 0 1
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 21
9115: PUSH
9116: LD_INT 2
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 24
9125: PUSH
9126: LD_INT 250
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 2
9135: PUSH
9136: LD_INT 34
9138: PUSH
9139: LD_INT 43
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PUSH
9146: LD_INT 34
9148: PUSH
9149: LD_INT 44
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: LD_INT 34
9158: PUSH
9159: LD_INT 46
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: PUSH
9172: LD_INT 3
9174: PUSH
9175: LD_INT 58
9177: PUSH
9178: EMPTY
9179: LIST
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: PPUSH
9192: CALL_OW 69
9196: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
9197: LD_INT 22
9199: PUSH
9200: LD_VAR 0 1
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PUSH
9209: LD_INT 95
9211: PUSH
9212: LD_VAR 0 2
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PPUSH
9225: CALL_OW 69
9229: NOT
9230: PUSH
9231: LD_VAR 0 11
9235: PUSH
9236: LD_INT 0
9238: EQUAL
9239: AND
9240: IFFALSE 9295
// for i := 1 to wayX do
9242: LD_ADDR_VAR 0 6
9246: PUSH
9247: DOUBLE
9248: LD_INT 1
9250: DEC
9251: ST_TO_ADDR
9252: LD_VAR 0 3
9256: PUSH
9257: FOR_TO
9258: IFFALSE 9293
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
9260: LD_VAR 0 8
9264: PPUSH
9265: LD_VAR 0 3
9269: PUSH
9270: LD_VAR 0 6
9274: ARRAY
9275: PPUSH
9276: LD_VAR 0 4
9280: PUSH
9281: LD_VAR 0 6
9285: ARRAY
9286: PPUSH
9287: CALL_OW 114
9291: GO 9257
9293: POP
9294: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
9295: LD_INT 22
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
9297: PUSH
9298: LD_VAR 0 1
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 95
9309: PUSH
9310: LD_VAR 0 2
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PPUSH
9323: CALL_OW 69
9327: IFFALSE 9551
// begin seeEnemy = 1 ;
9329: LD_ADDR_VAR 0 11
9333: PUSH
9334: LD_INT 1
9336: ST_TO_ADDR
// for j in vehiclesOK do
9337: LD_ADDR_VAR 0 7
9341: PUSH
9342: LD_VAR 0 8
9346: PUSH
<<<<<<< HEAD
9347: EMPTY
9348: LIST
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: PPUSH
9355: NOP4
9359: PPUSH
9360: NOP4
9364: PPUSH
9365: NOP4
9369: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9370: NOP4
9374: PPUSH
9375: NOP4
9379: PPUSH
9380: NOP4
9384: PUSH
9385: LD_INT 8
9387: PLUS
9388: PUSH
9389: NOP4
9393: PPUSH
9394: NOP4
9398: PPUSH
9399: NOP4
9403: LESS
9404: IFFALSE 9422
// ComAttackUnit ( j , target1 ) else
9406: NOP4
9410: PPUSH
9411: NOP4
9415: PPUSH
9416: NOP4
9420: GO 9436
// ComAttackUnit ( j , target2 ) ;
9422: NOP4
9426: PPUSH
9427: NOP4
9431: PPUSH
9432: NOP4
// end ;
9436: GO 9236
9438: POP
9439: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
9440: LD_INT 22
9442: PUSH
9443: NOP4
=======
9347: FOR_IN
9348: IFFALSE 9549
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9350: LD_ADDR_VAR 0 9
9354: PUSH
9355: LD_INT 81
9357: PUSH
9358: LD_VAR 0 1
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: PUSH
9367: LD_INT 101
9369: PUSH
9370: LD_INT 1
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PPUSH
9381: CALL_OW 69
9385: PPUSH
9386: LD_VAR 0 7
9390: PPUSH
9391: CALL_OW 74
9395: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9396: LD_ADDR_VAR 0 10
9400: PUSH
9401: LD_INT 81
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PUSH
9413: LD_INT 101
9415: PUSH
9416: LD_INT 1
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: LD_INT 2
9425: PUSH
9426: LD_INT 59
9428: PUSH
9429: EMPTY
9430: LIST
9431: PUSH
9432: LD_INT 21
9434: PUSH
9435: LD_INT 1
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: LD_INT 21
9444: PUSH
9445: LD_INT 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: LIST
9462: PUSH
9463: EMPTY
9464: LIST
9465: PPUSH
9466: CALL_OW 69
9470: PPUSH
9471: LD_VAR 0 7
9475: PPUSH
9476: CALL_OW 74
9480: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9481: LD_VAR 0 7
9485: PPUSH
9486: LD_VAR 0 9
9490: PPUSH
9491: CALL_OW 296
9495: PUSH
9496: LD_INT 8
9498: PLUS
9499: PUSH
<<<<<<< HEAD
9500: EMPTY
9501: LIST
9502: LIST
9503: PUSH
9504: LD_INT 34
9506: PUSH
9507: LD_INT 46
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: LIST
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: PPUSH
9531: NOP4
9535: PUSH
9536: LD_INT 0
9538: EQUAL
9539: IFFALSE 8978
// seeEnemy = 0 ;
9541: NOP4
9545: PUSH
9546: LD_INT 0
9548: ST_TO_ADDR
// end ;
9549: LD_VAR 0 5
9553: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9554: LD_INT 0
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
9562: NOP4
9566: PUSH
9567: NOP4
9571: PPUSH
9572: NOP4
9576: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
9577: NOP4
9581: PUSH
9582: NOP4
9586: PPUSH
9587: LD_INT 22
9589: PUSH
9590: NOP4
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
=======
9500: LD_VAR 0 7
9504: PPUSH
9505: LD_VAR 0 10
9509: PPUSH
9510: CALL_OW 296
9514: LESS
9515: IFFALSE 9533
// ComAttackUnit ( j , target1 ) else
9517: LD_VAR 0 7
9521: PPUSH
9522: LD_VAR 0 9
9526: PPUSH
9527: CALL_OW 115
9531: GO 9547
// ComAttackUnit ( j , target2 ) ;
9533: LD_VAR 0 7
9537: PPUSH
9538: LD_VAR 0 10
9542: PPUSH
9543: CALL_OW 115
// end ;
9547: GO 9347
9549: POP
9550: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
9551: LD_INT 22
9553: PUSH
9554: LD_VAR 0 1
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PUSH
9563: LD_INT 21
9565: PUSH
9566: LD_INT 2
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PUSH
9573: LD_INT 24
9575: PUSH
9576: LD_INT 250
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 2
9585: PUSH
9586: LD_INT 34
9588: PUSH
9589: LD_INT 43
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 34
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
9598: PUSH
9599: LD_INT 44
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 34
9608: PUSH
9609: LD_INT 46
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 3
9624: PUSH
9625: LD_INT 58
9627: PUSH
9628: EMPTY
9629: LIST
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: EMPTY
9636: LIST
<<<<<<< HEAD
9637: PPUSH
9638: NOP4
9642: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9643: NOP4
9647: PUSH
9648: NOP4
9652: PPUSH
9653: LD_INT 22
9655: PUSH
9656: NOP4
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 21
9667: PUSH
9668: LD_INT 3
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PUSH
9675: LD_INT 3
9677: PUSH
9678: LD_INT 24
9680: PUSH
9681: LD_INT 1000
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
=======
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: PPUSH
9642: CALL_OW 69
9646: PUSH
9647: LD_INT 0
9649: EQUAL
9650: IFFALSE 9089
// seeEnemy = 0 ;
9652: LD_ADDR_VAR 0 11
9656: PUSH
9657: LD_INT 0
9659: ST_TO_ADDR
// end ;
9660: LD_VAR 0 5
9664: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
9665: LD_INT 0
9667: PPUSH
9668: PPUSH
9669: PPUSH
9670: PPUSH
9671: PPUSH
9672: PPUSH
// repeat wait ( 0 0$1 ) ;
9673: LD_INT 35
9675: PPUSH
9676: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
9680: LD_ADDR_VAR 0 7
9684: PUSH
9685: LD_INT 22
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
9687: PUSH
9688: LD_VAR 0 1
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
<<<<<<< HEAD
9697: EMPTY
9698: LIST
9699: PPUSH
9700: NOP4
9704: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
9705: NOP4
9709: NOT
9710: PUSH
9711: LD_INT 22
9713: PUSH
9714: NOP4
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 25
9725: PUSH
9726: LD_INT 2
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 24
9735: PUSH
9736: LD_INT 250
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: LIST
9747: PPUSH
9748: NOP4
9752: NOT
9753: AND
9754: IFFALSE 9758
// exit ;
9756: GO 9940
// if buildings_list > 0 and engineerOkInside then
9758: NOP4
=======
9697: LD_INT 21
9699: PUSH
9700: LD_INT 2
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 24
9709: PUSH
9710: LD_INT 651
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: PPUSH
9722: CALL_OW 69
9726: ST_TO_ADDR
// for j in vehiclesOK do
9727: LD_ADDR_VAR 0 4
9731: PUSH
9732: LD_VAR 0 7
9736: PUSH
9737: FOR_IN
9738: IFFALSE 9939
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9740: LD_ADDR_VAR 0 5
9744: PUSH
9745: LD_INT 81
9747: PUSH
9748: LD_VAR 0 1
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 101
9759: PUSH
9760: LD_INT 1
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
<<<<<<< HEAD
9767: NOP4
9771: AND
9772: IFFALSE 9783
// ComExitBuilding ( engineerOkInside ) ;
9774: NOP4
9778: PPUSH
9779: NOP4
// if buildings_list > 0 and engineerOkOutside > 0 then
9783: NOP4
9787: PUSH
9788: LD_INT 0
9790: GREATER
9791: PUSH
9792: NOP4
9796: PUSH
9797: LD_INT 0
9799: GREATER
9800: AND
9801: IFFALSE 9821
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
9803: NOP4
9807: PPUSH
9808: NOP4
9812: PUSH
9813: LD_INT 1
9815: ARRAY
9816: PPUSH
9817: NOP4
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
9821: NOP4
9825: PUSH
9826: LD_INT 0
9828: EQUAL
9829: PUSH
9830: NOP4
9834: PUSH
9835: LD_INT 0
9837: EQUAL
9838: AND
9839: PUSH
9840: NOP4
9844: PUSH
9845: LD_INT 0
9847: GREATER
9848: AND
9849: IFFALSE 9865
// ComEnterUnit ( engineerOkOutside , building ) ;
9851: NOP4
9855: PPUSH
9856: NOP4
9860: PPUSH
9861: NOP4
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9865: NOP4
9869: PUSH
9870: LD_INT 0
9872: GREATER
9873: PUSH
9874: NOP4
9878: PUSH
9879: LD_INT 0
9881: EQUAL
9882: AND
9883: PUSH
9884: NOP4
9888: PUSH
9889: LD_INT 0
9891: GREATER
9892: AND
9893: IFFALSE 9940
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9895: NOP4
9899: PPUSH
9900: NOP4
9904: PUSH
9905: LD_INT 1
9907: ARRAY
9908: PPUSH
9909: NOP4
9913: PUSH
9914: LD_INT 2
9916: ARRAY
9917: PPUSH
9918: NOP4
9922: PUSH
9923: LD_INT 3
9925: ARRAY
9926: PPUSH
9927: NOP4
9931: PUSH
9932: LD_INT 4
9934: ARRAY
9935: PPUSH
9936: NOP4
// end ;
9940: LD_VAR 0 5
9944: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
9945: LD_INT 0
9947: PPUSH
9948: PPUSH
9949: PPUSH
9950: PPUSH
9951: PPUSH
9952: PPUSH
9953: PPUSH
9954: PPUSH
9955: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
9956: NOP4
9960: PUSH
9961: LD_INT 22
9963: PUSH
9964: NOP4
=======
9767: EMPTY
9768: LIST
9769: LIST
9770: PPUSH
9771: CALL_OW 69
9775: PPUSH
9776: LD_VAR 0 4
9780: PPUSH
9781: CALL_OW 74
9785: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9786: LD_ADDR_VAR 0 6
9790: PUSH
9791: LD_INT 81
9793: PUSH
9794: LD_VAR 0 1
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: LD_INT 101
9805: PUSH
9806: LD_INT 1
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: LD_INT 2
9815: PUSH
9816: LD_INT 59
9818: PUSH
9819: EMPTY
9820: LIST
9821: PUSH
9822: LD_INT 21
9824: PUSH
9825: LD_INT 1
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: LD_INT 21
9834: PUSH
9835: LD_INT 2
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: PUSH
9853: EMPTY
9854: LIST
9855: PPUSH
9856: CALL_OW 69
9860: PPUSH
9861: LD_VAR 0 4
9865: PPUSH
9866: CALL_OW 74
9870: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9871: LD_VAR 0 4
9875: PPUSH
9876: LD_VAR 0 5
9880: PPUSH
9881: CALL_OW 296
9885: PUSH
9886: LD_INT 8
9888: PLUS
9889: PUSH
9890: LD_VAR 0 4
9894: PPUSH
9895: LD_VAR 0 6
9899: PPUSH
9900: CALL_OW 296
9904: LESS
9905: IFFALSE 9923
// ComAttackUnit ( j , target1 ) else
9907: LD_VAR 0 4
9911: PPUSH
9912: LD_VAR 0 5
9916: PPUSH
9917: CALL_OW 115
9921: GO 9937
// ComAttackUnit ( j , target2 ) ;
9923: LD_VAR 0 4
9927: PPUSH
9928: LD_VAR 0 6
9932: PPUSH
9933: CALL_OW 115
// end ;
9937: GO 9737
9939: POP
9940: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
9941: LD_INT 22
9943: PUSH
9944: LD_VAR 0 1
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PUSH
9953: LD_INT 21
9955: PUSH
9956: LD_INT 2
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: LD_INT 24
9965: PUSH
9966: LD_INT 250
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: PPUSH
9978: CALL_OW 69
9982: PUSH
<<<<<<< HEAD
9983: LD_INT 23
9985: PUSH
9986: LD_INT 2
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 24
9995: PUSH
9996: LD_INT 251
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: PPUSH
10009: NOP4
10013: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
10014: NOP4
10018: PUSH
10019: NOP4
10023: PPUSH
10024: LD_INT 22
10026: PUSH
10027: NOP4
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 23
10038: PUSH
10039: LD_INT 2
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 25
10048: PUSH
10049: LD_INT 4
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 50
10058: PUSH
10059: EMPTY
10060: LIST
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: PPUSH
10068: NOP4
10072: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10073: NOP4
10077: PUSH
10078: NOP4
10082: PPUSH
10083: LD_INT 22
10085: PUSH
10086: NOP4
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
=======
9983: LD_INT 0
9985: EQUAL
9986: IFFALSE 9673
// end ;
9988: LD_VAR 0 2
9992: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9993: LD_INT 0
9995: PPUSH
9996: PPUSH
9997: PPUSH
9998: PPUSH
9999: PPUSH
10000: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
10001: LD_ADDR_VAR 0 8
10005: PUSH
10006: LD_VAR 0 2
10010: PPUSH
10011: CALL_OW 313
10015: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
10016: LD_ADDR_VAR 0 9
10020: PUSH
10021: LD_VAR 0 3
10025: PPUSH
10026: LD_INT 22
10028: PUSH
10029: LD_VAR 0 1
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 25
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 24
10050: PUSH
10051: LD_INT 750
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 3
10060: PUSH
10061: LD_INT 54
10063: PUSH
10064: EMPTY
10065: LIST
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: PPUSH
10077: CALL_OW 70
10081: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10082: LD_ADDR_VAR 0 6
10086: PUSH
10087: LD_VAR 0 3
10091: PPUSH
10092: LD_INT 22
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
10094: PUSH
10095: LD_VAR 0 1
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 21
10106: PUSH
10107: LD_INT 3
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 3
10116: PUSH
10117: LD_INT 24
10119: PUSH
10120: LD_INT 1000
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: LIST
10135: PUSH
10136: EMPTY
10137: LIST
<<<<<<< HEAD
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: PPUSH
10145: NOP4
10149: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10150: NOP4
10154: PUSH
10155: NOP4
10159: PPUSH
10160: LD_INT 22
10162: PUSH
10163: NOP4
=======
10138: PPUSH
10139: CALL_OW 70
10143: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
10144: LD_VAR 0 6
10148: NOT
10149: PUSH
10150: LD_INT 22
10152: PUSH
10153: LD_VAR 0 1
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: LD_INT 25
10164: PUSH
10165: LD_INT 2
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 24
10174: PUSH
10175: LD_INT 250
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
<<<<<<< HEAD
10182: LD_INT 3
10184: PUSH
10185: LD_INT 25
10187: PUSH
10188: LD_INT 3
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 3
10201: PUSH
10202: LD_INT 24
10204: PUSH
10205: LD_INT 1000
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: PPUSH
10222: NOP4
10226: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10227: NOP4
10231: NOT
10232: PUSH
10233: NOP4
10237: NOT
10238: AND
10239: PUSH
10240: NOP4
10244: NOT
10245: AND
10246: IFFALSE 10250
// exit ;
10248: GO 10484
// if damageUnits > 0 and sci_list > 0 then
10250: NOP4
10254: PUSH
10255: LD_INT 0
10257: GREATER
10258: PUSH
10259: NOP4
10263: PUSH
10264: LD_INT 0
10266: GREATER
10267: AND
10268: IFFALSE 10284
// ComMoveToArea ( damageUnits , healArea ) ;
10270: NOP4
10274: PPUSH
10275: NOP4
10279: PPUSH
10280: NOP4
// if unitsToHeal > 0 and sci_list > 0 then
10284: NOP4
10288: PUSH
10289: LD_INT 0
10291: GREATER
10292: PUSH
10293: NOP4
10297: PUSH
10298: LD_INT 0
10300: GREATER
10301: AND
10302: IFFALSE 10313
// ComExitBuilding ( sci_list ) ;
10304: NOP4
10308: PPUSH
10309: NOP4
// if unitsToHeal > 0 and sci_listOutside > 0 then
10313: NOP4
10317: PUSH
10318: LD_INT 0
10320: GREATER
10321: PUSH
10322: NOP4
10326: PUSH
10327: LD_INT 0
10329: GREATER
10330: AND
10331: IFFALSE 10351
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10333: NOP4
10337: PPUSH
10338: NOP4
10342: PUSH
10343: LD_INT 1
10345: ARRAY
10346: PPUSH
10347: NOP4
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10351: NOP4
10355: PUSH
10356: LD_INT 0
10358: EQUAL
10359: PUSH
10360: NOP4
10364: PUSH
10365: LD_INT 0
10367: EQUAL
10368: AND
10369: PUSH
10370: NOP4
10374: PUSH
10375: LD_INT 0
10377: GREATER
10378: AND
10379: IFFALSE 10484
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10381: NOP4
10385: PUSH
10386: LD_INT 22
10388: PUSH
10389: NOP4
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 21
10400: PUSH
10401: LD_INT 3
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
=======
10182: EMPTY
10183: LIST
10184: LIST
10185: LIST
10186: PPUSH
10187: CALL_OW 69
10191: NOT
10192: AND
10193: IFFALSE 10197
// exit ;
10195: GO 10379
// if buildings_list > 0 and engineerOkInside then
10197: LD_VAR 0 6
10201: PUSH
10202: LD_INT 0
10204: GREATER
10205: PUSH
10206: LD_VAR 0 8
10210: AND
10211: IFFALSE 10222
// ComExitBuilding ( engineerOkInside ) ;
10213: LD_VAR 0 8
10217: PPUSH
10218: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
10222: LD_VAR 0 6
10226: PUSH
10227: LD_INT 0
10229: GREATER
10230: PUSH
10231: LD_VAR 0 9
10235: PUSH
10236: LD_INT 0
10238: GREATER
10239: AND
10240: IFFALSE 10260
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
10242: LD_VAR 0 9
10246: PPUSH
10247: LD_VAR 0 6
10251: PUSH
10252: LD_INT 1
10254: ARRAY
10255: PPUSH
10256: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
10260: LD_VAR 0 6
10264: PUSH
10265: LD_INT 0
10267: EQUAL
10268: PUSH
10269: LD_VAR 0 4
10273: PUSH
10274: LD_INT 0
10276: EQUAL
10277: AND
10278: PUSH
10279: LD_VAR 0 9
10283: PUSH
10284: LD_INT 0
10286: GREATER
10287: AND
10288: IFFALSE 10304
// ComEnterUnit ( engineerOkOutside , building ) ;
10290: LD_VAR 0 9
10294: PPUSH
10295: LD_VAR 0 2
10299: PPUSH
10300: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10304: LD_VAR 0 9
10308: PUSH
10309: LD_INT 0
10311: GREATER
10312: PUSH
10313: LD_VAR 0 6
10317: PUSH
10318: LD_INT 0
10320: EQUAL
10321: AND
10322: PUSH
10323: LD_VAR 0 4
10327: PUSH
10328: LD_INT 0
10330: GREATER
10331: AND
10332: IFFALSE 10379
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10334: LD_VAR 0 9
10338: PPUSH
10339: LD_VAR 0 4
10343: PUSH
10344: LD_INT 1
10346: ARRAY
10347: PPUSH
10348: LD_VAR 0 4
10352: PUSH
10353: LD_INT 2
10355: ARRAY
10356: PPUSH
10357: LD_VAR 0 4
10361: PUSH
10362: LD_INT 3
10364: ARRAY
10365: PPUSH
10366: LD_VAR 0 4
10370: PUSH
10371: LD_INT 4
10373: ARRAY
10374: PPUSH
10375: CALL_OW 145
// end ;
10379: LD_VAR 0 5
10383: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10384: LD_INT 0
10386: PPUSH
10387: PPUSH
10388: PPUSH
10389: PPUSH
10390: PPUSH
10391: PPUSH
10392: PPUSH
10393: PPUSH
10394: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
10395: LD_ADDR_VAR 0 6
10399: PUSH
10400: LD_INT 22
10402: PUSH
10403: LD_VAR 0 1
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 25
10414: PUSH
10415: LD_INT 4
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
<<<<<<< HEAD
10421: LIST
10422: PPUSH
10423: NOP4
10427: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10428: NOP4
10432: PUSH
10433: LD_INT 1
10435: PPUSH
10436: NOP4
10440: PPUSH
10441: NOP4
10445: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10446: NOP4
10450: PPUSH
10451: LD_INT 3
10453: PUSH
10454: LD_INT 60
10456: PUSH
10457: EMPTY
10458: LIST
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PPUSH
10464: NOP4
10468: PPUSH
10469: NOP4
10473: PUSH
10474: NOP4
10478: ARRAY
10479: PPUSH
10480: NOP4
// end ; end ;
10484: LD_VAR 0 5
10488: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
10489: LD_INT 0
10491: PPUSH
10492: PPUSH
10493: PPUSH
10494: PPUSH
10495: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
10496: NOP4
10500: PUSH
10501: LD_INT 22
10503: PUSH
10504: NOP4
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 2
10515: PUSH
10516: LD_INT 30
10518: PUSH
10519: LD_INT 31
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: PUSH
10526: LD_INT 30
10528: PUSH
10529: LD_INT 32
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 30
10538: PUSH
10539: LD_INT 33
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 30
10548: PUSH
10549: LD_INT 4
10551: PUSH
10552: EMPTY
10553: LIST
=======
10421: PUSH
10422: LD_INT 23
10424: PUSH
10425: LD_INT 2
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 24
10434: PUSH
10435: LD_INT 251
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: PPUSH
10448: CALL_OW 69
10452: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
10453: LD_ADDR_VAR 0 7
10457: PUSH
10458: LD_VAR 0 3
10462: PPUSH
10463: LD_INT 22
10465: PUSH
10466: LD_VAR 0 1
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PUSH
10475: LD_INT 23
10477: PUSH
10478: LD_INT 2
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 25
10487: PUSH
10488: LD_INT 4
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: LD_INT 50
10497: PUSH
10498: EMPTY
10499: LIST
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: PPUSH
10507: CALL_OW 70
10511: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10512: LD_ADDR_VAR 0 10
10516: PUSH
10517: LD_VAR 0 3
10521: PPUSH
10522: LD_INT 22
10524: PUSH
10525: LD_VAR 0 1
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PUSH
10534: LD_INT 21
10536: PUSH
10537: LD_INT 1
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 3
10546: PUSH
10547: LD_INT 25
10549: PUSH
10550: LD_INT 3
10552: PUSH
10553: EMPTY
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
10554: LIST
10555: LIST
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 3
10563: PUSH
10564: LD_INT 24
10566: PUSH
10567: LD_INT 750
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
<<<<<<< HEAD
10577: PPUSH
10578: NOP4
10582: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10583: NOP4
10587: PUSH
10588: LD_INT 22
10590: PUSH
10591: NOP4
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 21
10602: PUSH
10603: LD_INT 3
10605: PUSH
10606: EMPTY
10607: LIST
=======
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: PPUSH
10584: CALL_OW 70
10588: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10589: LD_ADDR_VAR 0 11
10593: PUSH
10594: LD_VAR 0 2
10598: PPUSH
10599: LD_INT 22
10601: PUSH
10602: LD_VAR 0 1
10606: PUSH
10607: EMPTY
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 21
10613: PUSH
10614: LD_INT 1
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
<<<<<<< HEAD
10620: PPUSH
10621: NOP4
10625: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
10626: NOP4
10630: PUSH
10631: LD_INT 0
10633: GREATER
10634: PUSH
10635: NOP4
10639: PUSH
10640: LD_INT 0
10642: GREATER
10643: AND
10644: IFFALSE 10714
// begin for i in turretsList do
10646: NOP4
10650: PUSH
10651: NOP4
10655: PUSH
10656: FOR_IN
10657: IFFALSE 10712
// begin for j in enemyBuildings do
10659: NOP4
10663: PUSH
10664: NOP4
10668: PUSH
10669: FOR_IN
10670: IFFALSE 10708
// begin if GetDistUnits ( i , j ) < 20 then
10672: NOP4
10676: PPUSH
10677: NOP4
10681: PPUSH
10682: NOP4
10686: PUSH
10687: LD_INT 20
10689: LESS
10690: IFFALSE 10706
// begin ComAttackUnit ( i , j ) ;
10692: NOP4
10696: PPUSH
10697: NOP4
10701: PPUSH
10702: NOP4
// end ; end ;
10706: GO 10669
10708: POP
10709: POP
// end ;
10710: GO 10656
10712: POP
10713: POP
// end ; end ;
10714: LD_VAR 0 3
10718: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10719: LD_INT 0
10721: PPUSH
10722: PPUSH
10723: PPUSH
10724: PPUSH
10725: PPUSH
10726: PPUSH
10727: PPUSH
10728: PPUSH
10729: PPUSH
10730: PPUSH
10731: PPUSH
// for i = 1 to medicCount do
10732: NOP4
10736: PUSH
10737: DOUBLE
10738: LD_INT 1
10740: DEC
10741: ST_TO_ADDR
10742: NOP4
10746: PUSH
10747: FOR_TO
10748: IFFALSE 10830
// begin uc_side = side ;
10750: LD_ADDR_OWVAR 20
10754: PUSH
10755: NOP4
10759: ST_TO_ADDR
// uc_nation = nation ;
10760: LD_ADDR_OWVAR 21
10764: PUSH
10765: NOP4
10769: ST_TO_ADDR
=======
10620: PUSH
10621: LD_INT 3
10623: PUSH
10624: LD_INT 25
10626: PUSH
10627: LD_INT 3
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 3
10640: PUSH
10641: LD_INT 24
10643: PUSH
10644: LD_INT 1000
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: PPUSH
10661: CALL_OW 70
10665: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10666: LD_VAR 0 10
10670: NOT
10671: PUSH
10672: LD_VAR 0 11
10676: NOT
10677: AND
10678: PUSH
10679: LD_VAR 0 6
10683: NOT
10684: AND
10685: IFFALSE 10689
// exit ;
10687: GO 10923
// if damageUnits > 0 and sci_list > 0 then
10689: LD_VAR 0 10
10693: PUSH
10694: LD_INT 0
10696: GREATER
10697: PUSH
10698: LD_VAR 0 6
10702: PUSH
10703: LD_INT 0
10705: GREATER
10706: AND
10707: IFFALSE 10723
// ComMoveToArea ( damageUnits , healArea ) ;
10709: LD_VAR 0 10
10713: PPUSH
10714: LD_VAR 0 2
10718: PPUSH
10719: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
10723: LD_VAR 0 11
10727: PUSH
10728: LD_INT 0
10730: GREATER
10731: PUSH
10732: LD_VAR 0 6
10736: PUSH
10737: LD_INT 0
10739: GREATER
10740: AND
10741: IFFALSE 10752
// ComExitBuilding ( sci_list ) ;
10743: LD_VAR 0 6
10747: PPUSH
10748: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
10752: LD_VAR 0 11
10756: PUSH
10757: LD_INT 0
10759: GREATER
10760: PUSH
10761: LD_VAR 0 7
10765: PUSH
10766: LD_INT 0
10768: GREATER
10769: AND
10770: IFFALSE 10790
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10772: LD_VAR 0 7
10776: PPUSH
10777: LD_VAR 0 11
10781: PUSH
10782: LD_INT 1
10784: ARRAY
10785: PPUSH
10786: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10790: LD_VAR 0 10
10794: PUSH
10795: LD_INT 0
10797: EQUAL
10798: PUSH
10799: LD_VAR 0 11
10803: PUSH
10804: LD_INT 0
10806: EQUAL
10807: AND
10808: PUSH
10809: LD_VAR 0 7
10813: PUSH
10814: LD_INT 0
10816: GREATER
10817: AND
10818: IFFALSE 10923
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10820: LD_ADDR_VAR 0 12
10824: PUSH
10825: LD_INT 22
10827: PUSH
10828: LD_VAR 0 1
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 21
10839: PUSH
10840: LD_INT 3
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 30
10849: PUSH
10850: LD_INT 8
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: LIST
10861: PPUSH
10862: CALL_OW 69
10866: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10867: LD_ADDR_VAR 0 13
10871: PUSH
10872: LD_INT 1
10874: PPUSH
10875: LD_VAR 0 12
10879: PPUSH
10880: CALL_OW 12
10884: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10885: LD_VAR 0 7
10889: PPUSH
10890: LD_INT 3
10892: PUSH
10893: LD_INT 60
10895: PUSH
10896: EMPTY
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PPUSH
10903: CALL_OW 72
10907: PPUSH
10908: LD_VAR 0 12
10912: PUSH
10913: LD_VAR 0 13
10917: ARRAY
10918: PPUSH
10919: CALL_OW 120
// end ; end ;
10923: LD_VAR 0 5
10927: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
10928: LD_INT 0
10930: PPUSH
10931: PPUSH
10932: PPUSH
10933: PPUSH
10934: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
10935: LD_ADDR_VAR 0 6
10939: PUSH
10940: LD_INT 22
10942: PUSH
10943: LD_VAR 0 1
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 2
10954: PUSH
10955: LD_INT 30
10957: PUSH
10958: LD_INT 31
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: LD_INT 30
10967: PUSH
10968: LD_INT 32
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PUSH
10975: LD_INT 30
10977: PUSH
10978: LD_INT 33
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 30
10987: PUSH
10988: LD_INT 4
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 30
10997: PUSH
10998: LD_INT 5
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PPUSH
11017: CALL_OW 69
11021: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11022: LD_ADDR_VAR 0 7
11026: PUSH
11027: LD_INT 22
11029: PUSH
11030: LD_VAR 0 2
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 21
11041: PUSH
11042: LD_INT 3
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: LD_INT 58
11051: PUSH
11052: EMPTY
11053: LIST
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: PPUSH
11060: CALL_OW 69
11064: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11065: LD_VAR 0 6
11069: PUSH
11070: LD_INT 0
11072: GREATER
11073: PUSH
11074: LD_VAR 0 7
11078: PUSH
11079: LD_INT 0
11081: GREATER
11082: AND
11083: IFFALSE 11153
// begin for i in turretsList do
11085: LD_ADDR_VAR 0 4
11089: PUSH
11090: LD_VAR 0 6
11094: PUSH
11095: FOR_IN
11096: IFFALSE 11151
// begin for j in enemyBuildings do
11098: LD_ADDR_VAR 0 5
11102: PUSH
11103: LD_VAR 0 7
11107: PUSH
11108: FOR_IN
11109: IFFALSE 11147
// begin if GetDistUnits ( i , j ) < 20 then
11111: LD_VAR 0 4
11115: PPUSH
11116: LD_VAR 0 5
11120: PPUSH
11121: CALL_OW 296
11125: PUSH
11126: LD_INT 20
11128: LESS
11129: IFFALSE 11145
// begin ComAttackUnit ( i , j ) ;
11131: LD_VAR 0 4
11135: PPUSH
11136: LD_VAR 0 5
11140: PPUSH
11141: CALL_OW 115
// end ; end ;
11145: GO 11108
11147: POP
11148: POP
// end ;
11149: GO 11095
11151: POP
11152: POP
// end ; end ;
11153: LD_VAR 0 3
11157: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
11158: LD_INT 0
11160: PPUSH
11161: PPUSH
11162: PPUSH
11163: PPUSH
11164: PPUSH
11165: PPUSH
11166: PPUSH
11167: PPUSH
11168: PPUSH
11169: PPUSH
11170: PPUSH
// for i = 1 to medicCount do
11171: LD_ADDR_VAR 0 14
11175: PUSH
11176: DOUBLE
11177: LD_INT 1
11179: DEC
11180: ST_TO_ADDR
11181: LD_VAR 0 7
11185: PUSH
11186: FOR_TO
11187: IFFALSE 11269
// begin uc_side = side ;
11189: LD_ADDR_OWVAR 20
11193: PUSH
11194: LD_VAR 0 1
11198: ST_TO_ADDR
// uc_nation = nation ;
11199: LD_ADDR_OWVAR 21
11203: PUSH
11204: LD_VAR 0 2
11208: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// hc_name =  ;
11209: LD_ADDR_OWVAR 26
11213: PUSH
11214: LD_STRING 
11216: ST_TO_ADDR
// hc_gallery =  ;
11217: LD_ADDR_OWVAR 33
11221: PUSH
11222: LD_STRING 
11224: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
<<<<<<< HEAD
10786: LD_INT 0
10788: PPUSH
10789: LD_INT 4
10791: PPUSH
10792: NOP4
10796: PPUSH
10797: NOP4
// un = CreateHuman ;
10801: NOP4
10805: PUSH
10806: NOP4
10810: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10811: NOP4
10815: PPUSH
10816: NOP4
10820: PPUSH
10821: LD_INT 0
10823: PPUSH
10824: NOP4
=======
11225: LD_INT 0
11227: PPUSH
11228: LD_INT 4
11230: PPUSH
11231: LD_VAR 0 8
11235: PPUSH
11236: CALL_OW 380
// un = CreateHuman ;
11240: LD_ADDR_VAR 0 16
11244: PUSH
11245: CALL_OW 44
11249: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11250: LD_VAR 0 16
11254: PPUSH
11255: LD_VAR 0 9
11259: PPUSH
11260: LD_INT 0
11262: PPUSH
11263: CALL_OW 49
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
11267: GO 11186
11269: POP
11270: POP
// for i = 1 to soldierCount do
<<<<<<< HEAD
10832: NOP4
10836: PUSH
10837: DOUBLE
10838: LD_INT 1
10840: DEC
10841: ST_TO_ADDR
10842: NOP4
10846: PUSH
10847: FOR_TO
10848: IFFALSE 10930
// begin uc_side = side ;
10850: LD_ADDR_OWVAR 20
10854: PUSH
10855: NOP4
10859: ST_TO_ADDR
// uc_nation = nation ;
10860: LD_ADDR_OWVAR 21
10864: PUSH
10865: NOP4
10869: ST_TO_ADDR
=======
11271: LD_ADDR_VAR 0 14
11275: PUSH
11276: DOUBLE
11277: LD_INT 1
11279: DEC
11280: ST_TO_ADDR
11281: LD_VAR 0 3
11285: PUSH
11286: FOR_TO
11287: IFFALSE 11369
// begin uc_side = side ;
11289: LD_ADDR_OWVAR 20
11293: PUSH
11294: LD_VAR 0 1
11298: ST_TO_ADDR
// uc_nation = nation ;
11299: LD_ADDR_OWVAR 21
11303: PUSH
11304: LD_VAR 0 2
11308: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// hc_name =  ;
11309: LD_ADDR_OWVAR 26
11313: PUSH
11314: LD_STRING 
11316: ST_TO_ADDR
// hc_gallery =  ;
11317: LD_ADDR_OWVAR 33
11321: PUSH
11322: LD_STRING 
11324: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
<<<<<<< HEAD
10886: LD_INT 0
10888: PPUSH
10889: LD_INT 1
10891: PPUSH
10892: NOP4
10896: PPUSH
10897: NOP4
// un = CreateHuman ;
10901: NOP4
10905: PUSH
10906: NOP4
10910: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10911: NOP4
10915: PPUSH
10916: NOP4
10920: PPUSH
10921: LD_INT 0
10923: PPUSH
10924: NOP4
=======
11325: LD_INT 0
11327: PPUSH
11328: LD_INT 1
11330: PPUSH
11331: LD_VAR 0 8
11335: PPUSH
11336: CALL_OW 380
// un = CreateHuman ;
11340: LD_ADDR_VAR 0 16
11344: PUSH
11345: CALL_OW 44
11349: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11350: LD_VAR 0 16
11354: PPUSH
11355: LD_VAR 0 9
11359: PPUSH
11360: LD_INT 0
11362: PPUSH
11363: CALL_OW 49
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
11367: GO 11286
11369: POP
11370: POP
// for i = 1 to sniperCount do
<<<<<<< HEAD
10932: NOP4
10936: PUSH
10937: DOUBLE
10938: LD_INT 1
10940: DEC
10941: ST_TO_ADDR
10942: NOP4
10946: PUSH
10947: FOR_TO
10948: IFFALSE 11030
// begin uc_side = side ;
10950: LD_ADDR_OWVAR 20
10954: PUSH
10955: NOP4
10959: ST_TO_ADDR
// uc_nation = nation ;
10960: LD_ADDR_OWVAR 21
10964: PUSH
10965: NOP4
10969: ST_TO_ADDR
=======
11371: LD_ADDR_VAR 0 14
11375: PUSH
11376: DOUBLE
11377: LD_INT 1
11379: DEC
11380: ST_TO_ADDR
11381: LD_VAR 0 4
11385: PUSH
11386: FOR_TO
11387: IFFALSE 11469
// begin uc_side = side ;
11389: LD_ADDR_OWVAR 20
11393: PUSH
11394: LD_VAR 0 1
11398: ST_TO_ADDR
// uc_nation = nation ;
11399: LD_ADDR_OWVAR 21
11403: PUSH
11404: LD_VAR 0 2
11408: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// hc_name =  ;
11409: LD_ADDR_OWVAR 26
11413: PUSH
11414: LD_STRING 
11416: ST_TO_ADDR
// hc_gallery =  ;
11417: LD_ADDR_OWVAR 33
11421: PUSH
11422: LD_STRING 
11424: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
<<<<<<< HEAD
10986: LD_INT 0
10988: PPUSH
10989: LD_INT 5
10991: PPUSH
10992: NOP4
10996: PPUSH
10997: NOP4
// un = CreateHuman ;
11001: NOP4
11005: PUSH
11006: NOP4
11010: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11011: NOP4
11015: PPUSH
11016: NOP4
11020: PPUSH
11021: LD_INT 0
11023: PPUSH
11024: NOP4
=======
11425: LD_INT 0
11427: PPUSH
11428: LD_INT 5
11430: PPUSH
11431: LD_VAR 0 8
11435: PPUSH
11436: CALL_OW 380
// un = CreateHuman ;
11440: LD_ADDR_VAR 0 16
11444: PUSH
11445: CALL_OW 44
11449: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11450: LD_VAR 0 16
11454: PPUSH
11455: LD_VAR 0 9
11459: PPUSH
11460: LD_INT 0
11462: PPUSH
11463: CALL_OW 49
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
11467: GO 11386
11469: POP
11470: POP
// for i = 1 to bazookCount do
<<<<<<< HEAD
11032: NOP4
11036: PUSH
11037: DOUBLE
11038: LD_INT 1
11040: DEC
11041: ST_TO_ADDR
11042: NOP4
11046: PUSH
11047: FOR_TO
11048: IFFALSE 11130
// begin uc_side = side ;
11050: LD_ADDR_OWVAR 20
11054: PUSH
11055: NOP4
11059: ST_TO_ADDR
// uc_nation = nation ;
11060: LD_ADDR_OWVAR 21
11064: PUSH
11065: NOP4
11069: ST_TO_ADDR
=======
11471: LD_ADDR_VAR 0 14
11475: PUSH
11476: DOUBLE
11477: LD_INT 1
11479: DEC
11480: ST_TO_ADDR
11481: LD_VAR 0 5
11485: PUSH
11486: FOR_TO
11487: IFFALSE 11569
// begin uc_side = side ;
11489: LD_ADDR_OWVAR 20
11493: PUSH
11494: LD_VAR 0 1
11498: ST_TO_ADDR
// uc_nation = nation ;
11499: LD_ADDR_OWVAR 21
11503: PUSH
11504: LD_VAR 0 2
11508: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// hc_name =  ;
11509: LD_ADDR_OWVAR 26
11513: PUSH
11514: LD_STRING 
11516: ST_TO_ADDR
// hc_gallery =  ;
11517: LD_ADDR_OWVAR 33
11521: PUSH
11522: LD_STRING 
11524: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
<<<<<<< HEAD
11086: LD_INT 0
11088: PPUSH
11089: LD_INT 9
11091: PPUSH
11092: NOP4
11096: PPUSH
11097: NOP4
// un = CreateHuman ;
11101: NOP4
11105: PUSH
11106: NOP4
11110: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11111: NOP4
11115: PPUSH
11116: NOP4
11120: PPUSH
11121: LD_INT 0
11123: PPUSH
11124: NOP4
=======
11525: LD_INT 0
11527: PPUSH
11528: LD_INT 9
11530: PPUSH
11531: LD_VAR 0 8
11535: PPUSH
11536: CALL_OW 380
// un = CreateHuman ;
11540: LD_ADDR_VAR 0 16
11544: PUSH
11545: CALL_OW 44
11549: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11550: LD_VAR 0 16
11554: PPUSH
11555: LD_VAR 0 9
11559: PPUSH
11560: LD_INT 0
11562: PPUSH
11563: CALL_OW 49
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
11567: GO 11486
11569: POP
11570: POP
// for i = 1 to mortalCount do
<<<<<<< HEAD
11132: NOP4
11136: PUSH
11137: DOUBLE
11138: LD_INT 1
11140: DEC
11141: ST_TO_ADDR
11142: NOP4
11146: PUSH
11147: FOR_TO
11148: IFFALSE 11230
// begin uc_side = side ;
11150: LD_ADDR_OWVAR 20
11154: PUSH
11155: NOP4
11159: ST_TO_ADDR
// uc_nation = nation ;
11160: LD_ADDR_OWVAR 21
11164: PUSH
11165: NOP4
11169: ST_TO_ADDR
=======
11571: LD_ADDR_VAR 0 14
11575: PUSH
11576: DOUBLE
11577: LD_INT 1
11579: DEC
11580: ST_TO_ADDR
11581: LD_VAR 0 6
11585: PUSH
11586: FOR_TO
11587: IFFALSE 11669
// begin uc_side = side ;
11589: LD_ADDR_OWVAR 20
11593: PUSH
11594: LD_VAR 0 1
11598: ST_TO_ADDR
// uc_nation = nation ;
11599: LD_ADDR_OWVAR 21
11603: PUSH
11604: LD_VAR 0 2
11608: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// hc_name =  ;
11609: LD_ADDR_OWVAR 26
11613: PUSH
11614: LD_STRING 
11616: ST_TO_ADDR
// hc_gallery =  ;
11617: LD_ADDR_OWVAR 33
11621: PUSH
11622: LD_STRING 
11624: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
<<<<<<< HEAD
11186: LD_INT 0
11188: PPUSH
11189: LD_INT 8
11191: PPUSH
11192: NOP4
11196: PPUSH
11197: NOP4
// un = CreateHuman ;
11201: NOP4
11205: PUSH
11206: NOP4
11210: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11211: NOP4
11215: PPUSH
11216: NOP4
11220: PPUSH
11221: LD_INT 0
11223: PPUSH
11224: NOP4
=======
11625: LD_INT 0
11627: PPUSH
11628: LD_INT 8
11630: PPUSH
11631: LD_VAR 0 8
11635: PPUSH
11636: CALL_OW 380
// un = CreateHuman ;
11640: LD_ADDR_VAR 0 16
11644: PUSH
11645: CALL_OW 44
11649: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11650: LD_VAR 0 16
11654: PPUSH
11655: LD_VAR 0 9
11659: PPUSH
11660: LD_INT 0
11662: PPUSH
11663: CALL_OW 49
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
11667: GO 11586
11669: POP
11670: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
<<<<<<< HEAD
11232: NOP4
11236: PUSH
11237: LD_INT 22
11239: PUSH
11240: NOP4
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 2
11251: PUSH
11252: LD_INT 25
11254: PUSH
11255: LD_INT 1
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 25
11264: PUSH
11265: LD_INT 5
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: LD_INT 25
11274: PUSH
11275: LD_INT 8
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: LD_INT 25
11284: PUSH
11285: LD_INT 9
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PPUSH
11303: NOP4
11307: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11308: NOP4
11312: PUSH
11313: LD_INT 22
11315: PUSH
11316: NOP4
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 25
11327: PUSH
11328: LD_INT 4
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PPUSH
11339: NOP4
11343: ST_TO_ADDR
// for i in medic_list do
11344: NOP4
11348: PUSH
11349: NOP4
11353: PUSH
11354: FOR_IN
11355: IFFALSE 11373
// ComMoveToArea ( i , healArea ) ;
11357: NOP4
11361: PPUSH
11362: NOP4
11366: PPUSH
11367: NOP4
11371: GO 11354
11373: POP
11374: POP
// if strategy = 1 then
11375: NOP4
11379: PUSH
11380: LD_INT 1
11382: EQUAL
11383: IFFALSE 11929
// begin repeat wait ( 0 0$3 ) ;
11385: LD_INT 105
11387: PPUSH
11388: NOP4
// for i in soldiersOK_list do
11392: NOP4
11396: PUSH
11397: NOP4
11401: PUSH
11402: FOR_IN
11403: IFFALSE 11467
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11405: NOP4
11409: PPUSH
11410: LD_INT 91
11412: PPUSH
11413: LD_INT 63
11415: PPUSH
11416: NOP4
// AddComAgressiveMove ( i , 101 , 53 ) ;
11420: NOP4
11424: PPUSH
11425: LD_INT 101
11427: PPUSH
11428: LD_INT 53
11430: PPUSH
11431: NOP4
// AddComAgressiveMove ( i , 75 , 23 ) ;
11435: NOP4
11439: PPUSH
11440: LD_INT 75
11442: PPUSH
11443: LD_INT 23
11445: PPUSH
11446: NOP4
// AddComAgressiveMove ( i , 78 , 8 ) ;
11450: NOP4
11454: PPUSH
11455: LD_INT 78
11457: PPUSH
11458: LD_INT 8
11460: PPUSH
11461: NOP4
=======
11671: LD_ADDR_VAR 0 19
11675: PUSH
11676: LD_INT 22
11678: PUSH
11679: LD_VAR 0 1
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: LD_INT 2
11690: PUSH
11691: LD_INT 25
11693: PUSH
11694: LD_INT 1
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 25
11703: PUSH
11704: LD_INT 5
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 25
11713: PUSH
11714: LD_INT 8
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: LD_INT 25
11723: PUSH
11724: LD_INT 9
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PPUSH
11742: CALL_OW 69
11746: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11747: LD_ADDR_VAR 0 18
11751: PUSH
11752: LD_INT 22
11754: PUSH
11755: LD_VAR 0 1
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 4
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PPUSH
11778: CALL_OW 69
11782: ST_TO_ADDR
// for i in medic_list do
11783: LD_ADDR_VAR 0 14
11787: PUSH
11788: LD_VAR 0 18
11792: PUSH
11793: FOR_IN
11794: IFFALSE 11812
// ComMoveToArea ( i , healArea ) ;
11796: LD_VAR 0 14
11800: PPUSH
11801: LD_VAR 0 10
11805: PPUSH
11806: CALL_OW 113
11810: GO 11793
11812: POP
11813: POP
// if strategy = 1 then
11814: LD_VAR 0 12
11818: PUSH
11819: LD_INT 1
11821: EQUAL
11822: IFFALSE 12368
// begin repeat wait ( 0 0$3 ) ;
11824: LD_INT 105
11826: PPUSH
11827: CALL_OW 67
// for i in soldiersOK_list do
11831: LD_ADDR_VAR 0 14
11835: PUSH
11836: LD_VAR 0 19
11840: PUSH
11841: FOR_IN
11842: IFFALSE 11906
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11844: LD_VAR 0 14
11848: PPUSH
11849: LD_INT 91
11851: PPUSH
11852: LD_INT 63
11854: PPUSH
11855: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
11859: LD_VAR 0 14
11863: PPUSH
11864: LD_INT 101
11866: PPUSH
11867: LD_INT 53
11869: PPUSH
11870: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
11874: LD_VAR 0 14
11878: PPUSH
11879: LD_INT 75
11881: PPUSH
11882: LD_INT 23
11884: PPUSH
11885: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
11889: LD_VAR 0 14
11893: PPUSH
11894: LD_INT 78
11896: PPUSH
11897: LD_INT 8
11899: PPUSH
11900: CALL_OW 174
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
11904: GO 11841
11906: POP
11907: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
<<<<<<< HEAD
11469: LD_INT 12
11471: PPUSH
11472: LD_INT 22
11474: PUSH
11475: NOP4
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PPUSH
11484: NOP4
11488: PUSH
11489: LD_INT 2
11491: GREATER
11492: IFFALSE 11385
// repeat wait ( 0 0$1 ) ;
11494: LD_INT 35
11496: PPUSH
11497: NOP4
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11501: NOP4
11505: PUSH
11506: LD_INT 22
11508: PUSH
11509: NOP4
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 1
11520: PUSH
11521: LD_INT 3
11523: PUSH
11524: LD_INT 24
11526: PUSH
11527: LD_INT 550
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: LD_INT 24
11540: PUSH
11541: LD_INT 250
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: LIST
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PPUSH
11557: NOP4
11561: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11562: NOP4
11566: PUSH
11567: LD_INT 22
11569: PUSH
11570: NOP4
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 2
11581: PUSH
11582: LD_INT 25
11584: PUSH
11585: LD_INT 1
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: LD_INT 25
11594: PUSH
11595: LD_INT 5
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 25
11604: PUSH
11605: LD_INT 8
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 25
11614: PUSH
11615: LD_INT 9
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 24
11631: PUSH
11632: LD_INT 1000
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: PPUSH
11644: NOP4
11648: ST_TO_ADDR
// if medicCount > 0 then
11649: NOP4
11653: PUSH
11654: LD_INT 0
11656: GREATER
11657: IFFALSE 11731
// begin if damageUnit_list > 0 then
11659: NOP4
11663: PUSH
11664: LD_INT 0
11666: GREATER
11667: IFFALSE 11731
// begin for i in damageUnit_list do
11669: NOP4
11673: PUSH
11674: NOP4
11678: PUSH
11679: FOR_IN
11680: IFFALSE 11729
// begin ComMoveToArea ( i , healArea ) ;
11682: NOP4
11686: PPUSH
11687: NOP4
11691: PPUSH
11692: NOP4
// for j in medic_list do
11696: NOP4
11700: PUSH
11701: NOP4
11705: PUSH
11706: FOR_IN
11707: IFFALSE 11725
// AddComHeal ( j , i ) ;
11709: NOP4
11713: PPUSH
11714: NOP4
11718: PPUSH
11719: NOP4
11723: GO 11706
11725: POP
11726: POP
=======
11908: LD_INT 12
11910: PPUSH
11911: LD_INT 22
11913: PUSH
11914: LD_VAR 0 1
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PPUSH
11923: CALL_OW 70
11927: PUSH
11928: LD_INT 2
11930: GREATER
11931: IFFALSE 11824
// repeat wait ( 0 0$1 ) ;
11933: LD_INT 35
11935: PPUSH
11936: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11940: LD_ADDR_VAR 0 17
11944: PUSH
11945: LD_INT 22
11947: PUSH
11948: LD_VAR 0 1
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: PUSH
11957: LD_INT 1
11959: PUSH
11960: LD_INT 3
11962: PUSH
11963: LD_INT 24
11965: PUSH
11966: LD_INT 550
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 24
11979: PUSH
11980: LD_INT 250
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: LIST
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PPUSH
11996: CALL_OW 69
12000: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12001: LD_ADDR_VAR 0 19
12005: PUSH
12006: LD_INT 22
12008: PUSH
12009: LD_VAR 0 1
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 2
12020: PUSH
12021: LD_INT 25
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 25
12033: PUSH
12034: LD_INT 5
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: LD_INT 25
12043: PUSH
12044: LD_INT 8
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: LD_INT 25
12053: PUSH
12054: LD_INT 9
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: PUSH
12068: LD_INT 24
12070: PUSH
12071: LD_INT 1000
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: LIST
12082: PPUSH
12083: CALL_OW 69
12087: ST_TO_ADDR
// if medicCount > 0 then
12088: LD_VAR 0 7
12092: PUSH
12093: LD_INT 0
12095: GREATER
12096: IFFALSE 12170
// begin if damageUnit_list > 0 then
12098: LD_VAR 0 17
12102: PUSH
12103: LD_INT 0
12105: GREATER
12106: IFFALSE 12170
// begin for i in damageUnit_list do
12108: LD_ADDR_VAR 0 14
12112: PUSH
12113: LD_VAR 0 17
12117: PUSH
12118: FOR_IN
12119: IFFALSE 12168
// begin ComMoveToArea ( i , healArea ) ;
12121: LD_VAR 0 14
12125: PPUSH
12126: LD_VAR 0 10
12130: PPUSH
12131: CALL_OW 113
// for j in medic_list do
12135: LD_ADDR_VAR 0 15
12139: PUSH
12140: LD_VAR 0 18
12144: PUSH
12145: FOR_IN
12146: IFFALSE 12164
// AddComHeal ( j , i ) ;
12148: LD_VAR 0 15
12152: PPUSH
12153: LD_VAR 0 14
12157: PPUSH
12158: CALL_OW 188
12162: GO 12145
12164: POP
12165: POP
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
12166: GO 12118
12168: POP
12169: POP
// end ; end ; for i in soldiersOK_list do
<<<<<<< HEAD
11731: NOP4
11735: PUSH
11736: NOP4
11740: PUSH
11741: FOR_IN
11742: IFFALSE 11918
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11744: NOP4
11748: PUSH
11749: LD_INT 22
11751: PUSH
11752: NOP4
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PPUSH
11761: NOP4
11765: PPUSH
11766: NOP4
11770: PPUSH
11771: NOP4
11775: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11776: NOP4
11780: PUSH
11781: LD_INT 22
11783: PUSH
11784: NOP4
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: LD_INT 2
11795: PUSH
11796: LD_INT 59
11798: PUSH
11799: EMPTY
11800: LIST
11801: PUSH
11802: LD_INT 21
11804: PUSH
11805: LD_INT 1
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: LD_INT 21
11814: PUSH
11815: LD_INT 2
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: PPUSH
11835: NOP4
11839: PPUSH
11840: NOP4
11844: PPUSH
11845: NOP4
11849: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
11850: NOP4
11854: PPUSH
11855: NOP4
11859: PPUSH
11860: NOP4
11864: PUSH
11865: LD_INT 6
11867: PLUS
11868: PUSH
11869: NOP4
11873: PPUSH
11874: NOP4
11878: PPUSH
11879: NOP4
11883: LESS
11884: IFFALSE 11902
// begin ComAttackUnit ( i , target1 ) ;
11886: NOP4
11890: PPUSH
11891: NOP4
11895: PPUSH
11896: NOP4
=======
12170: LD_ADDR_VAR 0 14
12174: PUSH
12175: LD_VAR 0 19
12179: PUSH
12180: FOR_IN
12181: IFFALSE 12357
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12183: LD_ADDR_VAR 0 22
12187: PUSH
12188: LD_INT 22
12190: PUSH
12191: LD_VAR 0 11
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PPUSH
12200: CALL_OW 69
12204: PPUSH
12205: LD_VAR 0 14
12209: PPUSH
12210: CALL_OW 74
12214: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12215: LD_ADDR_VAR 0 23
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_VAR 0 11
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 2
12234: PUSH
12235: LD_INT 59
12237: PUSH
12238: EMPTY
12239: LIST
12240: PUSH
12241: LD_INT 21
12243: PUSH
12244: LD_INT 1
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 21
12253: PUSH
12254: LD_INT 2
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: EMPTY
12272: LIST
12273: PPUSH
12274: CALL_OW 69
12278: PPUSH
12279: LD_VAR 0 14
12283: PPUSH
12284: CALL_OW 74
12288: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12289: LD_VAR 0 14
12293: PPUSH
12294: LD_VAR 0 22
12298: PPUSH
12299: CALL_OW 296
12303: PUSH
12304: LD_INT 6
12306: PLUS
12307: PUSH
12308: LD_VAR 0 14
12312: PPUSH
12313: LD_VAR 0 23
12317: PPUSH
12318: CALL_OW 296
12322: LESS
12323: IFFALSE 12341
// begin ComAttackUnit ( i , target1 ) ;
12325: LD_VAR 0 14
12329: PPUSH
12330: LD_VAR 0 22
12334: PPUSH
12335: CALL_OW 115
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
12339: GO 12355
// begin ComAttackUnit ( i , target2 ) ;
<<<<<<< HEAD
11902: NOP4
11906: PPUSH
11907: NOP4
11911: PPUSH
11912: NOP4
=======
12341: LD_VAR 0 14
12345: PPUSH
12346: LD_VAR 0 23
12350: PPUSH
12351: CALL_OW 115
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ;
12355: GO 12180
12357: POP
12358: POP
// until soldiersOK_list = [ ] ;
<<<<<<< HEAD
11920: NOP4
11924: PUSH
11925: EMPTY
11926: EQUAL
11927: IFFALSE 11494
// end ; if strategy = 2 then
11929: NOP4
11933: PUSH
11934: LD_INT 2
11936: EQUAL
11937: IFFALSE 12453
// begin repeat wait ( 0 0$1 ) ;
11939: LD_INT 35
11941: PPUSH
11942: NOP4
// for i in soldiersOK_list do
11946: NOP4
11950: PUSH
11951: NOP4
11955: PUSH
11956: FOR_IN
11957: IFFALSE 11991
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11959: NOP4
11963: PPUSH
11964: LD_INT 91
11966: PPUSH
11967: LD_INT 63
11969: PPUSH
11970: NOP4
// AddComAgressiveMove ( i , 75 , 33 ) ;
11974: NOP4
11978: PPUSH
11979: LD_INT 75
11981: PPUSH
11982: LD_INT 33
11984: PPUSH
11985: NOP4
=======
12359: LD_VAR 0 19
12363: PUSH
12364: EMPTY
12365: EQUAL
12366: IFFALSE 11933
// end ; if strategy = 2 then
12368: LD_VAR 0 12
12372: PUSH
12373: LD_INT 2
12375: EQUAL
12376: IFFALSE 12892
// begin repeat wait ( 0 0$1 ) ;
12378: LD_INT 35
12380: PPUSH
12381: CALL_OW 67
// for i in soldiersOK_list do
12385: LD_ADDR_VAR 0 14
12389: PUSH
12390: LD_VAR 0 19
12394: PUSH
12395: FOR_IN
12396: IFFALSE 12430
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12398: LD_VAR 0 14
12402: PPUSH
12403: LD_INT 91
12405: PPUSH
12406: LD_INT 63
12408: PPUSH
12409: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
12413: LD_VAR 0 14
12417: PPUSH
12418: LD_INT 75
12420: PPUSH
12421: LD_INT 33
12423: PPUSH
12424: CALL_OW 174
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
12428: GO 12395
12430: POP
12431: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
<<<<<<< HEAD
11993: LD_INT 13
11995: PPUSH
11996: LD_INT 22
11998: PUSH
11999: NOP4
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PPUSH
12008: NOP4
12012: PUSH
12013: LD_INT 2
12015: GREATER
12016: IFFALSE 11939
// repeat wait ( 0 0$3 ) ;
12018: LD_INT 105
12020: PPUSH
12021: NOP4
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12025: NOP4
12029: PUSH
12030: LD_INT 22
12032: PUSH
12033: NOP4
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 1
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: LD_INT 24
12050: PUSH
12051: LD_INT 550
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: LD_INT 24
12064: PUSH
12065: LD_INT 250
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: LIST
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PPUSH
12081: NOP4
12085: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12086: NOP4
12090: PUSH
12091: LD_INT 22
12093: PUSH
12094: NOP4
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 2
12105: PUSH
12106: LD_INT 25
12108: PUSH
12109: LD_INT 1
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 25
12118: PUSH
12119: LD_INT 5
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 25
12128: PUSH
12129: LD_INT 8
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 25
12138: PUSH
12139: LD_INT 9
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 24
12155: PUSH
12156: LD_INT 1000
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: PPUSH
12168: NOP4
12172: ST_TO_ADDR
// if medicCount > 0 then
12173: NOP4
12177: PUSH
12178: LD_INT 0
12180: GREATER
12181: IFFALSE 12255
// begin if damageUnit_list > 0 then
12183: NOP4
12187: PUSH
12188: LD_INT 0
12190: GREATER
12191: IFFALSE 12255
// begin for i in damageUnit_list do
12193: NOP4
12197: PUSH
12198: NOP4
12202: PUSH
12203: FOR_IN
12204: IFFALSE 12253
// begin ComMoveToArea ( i , healArea ) ;
12206: NOP4
12210: PPUSH
12211: NOP4
12215: PPUSH
12216: NOP4
// for j in medic_list do
12220: NOP4
12224: PUSH
12225: NOP4
12229: PUSH
12230: FOR_IN
12231: IFFALSE 12249
// AddComHeal ( j , i ) ;
12233: NOP4
12237: PPUSH
12238: NOP4
12242: PPUSH
12243: NOP4
12247: GO 12230
12249: POP
12250: POP
=======
12432: LD_INT 13
12434: PPUSH
12435: LD_INT 22
12437: PUSH
12438: LD_VAR 0 1
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PPUSH
12447: CALL_OW 70
12451: PUSH
12452: LD_INT 2
12454: GREATER
12455: IFFALSE 12378
// repeat wait ( 0 0$3 ) ;
12457: LD_INT 105
12459: PPUSH
12460: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12464: LD_ADDR_VAR 0 17
12468: PUSH
12469: LD_INT 22
12471: PUSH
12472: LD_VAR 0 1
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 1
12483: PUSH
12484: LD_INT 3
12486: PUSH
12487: LD_INT 24
12489: PUSH
12490: LD_INT 550
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 24
12503: PUSH
12504: LD_INT 250
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PPUSH
12520: CALL_OW 69
12524: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12525: LD_ADDR_VAR 0 19
12529: PUSH
12530: LD_INT 22
12532: PUSH
12533: LD_VAR 0 1
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PUSH
12542: LD_INT 2
12544: PUSH
12545: LD_INT 25
12547: PUSH
12548: LD_INT 1
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: LD_INT 25
12557: PUSH
12558: LD_INT 5
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: LD_INT 25
12567: PUSH
12568: LD_INT 8
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 25
12577: PUSH
12578: LD_INT 9
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 24
12594: PUSH
12595: LD_INT 1000
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: LIST
12606: PPUSH
12607: CALL_OW 69
12611: ST_TO_ADDR
// if medicCount > 0 then
12612: LD_VAR 0 7
12616: PUSH
12617: LD_INT 0
12619: GREATER
12620: IFFALSE 12694
// begin if damageUnit_list > 0 then
12622: LD_VAR 0 17
12626: PUSH
12627: LD_INT 0
12629: GREATER
12630: IFFALSE 12694
// begin for i in damageUnit_list do
12632: LD_ADDR_VAR 0 14
12636: PUSH
12637: LD_VAR 0 17
12641: PUSH
12642: FOR_IN
12643: IFFALSE 12692
// begin ComMoveToArea ( i , healArea ) ;
12645: LD_VAR 0 14
12649: PPUSH
12650: LD_VAR 0 10
12654: PPUSH
12655: CALL_OW 113
// for j in medic_list do
12659: LD_ADDR_VAR 0 15
12663: PUSH
12664: LD_VAR 0 18
12668: PUSH
12669: FOR_IN
12670: IFFALSE 12688
// AddComHeal ( j , i ) ;
12672: LD_VAR 0 15
12676: PPUSH
12677: LD_VAR 0 14
12681: PPUSH
12682: CALL_OW 188
12686: GO 12669
12688: POP
12689: POP
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
12690: GO 12642
12692: POP
12693: POP
// end ; end ; for i in soldiersOK_list do
<<<<<<< HEAD
12255: NOP4
12259: PUSH
12260: NOP4
12264: PUSH
12265: FOR_IN
12266: IFFALSE 12442
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12268: NOP4
12272: PUSH
12273: LD_INT 22
12275: PUSH
12276: NOP4
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PPUSH
12285: NOP4
12289: PPUSH
12290: NOP4
12294: PPUSH
12295: NOP4
12299: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12300: NOP4
12304: PUSH
12305: LD_INT 22
12307: PUSH
12308: NOP4
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 2
12319: PUSH
12320: LD_INT 59
12322: PUSH
12323: EMPTY
12324: LIST
12325: PUSH
12326: LD_INT 21
12328: PUSH
12329: LD_INT 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 21
12338: PUSH
12339: LD_INT 2
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: EMPTY
12357: LIST
12358: PPUSH
12359: NOP4
12363: PPUSH
12364: NOP4
12368: PPUSH
12369: NOP4
12373: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12374: NOP4
12378: PPUSH
12379: NOP4
12383: PPUSH
12384: NOP4
12388: PUSH
12389: LD_INT 6
12391: PLUS
12392: PUSH
12393: NOP4
12397: PPUSH
12398: NOP4
12402: PPUSH
12403: NOP4
12407: LESS
12408: IFFALSE 12426
// begin ComAttackUnit ( i , target1 ) ;
12410: NOP4
12414: PPUSH
12415: NOP4
12419: PPUSH
12420: NOP4
=======
12694: LD_ADDR_VAR 0 14
12698: PUSH
12699: LD_VAR 0 19
12703: PUSH
12704: FOR_IN
12705: IFFALSE 12881
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12707: LD_ADDR_VAR 0 22
12711: PUSH
12712: LD_INT 22
12714: PUSH
12715: LD_VAR 0 11
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PPUSH
12724: CALL_OW 69
12728: PPUSH
12729: LD_VAR 0 14
12733: PPUSH
12734: CALL_OW 74
12738: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12739: LD_ADDR_VAR 0 23
12743: PUSH
12744: LD_INT 22
12746: PUSH
12747: LD_VAR 0 11
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 2
12758: PUSH
12759: LD_INT 59
12761: PUSH
12762: EMPTY
12763: LIST
12764: PUSH
12765: LD_INT 21
12767: PUSH
12768: LD_INT 1
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 21
12777: PUSH
12778: LD_INT 2
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: EMPTY
12796: LIST
12797: PPUSH
12798: CALL_OW 69
12802: PPUSH
12803: LD_VAR 0 14
12807: PPUSH
12808: CALL_OW 74
12812: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12813: LD_VAR 0 14
12817: PPUSH
12818: LD_VAR 0 22
12822: PPUSH
12823: CALL_OW 296
12827: PUSH
12828: LD_INT 6
12830: PLUS
12831: PUSH
12832: LD_VAR 0 14
12836: PPUSH
12837: LD_VAR 0 23
12841: PPUSH
12842: CALL_OW 296
12846: LESS
12847: IFFALSE 12865
// begin ComAttackUnit ( i , target1 ) ;
12849: LD_VAR 0 14
12853: PPUSH
12854: LD_VAR 0 22
12858: PPUSH
12859: CALL_OW 115
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
12863: GO 12879
// begin ComAttackUnit ( i , target2 ) ;
<<<<<<< HEAD
12426: NOP4
12430: PPUSH
12431: NOP4
12435: PPUSH
12436: NOP4
=======
12865: LD_VAR 0 14
12869: PPUSH
12870: LD_VAR 0 23
12874: PPUSH
12875: CALL_OW 115
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ;
12879: GO 12704
12881: POP
12882: POP
// until soldiersOK_list = [ ] ;
<<<<<<< HEAD
12444: NOP4
12448: PUSH
12449: EMPTY
12450: EQUAL
12451: IFFALSE 12018
// end ; if strategy = 3 then
12453: NOP4
12457: PUSH
12458: LD_INT 3
12460: EQUAL
12461: IFFALSE 13007
// begin repeat wait ( 0 0$3 ) ;
12463: LD_INT 105
12465: PPUSH
12466: NOP4
// for i in soldiersOK_list do
12470: NOP4
12474: PUSH
12475: NOP4
12479: PUSH
12480: FOR_IN
12481: IFFALSE 12545
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
12483: NOP4
12487: PPUSH
12488: LD_INT 63
12490: PPUSH
12491: LD_INT 71
12493: PPUSH
12494: NOP4
// AddComAgressiveMove ( i , 35 , 44 ) ;
12498: NOP4
12502: PPUSH
12503: LD_INT 35
12505: PPUSH
12506: LD_INT 44
12508: PPUSH
12509: NOP4
// AddComAgressiveMove ( i , 23 , 18 ) ;
12513: NOP4
12517: PPUSH
12518: LD_INT 23
12520: PPUSH
12521: LD_INT 18
12523: PPUSH
12524: NOP4
// AddComAgressiveMove ( i , 26 , 12 ) ;
12528: NOP4
12532: PPUSH
12533: LD_INT 26
12535: PPUSH
12536: LD_INT 12
12538: PPUSH
12539: NOP4
=======
12883: LD_VAR 0 19
12887: PUSH
12888: EMPTY
12889: EQUAL
12890: IFFALSE 12457
// end ; if strategy = 3 then
12892: LD_VAR 0 12
12896: PUSH
12897: LD_INT 3
12899: EQUAL
12900: IFFALSE 13446
// begin repeat wait ( 0 0$3 ) ;
12902: LD_INT 105
12904: PPUSH
12905: CALL_OW 67
// for i in soldiersOK_list do
12909: LD_ADDR_VAR 0 14
12913: PUSH
12914: LD_VAR 0 19
12918: PUSH
12919: FOR_IN
12920: IFFALSE 12984
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
12922: LD_VAR 0 14
12926: PPUSH
12927: LD_INT 63
12929: PPUSH
12930: LD_INT 71
12932: PPUSH
12933: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
12937: LD_VAR 0 14
12941: PPUSH
12942: LD_INT 35
12944: PPUSH
12945: LD_INT 44
12947: PPUSH
12948: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
12952: LD_VAR 0 14
12956: PPUSH
12957: LD_INT 23
12959: PPUSH
12960: LD_INT 18
12962: PPUSH
12963: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
12967: LD_VAR 0 14
12971: PPUSH
12972: LD_INT 26
12974: PPUSH
12975: LD_INT 12
12977: PPUSH
12978: CALL_OW 174
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
12982: GO 12919
12984: POP
12985: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
<<<<<<< HEAD
12547: LD_INT 14
12549: PPUSH
12550: LD_INT 22
12552: PUSH
12553: NOP4
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PPUSH
12562: NOP4
12566: PUSH
12567: LD_INT 2
12569: GREATER
12570: IFFALSE 12463
// repeat wait ( 0 0$1 ) ;
12572: LD_INT 35
12574: PPUSH
12575: NOP4
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12579: NOP4
12583: PUSH
12584: LD_INT 22
12586: PUSH
12587: NOP4
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 1
12598: PUSH
12599: LD_INT 3
12601: PUSH
12602: LD_INT 24
12604: PUSH
12605: LD_INT 550
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 24
12618: PUSH
12619: LD_INT 250
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PPUSH
12635: NOP4
12639: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12640: NOP4
12644: PUSH
12645: LD_INT 22
12647: PUSH
12648: NOP4
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 2
12659: PUSH
12660: LD_INT 25
12662: PUSH
12663: LD_INT 1
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: LD_INT 25
12672: PUSH
12673: LD_INT 5
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: LD_INT 25
12682: PUSH
12683: LD_INT 8
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 25
12692: PUSH
12693: LD_INT 9
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 24
12709: PUSH
12710: LD_INT 1000
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: PPUSH
12722: NOP4
12726: ST_TO_ADDR
// if medicCount > 0 then
12727: NOP4
12731: PUSH
12732: LD_INT 0
12734: GREATER
12735: IFFALSE 12809
// begin if damageUnit_list > 0 then
12737: NOP4
12741: PUSH
12742: LD_INT 0
12744: GREATER
12745: IFFALSE 12809
// begin for i in damageUnit_list do
12747: NOP4
12751: PUSH
12752: NOP4
12756: PUSH
12757: FOR_IN
12758: IFFALSE 12807
// begin ComMoveToArea ( i , healArea ) ;
12760: NOP4
12764: PPUSH
12765: NOP4
12769: PPUSH
12770: NOP4
// for j in medic_list do
12774: NOP4
12778: PUSH
12779: NOP4
12783: PUSH
12784: FOR_IN
12785: IFFALSE 12803
// AddComHeal ( j , i ) ;
12787: NOP4
12791: PPUSH
12792: NOP4
12796: PPUSH
12797: NOP4
12801: GO 12784
12803: POP
12804: POP
=======
12986: LD_INT 14
12988: PPUSH
12989: LD_INT 22
12991: PUSH
12992: LD_VAR 0 1
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PPUSH
13001: CALL_OW 70
13005: PUSH
13006: LD_INT 2
13008: GREATER
13009: IFFALSE 12902
// repeat wait ( 0 0$1 ) ;
13011: LD_INT 35
13013: PPUSH
13014: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13018: LD_ADDR_VAR 0 17
13022: PUSH
13023: LD_INT 22
13025: PUSH
13026: LD_VAR 0 1
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: LD_INT 1
13037: PUSH
13038: LD_INT 3
13040: PUSH
13041: LD_INT 24
13043: PUSH
13044: LD_INT 550
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PUSH
13055: LD_INT 24
13057: PUSH
13058: LD_INT 250
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PPUSH
13074: CALL_OW 69
13078: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13079: LD_ADDR_VAR 0 19
13083: PUSH
13084: LD_INT 22
13086: PUSH
13087: LD_VAR 0 1
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PUSH
13096: LD_INT 2
13098: PUSH
13099: LD_INT 25
13101: PUSH
13102: LD_INT 1
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 25
13111: PUSH
13112: LD_INT 5
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: LD_INT 25
13121: PUSH
13122: LD_INT 8
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 25
13131: PUSH
13132: LD_INT 9
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: PUSH
13146: LD_INT 24
13148: PUSH
13149: LD_INT 1000
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: LIST
13160: PPUSH
13161: CALL_OW 69
13165: ST_TO_ADDR
// if medicCount > 0 then
13166: LD_VAR 0 7
13170: PUSH
13171: LD_INT 0
13173: GREATER
13174: IFFALSE 13248
// begin if damageUnit_list > 0 then
13176: LD_VAR 0 17
13180: PUSH
13181: LD_INT 0
13183: GREATER
13184: IFFALSE 13248
// begin for i in damageUnit_list do
13186: LD_ADDR_VAR 0 14
13190: PUSH
13191: LD_VAR 0 17
13195: PUSH
13196: FOR_IN
13197: IFFALSE 13246
// begin ComMoveToArea ( i , healArea ) ;
13199: LD_VAR 0 14
13203: PPUSH
13204: LD_VAR 0 10
13208: PPUSH
13209: CALL_OW 113
// for j in medic_list do
13213: LD_ADDR_VAR 0 15
13217: PUSH
13218: LD_VAR 0 18
13222: PUSH
13223: FOR_IN
13224: IFFALSE 13242
// AddComHeal ( j , i ) ;
13226: LD_VAR 0 15
13230: PPUSH
13231: LD_VAR 0 14
13235: PPUSH
13236: CALL_OW 188
13240: GO 13223
13242: POP
13243: POP
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
13244: GO 13196
13246: POP
13247: POP
// end ; end ; for i in soldiersOK_list do
<<<<<<< HEAD
12809: NOP4
12813: PUSH
12814: NOP4
12818: PUSH
12819: FOR_IN
12820: IFFALSE 12996
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12822: NOP4
12826: PUSH
12827: LD_INT 22
12829: PUSH
12830: NOP4
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PPUSH
12839: NOP4
12843: PPUSH
12844: NOP4
12848: PPUSH
12849: NOP4
12853: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12854: NOP4
12858: PUSH
12859: LD_INT 22
12861: PUSH
12862: NOP4
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PUSH
12871: LD_INT 2
12873: PUSH
12874: LD_INT 59
12876: PUSH
12877: EMPTY
12878: LIST
12879: PUSH
12880: LD_INT 21
12882: PUSH
12883: LD_INT 1
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 21
12892: PUSH
12893: LD_INT 2
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: EMPTY
12911: LIST
12912: PPUSH
12913: NOP4
12917: PPUSH
12918: NOP4
12922: PPUSH
12923: NOP4
12927: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12928: NOP4
12932: PPUSH
12933: NOP4
12937: PPUSH
12938: NOP4
12942: PUSH
12943: LD_INT 6
12945: PLUS
12946: PUSH
12947: NOP4
12951: PPUSH
12952: NOP4
12956: PPUSH
12957: NOP4
12961: LESS
12962: IFFALSE 12980
// begin ComAttackUnit ( i , target1 ) ;
12964: NOP4
12968: PPUSH
12969: NOP4
12973: PPUSH
12974: NOP4
=======
13248: LD_ADDR_VAR 0 14
13252: PUSH
13253: LD_VAR 0 19
13257: PUSH
13258: FOR_IN
13259: IFFALSE 13435
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13261: LD_ADDR_VAR 0 22
13265: PUSH
13266: LD_INT 22
13268: PUSH
13269: LD_VAR 0 11
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PPUSH
13278: CALL_OW 69
13282: PPUSH
13283: LD_VAR 0 14
13287: PPUSH
13288: CALL_OW 74
13292: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13293: LD_ADDR_VAR 0 23
13297: PUSH
13298: LD_INT 22
13300: PUSH
13301: LD_VAR 0 11
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 2
13312: PUSH
13313: LD_INT 59
13315: PUSH
13316: EMPTY
13317: LIST
13318: PUSH
13319: LD_INT 21
13321: PUSH
13322: LD_INT 1
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PUSH
13329: LD_INT 21
13331: PUSH
13332: LD_INT 2
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: PUSH
13349: EMPTY
13350: LIST
13351: PPUSH
13352: CALL_OW 69
13356: PPUSH
13357: LD_VAR 0 14
13361: PPUSH
13362: CALL_OW 74
13366: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13367: LD_VAR 0 14
13371: PPUSH
13372: LD_VAR 0 22
13376: PPUSH
13377: CALL_OW 296
13381: PUSH
13382: LD_INT 6
13384: PLUS
13385: PUSH
13386: LD_VAR 0 14
13390: PPUSH
13391: LD_VAR 0 23
13395: PPUSH
13396: CALL_OW 296
13400: LESS
13401: IFFALSE 13419
// begin ComAttackUnit ( i , target1 ) ;
13403: LD_VAR 0 14
13407: PPUSH
13408: LD_VAR 0 22
13412: PPUSH
13413: CALL_OW 115
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
13417: GO 13433
// begin ComAttackUnit ( i , target2 ) ;
<<<<<<< HEAD
12980: NOP4
12984: PPUSH
12985: NOP4
12989: PPUSH
12990: NOP4
=======
13419: LD_VAR 0 14
13423: PPUSH
13424: LD_VAR 0 23
13428: PPUSH
13429: CALL_OW 115
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ;
13433: GO 13258
13435: POP
13436: POP
// until soldiersOK_list = [ ] ;
<<<<<<< HEAD
12998: NOP4
13002: PUSH
13003: EMPTY
13004: EQUAL
13005: IFFALSE 12572
=======
13437: LD_VAR 0 19
13441: PUSH
13442: EMPTY
13443: EQUAL
13444: IFFALSE 13011
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ;
13446: LD_VAR 0 13
13450: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13451: LD_INT 0
13453: PPUSH
13454: PPUSH
13455: PPUSH
13456: PPUSH
13457: PPUSH
13458: PPUSH
13459: PPUSH
13460: PPUSH
13461: PPUSH
13462: PPUSH
13463: PPUSH
// amChassisTab = [ ] ;
<<<<<<< HEAD
13025: NOP4
13029: PUSH
13030: EMPTY
13031: ST_TO_ADDR
// arChassisTab = [ ] ;
13032: NOP4
13036: PUSH
13037: EMPTY
13038: ST_TO_ADDR
// ruChassisTab = [ ] ;
13039: NOP4
13043: PUSH
13044: EMPTY
13045: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13046: LD_INT 35
13048: PPUSH
13049: NOP4
// if nation = 1 then
13053: NOP4
13057: PUSH
13058: LD_INT 1
13060: EQUAL
13061: IFFALSE 13552
// begin uc_side = side ;
13063: LD_ADDR_OWVAR 20
13067: PUSH
13068: NOP4
13072: ST_TO_ADDR
// uc_nation = nation ;
13073: LD_ADDR_OWVAR 21
13077: PUSH
13078: NOP4
13082: ST_TO_ADDR
// vc_engine = vehengine ;
13083: LD_ADDR_OWVAR 39
13087: PUSH
13088: NOP4
13092: ST_TO_ADDR
// vc_control = vehcontrol ;
13093: LD_ADDR_OWVAR 38
13097: PUSH
13098: NOP4
13102: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13103: LD_ADDR_OWVAR 40
13107: PUSH
13108: NOP4
13112: PUSH
13113: LD_INT 1
13115: PPUSH
13116: NOP4
13120: PPUSH
13121: NOP4
13125: ARRAY
13126: ST_TO_ADDR
// for j = 1 to AMWeapon do
13127: NOP4
13131: PUSH
13132: DOUBLE
13133: LD_INT 1
13135: DEC
13136: ST_TO_ADDR
13137: NOP4
13141: PUSH
13142: FOR_TO
13143: IFFALSE 13444
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13145: NOP4
13149: PUSH
13150: NOP4
13154: ARRAY
13155: PUSH
13156: LD_INT 2
13158: EQUAL
13159: PUSH
13160: NOP4
13164: PUSH
13165: NOP4
13169: ARRAY
13170: PUSH
13171: LD_INT 3
13173: EQUAL
13174: OR
13175: IFFALSE 13228
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13177: NOP4
13181: PUSH
13182: LD_INT 1
13184: PUSH
13185: LD_INT 2
13187: PUSH
13188: LD_INT 3
13190: PUSH
13191: LD_INT 4
13193: PUSH
13194: LD_INT 5
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13204: LD_ADDR_OWVAR 37
13208: PUSH
13209: NOP4
13213: PUSH
13214: LD_INT 1
13216: PPUSH
13217: NOP4
13221: PPUSH
13222: NOP4
13226: ARRAY
13227: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13228: NOP4
13232: PUSH
13233: NOP4
13237: ARRAY
13238: PUSH
13239: LD_INT 4
13241: EQUAL
13242: PUSH
13243: NOP4
13247: PUSH
13248: NOP4
13252: ARRAY
13253: PUSH
13254: LD_INT 5
13256: EQUAL
13257: OR
13258: PUSH
13259: NOP4
13263: PUSH
13264: NOP4
13268: ARRAY
13269: PUSH
13270: LD_INT 9
13272: EQUAL
13273: OR
13274: PUSH
13275: NOP4
13279: PUSH
13280: NOP4
13284: ARRAY
13285: PUSH
13286: LD_INT 11
13288: EQUAL
13289: OR
13290: PUSH
13291: NOP4
13295: PUSH
13296: NOP4
13300: ARRAY
13301: PUSH
13302: LD_INT 7
13304: EQUAL
13305: OR
13306: IFFALSE 13355
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
13308: NOP4
13312: PUSH
13313: LD_INT 2
13315: PUSH
13316: LD_INT 3
13318: PUSH
13319: LD_INT 4
13321: PUSH
13322: LD_INT 5
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13331: LD_ADDR_OWVAR 37
13335: PUSH
13336: NOP4
13340: PUSH
13341: LD_INT 1
13343: PPUSH
13344: NOP4
13348: PPUSH
13349: NOP4
13353: ARRAY
13354: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
13355: NOP4
13359: PUSH
13360: NOP4
13364: ARRAY
13365: PUSH
13366: LD_INT 8
13368: EQUAL
13369: PUSH
13370: NOP4
13374: PUSH
13375: NOP4
13379: ARRAY
13380: PUSH
13381: LD_INT 6
13383: EQUAL
13384: OR
13385: PUSH
13386: NOP4
13390: PUSH
13391: NOP4
13395: ARRAY
13396: PUSH
13397: LD_INT 10
13399: EQUAL
13400: OR
13401: IFFALSE 13442
// begin amChassisTab = [ 4 , 5 ] ;
13403: NOP4
13407: PUSH
13408: LD_INT 4
13410: PUSH
13411: LD_INT 5
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13418: LD_ADDR_OWVAR 37
13422: PUSH
13423: NOP4
13427: PUSH
13428: LD_INT 1
13430: PPUSH
13431: NOP4
13435: PPUSH
13436: NOP4
13440: ARRAY
13441: ST_TO_ADDR
=======
13464: LD_ADDR_VAR 0 19
13468: PUSH
13469: EMPTY
13470: ST_TO_ADDR
// arChassisTab = [ ] ;
13471: LD_ADDR_VAR 0 18
13475: PUSH
13476: EMPTY
13477: ST_TO_ADDR
// ruChassisTab = [ ] ;
13478: LD_ADDR_VAR 0 17
13482: PUSH
13483: EMPTY
13484: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13485: LD_INT 35
13487: PPUSH
13488: CALL_OW 67
// if nation = 1 then
13492: LD_VAR 0 5
13496: PUSH
13497: LD_INT 1
13499: EQUAL
13500: IFFALSE 13991
// begin uc_side = side ;
13502: LD_ADDR_OWVAR 20
13506: PUSH
13507: LD_VAR 0 2
13511: ST_TO_ADDR
// uc_nation = nation ;
13512: LD_ADDR_OWVAR 21
13516: PUSH
13517: LD_VAR 0 5
13521: ST_TO_ADDR
// vc_engine = vehengine ;
13522: LD_ADDR_OWVAR 39
13526: PUSH
13527: LD_VAR 0 6
13531: ST_TO_ADDR
// vc_control = vehcontrol ;
13532: LD_ADDR_OWVAR 38
13536: PUSH
13537: LD_VAR 0 7
13541: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13542: LD_ADDR_OWVAR 40
13546: PUSH
13547: LD_VAR 0 10
13551: PUSH
13552: LD_INT 1
13554: PPUSH
13555: LD_VAR 0 10
13559: PPUSH
13560: CALL_OW 12
13564: ARRAY
13565: ST_TO_ADDR
// for j = 1 to AMWeapon do
13566: LD_ADDR_VAR 0 14
13570: PUSH
13571: DOUBLE
13572: LD_INT 1
13574: DEC
13575: ST_TO_ADDR
13576: LD_VAR 0 10
13580: PUSH
13581: FOR_TO
13582: IFFALSE 13883
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13584: LD_VAR 0 10
13588: PUSH
13589: LD_VAR 0 14
13593: ARRAY
13594: PUSH
13595: LD_INT 2
13597: EQUAL
13598: PUSH
13599: LD_VAR 0 10
13603: PUSH
13604: LD_VAR 0 14
13608: ARRAY
13609: PUSH
13610: LD_INT 3
13612: EQUAL
13613: OR
13614: IFFALSE 13667
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13616: LD_ADDR_VAR 0 19
13620: PUSH
13621: LD_INT 1
13623: PUSH
13624: LD_INT 2
13626: PUSH
13627: LD_INT 3
13629: PUSH
13630: LD_INT 4
13632: PUSH
13633: LD_INT 5
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13643: LD_ADDR_OWVAR 37
13647: PUSH
13648: LD_VAR 0 19
13652: PUSH
13653: LD_INT 1
13655: PPUSH
13656: LD_VAR 0 19
13660: PPUSH
13661: CALL_OW 12
13665: ARRAY
13666: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13667: LD_VAR 0 10
13671: PUSH
13672: LD_VAR 0 14
13676: ARRAY
13677: PUSH
13678: LD_INT 4
13680: EQUAL
13681: PUSH
13682: LD_VAR 0 10
13686: PUSH
13687: LD_VAR 0 14
13691: ARRAY
13692: PUSH
13693: LD_INT 5
13695: EQUAL
13696: OR
13697: PUSH
13698: LD_VAR 0 10
13702: PUSH
13703: LD_VAR 0 14
13707: ARRAY
13708: PUSH
13709: LD_INT 9
13711: EQUAL
13712: OR
13713: PUSH
13714: LD_VAR 0 10
13718: PUSH
13719: LD_VAR 0 14
13723: ARRAY
13724: PUSH
13725: LD_INT 11
13727: EQUAL
13728: OR
13729: PUSH
13730: LD_VAR 0 10
13734: PUSH
13735: LD_VAR 0 14
13739: ARRAY
13740: PUSH
13741: LD_INT 7
13743: EQUAL
13744: OR
13745: IFFALSE 13794
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
13747: LD_ADDR_VAR 0 19
13751: PUSH
13752: LD_INT 2
13754: PUSH
13755: LD_INT 3
13757: PUSH
13758: LD_INT 4
13760: PUSH
13761: LD_INT 5
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13770: LD_ADDR_OWVAR 37
13774: PUSH
13775: LD_VAR 0 19
13779: PUSH
13780: LD_INT 1
13782: PPUSH
13783: LD_VAR 0 19
13787: PPUSH
13788: CALL_OW 12
13792: ARRAY
13793: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
13794: LD_VAR 0 10
13798: PUSH
13799: LD_VAR 0 14
13803: ARRAY
13804: PUSH
13805: LD_INT 8
13807: EQUAL
13808: PUSH
13809: LD_VAR 0 10
13813: PUSH
13814: LD_VAR 0 14
13818: ARRAY
13819: PUSH
13820: LD_INT 6
13822: EQUAL
13823: OR
13824: PUSH
13825: LD_VAR 0 10
13829: PUSH
13830: LD_VAR 0 14
13834: ARRAY
13835: PUSH
13836: LD_INT 10
13838: EQUAL
13839: OR
13840: IFFALSE 13881
// begin amChassisTab = [ 4 , 5 ] ;
13842: LD_ADDR_VAR 0 19
13846: PUSH
13847: LD_INT 4
13849: PUSH
13850: LD_INT 5
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13857: LD_ADDR_OWVAR 37
13861: PUSH
13862: LD_VAR 0 19
13866: PUSH
13867: LD_INT 1
13869: PPUSH
13870: LD_VAR 0 19
13874: PPUSH
13875: CALL_OW 12
13879: ARRAY
13880: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ;
13881: GO 13581
13883: POP
13884: POP
// veh = CreateVehicle ;
<<<<<<< HEAD
13446: NOP4
13450: PUSH
13451: NOP4
13455: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13456: NOP4
13460: PPUSH
13461: NOP4
13465: PPUSH
13466: LD_INT 0
13468: PPUSH
13469: NOP4
// if vehControl = 1 then
13473: NOP4
13477: PUSH
13478: LD_INT 1
13480: EQUAL
13481: IFFALSE 13538
=======
13885: LD_ADDR_VAR 0 16
13889: PUSH
13890: CALL_OW 45
13894: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13895: LD_VAR 0 16
13899: PPUSH
13900: LD_VAR 0 1
13904: PPUSH
13905: LD_INT 0
13907: PPUSH
13908: CALL_OW 49
// if vehControl = 1 then
13912: LD_VAR 0 7
13916: PUSH
13917: LD_INT 1
13919: EQUAL
13920: IFFALSE 13977
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// begin hc_gallery =  ;
13922: LD_ADDR_OWVAR 33
13926: PUSH
13927: LD_STRING 
13929: ST_TO_ADDR
// hc_name =  ;
13930: LD_ADDR_OWVAR 26
13934: PUSH
13935: LD_STRING 
13937: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
<<<<<<< HEAD
13499: LD_INT 0
13501: PPUSH
13502: LD_INT 3
13504: PPUSH
13505: NOP4
13509: PPUSH
13510: NOP4
// un = CreateHuman ;
13514: NOP4
13518: PUSH
13519: NOP4
13523: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13524: NOP4
13528: PPUSH
13529: NOP4
13533: PPUSH
13534: NOP4
// end ; i = i + 1 ;
13538: NOP4
13542: PUSH
13543: NOP4
13547: PUSH
13548: LD_INT 1
13550: PLUS
13551: ST_TO_ADDR
// end ; if nation = 2 then
13552: NOP4
13556: PUSH
13557: LD_INT 2
13559: EQUAL
13560: IFFALSE 13984
// begin uc_side = side ;
13562: LD_ADDR_OWVAR 20
13566: PUSH
13567: NOP4
13571: ST_TO_ADDR
// uc_nation = nation ;
13572: LD_ADDR_OWVAR 21
13576: PUSH
13577: NOP4
13581: ST_TO_ADDR
// vc_engine = vehengine ;
13582: LD_ADDR_OWVAR 39
13586: PUSH
13587: NOP4
13591: ST_TO_ADDR
// vc_control = vehcontrol ;
13592: LD_ADDR_OWVAR 38
13596: PUSH
13597: NOP4
13601: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
13602: LD_ADDR_OWVAR 40
13606: PUSH
13607: NOP4
13611: PUSH
13612: LD_INT 1
13614: PPUSH
13615: NOP4
13619: PPUSH
13620: NOP4
13624: ARRAY
13625: ST_TO_ADDR
// for j = 1 to ARWeapons do
13626: NOP4
13630: PUSH
13631: DOUBLE
13632: LD_INT 1
13634: DEC
13635: ST_TO_ADDR
13636: NOP4
13640: PUSH
13641: FOR_TO
13642: IFFALSE 13876
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
13644: NOP4
13648: PUSH
13649: NOP4
13653: ARRAY
13654: PUSH
13655: LD_INT 24
13657: EQUAL
13658: PUSH
13659: NOP4
13663: PUSH
13664: NOP4
13668: ARRAY
13669: PUSH
13670: LD_INT 22
13672: EQUAL
13673: OR
13674: PUSH
13675: NOP4
13679: PUSH
13680: NOP4
13684: ARRAY
13685: PUSH
13686: LD_INT 23
13688: EQUAL
13689: OR
13690: PUSH
13691: NOP4
13695: PUSH
13696: NOP4
13700: ARRAY
13701: PUSH
13702: LD_INT 30
13704: EQUAL
13705: OR
13706: IFFALSE 13755
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
13708: NOP4
13712: PUSH
13713: LD_INT 11
13715: PUSH
13716: LD_INT 12
13718: PUSH
13719: LD_INT 13
13721: PUSH
13722: LD_INT 14
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13731: LD_ADDR_OWVAR 37
13735: PUSH
13736: NOP4
13740: PUSH
13741: LD_INT 1
13743: PPUSH
13744: NOP4
13748: PPUSH
13749: NOP4
13753: ARRAY
13754: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13755: NOP4
13759: PUSH
13760: NOP4
13764: ARRAY
13765: PUSH
13766: LD_INT 29
13768: EQUAL
13769: PUSH
13770: NOP4
13774: PUSH
13775: NOP4
13779: ARRAY
13780: PUSH
13781: LD_INT 28
13783: EQUAL
13784: OR
13785: PUSH
13786: NOP4
13790: PUSH
13791: NOP4
13795: ARRAY
13796: PUSH
13797: LD_INT 27
13799: EQUAL
13800: OR
13801: PUSH
13802: NOP4
13806: PUSH
13807: NOP4
13811: ARRAY
13812: PUSH
13813: LD_INT 26
13815: EQUAL
13816: OR
13817: PUSH
13818: NOP4
13822: PUSH
13823: NOP4
13827: ARRAY
13828: PUSH
13829: LD_INT 25
13831: EQUAL
13832: OR
13833: IFFALSE 13874
// begin arChassisTab = [ 13 , 14 ] ;
13835: NOP4
13839: PUSH
13840: LD_INT 13
13842: PUSH
13843: LD_INT 14
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13850: LD_ADDR_OWVAR 37
13854: PUSH
13855: NOP4
13859: PUSH
13860: LD_INT 1
13862: PPUSH
13863: NOP4
13867: PPUSH
13868: NOP4
13872: ARRAY
13873: ST_TO_ADDR
=======
13938: LD_INT 0
13940: PPUSH
13941: LD_INT 3
13943: PPUSH
13944: LD_VAR 0 4
13948: PPUSH
13949: CALL_OW 380
// un = CreateHuman ;
13953: LD_ADDR_VAR 0 15
13957: PUSH
13958: CALL_OW 44
13962: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13963: LD_VAR 0 15
13967: PPUSH
13968: LD_VAR 0 16
13972: PPUSH
13973: CALL_OW 52
// end ; i = i + 1 ;
13977: LD_ADDR_VAR 0 13
13981: PUSH
13982: LD_VAR 0 13
13986: PUSH
13987: LD_INT 1
13989: PLUS
13990: ST_TO_ADDR
// end ; if nation = 2 then
13991: LD_VAR 0 5
13995: PUSH
13996: LD_INT 2
13998: EQUAL
13999: IFFALSE 14423
// begin uc_side = side ;
14001: LD_ADDR_OWVAR 20
14005: PUSH
14006: LD_VAR 0 2
14010: ST_TO_ADDR
// uc_nation = nation ;
14011: LD_ADDR_OWVAR 21
14015: PUSH
14016: LD_VAR 0 5
14020: ST_TO_ADDR
// vc_engine = vehengine ;
14021: LD_ADDR_OWVAR 39
14025: PUSH
14026: LD_VAR 0 6
14030: ST_TO_ADDR
// vc_control = vehcontrol ;
14031: LD_ADDR_OWVAR 38
14035: PUSH
14036: LD_VAR 0 7
14040: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
14041: LD_ADDR_OWVAR 40
14045: PUSH
14046: LD_VAR 0 9
14050: PUSH
14051: LD_INT 1
14053: PPUSH
14054: LD_VAR 0 9
14058: PPUSH
14059: CALL_OW 12
14063: ARRAY
14064: ST_TO_ADDR
// for j = 1 to ARWeapons do
14065: LD_ADDR_VAR 0 14
14069: PUSH
14070: DOUBLE
14071: LD_INT 1
14073: DEC
14074: ST_TO_ADDR
14075: LD_VAR 0 9
14079: PUSH
14080: FOR_TO
14081: IFFALSE 14315
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
14083: LD_VAR 0 9
14087: PUSH
14088: LD_VAR 0 14
14092: ARRAY
14093: PUSH
14094: LD_INT 24
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 9
14102: PUSH
14103: LD_VAR 0 14
14107: ARRAY
14108: PUSH
14109: LD_INT 22
14111: EQUAL
14112: OR
14113: PUSH
14114: LD_VAR 0 9
14118: PUSH
14119: LD_VAR 0 14
14123: ARRAY
14124: PUSH
14125: LD_INT 23
14127: EQUAL
14128: OR
14129: PUSH
14130: LD_VAR 0 9
14134: PUSH
14135: LD_VAR 0 14
14139: ARRAY
14140: PUSH
14141: LD_INT 30
14143: EQUAL
14144: OR
14145: IFFALSE 14194
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
14147: LD_ADDR_VAR 0 18
14151: PUSH
14152: LD_INT 11
14154: PUSH
14155: LD_INT 12
14157: PUSH
14158: LD_INT 13
14160: PUSH
14161: LD_INT 14
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14170: LD_ADDR_OWVAR 37
14174: PUSH
14175: LD_VAR 0 18
14179: PUSH
14180: LD_INT 1
14182: PPUSH
14183: LD_VAR 0 18
14187: PPUSH
14188: CALL_OW 12
14192: ARRAY
14193: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
14194: LD_VAR 0 9
14198: PUSH
14199: LD_VAR 0 14
14203: ARRAY
14204: PUSH
14205: LD_INT 29
14207: EQUAL
14208: PUSH
14209: LD_VAR 0 9
14213: PUSH
14214: LD_VAR 0 14
14218: ARRAY
14219: PUSH
14220: LD_INT 28
14222: EQUAL
14223: OR
14224: PUSH
14225: LD_VAR 0 9
14229: PUSH
14230: LD_VAR 0 14
14234: ARRAY
14235: PUSH
14236: LD_INT 27
14238: EQUAL
14239: OR
14240: PUSH
14241: LD_VAR 0 9
14245: PUSH
14246: LD_VAR 0 14
14250: ARRAY
14251: PUSH
14252: LD_INT 26
14254: EQUAL
14255: OR
14256: PUSH
14257: LD_VAR 0 9
14261: PUSH
14262: LD_VAR 0 14
14266: ARRAY
14267: PUSH
14268: LD_INT 25
14270: EQUAL
14271: OR
14272: IFFALSE 14313
// begin arChassisTab = [ 13 , 14 ] ;
14274: LD_ADDR_VAR 0 18
14278: PUSH
14279: LD_INT 13
14281: PUSH
14282: LD_INT 14
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14289: LD_ADDR_OWVAR 37
14293: PUSH
14294: LD_VAR 0 18
14298: PUSH
14299: LD_INT 1
14301: PPUSH
14302: LD_VAR 0 18
14306: PPUSH
14307: CALL_OW 12
14311: ARRAY
14312: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ;
14313: GO 14080
14315: POP
14316: POP
// veh = CreateVehicle ;
<<<<<<< HEAD
13878: NOP4
13882: PUSH
13883: NOP4
13887: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13888: NOP4
13892: PPUSH
13893: NOP4
13897: PPUSH
13898: LD_INT 0
13900: PPUSH
13901: NOP4
// if vehcontrol = 1 then
13905: NOP4
13909: PUSH
13910: LD_INT 1
13912: EQUAL
13913: IFFALSE 13970
=======
14317: LD_ADDR_VAR 0 16
14321: PUSH
14322: CALL_OW 45
14326: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14327: LD_VAR 0 16
14331: PPUSH
14332: LD_VAR 0 1
14336: PPUSH
14337: LD_INT 0
14339: PPUSH
14340: CALL_OW 49
// if vehcontrol = 1 then
14344: LD_VAR 0 7
14348: PUSH
14349: LD_INT 1
14351: EQUAL
14352: IFFALSE 14409
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// begin hc_gallery =  ;
14354: LD_ADDR_OWVAR 33
14358: PUSH
14359: LD_STRING 
14361: ST_TO_ADDR
// hc_name =  ;
14362: LD_ADDR_OWVAR 26
14366: PUSH
14367: LD_STRING 
14369: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
<<<<<<< HEAD
13931: LD_INT 0
13933: PPUSH
13934: LD_INT 3
13936: PPUSH
13937: NOP4
13941: PPUSH
13942: NOP4
// un = CreateHuman ;
13946: NOP4
13950: PUSH
13951: NOP4
13955: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13956: NOP4
13960: PPUSH
13961: NOP4
13965: PPUSH
13966: NOP4
// end ; i = i + 1 ;
13970: NOP4
13974: PUSH
13975: NOP4
13979: PUSH
13980: LD_INT 1
13982: PLUS
13983: ST_TO_ADDR
// end ; if nation = 3 then
13984: NOP4
13988: PUSH
13989: LD_INT 3
13991: EQUAL
13992: IFFALSE 14384
// begin uc_side = side ;
13994: LD_ADDR_OWVAR 20
13998: PUSH
13999: NOP4
14003: ST_TO_ADDR
// uc_nation = nation ;
14004: LD_ADDR_OWVAR 21
14008: PUSH
14009: NOP4
14013: ST_TO_ADDR
// vc_engine = vehengine ;
14014: LD_ADDR_OWVAR 39
14018: PUSH
14019: NOP4
14023: ST_TO_ADDR
// vc_control = vehcontrol ;
14024: LD_ADDR_OWVAR 38
14028: PUSH
14029: NOP4
14033: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14034: LD_ADDR_OWVAR 40
14038: PUSH
14039: NOP4
14043: PUSH
14044: LD_INT 1
14046: PPUSH
14047: NOP4
14051: PPUSH
14052: NOP4
14056: ARRAY
14057: ST_TO_ADDR
// for j = 1 to RuWeapons do
14058: NOP4
14062: PUSH
14063: DOUBLE
14064: LD_INT 1
14066: DEC
14067: ST_TO_ADDR
14068: NOP4
14072: PUSH
14073: FOR_TO
14074: IFFALSE 14276
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14076: NOP4
14080: PUSH
14081: NOP4
14085: ARRAY
14086: PUSH
14087: LD_INT 42
14089: EQUAL
14090: PUSH
14091: NOP4
14095: PUSH
14096: NOP4
14100: ARRAY
14101: PUSH
14102: LD_INT 43
14104: EQUAL
14105: OR
14106: PUSH
14107: NOP4
14111: PUSH
14112: NOP4
14116: ARRAY
14117: PUSH
14118: LD_INT 44
14120: EQUAL
14121: OR
14122: PUSH
14123: NOP4
14127: PUSH
14128: NOP4
14132: ARRAY
14133: PUSH
14134: LD_INT 45
14136: EQUAL
14137: OR
14138: PUSH
14139: NOP4
14143: PUSH
14144: NOP4
14148: ARRAY
14149: PUSH
14150: LD_INT 49
14152: EQUAL
14153: OR
14154: IFFALSE 14203
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14156: NOP4
14160: PUSH
14161: LD_INT 21
14163: PUSH
14164: LD_INT 22
14166: PUSH
14167: LD_INT 23
14169: PUSH
14170: LD_INT 24
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14179: LD_ADDR_OWVAR 37
14183: PUSH
14184: NOP4
14188: PUSH
14189: LD_INT 1
14191: PPUSH
14192: NOP4
14196: PPUSH
14197: NOP4
14201: ARRAY
14202: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14203: NOP4
14207: PUSH
14208: NOP4
14212: ARRAY
14213: PUSH
14214: LD_INT 46
14216: EQUAL
14217: PUSH
14218: NOP4
14222: PUSH
14223: NOP4
14227: ARRAY
14228: PUSH
14229: LD_INT 47
14231: EQUAL
14232: OR
14233: IFFALSE 14274
// begin ruChassisTab = [ 23 , 24 ] ;
14235: NOP4
14239: PUSH
14240: LD_INT 23
14242: PUSH
14243: LD_INT 24
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14250: LD_ADDR_OWVAR 37
14254: PUSH
14255: NOP4
14259: PUSH
14260: LD_INT 1
14262: PPUSH
14263: NOP4
14267: PPUSH
14268: NOP4
14272: ARRAY
14273: ST_TO_ADDR
=======
14370: LD_INT 0
14372: PPUSH
14373: LD_INT 3
14375: PPUSH
14376: LD_VAR 0 4
14380: PPUSH
14381: CALL_OW 380
// un = CreateHuman ;
14385: LD_ADDR_VAR 0 15
14389: PUSH
14390: CALL_OW 44
14394: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14395: LD_VAR 0 15
14399: PPUSH
14400: LD_VAR 0 16
14404: PPUSH
14405: CALL_OW 52
// end ; i = i + 1 ;
14409: LD_ADDR_VAR 0 13
14413: PUSH
14414: LD_VAR 0 13
14418: PUSH
14419: LD_INT 1
14421: PLUS
14422: ST_TO_ADDR
// end ; if nation = 3 then
14423: LD_VAR 0 5
14427: PUSH
14428: LD_INT 3
14430: EQUAL
14431: IFFALSE 14823
// begin uc_side = side ;
14433: LD_ADDR_OWVAR 20
14437: PUSH
14438: LD_VAR 0 2
14442: ST_TO_ADDR
// uc_nation = nation ;
14443: LD_ADDR_OWVAR 21
14447: PUSH
14448: LD_VAR 0 5
14452: ST_TO_ADDR
// vc_engine = vehengine ;
14453: LD_ADDR_OWVAR 39
14457: PUSH
14458: LD_VAR 0 6
14462: ST_TO_ADDR
// vc_control = vehcontrol ;
14463: LD_ADDR_OWVAR 38
14467: PUSH
14468: LD_VAR 0 7
14472: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14473: LD_ADDR_OWVAR 40
14477: PUSH
14478: LD_VAR 0 8
14482: PUSH
14483: LD_INT 1
14485: PPUSH
14486: LD_VAR 0 8
14490: PPUSH
14491: CALL_OW 12
14495: ARRAY
14496: ST_TO_ADDR
// for j = 1 to RuWeapons do
14497: LD_ADDR_VAR 0 14
14501: PUSH
14502: DOUBLE
14503: LD_INT 1
14505: DEC
14506: ST_TO_ADDR
14507: LD_VAR 0 8
14511: PUSH
14512: FOR_TO
14513: IFFALSE 14715
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14515: LD_VAR 0 8
14519: PUSH
14520: LD_VAR 0 14
14524: ARRAY
14525: PUSH
14526: LD_INT 42
14528: EQUAL
14529: PUSH
14530: LD_VAR 0 8
14534: PUSH
14535: LD_VAR 0 14
14539: ARRAY
14540: PUSH
14541: LD_INT 43
14543: EQUAL
14544: OR
14545: PUSH
14546: LD_VAR 0 8
14550: PUSH
14551: LD_VAR 0 14
14555: ARRAY
14556: PUSH
14557: LD_INT 44
14559: EQUAL
14560: OR
14561: PUSH
14562: LD_VAR 0 8
14566: PUSH
14567: LD_VAR 0 14
14571: ARRAY
14572: PUSH
14573: LD_INT 45
14575: EQUAL
14576: OR
14577: PUSH
14578: LD_VAR 0 8
14582: PUSH
14583: LD_VAR 0 14
14587: ARRAY
14588: PUSH
14589: LD_INT 49
14591: EQUAL
14592: OR
14593: IFFALSE 14642
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14595: LD_ADDR_VAR 0 17
14599: PUSH
14600: LD_INT 21
14602: PUSH
14603: LD_INT 22
14605: PUSH
14606: LD_INT 23
14608: PUSH
14609: LD_INT 24
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14618: LD_ADDR_OWVAR 37
14622: PUSH
14623: LD_VAR 0 17
14627: PUSH
14628: LD_INT 1
14630: PPUSH
14631: LD_VAR 0 17
14635: PPUSH
14636: CALL_OW 12
14640: ARRAY
14641: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14642: LD_VAR 0 8
14646: PUSH
14647: LD_VAR 0 14
14651: ARRAY
14652: PUSH
14653: LD_INT 46
14655: EQUAL
14656: PUSH
14657: LD_VAR 0 8
14661: PUSH
14662: LD_VAR 0 14
14666: ARRAY
14667: PUSH
14668: LD_INT 47
14670: EQUAL
14671: OR
14672: IFFALSE 14713
// begin ruChassisTab = [ 23 , 24 ] ;
14674: LD_ADDR_VAR 0 17
14678: PUSH
14679: LD_INT 23
14681: PUSH
14682: LD_INT 24
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14689: LD_ADDR_OWVAR 37
14693: PUSH
14694: LD_VAR 0 17
14698: PUSH
14699: LD_INT 1
14701: PPUSH
14702: LD_VAR 0 17
14706: PPUSH
14707: CALL_OW 12
14711: ARRAY
14712: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ;
14713: GO 14512
14715: POP
14716: POP
// veh = CreateVehicle ;
<<<<<<< HEAD
14278: NOP4
14282: PUSH
14283: NOP4
14287: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14288: NOP4
14292: PPUSH
14293: NOP4
14297: PPUSH
14298: LD_INT 0
14300: PPUSH
14301: NOP4
// if vehcontrol = 1 then
14305: NOP4
14309: PUSH
14310: LD_INT 1
14312: EQUAL
14313: IFFALSE 14370
=======
14717: LD_ADDR_VAR 0 16
14721: PUSH
14722: CALL_OW 45
14726: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14727: LD_VAR 0 16
14731: PPUSH
14732: LD_VAR 0 1
14736: PPUSH
14737: LD_INT 0
14739: PPUSH
14740: CALL_OW 49
// if vehcontrol = 1 then
14744: LD_VAR 0 7
14748: PUSH
14749: LD_INT 1
14751: EQUAL
14752: IFFALSE 14809
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// begin hc_gallery =  ;
14754: LD_ADDR_OWVAR 33
14758: PUSH
14759: LD_STRING 
14761: ST_TO_ADDR
// hc_name =  ;
14762: LD_ADDR_OWVAR 26
14766: PUSH
14767: LD_STRING 
14769: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
<<<<<<< HEAD
14331: LD_INT 0
14333: PPUSH
14334: LD_INT 3
14336: PPUSH
14337: NOP4
14341: PPUSH
14342: NOP4
// un = CreateHuman ;
14346: NOP4
14350: PUSH
14351: NOP4
14355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14356: NOP4
14360: PPUSH
14361: NOP4
14365: PPUSH
14366: NOP4
// end ; i = i + 1 ;
14370: NOP4
14374: PUSH
14375: NOP4
14379: PUSH
14380: LD_INT 1
14382: PLUS
14383: ST_TO_ADDR
// end ; until i = vehCount ;
14384: NOP4
14388: PUSH
14389: NOP4
14393: EQUAL
14394: IFFALSE 13046
// repeat wait ( 0 0$1 ) ;
14396: LD_INT 35
14398: PPUSH
14399: NOP4
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
14403: NOP4
14407: PUSH
14408: LD_INT 22
14410: PUSH
14411: NOP4
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: LD_INT 21
14422: PUSH
14423: LD_INT 2
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 24
14432: PUSH
14433: LD_INT 661
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: LIST
14444: PPUSH
14445: NOP4
14449: ST_TO_ADDR
// if vehicleOK_list > 0 then
14450: NOP4
14454: PUSH
14455: LD_INT 0
14457: GREATER
14458: IFFALSE 14649
// begin for i in vehicleOK_list do
14460: NOP4
14464: PUSH
14465: NOP4
14469: PUSH
14470: FOR_IN
14471: IFFALSE 14647
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14473: NOP4
14477: PUSH
14478: LD_INT 22
14480: PUSH
14481: NOP4
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PPUSH
14490: NOP4
14494: PPUSH
14495: NOP4
14499: PPUSH
14500: NOP4
14504: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14505: NOP4
14509: PUSH
14510: LD_INT 22
14512: PUSH
14513: NOP4
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: LD_INT 2
14524: PUSH
14525: LD_INT 59
14527: PUSH
14528: EMPTY
14529: LIST
14530: PUSH
14531: LD_INT 21
14533: PUSH
14534: LD_INT 1
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 21
14543: PUSH
14544: LD_INT 2
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: PPUSH
14564: NOP4
14568: PPUSH
14569: NOP4
14573: PPUSH
14574: NOP4
14578: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14579: NOP4
14583: PPUSH
14584: NOP4
14588: PPUSH
14589: NOP4
14593: PUSH
14594: LD_INT 6
14596: PLUS
14597: PUSH
14598: NOP4
14602: PPUSH
14603: NOP4
14607: PPUSH
14608: NOP4
14612: LESS
14613: IFFALSE 14631
// begin ComAttackUnit ( i , target1 ) ;
14615: NOP4
14619: PPUSH
14620: NOP4
14624: PPUSH
14625: NOP4
=======
14770: LD_INT 0
14772: PPUSH
14773: LD_INT 3
14775: PPUSH
14776: LD_VAR 0 4
14780: PPUSH
14781: CALL_OW 380
// un = CreateHuman ;
14785: LD_ADDR_VAR 0 15
14789: PUSH
14790: CALL_OW 44
14794: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14795: LD_VAR 0 15
14799: PPUSH
14800: LD_VAR 0 16
14804: PPUSH
14805: CALL_OW 52
// end ; i = i + 1 ;
14809: LD_ADDR_VAR 0 13
14813: PUSH
14814: LD_VAR 0 13
14818: PUSH
14819: LD_INT 1
14821: PLUS
14822: ST_TO_ADDR
// end ; until i = vehCount ;
14823: LD_VAR 0 13
14827: PUSH
14828: LD_VAR 0 3
14832: EQUAL
14833: IFFALSE 13485
// repeat wait ( 0 0$1 ) ;
14835: LD_INT 35
14837: PPUSH
14838: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
14842: LD_ADDR_VAR 0 20
14846: PUSH
14847: LD_INT 22
14849: PUSH
14850: LD_VAR 0 2
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 21
14861: PUSH
14862: LD_INT 2
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 24
14871: PUSH
14872: LD_INT 250
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: PPUSH
14884: CALL_OW 69
14888: ST_TO_ADDR
// if vehicleOK_list > 0 then
14889: LD_VAR 0 20
14893: PUSH
14894: LD_INT 0
14896: GREATER
14897: IFFALSE 15088
// begin for i in vehicleOK_list do
14899: LD_ADDR_VAR 0 13
14903: PUSH
14904: LD_VAR 0 20
14908: PUSH
14909: FOR_IN
14910: IFFALSE 15086
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14912: LD_ADDR_VAR 0 21
14916: PUSH
14917: LD_INT 22
14919: PUSH
14920: LD_VAR 0 11
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PPUSH
14929: CALL_OW 69
14933: PPUSH
14934: LD_VAR 0 13
14938: PPUSH
14939: CALL_OW 74
14943: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14944: LD_ADDR_VAR 0 22
14948: PUSH
14949: LD_INT 22
14951: PUSH
14952: LD_VAR 0 11
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: LD_INT 59
14966: PUSH
14967: EMPTY
14968: LIST
14969: PUSH
14970: LD_INT 21
14972: PUSH
14973: LD_INT 1
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: LD_INT 21
14982: PUSH
14983: LD_INT 2
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: PPUSH
15003: CALL_OW 69
15007: PPUSH
15008: LD_VAR 0 13
15012: PPUSH
15013: CALL_OW 74
15017: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
15018: LD_VAR 0 13
15022: PPUSH
15023: LD_VAR 0 21
15027: PPUSH
15028: CALL_OW 296
15032: PUSH
15033: LD_INT 6
15035: PLUS
15036: PUSH
15037: LD_VAR 0 13
15041: PPUSH
15042: LD_VAR 0 22
15046: PPUSH
15047: CALL_OW 296
15051: LESS
15052: IFFALSE 15070
// begin ComAttackUnit ( i , target1 ) ;
15054: LD_VAR 0 13
15058: PPUSH
15059: LD_VAR 0 21
15063: PPUSH
15064: CALL_OW 115
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
15068: GO 15084
// begin ComAttackUnit ( i , target2 ) ;
<<<<<<< HEAD
14631: NOP4
14635: PPUSH
14636: NOP4
14640: PPUSH
14641: NOP4
=======
15070: LD_VAR 0 13
15074: PPUSH
15075: LD_VAR 0 22
15079: PPUSH
15080: CALL_OW 115
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ;
15084: GO 14909
15086: POP
15087: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
<<<<<<< HEAD
14649: LD_INT 22
14651: PUSH
14652: NOP4
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: LD_INT 21
14663: PUSH
14664: LD_INT 2
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PUSH
14671: LD_INT 24
14673: PUSH
14674: LD_INT 250
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: PPUSH
14686: NOP4
14690: PUSH
14691: LD_INT 0
14693: EQUAL
14694: IFFALSE 14396
=======
15088: LD_INT 22
15090: PUSH
15091: LD_VAR 0 2
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 21
15102: PUSH
15103: LD_INT 2
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 24
15112: PUSH
15113: LD_INT 250
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: LIST
15124: PPUSH
15125: CALL_OW 69
15129: PUSH
15130: LD_INT 0
15132: EQUAL
15133: IFFALSE 14835
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
15135: LD_VAR 0 12
15139: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
15140: LD_INT 0
15142: PPUSH
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
15147: PPUSH
15148: PPUSH
15149: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
<<<<<<< HEAD
14711: NOP4
14715: PUSH
14716: LD_INT 22
14718: PUSH
14719: NOP4
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 1
14730: PUSH
14731: LD_INT 3
14733: PUSH
14734: LD_INT 24
14736: PUSH
14737: LD_INT 550
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 24
14750: PUSH
14751: LD_INT 250
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PPUSH
14767: NOP4
14771: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14772: NOP4
14776: PUSH
14777: LD_INT 22
14779: PUSH
14780: NOP4
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PUSH
14789: LD_INT 2
14791: PUSH
14792: LD_INT 25
14794: PUSH
14795: LD_INT 1
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: LD_INT 25
14804: PUSH
14805: LD_INT 5
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 25
14814: PUSH
14815: LD_INT 8
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 25
14824: PUSH
14825: LD_INT 9
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 24
14841: PUSH
14842: LD_INT 1000
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: LIST
14853: PPUSH
14854: NOP4
14858: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
14859: NOP4
14863: PUSH
14864: LD_INT 22
14866: PUSH
14867: NOP4
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 25
14878: PUSH
14879: LD_INT 4
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PPUSH
14890: NOP4
14894: ST_TO_ADDR
// if medicCount > 0 then
14895: NOP4
14899: PUSH
14900: LD_INT 0
14902: GREATER
14903: IFFALSE 14977
// begin if damageUnit_list > 0 then
14905: NOP4
14909: PUSH
14910: LD_INT 0
14912: GREATER
14913: IFFALSE 14977
// begin for i in damageUnit_list do
14915: NOP4
14919: PUSH
14920: NOP4
14924: PUSH
14925: FOR_IN
14926: IFFALSE 14975
// begin ComMoveToArea ( i , healArea ) ;
14928: NOP4
14932: PPUSH
14933: NOP4
14937: PPUSH
14938: NOP4
// for j in medicCount do
14942: NOP4
14946: PUSH
14947: NOP4
14951: PUSH
14952: FOR_IN
14953: IFFALSE 14971
// AddComHeal ( j , i ) ;
14955: NOP4
14959: PPUSH
14960: NOP4
14964: PPUSH
14965: NOP4
14969: GO 14952
14971: POP
14972: POP
=======
15150: LD_ADDR_VAR 0 7
15154: PUSH
15155: LD_INT 22
15157: PUSH
15158: LD_VAR 0 1
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 1
15169: PUSH
15170: LD_INT 3
15172: PUSH
15173: LD_INT 24
15175: PUSH
15176: LD_INT 550
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 24
15189: PUSH
15190: LD_INT 250
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: LIST
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PPUSH
15206: CALL_OW 69
15210: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15211: LD_ADDR_VAR 0 8
15215: PUSH
15216: LD_INT 22
15218: PUSH
15219: LD_VAR 0 1
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 2
15230: PUSH
15231: LD_INT 25
15233: PUSH
15234: LD_INT 1
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 25
15243: PUSH
15244: LD_INT 5
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 25
15253: PUSH
15254: LD_INT 8
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: LD_INT 25
15263: PUSH
15264: LD_INT 9
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 24
15280: PUSH
15281: LD_INT 1000
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: PPUSH
15293: CALL_OW 69
15297: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15298: LD_ADDR_VAR 0 9
15302: PUSH
15303: LD_INT 22
15305: PUSH
15306: LD_VAR 0 1
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 25
15317: PUSH
15318: LD_INT 4
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PPUSH
15329: CALL_OW 69
15333: ST_TO_ADDR
// if medicCount > 0 then
15334: LD_VAR 0 9
15338: PUSH
15339: LD_INT 0
15341: GREATER
15342: IFFALSE 15416
// begin if damageUnit_list > 0 then
15344: LD_VAR 0 7
15348: PUSH
15349: LD_INT 0
15351: GREATER
15352: IFFALSE 15416
// begin for i in damageUnit_list do
15354: LD_ADDR_VAR 0 5
15358: PUSH
15359: LD_VAR 0 7
15363: PUSH
15364: FOR_IN
15365: IFFALSE 15414
// begin ComMoveToArea ( i , healArea ) ;
15367: LD_VAR 0 5
15371: PPUSH
15372: LD_VAR 0 2
15376: PPUSH
15377: CALL_OW 113
// for j in medicCount do
15381: LD_ADDR_VAR 0 6
15385: PUSH
15386: LD_VAR 0 9
15390: PUSH
15391: FOR_IN
15392: IFFALSE 15410
// AddComHeal ( j , i ) ;
15394: LD_VAR 0 6
15398: PPUSH
15399: LD_VAR 0 5
15403: PPUSH
15404: CALL_OW 188
15408: GO 15391
15410: POP
15411: POP
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
15412: GO 15364
15414: POP
15415: POP
// end ; end ; if soldiersOK_list > 0 then
<<<<<<< HEAD
14977: NOP4
14981: PUSH
14982: LD_INT 0
14984: GREATER
14985: IFFALSE 15176
// begin for i in soldiersOK_list do
14987: NOP4
14991: PUSH
14992: NOP4
14996: PUSH
14997: FOR_IN
14998: IFFALSE 15174
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15000: NOP4
15004: PUSH
15005: LD_INT 22
15007: PUSH
15008: NOP4
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PPUSH
15017: NOP4
15021: PPUSH
15022: NOP4
15026: PPUSH
15027: NOP4
15031: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15032: NOP4
15036: PUSH
15037: LD_INT 22
15039: PUSH
15040: NOP4
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: LD_INT 2
15051: PUSH
15052: LD_INT 59
15054: PUSH
15055: EMPTY
15056: LIST
15057: PUSH
15058: LD_INT 21
15060: PUSH
15061: LD_INT 1
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 21
15070: PUSH
15071: LD_INT 2
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: EMPTY
15089: LIST
15090: PPUSH
15091: NOP4
15095: PPUSH
15096: NOP4
15100: PPUSH
15101: NOP4
15105: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15106: NOP4
15110: PPUSH
15111: NOP4
15115: PPUSH
15116: NOP4
15120: PUSH
15121: LD_INT 8
15123: PLUS
15124: PUSH
15125: NOP4
15129: PPUSH
15130: NOP4
15134: PPUSH
15135: NOP4
15139: LESS
15140: IFFALSE 15158
// begin ComAttackUnit ( i , target1 ) ;
15142: NOP4
15146: PPUSH
15147: NOP4
15151: PPUSH
15152: NOP4
=======
15416: LD_VAR 0 8
15420: PUSH
15421: LD_INT 0
15423: GREATER
15424: IFFALSE 15615
// begin for i in soldiersOK_list do
15426: LD_ADDR_VAR 0 5
15430: PUSH
15431: LD_VAR 0 8
15435: PUSH
15436: FOR_IN
15437: IFFALSE 15613
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15439: LD_ADDR_VAR 0 10
15443: PUSH
15444: LD_INT 22
15446: PUSH
15447: LD_VAR 0 3
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PPUSH
15456: CALL_OW 69
15460: PPUSH
15461: LD_VAR 0 5
15465: PPUSH
15466: CALL_OW 74
15470: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15471: LD_ADDR_VAR 0 11
15475: PUSH
15476: LD_INT 22
15478: PUSH
15479: LD_VAR 0 3
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: LD_INT 59
15493: PUSH
15494: EMPTY
15495: LIST
15496: PUSH
15497: LD_INT 21
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: LD_INT 21
15509: PUSH
15510: LD_INT 2
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: PPUSH
15530: CALL_OW 69
15534: PPUSH
15535: LD_VAR 0 5
15539: PPUSH
15540: CALL_OW 74
15544: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15545: LD_VAR 0 5
15549: PPUSH
15550: LD_VAR 0 10
15554: PPUSH
15555: CALL_OW 296
15559: PUSH
15560: LD_INT 8
15562: PLUS
15563: PUSH
15564: LD_VAR 0 5
15568: PPUSH
15569: LD_VAR 0 11
15573: PPUSH
15574: CALL_OW 296
15578: LESS
15579: IFFALSE 15597
// begin ComAttackUnit ( i , target1 ) ;
15581: LD_VAR 0 5
15585: PPUSH
15586: LD_VAR 0 10
15590: PPUSH
15591: CALL_OW 115
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
15595: GO 15611
// begin ComAttackUnit ( i , target2 ) ;
<<<<<<< HEAD
15158: NOP4
15162: PPUSH
15163: NOP4
15167: PPUSH
15168: NOP4
=======
15597: LD_VAR 0 5
15601: PPUSH
15602: LD_VAR 0 11
15606: PPUSH
15607: CALL_OW 115
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ;
15611: GO 15436
15613: POP
15614: POP
// end ; end ;
15615: LD_VAR 0 4
15619: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
15620: LD_INT 0
15622: PPUSH
15623: PPUSH
// list := [ ] ;
<<<<<<< HEAD
15185: NOP4
15189: PUSH
15190: EMPTY
15191: ST_TO_ADDR
// case d of 0 :
15192: NOP4
15196: PUSH
15197: LD_INT 0
15199: DOUBLE
15200: EQUAL
15201: IFTRUE 15205
15203: GO 15338
15205: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
15206: NOP4
15210: PUSH
15211: NOP4
15215: PUSH
15216: LD_INT 4
15218: MINUS
15219: PUSH
15220: NOP4
15224: PUSH
15225: LD_INT 4
15227: MINUS
15228: PUSH
15229: LD_INT 2
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: LIST
15236: PUSH
15237: NOP4
15241: PUSH
15242: LD_INT 3
15244: MINUS
15245: PUSH
15246: NOP4
15250: PUSH
15251: LD_INT 1
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: LIST
15258: PUSH
15259: NOP4
15263: PUSH
15264: LD_INT 4
15266: PLUS
15267: PUSH
15268: NOP4
15272: PUSH
15273: LD_INT 4
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: LIST
15280: PUSH
15281: NOP4
15285: PUSH
15286: LD_INT 3
15288: PLUS
15289: PUSH
15290: NOP4
15294: PUSH
15295: LD_INT 3
15297: PLUS
15298: PUSH
15299: LD_INT 5
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: LIST
15306: PUSH
15307: NOP4
15311: PUSH
15312: NOP4
15316: PUSH
15317: LD_INT 4
15319: PLUS
15320: PUSH
15321: LD_INT 0
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: LIST
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: ST_TO_ADDR
=======
15624: LD_ADDR_VAR 0 5
15628: PUSH
15629: EMPTY
15630: ST_TO_ADDR
// case d of 0 :
15631: LD_VAR 0 3
15635: PUSH
15636: LD_INT 0
15638: DOUBLE
15639: EQUAL
15640: IFTRUE 15644
15642: GO 15777
15644: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
15645: LD_ADDR_VAR 0 5
15649: PUSH
15650: LD_VAR 0 1
15654: PUSH
15655: LD_INT 4
15657: MINUS
15658: PUSH
15659: LD_VAR 0 2
15663: PUSH
15664: LD_INT 4
15666: MINUS
15667: PUSH
15668: LD_INT 2
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: LIST
15675: PUSH
15676: LD_VAR 0 1
15680: PUSH
15681: LD_INT 3
15683: MINUS
15684: PUSH
15685: LD_VAR 0 2
15689: PUSH
15690: LD_INT 1
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: LIST
15697: PUSH
15698: LD_VAR 0 1
15702: PUSH
15703: LD_INT 4
15705: PLUS
15706: PUSH
15707: LD_VAR 0 2
15711: PUSH
15712: LD_INT 4
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: LIST
15719: PUSH
15720: LD_VAR 0 1
15724: PUSH
15725: LD_INT 3
15727: PLUS
15728: PUSH
15729: LD_VAR 0 2
15733: PUSH
15734: LD_INT 3
15736: PLUS
15737: PUSH
15738: LD_INT 5
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: PUSH
15746: LD_VAR 0 1
15750: PUSH
15751: LD_VAR 0 2
15755: PUSH
15756: LD_INT 4
15758: PLUS
15759: PUSH
15760: LD_INT 0
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: LIST
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; 1 :
15775: GO 16475
15777: LD_INT 1
15779: DOUBLE
15780: EQUAL
15781: IFTRUE 15785
15783: GO 15918
15785: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
<<<<<<< HEAD
15347: NOP4
15351: PUSH
15352: NOP4
15356: PUSH
15357: NOP4
15361: PUSH
15362: LD_INT 4
15364: MINUS
15365: PUSH
15366: LD_INT 3
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: LIST
15373: PUSH
15374: NOP4
15378: PUSH
15379: LD_INT 3
15381: MINUS
15382: PUSH
15383: NOP4
15387: PUSH
15388: LD_INT 3
15390: MINUS
15391: PUSH
15392: LD_INT 2
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: LIST
15399: PUSH
15400: NOP4
15404: PUSH
15405: LD_INT 4
15407: MINUS
15408: PUSH
15409: NOP4
15413: PUSH
15414: LD_INT 1
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: LIST
15421: PUSH
15422: NOP4
15426: PUSH
15427: NOP4
15431: PUSH
15432: LD_INT 3
15434: PLUS
15435: PUSH
15436: LD_INT 0
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PUSH
15444: NOP4
15448: PUSH
15449: LD_INT 4
15451: PLUS
15452: PUSH
15453: NOP4
15457: PUSH
15458: LD_INT 4
15460: PLUS
15461: PUSH
15462: LD_INT 5
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: LIST
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: ST_TO_ADDR
=======
15786: LD_ADDR_VAR 0 5
15790: PUSH
15791: LD_VAR 0 1
15795: PUSH
15796: LD_VAR 0 2
15800: PUSH
15801: LD_INT 4
15803: MINUS
15804: PUSH
15805: LD_INT 3
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: LIST
15812: PUSH
15813: LD_VAR 0 1
15817: PUSH
15818: LD_INT 3
15820: MINUS
15821: PUSH
15822: LD_VAR 0 2
15826: PUSH
15827: LD_INT 3
15829: MINUS
15830: PUSH
15831: LD_INT 2
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: LIST
15838: PUSH
15839: LD_VAR 0 1
15843: PUSH
15844: LD_INT 4
15846: MINUS
15847: PUSH
15848: LD_VAR 0 2
15852: PUSH
15853: LD_INT 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: LIST
15860: PUSH
15861: LD_VAR 0 1
15865: PUSH
15866: LD_VAR 0 2
15870: PUSH
15871: LD_INT 3
15873: PLUS
15874: PUSH
15875: LD_INT 0
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: LIST
15882: PUSH
15883: LD_VAR 0 1
15887: PUSH
15888: LD_INT 4
15890: PLUS
15891: PUSH
15892: LD_VAR 0 2
15896: PUSH
15897: LD_INT 4
15899: PLUS
15900: PUSH
15901: LD_INT 5
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: LIST
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; 2 :
15916: GO 16475
15918: LD_INT 2
15920: DOUBLE
15921: EQUAL
15922: IFTRUE 15926
15924: GO 16055
15926: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
<<<<<<< HEAD
15488: NOP4
15492: PUSH
15493: NOP4
15497: PUSH
15498: NOP4
15502: PUSH
15503: LD_INT 3
15505: MINUS
15506: PUSH
15507: LD_INT 3
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: LIST
15514: PUSH
15515: NOP4
15519: PUSH
15520: LD_INT 4
15522: PLUS
15523: PUSH
15524: NOP4
15528: PUSH
15529: LD_INT 4
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: LIST
15536: PUSH
15537: NOP4
15541: PUSH
15542: NOP4
15546: PUSH
15547: LD_INT 4
15549: PLUS
15550: PUSH
15551: LD_INT 0
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: LIST
15558: PUSH
15559: NOP4
15563: PUSH
15564: LD_INT 3
15566: MINUS
15567: PUSH
15568: NOP4
15572: PUSH
15573: LD_INT 1
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: LIST
15580: PUSH
15581: NOP4
15585: PUSH
15586: LD_INT 4
15588: MINUS
15589: PUSH
15590: NOP4
15594: PUSH
15595: LD_INT 4
15597: MINUS
15598: PUSH
15599: LD_INT 2
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: ST_TO_ADDR
=======
15927: LD_ADDR_VAR 0 5
15931: PUSH
15932: LD_VAR 0 1
15936: PUSH
15937: LD_VAR 0 2
15941: PUSH
15942: LD_INT 3
15944: MINUS
15945: PUSH
15946: LD_INT 3
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: LIST
15953: PUSH
15954: LD_VAR 0 1
15958: PUSH
15959: LD_INT 4
15961: PLUS
15962: PUSH
15963: LD_VAR 0 2
15967: PUSH
15968: LD_INT 4
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: PUSH
15976: LD_VAR 0 1
15980: PUSH
15981: LD_VAR 0 2
15985: PUSH
15986: LD_INT 4
15988: PLUS
15989: PUSH
15990: LD_INT 0
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: LIST
15997: PUSH
15998: LD_VAR 0 1
16002: PUSH
16003: LD_INT 3
16005: MINUS
16006: PUSH
16007: LD_VAR 0 2
16011: PUSH
16012: LD_INT 1
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: LIST
16019: PUSH
16020: LD_VAR 0 1
16024: PUSH
16025: LD_INT 4
16027: MINUS
16028: PUSH
16029: LD_VAR 0 2
16033: PUSH
16034: LD_INT 4
16036: MINUS
16037: PUSH
16038: LD_INT 2
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: LIST
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; 3 :
16053: GO 16475
16055: LD_INT 3
16057: DOUBLE
16058: EQUAL
16059: IFTRUE 16063
16061: GO 16196
16063: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
<<<<<<< HEAD
15625: NOP4
15629: PUSH
15630: NOP4
15634: PUSH
15635: LD_INT 3
15637: PLUS
15638: PUSH
15639: NOP4
15643: PUSH
15644: LD_INT 4
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: LIST
15651: PUSH
15652: NOP4
15656: PUSH
15657: LD_INT 4
15659: PLUS
15660: PUSH
15661: NOP4
15665: PUSH
15666: LD_INT 4
15668: PLUS
15669: PUSH
15670: LD_INT 5
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: LIST
15677: PUSH
15678: NOP4
15682: PUSH
15683: LD_INT 4
15685: MINUS
15686: PUSH
15687: NOP4
15691: PUSH
15692: LD_INT 1
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: LIST
15699: PUSH
15700: NOP4
15704: PUSH
15705: NOP4
15709: PUSH
15710: LD_INT 4
15712: MINUS
15713: PUSH
15714: LD_INT 3
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: LIST
15721: PUSH
15722: NOP4
15726: PUSH
15727: LD_INT 3
15729: MINUS
15730: PUSH
15731: NOP4
15735: PUSH
15736: LD_INT 3
15738: MINUS
15739: PUSH
15740: LD_INT 2
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: ST_TO_ADDR
=======
16064: LD_ADDR_VAR 0 5
16068: PUSH
16069: LD_VAR 0 1
16073: PUSH
16074: LD_INT 3
16076: PLUS
16077: PUSH
16078: LD_VAR 0 2
16082: PUSH
16083: LD_INT 4
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: LIST
16090: PUSH
16091: LD_VAR 0 1
16095: PUSH
16096: LD_INT 4
16098: PLUS
16099: PUSH
16100: LD_VAR 0 2
16104: PUSH
16105: LD_INT 4
16107: PLUS
16108: PUSH
16109: LD_INT 5
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: LIST
16116: PUSH
16117: LD_VAR 0 1
16121: PUSH
16122: LD_INT 4
16124: MINUS
16125: PUSH
16126: LD_VAR 0 2
16130: PUSH
16131: LD_INT 1
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: PUSH
16139: LD_VAR 0 1
16143: PUSH
16144: LD_VAR 0 2
16148: PUSH
16149: LD_INT 4
16151: MINUS
16152: PUSH
16153: LD_INT 3
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: LIST
16160: PUSH
16161: LD_VAR 0 1
16165: PUSH
16166: LD_INT 3
16168: MINUS
16169: PUSH
16170: LD_VAR 0 2
16174: PUSH
16175: LD_INT 3
16177: MINUS
16178: PUSH
16179: LD_INT 2
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: LIST
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; 4 :
16194: GO 16475
16196: LD_INT 4
16198: DOUBLE
16199: EQUAL
16200: IFTRUE 16204
16202: GO 16337
16204: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
<<<<<<< HEAD
15766: NOP4
15770: PUSH
15771: NOP4
15775: PUSH
15776: NOP4
15780: PUSH
15781: LD_INT 4
15783: PLUS
15784: PUSH
15785: LD_INT 0
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: LIST
15792: PUSH
15793: NOP4
15797: PUSH
15798: LD_INT 3
15800: PLUS
15801: PUSH
15802: NOP4
15806: PUSH
15807: LD_INT 3
15809: PLUS
15810: PUSH
15811: LD_INT 5
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: LIST
15818: PUSH
15819: NOP4
15823: PUSH
15824: LD_INT 3
15826: PLUS
15827: PUSH
15828: NOP4
15832: PUSH
15833: LD_INT 4
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: LIST
15840: PUSH
15841: NOP4
15845: PUSH
15846: NOP4
15850: PUSH
15851: LD_INT 3
15853: MINUS
15854: PUSH
15855: LD_INT 3
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: LIST
15862: PUSH
15863: NOP4
15867: PUSH
15868: LD_INT 4
15870: MINUS
15871: PUSH
15872: NOP4
15876: PUSH
15877: LD_INT 4
15879: MINUS
15880: PUSH
15881: LD_INT 2
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: LIST
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: ST_TO_ADDR
=======
16205: LD_ADDR_VAR 0 5
16209: PUSH
16210: LD_VAR 0 1
16214: PUSH
16215: LD_VAR 0 2
16219: PUSH
16220: LD_INT 4
16222: PLUS
16223: PUSH
16224: LD_INT 0
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: LIST
16231: PUSH
16232: LD_VAR 0 1
16236: PUSH
16237: LD_INT 3
16239: PLUS
16240: PUSH
16241: LD_VAR 0 2
16245: PUSH
16246: LD_INT 3
16248: PLUS
16249: PUSH
16250: LD_INT 5
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: LIST
16257: PUSH
16258: LD_VAR 0 1
16262: PUSH
16263: LD_INT 3
16265: PLUS
16266: PUSH
16267: LD_VAR 0 2
16271: PUSH
16272: LD_INT 4
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: LIST
16279: PUSH
16280: LD_VAR 0 1
16284: PUSH
16285: LD_VAR 0 2
16289: PUSH
16290: LD_INT 3
16292: MINUS
16293: PUSH
16294: LD_INT 3
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: LIST
16301: PUSH
16302: LD_VAR 0 1
16306: PUSH
16307: LD_INT 4
16309: MINUS
16310: PUSH
16311: LD_VAR 0 2
16315: PUSH
16316: LD_INT 4
16318: MINUS
16319: PUSH
16320: LD_INT 2
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: LIST
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; 5 :
16335: GO 16475
16337: LD_INT 5
16339: DOUBLE
16340: EQUAL
16341: IFTRUE 16345
16343: GO 16474
16345: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
<<<<<<< HEAD
15907: NOP4
15911: PUSH
15912: NOP4
15916: PUSH
15917: LD_INT 4
15919: MINUS
15920: PUSH
15921: NOP4
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: LIST
15933: PUSH
15934: NOP4
15938: PUSH
15939: NOP4
15943: PUSH
15944: LD_INT 4
15946: MINUS
15947: PUSH
15948: LD_INT 3
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: LIST
15955: PUSH
15956: NOP4
15960: PUSH
15961: LD_INT 4
15963: PLUS
15964: PUSH
15965: NOP4
15969: PUSH
15970: LD_INT 4
15972: PLUS
15973: PUSH
15974: LD_INT 5
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: LIST
15981: PUSH
15982: NOP4
15986: PUSH
15987: LD_INT 3
15989: PLUS
15990: PUSH
15991: NOP4
15995: PUSH
15996: LD_INT 4
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: PUSH
16004: NOP4
16008: PUSH
16009: NOP4
16013: PUSH
16014: LD_INT 3
16016: PLUS
16017: PUSH
16018: LD_INT 0
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: LIST
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: ST_TO_ADDR
=======
16346: LD_ADDR_VAR 0 5
16350: PUSH
16351: LD_VAR 0 1
16355: PUSH
16356: LD_INT 4
16358: MINUS
16359: PUSH
16360: LD_VAR 0 2
16364: PUSH
16365: LD_INT 1
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: LIST
16372: PUSH
16373: LD_VAR 0 1
16377: PUSH
16378: LD_VAR 0 2
16382: PUSH
16383: LD_INT 4
16385: MINUS
16386: PUSH
16387: LD_INT 3
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: LIST
16394: PUSH
16395: LD_VAR 0 1
16399: PUSH
16400: LD_INT 4
16402: PLUS
16403: PUSH
16404: LD_VAR 0 2
16408: PUSH
16409: LD_INT 4
16411: PLUS
16412: PUSH
16413: LD_INT 5
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: PUSH
16421: LD_VAR 0 1
16425: PUSH
16426: LD_INT 3
16428: PLUS
16429: PUSH
16430: LD_VAR 0 2
16434: PUSH
16435: LD_INT 4
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: LIST
16442: PUSH
16443: LD_VAR 0 1
16447: PUSH
16448: LD_VAR 0 2
16452: PUSH
16453: LD_INT 3
16455: PLUS
16456: PUSH
16457: LD_INT 0
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ;
16472: GO 16475
16474: POP
// result := list ;
<<<<<<< HEAD
16036: NOP4
16040: PUSH
16041: NOP4
16045: ST_TO_ADDR
=======
16475: LD_ADDR_VAR 0 4
16479: PUSH
16480: LD_VAR 0 5
16484: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end_of_file
16485: LD_VAR 0 4
16489: RET
// every 1 do var i ;
16490: GO 16492
16492: DISABLE
16493: LD_INT 0
16495: PPUSH
// begin InGameOn ;
<<<<<<< HEAD
16057: NOP4
// CenterOnXY ( 53 , 40 ) ;
16061: LD_INT 53
16063: PPUSH
16064: LD_INT 40
16066: PPUSH
16067: NOP4
// wait ( 0 0$5 ) ;
16071: LD_INT 175
16073: PPUSH
16074: NOP4
// if gammaCommander = 1 then
16078: NOP4
16082: PUSH
16083: LD_INT 1
16085: EQUAL
16086: IFFALSE 16097
// CenterNowOnUnits ( Donaldson ) ;
16088: NOP4
16092: PPUSH
16093: NOP4
// if gammaCommander = 2 then
16097: NOP4
16101: PUSH
16102: LD_INT 2
16104: EQUAL
16105: IFFALSE 16116
// CenterNowOnUnits ( Brown ) ;
16107: NOP4
16111: PPUSH
16112: NOP4
// if gammaCommander = 3 then
16116: NOP4
16120: PUSH
16121: LD_INT 3
16123: EQUAL
16124: IFFALSE 16135
// CenterNowOnUnits ( Houten ) ;
16126: NOP4
16130: PPUSH
16131: NOP4
// if gammaCommander = 1 then
16135: NOP4
16139: PUSH
16140: LD_INT 1
16142: EQUAL
16143: IFFALSE 16157
// Say ( Donaldson , D1-Don-1 ) ;
16145: NOP4
16149: PPUSH
16150: LD_STRING D1-Don-1
16152: PPUSH
16153: NOP4
// if gammaCommander = 2 then
16157: NOP4
16161: PUSH
16162: LD_INT 2
16164: EQUAL
16165: IFFALSE 16179
// Say ( Brown , D1-Brown-1 ) ;
16167: NOP4
16171: PPUSH
16172: LD_STRING D1-Brown-1
16174: PPUSH
16175: NOP4
// if gammaCommander = 3 then
16179: NOP4
16183: PUSH
16184: LD_INT 3
16186: EQUAL
16187: IFFALSE 16201
// Say ( Houten , D1-VanH-1 ) ;
16189: NOP4
16193: PPUSH
16194: LD_STRING D1-VanH-1
16196: PPUSH
16197: NOP4
// SayRadio ( Harisson , D1-Har-1 ) ;
16201: NOP4
16205: PPUSH
16206: LD_STRING D1-Har-1
16208: PPUSH
16209: NOP4
// CenterOnXY ( 53 , 40 ) ;
16213: LD_INT 53
16215: PPUSH
16216: LD_INT 40
16218: PPUSH
16219: NOP4
// if gammaCommander = 1 then
16223: NOP4
16227: PUSH
16228: LD_INT 1
16230: EQUAL
16231: IFFALSE 16245
// Say ( Donaldson , D1-Don-2 ) ;
16233: NOP4
16237: PPUSH
16238: LD_STRING D1-Don-2
16240: PPUSH
16241: NOP4
// if gammaCommander = 2 then
16245: NOP4
16249: PUSH
16250: LD_INT 2
16252: EQUAL
16253: IFFALSE 16267
// Say ( Brown , D1-Brown-2 ) ;
16255: NOP4
16259: PPUSH
16260: LD_STRING D1-Brown-2
16262: PPUSH
16263: NOP4
// if gammaCommander = 3 then
16267: NOP4
16271: PUSH
16272: LD_INT 3
16274: EQUAL
16275: IFFALSE 16289
// Say ( Houten , D1-VanH-2 ) ;
16277: NOP4
16281: PPUSH
16282: LD_STRING D1-VanH-2
16284: PPUSH
16285: NOP4
// SayRadio ( Harisson , D1-Har-2 ) ;
16289: NOP4
16293: PPUSH
16294: LD_STRING D1-Har-2
16296: PPUSH
16297: NOP4
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
16301: LD_INT 22
16303: PUSH
16304: LD_INT 1
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 33
16313: PUSH
16314: LD_INT 2
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 61
16323: PUSH
16324: EMPTY
16325: LIST
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: LIST
16331: PPUSH
16332: NOP4
16336: IFFALSE 16401
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
16338: NOP4
16342: PUSH
16343: LD_INT 22
16345: PUSH
16346: LD_INT 1
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 33
16355: PUSH
16356: LD_INT 2
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 61
16365: PUSH
16366: EMPTY
16367: LIST
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: LIST
16373: PPUSH
16374: NOP4
16378: PUSH
16379: FOR_IN
16380: IFFALSE 16399
// ComAgressiveMove ( i , 70 , 41 ) ;
16382: NOP4
16386: PPUSH
16387: LD_INT 70
16389: PPUSH
16390: LD_INT 41
16392: PPUSH
16393: NOP4
16397: GO 16379
16399: POP
16400: POP
// repeat wait ( 0 0$1 ) ;
16401: LD_INT 35
16403: PPUSH
16404: NOP4
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
16408: NOP4
16412: PUSH
16413: LD_INT 22
16415: PUSH
16416: LD_INT 6
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: EMPTY
16424: LIST
16425: PPUSH
16426: NOP4
16430: PUSH
16431: FOR_IN
16432: IFFALSE 16451
// ComAgressiveMove ( i , 54 , 20 ) ;
16434: NOP4
16438: PPUSH
16439: LD_INT 54
16441: PPUSH
16442: LD_INT 20
16444: PPUSH
16445: NOP4
16449: GO 16431
16451: POP
16452: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
16453: NOP4
16457: PUSH
16458: LD_INT 22
16460: PUSH
16461: LD_INT 1
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: LD_INT 25
16470: PUSH
16471: LD_INT 1
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: PUSH
16478: LD_INT 3
16480: PUSH
16481: LD_INT 54
16483: PUSH
16484: EMPTY
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: LIST
16495: PPUSH
16496: NOP4
16500: PUSH
16501: FOR_IN
16502: IFFALSE 16536
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
16504: NOP4
16508: PPUSH
16509: LD_INT 70
16511: PPUSH
16512: LD_INT 41
16514: PPUSH
16515: NOP4
// AddComAgressiveMove ( i , 46 , 39 ) ;
16519: NOP4
16523: PPUSH
16524: LD_INT 46
16526: PPUSH
16527: LD_INT 39
16529: PPUSH
16530: NOP4
=======
16496: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
16500: LD_INT 53
16502: PPUSH
16503: LD_INT 40
16505: PPUSH
16506: CALL_OW 84
// wait ( 0 0$5 ) ;
16510: LD_INT 175
16512: PPUSH
16513: CALL_OW 67
// if gammaCommander = 1 then
16517: LD_EXP 12
16521: PUSH
16522: LD_INT 1
16524: EQUAL
16525: IFFALSE 16536
// CenterNowOnUnits ( Donaldson ) ;
16527: LD_EXP 3
16531: PPUSH
16532: CALL_OW 87
// if gammaCommander = 2 then
16536: LD_EXP 12
16540: PUSH
16541: LD_INT 2
16543: EQUAL
16544: IFFALSE 16555
// CenterNowOnUnits ( Brown ) ;
16546: LD_EXP 2
16550: PPUSH
16551: CALL_OW 87
// if gammaCommander = 3 then
16555: LD_EXP 12
16559: PUSH
16560: LD_INT 3
16562: EQUAL
16563: IFFALSE 16574
// CenterNowOnUnits ( Houten ) ;
16565: LD_EXP 13
16569: PPUSH
16570: CALL_OW 87
// if gammaCommander = 1 then
16574: LD_EXP 12
16578: PUSH
16579: LD_INT 1
16581: EQUAL
16582: IFFALSE 16596
// Say ( Donaldson , D1-Don-1 ) ;
16584: LD_EXP 3
16588: PPUSH
16589: LD_STRING D1-Don-1
16591: PPUSH
16592: CALL_OW 88
// if gammaCommander = 2 then
16596: LD_EXP 12
16600: PUSH
16601: LD_INT 2
16603: EQUAL
16604: IFFALSE 16618
// Say ( Brown , D1-Brown-1 ) ;
16606: LD_EXP 2
16610: PPUSH
16611: LD_STRING D1-Brown-1
16613: PPUSH
16614: CALL_OW 88
// if gammaCommander = 3 then
16618: LD_EXP 12
16622: PUSH
16623: LD_INT 3
16625: EQUAL
16626: IFFALSE 16640
// Say ( Houten , D1-VanH-1 ) ;
16628: LD_EXP 13
16632: PPUSH
16633: LD_STRING D1-VanH-1
16635: PPUSH
16636: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
16640: LD_EXP 22
16644: PPUSH
16645: LD_STRING D1-Har-1
16647: PPUSH
16648: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
16652: LD_INT 53
16654: PPUSH
16655: LD_INT 40
16657: PPUSH
16658: CALL_OW 84
// if gammaCommander = 1 then
16662: LD_EXP 12
16666: PUSH
16667: LD_INT 1
16669: EQUAL
16670: IFFALSE 16684
// Say ( Donaldson , D1-Don-2 ) ;
16672: LD_EXP 3
16676: PPUSH
16677: LD_STRING D1-Don-2
16679: PPUSH
16680: CALL_OW 88
// if gammaCommander = 2 then
16684: LD_EXP 12
16688: PUSH
16689: LD_INT 2
16691: EQUAL
16692: IFFALSE 16706
// Say ( Brown , D1-Brown-2 ) ;
16694: LD_EXP 2
16698: PPUSH
16699: LD_STRING D1-Brown-2
16701: PPUSH
16702: CALL_OW 88
// if gammaCommander = 3 then
16706: LD_EXP 12
16710: PUSH
16711: LD_INT 3
16713: EQUAL
16714: IFFALSE 16728
// Say ( Houten , D1-VanH-2 ) ;
16716: LD_EXP 13
16720: PPUSH
16721: LD_STRING D1-VanH-2
16723: PPUSH
16724: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
16728: LD_EXP 22
16732: PPUSH
16733: LD_STRING D1-Har-2
16735: PPUSH
16736: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
16740: LD_INT 22
16742: PUSH
16743: LD_INT 1
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 33
16752: PUSH
16753: LD_INT 2
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 61
16762: PUSH
16763: EMPTY
16764: LIST
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: LIST
16770: PPUSH
16771: CALL_OW 69
16775: IFFALSE 16840
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
16777: LD_ADDR_VAR 0 1
16781: PUSH
16782: LD_INT 22
16784: PUSH
16785: LD_INT 1
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 33
16794: PUSH
16795: LD_INT 2
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 61
16804: PUSH
16805: EMPTY
16806: LIST
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: LIST
16812: PPUSH
16813: CALL_OW 69
16817: PUSH
16818: FOR_IN
16819: IFFALSE 16838
// ComAgressiveMove ( i , 70 , 41 ) ;
16821: LD_VAR 0 1
16825: PPUSH
16826: LD_INT 70
16828: PPUSH
16829: LD_INT 41
16831: PPUSH
16832: CALL_OW 114
16836: GO 16818
16838: POP
16839: POP
// repeat wait ( 0 0$1 ) ;
16840: LD_INT 35
16842: PPUSH
16843: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
16847: LD_ADDR_VAR 0 1
16851: PUSH
16852: LD_INT 22
16854: PUSH
16855: LD_INT 6
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: EMPTY
16863: LIST
16864: PPUSH
16865: CALL_OW 69
16869: PUSH
16870: FOR_IN
16871: IFFALSE 16890
// ComAgressiveMove ( i , 54 , 20 ) ;
16873: LD_VAR 0 1
16877: PPUSH
16878: LD_INT 54
16880: PPUSH
16881: LD_INT 20
16883: PPUSH
16884: CALL_OW 114
16888: GO 16870
16890: POP
16891: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
16892: LD_ADDR_VAR 0 1
16896: PUSH
16897: LD_INT 22
16899: PUSH
16900: LD_INT 1
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 25
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 3
16919: PUSH
16920: LD_INT 54
16922: PUSH
16923: EMPTY
16924: LIST
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: LIST
16934: PPUSH
16935: CALL_OW 69
16939: PUSH
16940: FOR_IN
16941: IFFALSE 16975
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
16943: LD_VAR 0 1
16947: PPUSH
16948: LD_INT 70
16950: PPUSH
16951: LD_INT 41
16953: PPUSH
16954: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
16958: LD_VAR 0 1
16962: PPUSH
16963: LD_INT 46
16965: PPUSH
16966: LD_INT 39
16968: PPUSH
16969: CALL_OW 174
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
16973: GO 16940
16975: POP
16976: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
<<<<<<< HEAD
16538: NOP4
16542: PUSH
16543: LD_INT 22
16545: PUSH
16546: LD_INT 1
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 21
16555: PUSH
16556: LD_INT 1
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 3
16565: PUSH
16566: LD_INT 24
16568: PUSH
16569: LD_INT 500
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: LIST
16584: PPUSH
16585: NOP4
16589: PUSH
16590: FOR_IN
16591: IFFALSE 16624
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
16593: NOP4
16597: PPUSH
16598: NOP4
16602: PPUSH
16603: NOP4
16607: PPUSH
16608: NOP4
16612: PPUSH
16613: NOP4
16617: PPUSH
16618: NOP4
16622: GO 16590
16624: POP
16625: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
16626: LD_INT 22
16628: PUSH
16629: LD_INT 6
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 21
16638: PUSH
16639: LD_INT 1
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 24
16648: PUSH
16649: LD_INT 250
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: LIST
16660: PPUSH
16661: NOP4
16665: PUSH
16666: LD_INT 6
16668: LESS
16669: IFFALSE 16401
// InGameOff ;
16671: NOP4
// ChangeMissionObjectives ( M1 ) ;
16675: LD_STRING M1
16677: PPUSH
16678: NOP4
// SaveForQuickRestart ;
16682: NOP4
// startCutscene = 0 ;
16686: NOP4
16690: PUSH
16691: LD_INT 0
16693: ST_TO_ADDR
=======
16977: LD_ADDR_VAR 0 1
16981: PUSH
16982: LD_INT 22
16984: PUSH
16985: LD_INT 1
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 21
16994: PUSH
16995: LD_INT 1
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 3
17004: PUSH
17005: LD_INT 24
17007: PUSH
17008: LD_INT 500
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: LIST
17023: PPUSH
17024: CALL_OW 69
17028: PUSH
17029: FOR_IN
17030: IFFALSE 17063
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
17032: LD_VAR 0 1
17036: PPUSH
17037: LD_EXP 37
17041: PPUSH
17042: CALL_OW 250
17046: PPUSH
17047: LD_EXP 37
17051: PPUSH
17052: CALL_OW 251
17056: PPUSH
17057: CALL_OW 111
17061: GO 17029
17063: POP
17064: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
17065: LD_INT 22
17067: PUSH
17068: LD_INT 6
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 21
17077: PUSH
17078: LD_INT 1
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 24
17087: PUSH
17088: LD_INT 250
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: PPUSH
17100: CALL_OW 69
17104: PUSH
17105: LD_INT 6
17107: LESS
17108: IFFALSE 16840
// InGameOff ;
17110: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
17114: LD_STRING M1
17116: PPUSH
17117: CALL_OW 337
// SaveForQuickRestart ;
17121: CALL_OW 22
// startCutscene = 0 ;
17125: LD_ADDR_EXP 38
17129: PUSH
17130: LD_INT 0
17132: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
17133: PPOPN 1
17135: END
// every 1 1$0 do
17136: GO 17138
17138: DISABLE
// begin PrepareSupportFromDelta ;
<<<<<<< HEAD
16700: NOP4
// firstAttack = 1 ;
16704: NOP4
16708: PUSH
16709: LD_INT 1
16711: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16712: NOP4
16716: PPUSH
16717: NOP4
16721: IFFALSE 16737
// begin Say ( Gladstone , D2-Glad-1 ) ;
16723: NOP4
16727: PPUSH
16728: LD_STRING D2-Glad-1
16730: PPUSH
16731: NOP4
=======
17139: CALL 2704 0 0
// firstAttack = 1 ;
17143: LD_ADDR_EXP 33
17147: PUSH
17148: LD_INT 1
17150: ST_TO_ADDR
// if IsOk ( Gladstone ) then
17151: LD_EXP 8
17155: PPUSH
17156: CALL_OW 302
17160: IFFALSE 17176
// begin Say ( Gladstone , D2-Glad-1 ) ;
17162: LD_EXP 8
17166: PPUSH
17167: LD_STRING D2-Glad-1
17169: PPUSH
17170: CALL_OW 88
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
17174: GO 17278
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
<<<<<<< HEAD
16737: LD_INT 4
16739: PPUSH
16740: LD_INT 22
16742: PUSH
16743: LD_INT 1
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 21
16752: PUSH
16753: LD_INT 1
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 2
16762: PUSH
16763: LD_INT 25
16765: PUSH
16766: LD_INT 1
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 25
16775: PUSH
16776: LD_INT 2
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 25
16785: PUSH
16786: LD_INT 3
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 25
16795: PUSH
16796: LD_INT 4
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: PPUSH
16815: NOP4
16819: PUSH
16820: NOP4
16824: PUSH
16825: EMPTY
16826: LIST
16827: DIFF
16828: PPUSH
16829: LD_STRING D2-Sol1-1
16831: PPUSH
16832: LD_STRING D2-FSol1-1
16834: PPUSH
16835: NOP4
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
16839: NOP4
16843: PPUSH
16844: NOP4
16848: PUSH
16849: NOP4
16853: PUSH
16854: LD_INT 1
16856: EQUAL
16857: AND
16858: IFFALSE 16872
// Say ( Donaldson , D2-Don-1 ) ;
16860: NOP4
16864: PPUSH
16865: LD_STRING D2-Don-1
16867: PPUSH
16868: NOP4
// if IsOK ( Brown ) and gammaCommander = 2 then
16872: NOP4
16876: PPUSH
16877: NOP4
16881: PUSH
16882: NOP4
16886: PUSH
16887: LD_INT 2
16889: EQUAL
16890: AND
16891: IFFALSE 16905
// Say ( Brown , D2-Brown-1 ) ;
16893: NOP4
16897: PPUSH
16898: LD_STRING D2-Brown-1
16900: PPUSH
16901: NOP4
// if IsOK ( Houten ) and gammaCommander = 3 then
16905: NOP4
16909: PPUSH
16910: NOP4
16914: PUSH
16915: NOP4
16919: PUSH
16920: LD_INT 3
16922: EQUAL
16923: AND
16924: IFFALSE 16938
// Say ( Houten , D2-VanH-1 ) ;
16926: NOP4
16930: PPUSH
16931: LD_STRING D2-VanH-1
16933: PPUSH
16934: NOP4
=======
17176: LD_INT 4
17178: PPUSH
17179: LD_INT 22
17181: PUSH
17182: LD_INT 1
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 21
17191: PUSH
17192: LD_INT 1
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 2
17201: PUSH
17202: LD_INT 25
17204: PUSH
17205: LD_INT 1
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 25
17214: PUSH
17215: LD_INT 2
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 25
17224: PUSH
17225: LD_INT 3
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 25
17234: PUSH
17235: LD_INT 4
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: LIST
17253: PPUSH
17254: CALL_OW 70
17258: PUSH
17259: LD_EXP 15
17263: PUSH
17264: EMPTY
17265: LIST
17266: DIFF
17267: PPUSH
17268: LD_STRING D2-Sol1-1
17270: PPUSH
17271: LD_STRING D2-FSol1-1
17273: PPUSH
17274: CALL 6271 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
17278: LD_EXP 3
17282: PPUSH
17283: CALL_OW 302
17287: PUSH
17288: LD_EXP 12
17292: PUSH
17293: LD_INT 1
17295: EQUAL
17296: AND
17297: IFFALSE 17311
// Say ( Donaldson , D2-Don-1 ) ;
17299: LD_EXP 3
17303: PPUSH
17304: LD_STRING D2-Don-1
17306: PPUSH
17307: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
17311: LD_EXP 2
17315: PPUSH
17316: CALL_OW 302
17320: PUSH
17321: LD_EXP 12
17325: PUSH
17326: LD_INT 2
17328: EQUAL
17329: AND
17330: IFFALSE 17344
// Say ( Brown , D2-Brown-1 ) ;
17332: LD_EXP 2
17336: PPUSH
17337: LD_STRING D2-Brown-1
17339: PPUSH
17340: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
17344: LD_EXP 13
17348: PPUSH
17349: CALL_OW 302
17353: PUSH
17354: LD_EXP 12
17358: PUSH
17359: LD_INT 3
17361: EQUAL
17362: AND
17363: IFFALSE 17377
// Say ( Houten , D2-VanH-1 ) ;
17365: LD_EXP 13
17369: PPUSH
17370: LD_STRING D2-VanH-1
17372: PPUSH
17373: CALL_OW 88
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
17377: END
// every 0 0$1 do
17378: GO 17380
17380: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) div 3 ) ;
<<<<<<< HEAD
16942: LD_STRING 07_time
16944: PPUSH
16945: LD_INT 0
16947: PPUSH
16948: NOP4
16952: PUSH
16953: LD_INT 3
16955: DIV
16956: PPUSH
16957: NOP4
// PrepareMacmillanSquad ;
16961: NOP4
// CenterNowOnUnits ( JMM ) ;
16965: NOP4
16969: PPUSH
16970: NOP4
// Say ( JMM , D3-JMM-1 ) ;
16974: NOP4
16978: PPUSH
16979: LD_STRING D3-JMM-1
16981: PPUSH
16982: NOP4
// JMMArrive = 1 ;
16986: NOP4
16990: PUSH
16991: LD_INT 1
16993: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16994: NOP4
16998: PPUSH
16999: NOP4
17003: PUSH
17004: NOP4
17008: PUSH
17009: LD_INT 1
17011: EQUAL
17012: AND
17013: IFFALSE 17029
// begin Say ( Donaldson , D3-Don-1 ) ;
17015: NOP4
17019: PPUSH
17020: LD_STRING D3-Don-1
17022: PPUSH
17023: NOP4
=======
17381: LD_STRING 07_time
17383: PPUSH
17384: LD_INT 0
17386: PPUSH
17387: CALL_OW 30
17391: PUSH
17392: LD_INT 3
17394: DIV
17395: PPUSH
17396: CALL_OW 67
// PrepareMacmillanSquad ;
17400: CALL 3319 0 0
// CenterNowOnUnits ( JMM ) ;
17404: LD_EXP 1
17408: PPUSH
17409: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
17413: LD_EXP 1
17417: PPUSH
17418: LD_STRING D3-JMM-1
17420: PPUSH
17421: CALL_OW 88
// JMMArrive = 1 ;
17425: LD_ADDR_EXP 39
17429: PUSH
17430: LD_INT 1
17432: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
17433: LD_EXP 3
17437: PPUSH
17438: CALL_OW 302
17442: PUSH
17443: LD_EXP 12
17447: PUSH
17448: LD_INT 1
17450: EQUAL
17451: AND
17452: IFFALSE 17468
// begin Say ( Donaldson , D3-Don-1 ) ;
17454: LD_EXP 3
17458: PPUSH
17459: LD_STRING D3-Don-1
17461: PPUSH
17462: CALL_OW 88
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
17466: GO 17520
// begin if gammaCommander = 1 then
<<<<<<< HEAD
17029: NOP4
17033: PUSH
17034: LD_INT 1
17036: EQUAL
17037: IFFALSE 17081
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
17039: NOP4
17043: PPUSH
17044: LD_INT 26
17046: PUSH
17047: LD_INT 1
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PPUSH
17054: NOP4
17058: PPUSH
17059: LD_STRING D3-Sol1-1
17061: PPUSH
17062: LD_STRING D3-Sol1-1
17064: PPUSH
17065: NOP4
// Say ( JMM , D3-JMM-2 ) ;
17069: NOP4
17073: PPUSH
17074: LD_STRING D3-JMM-2
17076: PPUSH
17077: NOP4
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17081: NOP4
17085: PPUSH
17086: NOP4
17090: PUSH
17091: NOP4
17095: PUSH
17096: LD_INT 2
17098: EQUAL
17099: AND
17100: IFFALSE 17116
// begin Say ( Brown , D3-Brown-1 ) ;
17102: NOP4
17106: PPUSH
17107: LD_STRING D3-Brown-1
17109: PPUSH
17110: NOP4
=======
17468: LD_EXP 12
17472: PUSH
17473: LD_INT 1
17475: EQUAL
17476: IFFALSE 17520
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
17478: LD_EXP 11
17482: PPUSH
17483: LD_INT 26
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PPUSH
17493: CALL_OW 72
17497: PPUSH
17498: LD_STRING D3-Sol1-1
17500: PPUSH
17501: LD_STRING D3-Sol1-1
17503: PPUSH
17504: CALL 6271 0 3
// Say ( JMM , D3-JMM-2 ) ;
17508: LD_EXP 1
17512: PPUSH
17513: LD_STRING D3-JMM-2
17515: PPUSH
17516: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17520: LD_EXP 2
17524: PPUSH
17525: CALL_OW 302
17529: PUSH
17530: LD_EXP 12
17534: PUSH
17535: LD_INT 2
17537: EQUAL
17538: AND
17539: IFFALSE 17555
// begin Say ( Brown , D3-Brown-1 ) ;
17541: LD_EXP 2
17545: PPUSH
17546: LD_STRING D3-Brown-1
17548: PPUSH
17549: CALL_OW 88
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
17553: GO 17607
// begin if gammaCommander = 2 then
<<<<<<< HEAD
17116: NOP4
17120: PUSH
17121: LD_INT 2
17123: EQUAL
17124: IFFALSE 17168
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
17126: NOP4
17130: PPUSH
17131: LD_INT 26
17133: PUSH
17134: LD_INT 1
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PPUSH
17141: NOP4
17145: PPUSH
17146: LD_STRING D3-Sol1-1a
17148: PPUSH
17149: LD_STRING D3-Sol1-1a
17151: PPUSH
17152: NOP4
// Say ( JMM , D3-JMM-2 ) ;
17156: NOP4
17160: PPUSH
17161: LD_STRING D3-JMM-2
17163: PPUSH
17164: NOP4
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17168: NOP4
17172: PPUSH
17173: NOP4
17177: PUSH
17178: NOP4
17182: PUSH
17183: LD_INT 3
17185: EQUAL
17186: AND
17187: IFFALSE 17203
// begin Say ( Houten , D3-VanH-1 ) ;
17189: NOP4
17193: PPUSH
17194: LD_STRING D3-VanH-1
17196: PPUSH
17197: NOP4
=======
17555: LD_EXP 12
17559: PUSH
17560: LD_INT 2
17562: EQUAL
17563: IFFALSE 17607
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
17565: LD_EXP 11
17569: PPUSH
17570: LD_INT 26
17572: PUSH
17573: LD_INT 1
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PPUSH
17580: CALL_OW 72
17584: PPUSH
17585: LD_STRING D3-Sol1-1a
17587: PPUSH
17588: LD_STRING D3-Sol1-1a
17590: PPUSH
17591: CALL 6271 0 3
// Say ( JMM , D3-JMM-2 ) ;
17595: LD_EXP 1
17599: PPUSH
17600: LD_STRING D3-JMM-2
17602: PPUSH
17603: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17607: LD_EXP 13
17611: PPUSH
17612: CALL_OW 302
17616: PUSH
17617: LD_EXP 12
17621: PUSH
17622: LD_INT 3
17624: EQUAL
17625: AND
17626: IFFALSE 17642
// begin Say ( Houten , D3-VanH-1 ) ;
17628: LD_EXP 13
17632: PPUSH
17633: LD_STRING D3-VanH-1
17635: PPUSH
17636: CALL_OW 88
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
17640: GO 17694
// begin if gammaCommander = 3 then
<<<<<<< HEAD
17203: NOP4
17207: PUSH
17208: LD_INT 3
17210: EQUAL
17211: IFFALSE 17255
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
17213: NOP4
17217: PPUSH
17218: LD_INT 26
17220: PUSH
17221: LD_INT 1
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PPUSH
17228: NOP4
17232: PPUSH
17233: LD_STRING D3-Sol1-1b
17235: PPUSH
17236: LD_STRING D3-Sol1-1b
17238: PPUSH
17239: NOP4
// Say ( JMM , D3-JMM-2 ) ;
17243: NOP4
17247: PPUSH
17248: LD_STRING D3-JMM-2
17250: PPUSH
17251: NOP4
// end ; end ; if IsOK ( Joan ) then
17255: NOP4
17259: PPUSH
17260: NOP4
17264: IFFALSE 17292
// begin Say ( Joan , D3a-Joan-1 ) ;
17266: NOP4
17270: PPUSH
17271: LD_STRING D3a-Joan-1
17273: PPUSH
17274: NOP4
// Say ( JMM , D3a-JMM-1 ) ;
17278: NOP4
17282: PPUSH
17283: LD_STRING D3a-JMM-1
17285: PPUSH
17286: NOP4
=======
17642: LD_EXP 12
17646: PUSH
17647: LD_INT 3
17649: EQUAL
17650: IFFALSE 17694
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
17652: LD_EXP 11
17656: PPUSH
17657: LD_INT 26
17659: PUSH
17660: LD_INT 1
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PPUSH
17667: CALL_OW 72
17671: PPUSH
17672: LD_STRING D3-Sol1-1b
17674: PPUSH
17675: LD_STRING D3-Sol1-1b
17677: PPUSH
17678: CALL 6271 0 3
// Say ( JMM , D3-JMM-2 ) ;
17682: LD_EXP 1
17686: PPUSH
17687: LD_STRING D3-JMM-2
17689: PPUSH
17690: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17694: LD_EXP 15
17698: PPUSH
17699: CALL_OW 302
17703: IFFALSE 17731
// begin Say ( Joan , D3a-Joan-1 ) ;
17705: LD_EXP 15
17709: PPUSH
17710: LD_STRING D3a-Joan-1
17712: PPUSH
17713: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17717: LD_EXP 1
17721: PPUSH
17722: LD_STRING D3a-JMM-1
17724: PPUSH
17725: CALL_OW 88
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
17729: GO 18184
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
<<<<<<< HEAD
17292: NOP4
17296: PPUSH
17297: NOP4
17301: PUSH
17302: NOP4
17306: PUSH
17307: LD_INT 1
17309: EQUAL
17310: AND
17311: PUSH
17312: LD_STRING 06_JoanStatus_1
17314: PPUSH
17315: LD_INT 0
17317: PPUSH
17318: NOP4
17322: PUSH
17323: LD_INT 1
17325: EQUAL
17326: AND
17327: IFFALSE 17378
// begin Say ( Donaldson , D3b-Don-1 ) ;
17329: NOP4
17333: PPUSH
17334: LD_STRING D3b-Don-1
17336: PPUSH
17337: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
17341: NOP4
17345: PPUSH
17346: LD_STRING D3b-JMM-2
17348: PPUSH
17349: NOP4
// if IsOK ( Lisa ) then
17353: NOP4
17357: PPUSH
17358: NOP4
17362: IFFALSE 17376
// Say ( Lisa , D3b-Lisa-2 ) ;
17364: NOP4
17368: PPUSH
17369: LD_STRING D3b-Lisa-2
17371: PPUSH
17372: NOP4
=======
17731: LD_EXP 3
17735: PPUSH
17736: CALL_OW 302
17740: PUSH
17741: LD_EXP 12
17745: PUSH
17746: LD_INT 1
17748: EQUAL
17749: AND
17750: PUSH
17751: LD_STRING 06_JoanStatus_1
17753: PPUSH
17754: LD_INT 0
17756: PPUSH
17757: CALL_OW 30
17761: PUSH
17762: LD_INT 1
17764: EQUAL
17765: AND
17766: IFFALSE 17817
// begin Say ( Donaldson , D3b-Don-1 ) ;
17768: LD_EXP 3
17772: PPUSH
17773: LD_STRING D3b-Don-1
17775: PPUSH
17776: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
17780: LD_EXP 1
17784: PPUSH
17785: LD_STRING D3b-JMM-2
17787: PPUSH
17788: CALL_OW 88
// if IsOK ( Lisa ) then
17792: LD_EXP 6
17796: PPUSH
17797: CALL_OW 302
17801: IFFALSE 17815
// Say ( Lisa , D3b-Lisa-2 ) ;
17803: LD_EXP 6
17807: PPUSH
17808: LD_STRING D3b-Lisa-2
17810: PPUSH
17811: CALL_OW 88
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
17815: GO 17882
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
<<<<<<< HEAD
17378: NOP4
17382: PPUSH
17383: LD_INT 26
17385: PUSH
17386: LD_INT 1
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PPUSH
17393: NOP4
17397: PPUSH
17398: LD_STRING D3b-Sol1-1
17400: PPUSH
17401: LD_STRING D3b-Sol1-1
17403: PPUSH
17404: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
17408: NOP4
17412: PPUSH
17413: LD_STRING D3b-JMM-2
17415: PPUSH
17416: NOP4
// if IsOK ( Lisa ) then
17420: NOP4
17424: PPUSH
17425: NOP4
17429: IFFALSE 17443
// Say ( Lisa , D3b-Lisa-2 ) ;
17431: NOP4
17435: PPUSH
17436: LD_STRING D3b-Lisa-2
17438: PPUSH
17439: NOP4
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17443: NOP4
17447: PPUSH
17448: NOP4
17452: PUSH
17453: NOP4
17457: PUSH
17458: LD_INT 2
17460: EQUAL
17461: AND
17462: PUSH
17463: LD_STRING 06_JoanStatus_1
17465: PPUSH
17466: LD_INT 0
17468: PPUSH
17469: NOP4
17473: PUSH
17474: LD_INT 1
17476: EQUAL
17477: AND
17478: IFFALSE 17529
// begin Say ( Brown , D3b-Brown-1 ) ;
17480: NOP4
17484: PPUSH
17485: LD_STRING D3b-Brown-1
17487: PPUSH
17488: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
17492: NOP4
17496: PPUSH
17497: LD_STRING D3b-JMM-2
17499: PPUSH
17500: NOP4
// if IsOK ( Lisa ) then
17504: NOP4
17508: PPUSH
17509: NOP4
17513: IFFALSE 17527
// Say ( Lisa , D3b-Lisa-2 ) ;
17515: NOP4
17519: PPUSH
17520: LD_STRING D3b-Lisa-2
17522: PPUSH
17523: NOP4
=======
17817: LD_EXP 11
17821: PPUSH
17822: LD_INT 26
17824: PUSH
17825: LD_INT 1
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PPUSH
17832: CALL_OW 72
17836: PPUSH
17837: LD_STRING D3b-Sol1-1
17839: PPUSH
17840: LD_STRING D3b-Sol1-1
17842: PPUSH
17843: CALL 6271 0 3
// Say ( JMM , D3b-JMM-2 ) ;
17847: LD_EXP 1
17851: PPUSH
17852: LD_STRING D3b-JMM-2
17854: PPUSH
17855: CALL_OW 88
// if IsOK ( Lisa ) then
17859: LD_EXP 6
17863: PPUSH
17864: CALL_OW 302
17868: IFFALSE 17882
// Say ( Lisa , D3b-Lisa-2 ) ;
17870: LD_EXP 6
17874: PPUSH
17875: LD_STRING D3b-Lisa-2
17877: PPUSH
17878: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17882: LD_EXP 2
17886: PPUSH
17887: CALL_OW 302
17891: PUSH
17892: LD_EXP 12
17896: PUSH
17897: LD_INT 2
17899: EQUAL
17900: AND
17901: PUSH
17902: LD_STRING 06_JoanStatus_1
17904: PPUSH
17905: LD_INT 0
17907: PPUSH
17908: CALL_OW 30
17912: PUSH
17913: LD_INT 1
17915: EQUAL
17916: AND
17917: IFFALSE 17968
// begin Say ( Brown , D3b-Brown-1 ) ;
17919: LD_EXP 2
17923: PPUSH
17924: LD_STRING D3b-Brown-1
17926: PPUSH
17927: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
17931: LD_EXP 1
17935: PPUSH
17936: LD_STRING D3b-JMM-2
17938: PPUSH
17939: CALL_OW 88
// if IsOK ( Lisa ) then
17943: LD_EXP 6
17947: PPUSH
17948: CALL_OW 302
17952: IFFALSE 17966
// Say ( Lisa , D3b-Lisa-2 ) ;
17954: LD_EXP 6
17958: PPUSH
17959: LD_STRING D3b-Lisa-2
17961: PPUSH
17962: CALL_OW 88
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
17966: GO 18033
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
<<<<<<< HEAD
17529: NOP4
17533: PPUSH
17534: LD_INT 26
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PPUSH
17544: NOP4
17548: PPUSH
17549: LD_STRING D3b-Sol1-1
17551: PPUSH
17552: LD_STRING D3b-Sol1-1
17554: PPUSH
17555: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
17559: NOP4
17563: PPUSH
17564: LD_STRING D3b-JMM-2
17566: PPUSH
17567: NOP4
// if IsOK ( Lisa ) then
17571: NOP4
17575: PPUSH
17576: NOP4
17580: IFFALSE 17594
// Say ( Lisa , D3b-Lisa-2 ) ;
17582: NOP4
17586: PPUSH
17587: LD_STRING D3b-Lisa-2
17589: PPUSH
17590: NOP4
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17594: NOP4
17598: PPUSH
17599: NOP4
17603: PUSH
17604: NOP4
17608: PUSH
17609: LD_INT 3
17611: EQUAL
17612: AND
17613: PUSH
17614: LD_STRING 06_JoanStatus_1
17616: PPUSH
17617: LD_INT 0
17619: PPUSH
17620: NOP4
17624: PUSH
17625: LD_INT 1
17627: EQUAL
17628: AND
17629: IFFALSE 17680
// begin Say ( Houten , D3b-VanH-1 ) ;
17631: NOP4
17635: PPUSH
17636: LD_STRING D3b-VanH-1
17638: PPUSH
17639: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
17643: NOP4
17647: PPUSH
17648: LD_STRING D3b-JMM-2
17650: PPUSH
17651: NOP4
// if IsOK ( Lisa ) then
17655: NOP4
17659: PPUSH
17660: NOP4
17664: IFFALSE 17678
// Say ( Lisa , D3b-Lisa-2 ) ;
17666: NOP4
17670: PPUSH
17671: LD_STRING D3b-Lisa-2
17673: PPUSH
17674: NOP4
=======
17968: LD_EXP 11
17972: PPUSH
17973: LD_INT 26
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PPUSH
17983: CALL_OW 72
17987: PPUSH
17988: LD_STRING D3b-Sol1-1
17990: PPUSH
17991: LD_STRING D3b-Sol1-1
17993: PPUSH
17994: CALL 6271 0 3
// Say ( JMM , D3b-JMM-2 ) ;
17998: LD_EXP 1
18002: PPUSH
18003: LD_STRING D3b-JMM-2
18005: PPUSH
18006: CALL_OW 88
// if IsOK ( Lisa ) then
18010: LD_EXP 6
18014: PPUSH
18015: CALL_OW 302
18019: IFFALSE 18033
// Say ( Lisa , D3b-Lisa-2 ) ;
18021: LD_EXP 6
18025: PPUSH
18026: LD_STRING D3b-Lisa-2
18028: PPUSH
18029: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
18033: LD_EXP 13
18037: PPUSH
18038: CALL_OW 302
18042: PUSH
18043: LD_EXP 12
18047: PUSH
18048: LD_INT 3
18050: EQUAL
18051: AND
18052: PUSH
18053: LD_STRING 06_JoanStatus_1
18055: PPUSH
18056: LD_INT 0
18058: PPUSH
18059: CALL_OW 30
18063: PUSH
18064: LD_INT 1
18066: EQUAL
18067: AND
18068: IFFALSE 18119
// begin Say ( Houten , D3b-VanH-1 ) ;
18070: LD_EXP 13
18074: PPUSH
18075: LD_STRING D3b-VanH-1
18077: PPUSH
18078: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
18082: LD_EXP 1
18086: PPUSH
18087: LD_STRING D3b-JMM-2
18089: PPUSH
18090: CALL_OW 88
// if IsOK ( Lisa ) then
18094: LD_EXP 6
18098: PPUSH
18099: CALL_OW 302
18103: IFFALSE 18117
// Say ( Lisa , D3b-Lisa-2 ) ;
18105: LD_EXP 6
18109: PPUSH
18110: LD_STRING D3b-Lisa-2
18112: PPUSH
18113: CALL_OW 88
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
18117: GO 18184
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
<<<<<<< HEAD
17680: NOP4
17684: PPUSH
17685: LD_INT 26
17687: PUSH
17688: LD_INT 1
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PPUSH
17695: NOP4
17699: PPUSH
17700: LD_STRING D3b-Sol1-1
17702: PPUSH
17703: LD_STRING D3b-Sol1-1
17705: PPUSH
17706: NOP4
// Say ( JMM , D3b-JMM-2 ) ;
17710: NOP4
17714: PPUSH
17715: LD_STRING D3b-JMM-2
17717: PPUSH
17718: NOP4
// if IsOK ( Lisa ) then
17722: NOP4
17726: PPUSH
17727: NOP4
17731: IFFALSE 17745
// Say ( Lisa , D3b-Lisa-2 ) ;
17733: NOP4
17737: PPUSH
17738: LD_STRING D3b-Lisa-2
17740: PPUSH
17741: NOP4
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
17745: LD_INT 22
17747: PUSH
17748: LD_INT 1
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 21
17757: PUSH
17758: LD_INT 1
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 26
17767: PUSH
17768: LD_INT 1
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 2
17777: PUSH
17778: LD_INT 25
17780: PUSH
17781: LD_INT 1
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 25
17790: PUSH
17791: LD_INT 2
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 25
17800: PUSH
17801: LD_INT 3
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 25
17810: PUSH
17811: LD_INT 4
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: PPUSH
17831: NOP4
17835: PUSH
17836: NOP4
17840: PUSH
17841: EMPTY
17842: LIST
17843: DIFF
17844: PPUSH
17845: LD_STRING DCa-Sol1-1
17847: PPUSH
17848: LD_STRING DCa-Sol1-1
17850: PPUSH
17851: NOP4
// Say ( JMM , DCb-JMM-1 ) ;
17855: NOP4
17859: PPUSH
17860: LD_STRING DCb-JMM-1
17862: PPUSH
17863: NOP4
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
17867: LD_INT 22
17869: PUSH
17870: LD_INT 1
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 21
17879: PUSH
17880: LD_INT 1
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 26
17889: PUSH
17890: LD_INT 1
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 2
17899: PUSH
17900: LD_INT 25
17902: PUSH
17903: LD_INT 1
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 25
17912: PUSH
17913: LD_INT 2
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 25
17922: PUSH
17923: LD_INT 3
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 25
17932: PUSH
17933: LD_INT 4
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: PPUSH
17953: NOP4
17957: PUSH
17958: NOP4
17962: PUSH
17963: EMPTY
17964: LIST
17965: DIFF
17966: PPUSH
17967: LD_STRING DCb-Sol1-1
17969: PPUSH
17970: LD_STRING DCb-Sol1-1
17972: PPUSH
17973: NOP4
// Say ( JMM , DCb-JMM-2 ) ;
17977: NOP4
17981: PPUSH
17982: LD_STRING DCb-JMM-2
17984: PPUSH
17985: NOP4
// secondAttack = 1 ;
17989: NOP4
17993: PUSH
17994: LD_INT 1
17996: ST_TO_ADDR
=======
18119: LD_EXP 11
18123: PPUSH
18124: LD_INT 26
18126: PUSH
18127: LD_INT 1
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 72
18138: PPUSH
18139: LD_STRING D3b-Sol1-1
18141: PPUSH
18142: LD_STRING D3b-Sol1-1
18144: PPUSH
18145: CALL 6271 0 3
// Say ( JMM , D3b-JMM-2 ) ;
18149: LD_EXP 1
18153: PPUSH
18154: LD_STRING D3b-JMM-2
18156: PPUSH
18157: CALL_OW 88
// if IsOK ( Lisa ) then
18161: LD_EXP 6
18165: PPUSH
18166: CALL_OW 302
18170: IFFALSE 18184
// Say ( Lisa , D3b-Lisa-2 ) ;
18172: LD_EXP 6
18176: PPUSH
18177: LD_STRING D3b-Lisa-2
18179: PPUSH
18180: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
18184: LD_INT 22
18186: PUSH
18187: LD_INT 1
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 21
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 26
18206: PUSH
18207: LD_INT 1
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 2
18216: PUSH
18217: LD_INT 25
18219: PUSH
18220: LD_INT 1
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 25
18229: PUSH
18230: LD_INT 2
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 25
18239: PUSH
18240: LD_INT 3
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 25
18249: PUSH
18250: LD_INT 4
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: PPUSH
18270: CALL_OW 69
18274: PUSH
18275: LD_EXP 1
18279: PUSH
18280: EMPTY
18281: LIST
18282: DIFF
18283: PPUSH
18284: LD_STRING DCa-Sol1-1
18286: PPUSH
18287: LD_STRING DCa-Sol1-1
18289: PPUSH
18290: CALL 6271 0 3
// Say ( JMM , DCb-JMM-1 ) ;
18294: LD_EXP 1
18298: PPUSH
18299: LD_STRING DCb-JMM-1
18301: PPUSH
18302: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
18306: LD_INT 22
18308: PUSH
18309: LD_INT 1
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 21
18318: PUSH
18319: LD_INT 1
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 26
18328: PUSH
18329: LD_INT 1
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 2
18338: PUSH
18339: LD_INT 25
18341: PUSH
18342: LD_INT 1
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 25
18351: PUSH
18352: LD_INT 2
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 25
18361: PUSH
18362: LD_INT 3
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 25
18371: PUSH
18372: LD_INT 4
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: PPUSH
18392: CALL_OW 69
18396: PUSH
18397: LD_EXP 1
18401: PUSH
18402: EMPTY
18403: LIST
18404: DIFF
18405: PPUSH
18406: LD_STRING DCb-Sol1-1
18408: PPUSH
18409: LD_STRING DCb-Sol1-1
18411: PPUSH
18412: CALL 6271 0 3
// Say ( JMM , DCb-JMM-2 ) ;
18416: LD_EXP 1
18420: PPUSH
18421: LD_STRING DCb-JMM-2
18423: PPUSH
18424: CALL_OW 88
// secondAttack = 1 ;
18428: LD_ADDR_EXP 34
18432: PUSH
18433: LD_INT 1
18435: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
18436: END
// every 0 0$01 trigger JMMArrive = 1 do
<<<<<<< HEAD
17998: NOP4
18002: PUSH
18003: LD_INT 1
18005: EQUAL
18006: IFFALSE 18086
18008: GO 18010
18010: DISABLE
// begin wait ( 3 3$0 ) ;
18011: LD_INT 6300
18013: PPUSH
18014: NOP4
// DialogueOn ;
18018: NOP4
// SayRadio ( Powell , D4-Pow-1 ) ;
18022: NOP4
18026: PPUSH
18027: LD_STRING D4-Pow-1
18029: PPUSH
18030: NOP4
// Say ( JMM , D4-JMM-1 ) ;
18034: NOP4
18038: PPUSH
18039: LD_STRING D4-JMM-1
18041: PPUSH
18042: NOP4
// SayRadio ( Powell , D4-Pow-2 ) ;
18046: NOP4
18050: PPUSH
18051: LD_STRING D4-Pow-2
18053: PPUSH
18054: NOP4
// Say ( JMM , D4-JMM-2 ) ;
18058: NOP4
18062: PPUSH
18063: LD_STRING D4-JMM-2
18065: PPUSH
18066: NOP4
// SayRadio ( Powell , D4-Pow-3 ) ;
18070: NOP4
18074: PPUSH
18075: LD_STRING D4-Pow-3
18077: PPUSH
18078: NOP4
// DialogueOff ;
18082: NOP4
=======
18437: LD_EXP 39
18441: PUSH
18442: LD_INT 1
18444: EQUAL
18445: IFFALSE 18525
18447: GO 18449
18449: DISABLE
// begin wait ( 3 3$0 ) ;
18450: LD_INT 6300
18452: PPUSH
18453: CALL_OW 67
// DialogueOn ;
18457: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18461: LD_EXP 23
18465: PPUSH
18466: LD_STRING D4-Pow-1
18468: PPUSH
18469: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18473: LD_EXP 1
18477: PPUSH
18478: LD_STRING D4-JMM-1
18480: PPUSH
18481: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18485: LD_EXP 23
18489: PPUSH
18490: LD_STRING D4-Pow-2
18492: PPUSH
18493: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18497: LD_EXP 1
18501: PPUSH
18502: LD_STRING D4-JMM-2
18504: PPUSH
18505: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18509: LD_EXP 23
18513: PPUSH
18514: LD_STRING D4-Pow-3
18516: PPUSH
18517: CALL_OW 94
// DialogueOff ;
18521: CALL_OW 7
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
18525: END
// every 0 0$01 trigger JMMArrive = 1 do
<<<<<<< HEAD
18087: NOP4
18091: PUSH
18092: LD_INT 1
18094: EQUAL
18095: IFFALSE 18127
18097: GO 18099
18099: DISABLE
// begin wait ( 8 8$0 ) ;
18100: LD_INT 16800
18102: PPUSH
18103: NOP4
// DialogueOn ;
18107: NOP4
// SayRadio ( Powell , D4a-Pow-1 ) ;
18111: NOP4
18115: PPUSH
18116: LD_STRING D4a-Pow-1
18118: PPUSH
18119: NOP4
// DialogueOff ;
18123: NOP4
=======
18526: LD_EXP 39
18530: PUSH
18531: LD_INT 1
18533: EQUAL
18534: IFFALSE 18566
18536: GO 18538
18538: DISABLE
// begin wait ( 8 8$0 ) ;
18539: LD_INT 16800
18541: PPUSH
18542: CALL_OW 67
// DialogueOn ;
18546: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18550: LD_EXP 23
18554: PPUSH
18555: LD_STRING D4a-Pow-1
18557: PPUSH
18558: CALL_OW 94
// DialogueOff ;
18562: CALL_OW 7
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
18566: END
// every 0 0$01 trigger JMMArrive = 1 do
<<<<<<< HEAD
18128: NOP4
18132: PUSH
18133: LD_INT 1
18135: EQUAL
18136: IFFALSE 18181
18138: GO 18140
18140: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
18141: LD_INT 21000
18143: PUSH
18144: LD_INT 25200
18146: PUSH
18147: LD_INT 31500
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: LIST
18154: PUSH
18155: NOP4
18159: ARRAY
18160: PPUSH
18161: NOP4
// PrepareSikorsky ;
18165: NOP4
// SikorskyArrive = 1 ;
18169: NOP4
18173: PUSH
18174: LD_INT 1
18176: ST_TO_ADDR
// PrepareSikorskyArmy ;
18177: NOP4
=======
18567: LD_EXP 39
18571: PUSH
18572: LD_INT 1
18574: EQUAL
18575: IFFALSE 18620
18577: GO 18579
18579: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
18580: LD_INT 21000
18582: PUSH
18583: LD_INT 25200
18585: PUSH
18586: LD_INT 31500
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: LIST
18593: PUSH
18594: LD_OWVAR 67
18598: ARRAY
18599: PPUSH
18600: CALL_OW 67
// PrepareSikorsky ;
18604: CALL 4855 0 0
// SikorskyArrive = 1 ;
18608: LD_ADDR_EXP 18
18612: PUSH
18613: LD_INT 1
18615: ST_TO_ADDR
// PrepareSikorskyArmy ;
18616: CALL 4995 0 0
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
18620: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
<<<<<<< HEAD
18182: NOP4
18186: PPUSH
18187: LD_INT 5
18189: PPUSH
18190: NOP4
18194: IFFALSE 18386
18196: GO 18198
18198: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
18199: NOP4
18203: PPUSH
18204: NOP4
// DialogueOn ;
18208: NOP4
// Say ( Sikorski , D5-Sik-1 ) ;
18212: NOP4
18216: PPUSH
18217: LD_STRING D5-Sik-1
18219: PPUSH
18220: NOP4
// Say ( JMM , D5-JMM-1a ) ;
18224: NOP4
18228: PPUSH
18229: LD_STRING D5-JMM-1a
18231: PPUSH
18232: NOP4
// Say ( Sikorski , D5-Sik-2 ) ;
18236: NOP4
18240: PPUSH
18241: LD_STRING D5-Sik-2
18243: PPUSH
18244: NOP4
// case query ( QSikorski ) of 1 :
18248: LD_STRING QSikorski
18250: PPUSH
18251: NOP4
18255: PUSH
18256: LD_INT 1
18258: DOUBLE
18259: EQUAL
18260: IFTRUE 18264
18262: GO 18287
18264: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18265: NOP4
18269: PPUSH
18270: LD_STRING D5a-Sik-1
18272: PPUSH
18273: NOP4
// SikorskyTimer = 1 1$00 ;
18277: NOP4
18281: PUSH
18282: LD_INT 2100
18284: ST_TO_ADDR
=======
18621: LD_EXP 17
18625: PPUSH
18626: LD_INT 5
18628: PPUSH
18629: CALL_OW 308
18633: IFFALSE 18825
18635: GO 18637
18637: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
18638: LD_EXP 17
18642: PPUSH
18643: CALL_OW 87
// DialogueOn ;
18647: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18651: LD_EXP 16
18655: PPUSH
18656: LD_STRING D5-Sik-1
18658: PPUSH
18659: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
18663: LD_EXP 1
18667: PPUSH
18668: LD_STRING D5-JMM-1a
18670: PPUSH
18671: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18675: LD_EXP 16
18679: PPUSH
18680: LD_STRING D5-Sik-2
18682: PPUSH
18683: CALL_OW 88
// case query ( QSikorski ) of 1 :
18687: LD_STRING QSikorski
18689: PPUSH
18690: CALL_OW 97
18694: PUSH
18695: LD_INT 1
18697: DOUBLE
18698: EQUAL
18699: IFTRUE 18703
18701: GO 18726
18703: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18704: LD_EXP 16
18708: PPUSH
18709: LD_STRING D5a-Sik-1
18711: PPUSH
18712: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
18716: LD_ADDR_EXP 19
18720: PUSH
18721: LD_INT 2100
18723: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; 2 :
18724: GO 18813
18726: LD_INT 2
18728: DOUBLE
18729: EQUAL
18730: IFTRUE 18734
18732: GO 18757
18734: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
<<<<<<< HEAD
18296: NOP4
18300: PPUSH
18301: LD_STRING D5b-Sik-1
18303: PPUSH
18304: NOP4
// SikorskyTimer = 5 5$00 ;
18308: NOP4
18312: PUSH
18313: LD_INT 10500
18315: ST_TO_ADDR
=======
18735: LD_EXP 16
18739: PPUSH
18740: LD_STRING D5b-Sik-1
18742: PPUSH
18743: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
18747: LD_ADDR_EXP 19
18751: PUSH
18752: LD_INT 10500
18754: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; 3 :
18755: GO 18813
18757: LD_INT 3
18759: DOUBLE
18760: EQUAL
18761: IFTRUE 18765
18763: GO 18812
18765: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
<<<<<<< HEAD
18327: NOP4
18331: PPUSH
18332: LD_STRING D5c-Sik-1
18334: PPUSH
18335: NOP4
// Say ( JMM , D5c-JMM-1 ) ;
18339: NOP4
18343: PPUSH
18344: LD_STRING D5c-JMM-1
18346: PPUSH
18347: NOP4
// Say ( Sikorski , D5c-Sik-2 ) ;
18351: NOP4
18355: PPUSH
18356: LD_STRING D5c-Sik-2
18358: PPUSH
18359: NOP4
// SikorskyTimer = 5 5$00 ;
18363: NOP4
18367: PUSH
18368: LD_INT 10500
18370: ST_TO_ADDR
=======
18766: LD_EXP 16
18770: PPUSH
18771: LD_STRING D5c-Sik-1
18773: PPUSH
18774: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18778: LD_EXP 1
18782: PPUSH
18783: LD_STRING D5c-JMM-1
18785: PPUSH
18786: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18790: LD_EXP 16
18794: PPUSH
18795: LD_STRING D5c-Sik-2
18797: PPUSH
18798: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
18802: LD_ADDR_EXP 19
18806: PUSH
18807: LD_INT 10500
18809: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ;
18810: GO 18813
18812: POP
// DialogueOff ;
<<<<<<< HEAD
18374: NOP4
// timerStatus = 1 ;
18378: NOP4
18382: PUSH
18383: LD_INT 1
18385: ST_TO_ADDR
=======
18813: CALL_OW 7
// timerStatus = 1 ;
18817: LD_ADDR_EXP 35
18821: PUSH
18822: LD_INT 1
18824: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
18825: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
<<<<<<< HEAD
18387: NOP4
18391: PUSH
18392: LD_INT 35
18394: LESS
18395: IFFALSE 18443
18397: GO 18399
18399: DISABLE
// begin timerStatus = 0 ;
18400: NOP4
18404: PUSH
18405: LD_INT 0
18407: ST_TO_ADDR
// DialogueOn ;
18408: NOP4
// Say ( Sikorski , D6-Sik-1 ) ;
18412: NOP4
18416: PPUSH
18417: LD_STRING D6-Sik-1
18419: PPUSH
18420: NOP4
// DialogueOff ;
18424: NOP4
// SikorskyAI = 1 ;
18428: NOP4
18432: PUSH
18433: LD_INT 1
18435: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
18436: LD_STRING M2
18438: PPUSH
18439: NOP4
=======
18826: LD_EXP 19
18830: PUSH
18831: LD_INT 35
18833: LESS
18834: IFFALSE 18882
18836: GO 18838
18838: DISABLE
// begin timerStatus = 0 ;
18839: LD_ADDR_EXP 35
18843: PUSH
18844: LD_INT 0
18846: ST_TO_ADDR
// DialogueOn ;
18847: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18851: LD_EXP 16
18855: PPUSH
18856: LD_STRING D6-Sik-1
18858: PPUSH
18859: CALL_OW 88
// DialogueOff ;
18863: CALL_OW 7
// SikorskyAI = 1 ;
18867: LD_ADDR_EXP 20
18871: PUSH
18872: LD_INT 1
18874: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
18875: LD_STRING M2
18877: PPUSH
18878: CALL_OW 337
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ;
18882: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
<<<<<<< HEAD
18444: NOP4
18448: PPUSH
18449: LD_INT 18
18451: PPUSH
18452: NOP4
18456: IFFALSE 18540
18458: GO 18460
18460: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18461: NOP4
18465: PPUSH
18466: LD_STRING D7-Sik-1
18468: PPUSH
18469: NOP4
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
18473: NOP4
18477: PPUSH
18478: LD_INT 24
18480: PPUSH
18481: NOP4
18485: PUSH
18486: NOP4
18490: PPUSH
18491: NOP4
18495: OR
18496: IFFALSE 18520
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18498: NOP4
18502: PPUSH
18503: LD_STRING D7a-Sik-1
18505: PPUSH
18506: NOP4
// SikorskyStatus = 1 ;
18510: NOP4
18514: PUSH
18515: LD_INT 1
18517: ST_TO_ADDR
=======
18883: LD_EXP 17
18887: PPUSH
18888: LD_INT 18
18890: PPUSH
18891: CALL_OW 308
18895: IFFALSE 18979
18897: GO 18899
18899: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18900: LD_EXP 16
18904: PPUSH
18905: LD_STRING D7-Sik-1
18907: PPUSH
18908: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
18912: LD_EXP 1
18916: PPUSH
18917: LD_INT 24
18919: PPUSH
18920: CALL_OW 308
18924: PUSH
18925: LD_EXP 1
18929: PPUSH
18930: CALL_OW 310
18934: OR
18935: IFFALSE 18959
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18937: LD_EXP 16
18941: PPUSH
18942: LD_STRING D7a-Sik-1
18944: PPUSH
18945: CALL_OW 88
// SikorskyStatus = 1 ;
18949: LD_ADDR_EXP 21
18953: PUSH
18954: LD_INT 1
18956: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end else
18957: GO 18979
// begin Say ( Sikorski , D7b-Sik-1 ) ;
<<<<<<< HEAD
18520: NOP4
18524: PPUSH
18525: LD_STRING D7b-Sik-1
18527: PPUSH
18528: NOP4
// SikorskyStatus = 2 ;
18532: NOP4
18536: PUSH
18537: LD_INT 2
18539: ST_TO_ADDR
=======
18959: LD_EXP 16
18963: PPUSH
18964: LD_STRING D7b-Sik-1
18966: PPUSH
18967: CALL_OW 88
// SikorskyStatus = 2 ;
18971: LD_ADDR_EXP 21
18975: PUSH
18976: LD_INT 2
18978: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ;
18979: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
<<<<<<< HEAD
18541: NOP4
18545: PUSH
18546: LD_INT 1
18548: EQUAL
18549: IFFALSE 18658
18551: GO 18553
18553: DISABLE
18554: LD_INT 0
18556: PPUSH
=======
18980: LD_EXP 36
18984: PUSH
18985: LD_INT 1
18987: EQUAL
18988: IFFALSE 19097
18990: GO 18992
18992: DISABLE
18993: LD_INT 0
18995: PPUSH
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// begin enable ;
18996: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
<<<<<<< HEAD
18558: NOP4
18562: PUSH
18563: LD_INT 22
18565: PUSH
18566: LD_INT 3
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PPUSH
18573: NOP4
18577: PUSH
18578: FOR_IN
18579: IFFALSE 18606
// if IsInArea ( i , RussianEscape ) then
18581: NOP4
18585: PPUSH
18586: LD_INT 22
18588: PPUSH
18589: NOP4
18593: IFFALSE 18604
// RemoveUnit ( i ) ;
18595: NOP4
18599: PPUSH
18600: NOP4
18604: GO 18578
18606: POP
18607: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
18608: NOP4
18612: PUSH
18613: LD_INT 22
18615: PUSH
18616: LD_INT 6
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PPUSH
18623: NOP4
18627: PUSH
18628: FOR_IN
18629: IFFALSE 18656
// if IsInArea ( i , RussianEscape ) then
18631: NOP4
18635: PPUSH
18636: LD_INT 22
18638: PPUSH
18639: NOP4
18643: IFFALSE 18654
// RemoveUnit ( i ) ;
18645: NOP4
18649: PPUSH
18650: NOP4
18654: GO 18628
18656: POP
18657: POP
=======
18997: LD_ADDR_VAR 0 1
19001: PUSH
19002: LD_INT 22
19004: PUSH
19005: LD_INT 3
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PPUSH
19012: CALL_OW 69
19016: PUSH
19017: FOR_IN
19018: IFFALSE 19045
// if IsInArea ( i , RussianEscape ) then
19020: LD_VAR 0 1
19024: PPUSH
19025: LD_INT 22
19027: PPUSH
19028: CALL_OW 308
19032: IFFALSE 19043
// RemoveUnit ( i ) ;
19034: LD_VAR 0 1
19038: PPUSH
19039: CALL_OW 64
19043: GO 19017
19045: POP
19046: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19047: LD_ADDR_VAR 0 1
19051: PUSH
19052: LD_INT 22
19054: PUSH
19055: LD_INT 6
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PPUSH
19062: CALL_OW 69
19066: PUSH
19067: FOR_IN
19068: IFFALSE 19095
// if IsInArea ( i , RussianEscape ) then
19070: LD_VAR 0 1
19074: PPUSH
19075: LD_INT 22
19077: PPUSH
19078: CALL_OW 308
19082: IFFALSE 19093
// RemoveUnit ( i ) ;
19084: LD_VAR 0 1
19088: PPUSH
19089: CALL_OW 64
19093: GO 19067
19095: POP
19096: POP
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end_of_file
19097: PPOPN 1
19099: END
// on BuildingComplete ( building ) do var tmp , un ;
19100: LD_INT 0
19102: PPUSH
19103: PPUSH
// begin if GetSide ( building ) = 3 then
<<<<<<< HEAD
18665: NOP4
18669: PPUSH
18670: NOP4
18674: PUSH
18675: LD_INT 3
18677: EQUAL
18678: IFFALSE 19165
// begin if GetBType ( building ) = b_depot then
18680: NOP4
18684: PPUSH
18685: NOP4
18689: PUSH
18690: LD_INT 0
18692: EQUAL
18693: IFFALSE 18761
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
18695: NOP4
18699: PPUSH
18700: NOP4
18704: PPUSH
18705: LD_INT 1
18707: PPUSH
18708: LD_INT 5000
18710: PPUSH
18711: NOP4
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
18715: NOP4
18719: PPUSH
18720: NOP4
18724: PPUSH
18725: LD_INT 2
18727: PPUSH
18728: LD_INT 5000
18730: PPUSH
18731: NOP4
// SetBName ( building , konev ) ;
18735: NOP4
18739: PPUSH
18740: LD_STRING konev
18742: PPUSH
18743: NOP4
// ruDepot = building ;
18747: NOP4
18751: PUSH
18752: NOP4
18756: ST_TO_ADDR
// BuildRussianBase ;
18757: NOP4
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
18761: NOP4
18765: PPUSH
18766: NOP4
18770: PUSH
18771: LD_INT 0
18773: EQUAL
18774: PUSH
18775: NOP4
18779: PPUSH
18780: NOP4
18784: PUSH
18785: LD_INT 2
18787: EQUAL
18788: OR
18789: PUSH
18790: NOP4
18794: PPUSH
18795: NOP4
18799: PUSH
18800: LD_INT 4
18802: EQUAL
18803: OR
18804: IFFALSE 18815
// ComUpgrade ( building ) ;
18806: NOP4
18810: PPUSH
18811: NOP4
// if GetBType ( building ) = b_lab then
18815: NOP4
18819: PPUSH
18820: NOP4
18824: PUSH
18825: LD_INT 6
18827: EQUAL
18828: IFFALSE 18879
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18830: NOP4
18834: PPUSH
18835: LD_INT 10
18837: PPUSH
18838: NOP4
// AddComUpgradeLab ( building , b_lab_computer ) ;
18842: NOP4
18846: PPUSH
18847: LD_INT 12
18849: PPUSH
18850: NOP4
// ResAllTechs ( 3 , building , 3 ) ;
18854: LD_INT 3
18856: PPUSH
18857: NOP4
18861: PPUSH
18862: LD_INT 3
18864: PPUSH
18865: NOP4
// ruLab = building ;
18869: NOP4
18873: PUSH
18874: NOP4
18878: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
18879: NOP4
18883: PPUSH
18884: NOP4
18888: PUSH
18889: LD_INT 32
18891: EQUAL
18892: IFFALSE 19010
=======
19104: LD_VAR 0 1
19108: PPUSH
19109: CALL_OW 255
19113: PUSH
19114: LD_INT 3
19116: EQUAL
19117: IFFALSE 19604
// begin if GetBType ( building ) = b_depot then
19119: LD_VAR 0 1
19123: PPUSH
19124: CALL_OW 266
19128: PUSH
19129: LD_INT 0
19131: EQUAL
19132: IFFALSE 19200
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
19134: LD_VAR 0 1
19138: PPUSH
19139: CALL_OW 274
19143: PPUSH
19144: LD_INT 1
19146: PPUSH
19147: LD_INT 5000
19149: PPUSH
19150: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
19154: LD_VAR 0 1
19158: PPUSH
19159: CALL_OW 274
19163: PPUSH
19164: LD_INT 2
19166: PPUSH
19167: LD_INT 5000
19169: PPUSH
19170: CALL_OW 277
// SetBName ( building , konev ) ;
19174: LD_VAR 0 1
19178: PPUSH
19179: LD_STRING konev
19181: PPUSH
19182: CALL_OW 500
// ruDepot = building ;
19186: LD_ADDR_EXP 28
19190: PUSH
19191: LD_VAR 0 1
19195: ST_TO_ADDR
// BuildRussianBase ;
19196: CALL 6876 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
19200: LD_VAR 0 1
19204: PPUSH
19205: CALL_OW 266
19209: PUSH
19210: LD_INT 0
19212: EQUAL
19213: PUSH
19214: LD_VAR 0 1
19218: PPUSH
19219: CALL_OW 266
19223: PUSH
19224: LD_INT 2
19226: EQUAL
19227: OR
19228: PUSH
19229: LD_VAR 0 1
19233: PPUSH
19234: CALL_OW 266
19238: PUSH
19239: LD_INT 4
19241: EQUAL
19242: OR
19243: IFFALSE 19254
// ComUpgrade ( building ) ;
19245: LD_VAR 0 1
19249: PPUSH
19250: CALL_OW 146
// if GetBType ( building ) = b_lab then
19254: LD_VAR 0 1
19258: PPUSH
19259: CALL_OW 266
19263: PUSH
19264: LD_INT 6
19266: EQUAL
19267: IFFALSE 19318
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19269: LD_VAR 0 1
19273: PPUSH
19274: LD_INT 10
19276: PPUSH
19277: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
19281: LD_VAR 0 1
19285: PPUSH
19286: LD_INT 12
19288: PPUSH
19289: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
19293: LD_INT 3
19295: PPUSH
19296: LD_VAR 0 1
19300: PPUSH
19301: LD_INT 3
19303: PPUSH
19304: CALL 7431 0 3
// ruLab = building ;
19308: LD_ADDR_EXP 29
19312: PUSH
19313: LD_VAR 0 1
19317: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
19318: LD_VAR 0 1
19322: PPUSH
19323: CALL_OW 266
19327: PUSH
19328: LD_INT 32
19330: EQUAL
19331: IFFALSE 19449
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// begin uc_side = 3 ;
19333: LD_ADDR_OWVAR 20
19337: PUSH
19338: LD_INT 3
19340: ST_TO_ADDR
// uc_nation = 3 ;
19341: LD_ADDR_OWVAR 21
19345: PUSH
19346: LD_INT 3
19348: ST_TO_ADDR
// hc_gallery =  ;
19349: LD_ADDR_OWVAR 33
19353: PUSH
19354: LD_STRING 
19356: ST_TO_ADDR
// hc_name =  ;
19357: LD_ADDR_OWVAR 26
19361: PUSH
19362: LD_STRING 
19364: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
<<<<<<< HEAD
18926: LD_INT 0
18928: PPUSH
18929: LD_INT 1
18931: PPUSH
18932: NOP4
18936: PPUSH
18937: NOP4
18941: PPUSH
18942: NOP4
18946: PPUSH
18947: NOP4
// un = CreateHuman ;
18951: NOP4
18955: PUSH
18956: NOP4
18960: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
18961: NOP4
18965: PPUSH
18966: NOP4
18970: PPUSH
18971: NOP4
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18975: NOP4
18979: PPUSH
18980: LD_INT 43
18982: PUSH
18983: LD_INT 44
18985: PUSH
18986: LD_INT 46
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: PPUSH
18997: LD_INT 3
18999: PPUSH
19000: NOP4
19004: ARRAY
19005: PPUSH
19006: NOP4
// end ; if GetBType ( building ) = b_turret then
19010: NOP4
19014: PPUSH
19015: NOP4
19019: PUSH
19020: LD_INT 33
19022: EQUAL
19023: IFFALSE 19060
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19025: NOP4
19029: PPUSH
19030: LD_INT 43
19032: PUSH
19033: LD_INT 44
19035: PUSH
19036: LD_INT 46
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 1
19046: PPUSH
19047: LD_INT 3
19049: PPUSH
19050: NOP4
19054: ARRAY
19055: PPUSH
19056: NOP4
// if GetBType ( building ) = b_ext_computer then
19060: NOP4
19064: PPUSH
19065: NOP4
19069: PUSH
19070: LD_INT 24
19072: EQUAL
19073: IFFALSE 19083
// russianAI = 1 ;
19075: NOP4
19079: PUSH
19080: LD_INT 1
19082: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
19083: NOP4
19087: PUSH
19088: LD_INT 0
19090: GREATER
19091: IFFALSE 19165
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19093: NOP4
19097: PUSH
19098: NOP4
19102: PPUSH
19103: LD_INT 1
19105: PPUSH
19106: NOP4
19110: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19111: NOP4
19115: PUSH
19116: NOP4
19120: PPUSH
19121: LD_INT 1
19123: PPUSH
19124: NOP4
19128: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19129: NOP4
19133: PUSH
19134: NOP4
19138: PPUSH
19139: LD_INT 1
19141: PPUSH
19142: NOP4
19146: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19147: NOP4
19151: PUSH
19152: NOP4
19156: PPUSH
19157: LD_INT 1
19159: PPUSH
19160: NOP4
19164: ST_TO_ADDR
=======
19365: LD_INT 0
19367: PPUSH
19368: LD_INT 1
19370: PPUSH
19371: LD_EXP 25
19375: PPUSH
19376: LD_EXP 26
19380: PPUSH
19381: CALL_OW 12
19385: PPUSH
19386: CALL_OW 380
// un = CreateHuman ;
19390: LD_ADDR_VAR 0 3
19394: PUSH
19395: CALL_OW 44
19399: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
19400: LD_VAR 0 3
19404: PPUSH
19405: LD_VAR 0 1
19409: PPUSH
19410: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19414: LD_VAR 0 1
19418: PPUSH
19419: LD_INT 43
19421: PUSH
19422: LD_INT 44
19424: PUSH
19425: LD_INT 46
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 1
19435: PPUSH
19436: LD_INT 3
19438: PPUSH
19439: CALL_OW 12
19443: ARRAY
19444: PPUSH
19445: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
19449: LD_VAR 0 1
19453: PPUSH
19454: CALL_OW 266
19458: PUSH
19459: LD_INT 33
19461: EQUAL
19462: IFFALSE 19499
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19464: LD_VAR 0 1
19468: PPUSH
19469: LD_INT 43
19471: PUSH
19472: LD_INT 44
19474: PUSH
19475: LD_INT 46
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 1
19485: PPUSH
19486: LD_INT 3
19488: PPUSH
19489: CALL_OW 12
19493: ARRAY
19494: PPUSH
19495: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
19499: LD_VAR 0 1
19503: PPUSH
19504: CALL_OW 266
19508: PUSH
19509: LD_INT 24
19511: EQUAL
19512: IFFALSE 19522
// russianAI = 1 ;
19514: LD_ADDR_EXP 27
19518: PUSH
19519: LD_INT 1
19521: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
19522: LD_EXP 31
19526: PUSH
19527: LD_INT 0
19529: GREATER
19530: IFFALSE 19604
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19532: LD_ADDR_EXP 31
19536: PUSH
19537: LD_EXP 31
19541: PPUSH
19542: LD_INT 1
19544: PPUSH
19545: CALL_OW 3
19549: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19550: LD_ADDR_EXP 31
19554: PUSH
19555: LD_EXP 31
19559: PPUSH
19560: LD_INT 1
19562: PPUSH
19563: CALL_OW 3
19567: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19568: LD_ADDR_EXP 31
19572: PUSH
19573: LD_EXP 31
19577: PPUSH
19578: LD_INT 1
19580: PPUSH
19581: CALL_OW 3
19585: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19586: LD_ADDR_EXP 31
19590: PUSH
19591: LD_EXP 31
19595: PPUSH
19596: LD_INT 1
19598: PPUSH
19599: CALL_OW 3
19603: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ; end ;
19604: PPOPN 3
19606: END
// on UpgradeComplete ( building ) do var i ;
19607: LD_INT 0
19609: PPUSH
// begin if GetSide ( building ) = 3 then
<<<<<<< HEAD
19171: NOP4
19175: PPUSH
19176: NOP4
19180: PUSH
19181: LD_INT 3
19183: EQUAL
19184: IFFALSE 19365
// begin if GetBType ( building ) = b_factory then
19186: NOP4
19190: PPUSH
19191: NOP4
19195: PUSH
19196: LD_INT 3
19198: EQUAL
19199: IFFALSE 19266
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
19201: NOP4
19205: PUSH
19206: LD_INT 22
19208: PUSH
19209: LD_INT 3
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 25
19218: PUSH
19219: LD_INT 3
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PPUSH
19230: NOP4
19234: PUSH
19235: FOR_IN
19236: IFFALSE 19254
// ComEnterUnit ( i , building ) ;
19238: NOP4
19242: PPUSH
19243: NOP4
19247: PPUSH
19248: NOP4
19252: GO 19235
19254: POP
19255: POP
// ruFab = building ;
19256: NOP4
19260: PUSH
19261: NOP4
19265: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
19266: NOP4
19270: PPUSH
19271: NOP4
19275: PUSH
19276: LD_INT 8
19278: EQUAL
19279: IFFALSE 19336
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19281: NOP4
19285: PUSH
19286: LD_INT 22
19288: PUSH
19289: LD_INT 3
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 25
19298: PUSH
19299: LD_INT 4
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PPUSH
19310: NOP4
19314: PUSH
19315: FOR_IN
19316: IFFALSE 19334
// ComEnterUnit ( i , building ) ;
19318: NOP4
19322: PPUSH
19323: NOP4
19327: PPUSH
19328: NOP4
19332: GO 19315
19334: POP
19335: POP
// if GetBType ( building ) = b_warehouse then
19336: NOP4
19340: PPUSH
19341: NOP4
19345: PUSH
19346: LD_INT 1
19348: EQUAL
19349: IFFALSE 19365
// begin ComEnterUnit ( Borodin , building ) ;
19351: NOP4
19355: PPUSH
19356: NOP4
19360: PPUSH
19361: NOP4
=======
19610: LD_VAR 0 1
19614: PPUSH
19615: CALL_OW 255
19619: PUSH
19620: LD_INT 3
19622: EQUAL
19623: IFFALSE 19804
// begin if GetBType ( building ) = b_factory then
19625: LD_VAR 0 1
19629: PPUSH
19630: CALL_OW 266
19634: PUSH
19635: LD_INT 3
19637: EQUAL
19638: IFFALSE 19705
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
19640: LD_ADDR_VAR 0 2
19644: PUSH
19645: LD_INT 22
19647: PUSH
19648: LD_INT 3
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 25
19657: PUSH
19658: LD_INT 3
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PPUSH
19669: CALL_OW 69
19673: PUSH
19674: FOR_IN
19675: IFFALSE 19693
// ComEnterUnit ( i , building ) ;
19677: LD_VAR 0 2
19681: PPUSH
19682: LD_VAR 0 1
19686: PPUSH
19687: CALL_OW 120
19691: GO 19674
19693: POP
19694: POP
// ruFab = building ;
19695: LD_ADDR_EXP 30
19699: PUSH
19700: LD_VAR 0 1
19704: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
19705: LD_VAR 0 1
19709: PPUSH
19710: CALL_OW 266
19714: PUSH
19715: LD_INT 8
19717: EQUAL
19718: IFFALSE 19775
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19720: LD_ADDR_VAR 0 2
19724: PUSH
19725: LD_INT 22
19727: PUSH
19728: LD_INT 3
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 25
19737: PUSH
19738: LD_INT 4
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PPUSH
19749: CALL_OW 69
19753: PUSH
19754: FOR_IN
19755: IFFALSE 19773
// ComEnterUnit ( i , building ) ;
19757: LD_VAR 0 2
19761: PPUSH
19762: LD_VAR 0 1
19766: PPUSH
19767: CALL_OW 120
19771: GO 19754
19773: POP
19774: POP
// if GetBType ( building ) = b_warehouse then
19775: LD_VAR 0 1
19779: PPUSH
19780: CALL_OW 266
19784: PUSH
19785: LD_INT 1
19787: EQUAL
19788: IFFALSE 19804
// begin ComEnterUnit ( Borodin , building ) ;
19790: LD_EXP 24
19794: PPUSH
19795: LD_VAR 0 1
19799: PPUSH
19800: CALL_OW 120
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ; end ;
19804: PPOPN 2
19806: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
<<<<<<< HEAD
19368: NOP4
19372: PPUSH
19373: NOP4
19377: PUSH
19378: LD_INT 2
19380: EQUAL
19381: PUSH
19382: NOP4
19386: PPUSH
19387: NOP4
19391: PUSH
19392: LD_INT 3
19394: EQUAL
19395: AND
19396: PUSH
19397: NOP4
19401: PUSH
19402: LD_INT 0
19404: EQUAL
19405: AND
19406: IFFALSE 19524
// begin varEvent1 = 1 ;
19408: NOP4
19412: PUSH
19413: LD_INT 1
19415: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
19416: NOP4
19420: PPUSH
19421: NOP4
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
19425: LD_INT 22
19427: PUSH
19428: LD_INT 1
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 21
19437: PUSH
19438: LD_INT 1
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: LD_INT 25
19450: PUSH
19451: LD_INT 1
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 25
19460: PUSH
19461: LD_INT 2
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 25
19470: PUSH
19471: LD_INT 3
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 25
19480: PUSH
19481: LD_INT 4
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: LIST
19499: PPUSH
19500: NOP4
19504: PUSH
19505: NOP4
19509: PUSH
19510: EMPTY
19511: LIST
19512: DIFF
19513: PPUSH
19514: LD_STRING DC-Sol1-1
19516: PPUSH
19517: LD_STRING DC-FSol1-1
19519: PPUSH
19520: NOP4
=======
19807: LD_VAR 0 1
19811: PPUSH
19812: CALL_OW 247
19816: PUSH
19817: LD_INT 2
19819: EQUAL
19820: PUSH
19821: LD_VAR 0 1
19825: PPUSH
19826: CALL_OW 263
19830: PUSH
19831: LD_INT 3
19833: EQUAL
19834: AND
19835: PUSH
19836: LD_EXP 41
19840: PUSH
19841: LD_INT 0
19843: EQUAL
19844: AND
19845: IFFALSE 19963
// begin varEvent1 = 1 ;
19847: LD_ADDR_EXP 41
19851: PUSH
19852: LD_INT 1
19854: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
19855: LD_VAR 0 1
19859: PPUSH
19860: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
19864: LD_INT 22
19866: PUSH
19867: LD_INT 1
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 21
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 2
19886: PUSH
19887: LD_INT 25
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 25
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 25
19909: PUSH
19910: LD_INT 3
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 25
19919: PUSH
19920: LD_INT 4
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: LIST
19938: PPUSH
19939: CALL_OW 69
19943: PUSH
19944: LD_EXP 1
19948: PUSH
19949: EMPTY
19950: LIST
19951: DIFF
19952: PPUSH
19953: LD_STRING DC-Sol1-1
19955: PPUSH
19956: LD_STRING DC-FSol1-1
19958: PPUSH
19959: CALL 6271 0 3
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ;
19963: PPOPN 1
19965: END
// on UnitDestroyed ( unit ) do var i ;
19966: LD_INT 0
19968: PPUSH
// begin if GetSide ( unit ) = 3 then
<<<<<<< HEAD
19530: NOP4
19534: PPUSH
19535: NOP4
19539: PUSH
19540: LD_INT 3
19542: EQUAL
19543: IFFALSE 20313
// begin if GetType ( unit ) = unit_building then
19545: NOP4
19549: PPUSH
19550: NOP4
19554: PUSH
19555: LD_INT 3
19557: EQUAL
19558: IFFALSE 20250
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
19560: NOP4
19564: PPUSH
19565: NOP4
19569: PUSH
19570: LD_INT 31
19572: EQUAL
19573: PUSH
19574: NOP4
19578: PPUSH
19579: NOP4
19583: PUSH
19584: LD_INT 32
19586: EQUAL
19587: OR
19588: PUSH
19589: NOP4
19593: PPUSH
19594: NOP4
19598: PUSH
19599: LD_INT 36
19601: EQUAL
19602: OR
19603: PUSH
19604: NOP4
19608: PPUSH
19609: NOP4
19613: PUSH
19614: LD_INT 0
19616: EQUAL
19617: OR
19618: PUSH
19619: NOP4
19623: PPUSH
19624: NOP4
19628: PUSH
19629: LD_INT 24
19631: EQUAL
19632: OR
19633: PUSH
19634: NOP4
19638: PPUSH
19639: NOP4
19643: PUSH
19644: LD_INT 17
19646: EQUAL
19647: OR
19648: PUSH
19649: NOP4
19653: PPUSH
19654: NOP4
19658: PUSH
19659: LD_INT 25
19661: EQUAL
19662: OR
19663: PUSH
19664: NOP4
19668: PPUSH
19669: NOP4
19673: PUSH
19674: LD_INT 19
19676: EQUAL
19677: OR
19678: PUSH
19679: NOP4
19683: PPUSH
19684: NOP4
19688: PUSH
19689: LD_INT 20
19691: EQUAL
19692: OR
19693: PUSH
19694: NOP4
19698: PPUSH
19699: NOP4
19703: PUSH
19704: LD_INT 18
19706: EQUAL
19707: OR
19708: PUSH
19709: NOP4
19713: PPUSH
19714: NOP4
19718: PUSH
19719: LD_INT 21
19721: EQUAL
19722: OR
19723: PUSH
19724: NOP4
19728: PPUSH
19729: NOP4
19733: PUSH
19734: LD_INT 23
19736: EQUAL
19737: OR
19738: PUSH
19739: NOP4
19743: PPUSH
19744: NOP4
19748: PUSH
19749: LD_INT 16
19751: EQUAL
19752: OR
19753: PUSH
19754: NOP4
19758: PPUSH
19759: NOP4
19763: PUSH
19764: LD_INT 6
19766: EQUAL
19767: OR
19768: PUSH
19769: NOP4
19773: PPUSH
19774: NOP4
19778: PUSH
19779: LD_INT 29
19781: EQUAL
19782: OR
19783: PUSH
19784: NOP4
19788: PPUSH
19789: NOP4
19793: PUSH
19794: LD_INT 26
19796: EQUAL
19797: OR
19798: PUSH
19799: NOP4
19803: PPUSH
19804: NOP4
19808: PUSH
19809: LD_INT 30
19811: EQUAL
19812: OR
19813: PUSH
19814: NOP4
19818: PPUSH
19819: NOP4
19823: PUSH
19824: LD_INT 28
19826: EQUAL
19827: OR
19828: PUSH
19829: NOP4
19833: PPUSH
19834: NOP4
19838: PUSH
19839: LD_INT 27
19841: EQUAL
19842: OR
19843: PUSH
19844: NOP4
19848: PPUSH
19849: NOP4
19853: PUSH
19854: LD_INT 33
19856: EQUAL
19857: OR
19858: PUSH
19859: NOP4
19863: PPUSH
19864: NOP4
19868: PUSH
19869: LD_INT 2
19871: EQUAL
19872: OR
19873: PUSH
19874: NOP4
19878: PPUSH
19879: NOP4
19883: PUSH
19884: LD_INT 4
19886: EQUAL
19887: OR
19888: IFFALSE 19974
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
19890: NOP4
19894: PUSH
19895: NOP4
19899: PUSH
19900: NOP4
19904: PPUSH
19905: NOP4
19909: ADD
19910: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
19911: NOP4
19915: PUSH
19916: NOP4
19920: PUSH
19921: NOP4
19925: PPUSH
19926: NOP4
19930: ADD
19931: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
19932: NOP4
19936: PUSH
19937: NOP4
19941: PUSH
19942: NOP4
19946: PPUSH
19947: NOP4
19951: ADD
19952: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
19953: NOP4
19957: PUSH
19958: NOP4
19962: PUSH
19963: NOP4
19967: PPUSH
19968: NOP4
19972: ADD
19973: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
19974: NOP4
19978: PPUSH
19979: NOP4
19983: PUSH
19984: LD_INT 1
19986: EQUAL
19987: IFFALSE 20066
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
19989: NOP4
19993: PUSH
19994: NOP4
19998: PUSH
19999: LD_INT 0
20001: ADD
20002: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20003: NOP4
20007: PUSH
20008: NOP4
20012: PUSH
20013: NOP4
20017: PPUSH
20018: NOP4
20022: ADD
20023: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20024: NOP4
20028: PUSH
20029: NOP4
20033: PUSH
20034: NOP4
20038: PPUSH
20039: NOP4
20043: ADD
20044: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20045: NOP4
20049: PUSH
20050: NOP4
20054: PUSH
20055: NOP4
20059: PPUSH
20060: NOP4
20064: ADD
20065: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20066: NOP4
20070: PPUSH
20071: NOP4
20075: PUSH
20076: LD_INT 3
20078: EQUAL
20079: IFFALSE 20158
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20081: NOP4
20085: PUSH
20086: NOP4
20090: PUSH
20091: LD_INT 2
20093: ADD
20094: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20095: NOP4
20099: PUSH
20100: NOP4
20104: PUSH
20105: NOP4
20109: PPUSH
20110: NOP4
20114: ADD
20115: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20116: NOP4
20120: PUSH
20121: NOP4
20125: PUSH
20126: NOP4
20130: PPUSH
20131: NOP4
20135: ADD
20136: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20137: NOP4
20141: PUSH
20142: NOP4
20146: PUSH
20147: NOP4
20151: PPUSH
20152: NOP4
20156: ADD
20157: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
20158: NOP4
20162: PPUSH
20163: NOP4
20167: PUSH
20168: LD_INT 5
20170: EQUAL
20171: IFFALSE 20250
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
20173: NOP4
20177: PUSH
20178: NOP4
20182: PUSH
20183: LD_INT 4
20185: ADD
20186: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20187: NOP4
20191: PUSH
20192: NOP4
20196: PUSH
20197: NOP4
20201: PPUSH
20202: NOP4
20206: ADD
20207: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20208: NOP4
20212: PUSH
20213: NOP4
20217: PUSH
20218: NOP4
20222: PPUSH
20223: NOP4
20227: ADD
20228: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20229: NOP4
20233: PUSH
20234: NOP4
20238: PUSH
20239: NOP4
20243: PPUSH
20244: NOP4
20248: ADD
20249: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
20250: NOP4
20254: PPUSH
20255: NOP4
20259: PUSH
20260: LD_INT 1
20262: EQUAL
20263: IFFALSE 20313
// begin for i in defenders_list do
20265: NOP4
20269: PUSH
20270: NOP4
20274: PUSH
20275: FOR_IN
20276: IFFALSE 20311
// if i = unit then
20278: NOP4
20282: PUSH
20283: NOP4
20287: EQUAL
20288: IFFALSE 20309
// defenders_list = defenders_list diff [ unit ] ;
20290: NOP4
20294: PUSH
20295: NOP4
20299: PUSH
20300: NOP4
20304: PUSH
20305: EMPTY
20306: LIST
20307: DIFF
20308: ST_TO_ADDR
20309: GO 20275
20311: POP
20312: POP
=======
19969: LD_VAR 0 1
19973: PPUSH
19974: CALL_OW 255
19978: PUSH
19979: LD_INT 3
19981: EQUAL
19982: IFFALSE 20752
// begin if GetType ( unit ) = unit_building then
19984: LD_VAR 0 1
19988: PPUSH
19989: CALL_OW 247
19993: PUSH
19994: LD_INT 3
19996: EQUAL
19997: IFFALSE 20689
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
19999: LD_VAR 0 1
20003: PPUSH
20004: CALL_OW 266
20008: PUSH
20009: LD_INT 31
20011: EQUAL
20012: PUSH
20013: LD_VAR 0 1
20017: PPUSH
20018: CALL_OW 266
20022: PUSH
20023: LD_INT 32
20025: EQUAL
20026: OR
20027: PUSH
20028: LD_VAR 0 1
20032: PPUSH
20033: CALL_OW 266
20037: PUSH
20038: LD_INT 36
20040: EQUAL
20041: OR
20042: PUSH
20043: LD_VAR 0 1
20047: PPUSH
20048: CALL_OW 266
20052: PUSH
20053: LD_INT 0
20055: EQUAL
20056: OR
20057: PUSH
20058: LD_VAR 0 1
20062: PPUSH
20063: CALL_OW 266
20067: PUSH
20068: LD_INT 24
20070: EQUAL
20071: OR
20072: PUSH
20073: LD_VAR 0 1
20077: PPUSH
20078: CALL_OW 266
20082: PUSH
20083: LD_INT 17
20085: EQUAL
20086: OR
20087: PUSH
20088: LD_VAR 0 1
20092: PPUSH
20093: CALL_OW 266
20097: PUSH
20098: LD_INT 25
20100: EQUAL
20101: OR
20102: PUSH
20103: LD_VAR 0 1
20107: PPUSH
20108: CALL_OW 266
20112: PUSH
20113: LD_INT 19
20115: EQUAL
20116: OR
20117: PUSH
20118: LD_VAR 0 1
20122: PPUSH
20123: CALL_OW 266
20127: PUSH
20128: LD_INT 20
20130: EQUAL
20131: OR
20132: PUSH
20133: LD_VAR 0 1
20137: PPUSH
20138: CALL_OW 266
20142: PUSH
20143: LD_INT 18
20145: EQUAL
20146: OR
20147: PUSH
20148: LD_VAR 0 1
20152: PPUSH
20153: CALL_OW 266
20157: PUSH
20158: LD_INT 21
20160: EQUAL
20161: OR
20162: PUSH
20163: LD_VAR 0 1
20167: PPUSH
20168: CALL_OW 266
20172: PUSH
20173: LD_INT 23
20175: EQUAL
20176: OR
20177: PUSH
20178: LD_VAR 0 1
20182: PPUSH
20183: CALL_OW 266
20187: PUSH
20188: LD_INT 16
20190: EQUAL
20191: OR
20192: PUSH
20193: LD_VAR 0 1
20197: PPUSH
20198: CALL_OW 266
20202: PUSH
20203: LD_INT 6
20205: EQUAL
20206: OR
20207: PUSH
20208: LD_VAR 0 1
20212: PPUSH
20213: CALL_OW 266
20217: PUSH
20218: LD_INT 29
20220: EQUAL
20221: OR
20222: PUSH
20223: LD_VAR 0 1
20227: PPUSH
20228: CALL_OW 266
20232: PUSH
20233: LD_INT 26
20235: EQUAL
20236: OR
20237: PUSH
20238: LD_VAR 0 1
20242: PPUSH
20243: CALL_OW 266
20247: PUSH
20248: LD_INT 30
20250: EQUAL
20251: OR
20252: PUSH
20253: LD_VAR 0 1
20257: PPUSH
20258: CALL_OW 266
20262: PUSH
20263: LD_INT 28
20265: EQUAL
20266: OR
20267: PUSH
20268: LD_VAR 0 1
20272: PPUSH
20273: CALL_OW 266
20277: PUSH
20278: LD_INT 27
20280: EQUAL
20281: OR
20282: PUSH
20283: LD_VAR 0 1
20287: PPUSH
20288: CALL_OW 266
20292: PUSH
20293: LD_INT 33
20295: EQUAL
20296: OR
20297: PUSH
20298: LD_VAR 0 1
20302: PPUSH
20303: CALL_OW 266
20307: PUSH
20308: LD_INT 2
20310: EQUAL
20311: OR
20312: PUSH
20313: LD_VAR 0 1
20317: PPUSH
20318: CALL_OW 266
20322: PUSH
20323: LD_INT 4
20325: EQUAL
20326: OR
20327: IFFALSE 20413
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20329: LD_ADDR_EXP 31
20333: PUSH
20334: LD_EXP 31
20338: PUSH
20339: LD_VAR 0 1
20343: PPUSH
20344: CALL_OW 266
20348: ADD
20349: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20350: LD_ADDR_EXP 31
20354: PUSH
20355: LD_EXP 31
20359: PUSH
20360: LD_VAR 0 1
20364: PPUSH
20365: CALL_OW 250
20369: ADD
20370: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20371: LD_ADDR_EXP 31
20375: PUSH
20376: LD_EXP 31
20380: PUSH
20381: LD_VAR 0 1
20385: PPUSH
20386: CALL_OW 251
20390: ADD
20391: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20392: LD_ADDR_EXP 31
20396: PUSH
20397: LD_EXP 31
20401: PUSH
20402: LD_VAR 0 1
20406: PPUSH
20407: CALL_OW 254
20411: ADD
20412: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
20413: LD_VAR 0 1
20417: PPUSH
20418: CALL_OW 266
20422: PUSH
20423: LD_INT 1
20425: EQUAL
20426: IFFALSE 20505
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
20428: LD_ADDR_EXP 31
20432: PUSH
20433: LD_EXP 31
20437: PUSH
20438: LD_INT 0
20440: ADD
20441: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20442: LD_ADDR_EXP 31
20446: PUSH
20447: LD_EXP 31
20451: PUSH
20452: LD_VAR 0 1
20456: PPUSH
20457: CALL_OW 250
20461: ADD
20462: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20463: LD_ADDR_EXP 31
20467: PUSH
20468: LD_EXP 31
20472: PUSH
20473: LD_VAR 0 1
20477: PPUSH
20478: CALL_OW 251
20482: ADD
20483: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20484: LD_ADDR_EXP 31
20488: PUSH
20489: LD_EXP 31
20493: PUSH
20494: LD_VAR 0 1
20498: PPUSH
20499: CALL_OW 254
20503: ADD
20504: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20505: LD_VAR 0 1
20509: PPUSH
20510: CALL_OW 266
20514: PUSH
20515: LD_INT 3
20517: EQUAL
20518: IFFALSE 20597
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20520: LD_ADDR_EXP 31
20524: PUSH
20525: LD_EXP 31
20529: PUSH
20530: LD_INT 2
20532: ADD
20533: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20534: LD_ADDR_EXP 31
20538: PUSH
20539: LD_EXP 31
20543: PUSH
20544: LD_VAR 0 1
20548: PPUSH
20549: CALL_OW 250
20553: ADD
20554: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20555: LD_ADDR_EXP 31
20559: PUSH
20560: LD_EXP 31
20564: PUSH
20565: LD_VAR 0 1
20569: PPUSH
20570: CALL_OW 251
20574: ADD
20575: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20576: LD_ADDR_EXP 31
20580: PUSH
20581: LD_EXP 31
20585: PUSH
20586: LD_VAR 0 1
20590: PPUSH
20591: CALL_OW 254
20595: ADD
20596: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
20597: LD_VAR 0 1
20601: PPUSH
20602: CALL_OW 266
20606: PUSH
20607: LD_INT 5
20609: EQUAL
20610: IFFALSE 20689
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
20612: LD_ADDR_EXP 31
20616: PUSH
20617: LD_EXP 31
20621: PUSH
20622: LD_INT 4
20624: ADD
20625: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20626: LD_ADDR_EXP 31
20630: PUSH
20631: LD_EXP 31
20635: PUSH
20636: LD_VAR 0 1
20640: PPUSH
20641: CALL_OW 250
20645: ADD
20646: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20647: LD_ADDR_EXP 31
20651: PUSH
20652: LD_EXP 31
20656: PUSH
20657: LD_VAR 0 1
20661: PPUSH
20662: CALL_OW 251
20666: ADD
20667: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20668: LD_ADDR_EXP 31
20672: PUSH
20673: LD_EXP 31
20677: PUSH
20678: LD_VAR 0 1
20682: PPUSH
20683: CALL_OW 254
20687: ADD
20688: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
20689: LD_VAR 0 1
20693: PPUSH
20694: CALL_OW 247
20698: PUSH
20699: LD_INT 1
20701: EQUAL
20702: IFFALSE 20752
// begin for i in defenders_list do
20704: LD_ADDR_VAR 0 2
20708: PUSH
20709: LD_EXP 32
20713: PUSH
20714: FOR_IN
20715: IFFALSE 20750
// if i = unit then
20717: LD_VAR 0 2
20721: PUSH
20722: LD_VAR 0 1
20726: EQUAL
20727: IFFALSE 20748
// defenders_list = defenders_list diff [ unit ] ;
20729: LD_ADDR_EXP 32
20733: PUSH
20734: LD_EXP 32
20738: PUSH
20739: LD_VAR 0 1
20743: PUSH
20744: EMPTY
20745: LIST
20746: DIFF
20747: ST_TO_ADDR
20748: GO 20714
20750: POP
20751: POP
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; end ; end ; end_of_file
20752: PPOPN 2
20754: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20755: GO 20757
20757: DISABLE
20758: LD_INT 0
20760: PPUSH
// begin enemyWayX = [ ] ;
<<<<<<< HEAD
20322: NOP4
20326: PUSH
20327: EMPTY
20328: ST_TO_ADDR
// enemyWayY = [ ] ;
20329: NOP4
20333: PUSH
20334: EMPTY
20335: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
20336: NOP4
20340: PUSH
20341: LD_INT 1
20343: PPUSH
20344: LD_INT 3
20346: PPUSH
20347: NOP4
20351: ST_TO_ADDR
// if rnd = 1 then
20352: NOP4
20356: PUSH
20357: LD_INT 1
20359: EQUAL
20360: IFFALSE 20400
// begin enemyWayX = [ 73 , 46 , 29 ] ;
20362: NOP4
20366: PUSH
20367: LD_INT 73
20369: PUSH
20370: LD_INT 46
20372: PUSH
20373: LD_INT 29
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: LIST
20380: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
20381: NOP4
20385: PUSH
20386: LD_INT 71
20388: PUSH
20389: LD_INT 43
20391: PUSH
20392: LD_INT 29
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: LIST
20399: ST_TO_ADDR
// end ; if rnd = 2 then
20400: NOP4
20404: PUSH
20405: LD_INT 2
20407: EQUAL
20408: IFFALSE 20432
// begin enemyWayX = [ 64 ] ;
20410: NOP4
20414: PUSH
20415: LD_INT 64
20417: PUSH
20418: EMPTY
20419: LIST
20420: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
20421: NOP4
20425: PUSH
20426: LD_INT 43
20428: PUSH
20429: EMPTY
20430: LIST
20431: ST_TO_ADDR
// end ; if rnd = 3 then
20432: NOP4
20436: PUSH
20437: LD_INT 3
20439: EQUAL
20440: IFFALSE 20464
// begin enemyWayX = [ 80 ] ;
20442: NOP4
20446: PUSH
20447: LD_INT 80
20449: PUSH
20450: EMPTY
20451: LIST
20452: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
20453: NOP4
20457: PUSH
20458: LD_INT 28
20460: PUSH
20461: EMPTY
20462: LIST
20463: ST_TO_ADDR
=======
20761: LD_ADDR_EXP 45
20765: PUSH
20766: EMPTY
20767: ST_TO_ADDR
// enemyWayY = [ ] ;
20768: LD_ADDR_EXP 46
20772: PUSH
20773: EMPTY
20774: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
20775: LD_ADDR_VAR 0 1
20779: PUSH
20780: LD_INT 1
20782: PPUSH
20783: LD_INT 3
20785: PPUSH
20786: CALL_OW 12
20790: ST_TO_ADDR
// if rnd = 1 then
20791: LD_VAR 0 1
20795: PUSH
20796: LD_INT 1
20798: EQUAL
20799: IFFALSE 20839
// begin enemyWayX = [ 73 , 46 , 29 ] ;
20801: LD_ADDR_EXP 45
20805: PUSH
20806: LD_INT 73
20808: PUSH
20809: LD_INT 46
20811: PUSH
20812: LD_INT 29
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: LIST
20819: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
20820: LD_ADDR_EXP 46
20824: PUSH
20825: LD_INT 71
20827: PUSH
20828: LD_INT 43
20830: PUSH
20831: LD_INT 29
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: ST_TO_ADDR
// end ; if rnd = 2 then
20839: LD_VAR 0 1
20843: PUSH
20844: LD_INT 2
20846: EQUAL
20847: IFFALSE 20871
// begin enemyWayX = [ 64 ] ;
20849: LD_ADDR_EXP 45
20853: PUSH
20854: LD_INT 64
20856: PUSH
20857: EMPTY
20858: LIST
20859: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
20860: LD_ADDR_EXP 46
20864: PUSH
20865: LD_INT 43
20867: PUSH
20868: EMPTY
20869: LIST
20870: ST_TO_ADDR
// end ; if rnd = 3 then
20871: LD_VAR 0 1
20875: PUSH
20876: LD_INT 3
20878: EQUAL
20879: IFFALSE 20903
// begin enemyWayX = [ 80 ] ;
20881: LD_ADDR_EXP 45
20885: PUSH
20886: LD_INT 80
20888: PUSH
20889: EMPTY
20890: LIST
20891: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
20892: LD_ADDR_EXP 46
20896: PUSH
20897: LD_INT 28
20899: PUSH
20900: EMPTY
20901: LIST
20902: ST_TO_ADDR
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
// end ; enable ;
20903: ENABLE
// end ;
20904: PPOPN 1
20906: END
// every 0 0$1 do
20907: GO 20909
20909: DISABLE
// begin enable ;
20910: ENABLE
// if escapeAvalaible = 0 then
<<<<<<< HEAD
20472: NOP4
20476: PUSH
20477: LD_INT 0
20479: EQUAL
20480: IFFALSE 20492
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
20482: LD_INT 3
20484: PPUSH
20485: LD_INT 6
20487: PPUSH
20488: NOP4
// if escapeAvalaible = 0 then
20492: NOP4
20496: PUSH
20497: LD_INT 0
20499: EQUAL
20500: IFFALSE 20512
// DefenseBase ( 1 , RussianBaseTerritory ) ;
20502: LD_INT 1
20504: PPUSH
20505: LD_INT 24
20507: PPUSH
20508: NOP4
// if russianAI = 1 then
20512: NOP4
20516: PUSH
20517: LD_INT 1
20519: EQUAL
20520: IFFALSE 20592
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
20522: LD_INT 3
20524: PPUSH
20525: LD_INT 7
20527: PPUSH
20528: LD_INT 6
20530: PPUSH
20531: NOP4
20535: PPUSH
20536: NOP4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
20540: LD_INT 3
20542: PPUSH
20543: NOP4
20547: PPUSH
20548: LD_INT 6
20550: PPUSH
20551: NOP4
20555: PPUSH
20556: NOP4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
20560: LD_INT 3
20562: PPUSH
20563: NOP4
20567: PPUSH
20568: NOP4
20572: PPUSH
20573: NOP4
20577: PPUSH
20578: NOP4
// AttackNearBuildings ( 3 , 1 ) ;
20582: LD_INT 3
20584: PPUSH
20585: LD_INT 1
20587: PPUSH
20588: NOP4
// end ; if SikorskyArrive = 1 then
20592: NOP4
20596: PUSH
20597: LD_INT 1
20599: EQUAL
20600: IFFALSE 20618
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
20602: LD_INT 3
20604: PPUSH
20605: LD_INT 10
20607: PPUSH
20608: LD_INT 53
20610: PPUSH
20611: LD_INT 59
20613: PPUSH
20614: NOP4
// end ;
20618: END
// every 0 0$1 trigger russianAI = 1 do var i ;
20619: NOP4
20623: PUSH
20624: LD_INT 1
20626: EQUAL
20627: IFFALSE 20903
20629: GO 20631
20631: DISABLE
20632: LD_INT 0
20634: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
20635: NOP4
20639: PUSH
20640: LD_INT 22
20642: PUSH
20643: LD_INT 3
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 21
20652: PUSH
20653: LD_INT 3
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 30
20662: PUSH
20663: LD_INT 32
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 3
20672: PUSH
20673: LD_INT 2
20675: PUSH
20676: LD_INT 35
20678: PUSH
20679: LD_INT 43
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 35
20688: PUSH
20689: LD_INT 44
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 35
20698: PUSH
20699: LD_INT 46
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: PPUSH
20722: NOP4
20726: PUSH
20727: FOR_IN
20728: IFFALSE 20767
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20730: NOP4
20734: PPUSH
20735: LD_INT 43
20737: PUSH
20738: LD_INT 44
20740: PUSH
20741: LD_INT 46
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 1
20751: PPUSH
20752: LD_INT 3
20754: PPUSH
20755: NOP4
20759: ARRAY
20760: PPUSH
20761: NOP4
20765: GO 20727
20767: POP
20768: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
20769: NOP4
20773: PUSH
20774: LD_INT 22
20776: PUSH
20777: LD_INT 3
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 21
20786: PUSH
20787: LD_INT 3
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 30
20796: PUSH
20797: LD_INT 33
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 3
20806: PUSH
20807: LD_INT 2
20809: PUSH
20810: LD_INT 35
20812: PUSH
20813: LD_INT 43
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 35
20822: PUSH
20823: LD_INT 44
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 35
20832: PUSH
20833: LD_INT 46
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: PPUSH
20856: NOP4
20860: PUSH
20861: FOR_IN
20862: IFFALSE 20901
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20864: NOP4
20868: PPUSH
20869: LD_INT 43
20871: PUSH
20872: LD_INT 44
20874: PUSH
20875: LD_INT 46
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: PPUSH
20886: LD_INT 3
20888: PPUSH
20889: NOP4
20893: ARRAY
20894: PPUSH
20895: NOP4
20899: GO 20861
20901: POP
20902: POP
// end ;
20903: PPOPN 1
20905: END
// every 0 0$1 trigger SikorskyAI = 1 do
20906: NOP4
20910: PUSH
20911: LD_INT 1
20913: EQUAL
20914: IFFALSE 20949
20916: GO 20918
20918: DISABLE
// begin enable ;
20919: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
20920: LD_INT 4
20922: PPUSH
20923: LD_INT 10
20925: PPUSH
20926: LD_INT 93
20928: PPUSH
20929: LD_INT 93
20931: PPUSH
20932: NOP4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
20936: LD_INT 4
20938: PPUSH
20939: LD_INT 11
20941: PPUSH
20942: LD_INT 3
20944: PPUSH
20945: NOP4
// end ;
20949: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20950: NOP4
20954: PUSH
20955: LD_INT 1
20957: EQUAL
20958: PUSH
20959: NOP4
20963: PPUSH
20964: NOP4
20968: AND
20969: PUSH
20970: NOP4
20974: PPUSH
20975: NOP4
20979: PUSH
20980: LD_INT 3
20982: EQUAL
20983: AND
20984: PUSH
20985: LD_INT 22
20987: PUSH
20988: LD_INT 3
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 21
20997: PUSH
20998: LD_INT 2
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 33
21007: PUSH
21008: LD_INT 3
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: LIST
21019: PPUSH
21020: NOP4
21024: PUSH
21025: LD_INT 0
21027: EQUAL
21028: AND
21029: IFFALSE 21199
21031: GO 21033
21033: DISABLE
// begin enable ;
21034: ENABLE
// if Difficulty = 1 then
21035: NOP4
21039: PUSH
21040: LD_INT 1
21042: EQUAL
21043: IFFALSE 21091
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 44 , 46 ] , 1 , 3 , 24 ) ;
21045: LD_INT 3
21047: PPUSH
21048: NOP4
21052: PPUSH
21053: LD_INT 5
21055: PPUSH
21056: LD_INT 8
21058: PPUSH
21059: NOP4
21063: PPUSH
21064: LD_INT 43
21066: PUSH
21067: LD_INT 44
21069: PUSH
21070: LD_INT 46
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: LIST
21077: PPUSH
21078: LD_INT 1
21080: PPUSH
21081: LD_INT 3
21083: PPUSH
21084: LD_INT 24
21086: PPUSH
21087: NOP4
// if Difficulty = 2 then
21091: NOP4
21095: PUSH
21096: LD_INT 2
21098: EQUAL
21099: IFFALSE 21147
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
21101: LD_INT 3
21103: PPUSH
21104: NOP4
21108: PPUSH
21109: LD_INT 6
21111: PPUSH
21112: LD_INT 8
21114: PPUSH
21115: NOP4
21119: PPUSH
21120: LD_INT 44
21122: PUSH
21123: LD_INT 44
21125: PUSH
21126: LD_INT 46
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: LIST
21133: PPUSH
21134: LD_INT 1
21136: PPUSH
21137: LD_INT 3
21139: PPUSH
21140: LD_INT 24
21142: PPUSH
21143: NOP4
// if Difficulty = 3 then
21147: NOP4
21151: PUSH
21152: LD_INT 3
21154: EQUAL
21155: IFFALSE 21199
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 44 , 46 ] , 1 , 3 , 24 ) ;
21157: LD_INT 3
21159: PPUSH
21160: NOP4
21164: PPUSH
21165: LD_INT 7
21167: PPUSH
21168: LD_INT 8
21170: PPUSH
21171: NOP4
21175: PPUSH
21176: LD_INT 44
21178: PUSH
21179: LD_INT 46
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PPUSH
21186: LD_INT 1
21188: PPUSH
21189: LD_INT 3
21191: PPUSH
21192: LD_INT 24
21194: PPUSH
21195: NOP4
// end ;
21199: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
21200: NOP4
21204: PUSH
21205: LD_INT 1
21207: EQUAL
21208: IFFALSE 21290
21210: GO 21212
21212: DISABLE
21213: LD_INT 0
21215: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
21216: NOP4
21220: PUSH
21221: LD_INT 22
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 21
21233: PUSH
21234: LD_INT 1
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 3
21243: PUSH
21244: LD_INT 24
21246: PUSH
21247: LD_INT 650
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: LIST
21262: PPUSH
21263: NOP4
21267: PUSH
21268: FOR_IN
21269: IFFALSE 21288
// ComMoveXY ( i , 51 , 12 ) ;
21271: NOP4
21275: PPUSH
21276: LD_INT 51
21278: PPUSH
21279: LD_INT 12
21281: PPUSH
21282: NOP4
21286: GO 21268
21288: POP
21289: POP
// end ; end_of_file
21290: PPOPN 1
21292: END
// every 3 3$20 trigger firstAttack = 1 do
21293: NOP4
21297: PUSH
21298: LD_INT 1
21300: EQUAL
21301: IFFALSE 21407
21303: GO 21305
21305: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21306: LD_INT 6
21308: PPUSH
21309: LD_INT 3
21311: PPUSH
21312: LD_INT 5
21314: PPUSH
21315: LD_INT 6
21317: PPUSH
21318: NOP4
21322: PUSH
21323: LD_INT 5
21325: PPUSH
21326: LD_INT 6
21328: PPUSH
21329: NOP4
21333: PUSH
21334: LD_INT 5
21336: PPUSH
21337: LD_INT 6
21339: PPUSH
21340: NOP4
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: LIST
21349: PUSH
21350: NOP4
21354: ARRAY
21355: PPUSH
21356: LD_INT 0
21358: PPUSH
21359: LD_INT 0
21361: PPUSH
21362: LD_INT 0
21364: PPUSH
21365: LD_INT 0
21367: PPUSH
21368: NOP4
21372: PPUSH
21373: NOP4
21377: PPUSH
21378: NOP4
21382: PPUSH
21383: LD_INT 16
21385: PPUSH
21386: LD_INT 7
21388: PPUSH
21389: LD_INT 1
21391: PPUSH
21392: LD_INT 1
21394: PPUSH
21395: LD_INT 3
21397: PPUSH
21398: NOP4
21402: PPUSH
21403: NOP4
21407: END
// every 3 3$40 trigger firstAttack = 1 do
21408: NOP4
21412: PUSH
21413: LD_INT 1
21415: EQUAL
21416: IFFALSE 21508
21418: GO 21420
21420: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
21421: LD_INT 16
21423: PPUSH
21424: LD_INT 6
21426: PPUSH
21427: LD_INT 3
21429: PPUSH
21430: LD_INT 4
21432: PPUSH
21433: NOP4
21437: PUSH
21438: LD_INT 4
21440: PPUSH
21441: LD_INT 5
21443: PPUSH
21444: NOP4
21448: PUSH
21449: LD_INT 5
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: LIST
21456: PUSH
21457: NOP4
21461: ARRAY
21462: PPUSH
21463: NOP4
21467: PPUSH
21468: NOP4
21472: PPUSH
21473: NOP4
21477: PPUSH
21478: LD_INT 3
21480: PPUSH
21481: LD_INT 1
21483: PPUSH
21484: LD_INT 3
21486: PPUSH
21487: LD_INT 44
21489: PUSH
21490: LD_INT 46
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PPUSH
21497: EMPTY
21498: PPUSH
21499: EMPTY
21500: PPUSH
21501: LD_INT 1
21503: PPUSH
21504: NOP4
21508: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
21509: NOP4
21513: PUSH
21514: LD_INT 1
21516: EQUAL
21517: PUSH
21518: NOP4
21522: PUSH
21523: LD_INT 0
21525: EQUAL
21526: AND
21527: IFFALSE 21633
21529: GO 21531
21531: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21532: LD_INT 6
21534: PPUSH
21535: LD_INT 3
21537: PPUSH
21538: LD_INT 5
21540: PPUSH
21541: LD_INT 6
21543: PPUSH
21544: NOP4
21548: PUSH
21549: LD_INT 5
21551: PPUSH
21552: LD_INT 6
21554: PPUSH
21555: NOP4
21559: PUSH
21560: LD_INT 5
21562: PPUSH
21563: LD_INT 6
21565: PPUSH
21566: NOP4
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: LIST
21575: PUSH
21576: NOP4
21580: ARRAY
21581: PPUSH
21582: LD_INT 0
21584: PPUSH
21585: LD_INT 0
21587: PPUSH
21588: LD_INT 0
21590: PPUSH
21591: LD_INT 0
21593: PPUSH
21594: NOP4
21598: PPUSH
21599: NOP4
21603: PPUSH
21604: NOP4
21608: PPUSH
21609: LD_INT 16
21611: PPUSH
21612: LD_INT 7
21614: PPUSH
21615: LD_INT 1
21617: PPUSH
21618: LD_INT 1
21620: PPUSH
21621: LD_INT 3
21623: PPUSH
21624: NOP4
21628: PPUSH
21629: NOP4
21633: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
21634: NOP4
21638: PUSH
21639: LD_INT 1
21641: EQUAL
21642: PUSH
21643: NOP4
21647: PUSH
21648: LD_INT 0
21650: EQUAL
21651: AND
21652: IFFALSE 21748
21654: GO 21656
21656: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
21657: LD_INT 16
21659: PPUSH
21660: LD_INT 6
21662: PPUSH
21663: LD_INT 5
21665: PPUSH
21666: LD_INT 6
21668: PPUSH
21669: NOP4
21673: PUSH
21674: LD_INT 6
21676: PPUSH
21677: LD_INT 7
21679: PPUSH
21680: NOP4
21684: PUSH
21685: LD_INT 7
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: LIST
21692: PUSH
21693: NOP4
21697: ARRAY
21698: PPUSH
21699: NOP4
21703: PPUSH
21704: NOP4
21708: PPUSH
21709: NOP4
21713: PPUSH
21714: LD_INT 3
21716: PPUSH
21717: LD_INT 1
21719: PPUSH
21720: LD_INT 3
21722: PPUSH
21723: LD_INT 43
21725: PUSH
21726: LD_INT 44
21728: PUSH
21729: LD_INT 46
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: LIST
21736: PPUSH
21737: EMPTY
21738: PPUSH
21739: EMPTY
21740: PPUSH
21741: LD_INT 1
21743: PPUSH
21744: NOP4
21748: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
21749: NOP4
21753: PUSH
21754: LD_INT 1
21756: EQUAL
21757: PUSH
21758: NOP4
21762: PUSH
21763: LD_INT 0
21765: EQUAL
21766: AND
21767: IFFALSE 21843
21769: GO 21771
21771: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
21772: LD_INT 16
21774: PPUSH
21775: LD_INT 6
21777: PPUSH
21778: LD_INT 5
21780: PUSH
21781: LD_INT 6
21783: PUSH
21784: LD_INT 7
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: LIST
21791: PUSH
21792: NOP4
21796: ARRAY
21797: PPUSH
21798: NOP4
21802: PPUSH
21803: NOP4
21807: PPUSH
21808: NOP4
21812: PPUSH
21813: LD_INT 3
21815: PPUSH
21816: LD_INT 1
21818: PPUSH
21819: LD_INT 3
21821: PPUSH
21822: LD_INT 44
21824: PUSH
21825: LD_INT 46
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PPUSH
21832: EMPTY
21833: PPUSH
21834: EMPTY
21835: PPUSH
21836: LD_INT 1
21838: PPUSH
21839: NOP4
21843: END
// every 1 1$00 trigger secondAttack = 1 do
21844: NOP4
21848: PUSH
21849: LD_INT 1
21851: EQUAL
21852: IFFALSE 21958
21854: GO 21856
21856: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21857: LD_INT 6
21859: PPUSH
21860: LD_INT 3
21862: PPUSH
21863: LD_INT 4
21865: PPUSH
21866: LD_INT 7
21868: PPUSH
21869: NOP4
21873: PUSH
21874: LD_INT 6
21876: PPUSH
21877: LD_INT 7
21879: PPUSH
21880: NOP4
21884: PUSH
21885: LD_INT 6
21887: PPUSH
21888: LD_INT 10
21890: PPUSH
21891: NOP4
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: LIST
21900: PUSH
21901: NOP4
21905: ARRAY
21906: PPUSH
21907: LD_INT 0
21909: PPUSH
21910: LD_INT 0
21912: PPUSH
21913: LD_INT 0
21915: PPUSH
21916: LD_INT 0
21918: PPUSH
21919: NOP4
21923: PPUSH
21924: NOP4
21928: PPUSH
21929: NOP4
21933: PPUSH
21934: LD_INT 16
21936: PPUSH
21937: LD_INT 7
21939: PPUSH
21940: LD_INT 1
21942: PPUSH
21943: LD_INT 1
21945: PPUSH
21946: LD_INT 3
21948: PPUSH
21949: NOP4
21953: PPUSH
21954: NOP4
21958: END
// every 1 1$00 trigger secondAttack = 1 do
21959: NOP4
21963: PUSH
21964: LD_INT 1
21966: EQUAL
21967: IFFALSE 22071
21969: GO 21971
21971: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
21972: LD_INT 16
21974: PPUSH
21975: LD_INT 6
21977: PPUSH
21978: LD_INT 5
21980: PPUSH
21981: LD_INT 8
21983: PPUSH
21984: NOP4
21988: PUSH
21989: LD_INT 6
21991: PPUSH
21992: LD_INT 9
21994: PPUSH
21995: NOP4
21999: PUSH
22000: LD_INT 7
22002: PPUSH
22003: LD_INT 9
22005: PPUSH
22006: NOP4
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: LIST
22015: PUSH
22016: NOP4
22020: ARRAY
22021: PPUSH
22022: NOP4
22026: PPUSH
22027: NOP4
22031: PPUSH
22032: NOP4
22036: PPUSH
22037: LD_INT 3
22039: PPUSH
22040: LD_INT 1
22042: PPUSH
22043: LD_INT 3
22045: PPUSH
22046: LD_INT 43
22048: PUSH
22049: LD_INT 44
22051: PUSH
22052: LD_INT 46
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: LIST
22059: PPUSH
22060: EMPTY
22061: PPUSH
22062: EMPTY
22063: PPUSH
22064: LD_INT 1
22066: PPUSH
22067: NOP4
22071: END
// every 22 22$0 trigger SikorskyArrive = 0 do
22072: NOP4
22076: PUSH
22077: LD_INT 0
22079: EQUAL
22080: IFFALSE 22186
22082: GO 22084
22084: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22085: LD_INT 6
22087: PPUSH
22088: LD_INT 3
22090: PPUSH
22091: LD_INT 8
22093: PPUSH
22094: LD_INT 9
22096: PPUSH
22097: NOP4
22101: PUSH
22102: LD_INT 7
22104: PPUSH
22105: LD_INT 10
22107: PPUSH
22108: NOP4
22112: PUSH
22113: LD_INT 8
22115: PPUSH
22116: LD_INT 10
22118: PPUSH
22119: NOP4
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: LIST
22128: PUSH
22129: NOP4
22133: ARRAY
22134: PPUSH
22135: LD_INT 0
22137: PPUSH
22138: LD_INT 0
22140: PPUSH
22141: LD_INT 0
22143: PPUSH
22144: LD_INT 0
22146: PPUSH
22147: NOP4
22151: PPUSH
22152: NOP4
22156: PPUSH
22157: NOP4
22161: PPUSH
22162: LD_INT 16
22164: PPUSH
22165: LD_INT 7
22167: PPUSH
22168: LD_INT 1
22170: PPUSH
22171: LD_INT 1
22173: PPUSH
22174: LD_INT 3
22176: PPUSH
22177: NOP4
22181: PPUSH
22182: NOP4
22186: END
// every 22 22$0 trigger SikorskyArrive = 0 do
22187: NOP4
22191: PUSH
22192: LD_INT 0
22194: EQUAL
22195: IFFALSE 22295
22197: GO 22199
22199: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22200: LD_INT 16
22202: PPUSH
22203: LD_INT 6
22205: PPUSH
22206: LD_INT 5
22208: PPUSH
22209: LD_INT 8
22211: PPUSH
22212: NOP4
22216: PUSH
22217: LD_INT 6
22219: PPUSH
22220: LD_INT 9
22222: PPUSH
22223: NOP4
22227: PUSH
22228: LD_INT 7
22230: PPUSH
22231: LD_INT 9
22233: PPUSH
22234: NOP4
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: LIST
22243: PUSH
22244: NOP4
22248: ARRAY
22249: PPUSH
22250: NOP4
22254: PPUSH
22255: NOP4
22259: PPUSH
22260: NOP4
22264: PPUSH
22265: LD_INT 3
22267: PPUSH
22268: LD_INT 1
22270: PPUSH
22271: LD_INT 3
22273: PPUSH
22274: LD_INT 44
22276: PUSH
22277: LD_INT 46
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PPUSH
22284: EMPTY
22285: PPUSH
22286: EMPTY
22287: PPUSH
22288: LD_INT 1
22290: PPUSH
22291: NOP4
22295: END
// every 27 27$0 trigger SikorskyArrive = 0 do
22296: NOP4
22300: PUSH
22301: LD_INT 0
22303: EQUAL
22304: IFFALSE 22410
22306: GO 22308
22308: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22309: LD_INT 6
22311: PPUSH
22312: LD_INT 3
22314: PPUSH
22315: LD_INT 8
22317: PPUSH
22318: LD_INT 9
22320: PPUSH
22321: NOP4
22325: PUSH
22326: LD_INT 7
22328: PPUSH
22329: LD_INT 10
22331: PPUSH
22332: NOP4
22336: PUSH
22337: LD_INT 8
22339: PPUSH
22340: LD_INT 10
22342: PPUSH
22343: NOP4
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: PUSH
22353: NOP4
22357: ARRAY
22358: PPUSH
22359: LD_INT 0
22361: PPUSH
22362: LD_INT 0
22364: PPUSH
22365: LD_INT 0
22367: PPUSH
22368: LD_INT 0
22370: PPUSH
22371: NOP4
22375: PPUSH
22376: NOP4
22380: PPUSH
22381: NOP4
22385: PPUSH
22386: LD_INT 16
22388: PPUSH
22389: LD_INT 7
22391: PPUSH
22392: LD_INT 1
22394: PPUSH
22395: LD_INT 1
22397: PPUSH
22398: LD_INT 3
22400: PPUSH
22401: NOP4
22405: PPUSH
22406: NOP4
22410: END
// every 27 27$0 trigger SikorskyArrive = 0 do
22411: NOP4
22415: PUSH
22416: LD_INT 0
22418: EQUAL
22419: IFFALSE 22519
22421: GO 22423
22423: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22424: LD_INT 16
22426: PPUSH
22427: LD_INT 6
22429: PPUSH
22430: LD_INT 5
22432: PPUSH
22433: LD_INT 8
22435: PPUSH
22436: NOP4
22440: PUSH
22441: LD_INT 6
22443: PPUSH
22444: LD_INT 9
22446: PPUSH
22447: NOP4
22451: PUSH
22452: LD_INT 7
22454: PPUSH
22455: LD_INT 9
22457: PPUSH
22458: NOP4
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: PUSH
22468: NOP4
22472: ARRAY
22473: PPUSH
22474: NOP4
22478: PPUSH
22479: NOP4
22483: PPUSH
22484: NOP4
22488: PPUSH
22489: LD_INT 3
22491: PPUSH
22492: LD_INT 1
22494: PPUSH
22495: LD_INT 3
22497: PPUSH
22498: LD_INT 44
22500: PUSH
22501: LD_INT 46
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PPUSH
22508: EMPTY
22509: PPUSH
22510: EMPTY
22511: PPUSH
22512: LD_INT 1
22514: PPUSH
22515: NOP4
22519: END
// every 35 35$0 trigger SikorskyArrive = 0 do
22520: NOP4
22524: PUSH
22525: LD_INT 0
22527: EQUAL
22528: IFFALSE 22634
22530: GO 22532
22532: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22533: LD_INT 6
22535: PPUSH
22536: LD_INT 3
22538: PPUSH
22539: LD_INT 8
22541: PPUSH
22542: LD_INT 9
22544: PPUSH
22545: NOP4
22549: PUSH
22550: LD_INT 7
22552: PPUSH
22553: LD_INT 10
22555: PPUSH
22556: NOP4
22560: PUSH
22561: LD_INT 8
22563: PPUSH
22564: LD_INT 10
22566: PPUSH
22567: NOP4
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: LIST
22576: PUSH
22577: NOP4
22581: ARRAY
22582: PPUSH
22583: LD_INT 0
22585: PPUSH
22586: LD_INT 0
22588: PPUSH
22589: LD_INT 0
22591: PPUSH
22592: LD_INT 0
22594: PPUSH
22595: NOP4
22599: PPUSH
22600: NOP4
22604: PPUSH
22605: NOP4
22609: PPUSH
22610: LD_INT 16
22612: PPUSH
22613: LD_INT 7
22615: PPUSH
22616: LD_INT 1
22618: PPUSH
22619: LD_INT 1
22621: PPUSH
22622: LD_INT 3
22624: PPUSH
22625: NOP4
22629: PPUSH
22630: NOP4
22634: END
// every 35 35$0 trigger SikorskyArrive = 0 do
22635: NOP4
22639: PUSH
22640: LD_INT 0
22642: EQUAL
22643: IFFALSE 22743
22645: GO 22647
22647: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
22648: LD_INT 16
22650: PPUSH
22651: LD_INT 6
22653: PPUSH
22654: LD_INT 5
22656: PPUSH
22657: LD_INT 8
22659: PPUSH
22660: NOP4
22664: PUSH
22665: LD_INT 6
22667: PPUSH
22668: LD_INT 9
22670: PPUSH
22671: NOP4
22675: PUSH
22676: LD_INT 7
22678: PPUSH
22679: LD_INT 9
22681: PPUSH
22682: NOP4
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: LIST
22691: PUSH
22692: NOP4
22696: ARRAY
22697: PPUSH
22698: NOP4
22702: PPUSH
22703: NOP4
22707: PPUSH
22708: NOP4
22712: PPUSH
22713: LD_INT 3
22715: PPUSH
22716: LD_INT 1
22718: PPUSH
22719: LD_INT 3
22721: PPUSH
22722: LD_INT 44
22724: PUSH
22725: LD_INT 46
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PPUSH
22732: EMPTY
22733: PPUSH
22734: EMPTY
22735: PPUSH
22736: LD_INT 1
22738: PPUSH
22739: NOP4
22743: END
// every 0 0$1 trigger timerStatus = 1 do
22744: NOP4
22748: PUSH
22749: LD_INT 1
22751: EQUAL
22752: IFFALSE 22789
22754: GO 22756
22756: DISABLE
// begin enable ;
22757: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
22758: LD_ADDR_OWVAR 47
22762: PUSH
22763: LD_STRING #Am08-1
22765: PUSH
22766: NOP4
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
22775: NOP4
22779: PUSH
22780: NOP4
22784: PUSH
22785: LD_INT 35
22787: MINUS
22788: ST_TO_ADDR
// end ; end_of_file
22789: END
// every 1 1$0 do
22790: GO 22792
22792: DISABLE
// begin if supply <= 13 and supply > 7 then
22793: NOP4
22797: PUSH
22798: LD_INT 13
22800: LESSEQUAL
22801: PUSH
22802: NOP4
22806: PUSH
22807: LD_INT 7
22809: GREATER
22810: AND
22811: IFFALSE 22834
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
22813: LD_INT 3
22815: PPUSH
22816: LD_INT 5
22818: PPUSH
22819: NOP4
22823: PPUSH
22824: LD_INT 5
22826: PPUSH
22827: LD_INT 1
22829: PPUSH
22830: NOP4
// if supply <= 7 and supply > 4 then
22834: NOP4
22838: PUSH
22839: LD_INT 7
22841: LESSEQUAL
22842: PUSH
22843: NOP4
22847: PUSH
22848: LD_INT 4
22850: GREATER
22851: AND
22852: IFFALSE 22875
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
22854: LD_INT 3
22856: PPUSH
22857: LD_INT 5
22859: PPUSH
22860: NOP4
22864: PPUSH
22865: LD_INT 20
22867: PPUSH
22868: LD_INT 1
22870: PPUSH
22871: NOP4
// if supply <= 4 and supply > 0 then
22875: NOP4
22879: PUSH
22880: LD_INT 4
22882: LESSEQUAL
22883: PUSH
22884: NOP4
22888: PUSH
22889: LD_INT 0
22891: GREATER
22892: AND
22893: IFFALSE 22916
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
22895: LD_INT 3
22897: PPUSH
22898: LD_INT 5
22900: PPUSH
22901: NOP4
22905: PPUSH
22906: LD_INT 21
22908: PPUSH
22909: LD_INT 1
22911: PPUSH
22912: NOP4
// if supply > 0 then
22916: NOP4
22920: PUSH
22921: LD_INT 0
22923: GREATER
22924: IFFALSE 22941
// begin supply = supply - 1 ;
22926: NOP4
22930: PUSH
22931: NOP4
22935: PUSH
22936: LD_INT 1
22938: MINUS
22939: ST_TO_ADDR
// enable ;
22940: ENABLE
// end ; end ; end_of_file
22941: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
22942: NOP4
22946: PUSH
22947: LD_INT 1
22949: EQUAL
22950: PUSH
22951: NOP4
22955: PPUSH
22956: NOP4
22960: AND
22961: IFFALSE 22973
22963: GO 22965
22965: DISABLE
// YouLost ( JMM ) ;
22966: LD_STRING JMM
22968: PPUSH
22969: NOP4
22973: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
22974: NOP4
22978: PUSH
22979: LD_INT 1
22981: EQUAL
22982: PUSH
22983: NOP4
22987: PPUSH
22988: NOP4
22992: AND
22993: IFFALSE 23025
22995: GO 22997
22997: DISABLE
// begin DialogueOn ;
22998: NOP4
// SayRadio ( Powell , D8a-Pow-1 ) ;
23002: NOP4
23006: PPUSH
23007: LD_STRING D8a-Pow-1
23009: PPUSH
23010: NOP4
// DialogueOff ;
23014: NOP4
// YouLost ( Dismissed ) ;
23018: LD_STRING Dismissed
23020: PPUSH
23021: NOP4
// end ;
23025: END
// every 0 0$1 trigger IsDead ( amDepot ) do
23026: NOP4
23030: PPUSH
23031: NOP4
23035: IFFALSE 23047
23037: GO 23039
23039: DISABLE
// YouLost ( Destroyed ) ; end_of_file
23040: LD_STRING Destroyed
23042: PPUSH
23043: NOP4
23047: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
23048: NOP4
23052: PPUSH
23053: NOP4
23057: IFFALSE 23402
23059: GO 23061
23061: DISABLE
23062: LD_INT 0
23064: PPUSH
// begin russianAI = 0 ;
23065: NOP4
23069: PUSH
23070: LD_INT 0
23072: ST_TO_ADDR
// escapeAvalaible = 1 ;
23073: NOP4
23077: PUSH
23078: LD_INT 1
23080: ST_TO_ADDR
// InGameOn ;
23081: NOP4
// SetAttitude ( 3 , 1 , att_friend , false ) ;
23085: LD_INT 3
23087: PPUSH
23088: LD_INT 1
23090: PPUSH
23091: LD_INT 1
23093: PPUSH
23094: LD_INT 0
23096: PPUSH
23097: NOP4
// SetAttitude ( 6 , 1 , att_friend , false ) ;
23101: LD_INT 6
23103: PPUSH
23104: LD_INT 1
23106: PPUSH
23107: LD_INT 1
23109: PPUSH
23110: LD_INT 0
23112: PPUSH
23113: NOP4
// ChangeSideFog ( 3 , 1 ) ;
23117: LD_INT 3
23119: PPUSH
23120: LD_INT 1
23122: PPUSH
23123: NOP4
// CenterOnXY ( 97 , 91 ) ;
23127: LD_INT 97
23129: PPUSH
23130: LD_INT 91
23132: PPUSH
23133: NOP4
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
23137: LD_INT 22
23139: PUSH
23140: LD_INT 3
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 21
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PPUSH
23161: NOP4
23165: PPUSH
23166: NOP4
// wait ( 0 0$01 ) ;
23170: LD_INT 35
23172: PPUSH
23173: NOP4
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23177: LD_INT 22
23179: PUSH
23180: LD_INT 3
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 21
23189: PUSH
23190: LD_INT 1
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PPUSH
23201: NOP4
23205: PPUSH
23206: LD_INT 124
23208: PPUSH
23209: LD_INT 98
23211: PPUSH
23212: NOP4
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
23216: LD_INT 22
23218: PUSH
23219: LD_INT 6
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 21
23228: PUSH
23229: LD_INT 1
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PPUSH
23240: NOP4
23244: PPUSH
23245: NOP4
// wait ( 0 0$01 ) ;
23249: LD_INT 35
23251: PPUSH
23252: NOP4
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23256: LD_INT 22
23258: PUSH
23259: LD_INT 6
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 21
23268: PUSH
23269: LD_INT 1
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PPUSH
23280: NOP4
23284: PPUSH
23285: LD_INT 124
23287: PPUSH
23288: LD_INT 98
23290: PPUSH
23291: NOP4
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23295: LD_INT 22
23297: PUSH
23298: LD_INT 1
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 21
23307: PUSH
23308: LD_INT 1
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PPUSH
23319: NOP4
23323: PPUSH
23324: LD_INT 124
23326: PPUSH
23327: LD_INT 98
23329: PPUSH
23330: NOP4
// wait ( 0 0$4 ) ;
23334: LD_INT 140
23336: PPUSH
23337: NOP4
// CenterOnXY ( 124 , 98 ) ;
23341: LD_INT 124
23343: PPUSH
23344: LD_INT 98
23346: PPUSH
23347: NOP4
// if SikorskyStatus = 1 then
23351: NOP4
23355: PUSH
23356: LD_INT 1
23358: EQUAL
23359: IFFALSE 23373
// begin Say ( Sikorski , D9-Sik-1 ) ;
23361: NOP4
23365: PPUSH
23366: LD_STRING D9-Sik-1
23368: PPUSH
23369: NOP4
// end ; if SikorskyStatus = 2 then
23373: NOP4
23377: PUSH
23378: LD_INT 2
23380: EQUAL
23381: IFFALSE 23402
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
23383: NOP4
23387: PPUSH
23388: LD_STRING D8b-Pow-1
23390: PPUSH
23391: NOP4
// YouLost ( Dismissed ) ;
23395: LD_STRING Dismissed
23397: PPUSH
23398: NOP4
// end ; end ;
23402: PPOPN 1
23404: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
23405: LD_INT 23
23407: PUSH
23408: LD_INT 3
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 21
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 24
23427: PUSH
23428: LD_INT 250
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: LIST
23439: PPUSH
23440: NOP4
23444: PUSH
23445: LD_INT 0
23447: EQUAL
23448: IFFALSE 23457
23450: GO 23452
23452: DISABLE
// FinishMission ;
23453: NOP4
23457: END
// export function FinishMission ; var tmp ; begin
23458: LD_INT 0
23460: PPUSH
23461: PPUSH
// AddMedal ( med1 , 1 ) ;
23462: LD_STRING med1
23464: PPUSH
23465: LD_INT 1
23467: PPUSH
23468: NOP4
// AddMedal ( med2 , 1 ) ;
23472: LD_STRING med2
23474: PPUSH
23475: LD_INT 1
23477: PPUSH
23478: NOP4
// AddMedal ( perfect , 1 ) ;
23482: LD_STRING perfect
23484: PPUSH
23485: LD_INT 1
23487: PPUSH
23488: NOP4
// GiveMedals ( Main ) ;
23492: LD_STRING Main
23494: PPUSH
23495: NOP4
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
23499: LD_INT 22
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 23
23511: PUSH
23512: LD_INT 1
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 21
23521: PUSH
23522: LD_INT 1
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 2
23531: PUSH
23532: LD_INT 25
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 25
23544: PUSH
23545: LD_INT 2
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 25
23554: PUSH
23555: LD_INT 3
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 25
23564: PUSH
23565: LD_INT 4
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: PPUSH
23585: NOP4
23589: PPUSH
23590: NOP4
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23594: NOP4
23598: PPUSH
23599: NOP4
23603: PUSH
23604: LD_STRING JMM
23606: STR
23607: PPUSH
23608: NOP4
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23612: NOP4
23616: PPUSH
23617: NOP4
23621: PUSH
23622: LD_STRING Brown
23624: STR
23625: PPUSH
23626: NOP4
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23630: NOP4
23634: PPUSH
23635: NOP4
23639: PUSH
23640: LD_STRING Donaldson
23642: STR
23643: PPUSH
23644: NOP4
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23648: NOP4
23652: PPUSH
23653: NOP4
23657: PUSH
23658: LD_STRING Bobby
23660: STR
23661: PPUSH
23662: NOP4
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23666: NOP4
23670: PPUSH
23671: NOP4
23675: PUSH
23676: LD_STRING Cyrus
23678: STR
23679: PPUSH
23680: NOP4
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23684: NOP4
23688: PPUSH
23689: NOP4
23693: PUSH
23694: LD_STRING Lisa
23696: STR
23697: PPUSH
23698: NOP4
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23702: NOP4
23706: PPUSH
23707: NOP4
23711: PUSH
23712: LD_STRING Frank
23714: STR
23715: PPUSH
23716: NOP4
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23720: NOP4
23724: PPUSH
23725: NOP4
23729: PUSH
23730: LD_STRING Gladstone
23732: STR
23733: PPUSH
23734: NOP4
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
23738: NOP4
23742: PPUSH
23743: NOP4
23747: PUSH
23748: LD_STRING Kikuchi
23750: STR
23751: PPUSH
23752: NOP4
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23756: NOP4
23760: PPUSH
23761: NOP4
23765: PUSH
23766: LD_STRING Denis
23768: STR
23769: PPUSH
23770: NOP4
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23774: NOP4
23778: PPUSH
23779: NOP4
23783: PUSH
23784: LD_STRING Joan
23786: STR
23787: PPUSH
23788: NOP4
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
23792: NOP4
23796: PPUSH
23797: NOP4
23801: PUSH
23802: LD_STRING Houten
23804: STR
23805: PPUSH
23806: NOP4
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
23810: LD_INT 50
23812: PUSH
23813: EMPTY
23814: LIST
23815: PUSH
23816: LD_INT 22
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 21
23828: PUSH
23829: LD_INT 1
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: LD_INT 25
23841: PUSH
23842: LD_INT 1
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 25
23851: PUSH
23852: LD_INT 2
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 25
23861: PUSH
23862: LD_INT 3
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 25
23871: PUSH
23872: LD_INT 4
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: PPUSH
23892: NOP4
23896: PUSH
23897: NOP4
23901: PUSH
23902: NOP4
23906: PUSH
23907: NOP4
23911: PUSH
23912: NOP4
23916: PUSH
23917: NOP4
23921: PUSH
23922: NOP4
23926: PUSH
23927: NOP4
23931: PUSH
23932: NOP4
23936: PUSH
23937: NOP4
23941: PUSH
23942: NOP4
23946: PUSH
23947: NOP4
23951: PUSH
23952: NOP4
23956: PUSH
23957: NOP4
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: DIFF
23977: PPUSH
23978: LD_STRING 08_other_survivors
23980: PPUSH
23981: NOP4
// SaveBase ( GammaBaseArea ) ;
23985: LD_INT 23
23987: PPUSH
23988: NOP4
// YouWin ;
23992: NOP4
// end ;
23996: LD_VAR 0 1
24000: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
24001: LD_INT 0
24003: PPUSH
24004: PPUSH
24005: PPUSH
24006: PPUSH
// gammaBase = [ ] ;
24007: NOP4
24011: PUSH
24012: EMPTY
24013: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
24014: NOP4
24018: PUSH
24019: NOP4
24023: PPUSH
24024: LD_INT 22
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 21
24036: PUSH
24037: LD_INT 3
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 50
24046: PUSH
24047: EMPTY
24048: LIST
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: LIST
24054: PPUSH
24055: NOP4
24059: ST_TO_ADDR
// for i in buildings do
24060: NOP4
24064: PUSH
24065: NOP4
24069: PUSH
24070: FOR_IN
24071: IFFALSE 24508
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
24073: NOP4
24077: PPUSH
24078: NOP4
24082: PUSH
24083: LD_INT 6
24085: PUSH
24086: LD_INT 7
24088: PUSH
24089: LD_INT 8
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: LIST
24096: IN
24097: IFFALSE 24211
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
24099: NOP4
24103: PUSH
24104: NOP4
24108: PUSH
24109: NOP4
24113: PPUSH
24114: NOP4
24118: PUSH
24119: NOP4
24123: PPUSH
24124: NOP4
24128: PUSH
24129: NOP4
24133: PPUSH
24134: NOP4
24138: PUSH
24139: NOP4
24143: PPUSH
24144: NOP4
24148: PUSH
24149: NOP4
24153: PPUSH
24154: NOP4
24158: PUSH
24159: NOP4
24163: PPUSH
24164: NOP4
24168: PUSH
24169: NOP4
24173: PPUSH
24174: LD_INT 1
24176: PPUSH
24177: NOP4
24181: PUSH
24182: NOP4
24186: PPUSH
24187: LD_INT 2
24189: PPUSH
24190: NOP4
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: PUSH
24205: EMPTY
24206: LIST
24207: ADD
24208: ST_TO_ADDR
24209: GO 24506
// if GetBType ( i ) = b_bunker then
24211: NOP4
24215: PPUSH
24216: NOP4
24220: PUSH
24221: LD_INT 32
24223: EQUAL
24224: IFFALSE 24321
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
24226: NOP4
24230: PUSH
24231: NOP4
24235: PUSH
24236: NOP4
24240: PPUSH
24241: NOP4
24245: PUSH
24246: NOP4
24250: PPUSH
24251: NOP4
24255: PUSH
24256: NOP4
24260: PPUSH
24261: NOP4
24265: PUSH
24266: NOP4
24270: PPUSH
24271: NOP4
24275: PUSH
24276: NOP4
24280: PPUSH
24281: NOP4
24285: PUSH
24286: NOP4
24290: PPUSH
24291: NOP4
24295: PUSH
24296: NOP4
24300: PPUSH
24301: NOP4
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: PUSH
24315: EMPTY
24316: LIST
24317: ADD
24318: ST_TO_ADDR
24319: GO 24506
// if GetBType ( i ) = b_factory then
24321: NOP4
24325: PPUSH
24326: NOP4
24330: PUSH
24331: LD_INT 3
24333: EQUAL
24334: IFFALSE 24424
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
24336: NOP4
24340: PUSH
24341: NOP4
24345: PPUSH
24346: LD_INT 1
24348: PPUSH
24349: NOP4
24353: PPUSH
24354: NOP4
24358: PUSH
24359: NOP4
24363: PPUSH
24364: NOP4
24368: PUSH
24369: NOP4
24373: PPUSH
24374: NOP4
24378: PUSH
24379: NOP4
24383: PPUSH
24384: NOP4
24388: PUSH
24389: NOP4
24393: PPUSH
24394: NOP4
24398: PUSH
24399: NOP4
24403: PPUSH
24404: NOP4
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: PPUSH
24417: NOP4
24421: ST_TO_ADDR
24422: GO 24506
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
24424: NOP4
24428: PUSH
24429: NOP4
24433: PUSH
24434: NOP4
24438: PPUSH
24439: NOP4
24443: PUSH
24444: NOP4
24448: PPUSH
24449: NOP4
24453: PUSH
24454: NOP4
24458: PPUSH
24459: NOP4
24463: PUSH
24464: NOP4
24468: PPUSH
24469: NOP4
24473: PUSH
24474: NOP4
24478: PPUSH
24479: NOP4
24483: PUSH
24484: NOP4
24488: PPUSH
24489: NOP4
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: PUSH
24502: EMPTY
24503: LIST
24504: ADD
24505: ST_TO_ADDR
// end ;
24506: GO 24070
24508: POP
24509: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
24510: NOP4
24514: PPUSH
24515: LD_STRING 08_GammaBase
24517: PPUSH
24518: NOP4
// end ;
24522: LD_VAR 0 2
24526: RET
=======
20911: LD_EXP 36
20915: PUSH
20916: LD_INT 0
20918: EQUAL
20919: IFFALSE 20931
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
20921: LD_INT 3
20923: PPUSH
20924: LD_INT 6
20926: PPUSH
20927: CALL 7516 0 2
// if escapeAvalaible = 0 then
20931: LD_EXP 36
20935: PUSH
20936: LD_INT 0
20938: EQUAL
20939: IFFALSE 20951
// DefenseBase ( 1 , RussianBaseTerritory ) ;
20941: LD_INT 1
20943: PPUSH
20944: LD_INT 24
20946: PPUSH
20947: CALL 8310 0 2
// if russianAI = 1 then
20951: LD_EXP 27
20955: PUSH
20956: LD_INT 1
20958: EQUAL
20959: IFFALSE 21029
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
20961: LD_INT 3
20963: PPUSH
20964: LD_INT 7
20966: PPUSH
20967: LD_INT 6
20969: PPUSH
20970: LD_EXP 29
20974: PPUSH
20975: CALL 10384 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
20979: LD_INT 3
20981: PPUSH
20982: LD_EXP 28
20986: PPUSH
20987: LD_INT 6
20989: PPUSH
20990: LD_EXP 31
20994: PPUSH
20995: CALL 9993 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
20999: LD_INT 3
21001: PPUSH
21002: LD_INT 26
21004: PPUSH
21005: LD_EXP 45
21009: PPUSH
21010: LD_EXP 46
21014: PPUSH
21015: CALL 8861 0 4
// AttackNearBuildings ( 3 , 1 ) ;
21019: LD_INT 3
21021: PPUSH
21022: LD_INT 1
21024: PPUSH
21025: CALL 10928 0 2
// end ; if SikorskyArrive = 1 then
21029: LD_EXP 18
21033: PUSH
21034: LD_INT 1
21036: EQUAL
21037: IFFALSE 21055
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
21039: LD_INT 3
21041: PPUSH
21042: LD_INT 10
21044: PPUSH
21045: LD_INT 53
21047: PPUSH
21048: LD_INT 59
21050: PPUSH
21051: CALL 8658 0 4
// end ;
21055: END
// every 0 0$1 trigger russianAI = 1 do var i ;
21056: LD_EXP 27
21060: PUSH
21061: LD_INT 1
21063: EQUAL
21064: IFFALSE 21340
21066: GO 21068
21068: DISABLE
21069: LD_INT 0
21071: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21072: LD_ADDR_VAR 0 1
21076: PUSH
21077: LD_INT 22
21079: PUSH
21080: LD_INT 3
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 21
21089: PUSH
21090: LD_INT 3
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 30
21099: PUSH
21100: LD_INT 32
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 3
21109: PUSH
21110: LD_INT 2
21112: PUSH
21113: LD_INT 35
21115: PUSH
21116: LD_INT 43
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 35
21125: PUSH
21126: LD_INT 44
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 35
21135: PUSH
21136: LD_INT 46
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: PPUSH
21159: CALL_OW 69
21163: PUSH
21164: FOR_IN
21165: IFFALSE 21204
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21167: LD_VAR 0 1
21171: PPUSH
21172: LD_INT 43
21174: PUSH
21175: LD_INT 44
21177: PUSH
21178: LD_INT 46
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 1
21188: PPUSH
21189: LD_INT 3
21191: PPUSH
21192: CALL_OW 12
21196: ARRAY
21197: PPUSH
21198: CALL_OW 431
21202: GO 21164
21204: POP
21205: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21206: LD_ADDR_VAR 0 1
21210: PUSH
21211: LD_INT 22
21213: PUSH
21214: LD_INT 3
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 21
21223: PUSH
21224: LD_INT 3
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 30
21233: PUSH
21234: LD_INT 33
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 3
21243: PUSH
21244: LD_INT 2
21246: PUSH
21247: LD_INT 35
21249: PUSH
21250: LD_INT 43
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 35
21259: PUSH
21260: LD_INT 44
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 35
21269: PUSH
21270: LD_INT 46
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: PPUSH
21293: CALL_OW 69
21297: PUSH
21298: FOR_IN
21299: IFFALSE 21338
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21301: LD_VAR 0 1
21305: PPUSH
21306: LD_INT 43
21308: PUSH
21309: LD_INT 44
21311: PUSH
21312: LD_INT 46
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 1
21322: PPUSH
21323: LD_INT 3
21325: PPUSH
21326: CALL_OW 12
21330: ARRAY
21331: PPUSH
21332: CALL_OW 431
21336: GO 21298
21338: POP
21339: POP
// end ;
21340: PPOPN 1
21342: END
// every 0 0$1 trigger SikorskyAI = 1 do
21343: LD_EXP 20
21347: PUSH
21348: LD_INT 1
21350: EQUAL
21351: IFFALSE 21386
21353: GO 21355
21355: DISABLE
// begin enable ;
21356: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
21357: LD_INT 4
21359: PPUSH
21360: LD_INT 10
21362: PPUSH
21363: LD_INT 93
21365: PPUSH
21366: LD_INT 93
21368: PPUSH
21369: CALL 8658 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
21373: LD_INT 4
21375: PPUSH
21376: LD_INT 11
21378: PPUSH
21379: LD_INT 3
21381: PPUSH
21382: CALL 15140 0 3
// end ;
21386: END
// every 0 0$1 trigger SikorskyAI = 1 do
21387: LD_EXP 20
21391: PUSH
21392: LD_INT 1
21394: EQUAL
21395: IFFALSE 21407
21397: GO 21399
21399: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
21400: LD_INT 4
21402: PPUSH
21403: CALL 9665 0 1
21407: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21408: LD_EXP 27
21412: PUSH
21413: LD_INT 1
21415: EQUAL
21416: PUSH
21417: LD_EXP 30
21421: PPUSH
21422: CALL_OW 302
21426: AND
21427: PUSH
21428: LD_EXP 30
21432: PPUSH
21433: CALL_OW 255
21437: PUSH
21438: LD_INT 3
21440: EQUAL
21441: AND
21442: PUSH
21443: LD_INT 22
21445: PUSH
21446: LD_INT 3
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 21
21455: PUSH
21456: LD_INT 2
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 33
21465: PUSH
21466: LD_INT 3
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: LIST
21477: PPUSH
21478: CALL_OW 69
21482: PUSH
21483: LD_INT 0
21485: EQUAL
21486: AND
21487: IFFALSE 21721
21489: GO 21491
21491: DISABLE
// begin enable ;
21492: ENABLE
// if Difficulty = 1 then
21493: LD_OWVAR 67
21497: PUSH
21498: LD_INT 1
21500: EQUAL
21501: IFFALSE 21569
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
21503: LD_INT 3
21505: PPUSH
21506: LD_EXP 30
21510: PPUSH
21511: LD_INT 5
21513: PPUSH
21514: LD_INT 8
21516: PPUSH
21517: CALL_OW 12
21521: PPUSH
21522: LD_INT 43
21524: PUSH
21525: LD_INT 43
21527: PUSH
21528: LD_INT 43
21530: PUSH
21531: LD_INT 43
21533: PUSH
21534: LD_INT 44
21536: PUSH
21537: LD_INT 44
21539: PUSH
21540: LD_INT 44
21542: PUSH
21543: LD_INT 46
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: PPUSH
21556: LD_INT 1
21558: PPUSH
21559: LD_INT 3
21561: PPUSH
21562: LD_INT 24
21564: PPUSH
21565: CALL 8504 0 7
// if Difficulty = 2 then
21569: LD_OWVAR 67
21573: PUSH
21574: LD_INT 2
21576: EQUAL
21577: IFFALSE 21645
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
21579: LD_INT 3
21581: PPUSH
21582: LD_EXP 30
21586: PPUSH
21587: LD_INT 6
21589: PPUSH
21590: LD_INT 8
21592: PPUSH
21593: CALL_OW 12
21597: PPUSH
21598: LD_INT 43
21600: PUSH
21601: LD_INT 43
21603: PUSH
21604: LD_INT 44
21606: PUSH
21607: LD_INT 44
21609: PUSH
21610: LD_INT 44
21612: PUSH
21613: LD_INT 44
21615: PUSH
21616: LD_INT 46
21618: PUSH
21619: LD_INT 46
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: PPUSH
21632: LD_INT 1
21634: PPUSH
21635: LD_INT 3
21637: PPUSH
21638: LD_INT 24
21640: PPUSH
21641: CALL 8504 0 7
// if Difficulty = 3 then
21645: LD_OWVAR 67
21649: PUSH
21650: LD_INT 3
21652: EQUAL
21653: IFFALSE 21721
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
21655: LD_INT 3
21657: PPUSH
21658: LD_EXP 30
21662: PPUSH
21663: LD_INT 7
21665: PPUSH
21666: LD_INT 8
21668: PPUSH
21669: CALL_OW 12
21673: PPUSH
21674: LD_INT 43
21676: PUSH
21677: LD_INT 43
21679: PUSH
21680: LD_INT 44
21682: PUSH
21683: LD_INT 44
21685: PUSH
21686: LD_INT 44
21688: PUSH
21689: LD_INT 46
21691: PUSH
21692: LD_INT 46
21694: PUSH
21695: LD_INT 46
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: PPUSH
21708: LD_INT 1
21710: PPUSH
21711: LD_INT 3
21713: PPUSH
21714: LD_INT 24
21716: PPUSH
21717: CALL 8504 0 7
// end ;
21721: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
21722: LD_EXP 38
21726: PUSH
21727: LD_INT 1
21729: EQUAL
21730: IFFALSE 21812
21732: GO 21734
21734: DISABLE
21735: LD_INT 0
21737: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
21738: LD_ADDR_VAR 0 1
21742: PUSH
21743: LD_INT 22
21745: PUSH
21746: LD_INT 1
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 21
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 3
21765: PUSH
21766: LD_INT 24
21768: PUSH
21769: LD_INT 650
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: LIST
21784: PPUSH
21785: CALL_OW 69
21789: PUSH
21790: FOR_IN
21791: IFFALSE 21810
// ComMoveXY ( i , 51 , 12 ) ;
21793: LD_VAR 0 1
21797: PPUSH
21798: LD_INT 51
21800: PPUSH
21801: LD_INT 12
21803: PPUSH
21804: CALL_OW 111
21808: GO 21790
21810: POP
21811: POP
// end ; end_of_file
21812: PPOPN 1
21814: END
// every 3 3$20 trigger firstAttack = 1 do
21815: LD_EXP 33
21819: PUSH
21820: LD_INT 1
21822: EQUAL
21823: IFFALSE 21929
21825: GO 21827
21827: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21828: LD_INT 6
21830: PPUSH
21831: LD_INT 3
21833: PPUSH
21834: LD_INT 5
21836: PPUSH
21837: LD_INT 6
21839: PPUSH
21840: CALL_OW 12
21844: PUSH
21845: LD_INT 5
21847: PPUSH
21848: LD_INT 6
21850: PPUSH
21851: CALL_OW 12
21855: PUSH
21856: LD_INT 5
21858: PPUSH
21859: LD_INT 6
21861: PPUSH
21862: CALL_OW 12
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: LIST
21871: PUSH
21872: LD_OWVAR 67
21876: ARRAY
21877: PPUSH
21878: LD_INT 0
21880: PPUSH
21881: LD_INT 0
21883: PPUSH
21884: LD_INT 0
21886: PPUSH
21887: LD_INT 0
21889: PPUSH
21890: LD_EXP 25
21894: PPUSH
21895: LD_EXP 26
21899: PPUSH
21900: CALL_OW 12
21904: PPUSH
21905: LD_INT 16
21907: PPUSH
21908: LD_INT 7
21910: PPUSH
21911: LD_INT 1
21913: PPUSH
21914: LD_INT 1
21916: PPUSH
21917: LD_INT 3
21919: PPUSH
21920: CALL_OW 12
21924: PPUSH
21925: CALL 11158 0 12
21929: END
// every 3 3$40 trigger firstAttack = 1 do
21930: LD_EXP 33
21934: PUSH
21935: LD_INT 1
21937: EQUAL
21938: IFFALSE 22030
21940: GO 21942
21942: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
21943: LD_INT 16
21945: PPUSH
21946: LD_INT 6
21948: PPUSH
21949: LD_INT 3
21951: PPUSH
21952: LD_INT 4
21954: PPUSH
21955: CALL_OW 12
21959: PUSH
21960: LD_INT 4
21962: PPUSH
21963: LD_INT 5
21965: PPUSH
21966: CALL_OW 12
21970: PUSH
21971: LD_INT 5
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: LIST
21978: PUSH
21979: LD_OWVAR 67
21983: ARRAY
21984: PPUSH
21985: LD_EXP 25
21989: PPUSH
21990: LD_EXP 26
21994: PPUSH
21995: CALL_OW 12
21999: PPUSH
22000: LD_INT 3
22002: PPUSH
22003: LD_INT 1
22005: PPUSH
22006: LD_INT 3
22008: PPUSH
22009: LD_INT 44
22011: PUSH
22012: LD_INT 46
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PPUSH
22019: EMPTY
22020: PPUSH
22021: EMPTY
22022: PPUSH
22023: LD_INT 1
22025: PPUSH
22026: CALL 13451 0 11
22030: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
22031: LD_EXP 33
22035: PUSH
22036: LD_INT 1
22038: EQUAL
22039: PUSH
22040: LD_EXP 39
22044: PUSH
22045: LD_INT 0
22047: EQUAL
22048: AND
22049: IFFALSE 22155
22051: GO 22053
22053: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22054: LD_INT 6
22056: PPUSH
22057: LD_INT 3
22059: PPUSH
22060: LD_INT 5
22062: PPUSH
22063: LD_INT 6
22065: PPUSH
22066: CALL_OW 12
22070: PUSH
22071: LD_INT 5
22073: PPUSH
22074: LD_INT 6
22076: PPUSH
22077: CALL_OW 12
22081: PUSH
22082: LD_INT 5
22084: PPUSH
22085: LD_INT 6
22087: PPUSH
22088: CALL_OW 12
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: LIST
22097: PUSH
22098: LD_OWVAR 67
22102: ARRAY
22103: PPUSH
22104: LD_INT 0
22106: PPUSH
22107: LD_INT 0
22109: PPUSH
22110: LD_INT 0
22112: PPUSH
22113: LD_INT 0
22115: PPUSH
22116: LD_EXP 25
22120: PPUSH
22121: LD_EXP 26
22125: PPUSH
22126: CALL_OW 12
22130: PPUSH
22131: LD_INT 16
22133: PPUSH
22134: LD_INT 7
22136: PPUSH
22137: LD_INT 1
22139: PPUSH
22140: LD_INT 1
22142: PPUSH
22143: LD_INT 3
22145: PPUSH
22146: CALL_OW 12
22150: PPUSH
22151: CALL 11158 0 12
22155: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
22156: LD_EXP 33
22160: PUSH
22161: LD_INT 1
22163: EQUAL
22164: PUSH
22165: LD_EXP 39
22169: PUSH
22170: LD_INT 0
22172: EQUAL
22173: AND
22174: IFFALSE 22270
22176: GO 22178
22178: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22179: LD_INT 16
22181: PPUSH
22182: LD_INT 6
22184: PPUSH
22185: LD_INT 5
22187: PPUSH
22188: LD_INT 6
22190: PPUSH
22191: CALL_OW 12
22195: PUSH
22196: LD_INT 6
22198: PPUSH
22199: LD_INT 7
22201: PPUSH
22202: CALL_OW 12
22206: PUSH
22207: LD_INT 7
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: LIST
22214: PUSH
22215: LD_OWVAR 67
22219: ARRAY
22220: PPUSH
22221: LD_EXP 25
22225: PPUSH
22226: LD_EXP 26
22230: PPUSH
22231: CALL_OW 12
22235: PPUSH
22236: LD_INT 3
22238: PPUSH
22239: LD_INT 1
22241: PPUSH
22242: LD_INT 3
22244: PPUSH
22245: LD_INT 43
22247: PUSH
22248: LD_INT 44
22250: PUSH
22251: LD_INT 46
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: LIST
22258: PPUSH
22259: EMPTY
22260: PPUSH
22261: EMPTY
22262: PPUSH
22263: LD_INT 1
22265: PPUSH
22266: CALL 13451 0 11
22270: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
22271: LD_EXP 33
22275: PUSH
22276: LD_INT 1
22278: EQUAL
22279: PUSH
22280: LD_EXP 39
22284: PUSH
22285: LD_INT 0
22287: EQUAL
22288: AND
22289: IFFALSE 22365
22291: GO 22293
22293: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22294: LD_INT 16
22296: PPUSH
22297: LD_INT 6
22299: PPUSH
22300: LD_INT 5
22302: PUSH
22303: LD_INT 6
22305: PUSH
22306: LD_INT 7
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: LIST
22313: PUSH
22314: LD_OWVAR 67
22318: ARRAY
22319: PPUSH
22320: LD_EXP 25
22324: PPUSH
22325: LD_EXP 26
22329: PPUSH
22330: CALL_OW 12
22334: PPUSH
22335: LD_INT 3
22337: PPUSH
22338: LD_INT 1
22340: PPUSH
22341: LD_INT 3
22343: PPUSH
22344: LD_INT 44
22346: PUSH
22347: LD_INT 46
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PPUSH
22354: EMPTY
22355: PPUSH
22356: EMPTY
22357: PPUSH
22358: LD_INT 1
22360: PPUSH
22361: CALL 13451 0 11
22365: END
// every 1 1$00 trigger secondAttack = 1 do
22366: LD_EXP 34
22370: PUSH
22371: LD_INT 1
22373: EQUAL
22374: IFFALSE 22480
22376: GO 22378
22378: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22379: LD_INT 6
22381: PPUSH
22382: LD_INT 3
22384: PPUSH
22385: LD_INT 4
22387: PPUSH
22388: LD_INT 7
22390: PPUSH
22391: CALL_OW 12
22395: PUSH
22396: LD_INT 6
22398: PPUSH
22399: LD_INT 7
22401: PPUSH
22402: CALL_OW 12
22406: PUSH
22407: LD_INT 6
22409: PPUSH
22410: LD_INT 10
22412: PPUSH
22413: CALL_OW 12
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: LIST
22422: PUSH
22423: LD_OWVAR 67
22427: ARRAY
22428: PPUSH
22429: LD_INT 0
22431: PPUSH
22432: LD_INT 0
22434: PPUSH
22435: LD_INT 0
22437: PPUSH
22438: LD_INT 0
22440: PPUSH
22441: LD_EXP 25
22445: PPUSH
22446: LD_EXP 26
22450: PPUSH
22451: CALL_OW 12
22455: PPUSH
22456: LD_INT 16
22458: PPUSH
22459: LD_INT 7
22461: PPUSH
22462: LD_INT 1
22464: PPUSH
22465: LD_INT 1
22467: PPUSH
22468: LD_INT 3
22470: PPUSH
22471: CALL_OW 12
22475: PPUSH
22476: CALL 11158 0 12
22480: END
// every 1 1$00 trigger secondAttack = 1 do
22481: LD_EXP 34
22485: PUSH
22486: LD_INT 1
22488: EQUAL
22489: IFFALSE 22593
22491: GO 22493
22493: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22494: LD_INT 16
22496: PPUSH
22497: LD_INT 6
22499: PPUSH
22500: LD_INT 5
22502: PPUSH
22503: LD_INT 8
22505: PPUSH
22506: CALL_OW 12
22510: PUSH
22511: LD_INT 6
22513: PPUSH
22514: LD_INT 9
22516: PPUSH
22517: CALL_OW 12
22521: PUSH
22522: LD_INT 7
22524: PPUSH
22525: LD_INT 9
22527: PPUSH
22528: CALL_OW 12
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: LIST
22537: PUSH
22538: LD_OWVAR 67
22542: ARRAY
22543: PPUSH
22544: LD_EXP 25
22548: PPUSH
22549: LD_EXP 26
22553: PPUSH
22554: CALL_OW 12
22558: PPUSH
22559: LD_INT 3
22561: PPUSH
22562: LD_INT 1
22564: PPUSH
22565: LD_INT 3
22567: PPUSH
22568: LD_INT 43
22570: PUSH
22571: LD_INT 44
22573: PUSH
22574: LD_INT 46
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: LIST
22581: PPUSH
22582: EMPTY
22583: PPUSH
22584: EMPTY
22585: PPUSH
22586: LD_INT 1
22588: PPUSH
22589: CALL 13451 0 11
22593: END
// every 22 22$0 trigger SikorskyArrive = 0 do
22594: LD_EXP 18
22598: PUSH
22599: LD_INT 0
22601: EQUAL
22602: IFFALSE 22708
22604: GO 22606
22606: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22607: LD_INT 6
22609: PPUSH
22610: LD_INT 3
22612: PPUSH
22613: LD_INT 8
22615: PPUSH
22616: LD_INT 9
22618: PPUSH
22619: CALL_OW 12
22623: PUSH
22624: LD_INT 7
22626: PPUSH
22627: LD_INT 10
22629: PPUSH
22630: CALL_OW 12
22634: PUSH
22635: LD_INT 8
22637: PPUSH
22638: LD_INT 10
22640: PPUSH
22641: CALL_OW 12
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: LIST
22650: PUSH
22651: LD_OWVAR 67
22655: ARRAY
22656: PPUSH
22657: LD_INT 0
22659: PPUSH
22660: LD_INT 0
22662: PPUSH
22663: LD_INT 0
22665: PPUSH
22666: LD_INT 0
22668: PPUSH
22669: LD_EXP 25
22673: PPUSH
22674: LD_EXP 26
22678: PPUSH
22679: CALL_OW 12
22683: PPUSH
22684: LD_INT 16
22686: PPUSH
22687: LD_INT 7
22689: PPUSH
22690: LD_INT 1
22692: PPUSH
22693: LD_INT 1
22695: PPUSH
22696: LD_INT 3
22698: PPUSH
22699: CALL_OW 12
22703: PPUSH
22704: CALL 11158 0 12
22708: END
// every 22 22$0 trigger SikorskyArrive = 0 do
22709: LD_EXP 18
22713: PUSH
22714: LD_INT 0
22716: EQUAL
22717: IFFALSE 22817
22719: GO 22721
22721: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22722: LD_INT 16
22724: PPUSH
22725: LD_INT 6
22727: PPUSH
22728: LD_INT 5
22730: PPUSH
22731: LD_INT 8
22733: PPUSH
22734: CALL_OW 12
22738: PUSH
22739: LD_INT 6
22741: PPUSH
22742: LD_INT 9
22744: PPUSH
22745: CALL_OW 12
22749: PUSH
22750: LD_INT 7
22752: PPUSH
22753: LD_INT 9
22755: PPUSH
22756: CALL_OW 12
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: LIST
22765: PUSH
22766: LD_OWVAR 67
22770: ARRAY
22771: PPUSH
22772: LD_EXP 25
22776: PPUSH
22777: LD_EXP 26
22781: PPUSH
22782: CALL_OW 12
22786: PPUSH
22787: LD_INT 3
22789: PPUSH
22790: LD_INT 1
22792: PPUSH
22793: LD_INT 3
22795: PPUSH
22796: LD_INT 44
22798: PUSH
22799: LD_INT 46
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PPUSH
22806: EMPTY
22807: PPUSH
22808: EMPTY
22809: PPUSH
22810: LD_INT 1
22812: PPUSH
22813: CALL 13451 0 11
22817: END
// every 27 27$0 trigger SikorskyArrive = 0 do
22818: LD_EXP 18
22822: PUSH
22823: LD_INT 0
22825: EQUAL
22826: IFFALSE 22932
22828: GO 22830
22830: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22831: LD_INT 6
22833: PPUSH
22834: LD_INT 3
22836: PPUSH
22837: LD_INT 8
22839: PPUSH
22840: LD_INT 9
22842: PPUSH
22843: CALL_OW 12
22847: PUSH
22848: LD_INT 7
22850: PPUSH
22851: LD_INT 10
22853: PPUSH
22854: CALL_OW 12
22858: PUSH
22859: LD_INT 8
22861: PPUSH
22862: LD_INT 10
22864: PPUSH
22865: CALL_OW 12
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: LIST
22874: PUSH
22875: LD_OWVAR 67
22879: ARRAY
22880: PPUSH
22881: LD_INT 0
22883: PPUSH
22884: LD_INT 0
22886: PPUSH
22887: LD_INT 0
22889: PPUSH
22890: LD_INT 0
22892: PPUSH
22893: LD_EXP 25
22897: PPUSH
22898: LD_EXP 26
22902: PPUSH
22903: CALL_OW 12
22907: PPUSH
22908: LD_INT 16
22910: PPUSH
22911: LD_INT 7
22913: PPUSH
22914: LD_INT 1
22916: PPUSH
22917: LD_INT 1
22919: PPUSH
22920: LD_INT 3
22922: PPUSH
22923: CALL_OW 12
22927: PPUSH
22928: CALL 11158 0 12
22932: END
// every 27 27$0 trigger SikorskyArrive = 0 do
22933: LD_EXP 18
22937: PUSH
22938: LD_INT 0
22940: EQUAL
22941: IFFALSE 23041
22943: GO 22945
22945: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22946: LD_INT 16
22948: PPUSH
22949: LD_INT 6
22951: PPUSH
22952: LD_INT 5
22954: PPUSH
22955: LD_INT 8
22957: PPUSH
22958: CALL_OW 12
22962: PUSH
22963: LD_INT 6
22965: PPUSH
22966: LD_INT 9
22968: PPUSH
22969: CALL_OW 12
22973: PUSH
22974: LD_INT 7
22976: PPUSH
22977: LD_INT 9
22979: PPUSH
22980: CALL_OW 12
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: LIST
22989: PUSH
22990: LD_OWVAR 67
22994: ARRAY
22995: PPUSH
22996: LD_EXP 25
23000: PPUSH
23001: LD_EXP 26
23005: PPUSH
23006: CALL_OW 12
23010: PPUSH
23011: LD_INT 3
23013: PPUSH
23014: LD_INT 1
23016: PPUSH
23017: LD_INT 3
23019: PPUSH
23020: LD_INT 44
23022: PUSH
23023: LD_INT 46
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PPUSH
23030: EMPTY
23031: PPUSH
23032: EMPTY
23033: PPUSH
23034: LD_INT 1
23036: PPUSH
23037: CALL 13451 0 11
23041: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23042: LD_EXP 18
23046: PUSH
23047: LD_INT 0
23049: EQUAL
23050: IFFALSE 23156
23052: GO 23054
23054: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23055: LD_INT 6
23057: PPUSH
23058: LD_INT 3
23060: PPUSH
23061: LD_INT 8
23063: PPUSH
23064: LD_INT 9
23066: PPUSH
23067: CALL_OW 12
23071: PUSH
23072: LD_INT 7
23074: PPUSH
23075: LD_INT 10
23077: PPUSH
23078: CALL_OW 12
23082: PUSH
23083: LD_INT 8
23085: PPUSH
23086: LD_INT 10
23088: PPUSH
23089: CALL_OW 12
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: LIST
23098: PUSH
23099: LD_OWVAR 67
23103: ARRAY
23104: PPUSH
23105: LD_INT 0
23107: PPUSH
23108: LD_INT 0
23110: PPUSH
23111: LD_INT 0
23113: PPUSH
23114: LD_INT 0
23116: PPUSH
23117: LD_EXP 25
23121: PPUSH
23122: LD_EXP 26
23126: PPUSH
23127: CALL_OW 12
23131: PPUSH
23132: LD_INT 16
23134: PPUSH
23135: LD_INT 7
23137: PPUSH
23138: LD_INT 1
23140: PPUSH
23141: LD_INT 1
23143: PPUSH
23144: LD_INT 3
23146: PPUSH
23147: CALL_OW 12
23151: PPUSH
23152: CALL 11158 0 12
23156: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23157: LD_EXP 18
23161: PUSH
23162: LD_INT 0
23164: EQUAL
23165: IFFALSE 23265
23167: GO 23169
23169: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
23170: LD_INT 16
23172: PPUSH
23173: LD_INT 6
23175: PPUSH
23176: LD_INT 5
23178: PPUSH
23179: LD_INT 8
23181: PPUSH
23182: CALL_OW 12
23186: PUSH
23187: LD_INT 6
23189: PPUSH
23190: LD_INT 9
23192: PPUSH
23193: CALL_OW 12
23197: PUSH
23198: LD_INT 7
23200: PPUSH
23201: LD_INT 9
23203: PPUSH
23204: CALL_OW 12
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: LIST
23213: PUSH
23214: LD_OWVAR 67
23218: ARRAY
23219: PPUSH
23220: LD_EXP 25
23224: PPUSH
23225: LD_EXP 26
23229: PPUSH
23230: CALL_OW 12
23234: PPUSH
23235: LD_INT 3
23237: PPUSH
23238: LD_INT 1
23240: PPUSH
23241: LD_INT 3
23243: PPUSH
23244: LD_INT 44
23246: PUSH
23247: LD_INT 46
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PPUSH
23254: EMPTY
23255: PPUSH
23256: EMPTY
23257: PPUSH
23258: LD_INT 1
23260: PPUSH
23261: CALL 13451 0 11
23265: END
// every 0 0$1 trigger timerStatus = 1 do
23266: LD_EXP 35
23270: PUSH
23271: LD_INT 1
23273: EQUAL
23274: IFFALSE 23311
23276: GO 23278
23278: DISABLE
// begin enable ;
23279: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
23280: LD_ADDR_OWVAR 47
23284: PUSH
23285: LD_STRING #Am08-1
23287: PUSH
23288: LD_EXP 19
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
23297: LD_ADDR_EXP 19
23301: PUSH
23302: LD_EXP 19
23306: PUSH
23307: LD_INT 35
23309: MINUS
23310: ST_TO_ADDR
// end ; end_of_file
23311: END
// every 1 1$0 do
23312: GO 23314
23314: DISABLE
// begin if supply <= 13 and supply > 7 then
23315: LD_EXP 40
23319: PUSH
23320: LD_INT 13
23322: LESSEQUAL
23323: PUSH
23324: LD_EXP 40
23328: PUSH
23329: LD_INT 7
23331: GREATER
23332: AND
23333: IFFALSE 23356
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
23335: LD_INT 3
23337: PPUSH
23338: LD_INT 5
23340: PPUSH
23341: CALL_OW 12
23345: PPUSH
23346: LD_INT 5
23348: PPUSH
23349: LD_INT 1
23351: PPUSH
23352: CALL_OW 55
// if supply <= 7 and supply > 4 then
23356: LD_EXP 40
23360: PUSH
23361: LD_INT 7
23363: LESSEQUAL
23364: PUSH
23365: LD_EXP 40
23369: PUSH
23370: LD_INT 4
23372: GREATER
23373: AND
23374: IFFALSE 23397
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
23376: LD_INT 3
23378: PPUSH
23379: LD_INT 5
23381: PPUSH
23382: CALL_OW 12
23386: PPUSH
23387: LD_INT 20
23389: PPUSH
23390: LD_INT 1
23392: PPUSH
23393: CALL_OW 55
// if supply <= 4 and supply > 0 then
23397: LD_EXP 40
23401: PUSH
23402: LD_INT 4
23404: LESSEQUAL
23405: PUSH
23406: LD_EXP 40
23410: PUSH
23411: LD_INT 0
23413: GREATER
23414: AND
23415: IFFALSE 23438
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
23417: LD_INT 3
23419: PPUSH
23420: LD_INT 5
23422: PPUSH
23423: CALL_OW 12
23427: PPUSH
23428: LD_INT 21
23430: PPUSH
23431: LD_INT 1
23433: PPUSH
23434: CALL_OW 55
// if supply > 0 then
23438: LD_EXP 40
23442: PUSH
23443: LD_INT 0
23445: GREATER
23446: IFFALSE 23463
// begin supply = supply - 1 ;
23448: LD_ADDR_EXP 40
23452: PUSH
23453: LD_EXP 40
23457: PUSH
23458: LD_INT 1
23460: MINUS
23461: ST_TO_ADDR
// enable ;
23462: ENABLE
// end ; end ; end_of_file
23463: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
23464: LD_EXP 39
23468: PUSH
23469: LD_INT 1
23471: EQUAL
23472: PUSH
23473: LD_EXP 1
23477: PPUSH
23478: CALL_OW 301
23482: AND
23483: IFFALSE 23495
23485: GO 23487
23487: DISABLE
// YouLost ( JMM ) ;
23488: LD_STRING JMM
23490: PPUSH
23491: CALL_OW 104
23495: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
23496: LD_EXP 18
23500: PUSH
23501: LD_INT 1
23503: EQUAL
23504: PUSH
23505: LD_EXP 16
23509: PPUSH
23510: CALL_OW 301
23514: AND
23515: IFFALSE 23547
23517: GO 23519
23519: DISABLE
// begin DialogueOn ;
23520: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
23524: LD_EXP 23
23528: PPUSH
23529: LD_STRING D8a-Pow-1
23531: PPUSH
23532: CALL_OW 94
// DialogueOff ;
23536: CALL_OW 7
// YouLost ( Dismissed ) ;
23540: LD_STRING Dismissed
23542: PPUSH
23543: CALL_OW 104
// end ;
23547: END
// every 0 0$1 trigger IsDead ( amDepot ) do
23548: LD_EXP 37
23552: PPUSH
23553: CALL_OW 301
23557: IFFALSE 23569
23559: GO 23561
23561: DISABLE
// YouLost ( Destroyed ) ; end_of_file
23562: LD_STRING Destroyed
23564: PPUSH
23565: CALL_OW 104
23569: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
23570: LD_EXP 24
23574: PPUSH
23575: CALL_OW 301
23579: IFFALSE 23924
23581: GO 23583
23583: DISABLE
23584: LD_INT 0
23586: PPUSH
// begin russianAI = 0 ;
23587: LD_ADDR_EXP 27
23591: PUSH
23592: LD_INT 0
23594: ST_TO_ADDR
// escapeAvalaible = 1 ;
23595: LD_ADDR_EXP 36
23599: PUSH
23600: LD_INT 1
23602: ST_TO_ADDR
// InGameOn ;
23603: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
23607: LD_INT 3
23609: PPUSH
23610: LD_INT 1
23612: PPUSH
23613: LD_INT 1
23615: PPUSH
23616: LD_INT 0
23618: PPUSH
23619: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
23623: LD_INT 6
23625: PPUSH
23626: LD_INT 1
23628: PPUSH
23629: LD_INT 1
23631: PPUSH
23632: LD_INT 0
23634: PPUSH
23635: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
23639: LD_INT 3
23641: PPUSH
23642: LD_INT 1
23644: PPUSH
23645: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
23649: LD_INT 97
23651: PPUSH
23652: LD_INT 91
23654: PPUSH
23655: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
23659: LD_INT 22
23661: PUSH
23662: LD_INT 3
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 21
23671: PUSH
23672: LD_INT 1
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PPUSH
23683: CALL_OW 69
23687: PPUSH
23688: CALL_OW 121
// wait ( 0 0$01 ) ;
23692: LD_INT 35
23694: PPUSH
23695: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23699: LD_INT 22
23701: PUSH
23702: LD_INT 3
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 21
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PPUSH
23723: CALL_OW 69
23727: PPUSH
23728: LD_INT 124
23730: PPUSH
23731: LD_INT 98
23733: PPUSH
23734: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
23738: LD_INT 22
23740: PUSH
23741: LD_INT 6
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 21
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PPUSH
23762: CALL_OW 69
23766: PPUSH
23767: CALL_OW 121
// wait ( 0 0$01 ) ;
23771: LD_INT 35
23773: PPUSH
23774: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23778: LD_INT 22
23780: PUSH
23781: LD_INT 6
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 21
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PPUSH
23802: CALL_OW 69
23806: PPUSH
23807: LD_INT 124
23809: PPUSH
23810: LD_INT 98
23812: PPUSH
23813: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23817: LD_INT 22
23819: PUSH
23820: LD_INT 1
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 21
23829: PUSH
23830: LD_INT 1
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PPUSH
23841: CALL_OW 69
23845: PPUSH
23846: LD_INT 124
23848: PPUSH
23849: LD_INT 98
23851: PPUSH
23852: CALL_OW 114
// wait ( 0 0$4 ) ;
23856: LD_INT 140
23858: PPUSH
23859: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
23863: LD_INT 124
23865: PPUSH
23866: LD_INT 98
23868: PPUSH
23869: CALL_OW 84
// if SikorskyStatus = 1 then
23873: LD_EXP 21
23877: PUSH
23878: LD_INT 1
23880: EQUAL
23881: IFFALSE 23895
// begin Say ( Sikorski , D9-Sik-1 ) ;
23883: LD_EXP 16
23887: PPUSH
23888: LD_STRING D9-Sik-1
23890: PPUSH
23891: CALL_OW 88
// end ; if SikorskyStatus = 2 then
23895: LD_EXP 21
23899: PUSH
23900: LD_INT 2
23902: EQUAL
23903: IFFALSE 23924
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
23905: LD_EXP 23
23909: PPUSH
23910: LD_STRING D8b-Pow-1
23912: PPUSH
23913: CALL_OW 94
// YouLost ( Dismissed ) ;
23917: LD_STRING Dismissed
23919: PPUSH
23920: CALL_OW 104
// end ; end ;
23924: PPOPN 1
23926: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
23927: LD_INT 23
23929: PUSH
23930: LD_INT 3
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 21
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 24
23949: PUSH
23950: LD_INT 250
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: PPUSH
23962: CALL_OW 69
23966: PUSH
23967: LD_INT 0
23969: EQUAL
23970: IFFALSE 23979
23972: GO 23974
23974: DISABLE
// FinishMission ;
23975: CALL 23980 0 0
23979: END
// export function FinishMission ; var tmp ; begin
23980: LD_INT 0
23982: PPUSH
23983: PPUSH
// AddMedal ( med1 , 1 ) ;
23984: LD_STRING med1
23986: PPUSH
23987: LD_INT 1
23989: PPUSH
23990: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
23994: LD_STRING med2
23996: PPUSH
23997: LD_INT 1
23999: PPUSH
24000: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
24004: LD_STRING perfect
24006: PPUSH
24007: LD_INT 1
24009: PPUSH
24010: CALL_OW 101
// GiveMedals ( Main ) ;
24014: LD_STRING Main
24016: PPUSH
24017: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
24021: LD_INT 22
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 23
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 21
24043: PUSH
24044: LD_INT 1
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PUSH
24051: LD_INT 2
24053: PUSH
24054: LD_INT 25
24056: PUSH
24057: LD_INT 1
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 25
24066: PUSH
24067: LD_INT 2
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 25
24076: PUSH
24077: LD_INT 3
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 25
24086: PUSH
24087: LD_INT 4
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: PPUSH
24107: CALL_OW 69
24111: PPUSH
24112: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
24116: LD_EXP 1
24120: PPUSH
24121: LD_EXP 42
24125: PUSH
24126: LD_STRING JMM
24128: STR
24129: PPUSH
24130: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
24134: LD_EXP 2
24138: PPUSH
24139: LD_EXP 42
24143: PUSH
24144: LD_STRING Brown
24146: STR
24147: PPUSH
24148: CALL 7380 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
24152: LD_EXP 3
24156: PPUSH
24157: LD_EXP 42
24161: PUSH
24162: LD_STRING Donaldson
24164: STR
24165: PPUSH
24166: CALL 7380 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
24170: LD_EXP 4
24174: PPUSH
24175: LD_EXP 42
24179: PUSH
24180: LD_STRING Bobby
24182: STR
24183: PPUSH
24184: CALL 7380 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
24188: LD_EXP 5
24192: PPUSH
24193: LD_EXP 42
24197: PUSH
24198: LD_STRING Cyrus
24200: STR
24201: PPUSH
24202: CALL 7380 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
24206: LD_EXP 6
24210: PPUSH
24211: LD_EXP 42
24215: PUSH
24216: LD_STRING Lisa
24218: STR
24219: PPUSH
24220: CALL 7380 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
24224: LD_EXP 7
24228: PPUSH
24229: LD_EXP 42
24233: PUSH
24234: LD_STRING Frank
24236: STR
24237: PPUSH
24238: CALL 7380 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
24242: LD_EXP 8
24246: PPUSH
24247: LD_EXP 42
24251: PUSH
24252: LD_STRING Gladstone
24254: STR
24255: PPUSH
24256: CALL 7380 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
24260: LD_EXP 9
24264: PPUSH
24265: LD_EXP 42
24269: PUSH
24270: LD_STRING Kikuchi
24272: STR
24273: PPUSH
24274: CALL 7380 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
24278: LD_EXP 14
24282: PPUSH
24283: LD_EXP 42
24287: PUSH
24288: LD_STRING Denis
24290: STR
24291: PPUSH
24292: CALL 7380 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
24296: LD_EXP 15
24300: PPUSH
24301: LD_EXP 42
24305: PUSH
24306: LD_STRING Joan
24308: STR
24309: PPUSH
24310: CALL 7380 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
24314: LD_EXP 10
24318: PPUSH
24319: LD_EXP 42
24323: PUSH
24324: LD_STRING Khatam
24326: STR
24327: PPUSH
24328: CALL 7380 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
24332: LD_EXP 13
24336: PPUSH
24337: LD_EXP 42
24341: PUSH
24342: LD_STRING Houten
24344: STR
24345: PPUSH
24346: CALL 7380 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten ] , 08_other_survivors ) ;
24350: LD_INT 50
24352: PUSH
24353: EMPTY
24354: LIST
24355: PUSH
24356: LD_INT 22
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 21
24368: PUSH
24369: LD_INT 1
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 2
24378: PUSH
24379: LD_INT 25
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 25
24391: PUSH
24392: LD_INT 2
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 25
24401: PUSH
24402: LD_INT 3
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 25
24411: PUSH
24412: LD_INT 4
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: PPUSH
24432: CALL_OW 69
24436: PUSH
24437: LD_EXP 1
24441: PUSH
24442: LD_EXP 2
24446: PUSH
24447: LD_EXP 3
24451: PUSH
24452: LD_EXP 4
24456: PUSH
24457: LD_EXP 5
24461: PUSH
24462: LD_EXP 6
24466: PUSH
24467: LD_EXP 7
24471: PUSH
24472: LD_EXP 8
24476: PUSH
24477: LD_EXP 9
24481: PUSH
24482: LD_EXP 14
24486: PUSH
24487: LD_EXP 15
24491: PUSH
24492: LD_EXP 13
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: DIFF
24511: PPUSH
24512: LD_STRING 08_other_survivors
24514: PPUSH
24515: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
24519: LD_INT 23
24521: PPUSH
24522: CALL 24535 0 1
// YouWin ;
24526: CALL_OW 103
// end ;
24530: LD_VAR 0 1
24534: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
24535: LD_INT 0
24537: PPUSH
24538: PPUSH
24539: PPUSH
24540: PPUSH
// gammaBase = [ ] ;
24541: LD_ADDR_VAR 0 4
24545: PUSH
24546: EMPTY
24547: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
24548: LD_ADDR_VAR 0 5
24552: PUSH
24553: LD_VAR 0 1
24557: PPUSH
24558: LD_INT 22
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 21
24570: PUSH
24571: LD_INT 3
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 50
24580: PUSH
24581: EMPTY
24582: LIST
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: LIST
24588: PPUSH
24589: CALL_OW 70
24593: ST_TO_ADDR
// for i in buildings do
24594: LD_ADDR_VAR 0 3
24598: PUSH
24599: LD_VAR 0 5
24603: PUSH
24604: FOR_IN
24605: IFFALSE 25042
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
24607: LD_VAR 0 3
24611: PPUSH
24612: CALL_OW 266
24616: PUSH
24617: LD_INT 6
24619: PUSH
24620: LD_INT 7
24622: PUSH
24623: LD_INT 8
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: LIST
24630: IN
24631: IFFALSE 24745
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
24633: LD_ADDR_VAR 0 4
24637: PUSH
24638: LD_VAR 0 4
24642: PUSH
24643: LD_VAR 0 3
24647: PPUSH
24648: CALL_OW 266
24652: PUSH
24653: LD_VAR 0 3
24657: PPUSH
24658: CALL_OW 250
24662: PUSH
24663: LD_VAR 0 3
24667: PPUSH
24668: CALL_OW 251
24672: PUSH
24673: LD_VAR 0 3
24677: PPUSH
24678: CALL_OW 254
24682: PUSH
24683: LD_VAR 0 3
24687: PPUSH
24688: CALL_OW 267
24692: PUSH
24693: LD_VAR 0 3
24697: PPUSH
24698: CALL_OW 248
24702: PUSH
24703: LD_VAR 0 3
24707: PPUSH
24708: LD_INT 1
24710: PPUSH
24711: CALL_OW 268
24715: PUSH
24716: LD_VAR 0 3
24720: PPUSH
24721: LD_INT 2
24723: PPUSH
24724: CALL_OW 268
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: PUSH
24739: EMPTY
24740: LIST
24741: ADD
24742: ST_TO_ADDR
24743: GO 25040
// if GetBType ( i ) = b_bunker then
24745: LD_VAR 0 3
24749: PPUSH
24750: CALL_OW 266
24754: PUSH
24755: LD_INT 32
24757: EQUAL
24758: IFFALSE 24855
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
24760: LD_ADDR_VAR 0 4
24764: PUSH
24765: LD_VAR 0 4
24769: PUSH
24770: LD_VAR 0 3
24774: PPUSH
24775: CALL_OW 266
24779: PUSH
24780: LD_VAR 0 3
24784: PPUSH
24785: CALL_OW 250
24789: PUSH
24790: LD_VAR 0 3
24794: PPUSH
24795: CALL_OW 251
24799: PUSH
24800: LD_VAR 0 3
24804: PPUSH
24805: CALL_OW 254
24809: PUSH
24810: LD_VAR 0 3
24814: PPUSH
24815: CALL_OW 267
24819: PUSH
24820: LD_VAR 0 3
24824: PPUSH
24825: CALL_OW 248
24829: PUSH
24830: LD_VAR 0 3
24834: PPUSH
24835: CALL_OW 269
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: PUSH
24849: EMPTY
24850: LIST
24851: ADD
24852: ST_TO_ADDR
24853: GO 25040
// if GetBType ( i ) = b_factory then
24855: LD_VAR 0 3
24859: PPUSH
24860: CALL_OW 266
24864: PUSH
24865: LD_INT 3
24867: EQUAL
24868: IFFALSE 24958
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
24870: LD_ADDR_VAR 0 4
24874: PUSH
24875: LD_VAR 0 4
24879: PPUSH
24880: LD_INT 1
24882: PPUSH
24883: LD_VAR 0 3
24887: PPUSH
24888: CALL_OW 266
24892: PUSH
24893: LD_VAR 0 3
24897: PPUSH
24898: CALL_OW 250
24902: PUSH
24903: LD_VAR 0 3
24907: PPUSH
24908: CALL_OW 251
24912: PUSH
24913: LD_VAR 0 3
24917: PPUSH
24918: CALL_OW 254
24922: PUSH
24923: LD_VAR 0 3
24927: PPUSH
24928: CALL_OW 267
24932: PUSH
24933: LD_VAR 0 3
24937: PPUSH
24938: CALL_OW 248
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: PPUSH
24951: CALL_OW 2
24955: ST_TO_ADDR
24956: GO 25040
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
24958: LD_ADDR_VAR 0 4
24962: PUSH
24963: LD_VAR 0 4
24967: PUSH
24968: LD_VAR 0 3
24972: PPUSH
24973: CALL_OW 266
24977: PUSH
24978: LD_VAR 0 3
24982: PPUSH
24983: CALL_OW 250
24987: PUSH
24988: LD_VAR 0 3
24992: PPUSH
24993: CALL_OW 251
24997: PUSH
24998: LD_VAR 0 3
25002: PPUSH
25003: CALL_OW 254
25007: PUSH
25008: LD_VAR 0 3
25012: PPUSH
25013: CALL_OW 267
25017: PUSH
25018: LD_VAR 0 3
25022: PPUSH
25023: CALL_OW 248
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: PUSH
25036: EMPTY
25037: LIST
25038: ADD
25039: ST_TO_ADDR
// end ;
25040: GO 24604
25042: POP
25043: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
25044: LD_VAR 0 4
25048: PPUSH
25049: LD_STRING 08_GammaBase
25051: PPUSH
25052: CALL_OW 39
// end ;
25056: LD_VAR 0 2
25060: RET
>>>>>>> 0beed9fd180cedc7e23ba917b81844f84655f6c7
