// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7817 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2535 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 6594 0 0
// PrepareRussians ;
 229: CALL 6912 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 9238 0 6
// PrepareCutsceneAttack ;
 312: CALL 6646 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 608
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 7330 0 2
 577: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 54
 585: PPUSH
 586: LD_INT 25
 588: PPUSH
 589: LD_INT 8
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// ComHold ( Donaldson ) ;
 599: LD_EXP 3
 603: PPUSH
 604: CALL_OW 140
// end ; if gammaCommander = 2 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 2
 615: EQUAL
 616: IFFALSE 664
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 618: LD_ADDR_EXP 2
 622: PUSH
 623: LD_STRING 04_Brown
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: CALL 7330 0 2
 633: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 634: LD_EXP 2
 638: PPUSH
 639: LD_INT 54
 641: PPUSH
 642: LD_INT 25
 644: PPUSH
 645: LD_INT 8
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 50
// ComHold ( Brown ) ;
 655: LD_EXP 2
 659: PPUSH
 660: CALL_OW 140
// end ; if gammaCommander = 3 then
 664: LD_EXP 12
 668: PUSH
 669: LD_INT 3
 671: EQUAL
 672: IFFALSE 720
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 674: LD_ADDR_EXP 13
 678: PUSH
 679: LD_STRING VanHouten
 681: PPUSH
 682: LD_INT 1
 684: PPUSH
 685: CALL 7330 0 2
 689: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 690: LD_EXP 13
 694: PPUSH
 695: LD_INT 54
 697: PPUSH
 698: LD_INT 25
 700: PPUSH
 701: LD_INT 8
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 50
// ComHold ( Houten ) ;
 711: LD_EXP 13
 715: PPUSH
 716: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 720: LD_ADDR_EXP 22
 724: PUSH
 725: LD_STRING Harisson
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL 7330 0 2
 735: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 736: LD_ADDR_EXP 23
 740: PUSH
 741: LD_STRING Powell
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 7330 0 2
 751: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 752: LD_STRING 04_Lisa
 754: PUSH
 755: EMPTY
 756: LIST
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_STRING LisaInDelta
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 30
 773: NOT
 774: AND
 775: PUSH
 776: LD_STRING 07_Lisa
 778: PUSH
 779: EMPTY
 780: LIST
 781: PPUSH
 782: CALL_OW 28
 786: NOT
 787: AND
 788: IFFALSE 824
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 790: LD_ADDR_EXP 6
 794: PUSH
 795: LD_STRING 04_Lisa
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 7330 0 2
 805: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 806: LD_ADDR_VAR 0 15
 810: PUSH
 811: LD_VAR 0 15
 815: PUSH
 816: LD_EXP 6
 820: ADD
 821: ST_TO_ADDR
// end else
 822: GO 876
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 824: LD_EXP 6
 828: NOT
 829: PUSH
 830: LD_STRING LisaIn07
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: IFFALSE 876
// begin Lisa := PrepareUnit ( 07_Lisa , true ) ;
 844: LD_ADDR_EXP 6
 848: PUSH
 849: LD_STRING 07_Lisa
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL 7330 0 2
 859: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 860: LD_ADDR_VAR 0 15
 864: PUSH
 865: LD_VAR 0 15
 869: PUSH
 870: LD_EXP 6
 874: ADD
 875: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 876: LD_STRING 04_Bobby
 878: PUSH
 879: EMPTY
 880: LIST
 881: PPUSH
 882: CALL_OW 28
 886: PUSH
 887: LD_STRING BobbyInDelta
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: NOT
 898: AND
 899: PUSH
 900: LD_STRING 07_Bobby
 902: PUSH
 903: EMPTY
 904: LIST
 905: PPUSH
 906: CALL_OW 28
 910: NOT
 911: AND
 912: IFFALSE 948
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 914: LD_ADDR_EXP 4
 918: PUSH
 919: LD_STRING 04_Bobby
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL 7330 0 2
 929: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 930: LD_ADDR_VAR 0 15
 934: PUSH
 935: LD_VAR 0 15
 939: PUSH
 940: LD_EXP 4
 944: ADD
 945: ST_TO_ADDR
// end else
 946: GO 1000
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 948: LD_EXP 4
 952: NOT
 953: PUSH
 954: LD_STRING BobbyIn07
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 30
 964: NOT
 965: AND
 966: IFFALSE 1000
// begin Bobby := PrepareUnit ( 07_Bobby , true ) ;
 968: LD_ADDR_EXP 4
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: CALL 7330 0 2
 983: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 984: LD_ADDR_VAR 0 15
 988: PUSH
 989: LD_VAR 0 15
 993: PUSH
 994: LD_EXP 4
 998: ADD
 999: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1000: LD_STRING 04_Cyrus
1002: PUSH
1003: EMPTY
1004: LIST
1005: PPUSH
1006: CALL_OW 28
1010: PUSH
1011: LD_STRING CyrusInDelta
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 30
1021: NOT
1022: AND
1023: PUSH
1024: LD_STRING 07_Cyrus
1026: PUSH
1027: EMPTY
1028: LIST
1029: PPUSH
1030: CALL_OW 28
1034: NOT
1035: AND
1036: IFFALSE 1072
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
1038: LD_ADDR_EXP 5
1042: PUSH
1043: LD_STRING 04_Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 7330 0 2
1053: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1054: LD_ADDR_VAR 0 15
1058: PUSH
1059: LD_VAR 0 15
1063: PUSH
1064: LD_EXP 5
1068: ADD
1069: ST_TO_ADDR
// end else
1070: GO 1124
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1072: LD_EXP 5
1076: NOT
1077: PUSH
1078: LD_STRING CyrusIn07
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: NOT
1089: AND
1090: IFFALSE 1124
// begin Cyrus := PrepareUnit ( 07_Cyrus , true ) ;
1092: LD_ADDR_EXP 5
1096: PUSH
1097: LD_STRING 07_Cyrus
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 7330 0 2
1107: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1108: LD_ADDR_VAR 0 15
1112: PUSH
1113: LD_VAR 0 15
1117: PUSH
1118: LD_EXP 5
1122: ADD
1123: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1124: LD_STRING 04_Brown
1126: PUSH
1127: EMPTY
1128: LIST
1129: PPUSH
1130: CALL_OW 28
1134: PUSH
1135: LD_STRING BrownInDelta
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL_OW 30
1145: NOT
1146: AND
1147: PUSH
1148: LD_STRING 07_Brown
1150: PUSH
1151: EMPTY
1152: LIST
1153: PPUSH
1154: CALL_OW 28
1158: NOT
1159: AND
1160: PUSH
1161: LD_EXP 12
1165: PUSH
1166: LD_INT 2
1168: NONEQUAL
1169: AND
1170: IFFALSE 1206
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
1172: LD_ADDR_EXP 2
1176: PUSH
1177: LD_STRING 04_Brown
1179: PPUSH
1180: LD_INT 1
1182: PPUSH
1183: CALL 7330 0 2
1187: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1188: LD_ADDR_VAR 0 15
1192: PUSH
1193: LD_VAR 0 15
1197: PUSH
1198: LD_EXP 2
1202: ADD
1203: ST_TO_ADDR
// end else
1204: GO 1268
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1206: LD_EXP 2
1210: NOT
1211: PUSH
1212: LD_STRING BrownIn07
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 30
1222: NOT
1223: AND
1224: PUSH
1225: LD_EXP 12
1229: PUSH
1230: LD_INT 2
1232: NONEQUAL
1233: AND
1234: IFFALSE 1268
// begin Brown := PrepareUnit ( 07_Brown , true ) ;
1236: LD_ADDR_EXP 2
1240: PUSH
1241: LD_STRING 07_Brown
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 7330 0 2
1251: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1252: LD_ADDR_VAR 0 15
1256: PUSH
1257: LD_VAR 0 15
1261: PUSH
1262: LD_EXP 2
1266: ADD
1267: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1268: LD_STRING 04_Donaldson
1270: PUSH
1271: EMPTY
1272: LIST
1273: PPUSH
1274: CALL_OW 28
1278: PUSH
1279: LD_STRING DonaldsonInDelta
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 30
1289: NOT
1290: AND
1291: PUSH
1292: LD_STRING 07_Donaldson
1294: PUSH
1295: EMPTY
1296: LIST
1297: PPUSH
1298: CALL_OW 28
1302: NOT
1303: AND
1304: PUSH
1305: LD_EXP 12
1309: PUSH
1310: LD_INT 1
1312: NONEQUAL
1313: AND
1314: IFFALSE 1350
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1316: LD_ADDR_EXP 3
1320: PUSH
1321: LD_STRING 04_Donaldson
1323: PPUSH
1324: LD_INT 1
1326: PPUSH
1327: CALL 7330 0 2
1331: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1332: LD_ADDR_VAR 0 15
1336: PUSH
1337: LD_VAR 0 15
1341: PUSH
1342: LD_EXP 3
1346: ADD
1347: ST_TO_ADDR
// end else
1348: GO 1412
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1350: LD_EXP 3
1354: NOT
1355: PUSH
1356: LD_STRING DonaldsonIn07
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 30
1366: NOT
1367: AND
1368: PUSH
1369: LD_EXP 12
1373: PUSH
1374: LD_INT 1
1376: NONEQUAL
1377: AND
1378: IFFALSE 1412
// begin Donaldson := PrepareUnit ( 07_Donaldson , true ) ;
1380: LD_ADDR_EXP 3
1384: PUSH
1385: LD_STRING 07_Donaldson
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: CALL 7330 0 2
1395: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1396: LD_ADDR_VAR 0 15
1400: PUSH
1401: LD_VAR 0 15
1405: PUSH
1406: LD_EXP 3
1410: ADD
1411: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1412: LD_STRING KhatamIn07
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 30
1422: NOT
1423: IFFALSE 1457
// begin Khatam := PrepareUnit ( 07_Khatam , true ) ;
1425: LD_ADDR_EXP 10
1429: PUSH
1430: LD_STRING 07_Khatam
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: CALL 7330 0 2
1440: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1441: LD_ADDR_VAR 0 15
1445: PUSH
1446: LD_VAR 0 15
1450: PUSH
1451: LD_EXP 10
1455: ADD
1456: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1457: LD_ADDR_EXP 11
1461: PUSH
1462: LD_STRING 07_othersGamma
1464: PPUSH
1465: CALL_OW 31
1469: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1470: LD_ADDR_VAR 0 14
1474: PUSH
1475: LD_INT 8
1477: PUSH
1478: LD_EXP 11
1482: MINUS
1483: ST_TO_ADDR
// if tmp then
1484: LD_VAR 0 14
1488: IFFALSE 1541
// for i = 1 to tmp do
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: DOUBLE
1496: LD_INT 1
1498: DEC
1499: ST_TO_ADDR
1500: LD_VAR 0 14
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1539
// begin PrepareHuman ( false , 1 , 5 ) ;
1508: LD_INT 0
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1521: LD_ADDR_EXP 11
1525: PUSH
1526: LD_EXP 11
1530: PUSH
1531: CALL_OW 44
1535: ADD
1536: ST_TO_ADDR
// end ;
1537: GO 1505
1539: POP
1540: POP
// if HexInfo ( 61 , 29 ) = 0 then
1541: LD_INT 61
1543: PPUSH
1544: LD_INT 29
1546: PPUSH
1547: CALL_OW 428
1551: PUSH
1552: LD_INT 0
1554: EQUAL
1555: IFFALSE 1586
// begin bc_type := b_barracks ;
1557: LD_ADDR_OWVAR 42
1561: PUSH
1562: LD_INT 5
1564: ST_TO_ADDR
// bc_level := 6 ;
1565: LD_ADDR_OWVAR 43
1569: PUSH
1570: LD_INT 6
1572: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1573: LD_INT 61
1575: PPUSH
1576: LD_INT 29
1578: PPUSH
1579: LD_INT 5
1581: PPUSH
1582: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1586: LD_ADDR_VAR 0 13
1590: PUSH
1591: LD_INT 22
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 30
1603: PUSH
1604: LD_INT 31
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// for i in bun do
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: LD_VAR 0 13
1629: PUSH
1630: FOR_IN
1631: IFFALSE 1763
// begin x := GetX ( i ) ;
1633: LD_ADDR_VAR 0 3
1637: PUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 250
1647: ST_TO_ADDR
// y := GetY ( i ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_VAR 0 2
1657: PPUSH
1658: CALL_OW 251
1662: ST_TO_ADDR
// d := GetDir ( i ) ;
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 2
1672: PPUSH
1673: CALL_OW 254
1677: ST_TO_ADDR
// RemoveUnit ( i ) ;
1678: LD_VAR 0 2
1682: PPUSH
1683: CALL_OW 64
// bc_type := b_bunker ;
1687: LD_ADDR_OWVAR 42
1691: PUSH
1692: LD_INT 32
1694: ST_TO_ADDR
// bc_level := 6 ;
1695: LD_ADDR_OWVAR 43
1699: PUSH
1700: LD_INT 6
1702: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1703: LD_ADDR_VAR 0 6
1707: PUSH
1708: LD_VAR 0 3
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_VAR 0 5
1722: PPUSH
1723: CALL_OW 47
1727: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1728: LD_VAR 0 6
1732: PPUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 4
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_VAR 0 2
1747: PUSH
1748: LD_INT 2
1750: MOD
1751: PUSH
1752: LD_INT 1
1754: PLUS
1755: ARRAY
1756: PPUSH
1757: CALL_OW 431
// end ;
1761: GO 1630
1763: POP
1764: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1765: LD_ADDR_VAR 0 9
1769: PUSH
1770: LD_INT 22
1772: PUSH
1773: LD_INT 1
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 30
1782: PUSH
1783: LD_INT 5
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PPUSH
1794: CALL_OW 69
1798: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1799: LD_ADDR_VAR 0 8
1803: PUSH
1804: LD_INT 22
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 2
1816: PUSH
1817: LD_INT 30
1819: PUSH
1820: LD_INT 6
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 30
1829: PUSH
1830: LD_INT 7
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 30
1839: PUSH
1840: LD_INT 8
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PPUSH
1857: CALL_OW 69
1861: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1862: LD_ADDR_VAR 0 7
1866: PUSH
1867: LD_INT 22
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 30
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 22
1903: PUSH
1904: LD_INT 1
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 30
1913: PUSH
1914: LD_INT 36
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PPUSH
1925: CALL_OW 69
1929: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1930: LD_ADDR_VAR 0 13
1934: PUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 2
1947: PUSH
1948: LD_INT 30
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 30
1960: PUSH
1961: LD_INT 32
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 69
1981: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_EXP 11
1991: PUSH
1992: LD_VAR 0 15
1996: ADD
1997: PUSH
1998: FOR_IN
1999: IFFALSE 2420
// begin placed := false ;
2001: LD_ADDR_VAR 0 11
2005: PUSH
2006: LD_INT 0
2008: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2009: LD_VAR 0 2
2013: PPUSH
2014: CALL_OW 257
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2147
// begin if UnitFilter ( bun , [ f_empty ] ) then
2024: LD_VAR 0 13
2028: PPUSH
2029: LD_INT 58
2031: PUSH
2032: EMPTY
2033: LIST
2034: PPUSH
2035: CALL_OW 72
2039: IFFALSE 2078
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_VAR 0 13
2050: PPUSH
2051: LD_INT 58
2053: PUSH
2054: EMPTY
2055: LIST
2056: PPUSH
2057: CALL_OW 72
2061: PUSH
2062: LD_INT 1
2064: ARRAY
2065: PPUSH
2066: CALL_OW 52
// placed := true ;
2070: LD_ADDR_VAR 0 11
2074: PUSH
2075: LD_INT 1
2077: ST_TO_ADDR
// end ; if arm and not placed then
2078: LD_VAR 0 9
2082: PUSH
2083: LD_VAR 0 11
2087: NOT
2088: AND
2089: IFFALSE 2147
// begin for j in arm do
2091: LD_ADDR_VAR 0 10
2095: PUSH
2096: LD_VAR 0 9
2100: PUSH
2101: FOR_IN
2102: IFFALSE 2145
// if UnitsInside ( j ) < 6 then
2104: LD_VAR 0 10
2108: PPUSH
2109: CALL_OW 313
2113: PUSH
2114: LD_INT 6
2116: LESS
2117: IFFALSE 2143
// begin PlaceHumanInUnit ( i , j ) ;
2119: LD_VAR 0 2
2123: PPUSH
2124: LD_VAR 0 10
2128: PPUSH
2129: CALL_OW 52
// placed := true ;
2133: LD_ADDR_VAR 0 11
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// break ;
2141: GO 2145
// end ;
2143: GO 2101
2145: POP
2146: POP
// end ; end ; if GetClass ( i ) = 2 then
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 257
2156: PUSH
2157: LD_INT 2
2159: EQUAL
2160: IFFALSE 2193
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 52
2169: PPUSH
2170: LD_INT 20
2172: PPUSH
2173: LD_INT 6
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
// placed := true ;
2183: LD_ADDR_VAR 0 11
2187: PUSH
2188: LD_INT 1
2190: ST_TO_ADDR
// continue ;
2191: GO 1998
// end ; if GetClass ( i ) = 3 then
2193: LD_VAR 0 2
2197: PPUSH
2198: CALL_OW 257
2202: PUSH
2203: LD_INT 3
2205: EQUAL
2206: IFFALSE 2310
// if fac then
2208: LD_VAR 0 7
2212: IFFALSE 2310
// begin if ct then
2214: LD_VAR 0 12
2218: IFFALSE 2246
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 12
2229: PUSH
2230: LD_INT 1
2232: ARRAY
2233: PPUSH
2234: CALL_OW 52
// placed := true ;
2238: LD_ADDR_VAR 0 11
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// end ; if placed then
2246: LD_VAR 0 11
2250: IFFALSE 2254
// continue ;
2252: GO 1998
// for j in fac do
2254: LD_ADDR_VAR 0 10
2258: PUSH
2259: LD_VAR 0 7
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2308
// if UnitsInside ( j ) < 6 then
2267: LD_VAR 0 10
2271: PPUSH
2272: CALL_OW 313
2276: PUSH
2277: LD_INT 6
2279: LESS
2280: IFFALSE 2306
// begin PlaceHumanInUnit ( i , j ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 10
2291: PPUSH
2292: CALL_OW 52
// placed := true ;
2296: LD_ADDR_VAR 0 11
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// break ;
2304: GO 2308
// end ;
2306: GO 2264
2308: POP
2309: POP
// end ; if GetClass ( i ) = 4 then
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL_OW 257
2319: PUSH
2320: LD_INT 4
2322: EQUAL
2323: IFFALSE 2387
// if lab then
2325: LD_VAR 0 8
2329: IFFALSE 2387
// begin for j in lab do
2331: LD_ADDR_VAR 0 10
2335: PUSH
2336: LD_VAR 0 8
2340: PUSH
2341: FOR_IN
2342: IFFALSE 2385
// if UnitsInside ( j ) < 6 then
2344: LD_VAR 0 10
2348: PPUSH
2349: CALL_OW 313
2353: PUSH
2354: LD_INT 6
2356: LESS
2357: IFFALSE 2383
// begin PlaceHumanInUnit ( i , j ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 10
2368: PPUSH
2369: CALL_OW 52
// placed := true ;
2373: LD_ADDR_VAR 0 11
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// break ;
2381: GO 2385
// end ;
2383: GO 2341
2385: POP
2386: POP
// end ; if not placed then
2387: LD_VAR 0 11
2391: NOT
2392: IFFALSE 2418
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2394: LD_VAR 0 2
2398: PPUSH
2399: LD_INT 5
2401: PPUSH
2402: LD_INT 0
2404: PPUSH
2405: CALL_OW 49
// ComHold ( i ) ;
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL_OW 140
// end ; end ;
2418: GO 1998
2420: POP
2421: POP
// if ct then
2422: LD_VAR 0 12
2426: IFFALSE 2530
// if UnitsInside ( ct [ 1 ] ) then
2428: LD_VAR 0 12
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 313
2441: IFFALSE 2530
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: LD_INT 22
2450: PUSH
2451: LD_INT 1
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 33
2460: PUSH
2461: LD_INT 2
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 69
2476: PUSH
2477: FOR_IN
2478: IFFALSE 2528
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_VAR 0 12
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 313
2498: PUSH
2499: LD_INT 1
2501: PPUSH
2502: LD_VAR 0 12
2506: PUSH
2507: LD_INT 1
2509: ARRAY
2510: PPUSH
2511: CALL_OW 313
2515: PPUSH
2516: CALL_OW 12
2520: ARRAY
2521: PPUSH
2522: CALL_OW 135
2526: GO 2477
2528: POP
2529: POP
// end ; end ;
2530: LD_VAR 0 1
2534: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2543: LD_INT 71
2545: PPUSH
2546: LD_INT 5
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2556: LD_ADDR_VAR 0 2
2560: PUSH
2561: LD_STRING GammaBase
2563: PPUSH
2564: EMPTY
2565: PPUSH
2566: CALL_OW 30
2570: ST_TO_ADDR
// if not blist then
2571: LD_VAR 0 2
2575: NOT
2576: IFFALSE 2616
// blist := [ [ b_warehouse , 51 , 10 , 3 , 3 , 0 , 0 ] ] ;
2578: LD_ADDR_VAR 0 2
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 51
2588: PUSH
2589: LD_INT 10
2591: PUSH
2592: LD_INT 3
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 0
2600: PUSH
2601: LD_INT 0
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: EMPTY
2614: LIST
2615: ST_TO_ADDR
// uc_side := 1 ;
2616: LD_ADDR_OWVAR 20
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// uc_nation := 1 ;
2624: LD_ADDR_OWVAR 21
2628: PUSH
2629: LD_INT 1
2631: ST_TO_ADDR
// for i in blist do
2632: LD_ADDR_VAR 0 3
2636: PUSH
2637: LD_VAR 0 2
2641: PUSH
2642: FOR_IN
2643: IFFALSE 3051
// begin bc_type := i [ 1 ] ;
2645: LD_ADDR_OWVAR 42
2649: PUSH
2650: LD_VAR 0 3
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2659: LD_ADDR_OWVAR 43
2663: PUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 5
2671: ARRAY
2672: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: PUSH
2682: LD_INT 7
2684: PUSH
2685: LD_INT 8
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: IN
2692: IFFALSE 2748
// begin bc_kind1 := i [ 7 ] ;
2694: LD_ADDR_OWVAR 44
2698: PUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 7
2706: ARRAY
2707: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2708: LD_STRING 06_remoteVehs_1
2710: PPUSH
2711: LD_INT 0
2713: PPUSH
2714: CALL_OW 30
2718: PUSH
2719: LD_INT 1
2721: EQUAL
2722: IFFALSE 2734
// begin bc_kind2 := 15 ;
2724: LD_ADDR_OWVAR 45
2728: PUSH
2729: LD_INT 15
2731: ST_TO_ADDR
// end else
2732: GO 2748
// begin bc_kind2 := i [ 8 ] ;
2734: LD_ADDR_OWVAR 45
2738: PUSH
2739: LD_VAR 0 3
2743: PUSH
2744: LD_INT 8
2746: ARRAY
2747: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2748: LD_OWVAR 42
2752: PUSH
2753: LD_INT 0
2755: EQUAL
2756: IFFALSE 2874
// begin bc_type := b_warehouse ;
2758: LD_ADDR_OWVAR 42
2762: PUSH
2763: LD_INT 1
2765: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2766: LD_ADDR_EXP 37
2770: PUSH
2771: LD_VAR 0 3
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_VAR 0 3
2784: PUSH
2785: LD_INT 3
2787: ARRAY
2788: PPUSH
2789: LD_VAR 0 3
2793: PUSH
2794: LD_INT 4
2796: ARRAY
2797: PPUSH
2798: CALL_OW 47
2802: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
2803: LD_EXP 37
2807: PPUSH
2808: LD_STRING gamma
2810: PPUSH
2811: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
2815: LD_EXP 37
2819: PPUSH
2820: CALL_OW 274
2824: PPUSH
2825: LD_INT 1
2827: PPUSH
2828: LD_INT 500
2830: PUSH
2831: LD_INT 420
2833: PUSH
2834: LD_INT 350
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: PUSH
2842: LD_OWVAR 67
2846: ARRAY
2847: PPUSH
2848: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2852: LD_EXP 37
2856: PPUSH
2857: CALL_OW 274
2861: PPUSH
2862: LD_INT 2
2864: PPUSH
2865: LD_INT 200
2867: PPUSH
2868: CALL_OW 277
// end else
2872: GO 3016
// begin if bc_type = 4 then
2874: LD_OWVAR 42
2878: PUSH
2879: LD_INT 4
2881: EQUAL
2882: IFFALSE 2931
// begin bc_type = 5 ;
2884: LD_ADDR_OWVAR 42
2888: PUSH
2889: LD_INT 5
2891: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2892: LD_ADDR_VAR 0 4
2896: PUSH
2897: LD_VAR 0 3
2901: PUSH
2902: LD_INT 2
2904: ARRAY
2905: PPUSH
2906: LD_VAR 0 3
2910: PUSH
2911: LD_INT 3
2913: ARRAY
2914: PPUSH
2915: LD_VAR 0 3
2919: PUSH
2920: LD_INT 4
2922: ARRAY
2923: PPUSH
2924: CALL_OW 47
2928: ST_TO_ADDR
// end else
2929: GO 3016
// begin bc_type := i [ 1 ] ;
2931: LD_ADDR_OWVAR 42
2935: PUSH
2936: LD_VAR 0 3
2940: PUSH
2941: LD_INT 1
2943: ARRAY
2944: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2945: LD_STRING 06_remoteVehs_1
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 30
2955: PUSH
2956: LD_INT 1
2958: EQUAL
2959: PUSH
2960: LD_OWVAR 42
2964: PUSH
2965: LD_INT 7
2967: EQUAL
2968: AND
2969: IFFALSE 2979
// bc_type := b_lab_full ;
2971: LD_ADDR_OWVAR 42
2975: PUSH
2976: LD_INT 8
2978: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2979: LD_ADDR_VAR 0 4
2983: PUSH
2984: LD_VAR 0 3
2988: PUSH
2989: LD_INT 2
2991: ARRAY
2992: PPUSH
2993: LD_VAR 0 3
2997: PUSH
2998: LD_INT 3
3000: ARRAY
3001: PPUSH
3002: LD_VAR 0 3
3006: PUSH
3007: LD_INT 4
3009: ARRAY
3010: PPUSH
3011: CALL_OW 47
3015: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
3016: LD_VAR 0 4
3020: PPUSH
3021: CALL_OW 266
3025: PUSH
3026: LD_INT 32
3028: EQUAL
3029: IFFALSE 3049
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3031: LD_VAR 0 4
3035: PPUSH
3036: LD_VAR 0 3
3040: PUSH
3041: LD_INT 7
3043: ARRAY
3044: PPUSH
3045: CALL_OW 431
// end ;
3049: GO 2642
3051: POP
3052: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3053: LD_INT 22
3055: PUSH
3056: LD_INT 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 30
3065: PUSH
3066: LD_INT 3
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PPUSH
3077: CALL_OW 69
3081: IFFALSE 3329
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3083: LD_ADDR_VAR 0 4
3087: PUSH
3088: LD_INT 22
3090: PUSH
3091: LD_INT 1
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 30
3100: PUSH
3101: LD_INT 3
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: LD_INT 1
3119: ARRAY
3120: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3121: LD_ADDR_VAR 0 6
3125: PUSH
3126: LD_VAR 0 4
3130: PPUSH
3131: CALL_OW 250
3135: PPUSH
3136: LD_VAR 0 4
3140: PPUSH
3141: CALL_OW 251
3145: PPUSH
3146: LD_VAR 0 4
3150: PPUSH
3151: CALL_OW 254
3155: PPUSH
3156: CALL 16801 0 3
3160: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: LD_INT 19
3168: PUSH
3169: LD_INT 17
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3176: LD_STRING 06_remoteVehs_1
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 30
3186: IFFALSE 3209
// blist := Insert ( blist , 1 , b_ext_radar ) ;
3188: LD_ADDR_VAR 0 2
3192: PUSH
3193: LD_VAR 0 2
3197: PPUSH
3198: LD_INT 1
3200: PPUSH
3201: LD_INT 20
3203: PPUSH
3204: CALL_OW 2
3208: ST_TO_ADDR
// for i in tmp do
3209: LD_ADDR_VAR 0 3
3213: PUSH
3214: LD_VAR 0 6
3218: PUSH
3219: FOR_IN
3220: IFFALSE 3327
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3222: LD_VAR 0 3
3226: PUSH
3227: LD_INT 1
3229: ARRAY
3230: PPUSH
3231: LD_VAR 0 3
3235: PUSH
3236: LD_INT 2
3238: ARRAY
3239: PPUSH
3240: CALL_OW 428
3244: PUSH
3245: LD_INT 0
3247: EQUAL
3248: IFFALSE 3325
// begin bc_type := blist [ 1 ] ;
3250: LD_ADDR_OWVAR 42
3254: PUSH
3255: LD_VAR 0 2
3259: PUSH
3260: LD_INT 1
3262: ARRAY
3263: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3264: LD_VAR 0 3
3268: PUSH
3269: LD_INT 1
3271: ARRAY
3272: PPUSH
3273: LD_VAR 0 3
3277: PUSH
3278: LD_INT 2
3280: ARRAY
3281: PPUSH
3282: LD_VAR 0 3
3286: PUSH
3287: LD_INT 3
3289: ARRAY
3290: PPUSH
3291: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3295: LD_ADDR_VAR 0 2
3299: PUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: CALL_OW 3
3312: ST_TO_ADDR
// if blist = 0 then
3313: LD_VAR 0 2
3317: PUSH
3318: LD_INT 0
3320: EQUAL
3321: IFFALSE 3325
// break ;
3323: GO 3327
// end ;
3325: GO 3219
3327: POP
3328: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
3329: LD_STRING 06_remoteVehs_1
3331: PPUSH
3332: LD_INT 0
3334: PPUSH
3335: CALL_OW 30
3339: PUSH
3340: LD_INT 1
3342: EQUAL
3343: IFFALSE 3708
// begin bc_type = 36 ;
3345: LD_ADDR_OWVAR 42
3349: PUSH
3350: LD_INT 36
3352: ST_TO_ADDR
// bc_level = 4 ;
3353: LD_ADDR_OWVAR 43
3357: PUSH
3358: LD_INT 4
3360: ST_TO_ADDR
// if CanBeBuilded ( amDepot , b_control_tower , 62 , 12 , 3 , false ) then
3361: LD_EXP 37
3365: PPUSH
3366: LD_INT 36
3368: PPUSH
3369: LD_INT 62
3371: PPUSH
3372: LD_INT 12
3374: PPUSH
3375: LD_INT 3
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL 17671 0 6
3385: IFFALSE 3402
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3387: LD_INT 62
3389: PPUSH
3390: LD_INT 12
3392: PPUSH
3393: LD_INT 3
3395: PPUSH
3396: CALL_OW 47
3400: GO 3523
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 2 , false ) then
3402: LD_EXP 37
3406: PPUSH
3407: LD_INT 36
3409: PPUSH
3410: LD_INT 37
3412: PPUSH
3413: LD_INT 18
3415: PPUSH
3416: LD_INT 2
3418: PPUSH
3419: LD_INT 0
3421: PPUSH
3422: CALL 17671 0 6
3426: IFFALSE 3443
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3428: LD_INT 37
3430: PPUSH
3431: LD_INT 18
3433: PPUSH
3434: LD_INT 2
3436: PPUSH
3437: CALL_OW 47
3441: GO 3523
// if CanBeBuilded ( amDepot , b_control_tower , 66 , 14 , 4 , false ) then
3443: LD_EXP 37
3447: PPUSH
3448: LD_INT 36
3450: PPUSH
3451: LD_INT 66
3453: PPUSH
3454: LD_INT 14
3456: PPUSH
3457: LD_INT 4
3459: PPUSH
3460: LD_INT 0
3462: PPUSH
3463: CALL 17671 0 6
3467: IFFALSE 3484
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3469: LD_INT 66
3471: PPUSH
3472: LD_INT 14
3474: PPUSH
3475: LD_INT 4
3477: PPUSH
3478: CALL_OW 47
3482: GO 3523
// if CanBeBuilded ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3484: LD_EXP 37
3488: PPUSH
3489: LD_INT 36
3491: PPUSH
3492: LD_INT 74
3494: PPUSH
3495: LD_INT 26
3497: PPUSH
3498: LD_INT 4
3500: PPUSH
3501: LD_INT 0
3503: PPUSH
3504: CALL 17671 0 6
3508: IFFALSE 3523
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3510: LD_INT 74
3512: PPUSH
3513: LD_INT 26
3515: PPUSH
3516: LD_INT 4
3518: PPUSH
3519: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: DOUBLE
3529: LD_INT 1
3531: DEC
3532: ST_TO_ADDR
3533: LD_INT 3
3535: PUSH
3536: LD_INT 2
3538: PUSH
3539: LD_INT 2
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: LIST
3546: PUSH
3547: LD_OWVAR 67
3551: ARRAY
3552: PUSH
3553: FOR_TO
3554: IFFALSE 3706
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3556: LD_ADDR_OWVAR 37
3560: PUSH
3561: LD_INT 3
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: LD_INT 3
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: PUSH
3586: LD_INT 2
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_OWVAR 67
3598: ARRAY
3599: ST_TO_ADDR
// vc_engine = 1 ;
3600: LD_ADDR_OWVAR 39
3604: PUSH
3605: LD_INT 1
3607: ST_TO_ADDR
// vc_control = 2 ;
3608: LD_ADDR_OWVAR 38
3612: PUSH
3613: LD_INT 2
3615: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3616: LD_ADDR_OWVAR 40
3620: PUSH
3621: LD_INT 3
3623: PUSH
3624: LD_INT 4
3626: PUSH
3627: LD_INT 5
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 1
3637: PPUSH
3638: LD_INT 3
3640: PPUSH
3641: CALL_OW 12
3645: ARRAY
3646: ST_TO_ADDR
// veh = CreateVehicle ;
3647: LD_ADDR_VAR 0 5
3651: PUSH
3652: CALL_OW 45
3656: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3657: LD_VAR 0 5
3661: PPUSH
3662: LD_INT 4
3664: PPUSH
3665: CALL_OW 233
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
3669: LD_VAR 0 5
3673: PPUSH
3674: LD_EXP 37
3678: PPUSH
3679: CALL_OW 250
3683: PPUSH
3684: LD_EXP 37
3688: PPUSH
3689: CALL_OW 251
3693: PPUSH
3694: LD_INT 7
3696: PPUSH
3697: LD_INT 0
3699: PPUSH
3700: CALL_OW 50
// end ;
3704: GO 3553
3706: POP
3707: POP
// end ; end ;
3708: LD_VAR 0 1
3712: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3713: LD_INT 0
3715: PPUSH
3716: PPUSH
3717: PPUSH
3718: PPUSH
// uc_side = 1 ;
3719: LD_ADDR_OWVAR 20
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// uc_nation = 1 ;
3727: LD_ADDR_OWVAR 21
3731: PUSH
3732: LD_INT 1
3734: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3735: LD_ADDR_EXP 14
3739: PUSH
3740: LD_STRING 06c_Denis
3742: PPUSH
3743: LD_INT 1
3745: PPUSH
3746: CALL 7330 0 2
3750: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3751: LD_EXP 14
3755: PPUSH
3756: LD_INT 4
3758: PPUSH
3759: LD_INT 0
3761: PPUSH
3762: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3766: LD_ADDR_EXP 15
3770: PUSH
3771: LD_STRING 06c_Joan
3773: PPUSH
3774: LD_INT 1
3776: PPUSH
3777: CALL 7330 0 2
3781: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3782: LD_EXP 15
3786: PPUSH
3787: LD_INT 4
3789: PPUSH
3790: LD_INT 0
3792: PPUSH
3793: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3797: LD_STRING GladstoneIn07
3799: PPUSH
3800: LD_INT 0
3802: PPUSH
3803: CALL_OW 30
3807: NOT
3808: IFFALSE 3876
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3810: LD_ADDR_EXP 8
3814: PUSH
3815: LD_STRING 06c_Gladstone
3817: PPUSH
3818: LD_INT 1
3820: PPUSH
3821: CALL 7330 0 2
3825: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3826: LD_EXP 8
3830: NOT
3831: PUSH
3832: LD_STRING GladstoneStayInDelta
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: CALL_OW 30
3842: AND
3843: IFFALSE 3861
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3845: LD_ADDR_EXP 8
3849: PUSH
3850: LD_STRING 05_Gladstone
3852: PPUSH
3853: LD_INT 1
3855: PPUSH
3856: CALL 7330 0 2
3860: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3861: LD_EXP 8
3865: PPUSH
3866: LD_INT 4
3868: PPUSH
3869: LD_INT 0
3871: PPUSH
3872: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3876: LD_STRING LisaStayInDelta
3878: PPUSH
3879: LD_INT 0
3881: PPUSH
3882: CALL_OW 30
3886: IFFALSE 3919
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3888: LD_ADDR_EXP 6
3892: PUSH
3893: LD_STRING 05_Lisa
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: CALL 7330 0 2
3903: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3904: LD_EXP 6
3908: PPUSH
3909: LD_INT 4
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
3919: LD_STRING BobbyStayInDelta
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 30
3929: IFFALSE 3962
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
3931: LD_ADDR_EXP 4
3935: PUSH
3936: LD_STRING 05_Bobby
3938: PPUSH
3939: LD_INT 1
3941: PPUSH
3942: CALL 7330 0 2
3946: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3947: LD_EXP 4
3951: PPUSH
3952: LD_INT 4
3954: PPUSH
3955: LD_INT 0
3957: PPUSH
3958: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
3962: LD_STRING CyrusStayInDelta
3964: PPUSH
3965: LD_INT 0
3967: PPUSH
3968: CALL_OW 30
3972: IFFALSE 4005
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
3974: LD_ADDR_EXP 5
3978: PUSH
3979: LD_STRING 05_Cyrus
3981: PPUSH
3982: LD_INT 1
3984: PPUSH
3985: CALL 7330 0 2
3989: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3990: LD_EXP 5
3994: PPUSH
3995: LD_INT 4
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4005: LD_STRING BrownStayInDelta
4007: PPUSH
4008: LD_INT 0
4010: PPUSH
4011: CALL_OW 30
4015: IFFALSE 4048
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
4017: LD_ADDR_EXP 2
4021: PUSH
4022: LD_STRING 05_Brown
4024: PPUSH
4025: LD_INT 1
4027: PPUSH
4028: CALL 7330 0 2
4032: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4033: LD_EXP 2
4037: PPUSH
4038: LD_INT 4
4040: PPUSH
4041: LD_INT 0
4043: PPUSH
4044: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4048: LD_STRING DonaldsonStayInDelta
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 30
4058: IFFALSE 4091
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
4060: LD_ADDR_EXP 3
4064: PUSH
4065: LD_STRING 05_Donaldson
4067: PPUSH
4068: LD_INT 1
4070: PPUSH
4071: CALL 7330 0 2
4075: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4076: LD_EXP 3
4080: PPUSH
4081: LD_INT 4
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4091: LD_ADDR_VAR 0 4
4095: PUSH
4096: LD_STRING OthersStayInDelta
4098: PPUSH
4099: CALL_OW 31
4103: ST_TO_ADDR
// if other > 2 then
4104: LD_VAR 0 4
4108: PUSH
4109: LD_INT 2
4111: GREATER
4112: IFFALSE 4157
// begin for j = 1 to 2 do
4114: LD_ADDR_VAR 0 3
4118: PUSH
4119: DOUBLE
4120: LD_INT 1
4122: DEC
4123: ST_TO_ADDR
4124: LD_INT 2
4126: PUSH
4127: FOR_TO
4128: IFFALSE 4153
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4130: LD_VAR 0 4
4134: PUSH
4135: LD_VAR 0 3
4139: ARRAY
4140: PPUSH
4141: LD_INT 4
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: CALL_OW 49
4151: GO 4127
4153: POP
4154: POP
// end else
4155: GO 4200
// begin for j = 1 to other do
4157: LD_ADDR_VAR 0 3
4161: PUSH
4162: DOUBLE
4163: LD_INT 1
4165: DEC
4166: ST_TO_ADDR
4167: LD_VAR 0 4
4171: PUSH
4172: FOR_TO
4173: IFFALSE 4198
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4175: LD_VAR 0 4
4179: PUSH
4180: LD_VAR 0 3
4184: ARRAY
4185: PPUSH
4186: LD_INT 4
4188: PPUSH
4189: LD_INT 0
4191: PPUSH
4192: CALL_OW 49
4196: GO 4172
4198: POP
4199: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4200: LD_ADDR_VAR 0 4
4204: PUSH
4205: LD_STRING 06_other_apemans
4207: PPUSH
4208: CALL_OW 31
4212: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4213: LD_VAR 0 4
4217: PUSH
4218: LD_INT 5
4220: PUSH
4221: LD_INT 4
4223: PUSH
4224: LD_INT 3
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: PUSH
4232: LD_OWVAR 67
4236: ARRAY
4237: GREATEREQUAL
4238: IFFALSE 4267
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4240: LD_ADDR_VAR 0 3
4244: PUSH
4245: LD_INT 5
4247: PUSH
4248: LD_INT 4
4250: PUSH
4251: LD_INT 3
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: LIST
4258: PUSH
4259: LD_OWVAR 67
4263: ARRAY
4264: ST_TO_ADDR
4265: GO 4277
// j := other ;
4267: LD_ADDR_VAR 0 3
4271: PUSH
4272: LD_VAR 0 4
4276: ST_TO_ADDR
// for i = 1 to j do
4277: LD_ADDR_VAR 0 2
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4318
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4295: LD_VAR 0 4
4299: PUSH
4300: LD_VAR 0 2
4304: ARRAY
4305: PPUSH
4306: LD_INT 4
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: CALL_OW 49
4316: GO 4292
4318: POP
4319: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4320: LD_INT 4
4322: PPUSH
4323: LD_INT 22
4325: PUSH
4326: LD_INT 1
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: LD_INT 21
4335: PUSH
4336: LD_INT 1
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PPUSH
4347: CALL_OW 70
4351: PPUSH
4352: LD_INT 53
4354: PPUSH
4355: LD_INT 19
4357: PPUSH
4358: CALL_OW 111
// firstAttack = 1 ;
4362: LD_ADDR_EXP 33
4366: PUSH
4367: LD_INT 1
4369: ST_TO_ADDR
// end ;
4370: LD_VAR 0 1
4374: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
4375: LD_INT 0
4377: PPUSH
4378: PPUSH
4379: PPUSH
4380: PPUSH
4381: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
4382: LD_ADDR_VAR 0 4
4386: PUSH
4387: LD_STRING 07_vehicles
4389: PPUSH
4390: EMPTY
4391: PPUSH
4392: CALL_OW 30
4396: ST_TO_ADDR
// uc_side = 1 ;
4397: LD_ADDR_OWVAR 20
4401: PUSH
4402: LD_INT 1
4404: ST_TO_ADDR
// uc_nation = 1 ;
4405: LD_ADDR_OWVAR 21
4409: PUSH
4410: LD_INT 1
4412: ST_TO_ADDR
// if vehicles > 0 then
4413: LD_VAR 0 4
4417: PUSH
4418: LD_INT 0
4420: GREATER
4421: IFFALSE 4560
// begin for i = 1 to vehicles do
4423: LD_ADDR_VAR 0 2
4427: PUSH
4428: DOUBLE
4429: LD_INT 1
4431: DEC
4432: ST_TO_ADDR
4433: LD_VAR 0 4
4437: PUSH
4438: FOR_TO
4439: IFFALSE 4558
// begin vc_chassis = vehicles [ i ] ;
4441: LD_ADDR_OWVAR 37
4445: PUSH
4446: LD_VAR 0 4
4450: PUSH
4451: LD_VAR 0 2
4455: ARRAY
4456: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
4457: LD_ADDR_OWVAR 39
4461: PUSH
4462: LD_VAR 0 4
4466: PUSH
4467: LD_VAR 0 2
4471: PUSH
4472: LD_INT 1
4474: PLUS
4475: ARRAY
4476: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
4477: LD_ADDR_OWVAR 38
4481: PUSH
4482: LD_VAR 0 4
4486: PUSH
4487: LD_VAR 0 2
4491: PUSH
4492: LD_INT 2
4494: PLUS
4495: ARRAY
4496: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
4497: LD_ADDR_OWVAR 40
4501: PUSH
4502: LD_VAR 0 4
4506: PUSH
4507: LD_VAR 0 2
4511: PUSH
4512: LD_INT 3
4514: PLUS
4515: ARRAY
4516: ST_TO_ADDR
// veh = CreateVehicle ;
4517: LD_ADDR_VAR 0 5
4521: PUSH
4522: CALL_OW 45
4526: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
4527: LD_VAR 0 5
4531: PPUSH
4532: LD_INT 4
4534: PPUSH
4535: LD_INT 0
4537: PPUSH
4538: CALL_OW 49
// i = i + 3 ;
4542: LD_ADDR_VAR 0 2
4546: PUSH
4547: LD_VAR 0 2
4551: PUSH
4552: LD_INT 3
4554: PLUS
4555: ST_TO_ADDR
// end ;
4556: GO 4438
4558: POP
4559: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4560: LD_ADDR_EXP 1
4564: PUSH
4565: LD_EXP 43
4569: PUSH
4570: LD_STRING JMM
4572: STR
4573: PPUSH
4574: LD_INT 1
4576: PPUSH
4577: CALL 7330 0 2
4581: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4582: LD_EXP 12
4586: PUSH
4587: LD_INT 1
4589: EQUAL
4590: PUSH
4591: LD_EXP 12
4595: PUSH
4596: LD_INT 3
4598: EQUAL
4599: OR
4600: PUSH
4601: LD_EXP 2
4605: NOT
4606: AND
4607: IFFALSE 4631
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4609: LD_ADDR_EXP 2
4613: PUSH
4614: LD_EXP 43
4618: PUSH
4619: LD_STRING Brown
4621: STR
4622: PPUSH
4623: LD_INT 1
4625: PPUSH
4626: CALL 7330 0 2
4630: ST_TO_ADDR
// if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4631: LD_EXP 12
4635: PUSH
4636: LD_INT 2
4638: EQUAL
4639: PUSH
4640: LD_EXP 12
4644: PUSH
4645: LD_INT 3
4647: EQUAL
4648: OR
4649: PUSH
4650: LD_EXP 3
4654: NOT
4655: AND
4656: IFFALSE 4680
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4658: LD_ADDR_EXP 3
4662: PUSH
4663: LD_EXP 43
4667: PUSH
4668: LD_STRING Donaldson
4670: STR
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: CALL 7330 0 2
4679: ST_TO_ADDR
// if Brown and gammaCommander <> 2 then
4680: LD_EXP 2
4684: PUSH
4685: LD_EXP 12
4689: PUSH
4690: LD_INT 2
4692: NONEQUAL
4693: AND
4694: IFFALSE 4711
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4696: LD_EXP 2
4700: PPUSH
4701: LD_INT 4
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL_OW 49
// if Donaldson and gammaCommander <> 1 then
4711: LD_EXP 3
4715: PUSH
4716: LD_EXP 12
4720: PUSH
4721: LD_INT 1
4723: NONEQUAL
4724: AND
4725: IFFALSE 4742
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4727: LD_EXP 3
4731: PPUSH
4732: LD_INT 4
4734: PPUSH
4735: LD_INT 0
4737: PPUSH
4738: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4742: LD_ADDR_VAR 0 5
4746: PUSH
4747: LD_INT 4
4749: PPUSH
4750: LD_INT 22
4752: PUSH
4753: LD_INT 1
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 21
4762: PUSH
4763: LD_INT 2
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PUSH
4770: LD_INT 58
4772: PUSH
4773: EMPTY
4774: LIST
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: PPUSH
4781: CALL_OW 70
4785: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4786: LD_ADDR_EXP 1
4790: PUSH
4791: LD_EXP 43
4795: PUSH
4796: LD_STRING JMM
4798: STR
4799: PPUSH
4800: LD_INT 1
4802: PPUSH
4803: CALL 7330 0 2
4807: ST_TO_ADDR
// other = CreateCharacterSet ( 07c_others ) ;
4808: LD_ADDR_VAR 0 3
4812: PUSH
4813: LD_STRING 07c_others
4815: PPUSH
4816: CALL_OW 31
4820: ST_TO_ADDR
// for i in other do
4821: LD_ADDR_VAR 0 2
4825: PUSH
4826: LD_VAR 0 3
4830: PUSH
4831: FOR_IN
4832: IFFALSE 4956
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4834: LD_ADDR_VAR 0 5
4838: PUSH
4839: LD_INT 4
4841: PPUSH
4842: LD_INT 22
4844: PUSH
4845: LD_INT 1
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 21
4854: PUSH
4855: LD_INT 2
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 58
4864: PUSH
4865: EMPTY
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: PPUSH
4873: CALL_OW 70
4877: ST_TO_ADDR
// if veh > 0 and GetClass ( i ) = 3 then
4878: LD_VAR 0 5
4882: PUSH
4883: LD_INT 0
4885: GREATER
4886: PUSH
4887: LD_VAR 0 2
4891: PPUSH
4892: CALL_OW 257
4896: PUSH
4897: LD_INT 3
4899: EQUAL
4900: AND
4901: IFFALSE 4923
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4903: LD_VAR 0 2
4907: PPUSH
4908: LD_VAR 0 5
4912: PUSH
4913: LD_INT 1
4915: ARRAY
4916: PPUSH
4917: CALL_OW 52
// end else
4921: GO 4938
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4923: LD_VAR 0 2
4927: PPUSH
4928: LD_INT 4
4930: PPUSH
4931: LD_INT 0
4933: PPUSH
4934: CALL_OW 49
// end ; other = other diff i ;
4938: LD_ADDR_VAR 0 3
4942: PUSH
4943: LD_VAR 0 3
4947: PUSH
4948: LD_VAR 0 2
4952: DIFF
4953: ST_TO_ADDR
// end ;
4954: GO 4831
4956: POP
4957: POP
// for i in other do
4958: LD_ADDR_VAR 0 2
4962: PUSH
4963: LD_VAR 0 3
4967: PUSH
4968: FOR_IN
4969: IFFALSE 5062
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4971: LD_ADDR_VAR 0 5
4975: PUSH
4976: LD_INT 4
4978: PPUSH
4979: LD_INT 22
4981: PUSH
4982: LD_INT 1
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 21
4991: PUSH
4992: LD_INT 2
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PUSH
4999: LD_INT 58
5001: PUSH
5002: EMPTY
5003: LIST
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: LIST
5009: PPUSH
5010: CALL_OW 70
5014: ST_TO_ADDR
// if veh > 0 then
5015: LD_VAR 0 5
5019: PUSH
5020: LD_INT 0
5022: GREATER
5023: IFFALSE 5045
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
5025: LD_VAR 0 2
5029: PPUSH
5030: LD_VAR 0 5
5034: PUSH
5035: LD_INT 1
5037: ARRAY
5038: PPUSH
5039: CALL_OW 52
// end else
5043: GO 5060
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
5045: LD_VAR 0 2
5049: PPUSH
5050: LD_INT 4
5052: PPUSH
5053: LD_INT 0
5055: PPUSH
5056: CALL_OW 49
// end ; end ;
5060: GO 4968
5062: POP
5063: POP
// if veh > 0 then
5064: LD_VAR 0 5
5068: PUSH
5069: LD_INT 0
5071: GREATER
5072: IFFALSE 5094
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
5074: LD_EXP 1
5078: PPUSH
5079: LD_VAR 0 5
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PPUSH
5088: CALL_OW 52
// end else
5092: GO 5109
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
5094: LD_EXP 1
5098: PPUSH
5099: LD_INT 4
5101: PPUSH
5102: LD_INT 0
5104: PPUSH
5105: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5109: LD_ADDR_VAR 0 5
5113: PUSH
5114: LD_INT 4
5116: PPUSH
5117: LD_INT 22
5119: PUSH
5120: LD_INT 1
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 21
5129: PUSH
5130: LD_INT 2
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 58
5139: PUSH
5140: EMPTY
5141: LIST
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: LIST
5147: PPUSH
5148: CALL_OW 70
5152: ST_TO_ADDR
// if not Bobby then
5153: LD_EXP 4
5157: NOT
5158: IFFALSE 5227
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
5160: LD_ADDR_EXP 4
5164: PUSH
5165: LD_EXP 43
5169: PUSH
5170: LD_STRING Bobby
5172: STR
5173: PPUSH
5174: LD_INT 1
5176: PPUSH
5177: CALL 7330 0 2
5181: ST_TO_ADDR
// if veh > 0 then
5182: LD_VAR 0 5
5186: PUSH
5187: LD_INT 0
5189: GREATER
5190: IFFALSE 5212
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
5192: LD_EXP 4
5196: PPUSH
5197: LD_VAR 0 5
5201: PUSH
5202: LD_INT 1
5204: ARRAY
5205: PPUSH
5206: CALL_OW 52
// end else
5210: GO 5227
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
5212: LD_EXP 4
5216: PPUSH
5217: LD_INT 4
5219: PPUSH
5220: LD_INT 0
5222: PPUSH
5223: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5227: LD_ADDR_VAR 0 5
5231: PUSH
5232: LD_INT 4
5234: PPUSH
5235: LD_INT 22
5237: PUSH
5238: LD_INT 1
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 21
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 58
5257: PUSH
5258: EMPTY
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 70
5270: ST_TO_ADDR
// if not Cyrus then
5271: LD_EXP 5
5275: NOT
5276: IFFALSE 5345
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
5278: LD_ADDR_EXP 5
5282: PUSH
5283: LD_EXP 43
5287: PUSH
5288: LD_STRING Cyrus
5290: STR
5291: PPUSH
5292: LD_INT 1
5294: PPUSH
5295: CALL 7330 0 2
5299: ST_TO_ADDR
// if veh > 0 then
5300: LD_VAR 0 5
5304: PUSH
5305: LD_INT 0
5307: GREATER
5308: IFFALSE 5330
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
5310: LD_EXP 5
5314: PPUSH
5315: LD_VAR 0 5
5319: PUSH
5320: LD_INT 1
5322: ARRAY
5323: PPUSH
5324: CALL_OW 52
// end else
5328: GO 5345
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
5330: LD_EXP 5
5334: PPUSH
5335: LD_INT 4
5337: PPUSH
5338: LD_INT 0
5340: PPUSH
5341: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5345: LD_ADDR_VAR 0 5
5349: PUSH
5350: LD_INT 4
5352: PPUSH
5353: LD_INT 22
5355: PUSH
5356: LD_INT 1
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PUSH
5363: LD_INT 21
5365: PUSH
5366: LD_INT 2
5368: PUSH
5369: EMPTY
5370: LIST
5371: LIST
5372: PUSH
5373: LD_INT 58
5375: PUSH
5376: EMPTY
5377: LIST
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: LIST
5383: PPUSH
5384: CALL_OW 70
5388: ST_TO_ADDR
// if not Lisa then
5389: LD_EXP 6
5393: NOT
5394: IFFALSE 5463
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
5396: LD_ADDR_EXP 6
5400: PUSH
5401: LD_EXP 43
5405: PUSH
5406: LD_STRING Lisa
5408: STR
5409: PPUSH
5410: LD_INT 1
5412: PPUSH
5413: CALL 7330 0 2
5417: ST_TO_ADDR
// if veh > 0 then
5418: LD_VAR 0 5
5422: PUSH
5423: LD_INT 0
5425: GREATER
5426: IFFALSE 5448
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
5428: LD_EXP 6
5432: PPUSH
5433: LD_VAR 0 5
5437: PUSH
5438: LD_INT 1
5440: ARRAY
5441: PPUSH
5442: CALL_OW 52
// end else
5446: GO 5463
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
5448: LD_EXP 6
5452: PPUSH
5453: LD_INT 4
5455: PPUSH
5456: LD_INT 0
5458: PPUSH
5459: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5463: LD_ADDR_VAR 0 5
5467: PUSH
5468: LD_INT 4
5470: PPUSH
5471: LD_INT 22
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 21
5483: PUSH
5484: LD_INT 2
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PUSH
5491: LD_INT 58
5493: PUSH
5494: EMPTY
5495: LIST
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: LIST
5501: PPUSH
5502: CALL_OW 70
5506: ST_TO_ADDR
// if not Frank then
5507: LD_EXP 7
5511: NOT
5512: IFFALSE 5581
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
5514: LD_ADDR_EXP 7
5518: PUSH
5519: LD_EXP 43
5523: PUSH
5524: LD_STRING Frank
5526: STR
5527: PPUSH
5528: LD_INT 1
5530: PPUSH
5531: CALL 7330 0 2
5535: ST_TO_ADDR
// if veh > 0 then
5536: LD_VAR 0 5
5540: PUSH
5541: LD_INT 0
5543: GREATER
5544: IFFALSE 5566
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
5546: LD_EXP 7
5550: PPUSH
5551: LD_VAR 0 5
5555: PUSH
5556: LD_INT 1
5558: ARRAY
5559: PPUSH
5560: CALL_OW 52
// end else
5564: GO 5581
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
5566: LD_EXP 7
5570: PPUSH
5571: LD_INT 4
5573: PPUSH
5574: LD_INT 0
5576: PPUSH
5577: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5581: LD_ADDR_VAR 0 5
5585: PUSH
5586: LD_INT 4
5588: PPUSH
5589: LD_INT 22
5591: PUSH
5592: LD_INT 1
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 21
5601: PUSH
5602: LD_INT 2
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 58
5611: PUSH
5612: EMPTY
5613: LIST
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: LIST
5619: PPUSH
5620: CALL_OW 70
5624: ST_TO_ADDR
// if not Gladstone then
5625: LD_EXP 8
5629: NOT
5630: IFFALSE 5699
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5632: LD_ADDR_EXP 8
5636: PUSH
5637: LD_EXP 43
5641: PUSH
5642: LD_STRING Gladstone
5644: STR
5645: PPUSH
5646: LD_INT 1
5648: PPUSH
5649: CALL 7330 0 2
5653: ST_TO_ADDR
// if veh > 0 then
5654: LD_VAR 0 5
5658: PUSH
5659: LD_INT 0
5661: GREATER
5662: IFFALSE 5684
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
5664: LD_EXP 8
5668: PPUSH
5669: LD_VAR 0 5
5673: PUSH
5674: LD_INT 1
5676: ARRAY
5677: PPUSH
5678: CALL_OW 52
// end else
5682: GO 5699
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
5684: LD_EXP 8
5688: PPUSH
5689: LD_INT 4
5691: PPUSH
5692: LD_INT 0
5694: PPUSH
5695: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5699: LD_ADDR_VAR 0 5
5703: PUSH
5704: LD_INT 4
5706: PPUSH
5707: LD_INT 22
5709: PUSH
5710: LD_INT 1
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: LD_INT 21
5719: PUSH
5720: LD_INT 2
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PUSH
5727: LD_INT 58
5729: PUSH
5730: EMPTY
5731: LIST
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: LIST
5737: PPUSH
5738: CALL_OW 70
5742: ST_TO_ADDR
// if not Kikuchi then
5743: LD_EXP 9
5747: NOT
5748: IFFALSE 5817
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
5750: LD_ADDR_EXP 9
5754: PUSH
5755: LD_EXP 43
5759: PUSH
5760: LD_STRING Kikuchi
5762: STR
5763: PPUSH
5764: LD_INT 1
5766: PPUSH
5767: CALL 7330 0 2
5771: ST_TO_ADDR
// if veh > 0 then
5772: LD_VAR 0 5
5776: PUSH
5777: LD_INT 0
5779: GREATER
5780: IFFALSE 5802
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
5782: LD_EXP 9
5786: PPUSH
5787: LD_VAR 0 5
5791: PUSH
5792: LD_INT 1
5794: ARRAY
5795: PPUSH
5796: CALL_OW 52
// end else
5800: GO 5817
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
5802: LD_EXP 9
5806: PPUSH
5807: LD_INT 4
5809: PPUSH
5810: LD_INT 0
5812: PPUSH
5813: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5817: LD_ADDR_VAR 0 5
5821: PUSH
5822: LD_INT 4
5824: PPUSH
5825: LD_INT 22
5827: PUSH
5828: LD_INT 1
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 21
5837: PUSH
5838: LD_INT 2
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PUSH
5845: LD_INT 58
5847: PUSH
5848: EMPTY
5849: LIST
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: LIST
5855: PPUSH
5856: CALL_OW 70
5860: ST_TO_ADDR
// if not Khatam then
5861: LD_EXP 10
5865: NOT
5866: IFFALSE 5935
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5868: LD_ADDR_EXP 10
5872: PUSH
5873: LD_EXP 43
5877: PUSH
5878: LD_STRING Khatam
5880: STR
5881: PPUSH
5882: LD_INT 1
5884: PPUSH
5885: CALL 7330 0 2
5889: ST_TO_ADDR
// if veh > 0 then
5890: LD_VAR 0 5
5894: PUSH
5895: LD_INT 0
5897: GREATER
5898: IFFALSE 5920
// begin PlaceHumanInUnit ( Khatam , veh [ 1 ] ) ;
5900: LD_EXP 10
5904: PPUSH
5905: LD_VAR 0 5
5909: PUSH
5910: LD_INT 1
5912: ARRAY
5913: PPUSH
5914: CALL_OW 52
// end else
5918: GO 5935
// begin PlaceUnitArea ( Khatam , GammaSupport , false ) ;
5920: LD_EXP 10
5924: PPUSH
5925: LD_INT 4
5927: PPUSH
5928: LD_INT 0
5930: PPUSH
5931: CALL_OW 49
// end ; end ; ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
5935: LD_INT 4
5937: PPUSH
5938: LD_INT 22
5940: PUSH
5941: LD_INT 1
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PUSH
5948: EMPTY
5949: LIST
5950: PPUSH
5951: CALL_OW 70
5955: PPUSH
5956: LD_INT 53
5958: PPUSH
5959: LD_INT 19
5961: PPUSH
5962: CALL_OW 111
// end ;
5966: LD_VAR 0 1
5970: RET
// export function PrepareSikorsky ; begin
5971: LD_INT 0
5973: PPUSH
// uc_side = 4 ;
5974: LD_ADDR_OWVAR 20
5978: PUSH
5979: LD_INT 4
5981: ST_TO_ADDR
// uc_nation = 1 ;
5982: LD_ADDR_OWVAR 21
5986: PUSH
5987: LD_INT 1
5989: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5990: LD_ADDR_EXP 16
5994: PUSH
5995: LD_STRING Sikorski
5997: PPUSH
5998: LD_INT 0
6000: PPUSH
6001: CALL 7330 0 2
6005: ST_TO_ADDR
// vc_engine = 1 ;
6006: LD_ADDR_OWVAR 39
6010: PUSH
6011: LD_INT 1
6013: ST_TO_ADDR
// vc_control = 1 ;
6014: LD_ADDR_OWVAR 38
6018: PUSH
6019: LD_INT 1
6021: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
6022: LD_ADDR_OWVAR 40
6026: PUSH
6027: LD_INT 5
6029: PUSH
6030: LD_INT 3
6032: PUSH
6033: LD_INT 4
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: LIST
6040: PUSH
6041: LD_OWVAR 67
6045: ARRAY
6046: ST_TO_ADDR
// vc_chassis = 4 ;
6047: LD_ADDR_OWVAR 37
6051: PUSH
6052: LD_INT 4
6054: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
6055: LD_ADDR_EXP 17
6059: PUSH
6060: CALL_OW 45
6064: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
6065: LD_EXP 17
6069: PPUSH
6070: LD_INT 9
6072: PPUSH
6073: LD_INT 0
6075: PPUSH
6076: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
6080: LD_EXP 16
6084: PPUSH
6085: LD_EXP 17
6089: PPUSH
6090: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
6094: LD_EXP 17
6098: PPUSH
6099: LD_INT 5
6101: PPUSH
6102: CALL_OW 113
// end ;
6106: LD_VAR 0 1
6110: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
6111: LD_INT 0
6113: PPUSH
6114: PPUSH
6115: PPUSH
6116: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
6117: LD_ADDR_VAR 0 2
6121: PUSH
6122: DOUBLE
6123: LD_INT 1
6125: DEC
6126: ST_TO_ADDR
6127: LD_INT 8
6129: PUSH
6130: LD_INT 7
6132: PUSH
6133: LD_INT 7
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: LIST
6140: PUSH
6141: LD_OWVAR 67
6145: ARRAY
6146: PUSH
6147: FOR_TO
6148: IFFALSE 6245
// begin uc_side = 4 ;
6150: LD_ADDR_OWVAR 20
6154: PUSH
6155: LD_INT 4
6157: ST_TO_ADDR
// uc_nation = 1 ;
6158: LD_ADDR_OWVAR 21
6162: PUSH
6163: LD_INT 1
6165: ST_TO_ADDR
// hc_name =  ;
6166: LD_ADDR_OWVAR 26
6170: PUSH
6171: LD_STRING 
6173: ST_TO_ADDR
// hc_gallery =  ;
6174: LD_ADDR_OWVAR 33
6178: PUSH
6179: LD_STRING 
6181: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
6182: LD_INT 0
6184: PPUSH
6185: LD_INT 1
6187: PPUSH
6188: LD_INT 5
6190: PPUSH
6191: LD_INT 8
6193: PPUSH
6194: CALL_OW 12
6198: PPUSH
6199: CALL_OW 380
// un = CreateHuman ;
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: CALL_OW 44
6212: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6213: LD_VAR 0 3
6217: PPUSH
6218: LD_INT 9
6220: PPUSH
6221: LD_INT 0
6223: PPUSH
6224: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6228: LD_VAR 0 3
6232: PPUSH
6233: LD_INT 53
6235: PPUSH
6236: LD_INT 23
6238: PPUSH
6239: CALL_OW 111
// end ;
6243: GO 6147
6245: POP
6246: POP
// for i = 1 to 3 do
6247: LD_ADDR_VAR 0 2
6251: PUSH
6252: DOUBLE
6253: LD_INT 1
6255: DEC
6256: ST_TO_ADDR
6257: LD_INT 3
6259: PUSH
6260: FOR_TO
6261: IFFALSE 6358
// begin uc_side = 4 ;
6263: LD_ADDR_OWVAR 20
6267: PUSH
6268: LD_INT 4
6270: ST_TO_ADDR
// uc_nation = 1 ;
6271: LD_ADDR_OWVAR 21
6275: PUSH
6276: LD_INT 1
6278: ST_TO_ADDR
// hc_name =  ;
6279: LD_ADDR_OWVAR 26
6283: PUSH
6284: LD_STRING 
6286: ST_TO_ADDR
// hc_gallery =  ;
6287: LD_ADDR_OWVAR 33
6291: PUSH
6292: LD_STRING 
6294: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6295: LD_INT 0
6297: PPUSH
6298: LD_INT 4
6300: PPUSH
6301: LD_INT 5
6303: PPUSH
6304: LD_INT 8
6306: PPUSH
6307: CALL_OW 12
6311: PPUSH
6312: CALL_OW 380
// un = CreateHuman ;
6316: LD_ADDR_VAR 0 3
6320: PUSH
6321: CALL_OW 44
6325: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6326: LD_VAR 0 3
6330: PPUSH
6331: LD_INT 9
6333: PPUSH
6334: LD_INT 0
6336: PPUSH
6337: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6341: LD_VAR 0 3
6345: PPUSH
6346: LD_INT 53
6348: PPUSH
6349: LD_INT 23
6351: PPUSH
6352: CALL_OW 111
// end ;
6356: GO 6260
6358: POP
6359: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
6360: LD_ADDR_VAR 0 2
6364: PUSH
6365: DOUBLE
6366: LD_INT 1
6368: DEC
6369: ST_TO_ADDR
6370: LD_INT 9
6372: PUSH
6373: LD_INT 8
6375: PUSH
6376: LD_INT 7
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: PUSH
6384: LD_OWVAR 67
6388: ARRAY
6389: PUSH
6390: FOR_TO
6391: IFFALSE 6587
// begin uc_side = 4 ;
6393: LD_ADDR_OWVAR 20
6397: PUSH
6398: LD_INT 4
6400: ST_TO_ADDR
// uc_nation = 1 ;
6401: LD_ADDR_OWVAR 21
6405: PUSH
6406: LD_INT 1
6408: ST_TO_ADDR
// vc_engine = 1 ;
6409: LD_ADDR_OWVAR 39
6413: PUSH
6414: LD_INT 1
6416: ST_TO_ADDR
// vc_control = 1 ;
6417: LD_ADDR_OWVAR 38
6421: PUSH
6422: LD_INT 1
6424: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
6425: LD_ADDR_OWVAR 40
6429: PUSH
6430: LD_INT 3
6432: PUSH
6433: LD_INT 4
6435: PUSH
6436: LD_INT 5
6438: PUSH
6439: LD_INT 6
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 1
6450: PPUSH
6451: LD_INT 4
6453: PPUSH
6454: CALL_OW 12
6458: ARRAY
6459: ST_TO_ADDR
// vc_chassis = 4 ;
6460: LD_ADDR_OWVAR 37
6464: PUSH
6465: LD_INT 4
6467: ST_TO_ADDR
// veh = CreateVehicle ;
6468: LD_ADDR_VAR 0 4
6472: PUSH
6473: CALL_OW 45
6477: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6478: LD_VAR 0 4
6482: PPUSH
6483: LD_INT 9
6485: PPUSH
6486: LD_INT 0
6488: PPUSH
6489: CALL_OW 49
// hc_name =  ;
6493: LD_ADDR_OWVAR 26
6497: PUSH
6498: LD_STRING 
6500: ST_TO_ADDR
// hc_gallery =  ;
6501: LD_ADDR_OWVAR 33
6505: PUSH
6506: LD_STRING 
6508: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6509: LD_INT 0
6511: PPUSH
6512: LD_INT 3
6514: PPUSH
6515: LD_INT 5
6517: PPUSH
6518: LD_INT 8
6520: PPUSH
6521: CALL_OW 12
6525: PPUSH
6526: CALL_OW 380
// un = CreateHuman ;
6530: LD_ADDR_VAR 0 3
6534: PUSH
6535: CALL_OW 44
6539: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6540: LD_VAR 0 3
6544: PPUSH
6545: LD_VAR 0 4
6549: PPUSH
6550: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
6554: LD_VAR 0 4
6558: PUSH
6559: LD_VAR 0 3
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PPUSH
6568: LD_INT 53
6570: PPUSH
6571: LD_INT 23
6573: PPUSH
6574: CALL_OW 111
// wait ( 0 0$5 ) ;
6578: LD_INT 175
6580: PPUSH
6581: CALL_OW 67
// end ;
6585: GO 6390
6587: POP
6588: POP
// end ; end_of_file
6589: LD_VAR 0 1
6593: RET
// export function PrepareRussianCommander ; begin
6594: LD_INT 0
6596: PPUSH
// uc_side = 3 ;
6597: LD_ADDR_OWVAR 20
6601: PUSH
6602: LD_INT 3
6604: ST_TO_ADDR
// uc_nation = 3 ;
6605: LD_ADDR_OWVAR 21
6609: PUSH
6610: LD_INT 3
6612: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6613: LD_ADDR_EXP 24
6617: PUSH
6618: LD_STRING Borodin
6620: PPUSH
6621: CALL_OW 25
6625: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6626: LD_EXP 24
6630: PPUSH
6631: LD_INT 25
6633: PPUSH
6634: LD_INT 0
6636: PPUSH
6637: CALL_OW 49
// end ;
6641: LD_VAR 0 1
6645: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6646: LD_INT 0
6648: PPUSH
6649: PPUSH
6650: PPUSH
6651: PPUSH
// for i = 1 to 10 do
6652: LD_ADDR_VAR 0 2
6656: PUSH
6657: DOUBLE
6658: LD_INT 1
6660: DEC
6661: ST_TO_ADDR
6662: LD_INT 10
6664: PUSH
6665: FOR_TO
6666: IFFALSE 6740
// begin uc_side = 6 ;
6668: LD_ADDR_OWVAR 20
6672: PUSH
6673: LD_INT 6
6675: ST_TO_ADDR
// uc_nation = 3 ;
6676: LD_ADDR_OWVAR 21
6680: PUSH
6681: LD_INT 3
6683: ST_TO_ADDR
// hc_gallery =  ;
6684: LD_ADDR_OWVAR 33
6688: PUSH
6689: LD_STRING 
6691: ST_TO_ADDR
// hc_name =  ;
6692: LD_ADDR_OWVAR 26
6696: PUSH
6697: LD_STRING 
6699: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6700: LD_INT 0
6702: PPUSH
6703: LD_INT 1
6705: PPUSH
6706: LD_INT 3
6708: PPUSH
6709: CALL_OW 380
// un = CreateHuman ;
6713: LD_ADDR_VAR 0 3
6717: PUSH
6718: CALL_OW 44
6722: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6723: LD_VAR 0 3
6727: PPUSH
6728: LD_INT 1
6730: PPUSH
6731: LD_INT 0
6733: PPUSH
6734: CALL_OW 49
// end ;
6738: GO 6665
6740: POP
6741: POP
// for i = 1 to 3 do
6742: LD_ADDR_VAR 0 2
6746: PUSH
6747: DOUBLE
6748: LD_INT 1
6750: DEC
6751: ST_TO_ADDR
6752: LD_INT 3
6754: PUSH
6755: FOR_TO
6756: IFFALSE 6905
// begin uc_side = 6 ;
6758: LD_ADDR_OWVAR 20
6762: PUSH
6763: LD_INT 6
6765: ST_TO_ADDR
// uc_nation = 3 ;
6766: LD_ADDR_OWVAR 21
6770: PUSH
6771: LD_INT 3
6773: ST_TO_ADDR
// vc_engine = 1 ;
6774: LD_ADDR_OWVAR 39
6778: PUSH
6779: LD_INT 1
6781: ST_TO_ADDR
// vc_control = 1 ;
6782: LD_ADDR_OWVAR 38
6786: PUSH
6787: LD_INT 1
6789: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6790: LD_ADDR_OWVAR 40
6794: PUSH
6795: LD_INT 43
6797: PUSH
6798: LD_INT 44
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: LD_INT 1
6807: PPUSH
6808: LD_INT 2
6810: PPUSH
6811: CALL_OW 12
6815: ARRAY
6816: ST_TO_ADDR
// vc_chassis = 22 ;
6817: LD_ADDR_OWVAR 37
6821: PUSH
6822: LD_INT 22
6824: ST_TO_ADDR
// veh = CreateVehicle ;
6825: LD_ADDR_VAR 0 4
6829: PUSH
6830: CALL_OW 45
6834: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6835: LD_VAR 0 4
6839: PPUSH
6840: LD_INT 2
6842: PPUSH
6843: LD_INT 0
6845: PPUSH
6846: CALL_OW 49
// hc_gallery =  ;
6850: LD_ADDR_OWVAR 33
6854: PUSH
6855: LD_STRING 
6857: ST_TO_ADDR
// hc_name =  ;
6858: LD_ADDR_OWVAR 26
6862: PUSH
6863: LD_STRING 
6865: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6866: LD_INT 0
6868: PPUSH
6869: LD_INT 3
6871: PPUSH
6872: LD_INT 4
6874: PPUSH
6875: CALL_OW 380
// un = CreateHuman ;
6879: LD_ADDR_VAR 0 3
6883: PUSH
6884: CALL_OW 44
6888: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6889: LD_VAR 0 3
6893: PPUSH
6894: LD_VAR 0 4
6898: PPUSH
6899: CALL_OW 52
// end ;
6903: GO 6755
6905: POP
6906: POP
// end ;
6907: LD_VAR 0 1
6911: RET
// export function PrepareRussians ; var i , un ; begin
6912: LD_INT 0
6914: PPUSH
6915: PPUSH
6916: PPUSH
// for i = 1 to 8 do
6917: LD_ADDR_VAR 0 2
6921: PUSH
6922: DOUBLE
6923: LD_INT 1
6925: DEC
6926: ST_TO_ADDR
6927: LD_INT 8
6929: PUSH
6930: FOR_TO
6931: IFFALSE 7017
// begin uc_side = 3 ;
6933: LD_ADDR_OWVAR 20
6937: PUSH
6938: LD_INT 3
6940: ST_TO_ADDR
// uc_nation = 3 ;
6941: LD_ADDR_OWVAR 21
6945: PUSH
6946: LD_INT 3
6948: ST_TO_ADDR
// hc_gallery =  ;
6949: LD_ADDR_OWVAR 33
6953: PUSH
6954: LD_STRING 
6956: ST_TO_ADDR
// hc_name =  ;
6957: LD_ADDR_OWVAR 26
6961: PUSH
6962: LD_STRING 
6964: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6965: LD_INT 0
6967: PPUSH
6968: LD_INT 1
6970: PPUSH
6971: LD_EXP 25
6975: PPUSH
6976: LD_EXP 26
6980: PPUSH
6981: CALL_OW 12
6985: PPUSH
6986: CALL_OW 380
// un = CreateHuman ;
6990: LD_ADDR_VAR 0 3
6994: PUSH
6995: CALL_OW 44
6999: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7000: LD_VAR 0 3
7004: PPUSH
7005: LD_INT 3
7007: PPUSH
7008: LD_INT 0
7010: PPUSH
7011: CALL_OW 49
// end ;
7015: GO 6930
7017: POP
7018: POP
// for i = 1 to 4 do
7019: LD_ADDR_VAR 0 2
7023: PUSH
7024: DOUBLE
7025: LD_INT 1
7027: DEC
7028: ST_TO_ADDR
7029: LD_INT 4
7031: PUSH
7032: FOR_TO
7033: IFFALSE 7119
// begin uc_side = 3 ;
7035: LD_ADDR_OWVAR 20
7039: PUSH
7040: LD_INT 3
7042: ST_TO_ADDR
// uc_nation = 3 ;
7043: LD_ADDR_OWVAR 21
7047: PUSH
7048: LD_INT 3
7050: ST_TO_ADDR
// hc_gallery =  ;
7051: LD_ADDR_OWVAR 33
7055: PUSH
7056: LD_STRING 
7058: ST_TO_ADDR
// hc_name =  ;
7059: LD_ADDR_OWVAR 26
7063: PUSH
7064: LD_STRING 
7066: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7067: LD_INT 0
7069: PPUSH
7070: LD_INT 2
7072: PPUSH
7073: LD_EXP 25
7077: PPUSH
7078: LD_EXP 26
7082: PPUSH
7083: CALL_OW 12
7087: PPUSH
7088: CALL_OW 380
// un = CreateHuman ;
7092: LD_ADDR_VAR 0 3
7096: PUSH
7097: CALL_OW 44
7101: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7102: LD_VAR 0 3
7106: PPUSH
7107: LD_INT 3
7109: PPUSH
7110: LD_INT 0
7112: PPUSH
7113: CALL_OW 49
// end ;
7117: GO 7032
7119: POP
7120: POP
// for i = 1 to 3 do
7121: LD_ADDR_VAR 0 2
7125: PUSH
7126: DOUBLE
7127: LD_INT 1
7129: DEC
7130: ST_TO_ADDR
7131: LD_INT 3
7133: PUSH
7134: FOR_TO
7135: IFFALSE 7221
// begin uc_side = 3 ;
7137: LD_ADDR_OWVAR 20
7141: PUSH
7142: LD_INT 3
7144: ST_TO_ADDR
// uc_nation = 3 ;
7145: LD_ADDR_OWVAR 21
7149: PUSH
7150: LD_INT 3
7152: ST_TO_ADDR
// hc_gallery =  ;
7153: LD_ADDR_OWVAR 33
7157: PUSH
7158: LD_STRING 
7160: ST_TO_ADDR
// hc_name =  ;
7161: LD_ADDR_OWVAR 26
7165: PUSH
7166: LD_STRING 
7168: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7169: LD_INT 0
7171: PPUSH
7172: LD_INT 3
7174: PPUSH
7175: LD_EXP 25
7179: PPUSH
7180: LD_EXP 26
7184: PPUSH
7185: CALL_OW 12
7189: PPUSH
7190: CALL_OW 380
// un = CreateHuman ;
7194: LD_ADDR_VAR 0 3
7198: PUSH
7199: CALL_OW 44
7203: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7204: LD_VAR 0 3
7208: PPUSH
7209: LD_INT 3
7211: PPUSH
7212: LD_INT 0
7214: PPUSH
7215: CALL_OW 49
// end ;
7219: GO 7134
7221: POP
7222: POP
// for i = 1 to 2 do
7223: LD_ADDR_VAR 0 2
7227: PUSH
7228: DOUBLE
7229: LD_INT 1
7231: DEC
7232: ST_TO_ADDR
7233: LD_INT 2
7235: PUSH
7236: FOR_TO
7237: IFFALSE 7323
// begin uc_side = 3 ;
7239: LD_ADDR_OWVAR 20
7243: PUSH
7244: LD_INT 3
7246: ST_TO_ADDR
// uc_nation = 3 ;
7247: LD_ADDR_OWVAR 21
7251: PUSH
7252: LD_INT 3
7254: ST_TO_ADDR
// hc_gallery =  ;
7255: LD_ADDR_OWVAR 33
7259: PUSH
7260: LD_STRING 
7262: ST_TO_ADDR
// hc_name =  ;
7263: LD_ADDR_OWVAR 26
7267: PUSH
7268: LD_STRING 
7270: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7271: LD_INT 0
7273: PPUSH
7274: LD_INT 4
7276: PPUSH
7277: LD_EXP 25
7281: PPUSH
7282: LD_EXP 26
7286: PPUSH
7287: CALL_OW 12
7291: PPUSH
7292: CALL_OW 380
// un = CreateHuman ;
7296: LD_ADDR_VAR 0 3
7300: PUSH
7301: CALL_OW 44
7305: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7306: LD_VAR 0 3
7310: PPUSH
7311: LD_INT 3
7313: PPUSH
7314: LD_INT 0
7316: PPUSH
7317: CALL_OW 49
// end ;
7321: GO 7236
7323: POP
7324: POP
// end ; end_of_file
7325: LD_VAR 0 1
7329: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7330: LD_INT 0
7332: PPUSH
7333: PPUSH
// if exist_mode then
7334: LD_VAR 0 2
7338: IFFALSE 7357
// unit := CreateCharacter ( ident ) else
7340: LD_ADDR_VAR 0 4
7344: PUSH
7345: LD_VAR 0 1
7349: PPUSH
7350: CALL_OW 34
7354: ST_TO_ADDR
7355: GO 7372
// unit := NewCharacter ( ident ) ;
7357: LD_ADDR_VAR 0 4
7361: PUSH
7362: LD_VAR 0 1
7366: PPUSH
7367: CALL_OW 25
7371: ST_TO_ADDR
// result := unit ;
7372: LD_ADDR_VAR 0 3
7376: PUSH
7377: LD_VAR 0 4
7381: ST_TO_ADDR
// end ;
7382: LD_VAR 0 3
7386: RET
// export function Video ( mode ) ; begin
7387: LD_INT 0
7389: PPUSH
// ingame_video = mode ;
7390: LD_ADDR_OWVAR 52
7394: PUSH
7395: LD_VAR 0 1
7399: ST_TO_ADDR
// interface_hidden = mode ;
7400: LD_ADDR_OWVAR 54
7404: PUSH
7405: LD_VAR 0 1
7409: ST_TO_ADDR
// end ;
7410: LD_VAR 0 2
7414: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
7415: LD_INT 0
7417: PPUSH
7418: PPUSH
7419: PPUSH
// rnd = rand ( 1 , characters ) ;
7420: LD_ADDR_VAR 0 6
7424: PUSH
7425: LD_INT 1
7427: PPUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: CALL_OW 12
7437: ST_TO_ADDR
// for i = 1 to characters do
7438: LD_ADDR_VAR 0 5
7442: PUSH
7443: DOUBLE
7444: LD_INT 1
7446: DEC
7447: ST_TO_ADDR
7448: LD_VAR 0 1
7452: PUSH
7453: FOR_TO
7454: IFFALSE 7564
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7456: LD_VAR 0 5
7460: PUSH
7461: LD_VAR 0 6
7465: EQUAL
7466: PUSH
7467: LD_VAR 0 1
7471: PUSH
7472: LD_VAR 0 5
7476: ARRAY
7477: PPUSH
7478: CALL_OW 258
7482: PUSH
7483: LD_INT 1
7485: EQUAL
7486: AND
7487: IFFALSE 7509
// Say ( characters [ i ] , dialogMID ) ;
7489: LD_VAR 0 1
7493: PUSH
7494: LD_VAR 0 5
7498: ARRAY
7499: PPUSH
7500: LD_VAR 0 2
7504: PPUSH
7505: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7509: LD_VAR 0 5
7513: PUSH
7514: LD_VAR 0 6
7518: EQUAL
7519: PUSH
7520: LD_VAR 0 1
7524: PUSH
7525: LD_VAR 0 5
7529: ARRAY
7530: PPUSH
7531: CALL_OW 258
7535: PUSH
7536: LD_INT 2
7538: EQUAL
7539: AND
7540: IFFALSE 7562
// Say ( characters [ i ] , dialogFID ) ;
7542: LD_VAR 0 1
7546: PUSH
7547: LD_VAR 0 5
7551: ARRAY
7552: PPUSH
7553: LD_VAR 0 3
7557: PPUSH
7558: CALL_OW 88
// end ;
7562: GO 7453
7564: POP
7565: POP
// end ;
7566: LD_VAR 0 4
7570: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7571: LD_INT 0
7573: PPUSH
7574: PPUSH
7575: PPUSH
// uc_side := GetSide ( b ) ;
7576: LD_ADDR_OWVAR 20
7580: PUSH
7581: LD_VAR 0 2
7585: PPUSH
7586: CALL_OW 255
7590: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7591: LD_ADDR_OWVAR 21
7595: PUSH
7596: LD_VAR 0 2
7600: PPUSH
7601: CALL_OW 248
7605: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7606: LD_INT 0
7608: PPUSH
7609: LD_INT 1
7611: PPUSH
7612: LD_VAR 0 1
7616: PPUSH
7617: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7621: LD_ADDR_VAR 0 5
7625: PUSH
7626: LD_VAR 0 2
7630: PPUSH
7631: CALL_OW 254
7635: PUSH
7636: LD_INT 3
7638: MINUS
7639: ST_TO_ADDR
// if dir < 0 then
7640: LD_VAR 0 5
7644: PUSH
7645: LD_INT 0
7647: LESS
7648: IFFALSE 7664
// dir := 6 + dir ;
7650: LD_ADDR_VAR 0 5
7654: PUSH
7655: LD_INT 6
7657: PUSH
7658: LD_VAR 0 5
7662: PLUS
7663: ST_TO_ADDR
// un := CreateHuman ;
7664: LD_ADDR_VAR 0 4
7668: PUSH
7669: CALL_OW 44
7673: ST_TO_ADDR
// SetDir ( un , dir ) ;
7674: LD_VAR 0 4
7678: PPUSH
7679: LD_VAR 0 5
7683: PPUSH
7684: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7688: LD_VAR 0 4
7692: PPUSH
7693: LD_VAR 0 2
7697: PPUSH
7698: CALL_OW 52
// end ;
7702: LD_VAR 0 3
7706: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7707: LD_INT 0
7709: PPUSH
7710: PPUSH
7711: PPUSH
7712: PPUSH
// for i = 1 to count do
7713: LD_ADDR_VAR 0 8
7717: PUSH
7718: DOUBLE
7719: LD_INT 1
7721: DEC
7722: ST_TO_ADDR
7723: LD_VAR 0 6
7727: PUSH
7728: FOR_TO
7729: IFFALSE 7810
// begin uc_side = side ;
7731: LD_ADDR_OWVAR 20
7735: PUSH
7736: LD_VAR 0 1
7740: ST_TO_ADDR
// uc_nation = nation ;
7741: LD_ADDR_OWVAR 21
7745: PUSH
7746: LD_VAR 0 2
7750: ST_TO_ADDR
// hc_gallery =  ;
7751: LD_ADDR_OWVAR 33
7755: PUSH
7756: LD_STRING 
7758: ST_TO_ADDR
// hc_name =  ;
7759: LD_ADDR_OWVAR 26
7763: PUSH
7764: LD_STRING 
7766: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7767: LD_INT 0
7769: PPUSH
7770: LD_VAR 0 5
7774: PPUSH
7775: LD_VAR 0 4
7779: PPUSH
7780: CALL_OW 380
// un = CreateHuman ;
7784: LD_ADDR_VAR 0 10
7788: PUSH
7789: CALL_OW 44
7793: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7794: LD_VAR 0 10
7798: PPUSH
7799: LD_VAR 0 3
7803: PPUSH
7804: CALL_OW 52
// end ;
7808: GO 7728
7810: POP
7811: POP
// end ;
7812: LD_VAR 0 7
7816: RET
// export function PrepareDifficulty ; begin
7817: LD_INT 0
7819: PPUSH
// if Difficulty = 1 then
7820: LD_OWVAR 67
7824: PUSH
7825: LD_INT 1
7827: EQUAL
7828: IFFALSE 7846
// begin RuSolMinLevel = 4 ;
7830: LD_ADDR_EXP 25
7834: PUSH
7835: LD_INT 4
7837: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7838: LD_ADDR_EXP 26
7842: PUSH
7843: LD_INT 6
7845: ST_TO_ADDR
// end ; if Difficulty = 2 then
7846: LD_OWVAR 67
7850: PUSH
7851: LD_INT 2
7853: EQUAL
7854: IFFALSE 7924
// begin RuSolMinLevel = 5 ;
7856: LD_ADDR_EXP 25
7860: PUSH
7861: LD_INT 5
7863: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7864: LD_ADDR_EXP 26
7868: PUSH
7869: LD_INT 6
7871: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7872: LD_INT 51
7874: PPUSH
7875: LD_INT 3
7877: PPUSH
7878: LD_INT 1
7880: PPUSH
7881: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7885: LD_INT 57
7887: PPUSH
7888: LD_INT 3
7890: PPUSH
7891: LD_INT 1
7893: PPUSH
7894: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7898: LD_INT 57
7900: PPUSH
7901: LD_INT 6
7903: PPUSH
7904: LD_INT 2
7906: PPUSH
7907: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7911: LD_INT 51
7913: PPUSH
7914: LD_INT 6
7916: PPUSH
7917: LD_INT 2
7919: PPUSH
7920: CALL_OW 322
// end ; if Difficulty = 3 then
7924: LD_OWVAR 67
7928: PUSH
7929: LD_INT 3
7931: EQUAL
7932: IFFALSE 8015
// begin RuSolMinLevel = 5 ;
7934: LD_ADDR_EXP 25
7938: PUSH
7939: LD_INT 5
7941: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7942: LD_ADDR_EXP 26
7946: PUSH
7947: LD_INT 6
7949: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7950: LD_INT 57
7952: PPUSH
7953: LD_INT 3
7955: PPUSH
7956: LD_INT 1
7958: PPUSH
7959: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7963: LD_INT 51
7965: PPUSH
7966: LD_INT 3
7968: PPUSH
7969: LD_INT 1
7971: PPUSH
7972: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7976: LD_INT 52
7978: PPUSH
7979: LD_INT 3
7981: PPUSH
7982: LD_INT 1
7984: PPUSH
7985: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7989: LD_INT 57
7991: PPUSH
7992: LD_INT 6
7994: PPUSH
7995: LD_INT 2
7997: PPUSH
7998: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
8002: LD_INT 52
8004: PPUSH
8005: LD_INT 6
8007: PPUSH
8008: LD_INT 2
8010: PPUSH
8011: CALL_OW 322
// end ; end ;
8015: LD_VAR 0 1
8019: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
8020: LD_INT 0
8022: PPUSH
8023: PPUSH
8024: PPUSH
8025: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
8026: LD_ADDR_VAR 0 3
8030: PUSH
8031: LD_INT 22
8033: PUSH
8034: LD_INT 3
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: LD_INT 25
8043: PUSH
8044: LD_INT 2
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PPUSH
8055: CALL_OW 69
8059: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
8060: LD_ADDR_VAR 0 4
8064: PUSH
8065: LD_INT 4
8067: PUSH
8068: LD_INT 75
8070: PUSH
8071: LD_INT 79
8073: PUSH
8074: LD_INT 2
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 4
8085: PUSH
8086: LD_INT 113
8088: PUSH
8089: LD_INT 94
8091: PUSH
8092: LD_INT 4
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 29
8103: PUSH
8104: LD_INT 106
8106: PUSH
8107: LD_INT 97
8109: PUSH
8110: LD_INT 3
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 26
8121: PUSH
8122: LD_INT 93
8124: PUSH
8125: LD_INT 97
8127: PUSH
8128: LD_INT 5
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 2
8139: PUSH
8140: LD_INT 100
8142: PUSH
8143: LD_INT 89
8145: PUSH
8146: LD_INT 3
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: PUSH
8155: LD_INT 17
8157: PUSH
8158: LD_INT 96
8160: PUSH
8161: LD_INT 89
8163: PUSH
8164: LD_INT 1
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 32
8175: PUSH
8176: LD_INT 78
8178: PUSH
8179: LD_INT 94
8181: PUSH
8182: LD_INT 1
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 32
8193: PUSH
8194: LD_INT 95
8196: PUSH
8197: LD_INT 82
8199: PUSH
8200: LD_INT 3
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 32
8211: PUSH
8212: LD_INT 104
8214: PUSH
8215: LD_INT 85
8217: PUSH
8218: LD_INT 2
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 32
8229: PUSH
8230: LD_INT 81
8232: PUSH
8233: LD_INT 78
8235: PUSH
8236: LD_INT 2
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: PUSH
8245: LD_INT 33
8247: PUSH
8248: LD_INT 109
8250: PUSH
8251: LD_INT 90
8253: PUSH
8254: LD_INT 3
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 33
8265: PUSH
8266: LD_INT 88
8268: PUSH
8269: LD_INT 79
8271: PUSH
8272: LD_INT 3
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 33
8283: PUSH
8284: LD_INT 76
8286: PUSH
8287: LD_INT 87
8289: PUSH
8290: LD_INT 1
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: PUSH
8299: LD_INT 26
8301: PUSH
8302: LD_INT 96
8304: PUSH
8305: LD_INT 97
8307: PUSH
8308: LD_INT 5
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 26
8319: PUSH
8320: LD_INT 85
8322: PUSH
8323: LD_INT 84
8325: PUSH
8326: LD_INT 2
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 6
8337: PUSH
8338: LD_INT 88
8340: PUSH
8341: LD_INT 95
8343: PUSH
8344: LD_INT 0
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 19
8355: PUSH
8356: LD_INT 103
8358: PUSH
8359: LD_INT 89
8361: PUSH
8362: LD_INT 4
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: LD_INT 16
8373: PUSH
8374: LD_INT 97
8376: PUSH
8377: LD_INT 86
8379: PUSH
8380: LD_INT 2
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: PUSH
8389: LD_INT 24
8391: PUSH
8392: LD_INT 100
8394: PUSH
8395: LD_INT 85
8397: PUSH
8398: LD_INT 3
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: ST_TO_ADDR
// for i := 1 to buildingsTab do
8428: LD_ADDR_VAR 0 2
8432: PUSH
8433: DOUBLE
8434: LD_INT 1
8436: DEC
8437: ST_TO_ADDR
8438: LD_VAR 0 4
8442: PUSH
8443: FOR_TO
8444: IFFALSE 8517
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8446: LD_VAR 0 3
8450: PPUSH
8451: LD_VAR 0 4
8455: PUSH
8456: LD_VAR 0 2
8460: ARRAY
8461: PUSH
8462: LD_INT 1
8464: ARRAY
8465: PPUSH
8466: LD_VAR 0 4
8470: PUSH
8471: LD_VAR 0 2
8475: ARRAY
8476: PUSH
8477: LD_INT 2
8479: ARRAY
8480: PPUSH
8481: LD_VAR 0 4
8485: PUSH
8486: LD_VAR 0 2
8490: ARRAY
8491: PUSH
8492: LD_INT 3
8494: ARRAY
8495: PPUSH
8496: LD_VAR 0 4
8500: PUSH
8501: LD_VAR 0 2
8505: ARRAY
8506: PUSH
8507: LD_INT 4
8509: ARRAY
8510: PPUSH
8511: CALL_OW 205
8515: GO 8443
8517: POP
8518: POP
// end ;
8519: LD_VAR 0 1
8523: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8524: LD_INT 0
8526: PPUSH
8527: PPUSH
// for i in charactersList do
8528: LD_ADDR_VAR 0 4
8532: PUSH
8533: LD_VAR 0 1
8537: PUSH
8538: FOR_IN
8539: IFFALSE 8568
// begin if IsOk ( i ) then
8541: LD_VAR 0 4
8545: PPUSH
8546: CALL_OW 302
8550: IFFALSE 8566
// SaveCharacters ( i , ident ) ;
8552: LD_VAR 0 4
8556: PPUSH
8557: LD_VAR 0 2
8561: PPUSH
8562: CALL_OW 38
// end ;
8566: GO 8538
8568: POP
8569: POP
// end ;
8570: LD_VAR 0 3
8574: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8575: LD_INT 0
8577: PPUSH
8578: PPUSH
8579: PPUSH
8580: PPUSH
8581: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8582: LD_ADDR_VAR 0 8
8586: PUSH
8587: LD_INT 48
8589: PUSH
8590: LD_INT 49
8592: PUSH
8593: LD_INT 50
8595: PUSH
8596: LD_INT 20
8598: PUSH
8599: LD_INT 1
8601: PUSH
8602: LD_INT 51
8604: PUSH
8605: LD_INT 52
8607: PUSH
8608: LD_INT 69
8610: PUSH
8611: LD_INT 39
8613: PUSH
8614: LD_INT 34
8616: PUSH
8617: LD_INT 40
8619: PUSH
8620: LD_INT 53
8622: PUSH
8623: LD_INT 71
8625: PUSH
8626: LD_INT 57
8628: PUSH
8629: LD_INT 58
8631: PUSH
8632: LD_INT 44
8634: PUSH
8635: LD_INT 32
8637: PUSH
8638: LD_INT 27
8640: PUSH
8641: LD_INT 23
8643: PUSH
8644: LD_INT 33
8646: PUSH
8647: LD_INT 59
8649: PUSH
8650: LD_INT 54
8652: PUSH
8653: LD_INT 55
8655: PUSH
8656: LD_INT 56
8658: PUSH
8659: LD_INT 63
8661: PUSH
8662: LD_INT 64
8664: PUSH
8665: LD_INT 65
8667: PUSH
8668: LD_INT 30
8670: PUSH
8671: LD_INT 31
8673: PUSH
8674: LD_INT 21
8676: PUSH
8677: LD_INT 22
8679: PUSH
8680: LD_INT 25
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8717: LD_ADDR_VAR 0 5
8721: PUSH
8722: DOUBLE
8723: LD_INT 1
8725: DEC
8726: ST_TO_ADDR
8727: LD_VAR 0 8
8731: PUSH
8732: FOR_TO
8733: IFFALSE 8809
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8735: LD_VAR 0 8
8739: PUSH
8740: LD_VAR 0 5
8744: ARRAY
8745: PPUSH
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 321
8755: PUSH
8756: LD_INT 1
8758: EQUAL
8759: PUSH
8760: LD_VAR 0 8
8764: PUSH
8765: LD_VAR 0 5
8769: ARRAY
8770: PPUSH
8771: LD_VAR 0 3
8775: PPUSH
8776: CALL_OW 482
8780: PUSH
8781: LD_INT 1
8783: EQUAL
8784: AND
8785: IFFALSE 8807
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8787: LD_VAR 0 2
8791: PPUSH
8792: LD_VAR 0 8
8796: PUSH
8797: LD_VAR 0 5
8801: ARRAY
8802: PPUSH
8803: CALL_OW 184
8807: GO 8732
8809: POP
8810: POP
// end ;
8811: LD_VAR 0 4
8815: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8816: LD_INT 0
8818: PPUSH
8819: PPUSH
8820: PPUSH
8821: PPUSH
8822: PPUSH
8823: PPUSH
8824: PPUSH
8825: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8826: LD_ADDR_VAR 0 6
8830: PUSH
8831: LD_VAR 0 2
8835: PPUSH
8836: LD_INT 22
8838: PUSH
8839: LD_VAR 0 1
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 56
8850: PUSH
8851: EMPTY
8852: LIST
8853: PUSH
8854: LD_INT 24
8856: PUSH
8857: LD_INT 700
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: LD_INT 3
8866: PUSH
8867: LD_INT 60
8869: PUSH
8870: EMPTY
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 2
8879: PUSH
8880: LD_INT 25
8882: PUSH
8883: LD_INT 1
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 25
8892: PUSH
8893: LD_INT 5
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 25
8902: PUSH
8903: LD_INT 8
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 25
8912: PUSH
8913: LD_INT 9
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: PPUSH
8934: CALL_OW 70
8938: PUSH
8939: LD_EXP 24
8943: PUSH
8944: EMPTY
8945: LIST
8946: DIFF
8947: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8948: LD_ADDR_VAR 0 7
8952: PUSH
8953: LD_VAR 0 2
8957: PPUSH
8958: LD_INT 22
8960: PUSH
8961: LD_VAR 0 1
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 30
8972: PUSH
8973: LD_INT 32
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: LD_INT 58
8982: PUSH
8983: EMPTY
8984: LIST
8985: PUSH
8986: LD_INT 24
8988: PUSH
8989: LD_INT 251
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: PPUSH
9002: CALL_OW 70
9006: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9007: LD_ADDR_VAR 0 9
9011: PUSH
9012: LD_VAR 0 2
9016: PPUSH
9017: LD_INT 22
9019: PUSH
9020: LD_VAR 0 1
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 2
9031: PUSH
9032: LD_INT 30
9034: PUSH
9035: LD_INT 4
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 30
9044: PUSH
9045: LD_INT 5
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: LIST
9056: PUSH
9057: LD_INT 24
9059: PUSH
9060: LD_INT 251
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: LIST
9071: PPUSH
9072: CALL_OW 70
9076: ST_TO_ADDR
// if barrackList > 0 then
9077: LD_VAR 0 9
9081: PUSH
9082: LD_INT 0
9084: GREATER
9085: IFFALSE 9233
// begin if turretList = 0 then
9087: LD_VAR 0 7
9091: PUSH
9092: LD_INT 0
9094: EQUAL
9095: IFFALSE 9137
// begin if soldiers_list > 0 then
9097: LD_VAR 0 6
9101: PUSH
9102: LD_INT 0
9104: GREATER
9105: IFFALSE 9135
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9107: LD_VAR 0 6
9111: PPUSH
9112: LD_VAR 0 9
9116: PUSH
9117: LD_INT 1
9119: PPUSH
9120: LD_VAR 0 9
9124: PPUSH
9125: CALL_OW 12
9129: ARRAY
9130: PPUSH
9131: CALL_OW 120
// end else
9135: GO 9233
// begin for i in barrackList do
9137: LD_ADDR_VAR 0 4
9141: PUSH
9142: LD_VAR 0 9
9146: PUSH
9147: FOR_IN
9148: IFFALSE 9231
// begin insideUnits = UnitsInside ( i ) ;
9150: LD_ADDR_VAR 0 10
9154: PUSH
9155: LD_VAR 0 4
9159: PPUSH
9160: CALL_OW 313
9164: ST_TO_ADDR
// if insideUnits > 0 then
9165: LD_VAR 0 10
9169: PUSH
9170: LD_INT 0
9172: GREATER
9173: IFFALSE 9197
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9175: LD_VAR 0 10
9179: PUSH
9180: LD_INT 1
9182: ARRAY
9183: PPUSH
9184: LD_VAR 0 7
9188: PUSH
9189: LD_INT 1
9191: ARRAY
9192: PPUSH
9193: CALL_OW 120
// if soldiers_list > 0 then
9197: LD_VAR 0 6
9201: PUSH
9202: LD_INT 0
9204: GREATER
9205: IFFALSE 9229
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9207: LD_VAR 0 6
9211: PUSH
9212: LD_INT 1
9214: ARRAY
9215: PPUSH
9216: LD_VAR 0 7
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: PPUSH
9225: CALL_OW 120
// end ;
9229: GO 9147
9231: POP
9232: POP
// end ; end ; end ;
9233: LD_VAR 0 3
9237: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
9238: LD_INT 0
9240: PPUSH
9241: PPUSH
9242: PPUSH
9243: PPUSH
9244: PPUSH
9245: PPUSH
// for i = 1 to vehCount do
9246: LD_ADDR_VAR 0 8
9250: PUSH
9251: DOUBLE
9252: LD_INT 1
9254: DEC
9255: ST_TO_ADDR
9256: LD_VAR 0 6
9260: PUSH
9261: FOR_TO
9262: IFFALSE 9469
// begin uc_side = side ;
9264: LD_ADDR_OWVAR 20
9268: PUSH
9269: LD_VAR 0 1
9273: ST_TO_ADDR
// uc_nation = nation ;
9274: LD_ADDR_OWVAR 21
9278: PUSH
9279: LD_VAR 0 3
9283: ST_TO_ADDR
// vc_Chassis = 22 ;
9284: LD_ADDR_OWVAR 37
9288: PUSH
9289: LD_INT 22
9291: ST_TO_ADDR
// vc_engine = 1 ;
9292: LD_ADDR_OWVAR 39
9296: PUSH
9297: LD_INT 1
9299: ST_TO_ADDR
// vc_control = 1 ;
9300: LD_ADDR_OWVAR 38
9304: PUSH
9305: LD_INT 1
9307: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9308: LD_ADDR_OWVAR 40
9312: PUSH
9313: LD_INT 43
9315: PUSH
9316: LD_INT 44
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: LD_INT 1
9325: PPUSH
9326: LD_INT 2
9328: PPUSH
9329: CALL_OW 12
9333: ARRAY
9334: ST_TO_ADDR
// veh = CreateVehicle ;
9335: LD_ADDR_VAR 0 12
9339: PUSH
9340: CALL_OW 45
9344: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9345: LD_VAR 0 12
9349: PPUSH
9350: LD_VAR 0 2
9354: PPUSH
9355: LD_INT 0
9357: PPUSH
9358: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9362: LD_ADDR_EXP 32
9366: PUSH
9367: LD_EXP 32
9371: PUSH
9372: LD_VAR 0 12
9376: ADD
9377: ST_TO_ADDR
// hc_class = 3 ;
9378: LD_ADDR_OWVAR 28
9382: PUSH
9383: LD_INT 3
9385: ST_TO_ADDR
// hc_name =  ;
9386: LD_ADDR_OWVAR 26
9390: PUSH
9391: LD_STRING 
9393: ST_TO_ADDR
// hc_gallery =  ;
9394: LD_ADDR_OWVAR 33
9398: PUSH
9399: LD_STRING 
9401: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9402: LD_INT 0
9404: PPUSH
9405: LD_INT 3
9407: PPUSH
9408: LD_EXP 25
9412: PPUSH
9413: LD_EXP 26
9417: PPUSH
9418: CALL_OW 12
9422: PPUSH
9423: CALL_OW 380
// un = CreateHuman ;
9427: LD_ADDR_VAR 0 10
9431: PUSH
9432: CALL_OW 44
9436: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9437: LD_VAR 0 10
9441: PPUSH
9442: LD_VAR 0 12
9446: PPUSH
9447: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9451: LD_ADDR_EXP 32
9455: PUSH
9456: LD_EXP 32
9460: PUSH
9461: LD_VAR 0 10
9465: ADD
9466: ST_TO_ADDR
// end ;
9467: GO 9261
9469: POP
9470: POP
// end ;
9471: LD_VAR 0 7
9475: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
9476: LD_INT 0
9478: PPUSH
9479: PPUSH
9480: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
9481: LD_VAR 0 2
9485: PPUSH
9486: LD_INT 22
9488: PUSH
9489: LD_VAR 0 1
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PUSH
9498: EMPTY
9499: LIST
9500: PPUSH
9501: CALL_OW 70
9505: PUSH
9506: LD_INT 0
9508: EQUAL
9509: PUSH
9510: LD_EXP 32
9514: PUSH
9515: LD_INT 0
9517: GREATER
9518: AND
9519: IFFALSE 9548
// begin ComMoveXY ( defenders_list , 65 , 68 ) ;
9521: LD_EXP 32
9525: PPUSH
9526: LD_INT 65
9528: PPUSH
9529: LD_INT 68
9531: PPUSH
9532: CALL_OW 111
// SetFuel ( defenders_list , 100 ) ;
9536: LD_EXP 32
9540: PPUSH
9541: LD_INT 100
9543: PPUSH
9544: CALL_OW 240
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
9548: LD_VAR 0 2
9552: PPUSH
9553: LD_INT 22
9555: PUSH
9556: LD_VAR 0 1
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: EMPTY
9566: LIST
9567: PPUSH
9568: CALL_OW 70
9572: PUSH
9573: LD_INT 0
9575: GREATER
9576: PUSH
9577: LD_EXP 32
9581: PUSH
9582: LD_INT 0
9584: GREATER
9585: AND
9586: IFFALSE 9665
// ComAgressiveMove ( defenders_list , GetX ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) ) ;
9588: LD_EXP 32
9592: PPUSH
9593: LD_VAR 0 2
9597: PPUSH
9598: LD_INT 22
9600: PUSH
9601: LD_VAR 0 1
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: PPUSH
9613: CALL_OW 70
9617: PUSH
9618: LD_INT 1
9620: ARRAY
9621: PPUSH
9622: CALL_OW 250
9626: PPUSH
9627: LD_VAR 0 2
9631: PPUSH
9632: LD_INT 22
9634: PUSH
9635: LD_VAR 0 1
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: EMPTY
9645: LIST
9646: PPUSH
9647: CALL_OW 70
9651: PUSH
9652: LD_INT 1
9654: ARRAY
9655: PPUSH
9656: CALL_OW 251
9660: PPUSH
9661: CALL_OW 114
// end ;
9665: LD_VAR 0 3
9669: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9670: LD_INT 0
9672: PPUSH
9673: PPUSH
9674: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9675: LD_INT 22
9677: PUSH
9678: LD_VAR 0 1
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: PUSH
9687: LD_INT 21
9689: PUSH
9690: LD_INT 2
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PPUSH
9701: CALL_OW 69
9705: PUSH
9706: LD_VAR 0 3
9710: LESSEQUAL
9711: IFFALSE 9819
// begin for i = 1 to vehCount do
9713: LD_ADDR_VAR 0 9
9717: PUSH
9718: DOUBLE
9719: LD_INT 1
9721: DEC
9722: ST_TO_ADDR
9723: LD_VAR 0 3
9727: PUSH
9728: FOR_TO
9729: IFFALSE 9817
// begin weapon = weaponTab [ i ] ;
9731: LD_ADDR_VAR 0 10
9735: PUSH
9736: LD_VAR 0 4
9740: PUSH
9741: LD_VAR 0 9
9745: ARRAY
9746: ST_TO_ADDR
// if weapon = 46 then
9747: LD_VAR 0 10
9751: PUSH
9752: LD_INT 46
9754: EQUAL
9755: IFFALSE 9786
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9757: LD_VAR 0 2
9761: PPUSH
9762: LD_INT 24
9764: PPUSH
9765: LD_VAR 0 5
9769: PPUSH
9770: LD_VAR 0 6
9774: PPUSH
9775: LD_VAR 0 10
9779: PPUSH
9780: CALL_OW 185
// end else
9784: GO 9815
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9786: LD_VAR 0 2
9790: PPUSH
9791: LD_VAR 0 7
9795: PPUSH
9796: LD_VAR 0 5
9800: PPUSH
9801: LD_VAR 0 6
9805: PPUSH
9806: LD_VAR 0 10
9810: PPUSH
9811: CALL_OW 185
// end ; end ;
9815: GO 9728
9817: POP
9818: POP
// end ; end ;
9819: LD_VAR 0 8
9823: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9824: LD_INT 0
9826: PPUSH
9827: PPUSH
9828: PPUSH
9829: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9830: LD_ADDR_VAR 0 8
9834: PUSH
9835: LD_INT 22
9837: PUSH
9838: LD_VAR 0 1
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 21
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 3
9859: PUSH
9860: LD_INT 24
9862: PUSH
9863: LD_INT 650
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: PPUSH
9879: CALL_OW 69
9883: ST_TO_ADDR
// if damageVehicles > 0 then
9884: LD_VAR 0 8
9888: PUSH
9889: LD_INT 0
9891: GREATER
9892: IFFALSE 9913
// ComMoveXY ( damageVehicles , repX , repY ) ;
9894: LD_VAR 0 8
9898: PPUSH
9899: LD_VAR 0 3
9903: PPUSH
9904: LD_VAR 0 4
9908: PPUSH
9909: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9913: LD_VAR 0 8
9917: PPUSH
9918: LD_INT 95
9920: PUSH
9921: LD_VAR 0 2
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: LD_INT 3
9932: PUSH
9933: LD_INT 58
9935: PUSH
9936: EMPTY
9937: LIST
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 72
9951: PUSH
9952: LD_INT 0
9954: GREATER
9955: IFFALSE 10022
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9957: LD_ADDR_VAR 0 6
9961: PUSH
9962: LD_VAR 0 8
9966: PPUSH
9967: LD_INT 95
9969: PUSH
9970: LD_VAR 0 2
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: LD_INT 3
9981: PUSH
9982: LD_INT 58
9984: PUSH
9985: EMPTY
9986: LIST
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PPUSH
9996: CALL_OW 72
10000: PUSH
10001: FOR_IN
10002: IFFALSE 10020
// ComExitVehicle ( UnitsInside ( i ) ) ;
10004: LD_VAR 0 6
10008: PPUSH
10009: CALL_OW 313
10013: PPUSH
10014: CALL_OW 121
10018: GO 10001
10020: POP
10021: POP
// end ;
10022: LD_VAR 0 5
10026: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10027: LD_INT 0
10029: PPUSH
10030: PPUSH
10031: PPUSH
10032: PPUSH
10033: PPUSH
10034: PPUSH
10035: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10036: LD_ADDR_VAR 0 8
10040: PUSH
10041: LD_INT 22
10043: PUSH
10044: LD_VAR 0 1
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: LD_INT 21
10055: PUSH
10056: LD_INT 2
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 24
10065: PUSH
10066: LD_INT 250
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PUSH
10073: LD_INT 3
10075: PUSH
10076: LD_INT 58
10078: PUSH
10079: EMPTY
10080: LIST
10081: PUSH
10082: LD_INT 2
10084: PUSH
10085: LD_INT 34
10087: PUSH
10088: LD_INT 43
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 34
10097: PUSH
10098: LD_INT 44
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 34
10107: PUSH
10108: LD_INT 46
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: LIST
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: PPUSH
10132: CALL_OW 69
10136: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10137: LD_INT 22
10139: PUSH
10140: LD_VAR 0 1
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 21
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 24
10161: PUSH
10162: LD_INT 1000
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: LD_INT 3
10171: PUSH
10172: LD_INT 58
10174: PUSH
10175: EMPTY
10176: LIST
10177: PUSH
10178: LD_INT 2
10180: PUSH
10181: LD_INT 34
10183: PUSH
10184: LD_INT 43
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: LD_INT 34
10193: PUSH
10194: LD_INT 44
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: LD_INT 34
10203: PUSH
10204: LD_INT 46
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: LIST
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: PPUSH
10228: CALL_OW 69
10232: PUSH
10233: LD_INT 5
10235: PUSH
10236: LD_INT 6
10238: PUSH
10239: LD_INT 7
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: LIST
10246: PUSH
10247: LD_OWVAR 67
10251: ARRAY
10252: GREATEREQUAL
10253: IFFALSE 10818
// repeat wait ( 0 0$1 ) ;
10255: LD_INT 35
10257: PPUSH
10258: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10262: LD_ADDR_VAR 0 8
10266: PUSH
10267: LD_INT 22
10269: PUSH
10270: LD_VAR 0 1
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: LD_INT 21
10281: PUSH
10282: LD_INT 2
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 24
10291: PUSH
10292: LD_INT 250
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 2
10301: PUSH
10302: LD_INT 34
10304: PUSH
10305: LD_INT 43
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 34
10314: PUSH
10315: LD_INT 44
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PUSH
10322: LD_INT 34
10324: PUSH
10325: LD_INT 46
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 3
10340: PUSH
10341: LD_INT 58
10343: PUSH
10344: EMPTY
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: PPUSH
10358: CALL_OW 69
10362: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10363: LD_INT 22
10365: PUSH
10366: LD_VAR 0 1
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 95
10377: PUSH
10378: LD_VAR 0 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PPUSH
10391: CALL_OW 69
10395: NOT
10396: PUSH
10397: LD_VAR 0 11
10401: PUSH
10402: LD_INT 0
10404: EQUAL
10405: AND
10406: IFFALSE 10461
// for i := 1 to wayX do
10408: LD_ADDR_VAR 0 6
10412: PUSH
10413: DOUBLE
10414: LD_INT 1
10416: DEC
10417: ST_TO_ADDR
10418: LD_VAR 0 3
10422: PUSH
10423: FOR_TO
10424: IFFALSE 10459
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10426: LD_VAR 0 8
10430: PPUSH
10431: LD_VAR 0 3
10435: PUSH
10436: LD_VAR 0 6
10440: ARRAY
10441: PPUSH
10442: LD_VAR 0 4
10446: PUSH
10447: LD_VAR 0 6
10451: ARRAY
10452: PPUSH
10453: CALL_OW 114
10457: GO 10423
10459: POP
10460: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10461: LD_INT 22
10463: PUSH
10464: LD_VAR 0 1
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PUSH
10473: LD_INT 95
10475: PUSH
10476: LD_VAR 0 2
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PPUSH
10489: CALL_OW 69
10493: IFFALSE 10717
// begin seeEnemy = 1 ;
10495: LD_ADDR_VAR 0 11
10499: PUSH
10500: LD_INT 1
10502: ST_TO_ADDR
// for j in vehiclesOK do
10503: LD_ADDR_VAR 0 7
10507: PUSH
10508: LD_VAR 0 8
10512: PUSH
10513: FOR_IN
10514: IFFALSE 10715
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10516: LD_ADDR_VAR 0 9
10520: PUSH
10521: LD_INT 81
10523: PUSH
10524: LD_VAR 0 1
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: LD_INT 101
10535: PUSH
10536: LD_INT 1
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PPUSH
10547: CALL_OW 69
10551: PPUSH
10552: LD_VAR 0 7
10556: PPUSH
10557: CALL_OW 74
10561: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10562: LD_ADDR_VAR 0 10
10566: PUSH
10567: LD_INT 81
10569: PUSH
10570: LD_VAR 0 1
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 101
10581: PUSH
10582: LD_INT 1
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 2
10591: PUSH
10592: LD_INT 59
10594: PUSH
10595: EMPTY
10596: LIST
10597: PUSH
10598: LD_INT 21
10600: PUSH
10601: LD_INT 1
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PUSH
10608: LD_INT 21
10610: PUSH
10611: LD_INT 2
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: PUSH
10629: EMPTY
10630: LIST
10631: PPUSH
10632: CALL_OW 69
10636: PPUSH
10637: LD_VAR 0 7
10641: PPUSH
10642: CALL_OW 74
10646: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10647: LD_VAR 0 7
10651: PPUSH
10652: LD_VAR 0 9
10656: PPUSH
10657: CALL_OW 296
10661: PUSH
10662: LD_INT 8
10664: PLUS
10665: PUSH
10666: LD_VAR 0 7
10670: PPUSH
10671: LD_VAR 0 10
10675: PPUSH
10676: CALL_OW 296
10680: LESS
10681: IFFALSE 10699
// ComAttackUnit ( j , target1 ) else
10683: LD_VAR 0 7
10687: PPUSH
10688: LD_VAR 0 9
10692: PPUSH
10693: CALL_OW 115
10697: GO 10713
// ComAttackUnit ( j , target2 ) ;
10699: LD_VAR 0 7
10703: PPUSH
10704: LD_VAR 0 10
10708: PPUSH
10709: CALL_OW 115
// end ;
10713: GO 10513
10715: POP
10716: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10717: LD_INT 22
10719: PUSH
10720: LD_VAR 0 1
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: LD_INT 21
10731: PUSH
10732: LD_INT 2
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: LD_INT 24
10741: PUSH
10742: LD_INT 250
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 2
10751: PUSH
10752: LD_INT 34
10754: PUSH
10755: LD_INT 43
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: LD_INT 34
10764: PUSH
10765: LD_INT 44
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 34
10774: PUSH
10775: LD_INT 46
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 3
10790: PUSH
10791: LD_INT 58
10793: PUSH
10794: EMPTY
10795: LIST
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: PPUSH
10808: CALL_OW 69
10812: PUSH
10813: LD_INT 0
10815: EQUAL
10816: IFFALSE 10255
// seeEnemy = 0 ;
10818: LD_ADDR_VAR 0 11
10822: PUSH
10823: LD_INT 0
10825: ST_TO_ADDR
// end ;
10826: LD_VAR 0 5
10830: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10831: LD_INT 0
10833: PPUSH
10834: PPUSH
10835: PPUSH
10836: PPUSH
10837: PPUSH
10838: PPUSH
// repeat wait ( 0 0$1 ) ;
10839: LD_INT 35
10841: PPUSH
10842: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10846: LD_ADDR_VAR 0 7
10850: PUSH
10851: LD_INT 22
10853: PUSH
10854: LD_VAR 0 1
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 21
10865: PUSH
10866: LD_INT 2
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: LD_INT 24
10875: PUSH
10876: LD_INT 651
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: PPUSH
10888: CALL_OW 69
10892: ST_TO_ADDR
// for j in vehiclesOK do
10893: LD_ADDR_VAR 0 4
10897: PUSH
10898: LD_VAR 0 7
10902: PUSH
10903: FOR_IN
10904: IFFALSE 11105
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10906: LD_ADDR_VAR 0 5
10910: PUSH
10911: LD_INT 81
10913: PUSH
10914: LD_VAR 0 1
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 101
10925: PUSH
10926: LD_INT 1
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PPUSH
10937: CALL_OW 69
10941: PPUSH
10942: LD_VAR 0 4
10946: PPUSH
10947: CALL_OW 74
10951: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10952: LD_ADDR_VAR 0 6
10956: PUSH
10957: LD_INT 81
10959: PUSH
10960: LD_VAR 0 1
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 101
10971: PUSH
10972: LD_INT 1
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 2
10981: PUSH
10982: LD_INT 59
10984: PUSH
10985: EMPTY
10986: LIST
10987: PUSH
10988: LD_INT 21
10990: PUSH
10991: LD_INT 1
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 21
11000: PUSH
11001: LD_INT 2
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: PPUSH
11022: CALL_OW 69
11026: PPUSH
11027: LD_VAR 0 4
11031: PPUSH
11032: CALL_OW 74
11036: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11037: LD_VAR 0 4
11041: PPUSH
11042: LD_VAR 0 5
11046: PPUSH
11047: CALL_OW 296
11051: PUSH
11052: LD_INT 8
11054: PLUS
11055: PUSH
11056: LD_VAR 0 4
11060: PPUSH
11061: LD_VAR 0 6
11065: PPUSH
11066: CALL_OW 296
11070: LESS
11071: IFFALSE 11089
// ComAttackUnit ( j , target1 ) else
11073: LD_VAR 0 4
11077: PPUSH
11078: LD_VAR 0 5
11082: PPUSH
11083: CALL_OW 115
11087: GO 11103
// ComAttackUnit ( j , target2 ) ;
11089: LD_VAR 0 4
11093: PPUSH
11094: LD_VAR 0 6
11098: PPUSH
11099: CALL_OW 115
// end ;
11103: GO 10903
11105: POP
11106: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11107: LD_INT 22
11109: PUSH
11110: LD_VAR 0 1
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PUSH
11119: LD_INT 21
11121: PUSH
11122: LD_INT 2
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 24
11131: PUSH
11132: LD_INT 250
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: LIST
11143: PPUSH
11144: CALL_OW 69
11148: PUSH
11149: LD_INT 0
11151: EQUAL
11152: IFFALSE 10839
// end ;
11154: LD_VAR 0 2
11158: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11159: LD_INT 0
11161: PPUSH
11162: PPUSH
11163: PPUSH
11164: PPUSH
11165: PPUSH
11166: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11167: LD_ADDR_VAR 0 8
11171: PUSH
11172: LD_VAR 0 2
11176: PPUSH
11177: CALL_OW 313
11181: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11182: LD_ADDR_VAR 0 9
11186: PUSH
11187: LD_VAR 0 3
11191: PPUSH
11192: LD_INT 22
11194: PUSH
11195: LD_VAR 0 1
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: LD_INT 25
11206: PUSH
11207: LD_INT 2
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 24
11216: PUSH
11217: LD_INT 750
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 3
11226: PUSH
11227: LD_INT 54
11229: PUSH
11230: EMPTY
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 70
11247: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11248: LD_ADDR_VAR 0 6
11252: PUSH
11253: LD_VAR 0 3
11257: PPUSH
11258: LD_INT 22
11260: PUSH
11261: LD_VAR 0 1
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: LD_INT 21
11272: PUSH
11273: LD_INT 3
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PUSH
11280: LD_INT 3
11282: PUSH
11283: LD_INT 24
11285: PUSH
11286: LD_INT 1000
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: LIST
11301: PUSH
11302: EMPTY
11303: LIST
11304: PPUSH
11305: CALL_OW 70
11309: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11310: LD_VAR 0 6
11314: NOT
11315: PUSH
11316: LD_INT 22
11318: PUSH
11319: LD_VAR 0 1
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 25
11330: PUSH
11331: LD_INT 2
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 24
11340: PUSH
11341: LD_INT 250
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: LIST
11352: PPUSH
11353: CALL_OW 69
11357: NOT
11358: AND
11359: IFFALSE 11363
// exit ;
11361: GO 11560
// if buildings_list > 0 and engineerOkInside then
11363: LD_VAR 0 6
11367: PUSH
11368: LD_INT 0
11370: GREATER
11371: PUSH
11372: LD_VAR 0 8
11376: AND
11377: IFFALSE 11403
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11379: LD_VAR 0 8
11383: PPUSH
11384: LD_INT 25
11386: PUSH
11387: LD_INT 2
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PPUSH
11394: CALL_OW 72
11398: PPUSH
11399: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11403: LD_VAR 0 6
11407: PUSH
11408: LD_INT 0
11410: GREATER
11411: PUSH
11412: LD_VAR 0 9
11416: PUSH
11417: LD_INT 0
11419: GREATER
11420: AND
11421: IFFALSE 11441
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11423: LD_VAR 0 9
11427: PPUSH
11428: LD_VAR 0 6
11432: PUSH
11433: LD_INT 1
11435: ARRAY
11436: PPUSH
11437: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11441: LD_VAR 0 6
11445: PUSH
11446: LD_INT 0
11448: EQUAL
11449: PUSH
11450: LD_VAR 0 4
11454: PUSH
11455: LD_INT 0
11457: EQUAL
11458: AND
11459: PUSH
11460: LD_VAR 0 9
11464: PUSH
11465: LD_INT 0
11467: GREATER
11468: AND
11469: IFFALSE 11485
// ComEnterUnit ( engineerOkOutside , building ) ;
11471: LD_VAR 0 9
11475: PPUSH
11476: LD_VAR 0 2
11480: PPUSH
11481: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11485: LD_VAR 0 9
11489: PUSH
11490: LD_INT 0
11492: GREATER
11493: PUSH
11494: LD_VAR 0 6
11498: PUSH
11499: LD_INT 0
11501: EQUAL
11502: AND
11503: PUSH
11504: LD_VAR 0 4
11508: PUSH
11509: LD_INT 0
11511: GREATER
11512: AND
11513: IFFALSE 11560
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11515: LD_VAR 0 9
11519: PPUSH
11520: LD_VAR 0 4
11524: PUSH
11525: LD_INT 1
11527: ARRAY
11528: PPUSH
11529: LD_VAR 0 4
11533: PUSH
11534: LD_INT 2
11536: ARRAY
11537: PPUSH
11538: LD_VAR 0 4
11542: PUSH
11543: LD_INT 3
11545: ARRAY
11546: PPUSH
11547: LD_VAR 0 4
11551: PUSH
11552: LD_INT 4
11554: ARRAY
11555: PPUSH
11556: CALL_OW 145
// end ;
11560: LD_VAR 0 5
11564: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11565: LD_INT 0
11567: PPUSH
11568: PPUSH
11569: PPUSH
11570: PPUSH
11571: PPUSH
11572: PPUSH
11573: PPUSH
11574: PPUSH
11575: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11576: LD_ADDR_VAR 0 6
11580: PUSH
11581: LD_INT 22
11583: PUSH
11584: LD_VAR 0 1
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: LD_INT 25
11595: PUSH
11596: LD_INT 4
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 23
11605: PUSH
11606: LD_INT 2
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 24
11615: PUSH
11616: LD_INT 251
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: PPUSH
11629: CALL_OW 69
11633: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11634: LD_ADDR_VAR 0 7
11638: PUSH
11639: LD_VAR 0 3
11643: PPUSH
11644: LD_INT 22
11646: PUSH
11647: LD_VAR 0 1
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PUSH
11656: LD_INT 23
11658: PUSH
11659: LD_INT 2
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 25
11668: PUSH
11669: LD_INT 4
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 50
11678: PUSH
11679: EMPTY
11680: LIST
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: PPUSH
11688: CALL_OW 70
11692: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11693: LD_ADDR_VAR 0 10
11697: PUSH
11698: LD_VAR 0 3
11702: PPUSH
11703: LD_INT 22
11705: PUSH
11706: LD_VAR 0 1
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PUSH
11715: LD_INT 21
11717: PUSH
11718: LD_INT 1
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PUSH
11725: LD_INT 3
11727: PUSH
11728: LD_INT 25
11730: PUSH
11731: LD_INT 3
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 3
11744: PUSH
11745: LD_INT 24
11747: PUSH
11748: LD_INT 750
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: PPUSH
11765: CALL_OW 70
11769: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11770: LD_ADDR_VAR 0 11
11774: PUSH
11775: LD_VAR 0 2
11779: PPUSH
11780: LD_INT 22
11782: PUSH
11783: LD_VAR 0 1
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: LD_INT 21
11794: PUSH
11795: LD_INT 1
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 3
11804: PUSH
11805: LD_INT 25
11807: PUSH
11808: LD_INT 3
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 3
11821: PUSH
11822: LD_INT 24
11824: PUSH
11825: LD_INT 1000
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: PPUSH
11842: CALL_OW 70
11846: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11847: LD_VAR 0 10
11851: NOT
11852: PUSH
11853: LD_VAR 0 11
11857: NOT
11858: AND
11859: PUSH
11860: LD_VAR 0 6
11864: NOT
11865: AND
11866: IFFALSE 11870
// exit ;
11868: GO 12104
// if damageUnits > 0 and sci_list > 0 then
11870: LD_VAR 0 10
11874: PUSH
11875: LD_INT 0
11877: GREATER
11878: PUSH
11879: LD_VAR 0 6
11883: PUSH
11884: LD_INT 0
11886: GREATER
11887: AND
11888: IFFALSE 11904
// ComMoveToArea ( damageUnits , healArea ) ;
11890: LD_VAR 0 10
11894: PPUSH
11895: LD_VAR 0 2
11899: PPUSH
11900: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11904: LD_VAR 0 11
11908: PUSH
11909: LD_INT 0
11911: GREATER
11912: PUSH
11913: LD_VAR 0 6
11917: PUSH
11918: LD_INT 0
11920: GREATER
11921: AND
11922: IFFALSE 11933
// ComExitBuilding ( sci_list ) ;
11924: LD_VAR 0 6
11928: PPUSH
11929: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11933: LD_VAR 0 11
11937: PUSH
11938: LD_INT 0
11940: GREATER
11941: PUSH
11942: LD_VAR 0 7
11946: PUSH
11947: LD_INT 0
11949: GREATER
11950: AND
11951: IFFALSE 11971
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11953: LD_VAR 0 7
11957: PPUSH
11958: LD_VAR 0 11
11962: PUSH
11963: LD_INT 1
11965: ARRAY
11966: PPUSH
11967: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11971: LD_VAR 0 10
11975: PUSH
11976: LD_INT 0
11978: EQUAL
11979: PUSH
11980: LD_VAR 0 11
11984: PUSH
11985: LD_INT 0
11987: EQUAL
11988: AND
11989: PUSH
11990: LD_VAR 0 7
11994: PUSH
11995: LD_INT 0
11997: GREATER
11998: AND
11999: IFFALSE 12104
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12001: LD_ADDR_VAR 0 12
12005: PUSH
12006: LD_INT 22
12008: PUSH
12009: LD_VAR 0 1
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 21
12020: PUSH
12021: LD_INT 3
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PUSH
12028: LD_INT 30
12030: PUSH
12031: LD_INT 8
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: LIST
12042: PPUSH
12043: CALL_OW 69
12047: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12048: LD_ADDR_VAR 0 13
12052: PUSH
12053: LD_INT 1
12055: PPUSH
12056: LD_VAR 0 12
12060: PPUSH
12061: CALL_OW 12
12065: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12066: LD_VAR 0 7
12070: PPUSH
12071: LD_INT 3
12073: PUSH
12074: LD_INT 60
12076: PUSH
12077: EMPTY
12078: LIST
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PPUSH
12084: CALL_OW 72
12088: PPUSH
12089: LD_VAR 0 12
12093: PUSH
12094: LD_VAR 0 13
12098: ARRAY
12099: PPUSH
12100: CALL_OW 120
// end ; end ;
12104: LD_VAR 0 5
12108: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12109: LD_INT 0
12111: PPUSH
12112: PPUSH
12113: PPUSH
12114: PPUSH
12115: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12116: LD_ADDR_VAR 0 6
12120: PUSH
12121: LD_INT 22
12123: PUSH
12124: LD_VAR 0 1
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 2
12135: PUSH
12136: LD_INT 30
12138: PUSH
12139: LD_INT 31
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 30
12148: PUSH
12149: LD_INT 32
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: LD_INT 30
12158: PUSH
12159: LD_INT 33
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PUSH
12166: LD_INT 30
12168: PUSH
12169: LD_INT 4
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 30
12178: PUSH
12179: LD_INT 5
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PPUSH
12198: CALL_OW 69
12202: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12203: LD_ADDR_VAR 0 7
12207: PUSH
12208: LD_INT 22
12210: PUSH
12211: LD_VAR 0 2
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 21
12222: PUSH
12223: LD_INT 3
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 58
12232: PUSH
12233: EMPTY
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: PPUSH
12241: CALL_OW 69
12245: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12246: LD_VAR 0 6
12250: PUSH
12251: LD_INT 0
12253: GREATER
12254: PUSH
12255: LD_VAR 0 7
12259: PUSH
12260: LD_INT 0
12262: GREATER
12263: AND
12264: IFFALSE 12334
// begin for i in turretsList do
12266: LD_ADDR_VAR 0 4
12270: PUSH
12271: LD_VAR 0 6
12275: PUSH
12276: FOR_IN
12277: IFFALSE 12332
// begin for j in enemyBuildings do
12279: LD_ADDR_VAR 0 5
12283: PUSH
12284: LD_VAR 0 7
12288: PUSH
12289: FOR_IN
12290: IFFALSE 12328
// begin if GetDistUnits ( i , j ) < 20 then
12292: LD_VAR 0 4
12296: PPUSH
12297: LD_VAR 0 5
12301: PPUSH
12302: CALL_OW 296
12306: PUSH
12307: LD_INT 20
12309: LESS
12310: IFFALSE 12326
// begin ComAttackUnit ( i , j ) ;
12312: LD_VAR 0 4
12316: PPUSH
12317: LD_VAR 0 5
12321: PPUSH
12322: CALL_OW 115
// end ; end ;
12326: GO 12289
12328: POP
12329: POP
// end ;
12330: GO 12276
12332: POP
12333: POP
// end ; end ;
12334: LD_VAR 0 3
12338: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12339: LD_INT 0
12341: PPUSH
12342: PPUSH
12343: PPUSH
12344: PPUSH
12345: PPUSH
12346: PPUSH
12347: PPUSH
12348: PPUSH
12349: PPUSH
12350: PPUSH
12351: PPUSH
// for i = 1 to medicCount do
12352: LD_ADDR_VAR 0 14
12356: PUSH
12357: DOUBLE
12358: LD_INT 1
12360: DEC
12361: ST_TO_ADDR
12362: LD_VAR 0 7
12366: PUSH
12367: FOR_TO
12368: IFFALSE 12450
// begin uc_side = side ;
12370: LD_ADDR_OWVAR 20
12374: PUSH
12375: LD_VAR 0 1
12379: ST_TO_ADDR
// uc_nation = nation ;
12380: LD_ADDR_OWVAR 21
12384: PUSH
12385: LD_VAR 0 2
12389: ST_TO_ADDR
// hc_name =  ;
12390: LD_ADDR_OWVAR 26
12394: PUSH
12395: LD_STRING 
12397: ST_TO_ADDR
// hc_gallery =  ;
12398: LD_ADDR_OWVAR 33
12402: PUSH
12403: LD_STRING 
12405: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12406: LD_INT 0
12408: PPUSH
12409: LD_INT 4
12411: PPUSH
12412: LD_VAR 0 8
12416: PPUSH
12417: CALL_OW 380
// un = CreateHuman ;
12421: LD_ADDR_VAR 0 16
12425: PUSH
12426: CALL_OW 44
12430: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12431: LD_VAR 0 16
12435: PPUSH
12436: LD_VAR 0 9
12440: PPUSH
12441: LD_INT 0
12443: PPUSH
12444: CALL_OW 49
// end ;
12448: GO 12367
12450: POP
12451: POP
// for i = 1 to soldierCount do
12452: LD_ADDR_VAR 0 14
12456: PUSH
12457: DOUBLE
12458: LD_INT 1
12460: DEC
12461: ST_TO_ADDR
12462: LD_VAR 0 3
12466: PUSH
12467: FOR_TO
12468: IFFALSE 12550
// begin uc_side = side ;
12470: LD_ADDR_OWVAR 20
12474: PUSH
12475: LD_VAR 0 1
12479: ST_TO_ADDR
// uc_nation = nation ;
12480: LD_ADDR_OWVAR 21
12484: PUSH
12485: LD_VAR 0 2
12489: ST_TO_ADDR
// hc_name =  ;
12490: LD_ADDR_OWVAR 26
12494: PUSH
12495: LD_STRING 
12497: ST_TO_ADDR
// hc_gallery =  ;
12498: LD_ADDR_OWVAR 33
12502: PUSH
12503: LD_STRING 
12505: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12506: LD_INT 0
12508: PPUSH
12509: LD_INT 1
12511: PPUSH
12512: LD_VAR 0 8
12516: PPUSH
12517: CALL_OW 380
// un = CreateHuman ;
12521: LD_ADDR_VAR 0 16
12525: PUSH
12526: CALL_OW 44
12530: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12531: LD_VAR 0 16
12535: PPUSH
12536: LD_VAR 0 9
12540: PPUSH
12541: LD_INT 0
12543: PPUSH
12544: CALL_OW 49
// end ;
12548: GO 12467
12550: POP
12551: POP
// for i = 1 to sniperCount do
12552: LD_ADDR_VAR 0 14
12556: PUSH
12557: DOUBLE
12558: LD_INT 1
12560: DEC
12561: ST_TO_ADDR
12562: LD_VAR 0 4
12566: PUSH
12567: FOR_TO
12568: IFFALSE 12650
// begin uc_side = side ;
12570: LD_ADDR_OWVAR 20
12574: PUSH
12575: LD_VAR 0 1
12579: ST_TO_ADDR
// uc_nation = nation ;
12580: LD_ADDR_OWVAR 21
12584: PUSH
12585: LD_VAR 0 2
12589: ST_TO_ADDR
// hc_name =  ;
12590: LD_ADDR_OWVAR 26
12594: PUSH
12595: LD_STRING 
12597: ST_TO_ADDR
// hc_gallery =  ;
12598: LD_ADDR_OWVAR 33
12602: PUSH
12603: LD_STRING 
12605: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12606: LD_INT 0
12608: PPUSH
12609: LD_INT 5
12611: PPUSH
12612: LD_VAR 0 8
12616: PPUSH
12617: CALL_OW 380
// un = CreateHuman ;
12621: LD_ADDR_VAR 0 16
12625: PUSH
12626: CALL_OW 44
12630: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12631: LD_VAR 0 16
12635: PPUSH
12636: LD_VAR 0 9
12640: PPUSH
12641: LD_INT 0
12643: PPUSH
12644: CALL_OW 49
// end ;
12648: GO 12567
12650: POP
12651: POP
// for i = 1 to bazookCount do
12652: LD_ADDR_VAR 0 14
12656: PUSH
12657: DOUBLE
12658: LD_INT 1
12660: DEC
12661: ST_TO_ADDR
12662: LD_VAR 0 5
12666: PUSH
12667: FOR_TO
12668: IFFALSE 12750
// begin uc_side = side ;
12670: LD_ADDR_OWVAR 20
12674: PUSH
12675: LD_VAR 0 1
12679: ST_TO_ADDR
// uc_nation = nation ;
12680: LD_ADDR_OWVAR 21
12684: PUSH
12685: LD_VAR 0 2
12689: ST_TO_ADDR
// hc_name =  ;
12690: LD_ADDR_OWVAR 26
12694: PUSH
12695: LD_STRING 
12697: ST_TO_ADDR
// hc_gallery =  ;
12698: LD_ADDR_OWVAR 33
12702: PUSH
12703: LD_STRING 
12705: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12706: LD_INT 0
12708: PPUSH
12709: LD_INT 9
12711: PPUSH
12712: LD_VAR 0 8
12716: PPUSH
12717: CALL_OW 380
// un = CreateHuman ;
12721: LD_ADDR_VAR 0 16
12725: PUSH
12726: CALL_OW 44
12730: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12731: LD_VAR 0 16
12735: PPUSH
12736: LD_VAR 0 9
12740: PPUSH
12741: LD_INT 0
12743: PPUSH
12744: CALL_OW 49
// end ;
12748: GO 12667
12750: POP
12751: POP
// for i = 1 to mortalCount do
12752: LD_ADDR_VAR 0 14
12756: PUSH
12757: DOUBLE
12758: LD_INT 1
12760: DEC
12761: ST_TO_ADDR
12762: LD_VAR 0 6
12766: PUSH
12767: FOR_TO
12768: IFFALSE 12850
// begin uc_side = side ;
12770: LD_ADDR_OWVAR 20
12774: PUSH
12775: LD_VAR 0 1
12779: ST_TO_ADDR
// uc_nation = nation ;
12780: LD_ADDR_OWVAR 21
12784: PUSH
12785: LD_VAR 0 2
12789: ST_TO_ADDR
// hc_name =  ;
12790: LD_ADDR_OWVAR 26
12794: PUSH
12795: LD_STRING 
12797: ST_TO_ADDR
// hc_gallery =  ;
12798: LD_ADDR_OWVAR 33
12802: PUSH
12803: LD_STRING 
12805: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12806: LD_INT 0
12808: PPUSH
12809: LD_INT 8
12811: PPUSH
12812: LD_VAR 0 8
12816: PPUSH
12817: CALL_OW 380
// un = CreateHuman ;
12821: LD_ADDR_VAR 0 16
12825: PUSH
12826: CALL_OW 44
12830: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12831: LD_VAR 0 16
12835: PPUSH
12836: LD_VAR 0 9
12840: PPUSH
12841: LD_INT 0
12843: PPUSH
12844: CALL_OW 49
// end ;
12848: GO 12767
12850: POP
12851: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12852: LD_ADDR_VAR 0 19
12856: PUSH
12857: LD_INT 22
12859: PUSH
12860: LD_VAR 0 1
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: LD_INT 2
12871: PUSH
12872: LD_INT 25
12874: PUSH
12875: LD_INT 1
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: LD_INT 25
12884: PUSH
12885: LD_INT 5
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 25
12894: PUSH
12895: LD_INT 8
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 25
12904: PUSH
12905: LD_INT 9
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PPUSH
12923: CALL_OW 69
12927: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12928: LD_ADDR_VAR 0 18
12932: PUSH
12933: LD_INT 22
12935: PUSH
12936: LD_VAR 0 1
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 25
12947: PUSH
12948: LD_INT 4
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PPUSH
12959: CALL_OW 69
12963: ST_TO_ADDR
// for i in medic_list do
12964: LD_ADDR_VAR 0 14
12968: PUSH
12969: LD_VAR 0 18
12973: PUSH
12974: FOR_IN
12975: IFFALSE 12993
// ComMoveToArea ( i , healArea ) ;
12977: LD_VAR 0 14
12981: PPUSH
12982: LD_VAR 0 10
12986: PPUSH
12987: CALL_OW 113
12991: GO 12974
12993: POP
12994: POP
// if strategy = 1 then
12995: LD_VAR 0 12
12999: PUSH
13000: LD_INT 1
13002: EQUAL
13003: IFFALSE 13549
// begin repeat wait ( 0 0$3 ) ;
13005: LD_INT 105
13007: PPUSH
13008: CALL_OW 67
// for i in soldiersOK_list do
13012: LD_ADDR_VAR 0 14
13016: PUSH
13017: LD_VAR 0 19
13021: PUSH
13022: FOR_IN
13023: IFFALSE 13087
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13025: LD_VAR 0 14
13029: PPUSH
13030: LD_INT 91
13032: PPUSH
13033: LD_INT 63
13035: PPUSH
13036: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13040: LD_VAR 0 14
13044: PPUSH
13045: LD_INT 101
13047: PPUSH
13048: LD_INT 53
13050: PPUSH
13051: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13055: LD_VAR 0 14
13059: PPUSH
13060: LD_INT 75
13062: PPUSH
13063: LD_INT 23
13065: PPUSH
13066: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13070: LD_VAR 0 14
13074: PPUSH
13075: LD_INT 78
13077: PPUSH
13078: LD_INT 8
13080: PPUSH
13081: CALL_OW 174
// end ;
13085: GO 13022
13087: POP
13088: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13089: LD_INT 12
13091: PPUSH
13092: LD_INT 22
13094: PUSH
13095: LD_VAR 0 1
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PPUSH
13104: CALL_OW 70
13108: PUSH
13109: LD_INT 2
13111: GREATER
13112: IFFALSE 13005
// repeat wait ( 0 0$1 ) ;
13114: LD_INT 35
13116: PPUSH
13117: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13121: LD_ADDR_VAR 0 17
13125: PUSH
13126: LD_INT 22
13128: PUSH
13129: LD_VAR 0 1
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 1
13140: PUSH
13141: LD_INT 3
13143: PUSH
13144: LD_INT 24
13146: PUSH
13147: LD_INT 550
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 24
13160: PUSH
13161: LD_INT 250
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PPUSH
13177: CALL_OW 69
13181: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13182: LD_ADDR_VAR 0 19
13186: PUSH
13187: LD_INT 22
13189: PUSH
13190: LD_VAR 0 1
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 2
13201: PUSH
13202: LD_INT 25
13204: PUSH
13205: LD_INT 1
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 25
13214: PUSH
13215: LD_INT 5
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: LD_INT 25
13224: PUSH
13225: LD_INT 8
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 25
13234: PUSH
13235: LD_INT 9
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: PUSH
13249: LD_INT 24
13251: PUSH
13252: LD_INT 1000
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: LIST
13263: PPUSH
13264: CALL_OW 69
13268: ST_TO_ADDR
// if medicCount > 0 then
13269: LD_VAR 0 7
13273: PUSH
13274: LD_INT 0
13276: GREATER
13277: IFFALSE 13351
// begin if damageUnit_list > 0 then
13279: LD_VAR 0 17
13283: PUSH
13284: LD_INT 0
13286: GREATER
13287: IFFALSE 13351
// begin for i in damageUnit_list do
13289: LD_ADDR_VAR 0 14
13293: PUSH
13294: LD_VAR 0 17
13298: PUSH
13299: FOR_IN
13300: IFFALSE 13349
// begin ComMoveToArea ( i , healArea ) ;
13302: LD_VAR 0 14
13306: PPUSH
13307: LD_VAR 0 10
13311: PPUSH
13312: CALL_OW 113
// for j in medic_list do
13316: LD_ADDR_VAR 0 15
13320: PUSH
13321: LD_VAR 0 18
13325: PUSH
13326: FOR_IN
13327: IFFALSE 13345
// AddComHeal ( j , i ) ;
13329: LD_VAR 0 15
13333: PPUSH
13334: LD_VAR 0 14
13338: PPUSH
13339: CALL_OW 188
13343: GO 13326
13345: POP
13346: POP
// end ;
13347: GO 13299
13349: POP
13350: POP
// end ; end ; for i in soldiersOK_list do
13351: LD_ADDR_VAR 0 14
13355: PUSH
13356: LD_VAR 0 19
13360: PUSH
13361: FOR_IN
13362: IFFALSE 13538
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13364: LD_ADDR_VAR 0 22
13368: PUSH
13369: LD_INT 22
13371: PUSH
13372: LD_VAR 0 11
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PPUSH
13381: CALL_OW 69
13385: PPUSH
13386: LD_VAR 0 14
13390: PPUSH
13391: CALL_OW 74
13395: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13396: LD_ADDR_VAR 0 23
13400: PUSH
13401: LD_INT 22
13403: PUSH
13404: LD_VAR 0 11
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 2
13415: PUSH
13416: LD_INT 59
13418: PUSH
13419: EMPTY
13420: LIST
13421: PUSH
13422: LD_INT 21
13424: PUSH
13425: LD_INT 1
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 21
13434: PUSH
13435: LD_INT 2
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: EMPTY
13453: LIST
13454: PPUSH
13455: CALL_OW 69
13459: PPUSH
13460: LD_VAR 0 14
13464: PPUSH
13465: CALL_OW 74
13469: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13470: LD_VAR 0 14
13474: PPUSH
13475: LD_VAR 0 22
13479: PPUSH
13480: CALL_OW 296
13484: PUSH
13485: LD_INT 6
13487: PLUS
13488: PUSH
13489: LD_VAR 0 14
13493: PPUSH
13494: LD_VAR 0 23
13498: PPUSH
13499: CALL_OW 296
13503: LESS
13504: IFFALSE 13522
// begin ComAttackUnit ( i , target1 ) ;
13506: LD_VAR 0 14
13510: PPUSH
13511: LD_VAR 0 22
13515: PPUSH
13516: CALL_OW 115
// end else
13520: GO 13536
// begin ComAttackUnit ( i , target2 ) ;
13522: LD_VAR 0 14
13526: PPUSH
13527: LD_VAR 0 23
13531: PPUSH
13532: CALL_OW 115
// end ; end ;
13536: GO 13361
13538: POP
13539: POP
// until soldiersOK_list = [ ] ;
13540: LD_VAR 0 19
13544: PUSH
13545: EMPTY
13546: EQUAL
13547: IFFALSE 13114
// end ; if strategy = 2 then
13549: LD_VAR 0 12
13553: PUSH
13554: LD_INT 2
13556: EQUAL
13557: IFFALSE 14073
// begin repeat wait ( 0 0$1 ) ;
13559: LD_INT 35
13561: PPUSH
13562: CALL_OW 67
// for i in soldiersOK_list do
13566: LD_ADDR_VAR 0 14
13570: PUSH
13571: LD_VAR 0 19
13575: PUSH
13576: FOR_IN
13577: IFFALSE 13611
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13579: LD_VAR 0 14
13583: PPUSH
13584: LD_INT 91
13586: PPUSH
13587: LD_INT 63
13589: PPUSH
13590: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13594: LD_VAR 0 14
13598: PPUSH
13599: LD_INT 75
13601: PPUSH
13602: LD_INT 33
13604: PPUSH
13605: CALL_OW 174
// end ;
13609: GO 13576
13611: POP
13612: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13613: LD_INT 13
13615: PPUSH
13616: LD_INT 22
13618: PUSH
13619: LD_VAR 0 1
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PPUSH
13628: CALL_OW 70
13632: PUSH
13633: LD_INT 2
13635: GREATER
13636: IFFALSE 13559
// repeat wait ( 0 0$3 ) ;
13638: LD_INT 105
13640: PPUSH
13641: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13645: LD_ADDR_VAR 0 17
13649: PUSH
13650: LD_INT 22
13652: PUSH
13653: LD_VAR 0 1
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 1
13664: PUSH
13665: LD_INT 3
13667: PUSH
13668: LD_INT 24
13670: PUSH
13671: LD_INT 550
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 24
13684: PUSH
13685: LD_INT 250
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: LIST
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PPUSH
13701: CALL_OW 69
13705: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13706: LD_ADDR_VAR 0 19
13710: PUSH
13711: LD_INT 22
13713: PUSH
13714: LD_VAR 0 1
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 2
13725: PUSH
13726: LD_INT 25
13728: PUSH
13729: LD_INT 1
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 25
13738: PUSH
13739: LD_INT 5
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 25
13748: PUSH
13749: LD_INT 8
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: LD_INT 25
13758: PUSH
13759: LD_INT 9
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 24
13775: PUSH
13776: LD_INT 1000
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: PPUSH
13788: CALL_OW 69
13792: ST_TO_ADDR
// if medicCount > 0 then
13793: LD_VAR 0 7
13797: PUSH
13798: LD_INT 0
13800: GREATER
13801: IFFALSE 13875
// begin if damageUnit_list > 0 then
13803: LD_VAR 0 17
13807: PUSH
13808: LD_INT 0
13810: GREATER
13811: IFFALSE 13875
// begin for i in damageUnit_list do
13813: LD_ADDR_VAR 0 14
13817: PUSH
13818: LD_VAR 0 17
13822: PUSH
13823: FOR_IN
13824: IFFALSE 13873
// begin ComMoveToArea ( i , healArea ) ;
13826: LD_VAR 0 14
13830: PPUSH
13831: LD_VAR 0 10
13835: PPUSH
13836: CALL_OW 113
// for j in medic_list do
13840: LD_ADDR_VAR 0 15
13844: PUSH
13845: LD_VAR 0 18
13849: PUSH
13850: FOR_IN
13851: IFFALSE 13869
// AddComHeal ( j , i ) ;
13853: LD_VAR 0 15
13857: PPUSH
13858: LD_VAR 0 14
13862: PPUSH
13863: CALL_OW 188
13867: GO 13850
13869: POP
13870: POP
// end ;
13871: GO 13823
13873: POP
13874: POP
// end ; end ; for i in soldiersOK_list do
13875: LD_ADDR_VAR 0 14
13879: PUSH
13880: LD_VAR 0 19
13884: PUSH
13885: FOR_IN
13886: IFFALSE 14062
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13888: LD_ADDR_VAR 0 22
13892: PUSH
13893: LD_INT 22
13895: PUSH
13896: LD_VAR 0 11
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PPUSH
13905: CALL_OW 69
13909: PPUSH
13910: LD_VAR 0 14
13914: PPUSH
13915: CALL_OW 74
13919: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13920: LD_ADDR_VAR 0 23
13924: PUSH
13925: LD_INT 22
13927: PUSH
13928: LD_VAR 0 11
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: LD_INT 2
13939: PUSH
13940: LD_INT 59
13942: PUSH
13943: EMPTY
13944: LIST
13945: PUSH
13946: LD_INT 21
13948: PUSH
13949: LD_INT 1
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: LD_INT 21
13958: PUSH
13959: LD_INT 2
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PUSH
13976: EMPTY
13977: LIST
13978: PPUSH
13979: CALL_OW 69
13983: PPUSH
13984: LD_VAR 0 14
13988: PPUSH
13989: CALL_OW 74
13993: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13994: LD_VAR 0 14
13998: PPUSH
13999: LD_VAR 0 22
14003: PPUSH
14004: CALL_OW 296
14008: PUSH
14009: LD_INT 6
14011: PLUS
14012: PUSH
14013: LD_VAR 0 14
14017: PPUSH
14018: LD_VAR 0 23
14022: PPUSH
14023: CALL_OW 296
14027: LESS
14028: IFFALSE 14046
// begin ComAttackUnit ( i , target1 ) ;
14030: LD_VAR 0 14
14034: PPUSH
14035: LD_VAR 0 22
14039: PPUSH
14040: CALL_OW 115
// end else
14044: GO 14060
// begin ComAttackUnit ( i , target2 ) ;
14046: LD_VAR 0 14
14050: PPUSH
14051: LD_VAR 0 23
14055: PPUSH
14056: CALL_OW 115
// end ; end ;
14060: GO 13885
14062: POP
14063: POP
// until soldiersOK_list = [ ] ;
14064: LD_VAR 0 19
14068: PUSH
14069: EMPTY
14070: EQUAL
14071: IFFALSE 13638
// end ; if strategy = 3 then
14073: LD_VAR 0 12
14077: PUSH
14078: LD_INT 3
14080: EQUAL
14081: IFFALSE 14627
// begin repeat wait ( 0 0$3 ) ;
14083: LD_INT 105
14085: PPUSH
14086: CALL_OW 67
// for i in soldiersOK_list do
14090: LD_ADDR_VAR 0 14
14094: PUSH
14095: LD_VAR 0 19
14099: PUSH
14100: FOR_IN
14101: IFFALSE 14165
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14103: LD_VAR 0 14
14107: PPUSH
14108: LD_INT 63
14110: PPUSH
14111: LD_INT 71
14113: PPUSH
14114: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14118: LD_VAR 0 14
14122: PPUSH
14123: LD_INT 35
14125: PPUSH
14126: LD_INT 44
14128: PPUSH
14129: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14133: LD_VAR 0 14
14137: PPUSH
14138: LD_INT 23
14140: PPUSH
14141: LD_INT 18
14143: PPUSH
14144: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14148: LD_VAR 0 14
14152: PPUSH
14153: LD_INT 26
14155: PPUSH
14156: LD_INT 12
14158: PPUSH
14159: CALL_OW 174
// end ;
14163: GO 14100
14165: POP
14166: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14167: LD_INT 14
14169: PPUSH
14170: LD_INT 22
14172: PUSH
14173: LD_VAR 0 1
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PPUSH
14182: CALL_OW 70
14186: PUSH
14187: LD_INT 2
14189: GREATER
14190: IFFALSE 14083
// repeat wait ( 0 0$1 ) ;
14192: LD_INT 35
14194: PPUSH
14195: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14199: LD_ADDR_VAR 0 17
14203: PUSH
14204: LD_INT 22
14206: PUSH
14207: LD_VAR 0 1
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: LD_INT 1
14218: PUSH
14219: LD_INT 3
14221: PUSH
14222: LD_INT 24
14224: PUSH
14225: LD_INT 550
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 24
14238: PUSH
14239: LD_INT 250
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PPUSH
14255: CALL_OW 69
14259: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14260: LD_ADDR_VAR 0 19
14264: PUSH
14265: LD_INT 22
14267: PUSH
14268: LD_VAR 0 1
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 2
14279: PUSH
14280: LD_INT 25
14282: PUSH
14283: LD_INT 1
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PUSH
14290: LD_INT 25
14292: PUSH
14293: LD_INT 5
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 25
14302: PUSH
14303: LD_INT 8
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 25
14312: PUSH
14313: LD_INT 9
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 24
14329: PUSH
14330: LD_INT 1000
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: LIST
14341: PPUSH
14342: CALL_OW 69
14346: ST_TO_ADDR
// if medicCount > 0 then
14347: LD_VAR 0 7
14351: PUSH
14352: LD_INT 0
14354: GREATER
14355: IFFALSE 14429
// begin if damageUnit_list > 0 then
14357: LD_VAR 0 17
14361: PUSH
14362: LD_INT 0
14364: GREATER
14365: IFFALSE 14429
// begin for i in damageUnit_list do
14367: LD_ADDR_VAR 0 14
14371: PUSH
14372: LD_VAR 0 17
14376: PUSH
14377: FOR_IN
14378: IFFALSE 14427
// begin ComMoveToArea ( i , healArea ) ;
14380: LD_VAR 0 14
14384: PPUSH
14385: LD_VAR 0 10
14389: PPUSH
14390: CALL_OW 113
// for j in medic_list do
14394: LD_ADDR_VAR 0 15
14398: PUSH
14399: LD_VAR 0 18
14403: PUSH
14404: FOR_IN
14405: IFFALSE 14423
// AddComHeal ( j , i ) ;
14407: LD_VAR 0 15
14411: PPUSH
14412: LD_VAR 0 14
14416: PPUSH
14417: CALL_OW 188
14421: GO 14404
14423: POP
14424: POP
// end ;
14425: GO 14377
14427: POP
14428: POP
// end ; end ; for i in soldiersOK_list do
14429: LD_ADDR_VAR 0 14
14433: PUSH
14434: LD_VAR 0 19
14438: PUSH
14439: FOR_IN
14440: IFFALSE 14616
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14442: LD_ADDR_VAR 0 22
14446: PUSH
14447: LD_INT 22
14449: PUSH
14450: LD_VAR 0 11
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PPUSH
14459: CALL_OW 69
14463: PPUSH
14464: LD_VAR 0 14
14468: PPUSH
14469: CALL_OW 74
14473: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14474: LD_ADDR_VAR 0 23
14478: PUSH
14479: LD_INT 22
14481: PUSH
14482: LD_VAR 0 11
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 2
14493: PUSH
14494: LD_INT 59
14496: PUSH
14497: EMPTY
14498: LIST
14499: PUSH
14500: LD_INT 21
14502: PUSH
14503: LD_INT 1
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 21
14512: PUSH
14513: LD_INT 2
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: EMPTY
14531: LIST
14532: PPUSH
14533: CALL_OW 69
14537: PPUSH
14538: LD_VAR 0 14
14542: PPUSH
14543: CALL_OW 74
14547: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14548: LD_VAR 0 14
14552: PPUSH
14553: LD_VAR 0 22
14557: PPUSH
14558: CALL_OW 296
14562: PUSH
14563: LD_INT 6
14565: PLUS
14566: PUSH
14567: LD_VAR 0 14
14571: PPUSH
14572: LD_VAR 0 23
14576: PPUSH
14577: CALL_OW 296
14581: LESS
14582: IFFALSE 14600
// begin ComAttackUnit ( i , target1 ) ;
14584: LD_VAR 0 14
14588: PPUSH
14589: LD_VAR 0 22
14593: PPUSH
14594: CALL_OW 115
// end else
14598: GO 14614
// begin ComAttackUnit ( i , target2 ) ;
14600: LD_VAR 0 14
14604: PPUSH
14605: LD_VAR 0 23
14609: PPUSH
14610: CALL_OW 115
// end ; end ;
14614: GO 14439
14616: POP
14617: POP
// until soldiersOK_list = [ ] ;
14618: LD_VAR 0 19
14622: PUSH
14623: EMPTY
14624: EQUAL
14625: IFFALSE 14192
// end ; end ;
14627: LD_VAR 0 13
14631: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14632: LD_INT 0
14634: PPUSH
14635: PPUSH
14636: PPUSH
14637: PPUSH
14638: PPUSH
14639: PPUSH
14640: PPUSH
14641: PPUSH
14642: PPUSH
14643: PPUSH
14644: PPUSH
// amChassisTab = [ ] ;
14645: LD_ADDR_VAR 0 19
14649: PUSH
14650: EMPTY
14651: ST_TO_ADDR
// arChassisTab = [ ] ;
14652: LD_ADDR_VAR 0 18
14656: PUSH
14657: EMPTY
14658: ST_TO_ADDR
// ruChassisTab = [ ] ;
14659: LD_ADDR_VAR 0 17
14663: PUSH
14664: EMPTY
14665: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14666: LD_INT 35
14668: PPUSH
14669: CALL_OW 67
// if nation = 1 then
14673: LD_VAR 0 5
14677: PUSH
14678: LD_INT 1
14680: EQUAL
14681: IFFALSE 15172
// begin uc_side = side ;
14683: LD_ADDR_OWVAR 20
14687: PUSH
14688: LD_VAR 0 2
14692: ST_TO_ADDR
// uc_nation = nation ;
14693: LD_ADDR_OWVAR 21
14697: PUSH
14698: LD_VAR 0 5
14702: ST_TO_ADDR
// vc_engine = vehengine ;
14703: LD_ADDR_OWVAR 39
14707: PUSH
14708: LD_VAR 0 6
14712: ST_TO_ADDR
// vc_control = vehcontrol ;
14713: LD_ADDR_OWVAR 38
14717: PUSH
14718: LD_VAR 0 7
14722: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14723: LD_ADDR_OWVAR 40
14727: PUSH
14728: LD_VAR 0 10
14732: PUSH
14733: LD_INT 1
14735: PPUSH
14736: LD_VAR 0 10
14740: PPUSH
14741: CALL_OW 12
14745: ARRAY
14746: ST_TO_ADDR
// for j = 1 to AMWeapon do
14747: LD_ADDR_VAR 0 14
14751: PUSH
14752: DOUBLE
14753: LD_INT 1
14755: DEC
14756: ST_TO_ADDR
14757: LD_VAR 0 10
14761: PUSH
14762: FOR_TO
14763: IFFALSE 15064
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14765: LD_VAR 0 10
14769: PUSH
14770: LD_VAR 0 14
14774: ARRAY
14775: PUSH
14776: LD_INT 2
14778: EQUAL
14779: PUSH
14780: LD_VAR 0 10
14784: PUSH
14785: LD_VAR 0 14
14789: ARRAY
14790: PUSH
14791: LD_INT 3
14793: EQUAL
14794: OR
14795: IFFALSE 14848
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14797: LD_ADDR_VAR 0 19
14801: PUSH
14802: LD_INT 1
14804: PUSH
14805: LD_INT 2
14807: PUSH
14808: LD_INT 3
14810: PUSH
14811: LD_INT 4
14813: PUSH
14814: LD_INT 5
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14824: LD_ADDR_OWVAR 37
14828: PUSH
14829: LD_VAR 0 19
14833: PUSH
14834: LD_INT 1
14836: PPUSH
14837: LD_VAR 0 19
14841: PPUSH
14842: CALL_OW 12
14846: ARRAY
14847: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14848: LD_VAR 0 10
14852: PUSH
14853: LD_VAR 0 14
14857: ARRAY
14858: PUSH
14859: LD_INT 4
14861: EQUAL
14862: PUSH
14863: LD_VAR 0 10
14867: PUSH
14868: LD_VAR 0 14
14872: ARRAY
14873: PUSH
14874: LD_INT 5
14876: EQUAL
14877: OR
14878: PUSH
14879: LD_VAR 0 10
14883: PUSH
14884: LD_VAR 0 14
14888: ARRAY
14889: PUSH
14890: LD_INT 9
14892: EQUAL
14893: OR
14894: PUSH
14895: LD_VAR 0 10
14899: PUSH
14900: LD_VAR 0 14
14904: ARRAY
14905: PUSH
14906: LD_INT 11
14908: EQUAL
14909: OR
14910: PUSH
14911: LD_VAR 0 10
14915: PUSH
14916: LD_VAR 0 14
14920: ARRAY
14921: PUSH
14922: LD_INT 7
14924: EQUAL
14925: OR
14926: IFFALSE 14975
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14928: LD_ADDR_VAR 0 19
14932: PUSH
14933: LD_INT 2
14935: PUSH
14936: LD_INT 3
14938: PUSH
14939: LD_INT 4
14941: PUSH
14942: LD_INT 5
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14951: LD_ADDR_OWVAR 37
14955: PUSH
14956: LD_VAR 0 19
14960: PUSH
14961: LD_INT 1
14963: PPUSH
14964: LD_VAR 0 19
14968: PPUSH
14969: CALL_OW 12
14973: ARRAY
14974: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14975: LD_VAR 0 10
14979: PUSH
14980: LD_VAR 0 14
14984: ARRAY
14985: PUSH
14986: LD_INT 8
14988: EQUAL
14989: PUSH
14990: LD_VAR 0 10
14994: PUSH
14995: LD_VAR 0 14
14999: ARRAY
15000: PUSH
15001: LD_INT 6
15003: EQUAL
15004: OR
15005: PUSH
15006: LD_VAR 0 10
15010: PUSH
15011: LD_VAR 0 14
15015: ARRAY
15016: PUSH
15017: LD_INT 10
15019: EQUAL
15020: OR
15021: IFFALSE 15062
// begin amChassisTab = [ 4 , 5 ] ;
15023: LD_ADDR_VAR 0 19
15027: PUSH
15028: LD_INT 4
15030: PUSH
15031: LD_INT 5
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15038: LD_ADDR_OWVAR 37
15042: PUSH
15043: LD_VAR 0 19
15047: PUSH
15048: LD_INT 1
15050: PPUSH
15051: LD_VAR 0 19
15055: PPUSH
15056: CALL_OW 12
15060: ARRAY
15061: ST_TO_ADDR
// end ; end ;
15062: GO 14762
15064: POP
15065: POP
// veh = CreateVehicle ;
15066: LD_ADDR_VAR 0 16
15070: PUSH
15071: CALL_OW 45
15075: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15076: LD_VAR 0 16
15080: PPUSH
15081: LD_VAR 0 1
15085: PPUSH
15086: LD_INT 0
15088: PPUSH
15089: CALL_OW 49
// if vehControl = 1 then
15093: LD_VAR 0 7
15097: PUSH
15098: LD_INT 1
15100: EQUAL
15101: IFFALSE 15158
// begin hc_gallery =  ;
15103: LD_ADDR_OWVAR 33
15107: PUSH
15108: LD_STRING 
15110: ST_TO_ADDR
// hc_name =  ;
15111: LD_ADDR_OWVAR 26
15115: PUSH
15116: LD_STRING 
15118: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15119: LD_INT 0
15121: PPUSH
15122: LD_INT 3
15124: PPUSH
15125: LD_VAR 0 4
15129: PPUSH
15130: CALL_OW 380
// un = CreateHuman ;
15134: LD_ADDR_VAR 0 15
15138: PUSH
15139: CALL_OW 44
15143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15144: LD_VAR 0 15
15148: PPUSH
15149: LD_VAR 0 16
15153: PPUSH
15154: CALL_OW 52
// end ; i = i + 1 ;
15158: LD_ADDR_VAR 0 13
15162: PUSH
15163: LD_VAR 0 13
15167: PUSH
15168: LD_INT 1
15170: PLUS
15171: ST_TO_ADDR
// end ; if nation = 2 then
15172: LD_VAR 0 5
15176: PUSH
15177: LD_INT 2
15179: EQUAL
15180: IFFALSE 15604
// begin uc_side = side ;
15182: LD_ADDR_OWVAR 20
15186: PUSH
15187: LD_VAR 0 2
15191: ST_TO_ADDR
// uc_nation = nation ;
15192: LD_ADDR_OWVAR 21
15196: PUSH
15197: LD_VAR 0 5
15201: ST_TO_ADDR
// vc_engine = vehengine ;
15202: LD_ADDR_OWVAR 39
15206: PUSH
15207: LD_VAR 0 6
15211: ST_TO_ADDR
// vc_control = vehcontrol ;
15212: LD_ADDR_OWVAR 38
15216: PUSH
15217: LD_VAR 0 7
15221: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15222: LD_ADDR_OWVAR 40
15226: PUSH
15227: LD_VAR 0 9
15231: PUSH
15232: LD_INT 1
15234: PPUSH
15235: LD_VAR 0 9
15239: PPUSH
15240: CALL_OW 12
15244: ARRAY
15245: ST_TO_ADDR
// for j = 1 to ARWeapons do
15246: LD_ADDR_VAR 0 14
15250: PUSH
15251: DOUBLE
15252: LD_INT 1
15254: DEC
15255: ST_TO_ADDR
15256: LD_VAR 0 9
15260: PUSH
15261: FOR_TO
15262: IFFALSE 15496
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15264: LD_VAR 0 9
15268: PUSH
15269: LD_VAR 0 14
15273: ARRAY
15274: PUSH
15275: LD_INT 24
15277: EQUAL
15278: PUSH
15279: LD_VAR 0 9
15283: PUSH
15284: LD_VAR 0 14
15288: ARRAY
15289: PUSH
15290: LD_INT 22
15292: EQUAL
15293: OR
15294: PUSH
15295: LD_VAR 0 9
15299: PUSH
15300: LD_VAR 0 14
15304: ARRAY
15305: PUSH
15306: LD_INT 23
15308: EQUAL
15309: OR
15310: PUSH
15311: LD_VAR 0 9
15315: PUSH
15316: LD_VAR 0 14
15320: ARRAY
15321: PUSH
15322: LD_INT 30
15324: EQUAL
15325: OR
15326: IFFALSE 15375
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15328: LD_ADDR_VAR 0 18
15332: PUSH
15333: LD_INT 11
15335: PUSH
15336: LD_INT 12
15338: PUSH
15339: LD_INT 13
15341: PUSH
15342: LD_INT 14
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15351: LD_ADDR_OWVAR 37
15355: PUSH
15356: LD_VAR 0 18
15360: PUSH
15361: LD_INT 1
15363: PPUSH
15364: LD_VAR 0 18
15368: PPUSH
15369: CALL_OW 12
15373: ARRAY
15374: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15375: LD_VAR 0 9
15379: PUSH
15380: LD_VAR 0 14
15384: ARRAY
15385: PUSH
15386: LD_INT 29
15388: EQUAL
15389: PUSH
15390: LD_VAR 0 9
15394: PUSH
15395: LD_VAR 0 14
15399: ARRAY
15400: PUSH
15401: LD_INT 28
15403: EQUAL
15404: OR
15405: PUSH
15406: LD_VAR 0 9
15410: PUSH
15411: LD_VAR 0 14
15415: ARRAY
15416: PUSH
15417: LD_INT 27
15419: EQUAL
15420: OR
15421: PUSH
15422: LD_VAR 0 9
15426: PUSH
15427: LD_VAR 0 14
15431: ARRAY
15432: PUSH
15433: LD_INT 26
15435: EQUAL
15436: OR
15437: PUSH
15438: LD_VAR 0 9
15442: PUSH
15443: LD_VAR 0 14
15447: ARRAY
15448: PUSH
15449: LD_INT 25
15451: EQUAL
15452: OR
15453: IFFALSE 15494
// begin arChassisTab = [ 13 , 14 ] ;
15455: LD_ADDR_VAR 0 18
15459: PUSH
15460: LD_INT 13
15462: PUSH
15463: LD_INT 14
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15470: LD_ADDR_OWVAR 37
15474: PUSH
15475: LD_VAR 0 18
15479: PUSH
15480: LD_INT 1
15482: PPUSH
15483: LD_VAR 0 18
15487: PPUSH
15488: CALL_OW 12
15492: ARRAY
15493: ST_TO_ADDR
// end ; end ;
15494: GO 15261
15496: POP
15497: POP
// veh = CreateVehicle ;
15498: LD_ADDR_VAR 0 16
15502: PUSH
15503: CALL_OW 45
15507: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15508: LD_VAR 0 16
15512: PPUSH
15513: LD_VAR 0 1
15517: PPUSH
15518: LD_INT 0
15520: PPUSH
15521: CALL_OW 49
// if vehcontrol = 1 then
15525: LD_VAR 0 7
15529: PUSH
15530: LD_INT 1
15532: EQUAL
15533: IFFALSE 15590
// begin hc_gallery =  ;
15535: LD_ADDR_OWVAR 33
15539: PUSH
15540: LD_STRING 
15542: ST_TO_ADDR
// hc_name =  ;
15543: LD_ADDR_OWVAR 26
15547: PUSH
15548: LD_STRING 
15550: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15551: LD_INT 0
15553: PPUSH
15554: LD_INT 3
15556: PPUSH
15557: LD_VAR 0 4
15561: PPUSH
15562: CALL_OW 380
// un = CreateHuman ;
15566: LD_ADDR_VAR 0 15
15570: PUSH
15571: CALL_OW 44
15575: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15576: LD_VAR 0 15
15580: PPUSH
15581: LD_VAR 0 16
15585: PPUSH
15586: CALL_OW 52
// end ; i = i + 1 ;
15590: LD_ADDR_VAR 0 13
15594: PUSH
15595: LD_VAR 0 13
15599: PUSH
15600: LD_INT 1
15602: PLUS
15603: ST_TO_ADDR
// end ; if nation = 3 then
15604: LD_VAR 0 5
15608: PUSH
15609: LD_INT 3
15611: EQUAL
15612: IFFALSE 16004
// begin uc_side = side ;
15614: LD_ADDR_OWVAR 20
15618: PUSH
15619: LD_VAR 0 2
15623: ST_TO_ADDR
// uc_nation = nation ;
15624: LD_ADDR_OWVAR 21
15628: PUSH
15629: LD_VAR 0 5
15633: ST_TO_ADDR
// vc_engine = vehengine ;
15634: LD_ADDR_OWVAR 39
15638: PUSH
15639: LD_VAR 0 6
15643: ST_TO_ADDR
// vc_control = vehcontrol ;
15644: LD_ADDR_OWVAR 38
15648: PUSH
15649: LD_VAR 0 7
15653: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15654: LD_ADDR_OWVAR 40
15658: PUSH
15659: LD_VAR 0 8
15663: PUSH
15664: LD_INT 1
15666: PPUSH
15667: LD_VAR 0 8
15671: PPUSH
15672: CALL_OW 12
15676: ARRAY
15677: ST_TO_ADDR
// for j = 1 to RuWeapons do
15678: LD_ADDR_VAR 0 14
15682: PUSH
15683: DOUBLE
15684: LD_INT 1
15686: DEC
15687: ST_TO_ADDR
15688: LD_VAR 0 8
15692: PUSH
15693: FOR_TO
15694: IFFALSE 15896
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15696: LD_VAR 0 8
15700: PUSH
15701: LD_VAR 0 14
15705: ARRAY
15706: PUSH
15707: LD_INT 42
15709: EQUAL
15710: PUSH
15711: LD_VAR 0 8
15715: PUSH
15716: LD_VAR 0 14
15720: ARRAY
15721: PUSH
15722: LD_INT 43
15724: EQUAL
15725: OR
15726: PUSH
15727: LD_VAR 0 8
15731: PUSH
15732: LD_VAR 0 14
15736: ARRAY
15737: PUSH
15738: LD_INT 44
15740: EQUAL
15741: OR
15742: PUSH
15743: LD_VAR 0 8
15747: PUSH
15748: LD_VAR 0 14
15752: ARRAY
15753: PUSH
15754: LD_INT 45
15756: EQUAL
15757: OR
15758: PUSH
15759: LD_VAR 0 8
15763: PUSH
15764: LD_VAR 0 14
15768: ARRAY
15769: PUSH
15770: LD_INT 49
15772: EQUAL
15773: OR
15774: IFFALSE 15823
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15776: LD_ADDR_VAR 0 17
15780: PUSH
15781: LD_INT 21
15783: PUSH
15784: LD_INT 22
15786: PUSH
15787: LD_INT 23
15789: PUSH
15790: LD_INT 24
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15799: LD_ADDR_OWVAR 37
15803: PUSH
15804: LD_VAR 0 17
15808: PUSH
15809: LD_INT 1
15811: PPUSH
15812: LD_VAR 0 17
15816: PPUSH
15817: CALL_OW 12
15821: ARRAY
15822: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15823: LD_VAR 0 8
15827: PUSH
15828: LD_VAR 0 14
15832: ARRAY
15833: PUSH
15834: LD_INT 46
15836: EQUAL
15837: PUSH
15838: LD_VAR 0 8
15842: PUSH
15843: LD_VAR 0 14
15847: ARRAY
15848: PUSH
15849: LD_INT 47
15851: EQUAL
15852: OR
15853: IFFALSE 15894
// begin ruChassisTab = [ 23 , 24 ] ;
15855: LD_ADDR_VAR 0 17
15859: PUSH
15860: LD_INT 23
15862: PUSH
15863: LD_INT 24
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15870: LD_ADDR_OWVAR 37
15874: PUSH
15875: LD_VAR 0 17
15879: PUSH
15880: LD_INT 1
15882: PPUSH
15883: LD_VAR 0 17
15887: PPUSH
15888: CALL_OW 12
15892: ARRAY
15893: ST_TO_ADDR
// end ; end ;
15894: GO 15693
15896: POP
15897: POP
// veh = CreateVehicle ;
15898: LD_ADDR_VAR 0 16
15902: PUSH
15903: CALL_OW 45
15907: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15908: LD_VAR 0 16
15912: PPUSH
15913: LD_VAR 0 1
15917: PPUSH
15918: LD_INT 0
15920: PPUSH
15921: CALL_OW 49
// if vehcontrol = 1 then
15925: LD_VAR 0 7
15929: PUSH
15930: LD_INT 1
15932: EQUAL
15933: IFFALSE 15990
// begin hc_gallery =  ;
15935: LD_ADDR_OWVAR 33
15939: PUSH
15940: LD_STRING 
15942: ST_TO_ADDR
// hc_name =  ;
15943: LD_ADDR_OWVAR 26
15947: PUSH
15948: LD_STRING 
15950: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15951: LD_INT 0
15953: PPUSH
15954: LD_INT 3
15956: PPUSH
15957: LD_VAR 0 4
15961: PPUSH
15962: CALL_OW 380
// un = CreateHuman ;
15966: LD_ADDR_VAR 0 15
15970: PUSH
15971: CALL_OW 44
15975: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15976: LD_VAR 0 15
15980: PPUSH
15981: LD_VAR 0 16
15985: PPUSH
15986: CALL_OW 52
// end ; i = i + 1 ;
15990: LD_ADDR_VAR 0 13
15994: PUSH
15995: LD_VAR 0 13
15999: PUSH
16000: LD_INT 1
16002: PLUS
16003: ST_TO_ADDR
// end ; until i = vehCount ;
16004: LD_VAR 0 13
16008: PUSH
16009: LD_VAR 0 3
16013: EQUAL
16014: IFFALSE 14666
// repeat wait ( 0 0$1 ) ;
16016: LD_INT 35
16018: PPUSH
16019: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16023: LD_ADDR_VAR 0 20
16027: PUSH
16028: LD_INT 22
16030: PUSH
16031: LD_VAR 0 2
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: LD_INT 21
16042: PUSH
16043: LD_INT 2
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 24
16052: PUSH
16053: LD_INT 250
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: LIST
16064: PPUSH
16065: CALL_OW 69
16069: ST_TO_ADDR
// if vehicleOK_list > 0 then
16070: LD_VAR 0 20
16074: PUSH
16075: LD_INT 0
16077: GREATER
16078: IFFALSE 16269
// begin for i in vehicleOK_list do
16080: LD_ADDR_VAR 0 13
16084: PUSH
16085: LD_VAR 0 20
16089: PUSH
16090: FOR_IN
16091: IFFALSE 16267
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16093: LD_ADDR_VAR 0 21
16097: PUSH
16098: LD_INT 22
16100: PUSH
16101: LD_VAR 0 11
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 69
16114: PPUSH
16115: LD_VAR 0 13
16119: PPUSH
16120: CALL_OW 74
16124: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16125: LD_ADDR_VAR 0 22
16129: PUSH
16130: LD_INT 22
16132: PUSH
16133: LD_VAR 0 11
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 2
16144: PUSH
16145: LD_INT 59
16147: PUSH
16148: EMPTY
16149: LIST
16150: PUSH
16151: LD_INT 21
16153: PUSH
16154: LD_INT 1
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 21
16163: PUSH
16164: LD_INT 2
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: EMPTY
16182: LIST
16183: PPUSH
16184: CALL_OW 69
16188: PPUSH
16189: LD_VAR 0 13
16193: PPUSH
16194: CALL_OW 74
16198: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16199: LD_VAR 0 13
16203: PPUSH
16204: LD_VAR 0 21
16208: PPUSH
16209: CALL_OW 296
16213: PUSH
16214: LD_INT 6
16216: PLUS
16217: PUSH
16218: LD_VAR 0 13
16222: PPUSH
16223: LD_VAR 0 22
16227: PPUSH
16228: CALL_OW 296
16232: LESS
16233: IFFALSE 16251
// begin ComAttackUnit ( i , target1 ) ;
16235: LD_VAR 0 13
16239: PPUSH
16240: LD_VAR 0 21
16244: PPUSH
16245: CALL_OW 115
// end else
16249: GO 16265
// begin ComAttackUnit ( i , target2 ) ;
16251: LD_VAR 0 13
16255: PPUSH
16256: LD_VAR 0 22
16260: PPUSH
16261: CALL_OW 115
// end ; end ;
16265: GO 16090
16267: POP
16268: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16269: LD_INT 22
16271: PUSH
16272: LD_VAR 0 2
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 21
16283: PUSH
16284: LD_INT 2
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 24
16293: PUSH
16294: LD_INT 250
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: LIST
16305: PPUSH
16306: CALL_OW 69
16310: PUSH
16311: LD_INT 0
16313: EQUAL
16314: IFFALSE 16016
// end ;
16316: LD_VAR 0 12
16320: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16321: LD_INT 0
16323: PPUSH
16324: PPUSH
16325: PPUSH
16326: PPUSH
16327: PPUSH
16328: PPUSH
16329: PPUSH
16330: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16331: LD_ADDR_VAR 0 7
16335: PUSH
16336: LD_INT 22
16338: PUSH
16339: LD_VAR 0 1
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 1
16350: PUSH
16351: LD_INT 3
16353: PUSH
16354: LD_INT 24
16356: PUSH
16357: LD_INT 550
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 24
16370: PUSH
16371: LD_INT 250
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: LIST
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PPUSH
16387: CALL_OW 69
16391: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16392: LD_ADDR_VAR 0 8
16396: PUSH
16397: LD_INT 22
16399: PUSH
16400: LD_VAR 0 1
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 2
16411: PUSH
16412: LD_INT 25
16414: PUSH
16415: LD_INT 1
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 25
16424: PUSH
16425: LD_INT 5
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: LD_INT 25
16434: PUSH
16435: LD_INT 8
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 25
16444: PUSH
16445: LD_INT 9
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 24
16461: PUSH
16462: LD_INT 1000
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: LIST
16473: PPUSH
16474: CALL_OW 69
16478: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16479: LD_ADDR_VAR 0 9
16483: PUSH
16484: LD_INT 22
16486: PUSH
16487: LD_VAR 0 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 25
16498: PUSH
16499: LD_INT 4
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PPUSH
16510: CALL_OW 69
16514: ST_TO_ADDR
// if medicCount > 0 then
16515: LD_VAR 0 9
16519: PUSH
16520: LD_INT 0
16522: GREATER
16523: IFFALSE 16597
// begin if damageUnit_list > 0 then
16525: LD_VAR 0 7
16529: PUSH
16530: LD_INT 0
16532: GREATER
16533: IFFALSE 16597
// begin for i in damageUnit_list do
16535: LD_ADDR_VAR 0 5
16539: PUSH
16540: LD_VAR 0 7
16544: PUSH
16545: FOR_IN
16546: IFFALSE 16595
// begin ComMoveToArea ( i , healArea ) ;
16548: LD_VAR 0 5
16552: PPUSH
16553: LD_VAR 0 2
16557: PPUSH
16558: CALL_OW 113
// for j in medicCount do
16562: LD_ADDR_VAR 0 6
16566: PUSH
16567: LD_VAR 0 9
16571: PUSH
16572: FOR_IN
16573: IFFALSE 16591
// AddComHeal ( j , i ) ;
16575: LD_VAR 0 6
16579: PPUSH
16580: LD_VAR 0 5
16584: PPUSH
16585: CALL_OW 188
16589: GO 16572
16591: POP
16592: POP
// end ;
16593: GO 16545
16595: POP
16596: POP
// end ; end ; if soldiersOK_list > 0 then
16597: LD_VAR 0 8
16601: PUSH
16602: LD_INT 0
16604: GREATER
16605: IFFALSE 16796
// begin for i in soldiersOK_list do
16607: LD_ADDR_VAR 0 5
16611: PUSH
16612: LD_VAR 0 8
16616: PUSH
16617: FOR_IN
16618: IFFALSE 16794
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16620: LD_ADDR_VAR 0 10
16624: PUSH
16625: LD_INT 22
16627: PUSH
16628: LD_VAR 0 3
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PPUSH
16637: CALL_OW 69
16641: PPUSH
16642: LD_VAR 0 5
16646: PPUSH
16647: CALL_OW 74
16651: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16652: LD_ADDR_VAR 0 11
16656: PUSH
16657: LD_INT 22
16659: PUSH
16660: LD_VAR 0 3
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 2
16671: PUSH
16672: LD_INT 59
16674: PUSH
16675: EMPTY
16676: LIST
16677: PUSH
16678: LD_INT 21
16680: PUSH
16681: LD_INT 1
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: LD_INT 21
16690: PUSH
16691: LD_INT 2
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: EMPTY
16709: LIST
16710: PPUSH
16711: CALL_OW 69
16715: PPUSH
16716: LD_VAR 0 5
16720: PPUSH
16721: CALL_OW 74
16725: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16726: LD_VAR 0 5
16730: PPUSH
16731: LD_VAR 0 10
16735: PPUSH
16736: CALL_OW 296
16740: PUSH
16741: LD_INT 8
16743: PLUS
16744: PUSH
16745: LD_VAR 0 5
16749: PPUSH
16750: LD_VAR 0 11
16754: PPUSH
16755: CALL_OW 296
16759: LESS
16760: IFFALSE 16778
// begin ComAttackUnit ( i , target1 ) ;
16762: LD_VAR 0 5
16766: PPUSH
16767: LD_VAR 0 10
16771: PPUSH
16772: CALL_OW 115
// end else
16776: GO 16792
// begin ComAttackUnit ( i , target2 ) ;
16778: LD_VAR 0 5
16782: PPUSH
16783: LD_VAR 0 11
16787: PPUSH
16788: CALL_OW 115
// end ; end ;
16792: GO 16617
16794: POP
16795: POP
// end ; end ;
16796: LD_VAR 0 4
16800: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16801: LD_INT 0
16803: PPUSH
16804: PPUSH
// list := [ ] ;
16805: LD_ADDR_VAR 0 5
16809: PUSH
16810: EMPTY
16811: ST_TO_ADDR
// case d of 0 :
16812: LD_VAR 0 3
16816: PUSH
16817: LD_INT 0
16819: DOUBLE
16820: EQUAL
16821: IFTRUE 16825
16823: GO 16958
16825: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16826: LD_ADDR_VAR 0 5
16830: PUSH
16831: LD_VAR 0 1
16835: PUSH
16836: LD_INT 4
16838: MINUS
16839: PUSH
16840: LD_VAR 0 2
16844: PUSH
16845: LD_INT 4
16847: MINUS
16848: PUSH
16849: LD_INT 2
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: LIST
16856: PUSH
16857: LD_VAR 0 1
16861: PUSH
16862: LD_INT 3
16864: MINUS
16865: PUSH
16866: LD_VAR 0 2
16870: PUSH
16871: LD_INT 1
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: LIST
16878: PUSH
16879: LD_VAR 0 1
16883: PUSH
16884: LD_INT 4
16886: PLUS
16887: PUSH
16888: LD_VAR 0 2
16892: PUSH
16893: LD_INT 4
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: LIST
16900: PUSH
16901: LD_VAR 0 1
16905: PUSH
16906: LD_INT 3
16908: PLUS
16909: PUSH
16910: LD_VAR 0 2
16914: PUSH
16915: LD_INT 3
16917: PLUS
16918: PUSH
16919: LD_INT 5
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: LIST
16926: PUSH
16927: LD_VAR 0 1
16931: PUSH
16932: LD_VAR 0 2
16936: PUSH
16937: LD_INT 4
16939: PLUS
16940: PUSH
16941: LD_INT 0
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: LIST
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: ST_TO_ADDR
// end ; 1 :
16956: GO 17656
16958: LD_INT 1
16960: DOUBLE
16961: EQUAL
16962: IFTRUE 16966
16964: GO 17099
16966: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16967: LD_ADDR_VAR 0 5
16971: PUSH
16972: LD_VAR 0 1
16976: PUSH
16977: LD_VAR 0 2
16981: PUSH
16982: LD_INT 4
16984: MINUS
16985: PUSH
16986: LD_INT 3
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: PUSH
16994: LD_VAR 0 1
16998: PUSH
16999: LD_INT 3
17001: MINUS
17002: PUSH
17003: LD_VAR 0 2
17007: PUSH
17008: LD_INT 3
17010: MINUS
17011: PUSH
17012: LD_INT 2
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: PUSH
17020: LD_VAR 0 1
17024: PUSH
17025: LD_INT 4
17027: MINUS
17028: PUSH
17029: LD_VAR 0 2
17033: PUSH
17034: LD_INT 1
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: PUSH
17042: LD_VAR 0 1
17046: PUSH
17047: LD_VAR 0 2
17051: PUSH
17052: LD_INT 3
17054: PLUS
17055: PUSH
17056: LD_INT 0
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: LIST
17063: PUSH
17064: LD_VAR 0 1
17068: PUSH
17069: LD_INT 4
17071: PLUS
17072: PUSH
17073: LD_VAR 0 2
17077: PUSH
17078: LD_INT 4
17080: PLUS
17081: PUSH
17082: LD_INT 5
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: LIST
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: ST_TO_ADDR
// end ; 2 :
17097: GO 17656
17099: LD_INT 2
17101: DOUBLE
17102: EQUAL
17103: IFTRUE 17107
17105: GO 17236
17107: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
17108: LD_ADDR_VAR 0 5
17112: PUSH
17113: LD_VAR 0 1
17117: PUSH
17118: LD_VAR 0 2
17122: PUSH
17123: LD_INT 3
17125: MINUS
17126: PUSH
17127: LD_INT 3
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: LIST
17134: PUSH
17135: LD_VAR 0 1
17139: PUSH
17140: LD_INT 4
17142: PLUS
17143: PUSH
17144: LD_VAR 0 2
17148: PUSH
17149: LD_INT 4
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: LIST
17156: PUSH
17157: LD_VAR 0 1
17161: PUSH
17162: LD_VAR 0 2
17166: PUSH
17167: LD_INT 4
17169: PLUS
17170: PUSH
17171: LD_INT 0
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: LIST
17178: PUSH
17179: LD_VAR 0 1
17183: PUSH
17184: LD_INT 3
17186: MINUS
17187: PUSH
17188: LD_VAR 0 2
17192: PUSH
17193: LD_INT 1
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: LIST
17200: PUSH
17201: LD_VAR 0 1
17205: PUSH
17206: LD_INT 4
17208: MINUS
17209: PUSH
17210: LD_VAR 0 2
17214: PUSH
17215: LD_INT 4
17217: MINUS
17218: PUSH
17219: LD_INT 2
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: ST_TO_ADDR
// end ; 3 :
17234: GO 17656
17236: LD_INT 3
17238: DOUBLE
17239: EQUAL
17240: IFTRUE 17244
17242: GO 17377
17244: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
17245: LD_ADDR_VAR 0 5
17249: PUSH
17250: LD_VAR 0 1
17254: PUSH
17255: LD_INT 3
17257: PLUS
17258: PUSH
17259: LD_VAR 0 2
17263: PUSH
17264: LD_INT 4
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: LIST
17271: PUSH
17272: LD_VAR 0 1
17276: PUSH
17277: LD_INT 4
17279: PLUS
17280: PUSH
17281: LD_VAR 0 2
17285: PUSH
17286: LD_INT 4
17288: PLUS
17289: PUSH
17290: LD_INT 5
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: LIST
17297: PUSH
17298: LD_VAR 0 1
17302: PUSH
17303: LD_INT 4
17305: MINUS
17306: PUSH
17307: LD_VAR 0 2
17311: PUSH
17312: LD_INT 1
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: LIST
17319: PUSH
17320: LD_VAR 0 1
17324: PUSH
17325: LD_VAR 0 2
17329: PUSH
17330: LD_INT 4
17332: MINUS
17333: PUSH
17334: LD_INT 3
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: LIST
17341: PUSH
17342: LD_VAR 0 1
17346: PUSH
17347: LD_INT 3
17349: MINUS
17350: PUSH
17351: LD_VAR 0 2
17355: PUSH
17356: LD_INT 3
17358: MINUS
17359: PUSH
17360: LD_INT 2
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: ST_TO_ADDR
// end ; 4 :
17375: GO 17656
17377: LD_INT 4
17379: DOUBLE
17380: EQUAL
17381: IFTRUE 17385
17383: GO 17518
17385: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
17386: LD_ADDR_VAR 0 5
17390: PUSH
17391: LD_VAR 0 1
17395: PUSH
17396: LD_VAR 0 2
17400: PUSH
17401: LD_INT 4
17403: PLUS
17404: PUSH
17405: LD_INT 0
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: LIST
17412: PUSH
17413: LD_VAR 0 1
17417: PUSH
17418: LD_INT 3
17420: PLUS
17421: PUSH
17422: LD_VAR 0 2
17426: PUSH
17427: LD_INT 3
17429: PLUS
17430: PUSH
17431: LD_INT 5
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: LIST
17438: PUSH
17439: LD_VAR 0 1
17443: PUSH
17444: LD_INT 3
17446: PLUS
17447: PUSH
17448: LD_VAR 0 2
17452: PUSH
17453: LD_INT 4
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: LIST
17460: PUSH
17461: LD_VAR 0 1
17465: PUSH
17466: LD_VAR 0 2
17470: PUSH
17471: LD_INT 3
17473: MINUS
17474: PUSH
17475: LD_INT 3
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: LIST
17482: PUSH
17483: LD_VAR 0 1
17487: PUSH
17488: LD_INT 4
17490: MINUS
17491: PUSH
17492: LD_VAR 0 2
17496: PUSH
17497: LD_INT 4
17499: MINUS
17500: PUSH
17501: LD_INT 2
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: ST_TO_ADDR
// end ; 5 :
17516: GO 17656
17518: LD_INT 5
17520: DOUBLE
17521: EQUAL
17522: IFTRUE 17526
17524: GO 17655
17526: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
17527: LD_ADDR_VAR 0 5
17531: PUSH
17532: LD_VAR 0 1
17536: PUSH
17537: LD_INT 4
17539: MINUS
17540: PUSH
17541: LD_VAR 0 2
17545: PUSH
17546: LD_INT 1
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: LIST
17553: PUSH
17554: LD_VAR 0 1
17558: PUSH
17559: LD_VAR 0 2
17563: PUSH
17564: LD_INT 4
17566: MINUS
17567: PUSH
17568: LD_INT 3
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: LIST
17575: PUSH
17576: LD_VAR 0 1
17580: PUSH
17581: LD_INT 4
17583: PLUS
17584: PUSH
17585: LD_VAR 0 2
17589: PUSH
17590: LD_INT 4
17592: PLUS
17593: PUSH
17594: LD_INT 5
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: LIST
17601: PUSH
17602: LD_VAR 0 1
17606: PUSH
17607: LD_INT 3
17609: PLUS
17610: PUSH
17611: LD_VAR 0 2
17615: PUSH
17616: LD_INT 4
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: LIST
17623: PUSH
17624: LD_VAR 0 1
17628: PUSH
17629: LD_VAR 0 2
17633: PUSH
17634: LD_INT 3
17636: PLUS
17637: PUSH
17638: LD_INT 0
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: LIST
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: ST_TO_ADDR
// end ; end ;
17653: GO 17656
17655: POP
// result := list ;
17656: LD_ADDR_VAR 0 4
17660: PUSH
17661: LD_VAR 0 5
17665: ST_TO_ADDR
// end ;
17666: LD_VAR 0 4
17670: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17671: LD_INT 0
17673: PPUSH
17674: PPUSH
17675: PPUSH
17676: PPUSH
17677: PPUSH
17678: PPUSH
17679: PPUSH
17680: PPUSH
17681: PPUSH
// result := false ;
17682: LD_ADDR_VAR 0 7
17686: PUSH
17687: LD_INT 0
17689: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17690: LD_VAR 0 1
17694: NOT
17695: PUSH
17696: LD_VAR 0 1
17700: PPUSH
17701: CALL_OW 266
17705: PUSH
17706: LD_INT 0
17708: PUSH
17709: LD_INT 1
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: IN
17716: NOT
17717: OR
17718: PUSH
17719: LD_VAR 0 2
17723: NOT
17724: OR
17725: PUSH
17726: LD_VAR 0 5
17730: PUSH
17731: LD_INT 0
17733: PUSH
17734: LD_INT 1
17736: PUSH
17737: LD_INT 2
17739: PUSH
17740: LD_INT 3
17742: PUSH
17743: LD_INT 4
17745: PUSH
17746: LD_INT 5
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: IN
17757: NOT
17758: OR
17759: PUSH
17760: LD_VAR 0 3
17764: PPUSH
17765: LD_VAR 0 4
17769: PPUSH
17770: CALL_OW 488
17774: NOT
17775: OR
17776: IFFALSE 17780
// exit ;
17778: GO 18461
// pom := GetBase ( bdepot ) ;
17780: LD_ADDR_VAR 0 10
17784: PUSH
17785: LD_VAR 0 1
17789: PPUSH
17790: CALL_OW 274
17794: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17795: LD_ADDR_VAR 0 11
17799: PUSH
17800: LD_VAR 0 2
17804: PPUSH
17805: LD_VAR 0 1
17809: PPUSH
17810: CALL_OW 248
17814: PPUSH
17815: CALL_OW 450
17819: ST_TO_ADDR
// if check_cost then
17820: LD_VAR 0 6
17824: IFFALSE 17901
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17826: LD_VAR 0 10
17830: PPUSH
17831: LD_INT 1
17833: PPUSH
17834: CALL_OW 275
17838: PUSH
17839: LD_VAR 0 11
17843: PUSH
17844: LD_INT 1
17846: ARRAY
17847: GREATEREQUAL
17848: PUSH
17849: LD_VAR 0 10
17853: PPUSH
17854: LD_INT 2
17856: PPUSH
17857: CALL_OW 275
17861: PUSH
17862: LD_VAR 0 11
17866: PUSH
17867: LD_INT 2
17869: ARRAY
17870: GREATEREQUAL
17871: AND
17872: PUSH
17873: LD_VAR 0 10
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: CALL_OW 275
17885: PUSH
17886: LD_VAR 0 11
17890: PUSH
17891: LD_INT 3
17893: ARRAY
17894: GREATEREQUAL
17895: AND
17896: NOT
17897: IFFALSE 17901
// exit ;
17899: GO 18461
// if GetBType ( bdepot ) = b_depot then
17901: LD_VAR 0 1
17905: PPUSH
17906: CALL_OW 266
17910: PUSH
17911: LD_INT 0
17913: EQUAL
17914: IFFALSE 17926
// dist := 28 else
17916: LD_ADDR_VAR 0 14
17920: PUSH
17921: LD_INT 28
17923: ST_TO_ADDR
17924: GO 17934
// dist := 36 ;
17926: LD_ADDR_VAR 0 14
17930: PUSH
17931: LD_INT 36
17933: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17934: LD_VAR 0 1
17938: PPUSH
17939: LD_VAR 0 3
17943: PPUSH
17944: LD_VAR 0 4
17948: PPUSH
17949: CALL_OW 297
17953: PUSH
17954: LD_VAR 0 14
17958: GREATER
17959: IFFALSE 17963
// exit ;
17961: GO 18461
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17963: LD_ADDR_VAR 0 12
17967: PUSH
17968: LD_VAR 0 2
17972: PPUSH
17973: LD_VAR 0 3
17977: PPUSH
17978: LD_VAR 0 4
17982: PPUSH
17983: LD_VAR 0 5
17987: PPUSH
17988: LD_VAR 0 1
17992: PPUSH
17993: CALL_OW 248
17997: PPUSH
17998: LD_INT 0
18000: PPUSH
18001: CALL 18466 0 6
18005: ST_TO_ADDR
// if not hexes then
18006: LD_VAR 0 12
18010: NOT
18011: IFFALSE 18015
// exit ;
18013: GO 18461
// hex := GetHexInfo ( x , y ) ;
18015: LD_ADDR_VAR 0 15
18019: PUSH
18020: LD_VAR 0 3
18024: PPUSH
18025: LD_VAR 0 4
18029: PPUSH
18030: CALL_OW 546
18034: ST_TO_ADDR
// if hex [ 1 ] then
18035: LD_VAR 0 15
18039: PUSH
18040: LD_INT 1
18042: ARRAY
18043: IFFALSE 18047
// exit ;
18045: GO 18461
// height := hex [ 2 ] ;
18047: LD_ADDR_VAR 0 13
18051: PUSH
18052: LD_VAR 0 15
18056: PUSH
18057: LD_INT 2
18059: ARRAY
18060: ST_TO_ADDR
// for i = 1 to hexes do
18061: LD_ADDR_VAR 0 8
18065: PUSH
18066: DOUBLE
18067: LD_INT 1
18069: DEC
18070: ST_TO_ADDR
18071: LD_VAR 0 12
18075: PUSH
18076: FOR_TO
18077: IFFALSE 18405
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18079: LD_VAR 0 12
18083: PUSH
18084: LD_VAR 0 8
18088: ARRAY
18089: PUSH
18090: LD_INT 1
18092: ARRAY
18093: PPUSH
18094: LD_VAR 0 12
18098: PUSH
18099: LD_VAR 0 8
18103: ARRAY
18104: PUSH
18105: LD_INT 2
18107: ARRAY
18108: PPUSH
18109: CALL_OW 488
18113: NOT
18114: IFFALSE 18118
// continue ;
18116: GO 18076
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18118: LD_ADDR_VAR 0 9
18122: PUSH
18123: LD_VAR 0 12
18127: PUSH
18128: LD_VAR 0 8
18132: ARRAY
18133: PUSH
18134: LD_INT 1
18136: ARRAY
18137: PPUSH
18138: LD_VAR 0 12
18142: PUSH
18143: LD_VAR 0 8
18147: ARRAY
18148: PUSH
18149: LD_INT 2
18151: ARRAY
18152: PPUSH
18153: CALL_OW 546
18157: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18158: LD_VAR 0 9
18162: PUSH
18163: LD_INT 1
18165: ARRAY
18166: PUSH
18167: LD_VAR 0 9
18171: PUSH
18172: LD_INT 2
18174: ARRAY
18175: PUSH
18176: LD_VAR 0 13
18180: PUSH
18181: LD_INT 2
18183: PLUS
18184: GREATER
18185: OR
18186: PUSH
18187: LD_VAR 0 9
18191: PUSH
18192: LD_INT 2
18194: ARRAY
18195: PUSH
18196: LD_VAR 0 13
18200: PUSH
18201: LD_INT 2
18203: MINUS
18204: LESS
18205: OR
18206: PUSH
18207: LD_VAR 0 9
18211: PUSH
18212: LD_INT 3
18214: ARRAY
18215: PUSH
18216: LD_INT 0
18218: PUSH
18219: LD_INT 8
18221: PUSH
18222: LD_INT 9
18224: PUSH
18225: LD_INT 10
18227: PUSH
18228: LD_INT 11
18230: PUSH
18231: LD_INT 12
18233: PUSH
18234: LD_INT 13
18236: PUSH
18237: LD_INT 16
18239: PUSH
18240: LD_INT 17
18242: PUSH
18243: LD_INT 18
18245: PUSH
18246: LD_INT 19
18248: PUSH
18249: LD_INT 20
18251: PUSH
18252: LD_INT 21
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: IN
18270: NOT
18271: OR
18272: PUSH
18273: LD_VAR 0 9
18277: PUSH
18278: LD_INT 5
18280: ARRAY
18281: NOT
18282: OR
18283: PUSH
18284: LD_VAR 0 9
18288: PUSH
18289: LD_INT 6
18291: ARRAY
18292: PUSH
18293: LD_INT 1
18295: PUSH
18296: LD_INT 2
18298: PUSH
18299: LD_INT 7
18301: PUSH
18302: LD_INT 9
18304: PUSH
18305: LD_INT 10
18307: PUSH
18308: LD_INT 11
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: IN
18319: NOT
18320: OR
18321: PUSH
18322: LD_VAR 0 12
18326: PUSH
18327: LD_VAR 0 8
18331: ARRAY
18332: PUSH
18333: LD_INT 1
18335: ARRAY
18336: PPUSH
18337: LD_VAR 0 12
18341: PUSH
18342: LD_VAR 0 8
18346: ARRAY
18347: PUSH
18348: LD_INT 2
18350: ARRAY
18351: PPUSH
18352: CALL_OW 428
18356: PUSH
18357: LD_INT 0
18359: GREATER
18360: OR
18361: PUSH
18362: LD_VAR 0 12
18366: PUSH
18367: LD_VAR 0 8
18371: ARRAY
18372: PUSH
18373: LD_INT 1
18375: ARRAY
18376: PPUSH
18377: LD_VAR 0 12
18381: PUSH
18382: LD_VAR 0 8
18386: ARRAY
18387: PUSH
18388: LD_INT 2
18390: ARRAY
18391: PPUSH
18392: CALL_OW 351
18396: OR
18397: IFFALSE 18403
// exit ;
18399: POP
18400: POP
18401: GO 18461
// end ;
18403: GO 18076
18405: POP
18406: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
18407: LD_VAR 0 2
18411: PUSH
18412: LD_INT 29
18414: PUSH
18415: LD_INT 30
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: IN
18422: PUSH
18423: LD_VAR 0 3
18427: PPUSH
18428: LD_VAR 0 4
18432: PPUSH
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 255
18442: PPUSH
18443: CALL_OW 440
18447: NOT
18448: AND
18449: IFFALSE 18453
// exit ;
18451: GO 18461
// result := true ;
18453: LD_ADDR_VAR 0 7
18457: PUSH
18458: LD_INT 1
18460: ST_TO_ADDR
// end ;
18461: LD_VAR 0 7
18465: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
18466: LD_INT 0
18468: PPUSH
18469: PPUSH
18470: PPUSH
18471: PPUSH
18472: PPUSH
18473: PPUSH
18474: PPUSH
18475: PPUSH
18476: PPUSH
18477: PPUSH
18478: PPUSH
18479: PPUSH
18480: PPUSH
18481: PPUSH
18482: PPUSH
18483: PPUSH
18484: PPUSH
18485: PPUSH
18486: PPUSH
18487: PPUSH
18488: PPUSH
18489: PPUSH
18490: PPUSH
18491: PPUSH
18492: PPUSH
18493: PPUSH
18494: PPUSH
18495: PPUSH
18496: PPUSH
18497: PPUSH
18498: PPUSH
18499: PPUSH
18500: PPUSH
18501: PPUSH
18502: PPUSH
18503: PPUSH
18504: PPUSH
18505: PPUSH
18506: PPUSH
18507: PPUSH
18508: PPUSH
18509: PPUSH
18510: PPUSH
18511: PPUSH
18512: PPUSH
18513: PPUSH
18514: PPUSH
18515: PPUSH
18516: PPUSH
18517: PPUSH
18518: PPUSH
18519: PPUSH
18520: PPUSH
18521: PPUSH
18522: PPUSH
18523: PPUSH
18524: PPUSH
18525: PPUSH
// result = [ ] ;
18526: LD_ADDR_VAR 0 7
18530: PUSH
18531: EMPTY
18532: ST_TO_ADDR
// temp_list = [ ] ;
18533: LD_ADDR_VAR 0 9
18537: PUSH
18538: EMPTY
18539: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18540: LD_VAR 0 4
18544: PUSH
18545: LD_INT 0
18547: PUSH
18548: LD_INT 1
18550: PUSH
18551: LD_INT 2
18553: PUSH
18554: LD_INT 3
18556: PUSH
18557: LD_INT 4
18559: PUSH
18560: LD_INT 5
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: IN
18571: NOT
18572: PUSH
18573: LD_VAR 0 1
18577: PUSH
18578: LD_INT 0
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: IN
18588: PUSH
18589: LD_VAR 0 5
18593: PUSH
18594: LD_INT 1
18596: PUSH
18597: LD_INT 2
18599: PUSH
18600: LD_INT 3
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: LIST
18607: IN
18608: NOT
18609: AND
18610: OR
18611: IFFALSE 18615
// exit ;
18613: GO 37000
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18615: LD_VAR 0 1
18619: PUSH
18620: LD_INT 6
18622: PUSH
18623: LD_INT 7
18625: PUSH
18626: LD_INT 8
18628: PUSH
18629: LD_INT 13
18631: PUSH
18632: LD_INT 12
18634: PUSH
18635: LD_INT 15
18637: PUSH
18638: LD_INT 11
18640: PUSH
18641: LD_INT 14
18643: PUSH
18644: LD_INT 10
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: IN
18658: IFFALSE 18668
// btype = b_lab ;
18660: LD_ADDR_VAR 0 1
18664: PUSH
18665: LD_INT 6
18667: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18668: LD_VAR 0 6
18672: PUSH
18673: LD_INT 0
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: LD_INT 2
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: LIST
18686: IN
18687: NOT
18688: PUSH
18689: LD_VAR 0 1
18693: PUSH
18694: LD_INT 0
18696: PUSH
18697: LD_INT 1
18699: PUSH
18700: LD_INT 2
18702: PUSH
18703: LD_INT 3
18705: PUSH
18706: LD_INT 6
18708: PUSH
18709: LD_INT 36
18711: PUSH
18712: LD_INT 4
18714: PUSH
18715: LD_INT 5
18717: PUSH
18718: LD_INT 31
18720: PUSH
18721: LD_INT 32
18723: PUSH
18724: LD_INT 33
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: IN
18740: NOT
18741: PUSH
18742: LD_VAR 0 6
18746: PUSH
18747: LD_INT 1
18749: EQUAL
18750: AND
18751: OR
18752: PUSH
18753: LD_VAR 0 1
18757: PUSH
18758: LD_INT 2
18760: PUSH
18761: LD_INT 3
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: IN
18768: NOT
18769: PUSH
18770: LD_VAR 0 6
18774: PUSH
18775: LD_INT 2
18777: EQUAL
18778: AND
18779: OR
18780: IFFALSE 18790
// mode = 0 ;
18782: LD_ADDR_VAR 0 6
18786: PUSH
18787: LD_INT 0
18789: ST_TO_ADDR
// case mode of 0 :
18790: LD_VAR 0 6
18794: PUSH
18795: LD_INT 0
18797: DOUBLE
18798: EQUAL
18799: IFTRUE 18803
18801: GO 30256
18803: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18804: LD_ADDR_VAR 0 11
18808: PUSH
18809: LD_INT 0
18811: PUSH
18812: LD_INT 0
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 0
18821: PUSH
18822: LD_INT 1
18824: NEG
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 1
18832: PUSH
18833: LD_INT 0
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 1
18842: PUSH
18843: LD_INT 1
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 0
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 1
18862: NEG
18863: PUSH
18864: LD_INT 0
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 1
18873: NEG
18874: PUSH
18875: LD_INT 1
18877: NEG
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 1
18885: NEG
18886: PUSH
18887: LD_INT 2
18889: NEG
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 0
18897: PUSH
18898: LD_INT 2
18900: NEG
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 1
18908: PUSH
18909: LD_INT 1
18911: NEG
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: LD_INT 2
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 0
18929: PUSH
18930: LD_INT 2
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 1
18939: NEG
18940: PUSH
18941: LD_INT 1
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 1
18950: PUSH
18951: LD_INT 3
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 0
18960: PUSH
18961: LD_INT 3
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 1
18970: NEG
18971: PUSH
18972: LD_INT 2
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18997: LD_ADDR_VAR 0 12
19001: PUSH
19002: LD_INT 0
19004: PUSH
19005: LD_INT 0
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 0
19014: PUSH
19015: LD_INT 1
19017: NEG
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 1
19025: PUSH
19026: LD_INT 0
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 1
19035: PUSH
19036: LD_INT 1
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 0
19045: PUSH
19046: LD_INT 1
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 1
19055: NEG
19056: PUSH
19057: LD_INT 0
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 1
19066: NEG
19067: PUSH
19068: LD_INT 1
19070: NEG
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 1
19078: PUSH
19079: LD_INT 1
19081: NEG
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 2
19089: PUSH
19090: LD_INT 0
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 2
19099: PUSH
19100: LD_INT 1
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 1
19109: NEG
19110: PUSH
19111: LD_INT 1
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 2
19120: NEG
19121: PUSH
19122: LD_INT 0
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 2
19131: NEG
19132: PUSH
19133: LD_INT 1
19135: NEG
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 2
19143: NEG
19144: PUSH
19145: LD_INT 1
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 3
19154: NEG
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 3
19165: NEG
19166: PUSH
19167: LD_INT 1
19169: NEG
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19193: LD_ADDR_VAR 0 13
19197: PUSH
19198: LD_INT 0
19200: PUSH
19201: LD_INT 0
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 0
19210: PUSH
19211: LD_INT 1
19213: NEG
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 1
19221: PUSH
19222: LD_INT 0
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 1
19231: PUSH
19232: LD_INT 1
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 0
19241: PUSH
19242: LD_INT 1
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 1
19251: NEG
19252: PUSH
19253: LD_INT 0
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 1
19262: NEG
19263: PUSH
19264: LD_INT 1
19266: NEG
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 1
19274: NEG
19275: PUSH
19276: LD_INT 2
19278: NEG
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 2
19286: PUSH
19287: LD_INT 1
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 2
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 1
19306: PUSH
19307: LD_INT 2
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 2
19316: NEG
19317: PUSH
19318: LD_INT 1
19320: NEG
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 2
19328: NEG
19329: PUSH
19330: LD_INT 2
19332: NEG
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: NEG
19341: PUSH
19342: LD_INT 3
19344: NEG
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 3
19352: NEG
19353: PUSH
19354: LD_INT 2
19356: NEG
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 3
19364: NEG
19365: PUSH
19366: LD_INT 3
19368: NEG
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19392: LD_ADDR_VAR 0 14
19396: PUSH
19397: LD_INT 0
19399: PUSH
19400: LD_INT 0
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 0
19409: PUSH
19410: LD_INT 1
19412: NEG
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 1
19420: PUSH
19421: LD_INT 0
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 1
19430: PUSH
19431: LD_INT 1
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 0
19440: PUSH
19441: LD_INT 1
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 1
19450: NEG
19451: PUSH
19452: LD_INT 0
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 1
19461: NEG
19462: PUSH
19463: LD_INT 1
19465: NEG
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 1
19473: NEG
19474: PUSH
19475: LD_INT 2
19477: NEG
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 0
19485: PUSH
19486: LD_INT 2
19488: NEG
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: LD_INT 1
19499: NEG
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: LD_INT 2
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: LD_INT 2
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 1
19527: NEG
19528: PUSH
19529: LD_INT 1
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 1
19538: NEG
19539: PUSH
19540: LD_INT 3
19542: NEG
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 0
19550: PUSH
19551: LD_INT 3
19553: NEG
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: LD_INT 2
19564: NEG
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19588: LD_ADDR_VAR 0 15
19592: PUSH
19593: LD_INT 0
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 0
19605: PUSH
19606: LD_INT 1
19608: NEG
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 1
19616: PUSH
19617: LD_INT 0
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 1
19626: PUSH
19627: LD_INT 1
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 0
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 1
19646: NEG
19647: PUSH
19648: LD_INT 0
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 1
19657: NEG
19658: PUSH
19659: LD_INT 1
19661: NEG
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: LD_INT 1
19672: NEG
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 2
19680: PUSH
19681: LD_INT 0
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 2
19690: PUSH
19691: LD_INT 1
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 1
19700: NEG
19701: PUSH
19702: LD_INT 1
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 2
19711: NEG
19712: PUSH
19713: LD_INT 0
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 2
19722: NEG
19723: PUSH
19724: LD_INT 1
19726: NEG
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 2
19734: PUSH
19735: LD_INT 1
19737: NEG
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 3
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 3
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19781: LD_ADDR_VAR 0 16
19785: PUSH
19786: LD_INT 0
19788: PUSH
19789: LD_INT 0
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 0
19798: PUSH
19799: LD_INT 1
19801: NEG
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: LD_INT 0
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: LD_INT 1
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 0
19829: PUSH
19830: LD_INT 1
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 1
19839: NEG
19840: PUSH
19841: LD_INT 0
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 1
19850: NEG
19851: PUSH
19852: LD_INT 1
19854: NEG
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 1
19862: NEG
19863: PUSH
19864: LD_INT 2
19866: NEG
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 2
19874: PUSH
19875: LD_INT 1
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 2
19884: PUSH
19885: LD_INT 2
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 1
19894: PUSH
19895: LD_INT 2
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 2
19904: NEG
19905: PUSH
19906: LD_INT 1
19908: NEG
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 2
19916: NEG
19917: PUSH
19918: LD_INT 2
19920: NEG
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 3
19928: PUSH
19929: LD_INT 2
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 3
19938: PUSH
19939: LD_INT 3
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 2
19948: PUSH
19949: LD_INT 3
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19974: LD_ADDR_VAR 0 17
19978: PUSH
19979: LD_INT 0
19981: PUSH
19982: LD_INT 0
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 0
19991: PUSH
19992: LD_INT 1
19994: NEG
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 1
20002: PUSH
20003: LD_INT 0
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 1
20012: PUSH
20013: LD_INT 1
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 0
20022: PUSH
20023: LD_INT 1
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 1
20032: NEG
20033: PUSH
20034: LD_INT 0
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 1
20043: NEG
20044: PUSH
20045: LD_INT 1
20047: NEG
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 1
20055: NEG
20056: PUSH
20057: LD_INT 2
20059: NEG
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 0
20067: PUSH
20068: LD_INT 2
20070: NEG
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 1
20078: PUSH
20079: LD_INT 1
20081: NEG
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 2
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 2
20099: PUSH
20100: LD_INT 1
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 2
20109: PUSH
20110: LD_INT 2
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 1
20119: PUSH
20120: LD_INT 2
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 0
20129: PUSH
20130: LD_INT 2
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 1
20139: NEG
20140: PUSH
20141: LD_INT 1
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 2
20150: NEG
20151: PUSH
20152: LD_INT 0
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 2
20161: NEG
20162: PUSH
20163: LD_INT 1
20165: NEG
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 2
20173: NEG
20174: PUSH
20175: LD_INT 2
20177: NEG
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20204: LD_ADDR_VAR 0 18
20208: PUSH
20209: LD_INT 0
20211: PUSH
20212: LD_INT 0
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 0
20221: PUSH
20222: LD_INT 1
20224: NEG
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 1
20232: PUSH
20233: LD_INT 0
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 1
20242: PUSH
20243: LD_INT 1
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 0
20252: PUSH
20253: LD_INT 1
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 1
20262: NEG
20263: PUSH
20264: LD_INT 0
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 1
20273: NEG
20274: PUSH
20275: LD_INT 1
20277: NEG
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 1
20285: NEG
20286: PUSH
20287: LD_INT 2
20289: NEG
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 0
20297: PUSH
20298: LD_INT 2
20300: NEG
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 1
20308: PUSH
20309: LD_INT 1
20311: NEG
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 2
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 2
20329: PUSH
20330: LD_INT 1
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 2
20339: PUSH
20340: LD_INT 2
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 1
20349: PUSH
20350: LD_INT 2
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 0
20359: PUSH
20360: LD_INT 2
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 1
20369: NEG
20370: PUSH
20371: LD_INT 1
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 2
20380: NEG
20381: PUSH
20382: LD_INT 0
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 2
20391: NEG
20392: PUSH
20393: LD_INT 1
20395: NEG
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 2
20403: NEG
20404: PUSH
20405: LD_INT 2
20407: NEG
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20434: LD_ADDR_VAR 0 19
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: LD_INT 0
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 0
20451: PUSH
20452: LD_INT 1
20454: NEG
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 1
20462: PUSH
20463: LD_INT 0
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 1
20472: PUSH
20473: LD_INT 1
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 0
20482: PUSH
20483: LD_INT 1
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 1
20492: NEG
20493: PUSH
20494: LD_INT 0
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 1
20503: NEG
20504: PUSH
20505: LD_INT 1
20507: NEG
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 1
20515: NEG
20516: PUSH
20517: LD_INT 2
20519: NEG
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 0
20527: PUSH
20528: LD_INT 2
20530: NEG
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 1
20538: PUSH
20539: LD_INT 1
20541: NEG
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 2
20549: PUSH
20550: LD_INT 0
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 2
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 2
20569: PUSH
20570: LD_INT 2
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: LD_INT 2
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 0
20589: PUSH
20590: LD_INT 2
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 1
20599: NEG
20600: PUSH
20601: LD_INT 1
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 2
20610: NEG
20611: PUSH
20612: LD_INT 0
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 2
20621: NEG
20622: PUSH
20623: LD_INT 1
20625: NEG
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 2
20633: NEG
20634: PUSH
20635: LD_INT 2
20637: NEG
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20664: LD_ADDR_VAR 0 20
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: LD_INT 0
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 0
20681: PUSH
20682: LD_INT 1
20684: NEG
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 1
20692: PUSH
20693: LD_INT 0
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 1
20702: PUSH
20703: LD_INT 1
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: LD_INT 0
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 1
20722: NEG
20723: PUSH
20724: LD_INT 0
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 1
20733: NEG
20734: PUSH
20735: LD_INT 1
20737: NEG
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 1
20745: NEG
20746: PUSH
20747: LD_INT 2
20749: NEG
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 0
20757: PUSH
20758: LD_INT 2
20760: NEG
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 1
20768: PUSH
20769: LD_INT 1
20771: NEG
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 2
20779: PUSH
20780: LD_INT 0
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 2
20789: PUSH
20790: LD_INT 1
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 2
20799: PUSH
20800: LD_INT 2
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 1
20809: PUSH
20810: LD_INT 2
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 0
20819: PUSH
20820: LD_INT 2
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 1
20829: NEG
20830: PUSH
20831: LD_INT 1
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 2
20840: NEG
20841: PUSH
20842: LD_INT 0
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 2
20851: NEG
20852: PUSH
20853: LD_INT 1
20855: NEG
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 2
20863: NEG
20864: PUSH
20865: LD_INT 2
20867: NEG
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20894: LD_ADDR_VAR 0 21
20898: PUSH
20899: LD_INT 0
20901: PUSH
20902: LD_INT 0
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 0
20911: PUSH
20912: LD_INT 1
20914: NEG
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 1
20922: PUSH
20923: LD_INT 0
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: LD_INT 1
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 0
20942: PUSH
20943: LD_INT 1
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 1
20952: NEG
20953: PUSH
20954: LD_INT 0
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 1
20963: NEG
20964: PUSH
20965: LD_INT 1
20967: NEG
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 1
20975: NEG
20976: PUSH
20977: LD_INT 2
20979: NEG
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 0
20987: PUSH
20988: LD_INT 2
20990: NEG
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 1
20998: PUSH
20999: LD_INT 1
21001: NEG
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 2
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 2
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 2
21029: PUSH
21030: LD_INT 2
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 1
21039: PUSH
21040: LD_INT 2
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 0
21049: PUSH
21050: LD_INT 2
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 1
21059: NEG
21060: PUSH
21061: LD_INT 1
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 2
21070: NEG
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 2
21081: NEG
21082: PUSH
21083: LD_INT 1
21085: NEG
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 2
21093: NEG
21094: PUSH
21095: LD_INT 2
21097: NEG
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21124: LD_ADDR_VAR 0 22
21128: PUSH
21129: LD_INT 0
21131: PUSH
21132: LD_INT 0
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 0
21141: PUSH
21142: LD_INT 1
21144: NEG
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 1
21152: PUSH
21153: LD_INT 0
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 1
21162: PUSH
21163: LD_INT 1
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 0
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 1
21182: NEG
21183: PUSH
21184: LD_INT 0
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 1
21193: NEG
21194: PUSH
21195: LD_INT 1
21197: NEG
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 1
21205: NEG
21206: PUSH
21207: LD_INT 2
21209: NEG
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 0
21217: PUSH
21218: LD_INT 2
21220: NEG
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 1
21228: PUSH
21229: LD_INT 1
21231: NEG
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 2
21239: PUSH
21240: LD_INT 0
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 2
21249: PUSH
21250: LD_INT 1
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: LD_INT 2
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 1
21269: PUSH
21270: LD_INT 2
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 0
21279: PUSH
21280: LD_INT 2
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 1
21289: NEG
21290: PUSH
21291: LD_INT 1
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 2
21300: NEG
21301: PUSH
21302: LD_INT 0
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 2
21311: NEG
21312: PUSH
21313: LD_INT 1
21315: NEG
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 2
21323: NEG
21324: PUSH
21325: LD_INT 2
21327: NEG
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21354: LD_ADDR_VAR 0 23
21358: PUSH
21359: LD_INT 0
21361: PUSH
21362: LD_INT 0
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 0
21371: PUSH
21372: LD_INT 1
21374: NEG
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 1
21382: PUSH
21383: LD_INT 0
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 1
21392: PUSH
21393: LD_INT 1
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 0
21402: PUSH
21403: LD_INT 1
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 1
21412: NEG
21413: PUSH
21414: LD_INT 0
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 1
21423: NEG
21424: PUSH
21425: LD_INT 1
21427: NEG
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 1
21435: NEG
21436: PUSH
21437: LD_INT 2
21439: NEG
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 0
21447: PUSH
21448: LD_INT 2
21450: NEG
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 1
21458: PUSH
21459: LD_INT 1
21461: NEG
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 2
21469: PUSH
21470: LD_INT 0
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 2
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 2
21489: PUSH
21490: LD_INT 2
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 1
21499: PUSH
21500: LD_INT 2
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 0
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 1
21519: NEG
21520: PUSH
21521: LD_INT 1
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 2
21530: NEG
21531: PUSH
21532: LD_INT 0
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 2
21541: NEG
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 2
21553: NEG
21554: PUSH
21555: LD_INT 2
21557: NEG
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 2
21565: NEG
21566: PUSH
21567: LD_INT 3
21569: NEG
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 1
21577: NEG
21578: PUSH
21579: LD_INT 3
21581: NEG
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 1
21589: PUSH
21590: LD_INT 2
21592: NEG
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 2
21600: PUSH
21601: LD_INT 1
21603: NEG
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21634: LD_ADDR_VAR 0 24
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: LD_INT 1
21654: NEG
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: LD_INT 0
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 1
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: LD_INT 1
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 1
21692: NEG
21693: PUSH
21694: LD_INT 0
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 1
21715: NEG
21716: PUSH
21717: LD_INT 2
21719: NEG
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 0
21727: PUSH
21728: LD_INT 2
21730: NEG
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 1
21738: PUSH
21739: LD_INT 1
21741: NEG
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 2
21749: PUSH
21750: LD_INT 0
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: LD_INT 1
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 2
21769: PUSH
21770: LD_INT 2
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 1
21779: PUSH
21780: LD_INT 2
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 0
21789: PUSH
21790: LD_INT 2
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 1
21799: NEG
21800: PUSH
21801: LD_INT 1
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 2
21810: NEG
21811: PUSH
21812: LD_INT 0
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 2
21821: NEG
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 2
21833: NEG
21834: PUSH
21835: LD_INT 2
21837: NEG
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 1
21845: PUSH
21846: LD_INT 2
21848: NEG
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 2
21856: PUSH
21857: LD_INT 1
21859: NEG
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 3
21867: PUSH
21868: LD_INT 1
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 3
21877: PUSH
21878: LD_INT 2
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21910: LD_ADDR_VAR 0 25
21914: PUSH
21915: LD_INT 0
21917: PUSH
21918: LD_INT 0
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: LD_INT 1
21930: NEG
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 1
21938: PUSH
21939: LD_INT 0
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 1
21948: PUSH
21949: LD_INT 1
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: LD_INT 1
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 1
21968: NEG
21969: PUSH
21970: LD_INT 0
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 1
21979: NEG
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 1
21991: NEG
21992: PUSH
21993: LD_INT 2
21995: NEG
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: LD_INT 2
22006: NEG
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: LD_INT 1
22017: NEG
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 2
22025: PUSH
22026: LD_INT 0
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 2
22035: PUSH
22036: LD_INT 1
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 2
22045: PUSH
22046: LD_INT 2
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: LD_INT 2
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 0
22065: PUSH
22066: LD_INT 2
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 1
22075: NEG
22076: PUSH
22077: LD_INT 1
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 2
22086: NEG
22087: PUSH
22088: LD_INT 0
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 2
22097: NEG
22098: PUSH
22099: LD_INT 1
22101: NEG
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 2
22109: NEG
22110: PUSH
22111: LD_INT 2
22113: NEG
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 3
22121: PUSH
22122: LD_INT 1
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 3
22131: PUSH
22132: LD_INT 2
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 2
22141: PUSH
22142: LD_INT 3
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 1
22151: PUSH
22152: LD_INT 3
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22184: LD_ADDR_VAR 0 26
22188: PUSH
22189: LD_INT 0
22191: PUSH
22192: LD_INT 0
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 0
22201: PUSH
22202: LD_INT 1
22204: NEG
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 1
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 1
22222: PUSH
22223: LD_INT 1
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 0
22232: PUSH
22233: LD_INT 1
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 1
22242: NEG
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 1
22253: NEG
22254: PUSH
22255: LD_INT 1
22257: NEG
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 1
22265: NEG
22266: PUSH
22267: LD_INT 2
22269: NEG
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 0
22277: PUSH
22278: LD_INT 2
22280: NEG
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: LD_INT 1
22291: NEG
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 2
22299: PUSH
22300: LD_INT 0
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 2
22309: PUSH
22310: LD_INT 1
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 2
22319: PUSH
22320: LD_INT 2
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 1
22329: PUSH
22330: LD_INT 2
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: LD_INT 2
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 1
22349: NEG
22350: PUSH
22351: LD_INT 1
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 2
22360: NEG
22361: PUSH
22362: LD_INT 0
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 2
22371: NEG
22372: PUSH
22373: LD_INT 1
22375: NEG
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 2
22383: NEG
22384: PUSH
22385: LD_INT 2
22387: NEG
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 2
22395: PUSH
22396: LD_INT 3
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 1
22405: PUSH
22406: LD_INT 3
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 1
22415: NEG
22416: PUSH
22417: LD_INT 2
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 2
22426: NEG
22427: PUSH
22428: LD_INT 1
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22460: LD_ADDR_VAR 0 27
22464: PUSH
22465: LD_INT 0
22467: PUSH
22468: LD_INT 0
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 0
22477: PUSH
22478: LD_INT 1
22480: NEG
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 1
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 0
22508: PUSH
22509: LD_INT 1
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 1
22518: NEG
22519: PUSH
22520: LD_INT 0
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 1
22529: NEG
22530: PUSH
22531: LD_INT 1
22533: NEG
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: NEG
22542: PUSH
22543: LD_INT 2
22545: NEG
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 0
22553: PUSH
22554: LD_INT 2
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 1
22564: PUSH
22565: LD_INT 1
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 2
22575: PUSH
22576: LD_INT 0
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 2
22585: PUSH
22586: LD_INT 1
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 2
22595: PUSH
22596: LD_INT 2
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 1
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 0
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 1
22625: NEG
22626: PUSH
22627: LD_INT 1
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 2
22636: NEG
22637: PUSH
22638: LD_INT 0
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 2
22647: NEG
22648: PUSH
22649: LD_INT 1
22651: NEG
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 2
22659: NEG
22660: PUSH
22661: LD_INT 2
22663: NEG
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 1
22671: NEG
22672: PUSH
22673: LD_INT 2
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 2
22682: NEG
22683: PUSH
22684: LD_INT 1
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 3
22693: NEG
22694: PUSH
22695: LD_INT 1
22697: NEG
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 3
22705: NEG
22706: PUSH
22707: LD_INT 2
22709: NEG
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22740: LD_ADDR_VAR 0 28
22744: PUSH
22745: LD_INT 0
22747: PUSH
22748: LD_INT 0
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 0
22757: PUSH
22758: LD_INT 1
22760: NEG
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 1
22768: PUSH
22769: LD_INT 0
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 1
22778: PUSH
22779: LD_INT 1
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 0
22788: PUSH
22789: LD_INT 1
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 1
22798: NEG
22799: PUSH
22800: LD_INT 0
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 1
22809: NEG
22810: PUSH
22811: LD_INT 1
22813: NEG
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 1
22821: NEG
22822: PUSH
22823: LD_INT 2
22825: NEG
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: LD_INT 2
22836: NEG
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: LD_INT 1
22847: NEG
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 2
22855: PUSH
22856: LD_INT 0
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 2
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: LD_INT 2
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: LD_INT 2
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 0
22895: PUSH
22896: LD_INT 2
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 1
22905: NEG
22906: PUSH
22907: LD_INT 1
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 2
22916: NEG
22917: PUSH
22918: LD_INT 0
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 2
22927: NEG
22928: PUSH
22929: LD_INT 1
22931: NEG
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 2
22939: NEG
22940: PUSH
22941: LD_INT 2
22943: NEG
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 2
22951: NEG
22952: PUSH
22953: LD_INT 3
22955: NEG
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 1
22963: NEG
22964: PUSH
22965: LD_INT 3
22967: NEG
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 3
22975: NEG
22976: PUSH
22977: LD_INT 1
22979: NEG
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 3
22987: NEG
22988: PUSH
22989: LD_INT 2
22991: NEG
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23022: LD_ADDR_VAR 0 29
23026: PUSH
23027: LD_INT 0
23029: PUSH
23030: LD_INT 0
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 0
23039: PUSH
23040: LD_INT 1
23042: NEG
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 1
23050: PUSH
23051: LD_INT 0
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 1
23060: PUSH
23061: LD_INT 1
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 0
23070: PUSH
23071: LD_INT 1
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 1
23080: NEG
23081: PUSH
23082: LD_INT 0
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 1
23091: NEG
23092: PUSH
23093: LD_INT 1
23095: NEG
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 1
23103: NEG
23104: PUSH
23105: LD_INT 2
23107: NEG
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: LD_INT 2
23118: NEG
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: LD_INT 1
23129: NEG
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 2
23137: PUSH
23138: LD_INT 0
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 2
23147: PUSH
23148: LD_INT 1
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 1
23157: PUSH
23158: LD_INT 2
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 0
23167: PUSH
23168: LD_INT 2
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 1
23177: NEG
23178: PUSH
23179: LD_INT 1
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 2
23188: NEG
23189: PUSH
23190: LD_INT 1
23192: NEG
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 2
23200: NEG
23201: PUSH
23202: LD_INT 2
23204: NEG
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 2
23212: NEG
23213: PUSH
23214: LD_INT 3
23216: NEG
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 2
23224: PUSH
23225: LD_INT 1
23227: NEG
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 3
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 1
23245: PUSH
23246: LD_INT 3
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: NEG
23256: PUSH
23257: LD_INT 2
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 3
23266: NEG
23267: PUSH
23268: LD_INT 2
23270: NEG
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23301: LD_ADDR_VAR 0 30
23305: PUSH
23306: LD_INT 0
23308: PUSH
23309: LD_INT 0
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 0
23318: PUSH
23319: LD_INT 1
23321: NEG
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 1
23329: PUSH
23330: LD_INT 0
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 1
23339: PUSH
23340: LD_INT 1
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 0
23349: PUSH
23350: LD_INT 1
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 1
23359: NEG
23360: PUSH
23361: LD_INT 0
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: NEG
23371: PUSH
23372: LD_INT 1
23374: NEG
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 1
23382: NEG
23383: PUSH
23384: LD_INT 2
23386: NEG
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 0
23394: PUSH
23395: LD_INT 2
23397: NEG
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 1
23405: PUSH
23406: LD_INT 1
23408: NEG
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 2
23416: PUSH
23417: LD_INT 0
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 2
23426: PUSH
23427: LD_INT 1
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: LD_INT 2
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: LD_INT 2
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: NEG
23457: PUSH
23458: LD_INT 1
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 2
23467: NEG
23468: PUSH
23469: LD_INT 0
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 2
23478: NEG
23479: PUSH
23480: LD_INT 1
23482: NEG
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 1
23490: NEG
23491: PUSH
23492: LD_INT 3
23494: NEG
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: LD_INT 2
23505: NEG
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 3
23513: PUSH
23514: LD_INT 2
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 2
23523: PUSH
23524: LD_INT 3
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 2
23533: NEG
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 3
23544: NEG
23545: PUSH
23546: LD_INT 1
23548: NEG
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23579: LD_ADDR_VAR 0 31
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: LD_INT 0
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 0
23596: PUSH
23597: LD_INT 1
23599: NEG
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 1
23607: PUSH
23608: LD_INT 0
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 1
23617: PUSH
23618: LD_INT 1
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 0
23627: PUSH
23628: LD_INT 1
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 1
23637: NEG
23638: PUSH
23639: LD_INT 0
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 1
23648: NEG
23649: PUSH
23650: LD_INT 1
23652: NEG
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 1
23660: NEG
23661: PUSH
23662: LD_INT 2
23664: NEG
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: LD_INT 1
23675: NEG
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 2
23683: PUSH
23684: LD_INT 0
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 2
23693: PUSH
23694: LD_INT 1
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 2
23703: PUSH
23704: LD_INT 2
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 1
23713: PUSH
23714: LD_INT 2
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 0
23723: PUSH
23724: LD_INT 2
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 1
23733: NEG
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 2
23744: NEG
23745: PUSH
23746: LD_INT 1
23748: NEG
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 2
23756: NEG
23757: PUSH
23758: LD_INT 2
23760: NEG
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 2
23768: NEG
23769: PUSH
23770: LD_INT 3
23772: NEG
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: LD_INT 1
23783: NEG
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 3
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 1
23801: PUSH
23802: LD_INT 3
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 1
23811: NEG
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 3
23822: NEG
23823: PUSH
23824: LD_INT 2
23826: NEG
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23857: LD_ADDR_VAR 0 32
23861: PUSH
23862: LD_INT 0
23864: PUSH
23865: LD_INT 0
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 0
23874: PUSH
23875: LD_INT 1
23877: NEG
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 1
23895: PUSH
23896: LD_INT 1
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: LD_INT 1
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 1
23915: NEG
23916: PUSH
23917: LD_INT 0
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 1
23926: NEG
23927: PUSH
23928: LD_INT 1
23930: NEG
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 1
23938: NEG
23939: PUSH
23940: LD_INT 2
23942: NEG
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 0
23950: PUSH
23951: LD_INT 2
23953: NEG
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 1
23961: PUSH
23962: LD_INT 1
23964: NEG
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 2
23972: PUSH
23973: LD_INT 1
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 2
23982: PUSH
23983: LD_INT 2
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 1
23992: PUSH
23993: LD_INT 2
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 0
24002: PUSH
24003: LD_INT 2
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 1
24012: NEG
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 2
24023: NEG
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 2
24034: NEG
24035: PUSH
24036: LD_INT 1
24038: NEG
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 1
24046: NEG
24047: PUSH
24048: LD_INT 3
24050: NEG
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 1
24058: PUSH
24059: LD_INT 2
24061: NEG
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 3
24069: PUSH
24070: LD_INT 2
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 2
24079: PUSH
24080: LD_INT 3
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 2
24089: NEG
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 3
24100: NEG
24101: PUSH
24102: LD_INT 1
24104: NEG
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24135: LD_ADDR_VAR 0 33
24139: PUSH
24140: LD_INT 0
24142: PUSH
24143: LD_INT 0
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 0
24152: PUSH
24153: LD_INT 1
24155: NEG
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 1
24163: PUSH
24164: LD_INT 0
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 1
24173: PUSH
24174: LD_INT 1
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 0
24183: PUSH
24184: LD_INT 1
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 1
24193: NEG
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 1
24204: NEG
24205: PUSH
24206: LD_INT 1
24208: NEG
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: LD_INT 2
24220: NEG
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 1
24228: PUSH
24229: LD_INT 1
24231: NEG
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 2
24239: PUSH
24240: LD_INT 0
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 2
24249: PUSH
24250: LD_INT 1
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 1
24259: PUSH
24260: LD_INT 2
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: LD_INT 2
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 1
24279: NEG
24280: PUSH
24281: LD_INT 1
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 2
24290: NEG
24291: PUSH
24292: LD_INT 0
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 2
24301: NEG
24302: PUSH
24303: LD_INT 1
24305: NEG
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 2
24313: NEG
24314: PUSH
24315: LD_INT 2
24317: NEG
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 2
24325: NEG
24326: PUSH
24327: LD_INT 3
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 2
24337: PUSH
24338: LD_INT 1
24340: NEG
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 3
24348: PUSH
24349: LD_INT 1
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 1
24358: PUSH
24359: LD_INT 3
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 1
24368: NEG
24369: PUSH
24370: LD_INT 2
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 3
24379: NEG
24380: PUSH
24381: LD_INT 2
24383: NEG
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24414: LD_ADDR_VAR 0 34
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: LD_INT 0
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 0
24431: PUSH
24432: LD_INT 1
24434: NEG
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 1
24442: PUSH
24443: LD_INT 0
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: LD_INT 1
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: LD_INT 1
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 1
24472: NEG
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 1
24483: NEG
24484: PUSH
24485: LD_INT 1
24487: NEG
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 1
24495: NEG
24496: PUSH
24497: LD_INT 2
24499: NEG
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: LD_INT 2
24510: NEG
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 1
24518: PUSH
24519: LD_INT 1
24521: NEG
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 2
24529: PUSH
24530: LD_INT 1
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 2
24539: PUSH
24540: LD_INT 2
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: LD_INT 2
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 2
24570: NEG
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 2
24581: NEG
24582: PUSH
24583: LD_INT 1
24585: NEG
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 2
24593: NEG
24594: PUSH
24595: LD_INT 2
24597: NEG
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 1
24605: NEG
24606: PUSH
24607: LD_INT 3
24609: NEG
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: LD_INT 2
24620: NEG
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 3
24628: PUSH
24629: LD_INT 2
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 2
24638: PUSH
24639: LD_INT 3
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 2
24648: NEG
24649: PUSH
24650: LD_INT 1
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 3
24659: NEG
24660: PUSH
24661: LD_INT 1
24663: NEG
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24694: LD_ADDR_VAR 0 35
24698: PUSH
24699: LD_INT 0
24701: PUSH
24702: LD_INT 0
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: LD_INT 1
24714: NEG
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 1
24722: PUSH
24723: LD_INT 0
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: LD_INT 1
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 0
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 1
24752: NEG
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 1
24763: NEG
24764: PUSH
24765: LD_INT 1
24767: NEG
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 2
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 2
24785: NEG
24786: PUSH
24787: LD_INT 1
24789: NEG
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24806: LD_ADDR_VAR 0 36
24810: PUSH
24811: LD_INT 0
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 0
24823: PUSH
24824: LD_INT 1
24826: NEG
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 0
24854: PUSH
24855: LD_INT 1
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 1
24864: NEG
24865: PUSH
24866: LD_INT 0
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 1
24875: NEG
24876: PUSH
24877: LD_INT 1
24879: NEG
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 1
24887: NEG
24888: PUSH
24889: LD_INT 2
24891: NEG
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 1
24899: PUSH
24900: LD_INT 2
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24918: LD_ADDR_VAR 0 37
24922: PUSH
24923: LD_INT 0
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 0
24935: PUSH
24936: LD_INT 1
24938: NEG
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: LD_INT 0
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 1
24956: PUSH
24957: LD_INT 1
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 0
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 1
24976: NEG
24977: PUSH
24978: LD_INT 0
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 1
24987: NEG
24988: PUSH
24989: LD_INT 1
24991: NEG
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: LD_INT 1
25002: NEG
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 1
25010: NEG
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25030: LD_ADDR_VAR 0 38
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: LD_INT 0
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: LD_INT 1
25050: NEG
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: LD_INT 0
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 1
25088: NEG
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: NEG
25100: PUSH
25101: LD_INT 1
25103: NEG
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 2
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 2
25121: NEG
25122: PUSH
25123: LD_INT 1
25125: NEG
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25142: LD_ADDR_VAR 0 39
25146: PUSH
25147: LD_INT 0
25149: PUSH
25150: LD_INT 0
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 0
25159: PUSH
25160: LD_INT 1
25162: NEG
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: LD_INT 0
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 1
25180: PUSH
25181: LD_INT 1
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 0
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 1
25200: NEG
25201: PUSH
25202: LD_INT 0
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 1
25211: NEG
25212: PUSH
25213: LD_INT 1
25215: NEG
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: LD_INT 2
25227: NEG
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 1
25235: PUSH
25236: LD_INT 2
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25254: LD_ADDR_VAR 0 40
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 0
25271: PUSH
25272: LD_INT 1
25274: NEG
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: PUSH
25283: LD_INT 0
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 1
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 0
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 1
25312: NEG
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 1
25323: NEG
25324: PUSH
25325: LD_INT 1
25327: NEG
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: LD_INT 1
25338: NEG
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 1
25346: NEG
25347: PUSH
25348: LD_INT 1
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25366: LD_ADDR_VAR 0 41
25370: PUSH
25371: LD_INT 0
25373: PUSH
25374: LD_INT 0
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: LD_INT 1
25386: NEG
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 1
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 1
25404: PUSH
25405: LD_INT 1
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: LD_INT 1
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 1
25424: NEG
25425: PUSH
25426: LD_INT 0
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 1
25435: NEG
25436: PUSH
25437: LD_INT 1
25439: NEG
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 1
25447: NEG
25448: PUSH
25449: LD_INT 2
25451: NEG
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 1
25459: PUSH
25460: LD_INT 1
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 2
25470: PUSH
25471: LD_INT 0
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: LD_INT 1
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 2
25490: PUSH
25491: LD_INT 2
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 1
25500: PUSH
25501: LD_INT 2
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 1
25510: NEG
25511: PUSH
25512: LD_INT 1
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 2
25521: NEG
25522: PUSH
25523: LD_INT 0
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 2
25532: NEG
25533: PUSH
25534: LD_INT 1
25536: NEG
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 2
25544: NEG
25545: PUSH
25546: LD_INT 2
25548: NEG
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 2
25556: NEG
25557: PUSH
25558: LD_INT 3
25560: NEG
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 2
25568: PUSH
25569: LD_INT 1
25571: NEG
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 3
25579: PUSH
25580: LD_INT 0
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 3
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 3
25599: PUSH
25600: LD_INT 2
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 3
25609: PUSH
25610: LD_INT 3
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 2
25619: PUSH
25620: LD_INT 3
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 2
25629: NEG
25630: PUSH
25631: LD_INT 1
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 3
25640: NEG
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 3
25651: NEG
25652: PUSH
25653: LD_INT 1
25655: NEG
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 3
25663: NEG
25664: PUSH
25665: LD_INT 2
25667: NEG
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 3
25675: NEG
25676: PUSH
25677: LD_INT 3
25679: NEG
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25716: LD_ADDR_VAR 0 42
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 0
25733: PUSH
25734: LD_INT 1
25736: NEG
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 0
25764: PUSH
25765: LD_INT 1
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 1
25774: NEG
25775: PUSH
25776: LD_INT 0
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 1
25785: NEG
25786: PUSH
25787: LD_INT 1
25789: NEG
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: NEG
25798: PUSH
25799: LD_INT 2
25801: NEG
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 0
25809: PUSH
25810: LD_INT 2
25812: NEG
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 1
25820: PUSH
25821: LD_INT 1
25823: NEG
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 2
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 2
25841: PUSH
25842: LD_INT 2
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 1
25851: PUSH
25852: LD_INT 2
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 0
25861: PUSH
25862: LD_INT 2
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 1
25871: NEG
25872: PUSH
25873: LD_INT 1
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 2
25882: NEG
25883: PUSH
25884: LD_INT 1
25886: NEG
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 2
25894: NEG
25895: PUSH
25896: LD_INT 2
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 2
25906: NEG
25907: PUSH
25908: LD_INT 3
25910: NEG
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: PUSH
25920: LD_INT 3
25922: NEG
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: LD_INT 3
25933: NEG
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: PUSH
25942: LD_INT 2
25944: NEG
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 3
25952: PUSH
25953: LD_INT 2
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 3
25962: PUSH
25963: LD_INT 3
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 2
25972: PUSH
25973: LD_INT 3
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 1
25982: PUSH
25983: LD_INT 3
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 0
25992: PUSH
25993: LD_INT 3
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 1
26002: NEG
26003: PUSH
26004: LD_INT 2
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 3
26013: NEG
26014: PUSH
26015: LD_INT 2
26017: NEG
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 3
26025: NEG
26026: PUSH
26027: LD_INT 3
26029: NEG
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26066: LD_ADDR_VAR 0 43
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: LD_INT 0
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: LD_INT 1
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: LD_INT 0
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 1
26104: PUSH
26105: LD_INT 1
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 0
26114: PUSH
26115: LD_INT 1
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 1
26124: NEG
26125: PUSH
26126: LD_INT 0
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 1
26135: NEG
26136: PUSH
26137: LD_INT 1
26139: NEG
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: LD_INT 2
26151: NEG
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 0
26159: PUSH
26160: LD_INT 2
26162: NEG
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 1
26170: PUSH
26171: LD_INT 1
26173: NEG
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 2
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 2
26191: PUSH
26192: LD_INT 1
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 1
26201: PUSH
26202: LD_INT 2
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 0
26211: PUSH
26212: LD_INT 2
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 1
26221: NEG
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 2
26232: NEG
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 2
26243: NEG
26244: PUSH
26245: LD_INT 1
26247: NEG
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: NEG
26256: PUSH
26257: LD_INT 3
26259: NEG
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: LD_INT 3
26270: NEG
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: LD_INT 2
26281: NEG
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 2
26289: PUSH
26290: LD_INT 1
26292: NEG
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 3
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 3
26310: PUSH
26311: LD_INT 1
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: LD_INT 3
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 0
26330: PUSH
26331: LD_INT 3
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 1
26340: NEG
26341: PUSH
26342: LD_INT 2
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 2
26351: NEG
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 3
26362: NEG
26363: PUSH
26364: LD_INT 0
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 3
26373: NEG
26374: PUSH
26375: LD_INT 1
26377: NEG
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26414: LD_ADDR_VAR 0 44
26418: PUSH
26419: LD_INT 0
26421: PUSH
26422: LD_INT 0
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: LD_INT 1
26434: NEG
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 1
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: PUSH
26453: LD_INT 1
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 0
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 1
26472: NEG
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: LD_INT 2
26499: NEG
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 1
26507: PUSH
26508: LD_INT 1
26510: NEG
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 2
26518: PUSH
26519: LD_INT 0
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 2
26528: PUSH
26529: LD_INT 1
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 2
26538: PUSH
26539: LD_INT 2
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 1
26548: PUSH
26549: LD_INT 2
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 1
26558: NEG
26559: PUSH
26560: LD_INT 1
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 2
26569: NEG
26570: PUSH
26571: LD_INT 0
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 2
26580: NEG
26581: PUSH
26582: LD_INT 1
26584: NEG
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 2
26592: NEG
26593: PUSH
26594: LD_INT 2
26596: NEG
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 2
26604: NEG
26605: PUSH
26606: LD_INT 3
26608: NEG
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 2
26616: PUSH
26617: LD_INT 1
26619: NEG
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 3
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 3
26637: PUSH
26638: LD_INT 1
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 3
26647: PUSH
26648: LD_INT 2
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 3
26657: PUSH
26658: LD_INT 3
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 2
26667: PUSH
26668: LD_INT 3
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 2
26677: NEG
26678: PUSH
26679: LD_INT 1
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 3
26688: NEG
26689: PUSH
26690: LD_INT 0
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 3
26699: NEG
26700: PUSH
26701: LD_INT 1
26703: NEG
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 3
26711: NEG
26712: PUSH
26713: LD_INT 2
26715: NEG
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 3
26723: NEG
26724: PUSH
26725: LD_INT 3
26727: NEG
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26764: LD_ADDR_VAR 0 45
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: LD_INT 0
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: LD_INT 1
26784: NEG
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 1
26792: PUSH
26793: LD_INT 0
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 1
26802: PUSH
26803: LD_INT 1
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 1
26822: NEG
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: LD_INT 2
26849: NEG
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: LD_INT 2
26860: NEG
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 1
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 2
26879: PUSH
26880: LD_INT 1
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 2
26889: PUSH
26890: LD_INT 2
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: LD_INT 2
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 0
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 1
26919: NEG
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 2
26930: NEG
26931: PUSH
26932: LD_INT 1
26934: NEG
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 2
26942: NEG
26943: PUSH
26944: LD_INT 2
26946: NEG
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 2
26954: NEG
26955: PUSH
26956: LD_INT 3
26958: NEG
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 1
26966: NEG
26967: PUSH
26968: LD_INT 3
26970: NEG
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: LD_INT 3
26981: NEG
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: LD_INT 2
26992: NEG
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 3
27000: PUSH
27001: LD_INT 2
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 3
27010: PUSH
27011: LD_INT 3
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 2
27020: PUSH
27021: LD_INT 3
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: PUSH
27031: LD_INT 3
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: LD_INT 3
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 1
27050: NEG
27051: PUSH
27052: LD_INT 2
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 3
27061: NEG
27062: PUSH
27063: LD_INT 2
27065: NEG
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 3
27073: NEG
27074: PUSH
27075: LD_INT 3
27077: NEG
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27114: LD_ADDR_VAR 0 46
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 0
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: LD_INT 0
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 1
27152: PUSH
27153: LD_INT 1
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 1
27172: NEG
27173: PUSH
27174: LD_INT 0
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 1
27183: NEG
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: NEG
27196: PUSH
27197: LD_INT 2
27199: NEG
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 0
27207: PUSH
27208: LD_INT 2
27210: NEG
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 1
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 2
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 2
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 1
27249: PUSH
27250: LD_INT 2
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: LD_INT 2
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 1
27269: NEG
27270: PUSH
27271: LD_INT 1
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 2
27280: NEG
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 2
27291: NEG
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 1
27303: NEG
27304: PUSH
27305: LD_INT 3
27307: NEG
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: LD_INT 3
27318: NEG
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: LD_INT 2
27329: NEG
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: LD_INT 1
27340: NEG
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 3
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 3
27358: PUSH
27359: LD_INT 1
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 1
27368: PUSH
27369: LD_INT 3
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 0
27378: PUSH
27379: LD_INT 3
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 1
27388: NEG
27389: PUSH
27390: LD_INT 2
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 2
27399: NEG
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 3
27410: NEG
27411: PUSH
27412: LD_INT 0
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 3
27421: NEG
27422: PUSH
27423: LD_INT 1
27425: NEG
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27462: LD_ADDR_VAR 0 47
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: LD_INT 0
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: LD_INT 1
27482: NEG
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: LD_INT 0
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 1
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 0
27510: PUSH
27511: LD_INT 1
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 1
27520: NEG
27521: PUSH
27522: LD_INT 0
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 1
27531: NEG
27532: PUSH
27533: LD_INT 1
27535: NEG
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: NEG
27544: PUSH
27545: LD_INT 2
27547: NEG
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 0
27555: PUSH
27556: LD_INT 2
27558: NEG
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: LD_INT 1
27569: NEG
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 2
27577: NEG
27578: PUSH
27579: LD_INT 1
27581: NEG
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 2
27589: NEG
27590: PUSH
27591: LD_INT 2
27593: NEG
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27613: LD_ADDR_VAR 0 48
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 0
27630: PUSH
27631: LD_INT 1
27633: NEG
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: LD_INT 0
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: LD_INT 1
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: LD_INT 1
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 1
27671: NEG
27672: PUSH
27673: LD_INT 0
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: NEG
27683: PUSH
27684: LD_INT 1
27686: NEG
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: LD_INT 2
27698: NEG
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 0
27706: PUSH
27707: LD_INT 2
27709: NEG
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 1
27717: PUSH
27718: LD_INT 1
27720: NEG
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 2
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 2
27738: PUSH
27739: LD_INT 1
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27760: LD_ADDR_VAR 0 49
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 0
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 1
27818: NEG
27819: PUSH
27820: LD_INT 0
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: LD_INT 1
27833: NEG
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: PUSH
27842: LD_INT 1
27844: NEG
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 2
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 2
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 2
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 1
27882: PUSH
27883: LD_INT 2
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27904: LD_ADDR_VAR 0 50
27908: PUSH
27909: LD_INT 0
27911: PUSH
27912: LD_INT 0
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: LD_INT 1
27924: NEG
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 1
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 1
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: LD_INT 1
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 1
27962: NEG
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 1
27973: NEG
27974: PUSH
27975: LD_INT 1
27977: NEG
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 2
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 2
27995: PUSH
27996: LD_INT 2
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 1
28005: PUSH
28006: LD_INT 2
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 0
28015: PUSH
28016: LD_INT 2
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 1
28025: NEG
28026: PUSH
28027: LD_INT 1
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28048: LD_ADDR_VAR 0 51
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: LD_INT 1
28068: NEG
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: LD_INT 0
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: LD_INT 1
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 1
28106: NEG
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 1
28117: NEG
28118: PUSH
28119: LD_INT 1
28121: NEG
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 1
28129: PUSH
28130: LD_INT 2
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 0
28139: PUSH
28140: LD_INT 2
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 1
28149: NEG
28150: PUSH
28151: LD_INT 1
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 2
28160: NEG
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 2
28171: NEG
28172: PUSH
28173: LD_INT 1
28175: NEG
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28195: LD_ADDR_VAR 0 52
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 0
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 1
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 0
28243: PUSH
28244: LD_INT 1
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: LD_INT 0
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 1
28264: NEG
28265: PUSH
28266: LD_INT 1
28268: NEG
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 1
28276: NEG
28277: PUSH
28278: LD_INT 2
28280: NEG
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 1
28288: NEG
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 2
28299: NEG
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 2
28310: NEG
28311: PUSH
28312: LD_INT 1
28314: NEG
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 2
28322: NEG
28323: PUSH
28324: LD_INT 2
28326: NEG
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28346: LD_ADDR_VAR 0 53
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: LD_INT 0
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 0
28363: PUSH
28364: LD_INT 1
28366: NEG
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: LD_INT 0
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: LD_INT 1
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 0
28394: PUSH
28395: LD_INT 1
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: PUSH
28406: LD_INT 0
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 1
28415: NEG
28416: PUSH
28417: LD_INT 1
28419: NEG
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 1
28427: NEG
28428: PUSH
28429: LD_INT 2
28431: NEG
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 0
28439: PUSH
28440: LD_INT 2
28442: NEG
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: LD_INT 1
28453: NEG
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 2
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 2
28471: PUSH
28472: LD_INT 1
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 2
28481: PUSH
28482: LD_INT 2
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 1
28491: PUSH
28492: LD_INT 2
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 0
28501: PUSH
28502: LD_INT 2
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 1
28511: NEG
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 2
28522: NEG
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 2
28533: NEG
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 2
28545: NEG
28546: PUSH
28547: LD_INT 2
28549: NEG
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28576: LD_ADDR_VAR 0 54
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 0
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 1
28604: PUSH
28605: LD_INT 0
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 1
28614: PUSH
28615: LD_INT 1
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 0
28624: PUSH
28625: LD_INT 1
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: LD_INT 0
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 1
28645: NEG
28646: PUSH
28647: LD_INT 1
28649: NEG
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 1
28657: NEG
28658: PUSH
28659: LD_INT 2
28661: NEG
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 0
28669: PUSH
28670: LD_INT 2
28672: NEG
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 1
28680: PUSH
28681: LD_INT 1
28683: NEG
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 2
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 2
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 2
28711: PUSH
28712: LD_INT 2
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: PUSH
28722: LD_INT 2
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: LD_INT 2
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 1
28741: NEG
28742: PUSH
28743: LD_INT 1
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 2
28752: NEG
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 2
28763: NEG
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 2
28775: NEG
28776: PUSH
28777: LD_INT 2
28779: NEG
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28806: LD_ADDR_VAR 0 55
28810: PUSH
28811: LD_INT 0
28813: PUSH
28814: LD_INT 0
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 0
28823: PUSH
28824: LD_INT 1
28826: NEG
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 1
28834: PUSH
28835: LD_INT 0
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 1
28844: PUSH
28845: LD_INT 1
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 0
28854: PUSH
28855: LD_INT 1
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: LD_INT 1
28879: NEG
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 1
28887: NEG
28888: PUSH
28889: LD_INT 2
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 0
28899: PUSH
28900: LD_INT 2
28902: NEG
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 1
28910: PUSH
28911: LD_INT 1
28913: NEG
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 2
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 2
28931: PUSH
28932: LD_INT 1
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 2
28941: PUSH
28942: LD_INT 2
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 1
28951: PUSH
28952: LD_INT 2
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: LD_INT 2
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 1
28971: NEG
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 2
28993: NEG
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 2
29005: NEG
29006: PUSH
29007: LD_INT 2
29009: NEG
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29036: LD_ADDR_VAR 0 56
29040: PUSH
29041: LD_INT 0
29043: PUSH
29044: LD_INT 0
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: LD_INT 1
29056: NEG
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 1
29064: PUSH
29065: LD_INT 0
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 1
29074: PUSH
29075: LD_INT 1
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 0
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 1
29094: NEG
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 1
29105: NEG
29106: PUSH
29107: LD_INT 1
29109: NEG
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 1
29117: NEG
29118: PUSH
29119: LD_INT 2
29121: NEG
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: LD_INT 2
29132: NEG
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: LD_INT 1
29143: NEG
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 2
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 2
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 2
29171: PUSH
29172: LD_INT 2
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 0
29191: PUSH
29192: LD_INT 2
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 2
29212: NEG
29213: PUSH
29214: LD_INT 0
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 2
29223: NEG
29224: PUSH
29225: LD_INT 1
29227: NEG
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 2
29235: NEG
29236: PUSH
29237: LD_INT 2
29239: NEG
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29266: LD_ADDR_VAR 0 57
29270: PUSH
29271: LD_INT 0
29273: PUSH
29274: LD_INT 0
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 0
29283: PUSH
29284: LD_INT 1
29286: NEG
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 1
29294: PUSH
29295: LD_INT 0
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 1
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 0
29314: PUSH
29315: LD_INT 1
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 1
29324: NEG
29325: PUSH
29326: LD_INT 0
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 1
29335: NEG
29336: PUSH
29337: LD_INT 1
29339: NEG
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 1
29347: NEG
29348: PUSH
29349: LD_INT 2
29351: NEG
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 0
29359: PUSH
29360: LD_INT 2
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: LD_INT 1
29373: NEG
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 2
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 2
29391: PUSH
29392: LD_INT 1
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 2
29401: PUSH
29402: LD_INT 2
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 1
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 0
29421: PUSH
29422: LD_INT 2
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 1
29431: NEG
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 2
29442: NEG
29443: PUSH
29444: LD_INT 0
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 2
29453: NEG
29454: PUSH
29455: LD_INT 1
29457: NEG
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 2
29465: NEG
29466: PUSH
29467: LD_INT 2
29469: NEG
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29496: LD_ADDR_VAR 0 58
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: LD_INT 0
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: LD_INT 1
29516: NEG
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 1
29524: PUSH
29525: LD_INT 0
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 1
29534: PUSH
29535: LD_INT 1
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 0
29544: PUSH
29545: LD_INT 1
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 1
29554: NEG
29555: PUSH
29556: LD_INT 0
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 1
29565: NEG
29566: PUSH
29567: LD_INT 1
29569: NEG
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 1
29577: NEG
29578: PUSH
29579: LD_INT 2
29581: NEG
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: LD_INT 2
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 1
29600: PUSH
29601: LD_INT 1
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 2
29611: PUSH
29612: LD_INT 0
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 2
29621: PUSH
29622: LD_INT 1
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 2
29631: PUSH
29632: LD_INT 2
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 1
29641: PUSH
29642: LD_INT 2
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 0
29651: PUSH
29652: LD_INT 2
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 1
29661: NEG
29662: PUSH
29663: LD_INT 1
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 2
29672: NEG
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 2
29683: NEG
29684: PUSH
29685: LD_INT 1
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 2
29695: NEG
29696: PUSH
29697: LD_INT 2
29699: NEG
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29726: LD_ADDR_VAR 0 59
29730: PUSH
29731: LD_INT 0
29733: PUSH
29734: LD_INT 0
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: LD_INT 1
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 1
29754: PUSH
29755: LD_INT 0
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 1
29764: PUSH
29765: LD_INT 1
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 0
29774: PUSH
29775: LD_INT 1
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 1
29784: NEG
29785: PUSH
29786: LD_INT 0
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 1
29795: NEG
29796: PUSH
29797: LD_INT 1
29799: NEG
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29814: LD_ADDR_VAR 0 60
29818: PUSH
29819: LD_INT 0
29821: PUSH
29822: LD_INT 0
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 0
29831: PUSH
29832: LD_INT 1
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 1
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 1
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 0
29862: PUSH
29863: LD_INT 1
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 1
29872: NEG
29873: PUSH
29874: LD_INT 0
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 1
29883: NEG
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29902: LD_ADDR_VAR 0 61
29906: PUSH
29907: LD_INT 0
29909: PUSH
29910: LD_INT 0
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 0
29919: PUSH
29920: LD_INT 1
29922: NEG
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: LD_INT 0
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 1
29940: PUSH
29941: LD_INT 1
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 0
29950: PUSH
29951: LD_INT 1
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: LD_INT 0
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 1
29971: NEG
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29990: LD_ADDR_VAR 0 62
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: LD_INT 0
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: LD_INT 1
30010: NEG
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: LD_INT 0
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 1
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 0
30038: PUSH
30039: LD_INT 1
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 1
30048: NEG
30049: PUSH
30050: LD_INT 0
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 1
30059: NEG
30060: PUSH
30061: LD_INT 1
30063: NEG
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30078: LD_ADDR_VAR 0 63
30082: PUSH
30083: LD_INT 0
30085: PUSH
30086: LD_INT 0
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 0
30095: PUSH
30096: LD_INT 1
30098: NEG
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: LD_INT 0
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 1
30116: PUSH
30117: LD_INT 1
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 0
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 1
30136: NEG
30137: PUSH
30138: LD_INT 0
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 1
30147: NEG
30148: PUSH
30149: LD_INT 1
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30166: LD_ADDR_VAR 0 64
30170: PUSH
30171: LD_INT 0
30173: PUSH
30174: LD_INT 0
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 0
30183: PUSH
30184: LD_INT 1
30186: NEG
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 1
30194: PUSH
30195: LD_INT 0
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 1
30204: PUSH
30205: LD_INT 1
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 0
30214: PUSH
30215: LD_INT 1
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 1
30224: NEG
30225: PUSH
30226: LD_INT 0
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 1
30235: NEG
30236: PUSH
30237: LD_INT 1
30239: NEG
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: ST_TO_ADDR
// end ; 1 :
30254: GO 36151
30256: LD_INT 1
30258: DOUBLE
30259: EQUAL
30260: IFTRUE 30264
30262: GO 32887
30264: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30265: LD_ADDR_VAR 0 11
30269: PUSH
30270: LD_INT 1
30272: NEG
30273: PUSH
30274: LD_INT 3
30276: NEG
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: LD_INT 3
30287: NEG
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: LD_INT 2
30298: NEG
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: LIST
30308: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30309: LD_ADDR_VAR 0 12
30313: PUSH
30314: LD_INT 2
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 3
30327: PUSH
30328: LD_INT 0
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 3
30337: PUSH
30338: LD_INT 1
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: LIST
30349: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30350: LD_ADDR_VAR 0 13
30354: PUSH
30355: LD_INT 3
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 3
30367: PUSH
30368: LD_INT 3
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: LD_INT 3
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: LIST
30389: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30390: LD_ADDR_VAR 0 14
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: LD_INT 3
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: LD_INT 3
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 1
30417: NEG
30418: PUSH
30419: LD_INT 2
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: LIST
30430: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30431: LD_ADDR_VAR 0 15
30435: PUSH
30436: LD_INT 2
30438: NEG
30439: PUSH
30440: LD_INT 1
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 3
30449: NEG
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 3
30460: NEG
30461: PUSH
30462: LD_INT 1
30464: NEG
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: LIST
30474: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30475: LD_ADDR_VAR 0 16
30479: PUSH
30480: LD_INT 2
30482: NEG
30483: PUSH
30484: LD_INT 3
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 3
30494: NEG
30495: PUSH
30496: LD_INT 2
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 3
30506: NEG
30507: PUSH
30508: LD_INT 3
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: LIST
30520: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30521: LD_ADDR_VAR 0 17
30525: PUSH
30526: LD_INT 1
30528: NEG
30529: PUSH
30530: LD_INT 3
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 0
30540: PUSH
30541: LD_INT 3
30543: NEG
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: LD_INT 2
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: LIST
30564: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30565: LD_ADDR_VAR 0 18
30569: PUSH
30570: LD_INT 2
30572: PUSH
30573: LD_INT 1
30575: NEG
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 3
30583: PUSH
30584: LD_INT 0
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 3
30593: PUSH
30594: LD_INT 1
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: LIST
30605: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30606: LD_ADDR_VAR 0 19
30610: PUSH
30611: LD_INT 3
30613: PUSH
30614: LD_INT 2
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 3
30623: PUSH
30624: LD_INT 3
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 2
30633: PUSH
30634: LD_INT 3
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: LIST
30645: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30646: LD_ADDR_VAR 0 20
30650: PUSH
30651: LD_INT 1
30653: PUSH
30654: LD_INT 3
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: LD_INT 3
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: LD_INT 2
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30687: LD_ADDR_VAR 0 21
30691: PUSH
30692: LD_INT 2
30694: NEG
30695: PUSH
30696: LD_INT 1
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 3
30705: NEG
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 3
30716: NEG
30717: PUSH
30718: LD_INT 1
30720: NEG
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: LIST
30730: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30731: LD_ADDR_VAR 0 22
30735: PUSH
30736: LD_INT 2
30738: NEG
30739: PUSH
30740: LD_INT 3
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 3
30750: NEG
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 3
30762: NEG
30763: PUSH
30764: LD_INT 3
30766: NEG
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: LIST
30776: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30777: LD_ADDR_VAR 0 23
30781: PUSH
30782: LD_INT 0
30784: PUSH
30785: LD_INT 3
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 1
30795: NEG
30796: PUSH
30797: LD_INT 4
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 1
30807: PUSH
30808: LD_INT 3
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30821: LD_ADDR_VAR 0 24
30825: PUSH
30826: LD_INT 3
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 3
30838: PUSH
30839: LD_INT 1
30841: NEG
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 4
30849: PUSH
30850: LD_INT 1
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: LIST
30861: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30862: LD_ADDR_VAR 0 25
30866: PUSH
30867: LD_INT 3
30869: PUSH
30870: LD_INT 3
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 4
30879: PUSH
30880: LD_INT 3
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 3
30889: PUSH
30890: LD_INT 4
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: LIST
30901: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30902: LD_ADDR_VAR 0 26
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: LD_INT 3
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: LD_INT 4
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: NEG
30930: PUSH
30931: LD_INT 3
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: LIST
30942: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30943: LD_ADDR_VAR 0 27
30947: PUSH
30948: LD_INT 3
30950: NEG
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 3
30961: NEG
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 4
30972: NEG
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: LIST
30986: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30987: LD_ADDR_VAR 0 28
30991: PUSH
30992: LD_INT 3
30994: NEG
30995: PUSH
30996: LD_INT 3
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 3
31006: NEG
31007: PUSH
31008: LD_INT 4
31010: NEG
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 4
31018: NEG
31019: PUSH
31020: LD_INT 3
31022: NEG
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: LIST
31032: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31033: LD_ADDR_VAR 0 29
31037: PUSH
31038: LD_INT 1
31040: NEG
31041: PUSH
31042: LD_INT 3
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: LD_INT 3
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 1
31063: PUSH
31064: LD_INT 2
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 1
31074: NEG
31075: PUSH
31076: LD_INT 4
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 0
31086: PUSH
31087: LD_INT 4
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: LD_INT 3
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 1
31108: NEG
31109: PUSH
31110: LD_INT 5
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: LD_INT 5
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: LD_INT 4
31134: NEG
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 1
31142: NEG
31143: PUSH
31144: LD_INT 6
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 0
31154: PUSH
31155: LD_INT 6
31157: NEG
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 1
31165: PUSH
31166: LD_INT 5
31168: NEG
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31188: LD_ADDR_VAR 0 30
31192: PUSH
31193: LD_INT 2
31195: PUSH
31196: LD_INT 1
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 3
31206: PUSH
31207: LD_INT 0
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 3
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 3
31226: PUSH
31227: LD_INT 1
31229: NEG
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 4
31237: PUSH
31238: LD_INT 0
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 4
31247: PUSH
31248: LD_INT 1
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 4
31257: PUSH
31258: LD_INT 1
31260: NEG
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 5
31268: PUSH
31269: LD_INT 0
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 5
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 5
31288: PUSH
31289: LD_INT 1
31291: NEG
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 6
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 6
31309: PUSH
31310: LD_INT 1
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31331: LD_ADDR_VAR 0 31
31335: PUSH
31336: LD_INT 3
31338: PUSH
31339: LD_INT 2
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 3
31348: PUSH
31349: LD_INT 3
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 2
31358: PUSH
31359: LD_INT 3
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 4
31368: PUSH
31369: LD_INT 3
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 4
31378: PUSH
31379: LD_INT 4
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 3
31388: PUSH
31389: LD_INT 4
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 5
31398: PUSH
31399: LD_INT 4
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 5
31408: PUSH
31409: LD_INT 5
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 4
31418: PUSH
31419: LD_INT 5
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 6
31428: PUSH
31429: LD_INT 5
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 6
31438: PUSH
31439: LD_INT 6
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 5
31448: PUSH
31449: LD_INT 6
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31470: LD_ADDR_VAR 0 32
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: LD_INT 3
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 0
31487: PUSH
31488: LD_INT 3
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 1
31497: NEG
31498: PUSH
31499: LD_INT 2
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: LD_INT 4
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: LD_INT 4
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: LD_INT 3
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: LD_INT 5
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 0
31549: PUSH
31550: LD_INT 5
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: LD_INT 4
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: LD_INT 6
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: LD_INT 6
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 1
31590: NEG
31591: PUSH
31592: LD_INT 5
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31613: LD_ADDR_VAR 0 33
31617: PUSH
31618: LD_INT 2
31620: NEG
31621: PUSH
31622: LD_INT 1
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 3
31631: NEG
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 3
31642: NEG
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 3
31654: NEG
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 4
31665: NEG
31666: PUSH
31667: LD_INT 0
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 4
31676: NEG
31677: PUSH
31678: LD_INT 1
31680: NEG
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 4
31688: NEG
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 5
31699: NEG
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 5
31710: NEG
31711: PUSH
31712: LD_INT 1
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 5
31722: NEG
31723: PUSH
31724: LD_INT 1
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 6
31733: NEG
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 6
31744: NEG
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31768: LD_ADDR_VAR 0 34
31772: PUSH
31773: LD_INT 2
31775: NEG
31776: PUSH
31777: LD_INT 3
31779: NEG
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 3
31787: NEG
31788: PUSH
31789: LD_INT 2
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 3
31799: NEG
31800: PUSH
31801: LD_INT 3
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 3
31811: NEG
31812: PUSH
31813: LD_INT 4
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 4
31823: NEG
31824: PUSH
31825: LD_INT 3
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 4
31835: NEG
31836: PUSH
31837: LD_INT 4
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 4
31847: NEG
31848: PUSH
31849: LD_INT 5
31851: NEG
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 5
31859: NEG
31860: PUSH
31861: LD_INT 4
31863: NEG
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 5
31871: NEG
31872: PUSH
31873: LD_INT 5
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 5
31883: NEG
31884: PUSH
31885: LD_INT 6
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 6
31895: NEG
31896: PUSH
31897: LD_INT 5
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 6
31907: NEG
31908: PUSH
31909: LD_INT 6
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31931: LD_ADDR_VAR 0 41
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: LD_INT 2
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 1
31949: NEG
31950: PUSH
31951: LD_INT 3
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: LD_INT 2
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: LIST
31974: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31975: LD_ADDR_VAR 0 42
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 3
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: LIST
32015: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32016: LD_ADDR_VAR 0 43
32020: PUSH
32021: LD_INT 2
32023: PUSH
32024: LD_INT 2
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 3
32033: PUSH
32034: LD_INT 2
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 2
32043: PUSH
32044: LD_INT 3
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: LIST
32055: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32056: LD_ADDR_VAR 0 44
32060: PUSH
32061: LD_INT 0
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 1
32073: PUSH
32074: LD_INT 3
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 1
32083: NEG
32084: PUSH
32085: LD_INT 2
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: LIST
32096: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32097: LD_ADDR_VAR 0 45
32101: PUSH
32102: LD_INT 2
32104: NEG
32105: PUSH
32106: LD_INT 0
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 2
32115: NEG
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 3
32126: NEG
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: LIST
32140: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32141: LD_ADDR_VAR 0 46
32145: PUSH
32146: LD_INT 2
32148: NEG
32149: PUSH
32150: LD_INT 2
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 2
32160: NEG
32161: PUSH
32162: LD_INT 3
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 3
32172: NEG
32173: PUSH
32174: LD_INT 2
32176: NEG
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: LIST
32186: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32187: LD_ADDR_VAR 0 47
32191: PUSH
32192: LD_INT 2
32194: NEG
32195: PUSH
32196: LD_INT 3
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: PUSH
32208: LD_INT 3
32210: NEG
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32220: LD_ADDR_VAR 0 48
32224: PUSH
32225: LD_INT 1
32227: PUSH
32228: LD_INT 2
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 2
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32251: LD_ADDR_VAR 0 49
32255: PUSH
32256: LD_INT 3
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 3
32268: PUSH
32269: LD_INT 2
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32280: LD_ADDR_VAR 0 50
32284: PUSH
32285: LD_INT 2
32287: PUSH
32288: LD_INT 3
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: LD_INT 3
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32309: LD_ADDR_VAR 0 51
32313: PUSH
32314: LD_INT 1
32316: NEG
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: NEG
32328: PUSH
32329: LD_INT 1
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32340: LD_ADDR_VAR 0 52
32344: PUSH
32345: LD_INT 3
32347: NEG
32348: PUSH
32349: LD_INT 1
32351: NEG
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 3
32359: NEG
32360: PUSH
32361: LD_INT 2
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32373: LD_ADDR_VAR 0 53
32377: PUSH
32378: LD_INT 1
32380: NEG
32381: PUSH
32382: LD_INT 3
32384: NEG
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: LD_INT 3
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: PUSH
32404: LD_INT 2
32406: NEG
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: LIST
32416: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32417: LD_ADDR_VAR 0 54
32421: PUSH
32422: LD_INT 2
32424: PUSH
32425: LD_INT 1
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 3
32435: PUSH
32436: LD_INT 0
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 3
32445: PUSH
32446: LD_INT 1
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: LIST
32457: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32458: LD_ADDR_VAR 0 55
32462: PUSH
32463: LD_INT 3
32465: PUSH
32466: LD_INT 2
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 3
32475: PUSH
32476: LD_INT 3
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 2
32485: PUSH
32486: LD_INT 3
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: LIST
32497: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32498: LD_ADDR_VAR 0 56
32502: PUSH
32503: LD_INT 1
32505: PUSH
32506: LD_INT 3
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 0
32515: PUSH
32516: LD_INT 3
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: NEG
32526: PUSH
32527: LD_INT 2
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: LIST
32538: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32539: LD_ADDR_VAR 0 57
32543: PUSH
32544: LD_INT 2
32546: NEG
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 3
32557: NEG
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 3
32568: NEG
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: LIST
32582: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32583: LD_ADDR_VAR 0 58
32587: PUSH
32588: LD_INT 2
32590: NEG
32591: PUSH
32592: LD_INT 3
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 3
32602: NEG
32603: PUSH
32604: LD_INT 2
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 3
32614: NEG
32615: PUSH
32616: LD_INT 3
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: LIST
32628: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32629: LD_ADDR_VAR 0 59
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: LD_INT 2
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 0
32648: PUSH
32649: LD_INT 2
32651: NEG
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 1
32659: PUSH
32660: LD_INT 1
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32673: LD_ADDR_VAR 0 60
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: LD_INT 1
32683: NEG
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 2
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 2
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: LIST
32713: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32714: LD_ADDR_VAR 0 61
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 2
32731: PUSH
32732: LD_INT 2
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: LD_INT 2
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: LIST
32753: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32754: LD_ADDR_VAR 0 62
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: LD_INT 2
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: LIST
32794: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32795: LD_ADDR_VAR 0 63
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: LD_INT 1
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: NEG
32814: PUSH
32815: LD_INT 0
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 2
32824: NEG
32825: PUSH
32826: LD_INT 1
32828: NEG
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: LIST
32838: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32839: LD_ADDR_VAR 0 64
32843: PUSH
32844: LD_INT 1
32846: NEG
32847: PUSH
32848: LD_INT 2
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 2
32858: NEG
32859: PUSH
32860: LD_INT 1
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 2
32870: NEG
32871: PUSH
32872: LD_INT 2
32874: NEG
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: ST_TO_ADDR
// end ; 2 :
32885: GO 36151
32887: LD_INT 2
32889: DOUBLE
32890: EQUAL
32891: IFTRUE 32895
32893: GO 36150
32895: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32896: LD_ADDR_VAR 0 29
32900: PUSH
32901: LD_INT 4
32903: PUSH
32904: LD_INT 0
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 4
32913: PUSH
32914: LD_INT 1
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 5
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 5
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 4
32944: PUSH
32945: LD_INT 1
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 3
32954: PUSH
32955: LD_INT 0
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 3
32964: PUSH
32965: LD_INT 1
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 3
32975: PUSH
32976: LD_INT 2
32978: NEG
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 5
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 3
32996: PUSH
32997: LD_INT 3
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 3
33006: PUSH
33007: LD_INT 2
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 4
33016: PUSH
33017: LD_INT 3
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 4
33026: PUSH
33027: LD_INT 4
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 3
33036: PUSH
33037: LD_INT 4
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 2
33046: PUSH
33047: LD_INT 3
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: LD_INT 2
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 4
33066: PUSH
33067: LD_INT 2
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 2
33076: PUSH
33077: LD_INT 4
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 4
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 3
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: PUSH
33107: LD_INT 4
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 1
33116: PUSH
33117: LD_INT 5
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 0
33126: PUSH
33127: LD_INT 5
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: LD_INT 4
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 1
33147: NEG
33148: PUSH
33149: LD_INT 3
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 2
33158: PUSH
33159: LD_INT 5
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 2
33168: NEG
33169: PUSH
33170: LD_INT 3
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 3
33179: NEG
33180: PUSH
33181: LD_INT 0
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 3
33190: NEG
33191: PUSH
33192: LD_INT 1
33194: NEG
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 2
33202: NEG
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 2
33213: NEG
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 3
33224: NEG
33225: PUSH
33226: LD_INT 1
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 4
33235: NEG
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 4
33246: NEG
33247: PUSH
33248: LD_INT 1
33250: NEG
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 4
33258: NEG
33259: PUSH
33260: LD_INT 2
33262: NEG
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 2
33270: NEG
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 4
33281: NEG
33282: PUSH
33283: LD_INT 4
33285: NEG
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 4
33293: NEG
33294: PUSH
33295: LD_INT 5
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 3
33305: NEG
33306: PUSH
33307: LD_INT 4
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 3
33317: NEG
33318: PUSH
33319: LD_INT 3
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 4
33329: NEG
33330: PUSH
33331: LD_INT 3
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 5
33341: NEG
33342: PUSH
33343: LD_INT 4
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 5
33353: NEG
33354: PUSH
33355: LD_INT 5
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 3
33365: NEG
33366: PUSH
33367: LD_INT 5
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 5
33377: NEG
33378: PUSH
33379: LD_INT 3
33381: NEG
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33434: LD_ADDR_VAR 0 30
33438: PUSH
33439: LD_INT 4
33441: PUSH
33442: LD_INT 4
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 4
33451: PUSH
33452: LD_INT 3
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 5
33461: PUSH
33462: LD_INT 4
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 5
33471: PUSH
33472: LD_INT 5
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 4
33481: PUSH
33482: LD_INT 5
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 3
33491: PUSH
33492: LD_INT 4
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 3
33501: PUSH
33502: LD_INT 3
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 5
33511: PUSH
33512: LD_INT 3
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 3
33521: PUSH
33522: LD_INT 5
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 0
33531: PUSH
33532: LD_INT 3
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: LD_INT 2
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: LD_INT 3
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 1
33561: PUSH
33562: LD_INT 4
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: LD_INT 4
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: LD_INT 3
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: LD_INT 2
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 2
33603: PUSH
33604: LD_INT 4
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 2
33613: NEG
33614: PUSH
33615: LD_INT 2
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 4
33624: NEG
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 4
33635: NEG
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 3
33647: NEG
33648: PUSH
33649: LD_INT 0
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 3
33658: NEG
33659: PUSH
33660: LD_INT 1
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 4
33669: NEG
33670: PUSH
33671: LD_INT 1
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 5
33680: NEG
33681: PUSH
33682: LD_INT 0
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 5
33691: NEG
33692: PUSH
33693: LD_INT 1
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 5
33703: NEG
33704: PUSH
33705: LD_INT 2
33707: NEG
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 3
33715: NEG
33716: PUSH
33717: LD_INT 2
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 3
33726: NEG
33727: PUSH
33728: LD_INT 3
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 3
33738: NEG
33739: PUSH
33740: LD_INT 4
33742: NEG
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 2
33750: NEG
33751: PUSH
33752: LD_INT 3
33754: NEG
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 2
33762: NEG
33763: PUSH
33764: LD_INT 2
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 3
33774: NEG
33775: PUSH
33776: LD_INT 2
33778: NEG
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 4
33786: NEG
33787: PUSH
33788: LD_INT 3
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 4
33798: NEG
33799: PUSH
33800: LD_INT 4
33802: NEG
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 2
33810: NEG
33811: PUSH
33812: LD_INT 4
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 4
33822: NEG
33823: PUSH
33824: LD_INT 2
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 0
33834: PUSH
33835: LD_INT 4
33837: NEG
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 0
33845: PUSH
33846: LD_INT 5
33848: NEG
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 1
33856: PUSH
33857: LD_INT 4
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: LD_INT 3
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: LD_INT 3
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: NEG
33890: PUSH
33891: LD_INT 4
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: NEG
33902: PUSH
33903: LD_INT 5
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: LD_INT 3
33916: NEG
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 2
33924: NEG
33925: PUSH
33926: LD_INT 5
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33981: LD_ADDR_VAR 0 31
33985: PUSH
33986: LD_INT 0
33988: PUSH
33989: LD_INT 4
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: LD_INT 3
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 1
34008: PUSH
34009: LD_INT 4
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: LD_INT 5
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: LD_INT 5
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: LD_INT 4
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 1
34049: NEG
34050: PUSH
34051: LD_INT 3
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 2
34060: PUSH
34061: LD_INT 5
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 2
34070: NEG
34071: PUSH
34072: LD_INT 3
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 3
34081: NEG
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 3
34092: NEG
34093: PUSH
34094: LD_INT 1
34096: NEG
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 2
34104: NEG
34105: PUSH
34106: LD_INT 0
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 2
34115: NEG
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 3
34126: NEG
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 4
34137: NEG
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 4
34148: NEG
34149: PUSH
34150: LD_INT 1
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 4
34160: NEG
34161: PUSH
34162: LD_INT 2
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 2
34172: NEG
34173: PUSH
34174: LD_INT 2
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 4
34183: NEG
34184: PUSH
34185: LD_INT 4
34187: NEG
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 4
34195: NEG
34196: PUSH
34197: LD_INT 5
34199: NEG
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 3
34207: NEG
34208: PUSH
34209: LD_INT 4
34211: NEG
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 3
34219: NEG
34220: PUSH
34221: LD_INT 3
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 4
34231: NEG
34232: PUSH
34233: LD_INT 3
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 5
34243: NEG
34244: PUSH
34245: LD_INT 4
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 5
34255: NEG
34256: PUSH
34257: LD_INT 5
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 3
34267: NEG
34268: PUSH
34269: LD_INT 5
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 5
34279: NEG
34280: PUSH
34281: LD_INT 3
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 0
34291: PUSH
34292: LD_INT 3
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 4
34305: NEG
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: LD_INT 3
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: LD_INT 2
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 0
34335: PUSH
34336: LD_INT 2
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: LD_INT 3
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 1
34358: NEG
34359: PUSH
34360: LD_INT 4
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: LD_INT 2
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 2
34381: NEG
34382: PUSH
34383: LD_INT 4
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 4
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 4
34403: PUSH
34404: LD_INT 1
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 5
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 5
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 4
34434: PUSH
34435: LD_INT 1
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 3
34444: PUSH
34445: LD_INT 0
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 3
34454: PUSH
34455: LD_INT 1
34457: NEG
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 3
34465: PUSH
34466: LD_INT 2
34468: NEG
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 5
34476: PUSH
34477: LD_INT 2
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34531: LD_ADDR_VAR 0 32
34535: PUSH
34536: LD_INT 4
34538: NEG
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 4
34549: NEG
34550: PUSH
34551: LD_INT 1
34553: NEG
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 3
34561: NEG
34562: PUSH
34563: LD_INT 0
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 3
34572: NEG
34573: PUSH
34574: LD_INT 1
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 4
34583: NEG
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 5
34594: NEG
34595: PUSH
34596: LD_INT 0
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 5
34605: NEG
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 5
34617: NEG
34618: PUSH
34619: LD_INT 2
34621: NEG
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 3
34629: NEG
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 3
34640: NEG
34641: PUSH
34642: LD_INT 3
34644: NEG
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 3
34652: NEG
34653: PUSH
34654: LD_INT 4
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 2
34664: NEG
34665: PUSH
34666: LD_INT 3
34668: NEG
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 2
34676: NEG
34677: PUSH
34678: LD_INT 2
34680: NEG
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 3
34688: NEG
34689: PUSH
34690: LD_INT 2
34692: NEG
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 4
34700: NEG
34701: PUSH
34702: LD_INT 3
34704: NEG
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 4
34712: NEG
34713: PUSH
34714: LD_INT 4
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 2
34724: NEG
34725: PUSH
34726: LD_INT 4
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 4
34736: NEG
34737: PUSH
34738: LD_INT 2
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 0
34748: PUSH
34749: LD_INT 4
34751: NEG
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 0
34759: PUSH
34760: LD_INT 5
34762: NEG
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: LD_INT 4
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: LD_INT 3
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: LD_INT 3
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: LD_INT 4
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 1
34815: NEG
34816: PUSH
34817: LD_INT 5
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 2
34827: PUSH
34828: LD_INT 3
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 2
34838: NEG
34839: PUSH
34840: LD_INT 5
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 3
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 3
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 4
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 4
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 3
34891: PUSH
34892: LD_INT 1
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 2
34901: PUSH
34902: LD_INT 0
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 2
34911: PUSH
34912: LD_INT 1
34914: NEG
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 2
34922: PUSH
34923: LD_INT 2
34925: NEG
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 4
34933: PUSH
34934: LD_INT 2
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 4
34943: PUSH
34944: LD_INT 4
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 4
34953: PUSH
34954: LD_INT 3
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 5
34963: PUSH
34964: LD_INT 4
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 5
34973: PUSH
34974: LD_INT 5
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 4
34983: PUSH
34984: LD_INT 5
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 3
34993: PUSH
34994: LD_INT 4
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 3
35003: PUSH
35004: LD_INT 3
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 5
35013: PUSH
35014: LD_INT 3
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 3
35023: PUSH
35024: LD_INT 5
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35078: LD_ADDR_VAR 0 33
35082: PUSH
35083: LD_INT 4
35085: NEG
35086: PUSH
35087: LD_INT 4
35089: NEG
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 4
35097: NEG
35098: PUSH
35099: LD_INT 5
35101: NEG
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 3
35109: NEG
35110: PUSH
35111: LD_INT 4
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 3
35121: NEG
35122: PUSH
35123: LD_INT 3
35125: NEG
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 4
35133: NEG
35134: PUSH
35135: LD_INT 3
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 5
35145: NEG
35146: PUSH
35147: LD_INT 4
35149: NEG
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 5
35157: NEG
35158: PUSH
35159: LD_INT 5
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 3
35169: NEG
35170: PUSH
35171: LD_INT 5
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 5
35181: NEG
35182: PUSH
35183: LD_INT 3
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: LD_INT 3
35196: NEG
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: LD_INT 4
35207: NEG
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 1
35215: PUSH
35216: LD_INT 3
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: LD_INT 2
35229: NEG
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 0
35237: PUSH
35238: LD_INT 2
35240: NEG
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 1
35248: NEG
35249: PUSH
35250: LD_INT 3
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: LD_INT 4
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 2
35272: PUSH
35273: LD_INT 2
35275: NEG
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 2
35283: NEG
35284: PUSH
35285: LD_INT 4
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 4
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 4
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 5
35316: PUSH
35317: LD_INT 0
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 5
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 4
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 3
35346: PUSH
35347: LD_INT 0
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 3
35356: PUSH
35357: LD_INT 1
35359: NEG
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 3
35367: PUSH
35368: LD_INT 2
35370: NEG
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 5
35378: PUSH
35379: LD_INT 2
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 3
35388: PUSH
35389: LD_INT 3
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 3
35398: PUSH
35399: LD_INT 2
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 4
35408: PUSH
35409: LD_INT 3
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 4
35418: PUSH
35419: LD_INT 4
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 3
35428: PUSH
35429: LD_INT 4
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 2
35438: PUSH
35439: LD_INT 3
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 2
35448: PUSH
35449: LD_INT 2
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 4
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 2
35468: PUSH
35469: LD_INT 4
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: LD_INT 4
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: LD_INT 3
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: PUSH
35499: LD_INT 4
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: LD_INT 5
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: LD_INT 5
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 1
35528: NEG
35529: PUSH
35530: LD_INT 4
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 1
35539: NEG
35540: PUSH
35541: LD_INT 3
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 2
35550: PUSH
35551: LD_INT 5
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 2
35560: NEG
35561: PUSH
35562: LD_INT 3
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35616: LD_ADDR_VAR 0 34
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: LD_INT 4
35626: NEG
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 0
35634: PUSH
35635: LD_INT 5
35637: NEG
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: LD_INT 4
35648: NEG
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: LD_INT 3
35659: NEG
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: LD_INT 3
35670: NEG
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: LD_INT 4
35682: NEG
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 1
35690: NEG
35691: PUSH
35692: LD_INT 5
35694: NEG
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 2
35702: PUSH
35703: LD_INT 3
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 2
35713: NEG
35714: PUSH
35715: LD_INT 5
35717: NEG
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 3
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 3
35735: PUSH
35736: LD_INT 1
35738: NEG
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 4
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 4
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 3
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 2
35776: PUSH
35777: LD_INT 0
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 2
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 2
35797: PUSH
35798: LD_INT 2
35800: NEG
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 4
35808: PUSH
35809: LD_INT 2
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 4
35818: PUSH
35819: LD_INT 4
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 4
35828: PUSH
35829: LD_INT 3
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 5
35838: PUSH
35839: LD_INT 4
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 5
35848: PUSH
35849: LD_INT 5
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 4
35858: PUSH
35859: LD_INT 5
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 3
35868: PUSH
35869: LD_INT 4
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 3
35878: PUSH
35879: LD_INT 3
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 5
35888: PUSH
35889: LD_INT 3
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 3
35898: PUSH
35899: LD_INT 5
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: LD_INT 3
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: LD_INT 2
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: PUSH
35929: LD_INT 3
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: PUSH
35939: LD_INT 4
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 0
35948: PUSH
35949: LD_INT 4
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: LD_INT 3
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 1
35969: NEG
35970: PUSH
35971: LD_INT 2
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 2
35980: PUSH
35981: LD_INT 4
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 2
35990: NEG
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 4
36001: NEG
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 4
36012: NEG
36013: PUSH
36014: LD_INT 1
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 3
36024: NEG
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 3
36035: NEG
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 4
36046: NEG
36047: PUSH
36048: LD_INT 1
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 5
36057: NEG
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 5
36068: NEG
36069: PUSH
36070: LD_INT 1
36072: NEG
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 5
36080: NEG
36081: PUSH
36082: LD_INT 2
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 3
36092: NEG
36093: PUSH
36094: LD_INT 2
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: ST_TO_ADDR
// end ; end ;
36148: GO 36151
36150: POP
// case btype of b_depot , b_warehouse :
36151: LD_VAR 0 1
36155: PUSH
36156: LD_INT 0
36158: DOUBLE
36159: EQUAL
36160: IFTRUE 36170
36162: LD_INT 1
36164: DOUBLE
36165: EQUAL
36166: IFTRUE 36170
36168: GO 36371
36170: POP
// case nation of nation_american :
36171: LD_VAR 0 5
36175: PUSH
36176: LD_INT 1
36178: DOUBLE
36179: EQUAL
36180: IFTRUE 36184
36182: GO 36240
36184: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
36185: LD_ADDR_VAR 0 9
36189: PUSH
36190: LD_VAR 0 11
36194: PUSH
36195: LD_VAR 0 12
36199: PUSH
36200: LD_VAR 0 13
36204: PUSH
36205: LD_VAR 0 14
36209: PUSH
36210: LD_VAR 0 15
36214: PUSH
36215: LD_VAR 0 16
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: PUSH
36228: LD_VAR 0 4
36232: PUSH
36233: LD_INT 1
36235: PLUS
36236: ARRAY
36237: ST_TO_ADDR
36238: GO 36369
36240: LD_INT 2
36242: DOUBLE
36243: EQUAL
36244: IFTRUE 36248
36246: GO 36304
36248: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
36249: LD_ADDR_VAR 0 9
36253: PUSH
36254: LD_VAR 0 17
36258: PUSH
36259: LD_VAR 0 18
36263: PUSH
36264: LD_VAR 0 19
36268: PUSH
36269: LD_VAR 0 20
36273: PUSH
36274: LD_VAR 0 21
36278: PUSH
36279: LD_VAR 0 22
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: PUSH
36292: LD_VAR 0 4
36296: PUSH
36297: LD_INT 1
36299: PLUS
36300: ARRAY
36301: ST_TO_ADDR
36302: GO 36369
36304: LD_INT 3
36306: DOUBLE
36307: EQUAL
36308: IFTRUE 36312
36310: GO 36368
36312: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36313: LD_ADDR_VAR 0 9
36317: PUSH
36318: LD_VAR 0 23
36322: PUSH
36323: LD_VAR 0 24
36327: PUSH
36328: LD_VAR 0 25
36332: PUSH
36333: LD_VAR 0 26
36337: PUSH
36338: LD_VAR 0 27
36342: PUSH
36343: LD_VAR 0 28
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: PUSH
36356: LD_VAR 0 4
36360: PUSH
36361: LD_INT 1
36363: PLUS
36364: ARRAY
36365: ST_TO_ADDR
36366: GO 36369
36368: POP
36369: GO 36918
36371: LD_INT 2
36373: DOUBLE
36374: EQUAL
36375: IFTRUE 36385
36377: LD_INT 3
36379: DOUBLE
36380: EQUAL
36381: IFTRUE 36385
36383: GO 36441
36385: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36386: LD_ADDR_VAR 0 9
36390: PUSH
36391: LD_VAR 0 29
36395: PUSH
36396: LD_VAR 0 30
36400: PUSH
36401: LD_VAR 0 31
36405: PUSH
36406: LD_VAR 0 32
36410: PUSH
36411: LD_VAR 0 33
36415: PUSH
36416: LD_VAR 0 34
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: PUSH
36429: LD_VAR 0 4
36433: PUSH
36434: LD_INT 1
36436: PLUS
36437: ARRAY
36438: ST_TO_ADDR
36439: GO 36918
36441: LD_INT 16
36443: DOUBLE
36444: EQUAL
36445: IFTRUE 36497
36447: LD_INT 17
36449: DOUBLE
36450: EQUAL
36451: IFTRUE 36497
36453: LD_INT 18
36455: DOUBLE
36456: EQUAL
36457: IFTRUE 36497
36459: LD_INT 19
36461: DOUBLE
36462: EQUAL
36463: IFTRUE 36497
36465: LD_INT 20
36467: DOUBLE
36468: EQUAL
36469: IFTRUE 36497
36471: LD_INT 21
36473: DOUBLE
36474: EQUAL
36475: IFTRUE 36497
36477: LD_INT 23
36479: DOUBLE
36480: EQUAL
36481: IFTRUE 36497
36483: LD_INT 24
36485: DOUBLE
36486: EQUAL
36487: IFTRUE 36497
36489: LD_INT 25
36491: DOUBLE
36492: EQUAL
36493: IFTRUE 36497
36495: GO 36553
36497: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36498: LD_ADDR_VAR 0 9
36502: PUSH
36503: LD_VAR 0 35
36507: PUSH
36508: LD_VAR 0 36
36512: PUSH
36513: LD_VAR 0 37
36517: PUSH
36518: LD_VAR 0 38
36522: PUSH
36523: LD_VAR 0 39
36527: PUSH
36528: LD_VAR 0 40
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: PUSH
36541: LD_VAR 0 4
36545: PUSH
36546: LD_INT 1
36548: PLUS
36549: ARRAY
36550: ST_TO_ADDR
36551: GO 36918
36553: LD_INT 6
36555: DOUBLE
36556: EQUAL
36557: IFTRUE 36609
36559: LD_INT 7
36561: DOUBLE
36562: EQUAL
36563: IFTRUE 36609
36565: LD_INT 8
36567: DOUBLE
36568: EQUAL
36569: IFTRUE 36609
36571: LD_INT 13
36573: DOUBLE
36574: EQUAL
36575: IFTRUE 36609
36577: LD_INT 12
36579: DOUBLE
36580: EQUAL
36581: IFTRUE 36609
36583: LD_INT 15
36585: DOUBLE
36586: EQUAL
36587: IFTRUE 36609
36589: LD_INT 11
36591: DOUBLE
36592: EQUAL
36593: IFTRUE 36609
36595: LD_INT 14
36597: DOUBLE
36598: EQUAL
36599: IFTRUE 36609
36601: LD_INT 10
36603: DOUBLE
36604: EQUAL
36605: IFTRUE 36609
36607: GO 36665
36609: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36610: LD_ADDR_VAR 0 9
36614: PUSH
36615: LD_VAR 0 41
36619: PUSH
36620: LD_VAR 0 42
36624: PUSH
36625: LD_VAR 0 43
36629: PUSH
36630: LD_VAR 0 44
36634: PUSH
36635: LD_VAR 0 45
36639: PUSH
36640: LD_VAR 0 46
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: PUSH
36653: LD_VAR 0 4
36657: PUSH
36658: LD_INT 1
36660: PLUS
36661: ARRAY
36662: ST_TO_ADDR
36663: GO 36918
36665: LD_INT 36
36667: DOUBLE
36668: EQUAL
36669: IFTRUE 36673
36671: GO 36729
36673: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36674: LD_ADDR_VAR 0 9
36678: PUSH
36679: LD_VAR 0 47
36683: PUSH
36684: LD_VAR 0 48
36688: PUSH
36689: LD_VAR 0 49
36693: PUSH
36694: LD_VAR 0 50
36698: PUSH
36699: LD_VAR 0 51
36703: PUSH
36704: LD_VAR 0 52
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: PUSH
36717: LD_VAR 0 4
36721: PUSH
36722: LD_INT 1
36724: PLUS
36725: ARRAY
36726: ST_TO_ADDR
36727: GO 36918
36729: LD_INT 4
36731: DOUBLE
36732: EQUAL
36733: IFTRUE 36755
36735: LD_INT 5
36737: DOUBLE
36738: EQUAL
36739: IFTRUE 36755
36741: LD_INT 34
36743: DOUBLE
36744: EQUAL
36745: IFTRUE 36755
36747: LD_INT 37
36749: DOUBLE
36750: EQUAL
36751: IFTRUE 36755
36753: GO 36811
36755: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36756: LD_ADDR_VAR 0 9
36760: PUSH
36761: LD_VAR 0 53
36765: PUSH
36766: LD_VAR 0 54
36770: PUSH
36771: LD_VAR 0 55
36775: PUSH
36776: LD_VAR 0 56
36780: PUSH
36781: LD_VAR 0 57
36785: PUSH
36786: LD_VAR 0 58
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: PUSH
36799: LD_VAR 0 4
36803: PUSH
36804: LD_INT 1
36806: PLUS
36807: ARRAY
36808: ST_TO_ADDR
36809: GO 36918
36811: LD_INT 31
36813: DOUBLE
36814: EQUAL
36815: IFTRUE 36861
36817: LD_INT 32
36819: DOUBLE
36820: EQUAL
36821: IFTRUE 36861
36823: LD_INT 33
36825: DOUBLE
36826: EQUAL
36827: IFTRUE 36861
36829: LD_INT 27
36831: DOUBLE
36832: EQUAL
36833: IFTRUE 36861
36835: LD_INT 26
36837: DOUBLE
36838: EQUAL
36839: IFTRUE 36861
36841: LD_INT 28
36843: DOUBLE
36844: EQUAL
36845: IFTRUE 36861
36847: LD_INT 29
36849: DOUBLE
36850: EQUAL
36851: IFTRUE 36861
36853: LD_INT 30
36855: DOUBLE
36856: EQUAL
36857: IFTRUE 36861
36859: GO 36917
36861: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36862: LD_ADDR_VAR 0 9
36866: PUSH
36867: LD_VAR 0 59
36871: PUSH
36872: LD_VAR 0 60
36876: PUSH
36877: LD_VAR 0 61
36881: PUSH
36882: LD_VAR 0 62
36886: PUSH
36887: LD_VAR 0 63
36891: PUSH
36892: LD_VAR 0 64
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: PUSH
36905: LD_VAR 0 4
36909: PUSH
36910: LD_INT 1
36912: PLUS
36913: ARRAY
36914: ST_TO_ADDR
36915: GO 36918
36917: POP
// temp_list2 = [ ] ;
36918: LD_ADDR_VAR 0 10
36922: PUSH
36923: EMPTY
36924: ST_TO_ADDR
// for i in temp_list do
36925: LD_ADDR_VAR 0 8
36929: PUSH
36930: LD_VAR 0 9
36934: PUSH
36935: FOR_IN
36936: IFFALSE 36988
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36938: LD_ADDR_VAR 0 10
36942: PUSH
36943: LD_VAR 0 10
36947: PUSH
36948: LD_VAR 0 8
36952: PUSH
36953: LD_INT 1
36955: ARRAY
36956: PUSH
36957: LD_VAR 0 2
36961: PLUS
36962: PUSH
36963: LD_VAR 0 8
36967: PUSH
36968: LD_INT 2
36970: ARRAY
36971: PUSH
36972: LD_VAR 0 3
36976: PLUS
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: EMPTY
36983: LIST
36984: ADD
36985: ST_TO_ADDR
36986: GO 36935
36988: POP
36989: POP
// result = temp_list2 ;
36990: LD_ADDR_VAR 0 7
36994: PUSH
36995: LD_VAR 0 10
36999: ST_TO_ADDR
// end ; end_of_file
37000: LD_VAR 0 7
37004: RET
// every 1 do var i ;
37005: GO 37007
37007: DISABLE
37008: LD_INT 0
37010: PPUSH
// begin Video ( true ) ;
37011: LD_INT 1
37013: PPUSH
37014: CALL 7387 0 1
// CenterOnXY ( 53 , 40 ) ;
37018: LD_INT 53
37020: PPUSH
37021: LD_INT 40
37023: PPUSH
37024: CALL_OW 84
// wait ( 0 0$5 ) ;
37028: LD_INT 175
37030: PPUSH
37031: CALL_OW 67
// if gammaCommander = 1 then
37035: LD_EXP 12
37039: PUSH
37040: LD_INT 1
37042: EQUAL
37043: IFFALSE 37054
// CenterNowOnUnits ( Donaldson ) ;
37045: LD_EXP 3
37049: PPUSH
37050: CALL_OW 87
// if gammaCommander = 2 then
37054: LD_EXP 12
37058: PUSH
37059: LD_INT 2
37061: EQUAL
37062: IFFALSE 37073
// CenterNowOnUnits ( Brown ) ;
37064: LD_EXP 2
37068: PPUSH
37069: CALL_OW 87
// if gammaCommander = 3 then
37073: LD_EXP 12
37077: PUSH
37078: LD_INT 3
37080: EQUAL
37081: IFFALSE 37092
// CenterNowOnUnits ( Houten ) ;
37083: LD_EXP 13
37087: PPUSH
37088: CALL_OW 87
// if gammaCommander = 1 then
37092: LD_EXP 12
37096: PUSH
37097: LD_INT 1
37099: EQUAL
37100: IFFALSE 37114
// Say ( Donaldson , D1-Don-1 ) ;
37102: LD_EXP 3
37106: PPUSH
37107: LD_STRING D1-Don-1
37109: PPUSH
37110: CALL_OW 88
// if gammaCommander = 2 then
37114: LD_EXP 12
37118: PUSH
37119: LD_INT 2
37121: EQUAL
37122: IFFALSE 37136
// Say ( Brown , D1-Brown-1 ) ;
37124: LD_EXP 2
37128: PPUSH
37129: LD_STRING D1-Brown-1
37131: PPUSH
37132: CALL_OW 88
// if gammaCommander = 3 then
37136: LD_EXP 12
37140: PUSH
37141: LD_INT 3
37143: EQUAL
37144: IFFALSE 37158
// Say ( Houten , D1-VanH-1 ) ;
37146: LD_EXP 13
37150: PPUSH
37151: LD_STRING D1-VanH-1
37153: PPUSH
37154: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
37158: LD_EXP 22
37162: PPUSH
37163: LD_STRING D1-Har-1
37165: PPUSH
37166: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
37170: LD_INT 53
37172: PPUSH
37173: LD_INT 40
37175: PPUSH
37176: CALL_OW 84
// if gammaCommander = 1 then
37180: LD_EXP 12
37184: PUSH
37185: LD_INT 1
37187: EQUAL
37188: IFFALSE 37202
// Say ( Donaldson , D1-Don-2 ) ;
37190: LD_EXP 3
37194: PPUSH
37195: LD_STRING D1-Don-2
37197: PPUSH
37198: CALL_OW 88
// if gammaCommander = 2 then
37202: LD_EXP 12
37206: PUSH
37207: LD_INT 2
37209: EQUAL
37210: IFFALSE 37224
// Say ( Brown , D1-Brown-2 ) ;
37212: LD_EXP 2
37216: PPUSH
37217: LD_STRING D1-Brown-2
37219: PPUSH
37220: CALL_OW 88
// if gammaCommander = 3 then
37224: LD_EXP 12
37228: PUSH
37229: LD_INT 3
37231: EQUAL
37232: IFFALSE 37246
// Say ( Houten , D1-VanH-2 ) ;
37234: LD_EXP 13
37238: PPUSH
37239: LD_STRING D1-VanH-2
37241: PPUSH
37242: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
37246: LD_EXP 22
37250: PPUSH
37251: LD_STRING D1-Har-2
37253: PPUSH
37254: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
37258: LD_INT 22
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 33
37270: PUSH
37271: LD_INT 2
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 61
37280: PUSH
37281: EMPTY
37282: LIST
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: LIST
37288: PPUSH
37289: CALL_OW 69
37293: IFFALSE 37358
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
37295: LD_ADDR_VAR 0 1
37299: PUSH
37300: LD_INT 22
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 33
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 61
37322: PUSH
37323: EMPTY
37324: LIST
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: LIST
37330: PPUSH
37331: CALL_OW 69
37335: PUSH
37336: FOR_IN
37337: IFFALSE 37356
// ComAgressiveMove ( i , 70 , 41 ) ;
37339: LD_VAR 0 1
37343: PPUSH
37344: LD_INT 70
37346: PPUSH
37347: LD_INT 41
37349: PPUSH
37350: CALL_OW 114
37354: GO 37336
37356: POP
37357: POP
// repeat wait ( 0 0$1 ) ;
37358: LD_INT 35
37360: PPUSH
37361: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
37365: LD_ADDR_VAR 0 1
37369: PUSH
37370: LD_INT 22
37372: PUSH
37373: LD_INT 6
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: EMPTY
37381: LIST
37382: PPUSH
37383: CALL_OW 69
37387: PUSH
37388: FOR_IN
37389: IFFALSE 37408
// ComAgressiveMove ( i , 54 , 20 ) ;
37391: LD_VAR 0 1
37395: PPUSH
37396: LD_INT 54
37398: PPUSH
37399: LD_INT 20
37401: PPUSH
37402: CALL_OW 114
37406: GO 37388
37408: POP
37409: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
37410: LD_ADDR_VAR 0 1
37414: PUSH
37415: LD_INT 22
37417: PUSH
37418: LD_INT 1
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 25
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 3
37437: PUSH
37438: LD_INT 54
37440: PUSH
37441: EMPTY
37442: LIST
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: LIST
37452: PPUSH
37453: CALL_OW 69
37457: PUSH
37458: FOR_IN
37459: IFFALSE 37493
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
37461: LD_VAR 0 1
37465: PPUSH
37466: LD_INT 70
37468: PPUSH
37469: LD_INT 41
37471: PPUSH
37472: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
37476: LD_VAR 0 1
37480: PPUSH
37481: LD_INT 46
37483: PPUSH
37484: LD_INT 39
37486: PPUSH
37487: CALL_OW 174
// end ;
37491: GO 37458
37493: POP
37494: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
37495: LD_ADDR_VAR 0 1
37499: PUSH
37500: LD_INT 22
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 21
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 3
37522: PUSH
37523: LD_INT 24
37525: PUSH
37526: LD_INT 500
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: LIST
37541: PPUSH
37542: CALL_OW 69
37546: PUSH
37547: FOR_IN
37548: IFFALSE 37581
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
37550: LD_VAR 0 1
37554: PPUSH
37555: LD_EXP 37
37559: PPUSH
37560: CALL_OW 250
37564: PPUSH
37565: LD_EXP 37
37569: PPUSH
37570: CALL_OW 251
37574: PPUSH
37575: CALL_OW 111
37579: GO 37547
37581: POP
37582: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
37583: LD_INT 22
37585: PUSH
37586: LD_INT 6
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 21
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 24
37605: PUSH
37606: LD_INT 250
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: LIST
37617: PPUSH
37618: CALL_OW 69
37622: PUSH
37623: LD_INT 5
37625: LESS
37626: IFFALSE 37358
// Video ( false ) ;
37628: LD_INT 0
37630: PPUSH
37631: CALL 7387 0 1
// ChangeMissionObjectives ( M1 ) ;
37635: LD_STRING M1
37637: PPUSH
37638: CALL_OW 337
// SaveForQuickRestart ;
37642: CALL_OW 22
// startCutscene = 0 ;
37646: LD_ADDR_EXP 38
37650: PUSH
37651: LD_INT 0
37653: ST_TO_ADDR
// end ;
37654: PPOPN 1
37656: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
37657: LD_EXP 38
37661: IFFALSE 37752
37663: GO 37665
37665: DISABLE
37666: LD_INT 0
37668: PPUSH
37669: PPUSH
// begin enable ;
37670: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
37671: LD_ADDR_VAR 0 1
37675: PUSH
37676: LD_INT 22
37678: PUSH
37679: LD_INT 1
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 21
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 3
37698: PUSH
37699: LD_INT 24
37701: PUSH
37702: LD_INT 500
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: LIST
37717: PPUSH
37718: CALL_OW 69
37722: ST_TO_ADDR
// for i in tmp do
37723: LD_ADDR_VAR 0 2
37727: PUSH
37728: LD_VAR 0 1
37732: PUSH
37733: FOR_IN
37734: IFFALSE 37750
// SetLives ( i , 600 ) ;
37736: LD_VAR 0 2
37740: PPUSH
37741: LD_INT 600
37743: PPUSH
37744: CALL_OW 234
37748: GO 37733
37750: POP
37751: POP
// end ;
37752: PPOPN 2
37754: END
// every 1 1$0 do
37755: GO 37757
37757: DISABLE
// begin PrepareSupportFromDelta ;
37758: CALL 3713 0 0
// firstAttack = 1 ;
37762: LD_ADDR_EXP 33
37766: PUSH
37767: LD_INT 1
37769: ST_TO_ADDR
// if IsOk ( Gladstone ) then
37770: LD_EXP 8
37774: PPUSH
37775: CALL_OW 302
37779: IFFALSE 37795
// begin Say ( Gladstone , D2-Glad-1 ) ;
37781: LD_EXP 8
37785: PPUSH
37786: LD_STRING D2-Glad-1
37788: PPUSH
37789: CALL_OW 88
// end else
37793: GO 37897
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
37795: LD_INT 4
37797: PPUSH
37798: LD_INT 22
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 21
37810: PUSH
37811: LD_INT 1
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 2
37820: PUSH
37821: LD_INT 25
37823: PUSH
37824: LD_INT 1
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 25
37833: PUSH
37834: LD_INT 2
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 25
37843: PUSH
37844: LD_INT 3
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 25
37853: PUSH
37854: LD_INT 4
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: LIST
37872: PPUSH
37873: CALL_OW 70
37877: PUSH
37878: LD_EXP 15
37882: PUSH
37883: EMPTY
37884: LIST
37885: DIFF
37886: PPUSH
37887: LD_STRING D2-Sol1-1
37889: PPUSH
37890: LD_STRING D2-FSol1-1
37892: PPUSH
37893: CALL 7415 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
37897: LD_EXP 3
37901: PPUSH
37902: CALL_OW 302
37906: PUSH
37907: LD_EXP 12
37911: PUSH
37912: LD_INT 1
37914: EQUAL
37915: AND
37916: IFFALSE 37930
// Say ( Donaldson , D2-Don-1 ) ;
37918: LD_EXP 3
37922: PPUSH
37923: LD_STRING D2-Don-1
37925: PPUSH
37926: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
37930: LD_EXP 2
37934: PPUSH
37935: CALL_OW 302
37939: PUSH
37940: LD_EXP 12
37944: PUSH
37945: LD_INT 2
37947: EQUAL
37948: AND
37949: IFFALSE 37963
// Say ( Brown , D2-Brown-1 ) ;
37951: LD_EXP 2
37955: PPUSH
37956: LD_STRING D2-Brown-1
37958: PPUSH
37959: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
37963: LD_EXP 13
37967: PPUSH
37968: CALL_OW 302
37972: PUSH
37973: LD_EXP 12
37977: PUSH
37978: LD_INT 3
37980: EQUAL
37981: AND
37982: IFFALSE 37996
// Say ( Houten , D2-VanH-1 ) ;
37984: LD_EXP 13
37988: PPUSH
37989: LD_STRING D2-VanH-1
37991: PPUSH
37992: CALL_OW 88
// end ;
37996: END
// every 0 0$1 do
37997: GO 37999
37999: DISABLE
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
38000: LD_STRING 07_time
38002: PPUSH
38003: LD_INT 12600
38005: PPUSH
38006: CALL_OW 30
38010: PUSH
38011: LD_INT 3
38013: DIV
38014: PPUSH
38015: CALL_OW 67
// PrepareMacmillanSquad ;
38019: CALL 4375 0 0
// CenterNowOnUnits ( JMM ) ;
38023: LD_EXP 1
38027: PPUSH
38028: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
38032: LD_EXP 1
38036: PPUSH
38037: LD_STRING D3-JMM-1
38039: PPUSH
38040: CALL_OW 88
// JMMArrive = 1 ;
38044: LD_ADDR_EXP 39
38048: PUSH
38049: LD_INT 1
38051: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
38052: LD_EXP 3
38056: PPUSH
38057: CALL_OW 302
38061: PUSH
38062: LD_EXP 12
38066: PUSH
38067: LD_INT 1
38069: EQUAL
38070: AND
38071: IFFALSE 38087
// begin Say ( Donaldson , D3-Don-1 ) ;
38073: LD_EXP 3
38077: PPUSH
38078: LD_STRING D3-Don-1
38080: PPUSH
38081: CALL_OW 88
// end else
38085: GO 38139
// begin if gammaCommander = 1 then
38087: LD_EXP 12
38091: PUSH
38092: LD_INT 1
38094: EQUAL
38095: IFFALSE 38139
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
38097: LD_EXP 11
38101: PPUSH
38102: LD_INT 26
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PPUSH
38112: CALL_OW 72
38116: PPUSH
38117: LD_STRING D3-Sol1-1
38119: PPUSH
38120: LD_STRING D3-Sol1-1
38122: PPUSH
38123: CALL 7415 0 3
// Say ( JMM , D3-JMM-2 ) ;
38127: LD_EXP 1
38131: PPUSH
38132: LD_STRING D3-JMM-2
38134: PPUSH
38135: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
38139: LD_EXP 2
38143: PPUSH
38144: CALL_OW 302
38148: PUSH
38149: LD_EXP 12
38153: PUSH
38154: LD_INT 2
38156: EQUAL
38157: AND
38158: IFFALSE 38174
// begin Say ( Brown , D3-Brown-1 ) ;
38160: LD_EXP 2
38164: PPUSH
38165: LD_STRING D3-Brown-1
38167: PPUSH
38168: CALL_OW 88
// end else
38172: GO 38226
// begin if gammaCommander = 2 then
38174: LD_EXP 12
38178: PUSH
38179: LD_INT 2
38181: EQUAL
38182: IFFALSE 38226
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
38184: LD_EXP 11
38188: PPUSH
38189: LD_INT 26
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PPUSH
38199: CALL_OW 72
38203: PPUSH
38204: LD_STRING D3-Sol1-1a
38206: PPUSH
38207: LD_STRING D3-Sol1-1a
38209: PPUSH
38210: CALL 7415 0 3
// Say ( JMM , D3-JMM-2 ) ;
38214: LD_EXP 1
38218: PPUSH
38219: LD_STRING D3-JMM-2
38221: PPUSH
38222: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
38226: LD_EXP 13
38230: PPUSH
38231: CALL_OW 302
38235: PUSH
38236: LD_EXP 12
38240: PUSH
38241: LD_INT 3
38243: EQUAL
38244: AND
38245: IFFALSE 38261
// begin Say ( Houten , D3-VanH-1 ) ;
38247: LD_EXP 13
38251: PPUSH
38252: LD_STRING D3-VanH-1
38254: PPUSH
38255: CALL_OW 88
// end else
38259: GO 38313
// begin if gammaCommander = 3 then
38261: LD_EXP 12
38265: PUSH
38266: LD_INT 3
38268: EQUAL
38269: IFFALSE 38313
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
38271: LD_EXP 11
38275: PPUSH
38276: LD_INT 26
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PPUSH
38286: CALL_OW 72
38290: PPUSH
38291: LD_STRING D3-Sol1-1b
38293: PPUSH
38294: LD_STRING D3-Sol1-1b
38296: PPUSH
38297: CALL 7415 0 3
// Say ( JMM , D3-JMM-2 ) ;
38301: LD_EXP 1
38305: PPUSH
38306: LD_STRING D3-JMM-2
38308: PPUSH
38309: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
38313: LD_EXP 15
38317: PPUSH
38318: CALL_OW 302
38322: IFFALSE 38350
// begin Say ( Joan , D3a-Joan-1 ) ;
38324: LD_EXP 15
38328: PPUSH
38329: LD_STRING D3a-Joan-1
38331: PPUSH
38332: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
38336: LD_EXP 1
38340: PPUSH
38341: LD_STRING D3a-JMM-1
38343: PPUSH
38344: CALL_OW 88
// end else
38348: GO 38692
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
38350: LD_STRING 06_JoanStatus_1
38352: PPUSH
38353: LD_INT 0
38355: PPUSH
38356: CALL_OW 30
38360: PUSH
38361: LD_INT 1
38363: EQUAL
38364: IFFALSE 38692
// begin Say ( JMM , D3b-JMM-1 ) ;
38366: LD_EXP 1
38370: PPUSH
38371: LD_STRING D3b-JMM-1
38373: PPUSH
38374: CALL_OW 88
// if gammaCommander = 1 then
38378: LD_EXP 12
38382: PUSH
38383: LD_INT 1
38385: EQUAL
38386: IFFALSE 38443
// if IsOK ( Donaldson ) then
38388: LD_EXP 3
38392: PPUSH
38393: CALL_OW 302
38397: IFFALSE 38413
// Say ( Donaldson , D3b-Don-1 ) else
38399: LD_EXP 3
38403: PPUSH
38404: LD_STRING D3b-Don-1
38406: PPUSH
38407: CALL_OW 88
38411: GO 38443
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38413: LD_EXP 11
38417: PPUSH
38418: LD_INT 26
38420: PUSH
38421: LD_INT 1
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PPUSH
38428: CALL_OW 72
38432: PPUSH
38433: LD_STRING D3b-Sol1-1
38435: PPUSH
38436: LD_STRING D3b-Sol1-1
38438: PPUSH
38439: CALL 7415 0 3
// if gammaCommander = 2 then
38443: LD_EXP 12
38447: PUSH
38448: LD_INT 2
38450: EQUAL
38451: IFFALSE 38508
// if IsOk ( Brown ) then
38453: LD_EXP 2
38457: PPUSH
38458: CALL_OW 302
38462: IFFALSE 38478
// Say ( Brown , D3b-Brown-1 ) else
38464: LD_EXP 2
38468: PPUSH
38469: LD_STRING D3b-Brown-1
38471: PPUSH
38472: CALL_OW 88
38476: GO 38508
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38478: LD_EXP 11
38482: PPUSH
38483: LD_INT 26
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PPUSH
38493: CALL_OW 72
38497: PPUSH
38498: LD_STRING D3b-Sol1-1
38500: PPUSH
38501: LD_STRING D3b-Sol1-1
38503: PPUSH
38504: CALL 7415 0 3
// if gammaCommander = 3 then
38508: LD_EXP 12
38512: PUSH
38513: LD_INT 3
38515: EQUAL
38516: IFFALSE 38573
// if IsOk ( Houten ) then
38518: LD_EXP 13
38522: PPUSH
38523: CALL_OW 302
38527: IFFALSE 38543
// Say ( Houten , D3b-VanH-1 ) else
38529: LD_EXP 13
38533: PPUSH
38534: LD_STRING D3b-VanH-1
38536: PPUSH
38537: CALL_OW 88
38541: GO 38573
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38543: LD_EXP 11
38547: PPUSH
38548: LD_INT 26
38550: PUSH
38551: LD_INT 1
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PPUSH
38558: CALL_OW 72
38562: PPUSH
38563: LD_STRING D3b-Sol1-1
38565: PPUSH
38566: LD_STRING D3b-Sol1-1
38568: PPUSH
38569: CALL 7415 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
38573: LD_EXP 11
38577: PPUSH
38578: LD_INT 26
38580: PUSH
38581: LD_INT 1
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PPUSH
38588: CALL_OW 72
38592: PUSH
38593: LD_EXP 12
38597: PUSH
38598: LD_INT 1
38600: EQUAL
38601: PUSH
38602: LD_EXP 3
38606: PPUSH
38607: CALL_OW 302
38611: AND
38612: OR
38613: PUSH
38614: LD_EXP 12
38618: PUSH
38619: LD_INT 2
38621: EQUAL
38622: PUSH
38623: LD_EXP 2
38627: PPUSH
38628: CALL_OW 302
38632: AND
38633: OR
38634: PUSH
38635: LD_EXP 12
38639: PUSH
38640: LD_INT 3
38642: EQUAL
38643: PUSH
38644: LD_EXP 13
38648: PPUSH
38649: CALL_OW 302
38653: AND
38654: OR
38655: IFFALSE 38669
// Say ( JMM , D3b-JMM-2 ) ;
38657: LD_EXP 1
38661: PPUSH
38662: LD_STRING D3b-JMM-2
38664: PPUSH
38665: CALL_OW 88
// if IsOK ( Lisa ) then
38669: LD_EXP 6
38673: PPUSH
38674: CALL_OW 302
38678: IFFALSE 38692
// Say ( Lisa , D3b-Lisa-2 ) ;
38680: LD_EXP 6
38684: PPUSH
38685: LD_STRING D3b-Lisa-2
38687: PPUSH
38688: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
38692: LD_INT 22
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 21
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 26
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 2
38724: PUSH
38725: LD_INT 25
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 25
38737: PUSH
38738: LD_INT 2
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 25
38747: PUSH
38748: LD_INT 3
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 25
38757: PUSH
38758: LD_INT 4
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: PPUSH
38778: CALL_OW 69
38782: PUSH
38783: LD_EXP 1
38787: PUSH
38788: LD_EXP 2
38792: PUSH
38793: LD_EXP 3
38797: PUSH
38798: LD_EXP 4
38802: PUSH
38803: LD_EXP 5
38807: PUSH
38808: LD_EXP 6
38812: PUSH
38813: LD_EXP 7
38817: PUSH
38818: LD_EXP 8
38822: PUSH
38823: LD_EXP 9
38827: PUSH
38828: LD_EXP 10
38832: PUSH
38833: LD_EXP 15
38837: PUSH
38838: LD_EXP 14
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: DIFF
38857: PPUSH
38858: LD_STRING DCa-Sol1-1
38860: PPUSH
38861: LD_STRING DCa-Sol1-1
38863: PPUSH
38864: CALL 7415 0 3
// Say ( JMM , DCb-JMM-1 ) ;
38868: LD_EXP 1
38872: PPUSH
38873: LD_STRING DCb-JMM-1
38875: PPUSH
38876: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
38880: LD_INT 22
38882: PUSH
38883: LD_INT 1
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 21
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 26
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 2
38912: PUSH
38913: LD_INT 25
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 25
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 25
38935: PUSH
38936: LD_INT 3
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 25
38945: PUSH
38946: LD_INT 4
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: PPUSH
38966: CALL_OW 69
38970: PUSH
38971: LD_EXP 1
38975: PUSH
38976: LD_EXP 2
38980: PUSH
38981: LD_EXP 3
38985: PUSH
38986: LD_EXP 4
38990: PUSH
38991: LD_EXP 5
38995: PUSH
38996: LD_EXP 6
39000: PUSH
39001: LD_EXP 7
39005: PUSH
39006: LD_EXP 8
39010: PUSH
39011: LD_EXP 9
39015: PUSH
39016: LD_EXP 10
39020: PUSH
39021: LD_EXP 15
39025: PUSH
39026: LD_EXP 14
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: DIFF
39045: PPUSH
39046: LD_STRING DCb-Sol1-1
39048: PPUSH
39049: LD_STRING DCb-Sol1-1
39051: PPUSH
39052: CALL 7415 0 3
// Say ( JMM , DCb-JMM-2 ) ;
39056: LD_EXP 1
39060: PPUSH
39061: LD_STRING DCb-JMM-2
39063: PPUSH
39064: CALL_OW 88
// secondAttack = 1 ;
39068: LD_ADDR_EXP 34
39072: PUSH
39073: LD_INT 1
39075: ST_TO_ADDR
// end ;
39076: END
// every 0 0$01 trigger JMMArrive = 1 do
39077: LD_EXP 39
39081: PUSH
39082: LD_INT 1
39084: EQUAL
39085: IFFALSE 39165
39087: GO 39089
39089: DISABLE
// begin wait ( 3 3$0 ) ;
39090: LD_INT 6300
39092: PPUSH
39093: CALL_OW 67
// DialogueOn ;
39097: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
39101: LD_EXP 23
39105: PPUSH
39106: LD_STRING D4-Pow-1
39108: PPUSH
39109: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
39113: LD_EXP 1
39117: PPUSH
39118: LD_STRING D4-JMM-1
39120: PPUSH
39121: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
39125: LD_EXP 23
39129: PPUSH
39130: LD_STRING D4-Pow-2
39132: PPUSH
39133: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
39137: LD_EXP 1
39141: PPUSH
39142: LD_STRING D4-JMM-2
39144: PPUSH
39145: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
39149: LD_EXP 23
39153: PPUSH
39154: LD_STRING D4-Pow-3
39156: PPUSH
39157: CALL_OW 94
// DialogueOff ;
39161: CALL_OW 7
// end ;
39165: END
// every 0 0$01 trigger JMMArrive = 1 do
39166: LD_EXP 39
39170: PUSH
39171: LD_INT 1
39173: EQUAL
39174: IFFALSE 39206
39176: GO 39178
39178: DISABLE
// begin wait ( 8 8$0 ) ;
39179: LD_INT 16800
39181: PPUSH
39182: CALL_OW 67
// DialogueOn ;
39186: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
39190: LD_EXP 23
39194: PPUSH
39195: LD_STRING D4a-Pow-1
39197: PPUSH
39198: CALL_OW 94
// DialogueOff ;
39202: CALL_OW 7
// end ;
39206: END
// every 0 0$01 trigger JMMArrive = 1 do
39207: LD_EXP 39
39211: PUSH
39212: LD_INT 1
39214: EQUAL
39215: IFFALSE 39260
39217: GO 39219
39219: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
39220: LD_INT 21000
39222: PUSH
39223: LD_INT 25200
39225: PUSH
39226: LD_INT 31500
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: LIST
39233: PUSH
39234: LD_OWVAR 67
39238: ARRAY
39239: PPUSH
39240: CALL_OW 67
// PrepareSikorsky ;
39244: CALL 5971 0 0
// SikorskyArrive = 1 ;
39248: LD_ADDR_EXP 18
39252: PUSH
39253: LD_INT 1
39255: ST_TO_ADDR
// PrepareSikorskyArmy ;
39256: CALL 6111 0 0
// end ;
39260: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
39261: LD_EXP 17
39265: PPUSH
39266: LD_INT 5
39268: PPUSH
39269: CALL_OW 308
39273: IFFALSE 39465
39275: GO 39277
39277: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
39278: LD_EXP 17
39282: PPUSH
39283: CALL_OW 87
// DialogueOn ;
39287: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
39291: LD_EXP 16
39295: PPUSH
39296: LD_STRING D5-Sik-1
39298: PPUSH
39299: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
39303: LD_EXP 1
39307: PPUSH
39308: LD_STRING D5-JMM-1a
39310: PPUSH
39311: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
39315: LD_EXP 16
39319: PPUSH
39320: LD_STRING D5-Sik-2
39322: PPUSH
39323: CALL_OW 88
// case query ( QSikorski ) of 1 :
39327: LD_STRING QSikorski
39329: PPUSH
39330: CALL_OW 97
39334: PUSH
39335: LD_INT 1
39337: DOUBLE
39338: EQUAL
39339: IFTRUE 39343
39341: GO 39366
39343: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
39344: LD_EXP 16
39348: PPUSH
39349: LD_STRING D5a-Sik-1
39351: PPUSH
39352: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
39356: LD_ADDR_EXP 19
39360: PUSH
39361: LD_INT 2100
39363: ST_TO_ADDR
// end ; 2 :
39364: GO 39453
39366: LD_INT 2
39368: DOUBLE
39369: EQUAL
39370: IFTRUE 39374
39372: GO 39397
39374: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
39375: LD_EXP 16
39379: PPUSH
39380: LD_STRING D5b-Sik-1
39382: PPUSH
39383: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39387: LD_ADDR_EXP 19
39391: PUSH
39392: LD_INT 10500
39394: ST_TO_ADDR
// end ; 3 :
39395: GO 39453
39397: LD_INT 3
39399: DOUBLE
39400: EQUAL
39401: IFTRUE 39405
39403: GO 39452
39405: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
39406: LD_EXP 16
39410: PPUSH
39411: LD_STRING D5c-Sik-1
39413: PPUSH
39414: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
39418: LD_EXP 1
39422: PPUSH
39423: LD_STRING D5c-JMM-1
39425: PPUSH
39426: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
39430: LD_EXP 16
39434: PPUSH
39435: LD_STRING D5c-Sik-2
39437: PPUSH
39438: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39442: LD_ADDR_EXP 19
39446: PUSH
39447: LD_INT 10500
39449: ST_TO_ADDR
// end ; end ;
39450: GO 39453
39452: POP
// DialogueOff ;
39453: CALL_OW 7
// timerStatus = 1 ;
39457: LD_ADDR_EXP 35
39461: PUSH
39462: LD_INT 1
39464: ST_TO_ADDR
// end ;
39465: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
39466: LD_EXP 19
39470: PUSH
39471: LD_INT 35
39473: LESS
39474: IFFALSE 39522
39476: GO 39478
39478: DISABLE
// begin timerStatus = 0 ;
39479: LD_ADDR_EXP 35
39483: PUSH
39484: LD_INT 0
39486: ST_TO_ADDR
// DialogueOn ;
39487: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
39491: LD_EXP 16
39495: PPUSH
39496: LD_STRING D6-Sik-1
39498: PPUSH
39499: CALL_OW 88
// DialogueOff ;
39503: CALL_OW 7
// SikorskyAI = 1 ;
39507: LD_ADDR_EXP 20
39511: PUSH
39512: LD_INT 1
39514: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
39515: LD_STRING M2
39517: PPUSH
39518: CALL_OW 337
// end ;
39522: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
39523: LD_EXP 17
39527: PPUSH
39528: LD_INT 18
39530: PPUSH
39531: CALL_OW 308
39535: IFFALSE 39619
39537: GO 39539
39539: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
39540: LD_EXP 16
39544: PPUSH
39545: LD_STRING D7-Sik-1
39547: PPUSH
39548: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
39552: LD_EXP 1
39556: PPUSH
39557: LD_INT 24
39559: PPUSH
39560: CALL_OW 308
39564: PUSH
39565: LD_EXP 1
39569: PPUSH
39570: CALL_OW 310
39574: OR
39575: IFFALSE 39599
// begin Say ( Sikorski , D7a-Sik-1 ) ;
39577: LD_EXP 16
39581: PPUSH
39582: LD_STRING D7a-Sik-1
39584: PPUSH
39585: CALL_OW 88
// SikorskyStatus = 1 ;
39589: LD_ADDR_EXP 21
39593: PUSH
39594: LD_INT 1
39596: ST_TO_ADDR
// end else
39597: GO 39619
// begin Say ( Sikorski , D7b-Sik-1 ) ;
39599: LD_EXP 16
39603: PPUSH
39604: LD_STRING D7b-Sik-1
39606: PPUSH
39607: CALL_OW 88
// SikorskyStatus = 2 ;
39611: LD_ADDR_EXP 21
39615: PUSH
39616: LD_INT 2
39618: ST_TO_ADDR
// end ; end ;
39619: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
39620: LD_EXP 36
39624: PUSH
39625: LD_INT 1
39627: EQUAL
39628: IFFALSE 39737
39630: GO 39632
39632: DISABLE
39633: LD_INT 0
39635: PPUSH
// begin enable ;
39636: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
39637: LD_ADDR_VAR 0 1
39641: PUSH
39642: LD_INT 22
39644: PUSH
39645: LD_INT 3
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PPUSH
39652: CALL_OW 69
39656: PUSH
39657: FOR_IN
39658: IFFALSE 39685
// if IsInArea ( i , RussianEscape ) then
39660: LD_VAR 0 1
39664: PPUSH
39665: LD_INT 22
39667: PPUSH
39668: CALL_OW 308
39672: IFFALSE 39683
// RemoveUnit ( i ) ;
39674: LD_VAR 0 1
39678: PPUSH
39679: CALL_OW 64
39683: GO 39657
39685: POP
39686: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
39687: LD_ADDR_VAR 0 1
39691: PUSH
39692: LD_INT 22
39694: PUSH
39695: LD_INT 6
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PPUSH
39702: CALL_OW 69
39706: PUSH
39707: FOR_IN
39708: IFFALSE 39735
// if IsInArea ( i , RussianEscape ) then
39710: LD_VAR 0 1
39714: PPUSH
39715: LD_INT 22
39717: PPUSH
39718: CALL_OW 308
39722: IFFALSE 39733
// RemoveUnit ( i ) ;
39724: LD_VAR 0 1
39728: PPUSH
39729: CALL_OW 64
39733: GO 39707
39735: POP
39736: POP
// end ; end_of_file
39737: PPOPN 1
39739: END
// on BuildingComplete ( building ) do var tmp , un ;
39740: LD_INT 0
39742: PPUSH
39743: PPUSH
// begin if GetSide ( building ) = 3 then
39744: LD_VAR 0 1
39748: PPUSH
39749: CALL_OW 255
39753: PUSH
39754: LD_INT 3
39756: EQUAL
39757: IFFALSE 40244
// begin if GetBType ( building ) = b_depot then
39759: LD_VAR 0 1
39763: PPUSH
39764: CALL_OW 266
39768: PUSH
39769: LD_INT 0
39771: EQUAL
39772: IFFALSE 39840
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
39774: LD_VAR 0 1
39778: PPUSH
39779: CALL_OW 274
39783: PPUSH
39784: LD_INT 1
39786: PPUSH
39787: LD_INT 5000
39789: PPUSH
39790: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
39794: LD_VAR 0 1
39798: PPUSH
39799: CALL_OW 274
39803: PPUSH
39804: LD_INT 2
39806: PPUSH
39807: LD_INT 5000
39809: PPUSH
39810: CALL_OW 277
// SetBName ( building , konev ) ;
39814: LD_VAR 0 1
39818: PPUSH
39819: LD_STRING konev
39821: PPUSH
39822: CALL_OW 500
// ruDepot = building ;
39826: LD_ADDR_EXP 28
39830: PUSH
39831: LD_VAR 0 1
39835: ST_TO_ADDR
// BuildRussianBase ;
39836: CALL 8020 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
39840: LD_VAR 0 1
39844: PPUSH
39845: CALL_OW 266
39849: PUSH
39850: LD_INT 0
39852: EQUAL
39853: PUSH
39854: LD_VAR 0 1
39858: PPUSH
39859: CALL_OW 266
39863: PUSH
39864: LD_INT 2
39866: EQUAL
39867: OR
39868: PUSH
39869: LD_VAR 0 1
39873: PPUSH
39874: CALL_OW 266
39878: PUSH
39879: LD_INT 4
39881: EQUAL
39882: OR
39883: IFFALSE 39894
// ComUpgrade ( building ) ;
39885: LD_VAR 0 1
39889: PPUSH
39890: CALL_OW 146
// if GetBType ( building ) = b_lab then
39894: LD_VAR 0 1
39898: PPUSH
39899: CALL_OW 266
39903: PUSH
39904: LD_INT 6
39906: EQUAL
39907: IFFALSE 39958
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
39909: LD_VAR 0 1
39913: PPUSH
39914: LD_INT 10
39916: PPUSH
39917: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
39921: LD_VAR 0 1
39925: PPUSH
39926: LD_INT 12
39928: PPUSH
39929: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
39933: LD_INT 3
39935: PPUSH
39936: LD_VAR 0 1
39940: PPUSH
39941: LD_INT 3
39943: PPUSH
39944: CALL 8575 0 3
// ruLab = building ;
39948: LD_ADDR_EXP 29
39952: PUSH
39953: LD_VAR 0 1
39957: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
39958: LD_VAR 0 1
39962: PPUSH
39963: CALL_OW 266
39967: PUSH
39968: LD_INT 32
39970: EQUAL
39971: IFFALSE 40089
// begin uc_side = 3 ;
39973: LD_ADDR_OWVAR 20
39977: PUSH
39978: LD_INT 3
39980: ST_TO_ADDR
// uc_nation = 3 ;
39981: LD_ADDR_OWVAR 21
39985: PUSH
39986: LD_INT 3
39988: ST_TO_ADDR
// hc_gallery =  ;
39989: LD_ADDR_OWVAR 33
39993: PUSH
39994: LD_STRING 
39996: ST_TO_ADDR
// hc_name =  ;
39997: LD_ADDR_OWVAR 26
40001: PUSH
40002: LD_STRING 
40004: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
40005: LD_INT 0
40007: PPUSH
40008: LD_INT 1
40010: PPUSH
40011: LD_EXP 25
40015: PPUSH
40016: LD_EXP 26
40020: PPUSH
40021: CALL_OW 12
40025: PPUSH
40026: CALL_OW 380
// un = CreateHuman ;
40030: LD_ADDR_VAR 0 3
40034: PUSH
40035: CALL_OW 44
40039: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
40040: LD_VAR 0 3
40044: PPUSH
40045: LD_VAR 0 1
40049: PPUSH
40050: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40054: LD_VAR 0 1
40058: PPUSH
40059: LD_INT 43
40061: PUSH
40062: LD_INT 44
40064: PUSH
40065: LD_INT 46
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: PPUSH
40076: LD_INT 3
40078: PPUSH
40079: CALL_OW 12
40083: ARRAY
40084: PPUSH
40085: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
40089: LD_VAR 0 1
40093: PPUSH
40094: CALL_OW 266
40098: PUSH
40099: LD_INT 33
40101: EQUAL
40102: IFFALSE 40139
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40104: LD_VAR 0 1
40108: PPUSH
40109: LD_INT 43
40111: PUSH
40112: LD_INT 44
40114: PUSH
40115: LD_INT 46
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 1
40125: PPUSH
40126: LD_INT 3
40128: PPUSH
40129: CALL_OW 12
40133: ARRAY
40134: PPUSH
40135: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
40139: LD_VAR 0 1
40143: PPUSH
40144: CALL_OW 266
40148: PUSH
40149: LD_INT 24
40151: EQUAL
40152: IFFALSE 40162
// russianAI = 1 ;
40154: LD_ADDR_EXP 27
40158: PUSH
40159: LD_INT 1
40161: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
40162: LD_EXP 31
40166: PUSH
40167: LD_INT 0
40169: GREATER
40170: IFFALSE 40244
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40172: LD_ADDR_EXP 31
40176: PUSH
40177: LD_EXP 31
40181: PPUSH
40182: LD_INT 1
40184: PPUSH
40185: CALL_OW 3
40189: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40190: LD_ADDR_EXP 31
40194: PUSH
40195: LD_EXP 31
40199: PPUSH
40200: LD_INT 1
40202: PPUSH
40203: CALL_OW 3
40207: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40208: LD_ADDR_EXP 31
40212: PUSH
40213: LD_EXP 31
40217: PPUSH
40218: LD_INT 1
40220: PPUSH
40221: CALL_OW 3
40225: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40226: LD_ADDR_EXP 31
40230: PUSH
40231: LD_EXP 31
40235: PPUSH
40236: LD_INT 1
40238: PPUSH
40239: CALL_OW 3
40243: ST_TO_ADDR
// end ; end ; end ;
40244: PPOPN 3
40246: END
// on UpgradeComplete ( building ) do var i ;
40247: LD_INT 0
40249: PPUSH
// begin if GetSide ( building ) = 3 then
40250: LD_VAR 0 1
40254: PPUSH
40255: CALL_OW 255
40259: PUSH
40260: LD_INT 3
40262: EQUAL
40263: IFFALSE 40444
// begin if GetBType ( building ) = b_factory then
40265: LD_VAR 0 1
40269: PPUSH
40270: CALL_OW 266
40274: PUSH
40275: LD_INT 3
40277: EQUAL
40278: IFFALSE 40345
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
40280: LD_ADDR_VAR 0 2
40284: PUSH
40285: LD_INT 22
40287: PUSH
40288: LD_INT 3
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 25
40297: PUSH
40298: LD_INT 3
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PPUSH
40309: CALL_OW 69
40313: PUSH
40314: FOR_IN
40315: IFFALSE 40333
// ComEnterUnit ( i , building ) ;
40317: LD_VAR 0 2
40321: PPUSH
40322: LD_VAR 0 1
40326: PPUSH
40327: CALL_OW 120
40331: GO 40314
40333: POP
40334: POP
// ruFab = building ;
40335: LD_ADDR_EXP 30
40339: PUSH
40340: LD_VAR 0 1
40344: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
40345: LD_VAR 0 1
40349: PPUSH
40350: CALL_OW 266
40354: PUSH
40355: LD_INT 8
40357: EQUAL
40358: IFFALSE 40415
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
40360: LD_ADDR_VAR 0 2
40364: PUSH
40365: LD_INT 22
40367: PUSH
40368: LD_INT 3
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 25
40377: PUSH
40378: LD_INT 4
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PPUSH
40389: CALL_OW 69
40393: PUSH
40394: FOR_IN
40395: IFFALSE 40413
// ComEnterUnit ( i , building ) ;
40397: LD_VAR 0 2
40401: PPUSH
40402: LD_VAR 0 1
40406: PPUSH
40407: CALL_OW 120
40411: GO 40394
40413: POP
40414: POP
// if GetBType ( building ) = b_warehouse then
40415: LD_VAR 0 1
40419: PPUSH
40420: CALL_OW 266
40424: PUSH
40425: LD_INT 1
40427: EQUAL
40428: IFFALSE 40444
// begin ComEnterUnit ( Borodin , building ) ;
40430: LD_EXP 24
40434: PPUSH
40435: LD_VAR 0 1
40439: PPUSH
40440: CALL_OW 120
// end ; end ; end ;
40444: PPOPN 2
40446: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
40447: LD_VAR 0 1
40451: PPUSH
40452: CALL_OW 247
40456: PUSH
40457: LD_INT 2
40459: EQUAL
40460: PUSH
40461: LD_VAR 0 1
40465: PPUSH
40466: CALL_OW 263
40470: PUSH
40471: LD_INT 3
40473: EQUAL
40474: AND
40475: PUSH
40476: LD_EXP 41
40480: PUSH
40481: LD_INT 0
40483: EQUAL
40484: AND
40485: IFFALSE 40603
// begin varEvent1 = 1 ;
40487: LD_ADDR_EXP 41
40491: PUSH
40492: LD_INT 1
40494: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
40495: LD_VAR 0 1
40499: PPUSH
40500: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
40504: LD_INT 22
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 21
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: LD_INT 25
40529: PUSH
40530: LD_INT 1
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 25
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 25
40549: PUSH
40550: LD_INT 3
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 25
40559: PUSH
40560: LD_INT 4
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: LIST
40578: PPUSH
40579: CALL_OW 69
40583: PUSH
40584: LD_EXP 1
40588: PUSH
40589: EMPTY
40590: LIST
40591: DIFF
40592: PPUSH
40593: LD_STRING DC-Sol1-1
40595: PPUSH
40596: LD_STRING DC-FSol1-1
40598: PPUSH
40599: CALL 7415 0 3
// end ; end ;
40603: PPOPN 1
40605: END
// on UnitDestroyed ( unit ) do var i ;
40606: LD_INT 0
40608: PPUSH
// begin if GetSide ( unit ) = 3 then
40609: LD_VAR 0 1
40613: PPUSH
40614: CALL_OW 255
40618: PUSH
40619: LD_INT 3
40621: EQUAL
40622: IFFALSE 41392
// begin if GetType ( unit ) = unit_building then
40624: LD_VAR 0 1
40628: PPUSH
40629: CALL_OW 247
40633: PUSH
40634: LD_INT 3
40636: EQUAL
40637: IFFALSE 41329
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
40639: LD_VAR 0 1
40643: PPUSH
40644: CALL_OW 266
40648: PUSH
40649: LD_INT 31
40651: EQUAL
40652: PUSH
40653: LD_VAR 0 1
40657: PPUSH
40658: CALL_OW 266
40662: PUSH
40663: LD_INT 32
40665: EQUAL
40666: OR
40667: PUSH
40668: LD_VAR 0 1
40672: PPUSH
40673: CALL_OW 266
40677: PUSH
40678: LD_INT 36
40680: EQUAL
40681: OR
40682: PUSH
40683: LD_VAR 0 1
40687: PPUSH
40688: CALL_OW 266
40692: PUSH
40693: LD_INT 0
40695: EQUAL
40696: OR
40697: PUSH
40698: LD_VAR 0 1
40702: PPUSH
40703: CALL_OW 266
40707: PUSH
40708: LD_INT 24
40710: EQUAL
40711: OR
40712: PUSH
40713: LD_VAR 0 1
40717: PPUSH
40718: CALL_OW 266
40722: PUSH
40723: LD_INT 17
40725: EQUAL
40726: OR
40727: PUSH
40728: LD_VAR 0 1
40732: PPUSH
40733: CALL_OW 266
40737: PUSH
40738: LD_INT 25
40740: EQUAL
40741: OR
40742: PUSH
40743: LD_VAR 0 1
40747: PPUSH
40748: CALL_OW 266
40752: PUSH
40753: LD_INT 19
40755: EQUAL
40756: OR
40757: PUSH
40758: LD_VAR 0 1
40762: PPUSH
40763: CALL_OW 266
40767: PUSH
40768: LD_INT 20
40770: EQUAL
40771: OR
40772: PUSH
40773: LD_VAR 0 1
40777: PPUSH
40778: CALL_OW 266
40782: PUSH
40783: LD_INT 18
40785: EQUAL
40786: OR
40787: PUSH
40788: LD_VAR 0 1
40792: PPUSH
40793: CALL_OW 266
40797: PUSH
40798: LD_INT 21
40800: EQUAL
40801: OR
40802: PUSH
40803: LD_VAR 0 1
40807: PPUSH
40808: CALL_OW 266
40812: PUSH
40813: LD_INT 23
40815: EQUAL
40816: OR
40817: PUSH
40818: LD_VAR 0 1
40822: PPUSH
40823: CALL_OW 266
40827: PUSH
40828: LD_INT 16
40830: EQUAL
40831: OR
40832: PUSH
40833: LD_VAR 0 1
40837: PPUSH
40838: CALL_OW 266
40842: PUSH
40843: LD_INT 6
40845: EQUAL
40846: OR
40847: PUSH
40848: LD_VAR 0 1
40852: PPUSH
40853: CALL_OW 266
40857: PUSH
40858: LD_INT 29
40860: EQUAL
40861: OR
40862: PUSH
40863: LD_VAR 0 1
40867: PPUSH
40868: CALL_OW 266
40872: PUSH
40873: LD_INT 26
40875: EQUAL
40876: OR
40877: PUSH
40878: LD_VAR 0 1
40882: PPUSH
40883: CALL_OW 266
40887: PUSH
40888: LD_INT 30
40890: EQUAL
40891: OR
40892: PUSH
40893: LD_VAR 0 1
40897: PPUSH
40898: CALL_OW 266
40902: PUSH
40903: LD_INT 28
40905: EQUAL
40906: OR
40907: PUSH
40908: LD_VAR 0 1
40912: PPUSH
40913: CALL_OW 266
40917: PUSH
40918: LD_INT 27
40920: EQUAL
40921: OR
40922: PUSH
40923: LD_VAR 0 1
40927: PPUSH
40928: CALL_OW 266
40932: PUSH
40933: LD_INT 33
40935: EQUAL
40936: OR
40937: PUSH
40938: LD_VAR 0 1
40942: PPUSH
40943: CALL_OW 266
40947: PUSH
40948: LD_INT 2
40950: EQUAL
40951: OR
40952: PUSH
40953: LD_VAR 0 1
40957: PPUSH
40958: CALL_OW 266
40962: PUSH
40963: LD_INT 4
40965: EQUAL
40966: OR
40967: IFFALSE 41053
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
40969: LD_ADDR_EXP 31
40973: PUSH
40974: LD_EXP 31
40978: PUSH
40979: LD_VAR 0 1
40983: PPUSH
40984: CALL_OW 266
40988: ADD
40989: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
40990: LD_ADDR_EXP 31
40994: PUSH
40995: LD_EXP 31
40999: PUSH
41000: LD_VAR 0 1
41004: PPUSH
41005: CALL_OW 250
41009: ADD
41010: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41011: LD_ADDR_EXP 31
41015: PUSH
41016: LD_EXP 31
41020: PUSH
41021: LD_VAR 0 1
41025: PPUSH
41026: CALL_OW 251
41030: ADD
41031: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41032: LD_ADDR_EXP 31
41036: PUSH
41037: LD_EXP 31
41041: PUSH
41042: LD_VAR 0 1
41046: PPUSH
41047: CALL_OW 254
41051: ADD
41052: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
41053: LD_VAR 0 1
41057: PPUSH
41058: CALL_OW 266
41062: PUSH
41063: LD_INT 1
41065: EQUAL
41066: IFFALSE 41145
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
41068: LD_ADDR_EXP 31
41072: PUSH
41073: LD_EXP 31
41077: PUSH
41078: LD_INT 0
41080: ADD
41081: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41082: LD_ADDR_EXP 31
41086: PUSH
41087: LD_EXP 31
41091: PUSH
41092: LD_VAR 0 1
41096: PPUSH
41097: CALL_OW 250
41101: ADD
41102: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41103: LD_ADDR_EXP 31
41107: PUSH
41108: LD_EXP 31
41112: PUSH
41113: LD_VAR 0 1
41117: PPUSH
41118: CALL_OW 251
41122: ADD
41123: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41124: LD_ADDR_EXP 31
41128: PUSH
41129: LD_EXP 31
41133: PUSH
41134: LD_VAR 0 1
41138: PPUSH
41139: CALL_OW 254
41143: ADD
41144: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
41145: LD_VAR 0 1
41149: PPUSH
41150: CALL_OW 266
41154: PUSH
41155: LD_INT 3
41157: EQUAL
41158: IFFALSE 41237
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
41160: LD_ADDR_EXP 31
41164: PUSH
41165: LD_EXP 31
41169: PUSH
41170: LD_INT 2
41172: ADD
41173: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41174: LD_ADDR_EXP 31
41178: PUSH
41179: LD_EXP 31
41183: PUSH
41184: LD_VAR 0 1
41188: PPUSH
41189: CALL_OW 250
41193: ADD
41194: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41195: LD_ADDR_EXP 31
41199: PUSH
41200: LD_EXP 31
41204: PUSH
41205: LD_VAR 0 1
41209: PPUSH
41210: CALL_OW 251
41214: ADD
41215: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41216: LD_ADDR_EXP 31
41220: PUSH
41221: LD_EXP 31
41225: PUSH
41226: LD_VAR 0 1
41230: PPUSH
41231: CALL_OW 254
41235: ADD
41236: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
41237: LD_VAR 0 1
41241: PPUSH
41242: CALL_OW 266
41246: PUSH
41247: LD_INT 5
41249: EQUAL
41250: IFFALSE 41329
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
41252: LD_ADDR_EXP 31
41256: PUSH
41257: LD_EXP 31
41261: PUSH
41262: LD_INT 4
41264: ADD
41265: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41266: LD_ADDR_EXP 31
41270: PUSH
41271: LD_EXP 31
41275: PUSH
41276: LD_VAR 0 1
41280: PPUSH
41281: CALL_OW 250
41285: ADD
41286: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41287: LD_ADDR_EXP 31
41291: PUSH
41292: LD_EXP 31
41296: PUSH
41297: LD_VAR 0 1
41301: PPUSH
41302: CALL_OW 251
41306: ADD
41307: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41308: LD_ADDR_EXP 31
41312: PUSH
41313: LD_EXP 31
41317: PUSH
41318: LD_VAR 0 1
41322: PPUSH
41323: CALL_OW 254
41327: ADD
41328: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
41329: LD_VAR 0 1
41333: PPUSH
41334: CALL_OW 247
41338: PUSH
41339: LD_INT 1
41341: EQUAL
41342: IFFALSE 41392
// begin for i in defenders_list do
41344: LD_ADDR_VAR 0 2
41348: PUSH
41349: LD_EXP 32
41353: PUSH
41354: FOR_IN
41355: IFFALSE 41390
// if i = unit then
41357: LD_VAR 0 2
41361: PUSH
41362: LD_VAR 0 1
41366: EQUAL
41367: IFFALSE 41388
// defenders_list = defenders_list diff [ unit ] ;
41369: LD_ADDR_EXP 32
41373: PUSH
41374: LD_EXP 32
41378: PUSH
41379: LD_VAR 0 1
41383: PUSH
41384: EMPTY
41385: LIST
41386: DIFF
41387: ST_TO_ADDR
41388: GO 41354
41390: POP
41391: POP
// end ; end ; end ; end_of_file
41392: PPOPN 2
41394: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
41395: GO 41397
41397: DISABLE
41398: LD_INT 0
41400: PPUSH
// begin enemyWayX = [ ] ;
41401: LD_ADDR_EXP 45
41405: PUSH
41406: EMPTY
41407: ST_TO_ADDR
// enemyWayY = [ ] ;
41408: LD_ADDR_EXP 46
41412: PUSH
41413: EMPTY
41414: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
41415: LD_ADDR_VAR 0 1
41419: PUSH
41420: LD_INT 1
41422: PPUSH
41423: LD_INT 3
41425: PPUSH
41426: CALL_OW 12
41430: ST_TO_ADDR
// if rnd = 1 then
41431: LD_VAR 0 1
41435: PUSH
41436: LD_INT 1
41438: EQUAL
41439: IFFALSE 41479
// begin enemyWayX = [ 73 , 46 , 29 ] ;
41441: LD_ADDR_EXP 45
41445: PUSH
41446: LD_INT 73
41448: PUSH
41449: LD_INT 46
41451: PUSH
41452: LD_INT 29
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: LIST
41459: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
41460: LD_ADDR_EXP 46
41464: PUSH
41465: LD_INT 71
41467: PUSH
41468: LD_INT 43
41470: PUSH
41471: LD_INT 29
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: LIST
41478: ST_TO_ADDR
// end ; if rnd = 2 then
41479: LD_VAR 0 1
41483: PUSH
41484: LD_INT 2
41486: EQUAL
41487: IFFALSE 41511
// begin enemyWayX = [ 64 ] ;
41489: LD_ADDR_EXP 45
41493: PUSH
41494: LD_INT 64
41496: PUSH
41497: EMPTY
41498: LIST
41499: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
41500: LD_ADDR_EXP 46
41504: PUSH
41505: LD_INT 43
41507: PUSH
41508: EMPTY
41509: LIST
41510: ST_TO_ADDR
// end ; if rnd = 3 then
41511: LD_VAR 0 1
41515: PUSH
41516: LD_INT 3
41518: EQUAL
41519: IFFALSE 41543
// begin enemyWayX = [ 80 ] ;
41521: LD_ADDR_EXP 45
41525: PUSH
41526: LD_INT 80
41528: PUSH
41529: EMPTY
41530: LIST
41531: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
41532: LD_ADDR_EXP 46
41536: PUSH
41537: LD_INT 28
41539: PUSH
41540: EMPTY
41541: LIST
41542: ST_TO_ADDR
// end ; enable ;
41543: ENABLE
// end ;
41544: PPOPN 1
41546: END
// every 0 0$1 do
41547: GO 41549
41549: DISABLE
// begin enable ;
41550: ENABLE
// if escapeAvalaible = 0 then
41551: LD_EXP 36
41555: PUSH
41556: LD_INT 0
41558: EQUAL
41559: IFFALSE 41571
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
41561: LD_INT 3
41563: PPUSH
41564: LD_INT 6
41566: PPUSH
41567: CALL 8816 0 2
// if escapeAvalaible = 0 then
41571: LD_EXP 36
41575: PUSH
41576: LD_INT 0
41578: EQUAL
41579: IFFALSE 41591
// DefenseBase ( 1 , RussianBaseTerritory ) ;
41581: LD_INT 1
41583: PPUSH
41584: LD_INT 24
41586: PPUSH
41587: CALL 9476 0 2
// if russianAI = 1 then
41591: LD_EXP 27
41595: PUSH
41596: LD_INT 1
41598: EQUAL
41599: IFFALSE 41669
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
41601: LD_INT 3
41603: PPUSH
41604: LD_INT 7
41606: PPUSH
41607: LD_INT 6
41609: PPUSH
41610: LD_EXP 29
41614: PPUSH
41615: CALL 11565 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
41619: LD_INT 3
41621: PPUSH
41622: LD_EXP 28
41626: PPUSH
41627: LD_INT 6
41629: PPUSH
41630: LD_EXP 31
41634: PPUSH
41635: CALL 11159 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
41639: LD_INT 3
41641: PPUSH
41642: LD_INT 26
41644: PPUSH
41645: LD_EXP 45
41649: PPUSH
41650: LD_EXP 46
41654: PPUSH
41655: CALL 10027 0 4
// AttackNearBuildings ( 3 , 1 ) ;
41659: LD_INT 3
41661: PPUSH
41662: LD_INT 1
41664: PPUSH
41665: CALL 12109 0 2
// end ; if SikorskyArrive = 1 then
41669: LD_EXP 18
41673: PUSH
41674: LD_INT 1
41676: EQUAL
41677: IFFALSE 41695
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
41679: LD_INT 3
41681: PPUSH
41682: LD_INT 10
41684: PPUSH
41685: LD_INT 53
41687: PPUSH
41688: LD_INT 59
41690: PPUSH
41691: CALL 9824 0 4
// end ;
41695: END
// every 0 0$1 trigger russianAI = 1 do var i ;
41696: LD_EXP 27
41700: PUSH
41701: LD_INT 1
41703: EQUAL
41704: IFFALSE 41980
41706: GO 41708
41708: DISABLE
41709: LD_INT 0
41711: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41712: LD_ADDR_VAR 0 1
41716: PUSH
41717: LD_INT 22
41719: PUSH
41720: LD_INT 3
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 21
41729: PUSH
41730: LD_INT 3
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 30
41739: PUSH
41740: LD_INT 32
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 3
41749: PUSH
41750: LD_INT 2
41752: PUSH
41753: LD_INT 35
41755: PUSH
41756: LD_INT 43
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 35
41765: PUSH
41766: LD_INT 44
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 35
41775: PUSH
41776: LD_INT 46
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: PPUSH
41799: CALL_OW 69
41803: PUSH
41804: FOR_IN
41805: IFFALSE 41844
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41807: LD_VAR 0 1
41811: PPUSH
41812: LD_INT 43
41814: PUSH
41815: LD_INT 44
41817: PUSH
41818: LD_INT 46
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: PPUSH
41829: LD_INT 3
41831: PPUSH
41832: CALL_OW 12
41836: ARRAY
41837: PPUSH
41838: CALL_OW 431
41842: GO 41804
41844: POP
41845: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41846: LD_ADDR_VAR 0 1
41850: PUSH
41851: LD_INT 22
41853: PUSH
41854: LD_INT 3
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 21
41863: PUSH
41864: LD_INT 3
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 30
41873: PUSH
41874: LD_INT 33
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 3
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: LD_INT 35
41889: PUSH
41890: LD_INT 43
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 35
41899: PUSH
41900: LD_INT 44
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 35
41909: PUSH
41910: LD_INT 46
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: PPUSH
41933: CALL_OW 69
41937: PUSH
41938: FOR_IN
41939: IFFALSE 41978
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41941: LD_VAR 0 1
41945: PPUSH
41946: LD_INT 43
41948: PUSH
41949: LD_INT 44
41951: PUSH
41952: LD_INT 46
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 1
41962: PPUSH
41963: LD_INT 3
41965: PPUSH
41966: CALL_OW 12
41970: ARRAY
41971: PPUSH
41972: CALL_OW 431
41976: GO 41938
41978: POP
41979: POP
// end ;
41980: PPOPN 1
41982: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
41983: LD_EXP 24
41987: PPUSH
41988: CALL_OW 310
41992: NOT
41993: PUSH
41994: LD_EXP 28
41998: PPUSH
41999: CALL_OW 302
42003: AND
42004: PUSH
42005: LD_EXP 28
42009: PPUSH
42010: CALL_OW 255
42014: PUSH
42015: LD_INT 3
42017: EQUAL
42018: AND
42019: IFFALSE 42039
42021: GO 42023
42023: DISABLE
// begin enable ;
42024: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
42025: LD_EXP 24
42029: PPUSH
42030: LD_EXP 28
42034: PPUSH
42035: CALL_OW 120
// end ;
42039: END
// every 0 0$1 trigger SikorskyAI = 1 do
42040: LD_EXP 20
42044: PUSH
42045: LD_INT 1
42047: EQUAL
42048: IFFALSE 42083
42050: GO 42052
42052: DISABLE
// begin enable ;
42053: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
42054: LD_INT 4
42056: PPUSH
42057: LD_INT 10
42059: PPUSH
42060: LD_INT 93
42062: PPUSH
42063: LD_INT 93
42065: PPUSH
42066: CALL 9824 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
42070: LD_INT 4
42072: PPUSH
42073: LD_INT 11
42075: PPUSH
42076: LD_INT 3
42078: PPUSH
42079: CALL 16321 0 3
// end ;
42083: END
// every 0 0$1 trigger SikorskyAI = 1 do
42084: LD_EXP 20
42088: PUSH
42089: LD_INT 1
42091: EQUAL
42092: IFFALSE 42104
42094: GO 42096
42096: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
42097: LD_INT 4
42099: PPUSH
42100: CALL 10831 0 1
42104: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
42105: LD_EXP 27
42109: PUSH
42110: LD_INT 1
42112: EQUAL
42113: PUSH
42114: LD_EXP 30
42118: PPUSH
42119: CALL_OW 302
42123: AND
42124: PUSH
42125: LD_EXP 30
42129: PPUSH
42130: CALL_OW 255
42134: PUSH
42135: LD_INT 3
42137: EQUAL
42138: AND
42139: PUSH
42140: LD_INT 22
42142: PUSH
42143: LD_INT 3
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 21
42152: PUSH
42153: LD_INT 2
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 33
42162: PUSH
42163: LD_INT 3
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: LIST
42174: PPUSH
42175: CALL_OW 69
42179: PUSH
42180: LD_INT 0
42182: EQUAL
42183: AND
42184: IFFALSE 42418
42186: GO 42188
42188: DISABLE
// begin enable ;
42189: ENABLE
// if Difficulty = 1 then
42190: LD_OWVAR 67
42194: PUSH
42195: LD_INT 1
42197: EQUAL
42198: IFFALSE 42266
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
42200: LD_INT 3
42202: PPUSH
42203: LD_EXP 30
42207: PPUSH
42208: LD_INT 5
42210: PPUSH
42211: LD_INT 8
42213: PPUSH
42214: CALL_OW 12
42218: PPUSH
42219: LD_INT 43
42221: PUSH
42222: LD_INT 43
42224: PUSH
42225: LD_INT 43
42227: PUSH
42228: LD_INT 43
42230: PUSH
42231: LD_INT 44
42233: PUSH
42234: LD_INT 44
42236: PUSH
42237: LD_INT 44
42239: PUSH
42240: LD_INT 46
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: PPUSH
42253: LD_INT 1
42255: PPUSH
42256: LD_INT 3
42258: PPUSH
42259: LD_INT 24
42261: PPUSH
42262: CALL 9670 0 7
// if Difficulty = 2 then
42266: LD_OWVAR 67
42270: PUSH
42271: LD_INT 2
42273: EQUAL
42274: IFFALSE 42342
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
42276: LD_INT 3
42278: PPUSH
42279: LD_EXP 30
42283: PPUSH
42284: LD_INT 6
42286: PPUSH
42287: LD_INT 8
42289: PPUSH
42290: CALL_OW 12
42294: PPUSH
42295: LD_INT 43
42297: PUSH
42298: LD_INT 43
42300: PUSH
42301: LD_INT 44
42303: PUSH
42304: LD_INT 44
42306: PUSH
42307: LD_INT 44
42309: PUSH
42310: LD_INT 44
42312: PUSH
42313: LD_INT 46
42315: PUSH
42316: LD_INT 46
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: PPUSH
42329: LD_INT 1
42331: PPUSH
42332: LD_INT 3
42334: PPUSH
42335: LD_INT 24
42337: PPUSH
42338: CALL 9670 0 7
// if Difficulty = 3 then
42342: LD_OWVAR 67
42346: PUSH
42347: LD_INT 3
42349: EQUAL
42350: IFFALSE 42418
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
42352: LD_INT 3
42354: PPUSH
42355: LD_EXP 30
42359: PPUSH
42360: LD_INT 7
42362: PPUSH
42363: LD_INT 8
42365: PPUSH
42366: CALL_OW 12
42370: PPUSH
42371: LD_INT 43
42373: PUSH
42374: LD_INT 43
42376: PUSH
42377: LD_INT 44
42379: PUSH
42380: LD_INT 44
42382: PUSH
42383: LD_INT 44
42385: PUSH
42386: LD_INT 46
42388: PUSH
42389: LD_INT 46
42391: PUSH
42392: LD_INT 46
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: PPUSH
42405: LD_INT 1
42407: PPUSH
42408: LD_INT 3
42410: PPUSH
42411: LD_INT 24
42413: PPUSH
42414: CALL 9670 0 7
// end ;
42418: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
42419: LD_EXP 38
42423: PUSH
42424: LD_INT 1
42426: EQUAL
42427: IFFALSE 42509
42429: GO 42431
42431: DISABLE
42432: LD_INT 0
42434: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
42435: LD_ADDR_VAR 0 1
42439: PUSH
42440: LD_INT 22
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 21
42452: PUSH
42453: LD_INT 1
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 3
42462: PUSH
42463: LD_INT 24
42465: PUSH
42466: LD_INT 650
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: LIST
42481: PPUSH
42482: CALL_OW 69
42486: PUSH
42487: FOR_IN
42488: IFFALSE 42507
// ComMoveXY ( i , 51 , 12 ) ;
42490: LD_VAR 0 1
42494: PPUSH
42495: LD_INT 51
42497: PPUSH
42498: LD_INT 12
42500: PPUSH
42501: CALL_OW 111
42505: GO 42487
42507: POP
42508: POP
// end ; end_of_file
42509: PPOPN 1
42511: END
// every 3 3$20 trigger firstAttack = 1 do
42512: LD_EXP 33
42516: PUSH
42517: LD_INT 1
42519: EQUAL
42520: IFFALSE 42626
42522: GO 42524
42524: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42525: LD_INT 6
42527: PPUSH
42528: LD_INT 3
42530: PPUSH
42531: LD_INT 5
42533: PPUSH
42534: LD_INT 6
42536: PPUSH
42537: CALL_OW 12
42541: PUSH
42542: LD_INT 5
42544: PPUSH
42545: LD_INT 6
42547: PPUSH
42548: CALL_OW 12
42552: PUSH
42553: LD_INT 5
42555: PPUSH
42556: LD_INT 6
42558: PPUSH
42559: CALL_OW 12
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: LIST
42568: PUSH
42569: LD_OWVAR 67
42573: ARRAY
42574: PPUSH
42575: LD_INT 0
42577: PPUSH
42578: LD_INT 0
42580: PPUSH
42581: LD_INT 0
42583: PPUSH
42584: LD_INT 0
42586: PPUSH
42587: LD_EXP 25
42591: PPUSH
42592: LD_EXP 26
42596: PPUSH
42597: CALL_OW 12
42601: PPUSH
42602: LD_INT 16
42604: PPUSH
42605: LD_INT 7
42607: PPUSH
42608: LD_INT 1
42610: PPUSH
42611: LD_INT 1
42613: PPUSH
42614: LD_INT 3
42616: PPUSH
42617: CALL_OW 12
42621: PPUSH
42622: CALL 12339 0 12
42626: END
// every 3 3$40 trigger firstAttack = 1 do
42627: LD_EXP 33
42631: PUSH
42632: LD_INT 1
42634: EQUAL
42635: IFFALSE 42727
42637: GO 42639
42639: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42640: LD_INT 16
42642: PPUSH
42643: LD_INT 6
42645: PPUSH
42646: LD_INT 3
42648: PPUSH
42649: LD_INT 4
42651: PPUSH
42652: CALL_OW 12
42656: PUSH
42657: LD_INT 4
42659: PPUSH
42660: LD_INT 5
42662: PPUSH
42663: CALL_OW 12
42667: PUSH
42668: LD_INT 5
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: LIST
42675: PUSH
42676: LD_OWVAR 67
42680: ARRAY
42681: PPUSH
42682: LD_EXP 25
42686: PPUSH
42687: LD_EXP 26
42691: PPUSH
42692: CALL_OW 12
42696: PPUSH
42697: LD_INT 3
42699: PPUSH
42700: LD_INT 1
42702: PPUSH
42703: LD_INT 3
42705: PPUSH
42706: LD_INT 44
42708: PUSH
42709: LD_INT 46
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PPUSH
42716: EMPTY
42717: PPUSH
42718: EMPTY
42719: PPUSH
42720: LD_INT 1
42722: PPUSH
42723: CALL 14632 0 11
42727: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
42728: LD_EXP 33
42732: PUSH
42733: LD_INT 1
42735: EQUAL
42736: PUSH
42737: LD_EXP 39
42741: PUSH
42742: LD_INT 0
42744: EQUAL
42745: AND
42746: IFFALSE 42852
42748: GO 42750
42750: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42751: LD_INT 6
42753: PPUSH
42754: LD_INT 3
42756: PPUSH
42757: LD_INT 5
42759: PPUSH
42760: LD_INT 6
42762: PPUSH
42763: CALL_OW 12
42767: PUSH
42768: LD_INT 5
42770: PPUSH
42771: LD_INT 6
42773: PPUSH
42774: CALL_OW 12
42778: PUSH
42779: LD_INT 5
42781: PPUSH
42782: LD_INT 6
42784: PPUSH
42785: CALL_OW 12
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: LIST
42794: PUSH
42795: LD_OWVAR 67
42799: ARRAY
42800: PPUSH
42801: LD_INT 0
42803: PPUSH
42804: LD_INT 0
42806: PPUSH
42807: LD_INT 0
42809: PPUSH
42810: LD_INT 0
42812: PPUSH
42813: LD_EXP 25
42817: PPUSH
42818: LD_EXP 26
42822: PPUSH
42823: CALL_OW 12
42827: PPUSH
42828: LD_INT 16
42830: PPUSH
42831: LD_INT 7
42833: PPUSH
42834: LD_INT 1
42836: PPUSH
42837: LD_INT 1
42839: PPUSH
42840: LD_INT 3
42842: PPUSH
42843: CALL_OW 12
42847: PPUSH
42848: CALL 12339 0 12
42852: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
42853: LD_EXP 33
42857: PUSH
42858: LD_INT 1
42860: EQUAL
42861: PUSH
42862: LD_EXP 39
42866: PUSH
42867: LD_INT 0
42869: EQUAL
42870: AND
42871: IFFALSE 42967
42873: GO 42875
42875: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42876: LD_INT 16
42878: PPUSH
42879: LD_INT 6
42881: PPUSH
42882: LD_INT 5
42884: PPUSH
42885: LD_INT 6
42887: PPUSH
42888: CALL_OW 12
42892: PUSH
42893: LD_INT 6
42895: PPUSH
42896: LD_INT 7
42898: PPUSH
42899: CALL_OW 12
42903: PUSH
42904: LD_INT 7
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: LIST
42911: PUSH
42912: LD_OWVAR 67
42916: ARRAY
42917: PPUSH
42918: LD_EXP 25
42922: PPUSH
42923: LD_EXP 26
42927: PPUSH
42928: CALL_OW 12
42932: PPUSH
42933: LD_INT 3
42935: PPUSH
42936: LD_INT 1
42938: PPUSH
42939: LD_INT 3
42941: PPUSH
42942: LD_INT 43
42944: PUSH
42945: LD_INT 44
42947: PUSH
42948: LD_INT 46
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: LIST
42955: PPUSH
42956: EMPTY
42957: PPUSH
42958: EMPTY
42959: PPUSH
42960: LD_INT 1
42962: PPUSH
42963: CALL 14632 0 11
42967: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
42968: LD_EXP 33
42972: PUSH
42973: LD_INT 1
42975: EQUAL
42976: PUSH
42977: LD_EXP 39
42981: PUSH
42982: LD_INT 0
42984: EQUAL
42985: AND
42986: IFFALSE 43062
42988: GO 42990
42990: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42991: LD_INT 16
42993: PPUSH
42994: LD_INT 6
42996: PPUSH
42997: LD_INT 5
42999: PUSH
43000: LD_INT 6
43002: PUSH
43003: LD_INT 7
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: PUSH
43011: LD_OWVAR 67
43015: ARRAY
43016: PPUSH
43017: LD_EXP 25
43021: PPUSH
43022: LD_EXP 26
43026: PPUSH
43027: CALL_OW 12
43031: PPUSH
43032: LD_INT 3
43034: PPUSH
43035: LD_INT 1
43037: PPUSH
43038: LD_INT 3
43040: PPUSH
43041: LD_INT 44
43043: PUSH
43044: LD_INT 46
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PPUSH
43051: EMPTY
43052: PPUSH
43053: EMPTY
43054: PPUSH
43055: LD_INT 1
43057: PPUSH
43058: CALL 14632 0 11
43062: END
// every 1 1$00 trigger secondAttack = 1 do
43063: LD_EXP 34
43067: PUSH
43068: LD_INT 1
43070: EQUAL
43071: IFFALSE 43153
43073: GO 43075
43075: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43076: LD_INT 6
43078: PPUSH
43079: LD_INT 3
43081: PPUSH
43082: LD_INT 3
43084: PUSH
43085: LD_INT 4
43087: PUSH
43088: LD_INT 5
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: LIST
43095: PUSH
43096: LD_OWVAR 67
43100: ARRAY
43101: PPUSH
43102: LD_INT 0
43104: PPUSH
43105: LD_INT 0
43107: PPUSH
43108: LD_INT 0
43110: PPUSH
43111: LD_INT 0
43113: PPUSH
43114: LD_EXP 25
43118: PPUSH
43119: LD_EXP 26
43123: PPUSH
43124: CALL_OW 12
43128: PPUSH
43129: LD_INT 16
43131: PPUSH
43132: LD_INT 7
43134: PPUSH
43135: LD_INT 1
43137: PPUSH
43138: LD_INT 1
43140: PPUSH
43141: LD_INT 3
43143: PPUSH
43144: CALL_OW 12
43148: PPUSH
43149: CALL 12339 0 12
43153: END
// every 1 1$00 trigger secondAttack = 1 do
43154: LD_EXP 34
43158: PUSH
43159: LD_INT 1
43161: EQUAL
43162: IFFALSE 43266
43164: GO 43166
43166: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43167: LD_INT 16
43169: PPUSH
43170: LD_INT 6
43172: PPUSH
43173: LD_INT 5
43175: PPUSH
43176: LD_INT 8
43178: PPUSH
43179: CALL_OW 12
43183: PUSH
43184: LD_INT 6
43186: PPUSH
43187: LD_INT 9
43189: PPUSH
43190: CALL_OW 12
43194: PUSH
43195: LD_INT 7
43197: PPUSH
43198: LD_INT 9
43200: PPUSH
43201: CALL_OW 12
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: LIST
43210: PUSH
43211: LD_OWVAR 67
43215: ARRAY
43216: PPUSH
43217: LD_EXP 25
43221: PPUSH
43222: LD_EXP 26
43226: PPUSH
43227: CALL_OW 12
43231: PPUSH
43232: LD_INT 3
43234: PPUSH
43235: LD_INT 1
43237: PPUSH
43238: LD_INT 3
43240: PPUSH
43241: LD_INT 43
43243: PUSH
43244: LD_INT 44
43246: PUSH
43247: LD_INT 46
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: LIST
43254: PPUSH
43255: EMPTY
43256: PPUSH
43257: EMPTY
43258: PPUSH
43259: LD_INT 1
43261: PPUSH
43262: CALL 14632 0 11
43266: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43267: LD_EXP 18
43271: PUSH
43272: LD_INT 0
43274: EQUAL
43275: IFFALSE 43357
43277: GO 43279
43279: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43280: LD_INT 6
43282: PPUSH
43283: LD_INT 3
43285: PPUSH
43286: LD_INT 3
43288: PUSH
43289: LD_INT 4
43291: PUSH
43292: LD_INT 5
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: PUSH
43300: LD_OWVAR 67
43304: ARRAY
43305: PPUSH
43306: LD_INT 0
43308: PPUSH
43309: LD_INT 0
43311: PPUSH
43312: LD_INT 0
43314: PPUSH
43315: LD_INT 0
43317: PPUSH
43318: LD_EXP 25
43322: PPUSH
43323: LD_EXP 26
43327: PPUSH
43328: CALL_OW 12
43332: PPUSH
43333: LD_INT 16
43335: PPUSH
43336: LD_INT 7
43338: PPUSH
43339: LD_INT 1
43341: PPUSH
43342: LD_INT 1
43344: PPUSH
43345: LD_INT 3
43347: PPUSH
43348: CALL_OW 12
43352: PPUSH
43353: CALL 12339 0 12
43357: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43358: LD_EXP 18
43362: PUSH
43363: LD_INT 0
43365: EQUAL
43366: IFFALSE 43466
43368: GO 43370
43370: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43371: LD_INT 16
43373: PPUSH
43374: LD_INT 6
43376: PPUSH
43377: LD_INT 5
43379: PPUSH
43380: LD_INT 8
43382: PPUSH
43383: CALL_OW 12
43387: PUSH
43388: LD_INT 6
43390: PPUSH
43391: LD_INT 9
43393: PPUSH
43394: CALL_OW 12
43398: PUSH
43399: LD_INT 7
43401: PPUSH
43402: LD_INT 9
43404: PPUSH
43405: CALL_OW 12
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: LIST
43414: PUSH
43415: LD_OWVAR 67
43419: ARRAY
43420: PPUSH
43421: LD_EXP 25
43425: PPUSH
43426: LD_EXP 26
43430: PPUSH
43431: CALL_OW 12
43435: PPUSH
43436: LD_INT 3
43438: PPUSH
43439: LD_INT 1
43441: PPUSH
43442: LD_INT 3
43444: PPUSH
43445: LD_INT 44
43447: PUSH
43448: LD_INT 46
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PPUSH
43455: EMPTY
43456: PPUSH
43457: EMPTY
43458: PPUSH
43459: LD_INT 1
43461: PPUSH
43462: CALL 14632 0 11
43466: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43467: LD_EXP 18
43471: PUSH
43472: LD_INT 0
43474: EQUAL
43475: IFFALSE 43557
43477: GO 43479
43479: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43480: LD_INT 6
43482: PPUSH
43483: LD_INT 3
43485: PPUSH
43486: LD_INT 3
43488: PUSH
43489: LD_INT 4
43491: PUSH
43492: LD_INT 5
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: LIST
43499: PUSH
43500: LD_OWVAR 67
43504: ARRAY
43505: PPUSH
43506: LD_INT 0
43508: PPUSH
43509: LD_INT 0
43511: PPUSH
43512: LD_INT 0
43514: PPUSH
43515: LD_INT 0
43517: PPUSH
43518: LD_EXP 25
43522: PPUSH
43523: LD_EXP 26
43527: PPUSH
43528: CALL_OW 12
43532: PPUSH
43533: LD_INT 16
43535: PPUSH
43536: LD_INT 7
43538: PPUSH
43539: LD_INT 1
43541: PPUSH
43542: LD_INT 1
43544: PPUSH
43545: LD_INT 3
43547: PPUSH
43548: CALL_OW 12
43552: PPUSH
43553: CALL 12339 0 12
43557: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43558: LD_EXP 18
43562: PUSH
43563: LD_INT 0
43565: EQUAL
43566: IFFALSE 43666
43568: GO 43570
43570: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43571: LD_INT 16
43573: PPUSH
43574: LD_INT 6
43576: PPUSH
43577: LD_INT 5
43579: PPUSH
43580: LD_INT 8
43582: PPUSH
43583: CALL_OW 12
43587: PUSH
43588: LD_INT 6
43590: PPUSH
43591: LD_INT 9
43593: PPUSH
43594: CALL_OW 12
43598: PUSH
43599: LD_INT 7
43601: PPUSH
43602: LD_INT 9
43604: PPUSH
43605: CALL_OW 12
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: LIST
43614: PUSH
43615: LD_OWVAR 67
43619: ARRAY
43620: PPUSH
43621: LD_EXP 25
43625: PPUSH
43626: LD_EXP 26
43630: PPUSH
43631: CALL_OW 12
43635: PPUSH
43636: LD_INT 3
43638: PPUSH
43639: LD_INT 1
43641: PPUSH
43642: LD_INT 3
43644: PPUSH
43645: LD_INT 44
43647: PUSH
43648: LD_INT 46
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PPUSH
43655: EMPTY
43656: PPUSH
43657: EMPTY
43658: PPUSH
43659: LD_INT 1
43661: PPUSH
43662: CALL 14632 0 11
43666: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43667: LD_EXP 18
43671: PUSH
43672: LD_INT 0
43674: EQUAL
43675: IFFALSE 43757
43677: GO 43679
43679: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43680: LD_INT 6
43682: PPUSH
43683: LD_INT 3
43685: PPUSH
43686: LD_INT 3
43688: PUSH
43689: LD_INT 4
43691: PUSH
43692: LD_INT 5
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: LIST
43699: PUSH
43700: LD_OWVAR 67
43704: ARRAY
43705: PPUSH
43706: LD_INT 0
43708: PPUSH
43709: LD_INT 0
43711: PPUSH
43712: LD_INT 0
43714: PPUSH
43715: LD_INT 0
43717: PPUSH
43718: LD_EXP 25
43722: PPUSH
43723: LD_EXP 26
43727: PPUSH
43728: CALL_OW 12
43732: PPUSH
43733: LD_INT 16
43735: PPUSH
43736: LD_INT 7
43738: PPUSH
43739: LD_INT 1
43741: PPUSH
43742: LD_INT 1
43744: PPUSH
43745: LD_INT 3
43747: PPUSH
43748: CALL_OW 12
43752: PPUSH
43753: CALL 12339 0 12
43757: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43758: LD_EXP 18
43762: PUSH
43763: LD_INT 0
43765: EQUAL
43766: IFFALSE 43866
43768: GO 43770
43770: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
43771: LD_INT 16
43773: PPUSH
43774: LD_INT 6
43776: PPUSH
43777: LD_INT 5
43779: PPUSH
43780: LD_INT 8
43782: PPUSH
43783: CALL_OW 12
43787: PUSH
43788: LD_INT 6
43790: PPUSH
43791: LD_INT 9
43793: PPUSH
43794: CALL_OW 12
43798: PUSH
43799: LD_INT 7
43801: PPUSH
43802: LD_INT 9
43804: PPUSH
43805: CALL_OW 12
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: LIST
43814: PUSH
43815: LD_OWVAR 67
43819: ARRAY
43820: PPUSH
43821: LD_EXP 25
43825: PPUSH
43826: LD_EXP 26
43830: PPUSH
43831: CALL_OW 12
43835: PPUSH
43836: LD_INT 3
43838: PPUSH
43839: LD_INT 1
43841: PPUSH
43842: LD_INT 3
43844: PPUSH
43845: LD_INT 44
43847: PUSH
43848: LD_INT 46
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PPUSH
43855: EMPTY
43856: PPUSH
43857: EMPTY
43858: PPUSH
43859: LD_INT 1
43861: PPUSH
43862: CALL 14632 0 11
43866: END
// every 0 0$1 trigger timerStatus = 1 do
43867: LD_EXP 35
43871: PUSH
43872: LD_INT 1
43874: EQUAL
43875: IFFALSE 43912
43877: GO 43879
43879: DISABLE
// begin enable ;
43880: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
43881: LD_ADDR_OWVAR 47
43885: PUSH
43886: LD_STRING #Am08-1
43888: PUSH
43889: LD_EXP 19
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
43898: LD_ADDR_EXP 19
43902: PUSH
43903: LD_EXP 19
43907: PUSH
43908: LD_INT 35
43910: MINUS
43911: ST_TO_ADDR
// end ; end_of_file
43912: END
// every 1 1$0 do
43913: GO 43915
43915: DISABLE
// begin if supply <= 13 and supply > 7 then
43916: LD_EXP 40
43920: PUSH
43921: LD_INT 13
43923: LESSEQUAL
43924: PUSH
43925: LD_EXP 40
43929: PUSH
43930: LD_INT 7
43932: GREATER
43933: AND
43934: IFFALSE 43957
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
43936: LD_INT 3
43938: PPUSH
43939: LD_INT 5
43941: PPUSH
43942: CALL_OW 12
43946: PPUSH
43947: LD_INT 5
43949: PPUSH
43950: LD_INT 1
43952: PPUSH
43953: CALL_OW 55
// if supply <= 7 and supply > 4 then
43957: LD_EXP 40
43961: PUSH
43962: LD_INT 7
43964: LESSEQUAL
43965: PUSH
43966: LD_EXP 40
43970: PUSH
43971: LD_INT 4
43973: GREATER
43974: AND
43975: IFFALSE 43998
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
43977: LD_INT 3
43979: PPUSH
43980: LD_INT 5
43982: PPUSH
43983: CALL_OW 12
43987: PPUSH
43988: LD_INT 20
43990: PPUSH
43991: LD_INT 1
43993: PPUSH
43994: CALL_OW 55
// if supply <= 4 and supply > 0 then
43998: LD_EXP 40
44002: PUSH
44003: LD_INT 4
44005: LESSEQUAL
44006: PUSH
44007: LD_EXP 40
44011: PUSH
44012: LD_INT 0
44014: GREATER
44015: AND
44016: IFFALSE 44039
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
44018: LD_INT 3
44020: PPUSH
44021: LD_INT 5
44023: PPUSH
44024: CALL_OW 12
44028: PPUSH
44029: LD_INT 21
44031: PPUSH
44032: LD_INT 1
44034: PPUSH
44035: CALL_OW 55
// if supply > 0 then
44039: LD_EXP 40
44043: PUSH
44044: LD_INT 0
44046: GREATER
44047: IFFALSE 44064
// begin supply = supply - 1 ;
44049: LD_ADDR_EXP 40
44053: PUSH
44054: LD_EXP 40
44058: PUSH
44059: LD_INT 1
44061: MINUS
44062: ST_TO_ADDR
// enable ;
44063: ENABLE
// end ; end ; end_of_file
44064: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
44065: LD_EXP 39
44069: PUSH
44070: LD_INT 1
44072: EQUAL
44073: PUSH
44074: LD_EXP 1
44078: PPUSH
44079: CALL_OW 301
44083: AND
44084: IFFALSE 44096
44086: GO 44088
44088: DISABLE
// YouLost ( JMM ) ;
44089: LD_STRING JMM
44091: PPUSH
44092: CALL_OW 104
44096: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
44097: LD_EXP 18
44101: PUSH
44102: LD_INT 1
44104: EQUAL
44105: PUSH
44106: LD_EXP 16
44110: PPUSH
44111: CALL_OW 301
44115: AND
44116: IFFALSE 44148
44118: GO 44120
44120: DISABLE
// begin DialogueOn ;
44121: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
44125: LD_EXP 23
44129: PPUSH
44130: LD_STRING D8a-Pow-1
44132: PPUSH
44133: CALL_OW 94
// DialogueOff ;
44137: CALL_OW 7
// YouLost ( Dismissed ) ;
44141: LD_STRING Dismissed
44143: PPUSH
44144: CALL_OW 104
// end ;
44148: END
// every 0 0$1 trigger IsDead ( amDepot ) do
44149: LD_EXP 37
44153: PPUSH
44154: CALL_OW 301
44158: IFFALSE 44170
44160: GO 44162
44162: DISABLE
// YouLost ( Destroyed ) ; end_of_file
44163: LD_STRING Destroyed
44165: PPUSH
44166: CALL_OW 104
44170: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , p ;
44171: LD_EXP 24
44175: PPUSH
44176: CALL_OW 301
44180: PUSH
44181: LD_INT 22
44183: PUSH
44184: LD_INT 3
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 21
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PPUSH
44205: CALL_OW 69
44209: PUSH
44210: LD_INT 14
44212: PUSH
44213: LD_INT 13
44215: PUSH
44216: LD_INT 12
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: LIST
44223: PUSH
44224: LD_OWVAR 67
44228: ARRAY
44229: LESS
44230: AND
44231: IFFALSE 44679
44233: GO 44235
44235: DISABLE
44236: LD_INT 0
44238: PPUSH
44239: PPUSH
// begin russianAI = 0 ;
44240: LD_ADDR_EXP 27
44244: PUSH
44245: LD_INT 0
44247: ST_TO_ADDR
// escapeAvalaible = 1 ;
44248: LD_ADDR_EXP 36
44252: PUSH
44253: LD_INT 1
44255: ST_TO_ADDR
// InGameOn ;
44256: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
44260: LD_INT 3
44262: PPUSH
44263: LD_INT 1
44265: PPUSH
44266: LD_INT 1
44268: PPUSH
44269: LD_INT 0
44271: PPUSH
44272: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
44276: LD_INT 6
44278: PPUSH
44279: LD_INT 1
44281: PPUSH
44282: LD_INT 1
44284: PPUSH
44285: LD_INT 0
44287: PPUSH
44288: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
44292: LD_INT 3
44294: PPUSH
44295: LD_INT 1
44297: PPUSH
44298: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
44302: LD_INT 97
44304: PPUSH
44305: LD_INT 91
44307: PPUSH
44308: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
44312: LD_INT 22
44314: PUSH
44315: LD_INT 3
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 21
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PPUSH
44336: CALL_OW 69
44340: PPUSH
44341: CALL_OW 121
// wait ( 0 0$01 ) ;
44345: LD_INT 35
44347: PPUSH
44348: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44352: LD_INT 22
44354: PUSH
44355: LD_INT 3
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 21
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PPUSH
44376: CALL_OW 69
44380: PPUSH
44381: LD_INT 124
44383: PPUSH
44384: LD_INT 98
44386: PPUSH
44387: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
44391: LD_INT 22
44393: PUSH
44394: LD_INT 6
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 21
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PPUSH
44415: CALL_OW 69
44419: PPUSH
44420: CALL_OW 121
// wait ( 0 0$01 ) ;
44424: LD_INT 35
44426: PPUSH
44427: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44431: LD_INT 22
44433: PUSH
44434: LD_INT 6
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 21
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PPUSH
44455: CALL_OW 69
44459: PPUSH
44460: LD_INT 124
44462: PPUSH
44463: LD_INT 98
44465: PPUSH
44466: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
44470: LD_INT 22
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 21
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 3
44492: PUSH
44493: LD_INT 54
44495: PUSH
44496: EMPTY
44497: LIST
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: LIST
44507: PPUSH
44508: CALL_OW 69
44512: PPUSH
44513: LD_INT 124
44515: PPUSH
44516: LD_INT 98
44518: PPUSH
44519: CALL_OW 114
// wait ( 0 0$4 ) ;
44523: LD_INT 140
44525: PPUSH
44526: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
44530: LD_INT 124
44532: PPUSH
44533: LD_INT 98
44535: PPUSH
44536: CALL_OW 84
// if SikorskyStatus = 1 then
44540: LD_EXP 21
44544: PUSH
44545: LD_INT 1
44547: EQUAL
44548: IFFALSE 44562
// begin Say ( Sikorski , D9-Sik-1 ) ;
44550: LD_EXP 16
44554: PPUSH
44555: LD_STRING D9-Sik-1
44557: PPUSH
44558: CALL_OW 88
// end ; if SikorskyStatus = 2 then
44562: LD_EXP 21
44566: PUSH
44567: LD_INT 2
44569: EQUAL
44570: IFFALSE 44591
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
44572: LD_EXP 23
44576: PPUSH
44577: LD_STRING D8b-Pow-1
44579: PPUSH
44580: CALL_OW 94
// YouLost ( Dismissed ) ;
44584: LD_STRING Dismissed
44586: PPUSH
44587: CALL_OW 104
// end ; p := 0 0$0 ;
44591: LD_ADDR_VAR 0 2
44595: PUSH
44596: LD_INT 0
44598: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44599: LD_INT 35
44601: PPUSH
44602: CALL_OW 67
// p := p + 0 0$1 ;
44606: LD_ADDR_VAR 0 2
44610: PUSH
44611: LD_VAR 0 2
44615: PUSH
44616: LD_INT 35
44618: PLUS
44619: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
44620: LD_INT 23
44622: PUSH
44623: LD_INT 3
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 21
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 24
44642: PUSH
44643: LD_INT 250
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: LIST
44654: PPUSH
44655: CALL_OW 69
44659: PUSH
44660: LD_INT 0
44662: EQUAL
44663: PUSH
44664: LD_VAR 0 2
44668: PUSH
44669: LD_INT 245
44671: GREATEREQUAL
44672: OR
44673: IFFALSE 44599
// FinishMission ;
44675: CALL 44682 0 0
// end ;
44679: PPOPN 2
44681: END
// export function FinishMission ; var tmp ; begin
44682: LD_INT 0
44684: PPUSH
44685: PPUSH
// AddMedal ( med1 , 1 ) ;
44686: LD_STRING med1
44688: PPUSH
44689: LD_INT 1
44691: PPUSH
44692: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
44696: LD_STRING med2
44698: PPUSH
44699: LD_INT 1
44701: PPUSH
44702: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
44706: LD_STRING perfect
44708: PPUSH
44709: LD_INT 1
44711: PPUSH
44712: CALL_OW 101
// GiveMedals ( Main ) ;
44716: LD_STRING Main
44718: PPUSH
44719: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
44723: LD_INT 22
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 23
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 21
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 2
44755: PUSH
44756: LD_INT 25
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 25
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 25
44778: PUSH
44779: LD_INT 3
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 25
44788: PUSH
44789: LD_INT 4
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: PPUSH
44809: CALL_OW 69
44813: PPUSH
44814: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
44818: LD_EXP 1
44822: PPUSH
44823: LD_EXP 42
44827: PUSH
44828: LD_STRING JMM
44830: STR
44831: PPUSH
44832: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
44836: LD_EXP 2
44840: PPUSH
44841: LD_EXP 42
44845: PUSH
44846: LD_STRING Brown
44848: STR
44849: PPUSH
44850: CALL 8524 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
44854: LD_EXP 3
44858: PPUSH
44859: LD_EXP 42
44863: PUSH
44864: LD_STRING Donaldson
44866: STR
44867: PPUSH
44868: CALL 8524 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
44872: LD_EXP 4
44876: PPUSH
44877: LD_EXP 42
44881: PUSH
44882: LD_STRING Bobby
44884: STR
44885: PPUSH
44886: CALL 8524 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
44890: LD_EXP 5
44894: PPUSH
44895: LD_EXP 42
44899: PUSH
44900: LD_STRING Cyrus
44902: STR
44903: PPUSH
44904: CALL 8524 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
44908: LD_EXP 6
44912: PPUSH
44913: LD_EXP 42
44917: PUSH
44918: LD_STRING Lisa
44920: STR
44921: PPUSH
44922: CALL 8524 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
44926: LD_EXP 7
44930: PPUSH
44931: LD_EXP 42
44935: PUSH
44936: LD_STRING Frank
44938: STR
44939: PPUSH
44940: CALL 8524 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
44944: LD_EXP 8
44948: PPUSH
44949: LD_EXP 42
44953: PUSH
44954: LD_STRING Gladstone
44956: STR
44957: PPUSH
44958: CALL 8524 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
44962: LD_EXP 9
44966: PPUSH
44967: LD_EXP 42
44971: PUSH
44972: LD_STRING Kikuchi
44974: STR
44975: PPUSH
44976: CALL 8524 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
44980: LD_EXP 14
44984: PPUSH
44985: LD_EXP 42
44989: PUSH
44990: LD_STRING Denis
44992: STR
44993: PPUSH
44994: CALL 8524 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
44998: LD_EXP 15
45002: PPUSH
45003: LD_EXP 42
45007: PUSH
45008: LD_STRING Joan
45010: STR
45011: PPUSH
45012: CALL 8524 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
45016: LD_EXP 10
45020: PPUSH
45021: LD_EXP 42
45025: PUSH
45026: LD_STRING Khatam
45028: STR
45029: PPUSH
45030: CALL 8524 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
45034: LD_EXP 13
45038: PPUSH
45039: LD_EXP 42
45043: PUSH
45044: LD_STRING Houten
45046: STR
45047: PPUSH
45048: CALL 8524 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
45052: LD_INT 50
45054: PUSH
45055: EMPTY
45056: LIST
45057: PUSH
45058: LD_INT 22
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 21
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 2
45080: PUSH
45081: LD_INT 25
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 25
45093: PUSH
45094: LD_INT 2
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 25
45103: PUSH
45104: LD_INT 3
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 25
45113: PUSH
45114: LD_INT 4
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: PPUSH
45134: CALL_OW 69
45138: PUSH
45139: LD_EXP 1
45143: PUSH
45144: LD_EXP 2
45148: PUSH
45149: LD_EXP 3
45153: PUSH
45154: LD_EXP 4
45158: PUSH
45159: LD_EXP 5
45163: PUSH
45164: LD_EXP 6
45168: PUSH
45169: LD_EXP 7
45173: PUSH
45174: LD_EXP 8
45178: PUSH
45179: LD_EXP 9
45183: PUSH
45184: LD_EXP 14
45188: PUSH
45189: LD_EXP 15
45193: PUSH
45194: LD_EXP 13
45198: PUSH
45199: LD_EXP 10
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: DIFF
45219: PPUSH
45220: LD_STRING 08_other_survivors
45222: PPUSH
45223: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
45227: LD_INT 23
45229: PPUSH
45230: CALL 45243 0 1
// YouWin ;
45234: CALL_OW 103
// end ;
45238: LD_VAR 0 1
45242: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
45243: LD_INT 0
45245: PPUSH
45246: PPUSH
45247: PPUSH
45248: PPUSH
// gammaBase = [ ] ;
45249: LD_ADDR_VAR 0 4
45253: PUSH
45254: EMPTY
45255: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
45256: LD_ADDR_VAR 0 5
45260: PUSH
45261: LD_VAR 0 1
45265: PPUSH
45266: LD_INT 22
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 21
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 50
45288: PUSH
45289: EMPTY
45290: LIST
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: LIST
45296: PPUSH
45297: CALL_OW 70
45301: ST_TO_ADDR
// for i in buildings do
45302: LD_ADDR_VAR 0 3
45306: PUSH
45307: LD_VAR 0 5
45311: PUSH
45312: FOR_IN
45313: IFFALSE 45750
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
45315: LD_VAR 0 3
45319: PPUSH
45320: CALL_OW 266
45324: PUSH
45325: LD_INT 6
45327: PUSH
45328: LD_INT 7
45330: PUSH
45331: LD_INT 8
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: LIST
45338: IN
45339: IFFALSE 45453
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
45341: LD_ADDR_VAR 0 4
45345: PUSH
45346: LD_VAR 0 4
45350: PUSH
45351: LD_VAR 0 3
45355: PPUSH
45356: CALL_OW 266
45360: PUSH
45361: LD_VAR 0 3
45365: PPUSH
45366: CALL_OW 250
45370: PUSH
45371: LD_VAR 0 3
45375: PPUSH
45376: CALL_OW 251
45380: PUSH
45381: LD_VAR 0 3
45385: PPUSH
45386: CALL_OW 254
45390: PUSH
45391: LD_VAR 0 3
45395: PPUSH
45396: CALL_OW 267
45400: PUSH
45401: LD_VAR 0 3
45405: PPUSH
45406: CALL_OW 248
45410: PUSH
45411: LD_VAR 0 3
45415: PPUSH
45416: LD_INT 1
45418: PPUSH
45419: CALL_OW 268
45423: PUSH
45424: LD_VAR 0 3
45428: PPUSH
45429: LD_INT 2
45431: PPUSH
45432: CALL_OW 268
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: PUSH
45447: EMPTY
45448: LIST
45449: ADD
45450: ST_TO_ADDR
45451: GO 45748
// if GetBType ( i ) = b_bunker then
45453: LD_VAR 0 3
45457: PPUSH
45458: CALL_OW 266
45462: PUSH
45463: LD_INT 32
45465: EQUAL
45466: IFFALSE 45563
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
45468: LD_ADDR_VAR 0 4
45472: PUSH
45473: LD_VAR 0 4
45477: PUSH
45478: LD_VAR 0 3
45482: PPUSH
45483: CALL_OW 266
45487: PUSH
45488: LD_VAR 0 3
45492: PPUSH
45493: CALL_OW 250
45497: PUSH
45498: LD_VAR 0 3
45502: PPUSH
45503: CALL_OW 251
45507: PUSH
45508: LD_VAR 0 3
45512: PPUSH
45513: CALL_OW 254
45517: PUSH
45518: LD_VAR 0 3
45522: PPUSH
45523: CALL_OW 267
45527: PUSH
45528: LD_VAR 0 3
45532: PPUSH
45533: CALL_OW 248
45537: PUSH
45538: LD_VAR 0 3
45542: PPUSH
45543: CALL_OW 269
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: PUSH
45557: EMPTY
45558: LIST
45559: ADD
45560: ST_TO_ADDR
45561: GO 45748
// if GetBType ( i ) = b_factory then
45563: LD_VAR 0 3
45567: PPUSH
45568: CALL_OW 266
45572: PUSH
45573: LD_INT 3
45575: EQUAL
45576: IFFALSE 45666
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
45578: LD_ADDR_VAR 0 4
45582: PUSH
45583: LD_VAR 0 4
45587: PPUSH
45588: LD_INT 1
45590: PPUSH
45591: LD_VAR 0 3
45595: PPUSH
45596: CALL_OW 266
45600: PUSH
45601: LD_VAR 0 3
45605: PPUSH
45606: CALL_OW 250
45610: PUSH
45611: LD_VAR 0 3
45615: PPUSH
45616: CALL_OW 251
45620: PUSH
45621: LD_VAR 0 3
45625: PPUSH
45626: CALL_OW 254
45630: PUSH
45631: LD_VAR 0 3
45635: PPUSH
45636: CALL_OW 267
45640: PUSH
45641: LD_VAR 0 3
45645: PPUSH
45646: CALL_OW 248
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: PPUSH
45659: CALL_OW 2
45663: ST_TO_ADDR
45664: GO 45748
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
45666: LD_ADDR_VAR 0 4
45670: PUSH
45671: LD_VAR 0 4
45675: PUSH
45676: LD_VAR 0 3
45680: PPUSH
45681: CALL_OW 266
45685: PUSH
45686: LD_VAR 0 3
45690: PPUSH
45691: CALL_OW 250
45695: PUSH
45696: LD_VAR 0 3
45700: PPUSH
45701: CALL_OW 251
45705: PUSH
45706: LD_VAR 0 3
45710: PPUSH
45711: CALL_OW 254
45715: PUSH
45716: LD_VAR 0 3
45720: PPUSH
45721: CALL_OW 267
45725: PUSH
45726: LD_VAR 0 3
45730: PPUSH
45731: CALL_OW 248
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: PUSH
45744: EMPTY
45745: LIST
45746: ADD
45747: ST_TO_ADDR
// end ;
45748: GO 45312
45750: POP
45751: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
45752: LD_VAR 0 4
45756: PPUSH
45757: LD_STRING 08_GammaBase
45759: PPUSH
45760: CALL_OW 39
// end ;
45764: LD_VAR 0 2
45768: RET
