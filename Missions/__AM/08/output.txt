// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyBuilds ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 40
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 41
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 37
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 17
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 18
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 20
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 32
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 33
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  80: LD_ADDR_EXP 11
  84: PUSH
  85: LD_STRING GammaCommander
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// russianAI = 0 ;
  96: LD_ADDR_EXP 26
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// ruDestroyBuilds = [ ] ;
 104: LD_ADDR_EXP 30
 108: PUSH
 109: EMPTY
 110: ST_TO_ADDR
// escapeAvalaible = 0 ;
 111: LD_ADDR_EXP 35
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// defenders_list = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// varEvent1 = 0 ;
 126: LD_ADDR_EXP 39
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// timerStatus = 0 ;
 134: LD_ADDR_EXP 34
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 142: LD_ADDR_EXP 38
 146: PUSH
 147: LD_INT 18
 149: PUSH
 150: LD_INT 17
 152: PUSH
 153: LD_INT 15
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: PUSH
 161: LD_OWVAR 67
 165: ARRAY
 166: ST_TO_ADDR
// debugMode = 0 ;
 167: LD_ADDR_EXP 42
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// PrepareDifficulty ;
 175: CALL 6101 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 179: LD_INT 43
 181: PPUSH
 182: LD_INT 22
 184: PPUSH
 185: LD_INT 1
 187: PPUSH
 188: LD_INT 333
 190: NEG
 191: PPUSH
 192: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 196: LD_INT 43
 198: PPUSH
 199: LD_INT 22
 201: PPUSH
 202: LD_INT 1
 204: PPUSH
 205: CALL_OW 331
// PrepareBase ;
 209: CALL 1579 0 0
// PrepareHeroes ;
 213: CALL 511 0 0
// PrepareRussianCommander ;
 217: CALL 4906 0 0
// PrepareRussians ;
 221: CALL 5224 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 225: LD_INT 22
 227: PUSH
 228: LD_INT 3
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 25
 237: PUSH
 238: LD_INT 2
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: PPUSH
 249: CALL_OW 69
 253: PPUSH
 254: LD_INT 0
 256: PPUSH
 257: LD_INT 90
 259: PPUSH
 260: LD_INT 86
 262: PPUSH
 263: LD_INT 3
 265: PPUSH
 266: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 270: LD_INT 3
 272: PPUSH
 273: LD_INT 24
 275: PPUSH
 276: LD_INT 3
 278: PPUSH
 279: LD_EXP 24
 283: PPUSH
 284: LD_EXP 25
 288: PPUSH
 289: CALL_OW 12
 293: PPUSH
 294: LD_INT 6
 296: PPUSH
 297: LD_INT 4
 299: PPUSH
 300: CALL 7319 0 6
// PrepareCutsceneAttack ;
 304: CALL 4958 0 0
// end ;
 308: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 309: LD_EXP 42
 313: PUSH
 314: LD_INT 1
 316: EQUAL
 317: IFFALSE 508
 319: GO 321
 321: DISABLE
 322: LD_INT 0
 324: PPUSH
// begin enable ;
 325: ENABLE
// fogoff ( true ) ;
 326: LD_INT 1
 328: PPUSH
 329: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 333: LD_ADDR_VAR 0 1
 337: PUSH
 338: LD_INT 22
 340: PUSH
 341: LD_INT 1
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: LD_INT 21
 350: PUSH
 351: LD_INT 1
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: PPUSH
 362: CALL_OW 69
 366: PUSH
 367: FOR_IN
 368: IFFALSE 384
// SetLives ( i , 1000 ) ;
 370: LD_VAR 0 1
 374: PPUSH
 375: LD_INT 1000
 377: PPUSH
 378: CALL_OW 234
 382: GO 367
 384: POP
 385: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 386: LD_ADDR_VAR 0 1
 390: PUSH
 391: LD_INT 22
 393: PUSH
 394: LD_INT 1
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PUSH
 401: LD_INT 30
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 30
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PPUSH
 476: CALL_OW 69
 480: PUSH
 481: FOR_IN
 482: IFFALSE 506
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 484: LD_VAR 0 1
 488: PPUSH
 489: CALL_OW 274
 493: PPUSH
 494: LD_INT 2
 496: PPUSH
 497: LD_INT 9999
 499: PPUSH
 500: CALL_OW 277
 504: GO 481
 506: POP
 507: POP
// end ; end_of_file
 508: PPOPN 1
 510: END
// export function PrepareHeroes ; var i , fac , lab , arm , j , placed , ct , bun ; begin
 511: LD_INT 0
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
 517: PPUSH
 518: PPUSH
 519: PPUSH
 520: PPUSH
 521: PPUSH
// uc_side = 1 ;
 522: LD_ADDR_OWVAR 20
 526: PUSH
 527: LD_INT 1
 529: ST_TO_ADDR
// uc_nation = 1 ;
 530: LD_ADDR_OWVAR 21
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// if gammaCommander = 1 then
 538: LD_EXP 11
 542: PUSH
 543: LD_INT 1
 545: EQUAL
 546: IFFALSE 579
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 548: LD_ADDR_EXP 3
 552: PUSH
 553: LD_STRING Donaldson
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: CALL 5642 0 2
 563: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 564: LD_EXP 3
 568: PPUSH
 569: LD_INT 5
 571: PPUSH
 572: LD_INT 0
 574: PPUSH
 575: CALL_OW 49
// end ; if gammaCommander = 2 then
 579: LD_EXP 11
 583: PUSH
 584: LD_INT 2
 586: EQUAL
 587: IFFALSE 620
// begin Brown = PrepareUnit ( Brown , true ) ;
 589: LD_ADDR_EXP 2
 593: PUSH
 594: LD_STRING Brown
 596: PPUSH
 597: LD_INT 1
 599: PPUSH
 600: CALL 5642 0 2
 604: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 605: LD_EXP 2
 609: PPUSH
 610: LD_INT 5
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: CALL_OW 49
// end ; if gammaCommander = 3 then
 620: LD_EXP 11
 624: PUSH
 625: LD_INT 3
 627: EQUAL
 628: IFFALSE 661
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 630: LD_ADDR_EXP 12
 634: PUSH
 635: LD_STRING VanHouten
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: CALL 5642 0 2
 645: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 646: LD_EXP 12
 650: PPUSH
 651: LD_INT 5
 653: PPUSH
 654: LD_INT 0
 656: PPUSH
 657: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 661: LD_ADDR_EXP 21
 665: PUSH
 666: LD_STRING Harisson
 668: PPUSH
 669: LD_INT 0
 671: PPUSH
 672: CALL 5642 0 2
 676: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 677: LD_ADDR_EXP 22
 681: PUSH
 682: LD_STRING Powell
 684: PPUSH
 685: LD_INT 0
 687: PPUSH
 688: CALL 5642 0 2
 692: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 693: LD_ADDR_EXP 10
 697: PUSH
 698: LD_STRING 07_othersGamma
 700: PPUSH
 701: CALL_OW 31
 705: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
 706: LD_ADDR_VAR 0 5
 710: PUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 1
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 30
 723: PUSH
 724: LD_INT 5
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: PPUSH
 735: CALL_OW 69
 739: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 740: LD_ADDR_VAR 0 4
 744: PUSH
 745: LD_INT 22
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PUSH
 755: LD_INT 2
 757: PUSH
 758: LD_INT 30
 760: PUSH
 761: LD_INT 6
 763: PUSH
 764: EMPTY
 765: LIST
 766: LIST
 767: PUSH
 768: LD_INT 30
 770: PUSH
 771: LD_INT 7
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PUSH
 778: LD_INT 30
 780: PUSH
 781: LD_INT 8
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PPUSH
 798: CALL_OW 69
 802: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
 803: LD_ADDR_VAR 0 3
 807: PUSH
 808: LD_INT 22
 810: PUSH
 811: LD_INT 1
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: LD_INT 30
 820: PUSH
 821: LD_INT 3
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PPUSH
 832: CALL_OW 69
 836: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
 837: LD_ADDR_VAR 0 8
 841: PUSH
 842: LD_INT 22
 844: PUSH
 845: LD_INT 1
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 30
 854: PUSH
 855: LD_INT 36
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: PPUSH
 866: CALL_OW 69
 870: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
 871: LD_ADDR_VAR 0 9
 875: PUSH
 876: LD_INT 22
 878: PUSH
 879: LD_INT 1
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 2
 888: PUSH
 889: LD_INT 30
 891: PUSH
 892: LD_INT 31
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: LD_INT 30
 901: PUSH
 902: LD_INT 32
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: ST_TO_ADDR
// for i in others_gamma do
 923: LD_ADDR_VAR 0 2
 927: PUSH
 928: LD_EXP 10
 932: PUSH
 933: FOR_IN
 934: IFFALSE 1309
// begin placed := false ;
 936: LD_ADDR_VAR 0 7
 940: PUSH
 941: LD_INT 0
 943: ST_TO_ADDR
// if GetClass ( i ) = 1 then
 944: LD_VAR 0 2
 948: PPUSH
 949: CALL_OW 257
 953: PUSH
 954: LD_INT 1
 956: EQUAL
 957: IFFALSE 1082
// begin if UnitFilter ( bun , [ f_empty ] ) then
 959: LD_VAR 0 9
 963: PPUSH
 964: LD_INT 58
 966: PUSH
 967: EMPTY
 968: LIST
 969: PPUSH
 970: CALL_OW 72
 974: IFFALSE 1013
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
 976: LD_VAR 0 2
 980: PPUSH
 981: LD_VAR 0 9
 985: PPUSH
 986: LD_INT 58
 988: PUSH
 989: EMPTY
 990: LIST
 991: PPUSH
 992: CALL_OW 72
 996: PUSH
 997: LD_INT 1
 999: ARRAY
1000: PPUSH
1001: CALL_OW 52
// placed := true ;
1005: LD_ADDR_VAR 0 7
1009: PUSH
1010: LD_INT 1
1012: ST_TO_ADDR
// end ; if arm and not placed then
1013: LD_VAR 0 5
1017: PUSH
1018: LD_VAR 0 7
1022: NOT
1023: AND
1024: IFFALSE 1082
// begin for j in arm do
1026: LD_ADDR_VAR 0 6
1030: PUSH
1031: LD_VAR 0 5
1035: PUSH
1036: FOR_IN
1037: IFFALSE 1080
// if UnitsInside ( j ) < 6 then
1039: LD_VAR 0 6
1043: PPUSH
1044: CALL_OW 313
1048: PUSH
1049: LD_INT 6
1051: LESS
1052: IFFALSE 1078
// begin PlaceHumanInUnit ( i , j ) ;
1054: LD_VAR 0 2
1058: PPUSH
1059: LD_VAR 0 6
1063: PPUSH
1064: CALL_OW 52
// placed := true ;
1068: LD_ADDR_VAR 0 7
1072: PUSH
1073: LD_INT 1
1075: ST_TO_ADDR
// break ;
1076: GO 1080
// end ;
1078: GO 1036
1080: POP
1081: POP
// end ; end ; if GetClass ( i ) = 3 then
1082: LD_VAR 0 2
1086: PPUSH
1087: CALL_OW 257
1091: PUSH
1092: LD_INT 3
1094: EQUAL
1095: IFFALSE 1199
// if fac then
1097: LD_VAR 0 3
1101: IFFALSE 1199
// begin if ct then
1103: LD_VAR 0 8
1107: IFFALSE 1135
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1109: LD_VAR 0 2
1113: PPUSH
1114: LD_VAR 0 8
1118: PUSH
1119: LD_INT 1
1121: ARRAY
1122: PPUSH
1123: CALL_OW 52
// placed := true ;
1127: LD_ADDR_VAR 0 7
1131: PUSH
1132: LD_INT 1
1134: ST_TO_ADDR
// end ; if placed then
1135: LD_VAR 0 7
1139: IFFALSE 1143
// continue ;
1141: GO 933
// for j in fac do
1143: LD_ADDR_VAR 0 6
1147: PUSH
1148: LD_VAR 0 3
1152: PUSH
1153: FOR_IN
1154: IFFALSE 1197
// if UnitsInside ( j ) < 6 then
1156: LD_VAR 0 6
1160: PPUSH
1161: CALL_OW 313
1165: PUSH
1166: LD_INT 6
1168: LESS
1169: IFFALSE 1195
// begin PlaceHumanInUnit ( i , j ) ;
1171: LD_VAR 0 2
1175: PPUSH
1176: LD_VAR 0 6
1180: PPUSH
1181: CALL_OW 52
// placed := true ;
1185: LD_ADDR_VAR 0 7
1189: PUSH
1190: LD_INT 1
1192: ST_TO_ADDR
// break ;
1193: GO 1197
// end ;
1195: GO 1153
1197: POP
1198: POP
// end ; if GetClass ( i ) = 4 then
1199: LD_VAR 0 2
1203: PPUSH
1204: CALL_OW 257
1208: PUSH
1209: LD_INT 4
1211: EQUAL
1212: IFFALSE 1276
// if lab then
1214: LD_VAR 0 4
1218: IFFALSE 1276
// begin for j in lab do
1220: LD_ADDR_VAR 0 6
1224: PUSH
1225: LD_VAR 0 4
1229: PUSH
1230: FOR_IN
1231: IFFALSE 1274
// if UnitsInside ( j ) < 6 then
1233: LD_VAR 0 6
1237: PPUSH
1238: CALL_OW 313
1242: PUSH
1243: LD_INT 6
1245: LESS
1246: IFFALSE 1272
// begin PlaceHumanInUnit ( i , j ) ;
1248: LD_VAR 0 2
1252: PPUSH
1253: LD_VAR 0 6
1257: PPUSH
1258: CALL_OW 52
// placed := true ;
1262: LD_ADDR_VAR 0 7
1266: PUSH
1267: LD_INT 1
1269: ST_TO_ADDR
// break ;
1270: GO 1274
// end ;
1272: GO 1230
1274: POP
1275: POP
// end ; if not placed then
1276: LD_VAR 0 7
1280: NOT
1281: IFFALSE 1307
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1283: LD_VAR 0 2
1287: PPUSH
1288: LD_INT 5
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: CALL_OW 49
// ComHold ( i ) ;
1298: LD_VAR 0 2
1302: PPUSH
1303: CALL_OW 140
// end ; end ;
1307: GO 933
1309: POP
1310: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1311: LD_VAR 0 8
1315: PUSH
1316: LD_VAR 0 8
1320: PUSH
1321: LD_INT 1
1323: ARRAY
1324: PPUSH
1325: CALL_OW 313
1329: AND
1330: IFFALSE 1419
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
1332: LD_ADDR_VAR 0 2
1336: PUSH
1337: LD_INT 22
1339: PUSH
1340: LD_INT 1
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 33
1349: PUSH
1350: LD_INT 2
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PPUSH
1361: CALL_OW 69
1365: PUSH
1366: FOR_IN
1367: IFFALSE 1417
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
1369: LD_VAR 0 2
1373: PPUSH
1374: LD_VAR 0 8
1378: PUSH
1379: LD_INT 1
1381: ARRAY
1382: PPUSH
1383: CALL_OW 313
1387: PUSH
1388: LD_INT 1
1390: PPUSH
1391: LD_VAR 0 8
1395: PUSH
1396: LD_INT 1
1398: ARRAY
1399: PPUSH
1400: CALL_OW 313
1404: PPUSH
1405: CALL_OW 12
1409: ARRAY
1410: PPUSH
1411: CALL_OW 135
1415: GO 1366
1417: POP
1418: POP
// end ; end ;
1419: LD_VAR 0 1
1423: RET
// export function PrepareSoldiers ; var i ; begin
1424: LD_INT 0
1426: PPUSH
1427: PPUSH
// uc_side = 1 ;
1428: LD_ADDR_OWVAR 20
1432: PUSH
1433: LD_INT 1
1435: ST_TO_ADDR
// uc_nation = 1 ;
1436: LD_ADDR_OWVAR 21
1440: PUSH
1441: LD_INT 1
1443: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
1444: LD_ADDR_VAR 0 2
1448: PUSH
1449: LD_INT 22
1451: PUSH
1452: LD_INT 1
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 30
1461: PUSH
1462: LD_INT 32
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL_OW 69
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1507
// RespawnInside ( 1 , 1 , i , 4 , 1 , 1 ) ;
1481: LD_INT 1
1483: PPUSH
1484: LD_INT 1
1486: PPUSH
1487: LD_VAR 0 2
1491: PPUSH
1492: LD_INT 4
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: LD_INT 1
1500: PPUSH
1501: CALL 5991 0 6
1505: GO 1478
1507: POP
1508: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 31 ] ] ) do
1509: LD_ADDR_VAR 0 2
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 1
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 30
1526: PUSH
1527: LD_INT 31
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: PUSH
1543: FOR_IN
1544: IFFALSE 1572
// RespawnInside ( 1 , 1 , i , 4 , 1 , 1 ) ;
1546: LD_INT 1
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: LD_INT 4
1559: PPUSH
1560: LD_INT 1
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: CALL 5991 0 6
1570: GO 1543
1572: POP
1573: POP
// end ;
1574: LD_VAR 0 1
1578: RET
// export function PrepareBase ; var blist , i , b , veh ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
1583: PPUSH
1584: PPUSH
1585: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
1586: LD_INT 71
1588: PPUSH
1589: LD_INT 5
1591: PPUSH
1592: LD_INT 1
1594: PPUSH
1595: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
1599: LD_ADDR_VAR 0 2
1603: PUSH
1604: LD_STRING GammaBase
1606: PPUSH
1607: EMPTY
1608: PPUSH
1609: CALL_OW 30
1613: ST_TO_ADDR
// uc_side := 1 ;
1614: LD_ADDR_OWVAR 20
1618: PUSH
1619: LD_INT 1
1621: ST_TO_ADDR
// uc_nation := 1 ;
1622: LD_ADDR_OWVAR 21
1626: PUSH
1627: LD_INT 1
1629: ST_TO_ADDR
// for i in blist do
1630: LD_ADDR_VAR 0 3
1634: PUSH
1635: LD_VAR 0 2
1639: PUSH
1640: FOR_IN
1641: IFFALSE 2049
// begin bc_type := i [ 1 ] ;
1643: LD_ADDR_OWVAR 42
1647: PUSH
1648: LD_VAR 0 3
1652: PUSH
1653: LD_INT 1
1655: ARRAY
1656: ST_TO_ADDR
// bc_level := i [ 5 ] ;
1657: LD_ADDR_OWVAR 43
1661: PUSH
1662: LD_VAR 0 3
1666: PUSH
1667: LD_INT 5
1669: ARRAY
1670: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
1671: LD_VAR 0 3
1675: PUSH
1676: LD_INT 1
1678: ARRAY
1679: PUSH
1680: LD_INT 7
1682: PUSH
1683: LD_INT 8
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: IN
1690: IFFALSE 1746
// begin bc_kind1 := i [ 7 ] ;
1692: LD_ADDR_OWVAR 44
1696: PUSH
1697: LD_VAR 0 3
1701: PUSH
1702: LD_INT 7
1704: ARRAY
1705: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1706: LD_STRING 06_remoteVehs_1
1708: PPUSH
1709: LD_INT 0
1711: PPUSH
1712: CALL_OW 30
1716: PUSH
1717: LD_INT 1
1719: EQUAL
1720: IFFALSE 1732
// begin bc_kind2 := 15 ;
1722: LD_ADDR_OWVAR 45
1726: PUSH
1727: LD_INT 15
1729: ST_TO_ADDR
// end else
1730: GO 1746
// begin bc_kind2 := i [ 8 ] ;
1732: LD_ADDR_OWVAR 45
1736: PUSH
1737: LD_VAR 0 3
1741: PUSH
1742: LD_INT 8
1744: ARRAY
1745: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
1746: LD_OWVAR 42
1750: PUSH
1751: LD_INT 0
1753: EQUAL
1754: IFFALSE 1872
// begin bc_type := b_warehouse ;
1756: LD_ADDR_OWVAR 42
1760: PUSH
1761: LD_INT 1
1763: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1764: LD_ADDR_EXP 36
1768: PUSH
1769: LD_VAR 0 3
1773: PUSH
1774: LD_INT 2
1776: ARRAY
1777: PPUSH
1778: LD_VAR 0 3
1782: PUSH
1783: LD_INT 3
1785: ARRAY
1786: PPUSH
1787: LD_VAR 0 3
1791: PUSH
1792: LD_INT 4
1794: ARRAY
1795: PPUSH
1796: CALL_OW 47
1800: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
1801: LD_EXP 36
1805: PPUSH
1806: LD_STRING gamma
1808: PPUSH
1809: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 200 , 150 , 100 ] [ Difficulty ] ) ;
1813: LD_EXP 36
1817: PPUSH
1818: CALL_OW 274
1822: PPUSH
1823: LD_INT 1
1825: PPUSH
1826: LD_INT 200
1828: PUSH
1829: LD_INT 150
1831: PUSH
1832: LD_INT 100
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: LIST
1839: PUSH
1840: LD_OWVAR 67
1844: ARRAY
1845: PPUSH
1846: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
1850: LD_EXP 36
1854: PPUSH
1855: CALL_OW 274
1859: PPUSH
1860: LD_INT 2
1862: PPUSH
1863: LD_INT 200
1865: PPUSH
1866: CALL_OW 277
// end else
1870: GO 2014
// begin if bc_type = 4 then
1872: LD_OWVAR 42
1876: PUSH
1877: LD_INT 4
1879: EQUAL
1880: IFFALSE 1929
// begin bc_type = 5 ;
1882: LD_ADDR_OWVAR 42
1886: PUSH
1887: LD_INT 5
1889: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1890: LD_ADDR_VAR 0 4
1894: PUSH
1895: LD_VAR 0 3
1899: PUSH
1900: LD_INT 2
1902: ARRAY
1903: PPUSH
1904: LD_VAR 0 3
1908: PUSH
1909: LD_INT 3
1911: ARRAY
1912: PPUSH
1913: LD_VAR 0 3
1917: PUSH
1918: LD_INT 4
1920: ARRAY
1921: PPUSH
1922: CALL_OW 47
1926: ST_TO_ADDR
// end else
1927: GO 2014
// begin bc_type := i [ 1 ] ;
1929: LD_ADDR_OWVAR 42
1933: PUSH
1934: LD_VAR 0 3
1938: PUSH
1939: LD_INT 1
1941: ARRAY
1942: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
1943: LD_STRING 06_remoteVehs_1
1945: PPUSH
1946: LD_INT 0
1948: PPUSH
1949: CALL_OW 30
1953: PUSH
1954: LD_INT 1
1956: EQUAL
1957: PUSH
1958: LD_OWVAR 42
1962: PUSH
1963: LD_INT 7
1965: EQUAL
1966: AND
1967: IFFALSE 1977
// bc_type := b_lab_full ;
1969: LD_ADDR_OWVAR 42
1973: PUSH
1974: LD_INT 8
1976: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1977: LD_ADDR_VAR 0 4
1981: PUSH
1982: LD_VAR 0 3
1986: PUSH
1987: LD_INT 2
1989: ARRAY
1990: PPUSH
1991: LD_VAR 0 3
1995: PUSH
1996: LD_INT 3
1998: ARRAY
1999: PPUSH
2000: LD_VAR 0 3
2004: PUSH
2005: LD_INT 4
2007: ARRAY
2008: PPUSH
2009: CALL_OW 47
2013: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2014: LD_VAR 0 4
2018: PPUSH
2019: CALL_OW 266
2023: PUSH
2024: LD_INT 32
2026: EQUAL
2027: IFFALSE 2047
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_VAR 0 3
2038: PUSH
2039: LD_INT 7
2041: ARRAY
2042: PPUSH
2043: CALL_OW 431
// end ;
2047: GO 1640
2049: POP
2050: POP
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2051: LD_STRING 06_remoteVehs_1
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 30
2061: PUSH
2062: LD_INT 1
2064: EQUAL
2065: IFFALSE 2269
// begin bc_type = 36 ;
2067: LD_ADDR_OWVAR 42
2071: PUSH
2072: LD_INT 36
2074: ST_TO_ADDR
// bc_level = 4 ;
2075: LD_ADDR_OWVAR 43
2079: PUSH
2080: LD_INT 4
2082: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2083: LD_INT 62
2085: PPUSH
2086: LD_INT 12
2088: PPUSH
2089: LD_INT 3
2091: PPUSH
2092: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2096: LD_ADDR_VAR 0 3
2100: PUSH
2101: DOUBLE
2102: LD_INT 1
2104: DEC
2105: ST_TO_ADDR
2106: LD_INT 3
2108: PUSH
2109: LD_INT 2
2111: PUSH
2112: LD_INT 2
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: PUSH
2120: LD_OWVAR 67
2124: ARRAY
2125: PUSH
2126: FOR_TO
2127: IFFALSE 2267
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2129: LD_ADDR_OWVAR 37
2133: PUSH
2134: LD_INT 3
2136: PUSH
2137: LD_INT 2
2139: PUSH
2140: LD_INT 3
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 1
2149: PPUSH
2150: LD_INT 2
2152: PPUSH
2153: CALL_OW 12
2157: ARRAY
2158: PUSH
2159: LD_INT 2
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_OWVAR 67
2171: ARRAY
2172: ST_TO_ADDR
// vc_engine = 1 ;
2173: LD_ADDR_OWVAR 39
2177: PUSH
2178: LD_INT 1
2180: ST_TO_ADDR
// vc_control = 2 ;
2181: LD_ADDR_OWVAR 38
2185: PUSH
2186: LD_INT 2
2188: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2189: LD_ADDR_OWVAR 40
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 4
2199: PUSH
2200: LD_INT 5
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: PUSH
2208: LD_INT 1
2210: PPUSH
2211: LD_INT 3
2213: PPUSH
2214: CALL_OW 12
2218: ARRAY
2219: ST_TO_ADDR
// veh = CreateVehicle ;
2220: LD_ADDR_VAR 0 5
2224: PUSH
2225: CALL_OW 45
2229: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
2230: LD_VAR 0 5
2234: PPUSH
2235: LD_EXP 36
2239: PPUSH
2240: CALL_OW 250
2244: PPUSH
2245: LD_EXP 36
2249: PPUSH
2250: CALL_OW 251
2254: PPUSH
2255: LD_INT 7
2257: PPUSH
2258: LD_INT 0
2260: PPUSH
2261: CALL_OW 50
// end ;
2265: GO 2126
2267: POP
2268: POP
// end ; end ;
2269: LD_VAR 0 1
2273: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
2274: LD_INT 0
2276: PPUSH
2277: PPUSH
2278: PPUSH
2279: PPUSH
// uc_side = 1 ;
2280: LD_ADDR_OWVAR 20
2284: PUSH
2285: LD_INT 1
2287: ST_TO_ADDR
// uc_nation = 1 ;
2288: LD_ADDR_OWVAR 21
2292: PUSH
2293: LD_INT 1
2295: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
2296: LD_ADDR_EXP 13
2300: PUSH
2301: LD_STRING 06c_Denis
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: CALL 5642 0 2
2311: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
2312: LD_EXP 13
2316: PPUSH
2317: LD_INT 4
2319: PPUSH
2320: LD_INT 0
2322: PPUSH
2323: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
2327: LD_ADDR_EXP 14
2331: PUSH
2332: LD_STRING 06c_Joan
2334: PPUSH
2335: LD_INT 1
2337: PPUSH
2338: CALL 5642 0 2
2342: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
2343: LD_EXP 14
2347: PPUSH
2348: LD_INT 4
2350: PPUSH
2351: LD_INT 0
2353: PPUSH
2354: CALL_OW 49
// if LoadVariable ( GladstoneIn07 , 0 ) = 0 then
2358: LD_STRING GladstoneIn07
2360: PPUSH
2361: LD_INT 0
2363: PPUSH
2364: CALL_OW 30
2368: PUSH
2369: LD_INT 0
2371: EQUAL
2372: IFFALSE 2440
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
2374: LD_ADDR_EXP 8
2378: PUSH
2379: LD_STRING 06c_Gladstone
2381: PPUSH
2382: LD_INT 1
2384: PPUSH
2385: CALL 5642 0 2
2389: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
2390: LD_EXP 8
2394: NOT
2395: PUSH
2396: LD_STRING GladstoneStayInDelta
2398: PPUSH
2399: LD_INT 0
2401: PPUSH
2402: CALL_OW 30
2406: AND
2407: IFFALSE 2425
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
2409: LD_ADDR_EXP 8
2413: PUSH
2414: LD_STRING 05_Gladstone
2416: PPUSH
2417: LD_INT 1
2419: PPUSH
2420: CALL 5642 0 2
2424: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
2425: LD_EXP 8
2429: PPUSH
2430: LD_INT 4
2432: PPUSH
2433: LD_INT 0
2435: PPUSH
2436: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
2440: LD_STRING LisaStayInDelta
2442: PPUSH
2443: LD_INT 0
2445: PPUSH
2446: CALL_OW 30
2450: IFFALSE 2483
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
2452: LD_ADDR_EXP 6
2456: PUSH
2457: LD_STRING 05_Lisa
2459: PPUSH
2460: LD_INT 1
2462: PPUSH
2463: CALL 5642 0 2
2467: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
2468: LD_EXP 6
2472: PPUSH
2473: LD_INT 4
2475: PPUSH
2476: LD_INT 0
2478: PPUSH
2479: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
2483: LD_STRING BobbyStayInDelta
2485: PPUSH
2486: LD_INT 0
2488: PPUSH
2489: CALL_OW 30
2493: IFFALSE 2526
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
2495: LD_ADDR_EXP 4
2499: PUSH
2500: LD_STRING 05_Bobby
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL 5642 0 2
2510: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
2511: LD_EXP 4
2515: PPUSH
2516: LD_INT 4
2518: PPUSH
2519: LD_INT 0
2521: PPUSH
2522: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
2526: LD_STRING CyrusStayInDelta
2528: PPUSH
2529: LD_INT 0
2531: PPUSH
2532: CALL_OW 30
2536: IFFALSE 2569
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
2538: LD_ADDR_EXP 5
2542: PUSH
2543: LD_STRING 05_Cyrus
2545: PPUSH
2546: LD_INT 1
2548: PPUSH
2549: CALL 5642 0 2
2553: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
2554: LD_EXP 5
2558: PPUSH
2559: LD_INT 4
2561: PPUSH
2562: LD_INT 0
2564: PPUSH
2565: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
2569: LD_STRING BrownStayInDelta
2571: PPUSH
2572: LD_INT 0
2574: PPUSH
2575: CALL_OW 30
2579: IFFALSE 2612
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
2581: LD_ADDR_EXP 2
2585: PUSH
2586: LD_STRING 05_Brown
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: CALL 5642 0 2
2596: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
2597: LD_EXP 2
2601: PPUSH
2602: LD_INT 4
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
2612: LD_STRING DonaldsonStayInDelta
2614: PPUSH
2615: LD_INT 0
2617: PPUSH
2618: CALL_OW 30
2622: IFFALSE 2655
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
2624: LD_ADDR_EXP 3
2628: PUSH
2629: LD_STRING 05_Donaldson
2631: PPUSH
2632: LD_INT 1
2634: PPUSH
2635: CALL 5642 0 2
2639: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
2640: LD_EXP 3
2644: PPUSH
2645: LD_INT 4
2647: PPUSH
2648: LD_INT 0
2650: PPUSH
2651: CALL_OW 49
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
2655: LD_ADDR_VAR 0 4
2659: PUSH
2660: LD_STRING OtherStayInDelta
2662: PPUSH
2663: CALL_OW 31
2667: ST_TO_ADDR
// if other then
2668: LD_VAR 0 4
2672: IFFALSE 2717
// for j = 1 to other do
2674: LD_ADDR_VAR 0 3
2678: PUSH
2679: DOUBLE
2680: LD_INT 1
2682: DEC
2683: ST_TO_ADDR
2684: LD_VAR 0 4
2688: PUSH
2689: FOR_TO
2690: IFFALSE 2715
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
2692: LD_VAR 0 4
2696: PUSH
2697: LD_VAR 0 3
2701: ARRAY
2702: PPUSH
2703: LD_INT 4
2705: PPUSH
2706: LD_INT 0
2708: PPUSH
2709: CALL_OW 49
2713: GO 2689
2715: POP
2716: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
2717: LD_ADDR_VAR 0 4
2721: PUSH
2722: LD_STRING 06_other_apemans
2724: PPUSH
2725: CALL_OW 31
2729: ST_TO_ADDR
// if other >= 5 then
2730: LD_VAR 0 4
2734: PUSH
2735: LD_INT 5
2737: GREATEREQUAL
2738: IFFALSE 2750
// j := 5 else
2740: LD_ADDR_VAR 0 3
2744: PUSH
2745: LD_INT 5
2747: ST_TO_ADDR
2748: GO 2760
// j := other ;
2750: LD_ADDR_VAR 0 3
2754: PUSH
2755: LD_VAR 0 4
2759: ST_TO_ADDR
// for i = 1 to j do
2760: LD_ADDR_VAR 0 2
2764: PUSH
2765: DOUBLE
2766: LD_INT 1
2768: DEC
2769: ST_TO_ADDR
2770: LD_VAR 0 3
2774: PUSH
2775: FOR_TO
2776: IFFALSE 2801
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
2778: LD_VAR 0 4
2782: PUSH
2783: LD_VAR 0 2
2787: ARRAY
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 0
2794: PPUSH
2795: CALL_OW 49
2799: GO 2775
2801: POP
2802: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
2803: LD_INT 4
2805: PPUSH
2806: LD_INT 22
2808: PUSH
2809: LD_INT 1
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 21
2818: PUSH
2819: LD_INT 1
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PPUSH
2830: CALL_OW 70
2834: PPUSH
2835: LD_INT 53
2837: PPUSH
2838: LD_INT 19
2840: PPUSH
2841: CALL_OW 111
// firstAttack = 1 ;
2845: LD_ADDR_EXP 32
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// end ;
2853: LD_VAR 0 1
2857: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
2858: LD_INT 0
2860: PPUSH
2861: PPUSH
2862: PPUSH
2863: PPUSH
2864: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
2865: LD_ADDR_VAR 0 4
2869: PUSH
2870: LD_STRING 07_vehicles
2872: PPUSH
2873: EMPTY
2874: PPUSH
2875: CALL_OW 30
2879: ST_TO_ADDR
// uc_side = 1 ;
2880: LD_ADDR_OWVAR 20
2884: PUSH
2885: LD_INT 1
2887: ST_TO_ADDR
// uc_nation = 1 ;
2888: LD_ADDR_OWVAR 21
2892: PUSH
2893: LD_INT 1
2895: ST_TO_ADDR
// if vehicles > 0 then
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 0
2903: GREATER
2904: IFFALSE 3043
// begin for i = 1 to vehicles do
2906: LD_ADDR_VAR 0 2
2910: PUSH
2911: DOUBLE
2912: LD_INT 1
2914: DEC
2915: ST_TO_ADDR
2916: LD_VAR 0 4
2920: PUSH
2921: FOR_TO
2922: IFFALSE 3041
// begin vc_chassis = vehicles [ i ] ;
2924: LD_ADDR_OWVAR 37
2928: PUSH
2929: LD_VAR 0 4
2933: PUSH
2934: LD_VAR 0 2
2938: ARRAY
2939: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
2940: LD_ADDR_OWVAR 39
2944: PUSH
2945: LD_VAR 0 4
2949: PUSH
2950: LD_VAR 0 2
2954: PUSH
2955: LD_INT 1
2957: PLUS
2958: ARRAY
2959: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
2960: LD_ADDR_OWVAR 38
2964: PUSH
2965: LD_VAR 0 4
2969: PUSH
2970: LD_VAR 0 2
2974: PUSH
2975: LD_INT 2
2977: PLUS
2978: ARRAY
2979: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
2980: LD_ADDR_OWVAR 40
2984: PUSH
2985: LD_VAR 0 4
2989: PUSH
2990: LD_VAR 0 2
2994: PUSH
2995: LD_INT 3
2997: PLUS
2998: ARRAY
2999: ST_TO_ADDR
// veh = CreateVehicle ;
3000: LD_ADDR_VAR 0 5
3004: PUSH
3005: CALL_OW 45
3009: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
3010: LD_VAR 0 5
3014: PPUSH
3015: LD_INT 4
3017: PPUSH
3018: LD_INT 0
3020: PPUSH
3021: CALL_OW 49
// i = i + 3 ;
3025: LD_ADDR_VAR 0 2
3029: PUSH
3030: LD_VAR 0 2
3034: PUSH
3035: LD_INT 3
3037: PLUS
3038: ST_TO_ADDR
// end ;
3039: GO 2921
3041: POP
3042: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3043: LD_ADDR_EXP 1
3047: PUSH
3048: LD_EXP 41
3052: PUSH
3053: LD_STRING JMM
3055: STR
3056: PPUSH
3057: LD_INT 1
3059: PPUSH
3060: CALL 5642 0 2
3064: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3065: LD_EXP 11
3069: PUSH
3070: LD_INT 1
3072: EQUAL
3073: PUSH
3074: LD_EXP 11
3078: PUSH
3079: LD_INT 3
3081: EQUAL
3082: OR
3083: IFFALSE 3107
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
3085: LD_ADDR_EXP 2
3089: PUSH
3090: LD_EXP 41
3094: PUSH
3095: LD_STRING Brown
3097: STR
3098: PPUSH
3099: LD_INT 1
3101: PPUSH
3102: CALL 5642 0 2
3106: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
3107: LD_EXP 11
3111: PUSH
3112: LD_INT 2
3114: EQUAL
3115: PUSH
3116: LD_EXP 11
3120: PUSH
3121: LD_INT 3
3123: EQUAL
3124: OR
3125: IFFALSE 3149
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
3127: LD_ADDR_EXP 3
3131: PUSH
3132: LD_EXP 41
3136: PUSH
3137: LD_STRING Donaldson
3139: STR
3140: PPUSH
3141: LD_INT 1
3143: PPUSH
3144: CALL 5642 0 2
3148: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3149: LD_ADDR_EXP 4
3153: PUSH
3154: LD_EXP 41
3158: PUSH
3159: LD_STRING Bobby
3161: STR
3162: PPUSH
3163: LD_INT 1
3165: PPUSH
3166: CALL 5642 0 2
3170: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3171: LD_ADDR_EXP 5
3175: PUSH
3176: LD_EXP 41
3180: PUSH
3181: LD_STRING Cyrus
3183: STR
3184: PPUSH
3185: LD_INT 1
3187: PPUSH
3188: CALL 5642 0 2
3192: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3193: LD_ADDR_EXP 6
3197: PUSH
3198: LD_EXP 41
3202: PUSH
3203: LD_STRING Lisa
3205: STR
3206: PPUSH
3207: LD_INT 1
3209: PPUSH
3210: CALL 5642 0 2
3214: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3215: LD_ADDR_EXP 7
3219: PUSH
3220: LD_EXP 41
3224: PUSH
3225: LD_STRING Frank
3227: STR
3228: PPUSH
3229: LD_INT 1
3231: PPUSH
3232: CALL 5642 0 2
3236: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3237: LD_ADDR_EXP 8
3241: PUSH
3242: LD_EXP 41
3246: PUSH
3247: LD_STRING Gladstone
3249: STR
3250: PPUSH
3251: LD_INT 1
3253: PPUSH
3254: CALL 5642 0 2
3258: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3259: LD_ADDR_EXP 9
3263: PUSH
3264: LD_EXP 41
3268: PUSH
3269: LD_STRING Kikuchi
3271: STR
3272: PPUSH
3273: LD_INT 1
3275: PPUSH
3276: CALL 5642 0 2
3280: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3281: LD_EXP 11
3285: PUSH
3286: LD_INT 1
3288: EQUAL
3289: PUSH
3290: LD_EXP 11
3294: PUSH
3295: LD_INT 3
3297: EQUAL
3298: OR
3299: IFFALSE 3316
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3301: LD_EXP 2
3305: PPUSH
3306: LD_INT 4
3308: PPUSH
3309: LD_INT 0
3311: PPUSH
3312: CALL_OW 49
// if gammaCommander = 2 or gammaCommander = 3 then
3316: LD_EXP 11
3320: PUSH
3321: LD_INT 2
3323: EQUAL
3324: PUSH
3325: LD_EXP 11
3329: PUSH
3330: LD_INT 3
3332: EQUAL
3333: OR
3334: IFFALSE 3351
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3336: LD_EXP 3
3340: PPUSH
3341: LD_INT 4
3343: PPUSH
3344: LD_INT 0
3346: PPUSH
3347: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3351: LD_ADDR_VAR 0 5
3355: PUSH
3356: LD_INT 4
3358: PPUSH
3359: LD_INT 22
3361: PUSH
3362: LD_INT 1
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 21
3371: PUSH
3372: LD_INT 2
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 58
3381: PUSH
3382: EMPTY
3383: LIST
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: LIST
3389: PPUSH
3390: CALL_OW 70
3394: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3395: LD_ADDR_EXP 1
3399: PUSH
3400: LD_EXP 41
3404: PUSH
3405: LD_STRING JMM
3407: STR
3408: PPUSH
3409: LD_INT 1
3411: PPUSH
3412: CALL 5642 0 2
3416: ST_TO_ADDR
// if veh > 0 then
3417: LD_VAR 0 5
3421: PUSH
3422: LD_INT 0
3424: GREATER
3425: IFFALSE 3447
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
3427: LD_EXP 1
3431: PPUSH
3432: LD_VAR 0 5
3436: PUSH
3437: LD_INT 1
3439: ARRAY
3440: PPUSH
3441: CALL_OW 52
// end else
3445: GO 3462
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
3447: LD_EXP 1
3451: PPUSH
3452: LD_INT 4
3454: PPUSH
3455: LD_INT 0
3457: PPUSH
3458: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3462: LD_ADDR_VAR 0 5
3466: PUSH
3467: LD_INT 4
3469: PPUSH
3470: LD_INT 22
3472: PUSH
3473: LD_INT 1
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: LD_INT 21
3482: PUSH
3483: LD_INT 2
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 58
3492: PUSH
3493: EMPTY
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: PPUSH
3501: CALL_OW 70
3505: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3506: LD_ADDR_EXP 4
3510: PUSH
3511: LD_EXP 41
3515: PUSH
3516: LD_STRING Bobby
3518: STR
3519: PPUSH
3520: LD_INT 1
3522: PPUSH
3523: CALL 5642 0 2
3527: ST_TO_ADDR
// if veh > 0 then
3528: LD_VAR 0 5
3532: PUSH
3533: LD_INT 0
3535: GREATER
3536: IFFALSE 3558
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
3538: LD_EXP 4
3542: PPUSH
3543: LD_VAR 0 5
3547: PUSH
3548: LD_INT 1
3550: ARRAY
3551: PPUSH
3552: CALL_OW 52
// end else
3556: GO 3573
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3558: LD_EXP 4
3562: PPUSH
3563: LD_INT 4
3565: PPUSH
3566: LD_INT 0
3568: PPUSH
3569: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3573: LD_ADDR_VAR 0 5
3577: PUSH
3578: LD_INT 4
3580: PPUSH
3581: LD_INT 22
3583: PUSH
3584: LD_INT 1
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: PUSH
3591: LD_INT 21
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 58
3603: PUSH
3604: EMPTY
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: LIST
3611: PPUSH
3612: CALL_OW 70
3616: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3617: LD_ADDR_EXP 5
3621: PUSH
3622: LD_EXP 41
3626: PUSH
3627: LD_STRING Cyrus
3629: STR
3630: PPUSH
3631: LD_INT 1
3633: PPUSH
3634: CALL 5642 0 2
3638: ST_TO_ADDR
// if veh > 0 then
3639: LD_VAR 0 5
3643: PUSH
3644: LD_INT 0
3646: GREATER
3647: IFFALSE 3669
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
3649: LD_EXP 5
3653: PPUSH
3654: LD_VAR 0 5
3658: PUSH
3659: LD_INT 1
3661: ARRAY
3662: PPUSH
3663: CALL_OW 52
// end else
3667: GO 3684
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3669: LD_EXP 5
3673: PPUSH
3674: LD_INT 4
3676: PPUSH
3677: LD_INT 0
3679: PPUSH
3680: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3684: LD_ADDR_VAR 0 5
3688: PUSH
3689: LD_INT 4
3691: PPUSH
3692: LD_INT 22
3694: PUSH
3695: LD_INT 1
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: LD_INT 21
3704: PUSH
3705: LD_INT 2
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: LD_INT 58
3714: PUSH
3715: EMPTY
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: LIST
3722: PPUSH
3723: CALL_OW 70
3727: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3728: LD_ADDR_EXP 6
3732: PUSH
3733: LD_EXP 41
3737: PUSH
3738: LD_STRING Lisa
3740: STR
3741: PPUSH
3742: LD_INT 1
3744: PPUSH
3745: CALL 5642 0 2
3749: ST_TO_ADDR
// if veh > 0 then
3750: LD_VAR 0 5
3754: PUSH
3755: LD_INT 0
3757: GREATER
3758: IFFALSE 3780
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
3760: LD_EXP 6
3764: PPUSH
3765: LD_VAR 0 5
3769: PUSH
3770: LD_INT 1
3772: ARRAY
3773: PPUSH
3774: CALL_OW 52
// end else
3778: GO 3795
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3780: LD_EXP 6
3784: PPUSH
3785: LD_INT 4
3787: PPUSH
3788: LD_INT 0
3790: PPUSH
3791: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3795: LD_ADDR_VAR 0 5
3799: PUSH
3800: LD_INT 4
3802: PPUSH
3803: LD_INT 22
3805: PUSH
3806: LD_INT 1
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 21
3815: PUSH
3816: LD_INT 2
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 58
3825: PUSH
3826: EMPTY
3827: LIST
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: LIST
3833: PPUSH
3834: CALL_OW 70
3838: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3839: LD_ADDR_EXP 7
3843: PUSH
3844: LD_EXP 41
3848: PUSH
3849: LD_STRING Frank
3851: STR
3852: PPUSH
3853: LD_INT 1
3855: PPUSH
3856: CALL 5642 0 2
3860: ST_TO_ADDR
// if veh > 0 then
3861: LD_VAR 0 5
3865: PUSH
3866: LD_INT 0
3868: GREATER
3869: IFFALSE 3891
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
3871: LD_EXP 7
3875: PPUSH
3876: LD_VAR 0 5
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: PPUSH
3885: CALL_OW 52
// end else
3889: GO 3906
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
3891: LD_EXP 7
3895: PPUSH
3896: LD_INT 4
3898: PPUSH
3899: LD_INT 0
3901: PPUSH
3902: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3906: LD_ADDR_VAR 0 5
3910: PUSH
3911: LD_INT 4
3913: PPUSH
3914: LD_INT 22
3916: PUSH
3917: LD_INT 1
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PUSH
3924: LD_INT 21
3926: PUSH
3927: LD_INT 2
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PUSH
3934: LD_INT 58
3936: PUSH
3937: EMPTY
3938: LIST
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: LIST
3944: PPUSH
3945: CALL_OW 70
3949: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3950: LD_ADDR_EXP 8
3954: PUSH
3955: LD_EXP 41
3959: PUSH
3960: LD_STRING Gladstone
3962: STR
3963: PPUSH
3964: LD_INT 1
3966: PPUSH
3967: CALL 5642 0 2
3971: ST_TO_ADDR
// if veh > 0 then
3972: LD_VAR 0 5
3976: PUSH
3977: LD_INT 0
3979: GREATER
3980: IFFALSE 4002
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
3982: LD_EXP 8
3986: PPUSH
3987: LD_VAR 0 5
3991: PUSH
3992: LD_INT 1
3994: ARRAY
3995: PPUSH
3996: CALL_OW 52
// end else
4000: GO 4017
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4002: LD_EXP 8
4006: PPUSH
4007: LD_INT 4
4009: PPUSH
4010: LD_INT 0
4012: PPUSH
4013: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4017: LD_ADDR_VAR 0 5
4021: PUSH
4022: LD_INT 4
4024: PPUSH
4025: LD_INT 22
4027: PUSH
4028: LD_INT 1
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: PUSH
4035: LD_INT 21
4037: PUSH
4038: LD_INT 2
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: LD_INT 58
4047: PUSH
4048: EMPTY
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PPUSH
4056: CALL_OW 70
4060: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4061: LD_ADDR_EXP 9
4065: PUSH
4066: LD_EXP 41
4070: PUSH
4071: LD_STRING Kikuchi
4073: STR
4074: PPUSH
4075: LD_INT 1
4077: PPUSH
4078: CALL 5642 0 2
4082: ST_TO_ADDR
// if veh > 0 then
4083: LD_VAR 0 5
4087: PUSH
4088: LD_INT 0
4090: GREATER
4091: IFFALSE 4113
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
4093: LD_EXP 9
4097: PPUSH
4098: LD_VAR 0 5
4102: PUSH
4103: LD_INT 1
4105: ARRAY
4106: PPUSH
4107: CALL_OW 52
// end else
4111: GO 4128
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
4113: LD_EXP 9
4117: PPUSH
4118: LD_INT 4
4120: PPUSH
4121: LD_INT 0
4123: PPUSH
4124: CALL_OW 49
// end ; other = CreateCharacterSet ( 07c_others ) ;
4128: LD_ADDR_VAR 0 3
4132: PUSH
4133: LD_STRING 07c_others
4135: PPUSH
4136: CALL_OW 31
4140: ST_TO_ADDR
// for i in other do
4141: LD_ADDR_VAR 0 2
4145: PUSH
4146: LD_VAR 0 3
4150: PUSH
4151: FOR_IN
4152: IFFALSE 4245
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4154: LD_ADDR_VAR 0 5
4158: PUSH
4159: LD_INT 4
4161: PPUSH
4162: LD_INT 22
4164: PUSH
4165: LD_INT 1
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_INT 21
4174: PUSH
4175: LD_INT 2
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PUSH
4182: LD_INT 58
4184: PUSH
4185: EMPTY
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 70
4197: ST_TO_ADDR
// if veh > 0 then
4198: LD_VAR 0 5
4202: PUSH
4203: LD_INT 0
4205: GREATER
4206: IFFALSE 4228
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 5
4217: PUSH
4218: LD_INT 1
4220: ARRAY
4221: PPUSH
4222: CALL_OW 52
// end else
4226: GO 4243
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4228: LD_VAR 0 2
4232: PPUSH
4233: LD_INT 4
4235: PPUSH
4236: LD_INT 0
4238: PPUSH
4239: CALL_OW 49
// end ; end ;
4243: GO 4151
4245: POP
4246: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
4247: LD_INT 4
4249: PPUSH
4250: LD_INT 22
4252: PUSH
4253: LD_INT 1
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PUSH
4260: EMPTY
4261: LIST
4262: PPUSH
4263: CALL_OW 70
4267: PPUSH
4268: LD_INT 53
4270: PPUSH
4271: LD_INT 19
4273: PPUSH
4274: CALL_OW 111
// end ;
4278: LD_VAR 0 1
4282: RET
// export function PrepareSikorsky ; begin
4283: LD_INT 0
4285: PPUSH
// uc_side = 4 ;
4286: LD_ADDR_OWVAR 20
4290: PUSH
4291: LD_INT 4
4293: ST_TO_ADDR
// uc_nation = 1 ;
4294: LD_ADDR_OWVAR 21
4298: PUSH
4299: LD_INT 1
4301: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
4302: LD_ADDR_EXP 15
4306: PUSH
4307: LD_STRING Sikorski
4309: PPUSH
4310: LD_INT 0
4312: PPUSH
4313: CALL 5642 0 2
4317: ST_TO_ADDR
// vc_engine = 1 ;
4318: LD_ADDR_OWVAR 39
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// vc_control = 1 ;
4326: LD_ADDR_OWVAR 38
4330: PUSH
4331: LD_INT 1
4333: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
4334: LD_ADDR_OWVAR 40
4338: PUSH
4339: LD_INT 5
4341: PUSH
4342: LD_INT 3
4344: PUSH
4345: LD_INT 4
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: LIST
4352: PUSH
4353: LD_OWVAR 67
4357: ARRAY
4358: ST_TO_ADDR
// vc_chassis = 4 ;
4359: LD_ADDR_OWVAR 37
4363: PUSH
4364: LD_INT 4
4366: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
4367: LD_ADDR_EXP 16
4371: PUSH
4372: CALL_OW 45
4376: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
4377: LD_EXP 16
4381: PPUSH
4382: LD_INT 9
4384: PPUSH
4385: LD_INT 0
4387: PPUSH
4388: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
4392: LD_EXP 15
4396: PPUSH
4397: LD_EXP 16
4401: PPUSH
4402: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
4406: LD_EXP 16
4410: PPUSH
4411: LD_INT 5
4413: PPUSH
4414: CALL_OW 113
// end ;
4418: LD_VAR 0 1
4422: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
4423: LD_INT 0
4425: PPUSH
4426: PPUSH
4427: PPUSH
4428: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_INT 8
4441: PUSH
4442: LD_INT 7
4444: PUSH
4445: LD_INT 7
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: LIST
4452: PUSH
4453: LD_OWVAR 67
4457: ARRAY
4458: PUSH
4459: FOR_TO
4460: IFFALSE 4557
// begin uc_side = 4 ;
4462: LD_ADDR_OWVAR 20
4466: PUSH
4467: LD_INT 4
4469: ST_TO_ADDR
// uc_nation = 1 ;
4470: LD_ADDR_OWVAR 21
4474: PUSH
4475: LD_INT 1
4477: ST_TO_ADDR
// hc_name =  ;
4478: LD_ADDR_OWVAR 26
4482: PUSH
4483: LD_STRING 
4485: ST_TO_ADDR
// hc_gallery =  ;
4486: LD_ADDR_OWVAR 33
4490: PUSH
4491: LD_STRING 
4493: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
4494: LD_INT 0
4496: PPUSH
4497: LD_INT 1
4499: PPUSH
4500: LD_INT 5
4502: PPUSH
4503: LD_INT 8
4505: PPUSH
4506: CALL_OW 12
4510: PPUSH
4511: CALL_OW 380
// un = CreateHuman ;
4515: LD_ADDR_VAR 0 3
4519: PUSH
4520: CALL_OW 44
4524: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4525: LD_VAR 0 3
4529: PPUSH
4530: LD_INT 9
4532: PPUSH
4533: LD_INT 0
4535: PPUSH
4536: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
4540: LD_VAR 0 3
4544: PPUSH
4545: LD_INT 53
4547: PPUSH
4548: LD_INT 23
4550: PPUSH
4551: CALL_OW 111
// end ;
4555: GO 4459
4557: POP
4558: POP
// for i = 1 to 3 do
4559: LD_ADDR_VAR 0 2
4563: PUSH
4564: DOUBLE
4565: LD_INT 1
4567: DEC
4568: ST_TO_ADDR
4569: LD_INT 3
4571: PUSH
4572: FOR_TO
4573: IFFALSE 4670
// begin uc_side = 4 ;
4575: LD_ADDR_OWVAR 20
4579: PUSH
4580: LD_INT 4
4582: ST_TO_ADDR
// uc_nation = 1 ;
4583: LD_ADDR_OWVAR 21
4587: PUSH
4588: LD_INT 1
4590: ST_TO_ADDR
// hc_name =  ;
4591: LD_ADDR_OWVAR 26
4595: PUSH
4596: LD_STRING 
4598: ST_TO_ADDR
// hc_gallery =  ;
4599: LD_ADDR_OWVAR 33
4603: PUSH
4604: LD_STRING 
4606: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
4607: LD_INT 0
4609: PPUSH
4610: LD_INT 4
4612: PPUSH
4613: LD_INT 5
4615: PPUSH
4616: LD_INT 8
4618: PPUSH
4619: CALL_OW 12
4623: PPUSH
4624: CALL_OW 380
// un = CreateHuman ;
4628: LD_ADDR_VAR 0 3
4632: PUSH
4633: CALL_OW 44
4637: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4638: LD_VAR 0 3
4642: PPUSH
4643: LD_INT 9
4645: PPUSH
4646: LD_INT 0
4648: PPUSH
4649: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
4653: LD_VAR 0 3
4657: PPUSH
4658: LD_INT 53
4660: PPUSH
4661: LD_INT 23
4663: PPUSH
4664: CALL_OW 111
// end ;
4668: GO 4572
4670: POP
4671: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: DOUBLE
4678: LD_INT 1
4680: DEC
4681: ST_TO_ADDR
4682: LD_INT 9
4684: PUSH
4685: LD_INT 8
4687: PUSH
4688: LD_INT 7
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: PUSH
4696: LD_OWVAR 67
4700: ARRAY
4701: PUSH
4702: FOR_TO
4703: IFFALSE 4899
// begin uc_side = 4 ;
4705: LD_ADDR_OWVAR 20
4709: PUSH
4710: LD_INT 4
4712: ST_TO_ADDR
// uc_nation = 1 ;
4713: LD_ADDR_OWVAR 21
4717: PUSH
4718: LD_INT 1
4720: ST_TO_ADDR
// vc_engine = 1 ;
4721: LD_ADDR_OWVAR 39
4725: PUSH
4726: LD_INT 1
4728: ST_TO_ADDR
// vc_control = 1 ;
4729: LD_ADDR_OWVAR 38
4733: PUSH
4734: LD_INT 1
4736: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
4737: LD_ADDR_OWVAR 40
4741: PUSH
4742: LD_INT 3
4744: PUSH
4745: LD_INT 4
4747: PUSH
4748: LD_INT 5
4750: PUSH
4751: LD_INT 6
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 1
4762: PPUSH
4763: LD_INT 4
4765: PPUSH
4766: CALL_OW 12
4770: ARRAY
4771: ST_TO_ADDR
// vc_chassis = 4 ;
4772: LD_ADDR_OWVAR 37
4776: PUSH
4777: LD_INT 4
4779: ST_TO_ADDR
// veh = CreateVehicle ;
4780: LD_ADDR_VAR 0 4
4784: PUSH
4785: CALL_OW 45
4789: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
4790: LD_VAR 0 4
4794: PPUSH
4795: LD_INT 9
4797: PPUSH
4798: LD_INT 0
4800: PPUSH
4801: CALL_OW 49
// hc_name =  ;
4805: LD_ADDR_OWVAR 26
4809: PUSH
4810: LD_STRING 
4812: ST_TO_ADDR
// hc_gallery =  ;
4813: LD_ADDR_OWVAR 33
4817: PUSH
4818: LD_STRING 
4820: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
4821: LD_INT 0
4823: PPUSH
4824: LD_INT 3
4826: PPUSH
4827: LD_INT 5
4829: PPUSH
4830: LD_INT 8
4832: PPUSH
4833: CALL_OW 12
4837: PPUSH
4838: CALL_OW 380
// un = CreateHuman ;
4842: LD_ADDR_VAR 0 3
4846: PUSH
4847: CALL_OW 44
4851: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4852: LD_VAR 0 3
4856: PPUSH
4857: LD_VAR 0 4
4861: PPUSH
4862: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
4866: LD_VAR 0 4
4870: PUSH
4871: LD_VAR 0 3
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PPUSH
4880: LD_INT 53
4882: PPUSH
4883: LD_INT 23
4885: PPUSH
4886: CALL_OW 111
// wait ( 0 0$5 ) ;
4890: LD_INT 175
4892: PPUSH
4893: CALL_OW 67
// end ;
4897: GO 4702
4899: POP
4900: POP
// end ; end_of_file
4901: LD_VAR 0 1
4905: RET
// export function PrepareRussianCommander ; begin
4906: LD_INT 0
4908: PPUSH
// uc_side = 3 ;
4909: LD_ADDR_OWVAR 20
4913: PUSH
4914: LD_INT 3
4916: ST_TO_ADDR
// uc_nation = 3 ;
4917: LD_ADDR_OWVAR 21
4921: PUSH
4922: LD_INT 3
4924: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
4925: LD_ADDR_EXP 23
4929: PUSH
4930: LD_STRING Borodin
4932: PPUSH
4933: CALL_OW 25
4937: ST_TO_ADDR
// PlaceUnitArea ( Borodin , RussianSpawn , false ) ;
4938: LD_EXP 23
4942: PPUSH
4943: LD_INT 3
4945: PPUSH
4946: LD_INT 0
4948: PPUSH
4949: CALL_OW 49
// end ;
4953: LD_VAR 0 1
4957: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
4958: LD_INT 0
4960: PPUSH
4961: PPUSH
4962: PPUSH
4963: PPUSH
// for i = 1 to 10 do
4964: LD_ADDR_VAR 0 2
4968: PUSH
4969: DOUBLE
4970: LD_INT 1
4972: DEC
4973: ST_TO_ADDR
4974: LD_INT 10
4976: PUSH
4977: FOR_TO
4978: IFFALSE 5052
// begin uc_side = 6 ;
4980: LD_ADDR_OWVAR 20
4984: PUSH
4985: LD_INT 6
4987: ST_TO_ADDR
// uc_nation = 3 ;
4988: LD_ADDR_OWVAR 21
4992: PUSH
4993: LD_INT 3
4995: ST_TO_ADDR
// hc_gallery =  ;
4996: LD_ADDR_OWVAR 33
5000: PUSH
5001: LD_STRING 
5003: ST_TO_ADDR
// hc_name =  ;
5004: LD_ADDR_OWVAR 26
5008: PUSH
5009: LD_STRING 
5011: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
5012: LD_INT 0
5014: PPUSH
5015: LD_INT 1
5017: PPUSH
5018: LD_INT 3
5020: PPUSH
5021: CALL_OW 380
// un = CreateHuman ;
5025: LD_ADDR_VAR 0 3
5029: PUSH
5030: CALL_OW 44
5034: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
5035: LD_VAR 0 3
5039: PPUSH
5040: LD_INT 1
5042: PPUSH
5043: LD_INT 0
5045: PPUSH
5046: CALL_OW 49
// end ;
5050: GO 4977
5052: POP
5053: POP
// for i = 1 to 3 do
5054: LD_ADDR_VAR 0 2
5058: PUSH
5059: DOUBLE
5060: LD_INT 1
5062: DEC
5063: ST_TO_ADDR
5064: LD_INT 3
5066: PUSH
5067: FOR_TO
5068: IFFALSE 5217
// begin uc_side = 6 ;
5070: LD_ADDR_OWVAR 20
5074: PUSH
5075: LD_INT 6
5077: ST_TO_ADDR
// uc_nation = 3 ;
5078: LD_ADDR_OWVAR 21
5082: PUSH
5083: LD_INT 3
5085: ST_TO_ADDR
// vc_engine = 1 ;
5086: LD_ADDR_OWVAR 39
5090: PUSH
5091: LD_INT 1
5093: ST_TO_ADDR
// vc_control = 1 ;
5094: LD_ADDR_OWVAR 38
5098: PUSH
5099: LD_INT 1
5101: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
5102: LD_ADDR_OWVAR 40
5106: PUSH
5107: LD_INT 43
5109: PUSH
5110: LD_INT 44
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PUSH
5117: LD_INT 1
5119: PPUSH
5120: LD_INT 2
5122: PPUSH
5123: CALL_OW 12
5127: ARRAY
5128: ST_TO_ADDR
// vc_chassis = 22 ;
5129: LD_ADDR_OWVAR 37
5133: PUSH
5134: LD_INT 22
5136: ST_TO_ADDR
// veh = CreateVehicle ;
5137: LD_ADDR_VAR 0 4
5141: PUSH
5142: CALL_OW 45
5146: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
5147: LD_VAR 0 4
5151: PPUSH
5152: LD_INT 2
5154: PPUSH
5155: LD_INT 0
5157: PPUSH
5158: CALL_OW 49
// hc_gallery =  ;
5162: LD_ADDR_OWVAR 33
5166: PUSH
5167: LD_STRING 
5169: ST_TO_ADDR
// hc_name =  ;
5170: LD_ADDR_OWVAR 26
5174: PUSH
5175: LD_STRING 
5177: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
5178: LD_INT 0
5180: PPUSH
5181: LD_INT 3
5183: PPUSH
5184: LD_INT 4
5186: PPUSH
5187: CALL_OW 380
// un = CreateHuman ;
5191: LD_ADDR_VAR 0 3
5195: PUSH
5196: CALL_OW 44
5200: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5201: LD_VAR 0 3
5205: PPUSH
5206: LD_VAR 0 4
5210: PPUSH
5211: CALL_OW 52
// end ;
5215: GO 5067
5217: POP
5218: POP
// end ;
5219: LD_VAR 0 1
5223: RET
// export function PrepareRussians ; var i , un ; begin
5224: LD_INT 0
5226: PPUSH
5227: PPUSH
5228: PPUSH
// for i = 1 to 14 do
5229: LD_ADDR_VAR 0 2
5233: PUSH
5234: DOUBLE
5235: LD_INT 1
5237: DEC
5238: ST_TO_ADDR
5239: LD_INT 14
5241: PUSH
5242: FOR_TO
5243: IFFALSE 5329
// begin uc_side = 3 ;
5245: LD_ADDR_OWVAR 20
5249: PUSH
5250: LD_INT 3
5252: ST_TO_ADDR
// uc_nation = 3 ;
5253: LD_ADDR_OWVAR 21
5257: PUSH
5258: LD_INT 3
5260: ST_TO_ADDR
// hc_gallery =  ;
5261: LD_ADDR_OWVAR 33
5265: PUSH
5266: LD_STRING 
5268: ST_TO_ADDR
// hc_name =  ;
5269: LD_ADDR_OWVAR 26
5273: PUSH
5274: LD_STRING 
5276: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5277: LD_INT 0
5279: PPUSH
5280: LD_INT 1
5282: PPUSH
5283: LD_EXP 24
5287: PPUSH
5288: LD_EXP 25
5292: PPUSH
5293: CALL_OW 12
5297: PPUSH
5298: CALL_OW 380
// un = CreateHuman ;
5302: LD_ADDR_VAR 0 3
5306: PUSH
5307: CALL_OW 44
5311: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5312: LD_VAR 0 3
5316: PPUSH
5317: LD_INT 3
5319: PPUSH
5320: LD_INT 0
5322: PPUSH
5323: CALL_OW 49
// end ;
5327: GO 5242
5329: POP
5330: POP
// for i = 1 to 6 do
5331: LD_ADDR_VAR 0 2
5335: PUSH
5336: DOUBLE
5337: LD_INT 1
5339: DEC
5340: ST_TO_ADDR
5341: LD_INT 6
5343: PUSH
5344: FOR_TO
5345: IFFALSE 5431
// begin uc_side = 3 ;
5347: LD_ADDR_OWVAR 20
5351: PUSH
5352: LD_INT 3
5354: ST_TO_ADDR
// uc_nation = 3 ;
5355: LD_ADDR_OWVAR 21
5359: PUSH
5360: LD_INT 3
5362: ST_TO_ADDR
// hc_gallery =  ;
5363: LD_ADDR_OWVAR 33
5367: PUSH
5368: LD_STRING 
5370: ST_TO_ADDR
// hc_name =  ;
5371: LD_ADDR_OWVAR 26
5375: PUSH
5376: LD_STRING 
5378: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5379: LD_INT 0
5381: PPUSH
5382: LD_INT 2
5384: PPUSH
5385: LD_EXP 24
5389: PPUSH
5390: LD_EXP 25
5394: PPUSH
5395: CALL_OW 12
5399: PPUSH
5400: CALL_OW 380
// un = CreateHuman ;
5404: LD_ADDR_VAR 0 3
5408: PUSH
5409: CALL_OW 44
5413: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5414: LD_VAR 0 3
5418: PPUSH
5419: LD_INT 3
5421: PPUSH
5422: LD_INT 0
5424: PPUSH
5425: CALL_OW 49
// end ;
5429: GO 5344
5431: POP
5432: POP
// for i = 1 to 6 do
5433: LD_ADDR_VAR 0 2
5437: PUSH
5438: DOUBLE
5439: LD_INT 1
5441: DEC
5442: ST_TO_ADDR
5443: LD_INT 6
5445: PUSH
5446: FOR_TO
5447: IFFALSE 5533
// begin uc_side = 3 ;
5449: LD_ADDR_OWVAR 20
5453: PUSH
5454: LD_INT 3
5456: ST_TO_ADDR
// uc_nation = 3 ;
5457: LD_ADDR_OWVAR 21
5461: PUSH
5462: LD_INT 3
5464: ST_TO_ADDR
// hc_gallery =  ;
5465: LD_ADDR_OWVAR 33
5469: PUSH
5470: LD_STRING 
5472: ST_TO_ADDR
// hc_name =  ;
5473: LD_ADDR_OWVAR 26
5477: PUSH
5478: LD_STRING 
5480: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5481: LD_INT 0
5483: PPUSH
5484: LD_INT 3
5486: PPUSH
5487: LD_EXP 24
5491: PPUSH
5492: LD_EXP 25
5496: PPUSH
5497: CALL_OW 12
5501: PPUSH
5502: CALL_OW 380
// un = CreateHuman ;
5506: LD_ADDR_VAR 0 3
5510: PUSH
5511: CALL_OW 44
5515: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5516: LD_VAR 0 3
5520: PPUSH
5521: LD_INT 3
5523: PPUSH
5524: LD_INT 0
5526: PPUSH
5527: CALL_OW 49
// end ;
5531: GO 5446
5533: POP
5534: POP
// for i = 1 to 4 do
5535: LD_ADDR_VAR 0 2
5539: PUSH
5540: DOUBLE
5541: LD_INT 1
5543: DEC
5544: ST_TO_ADDR
5545: LD_INT 4
5547: PUSH
5548: FOR_TO
5549: IFFALSE 5635
// begin uc_side = 3 ;
5551: LD_ADDR_OWVAR 20
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// uc_nation = 3 ;
5559: LD_ADDR_OWVAR 21
5563: PUSH
5564: LD_INT 3
5566: ST_TO_ADDR
// hc_gallery =  ;
5567: LD_ADDR_OWVAR 33
5571: PUSH
5572: LD_STRING 
5574: ST_TO_ADDR
// hc_name =  ;
5575: LD_ADDR_OWVAR 26
5579: PUSH
5580: LD_STRING 
5582: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5583: LD_INT 0
5585: PPUSH
5586: LD_INT 4
5588: PPUSH
5589: LD_EXP 24
5593: PPUSH
5594: LD_EXP 25
5598: PPUSH
5599: CALL_OW 12
5603: PPUSH
5604: CALL_OW 380
// un = CreateHuman ;
5608: LD_ADDR_VAR 0 3
5612: PUSH
5613: CALL_OW 44
5617: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5618: LD_VAR 0 3
5622: PPUSH
5623: LD_INT 3
5625: PPUSH
5626: LD_INT 0
5628: PPUSH
5629: CALL_OW 49
// end ;
5633: GO 5548
5635: POP
5636: POP
// end ; end_of_file
5637: LD_VAR 0 1
5641: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5642: LD_INT 0
5644: PPUSH
5645: PPUSH
// if exist_mode then
5646: LD_VAR 0 2
5650: IFFALSE 5669
// unit := CreateCharacter ( ident ) else
5652: LD_ADDR_VAR 0 4
5656: PUSH
5657: LD_VAR 0 1
5661: PPUSH
5662: CALL_OW 34
5666: ST_TO_ADDR
5667: GO 5684
// unit := NewCharacter ( ident ) ;
5669: LD_ADDR_VAR 0 4
5673: PUSH
5674: LD_VAR 0 1
5678: PPUSH
5679: CALL_OW 25
5683: ST_TO_ADDR
// result := unit ;
5684: LD_ADDR_VAR 0 3
5688: PUSH
5689: LD_VAR 0 4
5693: ST_TO_ADDR
// end ;
5694: LD_VAR 0 3
5698: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5699: LD_INT 0
5701: PPUSH
5702: PPUSH
5703: PPUSH
// rnd = rand ( 1 , characters ) ;
5704: LD_ADDR_VAR 0 6
5708: PUSH
5709: LD_INT 1
5711: PPUSH
5712: LD_VAR 0 1
5716: PPUSH
5717: CALL_OW 12
5721: ST_TO_ADDR
// for i = 1 to characters do
5722: LD_ADDR_VAR 0 5
5726: PUSH
5727: DOUBLE
5728: LD_INT 1
5730: DEC
5731: ST_TO_ADDR
5732: LD_VAR 0 1
5736: PUSH
5737: FOR_TO
5738: IFFALSE 5848
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5740: LD_VAR 0 5
5744: PUSH
5745: LD_VAR 0 6
5749: EQUAL
5750: PUSH
5751: LD_VAR 0 1
5755: PUSH
5756: LD_VAR 0 5
5760: ARRAY
5761: PPUSH
5762: CALL_OW 258
5766: PUSH
5767: LD_INT 1
5769: EQUAL
5770: AND
5771: IFFALSE 5793
// Say ( characters [ i ] , dialogMID ) ;
5773: LD_VAR 0 1
5777: PUSH
5778: LD_VAR 0 5
5782: ARRAY
5783: PPUSH
5784: LD_VAR 0 2
5788: PPUSH
5789: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5793: LD_VAR 0 5
5797: PUSH
5798: LD_VAR 0 6
5802: EQUAL
5803: PUSH
5804: LD_VAR 0 1
5808: PUSH
5809: LD_VAR 0 5
5813: ARRAY
5814: PPUSH
5815: CALL_OW 258
5819: PUSH
5820: LD_INT 2
5822: EQUAL
5823: AND
5824: IFFALSE 5846
// Say ( characters [ i ] , dialogFID ) ;
5826: LD_VAR 0 1
5830: PUSH
5831: LD_VAR 0 5
5835: ARRAY
5836: PPUSH
5837: LD_VAR 0 3
5841: PPUSH
5842: CALL_OW 88
// end ;
5846: GO 5737
5848: POP
5849: POP
// end ;
5850: LD_VAR 0 4
5854: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5855: LD_INT 0
5857: PPUSH
5858: PPUSH
5859: PPUSH
// uc_side := GetSide ( b ) ;
5860: LD_ADDR_OWVAR 20
5864: PUSH
5865: LD_VAR 0 2
5869: PPUSH
5870: CALL_OW 255
5874: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5875: LD_ADDR_OWVAR 21
5879: PUSH
5880: LD_VAR 0 2
5884: PPUSH
5885: CALL_OW 248
5889: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5890: LD_INT 0
5892: PPUSH
5893: LD_INT 1
5895: PPUSH
5896: LD_VAR 0 1
5900: PPUSH
5901: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5905: LD_ADDR_VAR 0 5
5909: PUSH
5910: LD_VAR 0 2
5914: PPUSH
5915: CALL_OW 254
5919: PUSH
5920: LD_INT 3
5922: MINUS
5923: ST_TO_ADDR
// if dir < 0 then
5924: LD_VAR 0 5
5928: PUSH
5929: LD_INT 0
5931: LESS
5932: IFFALSE 5948
// dir := 6 + dir ;
5934: LD_ADDR_VAR 0 5
5938: PUSH
5939: LD_INT 6
5941: PUSH
5942: LD_VAR 0 5
5946: PLUS
5947: ST_TO_ADDR
// un := CreateHuman ;
5948: LD_ADDR_VAR 0 4
5952: PUSH
5953: CALL_OW 44
5957: ST_TO_ADDR
// SetDir ( un , dir ) ;
5958: LD_VAR 0 4
5962: PPUSH
5963: LD_VAR 0 5
5967: PPUSH
5968: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5972: LD_VAR 0 4
5976: PPUSH
5977: LD_VAR 0 2
5981: PPUSH
5982: CALL_OW 52
// end ;
5986: LD_VAR 0 3
5990: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5991: LD_INT 0
5993: PPUSH
5994: PPUSH
5995: PPUSH
5996: PPUSH
// for i = 1 to count do
5997: LD_ADDR_VAR 0 8
6001: PUSH
6002: DOUBLE
6003: LD_INT 1
6005: DEC
6006: ST_TO_ADDR
6007: LD_VAR 0 6
6011: PUSH
6012: FOR_TO
6013: IFFALSE 6094
// begin uc_side = side ;
6015: LD_ADDR_OWVAR 20
6019: PUSH
6020: LD_VAR 0 1
6024: ST_TO_ADDR
// uc_nation = nation ;
6025: LD_ADDR_OWVAR 21
6029: PUSH
6030: LD_VAR 0 2
6034: ST_TO_ADDR
// hc_gallery =  ;
6035: LD_ADDR_OWVAR 33
6039: PUSH
6040: LD_STRING 
6042: ST_TO_ADDR
// hc_name =  ;
6043: LD_ADDR_OWVAR 26
6047: PUSH
6048: LD_STRING 
6050: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6051: LD_INT 0
6053: PPUSH
6054: LD_VAR 0 5
6058: PPUSH
6059: LD_VAR 0 4
6063: PPUSH
6064: CALL_OW 380
// un = CreateHuman ;
6068: LD_ADDR_VAR 0 10
6072: PUSH
6073: CALL_OW 44
6077: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6078: LD_VAR 0 10
6082: PPUSH
6083: LD_VAR 0 3
6087: PPUSH
6088: CALL_OW 52
// end ;
6092: GO 6012
6094: POP
6095: POP
// end ;
6096: LD_VAR 0 7
6100: RET
// export function PrepareDifficulty ; begin
6101: LD_INT 0
6103: PPUSH
// if Difficulty = 1 then
6104: LD_OWVAR 67
6108: PUSH
6109: LD_INT 1
6111: EQUAL
6112: IFFALSE 6130
// begin RuSolMinLevel = 2 ;
6114: LD_ADDR_EXP 24
6118: PUSH
6119: LD_INT 2
6121: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
6122: LD_ADDR_EXP 25
6126: PUSH
6127: LD_INT 4
6129: ST_TO_ADDR
// end ; if Difficulty = 2 then
6130: LD_OWVAR 67
6134: PUSH
6135: LD_INT 2
6137: EQUAL
6138: IFFALSE 6208
// begin RuSolMinLevel = 3 ;
6140: LD_ADDR_EXP 24
6144: PUSH
6145: LD_INT 3
6147: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6148: LD_ADDR_EXP 25
6152: PUSH
6153: LD_INT 5
6155: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
6156: LD_INT 51
6158: PPUSH
6159: LD_INT 3
6161: PPUSH
6162: LD_INT 1
6164: PPUSH
6165: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
6169: LD_INT 57
6171: PPUSH
6172: LD_INT 3
6174: PPUSH
6175: LD_INT 1
6177: PPUSH
6178: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6182: LD_INT 57
6184: PPUSH
6185: LD_INT 6
6187: PPUSH
6188: LD_INT 2
6190: PPUSH
6191: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
6195: LD_INT 51
6197: PPUSH
6198: LD_INT 6
6200: PPUSH
6201: LD_INT 2
6203: PPUSH
6204: CALL_OW 322
// end ; if Difficulty = 3 then
6208: LD_OWVAR 67
6212: PUSH
6213: LD_INT 3
6215: EQUAL
6216: IFFALSE 6299
// begin RuSolMinLevel = 3 ;
6218: LD_ADDR_EXP 24
6222: PUSH
6223: LD_INT 3
6225: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6226: LD_ADDR_EXP 25
6230: PUSH
6231: LD_INT 6
6233: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
6234: LD_INT 57
6236: PPUSH
6237: LD_INT 3
6239: PPUSH
6240: LD_INT 1
6242: PPUSH
6243: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
6247: LD_INT 51
6249: PPUSH
6250: LD_INT 3
6252: PPUSH
6253: LD_INT 1
6255: PPUSH
6256: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
6260: LD_INT 52
6262: PPUSH
6263: LD_INT 3
6265: PPUSH
6266: LD_INT 1
6268: PPUSH
6269: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6273: LD_INT 57
6275: PPUSH
6276: LD_INT 6
6278: PPUSH
6279: LD_INT 2
6281: PPUSH
6282: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
6286: LD_INT 52
6288: PPUSH
6289: LD_INT 6
6291: PPUSH
6292: LD_INT 2
6294: PPUSH
6295: CALL_OW 322
// end ; end ;
6299: LD_VAR 0 1
6303: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
6304: LD_INT 0
6306: PPUSH
6307: PPUSH
6308: PPUSH
6309: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6310: LD_ADDR_VAR 0 3
6314: PUSH
6315: LD_INT 22
6317: PUSH
6318: LD_INT 3
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: LD_INT 25
6327: PUSH
6328: LD_INT 2
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: PPUSH
6339: CALL_OW 69
6343: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
6344: LD_ADDR_VAR 0 4
6348: PUSH
6349: LD_INT 4
6351: PUSH
6352: LD_INT 75
6354: PUSH
6355: LD_INT 79
6357: PUSH
6358: LD_INT 2
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_INT 4
6369: PUSH
6370: LD_INT 113
6372: PUSH
6373: LD_INT 94
6375: PUSH
6376: LD_INT 4
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 29
6387: PUSH
6388: LD_INT 106
6390: PUSH
6391: LD_INT 97
6393: PUSH
6394: LD_INT 3
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: PUSH
6403: LD_INT 26
6405: PUSH
6406: LD_INT 93
6408: PUSH
6409: LD_INT 97
6411: PUSH
6412: LD_INT 5
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 2
6423: PUSH
6424: LD_INT 100
6426: PUSH
6427: LD_INT 89
6429: PUSH
6430: LD_INT 3
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: PUSH
6439: LD_INT 17
6441: PUSH
6442: LD_INT 96
6444: PUSH
6445: LD_INT 89
6447: PUSH
6448: LD_INT 1
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: PUSH
6457: LD_INT 32
6459: PUSH
6460: LD_INT 78
6462: PUSH
6463: LD_INT 94
6465: PUSH
6466: LD_INT 1
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 32
6477: PUSH
6478: LD_INT 95
6480: PUSH
6481: LD_INT 82
6483: PUSH
6484: LD_INT 3
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: PUSH
6493: LD_INT 32
6495: PUSH
6496: LD_INT 104
6498: PUSH
6499: LD_INT 85
6501: PUSH
6502: LD_INT 2
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: PUSH
6511: LD_INT 32
6513: PUSH
6514: LD_INT 81
6516: PUSH
6517: LD_INT 78
6519: PUSH
6520: LD_INT 2
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 33
6531: PUSH
6532: LD_INT 109
6534: PUSH
6535: LD_INT 90
6537: PUSH
6538: LD_INT 3
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 33
6549: PUSH
6550: LD_INT 88
6552: PUSH
6553: LD_INT 79
6555: PUSH
6556: LD_INT 3
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 33
6567: PUSH
6568: LD_INT 76
6570: PUSH
6571: LD_INT 87
6573: PUSH
6574: LD_INT 1
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: PUSH
6583: LD_INT 26
6585: PUSH
6586: LD_INT 96
6588: PUSH
6589: LD_INT 97
6591: PUSH
6592: LD_INT 5
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: PUSH
6601: LD_INT 26
6603: PUSH
6604: LD_INT 85
6606: PUSH
6607: LD_INT 84
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 6
6621: PUSH
6622: LD_INT 88
6624: PUSH
6625: LD_INT 95
6627: PUSH
6628: LD_INT 0
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: PUSH
6637: LD_INT 19
6639: PUSH
6640: LD_INT 103
6642: PUSH
6643: LD_INT 89
6645: PUSH
6646: LD_INT 4
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: PUSH
6655: LD_INT 16
6657: PUSH
6658: LD_INT 97
6660: PUSH
6661: LD_INT 86
6663: PUSH
6664: LD_INT 2
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: PUSH
6673: LD_INT 24
6675: PUSH
6676: LD_INT 100
6678: PUSH
6679: LD_INT 85
6681: PUSH
6682: LD_INT 3
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: ST_TO_ADDR
// for i := 1 to buildingsTab do
6712: LD_ADDR_VAR 0 2
6716: PUSH
6717: DOUBLE
6718: LD_INT 1
6720: DEC
6721: ST_TO_ADDR
6722: LD_VAR 0 4
6726: PUSH
6727: FOR_TO
6728: IFFALSE 6801
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
6730: LD_VAR 0 3
6734: PPUSH
6735: LD_VAR 0 4
6739: PUSH
6740: LD_VAR 0 2
6744: ARRAY
6745: PUSH
6746: LD_INT 1
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 4
6754: PUSH
6755: LD_VAR 0 2
6759: ARRAY
6760: PUSH
6761: LD_INT 2
6763: ARRAY
6764: PPUSH
6765: LD_VAR 0 4
6769: PUSH
6770: LD_VAR 0 2
6774: ARRAY
6775: PUSH
6776: LD_INT 3
6778: ARRAY
6779: PPUSH
6780: LD_VAR 0 4
6784: PUSH
6785: LD_VAR 0 2
6789: ARRAY
6790: PUSH
6791: LD_INT 4
6793: ARRAY
6794: PPUSH
6795: CALL_OW 205
6799: GO 6727
6801: POP
6802: POP
// end ;
6803: LD_VAR 0 1
6807: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6808: LD_INT 0
6810: PPUSH
6811: PPUSH
// for i in charactersList do
6812: LD_ADDR_VAR 0 4
6816: PUSH
6817: LD_VAR 0 1
6821: PUSH
6822: FOR_IN
6823: IFFALSE 6852
// begin if IsOk ( i ) then
6825: LD_VAR 0 4
6829: PPUSH
6830: CALL_OW 302
6834: IFFALSE 6850
// SaveCharacters ( i , ident ) ;
6836: LD_VAR 0 4
6840: PPUSH
6841: LD_VAR 0 2
6845: PPUSH
6846: CALL_OW 38
// end ;
6850: GO 6822
6852: POP
6853: POP
// end ;
6854: LD_VAR 0 3
6858: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
6859: LD_INT 0
6861: PPUSH
6862: PPUSH
6863: PPUSH
6864: PPUSH
// for i = 1 to 72 do
6865: LD_ADDR_VAR 0 5
6869: PUSH
6870: DOUBLE
6871: LD_INT 1
6873: DEC
6874: ST_TO_ADDR
6875: LD_INT 72
6877: PUSH
6878: FOR_TO
6879: IFFALSE 6937
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
6881: LD_VAR 0 5
6885: PPUSH
6886: LD_VAR 0 1
6890: PPUSH
6891: CALL_OW 321
6895: PUSH
6896: LD_INT 1
6898: EQUAL
6899: PUSH
6900: LD_VAR 0 5
6904: PPUSH
6905: LD_VAR 0 3
6909: PPUSH
6910: CALL_OW 482
6914: PUSH
6915: LD_INT 1
6917: EQUAL
6918: AND
6919: IFFALSE 6935
// AddComResearch ( lab , i ) ;
6921: LD_VAR 0 2
6925: PPUSH
6926: LD_VAR 0 5
6930: PPUSH
6931: CALL_OW 184
6935: GO 6878
6937: POP
6938: POP
// end ;
6939: LD_VAR 0 4
6943: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , insideSoldiers , turretList , temp , barrackList ; begin
6944: LD_INT 0
6946: PPUSH
6947: PPUSH
6948: PPUSH
6949: PPUSH
6950: PPUSH
6951: PPUSH
6952: PPUSH
6953: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] ] ) diff [ Borodin ] ;
6954: LD_ADDR_VAR 0 6
6958: PUSH
6959: LD_INT 22
6961: PUSH
6962: LD_VAR 0 1
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 25
6973: PUSH
6974: LD_INT 1
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 56
6983: PUSH
6984: EMPTY
6985: LIST
6986: PUSH
6987: LD_INT 24
6989: PUSH
6990: LD_INT 700
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 3
6999: PUSH
7000: LD_INT 60
7002: PUSH
7003: EMPTY
7004: LIST
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: PPUSH
7017: CALL_OW 69
7021: PUSH
7022: LD_EXP 23
7026: PUSH
7027: EMPTY
7028: LIST
7029: DIFF
7030: ST_TO_ADDR
// insideSoldiers = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
7031: LD_ADDR_VAR 0 7
7035: PUSH
7036: LD_INT 22
7038: PUSH
7039: LD_VAR 0 1
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 25
7050: PUSH
7051: LD_INT 1
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 54
7060: PUSH
7061: EMPTY
7062: LIST
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: LIST
7068: PPUSH
7069: CALL_OW 69
7073: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7074: LD_ADDR_VAR 0 8
7078: PUSH
7079: LD_INT 22
7081: PUSH
7082: LD_VAR 0 1
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 30
7093: PUSH
7094: LD_INT 32
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 58
7103: PUSH
7104: EMPTY
7105: LIST
7106: PUSH
7107: LD_INT 24
7109: PUSH
7110: LD_INT 251
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: PPUSH
7123: CALL_OW 69
7127: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
7128: LD_ADDR_VAR 0 10
7132: PUSH
7133: LD_INT 22
7135: PUSH
7136: LD_VAR 0 1
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: LD_INT 2
7147: PUSH
7148: LD_INT 30
7150: PUSH
7151: LD_INT 4
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: LD_INT 30
7160: PUSH
7161: LD_INT 5
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: LD_INT 24
7175: PUSH
7176: LD_INT 251
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: LIST
7187: PPUSH
7188: CALL_OW 69
7192: ST_TO_ADDR
// if barrackList > 0 then
7193: LD_VAR 0 10
7197: PUSH
7198: LD_INT 0
7200: GREATER
7201: IFFALSE 7314
// begin if turretList = 0 and FilterUnitsInArea ( RussianBaseTerritory , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 then
7203: LD_VAR 0 8
7207: PUSH
7208: LD_INT 0
7210: EQUAL
7211: PUSH
7212: LD_INT 24
7214: PPUSH
7215: LD_INT 22
7217: PUSH
7218: LD_INT 1
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 21
7227: PUSH
7228: LD_INT 1
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PPUSH
7239: CALL_OW 70
7243: PUSH
7244: LD_INT 0
7246: EQUAL
7247: AND
7248: IFFALSE 7297
// begin for i in soldiers_list do
7250: LD_ADDR_VAR 0 4
7254: PUSH
7255: LD_VAR 0 6
7259: PUSH
7260: FOR_IN
7261: IFFALSE 7293
// ComEnterUnit ( i , barrackList [ rand ( 1 , barrackList ) ] ) ;
7263: LD_VAR 0 4
7267: PPUSH
7268: LD_VAR 0 10
7272: PUSH
7273: LD_INT 1
7275: PPUSH
7276: LD_VAR 0 10
7280: PPUSH
7281: CALL_OW 12
7285: ARRAY
7286: PPUSH
7287: CALL_OW 120
7291: GO 7260
7293: POP
7294: POP
// end else
7295: GO 7314
// begin for i in barrackList do
7297: LD_ADDR_VAR 0 4
7301: PUSH
7302: LD_VAR 0 10
7306: PUSH
7307: FOR_IN
7308: IFFALSE 7312
// begin end ;
7310: GO 7307
7312: POP
7313: POP
// end ; end ; end ;
7314: LD_VAR 0 3
7318: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
7319: LD_INT 0
7321: PPUSH
7322: PPUSH
7323: PPUSH
7324: PPUSH
7325: PPUSH
7326: PPUSH
// for i = 1 to infantryCount do
7327: LD_ADDR_VAR 0 8
7331: PUSH
7332: DOUBLE
7333: LD_INT 1
7335: DEC
7336: ST_TO_ADDR
7337: LD_VAR 0 5
7341: PUSH
7342: FOR_TO
7343: IFFALSE 7459
// begin uc_side = side ;
7345: LD_ADDR_OWVAR 20
7349: PUSH
7350: LD_VAR 0 1
7354: ST_TO_ADDR
// uc_nation = nation ;
7355: LD_ADDR_OWVAR 21
7359: PUSH
7360: LD_VAR 0 3
7364: ST_TO_ADDR
// hc_class = 1 ;
7365: LD_ADDR_OWVAR 28
7369: PUSH
7370: LD_INT 1
7372: ST_TO_ADDR
// hc_name =  ;
7373: LD_ADDR_OWVAR 26
7377: PUSH
7378: LD_STRING 
7380: ST_TO_ADDR
// hc_gallery =  ;
7381: LD_ADDR_OWVAR 33
7385: PUSH
7386: LD_STRING 
7388: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7389: LD_INT 0
7391: PPUSH
7392: LD_INT 1
7394: PPUSH
7395: LD_EXP 24
7399: PPUSH
7400: LD_EXP 25
7404: PPUSH
7405: CALL_OW 12
7409: PPUSH
7410: CALL_OW 380
// un = CreateHuman ;
7414: LD_ADDR_VAR 0 10
7418: PUSH
7419: CALL_OW 44
7423: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
7424: LD_VAR 0 10
7428: PPUSH
7429: LD_VAR 0 2
7433: PPUSH
7434: LD_INT 0
7436: PPUSH
7437: CALL_OW 49
// defenders_list = defenders_list ^ un ;
7441: LD_ADDR_EXP 31
7445: PUSH
7446: LD_EXP 31
7450: PUSH
7451: LD_VAR 0 10
7455: ADD
7456: ST_TO_ADDR
// end ;
7457: GO 7342
7459: POP
7460: POP
// for i = 1 to vehCount do
7461: LD_ADDR_VAR 0 8
7465: PUSH
7466: DOUBLE
7467: LD_INT 1
7469: DEC
7470: ST_TO_ADDR
7471: LD_VAR 0 6
7475: PUSH
7476: FOR_TO
7477: IFFALSE 7684
// begin uc_side = side ;
7479: LD_ADDR_OWVAR 20
7483: PUSH
7484: LD_VAR 0 1
7488: ST_TO_ADDR
// uc_nation = nation ;
7489: LD_ADDR_OWVAR 21
7493: PUSH
7494: LD_VAR 0 3
7498: ST_TO_ADDR
// vc_Chassis = 22 ;
7499: LD_ADDR_OWVAR 37
7503: PUSH
7504: LD_INT 22
7506: ST_TO_ADDR
// vc_engine = 1 ;
7507: LD_ADDR_OWVAR 39
7511: PUSH
7512: LD_INT 1
7514: ST_TO_ADDR
// vc_control = 1 ;
7515: LD_ADDR_OWVAR 38
7519: PUSH
7520: LD_INT 1
7522: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
7523: LD_ADDR_OWVAR 40
7527: PUSH
7528: LD_INT 43
7530: PUSH
7531: LD_INT 44
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 1
7540: PPUSH
7541: LD_INT 2
7543: PPUSH
7544: CALL_OW 12
7548: ARRAY
7549: ST_TO_ADDR
// veh = CreateVehicle ;
7550: LD_ADDR_VAR 0 12
7554: PUSH
7555: CALL_OW 45
7559: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
7560: LD_VAR 0 12
7564: PPUSH
7565: LD_VAR 0 2
7569: PPUSH
7570: LD_INT 0
7572: PPUSH
7573: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
7577: LD_ADDR_EXP 31
7581: PUSH
7582: LD_EXP 31
7586: PUSH
7587: LD_VAR 0 12
7591: ADD
7592: ST_TO_ADDR
// hc_class = 3 ;
7593: LD_ADDR_OWVAR 28
7597: PUSH
7598: LD_INT 3
7600: ST_TO_ADDR
// hc_name =  ;
7601: LD_ADDR_OWVAR 26
7605: PUSH
7606: LD_STRING 
7608: ST_TO_ADDR
// hc_gallery =  ;
7609: LD_ADDR_OWVAR 33
7613: PUSH
7614: LD_STRING 
7616: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7617: LD_INT 0
7619: PPUSH
7620: LD_INT 3
7622: PPUSH
7623: LD_EXP 24
7627: PPUSH
7628: LD_EXP 25
7632: PPUSH
7633: CALL_OW 12
7637: PPUSH
7638: CALL_OW 380
// un = CreateHuman ;
7642: LD_ADDR_VAR 0 10
7646: PUSH
7647: CALL_OW 44
7651: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7652: LD_VAR 0 10
7656: PPUSH
7657: LD_VAR 0 12
7661: PPUSH
7662: CALL_OW 52
// defenders_list = defenders_list ^ un ;
7666: LD_ADDR_EXP 31
7670: PUSH
7671: LD_EXP 31
7675: PUSH
7676: LD_VAR 0 10
7680: ADD
7681: ST_TO_ADDR
// end ;
7682: GO 7476
7684: POP
7685: POP
// end ;
7686: LD_VAR 0 7
7690: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
7691: LD_INT 0
7693: PPUSH
7694: PPUSH
7695: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
7696: LD_VAR 0 2
7700: PPUSH
7701: LD_INT 22
7703: PUSH
7704: LD_VAR 0 1
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: PPUSH
7716: CALL_OW 70
7720: PUSH
7721: LD_INT 0
7723: EQUAL
7724: PUSH
7725: LD_EXP 31
7729: PUSH
7730: LD_INT 0
7732: GREATER
7733: AND
7734: IFFALSE 7780
// begin for i in defenders_list do
7736: LD_ADDR_VAR 0 4
7740: PUSH
7741: LD_EXP 31
7745: PUSH
7746: FOR_IN
7747: IFFALSE 7778
// begin ComMoveXY ( i , 65 , 68 ) ;
7749: LD_VAR 0 4
7753: PPUSH
7754: LD_INT 65
7756: PPUSH
7757: LD_INT 68
7759: PPUSH
7760: CALL_OW 111
// SetFuel ( i , 100 ) ;
7764: LD_VAR 0 4
7768: PPUSH
7769: LD_INT 100
7771: PPUSH
7772: CALL_OW 240
// end ;
7776: GO 7746
7778: POP
7779: POP
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
7780: LD_VAR 0 2
7784: PPUSH
7785: LD_INT 22
7787: PUSH
7788: LD_VAR 0 1
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PUSH
7797: EMPTY
7798: LIST
7799: PPUSH
7800: CALL_OW 70
7804: PUSH
7805: LD_INT 0
7807: GREATER
7808: PUSH
7809: LD_EXP 31
7813: PUSH
7814: LD_INT 0
7816: GREATER
7817: AND
7818: IFFALSE 7986
// begin for i in defenders_list do
7820: LD_ADDR_VAR 0 4
7824: PUSH
7825: LD_EXP 31
7829: PUSH
7830: FOR_IN
7831: IFFALSE 7881
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7833: LD_ADDR_VAR 0 5
7837: PUSH
7838: LD_INT 22
7840: PUSH
7841: LD_VAR 0 1
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: PPUSH
7850: CALL_OW 69
7854: PPUSH
7855: LD_VAR 0 4
7859: PPUSH
7860: CALL_OW 74
7864: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
7865: LD_VAR 0 4
7869: PPUSH
7870: LD_VAR 0 5
7874: PPUSH
7875: CALL_OW 115
// end ;
7879: GO 7830
7881: POP
7882: POP
// if russianAI = 0 then
7883: LD_EXP 26
7887: PUSH
7888: LD_INT 0
7890: EQUAL
7891: IFFALSE 7986
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) diff Borodin do
7893: LD_ADDR_VAR 0 4
7897: PUSH
7898: LD_INT 22
7900: PUSH
7901: LD_INT 3
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: PUSH
7908: LD_INT 25
7910: PUSH
7911: LD_INT 1
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PPUSH
7922: CALL_OW 69
7926: PUSH
7927: LD_EXP 23
7931: DIFF
7932: PUSH
7933: FOR_IN
7934: IFFALSE 7984
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7936: LD_ADDR_VAR 0 5
7940: PUSH
7941: LD_INT 22
7943: PUSH
7944: LD_VAR 0 1
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PPUSH
7953: CALL_OW 69
7957: PPUSH
7958: LD_VAR 0 4
7962: PPUSH
7963: CALL_OW 74
7967: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
7968: LD_VAR 0 4
7972: PPUSH
7973: LD_VAR 0 5
7977: PPUSH
7978: CALL_OW 115
// end ;
7982: GO 7933
7984: POP
7985: POP
// end ; end ; end ;
7986: LD_VAR 0 3
7990: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
7991: LD_INT 0
7993: PPUSH
7994: PPUSH
7995: PPUSH
7996: PPUSH
7997: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
7998: LD_ADDR_VAR 0 6
8002: PUSH
8003: LD_INT 22
8005: PUSH
8006: LD_VAR 0 1
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 2
8017: PUSH
8018: LD_INT 25
8020: PUSH
8021: LD_INT 2
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: LD_INT 25
8030: PUSH
8031: LD_INT 16
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: LIST
8042: PUSH
8043: LD_INT 24
8045: PUSH
8046: LD_INT 1000
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: LIST
8057: PPUSH
8058: CALL_OW 69
8062: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8063: LD_ADDR_VAR 0 4
8067: PUSH
8068: LD_INT 22
8070: PUSH
8071: LD_VAR 0 1
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 21
8082: PUSH
8083: LD_INT 3
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: LD_INT 24
8095: PUSH
8096: LD_INT 1000
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: LIST
8111: PUSH
8112: EMPTY
8113: LIST
8114: PPUSH
8115: CALL_OW 69
8119: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8120: LD_VAR 0 4
8124: PUSH
8125: LD_INT 0
8127: GREATER
8128: PUSH
8129: LD_VAR 0 6
8133: PUSH
8134: LD_INT 0
8136: GREATER
8137: AND
8138: IFFALSE 8204
// begin for i in engineerOk_list do
8140: LD_ADDR_VAR 0 5
8144: PUSH
8145: LD_VAR 0 6
8149: PUSH
8150: FOR_IN
8151: IFFALSE 8202
// begin for j in buildings_list do
8153: LD_ADDR_VAR 0 7
8157: PUSH
8158: LD_VAR 0 4
8162: PUSH
8163: FOR_IN
8164: IFFALSE 8198
// begin AddComExitBuilding ( i ) ;
8166: LD_VAR 0 5
8170: PPUSH
8171: CALL_OW 182
// wait ( 0 0$1 ) ;
8175: LD_INT 35
8177: PPUSH
8178: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8182: LD_VAR 0 5
8186: PPUSH
8187: LD_VAR 0 7
8191: PPUSH
8192: CALL_OW 190
// end ;
8196: GO 8163
8198: POP
8199: POP
// end ;
8200: GO 8150
8202: POP
8203: POP
// end ; if buildings_list = 0 then
8204: LD_VAR 0 4
8208: PUSH
8209: LD_INT 0
8211: EQUAL
8212: IFFALSE 8245
// begin for i in engineerOK_list do
8214: LD_ADDR_VAR 0 5
8218: PUSH
8219: LD_VAR 0 6
8223: PUSH
8224: FOR_IN
8225: IFFALSE 8243
// begin ComEnterUnit ( i , building ) ;
8227: LD_VAR 0 5
8231: PPUSH
8232: LD_VAR 0 2
8236: PPUSH
8237: CALL_OW 120
// end ;
8241: GO 8224
8243: POP
8244: POP
// end ; end ;
8245: LD_VAR 0 3
8249: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
8250: LD_INT 0
8252: PPUSH
8253: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
8254: LD_INT 22
8256: PUSH
8257: LD_VAR 0 1
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: PUSH
8266: LD_INT 25
8268: PUSH
8269: LD_INT 2
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PPUSH
8280: CALL_OW 69
8284: PUSH
8285: LD_INT 0
8287: GREATER
8288: PUSH
8289: LD_INT 22
8291: PUSH
8292: LD_VAR 0 1
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PUSH
8301: LD_INT 21
8303: PUSH
8304: LD_INT 3
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PUSH
8311: LD_INT 3
8313: PUSH
8314: LD_INT 24
8316: PUSH
8317: LD_INT 1000
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: LIST
8332: PPUSH
8333: CALL_OW 69
8337: PUSH
8338: LD_INT 0
8340: EQUAL
8341: AND
8342: PUSH
8343: LD_VAR 0 2
8347: PUSH
8348: LD_INT 0
8350: GREATER
8351: AND
8352: IFFALSE 8451
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: LD_INT 22
8361: PUSH
8362: LD_VAR 0 1
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: PUSH
8371: LD_INT 25
8373: PUSH
8374: LD_INT 2
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: PPUSH
8385: CALL_OW 69
8389: PUSH
8390: FOR_IN
8391: IFFALSE 8449
// begin AddComExitBuilding ( i ) ;
8393: LD_VAR 0 4
8397: PPUSH
8398: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8402: LD_VAR 0 4
8406: PPUSH
8407: LD_VAR 0 2
8411: PUSH
8412: LD_INT 1
8414: ARRAY
8415: PPUSH
8416: LD_VAR 0 2
8420: PUSH
8421: LD_INT 2
8423: ARRAY
8424: PPUSH
8425: LD_VAR 0 2
8429: PUSH
8430: LD_INT 3
8432: ARRAY
8433: PPUSH
8434: LD_VAR 0 2
8438: PUSH
8439: LD_INT 4
8441: ARRAY
8442: PPUSH
8443: CALL_OW 205
// end ;
8447: GO 8390
8449: POP
8450: POP
// end ; end ;
8451: LD_VAR 0 3
8455: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8456: LD_INT 0
8458: PPUSH
8459: PPUSH
8460: PPUSH
8461: PPUSH
8462: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8463: LD_ADDR_VAR 0 6
8467: PUSH
8468: LD_INT 22
8470: PUSH
8471: LD_VAR 0 1
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: LD_INT 25
8482: PUSH
8483: LD_INT 4
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PPUSH
8494: CALL_OW 69
8498: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8499: LD_ADDR_VAR 0 9
8503: PUSH
8504: LD_VAR 0 3
8508: PPUSH
8509: LD_INT 22
8511: PUSH
8512: LD_VAR 0 1
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: LD_INT 21
8523: PUSH
8524: LD_INT 1
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 3
8533: PUSH
8534: LD_INT 24
8536: PUSH
8537: LD_INT 750
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: LIST
8552: PPUSH
8553: CALL_OW 70
8557: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
8558: LD_VAR 0 9
8562: PUSH
8563: LD_INT 0
8565: GREATER
8566: PUSH
8567: LD_VAR 0 6
8571: PUSH
8572: LD_INT 0
8574: GREATER
8575: AND
8576: IFFALSE 8703
// begin for i = 1 to damageUnits do
8578: LD_ADDR_VAR 0 7
8582: PUSH
8583: DOUBLE
8584: LD_INT 1
8586: DEC
8587: ST_TO_ADDR
8588: LD_VAR 0 9
8592: PUSH
8593: FOR_TO
8594: IFFALSE 8618
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
8596: LD_VAR 0 9
8600: PUSH
8601: LD_VAR 0 7
8605: ARRAY
8606: PPUSH
8607: LD_VAR 0 2
8611: PPUSH
8612: CALL_OW 113
8616: GO 8593
8618: POP
8619: POP
// for i in sci_list do
8620: LD_ADDR_VAR 0 7
8624: PUSH
8625: LD_VAR 0 6
8629: PUSH
8630: FOR_IN
8631: IFFALSE 8699
// begin ComExitBuilding ( i ) ;
8633: LD_VAR 0 7
8637: PPUSH
8638: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
8642: LD_ADDR_VAR 0 8
8646: PUSH
8647: LD_VAR 0 2
8651: PPUSH
8652: LD_INT 22
8654: PUSH
8655: LD_VAR 0 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PPUSH
8664: CALL_OW 70
8668: PUSH
8669: FOR_IN
8670: IFFALSE 8695
// begin AddComHeal ( i , j ) ;
8672: LD_VAR 0 7
8676: PPUSH
8677: LD_VAR 0 8
8681: PPUSH
8682: CALL_OW 188
// wait ( 1 1$0 ) ;
8686: LD_INT 2100
8688: PPUSH
8689: CALL_OW 67
// end ;
8693: GO 8669
8695: POP
8696: POP
// end ;
8697: GO 8630
8699: POP
8700: POP
// end else
8701: GO 8717
// begin AddComEnterUnit ( sci_list , build ) ;
8703: LD_VAR 0 6
8707: PPUSH
8708: LD_VAR 0 4
8712: PPUSH
8713: CALL_OW 180
// end ; end ;
8717: LD_VAR 0 5
8721: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
8722: LD_INT 0
8724: PPUSH
8725: PPUSH
8726: PPUSH
8727: PPUSH
8728: PPUSH
8729: PPUSH
8730: PPUSH
8731: PPUSH
8732: PPUSH
8733: PPUSH
8734: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8735: LD_ADDR_VAR 0 9
8739: PUSH
8740: LD_INT 22
8742: PUSH
8743: LD_VAR 0 1
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: PUSH
8752: LD_INT 21
8754: PUSH
8755: LD_INT 2
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 33
8764: PUSH
8765: LD_INT 1
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: LD_INT 24
8774: PUSH
8775: LD_INT 660
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 3
8784: PUSH
8785: LD_INT 58
8787: PUSH
8788: EMPTY
8789: LIST
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: PUSH
8795: LD_INT 3
8797: PUSH
8798: LD_INT 34
8800: PUSH
8801: LD_INT 53
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: PPUSH
8820: CALL_OW 69
8824: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
8825: LD_ADDR_VAR 0 10
8829: PUSH
8830: LD_INT 22
8832: PUSH
8833: LD_VAR 0 1
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PUSH
8842: LD_INT 21
8844: PUSH
8845: LD_INT 2
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PUSH
8852: LD_INT 33
8854: PUSH
8855: LD_INT 1
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: LD_INT 3
8864: PUSH
8865: LD_INT 24
8867: PUSH
8868: LD_INT 660
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: PPUSH
8885: CALL_OW 69
8889: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8890: LD_ADDR_VAR 0 11
8894: PUSH
8895: LD_VAR 0 2
8899: PPUSH
8900: LD_INT 22
8902: PUSH
8903: LD_VAR 0 1
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 21
8914: PUSH
8915: LD_INT 2
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: LD_INT 33
8924: PUSH
8925: LD_INT 1
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PUSH
8932: LD_INT 3
8934: PUSH
8935: LD_INT 24
8937: PUSH
8938: LD_INT 1000
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: PPUSH
8955: CALL_OW 70
8959: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8960: LD_ADDR_VAR 0 12
8964: PUSH
8965: LD_VAR 0 2
8969: PPUSH
8970: LD_INT 22
8972: PUSH
8973: LD_VAR 0 1
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PUSH
8982: LD_INT 21
8984: PUSH
8985: LD_INT 2
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PUSH
8992: LD_INT 33
8994: PUSH
8995: LD_INT 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 24
9004: PUSH
9005: LD_INT 1000
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: LD_INT 58
9014: PUSH
9015: EMPTY
9016: LIST
9017: PUSH
9018: LD_INT 3
9020: PUSH
9021: LD_INT 34
9023: PUSH
9024: LD_INT 53
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: PPUSH
9043: CALL_OW 70
9047: ST_TO_ADDR
// mechanicInside_list = [ ] ;
9048: LD_ADDR_VAR 0 13
9052: PUSH
9053: EMPTY
9054: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9055: LD_ADDR_VAR 0 14
9059: PUSH
9060: LD_VAR 0 2
9064: PPUSH
9065: LD_INT 22
9067: PUSH
9068: LD_VAR 0 1
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PUSH
9077: LD_INT 25
9079: PUSH
9080: LD_INT 3
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PPUSH
9091: CALL_OW 70
9095: ST_TO_ADDR
// if damageVehicle_list > 0 then
9096: LD_VAR 0 10
9100: PUSH
9101: LD_INT 0
9103: GREATER
9104: IFFALSE 9142
// begin for i in damageVehicle_list do
9106: LD_ADDR_VAR 0 7
9110: PUSH
9111: LD_VAR 0 10
9115: PUSH
9116: FOR_IN
9117: IFFALSE 9140
// begin ComMoveXY ( i , repX , repY ) ;
9119: LD_VAR 0 7
9123: PPUSH
9124: LD_VAR 0 3
9128: PPUSH
9129: LD_VAR 0 4
9133: PPUSH
9134: CALL_OW 111
// end ;
9138: GO 9116
9140: POP
9141: POP
// end ; if vehicleNeedRepair_list > 0 then
9142: LD_VAR 0 11
9146: PUSH
9147: LD_INT 0
9149: GREATER
9150: IFFALSE 9237
// begin for i in vehicleNeedRepair_list do
9152: LD_ADDR_VAR 0 7
9156: PUSH
9157: LD_VAR 0 11
9161: PUSH
9162: FOR_IN
9163: IFFALSE 9235
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
9165: LD_ADDR_VAR 0 13
9169: PUSH
9170: LD_VAR 0 13
9174: PUSH
9175: LD_VAR 0 7
9179: PPUSH
9180: CALL_OW 313
9184: ADD
9185: ST_TO_ADDR
// for j in mechanicInside_list do
9186: LD_ADDR_VAR 0 8
9190: PUSH
9191: LD_VAR 0 13
9195: PUSH
9196: FOR_IN
9197: IFFALSE 9231
// begin ComExitVehicle ( i ) ;
9199: LD_VAR 0 7
9203: PPUSH
9204: CALL_OW 121
// wait ( 0 0$1 ) ;
9208: LD_INT 35
9210: PPUSH
9211: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
9215: LD_VAR 0 7
9219: PPUSH
9220: LD_VAR 0 8
9224: PPUSH
9225: CALL_OW 129
// end ;
9229: GO 9196
9231: POP
9232: POP
// end ;
9233: GO 9162
9235: POP
9236: POP
// end ; if vehicleDontNeedRepair_list > 0 then
9237: LD_VAR 0 12
9241: PUSH
9242: LD_INT 0
9244: GREATER
9245: IFFALSE 9285
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
9247: LD_VAR 0 14
9251: PUSH
9252: LD_INT 1
9254: ARRAY
9255: PPUSH
9256: LD_VAR 0 12
9260: PUSH
9261: LD_INT 1
9263: ARRAY
9264: PPUSH
9265: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
9269: LD_VAR 0 12
9273: PUSH
9274: LD_INT 1
9276: ARRAY
9277: PPUSH
9278: LD_INT 100
9280: PPUSH
9281: CALL_OW 240
// end ; if vehicleOK_list > 0 then
9285: LD_VAR 0 9
9289: PUSH
9290: LD_INT 0
9292: GREATER
9293: IFFALSE 9484
// begin for i in vehicleOK_list do
9295: LD_ADDR_VAR 0 7
9299: PUSH
9300: LD_VAR 0 9
9304: PUSH
9305: FOR_IN
9306: IFFALSE 9482
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9308: LD_ADDR_VAR 0 15
9312: PUSH
9313: LD_INT 22
9315: PUSH
9316: LD_VAR 0 5
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PPUSH
9325: CALL_OW 69
9329: PPUSH
9330: LD_VAR 0 7
9334: PPUSH
9335: CALL_OW 74
9339: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9340: LD_ADDR_VAR 0 16
9344: PUSH
9345: LD_INT 22
9347: PUSH
9348: LD_VAR 0 5
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PUSH
9357: LD_INT 2
9359: PUSH
9360: LD_INT 59
9362: PUSH
9363: EMPTY
9364: LIST
9365: PUSH
9366: LD_INT 21
9368: PUSH
9369: LD_INT 1
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 21
9378: PUSH
9379: LD_INT 2
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: PPUSH
9399: CALL_OW 69
9403: PPUSH
9404: LD_VAR 0 7
9408: PPUSH
9409: CALL_OW 74
9413: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9414: LD_VAR 0 7
9418: PPUSH
9419: LD_VAR 0 15
9423: PPUSH
9424: CALL_OW 296
9428: PUSH
9429: LD_INT 8
9431: PLUS
9432: PUSH
9433: LD_VAR 0 7
9437: PPUSH
9438: LD_VAR 0 16
9442: PPUSH
9443: CALL_OW 296
9447: LESS
9448: IFFALSE 9466
// begin ComAttackUnit ( i , target1 ) ;
9450: LD_VAR 0 7
9454: PPUSH
9455: LD_VAR 0 15
9459: PPUSH
9460: CALL_OW 115
// end else
9464: GO 9480
// begin ComAttackUnit ( i , target2 ) ;
9466: LD_VAR 0 7
9470: PPUSH
9471: LD_VAR 0 16
9475: PPUSH
9476: CALL_OW 115
// end ; end ;
9480: GO 9305
9482: POP
9483: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
9484: LD_ADDR_VAR 0 7
9488: PUSH
9489: LD_VAR 0 2
9493: PPUSH
9494: LD_INT 22
9496: PUSH
9497: LD_VAR 0 1
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PUSH
9506: LD_INT 25
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PPUSH
9520: CALL_OW 70
9524: NOT
9525: PUSH
9526: FOR_IN
9527: IFFALSE 9550
// ComMoveXY ( i , repX , repY ) ;
9529: LD_VAR 0 7
9533: PPUSH
9534: LD_VAR 0 3
9538: PPUSH
9539: LD_VAR 0 4
9543: PPUSH
9544: CALL_OW 111
9548: GO 9526
9550: POP
9551: POP
// end ;
9552: LD_VAR 0 6
9556: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
9557: LD_INT 0
9559: PPUSH
9560: PPUSH
9561: PPUSH
9562: PPUSH
9563: PPUSH
9564: PPUSH
9565: PPUSH
9566: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9567: LD_INT 22
9569: PUSH
9570: LD_VAR 0 1
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: LD_INT 21
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 69
9597: PUSH
9598: LD_VAR 0 3
9602: LESSEQUAL
9603: IFFALSE 9670
// for i = 1 to vehCount do
9605: LD_ADDR_VAR 0 10
9609: PUSH
9610: DOUBLE
9611: LD_INT 1
9613: DEC
9614: ST_TO_ADDR
9615: LD_VAR 0 3
9619: PUSH
9620: FOR_TO
9621: IFFALSE 9668
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
9623: LD_VAR 0 2
9627: PPUSH
9628: LD_VAR 0 8
9632: PPUSH
9633: LD_VAR 0 6
9637: PPUSH
9638: LD_VAR 0 7
9642: PPUSH
9643: LD_VAR 0 5
9647: PUSH
9648: LD_INT 1
9650: PPUSH
9651: LD_VAR 0 5
9655: PPUSH
9656: CALL_OW 12
9660: ARRAY
9661: PPUSH
9662: CALL_OW 185
9666: GO 9620
9668: POP
9669: POP
// repeat wait ( 0 0$1 ) ;
9670: LD_INT 35
9672: PPUSH
9673: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
9677: LD_INT 22
9679: PUSH
9680: LD_VAR 0 1
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PUSH
9689: LD_INT 21
9691: PUSH
9692: LD_INT 2
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PUSH
9699: LD_INT 24
9701: PUSH
9702: LD_INT 250
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: PPUSH
9714: CALL_OW 69
9718: PUSH
9719: LD_VAR 0 3
9723: GREATEREQUAL
9724: IFFALSE 9670
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
9726: LD_INT 22
9728: PUSH
9729: LD_VAR 0 1
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: LD_INT 21
9740: PUSH
9741: LD_INT 2
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: LD_INT 24
9750: PUSH
9751: LD_INT 250
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: PPUSH
9763: CALL_OW 69
9767: PUSH
9768: LD_VAR 0 3
9772: GREATEREQUAL
9773: IFFALSE 10116
// begin repeat begin wait ( 0 0$1 ) ;
9775: LD_INT 35
9777: PPUSH
9778: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
9782: LD_INT 22
9784: PUSH
9785: LD_VAR 0 1
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 21
9796: PUSH
9797: LD_INT 2
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: LD_INT 24
9806: PUSH
9807: LD_INT 651
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 69
9823: PUSH
9824: LD_INT 0
9826: GREATER
9827: IFFALSE 10055
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
9829: LD_ADDR_VAR 0 10
9833: PUSH
9834: LD_INT 22
9836: PUSH
9837: LD_VAR 0 1
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 21
9848: PUSH
9849: LD_INT 2
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 24
9858: PUSH
9859: LD_INT 651
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: LIST
9870: PPUSH
9871: CALL_OW 69
9875: PUSH
9876: FOR_IN
9877: IFFALSE 10053
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9879: LD_ADDR_VAR 0 15
9883: PUSH
9884: LD_INT 22
9886: PUSH
9887: LD_VAR 0 4
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PPUSH
9896: CALL_OW 69
9900: PPUSH
9901: LD_VAR 0 10
9905: PPUSH
9906: CALL_OW 74
9910: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9911: LD_ADDR_VAR 0 16
9915: PUSH
9916: LD_INT 22
9918: PUSH
9919: LD_VAR 0 4
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: LD_INT 2
9930: PUSH
9931: LD_INT 59
9933: PUSH
9934: EMPTY
9935: LIST
9936: PUSH
9937: LD_INT 21
9939: PUSH
9940: LD_INT 1
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: LD_INT 21
9949: PUSH
9950: LD_INT 2
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: EMPTY
9968: LIST
9969: PPUSH
9970: CALL_OW 69
9974: PPUSH
9975: LD_VAR 0 10
9979: PPUSH
9980: CALL_OW 74
9984: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9985: LD_VAR 0 10
9989: PPUSH
9990: LD_VAR 0 15
9994: PPUSH
9995: CALL_OW 296
9999: PUSH
10000: LD_INT 8
10002: PLUS
10003: PUSH
10004: LD_VAR 0 10
10008: PPUSH
10009: LD_VAR 0 16
10013: PPUSH
10014: CALL_OW 296
10018: LESS
10019: IFFALSE 10037
// begin ComAttackUnit ( i , target1 ) ;
10021: LD_VAR 0 10
10025: PPUSH
10026: LD_VAR 0 15
10030: PPUSH
10031: CALL_OW 115
// end else
10035: GO 10051
// begin ComAttackUnit ( i , target2 ) ;
10037: LD_VAR 0 10
10041: PPUSH
10042: LD_VAR 0 16
10046: PPUSH
10047: CALL_OW 115
// end ; end ;
10051: GO 9876
10053: POP
10054: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
10055: LD_INT 22
10057: PUSH
10058: LD_VAR 0 1
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PUSH
10067: LD_INT 21
10069: PUSH
10070: LD_INT 2
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: PPUSH
10081: CALL_OW 69
10085: PUSH
10086: LD_INT 0
10088: EQUAL
10089: PUSH
10090: LD_INT 22
10092: PUSH
10093: LD_VAR 0 4
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: EMPTY
10103: LIST
10104: PPUSH
10105: CALL_OW 69
10109: PUSH
10110: LD_INT 0
10112: EQUAL
10113: OR
10114: IFFALSE 9775
// end ; end ;
10116: LD_VAR 0 9
10120: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10121: LD_INT 0
10123: PPUSH
10124: PPUSH
10125: PPUSH
10126: PPUSH
10127: PPUSH
10128: PPUSH
10129: PPUSH
10130: PPUSH
10131: PPUSH
10132: PPUSH
10133: PPUSH
// for i = 1 to medicCount do
10134: LD_ADDR_VAR 0 14
10138: PUSH
10139: DOUBLE
10140: LD_INT 1
10142: DEC
10143: ST_TO_ADDR
10144: LD_VAR 0 7
10148: PUSH
10149: FOR_TO
10150: IFFALSE 10232
// begin uc_side = side ;
10152: LD_ADDR_OWVAR 20
10156: PUSH
10157: LD_VAR 0 1
10161: ST_TO_ADDR
// uc_nation = nation ;
10162: LD_ADDR_OWVAR 21
10166: PUSH
10167: LD_VAR 0 2
10171: ST_TO_ADDR
// hc_name =  ;
10172: LD_ADDR_OWVAR 26
10176: PUSH
10177: LD_STRING 
10179: ST_TO_ADDR
// hc_gallery =  ;
10180: LD_ADDR_OWVAR 33
10184: PUSH
10185: LD_STRING 
10187: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10188: LD_INT 0
10190: PPUSH
10191: LD_INT 4
10193: PPUSH
10194: LD_VAR 0 8
10198: PPUSH
10199: CALL_OW 380
// un = CreateHuman ;
10203: LD_ADDR_VAR 0 16
10207: PUSH
10208: CALL_OW 44
10212: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10213: LD_VAR 0 16
10217: PPUSH
10218: LD_VAR 0 9
10222: PPUSH
10223: LD_INT 0
10225: PPUSH
10226: CALL_OW 49
// end ;
10230: GO 10149
10232: POP
10233: POP
// for i = 1 to soldierCount do
10234: LD_ADDR_VAR 0 14
10238: PUSH
10239: DOUBLE
10240: LD_INT 1
10242: DEC
10243: ST_TO_ADDR
10244: LD_VAR 0 3
10248: PUSH
10249: FOR_TO
10250: IFFALSE 10332
// begin uc_side = side ;
10252: LD_ADDR_OWVAR 20
10256: PUSH
10257: LD_VAR 0 1
10261: ST_TO_ADDR
// uc_nation = nation ;
10262: LD_ADDR_OWVAR 21
10266: PUSH
10267: LD_VAR 0 2
10271: ST_TO_ADDR
// hc_name =  ;
10272: LD_ADDR_OWVAR 26
10276: PUSH
10277: LD_STRING 
10279: ST_TO_ADDR
// hc_gallery =  ;
10280: LD_ADDR_OWVAR 33
10284: PUSH
10285: LD_STRING 
10287: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10288: LD_INT 0
10290: PPUSH
10291: LD_INT 1
10293: PPUSH
10294: LD_VAR 0 8
10298: PPUSH
10299: CALL_OW 380
// un = CreateHuman ;
10303: LD_ADDR_VAR 0 16
10307: PUSH
10308: CALL_OW 44
10312: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10313: LD_VAR 0 16
10317: PPUSH
10318: LD_VAR 0 9
10322: PPUSH
10323: LD_INT 0
10325: PPUSH
10326: CALL_OW 49
// end ;
10330: GO 10249
10332: POP
10333: POP
// for i = 1 to sniperCount do
10334: LD_ADDR_VAR 0 14
10338: PUSH
10339: DOUBLE
10340: LD_INT 1
10342: DEC
10343: ST_TO_ADDR
10344: LD_VAR 0 4
10348: PUSH
10349: FOR_TO
10350: IFFALSE 10432
// begin uc_side = side ;
10352: LD_ADDR_OWVAR 20
10356: PUSH
10357: LD_VAR 0 1
10361: ST_TO_ADDR
// uc_nation = nation ;
10362: LD_ADDR_OWVAR 21
10366: PUSH
10367: LD_VAR 0 2
10371: ST_TO_ADDR
// hc_name =  ;
10372: LD_ADDR_OWVAR 26
10376: PUSH
10377: LD_STRING 
10379: ST_TO_ADDR
// hc_gallery =  ;
10380: LD_ADDR_OWVAR 33
10384: PUSH
10385: LD_STRING 
10387: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10388: LD_INT 0
10390: PPUSH
10391: LD_INT 5
10393: PPUSH
10394: LD_VAR 0 8
10398: PPUSH
10399: CALL_OW 380
// un = CreateHuman ;
10403: LD_ADDR_VAR 0 16
10407: PUSH
10408: CALL_OW 44
10412: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10413: LD_VAR 0 16
10417: PPUSH
10418: LD_VAR 0 9
10422: PPUSH
10423: LD_INT 0
10425: PPUSH
10426: CALL_OW 49
// end ;
10430: GO 10349
10432: POP
10433: POP
// for i = 1 to bazookCount do
10434: LD_ADDR_VAR 0 14
10438: PUSH
10439: DOUBLE
10440: LD_INT 1
10442: DEC
10443: ST_TO_ADDR
10444: LD_VAR 0 5
10448: PUSH
10449: FOR_TO
10450: IFFALSE 10532
// begin uc_side = side ;
10452: LD_ADDR_OWVAR 20
10456: PUSH
10457: LD_VAR 0 1
10461: ST_TO_ADDR
// uc_nation = nation ;
10462: LD_ADDR_OWVAR 21
10466: PUSH
10467: LD_VAR 0 2
10471: ST_TO_ADDR
// hc_name =  ;
10472: LD_ADDR_OWVAR 26
10476: PUSH
10477: LD_STRING 
10479: ST_TO_ADDR
// hc_gallery =  ;
10480: LD_ADDR_OWVAR 33
10484: PUSH
10485: LD_STRING 
10487: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10488: LD_INT 0
10490: PPUSH
10491: LD_INT 9
10493: PPUSH
10494: LD_VAR 0 8
10498: PPUSH
10499: CALL_OW 380
// un = CreateHuman ;
10503: LD_ADDR_VAR 0 16
10507: PUSH
10508: CALL_OW 44
10512: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10513: LD_VAR 0 16
10517: PPUSH
10518: LD_VAR 0 9
10522: PPUSH
10523: LD_INT 0
10525: PPUSH
10526: CALL_OW 49
// end ;
10530: GO 10449
10532: POP
10533: POP
// for i = 1 to mortalCount do
10534: LD_ADDR_VAR 0 14
10538: PUSH
10539: DOUBLE
10540: LD_INT 1
10542: DEC
10543: ST_TO_ADDR
10544: LD_VAR 0 6
10548: PUSH
10549: FOR_TO
10550: IFFALSE 10632
// begin uc_side = side ;
10552: LD_ADDR_OWVAR 20
10556: PUSH
10557: LD_VAR 0 1
10561: ST_TO_ADDR
// uc_nation = nation ;
10562: LD_ADDR_OWVAR 21
10566: PUSH
10567: LD_VAR 0 2
10571: ST_TO_ADDR
// hc_name =  ;
10572: LD_ADDR_OWVAR 26
10576: PUSH
10577: LD_STRING 
10579: ST_TO_ADDR
// hc_gallery =  ;
10580: LD_ADDR_OWVAR 33
10584: PUSH
10585: LD_STRING 
10587: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10588: LD_INT 0
10590: PPUSH
10591: LD_INT 8
10593: PPUSH
10594: LD_VAR 0 8
10598: PPUSH
10599: CALL_OW 380
// un = CreateHuman ;
10603: LD_ADDR_VAR 0 16
10607: PUSH
10608: CALL_OW 44
10612: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10613: LD_VAR 0 16
10617: PPUSH
10618: LD_VAR 0 9
10622: PPUSH
10623: LD_INT 0
10625: PPUSH
10626: CALL_OW 49
// end ;
10630: GO 10549
10632: POP
10633: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10634: LD_ADDR_VAR 0 19
10638: PUSH
10639: LD_INT 22
10641: PUSH
10642: LD_VAR 0 1
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: LD_INT 2
10653: PUSH
10654: LD_INT 25
10656: PUSH
10657: LD_INT 1
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 25
10666: PUSH
10667: LD_INT 5
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: LD_INT 25
10676: PUSH
10677: LD_INT 8
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PUSH
10684: LD_INT 25
10686: PUSH
10687: LD_INT 9
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PPUSH
10705: CALL_OW 69
10709: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
10710: LD_ADDR_VAR 0 18
10714: PUSH
10715: LD_INT 22
10717: PUSH
10718: LD_VAR 0 1
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: LD_INT 25
10729: PUSH
10730: LD_INT 4
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: PPUSH
10741: CALL_OW 69
10745: ST_TO_ADDR
// for i in medic_list do
10746: LD_ADDR_VAR 0 14
10750: PUSH
10751: LD_VAR 0 18
10755: PUSH
10756: FOR_IN
10757: IFFALSE 10775
// ComMoveToArea ( i , healArea ) ;
10759: LD_VAR 0 14
10763: PPUSH
10764: LD_VAR 0 10
10768: PPUSH
10769: CALL_OW 113
10773: GO 10756
10775: POP
10776: POP
// if strategy = 1 then
10777: LD_VAR 0 12
10781: PUSH
10782: LD_INT 1
10784: EQUAL
10785: IFFALSE 11520
// begin repeat wait ( 0 0$3 ) ;
10787: LD_INT 105
10789: PPUSH
10790: CALL_OW 67
// for i in soldiersOK_list do
10794: LD_ADDR_VAR 0 14
10798: PUSH
10799: LD_VAR 0 19
10803: PUSH
10804: FOR_IN
10805: IFFALSE 10869
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
10807: LD_VAR 0 14
10811: PPUSH
10812: LD_INT 91
10814: PPUSH
10815: LD_INT 63
10817: PPUSH
10818: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
10822: LD_VAR 0 14
10826: PPUSH
10827: LD_INT 101
10829: PPUSH
10830: LD_INT 53
10832: PPUSH
10833: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
10837: LD_VAR 0 14
10841: PPUSH
10842: LD_INT 75
10844: PPUSH
10845: LD_INT 23
10847: PPUSH
10848: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
10852: LD_VAR 0 14
10856: PPUSH
10857: LD_INT 78
10859: PPUSH
10860: LD_INT 8
10862: PPUSH
10863: CALL_OW 174
// end ;
10867: GO 10804
10869: POP
10870: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
10871: LD_INT 12
10873: PPUSH
10874: LD_INT 22
10876: PUSH
10877: LD_VAR 0 1
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PPUSH
10886: CALL_OW 70
10890: PUSH
10891: LD_INT 2
10893: GREATER
10894: IFFALSE 10787
// repeat wait ( 0 0$1 ) ;
10896: LD_INT 35
10898: PPUSH
10899: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10903: LD_ADDR_VAR 0 17
10907: PUSH
10908: LD_INT 22
10910: PUSH
10911: LD_VAR 0 1
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 1
10922: PUSH
10923: LD_INT 3
10925: PUSH
10926: LD_INT 24
10928: PUSH
10929: LD_INT 550
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 24
10942: PUSH
10943: LD_INT 250
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: LIST
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PPUSH
10959: CALL_OW 69
10963: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10964: LD_ADDR_VAR 0 19
10968: PUSH
10969: LD_INT 22
10971: PUSH
10972: LD_VAR 0 1
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 2
10983: PUSH
10984: LD_INT 25
10986: PUSH
10987: LD_INT 1
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: PUSH
10994: LD_INT 25
10996: PUSH
10997: LD_INT 5
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: LD_INT 25
11006: PUSH
11007: LD_INT 8
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PUSH
11014: LD_INT 25
11016: PUSH
11017: LD_INT 9
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 24
11033: PUSH
11034: LD_INT 1000
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: PPUSH
11046: CALL_OW 69
11050: ST_TO_ADDR
// if medicCount > 0 then
11051: LD_VAR 0 7
11055: PUSH
11056: LD_INT 0
11058: GREATER
11059: IFFALSE 11133
// begin if damageUnit_list > 0 then
11061: LD_VAR 0 17
11065: PUSH
11066: LD_INT 0
11068: GREATER
11069: IFFALSE 11133
// begin for i in damageUnit_list do
11071: LD_ADDR_VAR 0 14
11075: PUSH
11076: LD_VAR 0 17
11080: PUSH
11081: FOR_IN
11082: IFFALSE 11131
// begin ComMoveToArea ( i , healArea ) ;
11084: LD_VAR 0 14
11088: PPUSH
11089: LD_VAR 0 10
11093: PPUSH
11094: CALL_OW 113
// for j in medic_list do
11098: LD_ADDR_VAR 0 15
11102: PUSH
11103: LD_VAR 0 18
11107: PUSH
11108: FOR_IN
11109: IFFALSE 11127
// AddComHeal ( j , i ) ;
11111: LD_VAR 0 15
11115: PPUSH
11116: LD_VAR 0 14
11120: PPUSH
11121: CALL_OW 188
11125: GO 11108
11127: POP
11128: POP
// end ;
11129: GO 11081
11131: POP
11132: POP
// end ; end ; for i in soldiersOK_list do
11133: LD_ADDR_VAR 0 14
11137: PUSH
11138: LD_VAR 0 19
11142: PUSH
11143: FOR_IN
11144: IFFALSE 11320
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11146: LD_ADDR_VAR 0 22
11150: PUSH
11151: LD_INT 22
11153: PUSH
11154: LD_VAR 0 11
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PPUSH
11163: CALL_OW 69
11167: PPUSH
11168: LD_VAR 0 14
11172: PPUSH
11173: CALL_OW 74
11177: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11178: LD_ADDR_VAR 0 23
11182: PUSH
11183: LD_INT 22
11185: PUSH
11186: LD_VAR 0 11
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 2
11197: PUSH
11198: LD_INT 59
11200: PUSH
11201: EMPTY
11202: LIST
11203: PUSH
11204: LD_INT 21
11206: PUSH
11207: LD_INT 1
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 21
11216: PUSH
11217: LD_INT 2
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: EMPTY
11235: LIST
11236: PPUSH
11237: CALL_OW 69
11241: PPUSH
11242: LD_VAR 0 14
11246: PPUSH
11247: CALL_OW 74
11251: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11252: LD_VAR 0 14
11256: PPUSH
11257: LD_VAR 0 22
11261: PPUSH
11262: CALL_OW 296
11266: PUSH
11267: LD_INT 8
11269: PLUS
11270: PUSH
11271: LD_VAR 0 14
11275: PPUSH
11276: LD_VAR 0 23
11280: PPUSH
11281: CALL_OW 296
11285: LESS
11286: IFFALSE 11304
// begin ComAttackUnit ( i , target1 ) ;
11288: LD_VAR 0 14
11292: PPUSH
11293: LD_VAR 0 22
11297: PPUSH
11298: CALL_OW 115
// end else
11302: GO 11318
// begin ComAttackUnit ( i , target2 ) ;
11304: LD_VAR 0 14
11308: PPUSH
11309: LD_VAR 0 23
11313: PPUSH
11314: CALL_OW 115
// end ; end ;
11318: GO 11143
11320: POP
11321: POP
// for i in soldiersOK_list do
11322: LD_ADDR_VAR 0 14
11326: PUSH
11327: LD_VAR 0 19
11331: PUSH
11332: FOR_IN
11333: IFFALSE 11509
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11335: LD_ADDR_VAR 0 22
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_VAR 0 11
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PPUSH
11352: CALL_OW 69
11356: PPUSH
11357: LD_VAR 0 14
11361: PPUSH
11362: CALL_OW 74
11366: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11367: LD_ADDR_VAR 0 23
11371: PUSH
11372: LD_INT 22
11374: PUSH
11375: LD_VAR 0 11
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: LD_INT 59
11389: PUSH
11390: EMPTY
11391: LIST
11392: PUSH
11393: LD_INT 21
11395: PUSH
11396: LD_INT 1
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 21
11405: PUSH
11406: LD_INT 2
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: EMPTY
11424: LIST
11425: PPUSH
11426: CALL_OW 69
11430: PPUSH
11431: LD_VAR 0 14
11435: PPUSH
11436: CALL_OW 74
11440: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11441: LD_VAR 0 14
11445: PPUSH
11446: LD_VAR 0 22
11450: PPUSH
11451: CALL_OW 296
11455: PUSH
11456: LD_INT 8
11458: PLUS
11459: PUSH
11460: LD_VAR 0 14
11464: PPUSH
11465: LD_VAR 0 23
11469: PPUSH
11470: CALL_OW 296
11474: LESS
11475: IFFALSE 11493
// begin ComAttackUnit ( i , target1 ) ;
11477: LD_VAR 0 14
11481: PPUSH
11482: LD_VAR 0 22
11486: PPUSH
11487: CALL_OW 115
// end else
11491: GO 11507
// begin ComAttackUnit ( i , target2 ) ;
11493: LD_VAR 0 14
11497: PPUSH
11498: LD_VAR 0 23
11502: PPUSH
11503: CALL_OW 115
// end ; end ;
11507: GO 11332
11509: POP
11510: POP
// until soldiersOK_list = [ ] ;
11511: LD_VAR 0 19
11515: PUSH
11516: EMPTY
11517: EQUAL
11518: IFFALSE 10896
// end ; if strategy = 2 then
11520: LD_VAR 0 12
11524: PUSH
11525: LD_INT 2
11527: EQUAL
11528: IFFALSE 12233
// begin repeat wait ( 0 0$1 ) ;
11530: LD_INT 35
11532: PPUSH
11533: CALL_OW 67
// for i in soldiersOK_list do
11537: LD_ADDR_VAR 0 14
11541: PUSH
11542: LD_VAR 0 19
11546: PUSH
11547: FOR_IN
11548: IFFALSE 11582
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11550: LD_VAR 0 14
11554: PPUSH
11555: LD_INT 91
11557: PPUSH
11558: LD_INT 63
11560: PPUSH
11561: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
11565: LD_VAR 0 14
11569: PPUSH
11570: LD_INT 75
11572: PPUSH
11573: LD_INT 33
11575: PPUSH
11576: CALL_OW 174
// end ;
11580: GO 11547
11582: POP
11583: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
11584: LD_INT 13
11586: PPUSH
11587: LD_INT 22
11589: PUSH
11590: LD_VAR 0 1
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PPUSH
11599: CALL_OW 70
11603: PUSH
11604: LD_INT 2
11606: GREATER
11607: IFFALSE 11530
// repeat wait ( 0 0$3 ) ;
11609: LD_INT 105
11611: PPUSH
11612: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11616: LD_ADDR_VAR 0 17
11620: PUSH
11621: LD_INT 22
11623: PUSH
11624: LD_VAR 0 1
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 1
11635: PUSH
11636: LD_INT 3
11638: PUSH
11639: LD_INT 24
11641: PUSH
11642: LD_INT 550
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 24
11655: PUSH
11656: LD_INT 250
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PPUSH
11672: CALL_OW 69
11676: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11677: LD_ADDR_VAR 0 19
11681: PUSH
11682: LD_INT 22
11684: PUSH
11685: LD_VAR 0 1
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: LD_INT 2
11696: PUSH
11697: LD_INT 25
11699: PUSH
11700: LD_INT 1
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 25
11709: PUSH
11710: LD_INT 5
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 25
11719: PUSH
11720: LD_INT 8
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 25
11729: PUSH
11730: LD_INT 9
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: PUSH
11744: LD_INT 24
11746: PUSH
11747: LD_INT 1000
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: LIST
11758: PPUSH
11759: CALL_OW 69
11763: ST_TO_ADDR
// if medicCount > 0 then
11764: LD_VAR 0 7
11768: PUSH
11769: LD_INT 0
11771: GREATER
11772: IFFALSE 11846
// begin if damageUnit_list > 0 then
11774: LD_VAR 0 17
11778: PUSH
11779: LD_INT 0
11781: GREATER
11782: IFFALSE 11846
// begin for i in damageUnit_list do
11784: LD_ADDR_VAR 0 14
11788: PUSH
11789: LD_VAR 0 17
11793: PUSH
11794: FOR_IN
11795: IFFALSE 11844
// begin ComMoveToArea ( i , healArea ) ;
11797: LD_VAR 0 14
11801: PPUSH
11802: LD_VAR 0 10
11806: PPUSH
11807: CALL_OW 113
// for j in medic_list do
11811: LD_ADDR_VAR 0 15
11815: PUSH
11816: LD_VAR 0 18
11820: PUSH
11821: FOR_IN
11822: IFFALSE 11840
// AddComHeal ( j , i ) ;
11824: LD_VAR 0 15
11828: PPUSH
11829: LD_VAR 0 14
11833: PPUSH
11834: CALL_OW 188
11838: GO 11821
11840: POP
11841: POP
// end ;
11842: GO 11794
11844: POP
11845: POP
// end ; end ; for i in soldiersOK_list do
11846: LD_ADDR_VAR 0 14
11850: PUSH
11851: LD_VAR 0 19
11855: PUSH
11856: FOR_IN
11857: IFFALSE 12033
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11859: LD_ADDR_VAR 0 22
11863: PUSH
11864: LD_INT 22
11866: PUSH
11867: LD_VAR 0 11
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PPUSH
11876: CALL_OW 69
11880: PPUSH
11881: LD_VAR 0 14
11885: PPUSH
11886: CALL_OW 74
11890: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11891: LD_ADDR_VAR 0 23
11895: PUSH
11896: LD_INT 22
11898: PUSH
11899: LD_VAR 0 11
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 2
11910: PUSH
11911: LD_INT 59
11913: PUSH
11914: EMPTY
11915: LIST
11916: PUSH
11917: LD_INT 21
11919: PUSH
11920: LD_INT 1
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 21
11929: PUSH
11930: LD_INT 2
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: PUSH
11947: EMPTY
11948: LIST
11949: PPUSH
11950: CALL_OW 69
11954: PPUSH
11955: LD_VAR 0 14
11959: PPUSH
11960: CALL_OW 74
11964: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11965: LD_VAR 0 14
11969: PPUSH
11970: LD_VAR 0 22
11974: PPUSH
11975: CALL_OW 296
11979: PUSH
11980: LD_INT 8
11982: PLUS
11983: PUSH
11984: LD_VAR 0 14
11988: PPUSH
11989: LD_VAR 0 23
11993: PPUSH
11994: CALL_OW 296
11998: LESS
11999: IFFALSE 12017
// begin ComAttackUnit ( i , target1 ) ;
12001: LD_VAR 0 14
12005: PPUSH
12006: LD_VAR 0 22
12010: PPUSH
12011: CALL_OW 115
// end else
12015: GO 12031
// begin ComAttackUnit ( i , target2 ) ;
12017: LD_VAR 0 14
12021: PPUSH
12022: LD_VAR 0 23
12026: PPUSH
12027: CALL_OW 115
// end ; end ;
12031: GO 11856
12033: POP
12034: POP
// for i in soldiersOK_list do
12035: LD_ADDR_VAR 0 14
12039: PUSH
12040: LD_VAR 0 19
12044: PUSH
12045: FOR_IN
12046: IFFALSE 12222
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12048: LD_ADDR_VAR 0 22
12052: PUSH
12053: LD_INT 22
12055: PUSH
12056: LD_VAR 0 11
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PPUSH
12065: CALL_OW 69
12069: PPUSH
12070: LD_VAR 0 14
12074: PPUSH
12075: CALL_OW 74
12079: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12080: LD_ADDR_VAR 0 23
12084: PUSH
12085: LD_INT 22
12087: PUSH
12088: LD_VAR 0 11
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PUSH
12097: LD_INT 2
12099: PUSH
12100: LD_INT 59
12102: PUSH
12103: EMPTY
12104: LIST
12105: PUSH
12106: LD_INT 21
12108: PUSH
12109: LD_INT 1
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 21
12118: PUSH
12119: LD_INT 2
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: PPUSH
12139: CALL_OW 69
12143: PPUSH
12144: LD_VAR 0 14
12148: PPUSH
12149: CALL_OW 74
12153: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12154: LD_VAR 0 14
12158: PPUSH
12159: LD_VAR 0 22
12163: PPUSH
12164: CALL_OW 296
12168: PUSH
12169: LD_INT 8
12171: PLUS
12172: PUSH
12173: LD_VAR 0 14
12177: PPUSH
12178: LD_VAR 0 23
12182: PPUSH
12183: CALL_OW 296
12187: LESS
12188: IFFALSE 12206
// begin ComAttackUnit ( i , target1 ) ;
12190: LD_VAR 0 14
12194: PPUSH
12195: LD_VAR 0 22
12199: PPUSH
12200: CALL_OW 115
// end else
12204: GO 12220
// begin ComAttackUnit ( i , target2 ) ;
12206: LD_VAR 0 14
12210: PPUSH
12211: LD_VAR 0 23
12215: PPUSH
12216: CALL_OW 115
// end ; end ;
12220: GO 12045
12222: POP
12223: POP
// until soldiersOK_list = [ ] ;
12224: LD_VAR 0 19
12228: PUSH
12229: EMPTY
12230: EQUAL
12231: IFFALSE 11609
// end ; if strategy = 3 then
12233: LD_VAR 0 12
12237: PUSH
12238: LD_INT 3
12240: EQUAL
12241: IFFALSE 12976
// begin repeat wait ( 0 0$3 ) ;
12243: LD_INT 105
12245: PPUSH
12246: CALL_OW 67
// for i in soldiersOK_list do
12250: LD_ADDR_VAR 0 14
12254: PUSH
12255: LD_VAR 0 19
12259: PUSH
12260: FOR_IN
12261: IFFALSE 12325
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
12263: LD_VAR 0 14
12267: PPUSH
12268: LD_INT 63
12270: PPUSH
12271: LD_INT 71
12273: PPUSH
12274: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
12278: LD_VAR 0 14
12282: PPUSH
12283: LD_INT 35
12285: PPUSH
12286: LD_INT 44
12288: PPUSH
12289: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
12293: LD_VAR 0 14
12297: PPUSH
12298: LD_INT 23
12300: PPUSH
12301: LD_INT 18
12303: PPUSH
12304: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
12308: LD_VAR 0 14
12312: PPUSH
12313: LD_INT 26
12315: PPUSH
12316: LD_INT 12
12318: PPUSH
12319: CALL_OW 174
// end ;
12323: GO 12260
12325: POP
12326: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
12327: LD_INT 14
12329: PPUSH
12330: LD_INT 22
12332: PUSH
12333: LD_VAR 0 1
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PPUSH
12342: CALL_OW 70
12346: PUSH
12347: LD_INT 2
12349: GREATER
12350: IFFALSE 12243
// repeat wait ( 0 0$1 ) ;
12352: LD_INT 35
12354: PPUSH
12355: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12359: LD_ADDR_VAR 0 17
12363: PUSH
12364: LD_INT 22
12366: PUSH
12367: LD_VAR 0 1
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 1
12378: PUSH
12379: LD_INT 3
12381: PUSH
12382: LD_INT 24
12384: PUSH
12385: LD_INT 550
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: LD_INT 24
12398: PUSH
12399: LD_INT 250
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: LIST
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PPUSH
12415: CALL_OW 69
12419: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12420: LD_ADDR_VAR 0 19
12424: PUSH
12425: LD_INT 22
12427: PUSH
12428: LD_VAR 0 1
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 2
12439: PUSH
12440: LD_INT 25
12442: PUSH
12443: LD_INT 1
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: LD_INT 25
12452: PUSH
12453: LD_INT 5
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 25
12462: PUSH
12463: LD_INT 8
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 25
12472: PUSH
12473: LD_INT 9
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 24
12489: PUSH
12490: LD_INT 1000
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: LIST
12501: PPUSH
12502: CALL_OW 69
12506: ST_TO_ADDR
// if medicCount > 0 then
12507: LD_VAR 0 7
12511: PUSH
12512: LD_INT 0
12514: GREATER
12515: IFFALSE 12589
// begin if damageUnit_list > 0 then
12517: LD_VAR 0 17
12521: PUSH
12522: LD_INT 0
12524: GREATER
12525: IFFALSE 12589
// begin for i in damageUnit_list do
12527: LD_ADDR_VAR 0 14
12531: PUSH
12532: LD_VAR 0 17
12536: PUSH
12537: FOR_IN
12538: IFFALSE 12587
// begin ComMoveToArea ( i , healArea ) ;
12540: LD_VAR 0 14
12544: PPUSH
12545: LD_VAR 0 10
12549: PPUSH
12550: CALL_OW 113
// for j in medic_list do
12554: LD_ADDR_VAR 0 15
12558: PUSH
12559: LD_VAR 0 18
12563: PUSH
12564: FOR_IN
12565: IFFALSE 12583
// AddComHeal ( j , i ) ;
12567: LD_VAR 0 15
12571: PPUSH
12572: LD_VAR 0 14
12576: PPUSH
12577: CALL_OW 188
12581: GO 12564
12583: POP
12584: POP
// end ;
12585: GO 12537
12587: POP
12588: POP
// end ; end ; for i in soldiersOK_list do
12589: LD_ADDR_VAR 0 14
12593: PUSH
12594: LD_VAR 0 19
12598: PUSH
12599: FOR_IN
12600: IFFALSE 12776
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12602: LD_ADDR_VAR 0 22
12606: PUSH
12607: LD_INT 22
12609: PUSH
12610: LD_VAR 0 11
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PPUSH
12619: CALL_OW 69
12623: PPUSH
12624: LD_VAR 0 14
12628: PPUSH
12629: CALL_OW 74
12633: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12634: LD_ADDR_VAR 0 23
12638: PUSH
12639: LD_INT 22
12641: PUSH
12642: LD_VAR 0 11
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: LD_INT 2
12653: PUSH
12654: LD_INT 59
12656: PUSH
12657: EMPTY
12658: LIST
12659: PUSH
12660: LD_INT 21
12662: PUSH
12663: LD_INT 1
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: LD_INT 21
12672: PUSH
12673: LD_INT 2
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: EMPTY
12691: LIST
12692: PPUSH
12693: CALL_OW 69
12697: PPUSH
12698: LD_VAR 0 14
12702: PPUSH
12703: CALL_OW 74
12707: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12708: LD_VAR 0 14
12712: PPUSH
12713: LD_VAR 0 22
12717: PPUSH
12718: CALL_OW 296
12722: PUSH
12723: LD_INT 8
12725: PLUS
12726: PUSH
12727: LD_VAR 0 14
12731: PPUSH
12732: LD_VAR 0 23
12736: PPUSH
12737: CALL_OW 296
12741: LESS
12742: IFFALSE 12760
// begin ComAttackUnit ( i , target1 ) ;
12744: LD_VAR 0 14
12748: PPUSH
12749: LD_VAR 0 22
12753: PPUSH
12754: CALL_OW 115
// end else
12758: GO 12774
// begin ComAttackUnit ( i , target2 ) ;
12760: LD_VAR 0 14
12764: PPUSH
12765: LD_VAR 0 23
12769: PPUSH
12770: CALL_OW 115
// end ; end ;
12774: GO 12599
12776: POP
12777: POP
// for i in soldiersOK_list do
12778: LD_ADDR_VAR 0 14
12782: PUSH
12783: LD_VAR 0 19
12787: PUSH
12788: FOR_IN
12789: IFFALSE 12965
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12791: LD_ADDR_VAR 0 22
12795: PUSH
12796: LD_INT 22
12798: PUSH
12799: LD_VAR 0 11
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PPUSH
12808: CALL_OW 69
12812: PPUSH
12813: LD_VAR 0 14
12817: PPUSH
12818: CALL_OW 74
12822: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12823: LD_ADDR_VAR 0 23
12827: PUSH
12828: LD_INT 22
12830: PUSH
12831: LD_VAR 0 11
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 2
12842: PUSH
12843: LD_INT 59
12845: PUSH
12846: EMPTY
12847: LIST
12848: PUSH
12849: LD_INT 21
12851: PUSH
12852: LD_INT 1
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PUSH
12859: LD_INT 21
12861: PUSH
12862: LD_INT 2
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: PPUSH
12882: CALL_OW 69
12886: PPUSH
12887: LD_VAR 0 14
12891: PPUSH
12892: CALL_OW 74
12896: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12897: LD_VAR 0 14
12901: PPUSH
12902: LD_VAR 0 22
12906: PPUSH
12907: CALL_OW 296
12911: PUSH
12912: LD_INT 8
12914: PLUS
12915: PUSH
12916: LD_VAR 0 14
12920: PPUSH
12921: LD_VAR 0 23
12925: PPUSH
12926: CALL_OW 296
12930: LESS
12931: IFFALSE 12949
// begin ComAttackUnit ( i , target1 ) ;
12933: LD_VAR 0 14
12937: PPUSH
12938: LD_VAR 0 22
12942: PPUSH
12943: CALL_OW 115
// end else
12947: GO 12963
// begin ComAttackUnit ( i , target2 ) ;
12949: LD_VAR 0 14
12953: PPUSH
12954: LD_VAR 0 23
12958: PPUSH
12959: CALL_OW 115
// end ; end ;
12963: GO 12788
12965: POP
12966: POP
// until soldiersOK_list = [ ] ;
12967: LD_VAR 0 19
12971: PUSH
12972: EMPTY
12973: EQUAL
12974: IFFALSE 12352
// end ; end ;
12976: LD_VAR 0 13
12980: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
12981: LD_INT 0
12983: PPUSH
12984: PPUSH
12985: PPUSH
12986: PPUSH
12987: PPUSH
12988: PPUSH
12989: PPUSH
12990: PPUSH
12991: PPUSH
12992: PPUSH
12993: PPUSH
// amChassisTab = [ ] ;
12994: LD_ADDR_VAR 0 19
12998: PUSH
12999: EMPTY
13000: ST_TO_ADDR
// arChassisTab = [ ] ;
13001: LD_ADDR_VAR 0 18
13005: PUSH
13006: EMPTY
13007: ST_TO_ADDR
// ruChassisTab = [ ] ;
13008: LD_ADDR_VAR 0 17
13012: PUSH
13013: EMPTY
13014: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13015: LD_INT 35
13017: PPUSH
13018: CALL_OW 67
// if nation = 1 then
13022: LD_VAR 0 5
13026: PUSH
13027: LD_INT 1
13029: EQUAL
13030: IFFALSE 13521
// begin uc_side = side ;
13032: LD_ADDR_OWVAR 20
13036: PUSH
13037: LD_VAR 0 2
13041: ST_TO_ADDR
// uc_nation = nation ;
13042: LD_ADDR_OWVAR 21
13046: PUSH
13047: LD_VAR 0 5
13051: ST_TO_ADDR
// vc_engine = vehengine ;
13052: LD_ADDR_OWVAR 39
13056: PUSH
13057: LD_VAR 0 6
13061: ST_TO_ADDR
// vc_control = vehcontrol ;
13062: LD_ADDR_OWVAR 38
13066: PUSH
13067: LD_VAR 0 7
13071: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13072: LD_ADDR_OWVAR 40
13076: PUSH
13077: LD_VAR 0 10
13081: PUSH
13082: LD_INT 1
13084: PPUSH
13085: LD_VAR 0 10
13089: PPUSH
13090: CALL_OW 12
13094: ARRAY
13095: ST_TO_ADDR
// for j = 1 to AMWeapon do
13096: LD_ADDR_VAR 0 14
13100: PUSH
13101: DOUBLE
13102: LD_INT 1
13104: DEC
13105: ST_TO_ADDR
13106: LD_VAR 0 10
13110: PUSH
13111: FOR_TO
13112: IFFALSE 13413
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13114: LD_VAR 0 10
13118: PUSH
13119: LD_VAR 0 14
13123: ARRAY
13124: PUSH
13125: LD_INT 2
13127: EQUAL
13128: PUSH
13129: LD_VAR 0 10
13133: PUSH
13134: LD_VAR 0 14
13138: ARRAY
13139: PUSH
13140: LD_INT 3
13142: EQUAL
13143: OR
13144: IFFALSE 13197
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13146: LD_ADDR_VAR 0 19
13150: PUSH
13151: LD_INT 1
13153: PUSH
13154: LD_INT 2
13156: PUSH
13157: LD_INT 3
13159: PUSH
13160: LD_INT 4
13162: PUSH
13163: LD_INT 5
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13173: LD_ADDR_OWVAR 37
13177: PUSH
13178: LD_VAR 0 19
13182: PUSH
13183: LD_INT 1
13185: PPUSH
13186: LD_VAR 0 19
13190: PPUSH
13191: CALL_OW 12
13195: ARRAY
13196: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13197: LD_VAR 0 10
13201: PUSH
13202: LD_VAR 0 14
13206: ARRAY
13207: PUSH
13208: LD_INT 4
13210: EQUAL
13211: PUSH
13212: LD_VAR 0 10
13216: PUSH
13217: LD_VAR 0 14
13221: ARRAY
13222: PUSH
13223: LD_INT 5
13225: EQUAL
13226: OR
13227: PUSH
13228: LD_VAR 0 10
13232: PUSH
13233: LD_VAR 0 14
13237: ARRAY
13238: PUSH
13239: LD_INT 9
13241: EQUAL
13242: OR
13243: PUSH
13244: LD_VAR 0 10
13248: PUSH
13249: LD_VAR 0 14
13253: ARRAY
13254: PUSH
13255: LD_INT 11
13257: EQUAL
13258: OR
13259: PUSH
13260: LD_VAR 0 10
13264: PUSH
13265: LD_VAR 0 14
13269: ARRAY
13270: PUSH
13271: LD_INT 7
13273: EQUAL
13274: OR
13275: IFFALSE 13324
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
13277: LD_ADDR_VAR 0 19
13281: PUSH
13282: LD_INT 2
13284: PUSH
13285: LD_INT 3
13287: PUSH
13288: LD_INT 4
13290: PUSH
13291: LD_INT 5
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13300: LD_ADDR_OWVAR 37
13304: PUSH
13305: LD_VAR 0 19
13309: PUSH
13310: LD_INT 1
13312: PPUSH
13313: LD_VAR 0 19
13317: PPUSH
13318: CALL_OW 12
13322: ARRAY
13323: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
13324: LD_VAR 0 10
13328: PUSH
13329: LD_VAR 0 14
13333: ARRAY
13334: PUSH
13335: LD_INT 8
13337: EQUAL
13338: PUSH
13339: LD_VAR 0 10
13343: PUSH
13344: LD_VAR 0 14
13348: ARRAY
13349: PUSH
13350: LD_INT 6
13352: EQUAL
13353: OR
13354: PUSH
13355: LD_VAR 0 10
13359: PUSH
13360: LD_VAR 0 14
13364: ARRAY
13365: PUSH
13366: LD_INT 10
13368: EQUAL
13369: OR
13370: IFFALSE 13411
// begin amChassisTab = [ 4 , 5 ] ;
13372: LD_ADDR_VAR 0 19
13376: PUSH
13377: LD_INT 4
13379: PUSH
13380: LD_INT 5
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13387: LD_ADDR_OWVAR 37
13391: PUSH
13392: LD_VAR 0 19
13396: PUSH
13397: LD_INT 1
13399: PPUSH
13400: LD_VAR 0 19
13404: PPUSH
13405: CALL_OW 12
13409: ARRAY
13410: ST_TO_ADDR
// end ; end ;
13411: GO 13111
13413: POP
13414: POP
// veh = CreateVehicle ;
13415: LD_ADDR_VAR 0 16
13419: PUSH
13420: CALL_OW 45
13424: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13425: LD_VAR 0 16
13429: PPUSH
13430: LD_VAR 0 1
13434: PPUSH
13435: LD_INT 0
13437: PPUSH
13438: CALL_OW 49
// if vehControl = 1 then
13442: LD_VAR 0 7
13446: PUSH
13447: LD_INT 1
13449: EQUAL
13450: IFFALSE 13507
// begin hc_gallery =  ;
13452: LD_ADDR_OWVAR 33
13456: PUSH
13457: LD_STRING 
13459: ST_TO_ADDR
// hc_name =  ;
13460: LD_ADDR_OWVAR 26
13464: PUSH
13465: LD_STRING 
13467: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13468: LD_INT 0
13470: PPUSH
13471: LD_INT 3
13473: PPUSH
13474: LD_VAR 0 4
13478: PPUSH
13479: CALL_OW 380
// un = CreateHuman ;
13483: LD_ADDR_VAR 0 15
13487: PUSH
13488: CALL_OW 44
13492: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13493: LD_VAR 0 15
13497: PPUSH
13498: LD_VAR 0 16
13502: PPUSH
13503: CALL_OW 52
// end ; i = i + 1 ;
13507: LD_ADDR_VAR 0 13
13511: PUSH
13512: LD_VAR 0 13
13516: PUSH
13517: LD_INT 1
13519: PLUS
13520: ST_TO_ADDR
// end ; if nation = 2 then
13521: LD_VAR 0 5
13525: PUSH
13526: LD_INT 2
13528: EQUAL
13529: IFFALSE 13953
// begin uc_side = side ;
13531: LD_ADDR_OWVAR 20
13535: PUSH
13536: LD_VAR 0 2
13540: ST_TO_ADDR
// uc_nation = nation ;
13541: LD_ADDR_OWVAR 21
13545: PUSH
13546: LD_VAR 0 5
13550: ST_TO_ADDR
// vc_engine = vehengine ;
13551: LD_ADDR_OWVAR 39
13555: PUSH
13556: LD_VAR 0 6
13560: ST_TO_ADDR
// vc_control = vehcontrol ;
13561: LD_ADDR_OWVAR 38
13565: PUSH
13566: LD_VAR 0 7
13570: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
13571: LD_ADDR_OWVAR 40
13575: PUSH
13576: LD_VAR 0 9
13580: PUSH
13581: LD_INT 1
13583: PPUSH
13584: LD_VAR 0 9
13588: PPUSH
13589: CALL_OW 12
13593: ARRAY
13594: ST_TO_ADDR
// for j = 1 to ARWeapons do
13595: LD_ADDR_VAR 0 14
13599: PUSH
13600: DOUBLE
13601: LD_INT 1
13603: DEC
13604: ST_TO_ADDR
13605: LD_VAR 0 9
13609: PUSH
13610: FOR_TO
13611: IFFALSE 13845
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
13613: LD_VAR 0 9
13617: PUSH
13618: LD_VAR 0 14
13622: ARRAY
13623: PUSH
13624: LD_INT 24
13626: EQUAL
13627: PUSH
13628: LD_VAR 0 9
13632: PUSH
13633: LD_VAR 0 14
13637: ARRAY
13638: PUSH
13639: LD_INT 22
13641: EQUAL
13642: OR
13643: PUSH
13644: LD_VAR 0 9
13648: PUSH
13649: LD_VAR 0 14
13653: ARRAY
13654: PUSH
13655: LD_INT 23
13657: EQUAL
13658: OR
13659: PUSH
13660: LD_VAR 0 9
13664: PUSH
13665: LD_VAR 0 14
13669: ARRAY
13670: PUSH
13671: LD_INT 30
13673: EQUAL
13674: OR
13675: IFFALSE 13724
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
13677: LD_ADDR_VAR 0 18
13681: PUSH
13682: LD_INT 11
13684: PUSH
13685: LD_INT 12
13687: PUSH
13688: LD_INT 13
13690: PUSH
13691: LD_INT 14
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13700: LD_ADDR_OWVAR 37
13704: PUSH
13705: LD_VAR 0 18
13709: PUSH
13710: LD_INT 1
13712: PPUSH
13713: LD_VAR 0 18
13717: PPUSH
13718: CALL_OW 12
13722: ARRAY
13723: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13724: LD_VAR 0 9
13728: PUSH
13729: LD_VAR 0 14
13733: ARRAY
13734: PUSH
13735: LD_INT 29
13737: EQUAL
13738: PUSH
13739: LD_VAR 0 9
13743: PUSH
13744: LD_VAR 0 14
13748: ARRAY
13749: PUSH
13750: LD_INT 28
13752: EQUAL
13753: OR
13754: PUSH
13755: LD_VAR 0 9
13759: PUSH
13760: LD_VAR 0 14
13764: ARRAY
13765: PUSH
13766: LD_INT 27
13768: EQUAL
13769: OR
13770: PUSH
13771: LD_VAR 0 9
13775: PUSH
13776: LD_VAR 0 14
13780: ARRAY
13781: PUSH
13782: LD_INT 26
13784: EQUAL
13785: OR
13786: PUSH
13787: LD_VAR 0 9
13791: PUSH
13792: LD_VAR 0 14
13796: ARRAY
13797: PUSH
13798: LD_INT 25
13800: EQUAL
13801: OR
13802: IFFALSE 13843
// begin arChassisTab = [ 13 , 14 ] ;
13804: LD_ADDR_VAR 0 18
13808: PUSH
13809: LD_INT 13
13811: PUSH
13812: LD_INT 14
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13819: LD_ADDR_OWVAR 37
13823: PUSH
13824: LD_VAR 0 18
13828: PUSH
13829: LD_INT 1
13831: PPUSH
13832: LD_VAR 0 18
13836: PPUSH
13837: CALL_OW 12
13841: ARRAY
13842: ST_TO_ADDR
// end ; end ;
13843: GO 13610
13845: POP
13846: POP
// veh = CreateVehicle ;
13847: LD_ADDR_VAR 0 16
13851: PUSH
13852: CALL_OW 45
13856: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13857: LD_VAR 0 16
13861: PPUSH
13862: LD_VAR 0 1
13866: PPUSH
13867: LD_INT 0
13869: PPUSH
13870: CALL_OW 49
// if vehcontrol = 1 then
13874: LD_VAR 0 7
13878: PUSH
13879: LD_INT 1
13881: EQUAL
13882: IFFALSE 13939
// begin hc_gallery =  ;
13884: LD_ADDR_OWVAR 33
13888: PUSH
13889: LD_STRING 
13891: ST_TO_ADDR
// hc_name =  ;
13892: LD_ADDR_OWVAR 26
13896: PUSH
13897: LD_STRING 
13899: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13900: LD_INT 0
13902: PPUSH
13903: LD_INT 3
13905: PPUSH
13906: LD_VAR 0 4
13910: PPUSH
13911: CALL_OW 380
// un = CreateHuman ;
13915: LD_ADDR_VAR 0 15
13919: PUSH
13920: CALL_OW 44
13924: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13925: LD_VAR 0 15
13929: PPUSH
13930: LD_VAR 0 16
13934: PPUSH
13935: CALL_OW 52
// end ; i = i + 1 ;
13939: LD_ADDR_VAR 0 13
13943: PUSH
13944: LD_VAR 0 13
13948: PUSH
13949: LD_INT 1
13951: PLUS
13952: ST_TO_ADDR
// end ; if nation = 3 then
13953: LD_VAR 0 5
13957: PUSH
13958: LD_INT 3
13960: EQUAL
13961: IFFALSE 14353
// begin uc_side = side ;
13963: LD_ADDR_OWVAR 20
13967: PUSH
13968: LD_VAR 0 2
13972: ST_TO_ADDR
// uc_nation = nation ;
13973: LD_ADDR_OWVAR 21
13977: PUSH
13978: LD_VAR 0 5
13982: ST_TO_ADDR
// vc_engine = vehengine ;
13983: LD_ADDR_OWVAR 39
13987: PUSH
13988: LD_VAR 0 6
13992: ST_TO_ADDR
// vc_control = vehcontrol ;
13993: LD_ADDR_OWVAR 38
13997: PUSH
13998: LD_VAR 0 7
14002: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14003: LD_ADDR_OWVAR 40
14007: PUSH
14008: LD_VAR 0 8
14012: PUSH
14013: LD_INT 1
14015: PPUSH
14016: LD_VAR 0 8
14020: PPUSH
14021: CALL_OW 12
14025: ARRAY
14026: ST_TO_ADDR
// for j = 1 to RuWeapons do
14027: LD_ADDR_VAR 0 14
14031: PUSH
14032: DOUBLE
14033: LD_INT 1
14035: DEC
14036: ST_TO_ADDR
14037: LD_VAR 0 8
14041: PUSH
14042: FOR_TO
14043: IFFALSE 14245
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14045: LD_VAR 0 8
14049: PUSH
14050: LD_VAR 0 14
14054: ARRAY
14055: PUSH
14056: LD_INT 42
14058: EQUAL
14059: PUSH
14060: LD_VAR 0 8
14064: PUSH
14065: LD_VAR 0 14
14069: ARRAY
14070: PUSH
14071: LD_INT 43
14073: EQUAL
14074: OR
14075: PUSH
14076: LD_VAR 0 8
14080: PUSH
14081: LD_VAR 0 14
14085: ARRAY
14086: PUSH
14087: LD_INT 44
14089: EQUAL
14090: OR
14091: PUSH
14092: LD_VAR 0 8
14096: PUSH
14097: LD_VAR 0 14
14101: ARRAY
14102: PUSH
14103: LD_INT 45
14105: EQUAL
14106: OR
14107: PUSH
14108: LD_VAR 0 8
14112: PUSH
14113: LD_VAR 0 14
14117: ARRAY
14118: PUSH
14119: LD_INT 49
14121: EQUAL
14122: OR
14123: IFFALSE 14172
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14125: LD_ADDR_VAR 0 17
14129: PUSH
14130: LD_INT 21
14132: PUSH
14133: LD_INT 22
14135: PUSH
14136: LD_INT 23
14138: PUSH
14139: LD_INT 24
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14148: LD_ADDR_OWVAR 37
14152: PUSH
14153: LD_VAR 0 17
14157: PUSH
14158: LD_INT 1
14160: PPUSH
14161: LD_VAR 0 17
14165: PPUSH
14166: CALL_OW 12
14170: ARRAY
14171: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14172: LD_VAR 0 8
14176: PUSH
14177: LD_VAR 0 14
14181: ARRAY
14182: PUSH
14183: LD_INT 46
14185: EQUAL
14186: PUSH
14187: LD_VAR 0 8
14191: PUSH
14192: LD_VAR 0 14
14196: ARRAY
14197: PUSH
14198: LD_INT 47
14200: EQUAL
14201: OR
14202: IFFALSE 14243
// begin ruChassisTab = [ 23 , 24 ] ;
14204: LD_ADDR_VAR 0 17
14208: PUSH
14209: LD_INT 23
14211: PUSH
14212: LD_INT 24
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14219: LD_ADDR_OWVAR 37
14223: PUSH
14224: LD_VAR 0 17
14228: PUSH
14229: LD_INT 1
14231: PPUSH
14232: LD_VAR 0 17
14236: PPUSH
14237: CALL_OW 12
14241: ARRAY
14242: ST_TO_ADDR
// end ; end ;
14243: GO 14042
14245: POP
14246: POP
// veh = CreateVehicle ;
14247: LD_ADDR_VAR 0 16
14251: PUSH
14252: CALL_OW 45
14256: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14257: LD_VAR 0 16
14261: PPUSH
14262: LD_VAR 0 1
14266: PPUSH
14267: LD_INT 0
14269: PPUSH
14270: CALL_OW 49
// if vehcontrol = 1 then
14274: LD_VAR 0 7
14278: PUSH
14279: LD_INT 1
14281: EQUAL
14282: IFFALSE 14339
// begin hc_gallery =  ;
14284: LD_ADDR_OWVAR 33
14288: PUSH
14289: LD_STRING 
14291: ST_TO_ADDR
// hc_name =  ;
14292: LD_ADDR_OWVAR 26
14296: PUSH
14297: LD_STRING 
14299: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14300: LD_INT 0
14302: PPUSH
14303: LD_INT 3
14305: PPUSH
14306: LD_VAR 0 4
14310: PPUSH
14311: CALL_OW 380
// un = CreateHuman ;
14315: LD_ADDR_VAR 0 15
14319: PUSH
14320: CALL_OW 44
14324: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14325: LD_VAR 0 15
14329: PPUSH
14330: LD_VAR 0 16
14334: PPUSH
14335: CALL_OW 52
// end ; i = i + 1 ;
14339: LD_ADDR_VAR 0 13
14343: PUSH
14344: LD_VAR 0 13
14348: PUSH
14349: LD_INT 1
14351: PLUS
14352: ST_TO_ADDR
// end ; until i = vehCount ;
14353: LD_VAR 0 13
14357: PUSH
14358: LD_VAR 0 3
14362: EQUAL
14363: IFFALSE 13015
// repeat wait ( 0 0$1 ) ;
14365: LD_INT 35
14367: PPUSH
14368: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
14372: LD_ADDR_VAR 0 20
14376: PUSH
14377: LD_INT 22
14379: PUSH
14380: LD_VAR 0 2
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PUSH
14389: LD_INT 21
14391: PUSH
14392: LD_INT 2
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 24
14401: PUSH
14402: LD_INT 661
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: LIST
14413: PPUSH
14414: CALL_OW 69
14418: ST_TO_ADDR
// if vehicleOK_list > 0 then
14419: LD_VAR 0 20
14423: PUSH
14424: LD_INT 0
14426: GREATER
14427: IFFALSE 14618
// begin for i in vehicleOK_list do
14429: LD_ADDR_VAR 0 13
14433: PUSH
14434: LD_VAR 0 20
14438: PUSH
14439: FOR_IN
14440: IFFALSE 14616
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14442: LD_ADDR_VAR 0 21
14446: PUSH
14447: LD_INT 22
14449: PUSH
14450: LD_VAR 0 11
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PPUSH
14459: CALL_OW 69
14463: PPUSH
14464: LD_VAR 0 13
14468: PPUSH
14469: CALL_OW 74
14473: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14474: LD_ADDR_VAR 0 22
14478: PUSH
14479: LD_INT 22
14481: PUSH
14482: LD_VAR 0 11
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 2
14493: PUSH
14494: LD_INT 59
14496: PUSH
14497: EMPTY
14498: LIST
14499: PUSH
14500: LD_INT 21
14502: PUSH
14503: LD_INT 1
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 21
14512: PUSH
14513: LD_INT 2
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: EMPTY
14531: LIST
14532: PPUSH
14533: CALL_OW 69
14537: PPUSH
14538: LD_VAR 0 13
14542: PPUSH
14543: CALL_OW 74
14547: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14548: LD_VAR 0 13
14552: PPUSH
14553: LD_VAR 0 21
14557: PPUSH
14558: CALL_OW 296
14562: PUSH
14563: LD_INT 8
14565: PLUS
14566: PUSH
14567: LD_VAR 0 13
14571: PPUSH
14572: LD_VAR 0 22
14576: PPUSH
14577: CALL_OW 296
14581: LESS
14582: IFFALSE 14600
// begin ComAttackUnit ( i , target1 ) ;
14584: LD_VAR 0 13
14588: PPUSH
14589: LD_VAR 0 21
14593: PPUSH
14594: CALL_OW 115
// end else
14598: GO 14614
// begin ComAttackUnit ( i , target2 ) ;
14600: LD_VAR 0 13
14604: PPUSH
14605: LD_VAR 0 22
14609: PPUSH
14610: CALL_OW 115
// end ; end ;
14614: GO 14439
14616: POP
14617: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
14618: LD_INT 22
14620: PUSH
14621: LD_VAR 0 2
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 21
14632: PUSH
14633: LD_INT 2
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PPUSH
14644: CALL_OW 69
14648: PUSH
14649: LD_INT 0
14651: EQUAL
14652: IFFALSE 14365
// end ;
14654: LD_VAR 0 12
14658: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
14659: LD_INT 0
14661: PPUSH
14662: PPUSH
14663: PPUSH
14664: PPUSH
14665: PPUSH
14666: PPUSH
14667: PPUSH
14668: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14669: LD_ADDR_VAR 0 7
14673: PUSH
14674: LD_INT 22
14676: PUSH
14677: LD_VAR 0 1
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 1
14688: PUSH
14689: LD_INT 3
14691: PUSH
14692: LD_INT 24
14694: PUSH
14695: LD_INT 550
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 24
14708: PUSH
14709: LD_INT 250
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PPUSH
14725: CALL_OW 69
14729: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14730: LD_ADDR_VAR 0 8
14734: PUSH
14735: LD_INT 22
14737: PUSH
14738: LD_VAR 0 1
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 2
14749: PUSH
14750: LD_INT 25
14752: PUSH
14753: LD_INT 1
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 25
14762: PUSH
14763: LD_INT 5
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: LD_INT 25
14772: PUSH
14773: LD_INT 8
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: LD_INT 25
14782: PUSH
14783: LD_INT 9
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 24
14799: PUSH
14800: LD_INT 1000
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: LIST
14811: PPUSH
14812: CALL_OW 69
14816: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
14817: LD_ADDR_VAR 0 9
14821: PUSH
14822: LD_INT 22
14824: PUSH
14825: LD_VAR 0 1
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 25
14836: PUSH
14837: LD_INT 4
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PPUSH
14848: CALL_OW 69
14852: ST_TO_ADDR
// if medicCount > 0 then
14853: LD_VAR 0 9
14857: PUSH
14858: LD_INT 0
14860: GREATER
14861: IFFALSE 14935
// begin if damageUnit_list > 0 then
14863: LD_VAR 0 7
14867: PUSH
14868: LD_INT 0
14870: GREATER
14871: IFFALSE 14935
// begin for i in damageUnit_list do
14873: LD_ADDR_VAR 0 5
14877: PUSH
14878: LD_VAR 0 7
14882: PUSH
14883: FOR_IN
14884: IFFALSE 14933
// begin ComMoveToArea ( i , healArea ) ;
14886: LD_VAR 0 5
14890: PPUSH
14891: LD_VAR 0 2
14895: PPUSH
14896: CALL_OW 113
// for j in medicCount do
14900: LD_ADDR_VAR 0 6
14904: PUSH
14905: LD_VAR 0 9
14909: PUSH
14910: FOR_IN
14911: IFFALSE 14929
// AddComHeal ( j , i ) ;
14913: LD_VAR 0 6
14917: PPUSH
14918: LD_VAR 0 5
14922: PPUSH
14923: CALL_OW 188
14927: GO 14910
14929: POP
14930: POP
// end ;
14931: GO 14883
14933: POP
14934: POP
// end ; end ; if soldiersOK_list > 0 then
14935: LD_VAR 0 8
14939: PUSH
14940: LD_INT 0
14942: GREATER
14943: IFFALSE 15134
// begin for i in soldiersOK_list do
14945: LD_ADDR_VAR 0 5
14949: PUSH
14950: LD_VAR 0 8
14954: PUSH
14955: FOR_IN
14956: IFFALSE 15132
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14958: LD_ADDR_VAR 0 10
14962: PUSH
14963: LD_INT 22
14965: PUSH
14966: LD_VAR 0 3
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PPUSH
14975: CALL_OW 69
14979: PPUSH
14980: LD_VAR 0 5
14984: PPUSH
14985: CALL_OW 74
14989: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14990: LD_ADDR_VAR 0 11
14994: PUSH
14995: LD_INT 22
14997: PUSH
14998: LD_VAR 0 3
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 2
15009: PUSH
15010: LD_INT 59
15012: PUSH
15013: EMPTY
15014: LIST
15015: PUSH
15016: LD_INT 21
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 21
15028: PUSH
15029: LD_INT 2
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: EMPTY
15047: LIST
15048: PPUSH
15049: CALL_OW 69
15053: PPUSH
15054: LD_VAR 0 5
15058: PPUSH
15059: CALL_OW 74
15063: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15064: LD_VAR 0 5
15068: PPUSH
15069: LD_VAR 0 10
15073: PPUSH
15074: CALL_OW 296
15078: PUSH
15079: LD_INT 8
15081: PLUS
15082: PUSH
15083: LD_VAR 0 5
15087: PPUSH
15088: LD_VAR 0 11
15092: PPUSH
15093: CALL_OW 296
15097: LESS
15098: IFFALSE 15116
// begin ComAttackUnit ( i , target1 ) ;
15100: LD_VAR 0 5
15104: PPUSH
15105: LD_VAR 0 10
15109: PPUSH
15110: CALL_OW 115
// end else
15114: GO 15130
// begin ComAttackUnit ( i , target2 ) ;
15116: LD_VAR 0 5
15120: PPUSH
15121: LD_VAR 0 11
15125: PPUSH
15126: CALL_OW 115
// end ; end ;
15130: GO 14955
15132: POP
15133: POP
// end ; end ; end_of_file
15134: LD_VAR 0 4
15138: RET
// every 1 do var i ;
15139: GO 15141
15141: DISABLE
15142: LD_INT 0
15144: PPUSH
// begin InGameOn ;
15145: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
15149: LD_INT 53
15151: PPUSH
15152: LD_INT 40
15154: PPUSH
15155: CALL_OW 84
// wait ( 0 0$5 ) ;
15159: LD_INT 175
15161: PPUSH
15162: CALL_OW 67
// if gammaCommander = 1 then
15166: LD_EXP 11
15170: PUSH
15171: LD_INT 1
15173: EQUAL
15174: IFFALSE 15185
// CenterNowOnUnits ( Donaldson ) ;
15176: LD_EXP 3
15180: PPUSH
15181: CALL_OW 87
// if gammaCommander = 2 then
15185: LD_EXP 11
15189: PUSH
15190: LD_INT 2
15192: EQUAL
15193: IFFALSE 15204
// CenterNowOnUnits ( Brown ) ;
15195: LD_EXP 2
15199: PPUSH
15200: CALL_OW 87
// if gammaCommander = 3 then
15204: LD_EXP 11
15208: PUSH
15209: LD_INT 3
15211: EQUAL
15212: IFFALSE 15223
// CenterNowOnUnits ( Houten ) ;
15214: LD_EXP 12
15218: PPUSH
15219: CALL_OW 87
// if gammaCommander = 1 then
15223: LD_EXP 11
15227: PUSH
15228: LD_INT 1
15230: EQUAL
15231: IFFALSE 15245
// Say ( Donaldson , D1-Don-1 ) ;
15233: LD_EXP 3
15237: PPUSH
15238: LD_STRING D1-Don-1
15240: PPUSH
15241: CALL_OW 88
// if gammaCommander = 2 then
15245: LD_EXP 11
15249: PUSH
15250: LD_INT 2
15252: EQUAL
15253: IFFALSE 15267
// Say ( Brown , D1-Brown-1 ) ;
15255: LD_EXP 2
15259: PPUSH
15260: LD_STRING D1-Brown-1
15262: PPUSH
15263: CALL_OW 88
// if gammaCommander = 3 then
15267: LD_EXP 11
15271: PUSH
15272: LD_INT 3
15274: EQUAL
15275: IFFALSE 15289
// Say ( Houten , D1-VanH-1 ) ;
15277: LD_EXP 12
15281: PPUSH
15282: LD_STRING D1-VanH-1
15284: PPUSH
15285: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
15289: LD_EXP 21
15293: PPUSH
15294: LD_STRING D1-Har-1
15296: PPUSH
15297: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
15301: LD_INT 53
15303: PPUSH
15304: LD_INT 40
15306: PPUSH
15307: CALL_OW 84
// if gammaCommander = 1 then
15311: LD_EXP 11
15315: PUSH
15316: LD_INT 1
15318: EQUAL
15319: IFFALSE 15333
// Say ( Donaldson , D1-Don-2 ) ;
15321: LD_EXP 3
15325: PPUSH
15326: LD_STRING D1-Don-2
15328: PPUSH
15329: CALL_OW 88
// if gammaCommander = 2 then
15333: LD_EXP 11
15337: PUSH
15338: LD_INT 2
15340: EQUAL
15341: IFFALSE 15355
// Say ( Brown , D1-Brown-2 ) ;
15343: LD_EXP 2
15347: PPUSH
15348: LD_STRING D1-Brown-2
15350: PPUSH
15351: CALL_OW 88
// if gammaCommander = 3 then
15355: LD_EXP 11
15359: PUSH
15360: LD_INT 3
15362: EQUAL
15363: IFFALSE 15377
// Say ( Houten , D1-VanH-2 ) ;
15365: LD_EXP 12
15369: PPUSH
15370: LD_STRING D1-VanH-2
15372: PPUSH
15373: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
15377: LD_EXP 21
15381: PPUSH
15382: LD_STRING D1-Har-2
15384: PPUSH
15385: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
15389: LD_INT 22
15391: PUSH
15392: LD_INT 1
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 33
15401: PUSH
15402: LD_INT 2
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PUSH
15409: LD_INT 61
15411: PUSH
15412: EMPTY
15413: LIST
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: LIST
15419: PPUSH
15420: CALL_OW 69
15424: IFFALSE 15489
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
15426: LD_ADDR_VAR 0 1
15430: PUSH
15431: LD_INT 22
15433: PUSH
15434: LD_INT 1
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 33
15443: PUSH
15444: LD_INT 2
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 61
15453: PUSH
15454: EMPTY
15455: LIST
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 69
15466: PUSH
15467: FOR_IN
15468: IFFALSE 15487
// ComAgressiveMove ( i , 70 , 41 ) ;
15470: LD_VAR 0 1
15474: PPUSH
15475: LD_INT 70
15477: PPUSH
15478: LD_INT 41
15480: PPUSH
15481: CALL_OW 114
15485: GO 15467
15487: POP
15488: POP
// repeat wait ( 0 0$1 ) ;
15489: LD_INT 35
15491: PPUSH
15492: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
15496: LD_ADDR_VAR 0 1
15500: PUSH
15501: LD_INT 22
15503: PUSH
15504: LD_INT 6
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: PPUSH
15514: CALL_OW 69
15518: PUSH
15519: FOR_IN
15520: IFFALSE 15539
// ComAgressiveMove ( i , 54 , 20 ) ;
15522: LD_VAR 0 1
15526: PPUSH
15527: LD_INT 54
15529: PPUSH
15530: LD_INT 20
15532: PPUSH
15533: CALL_OW 114
15537: GO 15519
15539: POP
15540: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
15541: LD_ADDR_VAR 0 1
15545: PUSH
15546: LD_INT 22
15548: PUSH
15549: LD_INT 1
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 25
15558: PUSH
15559: LD_INT 1
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 3
15568: PUSH
15569: LD_INT 54
15571: PUSH
15572: EMPTY
15573: LIST
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: LIST
15583: PPUSH
15584: CALL_OW 69
15588: PUSH
15589: FOR_IN
15590: IFFALSE 15624
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
15592: LD_VAR 0 1
15596: PPUSH
15597: LD_INT 70
15599: PPUSH
15600: LD_INT 41
15602: PPUSH
15603: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
15607: LD_VAR 0 1
15611: PPUSH
15612: LD_INT 46
15614: PPUSH
15615: LD_INT 39
15617: PPUSH
15618: CALL_OW 174
// end ;
15622: GO 15589
15624: POP
15625: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
15626: LD_ADDR_VAR 0 1
15630: PUSH
15631: LD_INT 22
15633: PUSH
15634: LD_INT 1
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 21
15643: PUSH
15644: LD_INT 1
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 3
15653: PUSH
15654: LD_INT 24
15656: PUSH
15657: LD_INT 500
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: LIST
15672: PPUSH
15673: CALL_OW 69
15677: PUSH
15678: FOR_IN
15679: IFFALSE 15712
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
15681: LD_VAR 0 1
15685: PPUSH
15686: LD_EXP 36
15690: PPUSH
15691: CALL_OW 250
15695: PPUSH
15696: LD_EXP 36
15700: PPUSH
15701: CALL_OW 251
15705: PPUSH
15706: CALL_OW 111
15710: GO 15678
15712: POP
15713: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
15714: LD_INT 22
15716: PUSH
15717: LD_INT 6
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 21
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 24
15736: PUSH
15737: LD_INT 250
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: LIST
15748: PPUSH
15749: CALL_OW 69
15753: PUSH
15754: LD_INT 6
15756: LESS
15757: IFFALSE 15489
// InGameOff ;
15759: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
15763: LD_STRING M1
15765: PPUSH
15766: CALL_OW 337
// SaveForQuickRestart ;
15770: CALL_OW 22
// end ;
15774: PPOPN 1
15776: END
// every 1 1$0 do
15777: GO 15779
15779: DISABLE
// begin PrepareSupportFromDelta ;
15780: CALL 2274 0 0
// firstAttack = 1 ;
15784: LD_ADDR_EXP 32
15788: PUSH
15789: LD_INT 1
15791: ST_TO_ADDR
// if IsOk ( Gladstone ) then
15792: LD_EXP 8
15796: PPUSH
15797: CALL_OW 302
15801: IFFALSE 15817
// begin Say ( Gladstone , D2-Glad-1 ) ;
15803: LD_EXP 8
15807: PPUSH
15808: LD_STRING D2-Glad-1
15810: PPUSH
15811: CALL_OW 88
// end else
15815: GO 15910
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , D2-Sol1-1 , D2-FSol1-1 ) ;
15817: LD_INT 4
15819: PPUSH
15820: LD_INT 22
15822: PUSH
15823: LD_INT 1
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 21
15832: PUSH
15833: LD_INT 1
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: LD_INT 2
15842: PUSH
15843: LD_INT 25
15845: PUSH
15846: LD_INT 1
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: LD_INT 25
15855: PUSH
15856: LD_INT 2
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PUSH
15863: LD_INT 25
15865: PUSH
15866: LD_INT 3
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 25
15875: PUSH
15876: LD_INT 4
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: LIST
15894: PPUSH
15895: CALL_OW 70
15899: PPUSH
15900: LD_STRING D2-Sol1-1
15902: PPUSH
15903: LD_STRING D2-FSol1-1
15905: PPUSH
15906: CALL 5699 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
15910: LD_EXP 3
15914: PPUSH
15915: CALL_OW 302
15919: PUSH
15920: LD_EXP 11
15924: PUSH
15925: LD_INT 1
15927: EQUAL
15928: AND
15929: IFFALSE 15943
// Say ( Donaldson , D2-Don-1 ) ;
15931: LD_EXP 3
15935: PPUSH
15936: LD_STRING D2-Don-1
15938: PPUSH
15939: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
15943: LD_EXP 2
15947: PPUSH
15948: CALL_OW 302
15952: PUSH
15953: LD_EXP 11
15957: PUSH
15958: LD_INT 2
15960: EQUAL
15961: AND
15962: IFFALSE 15976
// Say ( Brown , D2-Brown-1 ) ;
15964: LD_EXP 2
15968: PPUSH
15969: LD_STRING D2-Brown-1
15971: PPUSH
15972: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
15976: LD_EXP 12
15980: PPUSH
15981: CALL_OW 302
15985: PUSH
15986: LD_EXP 11
15990: PUSH
15991: LD_INT 3
15993: EQUAL
15994: AND
15995: IFFALSE 16009
// Say ( Houten , D2-VanH-1 ) ;
15997: LD_EXP 12
16001: PPUSH
16002: LD_STRING D2-VanH-1
16004: PPUSH
16005: CALL_OW 88
// end ;
16009: END
// every 0 0$1 do
16010: GO 16012
16012: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) div 3 ) ;
16013: LD_STRING 07_time
16015: PPUSH
16016: LD_INT 0
16018: PPUSH
16019: CALL_OW 30
16023: PUSH
16024: LD_INT 3
16026: DIV
16027: PPUSH
16028: CALL_OW 67
// PrepareMacmillanSquad ;
16032: CALL 2858 0 0
// CenterNowOnUnits ( JMM ) ;
16036: LD_EXP 1
16040: PPUSH
16041: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
16045: LD_EXP 1
16049: PPUSH
16050: LD_STRING D3-JMM-1
16052: PPUSH
16053: CALL_OW 88
// JMMArrive = 1 ;
16057: LD_ADDR_EXP 37
16061: PUSH
16062: LD_INT 1
16064: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16065: LD_EXP 3
16069: PPUSH
16070: CALL_OW 302
16074: PUSH
16075: LD_EXP 11
16079: PUSH
16080: LD_INT 1
16082: EQUAL
16083: AND
16084: IFFALSE 16100
// begin Say ( Donaldson , D3-Don-1 ) ;
16086: LD_EXP 3
16090: PPUSH
16091: LD_STRING D3-Don-1
16093: PPUSH
16094: CALL_OW 88
// end else
16098: GO 16137
// begin if gammaCommander = 1 then
16100: LD_EXP 11
16104: PUSH
16105: LD_INT 1
16107: EQUAL
16108: IFFALSE 16137
// begin DialogRandom ( others_gamma , D3-Sol1-1 , D3-Sol1-1 ) ;
16110: LD_EXP 10
16114: PPUSH
16115: LD_STRING D3-Sol1-1
16117: PPUSH
16118: LD_STRING D3-Sol1-1
16120: PPUSH
16121: CALL 5699 0 3
// Say ( JMM , D3-JMM-2 ) ;
16125: LD_EXP 1
16129: PPUSH
16130: LD_STRING D3-JMM-2
16132: PPUSH
16133: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16137: LD_EXP 2
16141: PPUSH
16142: CALL_OW 302
16146: PUSH
16147: LD_EXP 11
16151: PUSH
16152: LD_INT 2
16154: EQUAL
16155: AND
16156: IFFALSE 16172
// begin Say ( Brown , D3-Brown-1 ) ;
16158: LD_EXP 2
16162: PPUSH
16163: LD_STRING D3-Brown-1
16165: PPUSH
16166: CALL_OW 88
// end else
16170: GO 16209
// begin if gammaCommander = 2 then
16172: LD_EXP 11
16176: PUSH
16177: LD_INT 2
16179: EQUAL
16180: IFFALSE 16209
// begin DialogRandom ( others_gamma , D3-Sol1-1a , D3-Sol1-1a ) ;
16182: LD_EXP 10
16186: PPUSH
16187: LD_STRING D3-Sol1-1a
16189: PPUSH
16190: LD_STRING D3-Sol1-1a
16192: PPUSH
16193: CALL 5699 0 3
// Say ( JMM , D3-JMM-2 ) ;
16197: LD_EXP 1
16201: PPUSH
16202: LD_STRING D3-JMM-2
16204: PPUSH
16205: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
16209: LD_EXP 12
16213: PPUSH
16214: CALL_OW 302
16218: PUSH
16219: LD_EXP 11
16223: PUSH
16224: LD_INT 3
16226: EQUAL
16227: AND
16228: IFFALSE 16244
// begin Say ( Houten , D3-VanH-1 ) ;
16230: LD_EXP 12
16234: PPUSH
16235: LD_STRING D3-VanH-1
16237: PPUSH
16238: CALL_OW 88
// end else
16242: GO 16281
// begin if gammaCommander = 3 then
16244: LD_EXP 11
16248: PUSH
16249: LD_INT 3
16251: EQUAL
16252: IFFALSE 16281
// begin DialogRandom ( others_gamma , D3-Sol1-1b , D3-Sol1-1b ) ;
16254: LD_EXP 10
16258: PPUSH
16259: LD_STRING D3-Sol1-1b
16261: PPUSH
16262: LD_STRING D3-Sol1-1b
16264: PPUSH
16265: CALL 5699 0 3
// Say ( JMM , D3-JMM-2 ) ;
16269: LD_EXP 1
16273: PPUSH
16274: LD_STRING D3-JMM-2
16276: PPUSH
16277: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
16281: LD_EXP 14
16285: PPUSH
16286: CALL_OW 302
16290: IFFALSE 16318
// begin Say ( Joan , D3a-Joan-1 ) ;
16292: LD_EXP 14
16296: PPUSH
16297: LD_STRING D3a-Joan-1
16299: PPUSH
16300: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
16304: LD_EXP 1
16308: PPUSH
16309: LD_STRING D3a-JMM-1
16311: PPUSH
16312: CALL_OW 88
// end else
16316: GO 16726
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16318: LD_EXP 3
16322: PPUSH
16323: CALL_OW 302
16327: PUSH
16328: LD_EXP 11
16332: PUSH
16333: LD_INT 1
16335: EQUAL
16336: AND
16337: PUSH
16338: LD_STRING 06_JoanStatus_1
16340: PPUSH
16341: LD_INT 0
16343: PPUSH
16344: CALL_OW 30
16348: PUSH
16349: LD_INT 1
16351: EQUAL
16352: AND
16353: IFFALSE 16404
// begin Say ( Donaldson , D3b-Don-1 ) ;
16355: LD_EXP 3
16359: PPUSH
16360: LD_STRING D3b-Don-1
16362: PPUSH
16363: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
16367: LD_EXP 1
16371: PPUSH
16372: LD_STRING D3b-JMM-2
16374: PPUSH
16375: CALL_OW 88
// if IsOK ( Lisa ) then
16379: LD_EXP 6
16383: PPUSH
16384: CALL_OW 302
16388: IFFALSE 16402
// Say ( Lisa , D3b-Lisa-2 ) ;
16390: LD_EXP 6
16394: PPUSH
16395: LD_STRING D3b-Lisa-2
16397: PPUSH
16398: CALL_OW 88
// end else
16402: GO 16454
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
16404: LD_EXP 10
16408: PPUSH
16409: LD_STRING D3b-Sol1-1
16411: PPUSH
16412: LD_STRING D3b-Sol1-1
16414: PPUSH
16415: CALL 5699 0 3
// Say ( JMM , D3b-JMM-2 ) ;
16419: LD_EXP 1
16423: PPUSH
16424: LD_STRING D3b-JMM-2
16426: PPUSH
16427: CALL_OW 88
// if IsOK ( Lisa ) then
16431: LD_EXP 6
16435: PPUSH
16436: CALL_OW 302
16440: IFFALSE 16454
// Say ( Lisa , D3b-Lisa-2 ) ;
16442: LD_EXP 6
16446: PPUSH
16447: LD_STRING D3b-Lisa-2
16449: PPUSH
16450: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16454: LD_EXP 2
16458: PPUSH
16459: CALL_OW 302
16463: PUSH
16464: LD_EXP 11
16468: PUSH
16469: LD_INT 2
16471: EQUAL
16472: AND
16473: PUSH
16474: LD_STRING 06_JoanStatus_1
16476: PPUSH
16477: LD_INT 0
16479: PPUSH
16480: CALL_OW 30
16484: PUSH
16485: LD_INT 1
16487: EQUAL
16488: AND
16489: IFFALSE 16540
// begin Say ( Brown , D3b-Brown-1 ) ;
16491: LD_EXP 2
16495: PPUSH
16496: LD_STRING D3b-Brown-1
16498: PPUSH
16499: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
16503: LD_EXP 1
16507: PPUSH
16508: LD_STRING D3b-JMM-2
16510: PPUSH
16511: CALL_OW 88
// if IsOK ( Lisa ) then
16515: LD_EXP 6
16519: PPUSH
16520: CALL_OW 302
16524: IFFALSE 16538
// Say ( Lisa , D3b-Lisa-2 ) ;
16526: LD_EXP 6
16530: PPUSH
16531: LD_STRING D3b-Lisa-2
16533: PPUSH
16534: CALL_OW 88
// end else
16538: GO 16590
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
16540: LD_EXP 10
16544: PPUSH
16545: LD_STRING D3b-Sol1-1
16547: PPUSH
16548: LD_STRING D3b-Sol1-1
16550: PPUSH
16551: CALL 5699 0 3
// Say ( JMM , D3b-JMM-2 ) ;
16555: LD_EXP 1
16559: PPUSH
16560: LD_STRING D3b-JMM-2
16562: PPUSH
16563: CALL_OW 88
// if IsOK ( Lisa ) then
16567: LD_EXP 6
16571: PPUSH
16572: CALL_OW 302
16576: IFFALSE 16590
// Say ( Lisa , D3b-Lisa-2 ) ;
16578: LD_EXP 6
16582: PPUSH
16583: LD_STRING D3b-Lisa-2
16585: PPUSH
16586: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16590: LD_EXP 12
16594: PPUSH
16595: CALL_OW 302
16599: PUSH
16600: LD_EXP 11
16604: PUSH
16605: LD_INT 3
16607: EQUAL
16608: AND
16609: PUSH
16610: LD_STRING 06_JoanStatus_1
16612: PPUSH
16613: LD_INT 0
16615: PPUSH
16616: CALL_OW 30
16620: PUSH
16621: LD_INT 1
16623: EQUAL
16624: AND
16625: IFFALSE 16676
// begin Say ( Houten , D3b-VanH-1 ) ;
16627: LD_EXP 12
16631: PPUSH
16632: LD_STRING D3b-VanH-1
16634: PPUSH
16635: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
16639: LD_EXP 1
16643: PPUSH
16644: LD_STRING D3b-JMM-2
16646: PPUSH
16647: CALL_OW 88
// if IsOK ( Lisa ) then
16651: LD_EXP 6
16655: PPUSH
16656: CALL_OW 302
16660: IFFALSE 16674
// Say ( Lisa , D3b-Lisa-2 ) ;
16662: LD_EXP 6
16666: PPUSH
16667: LD_STRING D3b-Lisa-2
16669: PPUSH
16670: CALL_OW 88
// end else
16674: GO 16726
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
16676: LD_EXP 10
16680: PPUSH
16681: LD_STRING D3b-Sol1-1
16683: PPUSH
16684: LD_STRING D3b-Sol1-1
16686: PPUSH
16687: CALL 5699 0 3
// Say ( JMM , D3b-JMM-2 ) ;
16691: LD_EXP 1
16695: PPUSH
16696: LD_STRING D3b-JMM-2
16698: PPUSH
16699: CALL_OW 88
// if IsOK ( Lisa ) then
16703: LD_EXP 6
16707: PPUSH
16708: CALL_OW 302
16712: IFFALSE 16726
// Say ( Lisa , D3b-Lisa-2 ) ;
16714: LD_EXP 6
16718: PPUSH
16719: LD_STRING D3b-Lisa-2
16721: PPUSH
16722: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
16726: LD_INT 22
16728: PUSH
16729: LD_INT 1
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 21
16738: PUSH
16739: LD_INT 1
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 26
16748: PUSH
16749: LD_INT 1
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 2
16758: PUSH
16759: LD_INT 25
16761: PUSH
16762: LD_INT 1
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 25
16771: PUSH
16772: LD_INT 2
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PUSH
16779: LD_INT 25
16781: PUSH
16782: LD_INT 3
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 25
16791: PUSH
16792: LD_INT 4
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: PPUSH
16812: CALL_OW 69
16816: PUSH
16817: LD_EXP 1
16821: PUSH
16822: EMPTY
16823: LIST
16824: DIFF
16825: PPUSH
16826: LD_STRING DCa-Sol1-1
16828: PPUSH
16829: LD_STRING DCa-Sol1-1
16831: PPUSH
16832: CALL 5699 0 3
// Say ( JMM , DCb-JMM-1 ) ;
16836: LD_EXP 1
16840: PPUSH
16841: LD_STRING DCb-JMM-1
16843: PPUSH
16844: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
16848: LD_INT 22
16850: PUSH
16851: LD_INT 1
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 21
16860: PUSH
16861: LD_INT 1
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 26
16870: PUSH
16871: LD_INT 1
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 2
16880: PUSH
16881: LD_INT 25
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 25
16893: PUSH
16894: LD_INT 2
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 25
16903: PUSH
16904: LD_INT 3
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 25
16913: PUSH
16914: LD_INT 4
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: PPUSH
16934: CALL_OW 69
16938: PUSH
16939: LD_EXP 1
16943: PUSH
16944: EMPTY
16945: LIST
16946: DIFF
16947: PPUSH
16948: LD_STRING DCb-Sol1-1
16950: PPUSH
16951: LD_STRING DCb-Sol1-1
16953: PPUSH
16954: CALL 5699 0 3
// Say ( JMM , DCb-JMM-2 ) ;
16958: LD_EXP 1
16962: PPUSH
16963: LD_STRING DCb-JMM-2
16965: PPUSH
16966: CALL_OW 88
// secondAttack = 1 ;
16970: LD_ADDR_EXP 33
16974: PUSH
16975: LD_INT 1
16977: ST_TO_ADDR
// end ;
16978: END
// every 0 0$01 trigger JMMArrive = 1 do
16979: LD_EXP 37
16983: PUSH
16984: LD_INT 1
16986: EQUAL
16987: IFFALSE 17067
16989: GO 16991
16991: DISABLE
// begin wait ( 3 3$0 ) ;
16992: LD_INT 6300
16994: PPUSH
16995: CALL_OW 67
// DialogueOn ;
16999: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
17003: LD_EXP 22
17007: PPUSH
17008: LD_STRING D4-Pow-1
17010: PPUSH
17011: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
17015: LD_EXP 1
17019: PPUSH
17020: LD_STRING D4-JMM-1
17022: PPUSH
17023: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
17027: LD_EXP 22
17031: PPUSH
17032: LD_STRING D4-Pow-2
17034: PPUSH
17035: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
17039: LD_EXP 1
17043: PPUSH
17044: LD_STRING D4-JMM-2
17046: PPUSH
17047: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
17051: LD_EXP 22
17055: PPUSH
17056: LD_STRING D4-Pow-3
17058: PPUSH
17059: CALL_OW 94
// DialogueOff ;
17063: CALL_OW 7
// end ;
17067: END
// every 0 0$01 trigger JMMArrive = 1 do
17068: LD_EXP 37
17072: PUSH
17073: LD_INT 1
17075: EQUAL
17076: IFFALSE 17108
17078: GO 17080
17080: DISABLE
// begin wait ( 8 8$0 ) ;
17081: LD_INT 16800
17083: PPUSH
17084: CALL_OW 67
// DialogueOn ;
17088: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
17092: LD_EXP 22
17096: PPUSH
17097: LD_STRING D4a-Pow-1
17099: PPUSH
17100: CALL_OW 94
// DialogueOff ;
17104: CALL_OW 7
// end ;
17108: END
// every 0 0$01 trigger JMMArrive = 1 do
17109: LD_EXP 37
17113: PUSH
17114: LD_INT 1
17116: EQUAL
17117: IFFALSE 17162
17119: GO 17121
17121: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
17122: LD_INT 21000
17124: PUSH
17125: LD_INT 25200
17127: PUSH
17128: LD_INT 31500
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: PUSH
17136: LD_OWVAR 67
17140: ARRAY
17141: PPUSH
17142: CALL_OW 67
// PrepareSikorsky ;
17146: CALL 4283 0 0
// SikorskyArrive = 1 ;
17150: LD_ADDR_EXP 17
17154: PUSH
17155: LD_INT 1
17157: ST_TO_ADDR
// PrepareSikorskyArmy ;
17158: CALL 4423 0 0
// end ;
17162: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
17163: LD_EXP 16
17167: PPUSH
17168: LD_INT 5
17170: PPUSH
17171: CALL_OW 308
17175: IFFALSE 17367
17177: GO 17179
17179: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
17180: LD_EXP 16
17184: PPUSH
17185: CALL_OW 87
// DialogueOn ;
17189: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
17193: LD_EXP 15
17197: PPUSH
17198: LD_STRING D5-Sik-1
17200: PPUSH
17201: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
17205: LD_EXP 1
17209: PPUSH
17210: LD_STRING D5-JMM-1a
17212: PPUSH
17213: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
17217: LD_EXP 15
17221: PPUSH
17222: LD_STRING D5-Sik-2
17224: PPUSH
17225: CALL_OW 88
// case query ( QSikorski ) of 1 :
17229: LD_STRING QSikorski
17231: PPUSH
17232: CALL_OW 97
17236: PUSH
17237: LD_INT 1
17239: DOUBLE
17240: EQUAL
17241: IFTRUE 17245
17243: GO 17268
17245: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
17246: LD_EXP 15
17250: PPUSH
17251: LD_STRING D5a-Sik-1
17253: PPUSH
17254: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
17258: LD_ADDR_EXP 18
17262: PUSH
17263: LD_INT 2100
17265: ST_TO_ADDR
// end ; 2 :
17266: GO 17355
17268: LD_INT 2
17270: DOUBLE
17271: EQUAL
17272: IFTRUE 17276
17274: GO 17299
17276: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
17277: LD_EXP 15
17281: PPUSH
17282: LD_STRING D5b-Sik-1
17284: PPUSH
17285: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
17289: LD_ADDR_EXP 18
17293: PUSH
17294: LD_INT 10500
17296: ST_TO_ADDR
// end ; 3 :
17297: GO 17355
17299: LD_INT 3
17301: DOUBLE
17302: EQUAL
17303: IFTRUE 17307
17305: GO 17354
17307: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
17308: LD_EXP 15
17312: PPUSH
17313: LD_STRING D5c-Sik-1
17315: PPUSH
17316: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
17320: LD_EXP 1
17324: PPUSH
17325: LD_STRING D5c-JMM-1
17327: PPUSH
17328: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
17332: LD_EXP 15
17336: PPUSH
17337: LD_STRING D5c-Sik-2
17339: PPUSH
17340: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
17344: LD_ADDR_EXP 18
17348: PUSH
17349: LD_INT 10500
17351: ST_TO_ADDR
// end ; end ;
17352: GO 17355
17354: POP
// DialogueOff ;
17355: CALL_OW 7
// timerStatus = 1 ;
17359: LD_ADDR_EXP 34
17363: PUSH
17364: LD_INT 1
17366: ST_TO_ADDR
// end ;
17367: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
17368: LD_EXP 18
17372: PUSH
17373: LD_INT 35
17375: LESS
17376: IFFALSE 17424
17378: GO 17380
17380: DISABLE
// begin timerStatus = 0 ;
17381: LD_ADDR_EXP 34
17385: PUSH
17386: LD_INT 0
17388: ST_TO_ADDR
// DialogueOn ;
17389: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
17393: LD_EXP 15
17397: PPUSH
17398: LD_STRING D6-Sik-1
17400: PPUSH
17401: CALL_OW 88
// DialogueOff ;
17405: CALL_OW 7
// SikorskyAI = 1 ;
17409: LD_ADDR_EXP 19
17413: PUSH
17414: LD_INT 1
17416: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
17417: LD_STRING M2
17419: PPUSH
17420: CALL_OW 337
// end ;
17424: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
17425: LD_EXP 16
17429: PPUSH
17430: LD_INT 18
17432: PPUSH
17433: CALL_OW 308
17437: IFFALSE 17521
17439: GO 17441
17441: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
17442: LD_EXP 15
17446: PPUSH
17447: LD_STRING D7-Sik-1
17449: PPUSH
17450: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
17454: LD_EXP 1
17458: PPUSH
17459: LD_INT 24
17461: PPUSH
17462: CALL_OW 308
17466: PUSH
17467: LD_EXP 1
17471: PPUSH
17472: CALL_OW 310
17476: OR
17477: IFFALSE 17501
// begin Say ( Sikorski , D7a-Sik-1 ) ;
17479: LD_EXP 15
17483: PPUSH
17484: LD_STRING D7a-Sik-1
17486: PPUSH
17487: CALL_OW 88
// SikorskyStatus = 1 ;
17491: LD_ADDR_EXP 20
17495: PUSH
17496: LD_INT 1
17498: ST_TO_ADDR
// end else
17499: GO 17521
// begin Say ( Sikorski , D7b-Sik-1 ) ;
17501: LD_EXP 15
17505: PPUSH
17506: LD_STRING D7b-Sik-1
17508: PPUSH
17509: CALL_OW 88
// SikorskyStatus = 2 ;
17513: LD_ADDR_EXP 20
17517: PUSH
17518: LD_INT 2
17520: ST_TO_ADDR
// end ; end ;
17521: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
17522: LD_EXP 35
17526: PUSH
17527: LD_INT 1
17529: EQUAL
17530: IFFALSE 17639
17532: GO 17534
17534: DISABLE
17535: LD_INT 0
17537: PPUSH
// begin enable ;
17538: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
17539: LD_ADDR_VAR 0 1
17543: PUSH
17544: LD_INT 22
17546: PUSH
17547: LD_INT 3
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PPUSH
17554: CALL_OW 69
17558: PUSH
17559: FOR_IN
17560: IFFALSE 17587
// if IsInArea ( i , RussianEscape ) then
17562: LD_VAR 0 1
17566: PPUSH
17567: LD_INT 22
17569: PPUSH
17570: CALL_OW 308
17574: IFFALSE 17585
// RemoveUnit ( i ) ;
17576: LD_VAR 0 1
17580: PPUSH
17581: CALL_OW 64
17585: GO 17559
17587: POP
17588: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
17589: LD_ADDR_VAR 0 1
17593: PUSH
17594: LD_INT 22
17596: PUSH
17597: LD_INT 6
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PPUSH
17604: CALL_OW 69
17608: PUSH
17609: FOR_IN
17610: IFFALSE 17637
// if IsInArea ( i , RussianEscape ) then
17612: LD_VAR 0 1
17616: PPUSH
17617: LD_INT 22
17619: PPUSH
17620: CALL_OW 308
17624: IFFALSE 17635
// RemoveUnit ( i ) ;
17626: LD_VAR 0 1
17630: PPUSH
17631: CALL_OW 64
17635: GO 17609
17637: POP
17638: POP
// end ; end_of_file
17639: PPOPN 1
17641: END
// on BuildingComplete ( building ) do var tmp , un ;
17642: LD_INT 0
17644: PPUSH
17645: PPUSH
// begin if GetSide ( building ) = 3 then
17646: LD_VAR 0 1
17650: PPUSH
17651: CALL_OW 255
17655: PUSH
17656: LD_INT 3
17658: EQUAL
17659: IFFALSE 18064
// begin if GetBType ( building ) = b_depot then
17661: LD_VAR 0 1
17665: PPUSH
17666: CALL_OW 266
17670: PUSH
17671: LD_INT 0
17673: EQUAL
17674: IFFALSE 17742
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
17676: LD_VAR 0 1
17680: PPUSH
17681: CALL_OW 274
17685: PPUSH
17686: LD_INT 1
17688: PPUSH
17689: LD_INT 5000
17691: PPUSH
17692: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
17696: LD_VAR 0 1
17700: PPUSH
17701: CALL_OW 274
17705: PPUSH
17706: LD_INT 2
17708: PPUSH
17709: LD_INT 5000
17711: PPUSH
17712: CALL_OW 277
// SetBName ( building , konev ) ;
17716: LD_VAR 0 1
17720: PPUSH
17721: LD_STRING konev
17723: PPUSH
17724: CALL_OW 500
// ruDepot = building ;
17728: LD_ADDR_EXP 27
17732: PUSH
17733: LD_VAR 0 1
17737: ST_TO_ADDR
// BuildRussianBase ;
17738: CALL 6304 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
17742: LD_VAR 0 1
17746: PPUSH
17747: CALL_OW 266
17751: PUSH
17752: LD_INT 0
17754: EQUAL
17755: PUSH
17756: LD_VAR 0 1
17760: PPUSH
17761: CALL_OW 266
17765: PUSH
17766: LD_INT 2
17768: EQUAL
17769: OR
17770: PUSH
17771: LD_VAR 0 1
17775: PPUSH
17776: CALL_OW 266
17780: PUSH
17781: LD_INT 4
17783: EQUAL
17784: OR
17785: IFFALSE 17796
// ComUpgrade ( building ) ;
17787: LD_VAR 0 1
17791: PPUSH
17792: CALL_OW 146
// if GetBType ( building ) = b_lab then
17796: LD_VAR 0 1
17800: PPUSH
17801: CALL_OW 266
17805: PUSH
17806: LD_INT 6
17808: EQUAL
17809: IFFALSE 17860
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17811: LD_VAR 0 1
17815: PPUSH
17816: LD_INT 10
17818: PPUSH
17819: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
17823: LD_VAR 0 1
17827: PPUSH
17828: LD_INT 12
17830: PPUSH
17831: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
17835: LD_INT 3
17837: PPUSH
17838: LD_VAR 0 1
17842: PPUSH
17843: LD_INT 3
17845: PPUSH
17846: CALL 6859 0 3
// ruLab = building ;
17850: LD_ADDR_EXP 28
17854: PUSH
17855: LD_VAR 0 1
17859: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
17860: LD_VAR 0 1
17864: PPUSH
17865: CALL_OW 266
17869: PUSH
17870: LD_INT 32
17872: EQUAL
17873: IFFALSE 17991
// begin uc_side = 3 ;
17875: LD_ADDR_OWVAR 20
17879: PUSH
17880: LD_INT 3
17882: ST_TO_ADDR
// uc_nation = 3 ;
17883: LD_ADDR_OWVAR 21
17887: PUSH
17888: LD_INT 3
17890: ST_TO_ADDR
// hc_gallery =  ;
17891: LD_ADDR_OWVAR 33
17895: PUSH
17896: LD_STRING 
17898: ST_TO_ADDR
// hc_name =  ;
17899: LD_ADDR_OWVAR 26
17903: PUSH
17904: LD_STRING 
17906: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17907: LD_INT 0
17909: PPUSH
17910: LD_INT 1
17912: PPUSH
17913: LD_EXP 24
17917: PPUSH
17918: LD_EXP 25
17922: PPUSH
17923: CALL_OW 12
17927: PPUSH
17928: CALL_OW 380
// un = CreateHuman ;
17932: LD_ADDR_VAR 0 3
17936: PUSH
17937: CALL_OW 44
17941: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
17942: LD_VAR 0 3
17946: PPUSH
17947: LD_VAR 0 1
17951: PPUSH
17952: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
17956: LD_VAR 0 1
17960: PPUSH
17961: LD_INT 43
17963: PUSH
17964: LD_INT 44
17966: PUSH
17967: LD_INT 46
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 1
17977: PPUSH
17978: LD_INT 3
17980: PPUSH
17981: CALL_OW 12
17985: ARRAY
17986: PPUSH
17987: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
17991: LD_VAR 0 1
17995: PPUSH
17996: CALL_OW 266
18000: PUSH
18001: LD_INT 33
18003: EQUAL
18004: IFFALSE 18041
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18006: LD_VAR 0 1
18010: PPUSH
18011: LD_INT 43
18013: PUSH
18014: LD_INT 44
18016: PUSH
18017: LD_INT 46
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 1
18027: PPUSH
18028: LD_INT 3
18030: PPUSH
18031: CALL_OW 12
18035: ARRAY
18036: PPUSH
18037: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL_OW 266
18050: PUSH
18051: LD_INT 24
18053: EQUAL
18054: IFFALSE 18064
// russianAI = 1 ;
18056: LD_ADDR_EXP 26
18060: PUSH
18061: LD_INT 1
18063: ST_TO_ADDR
// end ; end ;
18064: PPOPN 3
18066: END
// on UpgradeComplete ( building ) do var i ;
18067: LD_INT 0
18069: PPUSH
// begin if GetSide ( building ) = 3 then
18070: LD_VAR 0 1
18074: PPUSH
18075: CALL_OW 255
18079: PUSH
18080: LD_INT 3
18082: EQUAL
18083: IFFALSE 18264
// begin if GetBType ( building ) = b_factory then
18085: LD_VAR 0 1
18089: PPUSH
18090: CALL_OW 266
18094: PUSH
18095: LD_INT 3
18097: EQUAL
18098: IFFALSE 18165
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
18100: LD_ADDR_VAR 0 2
18104: PUSH
18105: LD_INT 22
18107: PUSH
18108: LD_INT 3
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 25
18117: PUSH
18118: LD_INT 3
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PPUSH
18129: CALL_OW 69
18133: PUSH
18134: FOR_IN
18135: IFFALSE 18153
// ComEnterUnit ( i , building ) ;
18137: LD_VAR 0 2
18141: PPUSH
18142: LD_VAR 0 1
18146: PPUSH
18147: CALL_OW 120
18151: GO 18134
18153: POP
18154: POP
// ruFab = building ;
18155: LD_ADDR_EXP 29
18159: PUSH
18160: LD_VAR 0 1
18164: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
18165: LD_VAR 0 1
18169: PPUSH
18170: CALL_OW 266
18174: PUSH
18175: LD_INT 8
18177: EQUAL
18178: IFFALSE 18235
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18180: LD_ADDR_VAR 0 2
18184: PUSH
18185: LD_INT 22
18187: PUSH
18188: LD_INT 3
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 25
18197: PUSH
18198: LD_INT 4
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PPUSH
18209: CALL_OW 69
18213: PUSH
18214: FOR_IN
18215: IFFALSE 18233
// ComEnterUnit ( i , building ) ;
18217: LD_VAR 0 2
18221: PPUSH
18222: LD_VAR 0 1
18226: PPUSH
18227: CALL_OW 120
18231: GO 18214
18233: POP
18234: POP
// if GetBType ( building ) = b_warehouse then
18235: LD_VAR 0 1
18239: PPUSH
18240: CALL_OW 266
18244: PUSH
18245: LD_INT 1
18247: EQUAL
18248: IFFALSE 18264
// begin ComEnterUnit ( Borodin , building ) ;
18250: LD_EXP 23
18254: PPUSH
18255: LD_VAR 0 1
18259: PPUSH
18260: CALL_OW 120
// end ; end ; end ;
18264: PPOPN 2
18266: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
18267: LD_VAR 0 1
18271: PPUSH
18272: CALL_OW 247
18276: PUSH
18277: LD_INT 2
18279: EQUAL
18280: PUSH
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 263
18290: PUSH
18291: LD_INT 3
18293: EQUAL
18294: AND
18295: PUSH
18296: LD_EXP 39
18300: PUSH
18301: LD_INT 0
18303: EQUAL
18304: AND
18305: IFFALSE 18423
// begin varEvent1 = 1 ;
18307: LD_ADDR_EXP 39
18311: PUSH
18312: LD_INT 1
18314: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
18315: LD_VAR 0 1
18319: PPUSH
18320: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
18324: LD_INT 22
18326: PUSH
18327: LD_INT 1
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 21
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 2
18346: PUSH
18347: LD_INT 25
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 25
18359: PUSH
18360: LD_INT 2
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 25
18369: PUSH
18370: LD_INT 3
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 25
18379: PUSH
18380: LD_INT 4
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: LIST
18398: PPUSH
18399: CALL_OW 69
18403: PUSH
18404: LD_EXP 1
18408: PUSH
18409: EMPTY
18410: LIST
18411: DIFF
18412: PPUSH
18413: LD_STRING DC-Sol1-1
18415: PPUSH
18416: LD_STRING DC-FSol1-1
18418: PPUSH
18419: CALL 5699 0 3
// end ; end ; end_of_file
18423: PPOPN 1
18425: END
// every 0 0$1 do
18426: GO 18428
18428: DISABLE
// begin enable ;
18429: ENABLE
// if escapeAvalaible = 0 then
18430: LD_EXP 35
18434: PUSH
18435: LD_INT 0
18437: EQUAL
18438: IFFALSE 18450
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18440: LD_INT 3
18442: PPUSH
18443: LD_INT 6
18445: PPUSH
18446: CALL 6944 0 2
// if escapeAvalaible = 0 then
18450: LD_EXP 35
18454: PUSH
18455: LD_INT 0
18457: EQUAL
18458: IFFALSE 18470
// DefenseBase ( 1 , RussianBaseTerritory ) ;
18460: LD_INT 1
18462: PPUSH
18463: LD_INT 24
18465: PPUSH
18466: CALL 7691 0 2
// if russianAI = 1 then
18470: LD_EXP 26
18474: PUSH
18475: LD_INT 1
18477: EQUAL
18478: IFFALSE 18541
// begin RepairBuilding ( 3 , ruDepot ) ;
18480: LD_INT 3
18482: PPUSH
18483: LD_EXP 27
18487: PPUSH
18488: CALL 7991 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
18492: LD_INT 3
18494: PPUSH
18495: LD_INT 7
18497: PPUSH
18498: LD_INT 6
18500: PPUSH
18501: LD_EXP 28
18505: PPUSH
18506: CALL 8456 0 4
// RebuildBuildings ( 3 , ruDestroyBuilds ) ;
18510: LD_INT 3
18512: PPUSH
18513: LD_EXP 30
18517: PPUSH
18518: CALL 8250 0 2
// RepairVehicle ( 6 , RussianRepairArea , 93 , 93 , 1 ) ;
18522: LD_INT 6
18524: PPUSH
18525: LD_INT 8
18527: PPUSH
18528: LD_INT 93
18530: PPUSH
18531: LD_INT 93
18533: PPUSH
18534: LD_INT 1
18536: PPUSH
18537: CALL 8722 0 5
// end ; if SikorskyArrive = 1 then
18541: LD_EXP 17
18545: PUSH
18546: LD_INT 1
18548: EQUAL
18549: IFFALSE 18570
// RepairVehicle ( 3 , SikorskyRepairArea , 53 , 59 , 3 ) ;
18551: LD_INT 3
18553: PPUSH
18554: LD_INT 10
18556: PPUSH
18557: LD_INT 53
18559: PPUSH
18560: LD_INT 59
18562: PPUSH
18563: LD_INT 3
18565: PPUSH
18566: CALL 8722 0 5
// end ;
18570: END
// every 0 0$1 trigger SikorskyAI = 1 do
18571: LD_EXP 19
18575: PUSH
18576: LD_INT 1
18578: EQUAL
18579: IFFALSE 18617
18581: GO 18583
18583: DISABLE
// begin enable ;
18584: ENABLE
// RepairVehicle ( 4 , SikorskyRepairArea , 93 , 93 , 3 ) ;
18585: LD_INT 4
18587: PPUSH
18588: LD_INT 10
18590: PPUSH
18591: LD_INT 93
18593: PPUSH
18594: LD_INT 93
18596: PPUSH
18597: LD_INT 3
18599: PPUSH
18600: CALL 8722 0 5
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
18604: LD_INT 4
18606: PPUSH
18607: LD_INT 11
18609: PPUSH
18610: LD_INT 3
18612: PPUSH
18613: CALL 14659 0 3
// end ;
18617: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
18618: LD_EXP 26
18622: PUSH
18623: LD_INT 1
18625: EQUAL
18626: PUSH
18627: LD_EXP 29
18631: PPUSH
18632: CALL_OW 302
18636: AND
18637: PUSH
18638: LD_EXP 29
18642: PPUSH
18643: CALL_OW 255
18647: PUSH
18648: LD_INT 3
18650: EQUAL
18651: AND
18652: PUSH
18653: LD_INT 22
18655: PUSH
18656: LD_INT 3
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 21
18665: PUSH
18666: LD_INT 2
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 33
18675: PUSH
18676: LD_INT 3
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: LIST
18687: PPUSH
18688: CALL_OW 69
18692: PUSH
18693: LD_INT 0
18695: EQUAL
18696: AND
18697: IFFALSE 18880
18699: GO 18701
18701: DISABLE
// begin enable ;
18702: ENABLE
// if Difficulty = 1 then
18703: LD_OWVAR 67
18707: PUSH
18708: LD_INT 1
18710: EQUAL
18711: IFFALSE 18766
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 43 , 44 , 46 ] , 1 , 3 , 24 ) ;
18713: LD_INT 3
18715: PPUSH
18716: LD_EXP 29
18720: PPUSH
18721: LD_INT 5
18723: PPUSH
18724: LD_INT 8
18726: PPUSH
18727: CALL_OW 12
18731: PPUSH
18732: LD_INT 1
18734: PPUSH
18735: LD_INT 43
18737: PUSH
18738: LD_INT 43
18740: PUSH
18741: LD_INT 44
18743: PUSH
18744: LD_INT 46
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: PPUSH
18753: LD_INT 1
18755: PPUSH
18756: LD_INT 3
18758: PPUSH
18759: LD_INT 24
18761: PPUSH
18762: CALL 9557 0 8
// if Difficulty = 2 then
18766: LD_OWVAR 67
18770: PUSH
18771: LD_INT 2
18773: EQUAL
18774: IFFALSE 18825
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
18776: LD_INT 3
18778: PPUSH
18779: LD_EXP 29
18783: PPUSH
18784: LD_INT 6
18786: PPUSH
18787: LD_INT 8
18789: PPUSH
18790: CALL_OW 12
18794: PPUSH
18795: LD_INT 1
18797: PPUSH
18798: LD_INT 44
18800: PUSH
18801: LD_INT 44
18803: PUSH
18804: LD_INT 46
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: LIST
18811: PPUSH
18812: LD_INT 1
18814: PPUSH
18815: LD_INT 3
18817: PPUSH
18818: LD_INT 24
18820: PPUSH
18821: CALL 9557 0 8
// if Difficulty = 3 then
18825: LD_OWVAR 67
18829: PUSH
18830: LD_INT 3
18832: EQUAL
18833: IFFALSE 18880
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 46 ] , 1 , 3 , 24 ) ;
18835: LD_INT 3
18837: PPUSH
18838: LD_EXP 29
18842: PPUSH
18843: LD_INT 7
18845: PPUSH
18846: LD_INT 8
18848: PPUSH
18849: CALL_OW 12
18853: PPUSH
18854: LD_INT 1
18856: PPUSH
18857: LD_INT 44
18859: PUSH
18860: LD_INT 46
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PPUSH
18867: LD_INT 1
18869: PPUSH
18870: LD_INT 3
18872: PPUSH
18873: LD_INT 24
18875: PPUSH
18876: CALL 9557 0 8
// end ; end_of_file
18880: END
// every 0 0$1 trigger firstAttack = 1 do
18881: LD_EXP 32
18885: PUSH
18886: LD_INT 1
18888: EQUAL
18889: IFFALSE 18995
18891: GO 18893
18893: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
18894: LD_INT 6
18896: PPUSH
18897: LD_INT 3
18899: PPUSH
18900: LD_INT 5
18902: PPUSH
18903: LD_INT 6
18905: PPUSH
18906: CALL_OW 12
18910: PUSH
18911: LD_INT 5
18913: PPUSH
18914: LD_INT 6
18916: PPUSH
18917: CALL_OW 12
18921: PUSH
18922: LD_INT 5
18924: PPUSH
18925: LD_INT 6
18927: PPUSH
18928: CALL_OW 12
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: LIST
18937: PUSH
18938: LD_OWVAR 67
18942: ARRAY
18943: PPUSH
18944: LD_INT 0
18946: PPUSH
18947: LD_INT 0
18949: PPUSH
18950: LD_INT 0
18952: PPUSH
18953: LD_INT 0
18955: PPUSH
18956: LD_EXP 24
18960: PPUSH
18961: LD_EXP 25
18965: PPUSH
18966: CALL_OW 12
18970: PPUSH
18971: LD_INT 16
18973: PPUSH
18974: LD_INT 7
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: LD_INT 1
18982: PPUSH
18983: LD_INT 3
18985: PPUSH
18986: CALL_OW 12
18990: PPUSH
18991: CALL 10121 0 12
18995: END
// every 0 0$1 trigger firstAttack = 1 do
18996: LD_EXP 32
19000: PUSH
19001: LD_INT 1
19003: EQUAL
19004: IFFALSE 19104
19006: GO 19008
19008: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
19009: LD_INT 16
19011: PPUSH
19012: LD_INT 6
19014: PPUSH
19015: LD_INT 5
19017: PPUSH
19018: LD_INT 8
19020: PPUSH
19021: CALL_OW 12
19025: PUSH
19026: LD_INT 6
19028: PPUSH
19029: LD_INT 9
19031: PPUSH
19032: CALL_OW 12
19036: PUSH
19037: LD_INT 7
19039: PPUSH
19040: LD_INT 9
19042: PPUSH
19043: CALL_OW 12
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: LIST
19052: PUSH
19053: LD_OWVAR 67
19057: ARRAY
19058: PPUSH
19059: LD_EXP 24
19063: PPUSH
19064: LD_EXP 25
19068: PPUSH
19069: CALL_OW 12
19073: PPUSH
19074: LD_INT 3
19076: PPUSH
19077: LD_INT 1
19079: PPUSH
19080: LD_INT 3
19082: PPUSH
19083: LD_INT 44
19085: PUSH
19086: LD_INT 46
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PPUSH
19093: EMPTY
19094: PPUSH
19095: EMPTY
19096: PPUSH
19097: LD_INT 1
19099: PPUSH
19100: CALL 12981 0 11
19104: END
// every 3 3$1 trigger firstAttack = 1 do
19105: LD_EXP 32
19109: PUSH
19110: LD_INT 1
19112: EQUAL
19113: IFFALSE 19219
19115: GO 19117
19117: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19118: LD_INT 6
19120: PPUSH
19121: LD_INT 3
19123: PPUSH
19124: LD_INT 5
19126: PPUSH
19127: LD_INT 6
19129: PPUSH
19130: CALL_OW 12
19134: PUSH
19135: LD_INT 5
19137: PPUSH
19138: LD_INT 6
19140: PPUSH
19141: CALL_OW 12
19145: PUSH
19146: LD_INT 5
19148: PPUSH
19149: LD_INT 6
19151: PPUSH
19152: CALL_OW 12
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: LIST
19161: PUSH
19162: LD_OWVAR 67
19166: ARRAY
19167: PPUSH
19168: LD_INT 0
19170: PPUSH
19171: LD_INT 0
19173: PPUSH
19174: LD_INT 0
19176: PPUSH
19177: LD_INT 0
19179: PPUSH
19180: LD_EXP 24
19184: PPUSH
19185: LD_EXP 25
19189: PPUSH
19190: CALL_OW 12
19194: PPUSH
19195: LD_INT 16
19197: PPUSH
19198: LD_INT 7
19200: PPUSH
19201: LD_INT 1
19203: PPUSH
19204: LD_INT 1
19206: PPUSH
19207: LD_INT 3
19209: PPUSH
19210: CALL_OW 12
19214: PPUSH
19215: CALL 10121 0 12
19219: END
// every 3 3$1 trigger firstAttack = 1 do
19220: LD_EXP 32
19224: PUSH
19225: LD_INT 1
19227: EQUAL
19228: IFFALSE 19336
19230: GO 19232
19232: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
19233: LD_INT 16
19235: PPUSH
19236: LD_INT 6
19238: PPUSH
19239: LD_INT 5
19241: PPUSH
19242: LD_INT 8
19244: PPUSH
19245: CALL_OW 12
19249: PUSH
19250: LD_INT 6
19252: PPUSH
19253: LD_INT 9
19255: PPUSH
19256: CALL_OW 12
19260: PUSH
19261: LD_INT 7
19263: PPUSH
19264: LD_INT 9
19266: PPUSH
19267: CALL_OW 12
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: LIST
19276: PUSH
19277: LD_OWVAR 67
19281: ARRAY
19282: PPUSH
19283: LD_EXP 24
19287: PPUSH
19288: LD_EXP 25
19292: PPUSH
19293: CALL_OW 12
19297: PPUSH
19298: LD_INT 3
19300: PPUSH
19301: LD_INT 1
19303: PPUSH
19304: LD_INT 3
19306: PPUSH
19307: LD_INT 42
19309: PUSH
19310: LD_INT 43
19312: PUSH
19313: LD_INT 44
19315: PUSH
19316: LD_INT 46
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: PPUSH
19325: EMPTY
19326: PPUSH
19327: EMPTY
19328: PPUSH
19329: LD_INT 1
19331: PPUSH
19332: CALL 12981 0 11
19336: END
// every 6 6$1 trigger firstAttack = 1 and JMMArrive = 0 do
19337: LD_EXP 32
19341: PUSH
19342: LD_INT 1
19344: EQUAL
19345: PUSH
19346: LD_EXP 37
19350: PUSH
19351: LD_INT 0
19353: EQUAL
19354: AND
19355: IFFALSE 19461
19357: GO 19359
19359: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19360: LD_INT 6
19362: PPUSH
19363: LD_INT 3
19365: PPUSH
19366: LD_INT 5
19368: PPUSH
19369: LD_INT 6
19371: PPUSH
19372: CALL_OW 12
19376: PUSH
19377: LD_INT 5
19379: PPUSH
19380: LD_INT 6
19382: PPUSH
19383: CALL_OW 12
19387: PUSH
19388: LD_INT 5
19390: PPUSH
19391: LD_INT 6
19393: PPUSH
19394: CALL_OW 12
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: LIST
19403: PUSH
19404: LD_OWVAR 67
19408: ARRAY
19409: PPUSH
19410: LD_INT 0
19412: PPUSH
19413: LD_INT 0
19415: PPUSH
19416: LD_INT 0
19418: PPUSH
19419: LD_INT 0
19421: PPUSH
19422: LD_EXP 24
19426: PPUSH
19427: LD_EXP 25
19431: PPUSH
19432: CALL_OW 12
19436: PPUSH
19437: LD_INT 16
19439: PPUSH
19440: LD_INT 7
19442: PPUSH
19443: LD_INT 1
19445: PPUSH
19446: LD_INT 1
19448: PPUSH
19449: LD_INT 3
19451: PPUSH
19452: CALL_OW 12
19456: PPUSH
19457: CALL 10121 0 12
19461: END
// every 6 6$1 trigger firstAttack = 1 and JMMArrive = 0 do
19462: LD_EXP 32
19466: PUSH
19467: LD_INT 1
19469: EQUAL
19470: PUSH
19471: LD_EXP 37
19475: PUSH
19476: LD_INT 0
19478: EQUAL
19479: AND
19480: IFFALSE 19584
19482: GO 19484
19484: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
19485: LD_INT 16
19487: PPUSH
19488: LD_INT 6
19490: PPUSH
19491: LD_INT 5
19493: PPUSH
19494: LD_INT 8
19496: PPUSH
19497: CALL_OW 12
19501: PUSH
19502: LD_INT 6
19504: PPUSH
19505: LD_INT 9
19507: PPUSH
19508: CALL_OW 12
19512: PUSH
19513: LD_INT 7
19515: PPUSH
19516: LD_INT 9
19518: PPUSH
19519: CALL_OW 12
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: LIST
19528: PUSH
19529: LD_OWVAR 67
19533: ARRAY
19534: PPUSH
19535: LD_EXP 24
19539: PPUSH
19540: LD_EXP 25
19544: PPUSH
19545: CALL_OW 12
19549: PPUSH
19550: LD_INT 3
19552: PPUSH
19553: LD_INT 1
19555: PPUSH
19556: LD_INT 3
19558: PPUSH
19559: LD_INT 43
19561: PUSH
19562: LD_INT 44
19564: PUSH
19565: LD_INT 46
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: LIST
19572: PPUSH
19573: EMPTY
19574: PPUSH
19575: EMPTY
19576: PPUSH
19577: LD_INT 1
19579: PPUSH
19580: CALL 12981 0 11
19584: END
// every 10 10$1 trigger firstAttack = 1 and JMMArrive = 0 do
19585: LD_EXP 32
19589: PUSH
19590: LD_INT 1
19592: EQUAL
19593: PUSH
19594: LD_EXP 37
19598: PUSH
19599: LD_INT 0
19601: EQUAL
19602: AND
19603: IFFALSE 19703
19605: GO 19607
19607: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
19608: LD_INT 16
19610: PPUSH
19611: LD_INT 6
19613: PPUSH
19614: LD_INT 5
19616: PPUSH
19617: LD_INT 8
19619: PPUSH
19620: CALL_OW 12
19624: PUSH
19625: LD_INT 6
19627: PPUSH
19628: LD_INT 9
19630: PPUSH
19631: CALL_OW 12
19635: PUSH
19636: LD_INT 7
19638: PPUSH
19639: LD_INT 9
19641: PPUSH
19642: CALL_OW 12
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: LIST
19651: PUSH
19652: LD_OWVAR 67
19656: ARRAY
19657: PPUSH
19658: LD_EXP 24
19662: PPUSH
19663: LD_EXP 25
19667: PPUSH
19668: CALL_OW 12
19672: PPUSH
19673: LD_INT 3
19675: PPUSH
19676: LD_INT 1
19678: PPUSH
19679: LD_INT 3
19681: PPUSH
19682: LD_INT 44
19684: PUSH
19685: LD_INT 46
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PPUSH
19692: EMPTY
19693: PPUSH
19694: EMPTY
19695: PPUSH
19696: LD_INT 1
19698: PPUSH
19699: CALL 12981 0 11
19703: END
// every 1 1$1 trigger secondAttack = 1 do
19704: LD_EXP 33
19708: PUSH
19709: LD_INT 1
19711: EQUAL
19712: IFFALSE 19818
19714: GO 19716
19716: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19717: LD_INT 6
19719: PPUSH
19720: LD_INT 3
19722: PPUSH
19723: LD_INT 4
19725: PPUSH
19726: LD_INT 7
19728: PPUSH
19729: CALL_OW 12
19733: PUSH
19734: LD_INT 6
19736: PPUSH
19737: LD_INT 7
19739: PPUSH
19740: CALL_OW 12
19744: PUSH
19745: LD_INT 6
19747: PPUSH
19748: LD_INT 10
19750: PPUSH
19751: CALL_OW 12
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: PUSH
19761: LD_OWVAR 67
19765: ARRAY
19766: PPUSH
19767: LD_INT 0
19769: PPUSH
19770: LD_INT 0
19772: PPUSH
19773: LD_INT 0
19775: PPUSH
19776: LD_INT 0
19778: PPUSH
19779: LD_EXP 24
19783: PPUSH
19784: LD_EXP 25
19788: PPUSH
19789: CALL_OW 12
19793: PPUSH
19794: LD_INT 16
19796: PPUSH
19797: LD_INT 7
19799: PPUSH
19800: LD_INT 1
19802: PPUSH
19803: LD_INT 1
19805: PPUSH
19806: LD_INT 3
19808: PPUSH
19809: CALL_OW 12
19813: PPUSH
19814: CALL 10121 0 12
19818: END
// every 1 1$1 trigger secondAttack = 1 do
19819: LD_EXP 33
19823: PUSH
19824: LD_INT 1
19826: EQUAL
19827: IFFALSE 19931
19829: GO 19831
19831: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
19832: LD_INT 16
19834: PPUSH
19835: LD_INT 6
19837: PPUSH
19838: LD_INT 5
19840: PPUSH
19841: LD_INT 8
19843: PPUSH
19844: CALL_OW 12
19848: PUSH
19849: LD_INT 6
19851: PPUSH
19852: LD_INT 9
19854: PPUSH
19855: CALL_OW 12
19859: PUSH
19860: LD_INT 7
19862: PPUSH
19863: LD_INT 9
19865: PPUSH
19866: CALL_OW 12
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: LIST
19875: PUSH
19876: LD_OWVAR 67
19880: ARRAY
19881: PPUSH
19882: LD_EXP 24
19886: PPUSH
19887: LD_EXP 25
19891: PPUSH
19892: CALL_OW 12
19896: PPUSH
19897: LD_INT 3
19899: PPUSH
19900: LD_INT 1
19902: PPUSH
19903: LD_INT 3
19905: PPUSH
19906: LD_INT 43
19908: PUSH
19909: LD_INT 44
19911: PUSH
19912: LD_INT 46
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: LIST
19919: PPUSH
19920: EMPTY
19921: PPUSH
19922: EMPTY
19923: PPUSH
19924: LD_INT 1
19926: PPUSH
19927: CALL 12981 0 11
19931: END
// every 20 20$0 trigger SikorskyArrive = 0 do
19932: LD_EXP 17
19936: PUSH
19937: LD_INT 0
19939: EQUAL
19940: IFFALSE 20046
19942: GO 19944
19944: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19945: LD_INT 6
19947: PPUSH
19948: LD_INT 3
19950: PPUSH
19951: LD_INT 8
19953: PPUSH
19954: LD_INT 9
19956: PPUSH
19957: CALL_OW 12
19961: PUSH
19962: LD_INT 7
19964: PPUSH
19965: LD_INT 10
19967: PPUSH
19968: CALL_OW 12
19972: PUSH
19973: LD_INT 8
19975: PPUSH
19976: LD_INT 10
19978: PPUSH
19979: CALL_OW 12
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: LIST
19988: PUSH
19989: LD_OWVAR 67
19993: ARRAY
19994: PPUSH
19995: LD_INT 0
19997: PPUSH
19998: LD_INT 0
20000: PPUSH
20001: LD_INT 0
20003: PPUSH
20004: LD_INT 0
20006: PPUSH
20007: LD_EXP 24
20011: PPUSH
20012: LD_EXP 25
20016: PPUSH
20017: CALL_OW 12
20021: PPUSH
20022: LD_INT 16
20024: PPUSH
20025: LD_INT 7
20027: PPUSH
20028: LD_INT 1
20030: PPUSH
20031: LD_INT 1
20033: PPUSH
20034: LD_INT 3
20036: PPUSH
20037: CALL_OW 12
20041: PPUSH
20042: CALL 10121 0 12
20046: END
// every 20 20$0 trigger SikorskyArrive = 0 do
20047: LD_EXP 17
20051: PUSH
20052: LD_INT 0
20054: EQUAL
20055: IFFALSE 20155
20057: GO 20059
20059: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20060: LD_INT 16
20062: PPUSH
20063: LD_INT 6
20065: PPUSH
20066: LD_INT 5
20068: PPUSH
20069: LD_INT 8
20071: PPUSH
20072: CALL_OW 12
20076: PUSH
20077: LD_INT 6
20079: PPUSH
20080: LD_INT 9
20082: PPUSH
20083: CALL_OW 12
20087: PUSH
20088: LD_INT 7
20090: PPUSH
20091: LD_INT 9
20093: PPUSH
20094: CALL_OW 12
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: LIST
20103: PUSH
20104: LD_OWVAR 67
20108: ARRAY
20109: PPUSH
20110: LD_EXP 24
20114: PPUSH
20115: LD_EXP 25
20119: PPUSH
20120: CALL_OW 12
20124: PPUSH
20125: LD_INT 3
20127: PPUSH
20128: LD_INT 1
20130: PPUSH
20131: LD_INT 3
20133: PPUSH
20134: LD_INT 44
20136: PUSH
20137: LD_INT 46
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PPUSH
20144: EMPTY
20145: PPUSH
20146: EMPTY
20147: PPUSH
20148: LD_INT 1
20150: PPUSH
20151: CALL 12981 0 11
20155: END
// every 25 25$0 trigger SikorskyArrive = 0 do
20156: LD_EXP 17
20160: PUSH
20161: LD_INT 0
20163: EQUAL
20164: IFFALSE 20270
20166: GO 20168
20168: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20169: LD_INT 6
20171: PPUSH
20172: LD_INT 3
20174: PPUSH
20175: LD_INT 8
20177: PPUSH
20178: LD_INT 9
20180: PPUSH
20181: CALL_OW 12
20185: PUSH
20186: LD_INT 7
20188: PPUSH
20189: LD_INT 10
20191: PPUSH
20192: CALL_OW 12
20196: PUSH
20197: LD_INT 8
20199: PPUSH
20200: LD_INT 10
20202: PPUSH
20203: CALL_OW 12
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: LIST
20212: PUSH
20213: LD_OWVAR 67
20217: ARRAY
20218: PPUSH
20219: LD_INT 0
20221: PPUSH
20222: LD_INT 0
20224: PPUSH
20225: LD_INT 0
20227: PPUSH
20228: LD_INT 0
20230: PPUSH
20231: LD_EXP 24
20235: PPUSH
20236: LD_EXP 25
20240: PPUSH
20241: CALL_OW 12
20245: PPUSH
20246: LD_INT 16
20248: PPUSH
20249: LD_INT 7
20251: PPUSH
20252: LD_INT 1
20254: PPUSH
20255: LD_INT 1
20257: PPUSH
20258: LD_INT 3
20260: PPUSH
20261: CALL_OW 12
20265: PPUSH
20266: CALL 10121 0 12
20270: END
// every 25 25$0 trigger SikorskyArrive = 0 do
20271: LD_EXP 17
20275: PUSH
20276: LD_INT 0
20278: EQUAL
20279: IFFALSE 20379
20281: GO 20283
20283: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20284: LD_INT 16
20286: PPUSH
20287: LD_INT 6
20289: PPUSH
20290: LD_INT 5
20292: PPUSH
20293: LD_INT 8
20295: PPUSH
20296: CALL_OW 12
20300: PUSH
20301: LD_INT 6
20303: PPUSH
20304: LD_INT 9
20306: PPUSH
20307: CALL_OW 12
20311: PUSH
20312: LD_INT 7
20314: PPUSH
20315: LD_INT 9
20317: PPUSH
20318: CALL_OW 12
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: LIST
20327: PUSH
20328: LD_OWVAR 67
20332: ARRAY
20333: PPUSH
20334: LD_EXP 24
20338: PPUSH
20339: LD_EXP 25
20343: PPUSH
20344: CALL_OW 12
20348: PPUSH
20349: LD_INT 3
20351: PPUSH
20352: LD_INT 1
20354: PPUSH
20355: LD_INT 3
20357: PPUSH
20358: LD_INT 44
20360: PUSH
20361: LD_INT 46
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PPUSH
20368: EMPTY
20369: PPUSH
20370: EMPTY
20371: PPUSH
20372: LD_INT 1
20374: PPUSH
20375: CALL 12981 0 11
20379: END
// every 35 35$0 trigger SikorskyArrive = 0 do
20380: LD_EXP 17
20384: PUSH
20385: LD_INT 0
20387: EQUAL
20388: IFFALSE 20494
20390: GO 20392
20392: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20393: LD_INT 6
20395: PPUSH
20396: LD_INT 3
20398: PPUSH
20399: LD_INT 8
20401: PPUSH
20402: LD_INT 9
20404: PPUSH
20405: CALL_OW 12
20409: PUSH
20410: LD_INT 7
20412: PPUSH
20413: LD_INT 10
20415: PPUSH
20416: CALL_OW 12
20420: PUSH
20421: LD_INT 8
20423: PPUSH
20424: LD_INT 10
20426: PPUSH
20427: CALL_OW 12
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: LIST
20436: PUSH
20437: LD_OWVAR 67
20441: ARRAY
20442: PPUSH
20443: LD_INT 0
20445: PPUSH
20446: LD_INT 0
20448: PPUSH
20449: LD_INT 0
20451: PPUSH
20452: LD_INT 0
20454: PPUSH
20455: LD_EXP 24
20459: PPUSH
20460: LD_EXP 25
20464: PPUSH
20465: CALL_OW 12
20469: PPUSH
20470: LD_INT 16
20472: PPUSH
20473: LD_INT 7
20475: PPUSH
20476: LD_INT 1
20478: PPUSH
20479: LD_INT 1
20481: PPUSH
20482: LD_INT 3
20484: PPUSH
20485: CALL_OW 12
20489: PPUSH
20490: CALL 10121 0 12
20494: END
// every 35 35$0 trigger SikorskyArrive = 0 do
20495: LD_EXP 17
20499: PUSH
20500: LD_INT 0
20502: EQUAL
20503: IFFALSE 20603
20505: GO 20507
20507: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
20508: LD_INT 16
20510: PPUSH
20511: LD_INT 6
20513: PPUSH
20514: LD_INT 5
20516: PPUSH
20517: LD_INT 8
20519: PPUSH
20520: CALL_OW 12
20524: PUSH
20525: LD_INT 6
20527: PPUSH
20528: LD_INT 9
20530: PPUSH
20531: CALL_OW 12
20535: PUSH
20536: LD_INT 7
20538: PPUSH
20539: LD_INT 9
20541: PPUSH
20542: CALL_OW 12
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: LIST
20551: PUSH
20552: LD_OWVAR 67
20556: ARRAY
20557: PPUSH
20558: LD_EXP 24
20562: PPUSH
20563: LD_EXP 25
20567: PPUSH
20568: CALL_OW 12
20572: PPUSH
20573: LD_INT 3
20575: PPUSH
20576: LD_INT 1
20578: PPUSH
20579: LD_INT 3
20581: PPUSH
20582: LD_INT 44
20584: PUSH
20585: LD_INT 46
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PPUSH
20592: EMPTY
20593: PPUSH
20594: EMPTY
20595: PPUSH
20596: LD_INT 1
20598: PPUSH
20599: CALL 12981 0 11
20603: END
// every 0 0$1 trigger timerStatus = 1 do
20604: LD_EXP 34
20608: PUSH
20609: LD_INT 1
20611: EQUAL
20612: IFFALSE 20649
20614: GO 20616
20616: DISABLE
// begin enable ;
20617: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
20618: LD_ADDR_OWVAR 47
20622: PUSH
20623: LD_STRING #Am08-1
20625: PUSH
20626: LD_EXP 18
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
20635: LD_ADDR_EXP 18
20639: PUSH
20640: LD_EXP 18
20644: PUSH
20645: LD_INT 35
20647: MINUS
20648: ST_TO_ADDR
// end ; end_of_file
20649: END
// every 1 1$0 do
20650: GO 20652
20652: DISABLE
// begin if supply <= 13 and supply > 7 then
20653: LD_EXP 38
20657: PUSH
20658: LD_INT 13
20660: LESSEQUAL
20661: PUSH
20662: LD_EXP 38
20666: PUSH
20667: LD_INT 7
20669: GREATER
20670: AND
20671: IFFALSE 20694
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
20673: LD_INT 3
20675: PPUSH
20676: LD_INT 5
20678: PPUSH
20679: CALL_OW 12
20683: PPUSH
20684: LD_INT 5
20686: PPUSH
20687: LD_INT 1
20689: PPUSH
20690: CALL_OW 55
// if supply <= 7 and supply > 4 then
20694: LD_EXP 38
20698: PUSH
20699: LD_INT 7
20701: LESSEQUAL
20702: PUSH
20703: LD_EXP 38
20707: PUSH
20708: LD_INT 4
20710: GREATER
20711: AND
20712: IFFALSE 20735
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
20714: LD_INT 3
20716: PPUSH
20717: LD_INT 5
20719: PPUSH
20720: CALL_OW 12
20724: PPUSH
20725: LD_INT 20
20727: PPUSH
20728: LD_INT 1
20730: PPUSH
20731: CALL_OW 55
// if supply <= 4 and supply > 0 then
20735: LD_EXP 38
20739: PUSH
20740: LD_INT 4
20742: LESSEQUAL
20743: PUSH
20744: LD_EXP 38
20748: PUSH
20749: LD_INT 0
20751: GREATER
20752: AND
20753: IFFALSE 20776
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
20755: LD_INT 3
20757: PPUSH
20758: LD_INT 5
20760: PPUSH
20761: CALL_OW 12
20765: PPUSH
20766: LD_INT 21
20768: PPUSH
20769: LD_INT 1
20771: PPUSH
20772: CALL_OW 55
// if supply > 0 then
20776: LD_EXP 38
20780: PUSH
20781: LD_INT 0
20783: GREATER
20784: IFFALSE 20801
// begin supply = supply - 1 ;
20786: LD_ADDR_EXP 38
20790: PUSH
20791: LD_EXP 38
20795: PUSH
20796: LD_INT 1
20798: MINUS
20799: ST_TO_ADDR
// enable ;
20800: ENABLE
// end ; end ; end_of_file
20801: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
20802: LD_EXP 37
20806: PUSH
20807: LD_INT 1
20809: EQUAL
20810: PUSH
20811: LD_EXP 1
20815: PPUSH
20816: CALL_OW 301
20820: AND
20821: IFFALSE 20833
20823: GO 20825
20825: DISABLE
// YouLost ( JMM ) ;
20826: LD_STRING JMM
20828: PPUSH
20829: CALL_OW 104
20833: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
20834: LD_EXP 17
20838: PUSH
20839: LD_INT 1
20841: EQUAL
20842: PUSH
20843: LD_EXP 15
20847: PPUSH
20848: CALL_OW 301
20852: AND
20853: IFFALSE 20885
20855: GO 20857
20857: DISABLE
// begin DialogueOn ;
20858: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
20862: LD_EXP 22
20866: PPUSH
20867: LD_STRING D8a-Pow-1
20869: PPUSH
20870: CALL_OW 94
// DialogueOff ;
20874: CALL_OW 7
// YouLost ( Dismissed ) ;
20878: LD_STRING Dismissed
20880: PPUSH
20881: CALL_OW 104
// end ;
20885: END
// every 0 0$1 trigger IsDead ( amDepot ) do
20886: LD_EXP 36
20890: PPUSH
20891: CALL_OW 301
20895: IFFALSE 20907
20897: GO 20899
20899: DISABLE
// YouLost ( Destroyed ) ; end_of_file
20900: LD_STRING Destroyed
20902: PPUSH
20903: CALL_OW 104
20907: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
20908: LD_EXP 23
20912: PPUSH
20913: CALL_OW 301
20917: IFFALSE 21262
20919: GO 20921
20921: DISABLE
20922: LD_INT 0
20924: PPUSH
// begin russianAI = 0 ;
20925: LD_ADDR_EXP 26
20929: PUSH
20930: LD_INT 0
20932: ST_TO_ADDR
// escapeAvalaible = 1 ;
20933: LD_ADDR_EXP 35
20937: PUSH
20938: LD_INT 1
20940: ST_TO_ADDR
// InGameOn ;
20941: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
20945: LD_INT 3
20947: PPUSH
20948: LD_INT 1
20950: PPUSH
20951: LD_INT 1
20953: PPUSH
20954: LD_INT 0
20956: PPUSH
20957: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
20961: LD_INT 6
20963: PPUSH
20964: LD_INT 1
20966: PPUSH
20967: LD_INT 1
20969: PPUSH
20970: LD_INT 0
20972: PPUSH
20973: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
20977: LD_INT 3
20979: PPUSH
20980: LD_INT 1
20982: PPUSH
20983: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
20987: LD_INT 97
20989: PPUSH
20990: LD_INT 91
20992: PPUSH
20993: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
20997: LD_INT 22
20999: PUSH
21000: LD_INT 3
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 21
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PPUSH
21021: CALL_OW 69
21025: PPUSH
21026: CALL_OW 121
// wait ( 0 0$01 ) ;
21030: LD_INT 35
21032: PPUSH
21033: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21037: LD_INT 22
21039: PUSH
21040: LD_INT 3
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 21
21049: PUSH
21050: LD_INT 1
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PPUSH
21061: CALL_OW 69
21065: PPUSH
21066: LD_INT 124
21068: PPUSH
21069: LD_INT 98
21071: PPUSH
21072: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
21076: LD_INT 22
21078: PUSH
21079: LD_INT 6
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 21
21088: PUSH
21089: LD_INT 1
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PPUSH
21100: CALL_OW 69
21104: PPUSH
21105: CALL_OW 121
// wait ( 0 0$01 ) ;
21109: LD_INT 35
21111: PPUSH
21112: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21116: LD_INT 22
21118: PUSH
21119: LD_INT 6
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 21
21128: PUSH
21129: LD_INT 1
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PPUSH
21140: CALL_OW 69
21144: PPUSH
21145: LD_INT 124
21147: PPUSH
21148: LD_INT 98
21150: PPUSH
21151: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21155: LD_INT 22
21157: PUSH
21158: LD_INT 1
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 21
21167: PUSH
21168: LD_INT 1
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PPUSH
21179: CALL_OW 69
21183: PPUSH
21184: LD_INT 124
21186: PPUSH
21187: LD_INT 98
21189: PPUSH
21190: CALL_OW 114
// wait ( 0 0$4 ) ;
21194: LD_INT 140
21196: PPUSH
21197: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
21201: LD_INT 124
21203: PPUSH
21204: LD_INT 98
21206: PPUSH
21207: CALL_OW 84
// if SikorskyStatus = 1 then
21211: LD_EXP 20
21215: PUSH
21216: LD_INT 1
21218: EQUAL
21219: IFFALSE 21233
// begin Say ( Sikorski , D9-Sik-1 ) ;
21221: LD_EXP 15
21225: PPUSH
21226: LD_STRING D9-Sik-1
21228: PPUSH
21229: CALL_OW 88
// end ; if SikorskyStatus = 2 then
21233: LD_EXP 20
21237: PUSH
21238: LD_INT 2
21240: EQUAL
21241: IFFALSE 21262
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
21243: LD_EXP 22
21247: PPUSH
21248: LD_STRING D8b-Pow-1
21250: PPUSH
21251: CALL_OW 94
// YouLost ( Dismissed ) ;
21255: LD_STRING Dismissed
21257: PPUSH
21258: CALL_OW 104
// end ; end ;
21262: PPOPN 1
21264: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
21265: LD_INT 23
21267: PUSH
21268: LD_INT 3
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 21
21277: PUSH
21278: LD_INT 1
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 24
21287: PUSH
21288: LD_INT 250
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: LIST
21299: PPUSH
21300: CALL_OW 69
21304: PUSH
21305: LD_INT 0
21307: EQUAL
21308: IFFALSE 21317
21310: GO 21312
21312: DISABLE
// FinishMission ;
21313: CALL 21318 0 0
21317: END
// export function FinishMission ; var tmp ; begin
21318: LD_INT 0
21320: PPUSH
21321: PPUSH
// AddMedal ( med1 , 1 ) ;
21322: LD_STRING med1
21324: PPUSH
21325: LD_INT 1
21327: PPUSH
21328: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
21332: LD_STRING med2
21334: PPUSH
21335: LD_INT 1
21337: PPUSH
21338: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
21342: LD_STRING perfect
21344: PPUSH
21345: LD_INT 1
21347: PPUSH
21348: CALL_OW 101
// GiveMedals ( Main ) ;
21352: LD_STRING Main
21354: PPUSH
21355: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
21359: LD_INT 22
21361: PUSH
21362: LD_INT 1
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 23
21371: PUSH
21372: LD_INT 1
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 21
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 2
21391: PUSH
21392: LD_INT 25
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 25
21404: PUSH
21405: LD_INT 2
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 25
21414: PUSH
21415: LD_INT 3
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 25
21424: PUSH
21425: LD_INT 4
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: PPUSH
21445: CALL_OW 69
21449: PPUSH
21450: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21454: LD_EXP 1
21458: PPUSH
21459: LD_EXP 40
21463: PUSH
21464: LD_STRING JMM
21466: STR
21467: PPUSH
21468: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
21472: LD_EXP 2
21476: PPUSH
21477: LD_EXP 40
21481: PUSH
21482: LD_STRING Brown
21484: STR
21485: PPUSH
21486: CALL 6808 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21490: LD_EXP 3
21494: PPUSH
21495: LD_EXP 40
21499: PUSH
21500: LD_STRING Donaldson
21502: STR
21503: PPUSH
21504: CALL 6808 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21508: LD_EXP 4
21512: PPUSH
21513: LD_EXP 40
21517: PUSH
21518: LD_STRING Bobby
21520: STR
21521: PPUSH
21522: CALL 6808 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21526: LD_EXP 5
21530: PPUSH
21531: LD_EXP 40
21535: PUSH
21536: LD_STRING Cyrus
21538: STR
21539: PPUSH
21540: CALL 6808 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21544: LD_EXP 6
21548: PPUSH
21549: LD_EXP 40
21553: PUSH
21554: LD_STRING Lisa
21556: STR
21557: PPUSH
21558: CALL 6808 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
21562: LD_EXP 7
21566: PPUSH
21567: LD_EXP 40
21571: PUSH
21572: LD_STRING Frank
21574: STR
21575: PPUSH
21576: CALL 6808 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
21580: LD_EXP 8
21584: PPUSH
21585: LD_EXP 40
21589: PUSH
21590: LD_STRING Gladstone
21592: STR
21593: PPUSH
21594: CALL 6808 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
21598: LD_EXP 9
21602: PPUSH
21603: LD_EXP 40
21607: PUSH
21608: LD_STRING Kikuchi
21610: STR
21611: PPUSH
21612: CALL 6808 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
21616: LD_EXP 13
21620: PPUSH
21621: LD_EXP 40
21625: PUSH
21626: LD_STRING Denis
21628: STR
21629: PPUSH
21630: CALL 6808 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
21634: LD_EXP 14
21638: PPUSH
21639: LD_EXP 40
21643: PUSH
21644: LD_STRING Joan
21646: STR
21647: PPUSH
21648: CALL 6808 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
21652: LD_EXP 12
21656: PPUSH
21657: LD_EXP 40
21661: PUSH
21662: LD_STRING Houten
21664: STR
21665: PPUSH
21666: CALL 6808 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten ] , 08_other_survivors ) ;
21670: LD_INT 50
21672: PUSH
21673: EMPTY
21674: LIST
21675: PUSH
21676: LD_INT 22
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 21
21688: PUSH
21689: LD_INT 1
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 2
21698: PUSH
21699: LD_INT 25
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 25
21711: PUSH
21712: LD_INT 2
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 25
21721: PUSH
21722: LD_INT 3
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 25
21731: PUSH
21732: LD_INT 4
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: PPUSH
21752: CALL_OW 69
21756: PUSH
21757: LD_EXP 1
21761: PUSH
21762: LD_EXP 2
21766: PUSH
21767: LD_EXP 3
21771: PUSH
21772: LD_EXP 4
21776: PUSH
21777: LD_EXP 5
21781: PUSH
21782: LD_EXP 6
21786: PUSH
21787: LD_EXP 7
21791: PUSH
21792: LD_EXP 8
21796: PUSH
21797: LD_EXP 9
21801: PUSH
21802: LD_EXP 13
21806: PUSH
21807: LD_EXP 14
21811: PUSH
21812: LD_EXP 12
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: DIFF
21831: PPUSH
21832: LD_STRING 08_other_survivors
21834: PPUSH
21835: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
21839: LD_INT 23
21841: PPUSH
21842: CALL 21855 0 1
// YouWin ;
21846: CALL_OW 103
// end ;
21850: LD_VAR 0 1
21854: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
21855: LD_INT 0
21857: PPUSH
21858: PPUSH
21859: PPUSH
21860: PPUSH
// gammaBase = [ ] ;
21861: LD_ADDR_VAR 0 4
21865: PUSH
21866: EMPTY
21867: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
21868: LD_ADDR_VAR 0 5
21872: PUSH
21873: LD_VAR 0 1
21877: PPUSH
21878: LD_INT 22
21880: PUSH
21881: LD_INT 1
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 21
21890: PUSH
21891: LD_INT 3
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 50
21900: PUSH
21901: EMPTY
21902: LIST
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: LIST
21908: PPUSH
21909: CALL_OW 70
21913: ST_TO_ADDR
// for i in buildings do
21914: LD_ADDR_VAR 0 3
21918: PUSH
21919: LD_VAR 0 5
21923: PUSH
21924: FOR_IN
21925: IFFALSE 22262
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
21927: LD_VAR 0 3
21931: PPUSH
21932: CALL_OW 266
21936: PUSH
21937: LD_INT 6
21939: PUSH
21940: LD_INT 7
21942: PUSH
21943: LD_INT 8
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: LIST
21950: IN
21951: IFFALSE 22065
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
21953: LD_ADDR_VAR 0 4
21957: PUSH
21958: LD_VAR 0 4
21962: PUSH
21963: LD_VAR 0 3
21967: PPUSH
21968: CALL_OW 266
21972: PUSH
21973: LD_VAR 0 3
21977: PPUSH
21978: CALL_OW 250
21982: PUSH
21983: LD_VAR 0 3
21987: PPUSH
21988: CALL_OW 251
21992: PUSH
21993: LD_VAR 0 3
21997: PPUSH
21998: CALL_OW 254
22002: PUSH
22003: LD_VAR 0 3
22007: PPUSH
22008: CALL_OW 267
22012: PUSH
22013: LD_VAR 0 3
22017: PPUSH
22018: CALL_OW 248
22022: PUSH
22023: LD_VAR 0 3
22027: PPUSH
22028: LD_INT 1
22030: PPUSH
22031: CALL_OW 268
22035: PUSH
22036: LD_VAR 0 3
22040: PPUSH
22041: LD_INT 2
22043: PPUSH
22044: CALL_OW 268
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: PUSH
22059: EMPTY
22060: LIST
22061: ADD
22062: ST_TO_ADDR
22063: GO 22260
// if GetBType ( i ) in [ b_bunker ] then
22065: LD_VAR 0 3
22069: PPUSH
22070: CALL_OW 266
22074: PUSH
22075: LD_INT 32
22077: PUSH
22078: EMPTY
22079: LIST
22080: IN
22081: IFFALSE 22178
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22083: LD_ADDR_VAR 0 4
22087: PUSH
22088: LD_VAR 0 4
22092: PUSH
22093: LD_VAR 0 3
22097: PPUSH
22098: CALL_OW 266
22102: PUSH
22103: LD_VAR 0 3
22107: PPUSH
22108: CALL_OW 250
22112: PUSH
22113: LD_VAR 0 3
22117: PPUSH
22118: CALL_OW 251
22122: PUSH
22123: LD_VAR 0 3
22127: PPUSH
22128: CALL_OW 254
22132: PUSH
22133: LD_VAR 0 3
22137: PPUSH
22138: CALL_OW 267
22142: PUSH
22143: LD_VAR 0 3
22147: PPUSH
22148: CALL_OW 248
22152: PUSH
22153: LD_VAR 0 3
22157: PPUSH
22158: CALL_OW 269
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: PUSH
22172: EMPTY
22173: LIST
22174: ADD
22175: ST_TO_ADDR
22176: GO 22260
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
22178: LD_ADDR_VAR 0 4
22182: PUSH
22183: LD_VAR 0 4
22187: PUSH
22188: LD_VAR 0 3
22192: PPUSH
22193: CALL_OW 266
22197: PUSH
22198: LD_VAR 0 3
22202: PPUSH
22203: CALL_OW 250
22207: PUSH
22208: LD_VAR 0 3
22212: PPUSH
22213: CALL_OW 251
22217: PUSH
22218: LD_VAR 0 3
22222: PPUSH
22223: CALL_OW 254
22227: PUSH
22228: LD_VAR 0 3
22232: PPUSH
22233: CALL_OW 267
22237: PUSH
22238: LD_VAR 0 3
22242: PPUSH
22243: CALL_OW 248
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: PUSH
22256: EMPTY
22257: LIST
22258: ADD
22259: ST_TO_ADDR
// end ;
22260: GO 21924
22262: POP
22263: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
22264: LD_VAR 0 4
22268: PPUSH
22269: LD_STRING 08_GammaBase
22271: PPUSH
22272: CALL_OW 39
// end ;
22276: LD_VAR 0 2
22280: RET
