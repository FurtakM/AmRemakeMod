// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7202 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2109 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 6007 0 0
// PrepareRussians ;
 229: CALL 6325 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8623 0 6
// PrepareCutsceneAttack ;
 312: CALL 6059 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 593
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 6743 0 2
 577: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 5
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// end ; if gammaCommander = 2 then
 593: LD_EXP 12
 597: PUSH
 598: LD_INT 2
 600: EQUAL
 601: IFFALSE 634
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 603: LD_ADDR_EXP 2
 607: PUSH
 608: LD_STRING 04_Brown
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL 6743 0 2
 618: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 619: LD_EXP 2
 623: PPUSH
 624: LD_INT 5
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 49
// end ; if gammaCommander = 3 then
 634: LD_EXP 12
 638: PUSH
 639: LD_INT 3
 641: EQUAL
 642: IFFALSE 675
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 644: LD_ADDR_EXP 13
 648: PUSH
 649: LD_STRING VanHouten
 651: PPUSH
 652: LD_INT 1
 654: PPUSH
 655: CALL 6743 0 2
 659: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 660: LD_EXP 13
 664: PPUSH
 665: LD_INT 5
 667: PPUSH
 668: LD_INT 0
 670: PPUSH
 671: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 675: LD_ADDR_EXP 22
 679: PUSH
 680: LD_STRING Harisson
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL 6743 0 2
 690: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 691: LD_ADDR_EXP 23
 695: PUSH
 696: LD_STRING Powell
 698: PPUSH
 699: LD_INT 0
 701: PPUSH
 702: CALL 6743 0 2
 706: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 707: LD_STRING 04_Lisa
 709: PUSH
 710: EMPTY
 711: LIST
 712: PPUSH
 713: CALL_OW 28
 717: PUSH
 718: LD_STRING LisaInDelta
 720: PPUSH
 721: LD_INT 0
 723: PPUSH
 724: CALL_OW 30
 728: NOT
 729: AND
 730: PUSH
 731: LD_STRING 07_Lisa
 733: PUSH
 734: EMPTY
 735: LIST
 736: PPUSH
 737: CALL_OW 28
 741: NOT
 742: AND
 743: IFFALSE 777
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 745: LD_ADDR_EXP 6
 749: PUSH
 750: LD_STRING 04_Lisa
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: CALL 6743 0 2
 760: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 761: LD_ADDR_VAR 0 15
 765: PUSH
 766: LD_VAR 0 15
 770: PUSH
 771: LD_EXP 6
 775: ADD
 776: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 777: LD_STRING 04_Bobby
 779: PUSH
 780: EMPTY
 781: LIST
 782: PPUSH
 783: CALL_OW 28
 787: PUSH
 788: LD_STRING BobbyInDelta
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 30
 798: NOT
 799: AND
 800: PUSH
 801: LD_STRING 07_Bobby
 803: PUSH
 804: EMPTY
 805: LIST
 806: PPUSH
 807: CALL_OW 28
 811: NOT
 812: AND
 813: IFFALSE 847
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 815: LD_ADDR_EXP 4
 819: PUSH
 820: LD_STRING 04_Bobby
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 6743 0 2
 830: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 831: LD_ADDR_VAR 0 15
 835: PUSH
 836: LD_VAR 0 15
 840: PUSH
 841: LD_EXP 4
 845: ADD
 846: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 847: LD_STRING 04_Cyrus
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: PUSH
 858: LD_STRING CyrusInDelta
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 30
 868: NOT
 869: AND
 870: PUSH
 871: LD_STRING 07_Cyrus
 873: PUSH
 874: EMPTY
 875: LIST
 876: PPUSH
 877: CALL_OW 28
 881: NOT
 882: AND
 883: IFFALSE 917
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
 885: LD_ADDR_EXP 5
 889: PUSH
 890: LD_STRING 04_Cyrus
 892: PPUSH
 893: LD_INT 1
 895: PPUSH
 896: CALL 6743 0 2
 900: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
 901: LD_ADDR_VAR 0 15
 905: PUSH
 906: LD_VAR 0 15
 910: PUSH
 911: LD_EXP 5
 915: ADD
 916: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
 917: LD_STRING 04_Brown
 919: PUSH
 920: EMPTY
 921: LIST
 922: PPUSH
 923: CALL_OW 28
 927: PUSH
 928: LD_STRING BrownInDelta
 930: PPUSH
 931: LD_INT 0
 933: PPUSH
 934: CALL_OW 30
 938: NOT
 939: AND
 940: PUSH
 941: LD_STRING 07_Brown
 943: PUSH
 944: EMPTY
 945: LIST
 946: PPUSH
 947: CALL_OW 28
 951: NOT
 952: AND
 953: PUSH
 954: LD_EXP 12
 958: PUSH
 959: LD_INT 2
 961: NONEQUAL
 962: AND
 963: IFFALSE 997
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
 965: LD_ADDR_EXP 2
 969: PUSH
 970: LD_STRING 04_Brown
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL 6743 0 2
 980: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
 981: LD_ADDR_VAR 0 15
 985: PUSH
 986: LD_VAR 0 15
 990: PUSH
 991: LD_EXP 2
 995: ADD
 996: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
 997: LD_STRING 04_Donaldson
 999: PUSH
1000: EMPTY
1001: LIST
1002: PPUSH
1003: CALL_OW 28
1007: PUSH
1008: LD_STRING DonaldsonInDelta
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 30
1018: NOT
1019: AND
1020: PUSH
1021: LD_STRING 07_Donaldson
1023: PUSH
1024: EMPTY
1025: LIST
1026: PPUSH
1027: CALL_OW 28
1031: NOT
1032: AND
1033: PUSH
1034: LD_EXP 12
1038: PUSH
1039: LD_INT 1
1041: NONEQUAL
1042: AND
1043: IFFALSE 1077
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1045: LD_ADDR_EXP 3
1049: PUSH
1050: LD_STRING 04_Donaldson
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: CALL 6743 0 2
1060: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1061: LD_ADDR_VAR 0 15
1065: PUSH
1066: LD_VAR 0 15
1070: PUSH
1071: LD_EXP 3
1075: ADD
1076: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1077: LD_ADDR_EXP 11
1081: PUSH
1082: LD_STRING 07_othersGamma
1084: PPUSH
1085: CALL_OW 31
1089: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1090: LD_ADDR_VAR 0 14
1094: PUSH
1095: LD_INT 8
1097: PUSH
1098: LD_EXP 11
1102: MINUS
1103: ST_TO_ADDR
// if tmp then
1104: LD_VAR 0 14
1108: IFFALSE 1161
// for i = 1 to tmp do
1110: LD_ADDR_VAR 0 2
1114: PUSH
1115: DOUBLE
1116: LD_INT 1
1118: DEC
1119: ST_TO_ADDR
1120: LD_VAR 0 14
1124: PUSH
1125: FOR_TO
1126: IFFALSE 1159
// begin PrepareHuman ( false , 1 , 5 ) ;
1128: LD_INT 0
1130: PPUSH
1131: LD_INT 1
1133: PPUSH
1134: LD_INT 5
1136: PPUSH
1137: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1141: LD_ADDR_EXP 11
1145: PUSH
1146: LD_EXP 11
1150: PUSH
1151: CALL_OW 44
1155: ADD
1156: ST_TO_ADDR
// end ;
1157: GO 1125
1159: POP
1160: POP
// if HexInfo ( 61 , 29 ) = 0 then
1161: LD_INT 61
1163: PPUSH
1164: LD_INT 29
1166: PPUSH
1167: CALL_OW 428
1171: PUSH
1172: LD_INT 0
1174: EQUAL
1175: IFFALSE 1206
// begin bc_type := b_barracks ;
1177: LD_ADDR_OWVAR 42
1181: PUSH
1182: LD_INT 5
1184: ST_TO_ADDR
// bc_level := 6 ;
1185: LD_ADDR_OWVAR 43
1189: PUSH
1190: LD_INT 6
1192: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1193: LD_INT 61
1195: PPUSH
1196: LD_INT 29
1198: PPUSH
1199: LD_INT 5
1201: PPUSH
1202: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1206: LD_ADDR_VAR 0 13
1210: PUSH
1211: LD_INT 22
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 30
1223: PUSH
1224: LD_INT 31
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PPUSH
1235: CALL_OW 69
1239: ST_TO_ADDR
// for i in bun do
1240: LD_ADDR_VAR 0 2
1244: PUSH
1245: LD_VAR 0 13
1249: PUSH
1250: FOR_IN
1251: IFFALSE 1383
// begin x := GetX ( i ) ;
1253: LD_ADDR_VAR 0 3
1257: PUSH
1258: LD_VAR 0 2
1262: PPUSH
1263: CALL_OW 250
1267: ST_TO_ADDR
// y := GetY ( i ) ;
1268: LD_ADDR_VAR 0 4
1272: PUSH
1273: LD_VAR 0 2
1277: PPUSH
1278: CALL_OW 251
1282: ST_TO_ADDR
// d := GetDir ( i ) ;
1283: LD_ADDR_VAR 0 5
1287: PUSH
1288: LD_VAR 0 2
1292: PPUSH
1293: CALL_OW 254
1297: ST_TO_ADDR
// RemoveUnit ( i ) ;
1298: LD_VAR 0 2
1302: PPUSH
1303: CALL_OW 64
// bc_type := b_bunker ;
1307: LD_ADDR_OWVAR 42
1311: PUSH
1312: LD_INT 32
1314: ST_TO_ADDR
// bc_level := 6 ;
1315: LD_ADDR_OWVAR 43
1319: PUSH
1320: LD_INT 6
1322: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1323: LD_ADDR_VAR 0 6
1327: PUSH
1328: LD_VAR 0 3
1332: PPUSH
1333: LD_VAR 0 4
1337: PPUSH
1338: LD_VAR 0 5
1342: PPUSH
1343: CALL_OW 47
1347: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1348: LD_VAR 0 6
1352: PPUSH
1353: LD_INT 5
1355: PUSH
1356: LD_INT 4
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: LD_VAR 0 2
1367: PUSH
1368: LD_INT 2
1370: MOD
1371: PUSH
1372: LD_INT 1
1374: PLUS
1375: ARRAY
1376: PPUSH
1377: CALL_OW 431
// end ;
1381: GO 1250
1383: POP
1384: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1385: LD_ADDR_VAR 0 9
1389: PUSH
1390: LD_INT 22
1392: PUSH
1393: LD_INT 1
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 30
1402: PUSH
1403: LD_INT 5
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PPUSH
1414: CALL_OW 69
1418: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1419: LD_ADDR_VAR 0 8
1423: PUSH
1424: LD_INT 22
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 2
1436: PUSH
1437: LD_INT 30
1439: PUSH
1440: LD_INT 6
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: LD_INT 30
1449: PUSH
1450: LD_INT 7
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: PUSH
1457: LD_INT 30
1459: PUSH
1460: LD_INT 8
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL_OW 69
1481: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1482: LD_ADDR_VAR 0 7
1486: PUSH
1487: LD_INT 22
1489: PUSH
1490: LD_INT 1
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: PUSH
1497: LD_INT 30
1499: PUSH
1500: LD_INT 3
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 69
1515: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1516: LD_ADDR_VAR 0 12
1520: PUSH
1521: LD_INT 22
1523: PUSH
1524: LD_INT 1
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 30
1533: PUSH
1534: LD_INT 36
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PPUSH
1545: CALL_OW 69
1549: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1550: LD_ADDR_VAR 0 13
1554: PUSH
1555: LD_INT 22
1557: PUSH
1558: LD_INT 1
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: PUSH
1565: LD_INT 2
1567: PUSH
1568: LD_INT 30
1570: PUSH
1571: LD_INT 31
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PUSH
1578: LD_INT 30
1580: PUSH
1581: LD_INT 32
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PPUSH
1597: CALL_OW 69
1601: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: LD_EXP 11
1611: PUSH
1612: LD_VAR 0 15
1616: ADD
1617: PUSH
1618: FOR_IN
1619: IFFALSE 1994
// begin placed := false ;
1621: LD_ADDR_VAR 0 11
1625: PUSH
1626: LD_INT 0
1628: ST_TO_ADDR
// if GetClass ( i ) = 1 then
1629: LD_VAR 0 2
1633: PPUSH
1634: CALL_OW 257
1638: PUSH
1639: LD_INT 1
1641: EQUAL
1642: IFFALSE 1767
// begin if UnitFilter ( bun , [ f_empty ] ) then
1644: LD_VAR 0 13
1648: PPUSH
1649: LD_INT 58
1651: PUSH
1652: EMPTY
1653: LIST
1654: PPUSH
1655: CALL_OW 72
1659: IFFALSE 1698
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1661: LD_VAR 0 2
1665: PPUSH
1666: LD_VAR 0 13
1670: PPUSH
1671: LD_INT 58
1673: PUSH
1674: EMPTY
1675: LIST
1676: PPUSH
1677: CALL_OW 72
1681: PUSH
1682: LD_INT 1
1684: ARRAY
1685: PPUSH
1686: CALL_OW 52
// placed := true ;
1690: LD_ADDR_VAR 0 11
1694: PUSH
1695: LD_INT 1
1697: ST_TO_ADDR
// end ; if arm and not placed then
1698: LD_VAR 0 9
1702: PUSH
1703: LD_VAR 0 11
1707: NOT
1708: AND
1709: IFFALSE 1767
// begin for j in arm do
1711: LD_ADDR_VAR 0 10
1715: PUSH
1716: LD_VAR 0 9
1720: PUSH
1721: FOR_IN
1722: IFFALSE 1765
// if UnitsInside ( j ) < 6 then
1724: LD_VAR 0 10
1728: PPUSH
1729: CALL_OW 313
1733: PUSH
1734: LD_INT 6
1736: LESS
1737: IFFALSE 1763
// begin PlaceHumanInUnit ( i , j ) ;
1739: LD_VAR 0 2
1743: PPUSH
1744: LD_VAR 0 10
1748: PPUSH
1749: CALL_OW 52
// placed := true ;
1753: LD_ADDR_VAR 0 11
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// break ;
1761: GO 1765
// end ;
1763: GO 1721
1765: POP
1766: POP
// end ; end ; if GetClass ( i ) = 3 then
1767: LD_VAR 0 2
1771: PPUSH
1772: CALL_OW 257
1776: PUSH
1777: LD_INT 3
1779: EQUAL
1780: IFFALSE 1884
// if fac then
1782: LD_VAR 0 7
1786: IFFALSE 1884
// begin if ct then
1788: LD_VAR 0 12
1792: IFFALSE 1820
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1794: LD_VAR 0 2
1798: PPUSH
1799: LD_VAR 0 12
1803: PUSH
1804: LD_INT 1
1806: ARRAY
1807: PPUSH
1808: CALL_OW 52
// placed := true ;
1812: LD_ADDR_VAR 0 11
1816: PUSH
1817: LD_INT 1
1819: ST_TO_ADDR
// end ; if placed then
1820: LD_VAR 0 11
1824: IFFALSE 1828
// continue ;
1826: GO 1618
// for j in fac do
1828: LD_ADDR_VAR 0 10
1832: PUSH
1833: LD_VAR 0 7
1837: PUSH
1838: FOR_IN
1839: IFFALSE 1882
// if UnitsInside ( j ) < 6 then
1841: LD_VAR 0 10
1845: PPUSH
1846: CALL_OW 313
1850: PUSH
1851: LD_INT 6
1853: LESS
1854: IFFALSE 1880
// begin PlaceHumanInUnit ( i , j ) ;
1856: LD_VAR 0 2
1860: PPUSH
1861: LD_VAR 0 10
1865: PPUSH
1866: CALL_OW 52
// placed := true ;
1870: LD_ADDR_VAR 0 11
1874: PUSH
1875: LD_INT 1
1877: ST_TO_ADDR
// break ;
1878: GO 1882
// end ;
1880: GO 1838
1882: POP
1883: POP
// end ; if GetClass ( i ) = 4 then
1884: LD_VAR 0 2
1888: PPUSH
1889: CALL_OW 257
1893: PUSH
1894: LD_INT 4
1896: EQUAL
1897: IFFALSE 1961
// if lab then
1899: LD_VAR 0 8
1903: IFFALSE 1961
// begin for j in lab do
1905: LD_ADDR_VAR 0 10
1909: PUSH
1910: LD_VAR 0 8
1914: PUSH
1915: FOR_IN
1916: IFFALSE 1959
// if UnitsInside ( j ) < 6 then
1918: LD_VAR 0 10
1922: PPUSH
1923: CALL_OW 313
1927: PUSH
1928: LD_INT 6
1930: LESS
1931: IFFALSE 1957
// begin PlaceHumanInUnit ( i , j ) ;
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_VAR 0 10
1942: PPUSH
1943: CALL_OW 52
// placed := true ;
1947: LD_ADDR_VAR 0 11
1951: PUSH
1952: LD_INT 1
1954: ST_TO_ADDR
// break ;
1955: GO 1959
// end ;
1957: GO 1915
1959: POP
1960: POP
// end ; if not placed then
1961: LD_VAR 0 11
1965: NOT
1966: IFFALSE 1992
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1968: LD_VAR 0 2
1972: PPUSH
1973: LD_INT 5
1975: PPUSH
1976: LD_INT 0
1978: PPUSH
1979: CALL_OW 49
// ComHold ( i ) ;
1983: LD_VAR 0 2
1987: PPUSH
1988: CALL_OW 140
// end ; end ;
1992: GO 1618
1994: POP
1995: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1996: LD_VAR 0 12
2000: PUSH
2001: LD_VAR 0 12
2005: PUSH
2006: LD_INT 1
2008: ARRAY
2009: PPUSH
2010: CALL_OW 313
2014: AND
2015: IFFALSE 2104
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: LD_INT 22
2024: PUSH
2025: LD_INT 1
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 33
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PPUSH
2046: CALL_OW 69
2050: PUSH
2051: FOR_IN
2052: IFFALSE 2102
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2054: LD_VAR 0 2
2058: PPUSH
2059: LD_VAR 0 12
2063: PUSH
2064: LD_INT 1
2066: ARRAY
2067: PPUSH
2068: CALL_OW 313
2072: PUSH
2073: LD_INT 1
2075: PPUSH
2076: LD_VAR 0 12
2080: PUSH
2081: LD_INT 1
2083: ARRAY
2084: PPUSH
2085: CALL_OW 313
2089: PPUSH
2090: CALL_OW 12
2094: ARRAY
2095: PPUSH
2096: CALL_OW 135
2100: GO 2051
2102: POP
2103: POP
// end ; end ;
2104: LD_VAR 0 1
2108: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
2115: PPUSH
2116: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2117: LD_INT 71
2119: PPUSH
2120: LD_INT 5
2122: PPUSH
2123: LD_INT 1
2125: PPUSH
2126: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2130: LD_ADDR_VAR 0 2
2134: PUSH
2135: LD_STRING GammaBase
2137: PPUSH
2138: EMPTY
2139: PPUSH
2140: CALL_OW 30
2144: ST_TO_ADDR
// if not blist then
2145: LD_VAR 0 2
2149: NOT
2150: IFFALSE 2190
// blist := [ [ b_warehouse , 51 , 10 , 3 , 3 , 0 , 0 ] ] ;
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: LD_INT 51
2162: PUSH
2163: LD_INT 10
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: LD_INT 3
2171: PUSH
2172: LD_INT 0
2174: PUSH
2175: LD_INT 0
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: EMPTY
2188: LIST
2189: ST_TO_ADDR
// uc_side := 1 ;
2190: LD_ADDR_OWVAR 20
2194: PUSH
2195: LD_INT 1
2197: ST_TO_ADDR
// uc_nation := 1 ;
2198: LD_ADDR_OWVAR 21
2202: PUSH
2203: LD_INT 1
2205: ST_TO_ADDR
// for i in blist do
2206: LD_ADDR_VAR 0 3
2210: PUSH
2211: LD_VAR 0 2
2215: PUSH
2216: FOR_IN
2217: IFFALSE 2625
// begin bc_type := i [ 1 ] ;
2219: LD_ADDR_OWVAR 42
2223: PUSH
2224: LD_VAR 0 3
2228: PUSH
2229: LD_INT 1
2231: ARRAY
2232: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2233: LD_ADDR_OWVAR 43
2237: PUSH
2238: LD_VAR 0 3
2242: PUSH
2243: LD_INT 5
2245: ARRAY
2246: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2247: LD_VAR 0 3
2251: PUSH
2252: LD_INT 1
2254: ARRAY
2255: PUSH
2256: LD_INT 7
2258: PUSH
2259: LD_INT 8
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: IN
2266: IFFALSE 2322
// begin bc_kind1 := i [ 7 ] ;
2268: LD_ADDR_OWVAR 44
2272: PUSH
2273: LD_VAR 0 3
2277: PUSH
2278: LD_INT 7
2280: ARRAY
2281: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2282: LD_STRING 06_remoteVehs_1
2284: PPUSH
2285: LD_INT 0
2287: PPUSH
2288: CALL_OW 30
2292: PUSH
2293: LD_INT 1
2295: EQUAL
2296: IFFALSE 2308
// begin bc_kind2 := 15 ;
2298: LD_ADDR_OWVAR 45
2302: PUSH
2303: LD_INT 15
2305: ST_TO_ADDR
// end else
2306: GO 2322
// begin bc_kind2 := i [ 8 ] ;
2308: LD_ADDR_OWVAR 45
2312: PUSH
2313: LD_VAR 0 3
2317: PUSH
2318: LD_INT 8
2320: ARRAY
2321: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2322: LD_OWVAR 42
2326: PUSH
2327: LD_INT 0
2329: EQUAL
2330: IFFALSE 2448
// begin bc_type := b_warehouse ;
2332: LD_ADDR_OWVAR 42
2336: PUSH
2337: LD_INT 1
2339: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2340: LD_ADDR_EXP 37
2344: PUSH
2345: LD_VAR 0 3
2349: PUSH
2350: LD_INT 2
2352: ARRAY
2353: PPUSH
2354: LD_VAR 0 3
2358: PUSH
2359: LD_INT 3
2361: ARRAY
2362: PPUSH
2363: LD_VAR 0 3
2367: PUSH
2368: LD_INT 4
2370: ARRAY
2371: PPUSH
2372: CALL_OW 47
2376: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
2377: LD_EXP 37
2381: PPUSH
2382: LD_STRING gamma
2384: PPUSH
2385: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 350 , 250 ] [ Difficulty ] ) ;
2389: LD_EXP 37
2393: PPUSH
2394: CALL_OW 274
2398: PPUSH
2399: LD_INT 1
2401: PPUSH
2402: LD_INT 400
2404: PUSH
2405: LD_INT 350
2407: PUSH
2408: LD_INT 250
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: LIST
2415: PUSH
2416: LD_OWVAR 67
2420: ARRAY
2421: PPUSH
2422: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2426: LD_EXP 37
2430: PPUSH
2431: CALL_OW 274
2435: PPUSH
2436: LD_INT 2
2438: PPUSH
2439: LD_INT 200
2441: PPUSH
2442: CALL_OW 277
// end else
2446: GO 2590
// begin if bc_type = 4 then
2448: LD_OWVAR 42
2452: PUSH
2453: LD_INT 4
2455: EQUAL
2456: IFFALSE 2505
// begin bc_type = 5 ;
2458: LD_ADDR_OWVAR 42
2462: PUSH
2463: LD_INT 5
2465: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2466: LD_ADDR_VAR 0 4
2470: PUSH
2471: LD_VAR 0 3
2475: PUSH
2476: LD_INT 2
2478: ARRAY
2479: PPUSH
2480: LD_VAR 0 3
2484: PUSH
2485: LD_INT 3
2487: ARRAY
2488: PPUSH
2489: LD_VAR 0 3
2493: PUSH
2494: LD_INT 4
2496: ARRAY
2497: PPUSH
2498: CALL_OW 47
2502: ST_TO_ADDR
// end else
2503: GO 2590
// begin bc_type := i [ 1 ] ;
2505: LD_ADDR_OWVAR 42
2509: PUSH
2510: LD_VAR 0 3
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2519: LD_STRING 06_remoteVehs_1
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: CALL_OW 30
2529: PUSH
2530: LD_INT 1
2532: EQUAL
2533: PUSH
2534: LD_OWVAR 42
2538: PUSH
2539: LD_INT 7
2541: EQUAL
2542: AND
2543: IFFALSE 2553
// bc_type := b_lab_full ;
2545: LD_ADDR_OWVAR 42
2549: PUSH
2550: LD_INT 8
2552: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2553: LD_ADDR_VAR 0 4
2557: PUSH
2558: LD_VAR 0 3
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: PPUSH
2567: LD_VAR 0 3
2571: PUSH
2572: LD_INT 3
2574: ARRAY
2575: PPUSH
2576: LD_VAR 0 3
2580: PUSH
2581: LD_INT 4
2583: ARRAY
2584: PPUSH
2585: CALL_OW 47
2589: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2590: LD_VAR 0 4
2594: PPUSH
2595: CALL_OW 266
2599: PUSH
2600: LD_INT 32
2602: EQUAL
2603: IFFALSE 2623
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2605: LD_VAR 0 4
2609: PPUSH
2610: LD_VAR 0 3
2614: PUSH
2615: LD_INT 7
2617: ARRAY
2618: PPUSH
2619: CALL_OW 431
// end ;
2623: GO 2216
2625: POP
2626: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2627: LD_INT 22
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: LD_INT 30
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 69
2655: IFFALSE 2903
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2657: LD_ADDR_VAR 0 4
2661: PUSH
2662: LD_INT 22
2664: PUSH
2665: LD_INT 1
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_INT 30
2674: PUSH
2675: LD_INT 3
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PPUSH
2686: CALL_OW 69
2690: PUSH
2691: LD_INT 1
2693: ARRAY
2694: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
2695: LD_ADDR_VAR 0 6
2699: PUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: CALL_OW 250
2709: PPUSH
2710: LD_VAR 0 4
2714: PPUSH
2715: CALL_OW 251
2719: PPUSH
2720: LD_VAR 0 4
2724: PPUSH
2725: CALL_OW 254
2729: PPUSH
2730: CALL 16186 0 3
2734: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
2735: LD_ADDR_VAR 0 2
2739: PUSH
2740: LD_INT 19
2742: PUSH
2743: LD_INT 17
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2750: LD_STRING 06_remoteVehs_1
2752: PPUSH
2753: LD_INT 0
2755: PPUSH
2756: CALL_OW 30
2760: IFFALSE 2783
// blist := Insert ( blist , 1 , b_ext_radar ) ;
2762: LD_ADDR_VAR 0 2
2766: PUSH
2767: LD_VAR 0 2
2771: PPUSH
2772: LD_INT 1
2774: PPUSH
2775: LD_INT 20
2777: PPUSH
2778: CALL_OW 2
2782: ST_TO_ADDR
// for i in tmp do
2783: LD_ADDR_VAR 0 3
2787: PUSH
2788: LD_VAR 0 6
2792: PUSH
2793: FOR_IN
2794: IFFALSE 2901
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
2796: LD_VAR 0 3
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PPUSH
2805: LD_VAR 0 3
2809: PUSH
2810: LD_INT 2
2812: ARRAY
2813: PPUSH
2814: CALL_OW 428
2818: PUSH
2819: LD_INT 0
2821: EQUAL
2822: IFFALSE 2899
// begin bc_type := blist [ 1 ] ;
2824: LD_ADDR_OWVAR 42
2828: PUSH
2829: LD_VAR 0 2
2833: PUSH
2834: LD_INT 1
2836: ARRAY
2837: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2838: LD_VAR 0 3
2842: PUSH
2843: LD_INT 1
2845: ARRAY
2846: PPUSH
2847: LD_VAR 0 3
2851: PUSH
2852: LD_INT 2
2854: ARRAY
2855: PPUSH
2856: LD_VAR 0 3
2860: PUSH
2861: LD_INT 3
2863: ARRAY
2864: PPUSH
2865: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
2869: LD_ADDR_VAR 0 2
2873: PUSH
2874: LD_VAR 0 2
2878: PPUSH
2879: LD_INT 1
2881: PPUSH
2882: CALL_OW 3
2886: ST_TO_ADDR
// if blist = 0 then
2887: LD_VAR 0 2
2891: PUSH
2892: LD_INT 0
2894: EQUAL
2895: IFFALSE 2899
// break ;
2897: GO 2901
// end ;
2899: GO 2793
2901: POP
2902: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2903: LD_STRING 06_remoteVehs_1
2905: PPUSH
2906: LD_INT 0
2908: PPUSH
2909: CALL_OW 30
2913: PUSH
2914: LD_INT 1
2916: EQUAL
2917: IFFALSE 3121
// begin bc_type = 36 ;
2919: LD_ADDR_OWVAR 42
2923: PUSH
2924: LD_INT 36
2926: ST_TO_ADDR
// bc_level = 4 ;
2927: LD_ADDR_OWVAR 43
2931: PUSH
2932: LD_INT 4
2934: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2935: LD_INT 62
2937: PPUSH
2938: LD_INT 12
2940: PPUSH
2941: LD_INT 3
2943: PPUSH
2944: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: DOUBLE
2954: LD_INT 1
2956: DEC
2957: ST_TO_ADDR
2958: LD_INT 3
2960: PUSH
2961: LD_INT 2
2963: PUSH
2964: LD_INT 2
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: PUSH
2972: LD_OWVAR 67
2976: ARRAY
2977: PUSH
2978: FOR_TO
2979: IFFALSE 3119
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2981: LD_ADDR_OWVAR 37
2985: PUSH
2986: LD_INT 3
2988: PUSH
2989: LD_INT 2
2991: PUSH
2992: LD_INT 3
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 1
3001: PPUSH
3002: LD_INT 2
3004: PPUSH
3005: CALL_OW 12
3009: ARRAY
3010: PUSH
3011: LD_INT 2
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: PUSH
3019: LD_OWVAR 67
3023: ARRAY
3024: ST_TO_ADDR
// vc_engine = 1 ;
3025: LD_ADDR_OWVAR 39
3029: PUSH
3030: LD_INT 1
3032: ST_TO_ADDR
// vc_control = 2 ;
3033: LD_ADDR_OWVAR 38
3037: PUSH
3038: LD_INT 2
3040: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3041: LD_ADDR_OWVAR 40
3045: PUSH
3046: LD_INT 3
3048: PUSH
3049: LD_INT 4
3051: PUSH
3052: LD_INT 5
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 1
3062: PPUSH
3063: LD_INT 3
3065: PPUSH
3066: CALL_OW 12
3070: ARRAY
3071: ST_TO_ADDR
// veh = CreateVehicle ;
3072: LD_ADDR_VAR 0 5
3076: PUSH
3077: CALL_OW 45
3081: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
3082: LD_VAR 0 5
3086: PPUSH
3087: LD_EXP 37
3091: PPUSH
3092: CALL_OW 250
3096: PPUSH
3097: LD_EXP 37
3101: PPUSH
3102: CALL_OW 251
3106: PPUSH
3107: LD_INT 7
3109: PPUSH
3110: LD_INT 0
3112: PPUSH
3113: CALL_OW 50
// end ;
3117: GO 2978
3119: POP
3120: POP
// end ; end ;
3121: LD_VAR 0 1
3125: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3126: LD_INT 0
3128: PPUSH
3129: PPUSH
3130: PPUSH
3131: PPUSH
// uc_side = 1 ;
3132: LD_ADDR_OWVAR 20
3136: PUSH
3137: LD_INT 1
3139: ST_TO_ADDR
// uc_nation = 1 ;
3140: LD_ADDR_OWVAR 21
3144: PUSH
3145: LD_INT 1
3147: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3148: LD_ADDR_EXP 14
3152: PUSH
3153: LD_STRING 06c_Denis
3155: PPUSH
3156: LD_INT 1
3158: PPUSH
3159: CALL 6743 0 2
3163: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3164: LD_EXP 14
3168: PPUSH
3169: LD_INT 4
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3179: LD_ADDR_EXP 15
3183: PUSH
3184: LD_STRING 06c_Joan
3186: PPUSH
3187: LD_INT 1
3189: PPUSH
3190: CALL 6743 0 2
3194: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3195: LD_EXP 15
3199: PPUSH
3200: LD_INT 4
3202: PPUSH
3203: LD_INT 0
3205: PPUSH
3206: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3210: LD_STRING GladstoneIn07
3212: PPUSH
3213: LD_INT 0
3215: PPUSH
3216: CALL_OW 30
3220: NOT
3221: IFFALSE 3289
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3223: LD_ADDR_EXP 8
3227: PUSH
3228: LD_STRING 06c_Gladstone
3230: PPUSH
3231: LD_INT 1
3233: PPUSH
3234: CALL 6743 0 2
3238: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3239: LD_EXP 8
3243: NOT
3244: PUSH
3245: LD_STRING GladstoneStayInDelta
3247: PPUSH
3248: LD_INT 0
3250: PPUSH
3251: CALL_OW 30
3255: AND
3256: IFFALSE 3274
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3258: LD_ADDR_EXP 8
3262: PUSH
3263: LD_STRING 05_Gladstone
3265: PPUSH
3266: LD_INT 1
3268: PPUSH
3269: CALL 6743 0 2
3273: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3274: LD_EXP 8
3278: PPUSH
3279: LD_INT 4
3281: PPUSH
3282: LD_INT 0
3284: PPUSH
3285: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3289: LD_STRING LisaStayInDelta
3291: PPUSH
3292: LD_INT 0
3294: PPUSH
3295: CALL_OW 30
3299: IFFALSE 3332
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3301: LD_ADDR_EXP 6
3305: PUSH
3306: LD_STRING 05_Lisa
3308: PPUSH
3309: LD_INT 1
3311: PPUSH
3312: CALL 6743 0 2
3316: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3317: LD_EXP 6
3321: PPUSH
3322: LD_INT 4
3324: PPUSH
3325: LD_INT 0
3327: PPUSH
3328: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
3332: LD_STRING BobbyStayInDelta
3334: PPUSH
3335: LD_INT 0
3337: PPUSH
3338: CALL_OW 30
3342: IFFALSE 3375
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
3344: LD_ADDR_EXP 4
3348: PUSH
3349: LD_STRING 05_Bobby
3351: PPUSH
3352: LD_INT 1
3354: PPUSH
3355: CALL 6743 0 2
3359: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3360: LD_EXP 4
3364: PPUSH
3365: LD_INT 4
3367: PPUSH
3368: LD_INT 0
3370: PPUSH
3371: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
3375: LD_STRING CyrusStayInDelta
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 30
3385: IFFALSE 3418
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
3387: LD_ADDR_EXP 5
3391: PUSH
3392: LD_STRING 05_Cyrus
3394: PPUSH
3395: LD_INT 1
3397: PPUSH
3398: CALL 6743 0 2
3402: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3403: LD_EXP 5
3407: PPUSH
3408: LD_INT 4
3410: PPUSH
3411: LD_INT 0
3413: PPUSH
3414: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
3418: LD_STRING BrownStayInDelta
3420: PPUSH
3421: LD_INT 0
3423: PPUSH
3424: CALL_OW 30
3428: IFFALSE 3461
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
3430: LD_ADDR_EXP 2
3434: PUSH
3435: LD_STRING 05_Brown
3437: PPUSH
3438: LD_INT 1
3440: PPUSH
3441: CALL 6743 0 2
3445: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3446: LD_EXP 2
3450: PPUSH
3451: LD_INT 4
3453: PPUSH
3454: LD_INT 0
3456: PPUSH
3457: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
3461: LD_STRING DonaldsonStayInDelta
3463: PPUSH
3464: LD_INT 0
3466: PPUSH
3467: CALL_OW 30
3471: IFFALSE 3504
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
3473: LD_ADDR_EXP 3
3477: PUSH
3478: LD_STRING 05_Donaldson
3480: PPUSH
3481: LD_INT 1
3483: PPUSH
3484: CALL 6743 0 2
3488: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3489: LD_EXP 3
3493: PPUSH
3494: LD_INT 4
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
3504: LD_ADDR_VAR 0 4
3508: PUSH
3509: LD_STRING OthersStayInDelta
3511: PPUSH
3512: CALL_OW 31
3516: ST_TO_ADDR
// if other > 2 then
3517: LD_VAR 0 4
3521: PUSH
3522: LD_INT 2
3524: GREATER
3525: IFFALSE 3570
// begin for j = 1 to 2 do
3527: LD_ADDR_VAR 0 3
3531: PUSH
3532: DOUBLE
3533: LD_INT 1
3535: DEC
3536: ST_TO_ADDR
3537: LD_INT 2
3539: PUSH
3540: FOR_TO
3541: IFFALSE 3566
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
3543: LD_VAR 0 4
3547: PUSH
3548: LD_VAR 0 3
3552: ARRAY
3553: PPUSH
3554: LD_INT 4
3556: PPUSH
3557: LD_INT 0
3559: PPUSH
3560: CALL_OW 49
3564: GO 3540
3566: POP
3567: POP
// end else
3568: GO 3613
// begin for j = 1 to other do
3570: LD_ADDR_VAR 0 3
3574: PUSH
3575: DOUBLE
3576: LD_INT 1
3578: DEC
3579: ST_TO_ADDR
3580: LD_VAR 0 4
3584: PUSH
3585: FOR_TO
3586: IFFALSE 3611
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
3588: LD_VAR 0 4
3592: PUSH
3593: LD_VAR 0 3
3597: ARRAY
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: LD_INT 0
3604: PPUSH
3605: CALL_OW 49
3609: GO 3585
3611: POP
3612: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
3613: LD_ADDR_VAR 0 4
3617: PUSH
3618: LD_STRING 06_other_apemans
3620: PPUSH
3621: CALL_OW 31
3625: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
3626: LD_VAR 0 4
3630: PUSH
3631: LD_INT 5
3633: PUSH
3634: LD_INT 4
3636: PUSH
3637: LD_INT 3
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: LIST
3644: PUSH
3645: LD_OWVAR 67
3649: ARRAY
3650: GREATEREQUAL
3651: IFFALSE 3680
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
3653: LD_ADDR_VAR 0 3
3657: PUSH
3658: LD_INT 5
3660: PUSH
3661: LD_INT 4
3663: PUSH
3664: LD_INT 3
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: LIST
3671: PUSH
3672: LD_OWVAR 67
3676: ARRAY
3677: ST_TO_ADDR
3678: GO 3690
// j := other ;
3680: LD_ADDR_VAR 0 3
3684: PUSH
3685: LD_VAR 0 4
3689: ST_TO_ADDR
// for i = 1 to j do
3690: LD_ADDR_VAR 0 2
3694: PUSH
3695: DOUBLE
3696: LD_INT 1
3698: DEC
3699: ST_TO_ADDR
3700: LD_VAR 0 3
3704: PUSH
3705: FOR_TO
3706: IFFALSE 3731
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
3708: LD_VAR 0 4
3712: PUSH
3713: LD_VAR 0 2
3717: ARRAY
3718: PPUSH
3719: LD_INT 4
3721: PPUSH
3722: LD_INT 0
3724: PPUSH
3725: CALL_OW 49
3729: GO 3705
3731: POP
3732: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
3733: LD_INT 4
3735: PPUSH
3736: LD_INT 22
3738: PUSH
3739: LD_INT 1
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: PUSH
3746: LD_INT 21
3748: PUSH
3749: LD_INT 1
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PPUSH
3760: CALL_OW 70
3764: PPUSH
3765: LD_INT 53
3767: PPUSH
3768: LD_INT 19
3770: PPUSH
3771: CALL_OW 111
// firstAttack = 1 ;
3775: LD_ADDR_EXP 33
3779: PUSH
3780: LD_INT 1
3782: ST_TO_ADDR
// end ;
3783: LD_VAR 0 1
3787: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
3788: LD_INT 0
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
3795: LD_ADDR_VAR 0 4
3799: PUSH
3800: LD_STRING 07_vehicles
3802: PPUSH
3803: EMPTY
3804: PPUSH
3805: CALL_OW 30
3809: ST_TO_ADDR
// uc_side = 1 ;
3810: LD_ADDR_OWVAR 20
3814: PUSH
3815: LD_INT 1
3817: ST_TO_ADDR
// uc_nation = 1 ;
3818: LD_ADDR_OWVAR 21
3822: PUSH
3823: LD_INT 1
3825: ST_TO_ADDR
// if vehicles > 0 then
3826: LD_VAR 0 4
3830: PUSH
3831: LD_INT 0
3833: GREATER
3834: IFFALSE 3973
// begin for i = 1 to vehicles do
3836: LD_ADDR_VAR 0 2
3840: PUSH
3841: DOUBLE
3842: LD_INT 1
3844: DEC
3845: ST_TO_ADDR
3846: LD_VAR 0 4
3850: PUSH
3851: FOR_TO
3852: IFFALSE 3971
// begin vc_chassis = vehicles [ i ] ;
3854: LD_ADDR_OWVAR 37
3858: PUSH
3859: LD_VAR 0 4
3863: PUSH
3864: LD_VAR 0 2
3868: ARRAY
3869: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
3870: LD_ADDR_OWVAR 39
3874: PUSH
3875: LD_VAR 0 4
3879: PUSH
3880: LD_VAR 0 2
3884: PUSH
3885: LD_INT 1
3887: PLUS
3888: ARRAY
3889: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
3890: LD_ADDR_OWVAR 38
3894: PUSH
3895: LD_VAR 0 4
3899: PUSH
3900: LD_VAR 0 2
3904: PUSH
3905: LD_INT 2
3907: PLUS
3908: ARRAY
3909: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
3910: LD_ADDR_OWVAR 40
3914: PUSH
3915: LD_VAR 0 4
3919: PUSH
3920: LD_VAR 0 2
3924: PUSH
3925: LD_INT 3
3927: PLUS
3928: ARRAY
3929: ST_TO_ADDR
// veh = CreateVehicle ;
3930: LD_ADDR_VAR 0 5
3934: PUSH
3935: CALL_OW 45
3939: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
3940: LD_VAR 0 5
3944: PPUSH
3945: LD_INT 4
3947: PPUSH
3948: LD_INT 0
3950: PPUSH
3951: CALL_OW 49
// i = i + 3 ;
3955: LD_ADDR_VAR 0 2
3959: PUSH
3960: LD_VAR 0 2
3964: PUSH
3965: LD_INT 3
3967: PLUS
3968: ST_TO_ADDR
// end ;
3969: GO 3851
3971: POP
3972: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3973: LD_ADDR_EXP 1
3977: PUSH
3978: LD_EXP 43
3982: PUSH
3983: LD_STRING JMM
3985: STR
3986: PPUSH
3987: LD_INT 1
3989: PPUSH
3990: CALL 6743 0 2
3994: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
3995: LD_EXP 12
3999: PUSH
4000: LD_INT 1
4002: EQUAL
4003: PUSH
4004: LD_EXP 12
4008: PUSH
4009: LD_INT 3
4011: EQUAL
4012: OR
4013: PUSH
4014: LD_EXP 2
4018: NOT
4019: AND
4020: IFFALSE 4044
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4022: LD_ADDR_EXP 2
4026: PUSH
4027: LD_EXP 43
4031: PUSH
4032: LD_STRING Brown
4034: STR
4035: PPUSH
4036: LD_INT 1
4038: PPUSH
4039: CALL 6743 0 2
4043: ST_TO_ADDR
// if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4044: LD_EXP 12
4048: PUSH
4049: LD_INT 2
4051: EQUAL
4052: PUSH
4053: LD_EXP 12
4057: PUSH
4058: LD_INT 3
4060: EQUAL
4061: OR
4062: PUSH
4063: LD_EXP 3
4067: NOT
4068: AND
4069: IFFALSE 4093
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4071: LD_ADDR_EXP 3
4075: PUSH
4076: LD_EXP 43
4080: PUSH
4081: LD_STRING Donaldson
4083: STR
4084: PPUSH
4085: LD_INT 1
4087: PPUSH
4088: CALL 6743 0 2
4092: ST_TO_ADDR
// if Brown and gammaCommander <> 2 then
4093: LD_EXP 2
4097: PUSH
4098: LD_EXP 12
4102: PUSH
4103: LD_INT 2
4105: NONEQUAL
4106: AND
4107: IFFALSE 4124
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4109: LD_EXP 2
4113: PPUSH
4114: LD_INT 4
4116: PPUSH
4117: LD_INT 0
4119: PPUSH
4120: CALL_OW 49
// if Donaldson and gammaCommander <> 1 then
4124: LD_EXP 3
4128: PUSH
4129: LD_EXP 12
4133: PUSH
4134: LD_INT 1
4136: NONEQUAL
4137: AND
4138: IFFALSE 4155
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4140: LD_EXP 3
4144: PPUSH
4145: LD_INT 4
4147: PPUSH
4148: LD_INT 0
4150: PPUSH
4151: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4155: LD_ADDR_VAR 0 5
4159: PUSH
4160: LD_INT 4
4162: PPUSH
4163: LD_INT 22
4165: PUSH
4166: LD_INT 1
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 21
4175: PUSH
4176: LD_INT 2
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 58
4185: PUSH
4186: EMPTY
4187: LIST
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: LIST
4193: PPUSH
4194: CALL_OW 70
4198: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4199: LD_ADDR_EXP 1
4203: PUSH
4204: LD_EXP 43
4208: PUSH
4209: LD_STRING JMM
4211: STR
4212: PPUSH
4213: LD_INT 1
4215: PPUSH
4216: CALL 6743 0 2
4220: ST_TO_ADDR
// other = CreateCharacterSet ( 07c_others ) ;
4221: LD_ADDR_VAR 0 3
4225: PUSH
4226: LD_STRING 07c_others
4228: PPUSH
4229: CALL_OW 31
4233: ST_TO_ADDR
// for i in other do
4234: LD_ADDR_VAR 0 2
4238: PUSH
4239: LD_VAR 0 3
4243: PUSH
4244: FOR_IN
4245: IFFALSE 4369
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4247: LD_ADDR_VAR 0 5
4251: PUSH
4252: LD_INT 4
4254: PPUSH
4255: LD_INT 22
4257: PUSH
4258: LD_INT 1
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 21
4267: PUSH
4268: LD_INT 2
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: PUSH
4275: LD_INT 58
4277: PUSH
4278: EMPTY
4279: LIST
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: LIST
4285: PPUSH
4286: CALL_OW 70
4290: ST_TO_ADDR
// if veh > 0 and GetClass ( i ) = 3 then
4291: LD_VAR 0 5
4295: PUSH
4296: LD_INT 0
4298: GREATER
4299: PUSH
4300: LD_VAR 0 2
4304: PPUSH
4305: CALL_OW 257
4309: PUSH
4310: LD_INT 3
4312: EQUAL
4313: AND
4314: IFFALSE 4336
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4316: LD_VAR 0 2
4320: PPUSH
4321: LD_VAR 0 5
4325: PUSH
4326: LD_INT 1
4328: ARRAY
4329: PPUSH
4330: CALL_OW 52
// end else
4334: GO 4351
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4336: LD_VAR 0 2
4340: PPUSH
4341: LD_INT 4
4343: PPUSH
4344: LD_INT 0
4346: PPUSH
4347: CALL_OW 49
// end ; other = other diff i ;
4351: LD_ADDR_VAR 0 3
4355: PUSH
4356: LD_VAR 0 3
4360: PUSH
4361: LD_VAR 0 2
4365: DIFF
4366: ST_TO_ADDR
// end ;
4367: GO 4244
4369: POP
4370: POP
// for i in other do
4371: LD_ADDR_VAR 0 2
4375: PUSH
4376: LD_VAR 0 3
4380: PUSH
4381: FOR_IN
4382: IFFALSE 4475
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4384: LD_ADDR_VAR 0 5
4388: PUSH
4389: LD_INT 4
4391: PPUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 21
4404: PUSH
4405: LD_INT 2
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 58
4414: PUSH
4415: EMPTY
4416: LIST
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 70
4427: ST_TO_ADDR
// if veh > 0 then
4428: LD_VAR 0 5
4432: PUSH
4433: LD_INT 0
4435: GREATER
4436: IFFALSE 4458
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4438: LD_VAR 0 2
4442: PPUSH
4443: LD_VAR 0 5
4447: PUSH
4448: LD_INT 1
4450: ARRAY
4451: PPUSH
4452: CALL_OW 52
// end else
4456: GO 4473
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4458: LD_VAR 0 2
4462: PPUSH
4463: LD_INT 4
4465: PPUSH
4466: LD_INT 0
4468: PPUSH
4469: CALL_OW 49
// end ; end ;
4473: GO 4381
4475: POP
4476: POP
// if veh > 0 then
4477: LD_VAR 0 5
4481: PUSH
4482: LD_INT 0
4484: GREATER
4485: IFFALSE 4507
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
4487: LD_EXP 1
4491: PPUSH
4492: LD_VAR 0 5
4496: PUSH
4497: LD_INT 1
4499: ARRAY
4500: PPUSH
4501: CALL_OW 52
// end else
4505: GO 4522
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
4507: LD_EXP 1
4511: PPUSH
4512: LD_INT 4
4514: PPUSH
4515: LD_INT 0
4517: PPUSH
4518: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4522: LD_ADDR_VAR 0 5
4526: PUSH
4527: LD_INT 4
4529: PPUSH
4530: LD_INT 22
4532: PUSH
4533: LD_INT 1
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: PUSH
4540: LD_INT 21
4542: PUSH
4543: LD_INT 2
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 58
4552: PUSH
4553: EMPTY
4554: LIST
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: LIST
4560: PPUSH
4561: CALL_OW 70
4565: ST_TO_ADDR
// if not Bobby then
4566: LD_EXP 4
4570: NOT
4571: IFFALSE 4640
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4573: LD_ADDR_EXP 4
4577: PUSH
4578: LD_EXP 43
4582: PUSH
4583: LD_STRING Bobby
4585: STR
4586: PPUSH
4587: LD_INT 1
4589: PPUSH
4590: CALL 6743 0 2
4594: ST_TO_ADDR
// if veh > 0 then
4595: LD_VAR 0 5
4599: PUSH
4600: LD_INT 0
4602: GREATER
4603: IFFALSE 4625
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
4605: LD_EXP 4
4609: PPUSH
4610: LD_VAR 0 5
4614: PUSH
4615: LD_INT 1
4617: ARRAY
4618: PPUSH
4619: CALL_OW 52
// end else
4623: GO 4640
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4625: LD_EXP 4
4629: PPUSH
4630: LD_INT 4
4632: PPUSH
4633: LD_INT 0
4635: PPUSH
4636: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4640: LD_ADDR_VAR 0 5
4644: PUSH
4645: LD_INT 4
4647: PPUSH
4648: LD_INT 22
4650: PUSH
4651: LD_INT 1
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PUSH
4658: LD_INT 21
4660: PUSH
4661: LD_INT 2
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: LD_INT 58
4670: PUSH
4671: EMPTY
4672: LIST
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: LIST
4678: PPUSH
4679: CALL_OW 70
4683: ST_TO_ADDR
// if not Cyrus then
4684: LD_EXP 5
4688: NOT
4689: IFFALSE 4758
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4691: LD_ADDR_EXP 5
4695: PUSH
4696: LD_EXP 43
4700: PUSH
4701: LD_STRING Cyrus
4703: STR
4704: PPUSH
4705: LD_INT 1
4707: PPUSH
4708: CALL 6743 0 2
4712: ST_TO_ADDR
// if veh > 0 then
4713: LD_VAR 0 5
4717: PUSH
4718: LD_INT 0
4720: GREATER
4721: IFFALSE 4743
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
4723: LD_EXP 5
4727: PPUSH
4728: LD_VAR 0 5
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: PPUSH
4737: CALL_OW 52
// end else
4741: GO 4758
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4743: LD_EXP 5
4747: PPUSH
4748: LD_INT 4
4750: PPUSH
4751: LD_INT 0
4753: PPUSH
4754: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4758: LD_ADDR_VAR 0 5
4762: PUSH
4763: LD_INT 4
4765: PPUSH
4766: LD_INT 22
4768: PUSH
4769: LD_INT 1
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 21
4778: PUSH
4779: LD_INT 2
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 58
4788: PUSH
4789: EMPTY
4790: LIST
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: LIST
4796: PPUSH
4797: CALL_OW 70
4801: ST_TO_ADDR
// if not Lisa then
4802: LD_EXP 6
4806: NOT
4807: IFFALSE 4876
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4809: LD_ADDR_EXP 6
4813: PUSH
4814: LD_EXP 43
4818: PUSH
4819: LD_STRING Lisa
4821: STR
4822: PPUSH
4823: LD_INT 1
4825: PPUSH
4826: CALL 6743 0 2
4830: ST_TO_ADDR
// if veh > 0 then
4831: LD_VAR 0 5
4835: PUSH
4836: LD_INT 0
4838: GREATER
4839: IFFALSE 4861
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
4841: LD_EXP 6
4845: PPUSH
4846: LD_VAR 0 5
4850: PUSH
4851: LD_INT 1
4853: ARRAY
4854: PPUSH
4855: CALL_OW 52
// end else
4859: GO 4876
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4861: LD_EXP 6
4865: PPUSH
4866: LD_INT 4
4868: PPUSH
4869: LD_INT 0
4871: PPUSH
4872: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4876: LD_ADDR_VAR 0 5
4880: PUSH
4881: LD_INT 4
4883: PPUSH
4884: LD_INT 22
4886: PUSH
4887: LD_INT 1
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: LD_INT 21
4896: PUSH
4897: LD_INT 2
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 58
4906: PUSH
4907: EMPTY
4908: LIST
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: PPUSH
4915: CALL_OW 70
4919: ST_TO_ADDR
// if not Frank then
4920: LD_EXP 7
4924: NOT
4925: IFFALSE 4994
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
4927: LD_ADDR_EXP 7
4931: PUSH
4932: LD_EXP 43
4936: PUSH
4937: LD_STRING Frank
4939: STR
4940: PPUSH
4941: LD_INT 1
4943: PPUSH
4944: CALL 6743 0 2
4948: ST_TO_ADDR
// if veh > 0 then
4949: LD_VAR 0 5
4953: PUSH
4954: LD_INT 0
4956: GREATER
4957: IFFALSE 4979
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
4959: LD_EXP 7
4963: PPUSH
4964: LD_VAR 0 5
4968: PUSH
4969: LD_INT 1
4971: ARRAY
4972: PPUSH
4973: CALL_OW 52
// end else
4977: GO 4994
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
4979: LD_EXP 7
4983: PPUSH
4984: LD_INT 4
4986: PPUSH
4987: LD_INT 0
4989: PPUSH
4990: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4994: LD_ADDR_VAR 0 5
4998: PUSH
4999: LD_INT 4
5001: PPUSH
5002: LD_INT 22
5004: PUSH
5005: LD_INT 1
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 21
5014: PUSH
5015: LD_INT 2
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: LD_INT 58
5024: PUSH
5025: EMPTY
5026: LIST
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL_OW 70
5037: ST_TO_ADDR
// if not Gladstone then
5038: LD_EXP 8
5042: NOT
5043: IFFALSE 5112
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5045: LD_ADDR_EXP 8
5049: PUSH
5050: LD_EXP 43
5054: PUSH
5055: LD_STRING Gladstone
5057: STR
5058: PPUSH
5059: LD_INT 1
5061: PPUSH
5062: CALL 6743 0 2
5066: ST_TO_ADDR
// if veh > 0 then
5067: LD_VAR 0 5
5071: PUSH
5072: LD_INT 0
5074: GREATER
5075: IFFALSE 5097
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
5077: LD_EXP 8
5081: PPUSH
5082: LD_VAR 0 5
5086: PUSH
5087: LD_INT 1
5089: ARRAY
5090: PPUSH
5091: CALL_OW 52
// end else
5095: GO 5112
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
5097: LD_EXP 8
5101: PPUSH
5102: LD_INT 4
5104: PPUSH
5105: LD_INT 0
5107: PPUSH
5108: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5112: LD_ADDR_VAR 0 5
5116: PUSH
5117: LD_INT 4
5119: PPUSH
5120: LD_INT 22
5122: PUSH
5123: LD_INT 1
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: LD_INT 21
5132: PUSH
5133: LD_INT 2
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 58
5142: PUSH
5143: EMPTY
5144: LIST
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: LIST
5150: PPUSH
5151: CALL_OW 70
5155: ST_TO_ADDR
// if not Kikuchi then
5156: LD_EXP 9
5160: NOT
5161: IFFALSE 5230
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
5163: LD_ADDR_EXP 9
5167: PUSH
5168: LD_EXP 43
5172: PUSH
5173: LD_STRING Kikuchi
5175: STR
5176: PPUSH
5177: LD_INT 1
5179: PPUSH
5180: CALL 6743 0 2
5184: ST_TO_ADDR
// if veh > 0 then
5185: LD_VAR 0 5
5189: PUSH
5190: LD_INT 0
5192: GREATER
5193: IFFALSE 5215
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
5195: LD_EXP 9
5199: PPUSH
5200: LD_VAR 0 5
5204: PUSH
5205: LD_INT 1
5207: ARRAY
5208: PPUSH
5209: CALL_OW 52
// end else
5213: GO 5230
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
5215: LD_EXP 9
5219: PPUSH
5220: LD_INT 4
5222: PPUSH
5223: LD_INT 0
5225: PPUSH
5226: CALL_OW 49
// end ; end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5230: LD_ADDR_VAR 0 5
5234: PUSH
5235: LD_INT 4
5237: PPUSH
5238: LD_INT 22
5240: PUSH
5241: LD_INT 1
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: LD_INT 21
5250: PUSH
5251: LD_INT 2
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PUSH
5258: LD_INT 58
5260: PUSH
5261: EMPTY
5262: LIST
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: LIST
5268: PPUSH
5269: CALL_OW 70
5273: ST_TO_ADDR
// if not Khatam then
5274: LD_EXP 10
5278: NOT
5279: IFFALSE 5348
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5281: LD_ADDR_EXP 10
5285: PUSH
5286: LD_EXP 43
5290: PUSH
5291: LD_STRING Khatam
5293: STR
5294: PPUSH
5295: LD_INT 1
5297: PPUSH
5298: CALL 6743 0 2
5302: ST_TO_ADDR
// if veh > 0 then
5303: LD_VAR 0 5
5307: PUSH
5308: LD_INT 0
5310: GREATER
5311: IFFALSE 5333
// begin PlaceHumanInUnit ( Khatam , veh [ 1 ] ) ;
5313: LD_EXP 10
5317: PPUSH
5318: LD_VAR 0 5
5322: PUSH
5323: LD_INT 1
5325: ARRAY
5326: PPUSH
5327: CALL_OW 52
// end else
5331: GO 5348
// begin PlaceUnitArea ( Khatam , GammaSupport , false ) ;
5333: LD_EXP 10
5337: PPUSH
5338: LD_INT 4
5340: PPUSH
5341: LD_INT 0
5343: PPUSH
5344: CALL_OW 49
// end ; end ; ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
5348: LD_INT 4
5350: PPUSH
5351: LD_INT 22
5353: PUSH
5354: LD_INT 1
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PUSH
5361: EMPTY
5362: LIST
5363: PPUSH
5364: CALL_OW 70
5368: PPUSH
5369: LD_INT 53
5371: PPUSH
5372: LD_INT 19
5374: PPUSH
5375: CALL_OW 111
// end ;
5379: LD_VAR 0 1
5383: RET
// export function PrepareSikorsky ; begin
5384: LD_INT 0
5386: PPUSH
// uc_side = 4 ;
5387: LD_ADDR_OWVAR 20
5391: PUSH
5392: LD_INT 4
5394: ST_TO_ADDR
// uc_nation = 1 ;
5395: LD_ADDR_OWVAR 21
5399: PUSH
5400: LD_INT 1
5402: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5403: LD_ADDR_EXP 16
5407: PUSH
5408: LD_STRING Sikorski
5410: PPUSH
5411: LD_INT 0
5413: PPUSH
5414: CALL 6743 0 2
5418: ST_TO_ADDR
// vc_engine = 1 ;
5419: LD_ADDR_OWVAR 39
5423: PUSH
5424: LD_INT 1
5426: ST_TO_ADDR
// vc_control = 1 ;
5427: LD_ADDR_OWVAR 38
5431: PUSH
5432: LD_INT 1
5434: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5435: LD_ADDR_OWVAR 40
5439: PUSH
5440: LD_INT 5
5442: PUSH
5443: LD_INT 3
5445: PUSH
5446: LD_INT 4
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: LIST
5453: PUSH
5454: LD_OWVAR 67
5458: ARRAY
5459: ST_TO_ADDR
// vc_chassis = 4 ;
5460: LD_ADDR_OWVAR 37
5464: PUSH
5465: LD_INT 4
5467: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5468: LD_ADDR_EXP 17
5472: PUSH
5473: CALL_OW 45
5477: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
5478: LD_EXP 17
5482: PPUSH
5483: LD_INT 9
5485: PPUSH
5486: LD_INT 0
5488: PPUSH
5489: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5493: LD_EXP 16
5497: PPUSH
5498: LD_EXP 17
5502: PPUSH
5503: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5507: LD_EXP 17
5511: PPUSH
5512: LD_INT 5
5514: PPUSH
5515: CALL_OW 113
// end ;
5519: LD_VAR 0 1
5523: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5524: LD_INT 0
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5530: LD_ADDR_VAR 0 2
5534: PUSH
5535: DOUBLE
5536: LD_INT 1
5538: DEC
5539: ST_TO_ADDR
5540: LD_INT 8
5542: PUSH
5543: LD_INT 7
5545: PUSH
5546: LD_INT 7
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: LIST
5553: PUSH
5554: LD_OWVAR 67
5558: ARRAY
5559: PUSH
5560: FOR_TO
5561: IFFALSE 5658
// begin uc_side = 4 ;
5563: LD_ADDR_OWVAR 20
5567: PUSH
5568: LD_INT 4
5570: ST_TO_ADDR
// uc_nation = 1 ;
5571: LD_ADDR_OWVAR 21
5575: PUSH
5576: LD_INT 1
5578: ST_TO_ADDR
// hc_name =  ;
5579: LD_ADDR_OWVAR 26
5583: PUSH
5584: LD_STRING 
5586: ST_TO_ADDR
// hc_gallery =  ;
5587: LD_ADDR_OWVAR 33
5591: PUSH
5592: LD_STRING 
5594: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5595: LD_INT 0
5597: PPUSH
5598: LD_INT 1
5600: PPUSH
5601: LD_INT 5
5603: PPUSH
5604: LD_INT 8
5606: PPUSH
5607: CALL_OW 12
5611: PPUSH
5612: CALL_OW 380
// un = CreateHuman ;
5616: LD_ADDR_VAR 0 3
5620: PUSH
5621: CALL_OW 44
5625: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5626: LD_VAR 0 3
5630: PPUSH
5631: LD_INT 9
5633: PPUSH
5634: LD_INT 0
5636: PPUSH
5637: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_INT 53
5648: PPUSH
5649: LD_INT 23
5651: PPUSH
5652: CALL_OW 111
// end ;
5656: GO 5560
5658: POP
5659: POP
// for i = 1 to 3 do
5660: LD_ADDR_VAR 0 2
5664: PUSH
5665: DOUBLE
5666: LD_INT 1
5668: DEC
5669: ST_TO_ADDR
5670: LD_INT 3
5672: PUSH
5673: FOR_TO
5674: IFFALSE 5771
// begin uc_side = 4 ;
5676: LD_ADDR_OWVAR 20
5680: PUSH
5681: LD_INT 4
5683: ST_TO_ADDR
// uc_nation = 1 ;
5684: LD_ADDR_OWVAR 21
5688: PUSH
5689: LD_INT 1
5691: ST_TO_ADDR
// hc_name =  ;
5692: LD_ADDR_OWVAR 26
5696: PUSH
5697: LD_STRING 
5699: ST_TO_ADDR
// hc_gallery =  ;
5700: LD_ADDR_OWVAR 33
5704: PUSH
5705: LD_STRING 
5707: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5708: LD_INT 0
5710: PPUSH
5711: LD_INT 4
5713: PPUSH
5714: LD_INT 5
5716: PPUSH
5717: LD_INT 8
5719: PPUSH
5720: CALL_OW 12
5724: PPUSH
5725: CALL_OW 380
// un = CreateHuman ;
5729: LD_ADDR_VAR 0 3
5733: PUSH
5734: CALL_OW 44
5738: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5739: LD_VAR 0 3
5743: PPUSH
5744: LD_INT 9
5746: PPUSH
5747: LD_INT 0
5749: PPUSH
5750: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5754: LD_VAR 0 3
5758: PPUSH
5759: LD_INT 53
5761: PPUSH
5762: LD_INT 23
5764: PPUSH
5765: CALL_OW 111
// end ;
5769: GO 5673
5771: POP
5772: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5773: LD_ADDR_VAR 0 2
5777: PUSH
5778: DOUBLE
5779: LD_INT 1
5781: DEC
5782: ST_TO_ADDR
5783: LD_INT 9
5785: PUSH
5786: LD_INT 8
5788: PUSH
5789: LD_INT 7
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: LIST
5796: PUSH
5797: LD_OWVAR 67
5801: ARRAY
5802: PUSH
5803: FOR_TO
5804: IFFALSE 6000
// begin uc_side = 4 ;
5806: LD_ADDR_OWVAR 20
5810: PUSH
5811: LD_INT 4
5813: ST_TO_ADDR
// uc_nation = 1 ;
5814: LD_ADDR_OWVAR 21
5818: PUSH
5819: LD_INT 1
5821: ST_TO_ADDR
// vc_engine = 1 ;
5822: LD_ADDR_OWVAR 39
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// vc_control = 1 ;
5830: LD_ADDR_OWVAR 38
5834: PUSH
5835: LD_INT 1
5837: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
5838: LD_ADDR_OWVAR 40
5842: PUSH
5843: LD_INT 3
5845: PUSH
5846: LD_INT 4
5848: PUSH
5849: LD_INT 5
5851: PUSH
5852: LD_INT 6
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_INT 1
5863: PPUSH
5864: LD_INT 4
5866: PPUSH
5867: CALL_OW 12
5871: ARRAY
5872: ST_TO_ADDR
// vc_chassis = 4 ;
5873: LD_ADDR_OWVAR 37
5877: PUSH
5878: LD_INT 4
5880: ST_TO_ADDR
// veh = CreateVehicle ;
5881: LD_ADDR_VAR 0 4
5885: PUSH
5886: CALL_OW 45
5890: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
5891: LD_VAR 0 4
5895: PPUSH
5896: LD_INT 9
5898: PPUSH
5899: LD_INT 0
5901: PPUSH
5902: CALL_OW 49
// hc_name =  ;
5906: LD_ADDR_OWVAR 26
5910: PUSH
5911: LD_STRING 
5913: ST_TO_ADDR
// hc_gallery =  ;
5914: LD_ADDR_OWVAR 33
5918: PUSH
5919: LD_STRING 
5921: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
5922: LD_INT 0
5924: PPUSH
5925: LD_INT 3
5927: PPUSH
5928: LD_INT 5
5930: PPUSH
5931: LD_INT 8
5933: PPUSH
5934: CALL_OW 12
5938: PPUSH
5939: CALL_OW 380
// un = CreateHuman ;
5943: LD_ADDR_VAR 0 3
5947: PUSH
5948: CALL_OW 44
5952: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5953: LD_VAR 0 3
5957: PPUSH
5958: LD_VAR 0 4
5962: PPUSH
5963: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
5967: LD_VAR 0 4
5971: PUSH
5972: LD_VAR 0 3
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PPUSH
5981: LD_INT 53
5983: PPUSH
5984: LD_INT 23
5986: PPUSH
5987: CALL_OW 111
// wait ( 0 0$5 ) ;
5991: LD_INT 175
5993: PPUSH
5994: CALL_OW 67
// end ;
5998: GO 5803
6000: POP
6001: POP
// end ; end_of_file
6002: LD_VAR 0 1
6006: RET
// export function PrepareRussianCommander ; begin
6007: LD_INT 0
6009: PPUSH
// uc_side = 3 ;
6010: LD_ADDR_OWVAR 20
6014: PUSH
6015: LD_INT 3
6017: ST_TO_ADDR
// uc_nation = 3 ;
6018: LD_ADDR_OWVAR 21
6022: PUSH
6023: LD_INT 3
6025: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6026: LD_ADDR_EXP 24
6030: PUSH
6031: LD_STRING Borodin
6033: PPUSH
6034: CALL_OW 25
6038: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6039: LD_EXP 24
6043: PPUSH
6044: LD_INT 25
6046: PPUSH
6047: LD_INT 0
6049: PPUSH
6050: CALL_OW 49
// end ;
6054: LD_VAR 0 1
6058: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6059: LD_INT 0
6061: PPUSH
6062: PPUSH
6063: PPUSH
6064: PPUSH
// for i = 1 to 10 do
6065: LD_ADDR_VAR 0 2
6069: PUSH
6070: DOUBLE
6071: LD_INT 1
6073: DEC
6074: ST_TO_ADDR
6075: LD_INT 10
6077: PUSH
6078: FOR_TO
6079: IFFALSE 6153
// begin uc_side = 6 ;
6081: LD_ADDR_OWVAR 20
6085: PUSH
6086: LD_INT 6
6088: ST_TO_ADDR
// uc_nation = 3 ;
6089: LD_ADDR_OWVAR 21
6093: PUSH
6094: LD_INT 3
6096: ST_TO_ADDR
// hc_gallery =  ;
6097: LD_ADDR_OWVAR 33
6101: PUSH
6102: LD_STRING 
6104: ST_TO_ADDR
// hc_name =  ;
6105: LD_ADDR_OWVAR 26
6109: PUSH
6110: LD_STRING 
6112: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6113: LD_INT 0
6115: PPUSH
6116: LD_INT 1
6118: PPUSH
6119: LD_INT 3
6121: PPUSH
6122: CALL_OW 380
// un = CreateHuman ;
6126: LD_ADDR_VAR 0 3
6130: PUSH
6131: CALL_OW 44
6135: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6136: LD_VAR 0 3
6140: PPUSH
6141: LD_INT 1
6143: PPUSH
6144: LD_INT 0
6146: PPUSH
6147: CALL_OW 49
// end ;
6151: GO 6078
6153: POP
6154: POP
// for i = 1 to 3 do
6155: LD_ADDR_VAR 0 2
6159: PUSH
6160: DOUBLE
6161: LD_INT 1
6163: DEC
6164: ST_TO_ADDR
6165: LD_INT 3
6167: PUSH
6168: FOR_TO
6169: IFFALSE 6318
// begin uc_side = 6 ;
6171: LD_ADDR_OWVAR 20
6175: PUSH
6176: LD_INT 6
6178: ST_TO_ADDR
// uc_nation = 3 ;
6179: LD_ADDR_OWVAR 21
6183: PUSH
6184: LD_INT 3
6186: ST_TO_ADDR
// vc_engine = 1 ;
6187: LD_ADDR_OWVAR 39
6191: PUSH
6192: LD_INT 1
6194: ST_TO_ADDR
// vc_control = 1 ;
6195: LD_ADDR_OWVAR 38
6199: PUSH
6200: LD_INT 1
6202: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6203: LD_ADDR_OWVAR 40
6207: PUSH
6208: LD_INT 43
6210: PUSH
6211: LD_INT 44
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 1
6220: PPUSH
6221: LD_INT 2
6223: PPUSH
6224: CALL_OW 12
6228: ARRAY
6229: ST_TO_ADDR
// vc_chassis = 22 ;
6230: LD_ADDR_OWVAR 37
6234: PUSH
6235: LD_INT 22
6237: ST_TO_ADDR
// veh = CreateVehicle ;
6238: LD_ADDR_VAR 0 4
6242: PUSH
6243: CALL_OW 45
6247: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6248: LD_VAR 0 4
6252: PPUSH
6253: LD_INT 2
6255: PPUSH
6256: LD_INT 0
6258: PPUSH
6259: CALL_OW 49
// hc_gallery =  ;
6263: LD_ADDR_OWVAR 33
6267: PUSH
6268: LD_STRING 
6270: ST_TO_ADDR
// hc_name =  ;
6271: LD_ADDR_OWVAR 26
6275: PUSH
6276: LD_STRING 
6278: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6279: LD_INT 0
6281: PPUSH
6282: LD_INT 3
6284: PPUSH
6285: LD_INT 4
6287: PPUSH
6288: CALL_OW 380
// un = CreateHuman ;
6292: LD_ADDR_VAR 0 3
6296: PUSH
6297: CALL_OW 44
6301: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6302: LD_VAR 0 3
6306: PPUSH
6307: LD_VAR 0 4
6311: PPUSH
6312: CALL_OW 52
// end ;
6316: GO 6168
6318: POP
6319: POP
// end ;
6320: LD_VAR 0 1
6324: RET
// export function PrepareRussians ; var i , un ; begin
6325: LD_INT 0
6327: PPUSH
6328: PPUSH
6329: PPUSH
// for i = 1 to 8 do
6330: LD_ADDR_VAR 0 2
6334: PUSH
6335: DOUBLE
6336: LD_INT 1
6338: DEC
6339: ST_TO_ADDR
6340: LD_INT 8
6342: PUSH
6343: FOR_TO
6344: IFFALSE 6430
// begin uc_side = 3 ;
6346: LD_ADDR_OWVAR 20
6350: PUSH
6351: LD_INT 3
6353: ST_TO_ADDR
// uc_nation = 3 ;
6354: LD_ADDR_OWVAR 21
6358: PUSH
6359: LD_INT 3
6361: ST_TO_ADDR
// hc_gallery =  ;
6362: LD_ADDR_OWVAR 33
6366: PUSH
6367: LD_STRING 
6369: ST_TO_ADDR
// hc_name =  ;
6370: LD_ADDR_OWVAR 26
6374: PUSH
6375: LD_STRING 
6377: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6378: LD_INT 0
6380: PPUSH
6381: LD_INT 1
6383: PPUSH
6384: LD_EXP 25
6388: PPUSH
6389: LD_EXP 26
6393: PPUSH
6394: CALL_OW 12
6398: PPUSH
6399: CALL_OW 380
// un = CreateHuman ;
6403: LD_ADDR_VAR 0 3
6407: PUSH
6408: CALL_OW 44
6412: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6413: LD_VAR 0 3
6417: PPUSH
6418: LD_INT 3
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: CALL_OW 49
// end ;
6428: GO 6343
6430: POP
6431: POP
// for i = 1 to 4 do
6432: LD_ADDR_VAR 0 2
6436: PUSH
6437: DOUBLE
6438: LD_INT 1
6440: DEC
6441: ST_TO_ADDR
6442: LD_INT 4
6444: PUSH
6445: FOR_TO
6446: IFFALSE 6532
// begin uc_side = 3 ;
6448: LD_ADDR_OWVAR 20
6452: PUSH
6453: LD_INT 3
6455: ST_TO_ADDR
// uc_nation = 3 ;
6456: LD_ADDR_OWVAR 21
6460: PUSH
6461: LD_INT 3
6463: ST_TO_ADDR
// hc_gallery =  ;
6464: LD_ADDR_OWVAR 33
6468: PUSH
6469: LD_STRING 
6471: ST_TO_ADDR
// hc_name =  ;
6472: LD_ADDR_OWVAR 26
6476: PUSH
6477: LD_STRING 
6479: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6480: LD_INT 0
6482: PPUSH
6483: LD_INT 2
6485: PPUSH
6486: LD_EXP 25
6490: PPUSH
6491: LD_EXP 26
6495: PPUSH
6496: CALL_OW 12
6500: PPUSH
6501: CALL_OW 380
// un = CreateHuman ;
6505: LD_ADDR_VAR 0 3
6509: PUSH
6510: CALL_OW 44
6514: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6515: LD_VAR 0 3
6519: PPUSH
6520: LD_INT 3
6522: PPUSH
6523: LD_INT 0
6525: PPUSH
6526: CALL_OW 49
// end ;
6530: GO 6445
6532: POP
6533: POP
// for i = 1 to 3 do
6534: LD_ADDR_VAR 0 2
6538: PUSH
6539: DOUBLE
6540: LD_INT 1
6542: DEC
6543: ST_TO_ADDR
6544: LD_INT 3
6546: PUSH
6547: FOR_TO
6548: IFFALSE 6634
// begin uc_side = 3 ;
6550: LD_ADDR_OWVAR 20
6554: PUSH
6555: LD_INT 3
6557: ST_TO_ADDR
// uc_nation = 3 ;
6558: LD_ADDR_OWVAR 21
6562: PUSH
6563: LD_INT 3
6565: ST_TO_ADDR
// hc_gallery =  ;
6566: LD_ADDR_OWVAR 33
6570: PUSH
6571: LD_STRING 
6573: ST_TO_ADDR
// hc_name =  ;
6574: LD_ADDR_OWVAR 26
6578: PUSH
6579: LD_STRING 
6581: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6582: LD_INT 0
6584: PPUSH
6585: LD_INT 3
6587: PPUSH
6588: LD_EXP 25
6592: PPUSH
6593: LD_EXP 26
6597: PPUSH
6598: CALL_OW 12
6602: PPUSH
6603: CALL_OW 380
// un = CreateHuman ;
6607: LD_ADDR_VAR 0 3
6611: PUSH
6612: CALL_OW 44
6616: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6617: LD_VAR 0 3
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: LD_INT 0
6627: PPUSH
6628: CALL_OW 49
// end ;
6632: GO 6547
6634: POP
6635: POP
// for i = 1 to 2 do
6636: LD_ADDR_VAR 0 2
6640: PUSH
6641: DOUBLE
6642: LD_INT 1
6644: DEC
6645: ST_TO_ADDR
6646: LD_INT 2
6648: PUSH
6649: FOR_TO
6650: IFFALSE 6736
// begin uc_side = 3 ;
6652: LD_ADDR_OWVAR 20
6656: PUSH
6657: LD_INT 3
6659: ST_TO_ADDR
// uc_nation = 3 ;
6660: LD_ADDR_OWVAR 21
6664: PUSH
6665: LD_INT 3
6667: ST_TO_ADDR
// hc_gallery =  ;
6668: LD_ADDR_OWVAR 33
6672: PUSH
6673: LD_STRING 
6675: ST_TO_ADDR
// hc_name =  ;
6676: LD_ADDR_OWVAR 26
6680: PUSH
6681: LD_STRING 
6683: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6684: LD_INT 0
6686: PPUSH
6687: LD_INT 4
6689: PPUSH
6690: LD_EXP 25
6694: PPUSH
6695: LD_EXP 26
6699: PPUSH
6700: CALL_OW 12
6704: PPUSH
6705: CALL_OW 380
// un = CreateHuman ;
6709: LD_ADDR_VAR 0 3
6713: PUSH
6714: CALL_OW 44
6718: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6719: LD_VAR 0 3
6723: PPUSH
6724: LD_INT 3
6726: PPUSH
6727: LD_INT 0
6729: PPUSH
6730: CALL_OW 49
// end ;
6734: GO 6649
6736: POP
6737: POP
// end ; end_of_file
6738: LD_VAR 0 1
6742: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6743: LD_INT 0
6745: PPUSH
6746: PPUSH
// if exist_mode then
6747: LD_VAR 0 2
6751: IFFALSE 6770
// unit := CreateCharacter ( ident ) else
6753: LD_ADDR_VAR 0 4
6757: PUSH
6758: LD_VAR 0 1
6762: PPUSH
6763: CALL_OW 34
6767: ST_TO_ADDR
6768: GO 6785
// unit := NewCharacter ( ident ) ;
6770: LD_ADDR_VAR 0 4
6774: PUSH
6775: LD_VAR 0 1
6779: PPUSH
6780: CALL_OW 25
6784: ST_TO_ADDR
// result := unit ;
6785: LD_ADDR_VAR 0 3
6789: PUSH
6790: LD_VAR 0 4
6794: ST_TO_ADDR
// end ;
6795: LD_VAR 0 3
6799: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6800: LD_INT 0
6802: PPUSH
6803: PPUSH
6804: PPUSH
// rnd = rand ( 1 , characters ) ;
6805: LD_ADDR_VAR 0 6
6809: PUSH
6810: LD_INT 1
6812: PPUSH
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 12
6822: ST_TO_ADDR
// for i = 1 to characters do
6823: LD_ADDR_VAR 0 5
6827: PUSH
6828: DOUBLE
6829: LD_INT 1
6831: DEC
6832: ST_TO_ADDR
6833: LD_VAR 0 1
6837: PUSH
6838: FOR_TO
6839: IFFALSE 6949
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6841: LD_VAR 0 5
6845: PUSH
6846: LD_VAR 0 6
6850: EQUAL
6851: PUSH
6852: LD_VAR 0 1
6856: PUSH
6857: LD_VAR 0 5
6861: ARRAY
6862: PPUSH
6863: CALL_OW 258
6867: PUSH
6868: LD_INT 1
6870: EQUAL
6871: AND
6872: IFFALSE 6894
// Say ( characters [ i ] , dialogMID ) ;
6874: LD_VAR 0 1
6878: PUSH
6879: LD_VAR 0 5
6883: ARRAY
6884: PPUSH
6885: LD_VAR 0 2
6889: PPUSH
6890: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6894: LD_VAR 0 5
6898: PUSH
6899: LD_VAR 0 6
6903: EQUAL
6904: PUSH
6905: LD_VAR 0 1
6909: PUSH
6910: LD_VAR 0 5
6914: ARRAY
6915: PPUSH
6916: CALL_OW 258
6920: PUSH
6921: LD_INT 2
6923: EQUAL
6924: AND
6925: IFFALSE 6947
// Say ( characters [ i ] , dialogFID ) ;
6927: LD_VAR 0 1
6931: PUSH
6932: LD_VAR 0 5
6936: ARRAY
6937: PPUSH
6938: LD_VAR 0 3
6942: PPUSH
6943: CALL_OW 88
// end ;
6947: GO 6838
6949: POP
6950: POP
// end ;
6951: LD_VAR 0 4
6955: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6956: LD_INT 0
6958: PPUSH
6959: PPUSH
6960: PPUSH
// uc_side := GetSide ( b ) ;
6961: LD_ADDR_OWVAR 20
6965: PUSH
6966: LD_VAR 0 2
6970: PPUSH
6971: CALL_OW 255
6975: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6976: LD_ADDR_OWVAR 21
6980: PUSH
6981: LD_VAR 0 2
6985: PPUSH
6986: CALL_OW 248
6990: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6991: LD_INT 0
6993: PPUSH
6994: LD_INT 1
6996: PPUSH
6997: LD_VAR 0 1
7001: PPUSH
7002: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7006: LD_ADDR_VAR 0 5
7010: PUSH
7011: LD_VAR 0 2
7015: PPUSH
7016: CALL_OW 254
7020: PUSH
7021: LD_INT 3
7023: MINUS
7024: ST_TO_ADDR
// if dir < 0 then
7025: LD_VAR 0 5
7029: PUSH
7030: LD_INT 0
7032: LESS
7033: IFFALSE 7049
// dir := 6 + dir ;
7035: LD_ADDR_VAR 0 5
7039: PUSH
7040: LD_INT 6
7042: PUSH
7043: LD_VAR 0 5
7047: PLUS
7048: ST_TO_ADDR
// un := CreateHuman ;
7049: LD_ADDR_VAR 0 4
7053: PUSH
7054: CALL_OW 44
7058: ST_TO_ADDR
// SetDir ( un , dir ) ;
7059: LD_VAR 0 4
7063: PPUSH
7064: LD_VAR 0 5
7068: PPUSH
7069: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7073: LD_VAR 0 4
7077: PPUSH
7078: LD_VAR 0 2
7082: PPUSH
7083: CALL_OW 52
// end ;
7087: LD_VAR 0 3
7091: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7092: LD_INT 0
7094: PPUSH
7095: PPUSH
7096: PPUSH
7097: PPUSH
// for i = 1 to count do
7098: LD_ADDR_VAR 0 8
7102: PUSH
7103: DOUBLE
7104: LD_INT 1
7106: DEC
7107: ST_TO_ADDR
7108: LD_VAR 0 6
7112: PUSH
7113: FOR_TO
7114: IFFALSE 7195
// begin uc_side = side ;
7116: LD_ADDR_OWVAR 20
7120: PUSH
7121: LD_VAR 0 1
7125: ST_TO_ADDR
// uc_nation = nation ;
7126: LD_ADDR_OWVAR 21
7130: PUSH
7131: LD_VAR 0 2
7135: ST_TO_ADDR
// hc_gallery =  ;
7136: LD_ADDR_OWVAR 33
7140: PUSH
7141: LD_STRING 
7143: ST_TO_ADDR
// hc_name =  ;
7144: LD_ADDR_OWVAR 26
7148: PUSH
7149: LD_STRING 
7151: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7152: LD_INT 0
7154: PPUSH
7155: LD_VAR 0 5
7159: PPUSH
7160: LD_VAR 0 4
7164: PPUSH
7165: CALL_OW 380
// un = CreateHuman ;
7169: LD_ADDR_VAR 0 10
7173: PUSH
7174: CALL_OW 44
7178: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7179: LD_VAR 0 10
7183: PPUSH
7184: LD_VAR 0 3
7188: PPUSH
7189: CALL_OW 52
// end ;
7193: GO 7113
7195: POP
7196: POP
// end ;
7197: LD_VAR 0 7
7201: RET
// export function PrepareDifficulty ; begin
7202: LD_INT 0
7204: PPUSH
// if Difficulty = 1 then
7205: LD_OWVAR 67
7209: PUSH
7210: LD_INT 1
7212: EQUAL
7213: IFFALSE 7231
// begin RuSolMinLevel = 4 ;
7215: LD_ADDR_EXP 25
7219: PUSH
7220: LD_INT 4
7222: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7223: LD_ADDR_EXP 26
7227: PUSH
7228: LD_INT 6
7230: ST_TO_ADDR
// end ; if Difficulty = 2 then
7231: LD_OWVAR 67
7235: PUSH
7236: LD_INT 2
7238: EQUAL
7239: IFFALSE 7309
// begin RuSolMinLevel = 5 ;
7241: LD_ADDR_EXP 25
7245: PUSH
7246: LD_INT 5
7248: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7249: LD_ADDR_EXP 26
7253: PUSH
7254: LD_INT 6
7256: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7257: LD_INT 51
7259: PPUSH
7260: LD_INT 3
7262: PPUSH
7263: LD_INT 1
7265: PPUSH
7266: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7270: LD_INT 57
7272: PPUSH
7273: LD_INT 3
7275: PPUSH
7276: LD_INT 1
7278: PPUSH
7279: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7283: LD_INT 57
7285: PPUSH
7286: LD_INT 6
7288: PPUSH
7289: LD_INT 2
7291: PPUSH
7292: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7296: LD_INT 51
7298: PPUSH
7299: LD_INT 6
7301: PPUSH
7302: LD_INT 2
7304: PPUSH
7305: CALL_OW 322
// end ; if Difficulty = 3 then
7309: LD_OWVAR 67
7313: PUSH
7314: LD_INT 3
7316: EQUAL
7317: IFFALSE 7400
// begin RuSolMinLevel = 5 ;
7319: LD_ADDR_EXP 25
7323: PUSH
7324: LD_INT 5
7326: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7327: LD_ADDR_EXP 26
7331: PUSH
7332: LD_INT 6
7334: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7335: LD_INT 57
7337: PPUSH
7338: LD_INT 3
7340: PPUSH
7341: LD_INT 1
7343: PPUSH
7344: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7348: LD_INT 51
7350: PPUSH
7351: LD_INT 3
7353: PPUSH
7354: LD_INT 1
7356: PPUSH
7357: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7361: LD_INT 52
7363: PPUSH
7364: LD_INT 3
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7374: LD_INT 57
7376: PPUSH
7377: LD_INT 6
7379: PPUSH
7380: LD_INT 2
7382: PPUSH
7383: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7387: LD_INT 52
7389: PPUSH
7390: LD_INT 6
7392: PPUSH
7393: LD_INT 2
7395: PPUSH
7396: CALL_OW 322
// end ; end ;
7400: LD_VAR 0 1
7404: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7405: LD_INT 0
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7411: LD_ADDR_VAR 0 3
7415: PUSH
7416: LD_INT 22
7418: PUSH
7419: LD_INT 3
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 25
7428: PUSH
7429: LD_INT 2
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PPUSH
7440: CALL_OW 69
7444: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7445: LD_ADDR_VAR 0 4
7449: PUSH
7450: LD_INT 4
7452: PUSH
7453: LD_INT 75
7455: PUSH
7456: LD_INT 79
7458: PUSH
7459: LD_INT 2
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 4
7470: PUSH
7471: LD_INT 113
7473: PUSH
7474: LD_INT 94
7476: PUSH
7477: LD_INT 4
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 29
7488: PUSH
7489: LD_INT 106
7491: PUSH
7492: LD_INT 97
7494: PUSH
7495: LD_INT 3
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: PUSH
7504: LD_INT 26
7506: PUSH
7507: LD_INT 93
7509: PUSH
7510: LD_INT 97
7512: PUSH
7513: LD_INT 5
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: PUSH
7522: LD_INT 2
7524: PUSH
7525: LD_INT 100
7527: PUSH
7528: LD_INT 89
7530: PUSH
7531: LD_INT 3
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: PUSH
7540: LD_INT 17
7542: PUSH
7543: LD_INT 96
7545: PUSH
7546: LD_INT 89
7548: PUSH
7549: LD_INT 1
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 32
7560: PUSH
7561: LD_INT 78
7563: PUSH
7564: LD_INT 94
7566: PUSH
7567: LD_INT 1
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: PUSH
7576: LD_INT 32
7578: PUSH
7579: LD_INT 95
7581: PUSH
7582: LD_INT 82
7584: PUSH
7585: LD_INT 3
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 32
7596: PUSH
7597: LD_INT 104
7599: PUSH
7600: LD_INT 85
7602: PUSH
7603: LD_INT 2
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: PUSH
7612: LD_INT 32
7614: PUSH
7615: LD_INT 81
7617: PUSH
7618: LD_INT 78
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: PUSH
7630: LD_INT 33
7632: PUSH
7633: LD_INT 109
7635: PUSH
7636: LD_INT 90
7638: PUSH
7639: LD_INT 3
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 33
7650: PUSH
7651: LD_INT 88
7653: PUSH
7654: LD_INT 79
7656: PUSH
7657: LD_INT 3
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: PUSH
7666: LD_INT 33
7668: PUSH
7669: LD_INT 76
7671: PUSH
7672: LD_INT 87
7674: PUSH
7675: LD_INT 1
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: PUSH
7684: LD_INT 26
7686: PUSH
7687: LD_INT 96
7689: PUSH
7690: LD_INT 97
7692: PUSH
7693: LD_INT 5
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: PUSH
7702: LD_INT 26
7704: PUSH
7705: LD_INT 85
7707: PUSH
7708: LD_INT 84
7710: PUSH
7711: LD_INT 2
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 6
7722: PUSH
7723: LD_INT 88
7725: PUSH
7726: LD_INT 95
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: PUSH
7738: LD_INT 19
7740: PUSH
7741: LD_INT 103
7743: PUSH
7744: LD_INT 89
7746: PUSH
7747: LD_INT 4
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 16
7758: PUSH
7759: LD_INT 97
7761: PUSH
7762: LD_INT 86
7764: PUSH
7765: LD_INT 2
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: PUSH
7774: LD_INT 24
7776: PUSH
7777: LD_INT 100
7779: PUSH
7780: LD_INT 85
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: ST_TO_ADDR
// for i := 1 to buildingsTab do
7813: LD_ADDR_VAR 0 2
7817: PUSH
7818: DOUBLE
7819: LD_INT 1
7821: DEC
7822: ST_TO_ADDR
7823: LD_VAR 0 4
7827: PUSH
7828: FOR_TO
7829: IFFALSE 7902
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7831: LD_VAR 0 3
7835: PPUSH
7836: LD_VAR 0 4
7840: PUSH
7841: LD_VAR 0 2
7845: ARRAY
7846: PUSH
7847: LD_INT 1
7849: ARRAY
7850: PPUSH
7851: LD_VAR 0 4
7855: PUSH
7856: LD_VAR 0 2
7860: ARRAY
7861: PUSH
7862: LD_INT 2
7864: ARRAY
7865: PPUSH
7866: LD_VAR 0 4
7870: PUSH
7871: LD_VAR 0 2
7875: ARRAY
7876: PUSH
7877: LD_INT 3
7879: ARRAY
7880: PPUSH
7881: LD_VAR 0 4
7885: PUSH
7886: LD_VAR 0 2
7890: ARRAY
7891: PUSH
7892: LD_INT 4
7894: ARRAY
7895: PPUSH
7896: CALL_OW 205
7900: GO 7828
7902: POP
7903: POP
// end ;
7904: LD_VAR 0 1
7908: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7909: LD_INT 0
7911: PPUSH
7912: PPUSH
// for i in charactersList do
7913: LD_ADDR_VAR 0 4
7917: PUSH
7918: LD_VAR 0 1
7922: PUSH
7923: FOR_IN
7924: IFFALSE 7953
// begin if IsOk ( i ) then
7926: LD_VAR 0 4
7930: PPUSH
7931: CALL_OW 302
7935: IFFALSE 7951
// SaveCharacters ( i , ident ) ;
7937: LD_VAR 0 4
7941: PPUSH
7942: LD_VAR 0 2
7946: PPUSH
7947: CALL_OW 38
// end ;
7951: GO 7923
7953: POP
7954: POP
// end ;
7955: LD_VAR 0 3
7959: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
7960: LD_INT 0
7962: PPUSH
7963: PPUSH
7964: PPUSH
7965: PPUSH
7966: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
7967: LD_ADDR_VAR 0 8
7971: PUSH
7972: LD_INT 48
7974: PUSH
7975: LD_INT 49
7977: PUSH
7978: LD_INT 50
7980: PUSH
7981: LD_INT 20
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: LD_INT 51
7989: PUSH
7990: LD_INT 52
7992: PUSH
7993: LD_INT 69
7995: PUSH
7996: LD_INT 39
7998: PUSH
7999: LD_INT 34
8001: PUSH
8002: LD_INT 40
8004: PUSH
8005: LD_INT 53
8007: PUSH
8008: LD_INT 71
8010: PUSH
8011: LD_INT 57
8013: PUSH
8014: LD_INT 58
8016: PUSH
8017: LD_INT 44
8019: PUSH
8020: LD_INT 32
8022: PUSH
8023: LD_INT 27
8025: PUSH
8026: LD_INT 23
8028: PUSH
8029: LD_INT 33
8031: PUSH
8032: LD_INT 59
8034: PUSH
8035: LD_INT 54
8037: PUSH
8038: LD_INT 55
8040: PUSH
8041: LD_INT 56
8043: PUSH
8044: LD_INT 63
8046: PUSH
8047: LD_INT 64
8049: PUSH
8050: LD_INT 65
8052: PUSH
8053: LD_INT 30
8055: PUSH
8056: LD_INT 31
8058: PUSH
8059: LD_INT 21
8061: PUSH
8062: LD_INT 22
8064: PUSH
8065: LD_INT 25
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8102: LD_ADDR_VAR 0 5
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_VAR 0 8
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8194
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8120: LD_VAR 0 8
8124: PUSH
8125: LD_VAR 0 5
8129: ARRAY
8130: PPUSH
8131: LD_VAR 0 1
8135: PPUSH
8136: CALL_OW 321
8140: PUSH
8141: LD_INT 1
8143: EQUAL
8144: PUSH
8145: LD_VAR 0 8
8149: PUSH
8150: LD_VAR 0 5
8154: ARRAY
8155: PPUSH
8156: LD_VAR 0 3
8160: PPUSH
8161: CALL_OW 482
8165: PUSH
8166: LD_INT 1
8168: EQUAL
8169: AND
8170: IFFALSE 8192
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8172: LD_VAR 0 2
8176: PPUSH
8177: LD_VAR 0 8
8181: PUSH
8182: LD_VAR 0 5
8186: ARRAY
8187: PPUSH
8188: CALL_OW 184
8192: GO 8117
8194: POP
8195: POP
// end ;
8196: LD_VAR 0 4
8200: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8201: LD_INT 0
8203: PPUSH
8204: PPUSH
8205: PPUSH
8206: PPUSH
8207: PPUSH
8208: PPUSH
8209: PPUSH
8210: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8211: LD_ADDR_VAR 0 6
8215: PUSH
8216: LD_VAR 0 2
8220: PPUSH
8221: LD_INT 22
8223: PUSH
8224: LD_VAR 0 1
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: PUSH
8233: LD_INT 56
8235: PUSH
8236: EMPTY
8237: LIST
8238: PUSH
8239: LD_INT 24
8241: PUSH
8242: LD_INT 700
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 3
8251: PUSH
8252: LD_INT 60
8254: PUSH
8255: EMPTY
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: LD_INT 2
8264: PUSH
8265: LD_INT 25
8267: PUSH
8268: LD_INT 1
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: LD_INT 25
8277: PUSH
8278: LD_INT 5
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: PUSH
8285: LD_INT 25
8287: PUSH
8288: LD_INT 8
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PUSH
8295: LD_INT 25
8297: PUSH
8298: LD_INT 9
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: PPUSH
8319: CALL_OW 70
8323: PUSH
8324: LD_EXP 24
8328: PUSH
8329: EMPTY
8330: LIST
8331: DIFF
8332: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8333: LD_ADDR_VAR 0 7
8337: PUSH
8338: LD_VAR 0 2
8342: PPUSH
8343: LD_INT 22
8345: PUSH
8346: LD_VAR 0 1
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: LD_INT 30
8357: PUSH
8358: LD_INT 32
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: LD_INT 58
8367: PUSH
8368: EMPTY
8369: LIST
8370: PUSH
8371: LD_INT 24
8373: PUSH
8374: LD_INT 251
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: PPUSH
8387: CALL_OW 70
8391: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8392: LD_ADDR_VAR 0 9
8396: PUSH
8397: LD_VAR 0 2
8401: PPUSH
8402: LD_INT 22
8404: PUSH
8405: LD_VAR 0 1
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 2
8416: PUSH
8417: LD_INT 30
8419: PUSH
8420: LD_INT 4
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: LD_INT 30
8429: PUSH
8430: LD_INT 5
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: LIST
8441: PUSH
8442: LD_INT 24
8444: PUSH
8445: LD_INT 251
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: PPUSH
8457: CALL_OW 70
8461: ST_TO_ADDR
// if barrackList > 0 then
8462: LD_VAR 0 9
8466: PUSH
8467: LD_INT 0
8469: GREATER
8470: IFFALSE 8618
// begin if turretList = 0 then
8472: LD_VAR 0 7
8476: PUSH
8477: LD_INT 0
8479: EQUAL
8480: IFFALSE 8522
// begin if soldiers_list > 0 then
8482: LD_VAR 0 6
8486: PUSH
8487: LD_INT 0
8489: GREATER
8490: IFFALSE 8520
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8492: LD_VAR 0 6
8496: PPUSH
8497: LD_VAR 0 9
8501: PUSH
8502: LD_INT 1
8504: PPUSH
8505: LD_VAR 0 9
8509: PPUSH
8510: CALL_OW 12
8514: ARRAY
8515: PPUSH
8516: CALL_OW 120
// end else
8520: GO 8618
// begin for i in barrackList do
8522: LD_ADDR_VAR 0 4
8526: PUSH
8527: LD_VAR 0 9
8531: PUSH
8532: FOR_IN
8533: IFFALSE 8616
// begin insideUnits = UnitsInside ( i ) ;
8535: LD_ADDR_VAR 0 10
8539: PUSH
8540: LD_VAR 0 4
8544: PPUSH
8545: CALL_OW 313
8549: ST_TO_ADDR
// if insideUnits > 0 then
8550: LD_VAR 0 10
8554: PUSH
8555: LD_INT 0
8557: GREATER
8558: IFFALSE 8582
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8560: LD_VAR 0 10
8564: PUSH
8565: LD_INT 1
8567: ARRAY
8568: PPUSH
8569: LD_VAR 0 7
8573: PUSH
8574: LD_INT 1
8576: ARRAY
8577: PPUSH
8578: CALL_OW 120
// if soldiers_list > 0 then
8582: LD_VAR 0 6
8586: PUSH
8587: LD_INT 0
8589: GREATER
8590: IFFALSE 8614
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8592: LD_VAR 0 6
8596: PUSH
8597: LD_INT 1
8599: ARRAY
8600: PPUSH
8601: LD_VAR 0 7
8605: PUSH
8606: LD_INT 1
8608: ARRAY
8609: PPUSH
8610: CALL_OW 120
// end ;
8614: GO 8532
8616: POP
8617: POP
// end ; end ; end ;
8618: LD_VAR 0 3
8622: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8623: LD_INT 0
8625: PPUSH
8626: PPUSH
8627: PPUSH
8628: PPUSH
8629: PPUSH
8630: PPUSH
// for i = 1 to vehCount do
8631: LD_ADDR_VAR 0 8
8635: PUSH
8636: DOUBLE
8637: LD_INT 1
8639: DEC
8640: ST_TO_ADDR
8641: LD_VAR 0 6
8645: PUSH
8646: FOR_TO
8647: IFFALSE 8854
// begin uc_side = side ;
8649: LD_ADDR_OWVAR 20
8653: PUSH
8654: LD_VAR 0 1
8658: ST_TO_ADDR
// uc_nation = nation ;
8659: LD_ADDR_OWVAR 21
8663: PUSH
8664: LD_VAR 0 3
8668: ST_TO_ADDR
// vc_Chassis = 22 ;
8669: LD_ADDR_OWVAR 37
8673: PUSH
8674: LD_INT 22
8676: ST_TO_ADDR
// vc_engine = 1 ;
8677: LD_ADDR_OWVAR 39
8681: PUSH
8682: LD_INT 1
8684: ST_TO_ADDR
// vc_control = 1 ;
8685: LD_ADDR_OWVAR 38
8689: PUSH
8690: LD_INT 1
8692: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8693: LD_ADDR_OWVAR 40
8697: PUSH
8698: LD_INT 43
8700: PUSH
8701: LD_INT 44
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: LD_INT 1
8710: PPUSH
8711: LD_INT 2
8713: PPUSH
8714: CALL_OW 12
8718: ARRAY
8719: ST_TO_ADDR
// veh = CreateVehicle ;
8720: LD_ADDR_VAR 0 12
8724: PUSH
8725: CALL_OW 45
8729: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8730: LD_VAR 0 12
8734: PPUSH
8735: LD_VAR 0 2
8739: PPUSH
8740: LD_INT 0
8742: PPUSH
8743: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8747: LD_ADDR_EXP 32
8751: PUSH
8752: LD_EXP 32
8756: PUSH
8757: LD_VAR 0 12
8761: ADD
8762: ST_TO_ADDR
// hc_class = 3 ;
8763: LD_ADDR_OWVAR 28
8767: PUSH
8768: LD_INT 3
8770: ST_TO_ADDR
// hc_name =  ;
8771: LD_ADDR_OWVAR 26
8775: PUSH
8776: LD_STRING 
8778: ST_TO_ADDR
// hc_gallery =  ;
8779: LD_ADDR_OWVAR 33
8783: PUSH
8784: LD_STRING 
8786: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8787: LD_INT 0
8789: PPUSH
8790: LD_INT 3
8792: PPUSH
8793: LD_EXP 25
8797: PPUSH
8798: LD_EXP 26
8802: PPUSH
8803: CALL_OW 12
8807: PPUSH
8808: CALL_OW 380
// un = CreateHuman ;
8812: LD_ADDR_VAR 0 10
8816: PUSH
8817: CALL_OW 44
8821: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8822: LD_VAR 0 10
8826: PPUSH
8827: LD_VAR 0 12
8831: PPUSH
8832: CALL_OW 52
// defenders_list = defenders_list ^ un ;
8836: LD_ADDR_EXP 32
8840: PUSH
8841: LD_EXP 32
8845: PUSH
8846: LD_VAR 0 10
8850: ADD
8851: ST_TO_ADDR
// end ;
8852: GO 8646
8854: POP
8855: POP
// end ;
8856: LD_VAR 0 7
8860: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
8861: LD_INT 0
8863: PPUSH
8864: PPUSH
8865: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
8866: LD_VAR 0 2
8870: PPUSH
8871: LD_INT 22
8873: PUSH
8874: LD_VAR 0 1
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: EMPTY
8884: LIST
8885: PPUSH
8886: CALL_OW 70
8890: PUSH
8891: LD_INT 0
8893: EQUAL
8894: PUSH
8895: LD_EXP 32
8899: PUSH
8900: LD_INT 0
8902: GREATER
8903: AND
8904: IFFALSE 8933
// begin ComMoveXY ( defenders_list , 65 , 68 ) ;
8906: LD_EXP 32
8910: PPUSH
8911: LD_INT 65
8913: PPUSH
8914: LD_INT 68
8916: PPUSH
8917: CALL_OW 111
// SetFuel ( defenders_list , 100 ) ;
8921: LD_EXP 32
8925: PPUSH
8926: LD_INT 100
8928: PPUSH
8929: CALL_OW 240
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
8933: LD_VAR 0 2
8937: PPUSH
8938: LD_INT 22
8940: PUSH
8941: LD_VAR 0 1
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PUSH
8950: EMPTY
8951: LIST
8952: PPUSH
8953: CALL_OW 70
8957: PUSH
8958: LD_INT 0
8960: GREATER
8961: PUSH
8962: LD_EXP 32
8966: PUSH
8967: LD_INT 0
8969: GREATER
8970: AND
8971: IFFALSE 9050
// ComAgressiveMove ( defenders_list , GetX ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) ) ;
8973: LD_EXP 32
8977: PPUSH
8978: LD_VAR 0 2
8982: PPUSH
8983: LD_INT 22
8985: PUSH
8986: LD_VAR 0 1
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: EMPTY
8996: LIST
8997: PPUSH
8998: CALL_OW 70
9002: PUSH
9003: LD_INT 1
9005: ARRAY
9006: PPUSH
9007: CALL_OW 250
9011: PPUSH
9012: LD_VAR 0 2
9016: PPUSH
9017: LD_INT 22
9019: PUSH
9020: LD_VAR 0 1
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: EMPTY
9030: LIST
9031: PPUSH
9032: CALL_OW 70
9036: PUSH
9037: LD_INT 1
9039: ARRAY
9040: PPUSH
9041: CALL_OW 251
9045: PPUSH
9046: CALL_OW 114
// end ;
9050: LD_VAR 0 3
9054: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9055: LD_INT 0
9057: PPUSH
9058: PPUSH
9059: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9060: LD_INT 22
9062: PUSH
9063: LD_VAR 0 1
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 21
9074: PUSH
9075: LD_INT 2
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PPUSH
9086: CALL_OW 69
9090: PUSH
9091: LD_VAR 0 3
9095: LESSEQUAL
9096: IFFALSE 9204
// begin for i = 1 to vehCount do
9098: LD_ADDR_VAR 0 9
9102: PUSH
9103: DOUBLE
9104: LD_INT 1
9106: DEC
9107: ST_TO_ADDR
9108: LD_VAR 0 3
9112: PUSH
9113: FOR_TO
9114: IFFALSE 9202
// begin weapon = weaponTab [ i ] ;
9116: LD_ADDR_VAR 0 10
9120: PUSH
9121: LD_VAR 0 4
9125: PUSH
9126: LD_VAR 0 9
9130: ARRAY
9131: ST_TO_ADDR
// if weapon = 46 then
9132: LD_VAR 0 10
9136: PUSH
9137: LD_INT 46
9139: EQUAL
9140: IFFALSE 9171
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9142: LD_VAR 0 2
9146: PPUSH
9147: LD_INT 24
9149: PPUSH
9150: LD_VAR 0 5
9154: PPUSH
9155: LD_VAR 0 6
9159: PPUSH
9160: LD_VAR 0 10
9164: PPUSH
9165: CALL_OW 185
// end else
9169: GO 9200
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9171: LD_VAR 0 2
9175: PPUSH
9176: LD_VAR 0 7
9180: PPUSH
9181: LD_VAR 0 5
9185: PPUSH
9186: LD_VAR 0 6
9190: PPUSH
9191: LD_VAR 0 10
9195: PPUSH
9196: CALL_OW 185
// end ; end ;
9200: GO 9113
9202: POP
9203: POP
// end ; end ;
9204: LD_VAR 0 8
9208: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9209: LD_INT 0
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9215: LD_ADDR_VAR 0 8
9219: PUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 21
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 3
9244: PUSH
9245: LD_INT 24
9247: PUSH
9248: LD_INT 650
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: PPUSH
9264: CALL_OW 69
9268: ST_TO_ADDR
// if damageVehicles > 0 then
9269: LD_VAR 0 8
9273: PUSH
9274: LD_INT 0
9276: GREATER
9277: IFFALSE 9298
// ComMoveXY ( damageVehicles , repX , repY ) ;
9279: LD_VAR 0 8
9283: PPUSH
9284: LD_VAR 0 3
9288: PPUSH
9289: LD_VAR 0 4
9293: PPUSH
9294: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9298: LD_VAR 0 8
9302: PPUSH
9303: LD_INT 95
9305: PUSH
9306: LD_VAR 0 2
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: PUSH
9315: LD_INT 3
9317: PUSH
9318: LD_INT 58
9320: PUSH
9321: EMPTY
9322: LIST
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PPUSH
9332: CALL_OW 72
9336: PUSH
9337: LD_INT 0
9339: GREATER
9340: IFFALSE 9407
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9342: LD_ADDR_VAR 0 6
9346: PUSH
9347: LD_VAR 0 8
9351: PPUSH
9352: LD_INT 95
9354: PUSH
9355: LD_VAR 0 2
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: LD_INT 3
9366: PUSH
9367: LD_INT 58
9369: PUSH
9370: EMPTY
9371: LIST
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PPUSH
9381: CALL_OW 72
9385: PUSH
9386: FOR_IN
9387: IFFALSE 9405
// ComExitVehicle ( UnitsInside ( i ) ) ;
9389: LD_VAR 0 6
9393: PPUSH
9394: CALL_OW 313
9398: PPUSH
9399: CALL_OW 121
9403: GO 9386
9405: POP
9406: POP
// end ;
9407: LD_VAR 0 5
9411: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
9412: LD_INT 0
9414: PPUSH
9415: PPUSH
9416: PPUSH
9417: PPUSH
9418: PPUSH
9419: PPUSH
9420: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
9421: LD_ADDR_VAR 0 8
9425: PUSH
9426: LD_INT 22
9428: PUSH
9429: LD_VAR 0 1
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 21
9440: PUSH
9441: LD_INT 2
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: LD_INT 24
9450: PUSH
9451: LD_INT 250
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 3
9460: PUSH
9461: LD_INT 58
9463: PUSH
9464: EMPTY
9465: LIST
9466: PUSH
9467: LD_INT 2
9469: PUSH
9470: LD_INT 34
9472: PUSH
9473: LD_INT 43
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 34
9482: PUSH
9483: LD_INT 44
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: LD_INT 34
9492: PUSH
9493: LD_INT 46
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: LIST
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PPUSH
9517: CALL_OW 69
9521: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
9522: LD_INT 22
9524: PUSH
9525: LD_VAR 0 1
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PUSH
9534: LD_INT 21
9536: PUSH
9537: LD_INT 2
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: PUSH
9544: LD_INT 24
9546: PUSH
9547: LD_INT 1000
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PUSH
9554: LD_INT 3
9556: PUSH
9557: LD_INT 58
9559: PUSH
9560: EMPTY
9561: LIST
9562: PUSH
9563: LD_INT 2
9565: PUSH
9566: LD_INT 34
9568: PUSH
9569: LD_INT 43
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 34
9578: PUSH
9579: LD_INT 44
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 34
9588: PUSH
9589: LD_INT 46
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: LIST
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: PPUSH
9613: CALL_OW 69
9617: PUSH
9618: LD_INT 5
9620: PUSH
9621: LD_INT 6
9623: PUSH
9624: LD_INT 7
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: LIST
9631: PUSH
9632: LD_OWVAR 67
9636: ARRAY
9637: GREATEREQUAL
9638: IFFALSE 10203
// repeat wait ( 0 0$1 ) ;
9640: LD_INT 35
9642: PPUSH
9643: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
9647: LD_ADDR_VAR 0 8
9651: PUSH
9652: LD_INT 22
9654: PUSH
9655: LD_VAR 0 1
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: LD_INT 21
9666: PUSH
9667: LD_INT 2
9669: PUSH
9670: EMPTY
9671: LIST
9672: LIST
9673: PUSH
9674: LD_INT 24
9676: PUSH
9677: LD_INT 250
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 2
9686: PUSH
9687: LD_INT 34
9689: PUSH
9690: LD_INT 43
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 34
9699: PUSH
9700: LD_INT 44
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 34
9709: PUSH
9710: LD_INT 46
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 3
9725: PUSH
9726: LD_INT 58
9728: PUSH
9729: EMPTY
9730: LIST
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: PPUSH
9743: CALL_OW 69
9747: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
9748: LD_INT 22
9750: PUSH
9751: LD_VAR 0 1
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: PUSH
9760: LD_INT 95
9762: PUSH
9763: LD_VAR 0 2
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PPUSH
9776: CALL_OW 69
9780: NOT
9781: PUSH
9782: LD_VAR 0 11
9786: PUSH
9787: LD_INT 0
9789: EQUAL
9790: AND
9791: IFFALSE 9846
// for i := 1 to wayX do
9793: LD_ADDR_VAR 0 6
9797: PUSH
9798: DOUBLE
9799: LD_INT 1
9801: DEC
9802: ST_TO_ADDR
9803: LD_VAR 0 3
9807: PUSH
9808: FOR_TO
9809: IFFALSE 9844
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
9811: LD_VAR 0 8
9815: PPUSH
9816: LD_VAR 0 3
9820: PUSH
9821: LD_VAR 0 6
9825: ARRAY
9826: PPUSH
9827: LD_VAR 0 4
9831: PUSH
9832: LD_VAR 0 6
9836: ARRAY
9837: PPUSH
9838: CALL_OW 114
9842: GO 9808
9844: POP
9845: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
9846: LD_INT 22
9848: PUSH
9849: LD_VAR 0 1
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 95
9860: PUSH
9861: LD_VAR 0 2
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PPUSH
9874: CALL_OW 69
9878: IFFALSE 10102
// begin seeEnemy = 1 ;
9880: LD_ADDR_VAR 0 11
9884: PUSH
9885: LD_INT 1
9887: ST_TO_ADDR
// for j in vehiclesOK do
9888: LD_ADDR_VAR 0 7
9892: PUSH
9893: LD_VAR 0 8
9897: PUSH
9898: FOR_IN
9899: IFFALSE 10100
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9901: LD_ADDR_VAR 0 9
9905: PUSH
9906: LD_INT 81
9908: PUSH
9909: LD_VAR 0 1
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: LD_INT 101
9920: PUSH
9921: LD_INT 1
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PPUSH
9932: CALL_OW 69
9936: PPUSH
9937: LD_VAR 0 7
9941: PPUSH
9942: CALL_OW 74
9946: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9947: LD_ADDR_VAR 0 10
9951: PUSH
9952: LD_INT 81
9954: PUSH
9955: LD_VAR 0 1
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: LD_INT 101
9966: PUSH
9967: LD_INT 1
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PUSH
9974: LD_INT 2
9976: PUSH
9977: LD_INT 59
9979: PUSH
9980: EMPTY
9981: LIST
9982: PUSH
9983: LD_INT 21
9985: PUSH
9986: LD_INT 1
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 21
9995: PUSH
9996: LD_INT 2
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: PUSH
10014: EMPTY
10015: LIST
10016: PPUSH
10017: CALL_OW 69
10021: PPUSH
10022: LD_VAR 0 7
10026: PPUSH
10027: CALL_OW 74
10031: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10032: LD_VAR 0 7
10036: PPUSH
10037: LD_VAR 0 9
10041: PPUSH
10042: CALL_OW 296
10046: PUSH
10047: LD_INT 8
10049: PLUS
10050: PUSH
10051: LD_VAR 0 7
10055: PPUSH
10056: LD_VAR 0 10
10060: PPUSH
10061: CALL_OW 296
10065: LESS
10066: IFFALSE 10084
// ComAttackUnit ( j , target1 ) else
10068: LD_VAR 0 7
10072: PPUSH
10073: LD_VAR 0 9
10077: PPUSH
10078: CALL_OW 115
10082: GO 10098
// ComAttackUnit ( j , target2 ) ;
10084: LD_VAR 0 7
10088: PPUSH
10089: LD_VAR 0 10
10093: PPUSH
10094: CALL_OW 115
// end ;
10098: GO 9898
10100: POP
10101: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10102: LD_INT 22
10104: PUSH
10105: LD_VAR 0 1
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 21
10116: PUSH
10117: LD_INT 2
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 24
10126: PUSH
10127: LD_INT 250
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: LD_INT 2
10136: PUSH
10137: LD_INT 34
10139: PUSH
10140: LD_INT 43
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PUSH
10147: LD_INT 34
10149: PUSH
10150: LD_INT 44
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 34
10159: PUSH
10160: LD_INT 46
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: PUSH
10173: LD_INT 3
10175: PUSH
10176: LD_INT 58
10178: PUSH
10179: EMPTY
10180: LIST
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: PPUSH
10193: CALL_OW 69
10197: PUSH
10198: LD_INT 0
10200: EQUAL
10201: IFFALSE 9640
// seeEnemy = 0 ;
10203: LD_ADDR_VAR 0 11
10207: PUSH
10208: LD_INT 0
10210: ST_TO_ADDR
// end ;
10211: LD_VAR 0 5
10215: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10216: LD_INT 0
10218: PPUSH
10219: PPUSH
10220: PPUSH
10221: PPUSH
10222: PPUSH
10223: PPUSH
// repeat wait ( 0 0$1 ) ;
10224: LD_INT 35
10226: PPUSH
10227: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10231: LD_ADDR_VAR 0 7
10235: PUSH
10236: LD_INT 22
10238: PUSH
10239: LD_VAR 0 1
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PUSH
10248: LD_INT 21
10250: PUSH
10251: LD_INT 2
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PUSH
10258: LD_INT 24
10260: PUSH
10261: LD_INT 651
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: LIST
10272: PPUSH
10273: CALL_OW 69
10277: ST_TO_ADDR
// for j in vehiclesOK do
10278: LD_ADDR_VAR 0 4
10282: PUSH
10283: LD_VAR 0 7
10287: PUSH
10288: FOR_IN
10289: IFFALSE 10490
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10291: LD_ADDR_VAR 0 5
10295: PUSH
10296: LD_INT 81
10298: PUSH
10299: LD_VAR 0 1
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 101
10310: PUSH
10311: LD_INT 1
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PPUSH
10322: CALL_OW 69
10326: PPUSH
10327: LD_VAR 0 4
10331: PPUSH
10332: CALL_OW 74
10336: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10337: LD_ADDR_VAR 0 6
10341: PUSH
10342: LD_INT 81
10344: PUSH
10345: LD_VAR 0 1
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 101
10356: PUSH
10357: LD_INT 1
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 2
10366: PUSH
10367: LD_INT 59
10369: PUSH
10370: EMPTY
10371: LIST
10372: PUSH
10373: LD_INT 21
10375: PUSH
10376: LD_INT 1
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 21
10385: PUSH
10386: LD_INT 2
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: PPUSH
10407: CALL_OW 69
10411: PPUSH
10412: LD_VAR 0 4
10416: PPUSH
10417: CALL_OW 74
10421: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10422: LD_VAR 0 4
10426: PPUSH
10427: LD_VAR 0 5
10431: PPUSH
10432: CALL_OW 296
10436: PUSH
10437: LD_INT 8
10439: PLUS
10440: PUSH
10441: LD_VAR 0 4
10445: PPUSH
10446: LD_VAR 0 6
10450: PPUSH
10451: CALL_OW 296
10455: LESS
10456: IFFALSE 10474
// ComAttackUnit ( j , target1 ) else
10458: LD_VAR 0 4
10462: PPUSH
10463: LD_VAR 0 5
10467: PPUSH
10468: CALL_OW 115
10472: GO 10488
// ComAttackUnit ( j , target2 ) ;
10474: LD_VAR 0 4
10478: PPUSH
10479: LD_VAR 0 6
10483: PPUSH
10484: CALL_OW 115
// end ;
10488: GO 10288
10490: POP
10491: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
10492: LD_INT 22
10494: PUSH
10495: LD_VAR 0 1
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 21
10506: PUSH
10507: LD_INT 2
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 24
10516: PUSH
10517: LD_INT 250
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: PPUSH
10529: CALL_OW 69
10533: PUSH
10534: LD_INT 0
10536: EQUAL
10537: IFFALSE 10224
// end ;
10539: LD_VAR 0 2
10543: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
10544: LD_INT 0
10546: PPUSH
10547: PPUSH
10548: PPUSH
10549: PPUSH
10550: PPUSH
10551: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
10552: LD_ADDR_VAR 0 8
10556: PUSH
10557: LD_VAR 0 2
10561: PPUSH
10562: CALL_OW 313
10566: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
10567: LD_ADDR_VAR 0 9
10571: PUSH
10572: LD_VAR 0 3
10576: PPUSH
10577: LD_INT 22
10579: PUSH
10580: LD_VAR 0 1
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 25
10591: PUSH
10592: LD_INT 2
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 24
10601: PUSH
10602: LD_INT 750
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 3
10611: PUSH
10612: LD_INT 54
10614: PUSH
10615: EMPTY
10616: LIST
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: PPUSH
10628: CALL_OW 70
10632: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10633: LD_ADDR_VAR 0 6
10637: PUSH
10638: LD_VAR 0 3
10642: PPUSH
10643: LD_INT 22
10645: PUSH
10646: LD_VAR 0 1
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 21
10657: PUSH
10658: LD_INT 3
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: LD_INT 3
10667: PUSH
10668: LD_INT 24
10670: PUSH
10671: LD_INT 1000
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: PPUSH
10690: CALL_OW 70
10694: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
10695: LD_VAR 0 6
10699: NOT
10700: PUSH
10701: LD_INT 22
10703: PUSH
10704: LD_VAR 0 1
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PUSH
10713: LD_INT 25
10715: PUSH
10716: LD_INT 2
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 24
10725: PUSH
10726: LD_INT 250
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: LIST
10737: PPUSH
10738: CALL_OW 69
10742: NOT
10743: AND
10744: IFFALSE 10748
// exit ;
10746: GO 10945
// if buildings_list > 0 and engineerOkInside then
10748: LD_VAR 0 6
10752: PUSH
10753: LD_INT 0
10755: GREATER
10756: PUSH
10757: LD_VAR 0 8
10761: AND
10762: IFFALSE 10788
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
10764: LD_VAR 0 8
10768: PPUSH
10769: LD_INT 25
10771: PUSH
10772: LD_INT 2
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PPUSH
10779: CALL_OW 72
10783: PPUSH
10784: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
10788: LD_VAR 0 6
10792: PUSH
10793: LD_INT 0
10795: GREATER
10796: PUSH
10797: LD_VAR 0 9
10801: PUSH
10802: LD_INT 0
10804: GREATER
10805: AND
10806: IFFALSE 10826
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
10808: LD_VAR 0 9
10812: PPUSH
10813: LD_VAR 0 6
10817: PUSH
10818: LD_INT 1
10820: ARRAY
10821: PPUSH
10822: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
10826: LD_VAR 0 6
10830: PUSH
10831: LD_INT 0
10833: EQUAL
10834: PUSH
10835: LD_VAR 0 4
10839: PUSH
10840: LD_INT 0
10842: EQUAL
10843: AND
10844: PUSH
10845: LD_VAR 0 9
10849: PUSH
10850: LD_INT 0
10852: GREATER
10853: AND
10854: IFFALSE 10870
// ComEnterUnit ( engineerOkOutside , building ) ;
10856: LD_VAR 0 9
10860: PPUSH
10861: LD_VAR 0 2
10865: PPUSH
10866: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10870: LD_VAR 0 9
10874: PUSH
10875: LD_INT 0
10877: GREATER
10878: PUSH
10879: LD_VAR 0 6
10883: PUSH
10884: LD_INT 0
10886: EQUAL
10887: AND
10888: PUSH
10889: LD_VAR 0 4
10893: PUSH
10894: LD_INT 0
10896: GREATER
10897: AND
10898: IFFALSE 10945
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10900: LD_VAR 0 9
10904: PPUSH
10905: LD_VAR 0 4
10909: PUSH
10910: LD_INT 1
10912: ARRAY
10913: PPUSH
10914: LD_VAR 0 4
10918: PUSH
10919: LD_INT 2
10921: ARRAY
10922: PPUSH
10923: LD_VAR 0 4
10927: PUSH
10928: LD_INT 3
10930: ARRAY
10931: PPUSH
10932: LD_VAR 0 4
10936: PUSH
10937: LD_INT 4
10939: ARRAY
10940: PPUSH
10941: CALL_OW 145
// end ;
10945: LD_VAR 0 5
10949: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10950: LD_INT 0
10952: PPUSH
10953: PPUSH
10954: PPUSH
10955: PPUSH
10956: PPUSH
10957: PPUSH
10958: PPUSH
10959: PPUSH
10960: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
10961: LD_ADDR_VAR 0 6
10965: PUSH
10966: LD_INT 22
10968: PUSH
10969: LD_VAR 0 1
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PUSH
10978: LD_INT 25
10980: PUSH
10981: LD_INT 4
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: LD_INT 23
10990: PUSH
10991: LD_INT 2
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 24
11000: PUSH
11001: LD_INT 251
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: PPUSH
11014: CALL_OW 69
11018: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11019: LD_ADDR_VAR 0 7
11023: PUSH
11024: LD_VAR 0 3
11028: PPUSH
11029: LD_INT 22
11031: PUSH
11032: LD_VAR 0 1
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 23
11043: PUSH
11044: LD_INT 2
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 25
11053: PUSH
11054: LD_INT 4
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 50
11063: PUSH
11064: EMPTY
11065: LIST
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: PPUSH
11073: CALL_OW 70
11077: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11078: LD_ADDR_VAR 0 10
11082: PUSH
11083: LD_VAR 0 3
11087: PPUSH
11088: LD_INT 22
11090: PUSH
11091: LD_VAR 0 1
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PUSH
11100: LD_INT 21
11102: PUSH
11103: LD_INT 1
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: LD_INT 3
11112: PUSH
11113: LD_INT 25
11115: PUSH
11116: LD_INT 3
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 3
11129: PUSH
11130: LD_INT 24
11132: PUSH
11133: LD_INT 750
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: PPUSH
11150: CALL_OW 70
11154: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11155: LD_ADDR_VAR 0 11
11159: PUSH
11160: LD_VAR 0 2
11164: PPUSH
11165: LD_INT 22
11167: PUSH
11168: LD_VAR 0 1
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 21
11179: PUSH
11180: LD_INT 1
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 3
11189: PUSH
11190: LD_INT 25
11192: PUSH
11193: LD_INT 3
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: LD_INT 3
11206: PUSH
11207: LD_INT 24
11209: PUSH
11210: LD_INT 1000
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: PPUSH
11227: CALL_OW 70
11231: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11232: LD_VAR 0 10
11236: NOT
11237: PUSH
11238: LD_VAR 0 11
11242: NOT
11243: AND
11244: PUSH
11245: LD_VAR 0 6
11249: NOT
11250: AND
11251: IFFALSE 11255
// exit ;
11253: GO 11489
// if damageUnits > 0 and sci_list > 0 then
11255: LD_VAR 0 10
11259: PUSH
11260: LD_INT 0
11262: GREATER
11263: PUSH
11264: LD_VAR 0 6
11268: PUSH
11269: LD_INT 0
11271: GREATER
11272: AND
11273: IFFALSE 11289
// ComMoveToArea ( damageUnits , healArea ) ;
11275: LD_VAR 0 10
11279: PPUSH
11280: LD_VAR 0 2
11284: PPUSH
11285: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11289: LD_VAR 0 11
11293: PUSH
11294: LD_INT 0
11296: GREATER
11297: PUSH
11298: LD_VAR 0 6
11302: PUSH
11303: LD_INT 0
11305: GREATER
11306: AND
11307: IFFALSE 11318
// ComExitBuilding ( sci_list ) ;
11309: LD_VAR 0 6
11313: PPUSH
11314: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11318: LD_VAR 0 11
11322: PUSH
11323: LD_INT 0
11325: GREATER
11326: PUSH
11327: LD_VAR 0 7
11331: PUSH
11332: LD_INT 0
11334: GREATER
11335: AND
11336: IFFALSE 11356
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11338: LD_VAR 0 7
11342: PPUSH
11343: LD_VAR 0 11
11347: PUSH
11348: LD_INT 1
11350: ARRAY
11351: PPUSH
11352: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11356: LD_VAR 0 10
11360: PUSH
11361: LD_INT 0
11363: EQUAL
11364: PUSH
11365: LD_VAR 0 11
11369: PUSH
11370: LD_INT 0
11372: EQUAL
11373: AND
11374: PUSH
11375: LD_VAR 0 7
11379: PUSH
11380: LD_INT 0
11382: GREATER
11383: AND
11384: IFFALSE 11489
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
11386: LD_ADDR_VAR 0 12
11390: PUSH
11391: LD_INT 22
11393: PUSH
11394: LD_VAR 0 1
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 21
11405: PUSH
11406: LD_INT 3
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: LD_INT 30
11415: PUSH
11416: LD_INT 8
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: LIST
11427: PPUSH
11428: CALL_OW 69
11432: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
11433: LD_ADDR_VAR 0 13
11437: PUSH
11438: LD_INT 1
11440: PPUSH
11441: LD_VAR 0 12
11445: PPUSH
11446: CALL_OW 12
11450: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
11451: LD_VAR 0 7
11455: PPUSH
11456: LD_INT 3
11458: PUSH
11459: LD_INT 60
11461: PUSH
11462: EMPTY
11463: LIST
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PPUSH
11469: CALL_OW 72
11473: PPUSH
11474: LD_VAR 0 12
11478: PUSH
11479: LD_VAR 0 13
11483: ARRAY
11484: PPUSH
11485: CALL_OW 120
// end ; end ;
11489: LD_VAR 0 5
11493: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11494: LD_INT 0
11496: PPUSH
11497: PPUSH
11498: PPUSH
11499: PPUSH
11500: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11501: LD_ADDR_VAR 0 6
11505: PUSH
11506: LD_INT 22
11508: PUSH
11509: LD_VAR 0 1
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 2
11520: PUSH
11521: LD_INT 30
11523: PUSH
11524: LD_INT 31
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 30
11533: PUSH
11534: LD_INT 32
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: LD_INT 30
11543: PUSH
11544: LD_INT 33
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 30
11553: PUSH
11554: LD_INT 4
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 30
11563: PUSH
11564: LD_INT 5
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PPUSH
11583: CALL_OW 69
11587: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11588: LD_ADDR_VAR 0 7
11592: PUSH
11593: LD_INT 22
11595: PUSH
11596: LD_VAR 0 2
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: PUSH
11605: LD_INT 21
11607: PUSH
11608: LD_INT 3
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 58
11617: PUSH
11618: EMPTY
11619: LIST
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: LIST
11625: PPUSH
11626: CALL_OW 69
11630: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11631: LD_VAR 0 6
11635: PUSH
11636: LD_INT 0
11638: GREATER
11639: PUSH
11640: LD_VAR 0 7
11644: PUSH
11645: LD_INT 0
11647: GREATER
11648: AND
11649: IFFALSE 11719
// begin for i in turretsList do
11651: LD_ADDR_VAR 0 4
11655: PUSH
11656: LD_VAR 0 6
11660: PUSH
11661: FOR_IN
11662: IFFALSE 11717
// begin for j in enemyBuildings do
11664: LD_ADDR_VAR 0 5
11668: PUSH
11669: LD_VAR 0 7
11673: PUSH
11674: FOR_IN
11675: IFFALSE 11713
// begin if GetDistUnits ( i , j ) < 20 then
11677: LD_VAR 0 4
11681: PPUSH
11682: LD_VAR 0 5
11686: PPUSH
11687: CALL_OW 296
11691: PUSH
11692: LD_INT 20
11694: LESS
11695: IFFALSE 11711
// begin ComAttackUnit ( i , j ) ;
11697: LD_VAR 0 4
11701: PPUSH
11702: LD_VAR 0 5
11706: PPUSH
11707: CALL_OW 115
// end ; end ;
11711: GO 11674
11713: POP
11714: POP
// end ;
11715: GO 11661
11717: POP
11718: POP
// end ; end ;
11719: LD_VAR 0 3
11723: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
11724: LD_INT 0
11726: PPUSH
11727: PPUSH
11728: PPUSH
11729: PPUSH
11730: PPUSH
11731: PPUSH
11732: PPUSH
11733: PPUSH
11734: PPUSH
11735: PPUSH
11736: PPUSH
// for i = 1 to medicCount do
11737: LD_ADDR_VAR 0 14
11741: PUSH
11742: DOUBLE
11743: LD_INT 1
11745: DEC
11746: ST_TO_ADDR
11747: LD_VAR 0 7
11751: PUSH
11752: FOR_TO
11753: IFFALSE 11835
// begin uc_side = side ;
11755: LD_ADDR_OWVAR 20
11759: PUSH
11760: LD_VAR 0 1
11764: ST_TO_ADDR
// uc_nation = nation ;
11765: LD_ADDR_OWVAR 21
11769: PUSH
11770: LD_VAR 0 2
11774: ST_TO_ADDR
// hc_name =  ;
11775: LD_ADDR_OWVAR 26
11779: PUSH
11780: LD_STRING 
11782: ST_TO_ADDR
// hc_gallery =  ;
11783: LD_ADDR_OWVAR 33
11787: PUSH
11788: LD_STRING 
11790: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
11791: LD_INT 0
11793: PPUSH
11794: LD_INT 4
11796: PPUSH
11797: LD_VAR 0 8
11801: PPUSH
11802: CALL_OW 380
// un = CreateHuman ;
11806: LD_ADDR_VAR 0 16
11810: PUSH
11811: CALL_OW 44
11815: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11816: LD_VAR 0 16
11820: PPUSH
11821: LD_VAR 0 9
11825: PPUSH
11826: LD_INT 0
11828: PPUSH
11829: CALL_OW 49
// end ;
11833: GO 11752
11835: POP
11836: POP
// for i = 1 to soldierCount do
11837: LD_ADDR_VAR 0 14
11841: PUSH
11842: DOUBLE
11843: LD_INT 1
11845: DEC
11846: ST_TO_ADDR
11847: LD_VAR 0 3
11851: PUSH
11852: FOR_TO
11853: IFFALSE 11935
// begin uc_side = side ;
11855: LD_ADDR_OWVAR 20
11859: PUSH
11860: LD_VAR 0 1
11864: ST_TO_ADDR
// uc_nation = nation ;
11865: LD_ADDR_OWVAR 21
11869: PUSH
11870: LD_VAR 0 2
11874: ST_TO_ADDR
// hc_name =  ;
11875: LD_ADDR_OWVAR 26
11879: PUSH
11880: LD_STRING 
11882: ST_TO_ADDR
// hc_gallery =  ;
11883: LD_ADDR_OWVAR 33
11887: PUSH
11888: LD_STRING 
11890: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
11891: LD_INT 0
11893: PPUSH
11894: LD_INT 1
11896: PPUSH
11897: LD_VAR 0 8
11901: PPUSH
11902: CALL_OW 380
// un = CreateHuman ;
11906: LD_ADDR_VAR 0 16
11910: PUSH
11911: CALL_OW 44
11915: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11916: LD_VAR 0 16
11920: PPUSH
11921: LD_VAR 0 9
11925: PPUSH
11926: LD_INT 0
11928: PPUSH
11929: CALL_OW 49
// end ;
11933: GO 11852
11935: POP
11936: POP
// for i = 1 to sniperCount do
11937: LD_ADDR_VAR 0 14
11941: PUSH
11942: DOUBLE
11943: LD_INT 1
11945: DEC
11946: ST_TO_ADDR
11947: LD_VAR 0 4
11951: PUSH
11952: FOR_TO
11953: IFFALSE 12035
// begin uc_side = side ;
11955: LD_ADDR_OWVAR 20
11959: PUSH
11960: LD_VAR 0 1
11964: ST_TO_ADDR
// uc_nation = nation ;
11965: LD_ADDR_OWVAR 21
11969: PUSH
11970: LD_VAR 0 2
11974: ST_TO_ADDR
// hc_name =  ;
11975: LD_ADDR_OWVAR 26
11979: PUSH
11980: LD_STRING 
11982: ST_TO_ADDR
// hc_gallery =  ;
11983: LD_ADDR_OWVAR 33
11987: PUSH
11988: LD_STRING 
11990: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
11991: LD_INT 0
11993: PPUSH
11994: LD_INT 5
11996: PPUSH
11997: LD_VAR 0 8
12001: PPUSH
12002: CALL_OW 380
// un = CreateHuman ;
12006: LD_ADDR_VAR 0 16
12010: PUSH
12011: CALL_OW 44
12015: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12016: LD_VAR 0 16
12020: PPUSH
12021: LD_VAR 0 9
12025: PPUSH
12026: LD_INT 0
12028: PPUSH
12029: CALL_OW 49
// end ;
12033: GO 11952
12035: POP
12036: POP
// for i = 1 to bazookCount do
12037: LD_ADDR_VAR 0 14
12041: PUSH
12042: DOUBLE
12043: LD_INT 1
12045: DEC
12046: ST_TO_ADDR
12047: LD_VAR 0 5
12051: PUSH
12052: FOR_TO
12053: IFFALSE 12135
// begin uc_side = side ;
12055: LD_ADDR_OWVAR 20
12059: PUSH
12060: LD_VAR 0 1
12064: ST_TO_ADDR
// uc_nation = nation ;
12065: LD_ADDR_OWVAR 21
12069: PUSH
12070: LD_VAR 0 2
12074: ST_TO_ADDR
// hc_name =  ;
12075: LD_ADDR_OWVAR 26
12079: PUSH
12080: LD_STRING 
12082: ST_TO_ADDR
// hc_gallery =  ;
12083: LD_ADDR_OWVAR 33
12087: PUSH
12088: LD_STRING 
12090: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12091: LD_INT 0
12093: PPUSH
12094: LD_INT 9
12096: PPUSH
12097: LD_VAR 0 8
12101: PPUSH
12102: CALL_OW 380
// un = CreateHuman ;
12106: LD_ADDR_VAR 0 16
12110: PUSH
12111: CALL_OW 44
12115: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12116: LD_VAR 0 16
12120: PPUSH
12121: LD_VAR 0 9
12125: PPUSH
12126: LD_INT 0
12128: PPUSH
12129: CALL_OW 49
// end ;
12133: GO 12052
12135: POP
12136: POP
// for i = 1 to mortalCount do
12137: LD_ADDR_VAR 0 14
12141: PUSH
12142: DOUBLE
12143: LD_INT 1
12145: DEC
12146: ST_TO_ADDR
12147: LD_VAR 0 6
12151: PUSH
12152: FOR_TO
12153: IFFALSE 12235
// begin uc_side = side ;
12155: LD_ADDR_OWVAR 20
12159: PUSH
12160: LD_VAR 0 1
12164: ST_TO_ADDR
// uc_nation = nation ;
12165: LD_ADDR_OWVAR 21
12169: PUSH
12170: LD_VAR 0 2
12174: ST_TO_ADDR
// hc_name =  ;
12175: LD_ADDR_OWVAR 26
12179: PUSH
12180: LD_STRING 
12182: ST_TO_ADDR
// hc_gallery =  ;
12183: LD_ADDR_OWVAR 33
12187: PUSH
12188: LD_STRING 
12190: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12191: LD_INT 0
12193: PPUSH
12194: LD_INT 8
12196: PPUSH
12197: LD_VAR 0 8
12201: PPUSH
12202: CALL_OW 380
// un = CreateHuman ;
12206: LD_ADDR_VAR 0 16
12210: PUSH
12211: CALL_OW 44
12215: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12216: LD_VAR 0 16
12220: PPUSH
12221: LD_VAR 0 9
12225: PPUSH
12226: LD_INT 0
12228: PPUSH
12229: CALL_OW 49
// end ;
12233: GO 12152
12235: POP
12236: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12237: LD_ADDR_VAR 0 19
12241: PUSH
12242: LD_INT 22
12244: PUSH
12245: LD_VAR 0 1
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: LD_INT 2
12256: PUSH
12257: LD_INT 25
12259: PUSH
12260: LD_INT 1
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 25
12269: PUSH
12270: LD_INT 5
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 25
12279: PUSH
12280: LD_INT 8
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 25
12289: PUSH
12290: LD_INT 9
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PPUSH
12308: CALL_OW 69
12312: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12313: LD_ADDR_VAR 0 18
12317: PUSH
12318: LD_INT 22
12320: PUSH
12321: LD_VAR 0 1
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PUSH
12330: LD_INT 25
12332: PUSH
12333: LD_INT 4
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PPUSH
12344: CALL_OW 69
12348: ST_TO_ADDR
// for i in medic_list do
12349: LD_ADDR_VAR 0 14
12353: PUSH
12354: LD_VAR 0 18
12358: PUSH
12359: FOR_IN
12360: IFFALSE 12378
// ComMoveToArea ( i , healArea ) ;
12362: LD_VAR 0 14
12366: PPUSH
12367: LD_VAR 0 10
12371: PPUSH
12372: CALL_OW 113
12376: GO 12359
12378: POP
12379: POP
// if strategy = 1 then
12380: LD_VAR 0 12
12384: PUSH
12385: LD_INT 1
12387: EQUAL
12388: IFFALSE 12934
// begin repeat wait ( 0 0$3 ) ;
12390: LD_INT 105
12392: PPUSH
12393: CALL_OW 67
// for i in soldiersOK_list do
12397: LD_ADDR_VAR 0 14
12401: PUSH
12402: LD_VAR 0 19
12406: PUSH
12407: FOR_IN
12408: IFFALSE 12472
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12410: LD_VAR 0 14
12414: PPUSH
12415: LD_INT 91
12417: PPUSH
12418: LD_INT 63
12420: PPUSH
12421: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
12425: LD_VAR 0 14
12429: PPUSH
12430: LD_INT 101
12432: PPUSH
12433: LD_INT 53
12435: PPUSH
12436: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
12440: LD_VAR 0 14
12444: PPUSH
12445: LD_INT 75
12447: PPUSH
12448: LD_INT 23
12450: PPUSH
12451: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
12455: LD_VAR 0 14
12459: PPUSH
12460: LD_INT 78
12462: PPUSH
12463: LD_INT 8
12465: PPUSH
12466: CALL_OW 174
// end ;
12470: GO 12407
12472: POP
12473: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
12474: LD_INT 12
12476: PPUSH
12477: LD_INT 22
12479: PUSH
12480: LD_VAR 0 1
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PPUSH
12489: CALL_OW 70
12493: PUSH
12494: LD_INT 2
12496: GREATER
12497: IFFALSE 12390
// repeat wait ( 0 0$1 ) ;
12499: LD_INT 35
12501: PPUSH
12502: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12506: LD_ADDR_VAR 0 17
12510: PUSH
12511: LD_INT 22
12513: PUSH
12514: LD_VAR 0 1
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 1
12525: PUSH
12526: LD_INT 3
12528: PUSH
12529: LD_INT 24
12531: PUSH
12532: LD_INT 550
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 24
12545: PUSH
12546: LD_INT 250
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PPUSH
12562: CALL_OW 69
12566: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12567: LD_ADDR_VAR 0 19
12571: PUSH
12572: LD_INT 22
12574: PUSH
12575: LD_VAR 0 1
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 2
12586: PUSH
12587: LD_INT 25
12589: PUSH
12590: LD_INT 1
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 25
12599: PUSH
12600: LD_INT 5
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 25
12609: PUSH
12610: LD_INT 8
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: LD_INT 25
12619: PUSH
12620: LD_INT 9
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: PUSH
12634: LD_INT 24
12636: PUSH
12637: LD_INT 1000
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: LIST
12648: PPUSH
12649: CALL_OW 69
12653: ST_TO_ADDR
// if medicCount > 0 then
12654: LD_VAR 0 7
12658: PUSH
12659: LD_INT 0
12661: GREATER
12662: IFFALSE 12736
// begin if damageUnit_list > 0 then
12664: LD_VAR 0 17
12668: PUSH
12669: LD_INT 0
12671: GREATER
12672: IFFALSE 12736
// begin for i in damageUnit_list do
12674: LD_ADDR_VAR 0 14
12678: PUSH
12679: LD_VAR 0 17
12683: PUSH
12684: FOR_IN
12685: IFFALSE 12734
// begin ComMoveToArea ( i , healArea ) ;
12687: LD_VAR 0 14
12691: PPUSH
12692: LD_VAR 0 10
12696: PPUSH
12697: CALL_OW 113
// for j in medic_list do
12701: LD_ADDR_VAR 0 15
12705: PUSH
12706: LD_VAR 0 18
12710: PUSH
12711: FOR_IN
12712: IFFALSE 12730
// AddComHeal ( j , i ) ;
12714: LD_VAR 0 15
12718: PPUSH
12719: LD_VAR 0 14
12723: PPUSH
12724: CALL_OW 188
12728: GO 12711
12730: POP
12731: POP
// end ;
12732: GO 12684
12734: POP
12735: POP
// end ; end ; for i in soldiersOK_list do
12736: LD_ADDR_VAR 0 14
12740: PUSH
12741: LD_VAR 0 19
12745: PUSH
12746: FOR_IN
12747: IFFALSE 12923
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12749: LD_ADDR_VAR 0 22
12753: PUSH
12754: LD_INT 22
12756: PUSH
12757: LD_VAR 0 11
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PPUSH
12766: CALL_OW 69
12770: PPUSH
12771: LD_VAR 0 14
12775: PPUSH
12776: CALL_OW 74
12780: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12781: LD_ADDR_VAR 0 23
12785: PUSH
12786: LD_INT 22
12788: PUSH
12789: LD_VAR 0 11
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 2
12800: PUSH
12801: LD_INT 59
12803: PUSH
12804: EMPTY
12805: LIST
12806: PUSH
12807: LD_INT 21
12809: PUSH
12810: LD_INT 1
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 21
12819: PUSH
12820: LD_INT 2
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: EMPTY
12838: LIST
12839: PPUSH
12840: CALL_OW 69
12844: PPUSH
12845: LD_VAR 0 14
12849: PPUSH
12850: CALL_OW 74
12854: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12855: LD_VAR 0 14
12859: PPUSH
12860: LD_VAR 0 22
12864: PPUSH
12865: CALL_OW 296
12869: PUSH
12870: LD_INT 6
12872: PLUS
12873: PUSH
12874: LD_VAR 0 14
12878: PPUSH
12879: LD_VAR 0 23
12883: PPUSH
12884: CALL_OW 296
12888: LESS
12889: IFFALSE 12907
// begin ComAttackUnit ( i , target1 ) ;
12891: LD_VAR 0 14
12895: PPUSH
12896: LD_VAR 0 22
12900: PPUSH
12901: CALL_OW 115
// end else
12905: GO 12921
// begin ComAttackUnit ( i , target2 ) ;
12907: LD_VAR 0 14
12911: PPUSH
12912: LD_VAR 0 23
12916: PPUSH
12917: CALL_OW 115
// end ; end ;
12921: GO 12746
12923: POP
12924: POP
// until soldiersOK_list = [ ] ;
12925: LD_VAR 0 19
12929: PUSH
12930: EMPTY
12931: EQUAL
12932: IFFALSE 12499
// end ; if strategy = 2 then
12934: LD_VAR 0 12
12938: PUSH
12939: LD_INT 2
12941: EQUAL
12942: IFFALSE 13458
// begin repeat wait ( 0 0$1 ) ;
12944: LD_INT 35
12946: PPUSH
12947: CALL_OW 67
// for i in soldiersOK_list do
12951: LD_ADDR_VAR 0 14
12955: PUSH
12956: LD_VAR 0 19
12960: PUSH
12961: FOR_IN
12962: IFFALSE 12996
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12964: LD_VAR 0 14
12968: PPUSH
12969: LD_INT 91
12971: PPUSH
12972: LD_INT 63
12974: PPUSH
12975: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
12979: LD_VAR 0 14
12983: PPUSH
12984: LD_INT 75
12986: PPUSH
12987: LD_INT 33
12989: PPUSH
12990: CALL_OW 174
// end ;
12994: GO 12961
12996: POP
12997: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
12998: LD_INT 13
13000: PPUSH
13001: LD_INT 22
13003: PUSH
13004: LD_VAR 0 1
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PPUSH
13013: CALL_OW 70
13017: PUSH
13018: LD_INT 2
13020: GREATER
13021: IFFALSE 12944
// repeat wait ( 0 0$3 ) ;
13023: LD_INT 105
13025: PPUSH
13026: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13030: LD_ADDR_VAR 0 17
13034: PUSH
13035: LD_INT 22
13037: PUSH
13038: LD_VAR 0 1
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 1
13049: PUSH
13050: LD_INT 3
13052: PUSH
13053: LD_INT 24
13055: PUSH
13056: LD_INT 550
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: LD_INT 24
13069: PUSH
13070: LD_INT 250
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PPUSH
13086: CALL_OW 69
13090: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13091: LD_ADDR_VAR 0 19
13095: PUSH
13096: LD_INT 22
13098: PUSH
13099: LD_VAR 0 1
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: PUSH
13108: LD_INT 2
13110: PUSH
13111: LD_INT 25
13113: PUSH
13114: LD_INT 1
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: LD_INT 25
13123: PUSH
13124: LD_INT 5
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 25
13133: PUSH
13134: LD_INT 8
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 25
13143: PUSH
13144: LD_INT 9
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 24
13160: PUSH
13161: LD_INT 1000
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: PPUSH
13173: CALL_OW 69
13177: ST_TO_ADDR
// if medicCount > 0 then
13178: LD_VAR 0 7
13182: PUSH
13183: LD_INT 0
13185: GREATER
13186: IFFALSE 13260
// begin if damageUnit_list > 0 then
13188: LD_VAR 0 17
13192: PUSH
13193: LD_INT 0
13195: GREATER
13196: IFFALSE 13260
// begin for i in damageUnit_list do
13198: LD_ADDR_VAR 0 14
13202: PUSH
13203: LD_VAR 0 17
13207: PUSH
13208: FOR_IN
13209: IFFALSE 13258
// begin ComMoveToArea ( i , healArea ) ;
13211: LD_VAR 0 14
13215: PPUSH
13216: LD_VAR 0 10
13220: PPUSH
13221: CALL_OW 113
// for j in medic_list do
13225: LD_ADDR_VAR 0 15
13229: PUSH
13230: LD_VAR 0 18
13234: PUSH
13235: FOR_IN
13236: IFFALSE 13254
// AddComHeal ( j , i ) ;
13238: LD_VAR 0 15
13242: PPUSH
13243: LD_VAR 0 14
13247: PPUSH
13248: CALL_OW 188
13252: GO 13235
13254: POP
13255: POP
// end ;
13256: GO 13208
13258: POP
13259: POP
// end ; end ; for i in soldiersOK_list do
13260: LD_ADDR_VAR 0 14
13264: PUSH
13265: LD_VAR 0 19
13269: PUSH
13270: FOR_IN
13271: IFFALSE 13447
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13273: LD_ADDR_VAR 0 22
13277: PUSH
13278: LD_INT 22
13280: PUSH
13281: LD_VAR 0 11
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PPUSH
13290: CALL_OW 69
13294: PPUSH
13295: LD_VAR 0 14
13299: PPUSH
13300: CALL_OW 74
13304: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13305: LD_ADDR_VAR 0 23
13309: PUSH
13310: LD_INT 22
13312: PUSH
13313: LD_VAR 0 11
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 2
13324: PUSH
13325: LD_INT 59
13327: PUSH
13328: EMPTY
13329: LIST
13330: PUSH
13331: LD_INT 21
13333: PUSH
13334: LD_INT 1
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 21
13343: PUSH
13344: LD_INT 2
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: EMPTY
13362: LIST
13363: PPUSH
13364: CALL_OW 69
13368: PPUSH
13369: LD_VAR 0 14
13373: PPUSH
13374: CALL_OW 74
13378: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13379: LD_VAR 0 14
13383: PPUSH
13384: LD_VAR 0 22
13388: PPUSH
13389: CALL_OW 296
13393: PUSH
13394: LD_INT 6
13396: PLUS
13397: PUSH
13398: LD_VAR 0 14
13402: PPUSH
13403: LD_VAR 0 23
13407: PPUSH
13408: CALL_OW 296
13412: LESS
13413: IFFALSE 13431
// begin ComAttackUnit ( i , target1 ) ;
13415: LD_VAR 0 14
13419: PPUSH
13420: LD_VAR 0 22
13424: PPUSH
13425: CALL_OW 115
// end else
13429: GO 13445
// begin ComAttackUnit ( i , target2 ) ;
13431: LD_VAR 0 14
13435: PPUSH
13436: LD_VAR 0 23
13440: PPUSH
13441: CALL_OW 115
// end ; end ;
13445: GO 13270
13447: POP
13448: POP
// until soldiersOK_list = [ ] ;
13449: LD_VAR 0 19
13453: PUSH
13454: EMPTY
13455: EQUAL
13456: IFFALSE 13023
// end ; if strategy = 3 then
13458: LD_VAR 0 12
13462: PUSH
13463: LD_INT 3
13465: EQUAL
13466: IFFALSE 14012
// begin repeat wait ( 0 0$3 ) ;
13468: LD_INT 105
13470: PPUSH
13471: CALL_OW 67
// for i in soldiersOK_list do
13475: LD_ADDR_VAR 0 14
13479: PUSH
13480: LD_VAR 0 19
13484: PUSH
13485: FOR_IN
13486: IFFALSE 13550
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
13488: LD_VAR 0 14
13492: PPUSH
13493: LD_INT 63
13495: PPUSH
13496: LD_INT 71
13498: PPUSH
13499: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
13503: LD_VAR 0 14
13507: PPUSH
13508: LD_INT 35
13510: PPUSH
13511: LD_INT 44
13513: PPUSH
13514: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
13518: LD_VAR 0 14
13522: PPUSH
13523: LD_INT 23
13525: PPUSH
13526: LD_INT 18
13528: PPUSH
13529: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
13533: LD_VAR 0 14
13537: PPUSH
13538: LD_INT 26
13540: PPUSH
13541: LD_INT 12
13543: PPUSH
13544: CALL_OW 174
// end ;
13548: GO 13485
13550: POP
13551: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
13552: LD_INT 14
13554: PPUSH
13555: LD_INT 22
13557: PUSH
13558: LD_VAR 0 1
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PPUSH
13567: CALL_OW 70
13571: PUSH
13572: LD_INT 2
13574: GREATER
13575: IFFALSE 13468
// repeat wait ( 0 0$1 ) ;
13577: LD_INT 35
13579: PPUSH
13580: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13584: LD_ADDR_VAR 0 17
13588: PUSH
13589: LD_INT 22
13591: PUSH
13592: LD_VAR 0 1
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: LD_INT 3
13606: PUSH
13607: LD_INT 24
13609: PUSH
13610: LD_INT 550
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 24
13623: PUSH
13624: LD_INT 250
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: LIST
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PPUSH
13640: CALL_OW 69
13644: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13645: LD_ADDR_VAR 0 19
13649: PUSH
13650: LD_INT 22
13652: PUSH
13653: LD_VAR 0 1
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 2
13664: PUSH
13665: LD_INT 25
13667: PUSH
13668: LD_INT 1
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 25
13677: PUSH
13678: LD_INT 5
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 25
13687: PUSH
13688: LD_INT 8
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: LD_INT 25
13697: PUSH
13698: LD_INT 9
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 24
13714: PUSH
13715: LD_INT 1000
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: LIST
13726: PPUSH
13727: CALL_OW 69
13731: ST_TO_ADDR
// if medicCount > 0 then
13732: LD_VAR 0 7
13736: PUSH
13737: LD_INT 0
13739: GREATER
13740: IFFALSE 13814
// begin if damageUnit_list > 0 then
13742: LD_VAR 0 17
13746: PUSH
13747: LD_INT 0
13749: GREATER
13750: IFFALSE 13814
// begin for i in damageUnit_list do
13752: LD_ADDR_VAR 0 14
13756: PUSH
13757: LD_VAR 0 17
13761: PUSH
13762: FOR_IN
13763: IFFALSE 13812
// begin ComMoveToArea ( i , healArea ) ;
13765: LD_VAR 0 14
13769: PPUSH
13770: LD_VAR 0 10
13774: PPUSH
13775: CALL_OW 113
// for j in medic_list do
13779: LD_ADDR_VAR 0 15
13783: PUSH
13784: LD_VAR 0 18
13788: PUSH
13789: FOR_IN
13790: IFFALSE 13808
// AddComHeal ( j , i ) ;
13792: LD_VAR 0 15
13796: PPUSH
13797: LD_VAR 0 14
13801: PPUSH
13802: CALL_OW 188
13806: GO 13789
13808: POP
13809: POP
// end ;
13810: GO 13762
13812: POP
13813: POP
// end ; end ; for i in soldiersOK_list do
13814: LD_ADDR_VAR 0 14
13818: PUSH
13819: LD_VAR 0 19
13823: PUSH
13824: FOR_IN
13825: IFFALSE 14001
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13827: LD_ADDR_VAR 0 22
13831: PUSH
13832: LD_INT 22
13834: PUSH
13835: LD_VAR 0 11
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PPUSH
13844: CALL_OW 69
13848: PPUSH
13849: LD_VAR 0 14
13853: PPUSH
13854: CALL_OW 74
13858: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13859: LD_ADDR_VAR 0 23
13863: PUSH
13864: LD_INT 22
13866: PUSH
13867: LD_VAR 0 11
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: LD_INT 2
13878: PUSH
13879: LD_INT 59
13881: PUSH
13882: EMPTY
13883: LIST
13884: PUSH
13885: LD_INT 21
13887: PUSH
13888: LD_INT 1
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 21
13897: PUSH
13898: LD_INT 2
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: EMPTY
13916: LIST
13917: PPUSH
13918: CALL_OW 69
13922: PPUSH
13923: LD_VAR 0 14
13927: PPUSH
13928: CALL_OW 74
13932: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13933: LD_VAR 0 14
13937: PPUSH
13938: LD_VAR 0 22
13942: PPUSH
13943: CALL_OW 296
13947: PUSH
13948: LD_INT 6
13950: PLUS
13951: PUSH
13952: LD_VAR 0 14
13956: PPUSH
13957: LD_VAR 0 23
13961: PPUSH
13962: CALL_OW 296
13966: LESS
13967: IFFALSE 13985
// begin ComAttackUnit ( i , target1 ) ;
13969: LD_VAR 0 14
13973: PPUSH
13974: LD_VAR 0 22
13978: PPUSH
13979: CALL_OW 115
// end else
13983: GO 13999
// begin ComAttackUnit ( i , target2 ) ;
13985: LD_VAR 0 14
13989: PPUSH
13990: LD_VAR 0 23
13994: PPUSH
13995: CALL_OW 115
// end ; end ;
13999: GO 13824
14001: POP
14002: POP
// until soldiersOK_list = [ ] ;
14003: LD_VAR 0 19
14007: PUSH
14008: EMPTY
14009: EQUAL
14010: IFFALSE 13577
// end ; end ;
14012: LD_VAR 0 13
14016: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14017: LD_INT 0
14019: PPUSH
14020: PPUSH
14021: PPUSH
14022: PPUSH
14023: PPUSH
14024: PPUSH
14025: PPUSH
14026: PPUSH
14027: PPUSH
14028: PPUSH
14029: PPUSH
// amChassisTab = [ ] ;
14030: LD_ADDR_VAR 0 19
14034: PUSH
14035: EMPTY
14036: ST_TO_ADDR
// arChassisTab = [ ] ;
14037: LD_ADDR_VAR 0 18
14041: PUSH
14042: EMPTY
14043: ST_TO_ADDR
// ruChassisTab = [ ] ;
14044: LD_ADDR_VAR 0 17
14048: PUSH
14049: EMPTY
14050: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14051: LD_INT 35
14053: PPUSH
14054: CALL_OW 67
// if nation = 1 then
14058: LD_VAR 0 5
14062: PUSH
14063: LD_INT 1
14065: EQUAL
14066: IFFALSE 14557
// begin uc_side = side ;
14068: LD_ADDR_OWVAR 20
14072: PUSH
14073: LD_VAR 0 2
14077: ST_TO_ADDR
// uc_nation = nation ;
14078: LD_ADDR_OWVAR 21
14082: PUSH
14083: LD_VAR 0 5
14087: ST_TO_ADDR
// vc_engine = vehengine ;
14088: LD_ADDR_OWVAR 39
14092: PUSH
14093: LD_VAR 0 6
14097: ST_TO_ADDR
// vc_control = vehcontrol ;
14098: LD_ADDR_OWVAR 38
14102: PUSH
14103: LD_VAR 0 7
14107: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14108: LD_ADDR_OWVAR 40
14112: PUSH
14113: LD_VAR 0 10
14117: PUSH
14118: LD_INT 1
14120: PPUSH
14121: LD_VAR 0 10
14125: PPUSH
14126: CALL_OW 12
14130: ARRAY
14131: ST_TO_ADDR
// for j = 1 to AMWeapon do
14132: LD_ADDR_VAR 0 14
14136: PUSH
14137: DOUBLE
14138: LD_INT 1
14140: DEC
14141: ST_TO_ADDR
14142: LD_VAR 0 10
14146: PUSH
14147: FOR_TO
14148: IFFALSE 14449
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14150: LD_VAR 0 10
14154: PUSH
14155: LD_VAR 0 14
14159: ARRAY
14160: PUSH
14161: LD_INT 2
14163: EQUAL
14164: PUSH
14165: LD_VAR 0 10
14169: PUSH
14170: LD_VAR 0 14
14174: ARRAY
14175: PUSH
14176: LD_INT 3
14178: EQUAL
14179: OR
14180: IFFALSE 14233
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14182: LD_ADDR_VAR 0 19
14186: PUSH
14187: LD_INT 1
14189: PUSH
14190: LD_INT 2
14192: PUSH
14193: LD_INT 3
14195: PUSH
14196: LD_INT 4
14198: PUSH
14199: LD_INT 5
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14209: LD_ADDR_OWVAR 37
14213: PUSH
14214: LD_VAR 0 19
14218: PUSH
14219: LD_INT 1
14221: PPUSH
14222: LD_VAR 0 19
14226: PPUSH
14227: CALL_OW 12
14231: ARRAY
14232: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14233: LD_VAR 0 10
14237: PUSH
14238: LD_VAR 0 14
14242: ARRAY
14243: PUSH
14244: LD_INT 4
14246: EQUAL
14247: PUSH
14248: LD_VAR 0 10
14252: PUSH
14253: LD_VAR 0 14
14257: ARRAY
14258: PUSH
14259: LD_INT 5
14261: EQUAL
14262: OR
14263: PUSH
14264: LD_VAR 0 10
14268: PUSH
14269: LD_VAR 0 14
14273: ARRAY
14274: PUSH
14275: LD_INT 9
14277: EQUAL
14278: OR
14279: PUSH
14280: LD_VAR 0 10
14284: PUSH
14285: LD_VAR 0 14
14289: ARRAY
14290: PUSH
14291: LD_INT 11
14293: EQUAL
14294: OR
14295: PUSH
14296: LD_VAR 0 10
14300: PUSH
14301: LD_VAR 0 14
14305: ARRAY
14306: PUSH
14307: LD_INT 7
14309: EQUAL
14310: OR
14311: IFFALSE 14360
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14313: LD_ADDR_VAR 0 19
14317: PUSH
14318: LD_INT 2
14320: PUSH
14321: LD_INT 3
14323: PUSH
14324: LD_INT 4
14326: PUSH
14327: LD_INT 5
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14336: LD_ADDR_OWVAR 37
14340: PUSH
14341: LD_VAR 0 19
14345: PUSH
14346: LD_INT 1
14348: PPUSH
14349: LD_VAR 0 19
14353: PPUSH
14354: CALL_OW 12
14358: ARRAY
14359: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14360: LD_VAR 0 10
14364: PUSH
14365: LD_VAR 0 14
14369: ARRAY
14370: PUSH
14371: LD_INT 8
14373: EQUAL
14374: PUSH
14375: LD_VAR 0 10
14379: PUSH
14380: LD_VAR 0 14
14384: ARRAY
14385: PUSH
14386: LD_INT 6
14388: EQUAL
14389: OR
14390: PUSH
14391: LD_VAR 0 10
14395: PUSH
14396: LD_VAR 0 14
14400: ARRAY
14401: PUSH
14402: LD_INT 10
14404: EQUAL
14405: OR
14406: IFFALSE 14447
// begin amChassisTab = [ 4 , 5 ] ;
14408: LD_ADDR_VAR 0 19
14412: PUSH
14413: LD_INT 4
14415: PUSH
14416: LD_INT 5
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14423: LD_ADDR_OWVAR 37
14427: PUSH
14428: LD_VAR 0 19
14432: PUSH
14433: LD_INT 1
14435: PPUSH
14436: LD_VAR 0 19
14440: PPUSH
14441: CALL_OW 12
14445: ARRAY
14446: ST_TO_ADDR
// end ; end ;
14447: GO 14147
14449: POP
14450: POP
// veh = CreateVehicle ;
14451: LD_ADDR_VAR 0 16
14455: PUSH
14456: CALL_OW 45
14460: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14461: LD_VAR 0 16
14465: PPUSH
14466: LD_VAR 0 1
14470: PPUSH
14471: LD_INT 0
14473: PPUSH
14474: CALL_OW 49
// if vehControl = 1 then
14478: LD_VAR 0 7
14482: PUSH
14483: LD_INT 1
14485: EQUAL
14486: IFFALSE 14543
// begin hc_gallery =  ;
14488: LD_ADDR_OWVAR 33
14492: PUSH
14493: LD_STRING 
14495: ST_TO_ADDR
// hc_name =  ;
14496: LD_ADDR_OWVAR 26
14500: PUSH
14501: LD_STRING 
14503: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14504: LD_INT 0
14506: PPUSH
14507: LD_INT 3
14509: PPUSH
14510: LD_VAR 0 4
14514: PPUSH
14515: CALL_OW 380
// un = CreateHuman ;
14519: LD_ADDR_VAR 0 15
14523: PUSH
14524: CALL_OW 44
14528: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14529: LD_VAR 0 15
14533: PPUSH
14534: LD_VAR 0 16
14538: PPUSH
14539: CALL_OW 52
// end ; i = i + 1 ;
14543: LD_ADDR_VAR 0 13
14547: PUSH
14548: LD_VAR 0 13
14552: PUSH
14553: LD_INT 1
14555: PLUS
14556: ST_TO_ADDR
// end ; if nation = 2 then
14557: LD_VAR 0 5
14561: PUSH
14562: LD_INT 2
14564: EQUAL
14565: IFFALSE 14989
// begin uc_side = side ;
14567: LD_ADDR_OWVAR 20
14571: PUSH
14572: LD_VAR 0 2
14576: ST_TO_ADDR
// uc_nation = nation ;
14577: LD_ADDR_OWVAR 21
14581: PUSH
14582: LD_VAR 0 5
14586: ST_TO_ADDR
// vc_engine = vehengine ;
14587: LD_ADDR_OWVAR 39
14591: PUSH
14592: LD_VAR 0 6
14596: ST_TO_ADDR
// vc_control = vehcontrol ;
14597: LD_ADDR_OWVAR 38
14601: PUSH
14602: LD_VAR 0 7
14606: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
14607: LD_ADDR_OWVAR 40
14611: PUSH
14612: LD_VAR 0 9
14616: PUSH
14617: LD_INT 1
14619: PPUSH
14620: LD_VAR 0 9
14624: PPUSH
14625: CALL_OW 12
14629: ARRAY
14630: ST_TO_ADDR
// for j = 1 to ARWeapons do
14631: LD_ADDR_VAR 0 14
14635: PUSH
14636: DOUBLE
14637: LD_INT 1
14639: DEC
14640: ST_TO_ADDR
14641: LD_VAR 0 9
14645: PUSH
14646: FOR_TO
14647: IFFALSE 14881
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
14649: LD_VAR 0 9
14653: PUSH
14654: LD_VAR 0 14
14658: ARRAY
14659: PUSH
14660: LD_INT 24
14662: EQUAL
14663: PUSH
14664: LD_VAR 0 9
14668: PUSH
14669: LD_VAR 0 14
14673: ARRAY
14674: PUSH
14675: LD_INT 22
14677: EQUAL
14678: OR
14679: PUSH
14680: LD_VAR 0 9
14684: PUSH
14685: LD_VAR 0 14
14689: ARRAY
14690: PUSH
14691: LD_INT 23
14693: EQUAL
14694: OR
14695: PUSH
14696: LD_VAR 0 9
14700: PUSH
14701: LD_VAR 0 14
14705: ARRAY
14706: PUSH
14707: LD_INT 30
14709: EQUAL
14710: OR
14711: IFFALSE 14760
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
14713: LD_ADDR_VAR 0 18
14717: PUSH
14718: LD_INT 11
14720: PUSH
14721: LD_INT 12
14723: PUSH
14724: LD_INT 13
14726: PUSH
14727: LD_INT 14
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14736: LD_ADDR_OWVAR 37
14740: PUSH
14741: LD_VAR 0 18
14745: PUSH
14746: LD_INT 1
14748: PPUSH
14749: LD_VAR 0 18
14753: PPUSH
14754: CALL_OW 12
14758: ARRAY
14759: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
14760: LD_VAR 0 9
14764: PUSH
14765: LD_VAR 0 14
14769: ARRAY
14770: PUSH
14771: LD_INT 29
14773: EQUAL
14774: PUSH
14775: LD_VAR 0 9
14779: PUSH
14780: LD_VAR 0 14
14784: ARRAY
14785: PUSH
14786: LD_INT 28
14788: EQUAL
14789: OR
14790: PUSH
14791: LD_VAR 0 9
14795: PUSH
14796: LD_VAR 0 14
14800: ARRAY
14801: PUSH
14802: LD_INT 27
14804: EQUAL
14805: OR
14806: PUSH
14807: LD_VAR 0 9
14811: PUSH
14812: LD_VAR 0 14
14816: ARRAY
14817: PUSH
14818: LD_INT 26
14820: EQUAL
14821: OR
14822: PUSH
14823: LD_VAR 0 9
14827: PUSH
14828: LD_VAR 0 14
14832: ARRAY
14833: PUSH
14834: LD_INT 25
14836: EQUAL
14837: OR
14838: IFFALSE 14879
// begin arChassisTab = [ 13 , 14 ] ;
14840: LD_ADDR_VAR 0 18
14844: PUSH
14845: LD_INT 13
14847: PUSH
14848: LD_INT 14
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14855: LD_ADDR_OWVAR 37
14859: PUSH
14860: LD_VAR 0 18
14864: PUSH
14865: LD_INT 1
14867: PPUSH
14868: LD_VAR 0 18
14872: PPUSH
14873: CALL_OW 12
14877: ARRAY
14878: ST_TO_ADDR
// end ; end ;
14879: GO 14646
14881: POP
14882: POP
// veh = CreateVehicle ;
14883: LD_ADDR_VAR 0 16
14887: PUSH
14888: CALL_OW 45
14892: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14893: LD_VAR 0 16
14897: PPUSH
14898: LD_VAR 0 1
14902: PPUSH
14903: LD_INT 0
14905: PPUSH
14906: CALL_OW 49
// if vehcontrol = 1 then
14910: LD_VAR 0 7
14914: PUSH
14915: LD_INT 1
14917: EQUAL
14918: IFFALSE 14975
// begin hc_gallery =  ;
14920: LD_ADDR_OWVAR 33
14924: PUSH
14925: LD_STRING 
14927: ST_TO_ADDR
// hc_name =  ;
14928: LD_ADDR_OWVAR 26
14932: PUSH
14933: LD_STRING 
14935: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14936: LD_INT 0
14938: PPUSH
14939: LD_INT 3
14941: PPUSH
14942: LD_VAR 0 4
14946: PPUSH
14947: CALL_OW 380
// un = CreateHuman ;
14951: LD_ADDR_VAR 0 15
14955: PUSH
14956: CALL_OW 44
14960: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14961: LD_VAR 0 15
14965: PPUSH
14966: LD_VAR 0 16
14970: PPUSH
14971: CALL_OW 52
// end ; i = i + 1 ;
14975: LD_ADDR_VAR 0 13
14979: PUSH
14980: LD_VAR 0 13
14984: PUSH
14985: LD_INT 1
14987: PLUS
14988: ST_TO_ADDR
// end ; if nation = 3 then
14989: LD_VAR 0 5
14993: PUSH
14994: LD_INT 3
14996: EQUAL
14997: IFFALSE 15389
// begin uc_side = side ;
14999: LD_ADDR_OWVAR 20
15003: PUSH
15004: LD_VAR 0 2
15008: ST_TO_ADDR
// uc_nation = nation ;
15009: LD_ADDR_OWVAR 21
15013: PUSH
15014: LD_VAR 0 5
15018: ST_TO_ADDR
// vc_engine = vehengine ;
15019: LD_ADDR_OWVAR 39
15023: PUSH
15024: LD_VAR 0 6
15028: ST_TO_ADDR
// vc_control = vehcontrol ;
15029: LD_ADDR_OWVAR 38
15033: PUSH
15034: LD_VAR 0 7
15038: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15039: LD_ADDR_OWVAR 40
15043: PUSH
15044: LD_VAR 0 8
15048: PUSH
15049: LD_INT 1
15051: PPUSH
15052: LD_VAR 0 8
15056: PPUSH
15057: CALL_OW 12
15061: ARRAY
15062: ST_TO_ADDR
// for j = 1 to RuWeapons do
15063: LD_ADDR_VAR 0 14
15067: PUSH
15068: DOUBLE
15069: LD_INT 1
15071: DEC
15072: ST_TO_ADDR
15073: LD_VAR 0 8
15077: PUSH
15078: FOR_TO
15079: IFFALSE 15281
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15081: LD_VAR 0 8
15085: PUSH
15086: LD_VAR 0 14
15090: ARRAY
15091: PUSH
15092: LD_INT 42
15094: EQUAL
15095: PUSH
15096: LD_VAR 0 8
15100: PUSH
15101: LD_VAR 0 14
15105: ARRAY
15106: PUSH
15107: LD_INT 43
15109: EQUAL
15110: OR
15111: PUSH
15112: LD_VAR 0 8
15116: PUSH
15117: LD_VAR 0 14
15121: ARRAY
15122: PUSH
15123: LD_INT 44
15125: EQUAL
15126: OR
15127: PUSH
15128: LD_VAR 0 8
15132: PUSH
15133: LD_VAR 0 14
15137: ARRAY
15138: PUSH
15139: LD_INT 45
15141: EQUAL
15142: OR
15143: PUSH
15144: LD_VAR 0 8
15148: PUSH
15149: LD_VAR 0 14
15153: ARRAY
15154: PUSH
15155: LD_INT 49
15157: EQUAL
15158: OR
15159: IFFALSE 15208
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15161: LD_ADDR_VAR 0 17
15165: PUSH
15166: LD_INT 21
15168: PUSH
15169: LD_INT 22
15171: PUSH
15172: LD_INT 23
15174: PUSH
15175: LD_INT 24
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15184: LD_ADDR_OWVAR 37
15188: PUSH
15189: LD_VAR 0 17
15193: PUSH
15194: LD_INT 1
15196: PPUSH
15197: LD_VAR 0 17
15201: PPUSH
15202: CALL_OW 12
15206: ARRAY
15207: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15208: LD_VAR 0 8
15212: PUSH
15213: LD_VAR 0 14
15217: ARRAY
15218: PUSH
15219: LD_INT 46
15221: EQUAL
15222: PUSH
15223: LD_VAR 0 8
15227: PUSH
15228: LD_VAR 0 14
15232: ARRAY
15233: PUSH
15234: LD_INT 47
15236: EQUAL
15237: OR
15238: IFFALSE 15279
// begin ruChassisTab = [ 23 , 24 ] ;
15240: LD_ADDR_VAR 0 17
15244: PUSH
15245: LD_INT 23
15247: PUSH
15248: LD_INT 24
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15255: LD_ADDR_OWVAR 37
15259: PUSH
15260: LD_VAR 0 17
15264: PUSH
15265: LD_INT 1
15267: PPUSH
15268: LD_VAR 0 17
15272: PPUSH
15273: CALL_OW 12
15277: ARRAY
15278: ST_TO_ADDR
// end ; end ;
15279: GO 15078
15281: POP
15282: POP
// veh = CreateVehicle ;
15283: LD_ADDR_VAR 0 16
15287: PUSH
15288: CALL_OW 45
15292: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15293: LD_VAR 0 16
15297: PPUSH
15298: LD_VAR 0 1
15302: PPUSH
15303: LD_INT 0
15305: PPUSH
15306: CALL_OW 49
// if vehcontrol = 1 then
15310: LD_VAR 0 7
15314: PUSH
15315: LD_INT 1
15317: EQUAL
15318: IFFALSE 15375
// begin hc_gallery =  ;
15320: LD_ADDR_OWVAR 33
15324: PUSH
15325: LD_STRING 
15327: ST_TO_ADDR
// hc_name =  ;
15328: LD_ADDR_OWVAR 26
15332: PUSH
15333: LD_STRING 
15335: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15336: LD_INT 0
15338: PPUSH
15339: LD_INT 3
15341: PPUSH
15342: LD_VAR 0 4
15346: PPUSH
15347: CALL_OW 380
// un = CreateHuman ;
15351: LD_ADDR_VAR 0 15
15355: PUSH
15356: CALL_OW 44
15360: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15361: LD_VAR 0 15
15365: PPUSH
15366: LD_VAR 0 16
15370: PPUSH
15371: CALL_OW 52
// end ; i = i + 1 ;
15375: LD_ADDR_VAR 0 13
15379: PUSH
15380: LD_VAR 0 13
15384: PUSH
15385: LD_INT 1
15387: PLUS
15388: ST_TO_ADDR
// end ; until i = vehCount ;
15389: LD_VAR 0 13
15393: PUSH
15394: LD_VAR 0 3
15398: EQUAL
15399: IFFALSE 14051
// repeat wait ( 0 0$1 ) ;
15401: LD_INT 35
15403: PPUSH
15404: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
15408: LD_ADDR_VAR 0 20
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_VAR 0 2
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 21
15427: PUSH
15428: LD_INT 2
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: LD_INT 24
15437: PUSH
15438: LD_INT 250
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: LIST
15449: PPUSH
15450: CALL_OW 69
15454: ST_TO_ADDR
// if vehicleOK_list > 0 then
15455: LD_VAR 0 20
15459: PUSH
15460: LD_INT 0
15462: GREATER
15463: IFFALSE 15654
// begin for i in vehicleOK_list do
15465: LD_ADDR_VAR 0 13
15469: PUSH
15470: LD_VAR 0 20
15474: PUSH
15475: FOR_IN
15476: IFFALSE 15652
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15478: LD_ADDR_VAR 0 21
15482: PUSH
15483: LD_INT 22
15485: PUSH
15486: LD_VAR 0 11
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PPUSH
15495: CALL_OW 69
15499: PPUSH
15500: LD_VAR 0 13
15504: PPUSH
15505: CALL_OW 74
15509: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15510: LD_ADDR_VAR 0 22
15514: PUSH
15515: LD_INT 22
15517: PUSH
15518: LD_VAR 0 11
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: LD_INT 2
15529: PUSH
15530: LD_INT 59
15532: PUSH
15533: EMPTY
15534: LIST
15535: PUSH
15536: LD_INT 21
15538: PUSH
15539: LD_INT 1
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 21
15548: PUSH
15549: LD_INT 2
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: EMPTY
15567: LIST
15568: PPUSH
15569: CALL_OW 69
15573: PPUSH
15574: LD_VAR 0 13
15578: PPUSH
15579: CALL_OW 74
15583: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
15584: LD_VAR 0 13
15588: PPUSH
15589: LD_VAR 0 21
15593: PPUSH
15594: CALL_OW 296
15598: PUSH
15599: LD_INT 6
15601: PLUS
15602: PUSH
15603: LD_VAR 0 13
15607: PPUSH
15608: LD_VAR 0 22
15612: PPUSH
15613: CALL_OW 296
15617: LESS
15618: IFFALSE 15636
// begin ComAttackUnit ( i , target1 ) ;
15620: LD_VAR 0 13
15624: PPUSH
15625: LD_VAR 0 21
15629: PPUSH
15630: CALL_OW 115
// end else
15634: GO 15650
// begin ComAttackUnit ( i , target2 ) ;
15636: LD_VAR 0 13
15640: PPUSH
15641: LD_VAR 0 22
15645: PPUSH
15646: CALL_OW 115
// end ; end ;
15650: GO 15475
15652: POP
15653: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
15654: LD_INT 22
15656: PUSH
15657: LD_VAR 0 2
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 21
15668: PUSH
15669: LD_INT 2
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 24
15678: PUSH
15679: LD_INT 250
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: LIST
15690: PPUSH
15691: CALL_OW 69
15695: PUSH
15696: LD_INT 0
15698: EQUAL
15699: IFFALSE 15401
// end ;
15701: LD_VAR 0 12
15705: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
15706: LD_INT 0
15708: PPUSH
15709: PPUSH
15710: PPUSH
15711: PPUSH
15712: PPUSH
15713: PPUSH
15714: PPUSH
15715: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15716: LD_ADDR_VAR 0 7
15720: PUSH
15721: LD_INT 22
15723: PUSH
15724: LD_VAR 0 1
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 1
15735: PUSH
15736: LD_INT 3
15738: PUSH
15739: LD_INT 24
15741: PUSH
15742: LD_INT 550
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: LD_INT 24
15755: PUSH
15756: LD_INT 250
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: LIST
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PPUSH
15772: CALL_OW 69
15776: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15777: LD_ADDR_VAR 0 8
15781: PUSH
15782: LD_INT 22
15784: PUSH
15785: LD_VAR 0 1
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 2
15796: PUSH
15797: LD_INT 25
15799: PUSH
15800: LD_INT 1
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: LD_INT 25
15809: PUSH
15810: LD_INT 5
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 25
15819: PUSH
15820: LD_INT 8
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 25
15829: PUSH
15830: LD_INT 9
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 24
15846: PUSH
15847: LD_INT 1000
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: PPUSH
15859: CALL_OW 69
15863: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15864: LD_ADDR_VAR 0 9
15868: PUSH
15869: LD_INT 22
15871: PUSH
15872: LD_VAR 0 1
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 25
15883: PUSH
15884: LD_INT 4
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PPUSH
15895: CALL_OW 69
15899: ST_TO_ADDR
// if medicCount > 0 then
15900: LD_VAR 0 9
15904: PUSH
15905: LD_INT 0
15907: GREATER
15908: IFFALSE 15982
// begin if damageUnit_list > 0 then
15910: LD_VAR 0 7
15914: PUSH
15915: LD_INT 0
15917: GREATER
15918: IFFALSE 15982
// begin for i in damageUnit_list do
15920: LD_ADDR_VAR 0 5
15924: PUSH
15925: LD_VAR 0 7
15929: PUSH
15930: FOR_IN
15931: IFFALSE 15980
// begin ComMoveToArea ( i , healArea ) ;
15933: LD_VAR 0 5
15937: PPUSH
15938: LD_VAR 0 2
15942: PPUSH
15943: CALL_OW 113
// for j in medicCount do
15947: LD_ADDR_VAR 0 6
15951: PUSH
15952: LD_VAR 0 9
15956: PUSH
15957: FOR_IN
15958: IFFALSE 15976
// AddComHeal ( j , i ) ;
15960: LD_VAR 0 6
15964: PPUSH
15965: LD_VAR 0 5
15969: PPUSH
15970: CALL_OW 188
15974: GO 15957
15976: POP
15977: POP
// end ;
15978: GO 15930
15980: POP
15981: POP
// end ; end ; if soldiersOK_list > 0 then
15982: LD_VAR 0 8
15986: PUSH
15987: LD_INT 0
15989: GREATER
15990: IFFALSE 16181
// begin for i in soldiersOK_list do
15992: LD_ADDR_VAR 0 5
15996: PUSH
15997: LD_VAR 0 8
16001: PUSH
16002: FOR_IN
16003: IFFALSE 16179
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16005: LD_ADDR_VAR 0 10
16009: PUSH
16010: LD_INT 22
16012: PUSH
16013: LD_VAR 0 3
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PPUSH
16022: CALL_OW 69
16026: PPUSH
16027: LD_VAR 0 5
16031: PPUSH
16032: CALL_OW 74
16036: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16037: LD_ADDR_VAR 0 11
16041: PUSH
16042: LD_INT 22
16044: PUSH
16045: LD_VAR 0 3
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 2
16056: PUSH
16057: LD_INT 59
16059: PUSH
16060: EMPTY
16061: LIST
16062: PUSH
16063: LD_INT 21
16065: PUSH
16066: LD_INT 1
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 21
16075: PUSH
16076: LD_INT 2
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: EMPTY
16094: LIST
16095: PPUSH
16096: CALL_OW 69
16100: PPUSH
16101: LD_VAR 0 5
16105: PPUSH
16106: CALL_OW 74
16110: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16111: LD_VAR 0 5
16115: PPUSH
16116: LD_VAR 0 10
16120: PPUSH
16121: CALL_OW 296
16125: PUSH
16126: LD_INT 8
16128: PLUS
16129: PUSH
16130: LD_VAR 0 5
16134: PPUSH
16135: LD_VAR 0 11
16139: PPUSH
16140: CALL_OW 296
16144: LESS
16145: IFFALSE 16163
// begin ComAttackUnit ( i , target1 ) ;
16147: LD_VAR 0 5
16151: PPUSH
16152: LD_VAR 0 10
16156: PPUSH
16157: CALL_OW 115
// end else
16161: GO 16177
// begin ComAttackUnit ( i , target2 ) ;
16163: LD_VAR 0 5
16167: PPUSH
16168: LD_VAR 0 11
16172: PPUSH
16173: CALL_OW 115
// end ; end ;
16177: GO 16002
16179: POP
16180: POP
// end ; end ;
16181: LD_VAR 0 4
16185: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16186: LD_INT 0
16188: PPUSH
16189: PPUSH
// list := [ ] ;
16190: LD_ADDR_VAR 0 5
16194: PUSH
16195: EMPTY
16196: ST_TO_ADDR
// case d of 0 :
16197: LD_VAR 0 3
16201: PUSH
16202: LD_INT 0
16204: DOUBLE
16205: EQUAL
16206: IFTRUE 16210
16208: GO 16343
16210: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16211: LD_ADDR_VAR 0 5
16215: PUSH
16216: LD_VAR 0 1
16220: PUSH
16221: LD_INT 4
16223: MINUS
16224: PUSH
16225: LD_VAR 0 2
16229: PUSH
16230: LD_INT 4
16232: MINUS
16233: PUSH
16234: LD_INT 2
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: LIST
16241: PUSH
16242: LD_VAR 0 1
16246: PUSH
16247: LD_INT 3
16249: MINUS
16250: PUSH
16251: LD_VAR 0 2
16255: PUSH
16256: LD_INT 1
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: LIST
16263: PUSH
16264: LD_VAR 0 1
16268: PUSH
16269: LD_INT 4
16271: PLUS
16272: PUSH
16273: LD_VAR 0 2
16277: PUSH
16278: LD_INT 4
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: LIST
16285: PUSH
16286: LD_VAR 0 1
16290: PUSH
16291: LD_INT 3
16293: PLUS
16294: PUSH
16295: LD_VAR 0 2
16299: PUSH
16300: LD_INT 3
16302: PLUS
16303: PUSH
16304: LD_INT 5
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: LIST
16311: PUSH
16312: LD_VAR 0 1
16316: PUSH
16317: LD_VAR 0 2
16321: PUSH
16322: LD_INT 4
16324: PLUS
16325: PUSH
16326: LD_INT 0
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: LIST
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: ST_TO_ADDR
// end ; 1 :
16341: GO 17041
16343: LD_INT 1
16345: DOUBLE
16346: EQUAL
16347: IFTRUE 16351
16349: GO 16484
16351: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16352: LD_ADDR_VAR 0 5
16356: PUSH
16357: LD_VAR 0 1
16361: PUSH
16362: LD_VAR 0 2
16366: PUSH
16367: LD_INT 4
16369: MINUS
16370: PUSH
16371: LD_INT 3
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: LIST
16378: PUSH
16379: LD_VAR 0 1
16383: PUSH
16384: LD_INT 3
16386: MINUS
16387: PUSH
16388: LD_VAR 0 2
16392: PUSH
16393: LD_INT 3
16395: MINUS
16396: PUSH
16397: LD_INT 2
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: PUSH
16405: LD_VAR 0 1
16409: PUSH
16410: LD_INT 4
16412: MINUS
16413: PUSH
16414: LD_VAR 0 2
16418: PUSH
16419: LD_INT 1
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: LIST
16426: PUSH
16427: LD_VAR 0 1
16431: PUSH
16432: LD_VAR 0 2
16436: PUSH
16437: LD_INT 3
16439: PLUS
16440: PUSH
16441: LD_INT 0
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: LIST
16448: PUSH
16449: LD_VAR 0 1
16453: PUSH
16454: LD_INT 4
16456: PLUS
16457: PUSH
16458: LD_VAR 0 2
16462: PUSH
16463: LD_INT 4
16465: PLUS
16466: PUSH
16467: LD_INT 5
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: LIST
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: ST_TO_ADDR
// end ; 2 :
16482: GO 17041
16484: LD_INT 2
16486: DOUBLE
16487: EQUAL
16488: IFTRUE 16492
16490: GO 16621
16492: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
16493: LD_ADDR_VAR 0 5
16497: PUSH
16498: LD_VAR 0 1
16502: PUSH
16503: LD_VAR 0 2
16507: PUSH
16508: LD_INT 3
16510: MINUS
16511: PUSH
16512: LD_INT 3
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: PUSH
16520: LD_VAR 0 1
16524: PUSH
16525: LD_INT 4
16527: PLUS
16528: PUSH
16529: LD_VAR 0 2
16533: PUSH
16534: LD_INT 4
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: LIST
16541: PUSH
16542: LD_VAR 0 1
16546: PUSH
16547: LD_VAR 0 2
16551: PUSH
16552: LD_INT 4
16554: PLUS
16555: PUSH
16556: LD_INT 0
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: LIST
16563: PUSH
16564: LD_VAR 0 1
16568: PUSH
16569: LD_INT 3
16571: MINUS
16572: PUSH
16573: LD_VAR 0 2
16577: PUSH
16578: LD_INT 1
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: LIST
16585: PUSH
16586: LD_VAR 0 1
16590: PUSH
16591: LD_INT 4
16593: MINUS
16594: PUSH
16595: LD_VAR 0 2
16599: PUSH
16600: LD_INT 4
16602: MINUS
16603: PUSH
16604: LD_INT 2
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: ST_TO_ADDR
// end ; 3 :
16619: GO 17041
16621: LD_INT 3
16623: DOUBLE
16624: EQUAL
16625: IFTRUE 16629
16627: GO 16762
16629: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
16630: LD_ADDR_VAR 0 5
16634: PUSH
16635: LD_VAR 0 1
16639: PUSH
16640: LD_INT 3
16642: PLUS
16643: PUSH
16644: LD_VAR 0 2
16648: PUSH
16649: LD_INT 4
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: PUSH
16657: LD_VAR 0 1
16661: PUSH
16662: LD_INT 4
16664: PLUS
16665: PUSH
16666: LD_VAR 0 2
16670: PUSH
16671: LD_INT 4
16673: PLUS
16674: PUSH
16675: LD_INT 5
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: LIST
16682: PUSH
16683: LD_VAR 0 1
16687: PUSH
16688: LD_INT 4
16690: MINUS
16691: PUSH
16692: LD_VAR 0 2
16696: PUSH
16697: LD_INT 1
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: LIST
16704: PUSH
16705: LD_VAR 0 1
16709: PUSH
16710: LD_VAR 0 2
16714: PUSH
16715: LD_INT 4
16717: MINUS
16718: PUSH
16719: LD_INT 3
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: LIST
16726: PUSH
16727: LD_VAR 0 1
16731: PUSH
16732: LD_INT 3
16734: MINUS
16735: PUSH
16736: LD_VAR 0 2
16740: PUSH
16741: LD_INT 3
16743: MINUS
16744: PUSH
16745: LD_INT 2
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: LIST
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: ST_TO_ADDR
// end ; 4 :
16760: GO 17041
16762: LD_INT 4
16764: DOUBLE
16765: EQUAL
16766: IFTRUE 16770
16768: GO 16903
16770: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
16771: LD_ADDR_VAR 0 5
16775: PUSH
16776: LD_VAR 0 1
16780: PUSH
16781: LD_VAR 0 2
16785: PUSH
16786: LD_INT 4
16788: PLUS
16789: PUSH
16790: LD_INT 0
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: LIST
16797: PUSH
16798: LD_VAR 0 1
16802: PUSH
16803: LD_INT 3
16805: PLUS
16806: PUSH
16807: LD_VAR 0 2
16811: PUSH
16812: LD_INT 3
16814: PLUS
16815: PUSH
16816: LD_INT 5
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: PUSH
16824: LD_VAR 0 1
16828: PUSH
16829: LD_INT 3
16831: PLUS
16832: PUSH
16833: LD_VAR 0 2
16837: PUSH
16838: LD_INT 4
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: PUSH
16846: LD_VAR 0 1
16850: PUSH
16851: LD_VAR 0 2
16855: PUSH
16856: LD_INT 3
16858: MINUS
16859: PUSH
16860: LD_INT 3
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: LIST
16867: PUSH
16868: LD_VAR 0 1
16872: PUSH
16873: LD_INT 4
16875: MINUS
16876: PUSH
16877: LD_VAR 0 2
16881: PUSH
16882: LD_INT 4
16884: MINUS
16885: PUSH
16886: LD_INT 2
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: LIST
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: ST_TO_ADDR
// end ; 5 :
16901: GO 17041
16903: LD_INT 5
16905: DOUBLE
16906: EQUAL
16907: IFTRUE 16911
16909: GO 17040
16911: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
16912: LD_ADDR_VAR 0 5
16916: PUSH
16917: LD_VAR 0 1
16921: PUSH
16922: LD_INT 4
16924: MINUS
16925: PUSH
16926: LD_VAR 0 2
16930: PUSH
16931: LD_INT 1
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: LIST
16938: PUSH
16939: LD_VAR 0 1
16943: PUSH
16944: LD_VAR 0 2
16948: PUSH
16949: LD_INT 4
16951: MINUS
16952: PUSH
16953: LD_INT 3
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: LIST
16960: PUSH
16961: LD_VAR 0 1
16965: PUSH
16966: LD_INT 4
16968: PLUS
16969: PUSH
16970: LD_VAR 0 2
16974: PUSH
16975: LD_INT 4
16977: PLUS
16978: PUSH
16979: LD_INT 5
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: LIST
16986: PUSH
16987: LD_VAR 0 1
16991: PUSH
16992: LD_INT 3
16994: PLUS
16995: PUSH
16996: LD_VAR 0 2
17000: PUSH
17001: LD_INT 4
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: LIST
17008: PUSH
17009: LD_VAR 0 1
17013: PUSH
17014: LD_VAR 0 2
17018: PUSH
17019: LD_INT 3
17021: PLUS
17022: PUSH
17023: LD_INT 0
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: LIST
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: ST_TO_ADDR
// end ; end ;
17038: GO 17041
17040: POP
// result := list ;
17041: LD_ADDR_VAR 0 4
17045: PUSH
17046: LD_VAR 0 5
17050: ST_TO_ADDR
// end ; end_of_file
17051: LD_VAR 0 4
17055: RET
// every 1 do var i ;
17056: GO 17058
17058: DISABLE
17059: LD_INT 0
17061: PPUSH
// begin InGameOn ;
17062: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
17066: LD_INT 53
17068: PPUSH
17069: LD_INT 40
17071: PPUSH
17072: CALL_OW 84
// wait ( 0 0$5 ) ;
17076: LD_INT 175
17078: PPUSH
17079: CALL_OW 67
// if gammaCommander = 1 then
17083: LD_EXP 12
17087: PUSH
17088: LD_INT 1
17090: EQUAL
17091: IFFALSE 17102
// CenterNowOnUnits ( Donaldson ) ;
17093: LD_EXP 3
17097: PPUSH
17098: CALL_OW 87
// if gammaCommander = 2 then
17102: LD_EXP 12
17106: PUSH
17107: LD_INT 2
17109: EQUAL
17110: IFFALSE 17121
// CenterNowOnUnits ( Brown ) ;
17112: LD_EXP 2
17116: PPUSH
17117: CALL_OW 87
// if gammaCommander = 3 then
17121: LD_EXP 12
17125: PUSH
17126: LD_INT 3
17128: EQUAL
17129: IFFALSE 17140
// CenterNowOnUnits ( Houten ) ;
17131: LD_EXP 13
17135: PPUSH
17136: CALL_OW 87
// if gammaCommander = 1 then
17140: LD_EXP 12
17144: PUSH
17145: LD_INT 1
17147: EQUAL
17148: IFFALSE 17162
// Say ( Donaldson , D1-Don-1 ) ;
17150: LD_EXP 3
17154: PPUSH
17155: LD_STRING D1-Don-1
17157: PPUSH
17158: CALL_OW 88
// if gammaCommander = 2 then
17162: LD_EXP 12
17166: PUSH
17167: LD_INT 2
17169: EQUAL
17170: IFFALSE 17184
// Say ( Brown , D1-Brown-1 ) ;
17172: LD_EXP 2
17176: PPUSH
17177: LD_STRING D1-Brown-1
17179: PPUSH
17180: CALL_OW 88
// if gammaCommander = 3 then
17184: LD_EXP 12
17188: PUSH
17189: LD_INT 3
17191: EQUAL
17192: IFFALSE 17206
// Say ( Houten , D1-VanH-1 ) ;
17194: LD_EXP 13
17198: PPUSH
17199: LD_STRING D1-VanH-1
17201: PPUSH
17202: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
17206: LD_EXP 22
17210: PPUSH
17211: LD_STRING D1-Har-1
17213: PPUSH
17214: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
17218: LD_INT 53
17220: PPUSH
17221: LD_INT 40
17223: PPUSH
17224: CALL_OW 84
// if gammaCommander = 1 then
17228: LD_EXP 12
17232: PUSH
17233: LD_INT 1
17235: EQUAL
17236: IFFALSE 17250
// Say ( Donaldson , D1-Don-2 ) ;
17238: LD_EXP 3
17242: PPUSH
17243: LD_STRING D1-Don-2
17245: PPUSH
17246: CALL_OW 88
// if gammaCommander = 2 then
17250: LD_EXP 12
17254: PUSH
17255: LD_INT 2
17257: EQUAL
17258: IFFALSE 17272
// Say ( Brown , D1-Brown-2 ) ;
17260: LD_EXP 2
17264: PPUSH
17265: LD_STRING D1-Brown-2
17267: PPUSH
17268: CALL_OW 88
// if gammaCommander = 3 then
17272: LD_EXP 12
17276: PUSH
17277: LD_INT 3
17279: EQUAL
17280: IFFALSE 17294
// Say ( Houten , D1-VanH-2 ) ;
17282: LD_EXP 13
17286: PPUSH
17287: LD_STRING D1-VanH-2
17289: PPUSH
17290: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
17294: LD_EXP 22
17298: PPUSH
17299: LD_STRING D1-Har-2
17301: PPUSH
17302: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
17306: LD_INT 22
17308: PUSH
17309: LD_INT 1
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 33
17318: PUSH
17319: LD_INT 2
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 61
17328: PUSH
17329: EMPTY
17330: LIST
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: LIST
17336: PPUSH
17337: CALL_OW 69
17341: IFFALSE 17406
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
17343: LD_ADDR_VAR 0 1
17347: PUSH
17348: LD_INT 22
17350: PUSH
17351: LD_INT 1
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 33
17360: PUSH
17361: LD_INT 2
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 61
17370: PUSH
17371: EMPTY
17372: LIST
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: PPUSH
17379: CALL_OW 69
17383: PUSH
17384: FOR_IN
17385: IFFALSE 17404
// ComAgressiveMove ( i , 70 , 41 ) ;
17387: LD_VAR 0 1
17391: PPUSH
17392: LD_INT 70
17394: PPUSH
17395: LD_INT 41
17397: PPUSH
17398: CALL_OW 114
17402: GO 17384
17404: POP
17405: POP
// repeat wait ( 0 0$1 ) ;
17406: LD_INT 35
17408: PPUSH
17409: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
17413: LD_ADDR_VAR 0 1
17417: PUSH
17418: LD_INT 22
17420: PUSH
17421: LD_INT 6
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: EMPTY
17429: LIST
17430: PPUSH
17431: CALL_OW 69
17435: PUSH
17436: FOR_IN
17437: IFFALSE 17456
// ComAgressiveMove ( i , 54 , 20 ) ;
17439: LD_VAR 0 1
17443: PPUSH
17444: LD_INT 54
17446: PPUSH
17447: LD_INT 20
17449: PPUSH
17450: CALL_OW 114
17454: GO 17436
17456: POP
17457: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
17458: LD_ADDR_VAR 0 1
17462: PUSH
17463: LD_INT 22
17465: PUSH
17466: LD_INT 1
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 25
17475: PUSH
17476: LD_INT 1
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 3
17485: PUSH
17486: LD_INT 54
17488: PUSH
17489: EMPTY
17490: LIST
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: LIST
17500: PPUSH
17501: CALL_OW 69
17505: PUSH
17506: FOR_IN
17507: IFFALSE 17541
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
17509: LD_VAR 0 1
17513: PPUSH
17514: LD_INT 70
17516: PPUSH
17517: LD_INT 41
17519: PPUSH
17520: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
17524: LD_VAR 0 1
17528: PPUSH
17529: LD_INT 46
17531: PPUSH
17532: LD_INT 39
17534: PPUSH
17535: CALL_OW 174
// end ;
17539: GO 17506
17541: POP
17542: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
17543: LD_ADDR_VAR 0 1
17547: PUSH
17548: LD_INT 22
17550: PUSH
17551: LD_INT 1
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 21
17560: PUSH
17561: LD_INT 1
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 3
17570: PUSH
17571: LD_INT 24
17573: PUSH
17574: LD_INT 500
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: PPUSH
17590: CALL_OW 69
17594: PUSH
17595: FOR_IN
17596: IFFALSE 17629
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
17598: LD_VAR 0 1
17602: PPUSH
17603: LD_EXP 37
17607: PPUSH
17608: CALL_OW 250
17612: PPUSH
17613: LD_EXP 37
17617: PPUSH
17618: CALL_OW 251
17622: PPUSH
17623: CALL_OW 111
17627: GO 17595
17629: POP
17630: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
17631: LD_INT 22
17633: PUSH
17634: LD_INT 6
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_INT 21
17643: PUSH
17644: LD_INT 1
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 24
17653: PUSH
17654: LD_INT 250
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: LIST
17665: PPUSH
17666: CALL_OW 69
17670: PUSH
17671: LD_INT 6
17673: LESS
17674: IFFALSE 17406
// InGameOff ;
17676: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
17680: LD_STRING M1
17682: PPUSH
17683: CALL_OW 337
// SaveForQuickRestart ;
17687: CALL_OW 22
// startCutscene = 0 ;
17691: LD_ADDR_EXP 38
17695: PUSH
17696: LD_INT 0
17698: ST_TO_ADDR
// end ;
17699: PPOPN 1
17701: END
// every 1 1$0 do
17702: GO 17704
17704: DISABLE
// begin PrepareSupportFromDelta ;
17705: CALL 3126 0 0
// firstAttack = 1 ;
17709: LD_ADDR_EXP 33
17713: PUSH
17714: LD_INT 1
17716: ST_TO_ADDR
// if IsOk ( Gladstone ) then
17717: LD_EXP 8
17721: PPUSH
17722: CALL_OW 302
17726: IFFALSE 17742
// begin Say ( Gladstone , D2-Glad-1 ) ;
17728: LD_EXP 8
17732: PPUSH
17733: LD_STRING D2-Glad-1
17735: PPUSH
17736: CALL_OW 88
// end else
17740: GO 17844
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
17742: LD_INT 4
17744: PPUSH
17745: LD_INT 22
17747: PUSH
17748: LD_INT 1
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 21
17757: PUSH
17758: LD_INT 1
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 2
17767: PUSH
17768: LD_INT 25
17770: PUSH
17771: LD_INT 1
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 25
17780: PUSH
17781: LD_INT 2
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 25
17790: PUSH
17791: LD_INT 3
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 25
17800: PUSH
17801: LD_INT 4
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: LIST
17819: PPUSH
17820: CALL_OW 70
17824: PUSH
17825: LD_EXP 15
17829: PUSH
17830: EMPTY
17831: LIST
17832: DIFF
17833: PPUSH
17834: LD_STRING D2-Sol1-1
17836: PPUSH
17837: LD_STRING D2-FSol1-1
17839: PPUSH
17840: CALL 6800 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
17844: LD_EXP 3
17848: PPUSH
17849: CALL_OW 302
17853: PUSH
17854: LD_EXP 12
17858: PUSH
17859: LD_INT 1
17861: EQUAL
17862: AND
17863: IFFALSE 17877
// Say ( Donaldson , D2-Don-1 ) ;
17865: LD_EXP 3
17869: PPUSH
17870: LD_STRING D2-Don-1
17872: PPUSH
17873: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
17877: LD_EXP 2
17881: PPUSH
17882: CALL_OW 302
17886: PUSH
17887: LD_EXP 12
17891: PUSH
17892: LD_INT 2
17894: EQUAL
17895: AND
17896: IFFALSE 17910
// Say ( Brown , D2-Brown-1 ) ;
17898: LD_EXP 2
17902: PPUSH
17903: LD_STRING D2-Brown-1
17905: PPUSH
17906: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
17910: LD_EXP 13
17914: PPUSH
17915: CALL_OW 302
17919: PUSH
17920: LD_EXP 12
17924: PUSH
17925: LD_INT 3
17927: EQUAL
17928: AND
17929: IFFALSE 17943
// Say ( Houten , D2-VanH-1 ) ;
17931: LD_EXP 13
17935: PPUSH
17936: LD_STRING D2-VanH-1
17938: PPUSH
17939: CALL_OW 88
// end ;
17943: END
// every 0 0$1 do
17944: GO 17946
17946: DISABLE
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
17947: LD_STRING 07_time
17949: PPUSH
17950: LD_INT 12600
17952: PPUSH
17953: CALL_OW 30
17957: PUSH
17958: LD_INT 3
17960: DIV
17961: PPUSH
17962: CALL_OW 67
// PrepareMacmillanSquad ;
17966: CALL 3788 0 0
// CenterNowOnUnits ( JMM ) ;
17970: LD_EXP 1
17974: PPUSH
17975: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
17979: LD_EXP 1
17983: PPUSH
17984: LD_STRING D3-JMM-1
17986: PPUSH
17987: CALL_OW 88
// JMMArrive = 1 ;
17991: LD_ADDR_EXP 39
17995: PUSH
17996: LD_INT 1
17998: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
17999: LD_EXP 3
18003: PPUSH
18004: CALL_OW 302
18008: PUSH
18009: LD_EXP 12
18013: PUSH
18014: LD_INT 1
18016: EQUAL
18017: AND
18018: IFFALSE 18034
// begin Say ( Donaldson , D3-Don-1 ) ;
18020: LD_EXP 3
18024: PPUSH
18025: LD_STRING D3-Don-1
18027: PPUSH
18028: CALL_OW 88
// end else
18032: GO 18086
// begin if gammaCommander = 1 then
18034: LD_EXP 12
18038: PUSH
18039: LD_INT 1
18041: EQUAL
18042: IFFALSE 18086
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
18044: LD_EXP 11
18048: PPUSH
18049: LD_INT 26
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PPUSH
18059: CALL_OW 72
18063: PPUSH
18064: LD_STRING D3-Sol1-1
18066: PPUSH
18067: LD_STRING D3-Sol1-1
18069: PPUSH
18070: CALL 6800 0 3
// Say ( JMM , D3-JMM-2 ) ;
18074: LD_EXP 1
18078: PPUSH
18079: LD_STRING D3-JMM-2
18081: PPUSH
18082: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
18086: LD_EXP 2
18090: PPUSH
18091: CALL_OW 302
18095: PUSH
18096: LD_EXP 12
18100: PUSH
18101: LD_INT 2
18103: EQUAL
18104: AND
18105: IFFALSE 18121
// begin Say ( Brown , D3-Brown-1 ) ;
18107: LD_EXP 2
18111: PPUSH
18112: LD_STRING D3-Brown-1
18114: PPUSH
18115: CALL_OW 88
// end else
18119: GO 18173
// begin if gammaCommander = 2 then
18121: LD_EXP 12
18125: PUSH
18126: LD_INT 2
18128: EQUAL
18129: IFFALSE 18173
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
18131: LD_EXP 11
18135: PPUSH
18136: LD_INT 26
18138: PUSH
18139: LD_INT 1
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PPUSH
18146: CALL_OW 72
18150: PPUSH
18151: LD_STRING D3-Sol1-1a
18153: PPUSH
18154: LD_STRING D3-Sol1-1a
18156: PPUSH
18157: CALL 6800 0 3
// Say ( JMM , D3-JMM-2 ) ;
18161: LD_EXP 1
18165: PPUSH
18166: LD_STRING D3-JMM-2
18168: PPUSH
18169: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
18173: LD_EXP 13
18177: PPUSH
18178: CALL_OW 302
18182: PUSH
18183: LD_EXP 12
18187: PUSH
18188: LD_INT 3
18190: EQUAL
18191: AND
18192: IFFALSE 18208
// begin Say ( Houten , D3-VanH-1 ) ;
18194: LD_EXP 13
18198: PPUSH
18199: LD_STRING D3-VanH-1
18201: PPUSH
18202: CALL_OW 88
// end else
18206: GO 18260
// begin if gammaCommander = 3 then
18208: LD_EXP 12
18212: PUSH
18213: LD_INT 3
18215: EQUAL
18216: IFFALSE 18260
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
18218: LD_EXP 11
18222: PPUSH
18223: LD_INT 26
18225: PUSH
18226: LD_INT 1
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PPUSH
18233: CALL_OW 72
18237: PPUSH
18238: LD_STRING D3-Sol1-1b
18240: PPUSH
18241: LD_STRING D3-Sol1-1b
18243: PPUSH
18244: CALL 6800 0 3
// Say ( JMM , D3-JMM-2 ) ;
18248: LD_EXP 1
18252: PPUSH
18253: LD_STRING D3-JMM-2
18255: PPUSH
18256: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
18260: LD_EXP 15
18264: PPUSH
18265: CALL_OW 302
18269: IFFALSE 18297
// begin Say ( Joan , D3a-Joan-1 ) ;
18271: LD_EXP 15
18275: PPUSH
18276: LD_STRING D3a-Joan-1
18278: PPUSH
18279: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
18283: LD_EXP 1
18287: PPUSH
18288: LD_STRING D3a-JMM-1
18290: PPUSH
18291: CALL_OW 88
// end else
18295: GO 18639
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
18297: LD_STRING 06_JoanStatus_1
18299: PPUSH
18300: LD_INT 0
18302: PPUSH
18303: CALL_OW 30
18307: PUSH
18308: LD_INT 1
18310: EQUAL
18311: IFFALSE 18639
// begin Say ( JMM , D3b-JMM-1 ) ;
18313: LD_EXP 1
18317: PPUSH
18318: LD_STRING D3b-JMM-1
18320: PPUSH
18321: CALL_OW 88
// if gammaCommander = 1 then
18325: LD_EXP 12
18329: PUSH
18330: LD_INT 1
18332: EQUAL
18333: IFFALSE 18390
// if IsOK ( Donaldson ) then
18335: LD_EXP 3
18339: PPUSH
18340: CALL_OW 302
18344: IFFALSE 18360
// Say ( Donaldson , D3b-Don-1 ) else
18346: LD_EXP 3
18350: PPUSH
18351: LD_STRING D3b-Don-1
18353: PPUSH
18354: CALL_OW 88
18358: GO 18390
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18360: LD_EXP 11
18364: PPUSH
18365: LD_INT 26
18367: PUSH
18368: LD_INT 1
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PPUSH
18375: CALL_OW 72
18379: PPUSH
18380: LD_STRING D3b-Sol1-1
18382: PPUSH
18383: LD_STRING D3b-Sol1-1
18385: PPUSH
18386: CALL 6800 0 3
// if gammaCommander = 2 then
18390: LD_EXP 12
18394: PUSH
18395: LD_INT 2
18397: EQUAL
18398: IFFALSE 18455
// if IsOk ( Brown ) then
18400: LD_EXP 2
18404: PPUSH
18405: CALL_OW 302
18409: IFFALSE 18425
// Say ( Brown , D3b-Brown-1 ) else
18411: LD_EXP 2
18415: PPUSH
18416: LD_STRING D3b-Brown-1
18418: PPUSH
18419: CALL_OW 88
18423: GO 18455
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18425: LD_EXP 11
18429: PPUSH
18430: LD_INT 26
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PPUSH
18440: CALL_OW 72
18444: PPUSH
18445: LD_STRING D3b-Sol1-1
18447: PPUSH
18448: LD_STRING D3b-Sol1-1
18450: PPUSH
18451: CALL 6800 0 3
// if gammaCommander = 3 then
18455: LD_EXP 12
18459: PUSH
18460: LD_INT 3
18462: EQUAL
18463: IFFALSE 18520
// if IsOk ( Houten ) then
18465: LD_EXP 13
18469: PPUSH
18470: CALL_OW 302
18474: IFFALSE 18490
// Say ( Houten , D3b-VanH-1 ) else
18476: LD_EXP 13
18480: PPUSH
18481: LD_STRING D3b-VanH-1
18483: PPUSH
18484: CALL_OW 88
18488: GO 18520
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18490: LD_EXP 11
18494: PPUSH
18495: LD_INT 26
18497: PUSH
18498: LD_INT 1
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PPUSH
18505: CALL_OW 72
18509: PPUSH
18510: LD_STRING D3b-Sol1-1
18512: PPUSH
18513: LD_STRING D3b-Sol1-1
18515: PPUSH
18516: CALL 6800 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
18520: LD_EXP 11
18524: PPUSH
18525: LD_INT 26
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PPUSH
18535: CALL_OW 72
18539: PUSH
18540: LD_EXP 12
18544: PUSH
18545: LD_INT 1
18547: EQUAL
18548: PUSH
18549: LD_EXP 3
18553: PPUSH
18554: CALL_OW 302
18558: AND
18559: OR
18560: PUSH
18561: LD_EXP 12
18565: PUSH
18566: LD_INT 2
18568: EQUAL
18569: PUSH
18570: LD_EXP 2
18574: PPUSH
18575: CALL_OW 302
18579: AND
18580: OR
18581: PUSH
18582: LD_EXP 12
18586: PUSH
18587: LD_INT 3
18589: EQUAL
18590: PUSH
18591: LD_EXP 13
18595: PPUSH
18596: CALL_OW 302
18600: AND
18601: OR
18602: IFFALSE 18616
// Say ( JMM , D3b-JMM-2 ) ;
18604: LD_EXP 1
18608: PPUSH
18609: LD_STRING D3b-JMM-2
18611: PPUSH
18612: CALL_OW 88
// if IsOK ( Lisa ) then
18616: LD_EXP 6
18620: PPUSH
18621: CALL_OW 302
18625: IFFALSE 18639
// Say ( Lisa , D3b-Lisa-2 ) ;
18627: LD_EXP 6
18631: PPUSH
18632: LD_STRING D3b-Lisa-2
18634: PPUSH
18635: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
18639: LD_INT 22
18641: PUSH
18642: LD_INT 1
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 21
18651: PUSH
18652: LD_INT 1
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 26
18661: PUSH
18662: LD_INT 1
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 2
18671: PUSH
18672: LD_INT 25
18674: PUSH
18675: LD_INT 1
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 25
18684: PUSH
18685: LD_INT 2
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 25
18694: PUSH
18695: LD_INT 3
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 25
18704: PUSH
18705: LD_INT 4
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: PPUSH
18725: CALL_OW 69
18729: PUSH
18730: LD_EXP 1
18734: PUSH
18735: LD_EXP 2
18739: PUSH
18740: LD_EXP 3
18744: PUSH
18745: LD_EXP 4
18749: PUSH
18750: LD_EXP 5
18754: PUSH
18755: LD_EXP 6
18759: PUSH
18760: LD_EXP 7
18764: PUSH
18765: LD_EXP 8
18769: PUSH
18770: LD_EXP 9
18774: PUSH
18775: LD_EXP 10
18779: PUSH
18780: LD_EXP 15
18784: PUSH
18785: LD_EXP 14
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: DIFF
18804: PPUSH
18805: LD_STRING DCa-Sol1-1
18807: PPUSH
18808: LD_STRING DCa-Sol1-1
18810: PPUSH
18811: CALL 6800 0 3
// Say ( JMM , DCb-JMM-1 ) ;
18815: LD_EXP 1
18819: PPUSH
18820: LD_STRING DCb-JMM-1
18822: PPUSH
18823: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
18827: LD_INT 22
18829: PUSH
18830: LD_INT 1
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 21
18839: PUSH
18840: LD_INT 1
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 26
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 2
18859: PUSH
18860: LD_INT 25
18862: PUSH
18863: LD_INT 1
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 25
18872: PUSH
18873: LD_INT 2
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 25
18882: PUSH
18883: LD_INT 3
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 25
18892: PUSH
18893: LD_INT 4
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: PPUSH
18913: CALL_OW 69
18917: PUSH
18918: LD_EXP 1
18922: PUSH
18923: LD_EXP 2
18927: PUSH
18928: LD_EXP 3
18932: PUSH
18933: LD_EXP 4
18937: PUSH
18938: LD_EXP 5
18942: PUSH
18943: LD_EXP 6
18947: PUSH
18948: LD_EXP 7
18952: PUSH
18953: LD_EXP 8
18957: PUSH
18958: LD_EXP 9
18962: PUSH
18963: LD_EXP 10
18967: PUSH
18968: LD_EXP 15
18972: PUSH
18973: LD_EXP 14
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: DIFF
18992: PPUSH
18993: LD_STRING DCb-Sol1-1
18995: PPUSH
18996: LD_STRING DCb-Sol1-1
18998: PPUSH
18999: CALL 6800 0 3
// Say ( JMM , DCb-JMM-2 ) ;
19003: LD_EXP 1
19007: PPUSH
19008: LD_STRING DCb-JMM-2
19010: PPUSH
19011: CALL_OW 88
// secondAttack = 1 ;
19015: LD_ADDR_EXP 34
19019: PUSH
19020: LD_INT 1
19022: ST_TO_ADDR
// end ;
19023: END
// every 0 0$01 trigger JMMArrive = 1 do
19024: LD_EXP 39
19028: PUSH
19029: LD_INT 1
19031: EQUAL
19032: IFFALSE 19112
19034: GO 19036
19036: DISABLE
// begin wait ( 3 3$0 ) ;
19037: LD_INT 6300
19039: PPUSH
19040: CALL_OW 67
// DialogueOn ;
19044: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
19048: LD_EXP 23
19052: PPUSH
19053: LD_STRING D4-Pow-1
19055: PPUSH
19056: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
19060: LD_EXP 1
19064: PPUSH
19065: LD_STRING D4-JMM-1
19067: PPUSH
19068: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
19072: LD_EXP 23
19076: PPUSH
19077: LD_STRING D4-Pow-2
19079: PPUSH
19080: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
19084: LD_EXP 1
19088: PPUSH
19089: LD_STRING D4-JMM-2
19091: PPUSH
19092: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
19096: LD_EXP 23
19100: PPUSH
19101: LD_STRING D4-Pow-3
19103: PPUSH
19104: CALL_OW 94
// DialogueOff ;
19108: CALL_OW 7
// end ;
19112: END
// every 0 0$01 trigger JMMArrive = 1 do
19113: LD_EXP 39
19117: PUSH
19118: LD_INT 1
19120: EQUAL
19121: IFFALSE 19153
19123: GO 19125
19125: DISABLE
// begin wait ( 8 8$0 ) ;
19126: LD_INT 16800
19128: PPUSH
19129: CALL_OW 67
// DialogueOn ;
19133: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
19137: LD_EXP 23
19141: PPUSH
19142: LD_STRING D4a-Pow-1
19144: PPUSH
19145: CALL_OW 94
// DialogueOff ;
19149: CALL_OW 7
// end ;
19153: END
// every 0 0$01 trigger JMMArrive = 1 do
19154: LD_EXP 39
19158: PUSH
19159: LD_INT 1
19161: EQUAL
19162: IFFALSE 19207
19164: GO 19166
19166: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
19167: LD_INT 21000
19169: PUSH
19170: LD_INT 25200
19172: PUSH
19173: LD_INT 31500
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: LIST
19180: PUSH
19181: LD_OWVAR 67
19185: ARRAY
19186: PPUSH
19187: CALL_OW 67
// PrepareSikorsky ;
19191: CALL 5384 0 0
// SikorskyArrive = 1 ;
19195: LD_ADDR_EXP 18
19199: PUSH
19200: LD_INT 1
19202: ST_TO_ADDR
// PrepareSikorskyArmy ;
19203: CALL 5524 0 0
// end ;
19207: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
19208: LD_EXP 17
19212: PPUSH
19213: LD_INT 5
19215: PPUSH
19216: CALL_OW 308
19220: IFFALSE 19412
19222: GO 19224
19224: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
19225: LD_EXP 17
19229: PPUSH
19230: CALL_OW 87
// DialogueOn ;
19234: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
19238: LD_EXP 16
19242: PPUSH
19243: LD_STRING D5-Sik-1
19245: PPUSH
19246: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
19250: LD_EXP 1
19254: PPUSH
19255: LD_STRING D5-JMM-1a
19257: PPUSH
19258: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
19262: LD_EXP 16
19266: PPUSH
19267: LD_STRING D5-Sik-2
19269: PPUSH
19270: CALL_OW 88
// case query ( QSikorski ) of 1 :
19274: LD_STRING QSikorski
19276: PPUSH
19277: CALL_OW 97
19281: PUSH
19282: LD_INT 1
19284: DOUBLE
19285: EQUAL
19286: IFTRUE 19290
19288: GO 19313
19290: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
19291: LD_EXP 16
19295: PPUSH
19296: LD_STRING D5a-Sik-1
19298: PPUSH
19299: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
19303: LD_ADDR_EXP 19
19307: PUSH
19308: LD_INT 2100
19310: ST_TO_ADDR
// end ; 2 :
19311: GO 19400
19313: LD_INT 2
19315: DOUBLE
19316: EQUAL
19317: IFTRUE 19321
19319: GO 19344
19321: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
19322: LD_EXP 16
19326: PPUSH
19327: LD_STRING D5b-Sik-1
19329: PPUSH
19330: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
19334: LD_ADDR_EXP 19
19338: PUSH
19339: LD_INT 10500
19341: ST_TO_ADDR
// end ; 3 :
19342: GO 19400
19344: LD_INT 3
19346: DOUBLE
19347: EQUAL
19348: IFTRUE 19352
19350: GO 19399
19352: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
19353: LD_EXP 16
19357: PPUSH
19358: LD_STRING D5c-Sik-1
19360: PPUSH
19361: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
19365: LD_EXP 1
19369: PPUSH
19370: LD_STRING D5c-JMM-1
19372: PPUSH
19373: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
19377: LD_EXP 16
19381: PPUSH
19382: LD_STRING D5c-Sik-2
19384: PPUSH
19385: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
19389: LD_ADDR_EXP 19
19393: PUSH
19394: LD_INT 10500
19396: ST_TO_ADDR
// end ; end ;
19397: GO 19400
19399: POP
// DialogueOff ;
19400: CALL_OW 7
// timerStatus = 1 ;
19404: LD_ADDR_EXP 35
19408: PUSH
19409: LD_INT 1
19411: ST_TO_ADDR
// end ;
19412: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
19413: LD_EXP 19
19417: PUSH
19418: LD_INT 35
19420: LESS
19421: IFFALSE 19469
19423: GO 19425
19425: DISABLE
// begin timerStatus = 0 ;
19426: LD_ADDR_EXP 35
19430: PUSH
19431: LD_INT 0
19433: ST_TO_ADDR
// DialogueOn ;
19434: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
19438: LD_EXP 16
19442: PPUSH
19443: LD_STRING D6-Sik-1
19445: PPUSH
19446: CALL_OW 88
// DialogueOff ;
19450: CALL_OW 7
// SikorskyAI = 1 ;
19454: LD_ADDR_EXP 20
19458: PUSH
19459: LD_INT 1
19461: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
19462: LD_STRING M2
19464: PPUSH
19465: CALL_OW 337
// end ;
19469: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
19470: LD_EXP 17
19474: PPUSH
19475: LD_INT 18
19477: PPUSH
19478: CALL_OW 308
19482: IFFALSE 19566
19484: GO 19486
19486: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
19487: LD_EXP 16
19491: PPUSH
19492: LD_STRING D7-Sik-1
19494: PPUSH
19495: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
19499: LD_EXP 1
19503: PPUSH
19504: LD_INT 24
19506: PPUSH
19507: CALL_OW 308
19511: PUSH
19512: LD_EXP 1
19516: PPUSH
19517: CALL_OW 310
19521: OR
19522: IFFALSE 19546
// begin Say ( Sikorski , D7a-Sik-1 ) ;
19524: LD_EXP 16
19528: PPUSH
19529: LD_STRING D7a-Sik-1
19531: PPUSH
19532: CALL_OW 88
// SikorskyStatus = 1 ;
19536: LD_ADDR_EXP 21
19540: PUSH
19541: LD_INT 1
19543: ST_TO_ADDR
// end else
19544: GO 19566
// begin Say ( Sikorski , D7b-Sik-1 ) ;
19546: LD_EXP 16
19550: PPUSH
19551: LD_STRING D7b-Sik-1
19553: PPUSH
19554: CALL_OW 88
// SikorskyStatus = 2 ;
19558: LD_ADDR_EXP 21
19562: PUSH
19563: LD_INT 2
19565: ST_TO_ADDR
// end ; end ;
19566: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19567: LD_EXP 36
19571: PUSH
19572: LD_INT 1
19574: EQUAL
19575: IFFALSE 19684
19577: GO 19579
19579: DISABLE
19580: LD_INT 0
19582: PPUSH
// begin enable ;
19583: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19584: LD_ADDR_VAR 0 1
19588: PUSH
19589: LD_INT 22
19591: PUSH
19592: LD_INT 3
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PPUSH
19599: CALL_OW 69
19603: PUSH
19604: FOR_IN
19605: IFFALSE 19632
// if IsInArea ( i , RussianEscape ) then
19607: LD_VAR 0 1
19611: PPUSH
19612: LD_INT 22
19614: PPUSH
19615: CALL_OW 308
19619: IFFALSE 19630
// RemoveUnit ( i ) ;
19621: LD_VAR 0 1
19625: PPUSH
19626: CALL_OW 64
19630: GO 19604
19632: POP
19633: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19634: LD_ADDR_VAR 0 1
19638: PUSH
19639: LD_INT 22
19641: PUSH
19642: LD_INT 6
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PPUSH
19649: CALL_OW 69
19653: PUSH
19654: FOR_IN
19655: IFFALSE 19682
// if IsInArea ( i , RussianEscape ) then
19657: LD_VAR 0 1
19661: PPUSH
19662: LD_INT 22
19664: PPUSH
19665: CALL_OW 308
19669: IFFALSE 19680
// RemoveUnit ( i ) ;
19671: LD_VAR 0 1
19675: PPUSH
19676: CALL_OW 64
19680: GO 19654
19682: POP
19683: POP
// end ; end_of_file
19684: PPOPN 1
19686: END
// on BuildingComplete ( building ) do var tmp , un ;
19687: LD_INT 0
19689: PPUSH
19690: PPUSH
// begin if GetSide ( building ) = 3 then
19691: LD_VAR 0 1
19695: PPUSH
19696: CALL_OW 255
19700: PUSH
19701: LD_INT 3
19703: EQUAL
19704: IFFALSE 20191
// begin if GetBType ( building ) = b_depot then
19706: LD_VAR 0 1
19710: PPUSH
19711: CALL_OW 266
19715: PUSH
19716: LD_INT 0
19718: EQUAL
19719: IFFALSE 19787
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
19721: LD_VAR 0 1
19725: PPUSH
19726: CALL_OW 274
19730: PPUSH
19731: LD_INT 1
19733: PPUSH
19734: LD_INT 5000
19736: PPUSH
19737: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
19741: LD_VAR 0 1
19745: PPUSH
19746: CALL_OW 274
19750: PPUSH
19751: LD_INT 2
19753: PPUSH
19754: LD_INT 5000
19756: PPUSH
19757: CALL_OW 277
// SetBName ( building , konev ) ;
19761: LD_VAR 0 1
19765: PPUSH
19766: LD_STRING konev
19768: PPUSH
19769: CALL_OW 500
// ruDepot = building ;
19773: LD_ADDR_EXP 28
19777: PUSH
19778: LD_VAR 0 1
19782: ST_TO_ADDR
// BuildRussianBase ;
19783: CALL 7405 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
19787: LD_VAR 0 1
19791: PPUSH
19792: CALL_OW 266
19796: PUSH
19797: LD_INT 0
19799: EQUAL
19800: PUSH
19801: LD_VAR 0 1
19805: PPUSH
19806: CALL_OW 266
19810: PUSH
19811: LD_INT 2
19813: EQUAL
19814: OR
19815: PUSH
19816: LD_VAR 0 1
19820: PPUSH
19821: CALL_OW 266
19825: PUSH
19826: LD_INT 4
19828: EQUAL
19829: OR
19830: IFFALSE 19841
// ComUpgrade ( building ) ;
19832: LD_VAR 0 1
19836: PPUSH
19837: CALL_OW 146
// if GetBType ( building ) = b_lab then
19841: LD_VAR 0 1
19845: PPUSH
19846: CALL_OW 266
19850: PUSH
19851: LD_INT 6
19853: EQUAL
19854: IFFALSE 19905
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19856: LD_VAR 0 1
19860: PPUSH
19861: LD_INT 10
19863: PPUSH
19864: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
19868: LD_VAR 0 1
19872: PPUSH
19873: LD_INT 12
19875: PPUSH
19876: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
19880: LD_INT 3
19882: PPUSH
19883: LD_VAR 0 1
19887: PPUSH
19888: LD_INT 3
19890: PPUSH
19891: CALL 7960 0 3
// ruLab = building ;
19895: LD_ADDR_EXP 29
19899: PUSH
19900: LD_VAR 0 1
19904: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
19905: LD_VAR 0 1
19909: PPUSH
19910: CALL_OW 266
19914: PUSH
19915: LD_INT 32
19917: EQUAL
19918: IFFALSE 20036
// begin uc_side = 3 ;
19920: LD_ADDR_OWVAR 20
19924: PUSH
19925: LD_INT 3
19927: ST_TO_ADDR
// uc_nation = 3 ;
19928: LD_ADDR_OWVAR 21
19932: PUSH
19933: LD_INT 3
19935: ST_TO_ADDR
// hc_gallery =  ;
19936: LD_ADDR_OWVAR 33
19940: PUSH
19941: LD_STRING 
19943: ST_TO_ADDR
// hc_name =  ;
19944: LD_ADDR_OWVAR 26
19948: PUSH
19949: LD_STRING 
19951: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
19952: LD_INT 0
19954: PPUSH
19955: LD_INT 1
19957: PPUSH
19958: LD_EXP 25
19962: PPUSH
19963: LD_EXP 26
19967: PPUSH
19968: CALL_OW 12
19972: PPUSH
19973: CALL_OW 380
// un = CreateHuman ;
19977: LD_ADDR_VAR 0 3
19981: PUSH
19982: CALL_OW 44
19986: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
19987: LD_VAR 0 3
19991: PPUSH
19992: LD_VAR 0 1
19996: PPUSH
19997: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20001: LD_VAR 0 1
20005: PPUSH
20006: LD_INT 43
20008: PUSH
20009: LD_INT 44
20011: PUSH
20012: LD_INT 46
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 1
20022: PPUSH
20023: LD_INT 3
20025: PPUSH
20026: CALL_OW 12
20030: ARRAY
20031: PPUSH
20032: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
20036: LD_VAR 0 1
20040: PPUSH
20041: CALL_OW 266
20045: PUSH
20046: LD_INT 33
20048: EQUAL
20049: IFFALSE 20086
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20051: LD_VAR 0 1
20055: PPUSH
20056: LD_INT 43
20058: PUSH
20059: LD_INT 44
20061: PUSH
20062: LD_INT 46
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 1
20072: PPUSH
20073: LD_INT 3
20075: PPUSH
20076: CALL_OW 12
20080: ARRAY
20081: PPUSH
20082: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
20086: LD_VAR 0 1
20090: PPUSH
20091: CALL_OW 266
20095: PUSH
20096: LD_INT 24
20098: EQUAL
20099: IFFALSE 20109
// russianAI = 1 ;
20101: LD_ADDR_EXP 27
20105: PUSH
20106: LD_INT 1
20108: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
20109: LD_EXP 31
20113: PUSH
20114: LD_INT 0
20116: GREATER
20117: IFFALSE 20191
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20119: LD_ADDR_EXP 31
20123: PUSH
20124: LD_EXP 31
20128: PPUSH
20129: LD_INT 1
20131: PPUSH
20132: CALL_OW 3
20136: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20137: LD_ADDR_EXP 31
20141: PUSH
20142: LD_EXP 31
20146: PPUSH
20147: LD_INT 1
20149: PPUSH
20150: CALL_OW 3
20154: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20155: LD_ADDR_EXP 31
20159: PUSH
20160: LD_EXP 31
20164: PPUSH
20165: LD_INT 1
20167: PPUSH
20168: CALL_OW 3
20172: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20173: LD_ADDR_EXP 31
20177: PUSH
20178: LD_EXP 31
20182: PPUSH
20183: LD_INT 1
20185: PPUSH
20186: CALL_OW 3
20190: ST_TO_ADDR
// end ; end ; end ;
20191: PPOPN 3
20193: END
// on UpgradeComplete ( building ) do var i ;
20194: LD_INT 0
20196: PPUSH
// begin if GetSide ( building ) = 3 then
20197: LD_VAR 0 1
20201: PPUSH
20202: CALL_OW 255
20206: PUSH
20207: LD_INT 3
20209: EQUAL
20210: IFFALSE 20391
// begin if GetBType ( building ) = b_factory then
20212: LD_VAR 0 1
20216: PPUSH
20217: CALL_OW 266
20221: PUSH
20222: LD_INT 3
20224: EQUAL
20225: IFFALSE 20292
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
20227: LD_ADDR_VAR 0 2
20231: PUSH
20232: LD_INT 22
20234: PUSH
20235: LD_INT 3
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 25
20244: PUSH
20245: LD_INT 3
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PPUSH
20256: CALL_OW 69
20260: PUSH
20261: FOR_IN
20262: IFFALSE 20280
// ComEnterUnit ( i , building ) ;
20264: LD_VAR 0 2
20268: PPUSH
20269: LD_VAR 0 1
20273: PPUSH
20274: CALL_OW 120
20278: GO 20261
20280: POP
20281: POP
// ruFab = building ;
20282: LD_ADDR_EXP 30
20286: PUSH
20287: LD_VAR 0 1
20291: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
20292: LD_VAR 0 1
20296: PPUSH
20297: CALL_OW 266
20301: PUSH
20302: LD_INT 8
20304: EQUAL
20305: IFFALSE 20362
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20307: LD_ADDR_VAR 0 2
20311: PUSH
20312: LD_INT 22
20314: PUSH
20315: LD_INT 3
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 25
20324: PUSH
20325: LD_INT 4
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PPUSH
20336: CALL_OW 69
20340: PUSH
20341: FOR_IN
20342: IFFALSE 20360
// ComEnterUnit ( i , building ) ;
20344: LD_VAR 0 2
20348: PPUSH
20349: LD_VAR 0 1
20353: PPUSH
20354: CALL_OW 120
20358: GO 20341
20360: POP
20361: POP
// if GetBType ( building ) = b_warehouse then
20362: LD_VAR 0 1
20366: PPUSH
20367: CALL_OW 266
20371: PUSH
20372: LD_INT 1
20374: EQUAL
20375: IFFALSE 20391
// begin ComEnterUnit ( Borodin , building ) ;
20377: LD_EXP 24
20381: PPUSH
20382: LD_VAR 0 1
20386: PPUSH
20387: CALL_OW 120
// end ; end ; end ;
20391: PPOPN 2
20393: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
20394: LD_VAR 0 1
20398: PPUSH
20399: CALL_OW 247
20403: PUSH
20404: LD_INT 2
20406: EQUAL
20407: PUSH
20408: LD_VAR 0 1
20412: PPUSH
20413: CALL_OW 263
20417: PUSH
20418: LD_INT 3
20420: EQUAL
20421: AND
20422: PUSH
20423: LD_EXP 41
20427: PUSH
20428: LD_INT 0
20430: EQUAL
20431: AND
20432: IFFALSE 20550
// begin varEvent1 = 1 ;
20434: LD_ADDR_EXP 41
20438: PUSH
20439: LD_INT 1
20441: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
20442: LD_VAR 0 1
20446: PPUSH
20447: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
20451: LD_INT 22
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 21
20463: PUSH
20464: LD_INT 1
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 2
20473: PUSH
20474: LD_INT 25
20476: PUSH
20477: LD_INT 1
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 25
20486: PUSH
20487: LD_INT 2
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 25
20496: PUSH
20497: LD_INT 3
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 25
20506: PUSH
20507: LD_INT 4
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: LIST
20525: PPUSH
20526: CALL_OW 69
20530: PUSH
20531: LD_EXP 1
20535: PUSH
20536: EMPTY
20537: LIST
20538: DIFF
20539: PPUSH
20540: LD_STRING DC-Sol1-1
20542: PPUSH
20543: LD_STRING DC-FSol1-1
20545: PPUSH
20546: CALL 6800 0 3
// end ; end ;
20550: PPOPN 1
20552: END
// on UnitDestroyed ( unit ) do var i ;
20553: LD_INT 0
20555: PPUSH
// begin if GetSide ( unit ) = 3 then
20556: LD_VAR 0 1
20560: PPUSH
20561: CALL_OW 255
20565: PUSH
20566: LD_INT 3
20568: EQUAL
20569: IFFALSE 21339
// begin if GetType ( unit ) = unit_building then
20571: LD_VAR 0 1
20575: PPUSH
20576: CALL_OW 247
20580: PUSH
20581: LD_INT 3
20583: EQUAL
20584: IFFALSE 21276
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
20586: LD_VAR 0 1
20590: PPUSH
20591: CALL_OW 266
20595: PUSH
20596: LD_INT 31
20598: EQUAL
20599: PUSH
20600: LD_VAR 0 1
20604: PPUSH
20605: CALL_OW 266
20609: PUSH
20610: LD_INT 32
20612: EQUAL
20613: OR
20614: PUSH
20615: LD_VAR 0 1
20619: PPUSH
20620: CALL_OW 266
20624: PUSH
20625: LD_INT 36
20627: EQUAL
20628: OR
20629: PUSH
20630: LD_VAR 0 1
20634: PPUSH
20635: CALL_OW 266
20639: PUSH
20640: LD_INT 0
20642: EQUAL
20643: OR
20644: PUSH
20645: LD_VAR 0 1
20649: PPUSH
20650: CALL_OW 266
20654: PUSH
20655: LD_INT 24
20657: EQUAL
20658: OR
20659: PUSH
20660: LD_VAR 0 1
20664: PPUSH
20665: CALL_OW 266
20669: PUSH
20670: LD_INT 17
20672: EQUAL
20673: OR
20674: PUSH
20675: LD_VAR 0 1
20679: PPUSH
20680: CALL_OW 266
20684: PUSH
20685: LD_INT 25
20687: EQUAL
20688: OR
20689: PUSH
20690: LD_VAR 0 1
20694: PPUSH
20695: CALL_OW 266
20699: PUSH
20700: LD_INT 19
20702: EQUAL
20703: OR
20704: PUSH
20705: LD_VAR 0 1
20709: PPUSH
20710: CALL_OW 266
20714: PUSH
20715: LD_INT 20
20717: EQUAL
20718: OR
20719: PUSH
20720: LD_VAR 0 1
20724: PPUSH
20725: CALL_OW 266
20729: PUSH
20730: LD_INT 18
20732: EQUAL
20733: OR
20734: PUSH
20735: LD_VAR 0 1
20739: PPUSH
20740: CALL_OW 266
20744: PUSH
20745: LD_INT 21
20747: EQUAL
20748: OR
20749: PUSH
20750: LD_VAR 0 1
20754: PPUSH
20755: CALL_OW 266
20759: PUSH
20760: LD_INT 23
20762: EQUAL
20763: OR
20764: PUSH
20765: LD_VAR 0 1
20769: PPUSH
20770: CALL_OW 266
20774: PUSH
20775: LD_INT 16
20777: EQUAL
20778: OR
20779: PUSH
20780: LD_VAR 0 1
20784: PPUSH
20785: CALL_OW 266
20789: PUSH
20790: LD_INT 6
20792: EQUAL
20793: OR
20794: PUSH
20795: LD_VAR 0 1
20799: PPUSH
20800: CALL_OW 266
20804: PUSH
20805: LD_INT 29
20807: EQUAL
20808: OR
20809: PUSH
20810: LD_VAR 0 1
20814: PPUSH
20815: CALL_OW 266
20819: PUSH
20820: LD_INT 26
20822: EQUAL
20823: OR
20824: PUSH
20825: LD_VAR 0 1
20829: PPUSH
20830: CALL_OW 266
20834: PUSH
20835: LD_INT 30
20837: EQUAL
20838: OR
20839: PUSH
20840: LD_VAR 0 1
20844: PPUSH
20845: CALL_OW 266
20849: PUSH
20850: LD_INT 28
20852: EQUAL
20853: OR
20854: PUSH
20855: LD_VAR 0 1
20859: PPUSH
20860: CALL_OW 266
20864: PUSH
20865: LD_INT 27
20867: EQUAL
20868: OR
20869: PUSH
20870: LD_VAR 0 1
20874: PPUSH
20875: CALL_OW 266
20879: PUSH
20880: LD_INT 33
20882: EQUAL
20883: OR
20884: PUSH
20885: LD_VAR 0 1
20889: PPUSH
20890: CALL_OW 266
20894: PUSH
20895: LD_INT 2
20897: EQUAL
20898: OR
20899: PUSH
20900: LD_VAR 0 1
20904: PPUSH
20905: CALL_OW 266
20909: PUSH
20910: LD_INT 4
20912: EQUAL
20913: OR
20914: IFFALSE 21000
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20916: LD_ADDR_EXP 31
20920: PUSH
20921: LD_EXP 31
20925: PUSH
20926: LD_VAR 0 1
20930: PPUSH
20931: CALL_OW 266
20935: ADD
20936: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20937: LD_ADDR_EXP 31
20941: PUSH
20942: LD_EXP 31
20946: PUSH
20947: LD_VAR 0 1
20951: PPUSH
20952: CALL_OW 250
20956: ADD
20957: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20958: LD_ADDR_EXP 31
20962: PUSH
20963: LD_EXP 31
20967: PUSH
20968: LD_VAR 0 1
20972: PPUSH
20973: CALL_OW 251
20977: ADD
20978: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20979: LD_ADDR_EXP 31
20983: PUSH
20984: LD_EXP 31
20988: PUSH
20989: LD_VAR 0 1
20993: PPUSH
20994: CALL_OW 254
20998: ADD
20999: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21000: LD_VAR 0 1
21004: PPUSH
21005: CALL_OW 266
21009: PUSH
21010: LD_INT 1
21012: EQUAL
21013: IFFALSE 21092
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21015: LD_ADDR_EXP 31
21019: PUSH
21020: LD_EXP 31
21024: PUSH
21025: LD_INT 0
21027: ADD
21028: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21029: LD_ADDR_EXP 31
21033: PUSH
21034: LD_EXP 31
21038: PUSH
21039: LD_VAR 0 1
21043: PPUSH
21044: CALL_OW 250
21048: ADD
21049: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21050: LD_ADDR_EXP 31
21054: PUSH
21055: LD_EXP 31
21059: PUSH
21060: LD_VAR 0 1
21064: PPUSH
21065: CALL_OW 251
21069: ADD
21070: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21071: LD_ADDR_EXP 31
21075: PUSH
21076: LD_EXP 31
21080: PUSH
21081: LD_VAR 0 1
21085: PPUSH
21086: CALL_OW 254
21090: ADD
21091: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
21092: LD_VAR 0 1
21096: PPUSH
21097: CALL_OW 266
21101: PUSH
21102: LD_INT 3
21104: EQUAL
21105: IFFALSE 21184
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
21107: LD_ADDR_EXP 31
21111: PUSH
21112: LD_EXP 31
21116: PUSH
21117: LD_INT 2
21119: ADD
21120: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21121: LD_ADDR_EXP 31
21125: PUSH
21126: LD_EXP 31
21130: PUSH
21131: LD_VAR 0 1
21135: PPUSH
21136: CALL_OW 250
21140: ADD
21141: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21142: LD_ADDR_EXP 31
21146: PUSH
21147: LD_EXP 31
21151: PUSH
21152: LD_VAR 0 1
21156: PPUSH
21157: CALL_OW 251
21161: ADD
21162: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21163: LD_ADDR_EXP 31
21167: PUSH
21168: LD_EXP 31
21172: PUSH
21173: LD_VAR 0 1
21177: PPUSH
21178: CALL_OW 254
21182: ADD
21183: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
21184: LD_VAR 0 1
21188: PPUSH
21189: CALL_OW 266
21193: PUSH
21194: LD_INT 5
21196: EQUAL
21197: IFFALSE 21276
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
21199: LD_ADDR_EXP 31
21203: PUSH
21204: LD_EXP 31
21208: PUSH
21209: LD_INT 4
21211: ADD
21212: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21213: LD_ADDR_EXP 31
21217: PUSH
21218: LD_EXP 31
21222: PUSH
21223: LD_VAR 0 1
21227: PPUSH
21228: CALL_OW 250
21232: ADD
21233: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21234: LD_ADDR_EXP 31
21238: PUSH
21239: LD_EXP 31
21243: PUSH
21244: LD_VAR 0 1
21248: PPUSH
21249: CALL_OW 251
21253: ADD
21254: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21255: LD_ADDR_EXP 31
21259: PUSH
21260: LD_EXP 31
21264: PUSH
21265: LD_VAR 0 1
21269: PPUSH
21270: CALL_OW 254
21274: ADD
21275: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
21276: LD_VAR 0 1
21280: PPUSH
21281: CALL_OW 247
21285: PUSH
21286: LD_INT 1
21288: EQUAL
21289: IFFALSE 21339
// begin for i in defenders_list do
21291: LD_ADDR_VAR 0 2
21295: PUSH
21296: LD_EXP 32
21300: PUSH
21301: FOR_IN
21302: IFFALSE 21337
// if i = unit then
21304: LD_VAR 0 2
21308: PUSH
21309: LD_VAR 0 1
21313: EQUAL
21314: IFFALSE 21335
// defenders_list = defenders_list diff [ unit ] ;
21316: LD_ADDR_EXP 32
21320: PUSH
21321: LD_EXP 32
21325: PUSH
21326: LD_VAR 0 1
21330: PUSH
21331: EMPTY
21332: LIST
21333: DIFF
21334: ST_TO_ADDR
21335: GO 21301
21337: POP
21338: POP
// end ; end ; end ; end_of_file
21339: PPOPN 2
21341: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21342: GO 21344
21344: DISABLE
21345: LD_INT 0
21347: PPUSH
// begin enemyWayX = [ ] ;
21348: LD_ADDR_EXP 45
21352: PUSH
21353: EMPTY
21354: ST_TO_ADDR
// enemyWayY = [ ] ;
21355: LD_ADDR_EXP 46
21359: PUSH
21360: EMPTY
21361: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
21362: LD_ADDR_VAR 0 1
21366: PUSH
21367: LD_INT 1
21369: PPUSH
21370: LD_INT 3
21372: PPUSH
21373: CALL_OW 12
21377: ST_TO_ADDR
// if rnd = 1 then
21378: LD_VAR 0 1
21382: PUSH
21383: LD_INT 1
21385: EQUAL
21386: IFFALSE 21426
// begin enemyWayX = [ 73 , 46 , 29 ] ;
21388: LD_ADDR_EXP 45
21392: PUSH
21393: LD_INT 73
21395: PUSH
21396: LD_INT 46
21398: PUSH
21399: LD_INT 29
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: LIST
21406: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
21407: LD_ADDR_EXP 46
21411: PUSH
21412: LD_INT 71
21414: PUSH
21415: LD_INT 43
21417: PUSH
21418: LD_INT 29
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: LIST
21425: ST_TO_ADDR
// end ; if rnd = 2 then
21426: LD_VAR 0 1
21430: PUSH
21431: LD_INT 2
21433: EQUAL
21434: IFFALSE 21458
// begin enemyWayX = [ 64 ] ;
21436: LD_ADDR_EXP 45
21440: PUSH
21441: LD_INT 64
21443: PUSH
21444: EMPTY
21445: LIST
21446: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
21447: LD_ADDR_EXP 46
21451: PUSH
21452: LD_INT 43
21454: PUSH
21455: EMPTY
21456: LIST
21457: ST_TO_ADDR
// end ; if rnd = 3 then
21458: LD_VAR 0 1
21462: PUSH
21463: LD_INT 3
21465: EQUAL
21466: IFFALSE 21490
// begin enemyWayX = [ 80 ] ;
21468: LD_ADDR_EXP 45
21472: PUSH
21473: LD_INT 80
21475: PUSH
21476: EMPTY
21477: LIST
21478: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
21479: LD_ADDR_EXP 46
21483: PUSH
21484: LD_INT 28
21486: PUSH
21487: EMPTY
21488: LIST
21489: ST_TO_ADDR
// end ; enable ;
21490: ENABLE
// end ;
21491: PPOPN 1
21493: END
// every 0 0$1 do
21494: GO 21496
21496: DISABLE
// begin enable ;
21497: ENABLE
// if escapeAvalaible = 0 then
21498: LD_EXP 36
21502: PUSH
21503: LD_INT 0
21505: EQUAL
21506: IFFALSE 21518
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21508: LD_INT 3
21510: PPUSH
21511: LD_INT 6
21513: PPUSH
21514: CALL 8201 0 2
// if escapeAvalaible = 0 then
21518: LD_EXP 36
21522: PUSH
21523: LD_INT 0
21525: EQUAL
21526: IFFALSE 21538
// DefenseBase ( 1 , RussianBaseTerritory ) ;
21528: LD_INT 1
21530: PPUSH
21531: LD_INT 24
21533: PPUSH
21534: CALL 8861 0 2
// if russianAI = 1 then
21538: LD_EXP 27
21542: PUSH
21543: LD_INT 1
21545: EQUAL
21546: IFFALSE 21616
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
21548: LD_INT 3
21550: PPUSH
21551: LD_INT 7
21553: PPUSH
21554: LD_INT 6
21556: PPUSH
21557: LD_EXP 29
21561: PPUSH
21562: CALL 10950 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
21566: LD_INT 3
21568: PPUSH
21569: LD_EXP 28
21573: PPUSH
21574: LD_INT 6
21576: PPUSH
21577: LD_EXP 31
21581: PPUSH
21582: CALL 10544 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21586: LD_INT 3
21588: PPUSH
21589: LD_INT 26
21591: PPUSH
21592: LD_EXP 45
21596: PPUSH
21597: LD_EXP 46
21601: PPUSH
21602: CALL 9412 0 4
// AttackNearBuildings ( 3 , 1 ) ;
21606: LD_INT 3
21608: PPUSH
21609: LD_INT 1
21611: PPUSH
21612: CALL 11494 0 2
// end ; if SikorskyArrive = 1 then
21616: LD_EXP 18
21620: PUSH
21621: LD_INT 1
21623: EQUAL
21624: IFFALSE 21642
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
21626: LD_INT 3
21628: PPUSH
21629: LD_INT 10
21631: PPUSH
21632: LD_INT 53
21634: PPUSH
21635: LD_INT 59
21637: PPUSH
21638: CALL 9209 0 4
// end ;
21642: END
// every 0 0$1 trigger russianAI = 1 do var i ;
21643: LD_EXP 27
21647: PUSH
21648: LD_INT 1
21650: EQUAL
21651: IFFALSE 21927
21653: GO 21655
21655: DISABLE
21656: LD_INT 0
21658: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21659: LD_ADDR_VAR 0 1
21663: PUSH
21664: LD_INT 22
21666: PUSH
21667: LD_INT 3
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 21
21676: PUSH
21677: LD_INT 3
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 30
21686: PUSH
21687: LD_INT 32
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: LD_INT 3
21696: PUSH
21697: LD_INT 2
21699: PUSH
21700: LD_INT 35
21702: PUSH
21703: LD_INT 43
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 35
21712: PUSH
21713: LD_INT 44
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 35
21722: PUSH
21723: LD_INT 46
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: PPUSH
21746: CALL_OW 69
21750: PUSH
21751: FOR_IN
21752: IFFALSE 21791
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21754: LD_VAR 0 1
21758: PPUSH
21759: LD_INT 43
21761: PUSH
21762: LD_INT 44
21764: PUSH
21765: LD_INT 46
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 1
21775: PPUSH
21776: LD_INT 3
21778: PPUSH
21779: CALL_OW 12
21783: ARRAY
21784: PPUSH
21785: CALL_OW 431
21789: GO 21751
21791: POP
21792: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21793: LD_ADDR_VAR 0 1
21797: PUSH
21798: LD_INT 22
21800: PUSH
21801: LD_INT 3
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 21
21810: PUSH
21811: LD_INT 3
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 30
21820: PUSH
21821: LD_INT 33
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 3
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: LD_INT 35
21836: PUSH
21837: LD_INT 43
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 35
21846: PUSH
21847: LD_INT 44
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 35
21856: PUSH
21857: LD_INT 46
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: PPUSH
21880: CALL_OW 69
21884: PUSH
21885: FOR_IN
21886: IFFALSE 21925
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21888: LD_VAR 0 1
21892: PPUSH
21893: LD_INT 43
21895: PUSH
21896: LD_INT 44
21898: PUSH
21899: LD_INT 46
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 1
21909: PPUSH
21910: LD_INT 3
21912: PPUSH
21913: CALL_OW 12
21917: ARRAY
21918: PPUSH
21919: CALL_OW 431
21923: GO 21885
21925: POP
21926: POP
// end ;
21927: PPOPN 1
21929: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
21930: LD_EXP 24
21934: PPUSH
21935: CALL_OW 310
21939: NOT
21940: PUSH
21941: LD_EXP 28
21945: PPUSH
21946: CALL_OW 302
21950: AND
21951: PUSH
21952: LD_EXP 28
21956: PPUSH
21957: CALL_OW 255
21961: PUSH
21962: LD_INT 3
21964: EQUAL
21965: AND
21966: IFFALSE 21986
21968: GO 21970
21970: DISABLE
// begin enable ;
21971: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
21972: LD_EXP 24
21976: PPUSH
21977: LD_EXP 28
21981: PPUSH
21982: CALL_OW 120
// end ;
21986: END
// every 0 0$1 trigger SikorskyAI = 1 do
21987: LD_EXP 20
21991: PUSH
21992: LD_INT 1
21994: EQUAL
21995: IFFALSE 22030
21997: GO 21999
21999: DISABLE
// begin enable ;
22000: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
22001: LD_INT 4
22003: PPUSH
22004: LD_INT 10
22006: PPUSH
22007: LD_INT 93
22009: PPUSH
22010: LD_INT 93
22012: PPUSH
22013: CALL 9209 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
22017: LD_INT 4
22019: PPUSH
22020: LD_INT 11
22022: PPUSH
22023: LD_INT 3
22025: PPUSH
22026: CALL 15706 0 3
// end ;
22030: END
// every 0 0$1 trigger SikorskyAI = 1 do
22031: LD_EXP 20
22035: PUSH
22036: LD_INT 1
22038: EQUAL
22039: IFFALSE 22051
22041: GO 22043
22043: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
22044: LD_INT 4
22046: PPUSH
22047: CALL 10216 0 1
22051: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22052: LD_EXP 27
22056: PUSH
22057: LD_INT 1
22059: EQUAL
22060: PUSH
22061: LD_EXP 30
22065: PPUSH
22066: CALL_OW 302
22070: AND
22071: PUSH
22072: LD_EXP 30
22076: PPUSH
22077: CALL_OW 255
22081: PUSH
22082: LD_INT 3
22084: EQUAL
22085: AND
22086: PUSH
22087: LD_INT 22
22089: PUSH
22090: LD_INT 3
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 21
22099: PUSH
22100: LD_INT 2
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 33
22109: PUSH
22110: LD_INT 3
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: LIST
22121: PPUSH
22122: CALL_OW 69
22126: PUSH
22127: LD_INT 0
22129: EQUAL
22130: AND
22131: IFFALSE 22365
22133: GO 22135
22135: DISABLE
// begin enable ;
22136: ENABLE
// if Difficulty = 1 then
22137: LD_OWVAR 67
22141: PUSH
22142: LD_INT 1
22144: EQUAL
22145: IFFALSE 22213
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
22147: LD_INT 3
22149: PPUSH
22150: LD_EXP 30
22154: PPUSH
22155: LD_INT 5
22157: PPUSH
22158: LD_INT 8
22160: PPUSH
22161: CALL_OW 12
22165: PPUSH
22166: LD_INT 43
22168: PUSH
22169: LD_INT 43
22171: PUSH
22172: LD_INT 43
22174: PUSH
22175: LD_INT 43
22177: PUSH
22178: LD_INT 44
22180: PUSH
22181: LD_INT 44
22183: PUSH
22184: LD_INT 44
22186: PUSH
22187: LD_INT 46
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: PPUSH
22200: LD_INT 1
22202: PPUSH
22203: LD_INT 3
22205: PPUSH
22206: LD_INT 24
22208: PPUSH
22209: CALL 9055 0 7
// if Difficulty = 2 then
22213: LD_OWVAR 67
22217: PUSH
22218: LD_INT 2
22220: EQUAL
22221: IFFALSE 22289
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
22223: LD_INT 3
22225: PPUSH
22226: LD_EXP 30
22230: PPUSH
22231: LD_INT 6
22233: PPUSH
22234: LD_INT 8
22236: PPUSH
22237: CALL_OW 12
22241: PPUSH
22242: LD_INT 43
22244: PUSH
22245: LD_INT 43
22247: PUSH
22248: LD_INT 44
22250: PUSH
22251: LD_INT 44
22253: PUSH
22254: LD_INT 44
22256: PUSH
22257: LD_INT 44
22259: PUSH
22260: LD_INT 46
22262: PUSH
22263: LD_INT 46
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: PPUSH
22276: LD_INT 1
22278: PPUSH
22279: LD_INT 3
22281: PPUSH
22282: LD_INT 24
22284: PPUSH
22285: CALL 9055 0 7
// if Difficulty = 3 then
22289: LD_OWVAR 67
22293: PUSH
22294: LD_INT 3
22296: EQUAL
22297: IFFALSE 22365
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
22299: LD_INT 3
22301: PPUSH
22302: LD_EXP 30
22306: PPUSH
22307: LD_INT 7
22309: PPUSH
22310: LD_INT 8
22312: PPUSH
22313: CALL_OW 12
22317: PPUSH
22318: LD_INT 43
22320: PUSH
22321: LD_INT 43
22323: PUSH
22324: LD_INT 44
22326: PUSH
22327: LD_INT 44
22329: PUSH
22330: LD_INT 44
22332: PUSH
22333: LD_INT 46
22335: PUSH
22336: LD_INT 46
22338: PUSH
22339: LD_INT 46
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: PPUSH
22352: LD_INT 1
22354: PPUSH
22355: LD_INT 3
22357: PPUSH
22358: LD_INT 24
22360: PPUSH
22361: CALL 9055 0 7
// end ;
22365: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
22366: LD_EXP 38
22370: PUSH
22371: LD_INT 1
22373: EQUAL
22374: IFFALSE 22456
22376: GO 22378
22378: DISABLE
22379: LD_INT 0
22381: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
22382: LD_ADDR_VAR 0 1
22386: PUSH
22387: LD_INT 22
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 21
22399: PUSH
22400: LD_INT 1
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 3
22409: PUSH
22410: LD_INT 24
22412: PUSH
22413: LD_INT 650
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: LIST
22428: PPUSH
22429: CALL_OW 69
22433: PUSH
22434: FOR_IN
22435: IFFALSE 22454
// ComMoveXY ( i , 51 , 12 ) ;
22437: LD_VAR 0 1
22441: PPUSH
22442: LD_INT 51
22444: PPUSH
22445: LD_INT 12
22447: PPUSH
22448: CALL_OW 111
22452: GO 22434
22454: POP
22455: POP
// end ; end_of_file
22456: PPOPN 1
22458: END
// every 3 3$20 trigger firstAttack = 1 do
22459: LD_EXP 33
22463: PUSH
22464: LD_INT 1
22466: EQUAL
22467: IFFALSE 22573
22469: GO 22471
22471: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22472: LD_INT 6
22474: PPUSH
22475: LD_INT 3
22477: PPUSH
22478: LD_INT 5
22480: PPUSH
22481: LD_INT 6
22483: PPUSH
22484: CALL_OW 12
22488: PUSH
22489: LD_INT 5
22491: PPUSH
22492: LD_INT 6
22494: PPUSH
22495: CALL_OW 12
22499: PUSH
22500: LD_INT 5
22502: PPUSH
22503: LD_INT 6
22505: PPUSH
22506: CALL_OW 12
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: LIST
22515: PUSH
22516: LD_OWVAR 67
22520: ARRAY
22521: PPUSH
22522: LD_INT 0
22524: PPUSH
22525: LD_INT 0
22527: PPUSH
22528: LD_INT 0
22530: PPUSH
22531: LD_INT 0
22533: PPUSH
22534: LD_EXP 25
22538: PPUSH
22539: LD_EXP 26
22543: PPUSH
22544: CALL_OW 12
22548: PPUSH
22549: LD_INT 16
22551: PPUSH
22552: LD_INT 7
22554: PPUSH
22555: LD_INT 1
22557: PPUSH
22558: LD_INT 1
22560: PPUSH
22561: LD_INT 3
22563: PPUSH
22564: CALL_OW 12
22568: PPUSH
22569: CALL 11724 0 12
22573: END
// every 3 3$40 trigger firstAttack = 1 do
22574: LD_EXP 33
22578: PUSH
22579: LD_INT 1
22581: EQUAL
22582: IFFALSE 22674
22584: GO 22586
22586: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22587: LD_INT 16
22589: PPUSH
22590: LD_INT 6
22592: PPUSH
22593: LD_INT 3
22595: PPUSH
22596: LD_INT 4
22598: PPUSH
22599: CALL_OW 12
22603: PUSH
22604: LD_INT 4
22606: PPUSH
22607: LD_INT 5
22609: PPUSH
22610: CALL_OW 12
22614: PUSH
22615: LD_INT 5
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: LIST
22622: PUSH
22623: LD_OWVAR 67
22627: ARRAY
22628: PPUSH
22629: LD_EXP 25
22633: PPUSH
22634: LD_EXP 26
22638: PPUSH
22639: CALL_OW 12
22643: PPUSH
22644: LD_INT 3
22646: PPUSH
22647: LD_INT 1
22649: PPUSH
22650: LD_INT 3
22652: PPUSH
22653: LD_INT 44
22655: PUSH
22656: LD_INT 46
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PPUSH
22663: EMPTY
22664: PPUSH
22665: EMPTY
22666: PPUSH
22667: LD_INT 1
22669: PPUSH
22670: CALL 14017 0 11
22674: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
22675: LD_EXP 33
22679: PUSH
22680: LD_INT 1
22682: EQUAL
22683: PUSH
22684: LD_EXP 39
22688: PUSH
22689: LD_INT 0
22691: EQUAL
22692: AND
22693: IFFALSE 22799
22695: GO 22697
22697: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22698: LD_INT 6
22700: PPUSH
22701: LD_INT 3
22703: PPUSH
22704: LD_INT 5
22706: PPUSH
22707: LD_INT 6
22709: PPUSH
22710: CALL_OW 12
22714: PUSH
22715: LD_INT 5
22717: PPUSH
22718: LD_INT 6
22720: PPUSH
22721: CALL_OW 12
22725: PUSH
22726: LD_INT 5
22728: PPUSH
22729: LD_INT 6
22731: PPUSH
22732: CALL_OW 12
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: LIST
22741: PUSH
22742: LD_OWVAR 67
22746: ARRAY
22747: PPUSH
22748: LD_INT 0
22750: PPUSH
22751: LD_INT 0
22753: PPUSH
22754: LD_INT 0
22756: PPUSH
22757: LD_INT 0
22759: PPUSH
22760: LD_EXP 25
22764: PPUSH
22765: LD_EXP 26
22769: PPUSH
22770: CALL_OW 12
22774: PPUSH
22775: LD_INT 16
22777: PPUSH
22778: LD_INT 7
22780: PPUSH
22781: LD_INT 1
22783: PPUSH
22784: LD_INT 1
22786: PPUSH
22787: LD_INT 3
22789: PPUSH
22790: CALL_OW 12
22794: PPUSH
22795: CALL 11724 0 12
22799: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
22800: LD_EXP 33
22804: PUSH
22805: LD_INT 1
22807: EQUAL
22808: PUSH
22809: LD_EXP 39
22813: PUSH
22814: LD_INT 0
22816: EQUAL
22817: AND
22818: IFFALSE 22914
22820: GO 22822
22822: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22823: LD_INT 16
22825: PPUSH
22826: LD_INT 6
22828: PPUSH
22829: LD_INT 5
22831: PPUSH
22832: LD_INT 6
22834: PPUSH
22835: CALL_OW 12
22839: PUSH
22840: LD_INT 6
22842: PPUSH
22843: LD_INT 7
22845: PPUSH
22846: CALL_OW 12
22850: PUSH
22851: LD_INT 7
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: LIST
22858: PUSH
22859: LD_OWVAR 67
22863: ARRAY
22864: PPUSH
22865: LD_EXP 25
22869: PPUSH
22870: LD_EXP 26
22874: PPUSH
22875: CALL_OW 12
22879: PPUSH
22880: LD_INT 3
22882: PPUSH
22883: LD_INT 1
22885: PPUSH
22886: LD_INT 3
22888: PPUSH
22889: LD_INT 43
22891: PUSH
22892: LD_INT 44
22894: PUSH
22895: LD_INT 46
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: LIST
22902: PPUSH
22903: EMPTY
22904: PPUSH
22905: EMPTY
22906: PPUSH
22907: LD_INT 1
22909: PPUSH
22910: CALL 14017 0 11
22914: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
22915: LD_EXP 33
22919: PUSH
22920: LD_INT 1
22922: EQUAL
22923: PUSH
22924: LD_EXP 39
22928: PUSH
22929: LD_INT 0
22931: EQUAL
22932: AND
22933: IFFALSE 23009
22935: GO 22937
22937: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22938: LD_INT 16
22940: PPUSH
22941: LD_INT 6
22943: PPUSH
22944: LD_INT 5
22946: PUSH
22947: LD_INT 6
22949: PUSH
22950: LD_INT 7
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: PUSH
22958: LD_OWVAR 67
22962: ARRAY
22963: PPUSH
22964: LD_EXP 25
22968: PPUSH
22969: LD_EXP 26
22973: PPUSH
22974: CALL_OW 12
22978: PPUSH
22979: LD_INT 3
22981: PPUSH
22982: LD_INT 1
22984: PPUSH
22985: LD_INT 3
22987: PPUSH
22988: LD_INT 44
22990: PUSH
22991: LD_INT 46
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PPUSH
22998: EMPTY
22999: PPUSH
23000: EMPTY
23001: PPUSH
23002: LD_INT 1
23004: PPUSH
23005: CALL 14017 0 11
23009: END
// every 1 1$00 trigger secondAttack = 1 do
23010: LD_EXP 34
23014: PUSH
23015: LD_INT 1
23017: EQUAL
23018: IFFALSE 23100
23020: GO 23022
23022: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23023: LD_INT 6
23025: PPUSH
23026: LD_INT 3
23028: PPUSH
23029: LD_INT 3
23031: PUSH
23032: LD_INT 4
23034: PUSH
23035: LD_INT 5
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: LIST
23042: PUSH
23043: LD_OWVAR 67
23047: ARRAY
23048: PPUSH
23049: LD_INT 0
23051: PPUSH
23052: LD_INT 0
23054: PPUSH
23055: LD_INT 0
23057: PPUSH
23058: LD_INT 0
23060: PPUSH
23061: LD_EXP 25
23065: PPUSH
23066: LD_EXP 26
23070: PPUSH
23071: CALL_OW 12
23075: PPUSH
23076: LD_INT 16
23078: PPUSH
23079: LD_INT 7
23081: PPUSH
23082: LD_INT 1
23084: PPUSH
23085: LD_INT 1
23087: PPUSH
23088: LD_INT 3
23090: PPUSH
23091: CALL_OW 12
23095: PPUSH
23096: CALL 11724 0 12
23100: END
// every 1 1$00 trigger secondAttack = 1 do
23101: LD_EXP 34
23105: PUSH
23106: LD_INT 1
23108: EQUAL
23109: IFFALSE 23213
23111: GO 23113
23113: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23114: LD_INT 16
23116: PPUSH
23117: LD_INT 6
23119: PPUSH
23120: LD_INT 5
23122: PPUSH
23123: LD_INT 8
23125: PPUSH
23126: CALL_OW 12
23130: PUSH
23131: LD_INT 6
23133: PPUSH
23134: LD_INT 9
23136: PPUSH
23137: CALL_OW 12
23141: PUSH
23142: LD_INT 7
23144: PPUSH
23145: LD_INT 9
23147: PPUSH
23148: CALL_OW 12
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: LIST
23157: PUSH
23158: LD_OWVAR 67
23162: ARRAY
23163: PPUSH
23164: LD_EXP 25
23168: PPUSH
23169: LD_EXP 26
23173: PPUSH
23174: CALL_OW 12
23178: PPUSH
23179: LD_INT 3
23181: PPUSH
23182: LD_INT 1
23184: PPUSH
23185: LD_INT 3
23187: PPUSH
23188: LD_INT 43
23190: PUSH
23191: LD_INT 44
23193: PUSH
23194: LD_INT 46
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: LIST
23201: PPUSH
23202: EMPTY
23203: PPUSH
23204: EMPTY
23205: PPUSH
23206: LD_INT 1
23208: PPUSH
23209: CALL 14017 0 11
23213: END
// every 22 22$0 trigger SikorskyArrive = 0 do
23214: LD_EXP 18
23218: PUSH
23219: LD_INT 0
23221: EQUAL
23222: IFFALSE 23304
23224: GO 23226
23226: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23227: LD_INT 6
23229: PPUSH
23230: LD_INT 3
23232: PPUSH
23233: LD_INT 3
23235: PUSH
23236: LD_INT 4
23238: PUSH
23239: LD_INT 5
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: LIST
23246: PUSH
23247: LD_OWVAR 67
23251: ARRAY
23252: PPUSH
23253: LD_INT 0
23255: PPUSH
23256: LD_INT 0
23258: PPUSH
23259: LD_INT 0
23261: PPUSH
23262: LD_INT 0
23264: PPUSH
23265: LD_EXP 25
23269: PPUSH
23270: LD_EXP 26
23274: PPUSH
23275: CALL_OW 12
23279: PPUSH
23280: LD_INT 16
23282: PPUSH
23283: LD_INT 7
23285: PPUSH
23286: LD_INT 1
23288: PPUSH
23289: LD_INT 1
23291: PPUSH
23292: LD_INT 3
23294: PPUSH
23295: CALL_OW 12
23299: PPUSH
23300: CALL 11724 0 12
23304: END
// every 22 22$0 trigger SikorskyArrive = 0 do
23305: LD_EXP 18
23309: PUSH
23310: LD_INT 0
23312: EQUAL
23313: IFFALSE 23413
23315: GO 23317
23317: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23318: LD_INT 16
23320: PPUSH
23321: LD_INT 6
23323: PPUSH
23324: LD_INT 5
23326: PPUSH
23327: LD_INT 8
23329: PPUSH
23330: CALL_OW 12
23334: PUSH
23335: LD_INT 6
23337: PPUSH
23338: LD_INT 9
23340: PPUSH
23341: CALL_OW 12
23345: PUSH
23346: LD_INT 7
23348: PPUSH
23349: LD_INT 9
23351: PPUSH
23352: CALL_OW 12
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: LIST
23361: PUSH
23362: LD_OWVAR 67
23366: ARRAY
23367: PPUSH
23368: LD_EXP 25
23372: PPUSH
23373: LD_EXP 26
23377: PPUSH
23378: CALL_OW 12
23382: PPUSH
23383: LD_INT 3
23385: PPUSH
23386: LD_INT 1
23388: PPUSH
23389: LD_INT 3
23391: PPUSH
23392: LD_INT 44
23394: PUSH
23395: LD_INT 46
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PPUSH
23402: EMPTY
23403: PPUSH
23404: EMPTY
23405: PPUSH
23406: LD_INT 1
23408: PPUSH
23409: CALL 14017 0 11
23413: END
// every 27 27$0 trigger SikorskyArrive = 0 do
23414: LD_EXP 18
23418: PUSH
23419: LD_INT 0
23421: EQUAL
23422: IFFALSE 23504
23424: GO 23426
23426: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23427: LD_INT 6
23429: PPUSH
23430: LD_INT 3
23432: PPUSH
23433: LD_INT 3
23435: PUSH
23436: LD_INT 4
23438: PUSH
23439: LD_INT 5
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: LIST
23446: PUSH
23447: LD_OWVAR 67
23451: ARRAY
23452: PPUSH
23453: LD_INT 0
23455: PPUSH
23456: LD_INT 0
23458: PPUSH
23459: LD_INT 0
23461: PPUSH
23462: LD_INT 0
23464: PPUSH
23465: LD_EXP 25
23469: PPUSH
23470: LD_EXP 26
23474: PPUSH
23475: CALL_OW 12
23479: PPUSH
23480: LD_INT 16
23482: PPUSH
23483: LD_INT 7
23485: PPUSH
23486: LD_INT 1
23488: PPUSH
23489: LD_INT 1
23491: PPUSH
23492: LD_INT 3
23494: PPUSH
23495: CALL_OW 12
23499: PPUSH
23500: CALL 11724 0 12
23504: END
// every 27 27$0 trigger SikorskyArrive = 0 do
23505: LD_EXP 18
23509: PUSH
23510: LD_INT 0
23512: EQUAL
23513: IFFALSE 23613
23515: GO 23517
23517: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23518: LD_INT 16
23520: PPUSH
23521: LD_INT 6
23523: PPUSH
23524: LD_INT 5
23526: PPUSH
23527: LD_INT 8
23529: PPUSH
23530: CALL_OW 12
23534: PUSH
23535: LD_INT 6
23537: PPUSH
23538: LD_INT 9
23540: PPUSH
23541: CALL_OW 12
23545: PUSH
23546: LD_INT 7
23548: PPUSH
23549: LD_INT 9
23551: PPUSH
23552: CALL_OW 12
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: LIST
23561: PUSH
23562: LD_OWVAR 67
23566: ARRAY
23567: PPUSH
23568: LD_EXP 25
23572: PPUSH
23573: LD_EXP 26
23577: PPUSH
23578: CALL_OW 12
23582: PPUSH
23583: LD_INT 3
23585: PPUSH
23586: LD_INT 1
23588: PPUSH
23589: LD_INT 3
23591: PPUSH
23592: LD_INT 44
23594: PUSH
23595: LD_INT 46
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PPUSH
23602: EMPTY
23603: PPUSH
23604: EMPTY
23605: PPUSH
23606: LD_INT 1
23608: PPUSH
23609: CALL 14017 0 11
23613: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23614: LD_EXP 18
23618: PUSH
23619: LD_INT 0
23621: EQUAL
23622: IFFALSE 23704
23624: GO 23626
23626: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23627: LD_INT 6
23629: PPUSH
23630: LD_INT 3
23632: PPUSH
23633: LD_INT 3
23635: PUSH
23636: LD_INT 4
23638: PUSH
23639: LD_INT 5
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: LIST
23646: PUSH
23647: LD_OWVAR 67
23651: ARRAY
23652: PPUSH
23653: LD_INT 0
23655: PPUSH
23656: LD_INT 0
23658: PPUSH
23659: LD_INT 0
23661: PPUSH
23662: LD_INT 0
23664: PPUSH
23665: LD_EXP 25
23669: PPUSH
23670: LD_EXP 26
23674: PPUSH
23675: CALL_OW 12
23679: PPUSH
23680: LD_INT 16
23682: PPUSH
23683: LD_INT 7
23685: PPUSH
23686: LD_INT 1
23688: PPUSH
23689: LD_INT 1
23691: PPUSH
23692: LD_INT 3
23694: PPUSH
23695: CALL_OW 12
23699: PPUSH
23700: CALL 11724 0 12
23704: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23705: LD_EXP 18
23709: PUSH
23710: LD_INT 0
23712: EQUAL
23713: IFFALSE 23813
23715: GO 23717
23717: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
23718: LD_INT 16
23720: PPUSH
23721: LD_INT 6
23723: PPUSH
23724: LD_INT 5
23726: PPUSH
23727: LD_INT 8
23729: PPUSH
23730: CALL_OW 12
23734: PUSH
23735: LD_INT 6
23737: PPUSH
23738: LD_INT 9
23740: PPUSH
23741: CALL_OW 12
23745: PUSH
23746: LD_INT 7
23748: PPUSH
23749: LD_INT 9
23751: PPUSH
23752: CALL_OW 12
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: LIST
23761: PUSH
23762: LD_OWVAR 67
23766: ARRAY
23767: PPUSH
23768: LD_EXP 25
23772: PPUSH
23773: LD_EXP 26
23777: PPUSH
23778: CALL_OW 12
23782: PPUSH
23783: LD_INT 3
23785: PPUSH
23786: LD_INT 1
23788: PPUSH
23789: LD_INT 3
23791: PPUSH
23792: LD_INT 44
23794: PUSH
23795: LD_INT 46
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PPUSH
23802: EMPTY
23803: PPUSH
23804: EMPTY
23805: PPUSH
23806: LD_INT 1
23808: PPUSH
23809: CALL 14017 0 11
23813: END
// every 0 0$1 trigger timerStatus = 1 do
23814: LD_EXP 35
23818: PUSH
23819: LD_INT 1
23821: EQUAL
23822: IFFALSE 23859
23824: GO 23826
23826: DISABLE
// begin enable ;
23827: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
23828: LD_ADDR_OWVAR 47
23832: PUSH
23833: LD_STRING #Am08-1
23835: PUSH
23836: LD_EXP 19
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
23845: LD_ADDR_EXP 19
23849: PUSH
23850: LD_EXP 19
23854: PUSH
23855: LD_INT 35
23857: MINUS
23858: ST_TO_ADDR
// end ; end_of_file
23859: END
// every 1 1$0 do
23860: GO 23862
23862: DISABLE
// begin if supply <= 13 and supply > 7 then
23863: LD_EXP 40
23867: PUSH
23868: LD_INT 13
23870: LESSEQUAL
23871: PUSH
23872: LD_EXP 40
23876: PUSH
23877: LD_INT 7
23879: GREATER
23880: AND
23881: IFFALSE 23904
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
23883: LD_INT 3
23885: PPUSH
23886: LD_INT 5
23888: PPUSH
23889: CALL_OW 12
23893: PPUSH
23894: LD_INT 5
23896: PPUSH
23897: LD_INT 1
23899: PPUSH
23900: CALL_OW 55
// if supply <= 7 and supply > 4 then
23904: LD_EXP 40
23908: PUSH
23909: LD_INT 7
23911: LESSEQUAL
23912: PUSH
23913: LD_EXP 40
23917: PUSH
23918: LD_INT 4
23920: GREATER
23921: AND
23922: IFFALSE 23945
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
23924: LD_INT 3
23926: PPUSH
23927: LD_INT 5
23929: PPUSH
23930: CALL_OW 12
23934: PPUSH
23935: LD_INT 20
23937: PPUSH
23938: LD_INT 1
23940: PPUSH
23941: CALL_OW 55
// if supply <= 4 and supply > 0 then
23945: LD_EXP 40
23949: PUSH
23950: LD_INT 4
23952: LESSEQUAL
23953: PUSH
23954: LD_EXP 40
23958: PUSH
23959: LD_INT 0
23961: GREATER
23962: AND
23963: IFFALSE 23986
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
23965: LD_INT 3
23967: PPUSH
23968: LD_INT 5
23970: PPUSH
23971: CALL_OW 12
23975: PPUSH
23976: LD_INT 21
23978: PPUSH
23979: LD_INT 1
23981: PPUSH
23982: CALL_OW 55
// if supply > 0 then
23986: LD_EXP 40
23990: PUSH
23991: LD_INT 0
23993: GREATER
23994: IFFALSE 24011
// begin supply = supply - 1 ;
23996: LD_ADDR_EXP 40
24000: PUSH
24001: LD_EXP 40
24005: PUSH
24006: LD_INT 1
24008: MINUS
24009: ST_TO_ADDR
// enable ;
24010: ENABLE
// end ; end ; end_of_file
24011: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
24012: LD_EXP 39
24016: PUSH
24017: LD_INT 1
24019: EQUAL
24020: PUSH
24021: LD_EXP 1
24025: PPUSH
24026: CALL_OW 301
24030: AND
24031: IFFALSE 24043
24033: GO 24035
24035: DISABLE
// YouLost ( JMM ) ;
24036: LD_STRING JMM
24038: PPUSH
24039: CALL_OW 104
24043: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
24044: LD_EXP 18
24048: PUSH
24049: LD_INT 1
24051: EQUAL
24052: PUSH
24053: LD_EXP 16
24057: PPUSH
24058: CALL_OW 301
24062: AND
24063: IFFALSE 24095
24065: GO 24067
24067: DISABLE
// begin DialogueOn ;
24068: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
24072: LD_EXP 23
24076: PPUSH
24077: LD_STRING D8a-Pow-1
24079: PPUSH
24080: CALL_OW 94
// DialogueOff ;
24084: CALL_OW 7
// YouLost ( Dismissed ) ;
24088: LD_STRING Dismissed
24090: PPUSH
24091: CALL_OW 104
// end ;
24095: END
// every 0 0$1 trigger IsDead ( amDepot ) do
24096: LD_EXP 37
24100: PPUSH
24101: CALL_OW 301
24105: IFFALSE 24117
24107: GO 24109
24109: DISABLE
// YouLost ( Destroyed ) ; end_of_file
24110: LD_STRING Destroyed
24112: PPUSH
24113: CALL_OW 104
24117: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , p ;
24118: LD_EXP 24
24122: PPUSH
24123: CALL_OW 301
24127: PUSH
24128: LD_INT 22
24130: PUSH
24131: LD_INT 3
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 21
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PPUSH
24152: CALL_OW 69
24156: PUSH
24157: LD_INT 14
24159: PUSH
24160: LD_INT 13
24162: PUSH
24163: LD_INT 12
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: LIST
24170: PUSH
24171: LD_OWVAR 67
24175: ARRAY
24176: LESS
24177: AND
24178: IFFALSE 24626
24180: GO 24182
24182: DISABLE
24183: LD_INT 0
24185: PPUSH
24186: PPUSH
// begin russianAI = 0 ;
24187: LD_ADDR_EXP 27
24191: PUSH
24192: LD_INT 0
24194: ST_TO_ADDR
// escapeAvalaible = 1 ;
24195: LD_ADDR_EXP 36
24199: PUSH
24200: LD_INT 1
24202: ST_TO_ADDR
// InGameOn ;
24203: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
24207: LD_INT 3
24209: PPUSH
24210: LD_INT 1
24212: PPUSH
24213: LD_INT 1
24215: PPUSH
24216: LD_INT 0
24218: PPUSH
24219: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
24223: LD_INT 6
24225: PPUSH
24226: LD_INT 1
24228: PPUSH
24229: LD_INT 1
24231: PPUSH
24232: LD_INT 0
24234: PPUSH
24235: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
24239: LD_INT 3
24241: PPUSH
24242: LD_INT 1
24244: PPUSH
24245: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
24249: LD_INT 97
24251: PPUSH
24252: LD_INT 91
24254: PPUSH
24255: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
24259: LD_INT 22
24261: PUSH
24262: LD_INT 3
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 21
24271: PUSH
24272: LD_INT 1
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PPUSH
24283: CALL_OW 69
24287: PPUSH
24288: CALL_OW 121
// wait ( 0 0$01 ) ;
24292: LD_INT 35
24294: PPUSH
24295: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
24299: LD_INT 22
24301: PUSH
24302: LD_INT 3
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 21
24311: PUSH
24312: LD_INT 1
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PPUSH
24323: CALL_OW 69
24327: PPUSH
24328: LD_INT 124
24330: PPUSH
24331: LD_INT 98
24333: PPUSH
24334: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
24338: LD_INT 22
24340: PUSH
24341: LD_INT 6
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 21
24350: PUSH
24351: LD_INT 1
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PPUSH
24362: CALL_OW 69
24366: PPUSH
24367: CALL_OW 121
// wait ( 0 0$01 ) ;
24371: LD_INT 35
24373: PPUSH
24374: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
24378: LD_INT 22
24380: PUSH
24381: LD_INT 6
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 21
24390: PUSH
24391: LD_INT 1
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PPUSH
24402: CALL_OW 69
24406: PPUSH
24407: LD_INT 124
24409: PPUSH
24410: LD_INT 98
24412: PPUSH
24413: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
24417: LD_INT 22
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 21
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 3
24439: PUSH
24440: LD_INT 54
24442: PUSH
24443: EMPTY
24444: LIST
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: LIST
24454: PPUSH
24455: CALL_OW 69
24459: PPUSH
24460: LD_INT 124
24462: PPUSH
24463: LD_INT 98
24465: PPUSH
24466: CALL_OW 114
// wait ( 0 0$4 ) ;
24470: LD_INT 140
24472: PPUSH
24473: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
24477: LD_INT 124
24479: PPUSH
24480: LD_INT 98
24482: PPUSH
24483: CALL_OW 84
// if SikorskyStatus = 1 then
24487: LD_EXP 21
24491: PUSH
24492: LD_INT 1
24494: EQUAL
24495: IFFALSE 24509
// begin Say ( Sikorski , D9-Sik-1 ) ;
24497: LD_EXP 16
24501: PPUSH
24502: LD_STRING D9-Sik-1
24504: PPUSH
24505: CALL_OW 88
// end ; if SikorskyStatus = 2 then
24509: LD_EXP 21
24513: PUSH
24514: LD_INT 2
24516: EQUAL
24517: IFFALSE 24538
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
24519: LD_EXP 23
24523: PPUSH
24524: LD_STRING D8b-Pow-1
24526: PPUSH
24527: CALL_OW 94
// YouLost ( Dismissed ) ;
24531: LD_STRING Dismissed
24533: PPUSH
24534: CALL_OW 104
// end ; p := 0 0$0 ;
24538: LD_ADDR_VAR 0 2
24542: PUSH
24543: LD_INT 0
24545: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24546: LD_INT 35
24548: PPUSH
24549: CALL_OW 67
// p := p + 0 0$1 ;
24553: LD_ADDR_VAR 0 2
24557: PUSH
24558: LD_VAR 0 2
24562: PUSH
24563: LD_INT 35
24565: PLUS
24566: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
24567: LD_INT 23
24569: PUSH
24570: LD_INT 3
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 21
24579: PUSH
24580: LD_INT 1
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 24
24589: PUSH
24590: LD_INT 250
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: LIST
24601: PPUSH
24602: CALL_OW 69
24606: PUSH
24607: LD_INT 0
24609: EQUAL
24610: PUSH
24611: LD_VAR 0 2
24615: PUSH
24616: LD_INT 245
24618: GREATEREQUAL
24619: OR
24620: IFFALSE 24546
// FinishMission ;
24622: CALL 24629 0 0
// end ;
24626: PPOPN 2
24628: END
// export function FinishMission ; var tmp ; begin
24629: LD_INT 0
24631: PPUSH
24632: PPUSH
// AddMedal ( med1 , 1 ) ;
24633: LD_STRING med1
24635: PPUSH
24636: LD_INT 1
24638: PPUSH
24639: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
24643: LD_STRING med2
24645: PPUSH
24646: LD_INT 1
24648: PPUSH
24649: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
24653: LD_STRING perfect
24655: PPUSH
24656: LD_INT 1
24658: PPUSH
24659: CALL_OW 101
// GiveMedals ( Main ) ;
24663: LD_STRING Main
24665: PPUSH
24666: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
24670: LD_INT 22
24672: PUSH
24673: LD_INT 1
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 23
24682: PUSH
24683: LD_INT 1
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 21
24692: PUSH
24693: LD_INT 1
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 2
24702: PUSH
24703: LD_INT 25
24705: PUSH
24706: LD_INT 1
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 25
24715: PUSH
24716: LD_INT 2
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 25
24725: PUSH
24726: LD_INT 3
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 25
24735: PUSH
24736: LD_INT 4
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: PPUSH
24756: CALL_OW 69
24760: PPUSH
24761: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
24765: LD_EXP 1
24769: PPUSH
24770: LD_EXP 42
24774: PUSH
24775: LD_STRING JMM
24777: STR
24778: PPUSH
24779: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
24783: LD_EXP 2
24787: PPUSH
24788: LD_EXP 42
24792: PUSH
24793: LD_STRING Brown
24795: STR
24796: PPUSH
24797: CALL 7909 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
24801: LD_EXP 3
24805: PPUSH
24806: LD_EXP 42
24810: PUSH
24811: LD_STRING Donaldson
24813: STR
24814: PPUSH
24815: CALL 7909 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
24819: LD_EXP 4
24823: PPUSH
24824: LD_EXP 42
24828: PUSH
24829: LD_STRING Bobby
24831: STR
24832: PPUSH
24833: CALL 7909 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
24837: LD_EXP 5
24841: PPUSH
24842: LD_EXP 42
24846: PUSH
24847: LD_STRING Cyrus
24849: STR
24850: PPUSH
24851: CALL 7909 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
24855: LD_EXP 6
24859: PPUSH
24860: LD_EXP 42
24864: PUSH
24865: LD_STRING Lisa
24867: STR
24868: PPUSH
24869: CALL 7909 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
24873: LD_EXP 7
24877: PPUSH
24878: LD_EXP 42
24882: PUSH
24883: LD_STRING Frank
24885: STR
24886: PPUSH
24887: CALL 7909 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
24891: LD_EXP 8
24895: PPUSH
24896: LD_EXP 42
24900: PUSH
24901: LD_STRING Gladstone
24903: STR
24904: PPUSH
24905: CALL 7909 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
24909: LD_EXP 9
24913: PPUSH
24914: LD_EXP 42
24918: PUSH
24919: LD_STRING Kikuchi
24921: STR
24922: PPUSH
24923: CALL 7909 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
24927: LD_EXP 14
24931: PPUSH
24932: LD_EXP 42
24936: PUSH
24937: LD_STRING Denis
24939: STR
24940: PPUSH
24941: CALL 7909 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
24945: LD_EXP 15
24949: PPUSH
24950: LD_EXP 42
24954: PUSH
24955: LD_STRING Joan
24957: STR
24958: PPUSH
24959: CALL 7909 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
24963: LD_EXP 10
24967: PPUSH
24968: LD_EXP 42
24972: PUSH
24973: LD_STRING Khatam
24975: STR
24976: PPUSH
24977: CALL 7909 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
24981: LD_EXP 13
24985: PPUSH
24986: LD_EXP 42
24990: PUSH
24991: LD_STRING Houten
24993: STR
24994: PPUSH
24995: CALL 7909 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
24999: LD_INT 50
25001: PUSH
25002: EMPTY
25003: LIST
25004: PUSH
25005: LD_INT 22
25007: PUSH
25008: LD_INT 1
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 21
25017: PUSH
25018: LD_INT 1
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 2
25027: PUSH
25028: LD_INT 25
25030: PUSH
25031: LD_INT 1
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 25
25040: PUSH
25041: LD_INT 2
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 25
25050: PUSH
25051: LD_INT 3
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 25
25060: PUSH
25061: LD_INT 4
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: PPUSH
25081: CALL_OW 69
25085: PUSH
25086: LD_EXP 1
25090: PUSH
25091: LD_EXP 2
25095: PUSH
25096: LD_EXP 3
25100: PUSH
25101: LD_EXP 4
25105: PUSH
25106: LD_EXP 5
25110: PUSH
25111: LD_EXP 6
25115: PUSH
25116: LD_EXP 7
25120: PUSH
25121: LD_EXP 8
25125: PUSH
25126: LD_EXP 9
25130: PUSH
25131: LD_EXP 14
25135: PUSH
25136: LD_EXP 15
25140: PUSH
25141: LD_EXP 13
25145: PUSH
25146: LD_EXP 10
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: DIFF
25166: PPUSH
25167: LD_STRING 08_other_survivors
25169: PPUSH
25170: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
25174: LD_INT 23
25176: PPUSH
25177: CALL 25190 0 1
// YouWin ;
25181: CALL_OW 103
// end ;
25185: LD_VAR 0 1
25189: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
25190: LD_INT 0
25192: PPUSH
25193: PPUSH
25194: PPUSH
25195: PPUSH
// gammaBase = [ ] ;
25196: LD_ADDR_VAR 0 4
25200: PUSH
25201: EMPTY
25202: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
25203: LD_ADDR_VAR 0 5
25207: PUSH
25208: LD_VAR 0 1
25212: PPUSH
25213: LD_INT 22
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 21
25225: PUSH
25226: LD_INT 3
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 50
25235: PUSH
25236: EMPTY
25237: LIST
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: LIST
25243: PPUSH
25244: CALL_OW 70
25248: ST_TO_ADDR
// for i in buildings do
25249: LD_ADDR_VAR 0 3
25253: PUSH
25254: LD_VAR 0 5
25258: PUSH
25259: FOR_IN
25260: IFFALSE 25697
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
25262: LD_VAR 0 3
25266: PPUSH
25267: CALL_OW 266
25271: PUSH
25272: LD_INT 6
25274: PUSH
25275: LD_INT 7
25277: PUSH
25278: LD_INT 8
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: LIST
25285: IN
25286: IFFALSE 25400
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
25288: LD_ADDR_VAR 0 4
25292: PUSH
25293: LD_VAR 0 4
25297: PUSH
25298: LD_VAR 0 3
25302: PPUSH
25303: CALL_OW 266
25307: PUSH
25308: LD_VAR 0 3
25312: PPUSH
25313: CALL_OW 250
25317: PUSH
25318: LD_VAR 0 3
25322: PPUSH
25323: CALL_OW 251
25327: PUSH
25328: LD_VAR 0 3
25332: PPUSH
25333: CALL_OW 254
25337: PUSH
25338: LD_VAR 0 3
25342: PPUSH
25343: CALL_OW 267
25347: PUSH
25348: LD_VAR 0 3
25352: PPUSH
25353: CALL_OW 248
25357: PUSH
25358: LD_VAR 0 3
25362: PPUSH
25363: LD_INT 1
25365: PPUSH
25366: CALL_OW 268
25370: PUSH
25371: LD_VAR 0 3
25375: PPUSH
25376: LD_INT 2
25378: PPUSH
25379: CALL_OW 268
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: ADD
25397: ST_TO_ADDR
25398: GO 25695
// if GetBType ( i ) = b_bunker then
25400: LD_VAR 0 3
25404: PPUSH
25405: CALL_OW 266
25409: PUSH
25410: LD_INT 32
25412: EQUAL
25413: IFFALSE 25510
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
25415: LD_ADDR_VAR 0 4
25419: PUSH
25420: LD_VAR 0 4
25424: PUSH
25425: LD_VAR 0 3
25429: PPUSH
25430: CALL_OW 266
25434: PUSH
25435: LD_VAR 0 3
25439: PPUSH
25440: CALL_OW 250
25444: PUSH
25445: LD_VAR 0 3
25449: PPUSH
25450: CALL_OW 251
25454: PUSH
25455: LD_VAR 0 3
25459: PPUSH
25460: CALL_OW 254
25464: PUSH
25465: LD_VAR 0 3
25469: PPUSH
25470: CALL_OW 267
25474: PUSH
25475: LD_VAR 0 3
25479: PPUSH
25480: CALL_OW 248
25484: PUSH
25485: LD_VAR 0 3
25489: PPUSH
25490: CALL_OW 269
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: PUSH
25504: EMPTY
25505: LIST
25506: ADD
25507: ST_TO_ADDR
25508: GO 25695
// if GetBType ( i ) = b_factory then
25510: LD_VAR 0 3
25514: PPUSH
25515: CALL_OW 266
25519: PUSH
25520: LD_INT 3
25522: EQUAL
25523: IFFALSE 25613
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
25525: LD_ADDR_VAR 0 4
25529: PUSH
25530: LD_VAR 0 4
25534: PPUSH
25535: LD_INT 1
25537: PPUSH
25538: LD_VAR 0 3
25542: PPUSH
25543: CALL_OW 266
25547: PUSH
25548: LD_VAR 0 3
25552: PPUSH
25553: CALL_OW 250
25557: PUSH
25558: LD_VAR 0 3
25562: PPUSH
25563: CALL_OW 251
25567: PUSH
25568: LD_VAR 0 3
25572: PPUSH
25573: CALL_OW 254
25577: PUSH
25578: LD_VAR 0 3
25582: PPUSH
25583: CALL_OW 267
25587: PUSH
25588: LD_VAR 0 3
25592: PPUSH
25593: CALL_OW 248
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: PPUSH
25606: CALL_OW 2
25610: ST_TO_ADDR
25611: GO 25695
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
25613: LD_ADDR_VAR 0 4
25617: PUSH
25618: LD_VAR 0 4
25622: PUSH
25623: LD_VAR 0 3
25627: PPUSH
25628: CALL_OW 266
25632: PUSH
25633: LD_VAR 0 3
25637: PPUSH
25638: CALL_OW 250
25642: PUSH
25643: LD_VAR 0 3
25647: PPUSH
25648: CALL_OW 251
25652: PUSH
25653: LD_VAR 0 3
25657: PPUSH
25658: CALL_OW 254
25662: PUSH
25663: LD_VAR 0 3
25667: PPUSH
25668: CALL_OW 267
25672: PUSH
25673: LD_VAR 0 3
25677: PPUSH
25678: CALL_OW 248
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: PUSH
25691: EMPTY
25692: LIST
25693: ADD
25694: ST_TO_ADDR
// end ;
25695: GO 25259
25697: POP
25698: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
25699: LD_VAR 0 4
25703: PPUSH
25704: LD_STRING 08_GammaBase
25706: PPUSH
25707: CALL_OW 39
// end ;
25711: LD_VAR 0 2
25715: RET
