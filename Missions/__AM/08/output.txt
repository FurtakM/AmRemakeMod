// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7302 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2535 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 6079 0 0
// PrepareRussians ;
 229: CALL 6397 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8723 0 6
// PrepareCutsceneAttack ;
 312: CALL 6131 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 608
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 6815 0 2
 577: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 54
 585: PPUSH
 586: LD_INT 25
 588: PPUSH
 589: LD_INT 8
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// ComHold ( Donaldson ) ;
 599: LD_EXP 3
 603: PPUSH
 604: CALL_OW 140
// end ; if gammaCommander = 2 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 2
 615: EQUAL
 616: IFFALSE 664
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 618: LD_ADDR_EXP 2
 622: PUSH
 623: LD_STRING 04_Brown
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: CALL 6815 0 2
 633: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 634: LD_EXP 2
 638: PPUSH
 639: LD_INT 54
 641: PPUSH
 642: LD_INT 25
 644: PPUSH
 645: LD_INT 8
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 50
// ComHold ( Brown ) ;
 655: LD_EXP 2
 659: PPUSH
 660: CALL_OW 140
// end ; if gammaCommander = 3 then
 664: LD_EXP 12
 668: PUSH
 669: LD_INT 3
 671: EQUAL
 672: IFFALSE 720
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 674: LD_ADDR_EXP 13
 678: PUSH
 679: LD_STRING VanHouten
 681: PPUSH
 682: LD_INT 1
 684: PPUSH
 685: CALL 6815 0 2
 689: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 690: LD_EXP 13
 694: PPUSH
 695: LD_INT 54
 697: PPUSH
 698: LD_INT 25
 700: PPUSH
 701: LD_INT 8
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 50
// ComHold ( Houten ) ;
 711: LD_EXP 13
 715: PPUSH
 716: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 720: LD_ADDR_EXP 22
 724: PUSH
 725: LD_STRING Harisson
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL 6815 0 2
 735: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 736: LD_ADDR_EXP 23
 740: PUSH
 741: LD_STRING Powell
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 6815 0 2
 751: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 752: LD_STRING 04_Lisa
 754: PUSH
 755: EMPTY
 756: LIST
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_STRING LisaInDelta
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 30
 773: NOT
 774: AND
 775: PUSH
 776: LD_STRING 07_Lisa
 778: PUSH
 779: EMPTY
 780: LIST
 781: PPUSH
 782: CALL_OW 28
 786: NOT
 787: AND
 788: IFFALSE 824
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 790: LD_ADDR_EXP 6
 794: PUSH
 795: LD_STRING 04_Lisa
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 6815 0 2
 805: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 806: LD_ADDR_VAR 0 15
 810: PUSH
 811: LD_VAR 0 15
 815: PUSH
 816: LD_EXP 6
 820: ADD
 821: ST_TO_ADDR
// end else
 822: GO 876
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 824: LD_EXP 6
 828: NOT
 829: PUSH
 830: LD_STRING LisaIn07
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: IFFALSE 876
// begin Lisa := PrepareUnit ( 07_Lisa , true ) ;
 844: LD_ADDR_EXP 6
 848: PUSH
 849: LD_STRING 07_Lisa
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL 6815 0 2
 859: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 860: LD_ADDR_VAR 0 15
 864: PUSH
 865: LD_VAR 0 15
 869: PUSH
 870: LD_EXP 6
 874: ADD
 875: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 876: LD_STRING 04_Bobby
 878: PUSH
 879: EMPTY
 880: LIST
 881: PPUSH
 882: CALL_OW 28
 886: PUSH
 887: LD_STRING BobbyInDelta
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: NOT
 898: AND
 899: PUSH
 900: LD_STRING 07_Bobby
 902: PUSH
 903: EMPTY
 904: LIST
 905: PPUSH
 906: CALL_OW 28
 910: NOT
 911: AND
 912: IFFALSE 948
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 914: LD_ADDR_EXP 4
 918: PUSH
 919: LD_STRING 04_Bobby
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL 6815 0 2
 929: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 930: LD_ADDR_VAR 0 15
 934: PUSH
 935: LD_VAR 0 15
 939: PUSH
 940: LD_EXP 4
 944: ADD
 945: ST_TO_ADDR
// end else
 946: GO 1000
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 948: LD_EXP 4
 952: NOT
 953: PUSH
 954: LD_STRING BobbyIn07
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 30
 964: NOT
 965: AND
 966: IFFALSE 1000
// begin Bobby := PrepareUnit ( 07_Bobby , true ) ;
 968: LD_ADDR_EXP 4
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: CALL 6815 0 2
 983: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 984: LD_ADDR_VAR 0 15
 988: PUSH
 989: LD_VAR 0 15
 993: PUSH
 994: LD_EXP 4
 998: ADD
 999: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1000: LD_STRING 04_Cyrus
1002: PUSH
1003: EMPTY
1004: LIST
1005: PPUSH
1006: CALL_OW 28
1010: PUSH
1011: LD_STRING CyrusInDelta
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 30
1021: NOT
1022: AND
1023: PUSH
1024: LD_STRING 07_Cyrus
1026: PUSH
1027: EMPTY
1028: LIST
1029: PPUSH
1030: CALL_OW 28
1034: NOT
1035: AND
1036: IFFALSE 1072
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
1038: LD_ADDR_EXP 5
1042: PUSH
1043: LD_STRING 04_Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6815 0 2
1053: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1054: LD_ADDR_VAR 0 15
1058: PUSH
1059: LD_VAR 0 15
1063: PUSH
1064: LD_EXP 5
1068: ADD
1069: ST_TO_ADDR
// end else
1070: GO 1124
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1072: LD_EXP 5
1076: NOT
1077: PUSH
1078: LD_STRING CyrusIn07
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: NOT
1089: AND
1090: IFFALSE 1124
// begin Cyrus := PrepareUnit ( 07_Cyrus , true ) ;
1092: LD_ADDR_EXP 5
1096: PUSH
1097: LD_STRING 07_Cyrus
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 6815 0 2
1107: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1108: LD_ADDR_VAR 0 15
1112: PUSH
1113: LD_VAR 0 15
1117: PUSH
1118: LD_EXP 5
1122: ADD
1123: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1124: LD_STRING 04_Brown
1126: PUSH
1127: EMPTY
1128: LIST
1129: PPUSH
1130: CALL_OW 28
1134: PUSH
1135: LD_STRING BrownInDelta
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL_OW 30
1145: NOT
1146: AND
1147: PUSH
1148: LD_STRING 07_Brown
1150: PUSH
1151: EMPTY
1152: LIST
1153: PPUSH
1154: CALL_OW 28
1158: NOT
1159: AND
1160: PUSH
1161: LD_EXP 12
1165: PUSH
1166: LD_INT 2
1168: NONEQUAL
1169: AND
1170: IFFALSE 1206
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
1172: LD_ADDR_EXP 2
1176: PUSH
1177: LD_STRING 04_Brown
1179: PPUSH
1180: LD_INT 1
1182: PPUSH
1183: CALL 6815 0 2
1187: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1188: LD_ADDR_VAR 0 15
1192: PUSH
1193: LD_VAR 0 15
1197: PUSH
1198: LD_EXP 2
1202: ADD
1203: ST_TO_ADDR
// end else
1204: GO 1268
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1206: LD_EXP 2
1210: NOT
1211: PUSH
1212: LD_STRING BrownIn07
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 30
1222: NOT
1223: AND
1224: PUSH
1225: LD_EXP 12
1229: PUSH
1230: LD_INT 2
1232: NONEQUAL
1233: AND
1234: IFFALSE 1268
// begin Brown := PrepareUnit ( 07_Brown , true ) ;
1236: LD_ADDR_EXP 2
1240: PUSH
1241: LD_STRING 07_Brown
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 6815 0 2
1251: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1252: LD_ADDR_VAR 0 15
1256: PUSH
1257: LD_VAR 0 15
1261: PUSH
1262: LD_EXP 2
1266: ADD
1267: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1268: LD_STRING 04_Donaldson
1270: PUSH
1271: EMPTY
1272: LIST
1273: PPUSH
1274: CALL_OW 28
1278: PUSH
1279: LD_STRING DonaldsonInDelta
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 30
1289: NOT
1290: AND
1291: PUSH
1292: LD_STRING 07_Donaldson
1294: PUSH
1295: EMPTY
1296: LIST
1297: PPUSH
1298: CALL_OW 28
1302: NOT
1303: AND
1304: PUSH
1305: LD_EXP 12
1309: PUSH
1310: LD_INT 1
1312: NONEQUAL
1313: AND
1314: IFFALSE 1350
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1316: LD_ADDR_EXP 3
1320: PUSH
1321: LD_STRING 04_Donaldson
1323: PPUSH
1324: LD_INT 1
1326: PPUSH
1327: CALL 6815 0 2
1331: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1332: LD_ADDR_VAR 0 15
1336: PUSH
1337: LD_VAR 0 15
1341: PUSH
1342: LD_EXP 3
1346: ADD
1347: ST_TO_ADDR
// end else
1348: GO 1412
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1350: LD_EXP 3
1354: NOT
1355: PUSH
1356: LD_STRING DonaldsonIn07
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 30
1366: NOT
1367: AND
1368: PUSH
1369: LD_EXP 12
1373: PUSH
1374: LD_INT 1
1376: NONEQUAL
1377: AND
1378: IFFALSE 1412
// begin Donaldson := PrepareUnit ( 07_Donaldson , true ) ;
1380: LD_ADDR_EXP 3
1384: PUSH
1385: LD_STRING 07_Donaldson
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: CALL 6815 0 2
1395: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1396: LD_ADDR_VAR 0 15
1400: PUSH
1401: LD_VAR 0 15
1405: PUSH
1406: LD_EXP 3
1410: ADD
1411: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1412: LD_STRING KhatamIn07
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 30
1422: NOT
1423: IFFALSE 1457
// begin Khatam := PrepareUnit ( 07_Khatam , true ) ;
1425: LD_ADDR_EXP 10
1429: PUSH
1430: LD_STRING 07_Khatam
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: CALL 6815 0 2
1440: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1441: LD_ADDR_VAR 0 15
1445: PUSH
1446: LD_VAR 0 15
1450: PUSH
1451: LD_EXP 10
1455: ADD
1456: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1457: LD_ADDR_EXP 11
1461: PUSH
1462: LD_STRING 07_othersGamma
1464: PPUSH
1465: CALL_OW 31
1469: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1470: LD_ADDR_VAR 0 14
1474: PUSH
1475: LD_INT 8
1477: PUSH
1478: LD_EXP 11
1482: MINUS
1483: ST_TO_ADDR
// if tmp then
1484: LD_VAR 0 14
1488: IFFALSE 1541
// for i = 1 to tmp do
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: DOUBLE
1496: LD_INT 1
1498: DEC
1499: ST_TO_ADDR
1500: LD_VAR 0 14
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1539
// begin PrepareHuman ( false , 1 , 5 ) ;
1508: LD_INT 0
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1521: LD_ADDR_EXP 11
1525: PUSH
1526: LD_EXP 11
1530: PUSH
1531: CALL_OW 44
1535: ADD
1536: ST_TO_ADDR
// end ;
1537: GO 1505
1539: POP
1540: POP
// if HexInfo ( 61 , 29 ) = 0 then
1541: LD_INT 61
1543: PPUSH
1544: LD_INT 29
1546: PPUSH
1547: CALL_OW 428
1551: PUSH
1552: LD_INT 0
1554: EQUAL
1555: IFFALSE 1586
// begin bc_type := b_barracks ;
1557: LD_ADDR_OWVAR 42
1561: PUSH
1562: LD_INT 5
1564: ST_TO_ADDR
// bc_level := 6 ;
1565: LD_ADDR_OWVAR 43
1569: PUSH
1570: LD_INT 6
1572: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1573: LD_INT 61
1575: PPUSH
1576: LD_INT 29
1578: PPUSH
1579: LD_INT 5
1581: PPUSH
1582: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1586: LD_ADDR_VAR 0 13
1590: PUSH
1591: LD_INT 22
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 30
1603: PUSH
1604: LD_INT 31
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// for i in bun do
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: LD_VAR 0 13
1629: PUSH
1630: FOR_IN
1631: IFFALSE 1763
// begin x := GetX ( i ) ;
1633: LD_ADDR_VAR 0 3
1637: PUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 250
1647: ST_TO_ADDR
// y := GetY ( i ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_VAR 0 2
1657: PPUSH
1658: CALL_OW 251
1662: ST_TO_ADDR
// d := GetDir ( i ) ;
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 2
1672: PPUSH
1673: CALL_OW 254
1677: ST_TO_ADDR
// RemoveUnit ( i ) ;
1678: LD_VAR 0 2
1682: PPUSH
1683: CALL_OW 64
// bc_type := b_bunker ;
1687: LD_ADDR_OWVAR 42
1691: PUSH
1692: LD_INT 32
1694: ST_TO_ADDR
// bc_level := 6 ;
1695: LD_ADDR_OWVAR 43
1699: PUSH
1700: LD_INT 6
1702: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1703: LD_ADDR_VAR 0 6
1707: PUSH
1708: LD_VAR 0 3
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_VAR 0 5
1722: PPUSH
1723: CALL_OW 47
1727: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1728: LD_VAR 0 6
1732: PPUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 4
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_VAR 0 2
1747: PUSH
1748: LD_INT 2
1750: MOD
1751: PUSH
1752: LD_INT 1
1754: PLUS
1755: ARRAY
1756: PPUSH
1757: CALL_OW 431
// end ;
1761: GO 1630
1763: POP
1764: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1765: LD_ADDR_VAR 0 9
1769: PUSH
1770: LD_INT 22
1772: PUSH
1773: LD_INT 1
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 30
1782: PUSH
1783: LD_INT 5
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PPUSH
1794: CALL_OW 69
1798: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1799: LD_ADDR_VAR 0 8
1803: PUSH
1804: LD_INT 22
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 2
1816: PUSH
1817: LD_INT 30
1819: PUSH
1820: LD_INT 6
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 30
1829: PUSH
1830: LD_INT 7
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 30
1839: PUSH
1840: LD_INT 8
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PPUSH
1857: CALL_OW 69
1861: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1862: LD_ADDR_VAR 0 7
1866: PUSH
1867: LD_INT 22
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 30
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 22
1903: PUSH
1904: LD_INT 1
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 30
1913: PUSH
1914: LD_INT 36
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PPUSH
1925: CALL_OW 69
1929: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1930: LD_ADDR_VAR 0 13
1934: PUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 2
1947: PUSH
1948: LD_INT 30
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 30
1960: PUSH
1961: LD_INT 32
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 69
1981: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_EXP 11
1991: PUSH
1992: LD_VAR 0 15
1996: ADD
1997: PUSH
1998: FOR_IN
1999: IFFALSE 2420
// begin placed := false ;
2001: LD_ADDR_VAR 0 11
2005: PUSH
2006: LD_INT 0
2008: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2009: LD_VAR 0 2
2013: PPUSH
2014: CALL_OW 257
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2147
// begin if UnitFilter ( bun , [ f_empty ] ) then
2024: LD_VAR 0 13
2028: PPUSH
2029: LD_INT 58
2031: PUSH
2032: EMPTY
2033: LIST
2034: PPUSH
2035: CALL_OW 72
2039: IFFALSE 2078
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_VAR 0 13
2050: PPUSH
2051: LD_INT 58
2053: PUSH
2054: EMPTY
2055: LIST
2056: PPUSH
2057: CALL_OW 72
2061: PUSH
2062: LD_INT 1
2064: ARRAY
2065: PPUSH
2066: CALL_OW 52
// placed := true ;
2070: LD_ADDR_VAR 0 11
2074: PUSH
2075: LD_INT 1
2077: ST_TO_ADDR
// end ; if arm and not placed then
2078: LD_VAR 0 9
2082: PUSH
2083: LD_VAR 0 11
2087: NOT
2088: AND
2089: IFFALSE 2147
// begin for j in arm do
2091: LD_ADDR_VAR 0 10
2095: PUSH
2096: LD_VAR 0 9
2100: PUSH
2101: FOR_IN
2102: IFFALSE 2145
// if UnitsInside ( j ) < 6 then
2104: LD_VAR 0 10
2108: PPUSH
2109: CALL_OW 313
2113: PUSH
2114: LD_INT 6
2116: LESS
2117: IFFALSE 2143
// begin PlaceHumanInUnit ( i , j ) ;
2119: LD_VAR 0 2
2123: PPUSH
2124: LD_VAR 0 10
2128: PPUSH
2129: CALL_OW 52
// placed := true ;
2133: LD_ADDR_VAR 0 11
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// break ;
2141: GO 2145
// end ;
2143: GO 2101
2145: POP
2146: POP
// end ; end ; if GetClass ( i ) = 2 then
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 257
2156: PUSH
2157: LD_INT 2
2159: EQUAL
2160: IFFALSE 2193
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 52
2169: PPUSH
2170: LD_INT 20
2172: PPUSH
2173: LD_INT 6
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
// placed := true ;
2183: LD_ADDR_VAR 0 11
2187: PUSH
2188: LD_INT 1
2190: ST_TO_ADDR
// continue ;
2191: GO 1998
// end ; if GetClass ( i ) = 3 then
2193: LD_VAR 0 2
2197: PPUSH
2198: CALL_OW 257
2202: PUSH
2203: LD_INT 3
2205: EQUAL
2206: IFFALSE 2310
// if fac then
2208: LD_VAR 0 7
2212: IFFALSE 2310
// begin if ct then
2214: LD_VAR 0 12
2218: IFFALSE 2246
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 12
2229: PUSH
2230: LD_INT 1
2232: ARRAY
2233: PPUSH
2234: CALL_OW 52
// placed := true ;
2238: LD_ADDR_VAR 0 11
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// end ; if placed then
2246: LD_VAR 0 11
2250: IFFALSE 2254
// continue ;
2252: GO 1998
// for j in fac do
2254: LD_ADDR_VAR 0 10
2258: PUSH
2259: LD_VAR 0 7
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2308
// if UnitsInside ( j ) < 6 then
2267: LD_VAR 0 10
2271: PPUSH
2272: CALL_OW 313
2276: PUSH
2277: LD_INT 6
2279: LESS
2280: IFFALSE 2306
// begin PlaceHumanInUnit ( i , j ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 10
2291: PPUSH
2292: CALL_OW 52
// placed := true ;
2296: LD_ADDR_VAR 0 11
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// break ;
2304: GO 2308
// end ;
2306: GO 2264
2308: POP
2309: POP
// end ; if GetClass ( i ) = 4 then
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL_OW 257
2319: PUSH
2320: LD_INT 4
2322: EQUAL
2323: IFFALSE 2387
// if lab then
2325: LD_VAR 0 8
2329: IFFALSE 2387
// begin for j in lab do
2331: LD_ADDR_VAR 0 10
2335: PUSH
2336: LD_VAR 0 8
2340: PUSH
2341: FOR_IN
2342: IFFALSE 2385
// if UnitsInside ( j ) < 6 then
2344: LD_VAR 0 10
2348: PPUSH
2349: CALL_OW 313
2353: PUSH
2354: LD_INT 6
2356: LESS
2357: IFFALSE 2383
// begin PlaceHumanInUnit ( i , j ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 10
2368: PPUSH
2369: CALL_OW 52
// placed := true ;
2373: LD_ADDR_VAR 0 11
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// break ;
2381: GO 2385
// end ;
2383: GO 2341
2385: POP
2386: POP
// end ; if not placed then
2387: LD_VAR 0 11
2391: NOT
2392: IFFALSE 2418
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2394: LD_VAR 0 2
2398: PPUSH
2399: LD_INT 5
2401: PPUSH
2402: LD_INT 0
2404: PPUSH
2405: CALL_OW 49
// ComHold ( i ) ;
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL_OW 140
// end ; end ;
2418: GO 1998
2420: POP
2421: POP
// if ct then
2422: LD_VAR 0 12
2426: IFFALSE 2530
// if UnitsInside ( ct [ 1 ] ) then
2428: LD_VAR 0 12
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 313
2441: IFFALSE 2530
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: LD_INT 22
2450: PUSH
2451: LD_INT 1
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 33
2460: PUSH
2461: LD_INT 2
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 69
2476: PUSH
2477: FOR_IN
2478: IFFALSE 2528
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_VAR 0 12
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 313
2498: PUSH
2499: LD_INT 1
2501: PPUSH
2502: LD_VAR 0 12
2506: PUSH
2507: LD_INT 1
2509: ARRAY
2510: PPUSH
2511: CALL_OW 313
2515: PPUSH
2516: CALL_OW 12
2520: ARRAY
2521: PPUSH
2522: CALL_OW 135
2526: GO 2477
2528: POP
2529: POP
// end ; end ;
2530: LD_VAR 0 1
2534: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2543: LD_INT 71
2545: PPUSH
2546: LD_INT 5
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2556: LD_ADDR_VAR 0 2
2560: PUSH
2561: LD_STRING GammaBase
2563: PPUSH
2564: EMPTY
2565: PPUSH
2566: CALL_OW 30
2570: ST_TO_ADDR
// if not blist then
2571: LD_VAR 0 2
2575: NOT
2576: IFFALSE 2616
// blist := [ [ b_warehouse , 51 , 10 , 3 , 3 , 0 , 0 ] ] ;
2578: LD_ADDR_VAR 0 2
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 51
2588: PUSH
2589: LD_INT 10
2591: PUSH
2592: LD_INT 3
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 0
2600: PUSH
2601: LD_INT 0
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: EMPTY
2614: LIST
2615: ST_TO_ADDR
// uc_side := 1 ;
2616: LD_ADDR_OWVAR 20
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// uc_nation := 1 ;
2624: LD_ADDR_OWVAR 21
2628: PUSH
2629: LD_INT 1
2631: ST_TO_ADDR
// for i in blist do
2632: LD_ADDR_VAR 0 3
2636: PUSH
2637: LD_VAR 0 2
2641: PUSH
2642: FOR_IN
2643: IFFALSE 3051
// begin bc_type := i [ 1 ] ;
2645: LD_ADDR_OWVAR 42
2649: PUSH
2650: LD_VAR 0 3
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2659: LD_ADDR_OWVAR 43
2663: PUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 5
2671: ARRAY
2672: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: PUSH
2682: LD_INT 7
2684: PUSH
2685: LD_INT 8
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: IN
2692: IFFALSE 2748
// begin bc_kind1 := i [ 7 ] ;
2694: LD_ADDR_OWVAR 44
2698: PUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 7
2706: ARRAY
2707: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2708: LD_STRING 06_remoteVehs_1
2710: PPUSH
2711: LD_INT 0
2713: PPUSH
2714: CALL_OW 30
2718: PUSH
2719: LD_INT 1
2721: EQUAL
2722: IFFALSE 2734
// begin bc_kind2 := 15 ;
2724: LD_ADDR_OWVAR 45
2728: PUSH
2729: LD_INT 15
2731: ST_TO_ADDR
// end else
2732: GO 2748
// begin bc_kind2 := i [ 8 ] ;
2734: LD_ADDR_OWVAR 45
2738: PUSH
2739: LD_VAR 0 3
2743: PUSH
2744: LD_INT 8
2746: ARRAY
2747: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2748: LD_OWVAR 42
2752: PUSH
2753: LD_INT 0
2755: EQUAL
2756: IFFALSE 2874
// begin bc_type := b_warehouse ;
2758: LD_ADDR_OWVAR 42
2762: PUSH
2763: LD_INT 1
2765: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2766: LD_ADDR_EXP 37
2770: PUSH
2771: LD_VAR 0 3
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_VAR 0 3
2784: PUSH
2785: LD_INT 3
2787: ARRAY
2788: PPUSH
2789: LD_VAR 0 3
2793: PUSH
2794: LD_INT 4
2796: ARRAY
2797: PPUSH
2798: CALL_OW 47
2802: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
2803: LD_EXP 37
2807: PPUSH
2808: LD_STRING gamma
2810: PPUSH
2811: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
2815: LD_EXP 37
2819: PPUSH
2820: CALL_OW 274
2824: PPUSH
2825: LD_INT 1
2827: PPUSH
2828: LD_INT 500
2830: PUSH
2831: LD_INT 420
2833: PUSH
2834: LD_INT 350
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: PUSH
2842: LD_OWVAR 67
2846: ARRAY
2847: PPUSH
2848: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2852: LD_EXP 37
2856: PPUSH
2857: CALL_OW 274
2861: PPUSH
2862: LD_INT 2
2864: PPUSH
2865: LD_INT 200
2867: PPUSH
2868: CALL_OW 277
// end else
2872: GO 3016
// begin if bc_type = 4 then
2874: LD_OWVAR 42
2878: PUSH
2879: LD_INT 4
2881: EQUAL
2882: IFFALSE 2931
// begin bc_type = 5 ;
2884: LD_ADDR_OWVAR 42
2888: PUSH
2889: LD_INT 5
2891: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2892: LD_ADDR_VAR 0 4
2896: PUSH
2897: LD_VAR 0 3
2901: PUSH
2902: LD_INT 2
2904: ARRAY
2905: PPUSH
2906: LD_VAR 0 3
2910: PUSH
2911: LD_INT 3
2913: ARRAY
2914: PPUSH
2915: LD_VAR 0 3
2919: PUSH
2920: LD_INT 4
2922: ARRAY
2923: PPUSH
2924: CALL_OW 47
2928: ST_TO_ADDR
// end else
2929: GO 3016
// begin bc_type := i [ 1 ] ;
2931: LD_ADDR_OWVAR 42
2935: PUSH
2936: LD_VAR 0 3
2940: PUSH
2941: LD_INT 1
2943: ARRAY
2944: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2945: LD_STRING 06_remoteVehs_1
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 30
2955: PUSH
2956: LD_INT 1
2958: EQUAL
2959: PUSH
2960: LD_OWVAR 42
2964: PUSH
2965: LD_INT 7
2967: EQUAL
2968: AND
2969: IFFALSE 2979
// bc_type := b_lab_full ;
2971: LD_ADDR_OWVAR 42
2975: PUSH
2976: LD_INT 8
2978: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2979: LD_ADDR_VAR 0 4
2983: PUSH
2984: LD_VAR 0 3
2988: PUSH
2989: LD_INT 2
2991: ARRAY
2992: PPUSH
2993: LD_VAR 0 3
2997: PUSH
2998: LD_INT 3
3000: ARRAY
3001: PPUSH
3002: LD_VAR 0 3
3006: PUSH
3007: LD_INT 4
3009: ARRAY
3010: PPUSH
3011: CALL_OW 47
3015: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
3016: LD_VAR 0 4
3020: PPUSH
3021: CALL_OW 266
3025: PUSH
3026: LD_INT 32
3028: EQUAL
3029: IFFALSE 3049
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3031: LD_VAR 0 4
3035: PPUSH
3036: LD_VAR 0 3
3040: PUSH
3041: LD_INT 7
3043: ARRAY
3044: PPUSH
3045: CALL_OW 431
// end ;
3049: GO 2642
3051: POP
3052: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3053: LD_INT 22
3055: PUSH
3056: LD_INT 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 30
3065: PUSH
3066: LD_INT 3
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PPUSH
3077: CALL_OW 69
3081: IFFALSE 3329
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3083: LD_ADDR_VAR 0 4
3087: PUSH
3088: LD_INT 22
3090: PUSH
3091: LD_INT 1
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 30
3100: PUSH
3101: LD_INT 3
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: LD_INT 1
3119: ARRAY
3120: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3121: LD_ADDR_VAR 0 6
3125: PUSH
3126: LD_VAR 0 4
3130: PPUSH
3131: CALL_OW 250
3135: PPUSH
3136: LD_VAR 0 4
3140: PPUSH
3141: CALL_OW 251
3145: PPUSH
3146: LD_VAR 0 4
3150: PPUSH
3151: CALL_OW 254
3155: PPUSH
3156: CALL 16635 0 3
3160: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: LD_INT 19
3168: PUSH
3169: LD_INT 17
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3176: LD_STRING 06_remoteVehs_1
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 30
3186: IFFALSE 3209
// blist := Insert ( blist , 1 , b_ext_radar ) ;
3188: LD_ADDR_VAR 0 2
3192: PUSH
3193: LD_VAR 0 2
3197: PPUSH
3198: LD_INT 1
3200: PPUSH
3201: LD_INT 20
3203: PPUSH
3204: CALL_OW 2
3208: ST_TO_ADDR
// for i in tmp do
3209: LD_ADDR_VAR 0 3
3213: PUSH
3214: LD_VAR 0 6
3218: PUSH
3219: FOR_IN
3220: IFFALSE 3327
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3222: LD_VAR 0 3
3226: PUSH
3227: LD_INT 1
3229: ARRAY
3230: PPUSH
3231: LD_VAR 0 3
3235: PUSH
3236: LD_INT 2
3238: ARRAY
3239: PPUSH
3240: CALL_OW 428
3244: PUSH
3245: LD_INT 0
3247: EQUAL
3248: IFFALSE 3325
// begin bc_type := blist [ 1 ] ;
3250: LD_ADDR_OWVAR 42
3254: PUSH
3255: LD_VAR 0 2
3259: PUSH
3260: LD_INT 1
3262: ARRAY
3263: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3264: LD_VAR 0 3
3268: PUSH
3269: LD_INT 1
3271: ARRAY
3272: PPUSH
3273: LD_VAR 0 3
3277: PUSH
3278: LD_INT 2
3280: ARRAY
3281: PPUSH
3282: LD_VAR 0 3
3286: PUSH
3287: LD_INT 3
3289: ARRAY
3290: PPUSH
3291: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3295: LD_ADDR_VAR 0 2
3299: PUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: CALL_OW 3
3312: ST_TO_ADDR
// if blist = 0 then
3313: LD_VAR 0 2
3317: PUSH
3318: LD_INT 0
3320: EQUAL
3321: IFFALSE 3325
// break ;
3323: GO 3327
// end ;
3325: GO 3219
3327: POP
3328: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
3329: LD_STRING 06_remoteVehs_1
3331: PPUSH
3332: LD_INT 0
3334: PPUSH
3335: CALL_OW 30
3339: PUSH
3340: LD_INT 1
3342: EQUAL
3343: IFFALSE 3708
// begin bc_type = 36 ;
3345: LD_ADDR_OWVAR 42
3349: PUSH
3350: LD_INT 36
3352: ST_TO_ADDR
// bc_level = 4 ;
3353: LD_ADDR_OWVAR 43
3357: PUSH
3358: LD_INT 4
3360: ST_TO_ADDR
// if CanBeBuilded ( amDepot , b_control_tower , 62 , 12 , 3 , false ) then
3361: LD_EXP 37
3365: PPUSH
3366: LD_INT 36
3368: PPUSH
3369: LD_INT 62
3371: PPUSH
3372: LD_INT 12
3374: PPUSH
3375: LD_INT 3
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL 17505 0 6
3385: IFFALSE 3402
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3387: LD_INT 62
3389: PPUSH
3390: LD_INT 12
3392: PPUSH
3393: LD_INT 3
3395: PPUSH
3396: CALL_OW 47
3400: GO 3523
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 2 , false ) then
3402: LD_EXP 37
3406: PPUSH
3407: LD_INT 36
3409: PPUSH
3410: LD_INT 37
3412: PPUSH
3413: LD_INT 18
3415: PPUSH
3416: LD_INT 2
3418: PPUSH
3419: LD_INT 0
3421: PPUSH
3422: CALL 17505 0 6
3426: IFFALSE 3443
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3428: LD_INT 37
3430: PPUSH
3431: LD_INT 18
3433: PPUSH
3434: LD_INT 2
3436: PPUSH
3437: CALL_OW 47
3441: GO 3523
// if CanBeBuilded ( amDepot , b_control_tower , 66 , 14 , 4 , false ) then
3443: LD_EXP 37
3447: PPUSH
3448: LD_INT 36
3450: PPUSH
3451: LD_INT 66
3453: PPUSH
3454: LD_INT 14
3456: PPUSH
3457: LD_INT 4
3459: PPUSH
3460: LD_INT 0
3462: PPUSH
3463: CALL 17505 0 6
3467: IFFALSE 3484
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3469: LD_INT 66
3471: PPUSH
3472: LD_INT 14
3474: PPUSH
3475: LD_INT 4
3477: PPUSH
3478: CALL_OW 47
3482: GO 3523
// if CanBeBuilded ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3484: LD_EXP 37
3488: PPUSH
3489: LD_INT 36
3491: PPUSH
3492: LD_INT 74
3494: PPUSH
3495: LD_INT 26
3497: PPUSH
3498: LD_INT 4
3500: PPUSH
3501: LD_INT 0
3503: PPUSH
3504: CALL 17505 0 6
3508: IFFALSE 3523
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3510: LD_INT 74
3512: PPUSH
3513: LD_INT 26
3515: PPUSH
3516: LD_INT 4
3518: PPUSH
3519: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: DOUBLE
3529: LD_INT 1
3531: DEC
3532: ST_TO_ADDR
3533: LD_INT 3
3535: PUSH
3536: LD_INT 2
3538: PUSH
3539: LD_INT 2
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: LIST
3546: PUSH
3547: LD_OWVAR 67
3551: ARRAY
3552: PUSH
3553: FOR_TO
3554: IFFALSE 3706
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3556: LD_ADDR_OWVAR 37
3560: PUSH
3561: LD_INT 3
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: LD_INT 3
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: PUSH
3586: LD_INT 2
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_OWVAR 67
3598: ARRAY
3599: ST_TO_ADDR
// vc_engine = 1 ;
3600: LD_ADDR_OWVAR 39
3604: PUSH
3605: LD_INT 1
3607: ST_TO_ADDR
// vc_control = 2 ;
3608: LD_ADDR_OWVAR 38
3612: PUSH
3613: LD_INT 2
3615: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3616: LD_ADDR_OWVAR 40
3620: PUSH
3621: LD_INT 3
3623: PUSH
3624: LD_INT 4
3626: PUSH
3627: LD_INT 5
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 1
3637: PPUSH
3638: LD_INT 3
3640: PPUSH
3641: CALL_OW 12
3645: ARRAY
3646: ST_TO_ADDR
// veh = CreateVehicle ;
3647: LD_ADDR_VAR 0 5
3651: PUSH
3652: CALL_OW 45
3656: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3657: LD_VAR 0 5
3661: PPUSH
3662: LD_INT 4
3664: PPUSH
3665: CALL_OW 233
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
3669: LD_VAR 0 5
3673: PPUSH
3674: LD_EXP 37
3678: PPUSH
3679: CALL_OW 250
3683: PPUSH
3684: LD_EXP 37
3688: PPUSH
3689: CALL_OW 251
3693: PPUSH
3694: LD_INT 7
3696: PPUSH
3697: LD_INT 0
3699: PPUSH
3700: CALL_OW 50
// end ;
3704: GO 3553
3706: POP
3707: POP
// end ; end ;
3708: LD_VAR 0 1
3712: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3713: LD_INT 0
3715: PPUSH
3716: PPUSH
3717: PPUSH
3718: PPUSH
// uc_side = 1 ;
3719: LD_ADDR_OWVAR 20
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// uc_nation = 1 ;
3727: LD_ADDR_OWVAR 21
3731: PUSH
3732: LD_INT 1
3734: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3735: LD_ADDR_EXP 14
3739: PUSH
3740: LD_STRING 06c_Denis
3742: PPUSH
3743: LD_INT 1
3745: PPUSH
3746: CALL 6815 0 2
3750: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3751: LD_EXP 14
3755: PPUSH
3756: LD_INT 4
3758: PPUSH
3759: LD_INT 0
3761: PPUSH
3762: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3766: LD_ADDR_EXP 15
3770: PUSH
3771: LD_STRING 06c_Joan
3773: PPUSH
3774: LD_INT 1
3776: PPUSH
3777: CALL 6815 0 2
3781: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3782: LD_EXP 15
3786: PPUSH
3787: LD_INT 4
3789: PPUSH
3790: LD_INT 0
3792: PPUSH
3793: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3797: LD_STRING GladstoneIn07
3799: PPUSH
3800: LD_INT 0
3802: PPUSH
3803: CALL_OW 30
3807: NOT
3808: IFFALSE 3876
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3810: LD_ADDR_EXP 8
3814: PUSH
3815: LD_STRING 06c_Gladstone
3817: PPUSH
3818: LD_INT 1
3820: PPUSH
3821: CALL 6815 0 2
3825: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3826: LD_EXP 8
3830: NOT
3831: PUSH
3832: LD_STRING GladstoneStayInDelta
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: CALL_OW 30
3842: AND
3843: IFFALSE 3861
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3845: LD_ADDR_EXP 8
3849: PUSH
3850: LD_STRING 05_Gladstone
3852: PPUSH
3853: LD_INT 1
3855: PPUSH
3856: CALL 6815 0 2
3860: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3861: LD_EXP 8
3865: PPUSH
3866: LD_INT 4
3868: PPUSH
3869: LD_INT 0
3871: PPUSH
3872: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3876: LD_STRING LisaStayInDelta
3878: PPUSH
3879: LD_INT 0
3881: PPUSH
3882: CALL_OW 30
3886: IFFALSE 3919
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3888: LD_ADDR_EXP 6
3892: PUSH
3893: LD_STRING 05_Lisa
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: CALL 6815 0 2
3903: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3904: LD_EXP 6
3908: PPUSH
3909: LD_INT 4
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
3919: LD_STRING BobbyStayInDelta
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 30
3929: IFFALSE 3962
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
3931: LD_ADDR_EXP 4
3935: PUSH
3936: LD_STRING 05_Bobby
3938: PPUSH
3939: LD_INT 1
3941: PPUSH
3942: CALL 6815 0 2
3946: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3947: LD_EXP 4
3951: PPUSH
3952: LD_INT 4
3954: PPUSH
3955: LD_INT 0
3957: PPUSH
3958: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
3962: LD_STRING CyrusStayInDelta
3964: PPUSH
3965: LD_INT 0
3967: PPUSH
3968: CALL_OW 30
3972: IFFALSE 4005
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
3974: LD_ADDR_EXP 5
3978: PUSH
3979: LD_STRING 05_Cyrus
3981: PPUSH
3982: LD_INT 1
3984: PPUSH
3985: CALL 6815 0 2
3989: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3990: LD_EXP 5
3994: PPUSH
3995: LD_INT 4
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4005: LD_STRING BrownStayInDelta
4007: PPUSH
4008: LD_INT 0
4010: PPUSH
4011: CALL_OW 30
4015: IFFALSE 4048
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
4017: LD_ADDR_EXP 2
4021: PUSH
4022: LD_STRING 05_Brown
4024: PPUSH
4025: LD_INT 1
4027: PPUSH
4028: CALL 6815 0 2
4032: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4033: LD_EXP 2
4037: PPUSH
4038: LD_INT 4
4040: PPUSH
4041: LD_INT 0
4043: PPUSH
4044: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4048: LD_STRING DonaldsonStayInDelta
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 30
4058: IFFALSE 4091
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
4060: LD_ADDR_EXP 3
4064: PUSH
4065: LD_STRING 05_Donaldson
4067: PPUSH
4068: LD_INT 1
4070: PPUSH
4071: CALL 6815 0 2
4075: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4076: LD_EXP 3
4080: PPUSH
4081: LD_INT 4
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4091: LD_ADDR_VAR 0 4
4095: PUSH
4096: LD_STRING OthersStayInDelta
4098: PPUSH
4099: CALL_OW 31
4103: ST_TO_ADDR
// if other > 2 then
4104: LD_VAR 0 4
4108: PUSH
4109: LD_INT 2
4111: GREATER
4112: IFFALSE 4157
// begin for j = 1 to 2 do
4114: LD_ADDR_VAR 0 3
4118: PUSH
4119: DOUBLE
4120: LD_INT 1
4122: DEC
4123: ST_TO_ADDR
4124: LD_INT 2
4126: PUSH
4127: FOR_TO
4128: IFFALSE 4153
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4130: LD_VAR 0 4
4134: PUSH
4135: LD_VAR 0 3
4139: ARRAY
4140: PPUSH
4141: LD_INT 4
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: CALL_OW 49
4151: GO 4127
4153: POP
4154: POP
// end else
4155: GO 4200
// begin for j = 1 to other do
4157: LD_ADDR_VAR 0 3
4161: PUSH
4162: DOUBLE
4163: LD_INT 1
4165: DEC
4166: ST_TO_ADDR
4167: LD_VAR 0 4
4171: PUSH
4172: FOR_TO
4173: IFFALSE 4198
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4175: LD_VAR 0 4
4179: PUSH
4180: LD_VAR 0 3
4184: ARRAY
4185: PPUSH
4186: LD_INT 4
4188: PPUSH
4189: LD_INT 0
4191: PPUSH
4192: CALL_OW 49
4196: GO 4172
4198: POP
4199: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4200: LD_ADDR_VAR 0 4
4204: PUSH
4205: LD_STRING 06_other_apemans
4207: PPUSH
4208: CALL_OW 31
4212: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4213: LD_VAR 0 4
4217: PUSH
4218: LD_INT 5
4220: PUSH
4221: LD_INT 4
4223: PUSH
4224: LD_INT 3
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: PUSH
4232: LD_OWVAR 67
4236: ARRAY
4237: GREATEREQUAL
4238: IFFALSE 4267
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4240: LD_ADDR_VAR 0 3
4244: PUSH
4245: LD_INT 5
4247: PUSH
4248: LD_INT 4
4250: PUSH
4251: LD_INT 3
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: LIST
4258: PUSH
4259: LD_OWVAR 67
4263: ARRAY
4264: ST_TO_ADDR
4265: GO 4277
// j := other ;
4267: LD_ADDR_VAR 0 3
4271: PUSH
4272: LD_VAR 0 4
4276: ST_TO_ADDR
// for i = 1 to j do
4277: LD_ADDR_VAR 0 2
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4318
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4295: LD_VAR 0 4
4299: PUSH
4300: LD_VAR 0 2
4304: ARRAY
4305: PPUSH
4306: LD_INT 4
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: CALL_OW 49
4316: GO 4292
4318: POP
4319: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4320: LD_INT 4
4322: PPUSH
4323: LD_INT 22
4325: PUSH
4326: LD_INT 1
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: LD_INT 21
4335: PUSH
4336: LD_INT 1
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PPUSH
4347: CALL_OW 70
4351: PPUSH
4352: LD_INT 53
4354: PPUSH
4355: LD_INT 19
4357: PPUSH
4358: CALL_OW 111
// firstAttack = 1 ;
4362: LD_ADDR_EXP 33
4366: PUSH
4367: LD_INT 1
4369: ST_TO_ADDR
// end ;
4370: LD_VAR 0 1
4374: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4375: LD_INT 0
4377: PPUSH
4378: PPUSH
4379: PPUSH
4380: PPUSH
4381: PPUSH
4382: PPUSH
4383: PPUSH
4384: PPUSH
4385: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4386: LD_ADDR_VAR 0 8
4390: PUSH
4391: LD_STRING 07_vehicles
4393: PPUSH
4394: EMPTY
4395: PPUSH
4396: CALL_OW 30
4400: ST_TO_ADDR
// uc_side := 1 ;
4401: LD_ADDR_OWVAR 20
4405: PUSH
4406: LD_INT 1
4408: ST_TO_ADDR
// uc_nation := 1 ;
4409: LD_ADDR_OWVAR 21
4413: PUSH
4414: LD_INT 1
4416: ST_TO_ADDR
// if vehicles then
4417: LD_VAR 0 8
4421: IFFALSE 4580
// begin k := 1 ;
4423: LD_ADDR_VAR 0 3
4427: PUSH
4428: LD_INT 1
4430: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4431: LD_ADDR_VAR 0 2
4435: PUSH
4436: DOUBLE
4437: LD_INT 1
4439: DEC
4440: ST_TO_ADDR
4441: LD_VAR 0 8
4445: PUSH
4446: LD_INT 4
4448: DIV
4449: PUSH
4450: FOR_TO
4451: IFFALSE 4578
// begin vc_chassis = vehicles [ k ] ;
4453: LD_ADDR_OWVAR 37
4457: PUSH
4458: LD_VAR 0 8
4462: PUSH
4463: LD_VAR 0 3
4467: ARRAY
4468: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4469: LD_ADDR_OWVAR 39
4473: PUSH
4474: LD_VAR 0 8
4478: PUSH
4479: LD_VAR 0 3
4483: PUSH
4484: LD_INT 1
4486: PLUS
4487: ARRAY
4488: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4489: LD_ADDR_OWVAR 38
4493: PUSH
4494: LD_VAR 0 8
4498: PUSH
4499: LD_VAR 0 3
4503: PUSH
4504: LD_INT 2
4506: PLUS
4507: ARRAY
4508: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4509: LD_ADDR_OWVAR 40
4513: PUSH
4514: LD_VAR 0 8
4518: PUSH
4519: LD_VAR 0 3
4523: PUSH
4524: LD_INT 3
4526: PLUS
4527: ARRAY
4528: ST_TO_ADDR
// k := k + 4 ;
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: LD_VAR 0 3
4538: PUSH
4539: LD_INT 4
4541: PLUS
4542: ST_TO_ADDR
// veh := CreateVehicle ;
4543: LD_ADDR_VAR 0 9
4547: PUSH
4548: CALL_OW 45
4552: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4553: LD_ADDR_VAR 0 7
4557: PUSH
4558: LD_VAR 0 7
4562: PPUSH
4563: LD_INT 1
4565: PPUSH
4566: LD_VAR 0 9
4570: PPUSH
4571: CALL_OW 2
4575: ST_TO_ADDR
// end ;
4576: GO 4450
4578: POP
4579: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4580: LD_ADDR_EXP 1
4584: PUSH
4585: LD_EXP 43
4589: PUSH
4590: LD_STRING JMM
4592: STR
4593: PPUSH
4594: LD_INT 1
4596: PPUSH
4597: CALL 6815 0 2
4601: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4602: LD_EXP 12
4606: PUSH
4607: LD_INT 1
4609: EQUAL
4610: PUSH
4611: LD_EXP 12
4615: PUSH
4616: LD_INT 3
4618: EQUAL
4619: OR
4620: PUSH
4621: LD_EXP 2
4625: NOT
4626: AND
4627: IFFALSE 4680
// begin Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4629: LD_ADDR_EXP 2
4633: PUSH
4634: LD_EXP 43
4638: PUSH
4639: LD_STRING Brown
4641: STR
4642: PPUSH
4643: LD_INT 1
4645: PPUSH
4646: CALL 6815 0 2
4650: ST_TO_ADDR
// if Brown then
4651: LD_EXP 2
4655: IFFALSE 4680
// tmp := Insert ( tmp , 1 , Brown ) ;
4657: LD_ADDR_VAR 0 6
4661: PUSH
4662: LD_VAR 0 6
4666: PPUSH
4667: LD_INT 1
4669: PPUSH
4670: LD_EXP 2
4674: PPUSH
4675: CALL_OW 2
4679: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4680: LD_EXP 12
4684: PUSH
4685: LD_INT 2
4687: EQUAL
4688: PUSH
4689: LD_EXP 12
4693: PUSH
4694: LD_INT 3
4696: EQUAL
4697: OR
4698: PUSH
4699: LD_EXP 3
4703: NOT
4704: AND
4705: IFFALSE 4758
// begin Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4707: LD_ADDR_EXP 3
4711: PUSH
4712: LD_EXP 43
4716: PUSH
4717: LD_STRING Donaldson
4719: STR
4720: PPUSH
4721: LD_INT 1
4723: PPUSH
4724: CALL 6815 0 2
4728: ST_TO_ADDR
// if Donaldson then
4729: LD_EXP 3
4733: IFFALSE 4758
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4735: LD_ADDR_VAR 0 6
4739: PUSH
4740: LD_VAR 0 6
4744: PPUSH
4745: LD_INT 1
4747: PPUSH
4748: LD_EXP 3
4752: PPUSH
4753: CALL_OW 2
4757: ST_TO_ADDR
// end ; if not Bobby then
4758: LD_EXP 4
4762: NOT
4763: IFFALSE 4816
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4765: LD_ADDR_EXP 4
4769: PUSH
4770: LD_EXP 43
4774: PUSH
4775: LD_STRING Bobby
4777: STR
4778: PPUSH
4779: LD_INT 1
4781: PPUSH
4782: CALL 6815 0 2
4786: ST_TO_ADDR
// if Bobby then
4787: LD_EXP 4
4791: IFFALSE 4816
// tmp := Insert ( tmp , 1 , Bobby ) ;
4793: LD_ADDR_VAR 0 6
4797: PUSH
4798: LD_VAR 0 6
4802: PPUSH
4803: LD_INT 1
4805: PPUSH
4806: LD_EXP 4
4810: PPUSH
4811: CALL_OW 2
4815: ST_TO_ADDR
// end ; if not Cyrus then
4816: LD_EXP 5
4820: NOT
4821: IFFALSE 4874
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4823: LD_ADDR_EXP 5
4827: PUSH
4828: LD_EXP 43
4832: PUSH
4833: LD_STRING Cyrus
4835: STR
4836: PPUSH
4837: LD_INT 1
4839: PPUSH
4840: CALL 6815 0 2
4844: ST_TO_ADDR
// if Cyrus then
4845: LD_EXP 5
4849: IFFALSE 4874
// tmp := Insert ( tmp , 1 , Cyrus ) ;
4851: LD_ADDR_VAR 0 6
4855: PUSH
4856: LD_VAR 0 6
4860: PPUSH
4861: LD_INT 1
4863: PPUSH
4864: LD_EXP 5
4868: PPUSH
4869: CALL_OW 2
4873: ST_TO_ADDR
// end ; if not Lisa then
4874: LD_EXP 6
4878: NOT
4879: IFFALSE 4932
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4881: LD_ADDR_EXP 6
4885: PUSH
4886: LD_EXP 43
4890: PUSH
4891: LD_STRING Lisa
4893: STR
4894: PPUSH
4895: LD_INT 1
4897: PPUSH
4898: CALL 6815 0 2
4902: ST_TO_ADDR
// if Lisa then
4903: LD_EXP 6
4907: IFFALSE 4932
// tmp := Insert ( tmp , 1 , Lisa ) ;
4909: LD_ADDR_VAR 0 6
4913: PUSH
4914: LD_VAR 0 6
4918: PPUSH
4919: LD_INT 1
4921: PPUSH
4922: LD_EXP 6
4926: PPUSH
4927: CALL_OW 2
4931: ST_TO_ADDR
// end ; if not Frank then
4932: LD_EXP 7
4936: NOT
4937: IFFALSE 4990
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
4939: LD_ADDR_EXP 7
4943: PUSH
4944: LD_EXP 43
4948: PUSH
4949: LD_STRING Frank
4951: STR
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: CALL 6815 0 2
4960: ST_TO_ADDR
// if Frank then
4961: LD_EXP 7
4965: IFFALSE 4990
// tmp := Insert ( tmp , 1 , Frank ) ;
4967: LD_ADDR_VAR 0 6
4971: PUSH
4972: LD_VAR 0 6
4976: PPUSH
4977: LD_INT 1
4979: PPUSH
4980: LD_EXP 7
4984: PPUSH
4985: CALL_OW 2
4989: ST_TO_ADDR
// end ; if not Kikuchi then
4990: LD_EXP 9
4994: NOT
4995: IFFALSE 5048
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4997: LD_ADDR_EXP 9
5001: PUSH
5002: LD_EXP 43
5006: PUSH
5007: LD_STRING Kikuchi
5009: STR
5010: PPUSH
5011: LD_INT 1
5013: PPUSH
5014: CALL 6815 0 2
5018: ST_TO_ADDR
// if Kikuchi then
5019: LD_EXP 9
5023: IFFALSE 5048
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5025: LD_ADDR_VAR 0 6
5029: PUSH
5030: LD_VAR 0 6
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: LD_EXP 9
5042: PPUSH
5043: CALL_OW 2
5047: ST_TO_ADDR
// end ; if not Gladstone then
5048: LD_EXP 8
5052: NOT
5053: IFFALSE 5106
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5055: LD_ADDR_EXP 8
5059: PUSH
5060: LD_EXP 43
5064: PUSH
5065: LD_STRING Gladstone
5067: STR
5068: PPUSH
5069: LD_INT 1
5071: PPUSH
5072: CALL 6815 0 2
5076: ST_TO_ADDR
// if Gladstone then
5077: LD_EXP 8
5081: IFFALSE 5106
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5083: LD_ADDR_VAR 0 6
5087: PUSH
5088: LD_VAR 0 6
5092: PPUSH
5093: LD_INT 1
5095: PPUSH
5096: LD_EXP 8
5100: PPUSH
5101: CALL_OW 2
5105: ST_TO_ADDR
// end ; if not Khatam then
5106: LD_EXP 10
5110: NOT
5111: IFFALSE 5164
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5113: LD_ADDR_EXP 10
5117: PUSH
5118: LD_EXP 43
5122: PUSH
5123: LD_STRING Khatam
5125: STR
5126: PPUSH
5127: LD_INT 1
5129: PPUSH
5130: CALL 6815 0 2
5134: ST_TO_ADDR
// if Khatam then
5135: LD_EXP 10
5139: IFFALSE 5164
// tmp := Insert ( tmp , 1 , Khatam ) ;
5141: LD_ADDR_VAR 0 6
5145: PUSH
5146: LD_VAR 0 6
5150: PPUSH
5151: LD_INT 1
5153: PPUSH
5154: LD_EXP 10
5158: PPUSH
5159: CALL_OW 2
5163: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5164: LD_ADDR_VAR 0 5
5168: PUSH
5169: LD_STRING 07c_others
5171: PPUSH
5172: CALL_OW 31
5176: ST_TO_ADDR
// if others then
5177: LD_VAR 0 5
5181: IFFALSE 5269
// for i in others do
5183: LD_ADDR_VAR 0 2
5187: PUSH
5188: LD_VAR 0 5
5192: PUSH
5193: FOR_IN
5194: IFFALSE 5267
// if GetClass ( i ) = 3 then
5196: LD_VAR 0 2
5200: PPUSH
5201: CALL_OW 257
5205: PUSH
5206: LD_INT 3
5208: EQUAL
5209: IFFALSE 5236
// tmp := Insert ( tmp , 1 , i ) else
5211: LD_ADDR_VAR 0 6
5215: PUSH
5216: LD_VAR 0 6
5220: PPUSH
5221: LD_INT 1
5223: PPUSH
5224: LD_VAR 0 2
5228: PPUSH
5229: CALL_OW 2
5233: ST_TO_ADDR
5234: GO 5265
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5236: LD_ADDR_VAR 0 6
5240: PUSH
5241: LD_VAR 0 6
5245: PPUSH
5246: LD_VAR 0 6
5250: PUSH
5251: LD_INT 1
5253: PLUS
5254: PPUSH
5255: LD_VAR 0 2
5259: PPUSH
5260: CALL_OW 2
5264: ST_TO_ADDR
5265: GO 5193
5267: POP
5268: POP
// wait ( 0 0$1 ) ;
5269: LD_INT 35
5271: PPUSH
5272: CALL_OW 67
// for i in tmp do
5276: LD_ADDR_VAR 0 2
5280: PUSH
5281: LD_VAR 0 6
5285: PUSH
5286: FOR_IN
5287: IFFALSE 5419
// begin SetDir ( i , 3 ) ;
5289: LD_VAR 0 2
5293: PPUSH
5294: LD_INT 3
5296: PPUSH
5297: CALL_OW 233
// if tmp_vehs then
5301: LD_VAR 0 7
5305: IFFALSE 5380
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5307: LD_VAR 0 7
5311: PUSH
5312: LD_INT 1
5314: ARRAY
5315: PPUSH
5316: LD_INT 3
5318: PPUSH
5319: CALL_OW 233
// PlaceUnitArea ( tmp_vehs [ 1 ] , GammaSupport , false ) ;
5323: LD_VAR 0 7
5327: PUSH
5328: LD_INT 1
5330: ARRAY
5331: PPUSH
5332: LD_INT 4
5334: PPUSH
5335: LD_INT 0
5337: PPUSH
5338: CALL_OW 49
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5342: LD_VAR 0 2
5346: PPUSH
5347: LD_VAR 0 7
5351: PUSH
5352: LD_INT 1
5354: ARRAY
5355: PPUSH
5356: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5360: LD_ADDR_VAR 0 7
5364: PUSH
5365: LD_VAR 0 7
5369: PPUSH
5370: LD_INT 1
5372: PPUSH
5373: CALL_OW 3
5377: ST_TO_ADDR
// end else
5378: GO 5395
// PlaceUnitArea ( i , GammaSupport , false ) ;
5380: LD_VAR 0 2
5384: PPUSH
5385: LD_INT 4
5387: PPUSH
5388: LD_INT 0
5390: PPUSH
5391: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5395: LD_VAR 0 2
5399: PPUSH
5400: LD_INT 77
5402: PPUSH
5403: LD_INT 16
5405: PPUSH
5406: CALL_OW 111
// wait ( 0 0$2 ) ;
5410: LD_INT 70
5412: PPUSH
5413: CALL_OW 67
// end ;
5417: GO 5286
5419: POP
5420: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5421: LD_EXP 1
5425: PPUSH
5426: LD_INT 4
5428: PPUSH
5429: LD_INT 0
5431: PPUSH
5432: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5436: LD_EXP 1
5440: PPUSH
5441: LD_INT 77
5443: PPUSH
5444: LD_INT 16
5446: PPUSH
5447: CALL_OW 111
// end ;
5451: LD_VAR 0 1
5455: RET
// export function PrepareSikorsky ; begin
5456: LD_INT 0
5458: PPUSH
// uc_side = 4 ;
5459: LD_ADDR_OWVAR 20
5463: PUSH
5464: LD_INT 4
5466: ST_TO_ADDR
// uc_nation = 1 ;
5467: LD_ADDR_OWVAR 21
5471: PUSH
5472: LD_INT 1
5474: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5475: LD_ADDR_EXP 16
5479: PUSH
5480: LD_STRING Sikorski
5482: PPUSH
5483: LD_INT 0
5485: PPUSH
5486: CALL 6815 0 2
5490: ST_TO_ADDR
// vc_engine = 1 ;
5491: LD_ADDR_OWVAR 39
5495: PUSH
5496: LD_INT 1
5498: ST_TO_ADDR
// vc_control = 1 ;
5499: LD_ADDR_OWVAR 38
5503: PUSH
5504: LD_INT 1
5506: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5507: LD_ADDR_OWVAR 40
5511: PUSH
5512: LD_INT 5
5514: PUSH
5515: LD_INT 3
5517: PUSH
5518: LD_INT 4
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: LIST
5525: PUSH
5526: LD_OWVAR 67
5530: ARRAY
5531: ST_TO_ADDR
// vc_chassis = 4 ;
5532: LD_ADDR_OWVAR 37
5536: PUSH
5537: LD_INT 4
5539: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5540: LD_ADDR_EXP 17
5544: PUSH
5545: CALL_OW 45
5549: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
5550: LD_EXP 17
5554: PPUSH
5555: LD_INT 9
5557: PPUSH
5558: LD_INT 0
5560: PPUSH
5561: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5565: LD_EXP 16
5569: PPUSH
5570: LD_EXP 17
5574: PPUSH
5575: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5579: LD_EXP 17
5583: PPUSH
5584: LD_INT 5
5586: PPUSH
5587: CALL_OW 113
// end ;
5591: LD_VAR 0 1
5595: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5596: LD_INT 0
5598: PPUSH
5599: PPUSH
5600: PPUSH
5601: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5602: LD_ADDR_VAR 0 2
5606: PUSH
5607: DOUBLE
5608: LD_INT 1
5610: DEC
5611: ST_TO_ADDR
5612: LD_INT 8
5614: PUSH
5615: LD_INT 7
5617: PUSH
5618: LD_INT 7
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: LIST
5625: PUSH
5626: LD_OWVAR 67
5630: ARRAY
5631: PUSH
5632: FOR_TO
5633: IFFALSE 5730
// begin uc_side = 4 ;
5635: LD_ADDR_OWVAR 20
5639: PUSH
5640: LD_INT 4
5642: ST_TO_ADDR
// uc_nation = 1 ;
5643: LD_ADDR_OWVAR 21
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
// hc_name =  ;
5651: LD_ADDR_OWVAR 26
5655: PUSH
5656: LD_STRING 
5658: ST_TO_ADDR
// hc_gallery =  ;
5659: LD_ADDR_OWVAR 33
5663: PUSH
5664: LD_STRING 
5666: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5667: LD_INT 0
5669: PPUSH
5670: LD_INT 1
5672: PPUSH
5673: LD_INT 5
5675: PPUSH
5676: LD_INT 8
5678: PPUSH
5679: CALL_OW 12
5683: PPUSH
5684: CALL_OW 380
// un = CreateHuman ;
5688: LD_ADDR_VAR 0 3
5692: PUSH
5693: CALL_OW 44
5697: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5698: LD_VAR 0 3
5702: PPUSH
5703: LD_INT 9
5705: PPUSH
5706: LD_INT 0
5708: PPUSH
5709: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5713: LD_VAR 0 3
5717: PPUSH
5718: LD_INT 53
5720: PPUSH
5721: LD_INT 23
5723: PPUSH
5724: CALL_OW 111
// end ;
5728: GO 5632
5730: POP
5731: POP
// for i = 1 to 3 do
5732: LD_ADDR_VAR 0 2
5736: PUSH
5737: DOUBLE
5738: LD_INT 1
5740: DEC
5741: ST_TO_ADDR
5742: LD_INT 3
5744: PUSH
5745: FOR_TO
5746: IFFALSE 5843
// begin uc_side = 4 ;
5748: LD_ADDR_OWVAR 20
5752: PUSH
5753: LD_INT 4
5755: ST_TO_ADDR
// uc_nation = 1 ;
5756: LD_ADDR_OWVAR 21
5760: PUSH
5761: LD_INT 1
5763: ST_TO_ADDR
// hc_name =  ;
5764: LD_ADDR_OWVAR 26
5768: PUSH
5769: LD_STRING 
5771: ST_TO_ADDR
// hc_gallery =  ;
5772: LD_ADDR_OWVAR 33
5776: PUSH
5777: LD_STRING 
5779: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5780: LD_INT 0
5782: PPUSH
5783: LD_INT 4
5785: PPUSH
5786: LD_INT 5
5788: PPUSH
5789: LD_INT 8
5791: PPUSH
5792: CALL_OW 12
5796: PPUSH
5797: CALL_OW 380
// un = CreateHuman ;
5801: LD_ADDR_VAR 0 3
5805: PUSH
5806: CALL_OW 44
5810: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5811: LD_VAR 0 3
5815: PPUSH
5816: LD_INT 9
5818: PPUSH
5819: LD_INT 0
5821: PPUSH
5822: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5826: LD_VAR 0 3
5830: PPUSH
5831: LD_INT 53
5833: PPUSH
5834: LD_INT 23
5836: PPUSH
5837: CALL_OW 111
// end ;
5841: GO 5745
5843: POP
5844: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5845: LD_ADDR_VAR 0 2
5849: PUSH
5850: DOUBLE
5851: LD_INT 1
5853: DEC
5854: ST_TO_ADDR
5855: LD_INT 9
5857: PUSH
5858: LD_INT 8
5860: PUSH
5861: LD_INT 7
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: PUSH
5869: LD_OWVAR 67
5873: ARRAY
5874: PUSH
5875: FOR_TO
5876: IFFALSE 6072
// begin uc_side = 4 ;
5878: LD_ADDR_OWVAR 20
5882: PUSH
5883: LD_INT 4
5885: ST_TO_ADDR
// uc_nation = 1 ;
5886: LD_ADDR_OWVAR 21
5890: PUSH
5891: LD_INT 1
5893: ST_TO_ADDR
// vc_engine = 1 ;
5894: LD_ADDR_OWVAR 39
5898: PUSH
5899: LD_INT 1
5901: ST_TO_ADDR
// vc_control = 1 ;
5902: LD_ADDR_OWVAR 38
5906: PUSH
5907: LD_INT 1
5909: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
5910: LD_ADDR_OWVAR 40
5914: PUSH
5915: LD_INT 3
5917: PUSH
5918: LD_INT 4
5920: PUSH
5921: LD_INT 5
5923: PUSH
5924: LD_INT 6
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: PUSH
5933: LD_INT 1
5935: PPUSH
5936: LD_INT 4
5938: PPUSH
5939: CALL_OW 12
5943: ARRAY
5944: ST_TO_ADDR
// vc_chassis = 4 ;
5945: LD_ADDR_OWVAR 37
5949: PUSH
5950: LD_INT 4
5952: ST_TO_ADDR
// veh = CreateVehicle ;
5953: LD_ADDR_VAR 0 4
5957: PUSH
5958: CALL_OW 45
5962: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
5963: LD_VAR 0 4
5967: PPUSH
5968: LD_INT 9
5970: PPUSH
5971: LD_INT 0
5973: PPUSH
5974: CALL_OW 49
// hc_name =  ;
5978: LD_ADDR_OWVAR 26
5982: PUSH
5983: LD_STRING 
5985: ST_TO_ADDR
// hc_gallery =  ;
5986: LD_ADDR_OWVAR 33
5990: PUSH
5991: LD_STRING 
5993: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
5994: LD_INT 0
5996: PPUSH
5997: LD_INT 3
5999: PPUSH
6000: LD_INT 5
6002: PPUSH
6003: LD_INT 8
6005: PPUSH
6006: CALL_OW 12
6010: PPUSH
6011: CALL_OW 380
// un = CreateHuman ;
6015: LD_ADDR_VAR 0 3
6019: PUSH
6020: CALL_OW 44
6024: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6025: LD_VAR 0 3
6029: PPUSH
6030: LD_VAR 0 4
6034: PPUSH
6035: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
6039: LD_VAR 0 4
6043: PUSH
6044: LD_VAR 0 3
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: PPUSH
6053: LD_INT 53
6055: PPUSH
6056: LD_INT 23
6058: PPUSH
6059: CALL_OW 111
// wait ( 0 0$5 ) ;
6063: LD_INT 175
6065: PPUSH
6066: CALL_OW 67
// end ;
6070: GO 5875
6072: POP
6073: POP
// end ; end_of_file
6074: LD_VAR 0 1
6078: RET
// export function PrepareRussianCommander ; begin
6079: LD_INT 0
6081: PPUSH
// uc_side = 3 ;
6082: LD_ADDR_OWVAR 20
6086: PUSH
6087: LD_INT 3
6089: ST_TO_ADDR
// uc_nation = 3 ;
6090: LD_ADDR_OWVAR 21
6094: PUSH
6095: LD_INT 3
6097: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6098: LD_ADDR_EXP 24
6102: PUSH
6103: LD_STRING Borodin
6105: PPUSH
6106: CALL_OW 25
6110: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6111: LD_EXP 24
6115: PPUSH
6116: LD_INT 25
6118: PPUSH
6119: LD_INT 0
6121: PPUSH
6122: CALL_OW 49
// end ;
6126: LD_VAR 0 1
6130: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6131: LD_INT 0
6133: PPUSH
6134: PPUSH
6135: PPUSH
6136: PPUSH
// for i = 1 to 10 do
6137: LD_ADDR_VAR 0 2
6141: PUSH
6142: DOUBLE
6143: LD_INT 1
6145: DEC
6146: ST_TO_ADDR
6147: LD_INT 10
6149: PUSH
6150: FOR_TO
6151: IFFALSE 6225
// begin uc_side = 6 ;
6153: LD_ADDR_OWVAR 20
6157: PUSH
6158: LD_INT 6
6160: ST_TO_ADDR
// uc_nation = 3 ;
6161: LD_ADDR_OWVAR 21
6165: PUSH
6166: LD_INT 3
6168: ST_TO_ADDR
// hc_gallery =  ;
6169: LD_ADDR_OWVAR 33
6173: PUSH
6174: LD_STRING 
6176: ST_TO_ADDR
// hc_name =  ;
6177: LD_ADDR_OWVAR 26
6181: PUSH
6182: LD_STRING 
6184: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6185: LD_INT 0
6187: PPUSH
6188: LD_INT 1
6190: PPUSH
6191: LD_INT 3
6193: PPUSH
6194: CALL_OW 380
// un = CreateHuman ;
6198: LD_ADDR_VAR 0 3
6202: PUSH
6203: CALL_OW 44
6207: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6208: LD_VAR 0 3
6212: PPUSH
6213: LD_INT 1
6215: PPUSH
6216: LD_INT 0
6218: PPUSH
6219: CALL_OW 49
// end ;
6223: GO 6150
6225: POP
6226: POP
// for i = 1 to 3 do
6227: LD_ADDR_VAR 0 2
6231: PUSH
6232: DOUBLE
6233: LD_INT 1
6235: DEC
6236: ST_TO_ADDR
6237: LD_INT 3
6239: PUSH
6240: FOR_TO
6241: IFFALSE 6390
// begin uc_side = 6 ;
6243: LD_ADDR_OWVAR 20
6247: PUSH
6248: LD_INT 6
6250: ST_TO_ADDR
// uc_nation = 3 ;
6251: LD_ADDR_OWVAR 21
6255: PUSH
6256: LD_INT 3
6258: ST_TO_ADDR
// vc_engine = 1 ;
6259: LD_ADDR_OWVAR 39
6263: PUSH
6264: LD_INT 1
6266: ST_TO_ADDR
// vc_control = 1 ;
6267: LD_ADDR_OWVAR 38
6271: PUSH
6272: LD_INT 1
6274: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6275: LD_ADDR_OWVAR 40
6279: PUSH
6280: LD_INT 43
6282: PUSH
6283: LD_INT 44
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 1
6292: PPUSH
6293: LD_INT 2
6295: PPUSH
6296: CALL_OW 12
6300: ARRAY
6301: ST_TO_ADDR
// vc_chassis = 22 ;
6302: LD_ADDR_OWVAR 37
6306: PUSH
6307: LD_INT 22
6309: ST_TO_ADDR
// veh = CreateVehicle ;
6310: LD_ADDR_VAR 0 4
6314: PUSH
6315: CALL_OW 45
6319: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6320: LD_VAR 0 4
6324: PPUSH
6325: LD_INT 2
6327: PPUSH
6328: LD_INT 0
6330: PPUSH
6331: CALL_OW 49
// hc_gallery =  ;
6335: LD_ADDR_OWVAR 33
6339: PUSH
6340: LD_STRING 
6342: ST_TO_ADDR
// hc_name =  ;
6343: LD_ADDR_OWVAR 26
6347: PUSH
6348: LD_STRING 
6350: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6351: LD_INT 0
6353: PPUSH
6354: LD_INT 3
6356: PPUSH
6357: LD_INT 4
6359: PPUSH
6360: CALL_OW 380
// un = CreateHuman ;
6364: LD_ADDR_VAR 0 3
6368: PUSH
6369: CALL_OW 44
6373: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6374: LD_VAR 0 3
6378: PPUSH
6379: LD_VAR 0 4
6383: PPUSH
6384: CALL_OW 52
// end ;
6388: GO 6240
6390: POP
6391: POP
// end ;
6392: LD_VAR 0 1
6396: RET
// export function PrepareRussians ; var i , un ; begin
6397: LD_INT 0
6399: PPUSH
6400: PPUSH
6401: PPUSH
// for i = 1 to 8 do
6402: LD_ADDR_VAR 0 2
6406: PUSH
6407: DOUBLE
6408: LD_INT 1
6410: DEC
6411: ST_TO_ADDR
6412: LD_INT 8
6414: PUSH
6415: FOR_TO
6416: IFFALSE 6502
// begin uc_side = 3 ;
6418: LD_ADDR_OWVAR 20
6422: PUSH
6423: LD_INT 3
6425: ST_TO_ADDR
// uc_nation = 3 ;
6426: LD_ADDR_OWVAR 21
6430: PUSH
6431: LD_INT 3
6433: ST_TO_ADDR
// hc_gallery =  ;
6434: LD_ADDR_OWVAR 33
6438: PUSH
6439: LD_STRING 
6441: ST_TO_ADDR
// hc_name =  ;
6442: LD_ADDR_OWVAR 26
6446: PUSH
6447: LD_STRING 
6449: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6450: LD_INT 0
6452: PPUSH
6453: LD_INT 1
6455: PPUSH
6456: LD_EXP 25
6460: PPUSH
6461: LD_EXP 26
6465: PPUSH
6466: CALL_OW 12
6470: PPUSH
6471: CALL_OW 380
// un = CreateHuman ;
6475: LD_ADDR_VAR 0 3
6479: PUSH
6480: CALL_OW 44
6484: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6485: LD_VAR 0 3
6489: PPUSH
6490: LD_INT 3
6492: PPUSH
6493: LD_INT 0
6495: PPUSH
6496: CALL_OW 49
// end ;
6500: GO 6415
6502: POP
6503: POP
// for i = 1 to 4 do
6504: LD_ADDR_VAR 0 2
6508: PUSH
6509: DOUBLE
6510: LD_INT 1
6512: DEC
6513: ST_TO_ADDR
6514: LD_INT 4
6516: PUSH
6517: FOR_TO
6518: IFFALSE 6604
// begin uc_side = 3 ;
6520: LD_ADDR_OWVAR 20
6524: PUSH
6525: LD_INT 3
6527: ST_TO_ADDR
// uc_nation = 3 ;
6528: LD_ADDR_OWVAR 21
6532: PUSH
6533: LD_INT 3
6535: ST_TO_ADDR
// hc_gallery =  ;
6536: LD_ADDR_OWVAR 33
6540: PUSH
6541: LD_STRING 
6543: ST_TO_ADDR
// hc_name =  ;
6544: LD_ADDR_OWVAR 26
6548: PUSH
6549: LD_STRING 
6551: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6552: LD_INT 0
6554: PPUSH
6555: LD_INT 2
6557: PPUSH
6558: LD_EXP 25
6562: PPUSH
6563: LD_EXP 26
6567: PPUSH
6568: CALL_OW 12
6572: PPUSH
6573: CALL_OW 380
// un = CreateHuman ;
6577: LD_ADDR_VAR 0 3
6581: PUSH
6582: CALL_OW 44
6586: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6587: LD_VAR 0 3
6591: PPUSH
6592: LD_INT 3
6594: PPUSH
6595: LD_INT 0
6597: PPUSH
6598: CALL_OW 49
// end ;
6602: GO 6517
6604: POP
6605: POP
// for i = 1 to 3 do
6606: LD_ADDR_VAR 0 2
6610: PUSH
6611: DOUBLE
6612: LD_INT 1
6614: DEC
6615: ST_TO_ADDR
6616: LD_INT 3
6618: PUSH
6619: FOR_TO
6620: IFFALSE 6706
// begin uc_side = 3 ;
6622: LD_ADDR_OWVAR 20
6626: PUSH
6627: LD_INT 3
6629: ST_TO_ADDR
// uc_nation = 3 ;
6630: LD_ADDR_OWVAR 21
6634: PUSH
6635: LD_INT 3
6637: ST_TO_ADDR
// hc_gallery =  ;
6638: LD_ADDR_OWVAR 33
6642: PUSH
6643: LD_STRING 
6645: ST_TO_ADDR
// hc_name =  ;
6646: LD_ADDR_OWVAR 26
6650: PUSH
6651: LD_STRING 
6653: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6654: LD_INT 0
6656: PPUSH
6657: LD_INT 3
6659: PPUSH
6660: LD_EXP 25
6664: PPUSH
6665: LD_EXP 26
6669: PPUSH
6670: CALL_OW 12
6674: PPUSH
6675: CALL_OW 380
// un = CreateHuman ;
6679: LD_ADDR_VAR 0 3
6683: PUSH
6684: CALL_OW 44
6688: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6689: LD_VAR 0 3
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 0
6699: PPUSH
6700: CALL_OW 49
// end ;
6704: GO 6619
6706: POP
6707: POP
// for i = 1 to 2 do
6708: LD_ADDR_VAR 0 2
6712: PUSH
6713: DOUBLE
6714: LD_INT 1
6716: DEC
6717: ST_TO_ADDR
6718: LD_INT 2
6720: PUSH
6721: FOR_TO
6722: IFFALSE 6808
// begin uc_side = 3 ;
6724: LD_ADDR_OWVAR 20
6728: PUSH
6729: LD_INT 3
6731: ST_TO_ADDR
// uc_nation = 3 ;
6732: LD_ADDR_OWVAR 21
6736: PUSH
6737: LD_INT 3
6739: ST_TO_ADDR
// hc_gallery =  ;
6740: LD_ADDR_OWVAR 33
6744: PUSH
6745: LD_STRING 
6747: ST_TO_ADDR
// hc_name =  ;
6748: LD_ADDR_OWVAR 26
6752: PUSH
6753: LD_STRING 
6755: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6756: LD_INT 0
6758: PPUSH
6759: LD_INT 4
6761: PPUSH
6762: LD_EXP 25
6766: PPUSH
6767: LD_EXP 26
6771: PPUSH
6772: CALL_OW 12
6776: PPUSH
6777: CALL_OW 380
// un = CreateHuman ;
6781: LD_ADDR_VAR 0 3
6785: PUSH
6786: CALL_OW 44
6790: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6791: LD_VAR 0 3
6795: PPUSH
6796: LD_INT 3
6798: PPUSH
6799: LD_INT 0
6801: PPUSH
6802: CALL_OW 49
// end ;
6806: GO 6721
6808: POP
6809: POP
// end ; end_of_file
6810: LD_VAR 0 1
6814: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6815: LD_INT 0
6817: PPUSH
6818: PPUSH
// if exist_mode then
6819: LD_VAR 0 2
6823: IFFALSE 6842
// unit := CreateCharacter ( ident ) else
6825: LD_ADDR_VAR 0 4
6829: PUSH
6830: LD_VAR 0 1
6834: PPUSH
6835: CALL_OW 34
6839: ST_TO_ADDR
6840: GO 6857
// unit := NewCharacter ( ident ) ;
6842: LD_ADDR_VAR 0 4
6846: PUSH
6847: LD_VAR 0 1
6851: PPUSH
6852: CALL_OW 25
6856: ST_TO_ADDR
// result := unit ;
6857: LD_ADDR_VAR 0 3
6861: PUSH
6862: LD_VAR 0 4
6866: ST_TO_ADDR
// end ;
6867: LD_VAR 0 3
6871: RET
// export function Video ( mode ) ; begin
6872: LD_INT 0
6874: PPUSH
// ingame_video = mode ;
6875: LD_ADDR_OWVAR 52
6879: PUSH
6880: LD_VAR 0 1
6884: ST_TO_ADDR
// interface_hidden = mode ;
6885: LD_ADDR_OWVAR 54
6889: PUSH
6890: LD_VAR 0 1
6894: ST_TO_ADDR
// end ;
6895: LD_VAR 0 2
6899: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6900: LD_INT 0
6902: PPUSH
6903: PPUSH
6904: PPUSH
// rnd = rand ( 1 , characters ) ;
6905: LD_ADDR_VAR 0 6
6909: PUSH
6910: LD_INT 1
6912: PPUSH
6913: LD_VAR 0 1
6917: PPUSH
6918: CALL_OW 12
6922: ST_TO_ADDR
// for i = 1 to characters do
6923: LD_ADDR_VAR 0 5
6927: PUSH
6928: DOUBLE
6929: LD_INT 1
6931: DEC
6932: ST_TO_ADDR
6933: LD_VAR 0 1
6937: PUSH
6938: FOR_TO
6939: IFFALSE 7049
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6941: LD_VAR 0 5
6945: PUSH
6946: LD_VAR 0 6
6950: EQUAL
6951: PUSH
6952: LD_VAR 0 1
6956: PUSH
6957: LD_VAR 0 5
6961: ARRAY
6962: PPUSH
6963: CALL_OW 258
6967: PUSH
6968: LD_INT 1
6970: EQUAL
6971: AND
6972: IFFALSE 6994
// Say ( characters [ i ] , dialogMID ) ;
6974: LD_VAR 0 1
6978: PUSH
6979: LD_VAR 0 5
6983: ARRAY
6984: PPUSH
6985: LD_VAR 0 2
6989: PPUSH
6990: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6994: LD_VAR 0 5
6998: PUSH
6999: LD_VAR 0 6
7003: EQUAL
7004: PUSH
7005: LD_VAR 0 1
7009: PUSH
7010: LD_VAR 0 5
7014: ARRAY
7015: PPUSH
7016: CALL_OW 258
7020: PUSH
7021: LD_INT 2
7023: EQUAL
7024: AND
7025: IFFALSE 7047
// Say ( characters [ i ] , dialogFID ) ;
7027: LD_VAR 0 1
7031: PUSH
7032: LD_VAR 0 5
7036: ARRAY
7037: PPUSH
7038: LD_VAR 0 3
7042: PPUSH
7043: CALL_OW 88
// end ;
7047: GO 6938
7049: POP
7050: POP
// end ;
7051: LD_VAR 0 4
7055: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7056: LD_INT 0
7058: PPUSH
7059: PPUSH
7060: PPUSH
// uc_side := GetSide ( b ) ;
7061: LD_ADDR_OWVAR 20
7065: PUSH
7066: LD_VAR 0 2
7070: PPUSH
7071: CALL_OW 255
7075: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7076: LD_ADDR_OWVAR 21
7080: PUSH
7081: LD_VAR 0 2
7085: PPUSH
7086: CALL_OW 248
7090: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7091: LD_INT 0
7093: PPUSH
7094: LD_INT 1
7096: PPUSH
7097: LD_VAR 0 1
7101: PPUSH
7102: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7106: LD_ADDR_VAR 0 5
7110: PUSH
7111: LD_VAR 0 2
7115: PPUSH
7116: CALL_OW 254
7120: PUSH
7121: LD_INT 3
7123: MINUS
7124: ST_TO_ADDR
// if dir < 0 then
7125: LD_VAR 0 5
7129: PUSH
7130: LD_INT 0
7132: LESS
7133: IFFALSE 7149
// dir := 6 + dir ;
7135: LD_ADDR_VAR 0 5
7139: PUSH
7140: LD_INT 6
7142: PUSH
7143: LD_VAR 0 5
7147: PLUS
7148: ST_TO_ADDR
// un := CreateHuman ;
7149: LD_ADDR_VAR 0 4
7153: PUSH
7154: CALL_OW 44
7158: ST_TO_ADDR
// SetDir ( un , dir ) ;
7159: LD_VAR 0 4
7163: PPUSH
7164: LD_VAR 0 5
7168: PPUSH
7169: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7173: LD_VAR 0 4
7177: PPUSH
7178: LD_VAR 0 2
7182: PPUSH
7183: CALL_OW 52
// end ;
7187: LD_VAR 0 3
7191: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7192: LD_INT 0
7194: PPUSH
7195: PPUSH
7196: PPUSH
7197: PPUSH
// for i = 1 to count do
7198: LD_ADDR_VAR 0 8
7202: PUSH
7203: DOUBLE
7204: LD_INT 1
7206: DEC
7207: ST_TO_ADDR
7208: LD_VAR 0 6
7212: PUSH
7213: FOR_TO
7214: IFFALSE 7295
// begin uc_side = side ;
7216: LD_ADDR_OWVAR 20
7220: PUSH
7221: LD_VAR 0 1
7225: ST_TO_ADDR
// uc_nation = nation ;
7226: LD_ADDR_OWVAR 21
7230: PUSH
7231: LD_VAR 0 2
7235: ST_TO_ADDR
// hc_gallery =  ;
7236: LD_ADDR_OWVAR 33
7240: PUSH
7241: LD_STRING 
7243: ST_TO_ADDR
// hc_name =  ;
7244: LD_ADDR_OWVAR 26
7248: PUSH
7249: LD_STRING 
7251: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7252: LD_INT 0
7254: PPUSH
7255: LD_VAR 0 5
7259: PPUSH
7260: LD_VAR 0 4
7264: PPUSH
7265: CALL_OW 380
// un = CreateHuman ;
7269: LD_ADDR_VAR 0 10
7273: PUSH
7274: CALL_OW 44
7278: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7279: LD_VAR 0 10
7283: PPUSH
7284: LD_VAR 0 3
7288: PPUSH
7289: CALL_OW 52
// end ;
7293: GO 7213
7295: POP
7296: POP
// end ;
7297: LD_VAR 0 7
7301: RET
// export function PrepareDifficulty ; begin
7302: LD_INT 0
7304: PPUSH
// if Difficulty = 1 then
7305: LD_OWVAR 67
7309: PUSH
7310: LD_INT 1
7312: EQUAL
7313: IFFALSE 7331
// begin RuSolMinLevel = 4 ;
7315: LD_ADDR_EXP 25
7319: PUSH
7320: LD_INT 4
7322: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7323: LD_ADDR_EXP 26
7327: PUSH
7328: LD_INT 6
7330: ST_TO_ADDR
// end ; if Difficulty = 2 then
7331: LD_OWVAR 67
7335: PUSH
7336: LD_INT 2
7338: EQUAL
7339: IFFALSE 7409
// begin RuSolMinLevel = 5 ;
7341: LD_ADDR_EXP 25
7345: PUSH
7346: LD_INT 5
7348: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7349: LD_ADDR_EXP 26
7353: PUSH
7354: LD_INT 6
7356: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7357: LD_INT 51
7359: PPUSH
7360: LD_INT 3
7362: PPUSH
7363: LD_INT 1
7365: PPUSH
7366: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7370: LD_INT 57
7372: PPUSH
7373: LD_INT 3
7375: PPUSH
7376: LD_INT 1
7378: PPUSH
7379: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7383: LD_INT 57
7385: PPUSH
7386: LD_INT 6
7388: PPUSH
7389: LD_INT 2
7391: PPUSH
7392: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7396: LD_INT 51
7398: PPUSH
7399: LD_INT 6
7401: PPUSH
7402: LD_INT 2
7404: PPUSH
7405: CALL_OW 322
// end ; if Difficulty = 3 then
7409: LD_OWVAR 67
7413: PUSH
7414: LD_INT 3
7416: EQUAL
7417: IFFALSE 7500
// begin RuSolMinLevel = 5 ;
7419: LD_ADDR_EXP 25
7423: PUSH
7424: LD_INT 5
7426: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7427: LD_ADDR_EXP 26
7431: PUSH
7432: LD_INT 6
7434: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7435: LD_INT 57
7437: PPUSH
7438: LD_INT 3
7440: PPUSH
7441: LD_INT 1
7443: PPUSH
7444: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7448: LD_INT 51
7450: PPUSH
7451: LD_INT 3
7453: PPUSH
7454: LD_INT 1
7456: PPUSH
7457: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7461: LD_INT 52
7463: PPUSH
7464: LD_INT 3
7466: PPUSH
7467: LD_INT 1
7469: PPUSH
7470: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7474: LD_INT 57
7476: PPUSH
7477: LD_INT 6
7479: PPUSH
7480: LD_INT 2
7482: PPUSH
7483: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7487: LD_INT 52
7489: PPUSH
7490: LD_INT 6
7492: PPUSH
7493: LD_INT 2
7495: PPUSH
7496: CALL_OW 322
// end ; end ;
7500: LD_VAR 0 1
7504: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7511: LD_ADDR_VAR 0 3
7515: PUSH
7516: LD_INT 22
7518: PUSH
7519: LD_INT 3
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: LD_INT 25
7528: PUSH
7529: LD_INT 2
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: PPUSH
7540: CALL_OW 69
7544: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7545: LD_ADDR_VAR 0 4
7549: PUSH
7550: LD_INT 4
7552: PUSH
7553: LD_INT 75
7555: PUSH
7556: LD_INT 79
7558: PUSH
7559: LD_INT 2
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: PUSH
7568: LD_INT 4
7570: PUSH
7571: LD_INT 113
7573: PUSH
7574: LD_INT 94
7576: PUSH
7577: LD_INT 4
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: PUSH
7586: LD_INT 29
7588: PUSH
7589: LD_INT 106
7591: PUSH
7592: LD_INT 97
7594: PUSH
7595: LD_INT 3
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: PUSH
7604: LD_INT 26
7606: PUSH
7607: LD_INT 93
7609: PUSH
7610: LD_INT 97
7612: PUSH
7613: LD_INT 5
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 2
7624: PUSH
7625: LD_INT 100
7627: PUSH
7628: LD_INT 89
7630: PUSH
7631: LD_INT 3
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 17
7642: PUSH
7643: LD_INT 96
7645: PUSH
7646: LD_INT 89
7648: PUSH
7649: LD_INT 1
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 32
7660: PUSH
7661: LD_INT 78
7663: PUSH
7664: LD_INT 94
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 32
7678: PUSH
7679: LD_INT 95
7681: PUSH
7682: LD_INT 82
7684: PUSH
7685: LD_INT 3
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 32
7696: PUSH
7697: LD_INT 104
7699: PUSH
7700: LD_INT 85
7702: PUSH
7703: LD_INT 2
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 32
7714: PUSH
7715: LD_INT 81
7717: PUSH
7718: LD_INT 78
7720: PUSH
7721: LD_INT 2
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 33
7732: PUSH
7733: LD_INT 109
7735: PUSH
7736: LD_INT 90
7738: PUSH
7739: LD_INT 3
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: PUSH
7748: LD_INT 33
7750: PUSH
7751: LD_INT 88
7753: PUSH
7754: LD_INT 79
7756: PUSH
7757: LD_INT 3
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 33
7768: PUSH
7769: LD_INT 76
7771: PUSH
7772: LD_INT 87
7774: PUSH
7775: LD_INT 1
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: PUSH
7784: LD_INT 26
7786: PUSH
7787: LD_INT 96
7789: PUSH
7790: LD_INT 97
7792: PUSH
7793: LD_INT 5
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PUSH
7802: LD_INT 26
7804: PUSH
7805: LD_INT 85
7807: PUSH
7808: LD_INT 84
7810: PUSH
7811: LD_INT 2
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: PUSH
7820: LD_INT 6
7822: PUSH
7823: LD_INT 88
7825: PUSH
7826: LD_INT 95
7828: PUSH
7829: LD_INT 0
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 19
7840: PUSH
7841: LD_INT 103
7843: PUSH
7844: LD_INT 89
7846: PUSH
7847: LD_INT 4
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: PUSH
7856: LD_INT 16
7858: PUSH
7859: LD_INT 97
7861: PUSH
7862: LD_INT 86
7864: PUSH
7865: LD_INT 2
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 24
7876: PUSH
7877: LD_INT 100
7879: PUSH
7880: LD_INT 85
7882: PUSH
7883: LD_INT 3
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: ST_TO_ADDR
// for i := 1 to buildingsTab do
7913: LD_ADDR_VAR 0 2
7917: PUSH
7918: DOUBLE
7919: LD_INT 1
7921: DEC
7922: ST_TO_ADDR
7923: LD_VAR 0 4
7927: PUSH
7928: FOR_TO
7929: IFFALSE 8002
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7931: LD_VAR 0 3
7935: PPUSH
7936: LD_VAR 0 4
7940: PUSH
7941: LD_VAR 0 2
7945: ARRAY
7946: PUSH
7947: LD_INT 1
7949: ARRAY
7950: PPUSH
7951: LD_VAR 0 4
7955: PUSH
7956: LD_VAR 0 2
7960: ARRAY
7961: PUSH
7962: LD_INT 2
7964: ARRAY
7965: PPUSH
7966: LD_VAR 0 4
7970: PUSH
7971: LD_VAR 0 2
7975: ARRAY
7976: PUSH
7977: LD_INT 3
7979: ARRAY
7980: PPUSH
7981: LD_VAR 0 4
7985: PUSH
7986: LD_VAR 0 2
7990: ARRAY
7991: PUSH
7992: LD_INT 4
7994: ARRAY
7995: PPUSH
7996: CALL_OW 205
8000: GO 7928
8002: POP
8003: POP
// end ;
8004: LD_VAR 0 1
8008: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8009: LD_INT 0
8011: PPUSH
8012: PPUSH
// for i in charactersList do
8013: LD_ADDR_VAR 0 4
8017: PUSH
8018: LD_VAR 0 1
8022: PUSH
8023: FOR_IN
8024: IFFALSE 8053
// begin if IsOk ( i ) then
8026: LD_VAR 0 4
8030: PPUSH
8031: CALL_OW 302
8035: IFFALSE 8051
// SaveCharacters ( i , ident ) ;
8037: LD_VAR 0 4
8041: PPUSH
8042: LD_VAR 0 2
8046: PPUSH
8047: CALL_OW 38
// end ;
8051: GO 8023
8053: POP
8054: POP
// end ;
8055: LD_VAR 0 3
8059: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8060: LD_INT 0
8062: PPUSH
8063: PPUSH
8064: PPUSH
8065: PPUSH
8066: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8067: LD_ADDR_VAR 0 8
8071: PUSH
8072: LD_INT 48
8074: PUSH
8075: LD_INT 49
8077: PUSH
8078: LD_INT 50
8080: PUSH
8081: LD_INT 20
8083: PUSH
8084: LD_INT 1
8086: PUSH
8087: LD_INT 51
8089: PUSH
8090: LD_INT 52
8092: PUSH
8093: LD_INT 69
8095: PUSH
8096: LD_INT 39
8098: PUSH
8099: LD_INT 34
8101: PUSH
8102: LD_INT 40
8104: PUSH
8105: LD_INT 53
8107: PUSH
8108: LD_INT 71
8110: PUSH
8111: LD_INT 57
8113: PUSH
8114: LD_INT 58
8116: PUSH
8117: LD_INT 44
8119: PUSH
8120: LD_INT 32
8122: PUSH
8123: LD_INT 27
8125: PUSH
8126: LD_INT 23
8128: PUSH
8129: LD_INT 33
8131: PUSH
8132: LD_INT 59
8134: PUSH
8135: LD_INT 54
8137: PUSH
8138: LD_INT 55
8140: PUSH
8141: LD_INT 56
8143: PUSH
8144: LD_INT 63
8146: PUSH
8147: LD_INT 64
8149: PUSH
8150: LD_INT 65
8152: PUSH
8153: LD_INT 30
8155: PUSH
8156: LD_INT 31
8158: PUSH
8159: LD_INT 21
8161: PUSH
8162: LD_INT 22
8164: PUSH
8165: LD_INT 25
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8202: LD_ADDR_VAR 0 5
8206: PUSH
8207: DOUBLE
8208: LD_INT 1
8210: DEC
8211: ST_TO_ADDR
8212: LD_VAR 0 8
8216: PUSH
8217: FOR_TO
8218: IFFALSE 8294
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8220: LD_VAR 0 8
8224: PUSH
8225: LD_VAR 0 5
8229: ARRAY
8230: PPUSH
8231: LD_VAR 0 1
8235: PPUSH
8236: CALL_OW 321
8240: PUSH
8241: LD_INT 1
8243: EQUAL
8244: PUSH
8245: LD_VAR 0 8
8249: PUSH
8250: LD_VAR 0 5
8254: ARRAY
8255: PPUSH
8256: LD_VAR 0 3
8260: PPUSH
8261: CALL_OW 482
8265: PUSH
8266: LD_INT 1
8268: EQUAL
8269: AND
8270: IFFALSE 8292
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8272: LD_VAR 0 2
8276: PPUSH
8277: LD_VAR 0 8
8281: PUSH
8282: LD_VAR 0 5
8286: ARRAY
8287: PPUSH
8288: CALL_OW 184
8292: GO 8217
8294: POP
8295: POP
// end ;
8296: LD_VAR 0 4
8300: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8301: LD_INT 0
8303: PPUSH
8304: PPUSH
8305: PPUSH
8306: PPUSH
8307: PPUSH
8308: PPUSH
8309: PPUSH
8310: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8311: LD_ADDR_VAR 0 6
8315: PUSH
8316: LD_VAR 0 2
8320: PPUSH
8321: LD_INT 22
8323: PUSH
8324: LD_VAR 0 1
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: LD_INT 56
8335: PUSH
8336: EMPTY
8337: LIST
8338: PUSH
8339: LD_INT 24
8341: PUSH
8342: LD_INT 700
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 3
8351: PUSH
8352: LD_INT 60
8354: PUSH
8355: EMPTY
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: LD_INT 2
8364: PUSH
8365: LD_INT 25
8367: PUSH
8368: LD_INT 1
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PUSH
8375: LD_INT 25
8377: PUSH
8378: LD_INT 5
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: PUSH
8385: LD_INT 25
8387: PUSH
8388: LD_INT 8
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: LD_INT 25
8397: PUSH
8398: LD_INT 9
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 70
8423: PUSH
8424: LD_EXP 24
8428: PUSH
8429: EMPTY
8430: LIST
8431: DIFF
8432: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8433: LD_ADDR_VAR 0 7
8437: PUSH
8438: LD_VAR 0 2
8442: PPUSH
8443: LD_INT 22
8445: PUSH
8446: LD_VAR 0 1
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: LD_INT 30
8457: PUSH
8458: LD_INT 32
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PUSH
8465: LD_INT 58
8467: PUSH
8468: EMPTY
8469: LIST
8470: PUSH
8471: LD_INT 24
8473: PUSH
8474: LD_INT 251
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL_OW 70
8491: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8492: LD_ADDR_VAR 0 9
8496: PUSH
8497: LD_VAR 0 2
8501: PPUSH
8502: LD_INT 22
8504: PUSH
8505: LD_VAR 0 1
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: LD_INT 2
8516: PUSH
8517: LD_INT 30
8519: PUSH
8520: LD_INT 4
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: PUSH
8527: LD_INT 30
8529: PUSH
8530: LD_INT 5
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 24
8544: PUSH
8545: LD_INT 251
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 70
8561: ST_TO_ADDR
// if barrackList > 0 then
8562: LD_VAR 0 9
8566: PUSH
8567: LD_INT 0
8569: GREATER
8570: IFFALSE 8718
// begin if turretList = 0 then
8572: LD_VAR 0 7
8576: PUSH
8577: LD_INT 0
8579: EQUAL
8580: IFFALSE 8622
// begin if soldiers_list > 0 then
8582: LD_VAR 0 6
8586: PUSH
8587: LD_INT 0
8589: GREATER
8590: IFFALSE 8620
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8592: LD_VAR 0 6
8596: PPUSH
8597: LD_VAR 0 9
8601: PUSH
8602: LD_INT 1
8604: PPUSH
8605: LD_VAR 0 9
8609: PPUSH
8610: CALL_OW 12
8614: ARRAY
8615: PPUSH
8616: CALL_OW 120
// end else
8620: GO 8718
// begin for i in barrackList do
8622: LD_ADDR_VAR 0 4
8626: PUSH
8627: LD_VAR 0 9
8631: PUSH
8632: FOR_IN
8633: IFFALSE 8716
// begin insideUnits = UnitsInside ( i ) ;
8635: LD_ADDR_VAR 0 10
8639: PUSH
8640: LD_VAR 0 4
8644: PPUSH
8645: CALL_OW 313
8649: ST_TO_ADDR
// if insideUnits > 0 then
8650: LD_VAR 0 10
8654: PUSH
8655: LD_INT 0
8657: GREATER
8658: IFFALSE 8682
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8660: LD_VAR 0 10
8664: PUSH
8665: LD_INT 1
8667: ARRAY
8668: PPUSH
8669: LD_VAR 0 7
8673: PUSH
8674: LD_INT 1
8676: ARRAY
8677: PPUSH
8678: CALL_OW 120
// if soldiers_list > 0 then
8682: LD_VAR 0 6
8686: PUSH
8687: LD_INT 0
8689: GREATER
8690: IFFALSE 8714
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8692: LD_VAR 0 6
8696: PUSH
8697: LD_INT 1
8699: ARRAY
8700: PPUSH
8701: LD_VAR 0 7
8705: PUSH
8706: LD_INT 1
8708: ARRAY
8709: PPUSH
8710: CALL_OW 120
// end ;
8714: GO 8632
8716: POP
8717: POP
// end ; end ; end ;
8718: LD_VAR 0 3
8722: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8723: LD_INT 0
8725: PPUSH
8726: PPUSH
8727: PPUSH
8728: PPUSH
8729: PPUSH
8730: PPUSH
// for i = 1 to vehCount do
8731: LD_ADDR_VAR 0 8
8735: PUSH
8736: DOUBLE
8737: LD_INT 1
8739: DEC
8740: ST_TO_ADDR
8741: LD_VAR 0 6
8745: PUSH
8746: FOR_TO
8747: IFFALSE 8954
// begin uc_side = side ;
8749: LD_ADDR_OWVAR 20
8753: PUSH
8754: LD_VAR 0 1
8758: ST_TO_ADDR
// uc_nation = nation ;
8759: LD_ADDR_OWVAR 21
8763: PUSH
8764: LD_VAR 0 3
8768: ST_TO_ADDR
// vc_Chassis = 22 ;
8769: LD_ADDR_OWVAR 37
8773: PUSH
8774: LD_INT 22
8776: ST_TO_ADDR
// vc_engine = 1 ;
8777: LD_ADDR_OWVAR 39
8781: PUSH
8782: LD_INT 1
8784: ST_TO_ADDR
// vc_control = 1 ;
8785: LD_ADDR_OWVAR 38
8789: PUSH
8790: LD_INT 1
8792: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8793: LD_ADDR_OWVAR 40
8797: PUSH
8798: LD_INT 43
8800: PUSH
8801: LD_INT 44
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: LD_INT 1
8810: PPUSH
8811: LD_INT 2
8813: PPUSH
8814: CALL_OW 12
8818: ARRAY
8819: ST_TO_ADDR
// veh = CreateVehicle ;
8820: LD_ADDR_VAR 0 12
8824: PUSH
8825: CALL_OW 45
8829: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8830: LD_VAR 0 12
8834: PPUSH
8835: LD_VAR 0 2
8839: PPUSH
8840: LD_INT 0
8842: PPUSH
8843: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8847: LD_ADDR_EXP 32
8851: PUSH
8852: LD_EXP 32
8856: PUSH
8857: LD_VAR 0 12
8861: ADD
8862: ST_TO_ADDR
// hc_class = 3 ;
8863: LD_ADDR_OWVAR 28
8867: PUSH
8868: LD_INT 3
8870: ST_TO_ADDR
// hc_name =  ;
8871: LD_ADDR_OWVAR 26
8875: PUSH
8876: LD_STRING 
8878: ST_TO_ADDR
// hc_gallery =  ;
8879: LD_ADDR_OWVAR 33
8883: PUSH
8884: LD_STRING 
8886: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8887: LD_INT 0
8889: PPUSH
8890: LD_INT 3
8892: PPUSH
8893: LD_EXP 25
8897: PPUSH
8898: LD_EXP 26
8902: PPUSH
8903: CALL_OW 12
8907: PPUSH
8908: CALL_OW 380
// un = CreateHuman ;
8912: LD_ADDR_VAR 0 10
8916: PUSH
8917: CALL_OW 44
8921: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8922: LD_VAR 0 10
8926: PPUSH
8927: LD_VAR 0 12
8931: PPUSH
8932: CALL_OW 52
// defenders_list = defenders_list ^ un ;
8936: LD_ADDR_EXP 32
8940: PUSH
8941: LD_EXP 32
8945: PUSH
8946: LD_VAR 0 10
8950: ADD
8951: ST_TO_ADDR
// end ;
8952: GO 8746
8954: POP
8955: POP
// end ;
8956: LD_VAR 0 7
8960: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
8961: LD_INT 0
8963: PPUSH
8964: PPUSH
8965: PPUSH
8966: PPUSH
8967: PPUSH
8968: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
8969: LD_VAR 0 2
8973: PPUSH
8974: LD_INT 22
8976: PUSH
8977: LD_VAR 0 1
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: EMPTY
8987: LIST
8988: PPUSH
8989: CALL_OW 70
8993: PUSH
8994: LD_INT 0
8996: EQUAL
8997: PUSH
8998: LD_EXP 32
9002: AND
9003: IFFALSE 9290
// begin for i in defenders_list do
9005: LD_ADDR_VAR 0 4
9009: PUSH
9010: LD_EXP 32
9014: PUSH
9015: FOR_IN
9016: IFFALSE 9288
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9018: LD_VAR 0 4
9022: PPUSH
9023: LD_INT 63
9025: PPUSH
9026: LD_INT 75
9028: PPUSH
9029: CALL_OW 297
9033: PUSH
9034: LD_INT 8
9036: GREATER
9037: PUSH
9038: LD_VAR 0 4
9042: PPUSH
9043: CALL_OW 314
9047: NOT
9048: AND
9049: IFFALSE 9068
// ComMoveXY ( i , 63 , 75 ) else
9051: LD_VAR 0 4
9055: PPUSH
9056: LD_INT 63
9058: PPUSH
9059: LD_INT 75
9061: PPUSH
9062: CALL_OW 111
9066: GO 9286
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9068: LD_VAR 0 4
9072: PPUSH
9073: CALL_OW 257
9077: PUSH
9078: LD_INT 3
9080: EQUAL
9081: PUSH
9082: LD_VAR 0 4
9086: PPUSH
9087: CALL_OW 310
9091: NOT
9092: AND
9093: PUSH
9094: LD_VAR 0 4
9098: PPUSH
9099: CALL_OW 314
9103: NOT
9104: AND
9105: IFFALSE 9158
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9107: LD_VAR 0 4
9111: PPUSH
9112: LD_EXP 32
9116: PPUSH
9117: LD_INT 58
9119: PUSH
9120: EMPTY
9121: LIST
9122: PUSH
9123: LD_INT 24
9125: PUSH
9126: LD_INT 1000
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PPUSH
9137: CALL_OW 72
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: CALL_OW 74
9151: PPUSH
9152: CALL_OW 120
9156: GO 9286
// if GetFuel ( i ) < 100 then
9158: LD_VAR 0 4
9162: PPUSH
9163: CALL_OW 261
9167: PUSH
9168: LD_INT 100
9170: LESS
9171: IFFALSE 9187
// SetFuel ( defenders_list , 100 ) else
9173: LD_EXP 32
9177: PPUSH
9178: LD_INT 100
9180: PPUSH
9181: CALL_OW 240
9185: GO 9286
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9187: LD_VAR 0 4
9191: PPUSH
9192: CALL_OW 263
9196: PUSH
9197: LD_INT 1
9199: EQUAL
9200: PUSH
9201: LD_VAR 0 4
9205: PPUSH
9206: CALL_OW 256
9210: PUSH
9211: LD_INT 990
9213: LESS
9214: AND
9215: IFFALSE 9286
// begin veh := i ;
9217: LD_ADDR_VAR 0 7
9221: PUSH
9222: LD_VAR 0 4
9226: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9227: LD_ADDR_VAR 0 8
9231: PUSH
9232: LD_VAR 0 4
9236: PPUSH
9237: CALL_OW 311
9241: ST_TO_ADDR
// if veh then
9242: LD_VAR 0 7
9246: IFFALSE 9286
// begin ComMoveXY ( i , 63 , 75 ) ;
9248: LD_VAR 0 4
9252: PPUSH
9253: LD_INT 63
9255: PPUSH
9256: LD_INT 75
9258: PPUSH
9259: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9263: LD_VAR 0 7
9267: PPUSH
9268: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9272: LD_VAR 0 8
9276: PPUSH
9277: LD_VAR 0 7
9281: PPUSH
9282: CALL_OW 189
// end ; end ; end ;
9286: GO 9015
9288: POP
9289: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9290: LD_ADDR_VAR 0 6
9294: PUSH
9295: LD_VAR 0 2
9299: PPUSH
9300: LD_INT 22
9302: PUSH
9303: LD_VAR 0 1
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PUSH
9312: EMPTY
9313: LIST
9314: PPUSH
9315: CALL_OW 70
9319: ST_TO_ADDR
// if tmp and defenders_list then
9320: LD_VAR 0 6
9324: PUSH
9325: LD_EXP 32
9329: AND
9330: IFFALSE 9499
// for i in defenders_list do
9332: LD_ADDR_VAR 0 4
9336: PUSH
9337: LD_EXP 32
9341: PUSH
9342: FOR_IN
9343: IFFALSE 9497
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9345: LD_VAR 0 4
9349: PPUSH
9350: CALL_OW 257
9354: PUSH
9355: LD_INT 3
9357: EQUAL
9358: PUSH
9359: LD_VAR 0 4
9363: PPUSH
9364: CALL_OW 310
9368: NOT
9369: AND
9370: IFFALSE 9409
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9372: LD_VAR 0 4
9376: PPUSH
9377: LD_EXP 32
9381: PPUSH
9382: LD_INT 58
9384: PUSH
9385: EMPTY
9386: LIST
9387: PPUSH
9388: CALL_OW 72
9392: PPUSH
9393: LD_VAR 0 4
9397: PPUSH
9398: CALL_OW 74
9402: PPUSH
9403: CALL_OW 120
9407: GO 9495
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9409: LD_VAR 0 4
9413: PPUSH
9414: CALL_OW 314
9418: NOT
9419: PUSH
9420: LD_VAR 0 4
9424: PPUSH
9425: LD_VAR 0 2
9429: PPUSH
9430: CALL_OW 308
9434: AND
9435: IFFALSE 9463
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9437: LD_VAR 0 4
9441: PPUSH
9442: LD_VAR 0 6
9446: PPUSH
9447: LD_VAR 0 4
9451: PPUSH
9452: CALL_OW 74
9456: PPUSH
9457: CALL_OW 115
9461: GO 9495
// if not IsInArea ( i , defenseArea ) then
9463: LD_VAR 0 4
9467: PPUSH
9468: LD_VAR 0 2
9472: PPUSH
9473: CALL_OW 308
9477: NOT
9478: IFFALSE 9495
// ComMoveXY ( i , 63 , 75 ) ;
9480: LD_VAR 0 4
9484: PPUSH
9485: LD_INT 63
9487: PPUSH
9488: LD_INT 75
9490: PPUSH
9491: CALL_OW 111
// end ;
9495: GO 9342
9497: POP
9498: POP
// end ;
9499: LD_VAR 0 3
9503: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9504: LD_INT 0
9506: PPUSH
9507: PPUSH
9508: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9509: LD_INT 22
9511: PUSH
9512: LD_VAR 0 1
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 21
9523: PUSH
9524: LD_INT 2
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PPUSH
9535: CALL_OW 69
9539: PUSH
9540: LD_VAR 0 3
9544: LESSEQUAL
9545: IFFALSE 9653
// begin for i = 1 to vehCount do
9547: LD_ADDR_VAR 0 9
9551: PUSH
9552: DOUBLE
9553: LD_INT 1
9555: DEC
9556: ST_TO_ADDR
9557: LD_VAR 0 3
9561: PUSH
9562: FOR_TO
9563: IFFALSE 9651
// begin weapon = weaponTab [ i ] ;
9565: LD_ADDR_VAR 0 10
9569: PUSH
9570: LD_VAR 0 4
9574: PUSH
9575: LD_VAR 0 9
9579: ARRAY
9580: ST_TO_ADDR
// if weapon = 46 then
9581: LD_VAR 0 10
9585: PUSH
9586: LD_INT 46
9588: EQUAL
9589: IFFALSE 9620
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9591: LD_VAR 0 2
9595: PPUSH
9596: LD_INT 24
9598: PPUSH
9599: LD_VAR 0 5
9603: PPUSH
9604: LD_VAR 0 6
9608: PPUSH
9609: LD_VAR 0 10
9613: PPUSH
9614: CALL_OW 185
// end else
9618: GO 9649
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9620: LD_VAR 0 2
9624: PPUSH
9625: LD_VAR 0 7
9629: PPUSH
9630: LD_VAR 0 5
9634: PPUSH
9635: LD_VAR 0 6
9639: PPUSH
9640: LD_VAR 0 10
9644: PPUSH
9645: CALL_OW 185
// end ; end ;
9649: GO 9562
9651: POP
9652: POP
// end ; end ;
9653: LD_VAR 0 8
9657: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9658: LD_INT 0
9660: PPUSH
9661: PPUSH
9662: PPUSH
9663: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9664: LD_ADDR_VAR 0 8
9668: PUSH
9669: LD_INT 22
9671: PUSH
9672: LD_VAR 0 1
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 21
9683: PUSH
9684: LD_INT 2
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 3
9693: PUSH
9694: LD_INT 24
9696: PUSH
9697: LD_INT 650
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: LIST
9712: PPUSH
9713: CALL_OW 69
9717: ST_TO_ADDR
// if damageVehicles > 0 then
9718: LD_VAR 0 8
9722: PUSH
9723: LD_INT 0
9725: GREATER
9726: IFFALSE 9747
// ComMoveXY ( damageVehicles , repX , repY ) ;
9728: LD_VAR 0 8
9732: PPUSH
9733: LD_VAR 0 3
9737: PPUSH
9738: LD_VAR 0 4
9742: PPUSH
9743: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9747: LD_VAR 0 8
9751: PPUSH
9752: LD_INT 95
9754: PUSH
9755: LD_VAR 0 2
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 3
9766: PUSH
9767: LD_INT 58
9769: PUSH
9770: EMPTY
9771: LIST
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PPUSH
9781: CALL_OW 72
9785: PUSH
9786: LD_INT 0
9788: GREATER
9789: IFFALSE 9856
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9791: LD_ADDR_VAR 0 6
9795: PUSH
9796: LD_VAR 0 8
9800: PPUSH
9801: LD_INT 95
9803: PUSH
9804: LD_VAR 0 2
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: LD_INT 3
9815: PUSH
9816: LD_INT 58
9818: PUSH
9819: EMPTY
9820: LIST
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PPUSH
9830: CALL_OW 72
9834: PUSH
9835: FOR_IN
9836: IFFALSE 9854
// ComExitVehicle ( UnitsInside ( i ) ) ;
9838: LD_VAR 0 6
9842: PPUSH
9843: CALL_OW 313
9847: PPUSH
9848: CALL_OW 121
9852: GO 9835
9854: POP
9855: POP
// end ;
9856: LD_VAR 0 5
9860: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
9861: LD_INT 0
9863: PPUSH
9864: PPUSH
9865: PPUSH
9866: PPUSH
9867: PPUSH
9868: PPUSH
9869: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
9870: LD_ADDR_VAR 0 8
9874: PUSH
9875: LD_INT 22
9877: PUSH
9878: LD_VAR 0 1
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: LD_INT 21
9889: PUSH
9890: LD_INT 2
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: LD_INT 24
9899: PUSH
9900: LD_INT 250
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 3
9909: PUSH
9910: LD_INT 58
9912: PUSH
9913: EMPTY
9914: LIST
9915: PUSH
9916: LD_INT 2
9918: PUSH
9919: LD_INT 34
9921: PUSH
9922: LD_INT 43
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: PUSH
9929: LD_INT 34
9931: PUSH
9932: LD_INT 44
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 34
9941: PUSH
9942: LD_INT 46
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: LIST
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: PPUSH
9966: CALL_OW 69
9970: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
9971: LD_INT 22
9973: PUSH
9974: LD_VAR 0 1
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 21
9985: PUSH
9986: LD_INT 2
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 24
9995: PUSH
9996: LD_INT 1000
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: LD_INT 3
10005: PUSH
10006: LD_INT 58
10008: PUSH
10009: EMPTY
10010: LIST
10011: PUSH
10012: LD_INT 2
10014: PUSH
10015: LD_INT 34
10017: PUSH
10018: LD_INT 43
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 34
10027: PUSH
10028: LD_INT 44
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 34
10037: PUSH
10038: LD_INT 46
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: LIST
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: PPUSH
10062: CALL_OW 69
10066: PUSH
10067: LD_INT 5
10069: PUSH
10070: LD_INT 6
10072: PUSH
10073: LD_INT 7
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: LIST
10080: PUSH
10081: LD_OWVAR 67
10085: ARRAY
10086: GREATEREQUAL
10087: IFFALSE 10652
// repeat wait ( 0 0$1 ) ;
10089: LD_INT 35
10091: PPUSH
10092: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10096: LD_ADDR_VAR 0 8
10100: PUSH
10101: LD_INT 22
10103: PUSH
10104: LD_VAR 0 1
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PUSH
10113: LD_INT 21
10115: PUSH
10116: LD_INT 2
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 24
10125: PUSH
10126: LD_INT 250
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: LD_INT 2
10135: PUSH
10136: LD_INT 34
10138: PUSH
10139: LD_INT 43
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: LD_INT 34
10148: PUSH
10149: LD_INT 44
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: LD_INT 34
10158: PUSH
10159: LD_INT 46
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 3
10174: PUSH
10175: LD_INT 58
10177: PUSH
10178: EMPTY
10179: LIST
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: PPUSH
10192: CALL_OW 69
10196: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10197: LD_INT 22
10199: PUSH
10200: LD_VAR 0 1
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 95
10211: PUSH
10212: LD_VAR 0 2
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PPUSH
10225: CALL_OW 69
10229: NOT
10230: PUSH
10231: LD_VAR 0 11
10235: PUSH
10236: LD_INT 0
10238: EQUAL
10239: AND
10240: IFFALSE 10295
// for i := 1 to wayX do
10242: LD_ADDR_VAR 0 6
10246: PUSH
10247: DOUBLE
10248: LD_INT 1
10250: DEC
10251: ST_TO_ADDR
10252: LD_VAR 0 3
10256: PUSH
10257: FOR_TO
10258: IFFALSE 10293
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10260: LD_VAR 0 8
10264: PPUSH
10265: LD_VAR 0 3
10269: PUSH
10270: LD_VAR 0 6
10274: ARRAY
10275: PPUSH
10276: LD_VAR 0 4
10280: PUSH
10281: LD_VAR 0 6
10285: ARRAY
10286: PPUSH
10287: CALL_OW 114
10291: GO 10257
10293: POP
10294: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10295: LD_INT 22
10297: PUSH
10298: LD_VAR 0 1
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 95
10309: PUSH
10310: LD_VAR 0 2
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL_OW 69
10327: IFFALSE 10551
// begin seeEnemy = 1 ;
10329: LD_ADDR_VAR 0 11
10333: PUSH
10334: LD_INT 1
10336: ST_TO_ADDR
// for j in vehiclesOK do
10337: LD_ADDR_VAR 0 7
10341: PUSH
10342: LD_VAR 0 8
10346: PUSH
10347: FOR_IN
10348: IFFALSE 10549
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10350: LD_ADDR_VAR 0 9
10354: PUSH
10355: LD_INT 81
10357: PUSH
10358: LD_VAR 0 1
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 101
10369: PUSH
10370: LD_INT 1
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 69
10385: PPUSH
10386: LD_VAR 0 7
10390: PPUSH
10391: CALL_OW 74
10395: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10396: LD_ADDR_VAR 0 10
10400: PUSH
10401: LD_INT 81
10403: PUSH
10404: LD_VAR 0 1
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: PUSH
10413: LD_INT 101
10415: PUSH
10416: LD_INT 1
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PUSH
10423: LD_INT 2
10425: PUSH
10426: LD_INT 59
10428: PUSH
10429: EMPTY
10430: LIST
10431: PUSH
10432: LD_INT 21
10434: PUSH
10435: LD_INT 1
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 21
10444: PUSH
10445: LD_INT 2
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: PUSH
10463: EMPTY
10464: LIST
10465: PPUSH
10466: CALL_OW 69
10470: PPUSH
10471: LD_VAR 0 7
10475: PPUSH
10476: CALL_OW 74
10480: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10481: LD_VAR 0 7
10485: PPUSH
10486: LD_VAR 0 9
10490: PPUSH
10491: CALL_OW 296
10495: PUSH
10496: LD_INT 8
10498: PLUS
10499: PUSH
10500: LD_VAR 0 7
10504: PPUSH
10505: LD_VAR 0 10
10509: PPUSH
10510: CALL_OW 296
10514: LESS
10515: IFFALSE 10533
// ComAttackUnit ( j , target1 ) else
10517: LD_VAR 0 7
10521: PPUSH
10522: LD_VAR 0 9
10526: PPUSH
10527: CALL_OW 115
10531: GO 10547
// ComAttackUnit ( j , target2 ) ;
10533: LD_VAR 0 7
10537: PPUSH
10538: LD_VAR 0 10
10542: PPUSH
10543: CALL_OW 115
// end ;
10547: GO 10347
10549: POP
10550: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10551: LD_INT 22
10553: PUSH
10554: LD_VAR 0 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 21
10565: PUSH
10566: LD_INT 2
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 24
10575: PUSH
10576: LD_INT 250
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 2
10585: PUSH
10586: LD_INT 34
10588: PUSH
10589: LD_INT 43
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: LD_INT 34
10598: PUSH
10599: LD_INT 44
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: PUSH
10606: LD_INT 34
10608: PUSH
10609: LD_INT 46
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 3
10624: PUSH
10625: LD_INT 58
10627: PUSH
10628: EMPTY
10629: LIST
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: PPUSH
10642: CALL_OW 69
10646: PUSH
10647: LD_INT 0
10649: EQUAL
10650: IFFALSE 10089
// seeEnemy = 0 ;
10652: LD_ADDR_VAR 0 11
10656: PUSH
10657: LD_INT 0
10659: ST_TO_ADDR
// end ;
10660: LD_VAR 0 5
10664: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10665: LD_INT 0
10667: PPUSH
10668: PPUSH
10669: PPUSH
10670: PPUSH
10671: PPUSH
10672: PPUSH
// repeat wait ( 0 0$1 ) ;
10673: LD_INT 35
10675: PPUSH
10676: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10680: LD_ADDR_VAR 0 7
10684: PUSH
10685: LD_INT 22
10687: PUSH
10688: LD_VAR 0 1
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 21
10699: PUSH
10700: LD_INT 2
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 24
10709: PUSH
10710: LD_INT 651
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: PPUSH
10722: CALL_OW 69
10726: ST_TO_ADDR
// for j in vehiclesOK do
10727: LD_ADDR_VAR 0 4
10731: PUSH
10732: LD_VAR 0 7
10736: PUSH
10737: FOR_IN
10738: IFFALSE 10939
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10740: LD_ADDR_VAR 0 5
10744: PUSH
10745: LD_INT 81
10747: PUSH
10748: LD_VAR 0 1
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 101
10759: PUSH
10760: LD_INT 1
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PPUSH
10771: CALL_OW 69
10775: PPUSH
10776: LD_VAR 0 4
10780: PPUSH
10781: CALL_OW 74
10785: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10786: LD_ADDR_VAR 0 6
10790: PUSH
10791: LD_INT 81
10793: PUSH
10794: LD_VAR 0 1
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 101
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 2
10815: PUSH
10816: LD_INT 59
10818: PUSH
10819: EMPTY
10820: LIST
10821: PUSH
10822: LD_INT 21
10824: PUSH
10825: LD_INT 1
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 21
10834: PUSH
10835: LD_INT 2
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: PPUSH
10856: CALL_OW 69
10860: PPUSH
10861: LD_VAR 0 4
10865: PPUSH
10866: CALL_OW 74
10870: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10871: LD_VAR 0 4
10875: PPUSH
10876: LD_VAR 0 5
10880: PPUSH
10881: CALL_OW 296
10885: PUSH
10886: LD_INT 8
10888: PLUS
10889: PUSH
10890: LD_VAR 0 4
10894: PPUSH
10895: LD_VAR 0 6
10899: PPUSH
10900: CALL_OW 296
10904: LESS
10905: IFFALSE 10923
// ComAttackUnit ( j , target1 ) else
10907: LD_VAR 0 4
10911: PPUSH
10912: LD_VAR 0 5
10916: PPUSH
10917: CALL_OW 115
10921: GO 10937
// ComAttackUnit ( j , target2 ) ;
10923: LD_VAR 0 4
10927: PPUSH
10928: LD_VAR 0 6
10932: PPUSH
10933: CALL_OW 115
// end ;
10937: GO 10737
10939: POP
10940: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
10941: LD_INT 22
10943: PUSH
10944: LD_VAR 0 1
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 21
10955: PUSH
10956: LD_INT 2
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 24
10965: PUSH
10966: LD_INT 250
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: PPUSH
10978: CALL_OW 69
10982: PUSH
10983: LD_INT 0
10985: EQUAL
10986: IFFALSE 10673
// end ;
10988: LD_VAR 0 2
10992: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
10993: LD_INT 0
10995: PPUSH
10996: PPUSH
10997: PPUSH
10998: PPUSH
10999: PPUSH
11000: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11001: LD_ADDR_VAR 0 8
11005: PUSH
11006: LD_VAR 0 2
11010: PPUSH
11011: CALL_OW 313
11015: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11016: LD_ADDR_VAR 0 9
11020: PUSH
11021: LD_VAR 0 3
11025: PPUSH
11026: LD_INT 22
11028: PUSH
11029: LD_VAR 0 1
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 25
11040: PUSH
11041: LD_INT 2
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 24
11050: PUSH
11051: LD_INT 750
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_INT 3
11060: PUSH
11061: LD_INT 54
11063: PUSH
11064: EMPTY
11065: LIST
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: PPUSH
11077: CALL_OW 70
11081: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11082: LD_ADDR_VAR 0 6
11086: PUSH
11087: LD_VAR 0 3
11091: PPUSH
11092: LD_INT 22
11094: PUSH
11095: LD_VAR 0 1
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PUSH
11104: LD_INT 21
11106: PUSH
11107: LD_INT 3
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PUSH
11114: LD_INT 3
11116: PUSH
11117: LD_INT 24
11119: PUSH
11120: LD_INT 1000
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: LIST
11135: PUSH
11136: EMPTY
11137: LIST
11138: PPUSH
11139: CALL_OW 70
11143: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11144: LD_VAR 0 6
11148: NOT
11149: PUSH
11150: LD_INT 22
11152: PUSH
11153: LD_VAR 0 1
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: LD_INT 25
11164: PUSH
11165: LD_INT 2
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: PUSH
11172: LD_INT 24
11174: PUSH
11175: LD_INT 250
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: LIST
11186: PPUSH
11187: CALL_OW 69
11191: NOT
11192: AND
11193: IFFALSE 11197
// exit ;
11195: GO 11394
// if buildings_list > 0 and engineerOkInside then
11197: LD_VAR 0 6
11201: PUSH
11202: LD_INT 0
11204: GREATER
11205: PUSH
11206: LD_VAR 0 8
11210: AND
11211: IFFALSE 11237
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11213: LD_VAR 0 8
11217: PPUSH
11218: LD_INT 25
11220: PUSH
11221: LD_INT 2
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PPUSH
11228: CALL_OW 72
11232: PPUSH
11233: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11237: LD_VAR 0 6
11241: PUSH
11242: LD_INT 0
11244: GREATER
11245: PUSH
11246: LD_VAR 0 9
11250: PUSH
11251: LD_INT 0
11253: GREATER
11254: AND
11255: IFFALSE 11275
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11257: LD_VAR 0 9
11261: PPUSH
11262: LD_VAR 0 6
11266: PUSH
11267: LD_INT 1
11269: ARRAY
11270: PPUSH
11271: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11275: LD_VAR 0 6
11279: PUSH
11280: LD_INT 0
11282: EQUAL
11283: PUSH
11284: LD_VAR 0 4
11288: PUSH
11289: LD_INT 0
11291: EQUAL
11292: AND
11293: PUSH
11294: LD_VAR 0 9
11298: PUSH
11299: LD_INT 0
11301: GREATER
11302: AND
11303: IFFALSE 11319
// ComEnterUnit ( engineerOkOutside , building ) ;
11305: LD_VAR 0 9
11309: PPUSH
11310: LD_VAR 0 2
11314: PPUSH
11315: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11319: LD_VAR 0 9
11323: PUSH
11324: LD_INT 0
11326: GREATER
11327: PUSH
11328: LD_VAR 0 6
11332: PUSH
11333: LD_INT 0
11335: EQUAL
11336: AND
11337: PUSH
11338: LD_VAR 0 4
11342: PUSH
11343: LD_INT 0
11345: GREATER
11346: AND
11347: IFFALSE 11394
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11349: LD_VAR 0 9
11353: PPUSH
11354: LD_VAR 0 4
11358: PUSH
11359: LD_INT 1
11361: ARRAY
11362: PPUSH
11363: LD_VAR 0 4
11367: PUSH
11368: LD_INT 2
11370: ARRAY
11371: PPUSH
11372: LD_VAR 0 4
11376: PUSH
11377: LD_INT 3
11379: ARRAY
11380: PPUSH
11381: LD_VAR 0 4
11385: PUSH
11386: LD_INT 4
11388: ARRAY
11389: PPUSH
11390: CALL_OW 145
// end ;
11394: LD_VAR 0 5
11398: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11399: LD_INT 0
11401: PPUSH
11402: PPUSH
11403: PPUSH
11404: PPUSH
11405: PPUSH
11406: PPUSH
11407: PPUSH
11408: PPUSH
11409: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11410: LD_ADDR_VAR 0 6
11414: PUSH
11415: LD_INT 22
11417: PUSH
11418: LD_VAR 0 1
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PUSH
11427: LD_INT 25
11429: PUSH
11430: LD_INT 4
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PUSH
11437: LD_INT 23
11439: PUSH
11440: LD_INT 2
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 24
11449: PUSH
11450: LD_INT 251
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: PPUSH
11463: CALL_OW 69
11467: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11468: LD_ADDR_VAR 0 7
11472: PUSH
11473: LD_VAR 0 3
11477: PPUSH
11478: LD_INT 22
11480: PUSH
11481: LD_VAR 0 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 23
11492: PUSH
11493: LD_INT 2
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 25
11502: PUSH
11503: LD_INT 4
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 50
11512: PUSH
11513: EMPTY
11514: LIST
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: PPUSH
11522: CALL_OW 70
11526: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11527: LD_ADDR_VAR 0 10
11531: PUSH
11532: LD_VAR 0 3
11536: PPUSH
11537: LD_INT 22
11539: PUSH
11540: LD_VAR 0 1
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 21
11551: PUSH
11552: LD_INT 1
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 3
11561: PUSH
11562: LD_INT 25
11564: PUSH
11565: LD_INT 3
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 3
11578: PUSH
11579: LD_INT 24
11581: PUSH
11582: LD_INT 750
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: PPUSH
11599: CALL_OW 70
11603: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11604: LD_ADDR_VAR 0 11
11608: PUSH
11609: LD_VAR 0 2
11613: PPUSH
11614: LD_INT 22
11616: PUSH
11617: LD_VAR 0 1
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 21
11628: PUSH
11629: LD_INT 1
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: LD_INT 3
11638: PUSH
11639: LD_INT 25
11641: PUSH
11642: LD_INT 3
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 3
11655: PUSH
11656: LD_INT 24
11658: PUSH
11659: LD_INT 1000
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: PPUSH
11676: CALL_OW 70
11680: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11681: LD_VAR 0 10
11685: NOT
11686: PUSH
11687: LD_VAR 0 11
11691: NOT
11692: AND
11693: PUSH
11694: LD_VAR 0 6
11698: NOT
11699: AND
11700: IFFALSE 11704
// exit ;
11702: GO 11938
// if damageUnits > 0 and sci_list > 0 then
11704: LD_VAR 0 10
11708: PUSH
11709: LD_INT 0
11711: GREATER
11712: PUSH
11713: LD_VAR 0 6
11717: PUSH
11718: LD_INT 0
11720: GREATER
11721: AND
11722: IFFALSE 11738
// ComMoveToArea ( damageUnits , healArea ) ;
11724: LD_VAR 0 10
11728: PPUSH
11729: LD_VAR 0 2
11733: PPUSH
11734: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11738: LD_VAR 0 11
11742: PUSH
11743: LD_INT 0
11745: GREATER
11746: PUSH
11747: LD_VAR 0 6
11751: PUSH
11752: LD_INT 0
11754: GREATER
11755: AND
11756: IFFALSE 11767
// ComExitBuilding ( sci_list ) ;
11758: LD_VAR 0 6
11762: PPUSH
11763: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11767: LD_VAR 0 11
11771: PUSH
11772: LD_INT 0
11774: GREATER
11775: PUSH
11776: LD_VAR 0 7
11780: PUSH
11781: LD_INT 0
11783: GREATER
11784: AND
11785: IFFALSE 11805
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11787: LD_VAR 0 7
11791: PPUSH
11792: LD_VAR 0 11
11796: PUSH
11797: LD_INT 1
11799: ARRAY
11800: PPUSH
11801: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11805: LD_VAR 0 10
11809: PUSH
11810: LD_INT 0
11812: EQUAL
11813: PUSH
11814: LD_VAR 0 11
11818: PUSH
11819: LD_INT 0
11821: EQUAL
11822: AND
11823: PUSH
11824: LD_VAR 0 7
11828: PUSH
11829: LD_INT 0
11831: GREATER
11832: AND
11833: IFFALSE 11938
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
11835: LD_ADDR_VAR 0 12
11839: PUSH
11840: LD_INT 22
11842: PUSH
11843: LD_VAR 0 1
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: LD_INT 21
11854: PUSH
11855: LD_INT 3
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 30
11864: PUSH
11865: LD_INT 8
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 69
11881: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
11882: LD_ADDR_VAR 0 13
11886: PUSH
11887: LD_INT 1
11889: PPUSH
11890: LD_VAR 0 12
11894: PPUSH
11895: CALL_OW 12
11899: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
11900: LD_VAR 0 7
11904: PPUSH
11905: LD_INT 3
11907: PUSH
11908: LD_INT 60
11910: PUSH
11911: EMPTY
11912: LIST
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PPUSH
11918: CALL_OW 72
11922: PPUSH
11923: LD_VAR 0 12
11927: PUSH
11928: LD_VAR 0 13
11932: ARRAY
11933: PPUSH
11934: CALL_OW 120
// end ; end ;
11938: LD_VAR 0 5
11942: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11943: LD_INT 0
11945: PPUSH
11946: PPUSH
11947: PPUSH
11948: PPUSH
11949: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11950: LD_ADDR_VAR 0 6
11954: PUSH
11955: LD_INT 22
11957: PUSH
11958: LD_VAR 0 1
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 2
11969: PUSH
11970: LD_INT 30
11972: PUSH
11973: LD_INT 31
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 30
11982: PUSH
11983: LD_INT 32
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 30
11992: PUSH
11993: LD_INT 33
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 30
12002: PUSH
12003: LD_INT 4
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 30
12012: PUSH
12013: LD_INT 5
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12037: LD_ADDR_VAR 0 7
12041: PUSH
12042: LD_INT 22
12044: PUSH
12045: LD_VAR 0 2
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: LD_INT 21
12056: PUSH
12057: LD_INT 3
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 58
12066: PUSH
12067: EMPTY
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: LIST
12074: PPUSH
12075: CALL_OW 69
12079: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12080: LD_VAR 0 6
12084: PUSH
12085: LD_INT 0
12087: GREATER
12088: PUSH
12089: LD_VAR 0 7
12093: PUSH
12094: LD_INT 0
12096: GREATER
12097: AND
12098: IFFALSE 12168
// begin for i in turretsList do
12100: LD_ADDR_VAR 0 4
12104: PUSH
12105: LD_VAR 0 6
12109: PUSH
12110: FOR_IN
12111: IFFALSE 12166
// begin for j in enemyBuildings do
12113: LD_ADDR_VAR 0 5
12117: PUSH
12118: LD_VAR 0 7
12122: PUSH
12123: FOR_IN
12124: IFFALSE 12162
// begin if GetDistUnits ( i , j ) < 20 then
12126: LD_VAR 0 4
12130: PPUSH
12131: LD_VAR 0 5
12135: PPUSH
12136: CALL_OW 296
12140: PUSH
12141: LD_INT 20
12143: LESS
12144: IFFALSE 12160
// begin ComAttackUnit ( i , j ) ;
12146: LD_VAR 0 4
12150: PPUSH
12151: LD_VAR 0 5
12155: PPUSH
12156: CALL_OW 115
// end ; end ;
12160: GO 12123
12162: POP
12163: POP
// end ;
12164: GO 12110
12166: POP
12167: POP
// end ; end ;
12168: LD_VAR 0 3
12172: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12173: LD_INT 0
12175: PPUSH
12176: PPUSH
12177: PPUSH
12178: PPUSH
12179: PPUSH
12180: PPUSH
12181: PPUSH
12182: PPUSH
12183: PPUSH
12184: PPUSH
12185: PPUSH
// for i = 1 to medicCount do
12186: LD_ADDR_VAR 0 14
12190: PUSH
12191: DOUBLE
12192: LD_INT 1
12194: DEC
12195: ST_TO_ADDR
12196: LD_VAR 0 7
12200: PUSH
12201: FOR_TO
12202: IFFALSE 12284
// begin uc_side = side ;
12204: LD_ADDR_OWVAR 20
12208: PUSH
12209: LD_VAR 0 1
12213: ST_TO_ADDR
// uc_nation = nation ;
12214: LD_ADDR_OWVAR 21
12218: PUSH
12219: LD_VAR 0 2
12223: ST_TO_ADDR
// hc_name =  ;
12224: LD_ADDR_OWVAR 26
12228: PUSH
12229: LD_STRING 
12231: ST_TO_ADDR
// hc_gallery =  ;
12232: LD_ADDR_OWVAR 33
12236: PUSH
12237: LD_STRING 
12239: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12240: LD_INT 0
12242: PPUSH
12243: LD_INT 4
12245: PPUSH
12246: LD_VAR 0 8
12250: PPUSH
12251: CALL_OW 380
// un = CreateHuman ;
12255: LD_ADDR_VAR 0 16
12259: PUSH
12260: CALL_OW 44
12264: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12265: LD_VAR 0 16
12269: PPUSH
12270: LD_VAR 0 9
12274: PPUSH
12275: LD_INT 0
12277: PPUSH
12278: CALL_OW 49
// end ;
12282: GO 12201
12284: POP
12285: POP
// for i = 1 to soldierCount do
12286: LD_ADDR_VAR 0 14
12290: PUSH
12291: DOUBLE
12292: LD_INT 1
12294: DEC
12295: ST_TO_ADDR
12296: LD_VAR 0 3
12300: PUSH
12301: FOR_TO
12302: IFFALSE 12384
// begin uc_side = side ;
12304: LD_ADDR_OWVAR 20
12308: PUSH
12309: LD_VAR 0 1
12313: ST_TO_ADDR
// uc_nation = nation ;
12314: LD_ADDR_OWVAR 21
12318: PUSH
12319: LD_VAR 0 2
12323: ST_TO_ADDR
// hc_name =  ;
12324: LD_ADDR_OWVAR 26
12328: PUSH
12329: LD_STRING 
12331: ST_TO_ADDR
// hc_gallery =  ;
12332: LD_ADDR_OWVAR 33
12336: PUSH
12337: LD_STRING 
12339: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12340: LD_INT 0
12342: PPUSH
12343: LD_INT 1
12345: PPUSH
12346: LD_VAR 0 8
12350: PPUSH
12351: CALL_OW 380
// un = CreateHuman ;
12355: LD_ADDR_VAR 0 16
12359: PUSH
12360: CALL_OW 44
12364: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12365: LD_VAR 0 16
12369: PPUSH
12370: LD_VAR 0 9
12374: PPUSH
12375: LD_INT 0
12377: PPUSH
12378: CALL_OW 49
// end ;
12382: GO 12301
12384: POP
12385: POP
// for i = 1 to sniperCount do
12386: LD_ADDR_VAR 0 14
12390: PUSH
12391: DOUBLE
12392: LD_INT 1
12394: DEC
12395: ST_TO_ADDR
12396: LD_VAR 0 4
12400: PUSH
12401: FOR_TO
12402: IFFALSE 12484
// begin uc_side = side ;
12404: LD_ADDR_OWVAR 20
12408: PUSH
12409: LD_VAR 0 1
12413: ST_TO_ADDR
// uc_nation = nation ;
12414: LD_ADDR_OWVAR 21
12418: PUSH
12419: LD_VAR 0 2
12423: ST_TO_ADDR
// hc_name =  ;
12424: LD_ADDR_OWVAR 26
12428: PUSH
12429: LD_STRING 
12431: ST_TO_ADDR
// hc_gallery =  ;
12432: LD_ADDR_OWVAR 33
12436: PUSH
12437: LD_STRING 
12439: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12440: LD_INT 0
12442: PPUSH
12443: LD_INT 5
12445: PPUSH
12446: LD_VAR 0 8
12450: PPUSH
12451: CALL_OW 380
// un = CreateHuman ;
12455: LD_ADDR_VAR 0 16
12459: PUSH
12460: CALL_OW 44
12464: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12465: LD_VAR 0 16
12469: PPUSH
12470: LD_VAR 0 9
12474: PPUSH
12475: LD_INT 0
12477: PPUSH
12478: CALL_OW 49
// end ;
12482: GO 12401
12484: POP
12485: POP
// for i = 1 to bazookCount do
12486: LD_ADDR_VAR 0 14
12490: PUSH
12491: DOUBLE
12492: LD_INT 1
12494: DEC
12495: ST_TO_ADDR
12496: LD_VAR 0 5
12500: PUSH
12501: FOR_TO
12502: IFFALSE 12584
// begin uc_side = side ;
12504: LD_ADDR_OWVAR 20
12508: PUSH
12509: LD_VAR 0 1
12513: ST_TO_ADDR
// uc_nation = nation ;
12514: LD_ADDR_OWVAR 21
12518: PUSH
12519: LD_VAR 0 2
12523: ST_TO_ADDR
// hc_name =  ;
12524: LD_ADDR_OWVAR 26
12528: PUSH
12529: LD_STRING 
12531: ST_TO_ADDR
// hc_gallery =  ;
12532: LD_ADDR_OWVAR 33
12536: PUSH
12537: LD_STRING 
12539: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12540: LD_INT 0
12542: PPUSH
12543: LD_INT 9
12545: PPUSH
12546: LD_VAR 0 8
12550: PPUSH
12551: CALL_OW 380
// un = CreateHuman ;
12555: LD_ADDR_VAR 0 16
12559: PUSH
12560: CALL_OW 44
12564: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12565: LD_VAR 0 16
12569: PPUSH
12570: LD_VAR 0 9
12574: PPUSH
12575: LD_INT 0
12577: PPUSH
12578: CALL_OW 49
// end ;
12582: GO 12501
12584: POP
12585: POP
// for i = 1 to mortalCount do
12586: LD_ADDR_VAR 0 14
12590: PUSH
12591: DOUBLE
12592: LD_INT 1
12594: DEC
12595: ST_TO_ADDR
12596: LD_VAR 0 6
12600: PUSH
12601: FOR_TO
12602: IFFALSE 12684
// begin uc_side = side ;
12604: LD_ADDR_OWVAR 20
12608: PUSH
12609: LD_VAR 0 1
12613: ST_TO_ADDR
// uc_nation = nation ;
12614: LD_ADDR_OWVAR 21
12618: PUSH
12619: LD_VAR 0 2
12623: ST_TO_ADDR
// hc_name =  ;
12624: LD_ADDR_OWVAR 26
12628: PUSH
12629: LD_STRING 
12631: ST_TO_ADDR
// hc_gallery =  ;
12632: LD_ADDR_OWVAR 33
12636: PUSH
12637: LD_STRING 
12639: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12640: LD_INT 0
12642: PPUSH
12643: LD_INT 8
12645: PPUSH
12646: LD_VAR 0 8
12650: PPUSH
12651: CALL_OW 380
// un = CreateHuman ;
12655: LD_ADDR_VAR 0 16
12659: PUSH
12660: CALL_OW 44
12664: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12665: LD_VAR 0 16
12669: PPUSH
12670: LD_VAR 0 9
12674: PPUSH
12675: LD_INT 0
12677: PPUSH
12678: CALL_OW 49
// end ;
12682: GO 12601
12684: POP
12685: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12686: LD_ADDR_VAR 0 19
12690: PUSH
12691: LD_INT 22
12693: PUSH
12694: LD_VAR 0 1
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: LD_INT 2
12705: PUSH
12706: LD_INT 25
12708: PUSH
12709: LD_INT 1
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: PUSH
12716: LD_INT 25
12718: PUSH
12719: LD_INT 5
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: LD_INT 25
12728: PUSH
12729: LD_INT 8
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 25
12738: PUSH
12739: LD_INT 9
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PPUSH
12757: CALL_OW 69
12761: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12762: LD_ADDR_VAR 0 18
12766: PUSH
12767: LD_INT 22
12769: PUSH
12770: LD_VAR 0 1
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: LD_INT 25
12781: PUSH
12782: LD_INT 4
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PPUSH
12793: CALL_OW 69
12797: ST_TO_ADDR
// for i in medic_list do
12798: LD_ADDR_VAR 0 14
12802: PUSH
12803: LD_VAR 0 18
12807: PUSH
12808: FOR_IN
12809: IFFALSE 12827
// ComMoveToArea ( i , healArea ) ;
12811: LD_VAR 0 14
12815: PPUSH
12816: LD_VAR 0 10
12820: PPUSH
12821: CALL_OW 113
12825: GO 12808
12827: POP
12828: POP
// if strategy = 1 then
12829: LD_VAR 0 12
12833: PUSH
12834: LD_INT 1
12836: EQUAL
12837: IFFALSE 13383
// begin repeat wait ( 0 0$3 ) ;
12839: LD_INT 105
12841: PPUSH
12842: CALL_OW 67
// for i in soldiersOK_list do
12846: LD_ADDR_VAR 0 14
12850: PUSH
12851: LD_VAR 0 19
12855: PUSH
12856: FOR_IN
12857: IFFALSE 12921
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12859: LD_VAR 0 14
12863: PPUSH
12864: LD_INT 91
12866: PPUSH
12867: LD_INT 63
12869: PPUSH
12870: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
12874: LD_VAR 0 14
12878: PPUSH
12879: LD_INT 101
12881: PPUSH
12882: LD_INT 53
12884: PPUSH
12885: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
12889: LD_VAR 0 14
12893: PPUSH
12894: LD_INT 75
12896: PPUSH
12897: LD_INT 23
12899: PPUSH
12900: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
12904: LD_VAR 0 14
12908: PPUSH
12909: LD_INT 78
12911: PPUSH
12912: LD_INT 8
12914: PPUSH
12915: CALL_OW 174
// end ;
12919: GO 12856
12921: POP
12922: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
12923: LD_INT 12
12925: PPUSH
12926: LD_INT 22
12928: PUSH
12929: LD_VAR 0 1
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PPUSH
12938: CALL_OW 70
12942: PUSH
12943: LD_INT 2
12945: GREATER
12946: IFFALSE 12839
// repeat wait ( 0 0$1 ) ;
12948: LD_INT 35
12950: PPUSH
12951: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12955: LD_ADDR_VAR 0 17
12959: PUSH
12960: LD_INT 22
12962: PUSH
12963: LD_VAR 0 1
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 1
12974: PUSH
12975: LD_INT 3
12977: PUSH
12978: LD_INT 24
12980: PUSH
12981: LD_INT 550
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 24
12994: PUSH
12995: LD_INT 250
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: LIST
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PPUSH
13011: CALL_OW 69
13015: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13016: LD_ADDR_VAR 0 19
13020: PUSH
13021: LD_INT 22
13023: PUSH
13024: LD_VAR 0 1
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PUSH
13033: LD_INT 2
13035: PUSH
13036: LD_INT 25
13038: PUSH
13039: LD_INT 1
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 25
13048: PUSH
13049: LD_INT 5
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 25
13058: PUSH
13059: LD_INT 8
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: LD_INT 25
13068: PUSH
13069: LD_INT 9
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: PUSH
13083: LD_INT 24
13085: PUSH
13086: LD_INT 1000
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: LIST
13097: PPUSH
13098: CALL_OW 69
13102: ST_TO_ADDR
// if medicCount > 0 then
13103: LD_VAR 0 7
13107: PUSH
13108: LD_INT 0
13110: GREATER
13111: IFFALSE 13185
// begin if damageUnit_list > 0 then
13113: LD_VAR 0 17
13117: PUSH
13118: LD_INT 0
13120: GREATER
13121: IFFALSE 13185
// begin for i in damageUnit_list do
13123: LD_ADDR_VAR 0 14
13127: PUSH
13128: LD_VAR 0 17
13132: PUSH
13133: FOR_IN
13134: IFFALSE 13183
// begin ComMoveToArea ( i , healArea ) ;
13136: LD_VAR 0 14
13140: PPUSH
13141: LD_VAR 0 10
13145: PPUSH
13146: CALL_OW 113
// for j in medic_list do
13150: LD_ADDR_VAR 0 15
13154: PUSH
13155: LD_VAR 0 18
13159: PUSH
13160: FOR_IN
13161: IFFALSE 13179
// AddComHeal ( j , i ) ;
13163: LD_VAR 0 15
13167: PPUSH
13168: LD_VAR 0 14
13172: PPUSH
13173: CALL_OW 188
13177: GO 13160
13179: POP
13180: POP
// end ;
13181: GO 13133
13183: POP
13184: POP
// end ; end ; for i in soldiersOK_list do
13185: LD_ADDR_VAR 0 14
13189: PUSH
13190: LD_VAR 0 19
13194: PUSH
13195: FOR_IN
13196: IFFALSE 13372
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13198: LD_ADDR_VAR 0 22
13202: PUSH
13203: LD_INT 22
13205: PUSH
13206: LD_VAR 0 11
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PPUSH
13215: CALL_OW 69
13219: PPUSH
13220: LD_VAR 0 14
13224: PPUSH
13225: CALL_OW 74
13229: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13230: LD_ADDR_VAR 0 23
13234: PUSH
13235: LD_INT 22
13237: PUSH
13238: LD_VAR 0 11
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 2
13249: PUSH
13250: LD_INT 59
13252: PUSH
13253: EMPTY
13254: LIST
13255: PUSH
13256: LD_INT 21
13258: PUSH
13259: LD_INT 1
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 21
13268: PUSH
13269: LD_INT 2
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: PPUSH
13289: CALL_OW 69
13293: PPUSH
13294: LD_VAR 0 14
13298: PPUSH
13299: CALL_OW 74
13303: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13304: LD_VAR 0 14
13308: PPUSH
13309: LD_VAR 0 22
13313: PPUSH
13314: CALL_OW 296
13318: PUSH
13319: LD_INT 6
13321: PLUS
13322: PUSH
13323: LD_VAR 0 14
13327: PPUSH
13328: LD_VAR 0 23
13332: PPUSH
13333: CALL_OW 296
13337: LESS
13338: IFFALSE 13356
// begin ComAttackUnit ( i , target1 ) ;
13340: LD_VAR 0 14
13344: PPUSH
13345: LD_VAR 0 22
13349: PPUSH
13350: CALL_OW 115
// end else
13354: GO 13370
// begin ComAttackUnit ( i , target2 ) ;
13356: LD_VAR 0 14
13360: PPUSH
13361: LD_VAR 0 23
13365: PPUSH
13366: CALL_OW 115
// end ; end ;
13370: GO 13195
13372: POP
13373: POP
// until soldiersOK_list = [ ] ;
13374: LD_VAR 0 19
13378: PUSH
13379: EMPTY
13380: EQUAL
13381: IFFALSE 12948
// end ; if strategy = 2 then
13383: LD_VAR 0 12
13387: PUSH
13388: LD_INT 2
13390: EQUAL
13391: IFFALSE 13907
// begin repeat wait ( 0 0$1 ) ;
13393: LD_INT 35
13395: PPUSH
13396: CALL_OW 67
// for i in soldiersOK_list do
13400: LD_ADDR_VAR 0 14
13404: PUSH
13405: LD_VAR 0 19
13409: PUSH
13410: FOR_IN
13411: IFFALSE 13445
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13413: LD_VAR 0 14
13417: PPUSH
13418: LD_INT 91
13420: PPUSH
13421: LD_INT 63
13423: PPUSH
13424: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13428: LD_VAR 0 14
13432: PPUSH
13433: LD_INT 75
13435: PPUSH
13436: LD_INT 33
13438: PPUSH
13439: CALL_OW 174
// end ;
13443: GO 13410
13445: POP
13446: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13447: LD_INT 13
13449: PPUSH
13450: LD_INT 22
13452: PUSH
13453: LD_VAR 0 1
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: CALL_OW 70
13466: PUSH
13467: LD_INT 2
13469: GREATER
13470: IFFALSE 13393
// repeat wait ( 0 0$3 ) ;
13472: LD_INT 105
13474: PPUSH
13475: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13479: LD_ADDR_VAR 0 17
13483: PUSH
13484: LD_INT 22
13486: PUSH
13487: LD_VAR 0 1
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: LD_INT 1
13498: PUSH
13499: LD_INT 3
13501: PUSH
13502: LD_INT 24
13504: PUSH
13505: LD_INT 550
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PUSH
13516: LD_INT 24
13518: PUSH
13519: LD_INT 250
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: LIST
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PPUSH
13535: CALL_OW 69
13539: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13540: LD_ADDR_VAR 0 19
13544: PUSH
13545: LD_INT 22
13547: PUSH
13548: LD_VAR 0 1
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 2
13559: PUSH
13560: LD_INT 25
13562: PUSH
13563: LD_INT 1
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 25
13572: PUSH
13573: LD_INT 5
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 25
13582: PUSH
13583: LD_INT 8
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 25
13592: PUSH
13593: LD_INT 9
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 24
13609: PUSH
13610: LD_INT 1000
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: LIST
13621: PPUSH
13622: CALL_OW 69
13626: ST_TO_ADDR
// if medicCount > 0 then
13627: LD_VAR 0 7
13631: PUSH
13632: LD_INT 0
13634: GREATER
13635: IFFALSE 13709
// begin if damageUnit_list > 0 then
13637: LD_VAR 0 17
13641: PUSH
13642: LD_INT 0
13644: GREATER
13645: IFFALSE 13709
// begin for i in damageUnit_list do
13647: LD_ADDR_VAR 0 14
13651: PUSH
13652: LD_VAR 0 17
13656: PUSH
13657: FOR_IN
13658: IFFALSE 13707
// begin ComMoveToArea ( i , healArea ) ;
13660: LD_VAR 0 14
13664: PPUSH
13665: LD_VAR 0 10
13669: PPUSH
13670: CALL_OW 113
// for j in medic_list do
13674: LD_ADDR_VAR 0 15
13678: PUSH
13679: LD_VAR 0 18
13683: PUSH
13684: FOR_IN
13685: IFFALSE 13703
// AddComHeal ( j , i ) ;
13687: LD_VAR 0 15
13691: PPUSH
13692: LD_VAR 0 14
13696: PPUSH
13697: CALL_OW 188
13701: GO 13684
13703: POP
13704: POP
// end ;
13705: GO 13657
13707: POP
13708: POP
// end ; end ; for i in soldiersOK_list do
13709: LD_ADDR_VAR 0 14
13713: PUSH
13714: LD_VAR 0 19
13718: PUSH
13719: FOR_IN
13720: IFFALSE 13896
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13722: LD_ADDR_VAR 0 22
13726: PUSH
13727: LD_INT 22
13729: PUSH
13730: LD_VAR 0 11
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PPUSH
13739: CALL_OW 69
13743: PPUSH
13744: LD_VAR 0 14
13748: PPUSH
13749: CALL_OW 74
13753: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13754: LD_ADDR_VAR 0 23
13758: PUSH
13759: LD_INT 22
13761: PUSH
13762: LD_VAR 0 11
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 2
13773: PUSH
13774: LD_INT 59
13776: PUSH
13777: EMPTY
13778: LIST
13779: PUSH
13780: LD_INT 21
13782: PUSH
13783: LD_INT 1
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 21
13792: PUSH
13793: LD_INT 2
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: EMPTY
13811: LIST
13812: PPUSH
13813: CALL_OW 69
13817: PPUSH
13818: LD_VAR 0 14
13822: PPUSH
13823: CALL_OW 74
13827: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13828: LD_VAR 0 14
13832: PPUSH
13833: LD_VAR 0 22
13837: PPUSH
13838: CALL_OW 296
13842: PUSH
13843: LD_INT 6
13845: PLUS
13846: PUSH
13847: LD_VAR 0 14
13851: PPUSH
13852: LD_VAR 0 23
13856: PPUSH
13857: CALL_OW 296
13861: LESS
13862: IFFALSE 13880
// begin ComAttackUnit ( i , target1 ) ;
13864: LD_VAR 0 14
13868: PPUSH
13869: LD_VAR 0 22
13873: PPUSH
13874: CALL_OW 115
// end else
13878: GO 13894
// begin ComAttackUnit ( i , target2 ) ;
13880: LD_VAR 0 14
13884: PPUSH
13885: LD_VAR 0 23
13889: PPUSH
13890: CALL_OW 115
// end ; end ;
13894: GO 13719
13896: POP
13897: POP
// until soldiersOK_list = [ ] ;
13898: LD_VAR 0 19
13902: PUSH
13903: EMPTY
13904: EQUAL
13905: IFFALSE 13472
// end ; if strategy = 3 then
13907: LD_VAR 0 12
13911: PUSH
13912: LD_INT 3
13914: EQUAL
13915: IFFALSE 14461
// begin repeat wait ( 0 0$3 ) ;
13917: LD_INT 105
13919: PPUSH
13920: CALL_OW 67
// for i in soldiersOK_list do
13924: LD_ADDR_VAR 0 14
13928: PUSH
13929: LD_VAR 0 19
13933: PUSH
13934: FOR_IN
13935: IFFALSE 13999
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
13937: LD_VAR 0 14
13941: PPUSH
13942: LD_INT 63
13944: PPUSH
13945: LD_INT 71
13947: PPUSH
13948: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
13952: LD_VAR 0 14
13956: PPUSH
13957: LD_INT 35
13959: PPUSH
13960: LD_INT 44
13962: PPUSH
13963: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
13967: LD_VAR 0 14
13971: PPUSH
13972: LD_INT 23
13974: PPUSH
13975: LD_INT 18
13977: PPUSH
13978: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
13982: LD_VAR 0 14
13986: PPUSH
13987: LD_INT 26
13989: PPUSH
13990: LD_INT 12
13992: PPUSH
13993: CALL_OW 174
// end ;
13997: GO 13934
13999: POP
14000: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14001: LD_INT 14
14003: PPUSH
14004: LD_INT 22
14006: PUSH
14007: LD_VAR 0 1
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PPUSH
14016: CALL_OW 70
14020: PUSH
14021: LD_INT 2
14023: GREATER
14024: IFFALSE 13917
// repeat wait ( 0 0$1 ) ;
14026: LD_INT 35
14028: PPUSH
14029: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14033: LD_ADDR_VAR 0 17
14037: PUSH
14038: LD_INT 22
14040: PUSH
14041: LD_VAR 0 1
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: LD_INT 1
14052: PUSH
14053: LD_INT 3
14055: PUSH
14056: LD_INT 24
14058: PUSH
14059: LD_INT 550
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 24
14072: PUSH
14073: LD_INT 250
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PPUSH
14089: CALL_OW 69
14093: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14094: LD_ADDR_VAR 0 19
14098: PUSH
14099: LD_INT 22
14101: PUSH
14102: LD_VAR 0 1
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 2
14113: PUSH
14114: LD_INT 25
14116: PUSH
14117: LD_INT 1
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 25
14126: PUSH
14127: LD_INT 5
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 25
14136: PUSH
14137: LD_INT 8
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 25
14146: PUSH
14147: LD_INT 9
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: PUSH
14161: LD_INT 24
14163: PUSH
14164: LD_INT 1000
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: LIST
14175: PPUSH
14176: CALL_OW 69
14180: ST_TO_ADDR
// if medicCount > 0 then
14181: LD_VAR 0 7
14185: PUSH
14186: LD_INT 0
14188: GREATER
14189: IFFALSE 14263
// begin if damageUnit_list > 0 then
14191: LD_VAR 0 17
14195: PUSH
14196: LD_INT 0
14198: GREATER
14199: IFFALSE 14263
// begin for i in damageUnit_list do
14201: LD_ADDR_VAR 0 14
14205: PUSH
14206: LD_VAR 0 17
14210: PUSH
14211: FOR_IN
14212: IFFALSE 14261
// begin ComMoveToArea ( i , healArea ) ;
14214: LD_VAR 0 14
14218: PPUSH
14219: LD_VAR 0 10
14223: PPUSH
14224: CALL_OW 113
// for j in medic_list do
14228: LD_ADDR_VAR 0 15
14232: PUSH
14233: LD_VAR 0 18
14237: PUSH
14238: FOR_IN
14239: IFFALSE 14257
// AddComHeal ( j , i ) ;
14241: LD_VAR 0 15
14245: PPUSH
14246: LD_VAR 0 14
14250: PPUSH
14251: CALL_OW 188
14255: GO 14238
14257: POP
14258: POP
// end ;
14259: GO 14211
14261: POP
14262: POP
// end ; end ; for i in soldiersOK_list do
14263: LD_ADDR_VAR 0 14
14267: PUSH
14268: LD_VAR 0 19
14272: PUSH
14273: FOR_IN
14274: IFFALSE 14450
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14276: LD_ADDR_VAR 0 22
14280: PUSH
14281: LD_INT 22
14283: PUSH
14284: LD_VAR 0 11
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PPUSH
14293: CALL_OW 69
14297: PPUSH
14298: LD_VAR 0 14
14302: PPUSH
14303: CALL_OW 74
14307: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14308: LD_ADDR_VAR 0 23
14312: PUSH
14313: LD_INT 22
14315: PUSH
14316: LD_VAR 0 11
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 2
14327: PUSH
14328: LD_INT 59
14330: PUSH
14331: EMPTY
14332: LIST
14333: PUSH
14334: LD_INT 21
14336: PUSH
14337: LD_INT 1
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 21
14346: PUSH
14347: LD_INT 2
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: EMPTY
14365: LIST
14366: PPUSH
14367: CALL_OW 69
14371: PPUSH
14372: LD_VAR 0 14
14376: PPUSH
14377: CALL_OW 74
14381: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14382: LD_VAR 0 14
14386: PPUSH
14387: LD_VAR 0 22
14391: PPUSH
14392: CALL_OW 296
14396: PUSH
14397: LD_INT 6
14399: PLUS
14400: PUSH
14401: LD_VAR 0 14
14405: PPUSH
14406: LD_VAR 0 23
14410: PPUSH
14411: CALL_OW 296
14415: LESS
14416: IFFALSE 14434
// begin ComAttackUnit ( i , target1 ) ;
14418: LD_VAR 0 14
14422: PPUSH
14423: LD_VAR 0 22
14427: PPUSH
14428: CALL_OW 115
// end else
14432: GO 14448
// begin ComAttackUnit ( i , target2 ) ;
14434: LD_VAR 0 14
14438: PPUSH
14439: LD_VAR 0 23
14443: PPUSH
14444: CALL_OW 115
// end ; end ;
14448: GO 14273
14450: POP
14451: POP
// until soldiersOK_list = [ ] ;
14452: LD_VAR 0 19
14456: PUSH
14457: EMPTY
14458: EQUAL
14459: IFFALSE 14026
// end ; end ;
14461: LD_VAR 0 13
14465: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14466: LD_INT 0
14468: PPUSH
14469: PPUSH
14470: PPUSH
14471: PPUSH
14472: PPUSH
14473: PPUSH
14474: PPUSH
14475: PPUSH
14476: PPUSH
14477: PPUSH
14478: PPUSH
// amChassisTab = [ ] ;
14479: LD_ADDR_VAR 0 19
14483: PUSH
14484: EMPTY
14485: ST_TO_ADDR
// arChassisTab = [ ] ;
14486: LD_ADDR_VAR 0 18
14490: PUSH
14491: EMPTY
14492: ST_TO_ADDR
// ruChassisTab = [ ] ;
14493: LD_ADDR_VAR 0 17
14497: PUSH
14498: EMPTY
14499: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14500: LD_INT 35
14502: PPUSH
14503: CALL_OW 67
// if nation = 1 then
14507: LD_VAR 0 5
14511: PUSH
14512: LD_INT 1
14514: EQUAL
14515: IFFALSE 15006
// begin uc_side = side ;
14517: LD_ADDR_OWVAR 20
14521: PUSH
14522: LD_VAR 0 2
14526: ST_TO_ADDR
// uc_nation = nation ;
14527: LD_ADDR_OWVAR 21
14531: PUSH
14532: LD_VAR 0 5
14536: ST_TO_ADDR
// vc_engine = vehengine ;
14537: LD_ADDR_OWVAR 39
14541: PUSH
14542: LD_VAR 0 6
14546: ST_TO_ADDR
// vc_control = vehcontrol ;
14547: LD_ADDR_OWVAR 38
14551: PUSH
14552: LD_VAR 0 7
14556: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14557: LD_ADDR_OWVAR 40
14561: PUSH
14562: LD_VAR 0 10
14566: PUSH
14567: LD_INT 1
14569: PPUSH
14570: LD_VAR 0 10
14574: PPUSH
14575: CALL_OW 12
14579: ARRAY
14580: ST_TO_ADDR
// for j = 1 to AMWeapon do
14581: LD_ADDR_VAR 0 14
14585: PUSH
14586: DOUBLE
14587: LD_INT 1
14589: DEC
14590: ST_TO_ADDR
14591: LD_VAR 0 10
14595: PUSH
14596: FOR_TO
14597: IFFALSE 14898
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14599: LD_VAR 0 10
14603: PUSH
14604: LD_VAR 0 14
14608: ARRAY
14609: PUSH
14610: LD_INT 2
14612: EQUAL
14613: PUSH
14614: LD_VAR 0 10
14618: PUSH
14619: LD_VAR 0 14
14623: ARRAY
14624: PUSH
14625: LD_INT 3
14627: EQUAL
14628: OR
14629: IFFALSE 14682
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14631: LD_ADDR_VAR 0 19
14635: PUSH
14636: LD_INT 1
14638: PUSH
14639: LD_INT 2
14641: PUSH
14642: LD_INT 3
14644: PUSH
14645: LD_INT 4
14647: PUSH
14648: LD_INT 5
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14658: LD_ADDR_OWVAR 37
14662: PUSH
14663: LD_VAR 0 19
14667: PUSH
14668: LD_INT 1
14670: PPUSH
14671: LD_VAR 0 19
14675: PPUSH
14676: CALL_OW 12
14680: ARRAY
14681: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14682: LD_VAR 0 10
14686: PUSH
14687: LD_VAR 0 14
14691: ARRAY
14692: PUSH
14693: LD_INT 4
14695: EQUAL
14696: PUSH
14697: LD_VAR 0 10
14701: PUSH
14702: LD_VAR 0 14
14706: ARRAY
14707: PUSH
14708: LD_INT 5
14710: EQUAL
14711: OR
14712: PUSH
14713: LD_VAR 0 10
14717: PUSH
14718: LD_VAR 0 14
14722: ARRAY
14723: PUSH
14724: LD_INT 9
14726: EQUAL
14727: OR
14728: PUSH
14729: LD_VAR 0 10
14733: PUSH
14734: LD_VAR 0 14
14738: ARRAY
14739: PUSH
14740: LD_INT 11
14742: EQUAL
14743: OR
14744: PUSH
14745: LD_VAR 0 10
14749: PUSH
14750: LD_VAR 0 14
14754: ARRAY
14755: PUSH
14756: LD_INT 7
14758: EQUAL
14759: OR
14760: IFFALSE 14809
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14762: LD_ADDR_VAR 0 19
14766: PUSH
14767: LD_INT 2
14769: PUSH
14770: LD_INT 3
14772: PUSH
14773: LD_INT 4
14775: PUSH
14776: LD_INT 5
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14785: LD_ADDR_OWVAR 37
14789: PUSH
14790: LD_VAR 0 19
14794: PUSH
14795: LD_INT 1
14797: PPUSH
14798: LD_VAR 0 19
14802: PPUSH
14803: CALL_OW 12
14807: ARRAY
14808: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14809: LD_VAR 0 10
14813: PUSH
14814: LD_VAR 0 14
14818: ARRAY
14819: PUSH
14820: LD_INT 8
14822: EQUAL
14823: PUSH
14824: LD_VAR 0 10
14828: PUSH
14829: LD_VAR 0 14
14833: ARRAY
14834: PUSH
14835: LD_INT 6
14837: EQUAL
14838: OR
14839: PUSH
14840: LD_VAR 0 10
14844: PUSH
14845: LD_VAR 0 14
14849: ARRAY
14850: PUSH
14851: LD_INT 10
14853: EQUAL
14854: OR
14855: IFFALSE 14896
// begin amChassisTab = [ 4 , 5 ] ;
14857: LD_ADDR_VAR 0 19
14861: PUSH
14862: LD_INT 4
14864: PUSH
14865: LD_INT 5
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14872: LD_ADDR_OWVAR 37
14876: PUSH
14877: LD_VAR 0 19
14881: PUSH
14882: LD_INT 1
14884: PPUSH
14885: LD_VAR 0 19
14889: PPUSH
14890: CALL_OW 12
14894: ARRAY
14895: ST_TO_ADDR
// end ; end ;
14896: GO 14596
14898: POP
14899: POP
// veh = CreateVehicle ;
14900: LD_ADDR_VAR 0 16
14904: PUSH
14905: CALL_OW 45
14909: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14910: LD_VAR 0 16
14914: PPUSH
14915: LD_VAR 0 1
14919: PPUSH
14920: LD_INT 0
14922: PPUSH
14923: CALL_OW 49
// if vehControl = 1 then
14927: LD_VAR 0 7
14931: PUSH
14932: LD_INT 1
14934: EQUAL
14935: IFFALSE 14992
// begin hc_gallery =  ;
14937: LD_ADDR_OWVAR 33
14941: PUSH
14942: LD_STRING 
14944: ST_TO_ADDR
// hc_name =  ;
14945: LD_ADDR_OWVAR 26
14949: PUSH
14950: LD_STRING 
14952: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14953: LD_INT 0
14955: PPUSH
14956: LD_INT 3
14958: PPUSH
14959: LD_VAR 0 4
14963: PPUSH
14964: CALL_OW 380
// un = CreateHuman ;
14968: LD_ADDR_VAR 0 15
14972: PUSH
14973: CALL_OW 44
14977: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14978: LD_VAR 0 15
14982: PPUSH
14983: LD_VAR 0 16
14987: PPUSH
14988: CALL_OW 52
// end ; i = i + 1 ;
14992: LD_ADDR_VAR 0 13
14996: PUSH
14997: LD_VAR 0 13
15001: PUSH
15002: LD_INT 1
15004: PLUS
15005: ST_TO_ADDR
// end ; if nation = 2 then
15006: LD_VAR 0 5
15010: PUSH
15011: LD_INT 2
15013: EQUAL
15014: IFFALSE 15438
// begin uc_side = side ;
15016: LD_ADDR_OWVAR 20
15020: PUSH
15021: LD_VAR 0 2
15025: ST_TO_ADDR
// uc_nation = nation ;
15026: LD_ADDR_OWVAR 21
15030: PUSH
15031: LD_VAR 0 5
15035: ST_TO_ADDR
// vc_engine = vehengine ;
15036: LD_ADDR_OWVAR 39
15040: PUSH
15041: LD_VAR 0 6
15045: ST_TO_ADDR
// vc_control = vehcontrol ;
15046: LD_ADDR_OWVAR 38
15050: PUSH
15051: LD_VAR 0 7
15055: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15056: LD_ADDR_OWVAR 40
15060: PUSH
15061: LD_VAR 0 9
15065: PUSH
15066: LD_INT 1
15068: PPUSH
15069: LD_VAR 0 9
15073: PPUSH
15074: CALL_OW 12
15078: ARRAY
15079: ST_TO_ADDR
// for j = 1 to ARWeapons do
15080: LD_ADDR_VAR 0 14
15084: PUSH
15085: DOUBLE
15086: LD_INT 1
15088: DEC
15089: ST_TO_ADDR
15090: LD_VAR 0 9
15094: PUSH
15095: FOR_TO
15096: IFFALSE 15330
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15098: LD_VAR 0 9
15102: PUSH
15103: LD_VAR 0 14
15107: ARRAY
15108: PUSH
15109: LD_INT 24
15111: EQUAL
15112: PUSH
15113: LD_VAR 0 9
15117: PUSH
15118: LD_VAR 0 14
15122: ARRAY
15123: PUSH
15124: LD_INT 22
15126: EQUAL
15127: OR
15128: PUSH
15129: LD_VAR 0 9
15133: PUSH
15134: LD_VAR 0 14
15138: ARRAY
15139: PUSH
15140: LD_INT 23
15142: EQUAL
15143: OR
15144: PUSH
15145: LD_VAR 0 9
15149: PUSH
15150: LD_VAR 0 14
15154: ARRAY
15155: PUSH
15156: LD_INT 30
15158: EQUAL
15159: OR
15160: IFFALSE 15209
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15162: LD_ADDR_VAR 0 18
15166: PUSH
15167: LD_INT 11
15169: PUSH
15170: LD_INT 12
15172: PUSH
15173: LD_INT 13
15175: PUSH
15176: LD_INT 14
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15185: LD_ADDR_OWVAR 37
15189: PUSH
15190: LD_VAR 0 18
15194: PUSH
15195: LD_INT 1
15197: PPUSH
15198: LD_VAR 0 18
15202: PPUSH
15203: CALL_OW 12
15207: ARRAY
15208: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15209: LD_VAR 0 9
15213: PUSH
15214: LD_VAR 0 14
15218: ARRAY
15219: PUSH
15220: LD_INT 29
15222: EQUAL
15223: PUSH
15224: LD_VAR 0 9
15228: PUSH
15229: LD_VAR 0 14
15233: ARRAY
15234: PUSH
15235: LD_INT 28
15237: EQUAL
15238: OR
15239: PUSH
15240: LD_VAR 0 9
15244: PUSH
15245: LD_VAR 0 14
15249: ARRAY
15250: PUSH
15251: LD_INT 27
15253: EQUAL
15254: OR
15255: PUSH
15256: LD_VAR 0 9
15260: PUSH
15261: LD_VAR 0 14
15265: ARRAY
15266: PUSH
15267: LD_INT 26
15269: EQUAL
15270: OR
15271: PUSH
15272: LD_VAR 0 9
15276: PUSH
15277: LD_VAR 0 14
15281: ARRAY
15282: PUSH
15283: LD_INT 25
15285: EQUAL
15286: OR
15287: IFFALSE 15328
// begin arChassisTab = [ 13 , 14 ] ;
15289: LD_ADDR_VAR 0 18
15293: PUSH
15294: LD_INT 13
15296: PUSH
15297: LD_INT 14
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15304: LD_ADDR_OWVAR 37
15308: PUSH
15309: LD_VAR 0 18
15313: PUSH
15314: LD_INT 1
15316: PPUSH
15317: LD_VAR 0 18
15321: PPUSH
15322: CALL_OW 12
15326: ARRAY
15327: ST_TO_ADDR
// end ; end ;
15328: GO 15095
15330: POP
15331: POP
// veh = CreateVehicle ;
15332: LD_ADDR_VAR 0 16
15336: PUSH
15337: CALL_OW 45
15341: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15342: LD_VAR 0 16
15346: PPUSH
15347: LD_VAR 0 1
15351: PPUSH
15352: LD_INT 0
15354: PPUSH
15355: CALL_OW 49
// if vehcontrol = 1 then
15359: LD_VAR 0 7
15363: PUSH
15364: LD_INT 1
15366: EQUAL
15367: IFFALSE 15424
// begin hc_gallery =  ;
15369: LD_ADDR_OWVAR 33
15373: PUSH
15374: LD_STRING 
15376: ST_TO_ADDR
// hc_name =  ;
15377: LD_ADDR_OWVAR 26
15381: PUSH
15382: LD_STRING 
15384: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15385: LD_INT 0
15387: PPUSH
15388: LD_INT 3
15390: PPUSH
15391: LD_VAR 0 4
15395: PPUSH
15396: CALL_OW 380
// un = CreateHuman ;
15400: LD_ADDR_VAR 0 15
15404: PUSH
15405: CALL_OW 44
15409: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15410: LD_VAR 0 15
15414: PPUSH
15415: LD_VAR 0 16
15419: PPUSH
15420: CALL_OW 52
// end ; i = i + 1 ;
15424: LD_ADDR_VAR 0 13
15428: PUSH
15429: LD_VAR 0 13
15433: PUSH
15434: LD_INT 1
15436: PLUS
15437: ST_TO_ADDR
// end ; if nation = 3 then
15438: LD_VAR 0 5
15442: PUSH
15443: LD_INT 3
15445: EQUAL
15446: IFFALSE 15838
// begin uc_side = side ;
15448: LD_ADDR_OWVAR 20
15452: PUSH
15453: LD_VAR 0 2
15457: ST_TO_ADDR
// uc_nation = nation ;
15458: LD_ADDR_OWVAR 21
15462: PUSH
15463: LD_VAR 0 5
15467: ST_TO_ADDR
// vc_engine = vehengine ;
15468: LD_ADDR_OWVAR 39
15472: PUSH
15473: LD_VAR 0 6
15477: ST_TO_ADDR
// vc_control = vehcontrol ;
15478: LD_ADDR_OWVAR 38
15482: PUSH
15483: LD_VAR 0 7
15487: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15488: LD_ADDR_OWVAR 40
15492: PUSH
15493: LD_VAR 0 8
15497: PUSH
15498: LD_INT 1
15500: PPUSH
15501: LD_VAR 0 8
15505: PPUSH
15506: CALL_OW 12
15510: ARRAY
15511: ST_TO_ADDR
// for j = 1 to RuWeapons do
15512: LD_ADDR_VAR 0 14
15516: PUSH
15517: DOUBLE
15518: LD_INT 1
15520: DEC
15521: ST_TO_ADDR
15522: LD_VAR 0 8
15526: PUSH
15527: FOR_TO
15528: IFFALSE 15730
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15530: LD_VAR 0 8
15534: PUSH
15535: LD_VAR 0 14
15539: ARRAY
15540: PUSH
15541: LD_INT 42
15543: EQUAL
15544: PUSH
15545: LD_VAR 0 8
15549: PUSH
15550: LD_VAR 0 14
15554: ARRAY
15555: PUSH
15556: LD_INT 43
15558: EQUAL
15559: OR
15560: PUSH
15561: LD_VAR 0 8
15565: PUSH
15566: LD_VAR 0 14
15570: ARRAY
15571: PUSH
15572: LD_INT 44
15574: EQUAL
15575: OR
15576: PUSH
15577: LD_VAR 0 8
15581: PUSH
15582: LD_VAR 0 14
15586: ARRAY
15587: PUSH
15588: LD_INT 45
15590: EQUAL
15591: OR
15592: PUSH
15593: LD_VAR 0 8
15597: PUSH
15598: LD_VAR 0 14
15602: ARRAY
15603: PUSH
15604: LD_INT 49
15606: EQUAL
15607: OR
15608: IFFALSE 15657
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15610: LD_ADDR_VAR 0 17
15614: PUSH
15615: LD_INT 21
15617: PUSH
15618: LD_INT 22
15620: PUSH
15621: LD_INT 23
15623: PUSH
15624: LD_INT 24
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15633: LD_ADDR_OWVAR 37
15637: PUSH
15638: LD_VAR 0 17
15642: PUSH
15643: LD_INT 1
15645: PPUSH
15646: LD_VAR 0 17
15650: PPUSH
15651: CALL_OW 12
15655: ARRAY
15656: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15657: LD_VAR 0 8
15661: PUSH
15662: LD_VAR 0 14
15666: ARRAY
15667: PUSH
15668: LD_INT 46
15670: EQUAL
15671: PUSH
15672: LD_VAR 0 8
15676: PUSH
15677: LD_VAR 0 14
15681: ARRAY
15682: PUSH
15683: LD_INT 47
15685: EQUAL
15686: OR
15687: IFFALSE 15728
// begin ruChassisTab = [ 23 , 24 ] ;
15689: LD_ADDR_VAR 0 17
15693: PUSH
15694: LD_INT 23
15696: PUSH
15697: LD_INT 24
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15704: LD_ADDR_OWVAR 37
15708: PUSH
15709: LD_VAR 0 17
15713: PUSH
15714: LD_INT 1
15716: PPUSH
15717: LD_VAR 0 17
15721: PPUSH
15722: CALL_OW 12
15726: ARRAY
15727: ST_TO_ADDR
// end ; end ;
15728: GO 15527
15730: POP
15731: POP
// veh = CreateVehicle ;
15732: LD_ADDR_VAR 0 16
15736: PUSH
15737: CALL_OW 45
15741: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15742: LD_VAR 0 16
15746: PPUSH
15747: LD_VAR 0 1
15751: PPUSH
15752: LD_INT 0
15754: PPUSH
15755: CALL_OW 49
// if vehcontrol = 1 then
15759: LD_VAR 0 7
15763: PUSH
15764: LD_INT 1
15766: EQUAL
15767: IFFALSE 15824
// begin hc_gallery =  ;
15769: LD_ADDR_OWVAR 33
15773: PUSH
15774: LD_STRING 
15776: ST_TO_ADDR
// hc_name =  ;
15777: LD_ADDR_OWVAR 26
15781: PUSH
15782: LD_STRING 
15784: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15785: LD_INT 0
15787: PPUSH
15788: LD_INT 3
15790: PPUSH
15791: LD_VAR 0 4
15795: PPUSH
15796: CALL_OW 380
// un = CreateHuman ;
15800: LD_ADDR_VAR 0 15
15804: PUSH
15805: CALL_OW 44
15809: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15810: LD_VAR 0 15
15814: PPUSH
15815: LD_VAR 0 16
15819: PPUSH
15820: CALL_OW 52
// end ; i = i + 1 ;
15824: LD_ADDR_VAR 0 13
15828: PUSH
15829: LD_VAR 0 13
15833: PUSH
15834: LD_INT 1
15836: PLUS
15837: ST_TO_ADDR
// end ; until i = vehCount ;
15838: LD_VAR 0 13
15842: PUSH
15843: LD_VAR 0 3
15847: EQUAL
15848: IFFALSE 14500
// repeat wait ( 0 0$1 ) ;
15850: LD_INT 35
15852: PPUSH
15853: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
15857: LD_ADDR_VAR 0 20
15861: PUSH
15862: LD_INT 22
15864: PUSH
15865: LD_VAR 0 2
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: LD_INT 21
15876: PUSH
15877: LD_INT 2
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 24
15886: PUSH
15887: LD_INT 250
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: LIST
15898: PPUSH
15899: CALL_OW 69
15903: ST_TO_ADDR
// if vehicleOK_list > 0 then
15904: LD_VAR 0 20
15908: PUSH
15909: LD_INT 0
15911: GREATER
15912: IFFALSE 16103
// begin for i in vehicleOK_list do
15914: LD_ADDR_VAR 0 13
15918: PUSH
15919: LD_VAR 0 20
15923: PUSH
15924: FOR_IN
15925: IFFALSE 16101
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15927: LD_ADDR_VAR 0 21
15931: PUSH
15932: LD_INT 22
15934: PUSH
15935: LD_VAR 0 11
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PPUSH
15944: CALL_OW 69
15948: PPUSH
15949: LD_VAR 0 13
15953: PPUSH
15954: CALL_OW 74
15958: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15959: LD_ADDR_VAR 0 22
15963: PUSH
15964: LD_INT 22
15966: PUSH
15967: LD_VAR 0 11
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 2
15978: PUSH
15979: LD_INT 59
15981: PUSH
15982: EMPTY
15983: LIST
15984: PUSH
15985: LD_INT 21
15987: PUSH
15988: LD_INT 1
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 21
15997: PUSH
15998: LD_INT 2
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: EMPTY
16016: LIST
16017: PPUSH
16018: CALL_OW 69
16022: PPUSH
16023: LD_VAR 0 13
16027: PPUSH
16028: CALL_OW 74
16032: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16033: LD_VAR 0 13
16037: PPUSH
16038: LD_VAR 0 21
16042: PPUSH
16043: CALL_OW 296
16047: PUSH
16048: LD_INT 6
16050: PLUS
16051: PUSH
16052: LD_VAR 0 13
16056: PPUSH
16057: LD_VAR 0 22
16061: PPUSH
16062: CALL_OW 296
16066: LESS
16067: IFFALSE 16085
// begin ComAttackUnit ( i , target1 ) ;
16069: LD_VAR 0 13
16073: PPUSH
16074: LD_VAR 0 21
16078: PPUSH
16079: CALL_OW 115
// end else
16083: GO 16099
// begin ComAttackUnit ( i , target2 ) ;
16085: LD_VAR 0 13
16089: PPUSH
16090: LD_VAR 0 22
16094: PPUSH
16095: CALL_OW 115
// end ; end ;
16099: GO 15924
16101: POP
16102: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16103: LD_INT 22
16105: PUSH
16106: LD_VAR 0 2
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: LD_INT 21
16117: PUSH
16118: LD_INT 2
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 24
16127: PUSH
16128: LD_INT 250
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: LIST
16139: PPUSH
16140: CALL_OW 69
16144: PUSH
16145: LD_INT 0
16147: EQUAL
16148: IFFALSE 15850
// end ;
16150: LD_VAR 0 12
16154: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16155: LD_INT 0
16157: PPUSH
16158: PPUSH
16159: PPUSH
16160: PPUSH
16161: PPUSH
16162: PPUSH
16163: PPUSH
16164: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16165: LD_ADDR_VAR 0 7
16169: PUSH
16170: LD_INT 22
16172: PUSH
16173: LD_VAR 0 1
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 1
16184: PUSH
16185: LD_INT 3
16187: PUSH
16188: LD_INT 24
16190: PUSH
16191: LD_INT 550
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 24
16204: PUSH
16205: LD_INT 250
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: LIST
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PPUSH
16221: CALL_OW 69
16225: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16226: LD_ADDR_VAR 0 8
16230: PUSH
16231: LD_INT 22
16233: PUSH
16234: LD_VAR 0 1
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 2
16245: PUSH
16246: LD_INT 25
16248: PUSH
16249: LD_INT 1
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: LD_INT 25
16258: PUSH
16259: LD_INT 5
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 25
16268: PUSH
16269: LD_INT 8
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 25
16278: PUSH
16279: LD_INT 9
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: PUSH
16293: LD_INT 24
16295: PUSH
16296: LD_INT 1000
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: LIST
16307: PPUSH
16308: CALL_OW 69
16312: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16313: LD_ADDR_VAR 0 9
16317: PUSH
16318: LD_INT 22
16320: PUSH
16321: LD_VAR 0 1
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 25
16332: PUSH
16333: LD_INT 4
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PPUSH
16344: CALL_OW 69
16348: ST_TO_ADDR
// if medicCount > 0 then
16349: LD_VAR 0 9
16353: PUSH
16354: LD_INT 0
16356: GREATER
16357: IFFALSE 16431
// begin if damageUnit_list > 0 then
16359: LD_VAR 0 7
16363: PUSH
16364: LD_INT 0
16366: GREATER
16367: IFFALSE 16431
// begin for i in damageUnit_list do
16369: LD_ADDR_VAR 0 5
16373: PUSH
16374: LD_VAR 0 7
16378: PUSH
16379: FOR_IN
16380: IFFALSE 16429
// begin ComMoveToArea ( i , healArea ) ;
16382: LD_VAR 0 5
16386: PPUSH
16387: LD_VAR 0 2
16391: PPUSH
16392: CALL_OW 113
// for j in medicCount do
16396: LD_ADDR_VAR 0 6
16400: PUSH
16401: LD_VAR 0 9
16405: PUSH
16406: FOR_IN
16407: IFFALSE 16425
// AddComHeal ( j , i ) ;
16409: LD_VAR 0 6
16413: PPUSH
16414: LD_VAR 0 5
16418: PPUSH
16419: CALL_OW 188
16423: GO 16406
16425: POP
16426: POP
// end ;
16427: GO 16379
16429: POP
16430: POP
// end ; end ; if soldiersOK_list > 0 then
16431: LD_VAR 0 8
16435: PUSH
16436: LD_INT 0
16438: GREATER
16439: IFFALSE 16630
// begin for i in soldiersOK_list do
16441: LD_ADDR_VAR 0 5
16445: PUSH
16446: LD_VAR 0 8
16450: PUSH
16451: FOR_IN
16452: IFFALSE 16628
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16454: LD_ADDR_VAR 0 10
16458: PUSH
16459: LD_INT 22
16461: PUSH
16462: LD_VAR 0 3
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PPUSH
16471: CALL_OW 69
16475: PPUSH
16476: LD_VAR 0 5
16480: PPUSH
16481: CALL_OW 74
16485: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16486: LD_ADDR_VAR 0 11
16490: PUSH
16491: LD_INT 22
16493: PUSH
16494: LD_VAR 0 3
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 2
16505: PUSH
16506: LD_INT 59
16508: PUSH
16509: EMPTY
16510: LIST
16511: PUSH
16512: LD_INT 21
16514: PUSH
16515: LD_INT 1
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 21
16524: PUSH
16525: LD_INT 2
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: EMPTY
16543: LIST
16544: PPUSH
16545: CALL_OW 69
16549: PPUSH
16550: LD_VAR 0 5
16554: PPUSH
16555: CALL_OW 74
16559: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16560: LD_VAR 0 5
16564: PPUSH
16565: LD_VAR 0 10
16569: PPUSH
16570: CALL_OW 296
16574: PUSH
16575: LD_INT 8
16577: PLUS
16578: PUSH
16579: LD_VAR 0 5
16583: PPUSH
16584: LD_VAR 0 11
16588: PPUSH
16589: CALL_OW 296
16593: LESS
16594: IFFALSE 16612
// begin ComAttackUnit ( i , target1 ) ;
16596: LD_VAR 0 5
16600: PPUSH
16601: LD_VAR 0 10
16605: PPUSH
16606: CALL_OW 115
// end else
16610: GO 16626
// begin ComAttackUnit ( i , target2 ) ;
16612: LD_VAR 0 5
16616: PPUSH
16617: LD_VAR 0 11
16621: PPUSH
16622: CALL_OW 115
// end ; end ;
16626: GO 16451
16628: POP
16629: POP
// end ; end ;
16630: LD_VAR 0 4
16634: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16635: LD_INT 0
16637: PPUSH
16638: PPUSH
// list := [ ] ;
16639: LD_ADDR_VAR 0 5
16643: PUSH
16644: EMPTY
16645: ST_TO_ADDR
// case d of 0 :
16646: LD_VAR 0 3
16650: PUSH
16651: LD_INT 0
16653: DOUBLE
16654: EQUAL
16655: IFTRUE 16659
16657: GO 16792
16659: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16660: LD_ADDR_VAR 0 5
16664: PUSH
16665: LD_VAR 0 1
16669: PUSH
16670: LD_INT 4
16672: MINUS
16673: PUSH
16674: LD_VAR 0 2
16678: PUSH
16679: LD_INT 4
16681: MINUS
16682: PUSH
16683: LD_INT 2
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: PUSH
16691: LD_VAR 0 1
16695: PUSH
16696: LD_INT 3
16698: MINUS
16699: PUSH
16700: LD_VAR 0 2
16704: PUSH
16705: LD_INT 1
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: LIST
16712: PUSH
16713: LD_VAR 0 1
16717: PUSH
16718: LD_INT 4
16720: PLUS
16721: PUSH
16722: LD_VAR 0 2
16726: PUSH
16727: LD_INT 4
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: LIST
16734: PUSH
16735: LD_VAR 0 1
16739: PUSH
16740: LD_INT 3
16742: PLUS
16743: PUSH
16744: LD_VAR 0 2
16748: PUSH
16749: LD_INT 3
16751: PLUS
16752: PUSH
16753: LD_INT 5
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: LIST
16760: PUSH
16761: LD_VAR 0 1
16765: PUSH
16766: LD_VAR 0 2
16770: PUSH
16771: LD_INT 4
16773: PLUS
16774: PUSH
16775: LD_INT 0
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: ST_TO_ADDR
// end ; 1 :
16790: GO 17490
16792: LD_INT 1
16794: DOUBLE
16795: EQUAL
16796: IFTRUE 16800
16798: GO 16933
16800: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16801: LD_ADDR_VAR 0 5
16805: PUSH
16806: LD_VAR 0 1
16810: PUSH
16811: LD_VAR 0 2
16815: PUSH
16816: LD_INT 4
16818: MINUS
16819: PUSH
16820: LD_INT 3
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: LIST
16827: PUSH
16828: LD_VAR 0 1
16832: PUSH
16833: LD_INT 3
16835: MINUS
16836: PUSH
16837: LD_VAR 0 2
16841: PUSH
16842: LD_INT 3
16844: MINUS
16845: PUSH
16846: LD_INT 2
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: LIST
16853: PUSH
16854: LD_VAR 0 1
16858: PUSH
16859: LD_INT 4
16861: MINUS
16862: PUSH
16863: LD_VAR 0 2
16867: PUSH
16868: LD_INT 1
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: LIST
16875: PUSH
16876: LD_VAR 0 1
16880: PUSH
16881: LD_VAR 0 2
16885: PUSH
16886: LD_INT 3
16888: PLUS
16889: PUSH
16890: LD_INT 0
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: LIST
16897: PUSH
16898: LD_VAR 0 1
16902: PUSH
16903: LD_INT 4
16905: PLUS
16906: PUSH
16907: LD_VAR 0 2
16911: PUSH
16912: LD_INT 4
16914: PLUS
16915: PUSH
16916: LD_INT 5
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: ST_TO_ADDR
// end ; 2 :
16931: GO 17490
16933: LD_INT 2
16935: DOUBLE
16936: EQUAL
16937: IFTRUE 16941
16939: GO 17070
16941: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
16942: LD_ADDR_VAR 0 5
16946: PUSH
16947: LD_VAR 0 1
16951: PUSH
16952: LD_VAR 0 2
16956: PUSH
16957: LD_INT 3
16959: MINUS
16960: PUSH
16961: LD_INT 3
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: LIST
16968: PUSH
16969: LD_VAR 0 1
16973: PUSH
16974: LD_INT 4
16976: PLUS
16977: PUSH
16978: LD_VAR 0 2
16982: PUSH
16983: LD_INT 4
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: LIST
16990: PUSH
16991: LD_VAR 0 1
16995: PUSH
16996: LD_VAR 0 2
17000: PUSH
17001: LD_INT 4
17003: PLUS
17004: PUSH
17005: LD_INT 0
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: LIST
17012: PUSH
17013: LD_VAR 0 1
17017: PUSH
17018: LD_INT 3
17020: MINUS
17021: PUSH
17022: LD_VAR 0 2
17026: PUSH
17027: LD_INT 1
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: LIST
17034: PUSH
17035: LD_VAR 0 1
17039: PUSH
17040: LD_INT 4
17042: MINUS
17043: PUSH
17044: LD_VAR 0 2
17048: PUSH
17049: LD_INT 4
17051: MINUS
17052: PUSH
17053: LD_INT 2
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: LIST
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: ST_TO_ADDR
// end ; 3 :
17068: GO 17490
17070: LD_INT 3
17072: DOUBLE
17073: EQUAL
17074: IFTRUE 17078
17076: GO 17211
17078: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
17079: LD_ADDR_VAR 0 5
17083: PUSH
17084: LD_VAR 0 1
17088: PUSH
17089: LD_INT 3
17091: PLUS
17092: PUSH
17093: LD_VAR 0 2
17097: PUSH
17098: LD_INT 4
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: LIST
17105: PUSH
17106: LD_VAR 0 1
17110: PUSH
17111: LD_INT 4
17113: PLUS
17114: PUSH
17115: LD_VAR 0 2
17119: PUSH
17120: LD_INT 4
17122: PLUS
17123: PUSH
17124: LD_INT 5
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: LIST
17131: PUSH
17132: LD_VAR 0 1
17136: PUSH
17137: LD_INT 4
17139: MINUS
17140: PUSH
17141: LD_VAR 0 2
17145: PUSH
17146: LD_INT 1
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: LIST
17153: PUSH
17154: LD_VAR 0 1
17158: PUSH
17159: LD_VAR 0 2
17163: PUSH
17164: LD_INT 4
17166: MINUS
17167: PUSH
17168: LD_INT 3
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: LIST
17175: PUSH
17176: LD_VAR 0 1
17180: PUSH
17181: LD_INT 3
17183: MINUS
17184: PUSH
17185: LD_VAR 0 2
17189: PUSH
17190: LD_INT 3
17192: MINUS
17193: PUSH
17194: LD_INT 2
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: LIST
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: ST_TO_ADDR
// end ; 4 :
17209: GO 17490
17211: LD_INT 4
17213: DOUBLE
17214: EQUAL
17215: IFTRUE 17219
17217: GO 17352
17219: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
17220: LD_ADDR_VAR 0 5
17224: PUSH
17225: LD_VAR 0 1
17229: PUSH
17230: LD_VAR 0 2
17234: PUSH
17235: LD_INT 4
17237: PLUS
17238: PUSH
17239: LD_INT 0
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: LIST
17246: PUSH
17247: LD_VAR 0 1
17251: PUSH
17252: LD_INT 3
17254: PLUS
17255: PUSH
17256: LD_VAR 0 2
17260: PUSH
17261: LD_INT 3
17263: PLUS
17264: PUSH
17265: LD_INT 5
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: PUSH
17273: LD_VAR 0 1
17277: PUSH
17278: LD_INT 3
17280: PLUS
17281: PUSH
17282: LD_VAR 0 2
17286: PUSH
17287: LD_INT 4
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: LIST
17294: PUSH
17295: LD_VAR 0 1
17299: PUSH
17300: LD_VAR 0 2
17304: PUSH
17305: LD_INT 3
17307: MINUS
17308: PUSH
17309: LD_INT 3
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: LIST
17316: PUSH
17317: LD_VAR 0 1
17321: PUSH
17322: LD_INT 4
17324: MINUS
17325: PUSH
17326: LD_VAR 0 2
17330: PUSH
17331: LD_INT 4
17333: MINUS
17334: PUSH
17335: LD_INT 2
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: ST_TO_ADDR
// end ; 5 :
17350: GO 17490
17352: LD_INT 5
17354: DOUBLE
17355: EQUAL
17356: IFTRUE 17360
17358: GO 17489
17360: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
17361: LD_ADDR_VAR 0 5
17365: PUSH
17366: LD_VAR 0 1
17370: PUSH
17371: LD_INT 4
17373: MINUS
17374: PUSH
17375: LD_VAR 0 2
17379: PUSH
17380: LD_INT 1
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: LIST
17387: PUSH
17388: LD_VAR 0 1
17392: PUSH
17393: LD_VAR 0 2
17397: PUSH
17398: LD_INT 4
17400: MINUS
17401: PUSH
17402: LD_INT 3
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: LIST
17409: PUSH
17410: LD_VAR 0 1
17414: PUSH
17415: LD_INT 4
17417: PLUS
17418: PUSH
17419: LD_VAR 0 2
17423: PUSH
17424: LD_INT 4
17426: PLUS
17427: PUSH
17428: LD_INT 5
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: LIST
17435: PUSH
17436: LD_VAR 0 1
17440: PUSH
17441: LD_INT 3
17443: PLUS
17444: PUSH
17445: LD_VAR 0 2
17449: PUSH
17450: LD_INT 4
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: LIST
17457: PUSH
17458: LD_VAR 0 1
17462: PUSH
17463: LD_VAR 0 2
17467: PUSH
17468: LD_INT 3
17470: PLUS
17471: PUSH
17472: LD_INT 0
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: LIST
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: ST_TO_ADDR
// end ; end ;
17487: GO 17490
17489: POP
// result := list ;
17490: LD_ADDR_VAR 0 4
17494: PUSH
17495: LD_VAR 0 5
17499: ST_TO_ADDR
// end ;
17500: LD_VAR 0 4
17504: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17505: LD_INT 0
17507: PPUSH
17508: PPUSH
17509: PPUSH
17510: PPUSH
17511: PPUSH
17512: PPUSH
17513: PPUSH
17514: PPUSH
17515: PPUSH
// result := false ;
17516: LD_ADDR_VAR 0 7
17520: PUSH
17521: LD_INT 0
17523: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17524: LD_VAR 0 1
17528: NOT
17529: PUSH
17530: LD_VAR 0 1
17534: PPUSH
17535: CALL_OW 266
17539: PUSH
17540: LD_INT 0
17542: PUSH
17543: LD_INT 1
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: IN
17550: NOT
17551: OR
17552: PUSH
17553: LD_VAR 0 2
17557: NOT
17558: OR
17559: PUSH
17560: LD_VAR 0 5
17564: PUSH
17565: LD_INT 0
17567: PUSH
17568: LD_INT 1
17570: PUSH
17571: LD_INT 2
17573: PUSH
17574: LD_INT 3
17576: PUSH
17577: LD_INT 4
17579: PUSH
17580: LD_INT 5
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: IN
17591: NOT
17592: OR
17593: PUSH
17594: LD_VAR 0 3
17598: PPUSH
17599: LD_VAR 0 4
17603: PPUSH
17604: CALL_OW 488
17608: NOT
17609: OR
17610: IFFALSE 17614
// exit ;
17612: GO 17964
// pom := GetBase ( bdepot ) ;
17614: LD_ADDR_VAR 0 10
17618: PUSH
17619: LD_VAR 0 1
17623: PPUSH
17624: CALL_OW 274
17628: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17629: LD_ADDR_VAR 0 11
17633: PUSH
17634: LD_VAR 0 2
17638: PPUSH
17639: LD_VAR 0 1
17643: PPUSH
17644: CALL_OW 248
17648: PPUSH
17649: CALL_OW 450
17653: ST_TO_ADDR
// if check_cost then
17654: LD_VAR 0 6
17658: IFFALSE 17735
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17660: LD_VAR 0 10
17664: PPUSH
17665: LD_INT 1
17667: PPUSH
17668: CALL_OW 275
17672: PUSH
17673: LD_VAR 0 11
17677: PUSH
17678: LD_INT 1
17680: ARRAY
17681: GREATEREQUAL
17682: PUSH
17683: LD_VAR 0 10
17687: PPUSH
17688: LD_INT 2
17690: PPUSH
17691: CALL_OW 275
17695: PUSH
17696: LD_VAR 0 11
17700: PUSH
17701: LD_INT 2
17703: ARRAY
17704: GREATEREQUAL
17705: AND
17706: PUSH
17707: LD_VAR 0 10
17711: PPUSH
17712: LD_INT 3
17714: PPUSH
17715: CALL_OW 275
17719: PUSH
17720: LD_VAR 0 11
17724: PUSH
17725: LD_INT 3
17727: ARRAY
17728: GREATEREQUAL
17729: AND
17730: NOT
17731: IFFALSE 17735
// exit ;
17733: GO 17964
// if GetBType ( bdepot ) = b_depot then
17735: LD_VAR 0 1
17739: PPUSH
17740: CALL_OW 266
17744: PUSH
17745: LD_INT 0
17747: EQUAL
17748: IFFALSE 17760
// dist := 28 else
17750: LD_ADDR_VAR 0 14
17754: PUSH
17755: LD_INT 28
17757: ST_TO_ADDR
17758: GO 17768
// dist := 36 ;
17760: LD_ADDR_VAR 0 14
17764: PUSH
17765: LD_INT 36
17767: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17768: LD_VAR 0 1
17772: PPUSH
17773: LD_VAR 0 3
17777: PPUSH
17778: LD_VAR 0 4
17782: PPUSH
17783: CALL_OW 297
17787: PUSH
17788: LD_VAR 0 14
17792: GREATER
17793: IFFALSE 17797
// exit ;
17795: GO 17964
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17797: LD_ADDR_VAR 0 12
17801: PUSH
17802: LD_VAR 0 2
17806: PPUSH
17807: LD_VAR 0 3
17811: PPUSH
17812: LD_VAR 0 4
17816: PPUSH
17817: LD_VAR 0 5
17821: PPUSH
17822: LD_VAR 0 1
17826: PPUSH
17827: CALL_OW 248
17831: PPUSH
17832: LD_INT 0
17834: PPUSH
17835: CALL 17969 0 6
17839: ST_TO_ADDR
// if not hexes then
17840: LD_VAR 0 12
17844: NOT
17845: IFFALSE 17849
// exit ;
17847: GO 17964
// for i = 1 to hexes do
17849: LD_ADDR_VAR 0 8
17853: PUSH
17854: DOUBLE
17855: LD_INT 1
17857: DEC
17858: ST_TO_ADDR
17859: LD_VAR 0 12
17863: PUSH
17864: FOR_TO
17865: IFFALSE 17908
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17867: LD_VAR 0 12
17871: PUSH
17872: LD_VAR 0 8
17876: ARRAY
17877: PUSH
17878: LD_INT 1
17880: ARRAY
17881: PPUSH
17882: LD_VAR 0 12
17886: PUSH
17887: LD_VAR 0 8
17891: ARRAY
17892: PUSH
17893: LD_INT 2
17895: ARRAY
17896: PPUSH
17897: CALL_OW 488
17901: NOT
17902: IFFALSE 17906
// continue ;
17904: GO 17864
// end ;
17906: GO 17864
17908: POP
17909: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
17910: LD_VAR 0 2
17914: PUSH
17915: LD_INT 29
17917: PUSH
17918: LD_INT 30
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: IN
17925: PUSH
17926: LD_VAR 0 3
17930: PPUSH
17931: LD_VAR 0 4
17935: PPUSH
17936: LD_VAR 0 1
17940: PPUSH
17941: CALL_OW 255
17945: PPUSH
17946: CALL_OW 440
17950: NOT
17951: AND
17952: IFFALSE 17956
// exit ;
17954: GO 17964
// result := true ;
17956: LD_ADDR_VAR 0 7
17960: PUSH
17961: LD_INT 1
17963: ST_TO_ADDR
// end ;
17964: LD_VAR 0 7
17968: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
17969: LD_INT 0
17971: PPUSH
17972: PPUSH
17973: PPUSH
17974: PPUSH
17975: PPUSH
17976: PPUSH
17977: PPUSH
17978: PPUSH
17979: PPUSH
17980: PPUSH
17981: PPUSH
17982: PPUSH
17983: PPUSH
17984: PPUSH
17985: PPUSH
17986: PPUSH
17987: PPUSH
17988: PPUSH
17989: PPUSH
17990: PPUSH
17991: PPUSH
17992: PPUSH
17993: PPUSH
17994: PPUSH
17995: PPUSH
17996: PPUSH
17997: PPUSH
17998: PPUSH
17999: PPUSH
18000: PPUSH
18001: PPUSH
18002: PPUSH
18003: PPUSH
18004: PPUSH
18005: PPUSH
18006: PPUSH
18007: PPUSH
18008: PPUSH
18009: PPUSH
18010: PPUSH
18011: PPUSH
18012: PPUSH
18013: PPUSH
18014: PPUSH
18015: PPUSH
18016: PPUSH
18017: PPUSH
18018: PPUSH
18019: PPUSH
18020: PPUSH
18021: PPUSH
18022: PPUSH
18023: PPUSH
18024: PPUSH
18025: PPUSH
18026: PPUSH
18027: PPUSH
18028: PPUSH
// result = [ ] ;
18029: LD_ADDR_VAR 0 7
18033: PUSH
18034: EMPTY
18035: ST_TO_ADDR
// temp_list = [ ] ;
18036: LD_ADDR_VAR 0 9
18040: PUSH
18041: EMPTY
18042: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18043: LD_VAR 0 4
18047: PUSH
18048: LD_INT 0
18050: PUSH
18051: LD_INT 1
18053: PUSH
18054: LD_INT 2
18056: PUSH
18057: LD_INT 3
18059: PUSH
18060: LD_INT 4
18062: PUSH
18063: LD_INT 5
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: IN
18074: NOT
18075: PUSH
18076: LD_VAR 0 1
18080: PUSH
18081: LD_INT 0
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: IN
18091: PUSH
18092: LD_VAR 0 5
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: LD_INT 2
18102: PUSH
18103: LD_INT 3
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: LIST
18110: IN
18111: NOT
18112: AND
18113: OR
18114: IFFALSE 18118
// exit ;
18116: GO 36503
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18118: LD_VAR 0 1
18122: PUSH
18123: LD_INT 6
18125: PUSH
18126: LD_INT 7
18128: PUSH
18129: LD_INT 8
18131: PUSH
18132: LD_INT 13
18134: PUSH
18135: LD_INT 12
18137: PUSH
18138: LD_INT 15
18140: PUSH
18141: LD_INT 11
18143: PUSH
18144: LD_INT 14
18146: PUSH
18147: LD_INT 10
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: IN
18161: IFFALSE 18171
// btype = b_lab ;
18163: LD_ADDR_VAR 0 1
18167: PUSH
18168: LD_INT 6
18170: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18171: LD_VAR 0 6
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: LD_INT 1
18181: PUSH
18182: LD_INT 2
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: LIST
18189: IN
18190: NOT
18191: PUSH
18192: LD_VAR 0 1
18196: PUSH
18197: LD_INT 0
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: LD_INT 2
18205: PUSH
18206: LD_INT 3
18208: PUSH
18209: LD_INT 6
18211: PUSH
18212: LD_INT 36
18214: PUSH
18215: LD_INT 4
18217: PUSH
18218: LD_INT 5
18220: PUSH
18221: LD_INT 31
18223: PUSH
18224: LD_INT 32
18226: PUSH
18227: LD_INT 33
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: IN
18243: NOT
18244: PUSH
18245: LD_VAR 0 6
18249: PUSH
18250: LD_INT 1
18252: EQUAL
18253: AND
18254: OR
18255: PUSH
18256: LD_VAR 0 1
18260: PUSH
18261: LD_INT 2
18263: PUSH
18264: LD_INT 3
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: IN
18271: NOT
18272: PUSH
18273: LD_VAR 0 6
18277: PUSH
18278: LD_INT 2
18280: EQUAL
18281: AND
18282: OR
18283: IFFALSE 18293
// mode = 0 ;
18285: LD_ADDR_VAR 0 6
18289: PUSH
18290: LD_INT 0
18292: ST_TO_ADDR
// case mode of 0 :
18293: LD_VAR 0 6
18297: PUSH
18298: LD_INT 0
18300: DOUBLE
18301: EQUAL
18302: IFTRUE 18306
18304: GO 29759
18306: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18307: LD_ADDR_VAR 0 11
18311: PUSH
18312: LD_INT 0
18314: PUSH
18315: LD_INT 0
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 0
18324: PUSH
18325: LD_INT 1
18327: NEG
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 1
18335: PUSH
18336: LD_INT 0
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 1
18345: PUSH
18346: LD_INT 1
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 0
18355: PUSH
18356: LD_INT 1
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 1
18365: NEG
18366: PUSH
18367: LD_INT 0
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 1
18376: NEG
18377: PUSH
18378: LD_INT 1
18380: NEG
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 1
18388: NEG
18389: PUSH
18390: LD_INT 2
18392: NEG
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 0
18400: PUSH
18401: LD_INT 2
18403: NEG
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: LD_INT 1
18414: NEG
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 1
18422: PUSH
18423: LD_INT 2
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: LD_INT 2
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 1
18442: NEG
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 1
18453: PUSH
18454: LD_INT 3
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 0
18463: PUSH
18464: LD_INT 3
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 1
18473: NEG
18474: PUSH
18475: LD_INT 2
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18500: LD_ADDR_VAR 0 12
18504: PUSH
18505: LD_INT 0
18507: PUSH
18508: LD_INT 0
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 0
18517: PUSH
18518: LD_INT 1
18520: NEG
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 1
18528: PUSH
18529: LD_INT 0
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 1
18538: PUSH
18539: LD_INT 1
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: LD_INT 1
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: LD_INT 0
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 1
18569: NEG
18570: PUSH
18571: LD_INT 1
18573: NEG
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 1
18581: PUSH
18582: LD_INT 1
18584: NEG
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 2
18592: PUSH
18593: LD_INT 0
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 2
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 1
18612: NEG
18613: PUSH
18614: LD_INT 1
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 2
18623: NEG
18624: PUSH
18625: LD_INT 0
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 2
18634: NEG
18635: PUSH
18636: LD_INT 1
18638: NEG
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 2
18646: NEG
18647: PUSH
18648: LD_INT 1
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 3
18657: NEG
18658: PUSH
18659: LD_INT 0
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 3
18668: NEG
18669: PUSH
18670: LD_INT 1
18672: NEG
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18696: LD_ADDR_VAR 0 13
18700: PUSH
18701: LD_INT 0
18703: PUSH
18704: LD_INT 0
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 0
18713: PUSH
18714: LD_INT 1
18716: NEG
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 1
18724: PUSH
18725: LD_INT 0
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 1
18734: PUSH
18735: LD_INT 1
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 0
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 1
18754: NEG
18755: PUSH
18756: LD_INT 0
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 1
18765: NEG
18766: PUSH
18767: LD_INT 1
18769: NEG
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 1
18777: NEG
18778: PUSH
18779: LD_INT 2
18781: NEG
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 2
18789: PUSH
18790: LD_INT 1
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 2
18799: PUSH
18800: LD_INT 2
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: LD_INT 2
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 2
18819: NEG
18820: PUSH
18821: LD_INT 1
18823: NEG
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 2
18831: NEG
18832: PUSH
18833: LD_INT 2
18835: NEG
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 2
18843: NEG
18844: PUSH
18845: LD_INT 3
18847: NEG
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 3
18855: NEG
18856: PUSH
18857: LD_INT 2
18859: NEG
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 3
18867: NEG
18868: PUSH
18869: LD_INT 3
18871: NEG
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18895: LD_ADDR_VAR 0 14
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: LD_INT 0
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 0
18912: PUSH
18913: LD_INT 1
18915: NEG
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 1
18923: PUSH
18924: LD_INT 0
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 1
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: LD_INT 0
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: NEG
18965: PUSH
18966: LD_INT 1
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: NEG
18977: PUSH
18978: LD_INT 2
18980: NEG
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 0
18988: PUSH
18989: LD_INT 2
18991: NEG
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: LD_INT 1
19002: NEG
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 1
19010: PUSH
19011: LD_INT 2
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 1
19041: NEG
19042: PUSH
19043: LD_INT 3
19045: NEG
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 0
19053: PUSH
19054: LD_INT 3
19056: NEG
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 1
19064: PUSH
19065: LD_INT 2
19067: NEG
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19091: LD_ADDR_VAR 0 15
19095: PUSH
19096: LD_INT 0
19098: PUSH
19099: LD_INT 0
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 0
19108: PUSH
19109: LD_INT 1
19111: NEG
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 1
19119: PUSH
19120: LD_INT 0
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 1
19129: PUSH
19130: LD_INT 1
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 0
19139: PUSH
19140: LD_INT 1
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 1
19149: NEG
19150: PUSH
19151: LD_INT 0
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 1
19160: NEG
19161: PUSH
19162: LD_INT 1
19164: NEG
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: LD_INT 1
19175: NEG
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 2
19183: PUSH
19184: LD_INT 0
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 2
19193: PUSH
19194: LD_INT 1
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 1
19203: NEG
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 2
19214: NEG
19215: PUSH
19216: LD_INT 0
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 2
19225: NEG
19226: PUSH
19227: LD_INT 1
19229: NEG
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 2
19237: PUSH
19238: LD_INT 1
19240: NEG
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 3
19248: PUSH
19249: LD_INT 0
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 3
19258: PUSH
19259: LD_INT 1
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19284: LD_ADDR_VAR 0 16
19288: PUSH
19289: LD_INT 0
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 0
19301: PUSH
19302: LD_INT 1
19304: NEG
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: LD_INT 0
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: LD_INT 1
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 0
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 1
19353: NEG
19354: PUSH
19355: LD_INT 1
19357: NEG
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 1
19365: NEG
19366: PUSH
19367: LD_INT 2
19369: NEG
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 2
19377: PUSH
19378: LD_INT 1
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 2
19387: PUSH
19388: LD_INT 2
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 1
19397: PUSH
19398: LD_INT 2
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 2
19407: NEG
19408: PUSH
19409: LD_INT 1
19411: NEG
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: NEG
19420: PUSH
19421: LD_INT 2
19423: NEG
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 3
19431: PUSH
19432: LD_INT 2
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 3
19441: PUSH
19442: LD_INT 3
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 2
19451: PUSH
19452: LD_INT 3
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19477: LD_ADDR_VAR 0 17
19481: PUSH
19482: LD_INT 0
19484: PUSH
19485: LD_INT 0
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 0
19494: PUSH
19495: LD_INT 1
19497: NEG
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 1
19505: PUSH
19506: LD_INT 0
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: PUSH
19516: LD_INT 1
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 0
19525: PUSH
19526: LD_INT 1
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 1
19535: NEG
19536: PUSH
19537: LD_INT 0
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 1
19546: NEG
19547: PUSH
19548: LD_INT 1
19550: NEG
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 1
19558: NEG
19559: PUSH
19560: LD_INT 2
19562: NEG
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 0
19570: PUSH
19571: LD_INT 2
19573: NEG
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 1
19581: PUSH
19582: LD_INT 1
19584: NEG
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 2
19592: PUSH
19593: LD_INT 0
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 2
19602: PUSH
19603: LD_INT 1
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 2
19612: PUSH
19613: LD_INT 2
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 1
19622: PUSH
19623: LD_INT 2
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 0
19632: PUSH
19633: LD_INT 2
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 1
19642: NEG
19643: PUSH
19644: LD_INT 1
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 2
19653: NEG
19654: PUSH
19655: LD_INT 0
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 2
19664: NEG
19665: PUSH
19666: LD_INT 1
19668: NEG
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 2
19676: NEG
19677: PUSH
19678: LD_INT 2
19680: NEG
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19707: LD_ADDR_VAR 0 18
19711: PUSH
19712: LD_INT 0
19714: PUSH
19715: LD_INT 0
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 0
19724: PUSH
19725: LD_INT 1
19727: NEG
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 1
19735: PUSH
19736: LD_INT 0
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 1
19745: PUSH
19746: LD_INT 1
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 0
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 1
19765: NEG
19766: PUSH
19767: LD_INT 0
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 1
19776: NEG
19777: PUSH
19778: LD_INT 1
19780: NEG
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 1
19788: NEG
19789: PUSH
19790: LD_INT 2
19792: NEG
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 0
19800: PUSH
19801: LD_INT 2
19803: NEG
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: LD_INT 1
19811: PUSH
19812: LD_INT 1
19814: NEG
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 2
19822: PUSH
19823: LD_INT 0
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 2
19832: PUSH
19833: LD_INT 1
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 2
19842: PUSH
19843: LD_INT 2
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 1
19852: PUSH
19853: LD_INT 2
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: LD_INT 2
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 1
19872: NEG
19873: PUSH
19874: LD_INT 1
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 2
19883: NEG
19884: PUSH
19885: LD_INT 0
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 2
19894: NEG
19895: PUSH
19896: LD_INT 1
19898: NEG
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 2
19906: NEG
19907: PUSH
19908: LD_INT 2
19910: NEG
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19937: LD_ADDR_VAR 0 19
19941: PUSH
19942: LD_INT 0
19944: PUSH
19945: LD_INT 0
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: LD_INT 1
19957: NEG
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 1
19965: PUSH
19966: LD_INT 0
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: LD_INT 1
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 0
19985: PUSH
19986: LD_INT 1
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 1
19995: NEG
19996: PUSH
19997: LD_INT 0
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 1
20006: NEG
20007: PUSH
20008: LD_INT 1
20010: NEG
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 1
20018: NEG
20019: PUSH
20020: LD_INT 2
20022: NEG
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 0
20030: PUSH
20031: LD_INT 2
20033: NEG
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 1
20041: PUSH
20042: LD_INT 1
20044: NEG
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 2
20052: PUSH
20053: LD_INT 0
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 2
20062: PUSH
20063: LD_INT 1
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 2
20072: PUSH
20073: LD_INT 2
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 1
20082: PUSH
20083: LD_INT 2
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: LD_INT 2
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 1
20102: NEG
20103: PUSH
20104: LD_INT 1
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 2
20113: NEG
20114: PUSH
20115: LD_INT 0
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 2
20124: NEG
20125: PUSH
20126: LD_INT 1
20128: NEG
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 2
20136: NEG
20137: PUSH
20138: LD_INT 2
20140: NEG
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20167: LD_ADDR_VAR 0 20
20171: PUSH
20172: LD_INT 0
20174: PUSH
20175: LD_INT 0
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: LD_INT 1
20187: NEG
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 1
20195: PUSH
20196: LD_INT 0
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 1
20205: PUSH
20206: LD_INT 1
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 0
20215: PUSH
20216: LD_INT 1
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 1
20225: NEG
20226: PUSH
20227: LD_INT 0
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 1
20236: NEG
20237: PUSH
20238: LD_INT 1
20240: NEG
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 1
20248: NEG
20249: PUSH
20250: LD_INT 2
20252: NEG
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 0
20260: PUSH
20261: LD_INT 2
20263: NEG
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 1
20271: PUSH
20272: LD_INT 1
20274: NEG
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 2
20282: PUSH
20283: LD_INT 0
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 2
20292: PUSH
20293: LD_INT 1
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 2
20302: PUSH
20303: LD_INT 2
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 1
20312: PUSH
20313: LD_INT 2
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: LD_INT 2
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 1
20332: NEG
20333: PUSH
20334: LD_INT 1
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 2
20343: NEG
20344: PUSH
20345: LD_INT 0
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 2
20354: NEG
20355: PUSH
20356: LD_INT 1
20358: NEG
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 2
20366: NEG
20367: PUSH
20368: LD_INT 2
20370: NEG
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20397: LD_ADDR_VAR 0 21
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: LD_INT 0
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 0
20414: PUSH
20415: LD_INT 1
20417: NEG
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 1
20425: PUSH
20426: LD_INT 0
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 1
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 0
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 1
20455: NEG
20456: PUSH
20457: LD_INT 0
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 1
20466: NEG
20467: PUSH
20468: LD_INT 1
20470: NEG
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 1
20478: NEG
20479: PUSH
20480: LD_INT 2
20482: NEG
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 0
20490: PUSH
20491: LD_INT 2
20493: NEG
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 1
20501: PUSH
20502: LD_INT 1
20504: NEG
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 2
20512: PUSH
20513: LD_INT 0
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 2
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 2
20532: PUSH
20533: LD_INT 2
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 1
20542: PUSH
20543: LD_INT 2
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 0
20552: PUSH
20553: LD_INT 2
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 1
20562: NEG
20563: PUSH
20564: LD_INT 1
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 2
20573: NEG
20574: PUSH
20575: LD_INT 0
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 2
20584: NEG
20585: PUSH
20586: LD_INT 1
20588: NEG
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 2
20596: NEG
20597: PUSH
20598: LD_INT 2
20600: NEG
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20627: LD_ADDR_VAR 0 22
20631: PUSH
20632: LD_INT 0
20634: PUSH
20635: LD_INT 0
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 0
20644: PUSH
20645: LD_INT 1
20647: NEG
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: LD_INT 0
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 1
20665: PUSH
20666: LD_INT 1
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 0
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 1
20685: NEG
20686: PUSH
20687: LD_INT 0
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 1
20696: NEG
20697: PUSH
20698: LD_INT 1
20700: NEG
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 1
20708: NEG
20709: PUSH
20710: LD_INT 2
20712: NEG
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 0
20720: PUSH
20721: LD_INT 2
20723: NEG
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 1
20731: PUSH
20732: LD_INT 1
20734: NEG
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 2
20742: PUSH
20743: LD_INT 0
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 2
20752: PUSH
20753: LD_INT 1
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 2
20762: PUSH
20763: LD_INT 2
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 1
20772: PUSH
20773: LD_INT 2
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 0
20782: PUSH
20783: LD_INT 2
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 1
20792: NEG
20793: PUSH
20794: LD_INT 1
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 2
20803: NEG
20804: PUSH
20805: LD_INT 0
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 2
20814: NEG
20815: PUSH
20816: LD_INT 1
20818: NEG
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 2
20826: NEG
20827: PUSH
20828: LD_INT 2
20830: NEG
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20857: LD_ADDR_VAR 0 23
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: LD_INT 0
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: LD_INT 1
20877: NEG
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: LD_INT 0
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 1
20895: PUSH
20896: LD_INT 1
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 0
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 1
20915: NEG
20916: PUSH
20917: LD_INT 0
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 1
20926: NEG
20927: PUSH
20928: LD_INT 1
20930: NEG
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 1
20938: NEG
20939: PUSH
20940: LD_INT 2
20942: NEG
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 0
20950: PUSH
20951: LD_INT 2
20953: NEG
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 1
20961: PUSH
20962: LD_INT 1
20964: NEG
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 2
20972: PUSH
20973: LD_INT 0
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 2
20982: PUSH
20983: LD_INT 1
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 2
20992: PUSH
20993: LD_INT 2
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 1
21002: PUSH
21003: LD_INT 2
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: NEG
21023: PUSH
21024: LD_INT 1
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 2
21033: NEG
21034: PUSH
21035: LD_INT 0
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 2
21044: NEG
21045: PUSH
21046: LD_INT 1
21048: NEG
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 2
21056: NEG
21057: PUSH
21058: LD_INT 2
21060: NEG
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 2
21068: NEG
21069: PUSH
21070: LD_INT 3
21072: NEG
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 1
21080: NEG
21081: PUSH
21082: LD_INT 3
21084: NEG
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 1
21092: PUSH
21093: LD_INT 2
21095: NEG
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 2
21103: PUSH
21104: LD_INT 1
21106: NEG
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21137: LD_ADDR_VAR 0 24
21141: PUSH
21142: LD_INT 0
21144: PUSH
21145: LD_INT 0
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 0
21154: PUSH
21155: LD_INT 1
21157: NEG
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 1
21165: PUSH
21166: LD_INT 0
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: LD_INT 1
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: LD_INT 1
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 1
21195: NEG
21196: PUSH
21197: LD_INT 0
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 1
21206: NEG
21207: PUSH
21208: LD_INT 1
21210: NEG
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 1
21218: NEG
21219: PUSH
21220: LD_INT 2
21222: NEG
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 0
21230: PUSH
21231: LD_INT 2
21233: NEG
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 1
21241: PUSH
21242: LD_INT 1
21244: NEG
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 2
21252: PUSH
21253: LD_INT 0
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 2
21262: PUSH
21263: LD_INT 1
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 2
21272: PUSH
21273: LD_INT 2
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 1
21282: PUSH
21283: LD_INT 2
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 0
21292: PUSH
21293: LD_INT 2
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 1
21302: NEG
21303: PUSH
21304: LD_INT 1
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 2
21313: NEG
21314: PUSH
21315: LD_INT 0
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 2
21324: NEG
21325: PUSH
21326: LD_INT 1
21328: NEG
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 2
21336: NEG
21337: PUSH
21338: LD_INT 2
21340: NEG
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 1
21348: PUSH
21349: LD_INT 2
21351: NEG
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 2
21359: PUSH
21360: LD_INT 1
21362: NEG
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 3
21370: PUSH
21371: LD_INT 1
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 3
21380: PUSH
21381: LD_INT 2
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21413: LD_ADDR_VAR 0 25
21417: PUSH
21418: LD_INT 0
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 0
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: LD_INT 0
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: LD_INT 1
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 0
21461: PUSH
21462: LD_INT 1
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 1
21471: NEG
21472: PUSH
21473: LD_INT 0
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 1
21482: NEG
21483: PUSH
21484: LD_INT 1
21486: NEG
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 1
21494: NEG
21495: PUSH
21496: LD_INT 2
21498: NEG
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 0
21506: PUSH
21507: LD_INT 2
21509: NEG
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 1
21517: PUSH
21518: LD_INT 1
21520: NEG
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 2
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: LD_INT 1
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: LD_INT 2
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 1
21558: PUSH
21559: LD_INT 2
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 0
21568: PUSH
21569: LD_INT 2
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 1
21578: NEG
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 2
21589: NEG
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 2
21600: NEG
21601: PUSH
21602: LD_INT 1
21604: NEG
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 2
21612: NEG
21613: PUSH
21614: LD_INT 2
21616: NEG
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 3
21624: PUSH
21625: LD_INT 1
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 3
21634: PUSH
21635: LD_INT 2
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: LD_INT 3
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 1
21654: PUSH
21655: LD_INT 3
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21687: LD_ADDR_VAR 0 26
21691: PUSH
21692: LD_INT 0
21694: PUSH
21695: LD_INT 0
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 0
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 1
21715: PUSH
21716: LD_INT 0
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 1
21725: PUSH
21726: LD_INT 1
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 0
21735: PUSH
21736: LD_INT 1
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: LD_INT 0
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 1
21756: NEG
21757: PUSH
21758: LD_INT 1
21760: NEG
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 1
21768: NEG
21769: PUSH
21770: LD_INT 2
21772: NEG
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 0
21780: PUSH
21781: LD_INT 2
21783: NEG
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 1
21791: PUSH
21792: LD_INT 1
21794: NEG
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 2
21802: PUSH
21803: LD_INT 0
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 2
21812: PUSH
21813: LD_INT 1
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 2
21822: PUSH
21823: LD_INT 2
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 1
21832: PUSH
21833: LD_INT 2
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 0
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 1
21852: NEG
21853: PUSH
21854: LD_INT 1
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 2
21863: NEG
21864: PUSH
21865: LD_INT 0
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 2
21874: NEG
21875: PUSH
21876: LD_INT 1
21878: NEG
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 2
21886: NEG
21887: PUSH
21888: LD_INT 2
21890: NEG
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 2
21898: PUSH
21899: LD_INT 3
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 1
21908: PUSH
21909: LD_INT 3
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 1
21918: NEG
21919: PUSH
21920: LD_INT 2
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 2
21929: NEG
21930: PUSH
21931: LD_INT 1
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21963: LD_ADDR_VAR 0 27
21967: PUSH
21968: LD_INT 0
21970: PUSH
21971: LD_INT 0
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 0
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 1
21991: PUSH
21992: LD_INT 0
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 1
22001: PUSH
22002: LD_INT 1
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 0
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 1
22021: NEG
22022: PUSH
22023: LD_INT 0
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 1
22032: NEG
22033: PUSH
22034: LD_INT 1
22036: NEG
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 1
22044: NEG
22045: PUSH
22046: LD_INT 2
22048: NEG
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 0
22056: PUSH
22057: LD_INT 2
22059: NEG
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 1
22067: PUSH
22068: LD_INT 1
22070: NEG
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 2
22078: PUSH
22079: LD_INT 0
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 2
22088: PUSH
22089: LD_INT 1
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 2
22098: PUSH
22099: LD_INT 2
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 1
22108: PUSH
22109: LD_INT 2
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 0
22118: PUSH
22119: LD_INT 2
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 1
22128: NEG
22129: PUSH
22130: LD_INT 1
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 2
22139: NEG
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 2
22150: NEG
22151: PUSH
22152: LD_INT 1
22154: NEG
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 2
22162: NEG
22163: PUSH
22164: LD_INT 2
22166: NEG
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 1
22174: NEG
22175: PUSH
22176: LD_INT 2
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 2
22185: NEG
22186: PUSH
22187: LD_INT 1
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 3
22196: NEG
22197: PUSH
22198: LD_INT 1
22200: NEG
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 3
22208: NEG
22209: PUSH
22210: LD_INT 2
22212: NEG
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22243: LD_ADDR_VAR 0 28
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: LD_INT 0
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 0
22260: PUSH
22261: LD_INT 1
22263: NEG
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 1
22281: PUSH
22282: LD_INT 1
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 0
22291: PUSH
22292: LD_INT 1
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 1
22301: NEG
22302: PUSH
22303: LD_INT 0
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 1
22312: NEG
22313: PUSH
22314: LD_INT 1
22316: NEG
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 1
22324: NEG
22325: PUSH
22326: LD_INT 2
22328: NEG
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: LD_INT 2
22339: NEG
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 1
22347: PUSH
22348: LD_INT 1
22350: NEG
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 2
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 2
22368: PUSH
22369: LD_INT 1
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 2
22378: PUSH
22379: LD_INT 2
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: LD_INT 2
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 0
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 1
22408: NEG
22409: PUSH
22410: LD_INT 1
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 2
22419: NEG
22420: PUSH
22421: LD_INT 0
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 2
22430: NEG
22431: PUSH
22432: LD_INT 1
22434: NEG
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 2
22442: NEG
22443: PUSH
22444: LD_INT 2
22446: NEG
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 2
22454: NEG
22455: PUSH
22456: LD_INT 3
22458: NEG
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 1
22466: NEG
22467: PUSH
22468: LD_INT 3
22470: NEG
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 3
22478: NEG
22479: PUSH
22480: LD_INT 1
22482: NEG
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 3
22490: NEG
22491: PUSH
22492: LD_INT 2
22494: NEG
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22525: LD_ADDR_VAR 0 29
22529: PUSH
22530: LD_INT 0
22532: PUSH
22533: LD_INT 0
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: LD_INT 1
22545: NEG
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 1
22553: PUSH
22554: LD_INT 0
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 1
22563: PUSH
22564: LD_INT 1
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 0
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 1
22583: NEG
22584: PUSH
22585: LD_INT 0
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 1
22594: NEG
22595: PUSH
22596: LD_INT 1
22598: NEG
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 1
22606: NEG
22607: PUSH
22608: LD_INT 2
22610: NEG
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 0
22618: PUSH
22619: LD_INT 2
22621: NEG
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 1
22629: PUSH
22630: LD_INT 1
22632: NEG
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 2
22640: PUSH
22641: LD_INT 0
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 2
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 1
22660: PUSH
22661: LD_INT 2
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 0
22670: PUSH
22671: LD_INT 2
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 1
22680: NEG
22681: PUSH
22682: LD_INT 1
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 2
22691: NEG
22692: PUSH
22693: LD_INT 1
22695: NEG
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 2
22703: NEG
22704: PUSH
22705: LD_INT 2
22707: NEG
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 2
22715: NEG
22716: PUSH
22717: LD_INT 3
22719: NEG
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 2
22727: PUSH
22728: LD_INT 1
22730: NEG
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 3
22738: PUSH
22739: LD_INT 1
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 1
22748: PUSH
22749: LD_INT 3
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 1
22758: NEG
22759: PUSH
22760: LD_INT 2
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 3
22769: NEG
22770: PUSH
22771: LD_INT 2
22773: NEG
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22804: LD_ADDR_VAR 0 30
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: LD_INT 0
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 0
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 1
22832: PUSH
22833: LD_INT 0
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 1
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 0
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 1
22862: NEG
22863: PUSH
22864: LD_INT 0
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 1
22873: NEG
22874: PUSH
22875: LD_INT 1
22877: NEG
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 1
22885: NEG
22886: PUSH
22887: LD_INT 2
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 0
22897: PUSH
22898: LD_INT 2
22900: NEG
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 1
22908: PUSH
22909: LD_INT 1
22911: NEG
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 2
22919: PUSH
22920: LD_INT 0
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 2
22929: PUSH
22930: LD_INT 1
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 2
22939: PUSH
22940: LD_INT 2
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 1
22949: PUSH
22950: LD_INT 2
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: NEG
22960: PUSH
22961: LD_INT 1
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 2
22970: NEG
22971: PUSH
22972: LD_INT 0
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 2
22981: NEG
22982: PUSH
22983: LD_INT 1
22985: NEG
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 1
22993: NEG
22994: PUSH
22995: LD_INT 3
22997: NEG
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 1
23005: PUSH
23006: LD_INT 2
23008: NEG
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 3
23016: PUSH
23017: LD_INT 2
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 2
23026: PUSH
23027: LD_INT 3
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 2
23036: NEG
23037: PUSH
23038: LD_INT 1
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 3
23047: NEG
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23082: LD_ADDR_VAR 0 31
23086: PUSH
23087: LD_INT 0
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 0
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 1
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 1
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 0
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 1
23140: NEG
23141: PUSH
23142: LD_INT 0
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 1
23151: NEG
23152: PUSH
23153: LD_INT 1
23155: NEG
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 1
23163: NEG
23164: PUSH
23165: LD_INT 2
23167: NEG
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 1
23175: PUSH
23176: LD_INT 1
23178: NEG
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: LD_INT 0
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 2
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 2
23206: PUSH
23207: LD_INT 2
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: LD_INT 2
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 0
23226: PUSH
23227: LD_INT 2
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 1
23236: NEG
23237: PUSH
23238: LD_INT 1
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 2
23247: NEG
23248: PUSH
23249: LD_INT 1
23251: NEG
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 2
23259: NEG
23260: PUSH
23261: LD_INT 2
23263: NEG
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 2
23271: NEG
23272: PUSH
23273: LD_INT 3
23275: NEG
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 3
23294: PUSH
23295: LD_INT 1
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 1
23304: PUSH
23305: LD_INT 3
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 1
23314: NEG
23315: PUSH
23316: LD_INT 2
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 3
23325: NEG
23326: PUSH
23327: LD_INT 2
23329: NEG
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23360: LD_ADDR_VAR 0 32
23364: PUSH
23365: LD_INT 0
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 0
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 1
23388: PUSH
23389: LD_INT 0
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 0
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 1
23418: NEG
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 1
23429: NEG
23430: PUSH
23431: LD_INT 1
23433: NEG
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 1
23441: NEG
23442: PUSH
23443: LD_INT 2
23445: NEG
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 0
23453: PUSH
23454: LD_INT 2
23456: NEG
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: LD_INT 1
23467: NEG
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: LD_INT 1
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 2
23485: PUSH
23486: LD_INT 2
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 1
23495: PUSH
23496: LD_INT 2
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 0
23505: PUSH
23506: LD_INT 2
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 1
23515: NEG
23516: PUSH
23517: LD_INT 1
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 2
23526: NEG
23527: PUSH
23528: LD_INT 0
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 2
23537: NEG
23538: PUSH
23539: LD_INT 1
23541: NEG
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 1
23549: NEG
23550: PUSH
23551: LD_INT 3
23553: NEG
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 1
23561: PUSH
23562: LD_INT 2
23564: NEG
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 3
23572: PUSH
23573: LD_INT 2
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 2
23582: PUSH
23583: LD_INT 3
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 2
23592: NEG
23593: PUSH
23594: LD_INT 1
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 3
23603: NEG
23604: PUSH
23605: LD_INT 1
23607: NEG
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23638: LD_ADDR_VAR 0 33
23642: PUSH
23643: LD_INT 0
23645: PUSH
23646: LD_INT 0
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 0
23655: PUSH
23656: LD_INT 1
23658: NEG
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 1
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 1
23676: PUSH
23677: LD_INT 1
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 0
23686: PUSH
23687: LD_INT 1
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 1
23696: NEG
23697: PUSH
23698: LD_INT 0
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 1
23707: NEG
23708: PUSH
23709: LD_INT 1
23711: NEG
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 1
23719: NEG
23720: PUSH
23721: LD_INT 2
23723: NEG
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: LD_INT 1
23734: NEG
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 2
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: LD_INT 1
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 1
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: LD_INT 2
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 1
23782: NEG
23783: PUSH
23784: LD_INT 1
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 2
23793: NEG
23794: PUSH
23795: LD_INT 0
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 2
23804: NEG
23805: PUSH
23806: LD_INT 1
23808: NEG
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 2
23816: NEG
23817: PUSH
23818: LD_INT 2
23820: NEG
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 2
23828: NEG
23829: PUSH
23830: LD_INT 3
23832: NEG
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 2
23840: PUSH
23841: LD_INT 1
23843: NEG
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 3
23851: PUSH
23852: LD_INT 1
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: LD_INT 3
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 1
23871: NEG
23872: PUSH
23873: LD_INT 2
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 3
23882: NEG
23883: PUSH
23884: LD_INT 2
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23917: LD_ADDR_VAR 0 34
23921: PUSH
23922: LD_INT 0
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 0
23934: PUSH
23935: LD_INT 1
23937: NEG
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 1
23945: PUSH
23946: LD_INT 0
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 1
23955: PUSH
23956: LD_INT 1
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 0
23965: PUSH
23966: LD_INT 1
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 1
23975: NEG
23976: PUSH
23977: LD_INT 0
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 1
23986: NEG
23987: PUSH
23988: LD_INT 1
23990: NEG
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: LD_INT 2
24002: NEG
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: LD_INT 2
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: LD_INT 1
24024: NEG
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 2
24032: PUSH
24033: LD_INT 1
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 2
24042: PUSH
24043: LD_INT 2
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 1
24062: NEG
24063: PUSH
24064: LD_INT 1
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 2
24073: NEG
24074: PUSH
24075: LD_INT 0
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 2
24084: NEG
24085: PUSH
24086: LD_INT 1
24088: NEG
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 2
24096: NEG
24097: PUSH
24098: LD_INT 2
24100: NEG
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 1
24108: NEG
24109: PUSH
24110: LD_INT 3
24112: NEG
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 1
24120: PUSH
24121: LD_INT 2
24123: NEG
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: LD_INT 2
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 2
24141: PUSH
24142: LD_INT 3
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 2
24151: NEG
24152: PUSH
24153: LD_INT 1
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 3
24162: NEG
24163: PUSH
24164: LD_INT 1
24166: NEG
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24197: LD_ADDR_VAR 0 35
24201: PUSH
24202: LD_INT 0
24204: PUSH
24205: LD_INT 0
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: LD_INT 1
24217: NEG
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 1
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 0
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: NEG
24256: PUSH
24257: LD_INT 0
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 1
24266: NEG
24267: PUSH
24268: LD_INT 1
24270: NEG
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 2
24278: PUSH
24279: LD_INT 1
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 2
24288: NEG
24289: PUSH
24290: LD_INT 1
24292: NEG
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24309: LD_ADDR_VAR 0 36
24313: PUSH
24314: LD_INT 0
24316: PUSH
24317: LD_INT 0
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 1
24337: PUSH
24338: LD_INT 0
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 1
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 1
24367: NEG
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 1
24378: NEG
24379: PUSH
24380: LD_INT 1
24382: NEG
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 1
24390: NEG
24391: PUSH
24392: LD_INT 2
24394: NEG
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 1
24402: PUSH
24403: LD_INT 2
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24421: LD_ADDR_VAR 0 37
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: LD_INT 0
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: LD_INT 1
24441: NEG
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 1
24449: PUSH
24450: LD_INT 0
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: LD_INT 1
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: LD_INT 1
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 1
24479: NEG
24480: PUSH
24481: LD_INT 0
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 1
24490: NEG
24491: PUSH
24492: LD_INT 1
24494: NEG
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: LD_INT 1
24505: NEG
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 1
24513: NEG
24514: PUSH
24515: LD_INT 1
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24533: LD_ADDR_VAR 0 38
24537: PUSH
24538: LD_INT 0
24540: PUSH
24541: LD_INT 0
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: LD_INT 1
24553: NEG
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: LD_INT 0
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: LD_INT 1
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 0
24581: PUSH
24582: LD_INT 1
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: NEG
24592: PUSH
24593: LD_INT 0
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 1
24602: NEG
24603: PUSH
24604: LD_INT 1
24606: NEG
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 2
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 2
24624: NEG
24625: PUSH
24626: LD_INT 1
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24645: LD_ADDR_VAR 0 39
24649: PUSH
24650: LD_INT 0
24652: PUSH
24653: LD_INT 0
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: LD_INT 1
24665: NEG
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 1
24673: PUSH
24674: LD_INT 0
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 0
24693: PUSH
24694: LD_INT 1
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 1
24703: NEG
24704: PUSH
24705: LD_INT 0
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 1
24714: NEG
24715: PUSH
24716: LD_INT 1
24718: NEG
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 1
24726: NEG
24727: PUSH
24728: LD_INT 2
24730: NEG
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 1
24738: PUSH
24739: LD_INT 2
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24757: LD_ADDR_VAR 0 40
24761: PUSH
24762: LD_INT 0
24764: PUSH
24765: LD_INT 0
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 0
24774: PUSH
24775: LD_INT 1
24777: NEG
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: PUSH
24786: LD_INT 0
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: LD_INT 1
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 0
24805: PUSH
24806: LD_INT 1
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 1
24815: NEG
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 1
24826: NEG
24827: PUSH
24828: LD_INT 1
24830: NEG
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: LD_INT 1
24841: NEG
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 1
24849: NEG
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24869: LD_ADDR_VAR 0 41
24873: PUSH
24874: LD_INT 0
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: LD_INT 1
24889: NEG
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: LD_INT 1
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 1
24938: NEG
24939: PUSH
24940: LD_INT 1
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: NEG
24951: PUSH
24952: LD_INT 2
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: LD_INT 1
24965: NEG
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 2
24973: PUSH
24974: LD_INT 0
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 2
24983: PUSH
24984: LD_INT 1
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 2
24993: PUSH
24994: LD_INT 2
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: LD_INT 2
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: NEG
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 2
25024: NEG
25025: PUSH
25026: LD_INT 0
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 2
25035: NEG
25036: PUSH
25037: LD_INT 1
25039: NEG
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 2
25047: NEG
25048: PUSH
25049: LD_INT 2
25051: NEG
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: NEG
25060: PUSH
25061: LD_INT 3
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 2
25071: PUSH
25072: LD_INT 1
25074: NEG
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 3
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 3
25092: PUSH
25093: LD_INT 1
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 3
25102: PUSH
25103: LD_INT 2
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 3
25112: PUSH
25113: LD_INT 3
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: LD_INT 3
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 2
25132: NEG
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 3
25143: NEG
25144: PUSH
25145: LD_INT 0
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 3
25154: NEG
25155: PUSH
25156: LD_INT 1
25158: NEG
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 3
25166: NEG
25167: PUSH
25168: LD_INT 2
25170: NEG
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 3
25178: NEG
25179: PUSH
25180: LD_INT 3
25182: NEG
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25219: LD_ADDR_VAR 0 42
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: LD_INT 1
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: NEG
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 1
25300: NEG
25301: PUSH
25302: LD_INT 2
25304: NEG
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 0
25312: PUSH
25313: LD_INT 2
25315: NEG
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 1
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 2
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 2
25344: PUSH
25345: LD_INT 2
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: LD_INT 2
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: LD_INT 2
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 1
25374: NEG
25375: PUSH
25376: LD_INT 1
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 2
25397: NEG
25398: PUSH
25399: LD_INT 2
25401: NEG
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 2
25409: NEG
25410: PUSH
25411: LD_INT 3
25413: NEG
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 1
25421: NEG
25422: PUSH
25423: LD_INT 3
25425: NEG
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 0
25433: PUSH
25434: LD_INT 3
25436: NEG
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 1
25444: PUSH
25445: LD_INT 2
25447: NEG
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 3
25455: PUSH
25456: LD_INT 2
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 3
25465: PUSH
25466: LD_INT 3
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 2
25475: PUSH
25476: LD_INT 3
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 1
25485: PUSH
25486: LD_INT 3
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: LD_INT 3
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 1
25505: NEG
25506: PUSH
25507: LD_INT 2
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 3
25516: NEG
25517: PUSH
25518: LD_INT 2
25520: NEG
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 3
25528: NEG
25529: PUSH
25530: LD_INT 3
25532: NEG
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25569: LD_ADDR_VAR 0 43
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: LD_INT 0
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: LD_INT 1
25589: NEG
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 1
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 1
25607: PUSH
25608: LD_INT 1
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 0
25617: PUSH
25618: LD_INT 1
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 1
25638: NEG
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 1
25650: NEG
25651: PUSH
25652: LD_INT 2
25654: NEG
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: LD_INT 2
25665: NEG
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 2
25684: PUSH
25685: LD_INT 0
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 2
25694: PUSH
25695: LD_INT 1
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 1
25704: PUSH
25705: LD_INT 2
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: LD_INT 2
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 1
25724: NEG
25725: PUSH
25726: LD_INT 1
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 2
25735: NEG
25736: PUSH
25737: LD_INT 0
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 2
25746: NEG
25747: PUSH
25748: LD_INT 1
25750: NEG
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 1
25758: NEG
25759: PUSH
25760: LD_INT 3
25762: NEG
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 0
25770: PUSH
25771: LD_INT 3
25773: NEG
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 1
25781: PUSH
25782: LD_INT 2
25784: NEG
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 2
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 3
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 3
25813: PUSH
25814: LD_INT 1
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 1
25823: PUSH
25824: LD_INT 3
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 0
25833: PUSH
25834: LD_INT 3
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 1
25843: NEG
25844: PUSH
25845: LD_INT 2
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 2
25854: NEG
25855: PUSH
25856: LD_INT 1
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 3
25865: NEG
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 3
25876: NEG
25877: PUSH
25878: LD_INT 1
25880: NEG
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25917: LD_ADDR_VAR 0 44
25921: PUSH
25922: LD_INT 0
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: LD_INT 1
25937: NEG
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: LD_INT 0
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 1
25955: PUSH
25956: LD_INT 1
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: LD_INT 1
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: NEG
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: NEG
25999: PUSH
26000: LD_INT 2
26002: NEG
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: LD_INT 1
26013: NEG
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: LD_INT 0
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: LD_INT 1
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: LD_INT 2
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: LD_INT 1
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 2
26072: NEG
26073: PUSH
26074: LD_INT 0
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 2
26083: NEG
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 2
26095: NEG
26096: PUSH
26097: LD_INT 2
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 2
26107: NEG
26108: PUSH
26109: LD_INT 3
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 2
26119: PUSH
26120: LD_INT 1
26122: NEG
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 3
26130: PUSH
26131: LD_INT 0
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 3
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 3
26150: PUSH
26151: LD_INT 2
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 3
26160: PUSH
26161: LD_INT 3
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 2
26170: PUSH
26171: LD_INT 3
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 2
26180: NEG
26181: PUSH
26182: LD_INT 1
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 3
26191: NEG
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 3
26202: NEG
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 3
26214: NEG
26215: PUSH
26216: LD_INT 2
26218: NEG
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 3
26226: NEG
26227: PUSH
26228: LD_INT 3
26230: NEG
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26267: LD_ADDR_VAR 0 45
26271: PUSH
26272: LD_INT 0
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 1
26336: NEG
26337: PUSH
26338: LD_INT 1
26340: NEG
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 1
26348: NEG
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: LD_INT 2
26363: NEG
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 2
26382: PUSH
26383: LD_INT 1
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 2
26392: PUSH
26393: LD_INT 2
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 1
26402: PUSH
26403: LD_INT 2
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: LD_INT 2
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 2
26433: NEG
26434: PUSH
26435: LD_INT 1
26437: NEG
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 2
26445: NEG
26446: PUSH
26447: LD_INT 2
26449: NEG
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 2
26457: NEG
26458: PUSH
26459: LD_INT 3
26461: NEG
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 1
26469: NEG
26470: PUSH
26471: LD_INT 3
26473: NEG
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 0
26481: PUSH
26482: LD_INT 3
26484: NEG
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 1
26492: PUSH
26493: LD_INT 2
26495: NEG
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 3
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 3
26513: PUSH
26514: LD_INT 3
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 2
26523: PUSH
26524: LD_INT 3
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: LD_INT 3
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: LD_INT 3
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PUSH
26555: LD_INT 2
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 3
26564: NEG
26565: PUSH
26566: LD_INT 2
26568: NEG
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 3
26576: NEG
26577: PUSH
26578: LD_INT 3
26580: NEG
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26617: LD_ADDR_VAR 0 46
26621: PUSH
26622: LD_INT 0
26624: PUSH
26625: LD_INT 0
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 1
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 1
26655: PUSH
26656: LD_INT 1
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: LD_INT 1
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 1
26675: NEG
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 1
26686: NEG
26687: PUSH
26688: LD_INT 1
26690: NEG
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 1
26698: NEG
26699: PUSH
26700: LD_INT 2
26702: NEG
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: LD_INT 2
26713: NEG
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: LD_INT 1
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: LD_INT 1
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: LD_INT 2
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 0
26762: PUSH
26763: LD_INT 2
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 1
26772: NEG
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 2
26783: NEG
26784: PUSH
26785: LD_INT 0
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 2
26794: NEG
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 1
26806: NEG
26807: PUSH
26808: LD_INT 3
26810: NEG
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: LD_INT 3
26821: NEG
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 1
26829: PUSH
26830: LD_INT 2
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 2
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 3
26851: PUSH
26852: LD_INT 0
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 3
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: LD_INT 3
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: LD_INT 3
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: NEG
26892: PUSH
26893: LD_INT 2
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 2
26902: NEG
26903: PUSH
26904: LD_INT 1
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 3
26913: NEG
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 3
26924: NEG
26925: PUSH
26926: LD_INT 1
26928: NEG
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26965: LD_ADDR_VAR 0 47
26969: PUSH
26970: LD_INT 0
26972: PUSH
26973: LD_INT 0
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: LD_INT 1
26985: NEG
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: LD_INT 0
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 1
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 1
27023: NEG
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: NEG
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 1
27046: NEG
27047: PUSH
27048: LD_INT 2
27050: NEG
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: LD_INT 2
27061: NEG
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: PUSH
27070: LD_INT 1
27072: NEG
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 2
27080: NEG
27081: PUSH
27082: LD_INT 1
27084: NEG
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 2
27092: NEG
27093: PUSH
27094: LD_INT 2
27096: NEG
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27116: LD_ADDR_VAR 0 48
27120: PUSH
27121: LD_INT 0
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 0
27133: PUSH
27134: LD_INT 1
27136: NEG
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 1
27144: PUSH
27145: LD_INT 0
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 1
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: LD_INT 1
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: LD_INT 0
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: LD_INT 1
27189: NEG
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 1
27197: NEG
27198: PUSH
27199: LD_INT 2
27201: NEG
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: LD_INT 2
27212: NEG
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 1
27220: PUSH
27221: LD_INT 1
27223: NEG
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 2
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 2
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27263: LD_ADDR_VAR 0 49
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: LD_INT 1
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 0
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 1
27321: NEG
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 1
27332: NEG
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 1
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 2
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 2
27365: PUSH
27366: LD_INT 1
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: LD_INT 2
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 1
27385: PUSH
27386: LD_INT 2
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27407: LD_ADDR_VAR 0 50
27411: PUSH
27412: LD_INT 0
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 0
27424: PUSH
27425: LD_INT 1
27427: NEG
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 1
27435: PUSH
27436: LD_INT 0
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: LD_INT 1
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 0
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: NEG
27477: PUSH
27478: LD_INT 1
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 2
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 2
27498: PUSH
27499: LD_INT 2
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: PUSH
27509: LD_INT 2
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: LD_INT 2
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 1
27528: NEG
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27551: LD_ADDR_VAR 0 51
27555: PUSH
27556: LD_INT 0
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: LD_INT 1
27571: NEG
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 1
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: LD_INT 1
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: LD_INT 0
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: LD_INT 2
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: LD_INT 2
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: NEG
27653: PUSH
27654: LD_INT 1
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 2
27663: NEG
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 2
27674: NEG
27675: PUSH
27676: LD_INT 1
27678: NEG
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27698: LD_ADDR_VAR 0 52
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 0
27715: PUSH
27716: LD_INT 1
27718: NEG
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 1
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 1
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 0
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 1
27756: NEG
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PUSH
27769: LD_INT 1
27771: NEG
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: PUSH
27781: LD_INT 2
27783: NEG
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: LD_INT 1
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 2
27802: NEG
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 2
27813: NEG
27814: PUSH
27815: LD_INT 1
27817: NEG
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 2
27825: NEG
27826: PUSH
27827: LD_INT 2
27829: NEG
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27849: LD_ADDR_VAR 0 53
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: LD_INT 0
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: LD_INT 1
27869: NEG
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 1
27877: PUSH
27878: LD_INT 0
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: PUSH
27888: LD_INT 1
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 0
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 1
27907: NEG
27908: PUSH
27909: LD_INT 0
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 1
27918: NEG
27919: PUSH
27920: LD_INT 1
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 1
27930: NEG
27931: PUSH
27932: LD_INT 2
27934: NEG
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 0
27942: PUSH
27943: LD_INT 2
27945: NEG
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: LD_INT 1
27956: NEG
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 2
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 2
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 2
27984: PUSH
27985: LD_INT 2
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 1
27994: PUSH
27995: LD_INT 2
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 0
28004: PUSH
28005: LD_INT 2
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 1
28014: NEG
28015: PUSH
28016: LD_INT 1
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 2
28025: NEG
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 2
28036: NEG
28037: PUSH
28038: LD_INT 1
28040: NEG
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 2
28048: NEG
28049: PUSH
28050: LD_INT 2
28052: NEG
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28079: LD_ADDR_VAR 0 54
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: LD_INT 1
28099: NEG
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 1
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: LD_INT 1
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 1
28137: NEG
28138: PUSH
28139: LD_INT 0
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 1
28148: NEG
28149: PUSH
28150: LD_INT 1
28152: NEG
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 1
28160: NEG
28161: PUSH
28162: LD_INT 2
28164: NEG
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 0
28172: PUSH
28173: LD_INT 2
28175: NEG
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: LD_INT 1
28186: NEG
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 2
28194: PUSH
28195: LD_INT 0
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 2
28204: PUSH
28205: LD_INT 1
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 2
28214: PUSH
28215: LD_INT 2
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: LD_INT 2
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 0
28234: PUSH
28235: LD_INT 2
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 1
28244: NEG
28245: PUSH
28246: LD_INT 1
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 2
28255: NEG
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 2
28266: NEG
28267: PUSH
28268: LD_INT 1
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 2
28278: NEG
28279: PUSH
28280: LD_INT 2
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28309: LD_ADDR_VAR 0 55
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: LD_INT 0
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: LD_INT 1
28329: NEG
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 1
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 1
28367: NEG
28368: PUSH
28369: LD_INT 0
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: LD_INT 1
28382: NEG
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 1
28390: NEG
28391: PUSH
28392: LD_INT 2
28394: NEG
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: LD_INT 2
28405: NEG
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 1
28413: PUSH
28414: LD_INT 1
28416: NEG
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 2
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 2
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 2
28444: PUSH
28445: LD_INT 2
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: LD_INT 2
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: LD_INT 2
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: LD_INT 1
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 2
28485: NEG
28486: PUSH
28487: LD_INT 0
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 2
28496: NEG
28497: PUSH
28498: LD_INT 1
28500: NEG
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 2
28508: NEG
28509: PUSH
28510: LD_INT 2
28512: NEG
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28539: LD_ADDR_VAR 0 56
28543: PUSH
28544: LD_INT 0
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 0
28556: PUSH
28557: LD_INT 1
28559: NEG
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 1
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 1
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 0
28587: PUSH
28588: LD_INT 1
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 1
28597: NEG
28598: PUSH
28599: LD_INT 0
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: NEG
28609: PUSH
28610: LD_INT 1
28612: NEG
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 1
28620: NEG
28621: PUSH
28622: LD_INT 2
28624: NEG
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 0
28632: PUSH
28633: LD_INT 2
28635: NEG
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 2
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 2
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 2
28674: PUSH
28675: LD_INT 2
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 1
28684: PUSH
28685: LD_INT 2
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: LD_INT 2
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: LD_INT 1
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 2
28715: NEG
28716: PUSH
28717: LD_INT 0
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 2
28726: NEG
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 2
28738: NEG
28739: PUSH
28740: LD_INT 2
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28769: LD_ADDR_VAR 0 57
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: LD_INT 0
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: LD_INT 1
28789: NEG
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 1
28797: PUSH
28798: LD_INT 0
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: LD_INT 1
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: LD_INT 1
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 1
28850: NEG
28851: PUSH
28852: LD_INT 2
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: LD_INT 2
28865: NEG
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 1
28873: PUSH
28874: LD_INT 1
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 2
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 2
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 2
28904: PUSH
28905: LD_INT 2
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 1
28914: PUSH
28915: LD_INT 2
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: LD_INT 2
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: LD_INT 1
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 2
28945: NEG
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 2
28956: NEG
28957: PUSH
28958: LD_INT 1
28960: NEG
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 2
28968: NEG
28969: PUSH
28970: LD_INT 2
28972: NEG
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28999: LD_ADDR_VAR 0 58
29003: PUSH
29004: LD_INT 0
29006: PUSH
29007: LD_INT 0
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: LD_INT 1
29019: NEG
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 1
29027: PUSH
29028: LD_INT 0
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 1
29037: PUSH
29038: LD_INT 1
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 0
29047: PUSH
29048: LD_INT 1
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 1
29057: NEG
29058: PUSH
29059: LD_INT 0
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 1
29068: NEG
29069: PUSH
29070: LD_INT 1
29072: NEG
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 1
29080: NEG
29081: PUSH
29082: LD_INT 2
29084: NEG
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 0
29092: PUSH
29093: LD_INT 2
29095: NEG
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: LD_INT 1
29106: NEG
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 2
29114: PUSH
29115: LD_INT 0
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 2
29124: PUSH
29125: LD_INT 1
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 2
29134: PUSH
29135: LD_INT 2
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: LD_INT 2
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: LD_INT 2
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: LD_INT 1
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 2
29175: NEG
29176: PUSH
29177: LD_INT 0
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 2
29186: NEG
29187: PUSH
29188: LD_INT 1
29190: NEG
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 2
29198: NEG
29199: PUSH
29200: LD_INT 2
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29229: LD_ADDR_VAR 0 59
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: LD_INT 0
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 0
29246: PUSH
29247: LD_INT 1
29249: NEG
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 1
29257: PUSH
29258: LD_INT 0
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 1
29267: PUSH
29268: LD_INT 1
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 0
29277: PUSH
29278: LD_INT 1
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 1
29287: NEG
29288: PUSH
29289: LD_INT 0
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: LD_INT 1
29302: NEG
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29317: LD_ADDR_VAR 0 60
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 0
29334: PUSH
29335: LD_INT 1
29337: NEG
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 0
29365: PUSH
29366: LD_INT 1
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 1
29375: NEG
29376: PUSH
29377: LD_INT 0
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 1
29386: NEG
29387: PUSH
29388: LD_INT 1
29390: NEG
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29405: LD_ADDR_VAR 0 61
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 1
29443: PUSH
29444: LD_INT 1
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 0
29453: PUSH
29454: LD_INT 1
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: LD_INT 0
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: LD_INT 1
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29493: LD_ADDR_VAR 0 62
29497: PUSH
29498: LD_INT 0
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 0
29510: PUSH
29511: LD_INT 1
29513: NEG
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: LD_INT 0
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 1
29531: PUSH
29532: LD_INT 1
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: LD_INT 1
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 1
29551: NEG
29552: PUSH
29553: LD_INT 0
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29581: LD_ADDR_VAR 0 63
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: LD_INT 0
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 0
29598: PUSH
29599: LD_INT 1
29601: NEG
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 1
29609: PUSH
29610: LD_INT 0
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: LD_INT 1
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 0
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 1
29639: NEG
29640: PUSH
29641: LD_INT 0
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 1
29650: NEG
29651: PUSH
29652: LD_INT 1
29654: NEG
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29669: LD_ADDR_VAR 0 64
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: LD_INT 1
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 1
29738: NEG
29739: PUSH
29740: LD_INT 1
29742: NEG
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: ST_TO_ADDR
// end ; 1 :
29757: GO 35654
29759: LD_INT 1
29761: DOUBLE
29762: EQUAL
29763: IFTRUE 29767
29765: GO 32390
29767: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29768: LD_ADDR_VAR 0 11
29772: PUSH
29773: LD_INT 1
29775: NEG
29776: PUSH
29777: LD_INT 3
29779: NEG
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: LD_INT 3
29790: NEG
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 1
29798: PUSH
29799: LD_INT 2
29801: NEG
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: LIST
29811: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29812: LD_ADDR_VAR 0 12
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 3
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 3
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: LIST
29852: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29853: LD_ADDR_VAR 0 13
29857: PUSH
29858: LD_INT 3
29860: PUSH
29861: LD_INT 2
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 3
29870: PUSH
29871: LD_INT 3
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 2
29880: PUSH
29881: LD_INT 3
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: LIST
29892: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29893: LD_ADDR_VAR 0 14
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: LD_INT 3
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: LD_INT 3
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 1
29920: NEG
29921: PUSH
29922: LD_INT 2
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: LIST
29933: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29934: LD_ADDR_VAR 0 15
29938: PUSH
29939: LD_INT 2
29941: NEG
29942: PUSH
29943: LD_INT 1
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 3
29952: NEG
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 3
29963: NEG
29964: PUSH
29965: LD_INT 1
29967: NEG
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: LIST
29977: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29978: LD_ADDR_VAR 0 16
29982: PUSH
29983: LD_INT 2
29985: NEG
29986: PUSH
29987: LD_INT 3
29989: NEG
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 3
29997: NEG
29998: PUSH
29999: LD_INT 2
30001: NEG
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 3
30009: NEG
30010: PUSH
30011: LD_INT 3
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: LIST
30023: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30024: LD_ADDR_VAR 0 17
30028: PUSH
30029: LD_INT 1
30031: NEG
30032: PUSH
30033: LD_INT 3
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 0
30043: PUSH
30044: LD_INT 3
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 1
30054: PUSH
30055: LD_INT 2
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: LIST
30067: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30068: LD_ADDR_VAR 0 18
30072: PUSH
30073: LD_INT 2
30075: PUSH
30076: LD_INT 1
30078: NEG
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 3
30086: PUSH
30087: LD_INT 0
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 3
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: LIST
30108: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30109: LD_ADDR_VAR 0 19
30113: PUSH
30114: LD_INT 3
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 3
30126: PUSH
30127: LD_INT 3
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 2
30136: PUSH
30137: LD_INT 3
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: LIST
30148: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30149: LD_ADDR_VAR 0 20
30153: PUSH
30154: LD_INT 1
30156: PUSH
30157: LD_INT 3
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 0
30166: PUSH
30167: LD_INT 3
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 1
30176: NEG
30177: PUSH
30178: LD_INT 2
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30190: LD_ADDR_VAR 0 21
30194: PUSH
30195: LD_INT 2
30197: NEG
30198: PUSH
30199: LD_INT 1
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 3
30208: NEG
30209: PUSH
30210: LD_INT 0
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 3
30219: NEG
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: LIST
30233: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30234: LD_ADDR_VAR 0 22
30238: PUSH
30239: LD_INT 2
30241: NEG
30242: PUSH
30243: LD_INT 3
30245: NEG
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 3
30253: NEG
30254: PUSH
30255: LD_INT 2
30257: NEG
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 3
30265: NEG
30266: PUSH
30267: LD_INT 3
30269: NEG
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: LIST
30279: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30280: LD_ADDR_VAR 0 23
30284: PUSH
30285: LD_INT 0
30287: PUSH
30288: LD_INT 3
30290: NEG
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 1
30298: NEG
30299: PUSH
30300: LD_INT 4
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 1
30310: PUSH
30311: LD_INT 3
30313: NEG
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: LIST
30323: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30324: LD_ADDR_VAR 0 24
30328: PUSH
30329: LD_INT 3
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 3
30341: PUSH
30342: LD_INT 1
30344: NEG
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 4
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30365: LD_ADDR_VAR 0 25
30369: PUSH
30370: LD_INT 3
30372: PUSH
30373: LD_INT 3
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 4
30382: PUSH
30383: LD_INT 3
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 3
30392: PUSH
30393: LD_INT 4
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: LIST
30404: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30405: LD_ADDR_VAR 0 26
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: LD_INT 3
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 1
30422: PUSH
30423: LD_INT 4
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: LD_INT 3
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: LIST
30445: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30446: LD_ADDR_VAR 0 27
30450: PUSH
30451: LD_INT 3
30453: NEG
30454: PUSH
30455: LD_INT 0
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 3
30464: NEG
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 4
30475: NEG
30476: PUSH
30477: LD_INT 1
30479: NEG
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: LIST
30489: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30490: LD_ADDR_VAR 0 28
30494: PUSH
30495: LD_INT 3
30497: NEG
30498: PUSH
30499: LD_INT 3
30501: NEG
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 3
30509: NEG
30510: PUSH
30511: LD_INT 4
30513: NEG
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 4
30521: NEG
30522: PUSH
30523: LD_INT 3
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: LIST
30535: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30536: LD_ADDR_VAR 0 29
30540: PUSH
30541: LD_INT 1
30543: NEG
30544: PUSH
30545: LD_INT 3
30547: NEG
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: LD_INT 3
30558: NEG
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 1
30566: PUSH
30567: LD_INT 2
30569: NEG
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 1
30577: NEG
30578: PUSH
30579: LD_INT 4
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 0
30589: PUSH
30590: LD_INT 4
30592: NEG
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 1
30600: PUSH
30601: LD_INT 3
30603: NEG
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 1
30611: NEG
30612: PUSH
30613: LD_INT 5
30615: NEG
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 0
30623: PUSH
30624: LD_INT 5
30626: NEG
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 1
30634: PUSH
30635: LD_INT 4
30637: NEG
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 1
30645: NEG
30646: PUSH
30647: LD_INT 6
30649: NEG
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 0
30657: PUSH
30658: LD_INT 6
30660: NEG
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 1
30668: PUSH
30669: LD_INT 5
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30691: LD_ADDR_VAR 0 30
30695: PUSH
30696: LD_INT 2
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 3
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 3
30719: PUSH
30720: LD_INT 1
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 3
30729: PUSH
30730: LD_INT 1
30732: NEG
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 4
30740: PUSH
30741: LD_INT 0
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 4
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 4
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 5
30771: PUSH
30772: LD_INT 0
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 5
30781: PUSH
30782: LD_INT 1
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 5
30791: PUSH
30792: LD_INT 1
30794: NEG
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 6
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 6
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30834: LD_ADDR_VAR 0 31
30838: PUSH
30839: LD_INT 3
30841: PUSH
30842: LD_INT 2
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 3
30851: PUSH
30852: LD_INT 3
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 2
30861: PUSH
30862: LD_INT 3
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 4
30871: PUSH
30872: LD_INT 3
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 4
30881: PUSH
30882: LD_INT 4
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 3
30891: PUSH
30892: LD_INT 4
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 5
30901: PUSH
30902: LD_INT 4
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 5
30911: PUSH
30912: LD_INT 5
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 4
30921: PUSH
30922: LD_INT 5
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 6
30931: PUSH
30932: LD_INT 5
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 6
30941: PUSH
30942: LD_INT 6
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 5
30951: PUSH
30952: LD_INT 6
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30973: LD_ADDR_VAR 0 32
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: LD_INT 3
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 0
30990: PUSH
30991: LD_INT 3
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 1
31000: NEG
31001: PUSH
31002: LD_INT 2
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 1
31011: PUSH
31012: LD_INT 4
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 0
31021: PUSH
31022: LD_INT 4
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 1
31031: NEG
31032: PUSH
31033: LD_INT 3
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: LD_INT 5
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: LD_INT 5
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: LD_INT 4
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: LD_INT 6
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: LD_INT 6
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 1
31093: NEG
31094: PUSH
31095: LD_INT 5
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31116: LD_ADDR_VAR 0 33
31120: PUSH
31121: LD_INT 2
31123: NEG
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 3
31134: NEG
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 3
31145: NEG
31146: PUSH
31147: LD_INT 1
31149: NEG
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 3
31157: NEG
31158: PUSH
31159: LD_INT 1
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 4
31168: NEG
31169: PUSH
31170: LD_INT 0
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 4
31179: NEG
31180: PUSH
31181: LD_INT 1
31183: NEG
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 4
31191: NEG
31192: PUSH
31193: LD_INT 1
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 5
31202: NEG
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 5
31213: NEG
31214: PUSH
31215: LD_INT 1
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 5
31225: NEG
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 6
31236: NEG
31237: PUSH
31238: LD_INT 0
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 6
31247: NEG
31248: PUSH
31249: LD_INT 1
31251: NEG
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31271: LD_ADDR_VAR 0 34
31275: PUSH
31276: LD_INT 2
31278: NEG
31279: PUSH
31280: LD_INT 3
31282: NEG
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 3
31290: NEG
31291: PUSH
31292: LD_INT 2
31294: NEG
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 3
31302: NEG
31303: PUSH
31304: LD_INT 3
31306: NEG
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 3
31314: NEG
31315: PUSH
31316: LD_INT 4
31318: NEG
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 4
31326: NEG
31327: PUSH
31328: LD_INT 3
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 4
31338: NEG
31339: PUSH
31340: LD_INT 4
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 4
31350: NEG
31351: PUSH
31352: LD_INT 5
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 5
31362: NEG
31363: PUSH
31364: LD_INT 4
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 5
31374: NEG
31375: PUSH
31376: LD_INT 5
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 5
31386: NEG
31387: PUSH
31388: LD_INT 6
31390: NEG
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 6
31398: NEG
31399: PUSH
31400: LD_INT 5
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 6
31410: NEG
31411: PUSH
31412: LD_INT 6
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31434: LD_ADDR_VAR 0 41
31438: PUSH
31439: LD_INT 0
31441: PUSH
31442: LD_INT 2
31444: NEG
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: LD_INT 3
31456: NEG
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: LD_INT 2
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31478: LD_ADDR_VAR 0 42
31482: PUSH
31483: LD_INT 2
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: LD_INT 1
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 3
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31519: LD_ADDR_VAR 0 43
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: LD_INT 2
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 3
31536: PUSH
31537: LD_INT 2
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 2
31546: PUSH
31547: LD_INT 3
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31559: LD_ADDR_VAR 0 44
31563: PUSH
31564: LD_INT 0
31566: PUSH
31567: LD_INT 2
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 1
31576: PUSH
31577: LD_INT 3
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: LD_INT 2
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31600: LD_ADDR_VAR 0 45
31604: PUSH
31605: LD_INT 2
31607: NEG
31608: PUSH
31609: LD_INT 0
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 2
31618: NEG
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 3
31629: NEG
31630: PUSH
31631: LD_INT 1
31633: NEG
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: LIST
31643: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31644: LD_ADDR_VAR 0 46
31648: PUSH
31649: LD_INT 2
31651: NEG
31652: PUSH
31653: LD_INT 2
31655: NEG
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: LD_INT 3
31667: NEG
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 3
31675: NEG
31676: PUSH
31677: LD_INT 2
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: LIST
31689: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31690: LD_ADDR_VAR 0 47
31694: PUSH
31695: LD_INT 2
31697: NEG
31698: PUSH
31699: LD_INT 3
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: NEG
31710: PUSH
31711: LD_INT 3
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31723: LD_ADDR_VAR 0 48
31727: PUSH
31728: LD_INT 1
31730: PUSH
31731: LD_INT 2
31733: NEG
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: LD_INT 1
31744: NEG
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31754: LD_ADDR_VAR 0 49
31758: PUSH
31759: LD_INT 3
31761: PUSH
31762: LD_INT 1
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 3
31771: PUSH
31772: LD_INT 2
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31783: LD_ADDR_VAR 0 50
31787: PUSH
31788: LD_INT 2
31790: PUSH
31791: LD_INT 3
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: LD_INT 3
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31812: LD_ADDR_VAR 0 51
31816: PUSH
31817: LD_INT 1
31819: NEG
31820: PUSH
31821: LD_INT 2
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 2
31830: NEG
31831: PUSH
31832: LD_INT 1
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31843: LD_ADDR_VAR 0 52
31847: PUSH
31848: LD_INT 3
31850: NEG
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 3
31862: NEG
31863: PUSH
31864: LD_INT 2
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31876: LD_ADDR_VAR 0 53
31880: PUSH
31881: LD_INT 1
31883: NEG
31884: PUSH
31885: LD_INT 3
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 0
31895: PUSH
31896: LD_INT 3
31898: NEG
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 1
31906: PUSH
31907: LD_INT 2
31909: NEG
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: LIST
31919: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31920: LD_ADDR_VAR 0 54
31924: PUSH
31925: LD_INT 2
31927: PUSH
31928: LD_INT 1
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 3
31938: PUSH
31939: LD_INT 0
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 3
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: LIST
31960: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31961: LD_ADDR_VAR 0 55
31965: PUSH
31966: LD_INT 3
31968: PUSH
31969: LD_INT 2
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 3
31978: PUSH
31979: LD_INT 3
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: LIST
32000: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32001: LD_ADDR_VAR 0 56
32005: PUSH
32006: LD_INT 1
32008: PUSH
32009: LD_INT 3
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: LD_INT 3
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PUSH
32030: LD_INT 2
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: LIST
32041: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32042: LD_ADDR_VAR 0 57
32046: PUSH
32047: LD_INT 2
32049: NEG
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 3
32060: NEG
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 3
32071: NEG
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: LIST
32085: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32086: LD_ADDR_VAR 0 58
32090: PUSH
32091: LD_INT 2
32093: NEG
32094: PUSH
32095: LD_INT 3
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 3
32105: NEG
32106: PUSH
32107: LD_INT 2
32109: NEG
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 3
32117: NEG
32118: PUSH
32119: LD_INT 3
32121: NEG
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: LIST
32131: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32132: LD_ADDR_VAR 0 59
32136: PUSH
32137: LD_INT 1
32139: NEG
32140: PUSH
32141: LD_INT 2
32143: NEG
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 0
32151: PUSH
32152: LD_INT 2
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 1
32162: PUSH
32163: LD_INT 1
32165: NEG
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: LIST
32175: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32176: LD_ADDR_VAR 0 60
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: LD_INT 1
32186: NEG
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 2
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 2
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: LIST
32216: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32217: LD_ADDR_VAR 0 61
32221: PUSH
32222: LD_INT 2
32224: PUSH
32225: LD_INT 1
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: LD_INT 2
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 1
32244: PUSH
32245: LD_INT 2
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: LIST
32256: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32257: LD_ADDR_VAR 0 62
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: LD_INT 2
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 1
32284: NEG
32285: PUSH
32286: LD_INT 1
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: LIST
32297: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32298: LD_ADDR_VAR 0 63
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: LD_INT 1
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 2
32316: NEG
32317: PUSH
32318: LD_INT 0
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: NEG
32328: PUSH
32329: LD_INT 1
32331: NEG
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: LIST
32341: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32342: LD_ADDR_VAR 0 64
32346: PUSH
32347: LD_INT 1
32349: NEG
32350: PUSH
32351: LD_INT 2
32353: NEG
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 2
32361: NEG
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 2
32373: NEG
32374: PUSH
32375: LD_INT 2
32377: NEG
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: LIST
32387: ST_TO_ADDR
// end ; 2 :
32388: GO 35654
32390: LD_INT 2
32392: DOUBLE
32393: EQUAL
32394: IFTRUE 32398
32396: GO 35653
32398: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32399: LD_ADDR_VAR 0 29
32403: PUSH
32404: LD_INT 4
32406: PUSH
32407: LD_INT 0
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 4
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 5
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 5
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 4
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 3
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 3
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 3
32478: PUSH
32479: LD_INT 2
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 5
32489: PUSH
32490: LD_INT 2
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 3
32499: PUSH
32500: LD_INT 3
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 3
32509: PUSH
32510: LD_INT 2
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 4
32519: PUSH
32520: LD_INT 3
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 4
32529: PUSH
32530: LD_INT 4
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 3
32539: PUSH
32540: LD_INT 4
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 2
32549: PUSH
32550: LD_INT 3
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 2
32559: PUSH
32560: LD_INT 2
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 4
32569: PUSH
32570: LD_INT 2
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 2
32579: PUSH
32580: LD_INT 4
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 0
32589: PUSH
32590: LD_INT 4
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 3
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: LD_INT 4
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: LD_INT 5
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: LD_INT 5
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: LD_INT 4
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: LD_INT 3
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 2
32661: PUSH
32662: LD_INT 5
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: LD_INT 3
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 3
32682: NEG
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 3
32693: NEG
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 2
32705: NEG
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 2
32716: NEG
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 3
32727: NEG
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 4
32738: NEG
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 4
32749: NEG
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 4
32761: NEG
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 4
32784: NEG
32785: PUSH
32786: LD_INT 4
32788: NEG
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 4
32796: NEG
32797: PUSH
32798: LD_INT 5
32800: NEG
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 3
32808: NEG
32809: PUSH
32810: LD_INT 4
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 3
32820: NEG
32821: PUSH
32822: LD_INT 3
32824: NEG
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 4
32832: NEG
32833: PUSH
32834: LD_INT 3
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 5
32844: NEG
32845: PUSH
32846: LD_INT 4
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 5
32856: NEG
32857: PUSH
32858: LD_INT 5
32860: NEG
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 3
32868: NEG
32869: PUSH
32870: LD_INT 5
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 5
32880: NEG
32881: PUSH
32882: LD_INT 3
32884: NEG
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32937: LD_ADDR_VAR 0 30
32941: PUSH
32942: LD_INT 4
32944: PUSH
32945: LD_INT 4
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 4
32954: PUSH
32955: LD_INT 3
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 5
32964: PUSH
32965: LD_INT 4
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 5
32974: PUSH
32975: LD_INT 5
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 4
32984: PUSH
32985: LD_INT 5
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 3
32994: PUSH
32995: LD_INT 4
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 3
33004: PUSH
33005: LD_INT 3
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 5
33014: PUSH
33015: LD_INT 3
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 3
33024: PUSH
33025: LD_INT 5
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 0
33034: PUSH
33035: LD_INT 3
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: LD_INT 2
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: LD_INT 3
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 1
33064: PUSH
33065: LD_INT 4
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 0
33074: PUSH
33075: LD_INT 4
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 1
33084: NEG
33085: PUSH
33086: LD_INT 3
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: PUSH
33097: LD_INT 2
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 2
33106: PUSH
33107: LD_INT 4
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 2
33116: NEG
33117: PUSH
33118: LD_INT 2
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 4
33127: NEG
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 4
33138: NEG
33139: PUSH
33140: LD_INT 1
33142: NEG
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 3
33150: NEG
33151: PUSH
33152: LD_INT 0
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 3
33161: NEG
33162: PUSH
33163: LD_INT 1
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 4
33172: NEG
33173: PUSH
33174: LD_INT 1
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 5
33183: NEG
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 5
33194: NEG
33195: PUSH
33196: LD_INT 1
33198: NEG
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 5
33206: NEG
33207: PUSH
33208: LD_INT 2
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 3
33218: NEG
33219: PUSH
33220: LD_INT 2
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 3
33229: NEG
33230: PUSH
33231: LD_INT 3
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 3
33241: NEG
33242: PUSH
33243: LD_INT 4
33245: NEG
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 2
33253: NEG
33254: PUSH
33255: LD_INT 3
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 2
33265: NEG
33266: PUSH
33267: LD_INT 2
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 3
33277: NEG
33278: PUSH
33279: LD_INT 2
33281: NEG
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 4
33289: NEG
33290: PUSH
33291: LD_INT 3
33293: NEG
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 4
33301: NEG
33302: PUSH
33303: LD_INT 4
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 2
33313: NEG
33314: PUSH
33315: LD_INT 4
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 4
33325: NEG
33326: PUSH
33327: LD_INT 2
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: LD_INT 4
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 0
33348: PUSH
33349: LD_INT 5
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 1
33359: PUSH
33360: LD_INT 4
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 1
33370: PUSH
33371: LD_INT 3
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 0
33381: PUSH
33382: LD_INT 3
33384: NEG
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 1
33392: NEG
33393: PUSH
33394: LD_INT 4
33396: NEG
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 1
33404: NEG
33405: PUSH
33406: LD_INT 5
33408: NEG
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 2
33416: PUSH
33417: LD_INT 3
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 2
33427: NEG
33428: PUSH
33429: LD_INT 5
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33484: LD_ADDR_VAR 0 31
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: LD_INT 4
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: LD_INT 3
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 1
33511: PUSH
33512: LD_INT 4
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 1
33521: PUSH
33522: LD_INT 5
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 0
33531: PUSH
33532: LD_INT 5
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 1
33541: NEG
33542: PUSH
33543: LD_INT 4
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 1
33552: NEG
33553: PUSH
33554: LD_INT 3
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 2
33563: PUSH
33564: LD_INT 5
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 2
33573: NEG
33574: PUSH
33575: LD_INT 3
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 3
33584: NEG
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 3
33595: NEG
33596: PUSH
33597: LD_INT 1
33599: NEG
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 2
33607: NEG
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 2
33618: NEG
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 3
33629: NEG
33630: PUSH
33631: LD_INT 1
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 4
33640: NEG
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 4
33651: NEG
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 4
33663: NEG
33664: PUSH
33665: LD_INT 2
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 2
33675: NEG
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 4
33686: NEG
33687: PUSH
33688: LD_INT 4
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 4
33698: NEG
33699: PUSH
33700: LD_INT 5
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 3
33710: NEG
33711: PUSH
33712: LD_INT 4
33714: NEG
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 3
33722: NEG
33723: PUSH
33724: LD_INT 3
33726: NEG
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 4
33734: NEG
33735: PUSH
33736: LD_INT 3
33738: NEG
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 5
33746: NEG
33747: PUSH
33748: LD_INT 4
33750: NEG
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 5
33758: NEG
33759: PUSH
33760: LD_INT 5
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 3
33770: NEG
33771: PUSH
33772: LD_INT 5
33774: NEG
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 5
33782: NEG
33783: PUSH
33784: LD_INT 3
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 0
33794: PUSH
33795: LD_INT 3
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 0
33805: PUSH
33806: LD_INT 4
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 1
33816: PUSH
33817: LD_INT 3
33819: NEG
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 1
33827: PUSH
33828: LD_INT 2
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 1
33849: NEG
33850: PUSH
33851: LD_INT 3
33853: NEG
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 1
33861: NEG
33862: PUSH
33863: LD_INT 4
33865: NEG
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 2
33873: PUSH
33874: LD_INT 2
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 2
33884: NEG
33885: PUSH
33886: LD_INT 4
33888: NEG
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 4
33896: PUSH
33897: LD_INT 0
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 4
33906: PUSH
33907: LD_INT 1
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 5
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 5
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 4
33937: PUSH
33938: LD_INT 1
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 3
33947: PUSH
33948: LD_INT 0
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 3
33957: PUSH
33958: LD_INT 1
33960: NEG
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 3
33968: PUSH
33969: LD_INT 2
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 5
33979: PUSH
33980: LD_INT 2
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34034: LD_ADDR_VAR 0 32
34038: PUSH
34039: LD_INT 4
34041: NEG
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 4
34052: NEG
34053: PUSH
34054: LD_INT 1
34056: NEG
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 3
34064: NEG
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 3
34075: NEG
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 4
34086: NEG
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 5
34097: NEG
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 5
34108: NEG
34109: PUSH
34110: LD_INT 1
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 5
34120: NEG
34121: PUSH
34122: LD_INT 2
34124: NEG
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 3
34132: NEG
34133: PUSH
34134: LD_INT 2
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 3
34143: NEG
34144: PUSH
34145: LD_INT 3
34147: NEG
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 3
34155: NEG
34156: PUSH
34157: LD_INT 4
34159: NEG
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 2
34167: NEG
34168: PUSH
34169: LD_INT 3
34171: NEG
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 2
34179: NEG
34180: PUSH
34181: LD_INT 2
34183: NEG
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 3
34191: NEG
34192: PUSH
34193: LD_INT 2
34195: NEG
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 4
34203: NEG
34204: PUSH
34205: LD_INT 3
34207: NEG
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 4
34215: NEG
34216: PUSH
34217: LD_INT 4
34219: NEG
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 2
34227: NEG
34228: PUSH
34229: LD_INT 4
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 4
34239: NEG
34240: PUSH
34241: LD_INT 2
34243: NEG
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: LD_INT 4
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: LD_INT 5
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: LD_INT 4
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: LD_INT 3
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: LD_INT 3
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PUSH
34308: LD_INT 4
34310: NEG
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 1
34318: NEG
34319: PUSH
34320: LD_INT 5
34322: NEG
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 2
34330: PUSH
34331: LD_INT 3
34333: NEG
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 2
34341: NEG
34342: PUSH
34343: LD_INT 5
34345: NEG
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 3
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 3
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 4
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 4
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 3
34394: PUSH
34395: LD_INT 1
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 2
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: LD_INT 1
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: LD_INT 2
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 4
34436: PUSH
34437: LD_INT 2
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 4
34446: PUSH
34447: LD_INT 4
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 4
34456: PUSH
34457: LD_INT 3
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 5
34466: PUSH
34467: LD_INT 4
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 5
34476: PUSH
34477: LD_INT 5
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 4
34486: PUSH
34487: LD_INT 5
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 3
34496: PUSH
34497: LD_INT 4
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 3
34506: PUSH
34507: LD_INT 3
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 5
34516: PUSH
34517: LD_INT 3
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 3
34526: PUSH
34527: LD_INT 5
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34581: LD_ADDR_VAR 0 33
34585: PUSH
34586: LD_INT 4
34588: NEG
34589: PUSH
34590: LD_INT 4
34592: NEG
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 4
34600: NEG
34601: PUSH
34602: LD_INT 5
34604: NEG
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 3
34612: NEG
34613: PUSH
34614: LD_INT 4
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 3
34624: NEG
34625: PUSH
34626: LD_INT 3
34628: NEG
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 4
34636: NEG
34637: PUSH
34638: LD_INT 3
34640: NEG
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 5
34648: NEG
34649: PUSH
34650: LD_INT 4
34652: NEG
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 5
34660: NEG
34661: PUSH
34662: LD_INT 5
34664: NEG
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 3
34672: NEG
34673: PUSH
34674: LD_INT 5
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 5
34684: NEG
34685: PUSH
34686: LD_INT 3
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: LD_INT 3
34699: NEG
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 0
34707: PUSH
34708: LD_INT 4
34710: NEG
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 1
34718: PUSH
34719: LD_INT 3
34721: NEG
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 1
34729: PUSH
34730: LD_INT 2
34732: NEG
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 0
34740: PUSH
34741: LD_INT 2
34743: NEG
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: LD_INT 3
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: LD_INT 4
34767: NEG
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: LD_INT 2
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 2
34786: NEG
34787: PUSH
34788: LD_INT 4
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 4
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 4
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 5
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 5
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 4
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 3
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 3
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 3
34870: PUSH
34871: LD_INT 2
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 5
34881: PUSH
34882: LD_INT 2
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 3
34891: PUSH
34892: LD_INT 3
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 3
34901: PUSH
34902: LD_INT 2
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 4
34911: PUSH
34912: LD_INT 3
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 4
34921: PUSH
34922: LD_INT 4
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 3
34931: PUSH
34932: LD_INT 4
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: LD_INT 3
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 2
34951: PUSH
34952: LD_INT 2
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 4
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 2
34971: PUSH
34972: LD_INT 4
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: LD_INT 4
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: LD_INT 3
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 1
35001: PUSH
35002: LD_INT 4
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: LD_INT 5
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: LD_INT 5
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: LD_INT 4
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: LD_INT 3
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 2
35053: PUSH
35054: LD_INT 5
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 2
35063: NEG
35064: PUSH
35065: LD_INT 3
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35119: LD_ADDR_VAR 0 34
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: LD_INT 4
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 0
35137: PUSH
35138: LD_INT 5
35140: NEG
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 1
35148: PUSH
35149: LD_INT 4
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: PUSH
35160: LD_INT 3
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: LD_INT 3
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 1
35181: NEG
35182: PUSH
35183: LD_INT 4
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 1
35193: NEG
35194: PUSH
35195: LD_INT 5
35197: NEG
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 2
35205: PUSH
35206: LD_INT 3
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 2
35216: NEG
35217: PUSH
35218: LD_INT 5
35220: NEG
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 3
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 3
35238: PUSH
35239: LD_INT 1
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 4
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 4
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 3
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 2
35279: PUSH
35280: LD_INT 0
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 2
35289: PUSH
35290: LD_INT 1
35292: NEG
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 2
35300: PUSH
35301: LD_INT 2
35303: NEG
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 4
35311: PUSH
35312: LD_INT 2
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 4
35321: PUSH
35322: LD_INT 4
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 4
35331: PUSH
35332: LD_INT 3
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 5
35341: PUSH
35342: LD_INT 4
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 5
35351: PUSH
35352: LD_INT 5
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 4
35361: PUSH
35362: LD_INT 5
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 3
35371: PUSH
35372: LD_INT 4
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 3
35381: PUSH
35382: LD_INT 3
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 5
35391: PUSH
35392: LD_INT 3
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 3
35401: PUSH
35402: LD_INT 5
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 0
35411: PUSH
35412: LD_INT 3
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 0
35421: PUSH
35422: LD_INT 2
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 1
35431: PUSH
35432: LD_INT 3
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: LD_INT 4
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: LD_INT 4
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 1
35461: NEG
35462: PUSH
35463: LD_INT 3
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 1
35472: NEG
35473: PUSH
35474: LD_INT 2
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 2
35483: PUSH
35484: LD_INT 4
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: NEG
35494: PUSH
35495: LD_INT 2
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 4
35504: NEG
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 4
35515: NEG
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 3
35527: NEG
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 3
35538: NEG
35539: PUSH
35540: LD_INT 1
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 4
35549: NEG
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 5
35560: NEG
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 5
35571: NEG
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 5
35583: NEG
35584: PUSH
35585: LD_INT 2
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 3
35595: NEG
35596: PUSH
35597: LD_INT 2
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: ST_TO_ADDR
// end ; end ;
35651: GO 35654
35653: POP
// case btype of b_depot , b_warehouse :
35654: LD_VAR 0 1
35658: PUSH
35659: LD_INT 0
35661: DOUBLE
35662: EQUAL
35663: IFTRUE 35673
35665: LD_INT 1
35667: DOUBLE
35668: EQUAL
35669: IFTRUE 35673
35671: GO 35874
35673: POP
// case nation of nation_american :
35674: LD_VAR 0 5
35678: PUSH
35679: LD_INT 1
35681: DOUBLE
35682: EQUAL
35683: IFTRUE 35687
35685: GO 35743
35687: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
35688: LD_ADDR_VAR 0 9
35692: PUSH
35693: LD_VAR 0 11
35697: PUSH
35698: LD_VAR 0 12
35702: PUSH
35703: LD_VAR 0 13
35707: PUSH
35708: LD_VAR 0 14
35712: PUSH
35713: LD_VAR 0 15
35717: PUSH
35718: LD_VAR 0 16
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: PUSH
35731: LD_VAR 0 4
35735: PUSH
35736: LD_INT 1
35738: PLUS
35739: ARRAY
35740: ST_TO_ADDR
35741: GO 35872
35743: LD_INT 2
35745: DOUBLE
35746: EQUAL
35747: IFTRUE 35751
35749: GO 35807
35751: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
35752: LD_ADDR_VAR 0 9
35756: PUSH
35757: LD_VAR 0 17
35761: PUSH
35762: LD_VAR 0 18
35766: PUSH
35767: LD_VAR 0 19
35771: PUSH
35772: LD_VAR 0 20
35776: PUSH
35777: LD_VAR 0 21
35781: PUSH
35782: LD_VAR 0 22
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: PUSH
35795: LD_VAR 0 4
35799: PUSH
35800: LD_INT 1
35802: PLUS
35803: ARRAY
35804: ST_TO_ADDR
35805: GO 35872
35807: LD_INT 3
35809: DOUBLE
35810: EQUAL
35811: IFTRUE 35815
35813: GO 35871
35815: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35816: LD_ADDR_VAR 0 9
35820: PUSH
35821: LD_VAR 0 23
35825: PUSH
35826: LD_VAR 0 24
35830: PUSH
35831: LD_VAR 0 25
35835: PUSH
35836: LD_VAR 0 26
35840: PUSH
35841: LD_VAR 0 27
35845: PUSH
35846: LD_VAR 0 28
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: PUSH
35859: LD_VAR 0 4
35863: PUSH
35864: LD_INT 1
35866: PLUS
35867: ARRAY
35868: ST_TO_ADDR
35869: GO 35872
35871: POP
35872: GO 36421
35874: LD_INT 2
35876: DOUBLE
35877: EQUAL
35878: IFTRUE 35888
35880: LD_INT 3
35882: DOUBLE
35883: EQUAL
35884: IFTRUE 35888
35886: GO 35944
35888: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35889: LD_ADDR_VAR 0 9
35893: PUSH
35894: LD_VAR 0 29
35898: PUSH
35899: LD_VAR 0 30
35903: PUSH
35904: LD_VAR 0 31
35908: PUSH
35909: LD_VAR 0 32
35913: PUSH
35914: LD_VAR 0 33
35918: PUSH
35919: LD_VAR 0 34
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: PUSH
35932: LD_VAR 0 4
35936: PUSH
35937: LD_INT 1
35939: PLUS
35940: ARRAY
35941: ST_TO_ADDR
35942: GO 36421
35944: LD_INT 16
35946: DOUBLE
35947: EQUAL
35948: IFTRUE 36000
35950: LD_INT 17
35952: DOUBLE
35953: EQUAL
35954: IFTRUE 36000
35956: LD_INT 18
35958: DOUBLE
35959: EQUAL
35960: IFTRUE 36000
35962: LD_INT 19
35964: DOUBLE
35965: EQUAL
35966: IFTRUE 36000
35968: LD_INT 20
35970: DOUBLE
35971: EQUAL
35972: IFTRUE 36000
35974: LD_INT 21
35976: DOUBLE
35977: EQUAL
35978: IFTRUE 36000
35980: LD_INT 23
35982: DOUBLE
35983: EQUAL
35984: IFTRUE 36000
35986: LD_INT 24
35988: DOUBLE
35989: EQUAL
35990: IFTRUE 36000
35992: LD_INT 25
35994: DOUBLE
35995: EQUAL
35996: IFTRUE 36000
35998: GO 36056
36000: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36001: LD_ADDR_VAR 0 9
36005: PUSH
36006: LD_VAR 0 35
36010: PUSH
36011: LD_VAR 0 36
36015: PUSH
36016: LD_VAR 0 37
36020: PUSH
36021: LD_VAR 0 38
36025: PUSH
36026: LD_VAR 0 39
36030: PUSH
36031: LD_VAR 0 40
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: PUSH
36044: LD_VAR 0 4
36048: PUSH
36049: LD_INT 1
36051: PLUS
36052: ARRAY
36053: ST_TO_ADDR
36054: GO 36421
36056: LD_INT 6
36058: DOUBLE
36059: EQUAL
36060: IFTRUE 36112
36062: LD_INT 7
36064: DOUBLE
36065: EQUAL
36066: IFTRUE 36112
36068: LD_INT 8
36070: DOUBLE
36071: EQUAL
36072: IFTRUE 36112
36074: LD_INT 13
36076: DOUBLE
36077: EQUAL
36078: IFTRUE 36112
36080: LD_INT 12
36082: DOUBLE
36083: EQUAL
36084: IFTRUE 36112
36086: LD_INT 15
36088: DOUBLE
36089: EQUAL
36090: IFTRUE 36112
36092: LD_INT 11
36094: DOUBLE
36095: EQUAL
36096: IFTRUE 36112
36098: LD_INT 14
36100: DOUBLE
36101: EQUAL
36102: IFTRUE 36112
36104: LD_INT 10
36106: DOUBLE
36107: EQUAL
36108: IFTRUE 36112
36110: GO 36168
36112: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36113: LD_ADDR_VAR 0 9
36117: PUSH
36118: LD_VAR 0 41
36122: PUSH
36123: LD_VAR 0 42
36127: PUSH
36128: LD_VAR 0 43
36132: PUSH
36133: LD_VAR 0 44
36137: PUSH
36138: LD_VAR 0 45
36142: PUSH
36143: LD_VAR 0 46
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: PUSH
36156: LD_VAR 0 4
36160: PUSH
36161: LD_INT 1
36163: PLUS
36164: ARRAY
36165: ST_TO_ADDR
36166: GO 36421
36168: LD_INT 36
36170: DOUBLE
36171: EQUAL
36172: IFTRUE 36176
36174: GO 36232
36176: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36177: LD_ADDR_VAR 0 9
36181: PUSH
36182: LD_VAR 0 47
36186: PUSH
36187: LD_VAR 0 48
36191: PUSH
36192: LD_VAR 0 49
36196: PUSH
36197: LD_VAR 0 50
36201: PUSH
36202: LD_VAR 0 51
36206: PUSH
36207: LD_VAR 0 52
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: PUSH
36220: LD_VAR 0 4
36224: PUSH
36225: LD_INT 1
36227: PLUS
36228: ARRAY
36229: ST_TO_ADDR
36230: GO 36421
36232: LD_INT 4
36234: DOUBLE
36235: EQUAL
36236: IFTRUE 36258
36238: LD_INT 5
36240: DOUBLE
36241: EQUAL
36242: IFTRUE 36258
36244: LD_INT 34
36246: DOUBLE
36247: EQUAL
36248: IFTRUE 36258
36250: LD_INT 37
36252: DOUBLE
36253: EQUAL
36254: IFTRUE 36258
36256: GO 36314
36258: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36259: LD_ADDR_VAR 0 9
36263: PUSH
36264: LD_VAR 0 53
36268: PUSH
36269: LD_VAR 0 54
36273: PUSH
36274: LD_VAR 0 55
36278: PUSH
36279: LD_VAR 0 56
36283: PUSH
36284: LD_VAR 0 57
36288: PUSH
36289: LD_VAR 0 58
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: PUSH
36302: LD_VAR 0 4
36306: PUSH
36307: LD_INT 1
36309: PLUS
36310: ARRAY
36311: ST_TO_ADDR
36312: GO 36421
36314: LD_INT 31
36316: DOUBLE
36317: EQUAL
36318: IFTRUE 36364
36320: LD_INT 32
36322: DOUBLE
36323: EQUAL
36324: IFTRUE 36364
36326: LD_INT 33
36328: DOUBLE
36329: EQUAL
36330: IFTRUE 36364
36332: LD_INT 27
36334: DOUBLE
36335: EQUAL
36336: IFTRUE 36364
36338: LD_INT 26
36340: DOUBLE
36341: EQUAL
36342: IFTRUE 36364
36344: LD_INT 28
36346: DOUBLE
36347: EQUAL
36348: IFTRUE 36364
36350: LD_INT 29
36352: DOUBLE
36353: EQUAL
36354: IFTRUE 36364
36356: LD_INT 30
36358: DOUBLE
36359: EQUAL
36360: IFTRUE 36364
36362: GO 36420
36364: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36365: LD_ADDR_VAR 0 9
36369: PUSH
36370: LD_VAR 0 59
36374: PUSH
36375: LD_VAR 0 60
36379: PUSH
36380: LD_VAR 0 61
36384: PUSH
36385: LD_VAR 0 62
36389: PUSH
36390: LD_VAR 0 63
36394: PUSH
36395: LD_VAR 0 64
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: PUSH
36408: LD_VAR 0 4
36412: PUSH
36413: LD_INT 1
36415: PLUS
36416: ARRAY
36417: ST_TO_ADDR
36418: GO 36421
36420: POP
// temp_list2 = [ ] ;
36421: LD_ADDR_VAR 0 10
36425: PUSH
36426: EMPTY
36427: ST_TO_ADDR
// for i in temp_list do
36428: LD_ADDR_VAR 0 8
36432: PUSH
36433: LD_VAR 0 9
36437: PUSH
36438: FOR_IN
36439: IFFALSE 36491
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36441: LD_ADDR_VAR 0 10
36445: PUSH
36446: LD_VAR 0 10
36450: PUSH
36451: LD_VAR 0 8
36455: PUSH
36456: LD_INT 1
36458: ARRAY
36459: PUSH
36460: LD_VAR 0 2
36464: PLUS
36465: PUSH
36466: LD_VAR 0 8
36470: PUSH
36471: LD_INT 2
36473: ARRAY
36474: PUSH
36475: LD_VAR 0 3
36479: PLUS
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: EMPTY
36486: LIST
36487: ADD
36488: ST_TO_ADDR
36489: GO 36438
36491: POP
36492: POP
// result = temp_list2 ;
36493: LD_ADDR_VAR 0 7
36497: PUSH
36498: LD_VAR 0 10
36502: ST_TO_ADDR
// end ; end_of_file
36503: LD_VAR 0 7
36507: RET
// every 1 do var i ;
36508: GO 36510
36510: DISABLE
36511: LD_INT 0
36513: PPUSH
// begin Video ( true ) ;
36514: LD_INT 1
36516: PPUSH
36517: CALL 6872 0 1
// CenterOnXY ( 53 , 40 ) ;
36521: LD_INT 53
36523: PPUSH
36524: LD_INT 40
36526: PPUSH
36527: CALL_OW 84
// wait ( 0 0$5 ) ;
36531: LD_INT 175
36533: PPUSH
36534: CALL_OW 67
// if gammaCommander = 1 then
36538: LD_EXP 12
36542: PUSH
36543: LD_INT 1
36545: EQUAL
36546: IFFALSE 36560
// Say ( Donaldson , D1-Don-1 ) ;
36548: LD_EXP 3
36552: PPUSH
36553: LD_STRING D1-Don-1
36555: PPUSH
36556: CALL_OW 88
// if gammaCommander = 2 then
36560: LD_EXP 12
36564: PUSH
36565: LD_INT 2
36567: EQUAL
36568: IFFALSE 36582
// Say ( Brown , D1-Brown-1 ) ;
36570: LD_EXP 2
36574: PPUSH
36575: LD_STRING D1-Brown-1
36577: PPUSH
36578: CALL_OW 88
// if gammaCommander = 3 then
36582: LD_EXP 12
36586: PUSH
36587: LD_INT 3
36589: EQUAL
36590: IFFALSE 36604
// Say ( Houten , D1-VanH-1 ) ;
36592: LD_EXP 13
36596: PPUSH
36597: LD_STRING D1-VanH-1
36599: PPUSH
36600: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
36604: LD_EXP 22
36608: PPUSH
36609: LD_STRING D1-Har-1
36611: PPUSH
36612: CALL_OW 94
// if gammaCommander = 1 then
36616: LD_EXP 12
36620: PUSH
36621: LD_INT 1
36623: EQUAL
36624: IFFALSE 36638
// Say ( Donaldson , D1-Don-2 ) ;
36626: LD_EXP 3
36630: PPUSH
36631: LD_STRING D1-Don-2
36633: PPUSH
36634: CALL_OW 88
// if gammaCommander = 2 then
36638: LD_EXP 12
36642: PUSH
36643: LD_INT 2
36645: EQUAL
36646: IFFALSE 36660
// Say ( Brown , D1-Brown-2 ) ;
36648: LD_EXP 2
36652: PPUSH
36653: LD_STRING D1-Brown-2
36655: PPUSH
36656: CALL_OW 88
// if gammaCommander = 3 then
36660: LD_EXP 12
36664: PUSH
36665: LD_INT 3
36667: EQUAL
36668: IFFALSE 36682
// Say ( Houten , D1-VanH-2 ) ;
36670: LD_EXP 13
36674: PPUSH
36675: LD_STRING D1-VanH-2
36677: PPUSH
36678: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
36682: LD_EXP 22
36686: PPUSH
36687: LD_STRING D1-Har-2
36689: PPUSH
36690: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
36694: LD_INT 22
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 33
36706: PUSH
36707: LD_INT 2
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 61
36716: PUSH
36717: EMPTY
36718: LIST
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: LIST
36724: PPUSH
36725: CALL_OW 69
36729: IFFALSE 36794
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
36731: LD_ADDR_VAR 0 1
36735: PUSH
36736: LD_INT 22
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 33
36748: PUSH
36749: LD_INT 2
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 61
36758: PUSH
36759: EMPTY
36760: LIST
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: PPUSH
36767: CALL_OW 69
36771: PUSH
36772: FOR_IN
36773: IFFALSE 36792
// ComAgressiveMove ( i , 70 , 41 ) ;
36775: LD_VAR 0 1
36779: PPUSH
36780: LD_INT 70
36782: PPUSH
36783: LD_INT 41
36785: PPUSH
36786: CALL_OW 114
36790: GO 36772
36792: POP
36793: POP
// repeat wait ( 0 0$1 ) ;
36794: LD_INT 35
36796: PPUSH
36797: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
36801: LD_ADDR_VAR 0 1
36805: PUSH
36806: LD_INT 22
36808: PUSH
36809: LD_INT 6
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: EMPTY
36817: LIST
36818: PPUSH
36819: CALL_OW 69
36823: PUSH
36824: FOR_IN
36825: IFFALSE 36844
// ComAgressiveMove ( i , 54 , 20 ) ;
36827: LD_VAR 0 1
36831: PPUSH
36832: LD_INT 54
36834: PPUSH
36835: LD_INT 20
36837: PPUSH
36838: CALL_OW 114
36842: GO 36824
36844: POP
36845: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
36846: LD_ADDR_VAR 0 1
36850: PUSH
36851: LD_INT 22
36853: PUSH
36854: LD_INT 1
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 25
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 3
36873: PUSH
36874: LD_INT 54
36876: PUSH
36877: EMPTY
36878: LIST
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: LIST
36888: PPUSH
36889: CALL_OW 69
36893: PUSH
36894: FOR_IN
36895: IFFALSE 36929
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
36897: LD_VAR 0 1
36901: PPUSH
36902: LD_INT 70
36904: PPUSH
36905: LD_INT 41
36907: PPUSH
36908: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
36912: LD_VAR 0 1
36916: PPUSH
36917: LD_INT 46
36919: PPUSH
36920: LD_INT 39
36922: PPUSH
36923: CALL_OW 174
// end ;
36927: GO 36894
36929: POP
36930: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
36931: LD_ADDR_VAR 0 1
36935: PUSH
36936: LD_INT 22
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 21
36948: PUSH
36949: LD_INT 1
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 3
36958: PUSH
36959: LD_INT 24
36961: PUSH
36962: LD_INT 500
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: LIST
36977: PPUSH
36978: CALL_OW 69
36982: PUSH
36983: FOR_IN
36984: IFFALSE 37017
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
36986: LD_VAR 0 1
36990: PPUSH
36991: LD_EXP 37
36995: PPUSH
36996: CALL_OW 250
37000: PPUSH
37001: LD_EXP 37
37005: PPUSH
37006: CALL_OW 251
37010: PPUSH
37011: CALL_OW 111
37015: GO 36983
37017: POP
37018: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
37019: LD_INT 22
37021: PUSH
37022: LD_INT 6
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 21
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 24
37041: PUSH
37042: LD_INT 250
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: PPUSH
37054: CALL_OW 69
37058: PUSH
37059: LD_INT 5
37061: LESS
37062: IFFALSE 36794
// Video ( false ) ;
37064: LD_INT 0
37066: PPUSH
37067: CALL 6872 0 1
// ChangeMissionObjectives ( M1 ) ;
37071: LD_STRING M1
37073: PPUSH
37074: CALL_OW 337
// SaveForQuickRestart ;
37078: CALL_OW 22
// startCutscene = 0 ;
37082: LD_ADDR_EXP 38
37086: PUSH
37087: LD_INT 0
37089: ST_TO_ADDR
// end ;
37090: PPOPN 1
37092: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
37093: LD_EXP 38
37097: IFFALSE 37188
37099: GO 37101
37101: DISABLE
37102: LD_INT 0
37104: PPUSH
37105: PPUSH
// begin enable ;
37106: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
37107: LD_ADDR_VAR 0 1
37111: PUSH
37112: LD_INT 22
37114: PUSH
37115: LD_INT 1
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 21
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 3
37134: PUSH
37135: LD_INT 24
37137: PUSH
37138: LD_INT 700
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: LIST
37153: PPUSH
37154: CALL_OW 69
37158: ST_TO_ADDR
// for i in tmp do
37159: LD_ADDR_VAR 0 2
37163: PUSH
37164: LD_VAR 0 1
37168: PUSH
37169: FOR_IN
37170: IFFALSE 37186
// SetLives ( i , 700 ) ;
37172: LD_VAR 0 2
37176: PPUSH
37177: LD_INT 700
37179: PPUSH
37180: CALL_OW 234
37184: GO 37169
37186: POP
37187: POP
// end ;
37188: PPOPN 2
37190: END
// every 1 1$0 do
37191: GO 37193
37193: DISABLE
// begin PrepareSupportFromDelta ;
37194: CALL 3713 0 0
// firstAttack = 1 ;
37198: LD_ADDR_EXP 33
37202: PUSH
37203: LD_INT 1
37205: ST_TO_ADDR
// if IsOk ( Gladstone ) then
37206: LD_EXP 8
37210: PPUSH
37211: CALL_OW 302
37215: IFFALSE 37231
// begin Say ( Gladstone , D2-Glad-1 ) ;
37217: LD_EXP 8
37221: PPUSH
37222: LD_STRING D2-Glad-1
37224: PPUSH
37225: CALL_OW 88
// end else
37229: GO 37339
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
37231: LD_INT 4
37233: PPUSH
37234: LD_INT 22
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 21
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: LD_INT 25
37259: PUSH
37260: LD_INT 1
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 25
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 25
37279: PUSH
37280: LD_INT 3
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 25
37289: PUSH
37290: LD_INT 4
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: LIST
37308: PPUSH
37309: CALL_OW 70
37313: PUSH
37314: LD_EXP 15
37318: PUSH
37319: LD_EXP 14
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: DIFF
37328: PPUSH
37329: LD_STRING D2-Sol1-1
37331: PPUSH
37332: LD_STRING D2-FSol1-1
37334: PPUSH
37335: CALL 6900 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
37339: LD_EXP 3
37343: PPUSH
37344: CALL_OW 302
37348: PUSH
37349: LD_EXP 12
37353: PUSH
37354: LD_INT 1
37356: EQUAL
37357: AND
37358: IFFALSE 37372
// Say ( Donaldson , D2-Don-1 ) ;
37360: LD_EXP 3
37364: PPUSH
37365: LD_STRING D2-Don-1
37367: PPUSH
37368: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
37372: LD_EXP 2
37376: PPUSH
37377: CALL_OW 302
37381: PUSH
37382: LD_EXP 12
37386: PUSH
37387: LD_INT 2
37389: EQUAL
37390: AND
37391: IFFALSE 37405
// Say ( Brown , D2-Brown-1 ) ;
37393: LD_EXP 2
37397: PPUSH
37398: LD_STRING D2-Brown-1
37400: PPUSH
37401: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
37405: LD_EXP 13
37409: PPUSH
37410: CALL_OW 302
37414: PUSH
37415: LD_EXP 12
37419: PUSH
37420: LD_INT 3
37422: EQUAL
37423: AND
37424: IFFALSE 37438
// Say ( Houten , D2-VanH-1 ) ;
37426: LD_EXP 13
37430: PPUSH
37431: LD_STRING D2-VanH-1
37433: PPUSH
37434: CALL_OW 88
// end ;
37438: END
// every 0 0$1 do
37439: GO 37441
37441: DISABLE
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
37442: LD_STRING 07_time
37444: PPUSH
37445: LD_INT 12600
37447: PPUSH
37448: CALL_OW 30
37452: PUSH
37453: LD_INT 3
37455: DIV
37456: PPUSH
37457: CALL_OW 67
// PrepareMacmillanSquad ;
37461: CALL 4375 0 0
// CenterNowOnUnits ( JMM ) ;
37465: LD_EXP 1
37469: PPUSH
37470: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
37474: LD_EXP 1
37478: PPUSH
37479: LD_STRING D3-JMM-1
37481: PPUSH
37482: CALL_OW 88
// JMMArrive = 1 ;
37486: LD_ADDR_EXP 39
37490: PUSH
37491: LD_INT 1
37493: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
37494: LD_EXP 3
37498: PPUSH
37499: CALL_OW 302
37503: PUSH
37504: LD_EXP 12
37508: PUSH
37509: LD_INT 1
37511: EQUAL
37512: AND
37513: IFFALSE 37529
// begin Say ( Donaldson , D3-Don-1 ) ;
37515: LD_EXP 3
37519: PPUSH
37520: LD_STRING D3-Don-1
37522: PPUSH
37523: CALL_OW 88
// end else
37527: GO 37581
// begin if gammaCommander = 1 then
37529: LD_EXP 12
37533: PUSH
37534: LD_INT 1
37536: EQUAL
37537: IFFALSE 37581
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
37539: LD_EXP 11
37543: PPUSH
37544: LD_INT 26
37546: PUSH
37547: LD_INT 1
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PPUSH
37554: CALL_OW 72
37558: PPUSH
37559: LD_STRING D3-Sol1-1
37561: PPUSH
37562: LD_STRING D3-Sol1-1
37564: PPUSH
37565: CALL 6900 0 3
// Say ( JMM , D3-JMM-2 ) ;
37569: LD_EXP 1
37573: PPUSH
37574: LD_STRING D3-JMM-2
37576: PPUSH
37577: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
37581: LD_EXP 2
37585: PPUSH
37586: CALL_OW 302
37590: PUSH
37591: LD_EXP 12
37595: PUSH
37596: LD_INT 2
37598: EQUAL
37599: AND
37600: IFFALSE 37616
// begin Say ( Brown , D3-Brown-1 ) ;
37602: LD_EXP 2
37606: PPUSH
37607: LD_STRING D3-Brown-1
37609: PPUSH
37610: CALL_OW 88
// end else
37614: GO 37668
// begin if gammaCommander = 2 then
37616: LD_EXP 12
37620: PUSH
37621: LD_INT 2
37623: EQUAL
37624: IFFALSE 37668
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
37626: LD_EXP 11
37630: PPUSH
37631: LD_INT 26
37633: PUSH
37634: LD_INT 1
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PPUSH
37641: CALL_OW 72
37645: PPUSH
37646: LD_STRING D3-Sol1-1a
37648: PPUSH
37649: LD_STRING D3-Sol1-1a
37651: PPUSH
37652: CALL 6900 0 3
// Say ( JMM , D3-JMM-2 ) ;
37656: LD_EXP 1
37660: PPUSH
37661: LD_STRING D3-JMM-2
37663: PPUSH
37664: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
37668: LD_EXP 13
37672: PPUSH
37673: CALL_OW 302
37677: PUSH
37678: LD_EXP 12
37682: PUSH
37683: LD_INT 3
37685: EQUAL
37686: AND
37687: IFFALSE 37703
// begin Say ( Houten , D3-VanH-1 ) ;
37689: LD_EXP 13
37693: PPUSH
37694: LD_STRING D3-VanH-1
37696: PPUSH
37697: CALL_OW 88
// end else
37701: GO 37755
// begin if gammaCommander = 3 then
37703: LD_EXP 12
37707: PUSH
37708: LD_INT 3
37710: EQUAL
37711: IFFALSE 37755
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
37713: LD_EXP 11
37717: PPUSH
37718: LD_INT 26
37720: PUSH
37721: LD_INT 1
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PPUSH
37728: CALL_OW 72
37732: PPUSH
37733: LD_STRING D3-Sol1-1b
37735: PPUSH
37736: LD_STRING D3-Sol1-1b
37738: PPUSH
37739: CALL 6900 0 3
// Say ( JMM , D3-JMM-2 ) ;
37743: LD_EXP 1
37747: PPUSH
37748: LD_STRING D3-JMM-2
37750: PPUSH
37751: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
37755: LD_EXP 15
37759: PPUSH
37760: CALL_OW 302
37764: IFFALSE 37792
// begin Say ( Joan , D3a-Joan-1 ) ;
37766: LD_EXP 15
37770: PPUSH
37771: LD_STRING D3a-Joan-1
37773: PPUSH
37774: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
37778: LD_EXP 1
37782: PPUSH
37783: LD_STRING D3a-JMM-1
37785: PPUSH
37786: CALL_OW 88
// end else
37790: GO 38134
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
37792: LD_STRING 06_JoanStatus_1
37794: PPUSH
37795: LD_INT 0
37797: PPUSH
37798: CALL_OW 30
37802: PUSH
37803: LD_INT 1
37805: EQUAL
37806: IFFALSE 38134
// begin Say ( JMM , D3b-JMM-1 ) ;
37808: LD_EXP 1
37812: PPUSH
37813: LD_STRING D3b-JMM-1
37815: PPUSH
37816: CALL_OW 88
// if gammaCommander = 1 then
37820: LD_EXP 12
37824: PUSH
37825: LD_INT 1
37827: EQUAL
37828: IFFALSE 37885
// if IsOK ( Donaldson ) then
37830: LD_EXP 3
37834: PPUSH
37835: CALL_OW 302
37839: IFFALSE 37855
// Say ( Donaldson , D3b-Don-1 ) else
37841: LD_EXP 3
37845: PPUSH
37846: LD_STRING D3b-Don-1
37848: PPUSH
37849: CALL_OW 88
37853: GO 37885
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
37855: LD_EXP 11
37859: PPUSH
37860: LD_INT 26
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PPUSH
37870: CALL_OW 72
37874: PPUSH
37875: LD_STRING D3b-Sol1-1
37877: PPUSH
37878: LD_STRING D3b-Sol1-1
37880: PPUSH
37881: CALL 6900 0 3
// if gammaCommander = 2 then
37885: LD_EXP 12
37889: PUSH
37890: LD_INT 2
37892: EQUAL
37893: IFFALSE 37950
// if IsOk ( Brown ) then
37895: LD_EXP 2
37899: PPUSH
37900: CALL_OW 302
37904: IFFALSE 37920
// Say ( Brown , D3b-Brown-1 ) else
37906: LD_EXP 2
37910: PPUSH
37911: LD_STRING D3b-Brown-1
37913: PPUSH
37914: CALL_OW 88
37918: GO 37950
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
37920: LD_EXP 11
37924: PPUSH
37925: LD_INT 26
37927: PUSH
37928: LD_INT 1
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PPUSH
37935: CALL_OW 72
37939: PPUSH
37940: LD_STRING D3b-Sol1-1
37942: PPUSH
37943: LD_STRING D3b-Sol1-1
37945: PPUSH
37946: CALL 6900 0 3
// if gammaCommander = 3 then
37950: LD_EXP 12
37954: PUSH
37955: LD_INT 3
37957: EQUAL
37958: IFFALSE 38015
// if IsOk ( Houten ) then
37960: LD_EXP 13
37964: PPUSH
37965: CALL_OW 302
37969: IFFALSE 37985
// Say ( Houten , D3b-VanH-1 ) else
37971: LD_EXP 13
37975: PPUSH
37976: LD_STRING D3b-VanH-1
37978: PPUSH
37979: CALL_OW 88
37983: GO 38015
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
37985: LD_EXP 11
37989: PPUSH
37990: LD_INT 26
37992: PUSH
37993: LD_INT 1
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PPUSH
38000: CALL_OW 72
38004: PPUSH
38005: LD_STRING D3b-Sol1-1
38007: PPUSH
38008: LD_STRING D3b-Sol1-1
38010: PPUSH
38011: CALL 6900 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
38015: LD_EXP 11
38019: PPUSH
38020: LD_INT 26
38022: PUSH
38023: LD_INT 1
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PPUSH
38030: CALL_OW 72
38034: PUSH
38035: LD_EXP 12
38039: PUSH
38040: LD_INT 1
38042: EQUAL
38043: PUSH
38044: LD_EXP 3
38048: PPUSH
38049: CALL_OW 302
38053: AND
38054: OR
38055: PUSH
38056: LD_EXP 12
38060: PUSH
38061: LD_INT 2
38063: EQUAL
38064: PUSH
38065: LD_EXP 2
38069: PPUSH
38070: CALL_OW 302
38074: AND
38075: OR
38076: PUSH
38077: LD_EXP 12
38081: PUSH
38082: LD_INT 3
38084: EQUAL
38085: PUSH
38086: LD_EXP 13
38090: PPUSH
38091: CALL_OW 302
38095: AND
38096: OR
38097: IFFALSE 38111
// Say ( JMM , D3b-JMM-2 ) ;
38099: LD_EXP 1
38103: PPUSH
38104: LD_STRING D3b-JMM-2
38106: PPUSH
38107: CALL_OW 88
// if IsOK ( Lisa ) then
38111: LD_EXP 6
38115: PPUSH
38116: CALL_OW 302
38120: IFFALSE 38134
// Say ( Lisa , D3b-Lisa-2 ) ;
38122: LD_EXP 6
38126: PPUSH
38127: LD_STRING D3b-Lisa-2
38129: PPUSH
38130: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
38134: LD_INT 22
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 21
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 26
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: LD_INT 25
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 25
38179: PUSH
38180: LD_INT 2
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 25
38189: PUSH
38190: LD_INT 3
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 25
38199: PUSH
38200: LD_INT 4
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: PPUSH
38220: CALL_OW 69
38224: PUSH
38225: LD_EXP 1
38229: PUSH
38230: LD_EXP 2
38234: PUSH
38235: LD_EXP 3
38239: PUSH
38240: LD_EXP 4
38244: PUSH
38245: LD_EXP 5
38249: PUSH
38250: LD_EXP 6
38254: PUSH
38255: LD_EXP 7
38259: PUSH
38260: LD_EXP 8
38264: PUSH
38265: LD_EXP 9
38269: PUSH
38270: LD_EXP 10
38274: PUSH
38275: LD_EXP 15
38279: PUSH
38280: LD_EXP 14
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: DIFF
38299: PPUSH
38300: LD_STRING DCa-Sol1-1
38302: PPUSH
38303: LD_STRING DCa-Sol1-1
38305: PPUSH
38306: CALL 6900 0 3
// Say ( JMM , DCb-JMM-1 ) ;
38310: LD_EXP 1
38314: PPUSH
38315: LD_STRING DCb-JMM-1
38317: PPUSH
38318: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
38322: LD_INT 22
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 21
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 26
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: LD_INT 25
38357: PUSH
38358: LD_INT 1
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 25
38367: PUSH
38368: LD_INT 2
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 25
38377: PUSH
38378: LD_INT 3
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 25
38387: PUSH
38388: LD_INT 4
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: PPUSH
38408: CALL_OW 69
38412: PUSH
38413: LD_EXP 1
38417: PUSH
38418: LD_EXP 2
38422: PUSH
38423: LD_EXP 3
38427: PUSH
38428: LD_EXP 4
38432: PUSH
38433: LD_EXP 5
38437: PUSH
38438: LD_EXP 6
38442: PUSH
38443: LD_EXP 7
38447: PUSH
38448: LD_EXP 8
38452: PUSH
38453: LD_EXP 9
38457: PUSH
38458: LD_EXP 10
38462: PUSH
38463: LD_EXP 15
38467: PUSH
38468: LD_EXP 14
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: DIFF
38487: PPUSH
38488: LD_STRING DCb-Sol1-1
38490: PPUSH
38491: LD_STRING DCb-Sol1-1
38493: PPUSH
38494: CALL 6900 0 3
// Say ( JMM , DCb-JMM-2 ) ;
38498: LD_EXP 1
38502: PPUSH
38503: LD_STRING DCb-JMM-2
38505: PPUSH
38506: CALL_OW 88
// secondAttack = 1 ;
38510: LD_ADDR_EXP 34
38514: PUSH
38515: LD_INT 1
38517: ST_TO_ADDR
// end ;
38518: END
// every 0 0$01 trigger JMMArrive = 1 do
38519: LD_EXP 39
38523: PUSH
38524: LD_INT 1
38526: EQUAL
38527: IFFALSE 38607
38529: GO 38531
38531: DISABLE
// begin wait ( 3 3$0 ) ;
38532: LD_INT 6300
38534: PPUSH
38535: CALL_OW 67
// DialogueOn ;
38539: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
38543: LD_EXP 23
38547: PPUSH
38548: LD_STRING D4-Pow-1
38550: PPUSH
38551: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
38555: LD_EXP 1
38559: PPUSH
38560: LD_STRING D4-JMM-1
38562: PPUSH
38563: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
38567: LD_EXP 23
38571: PPUSH
38572: LD_STRING D4-Pow-2
38574: PPUSH
38575: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
38579: LD_EXP 1
38583: PPUSH
38584: LD_STRING D4-JMM-2
38586: PPUSH
38587: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
38591: LD_EXP 23
38595: PPUSH
38596: LD_STRING D4-Pow-3
38598: PPUSH
38599: CALL_OW 94
// DialogueOff ;
38603: CALL_OW 7
// end ;
38607: END
// every 0 0$01 trigger JMMArrive = 1 do
38608: LD_EXP 39
38612: PUSH
38613: LD_INT 1
38615: EQUAL
38616: IFFALSE 38648
38618: GO 38620
38620: DISABLE
// begin wait ( 8 8$0 ) ;
38621: LD_INT 16800
38623: PPUSH
38624: CALL_OW 67
// DialogueOn ;
38628: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
38632: LD_EXP 23
38636: PPUSH
38637: LD_STRING D4a-Pow-1
38639: PPUSH
38640: CALL_OW 94
// DialogueOff ;
38644: CALL_OW 7
// end ;
38648: END
// every 0 0$01 trigger JMMArrive = 1 do
38649: LD_EXP 39
38653: PUSH
38654: LD_INT 1
38656: EQUAL
38657: IFFALSE 38702
38659: GO 38661
38661: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
38662: LD_INT 21000
38664: PUSH
38665: LD_INT 25200
38667: PUSH
38668: LD_INT 31500
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: LIST
38675: PUSH
38676: LD_OWVAR 67
38680: ARRAY
38681: PPUSH
38682: CALL_OW 67
// PrepareSikorsky ;
38686: CALL 5456 0 0
// SikorskyArrive = 1 ;
38690: LD_ADDR_EXP 18
38694: PUSH
38695: LD_INT 1
38697: ST_TO_ADDR
// PrepareSikorskyArmy ;
38698: CALL 5596 0 0
// end ;
38702: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
38703: LD_EXP 17
38707: PPUSH
38708: LD_INT 5
38710: PPUSH
38711: CALL_OW 308
38715: IFFALSE 38907
38717: GO 38719
38719: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
38720: LD_EXP 17
38724: PPUSH
38725: CALL_OW 87
// DialogueOn ;
38729: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
38733: LD_EXP 16
38737: PPUSH
38738: LD_STRING D5-Sik-1
38740: PPUSH
38741: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
38745: LD_EXP 1
38749: PPUSH
38750: LD_STRING D5-JMM-1a
38752: PPUSH
38753: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
38757: LD_EXP 16
38761: PPUSH
38762: LD_STRING D5-Sik-2
38764: PPUSH
38765: CALL_OW 88
// case query ( QSikorski ) of 1 :
38769: LD_STRING QSikorski
38771: PPUSH
38772: CALL_OW 97
38776: PUSH
38777: LD_INT 1
38779: DOUBLE
38780: EQUAL
38781: IFTRUE 38785
38783: GO 38808
38785: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
38786: LD_EXP 16
38790: PPUSH
38791: LD_STRING D5a-Sik-1
38793: PPUSH
38794: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
38798: LD_ADDR_EXP 19
38802: PUSH
38803: LD_INT 2100
38805: ST_TO_ADDR
// end ; 2 :
38806: GO 38895
38808: LD_INT 2
38810: DOUBLE
38811: EQUAL
38812: IFTRUE 38816
38814: GO 38839
38816: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
38817: LD_EXP 16
38821: PPUSH
38822: LD_STRING D5b-Sik-1
38824: PPUSH
38825: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
38829: LD_ADDR_EXP 19
38833: PUSH
38834: LD_INT 10500
38836: ST_TO_ADDR
// end ; 3 :
38837: GO 38895
38839: LD_INT 3
38841: DOUBLE
38842: EQUAL
38843: IFTRUE 38847
38845: GO 38894
38847: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
38848: LD_EXP 16
38852: PPUSH
38853: LD_STRING D5c-Sik-1
38855: PPUSH
38856: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
38860: LD_EXP 1
38864: PPUSH
38865: LD_STRING D5c-JMM-1
38867: PPUSH
38868: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
38872: LD_EXP 16
38876: PPUSH
38877: LD_STRING D5c-Sik-2
38879: PPUSH
38880: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
38884: LD_ADDR_EXP 19
38888: PUSH
38889: LD_INT 10500
38891: ST_TO_ADDR
// end ; end ;
38892: GO 38895
38894: POP
// DialogueOff ;
38895: CALL_OW 7
// timerStatus = 1 ;
38899: LD_ADDR_EXP 35
38903: PUSH
38904: LD_INT 1
38906: ST_TO_ADDR
// end ;
38907: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
38908: LD_EXP 19
38912: PUSH
38913: LD_INT 35
38915: LESS
38916: IFFALSE 38964
38918: GO 38920
38920: DISABLE
// begin timerStatus = 0 ;
38921: LD_ADDR_EXP 35
38925: PUSH
38926: LD_INT 0
38928: ST_TO_ADDR
// DialogueOn ;
38929: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
38933: LD_EXP 16
38937: PPUSH
38938: LD_STRING D6-Sik-1
38940: PPUSH
38941: CALL_OW 88
// DialogueOff ;
38945: CALL_OW 7
// SikorskyAI = 1 ;
38949: LD_ADDR_EXP 20
38953: PUSH
38954: LD_INT 1
38956: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
38957: LD_STRING M2
38959: PPUSH
38960: CALL_OW 337
// end ;
38964: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
38965: LD_EXP 17
38969: PPUSH
38970: LD_INT 18
38972: PPUSH
38973: CALL_OW 308
38977: IFFALSE 39061
38979: GO 38981
38981: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
38982: LD_EXP 16
38986: PPUSH
38987: LD_STRING D7-Sik-1
38989: PPUSH
38990: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
38994: LD_EXP 1
38998: PPUSH
38999: LD_INT 24
39001: PPUSH
39002: CALL_OW 308
39006: PUSH
39007: LD_EXP 1
39011: PPUSH
39012: CALL_OW 310
39016: OR
39017: IFFALSE 39041
// begin Say ( Sikorski , D7a-Sik-1 ) ;
39019: LD_EXP 16
39023: PPUSH
39024: LD_STRING D7a-Sik-1
39026: PPUSH
39027: CALL_OW 88
// SikorskyStatus = 1 ;
39031: LD_ADDR_EXP 21
39035: PUSH
39036: LD_INT 1
39038: ST_TO_ADDR
// end else
39039: GO 39061
// begin Say ( Sikorski , D7b-Sik-1 ) ;
39041: LD_EXP 16
39045: PPUSH
39046: LD_STRING D7b-Sik-1
39048: PPUSH
39049: CALL_OW 88
// SikorskyStatus = 2 ;
39053: LD_ADDR_EXP 21
39057: PUSH
39058: LD_INT 2
39060: ST_TO_ADDR
// end ; end ;
39061: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
39062: LD_EXP 36
39066: PUSH
39067: LD_INT 1
39069: EQUAL
39070: IFFALSE 39179
39072: GO 39074
39074: DISABLE
39075: LD_INT 0
39077: PPUSH
// begin enable ;
39078: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
39079: LD_ADDR_VAR 0 1
39083: PUSH
39084: LD_INT 22
39086: PUSH
39087: LD_INT 3
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PPUSH
39094: CALL_OW 69
39098: PUSH
39099: FOR_IN
39100: IFFALSE 39127
// if IsInArea ( i , RussianEscape ) then
39102: LD_VAR 0 1
39106: PPUSH
39107: LD_INT 22
39109: PPUSH
39110: CALL_OW 308
39114: IFFALSE 39125
// RemoveUnit ( i ) ;
39116: LD_VAR 0 1
39120: PPUSH
39121: CALL_OW 64
39125: GO 39099
39127: POP
39128: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
39129: LD_ADDR_VAR 0 1
39133: PUSH
39134: LD_INT 22
39136: PUSH
39137: LD_INT 6
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PPUSH
39144: CALL_OW 69
39148: PUSH
39149: FOR_IN
39150: IFFALSE 39177
// if IsInArea ( i , RussianEscape ) then
39152: LD_VAR 0 1
39156: PPUSH
39157: LD_INT 22
39159: PPUSH
39160: CALL_OW 308
39164: IFFALSE 39175
// RemoveUnit ( i ) ;
39166: LD_VAR 0 1
39170: PPUSH
39171: CALL_OW 64
39175: GO 39149
39177: POP
39178: POP
// end ; end_of_file
39179: PPOPN 1
39181: END
// on BuildingComplete ( building ) do var tmp , un ;
39182: LD_INT 0
39184: PPUSH
39185: PPUSH
// begin if GetSide ( building ) = 3 then
39186: LD_VAR 0 1
39190: PPUSH
39191: CALL_OW 255
39195: PUSH
39196: LD_INT 3
39198: EQUAL
39199: IFFALSE 39686
// begin if GetBType ( building ) = b_depot then
39201: LD_VAR 0 1
39205: PPUSH
39206: CALL_OW 266
39210: PUSH
39211: LD_INT 0
39213: EQUAL
39214: IFFALSE 39282
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
39216: LD_VAR 0 1
39220: PPUSH
39221: CALL_OW 274
39225: PPUSH
39226: LD_INT 1
39228: PPUSH
39229: LD_INT 5000
39231: PPUSH
39232: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
39236: LD_VAR 0 1
39240: PPUSH
39241: CALL_OW 274
39245: PPUSH
39246: LD_INT 2
39248: PPUSH
39249: LD_INT 5000
39251: PPUSH
39252: CALL_OW 277
// SetBName ( building , konev ) ;
39256: LD_VAR 0 1
39260: PPUSH
39261: LD_STRING konev
39263: PPUSH
39264: CALL_OW 500
// ruDepot = building ;
39268: LD_ADDR_EXP 28
39272: PUSH
39273: LD_VAR 0 1
39277: ST_TO_ADDR
// BuildRussianBase ;
39278: CALL 7505 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
39282: LD_VAR 0 1
39286: PPUSH
39287: CALL_OW 266
39291: PUSH
39292: LD_INT 0
39294: EQUAL
39295: PUSH
39296: LD_VAR 0 1
39300: PPUSH
39301: CALL_OW 266
39305: PUSH
39306: LD_INT 2
39308: EQUAL
39309: OR
39310: PUSH
39311: LD_VAR 0 1
39315: PPUSH
39316: CALL_OW 266
39320: PUSH
39321: LD_INT 4
39323: EQUAL
39324: OR
39325: IFFALSE 39336
// ComUpgrade ( building ) ;
39327: LD_VAR 0 1
39331: PPUSH
39332: CALL_OW 146
// if GetBType ( building ) = b_lab then
39336: LD_VAR 0 1
39340: PPUSH
39341: CALL_OW 266
39345: PUSH
39346: LD_INT 6
39348: EQUAL
39349: IFFALSE 39400
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
39351: LD_VAR 0 1
39355: PPUSH
39356: LD_INT 10
39358: PPUSH
39359: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
39363: LD_VAR 0 1
39367: PPUSH
39368: LD_INT 12
39370: PPUSH
39371: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
39375: LD_INT 3
39377: PPUSH
39378: LD_VAR 0 1
39382: PPUSH
39383: LD_INT 3
39385: PPUSH
39386: CALL 8060 0 3
// ruLab = building ;
39390: LD_ADDR_EXP 29
39394: PUSH
39395: LD_VAR 0 1
39399: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
39400: LD_VAR 0 1
39404: PPUSH
39405: CALL_OW 266
39409: PUSH
39410: LD_INT 32
39412: EQUAL
39413: IFFALSE 39531
// begin uc_side = 3 ;
39415: LD_ADDR_OWVAR 20
39419: PUSH
39420: LD_INT 3
39422: ST_TO_ADDR
// uc_nation = 3 ;
39423: LD_ADDR_OWVAR 21
39427: PUSH
39428: LD_INT 3
39430: ST_TO_ADDR
// hc_gallery =  ;
39431: LD_ADDR_OWVAR 33
39435: PUSH
39436: LD_STRING 
39438: ST_TO_ADDR
// hc_name =  ;
39439: LD_ADDR_OWVAR 26
39443: PUSH
39444: LD_STRING 
39446: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
39447: LD_INT 0
39449: PPUSH
39450: LD_INT 1
39452: PPUSH
39453: LD_EXP 25
39457: PPUSH
39458: LD_EXP 26
39462: PPUSH
39463: CALL_OW 12
39467: PPUSH
39468: CALL_OW 380
// un = CreateHuman ;
39472: LD_ADDR_VAR 0 3
39476: PUSH
39477: CALL_OW 44
39481: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
39482: LD_VAR 0 3
39486: PPUSH
39487: LD_VAR 0 1
39491: PPUSH
39492: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
39496: LD_VAR 0 1
39500: PPUSH
39501: LD_INT 43
39503: PUSH
39504: LD_INT 44
39506: PUSH
39507: LD_INT 46
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: PPUSH
39518: LD_INT 3
39520: PPUSH
39521: CALL_OW 12
39525: ARRAY
39526: PPUSH
39527: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
39531: LD_VAR 0 1
39535: PPUSH
39536: CALL_OW 266
39540: PUSH
39541: LD_INT 33
39543: EQUAL
39544: IFFALSE 39581
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
39546: LD_VAR 0 1
39550: PPUSH
39551: LD_INT 43
39553: PUSH
39554: LD_INT 44
39556: PUSH
39557: LD_INT 46
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: PPUSH
39568: LD_INT 3
39570: PPUSH
39571: CALL_OW 12
39575: ARRAY
39576: PPUSH
39577: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
39581: LD_VAR 0 1
39585: PPUSH
39586: CALL_OW 266
39590: PUSH
39591: LD_INT 24
39593: EQUAL
39594: IFFALSE 39604
// russianAI = 1 ;
39596: LD_ADDR_EXP 27
39600: PUSH
39601: LD_INT 1
39603: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
39604: LD_EXP 31
39608: PUSH
39609: LD_INT 0
39611: GREATER
39612: IFFALSE 39686
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
39614: LD_ADDR_EXP 31
39618: PUSH
39619: LD_EXP 31
39623: PPUSH
39624: LD_INT 1
39626: PPUSH
39627: CALL_OW 3
39631: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
39632: LD_ADDR_EXP 31
39636: PUSH
39637: LD_EXP 31
39641: PPUSH
39642: LD_INT 1
39644: PPUSH
39645: CALL_OW 3
39649: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
39650: LD_ADDR_EXP 31
39654: PUSH
39655: LD_EXP 31
39659: PPUSH
39660: LD_INT 1
39662: PPUSH
39663: CALL_OW 3
39667: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
39668: LD_ADDR_EXP 31
39672: PUSH
39673: LD_EXP 31
39677: PPUSH
39678: LD_INT 1
39680: PPUSH
39681: CALL_OW 3
39685: ST_TO_ADDR
// end ; end ; end ;
39686: PPOPN 3
39688: END
// on UpgradeComplete ( building ) do var i ;
39689: LD_INT 0
39691: PPUSH
// begin if GetSide ( building ) = 3 then
39692: LD_VAR 0 1
39696: PPUSH
39697: CALL_OW 255
39701: PUSH
39702: LD_INT 3
39704: EQUAL
39705: IFFALSE 39886
// begin if GetBType ( building ) = b_factory then
39707: LD_VAR 0 1
39711: PPUSH
39712: CALL_OW 266
39716: PUSH
39717: LD_INT 3
39719: EQUAL
39720: IFFALSE 39787
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
39722: LD_ADDR_VAR 0 2
39726: PUSH
39727: LD_INT 22
39729: PUSH
39730: LD_INT 3
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 25
39739: PUSH
39740: LD_INT 3
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PPUSH
39751: CALL_OW 69
39755: PUSH
39756: FOR_IN
39757: IFFALSE 39775
// ComEnterUnit ( i , building ) ;
39759: LD_VAR 0 2
39763: PPUSH
39764: LD_VAR 0 1
39768: PPUSH
39769: CALL_OW 120
39773: GO 39756
39775: POP
39776: POP
// ruFab = building ;
39777: LD_ADDR_EXP 30
39781: PUSH
39782: LD_VAR 0 1
39786: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
39787: LD_VAR 0 1
39791: PPUSH
39792: CALL_OW 266
39796: PUSH
39797: LD_INT 8
39799: EQUAL
39800: IFFALSE 39857
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
39802: LD_ADDR_VAR 0 2
39806: PUSH
39807: LD_INT 22
39809: PUSH
39810: LD_INT 3
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 25
39819: PUSH
39820: LD_INT 4
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PPUSH
39831: CALL_OW 69
39835: PUSH
39836: FOR_IN
39837: IFFALSE 39855
// ComEnterUnit ( i , building ) ;
39839: LD_VAR 0 2
39843: PPUSH
39844: LD_VAR 0 1
39848: PPUSH
39849: CALL_OW 120
39853: GO 39836
39855: POP
39856: POP
// if GetBType ( building ) = b_warehouse then
39857: LD_VAR 0 1
39861: PPUSH
39862: CALL_OW 266
39866: PUSH
39867: LD_INT 1
39869: EQUAL
39870: IFFALSE 39886
// begin ComEnterUnit ( Borodin , building ) ;
39872: LD_EXP 24
39876: PPUSH
39877: LD_VAR 0 1
39881: PPUSH
39882: CALL_OW 120
// end ; end ; end ;
39886: PPOPN 2
39888: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
39889: LD_VAR 0 1
39893: PPUSH
39894: CALL_OW 247
39898: PUSH
39899: LD_INT 2
39901: EQUAL
39902: PUSH
39903: LD_VAR 0 1
39907: PPUSH
39908: CALL_OW 263
39912: PUSH
39913: LD_INT 3
39915: EQUAL
39916: AND
39917: PUSH
39918: LD_EXP 41
39922: PUSH
39923: LD_INT 0
39925: EQUAL
39926: AND
39927: IFFALSE 40045
// begin varEvent1 = 1 ;
39929: LD_ADDR_EXP 41
39933: PUSH
39934: LD_INT 1
39936: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
39937: LD_VAR 0 1
39941: PPUSH
39942: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
39946: LD_INT 22
39948: PUSH
39949: LD_INT 1
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 21
39958: PUSH
39959: LD_INT 1
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 2
39968: PUSH
39969: LD_INT 25
39971: PUSH
39972: LD_INT 1
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 25
39981: PUSH
39982: LD_INT 2
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 25
39991: PUSH
39992: LD_INT 3
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 25
40001: PUSH
40002: LD_INT 4
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: LIST
40020: PPUSH
40021: CALL_OW 69
40025: PUSH
40026: LD_EXP 1
40030: PUSH
40031: EMPTY
40032: LIST
40033: DIFF
40034: PPUSH
40035: LD_STRING DC-Sol1-1
40037: PPUSH
40038: LD_STRING DC-FSol1-1
40040: PPUSH
40041: CALL 6900 0 3
// end ; end ;
40045: PPOPN 1
40047: END
// on UnitDestroyed ( unit ) do var i ;
40048: LD_INT 0
40050: PPUSH
// begin if GetSide ( unit ) = 3 then
40051: LD_VAR 0 1
40055: PPUSH
40056: CALL_OW 255
40060: PUSH
40061: LD_INT 3
40063: EQUAL
40064: IFFALSE 40834
// begin if GetType ( unit ) = unit_building then
40066: LD_VAR 0 1
40070: PPUSH
40071: CALL_OW 247
40075: PUSH
40076: LD_INT 3
40078: EQUAL
40079: IFFALSE 40771
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
40081: LD_VAR 0 1
40085: PPUSH
40086: CALL_OW 266
40090: PUSH
40091: LD_INT 31
40093: EQUAL
40094: PUSH
40095: LD_VAR 0 1
40099: PPUSH
40100: CALL_OW 266
40104: PUSH
40105: LD_INT 32
40107: EQUAL
40108: OR
40109: PUSH
40110: LD_VAR 0 1
40114: PPUSH
40115: CALL_OW 266
40119: PUSH
40120: LD_INT 36
40122: EQUAL
40123: OR
40124: PUSH
40125: LD_VAR 0 1
40129: PPUSH
40130: CALL_OW 266
40134: PUSH
40135: LD_INT 0
40137: EQUAL
40138: OR
40139: PUSH
40140: LD_VAR 0 1
40144: PPUSH
40145: CALL_OW 266
40149: PUSH
40150: LD_INT 24
40152: EQUAL
40153: OR
40154: PUSH
40155: LD_VAR 0 1
40159: PPUSH
40160: CALL_OW 266
40164: PUSH
40165: LD_INT 17
40167: EQUAL
40168: OR
40169: PUSH
40170: LD_VAR 0 1
40174: PPUSH
40175: CALL_OW 266
40179: PUSH
40180: LD_INT 25
40182: EQUAL
40183: OR
40184: PUSH
40185: LD_VAR 0 1
40189: PPUSH
40190: CALL_OW 266
40194: PUSH
40195: LD_INT 19
40197: EQUAL
40198: OR
40199: PUSH
40200: LD_VAR 0 1
40204: PPUSH
40205: CALL_OW 266
40209: PUSH
40210: LD_INT 20
40212: EQUAL
40213: OR
40214: PUSH
40215: LD_VAR 0 1
40219: PPUSH
40220: CALL_OW 266
40224: PUSH
40225: LD_INT 18
40227: EQUAL
40228: OR
40229: PUSH
40230: LD_VAR 0 1
40234: PPUSH
40235: CALL_OW 266
40239: PUSH
40240: LD_INT 21
40242: EQUAL
40243: OR
40244: PUSH
40245: LD_VAR 0 1
40249: PPUSH
40250: CALL_OW 266
40254: PUSH
40255: LD_INT 23
40257: EQUAL
40258: OR
40259: PUSH
40260: LD_VAR 0 1
40264: PPUSH
40265: CALL_OW 266
40269: PUSH
40270: LD_INT 16
40272: EQUAL
40273: OR
40274: PUSH
40275: LD_VAR 0 1
40279: PPUSH
40280: CALL_OW 266
40284: PUSH
40285: LD_INT 6
40287: EQUAL
40288: OR
40289: PUSH
40290: LD_VAR 0 1
40294: PPUSH
40295: CALL_OW 266
40299: PUSH
40300: LD_INT 29
40302: EQUAL
40303: OR
40304: PUSH
40305: LD_VAR 0 1
40309: PPUSH
40310: CALL_OW 266
40314: PUSH
40315: LD_INT 26
40317: EQUAL
40318: OR
40319: PUSH
40320: LD_VAR 0 1
40324: PPUSH
40325: CALL_OW 266
40329: PUSH
40330: LD_INT 30
40332: EQUAL
40333: OR
40334: PUSH
40335: LD_VAR 0 1
40339: PPUSH
40340: CALL_OW 266
40344: PUSH
40345: LD_INT 28
40347: EQUAL
40348: OR
40349: PUSH
40350: LD_VAR 0 1
40354: PPUSH
40355: CALL_OW 266
40359: PUSH
40360: LD_INT 27
40362: EQUAL
40363: OR
40364: PUSH
40365: LD_VAR 0 1
40369: PPUSH
40370: CALL_OW 266
40374: PUSH
40375: LD_INT 33
40377: EQUAL
40378: OR
40379: PUSH
40380: LD_VAR 0 1
40384: PPUSH
40385: CALL_OW 266
40389: PUSH
40390: LD_INT 2
40392: EQUAL
40393: OR
40394: PUSH
40395: LD_VAR 0 1
40399: PPUSH
40400: CALL_OW 266
40404: PUSH
40405: LD_INT 4
40407: EQUAL
40408: OR
40409: IFFALSE 40495
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
40411: LD_ADDR_EXP 31
40415: PUSH
40416: LD_EXP 31
40420: PUSH
40421: LD_VAR 0 1
40425: PPUSH
40426: CALL_OW 266
40430: ADD
40431: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
40432: LD_ADDR_EXP 31
40436: PUSH
40437: LD_EXP 31
40441: PUSH
40442: LD_VAR 0 1
40446: PPUSH
40447: CALL_OW 250
40451: ADD
40452: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
40453: LD_ADDR_EXP 31
40457: PUSH
40458: LD_EXP 31
40462: PUSH
40463: LD_VAR 0 1
40467: PPUSH
40468: CALL_OW 251
40472: ADD
40473: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
40474: LD_ADDR_EXP 31
40478: PUSH
40479: LD_EXP 31
40483: PUSH
40484: LD_VAR 0 1
40488: PPUSH
40489: CALL_OW 254
40493: ADD
40494: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
40495: LD_VAR 0 1
40499: PPUSH
40500: CALL_OW 266
40504: PUSH
40505: LD_INT 1
40507: EQUAL
40508: IFFALSE 40587
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
40510: LD_ADDR_EXP 31
40514: PUSH
40515: LD_EXP 31
40519: PUSH
40520: LD_INT 0
40522: ADD
40523: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
40524: LD_ADDR_EXP 31
40528: PUSH
40529: LD_EXP 31
40533: PUSH
40534: LD_VAR 0 1
40538: PPUSH
40539: CALL_OW 250
40543: ADD
40544: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
40545: LD_ADDR_EXP 31
40549: PUSH
40550: LD_EXP 31
40554: PUSH
40555: LD_VAR 0 1
40559: PPUSH
40560: CALL_OW 251
40564: ADD
40565: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
40566: LD_ADDR_EXP 31
40570: PUSH
40571: LD_EXP 31
40575: PUSH
40576: LD_VAR 0 1
40580: PPUSH
40581: CALL_OW 254
40585: ADD
40586: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
40587: LD_VAR 0 1
40591: PPUSH
40592: CALL_OW 266
40596: PUSH
40597: LD_INT 3
40599: EQUAL
40600: IFFALSE 40679
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
40602: LD_ADDR_EXP 31
40606: PUSH
40607: LD_EXP 31
40611: PUSH
40612: LD_INT 2
40614: ADD
40615: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
40616: LD_ADDR_EXP 31
40620: PUSH
40621: LD_EXP 31
40625: PUSH
40626: LD_VAR 0 1
40630: PPUSH
40631: CALL_OW 250
40635: ADD
40636: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
40637: LD_ADDR_EXP 31
40641: PUSH
40642: LD_EXP 31
40646: PUSH
40647: LD_VAR 0 1
40651: PPUSH
40652: CALL_OW 251
40656: ADD
40657: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
40658: LD_ADDR_EXP 31
40662: PUSH
40663: LD_EXP 31
40667: PUSH
40668: LD_VAR 0 1
40672: PPUSH
40673: CALL_OW 254
40677: ADD
40678: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
40679: LD_VAR 0 1
40683: PPUSH
40684: CALL_OW 266
40688: PUSH
40689: LD_INT 5
40691: EQUAL
40692: IFFALSE 40771
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
40694: LD_ADDR_EXP 31
40698: PUSH
40699: LD_EXP 31
40703: PUSH
40704: LD_INT 4
40706: ADD
40707: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
40708: LD_ADDR_EXP 31
40712: PUSH
40713: LD_EXP 31
40717: PUSH
40718: LD_VAR 0 1
40722: PPUSH
40723: CALL_OW 250
40727: ADD
40728: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
40729: LD_ADDR_EXP 31
40733: PUSH
40734: LD_EXP 31
40738: PUSH
40739: LD_VAR 0 1
40743: PPUSH
40744: CALL_OW 251
40748: ADD
40749: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
40750: LD_ADDR_EXP 31
40754: PUSH
40755: LD_EXP 31
40759: PUSH
40760: LD_VAR 0 1
40764: PPUSH
40765: CALL_OW 254
40769: ADD
40770: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
40771: LD_VAR 0 1
40775: PPUSH
40776: CALL_OW 247
40780: PUSH
40781: LD_INT 1
40783: EQUAL
40784: IFFALSE 40834
// begin for i in defenders_list do
40786: LD_ADDR_VAR 0 2
40790: PUSH
40791: LD_EXP 32
40795: PUSH
40796: FOR_IN
40797: IFFALSE 40832
// if i = unit then
40799: LD_VAR 0 2
40803: PUSH
40804: LD_VAR 0 1
40808: EQUAL
40809: IFFALSE 40830
// defenders_list = defenders_list diff [ unit ] ;
40811: LD_ADDR_EXP 32
40815: PUSH
40816: LD_EXP 32
40820: PUSH
40821: LD_VAR 0 1
40825: PUSH
40826: EMPTY
40827: LIST
40828: DIFF
40829: ST_TO_ADDR
40830: GO 40796
40832: POP
40833: POP
// end ; end ; end ; end_of_file
40834: PPOPN 2
40836: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
40837: GO 40839
40839: DISABLE
40840: LD_INT 0
40842: PPUSH
// begin enemyWayX = [ ] ;
40843: LD_ADDR_EXP 45
40847: PUSH
40848: EMPTY
40849: ST_TO_ADDR
// enemyWayY = [ ] ;
40850: LD_ADDR_EXP 46
40854: PUSH
40855: EMPTY
40856: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
40857: LD_ADDR_VAR 0 1
40861: PUSH
40862: LD_INT 1
40864: PPUSH
40865: LD_INT 3
40867: PPUSH
40868: CALL_OW 12
40872: ST_TO_ADDR
// if rnd = 1 then
40873: LD_VAR 0 1
40877: PUSH
40878: LD_INT 1
40880: EQUAL
40881: IFFALSE 40921
// begin enemyWayX = [ 73 , 46 , 29 ] ;
40883: LD_ADDR_EXP 45
40887: PUSH
40888: LD_INT 73
40890: PUSH
40891: LD_INT 46
40893: PUSH
40894: LD_INT 29
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: LIST
40901: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
40902: LD_ADDR_EXP 46
40906: PUSH
40907: LD_INT 71
40909: PUSH
40910: LD_INT 43
40912: PUSH
40913: LD_INT 29
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: LIST
40920: ST_TO_ADDR
// end ; if rnd = 2 then
40921: LD_VAR 0 1
40925: PUSH
40926: LD_INT 2
40928: EQUAL
40929: IFFALSE 40953
// begin enemyWayX = [ 64 ] ;
40931: LD_ADDR_EXP 45
40935: PUSH
40936: LD_INT 64
40938: PUSH
40939: EMPTY
40940: LIST
40941: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
40942: LD_ADDR_EXP 46
40946: PUSH
40947: LD_INT 43
40949: PUSH
40950: EMPTY
40951: LIST
40952: ST_TO_ADDR
// end ; if rnd = 3 then
40953: LD_VAR 0 1
40957: PUSH
40958: LD_INT 3
40960: EQUAL
40961: IFFALSE 40985
// begin enemyWayX = [ 80 ] ;
40963: LD_ADDR_EXP 45
40967: PUSH
40968: LD_INT 80
40970: PUSH
40971: EMPTY
40972: LIST
40973: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
40974: LD_ADDR_EXP 46
40978: PUSH
40979: LD_INT 28
40981: PUSH
40982: EMPTY
40983: LIST
40984: ST_TO_ADDR
// end ; enable ;
40985: ENABLE
// end ;
40986: PPOPN 1
40988: END
// every 0 0$1 do
40989: GO 40991
40991: DISABLE
// begin enable ;
40992: ENABLE
// if escapeAvalaible = 0 then
40993: LD_EXP 36
40997: PUSH
40998: LD_INT 0
41000: EQUAL
41001: IFFALSE 41013
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
41003: LD_INT 3
41005: PPUSH
41006: LD_INT 6
41008: PPUSH
41009: CALL 8301 0 2
// if escapeAvalaible = 0 then
41013: LD_EXP 36
41017: PUSH
41018: LD_INT 0
41020: EQUAL
41021: IFFALSE 41033
// DefenseBase ( 1 , RussianBaseTerritory ) ;
41023: LD_INT 1
41025: PPUSH
41026: LD_INT 24
41028: PPUSH
41029: CALL 8961 0 2
// if russianAI = 1 then
41033: LD_EXP 27
41037: PUSH
41038: LD_INT 1
41040: EQUAL
41041: IFFALSE 41111
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
41043: LD_INT 3
41045: PPUSH
41046: LD_INT 7
41048: PPUSH
41049: LD_INT 6
41051: PPUSH
41052: LD_EXP 29
41056: PPUSH
41057: CALL 11399 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
41061: LD_INT 3
41063: PPUSH
41064: LD_EXP 28
41068: PPUSH
41069: LD_INT 6
41071: PPUSH
41072: LD_EXP 31
41076: PPUSH
41077: CALL 10993 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
41081: LD_INT 3
41083: PPUSH
41084: LD_INT 26
41086: PPUSH
41087: LD_EXP 45
41091: PPUSH
41092: LD_EXP 46
41096: PPUSH
41097: CALL 9861 0 4
// AttackNearBuildings ( 3 , 1 ) ;
41101: LD_INT 3
41103: PPUSH
41104: LD_INT 1
41106: PPUSH
41107: CALL 11943 0 2
// end ; if SikorskyArrive = 1 then
41111: LD_EXP 18
41115: PUSH
41116: LD_INT 1
41118: EQUAL
41119: IFFALSE 41137
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
41121: LD_INT 3
41123: PPUSH
41124: LD_INT 10
41126: PPUSH
41127: LD_INT 53
41129: PPUSH
41130: LD_INT 59
41132: PPUSH
41133: CALL 9658 0 4
// end ;
41137: END
// every 0 0$1 trigger russianAI = 1 do var i ;
41138: LD_EXP 27
41142: PUSH
41143: LD_INT 1
41145: EQUAL
41146: IFFALSE 41422
41148: GO 41150
41150: DISABLE
41151: LD_INT 0
41153: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41154: LD_ADDR_VAR 0 1
41158: PUSH
41159: LD_INT 22
41161: PUSH
41162: LD_INT 3
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 21
41171: PUSH
41172: LD_INT 3
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 30
41181: PUSH
41182: LD_INT 32
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 3
41191: PUSH
41192: LD_INT 2
41194: PUSH
41195: LD_INT 35
41197: PUSH
41198: LD_INT 43
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 35
41207: PUSH
41208: LD_INT 44
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 35
41217: PUSH
41218: LD_INT 46
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: PPUSH
41241: CALL_OW 69
41245: PUSH
41246: FOR_IN
41247: IFFALSE 41286
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41249: LD_VAR 0 1
41253: PPUSH
41254: LD_INT 43
41256: PUSH
41257: LD_INT 44
41259: PUSH
41260: LD_INT 46
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: PPUSH
41271: LD_INT 3
41273: PPUSH
41274: CALL_OW 12
41278: ARRAY
41279: PPUSH
41280: CALL_OW 431
41284: GO 41246
41286: POP
41287: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41288: LD_ADDR_VAR 0 1
41292: PUSH
41293: LD_INT 22
41295: PUSH
41296: LD_INT 3
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 21
41305: PUSH
41306: LD_INT 3
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 30
41315: PUSH
41316: LD_INT 33
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 3
41325: PUSH
41326: LD_INT 2
41328: PUSH
41329: LD_INT 35
41331: PUSH
41332: LD_INT 43
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 35
41341: PUSH
41342: LD_INT 44
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 35
41351: PUSH
41352: LD_INT 46
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: PPUSH
41375: CALL_OW 69
41379: PUSH
41380: FOR_IN
41381: IFFALSE 41420
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41383: LD_VAR 0 1
41387: PPUSH
41388: LD_INT 43
41390: PUSH
41391: LD_INT 44
41393: PUSH
41394: LD_INT 46
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: PPUSH
41405: LD_INT 3
41407: PPUSH
41408: CALL_OW 12
41412: ARRAY
41413: PPUSH
41414: CALL_OW 431
41418: GO 41380
41420: POP
41421: POP
// end ;
41422: PPOPN 1
41424: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
41425: LD_EXP 24
41429: PPUSH
41430: CALL_OW 310
41434: NOT
41435: PUSH
41436: LD_EXP 28
41440: PPUSH
41441: CALL_OW 302
41445: AND
41446: PUSH
41447: LD_EXP 28
41451: PPUSH
41452: CALL_OW 255
41456: PUSH
41457: LD_INT 3
41459: EQUAL
41460: AND
41461: IFFALSE 41481
41463: GO 41465
41465: DISABLE
// begin enable ;
41466: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
41467: LD_EXP 24
41471: PPUSH
41472: LD_EXP 28
41476: PPUSH
41477: CALL_OW 120
// end ;
41481: END
// every 0 0$1 trigger SikorskyAI = 1 do
41482: LD_EXP 20
41486: PUSH
41487: LD_INT 1
41489: EQUAL
41490: IFFALSE 41525
41492: GO 41494
41494: DISABLE
// begin enable ;
41495: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
41496: LD_INT 4
41498: PPUSH
41499: LD_INT 10
41501: PPUSH
41502: LD_INT 93
41504: PPUSH
41505: LD_INT 93
41507: PPUSH
41508: CALL 9658 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
41512: LD_INT 4
41514: PPUSH
41515: LD_INT 11
41517: PPUSH
41518: LD_INT 3
41520: PPUSH
41521: CALL 16155 0 3
// end ;
41525: END
// every 0 0$1 trigger SikorskyAI = 1 do
41526: LD_EXP 20
41530: PUSH
41531: LD_INT 1
41533: EQUAL
41534: IFFALSE 41546
41536: GO 41538
41538: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
41539: LD_INT 4
41541: PPUSH
41542: CALL 10665 0 1
41546: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
41547: LD_EXP 27
41551: PUSH
41552: LD_INT 1
41554: EQUAL
41555: PUSH
41556: LD_EXP 30
41560: PPUSH
41561: CALL_OW 302
41565: AND
41566: PUSH
41567: LD_EXP 30
41571: PPUSH
41572: CALL_OW 255
41576: PUSH
41577: LD_INT 3
41579: EQUAL
41580: AND
41581: PUSH
41582: LD_INT 22
41584: PUSH
41585: LD_INT 3
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 21
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 33
41604: PUSH
41605: LD_INT 3
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: LIST
41616: PPUSH
41617: CALL_OW 69
41621: PUSH
41622: LD_INT 0
41624: EQUAL
41625: AND
41626: IFFALSE 41860
41628: GO 41630
41630: DISABLE
// begin enable ;
41631: ENABLE
// if Difficulty = 1 then
41632: LD_OWVAR 67
41636: PUSH
41637: LD_INT 1
41639: EQUAL
41640: IFFALSE 41708
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
41642: LD_INT 3
41644: PPUSH
41645: LD_EXP 30
41649: PPUSH
41650: LD_INT 5
41652: PPUSH
41653: LD_INT 8
41655: PPUSH
41656: CALL_OW 12
41660: PPUSH
41661: LD_INT 43
41663: PUSH
41664: LD_INT 43
41666: PUSH
41667: LD_INT 43
41669: PUSH
41670: LD_INT 43
41672: PUSH
41673: LD_INT 44
41675: PUSH
41676: LD_INT 44
41678: PUSH
41679: LD_INT 44
41681: PUSH
41682: LD_INT 46
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: PPUSH
41695: LD_INT 1
41697: PPUSH
41698: LD_INT 3
41700: PPUSH
41701: LD_INT 24
41703: PPUSH
41704: CALL 9504 0 7
// if Difficulty = 2 then
41708: LD_OWVAR 67
41712: PUSH
41713: LD_INT 2
41715: EQUAL
41716: IFFALSE 41784
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
41718: LD_INT 3
41720: PPUSH
41721: LD_EXP 30
41725: PPUSH
41726: LD_INT 6
41728: PPUSH
41729: LD_INT 8
41731: PPUSH
41732: CALL_OW 12
41736: PPUSH
41737: LD_INT 43
41739: PUSH
41740: LD_INT 43
41742: PUSH
41743: LD_INT 44
41745: PUSH
41746: LD_INT 44
41748: PUSH
41749: LD_INT 44
41751: PUSH
41752: LD_INT 44
41754: PUSH
41755: LD_INT 46
41757: PUSH
41758: LD_INT 46
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: PPUSH
41771: LD_INT 1
41773: PPUSH
41774: LD_INT 3
41776: PPUSH
41777: LD_INT 24
41779: PPUSH
41780: CALL 9504 0 7
// if Difficulty = 3 then
41784: LD_OWVAR 67
41788: PUSH
41789: LD_INT 3
41791: EQUAL
41792: IFFALSE 41860
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
41794: LD_INT 3
41796: PPUSH
41797: LD_EXP 30
41801: PPUSH
41802: LD_INT 7
41804: PPUSH
41805: LD_INT 8
41807: PPUSH
41808: CALL_OW 12
41812: PPUSH
41813: LD_INT 43
41815: PUSH
41816: LD_INT 43
41818: PUSH
41819: LD_INT 44
41821: PUSH
41822: LD_INT 44
41824: PUSH
41825: LD_INT 44
41827: PUSH
41828: LD_INT 46
41830: PUSH
41831: LD_INT 46
41833: PUSH
41834: LD_INT 46
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: PPUSH
41847: LD_INT 1
41849: PPUSH
41850: LD_INT 3
41852: PPUSH
41853: LD_INT 24
41855: PPUSH
41856: CALL 9504 0 7
// end ;
41860: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
41861: LD_EXP 38
41865: PUSH
41866: LD_INT 1
41868: EQUAL
41869: IFFALSE 41951
41871: GO 41873
41873: DISABLE
41874: LD_INT 0
41876: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
41877: LD_ADDR_VAR 0 1
41881: PUSH
41882: LD_INT 22
41884: PUSH
41885: LD_INT 1
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 21
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 3
41904: PUSH
41905: LD_INT 24
41907: PUSH
41908: LD_INT 650
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: LIST
41923: PPUSH
41924: CALL_OW 69
41928: PUSH
41929: FOR_IN
41930: IFFALSE 41949
// ComMoveXY ( i , 51 , 12 ) ;
41932: LD_VAR 0 1
41936: PPUSH
41937: LD_INT 51
41939: PPUSH
41940: LD_INT 12
41942: PPUSH
41943: CALL_OW 111
41947: GO 41929
41949: POP
41950: POP
// end ; end_of_file
41951: PPOPN 1
41953: END
// every 3 3$20 trigger firstAttack = 1 do
41954: LD_EXP 33
41958: PUSH
41959: LD_INT 1
41961: EQUAL
41962: IFFALSE 42068
41964: GO 41966
41966: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
41967: LD_INT 6
41969: PPUSH
41970: LD_INT 3
41972: PPUSH
41973: LD_INT 5
41975: PPUSH
41976: LD_INT 6
41978: PPUSH
41979: CALL_OW 12
41983: PUSH
41984: LD_INT 5
41986: PPUSH
41987: LD_INT 6
41989: PPUSH
41990: CALL_OW 12
41994: PUSH
41995: LD_INT 5
41997: PPUSH
41998: LD_INT 6
42000: PPUSH
42001: CALL_OW 12
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: LIST
42010: PUSH
42011: LD_OWVAR 67
42015: ARRAY
42016: PPUSH
42017: LD_INT 0
42019: PPUSH
42020: LD_INT 0
42022: PPUSH
42023: LD_INT 0
42025: PPUSH
42026: LD_INT 0
42028: PPUSH
42029: LD_EXP 25
42033: PPUSH
42034: LD_EXP 26
42038: PPUSH
42039: CALL_OW 12
42043: PPUSH
42044: LD_INT 16
42046: PPUSH
42047: LD_INT 7
42049: PPUSH
42050: LD_INT 1
42052: PPUSH
42053: LD_INT 1
42055: PPUSH
42056: LD_INT 3
42058: PPUSH
42059: CALL_OW 12
42063: PPUSH
42064: CALL 12173 0 12
42068: END
// every 3 3$40 trigger firstAttack = 1 do
42069: LD_EXP 33
42073: PUSH
42074: LD_INT 1
42076: EQUAL
42077: IFFALSE 42169
42079: GO 42081
42081: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42082: LD_INT 16
42084: PPUSH
42085: LD_INT 6
42087: PPUSH
42088: LD_INT 3
42090: PPUSH
42091: LD_INT 4
42093: PPUSH
42094: CALL_OW 12
42098: PUSH
42099: LD_INT 4
42101: PPUSH
42102: LD_INT 5
42104: PPUSH
42105: CALL_OW 12
42109: PUSH
42110: LD_INT 5
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: LIST
42117: PUSH
42118: LD_OWVAR 67
42122: ARRAY
42123: PPUSH
42124: LD_EXP 25
42128: PPUSH
42129: LD_EXP 26
42133: PPUSH
42134: CALL_OW 12
42138: PPUSH
42139: LD_INT 3
42141: PPUSH
42142: LD_INT 1
42144: PPUSH
42145: LD_INT 3
42147: PPUSH
42148: LD_INT 44
42150: PUSH
42151: LD_INT 46
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PPUSH
42158: EMPTY
42159: PPUSH
42160: EMPTY
42161: PPUSH
42162: LD_INT 1
42164: PPUSH
42165: CALL 14466 0 11
42169: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
42170: LD_EXP 33
42174: PUSH
42175: LD_INT 1
42177: EQUAL
42178: PUSH
42179: LD_EXP 39
42183: PUSH
42184: LD_INT 0
42186: EQUAL
42187: AND
42188: IFFALSE 42294
42190: GO 42192
42192: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42193: LD_INT 6
42195: PPUSH
42196: LD_INT 3
42198: PPUSH
42199: LD_INT 5
42201: PPUSH
42202: LD_INT 6
42204: PPUSH
42205: CALL_OW 12
42209: PUSH
42210: LD_INT 5
42212: PPUSH
42213: LD_INT 6
42215: PPUSH
42216: CALL_OW 12
42220: PUSH
42221: LD_INT 5
42223: PPUSH
42224: LD_INT 6
42226: PPUSH
42227: CALL_OW 12
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: LIST
42236: PUSH
42237: LD_OWVAR 67
42241: ARRAY
42242: PPUSH
42243: LD_INT 0
42245: PPUSH
42246: LD_INT 0
42248: PPUSH
42249: LD_INT 0
42251: PPUSH
42252: LD_INT 0
42254: PPUSH
42255: LD_EXP 25
42259: PPUSH
42260: LD_EXP 26
42264: PPUSH
42265: CALL_OW 12
42269: PPUSH
42270: LD_INT 16
42272: PPUSH
42273: LD_INT 7
42275: PPUSH
42276: LD_INT 1
42278: PPUSH
42279: LD_INT 1
42281: PPUSH
42282: LD_INT 3
42284: PPUSH
42285: CALL_OW 12
42289: PPUSH
42290: CALL 12173 0 12
42294: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
42295: LD_EXP 33
42299: PUSH
42300: LD_INT 1
42302: EQUAL
42303: PUSH
42304: LD_EXP 39
42308: PUSH
42309: LD_INT 0
42311: EQUAL
42312: AND
42313: IFFALSE 42409
42315: GO 42317
42317: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42318: LD_INT 16
42320: PPUSH
42321: LD_INT 6
42323: PPUSH
42324: LD_INT 5
42326: PPUSH
42327: LD_INT 6
42329: PPUSH
42330: CALL_OW 12
42334: PUSH
42335: LD_INT 6
42337: PPUSH
42338: LD_INT 7
42340: PPUSH
42341: CALL_OW 12
42345: PUSH
42346: LD_INT 7
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: LIST
42353: PUSH
42354: LD_OWVAR 67
42358: ARRAY
42359: PPUSH
42360: LD_EXP 25
42364: PPUSH
42365: LD_EXP 26
42369: PPUSH
42370: CALL_OW 12
42374: PPUSH
42375: LD_INT 3
42377: PPUSH
42378: LD_INT 1
42380: PPUSH
42381: LD_INT 3
42383: PPUSH
42384: LD_INT 43
42386: PUSH
42387: LD_INT 44
42389: PUSH
42390: LD_INT 46
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: LIST
42397: PPUSH
42398: EMPTY
42399: PPUSH
42400: EMPTY
42401: PPUSH
42402: LD_INT 1
42404: PPUSH
42405: CALL 14466 0 11
42409: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
42410: LD_EXP 33
42414: PUSH
42415: LD_INT 1
42417: EQUAL
42418: PUSH
42419: LD_EXP 39
42423: PUSH
42424: LD_INT 0
42426: EQUAL
42427: AND
42428: IFFALSE 42504
42430: GO 42432
42432: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42433: LD_INT 16
42435: PPUSH
42436: LD_INT 6
42438: PPUSH
42439: LD_INT 5
42441: PUSH
42442: LD_INT 6
42444: PUSH
42445: LD_INT 7
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: PUSH
42453: LD_OWVAR 67
42457: ARRAY
42458: PPUSH
42459: LD_EXP 25
42463: PPUSH
42464: LD_EXP 26
42468: PPUSH
42469: CALL_OW 12
42473: PPUSH
42474: LD_INT 3
42476: PPUSH
42477: LD_INT 1
42479: PPUSH
42480: LD_INT 3
42482: PPUSH
42483: LD_INT 44
42485: PUSH
42486: LD_INT 46
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PPUSH
42493: EMPTY
42494: PPUSH
42495: EMPTY
42496: PPUSH
42497: LD_INT 1
42499: PPUSH
42500: CALL 14466 0 11
42504: END
// every 1 1$00 trigger secondAttack = 1 do
42505: LD_EXP 34
42509: PUSH
42510: LD_INT 1
42512: EQUAL
42513: IFFALSE 42595
42515: GO 42517
42517: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42518: LD_INT 6
42520: PPUSH
42521: LD_INT 3
42523: PPUSH
42524: LD_INT 3
42526: PUSH
42527: LD_INT 4
42529: PUSH
42530: LD_INT 5
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: LIST
42537: PUSH
42538: LD_OWVAR 67
42542: ARRAY
42543: PPUSH
42544: LD_INT 0
42546: PPUSH
42547: LD_INT 0
42549: PPUSH
42550: LD_INT 0
42552: PPUSH
42553: LD_INT 0
42555: PPUSH
42556: LD_EXP 25
42560: PPUSH
42561: LD_EXP 26
42565: PPUSH
42566: CALL_OW 12
42570: PPUSH
42571: LD_INT 16
42573: PPUSH
42574: LD_INT 7
42576: PPUSH
42577: LD_INT 1
42579: PPUSH
42580: LD_INT 1
42582: PPUSH
42583: LD_INT 3
42585: PPUSH
42586: CALL_OW 12
42590: PPUSH
42591: CALL 12173 0 12
42595: END
// every 1 1$00 trigger secondAttack = 1 do
42596: LD_EXP 34
42600: PUSH
42601: LD_INT 1
42603: EQUAL
42604: IFFALSE 42708
42606: GO 42608
42608: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42609: LD_INT 16
42611: PPUSH
42612: LD_INT 6
42614: PPUSH
42615: LD_INT 5
42617: PPUSH
42618: LD_INT 8
42620: PPUSH
42621: CALL_OW 12
42625: PUSH
42626: LD_INT 6
42628: PPUSH
42629: LD_INT 9
42631: PPUSH
42632: CALL_OW 12
42636: PUSH
42637: LD_INT 7
42639: PPUSH
42640: LD_INT 9
42642: PPUSH
42643: CALL_OW 12
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: LIST
42652: PUSH
42653: LD_OWVAR 67
42657: ARRAY
42658: PPUSH
42659: LD_EXP 25
42663: PPUSH
42664: LD_EXP 26
42668: PPUSH
42669: CALL_OW 12
42673: PPUSH
42674: LD_INT 3
42676: PPUSH
42677: LD_INT 1
42679: PPUSH
42680: LD_INT 3
42682: PPUSH
42683: LD_INT 43
42685: PUSH
42686: LD_INT 44
42688: PUSH
42689: LD_INT 46
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: LIST
42696: PPUSH
42697: EMPTY
42698: PPUSH
42699: EMPTY
42700: PPUSH
42701: LD_INT 1
42703: PPUSH
42704: CALL 14466 0 11
42708: END
// every 22 22$0 trigger SikorskyArrive = 0 do
42709: LD_EXP 18
42713: PUSH
42714: LD_INT 0
42716: EQUAL
42717: IFFALSE 42799
42719: GO 42721
42721: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42722: LD_INT 6
42724: PPUSH
42725: LD_INT 3
42727: PPUSH
42728: LD_INT 3
42730: PUSH
42731: LD_INT 4
42733: PUSH
42734: LD_INT 5
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: LIST
42741: PUSH
42742: LD_OWVAR 67
42746: ARRAY
42747: PPUSH
42748: LD_INT 0
42750: PPUSH
42751: LD_INT 0
42753: PPUSH
42754: LD_INT 0
42756: PPUSH
42757: LD_INT 0
42759: PPUSH
42760: LD_EXP 25
42764: PPUSH
42765: LD_EXP 26
42769: PPUSH
42770: CALL_OW 12
42774: PPUSH
42775: LD_INT 16
42777: PPUSH
42778: LD_INT 7
42780: PPUSH
42781: LD_INT 1
42783: PPUSH
42784: LD_INT 1
42786: PPUSH
42787: LD_INT 3
42789: PPUSH
42790: CALL_OW 12
42794: PPUSH
42795: CALL 12173 0 12
42799: END
// every 22 22$0 trigger SikorskyArrive = 0 do
42800: LD_EXP 18
42804: PUSH
42805: LD_INT 0
42807: EQUAL
42808: IFFALSE 42908
42810: GO 42812
42812: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42813: LD_INT 16
42815: PPUSH
42816: LD_INT 6
42818: PPUSH
42819: LD_INT 5
42821: PPUSH
42822: LD_INT 8
42824: PPUSH
42825: CALL_OW 12
42829: PUSH
42830: LD_INT 6
42832: PPUSH
42833: LD_INT 9
42835: PPUSH
42836: CALL_OW 12
42840: PUSH
42841: LD_INT 7
42843: PPUSH
42844: LD_INT 9
42846: PPUSH
42847: CALL_OW 12
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: LIST
42856: PUSH
42857: LD_OWVAR 67
42861: ARRAY
42862: PPUSH
42863: LD_EXP 25
42867: PPUSH
42868: LD_EXP 26
42872: PPUSH
42873: CALL_OW 12
42877: PPUSH
42878: LD_INT 3
42880: PPUSH
42881: LD_INT 1
42883: PPUSH
42884: LD_INT 3
42886: PPUSH
42887: LD_INT 44
42889: PUSH
42890: LD_INT 46
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PPUSH
42897: EMPTY
42898: PPUSH
42899: EMPTY
42900: PPUSH
42901: LD_INT 1
42903: PPUSH
42904: CALL 14466 0 11
42908: END
// every 27 27$0 trigger SikorskyArrive = 0 do
42909: LD_EXP 18
42913: PUSH
42914: LD_INT 0
42916: EQUAL
42917: IFFALSE 42999
42919: GO 42921
42921: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42922: LD_INT 6
42924: PPUSH
42925: LD_INT 3
42927: PPUSH
42928: LD_INT 3
42930: PUSH
42931: LD_INT 4
42933: PUSH
42934: LD_INT 5
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: LIST
42941: PUSH
42942: LD_OWVAR 67
42946: ARRAY
42947: PPUSH
42948: LD_INT 0
42950: PPUSH
42951: LD_INT 0
42953: PPUSH
42954: LD_INT 0
42956: PPUSH
42957: LD_INT 0
42959: PPUSH
42960: LD_EXP 25
42964: PPUSH
42965: LD_EXP 26
42969: PPUSH
42970: CALL_OW 12
42974: PPUSH
42975: LD_INT 16
42977: PPUSH
42978: LD_INT 7
42980: PPUSH
42981: LD_INT 1
42983: PPUSH
42984: LD_INT 1
42986: PPUSH
42987: LD_INT 3
42989: PPUSH
42990: CALL_OW 12
42994: PPUSH
42995: CALL 12173 0 12
42999: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43000: LD_EXP 18
43004: PUSH
43005: LD_INT 0
43007: EQUAL
43008: IFFALSE 43108
43010: GO 43012
43012: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43013: LD_INT 16
43015: PPUSH
43016: LD_INT 6
43018: PPUSH
43019: LD_INT 5
43021: PPUSH
43022: LD_INT 8
43024: PPUSH
43025: CALL_OW 12
43029: PUSH
43030: LD_INT 6
43032: PPUSH
43033: LD_INT 9
43035: PPUSH
43036: CALL_OW 12
43040: PUSH
43041: LD_INT 7
43043: PPUSH
43044: LD_INT 9
43046: PPUSH
43047: CALL_OW 12
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: LIST
43056: PUSH
43057: LD_OWVAR 67
43061: ARRAY
43062: PPUSH
43063: LD_EXP 25
43067: PPUSH
43068: LD_EXP 26
43072: PPUSH
43073: CALL_OW 12
43077: PPUSH
43078: LD_INT 3
43080: PPUSH
43081: LD_INT 1
43083: PPUSH
43084: LD_INT 3
43086: PPUSH
43087: LD_INT 44
43089: PUSH
43090: LD_INT 46
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PPUSH
43097: EMPTY
43098: PPUSH
43099: EMPTY
43100: PPUSH
43101: LD_INT 1
43103: PPUSH
43104: CALL 14466 0 11
43108: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43109: LD_EXP 18
43113: PUSH
43114: LD_INT 0
43116: EQUAL
43117: IFFALSE 43199
43119: GO 43121
43121: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43122: LD_INT 6
43124: PPUSH
43125: LD_INT 3
43127: PPUSH
43128: LD_INT 3
43130: PUSH
43131: LD_INT 4
43133: PUSH
43134: LD_INT 5
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: LIST
43141: PUSH
43142: LD_OWVAR 67
43146: ARRAY
43147: PPUSH
43148: LD_INT 0
43150: PPUSH
43151: LD_INT 0
43153: PPUSH
43154: LD_INT 0
43156: PPUSH
43157: LD_INT 0
43159: PPUSH
43160: LD_EXP 25
43164: PPUSH
43165: LD_EXP 26
43169: PPUSH
43170: CALL_OW 12
43174: PPUSH
43175: LD_INT 16
43177: PPUSH
43178: LD_INT 7
43180: PPUSH
43181: LD_INT 1
43183: PPUSH
43184: LD_INT 1
43186: PPUSH
43187: LD_INT 3
43189: PPUSH
43190: CALL_OW 12
43194: PPUSH
43195: CALL 12173 0 12
43199: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43200: LD_EXP 18
43204: PUSH
43205: LD_INT 0
43207: EQUAL
43208: IFFALSE 43308
43210: GO 43212
43212: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
43213: LD_INT 16
43215: PPUSH
43216: LD_INT 6
43218: PPUSH
43219: LD_INT 5
43221: PPUSH
43222: LD_INT 8
43224: PPUSH
43225: CALL_OW 12
43229: PUSH
43230: LD_INT 6
43232: PPUSH
43233: LD_INT 9
43235: PPUSH
43236: CALL_OW 12
43240: PUSH
43241: LD_INT 7
43243: PPUSH
43244: LD_INT 9
43246: PPUSH
43247: CALL_OW 12
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: LIST
43256: PUSH
43257: LD_OWVAR 67
43261: ARRAY
43262: PPUSH
43263: LD_EXP 25
43267: PPUSH
43268: LD_EXP 26
43272: PPUSH
43273: CALL_OW 12
43277: PPUSH
43278: LD_INT 3
43280: PPUSH
43281: LD_INT 1
43283: PPUSH
43284: LD_INT 3
43286: PPUSH
43287: LD_INT 44
43289: PUSH
43290: LD_INT 46
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PPUSH
43297: EMPTY
43298: PPUSH
43299: EMPTY
43300: PPUSH
43301: LD_INT 1
43303: PPUSH
43304: CALL 14466 0 11
43308: END
// every 0 0$1 trigger timerStatus = 1 do
43309: LD_EXP 35
43313: PUSH
43314: LD_INT 1
43316: EQUAL
43317: IFFALSE 43354
43319: GO 43321
43321: DISABLE
// begin enable ;
43322: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
43323: LD_ADDR_OWVAR 47
43327: PUSH
43328: LD_STRING #Am08-1
43330: PUSH
43331: LD_EXP 19
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
43340: LD_ADDR_EXP 19
43344: PUSH
43345: LD_EXP 19
43349: PUSH
43350: LD_INT 35
43352: MINUS
43353: ST_TO_ADDR
// end ; end_of_file
43354: END
// every 1 1$0 do
43355: GO 43357
43357: DISABLE
// begin if supply <= 13 and supply > 7 then
43358: LD_EXP 40
43362: PUSH
43363: LD_INT 13
43365: LESSEQUAL
43366: PUSH
43367: LD_EXP 40
43371: PUSH
43372: LD_INT 7
43374: GREATER
43375: AND
43376: IFFALSE 43399
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
43378: LD_INT 3
43380: PPUSH
43381: LD_INT 5
43383: PPUSH
43384: CALL_OW 12
43388: PPUSH
43389: LD_INT 5
43391: PPUSH
43392: LD_INT 1
43394: PPUSH
43395: CALL_OW 55
// if supply <= 7 and supply > 4 then
43399: LD_EXP 40
43403: PUSH
43404: LD_INT 7
43406: LESSEQUAL
43407: PUSH
43408: LD_EXP 40
43412: PUSH
43413: LD_INT 4
43415: GREATER
43416: AND
43417: IFFALSE 43440
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
43419: LD_INT 3
43421: PPUSH
43422: LD_INT 5
43424: PPUSH
43425: CALL_OW 12
43429: PPUSH
43430: LD_INT 20
43432: PPUSH
43433: LD_INT 1
43435: PPUSH
43436: CALL_OW 55
// if supply <= 4 and supply > 0 then
43440: LD_EXP 40
43444: PUSH
43445: LD_INT 4
43447: LESSEQUAL
43448: PUSH
43449: LD_EXP 40
43453: PUSH
43454: LD_INT 0
43456: GREATER
43457: AND
43458: IFFALSE 43481
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
43460: LD_INT 3
43462: PPUSH
43463: LD_INT 5
43465: PPUSH
43466: CALL_OW 12
43470: PPUSH
43471: LD_INT 21
43473: PPUSH
43474: LD_INT 1
43476: PPUSH
43477: CALL_OW 55
// if supply > 0 then
43481: LD_EXP 40
43485: PUSH
43486: LD_INT 0
43488: GREATER
43489: IFFALSE 43506
// begin supply = supply - 1 ;
43491: LD_ADDR_EXP 40
43495: PUSH
43496: LD_EXP 40
43500: PUSH
43501: LD_INT 1
43503: MINUS
43504: ST_TO_ADDR
// enable ;
43505: ENABLE
// end ; end ; end_of_file
43506: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
43507: LD_EXP 39
43511: PUSH
43512: LD_INT 1
43514: EQUAL
43515: PUSH
43516: LD_EXP 1
43520: PPUSH
43521: CALL_OW 301
43525: AND
43526: IFFALSE 43538
43528: GO 43530
43530: DISABLE
// YouLost ( JMM ) ;
43531: LD_STRING JMM
43533: PPUSH
43534: CALL_OW 104
43538: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
43539: LD_EXP 18
43543: PUSH
43544: LD_INT 1
43546: EQUAL
43547: PUSH
43548: LD_EXP 16
43552: PPUSH
43553: CALL_OW 301
43557: AND
43558: IFFALSE 43590
43560: GO 43562
43562: DISABLE
// begin DialogueOn ;
43563: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
43567: LD_EXP 23
43571: PPUSH
43572: LD_STRING D8a-Pow-1
43574: PPUSH
43575: CALL_OW 94
// DialogueOff ;
43579: CALL_OW 7
// YouLost ( Dismissed ) ;
43583: LD_STRING Dismissed
43585: PPUSH
43586: CALL_OW 104
// end ;
43590: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
43591: LD_INT 22
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: LD_INT 30
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 30
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: LIST
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PPUSH
43633: CALL_OW 69
43637: PUSH
43638: LD_INT 0
43640: EQUAL
43641: IFFALSE 43653
43643: GO 43645
43645: DISABLE
// YouLost ( Destroyed ) ; end_of_file
43646: LD_STRING Destroyed
43648: PPUSH
43649: CALL_OW 104
43653: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , p ;
43654: LD_EXP 24
43658: PPUSH
43659: CALL_OW 301
43663: PUSH
43664: LD_INT 22
43666: PUSH
43667: LD_INT 3
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 21
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PPUSH
43688: CALL_OW 69
43692: PUSH
43693: LD_INT 14
43695: PUSH
43696: LD_INT 13
43698: PUSH
43699: LD_INT 12
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: LIST
43706: PUSH
43707: LD_OWVAR 67
43711: ARRAY
43712: LESS
43713: AND
43714: IFFALSE 44162
43716: GO 43718
43718: DISABLE
43719: LD_INT 0
43721: PPUSH
43722: PPUSH
// begin russianAI = 0 ;
43723: LD_ADDR_EXP 27
43727: PUSH
43728: LD_INT 0
43730: ST_TO_ADDR
// escapeAvalaible = 1 ;
43731: LD_ADDR_EXP 36
43735: PUSH
43736: LD_INT 1
43738: ST_TO_ADDR
// InGameOn ;
43739: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
43743: LD_INT 3
43745: PPUSH
43746: LD_INT 1
43748: PPUSH
43749: LD_INT 1
43751: PPUSH
43752: LD_INT 0
43754: PPUSH
43755: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
43759: LD_INT 6
43761: PPUSH
43762: LD_INT 1
43764: PPUSH
43765: LD_INT 1
43767: PPUSH
43768: LD_INT 0
43770: PPUSH
43771: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
43775: LD_INT 3
43777: PPUSH
43778: LD_INT 1
43780: PPUSH
43781: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
43785: LD_INT 97
43787: PPUSH
43788: LD_INT 91
43790: PPUSH
43791: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
43795: LD_INT 22
43797: PUSH
43798: LD_INT 3
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 21
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PPUSH
43819: CALL_OW 69
43823: PPUSH
43824: CALL_OW 121
// wait ( 0 0$01 ) ;
43828: LD_INT 35
43830: PPUSH
43831: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
43835: LD_INT 22
43837: PUSH
43838: LD_INT 3
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 21
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PPUSH
43859: CALL_OW 69
43863: PPUSH
43864: LD_INT 124
43866: PPUSH
43867: LD_INT 98
43869: PPUSH
43870: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
43874: LD_INT 22
43876: PUSH
43877: LD_INT 6
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 21
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PPUSH
43898: CALL_OW 69
43902: PPUSH
43903: CALL_OW 121
// wait ( 0 0$01 ) ;
43907: LD_INT 35
43909: PPUSH
43910: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
43914: LD_INT 22
43916: PUSH
43917: LD_INT 6
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 21
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PPUSH
43938: CALL_OW 69
43942: PPUSH
43943: LD_INT 124
43945: PPUSH
43946: LD_INT 98
43948: PPUSH
43949: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
43953: LD_INT 22
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 21
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 3
43975: PUSH
43976: LD_INT 54
43978: PUSH
43979: EMPTY
43980: LIST
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: LIST
43990: PPUSH
43991: CALL_OW 69
43995: PPUSH
43996: LD_INT 124
43998: PPUSH
43999: LD_INT 98
44001: PPUSH
44002: CALL_OW 114
// wait ( 0 0$4 ) ;
44006: LD_INT 140
44008: PPUSH
44009: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
44013: LD_INT 124
44015: PPUSH
44016: LD_INT 98
44018: PPUSH
44019: CALL_OW 84
// if SikorskyStatus = 1 then
44023: LD_EXP 21
44027: PUSH
44028: LD_INT 1
44030: EQUAL
44031: IFFALSE 44045
// begin Say ( Sikorski , D9-Sik-1 ) ;
44033: LD_EXP 16
44037: PPUSH
44038: LD_STRING D9-Sik-1
44040: PPUSH
44041: CALL_OW 88
// end ; if SikorskyStatus = 2 then
44045: LD_EXP 21
44049: PUSH
44050: LD_INT 2
44052: EQUAL
44053: IFFALSE 44074
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
44055: LD_EXP 23
44059: PPUSH
44060: LD_STRING D8b-Pow-1
44062: PPUSH
44063: CALL_OW 94
// YouLost ( Dismissed ) ;
44067: LD_STRING Dismissed
44069: PPUSH
44070: CALL_OW 104
// end ; p := 0 0$0 ;
44074: LD_ADDR_VAR 0 2
44078: PUSH
44079: LD_INT 0
44081: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44082: LD_INT 35
44084: PPUSH
44085: CALL_OW 67
// p := p + 0 0$1 ;
44089: LD_ADDR_VAR 0 2
44093: PUSH
44094: LD_VAR 0 2
44098: PUSH
44099: LD_INT 35
44101: PLUS
44102: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
44103: LD_INT 23
44105: PUSH
44106: LD_INT 3
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 21
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 24
44125: PUSH
44126: LD_INT 250
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: PPUSH
44138: CALL_OW 69
44142: PUSH
44143: LD_INT 0
44145: EQUAL
44146: PUSH
44147: LD_VAR 0 2
44151: PUSH
44152: LD_INT 245
44154: GREATEREQUAL
44155: OR
44156: IFFALSE 44082
// FinishMission ;
44158: CALL 44165 0 0
// end ;
44162: PPOPN 2
44164: END
// export function FinishMission ; var tmp ; begin
44165: LD_INT 0
44167: PPUSH
44168: PPUSH
// AddMedal ( med1 , 1 ) ;
44169: LD_STRING med1
44171: PPUSH
44172: LD_INT 1
44174: PPUSH
44175: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
44179: LD_STRING med2
44181: PPUSH
44182: LD_INT 1
44184: PPUSH
44185: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
44189: LD_STRING perfect
44191: PPUSH
44192: LD_INT 1
44194: PPUSH
44195: CALL_OW 101
// GiveMedals ( Main ) ;
44199: LD_STRING Main
44201: PPUSH
44202: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
44206: LD_INT 22
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 23
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 21
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: LD_INT 25
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 25
44251: PUSH
44252: LD_INT 2
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 25
44261: PUSH
44262: LD_INT 3
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 25
44271: PUSH
44272: LD_INT 4
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: PPUSH
44292: CALL_OW 69
44296: PPUSH
44297: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
44301: LD_EXP 1
44305: PPUSH
44306: LD_EXP 42
44310: PUSH
44311: LD_STRING JMM
44313: STR
44314: PPUSH
44315: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
44319: LD_EXP 2
44323: PPUSH
44324: LD_EXP 42
44328: PUSH
44329: LD_STRING Brown
44331: STR
44332: PPUSH
44333: CALL 8009 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
44337: LD_EXP 3
44341: PPUSH
44342: LD_EXP 42
44346: PUSH
44347: LD_STRING Donaldson
44349: STR
44350: PPUSH
44351: CALL 8009 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
44355: LD_EXP 4
44359: PPUSH
44360: LD_EXP 42
44364: PUSH
44365: LD_STRING Bobby
44367: STR
44368: PPUSH
44369: CALL 8009 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
44373: LD_EXP 5
44377: PPUSH
44378: LD_EXP 42
44382: PUSH
44383: LD_STRING Cyrus
44385: STR
44386: PPUSH
44387: CALL 8009 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
44391: LD_EXP 6
44395: PPUSH
44396: LD_EXP 42
44400: PUSH
44401: LD_STRING Lisa
44403: STR
44404: PPUSH
44405: CALL 8009 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
44409: LD_EXP 7
44413: PPUSH
44414: LD_EXP 42
44418: PUSH
44419: LD_STRING Frank
44421: STR
44422: PPUSH
44423: CALL 8009 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
44427: LD_EXP 8
44431: PPUSH
44432: LD_EXP 42
44436: PUSH
44437: LD_STRING Gladstone
44439: STR
44440: PPUSH
44441: CALL 8009 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
44445: LD_EXP 9
44449: PPUSH
44450: LD_EXP 42
44454: PUSH
44455: LD_STRING Kikuchi
44457: STR
44458: PPUSH
44459: CALL 8009 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
44463: LD_EXP 14
44467: PPUSH
44468: LD_EXP 42
44472: PUSH
44473: LD_STRING Denis
44475: STR
44476: PPUSH
44477: CALL 8009 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
44481: LD_EXP 15
44485: PPUSH
44486: LD_EXP 42
44490: PUSH
44491: LD_STRING Joan
44493: STR
44494: PPUSH
44495: CALL 8009 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
44499: LD_EXP 10
44503: PPUSH
44504: LD_EXP 42
44508: PUSH
44509: LD_STRING Khatam
44511: STR
44512: PPUSH
44513: CALL 8009 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
44517: LD_EXP 13
44521: PPUSH
44522: LD_EXP 42
44526: PUSH
44527: LD_STRING Houten
44529: STR
44530: PPUSH
44531: CALL 8009 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
44535: LD_INT 50
44537: PUSH
44538: EMPTY
44539: LIST
44540: PUSH
44541: LD_INT 22
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 21
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: LD_INT 25
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 25
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 25
44586: PUSH
44587: LD_INT 3
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 25
44596: PUSH
44597: LD_INT 4
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: PPUSH
44617: CALL_OW 69
44621: PUSH
44622: LD_EXP 1
44626: PUSH
44627: LD_EXP 2
44631: PUSH
44632: LD_EXP 3
44636: PUSH
44637: LD_EXP 4
44641: PUSH
44642: LD_EXP 5
44646: PUSH
44647: LD_EXP 6
44651: PUSH
44652: LD_EXP 7
44656: PUSH
44657: LD_EXP 8
44661: PUSH
44662: LD_EXP 9
44666: PUSH
44667: LD_EXP 14
44671: PUSH
44672: LD_EXP 15
44676: PUSH
44677: LD_EXP 13
44681: PUSH
44682: LD_EXP 10
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: DIFF
44702: PPUSH
44703: LD_STRING 08_other_survivors
44705: PPUSH
44706: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
44710: LD_INT 23
44712: PPUSH
44713: CALL 44726 0 1
// YouWin ;
44717: CALL_OW 103
// end ;
44721: LD_VAR 0 1
44725: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
44726: LD_INT 0
44728: PPUSH
44729: PPUSH
44730: PPUSH
44731: PPUSH
// gammaBase = [ ] ;
44732: LD_ADDR_VAR 0 4
44736: PUSH
44737: EMPTY
44738: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
44739: LD_ADDR_VAR 0 5
44743: PUSH
44744: LD_VAR 0 1
44748: PPUSH
44749: LD_INT 22
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 21
44761: PUSH
44762: LD_INT 3
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 50
44771: PUSH
44772: EMPTY
44773: LIST
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: PPUSH
44780: CALL_OW 70
44784: ST_TO_ADDR
// for i in buildings do
44785: LD_ADDR_VAR 0 3
44789: PUSH
44790: LD_VAR 0 5
44794: PUSH
44795: FOR_IN
44796: IFFALSE 45233
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
44798: LD_VAR 0 3
44802: PPUSH
44803: CALL_OW 266
44807: PUSH
44808: LD_INT 6
44810: PUSH
44811: LD_INT 7
44813: PUSH
44814: LD_INT 8
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: LIST
44821: IN
44822: IFFALSE 44936
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
44824: LD_ADDR_VAR 0 4
44828: PUSH
44829: LD_VAR 0 4
44833: PUSH
44834: LD_VAR 0 3
44838: PPUSH
44839: CALL_OW 266
44843: PUSH
44844: LD_VAR 0 3
44848: PPUSH
44849: CALL_OW 250
44853: PUSH
44854: LD_VAR 0 3
44858: PPUSH
44859: CALL_OW 251
44863: PUSH
44864: LD_VAR 0 3
44868: PPUSH
44869: CALL_OW 254
44873: PUSH
44874: LD_VAR 0 3
44878: PPUSH
44879: CALL_OW 267
44883: PUSH
44884: LD_VAR 0 3
44888: PPUSH
44889: CALL_OW 248
44893: PUSH
44894: LD_VAR 0 3
44898: PPUSH
44899: LD_INT 1
44901: PPUSH
44902: CALL_OW 268
44906: PUSH
44907: LD_VAR 0 3
44911: PPUSH
44912: LD_INT 2
44914: PPUSH
44915: CALL_OW 268
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: PUSH
44930: EMPTY
44931: LIST
44932: ADD
44933: ST_TO_ADDR
44934: GO 45231
// if GetBType ( i ) = b_bunker then
44936: LD_VAR 0 3
44940: PPUSH
44941: CALL_OW 266
44945: PUSH
44946: LD_INT 32
44948: EQUAL
44949: IFFALSE 45046
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
44951: LD_ADDR_VAR 0 4
44955: PUSH
44956: LD_VAR 0 4
44960: PUSH
44961: LD_VAR 0 3
44965: PPUSH
44966: CALL_OW 266
44970: PUSH
44971: LD_VAR 0 3
44975: PPUSH
44976: CALL_OW 250
44980: PUSH
44981: LD_VAR 0 3
44985: PPUSH
44986: CALL_OW 251
44990: PUSH
44991: LD_VAR 0 3
44995: PPUSH
44996: CALL_OW 254
45000: PUSH
45001: LD_VAR 0 3
45005: PPUSH
45006: CALL_OW 267
45010: PUSH
45011: LD_VAR 0 3
45015: PPUSH
45016: CALL_OW 248
45020: PUSH
45021: LD_VAR 0 3
45025: PPUSH
45026: CALL_OW 269
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: PUSH
45040: EMPTY
45041: LIST
45042: ADD
45043: ST_TO_ADDR
45044: GO 45231
// if GetBType ( i ) = b_factory then
45046: LD_VAR 0 3
45050: PPUSH
45051: CALL_OW 266
45055: PUSH
45056: LD_INT 3
45058: EQUAL
45059: IFFALSE 45149
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
45061: LD_ADDR_VAR 0 4
45065: PUSH
45066: LD_VAR 0 4
45070: PPUSH
45071: LD_INT 1
45073: PPUSH
45074: LD_VAR 0 3
45078: PPUSH
45079: CALL_OW 266
45083: PUSH
45084: LD_VAR 0 3
45088: PPUSH
45089: CALL_OW 250
45093: PUSH
45094: LD_VAR 0 3
45098: PPUSH
45099: CALL_OW 251
45103: PUSH
45104: LD_VAR 0 3
45108: PPUSH
45109: CALL_OW 254
45113: PUSH
45114: LD_VAR 0 3
45118: PPUSH
45119: CALL_OW 267
45123: PUSH
45124: LD_VAR 0 3
45128: PPUSH
45129: CALL_OW 248
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: PPUSH
45142: CALL_OW 2
45146: ST_TO_ADDR
45147: GO 45231
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
45149: LD_ADDR_VAR 0 4
45153: PUSH
45154: LD_VAR 0 4
45158: PUSH
45159: LD_VAR 0 3
45163: PPUSH
45164: CALL_OW 266
45168: PUSH
45169: LD_VAR 0 3
45173: PPUSH
45174: CALL_OW 250
45178: PUSH
45179: LD_VAR 0 3
45183: PPUSH
45184: CALL_OW 251
45188: PUSH
45189: LD_VAR 0 3
45193: PPUSH
45194: CALL_OW 254
45198: PUSH
45199: LD_VAR 0 3
45203: PPUSH
45204: CALL_OW 267
45208: PUSH
45209: LD_VAR 0 3
45213: PPUSH
45214: CALL_OW 248
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: PUSH
45227: EMPTY
45228: LIST
45229: ADD
45230: ST_TO_ADDR
// end ;
45231: GO 44795
45233: POP
45234: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
45235: LD_VAR 0 4
45239: PPUSH
45240: LD_STRING 08_GammaBase
45242: PPUSH
45243: CALL_OW 39
// end ;
45247: LD_VAR 0 2
45251: RET
