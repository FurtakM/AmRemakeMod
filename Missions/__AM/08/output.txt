// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyBuilds ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 40
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 41
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 37
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 17
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 18
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 20
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 32
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 33
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  80: LD_ADDR_EXP 11
  84: PUSH
  85: LD_STRING GammaCommander
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// russianAI = 0 ;
  96: LD_ADDR_EXP 26
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// ruDestroyBuilds = [ ] ;
 104: LD_ADDR_EXP 30
 108: PUSH
 109: EMPTY
 110: ST_TO_ADDR
// escapeAvalaible = 0 ;
 111: LD_ADDR_EXP 35
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// defenders_list = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// varEvent1 = 0 ;
 126: LD_ADDR_EXP 39
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// timerStatus = 0 ;
 134: LD_ADDR_EXP 34
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 142: LD_ADDR_EXP 38
 146: PUSH
 147: LD_INT 18
 149: PUSH
 150: LD_INT 17
 152: PUSH
 153: LD_INT 15
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: PUSH
 161: LD_OWVAR 67
 165: ARRAY
 166: ST_TO_ADDR
// debugMode = 0 ;
 167: LD_ADDR_EXP 42
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// PrepareDifficulty ;
 175: CALL 5923 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 179: LD_INT 43
 181: PPUSH
 182: LD_INT 22
 184: PPUSH
 185: LD_INT 1
 187: PPUSH
 188: LD_INT 333
 190: NEG
 191: PPUSH
 192: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 196: LD_INT 43
 198: PPUSH
 199: LD_INT 22
 201: PPUSH
 202: LD_INT 1
 204: PPUSH
 205: CALL_OW 331
// PrepareBase ;
 209: CALL 1579 0 0
// PrepareHeroes ;
 213: CALL 511 0 0
// PrepareRussianCommander ;
 217: CALL 4728 0 0
// PrepareRussians ;
 221: CALL 5046 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 225: LD_INT 22
 227: PUSH
 228: LD_INT 3
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 25
 237: PUSH
 238: LD_INT 2
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: PPUSH
 249: CALL_OW 69
 253: PPUSH
 254: LD_INT 0
 256: PPUSH
 257: LD_INT 90
 259: PPUSH
 260: LD_INT 86
 262: PPUSH
 263: LD_INT 3
 265: PPUSH
 266: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 270: LD_INT 3
 272: PPUSH
 273: LD_INT 24
 275: PPUSH
 276: LD_INT 3
 278: PPUSH
 279: LD_EXP 24
 283: PPUSH
 284: LD_EXP 25
 288: PPUSH
 289: CALL_OW 12
 293: PPUSH
 294: LD_INT 6
 296: PPUSH
 297: LD_INT 4
 299: PPUSH
 300: CALL 7141 0 6
// PrepareCutsceneAttack ;
 304: CALL 4780 0 0
// end ;
 308: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 309: LD_EXP 42
 313: PUSH
 314: LD_INT 1
 316: EQUAL
 317: IFFALSE 508
 319: GO 321
 321: DISABLE
 322: LD_INT 0
 324: PPUSH
// begin enable ;
 325: ENABLE
// fogoff ( true ) ;
 326: LD_INT 1
 328: PPUSH
 329: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 333: LD_ADDR_VAR 0 1
 337: PUSH
 338: LD_INT 22
 340: PUSH
 341: LD_INT 1
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: LD_INT 21
 350: PUSH
 351: LD_INT 1
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: PPUSH
 362: CALL_OW 69
 366: PUSH
 367: FOR_IN
 368: IFFALSE 384
// SetLives ( i , 1000 ) ;
 370: LD_VAR 0 1
 374: PPUSH
 375: LD_INT 1000
 377: PPUSH
 378: CALL_OW 234
 382: GO 367
 384: POP
 385: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 386: LD_ADDR_VAR 0 1
 390: PUSH
 391: LD_INT 22
 393: PUSH
 394: LD_INT 1
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PUSH
 401: LD_INT 30
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 30
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PPUSH
 476: CALL_OW 69
 480: PUSH
 481: FOR_IN
 482: IFFALSE 506
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 484: LD_VAR 0 1
 488: PPUSH
 489: CALL_OW 274
 493: PPUSH
 494: LD_INT 2
 496: PPUSH
 497: LD_INT 9999
 499: PPUSH
 500: CALL_OW 277
 504: GO 481
 506: POP
 507: POP
// end ; end_of_file
 508: PPOPN 1
 510: END
// export function PrepareHeroes ; var i , fac , lab , arm , j , placed , ct , bun ; begin
 511: LD_INT 0
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
 517: PPUSH
 518: PPUSH
 519: PPUSH
 520: PPUSH
 521: PPUSH
// uc_side = 1 ;
 522: LD_ADDR_OWVAR 20
 526: PUSH
 527: LD_INT 1
 529: ST_TO_ADDR
// uc_nation = 1 ;
 530: LD_ADDR_OWVAR 21
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// if gammaCommander = 1 then
 538: LD_EXP 11
 542: PUSH
 543: LD_INT 1
 545: EQUAL
 546: IFFALSE 579
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 548: LD_ADDR_EXP 3
 552: PUSH
 553: LD_STRING Donaldson
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: CALL 5464 0 2
 563: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 564: LD_EXP 3
 568: PPUSH
 569: LD_INT 5
 571: PPUSH
 572: LD_INT 0
 574: PPUSH
 575: CALL_OW 49
// end ; if gammaCommander = 2 then
 579: LD_EXP 11
 583: PUSH
 584: LD_INT 2
 586: EQUAL
 587: IFFALSE 620
// begin Brown = PrepareUnit ( Brown , true ) ;
 589: LD_ADDR_EXP 2
 593: PUSH
 594: LD_STRING Brown
 596: PPUSH
 597: LD_INT 1
 599: PPUSH
 600: CALL 5464 0 2
 604: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 605: LD_EXP 2
 609: PPUSH
 610: LD_INT 5
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: CALL_OW 49
// end ; if gammaCommander = 3 then
 620: LD_EXP 11
 624: PUSH
 625: LD_INT 3
 627: EQUAL
 628: IFFALSE 661
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 630: LD_ADDR_EXP 12
 634: PUSH
 635: LD_STRING VanHouten
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: CALL 5464 0 2
 645: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 646: LD_EXP 12
 650: PPUSH
 651: LD_INT 5
 653: PPUSH
 654: LD_INT 0
 656: PPUSH
 657: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 661: LD_ADDR_EXP 21
 665: PUSH
 666: LD_STRING Harisson
 668: PPUSH
 669: LD_INT 0
 671: PPUSH
 672: CALL 5464 0 2
 676: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 677: LD_ADDR_EXP 22
 681: PUSH
 682: LD_STRING Powell
 684: PPUSH
 685: LD_INT 0
 687: PPUSH
 688: CALL 5464 0 2
 692: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 693: LD_ADDR_EXP 10
 697: PUSH
 698: LD_STRING 07_othersGamma
 700: PPUSH
 701: CALL_OW 31
 705: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
 706: LD_ADDR_VAR 0 5
 710: PUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 1
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 30
 723: PUSH
 724: LD_INT 5
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: PPUSH
 735: CALL_OW 69
 739: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 740: LD_ADDR_VAR 0 4
 744: PUSH
 745: LD_INT 22
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PUSH
 755: LD_INT 2
 757: PUSH
 758: LD_INT 30
 760: PUSH
 761: LD_INT 6
 763: PUSH
 764: EMPTY
 765: LIST
 766: LIST
 767: PUSH
 768: LD_INT 30
 770: PUSH
 771: LD_INT 7
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PUSH
 778: LD_INT 30
 780: PUSH
 781: LD_INT 8
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PPUSH
 798: CALL_OW 69
 802: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
 803: LD_ADDR_VAR 0 3
 807: PUSH
 808: LD_INT 22
 810: PUSH
 811: LD_INT 1
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: LD_INT 30
 820: PUSH
 821: LD_INT 3
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PPUSH
 832: CALL_OW 69
 836: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
 837: LD_ADDR_VAR 0 8
 841: PUSH
 842: LD_INT 22
 844: PUSH
 845: LD_INT 1
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 30
 854: PUSH
 855: LD_INT 36
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: PPUSH
 866: CALL_OW 69
 870: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
 871: LD_ADDR_VAR 0 9
 875: PUSH
 876: LD_INT 22
 878: PUSH
 879: LD_INT 1
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 2
 888: PUSH
 889: LD_INT 30
 891: PUSH
 892: LD_INT 31
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: LD_INT 30
 901: PUSH
 902: LD_INT 32
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: ST_TO_ADDR
// for i in others_gamma do
 923: LD_ADDR_VAR 0 2
 927: PUSH
 928: LD_EXP 10
 932: PUSH
 933: FOR_IN
 934: IFFALSE 1309
// begin placed := false ;
 936: LD_ADDR_VAR 0 7
 940: PUSH
 941: LD_INT 0
 943: ST_TO_ADDR
// if GetClass ( i ) = 1 then
 944: LD_VAR 0 2
 948: PPUSH
 949: CALL_OW 257
 953: PUSH
 954: LD_INT 1
 956: EQUAL
 957: IFFALSE 1082
// begin if UnitFilter ( bun , [ f_empty ] ) then
 959: LD_VAR 0 9
 963: PPUSH
 964: LD_INT 58
 966: PUSH
 967: EMPTY
 968: LIST
 969: PPUSH
 970: CALL_OW 72
 974: IFFALSE 1013
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
 976: LD_VAR 0 2
 980: PPUSH
 981: LD_VAR 0 9
 985: PPUSH
 986: LD_INT 58
 988: PUSH
 989: EMPTY
 990: LIST
 991: PPUSH
 992: CALL_OW 72
 996: PUSH
 997: LD_INT 1
 999: ARRAY
1000: PPUSH
1001: CALL_OW 52
// placed := true ;
1005: LD_ADDR_VAR 0 7
1009: PUSH
1010: LD_INT 1
1012: ST_TO_ADDR
// end ; if arm and not placed then
1013: LD_VAR 0 5
1017: PUSH
1018: LD_VAR 0 7
1022: NOT
1023: AND
1024: IFFALSE 1082
// begin for j in arm do
1026: LD_ADDR_VAR 0 6
1030: PUSH
1031: LD_VAR 0 5
1035: PUSH
1036: FOR_IN
1037: IFFALSE 1080
// if UnitsInside ( j ) < 6 then
1039: LD_VAR 0 6
1043: PPUSH
1044: CALL_OW 313
1048: PUSH
1049: LD_INT 6
1051: LESS
1052: IFFALSE 1078
// begin PlaceHumanInUnit ( i , j ) ;
1054: LD_VAR 0 2
1058: PPUSH
1059: LD_VAR 0 6
1063: PPUSH
1064: CALL_OW 52
// placed := true ;
1068: LD_ADDR_VAR 0 7
1072: PUSH
1073: LD_INT 1
1075: ST_TO_ADDR
// break ;
1076: GO 1080
// end ;
1078: GO 1036
1080: POP
1081: POP
// end ; end ; if GetClass ( i ) = 3 then
1082: LD_VAR 0 2
1086: PPUSH
1087: CALL_OW 257
1091: PUSH
1092: LD_INT 3
1094: EQUAL
1095: IFFALSE 1199
// if fac then
1097: LD_VAR 0 3
1101: IFFALSE 1199
// begin if ct then
1103: LD_VAR 0 8
1107: IFFALSE 1135
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1109: LD_VAR 0 2
1113: PPUSH
1114: LD_VAR 0 8
1118: PUSH
1119: LD_INT 1
1121: ARRAY
1122: PPUSH
1123: CALL_OW 52
// placed := true ;
1127: LD_ADDR_VAR 0 7
1131: PUSH
1132: LD_INT 1
1134: ST_TO_ADDR
// end ; if placed then
1135: LD_VAR 0 7
1139: IFFALSE 1143
// continue ;
1141: GO 933
// for j in fac do
1143: LD_ADDR_VAR 0 6
1147: PUSH
1148: LD_VAR 0 3
1152: PUSH
1153: FOR_IN
1154: IFFALSE 1197
// if UnitsInside ( j ) < 6 then
1156: LD_VAR 0 6
1160: PPUSH
1161: CALL_OW 313
1165: PUSH
1166: LD_INT 6
1168: LESS
1169: IFFALSE 1195
// begin PlaceHumanInUnit ( i , j ) ;
1171: LD_VAR 0 2
1175: PPUSH
1176: LD_VAR 0 6
1180: PPUSH
1181: CALL_OW 52
// placed := true ;
1185: LD_ADDR_VAR 0 7
1189: PUSH
1190: LD_INT 1
1192: ST_TO_ADDR
// break ;
1193: GO 1197
// end ;
1195: GO 1153
1197: POP
1198: POP
// end ; if GetClass ( i ) = 4 then
1199: LD_VAR 0 2
1203: PPUSH
1204: CALL_OW 257
1208: PUSH
1209: LD_INT 4
1211: EQUAL
1212: IFFALSE 1276
// if lab then
1214: LD_VAR 0 4
1218: IFFALSE 1276
// begin for j in lab do
1220: LD_ADDR_VAR 0 6
1224: PUSH
1225: LD_VAR 0 4
1229: PUSH
1230: FOR_IN
1231: IFFALSE 1274
// if UnitsInside ( j ) < 6 then
1233: LD_VAR 0 6
1237: PPUSH
1238: CALL_OW 313
1242: PUSH
1243: LD_INT 6
1245: LESS
1246: IFFALSE 1272
// begin PlaceHumanInUnit ( i , j ) ;
1248: LD_VAR 0 2
1252: PPUSH
1253: LD_VAR 0 6
1257: PPUSH
1258: CALL_OW 52
// placed := true ;
1262: LD_ADDR_VAR 0 7
1266: PUSH
1267: LD_INT 1
1269: ST_TO_ADDR
// break ;
1270: GO 1274
// end ;
1272: GO 1230
1274: POP
1275: POP
// end ; if not placed then
1276: LD_VAR 0 7
1280: NOT
1281: IFFALSE 1307
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1283: LD_VAR 0 2
1287: PPUSH
1288: LD_INT 5
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: CALL_OW 49
// ComHold ( i ) ;
1298: LD_VAR 0 2
1302: PPUSH
1303: CALL_OW 140
// end ; end ;
1307: GO 933
1309: POP
1310: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1311: LD_VAR 0 8
1315: PUSH
1316: LD_VAR 0 8
1320: PUSH
1321: LD_INT 1
1323: ARRAY
1324: PPUSH
1325: CALL_OW 313
1329: AND
1330: IFFALSE 1419
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
1332: LD_ADDR_VAR 0 2
1336: PUSH
1337: LD_INT 22
1339: PUSH
1340: LD_INT 1
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 33
1349: PUSH
1350: LD_INT 2
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PPUSH
1361: CALL_OW 69
1365: PUSH
1366: FOR_IN
1367: IFFALSE 1417
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
1369: LD_VAR 0 2
1373: PPUSH
1374: LD_VAR 0 8
1378: PUSH
1379: LD_INT 1
1381: ARRAY
1382: PPUSH
1383: CALL_OW 313
1387: PUSH
1388: LD_INT 1
1390: PPUSH
1391: LD_VAR 0 8
1395: PUSH
1396: LD_INT 1
1398: ARRAY
1399: PPUSH
1400: CALL_OW 313
1404: PPUSH
1405: CALL_OW 12
1409: ARRAY
1410: PPUSH
1411: CALL_OW 135
1415: GO 1366
1417: POP
1418: POP
// end ; end ;
1419: LD_VAR 0 1
1423: RET
// export function PrepareSoldiers ; var i ; begin
1424: LD_INT 0
1426: PPUSH
1427: PPUSH
// uc_side = 1 ;
1428: LD_ADDR_OWVAR 20
1432: PUSH
1433: LD_INT 1
1435: ST_TO_ADDR
// uc_nation = 1 ;
1436: LD_ADDR_OWVAR 21
1440: PUSH
1441: LD_INT 1
1443: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
1444: LD_ADDR_VAR 0 2
1448: PUSH
1449: LD_INT 22
1451: PUSH
1452: LD_INT 1
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 30
1461: PUSH
1462: LD_INT 32
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL_OW 69
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1507
// RespawnInside ( 1 , 1 , i , 4 , 1 , 1 ) ;
1481: LD_INT 1
1483: PPUSH
1484: LD_INT 1
1486: PPUSH
1487: LD_VAR 0 2
1491: PPUSH
1492: LD_INT 4
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: LD_INT 1
1500: PPUSH
1501: CALL 5813 0 6
1505: GO 1478
1507: POP
1508: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 31 ] ] ) do
1509: LD_ADDR_VAR 0 2
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 1
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 30
1526: PUSH
1527: LD_INT 31
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: PUSH
1543: FOR_IN
1544: IFFALSE 1572
// RespawnInside ( 1 , 1 , i , 4 , 1 , 1 ) ;
1546: LD_INT 1
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: LD_INT 4
1559: PPUSH
1560: LD_INT 1
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: CALL 5813 0 6
1570: GO 1543
1572: POP
1573: POP
// end ;
1574: LD_VAR 0 1
1578: RET
// export function PrepareBase ; var blist , i , b , veh ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
1583: PPUSH
1584: PPUSH
1585: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
1586: LD_INT 71
1588: PPUSH
1589: LD_INT 5
1591: PPUSH
1592: LD_INT 1
1594: PPUSH
1595: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
1599: LD_ADDR_VAR 0 2
1603: PUSH
1604: LD_STRING GammaBase
1606: PPUSH
1607: EMPTY
1608: PPUSH
1609: CALL_OW 30
1613: ST_TO_ADDR
// uc_side := 1 ;
1614: LD_ADDR_OWVAR 20
1618: PUSH
1619: LD_INT 1
1621: ST_TO_ADDR
// uc_nation := 1 ;
1622: LD_ADDR_OWVAR 21
1626: PUSH
1627: LD_INT 1
1629: ST_TO_ADDR
// for i in blist do
1630: LD_ADDR_VAR 0 3
1634: PUSH
1635: LD_VAR 0 2
1639: PUSH
1640: FOR_IN
1641: IFFALSE 2049
// begin bc_type := i [ 1 ] ;
1643: LD_ADDR_OWVAR 42
1647: PUSH
1648: LD_VAR 0 3
1652: PUSH
1653: LD_INT 1
1655: ARRAY
1656: ST_TO_ADDR
// bc_level := i [ 5 ] ;
1657: LD_ADDR_OWVAR 43
1661: PUSH
1662: LD_VAR 0 3
1666: PUSH
1667: LD_INT 5
1669: ARRAY
1670: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
1671: LD_VAR 0 3
1675: PUSH
1676: LD_INT 1
1678: ARRAY
1679: PUSH
1680: LD_INT 7
1682: PUSH
1683: LD_INT 8
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: IN
1690: IFFALSE 1746
// begin bc_kind1 := i [ 7 ] ;
1692: LD_ADDR_OWVAR 44
1696: PUSH
1697: LD_VAR 0 3
1701: PUSH
1702: LD_INT 7
1704: ARRAY
1705: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1706: LD_STRING 06_remoteVehs_1
1708: PPUSH
1709: LD_INT 0
1711: PPUSH
1712: CALL_OW 30
1716: PUSH
1717: LD_INT 1
1719: EQUAL
1720: IFFALSE 1732
// begin bc_kind2 := 15 ;
1722: LD_ADDR_OWVAR 45
1726: PUSH
1727: LD_INT 15
1729: ST_TO_ADDR
// end else
1730: GO 1746
// begin bc_kind2 := i [ 8 ] ;
1732: LD_ADDR_OWVAR 45
1736: PUSH
1737: LD_VAR 0 3
1741: PUSH
1742: LD_INT 8
1744: ARRAY
1745: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
1746: LD_OWVAR 42
1750: PUSH
1751: LD_INT 0
1753: EQUAL
1754: IFFALSE 1872
// begin bc_type := b_warehouse ;
1756: LD_ADDR_OWVAR 42
1760: PUSH
1761: LD_INT 1
1763: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1764: LD_ADDR_EXP 36
1768: PUSH
1769: LD_VAR 0 3
1773: PUSH
1774: LD_INT 2
1776: ARRAY
1777: PPUSH
1778: LD_VAR 0 3
1782: PUSH
1783: LD_INT 3
1785: ARRAY
1786: PPUSH
1787: LD_VAR 0 3
1791: PUSH
1792: LD_INT 4
1794: ARRAY
1795: PPUSH
1796: CALL_OW 47
1800: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
1801: LD_EXP 36
1805: PPUSH
1806: LD_STRING gamma
1808: PPUSH
1809: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 200 , 150 , 100 ] [ Difficulty ] ) ;
1813: LD_EXP 36
1817: PPUSH
1818: CALL_OW 274
1822: PPUSH
1823: LD_INT 1
1825: PPUSH
1826: LD_INT 200
1828: PUSH
1829: LD_INT 150
1831: PUSH
1832: LD_INT 100
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: LIST
1839: PUSH
1840: LD_OWVAR 67
1844: ARRAY
1845: PPUSH
1846: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
1850: LD_EXP 36
1854: PPUSH
1855: CALL_OW 274
1859: PPUSH
1860: LD_INT 2
1862: PPUSH
1863: LD_INT 200
1865: PPUSH
1866: CALL_OW 277
// end else
1870: GO 2014
// begin if bc_type = 4 then
1872: LD_OWVAR 42
1876: PUSH
1877: LD_INT 4
1879: EQUAL
1880: IFFALSE 1929
// begin bc_type = 5 ;
1882: LD_ADDR_OWVAR 42
1886: PUSH
1887: LD_INT 5
1889: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1890: LD_ADDR_VAR 0 4
1894: PUSH
1895: LD_VAR 0 3
1899: PUSH
1900: LD_INT 2
1902: ARRAY
1903: PPUSH
1904: LD_VAR 0 3
1908: PUSH
1909: LD_INT 3
1911: ARRAY
1912: PPUSH
1913: LD_VAR 0 3
1917: PUSH
1918: LD_INT 4
1920: ARRAY
1921: PPUSH
1922: CALL_OW 47
1926: ST_TO_ADDR
// end else
1927: GO 2014
// begin bc_type := i [ 1 ] ;
1929: LD_ADDR_OWVAR 42
1933: PUSH
1934: LD_VAR 0 3
1938: PUSH
1939: LD_INT 1
1941: ARRAY
1942: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
1943: LD_STRING 06_remoteVehs_1
1945: PPUSH
1946: LD_INT 0
1948: PPUSH
1949: CALL_OW 30
1953: PUSH
1954: LD_INT 1
1956: EQUAL
1957: PUSH
1958: LD_OWVAR 42
1962: PUSH
1963: LD_INT 7
1965: EQUAL
1966: AND
1967: IFFALSE 1977
// bc_type := b_lab_full ;
1969: LD_ADDR_OWVAR 42
1973: PUSH
1974: LD_INT 8
1976: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1977: LD_ADDR_VAR 0 4
1981: PUSH
1982: LD_VAR 0 3
1986: PUSH
1987: LD_INT 2
1989: ARRAY
1990: PPUSH
1991: LD_VAR 0 3
1995: PUSH
1996: LD_INT 3
1998: ARRAY
1999: PPUSH
2000: LD_VAR 0 3
2004: PUSH
2005: LD_INT 4
2007: ARRAY
2008: PPUSH
2009: CALL_OW 47
2013: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2014: LD_VAR 0 4
2018: PPUSH
2019: CALL_OW 266
2023: PUSH
2024: LD_INT 32
2026: EQUAL
2027: IFFALSE 2047
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_VAR 0 3
2038: PUSH
2039: LD_INT 7
2041: ARRAY
2042: PPUSH
2043: CALL_OW 431
// end ;
2047: GO 1640
2049: POP
2050: POP
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2051: LD_STRING 06_remoteVehs_1
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 30
2061: PUSH
2062: LD_INT 1
2064: EQUAL
2065: IFFALSE 2269
// begin bc_type = 36 ;
2067: LD_ADDR_OWVAR 42
2071: PUSH
2072: LD_INT 36
2074: ST_TO_ADDR
// bc_level = 4 ;
2075: LD_ADDR_OWVAR 43
2079: PUSH
2080: LD_INT 4
2082: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2083: LD_INT 62
2085: PPUSH
2086: LD_INT 12
2088: PPUSH
2089: LD_INT 3
2091: PPUSH
2092: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2096: LD_ADDR_VAR 0 3
2100: PUSH
2101: DOUBLE
2102: LD_INT 1
2104: DEC
2105: ST_TO_ADDR
2106: LD_INT 3
2108: PUSH
2109: LD_INT 2
2111: PUSH
2112: LD_INT 2
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: PUSH
2120: LD_OWVAR 67
2124: ARRAY
2125: PUSH
2126: FOR_TO
2127: IFFALSE 2267
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2129: LD_ADDR_OWVAR 37
2133: PUSH
2134: LD_INT 3
2136: PUSH
2137: LD_INT 2
2139: PUSH
2140: LD_INT 3
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 1
2149: PPUSH
2150: LD_INT 2
2152: PPUSH
2153: CALL_OW 12
2157: ARRAY
2158: PUSH
2159: LD_INT 2
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_OWVAR 67
2171: ARRAY
2172: ST_TO_ADDR
// vc_engine = 1 ;
2173: LD_ADDR_OWVAR 39
2177: PUSH
2178: LD_INT 1
2180: ST_TO_ADDR
// vc_control = 2 ;
2181: LD_ADDR_OWVAR 38
2185: PUSH
2186: LD_INT 2
2188: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2189: LD_ADDR_OWVAR 40
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 4
2199: PUSH
2200: LD_INT 5
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: PUSH
2208: LD_INT 1
2210: PPUSH
2211: LD_INT 3
2213: PPUSH
2214: CALL_OW 12
2218: ARRAY
2219: ST_TO_ADDR
// veh = CreateVehicle ;
2220: LD_ADDR_VAR 0 5
2224: PUSH
2225: CALL_OW 45
2229: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
2230: LD_VAR 0 5
2234: PPUSH
2235: LD_EXP 36
2239: PPUSH
2240: CALL_OW 250
2244: PPUSH
2245: LD_EXP 36
2249: PPUSH
2250: CALL_OW 251
2254: PPUSH
2255: LD_INT 7
2257: PPUSH
2258: LD_INT 0
2260: PPUSH
2261: CALL_OW 50
// end ;
2265: GO 2126
2267: POP
2268: POP
// end ; end ;
2269: LD_VAR 0 1
2273: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
2274: LD_INT 0
2276: PPUSH
2277: PPUSH
2278: PPUSH
2279: PPUSH
// uc_side = 1 ;
2280: LD_ADDR_OWVAR 20
2284: PUSH
2285: LD_INT 1
2287: ST_TO_ADDR
// uc_nation = 1 ;
2288: LD_ADDR_OWVAR 21
2292: PUSH
2293: LD_INT 1
2295: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
2296: LD_ADDR_EXP 13
2300: PUSH
2301: LD_STRING 06c_Denis
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: CALL 5464 0 2
2311: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
2312: LD_EXP 13
2316: PPUSH
2317: LD_INT 4
2319: PPUSH
2320: LD_INT 0
2322: PPUSH
2323: CALL_OW 49
// if IsOk ( Denis ) then
2327: LD_EXP 13
2331: PPUSH
2332: CALL_OW 302
2336: IFFALSE 2352
// i = i + 1 ;
2338: LD_ADDR_VAR 0 2
2342: PUSH
2343: LD_VAR 0 2
2347: PUSH
2348: LD_INT 1
2350: PLUS
2351: ST_TO_ADDR
// Joan = PrepareUnit ( 06c_Joan , true ) ;
2352: LD_ADDR_EXP 14
2356: PUSH
2357: LD_STRING 06c_Joan
2359: PPUSH
2360: LD_INT 1
2362: PPUSH
2363: CALL 5464 0 2
2367: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
2368: LD_EXP 14
2372: PPUSH
2373: LD_INT 4
2375: PPUSH
2376: LD_INT 0
2378: PPUSH
2379: CALL_OW 49
// if IsOk ( Joan ) then
2383: LD_EXP 14
2387: PPUSH
2388: CALL_OW 302
2392: IFFALSE 2408
// i = i + 1 ;
2394: LD_ADDR_VAR 0 2
2398: PUSH
2399: LD_VAR 0 2
2403: PUSH
2404: LD_INT 1
2406: PLUS
2407: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , 0 ) = 0 then
2408: LD_STRING GladstoneIn07
2410: PPUSH
2411: LD_INT 0
2413: PPUSH
2414: CALL_OW 30
2418: PUSH
2419: LD_INT 0
2421: EQUAL
2422: IFFALSE 2469
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
2424: LD_ADDR_EXP 8
2428: PUSH
2429: LD_STRING 06c_Gladstone
2431: PPUSH
2432: LD_INT 1
2434: PPUSH
2435: CALL 5464 0 2
2439: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
2440: LD_EXP 8
2444: PPUSH
2445: LD_INT 4
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: CALL_OW 49
// i = i + 1 ;
2455: LD_ADDR_VAR 0 2
2459: PUSH
2460: LD_VAR 0 2
2464: PUSH
2465: LD_INT 1
2467: PLUS
2468: ST_TO_ADDR
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
2469: LD_ADDR_VAR 0 4
2473: PUSH
2474: LD_STRING OtherStayInDelta
2476: PPUSH
2477: CALL_OW 31
2481: ST_TO_ADDR
// for j = i to other do
2482: LD_ADDR_VAR 0 3
2486: PUSH
2487: DOUBLE
2488: LD_VAR 0 2
2492: DEC
2493: ST_TO_ADDR
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_TO
2500: IFFALSE 2525
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
2502: LD_VAR 0 4
2506: PUSH
2507: LD_VAR 0 3
2511: ARRAY
2512: PPUSH
2513: LD_INT 4
2515: PPUSH
2516: LD_INT 0
2518: PPUSH
2519: CALL_OW 49
2523: GO 2499
2525: POP
2526: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
2527: LD_ADDR_VAR 0 4
2531: PUSH
2532: LD_STRING 06_other_apemans
2534: PPUSH
2535: CALL_OW 31
2539: ST_TO_ADDR
// if other >= 5 then
2540: LD_VAR 0 4
2544: PUSH
2545: LD_INT 5
2547: GREATEREQUAL
2548: IFFALSE 2593
// begin for i := 1 to 5 do
2550: LD_ADDR_VAR 0 2
2554: PUSH
2555: DOUBLE
2556: LD_INT 1
2558: DEC
2559: ST_TO_ADDR
2560: LD_INT 5
2562: PUSH
2563: FOR_TO
2564: IFFALSE 2589
// begin PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
2566: LD_VAR 0 4
2570: PUSH
2571: LD_VAR 0 2
2575: ARRAY
2576: PPUSH
2577: LD_INT 4
2579: PPUSH
2580: LD_INT 0
2582: PPUSH
2583: CALL_OW 49
// end ;
2587: GO 2563
2589: POP
2590: POP
// end else
2591: GO 2625
// begin for i in other do
2593: LD_ADDR_VAR 0 2
2597: PUSH
2598: LD_VAR 0 4
2602: PUSH
2603: FOR_IN
2604: IFFALSE 2623
// PlaceUnitArea ( i , GammaSupport , false ) ;
2606: LD_VAR 0 2
2610: PPUSH
2611: LD_INT 4
2613: PPUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 49
2621: GO 2603
2623: POP
2624: POP
// end ; ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
2625: LD_INT 4
2627: PPUSH
2628: LD_INT 22
2630: PUSH
2631: LD_INT 1
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: PUSH
2638: LD_INT 21
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PPUSH
2652: CALL_OW 70
2656: PPUSH
2657: LD_INT 53
2659: PPUSH
2660: LD_INT 19
2662: PPUSH
2663: CALL_OW 111
// firstAttack = 1 ;
2667: LD_ADDR_EXP 32
2671: PUSH
2672: LD_INT 1
2674: ST_TO_ADDR
// end ;
2675: LD_VAR 0 1
2679: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
2680: LD_INT 0
2682: PPUSH
2683: PPUSH
2684: PPUSH
2685: PPUSH
2686: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
2687: LD_ADDR_VAR 0 4
2691: PUSH
2692: LD_STRING 07_vehicles
2694: PPUSH
2695: EMPTY
2696: PPUSH
2697: CALL_OW 30
2701: ST_TO_ADDR
// uc_side = 1 ;
2702: LD_ADDR_OWVAR 20
2706: PUSH
2707: LD_INT 1
2709: ST_TO_ADDR
// uc_nation = 1 ;
2710: LD_ADDR_OWVAR 21
2714: PUSH
2715: LD_INT 1
2717: ST_TO_ADDR
// if vehicles > 0 then
2718: LD_VAR 0 4
2722: PUSH
2723: LD_INT 0
2725: GREATER
2726: IFFALSE 2865
// begin for i = 1 to vehicles do
2728: LD_ADDR_VAR 0 2
2732: PUSH
2733: DOUBLE
2734: LD_INT 1
2736: DEC
2737: ST_TO_ADDR
2738: LD_VAR 0 4
2742: PUSH
2743: FOR_TO
2744: IFFALSE 2863
// begin vc_chassis = vehicles [ i ] ;
2746: LD_ADDR_OWVAR 37
2750: PUSH
2751: LD_VAR 0 4
2755: PUSH
2756: LD_VAR 0 2
2760: ARRAY
2761: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
2762: LD_ADDR_OWVAR 39
2766: PUSH
2767: LD_VAR 0 4
2771: PUSH
2772: LD_VAR 0 2
2776: PUSH
2777: LD_INT 1
2779: PLUS
2780: ARRAY
2781: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
2782: LD_ADDR_OWVAR 38
2786: PUSH
2787: LD_VAR 0 4
2791: PUSH
2792: LD_VAR 0 2
2796: PUSH
2797: LD_INT 2
2799: PLUS
2800: ARRAY
2801: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
2802: LD_ADDR_OWVAR 40
2806: PUSH
2807: LD_VAR 0 4
2811: PUSH
2812: LD_VAR 0 2
2816: PUSH
2817: LD_INT 3
2819: PLUS
2820: ARRAY
2821: ST_TO_ADDR
// veh = CreateVehicle ;
2822: LD_ADDR_VAR 0 5
2826: PUSH
2827: CALL_OW 45
2831: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
2832: LD_VAR 0 5
2836: PPUSH
2837: LD_INT 4
2839: PPUSH
2840: LD_INT 0
2842: PPUSH
2843: CALL_OW 49
// i = i + 3 ;
2847: LD_ADDR_VAR 0 2
2851: PUSH
2852: LD_VAR 0 2
2856: PUSH
2857: LD_INT 3
2859: PLUS
2860: ST_TO_ADDR
// end ;
2861: GO 2743
2863: POP
2864: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
2865: LD_ADDR_EXP 1
2869: PUSH
2870: LD_EXP 41
2874: PUSH
2875: LD_STRING JMM
2877: STR
2878: PPUSH
2879: LD_INT 1
2881: PPUSH
2882: CALL 5464 0 2
2886: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
2887: LD_EXP 11
2891: PUSH
2892: LD_INT 1
2894: EQUAL
2895: PUSH
2896: LD_EXP 11
2900: PUSH
2901: LD_INT 3
2903: EQUAL
2904: OR
2905: IFFALSE 2929
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
2907: LD_ADDR_EXP 2
2911: PUSH
2912: LD_EXP 41
2916: PUSH
2917: LD_STRING Brown
2919: STR
2920: PPUSH
2921: LD_INT 1
2923: PPUSH
2924: CALL 5464 0 2
2928: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
2929: LD_EXP 11
2933: PUSH
2934: LD_INT 2
2936: EQUAL
2937: PUSH
2938: LD_EXP 11
2942: PUSH
2943: LD_INT 3
2945: EQUAL
2946: OR
2947: IFFALSE 2971
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
2949: LD_ADDR_EXP 3
2953: PUSH
2954: LD_EXP 41
2958: PUSH
2959: LD_STRING Donaldson
2961: STR
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: CALL 5464 0 2
2970: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
2971: LD_ADDR_EXP 4
2975: PUSH
2976: LD_EXP 41
2980: PUSH
2981: LD_STRING Bobby
2983: STR
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: CALL 5464 0 2
2992: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
2993: LD_ADDR_EXP 5
2997: PUSH
2998: LD_EXP 41
3002: PUSH
3003: LD_STRING Cyrus
3005: STR
3006: PPUSH
3007: LD_INT 1
3009: PPUSH
3010: CALL 5464 0 2
3014: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3015: LD_ADDR_EXP 6
3019: PUSH
3020: LD_EXP 41
3024: PUSH
3025: LD_STRING Lisa
3027: STR
3028: PPUSH
3029: LD_INT 1
3031: PPUSH
3032: CALL 5464 0 2
3036: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3037: LD_ADDR_EXP 7
3041: PUSH
3042: LD_EXP 41
3046: PUSH
3047: LD_STRING Frank
3049: STR
3050: PPUSH
3051: LD_INT 1
3053: PPUSH
3054: CALL 5464 0 2
3058: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3059: LD_ADDR_EXP 8
3063: PUSH
3064: LD_EXP 41
3068: PUSH
3069: LD_STRING Gladstone
3071: STR
3072: PPUSH
3073: LD_INT 1
3075: PPUSH
3076: CALL 5464 0 2
3080: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3081: LD_ADDR_EXP 9
3085: PUSH
3086: LD_EXP 41
3090: PUSH
3091: LD_STRING Kikuchi
3093: STR
3094: PPUSH
3095: LD_INT 1
3097: PPUSH
3098: CALL 5464 0 2
3102: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3103: LD_EXP 11
3107: PUSH
3108: LD_INT 1
3110: EQUAL
3111: PUSH
3112: LD_EXP 11
3116: PUSH
3117: LD_INT 3
3119: EQUAL
3120: OR
3121: IFFALSE 3138
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3123: LD_EXP 2
3127: PPUSH
3128: LD_INT 4
3130: PPUSH
3131: LD_INT 0
3133: PPUSH
3134: CALL_OW 49
// if gammaCommander = 2 or gammaCommander = 3 then
3138: LD_EXP 11
3142: PUSH
3143: LD_INT 2
3145: EQUAL
3146: PUSH
3147: LD_EXP 11
3151: PUSH
3152: LD_INT 3
3154: EQUAL
3155: OR
3156: IFFALSE 3173
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3158: LD_EXP 3
3162: PPUSH
3163: LD_INT 4
3165: PPUSH
3166: LD_INT 0
3168: PPUSH
3169: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3173: LD_ADDR_VAR 0 5
3177: PUSH
3178: LD_INT 4
3180: PPUSH
3181: LD_INT 22
3183: PUSH
3184: LD_INT 1
3186: PUSH
3187: EMPTY
3188: LIST
3189: LIST
3190: PUSH
3191: LD_INT 21
3193: PUSH
3194: LD_INT 2
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: PUSH
3201: LD_INT 58
3203: PUSH
3204: EMPTY
3205: LIST
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: LIST
3211: PPUSH
3212: CALL_OW 70
3216: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3217: LD_ADDR_EXP 1
3221: PUSH
3222: LD_EXP 41
3226: PUSH
3227: LD_STRING JMM
3229: STR
3230: PPUSH
3231: LD_INT 1
3233: PPUSH
3234: CALL 5464 0 2
3238: ST_TO_ADDR
// if veh > 0 then
3239: LD_VAR 0 5
3243: PUSH
3244: LD_INT 0
3246: GREATER
3247: IFFALSE 3269
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
3249: LD_EXP 1
3253: PPUSH
3254: LD_VAR 0 5
3258: PUSH
3259: LD_INT 1
3261: ARRAY
3262: PPUSH
3263: CALL_OW 52
// end else
3267: GO 3284
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
3269: LD_EXP 1
3273: PPUSH
3274: LD_INT 4
3276: PPUSH
3277: LD_INT 0
3279: PPUSH
3280: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3284: LD_ADDR_VAR 0 5
3288: PUSH
3289: LD_INT 4
3291: PPUSH
3292: LD_INT 22
3294: PUSH
3295: LD_INT 1
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: PUSH
3302: LD_INT 21
3304: PUSH
3305: LD_INT 2
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PUSH
3312: LD_INT 58
3314: PUSH
3315: EMPTY
3316: LIST
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: PPUSH
3323: CALL_OW 70
3327: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3328: LD_ADDR_EXP 4
3332: PUSH
3333: LD_EXP 41
3337: PUSH
3338: LD_STRING Bobby
3340: STR
3341: PPUSH
3342: LD_INT 1
3344: PPUSH
3345: CALL 5464 0 2
3349: ST_TO_ADDR
// if veh > 0 then
3350: LD_VAR 0 5
3354: PUSH
3355: LD_INT 0
3357: GREATER
3358: IFFALSE 3380
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
3360: LD_EXP 4
3364: PPUSH
3365: LD_VAR 0 5
3369: PUSH
3370: LD_INT 1
3372: ARRAY
3373: PPUSH
3374: CALL_OW 52
// end else
3378: GO 3395
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3380: LD_EXP 4
3384: PPUSH
3385: LD_INT 4
3387: PPUSH
3388: LD_INT 0
3390: PPUSH
3391: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3395: LD_ADDR_VAR 0 5
3399: PUSH
3400: LD_INT 4
3402: PPUSH
3403: LD_INT 22
3405: PUSH
3406: LD_INT 1
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: LD_INT 21
3415: PUSH
3416: LD_INT 2
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 58
3425: PUSH
3426: EMPTY
3427: LIST
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: PPUSH
3434: CALL_OW 70
3438: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3439: LD_ADDR_EXP 5
3443: PUSH
3444: LD_EXP 41
3448: PUSH
3449: LD_STRING Cyrus
3451: STR
3452: PPUSH
3453: LD_INT 1
3455: PPUSH
3456: CALL 5464 0 2
3460: ST_TO_ADDR
// if veh > 0 then
3461: LD_VAR 0 5
3465: PUSH
3466: LD_INT 0
3468: GREATER
3469: IFFALSE 3491
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
3471: LD_EXP 5
3475: PPUSH
3476: LD_VAR 0 5
3480: PUSH
3481: LD_INT 1
3483: ARRAY
3484: PPUSH
3485: CALL_OW 52
// end else
3489: GO 3506
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3491: LD_EXP 5
3495: PPUSH
3496: LD_INT 4
3498: PPUSH
3499: LD_INT 0
3501: PPUSH
3502: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3506: LD_ADDR_VAR 0 5
3510: PUSH
3511: LD_INT 4
3513: PPUSH
3514: LD_INT 22
3516: PUSH
3517: LD_INT 1
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PUSH
3524: LD_INT 21
3526: PUSH
3527: LD_INT 2
3529: PUSH
3530: EMPTY
3531: LIST
3532: LIST
3533: PUSH
3534: LD_INT 58
3536: PUSH
3537: EMPTY
3538: LIST
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: PPUSH
3545: CALL_OW 70
3549: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3550: LD_ADDR_EXP 6
3554: PUSH
3555: LD_EXP 41
3559: PUSH
3560: LD_STRING Lisa
3562: STR
3563: PPUSH
3564: LD_INT 1
3566: PPUSH
3567: CALL 5464 0 2
3571: ST_TO_ADDR
// if veh > 0 then
3572: LD_VAR 0 5
3576: PUSH
3577: LD_INT 0
3579: GREATER
3580: IFFALSE 3602
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
3582: LD_EXP 6
3586: PPUSH
3587: LD_VAR 0 5
3591: PUSH
3592: LD_INT 1
3594: ARRAY
3595: PPUSH
3596: CALL_OW 52
// end else
3600: GO 3617
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3602: LD_EXP 6
3606: PPUSH
3607: LD_INT 4
3609: PPUSH
3610: LD_INT 0
3612: PPUSH
3613: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3617: LD_ADDR_VAR 0 5
3621: PUSH
3622: LD_INT 4
3624: PPUSH
3625: LD_INT 22
3627: PUSH
3628: LD_INT 1
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 21
3637: PUSH
3638: LD_INT 2
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 58
3647: PUSH
3648: EMPTY
3649: LIST
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: LIST
3655: PPUSH
3656: CALL_OW 70
3660: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3661: LD_ADDR_EXP 7
3665: PUSH
3666: LD_EXP 41
3670: PUSH
3671: LD_STRING Frank
3673: STR
3674: PPUSH
3675: LD_INT 1
3677: PPUSH
3678: CALL 5464 0 2
3682: ST_TO_ADDR
// if veh > 0 then
3683: LD_VAR 0 5
3687: PUSH
3688: LD_INT 0
3690: GREATER
3691: IFFALSE 3713
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
3693: LD_EXP 7
3697: PPUSH
3698: LD_VAR 0 5
3702: PUSH
3703: LD_INT 1
3705: ARRAY
3706: PPUSH
3707: CALL_OW 52
// end else
3711: GO 3728
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
3713: LD_EXP 7
3717: PPUSH
3718: LD_INT 4
3720: PPUSH
3721: LD_INT 0
3723: PPUSH
3724: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3728: LD_ADDR_VAR 0 5
3732: PUSH
3733: LD_INT 4
3735: PPUSH
3736: LD_INT 22
3738: PUSH
3739: LD_INT 1
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: PUSH
3746: LD_INT 21
3748: PUSH
3749: LD_INT 2
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_INT 58
3758: PUSH
3759: EMPTY
3760: LIST
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: PPUSH
3767: CALL_OW 70
3771: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3772: LD_ADDR_EXP 8
3776: PUSH
3777: LD_EXP 41
3781: PUSH
3782: LD_STRING Gladstone
3784: STR
3785: PPUSH
3786: LD_INT 1
3788: PPUSH
3789: CALL 5464 0 2
3793: ST_TO_ADDR
// if veh > 0 then
3794: LD_VAR 0 5
3798: PUSH
3799: LD_INT 0
3801: GREATER
3802: IFFALSE 3824
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
3804: LD_EXP 8
3808: PPUSH
3809: LD_VAR 0 5
3813: PUSH
3814: LD_INT 1
3816: ARRAY
3817: PPUSH
3818: CALL_OW 52
// end else
3822: GO 3839
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3824: LD_EXP 8
3828: PPUSH
3829: LD_INT 4
3831: PPUSH
3832: LD_INT 0
3834: PPUSH
3835: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3839: LD_ADDR_VAR 0 5
3843: PUSH
3844: LD_INT 4
3846: PPUSH
3847: LD_INT 22
3849: PUSH
3850: LD_INT 1
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PUSH
3857: LD_INT 21
3859: PUSH
3860: LD_INT 2
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: PUSH
3867: LD_INT 58
3869: PUSH
3870: EMPTY
3871: LIST
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: LIST
3877: PPUSH
3878: CALL_OW 70
3882: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3883: LD_ADDR_EXP 9
3887: PUSH
3888: LD_EXP 41
3892: PUSH
3893: LD_STRING Kikuchi
3895: STR
3896: PPUSH
3897: LD_INT 1
3899: PPUSH
3900: CALL 5464 0 2
3904: ST_TO_ADDR
// if veh > 0 then
3905: LD_VAR 0 5
3909: PUSH
3910: LD_INT 0
3912: GREATER
3913: IFFALSE 3935
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
3915: LD_EXP 9
3919: PPUSH
3920: LD_VAR 0 5
3924: PUSH
3925: LD_INT 1
3927: ARRAY
3928: PPUSH
3929: CALL_OW 52
// end else
3933: GO 3950
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
3935: LD_EXP 9
3939: PPUSH
3940: LD_INT 4
3942: PPUSH
3943: LD_INT 0
3945: PPUSH
3946: CALL_OW 49
// end ; other = CreateCharacterSet ( 07c_others ) ;
3950: LD_ADDR_VAR 0 3
3954: PUSH
3955: LD_STRING 07c_others
3957: PPUSH
3958: CALL_OW 31
3962: ST_TO_ADDR
// for i in other do
3963: LD_ADDR_VAR 0 2
3967: PUSH
3968: LD_VAR 0 3
3972: PUSH
3973: FOR_IN
3974: IFFALSE 4067
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3976: LD_ADDR_VAR 0 5
3980: PUSH
3981: LD_INT 4
3983: PPUSH
3984: LD_INT 22
3986: PUSH
3987: LD_INT 1
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: PUSH
3994: LD_INT 21
3996: PUSH
3997: LD_INT 2
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: LD_INT 58
4006: PUSH
4007: EMPTY
4008: LIST
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: LIST
4014: PPUSH
4015: CALL_OW 70
4019: ST_TO_ADDR
// if veh > 0 then
4020: LD_VAR 0 5
4024: PUSH
4025: LD_INT 0
4027: GREATER
4028: IFFALSE 4050
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4030: LD_VAR 0 2
4034: PPUSH
4035: LD_VAR 0 5
4039: PUSH
4040: LD_INT 1
4042: ARRAY
4043: PPUSH
4044: CALL_OW 52
// end else
4048: GO 4065
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4050: LD_VAR 0 2
4054: PPUSH
4055: LD_INT 4
4057: PPUSH
4058: LD_INT 0
4060: PPUSH
4061: CALL_OW 49
// end ; end ;
4065: GO 3973
4067: POP
4068: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
4069: LD_INT 4
4071: PPUSH
4072: LD_INT 22
4074: PUSH
4075: LD_INT 1
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: PPUSH
4085: CALL_OW 70
4089: PPUSH
4090: LD_INT 53
4092: PPUSH
4093: LD_INT 19
4095: PPUSH
4096: CALL_OW 111
// end ;
4100: LD_VAR 0 1
4104: RET
// export function PrepareSikorsky ; begin
4105: LD_INT 0
4107: PPUSH
// uc_side = 4 ;
4108: LD_ADDR_OWVAR 20
4112: PUSH
4113: LD_INT 4
4115: ST_TO_ADDR
// uc_nation = 1 ;
4116: LD_ADDR_OWVAR 21
4120: PUSH
4121: LD_INT 1
4123: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
4124: LD_ADDR_EXP 15
4128: PUSH
4129: LD_STRING Sikorski
4131: PPUSH
4132: LD_INT 0
4134: PPUSH
4135: CALL 5464 0 2
4139: ST_TO_ADDR
// vc_engine = 1 ;
4140: LD_ADDR_OWVAR 39
4144: PUSH
4145: LD_INT 1
4147: ST_TO_ADDR
// vc_control = 1 ;
4148: LD_ADDR_OWVAR 38
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
4156: LD_ADDR_OWVAR 40
4160: PUSH
4161: LD_INT 5
4163: PUSH
4164: LD_INT 3
4166: PUSH
4167: LD_INT 4
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: PUSH
4175: LD_OWVAR 67
4179: ARRAY
4180: ST_TO_ADDR
// vc_chassis = 4 ;
4181: LD_ADDR_OWVAR 37
4185: PUSH
4186: LD_INT 4
4188: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
4189: LD_ADDR_EXP 16
4193: PUSH
4194: CALL_OW 45
4198: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
4199: LD_EXP 16
4203: PPUSH
4204: LD_INT 9
4206: PPUSH
4207: LD_INT 0
4209: PPUSH
4210: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
4214: LD_EXP 15
4218: PPUSH
4219: LD_EXP 16
4223: PPUSH
4224: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
4228: LD_EXP 16
4232: PPUSH
4233: LD_INT 5
4235: PPUSH
4236: CALL_OW 113
// end ;
4240: LD_VAR 0 1
4244: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
4245: LD_INT 0
4247: PPUSH
4248: PPUSH
4249: PPUSH
4250: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
4251: LD_ADDR_VAR 0 2
4255: PUSH
4256: DOUBLE
4257: LD_INT 1
4259: DEC
4260: ST_TO_ADDR
4261: LD_INT 8
4263: PUSH
4264: LD_INT 7
4266: PUSH
4267: LD_INT 7
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: LIST
4274: PUSH
4275: LD_OWVAR 67
4279: ARRAY
4280: PUSH
4281: FOR_TO
4282: IFFALSE 4379
// begin uc_side = 4 ;
4284: LD_ADDR_OWVAR 20
4288: PUSH
4289: LD_INT 4
4291: ST_TO_ADDR
// uc_nation = 1 ;
4292: LD_ADDR_OWVAR 21
4296: PUSH
4297: LD_INT 1
4299: ST_TO_ADDR
// hc_name =  ;
4300: LD_ADDR_OWVAR 26
4304: PUSH
4305: LD_STRING 
4307: ST_TO_ADDR
// hc_gallery =  ;
4308: LD_ADDR_OWVAR 33
4312: PUSH
4313: LD_STRING 
4315: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
4316: LD_INT 0
4318: PPUSH
4319: LD_INT 1
4321: PPUSH
4322: LD_INT 5
4324: PPUSH
4325: LD_INT 8
4327: PPUSH
4328: CALL_OW 12
4332: PPUSH
4333: CALL_OW 380
// un = CreateHuman ;
4337: LD_ADDR_VAR 0 3
4341: PUSH
4342: CALL_OW 44
4346: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4347: LD_VAR 0 3
4351: PPUSH
4352: LD_INT 9
4354: PPUSH
4355: LD_INT 0
4357: PPUSH
4358: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
4362: LD_VAR 0 3
4366: PPUSH
4367: LD_INT 53
4369: PPUSH
4370: LD_INT 23
4372: PPUSH
4373: CALL_OW 111
// end ;
4377: GO 4281
4379: POP
4380: POP
// for i = 1 to 3 do
4381: LD_ADDR_VAR 0 2
4385: PUSH
4386: DOUBLE
4387: LD_INT 1
4389: DEC
4390: ST_TO_ADDR
4391: LD_INT 3
4393: PUSH
4394: FOR_TO
4395: IFFALSE 4492
// begin uc_side = 4 ;
4397: LD_ADDR_OWVAR 20
4401: PUSH
4402: LD_INT 4
4404: ST_TO_ADDR
// uc_nation = 1 ;
4405: LD_ADDR_OWVAR 21
4409: PUSH
4410: LD_INT 1
4412: ST_TO_ADDR
// hc_name =  ;
4413: LD_ADDR_OWVAR 26
4417: PUSH
4418: LD_STRING 
4420: ST_TO_ADDR
// hc_gallery =  ;
4421: LD_ADDR_OWVAR 33
4425: PUSH
4426: LD_STRING 
4428: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
4429: LD_INT 0
4431: PPUSH
4432: LD_INT 4
4434: PPUSH
4435: LD_INT 5
4437: PPUSH
4438: LD_INT 8
4440: PPUSH
4441: CALL_OW 12
4445: PPUSH
4446: CALL_OW 380
// un = CreateHuman ;
4450: LD_ADDR_VAR 0 3
4454: PUSH
4455: CALL_OW 44
4459: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4460: LD_VAR 0 3
4464: PPUSH
4465: LD_INT 9
4467: PPUSH
4468: LD_INT 0
4470: PPUSH
4471: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
4475: LD_VAR 0 3
4479: PPUSH
4480: LD_INT 53
4482: PPUSH
4483: LD_INT 23
4485: PPUSH
4486: CALL_OW 111
// end ;
4490: GO 4394
4492: POP
4493: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
4494: LD_ADDR_VAR 0 2
4498: PUSH
4499: DOUBLE
4500: LD_INT 1
4502: DEC
4503: ST_TO_ADDR
4504: LD_INT 9
4506: PUSH
4507: LD_INT 8
4509: PUSH
4510: LD_INT 7
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: PUSH
4518: LD_OWVAR 67
4522: ARRAY
4523: PUSH
4524: FOR_TO
4525: IFFALSE 4721
// begin uc_side = 4 ;
4527: LD_ADDR_OWVAR 20
4531: PUSH
4532: LD_INT 4
4534: ST_TO_ADDR
// uc_nation = 1 ;
4535: LD_ADDR_OWVAR 21
4539: PUSH
4540: LD_INT 1
4542: ST_TO_ADDR
// vc_engine = 1 ;
4543: LD_ADDR_OWVAR 39
4547: PUSH
4548: LD_INT 1
4550: ST_TO_ADDR
// vc_control = 1 ;
4551: LD_ADDR_OWVAR 38
4555: PUSH
4556: LD_INT 1
4558: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
4559: LD_ADDR_OWVAR 40
4563: PUSH
4564: LD_INT 3
4566: PUSH
4567: LD_INT 4
4569: PUSH
4570: LD_INT 5
4572: PUSH
4573: LD_INT 6
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: PUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_INT 4
4587: PPUSH
4588: CALL_OW 12
4592: ARRAY
4593: ST_TO_ADDR
// vc_chassis = 4 ;
4594: LD_ADDR_OWVAR 37
4598: PUSH
4599: LD_INT 4
4601: ST_TO_ADDR
// veh = CreateVehicle ;
4602: LD_ADDR_VAR 0 4
4606: PUSH
4607: CALL_OW 45
4611: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
4612: LD_VAR 0 4
4616: PPUSH
4617: LD_INT 9
4619: PPUSH
4620: LD_INT 0
4622: PPUSH
4623: CALL_OW 49
// hc_name =  ;
4627: LD_ADDR_OWVAR 26
4631: PUSH
4632: LD_STRING 
4634: ST_TO_ADDR
// hc_gallery =  ;
4635: LD_ADDR_OWVAR 33
4639: PUSH
4640: LD_STRING 
4642: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
4643: LD_INT 0
4645: PPUSH
4646: LD_INT 3
4648: PPUSH
4649: LD_INT 5
4651: PPUSH
4652: LD_INT 8
4654: PPUSH
4655: CALL_OW 12
4659: PPUSH
4660: CALL_OW 380
// un = CreateHuman ;
4664: LD_ADDR_VAR 0 3
4668: PUSH
4669: CALL_OW 44
4673: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4674: LD_VAR 0 3
4678: PPUSH
4679: LD_VAR 0 4
4683: PPUSH
4684: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
4688: LD_VAR 0 4
4692: PUSH
4693: LD_VAR 0 3
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PPUSH
4702: LD_INT 53
4704: PPUSH
4705: LD_INT 23
4707: PPUSH
4708: CALL_OW 111
// wait ( 0 0$5 ) ;
4712: LD_INT 175
4714: PPUSH
4715: CALL_OW 67
// end ;
4719: GO 4524
4721: POP
4722: POP
// end ; end_of_file
4723: LD_VAR 0 1
4727: RET
// export function PrepareRussianCommander ; begin
4728: LD_INT 0
4730: PPUSH
// uc_side = 3 ;
4731: LD_ADDR_OWVAR 20
4735: PUSH
4736: LD_INT 3
4738: ST_TO_ADDR
// uc_nation = 3 ;
4739: LD_ADDR_OWVAR 21
4743: PUSH
4744: LD_INT 3
4746: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
4747: LD_ADDR_EXP 23
4751: PUSH
4752: LD_STRING Borodin
4754: PPUSH
4755: CALL_OW 25
4759: ST_TO_ADDR
// PlaceUnitArea ( Borodin , RussianSpawn , false ) ;
4760: LD_EXP 23
4764: PPUSH
4765: LD_INT 3
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
// end ;
4775: LD_VAR 0 1
4779: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
4780: LD_INT 0
4782: PPUSH
4783: PPUSH
4784: PPUSH
4785: PPUSH
// for i = 1 to 10 do
4786: LD_ADDR_VAR 0 2
4790: PUSH
4791: DOUBLE
4792: LD_INT 1
4794: DEC
4795: ST_TO_ADDR
4796: LD_INT 10
4798: PUSH
4799: FOR_TO
4800: IFFALSE 4874
// begin uc_side = 6 ;
4802: LD_ADDR_OWVAR 20
4806: PUSH
4807: LD_INT 6
4809: ST_TO_ADDR
// uc_nation = 3 ;
4810: LD_ADDR_OWVAR 21
4814: PUSH
4815: LD_INT 3
4817: ST_TO_ADDR
// hc_gallery =  ;
4818: LD_ADDR_OWVAR 33
4822: PUSH
4823: LD_STRING 
4825: ST_TO_ADDR
// hc_name =  ;
4826: LD_ADDR_OWVAR 26
4830: PUSH
4831: LD_STRING 
4833: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
4834: LD_INT 0
4836: PPUSH
4837: LD_INT 1
4839: PPUSH
4840: LD_INT 3
4842: PPUSH
4843: CALL_OW 380
// un = CreateHuman ;
4847: LD_ADDR_VAR 0 3
4851: PUSH
4852: CALL_OW 44
4856: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
4857: LD_VAR 0 3
4861: PPUSH
4862: LD_INT 1
4864: PPUSH
4865: LD_INT 0
4867: PPUSH
4868: CALL_OW 49
// end ;
4872: GO 4799
4874: POP
4875: POP
// for i = 1 to 3 do
4876: LD_ADDR_VAR 0 2
4880: PUSH
4881: DOUBLE
4882: LD_INT 1
4884: DEC
4885: ST_TO_ADDR
4886: LD_INT 3
4888: PUSH
4889: FOR_TO
4890: IFFALSE 5039
// begin uc_side = 6 ;
4892: LD_ADDR_OWVAR 20
4896: PUSH
4897: LD_INT 6
4899: ST_TO_ADDR
// uc_nation = 3 ;
4900: LD_ADDR_OWVAR 21
4904: PUSH
4905: LD_INT 3
4907: ST_TO_ADDR
// vc_engine = 1 ;
4908: LD_ADDR_OWVAR 39
4912: PUSH
4913: LD_INT 1
4915: ST_TO_ADDR
// vc_control = 1 ;
4916: LD_ADDR_OWVAR 38
4920: PUSH
4921: LD_INT 1
4923: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
4924: LD_ADDR_OWVAR 40
4928: PUSH
4929: LD_INT 43
4931: PUSH
4932: LD_INT 44
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 1
4941: PPUSH
4942: LD_INT 2
4944: PPUSH
4945: CALL_OW 12
4949: ARRAY
4950: ST_TO_ADDR
// vc_chassis = 22 ;
4951: LD_ADDR_OWVAR 37
4955: PUSH
4956: LD_INT 22
4958: ST_TO_ADDR
// veh = CreateVehicle ;
4959: LD_ADDR_VAR 0 4
4963: PUSH
4964: CALL_OW 45
4968: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
4969: LD_VAR 0 4
4973: PPUSH
4974: LD_INT 2
4976: PPUSH
4977: LD_INT 0
4979: PPUSH
4980: CALL_OW 49
// hc_gallery =  ;
4984: LD_ADDR_OWVAR 33
4988: PUSH
4989: LD_STRING 
4991: ST_TO_ADDR
// hc_name =  ;
4992: LD_ADDR_OWVAR 26
4996: PUSH
4997: LD_STRING 
4999: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
5000: LD_INT 0
5002: PPUSH
5003: LD_INT 3
5005: PPUSH
5006: LD_INT 4
5008: PPUSH
5009: CALL_OW 380
// un = CreateHuman ;
5013: LD_ADDR_VAR 0 3
5017: PUSH
5018: CALL_OW 44
5022: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5023: LD_VAR 0 3
5027: PPUSH
5028: LD_VAR 0 4
5032: PPUSH
5033: CALL_OW 52
// end ;
5037: GO 4889
5039: POP
5040: POP
// end ;
5041: LD_VAR 0 1
5045: RET
// export function PrepareRussians ; var i , un ; begin
5046: LD_INT 0
5048: PPUSH
5049: PPUSH
5050: PPUSH
// for i = 1 to 14 do
5051: LD_ADDR_VAR 0 2
5055: PUSH
5056: DOUBLE
5057: LD_INT 1
5059: DEC
5060: ST_TO_ADDR
5061: LD_INT 14
5063: PUSH
5064: FOR_TO
5065: IFFALSE 5151
// begin uc_side = 3 ;
5067: LD_ADDR_OWVAR 20
5071: PUSH
5072: LD_INT 3
5074: ST_TO_ADDR
// uc_nation = 3 ;
5075: LD_ADDR_OWVAR 21
5079: PUSH
5080: LD_INT 3
5082: ST_TO_ADDR
// hc_gallery =  ;
5083: LD_ADDR_OWVAR 33
5087: PUSH
5088: LD_STRING 
5090: ST_TO_ADDR
// hc_name =  ;
5091: LD_ADDR_OWVAR 26
5095: PUSH
5096: LD_STRING 
5098: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5099: LD_INT 0
5101: PPUSH
5102: LD_INT 1
5104: PPUSH
5105: LD_EXP 24
5109: PPUSH
5110: LD_EXP 25
5114: PPUSH
5115: CALL_OW 12
5119: PPUSH
5120: CALL_OW 380
// un = CreateHuman ;
5124: LD_ADDR_VAR 0 3
5128: PUSH
5129: CALL_OW 44
5133: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5134: LD_VAR 0 3
5138: PPUSH
5139: LD_INT 3
5141: PPUSH
5142: LD_INT 0
5144: PPUSH
5145: CALL_OW 49
// end ;
5149: GO 5064
5151: POP
5152: POP
// for i = 1 to 6 do
5153: LD_ADDR_VAR 0 2
5157: PUSH
5158: DOUBLE
5159: LD_INT 1
5161: DEC
5162: ST_TO_ADDR
5163: LD_INT 6
5165: PUSH
5166: FOR_TO
5167: IFFALSE 5253
// begin uc_side = 3 ;
5169: LD_ADDR_OWVAR 20
5173: PUSH
5174: LD_INT 3
5176: ST_TO_ADDR
// uc_nation = 3 ;
5177: LD_ADDR_OWVAR 21
5181: PUSH
5182: LD_INT 3
5184: ST_TO_ADDR
// hc_gallery =  ;
5185: LD_ADDR_OWVAR 33
5189: PUSH
5190: LD_STRING 
5192: ST_TO_ADDR
// hc_name =  ;
5193: LD_ADDR_OWVAR 26
5197: PUSH
5198: LD_STRING 
5200: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5201: LD_INT 0
5203: PPUSH
5204: LD_INT 2
5206: PPUSH
5207: LD_EXP 24
5211: PPUSH
5212: LD_EXP 25
5216: PPUSH
5217: CALL_OW 12
5221: PPUSH
5222: CALL_OW 380
// un = CreateHuman ;
5226: LD_ADDR_VAR 0 3
5230: PUSH
5231: CALL_OW 44
5235: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5236: LD_VAR 0 3
5240: PPUSH
5241: LD_INT 3
5243: PPUSH
5244: LD_INT 0
5246: PPUSH
5247: CALL_OW 49
// end ;
5251: GO 5166
5253: POP
5254: POP
// for i = 1 to 6 do
5255: LD_ADDR_VAR 0 2
5259: PUSH
5260: DOUBLE
5261: LD_INT 1
5263: DEC
5264: ST_TO_ADDR
5265: LD_INT 6
5267: PUSH
5268: FOR_TO
5269: IFFALSE 5355
// begin uc_side = 3 ;
5271: LD_ADDR_OWVAR 20
5275: PUSH
5276: LD_INT 3
5278: ST_TO_ADDR
// uc_nation = 3 ;
5279: LD_ADDR_OWVAR 21
5283: PUSH
5284: LD_INT 3
5286: ST_TO_ADDR
// hc_gallery =  ;
5287: LD_ADDR_OWVAR 33
5291: PUSH
5292: LD_STRING 
5294: ST_TO_ADDR
// hc_name =  ;
5295: LD_ADDR_OWVAR 26
5299: PUSH
5300: LD_STRING 
5302: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5303: LD_INT 0
5305: PPUSH
5306: LD_INT 3
5308: PPUSH
5309: LD_EXP 24
5313: PPUSH
5314: LD_EXP 25
5318: PPUSH
5319: CALL_OW 12
5323: PPUSH
5324: CALL_OW 380
// un = CreateHuman ;
5328: LD_ADDR_VAR 0 3
5332: PUSH
5333: CALL_OW 44
5337: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5338: LD_VAR 0 3
5342: PPUSH
5343: LD_INT 3
5345: PPUSH
5346: LD_INT 0
5348: PPUSH
5349: CALL_OW 49
// end ;
5353: GO 5268
5355: POP
5356: POP
// for i = 1 to 4 do
5357: LD_ADDR_VAR 0 2
5361: PUSH
5362: DOUBLE
5363: LD_INT 1
5365: DEC
5366: ST_TO_ADDR
5367: LD_INT 4
5369: PUSH
5370: FOR_TO
5371: IFFALSE 5457
// begin uc_side = 3 ;
5373: LD_ADDR_OWVAR 20
5377: PUSH
5378: LD_INT 3
5380: ST_TO_ADDR
// uc_nation = 3 ;
5381: LD_ADDR_OWVAR 21
5385: PUSH
5386: LD_INT 3
5388: ST_TO_ADDR
// hc_gallery =  ;
5389: LD_ADDR_OWVAR 33
5393: PUSH
5394: LD_STRING 
5396: ST_TO_ADDR
// hc_name =  ;
5397: LD_ADDR_OWVAR 26
5401: PUSH
5402: LD_STRING 
5404: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5405: LD_INT 0
5407: PPUSH
5408: LD_INT 4
5410: PPUSH
5411: LD_EXP 24
5415: PPUSH
5416: LD_EXP 25
5420: PPUSH
5421: CALL_OW 12
5425: PPUSH
5426: CALL_OW 380
// un = CreateHuman ;
5430: LD_ADDR_VAR 0 3
5434: PUSH
5435: CALL_OW 44
5439: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5440: LD_VAR 0 3
5444: PPUSH
5445: LD_INT 3
5447: PPUSH
5448: LD_INT 0
5450: PPUSH
5451: CALL_OW 49
// end ;
5455: GO 5370
5457: POP
5458: POP
// end ; end_of_file
5459: LD_VAR 0 1
5463: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5464: LD_INT 0
5466: PPUSH
5467: PPUSH
// if exist_mode then
5468: LD_VAR 0 2
5472: IFFALSE 5491
// unit := CreateCharacter ( ident ) else
5474: LD_ADDR_VAR 0 4
5478: PUSH
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 34
5488: ST_TO_ADDR
5489: GO 5506
// unit := NewCharacter ( ident ) ;
5491: LD_ADDR_VAR 0 4
5495: PUSH
5496: LD_VAR 0 1
5500: PPUSH
5501: CALL_OW 25
5505: ST_TO_ADDR
// result := unit ;
5506: LD_ADDR_VAR 0 3
5510: PUSH
5511: LD_VAR 0 4
5515: ST_TO_ADDR
// end ;
5516: LD_VAR 0 3
5520: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5521: LD_INT 0
5523: PPUSH
5524: PPUSH
5525: PPUSH
// rnd = rand ( 1 , characters ) ;
5526: LD_ADDR_VAR 0 6
5530: PUSH
5531: LD_INT 1
5533: PPUSH
5534: LD_VAR 0 1
5538: PPUSH
5539: CALL_OW 12
5543: ST_TO_ADDR
// for i = 1 to characters do
5544: LD_ADDR_VAR 0 5
5548: PUSH
5549: DOUBLE
5550: LD_INT 1
5552: DEC
5553: ST_TO_ADDR
5554: LD_VAR 0 1
5558: PUSH
5559: FOR_TO
5560: IFFALSE 5670
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5562: LD_VAR 0 5
5566: PUSH
5567: LD_VAR 0 6
5571: EQUAL
5572: PUSH
5573: LD_VAR 0 1
5577: PUSH
5578: LD_VAR 0 5
5582: ARRAY
5583: PPUSH
5584: CALL_OW 258
5588: PUSH
5589: LD_INT 1
5591: EQUAL
5592: AND
5593: IFFALSE 5615
// Say ( characters [ i ] , dialogMID ) ;
5595: LD_VAR 0 1
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PPUSH
5606: LD_VAR 0 2
5610: PPUSH
5611: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5615: LD_VAR 0 5
5619: PUSH
5620: LD_VAR 0 6
5624: EQUAL
5625: PUSH
5626: LD_VAR 0 1
5630: PUSH
5631: LD_VAR 0 5
5635: ARRAY
5636: PPUSH
5637: CALL_OW 258
5641: PUSH
5642: LD_INT 2
5644: EQUAL
5645: AND
5646: IFFALSE 5668
// Say ( characters [ i ] , dialogFID ) ;
5648: LD_VAR 0 1
5652: PUSH
5653: LD_VAR 0 5
5657: ARRAY
5658: PPUSH
5659: LD_VAR 0 3
5663: PPUSH
5664: CALL_OW 88
// end ;
5668: GO 5559
5670: POP
5671: POP
// end ;
5672: LD_VAR 0 4
5676: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5677: LD_INT 0
5679: PPUSH
5680: PPUSH
5681: PPUSH
// uc_side := GetSide ( b ) ;
5682: LD_ADDR_OWVAR 20
5686: PUSH
5687: LD_VAR 0 2
5691: PPUSH
5692: CALL_OW 255
5696: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5697: LD_ADDR_OWVAR 21
5701: PUSH
5702: LD_VAR 0 2
5706: PPUSH
5707: CALL_OW 248
5711: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5712: LD_INT 0
5714: PPUSH
5715: LD_INT 1
5717: PPUSH
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5727: LD_ADDR_VAR 0 5
5731: PUSH
5732: LD_VAR 0 2
5736: PPUSH
5737: CALL_OW 254
5741: PUSH
5742: LD_INT 3
5744: MINUS
5745: ST_TO_ADDR
// if dir < 0 then
5746: LD_VAR 0 5
5750: PUSH
5751: LD_INT 0
5753: LESS
5754: IFFALSE 5770
// dir := 6 + dir ;
5756: LD_ADDR_VAR 0 5
5760: PUSH
5761: LD_INT 6
5763: PUSH
5764: LD_VAR 0 5
5768: PLUS
5769: ST_TO_ADDR
// un := CreateHuman ;
5770: LD_ADDR_VAR 0 4
5774: PUSH
5775: CALL_OW 44
5779: ST_TO_ADDR
// SetDir ( un , dir ) ;
5780: LD_VAR 0 4
5784: PPUSH
5785: LD_VAR 0 5
5789: PPUSH
5790: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5794: LD_VAR 0 4
5798: PPUSH
5799: LD_VAR 0 2
5803: PPUSH
5804: CALL_OW 52
// end ;
5808: LD_VAR 0 3
5812: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5813: LD_INT 0
5815: PPUSH
5816: PPUSH
5817: PPUSH
5818: PPUSH
// for i = 1 to count do
5819: LD_ADDR_VAR 0 8
5823: PUSH
5824: DOUBLE
5825: LD_INT 1
5827: DEC
5828: ST_TO_ADDR
5829: LD_VAR 0 6
5833: PUSH
5834: FOR_TO
5835: IFFALSE 5916
// begin uc_side = side ;
5837: LD_ADDR_OWVAR 20
5841: PUSH
5842: LD_VAR 0 1
5846: ST_TO_ADDR
// uc_nation = nation ;
5847: LD_ADDR_OWVAR 21
5851: PUSH
5852: LD_VAR 0 2
5856: ST_TO_ADDR
// hc_gallery =  ;
5857: LD_ADDR_OWVAR 33
5861: PUSH
5862: LD_STRING 
5864: ST_TO_ADDR
// hc_name =  ;
5865: LD_ADDR_OWVAR 26
5869: PUSH
5870: LD_STRING 
5872: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5873: LD_INT 0
5875: PPUSH
5876: LD_VAR 0 5
5880: PPUSH
5881: LD_VAR 0 4
5885: PPUSH
5886: CALL_OW 380
// un = CreateHuman ;
5890: LD_ADDR_VAR 0 10
5894: PUSH
5895: CALL_OW 44
5899: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5900: LD_VAR 0 10
5904: PPUSH
5905: LD_VAR 0 3
5909: PPUSH
5910: CALL_OW 52
// end ;
5914: GO 5834
5916: POP
5917: POP
// end ;
5918: LD_VAR 0 7
5922: RET
// export function PrepareDifficulty ; begin
5923: LD_INT 0
5925: PPUSH
// if Difficulty = 1 then
5926: LD_OWVAR 67
5930: PUSH
5931: LD_INT 1
5933: EQUAL
5934: IFFALSE 5952
// begin RuSolMinLevel = 2 ;
5936: LD_ADDR_EXP 24
5940: PUSH
5941: LD_INT 2
5943: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
5944: LD_ADDR_EXP 25
5948: PUSH
5949: LD_INT 4
5951: ST_TO_ADDR
// end ; if Difficulty = 2 then
5952: LD_OWVAR 67
5956: PUSH
5957: LD_INT 2
5959: EQUAL
5960: IFFALSE 6030
// begin RuSolMinLevel = 3 ;
5962: LD_ADDR_EXP 24
5966: PUSH
5967: LD_INT 3
5969: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5970: LD_ADDR_EXP 25
5974: PUSH
5975: LD_INT 5
5977: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
5978: LD_INT 51
5980: PPUSH
5981: LD_INT 3
5983: PPUSH
5984: LD_INT 1
5986: PPUSH
5987: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
5991: LD_INT 57
5993: PPUSH
5994: LD_INT 3
5996: PPUSH
5997: LD_INT 1
5999: PPUSH
6000: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6004: LD_INT 57
6006: PPUSH
6007: LD_INT 6
6009: PPUSH
6010: LD_INT 2
6012: PPUSH
6013: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
6017: LD_INT 51
6019: PPUSH
6020: LD_INT 6
6022: PPUSH
6023: LD_INT 2
6025: PPUSH
6026: CALL_OW 322
// end ; if Difficulty = 3 then
6030: LD_OWVAR 67
6034: PUSH
6035: LD_INT 3
6037: EQUAL
6038: IFFALSE 6121
// begin RuSolMinLevel = 3 ;
6040: LD_ADDR_EXP 24
6044: PUSH
6045: LD_INT 3
6047: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6048: LD_ADDR_EXP 25
6052: PUSH
6053: LD_INT 6
6055: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
6056: LD_INT 57
6058: PPUSH
6059: LD_INT 3
6061: PPUSH
6062: LD_INT 1
6064: PPUSH
6065: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
6069: LD_INT 51
6071: PPUSH
6072: LD_INT 3
6074: PPUSH
6075: LD_INT 1
6077: PPUSH
6078: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
6082: LD_INT 52
6084: PPUSH
6085: LD_INT 3
6087: PPUSH
6088: LD_INT 1
6090: PPUSH
6091: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6095: LD_INT 57
6097: PPUSH
6098: LD_INT 6
6100: PPUSH
6101: LD_INT 2
6103: PPUSH
6104: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
6108: LD_INT 52
6110: PPUSH
6111: LD_INT 6
6113: PPUSH
6114: LD_INT 2
6116: PPUSH
6117: CALL_OW 322
// end ; end ;
6121: LD_VAR 0 1
6125: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
6126: LD_INT 0
6128: PPUSH
6129: PPUSH
6130: PPUSH
6131: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6132: LD_ADDR_VAR 0 3
6136: PUSH
6137: LD_INT 22
6139: PUSH
6140: LD_INT 3
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: LD_INT 25
6149: PUSH
6150: LD_INT 2
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PPUSH
6161: CALL_OW 69
6165: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
6166: LD_ADDR_VAR 0 4
6170: PUSH
6171: LD_INT 4
6173: PUSH
6174: LD_INT 75
6176: PUSH
6177: LD_INT 79
6179: PUSH
6180: LD_INT 2
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 4
6191: PUSH
6192: LD_INT 113
6194: PUSH
6195: LD_INT 94
6197: PUSH
6198: LD_INT 4
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: PUSH
6207: LD_INT 29
6209: PUSH
6210: LD_INT 106
6212: PUSH
6213: LD_INT 97
6215: PUSH
6216: LD_INT 3
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: LIST
6223: LIST
6224: PUSH
6225: LD_INT 26
6227: PUSH
6228: LD_INT 93
6230: PUSH
6231: LD_INT 97
6233: PUSH
6234: LD_INT 5
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: PUSH
6243: LD_INT 2
6245: PUSH
6246: LD_INT 100
6248: PUSH
6249: LD_INT 89
6251: PUSH
6252: LD_INT 3
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 17
6263: PUSH
6264: LD_INT 96
6266: PUSH
6267: LD_INT 89
6269: PUSH
6270: LD_INT 1
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: PUSH
6279: LD_INT 32
6281: PUSH
6282: LD_INT 78
6284: PUSH
6285: LD_INT 94
6287: PUSH
6288: LD_INT 1
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 32
6299: PUSH
6300: LD_INT 95
6302: PUSH
6303: LD_INT 82
6305: PUSH
6306: LD_INT 3
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: PUSH
6315: LD_INT 32
6317: PUSH
6318: LD_INT 104
6320: PUSH
6321: LD_INT 85
6323: PUSH
6324: LD_INT 2
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: PUSH
6333: LD_INT 32
6335: PUSH
6336: LD_INT 81
6338: PUSH
6339: LD_INT 78
6341: PUSH
6342: LD_INT 2
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: PUSH
6351: LD_INT 33
6353: PUSH
6354: LD_INT 109
6356: PUSH
6357: LD_INT 90
6359: PUSH
6360: LD_INT 3
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: PUSH
6369: LD_INT 33
6371: PUSH
6372: LD_INT 88
6374: PUSH
6375: LD_INT 79
6377: PUSH
6378: LD_INT 3
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: PUSH
6387: LD_INT 33
6389: PUSH
6390: LD_INT 76
6392: PUSH
6393: LD_INT 87
6395: PUSH
6396: LD_INT 1
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 26
6407: PUSH
6408: LD_INT 96
6410: PUSH
6411: LD_INT 97
6413: PUSH
6414: LD_INT 5
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 26
6425: PUSH
6426: LD_INT 85
6428: PUSH
6429: LD_INT 84
6431: PUSH
6432: LD_INT 2
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 6
6443: PUSH
6444: LD_INT 88
6446: PUSH
6447: LD_INT 95
6449: PUSH
6450: LD_INT 0
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 19
6461: PUSH
6462: LD_INT 103
6464: PUSH
6465: LD_INT 89
6467: PUSH
6468: LD_INT 4
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: PUSH
6477: LD_INT 16
6479: PUSH
6480: LD_INT 97
6482: PUSH
6483: LD_INT 86
6485: PUSH
6486: LD_INT 2
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 24
6497: PUSH
6498: LD_INT 100
6500: PUSH
6501: LD_INT 85
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: ST_TO_ADDR
// for i := 1 to buildingsTab do
6534: LD_ADDR_VAR 0 2
6538: PUSH
6539: DOUBLE
6540: LD_INT 1
6542: DEC
6543: ST_TO_ADDR
6544: LD_VAR 0 4
6548: PUSH
6549: FOR_TO
6550: IFFALSE 6623
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
6552: LD_VAR 0 3
6556: PPUSH
6557: LD_VAR 0 4
6561: PUSH
6562: LD_VAR 0 2
6566: ARRAY
6567: PUSH
6568: LD_INT 1
6570: ARRAY
6571: PPUSH
6572: LD_VAR 0 4
6576: PUSH
6577: LD_VAR 0 2
6581: ARRAY
6582: PUSH
6583: LD_INT 2
6585: ARRAY
6586: PPUSH
6587: LD_VAR 0 4
6591: PUSH
6592: LD_VAR 0 2
6596: ARRAY
6597: PUSH
6598: LD_INT 3
6600: ARRAY
6601: PPUSH
6602: LD_VAR 0 4
6606: PUSH
6607: LD_VAR 0 2
6611: ARRAY
6612: PUSH
6613: LD_INT 4
6615: ARRAY
6616: PPUSH
6617: CALL_OW 205
6621: GO 6549
6623: POP
6624: POP
// end ;
6625: LD_VAR 0 1
6629: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6630: LD_INT 0
6632: PPUSH
6633: PPUSH
// for i in charactersList do
6634: LD_ADDR_VAR 0 4
6638: PUSH
6639: LD_VAR 0 1
6643: PUSH
6644: FOR_IN
6645: IFFALSE 6674
// begin if IsOk ( i ) then
6647: LD_VAR 0 4
6651: PPUSH
6652: CALL_OW 302
6656: IFFALSE 6672
// SaveCharacters ( i , ident ) ;
6658: LD_VAR 0 4
6662: PPUSH
6663: LD_VAR 0 2
6667: PPUSH
6668: CALL_OW 38
// end ;
6672: GO 6644
6674: POP
6675: POP
// end ;
6676: LD_VAR 0 3
6680: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
6681: LD_INT 0
6683: PPUSH
6684: PPUSH
6685: PPUSH
6686: PPUSH
// for i = 1 to 72 do
6687: LD_ADDR_VAR 0 5
6691: PUSH
6692: DOUBLE
6693: LD_INT 1
6695: DEC
6696: ST_TO_ADDR
6697: LD_INT 72
6699: PUSH
6700: FOR_TO
6701: IFFALSE 6759
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
6703: LD_VAR 0 5
6707: PPUSH
6708: LD_VAR 0 1
6712: PPUSH
6713: CALL_OW 321
6717: PUSH
6718: LD_INT 1
6720: EQUAL
6721: PUSH
6722: LD_VAR 0 5
6726: PPUSH
6727: LD_VAR 0 3
6731: PPUSH
6732: CALL_OW 482
6736: PUSH
6737: LD_INT 1
6739: EQUAL
6740: AND
6741: IFFALSE 6757
// AddComResearch ( lab , i ) ;
6743: LD_VAR 0 2
6747: PPUSH
6748: LD_VAR 0 5
6752: PPUSH
6753: CALL_OW 184
6757: GO 6700
6759: POP
6760: POP
// end ;
6761: LD_VAR 0 4
6765: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , insideSoldiers , turretList , temp , barrackList ; begin
6766: LD_INT 0
6768: PPUSH
6769: PPUSH
6770: PPUSH
6771: PPUSH
6772: PPUSH
6773: PPUSH
6774: PPUSH
6775: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] ] ) diff [ Borodin ] ;
6776: LD_ADDR_VAR 0 6
6780: PUSH
6781: LD_INT 22
6783: PUSH
6784: LD_VAR 0 1
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PUSH
6793: LD_INT 25
6795: PUSH
6796: LD_INT 1
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: LD_INT 56
6805: PUSH
6806: EMPTY
6807: LIST
6808: PUSH
6809: LD_INT 24
6811: PUSH
6812: LD_INT 700
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: LD_INT 3
6821: PUSH
6822: LD_INT 60
6824: PUSH
6825: EMPTY
6826: LIST
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: PPUSH
6839: CALL_OW 69
6843: PUSH
6844: LD_EXP 23
6848: PUSH
6849: EMPTY
6850: LIST
6851: DIFF
6852: ST_TO_ADDR
// insideSoldiers = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
6853: LD_ADDR_VAR 0 7
6857: PUSH
6858: LD_INT 22
6860: PUSH
6861: LD_VAR 0 1
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 25
6872: PUSH
6873: LD_INT 1
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 54
6882: PUSH
6883: EMPTY
6884: LIST
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: PPUSH
6891: CALL_OW 69
6895: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
6896: LD_ADDR_VAR 0 8
6900: PUSH
6901: LD_INT 22
6903: PUSH
6904: LD_VAR 0 1
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: LD_INT 30
6915: PUSH
6916: LD_INT 32
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: LD_INT 58
6925: PUSH
6926: EMPTY
6927: LIST
6928: PUSH
6929: LD_INT 24
6931: PUSH
6932: LD_INT 251
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: PPUSH
6945: CALL_OW 69
6949: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
6950: LD_ADDR_VAR 0 10
6954: PUSH
6955: LD_INT 22
6957: PUSH
6958: LD_VAR 0 1
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: LD_INT 2
6969: PUSH
6970: LD_INT 30
6972: PUSH
6973: LD_INT 4
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 30
6982: PUSH
6983: LD_INT 5
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: PUSH
6995: LD_INT 24
6997: PUSH
6998: LD_INT 251
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: LIST
7009: PPUSH
7010: CALL_OW 69
7014: ST_TO_ADDR
// if barrackList > 0 then
7015: LD_VAR 0 10
7019: PUSH
7020: LD_INT 0
7022: GREATER
7023: IFFALSE 7136
// begin if turretList = 0 and FilterUnitsInArea ( RussianBaseTerritory , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 then
7025: LD_VAR 0 8
7029: PUSH
7030: LD_INT 0
7032: EQUAL
7033: PUSH
7034: LD_INT 24
7036: PPUSH
7037: LD_INT 22
7039: PUSH
7040: LD_INT 1
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 21
7049: PUSH
7050: LD_INT 1
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PPUSH
7061: CALL_OW 70
7065: PUSH
7066: LD_INT 0
7068: EQUAL
7069: AND
7070: IFFALSE 7119
// begin for i in soldiers_list do
7072: LD_ADDR_VAR 0 4
7076: PUSH
7077: LD_VAR 0 6
7081: PUSH
7082: FOR_IN
7083: IFFALSE 7115
// ComEnterUnit ( i , barrackList [ rand ( 1 , barrackList ) ] ) ;
7085: LD_VAR 0 4
7089: PPUSH
7090: LD_VAR 0 10
7094: PUSH
7095: LD_INT 1
7097: PPUSH
7098: LD_VAR 0 10
7102: PPUSH
7103: CALL_OW 12
7107: ARRAY
7108: PPUSH
7109: CALL_OW 120
7113: GO 7082
7115: POP
7116: POP
// end else
7117: GO 7136
// begin for i in barrackList do
7119: LD_ADDR_VAR 0 4
7123: PUSH
7124: LD_VAR 0 10
7128: PUSH
7129: FOR_IN
7130: IFFALSE 7134
// begin end ;
7132: GO 7129
7134: POP
7135: POP
// end ; end ; end ;
7136: LD_VAR 0 3
7140: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
7145: PPUSH
7146: PPUSH
7147: PPUSH
7148: PPUSH
// for i = 1 to infantryCount do
7149: LD_ADDR_VAR 0 8
7153: PUSH
7154: DOUBLE
7155: LD_INT 1
7157: DEC
7158: ST_TO_ADDR
7159: LD_VAR 0 5
7163: PUSH
7164: FOR_TO
7165: IFFALSE 7281
// begin uc_side = side ;
7167: LD_ADDR_OWVAR 20
7171: PUSH
7172: LD_VAR 0 1
7176: ST_TO_ADDR
// uc_nation = nation ;
7177: LD_ADDR_OWVAR 21
7181: PUSH
7182: LD_VAR 0 3
7186: ST_TO_ADDR
// hc_class = 1 ;
7187: LD_ADDR_OWVAR 28
7191: PUSH
7192: LD_INT 1
7194: ST_TO_ADDR
// hc_name =  ;
7195: LD_ADDR_OWVAR 26
7199: PUSH
7200: LD_STRING 
7202: ST_TO_ADDR
// hc_gallery =  ;
7203: LD_ADDR_OWVAR 33
7207: PUSH
7208: LD_STRING 
7210: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7211: LD_INT 0
7213: PPUSH
7214: LD_INT 1
7216: PPUSH
7217: LD_EXP 24
7221: PPUSH
7222: LD_EXP 25
7226: PPUSH
7227: CALL_OW 12
7231: PPUSH
7232: CALL_OW 380
// un = CreateHuman ;
7236: LD_ADDR_VAR 0 10
7240: PUSH
7241: CALL_OW 44
7245: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
7246: LD_VAR 0 10
7250: PPUSH
7251: LD_VAR 0 2
7255: PPUSH
7256: LD_INT 0
7258: PPUSH
7259: CALL_OW 49
// defenders_list = defenders_list ^ un ;
7263: LD_ADDR_EXP 31
7267: PUSH
7268: LD_EXP 31
7272: PUSH
7273: LD_VAR 0 10
7277: ADD
7278: ST_TO_ADDR
// end ;
7279: GO 7164
7281: POP
7282: POP
// for i = 1 to vehCount do
7283: LD_ADDR_VAR 0 8
7287: PUSH
7288: DOUBLE
7289: LD_INT 1
7291: DEC
7292: ST_TO_ADDR
7293: LD_VAR 0 6
7297: PUSH
7298: FOR_TO
7299: IFFALSE 7506
// begin uc_side = side ;
7301: LD_ADDR_OWVAR 20
7305: PUSH
7306: LD_VAR 0 1
7310: ST_TO_ADDR
// uc_nation = nation ;
7311: LD_ADDR_OWVAR 21
7315: PUSH
7316: LD_VAR 0 3
7320: ST_TO_ADDR
// vc_Chassis = 22 ;
7321: LD_ADDR_OWVAR 37
7325: PUSH
7326: LD_INT 22
7328: ST_TO_ADDR
// vc_engine = 1 ;
7329: LD_ADDR_OWVAR 39
7333: PUSH
7334: LD_INT 1
7336: ST_TO_ADDR
// vc_control = 1 ;
7337: LD_ADDR_OWVAR 38
7341: PUSH
7342: LD_INT 1
7344: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
7345: LD_ADDR_OWVAR 40
7349: PUSH
7350: LD_INT 43
7352: PUSH
7353: LD_INT 44
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: PUSH
7360: LD_INT 1
7362: PPUSH
7363: LD_INT 2
7365: PPUSH
7366: CALL_OW 12
7370: ARRAY
7371: ST_TO_ADDR
// veh = CreateVehicle ;
7372: LD_ADDR_VAR 0 12
7376: PUSH
7377: CALL_OW 45
7381: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
7382: LD_VAR 0 12
7386: PPUSH
7387: LD_VAR 0 2
7391: PPUSH
7392: LD_INT 0
7394: PPUSH
7395: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
7399: LD_ADDR_EXP 31
7403: PUSH
7404: LD_EXP 31
7408: PUSH
7409: LD_VAR 0 12
7413: ADD
7414: ST_TO_ADDR
// hc_class = 3 ;
7415: LD_ADDR_OWVAR 28
7419: PUSH
7420: LD_INT 3
7422: ST_TO_ADDR
// hc_name =  ;
7423: LD_ADDR_OWVAR 26
7427: PUSH
7428: LD_STRING 
7430: ST_TO_ADDR
// hc_gallery =  ;
7431: LD_ADDR_OWVAR 33
7435: PUSH
7436: LD_STRING 
7438: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7439: LD_INT 0
7441: PPUSH
7442: LD_INT 3
7444: PPUSH
7445: LD_EXP 24
7449: PPUSH
7450: LD_EXP 25
7454: PPUSH
7455: CALL_OW 12
7459: PPUSH
7460: CALL_OW 380
// un = CreateHuman ;
7464: LD_ADDR_VAR 0 10
7468: PUSH
7469: CALL_OW 44
7473: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7474: LD_VAR 0 10
7478: PPUSH
7479: LD_VAR 0 12
7483: PPUSH
7484: CALL_OW 52
// defenders_list = defenders_list ^ un ;
7488: LD_ADDR_EXP 31
7492: PUSH
7493: LD_EXP 31
7497: PUSH
7498: LD_VAR 0 10
7502: ADD
7503: ST_TO_ADDR
// end ;
7504: GO 7298
7506: POP
7507: POP
// end ;
7508: LD_VAR 0 7
7512: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
7513: LD_INT 0
7515: PPUSH
7516: PPUSH
7517: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
7518: LD_VAR 0 2
7522: PPUSH
7523: LD_INT 22
7525: PUSH
7526: LD_VAR 0 1
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PUSH
7535: EMPTY
7536: LIST
7537: PPUSH
7538: CALL_OW 70
7542: PUSH
7543: LD_INT 0
7545: EQUAL
7546: PUSH
7547: LD_EXP 31
7551: PUSH
7552: LD_INT 0
7554: GREATER
7555: AND
7556: IFFALSE 7602
// begin for i in defenders_list do
7558: LD_ADDR_VAR 0 4
7562: PUSH
7563: LD_EXP 31
7567: PUSH
7568: FOR_IN
7569: IFFALSE 7600
// begin ComMoveXY ( i , 65 , 68 ) ;
7571: LD_VAR 0 4
7575: PPUSH
7576: LD_INT 65
7578: PPUSH
7579: LD_INT 68
7581: PPUSH
7582: CALL_OW 111
// SetFuel ( i , 100 ) ;
7586: LD_VAR 0 4
7590: PPUSH
7591: LD_INT 100
7593: PPUSH
7594: CALL_OW 240
// end ;
7598: GO 7568
7600: POP
7601: POP
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
7602: LD_VAR 0 2
7606: PPUSH
7607: LD_INT 22
7609: PUSH
7610: LD_VAR 0 1
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: PPUSH
7622: CALL_OW 70
7626: PUSH
7627: LD_INT 0
7629: GREATER
7630: PUSH
7631: LD_EXP 31
7635: PUSH
7636: LD_INT 0
7638: GREATER
7639: AND
7640: IFFALSE 7808
// begin for i in defenders_list do
7642: LD_ADDR_VAR 0 4
7646: PUSH
7647: LD_EXP 31
7651: PUSH
7652: FOR_IN
7653: IFFALSE 7703
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7655: LD_ADDR_VAR 0 5
7659: PUSH
7660: LD_INT 22
7662: PUSH
7663: LD_VAR 0 1
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PPUSH
7672: CALL_OW 69
7676: PPUSH
7677: LD_VAR 0 4
7681: PPUSH
7682: CALL_OW 74
7686: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
7687: LD_VAR 0 4
7691: PPUSH
7692: LD_VAR 0 5
7696: PPUSH
7697: CALL_OW 115
// end ;
7701: GO 7652
7703: POP
7704: POP
// if russianAI = 0 then
7705: LD_EXP 26
7709: PUSH
7710: LD_INT 0
7712: EQUAL
7713: IFFALSE 7808
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) diff Borodin do
7715: LD_ADDR_VAR 0 4
7719: PUSH
7720: LD_INT 22
7722: PUSH
7723: LD_INT 3
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 25
7732: PUSH
7733: LD_INT 1
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: PPUSH
7744: CALL_OW 69
7748: PUSH
7749: LD_EXP 23
7753: DIFF
7754: PUSH
7755: FOR_IN
7756: IFFALSE 7806
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7758: LD_ADDR_VAR 0 5
7762: PUSH
7763: LD_INT 22
7765: PUSH
7766: LD_VAR 0 1
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PPUSH
7775: CALL_OW 69
7779: PPUSH
7780: LD_VAR 0 4
7784: PPUSH
7785: CALL_OW 74
7789: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
7790: LD_VAR 0 4
7794: PPUSH
7795: LD_VAR 0 5
7799: PPUSH
7800: CALL_OW 115
// end ;
7804: GO 7755
7806: POP
7807: POP
// end ; end ; end ;
7808: LD_VAR 0 3
7812: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
7813: LD_INT 0
7815: PPUSH
7816: PPUSH
7817: PPUSH
7818: PPUSH
7819: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
7820: LD_ADDR_VAR 0 6
7824: PUSH
7825: LD_INT 22
7827: PUSH
7828: LD_VAR 0 1
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: LD_INT 2
7839: PUSH
7840: LD_INT 25
7842: PUSH
7843: LD_INT 2
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 25
7852: PUSH
7853: LD_INT 16
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: PUSH
7865: LD_INT 24
7867: PUSH
7868: LD_INT 1000
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: PPUSH
7880: CALL_OW 69
7884: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7885: LD_ADDR_VAR 0 4
7889: PUSH
7890: LD_INT 22
7892: PUSH
7893: LD_VAR 0 1
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PUSH
7902: LD_INT 21
7904: PUSH
7905: LD_INT 3
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 3
7914: PUSH
7915: LD_INT 24
7917: PUSH
7918: LD_INT 1000
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: PUSH
7934: EMPTY
7935: LIST
7936: PPUSH
7937: CALL_OW 69
7941: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
7942: LD_VAR 0 4
7946: PUSH
7947: LD_INT 0
7949: GREATER
7950: PUSH
7951: LD_VAR 0 6
7955: PUSH
7956: LD_INT 0
7958: GREATER
7959: AND
7960: IFFALSE 8026
// begin for i in engineerOk_list do
7962: LD_ADDR_VAR 0 5
7966: PUSH
7967: LD_VAR 0 6
7971: PUSH
7972: FOR_IN
7973: IFFALSE 8024
// begin for j in buildings_list do
7975: LD_ADDR_VAR 0 7
7979: PUSH
7980: LD_VAR 0 4
7984: PUSH
7985: FOR_IN
7986: IFFALSE 8020
// begin AddComExitBuilding ( i ) ;
7988: LD_VAR 0 5
7992: PPUSH
7993: CALL_OW 182
// wait ( 0 0$1 ) ;
7997: LD_INT 35
7999: PPUSH
8000: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8004: LD_VAR 0 5
8008: PPUSH
8009: LD_VAR 0 7
8013: PPUSH
8014: CALL_OW 190
// end ;
8018: GO 7985
8020: POP
8021: POP
// end ;
8022: GO 7972
8024: POP
8025: POP
// end ; if buildings_list = 0 then
8026: LD_VAR 0 4
8030: PUSH
8031: LD_INT 0
8033: EQUAL
8034: IFFALSE 8067
// begin for i in engineerOK_list do
8036: LD_ADDR_VAR 0 5
8040: PUSH
8041: LD_VAR 0 6
8045: PUSH
8046: FOR_IN
8047: IFFALSE 8065
// begin ComEnterUnit ( i , building ) ;
8049: LD_VAR 0 5
8053: PPUSH
8054: LD_VAR 0 2
8058: PPUSH
8059: CALL_OW 120
// end ;
8063: GO 8046
8065: POP
8066: POP
// end ; end ;
8067: LD_VAR 0 3
8071: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
8072: LD_INT 0
8074: PPUSH
8075: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
8076: LD_INT 22
8078: PUSH
8079: LD_VAR 0 1
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: LD_INT 25
8090: PUSH
8091: LD_INT 2
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PPUSH
8102: CALL_OW 69
8106: PUSH
8107: LD_INT 0
8109: GREATER
8110: PUSH
8111: LD_INT 22
8113: PUSH
8114: LD_VAR 0 1
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PUSH
8123: LD_INT 21
8125: PUSH
8126: LD_INT 3
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: LD_INT 3
8135: PUSH
8136: LD_INT 24
8138: PUSH
8139: LD_INT 1000
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: PPUSH
8155: CALL_OW 69
8159: PUSH
8160: LD_INT 0
8162: EQUAL
8163: AND
8164: PUSH
8165: LD_VAR 0 2
8169: PUSH
8170: LD_INT 0
8172: GREATER
8173: AND
8174: IFFALSE 8273
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8176: LD_ADDR_VAR 0 4
8180: PUSH
8181: LD_INT 22
8183: PUSH
8184: LD_VAR 0 1
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: PUSH
8193: LD_INT 25
8195: PUSH
8196: LD_INT 2
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PPUSH
8207: CALL_OW 69
8211: PUSH
8212: FOR_IN
8213: IFFALSE 8271
// begin AddComExitBuilding ( i ) ;
8215: LD_VAR 0 4
8219: PPUSH
8220: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8224: LD_VAR 0 4
8228: PPUSH
8229: LD_VAR 0 2
8233: PUSH
8234: LD_INT 1
8236: ARRAY
8237: PPUSH
8238: LD_VAR 0 2
8242: PUSH
8243: LD_INT 2
8245: ARRAY
8246: PPUSH
8247: LD_VAR 0 2
8251: PUSH
8252: LD_INT 3
8254: ARRAY
8255: PPUSH
8256: LD_VAR 0 2
8260: PUSH
8261: LD_INT 4
8263: ARRAY
8264: PPUSH
8265: CALL_OW 205
// end ;
8269: GO 8212
8271: POP
8272: POP
// end ; end ;
8273: LD_VAR 0 3
8277: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8278: LD_INT 0
8280: PPUSH
8281: PPUSH
8282: PPUSH
8283: PPUSH
8284: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8285: LD_ADDR_VAR 0 6
8289: PUSH
8290: LD_INT 22
8292: PUSH
8293: LD_VAR 0 1
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 25
8304: PUSH
8305: LD_INT 4
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PPUSH
8316: CALL_OW 69
8320: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8321: LD_ADDR_VAR 0 9
8325: PUSH
8326: LD_VAR 0 3
8330: PPUSH
8331: LD_INT 22
8333: PUSH
8334: LD_VAR 0 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 21
8345: PUSH
8346: LD_INT 1
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 3
8355: PUSH
8356: LD_INT 24
8358: PUSH
8359: LD_INT 750
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: LIST
8374: PPUSH
8375: CALL_OW 70
8379: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
8380: LD_VAR 0 9
8384: PUSH
8385: LD_INT 0
8387: GREATER
8388: PUSH
8389: LD_VAR 0 6
8393: PUSH
8394: LD_INT 0
8396: GREATER
8397: AND
8398: IFFALSE 8525
// begin for i = 1 to damageUnits do
8400: LD_ADDR_VAR 0 7
8404: PUSH
8405: DOUBLE
8406: LD_INT 1
8408: DEC
8409: ST_TO_ADDR
8410: LD_VAR 0 9
8414: PUSH
8415: FOR_TO
8416: IFFALSE 8440
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
8418: LD_VAR 0 9
8422: PUSH
8423: LD_VAR 0 7
8427: ARRAY
8428: PPUSH
8429: LD_VAR 0 2
8433: PPUSH
8434: CALL_OW 113
8438: GO 8415
8440: POP
8441: POP
// for i in sci_list do
8442: LD_ADDR_VAR 0 7
8446: PUSH
8447: LD_VAR 0 6
8451: PUSH
8452: FOR_IN
8453: IFFALSE 8521
// begin ComExitBuilding ( i ) ;
8455: LD_VAR 0 7
8459: PPUSH
8460: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
8464: LD_ADDR_VAR 0 8
8468: PUSH
8469: LD_VAR 0 2
8473: PPUSH
8474: LD_INT 22
8476: PUSH
8477: LD_VAR 0 1
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PPUSH
8486: CALL_OW 70
8490: PUSH
8491: FOR_IN
8492: IFFALSE 8517
// begin AddComHeal ( i , j ) ;
8494: LD_VAR 0 7
8498: PPUSH
8499: LD_VAR 0 8
8503: PPUSH
8504: CALL_OW 188
// wait ( 1 1$0 ) ;
8508: LD_INT 2100
8510: PPUSH
8511: CALL_OW 67
// end ;
8515: GO 8491
8517: POP
8518: POP
// end ;
8519: GO 8452
8521: POP
8522: POP
// end else
8523: GO 8539
// begin AddComEnterUnit ( sci_list , build ) ;
8525: LD_VAR 0 6
8529: PPUSH
8530: LD_VAR 0 4
8534: PPUSH
8535: CALL_OW 180
// end ; end ;
8539: LD_VAR 0 5
8543: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
8544: LD_INT 0
8546: PPUSH
8547: PPUSH
8548: PPUSH
8549: PPUSH
8550: PPUSH
8551: PPUSH
8552: PPUSH
8553: PPUSH
8554: PPUSH
8555: PPUSH
8556: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8557: LD_ADDR_VAR 0 9
8561: PUSH
8562: LD_INT 22
8564: PUSH
8565: LD_VAR 0 1
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: PUSH
8574: LD_INT 21
8576: PUSH
8577: LD_INT 2
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 33
8586: PUSH
8587: LD_INT 1
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: LD_INT 24
8596: PUSH
8597: LD_INT 660
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: LD_INT 3
8606: PUSH
8607: LD_INT 58
8609: PUSH
8610: EMPTY
8611: LIST
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PUSH
8617: LD_INT 3
8619: PUSH
8620: LD_INT 34
8622: PUSH
8623: LD_INT 53
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: PPUSH
8642: CALL_OW 69
8646: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
8647: LD_ADDR_VAR 0 10
8651: PUSH
8652: LD_INT 22
8654: PUSH
8655: LD_VAR 0 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 21
8666: PUSH
8667: LD_INT 2
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 33
8676: PUSH
8677: LD_INT 1
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 3
8686: PUSH
8687: LD_INT 24
8689: PUSH
8690: LD_INT 660
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 69
8711: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8712: LD_ADDR_VAR 0 11
8716: PUSH
8717: LD_VAR 0 2
8721: PPUSH
8722: LD_INT 22
8724: PUSH
8725: LD_VAR 0 1
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 21
8736: PUSH
8737: LD_INT 2
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 33
8746: PUSH
8747: LD_INT 1
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 3
8756: PUSH
8757: LD_INT 24
8759: PUSH
8760: LD_INT 1000
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: PPUSH
8777: CALL_OW 70
8781: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8782: LD_ADDR_VAR 0 12
8786: PUSH
8787: LD_VAR 0 2
8791: PPUSH
8792: LD_INT 22
8794: PUSH
8795: LD_VAR 0 1
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: LD_INT 21
8806: PUSH
8807: LD_INT 2
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: LD_INT 33
8816: PUSH
8817: LD_INT 1
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 24
8826: PUSH
8827: LD_INT 1000
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 58
8836: PUSH
8837: EMPTY
8838: LIST
8839: PUSH
8840: LD_INT 3
8842: PUSH
8843: LD_INT 34
8845: PUSH
8846: LD_INT 53
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: PPUSH
8865: CALL_OW 70
8869: ST_TO_ADDR
// mechanicInside_list = [ ] ;
8870: LD_ADDR_VAR 0 13
8874: PUSH
8875: EMPTY
8876: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8877: LD_ADDR_VAR 0 14
8881: PUSH
8882: LD_VAR 0 2
8886: PPUSH
8887: LD_INT 22
8889: PUSH
8890: LD_VAR 0 1
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: LD_INT 25
8901: PUSH
8902: LD_INT 3
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PPUSH
8913: CALL_OW 70
8917: ST_TO_ADDR
// if damageVehicle_list > 0 then
8918: LD_VAR 0 10
8922: PUSH
8923: LD_INT 0
8925: GREATER
8926: IFFALSE 8964
// begin for i in damageVehicle_list do
8928: LD_ADDR_VAR 0 7
8932: PUSH
8933: LD_VAR 0 10
8937: PUSH
8938: FOR_IN
8939: IFFALSE 8962
// begin ComMoveXY ( i , repX , repY ) ;
8941: LD_VAR 0 7
8945: PPUSH
8946: LD_VAR 0 3
8950: PPUSH
8951: LD_VAR 0 4
8955: PPUSH
8956: CALL_OW 111
// end ;
8960: GO 8938
8962: POP
8963: POP
// end ; if vehicleNeedRepair_list > 0 then
8964: LD_VAR 0 11
8968: PUSH
8969: LD_INT 0
8971: GREATER
8972: IFFALSE 9059
// begin for i in vehicleNeedRepair_list do
8974: LD_ADDR_VAR 0 7
8978: PUSH
8979: LD_VAR 0 11
8983: PUSH
8984: FOR_IN
8985: IFFALSE 9057
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
8987: LD_ADDR_VAR 0 13
8991: PUSH
8992: LD_VAR 0 13
8996: PUSH
8997: LD_VAR 0 7
9001: PPUSH
9002: CALL_OW 313
9006: ADD
9007: ST_TO_ADDR
// for j in mechanicInside_list do
9008: LD_ADDR_VAR 0 8
9012: PUSH
9013: LD_VAR 0 13
9017: PUSH
9018: FOR_IN
9019: IFFALSE 9053
// begin ComExitVehicle ( i ) ;
9021: LD_VAR 0 7
9025: PPUSH
9026: CALL_OW 121
// wait ( 0 0$1 ) ;
9030: LD_INT 35
9032: PPUSH
9033: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
9037: LD_VAR 0 7
9041: PPUSH
9042: LD_VAR 0 8
9046: PPUSH
9047: CALL_OW 129
// end ;
9051: GO 9018
9053: POP
9054: POP
// end ;
9055: GO 8984
9057: POP
9058: POP
// end ; if vehicleDontNeedRepair_list > 0 then
9059: LD_VAR 0 12
9063: PUSH
9064: LD_INT 0
9066: GREATER
9067: IFFALSE 9107
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
9069: LD_VAR 0 14
9073: PUSH
9074: LD_INT 1
9076: ARRAY
9077: PPUSH
9078: LD_VAR 0 12
9082: PUSH
9083: LD_INT 1
9085: ARRAY
9086: PPUSH
9087: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
9091: LD_VAR 0 12
9095: PUSH
9096: LD_INT 1
9098: ARRAY
9099: PPUSH
9100: LD_INT 100
9102: PPUSH
9103: CALL_OW 240
// end ; if vehicleOK_list > 0 then
9107: LD_VAR 0 9
9111: PUSH
9112: LD_INT 0
9114: GREATER
9115: IFFALSE 9306
// begin for i in vehicleOK_list do
9117: LD_ADDR_VAR 0 7
9121: PUSH
9122: LD_VAR 0 9
9126: PUSH
9127: FOR_IN
9128: IFFALSE 9304
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9130: LD_ADDR_VAR 0 15
9134: PUSH
9135: LD_INT 22
9137: PUSH
9138: LD_VAR 0 5
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PPUSH
9147: CALL_OW 69
9151: PPUSH
9152: LD_VAR 0 7
9156: PPUSH
9157: CALL_OW 74
9161: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9162: LD_ADDR_VAR 0 16
9166: PUSH
9167: LD_INT 22
9169: PUSH
9170: LD_VAR 0 5
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PUSH
9179: LD_INT 2
9181: PUSH
9182: LD_INT 59
9184: PUSH
9185: EMPTY
9186: LIST
9187: PUSH
9188: LD_INT 21
9190: PUSH
9191: LD_INT 1
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: LD_INT 21
9200: PUSH
9201: LD_INT 2
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: EMPTY
9219: LIST
9220: PPUSH
9221: CALL_OW 69
9225: PPUSH
9226: LD_VAR 0 7
9230: PPUSH
9231: CALL_OW 74
9235: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9236: LD_VAR 0 7
9240: PPUSH
9241: LD_VAR 0 15
9245: PPUSH
9246: CALL_OW 296
9250: PUSH
9251: LD_INT 8
9253: PLUS
9254: PUSH
9255: LD_VAR 0 7
9259: PPUSH
9260: LD_VAR 0 16
9264: PPUSH
9265: CALL_OW 296
9269: LESS
9270: IFFALSE 9288
// begin ComAttackUnit ( i , target1 ) ;
9272: LD_VAR 0 7
9276: PPUSH
9277: LD_VAR 0 15
9281: PPUSH
9282: CALL_OW 115
// end else
9286: GO 9302
// begin ComAttackUnit ( i , target2 ) ;
9288: LD_VAR 0 7
9292: PPUSH
9293: LD_VAR 0 16
9297: PPUSH
9298: CALL_OW 115
// end ; end ;
9302: GO 9127
9304: POP
9305: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
9306: LD_ADDR_VAR 0 7
9310: PUSH
9311: LD_VAR 0 2
9315: PPUSH
9316: LD_INT 22
9318: PUSH
9319: LD_VAR 0 1
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PUSH
9328: LD_INT 25
9330: PUSH
9331: LD_INT 3
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PPUSH
9342: CALL_OW 70
9346: NOT
9347: PUSH
9348: FOR_IN
9349: IFFALSE 9372
// ComMoveXY ( i , repX , repY ) ;
9351: LD_VAR 0 7
9355: PPUSH
9356: LD_VAR 0 3
9360: PPUSH
9361: LD_VAR 0 4
9365: PPUSH
9366: CALL_OW 111
9370: GO 9348
9372: POP
9373: POP
// end ;
9374: LD_VAR 0 6
9378: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
9379: LD_INT 0
9381: PPUSH
9382: PPUSH
9383: PPUSH
9384: PPUSH
9385: PPUSH
9386: PPUSH
9387: PPUSH
9388: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9389: LD_INT 22
9391: PUSH
9392: LD_VAR 0 1
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: LD_INT 21
9403: PUSH
9404: LD_INT 2
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PPUSH
9415: CALL_OW 69
9419: PUSH
9420: LD_VAR 0 3
9424: LESSEQUAL
9425: IFFALSE 9492
// for i = 1 to vehCount do
9427: LD_ADDR_VAR 0 10
9431: PUSH
9432: DOUBLE
9433: LD_INT 1
9435: DEC
9436: ST_TO_ADDR
9437: LD_VAR 0 3
9441: PUSH
9442: FOR_TO
9443: IFFALSE 9490
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
9445: LD_VAR 0 2
9449: PPUSH
9450: LD_VAR 0 8
9454: PPUSH
9455: LD_VAR 0 6
9459: PPUSH
9460: LD_VAR 0 7
9464: PPUSH
9465: LD_VAR 0 5
9469: PUSH
9470: LD_INT 1
9472: PPUSH
9473: LD_VAR 0 5
9477: PPUSH
9478: CALL_OW 12
9482: ARRAY
9483: PPUSH
9484: CALL_OW 185
9488: GO 9442
9490: POP
9491: POP
// repeat wait ( 0 0$1 ) ;
9492: LD_INT 35
9494: PPUSH
9495: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
9499: LD_INT 22
9501: PUSH
9502: LD_VAR 0 1
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 21
9513: PUSH
9514: LD_INT 2
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 24
9523: PUSH
9524: LD_INT 250
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: PPUSH
9536: CALL_OW 69
9540: PUSH
9541: LD_VAR 0 3
9545: GREATEREQUAL
9546: IFFALSE 9492
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
9548: LD_INT 22
9550: PUSH
9551: LD_VAR 0 1
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: LD_INT 21
9562: PUSH
9563: LD_INT 2
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: LD_INT 24
9572: PUSH
9573: LD_INT 250
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: LIST
9584: PPUSH
9585: CALL_OW 69
9589: PUSH
9590: LD_VAR 0 3
9594: GREATEREQUAL
9595: IFFALSE 9938
// begin repeat begin wait ( 0 0$1 ) ;
9597: LD_INT 35
9599: PPUSH
9600: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
9604: LD_INT 22
9606: PUSH
9607: LD_VAR 0 1
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 21
9618: PUSH
9619: LD_INT 2
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 24
9628: PUSH
9629: LD_INT 651
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: PPUSH
9641: CALL_OW 69
9645: PUSH
9646: LD_INT 0
9648: GREATER
9649: IFFALSE 9877
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
9651: LD_ADDR_VAR 0 10
9655: PUSH
9656: LD_INT 22
9658: PUSH
9659: LD_VAR 0 1
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PUSH
9668: LD_INT 21
9670: PUSH
9671: LD_INT 2
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 24
9680: PUSH
9681: LD_INT 651
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: PPUSH
9693: CALL_OW 69
9697: PUSH
9698: FOR_IN
9699: IFFALSE 9875
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9701: LD_ADDR_VAR 0 15
9705: PUSH
9706: LD_INT 22
9708: PUSH
9709: LD_VAR 0 4
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PPUSH
9718: CALL_OW 69
9722: PPUSH
9723: LD_VAR 0 10
9727: PPUSH
9728: CALL_OW 74
9732: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9733: LD_ADDR_VAR 0 16
9737: PUSH
9738: LD_INT 22
9740: PUSH
9741: LD_VAR 0 4
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PUSH
9750: LD_INT 2
9752: PUSH
9753: LD_INT 59
9755: PUSH
9756: EMPTY
9757: LIST
9758: PUSH
9759: LD_INT 21
9761: PUSH
9762: LD_INT 1
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: LD_INT 21
9771: PUSH
9772: LD_INT 2
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: EMPTY
9790: LIST
9791: PPUSH
9792: CALL_OW 69
9796: PPUSH
9797: LD_VAR 0 10
9801: PPUSH
9802: CALL_OW 74
9806: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9807: LD_VAR 0 10
9811: PPUSH
9812: LD_VAR 0 15
9816: PPUSH
9817: CALL_OW 296
9821: PUSH
9822: LD_INT 8
9824: PLUS
9825: PUSH
9826: LD_VAR 0 10
9830: PPUSH
9831: LD_VAR 0 16
9835: PPUSH
9836: CALL_OW 296
9840: LESS
9841: IFFALSE 9859
// begin ComAttackUnit ( i , target1 ) ;
9843: LD_VAR 0 10
9847: PPUSH
9848: LD_VAR 0 15
9852: PPUSH
9853: CALL_OW 115
// end else
9857: GO 9873
// begin ComAttackUnit ( i , target2 ) ;
9859: LD_VAR 0 10
9863: PPUSH
9864: LD_VAR 0 16
9868: PPUSH
9869: CALL_OW 115
// end ; end ;
9873: GO 9698
9875: POP
9876: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
9877: LD_INT 22
9879: PUSH
9880: LD_VAR 0 1
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 21
9891: PUSH
9892: LD_INT 2
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 69
9907: PUSH
9908: LD_INT 0
9910: EQUAL
9911: PUSH
9912: LD_INT 22
9914: PUSH
9915: LD_VAR 0 4
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: EMPTY
9925: LIST
9926: PPUSH
9927: CALL_OW 69
9931: PUSH
9932: LD_INT 0
9934: EQUAL
9935: OR
9936: IFFALSE 9597
// end ; end ;
9938: LD_VAR 0 9
9942: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
9943: LD_INT 0
9945: PPUSH
9946: PPUSH
9947: PPUSH
9948: PPUSH
9949: PPUSH
9950: PPUSH
9951: PPUSH
9952: PPUSH
9953: PPUSH
9954: PPUSH
9955: PPUSH
// for i = 1 to medicCount do
9956: LD_ADDR_VAR 0 14
9960: PUSH
9961: DOUBLE
9962: LD_INT 1
9964: DEC
9965: ST_TO_ADDR
9966: LD_VAR 0 7
9970: PUSH
9971: FOR_TO
9972: IFFALSE 10054
// begin uc_side = side ;
9974: LD_ADDR_OWVAR 20
9978: PUSH
9979: LD_VAR 0 1
9983: ST_TO_ADDR
// uc_nation = nation ;
9984: LD_ADDR_OWVAR 21
9988: PUSH
9989: LD_VAR 0 2
9993: ST_TO_ADDR
// hc_name =  ;
9994: LD_ADDR_OWVAR 26
9998: PUSH
9999: LD_STRING 
10001: ST_TO_ADDR
// hc_gallery =  ;
10002: LD_ADDR_OWVAR 33
10006: PUSH
10007: LD_STRING 
10009: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10010: LD_INT 0
10012: PPUSH
10013: LD_INT 4
10015: PPUSH
10016: LD_VAR 0 8
10020: PPUSH
10021: CALL_OW 380
// un = CreateHuman ;
10025: LD_ADDR_VAR 0 16
10029: PUSH
10030: CALL_OW 44
10034: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10035: LD_VAR 0 16
10039: PPUSH
10040: LD_VAR 0 9
10044: PPUSH
10045: LD_INT 0
10047: PPUSH
10048: CALL_OW 49
// end ;
10052: GO 9971
10054: POP
10055: POP
// for i = 1 to soldierCount do
10056: LD_ADDR_VAR 0 14
10060: PUSH
10061: DOUBLE
10062: LD_INT 1
10064: DEC
10065: ST_TO_ADDR
10066: LD_VAR 0 3
10070: PUSH
10071: FOR_TO
10072: IFFALSE 10154
// begin uc_side = side ;
10074: LD_ADDR_OWVAR 20
10078: PUSH
10079: LD_VAR 0 1
10083: ST_TO_ADDR
// uc_nation = nation ;
10084: LD_ADDR_OWVAR 21
10088: PUSH
10089: LD_VAR 0 2
10093: ST_TO_ADDR
// hc_name =  ;
10094: LD_ADDR_OWVAR 26
10098: PUSH
10099: LD_STRING 
10101: ST_TO_ADDR
// hc_gallery =  ;
10102: LD_ADDR_OWVAR 33
10106: PUSH
10107: LD_STRING 
10109: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10110: LD_INT 0
10112: PPUSH
10113: LD_INT 1
10115: PPUSH
10116: LD_VAR 0 8
10120: PPUSH
10121: CALL_OW 380
// un = CreateHuman ;
10125: LD_ADDR_VAR 0 16
10129: PUSH
10130: CALL_OW 44
10134: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10135: LD_VAR 0 16
10139: PPUSH
10140: LD_VAR 0 9
10144: PPUSH
10145: LD_INT 0
10147: PPUSH
10148: CALL_OW 49
// end ;
10152: GO 10071
10154: POP
10155: POP
// for i = 1 to sniperCount do
10156: LD_ADDR_VAR 0 14
10160: PUSH
10161: DOUBLE
10162: LD_INT 1
10164: DEC
10165: ST_TO_ADDR
10166: LD_VAR 0 4
10170: PUSH
10171: FOR_TO
10172: IFFALSE 10254
// begin uc_side = side ;
10174: LD_ADDR_OWVAR 20
10178: PUSH
10179: LD_VAR 0 1
10183: ST_TO_ADDR
// uc_nation = nation ;
10184: LD_ADDR_OWVAR 21
10188: PUSH
10189: LD_VAR 0 2
10193: ST_TO_ADDR
// hc_name =  ;
10194: LD_ADDR_OWVAR 26
10198: PUSH
10199: LD_STRING 
10201: ST_TO_ADDR
// hc_gallery =  ;
10202: LD_ADDR_OWVAR 33
10206: PUSH
10207: LD_STRING 
10209: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10210: LD_INT 0
10212: PPUSH
10213: LD_INT 5
10215: PPUSH
10216: LD_VAR 0 8
10220: PPUSH
10221: CALL_OW 380
// un = CreateHuman ;
10225: LD_ADDR_VAR 0 16
10229: PUSH
10230: CALL_OW 44
10234: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10235: LD_VAR 0 16
10239: PPUSH
10240: LD_VAR 0 9
10244: PPUSH
10245: LD_INT 0
10247: PPUSH
10248: CALL_OW 49
// end ;
10252: GO 10171
10254: POP
10255: POP
// for i = 1 to bazookCount do
10256: LD_ADDR_VAR 0 14
10260: PUSH
10261: DOUBLE
10262: LD_INT 1
10264: DEC
10265: ST_TO_ADDR
10266: LD_VAR 0 5
10270: PUSH
10271: FOR_TO
10272: IFFALSE 10354
// begin uc_side = side ;
10274: LD_ADDR_OWVAR 20
10278: PUSH
10279: LD_VAR 0 1
10283: ST_TO_ADDR
// uc_nation = nation ;
10284: LD_ADDR_OWVAR 21
10288: PUSH
10289: LD_VAR 0 2
10293: ST_TO_ADDR
// hc_name =  ;
10294: LD_ADDR_OWVAR 26
10298: PUSH
10299: LD_STRING 
10301: ST_TO_ADDR
// hc_gallery =  ;
10302: LD_ADDR_OWVAR 33
10306: PUSH
10307: LD_STRING 
10309: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10310: LD_INT 0
10312: PPUSH
10313: LD_INT 9
10315: PPUSH
10316: LD_VAR 0 8
10320: PPUSH
10321: CALL_OW 380
// un = CreateHuman ;
10325: LD_ADDR_VAR 0 16
10329: PUSH
10330: CALL_OW 44
10334: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10335: LD_VAR 0 16
10339: PPUSH
10340: LD_VAR 0 9
10344: PPUSH
10345: LD_INT 0
10347: PPUSH
10348: CALL_OW 49
// end ;
10352: GO 10271
10354: POP
10355: POP
// for i = 1 to mortalCount do
10356: LD_ADDR_VAR 0 14
10360: PUSH
10361: DOUBLE
10362: LD_INT 1
10364: DEC
10365: ST_TO_ADDR
10366: LD_VAR 0 6
10370: PUSH
10371: FOR_TO
10372: IFFALSE 10454
// begin uc_side = side ;
10374: LD_ADDR_OWVAR 20
10378: PUSH
10379: LD_VAR 0 1
10383: ST_TO_ADDR
// uc_nation = nation ;
10384: LD_ADDR_OWVAR 21
10388: PUSH
10389: LD_VAR 0 2
10393: ST_TO_ADDR
// hc_name =  ;
10394: LD_ADDR_OWVAR 26
10398: PUSH
10399: LD_STRING 
10401: ST_TO_ADDR
// hc_gallery =  ;
10402: LD_ADDR_OWVAR 33
10406: PUSH
10407: LD_STRING 
10409: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10410: LD_INT 0
10412: PPUSH
10413: LD_INT 8
10415: PPUSH
10416: LD_VAR 0 8
10420: PPUSH
10421: CALL_OW 380
// un = CreateHuman ;
10425: LD_ADDR_VAR 0 16
10429: PUSH
10430: CALL_OW 44
10434: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10435: LD_VAR 0 16
10439: PPUSH
10440: LD_VAR 0 9
10444: PPUSH
10445: LD_INT 0
10447: PPUSH
10448: CALL_OW 49
// end ;
10452: GO 10371
10454: POP
10455: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10456: LD_ADDR_VAR 0 19
10460: PUSH
10461: LD_INT 22
10463: PUSH
10464: LD_VAR 0 1
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PUSH
10473: LD_INT 2
10475: PUSH
10476: LD_INT 25
10478: PUSH
10479: LD_INT 1
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: LD_INT 25
10488: PUSH
10489: LD_INT 5
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PUSH
10496: LD_INT 25
10498: PUSH
10499: LD_INT 8
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 25
10508: PUSH
10509: LD_INT 9
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 69
10531: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
10532: LD_ADDR_VAR 0 18
10536: PUSH
10537: LD_INT 22
10539: PUSH
10540: LD_VAR 0 1
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 25
10551: PUSH
10552: LD_INT 4
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: ST_TO_ADDR
// for i in medic_list do
10568: LD_ADDR_VAR 0 14
10572: PUSH
10573: LD_VAR 0 18
10577: PUSH
10578: FOR_IN
10579: IFFALSE 10597
// ComMoveToArea ( i , healArea ) ;
10581: LD_VAR 0 14
10585: PPUSH
10586: LD_VAR 0 10
10590: PPUSH
10591: CALL_OW 113
10595: GO 10578
10597: POP
10598: POP
// if strategy = 1 then
10599: LD_VAR 0 12
10603: PUSH
10604: LD_INT 1
10606: EQUAL
10607: IFFALSE 11342
// begin repeat wait ( 0 0$3 ) ;
10609: LD_INT 105
10611: PPUSH
10612: CALL_OW 67
// for i in soldiersOK_list do
10616: LD_ADDR_VAR 0 14
10620: PUSH
10621: LD_VAR 0 19
10625: PUSH
10626: FOR_IN
10627: IFFALSE 10691
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
10629: LD_VAR 0 14
10633: PPUSH
10634: LD_INT 91
10636: PPUSH
10637: LD_INT 63
10639: PPUSH
10640: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
10644: LD_VAR 0 14
10648: PPUSH
10649: LD_INT 101
10651: PPUSH
10652: LD_INT 53
10654: PPUSH
10655: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
10659: LD_VAR 0 14
10663: PPUSH
10664: LD_INT 75
10666: PPUSH
10667: LD_INT 23
10669: PPUSH
10670: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
10674: LD_VAR 0 14
10678: PPUSH
10679: LD_INT 78
10681: PPUSH
10682: LD_INT 8
10684: PPUSH
10685: CALL_OW 174
// end ;
10689: GO 10626
10691: POP
10692: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
10693: LD_INT 12
10695: PPUSH
10696: LD_INT 22
10698: PUSH
10699: LD_VAR 0 1
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PPUSH
10708: CALL_OW 70
10712: PUSH
10713: LD_INT 2
10715: GREATER
10716: IFFALSE 10609
// repeat wait ( 0 0$1 ) ;
10718: LD_INT 35
10720: PPUSH
10721: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10725: LD_ADDR_VAR 0 17
10729: PUSH
10730: LD_INT 22
10732: PUSH
10733: LD_VAR 0 1
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 1
10744: PUSH
10745: LD_INT 3
10747: PUSH
10748: LD_INT 24
10750: PUSH
10751: LD_INT 550
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: LD_INT 24
10764: PUSH
10765: LD_INT 250
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: LIST
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PPUSH
10781: CALL_OW 69
10785: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10786: LD_ADDR_VAR 0 19
10790: PUSH
10791: LD_INT 22
10793: PUSH
10794: LD_VAR 0 1
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 2
10805: PUSH
10806: LD_INT 25
10808: PUSH
10809: LD_INT 1
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 25
10818: PUSH
10819: LD_INT 5
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: LD_INT 25
10828: PUSH
10829: LD_INT 8
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 25
10838: PUSH
10839: LD_INT 9
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 24
10855: PUSH
10856: LD_INT 1000
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: LIST
10867: PPUSH
10868: CALL_OW 69
10872: ST_TO_ADDR
// if medicCount > 0 then
10873: LD_VAR 0 7
10877: PUSH
10878: LD_INT 0
10880: GREATER
10881: IFFALSE 10955
// begin if damageUnit_list > 0 then
10883: LD_VAR 0 17
10887: PUSH
10888: LD_INT 0
10890: GREATER
10891: IFFALSE 10955
// begin for i in damageUnit_list do
10893: LD_ADDR_VAR 0 14
10897: PUSH
10898: LD_VAR 0 17
10902: PUSH
10903: FOR_IN
10904: IFFALSE 10953
// begin ComMoveToArea ( i , healArea ) ;
10906: LD_VAR 0 14
10910: PPUSH
10911: LD_VAR 0 10
10915: PPUSH
10916: CALL_OW 113
// for j in medic_list do
10920: LD_ADDR_VAR 0 15
10924: PUSH
10925: LD_VAR 0 18
10929: PUSH
10930: FOR_IN
10931: IFFALSE 10949
// AddComHeal ( j , i ) ;
10933: LD_VAR 0 15
10937: PPUSH
10938: LD_VAR 0 14
10942: PPUSH
10943: CALL_OW 188
10947: GO 10930
10949: POP
10950: POP
// end ;
10951: GO 10903
10953: POP
10954: POP
// end ; end ; for i in soldiersOK_list do
10955: LD_ADDR_VAR 0 14
10959: PUSH
10960: LD_VAR 0 19
10964: PUSH
10965: FOR_IN
10966: IFFALSE 11142
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10968: LD_ADDR_VAR 0 22
10972: PUSH
10973: LD_INT 22
10975: PUSH
10976: LD_VAR 0 11
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PPUSH
10985: CALL_OW 69
10989: PPUSH
10990: LD_VAR 0 14
10994: PPUSH
10995: CALL_OW 74
10999: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11000: LD_ADDR_VAR 0 23
11004: PUSH
11005: LD_INT 22
11007: PUSH
11008: LD_VAR 0 11
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: LD_INT 2
11019: PUSH
11020: LD_INT 59
11022: PUSH
11023: EMPTY
11024: LIST
11025: PUSH
11026: LD_INT 21
11028: PUSH
11029: LD_INT 1
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PUSH
11036: LD_INT 21
11038: PUSH
11039: LD_INT 2
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PUSH
11056: EMPTY
11057: LIST
11058: PPUSH
11059: CALL_OW 69
11063: PPUSH
11064: LD_VAR 0 14
11068: PPUSH
11069: CALL_OW 74
11073: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11074: LD_VAR 0 14
11078: PPUSH
11079: LD_VAR 0 22
11083: PPUSH
11084: CALL_OW 296
11088: PUSH
11089: LD_INT 8
11091: PLUS
11092: PUSH
11093: LD_VAR 0 14
11097: PPUSH
11098: LD_VAR 0 23
11102: PPUSH
11103: CALL_OW 296
11107: LESS
11108: IFFALSE 11126
// begin ComAttackUnit ( i , target1 ) ;
11110: LD_VAR 0 14
11114: PPUSH
11115: LD_VAR 0 22
11119: PPUSH
11120: CALL_OW 115
// end else
11124: GO 11140
// begin ComAttackUnit ( i , target2 ) ;
11126: LD_VAR 0 14
11130: PPUSH
11131: LD_VAR 0 23
11135: PPUSH
11136: CALL_OW 115
// end ; end ;
11140: GO 10965
11142: POP
11143: POP
// for i in soldiersOK_list do
11144: LD_ADDR_VAR 0 14
11148: PUSH
11149: LD_VAR 0 19
11153: PUSH
11154: FOR_IN
11155: IFFALSE 11331
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11157: LD_ADDR_VAR 0 22
11161: PUSH
11162: LD_INT 22
11164: PUSH
11165: LD_VAR 0 11
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PPUSH
11174: CALL_OW 69
11178: PPUSH
11179: LD_VAR 0 14
11183: PPUSH
11184: CALL_OW 74
11188: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11189: LD_ADDR_VAR 0 23
11193: PUSH
11194: LD_INT 22
11196: PUSH
11197: LD_VAR 0 11
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 2
11208: PUSH
11209: LD_INT 59
11211: PUSH
11212: EMPTY
11213: LIST
11214: PUSH
11215: LD_INT 21
11217: PUSH
11218: LD_INT 1
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 21
11227: PUSH
11228: LD_INT 2
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: EMPTY
11246: LIST
11247: PPUSH
11248: CALL_OW 69
11252: PPUSH
11253: LD_VAR 0 14
11257: PPUSH
11258: CALL_OW 74
11262: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11263: LD_VAR 0 14
11267: PPUSH
11268: LD_VAR 0 22
11272: PPUSH
11273: CALL_OW 296
11277: PUSH
11278: LD_INT 8
11280: PLUS
11281: PUSH
11282: LD_VAR 0 14
11286: PPUSH
11287: LD_VAR 0 23
11291: PPUSH
11292: CALL_OW 296
11296: LESS
11297: IFFALSE 11315
// begin ComAttackUnit ( i , target1 ) ;
11299: LD_VAR 0 14
11303: PPUSH
11304: LD_VAR 0 22
11308: PPUSH
11309: CALL_OW 115
// end else
11313: GO 11329
// begin ComAttackUnit ( i , target2 ) ;
11315: LD_VAR 0 14
11319: PPUSH
11320: LD_VAR 0 23
11324: PPUSH
11325: CALL_OW 115
// end ; end ;
11329: GO 11154
11331: POP
11332: POP
// until soldiersOK_list = [ ] ;
11333: LD_VAR 0 19
11337: PUSH
11338: EMPTY
11339: EQUAL
11340: IFFALSE 10718
// end ; if strategy = 2 then
11342: LD_VAR 0 12
11346: PUSH
11347: LD_INT 2
11349: EQUAL
11350: IFFALSE 12055
// begin repeat wait ( 0 0$1 ) ;
11352: LD_INT 35
11354: PPUSH
11355: CALL_OW 67
// for i in soldiersOK_list do
11359: LD_ADDR_VAR 0 14
11363: PUSH
11364: LD_VAR 0 19
11368: PUSH
11369: FOR_IN
11370: IFFALSE 11404
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11372: LD_VAR 0 14
11376: PPUSH
11377: LD_INT 91
11379: PPUSH
11380: LD_INT 63
11382: PPUSH
11383: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
11387: LD_VAR 0 14
11391: PPUSH
11392: LD_INT 75
11394: PPUSH
11395: LD_INT 33
11397: PPUSH
11398: CALL_OW 174
// end ;
11402: GO 11369
11404: POP
11405: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
11406: LD_INT 13
11408: PPUSH
11409: LD_INT 22
11411: PUSH
11412: LD_VAR 0 1
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PPUSH
11421: CALL_OW 70
11425: PUSH
11426: LD_INT 2
11428: GREATER
11429: IFFALSE 11352
// repeat wait ( 0 0$3 ) ;
11431: LD_INT 105
11433: PPUSH
11434: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11438: LD_ADDR_VAR 0 17
11442: PUSH
11443: LD_INT 22
11445: PUSH
11446: LD_VAR 0 1
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 1
11457: PUSH
11458: LD_INT 3
11460: PUSH
11461: LD_INT 24
11463: PUSH
11464: LD_INT 550
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 24
11477: PUSH
11478: LD_INT 250
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PPUSH
11494: CALL_OW 69
11498: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11499: LD_ADDR_VAR 0 19
11503: PUSH
11504: LD_INT 22
11506: PUSH
11507: LD_VAR 0 1
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: LD_INT 25
11521: PUSH
11522: LD_INT 1
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 25
11531: PUSH
11532: LD_INT 5
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: LD_INT 25
11541: PUSH
11542: LD_INT 8
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 25
11551: PUSH
11552: LD_INT 9
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 24
11568: PUSH
11569: LD_INT 1000
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: PPUSH
11581: CALL_OW 69
11585: ST_TO_ADDR
// if medicCount > 0 then
11586: LD_VAR 0 7
11590: PUSH
11591: LD_INT 0
11593: GREATER
11594: IFFALSE 11668
// begin if damageUnit_list > 0 then
11596: LD_VAR 0 17
11600: PUSH
11601: LD_INT 0
11603: GREATER
11604: IFFALSE 11668
// begin for i in damageUnit_list do
11606: LD_ADDR_VAR 0 14
11610: PUSH
11611: LD_VAR 0 17
11615: PUSH
11616: FOR_IN
11617: IFFALSE 11666
// begin ComMoveToArea ( i , healArea ) ;
11619: LD_VAR 0 14
11623: PPUSH
11624: LD_VAR 0 10
11628: PPUSH
11629: CALL_OW 113
// for j in medic_list do
11633: LD_ADDR_VAR 0 15
11637: PUSH
11638: LD_VAR 0 18
11642: PUSH
11643: FOR_IN
11644: IFFALSE 11662
// AddComHeal ( j , i ) ;
11646: LD_VAR 0 15
11650: PPUSH
11651: LD_VAR 0 14
11655: PPUSH
11656: CALL_OW 188
11660: GO 11643
11662: POP
11663: POP
// end ;
11664: GO 11616
11666: POP
11667: POP
// end ; end ; for i in soldiersOK_list do
11668: LD_ADDR_VAR 0 14
11672: PUSH
11673: LD_VAR 0 19
11677: PUSH
11678: FOR_IN
11679: IFFALSE 11855
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11681: LD_ADDR_VAR 0 22
11685: PUSH
11686: LD_INT 22
11688: PUSH
11689: LD_VAR 0 11
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PPUSH
11698: CALL_OW 69
11702: PPUSH
11703: LD_VAR 0 14
11707: PPUSH
11708: CALL_OW 74
11712: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11713: LD_ADDR_VAR 0 23
11717: PUSH
11718: LD_INT 22
11720: PUSH
11721: LD_VAR 0 11
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 2
11732: PUSH
11733: LD_INT 59
11735: PUSH
11736: EMPTY
11737: LIST
11738: PUSH
11739: LD_INT 21
11741: PUSH
11742: LD_INT 1
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 21
11751: PUSH
11752: LD_INT 2
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: EMPTY
11770: LIST
11771: PPUSH
11772: CALL_OW 69
11776: PPUSH
11777: LD_VAR 0 14
11781: PPUSH
11782: CALL_OW 74
11786: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11787: LD_VAR 0 14
11791: PPUSH
11792: LD_VAR 0 22
11796: PPUSH
11797: CALL_OW 296
11801: PUSH
11802: LD_INT 8
11804: PLUS
11805: PUSH
11806: LD_VAR 0 14
11810: PPUSH
11811: LD_VAR 0 23
11815: PPUSH
11816: CALL_OW 296
11820: LESS
11821: IFFALSE 11839
// begin ComAttackUnit ( i , target1 ) ;
11823: LD_VAR 0 14
11827: PPUSH
11828: LD_VAR 0 22
11832: PPUSH
11833: CALL_OW 115
// end else
11837: GO 11853
// begin ComAttackUnit ( i , target2 ) ;
11839: LD_VAR 0 14
11843: PPUSH
11844: LD_VAR 0 23
11848: PPUSH
11849: CALL_OW 115
// end ; end ;
11853: GO 11678
11855: POP
11856: POP
// for i in soldiersOK_list do
11857: LD_ADDR_VAR 0 14
11861: PUSH
11862: LD_VAR 0 19
11866: PUSH
11867: FOR_IN
11868: IFFALSE 12044
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11870: LD_ADDR_VAR 0 22
11874: PUSH
11875: LD_INT 22
11877: PUSH
11878: LD_VAR 0 11
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PPUSH
11887: CALL_OW 69
11891: PPUSH
11892: LD_VAR 0 14
11896: PPUSH
11897: CALL_OW 74
11901: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11902: LD_ADDR_VAR 0 23
11906: PUSH
11907: LD_INT 22
11909: PUSH
11910: LD_VAR 0 11
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 2
11921: PUSH
11922: LD_INT 59
11924: PUSH
11925: EMPTY
11926: LIST
11927: PUSH
11928: LD_INT 21
11930: PUSH
11931: LD_INT 1
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 21
11940: PUSH
11941: LD_INT 2
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PUSH
11958: EMPTY
11959: LIST
11960: PPUSH
11961: CALL_OW 69
11965: PPUSH
11966: LD_VAR 0 14
11970: PPUSH
11971: CALL_OW 74
11975: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11976: LD_VAR 0 14
11980: PPUSH
11981: LD_VAR 0 22
11985: PPUSH
11986: CALL_OW 296
11990: PUSH
11991: LD_INT 8
11993: PLUS
11994: PUSH
11995: LD_VAR 0 14
11999: PPUSH
12000: LD_VAR 0 23
12004: PPUSH
12005: CALL_OW 296
12009: LESS
12010: IFFALSE 12028
// begin ComAttackUnit ( i , target1 ) ;
12012: LD_VAR 0 14
12016: PPUSH
12017: LD_VAR 0 22
12021: PPUSH
12022: CALL_OW 115
// end else
12026: GO 12042
// begin ComAttackUnit ( i , target2 ) ;
12028: LD_VAR 0 14
12032: PPUSH
12033: LD_VAR 0 23
12037: PPUSH
12038: CALL_OW 115
// end ; end ;
12042: GO 11867
12044: POP
12045: POP
// until soldiersOK_list = [ ] ;
12046: LD_VAR 0 19
12050: PUSH
12051: EMPTY
12052: EQUAL
12053: IFFALSE 11431
// end ; if strategy = 3 then
12055: LD_VAR 0 12
12059: PUSH
12060: LD_INT 3
12062: EQUAL
12063: IFFALSE 12798
// begin repeat wait ( 0 0$3 ) ;
12065: LD_INT 105
12067: PPUSH
12068: CALL_OW 67
// for i in soldiersOK_list do
12072: LD_ADDR_VAR 0 14
12076: PUSH
12077: LD_VAR 0 19
12081: PUSH
12082: FOR_IN
12083: IFFALSE 12147
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
12085: LD_VAR 0 14
12089: PPUSH
12090: LD_INT 63
12092: PPUSH
12093: LD_INT 71
12095: PPUSH
12096: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
12100: LD_VAR 0 14
12104: PPUSH
12105: LD_INT 35
12107: PPUSH
12108: LD_INT 44
12110: PPUSH
12111: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
12115: LD_VAR 0 14
12119: PPUSH
12120: LD_INT 23
12122: PPUSH
12123: LD_INT 18
12125: PPUSH
12126: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
12130: LD_VAR 0 14
12134: PPUSH
12135: LD_INT 26
12137: PPUSH
12138: LD_INT 12
12140: PPUSH
12141: CALL_OW 174
// end ;
12145: GO 12082
12147: POP
12148: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
12149: LD_INT 14
12151: PPUSH
12152: LD_INT 22
12154: PUSH
12155: LD_VAR 0 1
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PPUSH
12164: CALL_OW 70
12168: PUSH
12169: LD_INT 2
12171: GREATER
12172: IFFALSE 12065
// repeat wait ( 0 0$1 ) ;
12174: LD_INT 35
12176: PPUSH
12177: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12181: LD_ADDR_VAR 0 17
12185: PUSH
12186: LD_INT 22
12188: PUSH
12189: LD_VAR 0 1
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PUSH
12198: LD_INT 1
12200: PUSH
12201: LD_INT 3
12203: PUSH
12204: LD_INT 24
12206: PUSH
12207: LD_INT 550
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 24
12220: PUSH
12221: LD_INT 250
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: LIST
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PPUSH
12237: CALL_OW 69
12241: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12242: LD_ADDR_VAR 0 19
12246: PUSH
12247: LD_INT 22
12249: PUSH
12250: LD_VAR 0 1
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 2
12261: PUSH
12262: LD_INT 25
12264: PUSH
12265: LD_INT 1
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 25
12274: PUSH
12275: LD_INT 5
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 25
12284: PUSH
12285: LD_INT 8
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 25
12294: PUSH
12295: LD_INT 9
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: PUSH
12309: LD_INT 24
12311: PUSH
12312: LD_INT 1000
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: LIST
12323: PPUSH
12324: CALL_OW 69
12328: ST_TO_ADDR
// if medicCount > 0 then
12329: LD_VAR 0 7
12333: PUSH
12334: LD_INT 0
12336: GREATER
12337: IFFALSE 12411
// begin if damageUnit_list > 0 then
12339: LD_VAR 0 17
12343: PUSH
12344: LD_INT 0
12346: GREATER
12347: IFFALSE 12411
// begin for i in damageUnit_list do
12349: LD_ADDR_VAR 0 14
12353: PUSH
12354: LD_VAR 0 17
12358: PUSH
12359: FOR_IN
12360: IFFALSE 12409
// begin ComMoveToArea ( i , healArea ) ;
12362: LD_VAR 0 14
12366: PPUSH
12367: LD_VAR 0 10
12371: PPUSH
12372: CALL_OW 113
// for j in medic_list do
12376: LD_ADDR_VAR 0 15
12380: PUSH
12381: LD_VAR 0 18
12385: PUSH
12386: FOR_IN
12387: IFFALSE 12405
// AddComHeal ( j , i ) ;
12389: LD_VAR 0 15
12393: PPUSH
12394: LD_VAR 0 14
12398: PPUSH
12399: CALL_OW 188
12403: GO 12386
12405: POP
12406: POP
// end ;
12407: GO 12359
12409: POP
12410: POP
// end ; end ; for i in soldiersOK_list do
12411: LD_ADDR_VAR 0 14
12415: PUSH
12416: LD_VAR 0 19
12420: PUSH
12421: FOR_IN
12422: IFFALSE 12598
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12424: LD_ADDR_VAR 0 22
12428: PUSH
12429: LD_INT 22
12431: PUSH
12432: LD_VAR 0 11
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PPUSH
12441: CALL_OW 69
12445: PPUSH
12446: LD_VAR 0 14
12450: PPUSH
12451: CALL_OW 74
12455: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12456: LD_ADDR_VAR 0 23
12460: PUSH
12461: LD_INT 22
12463: PUSH
12464: LD_VAR 0 11
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: LD_INT 2
12475: PUSH
12476: LD_INT 59
12478: PUSH
12479: EMPTY
12480: LIST
12481: PUSH
12482: LD_INT 21
12484: PUSH
12485: LD_INT 1
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 21
12494: PUSH
12495: LD_INT 2
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: EMPTY
12513: LIST
12514: PPUSH
12515: CALL_OW 69
12519: PPUSH
12520: LD_VAR 0 14
12524: PPUSH
12525: CALL_OW 74
12529: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12530: LD_VAR 0 14
12534: PPUSH
12535: LD_VAR 0 22
12539: PPUSH
12540: CALL_OW 296
12544: PUSH
12545: LD_INT 8
12547: PLUS
12548: PUSH
12549: LD_VAR 0 14
12553: PPUSH
12554: LD_VAR 0 23
12558: PPUSH
12559: CALL_OW 296
12563: LESS
12564: IFFALSE 12582
// begin ComAttackUnit ( i , target1 ) ;
12566: LD_VAR 0 14
12570: PPUSH
12571: LD_VAR 0 22
12575: PPUSH
12576: CALL_OW 115
// end else
12580: GO 12596
// begin ComAttackUnit ( i , target2 ) ;
12582: LD_VAR 0 14
12586: PPUSH
12587: LD_VAR 0 23
12591: PPUSH
12592: CALL_OW 115
// end ; end ;
12596: GO 12421
12598: POP
12599: POP
// for i in soldiersOK_list do
12600: LD_ADDR_VAR 0 14
12604: PUSH
12605: LD_VAR 0 19
12609: PUSH
12610: FOR_IN
12611: IFFALSE 12787
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12613: LD_ADDR_VAR 0 22
12617: PUSH
12618: LD_INT 22
12620: PUSH
12621: LD_VAR 0 11
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PPUSH
12630: CALL_OW 69
12634: PPUSH
12635: LD_VAR 0 14
12639: PPUSH
12640: CALL_OW 74
12644: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12645: LD_ADDR_VAR 0 23
12649: PUSH
12650: LD_INT 22
12652: PUSH
12653: LD_VAR 0 11
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: LD_INT 2
12664: PUSH
12665: LD_INT 59
12667: PUSH
12668: EMPTY
12669: LIST
12670: PUSH
12671: LD_INT 21
12673: PUSH
12674: LD_INT 1
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: LD_INT 21
12683: PUSH
12684: LD_INT 2
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PUSH
12701: EMPTY
12702: LIST
12703: PPUSH
12704: CALL_OW 69
12708: PPUSH
12709: LD_VAR 0 14
12713: PPUSH
12714: CALL_OW 74
12718: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12719: LD_VAR 0 14
12723: PPUSH
12724: LD_VAR 0 22
12728: PPUSH
12729: CALL_OW 296
12733: PUSH
12734: LD_INT 8
12736: PLUS
12737: PUSH
12738: LD_VAR 0 14
12742: PPUSH
12743: LD_VAR 0 23
12747: PPUSH
12748: CALL_OW 296
12752: LESS
12753: IFFALSE 12771
// begin ComAttackUnit ( i , target1 ) ;
12755: LD_VAR 0 14
12759: PPUSH
12760: LD_VAR 0 22
12764: PPUSH
12765: CALL_OW 115
// end else
12769: GO 12785
// begin ComAttackUnit ( i , target2 ) ;
12771: LD_VAR 0 14
12775: PPUSH
12776: LD_VAR 0 23
12780: PPUSH
12781: CALL_OW 115
// end ; end ;
12785: GO 12610
12787: POP
12788: POP
// until soldiersOK_list = [ ] ;
12789: LD_VAR 0 19
12793: PUSH
12794: EMPTY
12795: EQUAL
12796: IFFALSE 12174
// end ; end ;
12798: LD_VAR 0 13
12802: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
12803: LD_INT 0
12805: PPUSH
12806: PPUSH
12807: PPUSH
12808: PPUSH
12809: PPUSH
12810: PPUSH
12811: PPUSH
12812: PPUSH
12813: PPUSH
12814: PPUSH
12815: PPUSH
// amChassisTab = [ ] ;
12816: LD_ADDR_VAR 0 19
12820: PUSH
12821: EMPTY
12822: ST_TO_ADDR
// arChassisTab = [ ] ;
12823: LD_ADDR_VAR 0 18
12827: PUSH
12828: EMPTY
12829: ST_TO_ADDR
// ruChassisTab = [ ] ;
12830: LD_ADDR_VAR 0 17
12834: PUSH
12835: EMPTY
12836: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
12837: LD_INT 35
12839: PPUSH
12840: CALL_OW 67
// if nation = 1 then
12844: LD_VAR 0 5
12848: PUSH
12849: LD_INT 1
12851: EQUAL
12852: IFFALSE 13343
// begin uc_side = side ;
12854: LD_ADDR_OWVAR 20
12858: PUSH
12859: LD_VAR 0 2
12863: ST_TO_ADDR
// uc_nation = nation ;
12864: LD_ADDR_OWVAR 21
12868: PUSH
12869: LD_VAR 0 5
12873: ST_TO_ADDR
// vc_engine = vehengine ;
12874: LD_ADDR_OWVAR 39
12878: PUSH
12879: LD_VAR 0 6
12883: ST_TO_ADDR
// vc_control = vehcontrol ;
12884: LD_ADDR_OWVAR 38
12888: PUSH
12889: LD_VAR 0 7
12893: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
12894: LD_ADDR_OWVAR 40
12898: PUSH
12899: LD_VAR 0 10
12903: PUSH
12904: LD_INT 1
12906: PPUSH
12907: LD_VAR 0 10
12911: PPUSH
12912: CALL_OW 12
12916: ARRAY
12917: ST_TO_ADDR
// for j = 1 to AMWeapon do
12918: LD_ADDR_VAR 0 14
12922: PUSH
12923: DOUBLE
12924: LD_INT 1
12926: DEC
12927: ST_TO_ADDR
12928: LD_VAR 0 10
12932: PUSH
12933: FOR_TO
12934: IFFALSE 13235
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
12936: LD_VAR 0 10
12940: PUSH
12941: LD_VAR 0 14
12945: ARRAY
12946: PUSH
12947: LD_INT 2
12949: EQUAL
12950: PUSH
12951: LD_VAR 0 10
12955: PUSH
12956: LD_VAR 0 14
12960: ARRAY
12961: PUSH
12962: LD_INT 3
12964: EQUAL
12965: OR
12966: IFFALSE 13019
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
12968: LD_ADDR_VAR 0 19
12972: PUSH
12973: LD_INT 1
12975: PUSH
12976: LD_INT 2
12978: PUSH
12979: LD_INT 3
12981: PUSH
12982: LD_INT 4
12984: PUSH
12985: LD_INT 5
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12995: LD_ADDR_OWVAR 37
12999: PUSH
13000: LD_VAR 0 19
13004: PUSH
13005: LD_INT 1
13007: PPUSH
13008: LD_VAR 0 19
13012: PPUSH
13013: CALL_OW 12
13017: ARRAY
13018: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13019: LD_VAR 0 10
13023: PUSH
13024: LD_VAR 0 14
13028: ARRAY
13029: PUSH
13030: LD_INT 4
13032: EQUAL
13033: PUSH
13034: LD_VAR 0 10
13038: PUSH
13039: LD_VAR 0 14
13043: ARRAY
13044: PUSH
13045: LD_INT 5
13047: EQUAL
13048: OR
13049: PUSH
13050: LD_VAR 0 10
13054: PUSH
13055: LD_VAR 0 14
13059: ARRAY
13060: PUSH
13061: LD_INT 9
13063: EQUAL
13064: OR
13065: PUSH
13066: LD_VAR 0 10
13070: PUSH
13071: LD_VAR 0 14
13075: ARRAY
13076: PUSH
13077: LD_INT 11
13079: EQUAL
13080: OR
13081: PUSH
13082: LD_VAR 0 10
13086: PUSH
13087: LD_VAR 0 14
13091: ARRAY
13092: PUSH
13093: LD_INT 7
13095: EQUAL
13096: OR
13097: IFFALSE 13146
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
13099: LD_ADDR_VAR 0 19
13103: PUSH
13104: LD_INT 2
13106: PUSH
13107: LD_INT 3
13109: PUSH
13110: LD_INT 4
13112: PUSH
13113: LD_INT 5
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13122: LD_ADDR_OWVAR 37
13126: PUSH
13127: LD_VAR 0 19
13131: PUSH
13132: LD_INT 1
13134: PPUSH
13135: LD_VAR 0 19
13139: PPUSH
13140: CALL_OW 12
13144: ARRAY
13145: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
13146: LD_VAR 0 10
13150: PUSH
13151: LD_VAR 0 14
13155: ARRAY
13156: PUSH
13157: LD_INT 8
13159: EQUAL
13160: PUSH
13161: LD_VAR 0 10
13165: PUSH
13166: LD_VAR 0 14
13170: ARRAY
13171: PUSH
13172: LD_INT 6
13174: EQUAL
13175: OR
13176: PUSH
13177: LD_VAR 0 10
13181: PUSH
13182: LD_VAR 0 14
13186: ARRAY
13187: PUSH
13188: LD_INT 10
13190: EQUAL
13191: OR
13192: IFFALSE 13233
// begin amChassisTab = [ 4 , 5 ] ;
13194: LD_ADDR_VAR 0 19
13198: PUSH
13199: LD_INT 4
13201: PUSH
13202: LD_INT 5
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13209: LD_ADDR_OWVAR 37
13213: PUSH
13214: LD_VAR 0 19
13218: PUSH
13219: LD_INT 1
13221: PPUSH
13222: LD_VAR 0 19
13226: PPUSH
13227: CALL_OW 12
13231: ARRAY
13232: ST_TO_ADDR
// end ; end ;
13233: GO 12933
13235: POP
13236: POP
// veh = CreateVehicle ;
13237: LD_ADDR_VAR 0 16
13241: PUSH
13242: CALL_OW 45
13246: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13247: LD_VAR 0 16
13251: PPUSH
13252: LD_VAR 0 1
13256: PPUSH
13257: LD_INT 0
13259: PPUSH
13260: CALL_OW 49
// if vehControl = 1 then
13264: LD_VAR 0 7
13268: PUSH
13269: LD_INT 1
13271: EQUAL
13272: IFFALSE 13329
// begin hc_gallery =  ;
13274: LD_ADDR_OWVAR 33
13278: PUSH
13279: LD_STRING 
13281: ST_TO_ADDR
// hc_name =  ;
13282: LD_ADDR_OWVAR 26
13286: PUSH
13287: LD_STRING 
13289: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13290: LD_INT 0
13292: PPUSH
13293: LD_INT 3
13295: PPUSH
13296: LD_VAR 0 4
13300: PPUSH
13301: CALL_OW 380
// un = CreateHuman ;
13305: LD_ADDR_VAR 0 15
13309: PUSH
13310: CALL_OW 44
13314: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13315: LD_VAR 0 15
13319: PPUSH
13320: LD_VAR 0 16
13324: PPUSH
13325: CALL_OW 52
// end ; i = i + 1 ;
13329: LD_ADDR_VAR 0 13
13333: PUSH
13334: LD_VAR 0 13
13338: PUSH
13339: LD_INT 1
13341: PLUS
13342: ST_TO_ADDR
// end ; if nation = 2 then
13343: LD_VAR 0 5
13347: PUSH
13348: LD_INT 2
13350: EQUAL
13351: IFFALSE 13775
// begin uc_side = side ;
13353: LD_ADDR_OWVAR 20
13357: PUSH
13358: LD_VAR 0 2
13362: ST_TO_ADDR
// uc_nation = nation ;
13363: LD_ADDR_OWVAR 21
13367: PUSH
13368: LD_VAR 0 5
13372: ST_TO_ADDR
// vc_engine = vehengine ;
13373: LD_ADDR_OWVAR 39
13377: PUSH
13378: LD_VAR 0 6
13382: ST_TO_ADDR
// vc_control = vehcontrol ;
13383: LD_ADDR_OWVAR 38
13387: PUSH
13388: LD_VAR 0 7
13392: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
13393: LD_ADDR_OWVAR 40
13397: PUSH
13398: LD_VAR 0 9
13402: PUSH
13403: LD_INT 1
13405: PPUSH
13406: LD_VAR 0 9
13410: PPUSH
13411: CALL_OW 12
13415: ARRAY
13416: ST_TO_ADDR
// for j = 1 to ARWeapons do
13417: LD_ADDR_VAR 0 14
13421: PUSH
13422: DOUBLE
13423: LD_INT 1
13425: DEC
13426: ST_TO_ADDR
13427: LD_VAR 0 9
13431: PUSH
13432: FOR_TO
13433: IFFALSE 13667
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
13435: LD_VAR 0 9
13439: PUSH
13440: LD_VAR 0 14
13444: ARRAY
13445: PUSH
13446: LD_INT 24
13448: EQUAL
13449: PUSH
13450: LD_VAR 0 9
13454: PUSH
13455: LD_VAR 0 14
13459: ARRAY
13460: PUSH
13461: LD_INT 22
13463: EQUAL
13464: OR
13465: PUSH
13466: LD_VAR 0 9
13470: PUSH
13471: LD_VAR 0 14
13475: ARRAY
13476: PUSH
13477: LD_INT 23
13479: EQUAL
13480: OR
13481: PUSH
13482: LD_VAR 0 9
13486: PUSH
13487: LD_VAR 0 14
13491: ARRAY
13492: PUSH
13493: LD_INT 30
13495: EQUAL
13496: OR
13497: IFFALSE 13546
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
13499: LD_ADDR_VAR 0 18
13503: PUSH
13504: LD_INT 11
13506: PUSH
13507: LD_INT 12
13509: PUSH
13510: LD_INT 13
13512: PUSH
13513: LD_INT 14
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13522: LD_ADDR_OWVAR 37
13526: PUSH
13527: LD_VAR 0 18
13531: PUSH
13532: LD_INT 1
13534: PPUSH
13535: LD_VAR 0 18
13539: PPUSH
13540: CALL_OW 12
13544: ARRAY
13545: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13546: LD_VAR 0 9
13550: PUSH
13551: LD_VAR 0 14
13555: ARRAY
13556: PUSH
13557: LD_INT 29
13559: EQUAL
13560: PUSH
13561: LD_VAR 0 9
13565: PUSH
13566: LD_VAR 0 14
13570: ARRAY
13571: PUSH
13572: LD_INT 28
13574: EQUAL
13575: OR
13576: PUSH
13577: LD_VAR 0 9
13581: PUSH
13582: LD_VAR 0 14
13586: ARRAY
13587: PUSH
13588: LD_INT 27
13590: EQUAL
13591: OR
13592: PUSH
13593: LD_VAR 0 9
13597: PUSH
13598: LD_VAR 0 14
13602: ARRAY
13603: PUSH
13604: LD_INT 26
13606: EQUAL
13607: OR
13608: PUSH
13609: LD_VAR 0 9
13613: PUSH
13614: LD_VAR 0 14
13618: ARRAY
13619: PUSH
13620: LD_INT 25
13622: EQUAL
13623: OR
13624: IFFALSE 13665
// begin arChassisTab = [ 13 , 14 ] ;
13626: LD_ADDR_VAR 0 18
13630: PUSH
13631: LD_INT 13
13633: PUSH
13634: LD_INT 14
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13641: LD_ADDR_OWVAR 37
13645: PUSH
13646: LD_VAR 0 18
13650: PUSH
13651: LD_INT 1
13653: PPUSH
13654: LD_VAR 0 18
13658: PPUSH
13659: CALL_OW 12
13663: ARRAY
13664: ST_TO_ADDR
// end ; end ;
13665: GO 13432
13667: POP
13668: POP
// veh = CreateVehicle ;
13669: LD_ADDR_VAR 0 16
13673: PUSH
13674: CALL_OW 45
13678: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13679: LD_VAR 0 16
13683: PPUSH
13684: LD_VAR 0 1
13688: PPUSH
13689: LD_INT 0
13691: PPUSH
13692: CALL_OW 49
// if vehcontrol = 1 then
13696: LD_VAR 0 7
13700: PUSH
13701: LD_INT 1
13703: EQUAL
13704: IFFALSE 13761
// begin hc_gallery =  ;
13706: LD_ADDR_OWVAR 33
13710: PUSH
13711: LD_STRING 
13713: ST_TO_ADDR
// hc_name =  ;
13714: LD_ADDR_OWVAR 26
13718: PUSH
13719: LD_STRING 
13721: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13722: LD_INT 0
13724: PPUSH
13725: LD_INT 3
13727: PPUSH
13728: LD_VAR 0 4
13732: PPUSH
13733: CALL_OW 380
// un = CreateHuman ;
13737: LD_ADDR_VAR 0 15
13741: PUSH
13742: CALL_OW 44
13746: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13747: LD_VAR 0 15
13751: PPUSH
13752: LD_VAR 0 16
13756: PPUSH
13757: CALL_OW 52
// end ; i = i + 1 ;
13761: LD_ADDR_VAR 0 13
13765: PUSH
13766: LD_VAR 0 13
13770: PUSH
13771: LD_INT 1
13773: PLUS
13774: ST_TO_ADDR
// end ; if nation = 3 then
13775: LD_VAR 0 5
13779: PUSH
13780: LD_INT 3
13782: EQUAL
13783: IFFALSE 14175
// begin uc_side = side ;
13785: LD_ADDR_OWVAR 20
13789: PUSH
13790: LD_VAR 0 2
13794: ST_TO_ADDR
// uc_nation = nation ;
13795: LD_ADDR_OWVAR 21
13799: PUSH
13800: LD_VAR 0 5
13804: ST_TO_ADDR
// vc_engine = vehengine ;
13805: LD_ADDR_OWVAR 39
13809: PUSH
13810: LD_VAR 0 6
13814: ST_TO_ADDR
// vc_control = vehcontrol ;
13815: LD_ADDR_OWVAR 38
13819: PUSH
13820: LD_VAR 0 7
13824: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
13825: LD_ADDR_OWVAR 40
13829: PUSH
13830: LD_VAR 0 8
13834: PUSH
13835: LD_INT 1
13837: PPUSH
13838: LD_VAR 0 8
13842: PPUSH
13843: CALL_OW 12
13847: ARRAY
13848: ST_TO_ADDR
// for j = 1 to RuWeapons do
13849: LD_ADDR_VAR 0 14
13853: PUSH
13854: DOUBLE
13855: LD_INT 1
13857: DEC
13858: ST_TO_ADDR
13859: LD_VAR 0 8
13863: PUSH
13864: FOR_TO
13865: IFFALSE 14067
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
13867: LD_VAR 0 8
13871: PUSH
13872: LD_VAR 0 14
13876: ARRAY
13877: PUSH
13878: LD_INT 42
13880: EQUAL
13881: PUSH
13882: LD_VAR 0 8
13886: PUSH
13887: LD_VAR 0 14
13891: ARRAY
13892: PUSH
13893: LD_INT 43
13895: EQUAL
13896: OR
13897: PUSH
13898: LD_VAR 0 8
13902: PUSH
13903: LD_VAR 0 14
13907: ARRAY
13908: PUSH
13909: LD_INT 44
13911: EQUAL
13912: OR
13913: PUSH
13914: LD_VAR 0 8
13918: PUSH
13919: LD_VAR 0 14
13923: ARRAY
13924: PUSH
13925: LD_INT 45
13927: EQUAL
13928: OR
13929: PUSH
13930: LD_VAR 0 8
13934: PUSH
13935: LD_VAR 0 14
13939: ARRAY
13940: PUSH
13941: LD_INT 49
13943: EQUAL
13944: OR
13945: IFFALSE 13994
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
13947: LD_ADDR_VAR 0 17
13951: PUSH
13952: LD_INT 21
13954: PUSH
13955: LD_INT 22
13957: PUSH
13958: LD_INT 23
13960: PUSH
13961: LD_INT 24
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13970: LD_ADDR_OWVAR 37
13974: PUSH
13975: LD_VAR 0 17
13979: PUSH
13980: LD_INT 1
13982: PPUSH
13983: LD_VAR 0 17
13987: PPUSH
13988: CALL_OW 12
13992: ARRAY
13993: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
13994: LD_VAR 0 8
13998: PUSH
13999: LD_VAR 0 14
14003: ARRAY
14004: PUSH
14005: LD_INT 46
14007: EQUAL
14008: PUSH
14009: LD_VAR 0 8
14013: PUSH
14014: LD_VAR 0 14
14018: ARRAY
14019: PUSH
14020: LD_INT 47
14022: EQUAL
14023: OR
14024: IFFALSE 14065
// begin ruChassisTab = [ 23 , 24 ] ;
14026: LD_ADDR_VAR 0 17
14030: PUSH
14031: LD_INT 23
14033: PUSH
14034: LD_INT 24
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14041: LD_ADDR_OWVAR 37
14045: PUSH
14046: LD_VAR 0 17
14050: PUSH
14051: LD_INT 1
14053: PPUSH
14054: LD_VAR 0 17
14058: PPUSH
14059: CALL_OW 12
14063: ARRAY
14064: ST_TO_ADDR
// end ; end ;
14065: GO 13864
14067: POP
14068: POP
// veh = CreateVehicle ;
14069: LD_ADDR_VAR 0 16
14073: PUSH
14074: CALL_OW 45
14078: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14079: LD_VAR 0 16
14083: PPUSH
14084: LD_VAR 0 1
14088: PPUSH
14089: LD_INT 0
14091: PPUSH
14092: CALL_OW 49
// if vehcontrol = 1 then
14096: LD_VAR 0 7
14100: PUSH
14101: LD_INT 1
14103: EQUAL
14104: IFFALSE 14161
// begin hc_gallery =  ;
14106: LD_ADDR_OWVAR 33
14110: PUSH
14111: LD_STRING 
14113: ST_TO_ADDR
// hc_name =  ;
14114: LD_ADDR_OWVAR 26
14118: PUSH
14119: LD_STRING 
14121: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14122: LD_INT 0
14124: PPUSH
14125: LD_INT 3
14127: PPUSH
14128: LD_VAR 0 4
14132: PPUSH
14133: CALL_OW 380
// un = CreateHuman ;
14137: LD_ADDR_VAR 0 15
14141: PUSH
14142: CALL_OW 44
14146: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14147: LD_VAR 0 15
14151: PPUSH
14152: LD_VAR 0 16
14156: PPUSH
14157: CALL_OW 52
// end ; i = i + 1 ;
14161: LD_ADDR_VAR 0 13
14165: PUSH
14166: LD_VAR 0 13
14170: PUSH
14171: LD_INT 1
14173: PLUS
14174: ST_TO_ADDR
// end ; until i = vehCount ;
14175: LD_VAR 0 13
14179: PUSH
14180: LD_VAR 0 3
14184: EQUAL
14185: IFFALSE 12837
// repeat wait ( 0 0$1 ) ;
14187: LD_INT 35
14189: PPUSH
14190: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
14194: LD_ADDR_VAR 0 20
14198: PUSH
14199: LD_INT 22
14201: PUSH
14202: LD_VAR 0 2
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PUSH
14211: LD_INT 21
14213: PUSH
14214: LD_INT 2
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 24
14223: PUSH
14224: LD_INT 661
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: LIST
14235: PPUSH
14236: CALL_OW 69
14240: ST_TO_ADDR
// if vehicleOK_list > 0 then
14241: LD_VAR 0 20
14245: PUSH
14246: LD_INT 0
14248: GREATER
14249: IFFALSE 14440
// begin for i in vehicleOK_list do
14251: LD_ADDR_VAR 0 13
14255: PUSH
14256: LD_VAR 0 20
14260: PUSH
14261: FOR_IN
14262: IFFALSE 14438
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14264: LD_ADDR_VAR 0 21
14268: PUSH
14269: LD_INT 22
14271: PUSH
14272: LD_VAR 0 11
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PPUSH
14281: CALL_OW 69
14285: PPUSH
14286: LD_VAR 0 13
14290: PPUSH
14291: CALL_OW 74
14295: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14296: LD_ADDR_VAR 0 22
14300: PUSH
14301: LD_INT 22
14303: PUSH
14304: LD_VAR 0 11
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PUSH
14313: LD_INT 2
14315: PUSH
14316: LD_INT 59
14318: PUSH
14319: EMPTY
14320: LIST
14321: PUSH
14322: LD_INT 21
14324: PUSH
14325: LD_INT 1
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PUSH
14332: LD_INT 21
14334: PUSH
14335: LD_INT 2
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: EMPTY
14353: LIST
14354: PPUSH
14355: CALL_OW 69
14359: PPUSH
14360: LD_VAR 0 13
14364: PPUSH
14365: CALL_OW 74
14369: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14370: LD_VAR 0 13
14374: PPUSH
14375: LD_VAR 0 21
14379: PPUSH
14380: CALL_OW 296
14384: PUSH
14385: LD_INT 8
14387: PLUS
14388: PUSH
14389: LD_VAR 0 13
14393: PPUSH
14394: LD_VAR 0 22
14398: PPUSH
14399: CALL_OW 296
14403: LESS
14404: IFFALSE 14422
// begin ComAttackUnit ( i , target1 ) ;
14406: LD_VAR 0 13
14410: PPUSH
14411: LD_VAR 0 21
14415: PPUSH
14416: CALL_OW 115
// end else
14420: GO 14436
// begin ComAttackUnit ( i , target2 ) ;
14422: LD_VAR 0 13
14426: PPUSH
14427: LD_VAR 0 22
14431: PPUSH
14432: CALL_OW 115
// end ; end ;
14436: GO 14261
14438: POP
14439: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
14440: LD_INT 22
14442: PUSH
14443: LD_VAR 0 2
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 21
14454: PUSH
14455: LD_INT 2
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PPUSH
14466: CALL_OW 69
14470: PUSH
14471: LD_INT 0
14473: EQUAL
14474: IFFALSE 14187
// end ;
14476: LD_VAR 0 12
14480: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
14481: LD_INT 0
14483: PPUSH
14484: PPUSH
14485: PPUSH
14486: PPUSH
14487: PPUSH
14488: PPUSH
14489: PPUSH
14490: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14491: LD_ADDR_VAR 0 7
14495: PUSH
14496: LD_INT 22
14498: PUSH
14499: LD_VAR 0 1
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: LD_INT 1
14510: PUSH
14511: LD_INT 3
14513: PUSH
14514: LD_INT 24
14516: PUSH
14517: LD_INT 550
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 24
14530: PUSH
14531: LD_INT 250
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: LIST
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PPUSH
14547: CALL_OW 69
14551: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14552: LD_ADDR_VAR 0 8
14556: PUSH
14557: LD_INT 22
14559: PUSH
14560: LD_VAR 0 1
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: LD_INT 2
14571: PUSH
14572: LD_INT 25
14574: PUSH
14575: LD_INT 1
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 25
14584: PUSH
14585: LD_INT 5
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 25
14594: PUSH
14595: LD_INT 8
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: LD_INT 25
14604: PUSH
14605: LD_INT 9
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: PUSH
14619: LD_INT 24
14621: PUSH
14622: LD_INT 1000
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: LIST
14633: PPUSH
14634: CALL_OW 69
14638: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
14639: LD_ADDR_VAR 0 9
14643: PUSH
14644: LD_INT 22
14646: PUSH
14647: LD_VAR 0 1
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 25
14658: PUSH
14659: LD_INT 4
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PPUSH
14670: CALL_OW 69
14674: ST_TO_ADDR
// if medicCount > 0 then
14675: LD_VAR 0 9
14679: PUSH
14680: LD_INT 0
14682: GREATER
14683: IFFALSE 14757
// begin if damageUnit_list > 0 then
14685: LD_VAR 0 7
14689: PUSH
14690: LD_INT 0
14692: GREATER
14693: IFFALSE 14757
// begin for i in damageUnit_list do
14695: LD_ADDR_VAR 0 5
14699: PUSH
14700: LD_VAR 0 7
14704: PUSH
14705: FOR_IN
14706: IFFALSE 14755
// begin ComMoveToArea ( i , healArea ) ;
14708: LD_VAR 0 5
14712: PPUSH
14713: LD_VAR 0 2
14717: PPUSH
14718: CALL_OW 113
// for j in medicCount do
14722: LD_ADDR_VAR 0 6
14726: PUSH
14727: LD_VAR 0 9
14731: PUSH
14732: FOR_IN
14733: IFFALSE 14751
// AddComHeal ( j , i ) ;
14735: LD_VAR 0 6
14739: PPUSH
14740: LD_VAR 0 5
14744: PPUSH
14745: CALL_OW 188
14749: GO 14732
14751: POP
14752: POP
// end ;
14753: GO 14705
14755: POP
14756: POP
// end ; end ; if soldiersOK_list > 0 then
14757: LD_VAR 0 8
14761: PUSH
14762: LD_INT 0
14764: GREATER
14765: IFFALSE 14956
// begin for i in soldiersOK_list do
14767: LD_ADDR_VAR 0 5
14771: PUSH
14772: LD_VAR 0 8
14776: PUSH
14777: FOR_IN
14778: IFFALSE 14954
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14780: LD_ADDR_VAR 0 10
14784: PUSH
14785: LD_INT 22
14787: PUSH
14788: LD_VAR 0 3
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PPUSH
14797: CALL_OW 69
14801: PPUSH
14802: LD_VAR 0 5
14806: PPUSH
14807: CALL_OW 74
14811: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14812: LD_ADDR_VAR 0 11
14816: PUSH
14817: LD_INT 22
14819: PUSH
14820: LD_VAR 0 3
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 2
14831: PUSH
14832: LD_INT 59
14834: PUSH
14835: EMPTY
14836: LIST
14837: PUSH
14838: LD_INT 21
14840: PUSH
14841: LD_INT 1
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: LD_INT 21
14850: PUSH
14851: LD_INT 2
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: EMPTY
14869: LIST
14870: PPUSH
14871: CALL_OW 69
14875: PPUSH
14876: LD_VAR 0 5
14880: PPUSH
14881: CALL_OW 74
14885: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14886: LD_VAR 0 5
14890: PPUSH
14891: LD_VAR 0 10
14895: PPUSH
14896: CALL_OW 296
14900: PUSH
14901: LD_INT 8
14903: PLUS
14904: PUSH
14905: LD_VAR 0 5
14909: PPUSH
14910: LD_VAR 0 11
14914: PPUSH
14915: CALL_OW 296
14919: LESS
14920: IFFALSE 14938
// begin ComAttackUnit ( i , target1 ) ;
14922: LD_VAR 0 5
14926: PPUSH
14927: LD_VAR 0 10
14931: PPUSH
14932: CALL_OW 115
// end else
14936: GO 14952
// begin ComAttackUnit ( i , target2 ) ;
14938: LD_VAR 0 5
14942: PPUSH
14943: LD_VAR 0 11
14947: PPUSH
14948: CALL_OW 115
// end ; end ;
14952: GO 14777
14954: POP
14955: POP
// end ; end ; end_of_file
14956: LD_VAR 0 4
14960: RET
// every 1 do var i ;
14961: GO 14963
14963: DISABLE
14964: LD_INT 0
14966: PPUSH
// begin InGameOn ;
14967: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
14971: LD_INT 53
14973: PPUSH
14974: LD_INT 40
14976: PPUSH
14977: CALL_OW 84
// wait ( 0 0$5 ) ;
14981: LD_INT 175
14983: PPUSH
14984: CALL_OW 67
// if gammaCommander = 1 then
14988: LD_EXP 11
14992: PUSH
14993: LD_INT 1
14995: EQUAL
14996: IFFALSE 15007
// CenterNowOnUnits ( Donaldson ) ;
14998: LD_EXP 3
15002: PPUSH
15003: CALL_OW 87
// if gammaCommander = 2 then
15007: LD_EXP 11
15011: PUSH
15012: LD_INT 2
15014: EQUAL
15015: IFFALSE 15026
// CenterNowOnUnits ( Brown ) ;
15017: LD_EXP 2
15021: PPUSH
15022: CALL_OW 87
// if gammaCommander = 3 then
15026: LD_EXP 11
15030: PUSH
15031: LD_INT 3
15033: EQUAL
15034: IFFALSE 15045
// CenterNowOnUnits ( Houten ) ;
15036: LD_EXP 12
15040: PPUSH
15041: CALL_OW 87
// if gammaCommander = 1 then
15045: LD_EXP 11
15049: PUSH
15050: LD_INT 1
15052: EQUAL
15053: IFFALSE 15067
// Say ( Donaldson , D1-Don-1 ) ;
15055: LD_EXP 3
15059: PPUSH
15060: LD_STRING D1-Don-1
15062: PPUSH
15063: CALL_OW 88
// if gammaCommander = 2 then
15067: LD_EXP 11
15071: PUSH
15072: LD_INT 2
15074: EQUAL
15075: IFFALSE 15089
// Say ( Brown , D1-Brown-1 ) ;
15077: LD_EXP 2
15081: PPUSH
15082: LD_STRING D1-Brown-1
15084: PPUSH
15085: CALL_OW 88
// if gammaCommander = 3 then
15089: LD_EXP 11
15093: PUSH
15094: LD_INT 3
15096: EQUAL
15097: IFFALSE 15111
// Say ( Houten , D1-VanH-1 ) ;
15099: LD_EXP 12
15103: PPUSH
15104: LD_STRING D1-VanH-1
15106: PPUSH
15107: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
15111: LD_EXP 21
15115: PPUSH
15116: LD_STRING D1-Har-1
15118: PPUSH
15119: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
15123: LD_INT 53
15125: PPUSH
15126: LD_INT 40
15128: PPUSH
15129: CALL_OW 84
// if gammaCommander = 1 then
15133: LD_EXP 11
15137: PUSH
15138: LD_INT 1
15140: EQUAL
15141: IFFALSE 15155
// Say ( Donaldson , D1-Don-2 ) ;
15143: LD_EXP 3
15147: PPUSH
15148: LD_STRING D1-Don-2
15150: PPUSH
15151: CALL_OW 88
// if gammaCommander = 2 then
15155: LD_EXP 11
15159: PUSH
15160: LD_INT 2
15162: EQUAL
15163: IFFALSE 15177
// Say ( Brown , D1-Brown-2 ) ;
15165: LD_EXP 2
15169: PPUSH
15170: LD_STRING D1-Brown-2
15172: PPUSH
15173: CALL_OW 88
// if gammaCommander = 3 then
15177: LD_EXP 11
15181: PUSH
15182: LD_INT 3
15184: EQUAL
15185: IFFALSE 15199
// Say ( Houten , D1-VanH-2 ) ;
15187: LD_EXP 12
15191: PPUSH
15192: LD_STRING D1-VanH-2
15194: PPUSH
15195: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
15199: LD_EXP 21
15203: PPUSH
15204: LD_STRING D1-Har-2
15206: PPUSH
15207: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
15211: LD_INT 22
15213: PUSH
15214: LD_INT 1
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: LD_INT 33
15223: PUSH
15224: LD_INT 2
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 61
15233: PUSH
15234: EMPTY
15235: LIST
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 69
15246: IFFALSE 15311
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
15248: LD_ADDR_VAR 0 1
15252: PUSH
15253: LD_INT 22
15255: PUSH
15256: LD_INT 1
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: PUSH
15263: LD_INT 33
15265: PUSH
15266: LD_INT 2
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 61
15275: PUSH
15276: EMPTY
15277: LIST
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: LIST
15283: PPUSH
15284: CALL_OW 69
15288: PUSH
15289: FOR_IN
15290: IFFALSE 15309
// ComAgressiveMove ( i , 70 , 41 ) ;
15292: LD_VAR 0 1
15296: PPUSH
15297: LD_INT 70
15299: PPUSH
15300: LD_INT 41
15302: PPUSH
15303: CALL_OW 114
15307: GO 15289
15309: POP
15310: POP
// repeat wait ( 0 0$1 ) ;
15311: LD_INT 35
15313: PPUSH
15314: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
15318: LD_ADDR_VAR 0 1
15322: PUSH
15323: LD_INT 22
15325: PUSH
15326: LD_INT 6
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: EMPTY
15334: LIST
15335: PPUSH
15336: CALL_OW 69
15340: PUSH
15341: FOR_IN
15342: IFFALSE 15361
// ComAgressiveMove ( i , 54 , 20 ) ;
15344: LD_VAR 0 1
15348: PPUSH
15349: LD_INT 54
15351: PPUSH
15352: LD_INT 20
15354: PPUSH
15355: CALL_OW 114
15359: GO 15341
15361: POP
15362: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
15363: LD_ADDR_VAR 0 1
15367: PUSH
15368: LD_INT 22
15370: PUSH
15371: LD_INT 1
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 25
15380: PUSH
15381: LD_INT 1
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: LD_INT 3
15390: PUSH
15391: LD_INT 54
15393: PUSH
15394: EMPTY
15395: LIST
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: LIST
15405: PPUSH
15406: CALL_OW 69
15410: PUSH
15411: FOR_IN
15412: IFFALSE 15446
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
15414: LD_VAR 0 1
15418: PPUSH
15419: LD_INT 70
15421: PPUSH
15422: LD_INT 41
15424: PPUSH
15425: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
15429: LD_VAR 0 1
15433: PPUSH
15434: LD_INT 46
15436: PPUSH
15437: LD_INT 39
15439: PPUSH
15440: CALL_OW 174
// end ;
15444: GO 15411
15446: POP
15447: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
15448: LD_ADDR_VAR 0 1
15452: PUSH
15453: LD_INT 22
15455: PUSH
15456: LD_INT 1
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: LD_INT 21
15465: PUSH
15466: LD_INT 1
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: LD_INT 3
15475: PUSH
15476: LD_INT 24
15478: PUSH
15479: LD_INT 500
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: LIST
15494: PPUSH
15495: CALL_OW 69
15499: PUSH
15500: FOR_IN
15501: IFFALSE 15534
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
15503: LD_VAR 0 1
15507: PPUSH
15508: LD_EXP 36
15512: PPUSH
15513: CALL_OW 250
15517: PPUSH
15518: LD_EXP 36
15522: PPUSH
15523: CALL_OW 251
15527: PPUSH
15528: CALL_OW 111
15532: GO 15500
15534: POP
15535: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
15536: LD_INT 22
15538: PUSH
15539: LD_INT 6
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 21
15548: PUSH
15549: LD_INT 1
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 24
15558: PUSH
15559: LD_INT 250
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: LIST
15570: PPUSH
15571: CALL_OW 69
15575: PUSH
15576: LD_INT 6
15578: LESS
15579: IFFALSE 15311
// InGameOff ;
15581: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
15585: LD_STRING M1
15587: PPUSH
15588: CALL_OW 337
// SaveForQuickRestart ;
15592: CALL_OW 22
// end ;
15596: PPOPN 1
15598: END
// every 1 1$0 do
15599: GO 15601
15601: DISABLE
// begin PrepareSupportFromDelta ;
15602: CALL 2274 0 0
// firstAttack = 1 ;
15606: LD_ADDR_EXP 32
15610: PUSH
15611: LD_INT 1
15613: ST_TO_ADDR
// if IsOk ( Gladstone ) then
15614: LD_EXP 8
15618: PPUSH
15619: CALL_OW 302
15623: IFFALSE 15639
// begin Say ( Gladstone , D2-Glad-1 ) ;
15625: LD_EXP 8
15629: PPUSH
15630: LD_STRING D2-Glad-1
15632: PPUSH
15633: CALL_OW 88
// end else
15637: GO 15732
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , D2-Sol1-1 , D2-FSol1-1 ) ;
15639: LD_INT 4
15641: PPUSH
15642: LD_INT 22
15644: PUSH
15645: LD_INT 1
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 21
15654: PUSH
15655: LD_INT 1
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 2
15664: PUSH
15665: LD_INT 25
15667: PUSH
15668: LD_INT 1
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: LD_INT 25
15677: PUSH
15678: LD_INT 2
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 25
15687: PUSH
15688: LD_INT 3
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: LD_INT 25
15697: PUSH
15698: LD_INT 4
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: LIST
15716: PPUSH
15717: CALL_OW 70
15721: PPUSH
15722: LD_STRING D2-Sol1-1
15724: PPUSH
15725: LD_STRING D2-FSol1-1
15727: PPUSH
15728: CALL 5521 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
15732: LD_EXP 3
15736: PPUSH
15737: CALL_OW 302
15741: PUSH
15742: LD_EXP 11
15746: PUSH
15747: LD_INT 1
15749: EQUAL
15750: AND
15751: IFFALSE 15765
// Say ( Donaldson , D2-Don-1 ) ;
15753: LD_EXP 3
15757: PPUSH
15758: LD_STRING D2-Don-1
15760: PPUSH
15761: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
15765: LD_EXP 2
15769: PPUSH
15770: CALL_OW 302
15774: PUSH
15775: LD_EXP 11
15779: PUSH
15780: LD_INT 2
15782: EQUAL
15783: AND
15784: IFFALSE 15798
// Say ( Brown , D2-Brown-1 ) ;
15786: LD_EXP 2
15790: PPUSH
15791: LD_STRING D2-Brown-1
15793: PPUSH
15794: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
15798: LD_EXP 12
15802: PPUSH
15803: CALL_OW 302
15807: PUSH
15808: LD_EXP 11
15812: PUSH
15813: LD_INT 3
15815: EQUAL
15816: AND
15817: IFFALSE 15831
// Say ( Houten , D2-VanH-1 ) ;
15819: LD_EXP 12
15823: PPUSH
15824: LD_STRING D2-VanH-1
15826: PPUSH
15827: CALL_OW 88
// end ;
15831: END
// every 0 0$1 do
15832: GO 15834
15834: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) div 3 ) ;
15835: LD_STRING 07_time
15837: PPUSH
15838: LD_INT 0
15840: PPUSH
15841: CALL_OW 30
15845: PUSH
15846: LD_INT 3
15848: DIV
15849: PPUSH
15850: CALL_OW 67
// PrepareMacmillanSquad ;
15854: CALL 2680 0 0
// CenterNowOnUnits ( JMM ) ;
15858: LD_EXP 1
15862: PPUSH
15863: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
15867: LD_EXP 1
15871: PPUSH
15872: LD_STRING D3-JMM-1
15874: PPUSH
15875: CALL_OW 88
// JMMArrive = 1 ;
15879: LD_ADDR_EXP 37
15883: PUSH
15884: LD_INT 1
15886: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
15887: LD_EXP 3
15891: PPUSH
15892: CALL_OW 302
15896: PUSH
15897: LD_EXP 11
15901: PUSH
15902: LD_INT 1
15904: EQUAL
15905: AND
15906: IFFALSE 15922
// begin Say ( Donaldson , D3-Don-1 ) ;
15908: LD_EXP 3
15912: PPUSH
15913: LD_STRING D3-Don-1
15915: PPUSH
15916: CALL_OW 88
// end else
15920: GO 15959
// begin if gammaCommander = 1 then
15922: LD_EXP 11
15926: PUSH
15927: LD_INT 1
15929: EQUAL
15930: IFFALSE 15959
// begin DialogRandom ( others_gamma , D3-Sol1-1 , D3-Sol1-1 ) ;
15932: LD_EXP 10
15936: PPUSH
15937: LD_STRING D3-Sol1-1
15939: PPUSH
15940: LD_STRING D3-Sol1-1
15942: PPUSH
15943: CALL 5521 0 3
// Say ( JMM , D3-JMM-2 ) ;
15947: LD_EXP 1
15951: PPUSH
15952: LD_STRING D3-JMM-2
15954: PPUSH
15955: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
15959: LD_EXP 2
15963: PPUSH
15964: CALL_OW 302
15968: PUSH
15969: LD_EXP 11
15973: PUSH
15974: LD_INT 2
15976: EQUAL
15977: AND
15978: IFFALSE 15994
// begin Say ( Brown , D3-Brown-1 ) ;
15980: LD_EXP 2
15984: PPUSH
15985: LD_STRING D3-Brown-1
15987: PPUSH
15988: CALL_OW 88
// end else
15992: GO 16031
// begin if gammaCommander = 2 then
15994: LD_EXP 11
15998: PUSH
15999: LD_INT 2
16001: EQUAL
16002: IFFALSE 16031
// begin DialogRandom ( others_gamma , D3-Sol1-1a , D3-Sol1-1a ) ;
16004: LD_EXP 10
16008: PPUSH
16009: LD_STRING D3-Sol1-1a
16011: PPUSH
16012: LD_STRING D3-Sol1-1a
16014: PPUSH
16015: CALL 5521 0 3
// Say ( JMM , D3-JMM-2 ) ;
16019: LD_EXP 1
16023: PPUSH
16024: LD_STRING D3-JMM-2
16026: PPUSH
16027: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
16031: LD_EXP 12
16035: PPUSH
16036: CALL_OW 302
16040: PUSH
16041: LD_EXP 11
16045: PUSH
16046: LD_INT 3
16048: EQUAL
16049: AND
16050: IFFALSE 16066
// begin Say ( Houten , D3-VanH-1 ) ;
16052: LD_EXP 12
16056: PPUSH
16057: LD_STRING D3-VanH-1
16059: PPUSH
16060: CALL_OW 88
// end else
16064: GO 16103
// begin if gammaCommander = 3 then
16066: LD_EXP 11
16070: PUSH
16071: LD_INT 3
16073: EQUAL
16074: IFFALSE 16103
// begin DialogRandom ( others_gamma , D3-Sol1-1b , D3-Sol1-1b ) ;
16076: LD_EXP 10
16080: PPUSH
16081: LD_STRING D3-Sol1-1b
16083: PPUSH
16084: LD_STRING D3-Sol1-1b
16086: PPUSH
16087: CALL 5521 0 3
// Say ( JMM , D3-JMM-2 ) ;
16091: LD_EXP 1
16095: PPUSH
16096: LD_STRING D3-JMM-2
16098: PPUSH
16099: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
16103: LD_EXP 14
16107: PPUSH
16108: CALL_OW 302
16112: IFFALSE 16140
// begin Say ( Joan , D3a-Joan-1 ) ;
16114: LD_EXP 14
16118: PPUSH
16119: LD_STRING D3a-Joan-1
16121: PPUSH
16122: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
16126: LD_EXP 1
16130: PPUSH
16131: LD_STRING D3a-JMM-1
16133: PPUSH
16134: CALL_OW 88
// end else
16138: GO 16548
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16140: LD_EXP 3
16144: PPUSH
16145: CALL_OW 302
16149: PUSH
16150: LD_EXP 11
16154: PUSH
16155: LD_INT 1
16157: EQUAL
16158: AND
16159: PUSH
16160: LD_STRING 06_JoanStatus_1
16162: PPUSH
16163: LD_INT 0
16165: PPUSH
16166: CALL_OW 30
16170: PUSH
16171: LD_INT 1
16173: EQUAL
16174: AND
16175: IFFALSE 16226
// begin Say ( Donaldson , D3b-Don-1 ) ;
16177: LD_EXP 3
16181: PPUSH
16182: LD_STRING D3b-Don-1
16184: PPUSH
16185: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
16189: LD_EXP 1
16193: PPUSH
16194: LD_STRING D3b-JMM-2
16196: PPUSH
16197: CALL_OW 88
// if IsOK ( Lisa ) then
16201: LD_EXP 6
16205: PPUSH
16206: CALL_OW 302
16210: IFFALSE 16224
// Say ( Lisa , D3b-Lisa-2 ) ;
16212: LD_EXP 6
16216: PPUSH
16217: LD_STRING D3b-Lisa-2
16219: PPUSH
16220: CALL_OW 88
// end else
16224: GO 16276
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
16226: LD_EXP 10
16230: PPUSH
16231: LD_STRING D3b-Sol1-1
16233: PPUSH
16234: LD_STRING D3b-Sol1-1
16236: PPUSH
16237: CALL 5521 0 3
// Say ( JMM , D3b-JMM-2 ) ;
16241: LD_EXP 1
16245: PPUSH
16246: LD_STRING D3b-JMM-2
16248: PPUSH
16249: CALL_OW 88
// if IsOK ( Lisa ) then
16253: LD_EXP 6
16257: PPUSH
16258: CALL_OW 302
16262: IFFALSE 16276
// Say ( Lisa , D3b-Lisa-2 ) ;
16264: LD_EXP 6
16268: PPUSH
16269: LD_STRING D3b-Lisa-2
16271: PPUSH
16272: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16276: LD_EXP 2
16280: PPUSH
16281: CALL_OW 302
16285: PUSH
16286: LD_EXP 11
16290: PUSH
16291: LD_INT 2
16293: EQUAL
16294: AND
16295: PUSH
16296: LD_STRING 06_JoanStatus_1
16298: PPUSH
16299: LD_INT 0
16301: PPUSH
16302: CALL_OW 30
16306: PUSH
16307: LD_INT 1
16309: EQUAL
16310: AND
16311: IFFALSE 16362
// begin Say ( Brown , D3b-Brown-1 ) ;
16313: LD_EXP 2
16317: PPUSH
16318: LD_STRING D3b-Brown-1
16320: PPUSH
16321: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
16325: LD_EXP 1
16329: PPUSH
16330: LD_STRING D3b-JMM-2
16332: PPUSH
16333: CALL_OW 88
// if IsOK ( Lisa ) then
16337: LD_EXP 6
16341: PPUSH
16342: CALL_OW 302
16346: IFFALSE 16360
// Say ( Lisa , D3b-Lisa-2 ) ;
16348: LD_EXP 6
16352: PPUSH
16353: LD_STRING D3b-Lisa-2
16355: PPUSH
16356: CALL_OW 88
// end else
16360: GO 16412
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
16362: LD_EXP 10
16366: PPUSH
16367: LD_STRING D3b-Sol1-1
16369: PPUSH
16370: LD_STRING D3b-Sol1-1
16372: PPUSH
16373: CALL 5521 0 3
// Say ( JMM , D3b-JMM-2 ) ;
16377: LD_EXP 1
16381: PPUSH
16382: LD_STRING D3b-JMM-2
16384: PPUSH
16385: CALL_OW 88
// if IsOK ( Lisa ) then
16389: LD_EXP 6
16393: PPUSH
16394: CALL_OW 302
16398: IFFALSE 16412
// Say ( Lisa , D3b-Lisa-2 ) ;
16400: LD_EXP 6
16404: PPUSH
16405: LD_STRING D3b-Lisa-2
16407: PPUSH
16408: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16412: LD_EXP 12
16416: PPUSH
16417: CALL_OW 302
16421: PUSH
16422: LD_EXP 11
16426: PUSH
16427: LD_INT 3
16429: EQUAL
16430: AND
16431: PUSH
16432: LD_STRING 06_JoanStatus_1
16434: PPUSH
16435: LD_INT 0
16437: PPUSH
16438: CALL_OW 30
16442: PUSH
16443: LD_INT 1
16445: EQUAL
16446: AND
16447: IFFALSE 16498
// begin Say ( Houten , D3b-VanH-1 ) ;
16449: LD_EXP 12
16453: PPUSH
16454: LD_STRING D3b-VanH-1
16456: PPUSH
16457: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
16461: LD_EXP 1
16465: PPUSH
16466: LD_STRING D3b-JMM-2
16468: PPUSH
16469: CALL_OW 88
// if IsOK ( Lisa ) then
16473: LD_EXP 6
16477: PPUSH
16478: CALL_OW 302
16482: IFFALSE 16496
// Say ( Lisa , D3b-Lisa-2 ) ;
16484: LD_EXP 6
16488: PPUSH
16489: LD_STRING D3b-Lisa-2
16491: PPUSH
16492: CALL_OW 88
// end else
16496: GO 16548
// begin DialogRandom ( others_gamma , D3b-Sol1-1 , D3b-Sol1-1 ) ;
16498: LD_EXP 10
16502: PPUSH
16503: LD_STRING D3b-Sol1-1
16505: PPUSH
16506: LD_STRING D3b-Sol1-1
16508: PPUSH
16509: CALL 5521 0 3
// Say ( JMM , D3b-JMM-2 ) ;
16513: LD_EXP 1
16517: PPUSH
16518: LD_STRING D3b-JMM-2
16520: PPUSH
16521: CALL_OW 88
// if IsOK ( Lisa ) then
16525: LD_EXP 6
16529: PPUSH
16530: CALL_OW 302
16534: IFFALSE 16548
// Say ( Lisa , D3b-Lisa-2 ) ;
16536: LD_EXP 6
16540: PPUSH
16541: LD_STRING D3b-Lisa-2
16543: PPUSH
16544: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
16548: LD_INT 22
16550: PUSH
16551: LD_INT 1
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PUSH
16558: LD_INT 21
16560: PUSH
16561: LD_INT 1
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: LD_INT 26
16570: PUSH
16571: LD_INT 1
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 25
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 25
16593: PUSH
16594: LD_INT 2
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: LD_INT 25
16603: PUSH
16604: LD_INT 3
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: LD_INT 25
16613: PUSH
16614: LD_INT 4
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: PPUSH
16634: CALL_OW 69
16638: PUSH
16639: LD_EXP 1
16643: PUSH
16644: EMPTY
16645: LIST
16646: DIFF
16647: PPUSH
16648: LD_STRING DCa-Sol1-1
16650: PPUSH
16651: LD_STRING DCa-Sol1-1
16653: PPUSH
16654: CALL 5521 0 3
// Say ( JMM , DCb-JMM-1 ) ;
16658: LD_EXP 1
16662: PPUSH
16663: LD_STRING DCb-JMM-1
16665: PPUSH
16666: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
16670: LD_INT 22
16672: PUSH
16673: LD_INT 1
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 21
16682: PUSH
16683: LD_INT 1
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 26
16692: PUSH
16693: LD_INT 1
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 2
16702: PUSH
16703: LD_INT 25
16705: PUSH
16706: LD_INT 1
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 25
16715: PUSH
16716: LD_INT 2
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: LD_INT 25
16725: PUSH
16726: LD_INT 3
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: PUSH
16733: LD_INT 25
16735: PUSH
16736: LD_INT 4
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: PPUSH
16756: CALL_OW 69
16760: PUSH
16761: LD_EXP 1
16765: PUSH
16766: EMPTY
16767: LIST
16768: DIFF
16769: PPUSH
16770: LD_STRING DCb-Sol1-1
16772: PPUSH
16773: LD_STRING DCb-Sol1-1
16775: PPUSH
16776: CALL 5521 0 3
// Say ( JMM , DCb-JMM-2 ) ;
16780: LD_EXP 1
16784: PPUSH
16785: LD_STRING DCb-JMM-2
16787: PPUSH
16788: CALL_OW 88
// secondAttack = 1 ;
16792: LD_ADDR_EXP 33
16796: PUSH
16797: LD_INT 1
16799: ST_TO_ADDR
// end ;
16800: END
// every 0 0$01 trigger JMMArrive = 1 do
16801: LD_EXP 37
16805: PUSH
16806: LD_INT 1
16808: EQUAL
16809: IFFALSE 16889
16811: GO 16813
16813: DISABLE
// begin wait ( 3 3$0 ) ;
16814: LD_INT 6300
16816: PPUSH
16817: CALL_OW 67
// DialogueOn ;
16821: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
16825: LD_EXP 22
16829: PPUSH
16830: LD_STRING D4-Pow-1
16832: PPUSH
16833: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
16837: LD_EXP 1
16841: PPUSH
16842: LD_STRING D4-JMM-1
16844: PPUSH
16845: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
16849: LD_EXP 22
16853: PPUSH
16854: LD_STRING D4-Pow-2
16856: PPUSH
16857: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
16861: LD_EXP 1
16865: PPUSH
16866: LD_STRING D4-JMM-2
16868: PPUSH
16869: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
16873: LD_EXP 22
16877: PPUSH
16878: LD_STRING D4-Pow-3
16880: PPUSH
16881: CALL_OW 94
// DialogueOff ;
16885: CALL_OW 7
// end ;
16889: END
// every 0 0$01 trigger JMMArrive = 1 do
16890: LD_EXP 37
16894: PUSH
16895: LD_INT 1
16897: EQUAL
16898: IFFALSE 16930
16900: GO 16902
16902: DISABLE
// begin wait ( 8 8$0 ) ;
16903: LD_INT 16800
16905: PPUSH
16906: CALL_OW 67
// DialogueOn ;
16910: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
16914: LD_EXP 22
16918: PPUSH
16919: LD_STRING D4a-Pow-1
16921: PPUSH
16922: CALL_OW 94
// DialogueOff ;
16926: CALL_OW 7
// end ;
16930: END
// every 0 0$01 trigger JMMArrive = 1 do
16931: LD_EXP 37
16935: PUSH
16936: LD_INT 1
16938: EQUAL
16939: IFFALSE 16984
16941: GO 16943
16943: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
16944: LD_INT 21000
16946: PUSH
16947: LD_INT 25200
16949: PUSH
16950: LD_INT 31500
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: PUSH
16958: LD_OWVAR 67
16962: ARRAY
16963: PPUSH
16964: CALL_OW 67
// PrepareSikorsky ;
16968: CALL 4105 0 0
// SikorskyArrive = 1 ;
16972: LD_ADDR_EXP 17
16976: PUSH
16977: LD_INT 1
16979: ST_TO_ADDR
// PrepareSikorskyArmy ;
16980: CALL 4245 0 0
// end ;
16984: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
16985: LD_EXP 16
16989: PPUSH
16990: LD_INT 5
16992: PPUSH
16993: CALL_OW 308
16997: IFFALSE 17189
16999: GO 17001
17001: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
17002: LD_EXP 16
17006: PPUSH
17007: CALL_OW 87
// DialogueOn ;
17011: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
17015: LD_EXP 15
17019: PPUSH
17020: LD_STRING D5-Sik-1
17022: PPUSH
17023: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
17027: LD_EXP 1
17031: PPUSH
17032: LD_STRING D5-JMM-1a
17034: PPUSH
17035: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
17039: LD_EXP 15
17043: PPUSH
17044: LD_STRING D5-Sik-2
17046: PPUSH
17047: CALL_OW 88
// case query ( QSikorski ) of 1 :
17051: LD_STRING QSikorski
17053: PPUSH
17054: CALL_OW 97
17058: PUSH
17059: LD_INT 1
17061: DOUBLE
17062: EQUAL
17063: IFTRUE 17067
17065: GO 17090
17067: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
17068: LD_EXP 15
17072: PPUSH
17073: LD_STRING D5a-Sik-1
17075: PPUSH
17076: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
17080: LD_ADDR_EXP 18
17084: PUSH
17085: LD_INT 2100
17087: ST_TO_ADDR
// end ; 2 :
17088: GO 17177
17090: LD_INT 2
17092: DOUBLE
17093: EQUAL
17094: IFTRUE 17098
17096: GO 17121
17098: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
17099: LD_EXP 15
17103: PPUSH
17104: LD_STRING D5b-Sik-1
17106: PPUSH
17107: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
17111: LD_ADDR_EXP 18
17115: PUSH
17116: LD_INT 10500
17118: ST_TO_ADDR
// end ; 3 :
17119: GO 17177
17121: LD_INT 3
17123: DOUBLE
17124: EQUAL
17125: IFTRUE 17129
17127: GO 17176
17129: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
17130: LD_EXP 15
17134: PPUSH
17135: LD_STRING D5c-Sik-1
17137: PPUSH
17138: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
17142: LD_EXP 1
17146: PPUSH
17147: LD_STRING D5c-JMM-1
17149: PPUSH
17150: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
17154: LD_EXP 15
17158: PPUSH
17159: LD_STRING D5c-Sik-2
17161: PPUSH
17162: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
17166: LD_ADDR_EXP 18
17170: PUSH
17171: LD_INT 10500
17173: ST_TO_ADDR
// end ; end ;
17174: GO 17177
17176: POP
// DialogueOff ;
17177: CALL_OW 7
// timerStatus = 1 ;
17181: LD_ADDR_EXP 34
17185: PUSH
17186: LD_INT 1
17188: ST_TO_ADDR
// end ;
17189: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
17190: LD_EXP 18
17194: PUSH
17195: LD_INT 35
17197: LESS
17198: IFFALSE 17246
17200: GO 17202
17202: DISABLE
// begin timerStatus = 0 ;
17203: LD_ADDR_EXP 34
17207: PUSH
17208: LD_INT 0
17210: ST_TO_ADDR
// DialogueOn ;
17211: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
17215: LD_EXP 15
17219: PPUSH
17220: LD_STRING D6-Sik-1
17222: PPUSH
17223: CALL_OW 88
// DialogueOff ;
17227: CALL_OW 7
// SikorskyAI = 1 ;
17231: LD_ADDR_EXP 19
17235: PUSH
17236: LD_INT 1
17238: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
17239: LD_STRING M2
17241: PPUSH
17242: CALL_OW 337
// end ;
17246: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
17247: LD_EXP 16
17251: PPUSH
17252: LD_INT 18
17254: PPUSH
17255: CALL_OW 308
17259: IFFALSE 17343
17261: GO 17263
17263: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
17264: LD_EXP 15
17268: PPUSH
17269: LD_STRING D7-Sik-1
17271: PPUSH
17272: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
17276: LD_EXP 1
17280: PPUSH
17281: LD_INT 24
17283: PPUSH
17284: CALL_OW 308
17288: PUSH
17289: LD_EXP 1
17293: PPUSH
17294: CALL_OW 310
17298: OR
17299: IFFALSE 17323
// begin Say ( Sikorski , D7a-Sik-1 ) ;
17301: LD_EXP 15
17305: PPUSH
17306: LD_STRING D7a-Sik-1
17308: PPUSH
17309: CALL_OW 88
// SikorskyStatus = 1 ;
17313: LD_ADDR_EXP 20
17317: PUSH
17318: LD_INT 1
17320: ST_TO_ADDR
// end else
17321: GO 17343
// begin Say ( Sikorski , D7b-Sik-1 ) ;
17323: LD_EXP 15
17327: PPUSH
17328: LD_STRING D7b-Sik-1
17330: PPUSH
17331: CALL_OW 88
// SikorskyStatus = 2 ;
17335: LD_ADDR_EXP 20
17339: PUSH
17340: LD_INT 2
17342: ST_TO_ADDR
// end ; end ;
17343: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
17344: LD_EXP 35
17348: PUSH
17349: LD_INT 1
17351: EQUAL
17352: IFFALSE 17461
17354: GO 17356
17356: DISABLE
17357: LD_INT 0
17359: PPUSH
// begin enable ;
17360: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
17361: LD_ADDR_VAR 0 1
17365: PUSH
17366: LD_INT 22
17368: PUSH
17369: LD_INT 3
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PPUSH
17376: CALL_OW 69
17380: PUSH
17381: FOR_IN
17382: IFFALSE 17409
// if IsInArea ( i , RussianEscape ) then
17384: LD_VAR 0 1
17388: PPUSH
17389: LD_INT 22
17391: PPUSH
17392: CALL_OW 308
17396: IFFALSE 17407
// RemoveUnit ( i ) ;
17398: LD_VAR 0 1
17402: PPUSH
17403: CALL_OW 64
17407: GO 17381
17409: POP
17410: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
17411: LD_ADDR_VAR 0 1
17415: PUSH
17416: LD_INT 22
17418: PUSH
17419: LD_INT 6
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PPUSH
17426: CALL_OW 69
17430: PUSH
17431: FOR_IN
17432: IFFALSE 17459
// if IsInArea ( i , RussianEscape ) then
17434: LD_VAR 0 1
17438: PPUSH
17439: LD_INT 22
17441: PPUSH
17442: CALL_OW 308
17446: IFFALSE 17457
// RemoveUnit ( i ) ;
17448: LD_VAR 0 1
17452: PPUSH
17453: CALL_OW 64
17457: GO 17431
17459: POP
17460: POP
// end ; end_of_file
17461: PPOPN 1
17463: END
// on BuildingComplete ( building ) do var tmp , un ;
17464: LD_INT 0
17466: PPUSH
17467: PPUSH
// begin if GetSide ( building ) = 3 then
17468: LD_VAR 0 1
17472: PPUSH
17473: CALL_OW 255
17477: PUSH
17478: LD_INT 3
17480: EQUAL
17481: IFFALSE 17886
// begin if GetBType ( building ) = b_depot then
17483: LD_VAR 0 1
17487: PPUSH
17488: CALL_OW 266
17492: PUSH
17493: LD_INT 0
17495: EQUAL
17496: IFFALSE 17564
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
17498: LD_VAR 0 1
17502: PPUSH
17503: CALL_OW 274
17507: PPUSH
17508: LD_INT 1
17510: PPUSH
17511: LD_INT 5000
17513: PPUSH
17514: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
17518: LD_VAR 0 1
17522: PPUSH
17523: CALL_OW 274
17527: PPUSH
17528: LD_INT 2
17530: PPUSH
17531: LD_INT 5000
17533: PPUSH
17534: CALL_OW 277
// SetBName ( building , konev ) ;
17538: LD_VAR 0 1
17542: PPUSH
17543: LD_STRING konev
17545: PPUSH
17546: CALL_OW 500
// ruDepot = building ;
17550: LD_ADDR_EXP 27
17554: PUSH
17555: LD_VAR 0 1
17559: ST_TO_ADDR
// BuildRussianBase ;
17560: CALL 6126 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
17564: LD_VAR 0 1
17568: PPUSH
17569: CALL_OW 266
17573: PUSH
17574: LD_INT 0
17576: EQUAL
17577: PUSH
17578: LD_VAR 0 1
17582: PPUSH
17583: CALL_OW 266
17587: PUSH
17588: LD_INT 2
17590: EQUAL
17591: OR
17592: PUSH
17593: LD_VAR 0 1
17597: PPUSH
17598: CALL_OW 266
17602: PUSH
17603: LD_INT 4
17605: EQUAL
17606: OR
17607: IFFALSE 17618
// ComUpgrade ( building ) ;
17609: LD_VAR 0 1
17613: PPUSH
17614: CALL_OW 146
// if GetBType ( building ) = b_lab then
17618: LD_VAR 0 1
17622: PPUSH
17623: CALL_OW 266
17627: PUSH
17628: LD_INT 6
17630: EQUAL
17631: IFFALSE 17682
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17633: LD_VAR 0 1
17637: PPUSH
17638: LD_INT 10
17640: PPUSH
17641: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
17645: LD_VAR 0 1
17649: PPUSH
17650: LD_INT 12
17652: PPUSH
17653: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
17657: LD_INT 3
17659: PPUSH
17660: LD_VAR 0 1
17664: PPUSH
17665: LD_INT 3
17667: PPUSH
17668: CALL 6681 0 3
// ruLab = building ;
17672: LD_ADDR_EXP 28
17676: PUSH
17677: LD_VAR 0 1
17681: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 266
17691: PUSH
17692: LD_INT 32
17694: EQUAL
17695: IFFALSE 17813
// begin uc_side = 3 ;
17697: LD_ADDR_OWVAR 20
17701: PUSH
17702: LD_INT 3
17704: ST_TO_ADDR
// uc_nation = 3 ;
17705: LD_ADDR_OWVAR 21
17709: PUSH
17710: LD_INT 3
17712: ST_TO_ADDR
// hc_gallery =  ;
17713: LD_ADDR_OWVAR 33
17717: PUSH
17718: LD_STRING 
17720: ST_TO_ADDR
// hc_name =  ;
17721: LD_ADDR_OWVAR 26
17725: PUSH
17726: LD_STRING 
17728: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17729: LD_INT 0
17731: PPUSH
17732: LD_INT 1
17734: PPUSH
17735: LD_EXP 24
17739: PPUSH
17740: LD_EXP 25
17744: PPUSH
17745: CALL_OW 12
17749: PPUSH
17750: CALL_OW 380
// un = CreateHuman ;
17754: LD_ADDR_VAR 0 3
17758: PUSH
17759: CALL_OW 44
17763: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
17764: LD_VAR 0 3
17768: PPUSH
17769: LD_VAR 0 1
17773: PPUSH
17774: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
17778: LD_VAR 0 1
17782: PPUSH
17783: LD_INT 43
17785: PUSH
17786: LD_INT 44
17788: PUSH
17789: LD_INT 46
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 1
17799: PPUSH
17800: LD_INT 3
17802: PPUSH
17803: CALL_OW 12
17807: ARRAY
17808: PPUSH
17809: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
17813: LD_VAR 0 1
17817: PPUSH
17818: CALL_OW 266
17822: PUSH
17823: LD_INT 33
17825: EQUAL
17826: IFFALSE 17863
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
17828: LD_VAR 0 1
17832: PPUSH
17833: LD_INT 43
17835: PUSH
17836: LD_INT 44
17838: PUSH
17839: LD_INT 46
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 1
17849: PPUSH
17850: LD_INT 3
17852: PPUSH
17853: CALL_OW 12
17857: ARRAY
17858: PPUSH
17859: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
17863: LD_VAR 0 1
17867: PPUSH
17868: CALL_OW 266
17872: PUSH
17873: LD_INT 24
17875: EQUAL
17876: IFFALSE 17886
// russianAI = 1 ;
17878: LD_ADDR_EXP 26
17882: PUSH
17883: LD_INT 1
17885: ST_TO_ADDR
// end ; end ;
17886: PPOPN 3
17888: END
// on UpgradeComplete ( building ) do var i ;
17889: LD_INT 0
17891: PPUSH
// begin if GetSide ( building ) = 3 then
17892: LD_VAR 0 1
17896: PPUSH
17897: CALL_OW 255
17901: PUSH
17902: LD_INT 3
17904: EQUAL
17905: IFFALSE 18086
// begin if GetBType ( building ) = b_factory then
17907: LD_VAR 0 1
17911: PPUSH
17912: CALL_OW 266
17916: PUSH
17917: LD_INT 3
17919: EQUAL
17920: IFFALSE 17987
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
17922: LD_ADDR_VAR 0 2
17926: PUSH
17927: LD_INT 22
17929: PUSH
17930: LD_INT 3
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 25
17939: PUSH
17940: LD_INT 3
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PPUSH
17951: CALL_OW 69
17955: PUSH
17956: FOR_IN
17957: IFFALSE 17975
// ComEnterUnit ( i , building ) ;
17959: LD_VAR 0 2
17963: PPUSH
17964: LD_VAR 0 1
17968: PPUSH
17969: CALL_OW 120
17973: GO 17956
17975: POP
17976: POP
// ruFab = building ;
17977: LD_ADDR_EXP 29
17981: PUSH
17982: LD_VAR 0 1
17986: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
17987: LD_VAR 0 1
17991: PPUSH
17992: CALL_OW 266
17996: PUSH
17997: LD_INT 8
17999: EQUAL
18000: IFFALSE 18057
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18002: LD_ADDR_VAR 0 2
18006: PUSH
18007: LD_INT 22
18009: PUSH
18010: LD_INT 3
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 25
18019: PUSH
18020: LD_INT 4
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PPUSH
18031: CALL_OW 69
18035: PUSH
18036: FOR_IN
18037: IFFALSE 18055
// ComEnterUnit ( i , building ) ;
18039: LD_VAR 0 2
18043: PPUSH
18044: LD_VAR 0 1
18048: PPUSH
18049: CALL_OW 120
18053: GO 18036
18055: POP
18056: POP
// if GetBType ( building ) = b_warehouse then
18057: LD_VAR 0 1
18061: PPUSH
18062: CALL_OW 266
18066: PUSH
18067: LD_INT 1
18069: EQUAL
18070: IFFALSE 18086
// begin ComEnterUnit ( Borodin , building ) ;
18072: LD_EXP 23
18076: PPUSH
18077: LD_VAR 0 1
18081: PPUSH
18082: CALL_OW 120
// end ; end ; end ;
18086: PPOPN 2
18088: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
18089: LD_VAR 0 1
18093: PPUSH
18094: CALL_OW 247
18098: PUSH
18099: LD_INT 2
18101: EQUAL
18102: PUSH
18103: LD_VAR 0 1
18107: PPUSH
18108: CALL_OW 263
18112: PUSH
18113: LD_INT 3
18115: EQUAL
18116: AND
18117: PUSH
18118: LD_EXP 39
18122: PUSH
18123: LD_INT 0
18125: EQUAL
18126: AND
18127: IFFALSE 18245
// begin varEvent1 = 1 ;
18129: LD_ADDR_EXP 39
18133: PUSH
18134: LD_INT 1
18136: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
18137: LD_VAR 0 1
18141: PPUSH
18142: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
18146: LD_INT 22
18148: PUSH
18149: LD_INT 1
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 21
18158: PUSH
18159: LD_INT 1
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 2
18168: PUSH
18169: LD_INT 25
18171: PUSH
18172: LD_INT 1
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 25
18181: PUSH
18182: LD_INT 2
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 25
18191: PUSH
18192: LD_INT 3
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 25
18201: PUSH
18202: LD_INT 4
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: LIST
18220: PPUSH
18221: CALL_OW 69
18225: PUSH
18226: LD_EXP 1
18230: PUSH
18231: EMPTY
18232: LIST
18233: DIFF
18234: PPUSH
18235: LD_STRING DC-Sol1-1
18237: PPUSH
18238: LD_STRING DC-FSol1-1
18240: PPUSH
18241: CALL 5521 0 3
// end ; end ; end_of_file
18245: PPOPN 1
18247: END
// every 0 0$1 do
18248: GO 18250
18250: DISABLE
// begin enable ;
18251: ENABLE
// if escapeAvalaible = 0 then
18252: LD_EXP 35
18256: PUSH
18257: LD_INT 0
18259: EQUAL
18260: IFFALSE 18272
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18262: LD_INT 3
18264: PPUSH
18265: LD_INT 6
18267: PPUSH
18268: CALL 6766 0 2
// if escapeAvalaible = 0 then
18272: LD_EXP 35
18276: PUSH
18277: LD_INT 0
18279: EQUAL
18280: IFFALSE 18292
// DefenseBase ( 1 , RussianBaseTerritory ) ;
18282: LD_INT 1
18284: PPUSH
18285: LD_INT 24
18287: PPUSH
18288: CALL 7513 0 2
// if russianAI = 1 then
18292: LD_EXP 26
18296: PUSH
18297: LD_INT 1
18299: EQUAL
18300: IFFALSE 18363
// begin RepairBuilding ( 3 , ruDepot ) ;
18302: LD_INT 3
18304: PPUSH
18305: LD_EXP 27
18309: PPUSH
18310: CALL 7813 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
18314: LD_INT 3
18316: PPUSH
18317: LD_INT 7
18319: PPUSH
18320: LD_INT 6
18322: PPUSH
18323: LD_EXP 28
18327: PPUSH
18328: CALL 8278 0 4
// RebuildBuildings ( 3 , ruDestroyBuilds ) ;
18332: LD_INT 3
18334: PPUSH
18335: LD_EXP 30
18339: PPUSH
18340: CALL 8072 0 2
// RepairVehicle ( 6 , RussianRepairArea , 93 , 93 , 1 ) ;
18344: LD_INT 6
18346: PPUSH
18347: LD_INT 8
18349: PPUSH
18350: LD_INT 93
18352: PPUSH
18353: LD_INT 93
18355: PPUSH
18356: LD_INT 1
18358: PPUSH
18359: CALL 8544 0 5
// end ; if SikorskyArrive = 1 then
18363: LD_EXP 17
18367: PUSH
18368: LD_INT 1
18370: EQUAL
18371: IFFALSE 18392
// RepairVehicle ( 3 , SikorskyRepairArea , 53 , 59 , 3 ) ;
18373: LD_INT 3
18375: PPUSH
18376: LD_INT 10
18378: PPUSH
18379: LD_INT 53
18381: PPUSH
18382: LD_INT 59
18384: PPUSH
18385: LD_INT 3
18387: PPUSH
18388: CALL 8544 0 5
// end ;
18392: END
// every 0 0$1 trigger SikorskyAI = 1 do
18393: LD_EXP 19
18397: PUSH
18398: LD_INT 1
18400: EQUAL
18401: IFFALSE 18439
18403: GO 18405
18405: DISABLE
// begin enable ;
18406: ENABLE
// RepairVehicle ( 4 , SikorskyRepairArea , 93 , 93 , 3 ) ;
18407: LD_INT 4
18409: PPUSH
18410: LD_INT 10
18412: PPUSH
18413: LD_INT 93
18415: PPUSH
18416: LD_INT 93
18418: PPUSH
18419: LD_INT 3
18421: PPUSH
18422: CALL 8544 0 5
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
18426: LD_INT 4
18428: PPUSH
18429: LD_INT 11
18431: PPUSH
18432: LD_INT 3
18434: PPUSH
18435: CALL 14481 0 3
// end ;
18439: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
18440: LD_EXP 26
18444: PUSH
18445: LD_INT 1
18447: EQUAL
18448: PUSH
18449: LD_EXP 29
18453: PPUSH
18454: CALL_OW 302
18458: AND
18459: PUSH
18460: LD_EXP 29
18464: PPUSH
18465: CALL_OW 255
18469: PUSH
18470: LD_INT 3
18472: EQUAL
18473: AND
18474: PUSH
18475: LD_INT 22
18477: PUSH
18478: LD_INT 3
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 21
18487: PUSH
18488: LD_INT 2
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 33
18497: PUSH
18498: LD_INT 3
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: LIST
18509: PPUSH
18510: CALL_OW 69
18514: PUSH
18515: LD_INT 0
18517: EQUAL
18518: AND
18519: IFFALSE 18702
18521: GO 18523
18523: DISABLE
// begin enable ;
18524: ENABLE
// if Difficulty = 1 then
18525: LD_OWVAR 67
18529: PUSH
18530: LD_INT 1
18532: EQUAL
18533: IFFALSE 18588
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 43 , 44 , 46 ] , 1 , 3 , 24 ) ;
18535: LD_INT 3
18537: PPUSH
18538: LD_EXP 29
18542: PPUSH
18543: LD_INT 5
18545: PPUSH
18546: LD_INT 8
18548: PPUSH
18549: CALL_OW 12
18553: PPUSH
18554: LD_INT 1
18556: PPUSH
18557: LD_INT 43
18559: PUSH
18560: LD_INT 43
18562: PUSH
18563: LD_INT 44
18565: PUSH
18566: LD_INT 46
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: PPUSH
18575: LD_INT 1
18577: PPUSH
18578: LD_INT 3
18580: PPUSH
18581: LD_INT 24
18583: PPUSH
18584: CALL 9379 0 8
// if Difficulty = 2 then
18588: LD_OWVAR 67
18592: PUSH
18593: LD_INT 2
18595: EQUAL
18596: IFFALSE 18647
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
18598: LD_INT 3
18600: PPUSH
18601: LD_EXP 29
18605: PPUSH
18606: LD_INT 6
18608: PPUSH
18609: LD_INT 8
18611: PPUSH
18612: CALL_OW 12
18616: PPUSH
18617: LD_INT 1
18619: PPUSH
18620: LD_INT 44
18622: PUSH
18623: LD_INT 44
18625: PUSH
18626: LD_INT 46
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: LIST
18633: PPUSH
18634: LD_INT 1
18636: PPUSH
18637: LD_INT 3
18639: PPUSH
18640: LD_INT 24
18642: PPUSH
18643: CALL 9379 0 8
// if Difficulty = 3 then
18647: LD_OWVAR 67
18651: PUSH
18652: LD_INT 3
18654: EQUAL
18655: IFFALSE 18702
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 46 ] , 1 , 3 , 24 ) ;
18657: LD_INT 3
18659: PPUSH
18660: LD_EXP 29
18664: PPUSH
18665: LD_INT 7
18667: PPUSH
18668: LD_INT 8
18670: PPUSH
18671: CALL_OW 12
18675: PPUSH
18676: LD_INT 1
18678: PPUSH
18679: LD_INT 44
18681: PUSH
18682: LD_INT 46
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PPUSH
18689: LD_INT 1
18691: PPUSH
18692: LD_INT 3
18694: PPUSH
18695: LD_INT 24
18697: PPUSH
18698: CALL 9379 0 8
// end ; end_of_file
18702: END
// every 0 0$1 trigger firstAttack = 1 do
18703: LD_EXP 32
18707: PUSH
18708: LD_INT 1
18710: EQUAL
18711: IFFALSE 18817
18713: GO 18715
18715: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
18716: LD_INT 6
18718: PPUSH
18719: LD_INT 3
18721: PPUSH
18722: LD_INT 5
18724: PPUSH
18725: LD_INT 6
18727: PPUSH
18728: CALL_OW 12
18732: PUSH
18733: LD_INT 5
18735: PPUSH
18736: LD_INT 6
18738: PPUSH
18739: CALL_OW 12
18743: PUSH
18744: LD_INT 5
18746: PPUSH
18747: LD_INT 6
18749: PPUSH
18750: CALL_OW 12
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: LIST
18759: PUSH
18760: LD_OWVAR 67
18764: ARRAY
18765: PPUSH
18766: LD_INT 0
18768: PPUSH
18769: LD_INT 0
18771: PPUSH
18772: LD_INT 0
18774: PPUSH
18775: LD_INT 0
18777: PPUSH
18778: LD_EXP 24
18782: PPUSH
18783: LD_EXP 25
18787: PPUSH
18788: CALL_OW 12
18792: PPUSH
18793: LD_INT 16
18795: PPUSH
18796: LD_INT 7
18798: PPUSH
18799: LD_INT 1
18801: PPUSH
18802: LD_INT 1
18804: PPUSH
18805: LD_INT 3
18807: PPUSH
18808: CALL_OW 12
18812: PPUSH
18813: CALL 9943 0 12
18817: END
// every 0 0$1 trigger firstAttack = 1 do
18818: LD_EXP 32
18822: PUSH
18823: LD_INT 1
18825: EQUAL
18826: IFFALSE 18926
18828: GO 18830
18830: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
18831: LD_INT 16
18833: PPUSH
18834: LD_INT 6
18836: PPUSH
18837: LD_INT 5
18839: PPUSH
18840: LD_INT 8
18842: PPUSH
18843: CALL_OW 12
18847: PUSH
18848: LD_INT 6
18850: PPUSH
18851: LD_INT 9
18853: PPUSH
18854: CALL_OW 12
18858: PUSH
18859: LD_INT 7
18861: PPUSH
18862: LD_INT 9
18864: PPUSH
18865: CALL_OW 12
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: LIST
18874: PUSH
18875: LD_OWVAR 67
18879: ARRAY
18880: PPUSH
18881: LD_EXP 24
18885: PPUSH
18886: LD_EXP 25
18890: PPUSH
18891: CALL_OW 12
18895: PPUSH
18896: LD_INT 3
18898: PPUSH
18899: LD_INT 1
18901: PPUSH
18902: LD_INT 3
18904: PPUSH
18905: LD_INT 44
18907: PUSH
18908: LD_INT 46
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PPUSH
18915: EMPTY
18916: PPUSH
18917: EMPTY
18918: PPUSH
18919: LD_INT 1
18921: PPUSH
18922: CALL 12803 0 11
18926: END
// every 3 3$1 trigger firstAttack = 1 do
18927: LD_EXP 32
18931: PUSH
18932: LD_INT 1
18934: EQUAL
18935: IFFALSE 19041
18937: GO 18939
18939: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
18940: LD_INT 6
18942: PPUSH
18943: LD_INT 3
18945: PPUSH
18946: LD_INT 5
18948: PPUSH
18949: LD_INT 6
18951: PPUSH
18952: CALL_OW 12
18956: PUSH
18957: LD_INT 5
18959: PPUSH
18960: LD_INT 6
18962: PPUSH
18963: CALL_OW 12
18967: PUSH
18968: LD_INT 5
18970: PPUSH
18971: LD_INT 6
18973: PPUSH
18974: CALL_OW 12
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: LIST
18983: PUSH
18984: LD_OWVAR 67
18988: ARRAY
18989: PPUSH
18990: LD_INT 0
18992: PPUSH
18993: LD_INT 0
18995: PPUSH
18996: LD_INT 0
18998: PPUSH
18999: LD_INT 0
19001: PPUSH
19002: LD_EXP 24
19006: PPUSH
19007: LD_EXP 25
19011: PPUSH
19012: CALL_OW 12
19016: PPUSH
19017: LD_INT 16
19019: PPUSH
19020: LD_INT 7
19022: PPUSH
19023: LD_INT 1
19025: PPUSH
19026: LD_INT 1
19028: PPUSH
19029: LD_INT 3
19031: PPUSH
19032: CALL_OW 12
19036: PPUSH
19037: CALL 9943 0 12
19041: END
// every 3 3$1 trigger firstAttack = 1 do
19042: LD_EXP 32
19046: PUSH
19047: LD_INT 1
19049: EQUAL
19050: IFFALSE 19158
19052: GO 19054
19054: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
19055: LD_INT 16
19057: PPUSH
19058: LD_INT 6
19060: PPUSH
19061: LD_INT 5
19063: PPUSH
19064: LD_INT 8
19066: PPUSH
19067: CALL_OW 12
19071: PUSH
19072: LD_INT 6
19074: PPUSH
19075: LD_INT 9
19077: PPUSH
19078: CALL_OW 12
19082: PUSH
19083: LD_INT 7
19085: PPUSH
19086: LD_INT 9
19088: PPUSH
19089: CALL_OW 12
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: LIST
19098: PUSH
19099: LD_OWVAR 67
19103: ARRAY
19104: PPUSH
19105: LD_EXP 24
19109: PPUSH
19110: LD_EXP 25
19114: PPUSH
19115: CALL_OW 12
19119: PPUSH
19120: LD_INT 3
19122: PPUSH
19123: LD_INT 1
19125: PPUSH
19126: LD_INT 3
19128: PPUSH
19129: LD_INT 42
19131: PUSH
19132: LD_INT 43
19134: PUSH
19135: LD_INT 44
19137: PUSH
19138: LD_INT 46
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: PPUSH
19147: EMPTY
19148: PPUSH
19149: EMPTY
19150: PPUSH
19151: LD_INT 1
19153: PPUSH
19154: CALL 12803 0 11
19158: END
// every 6 6$1 trigger firstAttack = 1 and JMMArrive = 0 do
19159: LD_EXP 32
19163: PUSH
19164: LD_INT 1
19166: EQUAL
19167: PUSH
19168: LD_EXP 37
19172: PUSH
19173: LD_INT 0
19175: EQUAL
19176: AND
19177: IFFALSE 19283
19179: GO 19181
19181: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19182: LD_INT 6
19184: PPUSH
19185: LD_INT 3
19187: PPUSH
19188: LD_INT 5
19190: PPUSH
19191: LD_INT 6
19193: PPUSH
19194: CALL_OW 12
19198: PUSH
19199: LD_INT 5
19201: PPUSH
19202: LD_INT 6
19204: PPUSH
19205: CALL_OW 12
19209: PUSH
19210: LD_INT 5
19212: PPUSH
19213: LD_INT 6
19215: PPUSH
19216: CALL_OW 12
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: LIST
19225: PUSH
19226: LD_OWVAR 67
19230: ARRAY
19231: PPUSH
19232: LD_INT 0
19234: PPUSH
19235: LD_INT 0
19237: PPUSH
19238: LD_INT 0
19240: PPUSH
19241: LD_INT 0
19243: PPUSH
19244: LD_EXP 24
19248: PPUSH
19249: LD_EXP 25
19253: PPUSH
19254: CALL_OW 12
19258: PPUSH
19259: LD_INT 16
19261: PPUSH
19262: LD_INT 7
19264: PPUSH
19265: LD_INT 1
19267: PPUSH
19268: LD_INT 1
19270: PPUSH
19271: LD_INT 3
19273: PPUSH
19274: CALL_OW 12
19278: PPUSH
19279: CALL 9943 0 12
19283: END
// every 6 6$1 trigger firstAttack = 1 and JMMArrive = 0 do
19284: LD_EXP 32
19288: PUSH
19289: LD_INT 1
19291: EQUAL
19292: PUSH
19293: LD_EXP 37
19297: PUSH
19298: LD_INT 0
19300: EQUAL
19301: AND
19302: IFFALSE 19406
19304: GO 19306
19306: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
19307: LD_INT 16
19309: PPUSH
19310: LD_INT 6
19312: PPUSH
19313: LD_INT 5
19315: PPUSH
19316: LD_INT 8
19318: PPUSH
19319: CALL_OW 12
19323: PUSH
19324: LD_INT 6
19326: PPUSH
19327: LD_INT 9
19329: PPUSH
19330: CALL_OW 12
19334: PUSH
19335: LD_INT 7
19337: PPUSH
19338: LD_INT 9
19340: PPUSH
19341: CALL_OW 12
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: LIST
19350: PUSH
19351: LD_OWVAR 67
19355: ARRAY
19356: PPUSH
19357: LD_EXP 24
19361: PPUSH
19362: LD_EXP 25
19366: PPUSH
19367: CALL_OW 12
19371: PPUSH
19372: LD_INT 3
19374: PPUSH
19375: LD_INT 1
19377: PPUSH
19378: LD_INT 3
19380: PPUSH
19381: LD_INT 43
19383: PUSH
19384: LD_INT 44
19386: PUSH
19387: LD_INT 46
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: LIST
19394: PPUSH
19395: EMPTY
19396: PPUSH
19397: EMPTY
19398: PPUSH
19399: LD_INT 1
19401: PPUSH
19402: CALL 12803 0 11
19406: END
// every 10 10$1 trigger firstAttack = 1 and JMMArrive = 0 do
19407: LD_EXP 32
19411: PUSH
19412: LD_INT 1
19414: EQUAL
19415: PUSH
19416: LD_EXP 37
19420: PUSH
19421: LD_INT 0
19423: EQUAL
19424: AND
19425: IFFALSE 19525
19427: GO 19429
19429: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
19430: LD_INT 16
19432: PPUSH
19433: LD_INT 6
19435: PPUSH
19436: LD_INT 5
19438: PPUSH
19439: LD_INT 8
19441: PPUSH
19442: CALL_OW 12
19446: PUSH
19447: LD_INT 6
19449: PPUSH
19450: LD_INT 9
19452: PPUSH
19453: CALL_OW 12
19457: PUSH
19458: LD_INT 7
19460: PPUSH
19461: LD_INT 9
19463: PPUSH
19464: CALL_OW 12
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: LIST
19473: PUSH
19474: LD_OWVAR 67
19478: ARRAY
19479: PPUSH
19480: LD_EXP 24
19484: PPUSH
19485: LD_EXP 25
19489: PPUSH
19490: CALL_OW 12
19494: PPUSH
19495: LD_INT 3
19497: PPUSH
19498: LD_INT 1
19500: PPUSH
19501: LD_INT 3
19503: PPUSH
19504: LD_INT 44
19506: PUSH
19507: LD_INT 46
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PPUSH
19514: EMPTY
19515: PPUSH
19516: EMPTY
19517: PPUSH
19518: LD_INT 1
19520: PPUSH
19521: CALL 12803 0 11
19525: END
// every 1 1$1 trigger secondAttack = 1 do
19526: LD_EXP 33
19530: PUSH
19531: LD_INT 1
19533: EQUAL
19534: IFFALSE 19640
19536: GO 19538
19538: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19539: LD_INT 6
19541: PPUSH
19542: LD_INT 3
19544: PPUSH
19545: LD_INT 4
19547: PPUSH
19548: LD_INT 7
19550: PPUSH
19551: CALL_OW 12
19555: PUSH
19556: LD_INT 6
19558: PPUSH
19559: LD_INT 7
19561: PPUSH
19562: CALL_OW 12
19566: PUSH
19567: LD_INT 6
19569: PPUSH
19570: LD_INT 10
19572: PPUSH
19573: CALL_OW 12
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: LIST
19582: PUSH
19583: LD_OWVAR 67
19587: ARRAY
19588: PPUSH
19589: LD_INT 0
19591: PPUSH
19592: LD_INT 0
19594: PPUSH
19595: LD_INT 0
19597: PPUSH
19598: LD_INT 0
19600: PPUSH
19601: LD_EXP 24
19605: PPUSH
19606: LD_EXP 25
19610: PPUSH
19611: CALL_OW 12
19615: PPUSH
19616: LD_INT 16
19618: PPUSH
19619: LD_INT 7
19621: PPUSH
19622: LD_INT 1
19624: PPUSH
19625: LD_INT 1
19627: PPUSH
19628: LD_INT 3
19630: PPUSH
19631: CALL_OW 12
19635: PPUSH
19636: CALL 9943 0 12
19640: END
// every 1 1$1 trigger secondAttack = 1 do
19641: LD_EXP 33
19645: PUSH
19646: LD_INT 1
19648: EQUAL
19649: IFFALSE 19753
19651: GO 19653
19653: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
19654: LD_INT 16
19656: PPUSH
19657: LD_INT 6
19659: PPUSH
19660: LD_INT 5
19662: PPUSH
19663: LD_INT 8
19665: PPUSH
19666: CALL_OW 12
19670: PUSH
19671: LD_INT 6
19673: PPUSH
19674: LD_INT 9
19676: PPUSH
19677: CALL_OW 12
19681: PUSH
19682: LD_INT 7
19684: PPUSH
19685: LD_INT 9
19687: PPUSH
19688: CALL_OW 12
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: LIST
19697: PUSH
19698: LD_OWVAR 67
19702: ARRAY
19703: PPUSH
19704: LD_EXP 24
19708: PPUSH
19709: LD_EXP 25
19713: PPUSH
19714: CALL_OW 12
19718: PPUSH
19719: LD_INT 3
19721: PPUSH
19722: LD_INT 1
19724: PPUSH
19725: LD_INT 3
19727: PPUSH
19728: LD_INT 43
19730: PUSH
19731: LD_INT 44
19733: PUSH
19734: LD_INT 46
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: LIST
19741: PPUSH
19742: EMPTY
19743: PPUSH
19744: EMPTY
19745: PPUSH
19746: LD_INT 1
19748: PPUSH
19749: CALL 12803 0 11
19753: END
// every 20 20$0 trigger SikorskyArrive = 0 do
19754: LD_EXP 17
19758: PUSH
19759: LD_INT 0
19761: EQUAL
19762: IFFALSE 19868
19764: GO 19766
19766: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19767: LD_INT 6
19769: PPUSH
19770: LD_INT 3
19772: PPUSH
19773: LD_INT 8
19775: PPUSH
19776: LD_INT 9
19778: PPUSH
19779: CALL_OW 12
19783: PUSH
19784: LD_INT 7
19786: PPUSH
19787: LD_INT 10
19789: PPUSH
19790: CALL_OW 12
19794: PUSH
19795: LD_INT 8
19797: PPUSH
19798: LD_INT 10
19800: PPUSH
19801: CALL_OW 12
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: LIST
19810: PUSH
19811: LD_OWVAR 67
19815: ARRAY
19816: PPUSH
19817: LD_INT 0
19819: PPUSH
19820: LD_INT 0
19822: PPUSH
19823: LD_INT 0
19825: PPUSH
19826: LD_INT 0
19828: PPUSH
19829: LD_EXP 24
19833: PPUSH
19834: LD_EXP 25
19838: PPUSH
19839: CALL_OW 12
19843: PPUSH
19844: LD_INT 16
19846: PPUSH
19847: LD_INT 7
19849: PPUSH
19850: LD_INT 1
19852: PPUSH
19853: LD_INT 1
19855: PPUSH
19856: LD_INT 3
19858: PPUSH
19859: CALL_OW 12
19863: PPUSH
19864: CALL 9943 0 12
19868: END
// every 20 20$0 trigger SikorskyArrive = 0 do
19869: LD_EXP 17
19873: PUSH
19874: LD_INT 0
19876: EQUAL
19877: IFFALSE 19977
19879: GO 19881
19881: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
19882: LD_INT 16
19884: PPUSH
19885: LD_INT 6
19887: PPUSH
19888: LD_INT 5
19890: PPUSH
19891: LD_INT 8
19893: PPUSH
19894: CALL_OW 12
19898: PUSH
19899: LD_INT 6
19901: PPUSH
19902: LD_INT 9
19904: PPUSH
19905: CALL_OW 12
19909: PUSH
19910: LD_INT 7
19912: PPUSH
19913: LD_INT 9
19915: PPUSH
19916: CALL_OW 12
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: LIST
19925: PUSH
19926: LD_OWVAR 67
19930: ARRAY
19931: PPUSH
19932: LD_EXP 24
19936: PPUSH
19937: LD_EXP 25
19941: PPUSH
19942: CALL_OW 12
19946: PPUSH
19947: LD_INT 3
19949: PPUSH
19950: LD_INT 1
19952: PPUSH
19953: LD_INT 3
19955: PPUSH
19956: LD_INT 44
19958: PUSH
19959: LD_INT 46
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PPUSH
19966: EMPTY
19967: PPUSH
19968: EMPTY
19969: PPUSH
19970: LD_INT 1
19972: PPUSH
19973: CALL 12803 0 11
19977: END
// every 25 25$0 trigger SikorskyArrive = 0 do
19978: LD_EXP 17
19982: PUSH
19983: LD_INT 0
19985: EQUAL
19986: IFFALSE 20092
19988: GO 19990
19990: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19991: LD_INT 6
19993: PPUSH
19994: LD_INT 3
19996: PPUSH
19997: LD_INT 8
19999: PPUSH
20000: LD_INT 9
20002: PPUSH
20003: CALL_OW 12
20007: PUSH
20008: LD_INT 7
20010: PPUSH
20011: LD_INT 10
20013: PPUSH
20014: CALL_OW 12
20018: PUSH
20019: LD_INT 8
20021: PPUSH
20022: LD_INT 10
20024: PPUSH
20025: CALL_OW 12
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: LIST
20034: PUSH
20035: LD_OWVAR 67
20039: ARRAY
20040: PPUSH
20041: LD_INT 0
20043: PPUSH
20044: LD_INT 0
20046: PPUSH
20047: LD_INT 0
20049: PPUSH
20050: LD_INT 0
20052: PPUSH
20053: LD_EXP 24
20057: PPUSH
20058: LD_EXP 25
20062: PPUSH
20063: CALL_OW 12
20067: PPUSH
20068: LD_INT 16
20070: PPUSH
20071: LD_INT 7
20073: PPUSH
20074: LD_INT 1
20076: PPUSH
20077: LD_INT 1
20079: PPUSH
20080: LD_INT 3
20082: PPUSH
20083: CALL_OW 12
20087: PPUSH
20088: CALL 9943 0 12
20092: END
// every 25 25$0 trigger SikorskyArrive = 0 do
20093: LD_EXP 17
20097: PUSH
20098: LD_INT 0
20100: EQUAL
20101: IFFALSE 20201
20103: GO 20105
20105: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20106: LD_INT 16
20108: PPUSH
20109: LD_INT 6
20111: PPUSH
20112: LD_INT 5
20114: PPUSH
20115: LD_INT 8
20117: PPUSH
20118: CALL_OW 12
20122: PUSH
20123: LD_INT 6
20125: PPUSH
20126: LD_INT 9
20128: PPUSH
20129: CALL_OW 12
20133: PUSH
20134: LD_INT 7
20136: PPUSH
20137: LD_INT 9
20139: PPUSH
20140: CALL_OW 12
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: LIST
20149: PUSH
20150: LD_OWVAR 67
20154: ARRAY
20155: PPUSH
20156: LD_EXP 24
20160: PPUSH
20161: LD_EXP 25
20165: PPUSH
20166: CALL_OW 12
20170: PPUSH
20171: LD_INT 3
20173: PPUSH
20174: LD_INT 1
20176: PPUSH
20177: LD_INT 3
20179: PPUSH
20180: LD_INT 44
20182: PUSH
20183: LD_INT 46
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PPUSH
20190: EMPTY
20191: PPUSH
20192: EMPTY
20193: PPUSH
20194: LD_INT 1
20196: PPUSH
20197: CALL 12803 0 11
20201: END
// every 35 35$0 trigger SikorskyArrive = 0 do
20202: LD_EXP 17
20206: PUSH
20207: LD_INT 0
20209: EQUAL
20210: IFFALSE 20316
20212: GO 20214
20214: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20215: LD_INT 6
20217: PPUSH
20218: LD_INT 3
20220: PPUSH
20221: LD_INT 8
20223: PPUSH
20224: LD_INT 9
20226: PPUSH
20227: CALL_OW 12
20231: PUSH
20232: LD_INT 7
20234: PPUSH
20235: LD_INT 10
20237: PPUSH
20238: CALL_OW 12
20242: PUSH
20243: LD_INT 8
20245: PPUSH
20246: LD_INT 10
20248: PPUSH
20249: CALL_OW 12
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: LIST
20258: PUSH
20259: LD_OWVAR 67
20263: ARRAY
20264: PPUSH
20265: LD_INT 0
20267: PPUSH
20268: LD_INT 0
20270: PPUSH
20271: LD_INT 0
20273: PPUSH
20274: LD_INT 0
20276: PPUSH
20277: LD_EXP 24
20281: PPUSH
20282: LD_EXP 25
20286: PPUSH
20287: CALL_OW 12
20291: PPUSH
20292: LD_INT 16
20294: PPUSH
20295: LD_INT 7
20297: PPUSH
20298: LD_INT 1
20300: PPUSH
20301: LD_INT 1
20303: PPUSH
20304: LD_INT 3
20306: PPUSH
20307: CALL_OW 12
20311: PPUSH
20312: CALL 9943 0 12
20316: END
// every 35 35$0 trigger SikorskyArrive = 0 do
20317: LD_EXP 17
20321: PUSH
20322: LD_INT 0
20324: EQUAL
20325: IFFALSE 20425
20327: GO 20329
20329: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
20330: LD_INT 16
20332: PPUSH
20333: LD_INT 6
20335: PPUSH
20336: LD_INT 5
20338: PPUSH
20339: LD_INT 8
20341: PPUSH
20342: CALL_OW 12
20346: PUSH
20347: LD_INT 6
20349: PPUSH
20350: LD_INT 9
20352: PPUSH
20353: CALL_OW 12
20357: PUSH
20358: LD_INT 7
20360: PPUSH
20361: LD_INT 9
20363: PPUSH
20364: CALL_OW 12
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: LIST
20373: PUSH
20374: LD_OWVAR 67
20378: ARRAY
20379: PPUSH
20380: LD_EXP 24
20384: PPUSH
20385: LD_EXP 25
20389: PPUSH
20390: CALL_OW 12
20394: PPUSH
20395: LD_INT 3
20397: PPUSH
20398: LD_INT 1
20400: PPUSH
20401: LD_INT 3
20403: PPUSH
20404: LD_INT 44
20406: PUSH
20407: LD_INT 46
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PPUSH
20414: EMPTY
20415: PPUSH
20416: EMPTY
20417: PPUSH
20418: LD_INT 1
20420: PPUSH
20421: CALL 12803 0 11
20425: END
// every 0 0$1 trigger timerStatus = 1 do
20426: LD_EXP 34
20430: PUSH
20431: LD_INT 1
20433: EQUAL
20434: IFFALSE 20471
20436: GO 20438
20438: DISABLE
// begin enable ;
20439: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
20440: LD_ADDR_OWVAR 47
20444: PUSH
20445: LD_STRING #Am08-1
20447: PUSH
20448: LD_EXP 18
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
20457: LD_ADDR_EXP 18
20461: PUSH
20462: LD_EXP 18
20466: PUSH
20467: LD_INT 35
20469: MINUS
20470: ST_TO_ADDR
// end ; end_of_file
20471: END
// every 1 1$0 do
20472: GO 20474
20474: DISABLE
// begin if supply <= 13 and supply > 7 then
20475: LD_EXP 38
20479: PUSH
20480: LD_INT 13
20482: LESSEQUAL
20483: PUSH
20484: LD_EXP 38
20488: PUSH
20489: LD_INT 7
20491: GREATER
20492: AND
20493: IFFALSE 20516
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
20495: LD_INT 3
20497: PPUSH
20498: LD_INT 5
20500: PPUSH
20501: CALL_OW 12
20505: PPUSH
20506: LD_INT 5
20508: PPUSH
20509: LD_INT 1
20511: PPUSH
20512: CALL_OW 55
// if supply <= 7 and supply > 4 then
20516: LD_EXP 38
20520: PUSH
20521: LD_INT 7
20523: LESSEQUAL
20524: PUSH
20525: LD_EXP 38
20529: PUSH
20530: LD_INT 4
20532: GREATER
20533: AND
20534: IFFALSE 20557
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
20536: LD_INT 3
20538: PPUSH
20539: LD_INT 5
20541: PPUSH
20542: CALL_OW 12
20546: PPUSH
20547: LD_INT 20
20549: PPUSH
20550: LD_INT 1
20552: PPUSH
20553: CALL_OW 55
// if supply <= 4 and supply > 0 then
20557: LD_EXP 38
20561: PUSH
20562: LD_INT 4
20564: LESSEQUAL
20565: PUSH
20566: LD_EXP 38
20570: PUSH
20571: LD_INT 0
20573: GREATER
20574: AND
20575: IFFALSE 20598
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
20577: LD_INT 3
20579: PPUSH
20580: LD_INT 5
20582: PPUSH
20583: CALL_OW 12
20587: PPUSH
20588: LD_INT 21
20590: PPUSH
20591: LD_INT 1
20593: PPUSH
20594: CALL_OW 55
// if supply > 0 then
20598: LD_EXP 38
20602: PUSH
20603: LD_INT 0
20605: GREATER
20606: IFFALSE 20623
// begin supply = supply - 1 ;
20608: LD_ADDR_EXP 38
20612: PUSH
20613: LD_EXP 38
20617: PUSH
20618: LD_INT 1
20620: MINUS
20621: ST_TO_ADDR
// enable ;
20622: ENABLE
// end ; end ; end_of_file
20623: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
20624: LD_EXP 37
20628: PUSH
20629: LD_INT 1
20631: EQUAL
20632: PUSH
20633: LD_EXP 1
20637: PPUSH
20638: CALL_OW 301
20642: AND
20643: IFFALSE 20655
20645: GO 20647
20647: DISABLE
// YouLost ( JMM ) ;
20648: LD_STRING JMM
20650: PPUSH
20651: CALL_OW 104
20655: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
20656: LD_EXP 17
20660: PUSH
20661: LD_INT 1
20663: EQUAL
20664: PUSH
20665: LD_EXP 15
20669: PPUSH
20670: CALL_OW 301
20674: AND
20675: IFFALSE 20707
20677: GO 20679
20679: DISABLE
// begin DialogueOn ;
20680: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
20684: LD_EXP 22
20688: PPUSH
20689: LD_STRING D8a-Pow-1
20691: PPUSH
20692: CALL_OW 94
// DialogueOff ;
20696: CALL_OW 7
// YouLost ( Dismissed ) ;
20700: LD_STRING Dismissed
20702: PPUSH
20703: CALL_OW 104
// end ;
20707: END
// every 0 0$1 trigger IsDead ( amDepot ) do
20708: LD_EXP 36
20712: PPUSH
20713: CALL_OW 301
20717: IFFALSE 20729
20719: GO 20721
20721: DISABLE
// YouLost ( Destroyed ) ; end_of_file
20722: LD_STRING Destroyed
20724: PPUSH
20725: CALL_OW 104
20729: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
20730: LD_EXP 23
20734: PPUSH
20735: CALL_OW 301
20739: IFFALSE 21084
20741: GO 20743
20743: DISABLE
20744: LD_INT 0
20746: PPUSH
// begin russianAI = 0 ;
20747: LD_ADDR_EXP 26
20751: PUSH
20752: LD_INT 0
20754: ST_TO_ADDR
// escapeAvalaible = 1 ;
20755: LD_ADDR_EXP 35
20759: PUSH
20760: LD_INT 1
20762: ST_TO_ADDR
// InGameOn ;
20763: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
20767: LD_INT 3
20769: PPUSH
20770: LD_INT 1
20772: PPUSH
20773: LD_INT 1
20775: PPUSH
20776: LD_INT 0
20778: PPUSH
20779: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
20783: LD_INT 6
20785: PPUSH
20786: LD_INT 1
20788: PPUSH
20789: LD_INT 1
20791: PPUSH
20792: LD_INT 0
20794: PPUSH
20795: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
20799: LD_INT 3
20801: PPUSH
20802: LD_INT 1
20804: PPUSH
20805: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
20809: LD_INT 97
20811: PPUSH
20812: LD_INT 91
20814: PPUSH
20815: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
20819: LD_INT 22
20821: PUSH
20822: LD_INT 3
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 21
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PPUSH
20843: CALL_OW 69
20847: PPUSH
20848: CALL_OW 121
// wait ( 0 0$01 ) ;
20852: LD_INT 35
20854: PPUSH
20855: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20859: LD_INT 22
20861: PUSH
20862: LD_INT 3
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 21
20871: PUSH
20872: LD_INT 1
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PPUSH
20883: CALL_OW 69
20887: PPUSH
20888: LD_INT 124
20890: PPUSH
20891: LD_INT 98
20893: PPUSH
20894: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
20898: LD_INT 22
20900: PUSH
20901: LD_INT 6
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 21
20910: PUSH
20911: LD_INT 1
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PPUSH
20922: CALL_OW 69
20926: PPUSH
20927: CALL_OW 121
// wait ( 0 0$01 ) ;
20931: LD_INT 35
20933: PPUSH
20934: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20938: LD_INT 22
20940: PUSH
20941: LD_INT 6
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 21
20950: PUSH
20951: LD_INT 1
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PPUSH
20962: CALL_OW 69
20966: PPUSH
20967: LD_INT 124
20969: PPUSH
20970: LD_INT 98
20972: PPUSH
20973: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20977: LD_INT 22
20979: PUSH
20980: LD_INT 1
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 21
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PPUSH
21001: CALL_OW 69
21005: PPUSH
21006: LD_INT 124
21008: PPUSH
21009: LD_INT 98
21011: PPUSH
21012: CALL_OW 114
// wait ( 0 0$4 ) ;
21016: LD_INT 140
21018: PPUSH
21019: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
21023: LD_INT 124
21025: PPUSH
21026: LD_INT 98
21028: PPUSH
21029: CALL_OW 84
// if SikorskyStatus = 1 then
21033: LD_EXP 20
21037: PUSH
21038: LD_INT 1
21040: EQUAL
21041: IFFALSE 21055
// begin Say ( Sikorski , D9-Sik-1 ) ;
21043: LD_EXP 15
21047: PPUSH
21048: LD_STRING D9-Sik-1
21050: PPUSH
21051: CALL_OW 88
// end ; if SikorskyStatus = 2 then
21055: LD_EXP 20
21059: PUSH
21060: LD_INT 2
21062: EQUAL
21063: IFFALSE 21084
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
21065: LD_EXP 22
21069: PPUSH
21070: LD_STRING D8b-Pow-1
21072: PPUSH
21073: CALL_OW 94
// YouLost ( Dismissed ) ;
21077: LD_STRING Dismissed
21079: PPUSH
21080: CALL_OW 104
// end ; end ;
21084: PPOPN 1
21086: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
21087: LD_INT 23
21089: PUSH
21090: LD_INT 3
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 21
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 24
21109: PUSH
21110: LD_INT 250
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: LIST
21121: PPUSH
21122: CALL_OW 69
21126: PUSH
21127: LD_INT 0
21129: EQUAL
21130: IFFALSE 21139
21132: GO 21134
21134: DISABLE
// FinishMission ;
21135: CALL 21140 0 0
21139: END
// export function FinishMission ; var tmp ; begin
21140: LD_INT 0
21142: PPUSH
21143: PPUSH
// AddMedal ( med1 , 1 ) ;
21144: LD_STRING med1
21146: PPUSH
21147: LD_INT 1
21149: PPUSH
21150: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
21154: LD_STRING med2
21156: PPUSH
21157: LD_INT 1
21159: PPUSH
21160: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
21164: LD_STRING perfect
21166: PPUSH
21167: LD_INT 1
21169: PPUSH
21170: CALL_OW 101
// GiveMedals ( Main ) ;
21174: LD_STRING Main
21176: PPUSH
21177: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
21181: LD_INT 22
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 23
21193: PUSH
21194: LD_INT 1
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 21
21203: PUSH
21204: LD_INT 1
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 2
21213: PUSH
21214: LD_INT 25
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 25
21226: PUSH
21227: LD_INT 2
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 25
21236: PUSH
21237: LD_INT 3
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 25
21246: PUSH
21247: LD_INT 4
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: PPUSH
21267: CALL_OW 69
21271: PPUSH
21272: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21276: LD_EXP 1
21280: PPUSH
21281: LD_EXP 40
21285: PUSH
21286: LD_STRING JMM
21288: STR
21289: PPUSH
21290: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
21294: LD_EXP 2
21298: PPUSH
21299: LD_EXP 40
21303: PUSH
21304: LD_STRING Brown
21306: STR
21307: PPUSH
21308: CALL 6630 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21312: LD_EXP 3
21316: PPUSH
21317: LD_EXP 40
21321: PUSH
21322: LD_STRING Donaldson
21324: STR
21325: PPUSH
21326: CALL 6630 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21330: LD_EXP 4
21334: PPUSH
21335: LD_EXP 40
21339: PUSH
21340: LD_STRING Bobby
21342: STR
21343: PPUSH
21344: CALL 6630 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21348: LD_EXP 5
21352: PPUSH
21353: LD_EXP 40
21357: PUSH
21358: LD_STRING Cyrus
21360: STR
21361: PPUSH
21362: CALL 6630 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21366: LD_EXP 6
21370: PPUSH
21371: LD_EXP 40
21375: PUSH
21376: LD_STRING Lisa
21378: STR
21379: PPUSH
21380: CALL 6630 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
21384: LD_EXP 7
21388: PPUSH
21389: LD_EXP 40
21393: PUSH
21394: LD_STRING Frank
21396: STR
21397: PPUSH
21398: CALL 6630 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
21402: LD_EXP 8
21406: PPUSH
21407: LD_EXP 40
21411: PUSH
21412: LD_STRING Gladstone
21414: STR
21415: PPUSH
21416: CALL 6630 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
21420: LD_EXP 9
21424: PPUSH
21425: LD_EXP 40
21429: PUSH
21430: LD_STRING Kikuchi
21432: STR
21433: PPUSH
21434: CALL 6630 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
21438: LD_EXP 13
21442: PPUSH
21443: LD_EXP 40
21447: PUSH
21448: LD_STRING Denis
21450: STR
21451: PPUSH
21452: CALL 6630 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
21456: LD_EXP 14
21460: PPUSH
21461: LD_EXP 40
21465: PUSH
21466: LD_STRING Joan
21468: STR
21469: PPUSH
21470: CALL 6630 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
21474: LD_EXP 12
21478: PPUSH
21479: LD_EXP 40
21483: PUSH
21484: LD_STRING Houten
21486: STR
21487: PPUSH
21488: CALL 6630 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten ] , 08_other_survivors ) ;
21492: LD_INT 50
21494: PUSH
21495: EMPTY
21496: LIST
21497: PUSH
21498: LD_INT 22
21500: PUSH
21501: LD_INT 1
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 21
21510: PUSH
21511: LD_INT 1
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 2
21520: PUSH
21521: LD_INT 25
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 25
21533: PUSH
21534: LD_INT 2
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 25
21543: PUSH
21544: LD_INT 3
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 25
21553: PUSH
21554: LD_INT 4
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: PPUSH
21574: CALL_OW 69
21578: PUSH
21579: LD_EXP 1
21583: PUSH
21584: LD_EXP 2
21588: PUSH
21589: LD_EXP 3
21593: PUSH
21594: LD_EXP 4
21598: PUSH
21599: LD_EXP 5
21603: PUSH
21604: LD_EXP 6
21608: PUSH
21609: LD_EXP 7
21613: PUSH
21614: LD_EXP 8
21618: PUSH
21619: LD_EXP 9
21623: PUSH
21624: LD_EXP 13
21628: PUSH
21629: LD_EXP 14
21633: PUSH
21634: LD_EXP 12
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: DIFF
21653: PPUSH
21654: LD_STRING 08_other_survivors
21656: PPUSH
21657: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
21661: LD_INT 23
21663: PPUSH
21664: CALL 21677 0 1
// YouWin ;
21668: CALL_OW 103
// end ;
21672: LD_VAR 0 1
21676: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
21677: LD_INT 0
21679: PPUSH
21680: PPUSH
21681: PPUSH
21682: PPUSH
// gammaBase = [ ] ;
21683: LD_ADDR_VAR 0 4
21687: PUSH
21688: EMPTY
21689: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
21690: LD_ADDR_VAR 0 5
21694: PUSH
21695: LD_VAR 0 1
21699: PPUSH
21700: LD_INT 22
21702: PUSH
21703: LD_INT 1
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 21
21712: PUSH
21713: LD_INT 3
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 50
21722: PUSH
21723: EMPTY
21724: LIST
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: LIST
21730: PPUSH
21731: CALL_OW 70
21735: ST_TO_ADDR
// for i in buildings do
21736: LD_ADDR_VAR 0 3
21740: PUSH
21741: LD_VAR 0 5
21745: PUSH
21746: FOR_IN
21747: IFFALSE 22084
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
21749: LD_VAR 0 3
21753: PPUSH
21754: CALL_OW 266
21758: PUSH
21759: LD_INT 6
21761: PUSH
21762: LD_INT 7
21764: PUSH
21765: LD_INT 8
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: LIST
21772: IN
21773: IFFALSE 21887
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
21775: LD_ADDR_VAR 0 4
21779: PUSH
21780: LD_VAR 0 4
21784: PUSH
21785: LD_VAR 0 3
21789: PPUSH
21790: CALL_OW 266
21794: PUSH
21795: LD_VAR 0 3
21799: PPUSH
21800: CALL_OW 250
21804: PUSH
21805: LD_VAR 0 3
21809: PPUSH
21810: CALL_OW 251
21814: PUSH
21815: LD_VAR 0 3
21819: PPUSH
21820: CALL_OW 254
21824: PUSH
21825: LD_VAR 0 3
21829: PPUSH
21830: CALL_OW 267
21834: PUSH
21835: LD_VAR 0 3
21839: PPUSH
21840: CALL_OW 248
21844: PUSH
21845: LD_VAR 0 3
21849: PPUSH
21850: LD_INT 1
21852: PPUSH
21853: CALL_OW 268
21857: PUSH
21858: LD_VAR 0 3
21862: PPUSH
21863: LD_INT 2
21865: PPUSH
21866: CALL_OW 268
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: PUSH
21881: EMPTY
21882: LIST
21883: ADD
21884: ST_TO_ADDR
21885: GO 22082
// if GetBType ( i ) in [ b_bunker ] then
21887: LD_VAR 0 3
21891: PPUSH
21892: CALL_OW 266
21896: PUSH
21897: LD_INT 32
21899: PUSH
21900: EMPTY
21901: LIST
21902: IN
21903: IFFALSE 22000
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
21905: LD_ADDR_VAR 0 4
21909: PUSH
21910: LD_VAR 0 4
21914: PUSH
21915: LD_VAR 0 3
21919: PPUSH
21920: CALL_OW 266
21924: PUSH
21925: LD_VAR 0 3
21929: PPUSH
21930: CALL_OW 250
21934: PUSH
21935: LD_VAR 0 3
21939: PPUSH
21940: CALL_OW 251
21944: PUSH
21945: LD_VAR 0 3
21949: PPUSH
21950: CALL_OW 254
21954: PUSH
21955: LD_VAR 0 3
21959: PPUSH
21960: CALL_OW 267
21964: PUSH
21965: LD_VAR 0 3
21969: PPUSH
21970: CALL_OW 248
21974: PUSH
21975: LD_VAR 0 3
21979: PPUSH
21980: CALL_OW 269
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: PUSH
21994: EMPTY
21995: LIST
21996: ADD
21997: ST_TO_ADDR
21998: GO 22082
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
22000: LD_ADDR_VAR 0 4
22004: PUSH
22005: LD_VAR 0 4
22009: PUSH
22010: LD_VAR 0 3
22014: PPUSH
22015: CALL_OW 266
22019: PUSH
22020: LD_VAR 0 3
22024: PPUSH
22025: CALL_OW 250
22029: PUSH
22030: LD_VAR 0 3
22034: PPUSH
22035: CALL_OW 251
22039: PUSH
22040: LD_VAR 0 3
22044: PPUSH
22045: CALL_OW 254
22049: PUSH
22050: LD_VAR 0 3
22054: PPUSH
22055: CALL_OW 267
22059: PUSH
22060: LD_VAR 0 3
22064: PPUSH
22065: CALL_OW 248
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: PUSH
22078: EMPTY
22079: LIST
22080: ADD
22081: ST_TO_ADDR
// end ;
22082: GO 21746
22084: POP
22085: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
22086: LD_VAR 0 4
22090: PPUSH
22091: LD_STRING 08_GammaBase
22093: PPUSH
22094: CALL_OW 39
// end ;
22098: LD_VAR 0 2
22102: RET
