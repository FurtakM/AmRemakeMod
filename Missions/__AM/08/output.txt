// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 42
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 43
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 44
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7444 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2535 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 6215 0 0
// PrepareRussians ;
 229: CALL 6533 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8854 0 6
// PrepareCutsceneAttack ;
 312: CALL 6267 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 44
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 608
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 6951 0 2
 577: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 54
 585: PPUSH
 586: LD_INT 25
 588: PPUSH
 589: LD_INT 8
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// ComHold ( Donaldson ) ;
 599: LD_EXP 3
 603: PPUSH
 604: CALL_OW 140
// end ; if gammaCommander = 2 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 2
 615: EQUAL
 616: IFFALSE 664
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 618: LD_ADDR_EXP 2
 622: PUSH
 623: LD_STRING 04_Brown
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: CALL 6951 0 2
 633: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 634: LD_EXP 2
 638: PPUSH
 639: LD_INT 54
 641: PPUSH
 642: LD_INT 25
 644: PPUSH
 645: LD_INT 8
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 50
// ComHold ( Brown ) ;
 655: LD_EXP 2
 659: PPUSH
 660: CALL_OW 140
// end ; if gammaCommander = 3 then
 664: LD_EXP 12
 668: PUSH
 669: LD_INT 3
 671: EQUAL
 672: IFFALSE 720
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 674: LD_ADDR_EXP 13
 678: PUSH
 679: LD_STRING VanHouten
 681: PPUSH
 682: LD_INT 1
 684: PPUSH
 685: CALL 6951 0 2
 689: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 690: LD_EXP 13
 694: PPUSH
 695: LD_INT 54
 697: PPUSH
 698: LD_INT 25
 700: PPUSH
 701: LD_INT 8
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 50
// ComHold ( Houten ) ;
 711: LD_EXP 13
 715: PPUSH
 716: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 720: LD_ADDR_EXP 22
 724: PUSH
 725: LD_STRING Harisson
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL 6951 0 2
 735: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 736: LD_ADDR_EXP 23
 740: PUSH
 741: LD_STRING Powell
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 6951 0 2
 751: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 752: LD_STRING 04_Lisa
 754: PUSH
 755: EMPTY
 756: LIST
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_STRING LisaInDelta
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 30
 773: NOT
 774: AND
 775: PUSH
 776: LD_STRING 07_Lisa
 778: PUSH
 779: EMPTY
 780: LIST
 781: PPUSH
 782: CALL_OW 28
 786: NOT
 787: AND
 788: IFFALSE 824
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 790: LD_ADDR_EXP 6
 794: PUSH
 795: LD_STRING 04_Lisa
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 6951 0 2
 805: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 806: LD_ADDR_VAR 0 15
 810: PUSH
 811: LD_VAR 0 15
 815: PUSH
 816: LD_EXP 6
 820: ADD
 821: ST_TO_ADDR
// end else
 822: GO 876
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 824: LD_EXP 6
 828: NOT
 829: PUSH
 830: LD_STRING LisaIn07
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: IFFALSE 876
// begin Lisa := PrepareUnit ( 07_Lisa , true ) ;
 844: LD_ADDR_EXP 6
 848: PUSH
 849: LD_STRING 07_Lisa
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL 6951 0 2
 859: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 860: LD_ADDR_VAR 0 15
 864: PUSH
 865: LD_VAR 0 15
 869: PUSH
 870: LD_EXP 6
 874: ADD
 875: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 876: LD_STRING 04_Bobby
 878: PUSH
 879: EMPTY
 880: LIST
 881: PPUSH
 882: CALL_OW 28
 886: PUSH
 887: LD_STRING BobbyInDelta
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: NOT
 898: AND
 899: PUSH
 900: LD_STRING 07_Bobby
 902: PUSH
 903: EMPTY
 904: LIST
 905: PPUSH
 906: CALL_OW 28
 910: NOT
 911: AND
 912: IFFALSE 948
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 914: LD_ADDR_EXP 4
 918: PUSH
 919: LD_STRING 04_Bobby
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL 6951 0 2
 929: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 930: LD_ADDR_VAR 0 15
 934: PUSH
 935: LD_VAR 0 15
 939: PUSH
 940: LD_EXP 4
 944: ADD
 945: ST_TO_ADDR
// end else
 946: GO 1000
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 948: LD_EXP 4
 952: NOT
 953: PUSH
 954: LD_STRING BobbyIn07
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 30
 964: NOT
 965: AND
 966: IFFALSE 1000
// begin Bobby := PrepareUnit ( 07_Bobby , true ) ;
 968: LD_ADDR_EXP 4
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: CALL 6951 0 2
 983: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 984: LD_ADDR_VAR 0 15
 988: PUSH
 989: LD_VAR 0 15
 993: PUSH
 994: LD_EXP 4
 998: ADD
 999: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1000: LD_STRING 04_Cyrus
1002: PUSH
1003: EMPTY
1004: LIST
1005: PPUSH
1006: CALL_OW 28
1010: PUSH
1011: LD_STRING CyrusInDelta
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 30
1021: NOT
1022: AND
1023: PUSH
1024: LD_STRING 07_Cyrus
1026: PUSH
1027: EMPTY
1028: LIST
1029: PPUSH
1030: CALL_OW 28
1034: NOT
1035: AND
1036: IFFALSE 1072
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
1038: LD_ADDR_EXP 5
1042: PUSH
1043: LD_STRING 04_Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6951 0 2
1053: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1054: LD_ADDR_VAR 0 15
1058: PUSH
1059: LD_VAR 0 15
1063: PUSH
1064: LD_EXP 5
1068: ADD
1069: ST_TO_ADDR
// end else
1070: GO 1124
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1072: LD_EXP 5
1076: NOT
1077: PUSH
1078: LD_STRING CyrusIn07
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: NOT
1089: AND
1090: IFFALSE 1124
// begin Cyrus := PrepareUnit ( 07_Cyrus , true ) ;
1092: LD_ADDR_EXP 5
1096: PUSH
1097: LD_STRING 07_Cyrus
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 6951 0 2
1107: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1108: LD_ADDR_VAR 0 15
1112: PUSH
1113: LD_VAR 0 15
1117: PUSH
1118: LD_EXP 5
1122: ADD
1123: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1124: LD_STRING 04_Brown
1126: PUSH
1127: EMPTY
1128: LIST
1129: PPUSH
1130: CALL_OW 28
1134: PUSH
1135: LD_STRING BrownInDelta
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL_OW 30
1145: NOT
1146: AND
1147: PUSH
1148: LD_STRING 07_Brown
1150: PUSH
1151: EMPTY
1152: LIST
1153: PPUSH
1154: CALL_OW 28
1158: NOT
1159: AND
1160: PUSH
1161: LD_EXP 12
1165: PUSH
1166: LD_INT 2
1168: NONEQUAL
1169: AND
1170: IFFALSE 1206
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
1172: LD_ADDR_EXP 2
1176: PUSH
1177: LD_STRING 04_Brown
1179: PPUSH
1180: LD_INT 1
1182: PPUSH
1183: CALL 6951 0 2
1187: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1188: LD_ADDR_VAR 0 15
1192: PUSH
1193: LD_VAR 0 15
1197: PUSH
1198: LD_EXP 2
1202: ADD
1203: ST_TO_ADDR
// end else
1204: GO 1268
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1206: LD_EXP 2
1210: NOT
1211: PUSH
1212: LD_STRING BrownIn07
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 30
1222: NOT
1223: AND
1224: PUSH
1225: LD_EXP 12
1229: PUSH
1230: LD_INT 2
1232: NONEQUAL
1233: AND
1234: IFFALSE 1268
// begin Brown := PrepareUnit ( 07_Brown , true ) ;
1236: LD_ADDR_EXP 2
1240: PUSH
1241: LD_STRING 07_Brown
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 6951 0 2
1251: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1252: LD_ADDR_VAR 0 15
1256: PUSH
1257: LD_VAR 0 15
1261: PUSH
1262: LD_EXP 2
1266: ADD
1267: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1268: LD_STRING 04_Donaldson
1270: PUSH
1271: EMPTY
1272: LIST
1273: PPUSH
1274: CALL_OW 28
1278: PUSH
1279: LD_STRING DonaldsonInDelta
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 30
1289: NOT
1290: AND
1291: PUSH
1292: LD_STRING 07_Donaldson
1294: PUSH
1295: EMPTY
1296: LIST
1297: PPUSH
1298: CALL_OW 28
1302: NOT
1303: AND
1304: PUSH
1305: LD_EXP 12
1309: PUSH
1310: LD_INT 1
1312: NONEQUAL
1313: AND
1314: IFFALSE 1350
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1316: LD_ADDR_EXP 3
1320: PUSH
1321: LD_STRING 04_Donaldson
1323: PPUSH
1324: LD_INT 1
1326: PPUSH
1327: CALL 6951 0 2
1331: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1332: LD_ADDR_VAR 0 15
1336: PUSH
1337: LD_VAR 0 15
1341: PUSH
1342: LD_EXP 3
1346: ADD
1347: ST_TO_ADDR
// end else
1348: GO 1412
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1350: LD_EXP 3
1354: NOT
1355: PUSH
1356: LD_STRING DonaldsonIn07
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 30
1366: NOT
1367: AND
1368: PUSH
1369: LD_EXP 12
1373: PUSH
1374: LD_INT 1
1376: NONEQUAL
1377: AND
1378: IFFALSE 1412
// begin Donaldson := PrepareUnit ( 07_Donaldson , true ) ;
1380: LD_ADDR_EXP 3
1384: PUSH
1385: LD_STRING 07_Donaldson
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: CALL 6951 0 2
1395: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1396: LD_ADDR_VAR 0 15
1400: PUSH
1401: LD_VAR 0 15
1405: PUSH
1406: LD_EXP 3
1410: ADD
1411: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1412: LD_STRING KhatamIn07
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 30
1422: NOT
1423: IFFALSE 1457
// begin Khatam := PrepareUnit ( 07_Khatam , true ) ;
1425: LD_ADDR_EXP 10
1429: PUSH
1430: LD_STRING 07_Khatam
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: CALL 6951 0 2
1440: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1441: LD_ADDR_VAR 0 15
1445: PUSH
1446: LD_VAR 0 15
1450: PUSH
1451: LD_EXP 10
1455: ADD
1456: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1457: LD_ADDR_EXP 11
1461: PUSH
1462: LD_STRING 07_othersGamma
1464: PPUSH
1465: CALL_OW 31
1469: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1470: LD_ADDR_VAR 0 14
1474: PUSH
1475: LD_INT 8
1477: PUSH
1478: LD_EXP 11
1482: MINUS
1483: ST_TO_ADDR
// if tmp then
1484: LD_VAR 0 14
1488: IFFALSE 1541
// for i = 1 to tmp do
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: DOUBLE
1496: LD_INT 1
1498: DEC
1499: ST_TO_ADDR
1500: LD_VAR 0 14
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1539
// begin PrepareHuman ( false , 1 , 5 ) ;
1508: LD_INT 0
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1521: LD_ADDR_EXP 11
1525: PUSH
1526: LD_EXP 11
1530: PUSH
1531: CALL_OW 44
1535: ADD
1536: ST_TO_ADDR
// end ;
1537: GO 1505
1539: POP
1540: POP
// if HexInfo ( 61 , 29 ) = 0 then
1541: LD_INT 61
1543: PPUSH
1544: LD_INT 29
1546: PPUSH
1547: CALL_OW 428
1551: PUSH
1552: LD_INT 0
1554: EQUAL
1555: IFFALSE 1586
// begin bc_type := b_barracks ;
1557: LD_ADDR_OWVAR 42
1561: PUSH
1562: LD_INT 5
1564: ST_TO_ADDR
// bc_level := 6 ;
1565: LD_ADDR_OWVAR 43
1569: PUSH
1570: LD_INT 6
1572: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1573: LD_INT 61
1575: PPUSH
1576: LD_INT 29
1578: PPUSH
1579: LD_INT 5
1581: PPUSH
1582: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1586: LD_ADDR_VAR 0 13
1590: PUSH
1591: LD_INT 22
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 30
1603: PUSH
1604: LD_INT 31
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// for i in bun do
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: LD_VAR 0 13
1629: PUSH
1630: FOR_IN
1631: IFFALSE 1763
// begin x := GetX ( i ) ;
1633: LD_ADDR_VAR 0 3
1637: PUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 250
1647: ST_TO_ADDR
// y := GetY ( i ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_VAR 0 2
1657: PPUSH
1658: CALL_OW 251
1662: ST_TO_ADDR
// d := GetDir ( i ) ;
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 2
1672: PPUSH
1673: CALL_OW 254
1677: ST_TO_ADDR
// RemoveUnit ( i ) ;
1678: LD_VAR 0 2
1682: PPUSH
1683: CALL_OW 64
// bc_type := b_bunker ;
1687: LD_ADDR_OWVAR 42
1691: PUSH
1692: LD_INT 32
1694: ST_TO_ADDR
// bc_level := 6 ;
1695: LD_ADDR_OWVAR 43
1699: PUSH
1700: LD_INT 6
1702: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1703: LD_ADDR_VAR 0 6
1707: PUSH
1708: LD_VAR 0 3
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_VAR 0 5
1722: PPUSH
1723: CALL_OW 47
1727: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1728: LD_VAR 0 6
1732: PPUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 4
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_VAR 0 2
1747: PUSH
1748: LD_INT 2
1750: MOD
1751: PUSH
1752: LD_INT 1
1754: PLUS
1755: ARRAY
1756: PPUSH
1757: CALL_OW 431
// end ;
1761: GO 1630
1763: POP
1764: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1765: LD_ADDR_VAR 0 9
1769: PUSH
1770: LD_INT 22
1772: PUSH
1773: LD_INT 1
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 30
1782: PUSH
1783: LD_INT 5
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PPUSH
1794: CALL_OW 69
1798: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1799: LD_ADDR_VAR 0 8
1803: PUSH
1804: LD_INT 22
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 2
1816: PUSH
1817: LD_INT 30
1819: PUSH
1820: LD_INT 6
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 30
1829: PUSH
1830: LD_INT 7
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 30
1839: PUSH
1840: LD_INT 8
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PPUSH
1857: CALL_OW 69
1861: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1862: LD_ADDR_VAR 0 7
1866: PUSH
1867: LD_INT 22
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 30
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 22
1903: PUSH
1904: LD_INT 1
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 30
1913: PUSH
1914: LD_INT 36
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PPUSH
1925: CALL_OW 69
1929: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1930: LD_ADDR_VAR 0 13
1934: PUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 2
1947: PUSH
1948: LD_INT 30
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 30
1960: PUSH
1961: LD_INT 32
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 69
1981: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_EXP 11
1991: PUSH
1992: LD_VAR 0 15
1996: ADD
1997: PUSH
1998: FOR_IN
1999: IFFALSE 2420
// begin placed := false ;
2001: LD_ADDR_VAR 0 11
2005: PUSH
2006: LD_INT 0
2008: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2009: LD_VAR 0 2
2013: PPUSH
2014: CALL_OW 257
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2147
// begin if UnitFilter ( bun , [ f_empty ] ) then
2024: LD_VAR 0 13
2028: PPUSH
2029: LD_INT 58
2031: PUSH
2032: EMPTY
2033: LIST
2034: PPUSH
2035: CALL_OW 72
2039: IFFALSE 2078
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_VAR 0 13
2050: PPUSH
2051: LD_INT 58
2053: PUSH
2054: EMPTY
2055: LIST
2056: PPUSH
2057: CALL_OW 72
2061: PUSH
2062: LD_INT 1
2064: ARRAY
2065: PPUSH
2066: CALL_OW 52
// placed := true ;
2070: LD_ADDR_VAR 0 11
2074: PUSH
2075: LD_INT 1
2077: ST_TO_ADDR
// end ; if arm and not placed then
2078: LD_VAR 0 9
2082: PUSH
2083: LD_VAR 0 11
2087: NOT
2088: AND
2089: IFFALSE 2147
// begin for j in arm do
2091: LD_ADDR_VAR 0 10
2095: PUSH
2096: LD_VAR 0 9
2100: PUSH
2101: FOR_IN
2102: IFFALSE 2145
// if UnitsInside ( j ) < 6 then
2104: LD_VAR 0 10
2108: PPUSH
2109: CALL_OW 313
2113: PUSH
2114: LD_INT 6
2116: LESS
2117: IFFALSE 2143
// begin PlaceHumanInUnit ( i , j ) ;
2119: LD_VAR 0 2
2123: PPUSH
2124: LD_VAR 0 10
2128: PPUSH
2129: CALL_OW 52
// placed := true ;
2133: LD_ADDR_VAR 0 11
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// break ;
2141: GO 2145
// end ;
2143: GO 2101
2145: POP
2146: POP
// end ; end ; if GetClass ( i ) = 2 then
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 257
2156: PUSH
2157: LD_INT 2
2159: EQUAL
2160: IFFALSE 2193
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 52
2169: PPUSH
2170: LD_INT 20
2172: PPUSH
2173: LD_INT 6
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
// placed := true ;
2183: LD_ADDR_VAR 0 11
2187: PUSH
2188: LD_INT 1
2190: ST_TO_ADDR
// continue ;
2191: GO 1998
// end ; if GetClass ( i ) = 3 then
2193: LD_VAR 0 2
2197: PPUSH
2198: CALL_OW 257
2202: PUSH
2203: LD_INT 3
2205: EQUAL
2206: IFFALSE 2310
// if fac then
2208: LD_VAR 0 7
2212: IFFALSE 2310
// begin if ct then
2214: LD_VAR 0 12
2218: IFFALSE 2246
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 12
2229: PUSH
2230: LD_INT 1
2232: ARRAY
2233: PPUSH
2234: CALL_OW 52
// placed := true ;
2238: LD_ADDR_VAR 0 11
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// end ; if placed then
2246: LD_VAR 0 11
2250: IFFALSE 2254
// continue ;
2252: GO 1998
// for j in fac do
2254: LD_ADDR_VAR 0 10
2258: PUSH
2259: LD_VAR 0 7
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2308
// if UnitsInside ( j ) < 6 then
2267: LD_VAR 0 10
2271: PPUSH
2272: CALL_OW 313
2276: PUSH
2277: LD_INT 6
2279: LESS
2280: IFFALSE 2306
// begin PlaceHumanInUnit ( i , j ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 10
2291: PPUSH
2292: CALL_OW 52
// placed := true ;
2296: LD_ADDR_VAR 0 11
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// break ;
2304: GO 2308
// end ;
2306: GO 2264
2308: POP
2309: POP
// end ; if GetClass ( i ) = 4 then
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL_OW 257
2319: PUSH
2320: LD_INT 4
2322: EQUAL
2323: IFFALSE 2387
// if lab then
2325: LD_VAR 0 8
2329: IFFALSE 2387
// begin for j in lab do
2331: LD_ADDR_VAR 0 10
2335: PUSH
2336: LD_VAR 0 8
2340: PUSH
2341: FOR_IN
2342: IFFALSE 2385
// if UnitsInside ( j ) < 6 then
2344: LD_VAR 0 10
2348: PPUSH
2349: CALL_OW 313
2353: PUSH
2354: LD_INT 6
2356: LESS
2357: IFFALSE 2383
// begin PlaceHumanInUnit ( i , j ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 10
2368: PPUSH
2369: CALL_OW 52
// placed := true ;
2373: LD_ADDR_VAR 0 11
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// break ;
2381: GO 2385
// end ;
2383: GO 2341
2385: POP
2386: POP
// end ; if not placed then
2387: LD_VAR 0 11
2391: NOT
2392: IFFALSE 2418
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2394: LD_VAR 0 2
2398: PPUSH
2399: LD_INT 5
2401: PPUSH
2402: LD_INT 0
2404: PPUSH
2405: CALL_OW 49
// ComHold ( i ) ;
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL_OW 140
// end ; end ;
2418: GO 1998
2420: POP
2421: POP
// if ct then
2422: LD_VAR 0 12
2426: IFFALSE 2530
// if UnitsInside ( ct [ 1 ] ) then
2428: LD_VAR 0 12
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 313
2441: IFFALSE 2530
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: LD_INT 22
2450: PUSH
2451: LD_INT 1
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 33
2460: PUSH
2461: LD_INT 2
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 69
2476: PUSH
2477: FOR_IN
2478: IFFALSE 2528
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_VAR 0 12
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 313
2498: PUSH
2499: LD_INT 1
2501: PPUSH
2502: LD_VAR 0 12
2506: PUSH
2507: LD_INT 1
2509: ARRAY
2510: PPUSH
2511: CALL_OW 313
2515: PPUSH
2516: CALL_OW 12
2520: ARRAY
2521: PPUSH
2522: CALL_OW 135
2526: GO 2477
2528: POP
2529: POP
// end ; end ;
2530: LD_VAR 0 1
2534: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2543: LD_INT 71
2545: PPUSH
2546: LD_INT 5
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2556: LD_ADDR_VAR 0 2
2560: PUSH
2561: LD_STRING GammaBase
2563: PPUSH
2564: EMPTY
2565: PPUSH
2566: CALL_OW 30
2570: ST_TO_ADDR
// if not blist then
2571: LD_VAR 0 2
2575: NOT
2576: IFFALSE 2616
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2578: LD_ADDR_VAR 0 2
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 52
2588: PUSH
2589: LD_INT 12
2591: PUSH
2592: LD_INT 3
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 0
2600: PUSH
2601: LD_INT 0
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: EMPTY
2614: LIST
2615: ST_TO_ADDR
// uc_side := 1 ;
2616: LD_ADDR_OWVAR 20
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// uc_nation := 1 ;
2624: LD_ADDR_OWVAR 21
2628: PUSH
2629: LD_INT 1
2631: ST_TO_ADDR
// for i in blist do
2632: LD_ADDR_VAR 0 3
2636: PUSH
2637: LD_VAR 0 2
2641: PUSH
2642: FOR_IN
2643: IFFALSE 2982
// begin bc_type := i [ 1 ] ;
2645: LD_ADDR_OWVAR 42
2649: PUSH
2650: LD_VAR 0 3
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2659: LD_ADDR_OWVAR 43
2663: PUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 5
2671: ARRAY
2672: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: PUSH
2682: LD_INT 7
2684: PUSH
2685: LD_INT 8
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: IN
2692: IFFALSE 2748
// begin bc_kind1 := i [ 7 ] ;
2694: LD_ADDR_OWVAR 44
2698: PUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 7
2706: ARRAY
2707: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2708: LD_STRING 06_remoteVehs_1
2710: PPUSH
2711: LD_INT 0
2713: PPUSH
2714: CALL_OW 30
2718: PUSH
2719: LD_INT 1
2721: EQUAL
2722: IFFALSE 2734
// begin bc_kind2 := 15 ;
2724: LD_ADDR_OWVAR 45
2728: PUSH
2729: LD_INT 15
2731: ST_TO_ADDR
// end else
2732: GO 2748
// begin bc_kind2 := i [ 8 ] ;
2734: LD_ADDR_OWVAR 45
2738: PUSH
2739: LD_VAR 0 3
2743: PUSH
2744: LD_INT 8
2746: ARRAY
2747: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
2748: LD_OWVAR 42
2752: PUSH
2753: LD_INT 0
2755: EQUAL
2756: IFFALSE 2805
// begin bc_type := b_warehouse ;
2758: LD_ADDR_OWVAR 42
2762: PUSH
2763: LD_INT 1
2765: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2766: LD_ADDR_EXP 37
2770: PUSH
2771: LD_VAR 0 3
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_VAR 0 3
2784: PUSH
2785: LD_INT 3
2787: ARRAY
2788: PPUSH
2789: LD_VAR 0 3
2793: PUSH
2794: LD_INT 4
2796: ARRAY
2797: PPUSH
2798: CALL_OW 47
2802: ST_TO_ADDR
// end else
2803: GO 2947
// begin if bc_type = 4 then
2805: LD_OWVAR 42
2809: PUSH
2810: LD_INT 4
2812: EQUAL
2813: IFFALSE 2862
// begin bc_type = 5 ;
2815: LD_ADDR_OWVAR 42
2819: PUSH
2820: LD_INT 5
2822: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2823: LD_ADDR_VAR 0 4
2827: PUSH
2828: LD_VAR 0 3
2832: PUSH
2833: LD_INT 2
2835: ARRAY
2836: PPUSH
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 3
2844: ARRAY
2845: PPUSH
2846: LD_VAR 0 3
2850: PUSH
2851: LD_INT 4
2853: ARRAY
2854: PPUSH
2855: CALL_OW 47
2859: ST_TO_ADDR
// end else
2860: GO 2947
// begin bc_type := i [ 1 ] ;
2862: LD_ADDR_OWVAR 42
2866: PUSH
2867: LD_VAR 0 3
2871: PUSH
2872: LD_INT 1
2874: ARRAY
2875: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2876: LD_STRING 06_remoteVehs_1
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 30
2886: PUSH
2887: LD_INT 1
2889: EQUAL
2890: PUSH
2891: LD_OWVAR 42
2895: PUSH
2896: LD_INT 7
2898: EQUAL
2899: AND
2900: IFFALSE 2910
// bc_type := b_lab_full ;
2902: LD_ADDR_OWVAR 42
2906: PUSH
2907: LD_INT 8
2909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2910: LD_ADDR_VAR 0 4
2914: PUSH
2915: LD_VAR 0 3
2919: PUSH
2920: LD_INT 2
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PUSH
2929: LD_INT 3
2931: ARRAY
2932: PPUSH
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 4
2940: ARRAY
2941: PPUSH
2942: CALL_OW 47
2946: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2947: LD_VAR 0 4
2951: PPUSH
2952: CALL_OW 266
2956: PUSH
2957: LD_INT 32
2959: EQUAL
2960: IFFALSE 2980
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2962: LD_VAR 0 4
2966: PPUSH
2967: LD_VAR 0 3
2971: PUSH
2972: LD_INT 7
2974: ARRAY
2975: PPUSH
2976: CALL_OW 431
// end ;
2980: GO 2642
2982: POP
2983: POP
// if not amDepot then
2984: LD_EXP 37
2988: NOT
2989: IFFALSE 3026
// begin bc_type := b_warehouse ;
2991: LD_ADDR_OWVAR 42
2995: PUSH
2996: LD_INT 1
2998: ST_TO_ADDR
// bc_level := 6 ;
2999: LD_ADDR_OWVAR 43
3003: PUSH
3004: LD_INT 6
3006: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3007: LD_ADDR_EXP 37
3011: PUSH
3012: LD_INT 52
3014: PPUSH
3015: LD_INT 12
3017: PPUSH
3018: LD_INT 3
3020: PPUSH
3021: CALL_OW 47
3025: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3026: LD_EXP 37
3030: PPUSH
3031: LD_STRING gamma
3033: PPUSH
3034: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
3038: LD_EXP 37
3042: PPUSH
3043: CALL_OW 274
3047: PPUSH
3048: LD_INT 1
3050: PPUSH
3051: LD_INT 500
3053: PUSH
3054: LD_INT 420
3056: PUSH
3057: LD_INT 350
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: PUSH
3065: LD_OWVAR 67
3069: ARRAY
3070: PPUSH
3071: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3075: LD_EXP 37
3079: PPUSH
3080: CALL_OW 274
3084: PPUSH
3085: LD_INT 2
3087: PPUSH
3088: LD_INT 200
3090: PPUSH
3091: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3095: LD_INT 22
3097: PUSH
3098: LD_INT 1
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: PUSH
3105: LD_INT 30
3107: PUSH
3108: LD_INT 3
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: PPUSH
3119: CALL_OW 69
3123: IFFALSE 3371
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3125: LD_ADDR_VAR 0 4
3129: PUSH
3130: LD_INT 22
3132: PUSH
3133: LD_INT 1
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 30
3142: PUSH
3143: LD_INT 3
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PPUSH
3154: CALL_OW 69
3158: PUSH
3159: LD_INT 1
3161: ARRAY
3162: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3163: LD_ADDR_VAR 0 6
3167: PUSH
3168: LD_VAR 0 4
3172: PPUSH
3173: CALL_OW 250
3177: PPUSH
3178: LD_VAR 0 4
3182: PPUSH
3183: CALL_OW 251
3187: PPUSH
3188: LD_VAR 0 4
3192: PPUSH
3193: CALL_OW 254
3197: PPUSH
3198: CALL 16766 0 3
3202: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3203: LD_ADDR_VAR 0 2
3207: PUSH
3208: LD_INT 19
3210: PUSH
3211: LD_INT 17
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3218: LD_STRING 06_remoteVehs_1
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 30
3228: IFFALSE 3251
// blist := Insert ( blist , 1 , b_ext_radar ) ;
3230: LD_ADDR_VAR 0 2
3234: PUSH
3235: LD_VAR 0 2
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_INT 20
3245: PPUSH
3246: CALL_OW 2
3250: ST_TO_ADDR
// for i in tmp do
3251: LD_ADDR_VAR 0 3
3255: PUSH
3256: LD_VAR 0 6
3260: PUSH
3261: FOR_IN
3262: IFFALSE 3369
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3264: LD_VAR 0 3
3268: PUSH
3269: LD_INT 1
3271: ARRAY
3272: PPUSH
3273: LD_VAR 0 3
3277: PUSH
3278: LD_INT 2
3280: ARRAY
3281: PPUSH
3282: CALL_OW 428
3286: PUSH
3287: LD_INT 0
3289: EQUAL
3290: IFFALSE 3367
// begin bc_type := blist [ 1 ] ;
3292: LD_ADDR_OWVAR 42
3296: PUSH
3297: LD_VAR 0 2
3301: PUSH
3302: LD_INT 1
3304: ARRAY
3305: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3306: LD_VAR 0 3
3310: PUSH
3311: LD_INT 1
3313: ARRAY
3314: PPUSH
3315: LD_VAR 0 3
3319: PUSH
3320: LD_INT 2
3322: ARRAY
3323: PPUSH
3324: LD_VAR 0 3
3328: PUSH
3329: LD_INT 3
3331: ARRAY
3332: PPUSH
3333: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: LD_VAR 0 2
3346: PPUSH
3347: LD_INT 1
3349: PPUSH
3350: CALL_OW 3
3354: ST_TO_ADDR
// if blist = 0 then
3355: LD_VAR 0 2
3359: PUSH
3360: LD_INT 0
3362: EQUAL
3363: IFFALSE 3367
// break ;
3365: GO 3369
// end ;
3367: GO 3261
3369: POP
3370: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
3371: LD_STRING 06_remoteVehs_1
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: CALL_OW 30
3381: PUSH
3382: LD_INT 1
3384: EQUAL
3385: IFFALSE 3844
// begin bc_type = 36 ;
3387: LD_ADDR_OWVAR 42
3391: PUSH
3392: LD_INT 36
3394: ST_TO_ADDR
// bc_level = 4 ;
3395: LD_ADDR_OWVAR 43
3399: PUSH
3400: LD_INT 4
3402: ST_TO_ADDR
// if CanBeBuilded ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 5 ] ) then
3403: LD_EXP 37
3407: PPUSH
3408: LD_INT 36
3410: PPUSH
3411: LD_INT 62
3413: PPUSH
3414: LD_INT 12
3416: PPUSH
3417: LD_INT 3
3419: PPUSH
3420: LD_INT 0
3422: PPUSH
3423: CALL 17636 0 6
3427: PUSH
3428: LD_INT 92
3430: PUSH
3431: LD_INT 62
3433: PUSH
3434: LD_INT 12
3436: PUSH
3437: LD_INT 5
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: PPUSH
3446: CALL_OW 69
3450: NOT
3451: AND
3452: IFFALSE 3469
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3454: LD_INT 62
3456: PPUSH
3457: LD_INT 12
3459: PPUSH
3460: LD_INT 3
3462: PPUSH
3463: CALL_OW 47
3467: GO 3640
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 5 ] ) then
3469: LD_EXP 37
3473: PPUSH
3474: LD_INT 36
3476: PPUSH
3477: LD_INT 37
3479: PPUSH
3480: LD_INT 18
3482: PPUSH
3483: LD_INT 2
3485: PPUSH
3486: LD_INT 0
3488: PPUSH
3489: CALL 17636 0 6
3493: PUSH
3494: LD_INT 92
3496: PUSH
3497: LD_INT 37
3499: PUSH
3500: LD_INT 18
3502: PUSH
3503: LD_INT 5
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: PPUSH
3512: CALL_OW 69
3516: NOT
3517: AND
3518: IFFALSE 3535
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3520: LD_INT 37
3522: PPUSH
3523: LD_INT 18
3525: PPUSH
3526: LD_INT 2
3528: PPUSH
3529: CALL_OW 47
3533: GO 3640
// if CanBeBuilded ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 5 ] ) then
3535: LD_EXP 37
3539: PPUSH
3540: LD_INT 36
3542: PPUSH
3543: LD_INT 66
3545: PPUSH
3546: LD_INT 14
3548: PPUSH
3549: LD_INT 4
3551: PPUSH
3552: LD_INT 0
3554: PPUSH
3555: CALL 17636 0 6
3559: PUSH
3560: LD_INT 92
3562: PUSH
3563: LD_INT 66
3565: PUSH
3566: LD_INT 14
3568: PUSH
3569: LD_INT 5
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: PPUSH
3578: CALL_OW 69
3582: NOT
3583: AND
3584: IFFALSE 3601
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3586: LD_INT 66
3588: PPUSH
3589: LD_INT 14
3591: PPUSH
3592: LD_INT 4
3594: PPUSH
3595: CALL_OW 47
3599: GO 3640
// if CanBeBuilded ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3601: LD_EXP 37
3605: PPUSH
3606: LD_INT 36
3608: PPUSH
3609: LD_INT 74
3611: PPUSH
3612: LD_INT 26
3614: PPUSH
3615: LD_INT 4
3617: PPUSH
3618: LD_INT 0
3620: PPUSH
3621: CALL 17636 0 6
3625: IFFALSE 3640
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3627: LD_INT 74
3629: PPUSH
3630: LD_INT 26
3632: PPUSH
3633: LD_INT 4
3635: PPUSH
3636: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3640: LD_INT 22
3642: PUSH
3643: LD_INT 1
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PUSH
3650: LD_INT 30
3652: PUSH
3653: LD_INT 36
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PPUSH
3664: CALL_OW 69
3668: NOT
3669: IFFALSE 3673
// exit ;
3671: GO 3844
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: DOUBLE
3679: LD_INT 1
3681: DEC
3682: ST_TO_ADDR
3683: LD_INT 3
3685: PUSH
3686: LD_INT 2
3688: PUSH
3689: LD_INT 2
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_OWVAR 67
3701: ARRAY
3702: PUSH
3703: FOR_TO
3704: IFFALSE 3842
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3706: LD_ADDR_OWVAR 37
3710: PUSH
3711: LD_INT 3
3713: PUSH
3714: LD_INT 2
3716: PUSH
3717: LD_INT 3
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 1
3726: PPUSH
3727: LD_INT 2
3729: PPUSH
3730: CALL_OW 12
3734: ARRAY
3735: PUSH
3736: LD_INT 2
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_OWVAR 67
3748: ARRAY
3749: ST_TO_ADDR
// vc_engine = 1 ;
3750: LD_ADDR_OWVAR 39
3754: PUSH
3755: LD_INT 1
3757: ST_TO_ADDR
// vc_control = 2 ;
3758: LD_ADDR_OWVAR 38
3762: PUSH
3763: LD_INT 2
3765: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3766: LD_ADDR_OWVAR 40
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: LD_INT 4
3776: PUSH
3777: LD_INT 5
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 1
3787: PPUSH
3788: LD_INT 3
3790: PPUSH
3791: CALL_OW 12
3795: ARRAY
3796: ST_TO_ADDR
// veh = CreateVehicle ;
3797: LD_ADDR_VAR 0 5
3801: PUSH
3802: CALL_OW 45
3806: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3807: LD_VAR 0 5
3811: PPUSH
3812: LD_INT 4
3814: PPUSH
3815: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3819: LD_VAR 0 5
3823: PPUSH
3824: LD_INT 56
3826: PPUSH
3827: LD_INT 17
3829: PPUSH
3830: LD_INT 9
3832: PPUSH
3833: LD_INT 0
3835: PPUSH
3836: CALL_OW 50
// end ;
3840: GO 3703
3842: POP
3843: POP
// end ; end ;
3844: LD_VAR 0 1
3848: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3849: LD_INT 0
3851: PPUSH
3852: PPUSH
3853: PPUSH
3854: PPUSH
// uc_side = 1 ;
3855: LD_ADDR_OWVAR 20
3859: PUSH
3860: LD_INT 1
3862: ST_TO_ADDR
// uc_nation = 1 ;
3863: LD_ADDR_OWVAR 21
3867: PUSH
3868: LD_INT 1
3870: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3871: LD_ADDR_EXP 14
3875: PUSH
3876: LD_STRING 06c_Denis
3878: PPUSH
3879: LD_INT 1
3881: PPUSH
3882: CALL 6951 0 2
3886: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3887: LD_EXP 14
3891: PPUSH
3892: LD_INT 4
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3902: LD_ADDR_EXP 15
3906: PUSH
3907: LD_STRING 06c_Joan
3909: PPUSH
3910: LD_INT 1
3912: PPUSH
3913: CALL 6951 0 2
3917: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3918: LD_EXP 15
3922: PPUSH
3923: LD_INT 4
3925: PPUSH
3926: LD_INT 0
3928: PPUSH
3929: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3933: LD_STRING GladstoneIn07
3935: PPUSH
3936: LD_INT 0
3938: PPUSH
3939: CALL_OW 30
3943: NOT
3944: IFFALSE 4012
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3946: LD_ADDR_EXP 8
3950: PUSH
3951: LD_STRING 06c_Gladstone
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL 6951 0 2
3961: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3962: LD_EXP 8
3966: NOT
3967: PUSH
3968: LD_STRING GladstoneStayInDelta
3970: PPUSH
3971: LD_INT 0
3973: PPUSH
3974: CALL_OW 30
3978: AND
3979: IFFALSE 3997
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3981: LD_ADDR_EXP 8
3985: PUSH
3986: LD_STRING 05_Gladstone
3988: PPUSH
3989: LD_INT 1
3991: PPUSH
3992: CALL 6951 0 2
3996: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3997: LD_EXP 8
4001: PPUSH
4002: LD_INT 4
4004: PPUSH
4005: LD_INT 0
4007: PPUSH
4008: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4012: LD_STRING LisaStayInDelta
4014: PPUSH
4015: LD_INT 0
4017: PPUSH
4018: CALL_OW 30
4022: IFFALSE 4055
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
4024: LD_ADDR_EXP 6
4028: PUSH
4029: LD_STRING 05_Lisa
4031: PPUSH
4032: LD_INT 1
4034: PPUSH
4035: CALL 6951 0 2
4039: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4040: LD_EXP 6
4044: PPUSH
4045: LD_INT 4
4047: PPUSH
4048: LD_INT 0
4050: PPUSH
4051: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4055: LD_STRING BobbyStayInDelta
4057: PPUSH
4058: LD_INT 0
4060: PPUSH
4061: CALL_OW 30
4065: IFFALSE 4098
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
4067: LD_ADDR_EXP 4
4071: PUSH
4072: LD_STRING 05_Bobby
4074: PPUSH
4075: LD_INT 1
4077: PPUSH
4078: CALL 6951 0 2
4082: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4083: LD_EXP 4
4087: PPUSH
4088: LD_INT 4
4090: PPUSH
4091: LD_INT 0
4093: PPUSH
4094: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4098: LD_STRING CyrusStayInDelta
4100: PPUSH
4101: LD_INT 0
4103: PPUSH
4104: CALL_OW 30
4108: IFFALSE 4141
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
4110: LD_ADDR_EXP 5
4114: PUSH
4115: LD_STRING 05_Cyrus
4117: PPUSH
4118: LD_INT 1
4120: PPUSH
4121: CALL 6951 0 2
4125: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4126: LD_EXP 5
4130: PPUSH
4131: LD_INT 4
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4141: LD_STRING BrownStayInDelta
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: CALL_OW 30
4151: IFFALSE 4184
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
4153: LD_ADDR_EXP 2
4157: PUSH
4158: LD_STRING 05_Brown
4160: PPUSH
4161: LD_INT 1
4163: PPUSH
4164: CALL 6951 0 2
4168: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4169: LD_EXP 2
4173: PPUSH
4174: LD_INT 4
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4184: LD_STRING DonaldsonStayInDelta
4186: PPUSH
4187: LD_INT 0
4189: PPUSH
4190: CALL_OW 30
4194: IFFALSE 4227
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
4196: LD_ADDR_EXP 3
4200: PUSH
4201: LD_STRING 05_Donaldson
4203: PPUSH
4204: LD_INT 1
4206: PPUSH
4207: CALL 6951 0 2
4211: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4212: LD_EXP 3
4216: PPUSH
4217: LD_INT 4
4219: PPUSH
4220: LD_INT 0
4222: PPUSH
4223: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4227: LD_ADDR_VAR 0 4
4231: PUSH
4232: LD_STRING OthersStayInDelta
4234: PPUSH
4235: CALL_OW 31
4239: ST_TO_ADDR
// if other > 2 then
4240: LD_VAR 0 4
4244: PUSH
4245: LD_INT 2
4247: GREATER
4248: IFFALSE 4293
// begin for j = 1 to 2 do
4250: LD_ADDR_VAR 0 3
4254: PUSH
4255: DOUBLE
4256: LD_INT 1
4258: DEC
4259: ST_TO_ADDR
4260: LD_INT 2
4262: PUSH
4263: FOR_TO
4264: IFFALSE 4289
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4266: LD_VAR 0 4
4270: PUSH
4271: LD_VAR 0 3
4275: ARRAY
4276: PPUSH
4277: LD_INT 4
4279: PPUSH
4280: LD_INT 0
4282: PPUSH
4283: CALL_OW 49
4287: GO 4263
4289: POP
4290: POP
// end else
4291: GO 4336
// begin for j = 1 to other do
4293: LD_ADDR_VAR 0 3
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_VAR 0 4
4307: PUSH
4308: FOR_TO
4309: IFFALSE 4334
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4311: LD_VAR 0 4
4315: PUSH
4316: LD_VAR 0 3
4320: ARRAY
4321: PPUSH
4322: LD_INT 4
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 49
4332: GO 4308
4334: POP
4335: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4336: LD_ADDR_VAR 0 4
4340: PUSH
4341: LD_STRING 06_other_apemans
4343: PPUSH
4344: CALL_OW 31
4348: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4349: LD_VAR 0 4
4353: PUSH
4354: LD_INT 5
4356: PUSH
4357: LD_INT 4
4359: PUSH
4360: LD_INT 3
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: LIST
4367: PUSH
4368: LD_OWVAR 67
4372: ARRAY
4373: GREATEREQUAL
4374: IFFALSE 4403
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_INT 5
4383: PUSH
4384: LD_INT 4
4386: PUSH
4387: LD_INT 3
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: LIST
4394: PUSH
4395: LD_OWVAR 67
4399: ARRAY
4400: ST_TO_ADDR
4401: GO 4413
// j := other ;
4403: LD_ADDR_VAR 0 3
4407: PUSH
4408: LD_VAR 0 4
4412: ST_TO_ADDR
// for i = 1 to j do
4413: LD_ADDR_VAR 0 2
4417: PUSH
4418: DOUBLE
4419: LD_INT 1
4421: DEC
4422: ST_TO_ADDR
4423: LD_VAR 0 3
4427: PUSH
4428: FOR_TO
4429: IFFALSE 4454
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4431: LD_VAR 0 4
4435: PUSH
4436: LD_VAR 0 2
4440: ARRAY
4441: PPUSH
4442: LD_INT 4
4444: PPUSH
4445: LD_INT 0
4447: PPUSH
4448: CALL_OW 49
4452: GO 4428
4454: POP
4455: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4456: LD_INT 4
4458: PPUSH
4459: LD_INT 22
4461: PUSH
4462: LD_INT 1
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: LD_INT 21
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PPUSH
4483: CALL_OW 70
4487: PPUSH
4488: LD_INT 53
4490: PPUSH
4491: LD_INT 19
4493: PPUSH
4494: CALL_OW 111
// firstAttack = 1 ;
4498: LD_ADDR_EXP 33
4502: PUSH
4503: LD_INT 1
4505: ST_TO_ADDR
// end ;
4506: LD_VAR 0 1
4510: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
4516: PPUSH
4517: PPUSH
4518: PPUSH
4519: PPUSH
4520: PPUSH
4521: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4522: LD_ADDR_VAR 0 8
4526: PUSH
4527: LD_STRING 07_vehicles
4529: PPUSH
4530: EMPTY
4531: PPUSH
4532: CALL_OW 30
4536: ST_TO_ADDR
// uc_side := 1 ;
4537: LD_ADDR_OWVAR 20
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// uc_nation := 1 ;
4545: LD_ADDR_OWVAR 21
4549: PUSH
4550: LD_INT 1
4552: ST_TO_ADDR
// if vehicles then
4553: LD_VAR 0 8
4557: IFFALSE 4716
// begin k := 1 ;
4559: LD_ADDR_VAR 0 3
4563: PUSH
4564: LD_INT 1
4566: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4567: LD_ADDR_VAR 0 2
4571: PUSH
4572: DOUBLE
4573: LD_INT 1
4575: DEC
4576: ST_TO_ADDR
4577: LD_VAR 0 8
4581: PUSH
4582: LD_INT 4
4584: DIV
4585: PUSH
4586: FOR_TO
4587: IFFALSE 4714
// begin vc_chassis = vehicles [ k ] ;
4589: LD_ADDR_OWVAR 37
4593: PUSH
4594: LD_VAR 0 8
4598: PUSH
4599: LD_VAR 0 3
4603: ARRAY
4604: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4605: LD_ADDR_OWVAR 39
4609: PUSH
4610: LD_VAR 0 8
4614: PUSH
4615: LD_VAR 0 3
4619: PUSH
4620: LD_INT 1
4622: PLUS
4623: ARRAY
4624: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4625: LD_ADDR_OWVAR 38
4629: PUSH
4630: LD_VAR 0 8
4634: PUSH
4635: LD_VAR 0 3
4639: PUSH
4640: LD_INT 2
4642: PLUS
4643: ARRAY
4644: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4645: LD_ADDR_OWVAR 40
4649: PUSH
4650: LD_VAR 0 8
4654: PUSH
4655: LD_VAR 0 3
4659: PUSH
4660: LD_INT 3
4662: PLUS
4663: ARRAY
4664: ST_TO_ADDR
// k := k + 4 ;
4665: LD_ADDR_VAR 0 3
4669: PUSH
4670: LD_VAR 0 3
4674: PUSH
4675: LD_INT 4
4677: PLUS
4678: ST_TO_ADDR
// veh := CreateVehicle ;
4679: LD_ADDR_VAR 0 9
4683: PUSH
4684: CALL_OW 45
4688: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4689: LD_ADDR_VAR 0 7
4693: PUSH
4694: LD_VAR 0 7
4698: PPUSH
4699: LD_INT 1
4701: PPUSH
4702: LD_VAR 0 9
4706: PPUSH
4707: CALL_OW 2
4711: ST_TO_ADDR
// end ;
4712: GO 4586
4714: POP
4715: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4716: LD_ADDR_EXP 1
4720: PUSH
4721: LD_EXP 43
4725: PUSH
4726: LD_STRING JMM
4728: STR
4729: PPUSH
4730: LD_INT 1
4732: PPUSH
4733: CALL 6951 0 2
4737: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4738: LD_EXP 12
4742: PUSH
4743: LD_INT 1
4745: EQUAL
4746: PUSH
4747: LD_EXP 12
4751: PUSH
4752: LD_INT 3
4754: EQUAL
4755: OR
4756: PUSH
4757: LD_EXP 2
4761: NOT
4762: AND
4763: IFFALSE 4816
// begin Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4765: LD_ADDR_EXP 2
4769: PUSH
4770: LD_EXP 43
4774: PUSH
4775: LD_STRING Brown
4777: STR
4778: PPUSH
4779: LD_INT 1
4781: PPUSH
4782: CALL 6951 0 2
4786: ST_TO_ADDR
// if Brown then
4787: LD_EXP 2
4791: IFFALSE 4816
// tmp := Insert ( tmp , 1 , Brown ) ;
4793: LD_ADDR_VAR 0 6
4797: PUSH
4798: LD_VAR 0 6
4802: PPUSH
4803: LD_INT 1
4805: PPUSH
4806: LD_EXP 2
4810: PPUSH
4811: CALL_OW 2
4815: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4816: LD_EXP 12
4820: PUSH
4821: LD_INT 2
4823: EQUAL
4824: PUSH
4825: LD_EXP 12
4829: PUSH
4830: LD_INT 3
4832: EQUAL
4833: OR
4834: PUSH
4835: LD_EXP 3
4839: NOT
4840: AND
4841: IFFALSE 4894
// begin Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4843: LD_ADDR_EXP 3
4847: PUSH
4848: LD_EXP 43
4852: PUSH
4853: LD_STRING Donaldson
4855: STR
4856: PPUSH
4857: LD_INT 1
4859: PPUSH
4860: CALL 6951 0 2
4864: ST_TO_ADDR
// if Donaldson then
4865: LD_EXP 3
4869: IFFALSE 4894
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4871: LD_ADDR_VAR 0 6
4875: PUSH
4876: LD_VAR 0 6
4880: PPUSH
4881: LD_INT 1
4883: PPUSH
4884: LD_EXP 3
4888: PPUSH
4889: CALL_OW 2
4893: ST_TO_ADDR
// end ; if not Bobby then
4894: LD_EXP 4
4898: NOT
4899: IFFALSE 4952
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4901: LD_ADDR_EXP 4
4905: PUSH
4906: LD_EXP 43
4910: PUSH
4911: LD_STRING Bobby
4913: STR
4914: PPUSH
4915: LD_INT 1
4917: PPUSH
4918: CALL 6951 0 2
4922: ST_TO_ADDR
// if Bobby then
4923: LD_EXP 4
4927: IFFALSE 4952
// tmp := Insert ( tmp , 1 , Bobby ) ;
4929: LD_ADDR_VAR 0 6
4933: PUSH
4934: LD_VAR 0 6
4938: PPUSH
4939: LD_INT 1
4941: PPUSH
4942: LD_EXP 4
4946: PPUSH
4947: CALL_OW 2
4951: ST_TO_ADDR
// end ; if not Cyrus then
4952: LD_EXP 5
4956: NOT
4957: IFFALSE 5010
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4959: LD_ADDR_EXP 5
4963: PUSH
4964: LD_EXP 43
4968: PUSH
4969: LD_STRING Cyrus
4971: STR
4972: PPUSH
4973: LD_INT 1
4975: PPUSH
4976: CALL 6951 0 2
4980: ST_TO_ADDR
// if Cyrus then
4981: LD_EXP 5
4985: IFFALSE 5010
// tmp := Insert ( tmp , 1 , Cyrus ) ;
4987: LD_ADDR_VAR 0 6
4991: PUSH
4992: LD_VAR 0 6
4996: PPUSH
4997: LD_INT 1
4999: PPUSH
5000: LD_EXP 5
5004: PPUSH
5005: CALL_OW 2
5009: ST_TO_ADDR
// end ; if not Lisa then
5010: LD_EXP 6
5014: NOT
5015: IFFALSE 5068
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
5017: LD_ADDR_EXP 6
5021: PUSH
5022: LD_EXP 43
5026: PUSH
5027: LD_STRING Lisa
5029: STR
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: CALL 6951 0 2
5038: ST_TO_ADDR
// if Lisa then
5039: LD_EXP 6
5043: IFFALSE 5068
// tmp := Insert ( tmp , 1 , Lisa ) ;
5045: LD_ADDR_VAR 0 6
5049: PUSH
5050: LD_VAR 0 6
5054: PPUSH
5055: LD_INT 1
5057: PPUSH
5058: LD_EXP 6
5062: PPUSH
5063: CALL_OW 2
5067: ST_TO_ADDR
// end ; if not Frank then
5068: LD_EXP 7
5072: NOT
5073: IFFALSE 5126
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
5075: LD_ADDR_EXP 7
5079: PUSH
5080: LD_EXP 43
5084: PUSH
5085: LD_STRING Frank
5087: STR
5088: PPUSH
5089: LD_INT 1
5091: PPUSH
5092: CALL 6951 0 2
5096: ST_TO_ADDR
// if Frank then
5097: LD_EXP 7
5101: IFFALSE 5126
// tmp := Insert ( tmp , 1 , Frank ) ;
5103: LD_ADDR_VAR 0 6
5107: PUSH
5108: LD_VAR 0 6
5112: PPUSH
5113: LD_INT 1
5115: PPUSH
5116: LD_EXP 7
5120: PPUSH
5121: CALL_OW 2
5125: ST_TO_ADDR
// end ; if not Kikuchi then
5126: LD_EXP 9
5130: NOT
5131: IFFALSE 5184
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
5133: LD_ADDR_EXP 9
5137: PUSH
5138: LD_EXP 43
5142: PUSH
5143: LD_STRING Kikuchi
5145: STR
5146: PPUSH
5147: LD_INT 1
5149: PPUSH
5150: CALL 6951 0 2
5154: ST_TO_ADDR
// if Kikuchi then
5155: LD_EXP 9
5159: IFFALSE 5184
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5161: LD_ADDR_VAR 0 6
5165: PUSH
5166: LD_VAR 0 6
5170: PPUSH
5171: LD_INT 1
5173: PPUSH
5174: LD_EXP 9
5178: PPUSH
5179: CALL_OW 2
5183: ST_TO_ADDR
// end ; if not Gladstone then
5184: LD_EXP 8
5188: NOT
5189: IFFALSE 5242
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5191: LD_ADDR_EXP 8
5195: PUSH
5196: LD_EXP 43
5200: PUSH
5201: LD_STRING Gladstone
5203: STR
5204: PPUSH
5205: LD_INT 1
5207: PPUSH
5208: CALL 6951 0 2
5212: ST_TO_ADDR
// if Gladstone then
5213: LD_EXP 8
5217: IFFALSE 5242
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_VAR 0 6
5228: PPUSH
5229: LD_INT 1
5231: PPUSH
5232: LD_EXP 8
5236: PPUSH
5237: CALL_OW 2
5241: ST_TO_ADDR
// end ; if not Khatam then
5242: LD_EXP 10
5246: NOT
5247: IFFALSE 5300
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5249: LD_ADDR_EXP 10
5253: PUSH
5254: LD_EXP 43
5258: PUSH
5259: LD_STRING Khatam
5261: STR
5262: PPUSH
5263: LD_INT 1
5265: PPUSH
5266: CALL 6951 0 2
5270: ST_TO_ADDR
// if Khatam then
5271: LD_EXP 10
5275: IFFALSE 5300
// tmp := Insert ( tmp , 1 , Khatam ) ;
5277: LD_ADDR_VAR 0 6
5281: PUSH
5282: LD_VAR 0 6
5286: PPUSH
5287: LD_INT 1
5289: PPUSH
5290: LD_EXP 10
5294: PPUSH
5295: CALL_OW 2
5299: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5300: LD_ADDR_VAR 0 5
5304: PUSH
5305: LD_STRING 07c_others
5307: PPUSH
5308: CALL_OW 31
5312: ST_TO_ADDR
// if others then
5313: LD_VAR 0 5
5317: IFFALSE 5405
// for i in others do
5319: LD_ADDR_VAR 0 2
5323: PUSH
5324: LD_VAR 0 5
5328: PUSH
5329: FOR_IN
5330: IFFALSE 5403
// if GetClass ( i ) = 3 then
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 257
5341: PUSH
5342: LD_INT 3
5344: EQUAL
5345: IFFALSE 5372
// tmp := Insert ( tmp , 1 , i ) else
5347: LD_ADDR_VAR 0 6
5351: PUSH
5352: LD_VAR 0 6
5356: PPUSH
5357: LD_INT 1
5359: PPUSH
5360: LD_VAR 0 2
5364: PPUSH
5365: CALL_OW 2
5369: ST_TO_ADDR
5370: GO 5401
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5372: LD_ADDR_VAR 0 6
5376: PUSH
5377: LD_VAR 0 6
5381: PPUSH
5382: LD_VAR 0 6
5386: PUSH
5387: LD_INT 1
5389: PLUS
5390: PPUSH
5391: LD_VAR 0 2
5395: PPUSH
5396: CALL_OW 2
5400: ST_TO_ADDR
5401: GO 5329
5403: POP
5404: POP
// wait ( 0 0$1 ) ;
5405: LD_INT 35
5407: PPUSH
5408: CALL_OW 67
// for i in tmp do
5412: LD_ADDR_VAR 0 2
5416: PUSH
5417: LD_VAR 0 6
5421: PUSH
5422: FOR_IN
5423: IFFALSE 5555
// begin SetDir ( i , 3 ) ;
5425: LD_VAR 0 2
5429: PPUSH
5430: LD_INT 3
5432: PPUSH
5433: CALL_OW 233
// if tmp_vehs then
5437: LD_VAR 0 7
5441: IFFALSE 5516
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5443: LD_VAR 0 7
5447: PUSH
5448: LD_INT 1
5450: ARRAY
5451: PPUSH
5452: LD_INT 3
5454: PPUSH
5455: CALL_OW 233
// PlaceUnitArea ( tmp_vehs [ 1 ] , GammaSupport , false ) ;
5459: LD_VAR 0 7
5463: PUSH
5464: LD_INT 1
5466: ARRAY
5467: PPUSH
5468: LD_INT 4
5470: PPUSH
5471: LD_INT 0
5473: PPUSH
5474: CALL_OW 49
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5478: LD_VAR 0 2
5482: PPUSH
5483: LD_VAR 0 7
5487: PUSH
5488: LD_INT 1
5490: ARRAY
5491: PPUSH
5492: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5496: LD_ADDR_VAR 0 7
5500: PUSH
5501: LD_VAR 0 7
5505: PPUSH
5506: LD_INT 1
5508: PPUSH
5509: CALL_OW 3
5513: ST_TO_ADDR
// end else
5514: GO 5531
// PlaceUnitArea ( i , GammaSupport , false ) ;
5516: LD_VAR 0 2
5520: PPUSH
5521: LD_INT 4
5523: PPUSH
5524: LD_INT 0
5526: PPUSH
5527: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5531: LD_VAR 0 2
5535: PPUSH
5536: LD_INT 77
5538: PPUSH
5539: LD_INT 16
5541: PPUSH
5542: CALL_OW 111
// wait ( 0 0$2 ) ;
5546: LD_INT 70
5548: PPUSH
5549: CALL_OW 67
// end ;
5553: GO 5422
5555: POP
5556: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5557: LD_EXP 1
5561: PPUSH
5562: LD_INT 4
5564: PPUSH
5565: LD_INT 0
5567: PPUSH
5568: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5572: LD_EXP 1
5576: PPUSH
5577: LD_INT 77
5579: PPUSH
5580: LD_INT 16
5582: PPUSH
5583: CALL_OW 111
// end ;
5587: LD_VAR 0 1
5591: RET
// export function PrepareSikorsky ; begin
5592: LD_INT 0
5594: PPUSH
// uc_side = 4 ;
5595: LD_ADDR_OWVAR 20
5599: PUSH
5600: LD_INT 4
5602: ST_TO_ADDR
// uc_nation = 1 ;
5603: LD_ADDR_OWVAR 21
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5611: LD_ADDR_EXP 16
5615: PUSH
5616: LD_STRING Sikorski
5618: PPUSH
5619: LD_INT 0
5621: PPUSH
5622: CALL 6951 0 2
5626: ST_TO_ADDR
// vc_engine = 1 ;
5627: LD_ADDR_OWVAR 39
5631: PUSH
5632: LD_INT 1
5634: ST_TO_ADDR
// vc_control = 1 ;
5635: LD_ADDR_OWVAR 38
5639: PUSH
5640: LD_INT 1
5642: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5643: LD_ADDR_OWVAR 40
5647: PUSH
5648: LD_INT 5
5650: PUSH
5651: LD_INT 3
5653: PUSH
5654: LD_INT 4
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: LIST
5661: PUSH
5662: LD_OWVAR 67
5666: ARRAY
5667: ST_TO_ADDR
// vc_chassis = 4 ;
5668: LD_ADDR_OWVAR 37
5672: PUSH
5673: LD_INT 4
5675: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5676: LD_ADDR_EXP 17
5680: PUSH
5681: CALL_OW 45
5685: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
5686: LD_EXP 17
5690: PPUSH
5691: LD_INT 9
5693: PPUSH
5694: LD_INT 0
5696: PPUSH
5697: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5701: LD_EXP 16
5705: PPUSH
5706: LD_EXP 17
5710: PPUSH
5711: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5715: LD_EXP 17
5719: PPUSH
5720: LD_INT 5
5722: PPUSH
5723: CALL_OW 113
// end ;
5727: LD_VAR 0 1
5731: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5732: LD_INT 0
5734: PPUSH
5735: PPUSH
5736: PPUSH
5737: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5738: LD_ADDR_VAR 0 2
5742: PUSH
5743: DOUBLE
5744: LD_INT 1
5746: DEC
5747: ST_TO_ADDR
5748: LD_INT 8
5750: PUSH
5751: LD_INT 7
5753: PUSH
5754: LD_INT 7
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: PUSH
5762: LD_OWVAR 67
5766: ARRAY
5767: PUSH
5768: FOR_TO
5769: IFFALSE 5866
// begin uc_side = 4 ;
5771: LD_ADDR_OWVAR 20
5775: PUSH
5776: LD_INT 4
5778: ST_TO_ADDR
// uc_nation = 1 ;
5779: LD_ADDR_OWVAR 21
5783: PUSH
5784: LD_INT 1
5786: ST_TO_ADDR
// hc_name =  ;
5787: LD_ADDR_OWVAR 26
5791: PUSH
5792: LD_STRING 
5794: ST_TO_ADDR
// hc_gallery =  ;
5795: LD_ADDR_OWVAR 33
5799: PUSH
5800: LD_STRING 
5802: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5803: LD_INT 0
5805: PPUSH
5806: LD_INT 1
5808: PPUSH
5809: LD_INT 5
5811: PPUSH
5812: LD_INT 8
5814: PPUSH
5815: CALL_OW 12
5819: PPUSH
5820: CALL_OW 380
// un = CreateHuman ;
5824: LD_ADDR_VAR 0 3
5828: PUSH
5829: CALL_OW 44
5833: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5834: LD_VAR 0 3
5838: PPUSH
5839: LD_INT 9
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5849: LD_VAR 0 3
5853: PPUSH
5854: LD_INT 53
5856: PPUSH
5857: LD_INT 23
5859: PPUSH
5860: CALL_OW 111
// end ;
5864: GO 5768
5866: POP
5867: POP
// for i = 1 to 3 do
5868: LD_ADDR_VAR 0 2
5872: PUSH
5873: DOUBLE
5874: LD_INT 1
5876: DEC
5877: ST_TO_ADDR
5878: LD_INT 3
5880: PUSH
5881: FOR_TO
5882: IFFALSE 5979
// begin uc_side = 4 ;
5884: LD_ADDR_OWVAR 20
5888: PUSH
5889: LD_INT 4
5891: ST_TO_ADDR
// uc_nation = 1 ;
5892: LD_ADDR_OWVAR 21
5896: PUSH
5897: LD_INT 1
5899: ST_TO_ADDR
// hc_name =  ;
5900: LD_ADDR_OWVAR 26
5904: PUSH
5905: LD_STRING 
5907: ST_TO_ADDR
// hc_gallery =  ;
5908: LD_ADDR_OWVAR 33
5912: PUSH
5913: LD_STRING 
5915: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5916: LD_INT 0
5918: PPUSH
5919: LD_INT 4
5921: PPUSH
5922: LD_INT 5
5924: PPUSH
5925: LD_INT 8
5927: PPUSH
5928: CALL_OW 12
5932: PPUSH
5933: CALL_OW 380
// un = CreateHuman ;
5937: LD_ADDR_VAR 0 3
5941: PUSH
5942: CALL_OW 44
5946: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5947: LD_VAR 0 3
5951: PPUSH
5952: LD_INT 9
5954: PPUSH
5955: LD_INT 0
5957: PPUSH
5958: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5962: LD_VAR 0 3
5966: PPUSH
5967: LD_INT 53
5969: PPUSH
5970: LD_INT 23
5972: PPUSH
5973: CALL_OW 111
// end ;
5977: GO 5881
5979: POP
5980: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5981: LD_ADDR_VAR 0 2
5985: PUSH
5986: DOUBLE
5987: LD_INT 1
5989: DEC
5990: ST_TO_ADDR
5991: LD_INT 9
5993: PUSH
5994: LD_INT 8
5996: PUSH
5997: LD_INT 7
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: PUSH
6005: LD_OWVAR 67
6009: ARRAY
6010: PUSH
6011: FOR_TO
6012: IFFALSE 6208
// begin uc_side = 4 ;
6014: LD_ADDR_OWVAR 20
6018: PUSH
6019: LD_INT 4
6021: ST_TO_ADDR
// uc_nation = 1 ;
6022: LD_ADDR_OWVAR 21
6026: PUSH
6027: LD_INT 1
6029: ST_TO_ADDR
// vc_engine = 1 ;
6030: LD_ADDR_OWVAR 39
6034: PUSH
6035: LD_INT 1
6037: ST_TO_ADDR
// vc_control = 1 ;
6038: LD_ADDR_OWVAR 38
6042: PUSH
6043: LD_INT 1
6045: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
6046: LD_ADDR_OWVAR 40
6050: PUSH
6051: LD_INT 3
6053: PUSH
6054: LD_INT 4
6056: PUSH
6057: LD_INT 5
6059: PUSH
6060: LD_INT 6
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 1
6071: PPUSH
6072: LD_INT 4
6074: PPUSH
6075: CALL_OW 12
6079: ARRAY
6080: ST_TO_ADDR
// vc_chassis = 4 ;
6081: LD_ADDR_OWVAR 37
6085: PUSH
6086: LD_INT 4
6088: ST_TO_ADDR
// veh = CreateVehicle ;
6089: LD_ADDR_VAR 0 4
6093: PUSH
6094: CALL_OW 45
6098: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6099: LD_VAR 0 4
6103: PPUSH
6104: LD_INT 9
6106: PPUSH
6107: LD_INT 0
6109: PPUSH
6110: CALL_OW 49
// hc_name =  ;
6114: LD_ADDR_OWVAR 26
6118: PUSH
6119: LD_STRING 
6121: ST_TO_ADDR
// hc_gallery =  ;
6122: LD_ADDR_OWVAR 33
6126: PUSH
6127: LD_STRING 
6129: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6130: LD_INT 0
6132: PPUSH
6133: LD_INT 3
6135: PPUSH
6136: LD_INT 5
6138: PPUSH
6139: LD_INT 8
6141: PPUSH
6142: CALL_OW 12
6146: PPUSH
6147: CALL_OW 380
// un = CreateHuman ;
6151: LD_ADDR_VAR 0 3
6155: PUSH
6156: CALL_OW 44
6160: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6161: LD_VAR 0 3
6165: PPUSH
6166: LD_VAR 0 4
6170: PPUSH
6171: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
6175: LD_VAR 0 4
6179: PUSH
6180: LD_VAR 0 3
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PPUSH
6189: LD_INT 53
6191: PPUSH
6192: LD_INT 23
6194: PPUSH
6195: CALL_OW 111
// wait ( 0 0$5 ) ;
6199: LD_INT 175
6201: PPUSH
6202: CALL_OW 67
// end ;
6206: GO 6011
6208: POP
6209: POP
// end ; end_of_file
6210: LD_VAR 0 1
6214: RET
// export function PrepareRussianCommander ; begin
6215: LD_INT 0
6217: PPUSH
// uc_side = 3 ;
6218: LD_ADDR_OWVAR 20
6222: PUSH
6223: LD_INT 3
6225: ST_TO_ADDR
// uc_nation = 3 ;
6226: LD_ADDR_OWVAR 21
6230: PUSH
6231: LD_INT 3
6233: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6234: LD_ADDR_EXP 24
6238: PUSH
6239: LD_STRING Borodin
6241: PPUSH
6242: CALL_OW 25
6246: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6247: LD_EXP 24
6251: PPUSH
6252: LD_INT 25
6254: PPUSH
6255: LD_INT 0
6257: PPUSH
6258: CALL_OW 49
// end ;
6262: LD_VAR 0 1
6266: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6267: LD_INT 0
6269: PPUSH
6270: PPUSH
6271: PPUSH
6272: PPUSH
// for i = 1 to 10 do
6273: LD_ADDR_VAR 0 2
6277: PUSH
6278: DOUBLE
6279: LD_INT 1
6281: DEC
6282: ST_TO_ADDR
6283: LD_INT 10
6285: PUSH
6286: FOR_TO
6287: IFFALSE 6361
// begin uc_side = 6 ;
6289: LD_ADDR_OWVAR 20
6293: PUSH
6294: LD_INT 6
6296: ST_TO_ADDR
// uc_nation = 3 ;
6297: LD_ADDR_OWVAR 21
6301: PUSH
6302: LD_INT 3
6304: ST_TO_ADDR
// hc_gallery =  ;
6305: LD_ADDR_OWVAR 33
6309: PUSH
6310: LD_STRING 
6312: ST_TO_ADDR
// hc_name =  ;
6313: LD_ADDR_OWVAR 26
6317: PUSH
6318: LD_STRING 
6320: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6321: LD_INT 0
6323: PPUSH
6324: LD_INT 1
6326: PPUSH
6327: LD_INT 3
6329: PPUSH
6330: CALL_OW 380
// un = CreateHuman ;
6334: LD_ADDR_VAR 0 3
6338: PUSH
6339: CALL_OW 44
6343: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6344: LD_VAR 0 3
6348: PPUSH
6349: LD_INT 1
6351: PPUSH
6352: LD_INT 0
6354: PPUSH
6355: CALL_OW 49
// end ;
6359: GO 6286
6361: POP
6362: POP
// for i = 1 to 3 do
6363: LD_ADDR_VAR 0 2
6367: PUSH
6368: DOUBLE
6369: LD_INT 1
6371: DEC
6372: ST_TO_ADDR
6373: LD_INT 3
6375: PUSH
6376: FOR_TO
6377: IFFALSE 6526
// begin uc_side = 6 ;
6379: LD_ADDR_OWVAR 20
6383: PUSH
6384: LD_INT 6
6386: ST_TO_ADDR
// uc_nation = 3 ;
6387: LD_ADDR_OWVAR 21
6391: PUSH
6392: LD_INT 3
6394: ST_TO_ADDR
// vc_engine = 1 ;
6395: LD_ADDR_OWVAR 39
6399: PUSH
6400: LD_INT 1
6402: ST_TO_ADDR
// vc_control = 1 ;
6403: LD_ADDR_OWVAR 38
6407: PUSH
6408: LD_INT 1
6410: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6411: LD_ADDR_OWVAR 40
6415: PUSH
6416: LD_INT 43
6418: PUSH
6419: LD_INT 44
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: LD_INT 1
6428: PPUSH
6429: LD_INT 2
6431: PPUSH
6432: CALL_OW 12
6436: ARRAY
6437: ST_TO_ADDR
// vc_chassis = 22 ;
6438: LD_ADDR_OWVAR 37
6442: PUSH
6443: LD_INT 22
6445: ST_TO_ADDR
// veh = CreateVehicle ;
6446: LD_ADDR_VAR 0 4
6450: PUSH
6451: CALL_OW 45
6455: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6456: LD_VAR 0 4
6460: PPUSH
6461: LD_INT 2
6463: PPUSH
6464: LD_INT 0
6466: PPUSH
6467: CALL_OW 49
// hc_gallery =  ;
6471: LD_ADDR_OWVAR 33
6475: PUSH
6476: LD_STRING 
6478: ST_TO_ADDR
// hc_name =  ;
6479: LD_ADDR_OWVAR 26
6483: PUSH
6484: LD_STRING 
6486: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6487: LD_INT 0
6489: PPUSH
6490: LD_INT 3
6492: PPUSH
6493: LD_INT 4
6495: PPUSH
6496: CALL_OW 380
// un = CreateHuman ;
6500: LD_ADDR_VAR 0 3
6504: PUSH
6505: CALL_OW 44
6509: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6510: LD_VAR 0 3
6514: PPUSH
6515: LD_VAR 0 4
6519: PPUSH
6520: CALL_OW 52
// end ;
6524: GO 6376
6526: POP
6527: POP
// end ;
6528: LD_VAR 0 1
6532: RET
// export function PrepareRussians ; var i , un ; begin
6533: LD_INT 0
6535: PPUSH
6536: PPUSH
6537: PPUSH
// for i = 1 to 8 do
6538: LD_ADDR_VAR 0 2
6542: PUSH
6543: DOUBLE
6544: LD_INT 1
6546: DEC
6547: ST_TO_ADDR
6548: LD_INT 8
6550: PUSH
6551: FOR_TO
6552: IFFALSE 6638
// begin uc_side = 3 ;
6554: LD_ADDR_OWVAR 20
6558: PUSH
6559: LD_INT 3
6561: ST_TO_ADDR
// uc_nation = 3 ;
6562: LD_ADDR_OWVAR 21
6566: PUSH
6567: LD_INT 3
6569: ST_TO_ADDR
// hc_gallery =  ;
6570: LD_ADDR_OWVAR 33
6574: PUSH
6575: LD_STRING 
6577: ST_TO_ADDR
// hc_name =  ;
6578: LD_ADDR_OWVAR 26
6582: PUSH
6583: LD_STRING 
6585: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6586: LD_INT 0
6588: PPUSH
6589: LD_INT 1
6591: PPUSH
6592: LD_EXP 25
6596: PPUSH
6597: LD_EXP 26
6601: PPUSH
6602: CALL_OW 12
6606: PPUSH
6607: CALL_OW 380
// un = CreateHuman ;
6611: LD_ADDR_VAR 0 3
6615: PUSH
6616: CALL_OW 44
6620: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6621: LD_VAR 0 3
6625: PPUSH
6626: LD_INT 3
6628: PPUSH
6629: LD_INT 0
6631: PPUSH
6632: CALL_OW 49
// end ;
6636: GO 6551
6638: POP
6639: POP
// for i = 1 to 4 do
6640: LD_ADDR_VAR 0 2
6644: PUSH
6645: DOUBLE
6646: LD_INT 1
6648: DEC
6649: ST_TO_ADDR
6650: LD_INT 4
6652: PUSH
6653: FOR_TO
6654: IFFALSE 6740
// begin uc_side = 3 ;
6656: LD_ADDR_OWVAR 20
6660: PUSH
6661: LD_INT 3
6663: ST_TO_ADDR
// uc_nation = 3 ;
6664: LD_ADDR_OWVAR 21
6668: PUSH
6669: LD_INT 3
6671: ST_TO_ADDR
// hc_gallery =  ;
6672: LD_ADDR_OWVAR 33
6676: PUSH
6677: LD_STRING 
6679: ST_TO_ADDR
// hc_name =  ;
6680: LD_ADDR_OWVAR 26
6684: PUSH
6685: LD_STRING 
6687: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6688: LD_INT 0
6690: PPUSH
6691: LD_INT 2
6693: PPUSH
6694: LD_EXP 25
6698: PPUSH
6699: LD_EXP 26
6703: PPUSH
6704: CALL_OW 12
6708: PPUSH
6709: CALL_OW 380
// un = CreateHuman ;
6713: LD_ADDR_VAR 0 3
6717: PUSH
6718: CALL_OW 44
6722: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6723: LD_VAR 0 3
6727: PPUSH
6728: LD_INT 3
6730: PPUSH
6731: LD_INT 0
6733: PPUSH
6734: CALL_OW 49
// end ;
6738: GO 6653
6740: POP
6741: POP
// for i = 1 to 3 do
6742: LD_ADDR_VAR 0 2
6746: PUSH
6747: DOUBLE
6748: LD_INT 1
6750: DEC
6751: ST_TO_ADDR
6752: LD_INT 3
6754: PUSH
6755: FOR_TO
6756: IFFALSE 6842
// begin uc_side = 3 ;
6758: LD_ADDR_OWVAR 20
6762: PUSH
6763: LD_INT 3
6765: ST_TO_ADDR
// uc_nation = 3 ;
6766: LD_ADDR_OWVAR 21
6770: PUSH
6771: LD_INT 3
6773: ST_TO_ADDR
// hc_gallery =  ;
6774: LD_ADDR_OWVAR 33
6778: PUSH
6779: LD_STRING 
6781: ST_TO_ADDR
// hc_name =  ;
6782: LD_ADDR_OWVAR 26
6786: PUSH
6787: LD_STRING 
6789: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6790: LD_INT 0
6792: PPUSH
6793: LD_INT 3
6795: PPUSH
6796: LD_EXP 25
6800: PPUSH
6801: LD_EXP 26
6805: PPUSH
6806: CALL_OW 12
6810: PPUSH
6811: CALL_OW 380
// un = CreateHuman ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: CALL_OW 44
6824: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6825: LD_VAR 0 3
6829: PPUSH
6830: LD_INT 3
6832: PPUSH
6833: LD_INT 0
6835: PPUSH
6836: CALL_OW 49
// end ;
6840: GO 6755
6842: POP
6843: POP
// for i = 1 to 2 do
6844: LD_ADDR_VAR 0 2
6848: PUSH
6849: DOUBLE
6850: LD_INT 1
6852: DEC
6853: ST_TO_ADDR
6854: LD_INT 2
6856: PUSH
6857: FOR_TO
6858: IFFALSE 6944
// begin uc_side = 3 ;
6860: LD_ADDR_OWVAR 20
6864: PUSH
6865: LD_INT 3
6867: ST_TO_ADDR
// uc_nation = 3 ;
6868: LD_ADDR_OWVAR 21
6872: PUSH
6873: LD_INT 3
6875: ST_TO_ADDR
// hc_gallery =  ;
6876: LD_ADDR_OWVAR 33
6880: PUSH
6881: LD_STRING 
6883: ST_TO_ADDR
// hc_name =  ;
6884: LD_ADDR_OWVAR 26
6888: PUSH
6889: LD_STRING 
6891: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6892: LD_INT 0
6894: PPUSH
6895: LD_INT 4
6897: PPUSH
6898: LD_EXP 25
6902: PPUSH
6903: LD_EXP 26
6907: PPUSH
6908: CALL_OW 12
6912: PPUSH
6913: CALL_OW 380
// un = CreateHuman ;
6917: LD_ADDR_VAR 0 3
6921: PUSH
6922: CALL_OW 44
6926: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6927: LD_VAR 0 3
6931: PPUSH
6932: LD_INT 3
6934: PPUSH
6935: LD_INT 0
6937: PPUSH
6938: CALL_OW 49
// end ;
6942: GO 6857
6944: POP
6945: POP
// end ; end_of_file
6946: LD_VAR 0 1
6950: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6951: LD_INT 0
6953: PPUSH
6954: PPUSH
// if exist_mode then
6955: LD_VAR 0 2
6959: IFFALSE 6978
// unit := CreateCharacter ( ident ) else
6961: LD_ADDR_VAR 0 4
6965: PUSH
6966: LD_VAR 0 1
6970: PPUSH
6971: CALL_OW 34
6975: ST_TO_ADDR
6976: GO 6993
// unit := NewCharacter ( ident ) ;
6978: LD_ADDR_VAR 0 4
6982: PUSH
6983: LD_VAR 0 1
6987: PPUSH
6988: CALL_OW 25
6992: ST_TO_ADDR
// result := unit ;
6993: LD_ADDR_VAR 0 3
6997: PUSH
6998: LD_VAR 0 4
7002: ST_TO_ADDR
// end ;
7003: LD_VAR 0 3
7007: RET
// export function Video ( mode ) ; begin
7008: LD_INT 0
7010: PPUSH
// ingame_video = mode ;
7011: LD_ADDR_OWVAR 52
7015: PUSH
7016: LD_VAR 0 1
7020: ST_TO_ADDR
// interface_hidden = mode ;
7021: LD_ADDR_OWVAR 54
7025: PUSH
7026: LD_VAR 0 1
7030: ST_TO_ADDR
// end ;
7031: LD_VAR 0 2
7035: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7036: LD_INT 0
7038: PPUSH
7039: PPUSH
7040: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7041: LD_ADDR_VAR 0 1
7045: PUSH
7046: LD_VAR 0 1
7050: PUSH
7051: LD_EXP 1
7055: PUSH
7056: LD_EXP 2
7060: PUSH
7061: LD_EXP 3
7065: PUSH
7066: LD_EXP 4
7070: PUSH
7071: LD_EXP 5
7075: PUSH
7076: LD_EXP 6
7080: PUSH
7081: LD_EXP 7
7085: PUSH
7086: LD_EXP 8
7090: PUSH
7091: LD_EXP 9
7095: PUSH
7096: LD_EXP 10
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: DIFF
7113: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7114: LD_ADDR_VAR 0 6
7118: PUSH
7119: LD_VAR 0 1
7123: PUSH
7124: LD_INT 1
7126: PPUSH
7127: LD_VAR 0 1
7131: PPUSH
7132: CALL_OW 12
7136: ARRAY
7137: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7138: LD_VAR 0 6
7142: PPUSH
7143: CALL_OW 258
7147: PUSH
7148: LD_INT 1
7150: EQUAL
7151: IFFALSE 7169
// Say ( speaker , dialogMID ) else
7153: LD_VAR 0 6
7157: PPUSH
7158: LD_VAR 0 2
7162: PPUSH
7163: CALL_OW 88
7167: GO 7183
// Say ( speaker , dialogFID ) ;
7169: LD_VAR 0 6
7173: PPUSH
7174: LD_VAR 0 3
7178: PPUSH
7179: CALL_OW 88
// result := speaker ;
7183: LD_ADDR_VAR 0 4
7187: PUSH
7188: LD_VAR 0 6
7192: ST_TO_ADDR
// end ;
7193: LD_VAR 0 4
7197: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7198: LD_INT 0
7200: PPUSH
7201: PPUSH
7202: PPUSH
// uc_side := GetSide ( b ) ;
7203: LD_ADDR_OWVAR 20
7207: PUSH
7208: LD_VAR 0 2
7212: PPUSH
7213: CALL_OW 255
7217: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7218: LD_ADDR_OWVAR 21
7222: PUSH
7223: LD_VAR 0 2
7227: PPUSH
7228: CALL_OW 248
7232: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7233: LD_INT 0
7235: PPUSH
7236: LD_INT 1
7238: PPUSH
7239: LD_VAR 0 1
7243: PPUSH
7244: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7248: LD_ADDR_VAR 0 5
7252: PUSH
7253: LD_VAR 0 2
7257: PPUSH
7258: CALL_OW 254
7262: PUSH
7263: LD_INT 3
7265: MINUS
7266: ST_TO_ADDR
// if dir < 0 then
7267: LD_VAR 0 5
7271: PUSH
7272: LD_INT 0
7274: LESS
7275: IFFALSE 7291
// dir := 6 + dir ;
7277: LD_ADDR_VAR 0 5
7281: PUSH
7282: LD_INT 6
7284: PUSH
7285: LD_VAR 0 5
7289: PLUS
7290: ST_TO_ADDR
// un := CreateHuman ;
7291: LD_ADDR_VAR 0 4
7295: PUSH
7296: CALL_OW 44
7300: ST_TO_ADDR
// SetDir ( un , dir ) ;
7301: LD_VAR 0 4
7305: PPUSH
7306: LD_VAR 0 5
7310: PPUSH
7311: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7315: LD_VAR 0 4
7319: PPUSH
7320: LD_VAR 0 2
7324: PPUSH
7325: CALL_OW 52
// end ;
7329: LD_VAR 0 3
7333: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7334: LD_INT 0
7336: PPUSH
7337: PPUSH
7338: PPUSH
7339: PPUSH
// for i = 1 to count do
7340: LD_ADDR_VAR 0 8
7344: PUSH
7345: DOUBLE
7346: LD_INT 1
7348: DEC
7349: ST_TO_ADDR
7350: LD_VAR 0 6
7354: PUSH
7355: FOR_TO
7356: IFFALSE 7437
// begin uc_side = side ;
7358: LD_ADDR_OWVAR 20
7362: PUSH
7363: LD_VAR 0 1
7367: ST_TO_ADDR
// uc_nation = nation ;
7368: LD_ADDR_OWVAR 21
7372: PUSH
7373: LD_VAR 0 2
7377: ST_TO_ADDR
// hc_gallery =  ;
7378: LD_ADDR_OWVAR 33
7382: PUSH
7383: LD_STRING 
7385: ST_TO_ADDR
// hc_name =  ;
7386: LD_ADDR_OWVAR 26
7390: PUSH
7391: LD_STRING 
7393: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7394: LD_INT 0
7396: PPUSH
7397: LD_VAR 0 5
7401: PPUSH
7402: LD_VAR 0 4
7406: PPUSH
7407: CALL_OW 380
// un = CreateHuman ;
7411: LD_ADDR_VAR 0 10
7415: PUSH
7416: CALL_OW 44
7420: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7421: LD_VAR 0 10
7425: PPUSH
7426: LD_VAR 0 3
7430: PPUSH
7431: CALL_OW 52
// end ;
7435: GO 7355
7437: POP
7438: POP
// end ;
7439: LD_VAR 0 7
7443: RET
// export function PrepareDifficulty ; begin
7444: LD_INT 0
7446: PPUSH
// if Difficulty = 1 then
7447: LD_OWVAR 67
7451: PUSH
7452: LD_INT 1
7454: EQUAL
7455: IFFALSE 7473
// begin RuSolMinLevel = 4 ;
7457: LD_ADDR_EXP 25
7461: PUSH
7462: LD_INT 4
7464: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7465: LD_ADDR_EXP 26
7469: PUSH
7470: LD_INT 6
7472: ST_TO_ADDR
// end ; if Difficulty = 2 then
7473: LD_OWVAR 67
7477: PUSH
7478: LD_INT 2
7480: EQUAL
7481: IFFALSE 7551
// begin RuSolMinLevel = 5 ;
7483: LD_ADDR_EXP 25
7487: PUSH
7488: LD_INT 5
7490: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7491: LD_ADDR_EXP 26
7495: PUSH
7496: LD_INT 6
7498: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7499: LD_INT 51
7501: PPUSH
7502: LD_INT 3
7504: PPUSH
7505: LD_INT 1
7507: PPUSH
7508: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7512: LD_INT 57
7514: PPUSH
7515: LD_INT 3
7517: PPUSH
7518: LD_INT 1
7520: PPUSH
7521: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7525: LD_INT 57
7527: PPUSH
7528: LD_INT 6
7530: PPUSH
7531: LD_INT 2
7533: PPUSH
7534: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7538: LD_INT 51
7540: PPUSH
7541: LD_INT 6
7543: PPUSH
7544: LD_INT 2
7546: PPUSH
7547: CALL_OW 322
// end ; if Difficulty = 3 then
7551: LD_OWVAR 67
7555: PUSH
7556: LD_INT 3
7558: EQUAL
7559: IFFALSE 7642
// begin RuSolMinLevel = 5 ;
7561: LD_ADDR_EXP 25
7565: PUSH
7566: LD_INT 5
7568: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7569: LD_ADDR_EXP 26
7573: PUSH
7574: LD_INT 6
7576: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7577: LD_INT 57
7579: PPUSH
7580: LD_INT 3
7582: PPUSH
7583: LD_INT 1
7585: PPUSH
7586: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7590: LD_INT 51
7592: PPUSH
7593: LD_INT 3
7595: PPUSH
7596: LD_INT 1
7598: PPUSH
7599: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7603: LD_INT 52
7605: PPUSH
7606: LD_INT 3
7608: PPUSH
7609: LD_INT 1
7611: PPUSH
7612: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7616: LD_INT 57
7618: PPUSH
7619: LD_INT 6
7621: PPUSH
7622: LD_INT 2
7624: PPUSH
7625: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7629: LD_INT 52
7631: PPUSH
7632: LD_INT 6
7634: PPUSH
7635: LD_INT 2
7637: PPUSH
7638: CALL_OW 322
// end ; end ;
7642: LD_VAR 0 1
7646: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7647: LD_INT 0
7649: PPUSH
7650: PPUSH
7651: PPUSH
7652: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7653: LD_ADDR_VAR 0 3
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_INT 3
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 25
7670: PUSH
7671: LD_INT 2
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PPUSH
7682: CALL_OW 69
7686: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7687: LD_ADDR_VAR 0 4
7691: PUSH
7692: LD_INT 4
7694: PUSH
7695: LD_INT 75
7697: PUSH
7698: LD_INT 79
7700: PUSH
7701: LD_INT 2
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: PUSH
7710: LD_INT 4
7712: PUSH
7713: LD_INT 113
7715: PUSH
7716: LD_INT 94
7718: PUSH
7719: LD_INT 4
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: PUSH
7728: LD_INT 29
7730: PUSH
7731: LD_INT 106
7733: PUSH
7734: LD_INT 97
7736: PUSH
7737: LD_INT 3
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 26
7748: PUSH
7749: LD_INT 93
7751: PUSH
7752: LD_INT 97
7754: PUSH
7755: LD_INT 5
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 2
7766: PUSH
7767: LD_INT 100
7769: PUSH
7770: LD_INT 89
7772: PUSH
7773: LD_INT 3
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: PUSH
7782: LD_INT 17
7784: PUSH
7785: LD_INT 96
7787: PUSH
7788: LD_INT 89
7790: PUSH
7791: LD_INT 1
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: PUSH
7800: LD_INT 32
7802: PUSH
7803: LD_INT 78
7805: PUSH
7806: LD_INT 94
7808: PUSH
7809: LD_INT 1
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 32
7820: PUSH
7821: LD_INT 95
7823: PUSH
7824: LD_INT 82
7826: PUSH
7827: LD_INT 3
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: LD_INT 32
7838: PUSH
7839: LD_INT 104
7841: PUSH
7842: LD_INT 85
7844: PUSH
7845: LD_INT 2
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: LD_INT 32
7856: PUSH
7857: LD_INT 81
7859: PUSH
7860: LD_INT 78
7862: PUSH
7863: LD_INT 2
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 33
7874: PUSH
7875: LD_INT 109
7877: PUSH
7878: LD_INT 90
7880: PUSH
7881: LD_INT 3
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 33
7892: PUSH
7893: LD_INT 88
7895: PUSH
7896: LD_INT 79
7898: PUSH
7899: LD_INT 3
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: PUSH
7908: LD_INT 33
7910: PUSH
7911: LD_INT 76
7913: PUSH
7914: LD_INT 87
7916: PUSH
7917: LD_INT 1
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: PUSH
7926: LD_INT 26
7928: PUSH
7929: LD_INT 96
7931: PUSH
7932: LD_INT 97
7934: PUSH
7935: LD_INT 5
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: PUSH
7944: LD_INT 26
7946: PUSH
7947: LD_INT 85
7949: PUSH
7950: LD_INT 84
7952: PUSH
7953: LD_INT 2
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: PUSH
7962: LD_INT 6
7964: PUSH
7965: LD_INT 88
7967: PUSH
7968: LD_INT 95
7970: PUSH
7971: LD_INT 0
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: PUSH
7980: LD_INT 19
7982: PUSH
7983: LD_INT 103
7985: PUSH
7986: LD_INT 89
7988: PUSH
7989: LD_INT 4
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: PUSH
7998: LD_INT 16
8000: PUSH
8001: LD_INT 97
8003: PUSH
8004: LD_INT 86
8006: PUSH
8007: LD_INT 2
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 24
8018: PUSH
8019: LD_INT 100
8021: PUSH
8022: LD_INT 85
8024: PUSH
8025: LD_INT 3
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: ST_TO_ADDR
// for i := 1 to buildingsTab do
8055: LD_ADDR_VAR 0 2
8059: PUSH
8060: DOUBLE
8061: LD_INT 1
8063: DEC
8064: ST_TO_ADDR
8065: LD_VAR 0 4
8069: PUSH
8070: FOR_TO
8071: IFFALSE 8144
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8073: LD_VAR 0 3
8077: PPUSH
8078: LD_VAR 0 4
8082: PUSH
8083: LD_VAR 0 2
8087: ARRAY
8088: PUSH
8089: LD_INT 1
8091: ARRAY
8092: PPUSH
8093: LD_VAR 0 4
8097: PUSH
8098: LD_VAR 0 2
8102: ARRAY
8103: PUSH
8104: LD_INT 2
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 4
8112: PUSH
8113: LD_VAR 0 2
8117: ARRAY
8118: PUSH
8119: LD_INT 3
8121: ARRAY
8122: PPUSH
8123: LD_VAR 0 4
8127: PUSH
8128: LD_VAR 0 2
8132: ARRAY
8133: PUSH
8134: LD_INT 4
8136: ARRAY
8137: PPUSH
8138: CALL_OW 205
8142: GO 8070
8144: POP
8145: POP
// end ;
8146: LD_VAR 0 1
8150: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8151: LD_INT 0
8153: PPUSH
8154: PPUSH
// for i in charactersList do
8155: LD_ADDR_VAR 0 4
8159: PUSH
8160: LD_VAR 0 1
8164: PUSH
8165: FOR_IN
8166: IFFALSE 8184
// SaveCharacters ( i , ident ) ;
8168: LD_VAR 0 4
8172: PPUSH
8173: LD_VAR 0 2
8177: PPUSH
8178: CALL_OW 38
8182: GO 8165
8184: POP
8185: POP
// end ;
8186: LD_VAR 0 3
8190: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8191: LD_INT 0
8193: PPUSH
8194: PPUSH
8195: PPUSH
8196: PPUSH
8197: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8198: LD_ADDR_VAR 0 8
8202: PUSH
8203: LD_INT 48
8205: PUSH
8206: LD_INT 49
8208: PUSH
8209: LD_INT 50
8211: PUSH
8212: LD_INT 20
8214: PUSH
8215: LD_INT 1
8217: PUSH
8218: LD_INT 51
8220: PUSH
8221: LD_INT 52
8223: PUSH
8224: LD_INT 69
8226: PUSH
8227: LD_INT 39
8229: PUSH
8230: LD_INT 34
8232: PUSH
8233: LD_INT 40
8235: PUSH
8236: LD_INT 53
8238: PUSH
8239: LD_INT 71
8241: PUSH
8242: LD_INT 57
8244: PUSH
8245: LD_INT 58
8247: PUSH
8248: LD_INT 44
8250: PUSH
8251: LD_INT 32
8253: PUSH
8254: LD_INT 27
8256: PUSH
8257: LD_INT 23
8259: PUSH
8260: LD_INT 33
8262: PUSH
8263: LD_INT 59
8265: PUSH
8266: LD_INT 54
8268: PUSH
8269: LD_INT 55
8271: PUSH
8272: LD_INT 56
8274: PUSH
8275: LD_INT 63
8277: PUSH
8278: LD_INT 64
8280: PUSH
8281: LD_INT 65
8283: PUSH
8284: LD_INT 30
8286: PUSH
8287: LD_INT 31
8289: PUSH
8290: LD_INT 21
8292: PUSH
8293: LD_INT 22
8295: PUSH
8296: LD_INT 25
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8333: LD_ADDR_VAR 0 5
8337: PUSH
8338: DOUBLE
8339: LD_INT 1
8341: DEC
8342: ST_TO_ADDR
8343: LD_VAR 0 8
8347: PUSH
8348: FOR_TO
8349: IFFALSE 8425
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8351: LD_VAR 0 8
8355: PUSH
8356: LD_VAR 0 5
8360: ARRAY
8361: PPUSH
8362: LD_VAR 0 1
8366: PPUSH
8367: CALL_OW 321
8371: PUSH
8372: LD_INT 1
8374: EQUAL
8375: PUSH
8376: LD_VAR 0 8
8380: PUSH
8381: LD_VAR 0 5
8385: ARRAY
8386: PPUSH
8387: LD_VAR 0 3
8391: PPUSH
8392: CALL_OW 482
8396: PUSH
8397: LD_INT 1
8399: EQUAL
8400: AND
8401: IFFALSE 8423
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8403: LD_VAR 0 2
8407: PPUSH
8408: LD_VAR 0 8
8412: PUSH
8413: LD_VAR 0 5
8417: ARRAY
8418: PPUSH
8419: CALL_OW 184
8423: GO 8348
8425: POP
8426: POP
// end ;
8427: LD_VAR 0 4
8431: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8432: LD_INT 0
8434: PPUSH
8435: PPUSH
8436: PPUSH
8437: PPUSH
8438: PPUSH
8439: PPUSH
8440: PPUSH
8441: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8442: LD_ADDR_VAR 0 6
8446: PUSH
8447: LD_VAR 0 2
8451: PPUSH
8452: LD_INT 22
8454: PUSH
8455: LD_VAR 0 1
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 56
8466: PUSH
8467: EMPTY
8468: LIST
8469: PUSH
8470: LD_INT 24
8472: PUSH
8473: LD_INT 700
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: LD_INT 3
8482: PUSH
8483: LD_INT 60
8485: PUSH
8486: EMPTY
8487: LIST
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 2
8495: PUSH
8496: LD_INT 25
8498: PUSH
8499: LD_INT 1
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: PUSH
8506: LD_INT 25
8508: PUSH
8509: LD_INT 5
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PUSH
8516: LD_INT 25
8518: PUSH
8519: LD_INT 8
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PUSH
8526: LD_INT 25
8528: PUSH
8529: LD_INT 9
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: PPUSH
8550: CALL_OW 70
8554: PUSH
8555: LD_EXP 24
8559: PUSH
8560: EMPTY
8561: LIST
8562: DIFF
8563: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8564: LD_ADDR_VAR 0 7
8568: PUSH
8569: LD_VAR 0 2
8573: PPUSH
8574: LD_INT 22
8576: PUSH
8577: LD_VAR 0 1
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 30
8588: PUSH
8589: LD_INT 32
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 58
8598: PUSH
8599: EMPTY
8600: LIST
8601: PUSH
8602: LD_INT 24
8604: PUSH
8605: LD_INT 251
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 70
8622: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8623: LD_ADDR_VAR 0 9
8627: PUSH
8628: LD_VAR 0 2
8632: PPUSH
8633: LD_INT 22
8635: PUSH
8636: LD_VAR 0 1
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: LD_INT 2
8647: PUSH
8648: LD_INT 30
8650: PUSH
8651: LD_INT 4
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: LD_INT 30
8660: PUSH
8661: LD_INT 5
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 24
8675: PUSH
8676: LD_INT 251
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: LIST
8687: PPUSH
8688: CALL_OW 70
8692: ST_TO_ADDR
// if barrackList > 0 then
8693: LD_VAR 0 9
8697: PUSH
8698: LD_INT 0
8700: GREATER
8701: IFFALSE 8849
// begin if turretList = 0 then
8703: LD_VAR 0 7
8707: PUSH
8708: LD_INT 0
8710: EQUAL
8711: IFFALSE 8753
// begin if soldiers_list > 0 then
8713: LD_VAR 0 6
8717: PUSH
8718: LD_INT 0
8720: GREATER
8721: IFFALSE 8751
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8723: LD_VAR 0 6
8727: PPUSH
8728: LD_VAR 0 9
8732: PUSH
8733: LD_INT 1
8735: PPUSH
8736: LD_VAR 0 9
8740: PPUSH
8741: CALL_OW 12
8745: ARRAY
8746: PPUSH
8747: CALL_OW 120
// end else
8751: GO 8849
// begin for i in barrackList do
8753: LD_ADDR_VAR 0 4
8757: PUSH
8758: LD_VAR 0 9
8762: PUSH
8763: FOR_IN
8764: IFFALSE 8847
// begin insideUnits = UnitsInside ( i ) ;
8766: LD_ADDR_VAR 0 10
8770: PUSH
8771: LD_VAR 0 4
8775: PPUSH
8776: CALL_OW 313
8780: ST_TO_ADDR
// if insideUnits > 0 then
8781: LD_VAR 0 10
8785: PUSH
8786: LD_INT 0
8788: GREATER
8789: IFFALSE 8813
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8791: LD_VAR 0 10
8795: PUSH
8796: LD_INT 1
8798: ARRAY
8799: PPUSH
8800: LD_VAR 0 7
8804: PUSH
8805: LD_INT 1
8807: ARRAY
8808: PPUSH
8809: CALL_OW 120
// if soldiers_list > 0 then
8813: LD_VAR 0 6
8817: PUSH
8818: LD_INT 0
8820: GREATER
8821: IFFALSE 8845
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8823: LD_VAR 0 6
8827: PUSH
8828: LD_INT 1
8830: ARRAY
8831: PPUSH
8832: LD_VAR 0 7
8836: PUSH
8837: LD_INT 1
8839: ARRAY
8840: PPUSH
8841: CALL_OW 120
// end ;
8845: GO 8763
8847: POP
8848: POP
// end ; end ; end ;
8849: LD_VAR 0 3
8853: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8854: LD_INT 0
8856: PPUSH
8857: PPUSH
8858: PPUSH
8859: PPUSH
8860: PPUSH
8861: PPUSH
// for i = 1 to vehCount do
8862: LD_ADDR_VAR 0 8
8866: PUSH
8867: DOUBLE
8868: LD_INT 1
8870: DEC
8871: ST_TO_ADDR
8872: LD_VAR 0 6
8876: PUSH
8877: FOR_TO
8878: IFFALSE 9085
// begin uc_side = side ;
8880: LD_ADDR_OWVAR 20
8884: PUSH
8885: LD_VAR 0 1
8889: ST_TO_ADDR
// uc_nation = nation ;
8890: LD_ADDR_OWVAR 21
8894: PUSH
8895: LD_VAR 0 3
8899: ST_TO_ADDR
// vc_Chassis = 22 ;
8900: LD_ADDR_OWVAR 37
8904: PUSH
8905: LD_INT 22
8907: ST_TO_ADDR
// vc_engine = 1 ;
8908: LD_ADDR_OWVAR 39
8912: PUSH
8913: LD_INT 1
8915: ST_TO_ADDR
// vc_control = 1 ;
8916: LD_ADDR_OWVAR 38
8920: PUSH
8921: LD_INT 1
8923: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8924: LD_ADDR_OWVAR 40
8928: PUSH
8929: LD_INT 43
8931: PUSH
8932: LD_INT 44
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: LD_INT 1
8941: PPUSH
8942: LD_INT 2
8944: PPUSH
8945: CALL_OW 12
8949: ARRAY
8950: ST_TO_ADDR
// veh = CreateVehicle ;
8951: LD_ADDR_VAR 0 12
8955: PUSH
8956: CALL_OW 45
8960: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8961: LD_VAR 0 12
8965: PPUSH
8966: LD_VAR 0 2
8970: PPUSH
8971: LD_INT 0
8973: PPUSH
8974: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8978: LD_ADDR_EXP 32
8982: PUSH
8983: LD_EXP 32
8987: PUSH
8988: LD_VAR 0 12
8992: ADD
8993: ST_TO_ADDR
// hc_class = 3 ;
8994: LD_ADDR_OWVAR 28
8998: PUSH
8999: LD_INT 3
9001: ST_TO_ADDR
// hc_name =  ;
9002: LD_ADDR_OWVAR 26
9006: PUSH
9007: LD_STRING 
9009: ST_TO_ADDR
// hc_gallery =  ;
9010: LD_ADDR_OWVAR 33
9014: PUSH
9015: LD_STRING 
9017: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9018: LD_INT 0
9020: PPUSH
9021: LD_INT 3
9023: PPUSH
9024: LD_EXP 25
9028: PPUSH
9029: LD_EXP 26
9033: PPUSH
9034: CALL_OW 12
9038: PPUSH
9039: CALL_OW 380
// un = CreateHuman ;
9043: LD_ADDR_VAR 0 10
9047: PUSH
9048: CALL_OW 44
9052: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9053: LD_VAR 0 10
9057: PPUSH
9058: LD_VAR 0 12
9062: PPUSH
9063: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9067: LD_ADDR_EXP 32
9071: PUSH
9072: LD_EXP 32
9076: PUSH
9077: LD_VAR 0 10
9081: ADD
9082: ST_TO_ADDR
// end ;
9083: GO 8877
9085: POP
9086: POP
// end ;
9087: LD_VAR 0 7
9091: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9092: LD_INT 0
9094: PPUSH
9095: PPUSH
9096: PPUSH
9097: PPUSH
9098: PPUSH
9099: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9100: LD_VAR 0 2
9104: PPUSH
9105: LD_INT 22
9107: PUSH
9108: LD_VAR 0 1
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: EMPTY
9118: LIST
9119: PPUSH
9120: CALL_OW 70
9124: PUSH
9125: LD_INT 0
9127: EQUAL
9128: PUSH
9129: LD_EXP 32
9133: AND
9134: IFFALSE 9421
// begin for i in defenders_list do
9136: LD_ADDR_VAR 0 4
9140: PUSH
9141: LD_EXP 32
9145: PUSH
9146: FOR_IN
9147: IFFALSE 9419
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9149: LD_VAR 0 4
9153: PPUSH
9154: LD_INT 63
9156: PPUSH
9157: LD_INT 75
9159: PPUSH
9160: CALL_OW 297
9164: PUSH
9165: LD_INT 8
9167: GREATER
9168: PUSH
9169: LD_VAR 0 4
9173: PPUSH
9174: CALL_OW 314
9178: NOT
9179: AND
9180: IFFALSE 9199
// ComMoveXY ( i , 63 , 75 ) else
9182: LD_VAR 0 4
9186: PPUSH
9187: LD_INT 63
9189: PPUSH
9190: LD_INT 75
9192: PPUSH
9193: CALL_OW 111
9197: GO 9417
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9199: LD_VAR 0 4
9203: PPUSH
9204: CALL_OW 257
9208: PUSH
9209: LD_INT 3
9211: EQUAL
9212: PUSH
9213: LD_VAR 0 4
9217: PPUSH
9218: CALL_OW 310
9222: NOT
9223: AND
9224: PUSH
9225: LD_VAR 0 4
9229: PPUSH
9230: CALL_OW 314
9234: NOT
9235: AND
9236: IFFALSE 9289
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9238: LD_VAR 0 4
9242: PPUSH
9243: LD_EXP 32
9247: PPUSH
9248: LD_INT 58
9250: PUSH
9251: EMPTY
9252: LIST
9253: PUSH
9254: LD_INT 24
9256: PUSH
9257: LD_INT 1000
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: PPUSH
9268: CALL_OW 72
9272: PPUSH
9273: LD_VAR 0 4
9277: PPUSH
9278: CALL_OW 74
9282: PPUSH
9283: CALL_OW 120
9287: GO 9417
// if GetFuel ( i ) < 100 then
9289: LD_VAR 0 4
9293: PPUSH
9294: CALL_OW 261
9298: PUSH
9299: LD_INT 100
9301: LESS
9302: IFFALSE 9318
// SetFuel ( defenders_list , 100 ) else
9304: LD_EXP 32
9308: PPUSH
9309: LD_INT 100
9311: PPUSH
9312: CALL_OW 240
9316: GO 9417
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9318: LD_VAR 0 4
9322: PPUSH
9323: CALL_OW 263
9327: PUSH
9328: LD_INT 1
9330: EQUAL
9331: PUSH
9332: LD_VAR 0 4
9336: PPUSH
9337: CALL_OW 256
9341: PUSH
9342: LD_INT 990
9344: LESS
9345: AND
9346: IFFALSE 9417
// begin veh := i ;
9348: LD_ADDR_VAR 0 7
9352: PUSH
9353: LD_VAR 0 4
9357: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9358: LD_ADDR_VAR 0 8
9362: PUSH
9363: LD_VAR 0 4
9367: PPUSH
9368: CALL_OW 311
9372: ST_TO_ADDR
// if veh then
9373: LD_VAR 0 7
9377: IFFALSE 9417
// begin ComMoveXY ( i , 63 , 75 ) ;
9379: LD_VAR 0 4
9383: PPUSH
9384: LD_INT 63
9386: PPUSH
9387: LD_INT 75
9389: PPUSH
9390: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9394: LD_VAR 0 7
9398: PPUSH
9399: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9403: LD_VAR 0 8
9407: PPUSH
9408: LD_VAR 0 7
9412: PPUSH
9413: CALL_OW 189
// end ; end ; end ;
9417: GO 9146
9419: POP
9420: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9421: LD_ADDR_VAR 0 6
9425: PUSH
9426: LD_VAR 0 2
9430: PPUSH
9431: LD_INT 22
9433: PUSH
9434: LD_VAR 0 1
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: PPUSH
9446: CALL_OW 70
9450: ST_TO_ADDR
// if tmp and defenders_list then
9451: LD_VAR 0 6
9455: PUSH
9456: LD_EXP 32
9460: AND
9461: IFFALSE 9630
// for i in defenders_list do
9463: LD_ADDR_VAR 0 4
9467: PUSH
9468: LD_EXP 32
9472: PUSH
9473: FOR_IN
9474: IFFALSE 9628
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9476: LD_VAR 0 4
9480: PPUSH
9481: CALL_OW 257
9485: PUSH
9486: LD_INT 3
9488: EQUAL
9489: PUSH
9490: LD_VAR 0 4
9494: PPUSH
9495: CALL_OW 310
9499: NOT
9500: AND
9501: IFFALSE 9540
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9503: LD_VAR 0 4
9507: PPUSH
9508: LD_EXP 32
9512: PPUSH
9513: LD_INT 58
9515: PUSH
9516: EMPTY
9517: LIST
9518: PPUSH
9519: CALL_OW 72
9523: PPUSH
9524: LD_VAR 0 4
9528: PPUSH
9529: CALL_OW 74
9533: PPUSH
9534: CALL_OW 120
9538: GO 9626
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9540: LD_VAR 0 4
9544: PPUSH
9545: CALL_OW 314
9549: NOT
9550: PUSH
9551: LD_VAR 0 4
9555: PPUSH
9556: LD_VAR 0 2
9560: PPUSH
9561: CALL_OW 308
9565: AND
9566: IFFALSE 9594
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9568: LD_VAR 0 4
9572: PPUSH
9573: LD_VAR 0 6
9577: PPUSH
9578: LD_VAR 0 4
9582: PPUSH
9583: CALL_OW 74
9587: PPUSH
9588: CALL_OW 115
9592: GO 9626
// if not IsInArea ( i , defenseArea ) then
9594: LD_VAR 0 4
9598: PPUSH
9599: LD_VAR 0 2
9603: PPUSH
9604: CALL_OW 308
9608: NOT
9609: IFFALSE 9626
// ComMoveXY ( i , 63 , 75 ) ;
9611: LD_VAR 0 4
9615: PPUSH
9616: LD_INT 63
9618: PPUSH
9619: LD_INT 75
9621: PPUSH
9622: CALL_OW 111
// end ;
9626: GO 9473
9628: POP
9629: POP
// end ;
9630: LD_VAR 0 3
9634: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9635: LD_INT 0
9637: PPUSH
9638: PPUSH
9639: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9640: LD_INT 22
9642: PUSH
9643: LD_VAR 0 1
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: LD_INT 21
9654: PUSH
9655: LD_INT 2
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PPUSH
9666: CALL_OW 69
9670: PUSH
9671: LD_VAR 0 3
9675: LESSEQUAL
9676: IFFALSE 9784
// begin for i = 1 to vehCount do
9678: LD_ADDR_VAR 0 9
9682: PUSH
9683: DOUBLE
9684: LD_INT 1
9686: DEC
9687: ST_TO_ADDR
9688: LD_VAR 0 3
9692: PUSH
9693: FOR_TO
9694: IFFALSE 9782
// begin weapon = weaponTab [ i ] ;
9696: LD_ADDR_VAR 0 10
9700: PUSH
9701: LD_VAR 0 4
9705: PUSH
9706: LD_VAR 0 9
9710: ARRAY
9711: ST_TO_ADDR
// if weapon = 46 then
9712: LD_VAR 0 10
9716: PUSH
9717: LD_INT 46
9719: EQUAL
9720: IFFALSE 9751
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9722: LD_VAR 0 2
9726: PPUSH
9727: LD_INT 24
9729: PPUSH
9730: LD_VAR 0 5
9734: PPUSH
9735: LD_VAR 0 6
9739: PPUSH
9740: LD_VAR 0 10
9744: PPUSH
9745: CALL_OW 185
// end else
9749: GO 9780
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9751: LD_VAR 0 2
9755: PPUSH
9756: LD_VAR 0 7
9760: PPUSH
9761: LD_VAR 0 5
9765: PPUSH
9766: LD_VAR 0 6
9770: PPUSH
9771: LD_VAR 0 10
9775: PPUSH
9776: CALL_OW 185
// end ; end ;
9780: GO 9693
9782: POP
9783: POP
// end ; end ;
9784: LD_VAR 0 8
9788: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9789: LD_INT 0
9791: PPUSH
9792: PPUSH
9793: PPUSH
9794: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9795: LD_ADDR_VAR 0 8
9799: PUSH
9800: LD_INT 22
9802: PUSH
9803: LD_VAR 0 1
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 21
9814: PUSH
9815: LD_INT 2
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: PUSH
9822: LD_INT 3
9824: PUSH
9825: LD_INT 24
9827: PUSH
9828: LD_INT 650
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: LIST
9843: PPUSH
9844: CALL_OW 69
9848: ST_TO_ADDR
// if damageVehicles > 0 then
9849: LD_VAR 0 8
9853: PUSH
9854: LD_INT 0
9856: GREATER
9857: IFFALSE 9878
// ComMoveXY ( damageVehicles , repX , repY ) ;
9859: LD_VAR 0 8
9863: PPUSH
9864: LD_VAR 0 3
9868: PPUSH
9869: LD_VAR 0 4
9873: PPUSH
9874: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9878: LD_VAR 0 8
9882: PPUSH
9883: LD_INT 95
9885: PUSH
9886: LD_VAR 0 2
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 3
9897: PUSH
9898: LD_INT 58
9900: PUSH
9901: EMPTY
9902: LIST
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PPUSH
9912: CALL_OW 72
9916: PUSH
9917: LD_INT 0
9919: GREATER
9920: IFFALSE 9987
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
9922: LD_ADDR_VAR 0 6
9926: PUSH
9927: LD_VAR 0 8
9931: PPUSH
9932: LD_INT 95
9934: PUSH
9935: LD_VAR 0 2
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: LD_INT 3
9946: PUSH
9947: LD_INT 58
9949: PUSH
9950: EMPTY
9951: LIST
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PPUSH
9961: CALL_OW 72
9965: PUSH
9966: FOR_IN
9967: IFFALSE 9985
// ComExitVehicle ( UnitsInside ( i ) ) ;
9969: LD_VAR 0 6
9973: PPUSH
9974: CALL_OW 313
9978: PPUSH
9979: CALL_OW 121
9983: GO 9966
9985: POP
9986: POP
// end ;
9987: LD_VAR 0 5
9991: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
9992: LD_INT 0
9994: PPUSH
9995: PPUSH
9996: PPUSH
9997: PPUSH
9998: PPUSH
9999: PPUSH
10000: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10001: LD_ADDR_VAR 0 8
10005: PUSH
10006: LD_INT 22
10008: PUSH
10009: LD_VAR 0 1
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PUSH
10018: LD_INT 21
10020: PUSH
10021: LD_INT 2
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PUSH
10028: LD_INT 24
10030: PUSH
10031: LD_INT 250
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 3
10040: PUSH
10041: LD_INT 58
10043: PUSH
10044: EMPTY
10045: LIST
10046: PUSH
10047: LD_INT 2
10049: PUSH
10050: LD_INT 34
10052: PUSH
10053: LD_INT 43
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 34
10062: PUSH
10063: LD_INT 44
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PUSH
10070: LD_INT 34
10072: PUSH
10073: LD_INT 46
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: LIST
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: PPUSH
10097: CALL_OW 69
10101: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10102: LD_INT 22
10104: PUSH
10105: LD_VAR 0 1
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 21
10116: PUSH
10117: LD_INT 2
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 24
10126: PUSH
10127: LD_INT 1000
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: LD_INT 3
10136: PUSH
10137: LD_INT 58
10139: PUSH
10140: EMPTY
10141: LIST
10142: PUSH
10143: LD_INT 2
10145: PUSH
10146: LD_INT 34
10148: PUSH
10149: LD_INT 43
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: LD_INT 34
10158: PUSH
10159: LD_INT 44
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: LD_INT 34
10168: PUSH
10169: LD_INT 46
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: LIST
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: PPUSH
10193: CALL_OW 69
10197: PUSH
10198: LD_INT 5
10200: PUSH
10201: LD_INT 6
10203: PUSH
10204: LD_INT 7
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: LIST
10211: PUSH
10212: LD_OWVAR 67
10216: ARRAY
10217: GREATEREQUAL
10218: IFFALSE 10783
// repeat wait ( 0 0$1 ) ;
10220: LD_INT 35
10222: PPUSH
10223: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10227: LD_ADDR_VAR 0 8
10231: PUSH
10232: LD_INT 22
10234: PUSH
10235: LD_VAR 0 1
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 21
10246: PUSH
10247: LD_INT 2
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 24
10256: PUSH
10257: LD_INT 250
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: LD_INT 2
10266: PUSH
10267: LD_INT 34
10269: PUSH
10270: LD_INT 43
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 34
10279: PUSH
10280: LD_INT 44
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 34
10289: PUSH
10290: LD_INT 46
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: PUSH
10303: LD_INT 3
10305: PUSH
10306: LD_INT 58
10308: PUSH
10309: EMPTY
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL_OW 69
10327: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10328: LD_INT 22
10330: PUSH
10331: LD_VAR 0 1
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PUSH
10340: LD_INT 95
10342: PUSH
10343: LD_VAR 0 2
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PPUSH
10356: CALL_OW 69
10360: NOT
10361: PUSH
10362: LD_VAR 0 11
10366: PUSH
10367: LD_INT 0
10369: EQUAL
10370: AND
10371: IFFALSE 10426
// for i := 1 to wayX do
10373: LD_ADDR_VAR 0 6
10377: PUSH
10378: DOUBLE
10379: LD_INT 1
10381: DEC
10382: ST_TO_ADDR
10383: LD_VAR 0 3
10387: PUSH
10388: FOR_TO
10389: IFFALSE 10424
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10391: LD_VAR 0 8
10395: PPUSH
10396: LD_VAR 0 3
10400: PUSH
10401: LD_VAR 0 6
10405: ARRAY
10406: PPUSH
10407: LD_VAR 0 4
10411: PUSH
10412: LD_VAR 0 6
10416: ARRAY
10417: PPUSH
10418: CALL_OW 114
10422: GO 10388
10424: POP
10425: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10426: LD_INT 22
10428: PUSH
10429: LD_VAR 0 1
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PUSH
10438: LD_INT 95
10440: PUSH
10441: LD_VAR 0 2
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PPUSH
10454: CALL_OW 69
10458: IFFALSE 10682
// begin seeEnemy = 1 ;
10460: LD_ADDR_VAR 0 11
10464: PUSH
10465: LD_INT 1
10467: ST_TO_ADDR
// for j in vehiclesOK do
10468: LD_ADDR_VAR 0 7
10472: PUSH
10473: LD_VAR 0 8
10477: PUSH
10478: FOR_IN
10479: IFFALSE 10680
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10481: LD_ADDR_VAR 0 9
10485: PUSH
10486: LD_INT 81
10488: PUSH
10489: LD_VAR 0 1
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 101
10500: PUSH
10501: LD_INT 1
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PPUSH
10512: CALL_OW 69
10516: PPUSH
10517: LD_VAR 0 7
10521: PPUSH
10522: CALL_OW 74
10526: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10527: LD_ADDR_VAR 0 10
10531: PUSH
10532: LD_INT 81
10534: PUSH
10535: LD_VAR 0 1
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 101
10546: PUSH
10547: LD_INT 1
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PUSH
10554: LD_INT 2
10556: PUSH
10557: LD_INT 59
10559: PUSH
10560: EMPTY
10561: LIST
10562: PUSH
10563: LD_INT 21
10565: PUSH
10566: LD_INT 1
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 21
10575: PUSH
10576: LD_INT 2
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: LIST
10593: PUSH
10594: EMPTY
10595: LIST
10596: PPUSH
10597: CALL_OW 69
10601: PPUSH
10602: LD_VAR 0 7
10606: PPUSH
10607: CALL_OW 74
10611: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10612: LD_VAR 0 7
10616: PPUSH
10617: LD_VAR 0 9
10621: PPUSH
10622: CALL_OW 296
10626: PUSH
10627: LD_INT 8
10629: PLUS
10630: PUSH
10631: LD_VAR 0 7
10635: PPUSH
10636: LD_VAR 0 10
10640: PPUSH
10641: CALL_OW 296
10645: LESS
10646: IFFALSE 10664
// ComAttackUnit ( j , target1 ) else
10648: LD_VAR 0 7
10652: PPUSH
10653: LD_VAR 0 9
10657: PPUSH
10658: CALL_OW 115
10662: GO 10678
// ComAttackUnit ( j , target2 ) ;
10664: LD_VAR 0 7
10668: PPUSH
10669: LD_VAR 0 10
10673: PPUSH
10674: CALL_OW 115
// end ;
10678: GO 10478
10680: POP
10681: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10682: LD_INT 22
10684: PUSH
10685: LD_VAR 0 1
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 21
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 24
10706: PUSH
10707: LD_INT 250
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: LD_INT 2
10716: PUSH
10717: LD_INT 34
10719: PUSH
10720: LD_INT 43
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: LD_INT 34
10729: PUSH
10730: LD_INT 44
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 34
10739: PUSH
10740: LD_INT 46
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: PUSH
10753: LD_INT 3
10755: PUSH
10756: LD_INT 58
10758: PUSH
10759: EMPTY
10760: LIST
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: PPUSH
10773: CALL_OW 69
10777: PUSH
10778: LD_INT 0
10780: EQUAL
10781: IFFALSE 10220
// seeEnemy = 0 ;
10783: LD_ADDR_VAR 0 11
10787: PUSH
10788: LD_INT 0
10790: ST_TO_ADDR
// end ;
10791: LD_VAR 0 5
10795: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10796: LD_INT 0
10798: PPUSH
10799: PPUSH
10800: PPUSH
10801: PPUSH
10802: PPUSH
10803: PPUSH
// repeat wait ( 0 0$1 ) ;
10804: LD_INT 35
10806: PPUSH
10807: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10811: LD_ADDR_VAR 0 7
10815: PUSH
10816: LD_INT 22
10818: PUSH
10819: LD_VAR 0 1
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PUSH
10828: LD_INT 21
10830: PUSH
10831: LD_INT 2
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PUSH
10838: LD_INT 24
10840: PUSH
10841: LD_INT 651
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: LIST
10852: PPUSH
10853: CALL_OW 69
10857: ST_TO_ADDR
// for j in vehiclesOK do
10858: LD_ADDR_VAR 0 4
10862: PUSH
10863: LD_VAR 0 7
10867: PUSH
10868: FOR_IN
10869: IFFALSE 11070
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10871: LD_ADDR_VAR 0 5
10875: PUSH
10876: LD_INT 81
10878: PUSH
10879: LD_VAR 0 1
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 101
10890: PUSH
10891: LD_INT 1
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PPUSH
10902: CALL_OW 69
10906: PPUSH
10907: LD_VAR 0 4
10911: PPUSH
10912: CALL_OW 74
10916: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10917: LD_ADDR_VAR 0 6
10921: PUSH
10922: LD_INT 81
10924: PUSH
10925: LD_VAR 0 1
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: PUSH
10934: LD_INT 101
10936: PUSH
10937: LD_INT 1
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: LD_INT 2
10946: PUSH
10947: LD_INT 59
10949: PUSH
10950: EMPTY
10951: LIST
10952: PUSH
10953: LD_INT 21
10955: PUSH
10956: LD_INT 1
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 21
10965: PUSH
10966: LD_INT 2
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: PUSH
10984: EMPTY
10985: LIST
10986: PPUSH
10987: CALL_OW 69
10991: PPUSH
10992: LD_VAR 0 4
10996: PPUSH
10997: CALL_OW 74
11001: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11002: LD_VAR 0 4
11006: PPUSH
11007: LD_VAR 0 5
11011: PPUSH
11012: CALL_OW 296
11016: PUSH
11017: LD_INT 8
11019: PLUS
11020: PUSH
11021: LD_VAR 0 4
11025: PPUSH
11026: LD_VAR 0 6
11030: PPUSH
11031: CALL_OW 296
11035: LESS
11036: IFFALSE 11054
// ComAttackUnit ( j , target1 ) else
11038: LD_VAR 0 4
11042: PPUSH
11043: LD_VAR 0 5
11047: PPUSH
11048: CALL_OW 115
11052: GO 11068
// ComAttackUnit ( j , target2 ) ;
11054: LD_VAR 0 4
11058: PPUSH
11059: LD_VAR 0 6
11063: PPUSH
11064: CALL_OW 115
// end ;
11068: GO 10868
11070: POP
11071: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11072: LD_INT 22
11074: PUSH
11075: LD_VAR 0 1
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 21
11086: PUSH
11087: LD_INT 2
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 24
11096: PUSH
11097: LD_INT 250
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: PPUSH
11109: CALL_OW 69
11113: PUSH
11114: LD_INT 0
11116: EQUAL
11117: IFFALSE 10804
// end ;
11119: LD_VAR 0 2
11123: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11124: LD_INT 0
11126: PPUSH
11127: PPUSH
11128: PPUSH
11129: PPUSH
11130: PPUSH
11131: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11132: LD_ADDR_VAR 0 8
11136: PUSH
11137: LD_VAR 0 2
11141: PPUSH
11142: CALL_OW 313
11146: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11147: LD_ADDR_VAR 0 9
11151: PUSH
11152: LD_VAR 0 3
11156: PPUSH
11157: LD_INT 22
11159: PUSH
11160: LD_VAR 0 1
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 25
11171: PUSH
11172: LD_INT 2
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 24
11181: PUSH
11182: LD_INT 750
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: LD_INT 3
11191: PUSH
11192: LD_INT 54
11194: PUSH
11195: EMPTY
11196: LIST
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: PPUSH
11208: CALL_OW 70
11212: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11213: LD_ADDR_VAR 0 6
11217: PUSH
11218: LD_VAR 0 3
11222: PPUSH
11223: LD_INT 22
11225: PUSH
11226: LD_VAR 0 1
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 21
11237: PUSH
11238: LD_INT 3
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: LD_INT 3
11247: PUSH
11248: LD_INT 24
11250: PUSH
11251: LD_INT 1000
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: PPUSH
11270: CALL_OW 70
11274: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11275: LD_VAR 0 6
11279: NOT
11280: PUSH
11281: LD_INT 22
11283: PUSH
11284: LD_VAR 0 1
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 25
11295: PUSH
11296: LD_INT 2
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 24
11305: PUSH
11306: LD_INT 250
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: LIST
11317: PPUSH
11318: CALL_OW 69
11322: NOT
11323: AND
11324: IFFALSE 11328
// exit ;
11326: GO 11525
// if buildings_list > 0 and engineerOkInside then
11328: LD_VAR 0 6
11332: PUSH
11333: LD_INT 0
11335: GREATER
11336: PUSH
11337: LD_VAR 0 8
11341: AND
11342: IFFALSE 11368
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11344: LD_VAR 0 8
11348: PPUSH
11349: LD_INT 25
11351: PUSH
11352: LD_INT 2
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PPUSH
11359: CALL_OW 72
11363: PPUSH
11364: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11368: LD_VAR 0 6
11372: PUSH
11373: LD_INT 0
11375: GREATER
11376: PUSH
11377: LD_VAR 0 9
11381: PUSH
11382: LD_INT 0
11384: GREATER
11385: AND
11386: IFFALSE 11406
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11388: LD_VAR 0 9
11392: PPUSH
11393: LD_VAR 0 6
11397: PUSH
11398: LD_INT 1
11400: ARRAY
11401: PPUSH
11402: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11406: LD_VAR 0 6
11410: PUSH
11411: LD_INT 0
11413: EQUAL
11414: PUSH
11415: LD_VAR 0 4
11419: PUSH
11420: LD_INT 0
11422: EQUAL
11423: AND
11424: PUSH
11425: LD_VAR 0 9
11429: PUSH
11430: LD_INT 0
11432: GREATER
11433: AND
11434: IFFALSE 11450
// ComEnterUnit ( engineerOkOutside , building ) ;
11436: LD_VAR 0 9
11440: PPUSH
11441: LD_VAR 0 2
11445: PPUSH
11446: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11450: LD_VAR 0 9
11454: PUSH
11455: LD_INT 0
11457: GREATER
11458: PUSH
11459: LD_VAR 0 6
11463: PUSH
11464: LD_INT 0
11466: EQUAL
11467: AND
11468: PUSH
11469: LD_VAR 0 4
11473: PUSH
11474: LD_INT 0
11476: GREATER
11477: AND
11478: IFFALSE 11525
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11480: LD_VAR 0 9
11484: PPUSH
11485: LD_VAR 0 4
11489: PUSH
11490: LD_INT 1
11492: ARRAY
11493: PPUSH
11494: LD_VAR 0 4
11498: PUSH
11499: LD_INT 2
11501: ARRAY
11502: PPUSH
11503: LD_VAR 0 4
11507: PUSH
11508: LD_INT 3
11510: ARRAY
11511: PPUSH
11512: LD_VAR 0 4
11516: PUSH
11517: LD_INT 4
11519: ARRAY
11520: PPUSH
11521: CALL_OW 145
// end ;
11525: LD_VAR 0 5
11529: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11530: LD_INT 0
11532: PPUSH
11533: PPUSH
11534: PPUSH
11535: PPUSH
11536: PPUSH
11537: PPUSH
11538: PPUSH
11539: PPUSH
11540: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11541: LD_ADDR_VAR 0 6
11545: PUSH
11546: LD_INT 22
11548: PUSH
11549: LD_VAR 0 1
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PUSH
11558: LD_INT 25
11560: PUSH
11561: LD_INT 4
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 23
11570: PUSH
11571: LD_INT 2
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 24
11580: PUSH
11581: LD_INT 251
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: PPUSH
11594: CALL_OW 69
11598: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11599: LD_ADDR_VAR 0 7
11603: PUSH
11604: LD_VAR 0 3
11608: PPUSH
11609: LD_INT 22
11611: PUSH
11612: LD_VAR 0 1
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 23
11623: PUSH
11624: LD_INT 2
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: LD_INT 25
11633: PUSH
11634: LD_INT 4
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 50
11643: PUSH
11644: EMPTY
11645: LIST
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 70
11657: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11658: LD_ADDR_VAR 0 10
11662: PUSH
11663: LD_VAR 0 3
11667: PPUSH
11668: LD_INT 22
11670: PUSH
11671: LD_VAR 0 1
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 21
11682: PUSH
11683: LD_INT 1
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 3
11692: PUSH
11693: LD_INT 25
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 3
11709: PUSH
11710: LD_INT 24
11712: PUSH
11713: LD_INT 750
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: PPUSH
11730: CALL_OW 70
11734: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11735: LD_ADDR_VAR 0 11
11739: PUSH
11740: LD_VAR 0 2
11744: PPUSH
11745: LD_INT 22
11747: PUSH
11748: LD_VAR 0 1
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: LD_INT 21
11759: PUSH
11760: LD_INT 1
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PUSH
11767: LD_INT 3
11769: PUSH
11770: LD_INT 25
11772: PUSH
11773: LD_INT 3
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 3
11786: PUSH
11787: LD_INT 24
11789: PUSH
11790: LD_INT 1000
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: PPUSH
11807: CALL_OW 70
11811: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11812: LD_VAR 0 10
11816: NOT
11817: PUSH
11818: LD_VAR 0 11
11822: NOT
11823: AND
11824: PUSH
11825: LD_VAR 0 6
11829: NOT
11830: AND
11831: IFFALSE 11835
// exit ;
11833: GO 12069
// if damageUnits > 0 and sci_list > 0 then
11835: LD_VAR 0 10
11839: PUSH
11840: LD_INT 0
11842: GREATER
11843: PUSH
11844: LD_VAR 0 6
11848: PUSH
11849: LD_INT 0
11851: GREATER
11852: AND
11853: IFFALSE 11869
// ComMoveToArea ( damageUnits , healArea ) ;
11855: LD_VAR 0 10
11859: PPUSH
11860: LD_VAR 0 2
11864: PPUSH
11865: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11869: LD_VAR 0 11
11873: PUSH
11874: LD_INT 0
11876: GREATER
11877: PUSH
11878: LD_VAR 0 6
11882: PUSH
11883: LD_INT 0
11885: GREATER
11886: AND
11887: IFFALSE 11898
// ComExitBuilding ( sci_list ) ;
11889: LD_VAR 0 6
11893: PPUSH
11894: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11898: LD_VAR 0 11
11902: PUSH
11903: LD_INT 0
11905: GREATER
11906: PUSH
11907: LD_VAR 0 7
11911: PUSH
11912: LD_INT 0
11914: GREATER
11915: AND
11916: IFFALSE 11936
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
11918: LD_VAR 0 7
11922: PPUSH
11923: LD_VAR 0 11
11927: PUSH
11928: LD_INT 1
11930: ARRAY
11931: PPUSH
11932: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11936: LD_VAR 0 10
11940: PUSH
11941: LD_INT 0
11943: EQUAL
11944: PUSH
11945: LD_VAR 0 11
11949: PUSH
11950: LD_INT 0
11952: EQUAL
11953: AND
11954: PUSH
11955: LD_VAR 0 7
11959: PUSH
11960: LD_INT 0
11962: GREATER
11963: AND
11964: IFFALSE 12069
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
11966: LD_ADDR_VAR 0 12
11970: PUSH
11971: LD_INT 22
11973: PUSH
11974: LD_VAR 0 1
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: LD_INT 21
11985: PUSH
11986: LD_INT 3
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: LD_INT 30
11995: PUSH
11996: LD_INT 8
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: LIST
12007: PPUSH
12008: CALL_OW 69
12012: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12013: LD_ADDR_VAR 0 13
12017: PUSH
12018: LD_INT 1
12020: PPUSH
12021: LD_VAR 0 12
12025: PPUSH
12026: CALL_OW 12
12030: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12031: LD_VAR 0 7
12035: PPUSH
12036: LD_INT 3
12038: PUSH
12039: LD_INT 60
12041: PUSH
12042: EMPTY
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 72
12053: PPUSH
12054: LD_VAR 0 12
12058: PUSH
12059: LD_VAR 0 13
12063: ARRAY
12064: PPUSH
12065: CALL_OW 120
// end ; end ;
12069: LD_VAR 0 5
12073: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12074: LD_INT 0
12076: PPUSH
12077: PPUSH
12078: PPUSH
12079: PPUSH
12080: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12081: LD_ADDR_VAR 0 6
12085: PUSH
12086: LD_INT 22
12088: PUSH
12089: LD_VAR 0 1
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 2
12100: PUSH
12101: LD_INT 30
12103: PUSH
12104: LD_INT 31
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 30
12113: PUSH
12114: LD_INT 32
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 30
12123: PUSH
12124: LD_INT 33
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 30
12133: PUSH
12134: LD_INT 4
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 30
12143: PUSH
12144: LD_INT 5
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PPUSH
12163: CALL_OW 69
12167: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12168: LD_ADDR_VAR 0 7
12172: PUSH
12173: LD_INT 22
12175: PUSH
12176: LD_VAR 0 2
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: LD_INT 21
12187: PUSH
12188: LD_INT 3
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 58
12197: PUSH
12198: EMPTY
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: PPUSH
12206: CALL_OW 69
12210: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12211: LD_VAR 0 6
12215: PUSH
12216: LD_INT 0
12218: GREATER
12219: PUSH
12220: LD_VAR 0 7
12224: PUSH
12225: LD_INT 0
12227: GREATER
12228: AND
12229: IFFALSE 12299
// begin for i in turretsList do
12231: LD_ADDR_VAR 0 4
12235: PUSH
12236: LD_VAR 0 6
12240: PUSH
12241: FOR_IN
12242: IFFALSE 12297
// begin for j in enemyBuildings do
12244: LD_ADDR_VAR 0 5
12248: PUSH
12249: LD_VAR 0 7
12253: PUSH
12254: FOR_IN
12255: IFFALSE 12293
// begin if GetDistUnits ( i , j ) < 20 then
12257: LD_VAR 0 4
12261: PPUSH
12262: LD_VAR 0 5
12266: PPUSH
12267: CALL_OW 296
12271: PUSH
12272: LD_INT 20
12274: LESS
12275: IFFALSE 12291
// begin ComAttackUnit ( i , j ) ;
12277: LD_VAR 0 4
12281: PPUSH
12282: LD_VAR 0 5
12286: PPUSH
12287: CALL_OW 115
// end ; end ;
12291: GO 12254
12293: POP
12294: POP
// end ;
12295: GO 12241
12297: POP
12298: POP
// end ; end ;
12299: LD_VAR 0 3
12303: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12304: LD_INT 0
12306: PPUSH
12307: PPUSH
12308: PPUSH
12309: PPUSH
12310: PPUSH
12311: PPUSH
12312: PPUSH
12313: PPUSH
12314: PPUSH
12315: PPUSH
12316: PPUSH
// for i = 1 to medicCount do
12317: LD_ADDR_VAR 0 14
12321: PUSH
12322: DOUBLE
12323: LD_INT 1
12325: DEC
12326: ST_TO_ADDR
12327: LD_VAR 0 7
12331: PUSH
12332: FOR_TO
12333: IFFALSE 12415
// begin uc_side = side ;
12335: LD_ADDR_OWVAR 20
12339: PUSH
12340: LD_VAR 0 1
12344: ST_TO_ADDR
// uc_nation = nation ;
12345: LD_ADDR_OWVAR 21
12349: PUSH
12350: LD_VAR 0 2
12354: ST_TO_ADDR
// hc_name =  ;
12355: LD_ADDR_OWVAR 26
12359: PUSH
12360: LD_STRING 
12362: ST_TO_ADDR
// hc_gallery =  ;
12363: LD_ADDR_OWVAR 33
12367: PUSH
12368: LD_STRING 
12370: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12371: LD_INT 0
12373: PPUSH
12374: LD_INT 4
12376: PPUSH
12377: LD_VAR 0 8
12381: PPUSH
12382: CALL_OW 380
// un = CreateHuman ;
12386: LD_ADDR_VAR 0 16
12390: PUSH
12391: CALL_OW 44
12395: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12396: LD_VAR 0 16
12400: PPUSH
12401: LD_VAR 0 9
12405: PPUSH
12406: LD_INT 0
12408: PPUSH
12409: CALL_OW 49
// end ;
12413: GO 12332
12415: POP
12416: POP
// for i = 1 to soldierCount do
12417: LD_ADDR_VAR 0 14
12421: PUSH
12422: DOUBLE
12423: LD_INT 1
12425: DEC
12426: ST_TO_ADDR
12427: LD_VAR 0 3
12431: PUSH
12432: FOR_TO
12433: IFFALSE 12515
// begin uc_side = side ;
12435: LD_ADDR_OWVAR 20
12439: PUSH
12440: LD_VAR 0 1
12444: ST_TO_ADDR
// uc_nation = nation ;
12445: LD_ADDR_OWVAR 21
12449: PUSH
12450: LD_VAR 0 2
12454: ST_TO_ADDR
// hc_name =  ;
12455: LD_ADDR_OWVAR 26
12459: PUSH
12460: LD_STRING 
12462: ST_TO_ADDR
// hc_gallery =  ;
12463: LD_ADDR_OWVAR 33
12467: PUSH
12468: LD_STRING 
12470: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12471: LD_INT 0
12473: PPUSH
12474: LD_INT 1
12476: PPUSH
12477: LD_VAR 0 8
12481: PPUSH
12482: CALL_OW 380
// un = CreateHuman ;
12486: LD_ADDR_VAR 0 16
12490: PUSH
12491: CALL_OW 44
12495: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12496: LD_VAR 0 16
12500: PPUSH
12501: LD_VAR 0 9
12505: PPUSH
12506: LD_INT 0
12508: PPUSH
12509: CALL_OW 49
// end ;
12513: GO 12432
12515: POP
12516: POP
// for i = 1 to sniperCount do
12517: LD_ADDR_VAR 0 14
12521: PUSH
12522: DOUBLE
12523: LD_INT 1
12525: DEC
12526: ST_TO_ADDR
12527: LD_VAR 0 4
12531: PUSH
12532: FOR_TO
12533: IFFALSE 12615
// begin uc_side = side ;
12535: LD_ADDR_OWVAR 20
12539: PUSH
12540: LD_VAR 0 1
12544: ST_TO_ADDR
// uc_nation = nation ;
12545: LD_ADDR_OWVAR 21
12549: PUSH
12550: LD_VAR 0 2
12554: ST_TO_ADDR
// hc_name =  ;
12555: LD_ADDR_OWVAR 26
12559: PUSH
12560: LD_STRING 
12562: ST_TO_ADDR
// hc_gallery =  ;
12563: LD_ADDR_OWVAR 33
12567: PUSH
12568: LD_STRING 
12570: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12571: LD_INT 0
12573: PPUSH
12574: LD_INT 5
12576: PPUSH
12577: LD_VAR 0 8
12581: PPUSH
12582: CALL_OW 380
// un = CreateHuman ;
12586: LD_ADDR_VAR 0 16
12590: PUSH
12591: CALL_OW 44
12595: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12596: LD_VAR 0 16
12600: PPUSH
12601: LD_VAR 0 9
12605: PPUSH
12606: LD_INT 0
12608: PPUSH
12609: CALL_OW 49
// end ;
12613: GO 12532
12615: POP
12616: POP
// for i = 1 to bazookCount do
12617: LD_ADDR_VAR 0 14
12621: PUSH
12622: DOUBLE
12623: LD_INT 1
12625: DEC
12626: ST_TO_ADDR
12627: LD_VAR 0 5
12631: PUSH
12632: FOR_TO
12633: IFFALSE 12715
// begin uc_side = side ;
12635: LD_ADDR_OWVAR 20
12639: PUSH
12640: LD_VAR 0 1
12644: ST_TO_ADDR
// uc_nation = nation ;
12645: LD_ADDR_OWVAR 21
12649: PUSH
12650: LD_VAR 0 2
12654: ST_TO_ADDR
// hc_name =  ;
12655: LD_ADDR_OWVAR 26
12659: PUSH
12660: LD_STRING 
12662: ST_TO_ADDR
// hc_gallery =  ;
12663: LD_ADDR_OWVAR 33
12667: PUSH
12668: LD_STRING 
12670: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12671: LD_INT 0
12673: PPUSH
12674: LD_INT 9
12676: PPUSH
12677: LD_VAR 0 8
12681: PPUSH
12682: CALL_OW 380
// un = CreateHuman ;
12686: LD_ADDR_VAR 0 16
12690: PUSH
12691: CALL_OW 44
12695: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12696: LD_VAR 0 16
12700: PPUSH
12701: LD_VAR 0 9
12705: PPUSH
12706: LD_INT 0
12708: PPUSH
12709: CALL_OW 49
// end ;
12713: GO 12632
12715: POP
12716: POP
// for i = 1 to mortalCount do
12717: LD_ADDR_VAR 0 14
12721: PUSH
12722: DOUBLE
12723: LD_INT 1
12725: DEC
12726: ST_TO_ADDR
12727: LD_VAR 0 6
12731: PUSH
12732: FOR_TO
12733: IFFALSE 12815
// begin uc_side = side ;
12735: LD_ADDR_OWVAR 20
12739: PUSH
12740: LD_VAR 0 1
12744: ST_TO_ADDR
// uc_nation = nation ;
12745: LD_ADDR_OWVAR 21
12749: PUSH
12750: LD_VAR 0 2
12754: ST_TO_ADDR
// hc_name =  ;
12755: LD_ADDR_OWVAR 26
12759: PUSH
12760: LD_STRING 
12762: ST_TO_ADDR
// hc_gallery =  ;
12763: LD_ADDR_OWVAR 33
12767: PUSH
12768: LD_STRING 
12770: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12771: LD_INT 0
12773: PPUSH
12774: LD_INT 8
12776: PPUSH
12777: LD_VAR 0 8
12781: PPUSH
12782: CALL_OW 380
// un = CreateHuman ;
12786: LD_ADDR_VAR 0 16
12790: PUSH
12791: CALL_OW 44
12795: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12796: LD_VAR 0 16
12800: PPUSH
12801: LD_VAR 0 9
12805: PPUSH
12806: LD_INT 0
12808: PPUSH
12809: CALL_OW 49
// end ;
12813: GO 12732
12815: POP
12816: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12817: LD_ADDR_VAR 0 19
12821: PUSH
12822: LD_INT 22
12824: PUSH
12825: LD_VAR 0 1
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 2
12836: PUSH
12837: LD_INT 25
12839: PUSH
12840: LD_INT 1
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: LD_INT 25
12849: PUSH
12850: LD_INT 5
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: LD_INT 25
12859: PUSH
12860: LD_INT 8
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: LD_INT 25
12869: PUSH
12870: LD_INT 9
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PPUSH
12888: CALL_OW 69
12892: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12893: LD_ADDR_VAR 0 18
12897: PUSH
12898: LD_INT 22
12900: PUSH
12901: LD_VAR 0 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 25
12912: PUSH
12913: LD_INT 4
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PPUSH
12924: CALL_OW 69
12928: ST_TO_ADDR
// for i in medic_list do
12929: LD_ADDR_VAR 0 14
12933: PUSH
12934: LD_VAR 0 18
12938: PUSH
12939: FOR_IN
12940: IFFALSE 12958
// ComMoveToArea ( i , healArea ) ;
12942: LD_VAR 0 14
12946: PPUSH
12947: LD_VAR 0 10
12951: PPUSH
12952: CALL_OW 113
12956: GO 12939
12958: POP
12959: POP
// if strategy = 1 then
12960: LD_VAR 0 12
12964: PUSH
12965: LD_INT 1
12967: EQUAL
12968: IFFALSE 13514
// begin repeat wait ( 0 0$3 ) ;
12970: LD_INT 105
12972: PPUSH
12973: CALL_OW 67
// for i in soldiersOK_list do
12977: LD_ADDR_VAR 0 14
12981: PUSH
12982: LD_VAR 0 19
12986: PUSH
12987: FOR_IN
12988: IFFALSE 13052
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12990: LD_VAR 0 14
12994: PPUSH
12995: LD_INT 91
12997: PPUSH
12998: LD_INT 63
13000: PPUSH
13001: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13005: LD_VAR 0 14
13009: PPUSH
13010: LD_INT 101
13012: PPUSH
13013: LD_INT 53
13015: PPUSH
13016: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13020: LD_VAR 0 14
13024: PPUSH
13025: LD_INT 75
13027: PPUSH
13028: LD_INT 23
13030: PPUSH
13031: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13035: LD_VAR 0 14
13039: PPUSH
13040: LD_INT 78
13042: PPUSH
13043: LD_INT 8
13045: PPUSH
13046: CALL_OW 174
// end ;
13050: GO 12987
13052: POP
13053: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13054: LD_INT 12
13056: PPUSH
13057: LD_INT 22
13059: PUSH
13060: LD_VAR 0 1
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PPUSH
13069: CALL_OW 70
13073: PUSH
13074: LD_INT 2
13076: GREATER
13077: IFFALSE 12970
// repeat wait ( 0 0$1 ) ;
13079: LD_INT 35
13081: PPUSH
13082: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13086: LD_ADDR_VAR 0 17
13090: PUSH
13091: LD_INT 22
13093: PUSH
13094: LD_VAR 0 1
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 1
13105: PUSH
13106: LD_INT 3
13108: PUSH
13109: LD_INT 24
13111: PUSH
13112: LD_INT 550
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PUSH
13123: LD_INT 24
13125: PUSH
13126: LD_INT 250
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: LIST
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PPUSH
13142: CALL_OW 69
13146: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13147: LD_ADDR_VAR 0 19
13151: PUSH
13152: LD_INT 22
13154: PUSH
13155: LD_VAR 0 1
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PUSH
13164: LD_INT 2
13166: PUSH
13167: LD_INT 25
13169: PUSH
13170: LD_INT 1
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: LD_INT 25
13179: PUSH
13180: LD_INT 5
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 25
13189: PUSH
13190: LD_INT 8
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: LD_INT 25
13199: PUSH
13200: LD_INT 9
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 24
13216: PUSH
13217: LD_INT 1000
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: LIST
13228: PPUSH
13229: CALL_OW 69
13233: ST_TO_ADDR
// if medicCount > 0 then
13234: LD_VAR 0 7
13238: PUSH
13239: LD_INT 0
13241: GREATER
13242: IFFALSE 13316
// begin if damageUnit_list > 0 then
13244: LD_VAR 0 17
13248: PUSH
13249: LD_INT 0
13251: GREATER
13252: IFFALSE 13316
// begin for i in damageUnit_list do
13254: LD_ADDR_VAR 0 14
13258: PUSH
13259: LD_VAR 0 17
13263: PUSH
13264: FOR_IN
13265: IFFALSE 13314
// begin ComMoveToArea ( i , healArea ) ;
13267: LD_VAR 0 14
13271: PPUSH
13272: LD_VAR 0 10
13276: PPUSH
13277: CALL_OW 113
// for j in medic_list do
13281: LD_ADDR_VAR 0 15
13285: PUSH
13286: LD_VAR 0 18
13290: PUSH
13291: FOR_IN
13292: IFFALSE 13310
// AddComHeal ( j , i ) ;
13294: LD_VAR 0 15
13298: PPUSH
13299: LD_VAR 0 14
13303: PPUSH
13304: CALL_OW 188
13308: GO 13291
13310: POP
13311: POP
// end ;
13312: GO 13264
13314: POP
13315: POP
// end ; end ; for i in soldiersOK_list do
13316: LD_ADDR_VAR 0 14
13320: PUSH
13321: LD_VAR 0 19
13325: PUSH
13326: FOR_IN
13327: IFFALSE 13503
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13329: LD_ADDR_VAR 0 22
13333: PUSH
13334: LD_INT 22
13336: PUSH
13337: LD_VAR 0 11
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PPUSH
13346: CALL_OW 69
13350: PPUSH
13351: LD_VAR 0 14
13355: PPUSH
13356: CALL_OW 74
13360: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13361: LD_ADDR_VAR 0 23
13365: PUSH
13366: LD_INT 22
13368: PUSH
13369: LD_VAR 0 11
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 2
13380: PUSH
13381: LD_INT 59
13383: PUSH
13384: EMPTY
13385: LIST
13386: PUSH
13387: LD_INT 21
13389: PUSH
13390: LD_INT 1
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: LD_INT 21
13399: PUSH
13400: LD_INT 2
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: EMPTY
13418: LIST
13419: PPUSH
13420: CALL_OW 69
13424: PPUSH
13425: LD_VAR 0 14
13429: PPUSH
13430: CALL_OW 74
13434: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13435: LD_VAR 0 14
13439: PPUSH
13440: LD_VAR 0 22
13444: PPUSH
13445: CALL_OW 296
13449: PUSH
13450: LD_INT 6
13452: PLUS
13453: PUSH
13454: LD_VAR 0 14
13458: PPUSH
13459: LD_VAR 0 23
13463: PPUSH
13464: CALL_OW 296
13468: LESS
13469: IFFALSE 13487
// begin ComAttackUnit ( i , target1 ) ;
13471: LD_VAR 0 14
13475: PPUSH
13476: LD_VAR 0 22
13480: PPUSH
13481: CALL_OW 115
// end else
13485: GO 13501
// begin ComAttackUnit ( i , target2 ) ;
13487: LD_VAR 0 14
13491: PPUSH
13492: LD_VAR 0 23
13496: PPUSH
13497: CALL_OW 115
// end ; end ;
13501: GO 13326
13503: POP
13504: POP
// until soldiersOK_list = [ ] ;
13505: LD_VAR 0 19
13509: PUSH
13510: EMPTY
13511: EQUAL
13512: IFFALSE 13079
// end ; if strategy = 2 then
13514: LD_VAR 0 12
13518: PUSH
13519: LD_INT 2
13521: EQUAL
13522: IFFALSE 14038
// begin repeat wait ( 0 0$1 ) ;
13524: LD_INT 35
13526: PPUSH
13527: CALL_OW 67
// for i in soldiersOK_list do
13531: LD_ADDR_VAR 0 14
13535: PUSH
13536: LD_VAR 0 19
13540: PUSH
13541: FOR_IN
13542: IFFALSE 13576
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13544: LD_VAR 0 14
13548: PPUSH
13549: LD_INT 91
13551: PPUSH
13552: LD_INT 63
13554: PPUSH
13555: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13559: LD_VAR 0 14
13563: PPUSH
13564: LD_INT 75
13566: PPUSH
13567: LD_INT 33
13569: PPUSH
13570: CALL_OW 174
// end ;
13574: GO 13541
13576: POP
13577: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13578: LD_INT 13
13580: PPUSH
13581: LD_INT 22
13583: PUSH
13584: LD_VAR 0 1
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PPUSH
13593: CALL_OW 70
13597: PUSH
13598: LD_INT 2
13600: GREATER
13601: IFFALSE 13524
// repeat wait ( 0 0$3 ) ;
13603: LD_INT 105
13605: PPUSH
13606: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13610: LD_ADDR_VAR 0 17
13614: PUSH
13615: LD_INT 22
13617: PUSH
13618: LD_VAR 0 1
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: LD_INT 1
13629: PUSH
13630: LD_INT 3
13632: PUSH
13633: LD_INT 24
13635: PUSH
13636: LD_INT 550
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 24
13649: PUSH
13650: LD_INT 250
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PPUSH
13666: CALL_OW 69
13670: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13671: LD_ADDR_VAR 0 19
13675: PUSH
13676: LD_INT 22
13678: PUSH
13679: LD_VAR 0 1
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 2
13690: PUSH
13691: LD_INT 25
13693: PUSH
13694: LD_INT 1
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: LD_INT 25
13703: PUSH
13704: LD_INT 5
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 25
13713: PUSH
13714: LD_INT 8
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 25
13723: PUSH
13724: LD_INT 9
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 24
13740: PUSH
13741: LD_INT 1000
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: PPUSH
13753: CALL_OW 69
13757: ST_TO_ADDR
// if medicCount > 0 then
13758: LD_VAR 0 7
13762: PUSH
13763: LD_INT 0
13765: GREATER
13766: IFFALSE 13840
// begin if damageUnit_list > 0 then
13768: LD_VAR 0 17
13772: PUSH
13773: LD_INT 0
13775: GREATER
13776: IFFALSE 13840
// begin for i in damageUnit_list do
13778: LD_ADDR_VAR 0 14
13782: PUSH
13783: LD_VAR 0 17
13787: PUSH
13788: FOR_IN
13789: IFFALSE 13838
// begin ComMoveToArea ( i , healArea ) ;
13791: LD_VAR 0 14
13795: PPUSH
13796: LD_VAR 0 10
13800: PPUSH
13801: CALL_OW 113
// for j in medic_list do
13805: LD_ADDR_VAR 0 15
13809: PUSH
13810: LD_VAR 0 18
13814: PUSH
13815: FOR_IN
13816: IFFALSE 13834
// AddComHeal ( j , i ) ;
13818: LD_VAR 0 15
13822: PPUSH
13823: LD_VAR 0 14
13827: PPUSH
13828: CALL_OW 188
13832: GO 13815
13834: POP
13835: POP
// end ;
13836: GO 13788
13838: POP
13839: POP
// end ; end ; for i in soldiersOK_list do
13840: LD_ADDR_VAR 0 14
13844: PUSH
13845: LD_VAR 0 19
13849: PUSH
13850: FOR_IN
13851: IFFALSE 14027
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13853: LD_ADDR_VAR 0 22
13857: PUSH
13858: LD_INT 22
13860: PUSH
13861: LD_VAR 0 11
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PPUSH
13870: CALL_OW 69
13874: PPUSH
13875: LD_VAR 0 14
13879: PPUSH
13880: CALL_OW 74
13884: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13885: LD_ADDR_VAR 0 23
13889: PUSH
13890: LD_INT 22
13892: PUSH
13893: LD_VAR 0 11
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 2
13904: PUSH
13905: LD_INT 59
13907: PUSH
13908: EMPTY
13909: LIST
13910: PUSH
13911: LD_INT 21
13913: PUSH
13914: LD_INT 1
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 21
13923: PUSH
13924: LD_INT 2
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: EMPTY
13942: LIST
13943: PPUSH
13944: CALL_OW 69
13948: PPUSH
13949: LD_VAR 0 14
13953: PPUSH
13954: CALL_OW 74
13958: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13959: LD_VAR 0 14
13963: PPUSH
13964: LD_VAR 0 22
13968: PPUSH
13969: CALL_OW 296
13973: PUSH
13974: LD_INT 6
13976: PLUS
13977: PUSH
13978: LD_VAR 0 14
13982: PPUSH
13983: LD_VAR 0 23
13987: PPUSH
13988: CALL_OW 296
13992: LESS
13993: IFFALSE 14011
// begin ComAttackUnit ( i , target1 ) ;
13995: LD_VAR 0 14
13999: PPUSH
14000: LD_VAR 0 22
14004: PPUSH
14005: CALL_OW 115
// end else
14009: GO 14025
// begin ComAttackUnit ( i , target2 ) ;
14011: LD_VAR 0 14
14015: PPUSH
14016: LD_VAR 0 23
14020: PPUSH
14021: CALL_OW 115
// end ; end ;
14025: GO 13850
14027: POP
14028: POP
// until soldiersOK_list = [ ] ;
14029: LD_VAR 0 19
14033: PUSH
14034: EMPTY
14035: EQUAL
14036: IFFALSE 13603
// end ; if strategy = 3 then
14038: LD_VAR 0 12
14042: PUSH
14043: LD_INT 3
14045: EQUAL
14046: IFFALSE 14592
// begin repeat wait ( 0 0$3 ) ;
14048: LD_INT 105
14050: PPUSH
14051: CALL_OW 67
// for i in soldiersOK_list do
14055: LD_ADDR_VAR 0 14
14059: PUSH
14060: LD_VAR 0 19
14064: PUSH
14065: FOR_IN
14066: IFFALSE 14130
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14068: LD_VAR 0 14
14072: PPUSH
14073: LD_INT 63
14075: PPUSH
14076: LD_INT 71
14078: PPUSH
14079: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14083: LD_VAR 0 14
14087: PPUSH
14088: LD_INT 35
14090: PPUSH
14091: LD_INT 44
14093: PPUSH
14094: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14098: LD_VAR 0 14
14102: PPUSH
14103: LD_INT 23
14105: PPUSH
14106: LD_INT 18
14108: PPUSH
14109: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14113: LD_VAR 0 14
14117: PPUSH
14118: LD_INT 26
14120: PPUSH
14121: LD_INT 12
14123: PPUSH
14124: CALL_OW 174
// end ;
14128: GO 14065
14130: POP
14131: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14132: LD_INT 14
14134: PPUSH
14135: LD_INT 22
14137: PUSH
14138: LD_VAR 0 1
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PPUSH
14147: CALL_OW 70
14151: PUSH
14152: LD_INT 2
14154: GREATER
14155: IFFALSE 14048
// repeat wait ( 0 0$1 ) ;
14157: LD_INT 35
14159: PPUSH
14160: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14164: LD_ADDR_VAR 0 17
14168: PUSH
14169: LD_INT 22
14171: PUSH
14172: LD_VAR 0 1
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: PUSH
14181: LD_INT 1
14183: PUSH
14184: LD_INT 3
14186: PUSH
14187: LD_INT 24
14189: PUSH
14190: LD_INT 550
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PUSH
14201: LD_INT 24
14203: PUSH
14204: LD_INT 250
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PPUSH
14220: CALL_OW 69
14224: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14225: LD_ADDR_VAR 0 19
14229: PUSH
14230: LD_INT 22
14232: PUSH
14233: LD_VAR 0 1
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 2
14244: PUSH
14245: LD_INT 25
14247: PUSH
14248: LD_INT 1
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 25
14257: PUSH
14258: LD_INT 5
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 25
14267: PUSH
14268: LD_INT 8
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: LD_INT 25
14277: PUSH
14278: LD_INT 9
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 24
14294: PUSH
14295: LD_INT 1000
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: PPUSH
14307: CALL_OW 69
14311: ST_TO_ADDR
// if medicCount > 0 then
14312: LD_VAR 0 7
14316: PUSH
14317: LD_INT 0
14319: GREATER
14320: IFFALSE 14394
// begin if damageUnit_list > 0 then
14322: LD_VAR 0 17
14326: PUSH
14327: LD_INT 0
14329: GREATER
14330: IFFALSE 14394
// begin for i in damageUnit_list do
14332: LD_ADDR_VAR 0 14
14336: PUSH
14337: LD_VAR 0 17
14341: PUSH
14342: FOR_IN
14343: IFFALSE 14392
// begin ComMoveToArea ( i , healArea ) ;
14345: LD_VAR 0 14
14349: PPUSH
14350: LD_VAR 0 10
14354: PPUSH
14355: CALL_OW 113
// for j in medic_list do
14359: LD_ADDR_VAR 0 15
14363: PUSH
14364: LD_VAR 0 18
14368: PUSH
14369: FOR_IN
14370: IFFALSE 14388
// AddComHeal ( j , i ) ;
14372: LD_VAR 0 15
14376: PPUSH
14377: LD_VAR 0 14
14381: PPUSH
14382: CALL_OW 188
14386: GO 14369
14388: POP
14389: POP
// end ;
14390: GO 14342
14392: POP
14393: POP
// end ; end ; for i in soldiersOK_list do
14394: LD_ADDR_VAR 0 14
14398: PUSH
14399: LD_VAR 0 19
14403: PUSH
14404: FOR_IN
14405: IFFALSE 14581
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14407: LD_ADDR_VAR 0 22
14411: PUSH
14412: LD_INT 22
14414: PUSH
14415: LD_VAR 0 11
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: PPUSH
14424: CALL_OW 69
14428: PPUSH
14429: LD_VAR 0 14
14433: PPUSH
14434: CALL_OW 74
14438: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14439: LD_ADDR_VAR 0 23
14443: PUSH
14444: LD_INT 22
14446: PUSH
14447: LD_VAR 0 11
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: LD_INT 2
14458: PUSH
14459: LD_INT 59
14461: PUSH
14462: EMPTY
14463: LIST
14464: PUSH
14465: LD_INT 21
14467: PUSH
14468: LD_INT 1
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 21
14477: PUSH
14478: LD_INT 2
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: EMPTY
14496: LIST
14497: PPUSH
14498: CALL_OW 69
14502: PPUSH
14503: LD_VAR 0 14
14507: PPUSH
14508: CALL_OW 74
14512: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14513: LD_VAR 0 14
14517: PPUSH
14518: LD_VAR 0 22
14522: PPUSH
14523: CALL_OW 296
14527: PUSH
14528: LD_INT 6
14530: PLUS
14531: PUSH
14532: LD_VAR 0 14
14536: PPUSH
14537: LD_VAR 0 23
14541: PPUSH
14542: CALL_OW 296
14546: LESS
14547: IFFALSE 14565
// begin ComAttackUnit ( i , target1 ) ;
14549: LD_VAR 0 14
14553: PPUSH
14554: LD_VAR 0 22
14558: PPUSH
14559: CALL_OW 115
// end else
14563: GO 14579
// begin ComAttackUnit ( i , target2 ) ;
14565: LD_VAR 0 14
14569: PPUSH
14570: LD_VAR 0 23
14574: PPUSH
14575: CALL_OW 115
// end ; end ;
14579: GO 14404
14581: POP
14582: POP
// until soldiersOK_list = [ ] ;
14583: LD_VAR 0 19
14587: PUSH
14588: EMPTY
14589: EQUAL
14590: IFFALSE 14157
// end ; end ;
14592: LD_VAR 0 13
14596: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14597: LD_INT 0
14599: PPUSH
14600: PPUSH
14601: PPUSH
14602: PPUSH
14603: PPUSH
14604: PPUSH
14605: PPUSH
14606: PPUSH
14607: PPUSH
14608: PPUSH
14609: PPUSH
// amChassisTab = [ ] ;
14610: LD_ADDR_VAR 0 19
14614: PUSH
14615: EMPTY
14616: ST_TO_ADDR
// arChassisTab = [ ] ;
14617: LD_ADDR_VAR 0 18
14621: PUSH
14622: EMPTY
14623: ST_TO_ADDR
// ruChassisTab = [ ] ;
14624: LD_ADDR_VAR 0 17
14628: PUSH
14629: EMPTY
14630: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14631: LD_INT 35
14633: PPUSH
14634: CALL_OW 67
// if nation = 1 then
14638: LD_VAR 0 5
14642: PUSH
14643: LD_INT 1
14645: EQUAL
14646: IFFALSE 15137
// begin uc_side = side ;
14648: LD_ADDR_OWVAR 20
14652: PUSH
14653: LD_VAR 0 2
14657: ST_TO_ADDR
// uc_nation = nation ;
14658: LD_ADDR_OWVAR 21
14662: PUSH
14663: LD_VAR 0 5
14667: ST_TO_ADDR
// vc_engine = vehengine ;
14668: LD_ADDR_OWVAR 39
14672: PUSH
14673: LD_VAR 0 6
14677: ST_TO_ADDR
// vc_control = vehcontrol ;
14678: LD_ADDR_OWVAR 38
14682: PUSH
14683: LD_VAR 0 7
14687: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14688: LD_ADDR_OWVAR 40
14692: PUSH
14693: LD_VAR 0 10
14697: PUSH
14698: LD_INT 1
14700: PPUSH
14701: LD_VAR 0 10
14705: PPUSH
14706: CALL_OW 12
14710: ARRAY
14711: ST_TO_ADDR
// for j = 1 to AMWeapon do
14712: LD_ADDR_VAR 0 14
14716: PUSH
14717: DOUBLE
14718: LD_INT 1
14720: DEC
14721: ST_TO_ADDR
14722: LD_VAR 0 10
14726: PUSH
14727: FOR_TO
14728: IFFALSE 15029
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14730: LD_VAR 0 10
14734: PUSH
14735: LD_VAR 0 14
14739: ARRAY
14740: PUSH
14741: LD_INT 2
14743: EQUAL
14744: PUSH
14745: LD_VAR 0 10
14749: PUSH
14750: LD_VAR 0 14
14754: ARRAY
14755: PUSH
14756: LD_INT 3
14758: EQUAL
14759: OR
14760: IFFALSE 14813
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14762: LD_ADDR_VAR 0 19
14766: PUSH
14767: LD_INT 1
14769: PUSH
14770: LD_INT 2
14772: PUSH
14773: LD_INT 3
14775: PUSH
14776: LD_INT 4
14778: PUSH
14779: LD_INT 5
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14789: LD_ADDR_OWVAR 37
14793: PUSH
14794: LD_VAR 0 19
14798: PUSH
14799: LD_INT 1
14801: PPUSH
14802: LD_VAR 0 19
14806: PPUSH
14807: CALL_OW 12
14811: ARRAY
14812: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14813: LD_VAR 0 10
14817: PUSH
14818: LD_VAR 0 14
14822: ARRAY
14823: PUSH
14824: LD_INT 4
14826: EQUAL
14827: PUSH
14828: LD_VAR 0 10
14832: PUSH
14833: LD_VAR 0 14
14837: ARRAY
14838: PUSH
14839: LD_INT 5
14841: EQUAL
14842: OR
14843: PUSH
14844: LD_VAR 0 10
14848: PUSH
14849: LD_VAR 0 14
14853: ARRAY
14854: PUSH
14855: LD_INT 9
14857: EQUAL
14858: OR
14859: PUSH
14860: LD_VAR 0 10
14864: PUSH
14865: LD_VAR 0 14
14869: ARRAY
14870: PUSH
14871: LD_INT 11
14873: EQUAL
14874: OR
14875: PUSH
14876: LD_VAR 0 10
14880: PUSH
14881: LD_VAR 0 14
14885: ARRAY
14886: PUSH
14887: LD_INT 7
14889: EQUAL
14890: OR
14891: IFFALSE 14940
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14893: LD_ADDR_VAR 0 19
14897: PUSH
14898: LD_INT 2
14900: PUSH
14901: LD_INT 3
14903: PUSH
14904: LD_INT 4
14906: PUSH
14907: LD_INT 5
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14916: LD_ADDR_OWVAR 37
14920: PUSH
14921: LD_VAR 0 19
14925: PUSH
14926: LD_INT 1
14928: PPUSH
14929: LD_VAR 0 19
14933: PPUSH
14934: CALL_OW 12
14938: ARRAY
14939: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14940: LD_VAR 0 10
14944: PUSH
14945: LD_VAR 0 14
14949: ARRAY
14950: PUSH
14951: LD_INT 8
14953: EQUAL
14954: PUSH
14955: LD_VAR 0 10
14959: PUSH
14960: LD_VAR 0 14
14964: ARRAY
14965: PUSH
14966: LD_INT 6
14968: EQUAL
14969: OR
14970: PUSH
14971: LD_VAR 0 10
14975: PUSH
14976: LD_VAR 0 14
14980: ARRAY
14981: PUSH
14982: LD_INT 10
14984: EQUAL
14985: OR
14986: IFFALSE 15027
// begin amChassisTab = [ 4 , 5 ] ;
14988: LD_ADDR_VAR 0 19
14992: PUSH
14993: LD_INT 4
14995: PUSH
14996: LD_INT 5
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15003: LD_ADDR_OWVAR 37
15007: PUSH
15008: LD_VAR 0 19
15012: PUSH
15013: LD_INT 1
15015: PPUSH
15016: LD_VAR 0 19
15020: PPUSH
15021: CALL_OW 12
15025: ARRAY
15026: ST_TO_ADDR
// end ; end ;
15027: GO 14727
15029: POP
15030: POP
// veh = CreateVehicle ;
15031: LD_ADDR_VAR 0 16
15035: PUSH
15036: CALL_OW 45
15040: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15041: LD_VAR 0 16
15045: PPUSH
15046: LD_VAR 0 1
15050: PPUSH
15051: LD_INT 0
15053: PPUSH
15054: CALL_OW 49
// if vehControl = 1 then
15058: LD_VAR 0 7
15062: PUSH
15063: LD_INT 1
15065: EQUAL
15066: IFFALSE 15123
// begin hc_gallery =  ;
15068: LD_ADDR_OWVAR 33
15072: PUSH
15073: LD_STRING 
15075: ST_TO_ADDR
// hc_name =  ;
15076: LD_ADDR_OWVAR 26
15080: PUSH
15081: LD_STRING 
15083: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15084: LD_INT 0
15086: PPUSH
15087: LD_INT 3
15089: PPUSH
15090: LD_VAR 0 4
15094: PPUSH
15095: CALL_OW 380
// un = CreateHuman ;
15099: LD_ADDR_VAR 0 15
15103: PUSH
15104: CALL_OW 44
15108: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15109: LD_VAR 0 15
15113: PPUSH
15114: LD_VAR 0 16
15118: PPUSH
15119: CALL_OW 52
// end ; i = i + 1 ;
15123: LD_ADDR_VAR 0 13
15127: PUSH
15128: LD_VAR 0 13
15132: PUSH
15133: LD_INT 1
15135: PLUS
15136: ST_TO_ADDR
// end ; if nation = 2 then
15137: LD_VAR 0 5
15141: PUSH
15142: LD_INT 2
15144: EQUAL
15145: IFFALSE 15569
// begin uc_side = side ;
15147: LD_ADDR_OWVAR 20
15151: PUSH
15152: LD_VAR 0 2
15156: ST_TO_ADDR
// uc_nation = nation ;
15157: LD_ADDR_OWVAR 21
15161: PUSH
15162: LD_VAR 0 5
15166: ST_TO_ADDR
// vc_engine = vehengine ;
15167: LD_ADDR_OWVAR 39
15171: PUSH
15172: LD_VAR 0 6
15176: ST_TO_ADDR
// vc_control = vehcontrol ;
15177: LD_ADDR_OWVAR 38
15181: PUSH
15182: LD_VAR 0 7
15186: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15187: LD_ADDR_OWVAR 40
15191: PUSH
15192: LD_VAR 0 9
15196: PUSH
15197: LD_INT 1
15199: PPUSH
15200: LD_VAR 0 9
15204: PPUSH
15205: CALL_OW 12
15209: ARRAY
15210: ST_TO_ADDR
// for j = 1 to ARWeapons do
15211: LD_ADDR_VAR 0 14
15215: PUSH
15216: DOUBLE
15217: LD_INT 1
15219: DEC
15220: ST_TO_ADDR
15221: LD_VAR 0 9
15225: PUSH
15226: FOR_TO
15227: IFFALSE 15461
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15229: LD_VAR 0 9
15233: PUSH
15234: LD_VAR 0 14
15238: ARRAY
15239: PUSH
15240: LD_INT 24
15242: EQUAL
15243: PUSH
15244: LD_VAR 0 9
15248: PUSH
15249: LD_VAR 0 14
15253: ARRAY
15254: PUSH
15255: LD_INT 22
15257: EQUAL
15258: OR
15259: PUSH
15260: LD_VAR 0 9
15264: PUSH
15265: LD_VAR 0 14
15269: ARRAY
15270: PUSH
15271: LD_INT 23
15273: EQUAL
15274: OR
15275: PUSH
15276: LD_VAR 0 9
15280: PUSH
15281: LD_VAR 0 14
15285: ARRAY
15286: PUSH
15287: LD_INT 30
15289: EQUAL
15290: OR
15291: IFFALSE 15340
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15293: LD_ADDR_VAR 0 18
15297: PUSH
15298: LD_INT 11
15300: PUSH
15301: LD_INT 12
15303: PUSH
15304: LD_INT 13
15306: PUSH
15307: LD_INT 14
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15316: LD_ADDR_OWVAR 37
15320: PUSH
15321: LD_VAR 0 18
15325: PUSH
15326: LD_INT 1
15328: PPUSH
15329: LD_VAR 0 18
15333: PPUSH
15334: CALL_OW 12
15338: ARRAY
15339: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15340: LD_VAR 0 9
15344: PUSH
15345: LD_VAR 0 14
15349: ARRAY
15350: PUSH
15351: LD_INT 29
15353: EQUAL
15354: PUSH
15355: LD_VAR 0 9
15359: PUSH
15360: LD_VAR 0 14
15364: ARRAY
15365: PUSH
15366: LD_INT 28
15368: EQUAL
15369: OR
15370: PUSH
15371: LD_VAR 0 9
15375: PUSH
15376: LD_VAR 0 14
15380: ARRAY
15381: PUSH
15382: LD_INT 27
15384: EQUAL
15385: OR
15386: PUSH
15387: LD_VAR 0 9
15391: PUSH
15392: LD_VAR 0 14
15396: ARRAY
15397: PUSH
15398: LD_INT 26
15400: EQUAL
15401: OR
15402: PUSH
15403: LD_VAR 0 9
15407: PUSH
15408: LD_VAR 0 14
15412: ARRAY
15413: PUSH
15414: LD_INT 25
15416: EQUAL
15417: OR
15418: IFFALSE 15459
// begin arChassisTab = [ 13 , 14 ] ;
15420: LD_ADDR_VAR 0 18
15424: PUSH
15425: LD_INT 13
15427: PUSH
15428: LD_INT 14
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15435: LD_ADDR_OWVAR 37
15439: PUSH
15440: LD_VAR 0 18
15444: PUSH
15445: LD_INT 1
15447: PPUSH
15448: LD_VAR 0 18
15452: PPUSH
15453: CALL_OW 12
15457: ARRAY
15458: ST_TO_ADDR
// end ; end ;
15459: GO 15226
15461: POP
15462: POP
// veh = CreateVehicle ;
15463: LD_ADDR_VAR 0 16
15467: PUSH
15468: CALL_OW 45
15472: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15473: LD_VAR 0 16
15477: PPUSH
15478: LD_VAR 0 1
15482: PPUSH
15483: LD_INT 0
15485: PPUSH
15486: CALL_OW 49
// if vehcontrol = 1 then
15490: LD_VAR 0 7
15494: PUSH
15495: LD_INT 1
15497: EQUAL
15498: IFFALSE 15555
// begin hc_gallery =  ;
15500: LD_ADDR_OWVAR 33
15504: PUSH
15505: LD_STRING 
15507: ST_TO_ADDR
// hc_name =  ;
15508: LD_ADDR_OWVAR 26
15512: PUSH
15513: LD_STRING 
15515: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15516: LD_INT 0
15518: PPUSH
15519: LD_INT 3
15521: PPUSH
15522: LD_VAR 0 4
15526: PPUSH
15527: CALL_OW 380
// un = CreateHuman ;
15531: LD_ADDR_VAR 0 15
15535: PUSH
15536: CALL_OW 44
15540: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15541: LD_VAR 0 15
15545: PPUSH
15546: LD_VAR 0 16
15550: PPUSH
15551: CALL_OW 52
// end ; i = i + 1 ;
15555: LD_ADDR_VAR 0 13
15559: PUSH
15560: LD_VAR 0 13
15564: PUSH
15565: LD_INT 1
15567: PLUS
15568: ST_TO_ADDR
// end ; if nation = 3 then
15569: LD_VAR 0 5
15573: PUSH
15574: LD_INT 3
15576: EQUAL
15577: IFFALSE 15969
// begin uc_side = side ;
15579: LD_ADDR_OWVAR 20
15583: PUSH
15584: LD_VAR 0 2
15588: ST_TO_ADDR
// uc_nation = nation ;
15589: LD_ADDR_OWVAR 21
15593: PUSH
15594: LD_VAR 0 5
15598: ST_TO_ADDR
// vc_engine = vehengine ;
15599: LD_ADDR_OWVAR 39
15603: PUSH
15604: LD_VAR 0 6
15608: ST_TO_ADDR
// vc_control = vehcontrol ;
15609: LD_ADDR_OWVAR 38
15613: PUSH
15614: LD_VAR 0 7
15618: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15619: LD_ADDR_OWVAR 40
15623: PUSH
15624: LD_VAR 0 8
15628: PUSH
15629: LD_INT 1
15631: PPUSH
15632: LD_VAR 0 8
15636: PPUSH
15637: CALL_OW 12
15641: ARRAY
15642: ST_TO_ADDR
// for j = 1 to RuWeapons do
15643: LD_ADDR_VAR 0 14
15647: PUSH
15648: DOUBLE
15649: LD_INT 1
15651: DEC
15652: ST_TO_ADDR
15653: LD_VAR 0 8
15657: PUSH
15658: FOR_TO
15659: IFFALSE 15861
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15661: LD_VAR 0 8
15665: PUSH
15666: LD_VAR 0 14
15670: ARRAY
15671: PUSH
15672: LD_INT 42
15674: EQUAL
15675: PUSH
15676: LD_VAR 0 8
15680: PUSH
15681: LD_VAR 0 14
15685: ARRAY
15686: PUSH
15687: LD_INT 43
15689: EQUAL
15690: OR
15691: PUSH
15692: LD_VAR 0 8
15696: PUSH
15697: LD_VAR 0 14
15701: ARRAY
15702: PUSH
15703: LD_INT 44
15705: EQUAL
15706: OR
15707: PUSH
15708: LD_VAR 0 8
15712: PUSH
15713: LD_VAR 0 14
15717: ARRAY
15718: PUSH
15719: LD_INT 45
15721: EQUAL
15722: OR
15723: PUSH
15724: LD_VAR 0 8
15728: PUSH
15729: LD_VAR 0 14
15733: ARRAY
15734: PUSH
15735: LD_INT 49
15737: EQUAL
15738: OR
15739: IFFALSE 15788
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15741: LD_ADDR_VAR 0 17
15745: PUSH
15746: LD_INT 21
15748: PUSH
15749: LD_INT 22
15751: PUSH
15752: LD_INT 23
15754: PUSH
15755: LD_INT 24
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15764: LD_ADDR_OWVAR 37
15768: PUSH
15769: LD_VAR 0 17
15773: PUSH
15774: LD_INT 1
15776: PPUSH
15777: LD_VAR 0 17
15781: PPUSH
15782: CALL_OW 12
15786: ARRAY
15787: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15788: LD_VAR 0 8
15792: PUSH
15793: LD_VAR 0 14
15797: ARRAY
15798: PUSH
15799: LD_INT 46
15801: EQUAL
15802: PUSH
15803: LD_VAR 0 8
15807: PUSH
15808: LD_VAR 0 14
15812: ARRAY
15813: PUSH
15814: LD_INT 47
15816: EQUAL
15817: OR
15818: IFFALSE 15859
// begin ruChassisTab = [ 23 , 24 ] ;
15820: LD_ADDR_VAR 0 17
15824: PUSH
15825: LD_INT 23
15827: PUSH
15828: LD_INT 24
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15835: LD_ADDR_OWVAR 37
15839: PUSH
15840: LD_VAR 0 17
15844: PUSH
15845: LD_INT 1
15847: PPUSH
15848: LD_VAR 0 17
15852: PPUSH
15853: CALL_OW 12
15857: ARRAY
15858: ST_TO_ADDR
// end ; end ;
15859: GO 15658
15861: POP
15862: POP
// veh = CreateVehicle ;
15863: LD_ADDR_VAR 0 16
15867: PUSH
15868: CALL_OW 45
15872: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15873: LD_VAR 0 16
15877: PPUSH
15878: LD_VAR 0 1
15882: PPUSH
15883: LD_INT 0
15885: PPUSH
15886: CALL_OW 49
// if vehcontrol = 1 then
15890: LD_VAR 0 7
15894: PUSH
15895: LD_INT 1
15897: EQUAL
15898: IFFALSE 15955
// begin hc_gallery =  ;
15900: LD_ADDR_OWVAR 33
15904: PUSH
15905: LD_STRING 
15907: ST_TO_ADDR
// hc_name =  ;
15908: LD_ADDR_OWVAR 26
15912: PUSH
15913: LD_STRING 
15915: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15916: LD_INT 0
15918: PPUSH
15919: LD_INT 3
15921: PPUSH
15922: LD_VAR 0 4
15926: PPUSH
15927: CALL_OW 380
// un = CreateHuman ;
15931: LD_ADDR_VAR 0 15
15935: PUSH
15936: CALL_OW 44
15940: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15941: LD_VAR 0 15
15945: PPUSH
15946: LD_VAR 0 16
15950: PPUSH
15951: CALL_OW 52
// end ; i = i + 1 ;
15955: LD_ADDR_VAR 0 13
15959: PUSH
15960: LD_VAR 0 13
15964: PUSH
15965: LD_INT 1
15967: PLUS
15968: ST_TO_ADDR
// end ; until i = vehCount ;
15969: LD_VAR 0 13
15973: PUSH
15974: LD_VAR 0 3
15978: EQUAL
15979: IFFALSE 14631
// repeat wait ( 0 0$1 ) ;
15981: LD_INT 35
15983: PPUSH
15984: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
15988: LD_ADDR_VAR 0 20
15992: PUSH
15993: LD_INT 22
15995: PUSH
15996: LD_VAR 0 2
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: LD_INT 21
16007: PUSH
16008: LD_INT 2
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 24
16017: PUSH
16018: LD_INT 250
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: LIST
16029: PPUSH
16030: CALL_OW 69
16034: ST_TO_ADDR
// if vehicleOK_list > 0 then
16035: LD_VAR 0 20
16039: PUSH
16040: LD_INT 0
16042: GREATER
16043: IFFALSE 16234
// begin for i in vehicleOK_list do
16045: LD_ADDR_VAR 0 13
16049: PUSH
16050: LD_VAR 0 20
16054: PUSH
16055: FOR_IN
16056: IFFALSE 16232
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16058: LD_ADDR_VAR 0 21
16062: PUSH
16063: LD_INT 22
16065: PUSH
16066: LD_VAR 0 11
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PPUSH
16075: CALL_OW 69
16079: PPUSH
16080: LD_VAR 0 13
16084: PPUSH
16085: CALL_OW 74
16089: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16090: LD_ADDR_VAR 0 22
16094: PUSH
16095: LD_INT 22
16097: PUSH
16098: LD_VAR 0 11
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: LD_INT 2
16109: PUSH
16110: LD_INT 59
16112: PUSH
16113: EMPTY
16114: LIST
16115: PUSH
16116: LD_INT 21
16118: PUSH
16119: LD_INT 1
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PUSH
16126: LD_INT 21
16128: PUSH
16129: LD_INT 2
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PUSH
16146: EMPTY
16147: LIST
16148: PPUSH
16149: CALL_OW 69
16153: PPUSH
16154: LD_VAR 0 13
16158: PPUSH
16159: CALL_OW 74
16163: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16164: LD_VAR 0 13
16168: PPUSH
16169: LD_VAR 0 21
16173: PPUSH
16174: CALL_OW 296
16178: PUSH
16179: LD_INT 6
16181: PLUS
16182: PUSH
16183: LD_VAR 0 13
16187: PPUSH
16188: LD_VAR 0 22
16192: PPUSH
16193: CALL_OW 296
16197: LESS
16198: IFFALSE 16216
// begin ComAttackUnit ( i , target1 ) ;
16200: LD_VAR 0 13
16204: PPUSH
16205: LD_VAR 0 21
16209: PPUSH
16210: CALL_OW 115
// end else
16214: GO 16230
// begin ComAttackUnit ( i , target2 ) ;
16216: LD_VAR 0 13
16220: PPUSH
16221: LD_VAR 0 22
16225: PPUSH
16226: CALL_OW 115
// end ; end ;
16230: GO 16055
16232: POP
16233: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16234: LD_INT 22
16236: PUSH
16237: LD_VAR 0 2
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 21
16248: PUSH
16249: LD_INT 2
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: LD_INT 24
16258: PUSH
16259: LD_INT 250
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: LIST
16270: PPUSH
16271: CALL_OW 69
16275: PUSH
16276: LD_INT 0
16278: EQUAL
16279: IFFALSE 15981
// end ;
16281: LD_VAR 0 12
16285: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16286: LD_INT 0
16288: PPUSH
16289: PPUSH
16290: PPUSH
16291: PPUSH
16292: PPUSH
16293: PPUSH
16294: PPUSH
16295: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16296: LD_ADDR_VAR 0 7
16300: PUSH
16301: LD_INT 22
16303: PUSH
16304: LD_VAR 0 1
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: LD_INT 3
16318: PUSH
16319: LD_INT 24
16321: PUSH
16322: LD_INT 550
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 24
16335: PUSH
16336: LD_INT 250
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: LIST
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PPUSH
16352: CALL_OW 69
16356: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16357: LD_ADDR_VAR 0 8
16361: PUSH
16362: LD_INT 22
16364: PUSH
16365: LD_VAR 0 1
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 2
16376: PUSH
16377: LD_INT 25
16379: PUSH
16380: LD_INT 1
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 25
16389: PUSH
16390: LD_INT 5
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 25
16399: PUSH
16400: LD_INT 8
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: LD_INT 25
16409: PUSH
16410: LD_INT 9
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 24
16426: PUSH
16427: LD_INT 1000
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: PPUSH
16439: CALL_OW 69
16443: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16444: LD_ADDR_VAR 0 9
16448: PUSH
16449: LD_INT 22
16451: PUSH
16452: LD_VAR 0 1
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 25
16463: PUSH
16464: LD_INT 4
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PPUSH
16475: CALL_OW 69
16479: ST_TO_ADDR
// if medicCount > 0 then
16480: LD_VAR 0 9
16484: PUSH
16485: LD_INT 0
16487: GREATER
16488: IFFALSE 16562
// begin if damageUnit_list > 0 then
16490: LD_VAR 0 7
16494: PUSH
16495: LD_INT 0
16497: GREATER
16498: IFFALSE 16562
// begin for i in damageUnit_list do
16500: LD_ADDR_VAR 0 5
16504: PUSH
16505: LD_VAR 0 7
16509: PUSH
16510: FOR_IN
16511: IFFALSE 16560
// begin ComMoveToArea ( i , healArea ) ;
16513: LD_VAR 0 5
16517: PPUSH
16518: LD_VAR 0 2
16522: PPUSH
16523: CALL_OW 113
// for j in medicCount do
16527: LD_ADDR_VAR 0 6
16531: PUSH
16532: LD_VAR 0 9
16536: PUSH
16537: FOR_IN
16538: IFFALSE 16556
// AddComHeal ( j , i ) ;
16540: LD_VAR 0 6
16544: PPUSH
16545: LD_VAR 0 5
16549: PPUSH
16550: CALL_OW 188
16554: GO 16537
16556: POP
16557: POP
// end ;
16558: GO 16510
16560: POP
16561: POP
// end ; end ; if soldiersOK_list > 0 then
16562: LD_VAR 0 8
16566: PUSH
16567: LD_INT 0
16569: GREATER
16570: IFFALSE 16761
// begin for i in soldiersOK_list do
16572: LD_ADDR_VAR 0 5
16576: PUSH
16577: LD_VAR 0 8
16581: PUSH
16582: FOR_IN
16583: IFFALSE 16759
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16585: LD_ADDR_VAR 0 10
16589: PUSH
16590: LD_INT 22
16592: PUSH
16593: LD_VAR 0 3
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PPUSH
16602: CALL_OW 69
16606: PPUSH
16607: LD_VAR 0 5
16611: PPUSH
16612: CALL_OW 74
16616: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16617: LD_ADDR_VAR 0 11
16621: PUSH
16622: LD_INT 22
16624: PUSH
16625: LD_VAR 0 3
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 2
16636: PUSH
16637: LD_INT 59
16639: PUSH
16640: EMPTY
16641: LIST
16642: PUSH
16643: LD_INT 21
16645: PUSH
16646: LD_INT 1
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 21
16655: PUSH
16656: LD_INT 2
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: EMPTY
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: PPUSH
16681: LD_VAR 0 5
16685: PPUSH
16686: CALL_OW 74
16690: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16691: LD_VAR 0 5
16695: PPUSH
16696: LD_VAR 0 10
16700: PPUSH
16701: CALL_OW 296
16705: PUSH
16706: LD_INT 8
16708: PLUS
16709: PUSH
16710: LD_VAR 0 5
16714: PPUSH
16715: LD_VAR 0 11
16719: PPUSH
16720: CALL_OW 296
16724: LESS
16725: IFFALSE 16743
// begin ComAttackUnit ( i , target1 ) ;
16727: LD_VAR 0 5
16731: PPUSH
16732: LD_VAR 0 10
16736: PPUSH
16737: CALL_OW 115
// end else
16741: GO 16757
// begin ComAttackUnit ( i , target2 ) ;
16743: LD_VAR 0 5
16747: PPUSH
16748: LD_VAR 0 11
16752: PPUSH
16753: CALL_OW 115
// end ; end ;
16757: GO 16582
16759: POP
16760: POP
// end ; end ;
16761: LD_VAR 0 4
16765: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16766: LD_INT 0
16768: PPUSH
16769: PPUSH
// list := [ ] ;
16770: LD_ADDR_VAR 0 5
16774: PUSH
16775: EMPTY
16776: ST_TO_ADDR
// case d of 0 :
16777: LD_VAR 0 3
16781: PUSH
16782: LD_INT 0
16784: DOUBLE
16785: EQUAL
16786: IFTRUE 16790
16788: GO 16923
16790: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16791: LD_ADDR_VAR 0 5
16795: PUSH
16796: LD_VAR 0 1
16800: PUSH
16801: LD_INT 4
16803: MINUS
16804: PUSH
16805: LD_VAR 0 2
16809: PUSH
16810: LD_INT 4
16812: MINUS
16813: PUSH
16814: LD_INT 2
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: LIST
16821: PUSH
16822: LD_VAR 0 1
16826: PUSH
16827: LD_INT 3
16829: MINUS
16830: PUSH
16831: LD_VAR 0 2
16835: PUSH
16836: LD_INT 1
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: LIST
16843: PUSH
16844: LD_VAR 0 1
16848: PUSH
16849: LD_INT 4
16851: PLUS
16852: PUSH
16853: LD_VAR 0 2
16857: PUSH
16858: LD_INT 4
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: LIST
16865: PUSH
16866: LD_VAR 0 1
16870: PUSH
16871: LD_INT 3
16873: PLUS
16874: PUSH
16875: LD_VAR 0 2
16879: PUSH
16880: LD_INT 3
16882: PLUS
16883: PUSH
16884: LD_INT 5
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: LIST
16891: PUSH
16892: LD_VAR 0 1
16896: PUSH
16897: LD_VAR 0 2
16901: PUSH
16902: LD_INT 4
16904: PLUS
16905: PUSH
16906: LD_INT 0
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: ST_TO_ADDR
// end ; 1 :
16921: GO 17621
16923: LD_INT 1
16925: DOUBLE
16926: EQUAL
16927: IFTRUE 16931
16929: GO 17064
16931: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
16932: LD_ADDR_VAR 0 5
16936: PUSH
16937: LD_VAR 0 1
16941: PUSH
16942: LD_VAR 0 2
16946: PUSH
16947: LD_INT 4
16949: MINUS
16950: PUSH
16951: LD_INT 3
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: LIST
16958: PUSH
16959: LD_VAR 0 1
16963: PUSH
16964: LD_INT 3
16966: MINUS
16967: PUSH
16968: LD_VAR 0 2
16972: PUSH
16973: LD_INT 3
16975: MINUS
16976: PUSH
16977: LD_INT 2
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: LIST
16984: PUSH
16985: LD_VAR 0 1
16989: PUSH
16990: LD_INT 4
16992: MINUS
16993: PUSH
16994: LD_VAR 0 2
16998: PUSH
16999: LD_INT 1
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: LIST
17006: PUSH
17007: LD_VAR 0 1
17011: PUSH
17012: LD_VAR 0 2
17016: PUSH
17017: LD_INT 3
17019: PLUS
17020: PUSH
17021: LD_INT 0
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: LIST
17028: PUSH
17029: LD_VAR 0 1
17033: PUSH
17034: LD_INT 4
17036: PLUS
17037: PUSH
17038: LD_VAR 0 2
17042: PUSH
17043: LD_INT 4
17045: PLUS
17046: PUSH
17047: LD_INT 5
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: LIST
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: ST_TO_ADDR
// end ; 2 :
17062: GO 17621
17064: LD_INT 2
17066: DOUBLE
17067: EQUAL
17068: IFTRUE 17072
17070: GO 17201
17072: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
17073: LD_ADDR_VAR 0 5
17077: PUSH
17078: LD_VAR 0 1
17082: PUSH
17083: LD_VAR 0 2
17087: PUSH
17088: LD_INT 3
17090: MINUS
17091: PUSH
17092: LD_INT 3
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: PUSH
17100: LD_VAR 0 1
17104: PUSH
17105: LD_INT 4
17107: PLUS
17108: PUSH
17109: LD_VAR 0 2
17113: PUSH
17114: LD_INT 4
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: LIST
17121: PUSH
17122: LD_VAR 0 1
17126: PUSH
17127: LD_VAR 0 2
17131: PUSH
17132: LD_INT 4
17134: PLUS
17135: PUSH
17136: LD_INT 0
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: LIST
17143: PUSH
17144: LD_VAR 0 1
17148: PUSH
17149: LD_INT 3
17151: MINUS
17152: PUSH
17153: LD_VAR 0 2
17157: PUSH
17158: LD_INT 1
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: LIST
17165: PUSH
17166: LD_VAR 0 1
17170: PUSH
17171: LD_INT 4
17173: MINUS
17174: PUSH
17175: LD_VAR 0 2
17179: PUSH
17180: LD_INT 4
17182: MINUS
17183: PUSH
17184: LD_INT 2
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: LIST
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: ST_TO_ADDR
// end ; 3 :
17199: GO 17621
17201: LD_INT 3
17203: DOUBLE
17204: EQUAL
17205: IFTRUE 17209
17207: GO 17342
17209: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
17210: LD_ADDR_VAR 0 5
17214: PUSH
17215: LD_VAR 0 1
17219: PUSH
17220: LD_INT 3
17222: PLUS
17223: PUSH
17224: LD_VAR 0 2
17228: PUSH
17229: LD_INT 4
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: LIST
17236: PUSH
17237: LD_VAR 0 1
17241: PUSH
17242: LD_INT 4
17244: PLUS
17245: PUSH
17246: LD_VAR 0 2
17250: PUSH
17251: LD_INT 4
17253: PLUS
17254: PUSH
17255: LD_INT 5
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: LIST
17262: PUSH
17263: LD_VAR 0 1
17267: PUSH
17268: LD_INT 4
17270: MINUS
17271: PUSH
17272: LD_VAR 0 2
17276: PUSH
17277: LD_INT 1
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: LIST
17284: PUSH
17285: LD_VAR 0 1
17289: PUSH
17290: LD_VAR 0 2
17294: PUSH
17295: LD_INT 4
17297: MINUS
17298: PUSH
17299: LD_INT 3
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: LIST
17306: PUSH
17307: LD_VAR 0 1
17311: PUSH
17312: LD_INT 3
17314: MINUS
17315: PUSH
17316: LD_VAR 0 2
17320: PUSH
17321: LD_INT 3
17323: MINUS
17324: PUSH
17325: LD_INT 2
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: LIST
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: ST_TO_ADDR
// end ; 4 :
17340: GO 17621
17342: LD_INT 4
17344: DOUBLE
17345: EQUAL
17346: IFTRUE 17350
17348: GO 17483
17350: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
17351: LD_ADDR_VAR 0 5
17355: PUSH
17356: LD_VAR 0 1
17360: PUSH
17361: LD_VAR 0 2
17365: PUSH
17366: LD_INT 4
17368: PLUS
17369: PUSH
17370: LD_INT 0
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: LIST
17377: PUSH
17378: LD_VAR 0 1
17382: PUSH
17383: LD_INT 3
17385: PLUS
17386: PUSH
17387: LD_VAR 0 2
17391: PUSH
17392: LD_INT 3
17394: PLUS
17395: PUSH
17396: LD_INT 5
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: LIST
17403: PUSH
17404: LD_VAR 0 1
17408: PUSH
17409: LD_INT 3
17411: PLUS
17412: PUSH
17413: LD_VAR 0 2
17417: PUSH
17418: LD_INT 4
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: LIST
17425: PUSH
17426: LD_VAR 0 1
17430: PUSH
17431: LD_VAR 0 2
17435: PUSH
17436: LD_INT 3
17438: MINUS
17439: PUSH
17440: LD_INT 3
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: PUSH
17448: LD_VAR 0 1
17452: PUSH
17453: LD_INT 4
17455: MINUS
17456: PUSH
17457: LD_VAR 0 2
17461: PUSH
17462: LD_INT 4
17464: MINUS
17465: PUSH
17466: LD_INT 2
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: LIST
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: ST_TO_ADDR
// end ; 5 :
17481: GO 17621
17483: LD_INT 5
17485: DOUBLE
17486: EQUAL
17487: IFTRUE 17491
17489: GO 17620
17491: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
17492: LD_ADDR_VAR 0 5
17496: PUSH
17497: LD_VAR 0 1
17501: PUSH
17502: LD_INT 4
17504: MINUS
17505: PUSH
17506: LD_VAR 0 2
17510: PUSH
17511: LD_INT 1
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: LIST
17518: PUSH
17519: LD_VAR 0 1
17523: PUSH
17524: LD_VAR 0 2
17528: PUSH
17529: LD_INT 4
17531: MINUS
17532: PUSH
17533: LD_INT 3
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: PUSH
17541: LD_VAR 0 1
17545: PUSH
17546: LD_INT 4
17548: PLUS
17549: PUSH
17550: LD_VAR 0 2
17554: PUSH
17555: LD_INT 4
17557: PLUS
17558: PUSH
17559: LD_INT 5
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: LIST
17566: PUSH
17567: LD_VAR 0 1
17571: PUSH
17572: LD_INT 3
17574: PLUS
17575: PUSH
17576: LD_VAR 0 2
17580: PUSH
17581: LD_INT 4
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: LIST
17588: PUSH
17589: LD_VAR 0 1
17593: PUSH
17594: LD_VAR 0 2
17598: PUSH
17599: LD_INT 3
17601: PLUS
17602: PUSH
17603: LD_INT 0
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: ST_TO_ADDR
// end ; end ;
17618: GO 17621
17620: POP
// result := list ;
17621: LD_ADDR_VAR 0 4
17625: PUSH
17626: LD_VAR 0 5
17630: ST_TO_ADDR
// end ;
17631: LD_VAR 0 4
17635: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17636: LD_INT 0
17638: PPUSH
17639: PPUSH
17640: PPUSH
17641: PPUSH
17642: PPUSH
17643: PPUSH
17644: PPUSH
17645: PPUSH
17646: PPUSH
// result := false ;
17647: LD_ADDR_VAR 0 7
17651: PUSH
17652: LD_INT 0
17654: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17655: LD_VAR 0 1
17659: NOT
17660: PUSH
17661: LD_VAR 0 1
17665: PPUSH
17666: CALL_OW 266
17670: PUSH
17671: LD_INT 0
17673: PUSH
17674: LD_INT 1
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: IN
17681: NOT
17682: OR
17683: PUSH
17684: LD_VAR 0 2
17688: NOT
17689: OR
17690: PUSH
17691: LD_VAR 0 5
17695: PUSH
17696: LD_INT 0
17698: PUSH
17699: LD_INT 1
17701: PUSH
17702: LD_INT 2
17704: PUSH
17705: LD_INT 3
17707: PUSH
17708: LD_INT 4
17710: PUSH
17711: LD_INT 5
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: IN
17722: NOT
17723: OR
17724: PUSH
17725: LD_VAR 0 3
17729: PPUSH
17730: LD_VAR 0 4
17734: PPUSH
17735: CALL_OW 488
17739: NOT
17740: OR
17741: IFFALSE 17745
// exit ;
17743: GO 18426
// pom := GetBase ( bdepot ) ;
17745: LD_ADDR_VAR 0 10
17749: PUSH
17750: LD_VAR 0 1
17754: PPUSH
17755: CALL_OW 274
17759: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17760: LD_ADDR_VAR 0 11
17764: PUSH
17765: LD_VAR 0 2
17769: PPUSH
17770: LD_VAR 0 1
17774: PPUSH
17775: CALL_OW 248
17779: PPUSH
17780: CALL_OW 450
17784: ST_TO_ADDR
// if check_cost then
17785: LD_VAR 0 6
17789: IFFALSE 17866
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17791: LD_VAR 0 10
17795: PPUSH
17796: LD_INT 1
17798: PPUSH
17799: CALL_OW 275
17803: PUSH
17804: LD_VAR 0 11
17808: PUSH
17809: LD_INT 1
17811: ARRAY
17812: GREATEREQUAL
17813: PUSH
17814: LD_VAR 0 10
17818: PPUSH
17819: LD_INT 2
17821: PPUSH
17822: CALL_OW 275
17826: PUSH
17827: LD_VAR 0 11
17831: PUSH
17832: LD_INT 2
17834: ARRAY
17835: GREATEREQUAL
17836: AND
17837: PUSH
17838: LD_VAR 0 10
17842: PPUSH
17843: LD_INT 3
17845: PPUSH
17846: CALL_OW 275
17850: PUSH
17851: LD_VAR 0 11
17855: PUSH
17856: LD_INT 3
17858: ARRAY
17859: GREATEREQUAL
17860: AND
17861: NOT
17862: IFFALSE 17866
// exit ;
17864: GO 18426
// if GetBType ( bdepot ) = b_depot then
17866: LD_VAR 0 1
17870: PPUSH
17871: CALL_OW 266
17875: PUSH
17876: LD_INT 0
17878: EQUAL
17879: IFFALSE 17891
// dist := 28 else
17881: LD_ADDR_VAR 0 14
17885: PUSH
17886: LD_INT 28
17888: ST_TO_ADDR
17889: GO 17899
// dist := 36 ;
17891: LD_ADDR_VAR 0 14
17895: PUSH
17896: LD_INT 36
17898: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17899: LD_VAR 0 1
17903: PPUSH
17904: LD_VAR 0 3
17908: PPUSH
17909: LD_VAR 0 4
17913: PPUSH
17914: CALL_OW 297
17918: PUSH
17919: LD_VAR 0 14
17923: GREATER
17924: IFFALSE 17928
// exit ;
17926: GO 18426
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17928: LD_ADDR_VAR 0 12
17932: PUSH
17933: LD_VAR 0 2
17937: PPUSH
17938: LD_VAR 0 3
17942: PPUSH
17943: LD_VAR 0 4
17947: PPUSH
17948: LD_VAR 0 5
17952: PPUSH
17953: LD_VAR 0 1
17957: PPUSH
17958: CALL_OW 248
17962: PPUSH
17963: LD_INT 0
17965: PPUSH
17966: CALL 18431 0 6
17970: ST_TO_ADDR
// if not hexes then
17971: LD_VAR 0 12
17975: NOT
17976: IFFALSE 17980
// exit ;
17978: GO 18426
// hex := GetHexInfo ( x , y ) ;
17980: LD_ADDR_VAR 0 15
17984: PUSH
17985: LD_VAR 0 3
17989: PPUSH
17990: LD_VAR 0 4
17994: PPUSH
17995: CALL_OW 546
17999: ST_TO_ADDR
// if hex [ 1 ] then
18000: LD_VAR 0 15
18004: PUSH
18005: LD_INT 1
18007: ARRAY
18008: IFFALSE 18012
// exit ;
18010: GO 18426
// height := hex [ 2 ] ;
18012: LD_ADDR_VAR 0 13
18016: PUSH
18017: LD_VAR 0 15
18021: PUSH
18022: LD_INT 2
18024: ARRAY
18025: ST_TO_ADDR
// for i = 1 to hexes do
18026: LD_ADDR_VAR 0 8
18030: PUSH
18031: DOUBLE
18032: LD_INT 1
18034: DEC
18035: ST_TO_ADDR
18036: LD_VAR 0 12
18040: PUSH
18041: FOR_TO
18042: IFFALSE 18370
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18044: LD_VAR 0 12
18048: PUSH
18049: LD_VAR 0 8
18053: ARRAY
18054: PUSH
18055: LD_INT 1
18057: ARRAY
18058: PPUSH
18059: LD_VAR 0 12
18063: PUSH
18064: LD_VAR 0 8
18068: ARRAY
18069: PUSH
18070: LD_INT 2
18072: ARRAY
18073: PPUSH
18074: CALL_OW 488
18078: NOT
18079: IFFALSE 18083
// continue ;
18081: GO 18041
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18083: LD_ADDR_VAR 0 9
18087: PUSH
18088: LD_VAR 0 12
18092: PUSH
18093: LD_VAR 0 8
18097: ARRAY
18098: PUSH
18099: LD_INT 1
18101: ARRAY
18102: PPUSH
18103: LD_VAR 0 12
18107: PUSH
18108: LD_VAR 0 8
18112: ARRAY
18113: PUSH
18114: LD_INT 2
18116: ARRAY
18117: PPUSH
18118: CALL_OW 546
18122: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18123: LD_VAR 0 9
18127: PUSH
18128: LD_INT 1
18130: ARRAY
18131: PUSH
18132: LD_VAR 0 9
18136: PUSH
18137: LD_INT 2
18139: ARRAY
18140: PUSH
18141: LD_VAR 0 13
18145: PUSH
18146: LD_INT 2
18148: PLUS
18149: GREATER
18150: OR
18151: PUSH
18152: LD_VAR 0 9
18156: PUSH
18157: LD_INT 2
18159: ARRAY
18160: PUSH
18161: LD_VAR 0 13
18165: PUSH
18166: LD_INT 2
18168: MINUS
18169: LESS
18170: OR
18171: PUSH
18172: LD_VAR 0 9
18176: PUSH
18177: LD_INT 3
18179: ARRAY
18180: PUSH
18181: LD_INT 0
18183: PUSH
18184: LD_INT 8
18186: PUSH
18187: LD_INT 9
18189: PUSH
18190: LD_INT 10
18192: PUSH
18193: LD_INT 11
18195: PUSH
18196: LD_INT 12
18198: PUSH
18199: LD_INT 13
18201: PUSH
18202: LD_INT 16
18204: PUSH
18205: LD_INT 17
18207: PUSH
18208: LD_INT 18
18210: PUSH
18211: LD_INT 19
18213: PUSH
18214: LD_INT 20
18216: PUSH
18217: LD_INT 21
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: IN
18235: NOT
18236: OR
18237: PUSH
18238: LD_VAR 0 9
18242: PUSH
18243: LD_INT 5
18245: ARRAY
18246: NOT
18247: OR
18248: PUSH
18249: LD_VAR 0 9
18253: PUSH
18254: LD_INT 6
18256: ARRAY
18257: PUSH
18258: LD_INT 1
18260: PUSH
18261: LD_INT 2
18263: PUSH
18264: LD_INT 7
18266: PUSH
18267: LD_INT 9
18269: PUSH
18270: LD_INT 10
18272: PUSH
18273: LD_INT 11
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: IN
18284: NOT
18285: OR
18286: PUSH
18287: LD_VAR 0 12
18291: PUSH
18292: LD_VAR 0 8
18296: ARRAY
18297: PUSH
18298: LD_INT 1
18300: ARRAY
18301: PPUSH
18302: LD_VAR 0 12
18306: PUSH
18307: LD_VAR 0 8
18311: ARRAY
18312: PUSH
18313: LD_INT 2
18315: ARRAY
18316: PPUSH
18317: CALL_OW 428
18321: PUSH
18322: LD_INT 0
18324: GREATER
18325: OR
18326: PUSH
18327: LD_VAR 0 12
18331: PUSH
18332: LD_VAR 0 8
18336: ARRAY
18337: PUSH
18338: LD_INT 1
18340: ARRAY
18341: PPUSH
18342: LD_VAR 0 12
18346: PUSH
18347: LD_VAR 0 8
18351: ARRAY
18352: PUSH
18353: LD_INT 2
18355: ARRAY
18356: PPUSH
18357: CALL_OW 351
18361: OR
18362: IFFALSE 18368
// exit ;
18364: POP
18365: POP
18366: GO 18426
// end ;
18368: GO 18041
18370: POP
18371: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
18372: LD_VAR 0 2
18376: PUSH
18377: LD_INT 29
18379: PUSH
18380: LD_INT 30
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: IN
18387: PUSH
18388: LD_VAR 0 3
18392: PPUSH
18393: LD_VAR 0 4
18397: PPUSH
18398: LD_VAR 0 1
18402: PPUSH
18403: CALL_OW 255
18407: PPUSH
18408: CALL_OW 440
18412: NOT
18413: AND
18414: IFFALSE 18418
// exit ;
18416: GO 18426
// result := true ;
18418: LD_ADDR_VAR 0 7
18422: PUSH
18423: LD_INT 1
18425: ST_TO_ADDR
// end ;
18426: LD_VAR 0 7
18430: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
18431: LD_INT 0
18433: PPUSH
18434: PPUSH
18435: PPUSH
18436: PPUSH
18437: PPUSH
18438: PPUSH
18439: PPUSH
18440: PPUSH
18441: PPUSH
18442: PPUSH
18443: PPUSH
18444: PPUSH
18445: PPUSH
18446: PPUSH
18447: PPUSH
18448: PPUSH
18449: PPUSH
18450: PPUSH
18451: PPUSH
18452: PPUSH
18453: PPUSH
18454: PPUSH
18455: PPUSH
18456: PPUSH
18457: PPUSH
18458: PPUSH
18459: PPUSH
18460: PPUSH
18461: PPUSH
18462: PPUSH
18463: PPUSH
18464: PPUSH
18465: PPUSH
18466: PPUSH
18467: PPUSH
18468: PPUSH
18469: PPUSH
18470: PPUSH
18471: PPUSH
18472: PPUSH
18473: PPUSH
18474: PPUSH
18475: PPUSH
18476: PPUSH
18477: PPUSH
18478: PPUSH
18479: PPUSH
18480: PPUSH
18481: PPUSH
18482: PPUSH
18483: PPUSH
18484: PPUSH
18485: PPUSH
18486: PPUSH
18487: PPUSH
18488: PPUSH
18489: PPUSH
18490: PPUSH
// result = [ ] ;
18491: LD_ADDR_VAR 0 7
18495: PUSH
18496: EMPTY
18497: ST_TO_ADDR
// temp_list = [ ] ;
18498: LD_ADDR_VAR 0 9
18502: PUSH
18503: EMPTY
18504: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18505: LD_VAR 0 4
18509: PUSH
18510: LD_INT 0
18512: PUSH
18513: LD_INT 1
18515: PUSH
18516: LD_INT 2
18518: PUSH
18519: LD_INT 3
18521: PUSH
18522: LD_INT 4
18524: PUSH
18525: LD_INT 5
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: IN
18536: NOT
18537: PUSH
18538: LD_VAR 0 1
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: LD_INT 1
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: IN
18553: PUSH
18554: LD_VAR 0 5
18558: PUSH
18559: LD_INT 1
18561: PUSH
18562: LD_INT 2
18564: PUSH
18565: LD_INT 3
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: IN
18573: NOT
18574: AND
18575: OR
18576: IFFALSE 18580
// exit ;
18578: GO 36965
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18580: LD_VAR 0 1
18584: PUSH
18585: LD_INT 6
18587: PUSH
18588: LD_INT 7
18590: PUSH
18591: LD_INT 8
18593: PUSH
18594: LD_INT 13
18596: PUSH
18597: LD_INT 12
18599: PUSH
18600: LD_INT 15
18602: PUSH
18603: LD_INT 11
18605: PUSH
18606: LD_INT 14
18608: PUSH
18609: LD_INT 10
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: IN
18623: IFFALSE 18633
// btype = b_lab ;
18625: LD_ADDR_VAR 0 1
18629: PUSH
18630: LD_INT 6
18632: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18633: LD_VAR 0 6
18637: PUSH
18638: LD_INT 0
18640: PUSH
18641: LD_INT 1
18643: PUSH
18644: LD_INT 2
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: LIST
18651: IN
18652: NOT
18653: PUSH
18654: LD_VAR 0 1
18658: PUSH
18659: LD_INT 0
18661: PUSH
18662: LD_INT 1
18664: PUSH
18665: LD_INT 2
18667: PUSH
18668: LD_INT 3
18670: PUSH
18671: LD_INT 6
18673: PUSH
18674: LD_INT 36
18676: PUSH
18677: LD_INT 4
18679: PUSH
18680: LD_INT 5
18682: PUSH
18683: LD_INT 31
18685: PUSH
18686: LD_INT 32
18688: PUSH
18689: LD_INT 33
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: IN
18705: NOT
18706: PUSH
18707: LD_VAR 0 6
18711: PUSH
18712: LD_INT 1
18714: EQUAL
18715: AND
18716: OR
18717: PUSH
18718: LD_VAR 0 1
18722: PUSH
18723: LD_INT 2
18725: PUSH
18726: LD_INT 3
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: IN
18733: NOT
18734: PUSH
18735: LD_VAR 0 6
18739: PUSH
18740: LD_INT 2
18742: EQUAL
18743: AND
18744: OR
18745: IFFALSE 18755
// mode = 0 ;
18747: LD_ADDR_VAR 0 6
18751: PUSH
18752: LD_INT 0
18754: ST_TO_ADDR
// case mode of 0 :
18755: LD_VAR 0 6
18759: PUSH
18760: LD_INT 0
18762: DOUBLE
18763: EQUAL
18764: IFTRUE 18768
18766: GO 30221
18768: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18769: LD_ADDR_VAR 0 11
18773: PUSH
18774: LD_INT 0
18776: PUSH
18777: LD_INT 0
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 0
18786: PUSH
18787: LD_INT 1
18789: NEG
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 1
18797: PUSH
18798: LD_INT 0
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 1
18807: PUSH
18808: LD_INT 1
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 0
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 1
18827: NEG
18828: PUSH
18829: LD_INT 0
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 1
18838: NEG
18839: PUSH
18840: LD_INT 1
18842: NEG
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 1
18850: NEG
18851: PUSH
18852: LD_INT 2
18854: NEG
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 0
18862: PUSH
18863: LD_INT 2
18865: NEG
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 1
18873: PUSH
18874: LD_INT 1
18876: NEG
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 1
18884: PUSH
18885: LD_INT 2
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 0
18894: PUSH
18895: LD_INT 2
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 1
18904: NEG
18905: PUSH
18906: LD_INT 1
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 1
18915: PUSH
18916: LD_INT 3
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 0
18925: PUSH
18926: LD_INT 3
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 1
18935: NEG
18936: PUSH
18937: LD_INT 2
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18962: LD_ADDR_VAR 0 12
18966: PUSH
18967: LD_INT 0
18969: PUSH
18970: LD_INT 0
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 0
18979: PUSH
18980: LD_INT 1
18982: NEG
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 1
18990: PUSH
18991: LD_INT 0
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: LD_INT 1
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 0
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 1
19020: NEG
19021: PUSH
19022: LD_INT 0
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 1
19031: NEG
19032: PUSH
19033: LD_INT 1
19035: NEG
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: LD_INT 1
19046: NEG
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 2
19054: PUSH
19055: LD_INT 0
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: LD_INT 1
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 1
19074: NEG
19075: PUSH
19076: LD_INT 1
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 2
19085: NEG
19086: PUSH
19087: LD_INT 0
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 2
19096: NEG
19097: PUSH
19098: LD_INT 1
19100: NEG
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 2
19108: NEG
19109: PUSH
19110: LD_INT 1
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 3
19119: NEG
19120: PUSH
19121: LD_INT 0
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 3
19130: NEG
19131: PUSH
19132: LD_INT 1
19134: NEG
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19158: LD_ADDR_VAR 0 13
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: LD_INT 0
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: LD_INT 1
19178: NEG
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 1
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 1
19196: PUSH
19197: LD_INT 1
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 0
19206: PUSH
19207: LD_INT 1
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 1
19216: NEG
19217: PUSH
19218: LD_INT 0
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 1
19227: NEG
19228: PUSH
19229: LD_INT 1
19231: NEG
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 1
19239: NEG
19240: PUSH
19241: LD_INT 2
19243: NEG
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 2
19251: PUSH
19252: LD_INT 1
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 2
19261: PUSH
19262: LD_INT 2
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 1
19271: PUSH
19272: LD_INT 2
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 2
19281: NEG
19282: PUSH
19283: LD_INT 1
19285: NEG
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 2
19293: NEG
19294: PUSH
19295: LD_INT 2
19297: NEG
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 2
19305: NEG
19306: PUSH
19307: LD_INT 3
19309: NEG
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 3
19317: NEG
19318: PUSH
19319: LD_INT 2
19321: NEG
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 3
19329: NEG
19330: PUSH
19331: LD_INT 3
19333: NEG
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19357: LD_ADDR_VAR 0 14
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: LD_INT 0
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 0
19374: PUSH
19375: LD_INT 1
19377: NEG
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: LD_INT 0
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 1
19415: NEG
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: NEG
19427: PUSH
19428: LD_INT 1
19430: NEG
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 1
19438: NEG
19439: PUSH
19440: LD_INT 2
19442: NEG
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 0
19450: PUSH
19451: LD_INT 2
19453: NEG
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 1
19461: PUSH
19462: LD_INT 1
19464: NEG
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 1
19472: PUSH
19473: LD_INT 2
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 0
19482: PUSH
19483: LD_INT 2
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 1
19492: NEG
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 1
19503: NEG
19504: PUSH
19505: LD_INT 3
19507: NEG
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 0
19515: PUSH
19516: LD_INT 3
19518: NEG
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 1
19526: PUSH
19527: LD_INT 2
19529: NEG
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19553: LD_ADDR_VAR 0 15
19557: PUSH
19558: LD_INT 0
19560: PUSH
19561: LD_INT 0
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 0
19570: PUSH
19571: LD_INT 1
19573: NEG
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 1
19581: PUSH
19582: LD_INT 0
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 1
19591: PUSH
19592: LD_INT 1
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 0
19601: PUSH
19602: LD_INT 1
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 1
19611: NEG
19612: PUSH
19613: LD_INT 0
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 1
19622: NEG
19623: PUSH
19624: LD_INT 1
19626: NEG
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 1
19634: PUSH
19635: LD_INT 1
19637: NEG
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 2
19645: PUSH
19646: LD_INT 0
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 2
19655: PUSH
19656: LD_INT 1
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 1
19665: NEG
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 2
19676: NEG
19677: PUSH
19678: LD_INT 0
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 2
19687: NEG
19688: PUSH
19689: LD_INT 1
19691: NEG
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 2
19699: PUSH
19700: LD_INT 1
19702: NEG
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 3
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 3
19720: PUSH
19721: LD_INT 1
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19746: LD_ADDR_VAR 0 16
19750: PUSH
19751: LD_INT 0
19753: PUSH
19754: LD_INT 0
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 0
19763: PUSH
19764: LD_INT 1
19766: NEG
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 1
19774: PUSH
19775: LD_INT 0
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 1
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 0
19794: PUSH
19795: LD_INT 1
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: NEG
19805: PUSH
19806: LD_INT 0
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 1
19815: NEG
19816: PUSH
19817: LD_INT 1
19819: NEG
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 1
19827: NEG
19828: PUSH
19829: LD_INT 2
19831: NEG
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 2
19839: PUSH
19840: LD_INT 1
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 2
19849: PUSH
19850: LD_INT 2
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 1
19859: PUSH
19860: LD_INT 2
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 2
19869: NEG
19870: PUSH
19871: LD_INT 1
19873: NEG
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 2
19881: NEG
19882: PUSH
19883: LD_INT 2
19885: NEG
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 3
19893: PUSH
19894: LD_INT 2
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 3
19903: PUSH
19904: LD_INT 3
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 2
19913: PUSH
19914: LD_INT 3
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19939: LD_ADDR_VAR 0 17
19943: PUSH
19944: LD_INT 0
19946: PUSH
19947: LD_INT 0
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 0
19956: PUSH
19957: LD_INT 1
19959: NEG
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 1
19967: PUSH
19968: LD_INT 0
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 1
19977: PUSH
19978: LD_INT 1
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 0
19987: PUSH
19988: LD_INT 1
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 1
19997: NEG
19998: PUSH
19999: LD_INT 0
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 1
20008: NEG
20009: PUSH
20010: LD_INT 1
20012: NEG
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 1
20020: NEG
20021: PUSH
20022: LD_INT 2
20024: NEG
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 0
20032: PUSH
20033: LD_INT 2
20035: NEG
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: LD_INT 1
20046: NEG
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 2
20054: PUSH
20055: LD_INT 0
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 2
20064: PUSH
20065: LD_INT 1
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 2
20074: PUSH
20075: LD_INT 2
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 1
20084: PUSH
20085: LD_INT 2
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 0
20094: PUSH
20095: LD_INT 2
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 1
20104: NEG
20105: PUSH
20106: LD_INT 1
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 2
20115: NEG
20116: PUSH
20117: LD_INT 0
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 2
20126: NEG
20127: PUSH
20128: LD_INT 1
20130: NEG
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 2
20138: NEG
20139: PUSH
20140: LD_INT 2
20142: NEG
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20169: LD_ADDR_VAR 0 18
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 0
20186: PUSH
20187: LD_INT 1
20189: NEG
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 1
20207: PUSH
20208: LD_INT 1
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 0
20217: PUSH
20218: LD_INT 1
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 1
20227: NEG
20228: PUSH
20229: LD_INT 0
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 1
20238: NEG
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 1
20250: NEG
20251: PUSH
20252: LD_INT 2
20254: NEG
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 0
20262: PUSH
20263: LD_INT 2
20265: NEG
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: LD_INT 1
20276: NEG
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 2
20284: PUSH
20285: LD_INT 0
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 2
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 2
20304: PUSH
20305: LD_INT 2
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 1
20314: PUSH
20315: LD_INT 2
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 0
20324: PUSH
20325: LD_INT 2
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 1
20334: NEG
20335: PUSH
20336: LD_INT 1
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 2
20345: NEG
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 2
20356: NEG
20357: PUSH
20358: LD_INT 1
20360: NEG
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 2
20368: NEG
20369: PUSH
20370: LD_INT 2
20372: NEG
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20399: LD_ADDR_VAR 0 19
20403: PUSH
20404: LD_INT 0
20406: PUSH
20407: LD_INT 0
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 0
20416: PUSH
20417: LD_INT 1
20419: NEG
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: LD_INT 0
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 1
20437: PUSH
20438: LD_INT 1
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 0
20447: PUSH
20448: LD_INT 1
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 1
20457: NEG
20458: PUSH
20459: LD_INT 0
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 1
20468: NEG
20469: PUSH
20470: LD_INT 1
20472: NEG
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 1
20480: NEG
20481: PUSH
20482: LD_INT 2
20484: NEG
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 0
20492: PUSH
20493: LD_INT 2
20495: NEG
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 1
20503: PUSH
20504: LD_INT 1
20506: NEG
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: LD_INT 2
20514: PUSH
20515: LD_INT 0
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 2
20524: PUSH
20525: LD_INT 1
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 2
20534: PUSH
20535: LD_INT 2
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: LD_INT 2
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 0
20554: PUSH
20555: LD_INT 2
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 1
20564: NEG
20565: PUSH
20566: LD_INT 1
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 2
20575: NEG
20576: PUSH
20577: LD_INT 0
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 2
20586: NEG
20587: PUSH
20588: LD_INT 1
20590: NEG
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 2
20598: NEG
20599: PUSH
20600: LD_INT 2
20602: NEG
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20629: LD_ADDR_VAR 0 20
20633: PUSH
20634: LD_INT 0
20636: PUSH
20637: LD_INT 0
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 0
20646: PUSH
20647: LD_INT 1
20649: NEG
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 1
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: LD_INT 1
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 0
20677: PUSH
20678: LD_INT 1
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 1
20687: NEG
20688: PUSH
20689: LD_INT 0
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: LD_INT 1
20702: NEG
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 1
20710: NEG
20711: PUSH
20712: LD_INT 2
20714: NEG
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 0
20722: PUSH
20723: LD_INT 2
20725: NEG
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 1
20733: PUSH
20734: LD_INT 1
20736: NEG
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: LD_INT 0
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 2
20754: PUSH
20755: LD_INT 1
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 2
20764: PUSH
20765: LD_INT 2
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 0
20784: PUSH
20785: LD_INT 2
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 1
20794: NEG
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 2
20805: NEG
20806: PUSH
20807: LD_INT 0
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 2
20816: NEG
20817: PUSH
20818: LD_INT 1
20820: NEG
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 2
20828: NEG
20829: PUSH
20830: LD_INT 2
20832: NEG
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20859: LD_ADDR_VAR 0 21
20863: PUSH
20864: LD_INT 0
20866: PUSH
20867: LD_INT 0
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 0
20876: PUSH
20877: LD_INT 1
20879: NEG
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: LD_INT 0
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: LD_INT 1
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: LD_INT 1
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 1
20917: NEG
20918: PUSH
20919: LD_INT 0
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: LD_INT 1
20932: NEG
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: LD_INT 2
20944: NEG
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: LD_INT 2
20955: NEG
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 1
20963: PUSH
20964: LD_INT 1
20966: NEG
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 2
20974: PUSH
20975: LD_INT 0
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 2
20984: PUSH
20985: LD_INT 1
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 2
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 1
21004: PUSH
21005: LD_INT 2
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: LD_INT 2
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 1
21024: NEG
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 2
21035: NEG
21036: PUSH
21037: LD_INT 0
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 2
21046: NEG
21047: PUSH
21048: LD_INT 1
21050: NEG
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 2
21058: NEG
21059: PUSH
21060: LD_INT 2
21062: NEG
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21089: LD_ADDR_VAR 0 22
21093: PUSH
21094: LD_INT 0
21096: PUSH
21097: LD_INT 0
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 0
21106: PUSH
21107: LD_INT 1
21109: NEG
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: LD_INT 0
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 1
21127: PUSH
21128: LD_INT 1
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 0
21137: PUSH
21138: LD_INT 1
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 1
21147: NEG
21148: PUSH
21149: LD_INT 0
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 1
21158: NEG
21159: PUSH
21160: LD_INT 1
21162: NEG
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 1
21170: NEG
21171: PUSH
21172: LD_INT 2
21174: NEG
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 0
21182: PUSH
21183: LD_INT 2
21185: NEG
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 1
21193: PUSH
21194: LD_INT 1
21196: NEG
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 2
21204: PUSH
21205: LD_INT 0
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 2
21214: PUSH
21215: LD_INT 1
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 2
21224: PUSH
21225: LD_INT 2
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 1
21234: PUSH
21235: LD_INT 2
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 0
21244: PUSH
21245: LD_INT 2
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: LD_INT 1
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 2
21265: NEG
21266: PUSH
21267: LD_INT 0
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 2
21276: NEG
21277: PUSH
21278: LD_INT 1
21280: NEG
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 2
21288: NEG
21289: PUSH
21290: LD_INT 2
21292: NEG
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21319: LD_ADDR_VAR 0 23
21323: PUSH
21324: LD_INT 0
21326: PUSH
21327: LD_INT 0
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 0
21336: PUSH
21337: LD_INT 1
21339: NEG
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 1
21347: PUSH
21348: LD_INT 0
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: LD_INT 1
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 0
21367: PUSH
21368: LD_INT 1
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: NEG
21378: PUSH
21379: LD_INT 0
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 1
21388: NEG
21389: PUSH
21390: LD_INT 1
21392: NEG
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 1
21400: NEG
21401: PUSH
21402: LD_INT 2
21404: NEG
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 0
21412: PUSH
21413: LD_INT 2
21415: NEG
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 1
21423: PUSH
21424: LD_INT 1
21426: NEG
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 2
21434: PUSH
21435: LD_INT 0
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 2
21444: PUSH
21445: LD_INT 1
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 2
21454: PUSH
21455: LD_INT 2
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 1
21464: PUSH
21465: LD_INT 2
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 0
21474: PUSH
21475: LD_INT 2
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 1
21484: NEG
21485: PUSH
21486: LD_INT 1
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 2
21495: NEG
21496: PUSH
21497: LD_INT 0
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 2
21506: NEG
21507: PUSH
21508: LD_INT 1
21510: NEG
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 2
21518: NEG
21519: PUSH
21520: LD_INT 2
21522: NEG
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 2
21530: NEG
21531: PUSH
21532: LD_INT 3
21534: NEG
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 1
21542: NEG
21543: PUSH
21544: LD_INT 3
21546: NEG
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 1
21554: PUSH
21555: LD_INT 2
21557: NEG
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 2
21565: PUSH
21566: LD_INT 1
21568: NEG
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21599: LD_ADDR_VAR 0 24
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: LD_INT 0
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: LD_INT 1
21619: NEG
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 1
21627: PUSH
21628: LD_INT 0
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 0
21647: PUSH
21648: LD_INT 1
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 1
21657: NEG
21658: PUSH
21659: LD_INT 0
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 1
21668: NEG
21669: PUSH
21670: LD_INT 1
21672: NEG
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 1
21680: NEG
21681: PUSH
21682: LD_INT 2
21684: NEG
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 0
21692: PUSH
21693: LD_INT 2
21695: NEG
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 1
21703: PUSH
21704: LD_INT 1
21706: NEG
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 2
21714: PUSH
21715: LD_INT 0
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 2
21724: PUSH
21725: LD_INT 1
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 2
21734: PUSH
21735: LD_INT 2
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 1
21744: PUSH
21745: LD_INT 2
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 0
21754: PUSH
21755: LD_INT 2
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 1
21764: NEG
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 2
21775: NEG
21776: PUSH
21777: LD_INT 0
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 2
21786: NEG
21787: PUSH
21788: LD_INT 1
21790: NEG
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 2
21798: NEG
21799: PUSH
21800: LD_INT 2
21802: NEG
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 1
21810: PUSH
21811: LD_INT 2
21813: NEG
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 2
21821: PUSH
21822: LD_INT 1
21824: NEG
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 3
21832: PUSH
21833: LD_INT 1
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 3
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21875: LD_ADDR_VAR 0 25
21879: PUSH
21880: LD_INT 0
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 0
21892: PUSH
21893: LD_INT 1
21895: NEG
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 1
21903: PUSH
21904: LD_INT 0
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 1
21913: PUSH
21914: LD_INT 1
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 0
21923: PUSH
21924: LD_INT 1
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 1
21933: NEG
21934: PUSH
21935: LD_INT 0
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 1
21944: NEG
21945: PUSH
21946: LD_INT 1
21948: NEG
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 1
21956: NEG
21957: PUSH
21958: LD_INT 2
21960: NEG
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 0
21968: PUSH
21969: LD_INT 2
21971: NEG
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 1
21979: PUSH
21980: LD_INT 1
21982: NEG
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 2
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 2
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 2
22010: PUSH
22011: LD_INT 2
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 1
22020: PUSH
22021: LD_INT 2
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 0
22030: PUSH
22031: LD_INT 2
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 1
22040: NEG
22041: PUSH
22042: LD_INT 1
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 2
22051: NEG
22052: PUSH
22053: LD_INT 0
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 2
22062: NEG
22063: PUSH
22064: LD_INT 1
22066: NEG
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 2
22074: NEG
22075: PUSH
22076: LD_INT 2
22078: NEG
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 3
22086: PUSH
22087: LD_INT 1
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 3
22096: PUSH
22097: LD_INT 2
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 2
22106: PUSH
22107: LD_INT 3
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 1
22116: PUSH
22117: LD_INT 3
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22149: LD_ADDR_VAR 0 26
22153: PUSH
22154: LD_INT 0
22156: PUSH
22157: LD_INT 0
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 0
22166: PUSH
22167: LD_INT 1
22169: NEG
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 1
22177: PUSH
22178: LD_INT 0
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 1
22187: PUSH
22188: LD_INT 1
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 0
22197: PUSH
22198: LD_INT 1
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 1
22207: NEG
22208: PUSH
22209: LD_INT 0
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 1
22218: NEG
22219: PUSH
22220: LD_INT 1
22222: NEG
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 1
22230: NEG
22231: PUSH
22232: LD_INT 2
22234: NEG
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 0
22242: PUSH
22243: LD_INT 2
22245: NEG
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 1
22253: PUSH
22254: LD_INT 1
22256: NEG
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 2
22264: PUSH
22265: LD_INT 0
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 2
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 2
22284: PUSH
22285: LD_INT 2
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 1
22294: PUSH
22295: LD_INT 2
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 0
22304: PUSH
22305: LD_INT 2
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 1
22314: NEG
22315: PUSH
22316: LD_INT 1
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 2
22325: NEG
22326: PUSH
22327: LD_INT 0
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 2
22336: NEG
22337: PUSH
22338: LD_INT 1
22340: NEG
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 2
22348: NEG
22349: PUSH
22350: LD_INT 2
22352: NEG
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 2
22360: PUSH
22361: LD_INT 3
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 1
22370: PUSH
22371: LD_INT 3
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 1
22380: NEG
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 2
22391: NEG
22392: PUSH
22393: LD_INT 1
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22425: LD_ADDR_VAR 0 27
22429: PUSH
22430: LD_INT 0
22432: PUSH
22433: LD_INT 0
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 0
22442: PUSH
22443: LD_INT 1
22445: NEG
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 1
22453: PUSH
22454: LD_INT 0
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 1
22463: PUSH
22464: LD_INT 1
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 0
22473: PUSH
22474: LD_INT 1
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 1
22483: NEG
22484: PUSH
22485: LD_INT 0
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 1
22494: NEG
22495: PUSH
22496: LD_INT 1
22498: NEG
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 1
22506: NEG
22507: PUSH
22508: LD_INT 2
22510: NEG
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 0
22518: PUSH
22519: LD_INT 2
22521: NEG
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 1
22529: PUSH
22530: LD_INT 1
22532: NEG
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 2
22540: PUSH
22541: LD_INT 0
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 2
22550: PUSH
22551: LD_INT 1
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 2
22560: PUSH
22561: LD_INT 2
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 1
22570: PUSH
22571: LD_INT 2
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 0
22580: PUSH
22581: LD_INT 2
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 1
22590: NEG
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 2
22601: NEG
22602: PUSH
22603: LD_INT 0
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 2
22612: NEG
22613: PUSH
22614: LD_INT 1
22616: NEG
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 2
22624: NEG
22625: PUSH
22626: LD_INT 2
22628: NEG
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 1
22636: NEG
22637: PUSH
22638: LD_INT 2
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 2
22647: NEG
22648: PUSH
22649: LD_INT 1
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 3
22658: NEG
22659: PUSH
22660: LD_INT 1
22662: NEG
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 3
22670: NEG
22671: PUSH
22672: LD_INT 2
22674: NEG
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22705: LD_ADDR_VAR 0 28
22709: PUSH
22710: LD_INT 0
22712: PUSH
22713: LD_INT 0
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 0
22722: PUSH
22723: LD_INT 1
22725: NEG
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 1
22733: PUSH
22734: LD_INT 0
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: LD_INT 1
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 0
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 1
22763: NEG
22764: PUSH
22765: LD_INT 0
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 1
22774: NEG
22775: PUSH
22776: LD_INT 1
22778: NEG
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: LD_INT 2
22790: NEG
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 0
22798: PUSH
22799: LD_INT 2
22801: NEG
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 1
22809: PUSH
22810: LD_INT 1
22812: NEG
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 2
22820: PUSH
22821: LD_INT 0
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 2
22830: PUSH
22831: LD_INT 1
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 2
22840: PUSH
22841: LD_INT 2
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 1
22850: PUSH
22851: LD_INT 2
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 0
22860: PUSH
22861: LD_INT 2
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 1
22870: NEG
22871: PUSH
22872: LD_INT 1
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 2
22881: NEG
22882: PUSH
22883: LD_INT 0
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 2
22892: NEG
22893: PUSH
22894: LD_INT 1
22896: NEG
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 2
22904: NEG
22905: PUSH
22906: LD_INT 2
22908: NEG
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 2
22916: NEG
22917: PUSH
22918: LD_INT 3
22920: NEG
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 1
22928: NEG
22929: PUSH
22930: LD_INT 3
22932: NEG
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 3
22940: NEG
22941: PUSH
22942: LD_INT 1
22944: NEG
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 3
22952: NEG
22953: PUSH
22954: LD_INT 2
22956: NEG
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22987: LD_ADDR_VAR 0 29
22991: PUSH
22992: LD_INT 0
22994: PUSH
22995: LD_INT 0
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 0
23004: PUSH
23005: LD_INT 1
23007: NEG
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 1
23015: PUSH
23016: LD_INT 0
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 1
23025: PUSH
23026: LD_INT 1
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 0
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 1
23045: NEG
23046: PUSH
23047: LD_INT 0
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 1
23056: NEG
23057: PUSH
23058: LD_INT 1
23060: NEG
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 1
23068: NEG
23069: PUSH
23070: LD_INT 2
23072: NEG
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 0
23080: PUSH
23081: LD_INT 2
23083: NEG
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 1
23091: PUSH
23092: LD_INT 1
23094: NEG
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 2
23102: PUSH
23103: LD_INT 0
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 2
23112: PUSH
23113: LD_INT 1
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 1
23122: PUSH
23123: LD_INT 2
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: LD_INT 2
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 1
23142: NEG
23143: PUSH
23144: LD_INT 1
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 2
23153: NEG
23154: PUSH
23155: LD_INT 1
23157: NEG
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 2
23165: NEG
23166: PUSH
23167: LD_INT 2
23169: NEG
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 2
23177: NEG
23178: PUSH
23179: LD_INT 3
23181: NEG
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 2
23189: PUSH
23190: LD_INT 1
23192: NEG
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 3
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: LD_INT 3
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 1
23220: NEG
23221: PUSH
23222: LD_INT 2
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 3
23231: NEG
23232: PUSH
23233: LD_INT 2
23235: NEG
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23266: LD_ADDR_VAR 0 30
23270: PUSH
23271: LD_INT 0
23273: PUSH
23274: LD_INT 0
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 0
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 1
23294: PUSH
23295: LD_INT 0
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 1
23304: PUSH
23305: LD_INT 1
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 0
23314: PUSH
23315: LD_INT 1
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 1
23324: NEG
23325: PUSH
23326: LD_INT 0
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 1
23335: NEG
23336: PUSH
23337: LD_INT 1
23339: NEG
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 1
23347: NEG
23348: PUSH
23349: LD_INT 2
23351: NEG
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 0
23359: PUSH
23360: LD_INT 2
23362: NEG
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: LD_INT 1
23373: NEG
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 2
23381: PUSH
23382: LD_INT 0
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 2
23391: PUSH
23392: LD_INT 1
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: LD_INT 2
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: LD_INT 2
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: NEG
23422: PUSH
23423: LD_INT 1
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 2
23432: NEG
23433: PUSH
23434: LD_INT 0
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 2
23443: NEG
23444: PUSH
23445: LD_INT 1
23447: NEG
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 1
23455: NEG
23456: PUSH
23457: LD_INT 3
23459: NEG
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: LD_INT 2
23470: NEG
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 3
23478: PUSH
23479: LD_INT 2
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 2
23488: PUSH
23489: LD_INT 3
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 2
23498: NEG
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 3
23509: NEG
23510: PUSH
23511: LD_INT 1
23513: NEG
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23544: LD_ADDR_VAR 0 31
23548: PUSH
23549: LD_INT 0
23551: PUSH
23552: LD_INT 0
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 0
23561: PUSH
23562: LD_INT 1
23564: NEG
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 1
23572: PUSH
23573: LD_INT 0
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 1
23582: PUSH
23583: LD_INT 1
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: LD_INT 1
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 1
23602: NEG
23603: PUSH
23604: LD_INT 0
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: PUSH
23615: LD_INT 1
23617: NEG
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: LD_INT 2
23629: NEG
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: LD_INT 1
23640: NEG
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 2
23648: PUSH
23649: LD_INT 0
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 2
23658: PUSH
23659: LD_INT 1
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 2
23668: PUSH
23669: LD_INT 2
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: LD_INT 2
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 0
23688: PUSH
23689: LD_INT 2
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 1
23698: NEG
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 2
23709: NEG
23710: PUSH
23711: LD_INT 1
23713: NEG
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 2
23721: NEG
23722: PUSH
23723: LD_INT 2
23725: NEG
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 2
23733: NEG
23734: PUSH
23735: LD_INT 3
23737: NEG
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 2
23745: PUSH
23746: LD_INT 1
23748: NEG
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 3
23756: PUSH
23757: LD_INT 1
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 1
23766: PUSH
23767: LD_INT 3
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: LD_INT 1
23776: NEG
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 3
23787: NEG
23788: PUSH
23789: LD_INT 2
23791: NEG
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23822: LD_ADDR_VAR 0 32
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: LD_INT 0
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 0
23839: PUSH
23840: LD_INT 1
23842: NEG
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: PUSH
23851: LD_INT 0
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 1
23860: PUSH
23861: LD_INT 1
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 0
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 1
23880: NEG
23881: PUSH
23882: LD_INT 0
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 1
23891: NEG
23892: PUSH
23893: LD_INT 1
23895: NEG
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 1
23903: NEG
23904: PUSH
23905: LD_INT 2
23907: NEG
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 0
23915: PUSH
23916: LD_INT 2
23918: NEG
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: LD_INT 1
23929: NEG
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: LD_INT 1
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 2
23947: PUSH
23948: LD_INT 2
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 1
23957: PUSH
23958: LD_INT 2
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 0
23967: PUSH
23968: LD_INT 2
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 1
23977: NEG
23978: PUSH
23979: LD_INT 1
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 2
23988: NEG
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 2
23999: NEG
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 1
24011: NEG
24012: PUSH
24013: LD_INT 3
24015: NEG
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: LD_INT 2
24026: NEG
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 3
24034: PUSH
24035: LD_INT 2
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 2
24044: PUSH
24045: LD_INT 3
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 2
24054: NEG
24055: PUSH
24056: LD_INT 1
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 3
24065: NEG
24066: PUSH
24067: LD_INT 1
24069: NEG
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24100: LD_ADDR_VAR 0 33
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 0
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 0
24117: PUSH
24118: LD_INT 1
24120: NEG
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: LD_INT 0
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 1
24138: PUSH
24139: LD_INT 1
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 0
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 1
24158: NEG
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 1
24169: NEG
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: LD_INT 2
24185: NEG
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 1
24193: PUSH
24194: LD_INT 1
24196: NEG
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 2
24204: PUSH
24205: LD_INT 0
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 2
24214: PUSH
24215: LD_INT 1
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: LD_INT 2
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: LD_INT 2
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 2
24255: NEG
24256: PUSH
24257: LD_INT 0
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 2
24266: NEG
24267: PUSH
24268: LD_INT 1
24270: NEG
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 2
24278: NEG
24279: PUSH
24280: LD_INT 2
24282: NEG
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 2
24290: NEG
24291: PUSH
24292: LD_INT 3
24294: NEG
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 2
24302: PUSH
24303: LD_INT 1
24305: NEG
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 3
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: LD_INT 3
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: LD_INT 2
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 3
24344: NEG
24345: PUSH
24346: LD_INT 2
24348: NEG
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24379: LD_ADDR_VAR 0 34
24383: PUSH
24384: LD_INT 0
24386: PUSH
24387: LD_INT 0
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 0
24396: PUSH
24397: LD_INT 1
24399: NEG
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 1
24407: PUSH
24408: LD_INT 0
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 1
24417: PUSH
24418: LD_INT 1
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 0
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 1
24437: NEG
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 1
24448: NEG
24449: PUSH
24450: LD_INT 1
24452: NEG
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 1
24460: NEG
24461: PUSH
24462: LD_INT 2
24464: NEG
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: LD_INT 2
24475: NEG
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 1
24483: PUSH
24484: LD_INT 1
24486: NEG
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 2
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 2
24504: PUSH
24505: LD_INT 2
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: PUSH
24515: LD_INT 2
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 1
24524: NEG
24525: PUSH
24526: LD_INT 1
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 2
24535: NEG
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 2
24546: NEG
24547: PUSH
24548: LD_INT 1
24550: NEG
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 2
24558: NEG
24559: PUSH
24560: LD_INT 2
24562: NEG
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 1
24570: NEG
24571: PUSH
24572: LD_INT 3
24574: NEG
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 1
24582: PUSH
24583: LD_INT 2
24585: NEG
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 3
24593: PUSH
24594: LD_INT 2
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 2
24603: PUSH
24604: LD_INT 3
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 2
24613: NEG
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 3
24624: NEG
24625: PUSH
24626: LD_INT 1
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24659: LD_ADDR_VAR 0 35
24663: PUSH
24664: LD_INT 0
24666: PUSH
24667: LD_INT 0
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 0
24676: PUSH
24677: LD_INT 1
24679: NEG
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: LD_INT 0
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 1
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 0
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 1
24717: NEG
24718: PUSH
24719: LD_INT 0
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 1
24728: NEG
24729: PUSH
24730: LD_INT 1
24732: NEG
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 2
24740: PUSH
24741: LD_INT 1
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 2
24750: NEG
24751: PUSH
24752: LD_INT 1
24754: NEG
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24771: LD_ADDR_VAR 0 36
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: LD_INT 0
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 0
24788: PUSH
24789: LD_INT 1
24791: NEG
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: LD_INT 0
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 1
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: LD_INT 1
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: LD_INT 0
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 1
24840: NEG
24841: PUSH
24842: LD_INT 1
24844: NEG
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 1
24852: NEG
24853: PUSH
24854: LD_INT 2
24856: NEG
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 1
24864: PUSH
24865: LD_INT 2
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24883: LD_ADDR_VAR 0 37
24887: PUSH
24888: LD_INT 0
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 1
24911: PUSH
24912: LD_INT 0
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 1
24941: NEG
24942: PUSH
24943: LD_INT 0
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 1
24952: NEG
24953: PUSH
24954: LD_INT 1
24956: NEG
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 1
24964: PUSH
24965: LD_INT 1
24967: NEG
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 1
24975: NEG
24976: PUSH
24977: LD_INT 1
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24995: LD_ADDR_VAR 0 38
24999: PUSH
25000: LD_INT 0
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 0
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 0
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 1
25053: NEG
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: LD_INT 1
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 2
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 2
25086: NEG
25087: PUSH
25088: LD_INT 1
25090: NEG
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25107: LD_ADDR_VAR 0 39
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: LD_INT 1
25127: NEG
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 1
25145: PUSH
25146: LD_INT 1
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 1
25165: NEG
25166: PUSH
25167: LD_INT 0
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: LD_INT 1
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 1
25188: NEG
25189: PUSH
25190: LD_INT 2
25192: NEG
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 1
25200: PUSH
25201: LD_INT 2
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25219: LD_ADDR_VAR 0 40
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: LD_INT 1
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: NEG
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 1
25300: PUSH
25301: LD_INT 1
25303: NEG
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 1
25311: NEG
25312: PUSH
25313: LD_INT 1
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25331: LD_ADDR_VAR 0 41
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 1
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 0
25379: PUSH
25380: LD_INT 1
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 1
25412: NEG
25413: PUSH
25414: LD_INT 2
25416: NEG
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: LD_INT 1
25427: NEG
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 2
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 2
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 2
25455: PUSH
25456: LD_INT 2
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: LD_INT 2
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 1
25475: NEG
25476: PUSH
25477: LD_INT 1
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 2
25486: NEG
25487: PUSH
25488: LD_INT 0
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 2
25497: NEG
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 2
25509: NEG
25510: PUSH
25511: LD_INT 2
25513: NEG
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 2
25521: NEG
25522: PUSH
25523: LD_INT 3
25525: NEG
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 2
25533: PUSH
25534: LD_INT 1
25536: NEG
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 3
25544: PUSH
25545: LD_INT 0
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 3
25554: PUSH
25555: LD_INT 1
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 3
25564: PUSH
25565: LD_INT 2
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 3
25574: PUSH
25575: LD_INT 3
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 2
25584: PUSH
25585: LD_INT 3
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 2
25594: NEG
25595: PUSH
25596: LD_INT 1
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 3
25605: NEG
25606: PUSH
25607: LD_INT 0
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 3
25616: NEG
25617: PUSH
25618: LD_INT 1
25620: NEG
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 3
25628: NEG
25629: PUSH
25630: LD_INT 2
25632: NEG
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 3
25640: NEG
25641: PUSH
25642: LD_INT 3
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25681: LD_ADDR_VAR 0 42
25685: PUSH
25686: LD_INT 0
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 0
25698: PUSH
25699: LD_INT 1
25701: NEG
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 1
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 0
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: LD_INT 0
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 1
25750: NEG
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: NEG
25763: PUSH
25764: LD_INT 2
25766: NEG
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 0
25774: PUSH
25775: LD_INT 2
25777: NEG
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: LD_INT 1
25788: NEG
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 2
25796: PUSH
25797: LD_INT 1
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 2
25806: PUSH
25807: LD_INT 2
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 1
25816: PUSH
25817: LD_INT 2
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: LD_INT 2
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 1
25836: NEG
25837: PUSH
25838: LD_INT 1
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 2
25847: NEG
25848: PUSH
25849: LD_INT 1
25851: NEG
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 2
25859: NEG
25860: PUSH
25861: LD_INT 2
25863: NEG
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 2
25871: NEG
25872: PUSH
25873: LD_INT 3
25875: NEG
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: NEG
25884: PUSH
25885: LD_INT 3
25887: NEG
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 0
25895: PUSH
25896: LD_INT 3
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 1
25906: PUSH
25907: LD_INT 2
25909: NEG
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 3
25917: PUSH
25918: LD_INT 2
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 3
25927: PUSH
25928: LD_INT 3
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 2
25937: PUSH
25938: LD_INT 3
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 1
25947: PUSH
25948: LD_INT 3
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 0
25957: PUSH
25958: LD_INT 3
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: LD_INT 2
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 3
25978: NEG
25979: PUSH
25980: LD_INT 2
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 3
25990: NEG
25991: PUSH
25992: LD_INT 3
25994: NEG
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26031: LD_ADDR_VAR 0 43
26035: PUSH
26036: LD_INT 0
26038: PUSH
26039: LD_INT 0
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 0
26048: PUSH
26049: LD_INT 1
26051: NEG
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: LD_INT 0
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 1
26069: PUSH
26070: LD_INT 1
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 0
26079: PUSH
26080: LD_INT 1
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: LD_INT 0
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 1
26100: NEG
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: NEG
26113: PUSH
26114: LD_INT 2
26116: NEG
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: LD_INT 2
26127: NEG
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: LD_INT 1
26138: NEG
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 2
26146: PUSH
26147: LD_INT 0
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: LD_INT 2
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 0
26176: PUSH
26177: LD_INT 2
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 2
26197: NEG
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 2
26208: NEG
26209: PUSH
26210: LD_INT 1
26212: NEG
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: LD_INT 3
26224: NEG
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 0
26232: PUSH
26233: LD_INT 3
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 1
26243: PUSH
26244: LD_INT 2
26246: NEG
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: LD_INT 1
26257: NEG
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 3
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 3
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 1
26285: PUSH
26286: LD_INT 3
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: LD_INT 3
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: PUSH
26307: LD_INT 2
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 2
26316: NEG
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 3
26327: NEG
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 3
26338: NEG
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26379: LD_ADDR_VAR 0 44
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 0
26396: PUSH
26397: LD_INT 1
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: LD_INT 0
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 1
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 0
26427: PUSH
26428: LD_INT 1
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 1
26437: NEG
26438: PUSH
26439: LD_INT 0
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: NEG
26449: PUSH
26450: LD_INT 1
26452: NEG
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: LD_INT 2
26464: NEG
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 2
26483: PUSH
26484: LD_INT 0
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 2
26493: PUSH
26494: LD_INT 1
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 2
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 2
26534: NEG
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 2
26545: NEG
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: LD_INT 2
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 2
26569: NEG
26570: PUSH
26571: LD_INT 3
26573: NEG
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 2
26581: PUSH
26582: LD_INT 1
26584: NEG
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 3
26592: PUSH
26593: LD_INT 0
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 3
26602: PUSH
26603: LD_INT 1
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 3
26612: PUSH
26613: LD_INT 2
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 3
26622: PUSH
26623: LD_INT 3
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 2
26632: PUSH
26633: LD_INT 3
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 2
26642: NEG
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 3
26653: NEG
26654: PUSH
26655: LD_INT 0
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 3
26664: NEG
26665: PUSH
26666: LD_INT 1
26668: NEG
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 3
26676: NEG
26677: PUSH
26678: LD_INT 2
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 3
26688: NEG
26689: PUSH
26690: LD_INT 3
26692: NEG
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26729: LD_ADDR_VAR 0 45
26733: PUSH
26734: LD_INT 0
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 1
26767: PUSH
26768: LD_INT 1
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: LD_INT 1
26802: NEG
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: LD_INT 2
26814: NEG
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 0
26822: PUSH
26823: LD_INT 2
26825: NEG
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: PUSH
26834: LD_INT 1
26836: NEG
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 2
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 2
26854: PUSH
26855: LD_INT 2
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: LD_INT 2
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: LD_INT 2
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 1
26884: NEG
26885: PUSH
26886: LD_INT 1
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 2
26895: NEG
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 2
26907: NEG
26908: PUSH
26909: LD_INT 2
26911: NEG
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 2
26919: NEG
26920: PUSH
26921: LD_INT 3
26923: NEG
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 1
26931: NEG
26932: PUSH
26933: LD_INT 3
26935: NEG
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 0
26943: PUSH
26944: LD_INT 3
26946: NEG
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: LD_INT 2
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 3
26965: PUSH
26966: LD_INT 2
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 3
26975: PUSH
26976: LD_INT 3
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 2
26985: PUSH
26986: LD_INT 3
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: PUSH
26996: LD_INT 3
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 0
27005: PUSH
27006: LD_INT 3
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 1
27015: NEG
27016: PUSH
27017: LD_INT 2
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 3
27026: NEG
27027: PUSH
27028: LD_INT 2
27030: NEG
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 3
27038: NEG
27039: PUSH
27040: LD_INT 3
27042: NEG
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27079: LD_ADDR_VAR 0 46
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: LD_INT 0
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 0
27096: PUSH
27097: LD_INT 1
27099: NEG
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 1
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: LD_INT 1
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 1
27137: NEG
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: NEG
27149: PUSH
27150: LD_INT 1
27152: NEG
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: LD_INT 2
27164: NEG
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 0
27172: PUSH
27173: LD_INT 2
27175: NEG
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 2
27194: PUSH
27195: LD_INT 0
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 2
27204: PUSH
27205: LD_INT 1
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 1
27214: PUSH
27215: LD_INT 2
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: LD_INT 2
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 1
27234: NEG
27235: PUSH
27236: LD_INT 1
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 2
27245: NEG
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 2
27256: NEG
27257: PUSH
27258: LD_INT 1
27260: NEG
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 1
27268: NEG
27269: PUSH
27270: LD_INT 3
27272: NEG
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: LD_INT 3
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: LD_INT 2
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 2
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 3
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 3
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 1
27333: PUSH
27334: LD_INT 3
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: LD_INT 3
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 1
27353: NEG
27354: PUSH
27355: LD_INT 2
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 2
27364: NEG
27365: PUSH
27366: LD_INT 1
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 3
27375: NEG
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 3
27386: NEG
27387: PUSH
27388: LD_INT 1
27390: NEG
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27427: LD_ADDR_VAR 0 47
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: LD_INT 0
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: LD_INT 1
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 1
27465: PUSH
27466: LD_INT 1
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: LD_INT 1
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 1
27485: NEG
27486: PUSH
27487: LD_INT 0
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 1
27496: NEG
27497: PUSH
27498: LD_INT 1
27500: NEG
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: NEG
27509: PUSH
27510: LD_INT 2
27512: NEG
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: LD_INT 2
27523: NEG
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: LD_INT 1
27534: NEG
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 2
27542: NEG
27543: PUSH
27544: LD_INT 1
27546: NEG
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 2
27554: NEG
27555: PUSH
27556: LD_INT 2
27558: NEG
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27578: LD_ADDR_VAR 0 48
27582: PUSH
27583: LD_INT 0
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 0
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 1
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 1
27616: PUSH
27617: LD_INT 1
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: LD_INT 1
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 1
27636: NEG
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 1
27647: NEG
27648: PUSH
27649: LD_INT 1
27651: NEG
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 1
27659: NEG
27660: PUSH
27661: LD_INT 2
27663: NEG
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: LD_INT 2
27674: NEG
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: LD_INT 1
27685: NEG
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 2
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 2
27703: PUSH
27704: LD_INT 1
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27725: LD_ADDR_VAR 0 49
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: LD_INT 1
27745: NEG
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 1
27753: PUSH
27754: LD_INT 0
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 0
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 1
27783: NEG
27784: PUSH
27785: LD_INT 0
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 1
27794: NEG
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: LD_INT 1
27809: NEG
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 2
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 2
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 2
27837: PUSH
27838: LD_INT 2
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: LD_INT 2
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27869: LD_ADDR_VAR 0 50
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: LD_INT 0
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 0
27886: PUSH
27887: LD_INT 1
27889: NEG
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: LD_INT 0
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 1
27907: PUSH
27908: LD_INT 1
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 0
27917: PUSH
27918: LD_INT 1
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: LD_INT 0
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 1
27938: NEG
27939: PUSH
27940: LD_INT 1
27942: NEG
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 2
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 2
27960: PUSH
27961: LD_INT 2
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: LD_INT 2
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: LD_INT 2
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: LD_INT 1
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28013: LD_ADDR_VAR 0 51
28017: PUSH
28018: LD_INT 0
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 1
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: LD_INT 1
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 1
28071: NEG
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: NEG
28083: PUSH
28084: LD_INT 1
28086: NEG
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 1
28094: PUSH
28095: LD_INT 2
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: LD_INT 2
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 1
28114: NEG
28115: PUSH
28116: LD_INT 1
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 2
28125: NEG
28126: PUSH
28127: LD_INT 0
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 2
28136: NEG
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28160: LD_ADDR_VAR 0 52
28164: PUSH
28165: LD_INT 0
28167: PUSH
28168: LD_INT 0
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: LD_INT 1
28180: NEG
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 1
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 1
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 1
28218: NEG
28219: PUSH
28220: LD_INT 0
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 1
28229: NEG
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: LD_INT 2
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: LD_INT 1
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 2
28264: NEG
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 2
28275: NEG
28276: PUSH
28277: LD_INT 1
28279: NEG
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 2
28287: NEG
28288: PUSH
28289: LD_INT 2
28291: NEG
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28311: LD_ADDR_VAR 0 53
28315: PUSH
28316: LD_INT 0
28318: PUSH
28319: LD_INT 0
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 0
28328: PUSH
28329: LD_INT 1
28331: NEG
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: LD_INT 1
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 1
28369: NEG
28370: PUSH
28371: LD_INT 0
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 1
28380: NEG
28381: PUSH
28382: LD_INT 1
28384: NEG
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 1
28392: NEG
28393: PUSH
28394: LD_INT 2
28396: NEG
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: LD_INT 2
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 2
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 2
28446: PUSH
28447: LD_INT 2
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 1
28456: PUSH
28457: LD_INT 2
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 0
28466: PUSH
28467: LD_INT 2
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 1
28476: NEG
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 2
28487: NEG
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 2
28498: NEG
28499: PUSH
28500: LD_INT 1
28502: NEG
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 2
28510: NEG
28511: PUSH
28512: LD_INT 2
28514: NEG
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28541: LD_ADDR_VAR 0 54
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: LD_INT 0
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 0
28558: PUSH
28559: LD_INT 1
28561: NEG
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 1
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 1
28579: PUSH
28580: LD_INT 1
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: LD_INT 1
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: LD_INT 0
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 1
28610: NEG
28611: PUSH
28612: LD_INT 1
28614: NEG
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: LD_INT 2
28626: NEG
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: LD_INT 2
28637: NEG
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 1
28645: PUSH
28646: LD_INT 1
28648: NEG
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 2
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 2
28666: PUSH
28667: LD_INT 1
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 2
28676: PUSH
28677: LD_INT 2
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: LD_INT 2
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 0
28696: PUSH
28697: LD_INT 2
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 1
28706: NEG
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 2
28717: NEG
28718: PUSH
28719: LD_INT 0
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 2
28728: NEG
28729: PUSH
28730: LD_INT 1
28732: NEG
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 2
28740: NEG
28741: PUSH
28742: LD_INT 2
28744: NEG
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28771: LD_ADDR_VAR 0 55
28775: PUSH
28776: LD_INT 0
28778: PUSH
28779: LD_INT 0
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: LD_INT 1
28791: NEG
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 1
28799: PUSH
28800: LD_INT 0
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: LD_INT 1
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: LD_INT 1
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 1
28829: NEG
28830: PUSH
28831: LD_INT 0
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 1
28840: NEG
28841: PUSH
28842: LD_INT 1
28844: NEG
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: LD_INT 2
28856: NEG
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: LD_INT 2
28867: NEG
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 1
28875: PUSH
28876: LD_INT 1
28878: NEG
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 2
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 2
28896: PUSH
28897: LD_INT 1
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 2
28906: PUSH
28907: LD_INT 2
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 1
28916: PUSH
28917: LD_INT 2
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 0
28926: PUSH
28927: LD_INT 2
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 1
28936: NEG
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 2
28947: NEG
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 2
28958: NEG
28959: PUSH
28960: LD_INT 1
28962: NEG
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 2
28970: NEG
28971: PUSH
28972: LD_INT 2
28974: NEG
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29001: LD_ADDR_VAR 0 56
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: LD_INT 0
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: LD_INT 1
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: LD_INT 0
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 1
29082: NEG
29083: PUSH
29084: LD_INT 2
29086: NEG
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: LD_INT 2
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 2
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 2
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 2
29136: PUSH
29137: LD_INT 2
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 1
29146: PUSH
29147: LD_INT 2
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 0
29156: PUSH
29157: LD_INT 2
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 1
29166: NEG
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 2
29177: NEG
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 2
29188: NEG
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 2
29200: NEG
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29231: LD_ADDR_VAR 0 57
29235: PUSH
29236: LD_INT 0
29238: PUSH
29239: LD_INT 0
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: LD_INT 1
29251: NEG
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: NEG
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 1
29300: NEG
29301: PUSH
29302: LD_INT 1
29304: NEG
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: LD_INT 2
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: LD_INT 2
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: LD_INT 1
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 2
29346: PUSH
29347: LD_INT 0
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 2
29356: PUSH
29357: LD_INT 1
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 2
29366: PUSH
29367: LD_INT 2
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: LD_INT 2
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 0
29386: PUSH
29387: LD_INT 2
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 1
29396: NEG
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 2
29407: NEG
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 2
29418: NEG
29419: PUSH
29420: LD_INT 1
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 2
29430: NEG
29431: PUSH
29432: LD_INT 2
29434: NEG
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29461: LD_ADDR_VAR 0 58
29465: PUSH
29466: LD_INT 0
29468: PUSH
29469: LD_INT 0
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 0
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 1
29489: PUSH
29490: LD_INT 0
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: LD_INT 1
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: NEG
29520: PUSH
29521: LD_INT 0
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 1
29530: NEG
29531: PUSH
29532: LD_INT 1
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: LD_INT 2
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 0
29554: PUSH
29555: LD_INT 2
29557: NEG
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 1
29565: PUSH
29566: LD_INT 1
29568: NEG
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 2
29576: PUSH
29577: LD_INT 0
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 2
29586: PUSH
29587: LD_INT 1
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 2
29596: PUSH
29597: LD_INT 2
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: LD_INT 2
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 0
29616: PUSH
29617: LD_INT 2
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 1
29626: NEG
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 2
29637: NEG
29638: PUSH
29639: LD_INT 0
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 2
29648: NEG
29649: PUSH
29650: LD_INT 1
29652: NEG
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 2
29660: NEG
29661: PUSH
29662: LD_INT 2
29664: NEG
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29691: LD_ADDR_VAR 0 59
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: LD_INT 0
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 0
29708: PUSH
29709: LD_INT 1
29711: NEG
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 1
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 0
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 1
29749: NEG
29750: PUSH
29751: LD_INT 0
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 1
29760: NEG
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29779: LD_ADDR_VAR 0 60
29783: PUSH
29784: LD_INT 0
29786: PUSH
29787: LD_INT 0
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 0
29796: PUSH
29797: LD_INT 1
29799: NEG
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 1
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: LD_INT 1
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: LD_INT 1
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 1
29837: NEG
29838: PUSH
29839: LD_INT 0
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: LD_INT 1
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29867: LD_ADDR_VAR 0 61
29871: PUSH
29872: LD_INT 0
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 0
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 0
29915: PUSH
29916: LD_INT 1
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 1
29925: NEG
29926: PUSH
29927: LD_INT 0
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 1
29936: NEG
29937: PUSH
29938: LD_INT 1
29940: NEG
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29955: LD_ADDR_VAR 0 62
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: LD_INT 0
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 0
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: LD_INT 0
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: LD_INT 1
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 0
30003: PUSH
30004: LD_INT 1
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 1
30013: NEG
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 1
30024: NEG
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30043: LD_ADDR_VAR 0 63
30047: PUSH
30048: LD_INT 0
30050: PUSH
30051: LD_INT 0
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 0
30060: PUSH
30061: LD_INT 1
30063: NEG
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 1
30071: PUSH
30072: LD_INT 0
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 1
30081: PUSH
30082: LD_INT 1
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 0
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 1
30101: NEG
30102: PUSH
30103: LD_INT 0
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 1
30112: NEG
30113: PUSH
30114: LD_INT 1
30116: NEG
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30131: LD_ADDR_VAR 0 64
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: LD_INT 0
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: LD_INT 1
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: PUSH
30160: LD_INT 0
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 1
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 0
30179: PUSH
30180: LD_INT 1
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 1
30189: NEG
30190: PUSH
30191: LD_INT 0
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 1
30200: NEG
30201: PUSH
30202: LD_INT 1
30204: NEG
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: ST_TO_ADDR
// end ; 1 :
30219: GO 36116
30221: LD_INT 1
30223: DOUBLE
30224: EQUAL
30225: IFTRUE 30229
30227: GO 32852
30229: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30230: LD_ADDR_VAR 0 11
30234: PUSH
30235: LD_INT 1
30237: NEG
30238: PUSH
30239: LD_INT 3
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: LD_INT 3
30252: NEG
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: LD_INT 2
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: LIST
30273: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30274: LD_ADDR_VAR 0 12
30278: PUSH
30279: LD_INT 2
30281: PUSH
30282: LD_INT 1
30284: NEG
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 3
30292: PUSH
30293: LD_INT 0
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 3
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: LIST
30314: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30315: LD_ADDR_VAR 0 13
30319: PUSH
30320: LD_INT 3
30322: PUSH
30323: LD_INT 2
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 3
30332: PUSH
30333: LD_INT 3
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 2
30342: PUSH
30343: LD_INT 3
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: LIST
30354: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30355: LD_ADDR_VAR 0 14
30359: PUSH
30360: LD_INT 1
30362: PUSH
30363: LD_INT 3
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 0
30372: PUSH
30373: LD_INT 3
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 1
30382: NEG
30383: PUSH
30384: LD_INT 2
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: LIST
30395: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30396: LD_ADDR_VAR 0 15
30400: PUSH
30401: LD_INT 2
30403: NEG
30404: PUSH
30405: LD_INT 1
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 3
30414: NEG
30415: PUSH
30416: LD_INT 0
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 3
30425: NEG
30426: PUSH
30427: LD_INT 1
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: LIST
30439: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30440: LD_ADDR_VAR 0 16
30444: PUSH
30445: LD_INT 2
30447: NEG
30448: PUSH
30449: LD_INT 3
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 3
30459: NEG
30460: PUSH
30461: LD_INT 2
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 3
30471: NEG
30472: PUSH
30473: LD_INT 3
30475: NEG
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: LIST
30485: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30486: LD_ADDR_VAR 0 17
30490: PUSH
30491: LD_INT 1
30493: NEG
30494: PUSH
30495: LD_INT 3
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: LD_INT 3
30508: NEG
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: LD_INT 2
30519: NEG
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: LIST
30529: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30530: LD_ADDR_VAR 0 18
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: LD_INT 1
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 3
30548: PUSH
30549: LD_INT 0
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 3
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: LIST
30570: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30571: LD_ADDR_VAR 0 19
30575: PUSH
30576: LD_INT 3
30578: PUSH
30579: LD_INT 2
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 3
30588: PUSH
30589: LD_INT 3
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 2
30598: PUSH
30599: LD_INT 3
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: LIST
30610: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30611: LD_ADDR_VAR 0 20
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: LD_INT 3
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: LD_INT 3
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 1
30638: NEG
30639: PUSH
30640: LD_INT 2
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: LIST
30651: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30652: LD_ADDR_VAR 0 21
30656: PUSH
30657: LD_INT 2
30659: NEG
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 3
30670: NEG
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 3
30681: NEG
30682: PUSH
30683: LD_INT 1
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: LIST
30695: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30696: LD_ADDR_VAR 0 22
30700: PUSH
30701: LD_INT 2
30703: NEG
30704: PUSH
30705: LD_INT 3
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 3
30715: NEG
30716: PUSH
30717: LD_INT 2
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 3
30727: NEG
30728: PUSH
30729: LD_INT 3
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: LIST
30741: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30742: LD_ADDR_VAR 0 23
30746: PUSH
30747: LD_INT 0
30749: PUSH
30750: LD_INT 3
30752: NEG
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 1
30760: NEG
30761: PUSH
30762: LD_INT 4
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 1
30772: PUSH
30773: LD_INT 3
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: LIST
30785: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30786: LD_ADDR_VAR 0 24
30790: PUSH
30791: LD_INT 3
30793: PUSH
30794: LD_INT 0
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 3
30803: PUSH
30804: LD_INT 1
30806: NEG
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 4
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: LIST
30826: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30827: LD_ADDR_VAR 0 25
30831: PUSH
30832: LD_INT 3
30834: PUSH
30835: LD_INT 3
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 4
30844: PUSH
30845: LD_INT 3
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 3
30854: PUSH
30855: LD_INT 4
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: LIST
30866: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30867: LD_ADDR_VAR 0 26
30871: PUSH
30872: LD_INT 0
30874: PUSH
30875: LD_INT 3
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 1
30884: PUSH
30885: LD_INT 4
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 1
30894: NEG
30895: PUSH
30896: LD_INT 3
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: LIST
30907: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30908: LD_ADDR_VAR 0 27
30912: PUSH
30913: LD_INT 3
30915: NEG
30916: PUSH
30917: LD_INT 0
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 3
30926: NEG
30927: PUSH
30928: LD_INT 1
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 4
30937: NEG
30938: PUSH
30939: LD_INT 1
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30952: LD_ADDR_VAR 0 28
30956: PUSH
30957: LD_INT 3
30959: NEG
30960: PUSH
30961: LD_INT 3
30963: NEG
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 3
30971: NEG
30972: PUSH
30973: LD_INT 4
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 4
30983: NEG
30984: PUSH
30985: LD_INT 3
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: LIST
30997: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30998: LD_ADDR_VAR 0 29
31002: PUSH
31003: LD_INT 1
31005: NEG
31006: PUSH
31007: LD_INT 3
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: LD_INT 3
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 1
31028: PUSH
31029: LD_INT 2
31031: NEG
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 1
31039: NEG
31040: PUSH
31041: LD_INT 4
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: LD_INT 4
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 1
31062: PUSH
31063: LD_INT 3
31065: NEG
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: NEG
31074: PUSH
31075: LD_INT 5
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 0
31085: PUSH
31086: LD_INT 5
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 1
31096: PUSH
31097: LD_INT 4
31099: NEG
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 1
31107: NEG
31108: PUSH
31109: LD_INT 6
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 0
31119: PUSH
31120: LD_INT 6
31122: NEG
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: LD_INT 5
31133: NEG
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31153: LD_ADDR_VAR 0 30
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: LD_INT 1
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 3
31171: PUSH
31172: LD_INT 0
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 3
31181: PUSH
31182: LD_INT 1
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 3
31191: PUSH
31192: LD_INT 1
31194: NEG
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 4
31202: PUSH
31203: LD_INT 0
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 4
31212: PUSH
31213: LD_INT 1
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 4
31222: PUSH
31223: LD_INT 1
31225: NEG
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 5
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 5
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 5
31253: PUSH
31254: LD_INT 1
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 6
31264: PUSH
31265: LD_INT 0
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 6
31274: PUSH
31275: LD_INT 1
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31296: LD_ADDR_VAR 0 31
31300: PUSH
31301: LD_INT 3
31303: PUSH
31304: LD_INT 2
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 3
31313: PUSH
31314: LD_INT 3
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 2
31323: PUSH
31324: LD_INT 3
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 4
31333: PUSH
31334: LD_INT 3
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 4
31343: PUSH
31344: LD_INT 4
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 3
31353: PUSH
31354: LD_INT 4
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 5
31363: PUSH
31364: LD_INT 4
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 5
31373: PUSH
31374: LD_INT 5
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 4
31383: PUSH
31384: LD_INT 5
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 6
31393: PUSH
31394: LD_INT 5
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 6
31403: PUSH
31404: LD_INT 6
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 5
31413: PUSH
31414: LD_INT 6
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31435: LD_ADDR_VAR 0 32
31439: PUSH
31440: LD_INT 1
31442: PUSH
31443: LD_INT 3
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: LD_INT 3
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: LD_INT 4
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 0
31483: PUSH
31484: LD_INT 4
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 1
31493: NEG
31494: PUSH
31495: LD_INT 3
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: LD_INT 5
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 0
31514: PUSH
31515: LD_INT 5
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 1
31524: NEG
31525: PUSH
31526: LD_INT 4
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: LD_INT 6
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 0
31545: PUSH
31546: LD_INT 6
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 1
31555: NEG
31556: PUSH
31557: LD_INT 5
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31578: LD_ADDR_VAR 0 33
31582: PUSH
31583: LD_INT 2
31585: NEG
31586: PUSH
31587: LD_INT 1
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 3
31596: NEG
31597: PUSH
31598: LD_INT 0
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 3
31607: NEG
31608: PUSH
31609: LD_INT 1
31611: NEG
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 3
31619: NEG
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 4
31630: NEG
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 4
31641: NEG
31642: PUSH
31643: LD_INT 1
31645: NEG
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 4
31653: NEG
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 5
31664: NEG
31665: PUSH
31666: LD_INT 0
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 5
31675: NEG
31676: PUSH
31677: LD_INT 1
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 5
31687: NEG
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 6
31698: NEG
31699: PUSH
31700: LD_INT 0
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 6
31709: NEG
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31733: LD_ADDR_VAR 0 34
31737: PUSH
31738: LD_INT 2
31740: NEG
31741: PUSH
31742: LD_INT 3
31744: NEG
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 3
31752: NEG
31753: PUSH
31754: LD_INT 2
31756: NEG
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 3
31764: NEG
31765: PUSH
31766: LD_INT 3
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 3
31776: NEG
31777: PUSH
31778: LD_INT 4
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 4
31788: NEG
31789: PUSH
31790: LD_INT 3
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 4
31800: NEG
31801: PUSH
31802: LD_INT 4
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 4
31812: NEG
31813: PUSH
31814: LD_INT 5
31816: NEG
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 5
31824: NEG
31825: PUSH
31826: LD_INT 4
31828: NEG
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 5
31836: NEG
31837: PUSH
31838: LD_INT 5
31840: NEG
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 5
31848: NEG
31849: PUSH
31850: LD_INT 6
31852: NEG
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 6
31860: NEG
31861: PUSH
31862: LD_INT 5
31864: NEG
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 6
31872: NEG
31873: PUSH
31874: LD_INT 6
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31896: LD_ADDR_VAR 0 41
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: LD_INT 2
31906: NEG
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 1
31914: NEG
31915: PUSH
31916: LD_INT 3
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 1
31926: PUSH
31927: LD_INT 2
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: LIST
31939: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31940: LD_ADDR_VAR 0 42
31944: PUSH
31945: LD_INT 2
31947: PUSH
31948: LD_INT 0
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 2
31957: PUSH
31958: LD_INT 1
31960: NEG
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 3
31968: PUSH
31969: LD_INT 1
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: LIST
31980: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31981: LD_ADDR_VAR 0 43
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: LD_INT 2
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 3
31998: PUSH
31999: LD_INT 2
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 2
32008: PUSH
32009: LD_INT 3
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: LIST
32020: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32021: LD_ADDR_VAR 0 44
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: LD_INT 2
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 1
32038: PUSH
32039: LD_INT 3
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: LD_INT 2
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: LIST
32061: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32062: LD_ADDR_VAR 0 45
32066: PUSH
32067: LD_INT 2
32069: NEG
32070: PUSH
32071: LD_INT 0
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 2
32080: NEG
32081: PUSH
32082: LD_INT 1
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 3
32091: NEG
32092: PUSH
32093: LD_INT 1
32095: NEG
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: LIST
32105: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32106: LD_ADDR_VAR 0 46
32110: PUSH
32111: LD_INT 2
32113: NEG
32114: PUSH
32115: LD_INT 2
32117: NEG
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 2
32125: NEG
32126: PUSH
32127: LD_INT 3
32129: NEG
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 3
32137: NEG
32138: PUSH
32139: LD_INT 2
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: LIST
32151: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32152: LD_ADDR_VAR 0 47
32156: PUSH
32157: LD_INT 2
32159: NEG
32160: PUSH
32161: LD_INT 3
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: LD_INT 3
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32185: LD_ADDR_VAR 0 48
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: LD_INT 2
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 2
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32216: LD_ADDR_VAR 0 49
32220: PUSH
32221: LD_INT 3
32223: PUSH
32224: LD_INT 1
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 3
32233: PUSH
32234: LD_INT 2
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32245: LD_ADDR_VAR 0 50
32249: PUSH
32250: LD_INT 2
32252: PUSH
32253: LD_INT 3
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: LD_INT 3
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32274: LD_ADDR_VAR 0 51
32278: PUSH
32279: LD_INT 1
32281: NEG
32282: PUSH
32283: LD_INT 2
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 2
32292: NEG
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32305: LD_ADDR_VAR 0 52
32309: PUSH
32310: LD_INT 3
32312: NEG
32313: PUSH
32314: LD_INT 1
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 3
32324: NEG
32325: PUSH
32326: LD_INT 2
32328: NEG
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32338: LD_ADDR_VAR 0 53
32342: PUSH
32343: LD_INT 1
32345: NEG
32346: PUSH
32347: LD_INT 3
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: LD_INT 3
32360: NEG
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 1
32368: PUSH
32369: LD_INT 2
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: LIST
32381: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32382: LD_ADDR_VAR 0 54
32386: PUSH
32387: LD_INT 2
32389: PUSH
32390: LD_INT 1
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 3
32400: PUSH
32401: LD_INT 0
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 3
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: LIST
32422: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32423: LD_ADDR_VAR 0 55
32427: PUSH
32428: LD_INT 3
32430: PUSH
32431: LD_INT 2
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 3
32440: PUSH
32441: LD_INT 3
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 3
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: LIST
32462: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32463: LD_ADDR_VAR 0 56
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: LD_INT 3
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: LD_INT 3
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: NEG
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: LIST
32503: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32504: LD_ADDR_VAR 0 57
32508: PUSH
32509: LD_INT 2
32511: NEG
32512: PUSH
32513: LD_INT 1
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 3
32522: NEG
32523: PUSH
32524: LD_INT 0
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 3
32533: NEG
32534: PUSH
32535: LD_INT 1
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: LIST
32547: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32548: LD_ADDR_VAR 0 58
32552: PUSH
32553: LD_INT 2
32555: NEG
32556: PUSH
32557: LD_INT 3
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 3
32567: NEG
32568: PUSH
32569: LD_INT 2
32571: NEG
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 3
32579: NEG
32580: PUSH
32581: LD_INT 3
32583: NEG
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: LIST
32593: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32594: LD_ADDR_VAR 0 59
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: LD_INT 2
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 0
32613: PUSH
32614: LD_INT 2
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 1
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: LIST
32637: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32638: LD_ADDR_VAR 0 60
32642: PUSH
32643: LD_INT 1
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 2
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 2
32666: PUSH
32667: LD_INT 1
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32679: LD_ADDR_VAR 0 61
32683: PUSH
32684: LD_INT 2
32686: PUSH
32687: LD_INT 1
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 2
32696: PUSH
32697: LD_INT 2
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 1
32706: PUSH
32707: LD_INT 2
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: LIST
32718: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32719: LD_ADDR_VAR 0 62
32723: PUSH
32724: LD_INT 1
32726: PUSH
32727: LD_INT 2
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: LD_INT 2
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: LD_INT 1
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: LIST
32759: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32760: LD_ADDR_VAR 0 63
32764: PUSH
32765: LD_INT 1
32767: NEG
32768: PUSH
32769: LD_INT 1
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: NEG
32790: PUSH
32791: LD_INT 1
32793: NEG
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: LIST
32803: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32804: LD_ADDR_VAR 0 64
32808: PUSH
32809: LD_INT 1
32811: NEG
32812: PUSH
32813: LD_INT 2
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 2
32823: NEG
32824: PUSH
32825: LD_INT 1
32827: NEG
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 2
32835: NEG
32836: PUSH
32837: LD_INT 2
32839: NEG
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: LIST
32849: ST_TO_ADDR
// end ; 2 :
32850: GO 36116
32852: LD_INT 2
32854: DOUBLE
32855: EQUAL
32856: IFTRUE 32860
32858: GO 36115
32860: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32861: LD_ADDR_VAR 0 29
32865: PUSH
32866: LD_INT 4
32868: PUSH
32869: LD_INT 0
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 4
32878: PUSH
32879: LD_INT 1
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 5
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 5
32899: PUSH
32900: LD_INT 1
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 4
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 3
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 3
32929: PUSH
32930: LD_INT 1
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 3
32940: PUSH
32941: LD_INT 2
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 5
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 3
32961: PUSH
32962: LD_INT 3
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 3
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 4
32981: PUSH
32982: LD_INT 3
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 4
32991: PUSH
32992: LD_INT 4
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 3
33001: PUSH
33002: LD_INT 4
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: LD_INT 3
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: LD_INT 2
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 4
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 2
33041: PUSH
33042: LD_INT 4
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 0
33051: PUSH
33052: LD_INT 4
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 0
33061: PUSH
33062: LD_INT 3
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: LD_INT 4
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: LD_INT 5
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 0
33091: PUSH
33092: LD_INT 5
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 1
33101: NEG
33102: PUSH
33103: LD_INT 4
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 1
33112: NEG
33113: PUSH
33114: LD_INT 3
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: LD_INT 5
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 2
33133: NEG
33134: PUSH
33135: LD_INT 3
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 3
33144: NEG
33145: PUSH
33146: LD_INT 0
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 3
33155: NEG
33156: PUSH
33157: LD_INT 1
33159: NEG
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 2
33167: NEG
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 2
33178: NEG
33179: PUSH
33180: LD_INT 1
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 3
33189: NEG
33190: PUSH
33191: LD_INT 1
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 4
33200: NEG
33201: PUSH
33202: LD_INT 0
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 4
33211: NEG
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 4
33223: NEG
33224: PUSH
33225: LD_INT 2
33227: NEG
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 2
33235: NEG
33236: PUSH
33237: LD_INT 2
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 4
33246: NEG
33247: PUSH
33248: LD_INT 4
33250: NEG
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 4
33258: NEG
33259: PUSH
33260: LD_INT 5
33262: NEG
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 3
33270: NEG
33271: PUSH
33272: LD_INT 4
33274: NEG
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 3
33282: NEG
33283: PUSH
33284: LD_INT 3
33286: NEG
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 4
33294: NEG
33295: PUSH
33296: LD_INT 3
33298: NEG
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 5
33306: NEG
33307: PUSH
33308: LD_INT 4
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 5
33318: NEG
33319: PUSH
33320: LD_INT 5
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 3
33330: NEG
33331: PUSH
33332: LD_INT 5
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 5
33342: NEG
33343: PUSH
33344: LD_INT 3
33346: NEG
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33399: LD_ADDR_VAR 0 30
33403: PUSH
33404: LD_INT 4
33406: PUSH
33407: LD_INT 4
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 4
33416: PUSH
33417: LD_INT 3
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 5
33426: PUSH
33427: LD_INT 4
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 5
33436: PUSH
33437: LD_INT 5
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 4
33446: PUSH
33447: LD_INT 5
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 3
33456: PUSH
33457: LD_INT 4
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 3
33466: PUSH
33467: LD_INT 3
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 5
33476: PUSH
33477: LD_INT 3
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 3
33486: PUSH
33487: LD_INT 5
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: LD_INT 3
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: LD_INT 2
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: LD_INT 3
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 1
33526: PUSH
33527: LD_INT 4
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: LD_INT 4
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: NEG
33547: PUSH
33548: LD_INT 3
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 1
33557: NEG
33558: PUSH
33559: LD_INT 2
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 2
33568: PUSH
33569: LD_INT 4
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 2
33578: NEG
33579: PUSH
33580: LD_INT 2
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 4
33589: NEG
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 4
33600: NEG
33601: PUSH
33602: LD_INT 1
33604: NEG
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 3
33612: NEG
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 3
33623: NEG
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 4
33634: NEG
33635: PUSH
33636: LD_INT 1
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 5
33645: NEG
33646: PUSH
33647: LD_INT 0
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 5
33656: NEG
33657: PUSH
33658: LD_INT 1
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 5
33668: NEG
33669: PUSH
33670: LD_INT 2
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 3
33680: NEG
33681: PUSH
33682: LD_INT 2
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 3
33691: NEG
33692: PUSH
33693: LD_INT 3
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 3
33703: NEG
33704: PUSH
33705: LD_INT 4
33707: NEG
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 2
33715: NEG
33716: PUSH
33717: LD_INT 3
33719: NEG
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 2
33727: NEG
33728: PUSH
33729: LD_INT 2
33731: NEG
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 3
33739: NEG
33740: PUSH
33741: LD_INT 2
33743: NEG
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 4
33751: NEG
33752: PUSH
33753: LD_INT 3
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 4
33763: NEG
33764: PUSH
33765: LD_INT 4
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: LD_INT 4
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 4
33787: NEG
33788: PUSH
33789: LD_INT 2
33791: NEG
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 0
33799: PUSH
33800: LD_INT 4
33802: NEG
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: LD_INT 5
33813: NEG
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 1
33821: PUSH
33822: LD_INT 4
33824: NEG
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: LD_INT 3
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: LD_INT 3
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 1
33854: NEG
33855: PUSH
33856: LD_INT 4
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 1
33866: NEG
33867: PUSH
33868: LD_INT 5
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 2
33878: PUSH
33879: LD_INT 3
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 2
33889: NEG
33890: PUSH
33891: LD_INT 5
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33946: LD_ADDR_VAR 0 31
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: LD_INT 4
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: LD_INT 3
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 1
33973: PUSH
33974: LD_INT 4
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 1
33983: PUSH
33984: LD_INT 5
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: LD_INT 5
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 1
34003: NEG
34004: PUSH
34005: LD_INT 4
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: NEG
34015: PUSH
34016: LD_INT 3
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 2
34025: PUSH
34026: LD_INT 5
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 2
34035: NEG
34036: PUSH
34037: LD_INT 3
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 3
34046: NEG
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 3
34057: NEG
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 2
34069: NEG
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 2
34080: NEG
34081: PUSH
34082: LD_INT 1
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 3
34091: NEG
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 4
34102: NEG
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 4
34113: NEG
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 4
34125: NEG
34126: PUSH
34127: LD_INT 2
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 2
34137: NEG
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 4
34148: NEG
34149: PUSH
34150: LD_INT 4
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 4
34160: NEG
34161: PUSH
34162: LD_INT 5
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 3
34172: NEG
34173: PUSH
34174: LD_INT 4
34176: NEG
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 3
34184: NEG
34185: PUSH
34186: LD_INT 3
34188: NEG
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 4
34196: NEG
34197: PUSH
34198: LD_INT 3
34200: NEG
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 5
34208: NEG
34209: PUSH
34210: LD_INT 4
34212: NEG
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 5
34220: NEG
34221: PUSH
34222: LD_INT 5
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 3
34232: NEG
34233: PUSH
34234: LD_INT 5
34236: NEG
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 5
34244: NEG
34245: PUSH
34246: LD_INT 3
34248: NEG
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: LD_INT 3
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 0
34267: PUSH
34268: LD_INT 4
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: LD_INT 3
34281: NEG
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 1
34289: PUSH
34290: LD_INT 2
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 0
34300: PUSH
34301: LD_INT 2
34303: NEG
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 1
34311: NEG
34312: PUSH
34313: LD_INT 3
34315: NEG
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: LD_INT 4
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 2
34335: PUSH
34336: LD_INT 2
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 2
34346: NEG
34347: PUSH
34348: LD_INT 4
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 4
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 4
34368: PUSH
34369: LD_INT 1
34371: NEG
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 5
34379: PUSH
34380: LD_INT 0
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 5
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 4
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 3
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 3
34419: PUSH
34420: LD_INT 1
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 3
34430: PUSH
34431: LD_INT 2
34433: NEG
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 5
34441: PUSH
34442: LD_INT 2
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34496: LD_ADDR_VAR 0 32
34500: PUSH
34501: LD_INT 4
34503: NEG
34504: PUSH
34505: LD_INT 0
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 4
34514: NEG
34515: PUSH
34516: LD_INT 1
34518: NEG
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 3
34526: NEG
34527: PUSH
34528: LD_INT 0
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 3
34537: NEG
34538: PUSH
34539: LD_INT 1
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 4
34548: NEG
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 5
34559: NEG
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 5
34570: NEG
34571: PUSH
34572: LD_INT 1
34574: NEG
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 5
34582: NEG
34583: PUSH
34584: LD_INT 2
34586: NEG
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 3
34594: NEG
34595: PUSH
34596: LD_INT 2
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 3
34605: NEG
34606: PUSH
34607: LD_INT 3
34609: NEG
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 3
34617: NEG
34618: PUSH
34619: LD_INT 4
34621: NEG
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 2
34629: NEG
34630: PUSH
34631: LD_INT 3
34633: NEG
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 2
34641: NEG
34642: PUSH
34643: LD_INT 2
34645: NEG
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 3
34653: NEG
34654: PUSH
34655: LD_INT 2
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 4
34665: NEG
34666: PUSH
34667: LD_INT 3
34669: NEG
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 4
34677: NEG
34678: PUSH
34679: LD_INT 4
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 2
34689: NEG
34690: PUSH
34691: LD_INT 4
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 4
34701: NEG
34702: PUSH
34703: LD_INT 2
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: LD_INT 4
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 0
34724: PUSH
34725: LD_INT 5
34727: NEG
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 1
34735: PUSH
34736: LD_INT 4
34738: NEG
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: LD_INT 3
34749: NEG
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 0
34757: PUSH
34758: LD_INT 3
34760: NEG
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 1
34768: NEG
34769: PUSH
34770: LD_INT 4
34772: NEG
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: NEG
34781: PUSH
34782: LD_INT 5
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 2
34792: PUSH
34793: LD_INT 3
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 2
34803: NEG
34804: PUSH
34805: LD_INT 5
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 3
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 3
34825: PUSH
34826: LD_INT 1
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 4
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 4
34846: PUSH
34847: LD_INT 1
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 3
34856: PUSH
34857: LD_INT 1
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 2
34876: PUSH
34877: LD_INT 1
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: LD_INT 2
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 4
34898: PUSH
34899: LD_INT 2
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 4
34908: PUSH
34909: LD_INT 4
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 4
34918: PUSH
34919: LD_INT 3
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 5
34928: PUSH
34929: LD_INT 4
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 5
34938: PUSH
34939: LD_INT 5
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 4
34948: PUSH
34949: LD_INT 5
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 3
34958: PUSH
34959: LD_INT 4
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 3
34968: PUSH
34969: LD_INT 3
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 5
34978: PUSH
34979: LD_INT 3
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 3
34988: PUSH
34989: LD_INT 5
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35043: LD_ADDR_VAR 0 33
35047: PUSH
35048: LD_INT 4
35050: NEG
35051: PUSH
35052: LD_INT 4
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 4
35062: NEG
35063: PUSH
35064: LD_INT 5
35066: NEG
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 3
35074: NEG
35075: PUSH
35076: LD_INT 4
35078: NEG
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 3
35086: NEG
35087: PUSH
35088: LD_INT 3
35090: NEG
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 4
35098: NEG
35099: PUSH
35100: LD_INT 3
35102: NEG
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 5
35110: NEG
35111: PUSH
35112: LD_INT 4
35114: NEG
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 5
35122: NEG
35123: PUSH
35124: LD_INT 5
35126: NEG
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 3
35134: NEG
35135: PUSH
35136: LD_INT 5
35138: NEG
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 5
35146: NEG
35147: PUSH
35148: LD_INT 3
35150: NEG
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: LD_INT 3
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: LD_INT 4
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: LD_INT 3
35183: NEG
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 1
35191: PUSH
35192: LD_INT 2
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: LD_INT 2
35205: NEG
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 1
35213: NEG
35214: PUSH
35215: LD_INT 3
35217: NEG
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 1
35225: NEG
35226: PUSH
35227: LD_INT 4
35229: NEG
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 2
35237: PUSH
35238: LD_INT 2
35240: NEG
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 2
35248: NEG
35249: PUSH
35250: LD_INT 4
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 4
35260: PUSH
35261: LD_INT 0
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 4
35270: PUSH
35271: LD_INT 1
35273: NEG
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 5
35281: PUSH
35282: LD_INT 0
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 5
35291: PUSH
35292: LD_INT 1
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 4
35301: PUSH
35302: LD_INT 1
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 3
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 3
35321: PUSH
35322: LD_INT 1
35324: NEG
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 3
35332: PUSH
35333: LD_INT 2
35335: NEG
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 5
35343: PUSH
35344: LD_INT 2
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 3
35353: PUSH
35354: LD_INT 3
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 3
35363: PUSH
35364: LD_INT 2
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 4
35373: PUSH
35374: LD_INT 3
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 4
35383: PUSH
35384: LD_INT 4
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 3
35393: PUSH
35394: LD_INT 4
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 2
35403: PUSH
35404: LD_INT 3
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 2
35413: PUSH
35414: LD_INT 2
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 4
35423: PUSH
35424: LD_INT 2
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 2
35433: PUSH
35434: LD_INT 4
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: LD_INT 4
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 3
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 1
35463: PUSH
35464: LD_INT 4
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 1
35473: PUSH
35474: LD_INT 5
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 0
35483: PUSH
35484: LD_INT 5
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: LD_INT 4
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: NEG
35505: PUSH
35506: LD_INT 3
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: LD_INT 5
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 2
35525: NEG
35526: PUSH
35527: LD_INT 3
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35581: LD_ADDR_VAR 0 34
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: LD_INT 4
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 0
35599: PUSH
35600: LD_INT 5
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: LD_INT 4
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 1
35621: PUSH
35622: LD_INT 3
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: LD_INT 3
35635: NEG
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 1
35643: NEG
35644: PUSH
35645: LD_INT 4
35647: NEG
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: NEG
35656: PUSH
35657: LD_INT 5
35659: NEG
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 2
35667: PUSH
35668: LD_INT 3
35670: NEG
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 2
35678: NEG
35679: PUSH
35680: LD_INT 5
35682: NEG
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 3
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 3
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 4
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 4
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 3
35731: PUSH
35732: LD_INT 1
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 2
35741: PUSH
35742: LD_INT 0
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 2
35751: PUSH
35752: LD_INT 1
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 2
35762: PUSH
35763: LD_INT 2
35765: NEG
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 4
35773: PUSH
35774: LD_INT 2
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 4
35783: PUSH
35784: LD_INT 4
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 4
35793: PUSH
35794: LD_INT 3
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 5
35803: PUSH
35804: LD_INT 4
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 5
35813: PUSH
35814: LD_INT 5
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 4
35823: PUSH
35824: LD_INT 5
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 3
35833: PUSH
35834: LD_INT 4
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 3
35843: PUSH
35844: LD_INT 3
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 5
35853: PUSH
35854: LD_INT 3
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 3
35863: PUSH
35864: LD_INT 5
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: LD_INT 3
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: LD_INT 2
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: LD_INT 3
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: LD_INT 4
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: LD_INT 4
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 1
35923: NEG
35924: PUSH
35925: LD_INT 3
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 1
35934: NEG
35935: PUSH
35936: LD_INT 2
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 2
35945: PUSH
35946: LD_INT 4
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 2
35955: NEG
35956: PUSH
35957: LD_INT 2
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 4
35966: NEG
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 4
35977: NEG
35978: PUSH
35979: LD_INT 1
35981: NEG
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 3
35989: NEG
35990: PUSH
35991: LD_INT 0
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 3
36000: NEG
36001: PUSH
36002: LD_INT 1
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 4
36011: NEG
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 5
36022: NEG
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 5
36033: NEG
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 5
36045: NEG
36046: PUSH
36047: LD_INT 2
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 3
36057: NEG
36058: PUSH
36059: LD_INT 2
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: ST_TO_ADDR
// end ; end ;
36113: GO 36116
36115: POP
// case btype of b_depot , b_warehouse :
36116: LD_VAR 0 1
36120: PUSH
36121: LD_INT 0
36123: DOUBLE
36124: EQUAL
36125: IFTRUE 36135
36127: LD_INT 1
36129: DOUBLE
36130: EQUAL
36131: IFTRUE 36135
36133: GO 36336
36135: POP
// case nation of nation_american :
36136: LD_VAR 0 5
36140: PUSH
36141: LD_INT 1
36143: DOUBLE
36144: EQUAL
36145: IFTRUE 36149
36147: GO 36205
36149: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
36150: LD_ADDR_VAR 0 9
36154: PUSH
36155: LD_VAR 0 11
36159: PUSH
36160: LD_VAR 0 12
36164: PUSH
36165: LD_VAR 0 13
36169: PUSH
36170: LD_VAR 0 14
36174: PUSH
36175: LD_VAR 0 15
36179: PUSH
36180: LD_VAR 0 16
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: PUSH
36193: LD_VAR 0 4
36197: PUSH
36198: LD_INT 1
36200: PLUS
36201: ARRAY
36202: ST_TO_ADDR
36203: GO 36334
36205: LD_INT 2
36207: DOUBLE
36208: EQUAL
36209: IFTRUE 36213
36211: GO 36269
36213: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
36214: LD_ADDR_VAR 0 9
36218: PUSH
36219: LD_VAR 0 17
36223: PUSH
36224: LD_VAR 0 18
36228: PUSH
36229: LD_VAR 0 19
36233: PUSH
36234: LD_VAR 0 20
36238: PUSH
36239: LD_VAR 0 21
36243: PUSH
36244: LD_VAR 0 22
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: PUSH
36257: LD_VAR 0 4
36261: PUSH
36262: LD_INT 1
36264: PLUS
36265: ARRAY
36266: ST_TO_ADDR
36267: GO 36334
36269: LD_INT 3
36271: DOUBLE
36272: EQUAL
36273: IFTRUE 36277
36275: GO 36333
36277: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36278: LD_ADDR_VAR 0 9
36282: PUSH
36283: LD_VAR 0 23
36287: PUSH
36288: LD_VAR 0 24
36292: PUSH
36293: LD_VAR 0 25
36297: PUSH
36298: LD_VAR 0 26
36302: PUSH
36303: LD_VAR 0 27
36307: PUSH
36308: LD_VAR 0 28
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: PUSH
36321: LD_VAR 0 4
36325: PUSH
36326: LD_INT 1
36328: PLUS
36329: ARRAY
36330: ST_TO_ADDR
36331: GO 36334
36333: POP
36334: GO 36883
36336: LD_INT 2
36338: DOUBLE
36339: EQUAL
36340: IFTRUE 36350
36342: LD_INT 3
36344: DOUBLE
36345: EQUAL
36346: IFTRUE 36350
36348: GO 36406
36350: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36351: LD_ADDR_VAR 0 9
36355: PUSH
36356: LD_VAR 0 29
36360: PUSH
36361: LD_VAR 0 30
36365: PUSH
36366: LD_VAR 0 31
36370: PUSH
36371: LD_VAR 0 32
36375: PUSH
36376: LD_VAR 0 33
36380: PUSH
36381: LD_VAR 0 34
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: PUSH
36394: LD_VAR 0 4
36398: PUSH
36399: LD_INT 1
36401: PLUS
36402: ARRAY
36403: ST_TO_ADDR
36404: GO 36883
36406: LD_INT 16
36408: DOUBLE
36409: EQUAL
36410: IFTRUE 36462
36412: LD_INT 17
36414: DOUBLE
36415: EQUAL
36416: IFTRUE 36462
36418: LD_INT 18
36420: DOUBLE
36421: EQUAL
36422: IFTRUE 36462
36424: LD_INT 19
36426: DOUBLE
36427: EQUAL
36428: IFTRUE 36462
36430: LD_INT 20
36432: DOUBLE
36433: EQUAL
36434: IFTRUE 36462
36436: LD_INT 21
36438: DOUBLE
36439: EQUAL
36440: IFTRUE 36462
36442: LD_INT 23
36444: DOUBLE
36445: EQUAL
36446: IFTRUE 36462
36448: LD_INT 24
36450: DOUBLE
36451: EQUAL
36452: IFTRUE 36462
36454: LD_INT 25
36456: DOUBLE
36457: EQUAL
36458: IFTRUE 36462
36460: GO 36518
36462: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36463: LD_ADDR_VAR 0 9
36467: PUSH
36468: LD_VAR 0 35
36472: PUSH
36473: LD_VAR 0 36
36477: PUSH
36478: LD_VAR 0 37
36482: PUSH
36483: LD_VAR 0 38
36487: PUSH
36488: LD_VAR 0 39
36492: PUSH
36493: LD_VAR 0 40
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: PUSH
36506: LD_VAR 0 4
36510: PUSH
36511: LD_INT 1
36513: PLUS
36514: ARRAY
36515: ST_TO_ADDR
36516: GO 36883
36518: LD_INT 6
36520: DOUBLE
36521: EQUAL
36522: IFTRUE 36574
36524: LD_INT 7
36526: DOUBLE
36527: EQUAL
36528: IFTRUE 36574
36530: LD_INT 8
36532: DOUBLE
36533: EQUAL
36534: IFTRUE 36574
36536: LD_INT 13
36538: DOUBLE
36539: EQUAL
36540: IFTRUE 36574
36542: LD_INT 12
36544: DOUBLE
36545: EQUAL
36546: IFTRUE 36574
36548: LD_INT 15
36550: DOUBLE
36551: EQUAL
36552: IFTRUE 36574
36554: LD_INT 11
36556: DOUBLE
36557: EQUAL
36558: IFTRUE 36574
36560: LD_INT 14
36562: DOUBLE
36563: EQUAL
36564: IFTRUE 36574
36566: LD_INT 10
36568: DOUBLE
36569: EQUAL
36570: IFTRUE 36574
36572: GO 36630
36574: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36575: LD_ADDR_VAR 0 9
36579: PUSH
36580: LD_VAR 0 41
36584: PUSH
36585: LD_VAR 0 42
36589: PUSH
36590: LD_VAR 0 43
36594: PUSH
36595: LD_VAR 0 44
36599: PUSH
36600: LD_VAR 0 45
36604: PUSH
36605: LD_VAR 0 46
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: PUSH
36618: LD_VAR 0 4
36622: PUSH
36623: LD_INT 1
36625: PLUS
36626: ARRAY
36627: ST_TO_ADDR
36628: GO 36883
36630: LD_INT 36
36632: DOUBLE
36633: EQUAL
36634: IFTRUE 36638
36636: GO 36694
36638: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36639: LD_ADDR_VAR 0 9
36643: PUSH
36644: LD_VAR 0 47
36648: PUSH
36649: LD_VAR 0 48
36653: PUSH
36654: LD_VAR 0 49
36658: PUSH
36659: LD_VAR 0 50
36663: PUSH
36664: LD_VAR 0 51
36668: PUSH
36669: LD_VAR 0 52
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: PUSH
36682: LD_VAR 0 4
36686: PUSH
36687: LD_INT 1
36689: PLUS
36690: ARRAY
36691: ST_TO_ADDR
36692: GO 36883
36694: LD_INT 4
36696: DOUBLE
36697: EQUAL
36698: IFTRUE 36720
36700: LD_INT 5
36702: DOUBLE
36703: EQUAL
36704: IFTRUE 36720
36706: LD_INT 34
36708: DOUBLE
36709: EQUAL
36710: IFTRUE 36720
36712: LD_INT 37
36714: DOUBLE
36715: EQUAL
36716: IFTRUE 36720
36718: GO 36776
36720: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36721: LD_ADDR_VAR 0 9
36725: PUSH
36726: LD_VAR 0 53
36730: PUSH
36731: LD_VAR 0 54
36735: PUSH
36736: LD_VAR 0 55
36740: PUSH
36741: LD_VAR 0 56
36745: PUSH
36746: LD_VAR 0 57
36750: PUSH
36751: LD_VAR 0 58
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: PUSH
36764: LD_VAR 0 4
36768: PUSH
36769: LD_INT 1
36771: PLUS
36772: ARRAY
36773: ST_TO_ADDR
36774: GO 36883
36776: LD_INT 31
36778: DOUBLE
36779: EQUAL
36780: IFTRUE 36826
36782: LD_INT 32
36784: DOUBLE
36785: EQUAL
36786: IFTRUE 36826
36788: LD_INT 33
36790: DOUBLE
36791: EQUAL
36792: IFTRUE 36826
36794: LD_INT 27
36796: DOUBLE
36797: EQUAL
36798: IFTRUE 36826
36800: LD_INT 26
36802: DOUBLE
36803: EQUAL
36804: IFTRUE 36826
36806: LD_INT 28
36808: DOUBLE
36809: EQUAL
36810: IFTRUE 36826
36812: LD_INT 29
36814: DOUBLE
36815: EQUAL
36816: IFTRUE 36826
36818: LD_INT 30
36820: DOUBLE
36821: EQUAL
36822: IFTRUE 36826
36824: GO 36882
36826: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36827: LD_ADDR_VAR 0 9
36831: PUSH
36832: LD_VAR 0 59
36836: PUSH
36837: LD_VAR 0 60
36841: PUSH
36842: LD_VAR 0 61
36846: PUSH
36847: LD_VAR 0 62
36851: PUSH
36852: LD_VAR 0 63
36856: PUSH
36857: LD_VAR 0 64
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: PUSH
36870: LD_VAR 0 4
36874: PUSH
36875: LD_INT 1
36877: PLUS
36878: ARRAY
36879: ST_TO_ADDR
36880: GO 36883
36882: POP
// temp_list2 = [ ] ;
36883: LD_ADDR_VAR 0 10
36887: PUSH
36888: EMPTY
36889: ST_TO_ADDR
// for i in temp_list do
36890: LD_ADDR_VAR 0 8
36894: PUSH
36895: LD_VAR 0 9
36899: PUSH
36900: FOR_IN
36901: IFFALSE 36953
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36903: LD_ADDR_VAR 0 10
36907: PUSH
36908: LD_VAR 0 10
36912: PUSH
36913: LD_VAR 0 8
36917: PUSH
36918: LD_INT 1
36920: ARRAY
36921: PUSH
36922: LD_VAR 0 2
36926: PLUS
36927: PUSH
36928: LD_VAR 0 8
36932: PUSH
36933: LD_INT 2
36935: ARRAY
36936: PUSH
36937: LD_VAR 0 3
36941: PLUS
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: EMPTY
36948: LIST
36949: ADD
36950: ST_TO_ADDR
36951: GO 36900
36953: POP
36954: POP
// result = temp_list2 ;
36955: LD_ADDR_VAR 0 7
36959: PUSH
36960: LD_VAR 0 10
36964: ST_TO_ADDR
// end ; end_of_file
36965: LD_VAR 0 7
36969: RET
// every 1 do var i ;
36970: GO 36972
36972: DISABLE
36973: LD_INT 0
36975: PPUSH
// begin Video ( true ) ;
36976: LD_INT 1
36978: PPUSH
36979: CALL 7008 0 1
// CenterOnXY ( 53 , 40 ) ;
36983: LD_INT 53
36985: PPUSH
36986: LD_INT 40
36988: PPUSH
36989: CALL_OW 84
// wait ( 0 0$5 ) ;
36993: LD_INT 175
36995: PPUSH
36996: CALL_OW 67
// if gammaCommander = 1 then
37000: LD_EXP 12
37004: PUSH
37005: LD_INT 1
37007: EQUAL
37008: IFFALSE 37022
// Say ( Donaldson , D1-Don-1 ) ;
37010: LD_EXP 3
37014: PPUSH
37015: LD_STRING D1-Don-1
37017: PPUSH
37018: CALL_OW 88
// if gammaCommander = 2 then
37022: LD_EXP 12
37026: PUSH
37027: LD_INT 2
37029: EQUAL
37030: IFFALSE 37044
// Say ( Brown , D1-Brown-1 ) ;
37032: LD_EXP 2
37036: PPUSH
37037: LD_STRING D1-Brown-1
37039: PPUSH
37040: CALL_OW 88
// if gammaCommander = 3 then
37044: LD_EXP 12
37048: PUSH
37049: LD_INT 3
37051: EQUAL
37052: IFFALSE 37066
// Say ( Houten , D1-VanH-1 ) ;
37054: LD_EXP 13
37058: PPUSH
37059: LD_STRING D1-VanH-1
37061: PPUSH
37062: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
37066: LD_EXP 22
37070: PPUSH
37071: LD_STRING D1-Har-1
37073: PPUSH
37074: CALL_OW 94
// if gammaCommander = 1 then
37078: LD_EXP 12
37082: PUSH
37083: LD_INT 1
37085: EQUAL
37086: IFFALSE 37100
// Say ( Donaldson , D1-Don-2 ) ;
37088: LD_EXP 3
37092: PPUSH
37093: LD_STRING D1-Don-2
37095: PPUSH
37096: CALL_OW 88
// if gammaCommander = 2 then
37100: LD_EXP 12
37104: PUSH
37105: LD_INT 2
37107: EQUAL
37108: IFFALSE 37122
// Say ( Brown , D1-Brown-2 ) ;
37110: LD_EXP 2
37114: PPUSH
37115: LD_STRING D1-Brown-2
37117: PPUSH
37118: CALL_OW 88
// if gammaCommander = 3 then
37122: LD_EXP 12
37126: PUSH
37127: LD_INT 3
37129: EQUAL
37130: IFFALSE 37144
// Say ( Houten , D1-VanH-2 ) ;
37132: LD_EXP 13
37136: PPUSH
37137: LD_STRING D1-VanH-2
37139: PPUSH
37140: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
37144: LD_EXP 22
37148: PPUSH
37149: LD_STRING D1-Har-2
37151: PPUSH
37152: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
37156: LD_INT 22
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 33
37168: PUSH
37169: LD_INT 2
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 61
37178: PUSH
37179: EMPTY
37180: LIST
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: LIST
37186: PPUSH
37187: CALL_OW 69
37191: IFFALSE 37256
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
37193: LD_ADDR_VAR 0 1
37197: PUSH
37198: LD_INT 22
37200: PUSH
37201: LD_INT 1
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 33
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 61
37220: PUSH
37221: EMPTY
37222: LIST
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: LIST
37228: PPUSH
37229: CALL_OW 69
37233: PUSH
37234: FOR_IN
37235: IFFALSE 37254
// ComAgressiveMove ( i , 70 , 41 ) ;
37237: LD_VAR 0 1
37241: PPUSH
37242: LD_INT 70
37244: PPUSH
37245: LD_INT 41
37247: PPUSH
37248: CALL_OW 114
37252: GO 37234
37254: POP
37255: POP
// repeat wait ( 0 0$1 ) ;
37256: LD_INT 35
37258: PPUSH
37259: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
37263: LD_ADDR_VAR 0 1
37267: PUSH
37268: LD_INT 22
37270: PUSH
37271: LD_INT 6
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: EMPTY
37279: LIST
37280: PPUSH
37281: CALL_OW 69
37285: PUSH
37286: FOR_IN
37287: IFFALSE 37306
// ComAgressiveMove ( i , 54 , 20 ) ;
37289: LD_VAR 0 1
37293: PPUSH
37294: LD_INT 54
37296: PPUSH
37297: LD_INT 20
37299: PPUSH
37300: CALL_OW 114
37304: GO 37286
37306: POP
37307: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
37308: LD_ADDR_VAR 0 1
37312: PUSH
37313: LD_INT 22
37315: PUSH
37316: LD_INT 1
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 25
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 3
37335: PUSH
37336: LD_INT 54
37338: PUSH
37339: EMPTY
37340: LIST
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: LIST
37350: PPUSH
37351: CALL_OW 69
37355: PUSH
37356: FOR_IN
37357: IFFALSE 37391
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
37359: LD_VAR 0 1
37363: PPUSH
37364: LD_INT 70
37366: PPUSH
37367: LD_INT 41
37369: PPUSH
37370: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
37374: LD_VAR 0 1
37378: PPUSH
37379: LD_INT 46
37381: PPUSH
37382: LD_INT 39
37384: PPUSH
37385: CALL_OW 174
// end ;
37389: GO 37356
37391: POP
37392: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
37393: LD_ADDR_VAR 0 1
37397: PUSH
37398: LD_INT 22
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 21
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 3
37420: PUSH
37421: LD_INT 24
37423: PUSH
37424: LD_INT 500
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: LIST
37439: PPUSH
37440: CALL_OW 69
37444: PUSH
37445: FOR_IN
37446: IFFALSE 37479
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
37448: LD_VAR 0 1
37452: PPUSH
37453: LD_EXP 37
37457: PPUSH
37458: CALL_OW 250
37462: PPUSH
37463: LD_EXP 37
37467: PPUSH
37468: CALL_OW 251
37472: PPUSH
37473: CALL_OW 111
37477: GO 37445
37479: POP
37480: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
37481: LD_INT 22
37483: PUSH
37484: LD_INT 6
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 21
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 24
37503: PUSH
37504: LD_INT 250
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: PPUSH
37516: CALL_OW 69
37520: PUSH
37521: LD_INT 5
37523: LESS
37524: IFFALSE 37256
// Video ( false ) ;
37526: LD_INT 0
37528: PPUSH
37529: CALL 7008 0 1
// ChangeMissionObjectives ( M1 ) ;
37533: LD_STRING M1
37535: PPUSH
37536: CALL_OW 337
// SaveForQuickRestart ;
37540: CALL_OW 22
// startCutscene = 0 ;
37544: LD_ADDR_EXP 38
37548: PUSH
37549: LD_INT 0
37551: ST_TO_ADDR
// end ;
37552: PPOPN 1
37554: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
37555: LD_EXP 38
37559: IFFALSE 37650
37561: GO 37563
37563: DISABLE
37564: LD_INT 0
37566: PPUSH
37567: PPUSH
// begin enable ;
37568: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
37569: LD_ADDR_VAR 0 1
37573: PUSH
37574: LD_INT 22
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 21
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 3
37596: PUSH
37597: LD_INT 24
37599: PUSH
37600: LD_INT 700
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: LIST
37615: PPUSH
37616: CALL_OW 69
37620: ST_TO_ADDR
// for i in tmp do
37621: LD_ADDR_VAR 0 2
37625: PUSH
37626: LD_VAR 0 1
37630: PUSH
37631: FOR_IN
37632: IFFALSE 37648
// SetLives ( i , 700 ) ;
37634: LD_VAR 0 2
37638: PPUSH
37639: LD_INT 700
37641: PPUSH
37642: CALL_OW 234
37646: GO 37631
37648: POP
37649: POP
// end ;
37650: PPOPN 2
37652: END
// every 1 1$0 do
37653: GO 37655
37655: DISABLE
// begin PrepareSupportFromDelta ;
37656: CALL 3849 0 0
// firstAttack = 1 ;
37660: LD_ADDR_EXP 33
37664: PUSH
37665: LD_INT 1
37667: ST_TO_ADDR
// if IsOk ( Gladstone ) then
37668: LD_EXP 8
37672: PPUSH
37673: CALL_OW 302
37677: IFFALSE 37693
// begin Say ( Gladstone , D2-Glad-1 ) ;
37679: LD_EXP 8
37683: PPUSH
37684: LD_STRING D2-Glad-1
37686: PPUSH
37687: CALL_OW 88
// end else
37691: GO 37801
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
37693: LD_INT 4
37695: PPUSH
37696: LD_INT 22
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 21
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: LD_INT 25
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 25
37731: PUSH
37732: LD_INT 2
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 25
37741: PUSH
37742: LD_INT 3
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 25
37751: PUSH
37752: LD_INT 4
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: PPUSH
37771: CALL_OW 70
37775: PUSH
37776: LD_EXP 15
37780: PUSH
37781: LD_EXP 14
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: DIFF
37790: PPUSH
37791: LD_STRING D2-Sol1-1
37793: PPUSH
37794: LD_STRING D2-FSol1-1
37796: PPUSH
37797: CALL 7036 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
37801: LD_EXP 3
37805: PPUSH
37806: CALL_OW 302
37810: PUSH
37811: LD_EXP 12
37815: PUSH
37816: LD_INT 1
37818: EQUAL
37819: AND
37820: IFFALSE 37834
// Say ( Donaldson , D2-Don-1 ) ;
37822: LD_EXP 3
37826: PPUSH
37827: LD_STRING D2-Don-1
37829: PPUSH
37830: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
37834: LD_EXP 2
37838: PPUSH
37839: CALL_OW 302
37843: PUSH
37844: LD_EXP 12
37848: PUSH
37849: LD_INT 2
37851: EQUAL
37852: AND
37853: IFFALSE 37867
// Say ( Brown , D2-Brown-1 ) ;
37855: LD_EXP 2
37859: PPUSH
37860: LD_STRING D2-Brown-1
37862: PPUSH
37863: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
37867: LD_EXP 13
37871: PPUSH
37872: CALL_OW 302
37876: PUSH
37877: LD_EXP 12
37881: PUSH
37882: LD_INT 3
37884: EQUAL
37885: AND
37886: IFFALSE 37900
// Say ( Houten , D2-VanH-1 ) ;
37888: LD_EXP 13
37892: PPUSH
37893: LD_STRING D2-VanH-1
37895: PPUSH
37896: CALL_OW 88
// end ;
37900: END
// every 0 0$1 do
37901: GO 37903
37903: DISABLE
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
37904: LD_STRING 07_time
37906: PPUSH
37907: LD_INT 12600
37909: PPUSH
37910: CALL_OW 30
37914: PUSH
37915: LD_INT 3
37917: DIV
37918: PPUSH
37919: CALL_OW 67
// PrepareMacmillanSquad ;
37923: CALL 4511 0 0
// CenterNowOnUnits ( JMM ) ;
37927: LD_EXP 1
37931: PPUSH
37932: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
37936: LD_EXP 1
37940: PPUSH
37941: LD_STRING D3-JMM-1
37943: PPUSH
37944: CALL_OW 88
// JMMArrive = 1 ;
37948: LD_ADDR_EXP 39
37952: PUSH
37953: LD_INT 1
37955: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
37956: LD_EXP 3
37960: PPUSH
37961: CALL_OW 302
37965: PUSH
37966: LD_EXP 12
37970: PUSH
37971: LD_INT 1
37973: EQUAL
37974: AND
37975: IFFALSE 37991
// begin Say ( Donaldson , D3-Don-1 ) ;
37977: LD_EXP 3
37981: PPUSH
37982: LD_STRING D3-Don-1
37984: PPUSH
37985: CALL_OW 88
// end else
37989: GO 38043
// begin if gammaCommander = 1 then
37991: LD_EXP 12
37995: PUSH
37996: LD_INT 1
37998: EQUAL
37999: IFFALSE 38043
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
38001: LD_EXP 11
38005: PPUSH
38006: LD_INT 26
38008: PUSH
38009: LD_INT 1
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PPUSH
38016: CALL_OW 72
38020: PPUSH
38021: LD_STRING D3-Sol1-1
38023: PPUSH
38024: LD_STRING D3-Sol1-1
38026: PPUSH
38027: CALL 7036 0 3
// Say ( JMM , D3-JMM-2 ) ;
38031: LD_EXP 1
38035: PPUSH
38036: LD_STRING D3-JMM-2
38038: PPUSH
38039: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
38043: LD_EXP 2
38047: PPUSH
38048: CALL_OW 302
38052: PUSH
38053: LD_EXP 12
38057: PUSH
38058: LD_INT 2
38060: EQUAL
38061: AND
38062: IFFALSE 38078
// begin Say ( Brown , D3-Brown-1 ) ;
38064: LD_EXP 2
38068: PPUSH
38069: LD_STRING D3-Brown-1
38071: PPUSH
38072: CALL_OW 88
// end else
38076: GO 38130
// begin if gammaCommander = 2 then
38078: LD_EXP 12
38082: PUSH
38083: LD_INT 2
38085: EQUAL
38086: IFFALSE 38130
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
38088: LD_EXP 11
38092: PPUSH
38093: LD_INT 26
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PPUSH
38103: CALL_OW 72
38107: PPUSH
38108: LD_STRING D3-Sol1-1a
38110: PPUSH
38111: LD_STRING D3-Sol1-1a
38113: PPUSH
38114: CALL 7036 0 3
// Say ( JMM , D3-JMM-2 ) ;
38118: LD_EXP 1
38122: PPUSH
38123: LD_STRING D3-JMM-2
38125: PPUSH
38126: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
38130: LD_EXP 13
38134: PPUSH
38135: CALL_OW 302
38139: PUSH
38140: LD_EXP 12
38144: PUSH
38145: LD_INT 3
38147: EQUAL
38148: AND
38149: IFFALSE 38165
// begin Say ( Houten , D3-VanH-1 ) ;
38151: LD_EXP 13
38155: PPUSH
38156: LD_STRING D3-VanH-1
38158: PPUSH
38159: CALL_OW 88
// end else
38163: GO 38217
// begin if gammaCommander = 3 then
38165: LD_EXP 12
38169: PUSH
38170: LD_INT 3
38172: EQUAL
38173: IFFALSE 38217
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
38175: LD_EXP 11
38179: PPUSH
38180: LD_INT 26
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PPUSH
38190: CALL_OW 72
38194: PPUSH
38195: LD_STRING D3-Sol1-1b
38197: PPUSH
38198: LD_STRING D3-Sol1-1b
38200: PPUSH
38201: CALL 7036 0 3
// Say ( JMM , D3-JMM-2 ) ;
38205: LD_EXP 1
38209: PPUSH
38210: LD_STRING D3-JMM-2
38212: PPUSH
38213: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
38217: LD_EXP 15
38221: PPUSH
38222: CALL_OW 302
38226: IFFALSE 38254
// begin Say ( Joan , D3a-Joan-1 ) ;
38228: LD_EXP 15
38232: PPUSH
38233: LD_STRING D3a-Joan-1
38235: PPUSH
38236: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
38240: LD_EXP 1
38244: PPUSH
38245: LD_STRING D3a-JMM-1
38247: PPUSH
38248: CALL_OW 88
// end else
38252: GO 38596
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
38254: LD_STRING 06_JoanStatus_1
38256: PPUSH
38257: LD_INT 0
38259: PPUSH
38260: CALL_OW 30
38264: PUSH
38265: LD_INT 1
38267: EQUAL
38268: IFFALSE 38596
// begin Say ( JMM , D3b-JMM-1 ) ;
38270: LD_EXP 1
38274: PPUSH
38275: LD_STRING D3b-JMM-1
38277: PPUSH
38278: CALL_OW 88
// if gammaCommander = 1 then
38282: LD_EXP 12
38286: PUSH
38287: LD_INT 1
38289: EQUAL
38290: IFFALSE 38347
// if IsOK ( Donaldson ) then
38292: LD_EXP 3
38296: PPUSH
38297: CALL_OW 302
38301: IFFALSE 38317
// Say ( Donaldson , D3b-Don-1 ) else
38303: LD_EXP 3
38307: PPUSH
38308: LD_STRING D3b-Don-1
38310: PPUSH
38311: CALL_OW 88
38315: GO 38347
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38317: LD_EXP 11
38321: PPUSH
38322: LD_INT 26
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PPUSH
38332: CALL_OW 72
38336: PPUSH
38337: LD_STRING D3b-Sol1-1
38339: PPUSH
38340: LD_STRING D3b-Sol1-1
38342: PPUSH
38343: CALL 7036 0 3
// if gammaCommander = 2 then
38347: LD_EXP 12
38351: PUSH
38352: LD_INT 2
38354: EQUAL
38355: IFFALSE 38412
// if IsOk ( Brown ) then
38357: LD_EXP 2
38361: PPUSH
38362: CALL_OW 302
38366: IFFALSE 38382
// Say ( Brown , D3b-Brown-1 ) else
38368: LD_EXP 2
38372: PPUSH
38373: LD_STRING D3b-Brown-1
38375: PPUSH
38376: CALL_OW 88
38380: GO 38412
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38382: LD_EXP 11
38386: PPUSH
38387: LD_INT 26
38389: PUSH
38390: LD_INT 1
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PPUSH
38397: CALL_OW 72
38401: PPUSH
38402: LD_STRING D3b-Sol1-1
38404: PPUSH
38405: LD_STRING D3b-Sol1-1
38407: PPUSH
38408: CALL 7036 0 3
// if gammaCommander = 3 then
38412: LD_EXP 12
38416: PUSH
38417: LD_INT 3
38419: EQUAL
38420: IFFALSE 38477
// if IsOk ( Houten ) then
38422: LD_EXP 13
38426: PPUSH
38427: CALL_OW 302
38431: IFFALSE 38447
// Say ( Houten , D3b-VanH-1 ) else
38433: LD_EXP 13
38437: PPUSH
38438: LD_STRING D3b-VanH-1
38440: PPUSH
38441: CALL_OW 88
38445: GO 38477
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38447: LD_EXP 11
38451: PPUSH
38452: LD_INT 26
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PPUSH
38462: CALL_OW 72
38466: PPUSH
38467: LD_STRING D3b-Sol1-1
38469: PPUSH
38470: LD_STRING D3b-Sol1-1
38472: PPUSH
38473: CALL 7036 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
38477: LD_EXP 11
38481: PPUSH
38482: LD_INT 26
38484: PUSH
38485: LD_INT 1
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PPUSH
38492: CALL_OW 72
38496: PUSH
38497: LD_EXP 12
38501: PUSH
38502: LD_INT 1
38504: EQUAL
38505: PUSH
38506: LD_EXP 3
38510: PPUSH
38511: CALL_OW 302
38515: AND
38516: OR
38517: PUSH
38518: LD_EXP 12
38522: PUSH
38523: LD_INT 2
38525: EQUAL
38526: PUSH
38527: LD_EXP 2
38531: PPUSH
38532: CALL_OW 302
38536: AND
38537: OR
38538: PUSH
38539: LD_EXP 12
38543: PUSH
38544: LD_INT 3
38546: EQUAL
38547: PUSH
38548: LD_EXP 13
38552: PPUSH
38553: CALL_OW 302
38557: AND
38558: OR
38559: IFFALSE 38573
// Say ( JMM , D3b-JMM-2 ) ;
38561: LD_EXP 1
38565: PPUSH
38566: LD_STRING D3b-JMM-2
38568: PPUSH
38569: CALL_OW 88
// if IsOK ( Lisa ) then
38573: LD_EXP 6
38577: PPUSH
38578: CALL_OW 302
38582: IFFALSE 38596
// Say ( Lisa , D3b-Lisa-2 ) ;
38584: LD_EXP 6
38588: PPUSH
38589: LD_STRING D3b-Lisa-2
38591: PPUSH
38592: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
38596: LD_INT 22
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 21
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 26
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 2
38628: PUSH
38629: LD_INT 25
38631: PUSH
38632: LD_INT 1
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 25
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 25
38651: PUSH
38652: LD_INT 3
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 25
38661: PUSH
38662: LD_INT 4
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: PPUSH
38682: CALL_OW 69
38686: PUSH
38687: LD_EXP 1
38691: PUSH
38692: LD_EXP 2
38696: PUSH
38697: LD_EXP 3
38701: PUSH
38702: LD_EXP 4
38706: PUSH
38707: LD_EXP 5
38711: PUSH
38712: LD_EXP 6
38716: PUSH
38717: LD_EXP 7
38721: PUSH
38722: LD_EXP 8
38726: PUSH
38727: LD_EXP 9
38731: PUSH
38732: LD_EXP 10
38736: PUSH
38737: LD_EXP 15
38741: PUSH
38742: LD_EXP 14
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: DIFF
38761: PPUSH
38762: LD_STRING DCa-Sol1-1
38764: PPUSH
38765: LD_STRING DCa-Sol1-1
38767: PPUSH
38768: CALL 7036 0 3
// Say ( JMM , DCb-JMM-1 ) ;
38772: LD_EXP 1
38776: PPUSH
38777: LD_STRING DCb-JMM-1
38779: PPUSH
38780: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
38784: LD_INT 22
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 21
38796: PUSH
38797: LD_INT 1
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 26
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 2
38816: PUSH
38817: LD_INT 25
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 25
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 25
38839: PUSH
38840: LD_INT 3
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 25
38849: PUSH
38850: LD_INT 4
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: PPUSH
38870: CALL_OW 69
38874: PUSH
38875: LD_EXP 1
38879: PUSH
38880: LD_EXP 2
38884: PUSH
38885: LD_EXP 3
38889: PUSH
38890: LD_EXP 4
38894: PUSH
38895: LD_EXP 5
38899: PUSH
38900: LD_EXP 6
38904: PUSH
38905: LD_EXP 7
38909: PUSH
38910: LD_EXP 8
38914: PUSH
38915: LD_EXP 9
38919: PUSH
38920: LD_EXP 10
38924: PUSH
38925: LD_EXP 15
38929: PUSH
38930: LD_EXP 14
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: DIFF
38949: PPUSH
38950: LD_STRING DCb-Sol1-1
38952: PPUSH
38953: LD_STRING DCb-Sol1-1
38955: PPUSH
38956: CALL 7036 0 3
// Say ( JMM , DCb-JMM-2 ) ;
38960: LD_EXP 1
38964: PPUSH
38965: LD_STRING DCb-JMM-2
38967: PPUSH
38968: CALL_OW 88
// secondAttack = 1 ;
38972: LD_ADDR_EXP 34
38976: PUSH
38977: LD_INT 1
38979: ST_TO_ADDR
// end ;
38980: END
// every 0 0$01 trigger JMMArrive = 1 do
38981: LD_EXP 39
38985: PUSH
38986: LD_INT 1
38988: EQUAL
38989: IFFALSE 39069
38991: GO 38993
38993: DISABLE
// begin wait ( 3 3$0 ) ;
38994: LD_INT 6300
38996: PPUSH
38997: CALL_OW 67
// DialogueOn ;
39001: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
39005: LD_EXP 23
39009: PPUSH
39010: LD_STRING D4-Pow-1
39012: PPUSH
39013: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
39017: LD_EXP 1
39021: PPUSH
39022: LD_STRING D4-JMM-1
39024: PPUSH
39025: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
39029: LD_EXP 23
39033: PPUSH
39034: LD_STRING D4-Pow-2
39036: PPUSH
39037: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
39041: LD_EXP 1
39045: PPUSH
39046: LD_STRING D4-JMM-2
39048: PPUSH
39049: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
39053: LD_EXP 23
39057: PPUSH
39058: LD_STRING D4-Pow-3
39060: PPUSH
39061: CALL_OW 94
// DialogueOff ;
39065: CALL_OW 7
// end ;
39069: END
// every 0 0$01 trigger JMMArrive = 1 do
39070: LD_EXP 39
39074: PUSH
39075: LD_INT 1
39077: EQUAL
39078: IFFALSE 39110
39080: GO 39082
39082: DISABLE
// begin wait ( 8 8$0 ) ;
39083: LD_INT 16800
39085: PPUSH
39086: CALL_OW 67
// DialogueOn ;
39090: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
39094: LD_EXP 23
39098: PPUSH
39099: LD_STRING D4a-Pow-1
39101: PPUSH
39102: CALL_OW 94
// DialogueOff ;
39106: CALL_OW 7
// end ;
39110: END
// every 0 0$01 trigger JMMArrive = 1 do
39111: LD_EXP 39
39115: PUSH
39116: LD_INT 1
39118: EQUAL
39119: IFFALSE 39164
39121: GO 39123
39123: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
39124: LD_INT 21000
39126: PUSH
39127: LD_INT 25200
39129: PUSH
39130: LD_INT 31500
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: LIST
39137: PUSH
39138: LD_OWVAR 67
39142: ARRAY
39143: PPUSH
39144: CALL_OW 67
// PrepareSikorsky ;
39148: CALL 5592 0 0
// SikorskyArrive = 1 ;
39152: LD_ADDR_EXP 18
39156: PUSH
39157: LD_INT 1
39159: ST_TO_ADDR
// PrepareSikorskyArmy ;
39160: CALL 5732 0 0
// end ;
39164: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
39165: LD_EXP 17
39169: PPUSH
39170: LD_INT 5
39172: PPUSH
39173: CALL_OW 308
39177: IFFALSE 39369
39179: GO 39181
39181: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
39182: LD_EXP 17
39186: PPUSH
39187: CALL_OW 87
// DialogueOn ;
39191: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
39195: LD_EXP 16
39199: PPUSH
39200: LD_STRING D5-Sik-1
39202: PPUSH
39203: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
39207: LD_EXP 1
39211: PPUSH
39212: LD_STRING D5-JMM-1a
39214: PPUSH
39215: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
39219: LD_EXP 16
39223: PPUSH
39224: LD_STRING D5-Sik-2
39226: PPUSH
39227: CALL_OW 88
// case query ( QSikorski ) of 1 :
39231: LD_STRING QSikorski
39233: PPUSH
39234: CALL_OW 97
39238: PUSH
39239: LD_INT 1
39241: DOUBLE
39242: EQUAL
39243: IFTRUE 39247
39245: GO 39270
39247: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
39248: LD_EXP 16
39252: PPUSH
39253: LD_STRING D5a-Sik-1
39255: PPUSH
39256: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
39260: LD_ADDR_EXP 19
39264: PUSH
39265: LD_INT 2100
39267: ST_TO_ADDR
// end ; 2 :
39268: GO 39357
39270: LD_INT 2
39272: DOUBLE
39273: EQUAL
39274: IFTRUE 39278
39276: GO 39301
39278: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
39279: LD_EXP 16
39283: PPUSH
39284: LD_STRING D5b-Sik-1
39286: PPUSH
39287: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39291: LD_ADDR_EXP 19
39295: PUSH
39296: LD_INT 10500
39298: ST_TO_ADDR
// end ; 3 :
39299: GO 39357
39301: LD_INT 3
39303: DOUBLE
39304: EQUAL
39305: IFTRUE 39309
39307: GO 39356
39309: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
39310: LD_EXP 16
39314: PPUSH
39315: LD_STRING D5c-Sik-1
39317: PPUSH
39318: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
39322: LD_EXP 1
39326: PPUSH
39327: LD_STRING D5c-JMM-1
39329: PPUSH
39330: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
39334: LD_EXP 16
39338: PPUSH
39339: LD_STRING D5c-Sik-2
39341: PPUSH
39342: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39346: LD_ADDR_EXP 19
39350: PUSH
39351: LD_INT 10500
39353: ST_TO_ADDR
// end ; end ;
39354: GO 39357
39356: POP
// DialogueOff ;
39357: CALL_OW 7
// timerStatus = 1 ;
39361: LD_ADDR_EXP 35
39365: PUSH
39366: LD_INT 1
39368: ST_TO_ADDR
// end ;
39369: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
39370: LD_EXP 19
39374: PUSH
39375: LD_INT 35
39377: LESS
39378: IFFALSE 39426
39380: GO 39382
39382: DISABLE
// begin timerStatus = 0 ;
39383: LD_ADDR_EXP 35
39387: PUSH
39388: LD_INT 0
39390: ST_TO_ADDR
// DialogueOn ;
39391: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
39395: LD_EXP 16
39399: PPUSH
39400: LD_STRING D6-Sik-1
39402: PPUSH
39403: CALL_OW 88
// DialogueOff ;
39407: CALL_OW 7
// SikorskyAI = 1 ;
39411: LD_ADDR_EXP 20
39415: PUSH
39416: LD_INT 1
39418: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
39419: LD_STRING M2
39421: PPUSH
39422: CALL_OW 337
// end ;
39426: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
39427: LD_EXP 17
39431: PPUSH
39432: LD_INT 18
39434: PPUSH
39435: CALL_OW 308
39439: IFFALSE 39523
39441: GO 39443
39443: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
39444: LD_EXP 16
39448: PPUSH
39449: LD_STRING D7-Sik-1
39451: PPUSH
39452: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
39456: LD_EXP 1
39460: PPUSH
39461: LD_INT 24
39463: PPUSH
39464: CALL_OW 308
39468: PUSH
39469: LD_EXP 1
39473: PPUSH
39474: CALL_OW 310
39478: OR
39479: IFFALSE 39503
// begin Say ( Sikorski , D7a-Sik-1 ) ;
39481: LD_EXP 16
39485: PPUSH
39486: LD_STRING D7a-Sik-1
39488: PPUSH
39489: CALL_OW 88
// SikorskyStatus = 1 ;
39493: LD_ADDR_EXP 21
39497: PUSH
39498: LD_INT 1
39500: ST_TO_ADDR
// end else
39501: GO 39523
// begin Say ( Sikorski , D7b-Sik-1 ) ;
39503: LD_EXP 16
39507: PPUSH
39508: LD_STRING D7b-Sik-1
39510: PPUSH
39511: CALL_OW 88
// SikorskyStatus = 2 ;
39515: LD_ADDR_EXP 21
39519: PUSH
39520: LD_INT 2
39522: ST_TO_ADDR
// end ; end ;
39523: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
39524: LD_EXP 36
39528: PUSH
39529: LD_INT 1
39531: EQUAL
39532: IFFALSE 39641
39534: GO 39536
39536: DISABLE
39537: LD_INT 0
39539: PPUSH
// begin enable ;
39540: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
39541: LD_ADDR_VAR 0 1
39545: PUSH
39546: LD_INT 22
39548: PUSH
39549: LD_INT 3
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PPUSH
39556: CALL_OW 69
39560: PUSH
39561: FOR_IN
39562: IFFALSE 39589
// if IsInArea ( i , RussianEscape ) then
39564: LD_VAR 0 1
39568: PPUSH
39569: LD_INT 22
39571: PPUSH
39572: CALL_OW 308
39576: IFFALSE 39587
// RemoveUnit ( i ) ;
39578: LD_VAR 0 1
39582: PPUSH
39583: CALL_OW 64
39587: GO 39561
39589: POP
39590: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
39591: LD_ADDR_VAR 0 1
39595: PUSH
39596: LD_INT 22
39598: PUSH
39599: LD_INT 6
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PPUSH
39606: CALL_OW 69
39610: PUSH
39611: FOR_IN
39612: IFFALSE 39639
// if IsInArea ( i , RussianEscape ) then
39614: LD_VAR 0 1
39618: PPUSH
39619: LD_INT 22
39621: PPUSH
39622: CALL_OW 308
39626: IFFALSE 39637
// RemoveUnit ( i ) ;
39628: LD_VAR 0 1
39632: PPUSH
39633: CALL_OW 64
39637: GO 39611
39639: POP
39640: POP
// end ; end_of_file
39641: PPOPN 1
39643: END
// on BuildingComplete ( building ) do var tmp , un ;
39644: LD_INT 0
39646: PPUSH
39647: PPUSH
// begin if GetSide ( building ) = 3 then
39648: LD_VAR 0 1
39652: PPUSH
39653: CALL_OW 255
39657: PUSH
39658: LD_INT 3
39660: EQUAL
39661: IFFALSE 40198
// begin if GetBType ( building ) = b_depot then
39663: LD_VAR 0 1
39667: PPUSH
39668: CALL_OW 266
39672: PUSH
39673: LD_INT 0
39675: EQUAL
39676: IFFALSE 39744
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
39678: LD_VAR 0 1
39682: PPUSH
39683: CALL_OW 274
39687: PPUSH
39688: LD_INT 1
39690: PPUSH
39691: LD_INT 5000
39693: PPUSH
39694: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
39698: LD_VAR 0 1
39702: PPUSH
39703: CALL_OW 274
39707: PPUSH
39708: LD_INT 2
39710: PPUSH
39711: LD_INT 5000
39713: PPUSH
39714: CALL_OW 277
// SetBName ( building , konev ) ;
39718: LD_VAR 0 1
39722: PPUSH
39723: LD_STRING konev
39725: PPUSH
39726: CALL_OW 500
// ruDepot = building ;
39730: LD_ADDR_EXP 28
39734: PUSH
39735: LD_VAR 0 1
39739: ST_TO_ADDR
// BuildRussianBase ;
39740: CALL 7647 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
39744: LD_VAR 0 1
39748: PPUSH
39749: CALL_OW 266
39753: PUSH
39754: LD_INT 0
39756: EQUAL
39757: PUSH
39758: LD_VAR 0 1
39762: PPUSH
39763: CALL_OW 266
39767: PUSH
39768: LD_INT 2
39770: EQUAL
39771: OR
39772: PUSH
39773: LD_VAR 0 1
39777: PPUSH
39778: CALL_OW 266
39782: PUSH
39783: LD_INT 4
39785: EQUAL
39786: OR
39787: IFFALSE 39798
// ComUpgrade ( building ) ;
39789: LD_VAR 0 1
39793: PPUSH
39794: CALL_OW 146
// if GetBType ( building ) = b_lab then
39798: LD_VAR 0 1
39802: PPUSH
39803: CALL_OW 266
39807: PUSH
39808: LD_INT 6
39810: EQUAL
39811: IFFALSE 39862
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
39813: LD_VAR 0 1
39817: PPUSH
39818: LD_INT 10
39820: PPUSH
39821: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
39825: LD_VAR 0 1
39829: PPUSH
39830: LD_INT 12
39832: PPUSH
39833: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
39837: LD_INT 3
39839: PPUSH
39840: LD_VAR 0 1
39844: PPUSH
39845: LD_INT 3
39847: PPUSH
39848: CALL 8191 0 3
// ruLab = building ;
39852: LD_ADDR_EXP 29
39856: PUSH
39857: LD_VAR 0 1
39861: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
39862: LD_VAR 0 1
39866: PPUSH
39867: CALL_OW 266
39871: PUSH
39872: LD_INT 32
39874: EQUAL
39875: IFFALSE 39993
// begin uc_side = 3 ;
39877: LD_ADDR_OWVAR 20
39881: PUSH
39882: LD_INT 3
39884: ST_TO_ADDR
// uc_nation = 3 ;
39885: LD_ADDR_OWVAR 21
39889: PUSH
39890: LD_INT 3
39892: ST_TO_ADDR
// hc_gallery =  ;
39893: LD_ADDR_OWVAR 33
39897: PUSH
39898: LD_STRING 
39900: ST_TO_ADDR
// hc_name =  ;
39901: LD_ADDR_OWVAR 26
39905: PUSH
39906: LD_STRING 
39908: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
39909: LD_INT 0
39911: PPUSH
39912: LD_INT 1
39914: PPUSH
39915: LD_EXP 25
39919: PPUSH
39920: LD_EXP 26
39924: PPUSH
39925: CALL_OW 12
39929: PPUSH
39930: CALL_OW 380
// un = CreateHuman ;
39934: LD_ADDR_VAR 0 3
39938: PUSH
39939: CALL_OW 44
39943: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
39944: LD_VAR 0 3
39948: PPUSH
39949: LD_VAR 0 1
39953: PPUSH
39954: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
39958: LD_VAR 0 1
39962: PPUSH
39963: LD_INT 43
39965: PUSH
39966: LD_INT 44
39968: PUSH
39969: LD_INT 46
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 1
39979: PPUSH
39980: LD_INT 3
39982: PPUSH
39983: CALL_OW 12
39987: ARRAY
39988: PPUSH
39989: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
39993: LD_VAR 0 1
39997: PPUSH
39998: CALL_OW 266
40002: PUSH
40003: LD_INT 33
40005: EQUAL
40006: IFFALSE 40043
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40008: LD_VAR 0 1
40012: PPUSH
40013: LD_INT 43
40015: PUSH
40016: LD_INT 44
40018: PUSH
40019: LD_INT 46
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 1
40029: PPUSH
40030: LD_INT 3
40032: PPUSH
40033: CALL_OW 12
40037: ARRAY
40038: PPUSH
40039: CALL_OW 208
// if GetBType ( building ) = b_bunker then
40043: LD_VAR 0 1
40047: PPUSH
40048: CALL_OW 266
40052: PUSH
40053: LD_INT 32
40055: EQUAL
40056: IFFALSE 40093
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40058: LD_VAR 0 1
40062: PPUSH
40063: LD_INT 43
40065: PUSH
40066: LD_INT 44
40068: PUSH
40069: LD_INT 46
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: PPUSH
40080: LD_INT 3
40082: PPUSH
40083: CALL_OW 12
40087: ARRAY
40088: PPUSH
40089: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
40093: LD_VAR 0 1
40097: PPUSH
40098: CALL_OW 266
40102: PUSH
40103: LD_INT 24
40105: EQUAL
40106: IFFALSE 40116
// russianAI = 1 ;
40108: LD_ADDR_EXP 27
40112: PUSH
40113: LD_INT 1
40115: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
40116: LD_EXP 31
40120: PUSH
40121: LD_INT 0
40123: GREATER
40124: IFFALSE 40198
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40126: LD_ADDR_EXP 31
40130: PUSH
40131: LD_EXP 31
40135: PPUSH
40136: LD_INT 1
40138: PPUSH
40139: CALL_OW 3
40143: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40144: LD_ADDR_EXP 31
40148: PUSH
40149: LD_EXP 31
40153: PPUSH
40154: LD_INT 1
40156: PPUSH
40157: CALL_OW 3
40161: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40162: LD_ADDR_EXP 31
40166: PUSH
40167: LD_EXP 31
40171: PPUSH
40172: LD_INT 1
40174: PPUSH
40175: CALL_OW 3
40179: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40180: LD_ADDR_EXP 31
40184: PUSH
40185: LD_EXP 31
40189: PPUSH
40190: LD_INT 1
40192: PPUSH
40193: CALL_OW 3
40197: ST_TO_ADDR
// end ; end ; end ;
40198: PPOPN 3
40200: END
// on UpgradeComplete ( building ) do var i ;
40201: LD_INT 0
40203: PPUSH
// begin if GetSide ( building ) = 3 then
40204: LD_VAR 0 1
40208: PPUSH
40209: CALL_OW 255
40213: PUSH
40214: LD_INT 3
40216: EQUAL
40217: IFFALSE 40398
// begin if GetBType ( building ) = b_factory then
40219: LD_VAR 0 1
40223: PPUSH
40224: CALL_OW 266
40228: PUSH
40229: LD_INT 3
40231: EQUAL
40232: IFFALSE 40299
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
40234: LD_ADDR_VAR 0 2
40238: PUSH
40239: LD_INT 22
40241: PUSH
40242: LD_INT 3
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 25
40251: PUSH
40252: LD_INT 3
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PPUSH
40263: CALL_OW 69
40267: PUSH
40268: FOR_IN
40269: IFFALSE 40287
// ComEnterUnit ( i , building ) ;
40271: LD_VAR 0 2
40275: PPUSH
40276: LD_VAR 0 1
40280: PPUSH
40281: CALL_OW 120
40285: GO 40268
40287: POP
40288: POP
// ruFab = building ;
40289: LD_ADDR_EXP 30
40293: PUSH
40294: LD_VAR 0 1
40298: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
40299: LD_VAR 0 1
40303: PPUSH
40304: CALL_OW 266
40308: PUSH
40309: LD_INT 8
40311: EQUAL
40312: IFFALSE 40369
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
40314: LD_ADDR_VAR 0 2
40318: PUSH
40319: LD_INT 22
40321: PUSH
40322: LD_INT 3
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 25
40331: PUSH
40332: LD_INT 4
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PPUSH
40343: CALL_OW 69
40347: PUSH
40348: FOR_IN
40349: IFFALSE 40367
// ComEnterUnit ( i , building ) ;
40351: LD_VAR 0 2
40355: PPUSH
40356: LD_VAR 0 1
40360: PPUSH
40361: CALL_OW 120
40365: GO 40348
40367: POP
40368: POP
// if GetBType ( building ) = b_warehouse then
40369: LD_VAR 0 1
40373: PPUSH
40374: CALL_OW 266
40378: PUSH
40379: LD_INT 1
40381: EQUAL
40382: IFFALSE 40398
// begin ComEnterUnit ( Borodin , building ) ;
40384: LD_EXP 24
40388: PPUSH
40389: LD_VAR 0 1
40393: PPUSH
40394: CALL_OW 120
// end ; end ; end ;
40398: PPOPN 2
40400: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
40401: LD_VAR 0 1
40405: PPUSH
40406: CALL_OW 247
40410: PUSH
40411: LD_INT 2
40413: EQUAL
40414: PUSH
40415: LD_VAR 0 1
40419: PPUSH
40420: CALL_OW 263
40424: PUSH
40425: LD_INT 3
40427: EQUAL
40428: AND
40429: PUSH
40430: LD_EXP 41
40434: PUSH
40435: LD_INT 0
40437: EQUAL
40438: AND
40439: IFFALSE 40557
// begin varEvent1 = 1 ;
40441: LD_ADDR_EXP 41
40445: PUSH
40446: LD_INT 1
40448: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
40449: LD_VAR 0 1
40453: PPUSH
40454: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
40458: LD_INT 22
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 21
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: LD_INT 25
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 25
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 25
40503: PUSH
40504: LD_INT 3
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 25
40513: PUSH
40514: LD_INT 4
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: LIST
40532: PPUSH
40533: CALL_OW 69
40537: PUSH
40538: LD_EXP 1
40542: PUSH
40543: EMPTY
40544: LIST
40545: DIFF
40546: PPUSH
40547: LD_STRING DC-Sol1-1
40549: PPUSH
40550: LD_STRING DC-FSol1-1
40552: PPUSH
40553: CALL 7036 0 3
// end ; end ;
40557: PPOPN 1
40559: END
// on UnitDestroyed ( unit ) do var i ;
40560: LD_INT 0
40562: PPUSH
// begin if GetSide ( unit ) = 3 then
40563: LD_VAR 0 1
40567: PPUSH
40568: CALL_OW 255
40572: PUSH
40573: LD_INT 3
40575: EQUAL
40576: IFFALSE 41346
// begin if GetType ( unit ) = unit_building then
40578: LD_VAR 0 1
40582: PPUSH
40583: CALL_OW 247
40587: PUSH
40588: LD_INT 3
40590: EQUAL
40591: IFFALSE 41283
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
40593: LD_VAR 0 1
40597: PPUSH
40598: CALL_OW 266
40602: PUSH
40603: LD_INT 31
40605: EQUAL
40606: PUSH
40607: LD_VAR 0 1
40611: PPUSH
40612: CALL_OW 266
40616: PUSH
40617: LD_INT 32
40619: EQUAL
40620: OR
40621: PUSH
40622: LD_VAR 0 1
40626: PPUSH
40627: CALL_OW 266
40631: PUSH
40632: LD_INT 36
40634: EQUAL
40635: OR
40636: PUSH
40637: LD_VAR 0 1
40641: PPUSH
40642: CALL_OW 266
40646: PUSH
40647: LD_INT 0
40649: EQUAL
40650: OR
40651: PUSH
40652: LD_VAR 0 1
40656: PPUSH
40657: CALL_OW 266
40661: PUSH
40662: LD_INT 24
40664: EQUAL
40665: OR
40666: PUSH
40667: LD_VAR 0 1
40671: PPUSH
40672: CALL_OW 266
40676: PUSH
40677: LD_INT 17
40679: EQUAL
40680: OR
40681: PUSH
40682: LD_VAR 0 1
40686: PPUSH
40687: CALL_OW 266
40691: PUSH
40692: LD_INT 25
40694: EQUAL
40695: OR
40696: PUSH
40697: LD_VAR 0 1
40701: PPUSH
40702: CALL_OW 266
40706: PUSH
40707: LD_INT 19
40709: EQUAL
40710: OR
40711: PUSH
40712: LD_VAR 0 1
40716: PPUSH
40717: CALL_OW 266
40721: PUSH
40722: LD_INT 20
40724: EQUAL
40725: OR
40726: PUSH
40727: LD_VAR 0 1
40731: PPUSH
40732: CALL_OW 266
40736: PUSH
40737: LD_INT 18
40739: EQUAL
40740: OR
40741: PUSH
40742: LD_VAR 0 1
40746: PPUSH
40747: CALL_OW 266
40751: PUSH
40752: LD_INT 21
40754: EQUAL
40755: OR
40756: PUSH
40757: LD_VAR 0 1
40761: PPUSH
40762: CALL_OW 266
40766: PUSH
40767: LD_INT 23
40769: EQUAL
40770: OR
40771: PUSH
40772: LD_VAR 0 1
40776: PPUSH
40777: CALL_OW 266
40781: PUSH
40782: LD_INT 16
40784: EQUAL
40785: OR
40786: PUSH
40787: LD_VAR 0 1
40791: PPUSH
40792: CALL_OW 266
40796: PUSH
40797: LD_INT 6
40799: EQUAL
40800: OR
40801: PUSH
40802: LD_VAR 0 1
40806: PPUSH
40807: CALL_OW 266
40811: PUSH
40812: LD_INT 29
40814: EQUAL
40815: OR
40816: PUSH
40817: LD_VAR 0 1
40821: PPUSH
40822: CALL_OW 266
40826: PUSH
40827: LD_INT 26
40829: EQUAL
40830: OR
40831: PUSH
40832: LD_VAR 0 1
40836: PPUSH
40837: CALL_OW 266
40841: PUSH
40842: LD_INT 30
40844: EQUAL
40845: OR
40846: PUSH
40847: LD_VAR 0 1
40851: PPUSH
40852: CALL_OW 266
40856: PUSH
40857: LD_INT 28
40859: EQUAL
40860: OR
40861: PUSH
40862: LD_VAR 0 1
40866: PPUSH
40867: CALL_OW 266
40871: PUSH
40872: LD_INT 27
40874: EQUAL
40875: OR
40876: PUSH
40877: LD_VAR 0 1
40881: PPUSH
40882: CALL_OW 266
40886: PUSH
40887: LD_INT 33
40889: EQUAL
40890: OR
40891: PUSH
40892: LD_VAR 0 1
40896: PPUSH
40897: CALL_OW 266
40901: PUSH
40902: LD_INT 2
40904: EQUAL
40905: OR
40906: PUSH
40907: LD_VAR 0 1
40911: PPUSH
40912: CALL_OW 266
40916: PUSH
40917: LD_INT 4
40919: EQUAL
40920: OR
40921: IFFALSE 41007
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
40923: LD_ADDR_EXP 31
40927: PUSH
40928: LD_EXP 31
40932: PUSH
40933: LD_VAR 0 1
40937: PPUSH
40938: CALL_OW 266
40942: ADD
40943: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
40944: LD_ADDR_EXP 31
40948: PUSH
40949: LD_EXP 31
40953: PUSH
40954: LD_VAR 0 1
40958: PPUSH
40959: CALL_OW 250
40963: ADD
40964: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
40965: LD_ADDR_EXP 31
40969: PUSH
40970: LD_EXP 31
40974: PUSH
40975: LD_VAR 0 1
40979: PPUSH
40980: CALL_OW 251
40984: ADD
40985: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
40986: LD_ADDR_EXP 31
40990: PUSH
40991: LD_EXP 31
40995: PUSH
40996: LD_VAR 0 1
41000: PPUSH
41001: CALL_OW 254
41005: ADD
41006: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
41007: LD_VAR 0 1
41011: PPUSH
41012: CALL_OW 266
41016: PUSH
41017: LD_INT 1
41019: EQUAL
41020: IFFALSE 41099
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
41022: LD_ADDR_EXP 31
41026: PUSH
41027: LD_EXP 31
41031: PUSH
41032: LD_INT 0
41034: ADD
41035: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41036: LD_ADDR_EXP 31
41040: PUSH
41041: LD_EXP 31
41045: PUSH
41046: LD_VAR 0 1
41050: PPUSH
41051: CALL_OW 250
41055: ADD
41056: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41057: LD_ADDR_EXP 31
41061: PUSH
41062: LD_EXP 31
41066: PUSH
41067: LD_VAR 0 1
41071: PPUSH
41072: CALL_OW 251
41076: ADD
41077: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41078: LD_ADDR_EXP 31
41082: PUSH
41083: LD_EXP 31
41087: PUSH
41088: LD_VAR 0 1
41092: PPUSH
41093: CALL_OW 254
41097: ADD
41098: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
41099: LD_VAR 0 1
41103: PPUSH
41104: CALL_OW 266
41108: PUSH
41109: LD_INT 3
41111: EQUAL
41112: IFFALSE 41191
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
41114: LD_ADDR_EXP 31
41118: PUSH
41119: LD_EXP 31
41123: PUSH
41124: LD_INT 2
41126: ADD
41127: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41128: LD_ADDR_EXP 31
41132: PUSH
41133: LD_EXP 31
41137: PUSH
41138: LD_VAR 0 1
41142: PPUSH
41143: CALL_OW 250
41147: ADD
41148: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41149: LD_ADDR_EXP 31
41153: PUSH
41154: LD_EXP 31
41158: PUSH
41159: LD_VAR 0 1
41163: PPUSH
41164: CALL_OW 251
41168: ADD
41169: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41170: LD_ADDR_EXP 31
41174: PUSH
41175: LD_EXP 31
41179: PUSH
41180: LD_VAR 0 1
41184: PPUSH
41185: CALL_OW 254
41189: ADD
41190: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
41191: LD_VAR 0 1
41195: PPUSH
41196: CALL_OW 266
41200: PUSH
41201: LD_INT 5
41203: EQUAL
41204: IFFALSE 41283
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
41206: LD_ADDR_EXP 31
41210: PUSH
41211: LD_EXP 31
41215: PUSH
41216: LD_INT 4
41218: ADD
41219: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41220: LD_ADDR_EXP 31
41224: PUSH
41225: LD_EXP 31
41229: PUSH
41230: LD_VAR 0 1
41234: PPUSH
41235: CALL_OW 250
41239: ADD
41240: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41241: LD_ADDR_EXP 31
41245: PUSH
41246: LD_EXP 31
41250: PUSH
41251: LD_VAR 0 1
41255: PPUSH
41256: CALL_OW 251
41260: ADD
41261: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41262: LD_ADDR_EXP 31
41266: PUSH
41267: LD_EXP 31
41271: PUSH
41272: LD_VAR 0 1
41276: PPUSH
41277: CALL_OW 254
41281: ADD
41282: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
41283: LD_VAR 0 1
41287: PPUSH
41288: CALL_OW 247
41292: PUSH
41293: LD_INT 1
41295: EQUAL
41296: IFFALSE 41346
// begin for i in defenders_list do
41298: LD_ADDR_VAR 0 2
41302: PUSH
41303: LD_EXP 32
41307: PUSH
41308: FOR_IN
41309: IFFALSE 41344
// if i = unit then
41311: LD_VAR 0 2
41315: PUSH
41316: LD_VAR 0 1
41320: EQUAL
41321: IFFALSE 41342
// defenders_list = defenders_list diff [ unit ] ;
41323: LD_ADDR_EXP 32
41327: PUSH
41328: LD_EXP 32
41332: PUSH
41333: LD_VAR 0 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: DIFF
41341: ST_TO_ADDR
41342: GO 41308
41344: POP
41345: POP
// end ; end ; end ; end_of_file
41346: PPOPN 2
41348: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
41349: GO 41351
41351: DISABLE
41352: LD_INT 0
41354: PPUSH
// begin enemyWayX = [ ] ;
41355: LD_ADDR_EXP 45
41359: PUSH
41360: EMPTY
41361: ST_TO_ADDR
// enemyWayY = [ ] ;
41362: LD_ADDR_EXP 46
41366: PUSH
41367: EMPTY
41368: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
41369: LD_ADDR_VAR 0 1
41373: PUSH
41374: LD_INT 1
41376: PPUSH
41377: LD_INT 3
41379: PPUSH
41380: CALL_OW 12
41384: ST_TO_ADDR
// if rnd = 1 then
41385: LD_VAR 0 1
41389: PUSH
41390: LD_INT 1
41392: EQUAL
41393: IFFALSE 41433
// begin enemyWayX = [ 73 , 46 , 29 ] ;
41395: LD_ADDR_EXP 45
41399: PUSH
41400: LD_INT 73
41402: PUSH
41403: LD_INT 46
41405: PUSH
41406: LD_INT 29
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: LIST
41413: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
41414: LD_ADDR_EXP 46
41418: PUSH
41419: LD_INT 71
41421: PUSH
41422: LD_INT 43
41424: PUSH
41425: LD_INT 29
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: LIST
41432: ST_TO_ADDR
// end ; if rnd = 2 then
41433: LD_VAR 0 1
41437: PUSH
41438: LD_INT 2
41440: EQUAL
41441: IFFALSE 41465
// begin enemyWayX = [ 64 ] ;
41443: LD_ADDR_EXP 45
41447: PUSH
41448: LD_INT 64
41450: PUSH
41451: EMPTY
41452: LIST
41453: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
41454: LD_ADDR_EXP 46
41458: PUSH
41459: LD_INT 43
41461: PUSH
41462: EMPTY
41463: LIST
41464: ST_TO_ADDR
// end ; if rnd = 3 then
41465: LD_VAR 0 1
41469: PUSH
41470: LD_INT 3
41472: EQUAL
41473: IFFALSE 41497
// begin enemyWayX = [ 80 ] ;
41475: LD_ADDR_EXP 45
41479: PUSH
41480: LD_INT 80
41482: PUSH
41483: EMPTY
41484: LIST
41485: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
41486: LD_ADDR_EXP 46
41490: PUSH
41491: LD_INT 28
41493: PUSH
41494: EMPTY
41495: LIST
41496: ST_TO_ADDR
// end ; enable ;
41497: ENABLE
// end ;
41498: PPOPN 1
41500: END
// every 0 0$1 do
41501: GO 41503
41503: DISABLE
// begin enable ;
41504: ENABLE
// if escapeAvalaible = 0 then
41505: LD_EXP 36
41509: PUSH
41510: LD_INT 0
41512: EQUAL
41513: IFFALSE 41525
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
41515: LD_INT 3
41517: PPUSH
41518: LD_INT 6
41520: PPUSH
41521: CALL 8432 0 2
// if escapeAvalaible = 0 then
41525: LD_EXP 36
41529: PUSH
41530: LD_INT 0
41532: EQUAL
41533: IFFALSE 41545
// DefenseBase ( 1 , RussianBaseTerritory ) ;
41535: LD_INT 1
41537: PPUSH
41538: LD_INT 24
41540: PPUSH
41541: CALL 9092 0 2
// if russianAI = 1 then
41545: LD_EXP 27
41549: PUSH
41550: LD_INT 1
41552: EQUAL
41553: IFFALSE 41623
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
41555: LD_INT 3
41557: PPUSH
41558: LD_INT 7
41560: PPUSH
41561: LD_INT 6
41563: PPUSH
41564: LD_EXP 29
41568: PPUSH
41569: CALL 11530 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
41573: LD_INT 3
41575: PPUSH
41576: LD_EXP 28
41580: PPUSH
41581: LD_INT 6
41583: PPUSH
41584: LD_EXP 31
41588: PPUSH
41589: CALL 11124 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
41593: LD_INT 3
41595: PPUSH
41596: LD_INT 26
41598: PPUSH
41599: LD_EXP 45
41603: PPUSH
41604: LD_EXP 46
41608: PPUSH
41609: CALL 9992 0 4
// AttackNearBuildings ( 3 , 1 ) ;
41613: LD_INT 3
41615: PPUSH
41616: LD_INT 1
41618: PPUSH
41619: CALL 12074 0 2
// end ; if SikorskyArrive = 1 then
41623: LD_EXP 18
41627: PUSH
41628: LD_INT 1
41630: EQUAL
41631: IFFALSE 41649
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
41633: LD_INT 3
41635: PPUSH
41636: LD_INT 10
41638: PPUSH
41639: LD_INT 53
41641: PPUSH
41642: LD_INT 59
41644: PPUSH
41645: CALL 9789 0 4
// end ;
41649: END
// every 0 0$1 trigger russianAI = 1 do var i ;
41650: LD_EXP 27
41654: PUSH
41655: LD_INT 1
41657: EQUAL
41658: IFFALSE 41934
41660: GO 41662
41662: DISABLE
41663: LD_INT 0
41665: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41666: LD_ADDR_VAR 0 1
41670: PUSH
41671: LD_INT 22
41673: PUSH
41674: LD_INT 3
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 21
41683: PUSH
41684: LD_INT 3
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 30
41693: PUSH
41694: LD_INT 32
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 3
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: LD_INT 35
41709: PUSH
41710: LD_INT 43
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 35
41719: PUSH
41720: LD_INT 44
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 35
41729: PUSH
41730: LD_INT 46
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: PPUSH
41753: CALL_OW 69
41757: PUSH
41758: FOR_IN
41759: IFFALSE 41798
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41761: LD_VAR 0 1
41765: PPUSH
41766: LD_INT 43
41768: PUSH
41769: LD_INT 44
41771: PUSH
41772: LD_INT 46
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: PPUSH
41783: LD_INT 3
41785: PPUSH
41786: CALL_OW 12
41790: ARRAY
41791: PPUSH
41792: CALL_OW 431
41796: GO 41758
41798: POP
41799: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41800: LD_ADDR_VAR 0 1
41804: PUSH
41805: LD_INT 22
41807: PUSH
41808: LD_INT 3
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 21
41817: PUSH
41818: LD_INT 3
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 30
41827: PUSH
41828: LD_INT 33
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 3
41837: PUSH
41838: LD_INT 2
41840: PUSH
41841: LD_INT 35
41843: PUSH
41844: LD_INT 43
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 35
41853: PUSH
41854: LD_INT 44
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 35
41863: PUSH
41864: LD_INT 46
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: PPUSH
41887: CALL_OW 69
41891: PUSH
41892: FOR_IN
41893: IFFALSE 41932
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41895: LD_VAR 0 1
41899: PPUSH
41900: LD_INT 43
41902: PUSH
41903: LD_INT 44
41905: PUSH
41906: LD_INT 46
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: PPUSH
41917: LD_INT 3
41919: PPUSH
41920: CALL_OW 12
41924: ARRAY
41925: PPUSH
41926: CALL_OW 431
41930: GO 41892
41932: POP
41933: POP
// end ;
41934: PPOPN 1
41936: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
41937: LD_EXP 24
41941: PPUSH
41942: CALL_OW 310
41946: NOT
41947: PUSH
41948: LD_EXP 28
41952: PPUSH
41953: CALL_OW 302
41957: AND
41958: PUSH
41959: LD_EXP 28
41963: PPUSH
41964: CALL_OW 255
41968: PUSH
41969: LD_INT 3
41971: EQUAL
41972: AND
41973: IFFALSE 41993
41975: GO 41977
41977: DISABLE
// begin enable ;
41978: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
41979: LD_EXP 24
41983: PPUSH
41984: LD_EXP 28
41988: PPUSH
41989: CALL_OW 120
// end ;
41993: END
// every 0 0$1 trigger SikorskyAI = 1 do
41994: LD_EXP 20
41998: PUSH
41999: LD_INT 1
42001: EQUAL
42002: IFFALSE 42037
42004: GO 42006
42006: DISABLE
// begin enable ;
42007: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
42008: LD_INT 4
42010: PPUSH
42011: LD_INT 10
42013: PPUSH
42014: LD_INT 93
42016: PPUSH
42017: LD_INT 93
42019: PPUSH
42020: CALL 9789 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
42024: LD_INT 4
42026: PPUSH
42027: LD_INT 11
42029: PPUSH
42030: LD_INT 3
42032: PPUSH
42033: CALL 16286 0 3
// end ;
42037: END
// every 0 0$1 trigger SikorskyAI = 1 do
42038: LD_EXP 20
42042: PUSH
42043: LD_INT 1
42045: EQUAL
42046: IFFALSE 42058
42048: GO 42050
42050: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
42051: LD_INT 4
42053: PPUSH
42054: CALL 10796 0 1
42058: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
42059: LD_EXP 27
42063: PUSH
42064: LD_INT 1
42066: EQUAL
42067: PUSH
42068: LD_EXP 30
42072: PPUSH
42073: CALL_OW 302
42077: AND
42078: PUSH
42079: LD_EXP 30
42083: PPUSH
42084: CALL_OW 255
42088: PUSH
42089: LD_INT 3
42091: EQUAL
42092: AND
42093: PUSH
42094: LD_INT 22
42096: PUSH
42097: LD_INT 3
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 21
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 33
42116: PUSH
42117: LD_INT 3
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: LIST
42128: PPUSH
42129: CALL_OW 69
42133: PUSH
42134: LD_INT 0
42136: EQUAL
42137: AND
42138: IFFALSE 42372
42140: GO 42142
42142: DISABLE
// begin enable ;
42143: ENABLE
// if Difficulty = 1 then
42144: LD_OWVAR 67
42148: PUSH
42149: LD_INT 1
42151: EQUAL
42152: IFFALSE 42220
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
42154: LD_INT 3
42156: PPUSH
42157: LD_EXP 30
42161: PPUSH
42162: LD_INT 5
42164: PPUSH
42165: LD_INT 8
42167: PPUSH
42168: CALL_OW 12
42172: PPUSH
42173: LD_INT 43
42175: PUSH
42176: LD_INT 43
42178: PUSH
42179: LD_INT 43
42181: PUSH
42182: LD_INT 43
42184: PUSH
42185: LD_INT 44
42187: PUSH
42188: LD_INT 44
42190: PUSH
42191: LD_INT 44
42193: PUSH
42194: LD_INT 46
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: PPUSH
42207: LD_INT 1
42209: PPUSH
42210: LD_INT 3
42212: PPUSH
42213: LD_INT 24
42215: PPUSH
42216: CALL 9635 0 7
// if Difficulty = 2 then
42220: LD_OWVAR 67
42224: PUSH
42225: LD_INT 2
42227: EQUAL
42228: IFFALSE 42296
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
42230: LD_INT 3
42232: PPUSH
42233: LD_EXP 30
42237: PPUSH
42238: LD_INT 6
42240: PPUSH
42241: LD_INT 8
42243: PPUSH
42244: CALL_OW 12
42248: PPUSH
42249: LD_INT 43
42251: PUSH
42252: LD_INT 43
42254: PUSH
42255: LD_INT 44
42257: PUSH
42258: LD_INT 44
42260: PUSH
42261: LD_INT 44
42263: PUSH
42264: LD_INT 44
42266: PUSH
42267: LD_INT 46
42269: PUSH
42270: LD_INT 46
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: PPUSH
42283: LD_INT 1
42285: PPUSH
42286: LD_INT 3
42288: PPUSH
42289: LD_INT 24
42291: PPUSH
42292: CALL 9635 0 7
// if Difficulty = 3 then
42296: LD_OWVAR 67
42300: PUSH
42301: LD_INT 3
42303: EQUAL
42304: IFFALSE 42372
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
42306: LD_INT 3
42308: PPUSH
42309: LD_EXP 30
42313: PPUSH
42314: LD_INT 7
42316: PPUSH
42317: LD_INT 8
42319: PPUSH
42320: CALL_OW 12
42324: PPUSH
42325: LD_INT 43
42327: PUSH
42328: LD_INT 43
42330: PUSH
42331: LD_INT 44
42333: PUSH
42334: LD_INT 44
42336: PUSH
42337: LD_INT 44
42339: PUSH
42340: LD_INT 46
42342: PUSH
42343: LD_INT 46
42345: PUSH
42346: LD_INT 46
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: PPUSH
42359: LD_INT 1
42361: PPUSH
42362: LD_INT 3
42364: PPUSH
42365: LD_INT 24
42367: PPUSH
42368: CALL 9635 0 7
// end ;
42372: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
42373: LD_EXP 38
42377: PUSH
42378: LD_INT 1
42380: EQUAL
42381: IFFALSE 42463
42383: GO 42385
42385: DISABLE
42386: LD_INT 0
42388: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
42389: LD_ADDR_VAR 0 1
42393: PUSH
42394: LD_INT 22
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 21
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 3
42416: PUSH
42417: LD_INT 24
42419: PUSH
42420: LD_INT 650
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: LIST
42435: PPUSH
42436: CALL_OW 69
42440: PUSH
42441: FOR_IN
42442: IFFALSE 42461
// ComMoveXY ( i , 51 , 12 ) ;
42444: LD_VAR 0 1
42448: PPUSH
42449: LD_INT 51
42451: PPUSH
42452: LD_INT 12
42454: PPUSH
42455: CALL_OW 111
42459: GO 42441
42461: POP
42462: POP
// end ; end_of_file
42463: PPOPN 1
42465: END
// every 1 1$20 trigger firstAttack = 1 do
42466: LD_EXP 33
42470: PUSH
42471: LD_INT 1
42473: EQUAL
42474: IFFALSE 42580
42476: GO 42478
42478: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42479: LD_INT 6
42481: PPUSH
42482: LD_INT 3
42484: PPUSH
42485: LD_INT 5
42487: PPUSH
42488: LD_INT 6
42490: PPUSH
42491: CALL_OW 12
42495: PUSH
42496: LD_INT 5
42498: PPUSH
42499: LD_INT 6
42501: PPUSH
42502: CALL_OW 12
42506: PUSH
42507: LD_INT 5
42509: PPUSH
42510: LD_INT 6
42512: PPUSH
42513: CALL_OW 12
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: LIST
42522: PUSH
42523: LD_OWVAR 67
42527: ARRAY
42528: PPUSH
42529: LD_INT 0
42531: PPUSH
42532: LD_INT 0
42534: PPUSH
42535: LD_INT 0
42537: PPUSH
42538: LD_INT 0
42540: PPUSH
42541: LD_EXP 25
42545: PPUSH
42546: LD_EXP 26
42550: PPUSH
42551: CALL_OW 12
42555: PPUSH
42556: LD_INT 16
42558: PPUSH
42559: LD_INT 7
42561: PPUSH
42562: LD_INT 1
42564: PPUSH
42565: LD_INT 1
42567: PPUSH
42568: LD_INT 3
42570: PPUSH
42571: CALL_OW 12
42575: PPUSH
42576: CALL 12304 0 12
42580: END
// every 1 1$40 trigger firstAttack = 1 do
42581: LD_EXP 33
42585: PUSH
42586: LD_INT 1
42588: EQUAL
42589: IFFALSE 42681
42591: GO 42593
42593: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42594: LD_INT 16
42596: PPUSH
42597: LD_INT 6
42599: PPUSH
42600: LD_INT 3
42602: PPUSH
42603: LD_INT 4
42605: PPUSH
42606: CALL_OW 12
42610: PUSH
42611: LD_INT 4
42613: PPUSH
42614: LD_INT 5
42616: PPUSH
42617: CALL_OW 12
42621: PUSH
42622: LD_INT 5
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: LIST
42629: PUSH
42630: LD_OWVAR 67
42634: ARRAY
42635: PPUSH
42636: LD_EXP 25
42640: PPUSH
42641: LD_EXP 26
42645: PPUSH
42646: CALL_OW 12
42650: PPUSH
42651: LD_INT 3
42653: PPUSH
42654: LD_INT 1
42656: PPUSH
42657: LD_INT 3
42659: PPUSH
42660: LD_INT 44
42662: PUSH
42663: LD_INT 46
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PPUSH
42670: EMPTY
42671: PPUSH
42672: EMPTY
42673: PPUSH
42674: LD_INT 1
42676: PPUSH
42677: CALL 14597 0 11
42681: END
// every 5 5$40 trigger firstAttack = 1 and JMMArrive = 0 do
42682: LD_EXP 33
42686: PUSH
42687: LD_INT 1
42689: EQUAL
42690: PUSH
42691: LD_EXP 39
42695: PUSH
42696: LD_INT 0
42698: EQUAL
42699: AND
42700: IFFALSE 42806
42702: GO 42704
42704: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42705: LD_INT 6
42707: PPUSH
42708: LD_INT 3
42710: PPUSH
42711: LD_INT 5
42713: PPUSH
42714: LD_INT 6
42716: PPUSH
42717: CALL_OW 12
42721: PUSH
42722: LD_INT 5
42724: PPUSH
42725: LD_INT 6
42727: PPUSH
42728: CALL_OW 12
42732: PUSH
42733: LD_INT 5
42735: PPUSH
42736: LD_INT 6
42738: PPUSH
42739: CALL_OW 12
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: LIST
42748: PUSH
42749: LD_OWVAR 67
42753: ARRAY
42754: PPUSH
42755: LD_INT 0
42757: PPUSH
42758: LD_INT 0
42760: PPUSH
42761: LD_INT 0
42763: PPUSH
42764: LD_INT 0
42766: PPUSH
42767: LD_EXP 25
42771: PPUSH
42772: LD_EXP 26
42776: PPUSH
42777: CALL_OW 12
42781: PPUSH
42782: LD_INT 16
42784: PPUSH
42785: LD_INT 7
42787: PPUSH
42788: LD_INT 1
42790: PPUSH
42791: LD_INT 1
42793: PPUSH
42794: LD_INT 3
42796: PPUSH
42797: CALL_OW 12
42801: PPUSH
42802: CALL 12304 0 12
42806: END
// every 5 5$50 trigger firstAttack = 1 and JMMArrive = 0 do
42807: LD_EXP 33
42811: PUSH
42812: LD_INT 1
42814: EQUAL
42815: PUSH
42816: LD_EXP 39
42820: PUSH
42821: LD_INT 0
42823: EQUAL
42824: AND
42825: IFFALSE 42921
42827: GO 42829
42829: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42830: LD_INT 16
42832: PPUSH
42833: LD_INT 6
42835: PPUSH
42836: LD_INT 5
42838: PPUSH
42839: LD_INT 6
42841: PPUSH
42842: CALL_OW 12
42846: PUSH
42847: LD_INT 6
42849: PPUSH
42850: LD_INT 7
42852: PPUSH
42853: CALL_OW 12
42857: PUSH
42858: LD_INT 7
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: PUSH
42866: LD_OWVAR 67
42870: ARRAY
42871: PPUSH
42872: LD_EXP 25
42876: PPUSH
42877: LD_EXP 26
42881: PPUSH
42882: CALL_OW 12
42886: PPUSH
42887: LD_INT 3
42889: PPUSH
42890: LD_INT 1
42892: PPUSH
42893: LD_INT 3
42895: PPUSH
42896: LD_INT 43
42898: PUSH
42899: LD_INT 44
42901: PUSH
42902: LD_INT 46
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: LIST
42909: PPUSH
42910: EMPTY
42911: PPUSH
42912: EMPTY
42913: PPUSH
42914: LD_INT 1
42916: PPUSH
42917: CALL 14597 0 11
42921: END
// every 8 8$50 trigger firstAttack = 1 and JMMArrive = 0 do
42922: LD_EXP 33
42926: PUSH
42927: LD_INT 1
42929: EQUAL
42930: PUSH
42931: LD_EXP 39
42935: PUSH
42936: LD_INT 0
42938: EQUAL
42939: AND
42940: IFFALSE 43036
42942: GO 42944
42944: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42945: LD_INT 16
42947: PPUSH
42948: LD_INT 6
42950: PPUSH
42951: LD_INT 5
42953: PPUSH
42954: LD_INT 6
42956: PPUSH
42957: CALL_OW 12
42961: PUSH
42962: LD_INT 6
42964: PPUSH
42965: LD_INT 7
42967: PPUSH
42968: CALL_OW 12
42972: PUSH
42973: LD_INT 7
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: LIST
42980: PUSH
42981: LD_OWVAR 67
42985: ARRAY
42986: PPUSH
42987: LD_EXP 25
42991: PPUSH
42992: LD_EXP 26
42996: PPUSH
42997: CALL_OW 12
43001: PPUSH
43002: LD_INT 3
43004: PPUSH
43005: LD_INT 1
43007: PPUSH
43008: LD_INT 3
43010: PPUSH
43011: LD_INT 43
43013: PUSH
43014: LD_INT 44
43016: PUSH
43017: LD_INT 46
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: LIST
43024: PPUSH
43025: EMPTY
43026: PPUSH
43027: EMPTY
43028: PPUSH
43029: LD_INT 1
43031: PPUSH
43032: CALL 14597 0 11
43036: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
43037: LD_EXP 33
43041: PUSH
43042: LD_INT 1
43044: EQUAL
43045: PUSH
43046: LD_EXP 39
43050: PUSH
43051: LD_INT 0
43053: EQUAL
43054: AND
43055: IFFALSE 43131
43057: GO 43059
43059: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43060: LD_INT 16
43062: PPUSH
43063: LD_INT 6
43065: PPUSH
43066: LD_INT 5
43068: PUSH
43069: LD_INT 6
43071: PUSH
43072: LD_INT 7
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: LIST
43079: PUSH
43080: LD_OWVAR 67
43084: ARRAY
43085: PPUSH
43086: LD_EXP 25
43090: PPUSH
43091: LD_EXP 26
43095: PPUSH
43096: CALL_OW 12
43100: PPUSH
43101: LD_INT 3
43103: PPUSH
43104: LD_INT 1
43106: PPUSH
43107: LD_INT 3
43109: PPUSH
43110: LD_INT 44
43112: PUSH
43113: LD_INT 46
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PPUSH
43120: EMPTY
43121: PPUSH
43122: EMPTY
43123: PPUSH
43124: LD_INT 1
43126: PPUSH
43127: CALL 14597 0 11
43131: END
// every 1 1$00 trigger secondAttack = 1 do
43132: LD_EXP 34
43136: PUSH
43137: LD_INT 1
43139: EQUAL
43140: IFFALSE 43222
43142: GO 43144
43144: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43145: LD_INT 6
43147: PPUSH
43148: LD_INT 3
43150: PPUSH
43151: LD_INT 3
43153: PUSH
43154: LD_INT 4
43156: PUSH
43157: LD_INT 5
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: PUSH
43165: LD_OWVAR 67
43169: ARRAY
43170: PPUSH
43171: LD_INT 0
43173: PPUSH
43174: LD_INT 0
43176: PPUSH
43177: LD_INT 0
43179: PPUSH
43180: LD_INT 0
43182: PPUSH
43183: LD_EXP 25
43187: PPUSH
43188: LD_EXP 26
43192: PPUSH
43193: CALL_OW 12
43197: PPUSH
43198: LD_INT 16
43200: PPUSH
43201: LD_INT 7
43203: PPUSH
43204: LD_INT 1
43206: PPUSH
43207: LD_INT 1
43209: PPUSH
43210: LD_INT 3
43212: PPUSH
43213: CALL_OW 12
43217: PPUSH
43218: CALL 12304 0 12
43222: END
// every 1 1$00 trigger secondAttack = 1 do
43223: LD_EXP 34
43227: PUSH
43228: LD_INT 1
43230: EQUAL
43231: IFFALSE 43335
43233: GO 43235
43235: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43236: LD_INT 16
43238: PPUSH
43239: LD_INT 6
43241: PPUSH
43242: LD_INT 5
43244: PPUSH
43245: LD_INT 8
43247: PPUSH
43248: CALL_OW 12
43252: PUSH
43253: LD_INT 6
43255: PPUSH
43256: LD_INT 9
43258: PPUSH
43259: CALL_OW 12
43263: PUSH
43264: LD_INT 7
43266: PPUSH
43267: LD_INT 9
43269: PPUSH
43270: CALL_OW 12
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: LIST
43279: PUSH
43280: LD_OWVAR 67
43284: ARRAY
43285: PPUSH
43286: LD_EXP 25
43290: PPUSH
43291: LD_EXP 26
43295: PPUSH
43296: CALL_OW 12
43300: PPUSH
43301: LD_INT 3
43303: PPUSH
43304: LD_INT 1
43306: PPUSH
43307: LD_INT 3
43309: PPUSH
43310: LD_INT 43
43312: PUSH
43313: LD_INT 44
43315: PUSH
43316: LD_INT 46
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: LIST
43323: PPUSH
43324: EMPTY
43325: PPUSH
43326: EMPTY
43327: PPUSH
43328: LD_INT 1
43330: PPUSH
43331: CALL 14597 0 11
43335: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43336: LD_EXP 18
43340: PUSH
43341: LD_INT 0
43343: EQUAL
43344: IFFALSE 43426
43346: GO 43348
43348: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43349: LD_INT 6
43351: PPUSH
43352: LD_INT 3
43354: PPUSH
43355: LD_INT 3
43357: PUSH
43358: LD_INT 4
43360: PUSH
43361: LD_INT 5
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: LIST
43368: PUSH
43369: LD_OWVAR 67
43373: ARRAY
43374: PPUSH
43375: LD_INT 0
43377: PPUSH
43378: LD_INT 0
43380: PPUSH
43381: LD_INT 0
43383: PPUSH
43384: LD_INT 0
43386: PPUSH
43387: LD_EXP 25
43391: PPUSH
43392: LD_EXP 26
43396: PPUSH
43397: CALL_OW 12
43401: PPUSH
43402: LD_INT 16
43404: PPUSH
43405: LD_INT 7
43407: PPUSH
43408: LD_INT 1
43410: PPUSH
43411: LD_INT 1
43413: PPUSH
43414: LD_INT 3
43416: PPUSH
43417: CALL_OW 12
43421: PPUSH
43422: CALL 12304 0 12
43426: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43427: LD_EXP 18
43431: PUSH
43432: LD_INT 0
43434: EQUAL
43435: IFFALSE 43535
43437: GO 43439
43439: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43440: LD_INT 16
43442: PPUSH
43443: LD_INT 6
43445: PPUSH
43446: LD_INT 5
43448: PPUSH
43449: LD_INT 8
43451: PPUSH
43452: CALL_OW 12
43456: PUSH
43457: LD_INT 6
43459: PPUSH
43460: LD_INT 9
43462: PPUSH
43463: CALL_OW 12
43467: PUSH
43468: LD_INT 7
43470: PPUSH
43471: LD_INT 9
43473: PPUSH
43474: CALL_OW 12
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: LIST
43483: PUSH
43484: LD_OWVAR 67
43488: ARRAY
43489: PPUSH
43490: LD_EXP 25
43494: PPUSH
43495: LD_EXP 26
43499: PPUSH
43500: CALL_OW 12
43504: PPUSH
43505: LD_INT 3
43507: PPUSH
43508: LD_INT 1
43510: PPUSH
43511: LD_INT 3
43513: PPUSH
43514: LD_INT 44
43516: PUSH
43517: LD_INT 46
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PPUSH
43524: EMPTY
43525: PPUSH
43526: EMPTY
43527: PPUSH
43528: LD_INT 1
43530: PPUSH
43531: CALL 14597 0 11
43535: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43536: LD_EXP 18
43540: PUSH
43541: LD_INT 0
43543: EQUAL
43544: IFFALSE 43626
43546: GO 43548
43548: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43549: LD_INT 6
43551: PPUSH
43552: LD_INT 3
43554: PPUSH
43555: LD_INT 3
43557: PUSH
43558: LD_INT 4
43560: PUSH
43561: LD_INT 5
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: LIST
43568: PUSH
43569: LD_OWVAR 67
43573: ARRAY
43574: PPUSH
43575: LD_INT 0
43577: PPUSH
43578: LD_INT 0
43580: PPUSH
43581: LD_INT 0
43583: PPUSH
43584: LD_INT 0
43586: PPUSH
43587: LD_EXP 25
43591: PPUSH
43592: LD_EXP 26
43596: PPUSH
43597: CALL_OW 12
43601: PPUSH
43602: LD_INT 16
43604: PPUSH
43605: LD_INT 7
43607: PPUSH
43608: LD_INT 1
43610: PPUSH
43611: LD_INT 1
43613: PPUSH
43614: LD_INT 3
43616: PPUSH
43617: CALL_OW 12
43621: PPUSH
43622: CALL 12304 0 12
43626: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43627: LD_EXP 18
43631: PUSH
43632: LD_INT 0
43634: EQUAL
43635: IFFALSE 43735
43637: GO 43639
43639: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43640: LD_INT 16
43642: PPUSH
43643: LD_INT 6
43645: PPUSH
43646: LD_INT 5
43648: PPUSH
43649: LD_INT 8
43651: PPUSH
43652: CALL_OW 12
43656: PUSH
43657: LD_INT 6
43659: PPUSH
43660: LD_INT 9
43662: PPUSH
43663: CALL_OW 12
43667: PUSH
43668: LD_INT 7
43670: PPUSH
43671: LD_INT 9
43673: PPUSH
43674: CALL_OW 12
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: LIST
43683: PUSH
43684: LD_OWVAR 67
43688: ARRAY
43689: PPUSH
43690: LD_EXP 25
43694: PPUSH
43695: LD_EXP 26
43699: PPUSH
43700: CALL_OW 12
43704: PPUSH
43705: LD_INT 3
43707: PPUSH
43708: LD_INT 1
43710: PPUSH
43711: LD_INT 3
43713: PPUSH
43714: LD_INT 44
43716: PUSH
43717: LD_INT 46
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PPUSH
43724: EMPTY
43725: PPUSH
43726: EMPTY
43727: PPUSH
43728: LD_INT 1
43730: PPUSH
43731: CALL 14597 0 11
43735: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43736: LD_EXP 18
43740: PUSH
43741: LD_INT 0
43743: EQUAL
43744: IFFALSE 43826
43746: GO 43748
43748: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43749: LD_INT 6
43751: PPUSH
43752: LD_INT 3
43754: PPUSH
43755: LD_INT 3
43757: PUSH
43758: LD_INT 4
43760: PUSH
43761: LD_INT 5
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: LIST
43768: PUSH
43769: LD_OWVAR 67
43773: ARRAY
43774: PPUSH
43775: LD_INT 0
43777: PPUSH
43778: LD_INT 0
43780: PPUSH
43781: LD_INT 0
43783: PPUSH
43784: LD_INT 0
43786: PPUSH
43787: LD_EXP 25
43791: PPUSH
43792: LD_EXP 26
43796: PPUSH
43797: CALL_OW 12
43801: PPUSH
43802: LD_INT 16
43804: PPUSH
43805: LD_INT 7
43807: PPUSH
43808: LD_INT 1
43810: PPUSH
43811: LD_INT 1
43813: PPUSH
43814: LD_INT 3
43816: PPUSH
43817: CALL_OW 12
43821: PPUSH
43822: CALL 12304 0 12
43826: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43827: LD_EXP 18
43831: PUSH
43832: LD_INT 0
43834: EQUAL
43835: IFFALSE 43935
43837: GO 43839
43839: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
43840: LD_INT 16
43842: PPUSH
43843: LD_INT 6
43845: PPUSH
43846: LD_INT 5
43848: PPUSH
43849: LD_INT 8
43851: PPUSH
43852: CALL_OW 12
43856: PUSH
43857: LD_INT 6
43859: PPUSH
43860: LD_INT 9
43862: PPUSH
43863: CALL_OW 12
43867: PUSH
43868: LD_INT 7
43870: PPUSH
43871: LD_INT 9
43873: PPUSH
43874: CALL_OW 12
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: LIST
43883: PUSH
43884: LD_OWVAR 67
43888: ARRAY
43889: PPUSH
43890: LD_EXP 25
43894: PPUSH
43895: LD_EXP 26
43899: PPUSH
43900: CALL_OW 12
43904: PPUSH
43905: LD_INT 3
43907: PPUSH
43908: LD_INT 1
43910: PPUSH
43911: LD_INT 3
43913: PPUSH
43914: LD_INT 44
43916: PUSH
43917: LD_INT 46
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PPUSH
43924: EMPTY
43925: PPUSH
43926: EMPTY
43927: PPUSH
43928: LD_INT 1
43930: PPUSH
43931: CALL 14597 0 11
43935: END
// every 0 0$1 trigger timerStatus = 1 do
43936: LD_EXP 35
43940: PUSH
43941: LD_INT 1
43943: EQUAL
43944: IFFALSE 44004
43946: GO 43948
43948: DISABLE
// begin repeat wait ( 0 0$1 ) ;
43949: LD_INT 35
43951: PPUSH
43952: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
43956: LD_ADDR_OWVAR 47
43960: PUSH
43961: LD_STRING #Am08-1
43963: PUSH
43964: LD_EXP 19
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
43973: LD_ADDR_EXP 19
43977: PUSH
43978: LD_EXP 19
43982: PUSH
43983: LD_INT 35
43985: MINUS
43986: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
43987: LD_EXP 19
43991: PUSH
43992: LD_INT 0
43994: EQUAL
43995: IFFALSE 43949
// display_strings := [ ] ;
43997: LD_ADDR_OWVAR 47
44001: PUSH
44002: EMPTY
44003: ST_TO_ADDR
// end ; end_of_file
44004: END
// every 1 1$0 do
44005: GO 44007
44007: DISABLE
// begin if supply <= 13 and supply > 7 then
44008: LD_EXP 40
44012: PUSH
44013: LD_INT 13
44015: LESSEQUAL
44016: PUSH
44017: LD_EXP 40
44021: PUSH
44022: LD_INT 7
44024: GREATER
44025: AND
44026: IFFALSE 44049
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
44028: LD_INT 3
44030: PPUSH
44031: LD_INT 5
44033: PPUSH
44034: CALL_OW 12
44038: PPUSH
44039: LD_INT 5
44041: PPUSH
44042: LD_INT 1
44044: PPUSH
44045: CALL_OW 55
// if supply <= 7 and supply > 4 then
44049: LD_EXP 40
44053: PUSH
44054: LD_INT 7
44056: LESSEQUAL
44057: PUSH
44058: LD_EXP 40
44062: PUSH
44063: LD_INT 4
44065: GREATER
44066: AND
44067: IFFALSE 44090
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
44069: LD_INT 3
44071: PPUSH
44072: LD_INT 5
44074: PPUSH
44075: CALL_OW 12
44079: PPUSH
44080: LD_INT 20
44082: PPUSH
44083: LD_INT 1
44085: PPUSH
44086: CALL_OW 55
// if supply <= 4 and supply > 0 then
44090: LD_EXP 40
44094: PUSH
44095: LD_INT 4
44097: LESSEQUAL
44098: PUSH
44099: LD_EXP 40
44103: PUSH
44104: LD_INT 0
44106: GREATER
44107: AND
44108: IFFALSE 44131
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
44110: LD_INT 3
44112: PPUSH
44113: LD_INT 5
44115: PPUSH
44116: CALL_OW 12
44120: PPUSH
44121: LD_INT 21
44123: PPUSH
44124: LD_INT 1
44126: PPUSH
44127: CALL_OW 55
// if supply > 0 then
44131: LD_EXP 40
44135: PUSH
44136: LD_INT 0
44138: GREATER
44139: IFFALSE 44156
// begin supply = supply - 1 ;
44141: LD_ADDR_EXP 40
44145: PUSH
44146: LD_EXP 40
44150: PUSH
44151: LD_INT 1
44153: MINUS
44154: ST_TO_ADDR
// enable ;
44155: ENABLE
// end ; end ; end_of_file
44156: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
44157: LD_EXP 39
44161: PUSH
44162: LD_INT 1
44164: EQUAL
44165: PUSH
44166: LD_EXP 1
44170: PPUSH
44171: CALL_OW 301
44175: AND
44176: IFFALSE 44188
44178: GO 44180
44180: DISABLE
// YouLost ( JMM ) ;
44181: LD_STRING JMM
44183: PPUSH
44184: CALL_OW 104
44188: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
44189: LD_EXP 18
44193: PUSH
44194: LD_INT 1
44196: EQUAL
44197: PUSH
44198: LD_EXP 16
44202: PPUSH
44203: CALL_OW 301
44207: AND
44208: IFFALSE 44240
44210: GO 44212
44212: DISABLE
// begin DialogueOn ;
44213: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
44217: LD_EXP 23
44221: PPUSH
44222: LD_STRING D8a-Pow-1
44224: PPUSH
44225: CALL_OW 94
// DialogueOff ;
44229: CALL_OW 7
// YouLost ( Dismissed ) ;
44233: LD_STRING Dismissed
44235: PPUSH
44236: CALL_OW 104
// end ;
44240: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
44241: LD_INT 22
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: LD_INT 30
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 30
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: LIST
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PPUSH
44283: CALL_OW 69
44287: PUSH
44288: LD_INT 0
44290: EQUAL
44291: IFFALSE 44303
44293: GO 44295
44295: DISABLE
// YouLost ( Destroyed ) ; end_of_file
44296: LD_STRING Destroyed
44298: PPUSH
44299: CALL_OW 104
44303: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , p ;
44304: LD_EXP 24
44308: PPUSH
44309: CALL_OW 301
44313: PUSH
44314: LD_INT 22
44316: PUSH
44317: LD_INT 3
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 21
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PPUSH
44338: CALL_OW 69
44342: PUSH
44343: LD_INT 7
44345: PUSH
44346: LD_INT 6
44348: PUSH
44349: LD_INT 5
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: LIST
44356: PUSH
44357: LD_OWVAR 67
44361: ARRAY
44362: LESS
44363: AND
44364: PUSH
44365: LD_EXP 1
44369: PPUSH
44370: CALL_OW 305
44374: AND
44375: IFFALSE 44823
44377: GO 44379
44379: DISABLE
44380: LD_INT 0
44382: PPUSH
44383: PPUSH
// begin russianAI = 0 ;
44384: LD_ADDR_EXP 27
44388: PUSH
44389: LD_INT 0
44391: ST_TO_ADDR
// escapeAvalaible = 1 ;
44392: LD_ADDR_EXP 36
44396: PUSH
44397: LD_INT 1
44399: ST_TO_ADDR
// InGameOn ;
44400: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
44404: LD_INT 3
44406: PPUSH
44407: LD_INT 1
44409: PPUSH
44410: LD_INT 1
44412: PPUSH
44413: LD_INT 0
44415: PPUSH
44416: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
44420: LD_INT 6
44422: PPUSH
44423: LD_INT 1
44425: PPUSH
44426: LD_INT 1
44428: PPUSH
44429: LD_INT 0
44431: PPUSH
44432: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
44436: LD_INT 3
44438: PPUSH
44439: LD_INT 1
44441: PPUSH
44442: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
44446: LD_INT 97
44448: PPUSH
44449: LD_INT 91
44451: PPUSH
44452: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
44456: LD_INT 22
44458: PUSH
44459: LD_INT 3
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 21
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PPUSH
44480: CALL_OW 69
44484: PPUSH
44485: CALL_OW 121
// wait ( 0 0$01 ) ;
44489: LD_INT 35
44491: PPUSH
44492: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44496: LD_INT 22
44498: PUSH
44499: LD_INT 3
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 21
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PPUSH
44520: CALL_OW 69
44524: PPUSH
44525: LD_INT 124
44527: PPUSH
44528: LD_INT 98
44530: PPUSH
44531: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
44535: LD_INT 22
44537: PUSH
44538: LD_INT 6
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 21
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PPUSH
44559: CALL_OW 69
44563: PPUSH
44564: CALL_OW 121
// wait ( 0 0$01 ) ;
44568: LD_INT 35
44570: PPUSH
44571: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44575: LD_INT 22
44577: PUSH
44578: LD_INT 6
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 21
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PPUSH
44599: CALL_OW 69
44603: PPUSH
44604: LD_INT 124
44606: PPUSH
44607: LD_INT 98
44609: PPUSH
44610: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
44614: LD_INT 22
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 21
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 3
44636: PUSH
44637: LD_INT 54
44639: PUSH
44640: EMPTY
44641: LIST
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: LIST
44651: PPUSH
44652: CALL_OW 69
44656: PPUSH
44657: LD_INT 124
44659: PPUSH
44660: LD_INT 98
44662: PPUSH
44663: CALL_OW 114
// wait ( 0 0$4 ) ;
44667: LD_INT 140
44669: PPUSH
44670: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
44674: LD_INT 124
44676: PPUSH
44677: LD_INT 98
44679: PPUSH
44680: CALL_OW 84
// if SikorskyStatus = 1 then
44684: LD_EXP 21
44688: PUSH
44689: LD_INT 1
44691: EQUAL
44692: IFFALSE 44706
// begin Say ( Sikorski , D9-Sik-1 ) ;
44694: LD_EXP 16
44698: PPUSH
44699: LD_STRING D9-Sik-1
44701: PPUSH
44702: CALL_OW 88
// end ; if SikorskyStatus = 2 then
44706: LD_EXP 21
44710: PUSH
44711: LD_INT 2
44713: EQUAL
44714: IFFALSE 44735
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
44716: LD_EXP 23
44720: PPUSH
44721: LD_STRING D8b-Pow-1
44723: PPUSH
44724: CALL_OW 94
// YouLost ( Dismissed ) ;
44728: LD_STRING Dismissed
44730: PPUSH
44731: CALL_OW 104
// end ; p := 0 0$0 ;
44735: LD_ADDR_VAR 0 2
44739: PUSH
44740: LD_INT 0
44742: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44743: LD_INT 35
44745: PPUSH
44746: CALL_OW 67
// p := p + 0 0$1 ;
44750: LD_ADDR_VAR 0 2
44754: PUSH
44755: LD_VAR 0 2
44759: PUSH
44760: LD_INT 35
44762: PLUS
44763: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
44764: LD_INT 23
44766: PUSH
44767: LD_INT 3
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 21
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 24
44786: PUSH
44787: LD_INT 250
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: PPUSH
44799: CALL_OW 69
44803: PUSH
44804: LD_INT 0
44806: EQUAL
44807: PUSH
44808: LD_VAR 0 2
44812: PUSH
44813: LD_INT 245
44815: GREATEREQUAL
44816: OR
44817: IFFALSE 44743
// FinishMission ;
44819: CALL 44826 0 0
// end ;
44823: PPOPN 2
44825: END
// export function FinishMission ; var tmp ; begin
44826: LD_INT 0
44828: PPUSH
44829: PPUSH
// AddMedal ( med1 , 1 ) ;
44830: LD_STRING med1
44832: PPUSH
44833: LD_INT 1
44835: PPUSH
44836: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
44840: LD_STRING med2
44842: PPUSH
44843: LD_INT 1
44845: PPUSH
44846: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
44850: LD_STRING perfect
44852: PPUSH
44853: LD_INT 1
44855: PPUSH
44856: CALL_OW 101
// GiveMedals ( Main ) ;
44860: LD_STRING Main
44862: PPUSH
44863: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
44867: LD_INT 22
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 23
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 21
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: PUSH
44900: LD_INT 25
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 25
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 25
44922: PUSH
44923: LD_INT 3
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 25
44932: PUSH
44933: LD_INT 4
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: PPUSH
44953: CALL_OW 69
44957: PPUSH
44958: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
44962: LD_EXP 1
44966: PPUSH
44967: LD_EXP 42
44971: PUSH
44972: LD_STRING JMM
44974: STR
44975: PPUSH
44976: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
44980: LD_EXP 2
44984: PPUSH
44985: LD_EXP 42
44989: PUSH
44990: LD_STRING Brown
44992: STR
44993: PPUSH
44994: CALL 8151 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
44998: LD_EXP 3
45002: PPUSH
45003: LD_EXP 42
45007: PUSH
45008: LD_STRING Donaldson
45010: STR
45011: PPUSH
45012: CALL 8151 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
45016: LD_EXP 4
45020: PPUSH
45021: LD_EXP 42
45025: PUSH
45026: LD_STRING Bobby
45028: STR
45029: PPUSH
45030: CALL 8151 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
45034: LD_EXP 5
45038: PPUSH
45039: LD_EXP 42
45043: PUSH
45044: LD_STRING Cyrus
45046: STR
45047: PPUSH
45048: CALL 8151 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45052: LD_EXP 6
45056: PPUSH
45057: LD_EXP 42
45061: PUSH
45062: LD_STRING Lisa
45064: STR
45065: PPUSH
45066: CALL 8151 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
45070: LD_EXP 7
45074: PPUSH
45075: LD_EXP 42
45079: PUSH
45080: LD_STRING Frank
45082: STR
45083: PPUSH
45084: CALL 8151 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
45088: LD_EXP 8
45092: PPUSH
45093: LD_EXP 42
45097: PUSH
45098: LD_STRING Gladstone
45100: STR
45101: PPUSH
45102: CALL 8151 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
45106: LD_EXP 9
45110: PPUSH
45111: LD_EXP 42
45115: PUSH
45116: LD_STRING Kikuchi
45118: STR
45119: PPUSH
45120: CALL 8151 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
45124: LD_EXP 14
45128: PPUSH
45129: LD_EXP 42
45133: PUSH
45134: LD_STRING Denis
45136: STR
45137: PPUSH
45138: CALL 8151 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
45142: LD_EXP 15
45146: PPUSH
45147: LD_EXP 42
45151: PUSH
45152: LD_STRING Joan
45154: STR
45155: PPUSH
45156: CALL 8151 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
45160: LD_EXP 10
45164: PPUSH
45165: LD_EXP 42
45169: PUSH
45170: LD_STRING Khatam
45172: STR
45173: PPUSH
45174: CALL 8151 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
45178: LD_EXP 13
45182: PPUSH
45183: LD_EXP 42
45187: PUSH
45188: LD_STRING Houten
45190: STR
45191: PPUSH
45192: CALL 8151 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
45196: LD_INT 50
45198: PUSH
45199: EMPTY
45200: LIST
45201: PUSH
45202: LD_INT 22
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 21
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: LD_INT 25
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 25
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 25
45247: PUSH
45248: LD_INT 3
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 25
45257: PUSH
45258: LD_INT 4
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: PPUSH
45278: CALL_OW 69
45282: PUSH
45283: LD_EXP 1
45287: PUSH
45288: LD_EXP 2
45292: PUSH
45293: LD_EXP 3
45297: PUSH
45298: LD_EXP 4
45302: PUSH
45303: LD_EXP 5
45307: PUSH
45308: LD_EXP 6
45312: PUSH
45313: LD_EXP 7
45317: PUSH
45318: LD_EXP 8
45322: PUSH
45323: LD_EXP 9
45327: PUSH
45328: LD_EXP 14
45332: PUSH
45333: LD_EXP 15
45337: PUSH
45338: LD_EXP 13
45342: PUSH
45343: LD_EXP 10
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: DIFF
45363: PPUSH
45364: LD_STRING 08_other_survivors
45366: PPUSH
45367: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
45371: LD_INT 23
45373: PPUSH
45374: CALL 45387 0 1
// YouWin ;
45378: CALL_OW 103
// end ;
45382: LD_VAR 0 1
45386: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
45387: LD_INT 0
45389: PPUSH
45390: PPUSH
45391: PPUSH
45392: PPUSH
// gammaBase = [ ] ;
45393: LD_ADDR_VAR 0 4
45397: PUSH
45398: EMPTY
45399: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
45400: LD_ADDR_VAR 0 5
45404: PUSH
45405: LD_VAR 0 1
45409: PPUSH
45410: LD_INT 22
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 21
45422: PUSH
45423: LD_INT 3
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 50
45432: PUSH
45433: EMPTY
45434: LIST
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: LIST
45440: PPUSH
45441: CALL_OW 70
45445: ST_TO_ADDR
// for i in buildings do
45446: LD_ADDR_VAR 0 3
45450: PUSH
45451: LD_VAR 0 5
45455: PUSH
45456: FOR_IN
45457: IFFALSE 45894
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
45459: LD_VAR 0 3
45463: PPUSH
45464: CALL_OW 266
45468: PUSH
45469: LD_INT 6
45471: PUSH
45472: LD_INT 7
45474: PUSH
45475: LD_INT 8
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: LIST
45482: IN
45483: IFFALSE 45597
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
45485: LD_ADDR_VAR 0 4
45489: PUSH
45490: LD_VAR 0 4
45494: PUSH
45495: LD_VAR 0 3
45499: PPUSH
45500: CALL_OW 266
45504: PUSH
45505: LD_VAR 0 3
45509: PPUSH
45510: CALL_OW 250
45514: PUSH
45515: LD_VAR 0 3
45519: PPUSH
45520: CALL_OW 251
45524: PUSH
45525: LD_VAR 0 3
45529: PPUSH
45530: CALL_OW 254
45534: PUSH
45535: LD_VAR 0 3
45539: PPUSH
45540: CALL_OW 267
45544: PUSH
45545: LD_VAR 0 3
45549: PPUSH
45550: CALL_OW 248
45554: PUSH
45555: LD_VAR 0 3
45559: PPUSH
45560: LD_INT 1
45562: PPUSH
45563: CALL_OW 268
45567: PUSH
45568: LD_VAR 0 3
45572: PPUSH
45573: LD_INT 2
45575: PPUSH
45576: CALL_OW 268
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: PUSH
45591: EMPTY
45592: LIST
45593: ADD
45594: ST_TO_ADDR
45595: GO 45892
// if GetBType ( i ) = b_bunker then
45597: LD_VAR 0 3
45601: PPUSH
45602: CALL_OW 266
45606: PUSH
45607: LD_INT 32
45609: EQUAL
45610: IFFALSE 45707
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
45612: LD_ADDR_VAR 0 4
45616: PUSH
45617: LD_VAR 0 4
45621: PUSH
45622: LD_VAR 0 3
45626: PPUSH
45627: CALL_OW 266
45631: PUSH
45632: LD_VAR 0 3
45636: PPUSH
45637: CALL_OW 250
45641: PUSH
45642: LD_VAR 0 3
45646: PPUSH
45647: CALL_OW 251
45651: PUSH
45652: LD_VAR 0 3
45656: PPUSH
45657: CALL_OW 254
45661: PUSH
45662: LD_VAR 0 3
45666: PPUSH
45667: CALL_OW 267
45671: PUSH
45672: LD_VAR 0 3
45676: PPUSH
45677: CALL_OW 248
45681: PUSH
45682: LD_VAR 0 3
45686: PPUSH
45687: CALL_OW 269
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: PUSH
45701: EMPTY
45702: LIST
45703: ADD
45704: ST_TO_ADDR
45705: GO 45892
// if GetBType ( i ) = b_factory then
45707: LD_VAR 0 3
45711: PPUSH
45712: CALL_OW 266
45716: PUSH
45717: LD_INT 3
45719: EQUAL
45720: IFFALSE 45810
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
45722: LD_ADDR_VAR 0 4
45726: PUSH
45727: LD_VAR 0 4
45731: PPUSH
45732: LD_INT 1
45734: PPUSH
45735: LD_VAR 0 3
45739: PPUSH
45740: CALL_OW 266
45744: PUSH
45745: LD_VAR 0 3
45749: PPUSH
45750: CALL_OW 250
45754: PUSH
45755: LD_VAR 0 3
45759: PPUSH
45760: CALL_OW 251
45764: PUSH
45765: LD_VAR 0 3
45769: PPUSH
45770: CALL_OW 254
45774: PUSH
45775: LD_VAR 0 3
45779: PPUSH
45780: CALL_OW 267
45784: PUSH
45785: LD_VAR 0 3
45789: PPUSH
45790: CALL_OW 248
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: PPUSH
45803: CALL_OW 2
45807: ST_TO_ADDR
45808: GO 45892
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
45810: LD_ADDR_VAR 0 4
45814: PUSH
45815: LD_VAR 0 4
45819: PUSH
45820: LD_VAR 0 3
45824: PPUSH
45825: CALL_OW 266
45829: PUSH
45830: LD_VAR 0 3
45834: PPUSH
45835: CALL_OW 250
45839: PUSH
45840: LD_VAR 0 3
45844: PPUSH
45845: CALL_OW 251
45849: PUSH
45850: LD_VAR 0 3
45854: PPUSH
45855: CALL_OW 254
45859: PUSH
45860: LD_VAR 0 3
45864: PPUSH
45865: CALL_OW 267
45869: PUSH
45870: LD_VAR 0 3
45874: PPUSH
45875: CALL_OW 248
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: PUSH
45888: EMPTY
45889: LIST
45890: ADD
45891: ST_TO_ADDR
// end ;
45892: GO 45456
45894: POP
45895: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
45896: LD_VAR 0 4
45900: PPUSH
45901: LD_STRING 08_GammaBase
45903: PPUSH
45904: CALL_OW 39
// end ;
45908: LD_VAR 0 2
45912: RET
