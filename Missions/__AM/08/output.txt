// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 41
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 42
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 38
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 17
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 18
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 20
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 32
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 33
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 37
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 11
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 30
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 40
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 34
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 39
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 43
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 6562 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 1732 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 5367 0 0
// PrepareRussians ;
 229: CALL 5685 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 24
 291: PPUSH
 292: LD_EXP 25
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 7827 0 6
// PrepareCutsceneAttack ;
 312: CALL 5419 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 43
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
// uc_side = 1 ;
 535: LD_ADDR_OWVAR 20
 539: PUSH
 540: LD_INT 1
 542: ST_TO_ADDR
// uc_nation = 1 ;
 543: LD_ADDR_OWVAR 21
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// if gammaCommander = 1 then
 551: LD_EXP 11
 555: PUSH
 556: LD_INT 1
 558: EQUAL
 559: IFFALSE 592
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 561: LD_ADDR_EXP 3
 565: PUSH
 566: LD_STRING Donaldson
 568: PPUSH
 569: LD_INT 1
 571: PPUSH
 572: CALL 6103 0 2
 576: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 577: LD_EXP 3
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: LD_INT 0
 587: PPUSH
 588: CALL_OW 49
// end ; if gammaCommander = 2 then
 592: LD_EXP 11
 596: PUSH
 597: LD_INT 2
 599: EQUAL
 600: IFFALSE 633
// begin Brown = PrepareUnit ( Brown , true ) ;
 602: LD_ADDR_EXP 2
 606: PUSH
 607: LD_STRING Brown
 609: PPUSH
 610: LD_INT 1
 612: PPUSH
 613: CALL 6103 0 2
 617: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 618: LD_EXP 2
 622: PPUSH
 623: LD_INT 5
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 49
// end ; if gammaCommander = 3 then
 633: LD_EXP 11
 637: PUSH
 638: LD_INT 3
 640: EQUAL
 641: IFFALSE 674
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 643: LD_ADDR_EXP 12
 647: PUSH
 648: LD_STRING VanHouten
 650: PPUSH
 651: LD_INT 1
 653: PPUSH
 654: CALL 6103 0 2
 658: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 659: LD_EXP 12
 663: PPUSH
 664: LD_INT 5
 666: PPUSH
 667: LD_INT 0
 669: PPUSH
 670: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 674: LD_ADDR_EXP 21
 678: PUSH
 679: LD_STRING Harisson
 681: PPUSH
 682: LD_INT 0
 684: PPUSH
 685: CALL 6103 0 2
 689: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 690: LD_ADDR_EXP 22
 694: PUSH
 695: LD_STRING Powell
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL 6103 0 2
 705: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 706: LD_ADDR_EXP 10
 710: PUSH
 711: LD_STRING 07_othersGamma
 713: PPUSH
 714: CALL_OW 31
 718: ST_TO_ADDR
// tmp := 8 - others_gamma ;
 719: LD_ADDR_VAR 0 14
 723: PUSH
 724: LD_INT 8
 726: PUSH
 727: LD_EXP 10
 731: MINUS
 732: ST_TO_ADDR
// if tmp then
 733: LD_VAR 0 14
 737: IFFALSE 790
// for i = 1 to tmp do
 739: LD_ADDR_VAR 0 2
 743: PUSH
 744: DOUBLE
 745: LD_INT 1
 747: DEC
 748: ST_TO_ADDR
 749: LD_VAR 0 14
 753: PUSH
 754: FOR_TO
 755: IFFALSE 788
// begin PrepareHuman ( false , 1 , 5 ) ;
 757: LD_INT 0
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: LD_INT 5
 765: PPUSH
 766: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
 770: LD_ADDR_EXP 10
 774: PUSH
 775: LD_EXP 10
 779: PUSH
 780: CALL_OW 44
 784: ADD
 785: ST_TO_ADDR
// end ;
 786: GO 754
 788: POP
 789: POP
// if HexInfo ( 61 , 29 ) = 0 then
 790: LD_INT 61
 792: PPUSH
 793: LD_INT 29
 795: PPUSH
 796: CALL_OW 428
 800: PUSH
 801: LD_INT 0
 803: EQUAL
 804: IFFALSE 835
// begin bc_type := b_barracks ;
 806: LD_ADDR_OWVAR 42
 810: PUSH
 811: LD_INT 5
 813: ST_TO_ADDR
// bc_level := 6 ;
 814: LD_ADDR_OWVAR 43
 818: PUSH
 819: LD_INT 6
 821: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
 822: LD_INT 61
 824: PPUSH
 825: LD_INT 29
 827: PPUSH
 828: LD_INT 5
 830: PPUSH
 831: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
 835: LD_ADDR_VAR 0 13
 839: PUSH
 840: LD_INT 22
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: PUSH
 850: LD_INT 30
 852: PUSH
 853: LD_INT 31
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PPUSH
 864: CALL_OW 69
 868: ST_TO_ADDR
// for i in bun do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_VAR 0 13
 878: PUSH
 879: FOR_IN
 880: IFFALSE 1012
// begin x := GetX ( i ) ;
 882: LD_ADDR_VAR 0 3
 886: PUSH
 887: LD_VAR 0 2
 891: PPUSH
 892: CALL_OW 250
 896: ST_TO_ADDR
// y := GetY ( i ) ;
 897: LD_ADDR_VAR 0 4
 901: PUSH
 902: LD_VAR 0 2
 906: PPUSH
 907: CALL_OW 251
 911: ST_TO_ADDR
// d := GetDir ( i ) ;
 912: LD_ADDR_VAR 0 5
 916: PUSH
 917: LD_VAR 0 2
 921: PPUSH
 922: CALL_OW 254
 926: ST_TO_ADDR
// RemoveUnit ( i ) ;
 927: LD_VAR 0 2
 931: PPUSH
 932: CALL_OW 64
// bc_type := b_bunker ;
 936: LD_ADDR_OWVAR 42
 940: PUSH
 941: LD_INT 32
 943: ST_TO_ADDR
// bc_level := 6 ;
 944: LD_ADDR_OWVAR 43
 948: PUSH
 949: LD_INT 6
 951: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
 952: LD_ADDR_VAR 0 6
 956: PUSH
 957: LD_VAR 0 3
 961: PPUSH
 962: LD_VAR 0 4
 966: PPUSH
 967: LD_VAR 0 5
 971: PPUSH
 972: CALL_OW 47
 976: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
 977: LD_VAR 0 6
 981: PPUSH
 982: LD_INT 5
 984: PUSH
 985: LD_INT 4
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_VAR 0 2
 996: PUSH
 997: LD_INT 2
 999: MOD
1000: PUSH
1001: LD_INT 1
1003: PLUS
1004: ARRAY
1005: PPUSH
1006: CALL_OW 431
// end ;
1010: GO 879
1012: POP
1013: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1014: LD_ADDR_VAR 0 9
1018: PUSH
1019: LD_INT 22
1021: PUSH
1022: LD_INT 1
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 30
1031: PUSH
1032: LD_INT 5
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: PPUSH
1043: CALL_OW 69
1047: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1048: LD_ADDR_VAR 0 8
1052: PUSH
1053: LD_INT 22
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: PUSH
1063: LD_INT 2
1065: PUSH
1066: LD_INT 30
1068: PUSH
1069: LD_INT 6
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: LD_INT 30
1078: PUSH
1079: LD_INT 7
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 30
1088: PUSH
1089: LD_INT 8
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1111: LD_ADDR_VAR 0 7
1115: PUSH
1116: LD_INT 22
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 30
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: CALL_OW 69
1144: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1145: LD_ADDR_VAR 0 12
1149: PUSH
1150: LD_INT 22
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 30
1162: PUSH
1163: LD_INT 36
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PPUSH
1174: CALL_OW 69
1178: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1179: LD_ADDR_VAR 0 13
1183: PUSH
1184: LD_INT 22
1186: PUSH
1187: LD_INT 1
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 2
1196: PUSH
1197: LD_INT 30
1199: PUSH
1200: LD_INT 31
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 30
1209: PUSH
1210: LD_INT 32
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 69
1230: ST_TO_ADDR
// for i in others_gamma do
1231: LD_ADDR_VAR 0 2
1235: PUSH
1236: LD_EXP 10
1240: PUSH
1241: FOR_IN
1242: IFFALSE 1617
// begin placed := false ;
1244: LD_ADDR_VAR 0 11
1248: PUSH
1249: LD_INT 0
1251: ST_TO_ADDR
// if GetClass ( i ) = 1 then
1252: LD_VAR 0 2
1256: PPUSH
1257: CALL_OW 257
1261: PUSH
1262: LD_INT 1
1264: EQUAL
1265: IFFALSE 1390
// begin if UnitFilter ( bun , [ f_empty ] ) then
1267: LD_VAR 0 13
1271: PPUSH
1272: LD_INT 58
1274: PUSH
1275: EMPTY
1276: LIST
1277: PPUSH
1278: CALL_OW 72
1282: IFFALSE 1321
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1284: LD_VAR 0 2
1288: PPUSH
1289: LD_VAR 0 13
1293: PPUSH
1294: LD_INT 58
1296: PUSH
1297: EMPTY
1298: LIST
1299: PPUSH
1300: CALL_OW 72
1304: PUSH
1305: LD_INT 1
1307: ARRAY
1308: PPUSH
1309: CALL_OW 52
// placed := true ;
1313: LD_ADDR_VAR 0 11
1317: PUSH
1318: LD_INT 1
1320: ST_TO_ADDR
// end ; if arm and not placed then
1321: LD_VAR 0 9
1325: PUSH
1326: LD_VAR 0 11
1330: NOT
1331: AND
1332: IFFALSE 1390
// begin for j in arm do
1334: LD_ADDR_VAR 0 10
1338: PUSH
1339: LD_VAR 0 9
1343: PUSH
1344: FOR_IN
1345: IFFALSE 1388
// if UnitsInside ( j ) < 6 then
1347: LD_VAR 0 10
1351: PPUSH
1352: CALL_OW 313
1356: PUSH
1357: LD_INT 6
1359: LESS
1360: IFFALSE 1386
// begin PlaceHumanInUnit ( i , j ) ;
1362: LD_VAR 0 2
1366: PPUSH
1367: LD_VAR 0 10
1371: PPUSH
1372: CALL_OW 52
// placed := true ;
1376: LD_ADDR_VAR 0 11
1380: PUSH
1381: LD_INT 1
1383: ST_TO_ADDR
// break ;
1384: GO 1388
// end ;
1386: GO 1344
1388: POP
1389: POP
// end ; end ; if GetClass ( i ) = 3 then
1390: LD_VAR 0 2
1394: PPUSH
1395: CALL_OW 257
1399: PUSH
1400: LD_INT 3
1402: EQUAL
1403: IFFALSE 1507
// if fac then
1405: LD_VAR 0 7
1409: IFFALSE 1507
// begin if ct then
1411: LD_VAR 0 12
1415: IFFALSE 1443
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1417: LD_VAR 0 2
1421: PPUSH
1422: LD_VAR 0 12
1426: PUSH
1427: LD_INT 1
1429: ARRAY
1430: PPUSH
1431: CALL_OW 52
// placed := true ;
1435: LD_ADDR_VAR 0 11
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// end ; if placed then
1443: LD_VAR 0 11
1447: IFFALSE 1451
// continue ;
1449: GO 1241
// for j in fac do
1451: LD_ADDR_VAR 0 10
1455: PUSH
1456: LD_VAR 0 7
1460: PUSH
1461: FOR_IN
1462: IFFALSE 1505
// if UnitsInside ( j ) < 6 then
1464: LD_VAR 0 10
1468: PPUSH
1469: CALL_OW 313
1473: PUSH
1474: LD_INT 6
1476: LESS
1477: IFFALSE 1503
// begin PlaceHumanInUnit ( i , j ) ;
1479: LD_VAR 0 2
1483: PPUSH
1484: LD_VAR 0 10
1488: PPUSH
1489: CALL_OW 52
// placed := true ;
1493: LD_ADDR_VAR 0 11
1497: PUSH
1498: LD_INT 1
1500: ST_TO_ADDR
// break ;
1501: GO 1505
// end ;
1503: GO 1461
1505: POP
1506: POP
// end ; if GetClass ( i ) = 4 then
1507: LD_VAR 0 2
1511: PPUSH
1512: CALL_OW 257
1516: PUSH
1517: LD_INT 4
1519: EQUAL
1520: IFFALSE 1584
// if lab then
1522: LD_VAR 0 8
1526: IFFALSE 1584
// begin for j in lab do
1528: LD_ADDR_VAR 0 10
1532: PUSH
1533: LD_VAR 0 8
1537: PUSH
1538: FOR_IN
1539: IFFALSE 1582
// if UnitsInside ( j ) < 6 then
1541: LD_VAR 0 10
1545: PPUSH
1546: CALL_OW 313
1550: PUSH
1551: LD_INT 6
1553: LESS
1554: IFFALSE 1580
// begin PlaceHumanInUnit ( i , j ) ;
1556: LD_VAR 0 2
1560: PPUSH
1561: LD_VAR 0 10
1565: PPUSH
1566: CALL_OW 52
// placed := true ;
1570: LD_ADDR_VAR 0 11
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// break ;
1578: GO 1582
// end ;
1580: GO 1538
1582: POP
1583: POP
// end ; if not placed then
1584: LD_VAR 0 11
1588: NOT
1589: IFFALSE 1615
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1591: LD_VAR 0 2
1595: PPUSH
1596: LD_INT 5
1598: PPUSH
1599: LD_INT 0
1601: PPUSH
1602: CALL_OW 49
// ComHold ( i ) ;
1606: LD_VAR 0 2
1610: PPUSH
1611: CALL_OW 140
// end ; end ;
1615: GO 1241
1617: POP
1618: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1619: LD_VAR 0 12
1623: PUSH
1624: LD_VAR 0 12
1628: PUSH
1629: LD_INT 1
1631: ARRAY
1632: PPUSH
1633: CALL_OW 313
1637: AND
1638: IFFALSE 1727
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
1640: LD_ADDR_VAR 0 2
1644: PUSH
1645: LD_INT 22
1647: PUSH
1648: LD_INT 1
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 33
1657: PUSH
1658: LD_INT 2
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PPUSH
1669: CALL_OW 69
1673: PUSH
1674: FOR_IN
1675: IFFALSE 1725
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
1677: LD_VAR 0 2
1681: PPUSH
1682: LD_VAR 0 12
1686: PUSH
1687: LD_INT 1
1689: ARRAY
1690: PPUSH
1691: CALL_OW 313
1695: PUSH
1696: LD_INT 1
1698: PPUSH
1699: LD_VAR 0 12
1703: PUSH
1704: LD_INT 1
1706: ARRAY
1707: PPUSH
1708: CALL_OW 313
1712: PPUSH
1713: CALL_OW 12
1717: ARRAY
1718: PPUSH
1719: CALL_OW 135
1723: GO 1674
1725: POP
1726: POP
// end ; end ;
1727: LD_VAR 0 1
1731: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
1732: LD_INT 0
1734: PPUSH
1735: PPUSH
1736: PPUSH
1737: PPUSH
1738: PPUSH
1739: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
1740: LD_INT 71
1742: PPUSH
1743: LD_INT 5
1745: PPUSH
1746: LD_INT 1
1748: PPUSH
1749: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
1753: LD_ADDR_VAR 0 2
1757: PUSH
1758: LD_STRING GammaBase
1760: PPUSH
1761: EMPTY
1762: PPUSH
1763: CALL_OW 30
1767: ST_TO_ADDR
// uc_side := 1 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 1
1775: ST_TO_ADDR
// uc_nation := 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// for i in blist do
1784: LD_ADDR_VAR 0 3
1788: PUSH
1789: LD_VAR 0 2
1793: PUSH
1794: FOR_IN
1795: IFFALSE 2203
// begin bc_type := i [ 1 ] ;
1797: LD_ADDR_OWVAR 42
1801: PUSH
1802: LD_VAR 0 3
1806: PUSH
1807: LD_INT 1
1809: ARRAY
1810: ST_TO_ADDR
// bc_level := i [ 5 ] ;
1811: LD_ADDR_OWVAR 43
1815: PUSH
1816: LD_VAR 0 3
1820: PUSH
1821: LD_INT 5
1823: ARRAY
1824: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
1825: LD_VAR 0 3
1829: PUSH
1830: LD_INT 1
1832: ARRAY
1833: PUSH
1834: LD_INT 7
1836: PUSH
1837: LD_INT 8
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: IN
1844: IFFALSE 1900
// begin bc_kind1 := i [ 7 ] ;
1846: LD_ADDR_OWVAR 44
1850: PUSH
1851: LD_VAR 0 3
1855: PUSH
1856: LD_INT 7
1858: ARRAY
1859: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1860: LD_STRING 06_remoteVehs_1
1862: PPUSH
1863: LD_INT 0
1865: PPUSH
1866: CALL_OW 30
1870: PUSH
1871: LD_INT 1
1873: EQUAL
1874: IFFALSE 1886
// begin bc_kind2 := 15 ;
1876: LD_ADDR_OWVAR 45
1880: PUSH
1881: LD_INT 15
1883: ST_TO_ADDR
// end else
1884: GO 1900
// begin bc_kind2 := i [ 8 ] ;
1886: LD_ADDR_OWVAR 45
1890: PUSH
1891: LD_VAR 0 3
1895: PUSH
1896: LD_INT 8
1898: ARRAY
1899: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
1900: LD_OWVAR 42
1904: PUSH
1905: LD_INT 0
1907: EQUAL
1908: IFFALSE 2026
// begin bc_type := b_warehouse ;
1910: LD_ADDR_OWVAR 42
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1918: LD_ADDR_EXP 36
1922: PUSH
1923: LD_VAR 0 3
1927: PUSH
1928: LD_INT 2
1930: ARRAY
1931: PPUSH
1932: LD_VAR 0 3
1936: PUSH
1937: LD_INT 3
1939: ARRAY
1940: PPUSH
1941: LD_VAR 0 3
1945: PUSH
1946: LD_INT 4
1948: ARRAY
1949: PPUSH
1950: CALL_OW 47
1954: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
1955: LD_EXP 36
1959: PPUSH
1960: LD_STRING gamma
1962: PPUSH
1963: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 350 , 250 ] [ Difficulty ] ) ;
1967: LD_EXP 36
1971: PPUSH
1972: CALL_OW 274
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: LD_INT 400
1982: PUSH
1983: LD_INT 350
1985: PUSH
1986: LD_INT 250
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: PUSH
1994: LD_OWVAR 67
1998: ARRAY
1999: PPUSH
2000: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
2004: LD_EXP 36
2008: PPUSH
2009: CALL_OW 274
2013: PPUSH
2014: LD_INT 2
2016: PPUSH
2017: LD_INT 200
2019: PPUSH
2020: CALL_OW 277
// end else
2024: GO 2168
// begin if bc_type = 4 then
2026: LD_OWVAR 42
2030: PUSH
2031: LD_INT 4
2033: EQUAL
2034: IFFALSE 2083
// begin bc_type = 5 ;
2036: LD_ADDR_OWVAR 42
2040: PUSH
2041: LD_INT 5
2043: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2044: LD_ADDR_VAR 0 4
2048: PUSH
2049: LD_VAR 0 3
2053: PUSH
2054: LD_INT 2
2056: ARRAY
2057: PPUSH
2058: LD_VAR 0 3
2062: PUSH
2063: LD_INT 3
2065: ARRAY
2066: PPUSH
2067: LD_VAR 0 3
2071: PUSH
2072: LD_INT 4
2074: ARRAY
2075: PPUSH
2076: CALL_OW 47
2080: ST_TO_ADDR
// end else
2081: GO 2168
// begin bc_type := i [ 1 ] ;
2083: LD_ADDR_OWVAR 42
2087: PUSH
2088: LD_VAR 0 3
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
2097: LD_STRING 06_remoteVehs_1
2099: PPUSH
2100: LD_INT 0
2102: PPUSH
2103: CALL_OW 30
2107: PUSH
2108: LD_INT 1
2110: EQUAL
2111: PUSH
2112: LD_OWVAR 42
2116: PUSH
2117: LD_INT 7
2119: EQUAL
2120: AND
2121: IFFALSE 2131
// bc_type := b_lab_full ;
2123: LD_ADDR_OWVAR 42
2127: PUSH
2128: LD_INT 8
2130: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2131: LD_ADDR_VAR 0 4
2135: PUSH
2136: LD_VAR 0 3
2140: PUSH
2141: LD_INT 2
2143: ARRAY
2144: PPUSH
2145: LD_VAR 0 3
2149: PUSH
2150: LD_INT 3
2152: ARRAY
2153: PPUSH
2154: LD_VAR 0 3
2158: PUSH
2159: LD_INT 4
2161: ARRAY
2162: PPUSH
2163: CALL_OW 47
2167: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
2168: LD_VAR 0 4
2172: PPUSH
2173: CALL_OW 266
2177: PUSH
2178: LD_INT 32
2180: EQUAL
2181: IFFALSE 2201
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2183: LD_VAR 0 4
2187: PPUSH
2188: LD_VAR 0 3
2192: PUSH
2193: LD_INT 7
2195: ARRAY
2196: PPUSH
2197: CALL_OW 431
// end ;
2201: GO 1794
2203: POP
2204: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2205: LD_INT 22
2207: PUSH
2208: LD_INT 1
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PUSH
2215: LD_INT 30
2217: PUSH
2218: LD_INT 3
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PPUSH
2229: CALL_OW 69
2233: IFFALSE 2481
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2235: LD_ADDR_VAR 0 4
2239: PUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 30
2252: PUSH
2253: LD_INT 3
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PPUSH
2264: CALL_OW 69
2268: PUSH
2269: LD_INT 1
2271: ARRAY
2272: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
2273: LD_ADDR_VAR 0 6
2277: PUSH
2278: LD_VAR 0 4
2282: PPUSH
2283: CALL_OW 250
2287: PPUSH
2288: LD_VAR 0 4
2292: PPUSH
2293: CALL_OW 251
2297: PPUSH
2298: LD_VAR 0 4
2302: PPUSH
2303: CALL_OW 254
2307: PPUSH
2308: CALL 15509 0 3
2312: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
2313: LD_ADDR_VAR 0 2
2317: PUSH
2318: LD_INT 19
2320: PUSH
2321: LD_INT 17
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2328: LD_STRING 06_remoteVehs_1
2330: PPUSH
2331: LD_INT 0
2333: PPUSH
2334: CALL_OW 30
2338: IFFALSE 2361
// blist := Insert ( blist , 1 , b_ext_radar ) ;
2340: LD_ADDR_VAR 0 2
2344: PUSH
2345: LD_VAR 0 2
2349: PPUSH
2350: LD_INT 1
2352: PPUSH
2353: LD_INT 20
2355: PPUSH
2356: CALL_OW 2
2360: ST_TO_ADDR
// for i in tmp do
2361: LD_ADDR_VAR 0 3
2365: PUSH
2366: LD_VAR 0 6
2370: PUSH
2371: FOR_IN
2372: IFFALSE 2479
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
2374: LD_VAR 0 3
2378: PUSH
2379: LD_INT 1
2381: ARRAY
2382: PPUSH
2383: LD_VAR 0 3
2387: PUSH
2388: LD_INT 2
2390: ARRAY
2391: PPUSH
2392: CALL_OW 428
2396: PUSH
2397: LD_INT 0
2399: EQUAL
2400: IFFALSE 2477
// begin bc_type := blist [ 1 ] ;
2402: LD_ADDR_OWVAR 42
2406: PUSH
2407: LD_VAR 0 2
2411: PUSH
2412: LD_INT 1
2414: ARRAY
2415: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2416: LD_VAR 0 3
2420: PUSH
2421: LD_INT 1
2423: ARRAY
2424: PPUSH
2425: LD_VAR 0 3
2429: PUSH
2430: LD_INT 2
2432: ARRAY
2433: PPUSH
2434: LD_VAR 0 3
2438: PUSH
2439: LD_INT 3
2441: ARRAY
2442: PPUSH
2443: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
2447: LD_ADDR_VAR 0 2
2451: PUSH
2452: LD_VAR 0 2
2456: PPUSH
2457: LD_INT 1
2459: PPUSH
2460: CALL_OW 3
2464: ST_TO_ADDR
// if blist = 0 then
2465: LD_VAR 0 2
2469: PUSH
2470: LD_INT 0
2472: EQUAL
2473: IFFALSE 2477
// break ;
2475: GO 2479
// end ;
2477: GO 2371
2479: POP
2480: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
2481: LD_STRING 06_remoteVehs_1
2483: PPUSH
2484: LD_INT 0
2486: PPUSH
2487: CALL_OW 30
2491: PUSH
2492: LD_INT 1
2494: EQUAL
2495: IFFALSE 2699
// begin bc_type = 36 ;
2497: LD_ADDR_OWVAR 42
2501: PUSH
2502: LD_INT 36
2504: ST_TO_ADDR
// bc_level = 4 ;
2505: LD_ADDR_OWVAR 43
2509: PUSH
2510: LD_INT 4
2512: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
2513: LD_INT 62
2515: PPUSH
2516: LD_INT 12
2518: PPUSH
2519: LD_INT 3
2521: PPUSH
2522: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2526: LD_ADDR_VAR 0 3
2530: PUSH
2531: DOUBLE
2532: LD_INT 1
2534: DEC
2535: ST_TO_ADDR
2536: LD_INT 3
2538: PUSH
2539: LD_INT 2
2541: PUSH
2542: LD_INT 2
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_OWVAR 67
2554: ARRAY
2555: PUSH
2556: FOR_TO
2557: IFFALSE 2697
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
2559: LD_ADDR_OWVAR 37
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: LD_INT 2
2569: PUSH
2570: LD_INT 3
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 1
2579: PPUSH
2580: LD_INT 2
2582: PPUSH
2583: CALL_OW 12
2587: ARRAY
2588: PUSH
2589: LD_INT 2
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: PUSH
2597: LD_OWVAR 67
2601: ARRAY
2602: ST_TO_ADDR
// vc_engine = 1 ;
2603: LD_ADDR_OWVAR 39
2607: PUSH
2608: LD_INT 1
2610: ST_TO_ADDR
// vc_control = 2 ;
2611: LD_ADDR_OWVAR 38
2615: PUSH
2616: LD_INT 2
2618: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2619: LD_ADDR_OWVAR 40
2623: PUSH
2624: LD_INT 3
2626: PUSH
2627: LD_INT 4
2629: PUSH
2630: LD_INT 5
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: LIST
2637: PUSH
2638: LD_INT 1
2640: PPUSH
2641: LD_INT 3
2643: PPUSH
2644: CALL_OW 12
2648: ARRAY
2649: ST_TO_ADDR
// veh = CreateVehicle ;
2650: LD_ADDR_VAR 0 5
2654: PUSH
2655: CALL_OW 45
2659: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
2660: LD_VAR 0 5
2664: PPUSH
2665: LD_EXP 36
2669: PPUSH
2670: CALL_OW 250
2674: PPUSH
2675: LD_EXP 36
2679: PPUSH
2680: CALL_OW 251
2684: PPUSH
2685: LD_INT 7
2687: PPUSH
2688: LD_INT 0
2690: PPUSH
2691: CALL_OW 50
// end ;
2695: GO 2556
2697: POP
2698: POP
// end ; end ;
2699: LD_VAR 0 1
2703: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
// uc_side = 1 ;
2710: LD_ADDR_OWVAR 20
2714: PUSH
2715: LD_INT 1
2717: ST_TO_ADDR
// uc_nation = 1 ;
2718: LD_ADDR_OWVAR 21
2722: PUSH
2723: LD_INT 1
2725: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
2726: LD_ADDR_EXP 13
2730: PUSH
2731: LD_STRING 06c_Denis
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL 6103 0 2
2741: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
2742: LD_EXP 13
2746: PPUSH
2747: LD_INT 4
2749: PPUSH
2750: LD_INT 0
2752: PPUSH
2753: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
2757: LD_ADDR_EXP 14
2761: PUSH
2762: LD_STRING 06c_Joan
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: CALL 6103 0 2
2772: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
2773: LD_EXP 14
2777: PPUSH
2778: LD_INT 4
2780: PPUSH
2781: LD_INT 0
2783: PPUSH
2784: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
2788: LD_STRING GladstoneIn07
2790: PPUSH
2791: LD_INT 0
2793: PPUSH
2794: CALL_OW 30
2798: NOT
2799: IFFALSE 2867
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
2801: LD_ADDR_EXP 8
2805: PUSH
2806: LD_STRING 06c_Gladstone
2808: PPUSH
2809: LD_INT 1
2811: PPUSH
2812: CALL 6103 0 2
2816: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
2817: LD_EXP 8
2821: NOT
2822: PUSH
2823: LD_STRING GladstoneStayInDelta
2825: PPUSH
2826: LD_INT 0
2828: PPUSH
2829: CALL_OW 30
2833: AND
2834: IFFALSE 2852
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
2836: LD_ADDR_EXP 8
2840: PUSH
2841: LD_STRING 05_Gladstone
2843: PPUSH
2844: LD_INT 1
2846: PPUSH
2847: CALL 6103 0 2
2851: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
2852: LD_EXP 8
2856: PPUSH
2857: LD_INT 4
2859: PPUSH
2860: LD_INT 0
2862: PPUSH
2863: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
2867: LD_STRING LisaStayInDelta
2869: PPUSH
2870: LD_INT 0
2872: PPUSH
2873: CALL_OW 30
2877: IFFALSE 2910
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
2879: LD_ADDR_EXP 6
2883: PUSH
2884: LD_STRING 05_Lisa
2886: PPUSH
2887: LD_INT 1
2889: PPUSH
2890: CALL 6103 0 2
2894: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
2895: LD_EXP 6
2899: PPUSH
2900: LD_INT 4
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
2910: LD_STRING BobbyStayInDelta
2912: PPUSH
2913: LD_INT 0
2915: PPUSH
2916: CALL_OW 30
2920: IFFALSE 2953
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
2922: LD_ADDR_EXP 4
2926: PUSH
2927: LD_STRING 05_Bobby
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: CALL 6103 0 2
2937: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
2938: LD_EXP 4
2942: PPUSH
2943: LD_INT 4
2945: PPUSH
2946: LD_INT 0
2948: PPUSH
2949: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
2953: LD_STRING CyrusStayInDelta
2955: PPUSH
2956: LD_INT 0
2958: PPUSH
2959: CALL_OW 30
2963: IFFALSE 2996
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
2965: LD_ADDR_EXP 5
2969: PUSH
2970: LD_STRING 05_Cyrus
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL 6103 0 2
2980: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
2981: LD_EXP 5
2985: PPUSH
2986: LD_INT 4
2988: PPUSH
2989: LD_INT 0
2991: PPUSH
2992: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
2996: LD_STRING BrownStayInDelta
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: CALL_OW 30
3006: IFFALSE 3039
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
3008: LD_ADDR_EXP 2
3012: PUSH
3013: LD_STRING 05_Brown
3015: PPUSH
3016: LD_INT 1
3018: PPUSH
3019: CALL 6103 0 2
3023: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3024: LD_EXP 2
3028: PPUSH
3029: LD_INT 4
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
3039: LD_STRING DonaldsonStayInDelta
3041: PPUSH
3042: LD_INT 0
3044: PPUSH
3045: CALL_OW 30
3049: IFFALSE 3082
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
3051: LD_ADDR_EXP 3
3055: PUSH
3056: LD_STRING 05_Donaldson
3058: PPUSH
3059: LD_INT 1
3061: PPUSH
3062: CALL 6103 0 2
3066: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3067: LD_EXP 3
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 49
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
3082: LD_ADDR_VAR 0 4
3086: PUSH
3087: LD_STRING OtherStayInDelta
3089: PPUSH
3090: CALL_OW 31
3094: ST_TO_ADDR
// if other then
3095: LD_VAR 0 4
3099: IFFALSE 3144
// for j = 1 to other do
3101: LD_ADDR_VAR 0 3
3105: PUSH
3106: DOUBLE
3107: LD_INT 1
3109: DEC
3110: ST_TO_ADDR
3111: LD_VAR 0 4
3115: PUSH
3116: FOR_TO
3117: IFFALSE 3142
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
3119: LD_VAR 0 4
3123: PUSH
3124: LD_VAR 0 3
3128: ARRAY
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 0
3135: PPUSH
3136: CALL_OW 49
3140: GO 3116
3142: POP
3143: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
3144: LD_ADDR_VAR 0 4
3148: PUSH
3149: LD_STRING 06_other_apemans
3151: PPUSH
3152: CALL_OW 31
3156: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
3157: LD_VAR 0 4
3161: PUSH
3162: LD_INT 5
3164: PUSH
3165: LD_INT 4
3167: PUSH
3168: LD_INT 3
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: PUSH
3176: LD_OWVAR 67
3180: ARRAY
3181: GREATEREQUAL
3182: IFFALSE 3211
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
3184: LD_ADDR_VAR 0 3
3188: PUSH
3189: LD_INT 5
3191: PUSH
3192: LD_INT 4
3194: PUSH
3195: LD_INT 3
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: LIST
3202: PUSH
3203: LD_OWVAR 67
3207: ARRAY
3208: ST_TO_ADDR
3209: GO 3221
// j := other ;
3211: LD_ADDR_VAR 0 3
3215: PUSH
3216: LD_VAR 0 4
3220: ST_TO_ADDR
// for i = 1 to j do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_VAR 0 3
3235: PUSH
3236: FOR_TO
3237: IFFALSE 3262
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
3239: LD_VAR 0 4
3243: PUSH
3244: LD_VAR 0 2
3248: ARRAY
3249: PPUSH
3250: LD_INT 4
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 49
3260: GO 3236
3262: POP
3263: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
3264: LD_INT 4
3266: PPUSH
3267: LD_INT 22
3269: PUSH
3270: LD_INT 1
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: LD_INT 21
3279: PUSH
3280: LD_INT 1
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 70
3295: PPUSH
3296: LD_INT 53
3298: PPUSH
3299: LD_INT 19
3301: PPUSH
3302: CALL_OW 111
// firstAttack = 1 ;
3306: LD_ADDR_EXP 32
3310: PUSH
3311: LD_INT 1
3313: ST_TO_ADDR
// end ;
3314: LD_VAR 0 1
3318: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
3319: LD_INT 0
3321: PPUSH
3322: PPUSH
3323: PPUSH
3324: PPUSH
3325: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
3326: LD_ADDR_VAR 0 4
3330: PUSH
3331: LD_STRING 07_vehicles
3333: PPUSH
3334: EMPTY
3335: PPUSH
3336: CALL_OW 30
3340: ST_TO_ADDR
// uc_side = 1 ;
3341: LD_ADDR_OWVAR 20
3345: PUSH
3346: LD_INT 1
3348: ST_TO_ADDR
// uc_nation = 1 ;
3349: LD_ADDR_OWVAR 21
3353: PUSH
3354: LD_INT 1
3356: ST_TO_ADDR
// if vehicles > 0 then
3357: LD_VAR 0 4
3361: PUSH
3362: LD_INT 0
3364: GREATER
3365: IFFALSE 3504
// begin for i = 1 to vehicles do
3367: LD_ADDR_VAR 0 2
3371: PUSH
3372: DOUBLE
3373: LD_INT 1
3375: DEC
3376: ST_TO_ADDR
3377: LD_VAR 0 4
3381: PUSH
3382: FOR_TO
3383: IFFALSE 3502
// begin vc_chassis = vehicles [ i ] ;
3385: LD_ADDR_OWVAR 37
3389: PUSH
3390: LD_VAR 0 4
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
3401: LD_ADDR_OWVAR 39
3405: PUSH
3406: LD_VAR 0 4
3410: PUSH
3411: LD_VAR 0 2
3415: PUSH
3416: LD_INT 1
3418: PLUS
3419: ARRAY
3420: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
3421: LD_ADDR_OWVAR 38
3425: PUSH
3426: LD_VAR 0 4
3430: PUSH
3431: LD_VAR 0 2
3435: PUSH
3436: LD_INT 2
3438: PLUS
3439: ARRAY
3440: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
3441: LD_ADDR_OWVAR 40
3445: PUSH
3446: LD_VAR 0 4
3450: PUSH
3451: LD_VAR 0 2
3455: PUSH
3456: LD_INT 3
3458: PLUS
3459: ARRAY
3460: ST_TO_ADDR
// veh = CreateVehicle ;
3461: LD_ADDR_VAR 0 5
3465: PUSH
3466: CALL_OW 45
3470: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
3471: LD_VAR 0 5
3475: PPUSH
3476: LD_INT 4
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL_OW 49
// i = i + 3 ;
3486: LD_ADDR_VAR 0 2
3490: PUSH
3491: LD_VAR 0 2
3495: PUSH
3496: LD_INT 3
3498: PLUS
3499: ST_TO_ADDR
// end ;
3500: GO 3382
3502: POP
3503: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3504: LD_ADDR_EXP 1
3508: PUSH
3509: LD_EXP 42
3513: PUSH
3514: LD_STRING JMM
3516: STR
3517: PPUSH
3518: LD_INT 1
3520: PPUSH
3521: CALL 6103 0 2
3525: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3526: LD_EXP 11
3530: PUSH
3531: LD_INT 1
3533: EQUAL
3534: PUSH
3535: LD_EXP 11
3539: PUSH
3540: LD_INT 3
3542: EQUAL
3543: OR
3544: IFFALSE 3568
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
3546: LD_ADDR_EXP 2
3550: PUSH
3551: LD_EXP 42
3555: PUSH
3556: LD_STRING Brown
3558: STR
3559: PPUSH
3560: LD_INT 1
3562: PPUSH
3563: CALL 6103 0 2
3567: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
3568: LD_EXP 11
3572: PUSH
3573: LD_INT 2
3575: EQUAL
3576: PUSH
3577: LD_EXP 11
3581: PUSH
3582: LD_INT 3
3584: EQUAL
3585: OR
3586: IFFALSE 3610
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
3588: LD_ADDR_EXP 3
3592: PUSH
3593: LD_EXP 42
3597: PUSH
3598: LD_STRING Donaldson
3600: STR
3601: PPUSH
3602: LD_INT 1
3604: PPUSH
3605: CALL 6103 0 2
3609: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3610: LD_ADDR_EXP 4
3614: PUSH
3615: LD_EXP 42
3619: PUSH
3620: LD_STRING Bobby
3622: STR
3623: PPUSH
3624: LD_INT 1
3626: PPUSH
3627: CALL 6103 0 2
3631: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3632: LD_ADDR_EXP 5
3636: PUSH
3637: LD_EXP 42
3641: PUSH
3642: LD_STRING Cyrus
3644: STR
3645: PPUSH
3646: LD_INT 1
3648: PPUSH
3649: CALL 6103 0 2
3653: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3654: LD_ADDR_EXP 6
3658: PUSH
3659: LD_EXP 42
3663: PUSH
3664: LD_STRING Lisa
3666: STR
3667: PPUSH
3668: LD_INT 1
3670: PPUSH
3671: CALL 6103 0 2
3675: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3676: LD_ADDR_EXP 7
3680: PUSH
3681: LD_EXP 42
3685: PUSH
3686: LD_STRING Frank
3688: STR
3689: PPUSH
3690: LD_INT 1
3692: PPUSH
3693: CALL 6103 0 2
3697: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3698: LD_ADDR_EXP 8
3702: PUSH
3703: LD_EXP 42
3707: PUSH
3708: LD_STRING Gladstone
3710: STR
3711: PPUSH
3712: LD_INT 1
3714: PPUSH
3715: CALL 6103 0 2
3719: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3720: LD_ADDR_EXP 9
3724: PUSH
3725: LD_EXP 42
3729: PUSH
3730: LD_STRING Kikuchi
3732: STR
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: CALL 6103 0 2
3741: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3742: LD_EXP 11
3746: PUSH
3747: LD_INT 1
3749: EQUAL
3750: PUSH
3751: LD_EXP 11
3755: PUSH
3756: LD_INT 3
3758: EQUAL
3759: OR
3760: IFFALSE 3777
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3762: LD_EXP 2
3766: PPUSH
3767: LD_INT 4
3769: PPUSH
3770: LD_INT 0
3772: PPUSH
3773: CALL_OW 49
// if gammaCommander = 2 or gammaCommander = 3 then
3777: LD_EXP 11
3781: PUSH
3782: LD_INT 2
3784: EQUAL
3785: PUSH
3786: LD_EXP 11
3790: PUSH
3791: LD_INT 3
3793: EQUAL
3794: OR
3795: IFFALSE 3812
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3797: LD_EXP 3
3801: PPUSH
3802: LD_INT 4
3804: PPUSH
3805: LD_INT 0
3807: PPUSH
3808: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3812: LD_ADDR_VAR 0 5
3816: PUSH
3817: LD_INT 4
3819: PPUSH
3820: LD_INT 22
3822: PUSH
3823: LD_INT 1
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 21
3832: PUSH
3833: LD_INT 2
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 58
3842: PUSH
3843: EMPTY
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: PPUSH
3851: CALL_OW 70
3855: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3856: LD_ADDR_EXP 1
3860: PUSH
3861: LD_EXP 42
3865: PUSH
3866: LD_STRING JMM
3868: STR
3869: PPUSH
3870: LD_INT 1
3872: PPUSH
3873: CALL 6103 0 2
3877: ST_TO_ADDR
// if veh > 0 then
3878: LD_VAR 0 5
3882: PUSH
3883: LD_INT 0
3885: GREATER
3886: IFFALSE 3908
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_VAR 0 5
3897: PUSH
3898: LD_INT 1
3900: ARRAY
3901: PPUSH
3902: CALL_OW 52
// end else
3906: GO 3923
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
3908: LD_EXP 1
3912: PPUSH
3913: LD_INT 4
3915: PPUSH
3916: LD_INT 0
3918: PPUSH
3919: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3923: LD_ADDR_VAR 0 5
3927: PUSH
3928: LD_INT 4
3930: PPUSH
3931: LD_INT 22
3933: PUSH
3934: LD_INT 1
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 21
3943: PUSH
3944: LD_INT 2
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 58
3953: PUSH
3954: EMPTY
3955: LIST
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: LIST
3961: PPUSH
3962: CALL_OW 70
3966: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3967: LD_ADDR_EXP 4
3971: PUSH
3972: LD_EXP 42
3976: PUSH
3977: LD_STRING Bobby
3979: STR
3980: PPUSH
3981: LD_INT 1
3983: PPUSH
3984: CALL 6103 0 2
3988: ST_TO_ADDR
// if veh > 0 then
3989: LD_VAR 0 5
3993: PUSH
3994: LD_INT 0
3996: GREATER
3997: IFFALSE 4019
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
3999: LD_EXP 4
4003: PPUSH
4004: LD_VAR 0 5
4008: PUSH
4009: LD_INT 1
4011: ARRAY
4012: PPUSH
4013: CALL_OW 52
// end else
4017: GO 4034
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4019: LD_EXP 4
4023: PPUSH
4024: LD_INT 4
4026: PPUSH
4027: LD_INT 0
4029: PPUSH
4030: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4034: LD_ADDR_VAR 0 5
4038: PUSH
4039: LD_INT 4
4041: PPUSH
4042: LD_INT 22
4044: PUSH
4045: LD_INT 1
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: PUSH
4052: LD_INT 21
4054: PUSH
4055: LD_INT 2
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 58
4064: PUSH
4065: EMPTY
4066: LIST
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 70
4077: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4078: LD_ADDR_EXP 5
4082: PUSH
4083: LD_EXP 42
4087: PUSH
4088: LD_STRING Cyrus
4090: STR
4091: PPUSH
4092: LD_INT 1
4094: PPUSH
4095: CALL 6103 0 2
4099: ST_TO_ADDR
// if veh > 0 then
4100: LD_VAR 0 5
4104: PUSH
4105: LD_INT 0
4107: GREATER
4108: IFFALSE 4130
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
4110: LD_EXP 5
4114: PPUSH
4115: LD_VAR 0 5
4119: PUSH
4120: LD_INT 1
4122: ARRAY
4123: PPUSH
4124: CALL_OW 52
// end else
4128: GO 4145
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4130: LD_EXP 5
4134: PPUSH
4135: LD_INT 4
4137: PPUSH
4138: LD_INT 0
4140: PPUSH
4141: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4145: LD_ADDR_VAR 0 5
4149: PUSH
4150: LD_INT 4
4152: PPUSH
4153: LD_INT 22
4155: PUSH
4156: LD_INT 1
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 21
4165: PUSH
4166: LD_INT 2
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 58
4175: PUSH
4176: EMPTY
4177: LIST
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 70
4188: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4189: LD_ADDR_EXP 6
4193: PUSH
4194: LD_EXP 42
4198: PUSH
4199: LD_STRING Lisa
4201: STR
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: CALL 6103 0 2
4210: ST_TO_ADDR
// if veh > 0 then
4211: LD_VAR 0 5
4215: PUSH
4216: LD_INT 0
4218: GREATER
4219: IFFALSE 4241
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
4221: LD_EXP 6
4225: PPUSH
4226: LD_VAR 0 5
4230: PUSH
4231: LD_INT 1
4233: ARRAY
4234: PPUSH
4235: CALL_OW 52
// end else
4239: GO 4256
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4241: LD_EXP 6
4245: PPUSH
4246: LD_INT 4
4248: PPUSH
4249: LD_INT 0
4251: PPUSH
4252: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4256: LD_ADDR_VAR 0 5
4260: PUSH
4261: LD_INT 4
4263: PPUSH
4264: LD_INT 22
4266: PUSH
4267: LD_INT 1
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: LD_INT 21
4276: PUSH
4277: LD_INT 2
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 58
4286: PUSH
4287: EMPTY
4288: LIST
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: PPUSH
4295: CALL_OW 70
4299: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
4300: LD_ADDR_EXP 7
4304: PUSH
4305: LD_EXP 42
4309: PUSH
4310: LD_STRING Frank
4312: STR
4313: PPUSH
4314: LD_INT 1
4316: PPUSH
4317: CALL 6103 0 2
4321: ST_TO_ADDR
// if veh > 0 then
4322: LD_VAR 0 5
4326: PUSH
4327: LD_INT 0
4329: GREATER
4330: IFFALSE 4352
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
4332: LD_EXP 7
4336: PPUSH
4337: LD_VAR 0 5
4341: PUSH
4342: LD_INT 1
4344: ARRAY
4345: PPUSH
4346: CALL_OW 52
// end else
4350: GO 4367
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
4352: LD_EXP 7
4356: PPUSH
4357: LD_INT 4
4359: PPUSH
4360: LD_INT 0
4362: PPUSH
4363: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4367: LD_ADDR_VAR 0 5
4371: PUSH
4372: LD_INT 4
4374: PPUSH
4375: LD_INT 22
4377: PUSH
4378: LD_INT 1
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: LD_INT 21
4387: PUSH
4388: LD_INT 2
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 58
4397: PUSH
4398: EMPTY
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PPUSH
4406: CALL_OW 70
4410: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
4411: LD_ADDR_EXP 8
4415: PUSH
4416: LD_EXP 42
4420: PUSH
4421: LD_STRING Gladstone
4423: STR
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: CALL 6103 0 2
4432: ST_TO_ADDR
// if veh > 0 then
4433: LD_VAR 0 5
4437: PUSH
4438: LD_INT 0
4440: GREATER
4441: IFFALSE 4463
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
4443: LD_EXP 8
4447: PPUSH
4448: LD_VAR 0 5
4452: PUSH
4453: LD_INT 1
4455: ARRAY
4456: PPUSH
4457: CALL_OW 52
// end else
4461: GO 4478
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4463: LD_EXP 8
4467: PPUSH
4468: LD_INT 4
4470: PPUSH
4471: LD_INT 0
4473: PPUSH
4474: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4478: LD_ADDR_VAR 0 5
4482: PUSH
4483: LD_INT 4
4485: PPUSH
4486: LD_INT 22
4488: PUSH
4489: LD_INT 1
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 21
4498: PUSH
4499: LD_INT 2
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 58
4508: PUSH
4509: EMPTY
4510: LIST
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 70
4521: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
4522: LD_ADDR_EXP 9
4526: PUSH
4527: LD_EXP 42
4531: PUSH
4532: LD_STRING Kikuchi
4534: STR
4535: PPUSH
4536: LD_INT 1
4538: PPUSH
4539: CALL 6103 0 2
4543: ST_TO_ADDR
// if veh > 0 then
4544: LD_VAR 0 5
4548: PUSH
4549: LD_INT 0
4551: GREATER
4552: IFFALSE 4574
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
4554: LD_EXP 9
4558: PPUSH
4559: LD_VAR 0 5
4563: PUSH
4564: LD_INT 1
4566: ARRAY
4567: PPUSH
4568: CALL_OW 52
// end else
4572: GO 4589
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
4574: LD_EXP 9
4578: PPUSH
4579: LD_INT 4
4581: PPUSH
4582: LD_INT 0
4584: PPUSH
4585: CALL_OW 49
// end ; other = CreateCharacterSet ( 07c_others ) ;
4589: LD_ADDR_VAR 0 3
4593: PUSH
4594: LD_STRING 07c_others
4596: PPUSH
4597: CALL_OW 31
4601: ST_TO_ADDR
// for i in other do
4602: LD_ADDR_VAR 0 2
4606: PUSH
4607: LD_VAR 0 3
4611: PUSH
4612: FOR_IN
4613: IFFALSE 4706
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4615: LD_ADDR_VAR 0 5
4619: PUSH
4620: LD_INT 4
4622: PPUSH
4623: LD_INT 22
4625: PUSH
4626: LD_INT 1
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PUSH
4633: LD_INT 21
4635: PUSH
4636: LD_INT 2
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: PUSH
4643: LD_INT 58
4645: PUSH
4646: EMPTY
4647: LIST
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: PPUSH
4654: CALL_OW 70
4658: ST_TO_ADDR
// if veh > 0 then
4659: LD_VAR 0 5
4663: PUSH
4664: LD_INT 0
4666: GREATER
4667: IFFALSE 4689
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4669: LD_VAR 0 2
4673: PPUSH
4674: LD_VAR 0 5
4678: PUSH
4679: LD_INT 1
4681: ARRAY
4682: PPUSH
4683: CALL_OW 52
// end else
4687: GO 4704
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4689: LD_VAR 0 2
4693: PPUSH
4694: LD_INT 4
4696: PPUSH
4697: LD_INT 0
4699: PPUSH
4700: CALL_OW 49
// end ; end ;
4704: GO 4612
4706: POP
4707: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
4708: LD_INT 4
4710: PPUSH
4711: LD_INT 22
4713: PUSH
4714: LD_INT 1
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PUSH
4721: EMPTY
4722: LIST
4723: PPUSH
4724: CALL_OW 70
4728: PPUSH
4729: LD_INT 53
4731: PPUSH
4732: LD_INT 19
4734: PPUSH
4735: CALL_OW 111
// end ;
4739: LD_VAR 0 1
4743: RET
// export function PrepareSikorsky ; begin
4744: LD_INT 0
4746: PPUSH
// uc_side = 4 ;
4747: LD_ADDR_OWVAR 20
4751: PUSH
4752: LD_INT 4
4754: ST_TO_ADDR
// uc_nation = 1 ;
4755: LD_ADDR_OWVAR 21
4759: PUSH
4760: LD_INT 1
4762: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
4763: LD_ADDR_EXP 15
4767: PUSH
4768: LD_STRING Sikorski
4770: PPUSH
4771: LD_INT 0
4773: PPUSH
4774: CALL 6103 0 2
4778: ST_TO_ADDR
// vc_engine = 1 ;
4779: LD_ADDR_OWVAR 39
4783: PUSH
4784: LD_INT 1
4786: ST_TO_ADDR
// vc_control = 1 ;
4787: LD_ADDR_OWVAR 38
4791: PUSH
4792: LD_INT 1
4794: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
4795: LD_ADDR_OWVAR 40
4799: PUSH
4800: LD_INT 5
4802: PUSH
4803: LD_INT 3
4805: PUSH
4806: LD_INT 4
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: PUSH
4814: LD_OWVAR 67
4818: ARRAY
4819: ST_TO_ADDR
// vc_chassis = 4 ;
4820: LD_ADDR_OWVAR 37
4824: PUSH
4825: LD_INT 4
4827: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
4828: LD_ADDR_EXP 16
4832: PUSH
4833: CALL_OW 45
4837: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
4838: LD_EXP 16
4842: PPUSH
4843: LD_INT 9
4845: PPUSH
4846: LD_INT 0
4848: PPUSH
4849: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
4853: LD_EXP 15
4857: PPUSH
4858: LD_EXP 16
4862: PPUSH
4863: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
4867: LD_EXP 16
4871: PPUSH
4872: LD_INT 5
4874: PPUSH
4875: CALL_OW 113
// end ;
4879: LD_VAR 0 1
4883: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
4884: LD_INT 0
4886: PPUSH
4887: PPUSH
4888: PPUSH
4889: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
4890: LD_ADDR_VAR 0 2
4894: PUSH
4895: DOUBLE
4896: LD_INT 1
4898: DEC
4899: ST_TO_ADDR
4900: LD_INT 8
4902: PUSH
4903: LD_INT 7
4905: PUSH
4906: LD_INT 7
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: PUSH
4914: LD_OWVAR 67
4918: ARRAY
4919: PUSH
4920: FOR_TO
4921: IFFALSE 5018
// begin uc_side = 4 ;
4923: LD_ADDR_OWVAR 20
4927: PUSH
4928: LD_INT 4
4930: ST_TO_ADDR
// uc_nation = 1 ;
4931: LD_ADDR_OWVAR 21
4935: PUSH
4936: LD_INT 1
4938: ST_TO_ADDR
// hc_name =  ;
4939: LD_ADDR_OWVAR 26
4943: PUSH
4944: LD_STRING 
4946: ST_TO_ADDR
// hc_gallery =  ;
4947: LD_ADDR_OWVAR 33
4951: PUSH
4952: LD_STRING 
4954: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
4955: LD_INT 0
4957: PPUSH
4958: LD_INT 1
4960: PPUSH
4961: LD_INT 5
4963: PPUSH
4964: LD_INT 8
4966: PPUSH
4967: CALL_OW 12
4971: PPUSH
4972: CALL_OW 380
// un = CreateHuman ;
4976: LD_ADDR_VAR 0 3
4980: PUSH
4981: CALL_OW 44
4985: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4986: LD_VAR 0 3
4990: PPUSH
4991: LD_INT 9
4993: PPUSH
4994: LD_INT 0
4996: PPUSH
4997: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5001: LD_VAR 0 3
5005: PPUSH
5006: LD_INT 53
5008: PPUSH
5009: LD_INT 23
5011: PPUSH
5012: CALL_OW 111
// end ;
5016: GO 4920
5018: POP
5019: POP
// for i = 1 to 3 do
5020: LD_ADDR_VAR 0 2
5024: PUSH
5025: DOUBLE
5026: LD_INT 1
5028: DEC
5029: ST_TO_ADDR
5030: LD_INT 3
5032: PUSH
5033: FOR_TO
5034: IFFALSE 5131
// begin uc_side = 4 ;
5036: LD_ADDR_OWVAR 20
5040: PUSH
5041: LD_INT 4
5043: ST_TO_ADDR
// uc_nation = 1 ;
5044: LD_ADDR_OWVAR 21
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
// hc_name =  ;
5052: LD_ADDR_OWVAR 26
5056: PUSH
5057: LD_STRING 
5059: ST_TO_ADDR
// hc_gallery =  ;
5060: LD_ADDR_OWVAR 33
5064: PUSH
5065: LD_STRING 
5067: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5068: LD_INT 0
5070: PPUSH
5071: LD_INT 4
5073: PPUSH
5074: LD_INT 5
5076: PPUSH
5077: LD_INT 8
5079: PPUSH
5080: CALL_OW 12
5084: PPUSH
5085: CALL_OW 380
// un = CreateHuman ;
5089: LD_ADDR_VAR 0 3
5093: PUSH
5094: CALL_OW 44
5098: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5099: LD_VAR 0 3
5103: PPUSH
5104: LD_INT 9
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5114: LD_VAR 0 3
5118: PPUSH
5119: LD_INT 53
5121: PPUSH
5122: LD_INT 23
5124: PPUSH
5125: CALL_OW 111
// end ;
5129: GO 5033
5131: POP
5132: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
5133: LD_ADDR_VAR 0 2
5137: PUSH
5138: DOUBLE
5139: LD_INT 1
5141: DEC
5142: ST_TO_ADDR
5143: LD_INT 9
5145: PUSH
5146: LD_INT 8
5148: PUSH
5149: LD_INT 7
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: LIST
5156: PUSH
5157: LD_OWVAR 67
5161: ARRAY
5162: PUSH
5163: FOR_TO
5164: IFFALSE 5360
// begin uc_side = 4 ;
5166: LD_ADDR_OWVAR 20
5170: PUSH
5171: LD_INT 4
5173: ST_TO_ADDR
// uc_nation = 1 ;
5174: LD_ADDR_OWVAR 21
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// vc_engine = 1 ;
5182: LD_ADDR_OWVAR 39
5186: PUSH
5187: LD_INT 1
5189: ST_TO_ADDR
// vc_control = 1 ;
5190: LD_ADDR_OWVAR 38
5194: PUSH
5195: LD_INT 1
5197: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
5198: LD_ADDR_OWVAR 40
5202: PUSH
5203: LD_INT 3
5205: PUSH
5206: LD_INT 4
5208: PUSH
5209: LD_INT 5
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: PUSH
5221: LD_INT 1
5223: PPUSH
5224: LD_INT 4
5226: PPUSH
5227: CALL_OW 12
5231: ARRAY
5232: ST_TO_ADDR
// vc_chassis = 4 ;
5233: LD_ADDR_OWVAR 37
5237: PUSH
5238: LD_INT 4
5240: ST_TO_ADDR
// veh = CreateVehicle ;
5241: LD_ADDR_VAR 0 4
5245: PUSH
5246: CALL_OW 45
5250: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
5251: LD_VAR 0 4
5255: PPUSH
5256: LD_INT 9
5258: PPUSH
5259: LD_INT 0
5261: PPUSH
5262: CALL_OW 49
// hc_name =  ;
5266: LD_ADDR_OWVAR 26
5270: PUSH
5271: LD_STRING 
5273: ST_TO_ADDR
// hc_gallery =  ;
5274: LD_ADDR_OWVAR 33
5278: PUSH
5279: LD_STRING 
5281: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
5282: LD_INT 0
5284: PPUSH
5285: LD_INT 3
5287: PPUSH
5288: LD_INT 5
5290: PPUSH
5291: LD_INT 8
5293: PPUSH
5294: CALL_OW 12
5298: PPUSH
5299: CALL_OW 380
// un = CreateHuman ;
5303: LD_ADDR_VAR 0 3
5307: PUSH
5308: CALL_OW 44
5312: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5313: LD_VAR 0 3
5317: PPUSH
5318: LD_VAR 0 4
5322: PPUSH
5323: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
5327: LD_VAR 0 4
5331: PUSH
5332: LD_VAR 0 3
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PPUSH
5341: LD_INT 53
5343: PPUSH
5344: LD_INT 23
5346: PPUSH
5347: CALL_OW 111
// wait ( 0 0$5 ) ;
5351: LD_INT 175
5353: PPUSH
5354: CALL_OW 67
// end ;
5358: GO 5163
5360: POP
5361: POP
// end ; end_of_file
5362: LD_VAR 0 1
5366: RET
// export function PrepareRussianCommander ; begin
5367: LD_INT 0
5369: PPUSH
// uc_side = 3 ;
5370: LD_ADDR_OWVAR 20
5374: PUSH
5375: LD_INT 3
5377: ST_TO_ADDR
// uc_nation = 3 ;
5378: LD_ADDR_OWVAR 21
5382: PUSH
5383: LD_INT 3
5385: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
5386: LD_ADDR_EXP 23
5390: PUSH
5391: LD_STRING Borodin
5393: PPUSH
5394: CALL_OW 25
5398: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
5399: LD_EXP 23
5403: PPUSH
5404: LD_INT 25
5406: PPUSH
5407: LD_INT 0
5409: PPUSH
5410: CALL_OW 49
// end ;
5414: LD_VAR 0 1
5418: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
5419: LD_INT 0
5421: PPUSH
5422: PPUSH
5423: PPUSH
5424: PPUSH
// for i = 1 to 10 do
5425: LD_ADDR_VAR 0 2
5429: PUSH
5430: DOUBLE
5431: LD_INT 1
5433: DEC
5434: ST_TO_ADDR
5435: LD_INT 10
5437: PUSH
5438: FOR_TO
5439: IFFALSE 5513
// begin uc_side = 6 ;
5441: LD_ADDR_OWVAR 20
5445: PUSH
5446: LD_INT 6
5448: ST_TO_ADDR
// uc_nation = 3 ;
5449: LD_ADDR_OWVAR 21
5453: PUSH
5454: LD_INT 3
5456: ST_TO_ADDR
// hc_gallery =  ;
5457: LD_ADDR_OWVAR 33
5461: PUSH
5462: LD_STRING 
5464: ST_TO_ADDR
// hc_name =  ;
5465: LD_ADDR_OWVAR 26
5469: PUSH
5470: LD_STRING 
5472: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
5473: LD_INT 0
5475: PPUSH
5476: LD_INT 1
5478: PPUSH
5479: LD_INT 3
5481: PPUSH
5482: CALL_OW 380
// un = CreateHuman ;
5486: LD_ADDR_VAR 0 3
5490: PUSH
5491: CALL_OW 44
5495: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
5496: LD_VAR 0 3
5500: PPUSH
5501: LD_INT 1
5503: PPUSH
5504: LD_INT 0
5506: PPUSH
5507: CALL_OW 49
// end ;
5511: GO 5438
5513: POP
5514: POP
// for i = 1 to 3 do
5515: LD_ADDR_VAR 0 2
5519: PUSH
5520: DOUBLE
5521: LD_INT 1
5523: DEC
5524: ST_TO_ADDR
5525: LD_INT 3
5527: PUSH
5528: FOR_TO
5529: IFFALSE 5678
// begin uc_side = 6 ;
5531: LD_ADDR_OWVAR 20
5535: PUSH
5536: LD_INT 6
5538: ST_TO_ADDR
// uc_nation = 3 ;
5539: LD_ADDR_OWVAR 21
5543: PUSH
5544: LD_INT 3
5546: ST_TO_ADDR
// vc_engine = 1 ;
5547: LD_ADDR_OWVAR 39
5551: PUSH
5552: LD_INT 1
5554: ST_TO_ADDR
// vc_control = 1 ;
5555: LD_ADDR_OWVAR 38
5559: PUSH
5560: LD_INT 1
5562: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
5563: LD_ADDR_OWVAR 40
5567: PUSH
5568: LD_INT 43
5570: PUSH
5571: LD_INT 44
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 1
5580: PPUSH
5581: LD_INT 2
5583: PPUSH
5584: CALL_OW 12
5588: ARRAY
5589: ST_TO_ADDR
// vc_chassis = 22 ;
5590: LD_ADDR_OWVAR 37
5594: PUSH
5595: LD_INT 22
5597: ST_TO_ADDR
// veh = CreateVehicle ;
5598: LD_ADDR_VAR 0 4
5602: PUSH
5603: CALL_OW 45
5607: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
5608: LD_VAR 0 4
5612: PPUSH
5613: LD_INT 2
5615: PPUSH
5616: LD_INT 0
5618: PPUSH
5619: CALL_OW 49
// hc_gallery =  ;
5623: LD_ADDR_OWVAR 33
5627: PUSH
5628: LD_STRING 
5630: ST_TO_ADDR
// hc_name =  ;
5631: LD_ADDR_OWVAR 26
5635: PUSH
5636: LD_STRING 
5638: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
5639: LD_INT 0
5641: PPUSH
5642: LD_INT 3
5644: PPUSH
5645: LD_INT 4
5647: PPUSH
5648: CALL_OW 380
// un = CreateHuman ;
5652: LD_ADDR_VAR 0 3
5656: PUSH
5657: CALL_OW 44
5661: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5662: LD_VAR 0 3
5666: PPUSH
5667: LD_VAR 0 4
5671: PPUSH
5672: CALL_OW 52
// end ;
5676: GO 5528
5678: POP
5679: POP
// end ;
5680: LD_VAR 0 1
5684: RET
// export function PrepareRussians ; var i , un ; begin
5685: LD_INT 0
5687: PPUSH
5688: PPUSH
5689: PPUSH
// for i = 1 to 14 do
5690: LD_ADDR_VAR 0 2
5694: PUSH
5695: DOUBLE
5696: LD_INT 1
5698: DEC
5699: ST_TO_ADDR
5700: LD_INT 14
5702: PUSH
5703: FOR_TO
5704: IFFALSE 5790
// begin uc_side = 3 ;
5706: LD_ADDR_OWVAR 20
5710: PUSH
5711: LD_INT 3
5713: ST_TO_ADDR
// uc_nation = 3 ;
5714: LD_ADDR_OWVAR 21
5718: PUSH
5719: LD_INT 3
5721: ST_TO_ADDR
// hc_gallery =  ;
5722: LD_ADDR_OWVAR 33
5726: PUSH
5727: LD_STRING 
5729: ST_TO_ADDR
// hc_name =  ;
5730: LD_ADDR_OWVAR 26
5734: PUSH
5735: LD_STRING 
5737: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 1
5743: PPUSH
5744: LD_EXP 24
5748: PPUSH
5749: LD_EXP 25
5753: PPUSH
5754: CALL_OW 12
5758: PPUSH
5759: CALL_OW 380
// un = CreateHuman ;
5763: LD_ADDR_VAR 0 3
5767: PUSH
5768: CALL_OW 44
5772: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5773: LD_VAR 0 3
5777: PPUSH
5778: LD_INT 3
5780: PPUSH
5781: LD_INT 0
5783: PPUSH
5784: CALL_OW 49
// end ;
5788: GO 5703
5790: POP
5791: POP
// for i = 1 to 6 do
5792: LD_ADDR_VAR 0 2
5796: PUSH
5797: DOUBLE
5798: LD_INT 1
5800: DEC
5801: ST_TO_ADDR
5802: LD_INT 6
5804: PUSH
5805: FOR_TO
5806: IFFALSE 5892
// begin uc_side = 3 ;
5808: LD_ADDR_OWVAR 20
5812: PUSH
5813: LD_INT 3
5815: ST_TO_ADDR
// uc_nation = 3 ;
5816: LD_ADDR_OWVAR 21
5820: PUSH
5821: LD_INT 3
5823: ST_TO_ADDR
// hc_gallery =  ;
5824: LD_ADDR_OWVAR 33
5828: PUSH
5829: LD_STRING 
5831: ST_TO_ADDR
// hc_name =  ;
5832: LD_ADDR_OWVAR 26
5836: PUSH
5837: LD_STRING 
5839: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5840: LD_INT 0
5842: PPUSH
5843: LD_INT 2
5845: PPUSH
5846: LD_EXP 24
5850: PPUSH
5851: LD_EXP 25
5855: PPUSH
5856: CALL_OW 12
5860: PPUSH
5861: CALL_OW 380
// un = CreateHuman ;
5865: LD_ADDR_VAR 0 3
5869: PUSH
5870: CALL_OW 44
5874: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5875: LD_VAR 0 3
5879: PPUSH
5880: LD_INT 3
5882: PPUSH
5883: LD_INT 0
5885: PPUSH
5886: CALL_OW 49
// end ;
5890: GO 5805
5892: POP
5893: POP
// for i = 1 to 6 do
5894: LD_ADDR_VAR 0 2
5898: PUSH
5899: DOUBLE
5900: LD_INT 1
5902: DEC
5903: ST_TO_ADDR
5904: LD_INT 6
5906: PUSH
5907: FOR_TO
5908: IFFALSE 5994
// begin uc_side = 3 ;
5910: LD_ADDR_OWVAR 20
5914: PUSH
5915: LD_INT 3
5917: ST_TO_ADDR
// uc_nation = 3 ;
5918: LD_ADDR_OWVAR 21
5922: PUSH
5923: LD_INT 3
5925: ST_TO_ADDR
// hc_gallery =  ;
5926: LD_ADDR_OWVAR 33
5930: PUSH
5931: LD_STRING 
5933: ST_TO_ADDR
// hc_name =  ;
5934: LD_ADDR_OWVAR 26
5938: PUSH
5939: LD_STRING 
5941: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5942: LD_INT 0
5944: PPUSH
5945: LD_INT 3
5947: PPUSH
5948: LD_EXP 24
5952: PPUSH
5953: LD_EXP 25
5957: PPUSH
5958: CALL_OW 12
5962: PPUSH
5963: CALL_OW 380
// un = CreateHuman ;
5967: LD_ADDR_VAR 0 3
5971: PUSH
5972: CALL_OW 44
5976: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5977: LD_VAR 0 3
5981: PPUSH
5982: LD_INT 3
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 49
// end ;
5992: GO 5907
5994: POP
5995: POP
// for i = 1 to 4 do
5996: LD_ADDR_VAR 0 2
6000: PUSH
6001: DOUBLE
6002: LD_INT 1
6004: DEC
6005: ST_TO_ADDR
6006: LD_INT 4
6008: PUSH
6009: FOR_TO
6010: IFFALSE 6096
// begin uc_side = 3 ;
6012: LD_ADDR_OWVAR 20
6016: PUSH
6017: LD_INT 3
6019: ST_TO_ADDR
// uc_nation = 3 ;
6020: LD_ADDR_OWVAR 21
6024: PUSH
6025: LD_INT 3
6027: ST_TO_ADDR
// hc_gallery =  ;
6028: LD_ADDR_OWVAR 33
6032: PUSH
6033: LD_STRING 
6035: ST_TO_ADDR
// hc_name =  ;
6036: LD_ADDR_OWVAR 26
6040: PUSH
6041: LD_STRING 
6043: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6044: LD_INT 0
6046: PPUSH
6047: LD_INT 4
6049: PPUSH
6050: LD_EXP 24
6054: PPUSH
6055: LD_EXP 25
6059: PPUSH
6060: CALL_OW 12
6064: PPUSH
6065: CALL_OW 380
// un = CreateHuman ;
6069: LD_ADDR_VAR 0 3
6073: PUSH
6074: CALL_OW 44
6078: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6079: LD_VAR 0 3
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: LD_INT 0
6089: PPUSH
6090: CALL_OW 49
// end ;
6094: GO 6009
6096: POP
6097: POP
// end ; end_of_file
6098: LD_VAR 0 1
6102: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6103: LD_INT 0
6105: PPUSH
6106: PPUSH
// if exist_mode then
6107: LD_VAR 0 2
6111: IFFALSE 6130
// unit := CreateCharacter ( ident ) else
6113: LD_ADDR_VAR 0 4
6117: PUSH
6118: LD_VAR 0 1
6122: PPUSH
6123: CALL_OW 34
6127: ST_TO_ADDR
6128: GO 6145
// unit := NewCharacter ( ident ) ;
6130: LD_ADDR_VAR 0 4
6134: PUSH
6135: LD_VAR 0 1
6139: PPUSH
6140: CALL_OW 25
6144: ST_TO_ADDR
// result := unit ;
6145: LD_ADDR_VAR 0 3
6149: PUSH
6150: LD_VAR 0 4
6154: ST_TO_ADDR
// end ;
6155: LD_VAR 0 3
6159: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6160: LD_INT 0
6162: PPUSH
6163: PPUSH
6164: PPUSH
// rnd = rand ( 1 , characters ) ;
6165: LD_ADDR_VAR 0 6
6169: PUSH
6170: LD_INT 1
6172: PPUSH
6173: LD_VAR 0 1
6177: PPUSH
6178: CALL_OW 12
6182: ST_TO_ADDR
// for i = 1 to characters do
6183: LD_ADDR_VAR 0 5
6187: PUSH
6188: DOUBLE
6189: LD_INT 1
6191: DEC
6192: ST_TO_ADDR
6193: LD_VAR 0 1
6197: PUSH
6198: FOR_TO
6199: IFFALSE 6309
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6201: LD_VAR 0 5
6205: PUSH
6206: LD_VAR 0 6
6210: EQUAL
6211: PUSH
6212: LD_VAR 0 1
6216: PUSH
6217: LD_VAR 0 5
6221: ARRAY
6222: PPUSH
6223: CALL_OW 258
6227: PUSH
6228: LD_INT 1
6230: EQUAL
6231: AND
6232: IFFALSE 6254
// Say ( characters [ i ] , dialogMID ) ;
6234: LD_VAR 0 1
6238: PUSH
6239: LD_VAR 0 5
6243: ARRAY
6244: PPUSH
6245: LD_VAR 0 2
6249: PPUSH
6250: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6254: LD_VAR 0 5
6258: PUSH
6259: LD_VAR 0 6
6263: EQUAL
6264: PUSH
6265: LD_VAR 0 1
6269: PUSH
6270: LD_VAR 0 5
6274: ARRAY
6275: PPUSH
6276: CALL_OW 258
6280: PUSH
6281: LD_INT 2
6283: EQUAL
6284: AND
6285: IFFALSE 6307
// Say ( characters [ i ] , dialogFID ) ;
6287: LD_VAR 0 1
6291: PUSH
6292: LD_VAR 0 5
6296: ARRAY
6297: PPUSH
6298: LD_VAR 0 3
6302: PPUSH
6303: CALL_OW 88
// end ;
6307: GO 6198
6309: POP
6310: POP
// end ;
6311: LD_VAR 0 4
6315: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6316: LD_INT 0
6318: PPUSH
6319: PPUSH
6320: PPUSH
// uc_side := GetSide ( b ) ;
6321: LD_ADDR_OWVAR 20
6325: PUSH
6326: LD_VAR 0 2
6330: PPUSH
6331: CALL_OW 255
6335: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6336: LD_ADDR_OWVAR 21
6340: PUSH
6341: LD_VAR 0 2
6345: PPUSH
6346: CALL_OW 248
6350: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6351: LD_INT 0
6353: PPUSH
6354: LD_INT 1
6356: PPUSH
6357: LD_VAR 0 1
6361: PPUSH
6362: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6366: LD_ADDR_VAR 0 5
6370: PUSH
6371: LD_VAR 0 2
6375: PPUSH
6376: CALL_OW 254
6380: PUSH
6381: LD_INT 3
6383: MINUS
6384: ST_TO_ADDR
// if dir < 0 then
6385: LD_VAR 0 5
6389: PUSH
6390: LD_INT 0
6392: LESS
6393: IFFALSE 6409
// dir := 6 + dir ;
6395: LD_ADDR_VAR 0 5
6399: PUSH
6400: LD_INT 6
6402: PUSH
6403: LD_VAR 0 5
6407: PLUS
6408: ST_TO_ADDR
// un := CreateHuman ;
6409: LD_ADDR_VAR 0 4
6413: PUSH
6414: CALL_OW 44
6418: ST_TO_ADDR
// SetDir ( un , dir ) ;
6419: LD_VAR 0 4
6423: PPUSH
6424: LD_VAR 0 5
6428: PPUSH
6429: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6433: LD_VAR 0 4
6437: PPUSH
6438: LD_VAR 0 2
6442: PPUSH
6443: CALL_OW 52
// end ;
6447: LD_VAR 0 3
6451: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6452: LD_INT 0
6454: PPUSH
6455: PPUSH
6456: PPUSH
6457: PPUSH
// for i = 1 to count do
6458: LD_ADDR_VAR 0 8
6462: PUSH
6463: DOUBLE
6464: LD_INT 1
6466: DEC
6467: ST_TO_ADDR
6468: LD_VAR 0 6
6472: PUSH
6473: FOR_TO
6474: IFFALSE 6555
// begin uc_side = side ;
6476: LD_ADDR_OWVAR 20
6480: PUSH
6481: LD_VAR 0 1
6485: ST_TO_ADDR
// uc_nation = nation ;
6486: LD_ADDR_OWVAR 21
6490: PUSH
6491: LD_VAR 0 2
6495: ST_TO_ADDR
// hc_gallery =  ;
6496: LD_ADDR_OWVAR 33
6500: PUSH
6501: LD_STRING 
6503: ST_TO_ADDR
// hc_name =  ;
6504: LD_ADDR_OWVAR 26
6508: PUSH
6509: LD_STRING 
6511: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6512: LD_INT 0
6514: PPUSH
6515: LD_VAR 0 5
6519: PPUSH
6520: LD_VAR 0 4
6524: PPUSH
6525: CALL_OW 380
// un = CreateHuman ;
6529: LD_ADDR_VAR 0 10
6533: PUSH
6534: CALL_OW 44
6538: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6539: LD_VAR 0 10
6543: PPUSH
6544: LD_VAR 0 3
6548: PPUSH
6549: CALL_OW 52
// end ;
6553: GO 6473
6555: POP
6556: POP
// end ;
6557: LD_VAR 0 7
6561: RET
// export function PrepareDifficulty ; begin
6562: LD_INT 0
6564: PPUSH
// if Difficulty = 1 then
6565: LD_OWVAR 67
6569: PUSH
6570: LD_INT 1
6572: EQUAL
6573: IFFALSE 6591
// begin RuSolMinLevel = 4 ;
6575: LD_ADDR_EXP 24
6579: PUSH
6580: LD_INT 4
6582: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6583: LD_ADDR_EXP 25
6587: PUSH
6588: LD_INT 6
6590: ST_TO_ADDR
// end ; if Difficulty = 2 then
6591: LD_OWVAR 67
6595: PUSH
6596: LD_INT 2
6598: EQUAL
6599: IFFALSE 6669
// begin RuSolMinLevel = 5 ;
6601: LD_ADDR_EXP 24
6605: PUSH
6606: LD_INT 5
6608: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6609: LD_ADDR_EXP 25
6613: PUSH
6614: LD_INT 6
6616: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
6617: LD_INT 51
6619: PPUSH
6620: LD_INT 3
6622: PPUSH
6623: LD_INT 1
6625: PPUSH
6626: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
6630: LD_INT 57
6632: PPUSH
6633: LD_INT 3
6635: PPUSH
6636: LD_INT 1
6638: PPUSH
6639: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6643: LD_INT 57
6645: PPUSH
6646: LD_INT 6
6648: PPUSH
6649: LD_INT 2
6651: PPUSH
6652: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
6656: LD_INT 51
6658: PPUSH
6659: LD_INT 6
6661: PPUSH
6662: LD_INT 2
6664: PPUSH
6665: CALL_OW 322
// end ; if Difficulty = 3 then
6669: LD_OWVAR 67
6673: PUSH
6674: LD_INT 3
6676: EQUAL
6677: IFFALSE 6760
// begin RuSolMinLevel = 5 ;
6679: LD_ADDR_EXP 24
6683: PUSH
6684: LD_INT 5
6686: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6687: LD_ADDR_EXP 25
6691: PUSH
6692: LD_INT 6
6694: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
6695: LD_INT 57
6697: PPUSH
6698: LD_INT 3
6700: PPUSH
6701: LD_INT 1
6703: PPUSH
6704: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
6708: LD_INT 51
6710: PPUSH
6711: LD_INT 3
6713: PPUSH
6714: LD_INT 1
6716: PPUSH
6717: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
6721: LD_INT 52
6723: PPUSH
6724: LD_INT 3
6726: PPUSH
6727: LD_INT 1
6729: PPUSH
6730: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6734: LD_INT 57
6736: PPUSH
6737: LD_INT 6
6739: PPUSH
6740: LD_INT 2
6742: PPUSH
6743: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
6747: LD_INT 52
6749: PPUSH
6750: LD_INT 6
6752: PPUSH
6753: LD_INT 2
6755: PPUSH
6756: CALL_OW 322
// end ; end ;
6760: LD_VAR 0 1
6764: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
6765: LD_INT 0
6767: PPUSH
6768: PPUSH
6769: PPUSH
6770: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6771: LD_ADDR_VAR 0 3
6775: PUSH
6776: LD_INT 22
6778: PUSH
6779: LD_INT 3
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PUSH
6786: LD_INT 25
6788: PUSH
6789: LD_INT 2
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 69
6804: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
6805: LD_ADDR_VAR 0 4
6809: PUSH
6810: LD_INT 4
6812: PUSH
6813: LD_INT 75
6815: PUSH
6816: LD_INT 79
6818: PUSH
6819: LD_INT 2
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: PUSH
6828: LD_INT 4
6830: PUSH
6831: LD_INT 113
6833: PUSH
6834: LD_INT 94
6836: PUSH
6837: LD_INT 4
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 29
6848: PUSH
6849: LD_INT 106
6851: PUSH
6852: LD_INT 97
6854: PUSH
6855: LD_INT 3
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 26
6866: PUSH
6867: LD_INT 93
6869: PUSH
6870: LD_INT 97
6872: PUSH
6873: LD_INT 5
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: LD_INT 2
6884: PUSH
6885: LD_INT 100
6887: PUSH
6888: LD_INT 89
6890: PUSH
6891: LD_INT 3
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 17
6902: PUSH
6903: LD_INT 96
6905: PUSH
6906: LD_INT 89
6908: PUSH
6909: LD_INT 1
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 32
6920: PUSH
6921: LD_INT 78
6923: PUSH
6924: LD_INT 94
6926: PUSH
6927: LD_INT 1
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: PUSH
6936: LD_INT 32
6938: PUSH
6939: LD_INT 95
6941: PUSH
6942: LD_INT 82
6944: PUSH
6945: LD_INT 3
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: PUSH
6954: LD_INT 32
6956: PUSH
6957: LD_INT 104
6959: PUSH
6960: LD_INT 85
6962: PUSH
6963: LD_INT 2
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 32
6974: PUSH
6975: LD_INT 81
6977: PUSH
6978: LD_INT 78
6980: PUSH
6981: LD_INT 2
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 33
6992: PUSH
6993: LD_INT 109
6995: PUSH
6996: LD_INT 90
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 33
7010: PUSH
7011: LD_INT 88
7013: PUSH
7014: LD_INT 79
7016: PUSH
7017: LD_INT 3
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 33
7028: PUSH
7029: LD_INT 76
7031: PUSH
7032: LD_INT 87
7034: PUSH
7035: LD_INT 1
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 26
7046: PUSH
7047: LD_INT 96
7049: PUSH
7050: LD_INT 97
7052: PUSH
7053: LD_INT 5
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 26
7064: PUSH
7065: LD_INT 85
7067: PUSH
7068: LD_INT 84
7070: PUSH
7071: LD_INT 2
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 6
7082: PUSH
7083: LD_INT 88
7085: PUSH
7086: LD_INT 95
7088: PUSH
7089: LD_INT 0
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 19
7100: PUSH
7101: LD_INT 103
7103: PUSH
7104: LD_INT 89
7106: PUSH
7107: LD_INT 4
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: PUSH
7116: LD_INT 16
7118: PUSH
7119: LD_INT 97
7121: PUSH
7122: LD_INT 86
7124: PUSH
7125: LD_INT 2
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 24
7136: PUSH
7137: LD_INT 100
7139: PUSH
7140: LD_INT 85
7142: PUSH
7143: LD_INT 3
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: ST_TO_ADDR
// for i := 1 to buildingsTab do
7173: LD_ADDR_VAR 0 2
7177: PUSH
7178: DOUBLE
7179: LD_INT 1
7181: DEC
7182: ST_TO_ADDR
7183: LD_VAR 0 4
7187: PUSH
7188: FOR_TO
7189: IFFALSE 7262
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7191: LD_VAR 0 3
7195: PPUSH
7196: LD_VAR 0 4
7200: PUSH
7201: LD_VAR 0 2
7205: ARRAY
7206: PUSH
7207: LD_INT 1
7209: ARRAY
7210: PPUSH
7211: LD_VAR 0 4
7215: PUSH
7216: LD_VAR 0 2
7220: ARRAY
7221: PUSH
7222: LD_INT 2
7224: ARRAY
7225: PPUSH
7226: LD_VAR 0 4
7230: PUSH
7231: LD_VAR 0 2
7235: ARRAY
7236: PUSH
7237: LD_INT 3
7239: ARRAY
7240: PPUSH
7241: LD_VAR 0 4
7245: PUSH
7246: LD_VAR 0 2
7250: ARRAY
7251: PUSH
7252: LD_INT 4
7254: ARRAY
7255: PPUSH
7256: CALL_OW 205
7260: GO 7188
7262: POP
7263: POP
// end ;
7264: LD_VAR 0 1
7268: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7269: LD_INT 0
7271: PPUSH
7272: PPUSH
// for i in charactersList do
7273: LD_ADDR_VAR 0 4
7277: PUSH
7278: LD_VAR 0 1
7282: PUSH
7283: FOR_IN
7284: IFFALSE 7313
// begin if IsOk ( i ) then
7286: LD_VAR 0 4
7290: PPUSH
7291: CALL_OW 302
7295: IFFALSE 7311
// SaveCharacters ( i , ident ) ;
7297: LD_VAR 0 4
7301: PPUSH
7302: LD_VAR 0 2
7306: PPUSH
7307: CALL_OW 38
// end ;
7311: GO 7283
7313: POP
7314: POP
// end ;
7315: LD_VAR 0 3
7319: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
7320: LD_INT 0
7322: PPUSH
7323: PPUSH
7324: PPUSH
7325: PPUSH
// for i = 1 to 72 do
7326: LD_ADDR_VAR 0 5
7330: PUSH
7331: DOUBLE
7332: LD_INT 1
7334: DEC
7335: ST_TO_ADDR
7336: LD_INT 72
7338: PUSH
7339: FOR_TO
7340: IFFALSE 7398
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
7342: LD_VAR 0 5
7346: PPUSH
7347: LD_VAR 0 1
7351: PPUSH
7352: CALL_OW 321
7356: PUSH
7357: LD_INT 1
7359: EQUAL
7360: PUSH
7361: LD_VAR 0 5
7365: PPUSH
7366: LD_VAR 0 3
7370: PPUSH
7371: CALL_OW 482
7375: PUSH
7376: LD_INT 1
7378: EQUAL
7379: AND
7380: IFFALSE 7396
// AddComResearch ( lab , i ) ;
7382: LD_VAR 0 2
7386: PPUSH
7387: LD_VAR 0 5
7391: PPUSH
7392: CALL_OW 184
7396: GO 7339
7398: POP
7399: POP
// end ;
7400: LD_VAR 0 4
7404: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
7405: LD_INT 0
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
7411: PPUSH
7412: PPUSH
7413: PPUSH
7414: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
7415: LD_ADDR_VAR 0 6
7419: PUSH
7420: LD_VAR 0 2
7424: PPUSH
7425: LD_INT 22
7427: PUSH
7428: LD_VAR 0 1
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 56
7439: PUSH
7440: EMPTY
7441: LIST
7442: PUSH
7443: LD_INT 24
7445: PUSH
7446: LD_INT 700
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 3
7455: PUSH
7456: LD_INT 60
7458: PUSH
7459: EMPTY
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 2
7468: PUSH
7469: LD_INT 25
7471: PUSH
7472: LD_INT 1
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 25
7481: PUSH
7482: LD_INT 5
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PUSH
7489: LD_INT 25
7491: PUSH
7492: LD_INT 8
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PUSH
7499: LD_INT 25
7501: PUSH
7502: LD_INT 9
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: PPUSH
7523: CALL_OW 70
7527: PUSH
7528: LD_EXP 23
7532: PUSH
7533: EMPTY
7534: LIST
7535: DIFF
7536: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7537: LD_ADDR_VAR 0 7
7541: PUSH
7542: LD_VAR 0 2
7546: PPUSH
7547: LD_INT 22
7549: PUSH
7550: LD_VAR 0 1
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 30
7561: PUSH
7562: LD_INT 32
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 58
7571: PUSH
7572: EMPTY
7573: LIST
7574: PUSH
7575: LD_INT 24
7577: PUSH
7578: LD_INT 251
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 70
7595: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
7596: LD_ADDR_VAR 0 9
7600: PUSH
7601: LD_VAR 0 2
7605: PPUSH
7606: LD_INT 22
7608: PUSH
7609: LD_VAR 0 1
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 2
7620: PUSH
7621: LD_INT 30
7623: PUSH
7624: LD_INT 4
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 30
7633: PUSH
7634: LD_INT 5
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: PUSH
7646: LD_INT 24
7648: PUSH
7649: LD_INT 251
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 70
7665: ST_TO_ADDR
// if barrackList > 0 then
7666: LD_VAR 0 9
7670: PUSH
7671: LD_INT 0
7673: GREATER
7674: IFFALSE 7822
// begin if turretList = 0 then
7676: LD_VAR 0 7
7680: PUSH
7681: LD_INT 0
7683: EQUAL
7684: IFFALSE 7726
// begin if soldiers_list > 0 then
7686: LD_VAR 0 6
7690: PUSH
7691: LD_INT 0
7693: GREATER
7694: IFFALSE 7724
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
7696: LD_VAR 0 6
7700: PPUSH
7701: LD_VAR 0 9
7705: PUSH
7706: LD_INT 1
7708: PPUSH
7709: LD_VAR 0 9
7713: PPUSH
7714: CALL_OW 12
7718: ARRAY
7719: PPUSH
7720: CALL_OW 120
// end else
7724: GO 7822
// begin for i in barrackList do
7726: LD_ADDR_VAR 0 4
7730: PUSH
7731: LD_VAR 0 9
7735: PUSH
7736: FOR_IN
7737: IFFALSE 7820
// begin insideUnits = UnitsInside ( i ) ;
7739: LD_ADDR_VAR 0 10
7743: PUSH
7744: LD_VAR 0 4
7748: PPUSH
7749: CALL_OW 313
7753: ST_TO_ADDR
// if insideUnits > 0 then
7754: LD_VAR 0 10
7758: PUSH
7759: LD_INT 0
7761: GREATER
7762: IFFALSE 7786
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
7764: LD_VAR 0 10
7768: PUSH
7769: LD_INT 1
7771: ARRAY
7772: PPUSH
7773: LD_VAR 0 7
7777: PUSH
7778: LD_INT 1
7780: ARRAY
7781: PPUSH
7782: CALL_OW 120
// if soldiers_list > 0 then
7786: LD_VAR 0 6
7790: PUSH
7791: LD_INT 0
7793: GREATER
7794: IFFALSE 7818
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
7796: LD_VAR 0 6
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: PPUSH
7805: LD_VAR 0 7
7809: PUSH
7810: LD_INT 1
7812: ARRAY
7813: PPUSH
7814: CALL_OW 120
// end ;
7818: GO 7736
7820: POP
7821: POP
// end ; end ; end ;
7822: LD_VAR 0 3
7826: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
7827: LD_INT 0
7829: PPUSH
7830: PPUSH
7831: PPUSH
7832: PPUSH
7833: PPUSH
7834: PPUSH
// for i = 1 to infantryCount do
7835: LD_ADDR_VAR 0 8
7839: PUSH
7840: DOUBLE
7841: LD_INT 1
7843: DEC
7844: ST_TO_ADDR
7845: LD_VAR 0 5
7849: PUSH
7850: FOR_TO
7851: IFFALSE 7967
// begin uc_side = side ;
7853: LD_ADDR_OWVAR 20
7857: PUSH
7858: LD_VAR 0 1
7862: ST_TO_ADDR
// uc_nation = nation ;
7863: LD_ADDR_OWVAR 21
7867: PUSH
7868: LD_VAR 0 3
7872: ST_TO_ADDR
// hc_class = 1 ;
7873: LD_ADDR_OWVAR 28
7877: PUSH
7878: LD_INT 1
7880: ST_TO_ADDR
// hc_name =  ;
7881: LD_ADDR_OWVAR 26
7885: PUSH
7886: LD_STRING 
7888: ST_TO_ADDR
// hc_gallery =  ;
7889: LD_ADDR_OWVAR 33
7893: PUSH
7894: LD_STRING 
7896: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7897: LD_INT 0
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: LD_EXP 24
7907: PPUSH
7908: LD_EXP 25
7912: PPUSH
7913: CALL_OW 12
7917: PPUSH
7918: CALL_OW 380
// un = CreateHuman ;
7922: LD_ADDR_VAR 0 10
7926: PUSH
7927: CALL_OW 44
7931: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
7932: LD_VAR 0 10
7936: PPUSH
7937: LD_VAR 0 2
7941: PPUSH
7942: LD_INT 0
7944: PPUSH
7945: CALL_OW 49
// defenders_list = defenders_list ^ un ;
7949: LD_ADDR_EXP 31
7953: PUSH
7954: LD_EXP 31
7958: PUSH
7959: LD_VAR 0 10
7963: ADD
7964: ST_TO_ADDR
// end ;
7965: GO 7850
7967: POP
7968: POP
// for i = 1 to vehCount do
7969: LD_ADDR_VAR 0 8
7973: PUSH
7974: DOUBLE
7975: LD_INT 1
7977: DEC
7978: ST_TO_ADDR
7979: LD_VAR 0 6
7983: PUSH
7984: FOR_TO
7985: IFFALSE 8192
// begin uc_side = side ;
7987: LD_ADDR_OWVAR 20
7991: PUSH
7992: LD_VAR 0 1
7996: ST_TO_ADDR
// uc_nation = nation ;
7997: LD_ADDR_OWVAR 21
8001: PUSH
8002: LD_VAR 0 3
8006: ST_TO_ADDR
// vc_Chassis = 22 ;
8007: LD_ADDR_OWVAR 37
8011: PUSH
8012: LD_INT 22
8014: ST_TO_ADDR
// vc_engine = 1 ;
8015: LD_ADDR_OWVAR 39
8019: PUSH
8020: LD_INT 1
8022: ST_TO_ADDR
// vc_control = 1 ;
8023: LD_ADDR_OWVAR 38
8027: PUSH
8028: LD_INT 1
8030: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
8031: LD_ADDR_OWVAR 40
8035: PUSH
8036: LD_INT 43
8038: PUSH
8039: LD_INT 44
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PUSH
8046: LD_INT 1
8048: PPUSH
8049: LD_INT 2
8051: PPUSH
8052: CALL_OW 12
8056: ARRAY
8057: ST_TO_ADDR
// veh = CreateVehicle ;
8058: LD_ADDR_VAR 0 12
8062: PUSH
8063: CALL_OW 45
8067: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
8068: LD_VAR 0 12
8072: PPUSH
8073: LD_VAR 0 2
8077: PPUSH
8078: LD_INT 0
8080: PPUSH
8081: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
8085: LD_ADDR_EXP 31
8089: PUSH
8090: LD_EXP 31
8094: PUSH
8095: LD_VAR 0 12
8099: ADD
8100: ST_TO_ADDR
// hc_class = 3 ;
8101: LD_ADDR_OWVAR 28
8105: PUSH
8106: LD_INT 3
8108: ST_TO_ADDR
// hc_name =  ;
8109: LD_ADDR_OWVAR 26
8113: PUSH
8114: LD_STRING 
8116: ST_TO_ADDR
// hc_gallery =  ;
8117: LD_ADDR_OWVAR 33
8121: PUSH
8122: LD_STRING 
8124: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8125: LD_INT 0
8127: PPUSH
8128: LD_INT 3
8130: PPUSH
8131: LD_EXP 24
8135: PPUSH
8136: LD_EXP 25
8140: PPUSH
8141: CALL_OW 12
8145: PPUSH
8146: CALL_OW 380
// un = CreateHuman ;
8150: LD_ADDR_VAR 0 10
8154: PUSH
8155: CALL_OW 44
8159: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8160: LD_VAR 0 10
8164: PPUSH
8165: LD_VAR 0 12
8169: PPUSH
8170: CALL_OW 52
// defenders_list = defenders_list ^ un ;
8174: LD_ADDR_EXP 31
8178: PUSH
8179: LD_EXP 31
8183: PUSH
8184: LD_VAR 0 10
8188: ADD
8189: ST_TO_ADDR
// end ;
8190: GO 7984
8192: POP
8193: POP
// end ;
8194: LD_VAR 0 7
8198: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
8199: LD_INT 0
8201: PPUSH
8202: PPUSH
8203: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
8204: LD_VAR 0 2
8208: PPUSH
8209: LD_INT 22
8211: PUSH
8212: LD_VAR 0 1
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: EMPTY
8222: LIST
8223: PPUSH
8224: CALL_OW 70
8228: PUSH
8229: LD_INT 0
8231: EQUAL
8232: PUSH
8233: LD_EXP 31
8237: PUSH
8238: LD_INT 0
8240: GREATER
8241: AND
8242: IFFALSE 8271
// begin ComMoveXY ( defenders_list , 65 , 68 ) ;
8244: LD_EXP 31
8248: PPUSH
8249: LD_INT 65
8251: PPUSH
8252: LD_INT 68
8254: PPUSH
8255: CALL_OW 111
// SetFuel ( defenders_list , 100 ) ;
8259: LD_EXP 31
8263: PPUSH
8264: LD_INT 100
8266: PPUSH
8267: CALL_OW 240
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
8271: LD_VAR 0 2
8275: PPUSH
8276: LD_INT 22
8278: PUSH
8279: LD_VAR 0 1
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PUSH
8288: EMPTY
8289: LIST
8290: PPUSH
8291: CALL_OW 70
8295: PUSH
8296: LD_INT 0
8298: GREATER
8299: PUSH
8300: LD_EXP 31
8304: PUSH
8305: LD_INT 0
8307: GREATER
8308: AND
8309: IFFALSE 8388
// ComAgressiveMove ( defenders_list , GetX ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) [ 1 ] ) ) ;
8311: LD_EXP 31
8315: PPUSH
8316: LD_VAR 0 2
8320: PPUSH
8321: LD_INT 22
8323: PUSH
8324: LD_VAR 0 1
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: EMPTY
8334: LIST
8335: PPUSH
8336: CALL_OW 70
8340: PUSH
8341: LD_INT 1
8343: ARRAY
8344: PPUSH
8345: CALL_OW 250
8349: PPUSH
8350: LD_VAR 0 2
8354: PPUSH
8355: LD_INT 22
8357: PUSH
8358: LD_VAR 0 1
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: EMPTY
8368: LIST
8369: PPUSH
8370: CALL_OW 70
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PPUSH
8379: CALL_OW 251
8383: PPUSH
8384: CALL_OW 114
// end ;
8388: LD_VAR 0 3
8392: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8393: LD_INT 0
8395: PPUSH
8396: PPUSH
8397: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8398: LD_INT 22
8400: PUSH
8401: LD_VAR 0 1
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: LD_INT 21
8412: PUSH
8413: LD_INT 2
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PPUSH
8424: CALL_OW 69
8428: PUSH
8429: LD_VAR 0 3
8433: LESSEQUAL
8434: IFFALSE 8542
// begin for i = 1 to vehCount do
8436: LD_ADDR_VAR 0 9
8440: PUSH
8441: DOUBLE
8442: LD_INT 1
8444: DEC
8445: ST_TO_ADDR
8446: LD_VAR 0 3
8450: PUSH
8451: FOR_TO
8452: IFFALSE 8540
// begin weapon = weaponTab [ i ] ;
8454: LD_ADDR_VAR 0 10
8458: PUSH
8459: LD_VAR 0 4
8463: PUSH
8464: LD_VAR 0 9
8468: ARRAY
8469: ST_TO_ADDR
// if weapon = 46 then
8470: LD_VAR 0 10
8474: PUSH
8475: LD_INT 46
8477: EQUAL
8478: IFFALSE 8509
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
8480: LD_VAR 0 2
8484: PPUSH
8485: LD_INT 24
8487: PPUSH
8488: LD_VAR 0 5
8492: PPUSH
8493: LD_VAR 0 6
8497: PPUSH
8498: LD_VAR 0 10
8502: PPUSH
8503: CALL_OW 185
// end else
8507: GO 8538
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8509: LD_VAR 0 2
8513: PPUSH
8514: LD_VAR 0 7
8518: PPUSH
8519: LD_VAR 0 5
8523: PPUSH
8524: LD_VAR 0 6
8528: PPUSH
8529: LD_VAR 0 10
8533: PPUSH
8534: CALL_OW 185
// end ; end ;
8538: GO 8451
8540: POP
8541: POP
// end ; end ;
8542: LD_VAR 0 8
8546: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
8547: LD_INT 0
8549: PPUSH
8550: PPUSH
8551: PPUSH
8552: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
8553: LD_ADDR_VAR 0 8
8557: PUSH
8558: LD_INT 22
8560: PUSH
8561: LD_VAR 0 1
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: LD_INT 21
8572: PUSH
8573: LD_INT 2
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 3
8582: PUSH
8583: LD_INT 24
8585: PUSH
8586: LD_INT 650
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: LIST
8601: PPUSH
8602: CALL_OW 69
8606: ST_TO_ADDR
// if damageVehicles > 0 then
8607: LD_VAR 0 8
8611: PUSH
8612: LD_INT 0
8614: GREATER
8615: IFFALSE 8636
// ComMoveXY ( damageVehicles , repX , repY ) ;
8617: LD_VAR 0 8
8621: PPUSH
8622: LD_VAR 0 3
8626: PPUSH
8627: LD_VAR 0 4
8631: PPUSH
8632: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
8636: LD_VAR 0 8
8640: PPUSH
8641: LD_INT 95
8643: PUSH
8644: LD_VAR 0 2
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: LD_INT 3
8655: PUSH
8656: LD_INT 58
8658: PUSH
8659: EMPTY
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: PPUSH
8670: CALL_OW 72
8674: PUSH
8675: LD_INT 0
8677: GREATER
8678: IFFALSE 8745
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
8680: LD_ADDR_VAR 0 6
8684: PUSH
8685: LD_VAR 0 8
8689: PPUSH
8690: LD_INT 95
8692: PUSH
8693: LD_VAR 0 2
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 58
8707: PUSH
8708: EMPTY
8709: LIST
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PPUSH
8719: CALL_OW 72
8723: PUSH
8724: FOR_IN
8725: IFFALSE 8743
// ComExitVehicle ( UnitsInside ( i ) ) ;
8727: LD_VAR 0 6
8731: PPUSH
8732: CALL_OW 313
8736: PPUSH
8737: CALL_OW 121
8741: GO 8724
8743: POP
8744: POP
// end ;
8745: LD_VAR 0 5
8749: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
8750: LD_INT 0
8752: PPUSH
8753: PPUSH
8754: PPUSH
8755: PPUSH
8756: PPUSH
8757: PPUSH
8758: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
8759: LD_ADDR_VAR 0 8
8763: PUSH
8764: LD_INT 22
8766: PUSH
8767: LD_VAR 0 1
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: LD_INT 21
8778: PUSH
8779: LD_INT 2
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 24
8788: PUSH
8789: LD_INT 250
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: LD_INT 3
8798: PUSH
8799: LD_INT 58
8801: PUSH
8802: EMPTY
8803: LIST
8804: PUSH
8805: LD_INT 2
8807: PUSH
8808: LD_INT 34
8810: PUSH
8811: LD_INT 43
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PUSH
8818: LD_INT 34
8820: PUSH
8821: LD_INT 44
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PUSH
8828: LD_INT 34
8830: PUSH
8831: LD_INT 46
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: LIST
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: PPUSH
8855: CALL_OW 69
8859: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
8860: LD_INT 22
8862: PUSH
8863: LD_VAR 0 1
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 21
8874: PUSH
8875: LD_INT 2
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 24
8884: PUSH
8885: LD_INT 1000
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: LD_INT 3
8894: PUSH
8895: LD_INT 58
8897: PUSH
8898: EMPTY
8899: LIST
8900: PUSH
8901: LD_INT 2
8903: PUSH
8904: LD_INT 34
8906: PUSH
8907: LD_INT 43
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 34
8916: PUSH
8917: LD_INT 44
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PUSH
8924: LD_INT 34
8926: PUSH
8927: LD_INT 46
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: PPUSH
8951: CALL_OW 69
8955: PUSH
8956: LD_INT 5
8958: PUSH
8959: LD_INT 6
8961: PUSH
8962: LD_INT 7
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: LIST
8969: PUSH
8970: LD_OWVAR 67
8974: ARRAY
8975: GREATEREQUAL
8976: IFFALSE 9541
// repeat wait ( 0 0$1 ) ;
8978: LD_INT 35
8980: PPUSH
8981: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
8985: LD_ADDR_VAR 0 8
8989: PUSH
8990: LD_INT 22
8992: PUSH
8993: LD_VAR 0 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 21
9004: PUSH
9005: LD_INT 2
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: LD_INT 24
9014: PUSH
9015: LD_INT 250
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 2
9024: PUSH
9025: LD_INT 34
9027: PUSH
9028: LD_INT 43
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PUSH
9035: LD_INT 34
9037: PUSH
9038: LD_INT 44
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: LD_INT 34
9047: PUSH
9048: LD_INT 46
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 3
9063: PUSH
9064: LD_INT 58
9066: PUSH
9067: EMPTY
9068: LIST
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: PPUSH
9081: CALL_OW 69
9085: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
9086: LD_INT 22
9088: PUSH
9089: LD_VAR 0 1
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: PUSH
9098: LD_INT 95
9100: PUSH
9101: LD_VAR 0 2
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PPUSH
9114: CALL_OW 69
9118: NOT
9119: PUSH
9120: LD_VAR 0 11
9124: PUSH
9125: LD_INT 0
9127: EQUAL
9128: AND
9129: IFFALSE 9184
// for i := 1 to wayX do
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: DOUBLE
9137: LD_INT 1
9139: DEC
9140: ST_TO_ADDR
9141: LD_VAR 0 3
9145: PUSH
9146: FOR_TO
9147: IFFALSE 9182
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
9149: LD_VAR 0 8
9153: PPUSH
9154: LD_VAR 0 3
9158: PUSH
9159: LD_VAR 0 6
9163: ARRAY
9164: PPUSH
9165: LD_VAR 0 4
9169: PUSH
9170: LD_VAR 0 6
9174: ARRAY
9175: PPUSH
9176: CALL_OW 114
9180: GO 9146
9182: POP
9183: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
9184: LD_INT 22
9186: PUSH
9187: LD_VAR 0 1
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PUSH
9196: LD_INT 95
9198: PUSH
9199: LD_VAR 0 2
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PPUSH
9212: CALL_OW 69
9216: IFFALSE 9440
// begin seeEnemy = 1 ;
9218: LD_ADDR_VAR 0 11
9222: PUSH
9223: LD_INT 1
9225: ST_TO_ADDR
// for j in vehiclesOK do
9226: LD_ADDR_VAR 0 7
9230: PUSH
9231: LD_VAR 0 8
9235: PUSH
9236: FOR_IN
9237: IFFALSE 9438
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9239: LD_ADDR_VAR 0 9
9243: PUSH
9244: LD_INT 81
9246: PUSH
9247: LD_VAR 0 1
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 101
9258: PUSH
9259: LD_INT 1
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PPUSH
9270: CALL_OW 69
9274: PPUSH
9275: LD_VAR 0 7
9279: PPUSH
9280: CALL_OW 74
9284: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9285: LD_ADDR_VAR 0 10
9289: PUSH
9290: LD_INT 81
9292: PUSH
9293: LD_VAR 0 1
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: PUSH
9302: LD_INT 101
9304: PUSH
9305: LD_INT 1
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PUSH
9312: LD_INT 2
9314: PUSH
9315: LD_INT 59
9317: PUSH
9318: EMPTY
9319: LIST
9320: PUSH
9321: LD_INT 21
9323: PUSH
9324: LD_INT 1
9326: PUSH
9327: EMPTY
9328: LIST
9329: LIST
9330: PUSH
9331: LD_INT 21
9333: PUSH
9334: LD_INT 2
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: PPUSH
9355: CALL_OW 69
9359: PPUSH
9360: LD_VAR 0 7
9364: PPUSH
9365: CALL_OW 74
9369: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9370: LD_VAR 0 7
9374: PPUSH
9375: LD_VAR 0 9
9379: PPUSH
9380: CALL_OW 296
9384: PUSH
9385: LD_INT 8
9387: PLUS
9388: PUSH
9389: LD_VAR 0 7
9393: PPUSH
9394: LD_VAR 0 10
9398: PPUSH
9399: CALL_OW 296
9403: LESS
9404: IFFALSE 9422
// ComAttackUnit ( j , target1 ) else
9406: LD_VAR 0 7
9410: PPUSH
9411: LD_VAR 0 9
9415: PPUSH
9416: CALL_OW 115
9420: GO 9436
// ComAttackUnit ( j , target2 ) ;
9422: LD_VAR 0 7
9426: PPUSH
9427: LD_VAR 0 10
9431: PPUSH
9432: CALL_OW 115
// end ;
9436: GO 9236
9438: POP
9439: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
9440: LD_INT 22
9442: PUSH
9443: LD_VAR 0 1
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 21
9454: PUSH
9455: LD_INT 2
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: LD_INT 24
9464: PUSH
9465: LD_INT 250
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: LD_INT 2
9474: PUSH
9475: LD_INT 34
9477: PUSH
9478: LD_INT 43
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: LD_INT 34
9487: PUSH
9488: LD_INT 44
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: LD_INT 34
9497: PUSH
9498: LD_INT 46
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 3
9513: PUSH
9514: LD_INT 58
9516: PUSH
9517: EMPTY
9518: LIST
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: PPUSH
9531: CALL_OW 69
9535: PUSH
9536: LD_INT 0
9538: EQUAL
9539: IFFALSE 8978
// seeEnemy = 0 ;
9541: LD_ADDR_VAR 0 11
9545: PUSH
9546: LD_INT 0
9548: ST_TO_ADDR
// end ;
9549: LD_VAR 0 5
9553: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
9554: LD_INT 0
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
// repeat wait ( 0 0$1 ) ;
9562: LD_INT 35
9564: PPUSH
9565: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
9569: LD_ADDR_VAR 0 7
9573: PUSH
9574: LD_INT 22
9576: PUSH
9577: LD_VAR 0 1
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 21
9588: PUSH
9589: LD_INT 2
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 24
9598: PUSH
9599: LD_INT 651
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: PPUSH
9611: CALL_OW 69
9615: ST_TO_ADDR
// for j in vehiclesOK do
9616: LD_ADDR_VAR 0 4
9620: PUSH
9621: LD_VAR 0 7
9625: PUSH
9626: FOR_IN
9627: IFFALSE 9828
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9629: LD_ADDR_VAR 0 5
9633: PUSH
9634: LD_INT 81
9636: PUSH
9637: LD_VAR 0 1
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: PUSH
9646: LD_INT 101
9648: PUSH
9649: LD_INT 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PPUSH
9660: CALL_OW 69
9664: PPUSH
9665: LD_VAR 0 4
9669: PPUSH
9670: CALL_OW 74
9674: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9675: LD_ADDR_VAR 0 6
9679: PUSH
9680: LD_INT 81
9682: PUSH
9683: LD_VAR 0 1
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PUSH
9692: LD_INT 101
9694: PUSH
9695: LD_INT 1
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PUSH
9702: LD_INT 2
9704: PUSH
9705: LD_INT 59
9707: PUSH
9708: EMPTY
9709: LIST
9710: PUSH
9711: LD_INT 21
9713: PUSH
9714: LD_INT 1
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: PUSH
9721: LD_INT 21
9723: PUSH
9724: LD_INT 2
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: PUSH
9742: EMPTY
9743: LIST
9744: PPUSH
9745: CALL_OW 69
9749: PPUSH
9750: LD_VAR 0 4
9754: PPUSH
9755: CALL_OW 74
9759: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9760: LD_VAR 0 4
9764: PPUSH
9765: LD_VAR 0 5
9769: PPUSH
9770: CALL_OW 296
9774: PUSH
9775: LD_INT 8
9777: PLUS
9778: PUSH
9779: LD_VAR 0 4
9783: PPUSH
9784: LD_VAR 0 6
9788: PPUSH
9789: CALL_OW 296
9793: LESS
9794: IFFALSE 9812
// ComAttackUnit ( j , target1 ) else
9796: LD_VAR 0 4
9800: PPUSH
9801: LD_VAR 0 5
9805: PPUSH
9806: CALL_OW 115
9810: GO 9826
// ComAttackUnit ( j , target2 ) ;
9812: LD_VAR 0 4
9816: PPUSH
9817: LD_VAR 0 6
9821: PPUSH
9822: CALL_OW 115
// end ;
9826: GO 9626
9828: POP
9829: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
9830: LD_INT 22
9832: PUSH
9833: LD_VAR 0 1
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: LD_INT 21
9844: PUSH
9845: LD_INT 2
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 24
9854: PUSH
9855: LD_INT 250
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: PPUSH
9867: CALL_OW 69
9871: PUSH
9872: LD_INT 0
9874: EQUAL
9875: IFFALSE 9562
// end ;
9877: LD_VAR 0 2
9881: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9882: LD_INT 0
9884: PPUSH
9885: PPUSH
9886: PPUSH
9887: PPUSH
9888: PPUSH
9889: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
9890: LD_ADDR_VAR 0 8
9894: PUSH
9895: LD_VAR 0 2
9899: PPUSH
9900: CALL_OW 313
9904: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
9905: LD_ADDR_VAR 0 9
9909: PUSH
9910: LD_VAR 0 3
9914: PPUSH
9915: LD_INT 22
9917: PUSH
9918: LD_VAR 0 1
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 25
9929: PUSH
9930: LD_INT 2
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: LD_INT 24
9939: PUSH
9940: LD_INT 750
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: LD_INT 3
9949: PUSH
9950: LD_INT 54
9952: PUSH
9953: EMPTY
9954: LIST
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: PPUSH
9966: CALL_OW 70
9970: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9971: LD_ADDR_VAR 0 6
9975: PUSH
9976: LD_VAR 0 3
9980: PPUSH
9981: LD_INT 22
9983: PUSH
9984: LD_VAR 0 1
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 21
9995: PUSH
9996: LD_INT 3
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: LD_INT 3
10005: PUSH
10006: LD_INT 24
10008: PUSH
10009: LD_INT 1000
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: LIST
10024: PUSH
10025: EMPTY
10026: LIST
10027: PPUSH
10028: CALL_OW 70
10032: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
10033: LD_VAR 0 6
10037: NOT
10038: PUSH
10039: LD_INT 22
10041: PUSH
10042: LD_VAR 0 1
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: LD_INT 25
10053: PUSH
10054: LD_INT 2
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PUSH
10061: LD_INT 24
10063: PUSH
10064: LD_INT 250
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: LIST
10075: PPUSH
10076: CALL_OW 69
10080: NOT
10081: AND
10082: IFFALSE 10086
// exit ;
10084: GO 10268
// if buildings_list > 0 and engineerOkInside then
10086: LD_VAR 0 6
10090: PUSH
10091: LD_INT 0
10093: GREATER
10094: PUSH
10095: LD_VAR 0 8
10099: AND
10100: IFFALSE 10111
// ComExitBuilding ( engineerOkInside ) ;
10102: LD_VAR 0 8
10106: PPUSH
10107: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
10111: LD_VAR 0 6
10115: PUSH
10116: LD_INT 0
10118: GREATER
10119: PUSH
10120: LD_VAR 0 9
10124: PUSH
10125: LD_INT 0
10127: GREATER
10128: AND
10129: IFFALSE 10149
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
10131: LD_VAR 0 9
10135: PPUSH
10136: LD_VAR 0 6
10140: PUSH
10141: LD_INT 1
10143: ARRAY
10144: PPUSH
10145: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
10149: LD_VAR 0 6
10153: PUSH
10154: LD_INT 0
10156: EQUAL
10157: PUSH
10158: LD_VAR 0 4
10162: PUSH
10163: LD_INT 0
10165: EQUAL
10166: AND
10167: PUSH
10168: LD_VAR 0 9
10172: PUSH
10173: LD_INT 0
10175: GREATER
10176: AND
10177: IFFALSE 10193
// ComEnterUnit ( engineerOkOutside , building ) ;
10179: LD_VAR 0 9
10183: PPUSH
10184: LD_VAR 0 2
10188: PPUSH
10189: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10193: LD_VAR 0 9
10197: PUSH
10198: LD_INT 0
10200: GREATER
10201: PUSH
10202: LD_VAR 0 6
10206: PUSH
10207: LD_INT 0
10209: EQUAL
10210: AND
10211: PUSH
10212: LD_VAR 0 4
10216: PUSH
10217: LD_INT 0
10219: GREATER
10220: AND
10221: IFFALSE 10268
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10223: LD_VAR 0 9
10227: PPUSH
10228: LD_VAR 0 4
10232: PUSH
10233: LD_INT 1
10235: ARRAY
10236: PPUSH
10237: LD_VAR 0 4
10241: PUSH
10242: LD_INT 2
10244: ARRAY
10245: PPUSH
10246: LD_VAR 0 4
10250: PUSH
10251: LD_INT 3
10253: ARRAY
10254: PPUSH
10255: LD_VAR 0 4
10259: PUSH
10260: LD_INT 4
10262: ARRAY
10263: PPUSH
10264: CALL_OW 145
// end ;
10268: LD_VAR 0 5
10272: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10273: LD_INT 0
10275: PPUSH
10276: PPUSH
10277: PPUSH
10278: PPUSH
10279: PPUSH
10280: PPUSH
10281: PPUSH
10282: PPUSH
10283: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
10284: LD_ADDR_VAR 0 6
10288: PUSH
10289: LD_INT 22
10291: PUSH
10292: LD_VAR 0 1
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 25
10303: PUSH
10304: LD_INT 4
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 23
10313: PUSH
10314: LD_INT 2
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 24
10323: PUSH
10324: LD_INT 251
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: PPUSH
10337: CALL_OW 69
10341: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
10342: LD_ADDR_VAR 0 7
10346: PUSH
10347: LD_VAR 0 3
10351: PPUSH
10352: LD_INT 22
10354: PUSH
10355: LD_VAR 0 1
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 23
10366: PUSH
10367: LD_INT 2
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 25
10376: PUSH
10377: LD_INT 4
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 50
10386: PUSH
10387: EMPTY
10388: LIST
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: PPUSH
10396: CALL_OW 70
10400: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10401: LD_ADDR_VAR 0 10
10405: PUSH
10406: LD_VAR 0 3
10410: PPUSH
10411: LD_INT 22
10413: PUSH
10414: LD_VAR 0 1
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PUSH
10423: LD_INT 21
10425: PUSH
10426: LD_INT 1
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: PUSH
10433: LD_INT 3
10435: PUSH
10436: LD_INT 25
10438: PUSH
10439: LD_INT 3
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PUSH
10450: LD_INT 3
10452: PUSH
10453: LD_INT 24
10455: PUSH
10456: LD_INT 750
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: PPUSH
10473: CALL_OW 70
10477: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10478: LD_ADDR_VAR 0 11
10482: PUSH
10483: LD_VAR 0 2
10487: PPUSH
10488: LD_INT 22
10490: PUSH
10491: LD_VAR 0 1
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: PUSH
10500: LD_INT 21
10502: PUSH
10503: LD_INT 1
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 3
10512: PUSH
10513: LD_INT 25
10515: PUSH
10516: LD_INT 3
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 3
10529: PUSH
10530: LD_INT 24
10532: PUSH
10533: LD_INT 1000
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: PPUSH
10550: CALL_OW 70
10554: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10555: LD_VAR 0 10
10559: NOT
10560: PUSH
10561: LD_VAR 0 11
10565: NOT
10566: AND
10567: PUSH
10568: LD_VAR 0 6
10572: NOT
10573: AND
10574: IFFALSE 10578
// exit ;
10576: GO 10812
// if damageUnits > 0 and sci_list > 0 then
10578: LD_VAR 0 10
10582: PUSH
10583: LD_INT 0
10585: GREATER
10586: PUSH
10587: LD_VAR 0 6
10591: PUSH
10592: LD_INT 0
10594: GREATER
10595: AND
10596: IFFALSE 10612
// ComMoveToArea ( damageUnits , healArea ) ;
10598: LD_VAR 0 10
10602: PPUSH
10603: LD_VAR 0 2
10607: PPUSH
10608: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
10612: LD_VAR 0 11
10616: PUSH
10617: LD_INT 0
10619: GREATER
10620: PUSH
10621: LD_VAR 0 6
10625: PUSH
10626: LD_INT 0
10628: GREATER
10629: AND
10630: IFFALSE 10641
// ComExitBuilding ( sci_list ) ;
10632: LD_VAR 0 6
10636: PPUSH
10637: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
10641: LD_VAR 0 11
10645: PUSH
10646: LD_INT 0
10648: GREATER
10649: PUSH
10650: LD_VAR 0 7
10654: PUSH
10655: LD_INT 0
10657: GREATER
10658: AND
10659: IFFALSE 10679
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10661: LD_VAR 0 7
10665: PPUSH
10666: LD_VAR 0 11
10670: PUSH
10671: LD_INT 1
10673: ARRAY
10674: PPUSH
10675: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10679: LD_VAR 0 10
10683: PUSH
10684: LD_INT 0
10686: EQUAL
10687: PUSH
10688: LD_VAR 0 11
10692: PUSH
10693: LD_INT 0
10695: EQUAL
10696: AND
10697: PUSH
10698: LD_VAR 0 7
10702: PUSH
10703: LD_INT 0
10705: GREATER
10706: AND
10707: IFFALSE 10812
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10709: LD_ADDR_VAR 0 12
10713: PUSH
10714: LD_INT 22
10716: PUSH
10717: LD_VAR 0 1
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: LD_INT 21
10728: PUSH
10729: LD_INT 3
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 30
10738: PUSH
10739: LD_INT 8
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: LIST
10750: PPUSH
10751: CALL_OW 69
10755: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10756: LD_ADDR_VAR 0 13
10760: PUSH
10761: LD_INT 1
10763: PPUSH
10764: LD_VAR 0 12
10768: PPUSH
10769: CALL_OW 12
10773: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10774: LD_VAR 0 7
10778: PPUSH
10779: LD_INT 3
10781: PUSH
10782: LD_INT 60
10784: PUSH
10785: EMPTY
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PPUSH
10792: CALL_OW 72
10796: PPUSH
10797: LD_VAR 0 12
10801: PUSH
10802: LD_VAR 0 13
10806: ARRAY
10807: PPUSH
10808: CALL_OW 120
// end ; end ;
10812: LD_VAR 0 5
10816: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
10817: LD_INT 0
10819: PPUSH
10820: PPUSH
10821: PPUSH
10822: PPUSH
10823: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
10824: LD_ADDR_VAR 0 6
10828: PUSH
10829: LD_INT 22
10831: PUSH
10832: LD_VAR 0 1
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 2
10843: PUSH
10844: LD_INT 30
10846: PUSH
10847: LD_INT 31
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PUSH
10854: LD_INT 30
10856: PUSH
10857: LD_INT 32
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 30
10866: PUSH
10867: LD_INT 33
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: LD_INT 30
10876: PUSH
10877: LD_INT 4
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PUSH
10884: LD_INT 30
10886: PUSH
10887: LD_INT 5
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PPUSH
10906: CALL_OW 69
10910: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10911: LD_ADDR_VAR 0 7
10915: PUSH
10916: LD_INT 22
10918: PUSH
10919: LD_VAR 0 2
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 21
10930: PUSH
10931: LD_INT 3
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 58
10940: PUSH
10941: EMPTY
10942: LIST
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: LIST
10948: PPUSH
10949: CALL_OW 69
10953: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
10954: LD_VAR 0 6
10958: PUSH
10959: LD_INT 0
10961: GREATER
10962: PUSH
10963: LD_VAR 0 7
10967: PUSH
10968: LD_INT 0
10970: GREATER
10971: AND
10972: IFFALSE 11042
// begin for i in turretsList do
10974: LD_ADDR_VAR 0 4
10978: PUSH
10979: LD_VAR 0 6
10983: PUSH
10984: FOR_IN
10985: IFFALSE 11040
// begin for j in enemyBuildings do
10987: LD_ADDR_VAR 0 5
10991: PUSH
10992: LD_VAR 0 7
10996: PUSH
10997: FOR_IN
10998: IFFALSE 11036
// begin if GetDistUnits ( i , j ) < 20 then
11000: LD_VAR 0 4
11004: PPUSH
11005: LD_VAR 0 5
11009: PPUSH
11010: CALL_OW 296
11014: PUSH
11015: LD_INT 20
11017: LESS
11018: IFFALSE 11034
// begin ComAttackUnit ( i , j ) ;
11020: LD_VAR 0 4
11024: PPUSH
11025: LD_VAR 0 5
11029: PPUSH
11030: CALL_OW 115
// end ; end ;
11034: GO 10997
11036: POP
11037: POP
// end ;
11038: GO 10984
11040: POP
11041: POP
// end ; end ;
11042: LD_VAR 0 3
11046: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
11047: LD_INT 0
11049: PPUSH
11050: PPUSH
11051: PPUSH
11052: PPUSH
11053: PPUSH
11054: PPUSH
11055: PPUSH
11056: PPUSH
11057: PPUSH
11058: PPUSH
11059: PPUSH
// for i = 1 to medicCount do
11060: LD_ADDR_VAR 0 14
11064: PUSH
11065: DOUBLE
11066: LD_INT 1
11068: DEC
11069: ST_TO_ADDR
11070: LD_VAR 0 7
11074: PUSH
11075: FOR_TO
11076: IFFALSE 11158
// begin uc_side = side ;
11078: LD_ADDR_OWVAR 20
11082: PUSH
11083: LD_VAR 0 1
11087: ST_TO_ADDR
// uc_nation = nation ;
11088: LD_ADDR_OWVAR 21
11092: PUSH
11093: LD_VAR 0 2
11097: ST_TO_ADDR
// hc_name =  ;
11098: LD_ADDR_OWVAR 26
11102: PUSH
11103: LD_STRING 
11105: ST_TO_ADDR
// hc_gallery =  ;
11106: LD_ADDR_OWVAR 33
11110: PUSH
11111: LD_STRING 
11113: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
11114: LD_INT 0
11116: PPUSH
11117: LD_INT 4
11119: PPUSH
11120: LD_VAR 0 8
11124: PPUSH
11125: CALL_OW 380
// un = CreateHuman ;
11129: LD_ADDR_VAR 0 16
11133: PUSH
11134: CALL_OW 44
11138: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11139: LD_VAR 0 16
11143: PPUSH
11144: LD_VAR 0 9
11148: PPUSH
11149: LD_INT 0
11151: PPUSH
11152: CALL_OW 49
// end ;
11156: GO 11075
11158: POP
11159: POP
// for i = 1 to soldierCount do
11160: LD_ADDR_VAR 0 14
11164: PUSH
11165: DOUBLE
11166: LD_INT 1
11168: DEC
11169: ST_TO_ADDR
11170: LD_VAR 0 3
11174: PUSH
11175: FOR_TO
11176: IFFALSE 11258
// begin uc_side = side ;
11178: LD_ADDR_OWVAR 20
11182: PUSH
11183: LD_VAR 0 1
11187: ST_TO_ADDR
// uc_nation = nation ;
11188: LD_ADDR_OWVAR 21
11192: PUSH
11193: LD_VAR 0 2
11197: ST_TO_ADDR
// hc_name =  ;
11198: LD_ADDR_OWVAR 26
11202: PUSH
11203: LD_STRING 
11205: ST_TO_ADDR
// hc_gallery =  ;
11206: LD_ADDR_OWVAR 33
11210: PUSH
11211: LD_STRING 
11213: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
11214: LD_INT 0
11216: PPUSH
11217: LD_INT 1
11219: PPUSH
11220: LD_VAR 0 8
11224: PPUSH
11225: CALL_OW 380
// un = CreateHuman ;
11229: LD_ADDR_VAR 0 16
11233: PUSH
11234: CALL_OW 44
11238: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11239: LD_VAR 0 16
11243: PPUSH
11244: LD_VAR 0 9
11248: PPUSH
11249: LD_INT 0
11251: PPUSH
11252: CALL_OW 49
// end ;
11256: GO 11175
11258: POP
11259: POP
// for i = 1 to sniperCount do
11260: LD_ADDR_VAR 0 14
11264: PUSH
11265: DOUBLE
11266: LD_INT 1
11268: DEC
11269: ST_TO_ADDR
11270: LD_VAR 0 4
11274: PUSH
11275: FOR_TO
11276: IFFALSE 11358
// begin uc_side = side ;
11278: LD_ADDR_OWVAR 20
11282: PUSH
11283: LD_VAR 0 1
11287: ST_TO_ADDR
// uc_nation = nation ;
11288: LD_ADDR_OWVAR 21
11292: PUSH
11293: LD_VAR 0 2
11297: ST_TO_ADDR
// hc_name =  ;
11298: LD_ADDR_OWVAR 26
11302: PUSH
11303: LD_STRING 
11305: ST_TO_ADDR
// hc_gallery =  ;
11306: LD_ADDR_OWVAR 33
11310: PUSH
11311: LD_STRING 
11313: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
11314: LD_INT 0
11316: PPUSH
11317: LD_INT 5
11319: PPUSH
11320: LD_VAR 0 8
11324: PPUSH
11325: CALL_OW 380
// un = CreateHuman ;
11329: LD_ADDR_VAR 0 16
11333: PUSH
11334: CALL_OW 44
11338: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11339: LD_VAR 0 16
11343: PPUSH
11344: LD_VAR 0 9
11348: PPUSH
11349: LD_INT 0
11351: PPUSH
11352: CALL_OW 49
// end ;
11356: GO 11275
11358: POP
11359: POP
// for i = 1 to bazookCount do
11360: LD_ADDR_VAR 0 14
11364: PUSH
11365: DOUBLE
11366: LD_INT 1
11368: DEC
11369: ST_TO_ADDR
11370: LD_VAR 0 5
11374: PUSH
11375: FOR_TO
11376: IFFALSE 11458
// begin uc_side = side ;
11378: LD_ADDR_OWVAR 20
11382: PUSH
11383: LD_VAR 0 1
11387: ST_TO_ADDR
// uc_nation = nation ;
11388: LD_ADDR_OWVAR 21
11392: PUSH
11393: LD_VAR 0 2
11397: ST_TO_ADDR
// hc_name =  ;
11398: LD_ADDR_OWVAR 26
11402: PUSH
11403: LD_STRING 
11405: ST_TO_ADDR
// hc_gallery =  ;
11406: LD_ADDR_OWVAR 33
11410: PUSH
11411: LD_STRING 
11413: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11414: LD_INT 0
11416: PPUSH
11417: LD_INT 9
11419: PPUSH
11420: LD_VAR 0 8
11424: PPUSH
11425: CALL_OW 380
// un = CreateHuman ;
11429: LD_ADDR_VAR 0 16
11433: PUSH
11434: CALL_OW 44
11438: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11439: LD_VAR 0 16
11443: PPUSH
11444: LD_VAR 0 9
11448: PPUSH
11449: LD_INT 0
11451: PPUSH
11452: CALL_OW 49
// end ;
11456: GO 11375
11458: POP
11459: POP
// for i = 1 to mortalCount do
11460: LD_ADDR_VAR 0 14
11464: PUSH
11465: DOUBLE
11466: LD_INT 1
11468: DEC
11469: ST_TO_ADDR
11470: LD_VAR 0 6
11474: PUSH
11475: FOR_TO
11476: IFFALSE 11558
// begin uc_side = side ;
11478: LD_ADDR_OWVAR 20
11482: PUSH
11483: LD_VAR 0 1
11487: ST_TO_ADDR
// uc_nation = nation ;
11488: LD_ADDR_OWVAR 21
11492: PUSH
11493: LD_VAR 0 2
11497: ST_TO_ADDR
// hc_name =  ;
11498: LD_ADDR_OWVAR 26
11502: PUSH
11503: LD_STRING 
11505: ST_TO_ADDR
// hc_gallery =  ;
11506: LD_ADDR_OWVAR 33
11510: PUSH
11511: LD_STRING 
11513: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11514: LD_INT 0
11516: PPUSH
11517: LD_INT 8
11519: PPUSH
11520: LD_VAR 0 8
11524: PPUSH
11525: CALL_OW 380
// un = CreateHuman ;
11529: LD_ADDR_VAR 0 16
11533: PUSH
11534: CALL_OW 44
11538: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11539: LD_VAR 0 16
11543: PPUSH
11544: LD_VAR 0 9
11548: PPUSH
11549: LD_INT 0
11551: PPUSH
11552: CALL_OW 49
// end ;
11556: GO 11475
11558: POP
11559: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11560: LD_ADDR_VAR 0 19
11564: PUSH
11565: LD_INT 22
11567: PUSH
11568: LD_VAR 0 1
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: LD_INT 2
11579: PUSH
11580: LD_INT 25
11582: PUSH
11583: LD_INT 1
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: PUSH
11590: LD_INT 25
11592: PUSH
11593: LD_INT 5
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 25
11602: PUSH
11603: LD_INT 8
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 25
11612: PUSH
11613: LD_INT 9
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PPUSH
11631: CALL_OW 69
11635: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11636: LD_ADDR_VAR 0 18
11640: PUSH
11641: LD_INT 22
11643: PUSH
11644: LD_VAR 0 1
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 25
11655: PUSH
11656: LD_INT 4
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PPUSH
11667: CALL_OW 69
11671: ST_TO_ADDR
// for i in medic_list do
11672: LD_ADDR_VAR 0 14
11676: PUSH
11677: LD_VAR 0 18
11681: PUSH
11682: FOR_IN
11683: IFFALSE 11701
// ComMoveToArea ( i , healArea ) ;
11685: LD_VAR 0 14
11689: PPUSH
11690: LD_VAR 0 10
11694: PPUSH
11695: CALL_OW 113
11699: GO 11682
11701: POP
11702: POP
// if strategy = 1 then
11703: LD_VAR 0 12
11707: PUSH
11708: LD_INT 1
11710: EQUAL
11711: IFFALSE 12257
// begin repeat wait ( 0 0$3 ) ;
11713: LD_INT 105
11715: PPUSH
11716: CALL_OW 67
// for i in soldiersOK_list do
11720: LD_ADDR_VAR 0 14
11724: PUSH
11725: LD_VAR 0 19
11729: PUSH
11730: FOR_IN
11731: IFFALSE 11795
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11733: LD_VAR 0 14
11737: PPUSH
11738: LD_INT 91
11740: PPUSH
11741: LD_INT 63
11743: PPUSH
11744: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
11748: LD_VAR 0 14
11752: PPUSH
11753: LD_INT 101
11755: PPUSH
11756: LD_INT 53
11758: PPUSH
11759: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
11763: LD_VAR 0 14
11767: PPUSH
11768: LD_INT 75
11770: PPUSH
11771: LD_INT 23
11773: PPUSH
11774: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
11778: LD_VAR 0 14
11782: PPUSH
11783: LD_INT 78
11785: PPUSH
11786: LD_INT 8
11788: PPUSH
11789: CALL_OW 174
// end ;
11793: GO 11730
11795: POP
11796: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
11797: LD_INT 12
11799: PPUSH
11800: LD_INT 22
11802: PUSH
11803: LD_VAR 0 1
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PPUSH
11812: CALL_OW 70
11816: PUSH
11817: LD_INT 2
11819: GREATER
11820: IFFALSE 11713
// repeat wait ( 0 0$1 ) ;
11822: LD_INT 35
11824: PPUSH
11825: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11829: LD_ADDR_VAR 0 17
11833: PUSH
11834: LD_INT 22
11836: PUSH
11837: LD_VAR 0 1
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 1
11848: PUSH
11849: LD_INT 3
11851: PUSH
11852: LD_INT 24
11854: PUSH
11855: LD_INT 550
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 24
11868: PUSH
11869: LD_INT 250
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: LIST
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PPUSH
11885: CALL_OW 69
11889: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11890: LD_ADDR_VAR 0 19
11894: PUSH
11895: LD_INT 22
11897: PUSH
11898: LD_VAR 0 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 2
11909: PUSH
11910: LD_INT 25
11912: PUSH
11913: LD_INT 1
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: LD_INT 25
11922: PUSH
11923: LD_INT 5
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 25
11932: PUSH
11933: LD_INT 8
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 25
11942: PUSH
11943: LD_INT 9
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: PUSH
11957: LD_INT 24
11959: PUSH
11960: LD_INT 1000
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: LIST
11971: PPUSH
11972: CALL_OW 69
11976: ST_TO_ADDR
// if medicCount > 0 then
11977: LD_VAR 0 7
11981: PUSH
11982: LD_INT 0
11984: GREATER
11985: IFFALSE 12059
// begin if damageUnit_list > 0 then
11987: LD_VAR 0 17
11991: PUSH
11992: LD_INT 0
11994: GREATER
11995: IFFALSE 12059
// begin for i in damageUnit_list do
11997: LD_ADDR_VAR 0 14
12001: PUSH
12002: LD_VAR 0 17
12006: PUSH
12007: FOR_IN
12008: IFFALSE 12057
// begin ComMoveToArea ( i , healArea ) ;
12010: LD_VAR 0 14
12014: PPUSH
12015: LD_VAR 0 10
12019: PPUSH
12020: CALL_OW 113
// for j in medic_list do
12024: LD_ADDR_VAR 0 15
12028: PUSH
12029: LD_VAR 0 18
12033: PUSH
12034: FOR_IN
12035: IFFALSE 12053
// AddComHeal ( j , i ) ;
12037: LD_VAR 0 15
12041: PPUSH
12042: LD_VAR 0 14
12046: PPUSH
12047: CALL_OW 188
12051: GO 12034
12053: POP
12054: POP
// end ;
12055: GO 12007
12057: POP
12058: POP
// end ; end ; for i in soldiersOK_list do
12059: LD_ADDR_VAR 0 14
12063: PUSH
12064: LD_VAR 0 19
12068: PUSH
12069: FOR_IN
12070: IFFALSE 12246
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12072: LD_ADDR_VAR 0 22
12076: PUSH
12077: LD_INT 22
12079: PUSH
12080: LD_VAR 0 11
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PPUSH
12089: CALL_OW 69
12093: PPUSH
12094: LD_VAR 0 14
12098: PPUSH
12099: CALL_OW 74
12103: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12104: LD_ADDR_VAR 0 23
12108: PUSH
12109: LD_INT 22
12111: PUSH
12112: LD_VAR 0 11
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 2
12123: PUSH
12124: LD_INT 59
12126: PUSH
12127: EMPTY
12128: LIST
12129: PUSH
12130: LD_INT 21
12132: PUSH
12133: LD_INT 1
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: LD_INT 21
12142: PUSH
12143: LD_INT 2
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: PPUSH
12163: CALL_OW 69
12167: PPUSH
12168: LD_VAR 0 14
12172: PPUSH
12173: CALL_OW 74
12177: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12178: LD_VAR 0 14
12182: PPUSH
12183: LD_VAR 0 22
12187: PPUSH
12188: CALL_OW 296
12192: PUSH
12193: LD_INT 6
12195: PLUS
12196: PUSH
12197: LD_VAR 0 14
12201: PPUSH
12202: LD_VAR 0 23
12206: PPUSH
12207: CALL_OW 296
12211: LESS
12212: IFFALSE 12230
// begin ComAttackUnit ( i , target1 ) ;
12214: LD_VAR 0 14
12218: PPUSH
12219: LD_VAR 0 22
12223: PPUSH
12224: CALL_OW 115
// end else
12228: GO 12244
// begin ComAttackUnit ( i , target2 ) ;
12230: LD_VAR 0 14
12234: PPUSH
12235: LD_VAR 0 23
12239: PPUSH
12240: CALL_OW 115
// end ; end ;
12244: GO 12069
12246: POP
12247: POP
// until soldiersOK_list = [ ] ;
12248: LD_VAR 0 19
12252: PUSH
12253: EMPTY
12254: EQUAL
12255: IFFALSE 11822
// end ; if strategy = 2 then
12257: LD_VAR 0 12
12261: PUSH
12262: LD_INT 2
12264: EQUAL
12265: IFFALSE 12781
// begin repeat wait ( 0 0$1 ) ;
12267: LD_INT 35
12269: PPUSH
12270: CALL_OW 67
// for i in soldiersOK_list do
12274: LD_ADDR_VAR 0 14
12278: PUSH
12279: LD_VAR 0 19
12283: PUSH
12284: FOR_IN
12285: IFFALSE 12319
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
12287: LD_VAR 0 14
12291: PPUSH
12292: LD_INT 91
12294: PPUSH
12295: LD_INT 63
12297: PPUSH
12298: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
12302: LD_VAR 0 14
12306: PPUSH
12307: LD_INT 75
12309: PPUSH
12310: LD_INT 33
12312: PPUSH
12313: CALL_OW 174
// end ;
12317: GO 12284
12319: POP
12320: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
12321: LD_INT 13
12323: PPUSH
12324: LD_INT 22
12326: PUSH
12327: LD_VAR 0 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PPUSH
12336: CALL_OW 70
12340: PUSH
12341: LD_INT 2
12343: GREATER
12344: IFFALSE 12267
// repeat wait ( 0 0$3 ) ;
12346: LD_INT 105
12348: PPUSH
12349: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12353: LD_ADDR_VAR 0 17
12357: PUSH
12358: LD_INT 22
12360: PUSH
12361: LD_VAR 0 1
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: LD_INT 1
12372: PUSH
12373: LD_INT 3
12375: PUSH
12376: LD_INT 24
12378: PUSH
12379: LD_INT 550
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: LD_INT 24
12392: PUSH
12393: LD_INT 250
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PPUSH
12409: CALL_OW 69
12413: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12414: LD_ADDR_VAR 0 19
12418: PUSH
12419: LD_INT 22
12421: PUSH
12422: LD_VAR 0 1
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 2
12433: PUSH
12434: LD_INT 25
12436: PUSH
12437: LD_INT 1
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 25
12446: PUSH
12447: LD_INT 5
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 25
12456: PUSH
12457: LD_INT 8
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 25
12466: PUSH
12467: LD_INT 9
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 24
12483: PUSH
12484: LD_INT 1000
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: LIST
12495: PPUSH
12496: CALL_OW 69
12500: ST_TO_ADDR
// if medicCount > 0 then
12501: LD_VAR 0 7
12505: PUSH
12506: LD_INT 0
12508: GREATER
12509: IFFALSE 12583
// begin if damageUnit_list > 0 then
12511: LD_VAR 0 17
12515: PUSH
12516: LD_INT 0
12518: GREATER
12519: IFFALSE 12583
// begin for i in damageUnit_list do
12521: LD_ADDR_VAR 0 14
12525: PUSH
12526: LD_VAR 0 17
12530: PUSH
12531: FOR_IN
12532: IFFALSE 12581
// begin ComMoveToArea ( i , healArea ) ;
12534: LD_VAR 0 14
12538: PPUSH
12539: LD_VAR 0 10
12543: PPUSH
12544: CALL_OW 113
// for j in medic_list do
12548: LD_ADDR_VAR 0 15
12552: PUSH
12553: LD_VAR 0 18
12557: PUSH
12558: FOR_IN
12559: IFFALSE 12577
// AddComHeal ( j , i ) ;
12561: LD_VAR 0 15
12565: PPUSH
12566: LD_VAR 0 14
12570: PPUSH
12571: CALL_OW 188
12575: GO 12558
12577: POP
12578: POP
// end ;
12579: GO 12531
12581: POP
12582: POP
// end ; end ; for i in soldiersOK_list do
12583: LD_ADDR_VAR 0 14
12587: PUSH
12588: LD_VAR 0 19
12592: PUSH
12593: FOR_IN
12594: IFFALSE 12770
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12596: LD_ADDR_VAR 0 22
12600: PUSH
12601: LD_INT 22
12603: PUSH
12604: LD_VAR 0 11
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PPUSH
12613: CALL_OW 69
12617: PPUSH
12618: LD_VAR 0 14
12622: PPUSH
12623: CALL_OW 74
12627: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12628: LD_ADDR_VAR 0 23
12632: PUSH
12633: LD_INT 22
12635: PUSH
12636: LD_VAR 0 11
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PUSH
12645: LD_INT 2
12647: PUSH
12648: LD_INT 59
12650: PUSH
12651: EMPTY
12652: LIST
12653: PUSH
12654: LD_INT 21
12656: PUSH
12657: LD_INT 1
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PUSH
12664: LD_INT 21
12666: PUSH
12667: LD_INT 2
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: EMPTY
12685: LIST
12686: PPUSH
12687: CALL_OW 69
12691: PPUSH
12692: LD_VAR 0 14
12696: PPUSH
12697: CALL_OW 74
12701: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12702: LD_VAR 0 14
12706: PPUSH
12707: LD_VAR 0 22
12711: PPUSH
12712: CALL_OW 296
12716: PUSH
12717: LD_INT 6
12719: PLUS
12720: PUSH
12721: LD_VAR 0 14
12725: PPUSH
12726: LD_VAR 0 23
12730: PPUSH
12731: CALL_OW 296
12735: LESS
12736: IFFALSE 12754
// begin ComAttackUnit ( i , target1 ) ;
12738: LD_VAR 0 14
12742: PPUSH
12743: LD_VAR 0 22
12747: PPUSH
12748: CALL_OW 115
// end else
12752: GO 12768
// begin ComAttackUnit ( i , target2 ) ;
12754: LD_VAR 0 14
12758: PPUSH
12759: LD_VAR 0 23
12763: PPUSH
12764: CALL_OW 115
// end ; end ;
12768: GO 12593
12770: POP
12771: POP
// until soldiersOK_list = [ ] ;
12772: LD_VAR 0 19
12776: PUSH
12777: EMPTY
12778: EQUAL
12779: IFFALSE 12346
// end ; if strategy = 3 then
12781: LD_VAR 0 12
12785: PUSH
12786: LD_INT 3
12788: EQUAL
12789: IFFALSE 13335
// begin repeat wait ( 0 0$3 ) ;
12791: LD_INT 105
12793: PPUSH
12794: CALL_OW 67
// for i in soldiersOK_list do
12798: LD_ADDR_VAR 0 14
12802: PUSH
12803: LD_VAR 0 19
12807: PUSH
12808: FOR_IN
12809: IFFALSE 12873
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
12811: LD_VAR 0 14
12815: PPUSH
12816: LD_INT 63
12818: PPUSH
12819: LD_INT 71
12821: PPUSH
12822: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
12826: LD_VAR 0 14
12830: PPUSH
12831: LD_INT 35
12833: PPUSH
12834: LD_INT 44
12836: PPUSH
12837: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
12841: LD_VAR 0 14
12845: PPUSH
12846: LD_INT 23
12848: PPUSH
12849: LD_INT 18
12851: PPUSH
12852: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
12856: LD_VAR 0 14
12860: PPUSH
12861: LD_INT 26
12863: PPUSH
12864: LD_INT 12
12866: PPUSH
12867: CALL_OW 174
// end ;
12871: GO 12808
12873: POP
12874: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
12875: LD_INT 14
12877: PPUSH
12878: LD_INT 22
12880: PUSH
12881: LD_VAR 0 1
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PPUSH
12890: CALL_OW 70
12894: PUSH
12895: LD_INT 2
12897: GREATER
12898: IFFALSE 12791
// repeat wait ( 0 0$1 ) ;
12900: LD_INT 35
12902: PPUSH
12903: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12907: LD_ADDR_VAR 0 17
12911: PUSH
12912: LD_INT 22
12914: PUSH
12915: LD_VAR 0 1
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: LD_INT 1
12926: PUSH
12927: LD_INT 3
12929: PUSH
12930: LD_INT 24
12932: PUSH
12933: LD_INT 550
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 24
12946: PUSH
12947: LD_INT 250
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 69
12967: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12968: LD_ADDR_VAR 0 19
12972: PUSH
12973: LD_INT 22
12975: PUSH
12976: LD_VAR 0 1
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PUSH
12985: LD_INT 2
12987: PUSH
12988: LD_INT 25
12990: PUSH
12991: LD_INT 1
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 25
13000: PUSH
13001: LD_INT 5
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: LD_INT 25
13010: PUSH
13011: LD_INT 8
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: LD_INT 25
13020: PUSH
13021: LD_INT 9
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: PUSH
13035: LD_INT 24
13037: PUSH
13038: LD_INT 1000
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: LIST
13049: PPUSH
13050: CALL_OW 69
13054: ST_TO_ADDR
// if medicCount > 0 then
13055: LD_VAR 0 7
13059: PUSH
13060: LD_INT 0
13062: GREATER
13063: IFFALSE 13137
// begin if damageUnit_list > 0 then
13065: LD_VAR 0 17
13069: PUSH
13070: LD_INT 0
13072: GREATER
13073: IFFALSE 13137
// begin for i in damageUnit_list do
13075: LD_ADDR_VAR 0 14
13079: PUSH
13080: LD_VAR 0 17
13084: PUSH
13085: FOR_IN
13086: IFFALSE 13135
// begin ComMoveToArea ( i , healArea ) ;
13088: LD_VAR 0 14
13092: PPUSH
13093: LD_VAR 0 10
13097: PPUSH
13098: CALL_OW 113
// for j in medic_list do
13102: LD_ADDR_VAR 0 15
13106: PUSH
13107: LD_VAR 0 18
13111: PUSH
13112: FOR_IN
13113: IFFALSE 13131
// AddComHeal ( j , i ) ;
13115: LD_VAR 0 15
13119: PPUSH
13120: LD_VAR 0 14
13124: PPUSH
13125: CALL_OW 188
13129: GO 13112
13131: POP
13132: POP
// end ;
13133: GO 13085
13135: POP
13136: POP
// end ; end ; for i in soldiersOK_list do
13137: LD_ADDR_VAR 0 14
13141: PUSH
13142: LD_VAR 0 19
13146: PUSH
13147: FOR_IN
13148: IFFALSE 13324
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13150: LD_ADDR_VAR 0 22
13154: PUSH
13155: LD_INT 22
13157: PUSH
13158: LD_VAR 0 11
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PPUSH
13167: CALL_OW 69
13171: PPUSH
13172: LD_VAR 0 14
13176: PPUSH
13177: CALL_OW 74
13181: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13182: LD_ADDR_VAR 0 23
13186: PUSH
13187: LD_INT 22
13189: PUSH
13190: LD_VAR 0 11
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 2
13201: PUSH
13202: LD_INT 59
13204: PUSH
13205: EMPTY
13206: LIST
13207: PUSH
13208: LD_INT 21
13210: PUSH
13211: LD_INT 1
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: LD_INT 21
13220: PUSH
13221: LD_INT 2
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: EMPTY
13239: LIST
13240: PPUSH
13241: CALL_OW 69
13245: PPUSH
13246: LD_VAR 0 14
13250: PPUSH
13251: CALL_OW 74
13255: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13256: LD_VAR 0 14
13260: PPUSH
13261: LD_VAR 0 22
13265: PPUSH
13266: CALL_OW 296
13270: PUSH
13271: LD_INT 6
13273: PLUS
13274: PUSH
13275: LD_VAR 0 14
13279: PPUSH
13280: LD_VAR 0 23
13284: PPUSH
13285: CALL_OW 296
13289: LESS
13290: IFFALSE 13308
// begin ComAttackUnit ( i , target1 ) ;
13292: LD_VAR 0 14
13296: PPUSH
13297: LD_VAR 0 22
13301: PPUSH
13302: CALL_OW 115
// end else
13306: GO 13322
// begin ComAttackUnit ( i , target2 ) ;
13308: LD_VAR 0 14
13312: PPUSH
13313: LD_VAR 0 23
13317: PPUSH
13318: CALL_OW 115
// end ; end ;
13322: GO 13147
13324: POP
13325: POP
// until soldiersOK_list = [ ] ;
13326: LD_VAR 0 19
13330: PUSH
13331: EMPTY
13332: EQUAL
13333: IFFALSE 12900
// end ; end ;
13335: LD_VAR 0 13
13339: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13340: LD_INT 0
13342: PPUSH
13343: PPUSH
13344: PPUSH
13345: PPUSH
13346: PPUSH
13347: PPUSH
13348: PPUSH
13349: PPUSH
13350: PPUSH
13351: PPUSH
13352: PPUSH
// amChassisTab = [ ] ;
13353: LD_ADDR_VAR 0 19
13357: PUSH
13358: EMPTY
13359: ST_TO_ADDR
// arChassisTab = [ ] ;
13360: LD_ADDR_VAR 0 18
13364: PUSH
13365: EMPTY
13366: ST_TO_ADDR
// ruChassisTab = [ ] ;
13367: LD_ADDR_VAR 0 17
13371: PUSH
13372: EMPTY
13373: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13374: LD_INT 35
13376: PPUSH
13377: CALL_OW 67
// if nation = 1 then
13381: LD_VAR 0 5
13385: PUSH
13386: LD_INT 1
13388: EQUAL
13389: IFFALSE 13880
// begin uc_side = side ;
13391: LD_ADDR_OWVAR 20
13395: PUSH
13396: LD_VAR 0 2
13400: ST_TO_ADDR
// uc_nation = nation ;
13401: LD_ADDR_OWVAR 21
13405: PUSH
13406: LD_VAR 0 5
13410: ST_TO_ADDR
// vc_engine = vehengine ;
13411: LD_ADDR_OWVAR 39
13415: PUSH
13416: LD_VAR 0 6
13420: ST_TO_ADDR
// vc_control = vehcontrol ;
13421: LD_ADDR_OWVAR 38
13425: PUSH
13426: LD_VAR 0 7
13430: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13431: LD_ADDR_OWVAR 40
13435: PUSH
13436: LD_VAR 0 10
13440: PUSH
13441: LD_INT 1
13443: PPUSH
13444: LD_VAR 0 10
13448: PPUSH
13449: CALL_OW 12
13453: ARRAY
13454: ST_TO_ADDR
// for j = 1 to AMWeapon do
13455: LD_ADDR_VAR 0 14
13459: PUSH
13460: DOUBLE
13461: LD_INT 1
13463: DEC
13464: ST_TO_ADDR
13465: LD_VAR 0 10
13469: PUSH
13470: FOR_TO
13471: IFFALSE 13772
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13473: LD_VAR 0 10
13477: PUSH
13478: LD_VAR 0 14
13482: ARRAY
13483: PUSH
13484: LD_INT 2
13486: EQUAL
13487: PUSH
13488: LD_VAR 0 10
13492: PUSH
13493: LD_VAR 0 14
13497: ARRAY
13498: PUSH
13499: LD_INT 3
13501: EQUAL
13502: OR
13503: IFFALSE 13556
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13505: LD_ADDR_VAR 0 19
13509: PUSH
13510: LD_INT 1
13512: PUSH
13513: LD_INT 2
13515: PUSH
13516: LD_INT 3
13518: PUSH
13519: LD_INT 4
13521: PUSH
13522: LD_INT 5
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13532: LD_ADDR_OWVAR 37
13536: PUSH
13537: LD_VAR 0 19
13541: PUSH
13542: LD_INT 1
13544: PPUSH
13545: LD_VAR 0 19
13549: PPUSH
13550: CALL_OW 12
13554: ARRAY
13555: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13556: LD_VAR 0 10
13560: PUSH
13561: LD_VAR 0 14
13565: ARRAY
13566: PUSH
13567: LD_INT 4
13569: EQUAL
13570: PUSH
13571: LD_VAR 0 10
13575: PUSH
13576: LD_VAR 0 14
13580: ARRAY
13581: PUSH
13582: LD_INT 5
13584: EQUAL
13585: OR
13586: PUSH
13587: LD_VAR 0 10
13591: PUSH
13592: LD_VAR 0 14
13596: ARRAY
13597: PUSH
13598: LD_INT 9
13600: EQUAL
13601: OR
13602: PUSH
13603: LD_VAR 0 10
13607: PUSH
13608: LD_VAR 0 14
13612: ARRAY
13613: PUSH
13614: LD_INT 11
13616: EQUAL
13617: OR
13618: PUSH
13619: LD_VAR 0 10
13623: PUSH
13624: LD_VAR 0 14
13628: ARRAY
13629: PUSH
13630: LD_INT 7
13632: EQUAL
13633: OR
13634: IFFALSE 13683
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
13636: LD_ADDR_VAR 0 19
13640: PUSH
13641: LD_INT 2
13643: PUSH
13644: LD_INT 3
13646: PUSH
13647: LD_INT 4
13649: PUSH
13650: LD_INT 5
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13659: LD_ADDR_OWVAR 37
13663: PUSH
13664: LD_VAR 0 19
13668: PUSH
13669: LD_INT 1
13671: PPUSH
13672: LD_VAR 0 19
13676: PPUSH
13677: CALL_OW 12
13681: ARRAY
13682: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
13683: LD_VAR 0 10
13687: PUSH
13688: LD_VAR 0 14
13692: ARRAY
13693: PUSH
13694: LD_INT 8
13696: EQUAL
13697: PUSH
13698: LD_VAR 0 10
13702: PUSH
13703: LD_VAR 0 14
13707: ARRAY
13708: PUSH
13709: LD_INT 6
13711: EQUAL
13712: OR
13713: PUSH
13714: LD_VAR 0 10
13718: PUSH
13719: LD_VAR 0 14
13723: ARRAY
13724: PUSH
13725: LD_INT 10
13727: EQUAL
13728: OR
13729: IFFALSE 13770
// begin amChassisTab = [ 4 , 5 ] ;
13731: LD_ADDR_VAR 0 19
13735: PUSH
13736: LD_INT 4
13738: PUSH
13739: LD_INT 5
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13746: LD_ADDR_OWVAR 37
13750: PUSH
13751: LD_VAR 0 19
13755: PUSH
13756: LD_INT 1
13758: PPUSH
13759: LD_VAR 0 19
13763: PPUSH
13764: CALL_OW 12
13768: ARRAY
13769: ST_TO_ADDR
// end ; end ;
13770: GO 13470
13772: POP
13773: POP
// veh = CreateVehicle ;
13774: LD_ADDR_VAR 0 16
13778: PUSH
13779: CALL_OW 45
13783: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13784: LD_VAR 0 16
13788: PPUSH
13789: LD_VAR 0 1
13793: PPUSH
13794: LD_INT 0
13796: PPUSH
13797: CALL_OW 49
// if vehControl = 1 then
13801: LD_VAR 0 7
13805: PUSH
13806: LD_INT 1
13808: EQUAL
13809: IFFALSE 13866
// begin hc_gallery =  ;
13811: LD_ADDR_OWVAR 33
13815: PUSH
13816: LD_STRING 
13818: ST_TO_ADDR
// hc_name =  ;
13819: LD_ADDR_OWVAR 26
13823: PUSH
13824: LD_STRING 
13826: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13827: LD_INT 0
13829: PPUSH
13830: LD_INT 3
13832: PPUSH
13833: LD_VAR 0 4
13837: PPUSH
13838: CALL_OW 380
// un = CreateHuman ;
13842: LD_ADDR_VAR 0 15
13846: PUSH
13847: CALL_OW 44
13851: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13852: LD_VAR 0 15
13856: PPUSH
13857: LD_VAR 0 16
13861: PPUSH
13862: CALL_OW 52
// end ; i = i + 1 ;
13866: LD_ADDR_VAR 0 13
13870: PUSH
13871: LD_VAR 0 13
13875: PUSH
13876: LD_INT 1
13878: PLUS
13879: ST_TO_ADDR
// end ; if nation = 2 then
13880: LD_VAR 0 5
13884: PUSH
13885: LD_INT 2
13887: EQUAL
13888: IFFALSE 14312
// begin uc_side = side ;
13890: LD_ADDR_OWVAR 20
13894: PUSH
13895: LD_VAR 0 2
13899: ST_TO_ADDR
// uc_nation = nation ;
13900: LD_ADDR_OWVAR 21
13904: PUSH
13905: LD_VAR 0 5
13909: ST_TO_ADDR
// vc_engine = vehengine ;
13910: LD_ADDR_OWVAR 39
13914: PUSH
13915: LD_VAR 0 6
13919: ST_TO_ADDR
// vc_control = vehcontrol ;
13920: LD_ADDR_OWVAR 38
13924: PUSH
13925: LD_VAR 0 7
13929: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
13930: LD_ADDR_OWVAR 40
13934: PUSH
13935: LD_VAR 0 9
13939: PUSH
13940: LD_INT 1
13942: PPUSH
13943: LD_VAR 0 9
13947: PPUSH
13948: CALL_OW 12
13952: ARRAY
13953: ST_TO_ADDR
// for j = 1 to ARWeapons do
13954: LD_ADDR_VAR 0 14
13958: PUSH
13959: DOUBLE
13960: LD_INT 1
13962: DEC
13963: ST_TO_ADDR
13964: LD_VAR 0 9
13968: PUSH
13969: FOR_TO
13970: IFFALSE 14204
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
13972: LD_VAR 0 9
13976: PUSH
13977: LD_VAR 0 14
13981: ARRAY
13982: PUSH
13983: LD_INT 24
13985: EQUAL
13986: PUSH
13987: LD_VAR 0 9
13991: PUSH
13992: LD_VAR 0 14
13996: ARRAY
13997: PUSH
13998: LD_INT 22
14000: EQUAL
14001: OR
14002: PUSH
14003: LD_VAR 0 9
14007: PUSH
14008: LD_VAR 0 14
14012: ARRAY
14013: PUSH
14014: LD_INT 23
14016: EQUAL
14017: OR
14018: PUSH
14019: LD_VAR 0 9
14023: PUSH
14024: LD_VAR 0 14
14028: ARRAY
14029: PUSH
14030: LD_INT 30
14032: EQUAL
14033: OR
14034: IFFALSE 14083
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
14036: LD_ADDR_VAR 0 18
14040: PUSH
14041: LD_INT 11
14043: PUSH
14044: LD_INT 12
14046: PUSH
14047: LD_INT 13
14049: PUSH
14050: LD_INT 14
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14059: LD_ADDR_OWVAR 37
14063: PUSH
14064: LD_VAR 0 18
14068: PUSH
14069: LD_INT 1
14071: PPUSH
14072: LD_VAR 0 18
14076: PPUSH
14077: CALL_OW 12
14081: ARRAY
14082: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
14083: LD_VAR 0 9
14087: PUSH
14088: LD_VAR 0 14
14092: ARRAY
14093: PUSH
14094: LD_INT 29
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 9
14102: PUSH
14103: LD_VAR 0 14
14107: ARRAY
14108: PUSH
14109: LD_INT 28
14111: EQUAL
14112: OR
14113: PUSH
14114: LD_VAR 0 9
14118: PUSH
14119: LD_VAR 0 14
14123: ARRAY
14124: PUSH
14125: LD_INT 27
14127: EQUAL
14128: OR
14129: PUSH
14130: LD_VAR 0 9
14134: PUSH
14135: LD_VAR 0 14
14139: ARRAY
14140: PUSH
14141: LD_INT 26
14143: EQUAL
14144: OR
14145: PUSH
14146: LD_VAR 0 9
14150: PUSH
14151: LD_VAR 0 14
14155: ARRAY
14156: PUSH
14157: LD_INT 25
14159: EQUAL
14160: OR
14161: IFFALSE 14202
// begin arChassisTab = [ 13 , 14 ] ;
14163: LD_ADDR_VAR 0 18
14167: PUSH
14168: LD_INT 13
14170: PUSH
14171: LD_INT 14
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14178: LD_ADDR_OWVAR 37
14182: PUSH
14183: LD_VAR 0 18
14187: PUSH
14188: LD_INT 1
14190: PPUSH
14191: LD_VAR 0 18
14195: PPUSH
14196: CALL_OW 12
14200: ARRAY
14201: ST_TO_ADDR
// end ; end ;
14202: GO 13969
14204: POP
14205: POP
// veh = CreateVehicle ;
14206: LD_ADDR_VAR 0 16
14210: PUSH
14211: CALL_OW 45
14215: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14216: LD_VAR 0 16
14220: PPUSH
14221: LD_VAR 0 1
14225: PPUSH
14226: LD_INT 0
14228: PPUSH
14229: CALL_OW 49
// if vehcontrol = 1 then
14233: LD_VAR 0 7
14237: PUSH
14238: LD_INT 1
14240: EQUAL
14241: IFFALSE 14298
// begin hc_gallery =  ;
14243: LD_ADDR_OWVAR 33
14247: PUSH
14248: LD_STRING 
14250: ST_TO_ADDR
// hc_name =  ;
14251: LD_ADDR_OWVAR 26
14255: PUSH
14256: LD_STRING 
14258: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14259: LD_INT 0
14261: PPUSH
14262: LD_INT 3
14264: PPUSH
14265: LD_VAR 0 4
14269: PPUSH
14270: CALL_OW 380
// un = CreateHuman ;
14274: LD_ADDR_VAR 0 15
14278: PUSH
14279: CALL_OW 44
14283: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14284: LD_VAR 0 15
14288: PPUSH
14289: LD_VAR 0 16
14293: PPUSH
14294: CALL_OW 52
// end ; i = i + 1 ;
14298: LD_ADDR_VAR 0 13
14302: PUSH
14303: LD_VAR 0 13
14307: PUSH
14308: LD_INT 1
14310: PLUS
14311: ST_TO_ADDR
// end ; if nation = 3 then
14312: LD_VAR 0 5
14316: PUSH
14317: LD_INT 3
14319: EQUAL
14320: IFFALSE 14712
// begin uc_side = side ;
14322: LD_ADDR_OWVAR 20
14326: PUSH
14327: LD_VAR 0 2
14331: ST_TO_ADDR
// uc_nation = nation ;
14332: LD_ADDR_OWVAR 21
14336: PUSH
14337: LD_VAR 0 5
14341: ST_TO_ADDR
// vc_engine = vehengine ;
14342: LD_ADDR_OWVAR 39
14346: PUSH
14347: LD_VAR 0 6
14351: ST_TO_ADDR
// vc_control = vehcontrol ;
14352: LD_ADDR_OWVAR 38
14356: PUSH
14357: LD_VAR 0 7
14361: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14362: LD_ADDR_OWVAR 40
14366: PUSH
14367: LD_VAR 0 8
14371: PUSH
14372: LD_INT 1
14374: PPUSH
14375: LD_VAR 0 8
14379: PPUSH
14380: CALL_OW 12
14384: ARRAY
14385: ST_TO_ADDR
// for j = 1 to RuWeapons do
14386: LD_ADDR_VAR 0 14
14390: PUSH
14391: DOUBLE
14392: LD_INT 1
14394: DEC
14395: ST_TO_ADDR
14396: LD_VAR 0 8
14400: PUSH
14401: FOR_TO
14402: IFFALSE 14604
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14404: LD_VAR 0 8
14408: PUSH
14409: LD_VAR 0 14
14413: ARRAY
14414: PUSH
14415: LD_INT 42
14417: EQUAL
14418: PUSH
14419: LD_VAR 0 8
14423: PUSH
14424: LD_VAR 0 14
14428: ARRAY
14429: PUSH
14430: LD_INT 43
14432: EQUAL
14433: OR
14434: PUSH
14435: LD_VAR 0 8
14439: PUSH
14440: LD_VAR 0 14
14444: ARRAY
14445: PUSH
14446: LD_INT 44
14448: EQUAL
14449: OR
14450: PUSH
14451: LD_VAR 0 8
14455: PUSH
14456: LD_VAR 0 14
14460: ARRAY
14461: PUSH
14462: LD_INT 45
14464: EQUAL
14465: OR
14466: PUSH
14467: LD_VAR 0 8
14471: PUSH
14472: LD_VAR 0 14
14476: ARRAY
14477: PUSH
14478: LD_INT 49
14480: EQUAL
14481: OR
14482: IFFALSE 14531
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14484: LD_ADDR_VAR 0 17
14488: PUSH
14489: LD_INT 21
14491: PUSH
14492: LD_INT 22
14494: PUSH
14495: LD_INT 23
14497: PUSH
14498: LD_INT 24
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14507: LD_ADDR_OWVAR 37
14511: PUSH
14512: LD_VAR 0 17
14516: PUSH
14517: LD_INT 1
14519: PPUSH
14520: LD_VAR 0 17
14524: PPUSH
14525: CALL_OW 12
14529: ARRAY
14530: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14531: LD_VAR 0 8
14535: PUSH
14536: LD_VAR 0 14
14540: ARRAY
14541: PUSH
14542: LD_INT 46
14544: EQUAL
14545: PUSH
14546: LD_VAR 0 8
14550: PUSH
14551: LD_VAR 0 14
14555: ARRAY
14556: PUSH
14557: LD_INT 47
14559: EQUAL
14560: OR
14561: IFFALSE 14602
// begin ruChassisTab = [ 23 , 24 ] ;
14563: LD_ADDR_VAR 0 17
14567: PUSH
14568: LD_INT 23
14570: PUSH
14571: LD_INT 24
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14578: LD_ADDR_OWVAR 37
14582: PUSH
14583: LD_VAR 0 17
14587: PUSH
14588: LD_INT 1
14590: PPUSH
14591: LD_VAR 0 17
14595: PPUSH
14596: CALL_OW 12
14600: ARRAY
14601: ST_TO_ADDR
// end ; end ;
14602: GO 14401
14604: POP
14605: POP
// veh = CreateVehicle ;
14606: LD_ADDR_VAR 0 16
14610: PUSH
14611: CALL_OW 45
14615: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14616: LD_VAR 0 16
14620: PPUSH
14621: LD_VAR 0 1
14625: PPUSH
14626: LD_INT 0
14628: PPUSH
14629: CALL_OW 49
// if vehcontrol = 1 then
14633: LD_VAR 0 7
14637: PUSH
14638: LD_INT 1
14640: EQUAL
14641: IFFALSE 14698
// begin hc_gallery =  ;
14643: LD_ADDR_OWVAR 33
14647: PUSH
14648: LD_STRING 
14650: ST_TO_ADDR
// hc_name =  ;
14651: LD_ADDR_OWVAR 26
14655: PUSH
14656: LD_STRING 
14658: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14659: LD_INT 0
14661: PPUSH
14662: LD_INT 3
14664: PPUSH
14665: LD_VAR 0 4
14669: PPUSH
14670: CALL_OW 380
// un = CreateHuman ;
14674: LD_ADDR_VAR 0 15
14678: PUSH
14679: CALL_OW 44
14683: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14684: LD_VAR 0 15
14688: PPUSH
14689: LD_VAR 0 16
14693: PPUSH
14694: CALL_OW 52
// end ; i = i + 1 ;
14698: LD_ADDR_VAR 0 13
14702: PUSH
14703: LD_VAR 0 13
14707: PUSH
14708: LD_INT 1
14710: PLUS
14711: ST_TO_ADDR
// end ; until i = vehCount ;
14712: LD_VAR 0 13
14716: PUSH
14717: LD_VAR 0 3
14721: EQUAL
14722: IFFALSE 13374
// repeat wait ( 0 0$1 ) ;
14724: LD_INT 35
14726: PPUSH
14727: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
14731: LD_ADDR_VAR 0 20
14735: PUSH
14736: LD_INT 22
14738: PUSH
14739: LD_VAR 0 2
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 21
14750: PUSH
14751: LD_INT 2
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 24
14760: PUSH
14761: LD_INT 250
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: LIST
14772: PPUSH
14773: CALL_OW 69
14777: ST_TO_ADDR
// if vehicleOK_list > 0 then
14778: LD_VAR 0 20
14782: PUSH
14783: LD_INT 0
14785: GREATER
14786: IFFALSE 14977
// begin for i in vehicleOK_list do
14788: LD_ADDR_VAR 0 13
14792: PUSH
14793: LD_VAR 0 20
14797: PUSH
14798: FOR_IN
14799: IFFALSE 14975
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14801: LD_ADDR_VAR 0 21
14805: PUSH
14806: LD_INT 22
14808: PUSH
14809: LD_VAR 0 11
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PPUSH
14818: CALL_OW 69
14822: PPUSH
14823: LD_VAR 0 13
14827: PPUSH
14828: CALL_OW 74
14832: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14833: LD_ADDR_VAR 0 22
14837: PUSH
14838: LD_INT 22
14840: PUSH
14841: LD_VAR 0 11
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: LD_INT 2
14852: PUSH
14853: LD_INT 59
14855: PUSH
14856: EMPTY
14857: LIST
14858: PUSH
14859: LD_INT 21
14861: PUSH
14862: LD_INT 1
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 21
14871: PUSH
14872: LD_INT 2
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: PPUSH
14892: CALL_OW 69
14896: PPUSH
14897: LD_VAR 0 13
14901: PPUSH
14902: CALL_OW 74
14906: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14907: LD_VAR 0 13
14911: PPUSH
14912: LD_VAR 0 21
14916: PPUSH
14917: CALL_OW 296
14921: PUSH
14922: LD_INT 6
14924: PLUS
14925: PUSH
14926: LD_VAR 0 13
14930: PPUSH
14931: LD_VAR 0 22
14935: PPUSH
14936: CALL_OW 296
14940: LESS
14941: IFFALSE 14959
// begin ComAttackUnit ( i , target1 ) ;
14943: LD_VAR 0 13
14947: PPUSH
14948: LD_VAR 0 21
14952: PPUSH
14953: CALL_OW 115
// end else
14957: GO 14973
// begin ComAttackUnit ( i , target2 ) ;
14959: LD_VAR 0 13
14963: PPUSH
14964: LD_VAR 0 22
14968: PPUSH
14969: CALL_OW 115
// end ; end ;
14973: GO 14798
14975: POP
14976: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
14977: LD_INT 22
14979: PUSH
14980: LD_VAR 0 2
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 21
14991: PUSH
14992: LD_INT 2
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 24
15001: PUSH
15002: LD_INT 250
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 69
15018: PUSH
15019: LD_INT 0
15021: EQUAL
15022: IFFALSE 14724
// end ;
15024: LD_VAR 0 12
15028: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
15029: LD_INT 0
15031: PPUSH
15032: PPUSH
15033: PPUSH
15034: PPUSH
15035: PPUSH
15036: PPUSH
15037: PPUSH
15038: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15039: LD_ADDR_VAR 0 7
15043: PUSH
15044: LD_INT 22
15046: PUSH
15047: LD_VAR 0 1
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: LD_INT 1
15058: PUSH
15059: LD_INT 3
15061: PUSH
15062: LD_INT 24
15064: PUSH
15065: LD_INT 550
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 24
15078: PUSH
15079: LD_INT 250
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: PPUSH
15095: CALL_OW 69
15099: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15100: LD_ADDR_VAR 0 8
15104: PUSH
15105: LD_INT 22
15107: PUSH
15108: LD_VAR 0 1
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: LD_INT 2
15119: PUSH
15120: LD_INT 25
15122: PUSH
15123: LD_INT 1
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 25
15132: PUSH
15133: LD_INT 5
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: LD_INT 25
15142: PUSH
15143: LD_INT 8
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 25
15152: PUSH
15153: LD_INT 9
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 24
15169: PUSH
15170: LD_INT 1000
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: PPUSH
15182: CALL_OW 69
15186: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15187: LD_ADDR_VAR 0 9
15191: PUSH
15192: LD_INT 22
15194: PUSH
15195: LD_VAR 0 1
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 25
15206: PUSH
15207: LD_INT 4
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PPUSH
15218: CALL_OW 69
15222: ST_TO_ADDR
// if medicCount > 0 then
15223: LD_VAR 0 9
15227: PUSH
15228: LD_INT 0
15230: GREATER
15231: IFFALSE 15305
// begin if damageUnit_list > 0 then
15233: LD_VAR 0 7
15237: PUSH
15238: LD_INT 0
15240: GREATER
15241: IFFALSE 15305
// begin for i in damageUnit_list do
15243: LD_ADDR_VAR 0 5
15247: PUSH
15248: LD_VAR 0 7
15252: PUSH
15253: FOR_IN
15254: IFFALSE 15303
// begin ComMoveToArea ( i , healArea ) ;
15256: LD_VAR 0 5
15260: PPUSH
15261: LD_VAR 0 2
15265: PPUSH
15266: CALL_OW 113
// for j in medicCount do
15270: LD_ADDR_VAR 0 6
15274: PUSH
15275: LD_VAR 0 9
15279: PUSH
15280: FOR_IN
15281: IFFALSE 15299
// AddComHeal ( j , i ) ;
15283: LD_VAR 0 6
15287: PPUSH
15288: LD_VAR 0 5
15292: PPUSH
15293: CALL_OW 188
15297: GO 15280
15299: POP
15300: POP
// end ;
15301: GO 15253
15303: POP
15304: POP
// end ; end ; if soldiersOK_list > 0 then
15305: LD_VAR 0 8
15309: PUSH
15310: LD_INT 0
15312: GREATER
15313: IFFALSE 15504
// begin for i in soldiersOK_list do
15315: LD_ADDR_VAR 0 5
15319: PUSH
15320: LD_VAR 0 8
15324: PUSH
15325: FOR_IN
15326: IFFALSE 15502
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15328: LD_ADDR_VAR 0 10
15332: PUSH
15333: LD_INT 22
15335: PUSH
15336: LD_VAR 0 3
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PPUSH
15345: CALL_OW 69
15349: PPUSH
15350: LD_VAR 0 5
15354: PPUSH
15355: CALL_OW 74
15359: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15360: LD_ADDR_VAR 0 11
15364: PUSH
15365: LD_INT 22
15367: PUSH
15368: LD_VAR 0 3
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: LD_INT 2
15379: PUSH
15380: LD_INT 59
15382: PUSH
15383: EMPTY
15384: LIST
15385: PUSH
15386: LD_INT 21
15388: PUSH
15389: LD_INT 1
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: PUSH
15396: LD_INT 21
15398: PUSH
15399: LD_INT 2
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: EMPTY
15417: LIST
15418: PPUSH
15419: CALL_OW 69
15423: PPUSH
15424: LD_VAR 0 5
15428: PPUSH
15429: CALL_OW 74
15433: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15434: LD_VAR 0 5
15438: PPUSH
15439: LD_VAR 0 10
15443: PPUSH
15444: CALL_OW 296
15448: PUSH
15449: LD_INT 8
15451: PLUS
15452: PUSH
15453: LD_VAR 0 5
15457: PPUSH
15458: LD_VAR 0 11
15462: PPUSH
15463: CALL_OW 296
15467: LESS
15468: IFFALSE 15486
// begin ComAttackUnit ( i , target1 ) ;
15470: LD_VAR 0 5
15474: PPUSH
15475: LD_VAR 0 10
15479: PPUSH
15480: CALL_OW 115
// end else
15484: GO 15500
// begin ComAttackUnit ( i , target2 ) ;
15486: LD_VAR 0 5
15490: PPUSH
15491: LD_VAR 0 11
15495: PPUSH
15496: CALL_OW 115
// end ; end ;
15500: GO 15325
15502: POP
15503: POP
// end ; end ;
15504: LD_VAR 0 4
15508: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
15509: LD_INT 0
15511: PPUSH
15512: PPUSH
// list := [ ] ;
15513: LD_ADDR_VAR 0 5
15517: PUSH
15518: EMPTY
15519: ST_TO_ADDR
// case d of 0 :
15520: LD_VAR 0 3
15524: PUSH
15525: LD_INT 0
15527: DOUBLE
15528: EQUAL
15529: IFTRUE 15533
15531: GO 15666
15533: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
15534: LD_ADDR_VAR 0 5
15538: PUSH
15539: LD_VAR 0 1
15543: PUSH
15544: LD_INT 4
15546: MINUS
15547: PUSH
15548: LD_VAR 0 2
15552: PUSH
15553: LD_INT 4
15555: MINUS
15556: PUSH
15557: LD_INT 2
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: LIST
15564: PUSH
15565: LD_VAR 0 1
15569: PUSH
15570: LD_INT 3
15572: MINUS
15573: PUSH
15574: LD_VAR 0 2
15578: PUSH
15579: LD_INT 1
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: PUSH
15587: LD_VAR 0 1
15591: PUSH
15592: LD_INT 4
15594: PLUS
15595: PUSH
15596: LD_VAR 0 2
15600: PUSH
15601: LD_INT 4
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: LIST
15608: PUSH
15609: LD_VAR 0 1
15613: PUSH
15614: LD_INT 3
15616: PLUS
15617: PUSH
15618: LD_VAR 0 2
15622: PUSH
15623: LD_INT 3
15625: PLUS
15626: PUSH
15627: LD_INT 5
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: LIST
15634: PUSH
15635: LD_VAR 0 1
15639: PUSH
15640: LD_VAR 0 2
15644: PUSH
15645: LD_INT 4
15647: PLUS
15648: PUSH
15649: LD_INT 0
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: LIST
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: ST_TO_ADDR
// end ; 1 :
15664: GO 16364
15666: LD_INT 1
15668: DOUBLE
15669: EQUAL
15670: IFTRUE 15674
15672: GO 15807
15674: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
15675: LD_ADDR_VAR 0 5
15679: PUSH
15680: LD_VAR 0 1
15684: PUSH
15685: LD_VAR 0 2
15689: PUSH
15690: LD_INT 4
15692: MINUS
15693: PUSH
15694: LD_INT 3
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: LIST
15701: PUSH
15702: LD_VAR 0 1
15706: PUSH
15707: LD_INT 3
15709: MINUS
15710: PUSH
15711: LD_VAR 0 2
15715: PUSH
15716: LD_INT 3
15718: MINUS
15719: PUSH
15720: LD_INT 2
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: PUSH
15728: LD_VAR 0 1
15732: PUSH
15733: LD_INT 4
15735: MINUS
15736: PUSH
15737: LD_VAR 0 2
15741: PUSH
15742: LD_INT 1
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: LIST
15749: PUSH
15750: LD_VAR 0 1
15754: PUSH
15755: LD_VAR 0 2
15759: PUSH
15760: LD_INT 3
15762: PLUS
15763: PUSH
15764: LD_INT 0
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: LIST
15771: PUSH
15772: LD_VAR 0 1
15776: PUSH
15777: LD_INT 4
15779: PLUS
15780: PUSH
15781: LD_VAR 0 2
15785: PUSH
15786: LD_INT 4
15788: PLUS
15789: PUSH
15790: LD_INT 5
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: LIST
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: ST_TO_ADDR
// end ; 2 :
15805: GO 16364
15807: LD_INT 2
15809: DOUBLE
15810: EQUAL
15811: IFTRUE 15815
15813: GO 15944
15815: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
15816: LD_ADDR_VAR 0 5
15820: PUSH
15821: LD_VAR 0 1
15825: PUSH
15826: LD_VAR 0 2
15830: PUSH
15831: LD_INT 3
15833: MINUS
15834: PUSH
15835: LD_INT 3
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: LIST
15842: PUSH
15843: LD_VAR 0 1
15847: PUSH
15848: LD_INT 4
15850: PLUS
15851: PUSH
15852: LD_VAR 0 2
15856: PUSH
15857: LD_INT 4
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: LIST
15864: PUSH
15865: LD_VAR 0 1
15869: PUSH
15870: LD_VAR 0 2
15874: PUSH
15875: LD_INT 4
15877: PLUS
15878: PUSH
15879: LD_INT 0
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: LIST
15886: PUSH
15887: LD_VAR 0 1
15891: PUSH
15892: LD_INT 3
15894: MINUS
15895: PUSH
15896: LD_VAR 0 2
15900: PUSH
15901: LD_INT 1
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: LIST
15908: PUSH
15909: LD_VAR 0 1
15913: PUSH
15914: LD_INT 4
15916: MINUS
15917: PUSH
15918: LD_VAR 0 2
15922: PUSH
15923: LD_INT 4
15925: MINUS
15926: PUSH
15927: LD_INT 2
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: LIST
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: ST_TO_ADDR
// end ; 3 :
15942: GO 16364
15944: LD_INT 3
15946: DOUBLE
15947: EQUAL
15948: IFTRUE 15952
15950: GO 16085
15952: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
15953: LD_ADDR_VAR 0 5
15957: PUSH
15958: LD_VAR 0 1
15962: PUSH
15963: LD_INT 3
15965: PLUS
15966: PUSH
15967: LD_VAR 0 2
15971: PUSH
15972: LD_INT 4
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: LIST
15979: PUSH
15980: LD_VAR 0 1
15984: PUSH
15985: LD_INT 4
15987: PLUS
15988: PUSH
15989: LD_VAR 0 2
15993: PUSH
15994: LD_INT 4
15996: PLUS
15997: PUSH
15998: LD_INT 5
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: LIST
16005: PUSH
16006: LD_VAR 0 1
16010: PUSH
16011: LD_INT 4
16013: MINUS
16014: PUSH
16015: LD_VAR 0 2
16019: PUSH
16020: LD_INT 1
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: LIST
16027: PUSH
16028: LD_VAR 0 1
16032: PUSH
16033: LD_VAR 0 2
16037: PUSH
16038: LD_INT 4
16040: MINUS
16041: PUSH
16042: LD_INT 3
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: LIST
16049: PUSH
16050: LD_VAR 0 1
16054: PUSH
16055: LD_INT 3
16057: MINUS
16058: PUSH
16059: LD_VAR 0 2
16063: PUSH
16064: LD_INT 3
16066: MINUS
16067: PUSH
16068: LD_INT 2
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: LIST
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: ST_TO_ADDR
// end ; 4 :
16083: GO 16364
16085: LD_INT 4
16087: DOUBLE
16088: EQUAL
16089: IFTRUE 16093
16091: GO 16226
16093: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
16094: LD_ADDR_VAR 0 5
16098: PUSH
16099: LD_VAR 0 1
16103: PUSH
16104: LD_VAR 0 2
16108: PUSH
16109: LD_INT 4
16111: PLUS
16112: PUSH
16113: LD_INT 0
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: PUSH
16121: LD_VAR 0 1
16125: PUSH
16126: LD_INT 3
16128: PLUS
16129: PUSH
16130: LD_VAR 0 2
16134: PUSH
16135: LD_INT 3
16137: PLUS
16138: PUSH
16139: LD_INT 5
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: LIST
16146: PUSH
16147: LD_VAR 0 1
16151: PUSH
16152: LD_INT 3
16154: PLUS
16155: PUSH
16156: LD_VAR 0 2
16160: PUSH
16161: LD_INT 4
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: LIST
16168: PUSH
16169: LD_VAR 0 1
16173: PUSH
16174: LD_VAR 0 2
16178: PUSH
16179: LD_INT 3
16181: MINUS
16182: PUSH
16183: LD_INT 3
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: LIST
16190: PUSH
16191: LD_VAR 0 1
16195: PUSH
16196: LD_INT 4
16198: MINUS
16199: PUSH
16200: LD_VAR 0 2
16204: PUSH
16205: LD_INT 4
16207: MINUS
16208: PUSH
16209: LD_INT 2
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: LIST
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: ST_TO_ADDR
// end ; 5 :
16224: GO 16364
16226: LD_INT 5
16228: DOUBLE
16229: EQUAL
16230: IFTRUE 16234
16232: GO 16363
16234: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
16235: LD_ADDR_VAR 0 5
16239: PUSH
16240: LD_VAR 0 1
16244: PUSH
16245: LD_INT 4
16247: MINUS
16248: PUSH
16249: LD_VAR 0 2
16253: PUSH
16254: LD_INT 1
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: LIST
16261: PUSH
16262: LD_VAR 0 1
16266: PUSH
16267: LD_VAR 0 2
16271: PUSH
16272: LD_INT 4
16274: MINUS
16275: PUSH
16276: LD_INT 3
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: LIST
16283: PUSH
16284: LD_VAR 0 1
16288: PUSH
16289: LD_INT 4
16291: PLUS
16292: PUSH
16293: LD_VAR 0 2
16297: PUSH
16298: LD_INT 4
16300: PLUS
16301: PUSH
16302: LD_INT 5
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: LIST
16309: PUSH
16310: LD_VAR 0 1
16314: PUSH
16315: LD_INT 3
16317: PLUS
16318: PUSH
16319: LD_VAR 0 2
16323: PUSH
16324: LD_INT 4
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: LIST
16331: PUSH
16332: LD_VAR 0 1
16336: PUSH
16337: LD_VAR 0 2
16341: PUSH
16342: LD_INT 3
16344: PLUS
16345: PUSH
16346: LD_INT 0
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: LIST
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: ST_TO_ADDR
// end ; end ;
16361: GO 16364
16363: POP
// result := list ;
16364: LD_ADDR_VAR 0 4
16368: PUSH
16369: LD_VAR 0 5
16373: ST_TO_ADDR
// end ; end_of_file
16374: LD_VAR 0 4
16378: RET
// every 1 do var i ;
16379: GO 16381
16381: DISABLE
16382: LD_INT 0
16384: PPUSH
// begin InGameOn ;
16385: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
16389: LD_INT 53
16391: PPUSH
16392: LD_INT 40
16394: PPUSH
16395: CALL_OW 84
// wait ( 0 0$5 ) ;
16399: LD_INT 175
16401: PPUSH
16402: CALL_OW 67
// if gammaCommander = 1 then
16406: LD_EXP 11
16410: PUSH
16411: LD_INT 1
16413: EQUAL
16414: IFFALSE 16425
// CenterNowOnUnits ( Donaldson ) ;
16416: LD_EXP 3
16420: PPUSH
16421: CALL_OW 87
// if gammaCommander = 2 then
16425: LD_EXP 11
16429: PUSH
16430: LD_INT 2
16432: EQUAL
16433: IFFALSE 16444
// CenterNowOnUnits ( Brown ) ;
16435: LD_EXP 2
16439: PPUSH
16440: CALL_OW 87
// if gammaCommander = 3 then
16444: LD_EXP 11
16448: PUSH
16449: LD_INT 3
16451: EQUAL
16452: IFFALSE 16463
// CenterNowOnUnits ( Houten ) ;
16454: LD_EXP 12
16458: PPUSH
16459: CALL_OW 87
// if gammaCommander = 1 then
16463: LD_EXP 11
16467: PUSH
16468: LD_INT 1
16470: EQUAL
16471: IFFALSE 16485
// Say ( Donaldson , D1-Don-1 ) ;
16473: LD_EXP 3
16477: PPUSH
16478: LD_STRING D1-Don-1
16480: PPUSH
16481: CALL_OW 88
// if gammaCommander = 2 then
16485: LD_EXP 11
16489: PUSH
16490: LD_INT 2
16492: EQUAL
16493: IFFALSE 16507
// Say ( Brown , D1-Brown-1 ) ;
16495: LD_EXP 2
16499: PPUSH
16500: LD_STRING D1-Brown-1
16502: PPUSH
16503: CALL_OW 88
// if gammaCommander = 3 then
16507: LD_EXP 11
16511: PUSH
16512: LD_INT 3
16514: EQUAL
16515: IFFALSE 16529
// Say ( Houten , D1-VanH-1 ) ;
16517: LD_EXP 12
16521: PPUSH
16522: LD_STRING D1-VanH-1
16524: PPUSH
16525: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
16529: LD_EXP 21
16533: PPUSH
16534: LD_STRING D1-Har-1
16536: PPUSH
16537: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
16541: LD_INT 53
16543: PPUSH
16544: LD_INT 40
16546: PPUSH
16547: CALL_OW 84
// if gammaCommander = 1 then
16551: LD_EXP 11
16555: PUSH
16556: LD_INT 1
16558: EQUAL
16559: IFFALSE 16573
// Say ( Donaldson , D1-Don-2 ) ;
16561: LD_EXP 3
16565: PPUSH
16566: LD_STRING D1-Don-2
16568: PPUSH
16569: CALL_OW 88
// if gammaCommander = 2 then
16573: LD_EXP 11
16577: PUSH
16578: LD_INT 2
16580: EQUAL
16581: IFFALSE 16595
// Say ( Brown , D1-Brown-2 ) ;
16583: LD_EXP 2
16587: PPUSH
16588: LD_STRING D1-Brown-2
16590: PPUSH
16591: CALL_OW 88
// if gammaCommander = 3 then
16595: LD_EXP 11
16599: PUSH
16600: LD_INT 3
16602: EQUAL
16603: IFFALSE 16617
// Say ( Houten , D1-VanH-2 ) ;
16605: LD_EXP 12
16609: PPUSH
16610: LD_STRING D1-VanH-2
16612: PPUSH
16613: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
16617: LD_EXP 21
16621: PPUSH
16622: LD_STRING D1-Har-2
16624: PPUSH
16625: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
16629: LD_INT 22
16631: PUSH
16632: LD_INT 1
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 33
16641: PUSH
16642: LD_INT 2
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 61
16651: PUSH
16652: EMPTY
16653: LIST
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: PPUSH
16660: CALL_OW 69
16664: IFFALSE 16729
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
16666: LD_ADDR_VAR 0 1
16670: PUSH
16671: LD_INT 22
16673: PUSH
16674: LD_INT 1
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: LD_INT 33
16683: PUSH
16684: LD_INT 2
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 61
16693: PUSH
16694: EMPTY
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: PPUSH
16702: CALL_OW 69
16706: PUSH
16707: FOR_IN
16708: IFFALSE 16727
// ComAgressiveMove ( i , 70 , 41 ) ;
16710: LD_VAR 0 1
16714: PPUSH
16715: LD_INT 70
16717: PPUSH
16718: LD_INT 41
16720: PPUSH
16721: CALL_OW 114
16725: GO 16707
16727: POP
16728: POP
// repeat wait ( 0 0$1 ) ;
16729: LD_INT 35
16731: PPUSH
16732: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
16736: LD_ADDR_VAR 0 1
16740: PUSH
16741: LD_INT 22
16743: PUSH
16744: LD_INT 6
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: EMPTY
16752: LIST
16753: PPUSH
16754: CALL_OW 69
16758: PUSH
16759: FOR_IN
16760: IFFALSE 16779
// ComAgressiveMove ( i , 54 , 20 ) ;
16762: LD_VAR 0 1
16766: PPUSH
16767: LD_INT 54
16769: PPUSH
16770: LD_INT 20
16772: PPUSH
16773: CALL_OW 114
16777: GO 16759
16779: POP
16780: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
16781: LD_ADDR_VAR 0 1
16785: PUSH
16786: LD_INT 22
16788: PUSH
16789: LD_INT 1
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 25
16798: PUSH
16799: LD_INT 1
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 3
16808: PUSH
16809: LD_INT 54
16811: PUSH
16812: EMPTY
16813: LIST
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: PPUSH
16824: CALL_OW 69
16828: PUSH
16829: FOR_IN
16830: IFFALSE 16864
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
16832: LD_VAR 0 1
16836: PPUSH
16837: LD_INT 70
16839: PPUSH
16840: LD_INT 41
16842: PPUSH
16843: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
16847: LD_VAR 0 1
16851: PPUSH
16852: LD_INT 46
16854: PPUSH
16855: LD_INT 39
16857: PPUSH
16858: CALL_OW 174
// end ;
16862: GO 16829
16864: POP
16865: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
16866: LD_ADDR_VAR 0 1
16870: PUSH
16871: LD_INT 22
16873: PUSH
16874: LD_INT 1
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 21
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 3
16893: PUSH
16894: LD_INT 24
16896: PUSH
16897: LD_INT 500
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: PPUSH
16913: CALL_OW 69
16917: PUSH
16918: FOR_IN
16919: IFFALSE 16952
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
16921: LD_VAR 0 1
16925: PPUSH
16926: LD_EXP 36
16930: PPUSH
16931: CALL_OW 250
16935: PPUSH
16936: LD_EXP 36
16940: PPUSH
16941: CALL_OW 251
16945: PPUSH
16946: CALL_OW 111
16950: GO 16918
16952: POP
16953: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 6 ;
16954: LD_INT 22
16956: PUSH
16957: LD_INT 6
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 21
16966: PUSH
16967: LD_INT 1
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 24
16976: PUSH
16977: LD_INT 250
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: LIST
16988: PPUSH
16989: CALL_OW 69
16993: PUSH
16994: LD_INT 6
16996: LESS
16997: IFFALSE 16729
// InGameOff ;
16999: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
17003: LD_STRING M1
17005: PPUSH
17006: CALL_OW 337
// SaveForQuickRestart ;
17010: CALL_OW 22
// startCutscene = 0 ;
17014: LD_ADDR_EXP 37
17018: PUSH
17019: LD_INT 0
17021: ST_TO_ADDR
// end ;
17022: PPOPN 1
17024: END
// every 1 1$0 do
17025: GO 17027
17027: DISABLE
// begin PrepareSupportFromDelta ;
17028: CALL 2704 0 0
// firstAttack = 1 ;
17032: LD_ADDR_EXP 32
17036: PUSH
17037: LD_INT 1
17039: ST_TO_ADDR
// if IsOk ( Gladstone ) then
17040: LD_EXP 8
17044: PPUSH
17045: CALL_OW 302
17049: IFFALSE 17065
// begin Say ( Gladstone , D2-Glad-1 ) ;
17051: LD_EXP 8
17055: PPUSH
17056: LD_STRING D2-Glad-1
17058: PPUSH
17059: CALL_OW 88
// end else
17063: GO 17167
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
17065: LD_INT 4
17067: PPUSH
17068: LD_INT 22
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 21
17080: PUSH
17081: LD_INT 1
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 2
17090: PUSH
17091: LD_INT 25
17093: PUSH
17094: LD_INT 1
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 25
17103: PUSH
17104: LD_INT 2
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 25
17113: PUSH
17114: LD_INT 3
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 25
17123: PUSH
17124: LD_INT 4
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: LIST
17142: PPUSH
17143: CALL_OW 70
17147: PUSH
17148: LD_EXP 14
17152: PUSH
17153: EMPTY
17154: LIST
17155: DIFF
17156: PPUSH
17157: LD_STRING D2-Sol1-1
17159: PPUSH
17160: LD_STRING D2-FSol1-1
17162: PPUSH
17163: CALL 6160 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
17167: LD_EXP 3
17171: PPUSH
17172: CALL_OW 302
17176: PUSH
17177: LD_EXP 11
17181: PUSH
17182: LD_INT 1
17184: EQUAL
17185: AND
17186: IFFALSE 17200
// Say ( Donaldson , D2-Don-1 ) ;
17188: LD_EXP 3
17192: PPUSH
17193: LD_STRING D2-Don-1
17195: PPUSH
17196: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
17200: LD_EXP 2
17204: PPUSH
17205: CALL_OW 302
17209: PUSH
17210: LD_EXP 11
17214: PUSH
17215: LD_INT 2
17217: EQUAL
17218: AND
17219: IFFALSE 17233
// Say ( Brown , D2-Brown-1 ) ;
17221: LD_EXP 2
17225: PPUSH
17226: LD_STRING D2-Brown-1
17228: PPUSH
17229: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
17233: LD_EXP 12
17237: PPUSH
17238: CALL_OW 302
17242: PUSH
17243: LD_EXP 11
17247: PUSH
17248: LD_INT 3
17250: EQUAL
17251: AND
17252: IFFALSE 17266
// Say ( Houten , D2-VanH-1 ) ;
17254: LD_EXP 12
17258: PPUSH
17259: LD_STRING D2-VanH-1
17261: PPUSH
17262: CALL_OW 88
// end ;
17266: END
// every 0 0$1 do
17267: GO 17269
17269: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) div 3 ) ;
17270: LD_STRING 07_time
17272: PPUSH
17273: LD_INT 0
17275: PPUSH
17276: CALL_OW 30
17280: PUSH
17281: LD_INT 3
17283: DIV
17284: PPUSH
17285: CALL_OW 67
// PrepareMacmillanSquad ;
17289: CALL 3319 0 0
// CenterNowOnUnits ( JMM ) ;
17293: LD_EXP 1
17297: PPUSH
17298: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
17302: LD_EXP 1
17306: PPUSH
17307: LD_STRING D3-JMM-1
17309: PPUSH
17310: CALL_OW 88
// JMMArrive = 1 ;
17314: LD_ADDR_EXP 38
17318: PUSH
17319: LD_INT 1
17321: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
17322: LD_EXP 3
17326: PPUSH
17327: CALL_OW 302
17331: PUSH
17332: LD_EXP 11
17336: PUSH
17337: LD_INT 1
17339: EQUAL
17340: AND
17341: IFFALSE 17357
// begin Say ( Donaldson , D3-Don-1 ) ;
17343: LD_EXP 3
17347: PPUSH
17348: LD_STRING D3-Don-1
17350: PPUSH
17351: CALL_OW 88
// end else
17355: GO 17409
// begin if gammaCommander = 1 then
17357: LD_EXP 11
17361: PUSH
17362: LD_INT 1
17364: EQUAL
17365: IFFALSE 17409
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
17367: LD_EXP 10
17371: PPUSH
17372: LD_INT 26
17374: PUSH
17375: LD_INT 1
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PPUSH
17382: CALL_OW 72
17386: PPUSH
17387: LD_STRING D3-Sol1-1
17389: PPUSH
17390: LD_STRING D3-Sol1-1
17392: PPUSH
17393: CALL 6160 0 3
// Say ( JMM , D3-JMM-2 ) ;
17397: LD_EXP 1
17401: PPUSH
17402: LD_STRING D3-JMM-2
17404: PPUSH
17405: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17409: LD_EXP 2
17413: PPUSH
17414: CALL_OW 302
17418: PUSH
17419: LD_EXP 11
17423: PUSH
17424: LD_INT 2
17426: EQUAL
17427: AND
17428: IFFALSE 17444
// begin Say ( Brown , D3-Brown-1 ) ;
17430: LD_EXP 2
17434: PPUSH
17435: LD_STRING D3-Brown-1
17437: PPUSH
17438: CALL_OW 88
// end else
17442: GO 17496
// begin if gammaCommander = 2 then
17444: LD_EXP 11
17448: PUSH
17449: LD_INT 2
17451: EQUAL
17452: IFFALSE 17496
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
17454: LD_EXP 10
17458: PPUSH
17459: LD_INT 26
17461: PUSH
17462: LD_INT 1
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PPUSH
17469: CALL_OW 72
17473: PPUSH
17474: LD_STRING D3-Sol1-1a
17476: PPUSH
17477: LD_STRING D3-Sol1-1a
17479: PPUSH
17480: CALL 6160 0 3
// Say ( JMM , D3-JMM-2 ) ;
17484: LD_EXP 1
17488: PPUSH
17489: LD_STRING D3-JMM-2
17491: PPUSH
17492: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17496: LD_EXP 12
17500: PPUSH
17501: CALL_OW 302
17505: PUSH
17506: LD_EXP 11
17510: PUSH
17511: LD_INT 3
17513: EQUAL
17514: AND
17515: IFFALSE 17531
// begin Say ( Houten , D3-VanH-1 ) ;
17517: LD_EXP 12
17521: PPUSH
17522: LD_STRING D3-VanH-1
17524: PPUSH
17525: CALL_OW 88
// end else
17529: GO 17583
// begin if gammaCommander = 3 then
17531: LD_EXP 11
17535: PUSH
17536: LD_INT 3
17538: EQUAL
17539: IFFALSE 17583
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
17541: LD_EXP 10
17545: PPUSH
17546: LD_INT 26
17548: PUSH
17549: LD_INT 1
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PPUSH
17556: CALL_OW 72
17560: PPUSH
17561: LD_STRING D3-Sol1-1b
17563: PPUSH
17564: LD_STRING D3-Sol1-1b
17566: PPUSH
17567: CALL 6160 0 3
// Say ( JMM , D3-JMM-2 ) ;
17571: LD_EXP 1
17575: PPUSH
17576: LD_STRING D3-JMM-2
17578: PPUSH
17579: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17583: LD_EXP 14
17587: PPUSH
17588: CALL_OW 302
17592: IFFALSE 17620
// begin Say ( Joan , D3a-Joan-1 ) ;
17594: LD_EXP 14
17598: PPUSH
17599: LD_STRING D3a-Joan-1
17601: PPUSH
17602: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17606: LD_EXP 1
17610: PPUSH
17611: LD_STRING D3a-JMM-1
17613: PPUSH
17614: CALL_OW 88
// end else
17618: GO 18073
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17620: LD_EXP 3
17624: PPUSH
17625: CALL_OW 302
17629: PUSH
17630: LD_EXP 11
17634: PUSH
17635: LD_INT 1
17637: EQUAL
17638: AND
17639: PUSH
17640: LD_STRING 06_JoanStatus_1
17642: PPUSH
17643: LD_INT 0
17645: PPUSH
17646: CALL_OW 30
17650: PUSH
17651: LD_INT 1
17653: EQUAL
17654: AND
17655: IFFALSE 17706
// begin Say ( Donaldson , D3b-Don-1 ) ;
17657: LD_EXP 3
17661: PPUSH
17662: LD_STRING D3b-Don-1
17664: PPUSH
17665: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
17669: LD_EXP 1
17673: PPUSH
17674: LD_STRING D3b-JMM-2
17676: PPUSH
17677: CALL_OW 88
// if IsOK ( Lisa ) then
17681: LD_EXP 6
17685: PPUSH
17686: CALL_OW 302
17690: IFFALSE 17704
// Say ( Lisa , D3b-Lisa-2 ) ;
17692: LD_EXP 6
17696: PPUSH
17697: LD_STRING D3b-Lisa-2
17699: PPUSH
17700: CALL_OW 88
// end else
17704: GO 17771
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
17706: LD_EXP 10
17710: PPUSH
17711: LD_INT 26
17713: PUSH
17714: LD_INT 1
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 72
17725: PPUSH
17726: LD_STRING D3b-Sol1-1
17728: PPUSH
17729: LD_STRING D3b-Sol1-1
17731: PPUSH
17732: CALL 6160 0 3
// Say ( JMM , D3b-JMM-2 ) ;
17736: LD_EXP 1
17740: PPUSH
17741: LD_STRING D3b-JMM-2
17743: PPUSH
17744: CALL_OW 88
// if IsOK ( Lisa ) then
17748: LD_EXP 6
17752: PPUSH
17753: CALL_OW 302
17757: IFFALSE 17771
// Say ( Lisa , D3b-Lisa-2 ) ;
17759: LD_EXP 6
17763: PPUSH
17764: LD_STRING D3b-Lisa-2
17766: PPUSH
17767: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17771: LD_EXP 2
17775: PPUSH
17776: CALL_OW 302
17780: PUSH
17781: LD_EXP 11
17785: PUSH
17786: LD_INT 2
17788: EQUAL
17789: AND
17790: PUSH
17791: LD_STRING 06_JoanStatus_1
17793: PPUSH
17794: LD_INT 0
17796: PPUSH
17797: CALL_OW 30
17801: PUSH
17802: LD_INT 1
17804: EQUAL
17805: AND
17806: IFFALSE 17857
// begin Say ( Brown , D3b-Brown-1 ) ;
17808: LD_EXP 2
17812: PPUSH
17813: LD_STRING D3b-Brown-1
17815: PPUSH
17816: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
17820: LD_EXP 1
17824: PPUSH
17825: LD_STRING D3b-JMM-2
17827: PPUSH
17828: CALL_OW 88
// if IsOK ( Lisa ) then
17832: LD_EXP 6
17836: PPUSH
17837: CALL_OW 302
17841: IFFALSE 17855
// Say ( Lisa , D3b-Lisa-2 ) ;
17843: LD_EXP 6
17847: PPUSH
17848: LD_STRING D3b-Lisa-2
17850: PPUSH
17851: CALL_OW 88
// end else
17855: GO 17922
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
17857: LD_EXP 10
17861: PPUSH
17862: LD_INT 26
17864: PUSH
17865: LD_INT 1
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PPUSH
17872: CALL_OW 72
17876: PPUSH
17877: LD_STRING D3b-Sol1-1
17879: PPUSH
17880: LD_STRING D3b-Sol1-1
17882: PPUSH
17883: CALL 6160 0 3
// Say ( JMM , D3b-JMM-2 ) ;
17887: LD_EXP 1
17891: PPUSH
17892: LD_STRING D3b-JMM-2
17894: PPUSH
17895: CALL_OW 88
// if IsOK ( Lisa ) then
17899: LD_EXP 6
17903: PPUSH
17904: CALL_OW 302
17908: IFFALSE 17922
// Say ( Lisa , D3b-Lisa-2 ) ;
17910: LD_EXP 6
17914: PPUSH
17915: LD_STRING D3b-Lisa-2
17917: PPUSH
17918: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17922: LD_EXP 12
17926: PPUSH
17927: CALL_OW 302
17931: PUSH
17932: LD_EXP 11
17936: PUSH
17937: LD_INT 3
17939: EQUAL
17940: AND
17941: PUSH
17942: LD_STRING 06_JoanStatus_1
17944: PPUSH
17945: LD_INT 0
17947: PPUSH
17948: CALL_OW 30
17952: PUSH
17953: LD_INT 1
17955: EQUAL
17956: AND
17957: IFFALSE 18008
// begin Say ( Houten , D3b-VanH-1 ) ;
17959: LD_EXP 12
17963: PPUSH
17964: LD_STRING D3b-VanH-1
17966: PPUSH
17967: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
17971: LD_EXP 1
17975: PPUSH
17976: LD_STRING D3b-JMM-2
17978: PPUSH
17979: CALL_OW 88
// if IsOK ( Lisa ) then
17983: LD_EXP 6
17987: PPUSH
17988: CALL_OW 302
17992: IFFALSE 18006
// Say ( Lisa , D3b-Lisa-2 ) ;
17994: LD_EXP 6
17998: PPUSH
17999: LD_STRING D3b-Lisa-2
18001: PPUSH
18002: CALL_OW 88
// end else
18006: GO 18073
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
18008: LD_EXP 10
18012: PPUSH
18013: LD_INT 26
18015: PUSH
18016: LD_INT 1
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PPUSH
18023: CALL_OW 72
18027: PPUSH
18028: LD_STRING D3b-Sol1-1
18030: PPUSH
18031: LD_STRING D3b-Sol1-1
18033: PPUSH
18034: CALL 6160 0 3
// Say ( JMM , D3b-JMM-2 ) ;
18038: LD_EXP 1
18042: PPUSH
18043: LD_STRING D3b-JMM-2
18045: PPUSH
18046: CALL_OW 88
// if IsOK ( Lisa ) then
18050: LD_EXP 6
18054: PPUSH
18055: CALL_OW 302
18059: IFFALSE 18073
// Say ( Lisa , D3b-Lisa-2 ) ;
18061: LD_EXP 6
18065: PPUSH
18066: LD_STRING D3b-Lisa-2
18068: PPUSH
18069: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
18073: LD_INT 22
18075: PUSH
18076: LD_INT 1
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 21
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 26
18095: PUSH
18096: LD_INT 1
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 2
18105: PUSH
18106: LD_INT 25
18108: PUSH
18109: LD_INT 1
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 25
18118: PUSH
18119: LD_INT 2
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 25
18128: PUSH
18129: LD_INT 3
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 25
18138: PUSH
18139: LD_INT 4
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: PPUSH
18159: CALL_OW 69
18163: PUSH
18164: LD_EXP 1
18168: PUSH
18169: EMPTY
18170: LIST
18171: DIFF
18172: PPUSH
18173: LD_STRING DCa-Sol1-1
18175: PPUSH
18176: LD_STRING DCa-Sol1-1
18178: PPUSH
18179: CALL 6160 0 3
// Say ( JMM , DCb-JMM-1 ) ;
18183: LD_EXP 1
18187: PPUSH
18188: LD_STRING DCb-JMM-1
18190: PPUSH
18191: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
18195: LD_INT 22
18197: PUSH
18198: LD_INT 1
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 21
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 26
18217: PUSH
18218: LD_INT 1
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PUSH
18225: LD_INT 2
18227: PUSH
18228: LD_INT 25
18230: PUSH
18231: LD_INT 1
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 25
18240: PUSH
18241: LD_INT 2
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 25
18250: PUSH
18251: LD_INT 3
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 25
18260: PUSH
18261: LD_INT 4
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: PPUSH
18281: CALL_OW 69
18285: PUSH
18286: LD_EXP 1
18290: PUSH
18291: EMPTY
18292: LIST
18293: DIFF
18294: PPUSH
18295: LD_STRING DCb-Sol1-1
18297: PPUSH
18298: LD_STRING DCb-Sol1-1
18300: PPUSH
18301: CALL 6160 0 3
// Say ( JMM , DCb-JMM-2 ) ;
18305: LD_EXP 1
18309: PPUSH
18310: LD_STRING DCb-JMM-2
18312: PPUSH
18313: CALL_OW 88
// secondAttack = 1 ;
18317: LD_ADDR_EXP 33
18321: PUSH
18322: LD_INT 1
18324: ST_TO_ADDR
// end ;
18325: END
// every 0 0$01 trigger JMMArrive = 1 do
18326: LD_EXP 38
18330: PUSH
18331: LD_INT 1
18333: EQUAL
18334: IFFALSE 18414
18336: GO 18338
18338: DISABLE
// begin wait ( 3 3$0 ) ;
18339: LD_INT 6300
18341: PPUSH
18342: CALL_OW 67
// DialogueOn ;
18346: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18350: LD_EXP 22
18354: PPUSH
18355: LD_STRING D4-Pow-1
18357: PPUSH
18358: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18362: LD_EXP 1
18366: PPUSH
18367: LD_STRING D4-JMM-1
18369: PPUSH
18370: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18374: LD_EXP 22
18378: PPUSH
18379: LD_STRING D4-Pow-2
18381: PPUSH
18382: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18386: LD_EXP 1
18390: PPUSH
18391: LD_STRING D4-JMM-2
18393: PPUSH
18394: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18398: LD_EXP 22
18402: PPUSH
18403: LD_STRING D4-Pow-3
18405: PPUSH
18406: CALL_OW 94
// DialogueOff ;
18410: CALL_OW 7
// end ;
18414: END
// every 0 0$01 trigger JMMArrive = 1 do
18415: LD_EXP 38
18419: PUSH
18420: LD_INT 1
18422: EQUAL
18423: IFFALSE 18455
18425: GO 18427
18427: DISABLE
// begin wait ( 8 8$0 ) ;
18428: LD_INT 16800
18430: PPUSH
18431: CALL_OW 67
// DialogueOn ;
18435: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18439: LD_EXP 22
18443: PPUSH
18444: LD_STRING D4a-Pow-1
18446: PPUSH
18447: CALL_OW 94
// DialogueOff ;
18451: CALL_OW 7
// end ;
18455: END
// every 0 0$01 trigger JMMArrive = 1 do
18456: LD_EXP 38
18460: PUSH
18461: LD_INT 1
18463: EQUAL
18464: IFFALSE 18509
18466: GO 18468
18468: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
18469: LD_INT 21000
18471: PUSH
18472: LD_INT 25200
18474: PUSH
18475: LD_INT 31500
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: PUSH
18483: LD_OWVAR 67
18487: ARRAY
18488: PPUSH
18489: CALL_OW 67
// PrepareSikorsky ;
18493: CALL 4744 0 0
// SikorskyArrive = 1 ;
18497: LD_ADDR_EXP 17
18501: PUSH
18502: LD_INT 1
18504: ST_TO_ADDR
// PrepareSikorskyArmy ;
18505: CALL 4884 0 0
// end ;
18509: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
18510: LD_EXP 16
18514: PPUSH
18515: LD_INT 5
18517: PPUSH
18518: CALL_OW 308
18522: IFFALSE 18714
18524: GO 18526
18526: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
18527: LD_EXP 16
18531: PPUSH
18532: CALL_OW 87
// DialogueOn ;
18536: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18540: LD_EXP 15
18544: PPUSH
18545: LD_STRING D5-Sik-1
18547: PPUSH
18548: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
18552: LD_EXP 1
18556: PPUSH
18557: LD_STRING D5-JMM-1a
18559: PPUSH
18560: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18564: LD_EXP 15
18568: PPUSH
18569: LD_STRING D5-Sik-2
18571: PPUSH
18572: CALL_OW 88
// case query ( QSikorski ) of 1 :
18576: LD_STRING QSikorski
18578: PPUSH
18579: CALL_OW 97
18583: PUSH
18584: LD_INT 1
18586: DOUBLE
18587: EQUAL
18588: IFTRUE 18592
18590: GO 18615
18592: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18593: LD_EXP 15
18597: PPUSH
18598: LD_STRING D5a-Sik-1
18600: PPUSH
18601: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
18605: LD_ADDR_EXP 18
18609: PUSH
18610: LD_INT 2100
18612: ST_TO_ADDR
// end ; 2 :
18613: GO 18702
18615: LD_INT 2
18617: DOUBLE
18618: EQUAL
18619: IFTRUE 18623
18621: GO 18646
18623: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18624: LD_EXP 15
18628: PPUSH
18629: LD_STRING D5b-Sik-1
18631: PPUSH
18632: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
18636: LD_ADDR_EXP 18
18640: PUSH
18641: LD_INT 10500
18643: ST_TO_ADDR
// end ; 3 :
18644: GO 18702
18646: LD_INT 3
18648: DOUBLE
18649: EQUAL
18650: IFTRUE 18654
18652: GO 18701
18654: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18655: LD_EXP 15
18659: PPUSH
18660: LD_STRING D5c-Sik-1
18662: PPUSH
18663: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18667: LD_EXP 1
18671: PPUSH
18672: LD_STRING D5c-JMM-1
18674: PPUSH
18675: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18679: LD_EXP 15
18683: PPUSH
18684: LD_STRING D5c-Sik-2
18686: PPUSH
18687: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
18691: LD_ADDR_EXP 18
18695: PUSH
18696: LD_INT 10500
18698: ST_TO_ADDR
// end ; end ;
18699: GO 18702
18701: POP
// DialogueOff ;
18702: CALL_OW 7
// timerStatus = 1 ;
18706: LD_ADDR_EXP 34
18710: PUSH
18711: LD_INT 1
18713: ST_TO_ADDR
// end ;
18714: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
18715: LD_EXP 18
18719: PUSH
18720: LD_INT 35
18722: LESS
18723: IFFALSE 18771
18725: GO 18727
18727: DISABLE
// begin timerStatus = 0 ;
18728: LD_ADDR_EXP 34
18732: PUSH
18733: LD_INT 0
18735: ST_TO_ADDR
// DialogueOn ;
18736: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18740: LD_EXP 15
18744: PPUSH
18745: LD_STRING D6-Sik-1
18747: PPUSH
18748: CALL_OW 88
// DialogueOff ;
18752: CALL_OW 7
// SikorskyAI = 1 ;
18756: LD_ADDR_EXP 19
18760: PUSH
18761: LD_INT 1
18763: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
18764: LD_STRING M2
18766: PPUSH
18767: CALL_OW 337
// end ;
18771: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
18772: LD_EXP 16
18776: PPUSH
18777: LD_INT 18
18779: PPUSH
18780: CALL_OW 308
18784: IFFALSE 18868
18786: GO 18788
18788: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18789: LD_EXP 15
18793: PPUSH
18794: LD_STRING D7-Sik-1
18796: PPUSH
18797: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
18801: LD_EXP 1
18805: PPUSH
18806: LD_INT 24
18808: PPUSH
18809: CALL_OW 308
18813: PUSH
18814: LD_EXP 1
18818: PPUSH
18819: CALL_OW 310
18823: OR
18824: IFFALSE 18848
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18826: LD_EXP 15
18830: PPUSH
18831: LD_STRING D7a-Sik-1
18833: PPUSH
18834: CALL_OW 88
// SikorskyStatus = 1 ;
18838: LD_ADDR_EXP 20
18842: PUSH
18843: LD_INT 1
18845: ST_TO_ADDR
// end else
18846: GO 18868
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18848: LD_EXP 15
18852: PPUSH
18853: LD_STRING D7b-Sik-1
18855: PPUSH
18856: CALL_OW 88
// SikorskyStatus = 2 ;
18860: LD_ADDR_EXP 20
18864: PUSH
18865: LD_INT 2
18867: ST_TO_ADDR
// end ; end ;
18868: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
18869: LD_EXP 35
18873: PUSH
18874: LD_INT 1
18876: EQUAL
18877: IFFALSE 18986
18879: GO 18881
18881: DISABLE
18882: LD_INT 0
18884: PPUSH
// begin enable ;
18885: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
18886: LD_ADDR_VAR 0 1
18890: PUSH
18891: LD_INT 22
18893: PUSH
18894: LD_INT 3
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PPUSH
18901: CALL_OW 69
18905: PUSH
18906: FOR_IN
18907: IFFALSE 18934
// if IsInArea ( i , RussianEscape ) then
18909: LD_VAR 0 1
18913: PPUSH
18914: LD_INT 22
18916: PPUSH
18917: CALL_OW 308
18921: IFFALSE 18932
// RemoveUnit ( i ) ;
18923: LD_VAR 0 1
18927: PPUSH
18928: CALL_OW 64
18932: GO 18906
18934: POP
18935: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
18936: LD_ADDR_VAR 0 1
18940: PUSH
18941: LD_INT 22
18943: PUSH
18944: LD_INT 6
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PPUSH
18951: CALL_OW 69
18955: PUSH
18956: FOR_IN
18957: IFFALSE 18984
// if IsInArea ( i , RussianEscape ) then
18959: LD_VAR 0 1
18963: PPUSH
18964: LD_INT 22
18966: PPUSH
18967: CALL_OW 308
18971: IFFALSE 18982
// RemoveUnit ( i ) ;
18973: LD_VAR 0 1
18977: PPUSH
18978: CALL_OW 64
18982: GO 18956
18984: POP
18985: POP
// end ; end_of_file
18986: PPOPN 1
18988: END
// on BuildingComplete ( building ) do var tmp , un ;
18989: LD_INT 0
18991: PPUSH
18992: PPUSH
// begin if GetSide ( building ) = 3 then
18993: LD_VAR 0 1
18997: PPUSH
18998: CALL_OW 255
19002: PUSH
19003: LD_INT 3
19005: EQUAL
19006: IFFALSE 19493
// begin if GetBType ( building ) = b_depot then
19008: LD_VAR 0 1
19012: PPUSH
19013: CALL_OW 266
19017: PUSH
19018: LD_INT 0
19020: EQUAL
19021: IFFALSE 19089
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
19023: LD_VAR 0 1
19027: PPUSH
19028: CALL_OW 274
19032: PPUSH
19033: LD_INT 1
19035: PPUSH
19036: LD_INT 5000
19038: PPUSH
19039: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
19043: LD_VAR 0 1
19047: PPUSH
19048: CALL_OW 274
19052: PPUSH
19053: LD_INT 2
19055: PPUSH
19056: LD_INT 5000
19058: PPUSH
19059: CALL_OW 277
// SetBName ( building , konev ) ;
19063: LD_VAR 0 1
19067: PPUSH
19068: LD_STRING konev
19070: PPUSH
19071: CALL_OW 500
// ruDepot = building ;
19075: LD_ADDR_EXP 27
19079: PUSH
19080: LD_VAR 0 1
19084: ST_TO_ADDR
// BuildRussianBase ;
19085: CALL 6765 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
19089: LD_VAR 0 1
19093: PPUSH
19094: CALL_OW 266
19098: PUSH
19099: LD_INT 0
19101: EQUAL
19102: PUSH
19103: LD_VAR 0 1
19107: PPUSH
19108: CALL_OW 266
19112: PUSH
19113: LD_INT 2
19115: EQUAL
19116: OR
19117: PUSH
19118: LD_VAR 0 1
19122: PPUSH
19123: CALL_OW 266
19127: PUSH
19128: LD_INT 4
19130: EQUAL
19131: OR
19132: IFFALSE 19143
// ComUpgrade ( building ) ;
19134: LD_VAR 0 1
19138: PPUSH
19139: CALL_OW 146
// if GetBType ( building ) = b_lab then
19143: LD_VAR 0 1
19147: PPUSH
19148: CALL_OW 266
19152: PUSH
19153: LD_INT 6
19155: EQUAL
19156: IFFALSE 19207
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19158: LD_VAR 0 1
19162: PPUSH
19163: LD_INT 10
19165: PPUSH
19166: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
19170: LD_VAR 0 1
19174: PPUSH
19175: LD_INT 12
19177: PPUSH
19178: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
19182: LD_INT 3
19184: PPUSH
19185: LD_VAR 0 1
19189: PPUSH
19190: LD_INT 3
19192: PPUSH
19193: CALL 7320 0 3
// ruLab = building ;
19197: LD_ADDR_EXP 28
19201: PUSH
19202: LD_VAR 0 1
19206: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
19207: LD_VAR 0 1
19211: PPUSH
19212: CALL_OW 266
19216: PUSH
19217: LD_INT 32
19219: EQUAL
19220: IFFALSE 19338
// begin uc_side = 3 ;
19222: LD_ADDR_OWVAR 20
19226: PUSH
19227: LD_INT 3
19229: ST_TO_ADDR
// uc_nation = 3 ;
19230: LD_ADDR_OWVAR 21
19234: PUSH
19235: LD_INT 3
19237: ST_TO_ADDR
// hc_gallery =  ;
19238: LD_ADDR_OWVAR 33
19242: PUSH
19243: LD_STRING 
19245: ST_TO_ADDR
// hc_name =  ;
19246: LD_ADDR_OWVAR 26
19250: PUSH
19251: LD_STRING 
19253: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
19254: LD_INT 0
19256: PPUSH
19257: LD_INT 1
19259: PPUSH
19260: LD_EXP 24
19264: PPUSH
19265: LD_EXP 25
19269: PPUSH
19270: CALL_OW 12
19274: PPUSH
19275: CALL_OW 380
// un = CreateHuman ;
19279: LD_ADDR_VAR 0 3
19283: PUSH
19284: CALL_OW 44
19288: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
19289: LD_VAR 0 3
19293: PPUSH
19294: LD_VAR 0 1
19298: PPUSH
19299: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19303: LD_VAR 0 1
19307: PPUSH
19308: LD_INT 43
19310: PUSH
19311: LD_INT 44
19313: PUSH
19314: LD_INT 46
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 1
19324: PPUSH
19325: LD_INT 3
19327: PPUSH
19328: CALL_OW 12
19332: ARRAY
19333: PPUSH
19334: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 266
19347: PUSH
19348: LD_INT 33
19350: EQUAL
19351: IFFALSE 19388
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19353: LD_VAR 0 1
19357: PPUSH
19358: LD_INT 43
19360: PUSH
19361: LD_INT 44
19363: PUSH
19364: LD_INT 46
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 1
19374: PPUSH
19375: LD_INT 3
19377: PPUSH
19378: CALL_OW 12
19382: ARRAY
19383: PPUSH
19384: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
19388: LD_VAR 0 1
19392: PPUSH
19393: CALL_OW 266
19397: PUSH
19398: LD_INT 24
19400: EQUAL
19401: IFFALSE 19411
// russianAI = 1 ;
19403: LD_ADDR_EXP 26
19407: PUSH
19408: LD_INT 1
19410: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
19411: LD_EXP 30
19415: PUSH
19416: LD_INT 0
19418: GREATER
19419: IFFALSE 19493
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19421: LD_ADDR_EXP 30
19425: PUSH
19426: LD_EXP 30
19430: PPUSH
19431: LD_INT 1
19433: PPUSH
19434: CALL_OW 3
19438: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19439: LD_ADDR_EXP 30
19443: PUSH
19444: LD_EXP 30
19448: PPUSH
19449: LD_INT 1
19451: PPUSH
19452: CALL_OW 3
19456: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19457: LD_ADDR_EXP 30
19461: PUSH
19462: LD_EXP 30
19466: PPUSH
19467: LD_INT 1
19469: PPUSH
19470: CALL_OW 3
19474: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19475: LD_ADDR_EXP 30
19479: PUSH
19480: LD_EXP 30
19484: PPUSH
19485: LD_INT 1
19487: PPUSH
19488: CALL_OW 3
19492: ST_TO_ADDR
// end ; end ; end ;
19493: PPOPN 3
19495: END
// on UpgradeComplete ( building ) do var i ;
19496: LD_INT 0
19498: PPUSH
// begin if GetSide ( building ) = 3 then
19499: LD_VAR 0 1
19503: PPUSH
19504: CALL_OW 255
19508: PUSH
19509: LD_INT 3
19511: EQUAL
19512: IFFALSE 19693
// begin if GetBType ( building ) = b_factory then
19514: LD_VAR 0 1
19518: PPUSH
19519: CALL_OW 266
19523: PUSH
19524: LD_INT 3
19526: EQUAL
19527: IFFALSE 19594
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
19529: LD_ADDR_VAR 0 2
19533: PUSH
19534: LD_INT 22
19536: PUSH
19537: LD_INT 3
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 25
19546: PUSH
19547: LD_INT 3
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PPUSH
19558: CALL_OW 69
19562: PUSH
19563: FOR_IN
19564: IFFALSE 19582
// ComEnterUnit ( i , building ) ;
19566: LD_VAR 0 2
19570: PPUSH
19571: LD_VAR 0 1
19575: PPUSH
19576: CALL_OW 120
19580: GO 19563
19582: POP
19583: POP
// ruFab = building ;
19584: LD_ADDR_EXP 29
19588: PUSH
19589: LD_VAR 0 1
19593: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
19594: LD_VAR 0 1
19598: PPUSH
19599: CALL_OW 266
19603: PUSH
19604: LD_INT 8
19606: EQUAL
19607: IFFALSE 19664
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19609: LD_ADDR_VAR 0 2
19613: PUSH
19614: LD_INT 22
19616: PUSH
19617: LD_INT 3
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 25
19626: PUSH
19627: LD_INT 4
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PPUSH
19638: CALL_OW 69
19642: PUSH
19643: FOR_IN
19644: IFFALSE 19662
// ComEnterUnit ( i , building ) ;
19646: LD_VAR 0 2
19650: PPUSH
19651: LD_VAR 0 1
19655: PPUSH
19656: CALL_OW 120
19660: GO 19643
19662: POP
19663: POP
// if GetBType ( building ) = b_warehouse then
19664: LD_VAR 0 1
19668: PPUSH
19669: CALL_OW 266
19673: PUSH
19674: LD_INT 1
19676: EQUAL
19677: IFFALSE 19693
// begin ComEnterUnit ( Borodin , building ) ;
19679: LD_EXP 23
19683: PPUSH
19684: LD_VAR 0 1
19688: PPUSH
19689: CALL_OW 120
// end ; end ; end ;
19693: PPOPN 2
19695: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
19696: LD_VAR 0 1
19700: PPUSH
19701: CALL_OW 247
19705: PUSH
19706: LD_INT 2
19708: EQUAL
19709: PUSH
19710: LD_VAR 0 1
19714: PPUSH
19715: CALL_OW 263
19719: PUSH
19720: LD_INT 3
19722: EQUAL
19723: AND
19724: PUSH
19725: LD_EXP 40
19729: PUSH
19730: LD_INT 0
19732: EQUAL
19733: AND
19734: IFFALSE 19852
// begin varEvent1 = 1 ;
19736: LD_ADDR_EXP 40
19740: PUSH
19741: LD_INT 1
19743: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
19744: LD_VAR 0 1
19748: PPUSH
19749: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
19753: LD_INT 22
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 21
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: LD_INT 25
19778: PUSH
19779: LD_INT 1
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 25
19788: PUSH
19789: LD_INT 2
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 25
19798: PUSH
19799: LD_INT 3
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 25
19808: PUSH
19809: LD_INT 4
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: LIST
19827: PPUSH
19828: CALL_OW 69
19832: PUSH
19833: LD_EXP 1
19837: PUSH
19838: EMPTY
19839: LIST
19840: DIFF
19841: PPUSH
19842: LD_STRING DC-Sol1-1
19844: PPUSH
19845: LD_STRING DC-FSol1-1
19847: PPUSH
19848: CALL 6160 0 3
// end ; end ;
19852: PPOPN 1
19854: END
// on UnitDestroyed ( unit ) do var i ;
19855: LD_INT 0
19857: PPUSH
// begin if GetSide ( unit ) = 3 then
19858: LD_VAR 0 1
19862: PPUSH
19863: CALL_OW 255
19867: PUSH
19868: LD_INT 3
19870: EQUAL
19871: IFFALSE 20641
// begin if GetType ( unit ) = unit_building then
19873: LD_VAR 0 1
19877: PPUSH
19878: CALL_OW 247
19882: PUSH
19883: LD_INT 3
19885: EQUAL
19886: IFFALSE 20578
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
19888: LD_VAR 0 1
19892: PPUSH
19893: CALL_OW 266
19897: PUSH
19898: LD_INT 31
19900: EQUAL
19901: PUSH
19902: LD_VAR 0 1
19906: PPUSH
19907: CALL_OW 266
19911: PUSH
19912: LD_INT 32
19914: EQUAL
19915: OR
19916: PUSH
19917: LD_VAR 0 1
19921: PPUSH
19922: CALL_OW 266
19926: PUSH
19927: LD_INT 36
19929: EQUAL
19930: OR
19931: PUSH
19932: LD_VAR 0 1
19936: PPUSH
19937: CALL_OW 266
19941: PUSH
19942: LD_INT 0
19944: EQUAL
19945: OR
19946: PUSH
19947: LD_VAR 0 1
19951: PPUSH
19952: CALL_OW 266
19956: PUSH
19957: LD_INT 24
19959: EQUAL
19960: OR
19961: PUSH
19962: LD_VAR 0 1
19966: PPUSH
19967: CALL_OW 266
19971: PUSH
19972: LD_INT 17
19974: EQUAL
19975: OR
19976: PUSH
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 266
19986: PUSH
19987: LD_INT 25
19989: EQUAL
19990: OR
19991: PUSH
19992: LD_VAR 0 1
19996: PPUSH
19997: CALL_OW 266
20001: PUSH
20002: LD_INT 19
20004: EQUAL
20005: OR
20006: PUSH
20007: LD_VAR 0 1
20011: PPUSH
20012: CALL_OW 266
20016: PUSH
20017: LD_INT 20
20019: EQUAL
20020: OR
20021: PUSH
20022: LD_VAR 0 1
20026: PPUSH
20027: CALL_OW 266
20031: PUSH
20032: LD_INT 18
20034: EQUAL
20035: OR
20036: PUSH
20037: LD_VAR 0 1
20041: PPUSH
20042: CALL_OW 266
20046: PUSH
20047: LD_INT 21
20049: EQUAL
20050: OR
20051: PUSH
20052: LD_VAR 0 1
20056: PPUSH
20057: CALL_OW 266
20061: PUSH
20062: LD_INT 23
20064: EQUAL
20065: OR
20066: PUSH
20067: LD_VAR 0 1
20071: PPUSH
20072: CALL_OW 266
20076: PUSH
20077: LD_INT 16
20079: EQUAL
20080: OR
20081: PUSH
20082: LD_VAR 0 1
20086: PPUSH
20087: CALL_OW 266
20091: PUSH
20092: LD_INT 6
20094: EQUAL
20095: OR
20096: PUSH
20097: LD_VAR 0 1
20101: PPUSH
20102: CALL_OW 266
20106: PUSH
20107: LD_INT 29
20109: EQUAL
20110: OR
20111: PUSH
20112: LD_VAR 0 1
20116: PPUSH
20117: CALL_OW 266
20121: PUSH
20122: LD_INT 26
20124: EQUAL
20125: OR
20126: PUSH
20127: LD_VAR 0 1
20131: PPUSH
20132: CALL_OW 266
20136: PUSH
20137: LD_INT 30
20139: EQUAL
20140: OR
20141: PUSH
20142: LD_VAR 0 1
20146: PPUSH
20147: CALL_OW 266
20151: PUSH
20152: LD_INT 28
20154: EQUAL
20155: OR
20156: PUSH
20157: LD_VAR 0 1
20161: PPUSH
20162: CALL_OW 266
20166: PUSH
20167: LD_INT 27
20169: EQUAL
20170: OR
20171: PUSH
20172: LD_VAR 0 1
20176: PPUSH
20177: CALL_OW 266
20181: PUSH
20182: LD_INT 33
20184: EQUAL
20185: OR
20186: PUSH
20187: LD_VAR 0 1
20191: PPUSH
20192: CALL_OW 266
20196: PUSH
20197: LD_INT 2
20199: EQUAL
20200: OR
20201: PUSH
20202: LD_VAR 0 1
20206: PPUSH
20207: CALL_OW 266
20211: PUSH
20212: LD_INT 4
20214: EQUAL
20215: OR
20216: IFFALSE 20302
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20218: LD_ADDR_EXP 30
20222: PUSH
20223: LD_EXP 30
20227: PUSH
20228: LD_VAR 0 1
20232: PPUSH
20233: CALL_OW 266
20237: ADD
20238: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20239: LD_ADDR_EXP 30
20243: PUSH
20244: LD_EXP 30
20248: PUSH
20249: LD_VAR 0 1
20253: PPUSH
20254: CALL_OW 250
20258: ADD
20259: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20260: LD_ADDR_EXP 30
20264: PUSH
20265: LD_EXP 30
20269: PUSH
20270: LD_VAR 0 1
20274: PPUSH
20275: CALL_OW 251
20279: ADD
20280: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20281: LD_ADDR_EXP 30
20285: PUSH
20286: LD_EXP 30
20290: PUSH
20291: LD_VAR 0 1
20295: PPUSH
20296: CALL_OW 254
20300: ADD
20301: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
20302: LD_VAR 0 1
20306: PPUSH
20307: CALL_OW 266
20311: PUSH
20312: LD_INT 1
20314: EQUAL
20315: IFFALSE 20394
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
20317: LD_ADDR_EXP 30
20321: PUSH
20322: LD_EXP 30
20326: PUSH
20327: LD_INT 0
20329: ADD
20330: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20331: LD_ADDR_EXP 30
20335: PUSH
20336: LD_EXP 30
20340: PUSH
20341: LD_VAR 0 1
20345: PPUSH
20346: CALL_OW 250
20350: ADD
20351: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20352: LD_ADDR_EXP 30
20356: PUSH
20357: LD_EXP 30
20361: PUSH
20362: LD_VAR 0 1
20366: PPUSH
20367: CALL_OW 251
20371: ADD
20372: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20373: LD_ADDR_EXP 30
20377: PUSH
20378: LD_EXP 30
20382: PUSH
20383: LD_VAR 0 1
20387: PPUSH
20388: CALL_OW 254
20392: ADD
20393: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20394: LD_VAR 0 1
20398: PPUSH
20399: CALL_OW 266
20403: PUSH
20404: LD_INT 3
20406: EQUAL
20407: IFFALSE 20486
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20409: LD_ADDR_EXP 30
20413: PUSH
20414: LD_EXP 30
20418: PUSH
20419: LD_INT 2
20421: ADD
20422: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20423: LD_ADDR_EXP 30
20427: PUSH
20428: LD_EXP 30
20432: PUSH
20433: LD_VAR 0 1
20437: PPUSH
20438: CALL_OW 250
20442: ADD
20443: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20444: LD_ADDR_EXP 30
20448: PUSH
20449: LD_EXP 30
20453: PUSH
20454: LD_VAR 0 1
20458: PPUSH
20459: CALL_OW 251
20463: ADD
20464: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20465: LD_ADDR_EXP 30
20469: PUSH
20470: LD_EXP 30
20474: PUSH
20475: LD_VAR 0 1
20479: PPUSH
20480: CALL_OW 254
20484: ADD
20485: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
20486: LD_VAR 0 1
20490: PPUSH
20491: CALL_OW 266
20495: PUSH
20496: LD_INT 5
20498: EQUAL
20499: IFFALSE 20578
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
20501: LD_ADDR_EXP 30
20505: PUSH
20506: LD_EXP 30
20510: PUSH
20511: LD_INT 4
20513: ADD
20514: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20515: LD_ADDR_EXP 30
20519: PUSH
20520: LD_EXP 30
20524: PUSH
20525: LD_VAR 0 1
20529: PPUSH
20530: CALL_OW 250
20534: ADD
20535: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20536: LD_ADDR_EXP 30
20540: PUSH
20541: LD_EXP 30
20545: PUSH
20546: LD_VAR 0 1
20550: PPUSH
20551: CALL_OW 251
20555: ADD
20556: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20557: LD_ADDR_EXP 30
20561: PUSH
20562: LD_EXP 30
20566: PUSH
20567: LD_VAR 0 1
20571: PPUSH
20572: CALL_OW 254
20576: ADD
20577: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
20578: LD_VAR 0 1
20582: PPUSH
20583: CALL_OW 247
20587: PUSH
20588: LD_INT 1
20590: EQUAL
20591: IFFALSE 20641
// begin for i in defenders_list do
20593: LD_ADDR_VAR 0 2
20597: PUSH
20598: LD_EXP 31
20602: PUSH
20603: FOR_IN
20604: IFFALSE 20639
// if i = unit then
20606: LD_VAR 0 2
20610: PUSH
20611: LD_VAR 0 1
20615: EQUAL
20616: IFFALSE 20637
// defenders_list = defenders_list diff [ unit ] ;
20618: LD_ADDR_EXP 31
20622: PUSH
20623: LD_EXP 31
20627: PUSH
20628: LD_VAR 0 1
20632: PUSH
20633: EMPTY
20634: LIST
20635: DIFF
20636: ST_TO_ADDR
20637: GO 20603
20639: POP
20640: POP
// end ; end ; end ; end_of_file
20641: PPOPN 2
20643: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20644: GO 20646
20646: DISABLE
20647: LD_INT 0
20649: PPUSH
// begin enemyWayX = [ ] ;
20650: LD_ADDR_EXP 44
20654: PUSH
20655: EMPTY
20656: ST_TO_ADDR
// enemyWayY = [ ] ;
20657: LD_ADDR_EXP 45
20661: PUSH
20662: EMPTY
20663: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
20664: LD_ADDR_VAR 0 1
20668: PUSH
20669: LD_INT 1
20671: PPUSH
20672: LD_INT 3
20674: PPUSH
20675: CALL_OW 12
20679: ST_TO_ADDR
// if rnd = 1 then
20680: LD_VAR 0 1
20684: PUSH
20685: LD_INT 1
20687: EQUAL
20688: IFFALSE 20728
// begin enemyWayX = [ 73 , 46 , 29 ] ;
20690: LD_ADDR_EXP 44
20694: PUSH
20695: LD_INT 73
20697: PUSH
20698: LD_INT 46
20700: PUSH
20701: LD_INT 29
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: LIST
20708: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
20709: LD_ADDR_EXP 45
20713: PUSH
20714: LD_INT 71
20716: PUSH
20717: LD_INT 43
20719: PUSH
20720: LD_INT 29
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: LIST
20727: ST_TO_ADDR
// end ; if rnd = 2 then
20728: LD_VAR 0 1
20732: PUSH
20733: LD_INT 2
20735: EQUAL
20736: IFFALSE 20760
// begin enemyWayX = [ 64 ] ;
20738: LD_ADDR_EXP 44
20742: PUSH
20743: LD_INT 64
20745: PUSH
20746: EMPTY
20747: LIST
20748: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
20749: LD_ADDR_EXP 45
20753: PUSH
20754: LD_INT 43
20756: PUSH
20757: EMPTY
20758: LIST
20759: ST_TO_ADDR
// end ; if rnd = 3 then
20760: LD_VAR 0 1
20764: PUSH
20765: LD_INT 3
20767: EQUAL
20768: IFFALSE 20792
// begin enemyWayX = [ 80 ] ;
20770: LD_ADDR_EXP 44
20774: PUSH
20775: LD_INT 80
20777: PUSH
20778: EMPTY
20779: LIST
20780: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
20781: LD_ADDR_EXP 45
20785: PUSH
20786: LD_INT 28
20788: PUSH
20789: EMPTY
20790: LIST
20791: ST_TO_ADDR
// end ; enable ;
20792: ENABLE
// end ;
20793: PPOPN 1
20795: END
// every 0 0$1 do
20796: GO 20798
20798: DISABLE
// begin enable ;
20799: ENABLE
// if escapeAvalaible = 0 then
20800: LD_EXP 35
20804: PUSH
20805: LD_INT 0
20807: EQUAL
20808: IFFALSE 20820
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
20810: LD_INT 3
20812: PPUSH
20813: LD_INT 6
20815: PPUSH
20816: CALL 7405 0 2
// if escapeAvalaible = 0 then
20820: LD_EXP 35
20824: PUSH
20825: LD_INT 0
20827: EQUAL
20828: IFFALSE 20840
// DefenseBase ( 1 , RussianBaseTerritory ) ;
20830: LD_INT 1
20832: PPUSH
20833: LD_INT 24
20835: PPUSH
20836: CALL 8199 0 2
// if russianAI = 1 then
20840: LD_EXP 26
20844: PUSH
20845: LD_INT 1
20847: EQUAL
20848: IFFALSE 20918
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
20850: LD_INT 3
20852: PPUSH
20853: LD_INT 7
20855: PPUSH
20856: LD_INT 6
20858: PPUSH
20859: LD_EXP 28
20863: PPUSH
20864: CALL 10273 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
20868: LD_INT 3
20870: PPUSH
20871: LD_EXP 27
20875: PPUSH
20876: LD_INT 6
20878: PPUSH
20879: LD_EXP 30
20883: PPUSH
20884: CALL 9882 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
20888: LD_INT 3
20890: PPUSH
20891: LD_INT 26
20893: PPUSH
20894: LD_EXP 44
20898: PPUSH
20899: LD_EXP 45
20903: PPUSH
20904: CALL 8750 0 4
// AttackNearBuildings ( 3 , 1 ) ;
20908: LD_INT 3
20910: PPUSH
20911: LD_INT 1
20913: PPUSH
20914: CALL 10817 0 2
// end ; if SikorskyArrive = 1 then
20918: LD_EXP 17
20922: PUSH
20923: LD_INT 1
20925: EQUAL
20926: IFFALSE 20944
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
20928: LD_INT 3
20930: PPUSH
20931: LD_INT 10
20933: PPUSH
20934: LD_INT 53
20936: PPUSH
20937: LD_INT 59
20939: PPUSH
20940: CALL 8547 0 4
// end ;
20944: END
// every 0 0$1 trigger russianAI = 1 do var i ;
20945: LD_EXP 26
20949: PUSH
20950: LD_INT 1
20952: EQUAL
20953: IFFALSE 21229
20955: GO 20957
20957: DISABLE
20958: LD_INT 0
20960: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
20961: LD_ADDR_VAR 0 1
20965: PUSH
20966: LD_INT 22
20968: PUSH
20969: LD_INT 3
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 21
20978: PUSH
20979: LD_INT 3
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 30
20988: PUSH
20989: LD_INT 32
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 3
20998: PUSH
20999: LD_INT 2
21001: PUSH
21002: LD_INT 35
21004: PUSH
21005: LD_INT 43
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 35
21014: PUSH
21015: LD_INT 44
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 35
21024: PUSH
21025: LD_INT 46
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: PPUSH
21048: CALL_OW 69
21052: PUSH
21053: FOR_IN
21054: IFFALSE 21093
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21056: LD_VAR 0 1
21060: PPUSH
21061: LD_INT 43
21063: PUSH
21064: LD_INT 44
21066: PUSH
21067: LD_INT 46
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 1
21077: PPUSH
21078: LD_INT 3
21080: PPUSH
21081: CALL_OW 12
21085: ARRAY
21086: PPUSH
21087: CALL_OW 431
21091: GO 21053
21093: POP
21094: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
21095: LD_ADDR_VAR 0 1
21099: PUSH
21100: LD_INT 22
21102: PUSH
21103: LD_INT 3
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 21
21112: PUSH
21113: LD_INT 3
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 30
21122: PUSH
21123: LD_INT 33
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 3
21132: PUSH
21133: LD_INT 2
21135: PUSH
21136: LD_INT 35
21138: PUSH
21139: LD_INT 43
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 35
21148: PUSH
21149: LD_INT 44
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 35
21158: PUSH
21159: LD_INT 46
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: PPUSH
21182: CALL_OW 69
21186: PUSH
21187: FOR_IN
21188: IFFALSE 21227
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21190: LD_VAR 0 1
21194: PPUSH
21195: LD_INT 43
21197: PUSH
21198: LD_INT 44
21200: PUSH
21201: LD_INT 46
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 1
21211: PPUSH
21212: LD_INT 3
21214: PPUSH
21215: CALL_OW 12
21219: ARRAY
21220: PPUSH
21221: CALL_OW 431
21225: GO 21187
21227: POP
21228: POP
// end ;
21229: PPOPN 1
21231: END
// every 0 0$1 trigger SikorskyAI = 1 do
21232: LD_EXP 19
21236: PUSH
21237: LD_INT 1
21239: EQUAL
21240: IFFALSE 21275
21242: GO 21244
21244: DISABLE
// begin enable ;
21245: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
21246: LD_INT 4
21248: PPUSH
21249: LD_INT 10
21251: PPUSH
21252: LD_INT 93
21254: PPUSH
21255: LD_INT 93
21257: PPUSH
21258: CALL 8547 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
21262: LD_INT 4
21264: PPUSH
21265: LD_INT 11
21267: PPUSH
21268: LD_INT 3
21270: PPUSH
21271: CALL 15029 0 3
// end ;
21275: END
// every 0 0$1 trigger SikorskyAI = 1 do
21276: LD_EXP 19
21280: PUSH
21281: LD_INT 1
21283: EQUAL
21284: IFFALSE 21296
21286: GO 21288
21288: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
21289: LD_INT 4
21291: PPUSH
21292: CALL 9554 0 1
21296: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21297: LD_EXP 26
21301: PUSH
21302: LD_INT 1
21304: EQUAL
21305: PUSH
21306: LD_EXP 29
21310: PPUSH
21311: CALL_OW 302
21315: AND
21316: PUSH
21317: LD_EXP 29
21321: PPUSH
21322: CALL_OW 255
21326: PUSH
21327: LD_INT 3
21329: EQUAL
21330: AND
21331: PUSH
21332: LD_INT 22
21334: PUSH
21335: LD_INT 3
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 21
21344: PUSH
21345: LD_INT 2
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 33
21354: PUSH
21355: LD_INT 3
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: LIST
21366: PPUSH
21367: CALL_OW 69
21371: PUSH
21372: LD_INT 0
21374: EQUAL
21375: AND
21376: IFFALSE 21610
21378: GO 21380
21380: DISABLE
// begin enable ;
21381: ENABLE
// if Difficulty = 1 then
21382: LD_OWVAR 67
21386: PUSH
21387: LD_INT 1
21389: EQUAL
21390: IFFALSE 21458
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
21392: LD_INT 3
21394: PPUSH
21395: LD_EXP 29
21399: PPUSH
21400: LD_INT 5
21402: PPUSH
21403: LD_INT 8
21405: PPUSH
21406: CALL_OW 12
21410: PPUSH
21411: LD_INT 43
21413: PUSH
21414: LD_INT 43
21416: PUSH
21417: LD_INT 43
21419: PUSH
21420: LD_INT 43
21422: PUSH
21423: LD_INT 44
21425: PUSH
21426: LD_INT 44
21428: PUSH
21429: LD_INT 44
21431: PUSH
21432: LD_INT 46
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: PPUSH
21445: LD_INT 1
21447: PPUSH
21448: LD_INT 3
21450: PPUSH
21451: LD_INT 24
21453: PPUSH
21454: CALL 8393 0 7
// if Difficulty = 2 then
21458: LD_OWVAR 67
21462: PUSH
21463: LD_INT 2
21465: EQUAL
21466: IFFALSE 21534
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
21468: LD_INT 3
21470: PPUSH
21471: LD_EXP 29
21475: PPUSH
21476: LD_INT 6
21478: PPUSH
21479: LD_INT 8
21481: PPUSH
21482: CALL_OW 12
21486: PPUSH
21487: LD_INT 43
21489: PUSH
21490: LD_INT 43
21492: PUSH
21493: LD_INT 44
21495: PUSH
21496: LD_INT 44
21498: PUSH
21499: LD_INT 44
21501: PUSH
21502: LD_INT 44
21504: PUSH
21505: LD_INT 46
21507: PUSH
21508: LD_INT 46
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: PPUSH
21521: LD_INT 1
21523: PPUSH
21524: LD_INT 3
21526: PPUSH
21527: LD_INT 24
21529: PPUSH
21530: CALL 8393 0 7
// if Difficulty = 3 then
21534: LD_OWVAR 67
21538: PUSH
21539: LD_INT 3
21541: EQUAL
21542: IFFALSE 21610
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
21544: LD_INT 3
21546: PPUSH
21547: LD_EXP 29
21551: PPUSH
21552: LD_INT 7
21554: PPUSH
21555: LD_INT 8
21557: PPUSH
21558: CALL_OW 12
21562: PPUSH
21563: LD_INT 43
21565: PUSH
21566: LD_INT 43
21568: PUSH
21569: LD_INT 44
21571: PUSH
21572: LD_INT 44
21574: PUSH
21575: LD_INT 44
21577: PUSH
21578: LD_INT 46
21580: PUSH
21581: LD_INT 46
21583: PUSH
21584: LD_INT 46
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: PPUSH
21597: LD_INT 1
21599: PPUSH
21600: LD_INT 3
21602: PPUSH
21603: LD_INT 24
21605: PPUSH
21606: CALL 8393 0 7
// end ;
21610: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
21611: LD_EXP 37
21615: PUSH
21616: LD_INT 1
21618: EQUAL
21619: IFFALSE 21701
21621: GO 21623
21623: DISABLE
21624: LD_INT 0
21626: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
21627: LD_ADDR_VAR 0 1
21631: PUSH
21632: LD_INT 22
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 21
21644: PUSH
21645: LD_INT 1
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 3
21654: PUSH
21655: LD_INT 24
21657: PUSH
21658: LD_INT 650
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: LIST
21673: PPUSH
21674: CALL_OW 69
21678: PUSH
21679: FOR_IN
21680: IFFALSE 21699
// ComMoveXY ( i , 51 , 12 ) ;
21682: LD_VAR 0 1
21686: PPUSH
21687: LD_INT 51
21689: PPUSH
21690: LD_INT 12
21692: PPUSH
21693: CALL_OW 111
21697: GO 21679
21699: POP
21700: POP
// end ; end_of_file
21701: PPOPN 1
21703: END
// every 3 3$20 trigger firstAttack = 1 do
21704: LD_EXP 32
21708: PUSH
21709: LD_INT 1
21711: EQUAL
21712: IFFALSE 21818
21714: GO 21716
21716: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21717: LD_INT 6
21719: PPUSH
21720: LD_INT 3
21722: PPUSH
21723: LD_INT 5
21725: PPUSH
21726: LD_INT 6
21728: PPUSH
21729: CALL_OW 12
21733: PUSH
21734: LD_INT 5
21736: PPUSH
21737: LD_INT 6
21739: PPUSH
21740: CALL_OW 12
21744: PUSH
21745: LD_INT 5
21747: PPUSH
21748: LD_INT 6
21750: PPUSH
21751: CALL_OW 12
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: LIST
21760: PUSH
21761: LD_OWVAR 67
21765: ARRAY
21766: PPUSH
21767: LD_INT 0
21769: PPUSH
21770: LD_INT 0
21772: PPUSH
21773: LD_INT 0
21775: PPUSH
21776: LD_INT 0
21778: PPUSH
21779: LD_EXP 24
21783: PPUSH
21784: LD_EXP 25
21788: PPUSH
21789: CALL_OW 12
21793: PPUSH
21794: LD_INT 16
21796: PPUSH
21797: LD_INT 7
21799: PPUSH
21800: LD_INT 1
21802: PPUSH
21803: LD_INT 1
21805: PPUSH
21806: LD_INT 3
21808: PPUSH
21809: CALL_OW 12
21813: PPUSH
21814: CALL 11047 0 12
21818: END
// every 3 3$40 trigger firstAttack = 1 do
21819: LD_EXP 32
21823: PUSH
21824: LD_INT 1
21826: EQUAL
21827: IFFALSE 21919
21829: GO 21831
21831: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
21832: LD_INT 16
21834: PPUSH
21835: LD_INT 6
21837: PPUSH
21838: LD_INT 3
21840: PPUSH
21841: LD_INT 4
21843: PPUSH
21844: CALL_OW 12
21848: PUSH
21849: LD_INT 4
21851: PPUSH
21852: LD_INT 5
21854: PPUSH
21855: CALL_OW 12
21859: PUSH
21860: LD_INT 5
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: LIST
21867: PUSH
21868: LD_OWVAR 67
21872: ARRAY
21873: PPUSH
21874: LD_EXP 24
21878: PPUSH
21879: LD_EXP 25
21883: PPUSH
21884: CALL_OW 12
21888: PPUSH
21889: LD_INT 3
21891: PPUSH
21892: LD_INT 1
21894: PPUSH
21895: LD_INT 3
21897: PPUSH
21898: LD_INT 44
21900: PUSH
21901: LD_INT 46
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PPUSH
21908: EMPTY
21909: PPUSH
21910: EMPTY
21911: PPUSH
21912: LD_INT 1
21914: PPUSH
21915: CALL 13340 0 11
21919: END
// every 9 9$40 trigger firstAttack = 1 and JMMArrive = 0 do
21920: LD_EXP 32
21924: PUSH
21925: LD_INT 1
21927: EQUAL
21928: PUSH
21929: LD_EXP 38
21933: PUSH
21934: LD_INT 0
21936: EQUAL
21937: AND
21938: IFFALSE 22044
21940: GO 21942
21942: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21943: LD_INT 6
21945: PPUSH
21946: LD_INT 3
21948: PPUSH
21949: LD_INT 5
21951: PPUSH
21952: LD_INT 6
21954: PPUSH
21955: CALL_OW 12
21959: PUSH
21960: LD_INT 5
21962: PPUSH
21963: LD_INT 6
21965: PPUSH
21966: CALL_OW 12
21970: PUSH
21971: LD_INT 5
21973: PPUSH
21974: LD_INT 6
21976: PPUSH
21977: CALL_OW 12
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: LIST
21986: PUSH
21987: LD_OWVAR 67
21991: ARRAY
21992: PPUSH
21993: LD_INT 0
21995: PPUSH
21996: LD_INT 0
21998: PPUSH
21999: LD_INT 0
22001: PPUSH
22002: LD_INT 0
22004: PPUSH
22005: LD_EXP 24
22009: PPUSH
22010: LD_EXP 25
22014: PPUSH
22015: CALL_OW 12
22019: PPUSH
22020: LD_INT 16
22022: PPUSH
22023: LD_INT 7
22025: PPUSH
22026: LD_INT 1
22028: PPUSH
22029: LD_INT 1
22031: PPUSH
22032: LD_INT 3
22034: PPUSH
22035: CALL_OW 12
22039: PPUSH
22040: CALL 11047 0 12
22044: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
22045: LD_EXP 32
22049: PUSH
22050: LD_INT 1
22052: EQUAL
22053: PUSH
22054: LD_EXP 38
22058: PUSH
22059: LD_INT 0
22061: EQUAL
22062: AND
22063: IFFALSE 22159
22065: GO 22067
22067: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22068: LD_INT 16
22070: PPUSH
22071: LD_INT 6
22073: PPUSH
22074: LD_INT 5
22076: PPUSH
22077: LD_INT 6
22079: PPUSH
22080: CALL_OW 12
22084: PUSH
22085: LD_INT 6
22087: PPUSH
22088: LD_INT 7
22090: PPUSH
22091: CALL_OW 12
22095: PUSH
22096: LD_INT 7
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: LIST
22103: PUSH
22104: LD_OWVAR 67
22108: ARRAY
22109: PPUSH
22110: LD_EXP 24
22114: PPUSH
22115: LD_EXP 25
22119: PPUSH
22120: CALL_OW 12
22124: PPUSH
22125: LD_INT 3
22127: PPUSH
22128: LD_INT 1
22130: PPUSH
22131: LD_INT 3
22133: PPUSH
22134: LD_INT 43
22136: PUSH
22137: LD_INT 44
22139: PUSH
22140: LD_INT 46
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: LIST
22147: PPUSH
22148: EMPTY
22149: PPUSH
22150: EMPTY
22151: PPUSH
22152: LD_INT 1
22154: PPUSH
22155: CALL 13340 0 11
22159: END
// every 12 12$00 trigger firstAttack = 1 and JMMArrive = 0 do
22160: LD_EXP 32
22164: PUSH
22165: LD_INT 1
22167: EQUAL
22168: PUSH
22169: LD_EXP 38
22173: PUSH
22174: LD_INT 0
22176: EQUAL
22177: AND
22178: IFFALSE 22254
22180: GO 22182
22182: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22183: LD_INT 16
22185: PPUSH
22186: LD_INT 6
22188: PPUSH
22189: LD_INT 5
22191: PUSH
22192: LD_INT 6
22194: PUSH
22195: LD_INT 7
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: PUSH
22203: LD_OWVAR 67
22207: ARRAY
22208: PPUSH
22209: LD_EXP 24
22213: PPUSH
22214: LD_EXP 25
22218: PPUSH
22219: CALL_OW 12
22223: PPUSH
22224: LD_INT 3
22226: PPUSH
22227: LD_INT 1
22229: PPUSH
22230: LD_INT 3
22232: PPUSH
22233: LD_INT 44
22235: PUSH
22236: LD_INT 46
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PPUSH
22243: EMPTY
22244: PPUSH
22245: EMPTY
22246: PPUSH
22247: LD_INT 1
22249: PPUSH
22250: CALL 13340 0 11
22254: END
// every 1 1$00 trigger secondAttack = 1 do
22255: LD_EXP 33
22259: PUSH
22260: LD_INT 1
22262: EQUAL
22263: IFFALSE 22369
22265: GO 22267
22267: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22268: LD_INT 6
22270: PPUSH
22271: LD_INT 3
22273: PPUSH
22274: LD_INT 4
22276: PPUSH
22277: LD_INT 7
22279: PPUSH
22280: CALL_OW 12
22284: PUSH
22285: LD_INT 6
22287: PPUSH
22288: LD_INT 7
22290: PPUSH
22291: CALL_OW 12
22295: PUSH
22296: LD_INT 6
22298: PPUSH
22299: LD_INT 10
22301: PPUSH
22302: CALL_OW 12
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: PUSH
22312: LD_OWVAR 67
22316: ARRAY
22317: PPUSH
22318: LD_INT 0
22320: PPUSH
22321: LD_INT 0
22323: PPUSH
22324: LD_INT 0
22326: PPUSH
22327: LD_INT 0
22329: PPUSH
22330: LD_EXP 24
22334: PPUSH
22335: LD_EXP 25
22339: PPUSH
22340: CALL_OW 12
22344: PPUSH
22345: LD_INT 16
22347: PPUSH
22348: LD_INT 7
22350: PPUSH
22351: LD_INT 1
22353: PPUSH
22354: LD_INT 1
22356: PPUSH
22357: LD_INT 3
22359: PPUSH
22360: CALL_OW 12
22364: PPUSH
22365: CALL 11047 0 12
22369: END
// every 1 1$00 trigger secondAttack = 1 do
22370: LD_EXP 33
22374: PUSH
22375: LD_INT 1
22377: EQUAL
22378: IFFALSE 22482
22380: GO 22382
22382: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
22383: LD_INT 16
22385: PPUSH
22386: LD_INT 6
22388: PPUSH
22389: LD_INT 5
22391: PPUSH
22392: LD_INT 8
22394: PPUSH
22395: CALL_OW 12
22399: PUSH
22400: LD_INT 6
22402: PPUSH
22403: LD_INT 9
22405: PPUSH
22406: CALL_OW 12
22410: PUSH
22411: LD_INT 7
22413: PPUSH
22414: LD_INT 9
22416: PPUSH
22417: CALL_OW 12
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: PUSH
22427: LD_OWVAR 67
22431: ARRAY
22432: PPUSH
22433: LD_EXP 24
22437: PPUSH
22438: LD_EXP 25
22442: PPUSH
22443: CALL_OW 12
22447: PPUSH
22448: LD_INT 3
22450: PPUSH
22451: LD_INT 1
22453: PPUSH
22454: LD_INT 3
22456: PPUSH
22457: LD_INT 43
22459: PUSH
22460: LD_INT 44
22462: PUSH
22463: LD_INT 46
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: LIST
22470: PPUSH
22471: EMPTY
22472: PPUSH
22473: EMPTY
22474: PPUSH
22475: LD_INT 1
22477: PPUSH
22478: CALL 13340 0 11
22482: END
// every 22 22$0 trigger SikorskyArrive = 0 do
22483: LD_EXP 17
22487: PUSH
22488: LD_INT 0
22490: EQUAL
22491: IFFALSE 22597
22493: GO 22495
22495: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22496: LD_INT 6
22498: PPUSH
22499: LD_INT 3
22501: PPUSH
22502: LD_INT 8
22504: PPUSH
22505: LD_INT 9
22507: PPUSH
22508: CALL_OW 12
22512: PUSH
22513: LD_INT 7
22515: PPUSH
22516: LD_INT 10
22518: PPUSH
22519: CALL_OW 12
22523: PUSH
22524: LD_INT 8
22526: PPUSH
22527: LD_INT 10
22529: PPUSH
22530: CALL_OW 12
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: LIST
22539: PUSH
22540: LD_OWVAR 67
22544: ARRAY
22545: PPUSH
22546: LD_INT 0
22548: PPUSH
22549: LD_INT 0
22551: PPUSH
22552: LD_INT 0
22554: PPUSH
22555: LD_INT 0
22557: PPUSH
22558: LD_EXP 24
22562: PPUSH
22563: LD_EXP 25
22567: PPUSH
22568: CALL_OW 12
22572: PPUSH
22573: LD_INT 16
22575: PPUSH
22576: LD_INT 7
22578: PPUSH
22579: LD_INT 1
22581: PPUSH
22582: LD_INT 1
22584: PPUSH
22585: LD_INT 3
22587: PPUSH
22588: CALL_OW 12
22592: PPUSH
22593: CALL 11047 0 12
22597: END
// every 22 22$0 trigger SikorskyArrive = 0 do
22598: LD_EXP 17
22602: PUSH
22603: LD_INT 0
22605: EQUAL
22606: IFFALSE 22706
22608: GO 22610
22610: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22611: LD_INT 16
22613: PPUSH
22614: LD_INT 6
22616: PPUSH
22617: LD_INT 5
22619: PPUSH
22620: LD_INT 8
22622: PPUSH
22623: CALL_OW 12
22627: PUSH
22628: LD_INT 6
22630: PPUSH
22631: LD_INT 9
22633: PPUSH
22634: CALL_OW 12
22638: PUSH
22639: LD_INT 7
22641: PPUSH
22642: LD_INT 9
22644: PPUSH
22645: CALL_OW 12
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: LIST
22654: PUSH
22655: LD_OWVAR 67
22659: ARRAY
22660: PPUSH
22661: LD_EXP 24
22665: PPUSH
22666: LD_EXP 25
22670: PPUSH
22671: CALL_OW 12
22675: PPUSH
22676: LD_INT 3
22678: PPUSH
22679: LD_INT 1
22681: PPUSH
22682: LD_INT 3
22684: PPUSH
22685: LD_INT 44
22687: PUSH
22688: LD_INT 46
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PPUSH
22695: EMPTY
22696: PPUSH
22697: EMPTY
22698: PPUSH
22699: LD_INT 1
22701: PPUSH
22702: CALL 13340 0 11
22706: END
// every 27 27$0 trigger SikorskyArrive = 0 do
22707: LD_EXP 17
22711: PUSH
22712: LD_INT 0
22714: EQUAL
22715: IFFALSE 22821
22717: GO 22719
22719: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22720: LD_INT 6
22722: PPUSH
22723: LD_INT 3
22725: PPUSH
22726: LD_INT 8
22728: PPUSH
22729: LD_INT 9
22731: PPUSH
22732: CALL_OW 12
22736: PUSH
22737: LD_INT 7
22739: PPUSH
22740: LD_INT 10
22742: PPUSH
22743: CALL_OW 12
22747: PUSH
22748: LD_INT 8
22750: PPUSH
22751: LD_INT 10
22753: PPUSH
22754: CALL_OW 12
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: LIST
22763: PUSH
22764: LD_OWVAR 67
22768: ARRAY
22769: PPUSH
22770: LD_INT 0
22772: PPUSH
22773: LD_INT 0
22775: PPUSH
22776: LD_INT 0
22778: PPUSH
22779: LD_INT 0
22781: PPUSH
22782: LD_EXP 24
22786: PPUSH
22787: LD_EXP 25
22791: PPUSH
22792: CALL_OW 12
22796: PPUSH
22797: LD_INT 16
22799: PPUSH
22800: LD_INT 7
22802: PPUSH
22803: LD_INT 1
22805: PPUSH
22806: LD_INT 1
22808: PPUSH
22809: LD_INT 3
22811: PPUSH
22812: CALL_OW 12
22816: PPUSH
22817: CALL 11047 0 12
22821: END
// every 27 27$0 trigger SikorskyArrive = 0 do
22822: LD_EXP 17
22826: PUSH
22827: LD_INT 0
22829: EQUAL
22830: IFFALSE 22930
22832: GO 22834
22834: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
22835: LD_INT 16
22837: PPUSH
22838: LD_INT 6
22840: PPUSH
22841: LD_INT 5
22843: PPUSH
22844: LD_INT 8
22846: PPUSH
22847: CALL_OW 12
22851: PUSH
22852: LD_INT 6
22854: PPUSH
22855: LD_INT 9
22857: PPUSH
22858: CALL_OW 12
22862: PUSH
22863: LD_INT 7
22865: PPUSH
22866: LD_INT 9
22868: PPUSH
22869: CALL_OW 12
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: LIST
22878: PUSH
22879: LD_OWVAR 67
22883: ARRAY
22884: PPUSH
22885: LD_EXP 24
22889: PPUSH
22890: LD_EXP 25
22894: PPUSH
22895: CALL_OW 12
22899: PPUSH
22900: LD_INT 3
22902: PPUSH
22903: LD_INT 1
22905: PPUSH
22906: LD_INT 3
22908: PPUSH
22909: LD_INT 44
22911: PUSH
22912: LD_INT 46
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PPUSH
22919: EMPTY
22920: PPUSH
22921: EMPTY
22922: PPUSH
22923: LD_INT 1
22925: PPUSH
22926: CALL 13340 0 11
22930: END
// every 35 35$0 trigger SikorskyArrive = 0 do
22931: LD_EXP 17
22935: PUSH
22936: LD_INT 0
22938: EQUAL
22939: IFFALSE 23045
22941: GO 22943
22943: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
22944: LD_INT 6
22946: PPUSH
22947: LD_INT 3
22949: PPUSH
22950: LD_INT 8
22952: PPUSH
22953: LD_INT 9
22955: PPUSH
22956: CALL_OW 12
22960: PUSH
22961: LD_INT 7
22963: PPUSH
22964: LD_INT 10
22966: PPUSH
22967: CALL_OW 12
22971: PUSH
22972: LD_INT 8
22974: PPUSH
22975: LD_INT 10
22977: PPUSH
22978: CALL_OW 12
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: LIST
22987: PUSH
22988: LD_OWVAR 67
22992: ARRAY
22993: PPUSH
22994: LD_INT 0
22996: PPUSH
22997: LD_INT 0
22999: PPUSH
23000: LD_INT 0
23002: PPUSH
23003: LD_INT 0
23005: PPUSH
23006: LD_EXP 24
23010: PPUSH
23011: LD_EXP 25
23015: PPUSH
23016: CALL_OW 12
23020: PPUSH
23021: LD_INT 16
23023: PPUSH
23024: LD_INT 7
23026: PPUSH
23027: LD_INT 1
23029: PPUSH
23030: LD_INT 1
23032: PPUSH
23033: LD_INT 3
23035: PPUSH
23036: CALL_OW 12
23040: PPUSH
23041: CALL 11047 0 12
23045: END
// every 35 35$0 trigger SikorskyArrive = 0 do
23046: LD_EXP 17
23050: PUSH
23051: LD_INT 0
23053: EQUAL
23054: IFFALSE 23154
23056: GO 23058
23058: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
23059: LD_INT 16
23061: PPUSH
23062: LD_INT 6
23064: PPUSH
23065: LD_INT 5
23067: PPUSH
23068: LD_INT 8
23070: PPUSH
23071: CALL_OW 12
23075: PUSH
23076: LD_INT 6
23078: PPUSH
23079: LD_INT 9
23081: PPUSH
23082: CALL_OW 12
23086: PUSH
23087: LD_INT 7
23089: PPUSH
23090: LD_INT 9
23092: PPUSH
23093: CALL_OW 12
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: LIST
23102: PUSH
23103: LD_OWVAR 67
23107: ARRAY
23108: PPUSH
23109: LD_EXP 24
23113: PPUSH
23114: LD_EXP 25
23118: PPUSH
23119: CALL_OW 12
23123: PPUSH
23124: LD_INT 3
23126: PPUSH
23127: LD_INT 1
23129: PPUSH
23130: LD_INT 3
23132: PPUSH
23133: LD_INT 44
23135: PUSH
23136: LD_INT 46
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PPUSH
23143: EMPTY
23144: PPUSH
23145: EMPTY
23146: PPUSH
23147: LD_INT 1
23149: PPUSH
23150: CALL 13340 0 11
23154: END
// every 0 0$1 trigger timerStatus = 1 do
23155: LD_EXP 34
23159: PUSH
23160: LD_INT 1
23162: EQUAL
23163: IFFALSE 23200
23165: GO 23167
23167: DISABLE
// begin enable ;
23168: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
23169: LD_ADDR_OWVAR 47
23173: PUSH
23174: LD_STRING #Am08-1
23176: PUSH
23177: LD_EXP 18
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
23186: LD_ADDR_EXP 18
23190: PUSH
23191: LD_EXP 18
23195: PUSH
23196: LD_INT 35
23198: MINUS
23199: ST_TO_ADDR
// end ; end_of_file
23200: END
// every 1 1$0 do
23201: GO 23203
23203: DISABLE
// begin if supply <= 13 and supply > 7 then
23204: LD_EXP 39
23208: PUSH
23209: LD_INT 13
23211: LESSEQUAL
23212: PUSH
23213: LD_EXP 39
23217: PUSH
23218: LD_INT 7
23220: GREATER
23221: AND
23222: IFFALSE 23245
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
23224: LD_INT 3
23226: PPUSH
23227: LD_INT 5
23229: PPUSH
23230: CALL_OW 12
23234: PPUSH
23235: LD_INT 5
23237: PPUSH
23238: LD_INT 1
23240: PPUSH
23241: CALL_OW 55
// if supply <= 7 and supply > 4 then
23245: LD_EXP 39
23249: PUSH
23250: LD_INT 7
23252: LESSEQUAL
23253: PUSH
23254: LD_EXP 39
23258: PUSH
23259: LD_INT 4
23261: GREATER
23262: AND
23263: IFFALSE 23286
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
23265: LD_INT 3
23267: PPUSH
23268: LD_INT 5
23270: PPUSH
23271: CALL_OW 12
23275: PPUSH
23276: LD_INT 20
23278: PPUSH
23279: LD_INT 1
23281: PPUSH
23282: CALL_OW 55
// if supply <= 4 and supply > 0 then
23286: LD_EXP 39
23290: PUSH
23291: LD_INT 4
23293: LESSEQUAL
23294: PUSH
23295: LD_EXP 39
23299: PUSH
23300: LD_INT 0
23302: GREATER
23303: AND
23304: IFFALSE 23327
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
23306: LD_INT 3
23308: PPUSH
23309: LD_INT 5
23311: PPUSH
23312: CALL_OW 12
23316: PPUSH
23317: LD_INT 21
23319: PPUSH
23320: LD_INT 1
23322: PPUSH
23323: CALL_OW 55
// if supply > 0 then
23327: LD_EXP 39
23331: PUSH
23332: LD_INT 0
23334: GREATER
23335: IFFALSE 23352
// begin supply = supply - 1 ;
23337: LD_ADDR_EXP 39
23341: PUSH
23342: LD_EXP 39
23346: PUSH
23347: LD_INT 1
23349: MINUS
23350: ST_TO_ADDR
// enable ;
23351: ENABLE
// end ; end ; end_of_file
23352: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
23353: LD_EXP 38
23357: PUSH
23358: LD_INT 1
23360: EQUAL
23361: PUSH
23362: LD_EXP 1
23366: PPUSH
23367: CALL_OW 301
23371: AND
23372: IFFALSE 23384
23374: GO 23376
23376: DISABLE
// YouLost ( JMM ) ;
23377: LD_STRING JMM
23379: PPUSH
23380: CALL_OW 104
23384: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
23385: LD_EXP 17
23389: PUSH
23390: LD_INT 1
23392: EQUAL
23393: PUSH
23394: LD_EXP 15
23398: PPUSH
23399: CALL_OW 301
23403: AND
23404: IFFALSE 23436
23406: GO 23408
23408: DISABLE
// begin DialogueOn ;
23409: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
23413: LD_EXP 22
23417: PPUSH
23418: LD_STRING D8a-Pow-1
23420: PPUSH
23421: CALL_OW 94
// DialogueOff ;
23425: CALL_OW 7
// YouLost ( Dismissed ) ;
23429: LD_STRING Dismissed
23431: PPUSH
23432: CALL_OW 104
// end ;
23436: END
// every 0 0$1 trigger IsDead ( amDepot ) do
23437: LD_EXP 36
23441: PPUSH
23442: CALL_OW 301
23446: IFFALSE 23458
23448: GO 23450
23450: DISABLE
// YouLost ( Destroyed ) ; end_of_file
23451: LD_STRING Destroyed
23453: PPUSH
23454: CALL_OW 104
23458: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
23459: LD_EXP 23
23463: PPUSH
23464: CALL_OW 301
23468: IFFALSE 23813
23470: GO 23472
23472: DISABLE
23473: LD_INT 0
23475: PPUSH
// begin russianAI = 0 ;
23476: LD_ADDR_EXP 26
23480: PUSH
23481: LD_INT 0
23483: ST_TO_ADDR
// escapeAvalaible = 1 ;
23484: LD_ADDR_EXP 35
23488: PUSH
23489: LD_INT 1
23491: ST_TO_ADDR
// InGameOn ;
23492: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
23496: LD_INT 3
23498: PPUSH
23499: LD_INT 1
23501: PPUSH
23502: LD_INT 1
23504: PPUSH
23505: LD_INT 0
23507: PPUSH
23508: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
23512: LD_INT 6
23514: PPUSH
23515: LD_INT 1
23517: PPUSH
23518: LD_INT 1
23520: PPUSH
23521: LD_INT 0
23523: PPUSH
23524: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
23528: LD_INT 3
23530: PPUSH
23531: LD_INT 1
23533: PPUSH
23534: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
23538: LD_INT 97
23540: PPUSH
23541: LD_INT 91
23543: PPUSH
23544: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
23548: LD_INT 22
23550: PUSH
23551: LD_INT 3
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 21
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PPUSH
23572: CALL_OW 69
23576: PPUSH
23577: CALL_OW 121
// wait ( 0 0$01 ) ;
23581: LD_INT 35
23583: PPUSH
23584: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23588: LD_INT 22
23590: PUSH
23591: LD_INT 3
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 21
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PPUSH
23612: CALL_OW 69
23616: PPUSH
23617: LD_INT 124
23619: PPUSH
23620: LD_INT 98
23622: PPUSH
23623: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
23627: LD_INT 22
23629: PUSH
23630: LD_INT 6
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 21
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PPUSH
23651: CALL_OW 69
23655: PPUSH
23656: CALL_OW 121
// wait ( 0 0$01 ) ;
23660: LD_INT 35
23662: PPUSH
23663: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23667: LD_INT 22
23669: PUSH
23670: LD_INT 6
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 21
23679: PUSH
23680: LD_INT 1
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PPUSH
23691: CALL_OW 69
23695: PPUSH
23696: LD_INT 124
23698: PPUSH
23699: LD_INT 98
23701: PPUSH
23702: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
23706: LD_INT 22
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 21
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PPUSH
23730: CALL_OW 69
23734: PPUSH
23735: LD_INT 124
23737: PPUSH
23738: LD_INT 98
23740: PPUSH
23741: CALL_OW 114
// wait ( 0 0$4 ) ;
23745: LD_INT 140
23747: PPUSH
23748: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
23752: LD_INT 124
23754: PPUSH
23755: LD_INT 98
23757: PPUSH
23758: CALL_OW 84
// if SikorskyStatus = 1 then
23762: LD_EXP 20
23766: PUSH
23767: LD_INT 1
23769: EQUAL
23770: IFFALSE 23784
// begin Say ( Sikorski , D9-Sik-1 ) ;
23772: LD_EXP 15
23776: PPUSH
23777: LD_STRING D9-Sik-1
23779: PPUSH
23780: CALL_OW 88
// end ; if SikorskyStatus = 2 then
23784: LD_EXP 20
23788: PUSH
23789: LD_INT 2
23791: EQUAL
23792: IFFALSE 23813
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
23794: LD_EXP 22
23798: PPUSH
23799: LD_STRING D8b-Pow-1
23801: PPUSH
23802: CALL_OW 94
// YouLost ( Dismissed ) ;
23806: LD_STRING Dismissed
23808: PPUSH
23809: CALL_OW 104
// end ; end ;
23813: PPOPN 1
23815: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
23816: LD_INT 23
23818: PUSH
23819: LD_INT 3
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 21
23828: PUSH
23829: LD_INT 1
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 24
23838: PUSH
23839: LD_INT 250
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: LIST
23850: PPUSH
23851: CALL_OW 69
23855: PUSH
23856: LD_INT 0
23858: EQUAL
23859: IFFALSE 23868
23861: GO 23863
23863: DISABLE
// FinishMission ;
23864: CALL 23869 0 0
23868: END
// export function FinishMission ; var tmp ; begin
23869: LD_INT 0
23871: PPUSH
23872: PPUSH
// AddMedal ( med1 , 1 ) ;
23873: LD_STRING med1
23875: PPUSH
23876: LD_INT 1
23878: PPUSH
23879: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
23883: LD_STRING med2
23885: PPUSH
23886: LD_INT 1
23888: PPUSH
23889: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
23893: LD_STRING perfect
23895: PPUSH
23896: LD_INT 1
23898: PPUSH
23899: CALL_OW 101
// GiveMedals ( Main ) ;
23903: LD_STRING Main
23905: PPUSH
23906: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
23910: LD_INT 22
23912: PUSH
23913: LD_INT 1
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 23
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 21
23932: PUSH
23933: LD_INT 1
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 2
23942: PUSH
23943: LD_INT 25
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 25
23955: PUSH
23956: LD_INT 2
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 25
23965: PUSH
23966: LD_INT 3
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 25
23975: PUSH
23976: LD_INT 4
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: PPUSH
23996: CALL_OW 69
24000: PPUSH
24001: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
24005: LD_EXP 1
24009: PPUSH
24010: LD_EXP 41
24014: PUSH
24015: LD_STRING JMM
24017: STR
24018: PPUSH
24019: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
24023: LD_EXP 2
24027: PPUSH
24028: LD_EXP 41
24032: PUSH
24033: LD_STRING Brown
24035: STR
24036: PPUSH
24037: CALL 7269 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
24041: LD_EXP 3
24045: PPUSH
24046: LD_EXP 41
24050: PUSH
24051: LD_STRING Donaldson
24053: STR
24054: PPUSH
24055: CALL 7269 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
24059: LD_EXP 4
24063: PPUSH
24064: LD_EXP 41
24068: PUSH
24069: LD_STRING Bobby
24071: STR
24072: PPUSH
24073: CALL 7269 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
24077: LD_EXP 5
24081: PPUSH
24082: LD_EXP 41
24086: PUSH
24087: LD_STRING Cyrus
24089: STR
24090: PPUSH
24091: CALL 7269 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
24095: LD_EXP 6
24099: PPUSH
24100: LD_EXP 41
24104: PUSH
24105: LD_STRING Lisa
24107: STR
24108: PPUSH
24109: CALL 7269 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
24113: LD_EXP 7
24117: PPUSH
24118: LD_EXP 41
24122: PUSH
24123: LD_STRING Frank
24125: STR
24126: PPUSH
24127: CALL 7269 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
24131: LD_EXP 8
24135: PPUSH
24136: LD_EXP 41
24140: PUSH
24141: LD_STRING Gladstone
24143: STR
24144: PPUSH
24145: CALL 7269 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
24149: LD_EXP 9
24153: PPUSH
24154: LD_EXP 41
24158: PUSH
24159: LD_STRING Kikuchi
24161: STR
24162: PPUSH
24163: CALL 7269 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
24167: LD_EXP 13
24171: PPUSH
24172: LD_EXP 41
24176: PUSH
24177: LD_STRING Denis
24179: STR
24180: PPUSH
24181: CALL 7269 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
24185: LD_EXP 14
24189: PPUSH
24190: LD_EXP 41
24194: PUSH
24195: LD_STRING Joan
24197: STR
24198: PPUSH
24199: CALL 7269 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
24203: LD_EXP 12
24207: PPUSH
24208: LD_EXP 41
24212: PUSH
24213: LD_STRING Houten
24215: STR
24216: PPUSH
24217: CALL 7269 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten ] , 08_other_survivors ) ;
24221: LD_INT 50
24223: PUSH
24224: EMPTY
24225: LIST
24226: PUSH
24227: LD_INT 22
24229: PUSH
24230: LD_INT 1
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 21
24239: PUSH
24240: LD_INT 1
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 2
24249: PUSH
24250: LD_INT 25
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 25
24262: PUSH
24263: LD_INT 2
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 25
24272: PUSH
24273: LD_INT 3
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 25
24282: PUSH
24283: LD_INT 4
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: PPUSH
24303: CALL_OW 69
24307: PUSH
24308: LD_EXP 1
24312: PUSH
24313: LD_EXP 2
24317: PUSH
24318: LD_EXP 3
24322: PUSH
24323: LD_EXP 4
24327: PUSH
24328: LD_EXP 5
24332: PUSH
24333: LD_EXP 6
24337: PUSH
24338: LD_EXP 7
24342: PUSH
24343: LD_EXP 8
24347: PUSH
24348: LD_EXP 9
24352: PUSH
24353: LD_EXP 13
24357: PUSH
24358: LD_EXP 14
24362: PUSH
24363: LD_EXP 12
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: DIFF
24382: PPUSH
24383: LD_STRING 08_other_survivors
24385: PPUSH
24386: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
24390: LD_INT 23
24392: PPUSH
24393: CALL 24406 0 1
// YouWin ;
24397: CALL_OW 103
// end ;
24401: LD_VAR 0 1
24405: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
24406: LD_INT 0
24408: PPUSH
24409: PPUSH
24410: PPUSH
24411: PPUSH
// gammaBase = [ ] ;
24412: LD_ADDR_VAR 0 4
24416: PUSH
24417: EMPTY
24418: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
24419: LD_ADDR_VAR 0 5
24423: PUSH
24424: LD_VAR 0 1
24428: PPUSH
24429: LD_INT 22
24431: PUSH
24432: LD_INT 1
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 21
24441: PUSH
24442: LD_INT 3
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 50
24451: PUSH
24452: EMPTY
24453: LIST
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: LIST
24459: PPUSH
24460: CALL_OW 70
24464: ST_TO_ADDR
// for i in buildings do
24465: LD_ADDR_VAR 0 3
24469: PUSH
24470: LD_VAR 0 5
24474: PUSH
24475: FOR_IN
24476: IFFALSE 24913
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
24478: LD_VAR 0 3
24482: PPUSH
24483: CALL_OW 266
24487: PUSH
24488: LD_INT 6
24490: PUSH
24491: LD_INT 7
24493: PUSH
24494: LD_INT 8
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: LIST
24501: IN
24502: IFFALSE 24616
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
24504: LD_ADDR_VAR 0 4
24508: PUSH
24509: LD_VAR 0 4
24513: PUSH
24514: LD_VAR 0 3
24518: PPUSH
24519: CALL_OW 266
24523: PUSH
24524: LD_VAR 0 3
24528: PPUSH
24529: CALL_OW 250
24533: PUSH
24534: LD_VAR 0 3
24538: PPUSH
24539: CALL_OW 251
24543: PUSH
24544: LD_VAR 0 3
24548: PPUSH
24549: CALL_OW 254
24553: PUSH
24554: LD_VAR 0 3
24558: PPUSH
24559: CALL_OW 267
24563: PUSH
24564: LD_VAR 0 3
24568: PPUSH
24569: CALL_OW 248
24573: PUSH
24574: LD_VAR 0 3
24578: PPUSH
24579: LD_INT 1
24581: PPUSH
24582: CALL_OW 268
24586: PUSH
24587: LD_VAR 0 3
24591: PPUSH
24592: LD_INT 2
24594: PPUSH
24595: CALL_OW 268
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: PUSH
24610: EMPTY
24611: LIST
24612: ADD
24613: ST_TO_ADDR
24614: GO 24911
// if GetBType ( i ) = b_bunker then
24616: LD_VAR 0 3
24620: PPUSH
24621: CALL_OW 266
24625: PUSH
24626: LD_INT 32
24628: EQUAL
24629: IFFALSE 24726
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
24631: LD_ADDR_VAR 0 4
24635: PUSH
24636: LD_VAR 0 4
24640: PUSH
24641: LD_VAR 0 3
24645: PPUSH
24646: CALL_OW 266
24650: PUSH
24651: LD_VAR 0 3
24655: PPUSH
24656: CALL_OW 250
24660: PUSH
24661: LD_VAR 0 3
24665: PPUSH
24666: CALL_OW 251
24670: PUSH
24671: LD_VAR 0 3
24675: PPUSH
24676: CALL_OW 254
24680: PUSH
24681: LD_VAR 0 3
24685: PPUSH
24686: CALL_OW 267
24690: PUSH
24691: LD_VAR 0 3
24695: PPUSH
24696: CALL_OW 248
24700: PUSH
24701: LD_VAR 0 3
24705: PPUSH
24706: CALL_OW 269
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: PUSH
24720: EMPTY
24721: LIST
24722: ADD
24723: ST_TO_ADDR
24724: GO 24911
// if GetBType ( i ) = b_factory then
24726: LD_VAR 0 3
24730: PPUSH
24731: CALL_OW 266
24735: PUSH
24736: LD_INT 3
24738: EQUAL
24739: IFFALSE 24829
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
24741: LD_ADDR_VAR 0 4
24745: PUSH
24746: LD_VAR 0 4
24750: PPUSH
24751: LD_INT 1
24753: PPUSH
24754: LD_VAR 0 3
24758: PPUSH
24759: CALL_OW 266
24763: PUSH
24764: LD_VAR 0 3
24768: PPUSH
24769: CALL_OW 250
24773: PUSH
24774: LD_VAR 0 3
24778: PPUSH
24779: CALL_OW 251
24783: PUSH
24784: LD_VAR 0 3
24788: PPUSH
24789: CALL_OW 254
24793: PUSH
24794: LD_VAR 0 3
24798: PPUSH
24799: CALL_OW 267
24803: PUSH
24804: LD_VAR 0 3
24808: PPUSH
24809: CALL_OW 248
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: PPUSH
24822: CALL_OW 2
24826: ST_TO_ADDR
24827: GO 24911
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
24829: LD_ADDR_VAR 0 4
24833: PUSH
24834: LD_VAR 0 4
24838: PUSH
24839: LD_VAR 0 3
24843: PPUSH
24844: CALL_OW 266
24848: PUSH
24849: LD_VAR 0 3
24853: PPUSH
24854: CALL_OW 250
24858: PUSH
24859: LD_VAR 0 3
24863: PPUSH
24864: CALL_OW 251
24868: PUSH
24869: LD_VAR 0 3
24873: PPUSH
24874: CALL_OW 254
24878: PUSH
24879: LD_VAR 0 3
24883: PPUSH
24884: CALL_OW 267
24888: PUSH
24889: LD_VAR 0 3
24893: PPUSH
24894: CALL_OW 248
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: PUSH
24907: EMPTY
24908: LIST
24909: ADD
24910: ST_TO_ADDR
// end ;
24911: GO 24475
24913: POP
24914: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
24915: LD_VAR 0 4
24919: PPUSH
24920: LD_STRING 08_GammaBase
24922: PPUSH
24923: CALL_OW 39
// end ;
24927: LD_VAR 0 2
24931: RET
