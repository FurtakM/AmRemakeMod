// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 41
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 42
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 38
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 17
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 18
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 20
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 32
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 33
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 37
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 11
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 30
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 40
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 34
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 39
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 43
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 5988 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 1432 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 4793 0 0
// PrepareRussians ;
 229: CALL 5111 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 24
 291: PPUSH
 292: LD_EXP 25
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 7206 0 6
// PrepareCutsceneAttack ;
 312: CALL 4845 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 43
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , fac , lab , arm , j , placed , ct , bun ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
// uc_side = 1 ;
 530: LD_ADDR_OWVAR 20
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// uc_nation = 1 ;
 538: LD_ADDR_OWVAR 21
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// if gammaCommander = 1 then
 546: LD_EXP 11
 550: PUSH
 551: LD_INT 1
 553: EQUAL
 554: IFFALSE 587
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 556: LD_ADDR_EXP 3
 560: PUSH
 561: LD_STRING Donaldson
 563: PPUSH
 564: LD_INT 1
 566: PPUSH
 567: CALL 5529 0 2
 571: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSpawn , false ) ;
 572: LD_EXP 3
 576: PPUSH
 577: LD_INT 5
 579: PPUSH
 580: LD_INT 0
 582: PPUSH
 583: CALL_OW 49
// end ; if gammaCommander = 2 then
 587: LD_EXP 11
 591: PUSH
 592: LD_INT 2
 594: EQUAL
 595: IFFALSE 628
// begin Brown = PrepareUnit ( Brown , true ) ;
 597: LD_ADDR_EXP 2
 601: PUSH
 602: LD_STRING Brown
 604: PPUSH
 605: LD_INT 1
 607: PPUSH
 608: CALL 5529 0 2
 612: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSpawn , false ) ;
 613: LD_EXP 2
 617: PPUSH
 618: LD_INT 5
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ; if gammaCommander = 3 then
 628: LD_EXP 11
 632: PUSH
 633: LD_INT 3
 635: EQUAL
 636: IFFALSE 669
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 638: LD_ADDR_EXP 12
 642: PUSH
 643: LD_STRING VanHouten
 645: PPUSH
 646: LD_INT 1
 648: PPUSH
 649: CALL 5529 0 2
 653: ST_TO_ADDR
// PlaceUnitArea ( Houten , GammaSpawn , false ) ;
 654: LD_EXP 12
 658: PPUSH
 659: LD_INT 5
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: CALL_OW 49
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 669: LD_ADDR_EXP 21
 673: PUSH
 674: LD_STRING Harisson
 676: PPUSH
 677: LD_INT 0
 679: PPUSH
 680: CALL 5529 0 2
 684: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 685: LD_ADDR_EXP 22
 689: PUSH
 690: LD_STRING Powell
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL 5529 0 2
 700: ST_TO_ADDR
// others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
 701: LD_ADDR_EXP 10
 705: PUSH
 706: LD_STRING 07_othersGamma
 708: PPUSH
 709: CALL_OW 31
 713: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
 714: LD_ADDR_VAR 0 5
 718: PUSH
 719: LD_INT 22
 721: PUSH
 722: LD_INT 1
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PUSH
 729: LD_INT 30
 731: PUSH
 732: LD_INT 5
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PPUSH
 743: CALL_OW 69
 747: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 748: LD_ADDR_VAR 0 4
 752: PUSH
 753: LD_INT 22
 755: PUSH
 756: LD_INT 1
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PUSH
 763: LD_INT 2
 765: PUSH
 766: LD_INT 30
 768: PUSH
 769: LD_INT 6
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 30
 778: PUSH
 779: LD_INT 7
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: PUSH
 786: LD_INT 30
 788: PUSH
 789: LD_INT 8
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PPUSH
 806: CALL_OW 69
 810: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
 811: LD_ADDR_VAR 0 3
 815: PUSH
 816: LD_INT 22
 818: PUSH
 819: LD_INT 1
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PUSH
 826: LD_INT 30
 828: PUSH
 829: LD_INT 3
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: PPUSH
 840: CALL_OW 69
 844: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
 845: LD_ADDR_VAR 0 8
 849: PUSH
 850: LD_INT 22
 852: PUSH
 853: LD_INT 1
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PUSH
 860: LD_INT 30
 862: PUSH
 863: LD_INT 36
 865: PUSH
 866: EMPTY
 867: LIST
 868: LIST
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: PPUSH
 874: CALL_OW 69
 878: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
 879: LD_ADDR_VAR 0 9
 883: PUSH
 884: LD_INT 22
 886: PUSH
 887: LD_INT 1
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 2
 896: PUSH
 897: LD_INT 30
 899: PUSH
 900: LD_INT 31
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 30
 909: PUSH
 910: LD_INT 32
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: LIST
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: PPUSH
 926: CALL_OW 69
 930: ST_TO_ADDR
// for i in others_gamma do
 931: LD_ADDR_VAR 0 2
 935: PUSH
 936: LD_EXP 10
 940: PUSH
 941: FOR_IN
 942: IFFALSE 1317
// begin placed := false ;
 944: LD_ADDR_VAR 0 7
 948: PUSH
 949: LD_INT 0
 951: ST_TO_ADDR
// if GetClass ( i ) = 1 then
 952: LD_VAR 0 2
 956: PPUSH
 957: CALL_OW 257
 961: PUSH
 962: LD_INT 1
 964: EQUAL
 965: IFFALSE 1090
// begin if UnitFilter ( bun , [ f_empty ] ) then
 967: LD_VAR 0 9
 971: PPUSH
 972: LD_INT 58
 974: PUSH
 975: EMPTY
 976: LIST
 977: PPUSH
 978: CALL_OW 72
 982: IFFALSE 1021
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
 984: LD_VAR 0 2
 988: PPUSH
 989: LD_VAR 0 9
 993: PPUSH
 994: LD_INT 58
 996: PUSH
 997: EMPTY
 998: LIST
 999: PPUSH
1000: CALL_OW 72
1004: PUSH
1005: LD_INT 1
1007: ARRAY
1008: PPUSH
1009: CALL_OW 52
// placed := true ;
1013: LD_ADDR_VAR 0 7
1017: PUSH
1018: LD_INT 1
1020: ST_TO_ADDR
// end ; if arm and not placed then
1021: LD_VAR 0 5
1025: PUSH
1026: LD_VAR 0 7
1030: NOT
1031: AND
1032: IFFALSE 1090
// begin for j in arm do
1034: LD_ADDR_VAR 0 6
1038: PUSH
1039: LD_VAR 0 5
1043: PUSH
1044: FOR_IN
1045: IFFALSE 1088
// if UnitsInside ( j ) < 6 then
1047: LD_VAR 0 6
1051: PPUSH
1052: CALL_OW 313
1056: PUSH
1057: LD_INT 6
1059: LESS
1060: IFFALSE 1086
// begin PlaceHumanInUnit ( i , j ) ;
1062: LD_VAR 0 2
1066: PPUSH
1067: LD_VAR 0 6
1071: PPUSH
1072: CALL_OW 52
// placed := true ;
1076: LD_ADDR_VAR 0 7
1080: PUSH
1081: LD_INT 1
1083: ST_TO_ADDR
// break ;
1084: GO 1088
// end ;
1086: GO 1044
1088: POP
1089: POP
// end ; end ; if GetClass ( i ) = 3 then
1090: LD_VAR 0 2
1094: PPUSH
1095: CALL_OW 257
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: IFFALSE 1207
// if fac then
1105: LD_VAR 0 3
1109: IFFALSE 1207
// begin if ct then
1111: LD_VAR 0 8
1115: IFFALSE 1143
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
1117: LD_VAR 0 2
1121: PPUSH
1122: LD_VAR 0 8
1126: PUSH
1127: LD_INT 1
1129: ARRAY
1130: PPUSH
1131: CALL_OW 52
// placed := true ;
1135: LD_ADDR_VAR 0 7
1139: PUSH
1140: LD_INT 1
1142: ST_TO_ADDR
// end ; if placed then
1143: LD_VAR 0 7
1147: IFFALSE 1151
// continue ;
1149: GO 941
// for j in fac do
1151: LD_ADDR_VAR 0 6
1155: PUSH
1156: LD_VAR 0 3
1160: PUSH
1161: FOR_IN
1162: IFFALSE 1205
// if UnitsInside ( j ) < 6 then
1164: LD_VAR 0 6
1168: PPUSH
1169: CALL_OW 313
1173: PUSH
1174: LD_INT 6
1176: LESS
1177: IFFALSE 1203
// begin PlaceHumanInUnit ( i , j ) ;
1179: LD_VAR 0 2
1183: PPUSH
1184: LD_VAR 0 6
1188: PPUSH
1189: CALL_OW 52
// placed := true ;
1193: LD_ADDR_VAR 0 7
1197: PUSH
1198: LD_INT 1
1200: ST_TO_ADDR
// break ;
1201: GO 1205
// end ;
1203: GO 1161
1205: POP
1206: POP
// end ; if GetClass ( i ) = 4 then
1207: LD_VAR 0 2
1211: PPUSH
1212: CALL_OW 257
1216: PUSH
1217: LD_INT 4
1219: EQUAL
1220: IFFALSE 1284
// if lab then
1222: LD_VAR 0 4
1226: IFFALSE 1284
// begin for j in lab do
1228: LD_ADDR_VAR 0 6
1232: PUSH
1233: LD_VAR 0 4
1237: PUSH
1238: FOR_IN
1239: IFFALSE 1282
// if UnitsInside ( j ) < 6 then
1241: LD_VAR 0 6
1245: PPUSH
1246: CALL_OW 313
1250: PUSH
1251: LD_INT 6
1253: LESS
1254: IFFALSE 1280
// begin PlaceHumanInUnit ( i , j ) ;
1256: LD_VAR 0 2
1260: PPUSH
1261: LD_VAR 0 6
1265: PPUSH
1266: CALL_OW 52
// placed := true ;
1270: LD_ADDR_VAR 0 7
1274: PUSH
1275: LD_INT 1
1277: ST_TO_ADDR
// break ;
1278: GO 1282
// end ;
1280: GO 1238
1282: POP
1283: POP
// end ; if not placed then
1284: LD_VAR 0 7
1288: NOT
1289: IFFALSE 1315
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
1291: LD_VAR 0 2
1295: PPUSH
1296: LD_INT 5
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: CALL_OW 49
// ComHold ( i ) ;
1306: LD_VAR 0 2
1310: PPUSH
1311: CALL_OW 140
// end ; end ;
1315: GO 941
1317: POP
1318: POP
// if ct and UnitsInside ( ct [ 1 ] ) then
1319: LD_VAR 0 8
1323: PUSH
1324: LD_VAR 0 8
1328: PUSH
1329: LD_INT 1
1331: ARRAY
1332: PPUSH
1333: CALL_OW 313
1337: AND
1338: IFFALSE 1427
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
1340: LD_ADDR_VAR 0 2
1344: PUSH
1345: LD_INT 22
1347: PUSH
1348: LD_INT 1
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: PUSH
1355: LD_INT 33
1357: PUSH
1358: LD_INT 2
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PPUSH
1369: CALL_OW 69
1373: PUSH
1374: FOR_IN
1375: IFFALSE 1425
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
1377: LD_VAR 0 2
1381: PPUSH
1382: LD_VAR 0 8
1386: PUSH
1387: LD_INT 1
1389: ARRAY
1390: PPUSH
1391: CALL_OW 313
1395: PUSH
1396: LD_INT 1
1398: PPUSH
1399: LD_VAR 0 8
1403: PUSH
1404: LD_INT 1
1406: ARRAY
1407: PPUSH
1408: CALL_OW 313
1412: PPUSH
1413: CALL_OW 12
1417: ARRAY
1418: PPUSH
1419: CALL_OW 135
1423: GO 1374
1425: POP
1426: POP
// end ; end ;
1427: LD_VAR 0 1
1431: RET
// export function PrepareBase ; var blist , i , b , veh ; begin
1432: LD_INT 0
1434: PPUSH
1435: PPUSH
1436: PPUSH
1437: PPUSH
1438: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
1439: LD_INT 71
1441: PPUSH
1442: LD_INT 5
1444: PPUSH
1445: LD_INT 1
1447: PPUSH
1448: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
1452: LD_ADDR_VAR 0 2
1456: PUSH
1457: LD_STRING GammaBase
1459: PPUSH
1460: EMPTY
1461: PPUSH
1462: CALL_OW 30
1466: ST_TO_ADDR
// uc_side := 1 ;
1467: LD_ADDR_OWVAR 20
1471: PUSH
1472: LD_INT 1
1474: ST_TO_ADDR
// uc_nation := 1 ;
1475: LD_ADDR_OWVAR 21
1479: PUSH
1480: LD_INT 1
1482: ST_TO_ADDR
// for i in blist do
1483: LD_ADDR_VAR 0 3
1487: PUSH
1488: LD_VAR 0 2
1492: PUSH
1493: FOR_IN
1494: IFFALSE 1902
// begin bc_type := i [ 1 ] ;
1496: LD_ADDR_OWVAR 42
1500: PUSH
1501: LD_VAR 0 3
1505: PUSH
1506: LD_INT 1
1508: ARRAY
1509: ST_TO_ADDR
// bc_level := i [ 5 ] ;
1510: LD_ADDR_OWVAR 43
1514: PUSH
1515: LD_VAR 0 3
1519: PUSH
1520: LD_INT 5
1522: ARRAY
1523: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
1524: LD_VAR 0 3
1528: PUSH
1529: LD_INT 1
1531: ARRAY
1532: PUSH
1533: LD_INT 7
1535: PUSH
1536: LD_INT 8
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: IN
1543: IFFALSE 1599
// begin bc_kind1 := i [ 7 ] ;
1545: LD_ADDR_OWVAR 44
1549: PUSH
1550: LD_VAR 0 3
1554: PUSH
1555: LD_INT 7
1557: ARRAY
1558: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1559: LD_STRING 06_remoteVehs_1
1561: PPUSH
1562: LD_INT 0
1564: PPUSH
1565: CALL_OW 30
1569: PUSH
1570: LD_INT 1
1572: EQUAL
1573: IFFALSE 1585
// begin bc_kind2 := 15 ;
1575: LD_ADDR_OWVAR 45
1579: PUSH
1580: LD_INT 15
1582: ST_TO_ADDR
// end else
1583: GO 1599
// begin bc_kind2 := i [ 8 ] ;
1585: LD_ADDR_OWVAR 45
1589: PUSH
1590: LD_VAR 0 3
1594: PUSH
1595: LD_INT 8
1597: ARRAY
1598: ST_TO_ADDR
// end ; end ; if bc_type = b_depot then
1599: LD_OWVAR 42
1603: PUSH
1604: LD_INT 0
1606: EQUAL
1607: IFFALSE 1725
// begin bc_type := b_warehouse ;
1609: LD_ADDR_OWVAR 42
1613: PUSH
1614: LD_INT 1
1616: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1617: LD_ADDR_EXP 36
1621: PUSH
1622: LD_VAR 0 3
1626: PUSH
1627: LD_INT 2
1629: ARRAY
1630: PPUSH
1631: LD_VAR 0 3
1635: PUSH
1636: LD_INT 3
1638: ARRAY
1639: PPUSH
1640: LD_VAR 0 3
1644: PUSH
1645: LD_INT 4
1647: ARRAY
1648: PPUSH
1649: CALL_OW 47
1653: ST_TO_ADDR
// SetBName ( amDepot , gamma ) ;
1654: LD_EXP 36
1658: PPUSH
1659: LD_STRING gamma
1661: PPUSH
1662: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 200 , 150 , 100 ] [ Difficulty ] ) ;
1666: LD_EXP 36
1670: PPUSH
1671: CALL_OW 274
1675: PPUSH
1676: LD_INT 1
1678: PPUSH
1679: LD_INT 200
1681: PUSH
1682: LD_INT 150
1684: PUSH
1685: LD_INT 100
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_OWVAR 67
1697: ARRAY
1698: PPUSH
1699: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
1703: LD_EXP 36
1707: PPUSH
1708: CALL_OW 274
1712: PPUSH
1713: LD_INT 2
1715: PPUSH
1716: LD_INT 200
1718: PPUSH
1719: CALL_OW 277
// end else
1723: GO 1867
// begin if bc_type = 4 then
1725: LD_OWVAR 42
1729: PUSH
1730: LD_INT 4
1732: EQUAL
1733: IFFALSE 1782
// begin bc_type = 5 ;
1735: LD_ADDR_OWVAR 42
1739: PUSH
1740: LD_INT 5
1742: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1743: LD_ADDR_VAR 0 4
1747: PUSH
1748: LD_VAR 0 3
1752: PUSH
1753: LD_INT 2
1755: ARRAY
1756: PPUSH
1757: LD_VAR 0 3
1761: PUSH
1762: LD_INT 3
1764: ARRAY
1765: PPUSH
1766: LD_VAR 0 3
1770: PUSH
1771: LD_INT 4
1773: ARRAY
1774: PPUSH
1775: CALL_OW 47
1779: ST_TO_ADDR
// end else
1780: GO 1867
// begin bc_type := i [ 1 ] ;
1782: LD_ADDR_OWVAR 42
1786: PUSH
1787: LD_VAR 0 3
1791: PUSH
1792: LD_INT 1
1794: ARRAY
1795: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 and bc_type = b_lab_half then
1796: LD_STRING 06_remoteVehs_1
1798: PPUSH
1799: LD_INT 0
1801: PPUSH
1802: CALL_OW 30
1806: PUSH
1807: LD_INT 1
1809: EQUAL
1810: PUSH
1811: LD_OWVAR 42
1815: PUSH
1816: LD_INT 7
1818: EQUAL
1819: AND
1820: IFFALSE 1830
// bc_type := b_lab_full ;
1822: LD_ADDR_OWVAR 42
1826: PUSH
1827: LD_INT 8
1829: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1830: LD_ADDR_VAR 0 4
1834: PUSH
1835: LD_VAR 0 3
1839: PUSH
1840: LD_INT 2
1842: ARRAY
1843: PPUSH
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 3
1851: ARRAY
1852: PPUSH
1853: LD_VAR 0 3
1857: PUSH
1858: LD_INT 4
1860: ARRAY
1861: PPUSH
1862: CALL_OW 47
1866: ST_TO_ADDR
// end ; end ; if GetBType ( b ) = b_bunker then
1867: LD_VAR 0 4
1871: PPUSH
1872: CALL_OW 266
1876: PUSH
1877: LD_INT 32
1879: EQUAL
1880: IFFALSE 1900
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
1882: LD_VAR 0 4
1886: PPUSH
1887: LD_VAR 0 3
1891: PUSH
1892: LD_INT 7
1894: ARRAY
1895: PPUSH
1896: CALL_OW 431
// end ;
1900: GO 1493
1902: POP
1903: POP
// if LoadVariable ( 06_remoteVehs_1 , 0 ) = 1 then
1904: LD_STRING 06_remoteVehs_1
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 30
1914: PUSH
1915: LD_INT 1
1917: EQUAL
1918: IFFALSE 2122
// begin bc_type = 36 ;
1920: LD_ADDR_OWVAR 42
1924: PUSH
1925: LD_INT 36
1927: ST_TO_ADDR
// bc_level = 4 ;
1928: LD_ADDR_OWVAR 43
1932: PUSH
1933: LD_INT 4
1935: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) ;
1936: LD_INT 62
1938: PPUSH
1939: LD_INT 12
1941: PPUSH
1942: LD_INT 3
1944: PPUSH
1945: CALL_OW 47
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
1949: LD_ADDR_VAR 0 3
1953: PUSH
1954: DOUBLE
1955: LD_INT 1
1957: DEC
1958: ST_TO_ADDR
1959: LD_INT 3
1961: PUSH
1962: LD_INT 2
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_OWVAR 67
1977: ARRAY
1978: PUSH
1979: FOR_TO
1980: IFFALSE 2120
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
1982: LD_ADDR_OWVAR 37
1986: PUSH
1987: LD_INT 3
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 2
2005: PPUSH
2006: CALL_OW 12
2010: ARRAY
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: LIST
2019: PUSH
2020: LD_OWVAR 67
2024: ARRAY
2025: ST_TO_ADDR
// vc_engine = 1 ;
2026: LD_ADDR_OWVAR 39
2030: PUSH
2031: LD_INT 1
2033: ST_TO_ADDR
// vc_control = 2 ;
2034: LD_ADDR_OWVAR 38
2038: PUSH
2039: LD_INT 2
2041: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2042: LD_ADDR_OWVAR 40
2046: PUSH
2047: LD_INT 3
2049: PUSH
2050: LD_INT 4
2052: PUSH
2053: LD_INT 5
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: PUSH
2061: LD_INT 1
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL_OW 12
2071: ARRAY
2072: ST_TO_ADDR
// veh = CreateVehicle ;
2073: LD_ADDR_VAR 0 5
2077: PUSH
2078: CALL_OW 45
2082: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( amDepot ) , GetY ( amDepot ) , 7 , false ) ;
2083: LD_VAR 0 5
2087: PPUSH
2088: LD_EXP 36
2092: PPUSH
2093: CALL_OW 250
2097: PPUSH
2098: LD_EXP 36
2102: PPUSH
2103: CALL_OW 251
2107: PPUSH
2108: LD_INT 7
2110: PPUSH
2111: LD_INT 0
2113: PPUSH
2114: CALL_OW 50
// end ;
2118: GO 1979
2120: POP
2121: POP
// end ; end ;
2122: LD_VAR 0 1
2126: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
2127: LD_INT 0
2129: PPUSH
2130: PPUSH
2131: PPUSH
2132: PPUSH
// uc_side = 1 ;
2133: LD_ADDR_OWVAR 20
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// uc_nation = 1 ;
2141: LD_ADDR_OWVAR 21
2145: PUSH
2146: LD_INT 1
2148: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
2149: LD_ADDR_EXP 13
2153: PUSH
2154: LD_STRING 06c_Denis
2156: PPUSH
2157: LD_INT 1
2159: PPUSH
2160: CALL 5529 0 2
2164: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
2165: LD_EXP 13
2169: PPUSH
2170: LD_INT 4
2172: PPUSH
2173: LD_INT 0
2175: PPUSH
2176: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
2180: LD_ADDR_EXP 14
2184: PUSH
2185: LD_STRING 06c_Joan
2187: PPUSH
2188: LD_INT 1
2190: PPUSH
2191: CALL 5529 0 2
2195: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
2196: LD_EXP 14
2200: PPUSH
2201: LD_INT 4
2203: PPUSH
2204: LD_INT 0
2206: PPUSH
2207: CALL_OW 49
// if LoadVariable ( GladstoneIn07 , 0 ) = 0 then
2211: LD_STRING GladstoneIn07
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 30
2221: PUSH
2222: LD_INT 0
2224: EQUAL
2225: IFFALSE 2293
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
2227: LD_ADDR_EXP 8
2231: PUSH
2232: LD_STRING 06c_Gladstone
2234: PPUSH
2235: LD_INT 1
2237: PPUSH
2238: CALL 5529 0 2
2242: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
2243: LD_EXP 8
2247: NOT
2248: PUSH
2249: LD_STRING GladstoneStayInDelta
2251: PPUSH
2252: LD_INT 0
2254: PPUSH
2255: CALL_OW 30
2259: AND
2260: IFFALSE 2278
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
2262: LD_ADDR_EXP 8
2266: PUSH
2267: LD_STRING 05_Gladstone
2269: PPUSH
2270: LD_INT 1
2272: PPUSH
2273: CALL 5529 0 2
2277: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
2278: LD_EXP 8
2282: PPUSH
2283: LD_INT 4
2285: PPUSH
2286: LD_INT 0
2288: PPUSH
2289: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
2293: LD_STRING LisaStayInDelta
2295: PPUSH
2296: LD_INT 0
2298: PPUSH
2299: CALL_OW 30
2303: IFFALSE 2336
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
2305: LD_ADDR_EXP 6
2309: PUSH
2310: LD_STRING 05_Lisa
2312: PPUSH
2313: LD_INT 1
2315: PPUSH
2316: CALL 5529 0 2
2320: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
2321: LD_EXP 6
2325: PPUSH
2326: LD_INT 4
2328: PPUSH
2329: LD_INT 0
2331: PPUSH
2332: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
2336: LD_STRING BobbyStayInDelta
2338: PPUSH
2339: LD_INT 0
2341: PPUSH
2342: CALL_OW 30
2346: IFFALSE 2379
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
2348: LD_ADDR_EXP 4
2352: PUSH
2353: LD_STRING 05_Bobby
2355: PPUSH
2356: LD_INT 1
2358: PPUSH
2359: CALL 5529 0 2
2363: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
2364: LD_EXP 4
2368: PPUSH
2369: LD_INT 4
2371: PPUSH
2372: LD_INT 0
2374: PPUSH
2375: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
2379: LD_STRING CyrusStayInDelta
2381: PPUSH
2382: LD_INT 0
2384: PPUSH
2385: CALL_OW 30
2389: IFFALSE 2422
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
2391: LD_ADDR_EXP 5
2395: PUSH
2396: LD_STRING 05_Cyrus
2398: PPUSH
2399: LD_INT 1
2401: PPUSH
2402: CALL 5529 0 2
2406: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
2407: LD_EXP 5
2411: PPUSH
2412: LD_INT 4
2414: PPUSH
2415: LD_INT 0
2417: PPUSH
2418: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
2422: LD_STRING BrownStayInDelta
2424: PPUSH
2425: LD_INT 0
2427: PPUSH
2428: CALL_OW 30
2432: IFFALSE 2465
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
2434: LD_ADDR_EXP 2
2438: PUSH
2439: LD_STRING 05_Brown
2441: PPUSH
2442: LD_INT 1
2444: PPUSH
2445: CALL 5529 0 2
2449: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
2450: LD_EXP 2
2454: PPUSH
2455: LD_INT 4
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
2465: LD_STRING DonaldsonStayInDelta
2467: PPUSH
2468: LD_INT 0
2470: PPUSH
2471: CALL_OW 30
2475: IFFALSE 2508
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
2477: LD_ADDR_EXP 3
2481: PUSH
2482: LD_STRING 05_Donaldson
2484: PPUSH
2485: LD_INT 1
2487: PPUSH
2488: CALL 5529 0 2
2492: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
2493: LD_EXP 3
2497: PPUSH
2498: LD_INT 4
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 49
// end ; other = CreateCharacterSet ( OtherStayInDelta ) ;
2508: LD_ADDR_VAR 0 4
2512: PUSH
2513: LD_STRING OtherStayInDelta
2515: PPUSH
2516: CALL_OW 31
2520: ST_TO_ADDR
// if other then
2521: LD_VAR 0 4
2525: IFFALSE 2570
// for j = 1 to other do
2527: LD_ADDR_VAR 0 3
2531: PUSH
2532: DOUBLE
2533: LD_INT 1
2535: DEC
2536: ST_TO_ADDR
2537: LD_VAR 0 4
2541: PUSH
2542: FOR_TO
2543: IFFALSE 2568
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
2545: LD_VAR 0 4
2549: PUSH
2550: LD_VAR 0 3
2554: ARRAY
2555: PPUSH
2556: LD_INT 4
2558: PPUSH
2559: LD_INT 0
2561: PPUSH
2562: CALL_OW 49
2566: GO 2542
2568: POP
2569: POP
// other = CreateCharacterSet ( 06_other_apemans ) ;
2570: LD_ADDR_VAR 0 4
2574: PUSH
2575: LD_STRING 06_other_apemans
2577: PPUSH
2578: CALL_OW 31
2582: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
2583: LD_VAR 0 4
2587: PUSH
2588: LD_INT 5
2590: PUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 3
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: LIST
2601: PUSH
2602: LD_OWVAR 67
2606: ARRAY
2607: GREATEREQUAL
2608: IFFALSE 2637
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
2610: LD_ADDR_VAR 0 3
2614: PUSH
2615: LD_INT 5
2617: PUSH
2618: LD_INT 4
2620: PUSH
2621: LD_INT 3
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: LIST
2628: PUSH
2629: LD_OWVAR 67
2633: ARRAY
2634: ST_TO_ADDR
2635: GO 2647
// j := other ;
2637: LD_ADDR_VAR 0 3
2641: PUSH
2642: LD_VAR 0 4
2646: ST_TO_ADDR
// for i = 1 to j do
2647: LD_ADDR_VAR 0 2
2651: PUSH
2652: DOUBLE
2653: LD_INT 1
2655: DEC
2656: ST_TO_ADDR
2657: LD_VAR 0 3
2661: PUSH
2662: FOR_TO
2663: IFFALSE 2688
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
2665: LD_VAR 0 4
2669: PUSH
2670: LD_VAR 0 2
2674: ARRAY
2675: PPUSH
2676: LD_INT 4
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: CALL_OW 49
2686: GO 2662
2688: POP
2689: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
2690: LD_INT 4
2692: PPUSH
2693: LD_INT 22
2695: PUSH
2696: LD_INT 1
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 21
2705: PUSH
2706: LD_INT 1
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PPUSH
2717: CALL_OW 70
2721: PPUSH
2722: LD_INT 53
2724: PPUSH
2725: LD_INT 19
2727: PPUSH
2728: CALL_OW 111
// firstAttack = 1 ;
2732: LD_ADDR_EXP 32
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// end ;
2740: LD_VAR 0 1
2744: RET
// export function PrepareMacmillanSquad ; var i , other , vehicles , veh ; begin
2745: LD_INT 0
2747: PPUSH
2748: PPUSH
2749: PPUSH
2750: PPUSH
2751: PPUSH
// vehicles = LoadVariable ( 07_vehicles , [ ] ) ;
2752: LD_ADDR_VAR 0 4
2756: PUSH
2757: LD_STRING 07_vehicles
2759: PPUSH
2760: EMPTY
2761: PPUSH
2762: CALL_OW 30
2766: ST_TO_ADDR
// uc_side = 1 ;
2767: LD_ADDR_OWVAR 20
2771: PUSH
2772: LD_INT 1
2774: ST_TO_ADDR
// uc_nation = 1 ;
2775: LD_ADDR_OWVAR 21
2779: PUSH
2780: LD_INT 1
2782: ST_TO_ADDR
// if vehicles > 0 then
2783: LD_VAR 0 4
2787: PUSH
2788: LD_INT 0
2790: GREATER
2791: IFFALSE 2930
// begin for i = 1 to vehicles do
2793: LD_ADDR_VAR 0 2
2797: PUSH
2798: DOUBLE
2799: LD_INT 1
2801: DEC
2802: ST_TO_ADDR
2803: LD_VAR 0 4
2807: PUSH
2808: FOR_TO
2809: IFFALSE 2928
// begin vc_chassis = vehicles [ i ] ;
2811: LD_ADDR_OWVAR 37
2815: PUSH
2816: LD_VAR 0 4
2820: PUSH
2821: LD_VAR 0 2
2825: ARRAY
2826: ST_TO_ADDR
// vc_engine = vehicles [ i + 1 ] ;
2827: LD_ADDR_OWVAR 39
2831: PUSH
2832: LD_VAR 0 4
2836: PUSH
2837: LD_VAR 0 2
2841: PUSH
2842: LD_INT 1
2844: PLUS
2845: ARRAY
2846: ST_TO_ADDR
// vc_control = vehicles [ i + 2 ] ;
2847: LD_ADDR_OWVAR 38
2851: PUSH
2852: LD_VAR 0 4
2856: PUSH
2857: LD_VAR 0 2
2861: PUSH
2862: LD_INT 2
2864: PLUS
2865: ARRAY
2866: ST_TO_ADDR
// vc_weapon = vehicles [ i + 3 ] ;
2867: LD_ADDR_OWVAR 40
2871: PUSH
2872: LD_VAR 0 4
2876: PUSH
2877: LD_VAR 0 2
2881: PUSH
2882: LD_INT 3
2884: PLUS
2885: ARRAY
2886: ST_TO_ADDR
// veh = CreateVehicle ;
2887: LD_ADDR_VAR 0 5
2891: PUSH
2892: CALL_OW 45
2896: ST_TO_ADDR
// PlaceUnitArea ( veh , GammaSupport , false ) ;
2897: LD_VAR 0 5
2901: PPUSH
2902: LD_INT 4
2904: PPUSH
2905: LD_INT 0
2907: PPUSH
2908: CALL_OW 49
// i = i + 3 ;
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: LD_VAR 0 2
2921: PUSH
2922: LD_INT 3
2924: PLUS
2925: ST_TO_ADDR
// end ;
2926: GO 2808
2928: POP
2929: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
2930: LD_ADDR_EXP 1
2934: PUSH
2935: LD_EXP 42
2939: PUSH
2940: LD_STRING JMM
2942: STR
2943: PPUSH
2944: LD_INT 1
2946: PPUSH
2947: CALL 5529 0 2
2951: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
2952: LD_EXP 11
2956: PUSH
2957: LD_INT 1
2959: EQUAL
2960: PUSH
2961: LD_EXP 11
2965: PUSH
2966: LD_INT 3
2968: EQUAL
2969: OR
2970: IFFALSE 2994
// Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
2972: LD_ADDR_EXP 2
2976: PUSH
2977: LD_EXP 42
2981: PUSH
2982: LD_STRING Brown
2984: STR
2985: PPUSH
2986: LD_INT 1
2988: PPUSH
2989: CALL 5529 0 2
2993: ST_TO_ADDR
// if gammaCommander = 2 or gammaCommander = 3 then
2994: LD_EXP 11
2998: PUSH
2999: LD_INT 2
3001: EQUAL
3002: PUSH
3003: LD_EXP 11
3007: PUSH
3008: LD_INT 3
3010: EQUAL
3011: OR
3012: IFFALSE 3036
// Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
3014: LD_ADDR_EXP 3
3018: PUSH
3019: LD_EXP 42
3023: PUSH
3024: LD_STRING Donaldson
3026: STR
3027: PPUSH
3028: LD_INT 1
3030: PPUSH
3031: CALL 5529 0 2
3035: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3036: LD_ADDR_EXP 4
3040: PUSH
3041: LD_EXP 42
3045: PUSH
3046: LD_STRING Bobby
3048: STR
3049: PPUSH
3050: LD_INT 1
3052: PPUSH
3053: CALL 5529 0 2
3057: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3058: LD_ADDR_EXP 5
3062: PUSH
3063: LD_EXP 42
3067: PUSH
3068: LD_STRING Cyrus
3070: STR
3071: PPUSH
3072: LD_INT 1
3074: PPUSH
3075: CALL 5529 0 2
3079: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3080: LD_ADDR_EXP 6
3084: PUSH
3085: LD_EXP 42
3089: PUSH
3090: LD_STRING Lisa
3092: STR
3093: PPUSH
3094: LD_INT 1
3096: PPUSH
3097: CALL 5529 0 2
3101: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3102: LD_ADDR_EXP 7
3106: PUSH
3107: LD_EXP 42
3111: PUSH
3112: LD_STRING Frank
3114: STR
3115: PPUSH
3116: LD_INT 1
3118: PPUSH
3119: CALL 5529 0 2
3123: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3124: LD_ADDR_EXP 8
3128: PUSH
3129: LD_EXP 42
3133: PUSH
3134: LD_STRING Gladstone
3136: STR
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: CALL 5529 0 2
3145: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3146: LD_ADDR_EXP 9
3150: PUSH
3151: LD_EXP 42
3155: PUSH
3156: LD_STRING Kikuchi
3158: STR
3159: PPUSH
3160: LD_INT 1
3162: PPUSH
3163: CALL 5529 0 2
3167: ST_TO_ADDR
// if gammaCommander = 1 or gammaCommander = 3 then
3168: LD_EXP 11
3172: PUSH
3173: LD_INT 1
3175: EQUAL
3176: PUSH
3177: LD_EXP 11
3181: PUSH
3182: LD_INT 3
3184: EQUAL
3185: OR
3186: IFFALSE 3203
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
3188: LD_EXP 2
3192: PPUSH
3193: LD_INT 4
3195: PPUSH
3196: LD_INT 0
3198: PPUSH
3199: CALL_OW 49
// if gammaCommander = 2 or gammaCommander = 3 then
3203: LD_EXP 11
3207: PUSH
3208: LD_INT 2
3210: EQUAL
3211: PUSH
3212: LD_EXP 11
3216: PUSH
3217: LD_INT 3
3219: EQUAL
3220: OR
3221: IFFALSE 3238
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
3223: LD_EXP 3
3227: PPUSH
3228: LD_INT 4
3230: PPUSH
3231: LD_INT 0
3233: PPUSH
3234: CALL_OW 49
// veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3238: LD_ADDR_VAR 0 5
3242: PUSH
3243: LD_INT 4
3245: PPUSH
3246: LD_INT 22
3248: PUSH
3249: LD_INT 1
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: PUSH
3256: LD_INT 21
3258: PUSH
3259: LD_INT 2
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: PUSH
3266: LD_INT 58
3268: PUSH
3269: EMPTY
3270: LIST
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: LIST
3276: PPUSH
3277: CALL_OW 70
3281: ST_TO_ADDR
// JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
3282: LD_ADDR_EXP 1
3286: PUSH
3287: LD_EXP 42
3291: PUSH
3292: LD_STRING JMM
3294: STR
3295: PPUSH
3296: LD_INT 1
3298: PPUSH
3299: CALL 5529 0 2
3303: ST_TO_ADDR
// if veh > 0 then
3304: LD_VAR 0 5
3308: PUSH
3309: LD_INT 0
3311: GREATER
3312: IFFALSE 3334
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
3314: LD_EXP 1
3318: PPUSH
3319: LD_VAR 0 5
3323: PUSH
3324: LD_INT 1
3326: ARRAY
3327: PPUSH
3328: CALL_OW 52
// end else
3332: GO 3349
// begin PlaceUnitArea ( JMM , GammaSupport , false ) ;
3334: LD_EXP 1
3338: PPUSH
3339: LD_INT 4
3341: PPUSH
3342: LD_INT 0
3344: PPUSH
3345: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3349: LD_ADDR_VAR 0 5
3353: PUSH
3354: LD_INT 4
3356: PPUSH
3357: LD_INT 22
3359: PUSH
3360: LD_INT 1
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 21
3369: PUSH
3370: LD_INT 2
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 58
3379: PUSH
3380: EMPTY
3381: LIST
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: LIST
3387: PPUSH
3388: CALL_OW 70
3392: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
3393: LD_ADDR_EXP 4
3397: PUSH
3398: LD_EXP 42
3402: PUSH
3403: LD_STRING Bobby
3405: STR
3406: PPUSH
3407: LD_INT 1
3409: PPUSH
3410: CALL 5529 0 2
3414: ST_TO_ADDR
// if veh > 0 then
3415: LD_VAR 0 5
3419: PUSH
3420: LD_INT 0
3422: GREATER
3423: IFFALSE 3445
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
3425: LD_EXP 4
3429: PPUSH
3430: LD_VAR 0 5
3434: PUSH
3435: LD_INT 1
3437: ARRAY
3438: PPUSH
3439: CALL_OW 52
// end else
3443: GO 3460
// begin PlaceUnitArea ( Bobby , GammaSupport , false ) ;
3445: LD_EXP 4
3449: PPUSH
3450: LD_INT 4
3452: PPUSH
3453: LD_INT 0
3455: PPUSH
3456: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3460: LD_ADDR_VAR 0 5
3464: PUSH
3465: LD_INT 4
3467: PPUSH
3468: LD_INT 22
3470: PUSH
3471: LD_INT 1
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: PUSH
3478: LD_INT 21
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: LD_INT 58
3490: PUSH
3491: EMPTY
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: LIST
3498: PPUSH
3499: CALL_OW 70
3503: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
3504: LD_ADDR_EXP 5
3508: PUSH
3509: LD_EXP 42
3513: PUSH
3514: LD_STRING Cyrus
3516: STR
3517: PPUSH
3518: LD_INT 1
3520: PPUSH
3521: CALL 5529 0 2
3525: ST_TO_ADDR
// if veh > 0 then
3526: LD_VAR 0 5
3530: PUSH
3531: LD_INT 0
3533: GREATER
3534: IFFALSE 3556
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
3536: LD_EXP 5
3540: PPUSH
3541: LD_VAR 0 5
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: CALL_OW 52
// end else
3554: GO 3571
// begin PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
3556: LD_EXP 5
3560: PPUSH
3561: LD_INT 4
3563: PPUSH
3564: LD_INT 0
3566: PPUSH
3567: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3571: LD_ADDR_VAR 0 5
3575: PUSH
3576: LD_INT 4
3578: PPUSH
3579: LD_INT 22
3581: PUSH
3582: LD_INT 1
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PUSH
3589: LD_INT 21
3591: PUSH
3592: LD_INT 2
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 58
3601: PUSH
3602: EMPTY
3603: LIST
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: PPUSH
3610: CALL_OW 70
3614: ST_TO_ADDR
// Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
3615: LD_ADDR_EXP 6
3619: PUSH
3620: LD_EXP 42
3624: PUSH
3625: LD_STRING Lisa
3627: STR
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: CALL 5529 0 2
3636: ST_TO_ADDR
// if veh > 0 then
3637: LD_VAR 0 5
3641: PUSH
3642: LD_INT 0
3644: GREATER
3645: IFFALSE 3667
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
3647: LD_EXP 6
3651: PPUSH
3652: LD_VAR 0 5
3656: PUSH
3657: LD_INT 1
3659: ARRAY
3660: PPUSH
3661: CALL_OW 52
// end else
3665: GO 3682
// begin PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3667: LD_EXP 6
3671: PPUSH
3672: LD_INT 4
3674: PPUSH
3675: LD_INT 0
3677: PPUSH
3678: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3682: LD_ADDR_VAR 0 5
3686: PUSH
3687: LD_INT 4
3689: PPUSH
3690: LD_INT 22
3692: PUSH
3693: LD_INT 1
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: PUSH
3700: LD_INT 21
3702: PUSH
3703: LD_INT 2
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: PUSH
3710: LD_INT 58
3712: PUSH
3713: EMPTY
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: LIST
3720: PPUSH
3721: CALL_OW 70
3725: ST_TO_ADDR
// Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
3726: LD_ADDR_EXP 7
3730: PUSH
3731: LD_EXP 42
3735: PUSH
3736: LD_STRING Frank
3738: STR
3739: PPUSH
3740: LD_INT 1
3742: PPUSH
3743: CALL 5529 0 2
3747: ST_TO_ADDR
// if veh > 0 then
3748: LD_VAR 0 5
3752: PUSH
3753: LD_INT 0
3755: GREATER
3756: IFFALSE 3778
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
3758: LD_EXP 7
3762: PPUSH
3763: LD_VAR 0 5
3767: PUSH
3768: LD_INT 1
3770: ARRAY
3771: PPUSH
3772: CALL_OW 52
// end else
3776: GO 3793
// begin PlaceUnitArea ( Frank , GammaSupport , false ) ;
3778: LD_EXP 7
3782: PPUSH
3783: LD_INT 4
3785: PPUSH
3786: LD_INT 0
3788: PPUSH
3789: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3793: LD_ADDR_VAR 0 5
3797: PUSH
3798: LD_INT 4
3800: PPUSH
3801: LD_INT 22
3803: PUSH
3804: LD_INT 1
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 21
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: LD_INT 58
3823: PUSH
3824: EMPTY
3825: LIST
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: PPUSH
3832: CALL_OW 70
3836: ST_TO_ADDR
// Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
3837: LD_ADDR_EXP 8
3841: PUSH
3842: LD_EXP 42
3846: PUSH
3847: LD_STRING Gladstone
3849: STR
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: CALL 5529 0 2
3858: ST_TO_ADDR
// if veh > 0 then
3859: LD_VAR 0 5
3863: PUSH
3864: LD_INT 0
3866: GREATER
3867: IFFALSE 3889
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
3869: LD_EXP 8
3873: PPUSH
3874: LD_VAR 0 5
3878: PUSH
3879: LD_INT 1
3881: ARRAY
3882: PPUSH
3883: CALL_OW 52
// end else
3887: GO 3904
// begin PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3889: LD_EXP 8
3893: PPUSH
3894: LD_INT 4
3896: PPUSH
3897: LD_INT 0
3899: PPUSH
3900: CALL_OW 49
// end ; veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3904: LD_ADDR_VAR 0 5
3908: PUSH
3909: LD_INT 4
3911: PPUSH
3912: LD_INT 22
3914: PUSH
3915: LD_INT 1
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_INT 21
3924: PUSH
3925: LD_INT 2
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 58
3934: PUSH
3935: EMPTY
3936: LIST
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: LIST
3942: PPUSH
3943: CALL_OW 70
3947: ST_TO_ADDR
// Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
3948: LD_ADDR_EXP 9
3952: PUSH
3953: LD_EXP 42
3957: PUSH
3958: LD_STRING Kikuchi
3960: STR
3961: PPUSH
3962: LD_INT 1
3964: PPUSH
3965: CALL 5529 0 2
3969: ST_TO_ADDR
// if veh > 0 then
3970: LD_VAR 0 5
3974: PUSH
3975: LD_INT 0
3977: GREATER
3978: IFFALSE 4000
// begin PlaceHumanInUnit ( Kikuchi , veh [ 1 ] ) ;
3980: LD_EXP 9
3984: PPUSH
3985: LD_VAR 0 5
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: CALL_OW 52
// end else
3998: GO 4015
// begin PlaceUnitArea ( Kikuchi , GammaSupport , false ) ;
4000: LD_EXP 9
4004: PPUSH
4005: LD_INT 4
4007: PPUSH
4008: LD_INT 0
4010: PPUSH
4011: CALL_OW 49
// end ; other = CreateCharacterSet ( 07c_others ) ;
4015: LD_ADDR_VAR 0 3
4019: PUSH
4020: LD_STRING 07c_others
4022: PPUSH
4023: CALL_OW 31
4027: ST_TO_ADDR
// for i in other do
4028: LD_ADDR_VAR 0 2
4032: PUSH
4033: LD_VAR 0 3
4037: PUSH
4038: FOR_IN
4039: IFFALSE 4132
// begin veh = FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4041: LD_ADDR_VAR 0 5
4045: PUSH
4046: LD_INT 4
4048: PPUSH
4049: LD_INT 22
4051: PUSH
4052: LD_INT 1
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 21
4061: PUSH
4062: LD_INT 2
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PUSH
4069: LD_INT 58
4071: PUSH
4072: EMPTY
4073: LIST
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: LIST
4079: PPUSH
4080: CALL_OW 70
4084: ST_TO_ADDR
// if veh > 0 then
4085: LD_VAR 0 5
4089: PUSH
4090: LD_INT 0
4092: GREATER
4093: IFFALSE 4115
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
4095: LD_VAR 0 2
4099: PPUSH
4100: LD_VAR 0 5
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: CALL_OW 52
// end else
4113: GO 4130
// begin PlaceUnitArea ( i , GammaSupport , false ) ;
4115: LD_VAR 0 2
4119: PPUSH
4120: LD_INT 4
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: CALL_OW 49
// end ; end ;
4130: GO 4038
4132: POP
4133: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] ] ) , 53 , 19 ) ;
4134: LD_INT 4
4136: PPUSH
4137: LD_INT 22
4139: PUSH
4140: LD_INT 1
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: PPUSH
4150: CALL_OW 70
4154: PPUSH
4155: LD_INT 53
4157: PPUSH
4158: LD_INT 19
4160: PPUSH
4161: CALL_OW 111
// end ;
4165: LD_VAR 0 1
4169: RET
// export function PrepareSikorsky ; begin
4170: LD_INT 0
4172: PPUSH
// uc_side = 4 ;
4173: LD_ADDR_OWVAR 20
4177: PUSH
4178: LD_INT 4
4180: ST_TO_ADDR
// uc_nation = 1 ;
4181: LD_ADDR_OWVAR 21
4185: PUSH
4186: LD_INT 1
4188: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
4189: LD_ADDR_EXP 15
4193: PUSH
4194: LD_STRING Sikorski
4196: PPUSH
4197: LD_INT 0
4199: PPUSH
4200: CALL 5529 0 2
4204: ST_TO_ADDR
// vc_engine = 1 ;
4205: LD_ADDR_OWVAR 39
4209: PUSH
4210: LD_INT 1
4212: ST_TO_ADDR
// vc_control = 1 ;
4213: LD_ADDR_OWVAR 38
4217: PUSH
4218: LD_INT 1
4220: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
4221: LD_ADDR_OWVAR 40
4225: PUSH
4226: LD_INT 5
4228: PUSH
4229: LD_INT 3
4231: PUSH
4232: LD_INT 4
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: LIST
4239: PUSH
4240: LD_OWVAR 67
4244: ARRAY
4245: ST_TO_ADDR
// vc_chassis = 4 ;
4246: LD_ADDR_OWVAR 37
4250: PUSH
4251: LD_INT 4
4253: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
4254: LD_ADDR_EXP 16
4258: PUSH
4259: CALL_OW 45
4263: ST_TO_ADDR
// PlaceUnitArea ( SikorskyTank , SikorskySpawn , false ) ;
4264: LD_EXP 16
4268: PPUSH
4269: LD_INT 9
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
4279: LD_EXP 15
4283: PPUSH
4284: LD_EXP 16
4288: PPUSH
4289: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
4293: LD_EXP 16
4297: PPUSH
4298: LD_INT 5
4300: PPUSH
4301: CALL_OW 113
// end ;
4305: LD_VAR 0 1
4309: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
4310: LD_INT 0
4312: PPUSH
4313: PPUSH
4314: PPUSH
4315: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
4316: LD_ADDR_VAR 0 2
4320: PUSH
4321: DOUBLE
4322: LD_INT 1
4324: DEC
4325: ST_TO_ADDR
4326: LD_INT 8
4328: PUSH
4329: LD_INT 7
4331: PUSH
4332: LD_INT 7
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: LIST
4339: PUSH
4340: LD_OWVAR 67
4344: ARRAY
4345: PUSH
4346: FOR_TO
4347: IFFALSE 4444
// begin uc_side = 4 ;
4349: LD_ADDR_OWVAR 20
4353: PUSH
4354: LD_INT 4
4356: ST_TO_ADDR
// uc_nation = 1 ;
4357: LD_ADDR_OWVAR 21
4361: PUSH
4362: LD_INT 1
4364: ST_TO_ADDR
// hc_name =  ;
4365: LD_ADDR_OWVAR 26
4369: PUSH
4370: LD_STRING 
4372: ST_TO_ADDR
// hc_gallery =  ;
4373: LD_ADDR_OWVAR 33
4377: PUSH
4378: LD_STRING 
4380: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
4381: LD_INT 0
4383: PPUSH
4384: LD_INT 1
4386: PPUSH
4387: LD_INT 5
4389: PPUSH
4390: LD_INT 8
4392: PPUSH
4393: CALL_OW 12
4397: PPUSH
4398: CALL_OW 380
// un = CreateHuman ;
4402: LD_ADDR_VAR 0 3
4406: PUSH
4407: CALL_OW 44
4411: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4412: LD_VAR 0 3
4416: PPUSH
4417: LD_INT 9
4419: PPUSH
4420: LD_INT 0
4422: PPUSH
4423: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
4427: LD_VAR 0 3
4431: PPUSH
4432: LD_INT 53
4434: PPUSH
4435: LD_INT 23
4437: PPUSH
4438: CALL_OW 111
// end ;
4442: GO 4346
4444: POP
4445: POP
// for i = 1 to 3 do
4446: LD_ADDR_VAR 0 2
4450: PUSH
4451: DOUBLE
4452: LD_INT 1
4454: DEC
4455: ST_TO_ADDR
4456: LD_INT 3
4458: PUSH
4459: FOR_TO
4460: IFFALSE 4557
// begin uc_side = 4 ;
4462: LD_ADDR_OWVAR 20
4466: PUSH
4467: LD_INT 4
4469: ST_TO_ADDR
// uc_nation = 1 ;
4470: LD_ADDR_OWVAR 21
4474: PUSH
4475: LD_INT 1
4477: ST_TO_ADDR
// hc_name =  ;
4478: LD_ADDR_OWVAR 26
4482: PUSH
4483: LD_STRING 
4485: ST_TO_ADDR
// hc_gallery =  ;
4486: LD_ADDR_OWVAR 33
4490: PUSH
4491: LD_STRING 
4493: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
4494: LD_INT 0
4496: PPUSH
4497: LD_INT 4
4499: PPUSH
4500: LD_INT 5
4502: PPUSH
4503: LD_INT 8
4505: PPUSH
4506: CALL_OW 12
4510: PPUSH
4511: CALL_OW 380
// un = CreateHuman ;
4515: LD_ADDR_VAR 0 3
4519: PUSH
4520: CALL_OW 44
4524: ST_TO_ADDR
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
4525: LD_VAR 0 3
4529: PPUSH
4530: LD_INT 9
4532: PPUSH
4533: LD_INT 0
4535: PPUSH
4536: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
4540: LD_VAR 0 3
4544: PPUSH
4545: LD_INT 53
4547: PPUSH
4548: LD_INT 23
4550: PPUSH
4551: CALL_OW 111
// end ;
4555: GO 4459
4557: POP
4558: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
4559: LD_ADDR_VAR 0 2
4563: PUSH
4564: DOUBLE
4565: LD_INT 1
4567: DEC
4568: ST_TO_ADDR
4569: LD_INT 9
4571: PUSH
4572: LD_INT 8
4574: PUSH
4575: LD_INT 7
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: PUSH
4583: LD_OWVAR 67
4587: ARRAY
4588: PUSH
4589: FOR_TO
4590: IFFALSE 4786
// begin uc_side = 4 ;
4592: LD_ADDR_OWVAR 20
4596: PUSH
4597: LD_INT 4
4599: ST_TO_ADDR
// uc_nation = 1 ;
4600: LD_ADDR_OWVAR 21
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// vc_engine = 1 ;
4608: LD_ADDR_OWVAR 39
4612: PUSH
4613: LD_INT 1
4615: ST_TO_ADDR
// vc_control = 1 ;
4616: LD_ADDR_OWVAR 38
4620: PUSH
4621: LD_INT 1
4623: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
4624: LD_ADDR_OWVAR 40
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: LD_INT 4
4634: PUSH
4635: LD_INT 5
4637: PUSH
4638: LD_INT 6
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: PUSH
4647: LD_INT 1
4649: PPUSH
4650: LD_INT 4
4652: PPUSH
4653: CALL_OW 12
4657: ARRAY
4658: ST_TO_ADDR
// vc_chassis = 4 ;
4659: LD_ADDR_OWVAR 37
4663: PUSH
4664: LD_INT 4
4666: ST_TO_ADDR
// veh = CreateVehicle ;
4667: LD_ADDR_VAR 0 4
4671: PUSH
4672: CALL_OW 45
4676: ST_TO_ADDR
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
4677: LD_VAR 0 4
4681: PPUSH
4682: LD_INT 9
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: CALL_OW 49
// hc_name =  ;
4692: LD_ADDR_OWVAR 26
4696: PUSH
4697: LD_STRING 
4699: ST_TO_ADDR
// hc_gallery =  ;
4700: LD_ADDR_OWVAR 33
4704: PUSH
4705: LD_STRING 
4707: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
4708: LD_INT 0
4710: PPUSH
4711: LD_INT 3
4713: PPUSH
4714: LD_INT 5
4716: PPUSH
4717: LD_INT 8
4719: PPUSH
4720: CALL_OW 12
4724: PPUSH
4725: CALL_OW 380
// un = CreateHuman ;
4729: LD_ADDR_VAR 0 3
4733: PUSH
4734: CALL_OW 44
4738: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4739: LD_VAR 0 3
4743: PPUSH
4744: LD_VAR 0 4
4748: PPUSH
4749: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
4753: LD_VAR 0 4
4757: PUSH
4758: LD_VAR 0 3
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PPUSH
4767: LD_INT 53
4769: PPUSH
4770: LD_INT 23
4772: PPUSH
4773: CALL_OW 111
// wait ( 0 0$5 ) ;
4777: LD_INT 175
4779: PPUSH
4780: CALL_OW 67
// end ;
4784: GO 4589
4786: POP
4787: POP
// end ; end_of_file
4788: LD_VAR 0 1
4792: RET
// export function PrepareRussianCommander ; begin
4793: LD_INT 0
4795: PPUSH
// uc_side = 3 ;
4796: LD_ADDR_OWVAR 20
4800: PUSH
4801: LD_INT 3
4803: ST_TO_ADDR
// uc_nation = 3 ;
4804: LD_ADDR_OWVAR 21
4808: PUSH
4809: LD_INT 3
4811: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
4812: LD_ADDR_EXP 23
4816: PUSH
4817: LD_STRING Borodin
4819: PPUSH
4820: CALL_OW 25
4824: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
4825: LD_EXP 23
4829: PPUSH
4830: LD_INT 25
4832: PPUSH
4833: LD_INT 0
4835: PPUSH
4836: CALL_OW 49
// end ;
4840: LD_VAR 0 1
4844: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
4845: LD_INT 0
4847: PPUSH
4848: PPUSH
4849: PPUSH
4850: PPUSH
// for i = 1 to 10 do
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: DOUBLE
4857: LD_INT 1
4859: DEC
4860: ST_TO_ADDR
4861: LD_INT 10
4863: PUSH
4864: FOR_TO
4865: IFFALSE 4939
// begin uc_side = 6 ;
4867: LD_ADDR_OWVAR 20
4871: PUSH
4872: LD_INT 6
4874: ST_TO_ADDR
// uc_nation = 3 ;
4875: LD_ADDR_OWVAR 21
4879: PUSH
4880: LD_INT 3
4882: ST_TO_ADDR
// hc_gallery =  ;
4883: LD_ADDR_OWVAR 33
4887: PUSH
4888: LD_STRING 
4890: ST_TO_ADDR
// hc_name =  ;
4891: LD_ADDR_OWVAR 26
4895: PUSH
4896: LD_STRING 
4898: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
4899: LD_INT 0
4901: PPUSH
4902: LD_INT 1
4904: PPUSH
4905: LD_INT 3
4907: PPUSH
4908: CALL_OW 380
// un = CreateHuman ;
4912: LD_ADDR_VAR 0 3
4916: PUSH
4917: CALL_OW 44
4921: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
4922: LD_VAR 0 3
4926: PPUSH
4927: LD_INT 1
4929: PPUSH
4930: LD_INT 0
4932: PPUSH
4933: CALL_OW 49
// end ;
4937: GO 4864
4939: POP
4940: POP
// for i = 1 to 3 do
4941: LD_ADDR_VAR 0 2
4945: PUSH
4946: DOUBLE
4947: LD_INT 1
4949: DEC
4950: ST_TO_ADDR
4951: LD_INT 3
4953: PUSH
4954: FOR_TO
4955: IFFALSE 5104
// begin uc_side = 6 ;
4957: LD_ADDR_OWVAR 20
4961: PUSH
4962: LD_INT 6
4964: ST_TO_ADDR
// uc_nation = 3 ;
4965: LD_ADDR_OWVAR 21
4969: PUSH
4970: LD_INT 3
4972: ST_TO_ADDR
// vc_engine = 1 ;
4973: LD_ADDR_OWVAR 39
4977: PUSH
4978: LD_INT 1
4980: ST_TO_ADDR
// vc_control = 1 ;
4981: LD_ADDR_OWVAR 38
4985: PUSH
4986: LD_INT 1
4988: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
4989: LD_ADDR_OWVAR 40
4993: PUSH
4994: LD_INT 43
4996: PUSH
4997: LD_INT 44
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: PUSH
5004: LD_INT 1
5006: PPUSH
5007: LD_INT 2
5009: PPUSH
5010: CALL_OW 12
5014: ARRAY
5015: ST_TO_ADDR
// vc_chassis = 22 ;
5016: LD_ADDR_OWVAR 37
5020: PUSH
5021: LD_INT 22
5023: ST_TO_ADDR
// veh = CreateVehicle ;
5024: LD_ADDR_VAR 0 4
5028: PUSH
5029: CALL_OW 45
5033: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
5034: LD_VAR 0 4
5038: PPUSH
5039: LD_INT 2
5041: PPUSH
5042: LD_INT 0
5044: PPUSH
5045: CALL_OW 49
// hc_gallery =  ;
5049: LD_ADDR_OWVAR 33
5053: PUSH
5054: LD_STRING 
5056: ST_TO_ADDR
// hc_name =  ;
5057: LD_ADDR_OWVAR 26
5061: PUSH
5062: LD_STRING 
5064: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
5065: LD_INT 0
5067: PPUSH
5068: LD_INT 3
5070: PPUSH
5071: LD_INT 4
5073: PPUSH
5074: CALL_OW 380
// un = CreateHuman ;
5078: LD_ADDR_VAR 0 3
5082: PUSH
5083: CALL_OW 44
5087: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5088: LD_VAR 0 3
5092: PPUSH
5093: LD_VAR 0 4
5097: PPUSH
5098: CALL_OW 52
// end ;
5102: GO 4954
5104: POP
5105: POP
// end ;
5106: LD_VAR 0 1
5110: RET
// export function PrepareRussians ; var i , un ; begin
5111: LD_INT 0
5113: PPUSH
5114: PPUSH
5115: PPUSH
// for i = 1 to 14 do
5116: LD_ADDR_VAR 0 2
5120: PUSH
5121: DOUBLE
5122: LD_INT 1
5124: DEC
5125: ST_TO_ADDR
5126: LD_INT 14
5128: PUSH
5129: FOR_TO
5130: IFFALSE 5216
// begin uc_side = 3 ;
5132: LD_ADDR_OWVAR 20
5136: PUSH
5137: LD_INT 3
5139: ST_TO_ADDR
// uc_nation = 3 ;
5140: LD_ADDR_OWVAR 21
5144: PUSH
5145: LD_INT 3
5147: ST_TO_ADDR
// hc_gallery =  ;
5148: LD_ADDR_OWVAR 33
5152: PUSH
5153: LD_STRING 
5155: ST_TO_ADDR
// hc_name =  ;
5156: LD_ADDR_OWVAR 26
5160: PUSH
5161: LD_STRING 
5163: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5164: LD_INT 0
5166: PPUSH
5167: LD_INT 1
5169: PPUSH
5170: LD_EXP 24
5174: PPUSH
5175: LD_EXP 25
5179: PPUSH
5180: CALL_OW 12
5184: PPUSH
5185: CALL_OW 380
// un = CreateHuman ;
5189: LD_ADDR_VAR 0 3
5193: PUSH
5194: CALL_OW 44
5198: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5199: LD_VAR 0 3
5203: PPUSH
5204: LD_INT 3
5206: PPUSH
5207: LD_INT 0
5209: PPUSH
5210: CALL_OW 49
// end ;
5214: GO 5129
5216: POP
5217: POP
// for i = 1 to 6 do
5218: LD_ADDR_VAR 0 2
5222: PUSH
5223: DOUBLE
5224: LD_INT 1
5226: DEC
5227: ST_TO_ADDR
5228: LD_INT 6
5230: PUSH
5231: FOR_TO
5232: IFFALSE 5318
// begin uc_side = 3 ;
5234: LD_ADDR_OWVAR 20
5238: PUSH
5239: LD_INT 3
5241: ST_TO_ADDR
// uc_nation = 3 ;
5242: LD_ADDR_OWVAR 21
5246: PUSH
5247: LD_INT 3
5249: ST_TO_ADDR
// hc_gallery =  ;
5250: LD_ADDR_OWVAR 33
5254: PUSH
5255: LD_STRING 
5257: ST_TO_ADDR
// hc_name =  ;
5258: LD_ADDR_OWVAR 26
5262: PUSH
5263: LD_STRING 
5265: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5266: LD_INT 0
5268: PPUSH
5269: LD_INT 2
5271: PPUSH
5272: LD_EXP 24
5276: PPUSH
5277: LD_EXP 25
5281: PPUSH
5282: CALL_OW 12
5286: PPUSH
5287: CALL_OW 380
// un = CreateHuman ;
5291: LD_ADDR_VAR 0 3
5295: PUSH
5296: CALL_OW 44
5300: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5301: LD_VAR 0 3
5305: PPUSH
5306: LD_INT 3
5308: PPUSH
5309: LD_INT 0
5311: PPUSH
5312: CALL_OW 49
// end ;
5316: GO 5231
5318: POP
5319: POP
// for i = 1 to 6 do
5320: LD_ADDR_VAR 0 2
5324: PUSH
5325: DOUBLE
5326: LD_INT 1
5328: DEC
5329: ST_TO_ADDR
5330: LD_INT 6
5332: PUSH
5333: FOR_TO
5334: IFFALSE 5420
// begin uc_side = 3 ;
5336: LD_ADDR_OWVAR 20
5340: PUSH
5341: LD_INT 3
5343: ST_TO_ADDR
// uc_nation = 3 ;
5344: LD_ADDR_OWVAR 21
5348: PUSH
5349: LD_INT 3
5351: ST_TO_ADDR
// hc_gallery =  ;
5352: LD_ADDR_OWVAR 33
5356: PUSH
5357: LD_STRING 
5359: ST_TO_ADDR
// hc_name =  ;
5360: LD_ADDR_OWVAR 26
5364: PUSH
5365: LD_STRING 
5367: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5368: LD_INT 0
5370: PPUSH
5371: LD_INT 3
5373: PPUSH
5374: LD_EXP 24
5378: PPUSH
5379: LD_EXP 25
5383: PPUSH
5384: CALL_OW 12
5388: PPUSH
5389: CALL_OW 380
// un = CreateHuman ;
5393: LD_ADDR_VAR 0 3
5397: PUSH
5398: CALL_OW 44
5402: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5403: LD_VAR 0 3
5407: PPUSH
5408: LD_INT 3
5410: PPUSH
5411: LD_INT 0
5413: PPUSH
5414: CALL_OW 49
// end ;
5418: GO 5333
5420: POP
5421: POP
// for i = 1 to 4 do
5422: LD_ADDR_VAR 0 2
5426: PUSH
5427: DOUBLE
5428: LD_INT 1
5430: DEC
5431: ST_TO_ADDR
5432: LD_INT 4
5434: PUSH
5435: FOR_TO
5436: IFFALSE 5522
// begin uc_side = 3 ;
5438: LD_ADDR_OWVAR 20
5442: PUSH
5443: LD_INT 3
5445: ST_TO_ADDR
// uc_nation = 3 ;
5446: LD_ADDR_OWVAR 21
5450: PUSH
5451: LD_INT 3
5453: ST_TO_ADDR
// hc_gallery =  ;
5454: LD_ADDR_OWVAR 33
5458: PUSH
5459: LD_STRING 
5461: ST_TO_ADDR
// hc_name =  ;
5462: LD_ADDR_OWVAR 26
5466: PUSH
5467: LD_STRING 
5469: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
5470: LD_INT 0
5472: PPUSH
5473: LD_INT 4
5475: PPUSH
5476: LD_EXP 24
5480: PPUSH
5481: LD_EXP 25
5485: PPUSH
5486: CALL_OW 12
5490: PPUSH
5491: CALL_OW 380
// un = CreateHuman ;
5495: LD_ADDR_VAR 0 3
5499: PUSH
5500: CALL_OW 44
5504: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
5505: LD_VAR 0 3
5509: PPUSH
5510: LD_INT 3
5512: PPUSH
5513: LD_INT 0
5515: PPUSH
5516: CALL_OW 49
// end ;
5520: GO 5435
5522: POP
5523: POP
// end ; end_of_file
5524: LD_VAR 0 1
5528: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5529: LD_INT 0
5531: PPUSH
5532: PPUSH
// if exist_mode then
5533: LD_VAR 0 2
5537: IFFALSE 5556
// unit := CreateCharacter ( ident ) else
5539: LD_ADDR_VAR 0 4
5543: PUSH
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 34
5553: ST_TO_ADDR
5554: GO 5571
// unit := NewCharacter ( ident ) ;
5556: LD_ADDR_VAR 0 4
5560: PUSH
5561: LD_VAR 0 1
5565: PPUSH
5566: CALL_OW 25
5570: ST_TO_ADDR
// result := unit ;
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: LD_VAR 0 4
5580: ST_TO_ADDR
// end ;
5581: LD_VAR 0 3
5585: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5586: LD_INT 0
5588: PPUSH
5589: PPUSH
5590: PPUSH
// rnd = rand ( 1 , characters ) ;
5591: LD_ADDR_VAR 0 6
5595: PUSH
5596: LD_INT 1
5598: PPUSH
5599: LD_VAR 0 1
5603: PPUSH
5604: CALL_OW 12
5608: ST_TO_ADDR
// for i = 1 to characters do
5609: LD_ADDR_VAR 0 5
5613: PUSH
5614: DOUBLE
5615: LD_INT 1
5617: DEC
5618: ST_TO_ADDR
5619: LD_VAR 0 1
5623: PUSH
5624: FOR_TO
5625: IFFALSE 5735
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5627: LD_VAR 0 5
5631: PUSH
5632: LD_VAR 0 6
5636: EQUAL
5637: PUSH
5638: LD_VAR 0 1
5642: PUSH
5643: LD_VAR 0 5
5647: ARRAY
5648: PPUSH
5649: CALL_OW 258
5653: PUSH
5654: LD_INT 1
5656: EQUAL
5657: AND
5658: IFFALSE 5680
// Say ( characters [ i ] , dialogMID ) ;
5660: LD_VAR 0 1
5664: PUSH
5665: LD_VAR 0 5
5669: ARRAY
5670: PPUSH
5671: LD_VAR 0 2
5675: PPUSH
5676: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5680: LD_VAR 0 5
5684: PUSH
5685: LD_VAR 0 6
5689: EQUAL
5690: PUSH
5691: LD_VAR 0 1
5695: PUSH
5696: LD_VAR 0 5
5700: ARRAY
5701: PPUSH
5702: CALL_OW 258
5706: PUSH
5707: LD_INT 2
5709: EQUAL
5710: AND
5711: IFFALSE 5733
// Say ( characters [ i ] , dialogFID ) ;
5713: LD_VAR 0 1
5717: PUSH
5718: LD_VAR 0 5
5722: ARRAY
5723: PPUSH
5724: LD_VAR 0 3
5728: PPUSH
5729: CALL_OW 88
// end ;
5733: GO 5624
5735: POP
5736: POP
// end ;
5737: LD_VAR 0 4
5741: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
5746: PPUSH
// uc_side := GetSide ( b ) ;
5747: LD_ADDR_OWVAR 20
5751: PUSH
5752: LD_VAR 0 2
5756: PPUSH
5757: CALL_OW 255
5761: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5762: LD_ADDR_OWVAR 21
5766: PUSH
5767: LD_VAR 0 2
5771: PPUSH
5772: CALL_OW 248
5776: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5777: LD_INT 0
5779: PPUSH
5780: LD_INT 1
5782: PPUSH
5783: LD_VAR 0 1
5787: PPUSH
5788: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5792: LD_ADDR_VAR 0 5
5796: PUSH
5797: LD_VAR 0 2
5801: PPUSH
5802: CALL_OW 254
5806: PUSH
5807: LD_INT 3
5809: MINUS
5810: ST_TO_ADDR
// if dir < 0 then
5811: LD_VAR 0 5
5815: PUSH
5816: LD_INT 0
5818: LESS
5819: IFFALSE 5835
// dir := 6 + dir ;
5821: LD_ADDR_VAR 0 5
5825: PUSH
5826: LD_INT 6
5828: PUSH
5829: LD_VAR 0 5
5833: PLUS
5834: ST_TO_ADDR
// un := CreateHuman ;
5835: LD_ADDR_VAR 0 4
5839: PUSH
5840: CALL_OW 44
5844: ST_TO_ADDR
// SetDir ( un , dir ) ;
5845: LD_VAR 0 4
5849: PPUSH
5850: LD_VAR 0 5
5854: PPUSH
5855: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5859: LD_VAR 0 4
5863: PPUSH
5864: LD_VAR 0 2
5868: PPUSH
5869: CALL_OW 52
// end ;
5873: LD_VAR 0 3
5877: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5878: LD_INT 0
5880: PPUSH
5881: PPUSH
5882: PPUSH
5883: PPUSH
// for i = 1 to count do
5884: LD_ADDR_VAR 0 8
5888: PUSH
5889: DOUBLE
5890: LD_INT 1
5892: DEC
5893: ST_TO_ADDR
5894: LD_VAR 0 6
5898: PUSH
5899: FOR_TO
5900: IFFALSE 5981
// begin uc_side = side ;
5902: LD_ADDR_OWVAR 20
5906: PUSH
5907: LD_VAR 0 1
5911: ST_TO_ADDR
// uc_nation = nation ;
5912: LD_ADDR_OWVAR 21
5916: PUSH
5917: LD_VAR 0 2
5921: ST_TO_ADDR
// hc_gallery =  ;
5922: LD_ADDR_OWVAR 33
5926: PUSH
5927: LD_STRING 
5929: ST_TO_ADDR
// hc_name =  ;
5930: LD_ADDR_OWVAR 26
5934: PUSH
5935: LD_STRING 
5937: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5938: LD_INT 0
5940: PPUSH
5941: LD_VAR 0 5
5945: PPUSH
5946: LD_VAR 0 4
5950: PPUSH
5951: CALL_OW 380
// un = CreateHuman ;
5955: LD_ADDR_VAR 0 10
5959: PUSH
5960: CALL_OW 44
5964: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5965: LD_VAR 0 10
5969: PPUSH
5970: LD_VAR 0 3
5974: PPUSH
5975: CALL_OW 52
// end ;
5979: GO 5899
5981: POP
5982: POP
// end ;
5983: LD_VAR 0 7
5987: RET
// export function PrepareDifficulty ; begin
5988: LD_INT 0
5990: PPUSH
// if Difficulty = 1 then
5991: LD_OWVAR 67
5995: PUSH
5996: LD_INT 1
5998: EQUAL
5999: IFFALSE 6017
// begin RuSolMinLevel = 4 ;
6001: LD_ADDR_EXP 24
6005: PUSH
6006: LD_INT 4
6008: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6009: LD_ADDR_EXP 25
6013: PUSH
6014: LD_INT 6
6016: ST_TO_ADDR
// end ; if Difficulty = 2 then
6017: LD_OWVAR 67
6021: PUSH
6022: LD_INT 2
6024: EQUAL
6025: IFFALSE 6095
// begin RuSolMinLevel = 5 ;
6027: LD_ADDR_EXP 24
6031: PUSH
6032: LD_INT 5
6034: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6035: LD_ADDR_EXP 25
6039: PUSH
6040: LD_INT 6
6042: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
6043: LD_INT 51
6045: PPUSH
6046: LD_INT 3
6048: PPUSH
6049: LD_INT 1
6051: PPUSH
6052: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
6056: LD_INT 57
6058: PPUSH
6059: LD_INT 3
6061: PPUSH
6062: LD_INT 1
6064: PPUSH
6065: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6069: LD_INT 57
6071: PPUSH
6072: LD_INT 6
6074: PPUSH
6075: LD_INT 2
6077: PPUSH
6078: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
6082: LD_INT 51
6084: PPUSH
6085: LD_INT 6
6087: PPUSH
6088: LD_INT 2
6090: PPUSH
6091: CALL_OW 322
// end ; if Difficulty = 3 then
6095: LD_OWVAR 67
6099: PUSH
6100: LD_INT 3
6102: EQUAL
6103: IFFALSE 6186
// begin RuSolMinLevel = 5 ;
6105: LD_ADDR_EXP 24
6109: PUSH
6110: LD_INT 5
6112: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
6113: LD_ADDR_EXP 25
6117: PUSH
6118: LD_INT 7
6120: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
6121: LD_INT 57
6123: PPUSH
6124: LD_INT 3
6126: PPUSH
6127: LD_INT 1
6129: PPUSH
6130: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
6134: LD_INT 51
6136: PPUSH
6137: LD_INT 3
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
6147: LD_INT 52
6149: PPUSH
6150: LD_INT 3
6152: PPUSH
6153: LD_INT 1
6155: PPUSH
6156: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
6160: LD_INT 57
6162: PPUSH
6163: LD_INT 6
6165: PPUSH
6166: LD_INT 2
6168: PPUSH
6169: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
6173: LD_INT 52
6175: PPUSH
6176: LD_INT 6
6178: PPUSH
6179: LD_INT 2
6181: PPUSH
6182: CALL_OW 322
// end ; end ;
6186: LD_VAR 0 1
6190: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
6191: LD_INT 0
6193: PPUSH
6194: PPUSH
6195: PPUSH
6196: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: LD_INT 22
6204: PUSH
6205: LD_INT 3
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: LD_INT 25
6214: PUSH
6215: LD_INT 2
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PPUSH
6226: CALL_OW 69
6230: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
6231: LD_ADDR_VAR 0 4
6235: PUSH
6236: LD_INT 4
6238: PUSH
6239: LD_INT 75
6241: PUSH
6242: LD_INT 79
6244: PUSH
6245: LD_INT 2
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 4
6256: PUSH
6257: LD_INT 113
6259: PUSH
6260: LD_INT 94
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: PUSH
6272: LD_INT 29
6274: PUSH
6275: LD_INT 106
6277: PUSH
6278: LD_INT 97
6280: PUSH
6281: LD_INT 3
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 26
6292: PUSH
6293: LD_INT 93
6295: PUSH
6296: LD_INT 97
6298: PUSH
6299: LD_INT 5
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 2
6310: PUSH
6311: LD_INT 100
6313: PUSH
6314: LD_INT 89
6316: PUSH
6317: LD_INT 3
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: PUSH
6326: LD_INT 17
6328: PUSH
6329: LD_INT 96
6331: PUSH
6332: LD_INT 89
6334: PUSH
6335: LD_INT 1
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 32
6346: PUSH
6347: LD_INT 78
6349: PUSH
6350: LD_INT 94
6352: PUSH
6353: LD_INT 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: PUSH
6362: LD_INT 32
6364: PUSH
6365: LD_INT 95
6367: PUSH
6368: LD_INT 82
6370: PUSH
6371: LD_INT 3
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 32
6382: PUSH
6383: LD_INT 104
6385: PUSH
6386: LD_INT 85
6388: PUSH
6389: LD_INT 2
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: PUSH
6398: LD_INT 32
6400: PUSH
6401: LD_INT 81
6403: PUSH
6404: LD_INT 78
6406: PUSH
6407: LD_INT 2
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 33
6418: PUSH
6419: LD_INT 109
6421: PUSH
6422: LD_INT 90
6424: PUSH
6425: LD_INT 3
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 33
6436: PUSH
6437: LD_INT 88
6439: PUSH
6440: LD_INT 79
6442: PUSH
6443: LD_INT 3
6445: PUSH
6446: EMPTY
6447: LIST
6448: LIST
6449: LIST
6450: LIST
6451: PUSH
6452: LD_INT 33
6454: PUSH
6455: LD_INT 76
6457: PUSH
6458: LD_INT 87
6460: PUSH
6461: LD_INT 1
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: PUSH
6470: LD_INT 26
6472: PUSH
6473: LD_INT 96
6475: PUSH
6476: LD_INT 97
6478: PUSH
6479: LD_INT 5
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: PUSH
6488: LD_INT 26
6490: PUSH
6491: LD_INT 85
6493: PUSH
6494: LD_INT 84
6496: PUSH
6497: LD_INT 2
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: PUSH
6506: LD_INT 6
6508: PUSH
6509: LD_INT 88
6511: PUSH
6512: LD_INT 95
6514: PUSH
6515: LD_INT 0
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 19
6526: PUSH
6527: LD_INT 103
6529: PUSH
6530: LD_INT 89
6532: PUSH
6533: LD_INT 4
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 16
6544: PUSH
6545: LD_INT 97
6547: PUSH
6548: LD_INT 86
6550: PUSH
6551: LD_INT 2
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 24
6562: PUSH
6563: LD_INT 100
6565: PUSH
6566: LD_INT 85
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: ST_TO_ADDR
// for i := 1 to buildingsTab do
6599: LD_ADDR_VAR 0 2
6603: PUSH
6604: DOUBLE
6605: LD_INT 1
6607: DEC
6608: ST_TO_ADDR
6609: LD_VAR 0 4
6613: PUSH
6614: FOR_TO
6615: IFFALSE 6688
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
6617: LD_VAR 0 3
6621: PPUSH
6622: LD_VAR 0 4
6626: PUSH
6627: LD_VAR 0 2
6631: ARRAY
6632: PUSH
6633: LD_INT 1
6635: ARRAY
6636: PPUSH
6637: LD_VAR 0 4
6641: PUSH
6642: LD_VAR 0 2
6646: ARRAY
6647: PUSH
6648: LD_INT 2
6650: ARRAY
6651: PPUSH
6652: LD_VAR 0 4
6656: PUSH
6657: LD_VAR 0 2
6661: ARRAY
6662: PUSH
6663: LD_INT 3
6665: ARRAY
6666: PPUSH
6667: LD_VAR 0 4
6671: PUSH
6672: LD_VAR 0 2
6676: ARRAY
6677: PUSH
6678: LD_INT 4
6680: ARRAY
6681: PPUSH
6682: CALL_OW 205
6686: GO 6614
6688: POP
6689: POP
// end ;
6690: LD_VAR 0 1
6694: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6695: LD_INT 0
6697: PPUSH
6698: PPUSH
// for i in charactersList do
6699: LD_ADDR_VAR 0 4
6703: PUSH
6704: LD_VAR 0 1
6708: PUSH
6709: FOR_IN
6710: IFFALSE 6739
// begin if IsOk ( i ) then
6712: LD_VAR 0 4
6716: PPUSH
6717: CALL_OW 302
6721: IFFALSE 6737
// SaveCharacters ( i , ident ) ;
6723: LD_VAR 0 4
6727: PPUSH
6728: LD_VAR 0 2
6732: PPUSH
6733: CALL_OW 38
// end ;
6737: GO 6709
6739: POP
6740: POP
// end ;
6741: LD_VAR 0 3
6745: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
6746: LD_INT 0
6748: PPUSH
6749: PPUSH
6750: PPUSH
6751: PPUSH
// for i = 1 to 72 do
6752: LD_ADDR_VAR 0 5
6756: PUSH
6757: DOUBLE
6758: LD_INT 1
6760: DEC
6761: ST_TO_ADDR
6762: LD_INT 72
6764: PUSH
6765: FOR_TO
6766: IFFALSE 6824
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
6768: LD_VAR 0 5
6772: PPUSH
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL_OW 321
6782: PUSH
6783: LD_INT 1
6785: EQUAL
6786: PUSH
6787: LD_VAR 0 5
6791: PPUSH
6792: LD_VAR 0 3
6796: PPUSH
6797: CALL_OW 482
6801: PUSH
6802: LD_INT 1
6804: EQUAL
6805: AND
6806: IFFALSE 6822
// AddComResearch ( lab , i ) ;
6808: LD_VAR 0 2
6812: PPUSH
6813: LD_VAR 0 5
6817: PPUSH
6818: CALL_OW 184
6822: GO 6765
6824: POP
6825: POP
// end ;
6826: LD_VAR 0 4
6830: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , insideSoldiers , turretList , temp , barrackList ; begin
6831: LD_INT 0
6833: PPUSH
6834: PPUSH
6835: PPUSH
6836: PPUSH
6837: PPUSH
6838: PPUSH
6839: PPUSH
6840: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] ] ) diff [ Borodin ] ;
6841: LD_ADDR_VAR 0 6
6845: PUSH
6846: LD_INT 22
6848: PUSH
6849: LD_VAR 0 1
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 25
6860: PUSH
6861: LD_INT 1
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PUSH
6868: LD_INT 56
6870: PUSH
6871: EMPTY
6872: LIST
6873: PUSH
6874: LD_INT 24
6876: PUSH
6877: LD_INT 700
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 3
6886: PUSH
6887: LD_INT 60
6889: PUSH
6890: EMPTY
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: PPUSH
6904: CALL_OW 69
6908: PUSH
6909: LD_EXP 23
6913: PUSH
6914: EMPTY
6915: LIST
6916: DIFF
6917: ST_TO_ADDR
// insideSoldiers = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
6918: LD_ADDR_VAR 0 7
6922: PUSH
6923: LD_INT 22
6925: PUSH
6926: LD_VAR 0 1
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 25
6937: PUSH
6938: LD_INT 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 54
6947: PUSH
6948: EMPTY
6949: LIST
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: PPUSH
6956: CALL_OW 69
6960: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
6961: LD_ADDR_VAR 0 8
6965: PUSH
6966: LD_INT 22
6968: PUSH
6969: LD_VAR 0 1
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: LD_INT 30
6980: PUSH
6981: LD_INT 32
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 58
6990: PUSH
6991: EMPTY
6992: LIST
6993: PUSH
6994: LD_INT 24
6996: PUSH
6997: LD_INT 251
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: PPUSH
7010: CALL_OW 69
7014: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
7015: LD_ADDR_VAR 0 10
7019: PUSH
7020: LD_INT 22
7022: PUSH
7023: LD_VAR 0 1
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: LD_INT 2
7034: PUSH
7035: LD_INT 30
7037: PUSH
7038: LD_INT 4
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: PUSH
7045: LD_INT 30
7047: PUSH
7048: LD_INT 5
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 24
7062: PUSH
7063: LD_INT 251
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 69
7079: ST_TO_ADDR
// if barrackList > 0 then
7080: LD_VAR 0 10
7084: PUSH
7085: LD_INT 0
7087: GREATER
7088: IFFALSE 7201
// begin if turretList = 0 and FilterUnitsInArea ( RussianBaseTerritory , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 then
7090: LD_VAR 0 8
7094: PUSH
7095: LD_INT 0
7097: EQUAL
7098: PUSH
7099: LD_INT 24
7101: PPUSH
7102: LD_INT 22
7104: PUSH
7105: LD_INT 1
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PUSH
7112: LD_INT 21
7114: PUSH
7115: LD_INT 1
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PPUSH
7126: CALL_OW 70
7130: PUSH
7131: LD_INT 0
7133: EQUAL
7134: AND
7135: IFFALSE 7184
// begin for i in soldiers_list do
7137: LD_ADDR_VAR 0 4
7141: PUSH
7142: LD_VAR 0 6
7146: PUSH
7147: FOR_IN
7148: IFFALSE 7180
// ComEnterUnit ( i , barrackList [ rand ( 1 , barrackList ) ] ) ;
7150: LD_VAR 0 4
7154: PPUSH
7155: LD_VAR 0 10
7159: PUSH
7160: LD_INT 1
7162: PPUSH
7163: LD_VAR 0 10
7167: PPUSH
7168: CALL_OW 12
7172: ARRAY
7173: PPUSH
7174: CALL_OW 120
7178: GO 7147
7180: POP
7181: POP
// end else
7182: GO 7201
// begin for i in barrackList do
7184: LD_ADDR_VAR 0 4
7188: PUSH
7189: LD_VAR 0 10
7193: PUSH
7194: FOR_IN
7195: IFFALSE 7199
// begin end ;
7197: GO 7194
7199: POP
7200: POP
// end ; end ; end ;
7201: LD_VAR 0 3
7205: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
7206: LD_INT 0
7208: PPUSH
7209: PPUSH
7210: PPUSH
7211: PPUSH
7212: PPUSH
7213: PPUSH
// for i = 1 to infantryCount do
7214: LD_ADDR_VAR 0 8
7218: PUSH
7219: DOUBLE
7220: LD_INT 1
7222: DEC
7223: ST_TO_ADDR
7224: LD_VAR 0 5
7228: PUSH
7229: FOR_TO
7230: IFFALSE 7346
// begin uc_side = side ;
7232: LD_ADDR_OWVAR 20
7236: PUSH
7237: LD_VAR 0 1
7241: ST_TO_ADDR
// uc_nation = nation ;
7242: LD_ADDR_OWVAR 21
7246: PUSH
7247: LD_VAR 0 3
7251: ST_TO_ADDR
// hc_class = 1 ;
7252: LD_ADDR_OWVAR 28
7256: PUSH
7257: LD_INT 1
7259: ST_TO_ADDR
// hc_name =  ;
7260: LD_ADDR_OWVAR 26
7264: PUSH
7265: LD_STRING 
7267: ST_TO_ADDR
// hc_gallery =  ;
7268: LD_ADDR_OWVAR 33
7272: PUSH
7273: LD_STRING 
7275: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7276: LD_INT 0
7278: PPUSH
7279: LD_INT 1
7281: PPUSH
7282: LD_EXP 24
7286: PPUSH
7287: LD_EXP 25
7291: PPUSH
7292: CALL_OW 12
7296: PPUSH
7297: CALL_OW 380
// un = CreateHuman ;
7301: LD_ADDR_VAR 0 10
7305: PUSH
7306: CALL_OW 44
7310: ST_TO_ADDR
// PlaceUnitArea ( un , areaSpawn , false ) ;
7311: LD_VAR 0 10
7315: PPUSH
7316: LD_VAR 0 2
7320: PPUSH
7321: LD_INT 0
7323: PPUSH
7324: CALL_OW 49
// defenders_list = defenders_list ^ un ;
7328: LD_ADDR_EXP 31
7332: PUSH
7333: LD_EXP 31
7337: PUSH
7338: LD_VAR 0 10
7342: ADD
7343: ST_TO_ADDR
// end ;
7344: GO 7229
7346: POP
7347: POP
// for i = 1 to vehCount do
7348: LD_ADDR_VAR 0 8
7352: PUSH
7353: DOUBLE
7354: LD_INT 1
7356: DEC
7357: ST_TO_ADDR
7358: LD_VAR 0 6
7362: PUSH
7363: FOR_TO
7364: IFFALSE 7571
// begin uc_side = side ;
7366: LD_ADDR_OWVAR 20
7370: PUSH
7371: LD_VAR 0 1
7375: ST_TO_ADDR
// uc_nation = nation ;
7376: LD_ADDR_OWVAR 21
7380: PUSH
7381: LD_VAR 0 3
7385: ST_TO_ADDR
// vc_Chassis = 22 ;
7386: LD_ADDR_OWVAR 37
7390: PUSH
7391: LD_INT 22
7393: ST_TO_ADDR
// vc_engine = 1 ;
7394: LD_ADDR_OWVAR 39
7398: PUSH
7399: LD_INT 1
7401: ST_TO_ADDR
// vc_control = 1 ;
7402: LD_ADDR_OWVAR 38
7406: PUSH
7407: LD_INT 1
7409: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
7410: LD_ADDR_OWVAR 40
7414: PUSH
7415: LD_INT 43
7417: PUSH
7418: LD_INT 44
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: LD_INT 1
7427: PPUSH
7428: LD_INT 2
7430: PPUSH
7431: CALL_OW 12
7435: ARRAY
7436: ST_TO_ADDR
// veh = CreateVehicle ;
7437: LD_ADDR_VAR 0 12
7441: PUSH
7442: CALL_OW 45
7446: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
7447: LD_VAR 0 12
7451: PPUSH
7452: LD_VAR 0 2
7456: PPUSH
7457: LD_INT 0
7459: PPUSH
7460: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
7464: LD_ADDR_EXP 31
7468: PUSH
7469: LD_EXP 31
7473: PUSH
7474: LD_VAR 0 12
7478: ADD
7479: ST_TO_ADDR
// hc_class = 3 ;
7480: LD_ADDR_OWVAR 28
7484: PUSH
7485: LD_INT 3
7487: ST_TO_ADDR
// hc_name =  ;
7488: LD_ADDR_OWVAR 26
7492: PUSH
7493: LD_STRING 
7495: ST_TO_ADDR
// hc_gallery =  ;
7496: LD_ADDR_OWVAR 33
7500: PUSH
7501: LD_STRING 
7503: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7504: LD_INT 0
7506: PPUSH
7507: LD_INT 3
7509: PPUSH
7510: LD_EXP 24
7514: PPUSH
7515: LD_EXP 25
7519: PPUSH
7520: CALL_OW 12
7524: PPUSH
7525: CALL_OW 380
// un = CreateHuman ;
7529: LD_ADDR_VAR 0 10
7533: PUSH
7534: CALL_OW 44
7538: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7539: LD_VAR 0 10
7543: PPUSH
7544: LD_VAR 0 12
7548: PPUSH
7549: CALL_OW 52
// defenders_list = defenders_list ^ un ;
7553: LD_ADDR_EXP 31
7557: PUSH
7558: LD_EXP 31
7562: PUSH
7563: LD_VAR 0 10
7567: ADD
7568: ST_TO_ADDR
// end ;
7569: GO 7363
7571: POP
7572: POP
// end ;
7573: LD_VAR 0 7
7577: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target ; begin
7578: LD_INT 0
7580: PPUSH
7581: PPUSH
7582: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list > 0 then
7583: LD_VAR 0 2
7587: PPUSH
7588: LD_INT 22
7590: PUSH
7591: LD_VAR 0 1
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: EMPTY
7601: LIST
7602: PPUSH
7603: CALL_OW 70
7607: PUSH
7608: LD_INT 0
7610: EQUAL
7611: PUSH
7612: LD_EXP 31
7616: PUSH
7617: LD_INT 0
7619: GREATER
7620: AND
7621: IFFALSE 7667
// begin for i in defenders_list do
7623: LD_ADDR_VAR 0 4
7627: PUSH
7628: LD_EXP 31
7632: PUSH
7633: FOR_IN
7634: IFFALSE 7665
// begin ComMoveXY ( i , 65 , 68 ) ;
7636: LD_VAR 0 4
7640: PPUSH
7641: LD_INT 65
7643: PPUSH
7644: LD_INT 68
7646: PPUSH
7647: CALL_OW 111
// SetFuel ( i , 100 ) ;
7651: LD_VAR 0 4
7655: PPUSH
7656: LD_INT 100
7658: PPUSH
7659: CALL_OW 240
// end ;
7663: GO 7633
7665: POP
7666: POP
// end ; if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) > 0 and defenders_list > 0 then
7667: LD_VAR 0 2
7671: PPUSH
7672: LD_INT 22
7674: PUSH
7675: LD_VAR 0 1
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: PPUSH
7687: CALL_OW 70
7691: PUSH
7692: LD_INT 0
7694: GREATER
7695: PUSH
7696: LD_EXP 31
7700: PUSH
7701: LD_INT 0
7703: GREATER
7704: AND
7705: IFFALSE 7873
// begin for i in defenders_list do
7707: LD_ADDR_VAR 0 4
7711: PUSH
7712: LD_EXP 31
7716: PUSH
7717: FOR_IN
7718: IFFALSE 7768
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7720: LD_ADDR_VAR 0 5
7724: PUSH
7725: LD_INT 22
7727: PUSH
7728: LD_VAR 0 1
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PPUSH
7737: CALL_OW 69
7741: PPUSH
7742: LD_VAR 0 4
7746: PPUSH
7747: CALL_OW 74
7751: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
7752: LD_VAR 0 4
7756: PPUSH
7757: LD_VAR 0 5
7761: PPUSH
7762: CALL_OW 115
// end ;
7766: GO 7717
7768: POP
7769: POP
// if russianAI = 0 then
7770: LD_EXP 26
7774: PUSH
7775: LD_INT 0
7777: EQUAL
7778: IFFALSE 7873
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) diff Borodin do
7780: LD_ADDR_VAR 0 4
7784: PUSH
7785: LD_INT 22
7787: PUSH
7788: LD_INT 3
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: LD_INT 25
7797: PUSH
7798: LD_INT 1
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PPUSH
7809: CALL_OW 69
7813: PUSH
7814: LD_EXP 23
7818: DIFF
7819: PUSH
7820: FOR_IN
7821: IFFALSE 7871
// begin target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7823: LD_ADDR_VAR 0 5
7827: PUSH
7828: LD_INT 22
7830: PUSH
7831: LD_VAR 0 1
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PPUSH
7840: CALL_OW 69
7844: PPUSH
7845: LD_VAR 0 4
7849: PPUSH
7850: CALL_OW 74
7854: ST_TO_ADDR
// ComAttackUnit ( i , target ) ;
7855: LD_VAR 0 4
7859: PPUSH
7860: LD_VAR 0 5
7864: PPUSH
7865: CALL_OW 115
// end ;
7869: GO 7820
7871: POP
7872: POP
// end ; end ; end ;
7873: LD_VAR 0 3
7877: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
7878: LD_INT 0
7880: PPUSH
7881: PPUSH
7882: PPUSH
7883: PPUSH
7884: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
7885: LD_ADDR_VAR 0 6
7889: PUSH
7890: LD_INT 22
7892: PUSH
7893: LD_VAR 0 1
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PUSH
7902: LD_INT 2
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 2
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 25
7917: PUSH
7918: LD_INT 16
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: LIST
7929: PUSH
7930: LD_INT 24
7932: PUSH
7933: LD_INT 1000
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: LIST
7944: PPUSH
7945: CALL_OW 69
7949: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7950: LD_ADDR_VAR 0 4
7954: PUSH
7955: LD_INT 22
7957: PUSH
7958: LD_VAR 0 1
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: LD_INT 21
7969: PUSH
7970: LD_INT 3
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: PUSH
7977: LD_INT 3
7979: PUSH
7980: LD_INT 24
7982: PUSH
7983: LD_INT 1000
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: PPUSH
8002: CALL_OW 69
8006: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8007: LD_VAR 0 4
8011: PUSH
8012: LD_INT 0
8014: GREATER
8015: PUSH
8016: LD_VAR 0 6
8020: PUSH
8021: LD_INT 0
8023: GREATER
8024: AND
8025: IFFALSE 8091
// begin for i in engineerOk_list do
8027: LD_ADDR_VAR 0 5
8031: PUSH
8032: LD_VAR 0 6
8036: PUSH
8037: FOR_IN
8038: IFFALSE 8089
// begin for j in buildings_list do
8040: LD_ADDR_VAR 0 7
8044: PUSH
8045: LD_VAR 0 4
8049: PUSH
8050: FOR_IN
8051: IFFALSE 8085
// begin AddComExitBuilding ( i ) ;
8053: LD_VAR 0 5
8057: PPUSH
8058: CALL_OW 182
// wait ( 0 0$1 ) ;
8062: LD_INT 35
8064: PPUSH
8065: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8069: LD_VAR 0 5
8073: PPUSH
8074: LD_VAR 0 7
8078: PPUSH
8079: CALL_OW 190
// end ;
8083: GO 8050
8085: POP
8086: POP
// end ;
8087: GO 8037
8089: POP
8090: POP
// end ; if buildings_list = 0 then
8091: LD_VAR 0 4
8095: PUSH
8096: LD_INT 0
8098: EQUAL
8099: IFFALSE 8132
// begin for i in engineerOK_list do
8101: LD_ADDR_VAR 0 5
8105: PUSH
8106: LD_VAR 0 6
8110: PUSH
8111: FOR_IN
8112: IFFALSE 8130
// begin ComEnterUnit ( i , building ) ;
8114: LD_VAR 0 5
8118: PPUSH
8119: LD_VAR 0 2
8123: PPUSH
8124: CALL_OW 120
// end ;
8128: GO 8111
8130: POP
8131: POP
// end ; end ;
8132: LD_VAR 0 3
8136: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
8137: LD_INT 0
8139: PPUSH
8140: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
8141: LD_INT 22
8143: PUSH
8144: LD_VAR 0 1
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PUSH
8153: LD_INT 25
8155: PUSH
8156: LD_INT 2
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: PUSH
8172: LD_INT 0
8174: GREATER
8175: PUSH
8176: LD_INT 22
8178: PUSH
8179: LD_VAR 0 1
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 21
8190: PUSH
8191: LD_INT 3
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PUSH
8198: LD_INT 3
8200: PUSH
8201: LD_INT 24
8203: PUSH
8204: LD_INT 1000
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: LIST
8219: PPUSH
8220: CALL_OW 69
8224: PUSH
8225: LD_INT 0
8227: EQUAL
8228: AND
8229: PUSH
8230: LD_VAR 0 2
8234: PUSH
8235: LD_INT 0
8237: GREATER
8238: AND
8239: IFFALSE 8338
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8241: LD_ADDR_VAR 0 4
8245: PUSH
8246: LD_INT 22
8248: PUSH
8249: LD_VAR 0 1
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 25
8260: PUSH
8261: LD_INT 2
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PPUSH
8272: CALL_OW 69
8276: PUSH
8277: FOR_IN
8278: IFFALSE 8336
// begin AddComExitBuilding ( i ) ;
8280: LD_VAR 0 4
8284: PPUSH
8285: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8289: LD_VAR 0 4
8293: PPUSH
8294: LD_VAR 0 2
8298: PUSH
8299: LD_INT 1
8301: ARRAY
8302: PPUSH
8303: LD_VAR 0 2
8307: PUSH
8308: LD_INT 2
8310: ARRAY
8311: PPUSH
8312: LD_VAR 0 2
8316: PUSH
8317: LD_INT 3
8319: ARRAY
8320: PPUSH
8321: LD_VAR 0 2
8325: PUSH
8326: LD_INT 4
8328: ARRAY
8329: PPUSH
8330: CALL_OW 205
// end ;
8334: GO 8277
8336: POP
8337: POP
// end ; end ;
8338: LD_VAR 0 3
8342: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8343: LD_INT 0
8345: PPUSH
8346: PPUSH
8347: PPUSH
8348: PPUSH
8349: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_lives , 250 ] , [ f_class , 4 ] ] ) ;
8350: LD_ADDR_VAR 0 6
8354: PUSH
8355: LD_INT 22
8357: PUSH
8358: LD_VAR 0 1
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 24
8369: PUSH
8370: LD_INT 250
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: PUSH
8377: LD_INT 25
8379: PUSH
8380: LD_INT 4
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: LIST
8391: PPUSH
8392: CALL_OW 69
8396: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8397: LD_ADDR_VAR 0 9
8401: PUSH
8402: LD_VAR 0 3
8406: PPUSH
8407: LD_INT 22
8409: PUSH
8410: LD_VAR 0 1
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: LD_INT 21
8421: PUSH
8422: LD_INT 1
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: PUSH
8429: LD_INT 3
8431: PUSH
8432: LD_INT 24
8434: PUSH
8435: LD_INT 750
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: LIST
8450: PPUSH
8451: CALL_OW 70
8455: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
8456: LD_VAR 0 9
8460: PUSH
8461: LD_INT 0
8463: GREATER
8464: PUSH
8465: LD_VAR 0 6
8469: PUSH
8470: LD_INT 0
8472: GREATER
8473: AND
8474: IFFALSE 8601
// begin for i = 1 to damageUnits do
8476: LD_ADDR_VAR 0 7
8480: PUSH
8481: DOUBLE
8482: LD_INT 1
8484: DEC
8485: ST_TO_ADDR
8486: LD_VAR 0 9
8490: PUSH
8491: FOR_TO
8492: IFFALSE 8516
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
8494: LD_VAR 0 9
8498: PUSH
8499: LD_VAR 0 7
8503: ARRAY
8504: PPUSH
8505: LD_VAR 0 2
8509: PPUSH
8510: CALL_OW 113
8514: GO 8491
8516: POP
8517: POP
// for i in sci_list do
8518: LD_ADDR_VAR 0 7
8522: PUSH
8523: LD_VAR 0 6
8527: PUSH
8528: FOR_IN
8529: IFFALSE 8597
// begin ComExitBuilding ( i ) ;
8531: LD_VAR 0 7
8535: PPUSH
8536: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
8540: LD_ADDR_VAR 0 8
8544: PUSH
8545: LD_VAR 0 2
8549: PPUSH
8550: LD_INT 22
8552: PUSH
8553: LD_VAR 0 1
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PPUSH
8562: CALL_OW 70
8566: PUSH
8567: FOR_IN
8568: IFFALSE 8593
// begin AddComHeal ( i , j ) ;
8570: LD_VAR 0 7
8574: PPUSH
8575: LD_VAR 0 8
8579: PPUSH
8580: CALL_OW 188
// wait ( 1 1$0 ) ;
8584: LD_INT 2100
8586: PPUSH
8587: CALL_OW 67
// end ;
8591: GO 8567
8593: POP
8594: POP
// end ;
8595: GO 8528
8597: POP
8598: POP
// end else
8599: GO 8615
// begin AddComEnterUnit ( sci_list , build ) ;
8601: LD_VAR 0 6
8605: PPUSH
8606: LD_VAR 0 4
8610: PPUSH
8611: CALL_OW 180
// end ; end ;
8615: LD_VAR 0 5
8619: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
8620: LD_INT 0
8622: PPUSH
8623: PPUSH
8624: PPUSH
8625: PPUSH
8626: PPUSH
8627: PPUSH
8628: PPUSH
8629: PPUSH
8630: PPUSH
8631: PPUSH
8632: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8633: LD_ADDR_VAR 0 9
8637: PUSH
8638: LD_INT 22
8640: PUSH
8641: LD_VAR 0 1
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 21
8652: PUSH
8653: LD_INT 2
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PUSH
8660: LD_INT 33
8662: PUSH
8663: LD_INT 1
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: PUSH
8670: LD_INT 24
8672: PUSH
8673: LD_INT 660
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PUSH
8680: LD_INT 3
8682: PUSH
8683: LD_INT 58
8685: PUSH
8686: EMPTY
8687: LIST
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: LD_INT 3
8695: PUSH
8696: LD_INT 34
8698: PUSH
8699: LD_INT 53
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: PPUSH
8718: CALL_OW 69
8722: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
8723: LD_ADDR_VAR 0 10
8727: PUSH
8728: LD_INT 22
8730: PUSH
8731: LD_VAR 0 1
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PUSH
8740: LD_INT 21
8742: PUSH
8743: LD_INT 2
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: LD_INT 33
8752: PUSH
8753: LD_INT 1
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PUSH
8760: LD_INT 3
8762: PUSH
8763: LD_INT 24
8765: PUSH
8766: LD_INT 660
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: PPUSH
8783: CALL_OW 69
8787: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8788: LD_ADDR_VAR 0 11
8792: PUSH
8793: LD_VAR 0 2
8797: PPUSH
8798: LD_INT 22
8800: PUSH
8801: LD_VAR 0 1
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PUSH
8810: LD_INT 21
8812: PUSH
8813: LD_INT 2
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PUSH
8820: LD_INT 33
8822: PUSH
8823: LD_INT 1
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 3
8832: PUSH
8833: LD_INT 24
8835: PUSH
8836: LD_INT 1000
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 70
8857: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8858: LD_ADDR_VAR 0 12
8862: PUSH
8863: LD_VAR 0 2
8867: PPUSH
8868: LD_INT 22
8870: PUSH
8871: LD_VAR 0 1
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 21
8882: PUSH
8883: LD_INT 2
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 33
8892: PUSH
8893: LD_INT 1
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 24
8902: PUSH
8903: LD_INT 1000
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 58
8912: PUSH
8913: EMPTY
8914: LIST
8915: PUSH
8916: LD_INT 3
8918: PUSH
8919: LD_INT 34
8921: PUSH
8922: LD_INT 53
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 70
8945: ST_TO_ADDR
// mechanicInside_list = [ ] ;
8946: LD_ADDR_VAR 0 13
8950: PUSH
8951: EMPTY
8952: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8953: LD_ADDR_VAR 0 14
8957: PUSH
8958: LD_VAR 0 2
8962: PPUSH
8963: LD_INT 22
8965: PUSH
8966: LD_VAR 0 1
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: LD_INT 25
8977: PUSH
8978: LD_INT 3
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PPUSH
8989: CALL_OW 70
8993: ST_TO_ADDR
// if damageVehicle_list > 0 then
8994: LD_VAR 0 10
8998: PUSH
8999: LD_INT 0
9001: GREATER
9002: IFFALSE 9040
// begin for i in damageVehicle_list do
9004: LD_ADDR_VAR 0 7
9008: PUSH
9009: LD_VAR 0 10
9013: PUSH
9014: FOR_IN
9015: IFFALSE 9038
// begin ComMoveXY ( i , repX , repY ) ;
9017: LD_VAR 0 7
9021: PPUSH
9022: LD_VAR 0 3
9026: PPUSH
9027: LD_VAR 0 4
9031: PPUSH
9032: CALL_OW 111
// end ;
9036: GO 9014
9038: POP
9039: POP
// end ; if vehicleNeedRepair_list > 0 then
9040: LD_VAR 0 11
9044: PUSH
9045: LD_INT 0
9047: GREATER
9048: IFFALSE 9135
// begin for i in vehicleNeedRepair_list do
9050: LD_ADDR_VAR 0 7
9054: PUSH
9055: LD_VAR 0 11
9059: PUSH
9060: FOR_IN
9061: IFFALSE 9133
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
9063: LD_ADDR_VAR 0 13
9067: PUSH
9068: LD_VAR 0 13
9072: PUSH
9073: LD_VAR 0 7
9077: PPUSH
9078: CALL_OW 313
9082: ADD
9083: ST_TO_ADDR
// for j in mechanicInside_list do
9084: LD_ADDR_VAR 0 8
9088: PUSH
9089: LD_VAR 0 13
9093: PUSH
9094: FOR_IN
9095: IFFALSE 9129
// begin ComExitVehicle ( i ) ;
9097: LD_VAR 0 7
9101: PPUSH
9102: CALL_OW 121
// wait ( 0 0$1 ) ;
9106: LD_INT 35
9108: PPUSH
9109: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
9113: LD_VAR 0 7
9117: PPUSH
9118: LD_VAR 0 8
9122: PPUSH
9123: CALL_OW 129
// end ;
9127: GO 9094
9129: POP
9130: POP
// end ;
9131: GO 9060
9133: POP
9134: POP
// end ; if vehicleDontNeedRepair_list > 0 then
9135: LD_VAR 0 12
9139: PUSH
9140: LD_INT 0
9142: GREATER
9143: IFFALSE 9183
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
9145: LD_VAR 0 14
9149: PUSH
9150: LD_INT 1
9152: ARRAY
9153: PPUSH
9154: LD_VAR 0 12
9158: PUSH
9159: LD_INT 1
9161: ARRAY
9162: PPUSH
9163: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
9167: LD_VAR 0 12
9171: PUSH
9172: LD_INT 1
9174: ARRAY
9175: PPUSH
9176: LD_INT 100
9178: PPUSH
9179: CALL_OW 240
// end ; if vehicleOK_list > 0 then
9183: LD_VAR 0 9
9187: PUSH
9188: LD_INT 0
9190: GREATER
9191: IFFALSE 9382
// begin for i in vehicleOK_list do
9193: LD_ADDR_VAR 0 7
9197: PUSH
9198: LD_VAR 0 9
9202: PUSH
9203: FOR_IN
9204: IFFALSE 9380
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9206: LD_ADDR_VAR 0 15
9210: PUSH
9211: LD_INT 22
9213: PUSH
9214: LD_VAR 0 5
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: PPUSH
9223: CALL_OW 69
9227: PPUSH
9228: LD_VAR 0 7
9232: PPUSH
9233: CALL_OW 74
9237: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9238: LD_ADDR_VAR 0 16
9242: PUSH
9243: LD_INT 22
9245: PUSH
9246: LD_VAR 0 5
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_INT 2
9257: PUSH
9258: LD_INT 59
9260: PUSH
9261: EMPTY
9262: LIST
9263: PUSH
9264: LD_INT 21
9266: PUSH
9267: LD_INT 1
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 21
9276: PUSH
9277: LD_INT 2
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: PPUSH
9297: CALL_OW 69
9301: PPUSH
9302: LD_VAR 0 7
9306: PPUSH
9307: CALL_OW 74
9311: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9312: LD_VAR 0 7
9316: PPUSH
9317: LD_VAR 0 15
9321: PPUSH
9322: CALL_OW 296
9326: PUSH
9327: LD_INT 8
9329: PLUS
9330: PUSH
9331: LD_VAR 0 7
9335: PPUSH
9336: LD_VAR 0 16
9340: PPUSH
9341: CALL_OW 296
9345: LESS
9346: IFFALSE 9364
// begin ComAttackUnit ( i , target1 ) ;
9348: LD_VAR 0 7
9352: PPUSH
9353: LD_VAR 0 15
9357: PPUSH
9358: CALL_OW 115
// end else
9362: GO 9378
// begin ComAttackUnit ( i , target2 ) ;
9364: LD_VAR 0 7
9368: PPUSH
9369: LD_VAR 0 16
9373: PPUSH
9374: CALL_OW 115
// end ; end ;
9378: GO 9203
9380: POP
9381: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
9382: LD_ADDR_VAR 0 7
9386: PUSH
9387: LD_VAR 0 2
9391: PPUSH
9392: LD_INT 22
9394: PUSH
9395: LD_VAR 0 1
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 25
9406: PUSH
9407: LD_INT 3
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PPUSH
9418: CALL_OW 70
9422: NOT
9423: PUSH
9424: FOR_IN
9425: IFFALSE 9448
// ComMoveXY ( i , repX , repY ) ;
9427: LD_VAR 0 7
9431: PPUSH
9432: LD_VAR 0 3
9436: PPUSH
9437: LD_VAR 0 4
9441: PPUSH
9442: CALL_OW 111
9446: GO 9424
9448: POP
9449: POP
// end ;
9450: LD_VAR 0 6
9454: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
9455: LD_INT 0
9457: PPUSH
9458: PPUSH
9459: PPUSH
9460: PPUSH
9461: PPUSH
9462: PPUSH
9463: PPUSH
9464: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9465: LD_INT 22
9467: PUSH
9468: LD_VAR 0 1
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 21
9479: PUSH
9480: LD_INT 2
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PPUSH
9491: CALL_OW 69
9495: PUSH
9496: LD_VAR 0 3
9500: LESSEQUAL
9501: IFFALSE 9568
// for i = 1 to vehCount do
9503: LD_ADDR_VAR 0 10
9507: PUSH
9508: DOUBLE
9509: LD_INT 1
9511: DEC
9512: ST_TO_ADDR
9513: LD_VAR 0 3
9517: PUSH
9518: FOR_TO
9519: IFFALSE 9566
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
9521: LD_VAR 0 2
9525: PPUSH
9526: LD_VAR 0 8
9530: PPUSH
9531: LD_VAR 0 6
9535: PPUSH
9536: LD_VAR 0 7
9540: PPUSH
9541: LD_VAR 0 5
9545: PUSH
9546: LD_INT 1
9548: PPUSH
9549: LD_VAR 0 5
9553: PPUSH
9554: CALL_OW 12
9558: ARRAY
9559: PPUSH
9560: CALL_OW 185
9564: GO 9518
9566: POP
9567: POP
// repeat wait ( 0 0$1 ) ;
9568: LD_INT 35
9570: PPUSH
9571: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
9575: LD_INT 22
9577: PUSH
9578: LD_VAR 0 1
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 21
9589: PUSH
9590: LD_INT 2
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 24
9599: PUSH
9600: LD_INT 250
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: LIST
9611: PPUSH
9612: CALL_OW 69
9616: PUSH
9617: LD_VAR 0 3
9621: GREATEREQUAL
9622: IFFALSE 9568
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
9624: LD_INT 22
9626: PUSH
9627: LD_VAR 0 1
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: LD_INT 21
9638: PUSH
9639: LD_INT 2
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: PUSH
9646: LD_INT 24
9648: PUSH
9649: LD_INT 250
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: PPUSH
9661: CALL_OW 69
9665: PUSH
9666: LD_VAR 0 3
9670: GREATEREQUAL
9671: IFFALSE 10014
// begin repeat begin wait ( 0 0$1 ) ;
9673: LD_INT 35
9675: PPUSH
9676: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
9680: LD_INT 22
9682: PUSH
9683: LD_VAR 0 1
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PUSH
9692: LD_INT 21
9694: PUSH
9695: LD_INT 2
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PUSH
9702: LD_INT 24
9704: PUSH
9705: LD_INT 651
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: LIST
9716: PPUSH
9717: CALL_OW 69
9721: PUSH
9722: LD_INT 0
9724: GREATER
9725: IFFALSE 9953
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
9727: LD_ADDR_VAR 0 10
9731: PUSH
9732: LD_INT 22
9734: PUSH
9735: LD_VAR 0 1
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 21
9746: PUSH
9747: LD_INT 2
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: LD_INT 24
9756: PUSH
9757: LD_INT 651
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: LIST
9768: PPUSH
9769: CALL_OW 69
9773: PUSH
9774: FOR_IN
9775: IFFALSE 9951
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9777: LD_ADDR_VAR 0 15
9781: PUSH
9782: LD_INT 22
9784: PUSH
9785: LD_VAR 0 4
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 69
9798: PPUSH
9799: LD_VAR 0 10
9803: PPUSH
9804: CALL_OW 74
9808: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9809: LD_ADDR_VAR 0 16
9813: PUSH
9814: LD_INT 22
9816: PUSH
9817: LD_VAR 0 4
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 2
9828: PUSH
9829: LD_INT 59
9831: PUSH
9832: EMPTY
9833: LIST
9834: PUSH
9835: LD_INT 21
9837: PUSH
9838: LD_INT 1
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PUSH
9845: LD_INT 21
9847: PUSH
9848: LD_INT 2
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: EMPTY
9866: LIST
9867: PPUSH
9868: CALL_OW 69
9872: PPUSH
9873: LD_VAR 0 10
9877: PPUSH
9878: CALL_OW 74
9882: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9883: LD_VAR 0 10
9887: PPUSH
9888: LD_VAR 0 15
9892: PPUSH
9893: CALL_OW 296
9897: PUSH
9898: LD_INT 8
9900: PLUS
9901: PUSH
9902: LD_VAR 0 10
9906: PPUSH
9907: LD_VAR 0 16
9911: PPUSH
9912: CALL_OW 296
9916: LESS
9917: IFFALSE 9935
// begin ComAttackUnit ( i , target1 ) ;
9919: LD_VAR 0 10
9923: PPUSH
9924: LD_VAR 0 15
9928: PPUSH
9929: CALL_OW 115
// end else
9933: GO 9949
// begin ComAttackUnit ( i , target2 ) ;
9935: LD_VAR 0 10
9939: PPUSH
9940: LD_VAR 0 16
9944: PPUSH
9945: CALL_OW 115
// end ; end ;
9949: GO 9774
9951: POP
9952: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
9953: LD_INT 22
9955: PUSH
9956: LD_VAR 0 1
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PUSH
9965: LD_INT 21
9967: PUSH
9968: LD_INT 2
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PPUSH
9979: CALL_OW 69
9983: PUSH
9984: LD_INT 0
9986: EQUAL
9987: PUSH
9988: LD_INT 22
9990: PUSH
9991: LD_VAR 0 4
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: EMPTY
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: PUSH
10008: LD_INT 0
10010: EQUAL
10011: OR
10012: IFFALSE 9673
// end ; end ;
10014: LD_VAR 0 9
10018: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10019: LD_INT 0
10021: PPUSH
10022: PPUSH
10023: PPUSH
10024: PPUSH
10025: PPUSH
10026: PPUSH
10027: PPUSH
10028: PPUSH
10029: PPUSH
10030: PPUSH
10031: PPUSH
// for i = 1 to medicCount do
10032: LD_ADDR_VAR 0 14
10036: PUSH
10037: DOUBLE
10038: LD_INT 1
10040: DEC
10041: ST_TO_ADDR
10042: LD_VAR 0 7
10046: PUSH
10047: FOR_TO
10048: IFFALSE 10130
// begin uc_side = side ;
10050: LD_ADDR_OWVAR 20
10054: PUSH
10055: LD_VAR 0 1
10059: ST_TO_ADDR
// uc_nation = nation ;
10060: LD_ADDR_OWVAR 21
10064: PUSH
10065: LD_VAR 0 2
10069: ST_TO_ADDR
// hc_name =  ;
10070: LD_ADDR_OWVAR 26
10074: PUSH
10075: LD_STRING 
10077: ST_TO_ADDR
// hc_gallery =  ;
10078: LD_ADDR_OWVAR 33
10082: PUSH
10083: LD_STRING 
10085: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10086: LD_INT 0
10088: PPUSH
10089: LD_INT 4
10091: PPUSH
10092: LD_VAR 0 8
10096: PPUSH
10097: CALL_OW 380
// un = CreateHuman ;
10101: LD_ADDR_VAR 0 16
10105: PUSH
10106: CALL_OW 44
10110: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10111: LD_VAR 0 16
10115: PPUSH
10116: LD_VAR 0 9
10120: PPUSH
10121: LD_INT 0
10123: PPUSH
10124: CALL_OW 49
// end ;
10128: GO 10047
10130: POP
10131: POP
// for i = 1 to soldierCount do
10132: LD_ADDR_VAR 0 14
10136: PUSH
10137: DOUBLE
10138: LD_INT 1
10140: DEC
10141: ST_TO_ADDR
10142: LD_VAR 0 3
10146: PUSH
10147: FOR_TO
10148: IFFALSE 10230
// begin uc_side = side ;
10150: LD_ADDR_OWVAR 20
10154: PUSH
10155: LD_VAR 0 1
10159: ST_TO_ADDR
// uc_nation = nation ;
10160: LD_ADDR_OWVAR 21
10164: PUSH
10165: LD_VAR 0 2
10169: ST_TO_ADDR
// hc_name =  ;
10170: LD_ADDR_OWVAR 26
10174: PUSH
10175: LD_STRING 
10177: ST_TO_ADDR
// hc_gallery =  ;
10178: LD_ADDR_OWVAR 33
10182: PUSH
10183: LD_STRING 
10185: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10186: LD_INT 0
10188: PPUSH
10189: LD_INT 1
10191: PPUSH
10192: LD_VAR 0 8
10196: PPUSH
10197: CALL_OW 380
// un = CreateHuman ;
10201: LD_ADDR_VAR 0 16
10205: PUSH
10206: CALL_OW 44
10210: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10211: LD_VAR 0 16
10215: PPUSH
10216: LD_VAR 0 9
10220: PPUSH
10221: LD_INT 0
10223: PPUSH
10224: CALL_OW 49
// end ;
10228: GO 10147
10230: POP
10231: POP
// for i = 1 to sniperCount do
10232: LD_ADDR_VAR 0 14
10236: PUSH
10237: DOUBLE
10238: LD_INT 1
10240: DEC
10241: ST_TO_ADDR
10242: LD_VAR 0 4
10246: PUSH
10247: FOR_TO
10248: IFFALSE 10330
// begin uc_side = side ;
10250: LD_ADDR_OWVAR 20
10254: PUSH
10255: LD_VAR 0 1
10259: ST_TO_ADDR
// uc_nation = nation ;
10260: LD_ADDR_OWVAR 21
10264: PUSH
10265: LD_VAR 0 2
10269: ST_TO_ADDR
// hc_name =  ;
10270: LD_ADDR_OWVAR 26
10274: PUSH
10275: LD_STRING 
10277: ST_TO_ADDR
// hc_gallery =  ;
10278: LD_ADDR_OWVAR 33
10282: PUSH
10283: LD_STRING 
10285: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10286: LD_INT 0
10288: PPUSH
10289: LD_INT 5
10291: PPUSH
10292: LD_VAR 0 8
10296: PPUSH
10297: CALL_OW 380
// un = CreateHuman ;
10301: LD_ADDR_VAR 0 16
10305: PUSH
10306: CALL_OW 44
10310: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10311: LD_VAR 0 16
10315: PPUSH
10316: LD_VAR 0 9
10320: PPUSH
10321: LD_INT 0
10323: PPUSH
10324: CALL_OW 49
// end ;
10328: GO 10247
10330: POP
10331: POP
// for i = 1 to bazookCount do
10332: LD_ADDR_VAR 0 14
10336: PUSH
10337: DOUBLE
10338: LD_INT 1
10340: DEC
10341: ST_TO_ADDR
10342: LD_VAR 0 5
10346: PUSH
10347: FOR_TO
10348: IFFALSE 10430
// begin uc_side = side ;
10350: LD_ADDR_OWVAR 20
10354: PUSH
10355: LD_VAR 0 1
10359: ST_TO_ADDR
// uc_nation = nation ;
10360: LD_ADDR_OWVAR 21
10364: PUSH
10365: LD_VAR 0 2
10369: ST_TO_ADDR
// hc_name =  ;
10370: LD_ADDR_OWVAR 26
10374: PUSH
10375: LD_STRING 
10377: ST_TO_ADDR
// hc_gallery =  ;
10378: LD_ADDR_OWVAR 33
10382: PUSH
10383: LD_STRING 
10385: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10386: LD_INT 0
10388: PPUSH
10389: LD_INT 9
10391: PPUSH
10392: LD_VAR 0 8
10396: PPUSH
10397: CALL_OW 380
// un = CreateHuman ;
10401: LD_ADDR_VAR 0 16
10405: PUSH
10406: CALL_OW 44
10410: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10411: LD_VAR 0 16
10415: PPUSH
10416: LD_VAR 0 9
10420: PPUSH
10421: LD_INT 0
10423: PPUSH
10424: CALL_OW 49
// end ;
10428: GO 10347
10430: POP
10431: POP
// for i = 1 to mortalCount do
10432: LD_ADDR_VAR 0 14
10436: PUSH
10437: DOUBLE
10438: LD_INT 1
10440: DEC
10441: ST_TO_ADDR
10442: LD_VAR 0 6
10446: PUSH
10447: FOR_TO
10448: IFFALSE 10530
// begin uc_side = side ;
10450: LD_ADDR_OWVAR 20
10454: PUSH
10455: LD_VAR 0 1
10459: ST_TO_ADDR
// uc_nation = nation ;
10460: LD_ADDR_OWVAR 21
10464: PUSH
10465: LD_VAR 0 2
10469: ST_TO_ADDR
// hc_name =  ;
10470: LD_ADDR_OWVAR 26
10474: PUSH
10475: LD_STRING 
10477: ST_TO_ADDR
// hc_gallery =  ;
10478: LD_ADDR_OWVAR 33
10482: PUSH
10483: LD_STRING 
10485: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10486: LD_INT 0
10488: PPUSH
10489: LD_INT 8
10491: PPUSH
10492: LD_VAR 0 8
10496: PPUSH
10497: CALL_OW 380
// un = CreateHuman ;
10501: LD_ADDR_VAR 0 16
10505: PUSH
10506: CALL_OW 44
10510: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10511: LD_VAR 0 16
10515: PPUSH
10516: LD_VAR 0 9
10520: PPUSH
10521: LD_INT 0
10523: PPUSH
10524: CALL_OW 49
// end ;
10528: GO 10447
10530: POP
10531: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10532: LD_ADDR_VAR 0 19
10536: PUSH
10537: LD_INT 22
10539: PUSH
10540: LD_VAR 0 1
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 2
10551: PUSH
10552: LD_INT 25
10554: PUSH
10555: LD_INT 1
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: LD_INT 25
10564: PUSH
10565: LD_INT 5
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: LD_INT 25
10574: PUSH
10575: LD_INT 8
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PUSH
10582: LD_INT 25
10584: PUSH
10585: LD_INT 9
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PPUSH
10603: CALL_OW 69
10607: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
10608: LD_ADDR_VAR 0 18
10612: PUSH
10613: LD_INT 22
10615: PUSH
10616: LD_VAR 0 1
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: LD_INT 25
10627: PUSH
10628: LD_INT 4
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PPUSH
10639: CALL_OW 69
10643: ST_TO_ADDR
// for i in medic_list do
10644: LD_ADDR_VAR 0 14
10648: PUSH
10649: LD_VAR 0 18
10653: PUSH
10654: FOR_IN
10655: IFFALSE 10673
// ComMoveToArea ( i , healArea ) ;
10657: LD_VAR 0 14
10661: PPUSH
10662: LD_VAR 0 10
10666: PPUSH
10667: CALL_OW 113
10671: GO 10654
10673: POP
10674: POP
// if strategy = 1 then
10675: LD_VAR 0 12
10679: PUSH
10680: LD_INT 1
10682: EQUAL
10683: IFFALSE 11229
// begin repeat wait ( 0 0$3 ) ;
10685: LD_INT 105
10687: PPUSH
10688: CALL_OW 67
// for i in soldiersOK_list do
10692: LD_ADDR_VAR 0 14
10696: PUSH
10697: LD_VAR 0 19
10701: PUSH
10702: FOR_IN
10703: IFFALSE 10767
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
10705: LD_VAR 0 14
10709: PPUSH
10710: LD_INT 91
10712: PPUSH
10713: LD_INT 63
10715: PPUSH
10716: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
10720: LD_VAR 0 14
10724: PPUSH
10725: LD_INT 101
10727: PPUSH
10728: LD_INT 53
10730: PPUSH
10731: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
10735: LD_VAR 0 14
10739: PPUSH
10740: LD_INT 75
10742: PPUSH
10743: LD_INT 23
10745: PPUSH
10746: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
10750: LD_VAR 0 14
10754: PPUSH
10755: LD_INT 78
10757: PPUSH
10758: LD_INT 8
10760: PPUSH
10761: CALL_OW 174
// end ;
10765: GO 10702
10767: POP
10768: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
10769: LD_INT 12
10771: PPUSH
10772: LD_INT 22
10774: PUSH
10775: LD_VAR 0 1
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PPUSH
10784: CALL_OW 70
10788: PUSH
10789: LD_INT 2
10791: GREATER
10792: IFFALSE 10685
// repeat wait ( 0 0$1 ) ;
10794: LD_INT 35
10796: PPUSH
10797: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10801: LD_ADDR_VAR 0 17
10805: PUSH
10806: LD_INT 22
10808: PUSH
10809: LD_VAR 0 1
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: LD_INT 1
10820: PUSH
10821: LD_INT 3
10823: PUSH
10824: LD_INT 24
10826: PUSH
10827: LD_INT 550
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PUSH
10838: LD_INT 24
10840: PUSH
10841: LD_INT 250
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10862: LD_ADDR_VAR 0 19
10866: PUSH
10867: LD_INT 22
10869: PUSH
10870: LD_VAR 0 1
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: LD_INT 2
10881: PUSH
10882: LD_INT 25
10884: PUSH
10885: LD_INT 1
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 25
10894: PUSH
10895: LD_INT 5
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 25
10904: PUSH
10905: LD_INT 8
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 25
10914: PUSH
10915: LD_INT 9
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: PUSH
10929: LD_INT 24
10931: PUSH
10932: LD_INT 1000
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: LIST
10943: PPUSH
10944: CALL_OW 69
10948: ST_TO_ADDR
// if medicCount > 0 then
10949: LD_VAR 0 7
10953: PUSH
10954: LD_INT 0
10956: GREATER
10957: IFFALSE 11031
// begin if damageUnit_list > 0 then
10959: LD_VAR 0 17
10963: PUSH
10964: LD_INT 0
10966: GREATER
10967: IFFALSE 11031
// begin for i in damageUnit_list do
10969: LD_ADDR_VAR 0 14
10973: PUSH
10974: LD_VAR 0 17
10978: PUSH
10979: FOR_IN
10980: IFFALSE 11029
// begin ComMoveToArea ( i , healArea ) ;
10982: LD_VAR 0 14
10986: PPUSH
10987: LD_VAR 0 10
10991: PPUSH
10992: CALL_OW 113
// for j in medic_list do
10996: LD_ADDR_VAR 0 15
11000: PUSH
11001: LD_VAR 0 18
11005: PUSH
11006: FOR_IN
11007: IFFALSE 11025
// AddComHeal ( j , i ) ;
11009: LD_VAR 0 15
11013: PPUSH
11014: LD_VAR 0 14
11018: PPUSH
11019: CALL_OW 188
11023: GO 11006
11025: POP
11026: POP
// end ;
11027: GO 10979
11029: POP
11030: POP
// end ; end ; for i in soldiersOK_list do
11031: LD_ADDR_VAR 0 14
11035: PUSH
11036: LD_VAR 0 19
11040: PUSH
11041: FOR_IN
11042: IFFALSE 11218
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11044: LD_ADDR_VAR 0 22
11048: PUSH
11049: LD_INT 22
11051: PUSH
11052: LD_VAR 0 11
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PPUSH
11061: CALL_OW 69
11065: PPUSH
11066: LD_VAR 0 14
11070: PPUSH
11071: CALL_OW 74
11075: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11076: LD_ADDR_VAR 0 23
11080: PUSH
11081: LD_INT 22
11083: PUSH
11084: LD_VAR 0 11
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: LD_INT 2
11095: PUSH
11096: LD_INT 59
11098: PUSH
11099: EMPTY
11100: LIST
11101: PUSH
11102: LD_INT 21
11104: PUSH
11105: LD_INT 1
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 21
11114: PUSH
11115: LD_INT 2
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: EMPTY
11133: LIST
11134: PPUSH
11135: CALL_OW 69
11139: PPUSH
11140: LD_VAR 0 14
11144: PPUSH
11145: CALL_OW 74
11149: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
11150: LD_VAR 0 14
11154: PPUSH
11155: LD_VAR 0 22
11159: PPUSH
11160: CALL_OW 296
11164: PUSH
11165: LD_INT 6
11167: PLUS
11168: PUSH
11169: LD_VAR 0 14
11173: PPUSH
11174: LD_VAR 0 23
11178: PPUSH
11179: CALL_OW 296
11183: LESS
11184: IFFALSE 11202
// begin ComAttackUnit ( i , target1 ) ;
11186: LD_VAR 0 14
11190: PPUSH
11191: LD_VAR 0 22
11195: PPUSH
11196: CALL_OW 115
// end else
11200: GO 11216
// begin ComAttackUnit ( i , target2 ) ;
11202: LD_VAR 0 14
11206: PPUSH
11207: LD_VAR 0 23
11211: PPUSH
11212: CALL_OW 115
// end ; end ;
11216: GO 11041
11218: POP
11219: POP
// until soldiersOK_list = [ ] ;
11220: LD_VAR 0 19
11224: PUSH
11225: EMPTY
11226: EQUAL
11227: IFFALSE 10794
// end ; if strategy = 2 then
11229: LD_VAR 0 12
11233: PUSH
11234: LD_INT 2
11236: EQUAL
11237: IFFALSE 11753
// begin repeat wait ( 0 0$1 ) ;
11239: LD_INT 35
11241: PPUSH
11242: CALL_OW 67
// for i in soldiersOK_list do
11246: LD_ADDR_VAR 0 14
11250: PUSH
11251: LD_VAR 0 19
11255: PUSH
11256: FOR_IN
11257: IFFALSE 11291
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
11259: LD_VAR 0 14
11263: PPUSH
11264: LD_INT 91
11266: PPUSH
11267: LD_INT 63
11269: PPUSH
11270: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
11274: LD_VAR 0 14
11278: PPUSH
11279: LD_INT 75
11281: PPUSH
11282: LD_INT 33
11284: PPUSH
11285: CALL_OW 174
// end ;
11289: GO 11256
11291: POP
11292: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
11293: LD_INT 13
11295: PPUSH
11296: LD_INT 22
11298: PUSH
11299: LD_VAR 0 1
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PPUSH
11308: CALL_OW 70
11312: PUSH
11313: LD_INT 2
11315: GREATER
11316: IFFALSE 11239
// repeat wait ( 0 0$3 ) ;
11318: LD_INT 105
11320: PPUSH
11321: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11325: LD_ADDR_VAR 0 17
11329: PUSH
11330: LD_INT 22
11332: PUSH
11333: LD_VAR 0 1
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 1
11344: PUSH
11345: LD_INT 3
11347: PUSH
11348: LD_INT 24
11350: PUSH
11351: LD_INT 550
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 24
11364: PUSH
11365: LD_INT 250
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: LIST
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PPUSH
11381: CALL_OW 69
11385: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11386: LD_ADDR_VAR 0 19
11390: PUSH
11391: LD_INT 22
11393: PUSH
11394: LD_VAR 0 1
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 2
11405: PUSH
11406: LD_INT 25
11408: PUSH
11409: LD_INT 1
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 25
11418: PUSH
11419: LD_INT 5
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 25
11428: PUSH
11429: LD_INT 8
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 25
11438: PUSH
11439: LD_INT 9
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 24
11455: PUSH
11456: LD_INT 1000
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: LIST
11467: PPUSH
11468: CALL_OW 69
11472: ST_TO_ADDR
// if medicCount > 0 then
11473: LD_VAR 0 7
11477: PUSH
11478: LD_INT 0
11480: GREATER
11481: IFFALSE 11555
// begin if damageUnit_list > 0 then
11483: LD_VAR 0 17
11487: PUSH
11488: LD_INT 0
11490: GREATER
11491: IFFALSE 11555
// begin for i in damageUnit_list do
11493: LD_ADDR_VAR 0 14
11497: PUSH
11498: LD_VAR 0 17
11502: PUSH
11503: FOR_IN
11504: IFFALSE 11553
// begin ComMoveToArea ( i , healArea ) ;
11506: LD_VAR 0 14
11510: PPUSH
11511: LD_VAR 0 10
11515: PPUSH
11516: CALL_OW 113
// for j in medic_list do
11520: LD_ADDR_VAR 0 15
11524: PUSH
11525: LD_VAR 0 18
11529: PUSH
11530: FOR_IN
11531: IFFALSE 11549
// AddComHeal ( j , i ) ;
11533: LD_VAR 0 15
11537: PPUSH
11538: LD_VAR 0 14
11542: PPUSH
11543: CALL_OW 188
11547: GO 11530
11549: POP
11550: POP
// end ;
11551: GO 11503
11553: POP
11554: POP
// end ; end ; for i in soldiersOK_list do
11555: LD_ADDR_VAR 0 14
11559: PUSH
11560: LD_VAR 0 19
11564: PUSH
11565: FOR_IN
11566: IFFALSE 11742
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11568: LD_ADDR_VAR 0 22
11572: PUSH
11573: LD_INT 22
11575: PUSH
11576: LD_VAR 0 11
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PPUSH
11585: CALL_OW 69
11589: PPUSH
11590: LD_VAR 0 14
11594: PPUSH
11595: CALL_OW 74
11599: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11600: LD_ADDR_VAR 0 23
11604: PUSH
11605: LD_INT 22
11607: PUSH
11608: LD_VAR 0 11
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 2
11619: PUSH
11620: LD_INT 59
11622: PUSH
11623: EMPTY
11624: LIST
11625: PUSH
11626: LD_INT 21
11628: PUSH
11629: LD_INT 1
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: LD_INT 21
11638: PUSH
11639: LD_INT 2
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PUSH
11656: EMPTY
11657: LIST
11658: PPUSH
11659: CALL_OW 69
11663: PPUSH
11664: LD_VAR 0 14
11668: PPUSH
11669: CALL_OW 74
11673: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
11674: LD_VAR 0 14
11678: PPUSH
11679: LD_VAR 0 22
11683: PPUSH
11684: CALL_OW 296
11688: PUSH
11689: LD_INT 6
11691: PLUS
11692: PUSH
11693: LD_VAR 0 14
11697: PPUSH
11698: LD_VAR 0 23
11702: PPUSH
11703: CALL_OW 296
11707: LESS
11708: IFFALSE 11726
// begin ComAttackUnit ( i , target1 ) ;
11710: LD_VAR 0 14
11714: PPUSH
11715: LD_VAR 0 22
11719: PPUSH
11720: CALL_OW 115
// end else
11724: GO 11740
// begin ComAttackUnit ( i , target2 ) ;
11726: LD_VAR 0 14
11730: PPUSH
11731: LD_VAR 0 23
11735: PPUSH
11736: CALL_OW 115
// end ; end ;
11740: GO 11565
11742: POP
11743: POP
// until soldiersOK_list = [ ] ;
11744: LD_VAR 0 19
11748: PUSH
11749: EMPTY
11750: EQUAL
11751: IFFALSE 11318
// end ; if strategy = 3 then
11753: LD_VAR 0 12
11757: PUSH
11758: LD_INT 3
11760: EQUAL
11761: IFFALSE 12307
// begin repeat wait ( 0 0$3 ) ;
11763: LD_INT 105
11765: PPUSH
11766: CALL_OW 67
// for i in soldiersOK_list do
11770: LD_ADDR_VAR 0 14
11774: PUSH
11775: LD_VAR 0 19
11779: PUSH
11780: FOR_IN
11781: IFFALSE 11845
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
11783: LD_VAR 0 14
11787: PPUSH
11788: LD_INT 63
11790: PPUSH
11791: LD_INT 71
11793: PPUSH
11794: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
11798: LD_VAR 0 14
11802: PPUSH
11803: LD_INT 35
11805: PPUSH
11806: LD_INT 44
11808: PPUSH
11809: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
11813: LD_VAR 0 14
11817: PPUSH
11818: LD_INT 23
11820: PPUSH
11821: LD_INT 18
11823: PPUSH
11824: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
11828: LD_VAR 0 14
11832: PPUSH
11833: LD_INT 26
11835: PPUSH
11836: LD_INT 12
11838: PPUSH
11839: CALL_OW 174
// end ;
11843: GO 11780
11845: POP
11846: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
11847: LD_INT 14
11849: PPUSH
11850: LD_INT 22
11852: PUSH
11853: LD_VAR 0 1
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PPUSH
11862: CALL_OW 70
11866: PUSH
11867: LD_INT 2
11869: GREATER
11870: IFFALSE 11763
// repeat wait ( 0 0$1 ) ;
11872: LD_INT 35
11874: PPUSH
11875: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11879: LD_ADDR_VAR 0 17
11883: PUSH
11884: LD_INT 22
11886: PUSH
11887: LD_VAR 0 1
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 1
11898: PUSH
11899: LD_INT 3
11901: PUSH
11902: LD_INT 24
11904: PUSH
11905: LD_INT 550
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 24
11918: PUSH
11919: LD_INT 250
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: LIST
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11940: LD_ADDR_VAR 0 19
11944: PUSH
11945: LD_INT 22
11947: PUSH
11948: LD_VAR 0 1
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: PUSH
11957: LD_INT 2
11959: PUSH
11960: LD_INT 25
11962: PUSH
11963: LD_INT 1
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PUSH
11970: LD_INT 25
11972: PUSH
11973: LD_INT 5
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 25
11982: PUSH
11983: LD_INT 8
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 25
11992: PUSH
11993: LD_INT 9
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 24
12009: PUSH
12010: LD_INT 1000
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: LIST
12021: PPUSH
12022: CALL_OW 69
12026: ST_TO_ADDR
// if medicCount > 0 then
12027: LD_VAR 0 7
12031: PUSH
12032: LD_INT 0
12034: GREATER
12035: IFFALSE 12109
// begin if damageUnit_list > 0 then
12037: LD_VAR 0 17
12041: PUSH
12042: LD_INT 0
12044: GREATER
12045: IFFALSE 12109
// begin for i in damageUnit_list do
12047: LD_ADDR_VAR 0 14
12051: PUSH
12052: LD_VAR 0 17
12056: PUSH
12057: FOR_IN
12058: IFFALSE 12107
// begin ComMoveToArea ( i , healArea ) ;
12060: LD_VAR 0 14
12064: PPUSH
12065: LD_VAR 0 10
12069: PPUSH
12070: CALL_OW 113
// for j in medic_list do
12074: LD_ADDR_VAR 0 15
12078: PUSH
12079: LD_VAR 0 18
12083: PUSH
12084: FOR_IN
12085: IFFALSE 12103
// AddComHeal ( j , i ) ;
12087: LD_VAR 0 15
12091: PPUSH
12092: LD_VAR 0 14
12096: PPUSH
12097: CALL_OW 188
12101: GO 12084
12103: POP
12104: POP
// end ;
12105: GO 12057
12107: POP
12108: POP
// end ; end ; for i in soldiersOK_list do
12109: LD_ADDR_VAR 0 14
12113: PUSH
12114: LD_VAR 0 19
12118: PUSH
12119: FOR_IN
12120: IFFALSE 12296
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12122: LD_ADDR_VAR 0 22
12126: PUSH
12127: LD_INT 22
12129: PUSH
12130: LD_VAR 0 11
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PPUSH
12139: CALL_OW 69
12143: PPUSH
12144: LD_VAR 0 14
12148: PPUSH
12149: CALL_OW 74
12153: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12154: LD_ADDR_VAR 0 23
12158: PUSH
12159: LD_INT 22
12161: PUSH
12162: LD_VAR 0 11
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 2
12173: PUSH
12174: LD_INT 59
12176: PUSH
12177: EMPTY
12178: LIST
12179: PUSH
12180: LD_INT 21
12182: PUSH
12183: LD_INT 1
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: LD_INT 21
12192: PUSH
12193: LD_INT 2
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: EMPTY
12211: LIST
12212: PPUSH
12213: CALL_OW 69
12217: PPUSH
12218: LD_VAR 0 14
12222: PPUSH
12223: CALL_OW 74
12227: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
12228: LD_VAR 0 14
12232: PPUSH
12233: LD_VAR 0 22
12237: PPUSH
12238: CALL_OW 296
12242: PUSH
12243: LD_INT 6
12245: PLUS
12246: PUSH
12247: LD_VAR 0 14
12251: PPUSH
12252: LD_VAR 0 23
12256: PPUSH
12257: CALL_OW 296
12261: LESS
12262: IFFALSE 12280
// begin ComAttackUnit ( i , target1 ) ;
12264: LD_VAR 0 14
12268: PPUSH
12269: LD_VAR 0 22
12273: PPUSH
12274: CALL_OW 115
// end else
12278: GO 12294
// begin ComAttackUnit ( i , target2 ) ;
12280: LD_VAR 0 14
12284: PPUSH
12285: LD_VAR 0 23
12289: PPUSH
12290: CALL_OW 115
// end ; end ;
12294: GO 12119
12296: POP
12297: POP
// until soldiersOK_list = [ ] ;
12298: LD_VAR 0 19
12302: PUSH
12303: EMPTY
12304: EQUAL
12305: IFFALSE 11872
// end ; end ;
12307: LD_VAR 0 13
12311: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
12312: LD_INT 0
12314: PPUSH
12315: PPUSH
12316: PPUSH
12317: PPUSH
12318: PPUSH
12319: PPUSH
12320: PPUSH
12321: PPUSH
12322: PPUSH
12323: PPUSH
12324: PPUSH
// amChassisTab = [ ] ;
12325: LD_ADDR_VAR 0 19
12329: PUSH
12330: EMPTY
12331: ST_TO_ADDR
// arChassisTab = [ ] ;
12332: LD_ADDR_VAR 0 18
12336: PUSH
12337: EMPTY
12338: ST_TO_ADDR
// ruChassisTab = [ ] ;
12339: LD_ADDR_VAR 0 17
12343: PUSH
12344: EMPTY
12345: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
12346: LD_INT 35
12348: PPUSH
12349: CALL_OW 67
// if nation = 1 then
12353: LD_VAR 0 5
12357: PUSH
12358: LD_INT 1
12360: EQUAL
12361: IFFALSE 12852
// begin uc_side = side ;
12363: LD_ADDR_OWVAR 20
12367: PUSH
12368: LD_VAR 0 2
12372: ST_TO_ADDR
// uc_nation = nation ;
12373: LD_ADDR_OWVAR 21
12377: PUSH
12378: LD_VAR 0 5
12382: ST_TO_ADDR
// vc_engine = vehengine ;
12383: LD_ADDR_OWVAR 39
12387: PUSH
12388: LD_VAR 0 6
12392: ST_TO_ADDR
// vc_control = vehcontrol ;
12393: LD_ADDR_OWVAR 38
12397: PUSH
12398: LD_VAR 0 7
12402: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
12403: LD_ADDR_OWVAR 40
12407: PUSH
12408: LD_VAR 0 10
12412: PUSH
12413: LD_INT 1
12415: PPUSH
12416: LD_VAR 0 10
12420: PPUSH
12421: CALL_OW 12
12425: ARRAY
12426: ST_TO_ADDR
// for j = 1 to AMWeapon do
12427: LD_ADDR_VAR 0 14
12431: PUSH
12432: DOUBLE
12433: LD_INT 1
12435: DEC
12436: ST_TO_ADDR
12437: LD_VAR 0 10
12441: PUSH
12442: FOR_TO
12443: IFFALSE 12744
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
12445: LD_VAR 0 10
12449: PUSH
12450: LD_VAR 0 14
12454: ARRAY
12455: PUSH
12456: LD_INT 2
12458: EQUAL
12459: PUSH
12460: LD_VAR 0 10
12464: PUSH
12465: LD_VAR 0 14
12469: ARRAY
12470: PUSH
12471: LD_INT 3
12473: EQUAL
12474: OR
12475: IFFALSE 12528
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
12477: LD_ADDR_VAR 0 19
12481: PUSH
12482: LD_INT 1
12484: PUSH
12485: LD_INT 2
12487: PUSH
12488: LD_INT 3
12490: PUSH
12491: LD_INT 4
12493: PUSH
12494: LD_INT 5
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12504: LD_ADDR_OWVAR 37
12508: PUSH
12509: LD_VAR 0 19
12513: PUSH
12514: LD_INT 1
12516: PPUSH
12517: LD_VAR 0 19
12521: PPUSH
12522: CALL_OW 12
12526: ARRAY
12527: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
12528: LD_VAR 0 10
12532: PUSH
12533: LD_VAR 0 14
12537: ARRAY
12538: PUSH
12539: LD_INT 4
12541: EQUAL
12542: PUSH
12543: LD_VAR 0 10
12547: PUSH
12548: LD_VAR 0 14
12552: ARRAY
12553: PUSH
12554: LD_INT 5
12556: EQUAL
12557: OR
12558: PUSH
12559: LD_VAR 0 10
12563: PUSH
12564: LD_VAR 0 14
12568: ARRAY
12569: PUSH
12570: LD_INT 9
12572: EQUAL
12573: OR
12574: PUSH
12575: LD_VAR 0 10
12579: PUSH
12580: LD_VAR 0 14
12584: ARRAY
12585: PUSH
12586: LD_INT 11
12588: EQUAL
12589: OR
12590: PUSH
12591: LD_VAR 0 10
12595: PUSH
12596: LD_VAR 0 14
12600: ARRAY
12601: PUSH
12602: LD_INT 7
12604: EQUAL
12605: OR
12606: IFFALSE 12655
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
12608: LD_ADDR_VAR 0 19
12612: PUSH
12613: LD_INT 2
12615: PUSH
12616: LD_INT 3
12618: PUSH
12619: LD_INT 4
12621: PUSH
12622: LD_INT 5
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12631: LD_ADDR_OWVAR 37
12635: PUSH
12636: LD_VAR 0 19
12640: PUSH
12641: LD_INT 1
12643: PPUSH
12644: LD_VAR 0 19
12648: PPUSH
12649: CALL_OW 12
12653: ARRAY
12654: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
12655: LD_VAR 0 10
12659: PUSH
12660: LD_VAR 0 14
12664: ARRAY
12665: PUSH
12666: LD_INT 8
12668: EQUAL
12669: PUSH
12670: LD_VAR 0 10
12674: PUSH
12675: LD_VAR 0 14
12679: ARRAY
12680: PUSH
12681: LD_INT 6
12683: EQUAL
12684: OR
12685: PUSH
12686: LD_VAR 0 10
12690: PUSH
12691: LD_VAR 0 14
12695: ARRAY
12696: PUSH
12697: LD_INT 10
12699: EQUAL
12700: OR
12701: IFFALSE 12742
// begin amChassisTab = [ 4 , 5 ] ;
12703: LD_ADDR_VAR 0 19
12707: PUSH
12708: LD_INT 4
12710: PUSH
12711: LD_INT 5
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12718: LD_ADDR_OWVAR 37
12722: PUSH
12723: LD_VAR 0 19
12727: PUSH
12728: LD_INT 1
12730: PPUSH
12731: LD_VAR 0 19
12735: PPUSH
12736: CALL_OW 12
12740: ARRAY
12741: ST_TO_ADDR
// end ; end ;
12742: GO 12442
12744: POP
12745: POP
// veh = CreateVehicle ;
12746: LD_ADDR_VAR 0 16
12750: PUSH
12751: CALL_OW 45
12755: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12756: LD_VAR 0 16
12760: PPUSH
12761: LD_VAR 0 1
12765: PPUSH
12766: LD_INT 0
12768: PPUSH
12769: CALL_OW 49
// if vehControl = 1 then
12773: LD_VAR 0 7
12777: PUSH
12778: LD_INT 1
12780: EQUAL
12781: IFFALSE 12838
// begin hc_gallery =  ;
12783: LD_ADDR_OWVAR 33
12787: PUSH
12788: LD_STRING 
12790: ST_TO_ADDR
// hc_name =  ;
12791: LD_ADDR_OWVAR 26
12795: PUSH
12796: LD_STRING 
12798: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12799: LD_INT 0
12801: PPUSH
12802: LD_INT 3
12804: PPUSH
12805: LD_VAR 0 4
12809: PPUSH
12810: CALL_OW 380
// un = CreateHuman ;
12814: LD_ADDR_VAR 0 15
12818: PUSH
12819: CALL_OW 44
12823: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12824: LD_VAR 0 15
12828: PPUSH
12829: LD_VAR 0 16
12833: PPUSH
12834: CALL_OW 52
// end ; i = i + 1 ;
12838: LD_ADDR_VAR 0 13
12842: PUSH
12843: LD_VAR 0 13
12847: PUSH
12848: LD_INT 1
12850: PLUS
12851: ST_TO_ADDR
// end ; if nation = 2 then
12852: LD_VAR 0 5
12856: PUSH
12857: LD_INT 2
12859: EQUAL
12860: IFFALSE 13284
// begin uc_side = side ;
12862: LD_ADDR_OWVAR 20
12866: PUSH
12867: LD_VAR 0 2
12871: ST_TO_ADDR
// uc_nation = nation ;
12872: LD_ADDR_OWVAR 21
12876: PUSH
12877: LD_VAR 0 5
12881: ST_TO_ADDR
// vc_engine = vehengine ;
12882: LD_ADDR_OWVAR 39
12886: PUSH
12887: LD_VAR 0 6
12891: ST_TO_ADDR
// vc_control = vehcontrol ;
12892: LD_ADDR_OWVAR 38
12896: PUSH
12897: LD_VAR 0 7
12901: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
12902: LD_ADDR_OWVAR 40
12906: PUSH
12907: LD_VAR 0 9
12911: PUSH
12912: LD_INT 1
12914: PPUSH
12915: LD_VAR 0 9
12919: PPUSH
12920: CALL_OW 12
12924: ARRAY
12925: ST_TO_ADDR
// for j = 1 to ARWeapons do
12926: LD_ADDR_VAR 0 14
12930: PUSH
12931: DOUBLE
12932: LD_INT 1
12934: DEC
12935: ST_TO_ADDR
12936: LD_VAR 0 9
12940: PUSH
12941: FOR_TO
12942: IFFALSE 13176
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
12944: LD_VAR 0 9
12948: PUSH
12949: LD_VAR 0 14
12953: ARRAY
12954: PUSH
12955: LD_INT 24
12957: EQUAL
12958: PUSH
12959: LD_VAR 0 9
12963: PUSH
12964: LD_VAR 0 14
12968: ARRAY
12969: PUSH
12970: LD_INT 22
12972: EQUAL
12973: OR
12974: PUSH
12975: LD_VAR 0 9
12979: PUSH
12980: LD_VAR 0 14
12984: ARRAY
12985: PUSH
12986: LD_INT 23
12988: EQUAL
12989: OR
12990: PUSH
12991: LD_VAR 0 9
12995: PUSH
12996: LD_VAR 0 14
13000: ARRAY
13001: PUSH
13002: LD_INT 30
13004: EQUAL
13005: OR
13006: IFFALSE 13055
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
13008: LD_ADDR_VAR 0 18
13012: PUSH
13013: LD_INT 11
13015: PUSH
13016: LD_INT 12
13018: PUSH
13019: LD_INT 13
13021: PUSH
13022: LD_INT 14
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13031: LD_ADDR_OWVAR 37
13035: PUSH
13036: LD_VAR 0 18
13040: PUSH
13041: LD_INT 1
13043: PPUSH
13044: LD_VAR 0 18
13048: PPUSH
13049: CALL_OW 12
13053: ARRAY
13054: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13055: LD_VAR 0 9
13059: PUSH
13060: LD_VAR 0 14
13064: ARRAY
13065: PUSH
13066: LD_INT 29
13068: EQUAL
13069: PUSH
13070: LD_VAR 0 9
13074: PUSH
13075: LD_VAR 0 14
13079: ARRAY
13080: PUSH
13081: LD_INT 28
13083: EQUAL
13084: OR
13085: PUSH
13086: LD_VAR 0 9
13090: PUSH
13091: LD_VAR 0 14
13095: ARRAY
13096: PUSH
13097: LD_INT 27
13099: EQUAL
13100: OR
13101: PUSH
13102: LD_VAR 0 9
13106: PUSH
13107: LD_VAR 0 14
13111: ARRAY
13112: PUSH
13113: LD_INT 26
13115: EQUAL
13116: OR
13117: PUSH
13118: LD_VAR 0 9
13122: PUSH
13123: LD_VAR 0 14
13127: ARRAY
13128: PUSH
13129: LD_INT 25
13131: EQUAL
13132: OR
13133: IFFALSE 13174
// begin arChassisTab = [ 13 , 14 ] ;
13135: LD_ADDR_VAR 0 18
13139: PUSH
13140: LD_INT 13
13142: PUSH
13143: LD_INT 14
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13150: LD_ADDR_OWVAR 37
13154: PUSH
13155: LD_VAR 0 18
13159: PUSH
13160: LD_INT 1
13162: PPUSH
13163: LD_VAR 0 18
13167: PPUSH
13168: CALL_OW 12
13172: ARRAY
13173: ST_TO_ADDR
// end ; end ;
13174: GO 12941
13176: POP
13177: POP
// veh = CreateVehicle ;
13178: LD_ADDR_VAR 0 16
13182: PUSH
13183: CALL_OW 45
13187: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13188: LD_VAR 0 16
13192: PPUSH
13193: LD_VAR 0 1
13197: PPUSH
13198: LD_INT 0
13200: PPUSH
13201: CALL_OW 49
// if vehcontrol = 1 then
13205: LD_VAR 0 7
13209: PUSH
13210: LD_INT 1
13212: EQUAL
13213: IFFALSE 13270
// begin hc_gallery =  ;
13215: LD_ADDR_OWVAR 33
13219: PUSH
13220: LD_STRING 
13222: ST_TO_ADDR
// hc_name =  ;
13223: LD_ADDR_OWVAR 26
13227: PUSH
13228: LD_STRING 
13230: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13231: LD_INT 0
13233: PPUSH
13234: LD_INT 3
13236: PPUSH
13237: LD_VAR 0 4
13241: PPUSH
13242: CALL_OW 380
// un = CreateHuman ;
13246: LD_ADDR_VAR 0 15
13250: PUSH
13251: CALL_OW 44
13255: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13256: LD_VAR 0 15
13260: PPUSH
13261: LD_VAR 0 16
13265: PPUSH
13266: CALL_OW 52
// end ; i = i + 1 ;
13270: LD_ADDR_VAR 0 13
13274: PUSH
13275: LD_VAR 0 13
13279: PUSH
13280: LD_INT 1
13282: PLUS
13283: ST_TO_ADDR
// end ; if nation = 3 then
13284: LD_VAR 0 5
13288: PUSH
13289: LD_INT 3
13291: EQUAL
13292: IFFALSE 13684
// begin uc_side = side ;
13294: LD_ADDR_OWVAR 20
13298: PUSH
13299: LD_VAR 0 2
13303: ST_TO_ADDR
// uc_nation = nation ;
13304: LD_ADDR_OWVAR 21
13308: PUSH
13309: LD_VAR 0 5
13313: ST_TO_ADDR
// vc_engine = vehengine ;
13314: LD_ADDR_OWVAR 39
13318: PUSH
13319: LD_VAR 0 6
13323: ST_TO_ADDR
// vc_control = vehcontrol ;
13324: LD_ADDR_OWVAR 38
13328: PUSH
13329: LD_VAR 0 7
13333: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
13334: LD_ADDR_OWVAR 40
13338: PUSH
13339: LD_VAR 0 8
13343: PUSH
13344: LD_INT 1
13346: PPUSH
13347: LD_VAR 0 8
13351: PPUSH
13352: CALL_OW 12
13356: ARRAY
13357: ST_TO_ADDR
// for j = 1 to RuWeapons do
13358: LD_ADDR_VAR 0 14
13362: PUSH
13363: DOUBLE
13364: LD_INT 1
13366: DEC
13367: ST_TO_ADDR
13368: LD_VAR 0 8
13372: PUSH
13373: FOR_TO
13374: IFFALSE 13576
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
13376: LD_VAR 0 8
13380: PUSH
13381: LD_VAR 0 14
13385: ARRAY
13386: PUSH
13387: LD_INT 42
13389: EQUAL
13390: PUSH
13391: LD_VAR 0 8
13395: PUSH
13396: LD_VAR 0 14
13400: ARRAY
13401: PUSH
13402: LD_INT 43
13404: EQUAL
13405: OR
13406: PUSH
13407: LD_VAR 0 8
13411: PUSH
13412: LD_VAR 0 14
13416: ARRAY
13417: PUSH
13418: LD_INT 44
13420: EQUAL
13421: OR
13422: PUSH
13423: LD_VAR 0 8
13427: PUSH
13428: LD_VAR 0 14
13432: ARRAY
13433: PUSH
13434: LD_INT 45
13436: EQUAL
13437: OR
13438: PUSH
13439: LD_VAR 0 8
13443: PUSH
13444: LD_VAR 0 14
13448: ARRAY
13449: PUSH
13450: LD_INT 49
13452: EQUAL
13453: OR
13454: IFFALSE 13503
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
13456: LD_ADDR_VAR 0 17
13460: PUSH
13461: LD_INT 21
13463: PUSH
13464: LD_INT 22
13466: PUSH
13467: LD_INT 23
13469: PUSH
13470: LD_INT 24
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13479: LD_ADDR_OWVAR 37
13483: PUSH
13484: LD_VAR 0 17
13488: PUSH
13489: LD_INT 1
13491: PPUSH
13492: LD_VAR 0 17
13496: PPUSH
13497: CALL_OW 12
13501: ARRAY
13502: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
13503: LD_VAR 0 8
13507: PUSH
13508: LD_VAR 0 14
13512: ARRAY
13513: PUSH
13514: LD_INT 46
13516: EQUAL
13517: PUSH
13518: LD_VAR 0 8
13522: PUSH
13523: LD_VAR 0 14
13527: ARRAY
13528: PUSH
13529: LD_INT 47
13531: EQUAL
13532: OR
13533: IFFALSE 13574
// begin ruChassisTab = [ 23 , 24 ] ;
13535: LD_ADDR_VAR 0 17
13539: PUSH
13540: LD_INT 23
13542: PUSH
13543: LD_INT 24
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13550: LD_ADDR_OWVAR 37
13554: PUSH
13555: LD_VAR 0 17
13559: PUSH
13560: LD_INT 1
13562: PPUSH
13563: LD_VAR 0 17
13567: PPUSH
13568: CALL_OW 12
13572: ARRAY
13573: ST_TO_ADDR
// end ; end ;
13574: GO 13373
13576: POP
13577: POP
// veh = CreateVehicle ;
13578: LD_ADDR_VAR 0 16
13582: PUSH
13583: CALL_OW 45
13587: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13588: LD_VAR 0 16
13592: PPUSH
13593: LD_VAR 0 1
13597: PPUSH
13598: LD_INT 0
13600: PPUSH
13601: CALL_OW 49
// if vehcontrol = 1 then
13605: LD_VAR 0 7
13609: PUSH
13610: LD_INT 1
13612: EQUAL
13613: IFFALSE 13670
// begin hc_gallery =  ;
13615: LD_ADDR_OWVAR 33
13619: PUSH
13620: LD_STRING 
13622: ST_TO_ADDR
// hc_name =  ;
13623: LD_ADDR_OWVAR 26
13627: PUSH
13628: LD_STRING 
13630: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13631: LD_INT 0
13633: PPUSH
13634: LD_INT 3
13636: PPUSH
13637: LD_VAR 0 4
13641: PPUSH
13642: CALL_OW 380
// un = CreateHuman ;
13646: LD_ADDR_VAR 0 15
13650: PUSH
13651: CALL_OW 44
13655: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13656: LD_VAR 0 15
13660: PPUSH
13661: LD_VAR 0 16
13665: PPUSH
13666: CALL_OW 52
// end ; i = i + 1 ;
13670: LD_ADDR_VAR 0 13
13674: PUSH
13675: LD_VAR 0 13
13679: PUSH
13680: LD_INT 1
13682: PLUS
13683: ST_TO_ADDR
// end ; until i = vehCount ;
13684: LD_VAR 0 13
13688: PUSH
13689: LD_VAR 0 3
13693: EQUAL
13694: IFFALSE 12346
// repeat wait ( 0 0$1 ) ;
13696: LD_INT 35
13698: PPUSH
13699: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
13703: LD_ADDR_VAR 0 20
13707: PUSH
13708: LD_INT 22
13710: PUSH
13711: LD_VAR 0 2
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 21
13722: PUSH
13723: LD_INT 2
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 24
13732: PUSH
13733: LD_INT 661
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: LIST
13744: PPUSH
13745: CALL_OW 69
13749: ST_TO_ADDR
// if vehicleOK_list > 0 then
13750: LD_VAR 0 20
13754: PUSH
13755: LD_INT 0
13757: GREATER
13758: IFFALSE 13949
// begin for i in vehicleOK_list do
13760: LD_ADDR_VAR 0 13
13764: PUSH
13765: LD_VAR 0 20
13769: PUSH
13770: FOR_IN
13771: IFFALSE 13947
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13773: LD_ADDR_VAR 0 21
13777: PUSH
13778: LD_INT 22
13780: PUSH
13781: LD_VAR 0 11
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PPUSH
13790: CALL_OW 69
13794: PPUSH
13795: LD_VAR 0 13
13799: PPUSH
13800: CALL_OW 74
13804: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13805: LD_ADDR_VAR 0 22
13809: PUSH
13810: LD_INT 22
13812: PUSH
13813: LD_VAR 0 11
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: LD_INT 2
13824: PUSH
13825: LD_INT 59
13827: PUSH
13828: EMPTY
13829: LIST
13830: PUSH
13831: LD_INT 21
13833: PUSH
13834: LD_INT 1
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: PUSH
13841: LD_INT 21
13843: PUSH
13844: LD_INT 2
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: EMPTY
13862: LIST
13863: PPUSH
13864: CALL_OW 69
13868: PPUSH
13869: LD_VAR 0 13
13873: PPUSH
13874: CALL_OW 74
13878: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13879: LD_VAR 0 13
13883: PPUSH
13884: LD_VAR 0 21
13888: PPUSH
13889: CALL_OW 296
13893: PUSH
13894: LD_INT 6
13896: PLUS
13897: PUSH
13898: LD_VAR 0 13
13902: PPUSH
13903: LD_VAR 0 22
13907: PPUSH
13908: CALL_OW 296
13912: LESS
13913: IFFALSE 13931
// begin ComAttackUnit ( i , target1 ) ;
13915: LD_VAR 0 13
13919: PPUSH
13920: LD_VAR 0 21
13924: PPUSH
13925: CALL_OW 115
// end else
13929: GO 13945
// begin ComAttackUnit ( i , target2 ) ;
13931: LD_VAR 0 13
13935: PPUSH
13936: LD_VAR 0 22
13940: PPUSH
13941: CALL_OW 115
// end ; end ;
13945: GO 13770
13947: POP
13948: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
13949: LD_INT 22
13951: PUSH
13952: LD_VAR 0 2
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PUSH
13961: LD_INT 21
13963: PUSH
13964: LD_INT 2
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PUSH
13971: LD_INT 24
13973: PUSH
13974: LD_INT 250
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: LIST
13985: PPUSH
13986: CALL_OW 69
13990: PUSH
13991: LD_INT 0
13993: EQUAL
13994: IFFALSE 13696
// end ;
13996: LD_VAR 0 12
14000: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
14001: LD_INT 0
14003: PPUSH
14004: PPUSH
14005: PPUSH
14006: PPUSH
14007: PPUSH
14008: PPUSH
14009: PPUSH
14010: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14011: LD_ADDR_VAR 0 7
14015: PUSH
14016: LD_INT 22
14018: PUSH
14019: LD_VAR 0 1
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PUSH
14028: LD_INT 1
14030: PUSH
14031: LD_INT 3
14033: PUSH
14034: LD_INT 24
14036: PUSH
14037: LD_INT 550
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: LD_INT 24
14050: PUSH
14051: LD_INT 250
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: LIST
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: PPUSH
14067: CALL_OW 69
14071: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14072: LD_ADDR_VAR 0 8
14076: PUSH
14077: LD_INT 22
14079: PUSH
14080: LD_VAR 0 1
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 2
14091: PUSH
14092: LD_INT 25
14094: PUSH
14095: LD_INT 1
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: LD_INT 25
14104: PUSH
14105: LD_INT 5
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: LD_INT 25
14114: PUSH
14115: LD_INT 8
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: LD_INT 25
14124: PUSH
14125: LD_INT 9
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 24
14141: PUSH
14142: LD_INT 1000
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: LIST
14153: PPUSH
14154: CALL_OW 69
14158: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
14159: LD_ADDR_VAR 0 9
14163: PUSH
14164: LD_INT 22
14166: PUSH
14167: LD_VAR 0 1
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: LD_INT 25
14178: PUSH
14179: LD_INT 4
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PPUSH
14190: CALL_OW 69
14194: ST_TO_ADDR
// if medicCount > 0 then
14195: LD_VAR 0 9
14199: PUSH
14200: LD_INT 0
14202: GREATER
14203: IFFALSE 14277
// begin if damageUnit_list > 0 then
14205: LD_VAR 0 7
14209: PUSH
14210: LD_INT 0
14212: GREATER
14213: IFFALSE 14277
// begin for i in damageUnit_list do
14215: LD_ADDR_VAR 0 5
14219: PUSH
14220: LD_VAR 0 7
14224: PUSH
14225: FOR_IN
14226: IFFALSE 14275
// begin ComMoveToArea ( i , healArea ) ;
14228: LD_VAR 0 5
14232: PPUSH
14233: LD_VAR 0 2
14237: PPUSH
14238: CALL_OW 113
// for j in medicCount do
14242: LD_ADDR_VAR 0 6
14246: PUSH
14247: LD_VAR 0 9
14251: PUSH
14252: FOR_IN
14253: IFFALSE 14271
// AddComHeal ( j , i ) ;
14255: LD_VAR 0 6
14259: PPUSH
14260: LD_VAR 0 5
14264: PPUSH
14265: CALL_OW 188
14269: GO 14252
14271: POP
14272: POP
// end ;
14273: GO 14225
14275: POP
14276: POP
// end ; end ; if soldiersOK_list > 0 then
14277: LD_VAR 0 8
14281: PUSH
14282: LD_INT 0
14284: GREATER
14285: IFFALSE 14476
// begin for i in soldiersOK_list do
14287: LD_ADDR_VAR 0 5
14291: PUSH
14292: LD_VAR 0 8
14296: PUSH
14297: FOR_IN
14298: IFFALSE 14474
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14300: LD_ADDR_VAR 0 10
14304: PUSH
14305: LD_INT 22
14307: PUSH
14308: LD_VAR 0 3
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PPUSH
14317: CALL_OW 69
14321: PPUSH
14322: LD_VAR 0 5
14326: PPUSH
14327: CALL_OW 74
14331: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14332: LD_ADDR_VAR 0 11
14336: PUSH
14337: LD_INT 22
14339: PUSH
14340: LD_VAR 0 3
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: LD_INT 2
14351: PUSH
14352: LD_INT 59
14354: PUSH
14355: EMPTY
14356: LIST
14357: PUSH
14358: LD_INT 21
14360: PUSH
14361: LD_INT 1
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: LD_INT 21
14370: PUSH
14371: LD_INT 2
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: EMPTY
14389: LIST
14390: PPUSH
14391: CALL_OW 69
14395: PPUSH
14396: LD_VAR 0 5
14400: PPUSH
14401: CALL_OW 74
14405: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14406: LD_VAR 0 5
14410: PPUSH
14411: LD_VAR 0 10
14415: PPUSH
14416: CALL_OW 296
14420: PUSH
14421: LD_INT 8
14423: PLUS
14424: PUSH
14425: LD_VAR 0 5
14429: PPUSH
14430: LD_VAR 0 11
14434: PPUSH
14435: CALL_OW 296
14439: LESS
14440: IFFALSE 14458
// begin ComAttackUnit ( i , target1 ) ;
14442: LD_VAR 0 5
14446: PPUSH
14447: LD_VAR 0 10
14451: PPUSH
14452: CALL_OW 115
// end else
14456: GO 14472
// begin ComAttackUnit ( i , target2 ) ;
14458: LD_VAR 0 5
14462: PPUSH
14463: LD_VAR 0 11
14467: PPUSH
14468: CALL_OW 115
// end ; end ;
14472: GO 14297
14474: POP
14475: POP
// end ; end ; end_of_file
14476: LD_VAR 0 4
14480: RET
// every 1 do var i ;
14481: GO 14483
14483: DISABLE
14484: LD_INT 0
14486: PPUSH
// begin InGameOn ;
14487: CALL_OW 8
// CenterOnXY ( 53 , 40 ) ;
14491: LD_INT 53
14493: PPUSH
14494: LD_INT 40
14496: PPUSH
14497: CALL_OW 84
// wait ( 0 0$5 ) ;
14501: LD_INT 175
14503: PPUSH
14504: CALL_OW 67
// if gammaCommander = 1 then
14508: LD_EXP 11
14512: PUSH
14513: LD_INT 1
14515: EQUAL
14516: IFFALSE 14527
// CenterNowOnUnits ( Donaldson ) ;
14518: LD_EXP 3
14522: PPUSH
14523: CALL_OW 87
// if gammaCommander = 2 then
14527: LD_EXP 11
14531: PUSH
14532: LD_INT 2
14534: EQUAL
14535: IFFALSE 14546
// CenterNowOnUnits ( Brown ) ;
14537: LD_EXP 2
14541: PPUSH
14542: CALL_OW 87
// if gammaCommander = 3 then
14546: LD_EXP 11
14550: PUSH
14551: LD_INT 3
14553: EQUAL
14554: IFFALSE 14565
// CenterNowOnUnits ( Houten ) ;
14556: LD_EXP 12
14560: PPUSH
14561: CALL_OW 87
// if gammaCommander = 1 then
14565: LD_EXP 11
14569: PUSH
14570: LD_INT 1
14572: EQUAL
14573: IFFALSE 14587
// Say ( Donaldson , D1-Don-1 ) ;
14575: LD_EXP 3
14579: PPUSH
14580: LD_STRING D1-Don-1
14582: PPUSH
14583: CALL_OW 88
// if gammaCommander = 2 then
14587: LD_EXP 11
14591: PUSH
14592: LD_INT 2
14594: EQUAL
14595: IFFALSE 14609
// Say ( Brown , D1-Brown-1 ) ;
14597: LD_EXP 2
14601: PPUSH
14602: LD_STRING D1-Brown-1
14604: PPUSH
14605: CALL_OW 88
// if gammaCommander = 3 then
14609: LD_EXP 11
14613: PUSH
14614: LD_INT 3
14616: EQUAL
14617: IFFALSE 14631
// Say ( Houten , D1-VanH-1 ) ;
14619: LD_EXP 12
14623: PPUSH
14624: LD_STRING D1-VanH-1
14626: PPUSH
14627: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
14631: LD_EXP 21
14635: PPUSH
14636: LD_STRING D1-Har-1
14638: PPUSH
14639: CALL_OW 94
// CenterOnXY ( 53 , 40 ) ;
14643: LD_INT 53
14645: PPUSH
14646: LD_INT 40
14648: PPUSH
14649: CALL_OW 84
// if gammaCommander = 1 then
14653: LD_EXP 11
14657: PUSH
14658: LD_INT 1
14660: EQUAL
14661: IFFALSE 14675
// Say ( Donaldson , D1-Don-2 ) ;
14663: LD_EXP 3
14667: PPUSH
14668: LD_STRING D1-Don-2
14670: PPUSH
14671: CALL_OW 88
// if gammaCommander = 2 then
14675: LD_EXP 11
14679: PUSH
14680: LD_INT 2
14682: EQUAL
14683: IFFALSE 14697
// Say ( Brown , D1-Brown-2 ) ;
14685: LD_EXP 2
14689: PPUSH
14690: LD_STRING D1-Brown-2
14692: PPUSH
14693: CALL_OW 88
// if gammaCommander = 3 then
14697: LD_EXP 11
14701: PUSH
14702: LD_INT 3
14704: EQUAL
14705: IFFALSE 14719
// Say ( Houten , D1-VanH-2 ) ;
14707: LD_EXP 12
14711: PPUSH
14712: LD_STRING D1-VanH-2
14714: PPUSH
14715: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
14719: LD_EXP 21
14723: PPUSH
14724: LD_STRING D1-Har-2
14726: PPUSH
14727: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
14731: LD_INT 22
14733: PUSH
14734: LD_INT 1
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 33
14743: PUSH
14744: LD_INT 2
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 61
14753: PUSH
14754: EMPTY
14755: LIST
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: IFFALSE 14831
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
14768: LD_ADDR_VAR 0 1
14772: PUSH
14773: LD_INT 22
14775: PUSH
14776: LD_INT 1
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PUSH
14783: LD_INT 33
14785: PUSH
14786: LD_INT 2
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: PUSH
14793: LD_INT 61
14795: PUSH
14796: EMPTY
14797: LIST
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: LIST
14803: PPUSH
14804: CALL_OW 69
14808: PUSH
14809: FOR_IN
14810: IFFALSE 14829
// ComAgressiveMove ( i , 70 , 41 ) ;
14812: LD_VAR 0 1
14816: PPUSH
14817: LD_INT 70
14819: PPUSH
14820: LD_INT 41
14822: PPUSH
14823: CALL_OW 114
14827: GO 14809
14829: POP
14830: POP
// repeat wait ( 0 0$1 ) ;
14831: LD_INT 35
14833: PPUSH
14834: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
14838: LD_ADDR_VAR 0 1
14842: PUSH
14843: LD_INT 22
14845: PUSH
14846: LD_INT 6
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: EMPTY
14854: LIST
14855: PPUSH
14856: CALL_OW 69
14860: PUSH
14861: FOR_IN
14862: IFFALSE 14881
// ComAgressiveMove ( i , 54 , 20 ) ;
14864: LD_VAR 0 1
14868: PPUSH
14869: LD_INT 54
14871: PPUSH
14872: LD_INT 20
14874: PPUSH
14875: CALL_OW 114
14879: GO 14861
14881: POP
14882: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
14883: LD_ADDR_VAR 0 1
14887: PUSH
14888: LD_INT 22
14890: PUSH
14891: LD_INT 1
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: LD_INT 25
14900: PUSH
14901: LD_INT 1
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PUSH
14908: LD_INT 3
14910: PUSH
14911: LD_INT 54
14913: PUSH
14914: EMPTY
14915: LIST
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: PPUSH
14926: CALL_OW 69
14930: PUSH
14931: FOR_IN
14932: IFFALSE 14966
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
14934: LD_VAR 0 1
14938: PPUSH
14939: LD_INT 70
14941: PPUSH
14942: LD_INT 41
14944: PPUSH
14945: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
14949: LD_VAR 0 1
14953: PPUSH
14954: LD_INT 46
14956: PPUSH
14957: LD_INT 39
14959: PPUSH
14960: CALL_OW 174
// end ;
14964: GO 14931
14966: POP
14967: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
14968: LD_ADDR_VAR 0 1
14972: PUSH
14973: LD_INT 22
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: LD_INT 21
14985: PUSH
14986: LD_INT 1
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 3
14995: PUSH
14996: LD_INT 24
14998: PUSH
14999: LD_INT 500
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: PPUSH
15015: CALL_OW 69
15019: PUSH
15020: FOR_IN
15021: IFFALSE 15054
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
15023: LD_VAR 0 1
15027: PPUSH
15028: LD_EXP 36
15032: PPUSH
15033: CALL_OW 250
15037: PPUSH
15038: LD_EXP 36
15042: PPUSH
15043: CALL_OW 251
15047: PPUSH
15048: CALL_OW 111
15052: GO 15020
15054: POP
15055: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 4 ;
15056: LD_INT 22
15058: PUSH
15059: LD_INT 6
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 21
15068: PUSH
15069: LD_INT 1
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 24
15078: PUSH
15079: LD_INT 250
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: LIST
15090: PPUSH
15091: CALL_OW 69
15095: PUSH
15096: LD_INT 4
15098: LESS
15099: IFFALSE 14831
// InGameOff ;
15101: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
15105: LD_STRING M1
15107: PPUSH
15108: CALL_OW 337
// SaveForQuickRestart ;
15112: CALL_OW 22
// startCutscene = 0 ;
15116: LD_ADDR_EXP 37
15120: PUSH
15121: LD_INT 0
15123: ST_TO_ADDR
// end ;
15124: PPOPN 1
15126: END
// every 1 1$0 do
15127: GO 15129
15129: DISABLE
// begin PrepareSupportFromDelta ;
15130: CALL 2127 0 0
// firstAttack = 1 ;
15134: LD_ADDR_EXP 32
15138: PUSH
15139: LD_INT 1
15141: ST_TO_ADDR
// if IsOk ( Gladstone ) then
15142: LD_EXP 8
15146: PPUSH
15147: CALL_OW 302
15151: IFFALSE 15167
// begin Say ( Gladstone , D2-Glad-1 ) ;
15153: LD_EXP 8
15157: PPUSH
15158: LD_STRING D2-Glad-1
15160: PPUSH
15161: CALL_OW 88
// end else
15165: GO 15269
// begin DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan ] , D2-Sol1-1 , D2-FSol1-1 ) ;
15167: LD_INT 4
15169: PPUSH
15170: LD_INT 22
15172: PUSH
15173: LD_INT 1
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: LD_INT 21
15182: PUSH
15183: LD_INT 1
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PUSH
15190: LD_INT 2
15192: PUSH
15193: LD_INT 25
15195: PUSH
15196: LD_INT 1
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 25
15205: PUSH
15206: LD_INT 2
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 25
15215: PUSH
15216: LD_INT 3
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: LD_INT 25
15225: PUSH
15226: LD_INT 4
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: LIST
15244: PPUSH
15245: CALL_OW 70
15249: PUSH
15250: LD_EXP 14
15254: PUSH
15255: EMPTY
15256: LIST
15257: DIFF
15258: PPUSH
15259: LD_STRING D2-Sol1-1
15261: PPUSH
15262: LD_STRING D2-FSol1-1
15264: PPUSH
15265: CALL 5586 0 3
// end ; if IsOK ( Donaldson ) and gammaCommander = 1 then
15269: LD_EXP 3
15273: PPUSH
15274: CALL_OW 302
15278: PUSH
15279: LD_EXP 11
15283: PUSH
15284: LD_INT 1
15286: EQUAL
15287: AND
15288: IFFALSE 15302
// Say ( Donaldson , D2-Don-1 ) ;
15290: LD_EXP 3
15294: PPUSH
15295: LD_STRING D2-Don-1
15297: PPUSH
15298: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
15302: LD_EXP 2
15306: PPUSH
15307: CALL_OW 302
15311: PUSH
15312: LD_EXP 11
15316: PUSH
15317: LD_INT 2
15319: EQUAL
15320: AND
15321: IFFALSE 15335
// Say ( Brown , D2-Brown-1 ) ;
15323: LD_EXP 2
15327: PPUSH
15328: LD_STRING D2-Brown-1
15330: PPUSH
15331: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
15335: LD_EXP 12
15339: PPUSH
15340: CALL_OW 302
15344: PUSH
15345: LD_EXP 11
15349: PUSH
15350: LD_INT 3
15352: EQUAL
15353: AND
15354: IFFALSE 15368
// Say ( Houten , D2-VanH-1 ) ;
15356: LD_EXP 12
15360: PPUSH
15361: LD_STRING D2-VanH-1
15363: PPUSH
15364: CALL_OW 88
// end ;
15368: END
// every 0 0$1 do
15369: GO 15371
15371: DISABLE
// begin wait ( LoadVariable ( 07_time , 0 ) div 3 ) ;
15372: LD_STRING 07_time
15374: PPUSH
15375: LD_INT 0
15377: PPUSH
15378: CALL_OW 30
15382: PUSH
15383: LD_INT 3
15385: DIV
15386: PPUSH
15387: CALL_OW 67
// PrepareMacmillanSquad ;
15391: CALL 2745 0 0
// CenterNowOnUnits ( JMM ) ;
15395: LD_EXP 1
15399: PPUSH
15400: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
15404: LD_EXP 1
15408: PPUSH
15409: LD_STRING D3-JMM-1
15411: PPUSH
15412: CALL_OW 88
// JMMArrive = 1 ;
15416: LD_ADDR_EXP 38
15420: PUSH
15421: LD_INT 1
15423: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
15424: LD_EXP 3
15428: PPUSH
15429: CALL_OW 302
15433: PUSH
15434: LD_EXP 11
15438: PUSH
15439: LD_INT 1
15441: EQUAL
15442: AND
15443: IFFALSE 15459
// begin Say ( Donaldson , D3-Don-1 ) ;
15445: LD_EXP 3
15449: PPUSH
15450: LD_STRING D3-Don-1
15452: PPUSH
15453: CALL_OW 88
// end else
15457: GO 15511
// begin if gammaCommander = 1 then
15459: LD_EXP 11
15463: PUSH
15464: LD_INT 1
15466: EQUAL
15467: IFFALSE 15511
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
15469: LD_EXP 10
15473: PPUSH
15474: LD_INT 26
15476: PUSH
15477: LD_INT 1
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 72
15488: PPUSH
15489: LD_STRING D3-Sol1-1
15491: PPUSH
15492: LD_STRING D3-Sol1-1
15494: PPUSH
15495: CALL 5586 0 3
// Say ( JMM , D3-JMM-2 ) ;
15499: LD_EXP 1
15503: PPUSH
15504: LD_STRING D3-JMM-2
15506: PPUSH
15507: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
15511: LD_EXP 2
15515: PPUSH
15516: CALL_OW 302
15520: PUSH
15521: LD_EXP 11
15525: PUSH
15526: LD_INT 2
15528: EQUAL
15529: AND
15530: IFFALSE 15546
// begin Say ( Brown , D3-Brown-1 ) ;
15532: LD_EXP 2
15536: PPUSH
15537: LD_STRING D3-Brown-1
15539: PPUSH
15540: CALL_OW 88
// end else
15544: GO 15598
// begin if gammaCommander = 2 then
15546: LD_EXP 11
15550: PUSH
15551: LD_INT 2
15553: EQUAL
15554: IFFALSE 15598
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
15556: LD_EXP 10
15560: PPUSH
15561: LD_INT 26
15563: PUSH
15564: LD_INT 1
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PPUSH
15571: CALL_OW 72
15575: PPUSH
15576: LD_STRING D3-Sol1-1a
15578: PPUSH
15579: LD_STRING D3-Sol1-1a
15581: PPUSH
15582: CALL 5586 0 3
// Say ( JMM , D3-JMM-2 ) ;
15586: LD_EXP 1
15590: PPUSH
15591: LD_STRING D3-JMM-2
15593: PPUSH
15594: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
15598: LD_EXP 12
15602: PPUSH
15603: CALL_OW 302
15607: PUSH
15608: LD_EXP 11
15612: PUSH
15613: LD_INT 3
15615: EQUAL
15616: AND
15617: IFFALSE 15633
// begin Say ( Houten , D3-VanH-1 ) ;
15619: LD_EXP 12
15623: PPUSH
15624: LD_STRING D3-VanH-1
15626: PPUSH
15627: CALL_OW 88
// end else
15631: GO 15685
// begin if gammaCommander = 3 then
15633: LD_EXP 11
15637: PUSH
15638: LD_INT 3
15640: EQUAL
15641: IFFALSE 15685
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
15643: LD_EXP 10
15647: PPUSH
15648: LD_INT 26
15650: PUSH
15651: LD_INT 1
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PPUSH
15658: CALL_OW 72
15662: PPUSH
15663: LD_STRING D3-Sol1-1b
15665: PPUSH
15666: LD_STRING D3-Sol1-1b
15668: PPUSH
15669: CALL 5586 0 3
// Say ( JMM , D3-JMM-2 ) ;
15673: LD_EXP 1
15677: PPUSH
15678: LD_STRING D3-JMM-2
15680: PPUSH
15681: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
15685: LD_EXP 14
15689: PPUSH
15690: CALL_OW 302
15694: IFFALSE 15722
// begin Say ( Joan , D3a-Joan-1 ) ;
15696: LD_EXP 14
15700: PPUSH
15701: LD_STRING D3a-Joan-1
15703: PPUSH
15704: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
15708: LD_EXP 1
15712: PPUSH
15713: LD_STRING D3a-JMM-1
15715: PPUSH
15716: CALL_OW 88
// end else
15720: GO 16175
// begin if IsOK ( Donaldson ) and gammaCommander = 1 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15722: LD_EXP 3
15726: PPUSH
15727: CALL_OW 302
15731: PUSH
15732: LD_EXP 11
15736: PUSH
15737: LD_INT 1
15739: EQUAL
15740: AND
15741: PUSH
15742: LD_STRING 06_JoanStatus_1
15744: PPUSH
15745: LD_INT 0
15747: PPUSH
15748: CALL_OW 30
15752: PUSH
15753: LD_INT 1
15755: EQUAL
15756: AND
15757: IFFALSE 15808
// begin Say ( Donaldson , D3b-Don-1 ) ;
15759: LD_EXP 3
15763: PPUSH
15764: LD_STRING D3b-Don-1
15766: PPUSH
15767: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15771: LD_EXP 1
15775: PPUSH
15776: LD_STRING D3b-JMM-2
15778: PPUSH
15779: CALL_OW 88
// if IsOK ( Lisa ) then
15783: LD_EXP 6
15787: PPUSH
15788: CALL_OW 302
15792: IFFALSE 15806
// Say ( Lisa , D3b-Lisa-2 ) ;
15794: LD_EXP 6
15798: PPUSH
15799: LD_STRING D3b-Lisa-2
15801: PPUSH
15802: CALL_OW 88
// end else
15806: GO 15873
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15808: LD_EXP 10
15812: PPUSH
15813: LD_INT 26
15815: PUSH
15816: LD_INT 1
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PPUSH
15823: CALL_OW 72
15827: PPUSH
15828: LD_STRING D3b-Sol1-1
15830: PPUSH
15831: LD_STRING D3b-Sol1-1
15833: PPUSH
15834: CALL 5586 0 3
// Say ( JMM , D3b-JMM-2 ) ;
15838: LD_EXP 1
15842: PPUSH
15843: LD_STRING D3b-JMM-2
15845: PPUSH
15846: CALL_OW 88
// if IsOK ( Lisa ) then
15850: LD_EXP 6
15854: PPUSH
15855: CALL_OW 302
15859: IFFALSE 15873
// Say ( Lisa , D3b-Lisa-2 ) ;
15861: LD_EXP 6
15865: PPUSH
15866: LD_STRING D3b-Lisa-2
15868: PPUSH
15869: CALL_OW 88
// end ; if IsOK ( Brown ) and gammaCommander = 2 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15873: LD_EXP 2
15877: PPUSH
15878: CALL_OW 302
15882: PUSH
15883: LD_EXP 11
15887: PUSH
15888: LD_INT 2
15890: EQUAL
15891: AND
15892: PUSH
15893: LD_STRING 06_JoanStatus_1
15895: PPUSH
15896: LD_INT 0
15898: PPUSH
15899: CALL_OW 30
15903: PUSH
15904: LD_INT 1
15906: EQUAL
15907: AND
15908: IFFALSE 15959
// begin Say ( Brown , D3b-Brown-1 ) ;
15910: LD_EXP 2
15914: PPUSH
15915: LD_STRING D3b-Brown-1
15917: PPUSH
15918: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
15922: LD_EXP 1
15926: PPUSH
15927: LD_STRING D3b-JMM-2
15929: PPUSH
15930: CALL_OW 88
// if IsOK ( Lisa ) then
15934: LD_EXP 6
15938: PPUSH
15939: CALL_OW 302
15943: IFFALSE 15957
// Say ( Lisa , D3b-Lisa-2 ) ;
15945: LD_EXP 6
15949: PPUSH
15950: LD_STRING D3b-Lisa-2
15952: PPUSH
15953: CALL_OW 88
// end else
15957: GO 16024
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
15959: LD_EXP 10
15963: PPUSH
15964: LD_INT 26
15966: PUSH
15967: LD_INT 1
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PPUSH
15974: CALL_OW 72
15978: PPUSH
15979: LD_STRING D3b-Sol1-1
15981: PPUSH
15982: LD_STRING D3b-Sol1-1
15984: PPUSH
15985: CALL 5586 0 3
// Say ( JMM , D3b-JMM-2 ) ;
15989: LD_EXP 1
15993: PPUSH
15994: LD_STRING D3b-JMM-2
15996: PPUSH
15997: CALL_OW 88
// if IsOK ( Lisa ) then
16001: LD_EXP 6
16005: PPUSH
16006: CALL_OW 302
16010: IFFALSE 16024
// Say ( Lisa , D3b-Lisa-2 ) ;
16012: LD_EXP 6
16016: PPUSH
16017: LD_STRING D3b-Lisa-2
16019: PPUSH
16020: CALL_OW 88
// end ; if IsOK ( Houten ) and gammaCommander = 3 and LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16024: LD_EXP 12
16028: PPUSH
16029: CALL_OW 302
16033: PUSH
16034: LD_EXP 11
16038: PUSH
16039: LD_INT 3
16041: EQUAL
16042: AND
16043: PUSH
16044: LD_STRING 06_JoanStatus_1
16046: PPUSH
16047: LD_INT 0
16049: PPUSH
16050: CALL_OW 30
16054: PUSH
16055: LD_INT 1
16057: EQUAL
16058: AND
16059: IFFALSE 16110
// begin Say ( Houten , D3b-VanH-1 ) ;
16061: LD_EXP 12
16065: PPUSH
16066: LD_STRING D3b-VanH-1
16068: PPUSH
16069: CALL_OW 88
// Say ( JMM , D3b-JMM-2 ) ;
16073: LD_EXP 1
16077: PPUSH
16078: LD_STRING D3b-JMM-2
16080: PPUSH
16081: CALL_OW 88
// if IsOK ( Lisa ) then
16085: LD_EXP 6
16089: PPUSH
16090: CALL_OW 302
16094: IFFALSE 16108
// Say ( Lisa , D3b-Lisa-2 ) ;
16096: LD_EXP 6
16100: PPUSH
16101: LD_STRING D3b-Lisa-2
16103: PPUSH
16104: CALL_OW 88
// end else
16108: GO 16175
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
16110: LD_EXP 10
16114: PPUSH
16115: LD_INT 26
16117: PUSH
16118: LD_INT 1
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PPUSH
16125: CALL_OW 72
16129: PPUSH
16130: LD_STRING D3b-Sol1-1
16132: PPUSH
16133: LD_STRING D3b-Sol1-1
16135: PPUSH
16136: CALL 5586 0 3
// Say ( JMM , D3b-JMM-2 ) ;
16140: LD_EXP 1
16144: PPUSH
16145: LD_STRING D3b-JMM-2
16147: PPUSH
16148: CALL_OW 88
// if IsOK ( Lisa ) then
16152: LD_EXP 6
16156: PPUSH
16157: CALL_OW 302
16161: IFFALSE 16175
// Say ( Lisa , D3b-Lisa-2 ) ;
16163: LD_EXP 6
16167: PPUSH
16168: LD_STRING D3b-Lisa-2
16170: PPUSH
16171: CALL_OW 88
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCa-Sol1-1 , DCa-Sol1-1 ) ;
16175: LD_INT 22
16177: PUSH
16178: LD_INT 1
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 21
16187: PUSH
16188: LD_INT 1
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 26
16197: PUSH
16198: LD_INT 1
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: LD_INT 2
16207: PUSH
16208: LD_INT 25
16210: PUSH
16211: LD_INT 1
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 25
16220: PUSH
16221: LD_INT 2
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: LD_INT 25
16230: PUSH
16231: LD_INT 3
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: LD_INT 25
16240: PUSH
16241: LD_INT 4
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: PPUSH
16261: CALL_OW 69
16265: PUSH
16266: LD_EXP 1
16270: PUSH
16271: EMPTY
16272: LIST
16273: DIFF
16274: PPUSH
16275: LD_STRING DCa-Sol1-1
16277: PPUSH
16278: LD_STRING DCa-Sol1-1
16280: PPUSH
16281: CALL 5586 0 3
// Say ( JMM , DCb-JMM-1 ) ;
16285: LD_EXP 1
16289: PPUSH
16290: LD_STRING DCb-JMM-1
16292: PPUSH
16293: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DCb-Sol1-1 , DCb-Sol1-1 ) ;
16297: LD_INT 22
16299: PUSH
16300: LD_INT 1
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 21
16309: PUSH
16310: LD_INT 1
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 26
16319: PUSH
16320: LD_INT 1
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 2
16329: PUSH
16330: LD_INT 25
16332: PUSH
16333: LD_INT 1
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: LD_INT 25
16342: PUSH
16343: LD_INT 2
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: PUSH
16350: LD_INT 25
16352: PUSH
16353: LD_INT 3
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 25
16362: PUSH
16363: LD_INT 4
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: PPUSH
16383: CALL_OW 69
16387: PUSH
16388: LD_EXP 1
16392: PUSH
16393: EMPTY
16394: LIST
16395: DIFF
16396: PPUSH
16397: LD_STRING DCb-Sol1-1
16399: PPUSH
16400: LD_STRING DCb-Sol1-1
16402: PPUSH
16403: CALL 5586 0 3
// Say ( JMM , DCb-JMM-2 ) ;
16407: LD_EXP 1
16411: PPUSH
16412: LD_STRING DCb-JMM-2
16414: PPUSH
16415: CALL_OW 88
// secondAttack = 1 ;
16419: LD_ADDR_EXP 33
16423: PUSH
16424: LD_INT 1
16426: ST_TO_ADDR
// end ;
16427: END
// every 0 0$01 trigger JMMArrive = 1 do
16428: LD_EXP 38
16432: PUSH
16433: LD_INT 1
16435: EQUAL
16436: IFFALSE 16516
16438: GO 16440
16440: DISABLE
// begin wait ( 3 3$0 ) ;
16441: LD_INT 6300
16443: PPUSH
16444: CALL_OW 67
// DialogueOn ;
16448: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
16452: LD_EXP 22
16456: PPUSH
16457: LD_STRING D4-Pow-1
16459: PPUSH
16460: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
16464: LD_EXP 1
16468: PPUSH
16469: LD_STRING D4-JMM-1
16471: PPUSH
16472: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
16476: LD_EXP 22
16480: PPUSH
16481: LD_STRING D4-Pow-2
16483: PPUSH
16484: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
16488: LD_EXP 1
16492: PPUSH
16493: LD_STRING D4-JMM-2
16495: PPUSH
16496: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
16500: LD_EXP 22
16504: PPUSH
16505: LD_STRING D4-Pow-3
16507: PPUSH
16508: CALL_OW 94
// DialogueOff ;
16512: CALL_OW 7
// end ;
16516: END
// every 0 0$01 trigger JMMArrive = 1 do
16517: LD_EXP 38
16521: PUSH
16522: LD_INT 1
16524: EQUAL
16525: IFFALSE 16557
16527: GO 16529
16529: DISABLE
// begin wait ( 8 8$0 ) ;
16530: LD_INT 16800
16532: PPUSH
16533: CALL_OW 67
// DialogueOn ;
16537: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
16541: LD_EXP 22
16545: PPUSH
16546: LD_STRING D4a-Pow-1
16548: PPUSH
16549: CALL_OW 94
// DialogueOff ;
16553: CALL_OW 7
// end ;
16557: END
// every 0 0$01 trigger JMMArrive = 1 do
16558: LD_EXP 38
16562: PUSH
16563: LD_INT 1
16565: EQUAL
16566: IFFALSE 16611
16568: GO 16570
16570: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
16571: LD_INT 21000
16573: PUSH
16574: LD_INT 25200
16576: PUSH
16577: LD_INT 31500
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: LIST
16584: PUSH
16585: LD_OWVAR 67
16589: ARRAY
16590: PPUSH
16591: CALL_OW 67
// PrepareSikorsky ;
16595: CALL 4170 0 0
// SikorskyArrive = 1 ;
16599: LD_ADDR_EXP 17
16603: PUSH
16604: LD_INT 1
16606: ST_TO_ADDR
// PrepareSikorskyArmy ;
16607: CALL 4310 0 0
// end ;
16611: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
16612: LD_EXP 16
16616: PPUSH
16617: LD_INT 5
16619: PPUSH
16620: CALL_OW 308
16624: IFFALSE 16816
16626: GO 16628
16628: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
16629: LD_EXP 16
16633: PPUSH
16634: CALL_OW 87
// DialogueOn ;
16638: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
16642: LD_EXP 15
16646: PPUSH
16647: LD_STRING D5-Sik-1
16649: PPUSH
16650: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
16654: LD_EXP 1
16658: PPUSH
16659: LD_STRING D5-JMM-1a
16661: PPUSH
16662: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
16666: LD_EXP 15
16670: PPUSH
16671: LD_STRING D5-Sik-2
16673: PPUSH
16674: CALL_OW 88
// case query ( QSikorski ) of 1 :
16678: LD_STRING QSikorski
16680: PPUSH
16681: CALL_OW 97
16685: PUSH
16686: LD_INT 1
16688: DOUBLE
16689: EQUAL
16690: IFTRUE 16694
16692: GO 16717
16694: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
16695: LD_EXP 15
16699: PPUSH
16700: LD_STRING D5a-Sik-1
16702: PPUSH
16703: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
16707: LD_ADDR_EXP 18
16711: PUSH
16712: LD_INT 2100
16714: ST_TO_ADDR
// end ; 2 :
16715: GO 16804
16717: LD_INT 2
16719: DOUBLE
16720: EQUAL
16721: IFTRUE 16725
16723: GO 16748
16725: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
16726: LD_EXP 15
16730: PPUSH
16731: LD_STRING D5b-Sik-1
16733: PPUSH
16734: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
16738: LD_ADDR_EXP 18
16742: PUSH
16743: LD_INT 10500
16745: ST_TO_ADDR
// end ; 3 :
16746: GO 16804
16748: LD_INT 3
16750: DOUBLE
16751: EQUAL
16752: IFTRUE 16756
16754: GO 16803
16756: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
16757: LD_EXP 15
16761: PPUSH
16762: LD_STRING D5c-Sik-1
16764: PPUSH
16765: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
16769: LD_EXP 1
16773: PPUSH
16774: LD_STRING D5c-JMM-1
16776: PPUSH
16777: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
16781: LD_EXP 15
16785: PPUSH
16786: LD_STRING D5c-Sik-2
16788: PPUSH
16789: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
16793: LD_ADDR_EXP 18
16797: PUSH
16798: LD_INT 10500
16800: ST_TO_ADDR
// end ; end ;
16801: GO 16804
16803: POP
// DialogueOff ;
16804: CALL_OW 7
// timerStatus = 1 ;
16808: LD_ADDR_EXP 34
16812: PUSH
16813: LD_INT 1
16815: ST_TO_ADDR
// end ;
16816: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
16817: LD_EXP 18
16821: PUSH
16822: LD_INT 35
16824: LESS
16825: IFFALSE 16873
16827: GO 16829
16829: DISABLE
// begin timerStatus = 0 ;
16830: LD_ADDR_EXP 34
16834: PUSH
16835: LD_INT 0
16837: ST_TO_ADDR
// DialogueOn ;
16838: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
16842: LD_EXP 15
16846: PPUSH
16847: LD_STRING D6-Sik-1
16849: PPUSH
16850: CALL_OW 88
// DialogueOff ;
16854: CALL_OW 7
// SikorskyAI = 1 ;
16858: LD_ADDR_EXP 19
16862: PUSH
16863: LD_INT 1
16865: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
16866: LD_STRING M2
16868: PPUSH
16869: CALL_OW 337
// end ;
16873: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
16874: LD_EXP 16
16878: PPUSH
16879: LD_INT 18
16881: PPUSH
16882: CALL_OW 308
16886: IFFALSE 16970
16888: GO 16890
16890: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
16891: LD_EXP 15
16895: PPUSH
16896: LD_STRING D7-Sik-1
16898: PPUSH
16899: CALL_OW 88
// if IsInArea ( JMM , RussianBaseTerritory ) or IsInUnit ( JMM ) then
16903: LD_EXP 1
16907: PPUSH
16908: LD_INT 24
16910: PPUSH
16911: CALL_OW 308
16915: PUSH
16916: LD_EXP 1
16920: PPUSH
16921: CALL_OW 310
16925: OR
16926: IFFALSE 16950
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16928: LD_EXP 15
16932: PPUSH
16933: LD_STRING D7a-Sik-1
16935: PPUSH
16936: CALL_OW 88
// SikorskyStatus = 1 ;
16940: LD_ADDR_EXP 20
16944: PUSH
16945: LD_INT 1
16947: ST_TO_ADDR
// end else
16948: GO 16970
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16950: LD_EXP 15
16954: PPUSH
16955: LD_STRING D7b-Sik-1
16957: PPUSH
16958: CALL_OW 88
// SikorskyStatus = 2 ;
16962: LD_ADDR_EXP 20
16966: PUSH
16967: LD_INT 2
16969: ST_TO_ADDR
// end ; end ;
16970: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
16971: LD_EXP 35
16975: PUSH
16976: LD_INT 1
16978: EQUAL
16979: IFFALSE 17088
16981: GO 16983
16983: DISABLE
16984: LD_INT 0
16986: PPUSH
// begin enable ;
16987: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
16988: LD_ADDR_VAR 0 1
16992: PUSH
16993: LD_INT 22
16995: PUSH
16996: LD_INT 3
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PPUSH
17003: CALL_OW 69
17007: PUSH
17008: FOR_IN
17009: IFFALSE 17036
// if IsInArea ( i , RussianEscape ) then
17011: LD_VAR 0 1
17015: PPUSH
17016: LD_INT 22
17018: PPUSH
17019: CALL_OW 308
17023: IFFALSE 17034
// RemoveUnit ( i ) ;
17025: LD_VAR 0 1
17029: PPUSH
17030: CALL_OW 64
17034: GO 17008
17036: POP
17037: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
17038: LD_ADDR_VAR 0 1
17042: PUSH
17043: LD_INT 22
17045: PUSH
17046: LD_INT 6
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PPUSH
17053: CALL_OW 69
17057: PUSH
17058: FOR_IN
17059: IFFALSE 17086
// if IsInArea ( i , RussianEscape ) then
17061: LD_VAR 0 1
17065: PPUSH
17066: LD_INT 22
17068: PPUSH
17069: CALL_OW 308
17073: IFFALSE 17084
// RemoveUnit ( i ) ;
17075: LD_VAR 0 1
17079: PPUSH
17080: CALL_OW 64
17084: GO 17058
17086: POP
17087: POP
// end ; end_of_file
17088: PPOPN 1
17090: END
// on BuildingComplete ( building ) do var tmp , un ;
17091: LD_INT 0
17093: PPUSH
17094: PPUSH
// begin if GetSide ( building ) = 3 then
17095: LD_VAR 0 1
17099: PPUSH
17100: CALL_OW 255
17104: PUSH
17105: LD_INT 3
17107: EQUAL
17108: IFFALSE 17595
// begin if GetBType ( building ) = b_depot then
17110: LD_VAR 0 1
17114: PPUSH
17115: CALL_OW 266
17119: PUSH
17120: LD_INT 0
17122: EQUAL
17123: IFFALSE 17191
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
17125: LD_VAR 0 1
17129: PPUSH
17130: CALL_OW 274
17134: PPUSH
17135: LD_INT 1
17137: PPUSH
17138: LD_INT 5000
17140: PPUSH
17141: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
17145: LD_VAR 0 1
17149: PPUSH
17150: CALL_OW 274
17154: PPUSH
17155: LD_INT 2
17157: PPUSH
17158: LD_INT 5000
17160: PPUSH
17161: CALL_OW 277
// SetBName ( building , konev ) ;
17165: LD_VAR 0 1
17169: PPUSH
17170: LD_STRING konev
17172: PPUSH
17173: CALL_OW 500
// ruDepot = building ;
17177: LD_ADDR_EXP 27
17181: PUSH
17182: LD_VAR 0 1
17186: ST_TO_ADDR
// BuildRussianBase ;
17187: CALL 6191 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
17191: LD_VAR 0 1
17195: PPUSH
17196: CALL_OW 266
17200: PUSH
17201: LD_INT 0
17203: EQUAL
17204: PUSH
17205: LD_VAR 0 1
17209: PPUSH
17210: CALL_OW 266
17214: PUSH
17215: LD_INT 2
17217: EQUAL
17218: OR
17219: PUSH
17220: LD_VAR 0 1
17224: PPUSH
17225: CALL_OW 266
17229: PUSH
17230: LD_INT 4
17232: EQUAL
17233: OR
17234: IFFALSE 17245
// ComUpgrade ( building ) ;
17236: LD_VAR 0 1
17240: PPUSH
17241: CALL_OW 146
// if GetBType ( building ) = b_lab then
17245: LD_VAR 0 1
17249: PPUSH
17250: CALL_OW 266
17254: PUSH
17255: LD_INT 6
17257: EQUAL
17258: IFFALSE 17309
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17260: LD_VAR 0 1
17264: PPUSH
17265: LD_INT 10
17267: PPUSH
17268: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
17272: LD_VAR 0 1
17276: PPUSH
17277: LD_INT 12
17279: PPUSH
17280: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
17284: LD_INT 3
17286: PPUSH
17287: LD_VAR 0 1
17291: PPUSH
17292: LD_INT 3
17294: PPUSH
17295: CALL 6746 0 3
// ruLab = building ;
17299: LD_ADDR_EXP 28
17303: PUSH
17304: LD_VAR 0 1
17308: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
17309: LD_VAR 0 1
17313: PPUSH
17314: CALL_OW 266
17318: PUSH
17319: LD_INT 32
17321: EQUAL
17322: IFFALSE 17440
// begin uc_side = 3 ;
17324: LD_ADDR_OWVAR 20
17328: PUSH
17329: LD_INT 3
17331: ST_TO_ADDR
// uc_nation = 3 ;
17332: LD_ADDR_OWVAR 21
17336: PUSH
17337: LD_INT 3
17339: ST_TO_ADDR
// hc_gallery =  ;
17340: LD_ADDR_OWVAR 33
17344: PUSH
17345: LD_STRING 
17347: ST_TO_ADDR
// hc_name =  ;
17348: LD_ADDR_OWVAR 26
17352: PUSH
17353: LD_STRING 
17355: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17356: LD_INT 0
17358: PPUSH
17359: LD_INT 1
17361: PPUSH
17362: LD_EXP 24
17366: PPUSH
17367: LD_EXP 25
17371: PPUSH
17372: CALL_OW 12
17376: PPUSH
17377: CALL_OW 380
// un = CreateHuman ;
17381: LD_ADDR_VAR 0 3
17385: PUSH
17386: CALL_OW 44
17390: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
17391: LD_VAR 0 3
17395: PPUSH
17396: LD_VAR 0 1
17400: PPUSH
17401: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
17405: LD_VAR 0 1
17409: PPUSH
17410: LD_INT 43
17412: PUSH
17413: LD_INT 44
17415: PUSH
17416: LD_INT 46
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 1
17426: PPUSH
17427: LD_INT 3
17429: PPUSH
17430: CALL_OW 12
17434: ARRAY
17435: PPUSH
17436: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
17440: LD_VAR 0 1
17444: PPUSH
17445: CALL_OW 266
17449: PUSH
17450: LD_INT 33
17452: EQUAL
17453: IFFALSE 17490
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
17455: LD_VAR 0 1
17459: PPUSH
17460: LD_INT 43
17462: PUSH
17463: LD_INT 44
17465: PUSH
17466: LD_INT 46
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 1
17476: PPUSH
17477: LD_INT 3
17479: PPUSH
17480: CALL_OW 12
17484: ARRAY
17485: PPUSH
17486: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
17490: LD_VAR 0 1
17494: PPUSH
17495: CALL_OW 266
17499: PUSH
17500: LD_INT 24
17502: EQUAL
17503: IFFALSE 17513
// russianAI = 1 ;
17505: LD_ADDR_EXP 26
17509: PUSH
17510: LD_INT 1
17512: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
17513: LD_EXP 30
17517: PUSH
17518: LD_INT 0
17520: GREATER
17521: IFFALSE 17595
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17523: LD_ADDR_EXP 30
17527: PUSH
17528: LD_EXP 30
17532: PPUSH
17533: LD_INT 1
17535: PPUSH
17536: CALL_OW 3
17540: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17541: LD_ADDR_EXP 30
17545: PUSH
17546: LD_EXP 30
17550: PPUSH
17551: LD_INT 1
17553: PPUSH
17554: CALL_OW 3
17558: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17559: LD_ADDR_EXP 30
17563: PUSH
17564: LD_EXP 30
17568: PPUSH
17569: LD_INT 1
17571: PPUSH
17572: CALL_OW 3
17576: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17577: LD_ADDR_EXP 30
17581: PUSH
17582: LD_EXP 30
17586: PPUSH
17587: LD_INT 1
17589: PPUSH
17590: CALL_OW 3
17594: ST_TO_ADDR
// end ; end ; end ;
17595: PPOPN 3
17597: END
// on UpgradeComplete ( building ) do var i ;
17598: LD_INT 0
17600: PPUSH
// begin if GetSide ( building ) = 3 then
17601: LD_VAR 0 1
17605: PPUSH
17606: CALL_OW 255
17610: PUSH
17611: LD_INT 3
17613: EQUAL
17614: IFFALSE 17795
// begin if GetBType ( building ) = b_factory then
17616: LD_VAR 0 1
17620: PPUSH
17621: CALL_OW 266
17625: PUSH
17626: LD_INT 3
17628: EQUAL
17629: IFFALSE 17696
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
17631: LD_ADDR_VAR 0 2
17635: PUSH
17636: LD_INT 22
17638: PUSH
17639: LD_INT 3
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 25
17648: PUSH
17649: LD_INT 3
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PPUSH
17660: CALL_OW 69
17664: PUSH
17665: FOR_IN
17666: IFFALSE 17684
// ComEnterUnit ( i , building ) ;
17668: LD_VAR 0 2
17672: PPUSH
17673: LD_VAR 0 1
17677: PPUSH
17678: CALL_OW 120
17682: GO 17665
17684: POP
17685: POP
// ruFab = building ;
17686: LD_ADDR_EXP 29
17690: PUSH
17691: LD_VAR 0 1
17695: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
17696: LD_VAR 0 1
17700: PPUSH
17701: CALL_OW 266
17705: PUSH
17706: LD_INT 8
17708: EQUAL
17709: IFFALSE 17766
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17711: LD_ADDR_VAR 0 2
17715: PUSH
17716: LD_INT 22
17718: PUSH
17719: LD_INT 3
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 25
17728: PUSH
17729: LD_INT 4
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PPUSH
17740: CALL_OW 69
17744: PUSH
17745: FOR_IN
17746: IFFALSE 17764
// ComEnterUnit ( i , building ) ;
17748: LD_VAR 0 2
17752: PPUSH
17753: LD_VAR 0 1
17757: PPUSH
17758: CALL_OW 120
17762: GO 17745
17764: POP
17765: POP
// if GetBType ( building ) = b_warehouse then
17766: LD_VAR 0 1
17770: PPUSH
17771: CALL_OW 266
17775: PUSH
17776: LD_INT 1
17778: EQUAL
17779: IFFALSE 17795
// begin ComEnterUnit ( Borodin , building ) ;
17781: LD_EXP 23
17785: PPUSH
17786: LD_VAR 0 1
17790: PPUSH
17791: CALL_OW 120
// end ; end ; end ;
17795: PPOPN 2
17797: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
17798: LD_VAR 0 1
17802: PPUSH
17803: CALL_OW 247
17807: PUSH
17808: LD_INT 2
17810: EQUAL
17811: PUSH
17812: LD_VAR 0 1
17816: PPUSH
17817: CALL_OW 263
17821: PUSH
17822: LD_INT 3
17824: EQUAL
17825: AND
17826: PUSH
17827: LD_EXP 40
17831: PUSH
17832: LD_INT 0
17834: EQUAL
17835: AND
17836: IFFALSE 17954
// begin varEvent1 = 1 ;
17838: LD_ADDR_EXP 40
17842: PUSH
17843: LD_INT 1
17845: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
17846: LD_VAR 0 1
17850: PPUSH
17851: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
17855: LD_INT 22
17857: PUSH
17858: LD_INT 1
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 21
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 2
17877: PUSH
17878: LD_INT 25
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 25
17890: PUSH
17891: LD_INT 2
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 25
17900: PUSH
17901: LD_INT 3
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 25
17910: PUSH
17911: LD_INT 4
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: LIST
17929: PPUSH
17930: CALL_OW 69
17934: PUSH
17935: LD_EXP 1
17939: PUSH
17940: EMPTY
17941: LIST
17942: DIFF
17943: PPUSH
17944: LD_STRING DC-Sol1-1
17946: PPUSH
17947: LD_STRING DC-FSol1-1
17949: PPUSH
17950: CALL 5586 0 3
// end ; end ;
17954: PPOPN 1
17956: END
// on UnitDestroyed ( unit ) do var i ;
17957: LD_INT 0
17959: PPUSH
// begin if GetSide ( unit ) = 3 then
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 255
17969: PUSH
17970: LD_INT 3
17972: EQUAL
17973: IFFALSE 18743
// begin if GetType ( unit ) = unit_building then
17975: LD_VAR 0 1
17979: PPUSH
17980: CALL_OW 247
17984: PUSH
17985: LD_INT 3
17987: EQUAL
17988: IFFALSE 18680
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17990: LD_VAR 0 1
17994: PPUSH
17995: CALL_OW 266
17999: PUSH
18000: LD_INT 31
18002: EQUAL
18003: PUSH
18004: LD_VAR 0 1
18008: PPUSH
18009: CALL_OW 266
18013: PUSH
18014: LD_INT 32
18016: EQUAL
18017: OR
18018: PUSH
18019: LD_VAR 0 1
18023: PPUSH
18024: CALL_OW 266
18028: PUSH
18029: LD_INT 36
18031: EQUAL
18032: OR
18033: PUSH
18034: LD_VAR 0 1
18038: PPUSH
18039: CALL_OW 266
18043: PUSH
18044: LD_INT 0
18046: EQUAL
18047: OR
18048: PUSH
18049: LD_VAR 0 1
18053: PPUSH
18054: CALL_OW 266
18058: PUSH
18059: LD_INT 24
18061: EQUAL
18062: OR
18063: PUSH
18064: LD_VAR 0 1
18068: PPUSH
18069: CALL_OW 266
18073: PUSH
18074: LD_INT 17
18076: EQUAL
18077: OR
18078: PUSH
18079: LD_VAR 0 1
18083: PPUSH
18084: CALL_OW 266
18088: PUSH
18089: LD_INT 25
18091: EQUAL
18092: OR
18093: PUSH
18094: LD_VAR 0 1
18098: PPUSH
18099: CALL_OW 266
18103: PUSH
18104: LD_INT 19
18106: EQUAL
18107: OR
18108: PUSH
18109: LD_VAR 0 1
18113: PPUSH
18114: CALL_OW 266
18118: PUSH
18119: LD_INT 20
18121: EQUAL
18122: OR
18123: PUSH
18124: LD_VAR 0 1
18128: PPUSH
18129: CALL_OW 266
18133: PUSH
18134: LD_INT 18
18136: EQUAL
18137: OR
18138: PUSH
18139: LD_VAR 0 1
18143: PPUSH
18144: CALL_OW 266
18148: PUSH
18149: LD_INT 21
18151: EQUAL
18152: OR
18153: PUSH
18154: LD_VAR 0 1
18158: PPUSH
18159: CALL_OW 266
18163: PUSH
18164: LD_INT 23
18166: EQUAL
18167: OR
18168: PUSH
18169: LD_VAR 0 1
18173: PPUSH
18174: CALL_OW 266
18178: PUSH
18179: LD_INT 16
18181: EQUAL
18182: OR
18183: PUSH
18184: LD_VAR 0 1
18188: PPUSH
18189: CALL_OW 266
18193: PUSH
18194: LD_INT 6
18196: EQUAL
18197: OR
18198: PUSH
18199: LD_VAR 0 1
18203: PPUSH
18204: CALL_OW 266
18208: PUSH
18209: LD_INT 29
18211: EQUAL
18212: OR
18213: PUSH
18214: LD_VAR 0 1
18218: PPUSH
18219: CALL_OW 266
18223: PUSH
18224: LD_INT 26
18226: EQUAL
18227: OR
18228: PUSH
18229: LD_VAR 0 1
18233: PPUSH
18234: CALL_OW 266
18238: PUSH
18239: LD_INT 30
18241: EQUAL
18242: OR
18243: PUSH
18244: LD_VAR 0 1
18248: PPUSH
18249: CALL_OW 266
18253: PUSH
18254: LD_INT 28
18256: EQUAL
18257: OR
18258: PUSH
18259: LD_VAR 0 1
18263: PPUSH
18264: CALL_OW 266
18268: PUSH
18269: LD_INT 27
18271: EQUAL
18272: OR
18273: PUSH
18274: LD_VAR 0 1
18278: PPUSH
18279: CALL_OW 266
18283: PUSH
18284: LD_INT 33
18286: EQUAL
18287: OR
18288: PUSH
18289: LD_VAR 0 1
18293: PPUSH
18294: CALL_OW 266
18298: PUSH
18299: LD_INT 2
18301: EQUAL
18302: OR
18303: PUSH
18304: LD_VAR 0 1
18308: PPUSH
18309: CALL_OW 266
18313: PUSH
18314: LD_INT 4
18316: EQUAL
18317: OR
18318: IFFALSE 18404
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
18320: LD_ADDR_EXP 30
18324: PUSH
18325: LD_EXP 30
18329: PUSH
18330: LD_VAR 0 1
18334: PPUSH
18335: CALL_OW 266
18339: ADD
18340: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18341: LD_ADDR_EXP 30
18345: PUSH
18346: LD_EXP 30
18350: PUSH
18351: LD_VAR 0 1
18355: PPUSH
18356: CALL_OW 250
18360: ADD
18361: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18362: LD_ADDR_EXP 30
18366: PUSH
18367: LD_EXP 30
18371: PUSH
18372: LD_VAR 0 1
18376: PPUSH
18377: CALL_OW 251
18381: ADD
18382: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18383: LD_ADDR_EXP 30
18387: PUSH
18388: LD_EXP 30
18392: PUSH
18393: LD_VAR 0 1
18397: PPUSH
18398: CALL_OW 254
18402: ADD
18403: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
18404: LD_VAR 0 1
18408: PPUSH
18409: CALL_OW 266
18413: PUSH
18414: LD_INT 1
18416: EQUAL
18417: IFFALSE 18496
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
18419: LD_ADDR_EXP 30
18423: PUSH
18424: LD_EXP 30
18428: PUSH
18429: LD_INT 0
18431: ADD
18432: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18433: LD_ADDR_EXP 30
18437: PUSH
18438: LD_EXP 30
18442: PUSH
18443: LD_VAR 0 1
18447: PPUSH
18448: CALL_OW 250
18452: ADD
18453: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18454: LD_ADDR_EXP 30
18458: PUSH
18459: LD_EXP 30
18463: PUSH
18464: LD_VAR 0 1
18468: PPUSH
18469: CALL_OW 251
18473: ADD
18474: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18475: LD_ADDR_EXP 30
18479: PUSH
18480: LD_EXP 30
18484: PUSH
18485: LD_VAR 0 1
18489: PPUSH
18490: CALL_OW 254
18494: ADD
18495: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18496: LD_VAR 0 1
18500: PPUSH
18501: CALL_OW 266
18505: PUSH
18506: LD_INT 3
18508: EQUAL
18509: IFFALSE 18588
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
18511: LD_ADDR_EXP 30
18515: PUSH
18516: LD_EXP 30
18520: PUSH
18521: LD_INT 2
18523: ADD
18524: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18525: LD_ADDR_EXP 30
18529: PUSH
18530: LD_EXP 30
18534: PUSH
18535: LD_VAR 0 1
18539: PPUSH
18540: CALL_OW 250
18544: ADD
18545: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18546: LD_ADDR_EXP 30
18550: PUSH
18551: LD_EXP 30
18555: PUSH
18556: LD_VAR 0 1
18560: PPUSH
18561: CALL_OW 251
18565: ADD
18566: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18567: LD_ADDR_EXP 30
18571: PUSH
18572: LD_EXP 30
18576: PUSH
18577: LD_VAR 0 1
18581: PPUSH
18582: CALL_OW 254
18586: ADD
18587: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18588: LD_VAR 0 1
18592: PPUSH
18593: CALL_OW 266
18597: PUSH
18598: LD_INT 5
18600: EQUAL
18601: IFFALSE 18680
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
18603: LD_ADDR_EXP 30
18607: PUSH
18608: LD_EXP 30
18612: PUSH
18613: LD_INT 4
18615: ADD
18616: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18617: LD_ADDR_EXP 30
18621: PUSH
18622: LD_EXP 30
18626: PUSH
18627: LD_VAR 0 1
18631: PPUSH
18632: CALL_OW 250
18636: ADD
18637: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18638: LD_ADDR_EXP 30
18642: PUSH
18643: LD_EXP 30
18647: PUSH
18648: LD_VAR 0 1
18652: PPUSH
18653: CALL_OW 251
18657: ADD
18658: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18659: LD_ADDR_EXP 30
18663: PUSH
18664: LD_EXP 30
18668: PUSH
18669: LD_VAR 0 1
18673: PPUSH
18674: CALL_OW 254
18678: ADD
18679: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
18680: LD_VAR 0 1
18684: PPUSH
18685: CALL_OW 247
18689: PUSH
18690: LD_INT 1
18692: EQUAL
18693: IFFALSE 18743
// begin for i in defenders_list do
18695: LD_ADDR_VAR 0 2
18699: PUSH
18700: LD_EXP 31
18704: PUSH
18705: FOR_IN
18706: IFFALSE 18741
// if i = unit then
18708: LD_VAR 0 2
18712: PUSH
18713: LD_VAR 0 1
18717: EQUAL
18718: IFFALSE 18739
// defenders_list = defenders_list diff [ unit ] ;
18720: LD_ADDR_EXP 31
18724: PUSH
18725: LD_EXP 31
18729: PUSH
18730: LD_VAR 0 1
18734: PUSH
18735: EMPTY
18736: LIST
18737: DIFF
18738: ST_TO_ADDR
18739: GO 18705
18741: POP
18742: POP
// end ; end ; end ; end_of_file
18743: PPOPN 2
18745: END
// every 0 0$1 do
18746: GO 18748
18748: DISABLE
// begin enable ;
18749: ENABLE
// if escapeAvalaible = 0 then
18750: LD_EXP 35
18754: PUSH
18755: LD_INT 0
18757: EQUAL
18758: IFFALSE 18770
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18760: LD_INT 3
18762: PPUSH
18763: LD_INT 6
18765: PPUSH
18766: CALL 6831 0 2
// if escapeAvalaible = 0 then
18770: LD_EXP 35
18774: PUSH
18775: LD_INT 0
18777: EQUAL
18778: IFFALSE 18790
// DefenseBase ( 1 , RussianBaseTerritory ) ;
18780: LD_INT 1
18782: PPUSH
18783: LD_INT 24
18785: PPUSH
18786: CALL 7578 0 2
// if russianAI = 1 then
18790: LD_EXP 26
18794: PUSH
18795: LD_INT 1
18797: EQUAL
18798: IFFALSE 18861
// begin RepairBuilding ( 3 , ruDepot ) ;
18800: LD_INT 3
18802: PPUSH
18803: LD_EXP 27
18807: PPUSH
18808: CALL 7878 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
18812: LD_INT 3
18814: PPUSH
18815: LD_INT 7
18817: PPUSH
18818: LD_INT 6
18820: PPUSH
18821: LD_EXP 28
18825: PPUSH
18826: CALL 8343 0 4
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
18830: LD_INT 3
18832: PPUSH
18833: LD_EXP 30
18837: PPUSH
18838: CALL 8137 0 2
// RepairVehicle ( 6 , RussianRepairArea , 93 , 93 , 1 ) ;
18842: LD_INT 6
18844: PPUSH
18845: LD_INT 8
18847: PPUSH
18848: LD_INT 93
18850: PPUSH
18851: LD_INT 93
18853: PPUSH
18854: LD_INT 1
18856: PPUSH
18857: CALL 8620 0 5
// end ; if SikorskyArrive = 1 then
18861: LD_EXP 17
18865: PUSH
18866: LD_INT 1
18868: EQUAL
18869: IFFALSE 18890
// RepairVehicle ( 3 , SikorskyRepairArea , 53 , 59 , 3 ) ;
18871: LD_INT 3
18873: PPUSH
18874: LD_INT 10
18876: PPUSH
18877: LD_INT 53
18879: PPUSH
18880: LD_INT 59
18882: PPUSH
18883: LD_INT 3
18885: PPUSH
18886: CALL 8620 0 5
// end ;
18890: END
// every 0 0$1 trigger russianAI = 1 do var i ;
18891: LD_EXP 26
18895: PUSH
18896: LD_INT 1
18898: EQUAL
18899: IFFALSE 19175
18901: GO 18903
18903: DISABLE
18904: LD_INT 0
18906: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
18907: LD_ADDR_VAR 0 1
18911: PUSH
18912: LD_INT 22
18914: PUSH
18915: LD_INT 3
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 21
18924: PUSH
18925: LD_INT 3
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 30
18934: PUSH
18935: LD_INT 32
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 3
18944: PUSH
18945: LD_INT 2
18947: PUSH
18948: LD_INT 35
18950: PUSH
18951: LD_INT 43
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 35
18960: PUSH
18961: LD_INT 44
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 35
18970: PUSH
18971: LD_INT 46
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: PPUSH
18994: CALL_OW 69
18998: PUSH
18999: FOR_IN
19000: IFFALSE 19039
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19002: LD_VAR 0 1
19006: PPUSH
19007: LD_INT 43
19009: PUSH
19010: LD_INT 44
19012: PUSH
19013: LD_INT 46
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 1
19023: PPUSH
19024: LD_INT 3
19026: PPUSH
19027: CALL_OW 12
19031: ARRAY
19032: PPUSH
19033: CALL_OW 431
19037: GO 18999
19039: POP
19040: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
19041: LD_ADDR_VAR 0 1
19045: PUSH
19046: LD_INT 22
19048: PUSH
19049: LD_INT 3
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 21
19058: PUSH
19059: LD_INT 3
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 30
19068: PUSH
19069: LD_INT 33
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 3
19078: PUSH
19079: LD_INT 2
19081: PUSH
19082: LD_INT 35
19084: PUSH
19085: LD_INT 43
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 35
19094: PUSH
19095: LD_INT 44
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 35
19104: PUSH
19105: LD_INT 46
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: PPUSH
19128: CALL_OW 69
19132: PUSH
19133: FOR_IN
19134: IFFALSE 19173
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19136: LD_VAR 0 1
19140: PPUSH
19141: LD_INT 43
19143: PUSH
19144: LD_INT 44
19146: PUSH
19147: LD_INT 46
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 1
19157: PPUSH
19158: LD_INT 3
19160: PPUSH
19161: CALL_OW 12
19165: ARRAY
19166: PPUSH
19167: CALL_OW 431
19171: GO 19133
19173: POP
19174: POP
// end ;
19175: PPOPN 1
19177: END
// every 0 0$1 trigger SikorskyAI = 1 do
19178: LD_EXP 19
19182: PUSH
19183: LD_INT 1
19185: EQUAL
19186: IFFALSE 19224
19188: GO 19190
19190: DISABLE
// begin enable ;
19191: ENABLE
// RepairVehicle ( 4 , SikorskyRepairArea , 93 , 93 , 3 ) ;
19192: LD_INT 4
19194: PPUSH
19195: LD_INT 10
19197: PPUSH
19198: LD_INT 93
19200: PPUSH
19201: LD_INT 93
19203: PPUSH
19204: LD_INT 3
19206: PPUSH
19207: CALL 8620 0 5
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
19211: LD_INT 4
19213: PPUSH
19214: LD_INT 11
19216: PPUSH
19217: LD_INT 3
19219: PPUSH
19220: CALL 14001 0 3
// end ;
19224: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
19225: LD_EXP 26
19229: PUSH
19230: LD_INT 1
19232: EQUAL
19233: PUSH
19234: LD_EXP 29
19238: PPUSH
19239: CALL_OW 302
19243: AND
19244: PUSH
19245: LD_EXP 29
19249: PPUSH
19250: CALL_OW 255
19254: PUSH
19255: LD_INT 3
19257: EQUAL
19258: AND
19259: PUSH
19260: LD_INT 22
19262: PUSH
19263: LD_INT 3
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 21
19272: PUSH
19273: LD_INT 2
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: LD_INT 33
19282: PUSH
19283: LD_INT 3
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: PPUSH
19295: CALL_OW 69
19299: PUSH
19300: LD_INT 0
19302: EQUAL
19303: AND
19304: IFFALSE 19483
19306: GO 19308
19308: DISABLE
// begin enable ;
19309: ENABLE
// if Difficulty = 1 then
19310: LD_OWVAR 67
19314: PUSH
19315: LD_INT 1
19317: EQUAL
19318: IFFALSE 19369
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 46 ] , 1 , 3 , 24 ) ;
19320: LD_INT 3
19322: PPUSH
19323: LD_EXP 29
19327: PPUSH
19328: LD_INT 5
19330: PPUSH
19331: LD_INT 8
19333: PPUSH
19334: CALL_OW 12
19338: PPUSH
19339: LD_INT 1
19341: PPUSH
19342: LD_INT 43
19344: PUSH
19345: LD_INT 44
19347: PUSH
19348: LD_INT 46
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: LIST
19355: PPUSH
19356: LD_INT 1
19358: PPUSH
19359: LD_INT 3
19361: PPUSH
19362: LD_INT 24
19364: PPUSH
19365: CALL 9455 0 8
// if Difficulty = 2 then
19369: LD_OWVAR 67
19373: PUSH
19374: LD_INT 2
19376: EQUAL
19377: IFFALSE 19428
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
19379: LD_INT 3
19381: PPUSH
19382: LD_EXP 29
19386: PPUSH
19387: LD_INT 6
19389: PPUSH
19390: LD_INT 8
19392: PPUSH
19393: CALL_OW 12
19397: PPUSH
19398: LD_INT 1
19400: PPUSH
19401: LD_INT 44
19403: PUSH
19404: LD_INT 44
19406: PUSH
19407: LD_INT 46
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: LIST
19414: PPUSH
19415: LD_INT 1
19417: PPUSH
19418: LD_INT 3
19420: PPUSH
19421: LD_INT 24
19423: PPUSH
19424: CALL 9455 0 8
// if Difficulty = 3 then
19428: LD_OWVAR 67
19432: PUSH
19433: LD_INT 3
19435: EQUAL
19436: IFFALSE 19483
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 46 ] , 1 , 3 , 24 ) ;
19438: LD_INT 3
19440: PPUSH
19441: LD_EXP 29
19445: PPUSH
19446: LD_INT 7
19448: PPUSH
19449: LD_INT 8
19451: PPUSH
19452: CALL_OW 12
19456: PPUSH
19457: LD_INT 1
19459: PPUSH
19460: LD_INT 44
19462: PUSH
19463: LD_INT 46
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PPUSH
19470: LD_INT 1
19472: PPUSH
19473: LD_INT 3
19475: PPUSH
19476: LD_INT 24
19478: PPUSH
19479: CALL 9455 0 8
// end ;
19483: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
19484: LD_EXP 37
19488: PUSH
19489: LD_INT 1
19491: EQUAL
19492: IFFALSE 19574
19494: GO 19496
19496: DISABLE
19497: LD_INT 0
19499: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
19500: LD_ADDR_VAR 0 1
19504: PUSH
19505: LD_INT 22
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 21
19517: PUSH
19518: LD_INT 1
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 3
19527: PUSH
19528: LD_INT 24
19530: PUSH
19531: LD_INT 650
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: LIST
19546: PPUSH
19547: CALL_OW 69
19551: PUSH
19552: FOR_IN
19553: IFFALSE 19572
// ComMoveXY ( i , 51 , 12 ) ;
19555: LD_VAR 0 1
19559: PPUSH
19560: LD_INT 51
19562: PPUSH
19563: LD_INT 12
19565: PPUSH
19566: CALL_OW 111
19570: GO 19552
19572: POP
19573: POP
// end ; end_of_file
19574: PPOPN 1
19576: END
// every 2 2$1 trigger firstAttack = 1 do
19577: LD_EXP 32
19581: PUSH
19582: LD_INT 1
19584: EQUAL
19585: IFFALSE 19691
19587: GO 19589
19589: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19590: LD_INT 6
19592: PPUSH
19593: LD_INT 3
19595: PPUSH
19596: LD_INT 5
19598: PPUSH
19599: LD_INT 6
19601: PPUSH
19602: CALL_OW 12
19606: PUSH
19607: LD_INT 5
19609: PPUSH
19610: LD_INT 6
19612: PPUSH
19613: CALL_OW 12
19617: PUSH
19618: LD_INT 5
19620: PPUSH
19621: LD_INT 6
19623: PPUSH
19624: CALL_OW 12
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: LIST
19633: PUSH
19634: LD_OWVAR 67
19638: ARRAY
19639: PPUSH
19640: LD_INT 0
19642: PPUSH
19643: LD_INT 0
19645: PPUSH
19646: LD_INT 0
19648: PPUSH
19649: LD_INT 0
19651: PPUSH
19652: LD_EXP 24
19656: PPUSH
19657: LD_EXP 25
19661: PPUSH
19662: CALL_OW 12
19666: PPUSH
19667: LD_INT 16
19669: PPUSH
19670: LD_INT 7
19672: PPUSH
19673: LD_INT 1
19675: PPUSH
19676: LD_INT 1
19678: PPUSH
19679: LD_INT 3
19681: PPUSH
19682: CALL_OW 12
19686: PPUSH
19687: CALL 10019 0 12
19691: END
// every 2 2$1 trigger firstAttack = 1 do
19692: LD_EXP 32
19696: PUSH
19697: LD_INT 1
19699: EQUAL
19700: IFFALSE 19800
19702: GO 19704
19704: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
19705: LD_INT 16
19707: PPUSH
19708: LD_INT 6
19710: PPUSH
19711: LD_INT 5
19713: PPUSH
19714: LD_INT 8
19716: PPUSH
19717: CALL_OW 12
19721: PUSH
19722: LD_INT 6
19724: PPUSH
19725: LD_INT 9
19727: PPUSH
19728: CALL_OW 12
19732: PUSH
19733: LD_INT 7
19735: PPUSH
19736: LD_INT 9
19738: PPUSH
19739: CALL_OW 12
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: LIST
19748: PUSH
19749: LD_OWVAR 67
19753: ARRAY
19754: PPUSH
19755: LD_EXP 24
19759: PPUSH
19760: LD_EXP 25
19764: PPUSH
19765: CALL_OW 12
19769: PPUSH
19770: LD_INT 3
19772: PPUSH
19773: LD_INT 1
19775: PPUSH
19776: LD_INT 3
19778: PPUSH
19779: LD_INT 44
19781: PUSH
19782: LD_INT 46
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PPUSH
19789: EMPTY
19790: PPUSH
19791: EMPTY
19792: PPUSH
19793: LD_INT 1
19795: PPUSH
19796: CALL 12312 0 11
19800: END
// every 3 3$1 trigger firstAttack = 1 do
19801: LD_EXP 32
19805: PUSH
19806: LD_INT 1
19808: EQUAL
19809: IFFALSE 19915
19811: GO 19813
19813: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
19814: LD_INT 6
19816: PPUSH
19817: LD_INT 3
19819: PPUSH
19820: LD_INT 5
19822: PPUSH
19823: LD_INT 6
19825: PPUSH
19826: CALL_OW 12
19830: PUSH
19831: LD_INT 5
19833: PPUSH
19834: LD_INT 6
19836: PPUSH
19837: CALL_OW 12
19841: PUSH
19842: LD_INT 5
19844: PPUSH
19845: LD_INT 6
19847: PPUSH
19848: CALL_OW 12
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: LIST
19857: PUSH
19858: LD_OWVAR 67
19862: ARRAY
19863: PPUSH
19864: LD_INT 0
19866: PPUSH
19867: LD_INT 0
19869: PPUSH
19870: LD_INT 0
19872: PPUSH
19873: LD_INT 0
19875: PPUSH
19876: LD_EXP 24
19880: PPUSH
19881: LD_EXP 25
19885: PPUSH
19886: CALL_OW 12
19890: PPUSH
19891: LD_INT 16
19893: PPUSH
19894: LD_INT 7
19896: PPUSH
19897: LD_INT 1
19899: PPUSH
19900: LD_INT 1
19902: PPUSH
19903: LD_INT 3
19905: PPUSH
19906: CALL_OW 12
19910: PPUSH
19911: CALL 10019 0 12
19915: END
// every 3 3$1 trigger firstAttack = 1 do
19916: LD_EXP 32
19920: PUSH
19921: LD_INT 1
19923: EQUAL
19924: IFFALSE 20032
19926: GO 19928
19928: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 42 , 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
19929: LD_INT 16
19931: PPUSH
19932: LD_INT 6
19934: PPUSH
19935: LD_INT 5
19937: PPUSH
19938: LD_INT 8
19940: PPUSH
19941: CALL_OW 12
19945: PUSH
19946: LD_INT 6
19948: PPUSH
19949: LD_INT 9
19951: PPUSH
19952: CALL_OW 12
19956: PUSH
19957: LD_INT 7
19959: PPUSH
19960: LD_INT 9
19962: PPUSH
19963: CALL_OW 12
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: PUSH
19973: LD_OWVAR 67
19977: ARRAY
19978: PPUSH
19979: LD_EXP 24
19983: PPUSH
19984: LD_EXP 25
19988: PPUSH
19989: CALL_OW 12
19993: PPUSH
19994: LD_INT 3
19996: PPUSH
19997: LD_INT 1
19999: PPUSH
20000: LD_INT 3
20002: PPUSH
20003: LD_INT 42
20005: PUSH
20006: LD_INT 43
20008: PUSH
20009: LD_INT 44
20011: PUSH
20012: LD_INT 46
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: PPUSH
20021: EMPTY
20022: PPUSH
20023: EMPTY
20024: PPUSH
20025: LD_INT 1
20027: PPUSH
20028: CALL 12312 0 11
20032: END
// every 7 7$1 trigger firstAttack = 1 and JMMArrive = 0 do
20033: LD_EXP 32
20037: PUSH
20038: LD_INT 1
20040: EQUAL
20041: PUSH
20042: LD_EXP 38
20046: PUSH
20047: LD_INT 0
20049: EQUAL
20050: AND
20051: IFFALSE 20157
20053: GO 20055
20055: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20056: LD_INT 6
20058: PPUSH
20059: LD_INT 3
20061: PPUSH
20062: LD_INT 5
20064: PPUSH
20065: LD_INT 6
20067: PPUSH
20068: CALL_OW 12
20072: PUSH
20073: LD_INT 5
20075: PPUSH
20076: LD_INT 6
20078: PPUSH
20079: CALL_OW 12
20083: PUSH
20084: LD_INT 5
20086: PPUSH
20087: LD_INT 6
20089: PPUSH
20090: CALL_OW 12
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: LIST
20099: PUSH
20100: LD_OWVAR 67
20104: ARRAY
20105: PPUSH
20106: LD_INT 0
20108: PPUSH
20109: LD_INT 0
20111: PPUSH
20112: LD_INT 0
20114: PPUSH
20115: LD_INT 0
20117: PPUSH
20118: LD_EXP 24
20122: PPUSH
20123: LD_EXP 25
20127: PPUSH
20128: CALL_OW 12
20132: PPUSH
20133: LD_INT 16
20135: PPUSH
20136: LD_INT 7
20138: PPUSH
20139: LD_INT 1
20141: PPUSH
20142: LD_INT 1
20144: PPUSH
20145: LD_INT 3
20147: PPUSH
20148: CALL_OW 12
20152: PPUSH
20153: CALL 10019 0 12
20157: END
// every 7 7$1 trigger firstAttack = 1 and JMMArrive = 0 do
20158: LD_EXP 32
20162: PUSH
20163: LD_INT 1
20165: EQUAL
20166: PUSH
20167: LD_EXP 38
20171: PUSH
20172: LD_INT 0
20174: EQUAL
20175: AND
20176: IFFALSE 20280
20178: GO 20180
20180: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
20181: LD_INT 16
20183: PPUSH
20184: LD_INT 6
20186: PPUSH
20187: LD_INT 5
20189: PPUSH
20190: LD_INT 8
20192: PPUSH
20193: CALL_OW 12
20197: PUSH
20198: LD_INT 6
20200: PPUSH
20201: LD_INT 9
20203: PPUSH
20204: CALL_OW 12
20208: PUSH
20209: LD_INT 7
20211: PPUSH
20212: LD_INT 9
20214: PPUSH
20215: CALL_OW 12
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: LIST
20224: PUSH
20225: LD_OWVAR 67
20229: ARRAY
20230: PPUSH
20231: LD_EXP 24
20235: PPUSH
20236: LD_EXP 25
20240: PPUSH
20241: CALL_OW 12
20245: PPUSH
20246: LD_INT 3
20248: PPUSH
20249: LD_INT 1
20251: PPUSH
20252: LD_INT 3
20254: PPUSH
20255: LD_INT 43
20257: PUSH
20258: LD_INT 44
20260: PUSH
20261: LD_INT 46
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: LIST
20268: PPUSH
20269: EMPTY
20270: PPUSH
20271: EMPTY
20272: PPUSH
20273: LD_INT 1
20275: PPUSH
20276: CALL 12312 0 11
20280: END
// every 10 10$1 trigger firstAttack = 1 and JMMArrive = 0 do
20281: LD_EXP 32
20285: PUSH
20286: LD_INT 1
20288: EQUAL
20289: PUSH
20290: LD_EXP 38
20294: PUSH
20295: LD_INT 0
20297: EQUAL
20298: AND
20299: IFFALSE 20399
20301: GO 20303
20303: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20304: LD_INT 16
20306: PPUSH
20307: LD_INT 6
20309: PPUSH
20310: LD_INT 5
20312: PPUSH
20313: LD_INT 8
20315: PPUSH
20316: CALL_OW 12
20320: PUSH
20321: LD_INT 6
20323: PPUSH
20324: LD_INT 9
20326: PPUSH
20327: CALL_OW 12
20331: PUSH
20332: LD_INT 7
20334: PPUSH
20335: LD_INT 9
20337: PPUSH
20338: CALL_OW 12
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: LIST
20347: PUSH
20348: LD_OWVAR 67
20352: ARRAY
20353: PPUSH
20354: LD_EXP 24
20358: PPUSH
20359: LD_EXP 25
20363: PPUSH
20364: CALL_OW 12
20368: PPUSH
20369: LD_INT 3
20371: PPUSH
20372: LD_INT 1
20374: PPUSH
20375: LD_INT 3
20377: PPUSH
20378: LD_INT 44
20380: PUSH
20381: LD_INT 46
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PPUSH
20388: EMPTY
20389: PPUSH
20390: EMPTY
20391: PPUSH
20392: LD_INT 1
20394: PPUSH
20395: CALL 12312 0 11
20399: END
// every 1 1$1 trigger secondAttack = 1 do
20400: LD_EXP 33
20404: PUSH
20405: LD_INT 1
20407: EQUAL
20408: IFFALSE 20514
20410: GO 20412
20412: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 7 ) , rand ( 6 , 7 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20413: LD_INT 6
20415: PPUSH
20416: LD_INT 3
20418: PPUSH
20419: LD_INT 4
20421: PPUSH
20422: LD_INT 7
20424: PPUSH
20425: CALL_OW 12
20429: PUSH
20430: LD_INT 6
20432: PPUSH
20433: LD_INT 7
20435: PPUSH
20436: CALL_OW 12
20440: PUSH
20441: LD_INT 6
20443: PPUSH
20444: LD_INT 10
20446: PPUSH
20447: CALL_OW 12
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: PUSH
20457: LD_OWVAR 67
20461: ARRAY
20462: PPUSH
20463: LD_INT 0
20465: PPUSH
20466: LD_INT 0
20468: PPUSH
20469: LD_INT 0
20471: PPUSH
20472: LD_INT 0
20474: PPUSH
20475: LD_EXP 24
20479: PPUSH
20480: LD_EXP 25
20484: PPUSH
20485: CALL_OW 12
20489: PPUSH
20490: LD_INT 16
20492: PPUSH
20493: LD_INT 7
20495: PPUSH
20496: LD_INT 1
20498: PPUSH
20499: LD_INT 1
20501: PPUSH
20502: LD_INT 3
20504: PPUSH
20505: CALL_OW 12
20509: PPUSH
20510: CALL 10019 0 12
20514: END
// every 1 1$1 trigger secondAttack = 1 do
20515: LD_EXP 33
20519: PUSH
20520: LD_INT 1
20522: EQUAL
20523: IFFALSE 20627
20525: GO 20527
20527: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
20528: LD_INT 16
20530: PPUSH
20531: LD_INT 6
20533: PPUSH
20534: LD_INT 5
20536: PPUSH
20537: LD_INT 8
20539: PPUSH
20540: CALL_OW 12
20544: PUSH
20545: LD_INT 6
20547: PPUSH
20548: LD_INT 9
20550: PPUSH
20551: CALL_OW 12
20555: PUSH
20556: LD_INT 7
20558: PPUSH
20559: LD_INT 9
20561: PPUSH
20562: CALL_OW 12
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: LIST
20571: PUSH
20572: LD_OWVAR 67
20576: ARRAY
20577: PPUSH
20578: LD_EXP 24
20582: PPUSH
20583: LD_EXP 25
20587: PPUSH
20588: CALL_OW 12
20592: PPUSH
20593: LD_INT 3
20595: PPUSH
20596: LD_INT 1
20598: PPUSH
20599: LD_INT 3
20601: PPUSH
20602: LD_INT 43
20604: PUSH
20605: LD_INT 44
20607: PUSH
20608: LD_INT 46
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: LIST
20615: PPUSH
20616: EMPTY
20617: PPUSH
20618: EMPTY
20619: PPUSH
20620: LD_INT 1
20622: PPUSH
20623: CALL 12312 0 11
20627: END
// every 20 20$0 trigger SikorskyArrive = 0 do
20628: LD_EXP 17
20632: PUSH
20633: LD_INT 0
20635: EQUAL
20636: IFFALSE 20742
20638: GO 20640
20640: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20641: LD_INT 6
20643: PPUSH
20644: LD_INT 3
20646: PPUSH
20647: LD_INT 8
20649: PPUSH
20650: LD_INT 9
20652: PPUSH
20653: CALL_OW 12
20657: PUSH
20658: LD_INT 7
20660: PPUSH
20661: LD_INT 10
20663: PPUSH
20664: CALL_OW 12
20668: PUSH
20669: LD_INT 8
20671: PPUSH
20672: LD_INT 10
20674: PPUSH
20675: CALL_OW 12
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: LIST
20684: PUSH
20685: LD_OWVAR 67
20689: ARRAY
20690: PPUSH
20691: LD_INT 0
20693: PPUSH
20694: LD_INT 0
20696: PPUSH
20697: LD_INT 0
20699: PPUSH
20700: LD_INT 0
20702: PPUSH
20703: LD_EXP 24
20707: PPUSH
20708: LD_EXP 25
20712: PPUSH
20713: CALL_OW 12
20717: PPUSH
20718: LD_INT 16
20720: PPUSH
20721: LD_INT 7
20723: PPUSH
20724: LD_INT 1
20726: PPUSH
20727: LD_INT 1
20729: PPUSH
20730: LD_INT 3
20732: PPUSH
20733: CALL_OW 12
20737: PPUSH
20738: CALL 10019 0 12
20742: END
// every 20 20$0 trigger SikorskyArrive = 0 do
20743: LD_EXP 17
20747: PUSH
20748: LD_INT 0
20750: EQUAL
20751: IFFALSE 20851
20753: GO 20755
20755: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20756: LD_INT 16
20758: PPUSH
20759: LD_INT 6
20761: PPUSH
20762: LD_INT 5
20764: PPUSH
20765: LD_INT 8
20767: PPUSH
20768: CALL_OW 12
20772: PUSH
20773: LD_INT 6
20775: PPUSH
20776: LD_INT 9
20778: PPUSH
20779: CALL_OW 12
20783: PUSH
20784: LD_INT 7
20786: PPUSH
20787: LD_INT 9
20789: PPUSH
20790: CALL_OW 12
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: LIST
20799: PUSH
20800: LD_OWVAR 67
20804: ARRAY
20805: PPUSH
20806: LD_EXP 24
20810: PPUSH
20811: LD_EXP 25
20815: PPUSH
20816: CALL_OW 12
20820: PPUSH
20821: LD_INT 3
20823: PPUSH
20824: LD_INT 1
20826: PPUSH
20827: LD_INT 3
20829: PPUSH
20830: LD_INT 44
20832: PUSH
20833: LD_INT 46
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PPUSH
20840: EMPTY
20841: PPUSH
20842: EMPTY
20843: PPUSH
20844: LD_INT 1
20846: PPUSH
20847: CALL 12312 0 11
20851: END
// every 25 25$0 trigger SikorskyArrive = 0 do
20852: LD_EXP 17
20856: PUSH
20857: LD_INT 0
20859: EQUAL
20860: IFFALSE 20966
20862: GO 20864
20864: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
20865: LD_INT 6
20867: PPUSH
20868: LD_INT 3
20870: PPUSH
20871: LD_INT 8
20873: PPUSH
20874: LD_INT 9
20876: PPUSH
20877: CALL_OW 12
20881: PUSH
20882: LD_INT 7
20884: PPUSH
20885: LD_INT 10
20887: PPUSH
20888: CALL_OW 12
20892: PUSH
20893: LD_INT 8
20895: PPUSH
20896: LD_INT 10
20898: PPUSH
20899: CALL_OW 12
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: LIST
20908: PUSH
20909: LD_OWVAR 67
20913: ARRAY
20914: PPUSH
20915: LD_INT 0
20917: PPUSH
20918: LD_INT 0
20920: PPUSH
20921: LD_INT 0
20923: PPUSH
20924: LD_INT 0
20926: PPUSH
20927: LD_EXP 24
20931: PPUSH
20932: LD_EXP 25
20936: PPUSH
20937: CALL_OW 12
20941: PPUSH
20942: LD_INT 16
20944: PPUSH
20945: LD_INT 7
20947: PPUSH
20948: LD_INT 1
20950: PPUSH
20951: LD_INT 1
20953: PPUSH
20954: LD_INT 3
20956: PPUSH
20957: CALL_OW 12
20961: PPUSH
20962: CALL 10019 0 12
20966: END
// every 25 25$0 trigger SikorskyArrive = 0 do
20967: LD_EXP 17
20971: PUSH
20972: LD_INT 0
20974: EQUAL
20975: IFFALSE 21075
20977: GO 20979
20979: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
20980: LD_INT 16
20982: PPUSH
20983: LD_INT 6
20985: PPUSH
20986: LD_INT 5
20988: PPUSH
20989: LD_INT 8
20991: PPUSH
20992: CALL_OW 12
20996: PUSH
20997: LD_INT 6
20999: PPUSH
21000: LD_INT 9
21002: PPUSH
21003: CALL_OW 12
21007: PUSH
21008: LD_INT 7
21010: PPUSH
21011: LD_INT 9
21013: PPUSH
21014: CALL_OW 12
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: LIST
21023: PUSH
21024: LD_OWVAR 67
21028: ARRAY
21029: PPUSH
21030: LD_EXP 24
21034: PPUSH
21035: LD_EXP 25
21039: PPUSH
21040: CALL_OW 12
21044: PPUSH
21045: LD_INT 3
21047: PPUSH
21048: LD_INT 1
21050: PPUSH
21051: LD_INT 3
21053: PPUSH
21054: LD_INT 44
21056: PUSH
21057: LD_INT 46
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PPUSH
21064: EMPTY
21065: PPUSH
21066: EMPTY
21067: PPUSH
21068: LD_INT 1
21070: PPUSH
21071: CALL 12312 0 11
21075: END
// every 35 35$0 trigger SikorskyArrive = 0 do
21076: LD_EXP 17
21080: PUSH
21081: LD_INT 0
21083: EQUAL
21084: IFFALSE 21190
21086: GO 21088
21088: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 8 , 9 ) , rand ( 7 , 10 ) , rand ( 8 , 10 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
21089: LD_INT 6
21091: PPUSH
21092: LD_INT 3
21094: PPUSH
21095: LD_INT 8
21097: PPUSH
21098: LD_INT 9
21100: PPUSH
21101: CALL_OW 12
21105: PUSH
21106: LD_INT 7
21108: PPUSH
21109: LD_INT 10
21111: PPUSH
21112: CALL_OW 12
21116: PUSH
21117: LD_INT 8
21119: PPUSH
21120: LD_INT 10
21122: PPUSH
21123: CALL_OW 12
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: LIST
21132: PUSH
21133: LD_OWVAR 67
21137: ARRAY
21138: PPUSH
21139: LD_INT 0
21141: PPUSH
21142: LD_INT 0
21144: PPUSH
21145: LD_INT 0
21147: PPUSH
21148: LD_INT 0
21150: PPUSH
21151: LD_EXP 24
21155: PPUSH
21156: LD_EXP 25
21160: PPUSH
21161: CALL_OW 12
21165: PPUSH
21166: LD_INT 16
21168: PPUSH
21169: LD_INT 7
21171: PPUSH
21172: LD_INT 1
21174: PPUSH
21175: LD_INT 1
21177: PPUSH
21178: LD_INT 3
21180: PPUSH
21181: CALL_OW 12
21185: PPUSH
21186: CALL 10019 0 12
21190: END
// every 35 35$0 trigger SikorskyArrive = 0 do
21191: LD_EXP 17
21195: PUSH
21196: LD_INT 0
21198: EQUAL
21199: IFFALSE 21299
21201: GO 21203
21203: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
21204: LD_INT 16
21206: PPUSH
21207: LD_INT 6
21209: PPUSH
21210: LD_INT 5
21212: PPUSH
21213: LD_INT 8
21215: PPUSH
21216: CALL_OW 12
21220: PUSH
21221: LD_INT 6
21223: PPUSH
21224: LD_INT 9
21226: PPUSH
21227: CALL_OW 12
21231: PUSH
21232: LD_INT 7
21234: PPUSH
21235: LD_INT 9
21237: PPUSH
21238: CALL_OW 12
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: LIST
21247: PUSH
21248: LD_OWVAR 67
21252: ARRAY
21253: PPUSH
21254: LD_EXP 24
21258: PPUSH
21259: LD_EXP 25
21263: PPUSH
21264: CALL_OW 12
21268: PPUSH
21269: LD_INT 3
21271: PPUSH
21272: LD_INT 1
21274: PPUSH
21275: LD_INT 3
21277: PPUSH
21278: LD_INT 44
21280: PUSH
21281: LD_INT 46
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PPUSH
21288: EMPTY
21289: PPUSH
21290: EMPTY
21291: PPUSH
21292: LD_INT 1
21294: PPUSH
21295: CALL 12312 0 11
21299: END
// every 0 0$1 trigger timerStatus = 1 do
21300: LD_EXP 34
21304: PUSH
21305: LD_INT 1
21307: EQUAL
21308: IFFALSE 21345
21310: GO 21312
21312: DISABLE
// begin enable ;
21313: ENABLE
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
21314: LD_ADDR_OWVAR 47
21318: PUSH
21319: LD_STRING #Am08-1
21321: PUSH
21322: LD_EXP 18
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
21331: LD_ADDR_EXP 18
21335: PUSH
21336: LD_EXP 18
21340: PUSH
21341: LD_INT 35
21343: MINUS
21344: ST_TO_ADDR
// end ; end_of_file
21345: END
// every 1 1$0 do
21346: GO 21348
21348: DISABLE
// begin if supply <= 13 and supply > 7 then
21349: LD_EXP 39
21353: PUSH
21354: LD_INT 13
21356: LESSEQUAL
21357: PUSH
21358: LD_EXP 39
21362: PUSH
21363: LD_INT 7
21365: GREATER
21366: AND
21367: IFFALSE 21390
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
21369: LD_INT 3
21371: PPUSH
21372: LD_INT 5
21374: PPUSH
21375: CALL_OW 12
21379: PPUSH
21380: LD_INT 5
21382: PPUSH
21383: LD_INT 1
21385: PPUSH
21386: CALL_OW 55
// if supply <= 7 and supply > 4 then
21390: LD_EXP 39
21394: PUSH
21395: LD_INT 7
21397: LESSEQUAL
21398: PUSH
21399: LD_EXP 39
21403: PUSH
21404: LD_INT 4
21406: GREATER
21407: AND
21408: IFFALSE 21431
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
21410: LD_INT 3
21412: PPUSH
21413: LD_INT 5
21415: PPUSH
21416: CALL_OW 12
21420: PPUSH
21421: LD_INT 20
21423: PPUSH
21424: LD_INT 1
21426: PPUSH
21427: CALL_OW 55
// if supply <= 4 and supply > 0 then
21431: LD_EXP 39
21435: PUSH
21436: LD_INT 4
21438: LESSEQUAL
21439: PUSH
21440: LD_EXP 39
21444: PUSH
21445: LD_INT 0
21447: GREATER
21448: AND
21449: IFFALSE 21472
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
21451: LD_INT 3
21453: PPUSH
21454: LD_INT 5
21456: PPUSH
21457: CALL_OW 12
21461: PPUSH
21462: LD_INT 21
21464: PPUSH
21465: LD_INT 1
21467: PPUSH
21468: CALL_OW 55
// if supply > 0 then
21472: LD_EXP 39
21476: PUSH
21477: LD_INT 0
21479: GREATER
21480: IFFALSE 21497
// begin supply = supply - 1 ;
21482: LD_ADDR_EXP 39
21486: PUSH
21487: LD_EXP 39
21491: PUSH
21492: LD_INT 1
21494: MINUS
21495: ST_TO_ADDR
// enable ;
21496: ENABLE
// end ; end ; end_of_file
21497: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
21498: LD_EXP 38
21502: PUSH
21503: LD_INT 1
21505: EQUAL
21506: PUSH
21507: LD_EXP 1
21511: PPUSH
21512: CALL_OW 301
21516: AND
21517: IFFALSE 21529
21519: GO 21521
21521: DISABLE
// YouLost ( JMM ) ;
21522: LD_STRING JMM
21524: PPUSH
21525: CALL_OW 104
21529: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
21530: LD_EXP 17
21534: PUSH
21535: LD_INT 1
21537: EQUAL
21538: PUSH
21539: LD_EXP 15
21543: PPUSH
21544: CALL_OW 301
21548: AND
21549: IFFALSE 21581
21551: GO 21553
21553: DISABLE
// begin DialogueOn ;
21554: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
21558: LD_EXP 22
21562: PPUSH
21563: LD_STRING D8a-Pow-1
21565: PPUSH
21566: CALL_OW 94
// DialogueOff ;
21570: CALL_OW 7
// YouLost ( Dismissed ) ;
21574: LD_STRING Dismissed
21576: PPUSH
21577: CALL_OW 104
// end ;
21581: END
// every 0 0$1 trigger IsDead ( amDepot ) do
21582: LD_EXP 36
21586: PPUSH
21587: CALL_OW 301
21591: IFFALSE 21603
21593: GO 21595
21595: DISABLE
// YouLost ( Destroyed ) ; end_of_file
21596: LD_STRING Destroyed
21598: PPUSH
21599: CALL_OW 104
21603: END
// every 0 0$1 trigger IsDead ( Borodin ) do var i ;
21604: LD_EXP 23
21608: PPUSH
21609: CALL_OW 301
21613: IFFALSE 21958
21615: GO 21617
21617: DISABLE
21618: LD_INT 0
21620: PPUSH
// begin russianAI = 0 ;
21621: LD_ADDR_EXP 26
21625: PUSH
21626: LD_INT 0
21628: ST_TO_ADDR
// escapeAvalaible = 1 ;
21629: LD_ADDR_EXP 35
21633: PUSH
21634: LD_INT 1
21636: ST_TO_ADDR
// InGameOn ;
21637: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
21641: LD_INT 3
21643: PPUSH
21644: LD_INT 1
21646: PPUSH
21647: LD_INT 1
21649: PPUSH
21650: LD_INT 0
21652: PPUSH
21653: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
21657: LD_INT 6
21659: PPUSH
21660: LD_INT 1
21662: PPUSH
21663: LD_INT 1
21665: PPUSH
21666: LD_INT 0
21668: PPUSH
21669: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
21673: LD_INT 3
21675: PPUSH
21676: LD_INT 1
21678: PPUSH
21679: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
21683: LD_INT 97
21685: PPUSH
21686: LD_INT 91
21688: PPUSH
21689: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
21693: LD_INT 22
21695: PUSH
21696: LD_INT 3
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 21
21705: PUSH
21706: LD_INT 1
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PPUSH
21717: CALL_OW 69
21721: PPUSH
21722: CALL_OW 121
// wait ( 0 0$01 ) ;
21726: LD_INT 35
21728: PPUSH
21729: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21733: LD_INT 22
21735: PUSH
21736: LD_INT 3
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 21
21745: PUSH
21746: LD_INT 1
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PPUSH
21757: CALL_OW 69
21761: PPUSH
21762: LD_INT 124
21764: PPUSH
21765: LD_INT 98
21767: PPUSH
21768: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
21772: LD_INT 22
21774: PUSH
21775: LD_INT 6
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 21
21784: PUSH
21785: LD_INT 1
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PPUSH
21796: CALL_OW 69
21800: PPUSH
21801: CALL_OW 121
// wait ( 0 0$01 ) ;
21805: LD_INT 35
21807: PPUSH
21808: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21812: LD_INT 22
21814: PUSH
21815: LD_INT 6
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 21
21824: PUSH
21825: LD_INT 1
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PPUSH
21836: CALL_OW 69
21840: PPUSH
21841: LD_INT 124
21843: PPUSH
21844: LD_INT 98
21846: PPUSH
21847: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21851: LD_INT 22
21853: PUSH
21854: LD_INT 1
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 21
21863: PUSH
21864: LD_INT 1
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PPUSH
21875: CALL_OW 69
21879: PPUSH
21880: LD_INT 124
21882: PPUSH
21883: LD_INT 98
21885: PPUSH
21886: CALL_OW 114
// wait ( 0 0$4 ) ;
21890: LD_INT 140
21892: PPUSH
21893: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
21897: LD_INT 124
21899: PPUSH
21900: LD_INT 98
21902: PPUSH
21903: CALL_OW 84
// if SikorskyStatus = 1 then
21907: LD_EXP 20
21911: PUSH
21912: LD_INT 1
21914: EQUAL
21915: IFFALSE 21929
// begin Say ( Sikorski , D9-Sik-1 ) ;
21917: LD_EXP 15
21921: PPUSH
21922: LD_STRING D9-Sik-1
21924: PPUSH
21925: CALL_OW 88
// end ; if SikorskyStatus = 2 then
21929: LD_EXP 20
21933: PUSH
21934: LD_INT 2
21936: EQUAL
21937: IFFALSE 21958
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
21939: LD_EXP 22
21943: PPUSH
21944: LD_STRING D8b-Pow-1
21946: PPUSH
21947: CALL_OW 94
// YouLost ( Dismissed ) ;
21951: LD_STRING Dismissed
21953: PPUSH
21954: CALL_OW 104
// end ; end ;
21958: PPOPN 1
21960: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
21961: LD_INT 23
21963: PUSH
21964: LD_INT 3
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 21
21973: PUSH
21974: LD_INT 1
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 24
21983: PUSH
21984: LD_INT 250
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: LIST
21995: PPUSH
21996: CALL_OW 69
22000: PUSH
22001: LD_INT 0
22003: EQUAL
22004: IFFALSE 22013
22006: GO 22008
22008: DISABLE
// FinishMission ;
22009: CALL 22014 0 0
22013: END
// export function FinishMission ; var tmp ; begin
22014: LD_INT 0
22016: PPUSH
22017: PPUSH
// AddMedal ( med1 , 1 ) ;
22018: LD_STRING med1
22020: PPUSH
22021: LD_INT 1
22023: PPUSH
22024: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
22028: LD_STRING med2
22030: PPUSH
22031: LD_INT 1
22033: PPUSH
22034: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
22038: LD_STRING perfect
22040: PPUSH
22041: LD_INT 1
22043: PPUSH
22044: CALL_OW 101
// GiveMedals ( Main ) ;
22048: LD_STRING Main
22050: PPUSH
22051: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22055: LD_INT 22
22057: PUSH
22058: LD_INT 1
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 23
22067: PUSH
22068: LD_INT 1
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 21
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 2
22087: PUSH
22088: LD_INT 25
22090: PUSH
22091: LD_INT 1
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 25
22100: PUSH
22101: LD_INT 2
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 25
22110: PUSH
22111: LD_INT 3
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 25
22120: PUSH
22121: LD_INT 4
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: PPUSH
22141: CALL_OW 69
22145: PPUSH
22146: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22150: LD_EXP 1
22154: PPUSH
22155: LD_EXP 41
22159: PUSH
22160: LD_STRING JMM
22162: STR
22163: PPUSH
22164: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22168: LD_EXP 2
22172: PPUSH
22173: LD_EXP 41
22177: PUSH
22178: LD_STRING Brown
22180: STR
22181: PPUSH
22182: CALL 6695 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22186: LD_EXP 3
22190: PPUSH
22191: LD_EXP 41
22195: PUSH
22196: LD_STRING Donaldson
22198: STR
22199: PPUSH
22200: CALL 6695 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22204: LD_EXP 4
22208: PPUSH
22209: LD_EXP 41
22213: PUSH
22214: LD_STRING Bobby
22216: STR
22217: PPUSH
22218: CALL 6695 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22222: LD_EXP 5
22226: PPUSH
22227: LD_EXP 41
22231: PUSH
22232: LD_STRING Cyrus
22234: STR
22235: PPUSH
22236: CALL 6695 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22240: LD_EXP 6
22244: PPUSH
22245: LD_EXP 41
22249: PUSH
22250: LD_STRING Lisa
22252: STR
22253: PPUSH
22254: CALL 6695 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22258: LD_EXP 7
22262: PPUSH
22263: LD_EXP 41
22267: PUSH
22268: LD_STRING Frank
22270: STR
22271: PPUSH
22272: CALL 6695 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
22276: LD_EXP 8
22280: PPUSH
22281: LD_EXP 41
22285: PUSH
22286: LD_STRING Gladstone
22288: STR
22289: PPUSH
22290: CALL 6695 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
22294: LD_EXP 9
22298: PPUSH
22299: LD_EXP 41
22303: PUSH
22304: LD_STRING Kikuchi
22306: STR
22307: PPUSH
22308: CALL 6695 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
22312: LD_EXP 13
22316: PPUSH
22317: LD_EXP 41
22321: PUSH
22322: LD_STRING Denis
22324: STR
22325: PPUSH
22326: CALL 6695 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
22330: LD_EXP 14
22334: PPUSH
22335: LD_EXP 41
22339: PUSH
22340: LD_STRING Joan
22342: STR
22343: PPUSH
22344: CALL 6695 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
22348: LD_EXP 12
22352: PPUSH
22353: LD_EXP 41
22357: PUSH
22358: LD_STRING Houten
22360: STR
22361: PPUSH
22362: CALL 6695 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten ] , 08_other_survivors ) ;
22366: LD_INT 50
22368: PUSH
22369: EMPTY
22370: LIST
22371: PUSH
22372: LD_INT 22
22374: PUSH
22375: LD_INT 1
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 21
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 2
22394: PUSH
22395: LD_INT 25
22397: PUSH
22398: LD_INT 1
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 25
22407: PUSH
22408: LD_INT 2
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 25
22417: PUSH
22418: LD_INT 3
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 25
22427: PUSH
22428: LD_INT 4
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: PPUSH
22448: CALL_OW 69
22452: PUSH
22453: LD_EXP 1
22457: PUSH
22458: LD_EXP 2
22462: PUSH
22463: LD_EXP 3
22467: PUSH
22468: LD_EXP 4
22472: PUSH
22473: LD_EXP 5
22477: PUSH
22478: LD_EXP 6
22482: PUSH
22483: LD_EXP 7
22487: PUSH
22488: LD_EXP 8
22492: PUSH
22493: LD_EXP 9
22497: PUSH
22498: LD_EXP 13
22502: PUSH
22503: LD_EXP 14
22507: PUSH
22508: LD_EXP 12
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: DIFF
22527: PPUSH
22528: LD_STRING 08_other_survivors
22530: PPUSH
22531: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
22535: LD_INT 23
22537: PPUSH
22538: CALL 22551 0 1
// YouWin ;
22542: CALL_OW 103
// end ;
22546: LD_VAR 0 1
22550: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
22551: LD_INT 0
22553: PPUSH
22554: PPUSH
22555: PPUSH
22556: PPUSH
// gammaBase = [ ] ;
22557: LD_ADDR_VAR 0 4
22561: PUSH
22562: EMPTY
22563: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
22564: LD_ADDR_VAR 0 5
22568: PUSH
22569: LD_VAR 0 1
22573: PPUSH
22574: LD_INT 22
22576: PUSH
22577: LD_INT 1
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 21
22586: PUSH
22587: LD_INT 3
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 50
22596: PUSH
22597: EMPTY
22598: LIST
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: LIST
22604: PPUSH
22605: CALL_OW 70
22609: ST_TO_ADDR
// for i in buildings do
22610: LD_ADDR_VAR 0 3
22614: PUSH
22615: LD_VAR 0 5
22619: PUSH
22620: FOR_IN
22621: IFFALSE 22958
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22623: LD_VAR 0 3
22627: PPUSH
22628: CALL_OW 266
22632: PUSH
22633: LD_INT 6
22635: PUSH
22636: LD_INT 7
22638: PUSH
22639: LD_INT 8
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: LIST
22646: IN
22647: IFFALSE 22761
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22649: LD_ADDR_VAR 0 4
22653: PUSH
22654: LD_VAR 0 4
22658: PUSH
22659: LD_VAR 0 3
22663: PPUSH
22664: CALL_OW 266
22668: PUSH
22669: LD_VAR 0 3
22673: PPUSH
22674: CALL_OW 250
22678: PUSH
22679: LD_VAR 0 3
22683: PPUSH
22684: CALL_OW 251
22688: PUSH
22689: LD_VAR 0 3
22693: PPUSH
22694: CALL_OW 254
22698: PUSH
22699: LD_VAR 0 3
22703: PPUSH
22704: CALL_OW 267
22708: PUSH
22709: LD_VAR 0 3
22713: PPUSH
22714: CALL_OW 248
22718: PUSH
22719: LD_VAR 0 3
22723: PPUSH
22724: LD_INT 1
22726: PPUSH
22727: CALL_OW 268
22731: PUSH
22732: LD_VAR 0 3
22736: PPUSH
22737: LD_INT 2
22739: PPUSH
22740: CALL_OW 268
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: PUSH
22755: EMPTY
22756: LIST
22757: ADD
22758: ST_TO_ADDR
22759: GO 22956
// if GetBType ( i ) in [ b_bunker ] then
22761: LD_VAR 0 3
22765: PPUSH
22766: CALL_OW 266
22770: PUSH
22771: LD_INT 32
22773: PUSH
22774: EMPTY
22775: LIST
22776: IN
22777: IFFALSE 22874
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22779: LD_ADDR_VAR 0 4
22783: PUSH
22784: LD_VAR 0 4
22788: PUSH
22789: LD_VAR 0 3
22793: PPUSH
22794: CALL_OW 266
22798: PUSH
22799: LD_VAR 0 3
22803: PPUSH
22804: CALL_OW 250
22808: PUSH
22809: LD_VAR 0 3
22813: PPUSH
22814: CALL_OW 251
22818: PUSH
22819: LD_VAR 0 3
22823: PPUSH
22824: CALL_OW 254
22828: PUSH
22829: LD_VAR 0 3
22833: PPUSH
22834: CALL_OW 267
22838: PUSH
22839: LD_VAR 0 3
22843: PPUSH
22844: CALL_OW 248
22848: PUSH
22849: LD_VAR 0 3
22853: PPUSH
22854: CALL_OW 269
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: PUSH
22868: EMPTY
22869: LIST
22870: ADD
22871: ST_TO_ADDR
22872: GO 22956
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
22874: LD_ADDR_VAR 0 4
22878: PUSH
22879: LD_VAR 0 4
22883: PUSH
22884: LD_VAR 0 3
22888: PPUSH
22889: CALL_OW 266
22893: PUSH
22894: LD_VAR 0 3
22898: PPUSH
22899: CALL_OW 250
22903: PUSH
22904: LD_VAR 0 3
22908: PPUSH
22909: CALL_OW 251
22913: PUSH
22914: LD_VAR 0 3
22918: PPUSH
22919: CALL_OW 254
22923: PUSH
22924: LD_VAR 0 3
22928: PPUSH
22929: CALL_OW 267
22933: PUSH
22934: LD_VAR 0 3
22938: PPUSH
22939: CALL_OW 248
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: PUSH
22952: EMPTY
22953: LIST
22954: ADD
22955: ST_TO_ADDR
// end ;
22956: GO 22620
22958: POP
22959: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
22960: LD_VAR 0 4
22964: PPUSH
22965: LD_STRING 08_GammaBase
22967: PPUSH
22968: CALL_OW 39
// end ;
22972: LD_VAR 0 2
22976: RET
