Export Function PrepareUnit(ident, exist_mode);
var unit;
begin

if exist_mode then
   unit := CreateCharacter(ident)
  else
   unit := NewCharacter(ident);

result := unit;
End;

Export function DialogRandom(characters, dialogMID, dialogFID);
var i, rnd;
begin
    rnd = rand(1, characters);  

    for i = 1 to characters do
    begin

       if i = rnd AND GetSex(characters[i]) = 1 then Say(characters[i], dialogMID);
       if i = rnd AND GetSex(characters[i]) = 2 then Say(characters[i], dialogFID);

    end;
  
end;

Export Function PrepareSolBun(skill, b);
var un, dir;
begin
        uc_side := GetSide(b);
        uc_nation := GetNation(b);

        PrepareHuman(false, 1, skill);

        dir := GetDir(b) - 3;

        if dir < 0 then
        dir := 6 + dir;

        un := CreateHuman;
        SetDir(un, dir);
        PlaceHumanInUnit(un, b);
End;

Export function RespawnInside(side, nation, build, skill, class, count);
var i,l, un;
begin

   for i = 1 to count do
   begin

      uc_side = side;
      uc_nation = nation;

      hc_gallery = '';
      hc_name = '';
      PrepareHuman(false, class, skill);

      un = CreateHuman;
      PlaceHumanInUnit(un,build);

   end;

END;

Export function PrepareDifficulty;
begin
    if Difficulty = 1 then
    begin
        RuSolMinLevel = 2;
        RuSolMaxLevel = 4;
    end;

    if Difficulty = 2 then
    begin
        RuSolMinLevel = 3;
        RuSolMaxLevel = 5;
        SetTech(51, 3, state_enabled);
        SetTech(57, 3, state_enabled);
        SetTech(57, 6, state_researched);
        SetTech(51, 6, state_researched);
    end;

    if Difficulty = 3 then
    begin
        RuSolMinLevel = 3;
        RuSolMaxLevel = 6;
        SetTech(57, 3, state_enabled);
        SetTech(51, 3, state_enabled);
        SetTech(52, 3, state_enabled);
        SetTech(57, 6, state_researched);
        SetTech(52, 6, state_researched);
    end;
end;


Export function BuildRussianBase;
var i, engineers, buildingsTab;
begin

    engineers = FilterAllUnits([[f_side, 3], [f_class, 2]]);
    //type, x, y, dir
    buildingsTab = [
        [b_armoury, 75, 79, 2],
        [b_armoury, 113, 94, 4],
        [b_oil_mine, 106, 97, 3],
        [b_oil_power, 93, 97, 5],
        [b_workshop, 100, 89, 3],
        [b_ext_gun, 96, 89, 1],
        [b_bunker, 78, 94, 1],
        [b_bunker, 95, 82, 3],
        [b_bunker, 104, 85, 2],
        [b_bunker, 81, 78, 2],
        [b_turret, 109, 90, 3],
        [b_turret, 88, 79, 3],
        [b_turret, 76, 87, 1],
        [b_oil_power, 96, 97, 5],
        [b_oil_power, 85, 84, 2], 
        [b_lab, 88, 95, 0],
        [b_ext_noncombat, 103, 89, 4],
        [b_ext_track, 97, 86, 2],
        [b_ext_computer, 100, 85, 3]
    ];

    for i := 1 to buildingsTab do
        AddComBuild(engineers, buildingsTab[i][1], buildingsTab[i][2], buildingsTab[i][3], buildingsTab[i][4]);

end;

Export function EnchancedSaveCharacters(charactersList, ident);
var i;
begin
    for i in charactersList do
    begin
         if IsOk(i) then SaveCharacters(i, ident);
    end;
end;

Export function ResAllTechs(side, lab, nation);
var i, tech, cout;
begin

  For i = 1 to 72 do
    If GetTech(i, side) = state_enabled and TechNationAvailable(i, nation) = true then AddComResearch(lab, i);

end;

Export function EnterBunkerOrBarrack(side, area);
var i,j, soldiers_list, insideSoldiers ,  turretList, temp, barrackList;
begin

    soldiers_list = FilterAllUnits([[f_side, side], [f_class, 1], [f_outside], [f_lives, 700], [f_not, [f_hastask]]]) diff [Borodin];
    insideSoldiers = FilterAllUnits([[f_side, side], [f_class, 1], [f_inside]]);
    turretList = FilterAllUnits([[f_side, side], [f_btype, b_bunker], [f_empty], [f_lives, 251]]);
    barrackList = FilterAllUnits([[f_side, side], [f_or, [f_btype, 4], [f_btype, 5]], [f_lives, 251]]);

    if barrackList > 0 then
    begin
        if turretList = 0 and FilterUnitsInArea(RussianBaseTerritory, [[f_side, 1], [f_type, unit_human]]) = 0 then
        begin
            for i in soldiers_list do ComEnterUnit(i, barrackList[rand(1, barrackList)]);
        end else
        begin
            for i in barrackList do 
            begin
            end;
        end;

    end;

end;

Export function BaseDefendersSpawn(side, areaSpawn, nation, skill, infantryCount, vehCount);
var i,j, un, target, veh;
begin

        for i = 1 to infantryCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_class = 1;
                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 1, rand(RuSolMinLevel, RuSolMaxLevel));

                un = CreateHuman;
                PlaceUnitArea(un, areaSpawn, false);
                defenders_list = defenders_list ^ un;
        end;

        for i = 1 to vehCount do
        begin
                uc_side = side;
                uc_nation = nation;

                vc_Chassis = 22;
                vc_engine = 1;
                vc_control = 1;
                vc_weapon = [43, 44][Rand(1, 2)];

                veh = CreateVehicle;
                PlaceUnitArea(veh,  areaSpawn, false);
                defenders_list = defenders_list ^ veh;

                hc_class = 3;
                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 3, rand(RuSolMinLevel, RuSolMaxLevel));

                un = CreateHuman;
                PlaceHumanInUnit(un, veh);
                defenders_list = defenders_list ^ un;

        end;
end;

Export function DefenseBase(targetSide, defenseArea);
var i, target;
begin
	If FilterUnitsInArea(defenseArea, [[f_side, targetSide]]) = 0 and defenders_list > 0 then
	begin

		for i in defenders_list do
		begin
				AddComMoveXY(i, 65, 68);
				SetFuel(i, 100);
		end;

	end;

	If FilterUnitsInArea(defenseArea, [[f_side, targetSide]]) > 0 and defenders_list > 0 then
	begin
		for i in defenders_list do
		begin
				target := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
				ComAttackUnit(i, target);
		end;

		if russianAI = 0 then
		begin
				for i in FilterAllUnits([[f_side, 3], [f_class, 1]]) diff Borodin  do
				begin
						target := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
						ComAttackUnit(i, target);
				end;
		end;

	end;
end;

Export function RepairBuilding(side, building);
var buildings_list, i,engineerOk_list, j;
begin

        engineerOk_list = FilterAllUnits([[f_side, side], [f_or, [f_class, 2], [f_class, 16]], [f_lives, 1000]]);
        buildings_list = FilterAllUnits([[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

        if buildings_list > 0 and engineerOk_list > 0 then
        begin

                for i in engineerOk_list do
                begin
                                for j in buildings_list do
                                begin

                                AddComExitBuilding(i);
                                wait(0$1);
                                AddComRepairBuilding(i, j);

                        end;
                end;
        end;

        if buildings_list = 0 then
        begin

                for i in engineerOK_list do
                begin
                        ComEnterUnit(i, building);
                end;

        end;
END;

Export function RebuildBuildings(side, destroyedBuildings);
var i;
begin
    if FilterAllUnits([[f_side, side], [f_class, 2]]) > 0 and FilterAllUnits([[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]) = 0 and destroyedBuildings > 0  then
    begin
        for i in FilterAllUnits([[f_side, side], [f_class, 2]]) do 
        begin
            AddComExitBuilding(i);
            AddComBuild(i, destroyedBuildings[1], destroyedBuildings[2], destroyedBuildings[3], destroyedBuildings[4]);
        end;
    end;
end;



Export function HealUnitInBase(side, healArea, baseArea, build);
var sci_list,  i, j, damageUnits;
begin

  sci_list = FilterAllUnits([[f_side, side], [f_class, 4]]);

  damageUnits = FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_human], [f_not, [f_lives, 750]]]);

    if damageUnits > 0 and sci_list > 0 then
    begin

      for i = 1 to damageUnits do ComMoveToArea(damageUnits[i], healArea);

      for i in sci_list do
      begin

        ComExitBuilding(i);

        for j in FilterUnitsInArea(healArea,[f_side, side]) do
        begin

        AddComHeal(i, j);
        wait(1$0);

        end;
      end;

    end else
    begin

    AddComEnterUnit(sci_list, build);

  end;

END;

Export function RepairVehicle(side, repairArea, repX, repY, targetSide);
var i,j, vehicleOK_list, damageVehicle_list, vehicleNeedRepair_list, vehicleDontNeedRepair_list, mechanicInside_list, mechanicOutside_list, target1, target2;
begin
    vehicleOK_list = FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_control, 1], [f_lives, 660], [f_not, [f_empty]], [f_not, [f_weapon, 53]]]);
    damageVehicle_list = FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_control, 1], [f_not, [f_lives, 660]]]);

    vehicleNeedRepair_list = FilterUnitsInArea(repairArea, [[f_side, side], [f_type, unit_vehicle], [f_control, 1], [f_not, [f_lives, 1000]]]);
    vehicleDontNeedRepair_list = FilterUnitsInArea(repairArea, [[f_side, side], [f_type, unit_vehicle], [f_control, 1], [f_lives, 1000], [f_empty], [f_not, [f_weapon, 53]]]);

    mechanicInside_list = [];
    mechanicOutside_list = FilterUnitsInArea(repairArea, [[f_side, side], [f_class, 3]]);
    
    if damageVehicle_list > 0 then
    begin
        for i in damageVehicle_list do 
        begin
            ComMoveXY(i, repX, repY);
        end;
    end;

    if vehicleNeedRepair_list > 0 then
    begin
        for i in vehicleNeedRepair_list  do
        begin
            mechanicInside_list = mechanicInside_list ^ UnitsInside(i);
            for j in mechanicInside_list do
            begin
                ComExitVehicle(i);
                wait(0$1);
                ComRepairVehicle(i, j);
            end;
        end;
    end;

    if vehicleDontNeedRepair_list > 0 then
    begin
        ComEnterUnit(mechanicOutside_list[1], vehicleDontNeedRepair_list[1]);
        SetFuel(vehicleDontNeedRepair_list[1], 100);
    end;

    if vehicleOK_list > 0 then
    begin
        for i in vehicleOK_list do
        begin
            target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
            target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

            If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
            begin
                ComAttackUnit(i, target1);
            end
            else
            begin
                ComAttackUnit(i, target2);
            end;
        end; 
    end;

    for i in not FilterUnitsInArea(repairArea, [[f_side, side], [f_class, 3]]) do ComMoveXY(i, repX, repY);

end;

Export function BuildingVehicleAndAttackEnemy(side, fabric, vehCount, targetSide, weaponTab, engine, control, chassis);
var i, j, lastIndex, weaponTabTemp, temp, target1, target2;
begin

     IF FilterAllUnits([[f_side, side], [f_type, unit_vehicle]]) <= vehCount then
        for i = 1 to vehCount do AddComConstruct(fabric, chassis, engine, control, weaponTab[Rand(1, weaponTab)]);


        repeat
                wait(0$1);;
        until FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 250]]) >= vehCount;

    IF FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 250]]) >= vehCount then
    begin

        repeat begin
        wait(0$1);

        if FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 651]]) > 0 then
        begin

                for i in FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 651]]) do
                begin

                target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                        If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                        begin
                                ComAttackUnit(i, target1);
                        end
                        else
                        begin
                                ComAttackUnit(i, target2);
                        end;
                end;

        end;

        end until FilterAllUnits([[f_side, side], [f_type, unit_vehicle]]) = 0 or FilterAllUnits([[f_side, targetSide]]) = 0;

    end;
END;


Export function RespawnAttackInfantry(side, nation, soldierCount, sniperCount, bazookCount, mortalCount, medicCount, skil, spawnArea, healArea, targetSide, strategy);
var i, j,  un, damageUnit_list, medic_list, soldiersOK_list, enemyUnits, und, target1, target2;
begin

        for i = 1 to medicCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 4, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;


       for i = 1 to soldierCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 1, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;

        for i = 1 to sniperCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 5, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;

        for i = 1 to bazookCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 9, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;

        for i = 1 to mortalCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 8, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;


        soldiersOK_list =  FilterAllUnits([[f_side, side], [f_or,[f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]]]);

        medic_list = FilterAllUnits([[f_side, side], [f_class, 4]]);

                for i in medic_list do ComMoveToArea(i, healArea);


        // strategy , 1 - flank and attack oil drilling mine,  2 - front attack, 3 - left flank
  
        if strategy = 1 then
        begin
                repeat
                        wait(0$3);
                        for i in soldiersOK_list do
                        begin
                                AddComAgressiveMove(i, 91, 63);
                                AddComAgressiveMove(i, 101, 53);
                                AddComAgressiveMove(i, 75, 23);
                                AddComAgressiveMove(i, 78, 8);
                        end;
                until FilterUnitsInArea(EnemyTargetArea1, [f_side, side]) > 2;

                repeat
                        wait(0$1);
                        damageUnit_list = FilterAllUnits([[f_side, side], [f_and, [f_not, [f_lives, 550]],[f_lives, 250]]]);
                        soldiersOK_list =  FilterAllUnits([[f_side, side], [f_or,[f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]], [f_lives, 1000]]);

                        IF medicCount > 0  then
                        begin
                                if damageUnit_list > 0 then
                                begin
                                        for i in damageUnit_list  do
                                        begin
                                                ComMoveToArea(i, healArea);
                                                for j in medic_list do 
                                                AddComHeal(j, i);
                                        end;
                                 end;
                        end;

                        for i in soldiersOK_list do
                        begin

                                target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                                If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                                begin
                                        ComAttackUnit(i, target1);
                                        end  else
                                        begin
                                        ComAttackUnit(i, target2);
                                end;

                        end;

                                        
                        for i in soldiersOK_list do
                        begin
                                target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                                If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                                begin
                                ComAttackUnit(i, target1);
                                end else
                                begin
                                ComAttackUnit(i, target2);
                        end;
               end; until soldiersOK_list = [];
        end;


      if strategy = 2 then
      begin
                repeat
                        wait(0$1);
                        for i in soldiersOK_list do
                        begin
                                AddComAgressiveMove(i, 91, 63);
                                AddComAgressiveMove(i, 75, 33);
                        end;
                until FilterUnitsInArea(EnemyTargetArea2, [f_side, side]) > 2;

                repeat
                        wait(0$3);
                        damageUnit_list = FilterAllUnits([[f_side, side], [f_and, [f_not, [f_lives, 550]],[f_lives, 250]]]);
                        soldiersOK_list =  FilterAllUnits([[f_side, side], [f_or,[f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]], [f_lives, 1000]]);

                        IF medicCount > 0  then
                        begin
                                if damageUnit_list > 0 then
                                begin
                                        for i in damageUnit_list  do
                                        begin
                                                ComMoveToArea(i, healArea);
                                                for j in medic_list do 
                                                AddComHeal(j, i);
                                        end;
                                 end;
                        end;

                        for i in soldiersOK_list do
                        begin

                                target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                                If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                                begin
                                        ComAttackUnit(i, target1);
                                        end  else
                                        begin
                                        ComAttackUnit(i, target2);
                                end;

                        end;

                                        
                        for i in soldiersOK_list do
                        begin
                                target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                                If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                                begin
                                ComAttackUnit(i, target1);
                                end else
                                begin
                                ComAttackUnit(i, target2);
                        end;
               end; until soldiersOK_list = [];
        end;

        if strategy = 3 then
        begin
                repeat
                        wait(0$3);
                        for i in soldiersOK_list do
                        begin
                                AddComAgressiveMove(i, 63, 71);
                                AddComAgressiveMove(i, 35, 44);
                                AddComAgressiveMove(i, 23, 18);
                                AddComAgressiveMove(i, 26, 12);
                        end;
                until FilterUnitsInArea(EnemyTargetArea3, [f_side, side]) > 2;

                repeat
                        wait(0$1);
                        damageUnit_list = FilterAllUnits([[f_side, side], [f_and, [f_not, [f_lives, 550]],[f_lives, 250]]]);
                        soldiersOK_list =  FilterAllUnits([[f_side, side], [f_or,[f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]], [f_lives, 1000]]);

                        IF medicCount > 0  then
                        begin
                                if damageUnit_list > 0 then
                                begin
                                        for i in damageUnit_list  do
                                        begin
                                                ComMoveToArea(i, healArea);
                                                for j in medic_list do 
                                                AddComHeal(j, i);
                                        end;
                                 end;
                        end;

                        for i in soldiersOK_list do
                        begin

                                target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                                If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                                begin
                                        ComAttackUnit(i, target1);
                                        end  else
                                        begin
                                        ComAttackUnit(i, target2);
                                end;

                        end;

                                        
                        for i in soldiersOK_list do
                        begin
                                target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                                If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                                begin
                                ComAttackUnit(i, target1);
                                end else
                                begin
                                ComAttackUnit(i, target2);
                        end;
               end; until soldiersOK_list = [];
        end;

END;

// Spawn vehicle and attack

export function RespawnAttackVehicle(area, side, vehCount, mehskill, nation, vehEngine, vehControl, RUWeapons, ARWeapons, AMWeapon, targetSide);
var i, j, un, veh, ruChassisTab, arChassisTab, amChassisTab, vehicleOK_list, target1, target2;
begin

  amChassisTab = [];
  arChassisTab = [];
  ruChassisTab = [];

  repeat

  wait(0$01);

  IF nation = 1 then
  begin

            uc_side = side;
            uc_nation = nation;

            vc_engine = vehengine;
            vc_control = vehcontrol;
            vc_weapon = AMWeapon[Rand(1, AMWeapon)];

            for j = 1 to AMWeapon do
            begin
                 IF AMWeapon[j] = 2 or AMWeapon[j] = 3 then
                 begin
                      amChassisTab = [1,2,3,4,5];
                      vc_chassis = amChassisTab[Rand(1,amChassisTab)];
                 end;

                 IF AMWeapon[j] = 4 or AMWeapon[j] = 5 or AMWeapon[j] = 9 or AMWeapon[j] = 11 or AMWeapon[j] = 7 then
                 begin
                      amChassisTab = [2,3,4,5];
                      vc_chassis = amChassisTab[Rand(1, amChassisTab)];
                 end;

                 IF AMWeapon[j] = 8 or AMWeapon[j] = 6 or AMWeapon[j] = 10 then
                 begin
                      amChassisTab = [4,5];
                      vc_chassis = amChassisTab[Rand(1, amChassisTab)];
                 end;

           end;

            veh = CreateVehicle;
            PlaceUnitArea(veh, area, false);

            IF vehControl = 1 then
            begin

                hc_gallery = '';
                hc_name = '';
                PrepareHuman(false, 3, mehskill);

                un = CreateHuman;
                PlaceHumanInUnit(un, veh);

            end;


            i = i + 1;

    end;

  IF nation = 2 then
  begin

            uc_side = side;
            uc_nation = nation;

            vc_engine = vehengine;
            vc_control = vehcontrol;
            vc_weapon = ARWeapons[Rand(1, ARWeapons)];

            for j = 1 to ARWeapons do
            begin

                 IF ARWeapons[j] = 24 or ARWeapons[j] = 22 or ARWeapons[j] = 23 or ARWeapons[j] = 30 then
                 begin
                      arChassisTab = [11, 12, 13, 14];
                      vc_chassis = arChassisTab[Rand(1, arChassisTab)];
                 end;

                 IF ARWeapons[j] = 29 or ARWeapons[j] = 28 or ARWeapons[j] = 27 or ARWeapons[j] = 26 or ARWeapons[j] = 25 then
                 begin
                      arChassisTab = [13, 14];
                      vc_chassis = arChassisTab[Rand(1, arChassisTab)];
                 end;

           end;

            veh = CreateVehicle;
            PlaceUnitArea(veh, area, false);

            IF vehcontrol = 1 then
            begin

                hc_gallery = '';
                hc_name = '';
                PrepareHuman(false, 3, mehskill);

                un = CreateHuman;
                PlaceHumanInUnit(un, veh);

            end;


            i = i + 1;

    end;


  IF nation = 3 then
  begin

            uc_side = side;
            uc_nation = nation;

            vc_engine = vehengine;
            vc_control = vehcontrol;
            vc_weapon = RUWeapons[Rand(1, RUWeapons)];


            for j = 1 to RuWeapons do
            begin

                IF RUWeapons[j] = 42 or RUWeapons[j] = 43 or RUWeapons[j] = 44 or RUWeapons[j] = 45 or RUWeapons[j] = 49 then
                begin
                    ruChassisTab = [21, 22, 23, 24];
                    vc_chassis = ruChassisTab[Rand(1, ruChassisTab)];
                end;

                IF RUWeapons[j] = 46 or RUWeapons[j] = 47 then
                begin
                    ruChassisTab = [23, 24];
                    vc_chassis = ruChassisTab[Rand(1, ruChassisTab)];
                end;

           end;


            veh = CreateVehicle;
            PlaceUnitArea(veh, area, false);

            IF vehcontrol = 1 then
            begin

                hc_gallery = '';
                hc_name = '';
                PrepareHuman(false, 3, mehskill);

                un = CreateHuman;
                PlaceHumanInUnit(un, veh);

            end;


            i = i + 1;

    end;

  until i = vehCount;

    repeat
        wait(0$1);
        vehicleOK_list = FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 661]]);

        IF vehicleOK_list > 0 then
        begin

            for i in vehicleOK_list  do
            begin

            target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
            target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

            If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
            begin
                ComAttackUnit(i, target1);
            end
            else
            begin
                ComAttackUnit(i, target2);
            end;
        end;
      end;
    until (FilterAllUnits([[f_side, side], [f_type, unit_vehicle]])) = 0;


END;

Export function SikorskyHealUnits(side, healArea, targetSide);
var i, j, damageUnit_list, soldiersOK_list, medicCount, target1, target2;
begin

        damageUnit_list = FilterAllUnits([[f_side, side], [f_and, [f_not, [f_lives, 550]],[f_lives, 250]]]);
        soldiersOK_list =  FilterAllUnits([[f_side, side], [f_or,[f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]], [f_lives, 1000]]);
        medicCount = FilterAllUnits([[f_side, side], [f_class, 4]]);

        IF medicCount > 0  then
        begin
                if damageUnit_list > 0 then
                begin
                        for i in damageUnit_list  do
                        begin
                                ComMoveToArea(i, healArea);
                                for j in medicCount do AddComHeal(j, i);
                        end;
                end;
        end;

        if soldiersOK_list > 0 then
        begin
                for i in soldiersOK_list do
                begin

                        target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                        target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                        If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                        begin
                                ComAttackUnit(i, target1);
                                end  else
                                begin
                                ComAttackUnit(i, target2);
                        end;

                end;
        end;
end;
