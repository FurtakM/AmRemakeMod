// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; export cutscene ; export lab ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 16
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 17
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 11
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 12
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 13
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// mission_prefix := 06_ ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_STRING 06_
  59: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_STRING 05_
  67: ST_TO_ADDR
// PrepareDeltaBase ;
  68: CALL 2185 0 0
// LoadVehicles ;
  72: CALL 1261 0 0
// PrepareHeroes ;
  76: CALL 148 0 0
// PrepareRandoms ;
  80: CALL 1562 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
  84: LD_ADDR_EXP 18
  88: PUSH
  89: LD_INT 22
  91: PUSH
  92: LD_INT 1
  94: PUSH
  95: EMPTY
  96: LIST
  97: LIST
  98: PUSH
  99: LD_INT 2
 101: PUSH
 102: LD_INT 30
 104: PUSH
 105: LD_INT 6
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 30
 114: PUSH
 115: LD_INT 7
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: LD_INT 30
 124: PUSH
 125: LD_INT 8
 127: PUSH
 128: EMPTY
 129: LIST
 130: LIST
 131: PUSH
 132: EMPTY
 133: LIST
 134: LIST
 135: LIST
 136: LIST
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: PPUSH
 142: CALL_OW 69
 146: ST_TO_ADDR
// end ; end_of_file
 147: END
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
 152: PPUSH
 153: PPUSH
 154: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 155: LD_ADDR_VAR 0 3
 159: PUSH
 160: LD_INT 22
 162: PUSH
 163: LD_INT 1
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: PUSH
 170: LD_INT 21
 172: PUSH
 173: LD_INT 3
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 30
 182: PUSH
 183: LD_INT 0
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: PUSH
 190: EMPTY
 191: LIST
 192: LIST
 193: LIST
 194: PPUSH
 195: CALL_OW 69
 199: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 200: LD_VAR 0 3
 204: PUSH
 205: LD_INT 1
 207: ARRAY
 208: PPUSH
 209: LD_STRING delta
 211: PPUSH
 212: CALL_OW 500
// uc_side = 1 ;
 216: LD_ADDR_OWVAR 20
 220: PUSH
 221: LD_INT 1
 223: ST_TO_ADDR
// uc_nation = 1 ;
 224: LD_ADDR_OWVAR 21
 228: PUSH
 229: LD_INT 1
 231: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 232: LD_ADDR_EXP 1
 236: PUSH
 237: LD_STRING JMM
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: CALL 4072 0 2
 247: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 248: LD_ADDR_EXP 15
 252: PUSH
 253: LD_STRING Harisson
 255: PPUSH
 256: LD_INT 0
 258: PPUSH
 259: CALL 4072 0 2
 263: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 264: LD_EXP 1
 268: PPUSH
 269: LD_VAR 0 3
 273: PUSH
 274: LD_INT 1
 276: ARRAY
 277: PPUSH
 278: CALL_OW 250
 282: PPUSH
 283: LD_VAR 0 3
 287: PUSH
 288: LD_INT 1
 290: ARRAY
 291: PPUSH
 292: CALL_OW 251
 296: PPUSH
 297: LD_INT 5
 299: PPUSH
 300: LD_INT 0
 302: PPUSH
 303: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 307: LD_EXP 1
 311: PPUSH
 312: LD_INT 1
 314: PPUSH
 315: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true ) ;
 319: LD_ADDR_EXP 2
 323: PUSH
 324: LD_STRING Gladstone
 326: PPUSH
 327: LD_INT 1
 329: PPUSH
 330: CALL 4072 0 2
 334: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 335: LD_EXP 2
 339: PPUSH
 340: LD_VAR 0 3
 344: PUSH
 345: LD_INT 1
 347: ARRAY
 348: PPUSH
 349: CALL_OW 250
 353: PPUSH
 354: LD_VAR 0 3
 358: PUSH
 359: LD_INT 1
 361: ARRAY
 362: PPUSH
 363: CALL_OW 251
 367: PPUSH
 368: LD_INT 5
 370: PPUSH
 371: LD_INT 0
 373: PPUSH
 374: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 378: LD_EXP 2
 382: PPUSH
 383: LD_INT 4
 385: PPUSH
 386: CALL_OW 336
// Denis = PrepareUnit ( Denis , true ) ;
 390: LD_ADDR_EXP 3
 394: PUSH
 395: LD_STRING Denis
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL 4072 0 2
 405: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 406: LD_EXP 3
 410: PPUSH
 411: LD_VAR 0 3
 415: PUSH
 416: LD_INT 1
 418: ARRAY
 419: PPUSH
 420: CALL_OW 250
 424: PPUSH
 425: LD_VAR 0 3
 429: PUSH
 430: LD_INT 1
 432: ARRAY
 433: PPUSH
 434: CALL_OW 251
 438: PPUSH
 439: LD_INT 5
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 449: LD_EXP 3
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 461: LD_STRING FrankInDelta
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL_OW 30
 471: PUSH
 472: LD_INT 1
 474: EQUAL
 475: IFFALSE 548
// begin Frank = PrepareUnit ( Frank , true ) ;
 477: LD_ADDR_EXP 5
 481: PUSH
 482: LD_STRING Frank
 484: PPUSH
 485: LD_INT 1
 487: PPUSH
 488: CALL 4072 0 2
 492: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 493: LD_EXP 5
 497: PPUSH
 498: LD_VAR 0 3
 502: PUSH
 503: LD_INT 1
 505: ARRAY
 506: PPUSH
 507: CALL_OW 250
 511: PPUSH
 512: LD_VAR 0 3
 516: PUSH
 517: LD_INT 1
 519: ARRAY
 520: PPUSH
 521: CALL_OW 251
 525: PPUSH
 526: LD_INT 5
 528: PPUSH
 529: LD_INT 0
 531: PPUSH
 532: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 536: LD_EXP 5
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 548: LD_STRING LisaInDelta
 550: PPUSH
 551: LD_INT 0
 553: PPUSH
 554: CALL_OW 30
 558: PUSH
 559: LD_INT 1
 561: EQUAL
 562: IFFALSE 635
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 564: LD_ADDR_EXP 4
 568: PUSH
 569: LD_STRING Lisa
 571: PPUSH
 572: LD_INT 1
 574: PPUSH
 575: CALL 4072 0 2
 579: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 580: LD_EXP 4
 584: PPUSH
 585: LD_VAR 0 3
 589: PUSH
 590: LD_INT 1
 592: ARRAY
 593: PPUSH
 594: CALL_OW 250
 598: PPUSH
 599: LD_VAR 0 3
 603: PUSH
 604: LD_INT 1
 606: ARRAY
 607: PPUSH
 608: CALL_OW 251
 612: PPUSH
 613: LD_INT 5
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 623: LD_EXP 4
 627: PPUSH
 628: LD_INT 1
 630: PPUSH
 631: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 635: LD_STRING BobbyInDelta
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 30
 645: PUSH
 646: LD_INT 1
 648: EQUAL
 649: IFFALSE 722
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 651: LD_ADDR_EXP 6
 655: PUSH
 656: LD_STRING Bobby
 658: PPUSH
 659: LD_INT 1
 661: PPUSH
 662: CALL 4072 0 2
 666: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 667: LD_EXP 6
 671: PPUSH
 672: LD_VAR 0 3
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PPUSH
 681: CALL_OW 250
 685: PPUSH
 686: LD_VAR 0 3
 690: PUSH
 691: LD_INT 1
 693: ARRAY
 694: PPUSH
 695: CALL_OW 251
 699: PPUSH
 700: LD_INT 5
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 710: LD_EXP 6
 714: PPUSH
 715: LD_INT 1
 717: PPUSH
 718: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 722: LD_STRING CyrusInDelta
 724: PPUSH
 725: LD_INT 0
 727: PPUSH
 728: CALL_OW 30
 732: PUSH
 733: LD_INT 1
 735: EQUAL
 736: IFFALSE 809
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 738: LD_ADDR_EXP 7
 742: PUSH
 743: LD_STRING Cyrus
 745: PPUSH
 746: LD_INT 1
 748: PPUSH
 749: CALL 4072 0 2
 753: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 754: LD_EXP 7
 758: PPUSH
 759: LD_VAR 0 3
 763: PUSH
 764: LD_INT 1
 766: ARRAY
 767: PPUSH
 768: CALL_OW 250
 772: PPUSH
 773: LD_VAR 0 3
 777: PUSH
 778: LD_INT 1
 780: ARRAY
 781: PPUSH
 782: CALL_OW 251
 786: PPUSH
 787: LD_INT 5
 789: PPUSH
 790: LD_INT 0
 792: PPUSH
 793: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 797: LD_EXP 7
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 809: LD_STRING DonaldsonInDelta
 811: PPUSH
 812: LD_INT 0
 814: PPUSH
 815: CALL_OW 30
 819: PUSH
 820: LD_INT 1
 822: EQUAL
 823: IFFALSE 896
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 825: LD_ADDR_EXP 9
 829: PUSH
 830: LD_STRING Donaldson
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: CALL 4072 0 2
 840: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 841: LD_EXP 9
 845: PPUSH
 846: LD_VAR 0 3
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: PPUSH
 855: CALL_OW 250
 859: PPUSH
 860: LD_VAR 0 3
 864: PUSH
 865: LD_INT 1
 867: ARRAY
 868: PPUSH
 869: CALL_OW 251
 873: PPUSH
 874: LD_INT 5
 876: PPUSH
 877: LD_INT 0
 879: PPUSH
 880: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
 884: LD_EXP 9
 888: PPUSH
 889: LD_INT 1
 891: PPUSH
 892: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
 896: LD_STRING BrownInDelta
 898: PPUSH
 899: LD_INT 0
 901: PPUSH
 902: CALL_OW 30
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 983
// begin Brown = PrepareUnit ( Brown , true ) ;
 912: LD_ADDR_EXP 8
 916: PUSH
 917: LD_STRING Brown
 919: PPUSH
 920: LD_INT 1
 922: PPUSH
 923: CALL 4072 0 2
 927: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 928: LD_EXP 8
 932: PPUSH
 933: LD_VAR 0 3
 937: PUSH
 938: LD_INT 1
 940: ARRAY
 941: PPUSH
 942: CALL_OW 250
 946: PPUSH
 947: LD_VAR 0 3
 951: PUSH
 952: LD_INT 1
 954: ARRAY
 955: PPUSH
 956: CALL_OW 251
 960: PPUSH
 961: LD_INT 5
 963: PPUSH
 964: LD_INT 0
 966: PPUSH
 967: CALL_OW 50
// SetClass ( Brown , 2 ) ;
 971: LD_EXP 8
 975: PPUSH
 976: LD_INT 2
 978: PPUSH
 979: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
 983: LD_ADDR_EXP 10
 987: PUSH
 988: LD_STRING othersInDelta
 990: PPUSH
 991: CALL_OW 31
 995: ST_TO_ADDR
// for i in others do
 996: LD_ADDR_VAR 0 2
1000: PUSH
1001: LD_EXP 10
1005: PUSH
1006: FOR_IN
1007: IFFALSE 1054
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1009: LD_VAR 0 2
1013: PPUSH
1014: LD_VAR 0 3
1018: PUSH
1019: LD_INT 1
1021: ARRAY
1022: PPUSH
1023: CALL_OW 250
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PPUSH
1037: CALL_OW 251
1041: PPUSH
1042: LD_INT 35
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: CALL_OW 50
1052: GO 1006
1054: POP
1055: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1056: LD_ADDR_EXP 11
1060: PUSH
1061: LD_STRING apeInDelta
1063: PPUSH
1064: CALL_OW 31
1068: ST_TO_ADDR
// uc_nation = 0 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 0
1076: ST_TO_ADDR
// if apemans > 5 then
1077: LD_EXP 11
1081: PUSH
1082: LD_INT 5
1084: GREATER
1085: IFFALSE 1180
// begin for i := 1 to 5 do
1087: LD_ADDR_VAR 0 2
1091: PUSH
1092: DOUBLE
1093: LD_INT 1
1095: DEC
1096: ST_TO_ADDR
1097: LD_INT 5
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1176
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1103: LD_EXP 11
1107: PUSH
1108: LD_VAR 0 2
1112: ARRAY
1113: PPUSH
1114: LD_VAR 0 3
1118: PUSH
1119: LD_INT 1
1121: ARRAY
1122: PPUSH
1123: CALL_OW 250
1127: PPUSH
1128: LD_VAR 0 3
1132: PUSH
1133: LD_INT 1
1135: ARRAY
1136: PPUSH
1137: CALL_OW 251
1141: PPUSH
1142: LD_INT 50
1144: PPUSH
1145: LD_INT 0
1147: PPUSH
1148: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1152: LD_ADDR_EXP 12
1156: PUSH
1157: LD_EXP 12
1161: PUSH
1162: LD_EXP 11
1166: PUSH
1167: LD_VAR 0 2
1171: ARRAY
1172: ADD
1173: ST_TO_ADDR
// end ;
1174: GO 1100
1176: POP
1177: POP
// end else
1178: GO 1256
// begin for i in apemans do
1180: LD_ADDR_VAR 0 2
1184: PUSH
1185: LD_EXP 11
1189: PUSH
1190: FOR_IN
1191: IFFALSE 1254
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1193: LD_VAR 0 2
1197: PPUSH
1198: LD_VAR 0 3
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: CALL_OW 250
1211: PPUSH
1212: LD_VAR 0 3
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PPUSH
1221: CALL_OW 251
1225: PPUSH
1226: LD_INT 50
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1236: LD_ADDR_EXP 12
1240: PUSH
1241: LD_EXP 12
1245: PUSH
1246: LD_VAR 0 2
1250: ADD
1251: ST_TO_ADDR
// end ;
1252: GO 1190
1254: POP
1255: POP
// end ; end ;
1256: LD_VAR 0 1
1260: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1261: LD_INT 0
1263: PPUSH
1264: PPUSH
1265: PPUSH
1266: PPUSH
1267: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1268: LD_ADDR_VAR 0 4
1272: PUSH
1273: LD_INT 22
1275: PUSH
1276: LD_INT 1
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: PUSH
1283: LD_INT 21
1285: PUSH
1286: LD_INT 3
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: PUSH
1293: LD_INT 30
1295: PUSH
1296: LD_INT 0
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: LIST
1307: PPUSH
1308: CALL_OW 69
1312: ST_TO_ADDR
// uc_side = 1 ;
1313: LD_ADDR_OWVAR 20
1317: PUSH
1318: LD_INT 1
1320: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1321: LD_ADDR_VAR 0 5
1325: PUSH
1326: LD_STRING vehiclesInDelta
1328: PPUSH
1329: EMPTY
1330: PPUSH
1331: CALL_OW 30
1335: ST_TO_ADDR
// for i = 1 to vehicles do
1336: LD_ADDR_VAR 0 2
1340: PUSH
1341: DOUBLE
1342: LD_INT 1
1344: DEC
1345: ST_TO_ADDR
1346: LD_VAR 0 5
1350: PUSH
1351: FOR_TO
1352: IFFALSE 1555
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1354: LD_VAR 0 5
1358: PUSH
1359: LD_VAR 0 2
1363: PUSH
1364: LD_INT 4
1366: PLUS
1367: ARRAY
1368: PUSH
1369: LD_INT 11
1371: EQUAL
1372: PUSH
1373: LD_VAR 0 5
1377: PUSH
1378: LD_VAR 0 2
1382: ARRAY
1383: PUSH
1384: LD_INT 3
1386: EQUAL
1387: OR
1388: IFFALSE 1539
// begin uc_nation = vehicles [ i ] ;
1390: LD_ADDR_OWVAR 21
1394: PUSH
1395: LD_VAR 0 5
1399: PUSH
1400: LD_VAR 0 2
1404: ARRAY
1405: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1406: LD_ADDR_OWVAR 37
1410: PUSH
1411: LD_VAR 0 5
1415: PUSH
1416: LD_VAR 0 2
1420: PUSH
1421: LD_INT 1
1423: PLUS
1424: ARRAY
1425: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1426: LD_ADDR_OWVAR 39
1430: PUSH
1431: LD_VAR 0 5
1435: PUSH
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 2
1443: PLUS
1444: ARRAY
1445: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1446: LD_ADDR_OWVAR 38
1450: PUSH
1451: LD_VAR 0 5
1455: PUSH
1456: LD_VAR 0 2
1460: PUSH
1461: LD_INT 3
1463: PLUS
1464: ARRAY
1465: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1466: LD_ADDR_OWVAR 40
1470: PUSH
1471: LD_VAR 0 5
1475: PUSH
1476: LD_VAR 0 2
1480: PUSH
1481: LD_INT 4
1483: PLUS
1484: ARRAY
1485: ST_TO_ADDR
// veh = CreateVehicle ;
1486: LD_ADDR_VAR 0 3
1490: PUSH
1491: CALL_OW 45
1495: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1496: LD_VAR 0 3
1500: PPUSH
1501: LD_VAR 0 4
1505: PUSH
1506: LD_INT 1
1508: ARRAY
1509: PPUSH
1510: CALL_OW 250
1514: PPUSH
1515: LD_VAR 0 4
1519: PUSH
1520: LD_INT 1
1522: ARRAY
1523: PPUSH
1524: CALL_OW 251
1528: PPUSH
1529: LD_INT 40
1531: PPUSH
1532: LD_INT 0
1534: PPUSH
1535: CALL_OW 50
// end ; i = i + 4 ;
1539: LD_ADDR_VAR 0 2
1543: PUSH
1544: LD_VAR 0 2
1548: PUSH
1549: LD_INT 4
1551: PLUS
1552: ST_TO_ADDR
// end ;
1553: GO 1351
1555: POP
1556: POP
// end ;
1557: LD_VAR 0 1
1561: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1562: LD_INT 0
1564: PPUSH
1565: PPUSH
1566: PPUSH
1567: PPUSH
1568: PPUSH
// uc_side = 1 ;
1569: LD_ADDR_OWVAR 20
1573: PUSH
1574: LD_INT 1
1576: ST_TO_ADDR
// uc_nation = 1 ;
1577: LD_ADDR_OWVAR 21
1581: PUSH
1582: LD_INT 1
1584: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1585: LD_ADDR_VAR 0 4
1589: PUSH
1590: LD_INT 22
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 21
1602: PUSH
1603: LD_INT 3
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: PUSH
1610: LD_INT 30
1612: PUSH
1613: LD_INT 0
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: LIST
1624: PPUSH
1625: CALL_OW 69
1629: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis ] then
1630: LD_INT 22
1632: PUSH
1633: LD_INT 1
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 25
1642: PUSH
1643: LD_INT 4
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 26
1652: PUSH
1653: LD_INT 1
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 1
1677: PUSH
1678: LD_EXP 7
1682: PUSH
1683: LD_EXP 6
1687: PUSH
1688: LD_EXP 5
1692: PUSH
1693: LD_EXP 2
1697: PUSH
1698: LD_EXP 3
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: DIFF
1711: IFFALSE 1806
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis ] ) [ 1 ] else
1713: LD_ADDR_EXP 14
1717: PUSH
1718: LD_INT 22
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_INT 25
1730: PUSH
1731: LD_INT 4
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 26
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: EMPTY
1754: LIST
1755: PPUSH
1756: CALL_OW 69
1760: PUSH
1761: LD_EXP 1
1765: PUSH
1766: LD_EXP 7
1770: PUSH
1771: LD_EXP 6
1775: PUSH
1776: LD_EXP 5
1780: PUSH
1781: LD_EXP 2
1785: PUSH
1786: LD_EXP 3
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: DIFF
1799: PUSH
1800: LD_INT 1
1802: ARRAY
1803: ST_TO_ADDR
1804: GO 1947
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis ] ;
1806: LD_ADDR_VAR 0 5
1810: PUSH
1811: LD_INT 22
1813: PUSH
1814: LD_INT 1
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: LD_INT 26
1823: PUSH
1824: LD_INT 1
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: EMPTY
1836: LIST
1837: PPUSH
1838: CALL_OW 69
1842: PUSH
1843: LD_EXP 1
1847: PUSH
1848: LD_EXP 7
1852: PUSH
1853: LD_EXP 6
1857: PUSH
1858: LD_EXP 5
1862: PUSH
1863: LD_EXP 2
1867: PUSH
1868: LD_EXP 3
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: DIFF
1881: ST_TO_ADDR
// if filter then
1882: LD_VAR 0 5
1886: IFFALSE 1947
// for i in filter do
1888: LD_ADDR_VAR 0 2
1892: PUSH
1893: LD_VAR 0 5
1897: PUSH
1898: FOR_IN
1899: IFFALSE 1945
// if GetSkill ( i , 4 ) >= 4 then
1901: LD_VAR 0 2
1905: PPUSH
1906: LD_INT 4
1908: PPUSH
1909: CALL_OW 259
1913: PUSH
1914: LD_INT 4
1916: GREATEREQUAL
1917: IFFALSE 1943
// begin deltaDoctor := i ;
1919: LD_ADDR_EXP 14
1923: PUSH
1924: LD_VAR 0 2
1928: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
1929: LD_EXP 14
1933: PPUSH
1934: LD_INT 4
1936: PPUSH
1937: CALL_OW 336
// break ;
1941: GO 1945
// end ;
1943: GO 1898
1945: POP
1946: POP
// end ; for i = 1 to 6 do
1947: LD_ADDR_VAR 0 2
1951: PUSH
1952: DOUBLE
1953: LD_INT 1
1955: DEC
1956: ST_TO_ADDR
1957: LD_INT 6
1959: PUSH
1960: FOR_TO
1961: IFFALSE 2088
// begin hc_gallery =  ;
1963: LD_ADDR_OWVAR 33
1967: PUSH
1968: LD_STRING 
1970: ST_TO_ADDR
// hc_name =  ;
1971: LD_ADDR_OWVAR 26
1975: PUSH
1976: LD_STRING 
1978: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) - Difficulty ) ;
1979: LD_INT 0
1981: PPUSH
1982: LD_INT 1
1984: PUSH
1985: LD_INT 2
1987: PUSH
1988: LD_INT 3
1990: PUSH
1991: LD_INT 4
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 4
2005: PPUSH
2006: CALL_OW 12
2010: ARRAY
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: LD_INT 5
2017: PPUSH
2018: CALL_OW 12
2022: PUSH
2023: LD_OWVAR 67
2027: MINUS
2028: PPUSH
2029: CALL_OW 380
// un = CreateHuman ;
2033: LD_ADDR_VAR 0 3
2037: PUSH
2038: CALL_OW 44
2042: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2043: LD_VAR 0 3
2047: PPUSH
2048: LD_VAR 0 4
2052: PUSH
2053: LD_INT 1
2055: ARRAY
2056: PPUSH
2057: CALL_OW 250
2061: PPUSH
2062: LD_VAR 0 4
2066: PUSH
2067: LD_INT 1
2069: ARRAY
2070: PPUSH
2071: CALL_OW 251
2075: PPUSH
2076: LD_INT 15
2078: PPUSH
2079: LD_INT 0
2081: PPUSH
2082: CALL_OW 50
// end ;
2086: GO 1960
2088: POP
2089: POP
// if deltaDoctor then
2090: LD_EXP 14
2094: IFFALSE 2098
// exit ;
2096: GO 2180
// hc_gallery =  ;
2098: LD_ADDR_OWVAR 33
2102: PUSH
2103: LD_STRING 
2105: ST_TO_ADDR
// hc_name = Dr. Michael Mills ;
2106: LD_ADDR_OWVAR 26
2110: PUSH
2111: LD_STRING Dr. Michael Mills
2113: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2114: LD_INT 1
2116: PPUSH
2117: LD_INT 4
2119: PPUSH
2120: LD_INT 6
2122: PPUSH
2123: CALL_OW 380
// deltaDoctor = CreateHuman ;
2127: LD_ADDR_EXP 14
2131: PUSH
2132: CALL_OW 44
2136: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2137: LD_EXP 14
2141: PPUSH
2142: LD_VAR 0 4
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PPUSH
2151: CALL_OW 250
2155: PPUSH
2156: LD_VAR 0 4
2160: PUSH
2161: LD_INT 1
2163: ARRAY
2164: PPUSH
2165: CALL_OW 251
2169: PPUSH
2170: LD_INT 5
2172: PPUSH
2173: LD_INT 0
2175: PPUSH
2176: CALL_OW 50
// end ; end_of_file
2180: LD_VAR 0 1
2184: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2185: LD_INT 0
2187: PPUSH
2188: PPUSH
2189: PPUSH
2190: PPUSH
2191: PPUSH
2192: PPUSH
2193: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2194: LD_ADDR_VAR 0 5
2198: PUSH
2199: LD_STRING buildingsInDelta
2201: PPUSH
2202: EMPTY
2203: PPUSH
2204: CALL_OW 30
2208: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2209: LD_INT 68
2211: PPUSH
2212: LD_INT 40
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 441
// uc_side = 1 ;
2222: LD_ADDR_OWVAR 20
2226: PUSH
2227: LD_INT 1
2229: ST_TO_ADDR
// uc_nation = 1 ;
2230: LD_ADDR_OWVAR 21
2234: PUSH
2235: LD_INT 1
2237: ST_TO_ADDR
// for i = 1 to buildings do
2238: LD_ADDR_VAR 0 2
2242: PUSH
2243: DOUBLE
2244: LD_INT 1
2246: DEC
2247: ST_TO_ADDR
2248: LD_VAR 0 5
2252: PUSH
2253: FOR_TO
2254: IFFALSE 2452
// begin bc_type = buildings [ i ] [ 1 ] ;
2256: LD_ADDR_OWVAR 42
2260: PUSH
2261: LD_VAR 0 5
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2276: LD_ADDR_OWVAR 43
2280: PUSH
2281: LD_VAR 0 5
2285: PUSH
2286: LD_VAR 0 2
2290: ARRAY
2291: PUSH
2292: LD_INT 2
2294: ARRAY
2295: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2296: LD_OWVAR 42
2300: PUSH
2301: LD_INT 7
2303: EQUAL
2304: PUSH
2305: LD_OWVAR 42
2309: PUSH
2310: LD_INT 8
2312: EQUAL
2313: OR
2314: IFFALSE 2356
// begin bc_kind1 = buildings [ i ] [ 6 ] ;
2316: LD_ADDR_OWVAR 44
2320: PUSH
2321: LD_VAR 0 5
2325: PUSH
2326: LD_VAR 0 2
2330: ARRAY
2331: PUSH
2332: LD_INT 6
2334: ARRAY
2335: ST_TO_ADDR
// bc_kind2 = buildings [ i ] [ 7 ] ;
2336: LD_ADDR_OWVAR 45
2340: PUSH
2341: LD_VAR 0 5
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 7
2354: ARRAY
2355: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2356: LD_ADDR_VAR 0 4
2360: PUSH
2361: LD_VAR 0 5
2365: PUSH
2366: LD_VAR 0 2
2370: ARRAY
2371: PUSH
2372: LD_INT 3
2374: ARRAY
2375: PPUSH
2376: LD_VAR 0 5
2380: PUSH
2381: LD_VAR 0 2
2385: ARRAY
2386: PUSH
2387: LD_INT 4
2389: ARRAY
2390: PPUSH
2391: LD_VAR 0 5
2395: PUSH
2396: LD_VAR 0 2
2400: ARRAY
2401: PUSH
2402: LD_INT 5
2404: ARRAY
2405: PPUSH
2406: CALL_OW 47
2410: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2411: LD_VAR 0 4
2415: PPUSH
2416: CALL_OW 266
2420: PUSH
2421: LD_INT 32
2423: EQUAL
2424: IFFALSE 2450
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2426: LD_VAR 0 4
2430: PPUSH
2431: LD_VAR 0 5
2435: PUSH
2436: LD_VAR 0 2
2440: ARRAY
2441: PUSH
2442: LD_INT 8
2444: ARRAY
2445: PPUSH
2446: CALL_OW 431
// end ;
2450: GO 2253
2452: POP
2453: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2454: LD_ADDR_VAR 0 6
2458: PUSH
2459: LD_INT 22
2461: PUSH
2462: LD_INT 1
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: PUSH
2469: LD_INT 2
2471: PUSH
2472: LD_INT 30
2474: PUSH
2475: LD_INT 6
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 30
2484: PUSH
2485: LD_INT 7
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: PUSH
2492: LD_INT 30
2494: PUSH
2495: LD_INT 8
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PPUSH
2512: CALL_OW 69
2516: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2517: LD_ADDR_VAR 0 7
2521: PUSH
2522: LD_INT 22
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: LD_INT 30
2534: PUSH
2535: LD_INT 0
2537: PUSH
2538: EMPTY
2539: LIST
2540: LIST
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: PPUSH
2546: CALL_OW 69
2550: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2551: LD_VAR 0 6
2555: PUSH
2556: LD_INT 0
2558: GREATER
2559: PUSH
2560: LD_VAR 0 7
2564: PUSH
2565: LD_INT 0
2567: GREATER
2568: AND
2569: IFFALSE 2579
// baseCorrect = 1 ;
2571: LD_ADDR_EXP 16
2575: PUSH
2576: LD_INT 1
2578: ST_TO_ADDR
// if baseCorrect = 0 then
2579: LD_EXP 16
2583: PUSH
2584: LD_INT 0
2586: EQUAL
2587: IFFALSE 2960
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2589: LD_ADDR_VAR 0 2
2593: PUSH
2594: LD_INT 22
2596: PUSH
2597: LD_INT 1
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 21
2606: PUSH
2607: LD_INT 3
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: PPUSH
2618: CALL_OW 69
2622: PUSH
2623: FOR_IN
2624: IFFALSE 2637
// RemoveUnit ( i ) ;
2626: LD_VAR 0 2
2630: PPUSH
2631: CALL_OW 64
2635: GO 2623
2637: POP
2638: POP
// uc_nation = 1 ;
2639: LD_ADDR_OWVAR 21
2643: PUSH
2644: LD_INT 1
2646: ST_TO_ADDR
// uc_side = 1 ;
2647: LD_ADDR_OWVAR 20
2651: PUSH
2652: LD_INT 1
2654: ST_TO_ADDR
// bc_level = 5 ;
2655: LD_ADDR_OWVAR 43
2659: PUSH
2660: LD_INT 5
2662: ST_TO_ADDR
// bc_type = b_depot ;
2663: LD_ADDR_OWVAR 42
2667: PUSH
2668: LD_INT 0
2670: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2671: LD_INT 50
2673: PPUSH
2674: LD_INT 22
2676: PPUSH
2677: LD_INT 0
2679: PPUSH
2680: CALL_OW 47
// bc_type = b_bunker ;
2684: LD_ADDR_OWVAR 42
2688: PUSH
2689: LD_INT 32
2691: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2692: LD_ADDR_VAR 0 4
2696: PUSH
2697: LD_INT 68
2699: PPUSH
2700: LD_INT 24
2702: PPUSH
2703: LD_INT 4
2705: PPUSH
2706: CALL_OW 47
2710: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2711: LD_VAR 0 4
2715: PPUSH
2716: LD_INT 4
2718: PUSH
2719: LD_INT 11
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: LD_INT 1
2728: PPUSH
2729: LD_INT 2
2731: PPUSH
2732: CALL_OW 12
2736: ARRAY
2737: PPUSH
2738: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_INT 71
2749: PPUSH
2750: LD_INT 34
2752: PPUSH
2753: LD_INT 4
2755: PPUSH
2756: CALL_OW 47
2760: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2761: LD_VAR 0 4
2765: PPUSH
2766: LD_INT 4
2768: PUSH
2769: LD_INT 11
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: LD_INT 1
2778: PPUSH
2779: LD_INT 2
2781: PPUSH
2782: CALL_OW 12
2786: ARRAY
2787: PPUSH
2788: CALL_OW 431
// bc_type = 31 ;
2792: LD_ADDR_OWVAR 42
2796: PUSH
2797: LD_INT 31
2799: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
2800: LD_INT 51
2802: PPUSH
2803: LD_INT 7
2805: PPUSH
2806: LD_INT 3
2808: PPUSH
2809: CALL_OW 47
// bc_type = b_oil_mine ;
2813: LD_ADDR_OWVAR 42
2817: PUSH
2818: LD_INT 29
2820: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
2821: LD_INT 68
2823: PPUSH
2824: LD_INT 40
2826: PPUSH
2827: LD_INT 1
2829: PPUSH
2830: CALL_OW 47
// bc_type = b_workshop ;
2834: LD_ADDR_OWVAR 42
2838: PUSH
2839: LD_INT 2
2841: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2842: LD_INT 38
2844: PPUSH
2845: LD_INT 20
2847: PPUSH
2848: LD_INT 2
2850: PPUSH
2851: CALL_OW 47
// bc_type = b_armoury ;
2855: LD_ADDR_OWVAR 42
2859: PUSH
2860: LD_INT 4
2862: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2863: LD_INT 38
2865: PPUSH
2866: LD_INT 20
2868: PPUSH
2869: LD_INT 2
2871: PPUSH
2872: CALL_OW 47
// bc_type = b_solar_power ;
2876: LD_ADDR_OWVAR 42
2880: PUSH
2881: LD_INT 27
2883: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
2884: LD_INT 46
2886: PPUSH
2887: LD_INT 12
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
2897: LD_INT 48
2899: PPUSH
2900: LD_INT 11
2902: PPUSH
2903: LD_INT 2
2905: PPUSH
2906: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
2910: LD_INT 49
2912: PPUSH
2913: LD_INT 11
2915: PPUSH
2916: LD_INT 3
2918: PPUSH
2919: CALL_OW 47
// bc_type = b_lab_half ;
2923: LD_ADDR_OWVAR 42
2927: PUSH
2928: LD_INT 7
2930: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
2931: LD_ADDR_OWVAR 44
2935: PUSH
2936: LD_INT 15
2938: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2939: LD_ADDR_OWVAR 45
2943: PUSH
2944: LD_INT 9
2946: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
2947: LD_INT 42
2949: PPUSH
2950: LD_INT 15
2952: PPUSH
2953: LD_INT 2
2955: PPUSH
2956: CALL_OW 47
// end ; end ; end_of_file
2960: LD_VAR 0 1
2964: RET
// every 1 do var i , j , tmp ;
2965: GO 2967
2967: DISABLE
2968: LD_INT 0
2970: PPUSH
2971: PPUSH
2972: PPUSH
// begin InGameOn ;
2973: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
2977: LD_EXP 18
2981: PUSH
2982: LD_INT 1
2984: ARRAY
2985: PPUSH
2986: CALL_OW 87
// if IsOK ( Denis ) then
2990: LD_EXP 3
2994: PPUSH
2995: CALL_OW 302
2999: IFFALSE 3027
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3001: LD_INT 6
3003: PPUSH
3004: LD_INT 1
3006: PPUSH
3007: LD_INT 2
3009: PPUSH
3010: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3014: LD_INT 20
3016: PPUSH
3017: LD_INT 1
3019: PPUSH
3020: LD_INT 1
3022: PPUSH
3023: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3027: LD_EXP 1
3031: PPUSH
3032: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3036: LD_EXP 1
3040: PPUSH
3041: LD_EXP 14
3045: PPUSH
3046: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3050: LD_INT 35
3052: PPUSH
3053: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3057: LD_EXP 14
3061: PPUSH
3062: LD_EXP 1
3066: PPUSH
3067: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3071: LD_EXP 1
3075: PPUSH
3076: LD_EXP 14
3080: PPUSH
3081: CALL_OW 296
3085: PUSH
3086: LD_INT 5
3088: LESS
3089: IFFALSE 3050
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3091: LD_EXP 14
3095: PPUSH
3096: LD_EXP 1
3100: PPUSH
3101: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_STRING D1-JMM-1
3112: PPUSH
3113: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3117: LD_EXP 14
3121: PPUSH
3122: LD_STRING D1-Sci-1
3124: PPUSH
3125: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3129: LD_EXP 1
3133: PUSH
3134: LD_EXP 14
3138: PUSH
3139: LD_EXP 3
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: LIST
3148: PPUSH
3149: LD_EXP 18
3153: PUSH
3154: LD_INT 1
3156: ARRAY
3157: PPUSH
3158: CALL_OW 120
// end ;
3162: PPOPN 3
3164: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3165: LD_EXP 1
3169: PPUSH
3170: CALL_OW 310
3174: PUSH
3175: LD_EXP 18
3179: PUSH
3180: LD_INT 1
3182: ARRAY
3183: EQUAL
3184: PUSH
3185: LD_EXP 14
3189: PPUSH
3190: CALL_OW 310
3194: PUSH
3195: LD_EXP 18
3199: PUSH
3200: LD_INT 1
3202: ARRAY
3203: EQUAL
3204: AND
3205: IFFALSE 3751
3207: GO 3209
3209: DISABLE
3210: LD_INT 0
3212: PPUSH
3213: PPUSH
3214: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3215: LD_EXP 18
3219: PUSH
3220: LD_INT 1
3222: ARRAY
3223: PPUSH
3224: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3228: LD_EXP 1
3232: PPUSH
3233: LD_STRING D1-JMM-2
3235: PPUSH
3236: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3240: LD_EXP 14
3244: PPUSH
3245: LD_STRING D1-Sci-2
3247: PPUSH
3248: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3252: LD_EXP 1
3256: PPUSH
3257: LD_STRING D1-JMM-3
3259: PPUSH
3260: CALL_OW 88
// if IsOK ( Denis ) then
3264: LD_EXP 3
3268: PPUSH
3269: CALL_OW 302
3273: IFFALSE 3289
// Say ( DeltaDoctor , D1-Sci-3 ) else
3275: LD_EXP 14
3279: PPUSH
3280: LD_STRING D1-Sci-3
3282: PPUSH
3283: CALL_OW 88
3287: GO 3301
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3289: LD_EXP 14
3293: PPUSH
3294: LD_STRING D1-Sci-3a
3296: PPUSH
3297: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3301: LD_EXP 1
3305: PPUSH
3306: LD_STRING D1-JMM-4
3308: PPUSH
3309: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3313: LD_ADDR_VAR 0 3
3317: PUSH
3318: LD_INT 22
3320: PUSH
3321: LD_INT 1
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_INT 25
3330: PUSH
3331: LD_INT 4
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: PUSH
3338: LD_INT 3
3340: PUSH
3341: LD_INT 54
3343: PUSH
3344: EMPTY
3345: LIST
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: PPUSH
3356: CALL_OW 69
3360: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3361: LD_ADDR_VAR 0 1
3365: PUSH
3366: LD_INT 22
3368: PUSH
3369: LD_INT 0
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: PPUSH
3376: CALL_OW 69
3380: PUSH
3381: FOR_IN
3382: IFFALSE 3432
// for j in tmp do
3384: LD_ADDR_VAR 0 2
3388: PUSH
3389: LD_VAR 0 3
3393: PUSH
3394: FOR_IN
3395: IFFALSE 3428
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3397: LD_VAR 0 2
3401: PPUSH
3402: LD_VAR 0 1
3406: PPUSH
3407: CALL_OW 250
3411: PPUSH
3412: LD_VAR 0 1
3416: PPUSH
3417: CALL_OW 251
3421: PPUSH
3422: CALL_OW 191
3426: GO 3394
3428: POP
3429: POP
3430: GO 3381
3432: POP
3433: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3434: LD_EXP 14
3438: PPUSH
3439: LD_STRING D1-Sci-4
3441: PPUSH
3442: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3446: LD_EXP 1
3450: PPUSH
3451: LD_STRING D1-JMM-5
3453: PPUSH
3454: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3458: LD_EXP 14
3462: PPUSH
3463: LD_STRING D1-Sci-5
3465: PPUSH
3466: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3470: LD_EXP 1
3474: PPUSH
3475: LD_STRING D1-JMM-6
3477: PPUSH
3478: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3482: LD_EXP 15
3486: PPUSH
3487: LD_STRING D1-Har-6
3489: PPUSH
3490: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3494: LD_EXP 1
3498: PPUSH
3499: LD_STRING D1-JMM-7
3501: PPUSH
3502: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3506: LD_EXP 15
3510: PPUSH
3511: LD_STRING D1-Har-7
3513: PPUSH
3514: CALL_OW 94
// if IsOK ( Denis ) then
3518: LD_EXP 3
3522: PPUSH
3523: CALL_OW 302
3527: IFFALSE 3541
// Say ( JMM , D1-JMM-8 ) ;
3529: LD_EXP 1
3533: PPUSH
3534: LD_STRING D1-JMM-8
3536: PPUSH
3537: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3541: LD_EXP 1
3545: PPUSH
3546: LD_STRING D1-JMM-8a
3548: PPUSH
3549: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3553: LD_EXP 15
3557: PPUSH
3558: LD_STRING D1-Har-8
3560: PPUSH
3561: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3565: LD_EXP 1
3569: PPUSH
3570: LD_STRING D1-JMM-9
3572: PPUSH
3573: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3577: LD_EXP 15
3581: PPUSH
3582: LD_STRING D1-Har-9
3584: PPUSH
3585: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3589: LD_EXP 1
3593: PPUSH
3594: LD_STRING D1-JMM-10
3596: PPUSH
3597: CALL_OW 88
// if IsOK ( Denis ) then
3601: LD_EXP 3
3605: PPUSH
3606: CALL_OW 302
3610: IFFALSE 3624
// Say ( JMM , D1-JMM-10a ) ;
3612: LD_EXP 1
3616: PPUSH
3617: LD_STRING D1-JMM-10a
3619: PPUSH
3620: CALL_OW 88
// SelectAndSaveCharacters ;
3624: CALL 4135 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3628: LD_EXP 18
3632: PUSH
3633: LD_INT 1
3635: ARRAY
3636: PPUSH
3637: CALL_OW 274
3641: PPUSH
3642: LD_INT 1
3644: PPUSH
3645: LD_INT 250
3647: PPUSH
3648: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3652: LD_INT 22
3654: PUSH
3655: LD_INT 1
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PUSH
3662: LD_INT 30
3664: PUSH
3665: LD_INT 29
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: PPUSH
3676: CALL_OW 69
3680: PUSH
3681: LD_INT 0
3683: GREATER
3684: IFFALSE 3710
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3686: LD_EXP 18
3690: PUSH
3691: LD_INT 1
3693: ARRAY
3694: PPUSH
3695: CALL_OW 274
3699: PPUSH
3700: LD_INT 2
3702: PPUSH
3703: LD_INT 300
3705: PPUSH
3706: CALL_OW 277
// InGameOff ;
3710: CALL_OW 9
// Query ( Q1 ) ;
3714: LD_STRING Q1
3716: PPUSH
3717: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3721: LD_INT 3
3723: PPUSH
3724: LD_INT 1
3726: PPUSH
3727: CALL_OW 424
// if IsInUnit ( JMM ) then
3731: LD_EXP 1
3735: PPUSH
3736: CALL_OW 310
3740: IFFALSE 3751
// ComExitBuilding ( JMM ) ;
3742: LD_EXP 1
3746: PPUSH
3747: CALL_OW 122
// end ;
3751: PPOPN 3
3753: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i ;
3754: LD_INT 3
3756: PPUSH
3757: LD_INT 22
3759: PUSH
3760: LD_INT 1
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 21
3769: PUSH
3770: LD_INT 1
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PPUSH
3781: CALL_OW 71
3785: PUSH
3786: LD_INT 0
3788: EQUAL
3789: IFFALSE 4069
3791: GO 3793
3793: DISABLE
3794: LD_INT 0
3796: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) > 0 then
3797: LD_INT 3
3799: PPUSH
3800: LD_INT 21
3802: PUSH
3803: LD_INT 2
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PUSH
3810: EMPTY
3811: LIST
3812: PPUSH
3813: CALL_OW 70
3817: PUSH
3818: LD_INT 0
3820: GREATER
3821: IFFALSE 4059
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) do
3823: LD_ADDR_VAR 0 1
3827: PUSH
3828: LD_INT 3
3830: PPUSH
3831: LD_INT 21
3833: PUSH
3834: LD_INT 2
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: PUSH
3841: EMPTY
3842: LIST
3843: PPUSH
3844: CALL_OW 70
3848: PUSH
3849: FOR_IN
3850: IFFALSE 4045
// begin if GetWeapon ( i ) = us_cargo_bay then
3852: LD_VAR 0 1
3856: PPUSH
3857: CALL_OW 264
3861: PUSH
3862: LD_INT 12
3864: EQUAL
3865: IFFALSE 3972
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetCargoType ( i ) , GetCargo ( i , GetCargoType ( i ) ) ] ] ;
3867: LD_ADDR_EXP 13
3871: PUSH
3872: LD_EXP 13
3876: PUSH
3877: LD_VAR 0 1
3881: PPUSH
3882: CALL_OW 248
3886: PUSH
3887: LD_VAR 0 1
3891: PPUSH
3892: CALL_OW 265
3896: PUSH
3897: LD_VAR 0 1
3901: PPUSH
3902: CALL_OW 262
3906: PUSH
3907: LD_VAR 0 1
3911: PPUSH
3912: CALL_OW 263
3916: PUSH
3917: LD_VAR 0 1
3921: PPUSH
3922: CALL_OW 264
3926: PUSH
3927: LD_VAR 0 1
3931: PPUSH
3932: CALL_OW 288
3936: PUSH
3937: LD_VAR 0 1
3941: PPUSH
3942: LD_VAR 0 1
3946: PPUSH
3947: CALL_OW 288
3951: PPUSH
3952: CALL_OW 289
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: PUSH
3966: EMPTY
3967: LIST
3968: ADD
3969: ST_TO_ADDR
// end else
3970: GO 4043
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
3972: LD_ADDR_EXP 13
3976: PUSH
3977: LD_EXP 13
3981: PUSH
3982: LD_VAR 0 1
3986: PPUSH
3987: CALL_OW 248
3991: PUSH
3992: LD_VAR 0 1
3996: PPUSH
3997: CALL_OW 265
4001: PUSH
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL_OW 262
4011: PUSH
4012: LD_VAR 0 1
4016: PPUSH
4017: CALL_OW 263
4021: PUSH
4022: LD_VAR 0 1
4026: PPUSH
4027: CALL_OW 264
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: PUSH
4039: EMPTY
4040: LIST
4041: ADD
4042: ST_TO_ADDR
// end ; end ;
4043: GO 3849
4045: POP
4046: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4047: LD_EXP 13
4051: PPUSH
4052: LD_STRING 06_VehiclesIn06_1
4054: PPUSH
4055: CALL_OW 39
// end ; ChangeMap ( 6 , %_cont ) ;
4059: LD_INT 6
4061: PPUSH
4062: LD_STRING %_cont
4064: PPUSH
4065: CALL_OW 340
// end ; end_of_file
4069: PPOPN 1
4071: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4072: LD_INT 0
4074: PPUSH
4075: PPUSH
// if exist_mode then
4076: LD_VAR 0 2
4080: IFFALSE 4105
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
4082: LD_ADDR_VAR 0 4
4086: PUSH
4087: LD_EXP 20
4091: PUSH
4092: LD_VAR 0 1
4096: STR
4097: PPUSH
4098: CALL_OW 34
4102: ST_TO_ADDR
4103: GO 4120
// unit := NewCharacter ( ident ) ;
4105: LD_ADDR_VAR 0 4
4109: PUSH
4110: LD_VAR 0 1
4114: PPUSH
4115: CALL_OW 25
4119: ST_TO_ADDR
// result := unit ;
4120: LD_ADDR_VAR 0 3
4124: PUSH
4125: LD_VAR 0 4
4129: ST_TO_ADDR
// end ;
4130: LD_VAR 0 3
4134: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test , rnd ; begin
4135: LD_INT 0
4137: PPUSH
4138: PPUSH
4139: PPUSH
4140: PPUSH
4141: PPUSH
4142: PPUSH
// rnd = [ 5 , rand ( 4 , 5 ) , 4 ] [ Difficulty ] ;
4143: LD_ADDR_VAR 0 6
4147: PUSH
4148: LD_INT 5
4150: PUSH
4151: LD_INT 4
4153: PPUSH
4154: LD_INT 5
4156: PPUSH
4157: CALL_OW 12
4161: PUSH
4162: LD_INT 4
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: LD_OWVAR 67
4174: ARRAY
4175: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4176: LD_ADDR_VAR 0 3
4180: PUSH
4181: LD_INT 22
4183: PUSH
4184: LD_INT 1
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: PUSH
4191: LD_INT 21
4193: PUSH
4194: LD_INT 1
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PUSH
4201: LD_INT 2
4203: PUSH
4204: LD_INT 25
4206: PUSH
4207: LD_INT 1
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: LD_INT 25
4216: PUSH
4217: LD_INT 2
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: LD_INT 25
4226: PUSH
4227: LD_INT 3
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 25
4236: PUSH
4237: LD_INT 4
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: LIST
4255: PPUSH
4256: CALL_OW 69
4260: PUSH
4261: LD_EXP 1
4265: PUSH
4266: LD_EXP 14
4270: PUSH
4271: LD_EXP 3
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: LIST
4280: DIFF
4281: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , rnd , rnd , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4282: LD_ADDR_VAR 0 4
4286: PUSH
4287: LD_STRING text
4289: PPUSH
4290: LD_VAR 0 6
4294: PPUSH
4295: LD_VAR 0 6
4299: PPUSH
4300: LD_INT -5
4302: PUSH
4303: LD_EXP 1
4307: PUSH
4308: LD_INT -6
4310: PUSH
4311: LD_INT -2
4313: PUSH
4314: LD_INT -3
4316: PUSH
4317: LD_INT -5
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: PUSH
4328: LD_VAR 0 3
4332: ADD
4333: PUSH
4334: LD_INT -6
4336: PUSH
4337: LD_INT -4
4339: PUSH
4340: LD_EXP 3
4344: PUSH
4345: LD_EXP 14
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: ADD
4356: PPUSH
4357: LD_INT 1
4359: PUSH
4360: LD_INT 3
4362: PUSH
4363: LD_INT 2
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: LD_INT 4
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: PPUSH
4382: CALL_OW 42
4386: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4387: LD_EXP 1
4391: PPUSH
4392: LD_EXP 19
4396: PUSH
4397: LD_STRING JMM
4399: STR
4400: PPUSH
4401: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4405: LD_EXP 14
4409: PPUSH
4410: LD_STRING DeltaDoctor
4412: PPUSH
4413: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4417: LD_EXP 3
4421: PPUSH
4422: LD_EXP 19
4426: PUSH
4427: LD_STRING Denis
4429: STR
4430: PPUSH
4431: CALL_OW 38
// if Lisa in selectedPeople then
4435: LD_EXP 4
4439: PUSH
4440: LD_VAR 0 4
4444: IN
4445: IFFALSE 4475
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4447: LD_EXP 4
4451: PPUSH
4452: LD_EXP 19
4456: PUSH
4457: LD_STRING Lisa
4459: STR
4460: PPUSH
4461: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4465: LD_INT 1
4467: PPUSH
4468: LD_STRING LisaIn06
4470: PPUSH
4471: CALL_OW 39
// end ; if Bobby in selectedPeople then
4475: LD_EXP 6
4479: PUSH
4480: LD_VAR 0 4
4484: IN
4485: IFFALSE 4515
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4487: LD_EXP 6
4491: PPUSH
4492: LD_EXP 19
4496: PUSH
4497: LD_STRING Bobby
4499: STR
4500: PPUSH
4501: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4505: LD_INT 1
4507: PPUSH
4508: LD_STRING BobbyIn06
4510: PPUSH
4511: CALL_OW 39
// end ; if Cyrus in selectedPeople then
4515: LD_EXP 7
4519: PUSH
4520: LD_VAR 0 4
4524: IN
4525: IFFALSE 4555
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4527: LD_EXP 7
4531: PPUSH
4532: LD_EXP 19
4536: PUSH
4537: LD_STRING Cyrus
4539: STR
4540: PPUSH
4541: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4545: LD_INT 1
4547: PPUSH
4548: LD_STRING CyrusIn06
4550: PPUSH
4551: CALL_OW 39
// end ; if Frank in selectedPeople then
4555: LD_EXP 5
4559: PUSH
4560: LD_VAR 0 4
4564: IN
4565: IFFALSE 4595
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4567: LD_EXP 5
4571: PPUSH
4572: LD_EXP 19
4576: PUSH
4577: LD_STRING Frank
4579: STR
4580: PPUSH
4581: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4585: LD_INT 1
4587: PPUSH
4588: LD_STRING FrankIn06
4590: PPUSH
4591: CALL_OW 39
// end ; if Brown in selectedPeople then
4595: LD_EXP 8
4599: PUSH
4600: LD_VAR 0 4
4604: IN
4605: IFFALSE 4635
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4607: LD_EXP 8
4611: PPUSH
4612: LD_EXP 19
4616: PUSH
4617: LD_STRING Brown
4619: STR
4620: PPUSH
4621: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
4625: LD_INT 1
4627: PPUSH
4628: LD_STRING BrownIn06
4630: PPUSH
4631: CALL_OW 39
// end ; if Donaldson in selectedPeople then
4635: LD_EXP 9
4639: PUSH
4640: LD_VAR 0 4
4644: IN
4645: IFFALSE 4675
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
4647: LD_EXP 9
4651: PPUSH
4652: LD_EXP 19
4656: PUSH
4657: LD_STRING Donaldson
4659: STR
4660: PPUSH
4661: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
4665: LD_INT 1
4667: PPUSH
4668: LD_STRING DonaldsonIn06
4670: PPUSH
4671: CALL_OW 39
// end ; if Gladstone in selectedPeople then
4675: LD_EXP 2
4679: PUSH
4680: LD_VAR 0 4
4684: IN
4685: IFFALSE 4715
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4687: LD_EXP 2
4691: PPUSH
4692: LD_EXP 19
4696: PUSH
4697: LD_STRING Gladstone
4699: STR
4700: PPUSH
4701: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
4705: LD_INT 1
4707: PPUSH
4708: LD_STRING GladstoneIn06
4710: PPUSH
4711: CALL_OW 39
// end ; SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4715: LD_INT 22
4717: PUSH
4718: LD_INT 1
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PUSH
4725: LD_INT 21
4727: PUSH
4728: LD_INT 1
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: PPUSH
4739: CALL_OW 69
4743: PPUSH
4744: LD_INT 4
4746: PPUSH
4747: CALL_OW 235
// for i in selectedPeople do
4751: LD_ADDR_VAR 0 2
4755: PUSH
4756: LD_VAR 0 4
4760: PUSH
4761: FOR_IN
4762: IFFALSE 4778
// SetSide ( i , 1 ) ;
4764: LD_VAR 0 2
4768: PPUSH
4769: LD_INT 1
4771: PPUSH
4772: CALL_OW 235
4776: GO 4761
4778: POP
4779: POP
// for i in yourApemans do
4780: LD_ADDR_VAR 0 2
4784: PUSH
4785: LD_EXP 12
4789: PUSH
4790: FOR_IN
4791: IFFALSE 4807
// SetSide ( i , 1 ) ;
4793: LD_VAR 0 2
4797: PPUSH
4798: LD_INT 1
4800: PPUSH
4801: CALL_OW 235
4805: GO 4790
4807: POP
4808: POP
// SetSide ( JMM , 1 ) ;
4809: LD_EXP 1
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4821: LD_EXP 12
4825: PPUSH
4826: LD_INT 2
4828: PPUSH
4829: LD_INT 5
4831: PPUSH
4832: CALL_OW 237
// SaveCharacters ( yourApemans , ApeIn06 ) ;
4836: LD_EXP 12
4840: PPUSH
4841: LD_STRING ApeIn06
4843: PPUSH
4844: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone ] , OthersIn06 ) ;
4848: LD_INT 22
4850: PUSH
4851: LD_INT 1
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PUSH
4858: LD_INT 21
4860: PUSH
4861: LD_INT 1
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 2
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 1
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 25
4883: PUSH
4884: LD_INT 2
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 25
4893: PUSH
4894: LD_INT 3
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: LD_INT 25
4903: PUSH
4904: LD_INT 4
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: LIST
4922: PPUSH
4923: CALL_OW 69
4927: PUSH
4928: LD_EXP 1
4932: PUSH
4933: LD_EXP 4
4937: PUSH
4938: LD_EXP 6
4942: PUSH
4943: LD_EXP 7
4947: PUSH
4948: LD_EXP 5
4952: PUSH
4953: LD_EXP 8
4957: PUSH
4958: LD_EXP 9
4962: PUSH
4963: LD_EXP 2
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: DIFF
4978: PPUSH
4979: LD_STRING OthersIn06
4981: PPUSH
4982: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor ] , OthersStayInDelta ) ;
4986: LD_INT 22
4988: PUSH
4989: LD_INT 4
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: PUSH
4996: LD_INT 2
4998: PUSH
4999: LD_INT 25
5001: PUSH
5002: LD_INT 1
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: PUSH
5009: LD_INT 25
5011: PUSH
5012: LD_INT 2
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PUSH
5019: LD_INT 25
5021: PUSH
5022: LD_INT 3
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: LD_INT 25
5031: PUSH
5032: LD_INT 4
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 69
5054: PUSH
5055: LD_EXP 14
5059: PUSH
5060: EMPTY
5061: LIST
5062: DIFF
5063: PPUSH
5064: LD_STRING OthersStayInDelta
5066: PPUSH
5067: CALL_OW 38
// end ; end_of_file
5071: LD_VAR 0 1
5075: RET
// on Command ( comandid ) do var i ;
5076: LD_INT 0
5078: PPUSH
// begin if comandid = 65 then
5079: LD_VAR 0 1
5083: PUSH
5084: LD_INT 65
5086: EQUAL
5087: IFFALSE 5128
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5089: LD_ADDR_VAR 0 2
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_INT 1
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: EMPTY
5105: LIST
5106: PPUSH
5107: CALL_OW 69
5111: PUSH
5112: FOR_IN
5113: IFFALSE 5126
// ComStop ( i ) ;
5115: LD_VAR 0 2
5119: PPUSH
5120: CALL_OW 141
5124: GO 5112
5126: POP
5127: POP
// end ;
5128: PPOPN 2
5130: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5131: LD_INT 0
5133: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5134: LD_ADDR_VAR 0 3
5138: PUSH
5139: LD_INT 22
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 21
5151: PUSH
5152: LD_INT 3
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 30
5161: PUSH
5162: LD_INT 0
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: LIST
5173: PPUSH
5174: CALL_OW 69
5178: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5179: LD_VAR 0 1
5183: PPUSH
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 1
5191: ARRAY
5192: PPUSH
5193: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5197: LD_VAR 0 1
5201: PPUSH
5202: LD_INT 4
5204: PPUSH
5205: CALL_OW 235
// end ;
5209: PPOPN 3
5211: END
