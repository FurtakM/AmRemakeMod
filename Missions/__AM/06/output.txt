// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 16
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// apemans = [ ] ;
  23: LD_ADDR_EXP 11
  27: PUSH
  28: EMPTY
  29: ST_TO_ADDR
// yourApemans = [ ] ;
  30: LD_ADDR_EXP 12
  34: PUSH
  35: EMPTY
  36: ST_TO_ADDR
// yourVehicles = [ ] ;
  37: LD_ADDR_EXP 13
  41: PUSH
  42: EMPTY
  43: ST_TO_ADDR
// PrepareDeltaBase ;
  44: CALL 1813 0 0
// LoadVehicles ;
  48: CALL 1245 0 0
// PrepareHeroes ;
  52: CALL 61 0 0
// PrepareRandoms ;
  56: CALL 1510 0 0
// end ; end_of_file
  60: END
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
  61: LD_INT 0
  63: PPUSH
  64: PPUSH
  65: PPUSH
  66: PPUSH
  67: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
  68: LD_ADDR_VAR 0 3
  72: PUSH
  73: LD_INT 22
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PUSH
  83: LD_INT 21
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: PUSH
  93: LD_INT 30
  95: PUSH
  96: LD_INT 0
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PPUSH
 108: CALL_OW 69
 112: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 113: LD_VAR 0 3
 117: PUSH
 118: LD_INT 1
 120: ARRAY
 121: PPUSH
 122: LD_STRING delta
 124: PPUSH
 125: CALL_OW 500
// uc_side = 1 ;
 129: LD_ADDR_OWVAR 20
 133: PUSH
 134: LD_INT 1
 136: ST_TO_ADDR
// uc_nation = 1 ;
 137: LD_ADDR_OWVAR 21
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 145: LD_ADDR_EXP 1
 149: PUSH
 150: LD_STRING JMM
 152: PPUSH
 153: LD_INT 1
 155: PPUSH
 156: CALL 3600 0 2
 160: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 161: LD_ADDR_EXP 15
 165: PUSH
 166: LD_STRING Harisson
 168: PPUSH
 169: LD_INT 0
 171: PPUSH
 172: CALL 3600 0 2
 176: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 177: LD_EXP 1
 181: PPUSH
 182: LD_VAR 0 3
 186: PUSH
 187: LD_INT 1
 189: ARRAY
 190: PPUSH
 191: CALL_OW 250
 195: PPUSH
 196: LD_VAR 0 3
 200: PUSH
 201: LD_INT 1
 203: ARRAY
 204: PPUSH
 205: CALL_OW 251
 209: PPUSH
 210: LD_INT 5
 212: PPUSH
 213: LD_INT 0
 215: PPUSH
 216: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 220: LD_EXP 1
 224: PPUSH
 225: LD_INT 1
 227: PPUSH
 228: CALL_OW 336
// if LoadVariable ( GladstoneInDelta , 0 ) = 1 then
 232: LD_STRING GladstoneInDelta
 234: PPUSH
 235: LD_INT 0
 237: PPUSH
 238: CALL_OW 30
 242: PUSH
 243: LD_INT 1
 245: EQUAL
 246: IFFALSE 319
// begin Gladstone = PrepareUnit ( Gladstone , true ) ;
 248: LD_ADDR_EXP 2
 252: PUSH
 253: LD_STRING Gladstone
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: CALL 3600 0 2
 263: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 264: LD_EXP 2
 268: PPUSH
 269: LD_VAR 0 3
 273: PUSH
 274: LD_INT 1
 276: ARRAY
 277: PPUSH
 278: CALL_OW 250
 282: PPUSH
 283: LD_VAR 0 3
 287: PUSH
 288: LD_INT 1
 290: ARRAY
 291: PPUSH
 292: CALL_OW 251
 296: PPUSH
 297: LD_INT 5
 299: PPUSH
 300: LD_INT 0
 302: PPUSH
 303: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 307: LD_EXP 2
 311: PPUSH
 312: LD_INT 4
 314: PPUSH
 315: CALL_OW 336
// end ; if LoadVariable ( DenisInDelta , 0 ) = 1 then
 319: LD_STRING DenisInDelta
 321: PPUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 30
 329: PUSH
 330: LD_INT 1
 332: EQUAL
 333: IFFALSE 406
// begin Denis = PrepareUnit ( Denis , true ) ;
 335: LD_ADDR_EXP 3
 339: PUSH
 340: LD_STRING Denis
 342: PPUSH
 343: LD_INT 1
 345: PPUSH
 346: CALL 3600 0 2
 350: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 351: LD_EXP 3
 355: PPUSH
 356: LD_VAR 0 3
 360: PUSH
 361: LD_INT 1
 363: ARRAY
 364: PPUSH
 365: CALL_OW 250
 369: PPUSH
 370: LD_VAR 0 3
 374: PUSH
 375: LD_INT 1
 377: ARRAY
 378: PPUSH
 379: CALL_OW 251
 383: PPUSH
 384: LD_INT 5
 386: PPUSH
 387: LD_INT 0
 389: PPUSH
 390: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 394: LD_EXP 3
 398: PPUSH
 399: LD_INT 4
 401: PPUSH
 402: CALL_OW 336
// end ; if LoadVariable ( FrankInDelta , 0 ) = 1 then
 406: LD_STRING FrankInDelta
 408: PPUSH
 409: LD_INT 0
 411: PPUSH
 412: CALL_OW 30
 416: PUSH
 417: LD_INT 1
 419: EQUAL
 420: IFFALSE 493
// begin Frank = PrepareUnit ( Frank , true ) ;
 422: LD_ADDR_EXP 5
 426: PUSH
 427: LD_STRING Frank
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL 3600 0 2
 437: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 438: LD_EXP 5
 442: PPUSH
 443: LD_VAR 0 3
 447: PUSH
 448: LD_INT 1
 450: ARRAY
 451: PPUSH
 452: CALL_OW 250
 456: PPUSH
 457: LD_VAR 0 3
 461: PUSH
 462: LD_INT 1
 464: ARRAY
 465: PPUSH
 466: CALL_OW 251
 470: PPUSH
 471: LD_INT 5
 473: PPUSH
 474: LD_INT 0
 476: PPUSH
 477: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 481: LD_EXP 5
 485: PPUSH
 486: LD_INT 1
 488: PPUSH
 489: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 493: LD_STRING LisaInDelta
 495: PPUSH
 496: LD_INT 0
 498: PPUSH
 499: CALL_OW 30
 503: PUSH
 504: LD_INT 1
 506: EQUAL
 507: IFFALSE 580
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 509: LD_ADDR_EXP 4
 513: PUSH
 514: LD_STRING Lisa
 516: PPUSH
 517: LD_INT 1
 519: PPUSH
 520: CALL 3600 0 2
 524: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 525: LD_EXP 4
 529: PPUSH
 530: LD_VAR 0 3
 534: PUSH
 535: LD_INT 1
 537: ARRAY
 538: PPUSH
 539: CALL_OW 250
 543: PPUSH
 544: LD_VAR 0 3
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: CALL_OW 251
 557: PPUSH
 558: LD_INT 5
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 568: LD_EXP 4
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 580: LD_STRING BobbyInDelta
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 30
 590: PUSH
 591: LD_INT 1
 593: EQUAL
 594: IFFALSE 667
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 596: LD_ADDR_EXP 6
 600: PUSH
 601: LD_STRING Bobby
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL 3600 0 2
 611: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 612: LD_EXP 6
 616: PPUSH
 617: LD_VAR 0 3
 621: PUSH
 622: LD_INT 1
 624: ARRAY
 625: PPUSH
 626: CALL_OW 250
 630: PPUSH
 631: LD_VAR 0 3
 635: PUSH
 636: LD_INT 1
 638: ARRAY
 639: PPUSH
 640: CALL_OW 251
 644: PPUSH
 645: LD_INT 5
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 655: LD_EXP 6
 659: PPUSH
 660: LD_INT 1
 662: PPUSH
 663: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 667: LD_STRING CyrusInDelta
 669: PPUSH
 670: LD_INT 0
 672: PPUSH
 673: CALL_OW 30
 677: PUSH
 678: LD_INT 1
 680: EQUAL
 681: IFFALSE 754
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 683: LD_ADDR_EXP 7
 687: PUSH
 688: LD_STRING Cyrus
 690: PPUSH
 691: LD_INT 1
 693: PPUSH
 694: CALL 3600 0 2
 698: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 699: LD_EXP 7
 703: PPUSH
 704: LD_VAR 0 3
 708: PUSH
 709: LD_INT 1
 711: ARRAY
 712: PPUSH
 713: CALL_OW 250
 717: PPUSH
 718: LD_VAR 0 3
 722: PUSH
 723: LD_INT 1
 725: ARRAY
 726: PPUSH
 727: CALL_OW 251
 731: PPUSH
 732: LD_INT 5
 734: PPUSH
 735: LD_INT 0
 737: PPUSH
 738: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 742: LD_EXP 7
 746: PPUSH
 747: LD_INT 1
 749: PPUSH
 750: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 754: LD_STRING DonaldsonInDelta
 756: PPUSH
 757: LD_INT 0
 759: PPUSH
 760: CALL_OW 30
 764: PUSH
 765: LD_INT 1
 767: EQUAL
 768: IFFALSE 841
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 770: LD_ADDR_EXP 9
 774: PUSH
 775: LD_STRING Donaldson
 777: PPUSH
 778: LD_INT 1
 780: PPUSH
 781: CALL 3600 0 2
 785: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 786: LD_EXP 9
 790: PPUSH
 791: LD_VAR 0 3
 795: PUSH
 796: LD_INT 1
 798: ARRAY
 799: PPUSH
 800: CALL_OW 250
 804: PPUSH
 805: LD_VAR 0 3
 809: PUSH
 810: LD_INT 1
 812: ARRAY
 813: PPUSH
 814: CALL_OW 251
 818: PPUSH
 819: LD_INT 5
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
 829: LD_EXP 9
 833: PPUSH
 834: LD_INT 1
 836: PPUSH
 837: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
 841: LD_STRING BrownInDelta
 843: PPUSH
 844: LD_INT 0
 846: PPUSH
 847: CALL_OW 30
 851: PUSH
 852: LD_INT 1
 854: EQUAL
 855: IFFALSE 928
// begin Brown = PrepareUnit ( Brown , true ) ;
 857: LD_ADDR_EXP 8
 861: PUSH
 862: LD_STRING Brown
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: CALL 3600 0 2
 872: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 873: LD_EXP 8
 877: PPUSH
 878: LD_VAR 0 3
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PPUSH
 887: CALL_OW 250
 891: PPUSH
 892: LD_VAR 0 3
 896: PUSH
 897: LD_INT 1
 899: ARRAY
 900: PPUSH
 901: CALL_OW 251
 905: PPUSH
 906: LD_INT 5
 908: PPUSH
 909: LD_INT 0
 911: PPUSH
 912: CALL_OW 50
// SetClass ( Brown , 2 ) ;
 916: LD_EXP 8
 920: PPUSH
 921: LD_INT 2
 923: PPUSH
 924: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
 928: LD_ADDR_EXP 10
 932: PUSH
 933: LD_STRING othersInDelta
 935: PPUSH
 936: CALL_OW 31
 940: ST_TO_ADDR
// for i in others do
 941: LD_ADDR_VAR 0 2
 945: PUSH
 946: LD_EXP 10
 950: PUSH
 951: FOR_IN
 952: IFFALSE 1038
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
 954: LD_VAR 0 2
 958: PPUSH
 959: LD_VAR 0 3
 963: PUSH
 964: LD_INT 1
 966: ARRAY
 967: PPUSH
 968: CALL_OW 250
 972: PPUSH
 973: LD_VAR 0 3
 977: PUSH
 978: LD_INT 1
 980: ARRAY
 981: PPUSH
 982: CALL_OW 251
 986: PPUSH
 987: LD_INT 35
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 50
// SetClass ( i , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] ) ;
 997: LD_VAR 0 2
1001: PPUSH
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 3
1010: PUSH
1011: LD_INT 4
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_INT 1
1022: PPUSH
1023: LD_INT 4
1025: PPUSH
1026: CALL_OW 12
1030: ARRAY
1031: PPUSH
1032: CALL_OW 336
// end ;
1036: GO 951
1038: POP
1039: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1040: LD_ADDR_EXP 11
1044: PUSH
1045: LD_STRING apeInDelta
1047: PPUSH
1048: CALL_OW 31
1052: ST_TO_ADDR
// uc_nation = 0 ;
1053: LD_ADDR_OWVAR 21
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// if apemans > 6 then
1061: LD_EXP 11
1065: PUSH
1066: LD_INT 6
1068: GREATER
1069: IFFALSE 1164
// begin for i := 1 to 5 do
1071: LD_ADDR_VAR 0 2
1075: PUSH
1076: DOUBLE
1077: LD_INT 1
1079: DEC
1080: ST_TO_ADDR
1081: LD_INT 5
1083: PUSH
1084: FOR_TO
1085: IFFALSE 1160
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1087: LD_EXP 11
1091: PUSH
1092: LD_VAR 0 2
1096: ARRAY
1097: PPUSH
1098: LD_VAR 0 3
1102: PUSH
1103: LD_INT 1
1105: ARRAY
1106: PPUSH
1107: CALL_OW 250
1111: PPUSH
1112: LD_VAR 0 3
1116: PUSH
1117: LD_INT 1
1119: ARRAY
1120: PPUSH
1121: CALL_OW 251
1125: PPUSH
1126: LD_INT 50
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1136: LD_ADDR_EXP 12
1140: PUSH
1141: LD_EXP 12
1145: PUSH
1146: LD_EXP 11
1150: PUSH
1151: LD_VAR 0 2
1155: ARRAY
1156: ADD
1157: ST_TO_ADDR
// end ;
1158: GO 1084
1160: POP
1161: POP
// end else
1162: GO 1240
// begin for i in apemans do
1164: LD_ADDR_VAR 0 2
1168: PUSH
1169: LD_EXP 11
1173: PUSH
1174: FOR_IN
1175: IFFALSE 1238
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1177: LD_VAR 0 2
1181: PPUSH
1182: LD_VAR 0 3
1186: PUSH
1187: LD_INT 1
1189: ARRAY
1190: PPUSH
1191: CALL_OW 250
1195: PPUSH
1196: LD_VAR 0 3
1200: PUSH
1201: LD_INT 1
1203: ARRAY
1204: PPUSH
1205: CALL_OW 251
1209: PPUSH
1210: LD_INT 50
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1220: LD_ADDR_EXP 12
1224: PUSH
1225: LD_EXP 12
1229: PUSH
1230: LD_VAR 0 2
1234: ADD
1235: ST_TO_ADDR
// end ;
1236: GO 1174
1238: POP
1239: POP
// end ; end ;
1240: LD_VAR 0 1
1244: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1252: LD_ADDR_VAR 0 4
1256: PUSH
1257: LD_INT 22
1259: PUSH
1260: LD_INT 1
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 21
1269: PUSH
1270: LD_INT 3
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: LD_INT 30
1279: PUSH
1280: LD_INT 0
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: ST_TO_ADDR
// uc_side = 1 ;
1297: LD_ADDR_OWVAR 20
1301: PUSH
1302: LD_INT 1
1304: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1305: LD_ADDR_VAR 0 5
1309: PUSH
1310: LD_STRING vehiclesInDelta
1312: PPUSH
1313: EMPTY
1314: PPUSH
1315: CALL_OW 30
1319: ST_TO_ADDR
// for i = 1 to vehicles do
1320: LD_ADDR_VAR 0 2
1324: PUSH
1325: DOUBLE
1326: LD_INT 1
1328: DEC
1329: ST_TO_ADDR
1330: LD_VAR 0 5
1334: PUSH
1335: FOR_TO
1336: IFFALSE 1503
// begin uc_nation = vehicles [ i ] ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_VAR 0 5
1347: PUSH
1348: LD_VAR 0 2
1352: ARRAY
1353: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1354: LD_ADDR_OWVAR 37
1358: PUSH
1359: LD_VAR 0 5
1363: PUSH
1364: LD_VAR 0 2
1368: PUSH
1369: LD_INT 1
1371: PLUS
1372: ARRAY
1373: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1374: LD_ADDR_OWVAR 39
1378: PUSH
1379: LD_VAR 0 5
1383: PUSH
1384: LD_VAR 0 2
1388: PUSH
1389: LD_INT 2
1391: PLUS
1392: ARRAY
1393: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1394: LD_ADDR_OWVAR 38
1398: PUSH
1399: LD_VAR 0 5
1403: PUSH
1404: LD_VAR 0 2
1408: PUSH
1409: LD_INT 3
1411: PLUS
1412: ARRAY
1413: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1414: LD_ADDR_OWVAR 40
1418: PUSH
1419: LD_VAR 0 5
1423: PUSH
1424: LD_VAR 0 2
1428: PUSH
1429: LD_INT 4
1431: PLUS
1432: ARRAY
1433: ST_TO_ADDR
// i = i + 4 ;
1434: LD_ADDR_VAR 0 2
1438: PUSH
1439: LD_VAR 0 2
1443: PUSH
1444: LD_INT 4
1446: PLUS
1447: ST_TO_ADDR
// veh = CreateVehicle ;
1448: LD_ADDR_VAR 0 3
1452: PUSH
1453: CALL_OW 45
1457: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 20 , false ) ;
1458: LD_VAR 0 3
1462: PPUSH
1463: LD_VAR 0 4
1467: PUSH
1468: LD_INT 1
1470: ARRAY
1471: PPUSH
1472: CALL_OW 250
1476: PPUSH
1477: LD_VAR 0 4
1481: PUSH
1482: LD_INT 1
1484: ARRAY
1485: PPUSH
1486: CALL_OW 251
1490: PPUSH
1491: LD_INT 20
1493: PPUSH
1494: LD_INT 0
1496: PPUSH
1497: CALL_OW 50
// end ;
1501: GO 1335
1503: POP
1504: POP
// end ;
1505: LD_VAR 0 1
1509: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
1510: LD_INT 0
1512: PPUSH
1513: PPUSH
1514: PPUSH
1515: PPUSH
// uc_side = 1 ;
1516: LD_ADDR_OWVAR 20
1520: PUSH
1521: LD_INT 1
1523: ST_TO_ADDR
// uc_nation = 1 ;
1524: LD_ADDR_OWVAR 21
1528: PUSH
1529: LD_INT 1
1531: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1532: LD_ADDR_VAR 0 4
1536: PUSH
1537: LD_INT 22
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 21
1549: PUSH
1550: LD_INT 3
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: PUSH
1557: LD_INT 30
1559: PUSH
1560: LD_INT 0
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: PPUSH
1572: CALL_OW 69
1576: ST_TO_ADDR
// for i = 1 to 6 + Difficulty do
1577: LD_ADDR_VAR 0 2
1581: PUSH
1582: DOUBLE
1583: LD_INT 1
1585: DEC
1586: ST_TO_ADDR
1587: LD_INT 6
1589: PUSH
1590: LD_OWVAR 67
1594: PLUS
1595: PUSH
1596: FOR_TO
1597: IFFALSE 1724
// begin hc_gallery =  ;
1599: LD_ADDR_OWVAR 33
1603: PUSH
1604: LD_STRING 
1606: ST_TO_ADDR
// hc_name =  ;
1607: LD_ADDR_OWVAR 26
1611: PUSH
1612: LD_STRING 
1614: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) - Difficulty ) ;
1615: LD_INT 0
1617: PPUSH
1618: LD_INT 1
1620: PUSH
1621: LD_INT 2
1623: PUSH
1624: LD_INT 3
1626: PUSH
1627: LD_INT 4
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 1
1638: PPUSH
1639: LD_INT 4
1641: PPUSH
1642: CALL_OW 12
1646: ARRAY
1647: PPUSH
1648: LD_INT 3
1650: PPUSH
1651: LD_INT 5
1653: PPUSH
1654: CALL_OW 12
1658: PUSH
1659: LD_OWVAR 67
1663: MINUS
1664: PPUSH
1665: CALL_OW 380
// un = CreateHuman ;
1669: LD_ADDR_VAR 0 3
1673: PUSH
1674: CALL_OW 44
1678: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1679: LD_VAR 0 3
1683: PPUSH
1684: LD_VAR 0 4
1688: PUSH
1689: LD_INT 1
1691: ARRAY
1692: PPUSH
1693: CALL_OW 250
1697: PPUSH
1698: LD_VAR 0 4
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: CALL_OW 251
1711: PPUSH
1712: LD_INT 15
1714: PPUSH
1715: LD_INT 0
1717: PPUSH
1718: CALL_OW 50
// end ;
1722: GO 1596
1724: POP
1725: POP
// hc_gallery =  ;
1726: LD_ADDR_OWVAR 33
1730: PUSH
1731: LD_STRING 
1733: ST_TO_ADDR
// hc_name = Dr. Michael Mills ;
1734: LD_ADDR_OWVAR 26
1738: PUSH
1739: LD_STRING Dr. Michael Mills
1741: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 4
1747: PPUSH
1748: LD_INT 6
1750: PPUSH
1751: CALL_OW 380
// deltaDoctor = CreateHuman ;
1755: LD_ADDR_EXP 14
1759: PUSH
1760: CALL_OW 44
1764: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1765: LD_EXP 14
1769: PPUSH
1770: LD_VAR 0 4
1774: PUSH
1775: LD_INT 1
1777: ARRAY
1778: PPUSH
1779: CALL_OW 250
1783: PPUSH
1784: LD_VAR 0 4
1788: PUSH
1789: LD_INT 1
1791: ARRAY
1792: PPUSH
1793: CALL_OW 251
1797: PPUSH
1798: LD_INT 5
1800: PPUSH
1801: LD_INT 0
1803: PPUSH
1804: CALL_OW 50
// end ; end_of_file
1808: LD_VAR 0 1
1812: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
1813: LD_INT 0
1815: PPUSH
1816: PPUSH
1817: PPUSH
1818: PPUSH
1819: PPUSH
1820: PPUSH
1821: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
1822: LD_ADDR_VAR 0 5
1826: PUSH
1827: LD_STRING buildingsInDelta
1829: PPUSH
1830: EMPTY
1831: PPUSH
1832: CALL_OW 30
1836: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
1837: LD_INT 68
1839: PPUSH
1840: LD_INT 40
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: CALL_OW 441
// uc_side = 1 ;
1850: LD_ADDR_OWVAR 20
1854: PUSH
1855: LD_INT 1
1857: ST_TO_ADDR
// uc_nation = 1 ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_INT 1
1865: ST_TO_ADDR
// for i = 1 to buildings do
1866: LD_ADDR_VAR 0 2
1870: PUSH
1871: DOUBLE
1872: LD_INT 1
1874: DEC
1875: ST_TO_ADDR
1876: LD_VAR 0 5
1880: PUSH
1881: FOR_TO
1882: IFFALSE 2080
// begin bc_type = buildings [ i ] [ 1 ] ;
1884: LD_ADDR_OWVAR 42
1888: PUSH
1889: LD_VAR 0 5
1893: PUSH
1894: LD_VAR 0 2
1898: ARRAY
1899: PUSH
1900: LD_INT 1
1902: ARRAY
1903: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
1904: LD_ADDR_OWVAR 43
1908: PUSH
1909: LD_VAR 0 5
1913: PUSH
1914: LD_VAR 0 2
1918: ARRAY
1919: PUSH
1920: LD_INT 2
1922: ARRAY
1923: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
1924: LD_OWVAR 42
1928: PUSH
1929: LD_INT 7
1931: EQUAL
1932: PUSH
1933: LD_OWVAR 42
1937: PUSH
1938: LD_INT 8
1940: EQUAL
1941: OR
1942: IFFALSE 1984
// begin bc_kind1 = buildings [ i ] [ 6 ] ;
1944: LD_ADDR_OWVAR 44
1948: PUSH
1949: LD_VAR 0 5
1953: PUSH
1954: LD_VAR 0 2
1958: ARRAY
1959: PUSH
1960: LD_INT 6
1962: ARRAY
1963: ST_TO_ADDR
// bc_kind2 = buildings [ i ] [ 7 ] ;
1964: LD_ADDR_OWVAR 45
1968: PUSH
1969: LD_VAR 0 5
1973: PUSH
1974: LD_VAR 0 2
1978: ARRAY
1979: PUSH
1980: LD_INT 7
1982: ARRAY
1983: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
1984: LD_ADDR_VAR 0 4
1988: PUSH
1989: LD_VAR 0 5
1993: PUSH
1994: LD_VAR 0 2
1998: ARRAY
1999: PUSH
2000: LD_INT 3
2002: ARRAY
2003: PPUSH
2004: LD_VAR 0 5
2008: PUSH
2009: LD_VAR 0 2
2013: ARRAY
2014: PUSH
2015: LD_INT 4
2017: ARRAY
2018: PPUSH
2019: LD_VAR 0 5
2023: PUSH
2024: LD_VAR 0 2
2028: ARRAY
2029: PUSH
2030: LD_INT 5
2032: ARRAY
2033: PPUSH
2034: CALL_OW 47
2038: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2039: LD_VAR 0 4
2043: PPUSH
2044: CALL_OW 266
2048: PUSH
2049: LD_INT 32
2051: EQUAL
2052: IFFALSE 2078
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2054: LD_VAR 0 4
2058: PPUSH
2059: LD_VAR 0 5
2063: PUSH
2064: LD_VAR 0 2
2068: ARRAY
2069: PUSH
2070: LD_INT 8
2072: ARRAY
2073: PPUSH
2074: CALL_OW 431
// end ;
2078: GO 1881
2080: POP
2081: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2082: LD_ADDR_VAR 0 6
2086: PUSH
2087: LD_INT 22
2089: PUSH
2090: LD_INT 1
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 2
2099: PUSH
2100: LD_INT 30
2102: PUSH
2103: LD_INT 6
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: LD_INT 30
2112: PUSH
2113: LD_INT 7
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: PUSH
2120: LD_INT 30
2122: PUSH
2123: LD_INT 8
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PPUSH
2140: CALL_OW 69
2144: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2145: LD_ADDR_VAR 0 7
2149: PUSH
2150: LD_INT 22
2152: PUSH
2153: LD_INT 1
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: PUSH
2160: LD_INT 30
2162: PUSH
2163: LD_INT 0
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2179: LD_VAR 0 6
2183: PUSH
2184: LD_INT 0
2186: GREATER
2187: PUSH
2188: LD_VAR 0 7
2192: PUSH
2193: LD_INT 0
2195: GREATER
2196: AND
2197: IFFALSE 2207
// baseCorrect = 1 ;
2199: LD_ADDR_EXP 16
2203: PUSH
2204: LD_INT 1
2206: ST_TO_ADDR
// if baseCorrect = 0 then
2207: LD_EXP 16
2211: PUSH
2212: LD_INT 0
2214: EQUAL
2215: IFFALSE 2588
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2217: LD_ADDR_VAR 0 2
2221: PUSH
2222: LD_INT 22
2224: PUSH
2225: LD_INT 1
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: PUSH
2232: LD_INT 21
2234: PUSH
2235: LD_INT 3
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PPUSH
2246: CALL_OW 69
2250: PUSH
2251: FOR_IN
2252: IFFALSE 2265
// RemoveUnit ( i ) ;
2254: LD_VAR 0 2
2258: PPUSH
2259: CALL_OW 64
2263: GO 2251
2265: POP
2266: POP
// uc_nation = 1 ;
2267: LD_ADDR_OWVAR 21
2271: PUSH
2272: LD_INT 1
2274: ST_TO_ADDR
// uc_side = 1 ;
2275: LD_ADDR_OWVAR 20
2279: PUSH
2280: LD_INT 1
2282: ST_TO_ADDR
// bc_level = 5 ;
2283: LD_ADDR_OWVAR 43
2287: PUSH
2288: LD_INT 5
2290: ST_TO_ADDR
// bc_type = b_depot ;
2291: LD_ADDR_OWVAR 42
2295: PUSH
2296: LD_INT 0
2298: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2299: LD_INT 50
2301: PPUSH
2302: LD_INT 22
2304: PPUSH
2305: LD_INT 0
2307: PPUSH
2308: CALL_OW 47
// bc_type = b_bunker ;
2312: LD_ADDR_OWVAR 42
2316: PUSH
2317: LD_INT 32
2319: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2320: LD_ADDR_VAR 0 4
2324: PUSH
2325: LD_INT 68
2327: PPUSH
2328: LD_INT 24
2330: PPUSH
2331: LD_INT 4
2333: PPUSH
2334: CALL_OW 47
2338: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2339: LD_VAR 0 4
2343: PPUSH
2344: LD_INT 4
2346: PUSH
2347: LD_INT 11
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: LD_INT 1
2356: PPUSH
2357: LD_INT 2
2359: PPUSH
2360: CALL_OW 12
2364: ARRAY
2365: PPUSH
2366: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2370: LD_ADDR_VAR 0 4
2374: PUSH
2375: LD_INT 71
2377: PPUSH
2378: LD_INT 34
2380: PPUSH
2381: LD_INT 4
2383: PPUSH
2384: CALL_OW 47
2388: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2389: LD_VAR 0 4
2393: PPUSH
2394: LD_INT 4
2396: PUSH
2397: LD_INT 11
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PUSH
2404: LD_INT 1
2406: PPUSH
2407: LD_INT 2
2409: PPUSH
2410: CALL_OW 12
2414: ARRAY
2415: PPUSH
2416: CALL_OW 431
// bc_type = 31 ;
2420: LD_ADDR_OWVAR 42
2424: PUSH
2425: LD_INT 31
2427: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
2428: LD_INT 51
2430: PPUSH
2431: LD_INT 7
2433: PPUSH
2434: LD_INT 3
2436: PPUSH
2437: CALL_OW 47
// bc_type = b_oil_mine ;
2441: LD_ADDR_OWVAR 42
2445: PUSH
2446: LD_INT 29
2448: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
2449: LD_INT 68
2451: PPUSH
2452: LD_INT 40
2454: PPUSH
2455: LD_INT 1
2457: PPUSH
2458: CALL_OW 47
// bc_type = b_workshop ;
2462: LD_ADDR_OWVAR 42
2466: PUSH
2467: LD_INT 2
2469: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2470: LD_INT 38
2472: PPUSH
2473: LD_INT 20
2475: PPUSH
2476: LD_INT 2
2478: PPUSH
2479: CALL_OW 47
// bc_type = b_armoury ;
2483: LD_ADDR_OWVAR 42
2487: PUSH
2488: LD_INT 4
2490: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2491: LD_INT 38
2493: PPUSH
2494: LD_INT 20
2496: PPUSH
2497: LD_INT 2
2499: PPUSH
2500: CALL_OW 47
// bc_type = b_solar_power ;
2504: LD_ADDR_OWVAR 42
2508: PUSH
2509: LD_INT 27
2511: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
2512: LD_INT 46
2514: PPUSH
2515: LD_INT 12
2517: PPUSH
2518: LD_INT 1
2520: PPUSH
2521: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
2525: LD_INT 48
2527: PPUSH
2528: LD_INT 11
2530: PPUSH
2531: LD_INT 2
2533: PPUSH
2534: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
2538: LD_INT 49
2540: PPUSH
2541: LD_INT 11
2543: PPUSH
2544: LD_INT 3
2546: PPUSH
2547: CALL_OW 47
// bc_type = b_lab_half ;
2551: LD_ADDR_OWVAR 42
2555: PUSH
2556: LD_INT 7
2558: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
2559: LD_ADDR_OWVAR 44
2563: PUSH
2564: LD_INT 15
2566: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2567: LD_ADDR_OWVAR 45
2571: PUSH
2572: LD_INT 9
2574: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
2575: LD_INT 42
2577: PPUSH
2578: LD_INT 15
2580: PPUSH
2581: LD_INT 2
2583: PPUSH
2584: CALL_OW 47
// end ; end ; end_of_file
2588: LD_VAR 0 1
2592: RET
// every 1 do var i , j , lab , tmp ;
2593: GO 2595
2595: DISABLE
2596: LD_INT 0
2598: PPUSH
2599: PPUSH
2600: PPUSH
2601: PPUSH
// begin lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2602: LD_ADDR_VAR 0 3
2606: PUSH
2607: LD_INT 22
2609: PUSH
2610: LD_INT 1
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 2
2619: PUSH
2620: LD_INT 30
2622: PUSH
2623: LD_INT 6
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PUSH
2630: LD_INT 30
2632: PUSH
2633: LD_INT 7
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: PUSH
2640: LD_INT 30
2642: PUSH
2643: LD_INT 8
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: PPUSH
2660: CALL_OW 69
2664: ST_TO_ADDR
// InGameOn ;
2665: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
2669: LD_VAR 0 3
2673: PUSH
2674: LD_INT 1
2676: ARRAY
2677: PPUSH
2678: CALL_OW 87
// if IsOK ( Denis ) then
2682: LD_EXP 3
2686: PPUSH
2687: CALL_OW 302
2691: IFFALSE 2719
// begin SetTech ( tech_radar , 1 , state_researched ) ;
2693: LD_INT 6
2695: PPUSH
2696: LD_INT 1
2698: PPUSH
2699: LD_INT 2
2701: PPUSH
2702: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
2706: LD_INT 20
2708: PPUSH
2709: LD_INT 1
2711: PPUSH
2712: LD_INT 1
2714: PPUSH
2715: CALL_OW 324
// end ; ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
2719: LD_EXP 1
2723: PUSH
2724: LD_EXP 14
2728: PUSH
2729: LD_EXP 3
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: LIST
2738: PPUSH
2739: LD_VAR 0 3
2743: PUSH
2744: LD_INT 1
2746: ARRAY
2747: PPUSH
2748: CALL_OW 120
// Say ( JMM , D1-JMM-1 ) ;
2752: LD_EXP 1
2756: PPUSH
2757: LD_STRING D1-JMM-1
2759: PPUSH
2760: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
2764: LD_EXP 14
2768: PPUSH
2769: LD_STRING D1-Sci-1
2771: PPUSH
2772: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
2776: LD_EXP 1
2780: PPUSH
2781: LD_STRING D1-JMM-2
2783: PPUSH
2784: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
2788: LD_EXP 14
2792: PPUSH
2793: LD_STRING D1-Sci-2
2795: PPUSH
2796: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
2800: LD_EXP 1
2804: PPUSH
2805: LD_STRING D1-JMM-3
2807: PPUSH
2808: CALL_OW 88
// if IsOK ( Denis ) then
2812: LD_EXP 3
2816: PPUSH
2817: CALL_OW 302
2821: IFFALSE 2837
// Say ( DeltaDoctor , D1-Sci-3 ) else
2823: LD_EXP 14
2827: PPUSH
2828: LD_STRING D1-Sci-3
2830: PPUSH
2831: CALL_OW 88
2835: GO 2849
// Say ( DeltaDoctor , D1-Sci-3a ) ;
2837: LD_EXP 14
2841: PPUSH
2842: LD_STRING D1-Sci-3a
2844: PPUSH
2845: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
2849: LD_EXP 1
2853: PPUSH
2854: LD_STRING D1-JMM-4
2856: PPUSH
2857: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
2861: LD_ADDR_VAR 0 4
2865: PUSH
2866: LD_INT 22
2868: PUSH
2869: LD_INT 1
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: PUSH
2876: LD_INT 25
2878: PUSH
2879: LD_INT 4
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: PUSH
2886: LD_INT 3
2888: PUSH
2889: LD_INT 54
2891: PUSH
2892: EMPTY
2893: LIST
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: LIST
2903: PPUSH
2904: CALL_OW 69
2908: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
2909: LD_ADDR_VAR 0 1
2913: PUSH
2914: LD_INT 22
2916: PUSH
2917: LD_INT 0
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PPUSH
2924: CALL_OW 69
2928: PUSH
2929: FOR_IN
2930: IFFALSE 2980
// for j in tmp do
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: FOR_IN
2943: IFFALSE 2976
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
2945: LD_VAR 0 2
2949: PPUSH
2950: LD_VAR 0 1
2954: PPUSH
2955: CALL_OW 250
2959: PPUSH
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 251
2969: PPUSH
2970: CALL_OW 191
2974: GO 2942
2976: POP
2977: POP
2978: GO 2929
2980: POP
2981: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
2982: LD_EXP 14
2986: PPUSH
2987: LD_STRING D1-Sci-4
2989: PPUSH
2990: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
2994: LD_EXP 1
2998: PPUSH
2999: LD_STRING D1-JMM-5
3001: PPUSH
3002: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3006: LD_EXP 14
3010: PPUSH
3011: LD_STRING D1-Sci-5
3013: PPUSH
3014: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3018: LD_EXP 1
3022: PPUSH
3023: LD_STRING D1-JMM-6
3025: PPUSH
3026: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3030: LD_EXP 15
3034: PPUSH
3035: LD_STRING D1-Har-6
3037: PPUSH
3038: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3042: LD_EXP 1
3046: PPUSH
3047: LD_STRING D1-JMM-7
3049: PPUSH
3050: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3054: LD_EXP 15
3058: PPUSH
3059: LD_STRING D1-Har-7
3061: PPUSH
3062: CALL_OW 94
// if IsOK ( Denis ) then
3066: LD_EXP 3
3070: PPUSH
3071: CALL_OW 302
3075: IFFALSE 3089
// Say ( JMM , D1-JMM-8 ) ;
3077: LD_EXP 1
3081: PPUSH
3082: LD_STRING D1-JMM-8
3084: PPUSH
3085: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3089: LD_EXP 1
3093: PPUSH
3094: LD_STRING D1-JMM-8a
3096: PPUSH
3097: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3101: LD_EXP 15
3105: PPUSH
3106: LD_STRING D1-Har-8
3108: PPUSH
3109: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3113: LD_EXP 1
3117: PPUSH
3118: LD_STRING D1-JMM-9
3120: PPUSH
3121: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3125: LD_EXP 15
3129: PPUSH
3130: LD_STRING D1-Har-9
3132: PPUSH
3133: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3137: LD_EXP 1
3141: PPUSH
3142: LD_STRING D1-JMM-10
3144: PPUSH
3145: CALL_OW 88
// if IsOK ( Denis ) then
3149: LD_EXP 3
3153: PPUSH
3154: CALL_OW 302
3158: IFFALSE 3172
// Say ( JMM , D1-JMM-10a ) ;
3160: LD_EXP 1
3164: PPUSH
3165: LD_STRING D1-JMM-10a
3167: PPUSH
3168: CALL_OW 88
// SelectAndSaveCharacters ;
3172: CALL 3657 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3176: LD_VAR 0 3
3180: PUSH
3181: LD_INT 1
3183: ARRAY
3184: PPUSH
3185: CALL_OW 274
3189: PPUSH
3190: LD_INT 1
3192: PPUSH
3193: LD_INT 250
3195: PPUSH
3196: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_INT 30
3212: PUSH
3213: LD_INT 29
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PPUSH
3224: CALL_OW 69
3228: PUSH
3229: LD_INT 0
3231: GREATER
3232: IFFALSE 3258
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3234: LD_VAR 0 3
3238: PUSH
3239: LD_INT 1
3241: ARRAY
3242: PPUSH
3243: CALL_OW 274
3247: PPUSH
3248: LD_INT 2
3250: PPUSH
3251: LD_INT 300
3253: PPUSH
3254: CALL_OW 277
// InGameOff ;
3258: CALL_OW 9
// Query ( Q1 ) ;
3262: LD_STRING Q1
3264: PPUSH
3265: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3269: LD_INT 3
3271: PPUSH
3272: LD_INT 1
3274: PPUSH
3275: CALL_OW 424
// end ;
3279: PPOPN 4
3281: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i ;
3282: LD_INT 3
3284: PPUSH
3285: LD_INT 22
3287: PUSH
3288: LD_INT 1
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PUSH
3295: LD_INT 21
3297: PUSH
3298: LD_INT 1
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PPUSH
3309: CALL_OW 71
3313: PUSH
3314: LD_INT 0
3316: EQUAL
3317: IFFALSE 3597
3319: GO 3321
3321: DISABLE
3322: LD_INT 0
3324: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) > 0 then
3325: LD_INT 3
3327: PPUSH
3328: LD_INT 21
3330: PUSH
3331: LD_INT 2
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: PUSH
3338: EMPTY
3339: LIST
3340: PPUSH
3341: CALL_OW 70
3345: PUSH
3346: LD_INT 0
3348: GREATER
3349: IFFALSE 3587
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) do
3351: LD_ADDR_VAR 0 1
3355: PUSH
3356: LD_INT 3
3358: PPUSH
3359: LD_INT 21
3361: PUSH
3362: LD_INT 2
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: EMPTY
3370: LIST
3371: PPUSH
3372: CALL_OW 70
3376: PUSH
3377: FOR_IN
3378: IFFALSE 3573
// begin if GetWeapon ( i ) = us_cargo_bay then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_INT 12
3392: EQUAL
3393: IFFALSE 3500
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetCargoType ( i ) , GetCargo ( i , GetCargoType ( i ) ) ] ] ;
3395: LD_ADDR_EXP 13
3399: PUSH
3400: LD_EXP 13
3404: PUSH
3405: LD_VAR 0 1
3409: PPUSH
3410: CALL_OW 248
3414: PUSH
3415: LD_VAR 0 1
3419: PPUSH
3420: CALL_OW 265
3424: PUSH
3425: LD_VAR 0 1
3429: PPUSH
3430: CALL_OW 262
3434: PUSH
3435: LD_VAR 0 1
3439: PPUSH
3440: CALL_OW 263
3444: PUSH
3445: LD_VAR 0 1
3449: PPUSH
3450: CALL_OW 264
3454: PUSH
3455: LD_VAR 0 1
3459: PPUSH
3460: CALL_OW 288
3464: PUSH
3465: LD_VAR 0 1
3469: PPUSH
3470: LD_VAR 0 1
3474: PPUSH
3475: CALL_OW 288
3479: PPUSH
3480: CALL_OW 289
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: ADD
3497: ST_TO_ADDR
// end else
3498: GO 3571
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
3500: LD_ADDR_EXP 13
3504: PUSH
3505: LD_EXP 13
3509: PUSH
3510: LD_VAR 0 1
3514: PPUSH
3515: CALL_OW 248
3519: PUSH
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL_OW 265
3529: PUSH
3530: LD_VAR 0 1
3534: PPUSH
3535: CALL_OW 262
3539: PUSH
3540: LD_VAR 0 1
3544: PPUSH
3545: CALL_OW 263
3549: PUSH
3550: LD_VAR 0 1
3554: PPUSH
3555: CALL_OW 264
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: PUSH
3567: EMPTY
3568: LIST
3569: ADD
3570: ST_TO_ADDR
// end ; end ;
3571: GO 3377
3573: POP
3574: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
3575: LD_EXP 13
3579: PPUSH
3580: LD_STRING 06_VehiclesIn06_1
3582: PPUSH
3583: CALL_OW 39
// end ; ChangeMap ( 6 , %_cont ) ;
3587: LD_INT 6
3589: PPUSH
3590: LD_STRING %_cont
3592: PPUSH
3593: CALL_OW 340
// end ; end_of_file
3597: PPOPN 1
3599: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3600: LD_INT 0
3602: PPUSH
3603: PPUSH
// if exist_mode then
3604: LD_VAR 0 2
3608: IFFALSE 3627
// unit := CreateCharacter ( ident ) else
3610: LD_ADDR_VAR 0 4
3614: PUSH
3615: LD_VAR 0 1
3619: PPUSH
3620: CALL_OW 34
3624: ST_TO_ADDR
3625: GO 3642
// unit := NewCharacter ( ident ) ;
3627: LD_ADDR_VAR 0 4
3631: PUSH
3632: LD_VAR 0 1
3636: PPUSH
3637: CALL_OW 25
3641: ST_TO_ADDR
// result := unit ;
3642: LD_ADDR_VAR 0 3
3646: PUSH
3647: LD_VAR 0 4
3651: ST_TO_ADDR
// end ;
3652: LD_VAR 0 3
3656: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test ; begin
3657: LD_INT 0
3659: PPUSH
3660: PPUSH
3661: PPUSH
3662: PPUSH
3663: PPUSH
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: LD_INT 22
3671: PUSH
3672: LD_INT 1
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: PUSH
3679: LD_INT 21
3681: PUSH
3682: LD_INT 1
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: PUSH
3689: LD_INT 2
3691: PUSH
3692: LD_INT 25
3694: PUSH
3695: LD_INT 1
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: LD_INT 25
3704: PUSH
3705: LD_INT 2
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: LD_INT 25
3714: PUSH
3715: LD_INT 3
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PUSH
3722: LD_INT 25
3724: PUSH
3725: LD_INT 4
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: LIST
3743: PPUSH
3744: CALL_OW 69
3748: PUSH
3749: LD_EXP 1
3753: PUSH
3754: LD_EXP 14
3758: PUSH
3759: LD_EXP 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: LIST
3768: DIFF
3769: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
3770: LD_ADDR_VAR 0 4
3774: PUSH
3775: LD_STRING text
3777: PPUSH
3778: LD_INT 5
3780: PPUSH
3781: LD_INT 5
3783: PPUSH
3784: LD_INT -5
3786: PUSH
3787: LD_EXP 1
3791: PUSH
3792: LD_INT -6
3794: PUSH
3795: LD_INT -2
3797: PUSH
3798: LD_INT -3
3800: PUSH
3801: LD_INT -5
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: PUSH
3812: LD_VAR 0 3
3816: ADD
3817: PUSH
3818: LD_INT -6
3820: PUSH
3821: LD_INT -4
3823: PUSH
3824: LD_EXP 3
3828: PUSH
3829: LD_EXP 14
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: ADD
3840: PPUSH
3841: LD_INT 1
3843: PUSH
3844: LD_INT 3
3846: PUSH
3847: LD_INT 2
3849: PUSH
3850: LD_INT 1
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PUSH
3857: LD_INT 4
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PPUSH
3866: CALL_OW 42
3870: ST_TO_ADDR
// SaveCharacters ( JMM , JMM ) ;
3871: LD_EXP 1
3875: PPUSH
3876: LD_STRING JMM
3878: PPUSH
3879: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
3883: LD_EXP 14
3887: PPUSH
3888: LD_STRING DeltaDoctor
3890: PPUSH
3891: CALL_OW 38
// SaveCharacters ( Denis , Denis ) ;
3895: LD_EXP 3
3899: PPUSH
3900: LD_STRING Denis
3902: PPUSH
3903: CALL_OW 38
// SaveCharacters ( yourApemans , ApeIn06 ) ;
3907: LD_EXP 12
3911: PPUSH
3912: LD_STRING ApeIn06
3914: PPUSH
3915: CALL_OW 38
// if Lisa in selectedPeople then
3919: LD_EXP 4
3923: PUSH
3924: LD_VAR 0 4
3928: IN
3929: IFFALSE 3953
// begin SaveCharacters ( Lisa , Lisa ) ;
3931: LD_EXP 4
3935: PPUSH
3936: LD_STRING Lisa
3938: PPUSH
3939: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
3943: LD_INT 1
3945: PPUSH
3946: LD_STRING LisaIn06
3948: PPUSH
3949: CALL_OW 39
// end ; if Bobby in selectedPeople then
3953: LD_EXP 6
3957: PUSH
3958: LD_VAR 0 4
3962: IN
3963: IFFALSE 3987
// begin SaveCharacters ( Bobby , Bobby ) ;
3965: LD_EXP 6
3969: PPUSH
3970: LD_STRING Bobby
3972: PPUSH
3973: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
3977: LD_INT 1
3979: PPUSH
3980: LD_STRING BobbyIn06
3982: PPUSH
3983: CALL_OW 39
// end ; if Cyrus in selectedPeople then
3987: LD_EXP 7
3991: PUSH
3992: LD_VAR 0 4
3996: IN
3997: IFFALSE 4021
// begin SaveCharacters ( Cyrus , Cyrus ) ;
3999: LD_EXP 7
4003: PPUSH
4004: LD_STRING Cyrus
4006: PPUSH
4007: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING CyrusIn06
4016: PPUSH
4017: CALL_OW 39
// end ; if Frank in selectedPeople then
4021: LD_EXP 5
4025: PUSH
4026: LD_VAR 0 4
4030: IN
4031: IFFALSE 4055
// begin SaveCharacters ( Frank , Frank ) ;
4033: LD_EXP 5
4037: PPUSH
4038: LD_STRING Frank
4040: PPUSH
4041: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4045: LD_INT 1
4047: PPUSH
4048: LD_STRING FrankIn06
4050: PPUSH
4051: CALL_OW 39
// end ; if Brown in selectedPeople then
4055: LD_EXP 8
4059: PUSH
4060: LD_VAR 0 4
4064: IN
4065: IFFALSE 4089
// begin SaveCharacters ( Brown , Brown ) ;
4067: LD_EXP 8
4071: PPUSH
4072: LD_STRING Brown
4074: PPUSH
4075: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
4079: LD_INT 1
4081: PPUSH
4082: LD_STRING BrownIn06
4084: PPUSH
4085: CALL_OW 39
// end ; if Donaldson in selectedPeople then
4089: LD_EXP 9
4093: PUSH
4094: LD_VAR 0 4
4098: IN
4099: IFFALSE 4123
// begin SaveCharacters ( Donaldson , Donaldson ) ;
4101: LD_EXP 9
4105: PPUSH
4106: LD_STRING Donaldson
4108: PPUSH
4109: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
4113: LD_INT 1
4115: PPUSH
4116: LD_STRING DonaldsonIn06
4118: PPUSH
4119: CALL_OW 39
// end ; if Gladstone in selectedPeople then
4123: LD_EXP 2
4127: PUSH
4128: LD_VAR 0 4
4132: IN
4133: IFFALSE 4157
// begin SaveCharacters ( Gladstone , Gladstone ) ;
4135: LD_EXP 2
4139: PPUSH
4140: LD_STRING Gladstone
4142: PPUSH
4143: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
4147: LD_INT 1
4149: PPUSH
4150: LD_STRING GladstoneIn06
4152: PPUSH
4153: CALL_OW 39
// end ; SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4157: LD_INT 22
4159: PUSH
4160: LD_INT 1
4162: PUSH
4163: EMPTY
4164: LIST
4165: LIST
4166: PUSH
4167: LD_INT 21
4169: PUSH
4170: LD_INT 1
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PPUSH
4181: CALL_OW 69
4185: PPUSH
4186: LD_INT 4
4188: PPUSH
4189: CALL_OW 235
// for i in selectedPeople do
4193: LD_ADDR_VAR 0 2
4197: PUSH
4198: LD_VAR 0 4
4202: PUSH
4203: FOR_IN
4204: IFFALSE 4220
// SetSide ( i , 1 ) ;
4206: LD_VAR 0 2
4210: PPUSH
4211: LD_INT 1
4213: PPUSH
4214: CALL_OW 235
4218: GO 4203
4220: POP
4221: POP
// for i in yourApemans do
4222: LD_ADDR_VAR 0 2
4226: PUSH
4227: LD_EXP 12
4231: PUSH
4232: FOR_IN
4233: IFFALSE 4249
// SetSide ( i , 1 ) ;
4235: LD_VAR 0 2
4239: PPUSH
4240: LD_INT 1
4242: PPUSH
4243: CALL_OW 235
4247: GO 4232
4249: POP
4250: POP
// SetSide ( JMM , 1 ) ;
4251: LD_EXP 1
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4263: LD_EXP 12
4267: PPUSH
4268: LD_INT 2
4270: PPUSH
4271: LD_INT 5
4273: PPUSH
4274: CALL_OW 237
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone ] , OthersIn06 ) ;
4278: LD_INT 22
4280: PUSH
4281: LD_INT 1
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: LD_INT 21
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: EMPTY
4299: LIST
4300: LIST
4301: PPUSH
4302: CALL_OW 69
4306: PUSH
4307: LD_EXP 1
4311: PUSH
4312: LD_EXP 4
4316: PUSH
4317: LD_EXP 6
4321: PUSH
4322: LD_EXP 7
4326: PUSH
4327: LD_EXP 5
4331: PUSH
4332: LD_EXP 8
4336: PUSH
4337: LD_EXP 9
4341: PUSH
4342: LD_EXP 2
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: DIFF
4357: PPUSH
4358: LD_STRING OthersIn06
4360: PPUSH
4361: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor ] , OthersStayInDelta ) ;
4365: LD_INT 22
4367: PUSH
4368: LD_INT 4
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: LD_INT 2
4377: PUSH
4378: LD_INT 25
4380: PUSH
4381: LD_INT 1
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: PUSH
4388: LD_INT 25
4390: PUSH
4391: LD_INT 2
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PUSH
4398: LD_INT 25
4400: PUSH
4401: LD_INT 3
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 4
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 69
4433: PUSH
4434: LD_EXP 14
4438: PUSH
4439: EMPTY
4440: LIST
4441: DIFF
4442: PPUSH
4443: LD_STRING OthersStayInDelta
4445: PPUSH
4446: CALL_OW 38
// end ; end_of_file
4450: LD_VAR 0 1
4454: RET
// on Command ( comandid ) do var i ;
4455: LD_INT 0
4457: PPUSH
// begin if comandid = 65 then
4458: LD_VAR 0 1
4462: PUSH
4463: LD_INT 65
4465: EQUAL
4466: IFFALSE 4507
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
4468: LD_ADDR_VAR 0 2
4472: PUSH
4473: LD_INT 22
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: PPUSH
4486: CALL_OW 69
4490: PUSH
4491: FOR_IN
4492: IFFALSE 4505
// ComStop ( i ) ;
4494: LD_VAR 0 2
4498: PPUSH
4499: CALL_OW 141
4503: GO 4491
4505: POP
4506: POP
// end ;
4507: PPOPN 2
4509: END
// on ApemanTamed ( apeman , human ) do var tmp ;
4510: LD_INT 0
4512: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
4513: LD_ADDR_VAR 0 3
4517: PUSH
4518: LD_INT 22
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 21
4530: PUSH
4531: LD_INT 3
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: LD_INT 30
4540: PUSH
4541: LD_INT 0
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: PPUSH
4553: CALL_OW 69
4557: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
4558: LD_VAR 0 1
4562: PPUSH
4563: LD_VAR 0 3
4567: PUSH
4568: LD_INT 1
4570: ARRAY
4571: PPUSH
4572: CALL_OW 120
// SetSide ( apeman , 4 ) ;
4576: LD_VAR 0 1
4580: PPUSH
4581: LD_INT 4
4583: PPUSH
4584: CALL_OW 235
// end ;
4588: PPOPN 3
4590: END
