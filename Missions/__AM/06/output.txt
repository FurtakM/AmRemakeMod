// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 17
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 18
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources = [ ] ;
  59: LD_ADDR_EXP 20
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 21
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 22
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2233 0 0
// LoadVehicles ;
  86: CALL 1275 0 0
// PrepareHeroes ;
  90: CALL 162 0 0
// PrepareRandoms ;
  94: CALL 1576 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
  98: LD_ADDR_EXP 19
 102: PUSH
 103: LD_INT 22
 105: PUSH
 106: LD_INT 1
 108: PUSH
 109: EMPTY
 110: LIST
 111: LIST
 112: PUSH
 113: LD_INT 2
 115: PUSH
 116: LD_INT 30
 118: PUSH
 119: LD_INT 6
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PUSH
 126: LD_INT 30
 128: PUSH
 129: LD_INT 7
 131: PUSH
 132: EMPTY
 133: LIST
 134: LIST
 135: PUSH
 136: LD_INT 30
 138: PUSH
 139: LD_INT 8
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: LIST
 150: LIST
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: PPUSH
 156: CALL_OW 69
 160: ST_TO_ADDR
// end ; end_of_file
 161: END
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 162: LD_INT 0
 164: PPUSH
 165: PPUSH
 166: PPUSH
 167: PPUSH
 168: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 169: LD_ADDR_VAR 0 3
 173: PUSH
 174: LD_INT 22
 176: PUSH
 177: LD_INT 1
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: LD_INT 21
 186: PUSH
 187: LD_INT 3
 189: PUSH
 190: EMPTY
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 30
 196: PUSH
 197: LD_INT 0
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: LIST
 208: PPUSH
 209: CALL_OW 69
 213: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 214: LD_VAR 0 3
 218: PUSH
 219: LD_INT 1
 221: ARRAY
 222: PPUSH
 223: LD_STRING delta
 225: PPUSH
 226: CALL_OW 500
// uc_side = 1 ;
 230: LD_ADDR_OWVAR 20
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// uc_nation = 1 ;
 238: LD_ADDR_OWVAR 21
 242: PUSH
 243: LD_INT 1
 245: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 246: LD_ADDR_EXP 1
 250: PUSH
 251: LD_STRING JMM
 253: PPUSH
 254: LD_INT 1
 256: PPUSH
 257: CALL 4247 0 2
 261: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 262: LD_ADDR_EXP 16
 266: PUSH
 267: LD_STRING Harisson
 269: PPUSH
 270: LD_INT 0
 272: PPUSH
 273: CALL 4247 0 2
 277: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 278: LD_EXP 1
 282: PPUSH
 283: LD_VAR 0 3
 287: PUSH
 288: LD_INT 1
 290: ARRAY
 291: PPUSH
 292: CALL_OW 250
 296: PPUSH
 297: LD_VAR 0 3
 301: PUSH
 302: LD_INT 1
 304: ARRAY
 305: PPUSH
 306: CALL_OW 251
 310: PPUSH
 311: LD_INT 5
 313: PPUSH
 314: LD_INT 0
 316: PPUSH
 317: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_INT 1
 328: PPUSH
 329: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true ) ;
 333: LD_ADDR_EXP 2
 337: PUSH
 338: LD_STRING Gladstone
 340: PPUSH
 341: LD_INT 1
 343: PPUSH
 344: CALL 4247 0 2
 348: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 349: LD_EXP 2
 353: PPUSH
 354: LD_VAR 0 3
 358: PUSH
 359: LD_INT 1
 361: ARRAY
 362: PPUSH
 363: CALL_OW 250
 367: PPUSH
 368: LD_VAR 0 3
 372: PUSH
 373: LD_INT 1
 375: ARRAY
 376: PPUSH
 377: CALL_OW 251
 381: PPUSH
 382: LD_INT 5
 384: PPUSH
 385: LD_INT 0
 387: PPUSH
 388: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 392: LD_EXP 2
 396: PPUSH
 397: LD_INT 4
 399: PPUSH
 400: CALL_OW 336
// Denis = PrepareUnit ( Denis , true ) ;
 404: LD_ADDR_EXP 3
 408: PUSH
 409: LD_STRING Denis
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL 4247 0 2
 419: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 420: LD_EXP 3
 424: PPUSH
 425: LD_VAR 0 3
 429: PUSH
 430: LD_INT 1
 432: ARRAY
 433: PPUSH
 434: CALL_OW 250
 438: PPUSH
 439: LD_VAR 0 3
 443: PUSH
 444: LD_INT 1
 446: ARRAY
 447: PPUSH
 448: CALL_OW 251
 452: PPUSH
 453: LD_INT 5
 455: PPUSH
 456: LD_INT 0
 458: PPUSH
 459: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 463: LD_EXP 3
 467: PPUSH
 468: LD_INT 4
 470: PPUSH
 471: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 475: LD_STRING FrankInDelta
 477: PPUSH
 478: LD_INT 0
 480: PPUSH
 481: CALL_OW 30
 485: PUSH
 486: LD_INT 1
 488: EQUAL
 489: IFFALSE 562
// begin Frank = PrepareUnit ( Frank , true ) ;
 491: LD_ADDR_EXP 5
 495: PUSH
 496: LD_STRING Frank
 498: PPUSH
 499: LD_INT 1
 501: PPUSH
 502: CALL 4247 0 2
 506: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 507: LD_EXP 5
 511: PPUSH
 512: LD_VAR 0 3
 516: PUSH
 517: LD_INT 1
 519: ARRAY
 520: PPUSH
 521: CALL_OW 250
 525: PPUSH
 526: LD_VAR 0 3
 530: PUSH
 531: LD_INT 1
 533: ARRAY
 534: PPUSH
 535: CALL_OW 251
 539: PPUSH
 540: LD_INT 5
 542: PPUSH
 543: LD_INT 0
 545: PPUSH
 546: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 550: LD_EXP 5
 554: PPUSH
 555: LD_INT 1
 557: PPUSH
 558: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 562: LD_STRING LisaInDelta
 564: PPUSH
 565: LD_INT 0
 567: PPUSH
 568: CALL_OW 30
 572: PUSH
 573: LD_INT 1
 575: EQUAL
 576: IFFALSE 649
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 578: LD_ADDR_EXP 4
 582: PUSH
 583: LD_STRING Lisa
 585: PPUSH
 586: LD_INT 1
 588: PPUSH
 589: CALL 4247 0 2
 593: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 594: LD_EXP 4
 598: PPUSH
 599: LD_VAR 0 3
 603: PUSH
 604: LD_INT 1
 606: ARRAY
 607: PPUSH
 608: CALL_OW 250
 612: PPUSH
 613: LD_VAR 0 3
 617: PUSH
 618: LD_INT 1
 620: ARRAY
 621: PPUSH
 622: CALL_OW 251
 626: PPUSH
 627: LD_INT 5
 629: PPUSH
 630: LD_INT 0
 632: PPUSH
 633: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 637: LD_EXP 4
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 649: LD_STRING BobbyInDelta
 651: PPUSH
 652: LD_INT 0
 654: PPUSH
 655: CALL_OW 30
 659: PUSH
 660: LD_INT 1
 662: EQUAL
 663: IFFALSE 736
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 665: LD_ADDR_EXP 6
 669: PUSH
 670: LD_STRING Bobby
 672: PPUSH
 673: LD_INT 1
 675: PPUSH
 676: CALL 4247 0 2
 680: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 681: LD_EXP 6
 685: PPUSH
 686: LD_VAR 0 3
 690: PUSH
 691: LD_INT 1
 693: ARRAY
 694: PPUSH
 695: CALL_OW 250
 699: PPUSH
 700: LD_VAR 0 3
 704: PUSH
 705: LD_INT 1
 707: ARRAY
 708: PPUSH
 709: CALL_OW 251
 713: PPUSH
 714: LD_INT 5
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 724: LD_EXP 6
 728: PPUSH
 729: LD_INT 1
 731: PPUSH
 732: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 736: LD_STRING CyrusInDelta
 738: PPUSH
 739: LD_INT 0
 741: PPUSH
 742: CALL_OW 30
 746: PUSH
 747: LD_INT 1
 749: EQUAL
 750: IFFALSE 823
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 752: LD_ADDR_EXP 7
 756: PUSH
 757: LD_STRING Cyrus
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL 4247 0 2
 767: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 768: LD_EXP 7
 772: PPUSH
 773: LD_VAR 0 3
 777: PUSH
 778: LD_INT 1
 780: ARRAY
 781: PPUSH
 782: CALL_OW 250
 786: PPUSH
 787: LD_VAR 0 3
 791: PUSH
 792: LD_INT 1
 794: ARRAY
 795: PPUSH
 796: CALL_OW 251
 800: PPUSH
 801: LD_INT 5
 803: PPUSH
 804: LD_INT 0
 806: PPUSH
 807: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 811: LD_EXP 7
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 823: LD_STRING DonaldsonInDelta
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 30
 833: PUSH
 834: LD_INT 1
 836: EQUAL
 837: IFFALSE 910
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 839: LD_ADDR_EXP 9
 843: PUSH
 844: LD_STRING Donaldson
 846: PPUSH
 847: LD_INT 1
 849: PPUSH
 850: CALL 4247 0 2
 854: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 855: LD_EXP 9
 859: PPUSH
 860: LD_VAR 0 3
 864: PUSH
 865: LD_INT 1
 867: ARRAY
 868: PPUSH
 869: CALL_OW 250
 873: PPUSH
 874: LD_VAR 0 3
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: CALL_OW 251
 887: PPUSH
 888: LD_INT 5
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
 898: LD_EXP 9
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
 910: LD_STRING BrownInDelta
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL_OW 30
 920: PUSH
 921: LD_INT 1
 923: EQUAL
 924: IFFALSE 997
// begin Brown = PrepareUnit ( Brown , true ) ;
 926: LD_ADDR_EXP 8
 930: PUSH
 931: LD_STRING Brown
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: CALL 4247 0 2
 941: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 942: LD_EXP 8
 946: PPUSH
 947: LD_VAR 0 3
 951: PUSH
 952: LD_INT 1
 954: ARRAY
 955: PPUSH
 956: CALL_OW 250
 960: PPUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 1
 968: ARRAY
 969: PPUSH
 970: CALL_OW 251
 974: PPUSH
 975: LD_INT 5
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 50
// SetClass ( Brown , 2 ) ;
 985: LD_EXP 8
 989: PPUSH
 990: LD_INT 2
 992: PPUSH
 993: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
 997: LD_ADDR_EXP 10
1001: PUSH
1002: LD_STRING othersInDelta
1004: PPUSH
1005: CALL_OW 31
1009: ST_TO_ADDR
// for i in others do
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: LD_EXP 10
1019: PUSH
1020: FOR_IN
1021: IFFALSE 1068
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1023: LD_VAR 0 2
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PPUSH
1037: CALL_OW 250
1041: PPUSH
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: CALL_OW 251
1055: PPUSH
1056: LD_INT 35
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 50
1066: GO 1020
1068: POP
1069: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1070: LD_ADDR_EXP 12
1074: PUSH
1075: LD_STRING apeInDelta
1077: PPUSH
1078: CALL_OW 31
1082: ST_TO_ADDR
// uc_nation = 0 ;
1083: LD_ADDR_OWVAR 21
1087: PUSH
1088: LD_INT 0
1090: ST_TO_ADDR
// if apemans > 5 then
1091: LD_EXP 12
1095: PUSH
1096: LD_INT 5
1098: GREATER
1099: IFFALSE 1194
// begin for i := 1 to 5 do
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: DOUBLE
1107: LD_INT 1
1109: DEC
1110: ST_TO_ADDR
1111: LD_INT 5
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1190
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1117: LD_EXP 12
1121: PUSH
1122: LD_VAR 0 2
1126: ARRAY
1127: PPUSH
1128: LD_VAR 0 3
1132: PUSH
1133: LD_INT 1
1135: ARRAY
1136: PPUSH
1137: CALL_OW 250
1141: PPUSH
1142: LD_VAR 0 3
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: PPUSH
1151: CALL_OW 251
1155: PPUSH
1156: LD_INT 50
1158: PPUSH
1159: LD_INT 0
1161: PPUSH
1162: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1166: LD_ADDR_EXP 13
1170: PUSH
1171: LD_EXP 13
1175: PUSH
1176: LD_EXP 12
1180: PUSH
1181: LD_VAR 0 2
1185: ARRAY
1186: ADD
1187: ST_TO_ADDR
// end ;
1188: GO 1114
1190: POP
1191: POP
// end else
1192: GO 1270
// begin for i in apemans do
1194: LD_ADDR_VAR 0 2
1198: PUSH
1199: LD_EXP 12
1203: PUSH
1204: FOR_IN
1205: IFFALSE 1268
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1207: LD_VAR 0 2
1211: PPUSH
1212: LD_VAR 0 3
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PPUSH
1221: CALL_OW 250
1225: PPUSH
1226: LD_VAR 0 3
1230: PUSH
1231: LD_INT 1
1233: ARRAY
1234: PPUSH
1235: CALL_OW 251
1239: PPUSH
1240: LD_INT 50
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1250: LD_ADDR_EXP 13
1254: PUSH
1255: LD_EXP 13
1259: PUSH
1260: LD_VAR 0 2
1264: ADD
1265: ST_TO_ADDR
// end ;
1266: GO 1204
1268: POP
1269: POP
// end ; end ;
1270: LD_VAR 0 1
1274: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1275: LD_INT 0
1277: PPUSH
1278: PPUSH
1279: PPUSH
1280: PPUSH
1281: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1282: LD_ADDR_VAR 0 4
1286: PUSH
1287: LD_INT 22
1289: PUSH
1290: LD_INT 1
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 21
1299: PUSH
1300: LD_INT 3
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 30
1309: PUSH
1310: LD_INT 0
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: PPUSH
1322: CALL_OW 69
1326: ST_TO_ADDR
// uc_side = 1 ;
1327: LD_ADDR_OWVAR 20
1331: PUSH
1332: LD_INT 1
1334: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1335: LD_ADDR_VAR 0 5
1339: PUSH
1340: LD_STRING vehiclesInDelta
1342: PPUSH
1343: EMPTY
1344: PPUSH
1345: CALL_OW 30
1349: ST_TO_ADDR
// for i = 1 to vehicles do
1350: LD_ADDR_VAR 0 2
1354: PUSH
1355: DOUBLE
1356: LD_INT 1
1358: DEC
1359: ST_TO_ADDR
1360: LD_VAR 0 5
1364: PUSH
1365: FOR_TO
1366: IFFALSE 1569
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1368: LD_VAR 0 5
1372: PUSH
1373: LD_VAR 0 2
1377: PUSH
1378: LD_INT 4
1380: PLUS
1381: ARRAY
1382: PUSH
1383: LD_INT 11
1385: EQUAL
1386: PUSH
1387: LD_VAR 0 5
1391: PUSH
1392: LD_VAR 0 2
1396: ARRAY
1397: PUSH
1398: LD_INT 3
1400: EQUAL
1401: OR
1402: IFFALSE 1553
// begin uc_nation = vehicles [ i ] ;
1404: LD_ADDR_OWVAR 21
1408: PUSH
1409: LD_VAR 0 5
1413: PUSH
1414: LD_VAR 0 2
1418: ARRAY
1419: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1420: LD_ADDR_OWVAR 37
1424: PUSH
1425: LD_VAR 0 5
1429: PUSH
1430: LD_VAR 0 2
1434: PUSH
1435: LD_INT 1
1437: PLUS
1438: ARRAY
1439: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1440: LD_ADDR_OWVAR 39
1444: PUSH
1445: LD_VAR 0 5
1449: PUSH
1450: LD_VAR 0 2
1454: PUSH
1455: LD_INT 2
1457: PLUS
1458: ARRAY
1459: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1460: LD_ADDR_OWVAR 38
1464: PUSH
1465: LD_VAR 0 5
1469: PUSH
1470: LD_VAR 0 2
1474: PUSH
1475: LD_INT 3
1477: PLUS
1478: ARRAY
1479: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_VAR 0 5
1489: PUSH
1490: LD_VAR 0 2
1494: PUSH
1495: LD_INT 4
1497: PLUS
1498: ARRAY
1499: ST_TO_ADDR
// veh = CreateVehicle ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: CALL_OW 45
1509: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1510: LD_VAR 0 3
1514: PPUSH
1515: LD_VAR 0 4
1519: PUSH
1520: LD_INT 1
1522: ARRAY
1523: PPUSH
1524: CALL_OW 250
1528: PPUSH
1529: LD_VAR 0 4
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PPUSH
1538: CALL_OW 251
1542: PPUSH
1543: LD_INT 40
1545: PPUSH
1546: LD_INT 0
1548: PPUSH
1549: CALL_OW 50
// end ; i = i + 4 ;
1553: LD_ADDR_VAR 0 2
1557: PUSH
1558: LD_VAR 0 2
1562: PUSH
1563: LD_INT 4
1565: PLUS
1566: ST_TO_ADDR
// end ;
1567: GO 1365
1569: POP
1570: POP
// end ;
1571: LD_VAR 0 1
1575: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1576: LD_INT 0
1578: PPUSH
1579: PPUSH
1580: PPUSH
1581: PPUSH
1582: PPUSH
// uc_side = 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// uc_nation = 1 ;
1591: LD_ADDR_OWVAR 21
1595: PUSH
1596: LD_INT 1
1598: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1599: LD_ADDR_VAR 0 4
1603: PUSH
1604: LD_INT 22
1606: PUSH
1607: LD_INT 1
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: PUSH
1614: LD_INT 21
1616: PUSH
1617: LD_INT 3
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PUSH
1624: LD_INT 30
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: PPUSH
1639: CALL_OW 69
1643: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1644: LD_INT 22
1646: PUSH
1647: LD_INT 1
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 25
1656: PUSH
1657: LD_INT 4
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 26
1666: PUSH
1667: LD_INT 1
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: LIST
1678: PUSH
1679: EMPTY
1680: LIST
1681: PPUSH
1682: CALL_OW 69
1686: PUSH
1687: LD_EXP 1
1691: PUSH
1692: LD_EXP 7
1696: PUSH
1697: LD_EXP 6
1701: PUSH
1702: LD_EXP 5
1706: PUSH
1707: LD_EXP 2
1711: PUSH
1712: LD_EXP 3
1716: PUSH
1717: LD_EXP 8
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: DIFF
1731: IFFALSE 1832
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1733: LD_ADDR_EXP 15
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 4
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 26
1760: PUSH
1761: LD_INT 1
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: PPUSH
1776: CALL_OW 69
1780: PUSH
1781: LD_EXP 1
1785: PUSH
1786: LD_EXP 7
1790: PUSH
1791: LD_EXP 6
1795: PUSH
1796: LD_EXP 5
1800: PUSH
1801: LD_EXP 2
1805: PUSH
1806: LD_EXP 3
1810: PUSH
1811: LD_EXP 8
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: DIFF
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: ST_TO_ADDR
1830: GO 1979
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1832: LD_ADDR_VAR 0 5
1836: PUSH
1837: LD_INT 22
1839: PUSH
1840: LD_INT 1
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: LD_INT 26
1849: PUSH
1850: LD_INT 1
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: EMPTY
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 1
1873: PUSH
1874: LD_EXP 7
1878: PUSH
1879: LD_EXP 6
1883: PUSH
1884: LD_EXP 5
1888: PUSH
1889: LD_EXP 2
1893: PUSH
1894: LD_EXP 3
1898: PUSH
1899: LD_EXP 8
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: DIFF
1913: ST_TO_ADDR
// if filter then
1914: LD_VAR 0 5
1918: IFFALSE 1979
// for i in filter do
1920: LD_ADDR_VAR 0 2
1924: PUSH
1925: LD_VAR 0 5
1929: PUSH
1930: FOR_IN
1931: IFFALSE 1977
// if GetSkill ( i , 4 ) >= 4 then
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_INT 4
1940: PPUSH
1941: CALL_OW 259
1945: PUSH
1946: LD_INT 4
1948: GREATEREQUAL
1949: IFFALSE 1975
// begin deltaDoctor := i ;
1951: LD_ADDR_EXP 15
1955: PUSH
1956: LD_VAR 0 2
1960: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
1961: LD_EXP 15
1965: PPUSH
1966: LD_INT 4
1968: PPUSH
1969: CALL_OW 336
// break ;
1973: GO 1977
// end ;
1975: GO 1930
1977: POP
1978: POP
// end ; for i = 1 to 6 do
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: DOUBLE
1985: LD_INT 1
1987: DEC
1988: ST_TO_ADDR
1989: LD_INT 6
1991: PUSH
1992: FOR_TO
1993: IFFALSE 2136
// begin hc_gallery =  ;
1995: LD_ADDR_OWVAR 33
1999: PUSH
2000: LD_STRING 
2002: ST_TO_ADDR
// hc_name =  ;
2003: LD_ADDR_OWVAR 26
2007: PUSH
2008: LD_STRING 
2010: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) - Difficulty ) ;
2011: LD_INT 0
2013: PPUSH
2014: LD_INT 1
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: LD_INT 3
2022: PUSH
2023: LD_INT 4
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 1
2034: PPUSH
2035: LD_INT 4
2037: PPUSH
2038: CALL_OW 12
2042: ARRAY
2043: PPUSH
2044: LD_INT 3
2046: PPUSH
2047: LD_INT 5
2049: PPUSH
2050: CALL_OW 12
2054: PUSH
2055: LD_OWVAR 67
2059: MINUS
2060: PPUSH
2061: CALL_OW 380
// un = CreateHuman ;
2065: LD_ADDR_VAR 0 3
2069: PUSH
2070: CALL_OW 44
2074: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2075: LD_ADDR_EXP 11
2079: PUSH
2080: LD_EXP 11
2084: PUSH
2085: LD_VAR 0 3
2089: ADD
2090: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2091: LD_VAR 0 3
2095: PPUSH
2096: LD_VAR 0 4
2100: PUSH
2101: LD_INT 1
2103: ARRAY
2104: PPUSH
2105: CALL_OW 250
2109: PPUSH
2110: LD_VAR 0 4
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PPUSH
2119: CALL_OW 251
2123: PPUSH
2124: LD_INT 15
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 1992
2136: POP
2137: POP
// if deltaDoctor then
2138: LD_EXP 15
2142: IFFALSE 2146
// exit ;
2144: GO 2228
// hc_gallery =  ;
2146: LD_ADDR_OWVAR 33
2150: PUSH
2151: LD_STRING 
2153: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2154: LD_ADDR_OWVAR 26
2158: PUSH
2159: LD_STRING Dr. Adam Charles Dawkins
2161: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2162: LD_INT 1
2164: PPUSH
2165: LD_INT 4
2167: PPUSH
2168: LD_INT 6
2170: PPUSH
2171: CALL_OW 380
// deltaDoctor = CreateHuman ;
2175: LD_ADDR_EXP 15
2179: PUSH
2180: CALL_OW 44
2184: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2185: LD_EXP 15
2189: PPUSH
2190: LD_VAR 0 4
2194: PUSH
2195: LD_INT 1
2197: ARRAY
2198: PPUSH
2199: CALL_OW 250
2203: PPUSH
2204: LD_VAR 0 4
2208: PUSH
2209: LD_INT 1
2211: ARRAY
2212: PPUSH
2213: CALL_OW 251
2217: PPUSH
2218: LD_INT 5
2220: PPUSH
2221: LD_INT 0
2223: PPUSH
2224: CALL_OW 50
// end ; end_of_file
2228: LD_VAR 0 1
2232: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2233: LD_INT 0
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2242: LD_ADDR_VAR 0 5
2246: PUSH
2247: LD_STRING buildingsInDelta
2249: PPUSH
2250: EMPTY
2251: PPUSH
2252: CALL_OW 30
2256: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2257: LD_INT 68
2259: PPUSH
2260: LD_INT 40
2262: PPUSH
2263: LD_INT 1
2265: PPUSH
2266: CALL_OW 441
// uc_side = 1 ;
2270: LD_ADDR_OWVAR 20
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// uc_nation = 1 ;
2278: LD_ADDR_OWVAR 21
2282: PUSH
2283: LD_INT 1
2285: ST_TO_ADDR
// for i = 1 to buildings do
2286: LD_ADDR_VAR 0 2
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_VAR 0 5
2300: PUSH
2301: FOR_TO
2302: IFFALSE 2500
// begin bc_type = buildings [ i ] [ 1 ] ;
2304: LD_ADDR_OWVAR 42
2308: PUSH
2309: LD_VAR 0 5
2313: PUSH
2314: LD_VAR 0 2
2318: ARRAY
2319: PUSH
2320: LD_INT 1
2322: ARRAY
2323: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2324: LD_ADDR_OWVAR 43
2328: PUSH
2329: LD_VAR 0 5
2333: PUSH
2334: LD_VAR 0 2
2338: ARRAY
2339: PUSH
2340: LD_INT 2
2342: ARRAY
2343: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2344: LD_OWVAR 42
2348: PUSH
2349: LD_INT 7
2351: EQUAL
2352: PUSH
2353: LD_OWVAR 42
2357: PUSH
2358: LD_INT 8
2360: EQUAL
2361: OR
2362: IFFALSE 2404
// begin bc_kind1 = buildings [ i ] [ 6 ] ;
2364: LD_ADDR_OWVAR 44
2368: PUSH
2369: LD_VAR 0 5
2373: PUSH
2374: LD_VAR 0 2
2378: ARRAY
2379: PUSH
2380: LD_INT 6
2382: ARRAY
2383: ST_TO_ADDR
// bc_kind2 = buildings [ i ] [ 7 ] ;
2384: LD_ADDR_OWVAR 45
2388: PUSH
2389: LD_VAR 0 5
2393: PUSH
2394: LD_VAR 0 2
2398: ARRAY
2399: PUSH
2400: LD_INT 7
2402: ARRAY
2403: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2404: LD_ADDR_VAR 0 4
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 2
2418: ARRAY
2419: PUSH
2420: LD_INT 3
2422: ARRAY
2423: PPUSH
2424: LD_VAR 0 5
2428: PUSH
2429: LD_VAR 0 2
2433: ARRAY
2434: PUSH
2435: LD_INT 4
2437: ARRAY
2438: PPUSH
2439: LD_VAR 0 5
2443: PUSH
2444: LD_VAR 0 2
2448: ARRAY
2449: PUSH
2450: LD_INT 5
2452: ARRAY
2453: PPUSH
2454: CALL_OW 47
2458: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2459: LD_VAR 0 4
2463: PPUSH
2464: CALL_OW 266
2468: PUSH
2469: LD_INT 32
2471: EQUAL
2472: IFFALSE 2498
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2474: LD_VAR 0 4
2478: PPUSH
2479: LD_VAR 0 5
2483: PUSH
2484: LD_VAR 0 2
2488: ARRAY
2489: PUSH
2490: LD_INT 8
2492: ARRAY
2493: PPUSH
2494: CALL_OW 431
// end ;
2498: GO 2301
2500: POP
2501: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2502: LD_ADDR_VAR 0 6
2506: PUSH
2507: LD_INT 22
2509: PUSH
2510: LD_INT 1
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PUSH
2517: LD_INT 2
2519: PUSH
2520: LD_INT 30
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 30
2532: PUSH
2533: LD_INT 7
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 30
2542: PUSH
2543: LD_INT 8
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PPUSH
2560: CALL_OW 69
2564: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2565: LD_ADDR_VAR 0 7
2569: PUSH
2570: LD_INT 22
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 30
2582: PUSH
2583: LD_INT 0
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PPUSH
2594: CALL_OW 69
2598: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2599: LD_VAR 0 6
2603: PUSH
2604: LD_INT 0
2606: GREATER
2607: PUSH
2608: LD_VAR 0 7
2612: PUSH
2613: LD_INT 0
2615: GREATER
2616: AND
2617: IFFALSE 2627
// baseCorrect = 1 ;
2619: LD_ADDR_EXP 17
2623: PUSH
2624: LD_INT 1
2626: ST_TO_ADDR
// if baseCorrect = 0 then
2627: LD_EXP 17
2631: PUSH
2632: LD_INT 0
2634: EQUAL
2635: IFFALSE 3008
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2637: LD_ADDR_VAR 0 2
2641: PUSH
2642: LD_INT 22
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 21
2654: PUSH
2655: LD_INT 3
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PPUSH
2666: CALL_OW 69
2670: PUSH
2671: FOR_IN
2672: IFFALSE 2685
// RemoveUnit ( i ) ;
2674: LD_VAR 0 2
2678: PPUSH
2679: CALL_OW 64
2683: GO 2671
2685: POP
2686: POP
// uc_nation = 1 ;
2687: LD_ADDR_OWVAR 21
2691: PUSH
2692: LD_INT 1
2694: ST_TO_ADDR
// uc_side = 1 ;
2695: LD_ADDR_OWVAR 20
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// bc_level = 5 ;
2703: LD_ADDR_OWVAR 43
2707: PUSH
2708: LD_INT 5
2710: ST_TO_ADDR
// bc_type = b_depot ;
2711: LD_ADDR_OWVAR 42
2715: PUSH
2716: LD_INT 0
2718: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2719: LD_INT 50
2721: PPUSH
2722: LD_INT 22
2724: PPUSH
2725: LD_INT 0
2727: PPUSH
2728: CALL_OW 47
// bc_type = b_bunker ;
2732: LD_ADDR_OWVAR 42
2736: PUSH
2737: LD_INT 32
2739: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2740: LD_ADDR_VAR 0 4
2744: PUSH
2745: LD_INT 68
2747: PPUSH
2748: LD_INT 24
2750: PPUSH
2751: LD_INT 4
2753: PPUSH
2754: CALL_OW 47
2758: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2759: LD_VAR 0 4
2763: PPUSH
2764: LD_INT 4
2766: PUSH
2767: LD_INT 11
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 1
2776: PPUSH
2777: LD_INT 2
2779: PPUSH
2780: CALL_OW 12
2784: ARRAY
2785: PPUSH
2786: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2790: LD_ADDR_VAR 0 4
2794: PUSH
2795: LD_INT 71
2797: PPUSH
2798: LD_INT 34
2800: PPUSH
2801: LD_INT 4
2803: PPUSH
2804: CALL_OW 47
2808: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2809: LD_VAR 0 4
2813: PPUSH
2814: LD_INT 4
2816: PUSH
2817: LD_INT 11
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 1
2826: PPUSH
2827: LD_INT 2
2829: PPUSH
2830: CALL_OW 12
2834: ARRAY
2835: PPUSH
2836: CALL_OW 431
// bc_type = 31 ;
2840: LD_ADDR_OWVAR 42
2844: PUSH
2845: LD_INT 31
2847: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
2848: LD_INT 51
2850: PPUSH
2851: LD_INT 7
2853: PPUSH
2854: LD_INT 3
2856: PPUSH
2857: CALL_OW 47
// bc_type = b_oil_mine ;
2861: LD_ADDR_OWVAR 42
2865: PUSH
2866: LD_INT 29
2868: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
2869: LD_INT 68
2871: PPUSH
2872: LD_INT 40
2874: PPUSH
2875: LD_INT 1
2877: PPUSH
2878: CALL_OW 47
// bc_type = b_workshop ;
2882: LD_ADDR_OWVAR 42
2886: PUSH
2887: LD_INT 2
2889: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2890: LD_INT 38
2892: PPUSH
2893: LD_INT 20
2895: PPUSH
2896: LD_INT 2
2898: PPUSH
2899: CALL_OW 47
// bc_type = b_armoury ;
2903: LD_ADDR_OWVAR 42
2907: PUSH
2908: LD_INT 4
2910: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2911: LD_INT 38
2913: PPUSH
2914: LD_INT 20
2916: PPUSH
2917: LD_INT 2
2919: PPUSH
2920: CALL_OW 47
// bc_type = b_solar_power ;
2924: LD_ADDR_OWVAR 42
2928: PUSH
2929: LD_INT 27
2931: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
2932: LD_INT 46
2934: PPUSH
2935: LD_INT 12
2937: PPUSH
2938: LD_INT 1
2940: PPUSH
2941: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
2945: LD_INT 48
2947: PPUSH
2948: LD_INT 11
2950: PPUSH
2951: LD_INT 2
2953: PPUSH
2954: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
2958: LD_INT 49
2960: PPUSH
2961: LD_INT 11
2963: PPUSH
2964: LD_INT 3
2966: PPUSH
2967: CALL_OW 47
// bc_type = b_lab_half ;
2971: LD_ADDR_OWVAR 42
2975: PUSH
2976: LD_INT 7
2978: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
2979: LD_ADDR_OWVAR 44
2983: PUSH
2984: LD_INT 15
2986: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2987: LD_ADDR_OWVAR 45
2991: PUSH
2992: LD_INT 9
2994: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
2995: LD_INT 42
2997: PPUSH
2998: LD_INT 15
3000: PPUSH
3001: LD_INT 2
3003: PPUSH
3004: CALL_OW 47
// end ; end ; end_of_file
3008: LD_VAR 0 1
3012: RET
// every 1 do var i , j , tmp ;
3013: GO 3015
3015: DISABLE
3016: LD_INT 0
3018: PPUSH
3019: PPUSH
3020: PPUSH
// begin InGameOn ;
3021: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3025: LD_EXP 19
3029: PUSH
3030: LD_INT 1
3032: ARRAY
3033: PPUSH
3034: CALL_OW 87
// if IsOK ( Denis ) then
3038: LD_EXP 3
3042: PPUSH
3043: CALL_OW 302
3047: IFFALSE 3075
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3049: LD_INT 6
3051: PPUSH
3052: LD_INT 1
3054: PPUSH
3055: LD_INT 2
3057: PPUSH
3058: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3062: LD_INT 20
3064: PPUSH
3065: LD_INT 1
3067: PPUSH
3068: LD_INT 1
3070: PPUSH
3071: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3075: LD_EXP 1
3079: PPUSH
3080: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3084: LD_EXP 1
3088: PPUSH
3089: LD_EXP 15
3093: PPUSH
3094: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3098: LD_INT 35
3100: PPUSH
3101: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3105: LD_EXP 15
3109: PPUSH
3110: LD_EXP 1
3114: PPUSH
3115: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3119: LD_EXP 1
3123: PPUSH
3124: LD_EXP 15
3128: PPUSH
3129: CALL_OW 296
3133: PUSH
3134: LD_INT 5
3136: LESS
3137: IFFALSE 3098
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3139: LD_EXP 15
3143: PPUSH
3144: LD_EXP 1
3148: PPUSH
3149: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3153: LD_EXP 1
3157: PPUSH
3158: LD_STRING D1-JMM-1
3160: PPUSH
3161: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3165: LD_EXP 15
3169: PPUSH
3170: LD_STRING D1-Sci-1
3172: PPUSH
3173: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3177: LD_EXP 1
3181: PUSH
3182: LD_EXP 15
3186: PUSH
3187: LD_EXP 3
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: LIST
3196: PPUSH
3197: LD_EXP 19
3201: PUSH
3202: LD_INT 1
3204: ARRAY
3205: PPUSH
3206: CALL_OW 120
// end ;
3210: PPOPN 3
3212: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3213: LD_EXP 1
3217: PPUSH
3218: CALL_OW 310
3222: PUSH
3223: LD_EXP 19
3227: PUSH
3228: LD_INT 1
3230: ARRAY
3231: EQUAL
3232: PUSH
3233: LD_EXP 15
3237: PPUSH
3238: CALL_OW 310
3242: PUSH
3243: LD_EXP 19
3247: PUSH
3248: LD_INT 1
3250: ARRAY
3251: EQUAL
3252: AND
3253: IFFALSE 3799
3255: GO 3257
3257: DISABLE
3258: LD_INT 0
3260: PPUSH
3261: PPUSH
3262: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3263: LD_EXP 19
3267: PUSH
3268: LD_INT 1
3270: ARRAY
3271: PPUSH
3272: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3276: LD_EXP 1
3280: PPUSH
3281: LD_STRING D1-JMM-2
3283: PPUSH
3284: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3288: LD_EXP 15
3292: PPUSH
3293: LD_STRING D1-Sci-2
3295: PPUSH
3296: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3300: LD_EXP 1
3304: PPUSH
3305: LD_STRING D1-JMM-3
3307: PPUSH
3308: CALL_OW 88
// if IsOK ( Denis ) then
3312: LD_EXP 3
3316: PPUSH
3317: CALL_OW 302
3321: IFFALSE 3337
// Say ( DeltaDoctor , D1-Sci-3 ) else
3323: LD_EXP 15
3327: PPUSH
3328: LD_STRING D1-Sci-3
3330: PPUSH
3331: CALL_OW 88
3335: GO 3349
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3337: LD_EXP 15
3341: PPUSH
3342: LD_STRING D1-Sci-3a
3344: PPUSH
3345: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3349: LD_EXP 1
3353: PPUSH
3354: LD_STRING D1-JMM-4
3356: PPUSH
3357: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3361: LD_ADDR_VAR 0 3
3365: PUSH
3366: LD_INT 22
3368: PUSH
3369: LD_INT 1
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: PUSH
3376: LD_INT 25
3378: PUSH
3379: LD_INT 4
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: PUSH
3386: LD_INT 3
3388: PUSH
3389: LD_INT 54
3391: PUSH
3392: EMPTY
3393: LIST
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: PPUSH
3404: CALL_OW 69
3408: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3409: LD_ADDR_VAR 0 1
3413: PUSH
3414: LD_INT 22
3416: PUSH
3417: LD_INT 0
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: PPUSH
3424: CALL_OW 69
3428: PUSH
3429: FOR_IN
3430: IFFALSE 3480
// for j in tmp do
3432: LD_ADDR_VAR 0 2
3436: PUSH
3437: LD_VAR 0 3
3441: PUSH
3442: FOR_IN
3443: IFFALSE 3476
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3445: LD_VAR 0 2
3449: PPUSH
3450: LD_VAR 0 1
3454: PPUSH
3455: CALL_OW 250
3459: PPUSH
3460: LD_VAR 0 1
3464: PPUSH
3465: CALL_OW 251
3469: PPUSH
3470: CALL_OW 191
3474: GO 3442
3476: POP
3477: POP
3478: GO 3429
3480: POP
3481: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3482: LD_EXP 15
3486: PPUSH
3487: LD_STRING D1-Sci-4
3489: PPUSH
3490: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3494: LD_EXP 1
3498: PPUSH
3499: LD_STRING D1-JMM-5
3501: PPUSH
3502: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3506: LD_EXP 15
3510: PPUSH
3511: LD_STRING D1-Sci-5
3513: PPUSH
3514: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3518: LD_EXP 1
3522: PPUSH
3523: LD_STRING D1-JMM-6
3525: PPUSH
3526: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3530: LD_EXP 16
3534: PPUSH
3535: LD_STRING D1-Har-6
3537: PPUSH
3538: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3542: LD_EXP 1
3546: PPUSH
3547: LD_STRING D1-JMM-7
3549: PPUSH
3550: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3554: LD_EXP 16
3558: PPUSH
3559: LD_STRING D1-Har-7
3561: PPUSH
3562: CALL_OW 94
// if IsOK ( Denis ) then
3566: LD_EXP 3
3570: PPUSH
3571: CALL_OW 302
3575: IFFALSE 3589
// Say ( JMM , D1-JMM-8 ) ;
3577: LD_EXP 1
3581: PPUSH
3582: LD_STRING D1-JMM-8
3584: PPUSH
3585: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3589: LD_EXP 1
3593: PPUSH
3594: LD_STRING D1-JMM-8a
3596: PPUSH
3597: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3601: LD_EXP 16
3605: PPUSH
3606: LD_STRING D1-Har-8
3608: PPUSH
3609: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3613: LD_EXP 1
3617: PPUSH
3618: LD_STRING D1-JMM-9
3620: PPUSH
3621: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3625: LD_EXP 16
3629: PPUSH
3630: LD_STRING D1-Har-9
3632: PPUSH
3633: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3637: LD_EXP 1
3641: PPUSH
3642: LD_STRING D1-JMM-10
3644: PPUSH
3645: CALL_OW 88
// if IsOK ( Denis ) then
3649: LD_EXP 3
3653: PPUSH
3654: CALL_OW 302
3658: IFFALSE 3672
// Say ( JMM , D1-JMM-10a ) ;
3660: LD_EXP 1
3664: PPUSH
3665: LD_STRING D1-JMM-10a
3667: PPUSH
3668: CALL_OW 88
// SelectAndSaveCharacters ;
3672: CALL 4310 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3676: LD_EXP 19
3680: PUSH
3681: LD_INT 1
3683: ARRAY
3684: PPUSH
3685: CALL_OW 274
3689: PPUSH
3690: LD_INT 1
3692: PPUSH
3693: LD_INT 250
3695: PPUSH
3696: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3700: LD_INT 22
3702: PUSH
3703: LD_INT 1
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: PUSH
3710: LD_INT 30
3712: PUSH
3713: LD_INT 29
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PPUSH
3724: CALL_OW 69
3728: PUSH
3729: LD_INT 0
3731: GREATER
3732: IFFALSE 3758
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3734: LD_EXP 19
3738: PUSH
3739: LD_INT 1
3741: ARRAY
3742: PPUSH
3743: CALL_OW 274
3747: PPUSH
3748: LD_INT 2
3750: PPUSH
3751: LD_INT 300
3753: PPUSH
3754: CALL_OW 277
// InGameOff ;
3758: CALL_OW 9
// Query ( Q1 ) ;
3762: LD_STRING Q1
3764: PPUSH
3765: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3769: LD_INT 3
3771: PPUSH
3772: LD_INT 1
3774: PPUSH
3775: CALL_OW 424
// if IsInUnit ( JMM ) then
3779: LD_EXP 1
3783: PPUSH
3784: CALL_OW 310
3788: IFFALSE 3799
// ComExitBuilding ( JMM ) ;
3790: LD_EXP 1
3794: PPUSH
3795: CALL_OW 122
// end ;
3799: PPOPN 3
3801: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
3802: LD_INT 3
3804: PPUSH
3805: LD_INT 22
3807: PUSH
3808: LD_INT 1
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: LD_INT 21
3817: PUSH
3818: LD_INT 1
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: PPUSH
3829: CALL_OW 71
3833: PUSH
3834: LD_INT 0
3836: EQUAL
3837: IFFALSE 4155
3839: GO 3841
3841: DISABLE
3842: LD_INT 0
3844: PPUSH
3845: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) > 0 then
3846: LD_INT 3
3848: PPUSH
3849: LD_INT 21
3851: PUSH
3852: LD_INT 2
3854: PUSH
3855: EMPTY
3856: LIST
3857: LIST
3858: PUSH
3859: LD_INT 3
3861: PUSH
3862: LD_INT 58
3864: PUSH
3865: EMPTY
3866: LIST
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: PPUSH
3876: CALL_OW 70
3880: PUSH
3881: LD_INT 0
3883: GREATER
3884: IFFALSE 4141
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
3886: LD_ADDR_VAR 0 1
3890: PUSH
3891: LD_INT 3
3893: PPUSH
3894: LD_INT 21
3896: PUSH
3897: LD_INT 2
3899: PUSH
3900: EMPTY
3901: LIST
3902: LIST
3903: PUSH
3904: LD_INT 3
3906: PUSH
3907: LD_INT 58
3909: PUSH
3910: EMPTY
3911: LIST
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: PPUSH
3921: CALL_OW 70
3925: PUSH
3926: FOR_IN
3927: IFFALSE 4127
// begin cargoType = GetCargoType ( i ) ;
3929: LD_ADDR_VAR 0 2
3933: PUSH
3934: LD_VAR 0 1
3938: PPUSH
3939: CALL_OW 288
3943: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
3944: LD_VAR 0 1
3948: PPUSH
3949: CALL_OW 264
3953: PUSH
3954: LD_INT 12
3956: EQUAL
3957: IFFALSE 4054
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
3959: LD_ADDR_EXP 14
3963: PUSH
3964: LD_EXP 14
3968: PUSH
3969: LD_VAR 0 1
3973: PPUSH
3974: CALL_OW 248
3978: PUSH
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 265
3988: PUSH
3989: LD_VAR 0 1
3993: PPUSH
3994: CALL_OW 262
3998: PUSH
3999: LD_VAR 0 1
4003: PPUSH
4004: CALL_OW 263
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 264
4018: PUSH
4019: LD_VAR 0 2
4023: PUSH
4024: LD_VAR 0 1
4028: PPUSH
4029: LD_VAR 0 2
4033: PPUSH
4034: CALL_OW 289
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: PUSH
4048: EMPTY
4049: LIST
4050: ADD
4051: ST_TO_ADDR
// end else
4052: GO 4125
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4054: LD_ADDR_EXP 14
4058: PUSH
4059: LD_EXP 14
4063: PUSH
4064: LD_VAR 0 1
4068: PPUSH
4069: CALL_OW 248
4073: PUSH
4074: LD_VAR 0 1
4078: PPUSH
4079: CALL_OW 265
4083: PUSH
4084: LD_VAR 0 1
4088: PPUSH
4089: CALL_OW 262
4093: PUSH
4094: LD_VAR 0 1
4098: PPUSH
4099: CALL_OW 263
4103: PUSH
4104: LD_VAR 0 1
4108: PPUSH
4109: CALL_OW 264
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: PUSH
4121: EMPTY
4122: LIST
4123: ADD
4124: ST_TO_ADDR
// end ; end ;
4125: GO 3926
4127: POP
4128: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4129: LD_EXP 14
4133: PPUSH
4134: LD_STRING 06_VehiclesIn06_1
4136: PPUSH
4137: CALL_OW 39
// end ; SaveCargos ;
4141: CALL 4158 0 0
// ChangeMap ( 6 , %_cont ) ;
4145: LD_INT 6
4147: PPUSH
4148: LD_STRING %_cont
4150: PPUSH
4151: CALL_OW 340
// end ;
4155: PPOPN 2
4157: END
// export function SaveCargos ; var i ; begin
4158: LD_INT 0
4160: PPUSH
4161: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
4162: LD_ADDR_VAR 0 2
4166: PUSH
4167: LD_INT 3
4169: PPUSH
4170: LD_INT 22
4172: PUSH
4173: LD_INT 1
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: LD_INT 34
4182: PUSH
4183: LD_INT 12
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PPUSH
4194: CALL_OW 70
4198: PUSH
4199: FOR_IN
4200: IFFALSE 4228
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
4202: LD_ADDR_EXP 20
4206: PUSH
4207: LD_EXP 20
4211: PUSH
4212: LD_VAR 0 2
4216: PPUSH
4217: CALL 5430 0 1
4221: PUSH
4222: EMPTY
4223: LIST
4224: ADD
4225: ST_TO_ADDR
4226: GO 4199
4228: POP
4229: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
4230: LD_EXP 20
4234: PPUSH
4235: LD_STRING 06_ResourcesInCargo06_1
4237: PPUSH
4238: CALL_OW 39
// end ; end_of_file
4242: LD_VAR 0 1
4246: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4247: LD_INT 0
4249: PPUSH
4250: PPUSH
// if exist_mode then
4251: LD_VAR 0 2
4255: IFFALSE 4280
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
4257: LD_ADDR_VAR 0 4
4261: PUSH
4262: LD_EXP 22
4266: PUSH
4267: LD_VAR 0 1
4271: STR
4272: PPUSH
4273: CALL_OW 34
4277: ST_TO_ADDR
4278: GO 4295
// unit := NewCharacter ( ident ) ;
4280: LD_ADDR_VAR 0 4
4284: PUSH
4285: LD_VAR 0 1
4289: PPUSH
4290: CALL_OW 25
4294: ST_TO_ADDR
// result := unit ;
4295: LD_ADDR_VAR 0 3
4299: PUSH
4300: LD_VAR 0 4
4304: ST_TO_ADDR
// end ;
4305: LD_VAR 0 3
4309: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test , rnd ; begin
4310: LD_INT 0
4312: PPUSH
4313: PPUSH
4314: PPUSH
4315: PPUSH
4316: PPUSH
4317: PPUSH
// rnd = [ 5 , rand ( 4 , 5 ) , 4 ] [ Difficulty ] ;
4318: LD_ADDR_VAR 0 6
4322: PUSH
4323: LD_INT 5
4325: PUSH
4326: LD_INT 4
4328: PPUSH
4329: LD_INT 5
4331: PPUSH
4332: CALL_OW 12
4336: PUSH
4337: LD_INT 4
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: PUSH
4345: LD_OWVAR 67
4349: ARRAY
4350: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4351: LD_ADDR_VAR 0 3
4355: PUSH
4356: LD_INT 22
4358: PUSH
4359: LD_INT 1
4361: PUSH
4362: EMPTY
4363: LIST
4364: LIST
4365: PUSH
4366: LD_INT 21
4368: PUSH
4369: LD_INT 1
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: PUSH
4376: LD_INT 2
4378: PUSH
4379: LD_INT 25
4381: PUSH
4382: LD_INT 1
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: PUSH
4389: LD_INT 25
4391: PUSH
4392: LD_INT 2
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 25
4401: PUSH
4402: LD_INT 3
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 25
4411: PUSH
4412: LD_INT 4
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PUSH
4436: LD_EXP 1
4440: PUSH
4441: LD_EXP 15
4445: PUSH
4446: LD_EXP 3
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: DIFF
4456: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , [ 5 , 4 , 4 ] [ Difficulty ] , rnd , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4457: LD_ADDR_VAR 0 4
4461: PUSH
4462: LD_STRING text
4464: PPUSH
4465: LD_INT 5
4467: PUSH
4468: LD_INT 4
4470: PUSH
4471: LD_INT 4
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: PUSH
4479: LD_OWVAR 67
4483: ARRAY
4484: PPUSH
4485: LD_VAR 0 6
4489: PPUSH
4490: LD_INT -5
4492: PUSH
4493: LD_EXP 1
4497: PUSH
4498: LD_INT -6
4500: PUSH
4501: LD_INT -2
4503: PUSH
4504: LD_INT -3
4506: PUSH
4507: LD_INT -5
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: PUSH
4518: LD_VAR 0 3
4522: ADD
4523: PUSH
4524: LD_INT -6
4526: PUSH
4527: LD_INT -4
4529: PUSH
4530: LD_EXP 3
4534: PUSH
4535: LD_EXP 15
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ADD
4546: PPUSH
4547: LD_INT 1
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 2
4555: PUSH
4556: LD_INT 1
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: LD_INT 4
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: PPUSH
4572: CALL_OW 42
4576: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4577: LD_EXP 1
4581: PPUSH
4582: LD_EXP 21
4586: PUSH
4587: LD_STRING JMM
4589: STR
4590: PPUSH
4591: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4595: LD_EXP 15
4599: PPUSH
4600: LD_STRING DeltaDoctor
4602: PPUSH
4603: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4607: LD_EXP 3
4611: PPUSH
4612: LD_EXP 21
4616: PUSH
4617: LD_STRING Denis
4619: STR
4620: PPUSH
4621: CALL_OW 38
// if Lisa in selectedPeople then
4625: LD_EXP 4
4629: PUSH
4630: LD_VAR 0 4
4634: IN
4635: IFFALSE 4667
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4637: LD_EXP 4
4641: PPUSH
4642: LD_EXP 21
4646: PUSH
4647: LD_STRING Lisa
4649: STR
4650: PPUSH
4651: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4655: LD_INT 1
4657: PPUSH
4658: LD_STRING LisaIn06
4660: PPUSH
4661: CALL_OW 39
// end else
4665: GO 4688
// if IsOk ( Lisa ) then
4667: LD_EXP 4
4671: PPUSH
4672: CALL_OW 302
4676: IFFALSE 4688
// SaveVariable ( 1 , LisaStayInDelta ) ;
4678: LD_INT 1
4680: PPUSH
4681: LD_STRING LisaStayInDelta
4683: PPUSH
4684: CALL_OW 39
// if Bobby in selectedPeople then
4688: LD_EXP 6
4692: PUSH
4693: LD_VAR 0 4
4697: IN
4698: IFFALSE 4730
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4700: LD_EXP 6
4704: PPUSH
4705: LD_EXP 21
4709: PUSH
4710: LD_STRING Bobby
4712: STR
4713: PPUSH
4714: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4718: LD_INT 1
4720: PPUSH
4721: LD_STRING BobbyIn06
4723: PPUSH
4724: CALL_OW 39
// end else
4728: GO 4751
// if IsOk ( Bobby ) then
4730: LD_EXP 6
4734: PPUSH
4735: CALL_OW 302
4739: IFFALSE 4751
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4741: LD_INT 1
4743: PPUSH
4744: LD_STRING BobbyStayInDelta
4746: PPUSH
4747: CALL_OW 39
// if Cyrus in selectedPeople then
4751: LD_EXP 7
4755: PUSH
4756: LD_VAR 0 4
4760: IN
4761: IFFALSE 4793
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4763: LD_EXP 7
4767: PPUSH
4768: LD_EXP 21
4772: PUSH
4773: LD_STRING Cyrus
4775: STR
4776: PPUSH
4777: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4781: LD_INT 1
4783: PPUSH
4784: LD_STRING CyrusIn06
4786: PPUSH
4787: CALL_OW 39
// end else
4791: GO 4814
// if IsOk ( Cyrus ) then
4793: LD_EXP 7
4797: PPUSH
4798: CALL_OW 302
4802: IFFALSE 4814
// SaveVariable ( 1 , CyrusStayInDelta ) ;
4804: LD_INT 1
4806: PPUSH
4807: LD_STRING CyrusStayInDelta
4809: PPUSH
4810: CALL_OW 39
// if Frank in selectedPeople then
4814: LD_EXP 5
4818: PUSH
4819: LD_VAR 0 4
4823: IN
4824: IFFALSE 4856
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4826: LD_EXP 5
4830: PPUSH
4831: LD_EXP 21
4835: PUSH
4836: LD_STRING Frank
4838: STR
4839: PPUSH
4840: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4844: LD_INT 1
4846: PPUSH
4847: LD_STRING FrankIn06
4849: PPUSH
4850: CALL_OW 39
// end else
4854: GO 4877
// if IsOk ( Frank ) then
4856: LD_EXP 5
4860: PPUSH
4861: CALL_OW 302
4865: IFFALSE 4877
// SaveVariable ( 1 , FrankStayInDelta ) ;
4867: LD_INT 1
4869: PPUSH
4870: LD_STRING FrankStayInDelta
4872: PPUSH
4873: CALL_OW 39
// if Brown in selectedPeople then
4877: LD_EXP 8
4881: PUSH
4882: LD_VAR 0 4
4886: IN
4887: IFFALSE 4919
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4889: LD_EXP 8
4893: PPUSH
4894: LD_EXP 21
4898: PUSH
4899: LD_STRING Brown
4901: STR
4902: PPUSH
4903: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
4907: LD_INT 1
4909: PPUSH
4910: LD_STRING BrownIn06
4912: PPUSH
4913: CALL_OW 39
// end else
4917: GO 4940
// if IsOk ( Brown ) then
4919: LD_EXP 8
4923: PPUSH
4924: CALL_OW 302
4928: IFFALSE 4940
// SaveVariable ( 1 , BrownStayInDelta ) ;
4930: LD_INT 1
4932: PPUSH
4933: LD_STRING BrownStayInDelta
4935: PPUSH
4936: CALL_OW 39
// if Donaldson in selectedPeople then
4940: LD_EXP 9
4944: PUSH
4945: LD_VAR 0 4
4949: IN
4950: IFFALSE 4982
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
4952: LD_EXP 9
4956: PPUSH
4957: LD_EXP 21
4961: PUSH
4962: LD_STRING Donaldson
4964: STR
4965: PPUSH
4966: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
4970: LD_INT 1
4972: PPUSH
4973: LD_STRING DonaldsonIn06
4975: PPUSH
4976: CALL_OW 39
// end else
4980: GO 5003
// if IsOk ( Donaldson ) then
4982: LD_EXP 9
4986: PPUSH
4987: CALL_OW 302
4991: IFFALSE 5003
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
4993: LD_INT 1
4995: PPUSH
4996: LD_STRING DonaldsonStayInDelta
4998: PPUSH
4999: CALL_OW 39
// if Gladstone in selectedPeople then
5003: LD_EXP 2
5007: PUSH
5008: LD_VAR 0 4
5012: IN
5013: IFFALSE 5045
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5015: LD_EXP 2
5019: PPUSH
5020: LD_EXP 21
5024: PUSH
5025: LD_STRING Gladstone
5027: STR
5028: PPUSH
5029: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5033: LD_INT 1
5035: PPUSH
5036: LD_STRING GladstoneIn06
5038: PPUSH
5039: CALL_OW 39
// end else
5043: GO 5066
// if IsOk ( Gladstone ) then
5045: LD_EXP 2
5049: PPUSH
5050: CALL_OW 302
5054: IFFALSE 5066
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5056: LD_INT 1
5058: PPUSH
5059: LD_STRING GladstoneStayInDelta
5061: PPUSH
5062: CALL_OW 39
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5066: LD_INT 22
5068: PUSH
5069: LD_INT 1
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: PUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PPUSH
5090: CALL_OW 69
5094: PPUSH
5095: LD_INT 4
5097: PPUSH
5098: CALL_OW 235
// for i in selectedPeople do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_VAR 0 4
5111: PUSH
5112: FOR_IN
5113: IFFALSE 5129
// SetSide ( i , 1 ) ;
5115: LD_VAR 0 2
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: CALL_OW 235
5127: GO 5112
5129: POP
5130: POP
// for i in yourApemans do
5131: LD_ADDR_VAR 0 2
5135: PUSH
5136: LD_EXP 13
5140: PUSH
5141: FOR_IN
5142: IFFALSE 5158
// SetSide ( i , 1 ) ;
5144: LD_VAR 0 2
5148: PPUSH
5149: LD_INT 1
5151: PPUSH
5152: CALL_OW 235
5156: GO 5141
5158: POP
5159: POP
// SetSide ( JMM , 1 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_INT 1
5167: PPUSH
5168: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
5172: LD_EXP 13
5176: PPUSH
5177: LD_INT 2
5179: PPUSH
5180: LD_INT 5
5182: PPUSH
5183: CALL_OW 237
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5187: LD_EXP 13
5191: PPUSH
5192: LD_STRING ApeIn06
5194: PPUSH
5195: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone ] , OthersIn06 ) ;
5199: LD_INT 22
5201: PUSH
5202: LD_INT 1
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PUSH
5209: LD_INT 21
5211: PUSH
5212: LD_INT 1
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: LD_INT 2
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 1
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: LD_INT 25
5234: PUSH
5235: LD_INT 2
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PUSH
5242: LD_INT 25
5244: PUSH
5245: LD_INT 3
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: LD_INT 25
5254: PUSH
5255: LD_INT 4
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: LIST
5273: PPUSH
5274: CALL_OW 69
5278: PUSH
5279: LD_EXP 1
5283: PUSH
5284: LD_EXP 4
5288: PUSH
5289: LD_EXP 6
5293: PUSH
5294: LD_EXP 7
5298: PUSH
5299: LD_EXP 5
5303: PUSH
5304: LD_EXP 8
5308: PUSH
5309: LD_EXP 9
5313: PUSH
5314: LD_EXP 2
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: DIFF
5329: PPUSH
5330: LD_STRING OthersIn06
5332: PPUSH
5333: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff randomsDelta ^ DeltaDoctor , OthersStayInDelta ) ;
5337: LD_INT 22
5339: PUSH
5340: LD_INT 4
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PUSH
5347: LD_INT 2
5349: PUSH
5350: LD_INT 25
5352: PUSH
5353: LD_INT 1
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: PUSH
5360: LD_INT 25
5362: PUSH
5363: LD_INT 2
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PUSH
5370: LD_INT 25
5372: PUSH
5373: LD_INT 3
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: PUSH
5380: LD_INT 25
5382: PUSH
5383: LD_INT 4
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PPUSH
5401: CALL_OW 69
5405: PUSH
5406: LD_EXP 11
5410: PUSH
5411: LD_EXP 15
5415: ADD
5416: DIFF
5417: PPUSH
5418: LD_STRING OthersStayInDelta
5420: PPUSH
5421: CALL_OW 38
// end ;
5425: LD_VAR 0 1
5429: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
5430: LD_INT 0
5432: PPUSH
5433: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5434: LD_ADDR_VAR 0 2
5438: PUSH
5439: LD_VAR 0 1
5443: PPUSH
5444: LD_INT 1
5446: PPUSH
5447: CALL_OW 289
5451: PUSH
5452: LD_VAR 0 1
5456: PPUSH
5457: LD_INT 2
5459: PPUSH
5460: CALL_OW 289
5464: PUSH
5465: LD_VAR 0 1
5469: PPUSH
5470: LD_INT 3
5472: PPUSH
5473: CALL_OW 289
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: LIST
5482: ST_TO_ADDR
// end ; end_of_file
5483: LD_VAR 0 2
5487: RET
// on Command ( comandid ) do var i ;
5488: LD_INT 0
5490: PPUSH
// begin if comandid = 65 then
5491: LD_VAR 0 1
5495: PUSH
5496: LD_INT 65
5498: EQUAL
5499: IFFALSE 5540
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5501: LD_ADDR_VAR 0 2
5505: PUSH
5506: LD_INT 22
5508: PUSH
5509: LD_INT 1
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: EMPTY
5517: LIST
5518: PPUSH
5519: CALL_OW 69
5523: PUSH
5524: FOR_IN
5525: IFFALSE 5538
// ComStop ( i ) ;
5527: LD_VAR 0 2
5531: PPUSH
5532: CALL_OW 141
5536: GO 5524
5538: POP
5539: POP
// end ;
5540: PPOPN 2
5542: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5543: LD_INT 0
5545: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5546: LD_ADDR_VAR 0 3
5550: PUSH
5551: LD_INT 22
5553: PUSH
5554: LD_INT 1
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: LD_INT 21
5563: PUSH
5564: LD_INT 3
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PUSH
5571: LD_INT 30
5573: PUSH
5574: LD_INT 0
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: LIST
5585: PPUSH
5586: CALL_OW 69
5590: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5591: LD_VAR 0 1
5595: PPUSH
5596: LD_VAR 0 3
5600: PUSH
5601: LD_INT 1
5603: ARRAY
5604: PPUSH
5605: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5609: LD_VAR 0 1
5613: PPUSH
5614: LD_INT 4
5616: PPUSH
5617: CALL_OW 235
// end ;
5621: PPOPN 3
5623: END
