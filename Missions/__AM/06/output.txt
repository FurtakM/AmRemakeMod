// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 16
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// apemans = [ ] ;
  23: LD_ADDR_EXP 11
  27: PUSH
  28: EMPTY
  29: ST_TO_ADDR
// yourApemans = [ ] ;
  30: LD_ADDR_EXP 12
  34: PUSH
  35: EMPTY
  36: ST_TO_ADDR
// yourVehicles = [ ] ;
  37: LD_ADDR_EXP 13
  41: PUSH
  42: EMPTY
  43: ST_TO_ADDR
// PrepareDeltaBase ;
  44: CALL 1803 0 0
// LoadVehicles ;
  48: CALL 1245 0 0
// PrepareHeroes ;
  52: CALL 61 0 0
// PrepareRandoms ;
  56: CALL 1500 0 0
// end ; end_of_file
  60: END
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
  61: LD_INT 0
  63: PPUSH
  64: PPUSH
  65: PPUSH
  66: PPUSH
  67: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
  68: LD_ADDR_VAR 0 3
  72: PUSH
  73: LD_INT 22
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PUSH
  83: LD_INT 21
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: PUSH
  93: LD_INT 30
  95: PUSH
  96: LD_INT 0
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PPUSH
 108: CALL_OW 69
 112: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 113: LD_VAR 0 3
 117: PUSH
 118: LD_INT 1
 120: ARRAY
 121: PPUSH
 122: LD_STRING delta
 124: PPUSH
 125: CALL_OW 500
// uc_side = 1 ;
 129: LD_ADDR_OWVAR 20
 133: PUSH
 134: LD_INT 1
 136: ST_TO_ADDR
// uc_nation = 1 ;
 137: LD_ADDR_OWVAR 21
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 145: LD_ADDR_EXP 1
 149: PUSH
 150: LD_STRING JMM
 152: PPUSH
 153: LD_INT 1
 155: PPUSH
 156: CALL 3527 0 2
 160: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 161: LD_ADDR_EXP 15
 165: PUSH
 166: LD_STRING Harisson
 168: PPUSH
 169: LD_INT 0
 171: PPUSH
 172: CALL 3527 0 2
 176: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 177: LD_EXP 1
 181: PPUSH
 182: LD_VAR 0 3
 186: PUSH
 187: LD_INT 1
 189: ARRAY
 190: PPUSH
 191: CALL_OW 250
 195: PPUSH
 196: LD_VAR 0 3
 200: PUSH
 201: LD_INT 1
 203: ARRAY
 204: PPUSH
 205: CALL_OW 251
 209: PPUSH
 210: LD_INT 5
 212: PPUSH
 213: LD_INT 0
 215: PPUSH
 216: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 220: LD_EXP 1
 224: PPUSH
 225: LD_INT 1
 227: PPUSH
 228: CALL_OW 336
// if LoadVariable ( GladstoneInDelta , 0 ) = 1 then
 232: LD_STRING GladstoneInDelta
 234: PPUSH
 235: LD_INT 0
 237: PPUSH
 238: CALL_OW 30
 242: PUSH
 243: LD_INT 1
 245: EQUAL
 246: IFFALSE 319
// begin Gladstone = PrepareUnit ( Gladstone , true ) ;
 248: LD_ADDR_EXP 2
 252: PUSH
 253: LD_STRING Gladstone
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: CALL 3527 0 2
 263: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 264: LD_EXP 2
 268: PPUSH
 269: LD_VAR 0 3
 273: PUSH
 274: LD_INT 1
 276: ARRAY
 277: PPUSH
 278: CALL_OW 250
 282: PPUSH
 283: LD_VAR 0 3
 287: PUSH
 288: LD_INT 1
 290: ARRAY
 291: PPUSH
 292: CALL_OW 251
 296: PPUSH
 297: LD_INT 5
 299: PPUSH
 300: LD_INT 0
 302: PPUSH
 303: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 307: LD_EXP 2
 311: PPUSH
 312: LD_INT 4
 314: PPUSH
 315: CALL_OW 336
// end ; if LoadVariable ( DenisInDelta , 0 ) = 1 then
 319: LD_STRING DenisInDelta
 321: PPUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 30
 329: PUSH
 330: LD_INT 1
 332: EQUAL
 333: IFFALSE 406
// begin Denis = PrepareUnit ( Denis , true ) ;
 335: LD_ADDR_EXP 3
 339: PUSH
 340: LD_STRING Denis
 342: PPUSH
 343: LD_INT 1
 345: PPUSH
 346: CALL 3527 0 2
 350: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 351: LD_EXP 3
 355: PPUSH
 356: LD_VAR 0 3
 360: PUSH
 361: LD_INT 1
 363: ARRAY
 364: PPUSH
 365: CALL_OW 250
 369: PPUSH
 370: LD_VAR 0 3
 374: PUSH
 375: LD_INT 1
 377: ARRAY
 378: PPUSH
 379: CALL_OW 251
 383: PPUSH
 384: LD_INT 5
 386: PPUSH
 387: LD_INT 0
 389: PPUSH
 390: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 394: LD_EXP 3
 398: PPUSH
 399: LD_INT 4
 401: PPUSH
 402: CALL_OW 336
// end ; if LoadVariable ( FrankInDelta , 0 ) = 1 then
 406: LD_STRING FrankInDelta
 408: PPUSH
 409: LD_INT 0
 411: PPUSH
 412: CALL_OW 30
 416: PUSH
 417: LD_INT 1
 419: EQUAL
 420: IFFALSE 493
// begin Frank = PrepareUnit ( Frank , true ) ;
 422: LD_ADDR_EXP 5
 426: PUSH
 427: LD_STRING Frank
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL 3527 0 2
 437: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 438: LD_EXP 5
 442: PPUSH
 443: LD_VAR 0 3
 447: PUSH
 448: LD_INT 1
 450: ARRAY
 451: PPUSH
 452: CALL_OW 250
 456: PPUSH
 457: LD_VAR 0 3
 461: PUSH
 462: LD_INT 1
 464: ARRAY
 465: PPUSH
 466: CALL_OW 251
 470: PPUSH
 471: LD_INT 5
 473: PPUSH
 474: LD_INT 0
 476: PPUSH
 477: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 481: LD_EXP 5
 485: PPUSH
 486: LD_INT 1
 488: PPUSH
 489: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 493: LD_STRING LisaInDelta
 495: PPUSH
 496: LD_INT 0
 498: PPUSH
 499: CALL_OW 30
 503: PUSH
 504: LD_INT 1
 506: EQUAL
 507: IFFALSE 580
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 509: LD_ADDR_EXP 4
 513: PUSH
 514: LD_STRING Lisa
 516: PPUSH
 517: LD_INT 1
 519: PPUSH
 520: CALL 3527 0 2
 524: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 525: LD_EXP 4
 529: PPUSH
 530: LD_VAR 0 3
 534: PUSH
 535: LD_INT 1
 537: ARRAY
 538: PPUSH
 539: CALL_OW 250
 543: PPUSH
 544: LD_VAR 0 3
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: CALL_OW 251
 557: PPUSH
 558: LD_INT 5
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 568: LD_EXP 4
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 580: LD_STRING BobbyInDelta
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 30
 590: PUSH
 591: LD_INT 1
 593: EQUAL
 594: IFFALSE 667
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 596: LD_ADDR_EXP 6
 600: PUSH
 601: LD_STRING Bobby
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL 3527 0 2
 611: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 612: LD_EXP 6
 616: PPUSH
 617: LD_VAR 0 3
 621: PUSH
 622: LD_INT 1
 624: ARRAY
 625: PPUSH
 626: CALL_OW 250
 630: PPUSH
 631: LD_VAR 0 3
 635: PUSH
 636: LD_INT 1
 638: ARRAY
 639: PPUSH
 640: CALL_OW 251
 644: PPUSH
 645: LD_INT 5
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 655: LD_EXP 6
 659: PPUSH
 660: LD_INT 1
 662: PPUSH
 663: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 667: LD_STRING CyrusInDelta
 669: PPUSH
 670: LD_INT 0
 672: PPUSH
 673: CALL_OW 30
 677: PUSH
 678: LD_INT 1
 680: EQUAL
 681: IFFALSE 754
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 683: LD_ADDR_EXP 7
 687: PUSH
 688: LD_STRING Cyrus
 690: PPUSH
 691: LD_INT 1
 693: PPUSH
 694: CALL 3527 0 2
 698: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 699: LD_EXP 7
 703: PPUSH
 704: LD_VAR 0 3
 708: PUSH
 709: LD_INT 1
 711: ARRAY
 712: PPUSH
 713: CALL_OW 250
 717: PPUSH
 718: LD_VAR 0 3
 722: PUSH
 723: LD_INT 1
 725: ARRAY
 726: PPUSH
 727: CALL_OW 251
 731: PPUSH
 732: LD_INT 5
 734: PPUSH
 735: LD_INT 0
 737: PPUSH
 738: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 742: LD_EXP 7
 746: PPUSH
 747: LD_INT 1
 749: PPUSH
 750: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 754: LD_STRING DonaldsonInDelta
 756: PPUSH
 757: LD_INT 0
 759: PPUSH
 760: CALL_OW 30
 764: PUSH
 765: LD_INT 1
 767: EQUAL
 768: IFFALSE 841
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 770: LD_ADDR_EXP 9
 774: PUSH
 775: LD_STRING Donaldson
 777: PPUSH
 778: LD_INT 1
 780: PPUSH
 781: CALL 3527 0 2
 785: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 786: LD_EXP 9
 790: PPUSH
 791: LD_VAR 0 3
 795: PUSH
 796: LD_INT 1
 798: ARRAY
 799: PPUSH
 800: CALL_OW 250
 804: PPUSH
 805: LD_VAR 0 3
 809: PUSH
 810: LD_INT 1
 812: ARRAY
 813: PPUSH
 814: CALL_OW 251
 818: PPUSH
 819: LD_INT 5
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
 829: LD_EXP 9
 833: PPUSH
 834: LD_INT 1
 836: PPUSH
 837: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
 841: LD_STRING BrownInDelta
 843: PPUSH
 844: LD_INT 0
 846: PPUSH
 847: CALL_OW 30
 851: PUSH
 852: LD_INT 1
 854: EQUAL
 855: IFFALSE 928
// begin Brown = PrepareUnit ( Brown , true ) ;
 857: LD_ADDR_EXP 8
 861: PUSH
 862: LD_STRING Brown
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: CALL 3527 0 2
 872: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 873: LD_EXP 8
 877: PPUSH
 878: LD_VAR 0 3
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PPUSH
 887: CALL_OW 250
 891: PPUSH
 892: LD_VAR 0 3
 896: PUSH
 897: LD_INT 1
 899: ARRAY
 900: PPUSH
 901: CALL_OW 251
 905: PPUSH
 906: LD_INT 5
 908: PPUSH
 909: LD_INT 0
 911: PPUSH
 912: CALL_OW 50
// SetClass ( Brown , 2 ) ;
 916: LD_EXP 8
 920: PPUSH
 921: LD_INT 2
 923: PPUSH
 924: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
 928: LD_ADDR_EXP 10
 932: PUSH
 933: LD_STRING othersInDelta
 935: PPUSH
 936: CALL_OW 31
 940: ST_TO_ADDR
// for i in others do
 941: LD_ADDR_VAR 0 2
 945: PUSH
 946: LD_EXP 10
 950: PUSH
 951: FOR_IN
 952: IFFALSE 1038
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
 954: LD_VAR 0 2
 958: PPUSH
 959: LD_VAR 0 3
 963: PUSH
 964: LD_INT 1
 966: ARRAY
 967: PPUSH
 968: CALL_OW 250
 972: PPUSH
 973: LD_VAR 0 3
 977: PUSH
 978: LD_INT 1
 980: ARRAY
 981: PPUSH
 982: CALL_OW 251
 986: PPUSH
 987: LD_INT 35
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 50
// SetClass ( i , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] ) ;
 997: LD_VAR 0 2
1001: PPUSH
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 3
1010: PUSH
1011: LD_INT 4
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_INT 1
1022: PPUSH
1023: LD_INT 4
1025: PPUSH
1026: CALL_OW 12
1030: ARRAY
1031: PPUSH
1032: CALL_OW 336
// end ;
1036: GO 951
1038: POP
1039: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1040: LD_ADDR_EXP 11
1044: PUSH
1045: LD_STRING apeInDelta
1047: PPUSH
1048: CALL_OW 31
1052: ST_TO_ADDR
// uc_nation = 0 ;
1053: LD_ADDR_OWVAR 21
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// if apemans > 6 then
1061: LD_EXP 11
1065: PUSH
1066: LD_INT 6
1068: GREATER
1069: IFFALSE 1164
// begin for i := 1 to 5 do
1071: LD_ADDR_VAR 0 2
1075: PUSH
1076: DOUBLE
1077: LD_INT 1
1079: DEC
1080: ST_TO_ADDR
1081: LD_INT 5
1083: PUSH
1084: FOR_TO
1085: IFFALSE 1160
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1087: LD_EXP 11
1091: PUSH
1092: LD_VAR 0 2
1096: ARRAY
1097: PPUSH
1098: LD_VAR 0 3
1102: PUSH
1103: LD_INT 1
1105: ARRAY
1106: PPUSH
1107: CALL_OW 250
1111: PPUSH
1112: LD_VAR 0 3
1116: PUSH
1117: LD_INT 1
1119: ARRAY
1120: PPUSH
1121: CALL_OW 251
1125: PPUSH
1126: LD_INT 50
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1136: LD_ADDR_EXP 12
1140: PUSH
1141: LD_EXP 12
1145: PUSH
1146: LD_EXP 11
1150: PUSH
1151: LD_VAR 0 2
1155: ARRAY
1156: ADD
1157: ST_TO_ADDR
// end ;
1158: GO 1084
1160: POP
1161: POP
// end else
1162: GO 1240
// begin for i in apemans do
1164: LD_ADDR_VAR 0 2
1168: PUSH
1169: LD_EXP 11
1173: PUSH
1174: FOR_IN
1175: IFFALSE 1238
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1177: LD_VAR 0 2
1181: PPUSH
1182: LD_VAR 0 3
1186: PUSH
1187: LD_INT 1
1189: ARRAY
1190: PPUSH
1191: CALL_OW 250
1195: PPUSH
1196: LD_VAR 0 3
1200: PUSH
1201: LD_INT 1
1203: ARRAY
1204: PPUSH
1205: CALL_OW 251
1209: PPUSH
1210: LD_INT 50
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1220: LD_ADDR_EXP 12
1224: PUSH
1225: LD_EXP 12
1229: PUSH
1230: LD_VAR 0 2
1234: ADD
1235: ST_TO_ADDR
// end ;
1236: GO 1174
1238: POP
1239: POP
// end ; end ;
1240: LD_VAR 0 1
1244: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1252: LD_ADDR_VAR 0 4
1256: PUSH
1257: LD_INT 22
1259: PUSH
1260: LD_INT 1
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 21
1269: PUSH
1270: LD_INT 3
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: LD_INT 30
1279: PUSH
1280: LD_INT 0
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: ST_TO_ADDR
// uc_side = 1 ;
1297: LD_ADDR_OWVAR 20
1301: PUSH
1302: LD_INT 1
1304: ST_TO_ADDR
// uc_nation = 1 ;
1305: LD_ADDR_OWVAR 21
1309: PUSH
1310: LD_INT 1
1312: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1313: LD_ADDR_VAR 0 5
1317: PUSH
1318: LD_STRING vehiclesInDelta
1320: PPUSH
1321: EMPTY
1322: PPUSH
1323: CALL_OW 30
1327: ST_TO_ADDR
// for i = 1 to 15 do
1328: LD_ADDR_VAR 0 2
1332: PUSH
1333: DOUBLE
1334: LD_INT 1
1336: DEC
1337: ST_TO_ADDR
1338: LD_INT 15
1340: PUSH
1341: FOR_TO
1342: IFFALSE 1493
// begin vc_chassis = vehicles [ i + 1 ] ;
1344: LD_ADDR_OWVAR 37
1348: PUSH
1349: LD_VAR 0 5
1353: PUSH
1354: LD_VAR 0 2
1358: PUSH
1359: LD_INT 1
1361: PLUS
1362: ARRAY
1363: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1364: LD_ADDR_OWVAR 39
1368: PUSH
1369: LD_VAR 0 5
1373: PUSH
1374: LD_VAR 0 2
1378: PUSH
1379: LD_INT 2
1381: PLUS
1382: ARRAY
1383: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1384: LD_ADDR_OWVAR 38
1388: PUSH
1389: LD_VAR 0 5
1393: PUSH
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 3
1401: PLUS
1402: ARRAY
1403: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1404: LD_ADDR_OWVAR 40
1408: PUSH
1409: LD_VAR 0 5
1413: PUSH
1414: LD_VAR 0 2
1418: PUSH
1419: LD_INT 4
1421: PLUS
1422: ARRAY
1423: ST_TO_ADDR
// i = i + 4 ;
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: LD_VAR 0 2
1433: PUSH
1434: LD_INT 4
1436: PLUS
1437: ST_TO_ADDR
// veh = CreateVehicle ;
1438: LD_ADDR_VAR 0 3
1442: PUSH
1443: CALL_OW 45
1447: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 20 , false ) ;
1448: LD_VAR 0 3
1452: PPUSH
1453: LD_VAR 0 4
1457: PUSH
1458: LD_INT 1
1460: ARRAY
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_VAR 0 4
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PPUSH
1476: CALL_OW 251
1480: PPUSH
1481: LD_INT 20
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 50
// end ;
1491: GO 1341
1493: POP
1494: POP
// end ;
1495: LD_VAR 0 1
1499: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
1500: LD_INT 0
1502: PPUSH
1503: PPUSH
1504: PPUSH
1505: PPUSH
// uc_side = 1 ;
1506: LD_ADDR_OWVAR 20
1510: PUSH
1511: LD_INT 1
1513: ST_TO_ADDR
// uc_nation = 1 ;
1514: LD_ADDR_OWVAR 21
1518: PUSH
1519: LD_INT 1
1521: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1522: LD_ADDR_VAR 0 4
1526: PUSH
1527: LD_INT 22
1529: PUSH
1530: LD_INT 1
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PUSH
1537: LD_INT 21
1539: PUSH
1540: LD_INT 3
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 30
1549: PUSH
1550: LD_INT 0
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: LIST
1561: PPUSH
1562: CALL_OW 69
1566: ST_TO_ADDR
// for i = 1 to 6 + Difficulty do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: DOUBLE
1573: LD_INT 1
1575: DEC
1576: ST_TO_ADDR
1577: LD_INT 6
1579: PUSH
1580: LD_OWVAR 67
1584: PLUS
1585: PUSH
1586: FOR_TO
1587: IFFALSE 1714
// begin hc_gallery =  ;
1589: LD_ADDR_OWVAR 33
1593: PUSH
1594: LD_STRING 
1596: ST_TO_ADDR
// hc_name =  ;
1597: LD_ADDR_OWVAR 26
1601: PUSH
1602: LD_STRING 
1604: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) - Difficulty ) ;
1605: LD_INT 0
1607: PPUSH
1608: LD_INT 1
1610: PUSH
1611: LD_INT 2
1613: PUSH
1614: LD_INT 3
1616: PUSH
1617: LD_INT 4
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 1
1628: PPUSH
1629: LD_INT 4
1631: PPUSH
1632: CALL_OW 12
1636: ARRAY
1637: PPUSH
1638: LD_INT 3
1640: PPUSH
1641: LD_INT 5
1643: PPUSH
1644: CALL_OW 12
1648: PUSH
1649: LD_OWVAR 67
1653: MINUS
1654: PPUSH
1655: CALL_OW 380
// un = CreateHuman ;
1659: LD_ADDR_VAR 0 3
1663: PUSH
1664: CALL_OW 44
1668: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1669: LD_VAR 0 3
1673: PPUSH
1674: LD_VAR 0 4
1678: PUSH
1679: LD_INT 1
1681: ARRAY
1682: PPUSH
1683: CALL_OW 250
1687: PPUSH
1688: LD_VAR 0 4
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: CALL_OW 251
1701: PPUSH
1702: LD_INT 15
1704: PPUSH
1705: LD_INT 0
1707: PPUSH
1708: CALL_OW 50
// end ;
1712: GO 1586
1714: POP
1715: POP
// hc_gallery =  ;
1716: LD_ADDR_OWVAR 33
1720: PUSH
1721: LD_STRING 
1723: ST_TO_ADDR
// hc_name = Dr. Michael Mills ;
1724: LD_ADDR_OWVAR 26
1728: PUSH
1729: LD_STRING Dr. Michael Mills
1731: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
1732: LD_INT 1
1734: PPUSH
1735: LD_INT 4
1737: PPUSH
1738: LD_INT 6
1740: PPUSH
1741: CALL_OW 380
// deltaDoctor = CreateHuman ;
1745: LD_ADDR_EXP 14
1749: PUSH
1750: CALL_OW 44
1754: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1755: LD_EXP 14
1759: PPUSH
1760: LD_VAR 0 4
1764: PUSH
1765: LD_INT 1
1767: ARRAY
1768: PPUSH
1769: CALL_OW 250
1773: PPUSH
1774: LD_VAR 0 4
1778: PUSH
1779: LD_INT 1
1781: ARRAY
1782: PPUSH
1783: CALL_OW 251
1787: PPUSH
1788: LD_INT 5
1790: PPUSH
1791: LD_INT 0
1793: PPUSH
1794: CALL_OW 50
// end ; end_of_file
1798: LD_VAR 0 1
1802: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
1803: LD_INT 0
1805: PPUSH
1806: PPUSH
1807: PPUSH
1808: PPUSH
1809: PPUSH
1810: PPUSH
1811: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
1812: LD_ADDR_VAR 0 5
1816: PUSH
1817: LD_STRING buildingsInDelta
1819: PPUSH
1820: EMPTY
1821: PPUSH
1822: CALL_OW 30
1826: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
1827: LD_INT 68
1829: PPUSH
1830: LD_INT 40
1832: PPUSH
1833: LD_INT 1
1835: PPUSH
1836: CALL_OW 441
// uc_side = 1 ;
1840: LD_ADDR_OWVAR 20
1844: PUSH
1845: LD_INT 1
1847: ST_TO_ADDR
// uc_nation = 1 ;
1848: LD_ADDR_OWVAR 21
1852: PUSH
1853: LD_INT 1
1855: ST_TO_ADDR
// for i = 1 to buildings do
1856: LD_ADDR_VAR 0 2
1860: PUSH
1861: DOUBLE
1862: LD_INT 1
1864: DEC
1865: ST_TO_ADDR
1866: LD_VAR 0 5
1870: PUSH
1871: FOR_TO
1872: IFFALSE 2087
// begin for j := 1 to buildings do
1874: LD_ADDR_VAR 0 3
1878: PUSH
1879: DOUBLE
1880: LD_INT 1
1882: DEC
1883: ST_TO_ADDR
1884: LD_VAR 0 5
1888: PUSH
1889: FOR_TO
1890: IFFALSE 2083
// begin bc_type = buildings [ i ] [ 1 ] ;
1892: LD_ADDR_OWVAR 42
1896: PUSH
1897: LD_VAR 0 5
1901: PUSH
1902: LD_VAR 0 2
1906: ARRAY
1907: PUSH
1908: LD_INT 1
1910: ARRAY
1911: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
1912: LD_ADDR_OWVAR 43
1916: PUSH
1917: LD_VAR 0 5
1921: PUSH
1922: LD_VAR 0 2
1926: ARRAY
1927: PUSH
1928: LD_INT 2
1930: ARRAY
1931: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
1932: LD_OWVAR 42
1936: PUSH
1937: LD_INT 7
1939: EQUAL
1940: PUSH
1941: LD_OWVAR 42
1945: PUSH
1946: LD_INT 8
1948: EQUAL
1949: OR
1950: IFFALSE 1992
// begin bc_kind1 = buildings [ i ] [ 6 ] ;
1952: LD_ADDR_OWVAR 44
1956: PUSH
1957: LD_VAR 0 5
1961: PUSH
1962: LD_VAR 0 2
1966: ARRAY
1967: PUSH
1968: LD_INT 6
1970: ARRAY
1971: ST_TO_ADDR
// bc_kind2 = buildings [ i ] [ 7 ] ;
1972: LD_ADDR_OWVAR 45
1976: PUSH
1977: LD_VAR 0 5
1981: PUSH
1982: LD_VAR 0 2
1986: ARRAY
1987: PUSH
1988: LD_INT 7
1990: ARRAY
1991: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
1992: LD_ADDR_VAR 0 4
1996: PUSH
1997: LD_VAR 0 5
2001: PUSH
2002: LD_VAR 0 2
2006: ARRAY
2007: PUSH
2008: LD_INT 3
2010: ARRAY
2011: PPUSH
2012: LD_VAR 0 5
2016: PUSH
2017: LD_VAR 0 2
2021: ARRAY
2022: PUSH
2023: LD_INT 4
2025: ARRAY
2026: PPUSH
2027: LD_VAR 0 5
2031: PUSH
2032: LD_VAR 0 2
2036: ARRAY
2037: PUSH
2038: LD_INT 5
2040: ARRAY
2041: PPUSH
2042: CALL_OW 47
2046: ST_TO_ADDR
// if bc_type = b_bunker then
2047: LD_OWVAR 42
2051: PUSH
2052: LD_INT 32
2054: EQUAL
2055: IFFALSE 2081
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2057: LD_VAR 0 4
2061: PPUSH
2062: LD_VAR 0 5
2066: PUSH
2067: LD_VAR 0 2
2071: ARRAY
2072: PUSH
2073: LD_INT 8
2075: ARRAY
2076: PPUSH
2077: CALL_OW 431
// end ;
2081: GO 1889
2083: POP
2084: POP
// end ;
2085: GO 1871
2087: POP
2088: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2089: LD_ADDR_VAR 0 6
2093: PUSH
2094: LD_INT 22
2096: PUSH
2097: LD_INT 1
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 6
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 7
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: LD_INT 30
2129: PUSH
2130: LD_INT 8
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: PPUSH
2147: CALL_OW 69
2151: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2152: LD_ADDR_VAR 0 7
2156: PUSH
2157: LD_INT 22
2159: PUSH
2160: LD_INT 1
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 30
2169: PUSH
2170: LD_INT 0
2172: PUSH
2173: EMPTY
2174: LIST
2175: LIST
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: PPUSH
2181: CALL_OW 69
2185: ST_TO_ADDR
// if lab > 0 and lab > 0 then
2186: LD_VAR 0 6
2190: PUSH
2191: LD_INT 0
2193: GREATER
2194: PUSH
2195: LD_VAR 0 6
2199: PUSH
2200: LD_INT 0
2202: GREATER
2203: AND
2204: IFFALSE 2214
// baseCorrect = 1 ;
2206: LD_ADDR_EXP 16
2210: PUSH
2211: LD_INT 1
2213: ST_TO_ADDR
// if baseCorrect = 0 then
2214: LD_EXP 16
2218: PUSH
2219: LD_INT 0
2221: EQUAL
2222: IFFALSE 2595
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2224: LD_ADDR_VAR 0 2
2228: PUSH
2229: LD_INT 22
2231: PUSH
2232: LD_INT 1
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 21
2241: PUSH
2242: LD_INT 3
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: PPUSH
2253: CALL_OW 69
2257: PUSH
2258: FOR_IN
2259: IFFALSE 2272
// RemoveUnit ( i ) ;
2261: LD_VAR 0 2
2265: PPUSH
2266: CALL_OW 64
2270: GO 2258
2272: POP
2273: POP
// uc_nation = 1 ;
2274: LD_ADDR_OWVAR 21
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// uc_side = 1 ;
2282: LD_ADDR_OWVAR 20
2286: PUSH
2287: LD_INT 1
2289: ST_TO_ADDR
// bc_level = 5 ;
2290: LD_ADDR_OWVAR 43
2294: PUSH
2295: LD_INT 5
2297: ST_TO_ADDR
// bc_type = b_depot ;
2298: LD_ADDR_OWVAR 42
2302: PUSH
2303: LD_INT 0
2305: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2306: LD_INT 50
2308: PPUSH
2309: LD_INT 22
2311: PPUSH
2312: LD_INT 0
2314: PPUSH
2315: CALL_OW 47
// bc_type = b_bunker ;
2319: LD_ADDR_OWVAR 42
2323: PUSH
2324: LD_INT 32
2326: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2327: LD_ADDR_VAR 0 4
2331: PUSH
2332: LD_INT 68
2334: PPUSH
2335: LD_INT 24
2337: PPUSH
2338: LD_INT 4
2340: PPUSH
2341: CALL_OW 47
2345: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2346: LD_VAR 0 4
2350: PPUSH
2351: LD_INT 4
2353: PUSH
2354: LD_INT 11
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 1
2363: PPUSH
2364: LD_INT 2
2366: PPUSH
2367: CALL_OW 12
2371: ARRAY
2372: PPUSH
2373: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2377: LD_ADDR_VAR 0 4
2381: PUSH
2382: LD_INT 71
2384: PPUSH
2385: LD_INT 34
2387: PPUSH
2388: LD_INT 4
2390: PPUSH
2391: CALL_OW 47
2395: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2396: LD_VAR 0 4
2400: PPUSH
2401: LD_INT 4
2403: PUSH
2404: LD_INT 11
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 1
2413: PPUSH
2414: LD_INT 2
2416: PPUSH
2417: CALL_OW 12
2421: ARRAY
2422: PPUSH
2423: CALL_OW 431
// bc_type = 31 ;
2427: LD_ADDR_OWVAR 42
2431: PUSH
2432: LD_INT 31
2434: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
2435: LD_INT 51
2437: PPUSH
2438: LD_INT 7
2440: PPUSH
2441: LD_INT 3
2443: PPUSH
2444: CALL_OW 47
// bc_type = b_oil_mine ;
2448: LD_ADDR_OWVAR 42
2452: PUSH
2453: LD_INT 29
2455: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
2456: LD_INT 68
2458: PPUSH
2459: LD_INT 40
2461: PPUSH
2462: LD_INT 1
2464: PPUSH
2465: CALL_OW 47
// bc_type = b_workshop ;
2469: LD_ADDR_OWVAR 42
2473: PUSH
2474: LD_INT 2
2476: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2477: LD_INT 38
2479: PPUSH
2480: LD_INT 20
2482: PPUSH
2483: LD_INT 2
2485: PPUSH
2486: CALL_OW 47
// bc_type = b_armoury ;
2490: LD_ADDR_OWVAR 42
2494: PUSH
2495: LD_INT 4
2497: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2498: LD_INT 38
2500: PPUSH
2501: LD_INT 20
2503: PPUSH
2504: LD_INT 2
2506: PPUSH
2507: CALL_OW 47
// bc_type = b_solar_power ;
2511: LD_ADDR_OWVAR 42
2515: PUSH
2516: LD_INT 27
2518: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
2519: LD_INT 46
2521: PPUSH
2522: LD_INT 12
2524: PPUSH
2525: LD_INT 1
2527: PPUSH
2528: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
2532: LD_INT 48
2534: PPUSH
2535: LD_INT 11
2537: PPUSH
2538: LD_INT 2
2540: PPUSH
2541: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
2545: LD_INT 49
2547: PPUSH
2548: LD_INT 11
2550: PPUSH
2551: LD_INT 3
2553: PPUSH
2554: CALL_OW 47
// bc_type = b_lab_half ;
2558: LD_ADDR_OWVAR 42
2562: PUSH
2563: LD_INT 7
2565: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
2566: LD_ADDR_OWVAR 44
2570: PUSH
2571: LD_INT 15
2573: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2574: LD_ADDR_OWVAR 45
2578: PUSH
2579: LD_INT 9
2581: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
2582: LD_INT 42
2584: PPUSH
2585: LD_INT 15
2587: PPUSH
2588: LD_INT 2
2590: PPUSH
2591: CALL_OW 47
// end ; end ; end_of_file
2595: LD_VAR 0 1
2599: RET
// every 1 do var i , j , lab , tmp ;
2600: GO 2602
2602: DISABLE
2603: LD_INT 0
2605: PPUSH
2606: PPUSH
2607: PPUSH
2608: PPUSH
// begin lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2609: LD_ADDR_VAR 0 3
2613: PUSH
2614: LD_INT 22
2616: PUSH
2617: LD_INT 1
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: LD_INT 2
2626: PUSH
2627: LD_INT 30
2629: PUSH
2630: LD_INT 6
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: LD_INT 30
2639: PUSH
2640: LD_INT 7
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: PUSH
2647: LD_INT 30
2649: PUSH
2650: LD_INT 8
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PPUSH
2667: CALL_OW 69
2671: ST_TO_ADDR
// InGameOn ;
2672: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
2676: LD_VAR 0 3
2680: PUSH
2681: LD_INT 1
2683: ARRAY
2684: PPUSH
2685: CALL_OW 87
// if IsOK ( Denis ) then
2689: LD_EXP 3
2693: PPUSH
2694: CALL_OW 302
2698: IFFALSE 2726
// begin SetTech ( tech_radar , 1 , state_researched ) ;
2700: LD_INT 6
2702: PPUSH
2703: LD_INT 1
2705: PPUSH
2706: LD_INT 2
2708: PPUSH
2709: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
2713: LD_INT 20
2715: PPUSH
2716: LD_INT 1
2718: PPUSH
2719: LD_INT 1
2721: PPUSH
2722: CALL_OW 324
// end ; ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
2726: LD_EXP 1
2730: PUSH
2731: LD_EXP 14
2735: PUSH
2736: LD_EXP 3
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: PPUSH
2746: LD_VAR 0 3
2750: PUSH
2751: LD_INT 1
2753: ARRAY
2754: PPUSH
2755: CALL_OW 120
// Say ( JMM , D1-JMM-1 ) ;
2759: LD_EXP 1
2763: PPUSH
2764: LD_STRING D1-JMM-1
2766: PPUSH
2767: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
2771: LD_EXP 14
2775: PPUSH
2776: LD_STRING D1-Sci-1
2778: PPUSH
2779: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
2783: LD_EXP 1
2787: PPUSH
2788: LD_STRING D1-JMM-2
2790: PPUSH
2791: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
2795: LD_EXP 14
2799: PPUSH
2800: LD_STRING D1-Sci-2
2802: PPUSH
2803: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
2807: LD_EXP 1
2811: PPUSH
2812: LD_STRING D1-JMM-3
2814: PPUSH
2815: CALL_OW 88
// if IsOK ( Denis ) then
2819: LD_EXP 3
2823: PPUSH
2824: CALL_OW 302
2828: IFFALSE 2844
// Say ( DeltaDoctor , D1-Sci-3 ) else
2830: LD_EXP 14
2834: PPUSH
2835: LD_STRING D1-Sci-3
2837: PPUSH
2838: CALL_OW 88
2842: GO 2856
// Say ( DeltaDoctor , D1-Sci-3a ) ;
2844: LD_EXP 14
2848: PPUSH
2849: LD_STRING D1-Sci-3a
2851: PPUSH
2852: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
2856: LD_EXP 1
2860: PPUSH
2861: LD_STRING D1-JMM-4
2863: PPUSH
2864: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
2868: LD_ADDR_VAR 0 4
2872: PUSH
2873: LD_INT 22
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 25
2885: PUSH
2886: LD_INT 4
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: LD_INT 54
2898: PUSH
2899: EMPTY
2900: LIST
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: LIST
2910: PPUSH
2911: CALL_OW 69
2915: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
2916: LD_ADDR_VAR 0 1
2920: PUSH
2921: LD_INT 22
2923: PUSH
2924: LD_INT 0
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PPUSH
2931: CALL_OW 69
2935: PUSH
2936: FOR_IN
2937: IFFALSE 2987
// for j in tmp do
2939: LD_ADDR_VAR 0 2
2943: PUSH
2944: LD_VAR 0 4
2948: PUSH
2949: FOR_IN
2950: IFFALSE 2983
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
2952: LD_VAR 0 2
2956: PPUSH
2957: LD_VAR 0 1
2961: PPUSH
2962: CALL_OW 250
2966: PPUSH
2967: LD_VAR 0 1
2971: PPUSH
2972: CALL_OW 251
2976: PPUSH
2977: CALL_OW 191
2981: GO 2949
2983: POP
2984: POP
2985: GO 2936
2987: POP
2988: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
2989: LD_EXP 14
2993: PPUSH
2994: LD_STRING D1-Sci-4
2996: PPUSH
2997: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3001: LD_EXP 1
3005: PPUSH
3006: LD_STRING D1-JMM-5
3008: PPUSH
3009: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3013: LD_EXP 14
3017: PPUSH
3018: LD_STRING D1-Sci-5
3020: PPUSH
3021: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3025: LD_EXP 1
3029: PPUSH
3030: LD_STRING D1-JMM-6
3032: PPUSH
3033: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3037: LD_EXP 15
3041: PPUSH
3042: LD_STRING D1-Har-6
3044: PPUSH
3045: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3049: LD_EXP 1
3053: PPUSH
3054: LD_STRING D1-JMM-7
3056: PPUSH
3057: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3061: LD_EXP 15
3065: PPUSH
3066: LD_STRING D1-Har-7
3068: PPUSH
3069: CALL_OW 94
// if IsOK ( Denis ) then
3073: LD_EXP 3
3077: PPUSH
3078: CALL_OW 302
3082: IFFALSE 3096
// Say ( JMM , D1-JMM-8 ) ;
3084: LD_EXP 1
3088: PPUSH
3089: LD_STRING D1-JMM-8
3091: PPUSH
3092: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3096: LD_EXP 1
3100: PPUSH
3101: LD_STRING D1-JMM-8a
3103: PPUSH
3104: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3108: LD_EXP 15
3112: PPUSH
3113: LD_STRING D1-Har-8
3115: PPUSH
3116: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3120: LD_EXP 1
3124: PPUSH
3125: LD_STRING D1-JMM-9
3127: PPUSH
3128: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3132: LD_EXP 15
3136: PPUSH
3137: LD_STRING D1-Har-9
3139: PPUSH
3140: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3144: LD_EXP 1
3148: PPUSH
3149: LD_STRING D1-JMM-10
3151: PPUSH
3152: CALL_OW 88
// if IsOK ( Denis ) then
3156: LD_EXP 3
3160: PPUSH
3161: CALL_OW 302
3165: IFFALSE 3179
// Say ( JMM , D1-JMM-10a ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING D1-JMM-10a
3174: PPUSH
3175: CALL_OW 88
// SelectAndSaveCharacters ;
3179: CALL 3584 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3183: LD_VAR 0 3
3187: PUSH
3188: LD_INT 1
3190: ARRAY
3191: PPUSH
3192: CALL_OW 274
3196: PPUSH
3197: LD_INT 1
3199: PPUSH
3200: LD_INT 250
3202: PPUSH
3203: CALL_OW 277
// InGameOff ;
3207: CALL_OW 9
// Query ( Q1 ) ;
3211: LD_STRING Q1
3213: PPUSH
3214: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3218: LD_INT 10
3220: PPUSH
3221: LD_INT 1
3223: PPUSH
3224: CALL_OW 424
// end ;
3228: PPOPN 4
3230: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i ;
3231: LD_INT 10
3233: PPUSH
3234: LD_INT 22
3236: PUSH
3237: LD_INT 1
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: LD_INT 21
3246: PUSH
3247: LD_INT 1
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PPUSH
3258: CALL_OW 71
3262: PUSH
3263: LD_INT 0
3265: EQUAL
3266: IFFALSE 3524
3268: GO 3270
3270: DISABLE
3271: LD_INT 0
3273: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) > 0 then
3274: LD_INT 10
3276: PPUSH
3277: LD_INT 21
3279: PUSH
3280: LD_INT 2
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: EMPTY
3288: LIST
3289: PPUSH
3290: CALL_OW 70
3294: PUSH
3295: LD_INT 0
3297: GREATER
3298: IFFALSE 3514
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) do
3300: LD_ADDR_VAR 0 1
3304: PUSH
3305: LD_INT 10
3307: PPUSH
3308: LD_INT 21
3310: PUSH
3311: LD_INT 2
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PUSH
3318: EMPTY
3319: LIST
3320: PPUSH
3321: CALL_OW 70
3325: PUSH
3326: FOR_IN
3327: IFFALSE 3500
// begin if GetWeapon ( i ) = us_cargo_bay then
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL_OW 264
3338: PUSH
3339: LD_INT 12
3341: EQUAL
3342: IFFALSE 3438
// begin yourVehicles = yourVehicles ^ [ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetCargoType ( i ) , GetCargo ( i , GetCargoType ( i ) ) ] ] ;
3344: LD_ADDR_EXP 13
3348: PUSH
3349: LD_EXP 13
3353: PUSH
3354: LD_VAR 0 1
3358: PPUSH
3359: CALL_OW 265
3363: PUSH
3364: LD_VAR 0 1
3368: PPUSH
3369: CALL_OW 262
3373: PUSH
3374: LD_VAR 0 1
3378: PPUSH
3379: CALL_OW 263
3383: PUSH
3384: LD_VAR 0 1
3388: PPUSH
3389: CALL_OW 264
3393: PUSH
3394: LD_VAR 0 1
3398: PPUSH
3399: CALL_OW 288
3403: PUSH
3404: LD_VAR 0 1
3408: PPUSH
3409: LD_VAR 0 1
3413: PPUSH
3414: CALL_OW 288
3418: PPUSH
3419: CALL_OW 289
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: EMPTY
3433: LIST
3434: ADD
3435: ST_TO_ADDR
// end else
3436: GO 3498
// begin yourVehicles = yourVehicles ^ [ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
3438: LD_ADDR_EXP 13
3442: PUSH
3443: LD_EXP 13
3447: PUSH
3448: LD_VAR 0 1
3452: PPUSH
3453: CALL_OW 265
3457: PUSH
3458: LD_VAR 0 1
3462: PPUSH
3463: CALL_OW 262
3467: PUSH
3468: LD_VAR 0 1
3472: PPUSH
3473: CALL_OW 263
3477: PUSH
3478: LD_VAR 0 1
3482: PPUSH
3483: CALL_OW 264
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: ADD
3497: ST_TO_ADDR
// end ; end ;
3498: GO 3326
3500: POP
3501: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
3502: LD_EXP 13
3506: PPUSH
3507: LD_STRING 06_VehiclesIn06_1
3509: PPUSH
3510: CALL_OW 39
// end ; ChangeMap ( 6 , %_cont ) ;
3514: LD_INT 6
3516: PPUSH
3517: LD_STRING %_cont
3519: PPUSH
3520: CALL_OW 340
// end ; end_of_file
3524: PPOPN 1
3526: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3527: LD_INT 0
3529: PPUSH
3530: PPUSH
// if exist_mode then
3531: LD_VAR 0 2
3535: IFFALSE 3554
// unit := CreateCharacter ( ident ) else
3537: LD_ADDR_VAR 0 4
3541: PUSH
3542: LD_VAR 0 1
3546: PPUSH
3547: CALL_OW 34
3551: ST_TO_ADDR
3552: GO 3569
// unit := NewCharacter ( ident ) ;
3554: LD_ADDR_VAR 0 4
3558: PUSH
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 25
3568: ST_TO_ADDR
// result := unit ;
3569: LD_ADDR_VAR 0 3
3573: PUSH
3574: LD_VAR 0 4
3578: ST_TO_ADDR
// end ;
3579: LD_VAR 0 3
3583: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test ; begin
3584: LD_INT 0
3586: PPUSH
3587: PPUSH
3588: PPUSH
3589: PPUSH
3590: PPUSH
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
3591: LD_ADDR_VAR 0 3
3595: PUSH
3596: LD_INT 22
3598: PUSH
3599: LD_INT 1
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: PUSH
3606: LD_INT 21
3608: PUSH
3609: LD_INT 1
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PUSH
3616: LD_INT 2
3618: PUSH
3619: LD_INT 25
3621: PUSH
3622: LD_INT 1
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 25
3631: PUSH
3632: LD_INT 2
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 25
3641: PUSH
3642: LD_INT 3
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 25
3651: PUSH
3652: LD_INT 4
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: LIST
3670: PPUSH
3671: CALL_OW 69
3675: PUSH
3676: LD_EXP 1
3680: PUSH
3681: LD_EXP 14
3685: PUSH
3686: LD_EXP 3
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: DIFF
3696: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
3697: LD_ADDR_VAR 0 4
3701: PUSH
3702: LD_STRING text
3704: PPUSH
3705: LD_INT 5
3707: PPUSH
3708: LD_INT 5
3710: PPUSH
3711: LD_INT -5
3713: PUSH
3714: LD_EXP 1
3718: PUSH
3719: LD_INT -6
3721: PUSH
3722: LD_INT -2
3724: PUSH
3725: LD_INT -3
3727: PUSH
3728: LD_INT -5
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: PUSH
3739: LD_VAR 0 3
3743: ADD
3744: PUSH
3745: LD_INT -6
3747: PUSH
3748: LD_INT -4
3750: PUSH
3751: LD_EXP 3
3755: PUSH
3756: LD_EXP 14
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: ADD
3767: PPUSH
3768: LD_INT 1
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: LD_INT 1
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 4
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: PPUSH
3793: CALL_OW 42
3797: ST_TO_ADDR
// SaveCharacters ( JMM , JMM ) ;
3798: LD_EXP 1
3802: PPUSH
3803: LD_STRING JMM
3805: PPUSH
3806: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
3810: LD_EXP 14
3814: PPUSH
3815: LD_STRING DeltaDoctor
3817: PPUSH
3818: CALL_OW 38
// SaveCharacters ( Denis , Denis ) ;
3822: LD_EXP 3
3826: PPUSH
3827: LD_STRING Denis
3829: PPUSH
3830: CALL_OW 38
// SaveCharacters ( yourApemans , ApeIn06 ) ;
3834: LD_EXP 12
3838: PPUSH
3839: LD_STRING ApeIn06
3841: PPUSH
3842: CALL_OW 38
// if Lisa in selectedPeople then
3846: LD_EXP 4
3850: PUSH
3851: LD_VAR 0 4
3855: IN
3856: IFFALSE 3880
// begin SaveCharacters ( Lisa , Lisa ) ;
3858: LD_EXP 4
3862: PPUSH
3863: LD_STRING Lisa
3865: PPUSH
3866: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
3870: LD_INT 1
3872: PPUSH
3873: LD_STRING LisaIn06
3875: PPUSH
3876: CALL_OW 39
// end ; if Bobby in selectedPeople then
3880: LD_EXP 6
3884: PUSH
3885: LD_VAR 0 4
3889: IN
3890: IFFALSE 3914
// begin SaveCharacters ( Bobby , Bobby ) ;
3892: LD_EXP 6
3896: PPUSH
3897: LD_STRING Bobby
3899: PPUSH
3900: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
3904: LD_INT 1
3906: PPUSH
3907: LD_STRING BobbyIn06
3909: PPUSH
3910: CALL_OW 39
// end ; if Cyrus in selectedPeople then
3914: LD_EXP 7
3918: PUSH
3919: LD_VAR 0 4
3923: IN
3924: IFFALSE 3948
// begin SaveCharacters ( Cyrus , Cyrus ) ;
3926: LD_EXP 7
3930: PPUSH
3931: LD_STRING Cyrus
3933: PPUSH
3934: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
3938: LD_INT 1
3940: PPUSH
3941: LD_STRING CyrusIn06
3943: PPUSH
3944: CALL_OW 39
// end ; if Frank in selectedPeople then
3948: LD_EXP 5
3952: PUSH
3953: LD_VAR 0 4
3957: IN
3958: IFFALSE 3982
// begin SaveCharacters ( Frank , Frank ) ;
3960: LD_EXP 5
3964: PPUSH
3965: LD_STRING Frank
3967: PPUSH
3968: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
3972: LD_INT 1
3974: PPUSH
3975: LD_STRING FrankIn06
3977: PPUSH
3978: CALL_OW 39
// end ; if Brown in selectedPeople then
3982: LD_EXP 8
3986: PUSH
3987: LD_VAR 0 4
3991: IN
3992: IFFALSE 4016
// begin SaveCharacters ( Brown , Brown ) ;
3994: LD_EXP 8
3998: PPUSH
3999: LD_STRING Brown
4001: PPUSH
4002: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
4006: LD_INT 1
4008: PPUSH
4009: LD_STRING BrownIn06
4011: PPUSH
4012: CALL_OW 39
// end ; if Donaldson in selectedPeople then
4016: LD_EXP 9
4020: PUSH
4021: LD_VAR 0 4
4025: IN
4026: IFFALSE 4050
// begin SaveCharacters ( Donaldson , Donaldson ) ;
4028: LD_EXP 9
4032: PPUSH
4033: LD_STRING Donaldson
4035: PPUSH
4036: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
4040: LD_INT 1
4042: PPUSH
4043: LD_STRING DonaldsonIn06
4045: PPUSH
4046: CALL_OW 39
// end ; if Gladstone in selectedPeople then
4050: LD_EXP 2
4054: PUSH
4055: LD_VAR 0 4
4059: IN
4060: IFFALSE 4084
// begin SaveCharacters ( Gladstone , Gladstone ) ;
4062: LD_EXP 2
4066: PPUSH
4067: LD_STRING Gladstone
4069: PPUSH
4070: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
4074: LD_INT 1
4076: PPUSH
4077: LD_STRING GladstoneIn06
4079: PPUSH
4080: CALL_OW 39
// end ; SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4084: LD_INT 22
4086: PUSH
4087: LD_INT 1
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: PUSH
4094: LD_INT 21
4096: PUSH
4097: LD_INT 1
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 69
4112: PPUSH
4113: LD_INT 4
4115: PPUSH
4116: CALL_OW 235
// for i in selectedPeople do
4120: LD_ADDR_VAR 0 2
4124: PUSH
4125: LD_VAR 0 4
4129: PUSH
4130: FOR_IN
4131: IFFALSE 4147
// SetSide ( i , 1 ) ;
4133: LD_VAR 0 2
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: CALL_OW 235
4145: GO 4130
4147: POP
4148: POP
// for i in yourApemans do
4149: LD_ADDR_VAR 0 2
4153: PUSH
4154: LD_EXP 12
4158: PUSH
4159: FOR_IN
4160: IFFALSE 4176
// SetSide ( i , 1 ) ;
4162: LD_VAR 0 2
4166: PPUSH
4167: LD_INT 1
4169: PPUSH
4170: CALL_OW 235
4174: GO 4159
4176: POP
4177: POP
// SetSide ( JMM , 1 ) ;
4178: LD_EXP 1
4182: PPUSH
4183: LD_INT 1
4185: PPUSH
4186: CALL_OW 235
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone ] , OthersIn06 ) ;
4190: LD_INT 22
4192: PUSH
4193: LD_INT 1
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: PUSH
4200: LD_INT 21
4202: PUSH
4203: LD_INT 1
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 69
4218: PUSH
4219: LD_EXP 1
4223: PUSH
4224: LD_EXP 4
4228: PUSH
4229: LD_EXP 6
4233: PUSH
4234: LD_EXP 7
4238: PUSH
4239: LD_EXP 5
4243: PUSH
4244: LD_EXP 8
4248: PUSH
4249: LD_EXP 9
4253: PUSH
4254: LD_EXP 2
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: DIFF
4269: PPUSH
4270: LD_STRING OthersIn06
4272: PPUSH
4273: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor ] , OthersStayInDelta ) ;
4277: LD_INT 22
4279: PUSH
4280: LD_INT 4
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PUSH
4287: LD_INT 2
4289: PUSH
4290: LD_INT 25
4292: PUSH
4293: LD_INT 1
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: PUSH
4300: LD_INT 25
4302: PUSH
4303: LD_INT 2
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: LD_INT 25
4312: PUSH
4313: LD_INT 3
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: PUSH
4320: LD_INT 25
4322: PUSH
4323: LD_INT 4
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PPUSH
4341: CALL_OW 69
4345: PUSH
4346: LD_EXP 14
4350: PUSH
4351: EMPTY
4352: LIST
4353: DIFF
4354: PPUSH
4355: LD_STRING OthersStayInDelta
4357: PPUSH
4358: CALL_OW 38
// end ; end_of_file
4362: LD_VAR 0 1
4366: RET
// on Command ( comandid ) do var i ;
4367: LD_INT 0
4369: PPUSH
// begin if comandid = 65 then
4370: LD_VAR 0 1
4374: PUSH
4375: LD_INT 65
4377: EQUAL
4378: IFFALSE 4430
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
4380: LD_ADDR_VAR 0 2
4384: PUSH
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 21
4397: PUSH
4398: LD_INT 1
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PPUSH
4409: CALL_OW 69
4413: PUSH
4414: FOR_IN
4415: IFFALSE 4428
// ComStop ( i ) ;
4417: LD_VAR 0 2
4421: PPUSH
4422: CALL_OW 141
4426: GO 4414
4428: POP
4429: POP
// end ;
4430: PPOPN 2
4432: END
// on ApemanTamed ( apeman , human ) do var tmp ;
4433: LD_INT 0
4435: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
4436: LD_ADDR_VAR 0 3
4440: PUSH
4441: LD_INT 22
4443: PUSH
4444: LD_INT 1
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 21
4453: PUSH
4454: LD_INT 3
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 30
4463: PUSH
4464: LD_INT 0
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PPUSH
4476: CALL_OW 69
4480: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
4481: LD_VAR 0 1
4485: PPUSH
4486: LD_VAR 0 3
4490: PUSH
4491: LD_INT 1
4493: ARRAY
4494: PPUSH
4495: CALL_OW 120
// SetSide ( apeman , 4 ) ;
4499: LD_VAR 0 1
4503: PPUSH
4504: LD_INT 4
4506: PPUSH
4507: CALL_OW 235
// end ;
4511: PPOPN 3
4513: END
