// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 16
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// apemans = [ ] ;
  23: LD_ADDR_EXP 11
  27: PUSH
  28: EMPTY
  29: ST_TO_ADDR
// yourApemans = [ ] ;
  30: LD_ADDR_EXP 12
  34: PUSH
  35: EMPTY
  36: ST_TO_ADDR
// yourVehicles = [ ] ;
  37: LD_ADDR_EXP 13
  41: PUSH
  42: EMPTY
  43: ST_TO_ADDR
// PrepareDeltaBase ;
  44: CALL 1805 0 0
// LoadVehicles ;
  48: CALL 1245 0 0
// PrepareHeroes ;
  52: CALL 61 0 0
// PrepareRandoms ;
  56: CALL 1502 0 0
// end ; end_of_file
  60: END
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
  61: LD_INT 0
  63: PPUSH
  64: PPUSH
  65: PPUSH
  66: PPUSH
  67: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
  68: LD_ADDR_VAR 0 3
  72: PUSH
  73: LD_INT 22
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PUSH
  83: LD_INT 21
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: PUSH
  93: LD_INT 30
  95: PUSH
  96: LD_INT 0
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PPUSH
 108: CALL_OW 69
 112: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 113: LD_VAR 0 3
 117: PUSH
 118: LD_INT 1
 120: ARRAY
 121: PPUSH
 122: LD_STRING delta
 124: PPUSH
 125: CALL_OW 500
// uc_side = 1 ;
 129: LD_ADDR_OWVAR 20
 133: PUSH
 134: LD_INT 1
 136: ST_TO_ADDR
// uc_nation = 1 ;
 137: LD_ADDR_OWVAR 21
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 145: LD_ADDR_EXP 1
 149: PUSH
 150: LD_STRING JMM
 152: PPUSH
 153: LD_INT 1
 155: PPUSH
 156: CALL 3512 0 2
 160: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 161: LD_ADDR_EXP 15
 165: PUSH
 166: LD_STRING Harisson
 168: PPUSH
 169: LD_INT 0
 171: PPUSH
 172: CALL 3512 0 2
 176: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 177: LD_EXP 1
 181: PPUSH
 182: LD_VAR 0 3
 186: PUSH
 187: LD_INT 1
 189: ARRAY
 190: PPUSH
 191: CALL_OW 250
 195: PPUSH
 196: LD_VAR 0 3
 200: PUSH
 201: LD_INT 1
 203: ARRAY
 204: PPUSH
 205: CALL_OW 251
 209: PPUSH
 210: LD_INT 5
 212: PPUSH
 213: LD_INT 0
 215: PPUSH
 216: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 220: LD_EXP 1
 224: PPUSH
 225: LD_INT 1
 227: PPUSH
 228: CALL_OW 336
// if LoadVariable ( GladstoneInDelta , 0 ) = 1 then
 232: LD_STRING GladstoneInDelta
 234: PPUSH
 235: LD_INT 0
 237: PPUSH
 238: CALL_OW 30
 242: PUSH
 243: LD_INT 1
 245: EQUAL
 246: IFFALSE 319
// begin Gladstone = PrepareUnit ( Gladstone , true ) ;
 248: LD_ADDR_EXP 2
 252: PUSH
 253: LD_STRING Gladstone
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: CALL 3512 0 2
 263: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 264: LD_EXP 2
 268: PPUSH
 269: LD_VAR 0 3
 273: PUSH
 274: LD_INT 1
 276: ARRAY
 277: PPUSH
 278: CALL_OW 250
 282: PPUSH
 283: LD_VAR 0 3
 287: PUSH
 288: LD_INT 1
 290: ARRAY
 291: PPUSH
 292: CALL_OW 251
 296: PPUSH
 297: LD_INT 5
 299: PPUSH
 300: LD_INT 0
 302: PPUSH
 303: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 307: LD_EXP 2
 311: PPUSH
 312: LD_INT 4
 314: PPUSH
 315: CALL_OW 336
// end ; if LoadVariable ( DenisInDelta , 0 ) = 1 then
 319: LD_STRING DenisInDelta
 321: PPUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 30
 329: PUSH
 330: LD_INT 1
 332: EQUAL
 333: IFFALSE 406
// begin Denis = PrepareUnit ( Denis , true ) ;
 335: LD_ADDR_EXP 3
 339: PUSH
 340: LD_STRING Denis
 342: PPUSH
 343: LD_INT 1
 345: PPUSH
 346: CALL 3512 0 2
 350: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 351: LD_EXP 3
 355: PPUSH
 356: LD_VAR 0 3
 360: PUSH
 361: LD_INT 1
 363: ARRAY
 364: PPUSH
 365: CALL_OW 250
 369: PPUSH
 370: LD_VAR 0 3
 374: PUSH
 375: LD_INT 1
 377: ARRAY
 378: PPUSH
 379: CALL_OW 251
 383: PPUSH
 384: LD_INT 5
 386: PPUSH
 387: LD_INT 0
 389: PPUSH
 390: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 394: LD_EXP 3
 398: PPUSH
 399: LD_INT 4
 401: PPUSH
 402: CALL_OW 336
// end ; if LoadVariable ( FrankInDelta , 0 ) = 1 then
 406: LD_STRING FrankInDelta
 408: PPUSH
 409: LD_INT 0
 411: PPUSH
 412: CALL_OW 30
 416: PUSH
 417: LD_INT 1
 419: EQUAL
 420: IFFALSE 493
// begin Frank = PrepareUnit ( Frank , true ) ;
 422: LD_ADDR_EXP 5
 426: PUSH
 427: LD_STRING Frank
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL 3512 0 2
 437: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 438: LD_EXP 5
 442: PPUSH
 443: LD_VAR 0 3
 447: PUSH
 448: LD_INT 1
 450: ARRAY
 451: PPUSH
 452: CALL_OW 250
 456: PPUSH
 457: LD_VAR 0 3
 461: PUSH
 462: LD_INT 1
 464: ARRAY
 465: PPUSH
 466: CALL_OW 251
 470: PPUSH
 471: LD_INT 5
 473: PPUSH
 474: LD_INT 0
 476: PPUSH
 477: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 481: LD_EXP 5
 485: PPUSH
 486: LD_INT 1
 488: PPUSH
 489: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 493: LD_STRING LisaInDelta
 495: PPUSH
 496: LD_INT 0
 498: PPUSH
 499: CALL_OW 30
 503: PUSH
 504: LD_INT 1
 506: EQUAL
 507: IFFALSE 580
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 509: LD_ADDR_EXP 4
 513: PUSH
 514: LD_STRING Lisa
 516: PPUSH
 517: LD_INT 1
 519: PPUSH
 520: CALL 3512 0 2
 524: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 525: LD_EXP 4
 529: PPUSH
 530: LD_VAR 0 3
 534: PUSH
 535: LD_INT 1
 537: ARRAY
 538: PPUSH
 539: CALL_OW 250
 543: PPUSH
 544: LD_VAR 0 3
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: CALL_OW 251
 557: PPUSH
 558: LD_INT 5
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 568: LD_EXP 4
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 580: LD_STRING BobbyInDelta
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 30
 590: PUSH
 591: LD_INT 1
 593: EQUAL
 594: IFFALSE 667
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 596: LD_ADDR_EXP 6
 600: PUSH
 601: LD_STRING Bobby
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL 3512 0 2
 611: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 612: LD_EXP 6
 616: PPUSH
 617: LD_VAR 0 3
 621: PUSH
 622: LD_INT 1
 624: ARRAY
 625: PPUSH
 626: CALL_OW 250
 630: PPUSH
 631: LD_VAR 0 3
 635: PUSH
 636: LD_INT 1
 638: ARRAY
 639: PPUSH
 640: CALL_OW 251
 644: PPUSH
 645: LD_INT 5
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 655: LD_EXP 6
 659: PPUSH
 660: LD_INT 1
 662: PPUSH
 663: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 667: LD_STRING CyrusInDelta
 669: PPUSH
 670: LD_INT 0
 672: PPUSH
 673: CALL_OW 30
 677: PUSH
 678: LD_INT 1
 680: EQUAL
 681: IFFALSE 754
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 683: LD_ADDR_EXP 7
 687: PUSH
 688: LD_STRING Cyrus
 690: PPUSH
 691: LD_INT 1
 693: PPUSH
 694: CALL 3512 0 2
 698: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 699: LD_EXP 7
 703: PPUSH
 704: LD_VAR 0 3
 708: PUSH
 709: LD_INT 1
 711: ARRAY
 712: PPUSH
 713: CALL_OW 250
 717: PPUSH
 718: LD_VAR 0 3
 722: PUSH
 723: LD_INT 1
 725: ARRAY
 726: PPUSH
 727: CALL_OW 251
 731: PPUSH
 732: LD_INT 5
 734: PPUSH
 735: LD_INT 0
 737: PPUSH
 738: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 742: LD_EXP 7
 746: PPUSH
 747: LD_INT 1
 749: PPUSH
 750: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 754: LD_STRING DonaldsonInDelta
 756: PPUSH
 757: LD_INT 0
 759: PPUSH
 760: CALL_OW 30
 764: PUSH
 765: LD_INT 1
 767: EQUAL
 768: IFFALSE 841
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 770: LD_ADDR_EXP 9
 774: PUSH
 775: LD_STRING Donaldson
 777: PPUSH
 778: LD_INT 1
 780: PPUSH
 781: CALL 3512 0 2
 785: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 786: LD_EXP 9
 790: PPUSH
 791: LD_VAR 0 3
 795: PUSH
 796: LD_INT 1
 798: ARRAY
 799: PPUSH
 800: CALL_OW 250
 804: PPUSH
 805: LD_VAR 0 3
 809: PUSH
 810: LD_INT 1
 812: ARRAY
 813: PPUSH
 814: CALL_OW 251
 818: PPUSH
 819: LD_INT 5
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
 829: LD_EXP 9
 833: PPUSH
 834: LD_INT 1
 836: PPUSH
 837: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
 841: LD_STRING BrownInDelta
 843: PPUSH
 844: LD_INT 0
 846: PPUSH
 847: CALL_OW 30
 851: PUSH
 852: LD_INT 1
 854: EQUAL
 855: IFFALSE 928
// begin Brown = PrepareUnit ( Brown , true ) ;
 857: LD_ADDR_EXP 8
 861: PUSH
 862: LD_STRING Brown
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: CALL 3512 0 2
 872: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 873: LD_EXP 8
 877: PPUSH
 878: LD_VAR 0 3
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PPUSH
 887: CALL_OW 250
 891: PPUSH
 892: LD_VAR 0 3
 896: PUSH
 897: LD_INT 1
 899: ARRAY
 900: PPUSH
 901: CALL_OW 251
 905: PPUSH
 906: LD_INT 5
 908: PPUSH
 909: LD_INT 0
 911: PPUSH
 912: CALL_OW 50
// SetClass ( Brown , 2 ) ;
 916: LD_EXP 8
 920: PPUSH
 921: LD_INT 2
 923: PPUSH
 924: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
 928: LD_ADDR_EXP 10
 932: PUSH
 933: LD_STRING othersInDelta
 935: PPUSH
 936: CALL_OW 31
 940: ST_TO_ADDR
// for i in others do
 941: LD_ADDR_VAR 0 2
 945: PUSH
 946: LD_EXP 10
 950: PUSH
 951: FOR_IN
 952: IFFALSE 1038
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
 954: LD_VAR 0 2
 958: PPUSH
 959: LD_VAR 0 3
 963: PUSH
 964: LD_INT 1
 966: ARRAY
 967: PPUSH
 968: CALL_OW 250
 972: PPUSH
 973: LD_VAR 0 3
 977: PUSH
 978: LD_INT 1
 980: ARRAY
 981: PPUSH
 982: CALL_OW 251
 986: PPUSH
 987: LD_INT 35
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 50
// SetClass ( i , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] ) ;
 997: LD_VAR 0 2
1001: PPUSH
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 3
1010: PUSH
1011: LD_INT 4
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_INT 1
1022: PPUSH
1023: LD_INT 4
1025: PPUSH
1026: CALL_OW 12
1030: ARRAY
1031: PPUSH
1032: CALL_OW 336
// end ;
1036: GO 951
1038: POP
1039: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1040: LD_ADDR_EXP 11
1044: PUSH
1045: LD_STRING apeInDelta
1047: PPUSH
1048: CALL_OW 31
1052: ST_TO_ADDR
// uc_nation = 0 ;
1053: LD_ADDR_OWVAR 21
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// if apemans > 6 then
1061: LD_EXP 11
1065: PUSH
1066: LD_INT 6
1068: GREATER
1069: IFFALSE 1164
// begin for i := 1 to 5 do
1071: LD_ADDR_VAR 0 2
1075: PUSH
1076: DOUBLE
1077: LD_INT 1
1079: DEC
1080: ST_TO_ADDR
1081: LD_INT 5
1083: PUSH
1084: FOR_TO
1085: IFFALSE 1160
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1087: LD_EXP 11
1091: PUSH
1092: LD_VAR 0 2
1096: ARRAY
1097: PPUSH
1098: LD_VAR 0 3
1102: PUSH
1103: LD_INT 1
1105: ARRAY
1106: PPUSH
1107: CALL_OW 250
1111: PPUSH
1112: LD_VAR 0 3
1116: PUSH
1117: LD_INT 1
1119: ARRAY
1120: PPUSH
1121: CALL_OW 251
1125: PPUSH
1126: LD_INT 50
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1136: LD_ADDR_EXP 12
1140: PUSH
1141: LD_EXP 12
1145: PUSH
1146: LD_EXP 11
1150: PUSH
1151: LD_VAR 0 2
1155: ARRAY
1156: ADD
1157: ST_TO_ADDR
// end ;
1158: GO 1084
1160: POP
1161: POP
// end else
1162: GO 1240
// begin for i in apemans do
1164: LD_ADDR_VAR 0 2
1168: PUSH
1169: LD_EXP 11
1173: PUSH
1174: FOR_IN
1175: IFFALSE 1238
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1177: LD_VAR 0 2
1181: PPUSH
1182: LD_VAR 0 3
1186: PUSH
1187: LD_INT 1
1189: ARRAY
1190: PPUSH
1191: CALL_OW 250
1195: PPUSH
1196: LD_VAR 0 3
1200: PUSH
1201: LD_INT 1
1203: ARRAY
1204: PPUSH
1205: CALL_OW 251
1209: PPUSH
1210: LD_INT 50
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1220: LD_ADDR_EXP 12
1224: PUSH
1225: LD_EXP 12
1229: PUSH
1230: LD_VAR 0 2
1234: ADD
1235: ST_TO_ADDR
// end ;
1236: GO 1174
1238: POP
1239: POP
// end ; end ;
1240: LD_VAR 0 1
1244: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1252: LD_ADDR_VAR 0 4
1256: PUSH
1257: LD_INT 22
1259: PUSH
1260: LD_INT 1
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 21
1269: PUSH
1270: LD_INT 3
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: LD_INT 30
1279: PUSH
1280: LD_INT 0
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: ST_TO_ADDR
// uc_side = 1 ;
1297: LD_ADDR_OWVAR 20
1301: PUSH
1302: LD_INT 1
1304: ST_TO_ADDR
// uc_nation = 1 ;
1305: LD_ADDR_OWVAR 21
1309: PUSH
1310: LD_INT 1
1312: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1313: LD_ADDR_VAR 0 5
1317: PUSH
1318: LD_STRING vehiclesInDelta
1320: PPUSH
1321: EMPTY
1322: PPUSH
1323: CALL_OW 30
1327: ST_TO_ADDR
// for i = 1 to vehicles do
1328: LD_ADDR_VAR 0 2
1332: PUSH
1333: DOUBLE
1334: LD_INT 1
1336: DEC
1337: ST_TO_ADDR
1338: LD_VAR 0 5
1342: PUSH
1343: FOR_TO
1344: IFFALSE 1495
// begin vc_chassis = vehicles [ i + 1 ] ;
1346: LD_ADDR_OWVAR 37
1350: PUSH
1351: LD_VAR 0 5
1355: PUSH
1356: LD_VAR 0 2
1360: PUSH
1361: LD_INT 1
1363: PLUS
1364: ARRAY
1365: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1366: LD_ADDR_OWVAR 39
1370: PUSH
1371: LD_VAR 0 5
1375: PUSH
1376: LD_VAR 0 2
1380: PUSH
1381: LD_INT 2
1383: PLUS
1384: ARRAY
1385: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1386: LD_ADDR_OWVAR 38
1390: PUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_VAR 0 2
1400: PUSH
1401: LD_INT 3
1403: PLUS
1404: ARRAY
1405: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1406: LD_ADDR_OWVAR 40
1410: PUSH
1411: LD_VAR 0 5
1415: PUSH
1416: LD_VAR 0 2
1420: PUSH
1421: LD_INT 4
1423: PLUS
1424: ARRAY
1425: ST_TO_ADDR
// i = i + 4 ;
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 4
1438: PLUS
1439: ST_TO_ADDR
// veh = CreateVehicle ;
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: CALL_OW 45
1449: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 20 , false ) ;
1450: LD_VAR 0 3
1454: PPUSH
1455: LD_VAR 0 4
1459: PUSH
1460: LD_INT 1
1462: ARRAY
1463: PPUSH
1464: CALL_OW 250
1468: PPUSH
1469: LD_VAR 0 4
1473: PUSH
1474: LD_INT 1
1476: ARRAY
1477: PPUSH
1478: CALL_OW 251
1482: PPUSH
1483: LD_INT 20
1485: PPUSH
1486: LD_INT 0
1488: PPUSH
1489: CALL_OW 50
// end ;
1493: GO 1343
1495: POP
1496: POP
// end ;
1497: LD_VAR 0 1
1501: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
1502: LD_INT 0
1504: PPUSH
1505: PPUSH
1506: PPUSH
1507: PPUSH
// uc_side = 1 ;
1508: LD_ADDR_OWVAR 20
1512: PUSH
1513: LD_INT 1
1515: ST_TO_ADDR
// uc_nation = 1 ;
1516: LD_ADDR_OWVAR 21
1520: PUSH
1521: LD_INT 1
1523: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1524: LD_ADDR_VAR 0 4
1528: PUSH
1529: LD_INT 22
1531: PUSH
1532: LD_INT 1
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 21
1541: PUSH
1542: LD_INT 3
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 30
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: LIST
1563: PPUSH
1564: CALL_OW 69
1568: ST_TO_ADDR
// for i = 1 to 6 + Difficulty do
1569: LD_ADDR_VAR 0 2
1573: PUSH
1574: DOUBLE
1575: LD_INT 1
1577: DEC
1578: ST_TO_ADDR
1579: LD_INT 6
1581: PUSH
1582: LD_OWVAR 67
1586: PLUS
1587: PUSH
1588: FOR_TO
1589: IFFALSE 1716
// begin hc_gallery =  ;
1591: LD_ADDR_OWVAR 33
1595: PUSH
1596: LD_STRING 
1598: ST_TO_ADDR
// hc_name =  ;
1599: LD_ADDR_OWVAR 26
1603: PUSH
1604: LD_STRING 
1606: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) - Difficulty ) ;
1607: LD_INT 0
1609: PPUSH
1610: LD_INT 1
1612: PUSH
1613: LD_INT 2
1615: PUSH
1616: LD_INT 3
1618: PUSH
1619: LD_INT 4
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 1
1630: PPUSH
1631: LD_INT 4
1633: PPUSH
1634: CALL_OW 12
1638: ARRAY
1639: PPUSH
1640: LD_INT 3
1642: PPUSH
1643: LD_INT 5
1645: PPUSH
1646: CALL_OW 12
1650: PUSH
1651: LD_OWVAR 67
1655: MINUS
1656: PPUSH
1657: CALL_OW 380
// un = CreateHuman ;
1661: LD_ADDR_VAR 0 3
1665: PUSH
1666: CALL_OW 44
1670: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1671: LD_VAR 0 3
1675: PPUSH
1676: LD_VAR 0 4
1680: PUSH
1681: LD_INT 1
1683: ARRAY
1684: PPUSH
1685: CALL_OW 250
1689: PPUSH
1690: LD_VAR 0 4
1694: PUSH
1695: LD_INT 1
1697: ARRAY
1698: PPUSH
1699: CALL_OW 251
1703: PPUSH
1704: LD_INT 15
1706: PPUSH
1707: LD_INT 0
1709: PPUSH
1710: CALL_OW 50
// end ;
1714: GO 1588
1716: POP
1717: POP
// hc_gallery =  ;
1718: LD_ADDR_OWVAR 33
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// hc_name = Dr. Michael Mills ;
1726: LD_ADDR_OWVAR 26
1730: PUSH
1731: LD_STRING Dr. Michael Mills
1733: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
1734: LD_INT 1
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 6
1742: PPUSH
1743: CALL_OW 380
// deltaDoctor = CreateHuman ;
1747: LD_ADDR_EXP 14
1751: PUSH
1752: CALL_OW 44
1756: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1757: LD_EXP 14
1761: PPUSH
1762: LD_VAR 0 4
1766: PUSH
1767: LD_INT 1
1769: ARRAY
1770: PPUSH
1771: CALL_OW 250
1775: PPUSH
1776: LD_VAR 0 4
1780: PUSH
1781: LD_INT 1
1783: ARRAY
1784: PPUSH
1785: CALL_OW 251
1789: PPUSH
1790: LD_INT 5
1792: PPUSH
1793: LD_INT 0
1795: PPUSH
1796: CALL_OW 50
// end ; end_of_file
1800: LD_VAR 0 1
1804: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
1805: LD_INT 0
1807: PPUSH
1808: PPUSH
1809: PPUSH
1810: PPUSH
1811: PPUSH
1812: PPUSH
1813: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
1814: LD_ADDR_VAR 0 5
1818: PUSH
1819: LD_STRING buildingsInDelta
1821: PPUSH
1822: EMPTY
1823: PPUSH
1824: CALL_OW 30
1828: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
1829: LD_INT 68
1831: PPUSH
1832: LD_INT 40
1834: PPUSH
1835: LD_INT 1
1837: PPUSH
1838: CALL_OW 441
// uc_side = 1 ;
1842: LD_ADDR_OWVAR 20
1846: PUSH
1847: LD_INT 1
1849: ST_TO_ADDR
// uc_nation = 1 ;
1850: LD_ADDR_OWVAR 21
1854: PUSH
1855: LD_INT 1
1857: ST_TO_ADDR
// for i = 1 to buildings do
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: DOUBLE
1864: LD_INT 1
1866: DEC
1867: ST_TO_ADDR
1868: LD_VAR 0 5
1872: PUSH
1873: FOR_TO
1874: IFFALSE 2072
// begin bc_type = buildings [ i ] [ 1 ] ;
1876: LD_ADDR_OWVAR 42
1880: PUSH
1881: LD_VAR 0 5
1885: PUSH
1886: LD_VAR 0 2
1890: ARRAY
1891: PUSH
1892: LD_INT 1
1894: ARRAY
1895: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
1896: LD_ADDR_OWVAR 43
1900: PUSH
1901: LD_VAR 0 5
1905: PUSH
1906: LD_VAR 0 2
1910: ARRAY
1911: PUSH
1912: LD_INT 2
1914: ARRAY
1915: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
1916: LD_OWVAR 42
1920: PUSH
1921: LD_INT 7
1923: EQUAL
1924: PUSH
1925: LD_OWVAR 42
1929: PUSH
1930: LD_INT 8
1932: EQUAL
1933: OR
1934: IFFALSE 1976
// begin bc_kind1 = buildings [ i ] [ 6 ] ;
1936: LD_ADDR_OWVAR 44
1940: PUSH
1941: LD_VAR 0 5
1945: PUSH
1946: LD_VAR 0 2
1950: ARRAY
1951: PUSH
1952: LD_INT 6
1954: ARRAY
1955: ST_TO_ADDR
// bc_kind2 = buildings [ i ] [ 7 ] ;
1956: LD_ADDR_OWVAR 45
1960: PUSH
1961: LD_VAR 0 5
1965: PUSH
1966: LD_VAR 0 2
1970: ARRAY
1971: PUSH
1972: LD_INT 7
1974: ARRAY
1975: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
1976: LD_ADDR_VAR 0 4
1980: PUSH
1981: LD_VAR 0 5
1985: PUSH
1986: LD_VAR 0 2
1990: ARRAY
1991: PUSH
1992: LD_INT 3
1994: ARRAY
1995: PPUSH
1996: LD_VAR 0 5
2000: PUSH
2001: LD_VAR 0 2
2005: ARRAY
2006: PUSH
2007: LD_INT 4
2009: ARRAY
2010: PPUSH
2011: LD_VAR 0 5
2015: PUSH
2016: LD_VAR 0 2
2020: ARRAY
2021: PUSH
2022: LD_INT 5
2024: ARRAY
2025: PPUSH
2026: CALL_OW 47
2030: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2031: LD_VAR 0 4
2035: PPUSH
2036: CALL_OW 266
2040: PUSH
2041: LD_INT 32
2043: EQUAL
2044: IFFALSE 2070
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2046: LD_VAR 0 4
2050: PPUSH
2051: LD_VAR 0 5
2055: PUSH
2056: LD_VAR 0 2
2060: ARRAY
2061: PUSH
2062: LD_INT 8
2064: ARRAY
2065: PPUSH
2066: CALL_OW 431
// end ;
2070: GO 1873
2072: POP
2073: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2074: LD_ADDR_VAR 0 6
2078: PUSH
2079: LD_INT 22
2081: PUSH
2082: LD_INT 1
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 2
2091: PUSH
2092: LD_INT 30
2094: PUSH
2095: LD_INT 6
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PUSH
2102: LD_INT 30
2104: PUSH
2105: LD_INT 7
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 30
2114: PUSH
2115: LD_INT 8
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PPUSH
2132: CALL_OW 69
2136: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2137: LD_ADDR_VAR 0 7
2141: PUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PUSH
2152: LD_INT 30
2154: PUSH
2155: LD_INT 0
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: PPUSH
2166: CALL_OW 69
2170: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2171: LD_VAR 0 6
2175: PUSH
2176: LD_INT 0
2178: GREATER
2179: PUSH
2180: LD_VAR 0 7
2184: PUSH
2185: LD_INT 0
2187: GREATER
2188: AND
2189: IFFALSE 2199
// baseCorrect = 1 ;
2191: LD_ADDR_EXP 16
2195: PUSH
2196: LD_INT 1
2198: ST_TO_ADDR
// if baseCorrect = 0 then
2199: LD_EXP 16
2203: PUSH
2204: LD_INT 0
2206: EQUAL
2207: IFFALSE 2580
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2209: LD_ADDR_VAR 0 2
2213: PUSH
2214: LD_INT 22
2216: PUSH
2217: LD_INT 1
2219: PUSH
2220: EMPTY
2221: LIST
2222: LIST
2223: PUSH
2224: LD_INT 21
2226: PUSH
2227: LD_INT 3
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PPUSH
2238: CALL_OW 69
2242: PUSH
2243: FOR_IN
2244: IFFALSE 2257
// RemoveUnit ( i ) ;
2246: LD_VAR 0 2
2250: PPUSH
2251: CALL_OW 64
2255: GO 2243
2257: POP
2258: POP
// uc_nation = 1 ;
2259: LD_ADDR_OWVAR 21
2263: PUSH
2264: LD_INT 1
2266: ST_TO_ADDR
// uc_side = 1 ;
2267: LD_ADDR_OWVAR 20
2271: PUSH
2272: LD_INT 1
2274: ST_TO_ADDR
// bc_level = 5 ;
2275: LD_ADDR_OWVAR 43
2279: PUSH
2280: LD_INT 5
2282: ST_TO_ADDR
// bc_type = b_depot ;
2283: LD_ADDR_OWVAR 42
2287: PUSH
2288: LD_INT 0
2290: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2291: LD_INT 50
2293: PPUSH
2294: LD_INT 22
2296: PPUSH
2297: LD_INT 0
2299: PPUSH
2300: CALL_OW 47
// bc_type = b_bunker ;
2304: LD_ADDR_OWVAR 42
2308: PUSH
2309: LD_INT 32
2311: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2312: LD_ADDR_VAR 0 4
2316: PUSH
2317: LD_INT 68
2319: PPUSH
2320: LD_INT 24
2322: PPUSH
2323: LD_INT 4
2325: PPUSH
2326: CALL_OW 47
2330: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2331: LD_VAR 0 4
2335: PPUSH
2336: LD_INT 4
2338: PUSH
2339: LD_INT 11
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 1
2348: PPUSH
2349: LD_INT 2
2351: PPUSH
2352: CALL_OW 12
2356: ARRAY
2357: PPUSH
2358: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2362: LD_ADDR_VAR 0 4
2366: PUSH
2367: LD_INT 71
2369: PPUSH
2370: LD_INT 34
2372: PPUSH
2373: LD_INT 4
2375: PPUSH
2376: CALL_OW 47
2380: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2381: LD_VAR 0 4
2385: PPUSH
2386: LD_INT 4
2388: PUSH
2389: LD_INT 11
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PUSH
2396: LD_INT 1
2398: PPUSH
2399: LD_INT 2
2401: PPUSH
2402: CALL_OW 12
2406: ARRAY
2407: PPUSH
2408: CALL_OW 431
// bc_type = 31 ;
2412: LD_ADDR_OWVAR 42
2416: PUSH
2417: LD_INT 31
2419: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
2420: LD_INT 51
2422: PPUSH
2423: LD_INT 7
2425: PPUSH
2426: LD_INT 3
2428: PPUSH
2429: CALL_OW 47
// bc_type = b_oil_mine ;
2433: LD_ADDR_OWVAR 42
2437: PUSH
2438: LD_INT 29
2440: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
2441: LD_INT 68
2443: PPUSH
2444: LD_INT 40
2446: PPUSH
2447: LD_INT 1
2449: PPUSH
2450: CALL_OW 47
// bc_type = b_workshop ;
2454: LD_ADDR_OWVAR 42
2458: PUSH
2459: LD_INT 2
2461: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2462: LD_INT 38
2464: PPUSH
2465: LD_INT 20
2467: PPUSH
2468: LD_INT 2
2470: PPUSH
2471: CALL_OW 47
// bc_type = b_armoury ;
2475: LD_ADDR_OWVAR 42
2479: PUSH
2480: LD_INT 4
2482: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2483: LD_INT 38
2485: PPUSH
2486: LD_INT 20
2488: PPUSH
2489: LD_INT 2
2491: PPUSH
2492: CALL_OW 47
// bc_type = b_solar_power ;
2496: LD_ADDR_OWVAR 42
2500: PUSH
2501: LD_INT 27
2503: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
2504: LD_INT 46
2506: PPUSH
2507: LD_INT 12
2509: PPUSH
2510: LD_INT 1
2512: PPUSH
2513: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
2517: LD_INT 48
2519: PPUSH
2520: LD_INT 11
2522: PPUSH
2523: LD_INT 2
2525: PPUSH
2526: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
2530: LD_INT 49
2532: PPUSH
2533: LD_INT 11
2535: PPUSH
2536: LD_INT 3
2538: PPUSH
2539: CALL_OW 47
// bc_type = b_lab_half ;
2543: LD_ADDR_OWVAR 42
2547: PUSH
2548: LD_INT 7
2550: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
2551: LD_ADDR_OWVAR 44
2555: PUSH
2556: LD_INT 15
2558: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2559: LD_ADDR_OWVAR 45
2563: PUSH
2564: LD_INT 9
2566: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
2567: LD_INT 42
2569: PPUSH
2570: LD_INT 15
2572: PPUSH
2573: LD_INT 2
2575: PPUSH
2576: CALL_OW 47
// end ; end ; end_of_file
2580: LD_VAR 0 1
2584: RET
// every 1 do var i , j , lab , tmp ;
2585: GO 2587
2587: DISABLE
2588: LD_INT 0
2590: PPUSH
2591: PPUSH
2592: PPUSH
2593: PPUSH
// begin lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: LD_INT 22
2601: PUSH
2602: LD_INT 1
2604: PUSH
2605: EMPTY
2606: LIST
2607: LIST
2608: PUSH
2609: LD_INT 2
2611: PUSH
2612: LD_INT 30
2614: PUSH
2615: LD_INT 6
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: PUSH
2622: LD_INT 30
2624: PUSH
2625: LD_INT 7
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: PUSH
2632: LD_INT 30
2634: PUSH
2635: LD_INT 8
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PPUSH
2652: CALL_OW 69
2656: ST_TO_ADDR
// InGameOn ;
2657: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
2661: LD_VAR 0 3
2665: PUSH
2666: LD_INT 1
2668: ARRAY
2669: PPUSH
2670: CALL_OW 87
// if IsOK ( Denis ) then
2674: LD_EXP 3
2678: PPUSH
2679: CALL_OW 302
2683: IFFALSE 2711
// begin SetTech ( tech_radar , 1 , state_researched ) ;
2685: LD_INT 6
2687: PPUSH
2688: LD_INT 1
2690: PPUSH
2691: LD_INT 2
2693: PPUSH
2694: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
2698: LD_INT 20
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: LD_INT 1
2706: PPUSH
2707: CALL_OW 324
// end ; ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
2711: LD_EXP 1
2715: PUSH
2716: LD_EXP 14
2720: PUSH
2721: LD_EXP 3
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PPUSH
2731: LD_VAR 0 3
2735: PUSH
2736: LD_INT 1
2738: ARRAY
2739: PPUSH
2740: CALL_OW 120
// Say ( JMM , D1-JMM-1 ) ;
2744: LD_EXP 1
2748: PPUSH
2749: LD_STRING D1-JMM-1
2751: PPUSH
2752: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
2756: LD_EXP 14
2760: PPUSH
2761: LD_STRING D1-Sci-1
2763: PPUSH
2764: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
2768: LD_EXP 1
2772: PPUSH
2773: LD_STRING D1-JMM-2
2775: PPUSH
2776: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
2780: LD_EXP 14
2784: PPUSH
2785: LD_STRING D1-Sci-2
2787: PPUSH
2788: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
2792: LD_EXP 1
2796: PPUSH
2797: LD_STRING D1-JMM-3
2799: PPUSH
2800: CALL_OW 88
// if IsOK ( Denis ) then
2804: LD_EXP 3
2808: PPUSH
2809: CALL_OW 302
2813: IFFALSE 2829
// Say ( DeltaDoctor , D1-Sci-3 ) else
2815: LD_EXP 14
2819: PPUSH
2820: LD_STRING D1-Sci-3
2822: PPUSH
2823: CALL_OW 88
2827: GO 2841
// Say ( DeltaDoctor , D1-Sci-3a ) ;
2829: LD_EXP 14
2833: PPUSH
2834: LD_STRING D1-Sci-3a
2836: PPUSH
2837: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
2841: LD_EXP 1
2845: PPUSH
2846: LD_STRING D1-JMM-4
2848: PPUSH
2849: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
2853: LD_ADDR_VAR 0 4
2857: PUSH
2858: LD_INT 22
2860: PUSH
2861: LD_INT 1
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PUSH
2868: LD_INT 25
2870: PUSH
2871: LD_INT 4
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PUSH
2878: LD_INT 3
2880: PUSH
2881: LD_INT 54
2883: PUSH
2884: EMPTY
2885: LIST
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: LIST
2895: PPUSH
2896: CALL_OW 69
2900: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
2901: LD_ADDR_VAR 0 1
2905: PUSH
2906: LD_INT 22
2908: PUSH
2909: LD_INT 0
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PPUSH
2916: CALL_OW 69
2920: PUSH
2921: FOR_IN
2922: IFFALSE 2972
// for j in tmp do
2924: LD_ADDR_VAR 0 2
2928: PUSH
2929: LD_VAR 0 4
2933: PUSH
2934: FOR_IN
2935: IFFALSE 2968
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
2937: LD_VAR 0 2
2941: PPUSH
2942: LD_VAR 0 1
2946: PPUSH
2947: CALL_OW 250
2951: PPUSH
2952: LD_VAR 0 1
2956: PPUSH
2957: CALL_OW 251
2961: PPUSH
2962: CALL_OW 191
2966: GO 2934
2968: POP
2969: POP
2970: GO 2921
2972: POP
2973: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
2974: LD_EXP 14
2978: PPUSH
2979: LD_STRING D1-Sci-4
2981: PPUSH
2982: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
2986: LD_EXP 1
2990: PPUSH
2991: LD_STRING D1-JMM-5
2993: PPUSH
2994: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
2998: LD_EXP 14
3002: PPUSH
3003: LD_STRING D1-Sci-5
3005: PPUSH
3006: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3010: LD_EXP 1
3014: PPUSH
3015: LD_STRING D1-JMM-6
3017: PPUSH
3018: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3022: LD_EXP 15
3026: PPUSH
3027: LD_STRING D1-Har-6
3029: PPUSH
3030: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3034: LD_EXP 1
3038: PPUSH
3039: LD_STRING D1-JMM-7
3041: PPUSH
3042: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3046: LD_EXP 15
3050: PPUSH
3051: LD_STRING D1-Har-7
3053: PPUSH
3054: CALL_OW 94
// if IsOK ( Denis ) then
3058: LD_EXP 3
3062: PPUSH
3063: CALL_OW 302
3067: IFFALSE 3081
// Say ( JMM , D1-JMM-8 ) ;
3069: LD_EXP 1
3073: PPUSH
3074: LD_STRING D1-JMM-8
3076: PPUSH
3077: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3081: LD_EXP 1
3085: PPUSH
3086: LD_STRING D1-JMM-8a
3088: PPUSH
3089: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3093: LD_EXP 15
3097: PPUSH
3098: LD_STRING D1-Har-8
3100: PPUSH
3101: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_STRING D1-JMM-9
3112: PPUSH
3113: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3117: LD_EXP 15
3121: PPUSH
3122: LD_STRING D1-Har-9
3124: PPUSH
3125: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3129: LD_EXP 1
3133: PPUSH
3134: LD_STRING D1-JMM-10
3136: PPUSH
3137: CALL_OW 88
// if IsOK ( Denis ) then
3141: LD_EXP 3
3145: PPUSH
3146: CALL_OW 302
3150: IFFALSE 3164
// Say ( JMM , D1-JMM-10a ) ;
3152: LD_EXP 1
3156: PPUSH
3157: LD_STRING D1-JMM-10a
3159: PPUSH
3160: CALL_OW 88
// SelectAndSaveCharacters ;
3164: CALL 3569 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3168: LD_VAR 0 3
3172: PUSH
3173: LD_INT 1
3175: ARRAY
3176: PPUSH
3177: CALL_OW 274
3181: PPUSH
3182: LD_INT 1
3184: PPUSH
3185: LD_INT 250
3187: PPUSH
3188: CALL_OW 277
// InGameOff ;
3192: CALL_OW 9
// Query ( Q1 ) ;
3196: LD_STRING Q1
3198: PPUSH
3199: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3203: LD_INT 3
3205: PPUSH
3206: LD_INT 1
3208: PPUSH
3209: CALL_OW 424
// end ;
3213: PPOPN 4
3215: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i ;
3216: LD_INT 3
3218: PPUSH
3219: LD_INT 22
3221: PUSH
3222: LD_INT 1
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 21
3231: PUSH
3232: LD_INT 1
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PPUSH
3243: CALL_OW 71
3247: PUSH
3248: LD_INT 0
3250: EQUAL
3251: IFFALSE 3509
3253: GO 3255
3255: DISABLE
3256: LD_INT 0
3258: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) > 0 then
3259: LD_INT 3
3261: PPUSH
3262: LD_INT 21
3264: PUSH
3265: LD_INT 2
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: EMPTY
3273: LIST
3274: PPUSH
3275: CALL_OW 70
3279: PUSH
3280: LD_INT 0
3282: GREATER
3283: IFFALSE 3499
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) do
3285: LD_ADDR_VAR 0 1
3289: PUSH
3290: LD_INT 3
3292: PPUSH
3293: LD_INT 21
3295: PUSH
3296: LD_INT 2
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: PUSH
3303: EMPTY
3304: LIST
3305: PPUSH
3306: CALL_OW 70
3310: PUSH
3311: FOR_IN
3312: IFFALSE 3485
// begin if GetWeapon ( i ) = us_cargo_bay then
3314: LD_VAR 0 1
3318: PPUSH
3319: CALL_OW 264
3323: PUSH
3324: LD_INT 12
3326: EQUAL
3327: IFFALSE 3423
// begin yourVehicles = yourVehicles ^ [ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetCargoType ( i ) , GetCargo ( i , GetCargoType ( i ) ) ] ] ;
3329: LD_ADDR_EXP 13
3333: PUSH
3334: LD_EXP 13
3338: PUSH
3339: LD_VAR 0 1
3343: PPUSH
3344: CALL_OW 265
3348: PUSH
3349: LD_VAR 0 1
3353: PPUSH
3354: CALL_OW 262
3358: PUSH
3359: LD_VAR 0 1
3363: PPUSH
3364: CALL_OW 263
3368: PUSH
3369: LD_VAR 0 1
3373: PPUSH
3374: CALL_OW 264
3378: PUSH
3379: LD_VAR 0 1
3383: PPUSH
3384: CALL_OW 288
3388: PUSH
3389: LD_VAR 0 1
3393: PPUSH
3394: LD_VAR 0 1
3398: PPUSH
3399: CALL_OW 288
3403: PPUSH
3404: CALL_OW 289
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: PUSH
3417: EMPTY
3418: LIST
3419: ADD
3420: ST_TO_ADDR
// end else
3421: GO 3483
// begin yourVehicles = yourVehicles ^ [ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
3423: LD_ADDR_EXP 13
3427: PUSH
3428: LD_EXP 13
3432: PUSH
3433: LD_VAR 0 1
3437: PPUSH
3438: CALL_OW 265
3442: PUSH
3443: LD_VAR 0 1
3447: PPUSH
3448: CALL_OW 262
3452: PUSH
3453: LD_VAR 0 1
3457: PPUSH
3458: CALL_OW 263
3462: PUSH
3463: LD_VAR 0 1
3467: PPUSH
3468: CALL_OW 264
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: PUSH
3479: EMPTY
3480: LIST
3481: ADD
3482: ST_TO_ADDR
// end ; end ;
3483: GO 3311
3485: POP
3486: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
3487: LD_EXP 13
3491: PPUSH
3492: LD_STRING 06_VehiclesIn06_1
3494: PPUSH
3495: CALL_OW 39
// end ; ChangeMap ( 6 , %_cont ) ;
3499: LD_INT 6
3501: PPUSH
3502: LD_STRING %_cont
3504: PPUSH
3505: CALL_OW 340
// end ; end_of_file
3509: PPOPN 1
3511: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3512: LD_INT 0
3514: PPUSH
3515: PPUSH
// if exist_mode then
3516: LD_VAR 0 2
3520: IFFALSE 3539
// unit := CreateCharacter ( ident ) else
3522: LD_ADDR_VAR 0 4
3526: PUSH
3527: LD_VAR 0 1
3531: PPUSH
3532: CALL_OW 34
3536: ST_TO_ADDR
3537: GO 3554
// unit := NewCharacter ( ident ) ;
3539: LD_ADDR_VAR 0 4
3543: PUSH
3544: LD_VAR 0 1
3548: PPUSH
3549: CALL_OW 25
3553: ST_TO_ADDR
// result := unit ;
3554: LD_ADDR_VAR 0 3
3558: PUSH
3559: LD_VAR 0 4
3563: ST_TO_ADDR
// end ;
3564: LD_VAR 0 3
3568: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test ; begin
3569: LD_INT 0
3571: PPUSH
3572: PPUSH
3573: PPUSH
3574: PPUSH
3575: PPUSH
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
3576: LD_ADDR_VAR 0 3
3580: PUSH
3581: LD_INT 22
3583: PUSH
3584: LD_INT 1
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: PUSH
3591: LD_INT 21
3593: PUSH
3594: LD_INT 1
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 2
3603: PUSH
3604: LD_INT 25
3606: PUSH
3607: LD_INT 1
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: LD_INT 25
3616: PUSH
3617: LD_INT 2
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 25
3626: PUSH
3627: LD_INT 3
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: LD_INT 25
3636: PUSH
3637: LD_INT 4
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: LIST
3655: PPUSH
3656: CALL_OW 69
3660: PUSH
3661: LD_EXP 1
3665: PUSH
3666: LD_EXP 14
3670: PUSH
3671: LD_EXP 3
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: DIFF
3681: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
3682: LD_ADDR_VAR 0 4
3686: PUSH
3687: LD_STRING text
3689: PPUSH
3690: LD_INT 5
3692: PPUSH
3693: LD_INT 5
3695: PPUSH
3696: LD_INT -5
3698: PUSH
3699: LD_EXP 1
3703: PUSH
3704: LD_INT -6
3706: PUSH
3707: LD_INT -2
3709: PUSH
3710: LD_INT -3
3712: PUSH
3713: LD_INT -5
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: PUSH
3724: LD_VAR 0 3
3728: ADD
3729: PUSH
3730: LD_INT -6
3732: PUSH
3733: LD_INT -4
3735: PUSH
3736: LD_EXP 3
3740: PUSH
3741: LD_EXP 14
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: ADD
3752: PPUSH
3753: LD_INT 1
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: LD_INT 1
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 4
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: PPUSH
3778: CALL_OW 42
3782: ST_TO_ADDR
// SaveCharacters ( JMM , JMM ) ;
3783: LD_EXP 1
3787: PPUSH
3788: LD_STRING JMM
3790: PPUSH
3791: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
3795: LD_EXP 14
3799: PPUSH
3800: LD_STRING DeltaDoctor
3802: PPUSH
3803: CALL_OW 38
// SaveCharacters ( Denis , Denis ) ;
3807: LD_EXP 3
3811: PPUSH
3812: LD_STRING Denis
3814: PPUSH
3815: CALL_OW 38
// SaveCharacters ( yourApemans , ApeIn06 ) ;
3819: LD_EXP 12
3823: PPUSH
3824: LD_STRING ApeIn06
3826: PPUSH
3827: CALL_OW 38
// if Lisa in selectedPeople then
3831: LD_EXP 4
3835: PUSH
3836: LD_VAR 0 4
3840: IN
3841: IFFALSE 3865
// begin SaveCharacters ( Lisa , Lisa ) ;
3843: LD_EXP 4
3847: PPUSH
3848: LD_STRING Lisa
3850: PPUSH
3851: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
3855: LD_INT 1
3857: PPUSH
3858: LD_STRING LisaIn06
3860: PPUSH
3861: CALL_OW 39
// end ; if Bobby in selectedPeople then
3865: LD_EXP 6
3869: PUSH
3870: LD_VAR 0 4
3874: IN
3875: IFFALSE 3899
// begin SaveCharacters ( Bobby , Bobby ) ;
3877: LD_EXP 6
3881: PPUSH
3882: LD_STRING Bobby
3884: PPUSH
3885: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
3889: LD_INT 1
3891: PPUSH
3892: LD_STRING BobbyIn06
3894: PPUSH
3895: CALL_OW 39
// end ; if Cyrus in selectedPeople then
3899: LD_EXP 7
3903: PUSH
3904: LD_VAR 0 4
3908: IN
3909: IFFALSE 3933
// begin SaveCharacters ( Cyrus , Cyrus ) ;
3911: LD_EXP 7
3915: PPUSH
3916: LD_STRING Cyrus
3918: PPUSH
3919: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
3923: LD_INT 1
3925: PPUSH
3926: LD_STRING CyrusIn06
3928: PPUSH
3929: CALL_OW 39
// end ; if Frank in selectedPeople then
3933: LD_EXP 5
3937: PUSH
3938: LD_VAR 0 4
3942: IN
3943: IFFALSE 3967
// begin SaveCharacters ( Frank , Frank ) ;
3945: LD_EXP 5
3949: PPUSH
3950: LD_STRING Frank
3952: PPUSH
3953: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
3957: LD_INT 1
3959: PPUSH
3960: LD_STRING FrankIn06
3962: PPUSH
3963: CALL_OW 39
// end ; if Brown in selectedPeople then
3967: LD_EXP 8
3971: PUSH
3972: LD_VAR 0 4
3976: IN
3977: IFFALSE 4001
// begin SaveCharacters ( Brown , Brown ) ;
3979: LD_EXP 8
3983: PPUSH
3984: LD_STRING Brown
3986: PPUSH
3987: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
3991: LD_INT 1
3993: PPUSH
3994: LD_STRING BrownIn06
3996: PPUSH
3997: CALL_OW 39
// end ; if Donaldson in selectedPeople then
4001: LD_EXP 9
4005: PUSH
4006: LD_VAR 0 4
4010: IN
4011: IFFALSE 4035
// begin SaveCharacters ( Donaldson , Donaldson ) ;
4013: LD_EXP 9
4017: PPUSH
4018: LD_STRING Donaldson
4020: PPUSH
4021: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
4025: LD_INT 1
4027: PPUSH
4028: LD_STRING DonaldsonIn06
4030: PPUSH
4031: CALL_OW 39
// end ; if Gladstone in selectedPeople then
4035: LD_EXP 2
4039: PUSH
4040: LD_VAR 0 4
4044: IN
4045: IFFALSE 4069
// begin SaveCharacters ( Gladstone , Gladstone ) ;
4047: LD_EXP 2
4051: PPUSH
4052: LD_STRING Gladstone
4054: PPUSH
4055: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
4059: LD_INT 1
4061: PPUSH
4062: LD_STRING GladstoneIn06
4064: PPUSH
4065: CALL_OW 39
// end ; SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4069: LD_INT 22
4071: PUSH
4072: LD_INT 1
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 21
4081: PUSH
4082: LD_INT 1
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PPUSH
4093: CALL_OW 69
4097: PPUSH
4098: LD_INT 4
4100: PPUSH
4101: CALL_OW 235
// for i in selectedPeople do
4105: LD_ADDR_VAR 0 2
4109: PUSH
4110: LD_VAR 0 4
4114: PUSH
4115: FOR_IN
4116: IFFALSE 4132
// SetSide ( i , 1 ) ;
4118: LD_VAR 0 2
4122: PPUSH
4123: LD_INT 1
4125: PPUSH
4126: CALL_OW 235
4130: GO 4115
4132: POP
4133: POP
// for i in yourApemans do
4134: LD_ADDR_VAR 0 2
4138: PUSH
4139: LD_EXP 12
4143: PUSH
4144: FOR_IN
4145: IFFALSE 4161
// SetSide ( i , 1 ) ;
4147: LD_VAR 0 2
4151: PPUSH
4152: LD_INT 1
4154: PPUSH
4155: CALL_OW 235
4159: GO 4144
4161: POP
4162: POP
// SetSide ( JMM , 1 ) ;
4163: LD_EXP 1
4167: PPUSH
4168: LD_INT 1
4170: PPUSH
4171: CALL_OW 235
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone ] , OthersIn06 ) ;
4175: LD_INT 22
4177: PUSH
4178: LD_INT 1
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: LD_INT 21
4187: PUSH
4188: LD_INT 1
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: PPUSH
4199: CALL_OW 69
4203: PUSH
4204: LD_EXP 1
4208: PUSH
4209: LD_EXP 4
4213: PUSH
4214: LD_EXP 6
4218: PUSH
4219: LD_EXP 7
4223: PUSH
4224: LD_EXP 5
4228: PUSH
4229: LD_EXP 8
4233: PUSH
4234: LD_EXP 9
4238: PUSH
4239: LD_EXP 2
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: DIFF
4254: PPUSH
4255: LD_STRING OthersIn06
4257: PPUSH
4258: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor ] , OthersStayInDelta ) ;
4262: LD_INT 22
4264: PUSH
4265: LD_INT 4
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: PUSH
4272: LD_INT 2
4274: PUSH
4275: LD_INT 25
4277: PUSH
4278: LD_INT 1
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: PUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 2
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PUSH
4295: LD_INT 25
4297: PUSH
4298: LD_INT 3
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 25
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: PPUSH
4326: CALL_OW 69
4330: PUSH
4331: LD_EXP 14
4335: PUSH
4336: EMPTY
4337: LIST
4338: DIFF
4339: PPUSH
4340: LD_STRING OthersStayInDelta
4342: PPUSH
4343: CALL_OW 38
// end ; end_of_file
4347: LD_VAR 0 1
4351: RET
// on Command ( comandid ) do var i ;
4352: LD_INT 0
4354: PPUSH
// begin if comandid = 65 then
4355: LD_VAR 0 1
4359: PUSH
4360: LD_INT 65
4362: EQUAL
4363: IFFALSE 4415
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
4365: LD_ADDR_VAR 0 2
4369: PUSH
4370: LD_INT 22
4372: PUSH
4373: LD_INT 1
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: LD_INT 21
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: PPUSH
4394: CALL_OW 69
4398: PUSH
4399: FOR_IN
4400: IFFALSE 4413
// ComStop ( i ) ;
4402: LD_VAR 0 2
4406: PPUSH
4407: CALL_OW 141
4411: GO 4399
4413: POP
4414: POP
// end ;
4415: PPOPN 2
4417: END
// on ApemanTamed ( apeman , human ) do var tmp ;
4418: LD_INT 0
4420: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
4421: LD_ADDR_VAR 0 3
4425: PUSH
4426: LD_INT 22
4428: PUSH
4429: LD_INT 1
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: LD_INT 21
4438: PUSH
4439: LD_INT 3
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 30
4448: PUSH
4449: LD_INT 0
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: LIST
4460: PPUSH
4461: CALL_OW 69
4465: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
4466: LD_VAR 0 1
4470: PPUSH
4471: LD_VAR 0 3
4475: PUSH
4476: LD_INT 1
4478: ARRAY
4479: PPUSH
4480: CALL_OW 120
// SetSide ( apeman , 4 ) ;
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_INT 4
4491: PPUSH
4492: CALL_OW 235
// end ;
4496: PPOPN 3
4498: END
