// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; export cutscene ; export lab ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 17
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 18
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// mission_prefix := 06_ ;
  59: LD_ADDR_EXP 20
  63: PUSH
  64: LD_STRING 06_
  66: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  67: LD_ADDR_EXP 21
  71: PUSH
  72: LD_STRING 05_
  74: ST_TO_ADDR
// PrepareDeltaBase ;
  75: CALL 2226 0 0
// LoadVehicles ;
  79: CALL 1268 0 0
// PrepareHeroes ;
  83: CALL 155 0 0
// PrepareRandoms ;
  87: CALL 1569 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
  91: LD_ADDR_EXP 19
  95: PUSH
  96: LD_INT 22
  98: PUSH
  99: LD_INT 1
 101: PUSH
 102: EMPTY
 103: LIST
 104: LIST
 105: PUSH
 106: LD_INT 2
 108: PUSH
 109: LD_INT 30
 111: PUSH
 112: LD_INT 6
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: LD_INT 30
 121: PUSH
 122: LD_INT 7
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: PUSH
 129: LD_INT 30
 131: PUSH
 132: LD_INT 8
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: LIST
 143: LIST
 144: PUSH
 145: EMPTY
 146: LIST
 147: LIST
 148: PPUSH
 149: CALL_OW 69
 153: ST_TO_ADDR
// end ; end_of_file
 154: END
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 155: LD_INT 0
 157: PPUSH
 158: PPUSH
 159: PPUSH
 160: PPUSH
 161: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 162: LD_ADDR_VAR 0 3
 166: PUSH
 167: LD_INT 22
 169: PUSH
 170: LD_INT 1
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PUSH
 177: LD_INT 21
 179: PUSH
 180: LD_INT 3
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: LD_INT 30
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: EMPTY
 194: LIST
 195: LIST
 196: PUSH
 197: EMPTY
 198: LIST
 199: LIST
 200: LIST
 201: PPUSH
 202: CALL_OW 69
 206: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 207: LD_VAR 0 3
 211: PUSH
 212: LD_INT 1
 214: ARRAY
 215: PPUSH
 216: LD_STRING delta
 218: PPUSH
 219: CALL_OW 500
// uc_side = 1 ;
 223: LD_ADDR_OWVAR 20
 227: PUSH
 228: LD_INT 1
 230: ST_TO_ADDR
// uc_nation = 1 ;
 231: LD_ADDR_OWVAR 21
 235: PUSH
 236: LD_INT 1
 238: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 239: LD_ADDR_EXP 1
 243: PUSH
 244: LD_STRING JMM
 246: PPUSH
 247: LD_INT 1
 249: PPUSH
 250: CALL 4141 0 2
 254: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 255: LD_ADDR_EXP 16
 259: PUSH
 260: LD_STRING Harisson
 262: PPUSH
 263: LD_INT 0
 265: PPUSH
 266: CALL 4141 0 2
 270: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 271: LD_EXP 1
 275: PPUSH
 276: LD_VAR 0 3
 280: PUSH
 281: LD_INT 1
 283: ARRAY
 284: PPUSH
 285: CALL_OW 250
 289: PPUSH
 290: LD_VAR 0 3
 294: PUSH
 295: LD_INT 1
 297: ARRAY
 298: PPUSH
 299: CALL_OW 251
 303: PPUSH
 304: LD_INT 5
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 314: LD_EXP 1
 318: PPUSH
 319: LD_INT 1
 321: PPUSH
 322: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true ) ;
 326: LD_ADDR_EXP 2
 330: PUSH
 331: LD_STRING Gladstone
 333: PPUSH
 334: LD_INT 1
 336: PPUSH
 337: CALL 4141 0 2
 341: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 342: LD_EXP 2
 346: PPUSH
 347: LD_VAR 0 3
 351: PUSH
 352: LD_INT 1
 354: ARRAY
 355: PPUSH
 356: CALL_OW 250
 360: PPUSH
 361: LD_VAR 0 3
 365: PUSH
 366: LD_INT 1
 368: ARRAY
 369: PPUSH
 370: CALL_OW 251
 374: PPUSH
 375: LD_INT 5
 377: PPUSH
 378: LD_INT 0
 380: PPUSH
 381: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 385: LD_EXP 2
 389: PPUSH
 390: LD_INT 4
 392: PPUSH
 393: CALL_OW 336
// Denis = PrepareUnit ( Denis , true ) ;
 397: LD_ADDR_EXP 3
 401: PUSH
 402: LD_STRING Denis
 404: PPUSH
 405: LD_INT 1
 407: PPUSH
 408: CALL 4141 0 2
 412: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 413: LD_EXP 3
 417: PPUSH
 418: LD_VAR 0 3
 422: PUSH
 423: LD_INT 1
 425: ARRAY
 426: PPUSH
 427: CALL_OW 250
 431: PPUSH
 432: LD_VAR 0 3
 436: PUSH
 437: LD_INT 1
 439: ARRAY
 440: PPUSH
 441: CALL_OW 251
 445: PPUSH
 446: LD_INT 5
 448: PPUSH
 449: LD_INT 0
 451: PPUSH
 452: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 456: LD_EXP 3
 460: PPUSH
 461: LD_INT 4
 463: PPUSH
 464: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 468: LD_STRING FrankInDelta
 470: PPUSH
 471: LD_INT 0
 473: PPUSH
 474: CALL_OW 30
 478: PUSH
 479: LD_INT 1
 481: EQUAL
 482: IFFALSE 555
// begin Frank = PrepareUnit ( Frank , true ) ;
 484: LD_ADDR_EXP 5
 488: PUSH
 489: LD_STRING Frank
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: CALL 4141 0 2
 499: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 500: LD_EXP 5
 504: PPUSH
 505: LD_VAR 0 3
 509: PUSH
 510: LD_INT 1
 512: ARRAY
 513: PPUSH
 514: CALL_OW 250
 518: PPUSH
 519: LD_VAR 0 3
 523: PUSH
 524: LD_INT 1
 526: ARRAY
 527: PPUSH
 528: CALL_OW 251
 532: PPUSH
 533: LD_INT 5
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 543: LD_EXP 5
 547: PPUSH
 548: LD_INT 1
 550: PPUSH
 551: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 555: LD_STRING LisaInDelta
 557: PPUSH
 558: LD_INT 0
 560: PPUSH
 561: CALL_OW 30
 565: PUSH
 566: LD_INT 1
 568: EQUAL
 569: IFFALSE 642
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 571: LD_ADDR_EXP 4
 575: PUSH
 576: LD_STRING Lisa
 578: PPUSH
 579: LD_INT 1
 581: PPUSH
 582: CALL 4141 0 2
 586: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 587: LD_EXP 4
 591: PPUSH
 592: LD_VAR 0 3
 596: PUSH
 597: LD_INT 1
 599: ARRAY
 600: PPUSH
 601: CALL_OW 250
 605: PPUSH
 606: LD_VAR 0 3
 610: PUSH
 611: LD_INT 1
 613: ARRAY
 614: PPUSH
 615: CALL_OW 251
 619: PPUSH
 620: LD_INT 5
 622: PPUSH
 623: LD_INT 0
 625: PPUSH
 626: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 630: LD_EXP 4
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 642: LD_STRING BobbyInDelta
 644: PPUSH
 645: LD_INT 0
 647: PPUSH
 648: CALL_OW 30
 652: PUSH
 653: LD_INT 1
 655: EQUAL
 656: IFFALSE 729
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 658: LD_ADDR_EXP 6
 662: PUSH
 663: LD_STRING Bobby
 665: PPUSH
 666: LD_INT 1
 668: PPUSH
 669: CALL 4141 0 2
 673: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 674: LD_EXP 6
 678: PPUSH
 679: LD_VAR 0 3
 683: PUSH
 684: LD_INT 1
 686: ARRAY
 687: PPUSH
 688: CALL_OW 250
 692: PPUSH
 693: LD_VAR 0 3
 697: PUSH
 698: LD_INT 1
 700: ARRAY
 701: PPUSH
 702: CALL_OW 251
 706: PPUSH
 707: LD_INT 5
 709: PPUSH
 710: LD_INT 0
 712: PPUSH
 713: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 717: LD_EXP 6
 721: PPUSH
 722: LD_INT 1
 724: PPUSH
 725: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 729: LD_STRING CyrusInDelta
 731: PPUSH
 732: LD_INT 0
 734: PPUSH
 735: CALL_OW 30
 739: PUSH
 740: LD_INT 1
 742: EQUAL
 743: IFFALSE 816
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 745: LD_ADDR_EXP 7
 749: PUSH
 750: LD_STRING Cyrus
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: CALL 4141 0 2
 760: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 761: LD_EXP 7
 765: PPUSH
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 1
 773: ARRAY
 774: PPUSH
 775: CALL_OW 250
 779: PPUSH
 780: LD_VAR 0 3
 784: PUSH
 785: LD_INT 1
 787: ARRAY
 788: PPUSH
 789: CALL_OW 251
 793: PPUSH
 794: LD_INT 5
 796: PPUSH
 797: LD_INT 0
 799: PPUSH
 800: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 804: LD_EXP 7
 808: PPUSH
 809: LD_INT 1
 811: PPUSH
 812: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 816: LD_STRING DonaldsonInDelta
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 30
 826: PUSH
 827: LD_INT 1
 829: EQUAL
 830: IFFALSE 903
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 832: LD_ADDR_EXP 9
 836: PUSH
 837: LD_STRING Donaldson
 839: PPUSH
 840: LD_INT 1
 842: PPUSH
 843: CALL 4141 0 2
 847: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 848: LD_EXP 9
 852: PPUSH
 853: LD_VAR 0 3
 857: PUSH
 858: LD_INT 1
 860: ARRAY
 861: PPUSH
 862: CALL_OW 250
 866: PPUSH
 867: LD_VAR 0 3
 871: PUSH
 872: LD_INT 1
 874: ARRAY
 875: PPUSH
 876: CALL_OW 251
 880: PPUSH
 881: LD_INT 5
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
 891: LD_EXP 9
 895: PPUSH
 896: LD_INT 1
 898: PPUSH
 899: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
 903: LD_STRING BrownInDelta
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL_OW 30
 913: PUSH
 914: LD_INT 1
 916: EQUAL
 917: IFFALSE 990
// begin Brown = PrepareUnit ( Brown , true ) ;
 919: LD_ADDR_EXP 8
 923: PUSH
 924: LD_STRING Brown
 926: PPUSH
 927: LD_INT 1
 929: PPUSH
 930: CALL 4141 0 2
 934: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 935: LD_EXP 8
 939: PPUSH
 940: LD_VAR 0 3
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: CALL_OW 250
 953: PPUSH
 954: LD_VAR 0 3
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: PPUSH
 963: CALL_OW 251
 967: PPUSH
 968: LD_INT 5
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 50
// SetClass ( Brown , 2 ) ;
 978: LD_EXP 8
 982: PPUSH
 983: LD_INT 2
 985: PPUSH
 986: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
 990: LD_ADDR_EXP 10
 994: PUSH
 995: LD_STRING othersInDelta
 997: PPUSH
 998: CALL_OW 31
1002: ST_TO_ADDR
// for i in others do
1003: LD_ADDR_VAR 0 2
1007: PUSH
1008: LD_EXP 10
1012: PUSH
1013: FOR_IN
1014: IFFALSE 1061
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1016: LD_VAR 0 2
1020: PPUSH
1021: LD_VAR 0 3
1025: PUSH
1026: LD_INT 1
1028: ARRAY
1029: PPUSH
1030: CALL_OW 250
1034: PPUSH
1035: LD_VAR 0 3
1039: PUSH
1040: LD_INT 1
1042: ARRAY
1043: PPUSH
1044: CALL_OW 251
1048: PPUSH
1049: LD_INT 35
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL_OW 50
1059: GO 1013
1061: POP
1062: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1063: LD_ADDR_EXP 12
1067: PUSH
1068: LD_STRING apeInDelta
1070: PPUSH
1071: CALL_OW 31
1075: ST_TO_ADDR
// uc_nation = 0 ;
1076: LD_ADDR_OWVAR 21
1080: PUSH
1081: LD_INT 0
1083: ST_TO_ADDR
// if apemans > 5 then
1084: LD_EXP 12
1088: PUSH
1089: LD_INT 5
1091: GREATER
1092: IFFALSE 1187
// begin for i := 1 to 5 do
1094: LD_ADDR_VAR 0 2
1098: PUSH
1099: DOUBLE
1100: LD_INT 1
1102: DEC
1103: ST_TO_ADDR
1104: LD_INT 5
1106: PUSH
1107: FOR_TO
1108: IFFALSE 1183
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1110: LD_EXP 12
1114: PUSH
1115: LD_VAR 0 2
1119: ARRAY
1120: PPUSH
1121: LD_VAR 0 3
1125: PUSH
1126: LD_INT 1
1128: ARRAY
1129: PPUSH
1130: CALL_OW 250
1134: PPUSH
1135: LD_VAR 0 3
1139: PUSH
1140: LD_INT 1
1142: ARRAY
1143: PPUSH
1144: CALL_OW 251
1148: PPUSH
1149: LD_INT 50
1151: PPUSH
1152: LD_INT 0
1154: PPUSH
1155: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1159: LD_ADDR_EXP 13
1163: PUSH
1164: LD_EXP 13
1168: PUSH
1169: LD_EXP 12
1173: PUSH
1174: LD_VAR 0 2
1178: ARRAY
1179: ADD
1180: ST_TO_ADDR
// end ;
1181: GO 1107
1183: POP
1184: POP
// end else
1185: GO 1263
// begin for i in apemans do
1187: LD_ADDR_VAR 0 2
1191: PUSH
1192: LD_EXP 12
1196: PUSH
1197: FOR_IN
1198: IFFALSE 1261
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1200: LD_VAR 0 2
1204: PPUSH
1205: LD_VAR 0 3
1209: PUSH
1210: LD_INT 1
1212: ARRAY
1213: PPUSH
1214: CALL_OW 250
1218: PPUSH
1219: LD_VAR 0 3
1223: PUSH
1224: LD_INT 1
1226: ARRAY
1227: PPUSH
1228: CALL_OW 251
1232: PPUSH
1233: LD_INT 50
1235: PPUSH
1236: LD_INT 0
1238: PPUSH
1239: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1243: LD_ADDR_EXP 13
1247: PUSH
1248: LD_EXP 13
1252: PUSH
1253: LD_VAR 0 2
1257: ADD
1258: ST_TO_ADDR
// end ;
1259: GO 1197
1261: POP
1262: POP
// end ; end ;
1263: LD_VAR 0 1
1267: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1268: LD_INT 0
1270: PPUSH
1271: PPUSH
1272: PPUSH
1273: PPUSH
1274: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1275: LD_ADDR_VAR 0 4
1279: PUSH
1280: LD_INT 22
1282: PUSH
1283: LD_INT 1
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: LD_INT 21
1292: PUSH
1293: LD_INT 3
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: PUSH
1300: LD_INT 30
1302: PUSH
1303: LD_INT 0
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: PPUSH
1315: CALL_OW 69
1319: ST_TO_ADDR
// uc_side = 1 ;
1320: LD_ADDR_OWVAR 20
1324: PUSH
1325: LD_INT 1
1327: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1328: LD_ADDR_VAR 0 5
1332: PUSH
1333: LD_STRING vehiclesInDelta
1335: PPUSH
1336: EMPTY
1337: PPUSH
1338: CALL_OW 30
1342: ST_TO_ADDR
// for i = 1 to vehicles do
1343: LD_ADDR_VAR 0 2
1347: PUSH
1348: DOUBLE
1349: LD_INT 1
1351: DEC
1352: ST_TO_ADDR
1353: LD_VAR 0 5
1357: PUSH
1358: FOR_TO
1359: IFFALSE 1562
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1361: LD_VAR 0 5
1365: PUSH
1366: LD_VAR 0 2
1370: PUSH
1371: LD_INT 4
1373: PLUS
1374: ARRAY
1375: PUSH
1376: LD_INT 11
1378: EQUAL
1379: PUSH
1380: LD_VAR 0 5
1384: PUSH
1385: LD_VAR 0 2
1389: ARRAY
1390: PUSH
1391: LD_INT 3
1393: EQUAL
1394: OR
1395: IFFALSE 1546
// begin uc_nation = vehicles [ i ] ;
1397: LD_ADDR_OWVAR 21
1401: PUSH
1402: LD_VAR 0 5
1406: PUSH
1407: LD_VAR 0 2
1411: ARRAY
1412: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1413: LD_ADDR_OWVAR 37
1417: PUSH
1418: LD_VAR 0 5
1422: PUSH
1423: LD_VAR 0 2
1427: PUSH
1428: LD_INT 1
1430: PLUS
1431: ARRAY
1432: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1433: LD_ADDR_OWVAR 39
1437: PUSH
1438: LD_VAR 0 5
1442: PUSH
1443: LD_VAR 0 2
1447: PUSH
1448: LD_INT 2
1450: PLUS
1451: ARRAY
1452: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1453: LD_ADDR_OWVAR 38
1457: PUSH
1458: LD_VAR 0 5
1462: PUSH
1463: LD_VAR 0 2
1467: PUSH
1468: LD_INT 3
1470: PLUS
1471: ARRAY
1472: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1473: LD_ADDR_OWVAR 40
1477: PUSH
1478: LD_VAR 0 5
1482: PUSH
1483: LD_VAR 0 2
1487: PUSH
1488: LD_INT 4
1490: PLUS
1491: ARRAY
1492: ST_TO_ADDR
// veh = CreateVehicle ;
1493: LD_ADDR_VAR 0 3
1497: PUSH
1498: CALL_OW 45
1502: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1503: LD_VAR 0 3
1507: PPUSH
1508: LD_VAR 0 4
1512: PUSH
1513: LD_INT 1
1515: ARRAY
1516: PPUSH
1517: CALL_OW 250
1521: PPUSH
1522: LD_VAR 0 4
1526: PUSH
1527: LD_INT 1
1529: ARRAY
1530: PPUSH
1531: CALL_OW 251
1535: PPUSH
1536: LD_INT 40
1538: PPUSH
1539: LD_INT 0
1541: PPUSH
1542: CALL_OW 50
// end ; i = i + 4 ;
1546: LD_ADDR_VAR 0 2
1550: PUSH
1551: LD_VAR 0 2
1555: PUSH
1556: LD_INT 4
1558: PLUS
1559: ST_TO_ADDR
// end ;
1560: GO 1358
1562: POP
1563: POP
// end ;
1564: LD_VAR 0 1
1568: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1569: LD_INT 0
1571: PPUSH
1572: PPUSH
1573: PPUSH
1574: PPUSH
1575: PPUSH
// uc_side = 1 ;
1576: LD_ADDR_OWVAR 20
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// uc_nation = 1 ;
1584: LD_ADDR_OWVAR 21
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1592: LD_ADDR_VAR 0 4
1596: PUSH
1597: LD_INT 22
1599: PUSH
1600: LD_INT 1
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 21
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 30
1619: PUSH
1620: LD_INT 0
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: PPUSH
1632: CALL_OW 69
1636: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1637: LD_INT 22
1639: PUSH
1640: LD_INT 1
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 25
1649: PUSH
1650: LD_INT 4
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 26
1659: PUSH
1660: LD_INT 1
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: LIST
1671: PUSH
1672: EMPTY
1673: LIST
1674: PPUSH
1675: CALL_OW 69
1679: PUSH
1680: LD_EXP 1
1684: PUSH
1685: LD_EXP 7
1689: PUSH
1690: LD_EXP 6
1694: PUSH
1695: LD_EXP 5
1699: PUSH
1700: LD_EXP 2
1704: PUSH
1705: LD_EXP 3
1709: PUSH
1710: LD_EXP 8
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: DIFF
1724: IFFALSE 1825
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1726: LD_ADDR_EXP 15
1730: PUSH
1731: LD_INT 22
1733: PUSH
1734: LD_INT 1
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 25
1743: PUSH
1744: LD_INT 4
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: LD_INT 26
1753: PUSH
1754: LD_INT 1
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: PUSH
1766: EMPTY
1767: LIST
1768: PPUSH
1769: CALL_OW 69
1773: PUSH
1774: LD_EXP 1
1778: PUSH
1779: LD_EXP 7
1783: PUSH
1784: LD_EXP 6
1788: PUSH
1789: LD_EXP 5
1793: PUSH
1794: LD_EXP 2
1798: PUSH
1799: LD_EXP 3
1803: PUSH
1804: LD_EXP 8
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: DIFF
1818: PUSH
1819: LD_INT 1
1821: ARRAY
1822: ST_TO_ADDR
1823: GO 1972
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1825: LD_ADDR_VAR 0 5
1829: PUSH
1830: LD_INT 22
1832: PUSH
1833: LD_INT 1
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 26
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: EMPTY
1855: LIST
1856: PPUSH
1857: CALL_OW 69
1861: PUSH
1862: LD_EXP 1
1866: PUSH
1867: LD_EXP 7
1871: PUSH
1872: LD_EXP 6
1876: PUSH
1877: LD_EXP 5
1881: PUSH
1882: LD_EXP 2
1886: PUSH
1887: LD_EXP 3
1891: PUSH
1892: LD_EXP 8
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: DIFF
1906: ST_TO_ADDR
// if filter then
1907: LD_VAR 0 5
1911: IFFALSE 1972
// for i in filter do
1913: LD_ADDR_VAR 0 2
1917: PUSH
1918: LD_VAR 0 5
1922: PUSH
1923: FOR_IN
1924: IFFALSE 1970
// if GetSkill ( i , 4 ) >= 4 then
1926: LD_VAR 0 2
1930: PPUSH
1931: LD_INT 4
1933: PPUSH
1934: CALL_OW 259
1938: PUSH
1939: LD_INT 4
1941: GREATEREQUAL
1942: IFFALSE 1968
// begin deltaDoctor := i ;
1944: LD_ADDR_EXP 15
1948: PUSH
1949: LD_VAR 0 2
1953: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
1954: LD_EXP 15
1958: PPUSH
1959: LD_INT 4
1961: PPUSH
1962: CALL_OW 336
// break ;
1966: GO 1970
// end ;
1968: GO 1923
1970: POP
1971: POP
// end ; for i = 1 to 6 do
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: DOUBLE
1978: LD_INT 1
1980: DEC
1981: ST_TO_ADDR
1982: LD_INT 6
1984: PUSH
1985: FOR_TO
1986: IFFALSE 2129
// begin hc_gallery =  ;
1988: LD_ADDR_OWVAR 33
1992: PUSH
1993: LD_STRING 
1995: ST_TO_ADDR
// hc_name =  ;
1996: LD_ADDR_OWVAR 26
2000: PUSH
2001: LD_STRING 
2003: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) - Difficulty ) ;
2004: LD_INT 0
2006: PPUSH
2007: LD_INT 1
2009: PUSH
2010: LD_INT 2
2012: PUSH
2013: LD_INT 3
2015: PUSH
2016: LD_INT 4
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 1
2027: PPUSH
2028: LD_INT 4
2030: PPUSH
2031: CALL_OW 12
2035: ARRAY
2036: PPUSH
2037: LD_INT 3
2039: PPUSH
2040: LD_INT 5
2042: PPUSH
2043: CALL_OW 12
2047: PUSH
2048: LD_OWVAR 67
2052: MINUS
2053: PPUSH
2054: CALL_OW 380
// un = CreateHuman ;
2058: LD_ADDR_VAR 0 3
2062: PUSH
2063: CALL_OW 44
2067: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2068: LD_ADDR_EXP 11
2072: PUSH
2073: LD_EXP 11
2077: PUSH
2078: LD_VAR 0 3
2082: ADD
2083: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2084: LD_VAR 0 3
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 1
2096: ARRAY
2097: PPUSH
2098: CALL_OW 250
2102: PPUSH
2103: LD_VAR 0 4
2107: PUSH
2108: LD_INT 1
2110: ARRAY
2111: PPUSH
2112: CALL_OW 251
2116: PPUSH
2117: LD_INT 15
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 50
// end ;
2127: GO 1985
2129: POP
2130: POP
// if deltaDoctor then
2131: LD_EXP 15
2135: IFFALSE 2139
// exit ;
2137: GO 2221
// hc_gallery =  ;
2139: LD_ADDR_OWVAR 33
2143: PUSH
2144: LD_STRING 
2146: ST_TO_ADDR
// hc_name = Dr. Michael Mills ;
2147: LD_ADDR_OWVAR 26
2151: PUSH
2152: LD_STRING Dr. Michael Mills
2154: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2155: LD_INT 1
2157: PPUSH
2158: LD_INT 4
2160: PPUSH
2161: LD_INT 6
2163: PPUSH
2164: CALL_OW 380
// deltaDoctor = CreateHuman ;
2168: LD_ADDR_EXP 15
2172: PUSH
2173: CALL_OW 44
2177: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2178: LD_EXP 15
2182: PPUSH
2183: LD_VAR 0 4
2187: PUSH
2188: LD_INT 1
2190: ARRAY
2191: PPUSH
2192: CALL_OW 250
2196: PPUSH
2197: LD_VAR 0 4
2201: PUSH
2202: LD_INT 1
2204: ARRAY
2205: PPUSH
2206: CALL_OW 251
2210: PPUSH
2211: LD_INT 5
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 50
// end ; end_of_file
2221: LD_VAR 0 1
2225: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2226: LD_INT 0
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2235: LD_ADDR_VAR 0 5
2239: PUSH
2240: LD_STRING buildingsInDelta
2242: PPUSH
2243: EMPTY
2244: PPUSH
2245: CALL_OW 30
2249: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2250: LD_INT 68
2252: PPUSH
2253: LD_INT 40
2255: PPUSH
2256: LD_INT 1
2258: PPUSH
2259: CALL_OW 441
// uc_side = 1 ;
2263: LD_ADDR_OWVAR 20
2267: PUSH
2268: LD_INT 1
2270: ST_TO_ADDR
// uc_nation = 1 ;
2271: LD_ADDR_OWVAR 21
2275: PUSH
2276: LD_INT 1
2278: ST_TO_ADDR
// for i = 1 to buildings do
2279: LD_ADDR_VAR 0 2
2283: PUSH
2284: DOUBLE
2285: LD_INT 1
2287: DEC
2288: ST_TO_ADDR
2289: LD_VAR 0 5
2293: PUSH
2294: FOR_TO
2295: IFFALSE 2493
// begin bc_type = buildings [ i ] [ 1 ] ;
2297: LD_ADDR_OWVAR 42
2301: PUSH
2302: LD_VAR 0 5
2306: PUSH
2307: LD_VAR 0 2
2311: ARRAY
2312: PUSH
2313: LD_INT 1
2315: ARRAY
2316: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2317: LD_ADDR_OWVAR 43
2321: PUSH
2322: LD_VAR 0 5
2326: PUSH
2327: LD_VAR 0 2
2331: ARRAY
2332: PUSH
2333: LD_INT 2
2335: ARRAY
2336: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2337: LD_OWVAR 42
2341: PUSH
2342: LD_INT 7
2344: EQUAL
2345: PUSH
2346: LD_OWVAR 42
2350: PUSH
2351: LD_INT 8
2353: EQUAL
2354: OR
2355: IFFALSE 2397
// begin bc_kind1 = buildings [ i ] [ 6 ] ;
2357: LD_ADDR_OWVAR 44
2361: PUSH
2362: LD_VAR 0 5
2366: PUSH
2367: LD_VAR 0 2
2371: ARRAY
2372: PUSH
2373: LD_INT 6
2375: ARRAY
2376: ST_TO_ADDR
// bc_kind2 = buildings [ i ] [ 7 ] ;
2377: LD_ADDR_OWVAR 45
2381: PUSH
2382: LD_VAR 0 5
2386: PUSH
2387: LD_VAR 0 2
2391: ARRAY
2392: PUSH
2393: LD_INT 7
2395: ARRAY
2396: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2397: LD_ADDR_VAR 0 4
2401: PUSH
2402: LD_VAR 0 5
2406: PUSH
2407: LD_VAR 0 2
2411: ARRAY
2412: PUSH
2413: LD_INT 3
2415: ARRAY
2416: PPUSH
2417: LD_VAR 0 5
2421: PUSH
2422: LD_VAR 0 2
2426: ARRAY
2427: PUSH
2428: LD_INT 4
2430: ARRAY
2431: PPUSH
2432: LD_VAR 0 5
2436: PUSH
2437: LD_VAR 0 2
2441: ARRAY
2442: PUSH
2443: LD_INT 5
2445: ARRAY
2446: PPUSH
2447: CALL_OW 47
2451: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2452: LD_VAR 0 4
2456: PPUSH
2457: CALL_OW 266
2461: PUSH
2462: LD_INT 32
2464: EQUAL
2465: IFFALSE 2491
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2467: LD_VAR 0 4
2471: PPUSH
2472: LD_VAR 0 5
2476: PUSH
2477: LD_VAR 0 2
2481: ARRAY
2482: PUSH
2483: LD_INT 8
2485: ARRAY
2486: PPUSH
2487: CALL_OW 431
// end ;
2491: GO 2294
2493: POP
2494: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2495: LD_ADDR_VAR 0 6
2499: PUSH
2500: LD_INT 22
2502: PUSH
2503: LD_INT 1
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: LD_INT 30
2515: PUSH
2516: LD_INT 6
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PUSH
2523: LD_INT 30
2525: PUSH
2526: LD_INT 7
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PUSH
2533: LD_INT 30
2535: PUSH
2536: LD_INT 8
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PPUSH
2553: CALL_OW 69
2557: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2558: LD_ADDR_VAR 0 7
2562: PUSH
2563: LD_INT 22
2565: PUSH
2566: LD_INT 1
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: PUSH
2573: LD_INT 30
2575: PUSH
2576: LD_INT 0
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PPUSH
2587: CALL_OW 69
2591: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2592: LD_VAR 0 6
2596: PUSH
2597: LD_INT 0
2599: GREATER
2600: PUSH
2601: LD_VAR 0 7
2605: PUSH
2606: LD_INT 0
2608: GREATER
2609: AND
2610: IFFALSE 2620
// baseCorrect = 1 ;
2612: LD_ADDR_EXP 17
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// if baseCorrect = 0 then
2620: LD_EXP 17
2624: PUSH
2625: LD_INT 0
2627: EQUAL
2628: IFFALSE 3001
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2630: LD_ADDR_VAR 0 2
2634: PUSH
2635: LD_INT 22
2637: PUSH
2638: LD_INT 1
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: PUSH
2645: LD_INT 21
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PPUSH
2659: CALL_OW 69
2663: PUSH
2664: FOR_IN
2665: IFFALSE 2678
// RemoveUnit ( i ) ;
2667: LD_VAR 0 2
2671: PPUSH
2672: CALL_OW 64
2676: GO 2664
2678: POP
2679: POP
// uc_nation = 1 ;
2680: LD_ADDR_OWVAR 21
2684: PUSH
2685: LD_INT 1
2687: ST_TO_ADDR
// uc_side = 1 ;
2688: LD_ADDR_OWVAR 20
2692: PUSH
2693: LD_INT 1
2695: ST_TO_ADDR
// bc_level = 5 ;
2696: LD_ADDR_OWVAR 43
2700: PUSH
2701: LD_INT 5
2703: ST_TO_ADDR
// bc_type = b_depot ;
2704: LD_ADDR_OWVAR 42
2708: PUSH
2709: LD_INT 0
2711: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2712: LD_INT 50
2714: PPUSH
2715: LD_INT 22
2717: PPUSH
2718: LD_INT 0
2720: PPUSH
2721: CALL_OW 47
// bc_type = b_bunker ;
2725: LD_ADDR_OWVAR 42
2729: PUSH
2730: LD_INT 32
2732: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2733: LD_ADDR_VAR 0 4
2737: PUSH
2738: LD_INT 68
2740: PPUSH
2741: LD_INT 24
2743: PPUSH
2744: LD_INT 4
2746: PPUSH
2747: CALL_OW 47
2751: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2752: LD_VAR 0 4
2756: PPUSH
2757: LD_INT 4
2759: PUSH
2760: LD_INT 11
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 1
2769: PPUSH
2770: LD_INT 2
2772: PPUSH
2773: CALL_OW 12
2777: ARRAY
2778: PPUSH
2779: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2783: LD_ADDR_VAR 0 4
2787: PUSH
2788: LD_INT 71
2790: PPUSH
2791: LD_INT 34
2793: PPUSH
2794: LD_INT 4
2796: PPUSH
2797: CALL_OW 47
2801: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 4
2809: PUSH
2810: LD_INT 11
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PUSH
2817: LD_INT 1
2819: PPUSH
2820: LD_INT 2
2822: PPUSH
2823: CALL_OW 12
2827: ARRAY
2828: PPUSH
2829: CALL_OW 431
// bc_type = 31 ;
2833: LD_ADDR_OWVAR 42
2837: PUSH
2838: LD_INT 31
2840: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
2841: LD_INT 51
2843: PPUSH
2844: LD_INT 7
2846: PPUSH
2847: LD_INT 3
2849: PPUSH
2850: CALL_OW 47
// bc_type = b_oil_mine ;
2854: LD_ADDR_OWVAR 42
2858: PUSH
2859: LD_INT 29
2861: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
2862: LD_INT 68
2864: PPUSH
2865: LD_INT 40
2867: PPUSH
2868: LD_INT 1
2870: PPUSH
2871: CALL_OW 47
// bc_type = b_workshop ;
2875: LD_ADDR_OWVAR 42
2879: PUSH
2880: LD_INT 2
2882: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2883: LD_INT 38
2885: PPUSH
2886: LD_INT 20
2888: PPUSH
2889: LD_INT 2
2891: PPUSH
2892: CALL_OW 47
// bc_type = b_armoury ;
2896: LD_ADDR_OWVAR 42
2900: PUSH
2901: LD_INT 4
2903: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2904: LD_INT 38
2906: PPUSH
2907: LD_INT 20
2909: PPUSH
2910: LD_INT 2
2912: PPUSH
2913: CALL_OW 47
// bc_type = b_solar_power ;
2917: LD_ADDR_OWVAR 42
2921: PUSH
2922: LD_INT 27
2924: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
2925: LD_INT 46
2927: PPUSH
2928: LD_INT 12
2930: PPUSH
2931: LD_INT 1
2933: PPUSH
2934: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
2938: LD_INT 48
2940: PPUSH
2941: LD_INT 11
2943: PPUSH
2944: LD_INT 2
2946: PPUSH
2947: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
2951: LD_INT 49
2953: PPUSH
2954: LD_INT 11
2956: PPUSH
2957: LD_INT 3
2959: PPUSH
2960: CALL_OW 47
// bc_type = b_lab_half ;
2964: LD_ADDR_OWVAR 42
2968: PUSH
2969: LD_INT 7
2971: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
2972: LD_ADDR_OWVAR 44
2976: PUSH
2977: LD_INT 15
2979: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2980: LD_ADDR_OWVAR 45
2984: PUSH
2985: LD_INT 9
2987: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
2988: LD_INT 42
2990: PPUSH
2991: LD_INT 15
2993: PPUSH
2994: LD_INT 2
2996: PPUSH
2997: CALL_OW 47
// end ; end ; end_of_file
3001: LD_VAR 0 1
3005: RET
// every 1 do var i , j , tmp ;
3006: GO 3008
3008: DISABLE
3009: LD_INT 0
3011: PPUSH
3012: PPUSH
3013: PPUSH
// begin InGameOn ;
3014: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3018: LD_EXP 19
3022: PUSH
3023: LD_INT 1
3025: ARRAY
3026: PPUSH
3027: CALL_OW 87
// if IsOK ( Denis ) then
3031: LD_EXP 3
3035: PPUSH
3036: CALL_OW 302
3040: IFFALSE 3068
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3042: LD_INT 6
3044: PPUSH
3045: LD_INT 1
3047: PPUSH
3048: LD_INT 2
3050: PPUSH
3051: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3055: LD_INT 20
3057: PPUSH
3058: LD_INT 1
3060: PPUSH
3061: LD_INT 1
3063: PPUSH
3064: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3068: LD_EXP 1
3072: PPUSH
3073: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3077: LD_EXP 1
3081: PPUSH
3082: LD_EXP 15
3086: PPUSH
3087: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3091: LD_INT 35
3093: PPUSH
3094: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3098: LD_EXP 15
3102: PPUSH
3103: LD_EXP 1
3107: PPUSH
3108: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3112: LD_EXP 1
3116: PPUSH
3117: LD_EXP 15
3121: PPUSH
3122: CALL_OW 296
3126: PUSH
3127: LD_INT 5
3129: LESS
3130: IFFALSE 3091
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3132: LD_EXP 15
3136: PPUSH
3137: LD_EXP 1
3141: PPUSH
3142: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3146: LD_EXP 1
3150: PPUSH
3151: LD_STRING D1-JMM-1
3153: PPUSH
3154: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3158: LD_EXP 15
3162: PPUSH
3163: LD_STRING D1-Sci-1
3165: PPUSH
3166: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3170: LD_EXP 1
3174: PUSH
3175: LD_EXP 15
3179: PUSH
3180: LD_EXP 3
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: PPUSH
3190: LD_EXP 19
3194: PUSH
3195: LD_INT 1
3197: ARRAY
3198: PPUSH
3199: CALL_OW 120
// end ;
3203: PPOPN 3
3205: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3206: LD_EXP 1
3210: PPUSH
3211: CALL_OW 310
3215: PUSH
3216: LD_EXP 19
3220: PUSH
3221: LD_INT 1
3223: ARRAY
3224: EQUAL
3225: PUSH
3226: LD_EXP 15
3230: PPUSH
3231: CALL_OW 310
3235: PUSH
3236: LD_EXP 19
3240: PUSH
3241: LD_INT 1
3243: ARRAY
3244: EQUAL
3245: AND
3246: IFFALSE 3792
3248: GO 3250
3250: DISABLE
3251: LD_INT 0
3253: PPUSH
3254: PPUSH
3255: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3256: LD_EXP 19
3260: PUSH
3261: LD_INT 1
3263: ARRAY
3264: PPUSH
3265: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3269: LD_EXP 1
3273: PPUSH
3274: LD_STRING D1-JMM-2
3276: PPUSH
3277: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3281: LD_EXP 15
3285: PPUSH
3286: LD_STRING D1-Sci-2
3288: PPUSH
3289: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3293: LD_EXP 1
3297: PPUSH
3298: LD_STRING D1-JMM-3
3300: PPUSH
3301: CALL_OW 88
// if IsOK ( Denis ) then
3305: LD_EXP 3
3309: PPUSH
3310: CALL_OW 302
3314: IFFALSE 3330
// Say ( DeltaDoctor , D1-Sci-3 ) else
3316: LD_EXP 15
3320: PPUSH
3321: LD_STRING D1-Sci-3
3323: PPUSH
3324: CALL_OW 88
3328: GO 3342
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3330: LD_EXP 15
3334: PPUSH
3335: LD_STRING D1-Sci-3a
3337: PPUSH
3338: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3342: LD_EXP 1
3346: PPUSH
3347: LD_STRING D1-JMM-4
3349: PPUSH
3350: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3354: LD_ADDR_VAR 0 3
3358: PUSH
3359: LD_INT 22
3361: PUSH
3362: LD_INT 1
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 25
3371: PUSH
3372: LD_INT 4
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 3
3381: PUSH
3382: LD_INT 54
3384: PUSH
3385: EMPTY
3386: LIST
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: LIST
3396: PPUSH
3397: CALL_OW 69
3401: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3402: LD_ADDR_VAR 0 1
3406: PUSH
3407: LD_INT 22
3409: PUSH
3410: LD_INT 0
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PPUSH
3417: CALL_OW 69
3421: PUSH
3422: FOR_IN
3423: IFFALSE 3473
// for j in tmp do
3425: LD_ADDR_VAR 0 2
3429: PUSH
3430: LD_VAR 0 3
3434: PUSH
3435: FOR_IN
3436: IFFALSE 3469
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3438: LD_VAR 0 2
3442: PPUSH
3443: LD_VAR 0 1
3447: PPUSH
3448: CALL_OW 250
3452: PPUSH
3453: LD_VAR 0 1
3457: PPUSH
3458: CALL_OW 251
3462: PPUSH
3463: CALL_OW 191
3467: GO 3435
3469: POP
3470: POP
3471: GO 3422
3473: POP
3474: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3475: LD_EXP 15
3479: PPUSH
3480: LD_STRING D1-Sci-4
3482: PPUSH
3483: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3487: LD_EXP 1
3491: PPUSH
3492: LD_STRING D1-JMM-5
3494: PPUSH
3495: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3499: LD_EXP 15
3503: PPUSH
3504: LD_STRING D1-Sci-5
3506: PPUSH
3507: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3511: LD_EXP 1
3515: PPUSH
3516: LD_STRING D1-JMM-6
3518: PPUSH
3519: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3523: LD_EXP 16
3527: PPUSH
3528: LD_STRING D1-Har-6
3530: PPUSH
3531: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3535: LD_EXP 1
3539: PPUSH
3540: LD_STRING D1-JMM-7
3542: PPUSH
3543: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3547: LD_EXP 16
3551: PPUSH
3552: LD_STRING D1-Har-7
3554: PPUSH
3555: CALL_OW 94
// if IsOK ( Denis ) then
3559: LD_EXP 3
3563: PPUSH
3564: CALL_OW 302
3568: IFFALSE 3582
// Say ( JMM , D1-JMM-8 ) ;
3570: LD_EXP 1
3574: PPUSH
3575: LD_STRING D1-JMM-8
3577: PPUSH
3578: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3582: LD_EXP 1
3586: PPUSH
3587: LD_STRING D1-JMM-8a
3589: PPUSH
3590: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3594: LD_EXP 16
3598: PPUSH
3599: LD_STRING D1-Har-8
3601: PPUSH
3602: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3606: LD_EXP 1
3610: PPUSH
3611: LD_STRING D1-JMM-9
3613: PPUSH
3614: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3618: LD_EXP 16
3622: PPUSH
3623: LD_STRING D1-Har-9
3625: PPUSH
3626: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3630: LD_EXP 1
3634: PPUSH
3635: LD_STRING D1-JMM-10
3637: PPUSH
3638: CALL_OW 88
// if IsOK ( Denis ) then
3642: LD_EXP 3
3646: PPUSH
3647: CALL_OW 302
3651: IFFALSE 3665
// Say ( JMM , D1-JMM-10a ) ;
3653: LD_EXP 1
3657: PPUSH
3658: LD_STRING D1-JMM-10a
3660: PPUSH
3661: CALL_OW 88
// SelectAndSaveCharacters ;
3665: CALL 4204 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3669: LD_EXP 19
3673: PUSH
3674: LD_INT 1
3676: ARRAY
3677: PPUSH
3678: CALL_OW 274
3682: PPUSH
3683: LD_INT 1
3685: PPUSH
3686: LD_INT 250
3688: PPUSH
3689: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3693: LD_INT 22
3695: PUSH
3696: LD_INT 1
3698: PUSH
3699: EMPTY
3700: LIST
3701: LIST
3702: PUSH
3703: LD_INT 30
3705: PUSH
3706: LD_INT 29
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: PPUSH
3717: CALL_OW 69
3721: PUSH
3722: LD_INT 0
3724: GREATER
3725: IFFALSE 3751
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3727: LD_EXP 19
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: CALL_OW 274
3740: PPUSH
3741: LD_INT 2
3743: PPUSH
3744: LD_INT 300
3746: PPUSH
3747: CALL_OW 277
// InGameOff ;
3751: CALL_OW 9
// Query ( Q1 ) ;
3755: LD_STRING Q1
3757: PPUSH
3758: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3762: LD_INT 3
3764: PPUSH
3765: LD_INT 1
3767: PPUSH
3768: CALL_OW 424
// if IsInUnit ( JMM ) then
3772: LD_EXP 1
3776: PPUSH
3777: CALL_OW 310
3781: IFFALSE 3792
// ComExitBuilding ( JMM ) ;
3783: LD_EXP 1
3787: PPUSH
3788: CALL_OW 122
// end ;
3792: PPOPN 3
3794: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i ;
3795: LD_INT 3
3797: PPUSH
3798: LD_INT 22
3800: PUSH
3801: LD_INT 1
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: LD_INT 21
3810: PUSH
3811: LD_INT 1
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PPUSH
3822: CALL_OW 71
3826: PUSH
3827: LD_INT 0
3829: EQUAL
3830: IFFALSE 4138
3832: GO 3834
3834: DISABLE
3835: LD_INT 0
3837: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) > 0 then
3838: LD_INT 3
3840: PPUSH
3841: LD_INT 21
3843: PUSH
3844: LD_INT 2
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: PUSH
3851: LD_INT 3
3853: PUSH
3854: LD_INT 58
3856: PUSH
3857: EMPTY
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PPUSH
3868: CALL_OW 70
3872: PUSH
3873: LD_INT 0
3875: GREATER
3876: IFFALSE 4128
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
3878: LD_ADDR_VAR 0 1
3882: PUSH
3883: LD_INT 3
3885: PPUSH
3886: LD_INT 21
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PUSH
3896: LD_INT 3
3898: PUSH
3899: LD_INT 58
3901: PUSH
3902: EMPTY
3903: LIST
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PPUSH
3913: CALL_OW 70
3917: PUSH
3918: FOR_IN
3919: IFFALSE 4114
// begin if GetWeapon ( i ) = us_cargo_bay then
3921: LD_VAR 0 1
3925: PPUSH
3926: CALL_OW 264
3930: PUSH
3931: LD_INT 12
3933: EQUAL
3934: IFFALSE 4041
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetCargoType ( i ) , GetCargo ( i , GetCargoType ( i ) ) ] ] ;
3936: LD_ADDR_EXP 14
3940: PUSH
3941: LD_EXP 14
3945: PUSH
3946: LD_VAR 0 1
3950: PPUSH
3951: CALL_OW 248
3955: PUSH
3956: LD_VAR 0 1
3960: PPUSH
3961: CALL_OW 265
3965: PUSH
3966: LD_VAR 0 1
3970: PPUSH
3971: CALL_OW 262
3975: PUSH
3976: LD_VAR 0 1
3980: PPUSH
3981: CALL_OW 263
3985: PUSH
3986: LD_VAR 0 1
3990: PPUSH
3991: CALL_OW 264
3995: PUSH
3996: LD_VAR 0 1
4000: PPUSH
4001: CALL_OW 288
4005: PUSH
4006: LD_VAR 0 1
4010: PPUSH
4011: LD_VAR 0 1
4015: PPUSH
4016: CALL_OW 288
4020: PPUSH
4021: CALL_OW 289
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: PUSH
4035: EMPTY
4036: LIST
4037: ADD
4038: ST_TO_ADDR
// end else
4039: GO 4112
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4041: LD_ADDR_EXP 14
4045: PUSH
4046: LD_EXP 14
4050: PUSH
4051: LD_VAR 0 1
4055: PPUSH
4056: CALL_OW 248
4060: PUSH
4061: LD_VAR 0 1
4065: PPUSH
4066: CALL_OW 265
4070: PUSH
4071: LD_VAR 0 1
4075: PPUSH
4076: CALL_OW 262
4080: PUSH
4081: LD_VAR 0 1
4085: PPUSH
4086: CALL_OW 263
4090: PUSH
4091: LD_VAR 0 1
4095: PPUSH
4096: CALL_OW 264
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: PUSH
4108: EMPTY
4109: LIST
4110: ADD
4111: ST_TO_ADDR
// end ; end ;
4112: GO 3918
4114: POP
4115: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4116: LD_EXP 14
4120: PPUSH
4121: LD_STRING 06_VehiclesIn06_1
4123: PPUSH
4124: CALL_OW 39
// end ; ChangeMap ( 6 , %_cont ) ;
4128: LD_INT 6
4130: PPUSH
4131: LD_STRING %_cont
4133: PPUSH
4134: CALL_OW 340
// end ; end_of_file
4138: PPOPN 1
4140: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4141: LD_INT 0
4143: PPUSH
4144: PPUSH
// if exist_mode then
4145: LD_VAR 0 2
4149: IFFALSE 4174
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
4151: LD_ADDR_VAR 0 4
4155: PUSH
4156: LD_EXP 21
4160: PUSH
4161: LD_VAR 0 1
4165: STR
4166: PPUSH
4167: CALL_OW 34
4171: ST_TO_ADDR
4172: GO 4189
// unit := NewCharacter ( ident ) ;
4174: LD_ADDR_VAR 0 4
4178: PUSH
4179: LD_VAR 0 1
4183: PPUSH
4184: CALL_OW 25
4188: ST_TO_ADDR
// result := unit ;
4189: LD_ADDR_VAR 0 3
4193: PUSH
4194: LD_VAR 0 4
4198: ST_TO_ADDR
// end ;
4199: LD_VAR 0 3
4203: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test , rnd ; begin
4204: LD_INT 0
4206: PPUSH
4207: PPUSH
4208: PPUSH
4209: PPUSH
4210: PPUSH
4211: PPUSH
// rnd = [ 5 , rand ( 4 , 5 ) , 4 ] [ Difficulty ] ;
4212: LD_ADDR_VAR 0 6
4216: PUSH
4217: LD_INT 5
4219: PUSH
4220: LD_INT 4
4222: PPUSH
4223: LD_INT 5
4225: PPUSH
4226: CALL_OW 12
4230: PUSH
4231: LD_INT 4
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: LIST
4238: PUSH
4239: LD_OWVAR 67
4243: ARRAY
4244: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4245: LD_ADDR_VAR 0 3
4249: PUSH
4250: LD_INT 22
4252: PUSH
4253: LD_INT 1
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PUSH
4260: LD_INT 21
4262: PUSH
4263: LD_INT 1
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: PUSH
4270: LD_INT 2
4272: PUSH
4273: LD_INT 25
4275: PUSH
4276: LD_INT 1
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: LD_INT 25
4285: PUSH
4286: LD_INT 2
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: PUSH
4293: LD_INT 25
4295: PUSH
4296: LD_INT 3
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 25
4305: PUSH
4306: LD_INT 4
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: PPUSH
4325: CALL_OW 69
4329: PUSH
4330: LD_EXP 1
4334: PUSH
4335: LD_EXP 15
4339: PUSH
4340: LD_EXP 3
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: LIST
4349: DIFF
4350: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , [ 5 , 4 , 4 ] [ Difficulty ] , rnd , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4351: LD_ADDR_VAR 0 4
4355: PUSH
4356: LD_STRING text
4358: PPUSH
4359: LD_INT 5
4361: PUSH
4362: LD_INT 4
4364: PUSH
4365: LD_INT 4
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: LIST
4372: PUSH
4373: LD_OWVAR 67
4377: ARRAY
4378: PPUSH
4379: LD_VAR 0 6
4383: PPUSH
4384: LD_INT -5
4386: PUSH
4387: LD_EXP 1
4391: PUSH
4392: LD_INT -6
4394: PUSH
4395: LD_INT -2
4397: PUSH
4398: LD_INT -3
4400: PUSH
4401: LD_INT -5
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: PUSH
4412: LD_VAR 0 3
4416: ADD
4417: PUSH
4418: LD_INT -6
4420: PUSH
4421: LD_INT -4
4423: PUSH
4424: LD_EXP 3
4428: PUSH
4429: LD_EXP 15
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: ADD
4440: PPUSH
4441: LD_INT 1
4443: PUSH
4444: LD_INT 3
4446: PUSH
4447: LD_INT 2
4449: PUSH
4450: LD_INT 1
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 4
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: PPUSH
4466: CALL_OW 42
4470: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4471: LD_EXP 1
4475: PPUSH
4476: LD_EXP 20
4480: PUSH
4481: LD_STRING JMM
4483: STR
4484: PPUSH
4485: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4489: LD_EXP 15
4493: PPUSH
4494: LD_STRING DeltaDoctor
4496: PPUSH
4497: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4501: LD_EXP 3
4505: PPUSH
4506: LD_EXP 20
4510: PUSH
4511: LD_STRING Denis
4513: STR
4514: PPUSH
4515: CALL_OW 38
// if Lisa in selectedPeople then
4519: LD_EXP 4
4523: PUSH
4524: LD_VAR 0 4
4528: IN
4529: IFFALSE 4561
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4531: LD_EXP 4
4535: PPUSH
4536: LD_EXP 20
4540: PUSH
4541: LD_STRING Lisa
4543: STR
4544: PPUSH
4545: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4549: LD_INT 1
4551: PPUSH
4552: LD_STRING LisaIn06
4554: PPUSH
4555: CALL_OW 39
// end else
4559: GO 4582
// if IsOk ( Lisa ) then
4561: LD_EXP 4
4565: PPUSH
4566: CALL_OW 302
4570: IFFALSE 4582
// SaveVariable ( 1 , LisaStayInDelta ) ;
4572: LD_INT 1
4574: PPUSH
4575: LD_STRING LisaStayInDelta
4577: PPUSH
4578: CALL_OW 39
// if Bobby in selectedPeople then
4582: LD_EXP 6
4586: PUSH
4587: LD_VAR 0 4
4591: IN
4592: IFFALSE 4624
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4594: LD_EXP 6
4598: PPUSH
4599: LD_EXP 20
4603: PUSH
4604: LD_STRING Bobby
4606: STR
4607: PPUSH
4608: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4612: LD_INT 1
4614: PPUSH
4615: LD_STRING BobbyIn06
4617: PPUSH
4618: CALL_OW 39
// end else
4622: GO 4645
// if IsOk ( Bobby ) then
4624: LD_EXP 6
4628: PPUSH
4629: CALL_OW 302
4633: IFFALSE 4645
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4635: LD_INT 1
4637: PPUSH
4638: LD_STRING BobbyStayInDelta
4640: PPUSH
4641: CALL_OW 39
// if Cyrus in selectedPeople then
4645: LD_EXP 7
4649: PUSH
4650: LD_VAR 0 4
4654: IN
4655: IFFALSE 4687
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4657: LD_EXP 7
4661: PPUSH
4662: LD_EXP 20
4666: PUSH
4667: LD_STRING Cyrus
4669: STR
4670: PPUSH
4671: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4675: LD_INT 1
4677: PPUSH
4678: LD_STRING CyrusIn06
4680: PPUSH
4681: CALL_OW 39
// end else
4685: GO 4708
// if IsOk ( Cyrus ) then
4687: LD_EXP 7
4691: PPUSH
4692: CALL_OW 302
4696: IFFALSE 4708
// SaveVariable ( 1 , CyrusStayInDelta ) ;
4698: LD_INT 1
4700: PPUSH
4701: LD_STRING CyrusStayInDelta
4703: PPUSH
4704: CALL_OW 39
// if Frank in selectedPeople then
4708: LD_EXP 5
4712: PUSH
4713: LD_VAR 0 4
4717: IN
4718: IFFALSE 4750
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4720: LD_EXP 5
4724: PPUSH
4725: LD_EXP 20
4729: PUSH
4730: LD_STRING Frank
4732: STR
4733: PPUSH
4734: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4738: LD_INT 1
4740: PPUSH
4741: LD_STRING FrankIn06
4743: PPUSH
4744: CALL_OW 39
// end else
4748: GO 4771
// if IsOk ( Lisa ) then
4750: LD_EXP 4
4754: PPUSH
4755: CALL_OW 302
4759: IFFALSE 4771
// SaveVariable ( 1 , FrankStayInDelta ) ;
4761: LD_INT 1
4763: PPUSH
4764: LD_STRING FrankStayInDelta
4766: PPUSH
4767: CALL_OW 39
// if Brown in selectedPeople then
4771: LD_EXP 8
4775: PUSH
4776: LD_VAR 0 4
4780: IN
4781: IFFALSE 4813
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4783: LD_EXP 8
4787: PPUSH
4788: LD_EXP 20
4792: PUSH
4793: LD_STRING Brown
4795: STR
4796: PPUSH
4797: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
4801: LD_INT 1
4803: PPUSH
4804: LD_STRING BrownIn06
4806: PPUSH
4807: CALL_OW 39
// end else
4811: GO 4834
// if IsOk ( Lisa ) then
4813: LD_EXP 4
4817: PPUSH
4818: CALL_OW 302
4822: IFFALSE 4834
// SaveVariable ( 1 , BrownStayInDelta ) ;
4824: LD_INT 1
4826: PPUSH
4827: LD_STRING BrownStayInDelta
4829: PPUSH
4830: CALL_OW 39
// if Donaldson in selectedPeople then
4834: LD_EXP 9
4838: PUSH
4839: LD_VAR 0 4
4843: IN
4844: IFFALSE 4876
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
4846: LD_EXP 9
4850: PPUSH
4851: LD_EXP 20
4855: PUSH
4856: LD_STRING Donaldson
4858: STR
4859: PPUSH
4860: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
4864: LD_INT 1
4866: PPUSH
4867: LD_STRING DonaldsonIn06
4869: PPUSH
4870: CALL_OW 39
// end else
4874: GO 4897
// if IsOk ( Lisa ) then
4876: LD_EXP 4
4880: PPUSH
4881: CALL_OW 302
4885: IFFALSE 4897
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
4887: LD_INT 1
4889: PPUSH
4890: LD_STRING DonaldsonStayInDelta
4892: PPUSH
4893: CALL_OW 39
// if Gladstone in selectedPeople then
4897: LD_EXP 2
4901: PUSH
4902: LD_VAR 0 4
4906: IN
4907: IFFALSE 4939
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4909: LD_EXP 2
4913: PPUSH
4914: LD_EXP 20
4918: PUSH
4919: LD_STRING Gladstone
4921: STR
4922: PPUSH
4923: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
4927: LD_INT 1
4929: PPUSH
4930: LD_STRING GladstoneIn06
4932: PPUSH
4933: CALL_OW 39
// end else
4937: GO 4960
// if IsOk ( Lisa ) then
4939: LD_EXP 4
4943: PPUSH
4944: CALL_OW 302
4948: IFFALSE 4960
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
4950: LD_INT 1
4952: PPUSH
4953: LD_STRING GladstoneStayInDelta
4955: PPUSH
4956: CALL_OW 39
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4960: LD_INT 22
4962: PUSH
4963: LD_INT 1
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: LD_INT 21
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PPUSH
4984: CALL_OW 69
4988: PPUSH
4989: LD_INT 4
4991: PPUSH
4992: CALL_OW 235
// for i in selectedPeople do
4996: LD_ADDR_VAR 0 2
5000: PUSH
5001: LD_VAR 0 4
5005: PUSH
5006: FOR_IN
5007: IFFALSE 5023
// SetSide ( i , 1 ) ;
5009: LD_VAR 0 2
5013: PPUSH
5014: LD_INT 1
5016: PPUSH
5017: CALL_OW 235
5021: GO 5006
5023: POP
5024: POP
// for i in yourApemans do
5025: LD_ADDR_VAR 0 2
5029: PUSH
5030: LD_EXP 13
5034: PUSH
5035: FOR_IN
5036: IFFALSE 5052
// SetSide ( i , 1 ) ;
5038: LD_VAR 0 2
5042: PPUSH
5043: LD_INT 1
5045: PPUSH
5046: CALL_OW 235
5050: GO 5035
5052: POP
5053: POP
// SetSide ( JMM , 1 ) ;
5054: LD_EXP 1
5058: PPUSH
5059: LD_INT 1
5061: PPUSH
5062: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
5066: LD_EXP 13
5070: PPUSH
5071: LD_INT 2
5073: PPUSH
5074: LD_INT 5
5076: PPUSH
5077: CALL_OW 237
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5081: LD_EXP 13
5085: PPUSH
5086: LD_STRING ApeIn06
5088: PPUSH
5089: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone ] , OthersIn06 ) ;
5093: LD_INT 22
5095: PUSH
5096: LD_INT 1
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: LD_INT 21
5105: PUSH
5106: LD_INT 1
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PUSH
5113: LD_INT 2
5115: PUSH
5116: LD_INT 25
5118: PUSH
5119: LD_INT 1
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: PUSH
5126: LD_INT 25
5128: PUSH
5129: LD_INT 2
5131: PUSH
5132: EMPTY
5133: LIST
5134: LIST
5135: PUSH
5136: LD_INT 25
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PUSH
5146: LD_INT 25
5148: PUSH
5149: LD_INT 4
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: PPUSH
5168: CALL_OW 69
5172: PUSH
5173: LD_EXP 1
5177: PUSH
5178: LD_EXP 4
5182: PUSH
5183: LD_EXP 6
5187: PUSH
5188: LD_EXP 7
5192: PUSH
5193: LD_EXP 5
5197: PUSH
5198: LD_EXP 8
5202: PUSH
5203: LD_EXP 9
5207: PUSH
5208: LD_EXP 2
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: DIFF
5223: PPUSH
5224: LD_STRING OthersIn06
5226: PPUSH
5227: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff randomsDelta ^ DeltaDoctor , OthersStayInDelta ) ;
5231: LD_INT 22
5233: PUSH
5234: LD_INT 4
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: PUSH
5241: LD_INT 2
5243: PUSH
5244: LD_INT 25
5246: PUSH
5247: LD_INT 1
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PUSH
5254: LD_INT 25
5256: PUSH
5257: LD_INT 2
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: PUSH
5264: LD_INT 25
5266: PUSH
5267: LD_INT 3
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PUSH
5274: LD_INT 25
5276: PUSH
5277: LD_INT 4
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PPUSH
5295: CALL_OW 69
5299: PUSH
5300: LD_EXP 11
5304: PUSH
5305: LD_EXP 15
5309: ADD
5310: DIFF
5311: PPUSH
5312: LD_STRING OthersStayInDelta
5314: PPUSH
5315: CALL_OW 38
// end ; end_of_file
5319: LD_VAR 0 1
5323: RET
// on Command ( comandid ) do var i ;
5324: LD_INT 0
5326: PPUSH
// begin if comandid = 65 then
5327: LD_VAR 0 1
5331: PUSH
5332: LD_INT 65
5334: EQUAL
5335: IFFALSE 5376
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5337: LD_ADDR_VAR 0 2
5341: PUSH
5342: LD_INT 22
5344: PUSH
5345: LD_INT 1
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PUSH
5352: EMPTY
5353: LIST
5354: PPUSH
5355: CALL_OW 69
5359: PUSH
5360: FOR_IN
5361: IFFALSE 5374
// ComStop ( i ) ;
5363: LD_VAR 0 2
5367: PPUSH
5368: CALL_OW 141
5372: GO 5360
5374: POP
5375: POP
// end ;
5376: PPOPN 2
5378: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5379: LD_INT 0
5381: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5382: LD_ADDR_VAR 0 3
5386: PUSH
5387: LD_INT 22
5389: PUSH
5390: LD_INT 1
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: PUSH
5397: LD_INT 21
5399: PUSH
5400: LD_INT 3
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 30
5409: PUSH
5410: LD_INT 0
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: LIST
5421: PPUSH
5422: CALL_OW 69
5426: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5427: LD_VAR 0 1
5431: PPUSH
5432: LD_VAR 0 3
5436: PUSH
5437: LD_INT 1
5439: ARRAY
5440: PPUSH
5441: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5445: LD_VAR 0 1
5449: PPUSH
5450: LD_INT 4
5452: PPUSH
5453: CALL_OW 235
// end ;
5457: PPOPN 3
5459: END
