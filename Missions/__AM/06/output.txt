// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 16
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// apemans = [ ] ;
  23: LD_ADDR_EXP 11
  27: PUSH
  28: EMPTY
  29: ST_TO_ADDR
// yourApemans = [ ] ;
  30: LD_ADDR_EXP 12
  34: PUSH
  35: EMPTY
  36: ST_TO_ADDR
// yourVehicles = [ ] ;
  37: LD_ADDR_EXP 13
  41: PUSH
  42: EMPTY
  43: ST_TO_ADDR
// mission_prefix := 06_ ;
  44: LD_ADDR_EXP 17
  48: PUSH
  49: LD_STRING 06_
  51: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  52: LD_ADDR_EXP 18
  56: PUSH
  57: LD_STRING 05_
  59: ST_TO_ADDR
// PrepareDeltaBase ;
  60: CALL 2114 0 0
// LoadVehicles ;
  64: CALL 1190 0 0
// PrepareHeroes ;
  68: CALL 77 0 0
// PrepareRandoms ;
  72: CALL 1491 0 0
// end ; end_of_file
  76: END
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
  77: LD_INT 0
  79: PPUSH
  80: PPUSH
  81: PPUSH
  82: PPUSH
  83: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
  84: LD_ADDR_VAR 0 3
  88: PUSH
  89: LD_INT 22
  91: PUSH
  92: LD_INT 1
  94: PUSH
  95: EMPTY
  96: LIST
  97: LIST
  98: PUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 3
 104: PUSH
 105: EMPTY
 106: LIST
 107: LIST
 108: PUSH
 109: LD_INT 30
 111: PUSH
 112: LD_INT 0
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: EMPTY
 120: LIST
 121: LIST
 122: LIST
 123: PPUSH
 124: CALL_OW 69
 128: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 129: LD_VAR 0 3
 133: PUSH
 134: LD_INT 1
 136: ARRAY
 137: PPUSH
 138: LD_STRING delta
 140: PPUSH
 141: CALL_OW 500
// uc_side = 1 ;
 145: LD_ADDR_OWVAR 20
 149: PUSH
 150: LD_INT 1
 152: ST_TO_ADDR
// uc_nation = 1 ;
 153: LD_ADDR_OWVAR 21
 157: PUSH
 158: LD_INT 1
 160: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 161: LD_ADDR_EXP 1
 165: PUSH
 166: LD_STRING JMM
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: CALL 3921 0 2
 176: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_STRING Harisson
 184: PPUSH
 185: LD_INT 0
 187: PPUSH
 188: CALL 3921 0 2
 192: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 193: LD_EXP 1
 197: PPUSH
 198: LD_VAR 0 3
 202: PUSH
 203: LD_INT 1
 205: ARRAY
 206: PPUSH
 207: CALL_OW 250
 211: PPUSH
 212: LD_VAR 0 3
 216: PUSH
 217: LD_INT 1
 219: ARRAY
 220: PPUSH
 221: CALL_OW 251
 225: PPUSH
 226: LD_INT 5
 228: PPUSH
 229: LD_INT 0
 231: PPUSH
 232: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 236: LD_EXP 1
 240: PPUSH
 241: LD_INT 1
 243: PPUSH
 244: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true ) ;
 248: LD_ADDR_EXP 2
 252: PUSH
 253: LD_STRING Gladstone
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: CALL 3921 0 2
 263: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 264: LD_EXP 2
 268: PPUSH
 269: LD_VAR 0 3
 273: PUSH
 274: LD_INT 1
 276: ARRAY
 277: PPUSH
 278: CALL_OW 250
 282: PPUSH
 283: LD_VAR 0 3
 287: PUSH
 288: LD_INT 1
 290: ARRAY
 291: PPUSH
 292: CALL_OW 251
 296: PPUSH
 297: LD_INT 5
 299: PPUSH
 300: LD_INT 0
 302: PPUSH
 303: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 307: LD_EXP 2
 311: PPUSH
 312: LD_INT 4
 314: PPUSH
 315: CALL_OW 336
// Denis = PrepareUnit ( Denis , true ) ;
 319: LD_ADDR_EXP 3
 323: PUSH
 324: LD_STRING Denis
 326: PPUSH
 327: LD_INT 1
 329: PPUSH
 330: CALL 3921 0 2
 334: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 335: LD_EXP 3
 339: PPUSH
 340: LD_VAR 0 3
 344: PUSH
 345: LD_INT 1
 347: ARRAY
 348: PPUSH
 349: CALL_OW 250
 353: PPUSH
 354: LD_VAR 0 3
 358: PUSH
 359: LD_INT 1
 361: ARRAY
 362: PPUSH
 363: CALL_OW 251
 367: PPUSH
 368: LD_INT 5
 370: PPUSH
 371: LD_INT 0
 373: PPUSH
 374: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 378: LD_EXP 3
 382: PPUSH
 383: LD_INT 4
 385: PPUSH
 386: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 390: LD_STRING FrankInDelta
 392: PPUSH
 393: LD_INT 0
 395: PPUSH
 396: CALL_OW 30
 400: PUSH
 401: LD_INT 1
 403: EQUAL
 404: IFFALSE 477
// begin Frank = PrepareUnit ( Frank , true ) ;
 406: LD_ADDR_EXP 5
 410: PUSH
 411: LD_STRING Frank
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL 3921 0 2
 421: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 422: LD_EXP 5
 426: PPUSH
 427: LD_VAR 0 3
 431: PUSH
 432: LD_INT 1
 434: ARRAY
 435: PPUSH
 436: CALL_OW 250
 440: PPUSH
 441: LD_VAR 0 3
 445: PUSH
 446: LD_INT 1
 448: ARRAY
 449: PPUSH
 450: CALL_OW 251
 454: PPUSH
 455: LD_INT 5
 457: PPUSH
 458: LD_INT 0
 460: PPUSH
 461: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 465: LD_EXP 5
 469: PPUSH
 470: LD_INT 1
 472: PPUSH
 473: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 477: LD_STRING LisaInDelta
 479: PPUSH
 480: LD_INT 0
 482: PPUSH
 483: CALL_OW 30
 487: PUSH
 488: LD_INT 1
 490: EQUAL
 491: IFFALSE 564
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 493: LD_ADDR_EXP 4
 497: PUSH
 498: LD_STRING Lisa
 500: PPUSH
 501: LD_INT 1
 503: PPUSH
 504: CALL 3921 0 2
 508: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 509: LD_EXP 4
 513: PPUSH
 514: LD_VAR 0 3
 518: PUSH
 519: LD_INT 1
 521: ARRAY
 522: PPUSH
 523: CALL_OW 250
 527: PPUSH
 528: LD_VAR 0 3
 532: PUSH
 533: LD_INT 1
 535: ARRAY
 536: PPUSH
 537: CALL_OW 251
 541: PPUSH
 542: LD_INT 5
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 552: LD_EXP 4
 556: PPUSH
 557: LD_INT 1
 559: PPUSH
 560: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 564: LD_STRING BobbyInDelta
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL_OW 30
 574: PUSH
 575: LD_INT 1
 577: EQUAL
 578: IFFALSE 651
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 580: LD_ADDR_EXP 6
 584: PUSH
 585: LD_STRING Bobby
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: CALL 3921 0 2
 595: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 596: LD_EXP 6
 600: PPUSH
 601: LD_VAR 0 3
 605: PUSH
 606: LD_INT 1
 608: ARRAY
 609: PPUSH
 610: CALL_OW 250
 614: PPUSH
 615: LD_VAR 0 3
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: CALL_OW 251
 628: PPUSH
 629: LD_INT 5
 631: PPUSH
 632: LD_INT 0
 634: PPUSH
 635: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 639: LD_EXP 6
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 651: LD_STRING CyrusInDelta
 653: PPUSH
 654: LD_INT 0
 656: PPUSH
 657: CALL_OW 30
 661: PUSH
 662: LD_INT 1
 664: EQUAL
 665: IFFALSE 738
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 667: LD_ADDR_EXP 7
 671: PUSH
 672: LD_STRING Cyrus
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
 678: CALL 3921 0 2
 682: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 683: LD_EXP 7
 687: PPUSH
 688: LD_VAR 0 3
 692: PUSH
 693: LD_INT 1
 695: ARRAY
 696: PPUSH
 697: CALL_OW 250
 701: PPUSH
 702: LD_VAR 0 3
 706: PUSH
 707: LD_INT 1
 709: ARRAY
 710: PPUSH
 711: CALL_OW 251
 715: PPUSH
 716: LD_INT 5
 718: PPUSH
 719: LD_INT 0
 721: PPUSH
 722: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 726: LD_EXP 7
 730: PPUSH
 731: LD_INT 1
 733: PPUSH
 734: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 738: LD_STRING DonaldsonInDelta
 740: PPUSH
 741: LD_INT 0
 743: PPUSH
 744: CALL_OW 30
 748: PUSH
 749: LD_INT 1
 751: EQUAL
 752: IFFALSE 825
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 754: LD_ADDR_EXP 9
 758: PUSH
 759: LD_STRING Donaldson
 761: PPUSH
 762: LD_INT 1
 764: PPUSH
 765: CALL 3921 0 2
 769: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 770: LD_EXP 9
 774: PPUSH
 775: LD_VAR 0 3
 779: PUSH
 780: LD_INT 1
 782: ARRAY
 783: PPUSH
 784: CALL_OW 250
 788: PPUSH
 789: LD_VAR 0 3
 793: PUSH
 794: LD_INT 1
 796: ARRAY
 797: PPUSH
 798: CALL_OW 251
 802: PPUSH
 803: LD_INT 5
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
 813: LD_EXP 9
 817: PPUSH
 818: LD_INT 1
 820: PPUSH
 821: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
 825: LD_STRING BrownInDelta
 827: PPUSH
 828: LD_INT 0
 830: PPUSH
 831: CALL_OW 30
 835: PUSH
 836: LD_INT 1
 838: EQUAL
 839: IFFALSE 912
// begin Brown = PrepareUnit ( Brown , true ) ;
 841: LD_ADDR_EXP 8
 845: PUSH
 846: LD_STRING Brown
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: CALL 3921 0 2
 856: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 857: LD_EXP 8
 861: PPUSH
 862: LD_VAR 0 3
 866: PUSH
 867: LD_INT 1
 869: ARRAY
 870: PPUSH
 871: CALL_OW 250
 875: PPUSH
 876: LD_VAR 0 3
 880: PUSH
 881: LD_INT 1
 883: ARRAY
 884: PPUSH
 885: CALL_OW 251
 889: PPUSH
 890: LD_INT 5
 892: PPUSH
 893: LD_INT 0
 895: PPUSH
 896: CALL_OW 50
// SetClass ( Brown , 2 ) ;
 900: LD_EXP 8
 904: PPUSH
 905: LD_INT 2
 907: PPUSH
 908: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
 912: LD_ADDR_EXP 10
 916: PUSH
 917: LD_STRING othersInDelta
 919: PPUSH
 920: CALL_OW 31
 924: ST_TO_ADDR
// for i in others do
 925: LD_ADDR_VAR 0 2
 929: PUSH
 930: LD_EXP 10
 934: PUSH
 935: FOR_IN
 936: IFFALSE 983
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
 938: LD_VAR 0 2
 942: PPUSH
 943: LD_VAR 0 3
 947: PUSH
 948: LD_INT 1
 950: ARRAY
 951: PPUSH
 952: CALL_OW 250
 956: PPUSH
 957: LD_VAR 0 3
 961: PUSH
 962: LD_INT 1
 964: ARRAY
 965: PPUSH
 966: CALL_OW 251
 970: PPUSH
 971: LD_INT 35
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 50
 981: GO 935
 983: POP
 984: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
 985: LD_ADDR_EXP 11
 989: PUSH
 990: LD_STRING apeInDelta
 992: PPUSH
 993: CALL_OW 31
 997: ST_TO_ADDR
// uc_nation = 0 ;
 998: LD_ADDR_OWVAR 21
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// if apemans > 5 then
1006: LD_EXP 11
1010: PUSH
1011: LD_INT 5
1013: GREATER
1014: IFFALSE 1109
// begin for i := 1 to 5 do
1016: LD_ADDR_VAR 0 2
1020: PUSH
1021: DOUBLE
1022: LD_INT 1
1024: DEC
1025: ST_TO_ADDR
1026: LD_INT 5
1028: PUSH
1029: FOR_TO
1030: IFFALSE 1105
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1032: LD_EXP 11
1036: PUSH
1037: LD_VAR 0 2
1041: ARRAY
1042: PPUSH
1043: LD_VAR 0 3
1047: PUSH
1048: LD_INT 1
1050: ARRAY
1051: PPUSH
1052: CALL_OW 250
1056: PPUSH
1057: LD_VAR 0 3
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 251
1070: PPUSH
1071: LD_INT 50
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1081: LD_ADDR_EXP 12
1085: PUSH
1086: LD_EXP 12
1090: PUSH
1091: LD_EXP 11
1095: PUSH
1096: LD_VAR 0 2
1100: ARRAY
1101: ADD
1102: ST_TO_ADDR
// end ;
1103: GO 1029
1105: POP
1106: POP
// end else
1107: GO 1185
// begin for i in apemans do
1109: LD_ADDR_VAR 0 2
1113: PUSH
1114: LD_EXP 11
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1183
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1122: LD_VAR 0 2
1126: PPUSH
1127: LD_VAR 0 3
1131: PUSH
1132: LD_INT 1
1134: ARRAY
1135: PPUSH
1136: CALL_OW 250
1140: PPUSH
1141: LD_VAR 0 3
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PPUSH
1150: CALL_OW 251
1154: PPUSH
1155: LD_INT 50
1157: PPUSH
1158: LD_INT 0
1160: PPUSH
1161: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1165: LD_ADDR_EXP 12
1169: PUSH
1170: LD_EXP 12
1174: PUSH
1175: LD_VAR 0 2
1179: ADD
1180: ST_TO_ADDR
// end ;
1181: GO 1119
1183: POP
1184: POP
// end ; end ;
1185: LD_VAR 0 1
1189: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1190: LD_INT 0
1192: PPUSH
1193: PPUSH
1194: PPUSH
1195: PPUSH
1196: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1197: LD_ADDR_VAR 0 4
1201: PUSH
1202: LD_INT 22
1204: PUSH
1205: LD_INT 1
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 21
1214: PUSH
1215: LD_INT 3
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: PUSH
1222: LD_INT 30
1224: PUSH
1225: LD_INT 0
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 69
1241: ST_TO_ADDR
// uc_side = 1 ;
1242: LD_ADDR_OWVAR 20
1246: PUSH
1247: LD_INT 1
1249: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1250: LD_ADDR_VAR 0 5
1254: PUSH
1255: LD_STRING vehiclesInDelta
1257: PPUSH
1258: EMPTY
1259: PPUSH
1260: CALL_OW 30
1264: ST_TO_ADDR
// for i = 1 to vehicles do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: DOUBLE
1271: LD_INT 1
1273: DEC
1274: ST_TO_ADDR
1275: LD_VAR 0 5
1279: PUSH
1280: FOR_TO
1281: IFFALSE 1484
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1283: LD_VAR 0 5
1287: PUSH
1288: LD_VAR 0 2
1292: PUSH
1293: LD_INT 4
1295: PLUS
1296: ARRAY
1297: PUSH
1298: LD_INT 11
1300: EQUAL
1301: PUSH
1302: LD_VAR 0 5
1306: PUSH
1307: LD_VAR 0 2
1311: ARRAY
1312: PUSH
1313: LD_INT 3
1315: EQUAL
1316: OR
1317: IFFALSE 1468
// begin uc_nation = vehicles [ i ] ;
1319: LD_ADDR_OWVAR 21
1323: PUSH
1324: LD_VAR 0 5
1328: PUSH
1329: LD_VAR 0 2
1333: ARRAY
1334: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1335: LD_ADDR_OWVAR 37
1339: PUSH
1340: LD_VAR 0 5
1344: PUSH
1345: LD_VAR 0 2
1349: PUSH
1350: LD_INT 1
1352: PLUS
1353: ARRAY
1354: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1355: LD_ADDR_OWVAR 39
1359: PUSH
1360: LD_VAR 0 5
1364: PUSH
1365: LD_VAR 0 2
1369: PUSH
1370: LD_INT 2
1372: PLUS
1373: ARRAY
1374: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1375: LD_ADDR_OWVAR 38
1379: PUSH
1380: LD_VAR 0 5
1384: PUSH
1385: LD_VAR 0 2
1389: PUSH
1390: LD_INT 3
1392: PLUS
1393: ARRAY
1394: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1395: LD_ADDR_OWVAR 40
1399: PUSH
1400: LD_VAR 0 5
1404: PUSH
1405: LD_VAR 0 2
1409: PUSH
1410: LD_INT 4
1412: PLUS
1413: ARRAY
1414: ST_TO_ADDR
// veh = CreateVehicle ;
1415: LD_ADDR_VAR 0 3
1419: PUSH
1420: CALL_OW 45
1424: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1425: LD_VAR 0 3
1429: PPUSH
1430: LD_VAR 0 4
1434: PUSH
1435: LD_INT 1
1437: ARRAY
1438: PPUSH
1439: CALL_OW 250
1443: PPUSH
1444: LD_VAR 0 4
1448: PUSH
1449: LD_INT 1
1451: ARRAY
1452: PPUSH
1453: CALL_OW 251
1457: PPUSH
1458: LD_INT 40
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 50
// end ; i = i + 4 ;
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 2
1477: PUSH
1478: LD_INT 4
1480: PLUS
1481: ST_TO_ADDR
// end ;
1482: GO 1280
1484: POP
1485: POP
// end ;
1486: LD_VAR 0 1
1490: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1491: LD_INT 0
1493: PPUSH
1494: PPUSH
1495: PPUSH
1496: PPUSH
1497: PPUSH
// uc_side = 1 ;
1498: LD_ADDR_OWVAR 20
1502: PUSH
1503: LD_INT 1
1505: ST_TO_ADDR
// uc_nation = 1 ;
1506: LD_ADDR_OWVAR 21
1510: PUSH
1511: LD_INT 1
1513: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1514: LD_ADDR_VAR 0 4
1518: PUSH
1519: LD_INT 22
1521: PUSH
1522: LD_INT 1
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 21
1531: PUSH
1532: LD_INT 3
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 30
1541: PUSH
1542: LD_INT 0
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: LIST
1553: PPUSH
1554: CALL_OW 69
1558: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis ] then
1559: LD_INT 22
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 25
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 26
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: LIST
1593: PUSH
1594: EMPTY
1595: LIST
1596: PPUSH
1597: CALL_OW 69
1601: PUSH
1602: LD_EXP 1
1606: PUSH
1607: LD_EXP 7
1611: PUSH
1612: LD_EXP 6
1616: PUSH
1617: LD_EXP 5
1621: PUSH
1622: LD_EXP 2
1626: PUSH
1627: LD_EXP 3
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: DIFF
1640: IFFALSE 1735
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis ] ) [ 1 ] else
1642: LD_ADDR_EXP 14
1646: PUSH
1647: LD_INT 22
1649: PUSH
1650: LD_INT 1
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 25
1659: PUSH
1660: LD_INT 4
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 26
1669: PUSH
1670: LD_INT 1
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: LIST
1681: PUSH
1682: EMPTY
1683: LIST
1684: PPUSH
1685: CALL_OW 69
1689: PUSH
1690: LD_EXP 1
1694: PUSH
1695: LD_EXP 7
1699: PUSH
1700: LD_EXP 6
1704: PUSH
1705: LD_EXP 5
1709: PUSH
1710: LD_EXP 2
1714: PUSH
1715: LD_EXP 3
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: DIFF
1728: PUSH
1729: LD_INT 1
1731: ARRAY
1732: ST_TO_ADDR
1733: GO 1876
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis ] ;
1735: LD_ADDR_VAR 0 5
1739: PUSH
1740: LD_INT 22
1742: PUSH
1743: LD_INT 1
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: LD_INT 26
1752: PUSH
1753: LD_INT 1
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: PPUSH
1767: CALL_OW 69
1771: PUSH
1772: LD_EXP 1
1776: PUSH
1777: LD_EXP 7
1781: PUSH
1782: LD_EXP 6
1786: PUSH
1787: LD_EXP 5
1791: PUSH
1792: LD_EXP 2
1796: PUSH
1797: LD_EXP 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: DIFF
1810: ST_TO_ADDR
// if filter then
1811: LD_VAR 0 5
1815: IFFALSE 1876
// for i in filter do
1817: LD_ADDR_VAR 0 2
1821: PUSH
1822: LD_VAR 0 5
1826: PUSH
1827: FOR_IN
1828: IFFALSE 1874
// if GetSkill ( i , 4 ) >= 4 then
1830: LD_VAR 0 2
1834: PPUSH
1835: LD_INT 4
1837: PPUSH
1838: CALL_OW 259
1842: PUSH
1843: LD_INT 4
1845: GREATEREQUAL
1846: IFFALSE 1872
// begin deltaDoctor := i ;
1848: LD_ADDR_EXP 14
1852: PUSH
1853: LD_VAR 0 2
1857: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
1858: LD_EXP 14
1862: PPUSH
1863: LD_INT 4
1865: PPUSH
1866: CALL_OW 336
// break ;
1870: GO 1874
// end ;
1872: GO 1827
1874: POP
1875: POP
// end ; for i = 1 to 6 do
1876: LD_ADDR_VAR 0 2
1880: PUSH
1881: DOUBLE
1882: LD_INT 1
1884: DEC
1885: ST_TO_ADDR
1886: LD_INT 6
1888: PUSH
1889: FOR_TO
1890: IFFALSE 2017
// begin hc_gallery =  ;
1892: LD_ADDR_OWVAR 33
1896: PUSH
1897: LD_STRING 
1899: ST_TO_ADDR
// hc_name =  ;
1900: LD_ADDR_OWVAR 26
1904: PUSH
1905: LD_STRING 
1907: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) - Difficulty ) ;
1908: LD_INT 0
1910: PPUSH
1911: LD_INT 1
1913: PUSH
1914: LD_INT 2
1916: PUSH
1917: LD_INT 3
1919: PUSH
1920: LD_INT 4
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_INT 4
1934: PPUSH
1935: CALL_OW 12
1939: ARRAY
1940: PPUSH
1941: LD_INT 3
1943: PPUSH
1944: LD_INT 5
1946: PPUSH
1947: CALL_OW 12
1951: PUSH
1952: LD_OWVAR 67
1956: MINUS
1957: PPUSH
1958: CALL_OW 380
// un = CreateHuman ;
1962: LD_ADDR_VAR 0 3
1966: PUSH
1967: CALL_OW 44
1971: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1972: LD_VAR 0 3
1976: PPUSH
1977: LD_VAR 0 4
1981: PUSH
1982: LD_INT 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 250
1990: PPUSH
1991: LD_VAR 0 4
1995: PUSH
1996: LD_INT 1
1998: ARRAY
1999: PPUSH
2000: CALL_OW 251
2004: PPUSH
2005: LD_INT 15
2007: PPUSH
2008: LD_INT 0
2010: PPUSH
2011: CALL_OW 50
// end ;
2015: GO 1889
2017: POP
2018: POP
// if deltaDoctor then
2019: LD_EXP 14
2023: IFFALSE 2027
// exit ;
2025: GO 2109
// hc_gallery =  ;
2027: LD_ADDR_OWVAR 33
2031: PUSH
2032: LD_STRING 
2034: ST_TO_ADDR
// hc_name = Dr. Michael Mills ;
2035: LD_ADDR_OWVAR 26
2039: PUSH
2040: LD_STRING Dr. Michael Mills
2042: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2043: LD_INT 1
2045: PPUSH
2046: LD_INT 4
2048: PPUSH
2049: LD_INT 6
2051: PPUSH
2052: CALL_OW 380
// deltaDoctor = CreateHuman ;
2056: LD_ADDR_EXP 14
2060: PUSH
2061: CALL_OW 44
2065: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2066: LD_EXP 14
2070: PPUSH
2071: LD_VAR 0 4
2075: PUSH
2076: LD_INT 1
2078: ARRAY
2079: PPUSH
2080: CALL_OW 250
2084: PPUSH
2085: LD_VAR 0 4
2089: PUSH
2090: LD_INT 1
2092: ARRAY
2093: PPUSH
2094: CALL_OW 251
2098: PPUSH
2099: LD_INT 5
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: CALL_OW 50
// end ; end_of_file
2109: LD_VAR 0 1
2113: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2114: LD_INT 0
2116: PPUSH
2117: PPUSH
2118: PPUSH
2119: PPUSH
2120: PPUSH
2121: PPUSH
2122: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2123: LD_ADDR_VAR 0 5
2127: PUSH
2128: LD_STRING buildingsInDelta
2130: PPUSH
2131: EMPTY
2132: PPUSH
2133: CALL_OW 30
2137: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2138: LD_INT 68
2140: PPUSH
2141: LD_INT 40
2143: PPUSH
2144: LD_INT 1
2146: PPUSH
2147: CALL_OW 441
// uc_side = 1 ;
2151: LD_ADDR_OWVAR 20
2155: PUSH
2156: LD_INT 1
2158: ST_TO_ADDR
// uc_nation = 1 ;
2159: LD_ADDR_OWVAR 21
2163: PUSH
2164: LD_INT 1
2166: ST_TO_ADDR
// for i = 1 to buildings do
2167: LD_ADDR_VAR 0 2
2171: PUSH
2172: DOUBLE
2173: LD_INT 1
2175: DEC
2176: ST_TO_ADDR
2177: LD_VAR 0 5
2181: PUSH
2182: FOR_TO
2183: IFFALSE 2381
// begin bc_type = buildings [ i ] [ 1 ] ;
2185: LD_ADDR_OWVAR 42
2189: PUSH
2190: LD_VAR 0 5
2194: PUSH
2195: LD_VAR 0 2
2199: ARRAY
2200: PUSH
2201: LD_INT 1
2203: ARRAY
2204: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2205: LD_ADDR_OWVAR 43
2209: PUSH
2210: LD_VAR 0 5
2214: PUSH
2215: LD_VAR 0 2
2219: ARRAY
2220: PUSH
2221: LD_INT 2
2223: ARRAY
2224: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2225: LD_OWVAR 42
2229: PUSH
2230: LD_INT 7
2232: EQUAL
2233: PUSH
2234: LD_OWVAR 42
2238: PUSH
2239: LD_INT 8
2241: EQUAL
2242: OR
2243: IFFALSE 2285
// begin bc_kind1 = buildings [ i ] [ 6 ] ;
2245: LD_ADDR_OWVAR 44
2249: PUSH
2250: LD_VAR 0 5
2254: PUSH
2255: LD_VAR 0 2
2259: ARRAY
2260: PUSH
2261: LD_INT 6
2263: ARRAY
2264: ST_TO_ADDR
// bc_kind2 = buildings [ i ] [ 7 ] ;
2265: LD_ADDR_OWVAR 45
2269: PUSH
2270: LD_VAR 0 5
2274: PUSH
2275: LD_VAR 0 2
2279: ARRAY
2280: PUSH
2281: LD_INT 7
2283: ARRAY
2284: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2285: LD_ADDR_VAR 0 4
2289: PUSH
2290: LD_VAR 0 5
2294: PUSH
2295: LD_VAR 0 2
2299: ARRAY
2300: PUSH
2301: LD_INT 3
2303: ARRAY
2304: PPUSH
2305: LD_VAR 0 5
2309: PUSH
2310: LD_VAR 0 2
2314: ARRAY
2315: PUSH
2316: LD_INT 4
2318: ARRAY
2319: PPUSH
2320: LD_VAR 0 5
2324: PUSH
2325: LD_VAR 0 2
2329: ARRAY
2330: PUSH
2331: LD_INT 5
2333: ARRAY
2334: PPUSH
2335: CALL_OW 47
2339: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2340: LD_VAR 0 4
2344: PPUSH
2345: CALL_OW 266
2349: PUSH
2350: LD_INT 32
2352: EQUAL
2353: IFFALSE 2379
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2355: LD_VAR 0 4
2359: PPUSH
2360: LD_VAR 0 5
2364: PUSH
2365: LD_VAR 0 2
2369: ARRAY
2370: PUSH
2371: LD_INT 8
2373: ARRAY
2374: PPUSH
2375: CALL_OW 431
// end ;
2379: GO 2182
2381: POP
2382: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2383: LD_ADDR_VAR 0 6
2387: PUSH
2388: LD_INT 22
2390: PUSH
2391: LD_INT 1
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: LD_INT 2
2400: PUSH
2401: LD_INT 30
2403: PUSH
2404: LD_INT 6
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 30
2413: PUSH
2414: LD_INT 7
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: LD_INT 30
2423: PUSH
2424: LD_INT 8
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PPUSH
2441: CALL_OW 69
2445: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2446: LD_ADDR_VAR 0 7
2450: PUSH
2451: LD_INT 22
2453: PUSH
2454: LD_INT 1
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: PUSH
2461: LD_INT 30
2463: PUSH
2464: LD_INT 0
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: PUSH
2471: EMPTY
2472: LIST
2473: LIST
2474: PPUSH
2475: CALL_OW 69
2479: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2480: LD_VAR 0 6
2484: PUSH
2485: LD_INT 0
2487: GREATER
2488: PUSH
2489: LD_VAR 0 7
2493: PUSH
2494: LD_INT 0
2496: GREATER
2497: AND
2498: IFFALSE 2508
// baseCorrect = 1 ;
2500: LD_ADDR_EXP 16
2504: PUSH
2505: LD_INT 1
2507: ST_TO_ADDR
// if baseCorrect = 0 then
2508: LD_EXP 16
2512: PUSH
2513: LD_INT 0
2515: EQUAL
2516: IFFALSE 2889
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2518: LD_ADDR_VAR 0 2
2522: PUSH
2523: LD_INT 22
2525: PUSH
2526: LD_INT 1
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PUSH
2533: LD_INT 21
2535: PUSH
2536: LD_INT 3
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: PPUSH
2547: CALL_OW 69
2551: PUSH
2552: FOR_IN
2553: IFFALSE 2566
// RemoveUnit ( i ) ;
2555: LD_VAR 0 2
2559: PPUSH
2560: CALL_OW 64
2564: GO 2552
2566: POP
2567: POP
// uc_nation = 1 ;
2568: LD_ADDR_OWVAR 21
2572: PUSH
2573: LD_INT 1
2575: ST_TO_ADDR
// uc_side = 1 ;
2576: LD_ADDR_OWVAR 20
2580: PUSH
2581: LD_INT 1
2583: ST_TO_ADDR
// bc_level = 5 ;
2584: LD_ADDR_OWVAR 43
2588: PUSH
2589: LD_INT 5
2591: ST_TO_ADDR
// bc_type = b_depot ;
2592: LD_ADDR_OWVAR 42
2596: PUSH
2597: LD_INT 0
2599: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2600: LD_INT 50
2602: PPUSH
2603: LD_INT 22
2605: PPUSH
2606: LD_INT 0
2608: PPUSH
2609: CALL_OW 47
// bc_type = b_bunker ;
2613: LD_ADDR_OWVAR 42
2617: PUSH
2618: LD_INT 32
2620: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2621: LD_ADDR_VAR 0 4
2625: PUSH
2626: LD_INT 68
2628: PPUSH
2629: LD_INT 24
2631: PPUSH
2632: LD_INT 4
2634: PPUSH
2635: CALL_OW 47
2639: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2640: LD_VAR 0 4
2644: PPUSH
2645: LD_INT 4
2647: PUSH
2648: LD_INT 11
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PUSH
2655: LD_INT 1
2657: PPUSH
2658: LD_INT 2
2660: PPUSH
2661: CALL_OW 12
2665: ARRAY
2666: PPUSH
2667: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2671: LD_ADDR_VAR 0 4
2675: PUSH
2676: LD_INT 71
2678: PPUSH
2679: LD_INT 34
2681: PPUSH
2682: LD_INT 4
2684: PPUSH
2685: CALL_OW 47
2689: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2690: LD_VAR 0 4
2694: PPUSH
2695: LD_INT 4
2697: PUSH
2698: LD_INT 11
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: LD_INT 1
2707: PPUSH
2708: LD_INT 2
2710: PPUSH
2711: CALL_OW 12
2715: ARRAY
2716: PPUSH
2717: CALL_OW 431
// bc_type = 31 ;
2721: LD_ADDR_OWVAR 42
2725: PUSH
2726: LD_INT 31
2728: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
2729: LD_INT 51
2731: PPUSH
2732: LD_INT 7
2734: PPUSH
2735: LD_INT 3
2737: PPUSH
2738: CALL_OW 47
// bc_type = b_oil_mine ;
2742: LD_ADDR_OWVAR 42
2746: PUSH
2747: LD_INT 29
2749: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
2750: LD_INT 68
2752: PPUSH
2753: LD_INT 40
2755: PPUSH
2756: LD_INT 1
2758: PPUSH
2759: CALL_OW 47
// bc_type = b_workshop ;
2763: LD_ADDR_OWVAR 42
2767: PUSH
2768: LD_INT 2
2770: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2771: LD_INT 38
2773: PPUSH
2774: LD_INT 20
2776: PPUSH
2777: LD_INT 2
2779: PPUSH
2780: CALL_OW 47
// bc_type = b_armoury ;
2784: LD_ADDR_OWVAR 42
2788: PUSH
2789: LD_INT 4
2791: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2792: LD_INT 38
2794: PPUSH
2795: LD_INT 20
2797: PPUSH
2798: LD_INT 2
2800: PPUSH
2801: CALL_OW 47
// bc_type = b_solar_power ;
2805: LD_ADDR_OWVAR 42
2809: PUSH
2810: LD_INT 27
2812: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
2813: LD_INT 46
2815: PPUSH
2816: LD_INT 12
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
2826: LD_INT 48
2828: PPUSH
2829: LD_INT 11
2831: PPUSH
2832: LD_INT 2
2834: PPUSH
2835: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
2839: LD_INT 49
2841: PPUSH
2842: LD_INT 11
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: CALL_OW 47
// bc_type = b_lab_half ;
2852: LD_ADDR_OWVAR 42
2856: PUSH
2857: LD_INT 7
2859: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
2860: LD_ADDR_OWVAR 44
2864: PUSH
2865: LD_INT 15
2867: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2868: LD_ADDR_OWVAR 45
2872: PUSH
2873: LD_INT 9
2875: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
2876: LD_INT 42
2878: PPUSH
2879: LD_INT 15
2881: PPUSH
2882: LD_INT 2
2884: PPUSH
2885: CALL_OW 47
// end ; end ; end_of_file
2889: LD_VAR 0 1
2893: RET
// every 1 do var i , j , lab , tmp ;
2894: GO 2896
2896: DISABLE
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
2901: PPUSH
2902: PPUSH
// begin lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2903: LD_ADDR_VAR 0 3
2907: PUSH
2908: LD_INT 22
2910: PUSH
2911: LD_INT 1
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 2
2920: PUSH
2921: LD_INT 30
2923: PUSH
2924: LD_INT 6
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: LD_INT 30
2933: PUSH
2934: LD_INT 7
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PUSH
2941: LD_INT 30
2943: PUSH
2944: LD_INT 8
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PPUSH
2961: CALL_OW 69
2965: ST_TO_ADDR
// InGameOn ;
2966: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
2970: LD_VAR 0 3
2974: PUSH
2975: LD_INT 1
2977: ARRAY
2978: PPUSH
2979: CALL_OW 87
// if IsOK ( Denis ) then
2983: LD_EXP 3
2987: PPUSH
2988: CALL_OW 302
2992: IFFALSE 3020
// begin SetTech ( tech_radar , 1 , state_researched ) ;
2994: LD_INT 6
2996: PPUSH
2997: LD_INT 1
2999: PPUSH
3000: LD_INT 2
3002: PPUSH
3003: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3007: LD_INT 20
3009: PPUSH
3010: LD_INT 1
3012: PPUSH
3013: LD_INT 1
3015: PPUSH
3016: CALL_OW 324
// end ; ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3020: LD_EXP 1
3024: PUSH
3025: LD_EXP 14
3029: PUSH
3030: LD_EXP 3
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: LIST
3039: PPUSH
3040: LD_VAR 0 3
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: CALL_OW 120
// Say ( JMM , D1-JMM-1 ) ;
3053: LD_EXP 1
3057: PPUSH
3058: LD_STRING D1-JMM-1
3060: PPUSH
3061: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3065: LD_EXP 14
3069: PPUSH
3070: LD_STRING D1-Sci-1
3072: PPUSH
3073: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3077: LD_EXP 1
3081: PPUSH
3082: LD_STRING D1-JMM-2
3084: PPUSH
3085: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3089: LD_EXP 14
3093: PPUSH
3094: LD_STRING D1-Sci-2
3096: PPUSH
3097: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3101: LD_EXP 1
3105: PPUSH
3106: LD_STRING D1-JMM-3
3108: PPUSH
3109: CALL_OW 88
// if IsOK ( Denis ) then
3113: LD_EXP 3
3117: PPUSH
3118: CALL_OW 302
3122: IFFALSE 3138
// Say ( DeltaDoctor , D1-Sci-3 ) else
3124: LD_EXP 14
3128: PPUSH
3129: LD_STRING D1-Sci-3
3131: PPUSH
3132: CALL_OW 88
3136: GO 3150
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3138: LD_EXP 14
3142: PPUSH
3143: LD_STRING D1-Sci-3a
3145: PPUSH
3146: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3150: LD_EXP 1
3154: PPUSH
3155: LD_STRING D1-JMM-4
3157: PPUSH
3158: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3162: LD_ADDR_VAR 0 4
3166: PUSH
3167: LD_INT 22
3169: PUSH
3170: LD_INT 1
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 25
3179: PUSH
3180: LD_INT 4
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: PUSH
3187: LD_INT 3
3189: PUSH
3190: LD_INT 54
3192: PUSH
3193: EMPTY
3194: LIST
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: PPUSH
3205: CALL_OW 69
3209: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3210: LD_ADDR_VAR 0 1
3214: PUSH
3215: LD_INT 22
3217: PUSH
3218: LD_INT 0
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: CALL_OW 69
3229: PUSH
3230: FOR_IN
3231: IFFALSE 3281
// for j in tmp do
3233: LD_ADDR_VAR 0 2
3237: PUSH
3238: LD_VAR 0 4
3242: PUSH
3243: FOR_IN
3244: IFFALSE 3277
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3246: LD_VAR 0 2
3250: PPUSH
3251: LD_VAR 0 1
3255: PPUSH
3256: CALL_OW 250
3260: PPUSH
3261: LD_VAR 0 1
3265: PPUSH
3266: CALL_OW 251
3270: PPUSH
3271: CALL_OW 191
3275: GO 3243
3277: POP
3278: POP
3279: GO 3230
3281: POP
3282: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3283: LD_EXP 14
3287: PPUSH
3288: LD_STRING D1-Sci-4
3290: PPUSH
3291: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3295: LD_EXP 1
3299: PPUSH
3300: LD_STRING D1-JMM-5
3302: PPUSH
3303: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3307: LD_EXP 14
3311: PPUSH
3312: LD_STRING D1-Sci-5
3314: PPUSH
3315: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3319: LD_EXP 1
3323: PPUSH
3324: LD_STRING D1-JMM-6
3326: PPUSH
3327: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3331: LD_EXP 15
3335: PPUSH
3336: LD_STRING D1-Har-6
3338: PPUSH
3339: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3343: LD_EXP 1
3347: PPUSH
3348: LD_STRING D1-JMM-7
3350: PPUSH
3351: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3355: LD_EXP 15
3359: PPUSH
3360: LD_STRING D1-Har-7
3362: PPUSH
3363: CALL_OW 94
// if IsOK ( Denis ) then
3367: LD_EXP 3
3371: PPUSH
3372: CALL_OW 302
3376: IFFALSE 3390
// Say ( JMM , D1-JMM-8 ) ;
3378: LD_EXP 1
3382: PPUSH
3383: LD_STRING D1-JMM-8
3385: PPUSH
3386: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3390: LD_EXP 1
3394: PPUSH
3395: LD_STRING D1-JMM-8a
3397: PPUSH
3398: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3402: LD_EXP 15
3406: PPUSH
3407: LD_STRING D1-Har-8
3409: PPUSH
3410: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3414: LD_EXP 1
3418: PPUSH
3419: LD_STRING D1-JMM-9
3421: PPUSH
3422: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3426: LD_EXP 15
3430: PPUSH
3431: LD_STRING D1-Har-9
3433: PPUSH
3434: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3438: LD_EXP 1
3442: PPUSH
3443: LD_STRING D1-JMM-10
3445: PPUSH
3446: CALL_OW 88
// if IsOK ( Denis ) then
3450: LD_EXP 3
3454: PPUSH
3455: CALL_OW 302
3459: IFFALSE 3473
// Say ( JMM , D1-JMM-10a ) ;
3461: LD_EXP 1
3465: PPUSH
3466: LD_STRING D1-JMM-10a
3468: PPUSH
3469: CALL_OW 88
// SelectAndSaveCharacters ;
3473: CALL 3984 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3477: LD_VAR 0 3
3481: PUSH
3482: LD_INT 1
3484: ARRAY
3485: PPUSH
3486: CALL_OW 274
3490: PPUSH
3491: LD_INT 1
3493: PPUSH
3494: LD_INT 250
3496: PPUSH
3497: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3501: LD_INT 22
3503: PUSH
3504: LD_INT 1
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PUSH
3511: LD_INT 30
3513: PUSH
3514: LD_INT 29
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PPUSH
3525: CALL_OW 69
3529: PUSH
3530: LD_INT 0
3532: GREATER
3533: IFFALSE 3559
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3535: LD_VAR 0 3
3539: PUSH
3540: LD_INT 1
3542: ARRAY
3543: PPUSH
3544: CALL_OW 274
3548: PPUSH
3549: LD_INT 2
3551: PPUSH
3552: LD_INT 300
3554: PPUSH
3555: CALL_OW 277
// InGameOff ;
3559: CALL_OW 9
// Query ( Q1 ) ;
3563: LD_STRING Q1
3565: PPUSH
3566: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3570: LD_INT 3
3572: PPUSH
3573: LD_INT 1
3575: PPUSH
3576: CALL_OW 424
// if IsInUnit ( JMM ) then
3580: LD_EXP 1
3584: PPUSH
3585: CALL_OW 310
3589: IFFALSE 3600
// ComExitBuilding ( JMM ) ;
3591: LD_EXP 1
3595: PPUSH
3596: CALL_OW 122
// end ;
3600: PPOPN 4
3602: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i ;
3603: LD_INT 3
3605: PPUSH
3606: LD_INT 22
3608: PUSH
3609: LD_INT 1
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PUSH
3616: LD_INT 21
3618: PUSH
3619: LD_INT 1
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PPUSH
3630: CALL_OW 71
3634: PUSH
3635: LD_INT 0
3637: EQUAL
3638: IFFALSE 3918
3640: GO 3642
3642: DISABLE
3643: LD_INT 0
3645: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) > 0 then
3646: LD_INT 3
3648: PPUSH
3649: LD_INT 21
3651: PUSH
3652: LD_INT 2
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: EMPTY
3660: LIST
3661: PPUSH
3662: CALL_OW 70
3666: PUSH
3667: LD_INT 0
3669: GREATER
3670: IFFALSE 3908
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) do
3672: LD_ADDR_VAR 0 1
3676: PUSH
3677: LD_INT 3
3679: PPUSH
3680: LD_INT 21
3682: PUSH
3683: LD_INT 2
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: PUSH
3690: EMPTY
3691: LIST
3692: PPUSH
3693: CALL_OW 70
3697: PUSH
3698: FOR_IN
3699: IFFALSE 3894
// begin if GetWeapon ( i ) = us_cargo_bay then
3701: LD_VAR 0 1
3705: PPUSH
3706: CALL_OW 264
3710: PUSH
3711: LD_INT 12
3713: EQUAL
3714: IFFALSE 3821
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetCargoType ( i ) , GetCargo ( i , GetCargoType ( i ) ) ] ] ;
3716: LD_ADDR_EXP 13
3720: PUSH
3721: LD_EXP 13
3725: PUSH
3726: LD_VAR 0 1
3730: PPUSH
3731: CALL_OW 248
3735: PUSH
3736: LD_VAR 0 1
3740: PPUSH
3741: CALL_OW 265
3745: PUSH
3746: LD_VAR 0 1
3750: PPUSH
3751: CALL_OW 262
3755: PUSH
3756: LD_VAR 0 1
3760: PPUSH
3761: CALL_OW 263
3765: PUSH
3766: LD_VAR 0 1
3770: PPUSH
3771: CALL_OW 264
3775: PUSH
3776: LD_VAR 0 1
3780: PPUSH
3781: CALL_OW 288
3785: PUSH
3786: LD_VAR 0 1
3790: PPUSH
3791: LD_VAR 0 1
3795: PPUSH
3796: CALL_OW 288
3800: PPUSH
3801: CALL_OW 289
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: ADD
3818: ST_TO_ADDR
// end else
3819: GO 3892
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
3821: LD_ADDR_EXP 13
3825: PUSH
3826: LD_EXP 13
3830: PUSH
3831: LD_VAR 0 1
3835: PPUSH
3836: CALL_OW 248
3840: PUSH
3841: LD_VAR 0 1
3845: PPUSH
3846: CALL_OW 265
3850: PUSH
3851: LD_VAR 0 1
3855: PPUSH
3856: CALL_OW 262
3860: PUSH
3861: LD_VAR 0 1
3865: PPUSH
3866: CALL_OW 263
3870: PUSH
3871: LD_VAR 0 1
3875: PPUSH
3876: CALL_OW 264
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: PUSH
3888: EMPTY
3889: LIST
3890: ADD
3891: ST_TO_ADDR
// end ; end ;
3892: GO 3698
3894: POP
3895: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
3896: LD_EXP 13
3900: PPUSH
3901: LD_STRING 06_VehiclesIn06_1
3903: PPUSH
3904: CALL_OW 39
// end ; ChangeMap ( 6 , %_cont ) ;
3908: LD_INT 6
3910: PPUSH
3911: LD_STRING %_cont
3913: PPUSH
3914: CALL_OW 340
// end ; end_of_file
3918: PPOPN 1
3920: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3921: LD_INT 0
3923: PPUSH
3924: PPUSH
// if exist_mode then
3925: LD_VAR 0 2
3929: IFFALSE 3954
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3931: LD_ADDR_VAR 0 4
3935: PUSH
3936: LD_EXP 18
3940: PUSH
3941: LD_VAR 0 1
3945: STR
3946: PPUSH
3947: CALL_OW 34
3951: ST_TO_ADDR
3952: GO 3969
// unit := NewCharacter ( ident ) ;
3954: LD_ADDR_VAR 0 4
3958: PUSH
3959: LD_VAR 0 1
3963: PPUSH
3964: CALL_OW 25
3968: ST_TO_ADDR
// result := unit ;
3969: LD_ADDR_VAR 0 3
3973: PUSH
3974: LD_VAR 0 4
3978: ST_TO_ADDR
// end ;
3979: LD_VAR 0 3
3983: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test ; begin
3984: LD_INT 0
3986: PPUSH
3987: PPUSH
3988: PPUSH
3989: PPUSH
3990: PPUSH
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
3991: LD_ADDR_VAR 0 3
3995: PUSH
3996: LD_INT 22
3998: PUSH
3999: LD_INT 1
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: LD_INT 21
4008: PUSH
4009: LD_INT 1
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PUSH
4016: LD_INT 2
4018: PUSH
4019: LD_INT 25
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: LD_INT 25
4031: PUSH
4032: LD_INT 2
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 25
4041: PUSH
4042: LD_INT 3
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: LD_INT 25
4051: PUSH
4052: LD_INT 4
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: LIST
4070: PPUSH
4071: CALL_OW 69
4075: PUSH
4076: LD_EXP 1
4080: PUSH
4081: LD_EXP 14
4085: PUSH
4086: LD_EXP 3
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: DIFF
4096: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , [ 5 , rand ( 4 , 5 ) , 4 ] [ Difficulty ] , [ 5 , rand ( 4 , 5 ) , 4 ] [ Difficulty ] , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4097: LD_ADDR_VAR 0 4
4101: PUSH
4102: LD_STRING text
4104: PPUSH
4105: LD_INT 5
4107: PUSH
4108: LD_INT 4
4110: PPUSH
4111: LD_INT 5
4113: PPUSH
4114: CALL_OW 12
4118: PUSH
4119: LD_INT 4
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: LIST
4126: PUSH
4127: LD_OWVAR 67
4131: ARRAY
4132: PPUSH
4133: LD_INT 5
4135: PUSH
4136: LD_INT 4
4138: PPUSH
4139: LD_INT 5
4141: PPUSH
4142: CALL_OW 12
4146: PUSH
4147: LD_INT 4
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: LIST
4154: PUSH
4155: LD_OWVAR 67
4159: ARRAY
4160: PPUSH
4161: LD_INT -5
4163: PUSH
4164: LD_EXP 1
4168: PUSH
4169: LD_INT -6
4171: PUSH
4172: LD_INT -2
4174: PUSH
4175: LD_INT -3
4177: PUSH
4178: LD_INT -5
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: PUSH
4189: LD_VAR 0 3
4193: ADD
4194: PUSH
4195: LD_INT -6
4197: PUSH
4198: LD_INT -4
4200: PUSH
4201: LD_EXP 3
4205: PUSH
4206: LD_EXP 14
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: ADD
4217: PPUSH
4218: LD_INT 1
4220: PUSH
4221: LD_INT 3
4223: PUSH
4224: LD_INT 2
4226: PUSH
4227: LD_INT 1
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 4
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: PPUSH
4243: CALL_OW 42
4247: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4248: LD_EXP 1
4252: PPUSH
4253: LD_EXP 17
4257: PUSH
4258: LD_STRING JMM
4260: STR
4261: PPUSH
4262: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4266: LD_EXP 14
4270: PPUSH
4271: LD_STRING DeltaDoctor
4273: PPUSH
4274: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4278: LD_EXP 3
4282: PPUSH
4283: LD_EXP 17
4287: PUSH
4288: LD_STRING Denis
4290: STR
4291: PPUSH
4292: CALL_OW 38
// if Lisa in selectedPeople then
4296: LD_EXP 4
4300: PUSH
4301: LD_VAR 0 4
4305: IN
4306: IFFALSE 4336
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4308: LD_EXP 4
4312: PPUSH
4313: LD_EXP 17
4317: PUSH
4318: LD_STRING Lisa
4320: STR
4321: PPUSH
4322: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4326: LD_INT 1
4328: PPUSH
4329: LD_STRING LisaIn06
4331: PPUSH
4332: CALL_OW 39
// end ; if Bobby in selectedPeople then
4336: LD_EXP 6
4340: PUSH
4341: LD_VAR 0 4
4345: IN
4346: IFFALSE 4376
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4348: LD_EXP 6
4352: PPUSH
4353: LD_EXP 17
4357: PUSH
4358: LD_STRING Bobby
4360: STR
4361: PPUSH
4362: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4366: LD_INT 1
4368: PPUSH
4369: LD_STRING BobbyIn06
4371: PPUSH
4372: CALL_OW 39
// end ; if Cyrus in selectedPeople then
4376: LD_EXP 7
4380: PUSH
4381: LD_VAR 0 4
4385: IN
4386: IFFALSE 4416
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4388: LD_EXP 7
4392: PPUSH
4393: LD_EXP 17
4397: PUSH
4398: LD_STRING Cyrus
4400: STR
4401: PPUSH
4402: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4406: LD_INT 1
4408: PPUSH
4409: LD_STRING CyrusIn06
4411: PPUSH
4412: CALL_OW 39
// end ; if Frank in selectedPeople then
4416: LD_EXP 5
4420: PUSH
4421: LD_VAR 0 4
4425: IN
4426: IFFALSE 4456
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4428: LD_EXP 5
4432: PPUSH
4433: LD_EXP 17
4437: PUSH
4438: LD_STRING Frank
4440: STR
4441: PPUSH
4442: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4446: LD_INT 1
4448: PPUSH
4449: LD_STRING FrankIn06
4451: PPUSH
4452: CALL_OW 39
// end ; if Brown in selectedPeople then
4456: LD_EXP 8
4460: PUSH
4461: LD_VAR 0 4
4465: IN
4466: IFFALSE 4496
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4468: LD_EXP 8
4472: PPUSH
4473: LD_EXP 17
4477: PUSH
4478: LD_STRING Brown
4480: STR
4481: PPUSH
4482: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
4486: LD_INT 1
4488: PPUSH
4489: LD_STRING BrownIn06
4491: PPUSH
4492: CALL_OW 39
// end ; if Donaldson in selectedPeople then
4496: LD_EXP 9
4500: PUSH
4501: LD_VAR 0 4
4505: IN
4506: IFFALSE 4536
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
4508: LD_EXP 9
4512: PPUSH
4513: LD_EXP 17
4517: PUSH
4518: LD_STRING Donaldson
4520: STR
4521: PPUSH
4522: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
4526: LD_INT 1
4528: PPUSH
4529: LD_STRING DonaldsonIn06
4531: PPUSH
4532: CALL_OW 39
// end ; if Gladstone in selectedPeople then
4536: LD_EXP 2
4540: PUSH
4541: LD_VAR 0 4
4545: IN
4546: IFFALSE 4576
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4548: LD_EXP 2
4552: PPUSH
4553: LD_EXP 17
4557: PUSH
4558: LD_STRING Gladstone
4560: STR
4561: PPUSH
4562: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
4566: LD_INT 1
4568: PPUSH
4569: LD_STRING GladstoneIn06
4571: PPUSH
4572: CALL_OW 39
// end ; SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4576: LD_INT 22
4578: PUSH
4579: LD_INT 1
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: PUSH
4586: LD_INT 21
4588: PUSH
4589: LD_INT 1
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PPUSH
4600: CALL_OW 69
4604: PPUSH
4605: LD_INT 4
4607: PPUSH
4608: CALL_OW 235
// for i in selectedPeople do
4612: LD_ADDR_VAR 0 2
4616: PUSH
4617: LD_VAR 0 4
4621: PUSH
4622: FOR_IN
4623: IFFALSE 4639
// SetSide ( i , 1 ) ;
4625: LD_VAR 0 2
4629: PPUSH
4630: LD_INT 1
4632: PPUSH
4633: CALL_OW 235
4637: GO 4622
4639: POP
4640: POP
// for i in yourApemans do
4641: LD_ADDR_VAR 0 2
4645: PUSH
4646: LD_EXP 12
4650: PUSH
4651: FOR_IN
4652: IFFALSE 4668
// SetSide ( i , 1 ) ;
4654: LD_VAR 0 2
4658: PPUSH
4659: LD_INT 1
4661: PPUSH
4662: CALL_OW 235
4666: GO 4651
4668: POP
4669: POP
// SetSide ( JMM , 1 ) ;
4670: LD_EXP 1
4674: PPUSH
4675: LD_INT 1
4677: PPUSH
4678: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4682: LD_EXP 12
4686: PPUSH
4687: LD_INT 2
4689: PPUSH
4690: LD_INT 5
4692: PPUSH
4693: CALL_OW 237
// SaveCharacters ( yourApemans , ApeIn06 ) ;
4697: LD_EXP 12
4701: PPUSH
4702: LD_STRING ApeIn06
4704: PPUSH
4705: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone ] , OthersIn06 ) ;
4709: LD_INT 22
4711: PUSH
4712: LD_INT 1
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: PUSH
4719: LD_INT 21
4721: PUSH
4722: LD_INT 1
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: LD_INT 2
4731: PUSH
4732: LD_INT 25
4734: PUSH
4735: LD_INT 1
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: PUSH
4742: LD_INT 25
4744: PUSH
4745: LD_INT 2
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 25
4754: PUSH
4755: LD_INT 3
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PUSH
4762: LD_INT 25
4764: PUSH
4765: LD_INT 4
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: LIST
4783: PPUSH
4784: CALL_OW 69
4788: PUSH
4789: LD_EXP 1
4793: PUSH
4794: LD_EXP 4
4798: PUSH
4799: LD_EXP 6
4803: PUSH
4804: LD_EXP 7
4808: PUSH
4809: LD_EXP 5
4813: PUSH
4814: LD_EXP 8
4818: PUSH
4819: LD_EXP 9
4823: PUSH
4824: LD_EXP 2
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: DIFF
4839: PPUSH
4840: LD_STRING OthersIn06
4842: PPUSH
4843: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor ] , OthersStayInDelta ) ;
4847: LD_INT 22
4849: PUSH
4850: LD_INT 4
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: LD_INT 2
4859: PUSH
4860: LD_INT 25
4862: PUSH
4863: LD_INT 1
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PUSH
4870: LD_INT 25
4872: PUSH
4873: LD_INT 2
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 25
4882: PUSH
4883: LD_INT 3
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 25
4892: PUSH
4893: LD_INT 4
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PPUSH
4911: CALL_OW 69
4915: PUSH
4916: LD_EXP 14
4920: PUSH
4921: EMPTY
4922: LIST
4923: DIFF
4924: PPUSH
4925: LD_STRING OthersStayInDelta
4927: PPUSH
4928: CALL_OW 38
// end ; end_of_file
4932: LD_VAR 0 1
4936: RET
// on Command ( comandid ) do var i ;
4937: LD_INT 0
4939: PPUSH
// begin if comandid = 65 then
4940: LD_VAR 0 1
4944: PUSH
4945: LD_INT 65
4947: EQUAL
4948: IFFALSE 4989
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
4950: LD_ADDR_VAR 0 2
4954: PUSH
4955: LD_INT 22
4957: PUSH
4958: LD_INT 1
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PUSH
4965: EMPTY
4966: LIST
4967: PPUSH
4968: CALL_OW 69
4972: PUSH
4973: FOR_IN
4974: IFFALSE 4987
// ComStop ( i ) ;
4976: LD_VAR 0 2
4980: PPUSH
4981: CALL_OW 141
4985: GO 4973
4987: POP
4988: POP
// end ;
4989: PPOPN 2
4991: END
// on ApemanTamed ( apeman , human ) do var tmp ;
4992: LD_INT 0
4994: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: LD_INT 22
5002: PUSH
5003: LD_INT 1
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PUSH
5010: LD_INT 21
5012: PUSH
5013: LD_INT 3
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_INT 30
5022: PUSH
5023: LD_INT 0
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5040: LD_VAR 0 1
5044: PPUSH
5045: LD_VAR 0 3
5049: PUSH
5050: LD_INT 1
5052: ARRAY
5053: PPUSH
5054: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5058: LD_VAR 0 1
5062: PPUSH
5063: LD_INT 4
5065: PPUSH
5066: CALL_OW 235
// end ;
5070: PPOPN 3
5072: END
