// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 16
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// apemans = [ ] ;
  23: LD_ADDR_EXP 11
  27: PUSH
  28: EMPTY
  29: ST_TO_ADDR
// yourApemans = [ ] ;
  30: LD_ADDR_EXP 12
  34: PUSH
  35: EMPTY
  36: ST_TO_ADDR
// yourVehicles = [ ] ;
  37: LD_ADDR_EXP 13
  41: PUSH
  42: EMPTY
  43: ST_TO_ADDR
// PrepareDeltaBase ;
  44: CALL 1699 0 0
// LoadVehicles ;
  48: CALL 1141 0 0
// PrepareHeroes ;
  52: CALL 61 0 0
// PrepareRandoms ;
  56: CALL 1396 0 0
// end ; end_of_file
  60: END
// export function PrepareHeroes ; var i , tmp , ape ; begin
  61: LD_INT 0
  63: PPUSH
  64: PPUSH
  65: PPUSH
  66: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
  67: LD_ADDR_VAR 0 3
  71: PUSH
  72: LD_INT 22
  74: PUSH
  75: LD_INT 1
  77: PUSH
  78: EMPTY
  79: LIST
  80: LIST
  81: PUSH
  82: LD_INT 21
  84: PUSH
  85: LD_INT 3
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: PUSH
  92: LD_INT 30
  94: PUSH
  95: LD_INT 0
  97: PUSH
  98: EMPTY
  99: LIST
 100: LIST
 101: PUSH
 102: EMPTY
 103: LIST
 104: LIST
 105: LIST
 106: PPUSH
 107: CALL_OW 69
 111: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 112: LD_VAR 0 3
 116: PUSH
 117: LD_INT 1
 119: ARRAY
 120: PPUSH
 121: LD_STRING delta
 123: PPUSH
 124: CALL_OW 500
// uc_side = 1 ;
 128: LD_ADDR_OWVAR 20
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// uc_nation = 1 ;
 136: LD_ADDR_OWVAR 21
 140: PUSH
 141: LD_INT 1
 143: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 144: LD_ADDR_EXP 1
 148: PUSH
 149: LD_STRING JMM
 151: PPUSH
 152: LD_INT 1
 154: PPUSH
 155: CALL 3428 0 2
 159: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 160: LD_ADDR_EXP 15
 164: PUSH
 165: LD_STRING Harisson
 167: PPUSH
 168: LD_INT 0
 170: PPUSH
 171: CALL 3428 0 2
 175: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 176: LD_EXP 1
 180: PPUSH
 181: LD_VAR 0 3
 185: PUSH
 186: LD_INT 1
 188: ARRAY
 189: PPUSH
 190: CALL_OW 250
 194: PPUSH
 195: LD_VAR 0 3
 199: PUSH
 200: LD_INT 1
 202: ARRAY
 203: PPUSH
 204: CALL_OW 251
 208: PPUSH
 209: LD_INT 5
 211: PPUSH
 212: LD_INT 0
 214: PPUSH
 215: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 219: LD_EXP 1
 223: PPUSH
 224: LD_INT 1
 226: PPUSH
 227: CALL_OW 336
// if LoadVariable ( GladstoneInDelta , 0 ) = 1 then
 231: LD_STRING GladstoneInDelta
 233: PPUSH
 234: LD_INT 0
 236: PPUSH
 237: CALL_OW 30
 241: PUSH
 242: LD_INT 1
 244: EQUAL
 245: IFFALSE 318
// begin Gladstone = PrepareUnit ( Gladstone , true ) ;
 247: LD_ADDR_EXP 2
 251: PUSH
 252: LD_STRING Gladstone
 254: PPUSH
 255: LD_INT 1
 257: PPUSH
 258: CALL 3428 0 2
 262: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 263: LD_EXP 2
 267: PPUSH
 268: LD_VAR 0 3
 272: PUSH
 273: LD_INT 1
 275: ARRAY
 276: PPUSH
 277: CALL_OW 250
 281: PPUSH
 282: LD_VAR 0 3
 286: PUSH
 287: LD_INT 1
 289: ARRAY
 290: PPUSH
 291: CALL_OW 251
 295: PPUSH
 296: LD_INT 5
 298: PPUSH
 299: LD_INT 0
 301: PPUSH
 302: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 306: LD_EXP 2
 310: PPUSH
 311: LD_INT 4
 313: PPUSH
 314: CALL_OW 336
// end ; if LoadVariable ( DenisInDelta , 0 ) = 1 then
 318: LD_STRING DenisInDelta
 320: PPUSH
 321: LD_INT 0
 323: PPUSH
 324: CALL_OW 30
 328: PUSH
 329: LD_INT 1
 331: EQUAL
 332: IFFALSE 405
// begin Denis = PrepareUnit ( Denis , true ) ;
 334: LD_ADDR_EXP 3
 338: PUSH
 339: LD_STRING Denis
 341: PPUSH
 342: LD_INT 1
 344: PPUSH
 345: CALL 3428 0 2
 349: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 350: LD_EXP 3
 354: PPUSH
 355: LD_VAR 0 3
 359: PUSH
 360: LD_INT 1
 362: ARRAY
 363: PPUSH
 364: CALL_OW 250
 368: PPUSH
 369: LD_VAR 0 3
 373: PUSH
 374: LD_INT 1
 376: ARRAY
 377: PPUSH
 378: CALL_OW 251
 382: PPUSH
 383: LD_INT 5
 385: PPUSH
 386: LD_INT 0
 388: PPUSH
 389: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 393: LD_EXP 3
 397: PPUSH
 398: LD_INT 4
 400: PPUSH
 401: CALL_OW 336
// end ; if LoadVariable ( FrankInDelta , 0 ) = 1 then
 405: LD_STRING FrankInDelta
 407: PPUSH
 408: LD_INT 0
 410: PPUSH
 411: CALL_OW 30
 415: PUSH
 416: LD_INT 1
 418: EQUAL
 419: IFFALSE 492
// begin Frank = PrepareUnit ( Frank , true ) ;
 421: LD_ADDR_EXP 5
 425: PUSH
 426: LD_STRING Frank
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: CALL 3428 0 2
 436: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 437: LD_EXP 5
 441: PPUSH
 442: LD_VAR 0 3
 446: PUSH
 447: LD_INT 1
 449: ARRAY
 450: PPUSH
 451: CALL_OW 250
 455: PPUSH
 456: LD_VAR 0 3
 460: PUSH
 461: LD_INT 1
 463: ARRAY
 464: PPUSH
 465: CALL_OW 251
 469: PPUSH
 470: LD_INT 5
 472: PPUSH
 473: LD_INT 0
 475: PPUSH
 476: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 480: LD_EXP 5
 484: PPUSH
 485: LD_INT 1
 487: PPUSH
 488: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 492: LD_STRING LisaInDelta
 494: PPUSH
 495: LD_INT 0
 497: PPUSH
 498: CALL_OW 30
 502: PUSH
 503: LD_INT 1
 505: EQUAL
 506: IFFALSE 579
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 508: LD_ADDR_EXP 4
 512: PUSH
 513: LD_STRING Lisa
 515: PPUSH
 516: LD_INT 1
 518: PPUSH
 519: CALL 3428 0 2
 523: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 524: LD_EXP 4
 528: PPUSH
 529: LD_VAR 0 3
 533: PUSH
 534: LD_INT 1
 536: ARRAY
 537: PPUSH
 538: CALL_OW 250
 542: PPUSH
 543: LD_VAR 0 3
 547: PUSH
 548: LD_INT 1
 550: ARRAY
 551: PPUSH
 552: CALL_OW 251
 556: PPUSH
 557: LD_INT 5
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 567: LD_EXP 4
 571: PPUSH
 572: LD_INT 1
 574: PPUSH
 575: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 579: LD_STRING BobbyInDelta
 581: PPUSH
 582: LD_INT 0
 584: PPUSH
 585: CALL_OW 30
 589: PUSH
 590: LD_INT 1
 592: EQUAL
 593: IFFALSE 666
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 595: LD_ADDR_EXP 6
 599: PUSH
 600: LD_STRING Bobby
 602: PPUSH
 603: LD_INT 1
 605: PPUSH
 606: CALL 3428 0 2
 610: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 611: LD_EXP 6
 615: PPUSH
 616: LD_VAR 0 3
 620: PUSH
 621: LD_INT 1
 623: ARRAY
 624: PPUSH
 625: CALL_OW 250
 629: PPUSH
 630: LD_VAR 0 3
 634: PUSH
 635: LD_INT 1
 637: ARRAY
 638: PPUSH
 639: CALL_OW 251
 643: PPUSH
 644: LD_INT 5
 646: PPUSH
 647: LD_INT 0
 649: PPUSH
 650: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 654: LD_EXP 6
 658: PPUSH
 659: LD_INT 1
 661: PPUSH
 662: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 666: LD_STRING CyrusInDelta
 668: PPUSH
 669: LD_INT 0
 671: PPUSH
 672: CALL_OW 30
 676: PUSH
 677: LD_INT 1
 679: EQUAL
 680: IFFALSE 753
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 682: LD_ADDR_EXP 7
 686: PUSH
 687: LD_STRING Cyrus
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: CALL 3428 0 2
 697: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 698: LD_EXP 7
 702: PPUSH
 703: LD_VAR 0 3
 707: PUSH
 708: LD_INT 1
 710: ARRAY
 711: PPUSH
 712: CALL_OW 250
 716: PPUSH
 717: LD_VAR 0 3
 721: PUSH
 722: LD_INT 1
 724: ARRAY
 725: PPUSH
 726: CALL_OW 251
 730: PPUSH
 731: LD_INT 5
 733: PPUSH
 734: LD_INT 0
 736: PPUSH
 737: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 741: LD_EXP 7
 745: PPUSH
 746: LD_INT 1
 748: PPUSH
 749: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 753: LD_STRING DonaldsonInDelta
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 30
 763: PUSH
 764: LD_INT 1
 766: EQUAL
 767: IFFALSE 840
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 769: LD_ADDR_EXP 9
 773: PUSH
 774: LD_STRING Donaldson
 776: PPUSH
 777: LD_INT 1
 779: PPUSH
 780: CALL 3428 0 2
 784: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 785: LD_EXP 9
 789: PPUSH
 790: LD_VAR 0 3
 794: PUSH
 795: LD_INT 1
 797: ARRAY
 798: PPUSH
 799: CALL_OW 250
 803: PPUSH
 804: LD_VAR 0 3
 808: PUSH
 809: LD_INT 1
 811: ARRAY
 812: PPUSH
 813: CALL_OW 251
 817: PPUSH
 818: LD_INT 5
 820: PPUSH
 821: LD_INT 0
 823: PPUSH
 824: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
 828: LD_EXP 9
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
 840: LD_STRING BrownInDelta
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 30
 850: PUSH
 851: LD_INT 1
 853: EQUAL
 854: IFFALSE 927
// begin Brown = PrepareUnit ( Brown , true ) ;
 856: LD_ADDR_EXP 8
 860: PUSH
 861: LD_STRING Brown
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: CALL 3428 0 2
 871: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 872: LD_EXP 8
 876: PPUSH
 877: LD_VAR 0 3
 881: PUSH
 882: LD_INT 1
 884: ARRAY
 885: PPUSH
 886: CALL_OW 250
 890: PPUSH
 891: LD_VAR 0 3
 895: PUSH
 896: LD_INT 1
 898: ARRAY
 899: PPUSH
 900: CALL_OW 251
 904: PPUSH
 905: LD_INT 5
 907: PPUSH
 908: LD_INT 0
 910: PPUSH
 911: CALL_OW 50
// SetClass ( Brown , 2 ) ;
 915: LD_EXP 8
 919: PPUSH
 920: LD_INT 2
 922: PPUSH
 923: CALL_OW 336
// end ; others = CreateCharacter ( othersInDelta ) ;
 927: LD_ADDR_EXP 10
 931: PUSH
 932: LD_STRING othersInDelta
 934: PPUSH
 935: CALL_OW 34
 939: ST_TO_ADDR
// for i in others do
 940: LD_ADDR_VAR 0 2
 944: PUSH
 945: LD_EXP 10
 949: PUSH
 950: FOR_IN
 951: IFFALSE 1037
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
 953: LD_VAR 0 2
 957: PPUSH
 958: LD_VAR 0 3
 962: PUSH
 963: LD_INT 1
 965: ARRAY
 966: PPUSH
 967: CALL_OW 250
 971: PPUSH
 972: LD_VAR 0 3
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: CALL_OW 251
 985: PPUSH
 986: LD_INT 35
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 50
// SetClass ( i , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] ) ;
 996: LD_VAR 0 2
1000: PPUSH
1001: LD_INT 1
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: LD_INT 3
1009: PUSH
1010: LD_INT 4
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: PUSH
1019: LD_INT 1
1021: PPUSH
1022: LD_INT 4
1024: PPUSH
1025: CALL_OW 12
1029: ARRAY
1030: PPUSH
1031: CALL_OW 336
// end ;
1035: GO 950
1037: POP
1038: POP
// apemans = CreateCharacter ( apeInDelta ) ;
1039: LD_ADDR_EXP 11
1043: PUSH
1044: LD_STRING apeInDelta
1046: PPUSH
1047: CALL_OW 34
1051: ST_TO_ADDR
// uc_nation = 0 ;
1052: LD_ADDR_OWVAR 21
1056: PUSH
1057: LD_INT 0
1059: ST_TO_ADDR
// for i in apemans do
1060: LD_ADDR_VAR 0 2
1064: PUSH
1065: LD_EXP 11
1069: PUSH
1070: FOR_IN
1071: IFFALSE 1134
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1073: LD_VAR 0 2
1077: PPUSH
1078: LD_VAR 0 3
1082: PUSH
1083: LD_INT 1
1085: ARRAY
1086: PPUSH
1087: CALL_OW 250
1091: PPUSH
1092: LD_VAR 0 3
1096: PUSH
1097: LD_INT 1
1099: ARRAY
1100: PPUSH
1101: CALL_OW 251
1105: PPUSH
1106: LD_INT 50
1108: PPUSH
1109: LD_INT 0
1111: PPUSH
1112: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1116: LD_ADDR_EXP 12
1120: PUSH
1121: LD_EXP 12
1125: PUSH
1126: LD_VAR 0 2
1130: ADD
1131: ST_TO_ADDR
// end ;
1132: GO 1070
1134: POP
1135: POP
// end ;
1136: LD_VAR 0 1
1140: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1141: LD_INT 0
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
1147: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1148: LD_ADDR_VAR 0 4
1152: PUSH
1153: LD_INT 22
1155: PUSH
1156: LD_INT 1
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 21
1165: PUSH
1166: LD_INT 3
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: PUSH
1173: LD_INT 30
1175: PUSH
1176: LD_INT 0
1178: PUSH
1179: EMPTY
1180: LIST
1181: LIST
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: PPUSH
1188: CALL_OW 69
1192: ST_TO_ADDR
// uc_side = 1 ;
1193: LD_ADDR_OWVAR 20
1197: PUSH
1198: LD_INT 1
1200: ST_TO_ADDR
// uc_nation = 1 ;
1201: LD_ADDR_OWVAR 21
1205: PUSH
1206: LD_INT 1
1208: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1209: LD_ADDR_VAR 0 5
1213: PUSH
1214: LD_STRING vehiclesInDelta
1216: PPUSH
1217: EMPTY
1218: PPUSH
1219: CALL_OW 30
1223: ST_TO_ADDR
// for i = 1 to 15 do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 15
1236: PUSH
1237: FOR_TO
1238: IFFALSE 1389
// begin vc_chassis = vehicles [ i + 1 ] ;
1240: LD_ADDR_OWVAR 37
1244: PUSH
1245: LD_VAR 0 5
1249: PUSH
1250: LD_VAR 0 2
1254: PUSH
1255: LD_INT 1
1257: PLUS
1258: ARRAY
1259: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1260: LD_ADDR_OWVAR 39
1264: PUSH
1265: LD_VAR 0 5
1269: PUSH
1270: LD_VAR 0 2
1274: PUSH
1275: LD_INT 2
1277: PLUS
1278: ARRAY
1279: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1280: LD_ADDR_OWVAR 38
1284: PUSH
1285: LD_VAR 0 5
1289: PUSH
1290: LD_VAR 0 2
1294: PUSH
1295: LD_INT 3
1297: PLUS
1298: ARRAY
1299: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1300: LD_ADDR_OWVAR 40
1304: PUSH
1305: LD_VAR 0 5
1309: PUSH
1310: LD_VAR 0 2
1314: PUSH
1315: LD_INT 4
1317: PLUS
1318: ARRAY
1319: ST_TO_ADDR
// i = i + 4 ;
1320: LD_ADDR_VAR 0 2
1324: PUSH
1325: LD_VAR 0 2
1329: PUSH
1330: LD_INT 4
1332: PLUS
1333: ST_TO_ADDR
// veh = CreateVehicle ;
1334: LD_ADDR_VAR 0 3
1338: PUSH
1339: CALL_OW 45
1343: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 20 , false ) ;
1344: LD_VAR 0 3
1348: PPUSH
1349: LD_VAR 0 4
1353: PUSH
1354: LD_INT 1
1356: ARRAY
1357: PPUSH
1358: CALL_OW 250
1362: PPUSH
1363: LD_VAR 0 4
1367: PUSH
1368: LD_INT 1
1370: ARRAY
1371: PPUSH
1372: CALL_OW 251
1376: PPUSH
1377: LD_INT 20
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL_OW 50
// end ;
1387: GO 1237
1389: POP
1390: POP
// end ;
1391: LD_VAR 0 1
1395: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
1396: LD_INT 0
1398: PPUSH
1399: PPUSH
1400: PPUSH
1401: PPUSH
// uc_side = 1 ;
1402: LD_ADDR_OWVAR 20
1406: PUSH
1407: LD_INT 1
1409: ST_TO_ADDR
// uc_nation = 1 ;
1410: LD_ADDR_OWVAR 21
1414: PUSH
1415: LD_INT 1
1417: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1418: LD_ADDR_VAR 0 4
1422: PUSH
1423: LD_INT 22
1425: PUSH
1426: LD_INT 1
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: PUSH
1433: LD_INT 21
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: EMPTY
1440: LIST
1441: LIST
1442: PUSH
1443: LD_INT 30
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: PPUSH
1458: CALL_OW 69
1462: ST_TO_ADDR
// for i = 1 to 6 + Difficulty do
1463: LD_ADDR_VAR 0 2
1467: PUSH
1468: DOUBLE
1469: LD_INT 1
1471: DEC
1472: ST_TO_ADDR
1473: LD_INT 6
1475: PUSH
1476: LD_OWVAR 67
1480: PLUS
1481: PUSH
1482: FOR_TO
1483: IFFALSE 1610
// begin hc_gallery =  ;
1485: LD_ADDR_OWVAR 33
1489: PUSH
1490: LD_STRING 
1492: ST_TO_ADDR
// hc_name =  ;
1493: LD_ADDR_OWVAR 26
1497: PUSH
1498: LD_STRING 
1500: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) - Difficulty ) ;
1501: LD_INT 0
1503: PPUSH
1504: LD_INT 1
1506: PUSH
1507: LD_INT 2
1509: PUSH
1510: LD_INT 3
1512: PUSH
1513: LD_INT 4
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 1
1524: PPUSH
1525: LD_INT 4
1527: PPUSH
1528: CALL_OW 12
1532: ARRAY
1533: PPUSH
1534: LD_INT 3
1536: PPUSH
1537: LD_INT 5
1539: PPUSH
1540: CALL_OW 12
1544: PUSH
1545: LD_OWVAR 67
1549: MINUS
1550: PPUSH
1551: CALL_OW 380
// un = CreateHuman ;
1555: LD_ADDR_VAR 0 3
1559: PUSH
1560: CALL_OW 44
1564: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1565: LD_VAR 0 3
1569: PPUSH
1570: LD_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: ARRAY
1578: PPUSH
1579: CALL_OW 250
1583: PPUSH
1584: LD_VAR 0 4
1588: PUSH
1589: LD_INT 1
1591: ARRAY
1592: PPUSH
1593: CALL_OW 251
1597: PPUSH
1598: LD_INT 15
1600: PPUSH
1601: LD_INT 0
1603: PPUSH
1604: CALL_OW 50
// end ;
1608: GO 1482
1610: POP
1611: POP
// hc_gallery =  ;
1612: LD_ADDR_OWVAR 33
1616: PUSH
1617: LD_STRING 
1619: ST_TO_ADDR
// hc_name = Dr. Michael Mills ;
1620: LD_ADDR_OWVAR 26
1624: PUSH
1625: LD_STRING Dr. Michael Mills
1627: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
1628: LD_INT 1
1630: PPUSH
1631: LD_INT 4
1633: PPUSH
1634: LD_INT 6
1636: PPUSH
1637: CALL_OW 380
// deltaDoctor = CreateHuman ;
1641: LD_ADDR_EXP 14
1645: PUSH
1646: CALL_OW 44
1650: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1651: LD_EXP 14
1655: PPUSH
1656: LD_VAR 0 4
1660: PUSH
1661: LD_INT 1
1663: ARRAY
1664: PPUSH
1665: CALL_OW 250
1669: PPUSH
1670: LD_VAR 0 4
1674: PUSH
1675: LD_INT 1
1677: ARRAY
1678: PPUSH
1679: CALL_OW 251
1683: PPUSH
1684: LD_INT 5
1686: PPUSH
1687: LD_INT 0
1689: PPUSH
1690: CALL_OW 50
// end ; end_of_file
1694: LD_VAR 0 1
1698: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
1699: LD_INT 0
1701: PPUSH
1702: PPUSH
1703: PPUSH
1704: PPUSH
1705: PPUSH
1706: PPUSH
1707: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
1708: LD_ADDR_VAR 0 5
1712: PUSH
1713: LD_STRING buildingsInDelta
1715: PPUSH
1716: EMPTY
1717: PPUSH
1718: CALL_OW 30
1722: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
1723: LD_INT 68
1725: PPUSH
1726: LD_INT 40
1728: PPUSH
1729: LD_INT 1
1731: PPUSH
1732: CALL_OW 441
// uc_side = 1 ;
1736: LD_ADDR_OWVAR 20
1740: PUSH
1741: LD_INT 1
1743: ST_TO_ADDR
// uc_nation = 1 ;
1744: LD_ADDR_OWVAR 21
1748: PUSH
1749: LD_INT 1
1751: ST_TO_ADDR
// for i = 1 to buildings do
1752: LD_ADDR_VAR 0 2
1756: PUSH
1757: DOUBLE
1758: LD_INT 1
1760: DEC
1761: ST_TO_ADDR
1762: LD_VAR 0 5
1766: PUSH
1767: FOR_TO
1768: IFFALSE 1988
// begin for j := 1 to buildings do
1770: LD_ADDR_VAR 0 3
1774: PUSH
1775: DOUBLE
1776: LD_INT 1
1778: DEC
1779: ST_TO_ADDR
1780: LD_VAR 0 5
1784: PUSH
1785: FOR_TO
1786: IFFALSE 1984
// begin bc_type = buildings [ i ] [ 1 ] ;
1788: LD_ADDR_OWVAR 42
1792: PUSH
1793: LD_VAR 0 5
1797: PUSH
1798: LD_VAR 0 2
1802: ARRAY
1803: PUSH
1804: LD_INT 1
1806: ARRAY
1807: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
1808: LD_ADDR_OWVAR 43
1812: PUSH
1813: LD_VAR 0 5
1817: PUSH
1818: LD_VAR 0 2
1822: ARRAY
1823: PUSH
1824: LD_INT 2
1826: ARRAY
1827: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
1828: LD_OWVAR 42
1832: PUSH
1833: LD_INT 7
1835: EQUAL
1836: PUSH
1837: LD_OWVAR 42
1841: PUSH
1842: LD_INT 8
1844: EQUAL
1845: OR
1846: IFFALSE 1888
// begin bc_kind1 = buildings [ i ] [ 6 ] ;
1848: LD_ADDR_OWVAR 44
1852: PUSH
1853: LD_VAR 0 5
1857: PUSH
1858: LD_VAR 0 2
1862: ARRAY
1863: PUSH
1864: LD_INT 6
1866: ARRAY
1867: ST_TO_ADDR
// bc_kind2 = buildings [ i ] [ 7 ] ;
1868: LD_ADDR_OWVAR 45
1872: PUSH
1873: LD_VAR 0 5
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PUSH
1884: LD_INT 7
1886: ARRAY
1887: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
1888: LD_ADDR_VAR 0 4
1892: PUSH
1893: LD_VAR 0 5
1897: PUSH
1898: LD_VAR 0 2
1902: ARRAY
1903: PUSH
1904: LD_INT 3
1906: ARRAY
1907: PPUSH
1908: LD_VAR 0 5
1912: PUSH
1913: LD_VAR 0 2
1917: ARRAY
1918: PUSH
1919: LD_INT 4
1921: ARRAY
1922: PPUSH
1923: LD_VAR 0 5
1927: PUSH
1928: LD_VAR 0 2
1932: ARRAY
1933: PUSH
1934: LD_INT 5
1936: ARRAY
1937: PPUSH
1938: CALL_OW 47
1942: ST_TO_ADDR
// if GetBType ( bc_type = b_bunker ) then
1943: LD_OWVAR 42
1947: PUSH
1948: LD_INT 32
1950: EQUAL
1951: PPUSH
1952: CALL_OW 266
1956: IFFALSE 1982
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
1958: LD_VAR 0 4
1962: PPUSH
1963: LD_VAR 0 5
1967: PUSH
1968: LD_VAR 0 2
1972: ARRAY
1973: PUSH
1974: LD_INT 8
1976: ARRAY
1977: PPUSH
1978: CALL_OW 431
// end ;
1982: GO 1785
1984: POP
1985: POP
// end ;
1986: GO 1767
1988: POP
1989: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1990: LD_ADDR_VAR 0 6
1994: PUSH
1995: LD_INT 22
1997: PUSH
1998: LD_INT 1
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: PUSH
2005: LD_INT 2
2007: PUSH
2008: LD_INT 30
2010: PUSH
2011: LD_INT 6
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 30
2020: PUSH
2021: LD_INT 7
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 30
2030: PUSH
2031: LD_INT 8
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PPUSH
2048: CALL_OW 69
2052: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2053: LD_ADDR_VAR 0 7
2057: PUSH
2058: LD_INT 22
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: PUSH
2068: LD_INT 30
2070: PUSH
2071: LD_INT 0
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PPUSH
2082: CALL_OW 69
2086: ST_TO_ADDR
// if lab > 0 and lab > 0 then
2087: LD_VAR 0 6
2091: PUSH
2092: LD_INT 0
2094: GREATER
2095: PUSH
2096: LD_VAR 0 6
2100: PUSH
2101: LD_INT 0
2103: GREATER
2104: AND
2105: IFFALSE 2115
// baseCorrect = 1 ;
2107: LD_ADDR_EXP 16
2111: PUSH
2112: LD_INT 1
2114: ST_TO_ADDR
// if baseCorrect = 0 then
2115: LD_EXP 16
2119: PUSH
2120: LD_INT 0
2122: EQUAL
2123: IFFALSE 2496
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2125: LD_ADDR_VAR 0 2
2129: PUSH
2130: LD_INT 22
2132: PUSH
2133: LD_INT 1
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 21
2142: PUSH
2143: LD_INT 3
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PPUSH
2154: CALL_OW 69
2158: PUSH
2159: FOR_IN
2160: IFFALSE 2173
// RemoveUnit ( i ) ;
2162: LD_VAR 0 2
2166: PPUSH
2167: CALL_OW 64
2171: GO 2159
2173: POP
2174: POP
// uc_nation = 1 ;
2175: LD_ADDR_OWVAR 21
2179: PUSH
2180: LD_INT 1
2182: ST_TO_ADDR
// uc_side = 1 ;
2183: LD_ADDR_OWVAR 20
2187: PUSH
2188: LD_INT 1
2190: ST_TO_ADDR
// bc_level = 5 ;
2191: LD_ADDR_OWVAR 43
2195: PUSH
2196: LD_INT 5
2198: ST_TO_ADDR
// bc_type = b_depot ;
2199: LD_ADDR_OWVAR 42
2203: PUSH
2204: LD_INT 0
2206: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2207: LD_INT 50
2209: PPUSH
2210: LD_INT 22
2212: PPUSH
2213: LD_INT 0
2215: PPUSH
2216: CALL_OW 47
// bc_type = b_bunker ;
2220: LD_ADDR_OWVAR 42
2224: PUSH
2225: LD_INT 32
2227: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2228: LD_ADDR_VAR 0 4
2232: PUSH
2233: LD_INT 68
2235: PPUSH
2236: LD_INT 24
2238: PPUSH
2239: LD_INT 4
2241: PPUSH
2242: CALL_OW 47
2246: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2247: LD_VAR 0 4
2251: PPUSH
2252: LD_INT 4
2254: PUSH
2255: LD_INT 11
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PUSH
2262: LD_INT 1
2264: PPUSH
2265: LD_INT 2
2267: PPUSH
2268: CALL_OW 12
2272: ARRAY
2273: PPUSH
2274: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2278: LD_ADDR_VAR 0 4
2282: PUSH
2283: LD_INT 71
2285: PPUSH
2286: LD_INT 34
2288: PPUSH
2289: LD_INT 4
2291: PPUSH
2292: CALL_OW 47
2296: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2297: LD_VAR 0 4
2301: PPUSH
2302: LD_INT 4
2304: PUSH
2305: LD_INT 11
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: PUSH
2312: LD_INT 1
2314: PPUSH
2315: LD_INT 2
2317: PPUSH
2318: CALL_OW 12
2322: ARRAY
2323: PPUSH
2324: CALL_OW 431
// bc_type = 31 ;
2328: LD_ADDR_OWVAR 42
2332: PUSH
2333: LD_INT 31
2335: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
2336: LD_INT 51
2338: PPUSH
2339: LD_INT 7
2341: PPUSH
2342: LD_INT 3
2344: PPUSH
2345: CALL_OW 47
// bc_type = b_oil_mine ;
2349: LD_ADDR_OWVAR 42
2353: PUSH
2354: LD_INT 29
2356: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
2357: LD_INT 68
2359: PPUSH
2360: LD_INT 40
2362: PPUSH
2363: LD_INT 1
2365: PPUSH
2366: CALL_OW 47
// bc_type = b_workshop ;
2370: LD_ADDR_OWVAR 42
2374: PUSH
2375: LD_INT 2
2377: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2378: LD_INT 38
2380: PPUSH
2381: LD_INT 20
2383: PPUSH
2384: LD_INT 2
2386: PPUSH
2387: CALL_OW 47
// bc_type = b_armoury ;
2391: LD_ADDR_OWVAR 42
2395: PUSH
2396: LD_INT 4
2398: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2399: LD_INT 38
2401: PPUSH
2402: LD_INT 20
2404: PPUSH
2405: LD_INT 2
2407: PPUSH
2408: CALL_OW 47
// bc_type = b_solar_power ;
2412: LD_ADDR_OWVAR 42
2416: PUSH
2417: LD_INT 27
2419: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
2420: LD_INT 46
2422: PPUSH
2423: LD_INT 12
2425: PPUSH
2426: LD_INT 1
2428: PPUSH
2429: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
2433: LD_INT 48
2435: PPUSH
2436: LD_INT 11
2438: PPUSH
2439: LD_INT 2
2441: PPUSH
2442: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
2446: LD_INT 49
2448: PPUSH
2449: LD_INT 11
2451: PPUSH
2452: LD_INT 3
2454: PPUSH
2455: CALL_OW 47
// bc_type = b_lab_half ;
2459: LD_ADDR_OWVAR 42
2463: PUSH
2464: LD_INT 7
2466: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
2467: LD_ADDR_OWVAR 44
2471: PUSH
2472: LD_INT 15
2474: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2475: LD_ADDR_OWVAR 45
2479: PUSH
2480: LD_INT 9
2482: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
2483: LD_INT 42
2485: PPUSH
2486: LD_INT 15
2488: PPUSH
2489: LD_INT 2
2491: PPUSH
2492: CALL_OW 47
// end ; end ; end_of_file
2496: LD_VAR 0 1
2500: RET
// every 1 do var i , j , lab , tmp ;
2501: GO 2503
2503: DISABLE
2504: LD_INT 0
2506: PPUSH
2507: PPUSH
2508: PPUSH
2509: PPUSH
// begin lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2510: LD_ADDR_VAR 0 3
2514: PUSH
2515: LD_INT 22
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: LD_INT 2
2527: PUSH
2528: LD_INT 30
2530: PUSH
2531: LD_INT 6
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: PUSH
2538: LD_INT 30
2540: PUSH
2541: LD_INT 7
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PUSH
2548: LD_INT 30
2550: PUSH
2551: LD_INT 8
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: PPUSH
2568: CALL_OW 69
2572: ST_TO_ADDR
// InGameOn ;
2573: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
2577: LD_VAR 0 3
2581: PUSH
2582: LD_INT 1
2584: ARRAY
2585: PPUSH
2586: CALL_OW 87
// if IsOK ( Denis ) then
2590: LD_EXP 3
2594: PPUSH
2595: CALL_OW 302
2599: IFFALSE 2627
// begin SetTech ( tech_radar , 1 , state_researched ) ;
2601: LD_INT 6
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: LD_INT 2
2609: PPUSH
2610: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
2614: LD_INT 20
2616: PPUSH
2617: LD_INT 1
2619: PPUSH
2620: LD_INT 1
2622: PPUSH
2623: CALL_OW 324
// end ; ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
2627: LD_EXP 1
2631: PUSH
2632: LD_EXP 14
2636: PUSH
2637: LD_EXP 3
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: LIST
2646: PPUSH
2647: LD_VAR 0 3
2651: PUSH
2652: LD_INT 1
2654: ARRAY
2655: PPUSH
2656: CALL_OW 120
// Say ( JMM , D1-JMM-1 ) ;
2660: LD_EXP 1
2664: PPUSH
2665: LD_STRING D1-JMM-1
2667: PPUSH
2668: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
2672: LD_EXP 14
2676: PPUSH
2677: LD_STRING D1-Sci-1
2679: PPUSH
2680: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
2684: LD_EXP 1
2688: PPUSH
2689: LD_STRING D1-JMM-2
2691: PPUSH
2692: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
2696: LD_EXP 14
2700: PPUSH
2701: LD_STRING D1-Sci-2
2703: PPUSH
2704: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
2708: LD_EXP 1
2712: PPUSH
2713: LD_STRING D1-JMM-3
2715: PPUSH
2716: CALL_OW 88
// if IsOK ( Denis ) then
2720: LD_EXP 3
2724: PPUSH
2725: CALL_OW 302
2729: IFFALSE 2745
// Say ( DeltaDoctor , D1-Sci-3 ) else
2731: LD_EXP 14
2735: PPUSH
2736: LD_STRING D1-Sci-3
2738: PPUSH
2739: CALL_OW 88
2743: GO 2757
// Say ( DeltaDoctor , D1-Sci-3a ) ;
2745: LD_EXP 14
2749: PPUSH
2750: LD_STRING D1-Sci-3a
2752: PPUSH
2753: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
2757: LD_EXP 1
2761: PPUSH
2762: LD_STRING D1-JMM-4
2764: PPUSH
2765: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
2769: LD_ADDR_VAR 0 4
2773: PUSH
2774: LD_INT 22
2776: PUSH
2777: LD_INT 1
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: LD_INT 25
2786: PUSH
2787: LD_INT 4
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: PUSH
2794: LD_INT 3
2796: PUSH
2797: LD_INT 54
2799: PUSH
2800: EMPTY
2801: LIST
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: LIST
2811: PPUSH
2812: CALL_OW 69
2816: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
2817: LD_ADDR_VAR 0 1
2821: PUSH
2822: LD_INT 22
2824: PUSH
2825: LD_INT 0
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PPUSH
2832: CALL_OW 69
2836: PUSH
2837: FOR_IN
2838: IFFALSE 2888
// for j in tmp do
2840: LD_ADDR_VAR 0 2
2844: PUSH
2845: LD_VAR 0 4
2849: PUSH
2850: FOR_IN
2851: IFFALSE 2884
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
2853: LD_VAR 0 2
2857: PPUSH
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL_OW 250
2867: PPUSH
2868: LD_VAR 0 1
2872: PPUSH
2873: CALL_OW 251
2877: PPUSH
2878: CALL_OW 191
2882: GO 2850
2884: POP
2885: POP
2886: GO 2837
2888: POP
2889: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
2890: LD_EXP 14
2894: PPUSH
2895: LD_STRING D1-Sci-4
2897: PPUSH
2898: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
2902: LD_EXP 1
2906: PPUSH
2907: LD_STRING D1-JMM-5
2909: PPUSH
2910: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
2914: LD_EXP 14
2918: PPUSH
2919: LD_STRING D1-Sci-5
2921: PPUSH
2922: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
2926: LD_EXP 1
2930: PPUSH
2931: LD_STRING D1-JMM-6
2933: PPUSH
2934: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
2938: LD_EXP 15
2942: PPUSH
2943: LD_STRING D1-Har-6
2945: PPUSH
2946: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
2950: LD_EXP 1
2954: PPUSH
2955: LD_STRING D1-JMM-7
2957: PPUSH
2958: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
2962: LD_EXP 15
2966: PPUSH
2967: LD_STRING D1-Har-7
2969: PPUSH
2970: CALL_OW 94
// if IsOK ( Denis ) then
2974: LD_EXP 3
2978: PPUSH
2979: CALL_OW 302
2983: IFFALSE 2997
// Say ( JMM , D1-JMM-8 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_STRING D1-JMM-8
2992: PPUSH
2993: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
2997: LD_EXP 1
3001: PPUSH
3002: LD_STRING D1-JMM-8a
3004: PPUSH
3005: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3009: LD_EXP 15
3013: PPUSH
3014: LD_STRING D1-Har-8
3016: PPUSH
3017: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3021: LD_EXP 1
3025: PPUSH
3026: LD_STRING D1-JMM-9
3028: PPUSH
3029: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3033: LD_EXP 15
3037: PPUSH
3038: LD_STRING D1-Har-9
3040: PPUSH
3041: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3045: LD_EXP 1
3049: PPUSH
3050: LD_STRING D1-JMM-10
3052: PPUSH
3053: CALL_OW 88
// if IsOK ( Denis ) then
3057: LD_EXP 3
3061: PPUSH
3062: CALL_OW 302
3066: IFFALSE 3080
// Say ( JMM , D1-JMM-10a ) ;
3068: LD_EXP 1
3072: PPUSH
3073: LD_STRING D1-JMM-10a
3075: PPUSH
3076: CALL_OW 88
// SelectAndSaveCharacters ;
3080: CALL 3485 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3084: LD_VAR 0 3
3088: PUSH
3089: LD_INT 1
3091: ARRAY
3092: PPUSH
3093: CALL_OW 274
3097: PPUSH
3098: LD_INT 1
3100: PPUSH
3101: LD_INT 250
3103: PPUSH
3104: CALL_OW 277
// InGameOff ;
3108: CALL_OW 9
// Query ( Q1 ) ;
3112: LD_STRING Q1
3114: PPUSH
3115: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3119: LD_INT 3
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: CALL_OW 424
// end ;
3129: PPOPN 4
3131: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i ;
3132: LD_INT 3
3134: PPUSH
3135: LD_INT 22
3137: PUSH
3138: LD_INT 1
3140: PUSH
3141: EMPTY
3142: LIST
3143: LIST
3144: PUSH
3145: LD_INT 21
3147: PUSH
3148: LD_INT 1
3150: PUSH
3151: EMPTY
3152: LIST
3153: LIST
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PPUSH
3159: CALL_OW 71
3163: PUSH
3164: LD_INT 0
3166: EQUAL
3167: IFFALSE 3425
3169: GO 3171
3171: DISABLE
3172: LD_INT 0
3174: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) > 0 then
3175: LD_INT 3
3177: PPUSH
3178: LD_INT 21
3180: PUSH
3181: LD_INT 2
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: EMPTY
3189: LIST
3190: PPUSH
3191: CALL_OW 70
3195: PUSH
3196: LD_INT 0
3198: GREATER
3199: IFFALSE 3415
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) do
3201: LD_ADDR_VAR 0 1
3205: PUSH
3206: LD_INT 3
3208: PPUSH
3209: LD_INT 21
3211: PUSH
3212: LD_INT 2
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PUSH
3219: EMPTY
3220: LIST
3221: PPUSH
3222: CALL_OW 70
3226: PUSH
3227: FOR_IN
3228: IFFALSE 3401
// begin if GetWeapon ( i ) = us_cargo_bay then
3230: LD_VAR 0 1
3234: PPUSH
3235: CALL_OW 264
3239: PUSH
3240: LD_INT 12
3242: EQUAL
3243: IFFALSE 3339
// begin yourVehicles = yourVehicles ^ [ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetCargoType ( i ) , GetCargo ( i , GetCargoType ( i ) ) ] ] ;
3245: LD_ADDR_EXP 13
3249: PUSH
3250: LD_EXP 13
3254: PUSH
3255: LD_VAR 0 1
3259: PPUSH
3260: CALL_OW 265
3264: PUSH
3265: LD_VAR 0 1
3269: PPUSH
3270: CALL_OW 262
3274: PUSH
3275: LD_VAR 0 1
3279: PPUSH
3280: CALL_OW 263
3284: PUSH
3285: LD_VAR 0 1
3289: PPUSH
3290: CALL_OW 264
3294: PUSH
3295: LD_VAR 0 1
3299: PPUSH
3300: CALL_OW 288
3304: PUSH
3305: LD_VAR 0 1
3309: PPUSH
3310: LD_VAR 0 1
3314: PPUSH
3315: CALL_OW 288
3319: PPUSH
3320: CALL_OW 289
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: PUSH
3333: EMPTY
3334: LIST
3335: ADD
3336: ST_TO_ADDR
// end else
3337: GO 3399
// begin yourVehicles = yourVehicles ^ [ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
3339: LD_ADDR_EXP 13
3343: PUSH
3344: LD_EXP 13
3348: PUSH
3349: LD_VAR 0 1
3353: PPUSH
3354: CALL_OW 265
3358: PUSH
3359: LD_VAR 0 1
3363: PPUSH
3364: CALL_OW 262
3368: PUSH
3369: LD_VAR 0 1
3373: PPUSH
3374: CALL_OW 263
3378: PUSH
3379: LD_VAR 0 1
3383: PPUSH
3384: CALL_OW 264
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: PUSH
3395: EMPTY
3396: LIST
3397: ADD
3398: ST_TO_ADDR
// end ; end ;
3399: GO 3227
3401: POP
3402: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
3403: LD_EXP 13
3407: PPUSH
3408: LD_STRING 06_VehiclesIn06_1
3410: PPUSH
3411: CALL_OW 39
// end ; ChangeMap ( 6 , %_cont ) ;
3415: LD_INT 6
3417: PPUSH
3418: LD_STRING %_cont
3420: PPUSH
3421: CALL_OW 340
// end ; end_of_file
3425: PPOPN 1
3427: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3428: LD_INT 0
3430: PPUSH
3431: PPUSH
// if exist_mode then
3432: LD_VAR 0 2
3436: IFFALSE 3455
// unit := CreateCharacter ( ident ) else
3438: LD_ADDR_VAR 0 4
3442: PUSH
3443: LD_VAR 0 1
3447: PPUSH
3448: CALL_OW 34
3452: ST_TO_ADDR
3453: GO 3470
// unit := NewCharacter ( ident ) ;
3455: LD_ADDR_VAR 0 4
3459: PUSH
3460: LD_VAR 0 1
3464: PPUSH
3465: CALL_OW 25
3469: ST_TO_ADDR
// result := unit ;
3470: LD_ADDR_VAR 0 3
3474: PUSH
3475: LD_VAR 0 4
3479: ST_TO_ADDR
// end ;
3480: LD_VAR 0 3
3484: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test ; begin
3485: LD_INT 0
3487: PPUSH
3488: PPUSH
3489: PPUSH
3490: PPUSH
3491: PPUSH
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
3492: LD_ADDR_VAR 0 3
3496: PUSH
3497: LD_INT 22
3499: PUSH
3500: LD_INT 1
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: LD_INT 21
3509: PUSH
3510: LD_INT 1
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PUSH
3517: LD_INT 2
3519: PUSH
3520: LD_INT 25
3522: PUSH
3523: LD_INT 1
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 25
3532: PUSH
3533: LD_INT 2
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: PUSH
3540: LD_INT 25
3542: PUSH
3543: LD_INT 3
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: PUSH
3550: LD_INT 25
3552: PUSH
3553: LD_INT 4
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: LIST
3571: PPUSH
3572: CALL_OW 69
3576: PUSH
3577: LD_EXP 1
3581: PUSH
3582: LD_EXP 14
3586: PUSH
3587: LD_EXP 3
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: LIST
3596: DIFF
3597: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
3598: LD_ADDR_VAR 0 4
3602: PUSH
3603: LD_STRING text
3605: PPUSH
3606: LD_INT 5
3608: PPUSH
3609: LD_INT 5
3611: PPUSH
3612: LD_INT -5
3614: PUSH
3615: LD_EXP 1
3619: PUSH
3620: LD_INT -6
3622: PUSH
3623: LD_INT -2
3625: PUSH
3626: LD_INT -3
3628: PUSH
3629: LD_INT -5
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_VAR 0 3
3644: ADD
3645: PUSH
3646: LD_INT -6
3648: PUSH
3649: LD_INT -4
3651: PUSH
3652: LD_EXP 3
3656: PUSH
3657: LD_EXP 14
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: ADD
3668: PPUSH
3669: LD_INT 1
3671: PUSH
3672: LD_INT 3
3674: PUSH
3675: LD_INT 2
3677: PUSH
3678: LD_INT 1
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 4
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: PPUSH
3694: CALL_OW 42
3698: ST_TO_ADDR
// SaveCharacters ( JMM , JMM ) ;
3699: LD_EXP 1
3703: PPUSH
3704: LD_STRING JMM
3706: PPUSH
3707: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
3711: LD_EXP 14
3715: PPUSH
3716: LD_STRING DeltaDoctor
3718: PPUSH
3719: CALL_OW 38
// SaveCharacters ( Denis , Denis ) ;
3723: LD_EXP 3
3727: PPUSH
3728: LD_STRING Denis
3730: PPUSH
3731: CALL_OW 38
// SaveCharacters ( yourApemans , ApeIn06 ) ;
3735: LD_EXP 12
3739: PPUSH
3740: LD_STRING ApeIn06
3742: PPUSH
3743: CALL_OW 38
// if Lisa in selectedPeople then
3747: LD_EXP 4
3751: PUSH
3752: LD_VAR 0 4
3756: IN
3757: IFFALSE 3781
// begin SaveCharacters ( Lisa , Lisa ) ;
3759: LD_EXP 4
3763: PPUSH
3764: LD_STRING Lisa
3766: PPUSH
3767: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
3771: LD_INT 1
3773: PPUSH
3774: LD_STRING LisaIn06
3776: PPUSH
3777: CALL_OW 39
// end ; if Bobby in selectedPeople then
3781: LD_EXP 6
3785: PUSH
3786: LD_VAR 0 4
3790: IN
3791: IFFALSE 3815
// begin SaveCharacters ( Bobby , Bobby ) ;
3793: LD_EXP 6
3797: PPUSH
3798: LD_STRING Bobby
3800: PPUSH
3801: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
3805: LD_INT 1
3807: PPUSH
3808: LD_STRING BobbyIn06
3810: PPUSH
3811: CALL_OW 39
// end ; if Cyrus in selectedPeople then
3815: LD_EXP 7
3819: PUSH
3820: LD_VAR 0 4
3824: IN
3825: IFFALSE 3849
// begin SaveCharacters ( Cyrus , Cyrus ) ;
3827: LD_EXP 7
3831: PPUSH
3832: LD_STRING Cyrus
3834: PPUSH
3835: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
3839: LD_INT 1
3841: PPUSH
3842: LD_STRING CyrusIn06
3844: PPUSH
3845: CALL_OW 39
// end ; if Frank in selectedPeople then
3849: LD_EXP 5
3853: PUSH
3854: LD_VAR 0 4
3858: IN
3859: IFFALSE 3883
// begin SaveCharacters ( Frank , Frank ) ;
3861: LD_EXP 5
3865: PPUSH
3866: LD_STRING Frank
3868: PPUSH
3869: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
3873: LD_INT 1
3875: PPUSH
3876: LD_STRING FrankIn06
3878: PPUSH
3879: CALL_OW 39
// end ; if Brown in selectedPeople then
3883: LD_EXP 8
3887: PUSH
3888: LD_VAR 0 4
3892: IN
3893: IFFALSE 3917
// begin SaveCharacters ( Brown , Brown ) ;
3895: LD_EXP 8
3899: PPUSH
3900: LD_STRING Brown
3902: PPUSH
3903: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
3907: LD_INT 1
3909: PPUSH
3910: LD_STRING BrownIn06
3912: PPUSH
3913: CALL_OW 39
// end ; if Donaldson in selectedPeople then
3917: LD_EXP 9
3921: PUSH
3922: LD_VAR 0 4
3926: IN
3927: IFFALSE 3951
// begin SaveCharacters ( Donaldson , Donaldson ) ;
3929: LD_EXP 9
3933: PPUSH
3934: LD_STRING Donaldson
3936: PPUSH
3937: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
3941: LD_INT 1
3943: PPUSH
3944: LD_STRING DonaldsonIn06
3946: PPUSH
3947: CALL_OW 39
// end ; if Gladstone in selectedPeople then
3951: LD_EXP 2
3955: PUSH
3956: LD_VAR 0 4
3960: IN
3961: IFFALSE 3985
// begin SaveCharacters ( Gladstone , Gladstone ) ;
3963: LD_EXP 2
3967: PPUSH
3968: LD_STRING Gladstone
3970: PPUSH
3971: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
3975: LD_INT 1
3977: PPUSH
3978: LD_STRING GladstoneIn06
3980: PPUSH
3981: CALL_OW 39
// end ; SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
3985: LD_INT 22
3987: PUSH
3988: LD_INT 1
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: LD_INT 21
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PPUSH
4009: CALL_OW 69
4013: PPUSH
4014: LD_INT 4
4016: PPUSH
4017: CALL_OW 235
// for i in selectedPeople do
4021: LD_ADDR_VAR 0 2
4025: PUSH
4026: LD_VAR 0 4
4030: PUSH
4031: FOR_IN
4032: IFFALSE 4048
// SetSide ( i , 1 ) ;
4034: LD_VAR 0 2
4038: PPUSH
4039: LD_INT 1
4041: PPUSH
4042: CALL_OW 235
4046: GO 4031
4048: POP
4049: POP
// for i in yourApemans do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_EXP 12
4059: PUSH
4060: FOR_IN
4061: IFFALSE 4077
// SetSide ( i , 1 ) ;
4063: LD_VAR 0 2
4067: PPUSH
4068: LD_INT 1
4070: PPUSH
4071: CALL_OW 235
4075: GO 4060
4077: POP
4078: POP
// SetSide ( JMM , 1 ) ;
4079: LD_EXP 1
4083: PPUSH
4084: LD_INT 1
4086: PPUSH
4087: CALL_OW 235
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone ] , OthersIn06 ) ;
4091: LD_INT 22
4093: PUSH
4094: LD_INT 1
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: PUSH
4101: LD_INT 21
4103: PUSH
4104: LD_INT 1
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PPUSH
4115: CALL_OW 69
4119: PUSH
4120: LD_EXP 1
4124: PUSH
4125: LD_EXP 4
4129: PUSH
4130: LD_EXP 6
4134: PUSH
4135: LD_EXP 7
4139: PUSH
4140: LD_EXP 5
4144: PUSH
4145: LD_EXP 8
4149: PUSH
4150: LD_EXP 9
4154: PUSH
4155: LD_EXP 2
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: DIFF
4170: PPUSH
4171: LD_STRING OthersIn06
4173: PPUSH
4174: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor ] , OthersStayInDelta ) ;
4178: LD_INT 22
4180: PUSH
4181: LD_INT 4
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 2
4190: PUSH
4191: LD_INT 25
4193: PUSH
4194: LD_INT 1
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PUSH
4201: LD_INT 25
4203: PUSH
4204: LD_INT 2
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 25
4213: PUSH
4214: LD_INT 3
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: LD_INT 25
4223: PUSH
4224: LD_INT 4
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: PPUSH
4242: CALL_OW 69
4246: PUSH
4247: LD_EXP 14
4251: PUSH
4252: EMPTY
4253: LIST
4254: DIFF
4255: PPUSH
4256: LD_STRING OthersStayInDelta
4258: PPUSH
4259: CALL_OW 38
// end ; end_of_file
4263: LD_VAR 0 1
4267: RET
// on Command ( comandid ) do var i ;
4268: LD_INT 0
4270: PPUSH
// begin if comandid = 65 then
4271: LD_VAR 0 1
4275: PUSH
4276: LD_INT 65
4278: EQUAL
4279: IFFALSE 4331
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
4281: LD_ADDR_VAR 0 2
4285: PUSH
4286: LD_INT 22
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 21
4298: PUSH
4299: LD_INT 1
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: PUSH
4315: FOR_IN
4316: IFFALSE 4329
// ComStop ( i ) ;
4318: LD_VAR 0 2
4322: PPUSH
4323: CALL_OW 141
4327: GO 4315
4329: POP
4330: POP
// end ;
4331: PPOPN 2
4333: END
// on ApemanTamed ( apeman , human ) do var tmp ;
4334: LD_INT 0
4336: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
4337: LD_ADDR_VAR 0 3
4341: PUSH
4342: LD_INT 22
4344: PUSH
4345: LD_INT 1
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: PUSH
4352: LD_INT 21
4354: PUSH
4355: LD_INT 3
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: PUSH
4362: LD_INT 30
4364: PUSH
4365: LD_INT 0
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: PPUSH
4377: CALL_OW 69
4381: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
4382: LD_VAR 0 1
4386: PPUSH
4387: LD_VAR 0 3
4391: PUSH
4392: LD_INT 1
4394: ARRAY
4395: PPUSH
4396: CALL_OW 120
// SetSide ( apeman , 4 ) ;
4400: LD_VAR 0 1
4404: PPUSH
4405: LD_INT 4
4407: PPUSH
4408: CALL_OW 235
// end ;
4412: PPOPN 3
4414: END
