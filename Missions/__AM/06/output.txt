// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 16
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// apemans = [ ] ;
  23: LD_ADDR_EXP 11
  27: PUSH
  28: EMPTY
  29: ST_TO_ADDR
// yourApemans = [ ] ;
  30: LD_ADDR_EXP 12
  34: PUSH
  35: EMPTY
  36: ST_TO_ADDR
// yourVehicles = [ ] ;
  37: LD_ADDR_EXP 13
  41: PUSH
  42: EMPTY
  43: ST_TO_ADDR
// mission_prefix := 06_ ;
  44: LD_ADDR_EXP 17
  48: PUSH
  49: LD_STRING 06_
  51: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  52: LD_ADDR_EXP 18
  56: PUSH
  57: LD_STRING 05_
  59: ST_TO_ADDR
// PrepareDeltaBase ;
  60: CALL 1833 0 0
// LoadVehicles ;
  64: CALL 1245 0 0
// PrepareHeroes ;
  68: CALL 77 0 0
// PrepareRandoms ;
  72: CALL 1530 0 0
// end ; end_of_file
  76: END
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
  77: LD_INT 0
  79: PPUSH
  80: PPUSH
  81: PPUSH
  82: PPUSH
  83: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
  84: LD_ADDR_VAR 0 3
  88: PUSH
  89: LD_INT 22
  91: PUSH
  92: LD_INT 1
  94: PUSH
  95: EMPTY
  96: LIST
  97: LIST
  98: PUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 3
 104: PUSH
 105: EMPTY
 106: LIST
 107: LIST
 108: PUSH
 109: LD_INT 30
 111: PUSH
 112: LD_INT 0
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: EMPTY
 120: LIST
 121: LIST
 122: LIST
 123: PPUSH
 124: CALL_OW 69
 128: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 129: LD_VAR 0 3
 133: PUSH
 134: LD_INT 1
 136: ARRAY
 137: PPUSH
 138: LD_STRING delta
 140: PPUSH
 141: CALL_OW 500
// uc_side = 1 ;
 145: LD_ADDR_OWVAR 20
 149: PUSH
 150: LD_INT 1
 152: ST_TO_ADDR
// uc_nation = 1 ;
 153: LD_ADDR_OWVAR 21
 157: PUSH
 158: LD_INT 1
 160: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 161: LD_ADDR_EXP 1
 165: PUSH
 166: LD_STRING JMM
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: CALL 3620 0 2
 176: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_STRING Harisson
 184: PPUSH
 185: LD_INT 0
 187: PPUSH
 188: CALL 3620 0 2
 192: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 193: LD_EXP 1
 197: PPUSH
 198: LD_VAR 0 3
 202: PUSH
 203: LD_INT 1
 205: ARRAY
 206: PPUSH
 207: CALL_OW 250
 211: PPUSH
 212: LD_VAR 0 3
 216: PUSH
 217: LD_INT 1
 219: ARRAY
 220: PPUSH
 221: CALL_OW 251
 225: PPUSH
 226: LD_INT 5
 228: PPUSH
 229: LD_INT 0
 231: PPUSH
 232: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 236: LD_EXP 1
 240: PPUSH
 241: LD_INT 1
 243: PPUSH
 244: CALL_OW 336
// if LoadVariable ( GladstoneInDelta , 0 ) = 1 then
 248: LD_STRING GladstoneInDelta
 250: PPUSH
 251: LD_INT 0
 253: PPUSH
 254: CALL_OW 30
 258: PUSH
 259: LD_INT 1
 261: EQUAL
 262: IFFALSE 335
// begin Gladstone = PrepareUnit ( Gladstone , true ) ;
 264: LD_ADDR_EXP 2
 268: PUSH
 269: LD_STRING Gladstone
 271: PPUSH
 272: LD_INT 1
 274: PPUSH
 275: CALL 3620 0 2
 279: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 280: LD_EXP 2
 284: PPUSH
 285: LD_VAR 0 3
 289: PUSH
 290: LD_INT 1
 292: ARRAY
 293: PPUSH
 294: CALL_OW 250
 298: PPUSH
 299: LD_VAR 0 3
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PPUSH
 308: CALL_OW 251
 312: PPUSH
 313: LD_INT 5
 315: PPUSH
 316: LD_INT 0
 318: PPUSH
 319: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 323: LD_EXP 2
 327: PPUSH
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 336
// end ; Denis = PrepareUnit ( Denis , true ) ;
 335: LD_ADDR_EXP 3
 339: PUSH
 340: LD_STRING Denis
 342: PPUSH
 343: LD_INT 1
 345: PPUSH
 346: CALL 3620 0 2
 350: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 351: LD_EXP 3
 355: PPUSH
 356: LD_VAR 0 3
 360: PUSH
 361: LD_INT 1
 363: ARRAY
 364: PPUSH
 365: CALL_OW 250
 369: PPUSH
 370: LD_VAR 0 3
 374: PUSH
 375: LD_INT 1
 377: ARRAY
 378: PPUSH
 379: CALL_OW 251
 383: PPUSH
 384: LD_INT 5
 386: PPUSH
 387: LD_INT 0
 389: PPUSH
 390: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 394: LD_EXP 3
 398: PPUSH
 399: LD_INT 4
 401: PPUSH
 402: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 406: LD_STRING FrankInDelta
 408: PPUSH
 409: LD_INT 0
 411: PPUSH
 412: CALL_OW 30
 416: PUSH
 417: LD_INT 1
 419: EQUAL
 420: IFFALSE 493
// begin Frank = PrepareUnit ( Frank , true ) ;
 422: LD_ADDR_EXP 5
 426: PUSH
 427: LD_STRING Frank
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL 3620 0 2
 437: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 438: LD_EXP 5
 442: PPUSH
 443: LD_VAR 0 3
 447: PUSH
 448: LD_INT 1
 450: ARRAY
 451: PPUSH
 452: CALL_OW 250
 456: PPUSH
 457: LD_VAR 0 3
 461: PUSH
 462: LD_INT 1
 464: ARRAY
 465: PPUSH
 466: CALL_OW 251
 470: PPUSH
 471: LD_INT 5
 473: PPUSH
 474: LD_INT 0
 476: PPUSH
 477: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 481: LD_EXP 5
 485: PPUSH
 486: LD_INT 1
 488: PPUSH
 489: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 493: LD_STRING LisaInDelta
 495: PPUSH
 496: LD_INT 0
 498: PPUSH
 499: CALL_OW 30
 503: PUSH
 504: LD_INT 1
 506: EQUAL
 507: IFFALSE 580
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 509: LD_ADDR_EXP 4
 513: PUSH
 514: LD_STRING Lisa
 516: PPUSH
 517: LD_INT 1
 519: PPUSH
 520: CALL 3620 0 2
 524: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 525: LD_EXP 4
 529: PPUSH
 530: LD_VAR 0 3
 534: PUSH
 535: LD_INT 1
 537: ARRAY
 538: PPUSH
 539: CALL_OW 250
 543: PPUSH
 544: LD_VAR 0 3
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: CALL_OW 251
 557: PPUSH
 558: LD_INT 5
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 568: LD_EXP 4
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 580: LD_STRING BobbyInDelta
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 30
 590: PUSH
 591: LD_INT 1
 593: EQUAL
 594: IFFALSE 667
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 596: LD_ADDR_EXP 6
 600: PUSH
 601: LD_STRING Bobby
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL 3620 0 2
 611: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 612: LD_EXP 6
 616: PPUSH
 617: LD_VAR 0 3
 621: PUSH
 622: LD_INT 1
 624: ARRAY
 625: PPUSH
 626: CALL_OW 250
 630: PPUSH
 631: LD_VAR 0 3
 635: PUSH
 636: LD_INT 1
 638: ARRAY
 639: PPUSH
 640: CALL_OW 251
 644: PPUSH
 645: LD_INT 5
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 655: LD_EXP 6
 659: PPUSH
 660: LD_INT 1
 662: PPUSH
 663: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 667: LD_STRING CyrusInDelta
 669: PPUSH
 670: LD_INT 0
 672: PPUSH
 673: CALL_OW 30
 677: PUSH
 678: LD_INT 1
 680: EQUAL
 681: IFFALSE 754
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 683: LD_ADDR_EXP 7
 687: PUSH
 688: LD_STRING Cyrus
 690: PPUSH
 691: LD_INT 1
 693: PPUSH
 694: CALL 3620 0 2
 698: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 699: LD_EXP 7
 703: PPUSH
 704: LD_VAR 0 3
 708: PUSH
 709: LD_INT 1
 711: ARRAY
 712: PPUSH
 713: CALL_OW 250
 717: PPUSH
 718: LD_VAR 0 3
 722: PUSH
 723: LD_INT 1
 725: ARRAY
 726: PPUSH
 727: CALL_OW 251
 731: PPUSH
 732: LD_INT 5
 734: PPUSH
 735: LD_INT 0
 737: PPUSH
 738: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 742: LD_EXP 7
 746: PPUSH
 747: LD_INT 1
 749: PPUSH
 750: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 754: LD_STRING DonaldsonInDelta
 756: PPUSH
 757: LD_INT 0
 759: PPUSH
 760: CALL_OW 30
 764: PUSH
 765: LD_INT 1
 767: EQUAL
 768: IFFALSE 841
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 770: LD_ADDR_EXP 9
 774: PUSH
 775: LD_STRING Donaldson
 777: PPUSH
 778: LD_INT 1
 780: PPUSH
 781: CALL 3620 0 2
 785: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 786: LD_EXP 9
 790: PPUSH
 791: LD_VAR 0 3
 795: PUSH
 796: LD_INT 1
 798: ARRAY
 799: PPUSH
 800: CALL_OW 250
 804: PPUSH
 805: LD_VAR 0 3
 809: PUSH
 810: LD_INT 1
 812: ARRAY
 813: PPUSH
 814: CALL_OW 251
 818: PPUSH
 819: LD_INT 5
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
 829: LD_EXP 9
 833: PPUSH
 834: LD_INT 1
 836: PPUSH
 837: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
 841: LD_STRING BrownInDelta
 843: PPUSH
 844: LD_INT 0
 846: PPUSH
 847: CALL_OW 30
 851: PUSH
 852: LD_INT 1
 854: EQUAL
 855: IFFALSE 928
// begin Brown = PrepareUnit ( Brown , true ) ;
 857: LD_ADDR_EXP 8
 861: PUSH
 862: LD_STRING Brown
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: CALL 3620 0 2
 872: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 873: LD_EXP 8
 877: PPUSH
 878: LD_VAR 0 3
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PPUSH
 887: CALL_OW 250
 891: PPUSH
 892: LD_VAR 0 3
 896: PUSH
 897: LD_INT 1
 899: ARRAY
 900: PPUSH
 901: CALL_OW 251
 905: PPUSH
 906: LD_INT 5
 908: PPUSH
 909: LD_INT 0
 911: PPUSH
 912: CALL_OW 50
// SetClass ( Brown , 2 ) ;
 916: LD_EXP 8
 920: PPUSH
 921: LD_INT 2
 923: PPUSH
 924: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
 928: LD_ADDR_EXP 10
 932: PUSH
 933: LD_STRING othersInDelta
 935: PPUSH
 936: CALL_OW 31
 940: ST_TO_ADDR
// for i in others do
 941: LD_ADDR_VAR 0 2
 945: PUSH
 946: LD_EXP 10
 950: PUSH
 951: FOR_IN
 952: IFFALSE 1038
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
 954: LD_VAR 0 2
 958: PPUSH
 959: LD_VAR 0 3
 963: PUSH
 964: LD_INT 1
 966: ARRAY
 967: PPUSH
 968: CALL_OW 250
 972: PPUSH
 973: LD_VAR 0 3
 977: PUSH
 978: LD_INT 1
 980: ARRAY
 981: PPUSH
 982: CALL_OW 251
 986: PPUSH
 987: LD_INT 35
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 50
// SetClass ( i , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] ) ;
 997: LD_VAR 0 2
1001: PPUSH
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 3
1010: PUSH
1011: LD_INT 4
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_INT 1
1022: PPUSH
1023: LD_INT 4
1025: PPUSH
1026: CALL_OW 12
1030: ARRAY
1031: PPUSH
1032: CALL_OW 336
// end ;
1036: GO 951
1038: POP
1039: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1040: LD_ADDR_EXP 11
1044: PUSH
1045: LD_STRING apeInDelta
1047: PPUSH
1048: CALL_OW 31
1052: ST_TO_ADDR
// uc_nation = 0 ;
1053: LD_ADDR_OWVAR 21
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// if apemans > 5 then
1061: LD_EXP 11
1065: PUSH
1066: LD_INT 5
1068: GREATER
1069: IFFALSE 1164
// begin for i := 1 to 5 do
1071: LD_ADDR_VAR 0 2
1075: PUSH
1076: DOUBLE
1077: LD_INT 1
1079: DEC
1080: ST_TO_ADDR
1081: LD_INT 5
1083: PUSH
1084: FOR_TO
1085: IFFALSE 1160
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1087: LD_EXP 11
1091: PUSH
1092: LD_VAR 0 2
1096: ARRAY
1097: PPUSH
1098: LD_VAR 0 3
1102: PUSH
1103: LD_INT 1
1105: ARRAY
1106: PPUSH
1107: CALL_OW 250
1111: PPUSH
1112: LD_VAR 0 3
1116: PUSH
1117: LD_INT 1
1119: ARRAY
1120: PPUSH
1121: CALL_OW 251
1125: PPUSH
1126: LD_INT 50
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1136: LD_ADDR_EXP 12
1140: PUSH
1141: LD_EXP 12
1145: PUSH
1146: LD_EXP 11
1150: PUSH
1151: LD_VAR 0 2
1155: ARRAY
1156: ADD
1157: ST_TO_ADDR
// end ;
1158: GO 1084
1160: POP
1161: POP
// end else
1162: GO 1240
// begin for i in apemans do
1164: LD_ADDR_VAR 0 2
1168: PUSH
1169: LD_EXP 11
1173: PUSH
1174: FOR_IN
1175: IFFALSE 1238
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1177: LD_VAR 0 2
1181: PPUSH
1182: LD_VAR 0 3
1186: PUSH
1187: LD_INT 1
1189: ARRAY
1190: PPUSH
1191: CALL_OW 250
1195: PPUSH
1196: LD_VAR 0 3
1200: PUSH
1201: LD_INT 1
1203: ARRAY
1204: PPUSH
1205: CALL_OW 251
1209: PPUSH
1210: LD_INT 50
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1220: LD_ADDR_EXP 12
1224: PUSH
1225: LD_EXP 12
1229: PUSH
1230: LD_VAR 0 2
1234: ADD
1235: ST_TO_ADDR
// end ;
1236: GO 1174
1238: POP
1239: POP
// end ; end ;
1240: LD_VAR 0 1
1244: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1252: LD_ADDR_VAR 0 4
1256: PUSH
1257: LD_INT 22
1259: PUSH
1260: LD_INT 1
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 21
1269: PUSH
1270: LD_INT 3
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: LD_INT 30
1279: PUSH
1280: LD_INT 0
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: ST_TO_ADDR
// uc_side = 1 ;
1297: LD_ADDR_OWVAR 20
1301: PUSH
1302: LD_INT 1
1304: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1305: LD_ADDR_VAR 0 5
1309: PUSH
1310: LD_STRING vehiclesInDelta
1312: PPUSH
1313: EMPTY
1314: PPUSH
1315: CALL_OW 30
1319: ST_TO_ADDR
// for i = 1 to vehicles do
1320: LD_ADDR_VAR 0 2
1324: PUSH
1325: DOUBLE
1326: LD_INT 1
1328: DEC
1329: ST_TO_ADDR
1330: LD_VAR 0 5
1334: PUSH
1335: FOR_TO
1336: IFFALSE 1523
// begin if vehicles [ i + 4 ] = 11 then
1338: LD_VAR 0 5
1342: PUSH
1343: LD_VAR 0 2
1347: PUSH
1348: LD_INT 4
1350: PLUS
1351: ARRAY
1352: PUSH
1353: LD_INT 11
1355: EQUAL
1356: IFFALSE 1507
// begin uc_nation = vehicles [ i ] ;
1358: LD_ADDR_OWVAR 21
1362: PUSH
1363: LD_VAR 0 5
1367: PUSH
1368: LD_VAR 0 2
1372: ARRAY
1373: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1374: LD_ADDR_OWVAR 37
1378: PUSH
1379: LD_VAR 0 5
1383: PUSH
1384: LD_VAR 0 2
1388: PUSH
1389: LD_INT 1
1391: PLUS
1392: ARRAY
1393: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1394: LD_ADDR_OWVAR 39
1398: PUSH
1399: LD_VAR 0 5
1403: PUSH
1404: LD_VAR 0 2
1408: PUSH
1409: LD_INT 2
1411: PLUS
1412: ARRAY
1413: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1414: LD_ADDR_OWVAR 38
1418: PUSH
1419: LD_VAR 0 5
1423: PUSH
1424: LD_VAR 0 2
1428: PUSH
1429: LD_INT 3
1431: PLUS
1432: ARRAY
1433: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1434: LD_ADDR_OWVAR 40
1438: PUSH
1439: LD_VAR 0 5
1443: PUSH
1444: LD_VAR 0 2
1448: PUSH
1449: LD_INT 4
1451: PLUS
1452: ARRAY
1453: ST_TO_ADDR
// veh = CreateVehicle ;
1454: LD_ADDR_VAR 0 3
1458: PUSH
1459: CALL_OW 45
1463: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1464: LD_VAR 0 3
1468: PPUSH
1469: LD_VAR 0 4
1473: PUSH
1474: LD_INT 1
1476: ARRAY
1477: PPUSH
1478: CALL_OW 250
1482: PPUSH
1483: LD_VAR 0 4
1487: PUSH
1488: LD_INT 1
1490: ARRAY
1491: PPUSH
1492: CALL_OW 251
1496: PPUSH
1497: LD_INT 40
1499: PPUSH
1500: LD_INT 0
1502: PPUSH
1503: CALL_OW 50
// end ; i = i + 4 ;
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_VAR 0 2
1516: PUSH
1517: LD_INT 4
1519: PLUS
1520: ST_TO_ADDR
// end ;
1521: GO 1335
1523: POP
1524: POP
// end ;
1525: LD_VAR 0 1
1529: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
1530: LD_INT 0
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
// uc_side = 1 ;
1536: LD_ADDR_OWVAR 20
1540: PUSH
1541: LD_INT 1
1543: ST_TO_ADDR
// uc_nation = 1 ;
1544: LD_ADDR_OWVAR 21
1548: PUSH
1549: LD_INT 1
1551: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1552: LD_ADDR_VAR 0 4
1556: PUSH
1557: LD_INT 22
1559: PUSH
1560: LD_INT 1
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 21
1569: PUSH
1570: LD_INT 3
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 30
1579: PUSH
1580: LD_INT 0
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: PPUSH
1592: CALL_OW 69
1596: ST_TO_ADDR
// for i = 1 to 6 + Difficulty do
1597: LD_ADDR_VAR 0 2
1601: PUSH
1602: DOUBLE
1603: LD_INT 1
1605: DEC
1606: ST_TO_ADDR
1607: LD_INT 6
1609: PUSH
1610: LD_OWVAR 67
1614: PLUS
1615: PUSH
1616: FOR_TO
1617: IFFALSE 1744
// begin hc_gallery =  ;
1619: LD_ADDR_OWVAR 33
1623: PUSH
1624: LD_STRING 
1626: ST_TO_ADDR
// hc_name =  ;
1627: LD_ADDR_OWVAR 26
1631: PUSH
1632: LD_STRING 
1634: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) - Difficulty ) ;
1635: LD_INT 0
1637: PPUSH
1638: LD_INT 1
1640: PUSH
1641: LD_INT 2
1643: PUSH
1644: LD_INT 3
1646: PUSH
1647: LD_INT 4
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 1
1658: PPUSH
1659: LD_INT 4
1661: PPUSH
1662: CALL_OW 12
1666: ARRAY
1667: PPUSH
1668: LD_INT 3
1670: PPUSH
1671: LD_INT 5
1673: PPUSH
1674: CALL_OW 12
1678: PUSH
1679: LD_OWVAR 67
1683: MINUS
1684: PPUSH
1685: CALL_OW 380
// un = CreateHuman ;
1689: LD_ADDR_VAR 0 3
1693: PUSH
1694: CALL_OW 44
1698: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1699: LD_VAR 0 3
1703: PPUSH
1704: LD_VAR 0 4
1708: PUSH
1709: LD_INT 1
1711: ARRAY
1712: PPUSH
1713: CALL_OW 250
1717: PPUSH
1718: LD_VAR 0 4
1722: PUSH
1723: LD_INT 1
1725: ARRAY
1726: PPUSH
1727: CALL_OW 251
1731: PPUSH
1732: LD_INT 15
1734: PPUSH
1735: LD_INT 0
1737: PPUSH
1738: CALL_OW 50
// end ;
1742: GO 1616
1744: POP
1745: POP
// hc_gallery =  ;
1746: LD_ADDR_OWVAR 33
1750: PUSH
1751: LD_STRING 
1753: ST_TO_ADDR
// hc_name = Dr. Michael Mills ;
1754: LD_ADDR_OWVAR 26
1758: PUSH
1759: LD_STRING Dr. Michael Mills
1761: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
1762: LD_INT 1
1764: PPUSH
1765: LD_INT 4
1767: PPUSH
1768: LD_INT 6
1770: PPUSH
1771: CALL_OW 380
// deltaDoctor = CreateHuman ;
1775: LD_ADDR_EXP 14
1779: PUSH
1780: CALL_OW 44
1784: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1785: LD_EXP 14
1789: PPUSH
1790: LD_VAR 0 4
1794: PUSH
1795: LD_INT 1
1797: ARRAY
1798: PPUSH
1799: CALL_OW 250
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: ARRAY
1812: PPUSH
1813: CALL_OW 251
1817: PPUSH
1818: LD_INT 5
1820: PPUSH
1821: LD_INT 0
1823: PPUSH
1824: CALL_OW 50
// end ; end_of_file
1828: LD_VAR 0 1
1832: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
1833: LD_INT 0
1835: PPUSH
1836: PPUSH
1837: PPUSH
1838: PPUSH
1839: PPUSH
1840: PPUSH
1841: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
1842: LD_ADDR_VAR 0 5
1846: PUSH
1847: LD_STRING buildingsInDelta
1849: PPUSH
1850: EMPTY
1851: PPUSH
1852: CALL_OW 30
1856: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
1857: LD_INT 68
1859: PPUSH
1860: LD_INT 40
1862: PPUSH
1863: LD_INT 1
1865: PPUSH
1866: CALL_OW 441
// uc_side = 1 ;
1870: LD_ADDR_OWVAR 20
1874: PUSH
1875: LD_INT 1
1877: ST_TO_ADDR
// uc_nation = 1 ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 1
1885: ST_TO_ADDR
// for i = 1 to buildings do
1886: LD_ADDR_VAR 0 2
1890: PUSH
1891: DOUBLE
1892: LD_INT 1
1894: DEC
1895: ST_TO_ADDR
1896: LD_VAR 0 5
1900: PUSH
1901: FOR_TO
1902: IFFALSE 2100
// begin bc_type = buildings [ i ] [ 1 ] ;
1904: LD_ADDR_OWVAR 42
1908: PUSH
1909: LD_VAR 0 5
1913: PUSH
1914: LD_VAR 0 2
1918: ARRAY
1919: PUSH
1920: LD_INT 1
1922: ARRAY
1923: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
1924: LD_ADDR_OWVAR 43
1928: PUSH
1929: LD_VAR 0 5
1933: PUSH
1934: LD_VAR 0 2
1938: ARRAY
1939: PUSH
1940: LD_INT 2
1942: ARRAY
1943: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
1944: LD_OWVAR 42
1948: PUSH
1949: LD_INT 7
1951: EQUAL
1952: PUSH
1953: LD_OWVAR 42
1957: PUSH
1958: LD_INT 8
1960: EQUAL
1961: OR
1962: IFFALSE 2004
// begin bc_kind1 = buildings [ i ] [ 6 ] ;
1964: LD_ADDR_OWVAR 44
1968: PUSH
1969: LD_VAR 0 5
1973: PUSH
1974: LD_VAR 0 2
1978: ARRAY
1979: PUSH
1980: LD_INT 6
1982: ARRAY
1983: ST_TO_ADDR
// bc_kind2 = buildings [ i ] [ 7 ] ;
1984: LD_ADDR_OWVAR 45
1988: PUSH
1989: LD_VAR 0 5
1993: PUSH
1994: LD_VAR 0 2
1998: ARRAY
1999: PUSH
2000: LD_INT 7
2002: ARRAY
2003: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2004: LD_ADDR_VAR 0 4
2008: PUSH
2009: LD_VAR 0 5
2013: PUSH
2014: LD_VAR 0 2
2018: ARRAY
2019: PUSH
2020: LD_INT 3
2022: ARRAY
2023: PPUSH
2024: LD_VAR 0 5
2028: PUSH
2029: LD_VAR 0 2
2033: ARRAY
2034: PUSH
2035: LD_INT 4
2037: ARRAY
2038: PPUSH
2039: LD_VAR 0 5
2043: PUSH
2044: LD_VAR 0 2
2048: ARRAY
2049: PUSH
2050: LD_INT 5
2052: ARRAY
2053: PPUSH
2054: CALL_OW 47
2058: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2059: LD_VAR 0 4
2063: PPUSH
2064: CALL_OW 266
2068: PUSH
2069: LD_INT 32
2071: EQUAL
2072: IFFALSE 2098
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2074: LD_VAR 0 4
2078: PPUSH
2079: LD_VAR 0 5
2083: PUSH
2084: LD_VAR 0 2
2088: ARRAY
2089: PUSH
2090: LD_INT 8
2092: ARRAY
2093: PPUSH
2094: CALL_OW 431
// end ;
2098: GO 1901
2100: POP
2101: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2102: LD_ADDR_VAR 0 6
2106: PUSH
2107: LD_INT 22
2109: PUSH
2110: LD_INT 1
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 2
2119: PUSH
2120: LD_INT 30
2122: PUSH
2123: LD_INT 6
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 30
2132: PUSH
2133: LD_INT 7
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 30
2142: PUSH
2143: LD_INT 8
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: PPUSH
2160: CALL_OW 69
2164: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2165: LD_ADDR_VAR 0 7
2169: PUSH
2170: LD_INT 22
2172: PUSH
2173: LD_INT 1
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 30
2182: PUSH
2183: LD_INT 0
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PPUSH
2194: CALL_OW 69
2198: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2199: LD_VAR 0 6
2203: PUSH
2204: LD_INT 0
2206: GREATER
2207: PUSH
2208: LD_VAR 0 7
2212: PUSH
2213: LD_INT 0
2215: GREATER
2216: AND
2217: IFFALSE 2227
// baseCorrect = 1 ;
2219: LD_ADDR_EXP 16
2223: PUSH
2224: LD_INT 1
2226: ST_TO_ADDR
// if baseCorrect = 0 then
2227: LD_EXP 16
2231: PUSH
2232: LD_INT 0
2234: EQUAL
2235: IFFALSE 2608
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2237: LD_ADDR_VAR 0 2
2241: PUSH
2242: LD_INT 22
2244: PUSH
2245: LD_INT 1
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 21
2254: PUSH
2255: LD_INT 3
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 69
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2285
// RemoveUnit ( i ) ;
2274: LD_VAR 0 2
2278: PPUSH
2279: CALL_OW 64
2283: GO 2271
2285: POP
2286: POP
// uc_nation = 1 ;
2287: LD_ADDR_OWVAR 21
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// uc_side = 1 ;
2295: LD_ADDR_OWVAR 20
2299: PUSH
2300: LD_INT 1
2302: ST_TO_ADDR
// bc_level = 5 ;
2303: LD_ADDR_OWVAR 43
2307: PUSH
2308: LD_INT 5
2310: ST_TO_ADDR
// bc_type = b_depot ;
2311: LD_ADDR_OWVAR 42
2315: PUSH
2316: LD_INT 0
2318: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2319: LD_INT 50
2321: PPUSH
2322: LD_INT 22
2324: PPUSH
2325: LD_INT 0
2327: PPUSH
2328: CALL_OW 47
// bc_type = b_bunker ;
2332: LD_ADDR_OWVAR 42
2336: PUSH
2337: LD_INT 32
2339: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2340: LD_ADDR_VAR 0 4
2344: PUSH
2345: LD_INT 68
2347: PPUSH
2348: LD_INT 24
2350: PPUSH
2351: LD_INT 4
2353: PPUSH
2354: CALL_OW 47
2358: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2359: LD_VAR 0 4
2363: PPUSH
2364: LD_INT 4
2366: PUSH
2367: LD_INT 11
2369: PUSH
2370: EMPTY
2371: LIST
2372: LIST
2373: PUSH
2374: LD_INT 1
2376: PPUSH
2377: LD_INT 2
2379: PPUSH
2380: CALL_OW 12
2384: ARRAY
2385: PPUSH
2386: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2390: LD_ADDR_VAR 0 4
2394: PUSH
2395: LD_INT 71
2397: PPUSH
2398: LD_INT 34
2400: PPUSH
2401: LD_INT 4
2403: PPUSH
2404: CALL_OW 47
2408: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2409: LD_VAR 0 4
2413: PPUSH
2414: LD_INT 4
2416: PUSH
2417: LD_INT 11
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: LD_INT 1
2426: PPUSH
2427: LD_INT 2
2429: PPUSH
2430: CALL_OW 12
2434: ARRAY
2435: PPUSH
2436: CALL_OW 431
// bc_type = 31 ;
2440: LD_ADDR_OWVAR 42
2444: PUSH
2445: LD_INT 31
2447: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
2448: LD_INT 51
2450: PPUSH
2451: LD_INT 7
2453: PPUSH
2454: LD_INT 3
2456: PPUSH
2457: CALL_OW 47
// bc_type = b_oil_mine ;
2461: LD_ADDR_OWVAR 42
2465: PUSH
2466: LD_INT 29
2468: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
2469: LD_INT 68
2471: PPUSH
2472: LD_INT 40
2474: PPUSH
2475: LD_INT 1
2477: PPUSH
2478: CALL_OW 47
// bc_type = b_workshop ;
2482: LD_ADDR_OWVAR 42
2486: PUSH
2487: LD_INT 2
2489: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2490: LD_INT 38
2492: PPUSH
2493: LD_INT 20
2495: PPUSH
2496: LD_INT 2
2498: PPUSH
2499: CALL_OW 47
// bc_type = b_armoury ;
2503: LD_ADDR_OWVAR 42
2507: PUSH
2508: LD_INT 4
2510: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2511: LD_INT 38
2513: PPUSH
2514: LD_INT 20
2516: PPUSH
2517: LD_INT 2
2519: PPUSH
2520: CALL_OW 47
// bc_type = b_solar_power ;
2524: LD_ADDR_OWVAR 42
2528: PUSH
2529: LD_INT 27
2531: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
2532: LD_INT 46
2534: PPUSH
2535: LD_INT 12
2537: PPUSH
2538: LD_INT 1
2540: PPUSH
2541: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
2545: LD_INT 48
2547: PPUSH
2548: LD_INT 11
2550: PPUSH
2551: LD_INT 2
2553: PPUSH
2554: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
2558: LD_INT 49
2560: PPUSH
2561: LD_INT 11
2563: PPUSH
2564: LD_INT 3
2566: PPUSH
2567: CALL_OW 47
// bc_type = b_lab_half ;
2571: LD_ADDR_OWVAR 42
2575: PUSH
2576: LD_INT 7
2578: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
2579: LD_ADDR_OWVAR 44
2583: PUSH
2584: LD_INT 15
2586: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2587: LD_ADDR_OWVAR 45
2591: PUSH
2592: LD_INT 9
2594: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
2595: LD_INT 42
2597: PPUSH
2598: LD_INT 15
2600: PPUSH
2601: LD_INT 2
2603: PPUSH
2604: CALL_OW 47
// end ; end ; end_of_file
2608: LD_VAR 0 1
2612: RET
// every 1 do var i , j , lab , tmp ;
2613: GO 2615
2615: DISABLE
2616: LD_INT 0
2618: PPUSH
2619: PPUSH
2620: PPUSH
2621: PPUSH
// begin lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2622: LD_ADDR_VAR 0 3
2626: PUSH
2627: LD_INT 22
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: LD_INT 2
2639: PUSH
2640: LD_INT 30
2642: PUSH
2643: LD_INT 6
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PUSH
2650: LD_INT 30
2652: PUSH
2653: LD_INT 7
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: PUSH
2660: LD_INT 30
2662: PUSH
2663: LD_INT 8
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 69
2684: ST_TO_ADDR
// InGameOn ;
2685: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
2689: LD_VAR 0 3
2693: PUSH
2694: LD_INT 1
2696: ARRAY
2697: PPUSH
2698: CALL_OW 87
// if IsOK ( Denis ) then
2702: LD_EXP 3
2706: PPUSH
2707: CALL_OW 302
2711: IFFALSE 2739
// begin SetTech ( tech_radar , 1 , state_researched ) ;
2713: LD_INT 6
2715: PPUSH
2716: LD_INT 1
2718: PPUSH
2719: LD_INT 2
2721: PPUSH
2722: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
2726: LD_INT 20
2728: PPUSH
2729: LD_INT 1
2731: PPUSH
2732: LD_INT 1
2734: PPUSH
2735: CALL_OW 324
// end ; ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
2739: LD_EXP 1
2743: PUSH
2744: LD_EXP 14
2748: PUSH
2749: LD_EXP 3
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: LIST
2758: PPUSH
2759: LD_VAR 0 3
2763: PUSH
2764: LD_INT 1
2766: ARRAY
2767: PPUSH
2768: CALL_OW 120
// Say ( JMM , D1-JMM-1 ) ;
2772: LD_EXP 1
2776: PPUSH
2777: LD_STRING D1-JMM-1
2779: PPUSH
2780: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
2784: LD_EXP 14
2788: PPUSH
2789: LD_STRING D1-Sci-1
2791: PPUSH
2792: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
2796: LD_EXP 1
2800: PPUSH
2801: LD_STRING D1-JMM-2
2803: PPUSH
2804: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
2808: LD_EXP 14
2812: PPUSH
2813: LD_STRING D1-Sci-2
2815: PPUSH
2816: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
2820: LD_EXP 1
2824: PPUSH
2825: LD_STRING D1-JMM-3
2827: PPUSH
2828: CALL_OW 88
// if IsOK ( Denis ) then
2832: LD_EXP 3
2836: PPUSH
2837: CALL_OW 302
2841: IFFALSE 2857
// Say ( DeltaDoctor , D1-Sci-3 ) else
2843: LD_EXP 14
2847: PPUSH
2848: LD_STRING D1-Sci-3
2850: PPUSH
2851: CALL_OW 88
2855: GO 2869
// Say ( DeltaDoctor , D1-Sci-3a ) ;
2857: LD_EXP 14
2861: PPUSH
2862: LD_STRING D1-Sci-3a
2864: PPUSH
2865: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
2869: LD_EXP 1
2873: PPUSH
2874: LD_STRING D1-JMM-4
2876: PPUSH
2877: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
2881: LD_ADDR_VAR 0 4
2885: PUSH
2886: LD_INT 22
2888: PUSH
2889: LD_INT 1
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: PUSH
2896: LD_INT 25
2898: PUSH
2899: LD_INT 4
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_INT 3
2908: PUSH
2909: LD_INT 54
2911: PUSH
2912: EMPTY
2913: LIST
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: LIST
2923: PPUSH
2924: CALL_OW 69
2928: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
2929: LD_ADDR_VAR 0 1
2933: PUSH
2934: LD_INT 22
2936: PUSH
2937: LD_INT 0
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PPUSH
2944: CALL_OW 69
2948: PUSH
2949: FOR_IN
2950: IFFALSE 3000
// for j in tmp do
2952: LD_ADDR_VAR 0 2
2956: PUSH
2957: LD_VAR 0 4
2961: PUSH
2962: FOR_IN
2963: IFFALSE 2996
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
2965: LD_VAR 0 2
2969: PPUSH
2970: LD_VAR 0 1
2974: PPUSH
2975: CALL_OW 250
2979: PPUSH
2980: LD_VAR 0 1
2984: PPUSH
2985: CALL_OW 251
2989: PPUSH
2990: CALL_OW 191
2994: GO 2962
2996: POP
2997: POP
2998: GO 2949
3000: POP
3001: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3002: LD_EXP 14
3006: PPUSH
3007: LD_STRING D1-Sci-4
3009: PPUSH
3010: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3014: LD_EXP 1
3018: PPUSH
3019: LD_STRING D1-JMM-5
3021: PPUSH
3022: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3026: LD_EXP 14
3030: PPUSH
3031: LD_STRING D1-Sci-5
3033: PPUSH
3034: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3038: LD_EXP 1
3042: PPUSH
3043: LD_STRING D1-JMM-6
3045: PPUSH
3046: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3050: LD_EXP 15
3054: PPUSH
3055: LD_STRING D1-Har-6
3057: PPUSH
3058: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3062: LD_EXP 1
3066: PPUSH
3067: LD_STRING D1-JMM-7
3069: PPUSH
3070: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3074: LD_EXP 15
3078: PPUSH
3079: LD_STRING D1-Har-7
3081: PPUSH
3082: CALL_OW 94
// if IsOK ( Denis ) then
3086: LD_EXP 3
3090: PPUSH
3091: CALL_OW 302
3095: IFFALSE 3109
// Say ( JMM , D1-JMM-8 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING D1-JMM-8
3104: PPUSH
3105: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3109: LD_EXP 1
3113: PPUSH
3114: LD_STRING D1-JMM-8a
3116: PPUSH
3117: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3121: LD_EXP 15
3125: PPUSH
3126: LD_STRING D1-Har-8
3128: PPUSH
3129: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING D1-JMM-9
3140: PPUSH
3141: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3145: LD_EXP 15
3149: PPUSH
3150: LD_STRING D1-Har-9
3152: PPUSH
3153: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING D1-JMM-10
3164: PPUSH
3165: CALL_OW 88
// if IsOK ( Denis ) then
3169: LD_EXP 3
3173: PPUSH
3174: CALL_OW 302
3178: IFFALSE 3192
// Say ( JMM , D1-JMM-10a ) ;
3180: LD_EXP 1
3184: PPUSH
3185: LD_STRING D1-JMM-10a
3187: PPUSH
3188: CALL_OW 88
// SelectAndSaveCharacters ;
3192: CALL 3683 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3196: LD_VAR 0 3
3200: PUSH
3201: LD_INT 1
3203: ARRAY
3204: PPUSH
3205: CALL_OW 274
3209: PPUSH
3210: LD_INT 1
3212: PPUSH
3213: LD_INT 250
3215: PPUSH
3216: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3220: LD_INT 22
3222: PUSH
3223: LD_INT 1
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 30
3232: PUSH
3233: LD_INT 29
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PPUSH
3244: CALL_OW 69
3248: PUSH
3249: LD_INT 0
3251: GREATER
3252: IFFALSE 3278
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3254: LD_VAR 0 3
3258: PUSH
3259: LD_INT 1
3261: ARRAY
3262: PPUSH
3263: CALL_OW 274
3267: PPUSH
3268: LD_INT 2
3270: PPUSH
3271: LD_INT 300
3273: PPUSH
3274: CALL_OW 277
// InGameOff ;
3278: CALL_OW 9
// Query ( Q1 ) ;
3282: LD_STRING Q1
3284: PPUSH
3285: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3289: LD_INT 3
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: CALL_OW 424
// end ;
3299: PPOPN 4
3301: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i ;
3302: LD_INT 3
3304: PPUSH
3305: LD_INT 22
3307: PUSH
3308: LD_INT 1
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: LD_INT 21
3317: PUSH
3318: LD_INT 1
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 71
3333: PUSH
3334: LD_INT 0
3336: EQUAL
3337: IFFALSE 3617
3339: GO 3341
3341: DISABLE
3342: LD_INT 0
3344: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) > 0 then
3345: LD_INT 3
3347: PPUSH
3348: LD_INT 21
3350: PUSH
3351: LD_INT 2
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: PUSH
3358: EMPTY
3359: LIST
3360: PPUSH
3361: CALL_OW 70
3365: PUSH
3366: LD_INT 0
3368: GREATER
3369: IFFALSE 3607
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) do
3371: LD_ADDR_VAR 0 1
3375: PUSH
3376: LD_INT 3
3378: PPUSH
3379: LD_INT 21
3381: PUSH
3382: LD_INT 2
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: EMPTY
3390: LIST
3391: PPUSH
3392: CALL_OW 70
3396: PUSH
3397: FOR_IN
3398: IFFALSE 3593
// begin if GetWeapon ( i ) = us_cargo_bay then
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 264
3409: PUSH
3410: LD_INT 12
3412: EQUAL
3413: IFFALSE 3520
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetCargoType ( i ) , GetCargo ( i , GetCargoType ( i ) ) ] ] ;
3415: LD_ADDR_EXP 13
3419: PUSH
3420: LD_EXP 13
3424: PUSH
3425: LD_VAR 0 1
3429: PPUSH
3430: CALL_OW 248
3434: PUSH
3435: LD_VAR 0 1
3439: PPUSH
3440: CALL_OW 265
3444: PUSH
3445: LD_VAR 0 1
3449: PPUSH
3450: CALL_OW 262
3454: PUSH
3455: LD_VAR 0 1
3459: PPUSH
3460: CALL_OW 263
3464: PUSH
3465: LD_VAR 0 1
3469: PPUSH
3470: CALL_OW 264
3474: PUSH
3475: LD_VAR 0 1
3479: PPUSH
3480: CALL_OW 288
3484: PUSH
3485: LD_VAR 0 1
3489: PPUSH
3490: LD_VAR 0 1
3494: PPUSH
3495: CALL_OW 288
3499: PPUSH
3500: CALL_OW 289
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: PUSH
3514: EMPTY
3515: LIST
3516: ADD
3517: ST_TO_ADDR
// end else
3518: GO 3591
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
3520: LD_ADDR_EXP 13
3524: PUSH
3525: LD_EXP 13
3529: PUSH
3530: LD_VAR 0 1
3534: PPUSH
3535: CALL_OW 248
3539: PUSH
3540: LD_VAR 0 1
3544: PPUSH
3545: CALL_OW 265
3549: PUSH
3550: LD_VAR 0 1
3554: PPUSH
3555: CALL_OW 262
3559: PUSH
3560: LD_VAR 0 1
3564: PPUSH
3565: CALL_OW 263
3569: PUSH
3570: LD_VAR 0 1
3574: PPUSH
3575: CALL_OW 264
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: PUSH
3587: EMPTY
3588: LIST
3589: ADD
3590: ST_TO_ADDR
// end ; end ;
3591: GO 3397
3593: POP
3594: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
3595: LD_EXP 13
3599: PPUSH
3600: LD_STRING 06_VehiclesIn06_1
3602: PPUSH
3603: CALL_OW 39
// end ; ChangeMap ( 6 , %_cont ) ;
3607: LD_INT 6
3609: PPUSH
3610: LD_STRING %_cont
3612: PPUSH
3613: CALL_OW 340
// end ; end_of_file
3617: PPOPN 1
3619: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3620: LD_INT 0
3622: PPUSH
3623: PPUSH
// if exist_mode then
3624: LD_VAR 0 2
3628: IFFALSE 3653
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3630: LD_ADDR_VAR 0 4
3634: PUSH
3635: LD_EXP 18
3639: PUSH
3640: LD_VAR 0 1
3644: STR
3645: PPUSH
3646: CALL_OW 34
3650: ST_TO_ADDR
3651: GO 3668
// unit := NewCharacter ( ident ) ;
3653: LD_ADDR_VAR 0 4
3657: PUSH
3658: LD_VAR 0 1
3662: PPUSH
3663: CALL_OW 25
3667: ST_TO_ADDR
// result := unit ;
3668: LD_ADDR_VAR 0 3
3672: PUSH
3673: LD_VAR 0 4
3677: ST_TO_ADDR
// end ;
3678: LD_VAR 0 3
3682: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test ; begin
3683: LD_INT 0
3685: PPUSH
3686: PPUSH
3687: PPUSH
3688: PPUSH
3689: PPUSH
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
3690: LD_ADDR_VAR 0 3
3694: PUSH
3695: LD_INT 22
3697: PUSH
3698: LD_INT 1
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: LD_INT 21
3707: PUSH
3708: LD_INT 1
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PUSH
3715: LD_INT 2
3717: PUSH
3718: LD_INT 25
3720: PUSH
3721: LD_INT 1
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: PUSH
3728: LD_INT 25
3730: PUSH
3731: LD_INT 2
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PUSH
3738: LD_INT 25
3740: PUSH
3741: LD_INT 3
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: PUSH
3748: LD_INT 25
3750: PUSH
3751: LD_INT 4
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: PPUSH
3770: CALL_OW 69
3774: PUSH
3775: LD_EXP 1
3779: PUSH
3780: LD_EXP 14
3784: PUSH
3785: LD_EXP 3
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: DIFF
3795: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
3796: LD_ADDR_VAR 0 4
3800: PUSH
3801: LD_STRING text
3803: PPUSH
3804: LD_INT 5
3806: PPUSH
3807: LD_INT 5
3809: PPUSH
3810: LD_INT -5
3812: PUSH
3813: LD_EXP 1
3817: PUSH
3818: LD_INT -6
3820: PUSH
3821: LD_INT -2
3823: PUSH
3824: LD_INT -3
3826: PUSH
3827: LD_INT -5
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: PUSH
3838: LD_VAR 0 3
3842: ADD
3843: PUSH
3844: LD_INT -6
3846: PUSH
3847: LD_INT -4
3849: PUSH
3850: LD_EXP 3
3854: PUSH
3855: LD_EXP 14
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: ADD
3866: PPUSH
3867: LD_INT 1
3869: PUSH
3870: LD_INT 3
3872: PUSH
3873: LD_INT 2
3875: PUSH
3876: LD_INT 1
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PUSH
3883: LD_INT 4
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: PPUSH
3892: CALL_OW 42
3896: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
3897: LD_EXP 1
3901: PPUSH
3902: LD_EXP 17
3906: PUSH
3907: LD_STRING JMM
3909: STR
3910: PPUSH
3911: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
3915: LD_EXP 14
3919: PPUSH
3920: LD_STRING DeltaDoctor
3922: PPUSH
3923: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
3927: LD_EXP 3
3931: PPUSH
3932: LD_EXP 17
3936: PUSH
3937: LD_STRING Denis
3939: STR
3940: PPUSH
3941: CALL_OW 38
// if Lisa in selectedPeople then
3945: LD_EXP 4
3949: PUSH
3950: LD_VAR 0 4
3954: IN
3955: IFFALSE 3985
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
3957: LD_EXP 4
3961: PPUSH
3962: LD_EXP 17
3966: PUSH
3967: LD_STRING Lisa
3969: STR
3970: PPUSH
3971: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
3975: LD_INT 1
3977: PPUSH
3978: LD_STRING LisaIn06
3980: PPUSH
3981: CALL_OW 39
// end ; if Bobby in selectedPeople then
3985: LD_EXP 6
3989: PUSH
3990: LD_VAR 0 4
3994: IN
3995: IFFALSE 4025
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
3997: LD_EXP 6
4001: PPUSH
4002: LD_EXP 17
4006: PUSH
4007: LD_STRING Bobby
4009: STR
4010: PPUSH
4011: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4015: LD_INT 1
4017: PPUSH
4018: LD_STRING BobbyIn06
4020: PPUSH
4021: CALL_OW 39
// end ; if Cyrus in selectedPeople then
4025: LD_EXP 7
4029: PUSH
4030: LD_VAR 0 4
4034: IN
4035: IFFALSE 4065
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4037: LD_EXP 7
4041: PPUSH
4042: LD_EXP 17
4046: PUSH
4047: LD_STRING Cyrus
4049: STR
4050: PPUSH
4051: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4055: LD_INT 1
4057: PPUSH
4058: LD_STRING CyrusIn06
4060: PPUSH
4061: CALL_OW 39
// end ; if Frank in selectedPeople then
4065: LD_EXP 5
4069: PUSH
4070: LD_VAR 0 4
4074: IN
4075: IFFALSE 4105
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4077: LD_EXP 5
4081: PPUSH
4082: LD_EXP 17
4086: PUSH
4087: LD_STRING Frank
4089: STR
4090: PPUSH
4091: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4095: LD_INT 1
4097: PPUSH
4098: LD_STRING FrankIn06
4100: PPUSH
4101: CALL_OW 39
// end ; if Brown in selectedPeople then
4105: LD_EXP 8
4109: PUSH
4110: LD_VAR 0 4
4114: IN
4115: IFFALSE 4145
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4117: LD_EXP 8
4121: PPUSH
4122: LD_EXP 17
4126: PUSH
4127: LD_STRING Brown
4129: STR
4130: PPUSH
4131: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
4135: LD_INT 1
4137: PPUSH
4138: LD_STRING BrownIn06
4140: PPUSH
4141: CALL_OW 39
// end ; if Donaldson in selectedPeople then
4145: LD_EXP 9
4149: PUSH
4150: LD_VAR 0 4
4154: IN
4155: IFFALSE 4185
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
4157: LD_EXP 9
4161: PPUSH
4162: LD_EXP 17
4166: PUSH
4167: LD_STRING Donaldson
4169: STR
4170: PPUSH
4171: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
4175: LD_INT 1
4177: PPUSH
4178: LD_STRING DonaldsonIn06
4180: PPUSH
4181: CALL_OW 39
// end ; if Gladstone in selectedPeople then
4185: LD_EXP 2
4189: PUSH
4190: LD_VAR 0 4
4194: IN
4195: IFFALSE 4225
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4197: LD_EXP 2
4201: PPUSH
4202: LD_EXP 17
4206: PUSH
4207: LD_STRING Gladstone
4209: STR
4210: PPUSH
4211: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
4215: LD_INT 1
4217: PPUSH
4218: LD_STRING GladstoneIn06
4220: PPUSH
4221: CALL_OW 39
// end ; SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4225: LD_INT 22
4227: PUSH
4228: LD_INT 1
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: PUSH
4235: LD_INT 21
4237: PUSH
4238: LD_INT 1
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PPUSH
4249: CALL_OW 69
4253: PPUSH
4254: LD_INT 4
4256: PPUSH
4257: CALL_OW 235
// for i in selectedPeople do
4261: LD_ADDR_VAR 0 2
4265: PUSH
4266: LD_VAR 0 4
4270: PUSH
4271: FOR_IN
4272: IFFALSE 4288
// SetSide ( i , 1 ) ;
4274: LD_VAR 0 2
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: CALL_OW 235
4286: GO 4271
4288: POP
4289: POP
// for i in yourApemans do
4290: LD_ADDR_VAR 0 2
4294: PUSH
4295: LD_EXP 12
4299: PUSH
4300: FOR_IN
4301: IFFALSE 4317
// SetSide ( i , 1 ) ;
4303: LD_VAR 0 2
4307: PPUSH
4308: LD_INT 1
4310: PPUSH
4311: CALL_OW 235
4315: GO 4300
4317: POP
4318: POP
// SetSide ( JMM , 1 ) ;
4319: LD_EXP 1
4323: PPUSH
4324: LD_INT 1
4326: PPUSH
4327: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4331: LD_EXP 12
4335: PPUSH
4336: LD_INT 2
4338: PPUSH
4339: LD_INT 5
4341: PPUSH
4342: CALL_OW 237
// SaveCharacters ( yourApemans , ApeIn06 ) ;
4346: LD_EXP 12
4350: PPUSH
4351: LD_STRING ApeIn06
4353: PPUSH
4354: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone ] , OthersIn06 ) ;
4358: LD_INT 22
4360: PUSH
4361: LD_INT 1
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 21
4370: PUSH
4371: LD_INT 1
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: PUSH
4378: LD_INT 2
4380: PUSH
4381: LD_INT 25
4383: PUSH
4384: LD_INT 1
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 25
4393: PUSH
4394: LD_INT 2
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: LD_INT 25
4403: PUSH
4404: LD_INT 3
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: PUSH
4411: LD_INT 25
4413: PUSH
4414: LD_INT 4
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: LIST
4432: PPUSH
4433: CALL_OW 69
4437: PUSH
4438: LD_EXP 1
4442: PUSH
4443: LD_EXP 4
4447: PUSH
4448: LD_EXP 6
4452: PUSH
4453: LD_EXP 7
4457: PUSH
4458: LD_EXP 5
4462: PUSH
4463: LD_EXP 8
4467: PUSH
4468: LD_EXP 9
4472: PUSH
4473: LD_EXP 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: DIFF
4488: PPUSH
4489: LD_STRING OthersIn06
4491: PPUSH
4492: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor ] , OthersStayInDelta ) ;
4496: LD_INT 22
4498: PUSH
4499: LD_INT 4
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: LD_INT 25
4511: PUSH
4512: LD_INT 1
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: LD_INT 25
4521: PUSH
4522: LD_INT 2
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 25
4531: PUSH
4532: LD_INT 3
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PUSH
4539: LD_INT 25
4541: PUSH
4542: LD_INT 4
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PPUSH
4560: CALL_OW 69
4564: PUSH
4565: LD_EXP 14
4569: PUSH
4570: EMPTY
4571: LIST
4572: DIFF
4573: PPUSH
4574: LD_STRING OthersStayInDelta
4576: PPUSH
4577: CALL_OW 38
// end ; end_of_file
4581: LD_VAR 0 1
4585: RET
// on Command ( comandid ) do var i ;
4586: LD_INT 0
4588: PPUSH
// begin if comandid = 65 then
4589: LD_VAR 0 1
4593: PUSH
4594: LD_INT 65
4596: EQUAL
4597: IFFALSE 4638
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
4599: LD_ADDR_VAR 0 2
4603: PUSH
4604: LD_INT 22
4606: PUSH
4607: LD_INT 1
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: PUSH
4614: EMPTY
4615: LIST
4616: PPUSH
4617: CALL_OW 69
4621: PUSH
4622: FOR_IN
4623: IFFALSE 4636
// ComStop ( i ) ;
4625: LD_VAR 0 2
4629: PPUSH
4630: CALL_OW 141
4634: GO 4622
4636: POP
4637: POP
// end ;
4638: PPOPN 2
4640: END
// on ApemanTamed ( apeman , human ) do var tmp ;
4641: LD_INT 0
4643: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
4644: LD_ADDR_VAR 0 3
4648: PUSH
4649: LD_INT 22
4651: PUSH
4652: LD_INT 1
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: PUSH
4659: LD_INT 21
4661: PUSH
4662: LD_INT 3
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: PUSH
4669: LD_INT 30
4671: PUSH
4672: LD_INT 0
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: PUSH
4679: EMPTY
4680: LIST
4681: LIST
4682: LIST
4683: PPUSH
4684: CALL_OW 69
4688: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
4689: LD_VAR 0 1
4693: PPUSH
4694: LD_VAR 0 3
4698: PUSH
4699: LD_INT 1
4701: ARRAY
4702: PPUSH
4703: CALL_OW 120
// SetSide ( apeman , 4 ) ;
4707: LD_VAR 0 1
4711: PPUSH
4712: LD_INT 4
4714: PPUSH
4715: CALL_OW 235
// end ;
4719: PPOPN 3
4721: END
