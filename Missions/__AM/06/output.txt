// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 17
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 18
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources = [ ] ;
  59: LD_ADDR_EXP 20
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 21
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 22
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2227 0 0
// LoadVehicles ;
  86: CALL 1275 0 0
// PrepareHeroes ;
  90: CALL 162 0 0
// PrepareRandoms ;
  94: CALL 1576 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
  98: LD_ADDR_EXP 19
 102: PUSH
 103: LD_INT 22
 105: PUSH
 106: LD_INT 1
 108: PUSH
 109: EMPTY
 110: LIST
 111: LIST
 112: PUSH
 113: LD_INT 2
 115: PUSH
 116: LD_INT 30
 118: PUSH
 119: LD_INT 6
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PUSH
 126: LD_INT 30
 128: PUSH
 129: LD_INT 7
 131: PUSH
 132: EMPTY
 133: LIST
 134: LIST
 135: PUSH
 136: LD_INT 30
 138: PUSH
 139: LD_INT 8
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: LIST
 150: LIST
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: PPUSH
 156: CALL_OW 69
 160: ST_TO_ADDR
// end ; end_of_file
 161: END
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 162: LD_INT 0
 164: PPUSH
 165: PPUSH
 166: PPUSH
 167: PPUSH
 168: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 169: LD_ADDR_VAR 0 3
 173: PUSH
 174: LD_INT 22
 176: PUSH
 177: LD_INT 1
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: LD_INT 21
 186: PUSH
 187: LD_INT 3
 189: PUSH
 190: EMPTY
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 30
 196: PUSH
 197: LD_INT 0
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: LIST
 208: PPUSH
 209: CALL_OW 69
 213: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 214: LD_VAR 0 3
 218: PUSH
 219: LD_INT 1
 221: ARRAY
 222: PPUSH
 223: LD_STRING delta
 225: PPUSH
 226: CALL_OW 500
// uc_side = 1 ;
 230: LD_ADDR_OWVAR 20
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// uc_nation = 1 ;
 238: LD_ADDR_OWVAR 21
 242: PUSH
 243: LD_INT 1
 245: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 246: LD_ADDR_EXP 1
 250: PUSH
 251: LD_STRING JMM
 253: PPUSH
 254: LD_INT 1
 256: PPUSH
 257: CALL 4341 0 2
 261: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 262: LD_ADDR_EXP 16
 266: PUSH
 267: LD_STRING Harisson
 269: PPUSH
 270: LD_INT 0
 272: PPUSH
 273: CALL 4341 0 2
 277: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 278: LD_EXP 1
 282: PPUSH
 283: LD_VAR 0 3
 287: PUSH
 288: LD_INT 1
 290: ARRAY
 291: PPUSH
 292: CALL_OW 250
 296: PPUSH
 297: LD_VAR 0 3
 301: PUSH
 302: LD_INT 1
 304: ARRAY
 305: PPUSH
 306: CALL_OW 251
 310: PPUSH
 311: LD_INT 5
 313: PPUSH
 314: LD_INT 0
 316: PPUSH
 317: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_INT 1
 328: PPUSH
 329: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true ) ;
 333: LD_ADDR_EXP 2
 337: PUSH
 338: LD_STRING Gladstone
 340: PPUSH
 341: LD_INT 1
 343: PPUSH
 344: CALL 4341 0 2
 348: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 349: LD_EXP 2
 353: PPUSH
 354: LD_VAR 0 3
 358: PUSH
 359: LD_INT 1
 361: ARRAY
 362: PPUSH
 363: CALL_OW 250
 367: PPUSH
 368: LD_VAR 0 3
 372: PUSH
 373: LD_INT 1
 375: ARRAY
 376: PPUSH
 377: CALL_OW 251
 381: PPUSH
 382: LD_INT 5
 384: PPUSH
 385: LD_INT 0
 387: PPUSH
 388: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 392: LD_EXP 2
 396: PPUSH
 397: LD_INT 4
 399: PPUSH
 400: CALL_OW 336
// Denis = PrepareUnit ( Denis , true ) ;
 404: LD_ADDR_EXP 3
 408: PUSH
 409: LD_STRING Denis
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL 4341 0 2
 419: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 420: LD_EXP 3
 424: PPUSH
 425: LD_VAR 0 3
 429: PUSH
 430: LD_INT 1
 432: ARRAY
 433: PPUSH
 434: CALL_OW 250
 438: PPUSH
 439: LD_VAR 0 3
 443: PUSH
 444: LD_INT 1
 446: ARRAY
 447: PPUSH
 448: CALL_OW 251
 452: PPUSH
 453: LD_INT 5
 455: PPUSH
 456: LD_INT 0
 458: PPUSH
 459: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 463: LD_EXP 3
 467: PPUSH
 468: LD_INT 4
 470: PPUSH
 471: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 475: LD_STRING FrankInDelta
 477: PPUSH
 478: LD_INT 0
 480: PPUSH
 481: CALL_OW 30
 485: PUSH
 486: LD_INT 1
 488: EQUAL
 489: IFFALSE 562
// begin Frank = PrepareUnit ( Frank , true ) ;
 491: LD_ADDR_EXP 5
 495: PUSH
 496: LD_STRING Frank
 498: PPUSH
 499: LD_INT 1
 501: PPUSH
 502: CALL 4341 0 2
 506: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 507: LD_EXP 5
 511: PPUSH
 512: LD_VAR 0 3
 516: PUSH
 517: LD_INT 1
 519: ARRAY
 520: PPUSH
 521: CALL_OW 250
 525: PPUSH
 526: LD_VAR 0 3
 530: PUSH
 531: LD_INT 1
 533: ARRAY
 534: PPUSH
 535: CALL_OW 251
 539: PPUSH
 540: LD_INT 5
 542: PPUSH
 543: LD_INT 0
 545: PPUSH
 546: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 550: LD_EXP 5
 554: PPUSH
 555: LD_INT 1
 557: PPUSH
 558: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 562: LD_STRING LisaInDelta
 564: PPUSH
 565: LD_INT 0
 567: PPUSH
 568: CALL_OW 30
 572: PUSH
 573: LD_INT 1
 575: EQUAL
 576: IFFALSE 649
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 578: LD_ADDR_EXP 4
 582: PUSH
 583: LD_STRING Lisa
 585: PPUSH
 586: LD_INT 1
 588: PPUSH
 589: CALL 4341 0 2
 593: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 594: LD_EXP 4
 598: PPUSH
 599: LD_VAR 0 3
 603: PUSH
 604: LD_INT 1
 606: ARRAY
 607: PPUSH
 608: CALL_OW 250
 612: PPUSH
 613: LD_VAR 0 3
 617: PUSH
 618: LD_INT 1
 620: ARRAY
 621: PPUSH
 622: CALL_OW 251
 626: PPUSH
 627: LD_INT 5
 629: PPUSH
 630: LD_INT 0
 632: PPUSH
 633: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 637: LD_EXP 4
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 649: LD_STRING BobbyInDelta
 651: PPUSH
 652: LD_INT 0
 654: PPUSH
 655: CALL_OW 30
 659: PUSH
 660: LD_INT 1
 662: EQUAL
 663: IFFALSE 736
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 665: LD_ADDR_EXP 6
 669: PUSH
 670: LD_STRING Bobby
 672: PPUSH
 673: LD_INT 1
 675: PPUSH
 676: CALL 4341 0 2
 680: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 681: LD_EXP 6
 685: PPUSH
 686: LD_VAR 0 3
 690: PUSH
 691: LD_INT 1
 693: ARRAY
 694: PPUSH
 695: CALL_OW 250
 699: PPUSH
 700: LD_VAR 0 3
 704: PUSH
 705: LD_INT 1
 707: ARRAY
 708: PPUSH
 709: CALL_OW 251
 713: PPUSH
 714: LD_INT 5
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 724: LD_EXP 6
 728: PPUSH
 729: LD_INT 1
 731: PPUSH
 732: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 736: LD_STRING CyrusInDelta
 738: PPUSH
 739: LD_INT 0
 741: PPUSH
 742: CALL_OW 30
 746: PUSH
 747: LD_INT 1
 749: EQUAL
 750: IFFALSE 823
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 752: LD_ADDR_EXP 7
 756: PUSH
 757: LD_STRING Cyrus
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL 4341 0 2
 767: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 768: LD_EXP 7
 772: PPUSH
 773: LD_VAR 0 3
 777: PUSH
 778: LD_INT 1
 780: ARRAY
 781: PPUSH
 782: CALL_OW 250
 786: PPUSH
 787: LD_VAR 0 3
 791: PUSH
 792: LD_INT 1
 794: ARRAY
 795: PPUSH
 796: CALL_OW 251
 800: PPUSH
 801: LD_INT 5
 803: PPUSH
 804: LD_INT 0
 806: PPUSH
 807: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 811: LD_EXP 7
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 823: LD_STRING DonaldsonInDelta
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 30
 833: PUSH
 834: LD_INT 1
 836: EQUAL
 837: IFFALSE 910
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 839: LD_ADDR_EXP 9
 843: PUSH
 844: LD_STRING Donaldson
 846: PPUSH
 847: LD_INT 1
 849: PPUSH
 850: CALL 4341 0 2
 854: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 855: LD_EXP 9
 859: PPUSH
 860: LD_VAR 0 3
 864: PUSH
 865: LD_INT 1
 867: ARRAY
 868: PPUSH
 869: CALL_OW 250
 873: PPUSH
 874: LD_VAR 0 3
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: CALL_OW 251
 887: PPUSH
 888: LD_INT 5
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
 898: LD_EXP 9
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
 910: LD_STRING BrownInDelta
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL_OW 30
 920: PUSH
 921: LD_INT 1
 923: EQUAL
 924: IFFALSE 997
// begin Brown = PrepareUnit ( Brown , true ) ;
 926: LD_ADDR_EXP 8
 930: PUSH
 931: LD_STRING Brown
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: CALL 4341 0 2
 941: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 942: LD_EXP 8
 946: PPUSH
 947: LD_VAR 0 3
 951: PUSH
 952: LD_INT 1
 954: ARRAY
 955: PPUSH
 956: CALL_OW 250
 960: PPUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 1
 968: ARRAY
 969: PPUSH
 970: CALL_OW 251
 974: PPUSH
 975: LD_INT 5
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 50
// SetClass ( Brown , 2 ) ;
 985: LD_EXP 8
 989: PPUSH
 990: LD_INT 2
 992: PPUSH
 993: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
 997: LD_ADDR_EXP 10
1001: PUSH
1002: LD_STRING othersInDelta
1004: PPUSH
1005: CALL_OW 31
1009: ST_TO_ADDR
// for i in others do
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: LD_EXP 10
1019: PUSH
1020: FOR_IN
1021: IFFALSE 1068
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1023: LD_VAR 0 2
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PPUSH
1037: CALL_OW 250
1041: PPUSH
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: CALL_OW 251
1055: PPUSH
1056: LD_INT 35
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 50
1066: GO 1020
1068: POP
1069: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1070: LD_ADDR_EXP 12
1074: PUSH
1075: LD_STRING apeInDelta
1077: PPUSH
1078: CALL_OW 31
1082: ST_TO_ADDR
// uc_nation = 0 ;
1083: LD_ADDR_OWVAR 21
1087: PUSH
1088: LD_INT 0
1090: ST_TO_ADDR
// if apemans > 5 then
1091: LD_EXP 12
1095: PUSH
1096: LD_INT 5
1098: GREATER
1099: IFFALSE 1194
// begin for i := 1 to 5 do
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: DOUBLE
1107: LD_INT 1
1109: DEC
1110: ST_TO_ADDR
1111: LD_INT 5
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1190
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1117: LD_EXP 12
1121: PUSH
1122: LD_VAR 0 2
1126: ARRAY
1127: PPUSH
1128: LD_VAR 0 3
1132: PUSH
1133: LD_INT 1
1135: ARRAY
1136: PPUSH
1137: CALL_OW 250
1141: PPUSH
1142: LD_VAR 0 3
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: PPUSH
1151: CALL_OW 251
1155: PPUSH
1156: LD_INT 50
1158: PPUSH
1159: LD_INT 0
1161: PPUSH
1162: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1166: LD_ADDR_EXP 13
1170: PUSH
1171: LD_EXP 13
1175: PUSH
1176: LD_EXP 12
1180: PUSH
1181: LD_VAR 0 2
1185: ARRAY
1186: ADD
1187: ST_TO_ADDR
// end ;
1188: GO 1114
1190: POP
1191: POP
// end else
1192: GO 1270
// begin for i in apemans do
1194: LD_ADDR_VAR 0 2
1198: PUSH
1199: LD_EXP 12
1203: PUSH
1204: FOR_IN
1205: IFFALSE 1268
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1207: LD_VAR 0 2
1211: PPUSH
1212: LD_VAR 0 3
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PPUSH
1221: CALL_OW 250
1225: PPUSH
1226: LD_VAR 0 3
1230: PUSH
1231: LD_INT 1
1233: ARRAY
1234: PPUSH
1235: CALL_OW 251
1239: PPUSH
1240: LD_INT 50
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1250: LD_ADDR_EXP 13
1254: PUSH
1255: LD_EXP 13
1259: PUSH
1260: LD_VAR 0 2
1264: ADD
1265: ST_TO_ADDR
// end ;
1266: GO 1204
1268: POP
1269: POP
// end ; end ;
1270: LD_VAR 0 1
1274: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1275: LD_INT 0
1277: PPUSH
1278: PPUSH
1279: PPUSH
1280: PPUSH
1281: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1282: LD_ADDR_VAR 0 4
1286: PUSH
1287: LD_INT 22
1289: PUSH
1290: LD_INT 1
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 21
1299: PUSH
1300: LD_INT 3
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 30
1309: PUSH
1310: LD_INT 0
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: PPUSH
1322: CALL_OW 69
1326: ST_TO_ADDR
// uc_side = 1 ;
1327: LD_ADDR_OWVAR 20
1331: PUSH
1332: LD_INT 1
1334: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1335: LD_ADDR_VAR 0 5
1339: PUSH
1340: LD_STRING vehiclesInDelta
1342: PPUSH
1343: EMPTY
1344: PPUSH
1345: CALL_OW 30
1349: ST_TO_ADDR
// for i = 1 to vehicles do
1350: LD_ADDR_VAR 0 2
1354: PUSH
1355: DOUBLE
1356: LD_INT 1
1358: DEC
1359: ST_TO_ADDR
1360: LD_VAR 0 5
1364: PUSH
1365: FOR_TO
1366: IFFALSE 1569
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1368: LD_VAR 0 5
1372: PUSH
1373: LD_VAR 0 2
1377: PUSH
1378: LD_INT 4
1380: PLUS
1381: ARRAY
1382: PUSH
1383: LD_INT 11
1385: EQUAL
1386: PUSH
1387: LD_VAR 0 5
1391: PUSH
1392: LD_VAR 0 2
1396: ARRAY
1397: PUSH
1398: LD_INT 3
1400: EQUAL
1401: OR
1402: IFFALSE 1553
// begin uc_nation = vehicles [ i ] ;
1404: LD_ADDR_OWVAR 21
1408: PUSH
1409: LD_VAR 0 5
1413: PUSH
1414: LD_VAR 0 2
1418: ARRAY
1419: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1420: LD_ADDR_OWVAR 37
1424: PUSH
1425: LD_VAR 0 5
1429: PUSH
1430: LD_VAR 0 2
1434: PUSH
1435: LD_INT 1
1437: PLUS
1438: ARRAY
1439: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1440: LD_ADDR_OWVAR 39
1444: PUSH
1445: LD_VAR 0 5
1449: PUSH
1450: LD_VAR 0 2
1454: PUSH
1455: LD_INT 2
1457: PLUS
1458: ARRAY
1459: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1460: LD_ADDR_OWVAR 38
1464: PUSH
1465: LD_VAR 0 5
1469: PUSH
1470: LD_VAR 0 2
1474: PUSH
1475: LD_INT 3
1477: PLUS
1478: ARRAY
1479: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_VAR 0 5
1489: PUSH
1490: LD_VAR 0 2
1494: PUSH
1495: LD_INT 4
1497: PLUS
1498: ARRAY
1499: ST_TO_ADDR
// veh = CreateVehicle ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: CALL_OW 45
1509: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1510: LD_VAR 0 3
1514: PPUSH
1515: LD_VAR 0 4
1519: PUSH
1520: LD_INT 1
1522: ARRAY
1523: PPUSH
1524: CALL_OW 250
1528: PPUSH
1529: LD_VAR 0 4
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PPUSH
1538: CALL_OW 251
1542: PPUSH
1543: LD_INT 40
1545: PPUSH
1546: LD_INT 0
1548: PPUSH
1549: CALL_OW 50
// end ; i = i + 4 ;
1553: LD_ADDR_VAR 0 2
1557: PUSH
1558: LD_VAR 0 2
1562: PUSH
1563: LD_INT 4
1565: PLUS
1566: ST_TO_ADDR
// end ;
1567: GO 1365
1569: POP
1570: POP
// end ;
1571: LD_VAR 0 1
1575: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1576: LD_INT 0
1578: PPUSH
1579: PPUSH
1580: PPUSH
1581: PPUSH
1582: PPUSH
// uc_side = 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// uc_nation = 1 ;
1591: LD_ADDR_OWVAR 21
1595: PUSH
1596: LD_INT 1
1598: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1599: LD_ADDR_VAR 0 4
1603: PUSH
1604: LD_INT 22
1606: PUSH
1607: LD_INT 1
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: PUSH
1614: LD_INT 21
1616: PUSH
1617: LD_INT 3
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PUSH
1624: LD_INT 30
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: PPUSH
1639: CALL_OW 69
1643: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1644: LD_INT 22
1646: PUSH
1647: LD_INT 1
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 25
1656: PUSH
1657: LD_INT 4
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 26
1666: PUSH
1667: LD_INT 1
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: LIST
1678: PUSH
1679: EMPTY
1680: LIST
1681: PPUSH
1682: CALL_OW 69
1686: PUSH
1687: LD_EXP 1
1691: PUSH
1692: LD_EXP 7
1696: PUSH
1697: LD_EXP 6
1701: PUSH
1702: LD_EXP 5
1706: PUSH
1707: LD_EXP 2
1711: PUSH
1712: LD_EXP 3
1716: PUSH
1717: LD_EXP 8
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: DIFF
1731: IFFALSE 1832
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1733: LD_ADDR_EXP 15
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 4
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 26
1760: PUSH
1761: LD_INT 1
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: PPUSH
1776: CALL_OW 69
1780: PUSH
1781: LD_EXP 1
1785: PUSH
1786: LD_EXP 7
1790: PUSH
1791: LD_EXP 6
1795: PUSH
1796: LD_EXP 5
1800: PUSH
1801: LD_EXP 2
1805: PUSH
1806: LD_EXP 3
1810: PUSH
1811: LD_EXP 8
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: DIFF
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: ST_TO_ADDR
1830: GO 1979
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1832: LD_ADDR_VAR 0 5
1836: PUSH
1837: LD_INT 22
1839: PUSH
1840: LD_INT 1
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: LD_INT 26
1849: PUSH
1850: LD_INT 1
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: EMPTY
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 1
1873: PUSH
1874: LD_EXP 7
1878: PUSH
1879: LD_EXP 6
1883: PUSH
1884: LD_EXP 5
1888: PUSH
1889: LD_EXP 2
1893: PUSH
1894: LD_EXP 3
1898: PUSH
1899: LD_EXP 8
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: DIFF
1913: ST_TO_ADDR
// if filter then
1914: LD_VAR 0 5
1918: IFFALSE 1979
// for i in filter do
1920: LD_ADDR_VAR 0 2
1924: PUSH
1925: LD_VAR 0 5
1929: PUSH
1930: FOR_IN
1931: IFFALSE 1977
// if GetSkill ( i , 4 ) >= 4 then
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_INT 4
1940: PPUSH
1941: CALL_OW 259
1945: PUSH
1946: LD_INT 4
1948: GREATEREQUAL
1949: IFFALSE 1975
// begin deltaDoctor := i ;
1951: LD_ADDR_EXP 15
1955: PUSH
1956: LD_VAR 0 2
1960: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
1961: LD_EXP 15
1965: PPUSH
1966: LD_INT 4
1968: PPUSH
1969: CALL_OW 336
// break ;
1973: GO 1977
// end ;
1975: GO 1930
1977: POP
1978: POP
// end ; for i = 1 to 7 do
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: DOUBLE
1985: LD_INT 1
1987: DEC
1988: ST_TO_ADDR
1989: LD_INT 7
1991: PUSH
1992: FOR_TO
1993: IFFALSE 2130
// begin hc_gallery =  ;
1995: LD_ADDR_OWVAR 33
1999: PUSH
2000: LD_STRING 
2002: ST_TO_ADDR
// hc_name =  ;
2003: LD_ADDR_OWVAR 26
2007: PUSH
2008: LD_STRING 
2010: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2011: LD_INT 0
2013: PPUSH
2014: LD_INT 1
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: LD_INT 3
2022: PUSH
2023: LD_INT 4
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 1
2034: PPUSH
2035: LD_INT 4
2037: PPUSH
2038: CALL_OW 12
2042: ARRAY
2043: PPUSH
2044: LD_INT 3
2046: PPUSH
2047: LD_INT 5
2049: PPUSH
2050: CALL_OW 12
2054: PPUSH
2055: CALL_OW 380
// un = CreateHuman ;
2059: LD_ADDR_VAR 0 3
2063: PUSH
2064: CALL_OW 44
2068: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2069: LD_ADDR_EXP 11
2073: PUSH
2074: LD_EXP 11
2078: PUSH
2079: LD_VAR 0 3
2083: ADD
2084: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_VAR 0 4
2094: PUSH
2095: LD_INT 1
2097: ARRAY
2098: PPUSH
2099: CALL_OW 250
2103: PPUSH
2104: LD_VAR 0 4
2108: PUSH
2109: LD_INT 1
2111: ARRAY
2112: PPUSH
2113: CALL_OW 251
2117: PPUSH
2118: LD_INT 15
2120: PPUSH
2121: LD_INT 0
2123: PPUSH
2124: CALL_OW 50
// end ;
2128: GO 1992
2130: POP
2131: POP
// if deltaDoctor then
2132: LD_EXP 15
2136: IFFALSE 2140
// exit ;
2138: GO 2222
// hc_gallery =  ;
2140: LD_ADDR_OWVAR 33
2144: PUSH
2145: LD_STRING 
2147: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2148: LD_ADDR_OWVAR 26
2152: PUSH
2153: LD_STRING Dr. Adam Charles Dawkins
2155: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2156: LD_INT 1
2158: PPUSH
2159: LD_INT 4
2161: PPUSH
2162: LD_INT 6
2164: PPUSH
2165: CALL_OW 380
// deltaDoctor = CreateHuman ;
2169: LD_ADDR_EXP 15
2173: PUSH
2174: CALL_OW 44
2178: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2179: LD_EXP 15
2183: PPUSH
2184: LD_VAR 0 4
2188: PUSH
2189: LD_INT 1
2191: ARRAY
2192: PPUSH
2193: CALL_OW 250
2197: PPUSH
2198: LD_VAR 0 4
2202: PUSH
2203: LD_INT 1
2205: ARRAY
2206: PPUSH
2207: CALL_OW 251
2211: PPUSH
2212: LD_INT 5
2214: PPUSH
2215: LD_INT 0
2217: PPUSH
2218: CALL_OW 50
// end ; end_of_file
2222: LD_VAR 0 1
2226: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2227: LD_INT 0
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2236: LD_ADDR_VAR 0 5
2240: PUSH
2241: LD_STRING buildingsInDelta
2243: PPUSH
2244: EMPTY
2245: PPUSH
2246: CALL_OW 30
2250: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2251: LD_INT 68
2253: PPUSH
2254: LD_INT 40
2256: PPUSH
2257: LD_INT 1
2259: PPUSH
2260: CALL_OW 441
// uc_side = 1 ;
2264: LD_ADDR_OWVAR 20
2268: PUSH
2269: LD_INT 1
2271: ST_TO_ADDR
// uc_nation = 1 ;
2272: LD_ADDR_OWVAR 21
2276: PUSH
2277: LD_INT 1
2279: ST_TO_ADDR
// for i = 1 to buildings do
2280: LD_ADDR_VAR 0 2
2284: PUSH
2285: DOUBLE
2286: LD_INT 1
2288: DEC
2289: ST_TO_ADDR
2290: LD_VAR 0 5
2294: PUSH
2295: FOR_TO
2296: IFFALSE 2594
// begin bc_type = buildings [ i ] [ 1 ] ;
2298: LD_ADDR_OWVAR 42
2302: PUSH
2303: LD_VAR 0 5
2307: PUSH
2308: LD_VAR 0 2
2312: ARRAY
2313: PUSH
2314: LD_INT 1
2316: ARRAY
2317: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2318: LD_ADDR_OWVAR 43
2322: PUSH
2323: LD_VAR 0 5
2327: PUSH
2328: LD_VAR 0 2
2332: ARRAY
2333: PUSH
2334: LD_INT 2
2336: ARRAY
2337: ST_TO_ADDR
// if bc_type = b_lab then
2338: LD_OWVAR 42
2342: PUSH
2343: LD_INT 6
2345: EQUAL
2346: IFFALSE 2364
// begin bc_kind1 = b_lab_basic ;
2348: LD_ADDR_OWVAR 44
2352: PUSH
2353: LD_INT 9
2355: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2356: LD_ADDR_OWVAR 45
2360: PUSH
2361: LD_INT 9
2363: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2364: LD_OWVAR 42
2368: PUSH
2369: LD_INT 7
2371: EQUAL
2372: PUSH
2373: LD_OWVAR 42
2377: PUSH
2378: LD_INT 8
2380: EQUAL
2381: OR
2382: IFFALSE 2498
// begin if buildings [ i ] [ 6 ] then
2384: LD_VAR 0 5
2388: PUSH
2389: LD_VAR 0 2
2393: ARRAY
2394: PUSH
2395: LD_INT 6
2397: ARRAY
2398: IFFALSE 2420
// bc_kind1 = buildings [ i ] [ 6 ] ;
2400: LD_ADDR_OWVAR 44
2404: PUSH
2405: LD_VAR 0 5
2409: PUSH
2410: LD_VAR 0 2
2414: ARRAY
2415: PUSH
2416: LD_INT 6
2418: ARRAY
2419: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2420: LD_VAR 0 5
2424: PUSH
2425: LD_VAR 0 2
2429: ARRAY
2430: PUSH
2431: LD_INT 7
2433: ARRAY
2434: IFFALSE 2456
// bc_kind2 = buildings [ i ] [ 7 ] ;
2436: LD_ADDR_OWVAR 45
2440: PUSH
2441: LD_VAR 0 5
2445: PUSH
2446: LD_VAR 0 2
2450: ARRAY
2451: PUSH
2452: LD_INT 7
2454: ARRAY
2455: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2456: LD_VAR 0 5
2460: PUSH
2461: LD_VAR 0 2
2465: ARRAY
2466: PUSH
2467: LD_INT 6
2469: ARRAY
2470: NOT
2471: PUSH
2472: LD_VAR 0 5
2476: PUSH
2477: LD_VAR 0 2
2481: ARRAY
2482: PUSH
2483: LD_INT 7
2485: ARRAY
2486: NOT
2487: AND
2488: IFFALSE 2498
// bc_type := b_lab ;
2490: LD_ADDR_OWVAR 42
2494: PUSH
2495: LD_INT 6
2497: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_VAR 0 5
2507: PUSH
2508: LD_VAR 0 2
2512: ARRAY
2513: PUSH
2514: LD_INT 3
2516: ARRAY
2517: PPUSH
2518: LD_VAR 0 5
2522: PUSH
2523: LD_VAR 0 2
2527: ARRAY
2528: PUSH
2529: LD_INT 4
2531: ARRAY
2532: PPUSH
2533: LD_VAR 0 5
2537: PUSH
2538: LD_VAR 0 2
2542: ARRAY
2543: PUSH
2544: LD_INT 5
2546: ARRAY
2547: PPUSH
2548: CALL_OW 47
2552: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2553: LD_VAR 0 4
2557: PPUSH
2558: CALL_OW 266
2562: PUSH
2563: LD_INT 32
2565: EQUAL
2566: IFFALSE 2592
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2568: LD_VAR 0 4
2572: PPUSH
2573: LD_VAR 0 5
2577: PUSH
2578: LD_VAR 0 2
2582: ARRAY
2583: PUSH
2584: LD_INT 8
2586: ARRAY
2587: PPUSH
2588: CALL_OW 431
// end ;
2592: GO 2295
2594: POP
2595: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2596: LD_ADDR_VAR 0 6
2600: PUSH
2601: LD_INT 22
2603: PUSH
2604: LD_INT 1
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 2
2613: PUSH
2614: LD_INT 30
2616: PUSH
2617: LD_INT 6
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: LD_INT 30
2626: PUSH
2627: LD_INT 7
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: LD_INT 30
2636: PUSH
2637: LD_INT 8
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: PPUSH
2654: CALL_OW 69
2658: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2659: LD_ADDR_VAR 0 7
2663: PUSH
2664: LD_INT 22
2666: PUSH
2667: LD_INT 1
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PUSH
2674: LD_INT 30
2676: PUSH
2677: LD_INT 0
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 69
2692: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2693: LD_VAR 0 6
2697: PUSH
2698: LD_INT 0
2700: GREATER
2701: PUSH
2702: LD_VAR 0 7
2706: PUSH
2707: LD_INT 0
2709: GREATER
2710: AND
2711: IFFALSE 2721
// baseCorrect = 1 ;
2713: LD_ADDR_EXP 17
2717: PUSH
2718: LD_INT 1
2720: ST_TO_ADDR
// if baseCorrect = 0 then
2721: LD_EXP 17
2725: PUSH
2726: LD_INT 0
2728: EQUAL
2729: IFFALSE 3102
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2731: LD_ADDR_VAR 0 2
2735: PUSH
2736: LD_INT 22
2738: PUSH
2739: LD_INT 1
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: LD_INT 21
2748: PUSH
2749: LD_INT 3
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PPUSH
2760: CALL_OW 69
2764: PUSH
2765: FOR_IN
2766: IFFALSE 2779
// RemoveUnit ( i ) ;
2768: LD_VAR 0 2
2772: PPUSH
2773: CALL_OW 64
2777: GO 2765
2779: POP
2780: POP
// uc_nation = 1 ;
2781: LD_ADDR_OWVAR 21
2785: PUSH
2786: LD_INT 1
2788: ST_TO_ADDR
// uc_side = 1 ;
2789: LD_ADDR_OWVAR 20
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// bc_level = 5 ;
2797: LD_ADDR_OWVAR 43
2801: PUSH
2802: LD_INT 5
2804: ST_TO_ADDR
// bc_type = b_depot ;
2805: LD_ADDR_OWVAR 42
2809: PUSH
2810: LD_INT 0
2812: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2813: LD_INT 50
2815: PPUSH
2816: LD_INT 22
2818: PPUSH
2819: LD_INT 0
2821: PPUSH
2822: CALL_OW 47
// bc_type = b_bunker ;
2826: LD_ADDR_OWVAR 42
2830: PUSH
2831: LD_INT 32
2833: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2834: LD_ADDR_VAR 0 4
2838: PUSH
2839: LD_INT 68
2841: PPUSH
2842: LD_INT 24
2844: PPUSH
2845: LD_INT 4
2847: PPUSH
2848: CALL_OW 47
2852: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2853: LD_VAR 0 4
2857: PPUSH
2858: LD_INT 4
2860: PUSH
2861: LD_INT 11
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PUSH
2868: LD_INT 1
2870: PPUSH
2871: LD_INT 2
2873: PPUSH
2874: CALL_OW 12
2878: ARRAY
2879: PPUSH
2880: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2884: LD_ADDR_VAR 0 4
2888: PUSH
2889: LD_INT 71
2891: PPUSH
2892: LD_INT 34
2894: PPUSH
2895: LD_INT 4
2897: PPUSH
2898: CALL_OW 47
2902: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2903: LD_VAR 0 4
2907: PPUSH
2908: LD_INT 4
2910: PUSH
2911: LD_INT 11
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 1
2920: PPUSH
2921: LD_INT 2
2923: PPUSH
2924: CALL_OW 12
2928: ARRAY
2929: PPUSH
2930: CALL_OW 431
// bc_type = 31 ;
2934: LD_ADDR_OWVAR 42
2938: PUSH
2939: LD_INT 31
2941: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
2942: LD_INT 51
2944: PPUSH
2945: LD_INT 7
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: CALL_OW 47
// bc_type = b_oil_mine ;
2955: LD_ADDR_OWVAR 42
2959: PUSH
2960: LD_INT 29
2962: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
2963: LD_INT 68
2965: PPUSH
2966: LD_INT 40
2968: PPUSH
2969: LD_INT 1
2971: PPUSH
2972: CALL_OW 47
// bc_type = b_workshop ;
2976: LD_ADDR_OWVAR 42
2980: PUSH
2981: LD_INT 2
2983: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2984: LD_INT 38
2986: PPUSH
2987: LD_INT 20
2989: PPUSH
2990: LD_INT 2
2992: PPUSH
2993: CALL_OW 47
// bc_type = b_armoury ;
2997: LD_ADDR_OWVAR 42
3001: PUSH
3002: LD_INT 4
3004: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3005: LD_INT 38
3007: PPUSH
3008: LD_INT 20
3010: PPUSH
3011: LD_INT 2
3013: PPUSH
3014: CALL_OW 47
// bc_type = b_solar_power ;
3018: LD_ADDR_OWVAR 42
3022: PUSH
3023: LD_INT 27
3025: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3026: LD_INT 46
3028: PPUSH
3029: LD_INT 12
3031: PPUSH
3032: LD_INT 1
3034: PPUSH
3035: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3039: LD_INT 48
3041: PPUSH
3042: LD_INT 11
3044: PPUSH
3045: LD_INT 2
3047: PPUSH
3048: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3052: LD_INT 49
3054: PPUSH
3055: LD_INT 11
3057: PPUSH
3058: LD_INT 3
3060: PPUSH
3061: CALL_OW 47
// bc_type = b_lab_half ;
3065: LD_ADDR_OWVAR 42
3069: PUSH
3070: LD_INT 7
3072: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3073: LD_ADDR_OWVAR 44
3077: PUSH
3078: LD_INT 15
3080: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3081: LD_ADDR_OWVAR 45
3085: PUSH
3086: LD_INT 9
3088: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3089: LD_INT 42
3091: PPUSH
3092: LD_INT 15
3094: PPUSH
3095: LD_INT 2
3097: PPUSH
3098: CALL_OW 47
// end ; end ; end_of_file
3102: LD_VAR 0 1
3106: RET
// every 1 do var i , j , tmp ;
3107: GO 3109
3109: DISABLE
3110: LD_INT 0
3112: PPUSH
3113: PPUSH
3114: PPUSH
// begin InGameOn ;
3115: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3119: LD_EXP 19
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: CALL_OW 87
// if IsOK ( Denis ) then
3132: LD_EXP 3
3136: PPUSH
3137: CALL_OW 302
3141: IFFALSE 3169
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3143: LD_INT 6
3145: PPUSH
3146: LD_INT 1
3148: PPUSH
3149: LD_INT 2
3151: PPUSH
3152: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3156: LD_INT 20
3158: PPUSH
3159: LD_INT 1
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3169: LD_EXP 1
3173: PPUSH
3174: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3178: LD_EXP 1
3182: PPUSH
3183: LD_EXP 15
3187: PPUSH
3188: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3192: LD_INT 35
3194: PPUSH
3195: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3199: LD_EXP 15
3203: PPUSH
3204: LD_EXP 1
3208: PPUSH
3209: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3213: LD_EXP 1
3217: PPUSH
3218: LD_EXP 15
3222: PPUSH
3223: CALL_OW 296
3227: PUSH
3228: LD_INT 5
3230: LESS
3231: IFFALSE 3192
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3233: LD_EXP 15
3237: PPUSH
3238: LD_EXP 1
3242: PPUSH
3243: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3247: LD_EXP 1
3251: PPUSH
3252: LD_STRING D1-JMM-1
3254: PPUSH
3255: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3259: LD_EXP 15
3263: PPUSH
3264: LD_STRING D1-Sci-1
3266: PPUSH
3267: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3271: LD_EXP 1
3275: PUSH
3276: LD_EXP 15
3280: PUSH
3281: LD_EXP 3
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: LIST
3290: PPUSH
3291: LD_EXP 19
3295: PUSH
3296: LD_INT 1
3298: ARRAY
3299: PPUSH
3300: CALL_OW 120
// end ;
3304: PPOPN 3
3306: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3307: LD_EXP 1
3311: PPUSH
3312: CALL_OW 310
3316: PUSH
3317: LD_EXP 19
3321: PUSH
3322: LD_INT 1
3324: ARRAY
3325: EQUAL
3326: PUSH
3327: LD_EXP 15
3331: PPUSH
3332: CALL_OW 310
3336: PUSH
3337: LD_EXP 19
3341: PUSH
3342: LD_INT 1
3344: ARRAY
3345: EQUAL
3346: AND
3347: IFFALSE 3893
3349: GO 3351
3351: DISABLE
3352: LD_INT 0
3354: PPUSH
3355: PPUSH
3356: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3357: LD_EXP 19
3361: PUSH
3362: LD_INT 1
3364: ARRAY
3365: PPUSH
3366: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3370: LD_EXP 1
3374: PPUSH
3375: LD_STRING D1-JMM-2
3377: PPUSH
3378: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3382: LD_EXP 15
3386: PPUSH
3387: LD_STRING D1-Sci-2
3389: PPUSH
3390: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3394: LD_EXP 1
3398: PPUSH
3399: LD_STRING D1-JMM-3
3401: PPUSH
3402: CALL_OW 88
// if IsOK ( Denis ) then
3406: LD_EXP 3
3410: PPUSH
3411: CALL_OW 302
3415: IFFALSE 3431
// Say ( DeltaDoctor , D1-Sci-3 ) else
3417: LD_EXP 15
3421: PPUSH
3422: LD_STRING D1-Sci-3
3424: PPUSH
3425: CALL_OW 88
3429: GO 3443
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3431: LD_EXP 15
3435: PPUSH
3436: LD_STRING D1-Sci-3a
3438: PPUSH
3439: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3443: LD_EXP 1
3447: PPUSH
3448: LD_STRING D1-JMM-4
3450: PPUSH
3451: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3455: LD_ADDR_VAR 0 3
3459: PUSH
3460: LD_INT 22
3462: PUSH
3463: LD_INT 1
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PUSH
3470: LD_INT 25
3472: PUSH
3473: LD_INT 4
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: LD_INT 3
3482: PUSH
3483: LD_INT 54
3485: PUSH
3486: EMPTY
3487: LIST
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: LIST
3497: PPUSH
3498: CALL_OW 69
3502: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3503: LD_ADDR_VAR 0 1
3507: PUSH
3508: LD_INT 22
3510: PUSH
3511: LD_INT 0
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: PPUSH
3518: CALL_OW 69
3522: PUSH
3523: FOR_IN
3524: IFFALSE 3574
// for j in tmp do
3526: LD_ADDR_VAR 0 2
3530: PUSH
3531: LD_VAR 0 3
3535: PUSH
3536: FOR_IN
3537: IFFALSE 3570
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3539: LD_VAR 0 2
3543: PPUSH
3544: LD_VAR 0 1
3548: PPUSH
3549: CALL_OW 250
3553: PPUSH
3554: LD_VAR 0 1
3558: PPUSH
3559: CALL_OW 251
3563: PPUSH
3564: CALL_OW 191
3568: GO 3536
3570: POP
3571: POP
3572: GO 3523
3574: POP
3575: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3576: LD_EXP 15
3580: PPUSH
3581: LD_STRING D1-Sci-4
3583: PPUSH
3584: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3588: LD_EXP 1
3592: PPUSH
3593: LD_STRING D1-JMM-5
3595: PPUSH
3596: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3600: LD_EXP 15
3604: PPUSH
3605: LD_STRING D1-Sci-5
3607: PPUSH
3608: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3612: LD_EXP 1
3616: PPUSH
3617: LD_STRING D1-JMM-6
3619: PPUSH
3620: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3624: LD_EXP 16
3628: PPUSH
3629: LD_STRING D1-Har-6
3631: PPUSH
3632: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3636: LD_EXP 1
3640: PPUSH
3641: LD_STRING D1-JMM-7
3643: PPUSH
3644: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3648: LD_EXP 16
3652: PPUSH
3653: LD_STRING D1-Har-7
3655: PPUSH
3656: CALL_OW 94
// if IsOK ( Denis ) then
3660: LD_EXP 3
3664: PPUSH
3665: CALL_OW 302
3669: IFFALSE 3683
// Say ( JMM , D1-JMM-8 ) ;
3671: LD_EXP 1
3675: PPUSH
3676: LD_STRING D1-JMM-8
3678: PPUSH
3679: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3683: LD_EXP 1
3687: PPUSH
3688: LD_STRING D1-JMM-8a
3690: PPUSH
3691: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3695: LD_EXP 16
3699: PPUSH
3700: LD_STRING D1-Har-8
3702: PPUSH
3703: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3707: LD_EXP 1
3711: PPUSH
3712: LD_STRING D1-JMM-9
3714: PPUSH
3715: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3719: LD_EXP 16
3723: PPUSH
3724: LD_STRING D1-Har-9
3726: PPUSH
3727: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3731: LD_EXP 1
3735: PPUSH
3736: LD_STRING D1-JMM-10
3738: PPUSH
3739: CALL_OW 88
// if IsOK ( Denis ) then
3743: LD_EXP 3
3747: PPUSH
3748: CALL_OW 302
3752: IFFALSE 3766
// Say ( JMM , D1-JMM-10a ) ;
3754: LD_EXP 1
3758: PPUSH
3759: LD_STRING D1-JMM-10a
3761: PPUSH
3762: CALL_OW 88
// SelectAndSaveCharacters ;
3766: CALL 4404 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3770: LD_EXP 19
3774: PUSH
3775: LD_INT 1
3777: ARRAY
3778: PPUSH
3779: CALL_OW 274
3783: PPUSH
3784: LD_INT 1
3786: PPUSH
3787: LD_INT 250
3789: PPUSH
3790: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3794: LD_INT 22
3796: PUSH
3797: LD_INT 1
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: LD_INT 30
3806: PUSH
3807: LD_INT 29
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PPUSH
3818: CALL_OW 69
3822: PUSH
3823: LD_INT 0
3825: GREATER
3826: IFFALSE 3852
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3828: LD_EXP 19
3832: PUSH
3833: LD_INT 1
3835: ARRAY
3836: PPUSH
3837: CALL_OW 274
3841: PPUSH
3842: LD_INT 2
3844: PPUSH
3845: LD_INT 300
3847: PPUSH
3848: CALL_OW 277
// InGameOff ;
3852: CALL_OW 9
// Query ( Q1 ) ;
3856: LD_STRING Q1
3858: PPUSH
3859: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3863: LD_INT 3
3865: PPUSH
3866: LD_INT 1
3868: PPUSH
3869: CALL_OW 424
// if IsInUnit ( JMM ) then
3873: LD_EXP 1
3877: PPUSH
3878: CALL_OW 310
3882: IFFALSE 3893
// ComExitBuilding ( JMM ) ;
3884: LD_EXP 1
3888: PPUSH
3889: CALL_OW 122
// end ;
3893: PPOPN 3
3895: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
3896: LD_INT 3
3898: PPUSH
3899: LD_INT 22
3901: PUSH
3902: LD_INT 1
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PUSH
3909: LD_INT 21
3911: PUSH
3912: LD_INT 1
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: PPUSH
3923: CALL_OW 71
3927: PUSH
3928: LD_INT 0
3930: EQUAL
3931: IFFALSE 4249
3933: GO 3935
3935: DISABLE
3936: LD_INT 0
3938: PPUSH
3939: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) > 0 then
3940: LD_INT 3
3942: PPUSH
3943: LD_INT 21
3945: PUSH
3946: LD_INT 2
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PUSH
3953: LD_INT 3
3955: PUSH
3956: LD_INT 58
3958: PUSH
3959: EMPTY
3960: LIST
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: PPUSH
3970: CALL_OW 70
3974: PUSH
3975: LD_INT 0
3977: GREATER
3978: IFFALSE 4235
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
3980: LD_ADDR_VAR 0 1
3984: PUSH
3985: LD_INT 3
3987: PPUSH
3988: LD_INT 21
3990: PUSH
3991: LD_INT 2
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: PUSH
3998: LD_INT 3
4000: PUSH
4001: LD_INT 58
4003: PUSH
4004: EMPTY
4005: LIST
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: PPUSH
4015: CALL_OW 70
4019: PUSH
4020: FOR_IN
4021: IFFALSE 4221
// begin cargoType = GetCargoType ( i ) ;
4023: LD_ADDR_VAR 0 2
4027: PUSH
4028: LD_VAR 0 1
4032: PPUSH
4033: CALL_OW 288
4037: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4038: LD_VAR 0 1
4042: PPUSH
4043: CALL_OW 264
4047: PUSH
4048: LD_INT 12
4050: EQUAL
4051: IFFALSE 4148
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
4053: LD_ADDR_EXP 14
4057: PUSH
4058: LD_EXP 14
4062: PUSH
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL_OW 248
4072: PUSH
4073: LD_VAR 0 1
4077: PPUSH
4078: CALL_OW 265
4082: PUSH
4083: LD_VAR 0 1
4087: PPUSH
4088: CALL_OW 262
4092: PUSH
4093: LD_VAR 0 1
4097: PPUSH
4098: CALL_OW 263
4102: PUSH
4103: LD_VAR 0 1
4107: PPUSH
4108: CALL_OW 264
4112: PUSH
4113: LD_VAR 0 2
4117: PUSH
4118: LD_VAR 0 1
4122: PPUSH
4123: LD_VAR 0 2
4127: PPUSH
4128: CALL_OW 289
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: PUSH
4142: EMPTY
4143: LIST
4144: ADD
4145: ST_TO_ADDR
// end else
4146: GO 4219
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4148: LD_ADDR_EXP 14
4152: PUSH
4153: LD_EXP 14
4157: PUSH
4158: LD_VAR 0 1
4162: PPUSH
4163: CALL_OW 248
4167: PUSH
4168: LD_VAR 0 1
4172: PPUSH
4173: CALL_OW 265
4177: PUSH
4178: LD_VAR 0 1
4182: PPUSH
4183: CALL_OW 262
4187: PUSH
4188: LD_VAR 0 1
4192: PPUSH
4193: CALL_OW 263
4197: PUSH
4198: LD_VAR 0 1
4202: PPUSH
4203: CALL_OW 264
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: PUSH
4215: EMPTY
4216: LIST
4217: ADD
4218: ST_TO_ADDR
// end ; end ;
4219: GO 4020
4221: POP
4222: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4223: LD_EXP 14
4227: PPUSH
4228: LD_STRING 06_VehiclesIn06_1
4230: PPUSH
4231: CALL_OW 39
// end ; SaveCargos ;
4235: CALL 4252 0 0
// ChangeMap ( 6 , %_cont ) ;
4239: LD_INT 6
4241: PPUSH
4242: LD_STRING %_cont
4244: PPUSH
4245: CALL_OW 340
// end ;
4249: PPOPN 2
4251: END
// export function SaveCargos ; var i ; begin
4252: LD_INT 0
4254: PPUSH
4255: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
4256: LD_ADDR_VAR 0 2
4260: PUSH
4261: LD_INT 3
4263: PPUSH
4264: LD_INT 22
4266: PUSH
4267: LD_INT 1
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: LD_INT 34
4276: PUSH
4277: LD_INT 12
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PPUSH
4288: CALL_OW 70
4292: PUSH
4293: FOR_IN
4294: IFFALSE 4322
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
4296: LD_ADDR_EXP 20
4300: PUSH
4301: LD_EXP 20
4305: PUSH
4306: LD_VAR 0 2
4310: PPUSH
4311: CALL 5509 0 1
4315: PUSH
4316: EMPTY
4317: LIST
4318: ADD
4319: ST_TO_ADDR
4320: GO 4293
4322: POP
4323: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
4324: LD_EXP 20
4328: PPUSH
4329: LD_STRING 06_ResourcesInCargo06_1
4331: PPUSH
4332: CALL_OW 39
// end ; end_of_file
4336: LD_VAR 0 1
4340: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4341: LD_INT 0
4343: PPUSH
4344: PPUSH
// if exist_mode then
4345: LD_VAR 0 2
4349: IFFALSE 4374
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
4351: LD_ADDR_VAR 0 4
4355: PUSH
4356: LD_EXP 22
4360: PUSH
4361: LD_VAR 0 1
4365: STR
4366: PPUSH
4367: CALL_OW 34
4371: ST_TO_ADDR
4372: GO 4389
// unit := NewCharacter ( ident ) ;
4374: LD_ADDR_VAR 0 4
4378: PUSH
4379: LD_VAR 0 1
4383: PPUSH
4384: CALL_OW 25
4388: ST_TO_ADDR
// result := unit ;
4389: LD_ADDR_VAR 0 3
4393: PUSH
4394: LD_VAR 0 4
4398: ST_TO_ADDR
// end ;
4399: LD_VAR 0 3
4403: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test , rnd ; begin
4404: LD_INT 0
4406: PPUSH
4407: PPUSH
4408: PPUSH
4409: PPUSH
4410: PPUSH
4411: PPUSH
// rnd = [ 5 , rand ( 4 , 5 ) , 4 ] [ Difficulty ] ;
4412: LD_ADDR_VAR 0 6
4416: PUSH
4417: LD_INT 5
4419: PUSH
4420: LD_INT 4
4422: PPUSH
4423: LD_INT 5
4425: PPUSH
4426: CALL_OW 12
4430: PUSH
4431: LD_INT 4
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: LIST
4438: PUSH
4439: LD_OWVAR 67
4443: ARRAY
4444: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 21
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 69
4529: PUSH
4530: LD_EXP 1
4534: PUSH
4535: LD_EXP 15
4539: PUSH
4540: LD_EXP 3
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: DIFF
4550: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , [ 5 , 4 , 4 ] [ Difficulty ] , rnd , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4551: LD_ADDR_VAR 0 4
4555: PUSH
4556: LD_STRING text
4558: PPUSH
4559: LD_INT 5
4561: PUSH
4562: LD_INT 4
4564: PUSH
4565: LD_INT 4
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: PUSH
4573: LD_OWVAR 67
4577: ARRAY
4578: PPUSH
4579: LD_VAR 0 6
4583: PPUSH
4584: LD_INT -5
4586: PUSH
4587: LD_EXP 1
4591: PUSH
4592: LD_INT -6
4594: PUSH
4595: LD_INT -2
4597: PUSH
4598: LD_INT -3
4600: PUSH
4601: LD_INT -5
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: PUSH
4612: LD_VAR 0 3
4616: ADD
4617: PUSH
4618: LD_INT -6
4620: PUSH
4621: LD_INT -4
4623: PUSH
4624: LD_EXP 3
4628: PUSH
4629: LD_EXP 15
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ADD
4640: PPUSH
4641: LD_INT 1
4643: PUSH
4644: LD_INT 3
4646: PUSH
4647: LD_INT 2
4649: PUSH
4650: LD_INT 1
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 4
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: PPUSH
4666: CALL_OW 42
4670: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4671: LD_EXP 1
4675: PPUSH
4676: LD_EXP 21
4680: PUSH
4681: LD_STRING JMM
4683: STR
4684: PPUSH
4685: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4689: LD_EXP 15
4693: PPUSH
4694: LD_STRING DeltaDoctor
4696: PPUSH
4697: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4701: LD_EXP 3
4705: PPUSH
4706: LD_EXP 21
4710: PUSH
4711: LD_STRING Denis
4713: STR
4714: PPUSH
4715: CALL_OW 38
// if Lisa in selectedPeople then
4719: LD_EXP 4
4723: PUSH
4724: LD_VAR 0 4
4728: IN
4729: IFFALSE 4761
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4731: LD_EXP 4
4735: PPUSH
4736: LD_EXP 21
4740: PUSH
4741: LD_STRING Lisa
4743: STR
4744: PPUSH
4745: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4749: LD_INT 1
4751: PPUSH
4752: LD_STRING LisaIn06
4754: PPUSH
4755: CALL_OW 39
// end else
4759: GO 4782
// if IsOk ( Lisa ) then
4761: LD_EXP 4
4765: PPUSH
4766: CALL_OW 302
4770: IFFALSE 4782
// SaveVariable ( 1 , LisaStayInDelta ) ;
4772: LD_INT 1
4774: PPUSH
4775: LD_STRING LisaStayInDelta
4777: PPUSH
4778: CALL_OW 39
// if Bobby in selectedPeople then
4782: LD_EXP 6
4786: PUSH
4787: LD_VAR 0 4
4791: IN
4792: IFFALSE 4824
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4794: LD_EXP 6
4798: PPUSH
4799: LD_EXP 21
4803: PUSH
4804: LD_STRING Bobby
4806: STR
4807: PPUSH
4808: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4812: LD_INT 1
4814: PPUSH
4815: LD_STRING BobbyIn06
4817: PPUSH
4818: CALL_OW 39
// end else
4822: GO 4845
// if IsOk ( Bobby ) then
4824: LD_EXP 6
4828: PPUSH
4829: CALL_OW 302
4833: IFFALSE 4845
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4835: LD_INT 1
4837: PPUSH
4838: LD_STRING BobbyStayInDelta
4840: PPUSH
4841: CALL_OW 39
// if Cyrus in selectedPeople then
4845: LD_EXP 7
4849: PUSH
4850: LD_VAR 0 4
4854: IN
4855: IFFALSE 4887
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4857: LD_EXP 7
4861: PPUSH
4862: LD_EXP 21
4866: PUSH
4867: LD_STRING Cyrus
4869: STR
4870: PPUSH
4871: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4875: LD_INT 1
4877: PPUSH
4878: LD_STRING CyrusIn06
4880: PPUSH
4881: CALL_OW 39
// end else
4885: GO 4908
// if IsOk ( Cyrus ) then
4887: LD_EXP 7
4891: PPUSH
4892: CALL_OW 302
4896: IFFALSE 4908
// SaveVariable ( 1 , CyrusStayInDelta ) ;
4898: LD_INT 1
4900: PPUSH
4901: LD_STRING CyrusStayInDelta
4903: PPUSH
4904: CALL_OW 39
// if Frank in selectedPeople then
4908: LD_EXP 5
4912: PUSH
4913: LD_VAR 0 4
4917: IN
4918: IFFALSE 4950
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4920: LD_EXP 5
4924: PPUSH
4925: LD_EXP 21
4929: PUSH
4930: LD_STRING Frank
4932: STR
4933: PPUSH
4934: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4938: LD_INT 1
4940: PPUSH
4941: LD_STRING FrankIn06
4943: PPUSH
4944: CALL_OW 39
// end else
4948: GO 4971
// if IsOk ( Frank ) then
4950: LD_EXP 5
4954: PPUSH
4955: CALL_OW 302
4959: IFFALSE 4971
// SaveVariable ( 1 , FrankStayInDelta ) ;
4961: LD_INT 1
4963: PPUSH
4964: LD_STRING FrankStayInDelta
4966: PPUSH
4967: CALL_OW 39
// if Brown in selectedPeople then
4971: LD_EXP 8
4975: PUSH
4976: LD_VAR 0 4
4980: IN
4981: IFFALSE 5013
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4983: LD_EXP 8
4987: PPUSH
4988: LD_EXP 21
4992: PUSH
4993: LD_STRING Brown
4995: STR
4996: PPUSH
4997: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5001: LD_INT 1
5003: PPUSH
5004: LD_STRING BrownIn06
5006: PPUSH
5007: CALL_OW 39
// end else
5011: GO 5034
// if IsOk ( Brown ) then
5013: LD_EXP 8
5017: PPUSH
5018: CALL_OW 302
5022: IFFALSE 5034
// SaveVariable ( 1 , BrownStayInDelta ) ;
5024: LD_INT 1
5026: PPUSH
5027: LD_STRING BrownStayInDelta
5029: PPUSH
5030: CALL_OW 39
// if Donaldson in selectedPeople then
5034: LD_EXP 9
5038: PUSH
5039: LD_VAR 0 4
5043: IN
5044: IFFALSE 5076
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5046: LD_EXP 9
5050: PPUSH
5051: LD_EXP 21
5055: PUSH
5056: LD_STRING Donaldson
5058: STR
5059: PPUSH
5060: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5064: LD_INT 1
5066: PPUSH
5067: LD_STRING DonaldsonIn06
5069: PPUSH
5070: CALL_OW 39
// end else
5074: GO 5097
// if IsOk ( Donaldson ) then
5076: LD_EXP 9
5080: PPUSH
5081: CALL_OW 302
5085: IFFALSE 5097
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5087: LD_INT 1
5089: PPUSH
5090: LD_STRING DonaldsonStayInDelta
5092: PPUSH
5093: CALL_OW 39
// if Gladstone in selectedPeople then
5097: LD_EXP 2
5101: PUSH
5102: LD_VAR 0 4
5106: IN
5107: IFFALSE 5139
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5109: LD_EXP 2
5113: PPUSH
5114: LD_EXP 21
5118: PUSH
5119: LD_STRING Gladstone
5121: STR
5122: PPUSH
5123: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5127: LD_INT 1
5129: PPUSH
5130: LD_STRING GladstoneIn06
5132: PPUSH
5133: CALL_OW 39
// end else
5137: GO 5160
// if IsOk ( Gladstone ) then
5139: LD_EXP 2
5143: PPUSH
5144: CALL_OW 302
5148: IFFALSE 5160
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5150: LD_INT 1
5152: PPUSH
5153: LD_STRING GladstoneStayInDelta
5155: PPUSH
5156: CALL_OW 39
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5160: LD_INT 22
5162: PUSH
5163: LD_INT 1
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: PUSH
5170: LD_INT 21
5172: PUSH
5173: LD_INT 1
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: PPUSH
5184: CALL_OW 69
5188: PPUSH
5189: LD_INT 4
5191: PPUSH
5192: CALL_OW 235
// for i in selectedPeople do
5196: LD_ADDR_VAR 0 2
5200: PUSH
5201: LD_VAR 0 4
5205: PUSH
5206: FOR_IN
5207: IFFALSE 5223
// SetSide ( i , 1 ) ;
5209: LD_VAR 0 2
5213: PPUSH
5214: LD_INT 1
5216: PPUSH
5217: CALL_OW 235
5221: GO 5206
5223: POP
5224: POP
// for i in yourApemans do
5225: LD_ADDR_VAR 0 2
5229: PUSH
5230: LD_EXP 13
5234: PUSH
5235: FOR_IN
5236: IFFALSE 5252
// SetSide ( i , 1 ) ;
5238: LD_VAR 0 2
5242: PPUSH
5243: LD_INT 1
5245: PPUSH
5246: CALL_OW 235
5250: GO 5235
5252: POP
5253: POP
// SetSide ( JMM , 1 ) ;
5254: LD_EXP 1
5258: PPUSH
5259: LD_INT 1
5261: PPUSH
5262: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
5266: LD_EXP 13
5270: PPUSH
5271: LD_INT 2
5273: PPUSH
5274: LD_INT 5
5276: PPUSH
5277: CALL_OW 237
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5281: LD_EXP 13
5285: PPUSH
5286: LD_STRING ApeIn06
5288: PPUSH
5289: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5293: LD_VAR 0 4
5297: PUSH
5298: LD_EXP 1
5302: PUSH
5303: LD_EXP 4
5307: PUSH
5308: LD_EXP 6
5312: PUSH
5313: LD_EXP 7
5317: PUSH
5318: LD_EXP 5
5322: PUSH
5323: LD_EXP 8
5327: PUSH
5328: LD_EXP 9
5332: PUSH
5333: LD_EXP 2
5337: PUSH
5338: LD_EXP 3
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: DIFF
5354: PPUSH
5355: LD_STRING OthersIn06
5357: PPUSH
5358: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5362: LD_INT 22
5364: PUSH
5365: LD_INT 4
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: PUSH
5372: LD_INT 2
5374: PUSH
5375: LD_INT 25
5377: PUSH
5378: LD_INT 1
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: LD_INT 25
5387: PUSH
5388: LD_INT 2
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: PUSH
5395: LD_INT 25
5397: PUSH
5398: LD_INT 3
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: PUSH
5405: LD_INT 25
5407: PUSH
5408: LD_INT 4
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PPUSH
5426: CALL_OW 69
5430: PUSH
5431: LD_EXP 15
5435: PUSH
5436: LD_EXP 4
5440: PUSH
5441: LD_EXP 6
5445: PUSH
5446: LD_EXP 7
5450: PUSH
5451: LD_EXP 5
5455: PUSH
5456: LD_EXP 8
5460: PUSH
5461: LD_EXP 9
5465: PUSH
5466: LD_EXP 2
5470: PUSH
5471: LD_EXP 3
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: DIFF
5487: PPUSH
5488: LD_STRING OthersStayInDelta
5490: PPUSH
5491: CALL_OW 38
// ComStop ( selectedPeople ) ;
5495: LD_VAR 0 4
5499: PPUSH
5500: CALL_OW 141
// end ;
5504: LD_VAR 0 1
5508: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
5509: LD_INT 0
5511: PPUSH
5512: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5513: LD_ADDR_VAR 0 2
5517: PUSH
5518: LD_VAR 0 1
5522: PPUSH
5523: LD_INT 1
5525: PPUSH
5526: CALL_OW 289
5530: PUSH
5531: LD_VAR 0 1
5535: PPUSH
5536: LD_INT 2
5538: PPUSH
5539: CALL_OW 289
5543: PUSH
5544: LD_VAR 0 1
5548: PPUSH
5549: LD_INT 3
5551: PPUSH
5552: CALL_OW 289
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: LIST
5561: ST_TO_ADDR
// end ; end_of_file
5562: LD_VAR 0 2
5566: RET
// on Command ( comandid ) do var i ;
5567: LD_INT 0
5569: PPUSH
// begin if comandid = 65 then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_INT 65
5577: EQUAL
5578: IFFALSE 5619
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5580: LD_ADDR_VAR 0 2
5584: PUSH
5585: LD_INT 22
5587: PUSH
5588: LD_INT 1
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: PPUSH
5598: CALL_OW 69
5602: PUSH
5603: FOR_IN
5604: IFFALSE 5617
// ComStop ( i ) ;
5606: LD_VAR 0 2
5610: PPUSH
5611: CALL_OW 141
5615: GO 5603
5617: POP
5618: POP
// end ;
5619: PPOPN 2
5621: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5622: LD_INT 0
5624: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_INT 22
5632: PUSH
5633: LD_INT 1
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: PUSH
5640: LD_INT 21
5642: PUSH
5643: LD_INT 3
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: LD_INT 30
5652: PUSH
5653: LD_INT 0
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: LIST
5664: PPUSH
5665: CALL_OW 69
5669: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5670: LD_VAR 0 1
5674: PPUSH
5675: LD_VAR 0 3
5679: PUSH
5680: LD_INT 1
5682: ARRAY
5683: PPUSH
5684: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5688: LD_VAR 0 1
5692: PPUSH
5693: LD_INT 4
5695: PPUSH
5696: CALL_OW 235
// end ;
5700: PPOPN 3
5702: END
