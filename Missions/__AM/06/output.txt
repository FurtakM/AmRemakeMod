// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 17
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 18
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources = [ ] ;
  59: LD_ADDR_EXP 20
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 21
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 22
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2233 0 0
// LoadVehicles ;
  86: CALL 1275 0 0
// PrepareHeroes ;
  90: CALL 162 0 0
// PrepareRandoms ;
  94: CALL 1576 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
  98: LD_ADDR_EXP 19
 102: PUSH
 103: LD_INT 22
 105: PUSH
 106: LD_INT 1
 108: PUSH
 109: EMPTY
 110: LIST
 111: LIST
 112: PUSH
 113: LD_INT 2
 115: PUSH
 116: LD_INT 30
 118: PUSH
 119: LD_INT 6
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PUSH
 126: LD_INT 30
 128: PUSH
 129: LD_INT 7
 131: PUSH
 132: EMPTY
 133: LIST
 134: LIST
 135: PUSH
 136: LD_INT 30
 138: PUSH
 139: LD_INT 8
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: LIST
 150: LIST
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: PPUSH
 156: CALL_OW 69
 160: ST_TO_ADDR
// end ; end_of_file
 161: END
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 162: LD_INT 0
 164: PPUSH
 165: PPUSH
 166: PPUSH
 167: PPUSH
 168: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 169: LD_ADDR_VAR 0 3
 173: PUSH
 174: LD_INT 22
 176: PUSH
 177: LD_INT 1
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: LD_INT 21
 186: PUSH
 187: LD_INT 3
 189: PUSH
 190: EMPTY
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 30
 196: PUSH
 197: LD_INT 0
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: LIST
 208: PPUSH
 209: CALL_OW 69
 213: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 214: LD_VAR 0 3
 218: PUSH
 219: LD_INT 1
 221: ARRAY
 222: PPUSH
 223: LD_STRING delta
 225: PPUSH
 226: CALL_OW 500
// uc_side = 1 ;
 230: LD_ADDR_OWVAR 20
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// uc_nation = 1 ;
 238: LD_ADDR_OWVAR 21
 242: PUSH
 243: LD_INT 1
 245: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 246: LD_ADDR_EXP 1
 250: PUSH
 251: LD_STRING JMM
 253: PPUSH
 254: LD_INT 1
 256: PPUSH
 257: CALL 4347 0 2
 261: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 262: LD_ADDR_EXP 16
 266: PUSH
 267: LD_STRING Harisson
 269: PPUSH
 270: LD_INT 0
 272: PPUSH
 273: CALL 4347 0 2
 277: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 278: LD_EXP 1
 282: PPUSH
 283: LD_VAR 0 3
 287: PUSH
 288: LD_INT 1
 290: ARRAY
 291: PPUSH
 292: CALL_OW 250
 296: PPUSH
 297: LD_VAR 0 3
 301: PUSH
 302: LD_INT 1
 304: ARRAY
 305: PPUSH
 306: CALL_OW 251
 310: PPUSH
 311: LD_INT 5
 313: PPUSH
 314: LD_INT 0
 316: PPUSH
 317: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_INT 1
 328: PPUSH
 329: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true ) ;
 333: LD_ADDR_EXP 2
 337: PUSH
 338: LD_STRING Gladstone
 340: PPUSH
 341: LD_INT 1
 343: PPUSH
 344: CALL 4347 0 2
 348: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 349: LD_EXP 2
 353: PPUSH
 354: LD_VAR 0 3
 358: PUSH
 359: LD_INT 1
 361: ARRAY
 362: PPUSH
 363: CALL_OW 250
 367: PPUSH
 368: LD_VAR 0 3
 372: PUSH
 373: LD_INT 1
 375: ARRAY
 376: PPUSH
 377: CALL_OW 251
 381: PPUSH
 382: LD_INT 5
 384: PPUSH
 385: LD_INT 0
 387: PPUSH
 388: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 392: LD_EXP 2
 396: PPUSH
 397: LD_INT 4
 399: PPUSH
 400: CALL_OW 336
// Denis = PrepareUnit ( Denis , true ) ;
 404: LD_ADDR_EXP 3
 408: PUSH
 409: LD_STRING Denis
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL 4347 0 2
 419: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 420: LD_EXP 3
 424: PPUSH
 425: LD_VAR 0 3
 429: PUSH
 430: LD_INT 1
 432: ARRAY
 433: PPUSH
 434: CALL_OW 250
 438: PPUSH
 439: LD_VAR 0 3
 443: PUSH
 444: LD_INT 1
 446: ARRAY
 447: PPUSH
 448: CALL_OW 251
 452: PPUSH
 453: LD_INT 5
 455: PPUSH
 456: LD_INT 0
 458: PPUSH
 459: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 463: LD_EXP 3
 467: PPUSH
 468: LD_INT 4
 470: PPUSH
 471: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 475: LD_STRING FrankInDelta
 477: PPUSH
 478: LD_INT 0
 480: PPUSH
 481: CALL_OW 30
 485: PUSH
 486: LD_INT 1
 488: EQUAL
 489: IFFALSE 562
// begin Frank = PrepareUnit ( Frank , true ) ;
 491: LD_ADDR_EXP 5
 495: PUSH
 496: LD_STRING Frank
 498: PPUSH
 499: LD_INT 1
 501: PPUSH
 502: CALL 4347 0 2
 506: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 507: LD_EXP 5
 511: PPUSH
 512: LD_VAR 0 3
 516: PUSH
 517: LD_INT 1
 519: ARRAY
 520: PPUSH
 521: CALL_OW 250
 525: PPUSH
 526: LD_VAR 0 3
 530: PUSH
 531: LD_INT 1
 533: ARRAY
 534: PPUSH
 535: CALL_OW 251
 539: PPUSH
 540: LD_INT 5
 542: PPUSH
 543: LD_INT 0
 545: PPUSH
 546: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 550: LD_EXP 5
 554: PPUSH
 555: LD_INT 1
 557: PPUSH
 558: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 562: LD_STRING LisaInDelta
 564: PPUSH
 565: LD_INT 0
 567: PPUSH
 568: CALL_OW 30
 572: PUSH
 573: LD_INT 1
 575: EQUAL
 576: IFFALSE 649
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 578: LD_ADDR_EXP 4
 582: PUSH
 583: LD_STRING Lisa
 585: PPUSH
 586: LD_INT 1
 588: PPUSH
 589: CALL 4347 0 2
 593: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 594: LD_EXP 4
 598: PPUSH
 599: LD_VAR 0 3
 603: PUSH
 604: LD_INT 1
 606: ARRAY
 607: PPUSH
 608: CALL_OW 250
 612: PPUSH
 613: LD_VAR 0 3
 617: PUSH
 618: LD_INT 1
 620: ARRAY
 621: PPUSH
 622: CALL_OW 251
 626: PPUSH
 627: LD_INT 5
 629: PPUSH
 630: LD_INT 0
 632: PPUSH
 633: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 637: LD_EXP 4
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 649: LD_STRING BobbyInDelta
 651: PPUSH
 652: LD_INT 0
 654: PPUSH
 655: CALL_OW 30
 659: PUSH
 660: LD_INT 1
 662: EQUAL
 663: IFFALSE 736
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 665: LD_ADDR_EXP 6
 669: PUSH
 670: LD_STRING Bobby
 672: PPUSH
 673: LD_INT 1
 675: PPUSH
 676: CALL 4347 0 2
 680: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 681: LD_EXP 6
 685: PPUSH
 686: LD_VAR 0 3
 690: PUSH
 691: LD_INT 1
 693: ARRAY
 694: PPUSH
 695: CALL_OW 250
 699: PPUSH
 700: LD_VAR 0 3
 704: PUSH
 705: LD_INT 1
 707: ARRAY
 708: PPUSH
 709: CALL_OW 251
 713: PPUSH
 714: LD_INT 5
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 724: LD_EXP 6
 728: PPUSH
 729: LD_INT 1
 731: PPUSH
 732: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 736: LD_STRING CyrusInDelta
 738: PPUSH
 739: LD_INT 0
 741: PPUSH
 742: CALL_OW 30
 746: PUSH
 747: LD_INT 1
 749: EQUAL
 750: IFFALSE 823
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 752: LD_ADDR_EXP 7
 756: PUSH
 757: LD_STRING Cyrus
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL 4347 0 2
 767: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 768: LD_EXP 7
 772: PPUSH
 773: LD_VAR 0 3
 777: PUSH
 778: LD_INT 1
 780: ARRAY
 781: PPUSH
 782: CALL_OW 250
 786: PPUSH
 787: LD_VAR 0 3
 791: PUSH
 792: LD_INT 1
 794: ARRAY
 795: PPUSH
 796: CALL_OW 251
 800: PPUSH
 801: LD_INT 5
 803: PPUSH
 804: LD_INT 0
 806: PPUSH
 807: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 811: LD_EXP 7
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 823: LD_STRING DonaldsonInDelta
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 30
 833: PUSH
 834: LD_INT 1
 836: EQUAL
 837: IFFALSE 910
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 839: LD_ADDR_EXP 9
 843: PUSH
 844: LD_STRING Donaldson
 846: PPUSH
 847: LD_INT 1
 849: PPUSH
 850: CALL 4347 0 2
 854: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 855: LD_EXP 9
 859: PPUSH
 860: LD_VAR 0 3
 864: PUSH
 865: LD_INT 1
 867: ARRAY
 868: PPUSH
 869: CALL_OW 250
 873: PPUSH
 874: LD_VAR 0 3
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: CALL_OW 251
 887: PPUSH
 888: LD_INT 5
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
 898: LD_EXP 9
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
 910: LD_STRING BrownInDelta
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL_OW 30
 920: PUSH
 921: LD_INT 1
 923: EQUAL
 924: IFFALSE 997
// begin Brown = PrepareUnit ( Brown , true ) ;
 926: LD_ADDR_EXP 8
 930: PUSH
 931: LD_STRING Brown
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: CALL 4347 0 2
 941: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 942: LD_EXP 8
 946: PPUSH
 947: LD_VAR 0 3
 951: PUSH
 952: LD_INT 1
 954: ARRAY
 955: PPUSH
 956: CALL_OW 250
 960: PPUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 1
 968: ARRAY
 969: PPUSH
 970: CALL_OW 251
 974: PPUSH
 975: LD_INT 5
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 50
// SetClass ( Brown , 2 ) ;
 985: LD_EXP 8
 989: PPUSH
 990: LD_INT 2
 992: PPUSH
 993: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
 997: LD_ADDR_EXP 10
1001: PUSH
1002: LD_STRING othersInDelta
1004: PPUSH
1005: CALL_OW 31
1009: ST_TO_ADDR
// for i in others do
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: LD_EXP 10
1019: PUSH
1020: FOR_IN
1021: IFFALSE 1068
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1023: LD_VAR 0 2
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PPUSH
1037: CALL_OW 250
1041: PPUSH
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: CALL_OW 251
1055: PPUSH
1056: LD_INT 35
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 50
1066: GO 1020
1068: POP
1069: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1070: LD_ADDR_EXP 12
1074: PUSH
1075: LD_STRING apeInDelta
1077: PPUSH
1078: CALL_OW 31
1082: ST_TO_ADDR
// uc_nation = 0 ;
1083: LD_ADDR_OWVAR 21
1087: PUSH
1088: LD_INT 0
1090: ST_TO_ADDR
// if apemans > 5 then
1091: LD_EXP 12
1095: PUSH
1096: LD_INT 5
1098: GREATER
1099: IFFALSE 1194
// begin for i := 1 to 5 do
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: DOUBLE
1107: LD_INT 1
1109: DEC
1110: ST_TO_ADDR
1111: LD_INT 5
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1190
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1117: LD_EXP 12
1121: PUSH
1122: LD_VAR 0 2
1126: ARRAY
1127: PPUSH
1128: LD_VAR 0 3
1132: PUSH
1133: LD_INT 1
1135: ARRAY
1136: PPUSH
1137: CALL_OW 250
1141: PPUSH
1142: LD_VAR 0 3
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: PPUSH
1151: CALL_OW 251
1155: PPUSH
1156: LD_INT 50
1158: PPUSH
1159: LD_INT 0
1161: PPUSH
1162: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1166: LD_ADDR_EXP 13
1170: PUSH
1171: LD_EXP 13
1175: PUSH
1176: LD_EXP 12
1180: PUSH
1181: LD_VAR 0 2
1185: ARRAY
1186: ADD
1187: ST_TO_ADDR
// end ;
1188: GO 1114
1190: POP
1191: POP
// end else
1192: GO 1270
// begin for i in apemans do
1194: LD_ADDR_VAR 0 2
1198: PUSH
1199: LD_EXP 12
1203: PUSH
1204: FOR_IN
1205: IFFALSE 1268
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1207: LD_VAR 0 2
1211: PPUSH
1212: LD_VAR 0 3
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PPUSH
1221: CALL_OW 250
1225: PPUSH
1226: LD_VAR 0 3
1230: PUSH
1231: LD_INT 1
1233: ARRAY
1234: PPUSH
1235: CALL_OW 251
1239: PPUSH
1240: LD_INT 50
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1250: LD_ADDR_EXP 13
1254: PUSH
1255: LD_EXP 13
1259: PUSH
1260: LD_VAR 0 2
1264: ADD
1265: ST_TO_ADDR
// end ;
1266: GO 1204
1268: POP
1269: POP
// end ; end ;
1270: LD_VAR 0 1
1274: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1275: LD_INT 0
1277: PPUSH
1278: PPUSH
1279: PPUSH
1280: PPUSH
1281: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1282: LD_ADDR_VAR 0 4
1286: PUSH
1287: LD_INT 22
1289: PUSH
1290: LD_INT 1
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 21
1299: PUSH
1300: LD_INT 3
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 30
1309: PUSH
1310: LD_INT 0
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: PPUSH
1322: CALL_OW 69
1326: ST_TO_ADDR
// uc_side = 1 ;
1327: LD_ADDR_OWVAR 20
1331: PUSH
1332: LD_INT 1
1334: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1335: LD_ADDR_VAR 0 5
1339: PUSH
1340: LD_STRING vehiclesInDelta
1342: PPUSH
1343: EMPTY
1344: PPUSH
1345: CALL_OW 30
1349: ST_TO_ADDR
// for i = 1 to vehicles do
1350: LD_ADDR_VAR 0 2
1354: PUSH
1355: DOUBLE
1356: LD_INT 1
1358: DEC
1359: ST_TO_ADDR
1360: LD_VAR 0 5
1364: PUSH
1365: FOR_TO
1366: IFFALSE 1569
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1368: LD_VAR 0 5
1372: PUSH
1373: LD_VAR 0 2
1377: PUSH
1378: LD_INT 4
1380: PLUS
1381: ARRAY
1382: PUSH
1383: LD_INT 11
1385: EQUAL
1386: PUSH
1387: LD_VAR 0 5
1391: PUSH
1392: LD_VAR 0 2
1396: ARRAY
1397: PUSH
1398: LD_INT 3
1400: EQUAL
1401: OR
1402: IFFALSE 1553
// begin uc_nation = vehicles [ i ] ;
1404: LD_ADDR_OWVAR 21
1408: PUSH
1409: LD_VAR 0 5
1413: PUSH
1414: LD_VAR 0 2
1418: ARRAY
1419: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1420: LD_ADDR_OWVAR 37
1424: PUSH
1425: LD_VAR 0 5
1429: PUSH
1430: LD_VAR 0 2
1434: PUSH
1435: LD_INT 1
1437: PLUS
1438: ARRAY
1439: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1440: LD_ADDR_OWVAR 39
1444: PUSH
1445: LD_VAR 0 5
1449: PUSH
1450: LD_VAR 0 2
1454: PUSH
1455: LD_INT 2
1457: PLUS
1458: ARRAY
1459: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1460: LD_ADDR_OWVAR 38
1464: PUSH
1465: LD_VAR 0 5
1469: PUSH
1470: LD_VAR 0 2
1474: PUSH
1475: LD_INT 3
1477: PLUS
1478: ARRAY
1479: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_VAR 0 5
1489: PUSH
1490: LD_VAR 0 2
1494: PUSH
1495: LD_INT 4
1497: PLUS
1498: ARRAY
1499: ST_TO_ADDR
// veh = CreateVehicle ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: CALL_OW 45
1509: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1510: LD_VAR 0 3
1514: PPUSH
1515: LD_VAR 0 4
1519: PUSH
1520: LD_INT 1
1522: ARRAY
1523: PPUSH
1524: CALL_OW 250
1528: PPUSH
1529: LD_VAR 0 4
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PPUSH
1538: CALL_OW 251
1542: PPUSH
1543: LD_INT 40
1545: PPUSH
1546: LD_INT 0
1548: PPUSH
1549: CALL_OW 50
// end ; i = i + 4 ;
1553: LD_ADDR_VAR 0 2
1557: PUSH
1558: LD_VAR 0 2
1562: PUSH
1563: LD_INT 4
1565: PLUS
1566: ST_TO_ADDR
// end ;
1567: GO 1365
1569: POP
1570: POP
// end ;
1571: LD_VAR 0 1
1575: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1576: LD_INT 0
1578: PPUSH
1579: PPUSH
1580: PPUSH
1581: PPUSH
1582: PPUSH
// uc_side = 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// uc_nation = 1 ;
1591: LD_ADDR_OWVAR 21
1595: PUSH
1596: LD_INT 1
1598: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1599: LD_ADDR_VAR 0 4
1603: PUSH
1604: LD_INT 22
1606: PUSH
1607: LD_INT 1
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: PUSH
1614: LD_INT 21
1616: PUSH
1617: LD_INT 3
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PUSH
1624: LD_INT 30
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: PPUSH
1639: CALL_OW 69
1643: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1644: LD_INT 22
1646: PUSH
1647: LD_INT 1
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 25
1656: PUSH
1657: LD_INT 4
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 26
1666: PUSH
1667: LD_INT 1
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: LIST
1678: PUSH
1679: EMPTY
1680: LIST
1681: PPUSH
1682: CALL_OW 69
1686: PUSH
1687: LD_EXP 1
1691: PUSH
1692: LD_EXP 7
1696: PUSH
1697: LD_EXP 6
1701: PUSH
1702: LD_EXP 5
1706: PUSH
1707: LD_EXP 2
1711: PUSH
1712: LD_EXP 3
1716: PUSH
1717: LD_EXP 8
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: DIFF
1731: IFFALSE 1832
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1733: LD_ADDR_EXP 15
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 4
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 26
1760: PUSH
1761: LD_INT 1
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: PPUSH
1776: CALL_OW 69
1780: PUSH
1781: LD_EXP 1
1785: PUSH
1786: LD_EXP 7
1790: PUSH
1791: LD_EXP 6
1795: PUSH
1796: LD_EXP 5
1800: PUSH
1801: LD_EXP 2
1805: PUSH
1806: LD_EXP 3
1810: PUSH
1811: LD_EXP 8
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: DIFF
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: ST_TO_ADDR
1830: GO 1979
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1832: LD_ADDR_VAR 0 5
1836: PUSH
1837: LD_INT 22
1839: PUSH
1840: LD_INT 1
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: LD_INT 26
1849: PUSH
1850: LD_INT 1
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: EMPTY
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 1
1873: PUSH
1874: LD_EXP 7
1878: PUSH
1879: LD_EXP 6
1883: PUSH
1884: LD_EXP 5
1888: PUSH
1889: LD_EXP 2
1893: PUSH
1894: LD_EXP 3
1898: PUSH
1899: LD_EXP 8
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: DIFF
1913: ST_TO_ADDR
// if filter then
1914: LD_VAR 0 5
1918: IFFALSE 1979
// for i in filter do
1920: LD_ADDR_VAR 0 2
1924: PUSH
1925: LD_VAR 0 5
1929: PUSH
1930: FOR_IN
1931: IFFALSE 1977
// if GetSkill ( i , 4 ) >= 4 then
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_INT 4
1940: PPUSH
1941: CALL_OW 259
1945: PUSH
1946: LD_INT 4
1948: GREATEREQUAL
1949: IFFALSE 1975
// begin deltaDoctor := i ;
1951: LD_ADDR_EXP 15
1955: PUSH
1956: LD_VAR 0 2
1960: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
1961: LD_EXP 15
1965: PPUSH
1966: LD_INT 4
1968: PPUSH
1969: CALL_OW 336
// break ;
1973: GO 1977
// end ;
1975: GO 1930
1977: POP
1978: POP
// end ; for i = 1 to 6 do
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: DOUBLE
1985: LD_INT 1
1987: DEC
1988: ST_TO_ADDR
1989: LD_INT 6
1991: PUSH
1992: FOR_TO
1993: IFFALSE 2136
// begin hc_gallery =  ;
1995: LD_ADDR_OWVAR 33
1999: PUSH
2000: LD_STRING 
2002: ST_TO_ADDR
// hc_name =  ;
2003: LD_ADDR_OWVAR 26
2007: PUSH
2008: LD_STRING 
2010: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) - Difficulty ) ;
2011: LD_INT 0
2013: PPUSH
2014: LD_INT 1
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: LD_INT 3
2022: PUSH
2023: LD_INT 4
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 1
2034: PPUSH
2035: LD_INT 4
2037: PPUSH
2038: CALL_OW 12
2042: ARRAY
2043: PPUSH
2044: LD_INT 3
2046: PPUSH
2047: LD_INT 5
2049: PPUSH
2050: CALL_OW 12
2054: PUSH
2055: LD_OWVAR 67
2059: MINUS
2060: PPUSH
2061: CALL_OW 380
// un = CreateHuman ;
2065: LD_ADDR_VAR 0 3
2069: PUSH
2070: CALL_OW 44
2074: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2075: LD_ADDR_EXP 11
2079: PUSH
2080: LD_EXP 11
2084: PUSH
2085: LD_VAR 0 3
2089: ADD
2090: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2091: LD_VAR 0 3
2095: PPUSH
2096: LD_VAR 0 4
2100: PUSH
2101: LD_INT 1
2103: ARRAY
2104: PPUSH
2105: CALL_OW 250
2109: PPUSH
2110: LD_VAR 0 4
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PPUSH
2119: CALL_OW 251
2123: PPUSH
2124: LD_INT 15
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 1992
2136: POP
2137: POP
// if deltaDoctor then
2138: LD_EXP 15
2142: IFFALSE 2146
// exit ;
2144: GO 2228
// hc_gallery =  ;
2146: LD_ADDR_OWVAR 33
2150: PUSH
2151: LD_STRING 
2153: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2154: LD_ADDR_OWVAR 26
2158: PUSH
2159: LD_STRING Dr. Adam Charles Dawkins
2161: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2162: LD_INT 1
2164: PPUSH
2165: LD_INT 4
2167: PPUSH
2168: LD_INT 6
2170: PPUSH
2171: CALL_OW 380
// deltaDoctor = CreateHuman ;
2175: LD_ADDR_EXP 15
2179: PUSH
2180: CALL_OW 44
2184: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2185: LD_EXP 15
2189: PPUSH
2190: LD_VAR 0 4
2194: PUSH
2195: LD_INT 1
2197: ARRAY
2198: PPUSH
2199: CALL_OW 250
2203: PPUSH
2204: LD_VAR 0 4
2208: PUSH
2209: LD_INT 1
2211: ARRAY
2212: PPUSH
2213: CALL_OW 251
2217: PPUSH
2218: LD_INT 5
2220: PPUSH
2221: LD_INT 0
2223: PPUSH
2224: CALL_OW 50
// end ; end_of_file
2228: LD_VAR 0 1
2232: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2233: LD_INT 0
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2242: LD_ADDR_VAR 0 5
2246: PUSH
2247: LD_STRING buildingsInDelta
2249: PPUSH
2250: EMPTY
2251: PPUSH
2252: CALL_OW 30
2256: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2257: LD_INT 68
2259: PPUSH
2260: LD_INT 40
2262: PPUSH
2263: LD_INT 1
2265: PPUSH
2266: CALL_OW 441
// uc_side = 1 ;
2270: LD_ADDR_OWVAR 20
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// uc_nation = 1 ;
2278: LD_ADDR_OWVAR 21
2282: PUSH
2283: LD_INT 1
2285: ST_TO_ADDR
// for i = 1 to buildings do
2286: LD_ADDR_VAR 0 2
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_VAR 0 5
2300: PUSH
2301: FOR_TO
2302: IFFALSE 2600
// begin bc_type = buildings [ i ] [ 1 ] ;
2304: LD_ADDR_OWVAR 42
2308: PUSH
2309: LD_VAR 0 5
2313: PUSH
2314: LD_VAR 0 2
2318: ARRAY
2319: PUSH
2320: LD_INT 1
2322: ARRAY
2323: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2324: LD_ADDR_OWVAR 43
2328: PUSH
2329: LD_VAR 0 5
2333: PUSH
2334: LD_VAR 0 2
2338: ARRAY
2339: PUSH
2340: LD_INT 2
2342: ARRAY
2343: ST_TO_ADDR
// if bc_type = b_lab then
2344: LD_OWVAR 42
2348: PUSH
2349: LD_INT 6
2351: EQUAL
2352: IFFALSE 2370
// begin bc_kind1 = b_lab_basic ;
2354: LD_ADDR_OWVAR 44
2358: PUSH
2359: LD_INT 9
2361: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2362: LD_ADDR_OWVAR 45
2366: PUSH
2367: LD_INT 9
2369: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2370: LD_OWVAR 42
2374: PUSH
2375: LD_INT 7
2377: EQUAL
2378: PUSH
2379: LD_OWVAR 42
2383: PUSH
2384: LD_INT 8
2386: EQUAL
2387: OR
2388: IFFALSE 2504
// begin if buildings [ i ] [ 6 ] then
2390: LD_VAR 0 5
2394: PUSH
2395: LD_VAR 0 2
2399: ARRAY
2400: PUSH
2401: LD_INT 6
2403: ARRAY
2404: IFFALSE 2426
// bc_kind1 = buildings [ i ] [ 6 ] ;
2406: LD_ADDR_OWVAR 44
2410: PUSH
2411: LD_VAR 0 5
2415: PUSH
2416: LD_VAR 0 2
2420: ARRAY
2421: PUSH
2422: LD_INT 6
2424: ARRAY
2425: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2426: LD_VAR 0 5
2430: PUSH
2431: LD_VAR 0 2
2435: ARRAY
2436: PUSH
2437: LD_INT 7
2439: ARRAY
2440: IFFALSE 2462
// bc_kind2 = buildings [ i ] [ 7 ] ;
2442: LD_ADDR_OWVAR 45
2446: PUSH
2447: LD_VAR 0 5
2451: PUSH
2452: LD_VAR 0 2
2456: ARRAY
2457: PUSH
2458: LD_INT 7
2460: ARRAY
2461: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2462: LD_VAR 0 5
2466: PUSH
2467: LD_VAR 0 2
2471: ARRAY
2472: PUSH
2473: LD_INT 6
2475: ARRAY
2476: NOT
2477: PUSH
2478: LD_VAR 0 5
2482: PUSH
2483: LD_VAR 0 2
2487: ARRAY
2488: PUSH
2489: LD_INT 7
2491: ARRAY
2492: NOT
2493: AND
2494: IFFALSE 2504
// bc_type := b_lab ;
2496: LD_ADDR_OWVAR 42
2500: PUSH
2501: LD_INT 6
2503: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2504: LD_ADDR_VAR 0 4
2508: PUSH
2509: LD_VAR 0 5
2513: PUSH
2514: LD_VAR 0 2
2518: ARRAY
2519: PUSH
2520: LD_INT 3
2522: ARRAY
2523: PPUSH
2524: LD_VAR 0 5
2528: PUSH
2529: LD_VAR 0 2
2533: ARRAY
2534: PUSH
2535: LD_INT 4
2537: ARRAY
2538: PPUSH
2539: LD_VAR 0 5
2543: PUSH
2544: LD_VAR 0 2
2548: ARRAY
2549: PUSH
2550: LD_INT 5
2552: ARRAY
2553: PPUSH
2554: CALL_OW 47
2558: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2559: LD_VAR 0 4
2563: PPUSH
2564: CALL_OW 266
2568: PUSH
2569: LD_INT 32
2571: EQUAL
2572: IFFALSE 2598
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2574: LD_VAR 0 4
2578: PPUSH
2579: LD_VAR 0 5
2583: PUSH
2584: LD_VAR 0 2
2588: ARRAY
2589: PUSH
2590: LD_INT 8
2592: ARRAY
2593: PPUSH
2594: CALL_OW 431
// end ;
2598: GO 2301
2600: POP
2601: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2602: LD_ADDR_VAR 0 6
2606: PUSH
2607: LD_INT 22
2609: PUSH
2610: LD_INT 1
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 2
2619: PUSH
2620: LD_INT 30
2622: PUSH
2623: LD_INT 6
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PUSH
2630: LD_INT 30
2632: PUSH
2633: LD_INT 7
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: PUSH
2640: LD_INT 30
2642: PUSH
2643: LD_INT 8
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: PPUSH
2660: CALL_OW 69
2664: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2665: LD_ADDR_VAR 0 7
2669: PUSH
2670: LD_INT 22
2672: PUSH
2673: LD_INT 1
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PUSH
2680: LD_INT 30
2682: PUSH
2683: LD_INT 0
2685: PUSH
2686: EMPTY
2687: LIST
2688: LIST
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PPUSH
2694: CALL_OW 69
2698: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2699: LD_VAR 0 6
2703: PUSH
2704: LD_INT 0
2706: GREATER
2707: PUSH
2708: LD_VAR 0 7
2712: PUSH
2713: LD_INT 0
2715: GREATER
2716: AND
2717: IFFALSE 2727
// baseCorrect = 1 ;
2719: LD_ADDR_EXP 17
2723: PUSH
2724: LD_INT 1
2726: ST_TO_ADDR
// if baseCorrect = 0 then
2727: LD_EXP 17
2731: PUSH
2732: LD_INT 0
2734: EQUAL
2735: IFFALSE 3108
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 22
2744: PUSH
2745: LD_INT 1
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 21
2754: PUSH
2755: LD_INT 3
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: PPUSH
2766: CALL_OW 69
2770: PUSH
2771: FOR_IN
2772: IFFALSE 2785
// RemoveUnit ( i ) ;
2774: LD_VAR 0 2
2778: PPUSH
2779: CALL_OW 64
2783: GO 2771
2785: POP
2786: POP
// uc_nation = 1 ;
2787: LD_ADDR_OWVAR 21
2791: PUSH
2792: LD_INT 1
2794: ST_TO_ADDR
// uc_side = 1 ;
2795: LD_ADDR_OWVAR 20
2799: PUSH
2800: LD_INT 1
2802: ST_TO_ADDR
// bc_level = 5 ;
2803: LD_ADDR_OWVAR 43
2807: PUSH
2808: LD_INT 5
2810: ST_TO_ADDR
// bc_type = b_depot ;
2811: LD_ADDR_OWVAR 42
2815: PUSH
2816: LD_INT 0
2818: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2819: LD_INT 50
2821: PPUSH
2822: LD_INT 22
2824: PPUSH
2825: LD_INT 0
2827: PPUSH
2828: CALL_OW 47
// bc_type = b_bunker ;
2832: LD_ADDR_OWVAR 42
2836: PUSH
2837: LD_INT 32
2839: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2840: LD_ADDR_VAR 0 4
2844: PUSH
2845: LD_INT 68
2847: PPUSH
2848: LD_INT 24
2850: PPUSH
2851: LD_INT 4
2853: PPUSH
2854: CALL_OW 47
2858: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2859: LD_VAR 0 4
2863: PPUSH
2864: LD_INT 4
2866: PUSH
2867: LD_INT 11
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 1
2876: PPUSH
2877: LD_INT 2
2879: PPUSH
2880: CALL_OW 12
2884: ARRAY
2885: PPUSH
2886: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2890: LD_ADDR_VAR 0 4
2894: PUSH
2895: LD_INT 71
2897: PPUSH
2898: LD_INT 34
2900: PPUSH
2901: LD_INT 4
2903: PPUSH
2904: CALL_OW 47
2908: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2909: LD_VAR 0 4
2913: PPUSH
2914: LD_INT 4
2916: PUSH
2917: LD_INT 11
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: LD_INT 1
2926: PPUSH
2927: LD_INT 2
2929: PPUSH
2930: CALL_OW 12
2934: ARRAY
2935: PPUSH
2936: CALL_OW 431
// bc_type = 31 ;
2940: LD_ADDR_OWVAR 42
2944: PUSH
2945: LD_INT 31
2947: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
2948: LD_INT 51
2950: PPUSH
2951: LD_INT 7
2953: PPUSH
2954: LD_INT 3
2956: PPUSH
2957: CALL_OW 47
// bc_type = b_oil_mine ;
2961: LD_ADDR_OWVAR 42
2965: PUSH
2966: LD_INT 29
2968: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
2969: LD_INT 68
2971: PPUSH
2972: LD_INT 40
2974: PPUSH
2975: LD_INT 1
2977: PPUSH
2978: CALL_OW 47
// bc_type = b_workshop ;
2982: LD_ADDR_OWVAR 42
2986: PUSH
2987: LD_INT 2
2989: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2990: LD_INT 38
2992: PPUSH
2993: LD_INT 20
2995: PPUSH
2996: LD_INT 2
2998: PPUSH
2999: CALL_OW 47
// bc_type = b_armoury ;
3003: LD_ADDR_OWVAR 42
3007: PUSH
3008: LD_INT 4
3010: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3011: LD_INT 38
3013: PPUSH
3014: LD_INT 20
3016: PPUSH
3017: LD_INT 2
3019: PPUSH
3020: CALL_OW 47
// bc_type = b_solar_power ;
3024: LD_ADDR_OWVAR 42
3028: PUSH
3029: LD_INT 27
3031: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3032: LD_INT 46
3034: PPUSH
3035: LD_INT 12
3037: PPUSH
3038: LD_INT 1
3040: PPUSH
3041: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3045: LD_INT 48
3047: PPUSH
3048: LD_INT 11
3050: PPUSH
3051: LD_INT 2
3053: PPUSH
3054: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3058: LD_INT 49
3060: PPUSH
3061: LD_INT 11
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: CALL_OW 47
// bc_type = b_lab_half ;
3071: LD_ADDR_OWVAR 42
3075: PUSH
3076: LD_INT 7
3078: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3079: LD_ADDR_OWVAR 44
3083: PUSH
3084: LD_INT 15
3086: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3087: LD_ADDR_OWVAR 45
3091: PUSH
3092: LD_INT 9
3094: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3095: LD_INT 42
3097: PPUSH
3098: LD_INT 15
3100: PPUSH
3101: LD_INT 2
3103: PPUSH
3104: CALL_OW 47
// end ; end ; end_of_file
3108: LD_VAR 0 1
3112: RET
// every 1 do var i , j , tmp ;
3113: GO 3115
3115: DISABLE
3116: LD_INT 0
3118: PPUSH
3119: PPUSH
3120: PPUSH
// begin InGameOn ;
3121: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3125: LD_EXP 19
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: CALL_OW 87
// if IsOK ( Denis ) then
3138: LD_EXP 3
3142: PPUSH
3143: CALL_OW 302
3147: IFFALSE 3175
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3149: LD_INT 6
3151: PPUSH
3152: LD_INT 1
3154: PPUSH
3155: LD_INT 2
3157: PPUSH
3158: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3162: LD_INT 20
3164: PPUSH
3165: LD_INT 1
3167: PPUSH
3168: LD_INT 1
3170: PPUSH
3171: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3175: LD_EXP 1
3179: PPUSH
3180: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3184: LD_EXP 1
3188: PPUSH
3189: LD_EXP 15
3193: PPUSH
3194: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3198: LD_INT 35
3200: PPUSH
3201: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3205: LD_EXP 15
3209: PPUSH
3210: LD_EXP 1
3214: PPUSH
3215: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3219: LD_EXP 1
3223: PPUSH
3224: LD_EXP 15
3228: PPUSH
3229: CALL_OW 296
3233: PUSH
3234: LD_INT 5
3236: LESS
3237: IFFALSE 3198
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3239: LD_EXP 15
3243: PPUSH
3244: LD_EXP 1
3248: PPUSH
3249: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3253: LD_EXP 1
3257: PPUSH
3258: LD_STRING D1-JMM-1
3260: PPUSH
3261: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3265: LD_EXP 15
3269: PPUSH
3270: LD_STRING D1-Sci-1
3272: PPUSH
3273: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3277: LD_EXP 1
3281: PUSH
3282: LD_EXP 15
3286: PUSH
3287: LD_EXP 3
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: LIST
3296: PPUSH
3297: LD_EXP 19
3301: PUSH
3302: LD_INT 1
3304: ARRAY
3305: PPUSH
3306: CALL_OW 120
// end ;
3310: PPOPN 3
3312: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3313: LD_EXP 1
3317: PPUSH
3318: CALL_OW 310
3322: PUSH
3323: LD_EXP 19
3327: PUSH
3328: LD_INT 1
3330: ARRAY
3331: EQUAL
3332: PUSH
3333: LD_EXP 15
3337: PPUSH
3338: CALL_OW 310
3342: PUSH
3343: LD_EXP 19
3347: PUSH
3348: LD_INT 1
3350: ARRAY
3351: EQUAL
3352: AND
3353: IFFALSE 3899
3355: GO 3357
3357: DISABLE
3358: LD_INT 0
3360: PPUSH
3361: PPUSH
3362: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3363: LD_EXP 19
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PPUSH
3372: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3376: LD_EXP 1
3380: PPUSH
3381: LD_STRING D1-JMM-2
3383: PPUSH
3384: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3388: LD_EXP 15
3392: PPUSH
3393: LD_STRING D1-Sci-2
3395: PPUSH
3396: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3400: LD_EXP 1
3404: PPUSH
3405: LD_STRING D1-JMM-3
3407: PPUSH
3408: CALL_OW 88
// if IsOK ( Denis ) then
3412: LD_EXP 3
3416: PPUSH
3417: CALL_OW 302
3421: IFFALSE 3437
// Say ( DeltaDoctor , D1-Sci-3 ) else
3423: LD_EXP 15
3427: PPUSH
3428: LD_STRING D1-Sci-3
3430: PPUSH
3431: CALL_OW 88
3435: GO 3449
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3437: LD_EXP 15
3441: PPUSH
3442: LD_STRING D1-Sci-3a
3444: PPUSH
3445: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3449: LD_EXP 1
3453: PPUSH
3454: LD_STRING D1-JMM-4
3456: PPUSH
3457: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3461: LD_ADDR_VAR 0 3
3465: PUSH
3466: LD_INT 22
3468: PUSH
3469: LD_INT 1
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: PUSH
3476: LD_INT 25
3478: PUSH
3479: LD_INT 4
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: LD_INT 54
3491: PUSH
3492: EMPTY
3493: LIST
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: PPUSH
3504: CALL_OW 69
3508: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3509: LD_ADDR_VAR 0 1
3513: PUSH
3514: LD_INT 22
3516: PUSH
3517: LD_INT 0
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PPUSH
3524: CALL_OW 69
3528: PUSH
3529: FOR_IN
3530: IFFALSE 3580
// for j in tmp do
3532: LD_ADDR_VAR 0 2
3536: PUSH
3537: LD_VAR 0 3
3541: PUSH
3542: FOR_IN
3543: IFFALSE 3576
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3545: LD_VAR 0 2
3549: PPUSH
3550: LD_VAR 0 1
3554: PPUSH
3555: CALL_OW 250
3559: PPUSH
3560: LD_VAR 0 1
3564: PPUSH
3565: CALL_OW 251
3569: PPUSH
3570: CALL_OW 191
3574: GO 3542
3576: POP
3577: POP
3578: GO 3529
3580: POP
3581: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3582: LD_EXP 15
3586: PPUSH
3587: LD_STRING D1-Sci-4
3589: PPUSH
3590: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3594: LD_EXP 1
3598: PPUSH
3599: LD_STRING D1-JMM-5
3601: PPUSH
3602: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3606: LD_EXP 15
3610: PPUSH
3611: LD_STRING D1-Sci-5
3613: PPUSH
3614: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3618: LD_EXP 1
3622: PPUSH
3623: LD_STRING D1-JMM-6
3625: PPUSH
3626: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3630: LD_EXP 16
3634: PPUSH
3635: LD_STRING D1-Har-6
3637: PPUSH
3638: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3642: LD_EXP 1
3646: PPUSH
3647: LD_STRING D1-JMM-7
3649: PPUSH
3650: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3654: LD_EXP 16
3658: PPUSH
3659: LD_STRING D1-Har-7
3661: PPUSH
3662: CALL_OW 94
// if IsOK ( Denis ) then
3666: LD_EXP 3
3670: PPUSH
3671: CALL_OW 302
3675: IFFALSE 3689
// Say ( JMM , D1-JMM-8 ) ;
3677: LD_EXP 1
3681: PPUSH
3682: LD_STRING D1-JMM-8
3684: PPUSH
3685: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3689: LD_EXP 1
3693: PPUSH
3694: LD_STRING D1-JMM-8a
3696: PPUSH
3697: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3701: LD_EXP 16
3705: PPUSH
3706: LD_STRING D1-Har-8
3708: PPUSH
3709: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3713: LD_EXP 1
3717: PPUSH
3718: LD_STRING D1-JMM-9
3720: PPUSH
3721: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3725: LD_EXP 16
3729: PPUSH
3730: LD_STRING D1-Har-9
3732: PPUSH
3733: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3737: LD_EXP 1
3741: PPUSH
3742: LD_STRING D1-JMM-10
3744: PPUSH
3745: CALL_OW 88
// if IsOK ( Denis ) then
3749: LD_EXP 3
3753: PPUSH
3754: CALL_OW 302
3758: IFFALSE 3772
// Say ( JMM , D1-JMM-10a ) ;
3760: LD_EXP 1
3764: PPUSH
3765: LD_STRING D1-JMM-10a
3767: PPUSH
3768: CALL_OW 88
// SelectAndSaveCharacters ;
3772: CALL 4410 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3776: LD_EXP 19
3780: PUSH
3781: LD_INT 1
3783: ARRAY
3784: PPUSH
3785: CALL_OW 274
3789: PPUSH
3790: LD_INT 1
3792: PPUSH
3793: LD_INT 250
3795: PPUSH
3796: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3800: LD_INT 22
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PUSH
3810: LD_INT 30
3812: PUSH
3813: LD_INT 29
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PPUSH
3824: CALL_OW 69
3828: PUSH
3829: LD_INT 0
3831: GREATER
3832: IFFALSE 3858
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3834: LD_EXP 19
3838: PUSH
3839: LD_INT 1
3841: ARRAY
3842: PPUSH
3843: CALL_OW 274
3847: PPUSH
3848: LD_INT 2
3850: PPUSH
3851: LD_INT 300
3853: PPUSH
3854: CALL_OW 277
// InGameOff ;
3858: CALL_OW 9
// Query ( Q1 ) ;
3862: LD_STRING Q1
3864: PPUSH
3865: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3869: LD_INT 3
3871: PPUSH
3872: LD_INT 1
3874: PPUSH
3875: CALL_OW 424
// if IsInUnit ( JMM ) then
3879: LD_EXP 1
3883: PPUSH
3884: CALL_OW 310
3888: IFFALSE 3899
// ComExitBuilding ( JMM ) ;
3890: LD_EXP 1
3894: PPUSH
3895: CALL_OW 122
// end ;
3899: PPOPN 3
3901: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
3902: LD_INT 3
3904: PPUSH
3905: LD_INT 22
3907: PUSH
3908: LD_INT 1
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: LD_INT 21
3917: PUSH
3918: LD_INT 1
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: PPUSH
3929: CALL_OW 71
3933: PUSH
3934: LD_INT 0
3936: EQUAL
3937: IFFALSE 4255
3939: GO 3941
3941: DISABLE
3942: LD_INT 0
3944: PPUSH
3945: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) > 0 then
3946: LD_INT 3
3948: PPUSH
3949: LD_INT 21
3951: PUSH
3952: LD_INT 2
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: PUSH
3959: LD_INT 3
3961: PUSH
3962: LD_INT 58
3964: PUSH
3965: EMPTY
3966: LIST
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: PPUSH
3976: CALL_OW 70
3980: PUSH
3981: LD_INT 0
3983: GREATER
3984: IFFALSE 4241
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
3986: LD_ADDR_VAR 0 1
3990: PUSH
3991: LD_INT 3
3993: PPUSH
3994: LD_INT 21
3996: PUSH
3997: LD_INT 2
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: LD_INT 3
4006: PUSH
4007: LD_INT 58
4009: PUSH
4010: EMPTY
4011: LIST
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PPUSH
4021: CALL_OW 70
4025: PUSH
4026: FOR_IN
4027: IFFALSE 4227
// begin cargoType = GetCargoType ( i ) ;
4029: LD_ADDR_VAR 0 2
4033: PUSH
4034: LD_VAR 0 1
4038: PPUSH
4039: CALL_OW 288
4043: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4044: LD_VAR 0 1
4048: PPUSH
4049: CALL_OW 264
4053: PUSH
4054: LD_INT 12
4056: EQUAL
4057: IFFALSE 4154
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
4059: LD_ADDR_EXP 14
4063: PUSH
4064: LD_EXP 14
4068: PUSH
4069: LD_VAR 0 1
4073: PPUSH
4074: CALL_OW 248
4078: PUSH
4079: LD_VAR 0 1
4083: PPUSH
4084: CALL_OW 265
4088: PUSH
4089: LD_VAR 0 1
4093: PPUSH
4094: CALL_OW 262
4098: PUSH
4099: LD_VAR 0 1
4103: PPUSH
4104: CALL_OW 263
4108: PUSH
4109: LD_VAR 0 1
4113: PPUSH
4114: CALL_OW 264
4118: PUSH
4119: LD_VAR 0 2
4123: PUSH
4124: LD_VAR 0 1
4128: PPUSH
4129: LD_VAR 0 2
4133: PPUSH
4134: CALL_OW 289
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: PUSH
4148: EMPTY
4149: LIST
4150: ADD
4151: ST_TO_ADDR
// end else
4152: GO 4225
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4154: LD_ADDR_EXP 14
4158: PUSH
4159: LD_EXP 14
4163: PUSH
4164: LD_VAR 0 1
4168: PPUSH
4169: CALL_OW 248
4173: PUSH
4174: LD_VAR 0 1
4178: PPUSH
4179: CALL_OW 265
4183: PUSH
4184: LD_VAR 0 1
4188: PPUSH
4189: CALL_OW 262
4193: PUSH
4194: LD_VAR 0 1
4198: PPUSH
4199: CALL_OW 263
4203: PUSH
4204: LD_VAR 0 1
4208: PPUSH
4209: CALL_OW 264
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: PUSH
4221: EMPTY
4222: LIST
4223: ADD
4224: ST_TO_ADDR
// end ; end ;
4225: GO 4026
4227: POP
4228: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4229: LD_EXP 14
4233: PPUSH
4234: LD_STRING 06_VehiclesIn06_1
4236: PPUSH
4237: CALL_OW 39
// end ; SaveCargos ;
4241: CALL 4258 0 0
// ChangeMap ( 6 , %_cont ) ;
4245: LD_INT 6
4247: PPUSH
4248: LD_STRING %_cont
4250: PPUSH
4251: CALL_OW 340
// end ;
4255: PPOPN 2
4257: END
// export function SaveCargos ; var i ; begin
4258: LD_INT 0
4260: PPUSH
4261: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
4262: LD_ADDR_VAR 0 2
4266: PUSH
4267: LD_INT 3
4269: PPUSH
4270: LD_INT 22
4272: PUSH
4273: LD_INT 1
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: PUSH
4280: LD_INT 34
4282: PUSH
4283: LD_INT 12
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PPUSH
4294: CALL_OW 70
4298: PUSH
4299: FOR_IN
4300: IFFALSE 4328
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
4302: LD_ADDR_EXP 20
4306: PUSH
4307: LD_EXP 20
4311: PUSH
4312: LD_VAR 0 2
4316: PPUSH
4317: CALL 5530 0 1
4321: PUSH
4322: EMPTY
4323: LIST
4324: ADD
4325: ST_TO_ADDR
4326: GO 4299
4328: POP
4329: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
4330: LD_EXP 20
4334: PPUSH
4335: LD_STRING 06_ResourcesInCargo06_1
4337: PPUSH
4338: CALL_OW 39
// end ; end_of_file
4342: LD_VAR 0 1
4346: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4347: LD_INT 0
4349: PPUSH
4350: PPUSH
// if exist_mode then
4351: LD_VAR 0 2
4355: IFFALSE 4380
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
4357: LD_ADDR_VAR 0 4
4361: PUSH
4362: LD_EXP 22
4366: PUSH
4367: LD_VAR 0 1
4371: STR
4372: PPUSH
4373: CALL_OW 34
4377: ST_TO_ADDR
4378: GO 4395
// unit := NewCharacter ( ident ) ;
4380: LD_ADDR_VAR 0 4
4384: PUSH
4385: LD_VAR 0 1
4389: PPUSH
4390: CALL_OW 25
4394: ST_TO_ADDR
// result := unit ;
4395: LD_ADDR_VAR 0 3
4399: PUSH
4400: LD_VAR 0 4
4404: ST_TO_ADDR
// end ;
4405: LD_VAR 0 3
4409: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test , rnd ; begin
4410: LD_INT 0
4412: PPUSH
4413: PPUSH
4414: PPUSH
4415: PPUSH
4416: PPUSH
4417: PPUSH
// rnd = [ 5 , rand ( 4 , 5 ) , 4 ] [ Difficulty ] ;
4418: LD_ADDR_VAR 0 6
4422: PUSH
4423: LD_INT 5
4425: PUSH
4426: LD_INT 4
4428: PPUSH
4429: LD_INT 5
4431: PPUSH
4432: CALL_OW 12
4436: PUSH
4437: LD_INT 4
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: LIST
4444: PUSH
4445: LD_OWVAR 67
4449: ARRAY
4450: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4451: LD_ADDR_VAR 0 3
4455: PUSH
4456: LD_INT 22
4458: PUSH
4459: LD_INT 1
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 21
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 2
4478: PUSH
4479: LD_INT 25
4481: PUSH
4482: LD_INT 1
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: PUSH
4489: LD_INT 25
4491: PUSH
4492: LD_INT 2
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: LD_INT 25
4501: PUSH
4502: LD_INT 3
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PUSH
4509: LD_INT 25
4511: PUSH
4512: LD_INT 4
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: LIST
4530: PPUSH
4531: CALL_OW 69
4535: PUSH
4536: LD_EXP 1
4540: PUSH
4541: LD_EXP 15
4545: PUSH
4546: LD_EXP 3
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: DIFF
4556: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , [ 5 , 4 , 4 ] [ Difficulty ] , rnd , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4557: LD_ADDR_VAR 0 4
4561: PUSH
4562: LD_STRING text
4564: PPUSH
4565: LD_INT 5
4567: PUSH
4568: LD_INT 4
4570: PUSH
4571: LD_INT 4
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: PUSH
4579: LD_OWVAR 67
4583: ARRAY
4584: PPUSH
4585: LD_VAR 0 6
4589: PPUSH
4590: LD_INT -5
4592: PUSH
4593: LD_EXP 1
4597: PUSH
4598: LD_INT -6
4600: PUSH
4601: LD_INT -2
4603: PUSH
4604: LD_INT -3
4606: PUSH
4607: LD_INT -5
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: PUSH
4618: LD_VAR 0 3
4622: ADD
4623: PUSH
4624: LD_INT -6
4626: PUSH
4627: LD_INT -4
4629: PUSH
4630: LD_EXP 3
4634: PUSH
4635: LD_EXP 15
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: ADD
4646: PPUSH
4647: LD_INT 1
4649: PUSH
4650: LD_INT 3
4652: PUSH
4653: LD_INT 2
4655: PUSH
4656: LD_INT 1
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PUSH
4663: LD_INT 4
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: PPUSH
4672: CALL_OW 42
4676: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4677: LD_EXP 1
4681: PPUSH
4682: LD_EXP 21
4686: PUSH
4687: LD_STRING JMM
4689: STR
4690: PPUSH
4691: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4695: LD_EXP 15
4699: PPUSH
4700: LD_STRING DeltaDoctor
4702: PPUSH
4703: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4707: LD_EXP 3
4711: PPUSH
4712: LD_EXP 21
4716: PUSH
4717: LD_STRING Denis
4719: STR
4720: PPUSH
4721: CALL_OW 38
// if Lisa in selectedPeople then
4725: LD_EXP 4
4729: PUSH
4730: LD_VAR 0 4
4734: IN
4735: IFFALSE 4767
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4737: LD_EXP 4
4741: PPUSH
4742: LD_EXP 21
4746: PUSH
4747: LD_STRING Lisa
4749: STR
4750: PPUSH
4751: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4755: LD_INT 1
4757: PPUSH
4758: LD_STRING LisaIn06
4760: PPUSH
4761: CALL_OW 39
// end else
4765: GO 4788
// if IsOk ( Lisa ) then
4767: LD_EXP 4
4771: PPUSH
4772: CALL_OW 302
4776: IFFALSE 4788
// SaveVariable ( 1 , LisaStayInDelta ) ;
4778: LD_INT 1
4780: PPUSH
4781: LD_STRING LisaStayInDelta
4783: PPUSH
4784: CALL_OW 39
// if Bobby in selectedPeople then
4788: LD_EXP 6
4792: PUSH
4793: LD_VAR 0 4
4797: IN
4798: IFFALSE 4830
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4800: LD_EXP 6
4804: PPUSH
4805: LD_EXP 21
4809: PUSH
4810: LD_STRING Bobby
4812: STR
4813: PPUSH
4814: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4818: LD_INT 1
4820: PPUSH
4821: LD_STRING BobbyIn06
4823: PPUSH
4824: CALL_OW 39
// end else
4828: GO 4851
// if IsOk ( Bobby ) then
4830: LD_EXP 6
4834: PPUSH
4835: CALL_OW 302
4839: IFFALSE 4851
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4841: LD_INT 1
4843: PPUSH
4844: LD_STRING BobbyStayInDelta
4846: PPUSH
4847: CALL_OW 39
// if Cyrus in selectedPeople then
4851: LD_EXP 7
4855: PUSH
4856: LD_VAR 0 4
4860: IN
4861: IFFALSE 4893
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4863: LD_EXP 7
4867: PPUSH
4868: LD_EXP 21
4872: PUSH
4873: LD_STRING Cyrus
4875: STR
4876: PPUSH
4877: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4881: LD_INT 1
4883: PPUSH
4884: LD_STRING CyrusIn06
4886: PPUSH
4887: CALL_OW 39
// end else
4891: GO 4914
// if IsOk ( Cyrus ) then
4893: LD_EXP 7
4897: PPUSH
4898: CALL_OW 302
4902: IFFALSE 4914
// SaveVariable ( 1 , CyrusStayInDelta ) ;
4904: LD_INT 1
4906: PPUSH
4907: LD_STRING CyrusStayInDelta
4909: PPUSH
4910: CALL_OW 39
// if Frank in selectedPeople then
4914: LD_EXP 5
4918: PUSH
4919: LD_VAR 0 4
4923: IN
4924: IFFALSE 4956
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4926: LD_EXP 5
4930: PPUSH
4931: LD_EXP 21
4935: PUSH
4936: LD_STRING Frank
4938: STR
4939: PPUSH
4940: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4944: LD_INT 1
4946: PPUSH
4947: LD_STRING FrankIn06
4949: PPUSH
4950: CALL_OW 39
// end else
4954: GO 4977
// if IsOk ( Frank ) then
4956: LD_EXP 5
4960: PPUSH
4961: CALL_OW 302
4965: IFFALSE 4977
// SaveVariable ( 1 , FrankStayInDelta ) ;
4967: LD_INT 1
4969: PPUSH
4970: LD_STRING FrankStayInDelta
4972: PPUSH
4973: CALL_OW 39
// if Brown in selectedPeople then
4977: LD_EXP 8
4981: PUSH
4982: LD_VAR 0 4
4986: IN
4987: IFFALSE 5019
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4989: LD_EXP 8
4993: PPUSH
4994: LD_EXP 21
4998: PUSH
4999: LD_STRING Brown
5001: STR
5002: PPUSH
5003: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5007: LD_INT 1
5009: PPUSH
5010: LD_STRING BrownIn06
5012: PPUSH
5013: CALL_OW 39
// end else
5017: GO 5040
// if IsOk ( Brown ) then
5019: LD_EXP 8
5023: PPUSH
5024: CALL_OW 302
5028: IFFALSE 5040
// SaveVariable ( 1 , BrownStayInDelta ) ;
5030: LD_INT 1
5032: PPUSH
5033: LD_STRING BrownStayInDelta
5035: PPUSH
5036: CALL_OW 39
// if Donaldson in selectedPeople then
5040: LD_EXP 9
5044: PUSH
5045: LD_VAR 0 4
5049: IN
5050: IFFALSE 5082
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5052: LD_EXP 9
5056: PPUSH
5057: LD_EXP 21
5061: PUSH
5062: LD_STRING Donaldson
5064: STR
5065: PPUSH
5066: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5070: LD_INT 1
5072: PPUSH
5073: LD_STRING DonaldsonIn06
5075: PPUSH
5076: CALL_OW 39
// end else
5080: GO 5103
// if IsOk ( Donaldson ) then
5082: LD_EXP 9
5086: PPUSH
5087: CALL_OW 302
5091: IFFALSE 5103
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5093: LD_INT 1
5095: PPUSH
5096: LD_STRING DonaldsonStayInDelta
5098: PPUSH
5099: CALL_OW 39
// if Gladstone in selectedPeople then
5103: LD_EXP 2
5107: PUSH
5108: LD_VAR 0 4
5112: IN
5113: IFFALSE 5145
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5115: LD_EXP 2
5119: PPUSH
5120: LD_EXP 21
5124: PUSH
5125: LD_STRING Gladstone
5127: STR
5128: PPUSH
5129: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5133: LD_INT 1
5135: PPUSH
5136: LD_STRING GladstoneIn06
5138: PPUSH
5139: CALL_OW 39
// end else
5143: GO 5166
// if IsOk ( Gladstone ) then
5145: LD_EXP 2
5149: PPUSH
5150: CALL_OW 302
5154: IFFALSE 5166
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5156: LD_INT 1
5158: PPUSH
5159: LD_STRING GladstoneStayInDelta
5161: PPUSH
5162: CALL_OW 39
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5166: LD_INT 22
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 21
5178: PUSH
5179: LD_INT 1
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PPUSH
5190: CALL_OW 69
5194: PPUSH
5195: LD_INT 4
5197: PPUSH
5198: CALL_OW 235
// for i in selectedPeople do
5202: LD_ADDR_VAR 0 2
5206: PUSH
5207: LD_VAR 0 4
5211: PUSH
5212: FOR_IN
5213: IFFALSE 5229
// SetSide ( i , 1 ) ;
5215: LD_VAR 0 2
5219: PPUSH
5220: LD_INT 1
5222: PPUSH
5223: CALL_OW 235
5227: GO 5212
5229: POP
5230: POP
// for i in yourApemans do
5231: LD_ADDR_VAR 0 2
5235: PUSH
5236: LD_EXP 13
5240: PUSH
5241: FOR_IN
5242: IFFALSE 5258
// SetSide ( i , 1 ) ;
5244: LD_VAR 0 2
5248: PPUSH
5249: LD_INT 1
5251: PPUSH
5252: CALL_OW 235
5256: GO 5241
5258: POP
5259: POP
// SetSide ( JMM , 1 ) ;
5260: LD_EXP 1
5264: PPUSH
5265: LD_INT 1
5267: PPUSH
5268: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
5272: LD_EXP 13
5276: PPUSH
5277: LD_INT 2
5279: PPUSH
5280: LD_INT 5
5282: PPUSH
5283: CALL_OW 237
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5287: LD_EXP 13
5291: PPUSH
5292: LD_STRING ApeIn06
5294: PPUSH
5295: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone ] , OthersIn06 ) ;
5299: LD_INT 22
5301: PUSH
5302: LD_INT 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 21
5311: PUSH
5312: LD_INT 1
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: LD_INT 2
5321: PUSH
5322: LD_INT 25
5324: PUSH
5325: LD_INT 1
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: PUSH
5332: LD_INT 25
5334: PUSH
5335: LD_INT 2
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PUSH
5342: LD_INT 25
5344: PUSH
5345: LD_INT 3
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PUSH
5352: LD_INT 25
5354: PUSH
5355: LD_INT 4
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: PUSH
5369: EMPTY
5370: LIST
5371: LIST
5372: LIST
5373: PPUSH
5374: CALL_OW 69
5378: PUSH
5379: LD_EXP 1
5383: PUSH
5384: LD_EXP 4
5388: PUSH
5389: LD_EXP 6
5393: PUSH
5394: LD_EXP 7
5398: PUSH
5399: LD_EXP 5
5403: PUSH
5404: LD_EXP 8
5408: PUSH
5409: LD_EXP 9
5413: PUSH
5414: LD_EXP 2
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: DIFF
5429: PPUSH
5430: LD_STRING OthersIn06
5432: PPUSH
5433: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff randomsDelta ^ DeltaDoctor , OthersStayInDelta ) ;
5437: LD_INT 22
5439: PUSH
5440: LD_INT 4
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: PUSH
5447: LD_INT 2
5449: PUSH
5450: LD_INT 25
5452: PUSH
5453: LD_INT 1
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: PUSH
5460: LD_INT 25
5462: PUSH
5463: LD_INT 2
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PUSH
5470: LD_INT 25
5472: PUSH
5473: LD_INT 3
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: PUSH
5480: LD_INT 25
5482: PUSH
5483: LD_INT 4
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: PPUSH
5501: CALL_OW 69
5505: PUSH
5506: LD_EXP 11
5510: PUSH
5511: LD_EXP 15
5515: ADD
5516: DIFF
5517: PPUSH
5518: LD_STRING OthersStayInDelta
5520: PPUSH
5521: CALL_OW 38
// end ;
5525: LD_VAR 0 1
5529: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
5530: LD_INT 0
5532: PPUSH
5533: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5534: LD_ADDR_VAR 0 2
5538: PUSH
5539: LD_VAR 0 1
5543: PPUSH
5544: LD_INT 1
5546: PPUSH
5547: CALL_OW 289
5551: PUSH
5552: LD_VAR 0 1
5556: PPUSH
5557: LD_INT 2
5559: PPUSH
5560: CALL_OW 289
5564: PUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: LD_INT 3
5572: PPUSH
5573: CALL_OW 289
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: LIST
5582: ST_TO_ADDR
// end ; end_of_file
5583: LD_VAR 0 2
5587: RET
// on Command ( comandid ) do var i ;
5588: LD_INT 0
5590: PPUSH
// begin if comandid = 65 then
5591: LD_VAR 0 1
5595: PUSH
5596: LD_INT 65
5598: EQUAL
5599: IFFALSE 5640
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5601: LD_ADDR_VAR 0 2
5605: PUSH
5606: LD_INT 22
5608: PUSH
5609: LD_INT 1
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: EMPTY
5617: LIST
5618: PPUSH
5619: CALL_OW 69
5623: PUSH
5624: FOR_IN
5625: IFFALSE 5638
// ComStop ( i ) ;
5627: LD_VAR 0 2
5631: PPUSH
5632: CALL_OW 141
5636: GO 5624
5638: POP
5639: POP
// end ;
5640: PPOPN 2
5642: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5643: LD_INT 0
5645: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5646: LD_ADDR_VAR 0 3
5650: PUSH
5651: LD_INT 22
5653: PUSH
5654: LD_INT 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 21
5663: PUSH
5664: LD_INT 3
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 30
5673: PUSH
5674: LD_INT 0
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: PPUSH
5686: CALL_OW 69
5690: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5691: LD_VAR 0 1
5695: PPUSH
5696: LD_VAR 0 3
5700: PUSH
5701: LD_INT 1
5703: ARRAY
5704: PPUSH
5705: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5709: LD_VAR 0 1
5713: PPUSH
5714: LD_INT 4
5716: PPUSH
5717: CALL_OW 235
// end ;
5721: PPOPN 3
5723: END
