// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 16
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// apemans = [ ] ;
  23: LD_ADDR_EXP 11
  27: PUSH
  28: EMPTY
  29: ST_TO_ADDR
// yourApemans = [ ] ;
  30: LD_ADDR_EXP 12
  34: PUSH
  35: EMPTY
  36: ST_TO_ADDR
// yourVehicles = [ ] ;
  37: LD_ADDR_EXP 13
  41: PUSH
  42: EMPTY
  43: ST_TO_ADDR
// mission_prefix := 06_ ;
  44: LD_ADDR_EXP 17
  48: PUSH
  49: LD_STRING 06_
  51: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  52: LD_ADDR_EXP 18
  56: PUSH
  57: LD_STRING 05_
  59: ST_TO_ADDR
// PrepareDeltaBase ;
  60: CALL 2132 0 0
// LoadVehicles ;
  64: CALL 1190 0 0
// PrepareHeroes ;
  68: CALL 77 0 0
// PrepareRandoms ;
  72: CALL 1491 0 0
// end ; end_of_file
  76: END
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
  77: LD_INT 0
  79: PPUSH
  80: PPUSH
  81: PPUSH
  82: PPUSH
  83: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
  84: LD_ADDR_VAR 0 3
  88: PUSH
  89: LD_INT 22
  91: PUSH
  92: LD_INT 1
  94: PUSH
  95: EMPTY
  96: LIST
  97: LIST
  98: PUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 3
 104: PUSH
 105: EMPTY
 106: LIST
 107: LIST
 108: PUSH
 109: LD_INT 30
 111: PUSH
 112: LD_INT 0
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: EMPTY
 120: LIST
 121: LIST
 122: LIST
 123: PPUSH
 124: CALL_OW 69
 128: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 129: LD_VAR 0 3
 133: PUSH
 134: LD_INT 1
 136: ARRAY
 137: PPUSH
 138: LD_STRING delta
 140: PPUSH
 141: CALL_OW 500
// uc_side = 1 ;
 145: LD_ADDR_OWVAR 20
 149: PUSH
 150: LD_INT 1
 152: ST_TO_ADDR
// uc_nation = 1 ;
 153: LD_ADDR_OWVAR 21
 157: PUSH
 158: LD_INT 1
 160: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 161: LD_ADDR_EXP 1
 165: PUSH
 166: LD_STRING JMM
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: CALL 3939 0 2
 176: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_STRING Harisson
 184: PPUSH
 185: LD_INT 0
 187: PPUSH
 188: CALL 3939 0 2
 192: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 193: LD_EXP 1
 197: PPUSH
 198: LD_VAR 0 3
 202: PUSH
 203: LD_INT 1
 205: ARRAY
 206: PPUSH
 207: CALL_OW 250
 211: PPUSH
 212: LD_VAR 0 3
 216: PUSH
 217: LD_INT 1
 219: ARRAY
 220: PPUSH
 221: CALL_OW 251
 225: PPUSH
 226: LD_INT 5
 228: PPUSH
 229: LD_INT 0
 231: PPUSH
 232: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 236: LD_EXP 1
 240: PPUSH
 241: LD_INT 1
 243: PPUSH
 244: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true ) ;
 248: LD_ADDR_EXP 2
 252: PUSH
 253: LD_STRING Gladstone
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: CALL 3939 0 2
 263: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 264: LD_EXP 2
 268: PPUSH
 269: LD_VAR 0 3
 273: PUSH
 274: LD_INT 1
 276: ARRAY
 277: PPUSH
 278: CALL_OW 250
 282: PPUSH
 283: LD_VAR 0 3
 287: PUSH
 288: LD_INT 1
 290: ARRAY
 291: PPUSH
 292: CALL_OW 251
 296: PPUSH
 297: LD_INT 5
 299: PPUSH
 300: LD_INT 0
 302: PPUSH
 303: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 307: LD_EXP 2
 311: PPUSH
 312: LD_INT 4
 314: PPUSH
 315: CALL_OW 336
// Denis = PrepareUnit ( Denis , true ) ;
 319: LD_ADDR_EXP 3
 323: PUSH
 324: LD_STRING Denis
 326: PPUSH
 327: LD_INT 1
 329: PPUSH
 330: CALL 3939 0 2
 334: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 335: LD_EXP 3
 339: PPUSH
 340: LD_VAR 0 3
 344: PUSH
 345: LD_INT 1
 347: ARRAY
 348: PPUSH
 349: CALL_OW 250
 353: PPUSH
 354: LD_VAR 0 3
 358: PUSH
 359: LD_INT 1
 361: ARRAY
 362: PPUSH
 363: CALL_OW 251
 367: PPUSH
 368: LD_INT 5
 370: PPUSH
 371: LD_INT 0
 373: PPUSH
 374: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 378: LD_EXP 3
 382: PPUSH
 383: LD_INT 4
 385: PPUSH
 386: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 390: LD_STRING FrankInDelta
 392: PPUSH
 393: LD_INT 0
 395: PPUSH
 396: CALL_OW 30
 400: PUSH
 401: LD_INT 1
 403: EQUAL
 404: IFFALSE 477
// begin Frank = PrepareUnit ( Frank , true ) ;
 406: LD_ADDR_EXP 5
 410: PUSH
 411: LD_STRING Frank
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL 3939 0 2
 421: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 422: LD_EXP 5
 426: PPUSH
 427: LD_VAR 0 3
 431: PUSH
 432: LD_INT 1
 434: ARRAY
 435: PPUSH
 436: CALL_OW 250
 440: PPUSH
 441: LD_VAR 0 3
 445: PUSH
 446: LD_INT 1
 448: ARRAY
 449: PPUSH
 450: CALL_OW 251
 454: PPUSH
 455: LD_INT 5
 457: PPUSH
 458: LD_INT 0
 460: PPUSH
 461: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 465: LD_EXP 5
 469: PPUSH
 470: LD_INT 1
 472: PPUSH
 473: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 477: LD_STRING LisaInDelta
 479: PPUSH
 480: LD_INT 0
 482: PPUSH
 483: CALL_OW 30
 487: PUSH
 488: LD_INT 1
 490: EQUAL
 491: IFFALSE 564
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 493: LD_ADDR_EXP 4
 497: PUSH
 498: LD_STRING Lisa
 500: PPUSH
 501: LD_INT 1
 503: PPUSH
 504: CALL 3939 0 2
 508: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 509: LD_EXP 4
 513: PPUSH
 514: LD_VAR 0 3
 518: PUSH
 519: LD_INT 1
 521: ARRAY
 522: PPUSH
 523: CALL_OW 250
 527: PPUSH
 528: LD_VAR 0 3
 532: PUSH
 533: LD_INT 1
 535: ARRAY
 536: PPUSH
 537: CALL_OW 251
 541: PPUSH
 542: LD_INT 5
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 552: LD_EXP 4
 556: PPUSH
 557: LD_INT 1
 559: PPUSH
 560: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 564: LD_STRING BobbyInDelta
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL_OW 30
 574: PUSH
 575: LD_INT 1
 577: EQUAL
 578: IFFALSE 651
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 580: LD_ADDR_EXP 6
 584: PUSH
 585: LD_STRING Bobby
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: CALL 3939 0 2
 595: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 596: LD_EXP 6
 600: PPUSH
 601: LD_VAR 0 3
 605: PUSH
 606: LD_INT 1
 608: ARRAY
 609: PPUSH
 610: CALL_OW 250
 614: PPUSH
 615: LD_VAR 0 3
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: CALL_OW 251
 628: PPUSH
 629: LD_INT 5
 631: PPUSH
 632: LD_INT 0
 634: PPUSH
 635: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 639: LD_EXP 6
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 651: LD_STRING CyrusInDelta
 653: PPUSH
 654: LD_INT 0
 656: PPUSH
 657: CALL_OW 30
 661: PUSH
 662: LD_INT 1
 664: EQUAL
 665: IFFALSE 738
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 667: LD_ADDR_EXP 7
 671: PUSH
 672: LD_STRING Cyrus
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
 678: CALL 3939 0 2
 682: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 683: LD_EXP 7
 687: PPUSH
 688: LD_VAR 0 3
 692: PUSH
 693: LD_INT 1
 695: ARRAY
 696: PPUSH
 697: CALL_OW 250
 701: PPUSH
 702: LD_VAR 0 3
 706: PUSH
 707: LD_INT 1
 709: ARRAY
 710: PPUSH
 711: CALL_OW 251
 715: PPUSH
 716: LD_INT 5
 718: PPUSH
 719: LD_INT 0
 721: PPUSH
 722: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 726: LD_EXP 7
 730: PPUSH
 731: LD_INT 1
 733: PPUSH
 734: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 738: LD_STRING DonaldsonInDelta
 740: PPUSH
 741: LD_INT 0
 743: PPUSH
 744: CALL_OW 30
 748: PUSH
 749: LD_INT 1
 751: EQUAL
 752: IFFALSE 825
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 754: LD_ADDR_EXP 9
 758: PUSH
 759: LD_STRING Donaldson
 761: PPUSH
 762: LD_INT 1
 764: PPUSH
 765: CALL 3939 0 2
 769: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 770: LD_EXP 9
 774: PPUSH
 775: LD_VAR 0 3
 779: PUSH
 780: LD_INT 1
 782: ARRAY
 783: PPUSH
 784: CALL_OW 250
 788: PPUSH
 789: LD_VAR 0 3
 793: PUSH
 794: LD_INT 1
 796: ARRAY
 797: PPUSH
 798: CALL_OW 251
 802: PPUSH
 803: LD_INT 5
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
 813: LD_EXP 9
 817: PPUSH
 818: LD_INT 1
 820: PPUSH
 821: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
 825: LD_STRING BrownInDelta
 827: PPUSH
 828: LD_INT 0
 830: PPUSH
 831: CALL_OW 30
 835: PUSH
 836: LD_INT 1
 838: EQUAL
 839: IFFALSE 912
// begin Brown = PrepareUnit ( Brown , true ) ;
 841: LD_ADDR_EXP 8
 845: PUSH
 846: LD_STRING Brown
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: CALL 3939 0 2
 856: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 857: LD_EXP 8
 861: PPUSH
 862: LD_VAR 0 3
 866: PUSH
 867: LD_INT 1
 869: ARRAY
 870: PPUSH
 871: CALL_OW 250
 875: PPUSH
 876: LD_VAR 0 3
 880: PUSH
 881: LD_INT 1
 883: ARRAY
 884: PPUSH
 885: CALL_OW 251
 889: PPUSH
 890: LD_INT 5
 892: PPUSH
 893: LD_INT 0
 895: PPUSH
 896: CALL_OW 50
// SetClass ( Brown , 2 ) ;
 900: LD_EXP 8
 904: PPUSH
 905: LD_INT 2
 907: PPUSH
 908: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
 912: LD_ADDR_EXP 10
 916: PUSH
 917: LD_STRING othersInDelta
 919: PPUSH
 920: CALL_OW 31
 924: ST_TO_ADDR
// for i in others do
 925: LD_ADDR_VAR 0 2
 929: PUSH
 930: LD_EXP 10
 934: PUSH
 935: FOR_IN
 936: IFFALSE 983
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
 938: LD_VAR 0 2
 942: PPUSH
 943: LD_VAR 0 3
 947: PUSH
 948: LD_INT 1
 950: ARRAY
 951: PPUSH
 952: CALL_OW 250
 956: PPUSH
 957: LD_VAR 0 3
 961: PUSH
 962: LD_INT 1
 964: ARRAY
 965: PPUSH
 966: CALL_OW 251
 970: PPUSH
 971: LD_INT 35
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 50
 981: GO 935
 983: POP
 984: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
 985: LD_ADDR_EXP 11
 989: PUSH
 990: LD_STRING apeInDelta
 992: PPUSH
 993: CALL_OW 31
 997: ST_TO_ADDR
// uc_nation = 0 ;
 998: LD_ADDR_OWVAR 21
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// if apemans > 5 then
1006: LD_EXP 11
1010: PUSH
1011: LD_INT 5
1013: GREATER
1014: IFFALSE 1109
// begin for i := 1 to 5 do
1016: LD_ADDR_VAR 0 2
1020: PUSH
1021: DOUBLE
1022: LD_INT 1
1024: DEC
1025: ST_TO_ADDR
1026: LD_INT 5
1028: PUSH
1029: FOR_TO
1030: IFFALSE 1105
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1032: LD_EXP 11
1036: PUSH
1037: LD_VAR 0 2
1041: ARRAY
1042: PPUSH
1043: LD_VAR 0 3
1047: PUSH
1048: LD_INT 1
1050: ARRAY
1051: PPUSH
1052: CALL_OW 250
1056: PPUSH
1057: LD_VAR 0 3
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 251
1070: PPUSH
1071: LD_INT 50
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1081: LD_ADDR_EXP 12
1085: PUSH
1086: LD_EXP 12
1090: PUSH
1091: LD_EXP 11
1095: PUSH
1096: LD_VAR 0 2
1100: ARRAY
1101: ADD
1102: ST_TO_ADDR
// end ;
1103: GO 1029
1105: POP
1106: POP
// end else
1107: GO 1185
// begin for i in apemans do
1109: LD_ADDR_VAR 0 2
1113: PUSH
1114: LD_EXP 11
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1183
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1122: LD_VAR 0 2
1126: PPUSH
1127: LD_VAR 0 3
1131: PUSH
1132: LD_INT 1
1134: ARRAY
1135: PPUSH
1136: CALL_OW 250
1140: PPUSH
1141: LD_VAR 0 3
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PPUSH
1150: CALL_OW 251
1154: PPUSH
1155: LD_INT 50
1157: PPUSH
1158: LD_INT 0
1160: PPUSH
1161: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1165: LD_ADDR_EXP 12
1169: PUSH
1170: LD_EXP 12
1174: PUSH
1175: LD_VAR 0 2
1179: ADD
1180: ST_TO_ADDR
// end ;
1181: GO 1119
1183: POP
1184: POP
// end ; end ;
1185: LD_VAR 0 1
1189: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1190: LD_INT 0
1192: PPUSH
1193: PPUSH
1194: PPUSH
1195: PPUSH
1196: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1197: LD_ADDR_VAR 0 4
1201: PUSH
1202: LD_INT 22
1204: PUSH
1205: LD_INT 1
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 21
1214: PUSH
1215: LD_INT 3
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: PUSH
1222: LD_INT 30
1224: PUSH
1225: LD_INT 0
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 69
1241: ST_TO_ADDR
// uc_side = 1 ;
1242: LD_ADDR_OWVAR 20
1246: PUSH
1247: LD_INT 1
1249: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1250: LD_ADDR_VAR 0 5
1254: PUSH
1255: LD_STRING vehiclesInDelta
1257: PPUSH
1258: EMPTY
1259: PPUSH
1260: CALL_OW 30
1264: ST_TO_ADDR
// for i = 1 to vehicles do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: DOUBLE
1271: LD_INT 1
1273: DEC
1274: ST_TO_ADDR
1275: LD_VAR 0 5
1279: PUSH
1280: FOR_TO
1281: IFFALSE 1484
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1283: LD_VAR 0 5
1287: PUSH
1288: LD_VAR 0 2
1292: PUSH
1293: LD_INT 4
1295: PLUS
1296: ARRAY
1297: PUSH
1298: LD_INT 11
1300: EQUAL
1301: PUSH
1302: LD_VAR 0 5
1306: PUSH
1307: LD_VAR 0 2
1311: ARRAY
1312: PUSH
1313: LD_INT 3
1315: EQUAL
1316: OR
1317: IFFALSE 1468
// begin uc_nation = vehicles [ i ] ;
1319: LD_ADDR_OWVAR 21
1323: PUSH
1324: LD_VAR 0 5
1328: PUSH
1329: LD_VAR 0 2
1333: ARRAY
1334: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1335: LD_ADDR_OWVAR 37
1339: PUSH
1340: LD_VAR 0 5
1344: PUSH
1345: LD_VAR 0 2
1349: PUSH
1350: LD_INT 1
1352: PLUS
1353: ARRAY
1354: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1355: LD_ADDR_OWVAR 39
1359: PUSH
1360: LD_VAR 0 5
1364: PUSH
1365: LD_VAR 0 2
1369: PUSH
1370: LD_INT 2
1372: PLUS
1373: ARRAY
1374: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1375: LD_ADDR_OWVAR 38
1379: PUSH
1380: LD_VAR 0 5
1384: PUSH
1385: LD_VAR 0 2
1389: PUSH
1390: LD_INT 3
1392: PLUS
1393: ARRAY
1394: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1395: LD_ADDR_OWVAR 40
1399: PUSH
1400: LD_VAR 0 5
1404: PUSH
1405: LD_VAR 0 2
1409: PUSH
1410: LD_INT 4
1412: PLUS
1413: ARRAY
1414: ST_TO_ADDR
// veh = CreateVehicle ;
1415: LD_ADDR_VAR 0 3
1419: PUSH
1420: CALL_OW 45
1424: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1425: LD_VAR 0 3
1429: PPUSH
1430: LD_VAR 0 4
1434: PUSH
1435: LD_INT 1
1437: ARRAY
1438: PPUSH
1439: CALL_OW 250
1443: PPUSH
1444: LD_VAR 0 4
1448: PUSH
1449: LD_INT 1
1451: ARRAY
1452: PPUSH
1453: CALL_OW 251
1457: PPUSH
1458: LD_INT 40
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 50
// end ; i = i + 4 ;
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 2
1477: PUSH
1478: LD_INT 4
1480: PLUS
1481: ST_TO_ADDR
// end ;
1482: GO 1280
1484: POP
1485: POP
// end ;
1486: LD_VAR 0 1
1490: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1491: LD_INT 0
1493: PPUSH
1494: PPUSH
1495: PPUSH
1496: PPUSH
1497: PPUSH
// uc_side = 1 ;
1498: LD_ADDR_OWVAR 20
1502: PUSH
1503: LD_INT 1
1505: ST_TO_ADDR
// uc_nation = 1 ;
1506: LD_ADDR_OWVAR 21
1510: PUSH
1511: LD_INT 1
1513: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1514: LD_ADDR_VAR 0 4
1518: PUSH
1519: LD_INT 22
1521: PUSH
1522: LD_INT 1
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 21
1531: PUSH
1532: LD_INT 3
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 30
1541: PUSH
1542: LD_INT 0
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: LIST
1553: PPUSH
1554: CALL_OW 69
1558: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1559: LD_INT 22
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 25
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 26
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: LIST
1593: PUSH
1594: EMPTY
1595: LIST
1596: PPUSH
1597: CALL_OW 69
1601: PUSH
1602: LD_EXP 1
1606: PUSH
1607: LD_EXP 7
1611: PUSH
1612: LD_EXP 6
1616: PUSH
1617: LD_EXP 5
1621: PUSH
1622: LD_EXP 2
1626: PUSH
1627: LD_EXP 3
1631: PUSH
1632: LD_EXP 8
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: DIFF
1646: IFFALSE 1747
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1648: LD_ADDR_EXP 14
1652: PUSH
1653: LD_INT 22
1655: PUSH
1656: LD_INT 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PUSH
1663: LD_INT 25
1665: PUSH
1666: LD_INT 4
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 26
1675: PUSH
1676: LD_INT 1
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: PPUSH
1691: CALL_OW 69
1695: PUSH
1696: LD_EXP 1
1700: PUSH
1701: LD_EXP 7
1705: PUSH
1706: LD_EXP 6
1710: PUSH
1711: LD_EXP 5
1715: PUSH
1716: LD_EXP 2
1720: PUSH
1721: LD_EXP 3
1725: PUSH
1726: LD_EXP 8
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: DIFF
1740: PUSH
1741: LD_INT 1
1743: ARRAY
1744: ST_TO_ADDR
1745: GO 1894
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1747: LD_ADDR_VAR 0 5
1751: PUSH
1752: LD_INT 22
1754: PUSH
1755: LD_INT 1
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PUSH
1762: LD_INT 26
1764: PUSH
1765: LD_INT 1
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: EMPTY
1777: LIST
1778: PPUSH
1779: CALL_OW 69
1783: PUSH
1784: LD_EXP 1
1788: PUSH
1789: LD_EXP 7
1793: PUSH
1794: LD_EXP 6
1798: PUSH
1799: LD_EXP 5
1803: PUSH
1804: LD_EXP 2
1808: PUSH
1809: LD_EXP 3
1813: PUSH
1814: LD_EXP 8
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: DIFF
1828: ST_TO_ADDR
// if filter then
1829: LD_VAR 0 5
1833: IFFALSE 1894
// for i in filter do
1835: LD_ADDR_VAR 0 2
1839: PUSH
1840: LD_VAR 0 5
1844: PUSH
1845: FOR_IN
1846: IFFALSE 1892
// if GetSkill ( i , 4 ) >= 4 then
1848: LD_VAR 0 2
1852: PPUSH
1853: LD_INT 4
1855: PPUSH
1856: CALL_OW 259
1860: PUSH
1861: LD_INT 4
1863: GREATEREQUAL
1864: IFFALSE 1890
// begin deltaDoctor := i ;
1866: LD_ADDR_EXP 14
1870: PUSH
1871: LD_VAR 0 2
1875: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
1876: LD_EXP 14
1880: PPUSH
1881: LD_INT 4
1883: PPUSH
1884: CALL_OW 336
// break ;
1888: GO 1892
// end ;
1890: GO 1845
1892: POP
1893: POP
// end ; for i = 1 to 6 do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_INT 6
1906: PUSH
1907: FOR_TO
1908: IFFALSE 2035
// begin hc_gallery =  ;
1910: LD_ADDR_OWVAR 33
1914: PUSH
1915: LD_STRING 
1917: ST_TO_ADDR
// hc_name =  ;
1918: LD_ADDR_OWVAR 26
1922: PUSH
1923: LD_STRING 
1925: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) - Difficulty ) ;
1926: LD_INT 0
1928: PPUSH
1929: LD_INT 1
1931: PUSH
1932: LD_INT 2
1934: PUSH
1935: LD_INT 3
1937: PUSH
1938: LD_INT 4
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_INT 1
1949: PPUSH
1950: LD_INT 4
1952: PPUSH
1953: CALL_OW 12
1957: ARRAY
1958: PPUSH
1959: LD_INT 3
1961: PPUSH
1962: LD_INT 5
1964: PPUSH
1965: CALL_OW 12
1969: PUSH
1970: LD_OWVAR 67
1974: MINUS
1975: PPUSH
1976: CALL_OW 380
// un = CreateHuman ;
1980: LD_ADDR_VAR 0 3
1984: PUSH
1985: CALL_OW 44
1989: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1990: LD_VAR 0 3
1994: PPUSH
1995: LD_VAR 0 4
1999: PUSH
2000: LD_INT 1
2002: ARRAY
2003: PPUSH
2004: CALL_OW 250
2008: PPUSH
2009: LD_VAR 0 4
2013: PUSH
2014: LD_INT 1
2016: ARRAY
2017: PPUSH
2018: CALL_OW 251
2022: PPUSH
2023: LD_INT 15
2025: PPUSH
2026: LD_INT 0
2028: PPUSH
2029: CALL_OW 50
// end ;
2033: GO 1907
2035: POP
2036: POP
// if deltaDoctor then
2037: LD_EXP 14
2041: IFFALSE 2045
// exit ;
2043: GO 2127
// hc_gallery =  ;
2045: LD_ADDR_OWVAR 33
2049: PUSH
2050: LD_STRING 
2052: ST_TO_ADDR
// hc_name = Dr. Michael Mills ;
2053: LD_ADDR_OWVAR 26
2057: PUSH
2058: LD_STRING Dr. Michael Mills
2060: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2061: LD_INT 1
2063: PPUSH
2064: LD_INT 4
2066: PPUSH
2067: LD_INT 6
2069: PPUSH
2070: CALL_OW 380
// deltaDoctor = CreateHuman ;
2074: LD_ADDR_EXP 14
2078: PUSH
2079: CALL_OW 44
2083: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2084: LD_EXP 14
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 1
2096: ARRAY
2097: PPUSH
2098: CALL_OW 250
2102: PPUSH
2103: LD_VAR 0 4
2107: PUSH
2108: LD_INT 1
2110: ARRAY
2111: PPUSH
2112: CALL_OW 251
2116: PPUSH
2117: LD_INT 5
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 50
// end ; end_of_file
2127: LD_VAR 0 1
2131: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2132: LD_INT 0
2134: PPUSH
2135: PPUSH
2136: PPUSH
2137: PPUSH
2138: PPUSH
2139: PPUSH
2140: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2141: LD_ADDR_VAR 0 5
2145: PUSH
2146: LD_STRING buildingsInDelta
2148: PPUSH
2149: EMPTY
2150: PPUSH
2151: CALL_OW 30
2155: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2156: LD_INT 68
2158: PPUSH
2159: LD_INT 40
2161: PPUSH
2162: LD_INT 1
2164: PPUSH
2165: CALL_OW 441
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 1 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// for i = 1 to buildings do
2185: LD_ADDR_VAR 0 2
2189: PUSH
2190: DOUBLE
2191: LD_INT 1
2193: DEC
2194: ST_TO_ADDR
2195: LD_VAR 0 5
2199: PUSH
2200: FOR_TO
2201: IFFALSE 2399
// begin bc_type = buildings [ i ] [ 1 ] ;
2203: LD_ADDR_OWVAR 42
2207: PUSH
2208: LD_VAR 0 5
2212: PUSH
2213: LD_VAR 0 2
2217: ARRAY
2218: PUSH
2219: LD_INT 1
2221: ARRAY
2222: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2223: LD_ADDR_OWVAR 43
2227: PUSH
2228: LD_VAR 0 5
2232: PUSH
2233: LD_VAR 0 2
2237: ARRAY
2238: PUSH
2239: LD_INT 2
2241: ARRAY
2242: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2243: LD_OWVAR 42
2247: PUSH
2248: LD_INT 7
2250: EQUAL
2251: PUSH
2252: LD_OWVAR 42
2256: PUSH
2257: LD_INT 8
2259: EQUAL
2260: OR
2261: IFFALSE 2303
// begin bc_kind1 = buildings [ i ] [ 6 ] ;
2263: LD_ADDR_OWVAR 44
2267: PUSH
2268: LD_VAR 0 5
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PUSH
2279: LD_INT 6
2281: ARRAY
2282: ST_TO_ADDR
// bc_kind2 = buildings [ i ] [ 7 ] ;
2283: LD_ADDR_OWVAR 45
2287: PUSH
2288: LD_VAR 0 5
2292: PUSH
2293: LD_VAR 0 2
2297: ARRAY
2298: PUSH
2299: LD_INT 7
2301: ARRAY
2302: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2303: LD_ADDR_VAR 0 4
2307: PUSH
2308: LD_VAR 0 5
2312: PUSH
2313: LD_VAR 0 2
2317: ARRAY
2318: PUSH
2319: LD_INT 3
2321: ARRAY
2322: PPUSH
2323: LD_VAR 0 5
2327: PUSH
2328: LD_VAR 0 2
2332: ARRAY
2333: PUSH
2334: LD_INT 4
2336: ARRAY
2337: PPUSH
2338: LD_VAR 0 5
2342: PUSH
2343: LD_VAR 0 2
2347: ARRAY
2348: PUSH
2349: LD_INT 5
2351: ARRAY
2352: PPUSH
2353: CALL_OW 47
2357: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2358: LD_VAR 0 4
2362: PPUSH
2363: CALL_OW 266
2367: PUSH
2368: LD_INT 32
2370: EQUAL
2371: IFFALSE 2397
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2373: LD_VAR 0 4
2377: PPUSH
2378: LD_VAR 0 5
2382: PUSH
2383: LD_VAR 0 2
2387: ARRAY
2388: PUSH
2389: LD_INT 8
2391: ARRAY
2392: PPUSH
2393: CALL_OW 431
// end ;
2397: GO 2200
2399: POP
2400: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2401: LD_ADDR_VAR 0 6
2405: PUSH
2406: LD_INT 22
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PUSH
2416: LD_INT 2
2418: PUSH
2419: LD_INT 30
2421: PUSH
2422: LD_INT 6
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: LD_INT 30
2431: PUSH
2432: LD_INT 7
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: PUSH
2439: LD_INT 30
2441: PUSH
2442: LD_INT 8
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: LIST
2453: LIST
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PPUSH
2459: CALL_OW 69
2463: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2464: LD_ADDR_VAR 0 7
2468: PUSH
2469: LD_INT 22
2471: PUSH
2472: LD_INT 1
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: PUSH
2479: LD_INT 30
2481: PUSH
2482: LD_INT 0
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PPUSH
2493: CALL_OW 69
2497: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2498: LD_VAR 0 6
2502: PUSH
2503: LD_INT 0
2505: GREATER
2506: PUSH
2507: LD_VAR 0 7
2511: PUSH
2512: LD_INT 0
2514: GREATER
2515: AND
2516: IFFALSE 2526
// baseCorrect = 1 ;
2518: LD_ADDR_EXP 16
2522: PUSH
2523: LD_INT 1
2525: ST_TO_ADDR
// if baseCorrect = 0 then
2526: LD_EXP 16
2530: PUSH
2531: LD_INT 0
2533: EQUAL
2534: IFFALSE 2907
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2536: LD_ADDR_VAR 0 2
2540: PUSH
2541: LD_INT 22
2543: PUSH
2544: LD_INT 1
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: PUSH
2551: LD_INT 21
2553: PUSH
2554: LD_INT 3
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: PPUSH
2565: CALL_OW 69
2569: PUSH
2570: FOR_IN
2571: IFFALSE 2584
// RemoveUnit ( i ) ;
2573: LD_VAR 0 2
2577: PPUSH
2578: CALL_OW 64
2582: GO 2570
2584: POP
2585: POP
// uc_nation = 1 ;
2586: LD_ADDR_OWVAR 21
2590: PUSH
2591: LD_INT 1
2593: ST_TO_ADDR
// uc_side = 1 ;
2594: LD_ADDR_OWVAR 20
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// bc_level = 5 ;
2602: LD_ADDR_OWVAR 43
2606: PUSH
2607: LD_INT 5
2609: ST_TO_ADDR
// bc_type = b_depot ;
2610: LD_ADDR_OWVAR 42
2614: PUSH
2615: LD_INT 0
2617: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2618: LD_INT 50
2620: PPUSH
2621: LD_INT 22
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL_OW 47
// bc_type = b_bunker ;
2631: LD_ADDR_OWVAR 42
2635: PUSH
2636: LD_INT 32
2638: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2639: LD_ADDR_VAR 0 4
2643: PUSH
2644: LD_INT 68
2646: PPUSH
2647: LD_INT 24
2649: PPUSH
2650: LD_INT 4
2652: PPUSH
2653: CALL_OW 47
2657: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2658: LD_VAR 0 4
2662: PPUSH
2663: LD_INT 4
2665: PUSH
2666: LD_INT 11
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PUSH
2673: LD_INT 1
2675: PPUSH
2676: LD_INT 2
2678: PPUSH
2679: CALL_OW 12
2683: ARRAY
2684: PPUSH
2685: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2689: LD_ADDR_VAR 0 4
2693: PUSH
2694: LD_INT 71
2696: PPUSH
2697: LD_INT 34
2699: PPUSH
2700: LD_INT 4
2702: PPUSH
2703: CALL_OW 47
2707: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2708: LD_VAR 0 4
2712: PPUSH
2713: LD_INT 4
2715: PUSH
2716: LD_INT 11
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: PUSH
2723: LD_INT 1
2725: PPUSH
2726: LD_INT 2
2728: PPUSH
2729: CALL_OW 12
2733: ARRAY
2734: PPUSH
2735: CALL_OW 431
// bc_type = 31 ;
2739: LD_ADDR_OWVAR 42
2743: PUSH
2744: LD_INT 31
2746: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
2747: LD_INT 51
2749: PPUSH
2750: LD_INT 7
2752: PPUSH
2753: LD_INT 3
2755: PPUSH
2756: CALL_OW 47
// bc_type = b_oil_mine ;
2760: LD_ADDR_OWVAR 42
2764: PUSH
2765: LD_INT 29
2767: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
2768: LD_INT 68
2770: PPUSH
2771: LD_INT 40
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: CALL_OW 47
// bc_type = b_workshop ;
2781: LD_ADDR_OWVAR 42
2785: PUSH
2786: LD_INT 2
2788: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2789: LD_INT 38
2791: PPUSH
2792: LD_INT 20
2794: PPUSH
2795: LD_INT 2
2797: PPUSH
2798: CALL_OW 47
// bc_type = b_armoury ;
2802: LD_ADDR_OWVAR 42
2806: PUSH
2807: LD_INT 4
2809: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2810: LD_INT 38
2812: PPUSH
2813: LD_INT 20
2815: PPUSH
2816: LD_INT 2
2818: PPUSH
2819: CALL_OW 47
// bc_type = b_solar_power ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 27
2830: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
2831: LD_INT 46
2833: PPUSH
2834: LD_INT 12
2836: PPUSH
2837: LD_INT 1
2839: PPUSH
2840: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
2844: LD_INT 48
2846: PPUSH
2847: LD_INT 11
2849: PPUSH
2850: LD_INT 2
2852: PPUSH
2853: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
2857: LD_INT 49
2859: PPUSH
2860: LD_INT 11
2862: PPUSH
2863: LD_INT 3
2865: PPUSH
2866: CALL_OW 47
// bc_type = b_lab_half ;
2870: LD_ADDR_OWVAR 42
2874: PUSH
2875: LD_INT 7
2877: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
2878: LD_ADDR_OWVAR 44
2882: PUSH
2883: LD_INT 15
2885: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2886: LD_ADDR_OWVAR 45
2890: PUSH
2891: LD_INT 9
2893: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
2894: LD_INT 42
2896: PPUSH
2897: LD_INT 15
2899: PPUSH
2900: LD_INT 2
2902: PPUSH
2903: CALL_OW 47
// end ; end ; end_of_file
2907: LD_VAR 0 1
2911: RET
// every 1 do var i , j , lab , tmp ;
2912: GO 2914
2914: DISABLE
2915: LD_INT 0
2917: PPUSH
2918: PPUSH
2919: PPUSH
2920: PPUSH
// begin lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2921: LD_ADDR_VAR 0 3
2925: PUSH
2926: LD_INT 22
2928: PUSH
2929: LD_INT 1
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: LD_INT 2
2938: PUSH
2939: LD_INT 30
2941: PUSH
2942: LD_INT 6
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PUSH
2949: LD_INT 30
2951: PUSH
2952: LD_INT 7
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PUSH
2959: LD_INT 30
2961: PUSH
2962: LD_INT 8
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: LIST
2973: LIST
2974: PUSH
2975: EMPTY
2976: LIST
2977: LIST
2978: PPUSH
2979: CALL_OW 69
2983: ST_TO_ADDR
// InGameOn ;
2984: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
2988: LD_VAR 0 3
2992: PUSH
2993: LD_INT 1
2995: ARRAY
2996: PPUSH
2997: CALL_OW 87
// if IsOK ( Denis ) then
3001: LD_EXP 3
3005: PPUSH
3006: CALL_OW 302
3010: IFFALSE 3038
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3012: LD_INT 6
3014: PPUSH
3015: LD_INT 1
3017: PPUSH
3018: LD_INT 2
3020: PPUSH
3021: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3025: LD_INT 20
3027: PPUSH
3028: LD_INT 1
3030: PPUSH
3031: LD_INT 1
3033: PPUSH
3034: CALL_OW 324
// end ; ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3038: LD_EXP 1
3042: PUSH
3043: LD_EXP 14
3047: PUSH
3048: LD_EXP 3
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: LIST
3057: PPUSH
3058: LD_VAR 0 3
3062: PUSH
3063: LD_INT 1
3065: ARRAY
3066: PPUSH
3067: CALL_OW 120
// Say ( JMM , D1-JMM-1 ) ;
3071: LD_EXP 1
3075: PPUSH
3076: LD_STRING D1-JMM-1
3078: PPUSH
3079: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3083: LD_EXP 14
3087: PPUSH
3088: LD_STRING D1-Sci-1
3090: PPUSH
3091: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3095: LD_EXP 1
3099: PPUSH
3100: LD_STRING D1-JMM-2
3102: PPUSH
3103: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3107: LD_EXP 14
3111: PPUSH
3112: LD_STRING D1-Sci-2
3114: PPUSH
3115: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3119: LD_EXP 1
3123: PPUSH
3124: LD_STRING D1-JMM-3
3126: PPUSH
3127: CALL_OW 88
// if IsOK ( Denis ) then
3131: LD_EXP 3
3135: PPUSH
3136: CALL_OW 302
3140: IFFALSE 3156
// Say ( DeltaDoctor , D1-Sci-3 ) else
3142: LD_EXP 14
3146: PPUSH
3147: LD_STRING D1-Sci-3
3149: PPUSH
3150: CALL_OW 88
3154: GO 3168
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3156: LD_EXP 14
3160: PPUSH
3161: LD_STRING D1-Sci-3a
3163: PPUSH
3164: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3168: LD_EXP 1
3172: PPUSH
3173: LD_STRING D1-JMM-4
3175: PPUSH
3176: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3180: LD_ADDR_VAR 0 4
3184: PUSH
3185: LD_INT 22
3187: PUSH
3188: LD_INT 1
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: LD_INT 25
3197: PUSH
3198: LD_INT 4
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 54
3210: PUSH
3211: EMPTY
3212: LIST
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: LIST
3222: PPUSH
3223: CALL_OW 69
3227: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3228: LD_ADDR_VAR 0 1
3232: PUSH
3233: LD_INT 22
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PPUSH
3243: CALL_OW 69
3247: PUSH
3248: FOR_IN
3249: IFFALSE 3299
// for j in tmp do
3251: LD_ADDR_VAR 0 2
3255: PUSH
3256: LD_VAR 0 4
3260: PUSH
3261: FOR_IN
3262: IFFALSE 3295
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3264: LD_VAR 0 2
3268: PPUSH
3269: LD_VAR 0 1
3273: PPUSH
3274: CALL_OW 250
3278: PPUSH
3279: LD_VAR 0 1
3283: PPUSH
3284: CALL_OW 251
3288: PPUSH
3289: CALL_OW 191
3293: GO 3261
3295: POP
3296: POP
3297: GO 3248
3299: POP
3300: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3301: LD_EXP 14
3305: PPUSH
3306: LD_STRING D1-Sci-4
3308: PPUSH
3309: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3313: LD_EXP 1
3317: PPUSH
3318: LD_STRING D1-JMM-5
3320: PPUSH
3321: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3325: LD_EXP 14
3329: PPUSH
3330: LD_STRING D1-Sci-5
3332: PPUSH
3333: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3337: LD_EXP 1
3341: PPUSH
3342: LD_STRING D1-JMM-6
3344: PPUSH
3345: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3349: LD_EXP 15
3353: PPUSH
3354: LD_STRING D1-Har-6
3356: PPUSH
3357: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3361: LD_EXP 1
3365: PPUSH
3366: LD_STRING D1-JMM-7
3368: PPUSH
3369: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3373: LD_EXP 15
3377: PPUSH
3378: LD_STRING D1-Har-7
3380: PPUSH
3381: CALL_OW 94
// if IsOK ( Denis ) then
3385: LD_EXP 3
3389: PPUSH
3390: CALL_OW 302
3394: IFFALSE 3408
// Say ( JMM , D1-JMM-8 ) ;
3396: LD_EXP 1
3400: PPUSH
3401: LD_STRING D1-JMM-8
3403: PPUSH
3404: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3408: LD_EXP 1
3412: PPUSH
3413: LD_STRING D1-JMM-8a
3415: PPUSH
3416: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3420: LD_EXP 15
3424: PPUSH
3425: LD_STRING D1-Har-8
3427: PPUSH
3428: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3432: LD_EXP 1
3436: PPUSH
3437: LD_STRING D1-JMM-9
3439: PPUSH
3440: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3444: LD_EXP 15
3448: PPUSH
3449: LD_STRING D1-Har-9
3451: PPUSH
3452: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3456: LD_EXP 1
3460: PPUSH
3461: LD_STRING D1-JMM-10
3463: PPUSH
3464: CALL_OW 88
// if IsOK ( Denis ) then
3468: LD_EXP 3
3472: PPUSH
3473: CALL_OW 302
3477: IFFALSE 3491
// Say ( JMM , D1-JMM-10a ) ;
3479: LD_EXP 1
3483: PPUSH
3484: LD_STRING D1-JMM-10a
3486: PPUSH
3487: CALL_OW 88
// SelectAndSaveCharacters ;
3491: CALL 4002 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3495: LD_VAR 0 3
3499: PUSH
3500: LD_INT 1
3502: ARRAY
3503: PPUSH
3504: CALL_OW 274
3508: PPUSH
3509: LD_INT 1
3511: PPUSH
3512: LD_INT 250
3514: PPUSH
3515: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3519: LD_INT 22
3521: PUSH
3522: LD_INT 1
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PUSH
3529: LD_INT 30
3531: PUSH
3532: LD_INT 29
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PPUSH
3543: CALL_OW 69
3547: PUSH
3548: LD_INT 0
3550: GREATER
3551: IFFALSE 3577
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3553: LD_VAR 0 3
3557: PUSH
3558: LD_INT 1
3560: ARRAY
3561: PPUSH
3562: CALL_OW 274
3566: PPUSH
3567: LD_INT 2
3569: PPUSH
3570: LD_INT 300
3572: PPUSH
3573: CALL_OW 277
// InGameOff ;
3577: CALL_OW 9
// Query ( Q1 ) ;
3581: LD_STRING Q1
3583: PPUSH
3584: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3588: LD_INT 3
3590: PPUSH
3591: LD_INT 1
3593: PPUSH
3594: CALL_OW 424
// if IsInUnit ( JMM ) then
3598: LD_EXP 1
3602: PPUSH
3603: CALL_OW 310
3607: IFFALSE 3618
// ComExitBuilding ( JMM ) ;
3609: LD_EXP 1
3613: PPUSH
3614: CALL_OW 122
// end ;
3618: PPOPN 4
3620: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i ;
3621: LD_INT 3
3623: PPUSH
3624: LD_INT 22
3626: PUSH
3627: LD_INT 1
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: LD_INT 21
3636: PUSH
3637: LD_INT 1
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL_OW 71
3652: PUSH
3653: LD_INT 0
3655: EQUAL
3656: IFFALSE 3936
3658: GO 3660
3660: DISABLE
3661: LD_INT 0
3663: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) > 0 then
3664: LD_INT 3
3666: PPUSH
3667: LD_INT 21
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: PPUSH
3680: CALL_OW 70
3684: PUSH
3685: LD_INT 0
3687: GREATER
3688: IFFALSE 3926
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) do
3690: LD_ADDR_VAR 0 1
3694: PUSH
3695: LD_INT 3
3697: PPUSH
3698: LD_INT 21
3700: PUSH
3701: LD_INT 2
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: EMPTY
3709: LIST
3710: PPUSH
3711: CALL_OW 70
3715: PUSH
3716: FOR_IN
3717: IFFALSE 3912
// begin if GetWeapon ( i ) = us_cargo_bay then
3719: LD_VAR 0 1
3723: PPUSH
3724: CALL_OW 264
3728: PUSH
3729: LD_INT 12
3731: EQUAL
3732: IFFALSE 3839
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetCargoType ( i ) , GetCargo ( i , GetCargoType ( i ) ) ] ] ;
3734: LD_ADDR_EXP 13
3738: PUSH
3739: LD_EXP 13
3743: PUSH
3744: LD_VAR 0 1
3748: PPUSH
3749: CALL_OW 248
3753: PUSH
3754: LD_VAR 0 1
3758: PPUSH
3759: CALL_OW 265
3763: PUSH
3764: LD_VAR 0 1
3768: PPUSH
3769: CALL_OW 262
3773: PUSH
3774: LD_VAR 0 1
3778: PPUSH
3779: CALL_OW 263
3783: PUSH
3784: LD_VAR 0 1
3788: PPUSH
3789: CALL_OW 264
3793: PUSH
3794: LD_VAR 0 1
3798: PPUSH
3799: CALL_OW 288
3803: PUSH
3804: LD_VAR 0 1
3808: PPUSH
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 288
3818: PPUSH
3819: CALL_OW 289
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: PUSH
3833: EMPTY
3834: LIST
3835: ADD
3836: ST_TO_ADDR
// end else
3837: GO 3910
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
3839: LD_ADDR_EXP 13
3843: PUSH
3844: LD_EXP 13
3848: PUSH
3849: LD_VAR 0 1
3853: PPUSH
3854: CALL_OW 248
3858: PUSH
3859: LD_VAR 0 1
3863: PPUSH
3864: CALL_OW 265
3868: PUSH
3869: LD_VAR 0 1
3873: PPUSH
3874: CALL_OW 262
3878: PUSH
3879: LD_VAR 0 1
3883: PPUSH
3884: CALL_OW 263
3888: PUSH
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 264
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: PUSH
3906: EMPTY
3907: LIST
3908: ADD
3909: ST_TO_ADDR
// end ; end ;
3910: GO 3716
3912: POP
3913: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
3914: LD_EXP 13
3918: PPUSH
3919: LD_STRING 06_VehiclesIn06_1
3921: PPUSH
3922: CALL_OW 39
// end ; ChangeMap ( 6 , %_cont ) ;
3926: LD_INT 6
3928: PPUSH
3929: LD_STRING %_cont
3931: PPUSH
3932: CALL_OW 340
// end ; end_of_file
3936: PPOPN 1
3938: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3939: LD_INT 0
3941: PPUSH
3942: PPUSH
// if exist_mode then
3943: LD_VAR 0 2
3947: IFFALSE 3972
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3949: LD_ADDR_VAR 0 4
3953: PUSH
3954: LD_EXP 18
3958: PUSH
3959: LD_VAR 0 1
3963: STR
3964: PPUSH
3965: CALL_OW 34
3969: ST_TO_ADDR
3970: GO 3987
// unit := NewCharacter ( ident ) ;
3972: LD_ADDR_VAR 0 4
3976: PUSH
3977: LD_VAR 0 1
3981: PPUSH
3982: CALL_OW 25
3986: ST_TO_ADDR
// result := unit ;
3987: LD_ADDR_VAR 0 3
3991: PUSH
3992: LD_VAR 0 4
3996: ST_TO_ADDR
// end ;
3997: LD_VAR 0 3
4001: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test ; begin
4002: LD_INT 0
4004: PPUSH
4005: PPUSH
4006: PPUSH
4007: PPUSH
4008: PPUSH
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4009: LD_ADDR_VAR 0 3
4013: PUSH
4014: LD_INT 22
4016: PUSH
4017: LD_INT 1
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: PUSH
4024: LD_INT 21
4026: PUSH
4027: LD_INT 1
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 2
4036: PUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 1
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: LD_INT 25
4049: PUSH
4050: LD_INT 2
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: PUSH
4057: LD_INT 25
4059: PUSH
4060: LD_INT 3
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: LD_INT 25
4069: PUSH
4070: LD_INT 4
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: PPUSH
4089: CALL_OW 69
4093: PUSH
4094: LD_EXP 1
4098: PUSH
4099: LD_EXP 14
4103: PUSH
4104: LD_EXP 3
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: LIST
4113: DIFF
4114: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , [ 5 , rand ( 4 , 5 ) , 4 ] [ Difficulty ] , [ 5 , rand ( 4 , 5 ) , 4 ] [ Difficulty ] , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4115: LD_ADDR_VAR 0 4
4119: PUSH
4120: LD_STRING text
4122: PPUSH
4123: LD_INT 5
4125: PUSH
4126: LD_INT 4
4128: PPUSH
4129: LD_INT 5
4131: PPUSH
4132: CALL_OW 12
4136: PUSH
4137: LD_INT 4
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: LIST
4144: PUSH
4145: LD_OWVAR 67
4149: ARRAY
4150: PPUSH
4151: LD_INT 5
4153: PUSH
4154: LD_INT 4
4156: PPUSH
4157: LD_INT 5
4159: PPUSH
4160: CALL_OW 12
4164: PUSH
4165: LD_INT 4
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: LIST
4172: PUSH
4173: LD_OWVAR 67
4177: ARRAY
4178: PPUSH
4179: LD_INT -5
4181: PUSH
4182: LD_EXP 1
4186: PUSH
4187: LD_INT -6
4189: PUSH
4190: LD_INT -2
4192: PUSH
4193: LD_INT -3
4195: PUSH
4196: LD_INT -5
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: PUSH
4207: LD_VAR 0 3
4211: ADD
4212: PUSH
4213: LD_INT -6
4215: PUSH
4216: LD_INT -4
4218: PUSH
4219: LD_EXP 3
4223: PUSH
4224: LD_EXP 14
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: ADD
4235: PPUSH
4236: LD_INT 1
4238: PUSH
4239: LD_INT 3
4241: PUSH
4242: LD_INT 2
4244: PUSH
4245: LD_INT 1
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PUSH
4252: LD_INT 4
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: PPUSH
4261: CALL_OW 42
4265: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4266: LD_EXP 1
4270: PPUSH
4271: LD_EXP 17
4275: PUSH
4276: LD_STRING JMM
4278: STR
4279: PPUSH
4280: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4284: LD_EXP 14
4288: PPUSH
4289: LD_STRING DeltaDoctor
4291: PPUSH
4292: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4296: LD_EXP 3
4300: PPUSH
4301: LD_EXP 17
4305: PUSH
4306: LD_STRING Denis
4308: STR
4309: PPUSH
4310: CALL_OW 38
// if Lisa in selectedPeople then
4314: LD_EXP 4
4318: PUSH
4319: LD_VAR 0 4
4323: IN
4324: IFFALSE 4354
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4326: LD_EXP 4
4330: PPUSH
4331: LD_EXP 17
4335: PUSH
4336: LD_STRING Lisa
4338: STR
4339: PPUSH
4340: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4344: LD_INT 1
4346: PPUSH
4347: LD_STRING LisaIn06
4349: PPUSH
4350: CALL_OW 39
// end ; if Bobby in selectedPeople then
4354: LD_EXP 6
4358: PUSH
4359: LD_VAR 0 4
4363: IN
4364: IFFALSE 4394
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4366: LD_EXP 6
4370: PPUSH
4371: LD_EXP 17
4375: PUSH
4376: LD_STRING Bobby
4378: STR
4379: PPUSH
4380: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4384: LD_INT 1
4386: PPUSH
4387: LD_STRING BobbyIn06
4389: PPUSH
4390: CALL_OW 39
// end ; if Cyrus in selectedPeople then
4394: LD_EXP 7
4398: PUSH
4399: LD_VAR 0 4
4403: IN
4404: IFFALSE 4434
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4406: LD_EXP 7
4410: PPUSH
4411: LD_EXP 17
4415: PUSH
4416: LD_STRING Cyrus
4418: STR
4419: PPUSH
4420: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4424: LD_INT 1
4426: PPUSH
4427: LD_STRING CyrusIn06
4429: PPUSH
4430: CALL_OW 39
// end ; if Frank in selectedPeople then
4434: LD_EXP 5
4438: PUSH
4439: LD_VAR 0 4
4443: IN
4444: IFFALSE 4474
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4446: LD_EXP 5
4450: PPUSH
4451: LD_EXP 17
4455: PUSH
4456: LD_STRING Frank
4458: STR
4459: PPUSH
4460: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4464: LD_INT 1
4466: PPUSH
4467: LD_STRING FrankIn06
4469: PPUSH
4470: CALL_OW 39
// end ; if Brown in selectedPeople then
4474: LD_EXP 8
4478: PUSH
4479: LD_VAR 0 4
4483: IN
4484: IFFALSE 4514
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4486: LD_EXP 8
4490: PPUSH
4491: LD_EXP 17
4495: PUSH
4496: LD_STRING Brown
4498: STR
4499: PPUSH
4500: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
4504: LD_INT 1
4506: PPUSH
4507: LD_STRING BrownIn06
4509: PPUSH
4510: CALL_OW 39
// end ; if Donaldson in selectedPeople then
4514: LD_EXP 9
4518: PUSH
4519: LD_VAR 0 4
4523: IN
4524: IFFALSE 4554
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
4526: LD_EXP 9
4530: PPUSH
4531: LD_EXP 17
4535: PUSH
4536: LD_STRING Donaldson
4538: STR
4539: PPUSH
4540: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
4544: LD_INT 1
4546: PPUSH
4547: LD_STRING DonaldsonIn06
4549: PPUSH
4550: CALL_OW 39
// end ; if Gladstone in selectedPeople then
4554: LD_EXP 2
4558: PUSH
4559: LD_VAR 0 4
4563: IN
4564: IFFALSE 4594
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4566: LD_EXP 2
4570: PPUSH
4571: LD_EXP 17
4575: PUSH
4576: LD_STRING Gladstone
4578: STR
4579: PPUSH
4580: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
4584: LD_INT 1
4586: PPUSH
4587: LD_STRING GladstoneIn06
4589: PPUSH
4590: CALL_OW 39
// end ; SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4594: LD_INT 22
4596: PUSH
4597: LD_INT 1
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: LD_INT 21
4606: PUSH
4607: LD_INT 1
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PPUSH
4618: CALL_OW 69
4622: PPUSH
4623: LD_INT 4
4625: PPUSH
4626: CALL_OW 235
// for i in selectedPeople do
4630: LD_ADDR_VAR 0 2
4634: PUSH
4635: LD_VAR 0 4
4639: PUSH
4640: FOR_IN
4641: IFFALSE 4657
// SetSide ( i , 1 ) ;
4643: LD_VAR 0 2
4647: PPUSH
4648: LD_INT 1
4650: PPUSH
4651: CALL_OW 235
4655: GO 4640
4657: POP
4658: POP
// for i in yourApemans do
4659: LD_ADDR_VAR 0 2
4663: PUSH
4664: LD_EXP 12
4668: PUSH
4669: FOR_IN
4670: IFFALSE 4686
// SetSide ( i , 1 ) ;
4672: LD_VAR 0 2
4676: PPUSH
4677: LD_INT 1
4679: PPUSH
4680: CALL_OW 235
4684: GO 4669
4686: POP
4687: POP
// SetSide ( JMM , 1 ) ;
4688: LD_EXP 1
4692: PPUSH
4693: LD_INT 1
4695: PPUSH
4696: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4700: LD_EXP 12
4704: PPUSH
4705: LD_INT 2
4707: PPUSH
4708: LD_INT 5
4710: PPUSH
4711: CALL_OW 237
// SaveCharacters ( yourApemans , ApeIn06 ) ;
4715: LD_EXP 12
4719: PPUSH
4720: LD_STRING ApeIn06
4722: PPUSH
4723: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone ] , OthersIn06 ) ;
4727: LD_INT 22
4729: PUSH
4730: LD_INT 1
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 21
4739: PUSH
4740: LD_INT 1
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: LD_INT 2
4749: PUSH
4750: LD_INT 25
4752: PUSH
4753: LD_INT 1
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 25
4762: PUSH
4763: LD_INT 2
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PUSH
4770: LD_INT 25
4772: PUSH
4773: LD_INT 3
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PUSH
4780: LD_INT 25
4782: PUSH
4783: LD_INT 4
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: PPUSH
4802: CALL_OW 69
4806: PUSH
4807: LD_EXP 1
4811: PUSH
4812: LD_EXP 4
4816: PUSH
4817: LD_EXP 6
4821: PUSH
4822: LD_EXP 7
4826: PUSH
4827: LD_EXP 5
4831: PUSH
4832: LD_EXP 8
4836: PUSH
4837: LD_EXP 9
4841: PUSH
4842: LD_EXP 2
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: DIFF
4857: PPUSH
4858: LD_STRING OthersIn06
4860: PPUSH
4861: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor ] , OthersStayInDelta ) ;
4865: LD_INT 22
4867: PUSH
4868: LD_INT 4
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: LD_INT 2
4877: PUSH
4878: LD_INT 25
4880: PUSH
4881: LD_INT 1
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 25
4890: PUSH
4891: LD_INT 2
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 25
4900: PUSH
4901: LD_INT 3
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 25
4910: PUSH
4911: LD_INT 4
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PPUSH
4929: CALL_OW 69
4933: PUSH
4934: LD_EXP 14
4938: PUSH
4939: EMPTY
4940: LIST
4941: DIFF
4942: PPUSH
4943: LD_STRING OthersStayInDelta
4945: PPUSH
4946: CALL_OW 38
// end ; end_of_file
4950: LD_VAR 0 1
4954: RET
// on Command ( comandid ) do var i ;
4955: LD_INT 0
4957: PPUSH
// begin if comandid = 65 then
4958: LD_VAR 0 1
4962: PUSH
4963: LD_INT 65
4965: EQUAL
4966: IFFALSE 5007
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
4968: LD_ADDR_VAR 0 2
4972: PUSH
4973: LD_INT 22
4975: PUSH
4976: LD_INT 1
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: EMPTY
4984: LIST
4985: PPUSH
4986: CALL_OW 69
4990: PUSH
4991: FOR_IN
4992: IFFALSE 5005
// ComStop ( i ) ;
4994: LD_VAR 0 2
4998: PPUSH
4999: CALL_OW 141
5003: GO 4991
5005: POP
5006: POP
// end ;
5007: PPOPN 2
5009: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5010: LD_INT 0
5012: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5013: LD_ADDR_VAR 0 3
5017: PUSH
5018: LD_INT 22
5020: PUSH
5021: LD_INT 1
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: LD_INT 21
5030: PUSH
5031: LD_INT 3
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: LD_INT 30
5040: PUSH
5041: LD_INT 0
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: LIST
5052: PPUSH
5053: CALL_OW 69
5057: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5058: LD_VAR 0 1
5062: PPUSH
5063: LD_VAR 0 3
5067: PUSH
5068: LD_INT 1
5070: ARRAY
5071: PPUSH
5072: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5076: LD_VAR 0 1
5080: PPUSH
5081: LD_INT 4
5083: PPUSH
5084: CALL_OW 235
// end ;
5088: PPOPN 3
5090: END
