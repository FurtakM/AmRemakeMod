// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 16
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// apemans = [ ] ;
  23: LD_ADDR_EXP 11
  27: PUSH
  28: EMPTY
  29: ST_TO_ADDR
// yourApemans = [ ] ;
  30: LD_ADDR_EXP 12
  34: PUSH
  35: EMPTY
  36: ST_TO_ADDR
// yourVehicles = [ ] ;
  37: LD_ADDR_EXP 13
  41: PUSH
  42: EMPTY
  43: ST_TO_ADDR
// mission_prefix := 06_ ;
  44: LD_ADDR_EXP 17
  48: PUSH
  49: LD_STRING 06_
  51: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  52: LD_ADDR_EXP 18
  56: PUSH
  57: LD_STRING 05_
  59: ST_TO_ADDR
// PrepareDeltaBase ;
<<<<<<< HEAD
  60: CALL 1976 0 0
=======
  60: CALL 1960 0 0
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
// LoadVehicles ;
  64: CALL 1190 0 0
// PrepareHeroes ;
  68: CALL 77 0 0
// PrepareRandoms ;
<<<<<<< HEAD
  72: CALL 1491 0 0
=======
  72: CALL 1475 0 0
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
// end ; end_of_file
  76: END
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
  77: LD_INT 0
  79: PPUSH
  80: PPUSH
  81: PPUSH
  82: PPUSH
  83: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
  84: LD_ADDR_VAR 0 3
  88: PUSH
  89: LD_INT 22
  91: PUSH
  92: LD_INT 1
  94: PUSH
  95: EMPTY
  96: LIST
  97: LIST
  98: PUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 3
 104: PUSH
 105: EMPTY
 106: LIST
 107: LIST
 108: PUSH
 109: LD_INT 30
 111: PUSH
 112: LD_INT 0
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: EMPTY
 120: LIST
 121: LIST
 122: LIST
 123: PPUSH
 124: CALL_OW 69
 128: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 129: LD_VAR 0 3
 133: PUSH
 134: LD_INT 1
 136: ARRAY
 137: PPUSH
 138: LD_STRING delta
 140: PPUSH
 141: CALL_OW 500
// uc_side = 1 ;
 145: LD_ADDR_OWVAR 20
 149: PUSH
 150: LD_INT 1
 152: ST_TO_ADDR
// uc_nation = 1 ;
 153: LD_ADDR_OWVAR 21
 157: PUSH
 158: LD_INT 1
 160: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 161: LD_ADDR_EXP 1
 165: PUSH
 166: LD_STRING JMM
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
<<<<<<< HEAD
 172: CALL 3783 0 2
=======
 172: CALL 3767 0 2
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
 176: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_STRING Harisson
 184: PPUSH
 185: LD_INT 0
 187: PPUSH
<<<<<<< HEAD
 188: CALL 3783 0 2
=======
 188: CALL 3767 0 2
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
 192: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 193: LD_EXP 1
 197: PPUSH
 198: LD_VAR 0 3
 202: PUSH
 203: LD_INT 1
 205: ARRAY
 206: PPUSH
 207: CALL_OW 250
 211: PPUSH
 212: LD_VAR 0 3
 216: PUSH
 217: LD_INT 1
 219: ARRAY
 220: PPUSH
 221: CALL_OW 251
 225: PPUSH
 226: LD_INT 5
 228: PPUSH
 229: LD_INT 0
 231: PPUSH
 232: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 236: LD_EXP 1
 240: PPUSH
 241: LD_INT 1
 243: PPUSH
 244: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true ) ;
 248: LD_ADDR_EXP 2
 252: PUSH
 253: LD_STRING Gladstone
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
<<<<<<< HEAD
 259: CALL 3783 0 2
=======
 259: CALL 3767 0 2
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
 263: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 264: LD_EXP 2
 268: PPUSH
 269: LD_VAR 0 3
 273: PUSH
 274: LD_INT 1
 276: ARRAY
 277: PPUSH
 278: CALL_OW 250
 282: PPUSH
 283: LD_VAR 0 3
 287: PUSH
 288: LD_INT 1
 290: ARRAY
 291: PPUSH
 292: CALL_OW 251
 296: PPUSH
 297: LD_INT 5
 299: PPUSH
 300: LD_INT 0
 302: PPUSH
 303: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 307: LD_EXP 2
 311: PPUSH
 312: LD_INT 4
 314: PPUSH
 315: CALL_OW 336
// Denis = PrepareUnit ( Denis , true ) ;
 319: LD_ADDR_EXP 3
 323: PUSH
 324: LD_STRING Denis
 326: PPUSH
 327: LD_INT 1
 329: PPUSH
<<<<<<< HEAD
 330: CALL 3783 0 2
=======
 330: CALL 3767 0 2
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
 334: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 335: LD_EXP 3
 339: PPUSH
 340: LD_VAR 0 3
 344: PUSH
 345: LD_INT 1
 347: ARRAY
 348: PPUSH
 349: CALL_OW 250
 353: PPUSH
 354: LD_VAR 0 3
 358: PUSH
 359: LD_INT 1
 361: ARRAY
 362: PPUSH
 363: CALL_OW 251
 367: PPUSH
 368: LD_INT 5
 370: PPUSH
 371: LD_INT 0
 373: PPUSH
 374: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 378: LD_EXP 3
 382: PPUSH
 383: LD_INT 4
 385: PPUSH
 386: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 390: LD_STRING FrankInDelta
 392: PPUSH
 393: LD_INT 0
 395: PPUSH
 396: CALL_OW 30
 400: PUSH
 401: LD_INT 1
 403: EQUAL
 404: IFFALSE 477
// begin Frank = PrepareUnit ( Frank , true ) ;
 406: LD_ADDR_EXP 5
 410: PUSH
 411: LD_STRING Frank
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
<<<<<<< HEAD
 417: CALL 3783 0 2
=======
 417: CALL 3767 0 2
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
 421: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 422: LD_EXP 5
 426: PPUSH
 427: LD_VAR 0 3
 431: PUSH
 432: LD_INT 1
 434: ARRAY
 435: PPUSH
 436: CALL_OW 250
 440: PPUSH
 441: LD_VAR 0 3
 445: PUSH
 446: LD_INT 1
 448: ARRAY
 449: PPUSH
 450: CALL_OW 251
 454: PPUSH
 455: LD_INT 5
 457: PPUSH
 458: LD_INT 0
 460: PPUSH
 461: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 465: LD_EXP 5
 469: PPUSH
 470: LD_INT 1
 472: PPUSH
 473: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 477: LD_STRING LisaInDelta
 479: PPUSH
 480: LD_INT 0
 482: PPUSH
 483: CALL_OW 30
 487: PUSH
 488: LD_INT 1
 490: EQUAL
 491: IFFALSE 564
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 493: LD_ADDR_EXP 4
 497: PUSH
 498: LD_STRING Lisa
 500: PPUSH
 501: LD_INT 1
 503: PPUSH
<<<<<<< HEAD
 504: CALL 3783 0 2
=======
 504: CALL 3767 0 2
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
 508: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 509: LD_EXP 4
 513: PPUSH
 514: LD_VAR 0 3
 518: PUSH
 519: LD_INT 1
 521: ARRAY
 522: PPUSH
 523: CALL_OW 250
 527: PPUSH
 528: LD_VAR 0 3
 532: PUSH
 533: LD_INT 1
 535: ARRAY
 536: PPUSH
 537: CALL_OW 251
 541: PPUSH
 542: LD_INT 5
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 552: LD_EXP 4
 556: PPUSH
 557: LD_INT 1
 559: PPUSH
 560: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 564: LD_STRING BobbyInDelta
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL_OW 30
 574: PUSH
 575: LD_INT 1
 577: EQUAL
 578: IFFALSE 651
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 580: LD_ADDR_EXP 6
 584: PUSH
 585: LD_STRING Bobby
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
<<<<<<< HEAD
 591: CALL 3783 0 2
=======
 591: CALL 3767 0 2
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
 595: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 596: LD_EXP 6
 600: PPUSH
 601: LD_VAR 0 3
 605: PUSH
 606: LD_INT 1
 608: ARRAY
 609: PPUSH
 610: CALL_OW 250
 614: PPUSH
 615: LD_VAR 0 3
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: CALL_OW 251
 628: PPUSH
 629: LD_INT 5
 631: PPUSH
 632: LD_INT 0
 634: PPUSH
 635: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 639: LD_EXP 6
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 651: LD_STRING CyrusInDelta
 653: PPUSH
 654: LD_INT 0
 656: PPUSH
 657: CALL_OW 30
 661: PUSH
 662: LD_INT 1
 664: EQUAL
 665: IFFALSE 738
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 667: LD_ADDR_EXP 7
 671: PUSH
 672: LD_STRING Cyrus
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
<<<<<<< HEAD
 678: CALL 3783 0 2
=======
 678: CALL 3767 0 2
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
 682: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 683: LD_EXP 7
 687: PPUSH
 688: LD_VAR 0 3
 692: PUSH
 693: LD_INT 1
 695: ARRAY
 696: PPUSH
 697: CALL_OW 250
 701: PPUSH
 702: LD_VAR 0 3
 706: PUSH
 707: LD_INT 1
 709: ARRAY
 710: PPUSH
 711: CALL_OW 251
 715: PPUSH
 716: LD_INT 5
 718: PPUSH
 719: LD_INT 0
 721: PPUSH
 722: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 726: LD_EXP 7
 730: PPUSH
 731: LD_INT 1
 733: PPUSH
 734: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 738: LD_STRING DonaldsonInDelta
 740: PPUSH
 741: LD_INT 0
 743: PPUSH
 744: CALL_OW 30
 748: PUSH
 749: LD_INT 1
 751: EQUAL
 752: IFFALSE 825
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 754: LD_ADDR_EXP 9
 758: PUSH
 759: LD_STRING Donaldson
 761: PPUSH
 762: LD_INT 1
 764: PPUSH
<<<<<<< HEAD
 765: CALL 3783 0 2
=======
 765: CALL 3767 0 2
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
 769: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 770: LD_EXP 9
 774: PPUSH
 775: LD_VAR 0 3
 779: PUSH
 780: LD_INT 1
 782: ARRAY
 783: PPUSH
 784: CALL_OW 250
 788: PPUSH
 789: LD_VAR 0 3
 793: PUSH
 794: LD_INT 1
 796: ARRAY
 797: PPUSH
 798: CALL_OW 251
 802: PPUSH
 803: LD_INT 5
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
 813: LD_EXP 9
 817: PPUSH
 818: LD_INT 1
 820: PPUSH
 821: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
 825: LD_STRING BrownInDelta
 827: PPUSH
 828: LD_INT 0
 830: PPUSH
 831: CALL_OW 30
 835: PUSH
 836: LD_INT 1
 838: EQUAL
 839: IFFALSE 912
// begin Brown = PrepareUnit ( Brown , true ) ;
 841: LD_ADDR_EXP 8
 845: PUSH
 846: LD_STRING Brown
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
<<<<<<< HEAD
 852: CALL 3783 0 2
=======
 852: CALL 3767 0 2
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
 856: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 857: LD_EXP 8
 861: PPUSH
 862: LD_VAR 0 3
 866: PUSH
 867: LD_INT 1
 869: ARRAY
 870: PPUSH
 871: CALL_OW 250
 875: PPUSH
 876: LD_VAR 0 3
 880: PUSH
 881: LD_INT 1
 883: ARRAY
 884: PPUSH
 885: CALL_OW 251
 889: PPUSH
 890: LD_INT 5
 892: PPUSH
 893: LD_INT 0
 895: PPUSH
 896: CALL_OW 50
// SetClass ( Brown , 2 ) ;
 900: LD_EXP 8
 904: PPUSH
 905: LD_INT 2
 907: PPUSH
 908: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
 912: LD_ADDR_EXP 10
 916: PUSH
 917: LD_STRING othersInDelta
 919: PPUSH
 920: CALL_OW 31
 924: ST_TO_ADDR
// for i in others do
 925: LD_ADDR_VAR 0 2
 929: PUSH
 930: LD_EXP 10
 934: PUSH
 935: FOR_IN
 936: IFFALSE 983
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
 938: LD_VAR 0 2
 942: PPUSH
 943: LD_VAR 0 3
 947: PUSH
 948: LD_INT 1
 950: ARRAY
 951: PPUSH
 952: CALL_OW 250
 956: PPUSH
 957: LD_VAR 0 3
 961: PUSH
 962: LD_INT 1
 964: ARRAY
 965: PPUSH
 966: CALL_OW 251
 970: PPUSH
 971: LD_INT 35
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 50
 981: GO 935
 983: POP
 984: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
 985: LD_ADDR_EXP 11
 989: PUSH
 990: LD_STRING apeInDelta
 992: PPUSH
 993: CALL_OW 31
 997: ST_TO_ADDR
// uc_nation = 0 ;
 998: LD_ADDR_OWVAR 21
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// if apemans > 5 then
1006: LD_EXP 11
1010: PUSH
1011: LD_INT 5
1013: GREATER
1014: IFFALSE 1109
// begin for i := 1 to 5 do
1016: LD_ADDR_VAR 0 2
1020: PUSH
1021: DOUBLE
1022: LD_INT 1
1024: DEC
1025: ST_TO_ADDR
1026: LD_INT 5
1028: PUSH
1029: FOR_TO
1030: IFFALSE 1105
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1032: LD_EXP 11
1036: PUSH
1037: LD_VAR 0 2
1041: ARRAY
1042: PPUSH
1043: LD_VAR 0 3
1047: PUSH
1048: LD_INT 1
1050: ARRAY
1051: PPUSH
1052: CALL_OW 250
1056: PPUSH
1057: LD_VAR 0 3
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 251
1070: PPUSH
1071: LD_INT 50
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1081: LD_ADDR_EXP 12
1085: PUSH
1086: LD_EXP 12
1090: PUSH
1091: LD_EXP 11
1095: PUSH
1096: LD_VAR 0 2
1100: ARRAY
1101: ADD
1102: ST_TO_ADDR
// end ;
1103: GO 1029
1105: POP
1106: POP
// end else
1107: GO 1185
// begin for i in apemans do
1109: LD_ADDR_VAR 0 2
1113: PUSH
1114: LD_EXP 11
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1183
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1122: LD_VAR 0 2
1126: PPUSH
1127: LD_VAR 0 3
1131: PUSH
1132: LD_INT 1
1134: ARRAY
1135: PPUSH
1136: CALL_OW 250
1140: PPUSH
1141: LD_VAR 0 3
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PPUSH
1150: CALL_OW 251
1154: PPUSH
1155: LD_INT 50
1157: PPUSH
1158: LD_INT 0
1160: PPUSH
1161: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1165: LD_ADDR_EXP 12
1169: PUSH
1170: LD_EXP 12
1174: PUSH
1175: LD_VAR 0 2
1179: ADD
1180: ST_TO_ADDR
// end ;
1181: GO 1119
1183: POP
1184: POP
// end ; end ;
1185: LD_VAR 0 1
1189: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1190: LD_INT 0
1192: PPUSH
1193: PPUSH
1194: PPUSH
1195: PPUSH
1196: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1197: LD_ADDR_VAR 0 4
1201: PUSH
1202: LD_INT 22
1204: PUSH
1205: LD_INT 1
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 21
1214: PUSH
1215: LD_INT 3
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: PUSH
1222: LD_INT 30
1224: PUSH
1225: LD_INT 0
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 69
1241: ST_TO_ADDR
// uc_side = 1 ;
1242: LD_ADDR_OWVAR 20
1246: PUSH
1247: LD_INT 1
1249: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1250: LD_ADDR_VAR 0 5
1254: PUSH
1255: LD_STRING vehiclesInDelta
1257: PPUSH
1258: EMPTY
1259: PPUSH
1260: CALL_OW 30
1264: ST_TO_ADDR
// for i = 1 to vehicles do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: DOUBLE
1271: LD_INT 1
1273: DEC
1274: ST_TO_ADDR
1275: LD_VAR 0 5
1279: PUSH
1280: FOR_TO
<<<<<<< HEAD
1281: IFFALSE 1484
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
=======
1281: IFFALSE 1468
// begin if vehicles [ i + 4 ] = 11 then
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
1283: LD_VAR 0 5
1287: PUSH
1288: LD_VAR 0 2
1292: PUSH
1293: LD_INT 4
1295: PLUS
1296: ARRAY
1297: PUSH
1298: LD_INT 11
1300: EQUAL
<<<<<<< HEAD
1301: PUSH
1302: LD_VAR 0 5
1306: PUSH
1307: LD_VAR 0 2
1311: ARRAY
1312: PUSH
1313: LD_INT 3
1315: EQUAL
1316: OR
1317: IFFALSE 1468
// begin uc_nation = vehicles [ i ] ;
1319: LD_ADDR_OWVAR 21
1323: PUSH
1324: LD_VAR 0 5
1328: PUSH
1329: LD_VAR 0 2
1333: ARRAY
1334: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1335: LD_ADDR_OWVAR 37
1339: PUSH
1340: LD_VAR 0 5
1344: PUSH
1345: LD_VAR 0 2
1349: PUSH
1350: LD_INT 1
1352: PLUS
1353: ARRAY
1354: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1355: LD_ADDR_OWVAR 39
1359: PUSH
1360: LD_VAR 0 5
1364: PUSH
1365: LD_VAR 0 2
1369: PUSH
1370: LD_INT 2
1372: PLUS
1373: ARRAY
1374: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1375: LD_ADDR_OWVAR 38
1379: PUSH
1380: LD_VAR 0 5
1384: PUSH
1385: LD_VAR 0 2
1389: PUSH
1390: LD_INT 3
1392: PLUS
1393: ARRAY
1394: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1395: LD_ADDR_OWVAR 40
1399: PUSH
1400: LD_VAR 0 5
1404: PUSH
1405: LD_VAR 0 2
1409: PUSH
1410: LD_INT 4
1412: PLUS
1413: ARRAY
1414: ST_TO_ADDR
// veh = CreateVehicle ;
1415: LD_ADDR_VAR 0 3
1419: PUSH
1420: CALL_OW 45
1424: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1425: LD_VAR 0 3
1429: PPUSH
1430: LD_VAR 0 4
1434: PUSH
1435: LD_INT 1
1437: ARRAY
1438: PPUSH
1439: CALL_OW 250
1443: PPUSH
1444: LD_VAR 0 4
1448: PUSH
1449: LD_INT 1
1451: ARRAY
1452: PPUSH
1453: CALL_OW 251
1457: PPUSH
1458: LD_INT 40
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 50
// end ; i = i + 4 ;
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 2
1477: PUSH
1478: LD_INT 4
1480: PLUS
1481: ST_TO_ADDR
// end ;
1482: GO 1280
1484: POP
1485: POP
// end ;
1486: LD_VAR 0 1
1490: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
1491: LD_INT 0
1493: PPUSH
1494: PPUSH
1495: PPUSH
1496: PPUSH
// uc_side = 1 ;
1497: LD_ADDR_OWVAR 20
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// uc_nation = 1 ;
1505: LD_ADDR_OWVAR 21
1509: PUSH
1510: LD_INT 1
1512: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1513: LD_ADDR_VAR 0 4
1517: PUSH
1518: LD_INT 22
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: PUSH
1528: LD_INT 21
1530: PUSH
1531: LD_INT 3
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PUSH
1538: LD_INT 30
1540: PUSH
1541: LD_INT 0
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
=======
1301: IFFALSE 1452
// begin uc_nation = vehicles [ i ] ;
1303: LD_ADDR_OWVAR 21
1307: PUSH
1308: LD_VAR 0 5
1312: PUSH
1313: LD_VAR 0 2
1317: ARRAY
1318: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1319: LD_ADDR_OWVAR 37
1323: PUSH
1324: LD_VAR 0 5
1328: PUSH
1329: LD_VAR 0 2
1333: PUSH
1334: LD_INT 1
1336: PLUS
1337: ARRAY
1338: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1339: LD_ADDR_OWVAR 39
1343: PUSH
1344: LD_VAR 0 5
1348: PUSH
1349: LD_VAR 0 2
1353: PUSH
1354: LD_INT 2
1356: PLUS
1357: ARRAY
1358: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1359: LD_ADDR_OWVAR 38
1363: PUSH
1364: LD_VAR 0 5
1368: PUSH
1369: LD_VAR 0 2
1373: PUSH
1374: LD_INT 3
1376: PLUS
1377: ARRAY
1378: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1379: LD_ADDR_OWVAR 40
1383: PUSH
1384: LD_VAR 0 5
1388: PUSH
1389: LD_VAR 0 2
1393: PUSH
1394: LD_INT 4
1396: PLUS
1397: ARRAY
1398: ST_TO_ADDR
// veh = CreateVehicle ;
1399: LD_ADDR_VAR 0 3
1403: PUSH
1404: CALL_OW 45
1408: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1409: LD_VAR 0 3
1413: PPUSH
1414: LD_VAR 0 4
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: CALL_OW 250
1427: PPUSH
1428: LD_VAR 0 4
1432: PUSH
1433: LD_INT 1
1435: ARRAY
1436: PPUSH
1437: CALL_OW 251
1441: PPUSH
1442: LD_INT 40
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 50
// end ; i = i + 4 ;
1452: LD_ADDR_VAR 0 2
1456: PUSH
1457: LD_VAR 0 2
1461: PUSH
1462: LD_INT 4
1464: PLUS
1465: ST_TO_ADDR
// end ;
1466: GO 1280
1468: POP
1469: POP
// end ;
1470: LD_VAR 0 1
1474: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
1475: LD_INT 0
1477: PPUSH
1478: PPUSH
1479: PPUSH
1480: PPUSH
// uc_side = 1 ;
1481: LD_ADDR_OWVAR 20
1485: PUSH
1486: LD_INT 1
1488: ST_TO_ADDR
// uc_nation = 1 ;
1489: LD_ADDR_OWVAR 21
1493: PUSH
1494: LD_INT 1
1496: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1497: LD_ADDR_VAR 0 4
1501: PUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 3
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 30
1524: PUSH
1525: LD_INT 0
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: EMPTY
1533: LIST
1534: LIST
1535: LIST
1536: PPUSH
1537: CALL_OW 69
1541: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis ] then
1542: LD_INT 22
1544: PUSH
1545: LD_INT 1
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
<<<<<<< HEAD
1551: LIST
1552: PPUSH
1553: CALL_OW 69
1557: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis ] then
1558: LD_INT 22
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PUSH
1568: LD_INT 25
1570: PUSH
1571: LD_INT 4
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PUSH
1578: LD_INT 26
1580: PUSH
1581: LD_INT 1
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: PPUSH
1596: CALL_OW 69
1600: PUSH
1601: LD_EXP 1
1605: PUSH
1606: LD_EXP 7
1610: PUSH
1611: LD_EXP 6
1615: PUSH
1616: LD_EXP 5
1620: PUSH
1621: LD_EXP 2
1625: PUSH
1626: LD_EXP 3
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: DIFF
1639: IFFALSE 1732
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis ] ) [ 1 ] ;
1641: LD_ADDR_EXP 14
1645: PUSH
1646: LD_INT 22
1648: PUSH
1649: LD_INT 1
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 25
1658: PUSH
1659: LD_INT 4
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 26
1668: PUSH
1669: LD_INT 1
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: PUSH
1681: EMPTY
1682: LIST
1683: PPUSH
1684: CALL_OW 69
1688: PUSH
1689: LD_EXP 1
1693: PUSH
1694: LD_EXP 7
1698: PUSH
1699: LD_EXP 6
1703: PUSH
1704: LD_EXP 5
1708: PUSH
1709: LD_EXP 2
1713: PUSH
1714: LD_EXP 3
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: DIFF
1727: PUSH
1728: LD_INT 1
1730: ARRAY
1731: ST_TO_ADDR
// for i = 1 to 6 + Difficulty do
1732: LD_ADDR_VAR 0 2
1736: PUSH
1737: DOUBLE
1738: LD_INT 1
1740: DEC
1741: ST_TO_ADDR
1742: LD_INT 6
1744: PUSH
1745: LD_OWVAR 67
1749: PLUS
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1879
// begin hc_gallery =  ;
1754: LD_ADDR_OWVAR 33
1758: PUSH
1759: LD_STRING 
1761: ST_TO_ADDR
// hc_name =  ;
1762: LD_ADDR_OWVAR 26
1766: PUSH
1767: LD_STRING 
1769: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) - Difficulty ) ;
1770: LD_INT 0
1772: PPUSH
1773: LD_INT 1
1775: PUSH
1776: LD_INT 2
1778: PUSH
1779: LD_INT 3
1781: PUSH
1782: LD_INT 4
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_INT 4
1796: PPUSH
1797: CALL_OW 12
1801: ARRAY
1802: PPUSH
1803: LD_INT 3
1805: PPUSH
1806: LD_INT 5
1808: PPUSH
1809: CALL_OW 12
1813: PUSH
1814: LD_OWVAR 67
1818: MINUS
1819: PPUSH
1820: CALL_OW 380
// un = CreateHuman ;
1824: LD_ADDR_VAR 0 3
1828: PUSH
1829: CALL_OW 44
1833: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1834: LD_VAR 0 3
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: ARRAY
1847: PPUSH
1848: CALL_OW 250
1852: PPUSH
1853: LD_VAR 0 4
1857: PUSH
1858: LD_INT 1
1860: ARRAY
1861: PPUSH
1862: CALL_OW 251
1866: PPUSH
1867: LD_INT 15
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 50
// end ;
1877: GO 1751
1879: POP
1880: POP
// if deltaDoctor then
1881: LD_EXP 14
1885: IFFALSE 1889
// exit ;
1887: GO 1971
// hc_gallery =  ;
1889: LD_ADDR_OWVAR 33
1893: PUSH
1894: LD_STRING 
1896: ST_TO_ADDR
// hc_name = Dr. Michael Mills ;
1897: LD_ADDR_OWVAR 26
1901: PUSH
1902: LD_STRING Dr. Michael Mills
1904: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 4
1910: PPUSH
1911: LD_INT 6
1913: PPUSH
1914: CALL_OW 380
// deltaDoctor = CreateHuman ;
1918: LD_ADDR_EXP 14
1922: PUSH
1923: CALL_OW 44
1927: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1928: LD_EXP 14
1932: PPUSH
1933: LD_VAR 0 4
1937: PUSH
1938: LD_INT 1
1940: ARRAY
1941: PPUSH
1942: CALL_OW 250
1946: PPUSH
1947: LD_VAR 0 4
1951: PUSH
1952: LD_INT 1
1954: ARRAY
1955: PPUSH
1956: CALL_OW 251
1960: PPUSH
1961: LD_INT 5
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 50
// end ; end_of_file
1971: LD_VAR 0 1
1975: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
1976: LD_INT 0
1978: PPUSH
1979: PPUSH
1980: PPUSH
1981: PPUSH
1982: PPUSH
1983: PPUSH
1984: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
1985: LD_ADDR_VAR 0 5
1989: PUSH
1990: LD_STRING buildingsInDelta
1992: PPUSH
1993: EMPTY
1994: PPUSH
1995: CALL_OW 30
1999: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2000: LD_INT 68
2002: PPUSH
2003: LD_INT 40
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL_OW 441
// uc_side = 1 ;
2013: LD_ADDR_OWVAR 20
2017: PUSH
2018: LD_INT 1
2020: ST_TO_ADDR
// uc_nation = 1 ;
2021: LD_ADDR_OWVAR 21
2025: PUSH
2026: LD_INT 1
2028: ST_TO_ADDR
// for i = 1 to buildings do
2029: LD_ADDR_VAR 0 2
2033: PUSH
2034: DOUBLE
2035: LD_INT 1
2037: DEC
2038: ST_TO_ADDR
2039: LD_VAR 0 5
2043: PUSH
2044: FOR_TO
2045: IFFALSE 2243
// begin bc_type = buildings [ i ] [ 1 ] ;
2047: LD_ADDR_OWVAR 42
2051: PUSH
2052: LD_VAR 0 5
2056: PUSH
2057: LD_VAR 0 2
2061: ARRAY
2062: PUSH
2063: LD_INT 1
2065: ARRAY
2066: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2067: LD_ADDR_OWVAR 43
2071: PUSH
2072: LD_VAR 0 5
2076: PUSH
2077: LD_VAR 0 2
2081: ARRAY
2082: PUSH
2083: LD_INT 2
2085: ARRAY
2086: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2087: LD_OWVAR 42
2091: PUSH
2092: LD_INT 7
2094: EQUAL
2095: PUSH
2096: LD_OWVAR 42
2100: PUSH
2101: LD_INT 8
2103: EQUAL
2104: OR
2105: IFFALSE 2147
// begin bc_kind1 = buildings [ i ] [ 6 ] ;
2107: LD_ADDR_OWVAR 44
2111: PUSH
2112: LD_VAR 0 5
2116: PUSH
2117: LD_VAR 0 2
2121: ARRAY
2122: PUSH
2123: LD_INT 6
2125: ARRAY
2126: ST_TO_ADDR
// bc_kind2 = buildings [ i ] [ 7 ] ;
2127: LD_ADDR_OWVAR 45
2131: PUSH
2132: LD_VAR 0 5
2136: PUSH
2137: LD_VAR 0 2
2141: ARRAY
2142: PUSH
2143: LD_INT 7
2145: ARRAY
2146: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2147: LD_ADDR_VAR 0 4
2151: PUSH
2152: LD_VAR 0 5
2156: PUSH
2157: LD_VAR 0 2
2161: ARRAY
2162: PUSH
2163: LD_INT 3
2165: ARRAY
2166: PPUSH
2167: LD_VAR 0 5
2171: PUSH
2172: LD_VAR 0 2
2176: ARRAY
2177: PUSH
2178: LD_INT 4
2180: ARRAY
2181: PPUSH
2182: LD_VAR 0 5
2186: PUSH
2187: LD_VAR 0 2
2191: ARRAY
2192: PUSH
2193: LD_INT 5
2195: ARRAY
2196: PPUSH
2197: CALL_OW 47
2201: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2202: LD_VAR 0 4
2206: PPUSH
2207: CALL_OW 266
2211: PUSH
2212: LD_INT 32
2214: EQUAL
2215: IFFALSE 2241
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2217: LD_VAR 0 4
2221: PPUSH
2222: LD_VAR 0 5
2226: PUSH
2227: LD_VAR 0 2
2231: ARRAY
2232: PUSH
2233: LD_INT 8
2235: ARRAY
2236: PPUSH
2237: CALL_OW 431
// end ;
2241: GO 2044
2243: POP
2244: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2245: LD_ADDR_VAR 0 6
2249: PUSH
2250: LD_INT 22
2252: PUSH
2253: LD_INT 1
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 2
2262: PUSH
2263: LD_INT 30
2265: PUSH
2266: LD_INT 6
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 30
2275: PUSH
2276: LD_INT 7
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: PUSH
2283: LD_INT 30
2285: PUSH
2286: LD_INT 8
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: PPUSH
2303: CALL_OW 69
2307: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2308: LD_ADDR_VAR 0 7
2312: PUSH
2313: LD_INT 22
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: LD_INT 30
2325: PUSH
2326: LD_INT 0
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PPUSH
2337: CALL_OW 69
2341: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2342: LD_VAR 0 6
2346: PUSH
2347: LD_INT 0
2349: GREATER
2350: PUSH
2351: LD_VAR 0 7
2355: PUSH
2356: LD_INT 0
2358: GREATER
2359: AND
2360: IFFALSE 2370
// baseCorrect = 1 ;
2362: LD_ADDR_EXP 16
2366: PUSH
2367: LD_INT 1
2369: ST_TO_ADDR
// if baseCorrect = 0 then
2370: LD_EXP 16
2374: PUSH
2375: LD_INT 0
2377: EQUAL
2378: IFFALSE 2751
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2380: LD_ADDR_VAR 0 2
2384: PUSH
2385: LD_INT 22
2387: PUSH
2388: LD_INT 1
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PUSH
2395: LD_INT 21
2397: PUSH
2398: LD_INT 3
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: PPUSH
2409: CALL_OW 69
2413: PUSH
2414: FOR_IN
2415: IFFALSE 2428
// RemoveUnit ( i ) ;
2417: LD_VAR 0 2
2421: PPUSH
2422: CALL_OW 64
2426: GO 2414
2428: POP
2429: POP
// uc_nation = 1 ;
2430: LD_ADDR_OWVAR 21
2434: PUSH
2435: LD_INT 1
2437: ST_TO_ADDR
// uc_side = 1 ;
2438: LD_ADDR_OWVAR 20
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// bc_level = 5 ;
2446: LD_ADDR_OWVAR 43
2450: PUSH
2451: LD_INT 5
2453: ST_TO_ADDR
// bc_type = b_depot ;
2454: LD_ADDR_OWVAR 42
2458: PUSH
2459: LD_INT 0
2461: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2462: LD_INT 50
2464: PPUSH
2465: LD_INT 22
2467: PPUSH
2468: LD_INT 0
2470: PPUSH
2471: CALL_OW 47
// bc_type = b_bunker ;
2475: LD_ADDR_OWVAR 42
2479: PUSH
2480: LD_INT 32
2482: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2483: LD_ADDR_VAR 0 4
2487: PUSH
2488: LD_INT 68
2490: PPUSH
2491: LD_INT 24
2493: PPUSH
2494: LD_INT 4
2496: PPUSH
2497: CALL_OW 47
2501: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2502: LD_VAR 0 4
2506: PPUSH
2507: LD_INT 4
2509: PUSH
2510: LD_INT 11
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PUSH
2517: LD_INT 1
2519: PPUSH
2520: LD_INT 2
2522: PPUSH
2523: CALL_OW 12
2527: ARRAY
2528: PPUSH
2529: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2533: LD_ADDR_VAR 0 4
2537: PUSH
2538: LD_INT 71
2540: PPUSH
2541: LD_INT 34
2543: PPUSH
2544: LD_INT 4
2546: PPUSH
2547: CALL_OW 47
2551: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2552: LD_VAR 0 4
2556: PPUSH
2557: LD_INT 4
2559: PUSH
2560: LD_INT 11
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: LD_INT 1
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 12
2577: ARRAY
2578: PPUSH
2579: CALL_OW 431
// bc_type = 31 ;
2583: LD_ADDR_OWVAR 42
2587: PUSH
2588: LD_INT 31
2590: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
2591: LD_INT 51
2593: PPUSH
2594: LD_INT 7
2596: PPUSH
2597: LD_INT 3
2599: PPUSH
2600: CALL_OW 47
// bc_type = b_oil_mine ;
2604: LD_ADDR_OWVAR 42
2608: PUSH
2609: LD_INT 29
2611: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
2612: LD_INT 68
2614: PPUSH
2615: LD_INT 40
2617: PPUSH
2618: LD_INT 1
2620: PPUSH
2621: CALL_OW 47
// bc_type = b_workshop ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_INT 2
2632: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2633: LD_INT 38
2635: PPUSH
2636: LD_INT 20
2638: PPUSH
2639: LD_INT 2
2641: PPUSH
2642: CALL_OW 47
// bc_type = b_armoury ;
2646: LD_ADDR_OWVAR 42
2650: PUSH
2651: LD_INT 4
2653: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2654: LD_INT 38
2656: PPUSH
2657: LD_INT 20
2659: PPUSH
2660: LD_INT 2
2662: PPUSH
2663: CALL_OW 47
// bc_type = b_solar_power ;
2667: LD_ADDR_OWVAR 42
2671: PUSH
2672: LD_INT 27
2674: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
2675: LD_INT 46
2677: PPUSH
2678: LD_INT 12
2680: PPUSH
2681: LD_INT 1
2683: PPUSH
2684: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
2688: LD_INT 48
2690: PPUSH
2691: LD_INT 11
2693: PPUSH
2694: LD_INT 2
2696: PPUSH
2697: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
2701: LD_INT 49
2703: PPUSH
2704: LD_INT 11
2706: PPUSH
2707: LD_INT 3
2709: PPUSH
2710: CALL_OW 47
// bc_type = b_lab_half ;
2714: LD_ADDR_OWVAR 42
2718: PUSH
2719: LD_INT 7
2721: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
2722: LD_ADDR_OWVAR 44
2726: PUSH
2727: LD_INT 15
2729: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2730: LD_ADDR_OWVAR 45
2734: PUSH
2735: LD_INT 9
2737: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
2738: LD_INT 42
2740: PPUSH
2741: LD_INT 15
2743: PPUSH
2744: LD_INT 2
2746: PPUSH
2747: CALL_OW 47
// end ; end ; end_of_file
2751: LD_VAR 0 1
2755: RET
// every 1 do var i , j , lab , tmp ;
2756: GO 2758
2758: DISABLE
2759: LD_INT 0
2761: PPUSH
2762: PPUSH
2763: PPUSH
2764: PPUSH
// begin lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2765: LD_ADDR_VAR 0 3
2769: PUSH
2770: LD_INT 22
2772: PUSH
2773: LD_INT 1
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: LD_INT 2
2782: PUSH
2783: LD_INT 30
2785: PUSH
2786: LD_INT 6
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 30
2795: PUSH
2796: LD_INT 7
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 30
2805: PUSH
2806: LD_INT 8
2808: PUSH
2809: EMPTY
2810: LIST
2811: LIST
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: LIST
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: PPUSH
2823: CALL_OW 69
2827: ST_TO_ADDR
// InGameOn ;
2828: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
2832: LD_VAR 0 3
2836: PUSH
2837: LD_INT 1
2839: ARRAY
2840: PPUSH
2841: CALL_OW 87
// if IsOK ( Denis ) then
2845: LD_EXP 3
2849: PPUSH
2850: CALL_OW 302
2854: IFFALSE 2882
// begin SetTech ( tech_radar , 1 , state_researched ) ;
2856: LD_INT 6
2858: PPUSH
2859: LD_INT 1
2861: PPUSH
2862: LD_INT 2
2864: PPUSH
2865: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
2869: LD_INT 20
2871: PPUSH
2872: LD_INT 1
2874: PPUSH
2875: LD_INT 1
2877: PPUSH
2878: CALL_OW 324
// end ; ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
2882: LD_EXP 1
2886: PUSH
2887: LD_EXP 14
2891: PUSH
2892: LD_EXP 3
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: LD_VAR 0 3
2906: PUSH
2907: LD_INT 1
2909: ARRAY
2910: PPUSH
2911: CALL_OW 120
// Say ( JMM , D1-JMM-1 ) ;
2915: LD_EXP 1
2919: PPUSH
2920: LD_STRING D1-JMM-1
2922: PPUSH
2923: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
2927: LD_EXP 14
2931: PPUSH
2932: LD_STRING D1-Sci-1
2934: PPUSH
2935: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
2939: LD_EXP 1
2943: PPUSH
2944: LD_STRING D1-JMM-2
2946: PPUSH
2947: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
2951: LD_EXP 14
2955: PPUSH
2956: LD_STRING D1-Sci-2
2958: PPUSH
2959: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
2963: LD_EXP 1
2967: PPUSH
2968: LD_STRING D1-JMM-3
2970: PPUSH
2971: CALL_OW 88
// if IsOK ( Denis ) then
2975: LD_EXP 3
2979: PPUSH
2980: CALL_OW 302
2984: IFFALSE 3000
// Say ( DeltaDoctor , D1-Sci-3 ) else
2986: LD_EXP 14
2990: PPUSH
2991: LD_STRING D1-Sci-3
2993: PPUSH
2994: CALL_OW 88
2998: GO 3012
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3000: LD_EXP 14
3004: PPUSH
3005: LD_STRING D1-Sci-3a
3007: PPUSH
3008: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3012: LD_EXP 1
3016: PPUSH
3017: LD_STRING D1-JMM-4
3019: PPUSH
3020: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3024: LD_ADDR_VAR 0 4
3028: PUSH
3029: LD_INT 22
3031: PUSH
3032: LD_INT 1
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PUSH
3039: LD_INT 25
3041: PUSH
3042: LD_INT 4
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 3
3051: PUSH
3052: LD_INT 54
3054: PUSH
3055: EMPTY
3056: LIST
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: LIST
3066: PPUSH
3067: CALL_OW 69
3071: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3072: LD_ADDR_VAR 0 1
3076: PUSH
3077: LD_INT 22
3079: PUSH
3080: LD_INT 0
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: PPUSH
3087: CALL_OW 69
3091: PUSH
3092: FOR_IN
3093: IFFALSE 3143
// for j in tmp do
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 4
3104: PUSH
3105: FOR_IN
3106: IFFALSE 3139
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3108: LD_VAR 0 2
3112: PPUSH
3113: LD_VAR 0 1
3117: PPUSH
3118: CALL_OW 250
3122: PPUSH
3123: LD_VAR 0 1
3127: PPUSH
3128: CALL_OW 251
3132: PPUSH
3133: CALL_OW 191
3137: GO 3105
3139: POP
3140: POP
3141: GO 3092
3143: POP
3144: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3145: LD_EXP 14
3149: PPUSH
3150: LD_STRING D1-Sci-4
3152: PPUSH
3153: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING D1-JMM-5
3164: PPUSH
3165: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3169: LD_EXP 14
3173: PPUSH
3174: LD_STRING D1-Sci-5
3176: PPUSH
3177: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3181: LD_EXP 1
3185: PPUSH
3186: LD_STRING D1-JMM-6
3188: PPUSH
3189: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3193: LD_EXP 15
3197: PPUSH
3198: LD_STRING D1-Har-6
3200: PPUSH
3201: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3205: LD_EXP 1
3209: PPUSH
3210: LD_STRING D1-JMM-7
3212: PPUSH
3213: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3217: LD_EXP 15
3221: PPUSH
3222: LD_STRING D1-Har-7
3224: PPUSH
3225: CALL_OW 94
// if IsOK ( Denis ) then
3229: LD_EXP 3
3233: PPUSH
3234: CALL_OW 302
3238: IFFALSE 3252
// Say ( JMM , D1-JMM-8 ) ;
3240: LD_EXP 1
3244: PPUSH
3245: LD_STRING D1-JMM-8
3247: PPUSH
3248: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3252: LD_EXP 1
3256: PPUSH
3257: LD_STRING D1-JMM-8a
3259: PPUSH
3260: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3264: LD_EXP 15
3268: PPUSH
3269: LD_STRING D1-Har-8
3271: PPUSH
3272: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3276: LD_EXP 1
3280: PPUSH
3281: LD_STRING D1-JMM-9
3283: PPUSH
3284: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3288: LD_EXP 15
3292: PPUSH
3293: LD_STRING D1-Har-9
3295: PPUSH
3296: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3300: LD_EXP 1
3304: PPUSH
3305: LD_STRING D1-JMM-10
3307: PPUSH
3308: CALL_OW 88
// if IsOK ( Denis ) then
3312: LD_EXP 3
3316: PPUSH
3317: CALL_OW 302
3321: IFFALSE 3335
// Say ( JMM , D1-JMM-10a ) ;
3323: LD_EXP 1
3327: PPUSH
3328: LD_STRING D1-JMM-10a
3330: PPUSH
3331: CALL_OW 88
// SelectAndSaveCharacters ;
3335: CALL 3846 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3339: LD_VAR 0 3
3343: PUSH
3344: LD_INT 1
3346: ARRAY
3347: PPUSH
3348: CALL_OW 274
3352: PPUSH
3353: LD_INT 1
3355: PPUSH
3356: LD_INT 250
3358: PPUSH
3359: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3363: LD_INT 22
3365: PUSH
3366: LD_INT 1
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PUSH
3373: LD_INT 30
3375: PUSH
3376: LD_INT 29
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PPUSH
3387: CALL_OW 69
3391: PUSH
3392: LD_INT 0
3394: GREATER
3395: IFFALSE 3421
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3397: LD_VAR 0 3
3401: PUSH
3402: LD_INT 1
3404: ARRAY
3405: PPUSH
3406: CALL_OW 274
3410: PPUSH
3411: LD_INT 2
3413: PPUSH
3414: LD_INT 300
3416: PPUSH
3417: CALL_OW 277
// InGameOff ;
3421: CALL_OW 9
// Query ( Q1 ) ;
3425: LD_STRING Q1
3427: PPUSH
3428: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3432: LD_INT 3
3434: PPUSH
3435: LD_INT 1
3437: PPUSH
3438: CALL_OW 424
// if IsInUnit ( JMM ) then
3442: LD_EXP 1
3446: PPUSH
3447: CALL_OW 310
3451: IFFALSE 3462
// ComExitBuilding ( JMM ) ;
3453: LD_EXP 1
3457: PPUSH
3458: CALL_OW 122
// end ;
3462: PPOPN 4
3464: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i ;
3465: LD_INT 3
3467: PPUSH
3468: LD_INT 22
3470: PUSH
3471: LD_INT 1
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: PUSH
3478: LD_INT 21
3480: PUSH
3481: LD_INT 1
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 71
3496: PUSH
3497: LD_INT 0
3499: EQUAL
3500: IFFALSE 3780
3502: GO 3504
3504: DISABLE
3505: LD_INT 0
3507: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) > 0 then
3508: LD_INT 3
3510: PPUSH
3511: LD_INT 21
3513: PUSH
3514: LD_INT 2
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: EMPTY
3522: LIST
3523: PPUSH
3524: CALL_OW 70
3528: PUSH
3529: LD_INT 0
3531: GREATER
3532: IFFALSE 3770
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) do
3534: LD_ADDR_VAR 0 1
3538: PUSH
3539: LD_INT 3
3541: PPUSH
3542: LD_INT 21
3544: PUSH
3545: LD_INT 2
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: EMPTY
3553: LIST
3554: PPUSH
3555: CALL_OW 70
3559: PUSH
3560: FOR_IN
3561: IFFALSE 3756
// begin if GetWeapon ( i ) = us_cargo_bay then
3563: LD_VAR 0 1
3567: PPUSH
3568: CALL_OW 264
3572: PUSH
3573: LD_INT 12
3575: EQUAL
3576: IFFALSE 3683
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetCargoType ( i ) , GetCargo ( i , GetCargoType ( i ) ) ] ] ;
3578: LD_ADDR_EXP 13
3582: PUSH
3583: LD_EXP 13
3587: PUSH
3588: LD_VAR 0 1
3592: PPUSH
3593: CALL_OW 248
3597: PUSH
3598: LD_VAR 0 1
3602: PPUSH
3603: CALL_OW 265
3607: PUSH
3608: LD_VAR 0 1
3612: PPUSH
3613: CALL_OW 262
3617: PUSH
3618: LD_VAR 0 1
3622: PPUSH
3623: CALL_OW 263
3627: PUSH
3628: LD_VAR 0 1
3632: PPUSH
3633: CALL_OW 264
3637: PUSH
3638: LD_VAR 0 1
3642: PPUSH
3643: CALL_OW 288
3647: PUSH
3648: LD_VAR 0 1
3652: PPUSH
3653: LD_VAR 0 1
3657: PPUSH
3658: CALL_OW 288
3662: PPUSH
3663: CALL_OW 289
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: ADD
3680: ST_TO_ADDR
// end else
3681: GO 3754
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
3683: LD_ADDR_EXP 13
3687: PUSH
3688: LD_EXP 13
3692: PUSH
3693: LD_VAR 0 1
3697: PPUSH
3698: CALL_OW 248
3702: PUSH
3703: LD_VAR 0 1
3707: PPUSH
3708: CALL_OW 265
3712: PUSH
3713: LD_VAR 0 1
3717: PPUSH
3718: CALL_OW 262
3722: PUSH
3723: LD_VAR 0 1
3727: PPUSH
3728: CALL_OW 263
3732: PUSH
3733: LD_VAR 0 1
3737: PPUSH
3738: CALL_OW 264
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: ADD
3753: ST_TO_ADDR
// end ; end ;
3754: GO 3560
3756: POP
3757: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
3758: LD_EXP 13
3762: PPUSH
3763: LD_STRING 06_VehiclesIn06_1
3765: PPUSH
3766: CALL_OW 39
// end ; ChangeMap ( 6 , %_cont ) ;
3770: LD_INT 6
3772: PPUSH
3773: LD_STRING %_cont
3775: PPUSH
3776: CALL_OW 340
// end ; end_of_file
3780: PPOPN 1
3782: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3783: LD_INT 0
3785: PPUSH
3786: PPUSH
// if exist_mode then
3787: LD_VAR 0 2
3791: IFFALSE 3816
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3793: LD_ADDR_VAR 0 4
3797: PUSH
3798: LD_EXP 18
3802: PUSH
3803: LD_VAR 0 1
3807: STR
3808: PPUSH
3809: CALL_OW 34
3813: ST_TO_ADDR
3814: GO 3831
// unit := NewCharacter ( ident ) ;
3816: LD_ADDR_VAR 0 4
3820: PUSH
3821: LD_VAR 0 1
3825: PPUSH
3826: CALL_OW 25
3830: ST_TO_ADDR
// result := unit ;
3831: LD_ADDR_VAR 0 3
3835: PUSH
3836: LD_VAR 0 4
3840: ST_TO_ADDR
// end ;
3841: LD_VAR 0 3
3845: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test ; begin
3846: LD_INT 0
3848: PPUSH
3849: PPUSH
3850: PPUSH
3851: PPUSH
3852: PPUSH
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_INT 22
3860: PUSH
3861: LD_INT 1
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PUSH
3868: LD_INT 21
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PUSH
3878: LD_INT 2
3880: PUSH
3881: LD_INT 25
3883: PUSH
3884: LD_INT 1
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: PUSH
3891: LD_INT 25
3893: PUSH
3894: LD_INT 2
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: PUSH
3901: LD_INT 25
3903: PUSH
3904: LD_INT 3
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: PUSH
3911: LD_INT 25
3913: PUSH
3914: LD_INT 4
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: LIST
3932: PPUSH
3933: CALL_OW 69
3937: PUSH
3938: LD_EXP 1
3942: PUSH
3943: LD_EXP 14
3947: PUSH
3948: LD_EXP 3
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: LIST
3957: DIFF
3958: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , [ 5 , rand ( 4 , 5 ) , 4 ] [ Difficulty ] , [ 5 , rand ( 4 , 5 ) , 4 ] [ Difficulty ] , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
3959: LD_ADDR_VAR 0 4
3963: PUSH
3964: LD_STRING text
3966: PPUSH
3967: LD_INT 5
3969: PUSH
3970: LD_INT 4
3972: PPUSH
3973: LD_INT 5
3975: PPUSH
3976: CALL_OW 12
3980: PUSH
3981: LD_INT 4
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: LIST
3988: PUSH
3989: LD_OWVAR 67
3993: ARRAY
3994: PPUSH
3995: LD_INT 5
3997: PUSH
3998: LD_INT 4
4000: PPUSH
4001: LD_INT 5
4003: PPUSH
4004: CALL_OW 12
4008: PUSH
4009: LD_INT 4
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: LIST
4016: PUSH
4017: LD_OWVAR 67
4021: ARRAY
4022: PPUSH
4023: LD_INT -5
4025: PUSH
4026: LD_EXP 1
4030: PUSH
4031: LD_INT -6
4033: PUSH
4034: LD_INT -2
4036: PUSH
4037: LD_INT -3
4039: PUSH
4040: LD_INT -5
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_VAR 0 3
4055: ADD
4056: PUSH
4057: LD_INT -6
4059: PUSH
4060: LD_INT -4
4062: PUSH
4063: LD_EXP 3
4067: PUSH
4068: LD_EXP 14
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: ADD
4079: PPUSH
4080: LD_INT 1
4082: PUSH
4083: LD_INT 3
4085: PUSH
4086: LD_INT 2
4088: PUSH
4089: LD_INT 1
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: LD_INT 4
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 42
4109: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4110: LD_EXP 1
4114: PPUSH
4115: LD_EXP 17
4119: PUSH
4120: LD_STRING JMM
4122: STR
4123: PPUSH
4124: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4128: LD_EXP 14
4132: PPUSH
4133: LD_STRING DeltaDoctor
4135: PPUSH
4136: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4140: LD_EXP 3
4144: PPUSH
4145: LD_EXP 17
4149: PUSH
4150: LD_STRING Denis
4152: STR
4153: PPUSH
4154: CALL_OW 38
// if Lisa in selectedPeople then
4158: LD_EXP 4
4162: PUSH
4163: LD_VAR 0 4
4167: IN
4168: IFFALSE 4198
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4170: LD_EXP 4
4174: PPUSH
4175: LD_EXP 17
4179: PUSH
4180: LD_STRING Lisa
4182: STR
4183: PPUSH
4184: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4188: LD_INT 1
4190: PPUSH
4191: LD_STRING LisaIn06
4193: PPUSH
4194: CALL_OW 39
// end ; if Bobby in selectedPeople then
4198: LD_EXP 6
4202: PUSH
4203: LD_VAR 0 4
4207: IN
4208: IFFALSE 4238
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4210: LD_EXP 6
4214: PPUSH
4215: LD_EXP 17
4219: PUSH
4220: LD_STRING Bobby
4222: STR
4223: PPUSH
4224: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4228: LD_INT 1
4230: PPUSH
4231: LD_STRING BobbyIn06
4233: PPUSH
4234: CALL_OW 39
// end ; if Cyrus in selectedPeople then
4238: LD_EXP 7
4242: PUSH
4243: LD_VAR 0 4
4247: IN
4248: IFFALSE 4278
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4250: LD_EXP 7
4254: PPUSH
4255: LD_EXP 17
4259: PUSH
4260: LD_STRING Cyrus
4262: STR
4263: PPUSH
4264: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4268: LD_INT 1
4270: PPUSH
4271: LD_STRING CyrusIn06
4273: PPUSH
4274: CALL_OW 39
// end ; if Frank in selectedPeople then
4278: LD_EXP 5
4282: PUSH
4283: LD_VAR 0 4
4287: IN
4288: IFFALSE 4318
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4290: LD_EXP 5
4294: PPUSH
4295: LD_EXP 17
4299: PUSH
4300: LD_STRING Frank
4302: STR
4303: PPUSH
4304: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4308: LD_INT 1
4310: PPUSH
4311: LD_STRING FrankIn06
4313: PPUSH
4314: CALL_OW 39
// end ; if Brown in selectedPeople then
4318: LD_EXP 8
4322: PUSH
4323: LD_VAR 0 4
4327: IN
4328: IFFALSE 4358
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4330: LD_EXP 8
4334: PPUSH
4335: LD_EXP 17
4339: PUSH
4340: LD_STRING Brown
4342: STR
4343: PPUSH
4344: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
4348: LD_INT 1
4350: PPUSH
4351: LD_STRING BrownIn06
4353: PPUSH
4354: CALL_OW 39
// end ; if Donaldson in selectedPeople then
4358: LD_EXP 9
4362: PUSH
4363: LD_VAR 0 4
4367: IN
4368: IFFALSE 4398
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
4370: LD_EXP 9
4374: PPUSH
4375: LD_EXP 17
4379: PUSH
4380: LD_STRING Donaldson
4382: STR
4383: PPUSH
4384: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
4388: LD_INT 1
4390: PPUSH
4391: LD_STRING DonaldsonIn06
4393: PPUSH
4394: CALL_OW 39
// end ; if Gladstone in selectedPeople then
4398: LD_EXP 2
4402: PUSH
4403: LD_VAR 0 4
4407: IN
4408: IFFALSE 4438
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4410: LD_EXP 2
4414: PPUSH
4415: LD_EXP 17
4419: PUSH
4420: LD_STRING Gladstone
4422: STR
4423: PPUSH
4424: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
4428: LD_INT 1
4430: PPUSH
4431: LD_STRING GladstoneIn06
4433: PPUSH
4434: CALL_OW 39
// end ; SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4438: LD_INT 22
4440: PUSH
4441: LD_INT 1
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: PUSH
4448: LD_INT 21
4450: PUSH
4451: LD_INT 1
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: PPUSH
4467: LD_INT 4
4469: PPUSH
4470: CALL_OW 235
// for i in selectedPeople do
4474: LD_ADDR_VAR 0 2
4478: PUSH
4479: LD_VAR 0 4
4483: PUSH
4484: FOR_IN
4485: IFFALSE 4501
// SetSide ( i , 1 ) ;
4487: LD_VAR 0 2
4491: PPUSH
4492: LD_INT 1
4494: PPUSH
4495: CALL_OW 235
4499: GO 4484
4501: POP
4502: POP
// for i in yourApemans do
4503: LD_ADDR_VAR 0 2
4507: PUSH
4508: LD_EXP 12
4512: PUSH
4513: FOR_IN
4514: IFFALSE 4530
// SetSide ( i , 1 ) ;
4516: LD_VAR 0 2
4520: PPUSH
4521: LD_INT 1
4523: PPUSH
4524: CALL_OW 235
4528: GO 4513
4530: POP
4531: POP
// SetSide ( JMM , 1 ) ;
4532: LD_EXP 1
4536: PPUSH
4537: LD_INT 1
4539: PPUSH
4540: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4544: LD_EXP 12
4548: PPUSH
4549: LD_INT 2
4551: PPUSH
4552: LD_INT 5
4554: PPUSH
4555: CALL_OW 237
// SaveCharacters ( yourApemans , ApeIn06 ) ;
4559: LD_EXP 12
4563: PPUSH
4564: LD_STRING ApeIn06
4566: PPUSH
4567: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone ] , OthersIn06 ) ;
4571: LD_INT 22
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 21
4583: PUSH
4584: LD_INT 1
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: LD_INT 2
4593: PUSH
4594: LD_INT 25
4596: PUSH
4597: LD_INT 1
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: LD_INT 25
4606: PUSH
4607: LD_INT 2
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: PUSH
4614: LD_INT 25
4616: PUSH
4617: LD_INT 3
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: PUSH
4624: LD_INT 25
4626: PUSH
4627: LD_INT 4
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: PPUSH
4646: CALL_OW 69
4650: PUSH
4651: LD_EXP 1
4655: PUSH
4656: LD_EXP 4
4660: PUSH
4661: LD_EXP 6
4665: PUSH
4666: LD_EXP 7
4670: PUSH
4671: LD_EXP 5
4675: PUSH
4676: LD_EXP 8
4680: PUSH
4681: LD_EXP 9
4685: PUSH
4686: LD_EXP 2
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: DIFF
4701: PPUSH
4702: LD_STRING OthersIn06
4704: PPUSH
4705: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor ] , OthersStayInDelta ) ;
4709: LD_INT 22
4711: PUSH
4712: LD_INT 4
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: PUSH
4719: LD_INT 2
4721: PUSH
4722: LD_INT 25
4724: PUSH
4725: LD_INT 1
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: LD_INT 25
4734: PUSH
4735: LD_INT 2
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: PUSH
4742: LD_INT 25
4744: PUSH
4745: LD_INT 3
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 25
4754: PUSH
4755: LD_INT 4
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PPUSH
4773: CALL_OW 69
4777: PUSH
4778: LD_EXP 14
4782: PUSH
4783: EMPTY
4784: LIST
4785: DIFF
4786: PPUSH
4787: LD_STRING OthersStayInDelta
4789: PPUSH
4790: CALL_OW 38
// end ; end_of_file
4794: LD_VAR 0 1
4798: RET
// on Command ( comandid ) do var i ;
4799: LD_INT 0
4801: PPUSH
// begin if comandid = 65 then
4802: LD_VAR 0 1
4806: PUSH
4807: LD_INT 65
4809: EQUAL
4810: IFFALSE 4851
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
4812: LD_ADDR_VAR 0 2
4816: PUSH
4817: LD_INT 22
4819: PUSH
4820: LD_INT 1
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PUSH
4827: EMPTY
4828: LIST
4829: PPUSH
4830: CALL_OW 69
4834: PUSH
4835: FOR_IN
4836: IFFALSE 4849
// ComStop ( i ) ;
4838: LD_VAR 0 2
4842: PPUSH
4843: CALL_OW 141
4847: GO 4835
4849: POP
4850: POP
// end ;
4851: PPOPN 2
4853: END
// on ApemanTamed ( apeman , human ) do var tmp ;
4854: LD_INT 0
4856: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
4857: LD_ADDR_VAR 0 3
4861: PUSH
4862: LD_INT 22
4864: PUSH
4865: LD_INT 1
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 21
4874: PUSH
4875: LD_INT 3
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 30
4884: PUSH
4885: LD_INT 0
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: PPUSH
4897: CALL_OW 69
4901: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
4902: LD_VAR 0 1
4906: PPUSH
4907: LD_VAR 0 3
4911: PUSH
4912: LD_INT 1
4914: ARRAY
4915: PPUSH
4916: CALL_OW 120
// SetSide ( apeman , 4 ) ;
4920: LD_VAR 0 1
4924: PPUSH
4925: LD_INT 4
4927: PPUSH
4928: CALL_OW 235
// end ;
4932: PPOPN 3
4934: END
=======
1551: PUSH
1552: LD_INT 25
1554: PUSH
1555: LD_INT 4
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 26
1564: PUSH
1565: LD_INT 1
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: LIST
1576: PUSH
1577: EMPTY
1578: LIST
1579: PPUSH
1580: CALL_OW 69
1584: PUSH
1585: LD_EXP 1
1589: PUSH
1590: LD_EXP 7
1594: PUSH
1595: LD_EXP 6
1599: PUSH
1600: LD_EXP 5
1604: PUSH
1605: LD_EXP 2
1609: PUSH
1610: LD_EXP 3
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: DIFF
1623: IFFALSE 1716
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis ] ) [ 1 ] ;
1625: LD_ADDR_EXP 14
1629: PUSH
1630: LD_INT 22
1632: PUSH
1633: LD_INT 1
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 25
1642: PUSH
1643: LD_INT 4
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 26
1652: PUSH
1653: LD_INT 1
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 1
1677: PUSH
1678: LD_EXP 7
1682: PUSH
1683: LD_EXP 6
1687: PUSH
1688: LD_EXP 5
1692: PUSH
1693: LD_EXP 2
1697: PUSH
1698: LD_EXP 3
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: DIFF
1711: PUSH
1712: LD_INT 1
1714: ARRAY
1715: ST_TO_ADDR
// for i = 1 to 6 + Difficulty do
1716: LD_ADDR_VAR 0 2
1720: PUSH
1721: DOUBLE
1722: LD_INT 1
1724: DEC
1725: ST_TO_ADDR
1726: LD_INT 6
1728: PUSH
1729: LD_OWVAR 67
1733: PLUS
1734: PUSH
1735: FOR_TO
1736: IFFALSE 1863
// begin hc_gallery =  ;
1738: LD_ADDR_OWVAR 33
1742: PUSH
1743: LD_STRING 
1745: ST_TO_ADDR
// hc_name =  ;
1746: LD_ADDR_OWVAR 26
1750: PUSH
1751: LD_STRING 
1753: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) - Difficulty ) ;
1754: LD_INT 0
1756: PPUSH
1757: LD_INT 1
1759: PUSH
1760: LD_INT 2
1762: PUSH
1763: LD_INT 3
1765: PUSH
1766: LD_INT 4
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: PUSH
1775: LD_INT 1
1777: PPUSH
1778: LD_INT 4
1780: PPUSH
1781: CALL_OW 12
1785: ARRAY
1786: PPUSH
1787: LD_INT 3
1789: PPUSH
1790: LD_INT 5
1792: PPUSH
1793: CALL_OW 12
1797: PUSH
1798: LD_OWVAR 67
1802: MINUS
1803: PPUSH
1804: CALL_OW 380
// un = CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PUSH
1828: LD_INT 1
1830: ARRAY
1831: PPUSH
1832: CALL_OW 250
1836: PPUSH
1837: LD_VAR 0 4
1841: PUSH
1842: LD_INT 1
1844: ARRAY
1845: PPUSH
1846: CALL_OW 251
1850: PPUSH
1851: LD_INT 15
1853: PPUSH
1854: LD_INT 0
1856: PPUSH
1857: CALL_OW 50
// end ;
1861: GO 1735
1863: POP
1864: POP
// if deltaDoctor then
1865: LD_EXP 14
1869: IFFALSE 1873
// exit ;
1871: GO 1955
// hc_gallery =  ;
1873: LD_ADDR_OWVAR 33
1877: PUSH
1878: LD_STRING 
1880: ST_TO_ADDR
// hc_name = Dr. Michael Mills ;
1881: LD_ADDR_OWVAR 26
1885: PUSH
1886: LD_STRING Dr. Michael Mills
1888: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
1889: LD_INT 1
1891: PPUSH
1892: LD_INT 4
1894: PPUSH
1895: LD_INT 6
1897: PPUSH
1898: CALL_OW 380
// deltaDoctor = CreateHuman ;
1902: LD_ADDR_EXP 14
1906: PUSH
1907: CALL_OW 44
1911: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1912: LD_EXP 14
1916: PPUSH
1917: LD_VAR 0 4
1921: PUSH
1922: LD_INT 1
1924: ARRAY
1925: PPUSH
1926: CALL_OW 250
1930: PPUSH
1931: LD_VAR 0 4
1935: PUSH
1936: LD_INT 1
1938: ARRAY
1939: PPUSH
1940: CALL_OW 251
1944: PPUSH
1945: LD_INT 5
1947: PPUSH
1948: LD_INT 0
1950: PPUSH
1951: CALL_OW 50
// end ; end_of_file
1955: LD_VAR 0 1
1959: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
1960: LD_INT 0
1962: PPUSH
1963: PPUSH
1964: PPUSH
1965: PPUSH
1966: PPUSH
1967: PPUSH
1968: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
1969: LD_ADDR_VAR 0 5
1973: PUSH
1974: LD_STRING buildingsInDelta
1976: PPUSH
1977: EMPTY
1978: PPUSH
1979: CALL_OW 30
1983: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
1984: LD_INT 68
1986: PPUSH
1987: LD_INT 40
1989: PPUSH
1990: LD_INT 1
1992: PPUSH
1993: CALL_OW 441
// uc_side = 1 ;
1997: LD_ADDR_OWVAR 20
2001: PUSH
2002: LD_INT 1
2004: ST_TO_ADDR
// uc_nation = 1 ;
2005: LD_ADDR_OWVAR 21
2009: PUSH
2010: LD_INT 1
2012: ST_TO_ADDR
// for i = 1 to buildings do
2013: LD_ADDR_VAR 0 2
2017: PUSH
2018: DOUBLE
2019: LD_INT 1
2021: DEC
2022: ST_TO_ADDR
2023: LD_VAR 0 5
2027: PUSH
2028: FOR_TO
2029: IFFALSE 2227
// begin bc_type = buildings [ i ] [ 1 ] ;
2031: LD_ADDR_OWVAR 42
2035: PUSH
2036: LD_VAR 0 5
2040: PUSH
2041: LD_VAR 0 2
2045: ARRAY
2046: PUSH
2047: LD_INT 1
2049: ARRAY
2050: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2051: LD_ADDR_OWVAR 43
2055: PUSH
2056: LD_VAR 0 5
2060: PUSH
2061: LD_VAR 0 2
2065: ARRAY
2066: PUSH
2067: LD_INT 2
2069: ARRAY
2070: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2071: LD_OWVAR 42
2075: PUSH
2076: LD_INT 7
2078: EQUAL
2079: PUSH
2080: LD_OWVAR 42
2084: PUSH
2085: LD_INT 8
2087: EQUAL
2088: OR
2089: IFFALSE 2131
// begin bc_kind1 = buildings [ i ] [ 6 ] ;
2091: LD_ADDR_OWVAR 44
2095: PUSH
2096: LD_VAR 0 5
2100: PUSH
2101: LD_VAR 0 2
2105: ARRAY
2106: PUSH
2107: LD_INT 6
2109: ARRAY
2110: ST_TO_ADDR
// bc_kind2 = buildings [ i ] [ 7 ] ;
2111: LD_ADDR_OWVAR 45
2115: PUSH
2116: LD_VAR 0 5
2120: PUSH
2121: LD_VAR 0 2
2125: ARRAY
2126: PUSH
2127: LD_INT 7
2129: ARRAY
2130: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2131: LD_ADDR_VAR 0 4
2135: PUSH
2136: LD_VAR 0 5
2140: PUSH
2141: LD_VAR 0 2
2145: ARRAY
2146: PUSH
2147: LD_INT 3
2149: ARRAY
2150: PPUSH
2151: LD_VAR 0 5
2155: PUSH
2156: LD_VAR 0 2
2160: ARRAY
2161: PUSH
2162: LD_INT 4
2164: ARRAY
2165: PPUSH
2166: LD_VAR 0 5
2170: PUSH
2171: LD_VAR 0 2
2175: ARRAY
2176: PUSH
2177: LD_INT 5
2179: ARRAY
2180: PPUSH
2181: CALL_OW 47
2185: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2186: LD_VAR 0 4
2190: PPUSH
2191: CALL_OW 266
2195: PUSH
2196: LD_INT 32
2198: EQUAL
2199: IFFALSE 2225
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2201: LD_VAR 0 4
2205: PPUSH
2206: LD_VAR 0 5
2210: PUSH
2211: LD_VAR 0 2
2215: ARRAY
2216: PUSH
2217: LD_INT 8
2219: ARRAY
2220: PPUSH
2221: CALL_OW 431
// end ;
2225: GO 2028
2227: POP
2228: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2229: LD_ADDR_VAR 0 6
2233: PUSH
2234: LD_INT 22
2236: PUSH
2237: LD_INT 1
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: PUSH
2244: LD_INT 2
2246: PUSH
2247: LD_INT 30
2249: PUSH
2250: LD_INT 6
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: PUSH
2257: LD_INT 30
2259: PUSH
2260: LD_INT 7
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 8
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PPUSH
2287: CALL_OW 69
2291: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2292: LD_ADDR_VAR 0 7
2296: PUSH
2297: LD_INT 22
2299: PUSH
2300: LD_INT 1
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: PUSH
2307: LD_INT 30
2309: PUSH
2310: LD_INT 0
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: PPUSH
2321: CALL_OW 69
2325: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2326: LD_VAR 0 6
2330: PUSH
2331: LD_INT 0
2333: GREATER
2334: PUSH
2335: LD_VAR 0 7
2339: PUSH
2340: LD_INT 0
2342: GREATER
2343: AND
2344: IFFALSE 2354
// baseCorrect = 1 ;
2346: LD_ADDR_EXP 16
2350: PUSH
2351: LD_INT 1
2353: ST_TO_ADDR
// if baseCorrect = 0 then
2354: LD_EXP 16
2358: PUSH
2359: LD_INT 0
2361: EQUAL
2362: IFFALSE 2735
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2364: LD_ADDR_VAR 0 2
2368: PUSH
2369: LD_INT 22
2371: PUSH
2372: LD_INT 1
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PUSH
2379: LD_INT 21
2381: PUSH
2382: LD_INT 3
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PPUSH
2393: CALL_OW 69
2397: PUSH
2398: FOR_IN
2399: IFFALSE 2412
// RemoveUnit ( i ) ;
2401: LD_VAR 0 2
2405: PPUSH
2406: CALL_OW 64
2410: GO 2398
2412: POP
2413: POP
// uc_nation = 1 ;
2414: LD_ADDR_OWVAR 21
2418: PUSH
2419: LD_INT 1
2421: ST_TO_ADDR
// uc_side = 1 ;
2422: LD_ADDR_OWVAR 20
2426: PUSH
2427: LD_INT 1
2429: ST_TO_ADDR
// bc_level = 5 ;
2430: LD_ADDR_OWVAR 43
2434: PUSH
2435: LD_INT 5
2437: ST_TO_ADDR
// bc_type = b_depot ;
2438: LD_ADDR_OWVAR 42
2442: PUSH
2443: LD_INT 0
2445: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2446: LD_INT 50
2448: PPUSH
2449: LD_INT 22
2451: PPUSH
2452: LD_INT 0
2454: PPUSH
2455: CALL_OW 47
// bc_type = b_bunker ;
2459: LD_ADDR_OWVAR 42
2463: PUSH
2464: LD_INT 32
2466: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2467: LD_ADDR_VAR 0 4
2471: PUSH
2472: LD_INT 68
2474: PPUSH
2475: LD_INT 24
2477: PPUSH
2478: LD_INT 4
2480: PPUSH
2481: CALL_OW 47
2485: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2486: LD_VAR 0 4
2490: PPUSH
2491: LD_INT 4
2493: PUSH
2494: LD_INT 11
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PUSH
2501: LD_INT 1
2503: PPUSH
2504: LD_INT 2
2506: PPUSH
2507: CALL_OW 12
2511: ARRAY
2512: PPUSH
2513: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2517: LD_ADDR_VAR 0 4
2521: PUSH
2522: LD_INT 71
2524: PPUSH
2525: LD_INT 34
2527: PPUSH
2528: LD_INT 4
2530: PPUSH
2531: CALL_OW 47
2535: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2536: LD_VAR 0 4
2540: PPUSH
2541: LD_INT 4
2543: PUSH
2544: LD_INT 11
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: PUSH
2551: LD_INT 1
2553: PPUSH
2554: LD_INT 2
2556: PPUSH
2557: CALL_OW 12
2561: ARRAY
2562: PPUSH
2563: CALL_OW 431
// bc_type = 31 ;
2567: LD_ADDR_OWVAR 42
2571: PUSH
2572: LD_INT 31
2574: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
2575: LD_INT 51
2577: PPUSH
2578: LD_INT 7
2580: PPUSH
2581: LD_INT 3
2583: PPUSH
2584: CALL_OW 47
// bc_type = b_oil_mine ;
2588: LD_ADDR_OWVAR 42
2592: PUSH
2593: LD_INT 29
2595: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
2596: LD_INT 68
2598: PPUSH
2599: LD_INT 40
2601: PPUSH
2602: LD_INT 1
2604: PPUSH
2605: CALL_OW 47
// bc_type = b_workshop ;
2609: LD_ADDR_OWVAR 42
2613: PUSH
2614: LD_INT 2
2616: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2617: LD_INT 38
2619: PPUSH
2620: LD_INT 20
2622: PPUSH
2623: LD_INT 2
2625: PPUSH
2626: CALL_OW 47
// bc_type = b_armoury ;
2630: LD_ADDR_OWVAR 42
2634: PUSH
2635: LD_INT 4
2637: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2638: LD_INT 38
2640: PPUSH
2641: LD_INT 20
2643: PPUSH
2644: LD_INT 2
2646: PPUSH
2647: CALL_OW 47
// bc_type = b_solar_power ;
2651: LD_ADDR_OWVAR 42
2655: PUSH
2656: LD_INT 27
2658: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
2659: LD_INT 46
2661: PPUSH
2662: LD_INT 12
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
2672: LD_INT 48
2674: PPUSH
2675: LD_INT 11
2677: PPUSH
2678: LD_INT 2
2680: PPUSH
2681: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
2685: LD_INT 49
2687: PPUSH
2688: LD_INT 11
2690: PPUSH
2691: LD_INT 3
2693: PPUSH
2694: CALL_OW 47
// bc_type = b_lab_half ;
2698: LD_ADDR_OWVAR 42
2702: PUSH
2703: LD_INT 7
2705: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
2706: LD_ADDR_OWVAR 44
2710: PUSH
2711: LD_INT 15
2713: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2714: LD_ADDR_OWVAR 45
2718: PUSH
2719: LD_INT 9
2721: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
2722: LD_INT 42
2724: PPUSH
2725: LD_INT 15
2727: PPUSH
2728: LD_INT 2
2730: PPUSH
2731: CALL_OW 47
// end ; end ; end_of_file
2735: LD_VAR 0 1
2739: RET
// every 1 do var i , j , lab , tmp ;
2740: GO 2742
2742: DISABLE
2743: LD_INT 0
2745: PPUSH
2746: PPUSH
2747: PPUSH
2748: PPUSH
// begin lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2749: LD_ADDR_VAR 0 3
2753: PUSH
2754: LD_INT 22
2756: PUSH
2757: LD_INT 1
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: LD_INT 2
2766: PUSH
2767: LD_INT 30
2769: PUSH
2770: LD_INT 6
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 7
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 8
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PPUSH
2807: CALL_OW 69
2811: ST_TO_ADDR
// InGameOn ;
2812: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
2816: LD_VAR 0 3
2820: PUSH
2821: LD_INT 1
2823: ARRAY
2824: PPUSH
2825: CALL_OW 87
// if IsOK ( Denis ) then
2829: LD_EXP 3
2833: PPUSH
2834: CALL_OW 302
2838: IFFALSE 2866
// begin SetTech ( tech_radar , 1 , state_researched ) ;
2840: LD_INT 6
2842: PPUSH
2843: LD_INT 1
2845: PPUSH
2846: LD_INT 2
2848: PPUSH
2849: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
2853: LD_INT 20
2855: PPUSH
2856: LD_INT 1
2858: PPUSH
2859: LD_INT 1
2861: PPUSH
2862: CALL_OW 324
// end ; ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
2866: LD_EXP 1
2870: PUSH
2871: LD_EXP 14
2875: PUSH
2876: LD_EXP 3
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: LIST
2885: PPUSH
2886: LD_VAR 0 3
2890: PUSH
2891: LD_INT 1
2893: ARRAY
2894: PPUSH
2895: CALL_OW 120
// Say ( JMM , D1-JMM-1 ) ;
2899: LD_EXP 1
2903: PPUSH
2904: LD_STRING D1-JMM-1
2906: PPUSH
2907: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
2911: LD_EXP 14
2915: PPUSH
2916: LD_STRING D1-Sci-1
2918: PPUSH
2919: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
2923: LD_EXP 1
2927: PPUSH
2928: LD_STRING D1-JMM-2
2930: PPUSH
2931: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
2935: LD_EXP 14
2939: PPUSH
2940: LD_STRING D1-Sci-2
2942: PPUSH
2943: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
2947: LD_EXP 1
2951: PPUSH
2952: LD_STRING D1-JMM-3
2954: PPUSH
2955: CALL_OW 88
// if IsOK ( Denis ) then
2959: LD_EXP 3
2963: PPUSH
2964: CALL_OW 302
2968: IFFALSE 2984
// Say ( DeltaDoctor , D1-Sci-3 ) else
2970: LD_EXP 14
2974: PPUSH
2975: LD_STRING D1-Sci-3
2977: PPUSH
2978: CALL_OW 88
2982: GO 2996
// Say ( DeltaDoctor , D1-Sci-3a ) ;
2984: LD_EXP 14
2988: PPUSH
2989: LD_STRING D1-Sci-3a
2991: PPUSH
2992: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
2996: LD_EXP 1
3000: PPUSH
3001: LD_STRING D1-JMM-4
3003: PPUSH
3004: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3008: LD_ADDR_VAR 0 4
3012: PUSH
3013: LD_INT 22
3015: PUSH
3016: LD_INT 1
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 25
3025: PUSH
3026: LD_INT 4
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: LD_INT 3
3035: PUSH
3036: LD_INT 54
3038: PUSH
3039: EMPTY
3040: LIST
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3056: LD_ADDR_VAR 0 1
3060: PUSH
3061: LD_INT 22
3063: PUSH
3064: LD_INT 0
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PPUSH
3071: CALL_OW 69
3075: PUSH
3076: FOR_IN
3077: IFFALSE 3127
// for j in tmp do
3079: LD_ADDR_VAR 0 2
3083: PUSH
3084: LD_VAR 0 4
3088: PUSH
3089: FOR_IN
3090: IFFALSE 3123
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3092: LD_VAR 0 2
3096: PPUSH
3097: LD_VAR 0 1
3101: PPUSH
3102: CALL_OW 250
3106: PPUSH
3107: LD_VAR 0 1
3111: PPUSH
3112: CALL_OW 251
3116: PPUSH
3117: CALL_OW 191
3121: GO 3089
3123: POP
3124: POP
3125: GO 3076
3127: POP
3128: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3129: LD_EXP 14
3133: PPUSH
3134: LD_STRING D1-Sci-4
3136: PPUSH
3137: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3141: LD_EXP 1
3145: PPUSH
3146: LD_STRING D1-JMM-5
3148: PPUSH
3149: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3153: LD_EXP 14
3157: PPUSH
3158: LD_STRING D1-Sci-5
3160: PPUSH
3161: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3165: LD_EXP 1
3169: PPUSH
3170: LD_STRING D1-JMM-6
3172: PPUSH
3173: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3177: LD_EXP 15
3181: PPUSH
3182: LD_STRING D1-Har-6
3184: PPUSH
3185: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3189: LD_EXP 1
3193: PPUSH
3194: LD_STRING D1-JMM-7
3196: PPUSH
3197: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3201: LD_EXP 15
3205: PPUSH
3206: LD_STRING D1-Har-7
3208: PPUSH
3209: CALL_OW 94
// if IsOK ( Denis ) then
3213: LD_EXP 3
3217: PPUSH
3218: CALL_OW 302
3222: IFFALSE 3236
// Say ( JMM , D1-JMM-8 ) ;
3224: LD_EXP 1
3228: PPUSH
3229: LD_STRING D1-JMM-8
3231: PPUSH
3232: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3236: LD_EXP 1
3240: PPUSH
3241: LD_STRING D1-JMM-8a
3243: PPUSH
3244: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3248: LD_EXP 15
3252: PPUSH
3253: LD_STRING D1-Har-8
3255: PPUSH
3256: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3260: LD_EXP 1
3264: PPUSH
3265: LD_STRING D1-JMM-9
3267: PPUSH
3268: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3272: LD_EXP 15
3276: PPUSH
3277: LD_STRING D1-Har-9
3279: PPUSH
3280: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3284: LD_EXP 1
3288: PPUSH
3289: LD_STRING D1-JMM-10
3291: PPUSH
3292: CALL_OW 88
// if IsOK ( Denis ) then
3296: LD_EXP 3
3300: PPUSH
3301: CALL_OW 302
3305: IFFALSE 3319
// Say ( JMM , D1-JMM-10a ) ;
3307: LD_EXP 1
3311: PPUSH
3312: LD_STRING D1-JMM-10a
3314: PPUSH
3315: CALL_OW 88
// SelectAndSaveCharacters ;
3319: CALL 3830 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3323: LD_VAR 0 3
3327: PUSH
3328: LD_INT 1
3330: ARRAY
3331: PPUSH
3332: CALL_OW 274
3336: PPUSH
3337: LD_INT 1
3339: PPUSH
3340: LD_INT 250
3342: PPUSH
3343: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3347: LD_INT 22
3349: PUSH
3350: LD_INT 1
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: LD_INT 30
3359: PUSH
3360: LD_INT 29
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PPUSH
3371: CALL_OW 69
3375: PUSH
3376: LD_INT 0
3378: GREATER
3379: IFFALSE 3405
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3381: LD_VAR 0 3
3385: PUSH
3386: LD_INT 1
3388: ARRAY
3389: PPUSH
3390: CALL_OW 274
3394: PPUSH
3395: LD_INT 2
3397: PPUSH
3398: LD_INT 300
3400: PPUSH
3401: CALL_OW 277
// InGameOff ;
3405: CALL_OW 9
// Query ( Q1 ) ;
3409: LD_STRING Q1
3411: PPUSH
3412: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3416: LD_INT 3
3418: PPUSH
3419: LD_INT 1
3421: PPUSH
3422: CALL_OW 424
// if IsInUnit ( JMM ) then
3426: LD_EXP 1
3430: PPUSH
3431: CALL_OW 310
3435: IFFALSE 3446
// ComExitBuilding ( JMM ) ;
3437: LD_EXP 1
3441: PPUSH
3442: CALL_OW 122
// end ;
3446: PPOPN 4
3448: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i ;
3449: LD_INT 3
3451: PPUSH
3452: LD_INT 22
3454: PUSH
3455: LD_INT 1
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: LD_INT 21
3464: PUSH
3465: LD_INT 1
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: PPUSH
3476: CALL_OW 71
3480: PUSH
3481: LD_INT 0
3483: EQUAL
3484: IFFALSE 3764
3486: GO 3488
3488: DISABLE
3489: LD_INT 0
3491: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) > 0 then
3492: LD_INT 3
3494: PPUSH
3495: LD_INT 21
3497: PUSH
3498: LD_INT 2
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PUSH
3505: EMPTY
3506: LIST
3507: PPUSH
3508: CALL_OW 70
3512: PUSH
3513: LD_INT 0
3515: GREATER
3516: IFFALSE 3754
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] ] ) do
3518: LD_ADDR_VAR 0 1
3522: PUSH
3523: LD_INT 3
3525: PPUSH
3526: LD_INT 21
3528: PUSH
3529: LD_INT 2
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: PUSH
3536: EMPTY
3537: LIST
3538: PPUSH
3539: CALL_OW 70
3543: PUSH
3544: FOR_IN
3545: IFFALSE 3740
// begin if GetWeapon ( i ) = us_cargo_bay then
3547: LD_VAR 0 1
3551: PPUSH
3552: CALL_OW 264
3556: PUSH
3557: LD_INT 12
3559: EQUAL
3560: IFFALSE 3667
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetCargoType ( i ) , GetCargo ( i , GetCargoType ( i ) ) ] ] ;
3562: LD_ADDR_EXP 13
3566: PUSH
3567: LD_EXP 13
3571: PUSH
3572: LD_VAR 0 1
3576: PPUSH
3577: CALL_OW 248
3581: PUSH
3582: LD_VAR 0 1
3586: PPUSH
3587: CALL_OW 265
3591: PUSH
3592: LD_VAR 0 1
3596: PPUSH
3597: CALL_OW 262
3601: PUSH
3602: LD_VAR 0 1
3606: PPUSH
3607: CALL_OW 263
3611: PUSH
3612: LD_VAR 0 1
3616: PPUSH
3617: CALL_OW 264
3621: PUSH
3622: LD_VAR 0 1
3626: PPUSH
3627: CALL_OW 288
3631: PUSH
3632: LD_VAR 0 1
3636: PPUSH
3637: LD_VAR 0 1
3641: PPUSH
3642: CALL_OW 288
3646: PPUSH
3647: CALL_OW 289
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: EMPTY
3662: LIST
3663: ADD
3664: ST_TO_ADDR
// end else
3665: GO 3738
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
3667: LD_ADDR_EXP 13
3671: PUSH
3672: LD_EXP 13
3676: PUSH
3677: LD_VAR 0 1
3681: PPUSH
3682: CALL_OW 248
3686: PUSH
3687: LD_VAR 0 1
3691: PPUSH
3692: CALL_OW 265
3696: PUSH
3697: LD_VAR 0 1
3701: PPUSH
3702: CALL_OW 262
3706: PUSH
3707: LD_VAR 0 1
3711: PPUSH
3712: CALL_OW 263
3716: PUSH
3717: LD_VAR 0 1
3721: PPUSH
3722: CALL_OW 264
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: EMPTY
3735: LIST
3736: ADD
3737: ST_TO_ADDR
// end ; end ;
3738: GO 3544
3740: POP
3741: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
3742: LD_EXP 13
3746: PPUSH
3747: LD_STRING 06_VehiclesIn06_1
3749: PPUSH
3750: CALL_OW 39
// end ; ChangeMap ( 6 , %_cont ) ;
3754: LD_INT 6
3756: PPUSH
3757: LD_STRING %_cont
3759: PPUSH
3760: CALL_OW 340
// end ; end_of_file
3764: PPOPN 1
3766: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3767: LD_INT 0
3769: PPUSH
3770: PPUSH
// if exist_mode then
3771: LD_VAR 0 2
3775: IFFALSE 3800
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_EXP 18
3786: PUSH
3787: LD_VAR 0 1
3791: STR
3792: PPUSH
3793: CALL_OW 34
3797: ST_TO_ADDR
3798: GO 3815
// unit := NewCharacter ( ident ) ;
3800: LD_ADDR_VAR 0 4
3804: PUSH
3805: LD_VAR 0 1
3809: PPUSH
3810: CALL_OW 25
3814: ST_TO_ADDR
// result := unit ;
3815: LD_ADDR_VAR 0 3
3819: PUSH
3820: LD_VAR 0 4
3824: ST_TO_ADDR
// end ;
3825: LD_VAR 0 3
3829: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test ; begin
3830: LD_INT 0
3832: PPUSH
3833: PPUSH
3834: PPUSH
3835: PPUSH
3836: PPUSH
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
3837: LD_ADDR_VAR 0 3
3841: PUSH
3842: LD_INT 22
3844: PUSH
3845: LD_INT 1
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 21
3854: PUSH
3855: LD_INT 1
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: PUSH
3862: LD_INT 2
3864: PUSH
3865: LD_INT 25
3867: PUSH
3868: LD_INT 1
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PUSH
3875: LD_INT 25
3877: PUSH
3878: LD_INT 2
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 25
3887: PUSH
3888: LD_INT 3
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: LD_INT 25
3897: PUSH
3898: LD_INT 4
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: LIST
3916: PPUSH
3917: CALL_OW 69
3921: PUSH
3922: LD_EXP 1
3926: PUSH
3927: LD_EXP 14
3931: PUSH
3932: LD_EXP 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: LIST
3941: DIFF
3942: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
3943: LD_ADDR_VAR 0 4
3947: PUSH
3948: LD_STRING text
3950: PPUSH
3951: LD_INT 5
3953: PPUSH
3954: LD_INT 5
3956: PPUSH
3957: LD_INT -5
3959: PUSH
3960: LD_EXP 1
3964: PUSH
3965: LD_INT -6
3967: PUSH
3968: LD_INT -2
3970: PUSH
3971: LD_INT -3
3973: PUSH
3974: LD_INT -5
3976: PUSH
3977: EMPTY
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: PUSH
3985: LD_VAR 0 3
3989: ADD
3990: PUSH
3991: LD_INT -6
3993: PUSH
3994: LD_INT -4
3996: PUSH
3997: LD_EXP 3
4001: PUSH
4002: LD_EXP 14
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: ADD
4013: PPUSH
4014: LD_INT 1
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: LD_INT 2
4022: PUSH
4023: LD_INT 1
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 4
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: PPUSH
4039: CALL_OW 42
4043: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4044: LD_EXP 1
4048: PPUSH
4049: LD_EXP 17
4053: PUSH
4054: LD_STRING JMM
4056: STR
4057: PPUSH
4058: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4062: LD_EXP 14
4066: PPUSH
4067: LD_STRING DeltaDoctor
4069: PPUSH
4070: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4074: LD_EXP 3
4078: PPUSH
4079: LD_EXP 17
4083: PUSH
4084: LD_STRING Denis
4086: STR
4087: PPUSH
4088: CALL_OW 38
// if Lisa in selectedPeople then
4092: LD_EXP 4
4096: PUSH
4097: LD_VAR 0 4
4101: IN
4102: IFFALSE 4132
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4104: LD_EXP 4
4108: PPUSH
4109: LD_EXP 17
4113: PUSH
4114: LD_STRING Lisa
4116: STR
4117: PPUSH
4118: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4122: LD_INT 1
4124: PPUSH
4125: LD_STRING LisaIn06
4127: PPUSH
4128: CALL_OW 39
// end ; if Bobby in selectedPeople then
4132: LD_EXP 6
4136: PUSH
4137: LD_VAR 0 4
4141: IN
4142: IFFALSE 4172
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4144: LD_EXP 6
4148: PPUSH
4149: LD_EXP 17
4153: PUSH
4154: LD_STRING Bobby
4156: STR
4157: PPUSH
4158: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4162: LD_INT 1
4164: PPUSH
4165: LD_STRING BobbyIn06
4167: PPUSH
4168: CALL_OW 39
// end ; if Cyrus in selectedPeople then
4172: LD_EXP 7
4176: PUSH
4177: LD_VAR 0 4
4181: IN
4182: IFFALSE 4212
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_EXP 17
4193: PUSH
4194: LD_STRING Cyrus
4196: STR
4197: PPUSH
4198: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4202: LD_INT 1
4204: PPUSH
4205: LD_STRING CyrusIn06
4207: PPUSH
4208: CALL_OW 39
// end ; if Frank in selectedPeople then
4212: LD_EXP 5
4216: PUSH
4217: LD_VAR 0 4
4221: IN
4222: IFFALSE 4252
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4224: LD_EXP 5
4228: PPUSH
4229: LD_EXP 17
4233: PUSH
4234: LD_STRING Frank
4236: STR
4237: PPUSH
4238: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4242: LD_INT 1
4244: PPUSH
4245: LD_STRING FrankIn06
4247: PPUSH
4248: CALL_OW 39
// end ; if Brown in selectedPeople then
4252: LD_EXP 8
4256: PUSH
4257: LD_VAR 0 4
4261: IN
4262: IFFALSE 4292
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4264: LD_EXP 8
4268: PPUSH
4269: LD_EXP 17
4273: PUSH
4274: LD_STRING Brown
4276: STR
4277: PPUSH
4278: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
4282: LD_INT 1
4284: PPUSH
4285: LD_STRING BrownIn06
4287: PPUSH
4288: CALL_OW 39
// end ; if Donaldson in selectedPeople then
4292: LD_EXP 9
4296: PUSH
4297: LD_VAR 0 4
4301: IN
4302: IFFALSE 4332
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_EXP 17
4313: PUSH
4314: LD_STRING Donaldson
4316: STR
4317: PPUSH
4318: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
4322: LD_INT 1
4324: PPUSH
4325: LD_STRING DonaldsonIn06
4327: PPUSH
4328: CALL_OW 39
// end ; if Gladstone in selectedPeople then
4332: LD_EXP 2
4336: PUSH
4337: LD_VAR 0 4
4341: IN
4342: IFFALSE 4372
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4344: LD_EXP 2
4348: PPUSH
4349: LD_EXP 17
4353: PUSH
4354: LD_STRING Gladstone
4356: STR
4357: PPUSH
4358: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
4362: LD_INT 1
4364: PPUSH
4365: LD_STRING GladstoneIn06
4367: PPUSH
4368: CALL_OW 39
// end ; SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4372: LD_INT 22
4374: PUSH
4375: LD_INT 1
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PUSH
4382: LD_INT 21
4384: PUSH
4385: LD_INT 1
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PPUSH
4396: CALL_OW 69
4400: PPUSH
4401: LD_INT 4
4403: PPUSH
4404: CALL_OW 235
// for i in selectedPeople do
4408: LD_ADDR_VAR 0 2
4412: PUSH
4413: LD_VAR 0 4
4417: PUSH
4418: FOR_IN
4419: IFFALSE 4435
// SetSide ( i , 1 ) ;
4421: LD_VAR 0 2
4425: PPUSH
4426: LD_INT 1
4428: PPUSH
4429: CALL_OW 235
4433: GO 4418
4435: POP
4436: POP
// for i in yourApemans do
4437: LD_ADDR_VAR 0 2
4441: PUSH
4442: LD_EXP 12
4446: PUSH
4447: FOR_IN
4448: IFFALSE 4464
// SetSide ( i , 1 ) ;
4450: LD_VAR 0 2
4454: PPUSH
4455: LD_INT 1
4457: PPUSH
4458: CALL_OW 235
4462: GO 4447
4464: POP
4465: POP
// SetSide ( JMM , 1 ) ;
4466: LD_EXP 1
4470: PPUSH
4471: LD_INT 1
4473: PPUSH
4474: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4478: LD_EXP 12
4482: PPUSH
4483: LD_INT 2
4485: PPUSH
4486: LD_INT 5
4488: PPUSH
4489: CALL_OW 237
// SaveCharacters ( yourApemans , ApeIn06 ) ;
4493: LD_EXP 12
4497: PPUSH
4498: LD_STRING ApeIn06
4500: PPUSH
4501: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone ] , OthersIn06 ) ;
4505: LD_INT 22
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 21
4517: PUSH
4518: LD_INT 1
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: LD_INT 2
4527: PUSH
4528: LD_INT 25
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: LD_INT 25
4540: PUSH
4541: LD_INT 2
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 25
4550: PUSH
4551: LD_INT 3
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: PUSH
4558: LD_INT 25
4560: PUSH
4561: LD_INT 4
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: LIST
4579: PPUSH
4580: CALL_OW 69
4584: PUSH
4585: LD_EXP 1
4589: PUSH
4590: LD_EXP 4
4594: PUSH
4595: LD_EXP 6
4599: PUSH
4600: LD_EXP 7
4604: PUSH
4605: LD_EXP 5
4609: PUSH
4610: LD_EXP 8
4614: PUSH
4615: LD_EXP 9
4619: PUSH
4620: LD_EXP 2
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: DIFF
4635: PPUSH
4636: LD_STRING OthersIn06
4638: PPUSH
4639: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor ] , OthersStayInDelta ) ;
4643: LD_INT 22
4645: PUSH
4646: LD_INT 4
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: PUSH
4653: LD_INT 2
4655: PUSH
4656: LD_INT 25
4658: PUSH
4659: LD_INT 1
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_INT 25
4668: PUSH
4669: LD_INT 2
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 25
4678: PUSH
4679: LD_INT 3
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PUSH
4686: LD_INT 25
4688: PUSH
4689: LD_INT 4
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PPUSH
4707: CALL_OW 69
4711: PUSH
4712: LD_EXP 14
4716: PUSH
4717: EMPTY
4718: LIST
4719: DIFF
4720: PPUSH
4721: LD_STRING OthersStayInDelta
4723: PPUSH
4724: CALL_OW 38
// end ; end_of_file
4728: LD_VAR 0 1
4732: RET
// on Command ( comandid ) do var i ;
4733: LD_INT 0
4735: PPUSH
// begin if comandid = 65 then
4736: LD_VAR 0 1
4740: PUSH
4741: LD_INT 65
4743: EQUAL
4744: IFFALSE 4785
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
4746: LD_ADDR_VAR 0 2
4750: PUSH
4751: LD_INT 22
4753: PUSH
4754: LD_INT 1
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PUSH
4761: EMPTY
4762: LIST
4763: PPUSH
4764: CALL_OW 69
4768: PUSH
4769: FOR_IN
4770: IFFALSE 4783
// ComStop ( i ) ;
4772: LD_VAR 0 2
4776: PPUSH
4777: CALL_OW 141
4781: GO 4769
4783: POP
4784: POP
// end ;
4785: PPOPN 2
4787: END
// on ApemanTamed ( apeman , human ) do var tmp ;
4788: LD_INT 0
4790: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
4791: LD_ADDR_VAR 0 3
4795: PUSH
4796: LD_INT 22
4798: PUSH
4799: LD_INT 1
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 21
4808: PUSH
4809: LD_INT 3
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 30
4818: PUSH
4819: LD_INT 0
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: PPUSH
4831: CALL_OW 69
4835: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
4836: LD_VAR 0 1
4840: PPUSH
4841: LD_VAR 0 3
4845: PUSH
4846: LD_INT 1
4848: ARRAY
4849: PPUSH
4850: CALL_OW 120
// SetSide ( apeman , 4 ) ;
4854: LD_VAR 0 1
4858: PPUSH
4859: LD_INT 4
4861: PPUSH
4862: CALL_OW 235
// end ;
4866: PPOPN 3
4868: END
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
