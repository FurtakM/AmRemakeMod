// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others ; export DeltaDoctor ; export Harisson ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// PrepareDeltaBase ;
   8: CALL 1088 0 0
// PrepareHeroes ;
  12: CALL 21 0 0
// PrepareRandoms ;
  16: CALL 813 0 0
// end ; end_of_file
  20: END
// export function PrepareHeroes ; var i , tmp ; begin
  21: LD_INT 0
  23: PPUSH
  24: PPUSH
  25: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
  26: LD_ADDR_VAR 0 3
  30: PUSH
  31: LD_INT 22
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: EMPTY
  38: LIST
  39: LIST
  40: PUSH
  41: LD_INT 21
  43: PUSH
  44: LD_INT 3
  46: PUSH
  47: EMPTY
  48: LIST
  49: LIST
  50: PUSH
  51: LD_INT 30
  53: PUSH
  54: LD_INT 0
  56: PUSH
  57: EMPTY
  58: LIST
  59: LIST
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: LIST
  65: PPUSH
  66: CALL_OW 69
  70: ST_TO_ADDR
// uc_side = 1 ;
  71: LD_ADDR_OWVAR 20
  75: PUSH
  76: LD_INT 1
  78: ST_TO_ADDR
// uc_nation = 1 ;
  79: LD_ADDR_OWVAR 21
  83: PUSH
  84: LD_INT 1
  86: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_STRING JMM
  94: PPUSH
  95: LD_INT 1
  97: PPUSH
  98: CALL 1846 0 2
 102: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 103: LD_ADDR_EXP 12
 107: PUSH
 108: LD_STRING Harisson
 110: PPUSH
 111: LD_INT 0
 113: PPUSH
 114: CALL 1846 0 2
 118: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 119: LD_EXP 1
 123: PPUSH
 124: LD_VAR 0 3
 128: PUSH
 129: LD_INT 1
 131: ARRAY
 132: PPUSH
 133: CALL_OW 250
 137: PPUSH
 138: LD_VAR 0 3
 142: PUSH
 143: LD_INT 1
 145: ARRAY
 146: PPUSH
 147: CALL_OW 251
 151: PPUSH
 152: LD_INT 5
 154: PPUSH
 155: LD_INT 0
 157: PPUSH
 158: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 162: LD_EXP 1
 166: PPUSH
 167: LD_INT 1
 169: PPUSH
 170: CALL_OW 336
// if LoadVariable ( GladstoneInDelta , 0 ) = 1 then
 174: LD_STRING GladstoneInDelta
 176: PPUSH
 177: LD_INT 0
 179: PPUSH
 180: CALL_OW 30
 184: PUSH
 185: LD_INT 1
 187: EQUAL
 188: IFFALSE 261
// begin Gladstone = PrepareUnit ( Gladstone , true ) ;
 190: LD_ADDR_EXP 2
 194: PUSH
 195: LD_STRING Gladstone
 197: PPUSH
 198: LD_INT 1
 200: PPUSH
 201: CALL 1846 0 2
 205: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 206: LD_EXP 2
 210: PPUSH
 211: LD_VAR 0 3
 215: PUSH
 216: LD_INT 1
 218: ARRAY
 219: PPUSH
 220: CALL_OW 250
 224: PPUSH
 225: LD_VAR 0 3
 229: PUSH
 230: LD_INT 1
 232: ARRAY
 233: PPUSH
 234: CALL_OW 251
 238: PPUSH
 239: LD_INT 5
 241: PPUSH
 242: LD_INT 0
 244: PPUSH
 245: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 249: LD_EXP 2
 253: PPUSH
 254: LD_INT 4
 256: PPUSH
 257: CALL_OW 336
// end ; if LoadVariable ( DenisInDelta , 0 ) = 1 then
 261: LD_STRING DenisInDelta
 263: PPUSH
 264: LD_INT 0
 266: PPUSH
 267: CALL_OW 30
 271: PUSH
 272: LD_INT 1
 274: EQUAL
 275: IFFALSE 348
// begin Denis = PrepareUnit ( Denis , true ) ;
 277: LD_ADDR_EXP 3
 281: PUSH
 282: LD_STRING Denis
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: CALL 1846 0 2
 292: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 293: LD_EXP 3
 297: PPUSH
 298: LD_VAR 0 3
 302: PUSH
 303: LD_INT 1
 305: ARRAY
 306: PPUSH
 307: CALL_OW 250
 311: PPUSH
 312: LD_VAR 0 3
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PPUSH
 321: CALL_OW 251
 325: PPUSH
 326: LD_INT 5
 328: PPUSH
 329: LD_INT 0
 331: PPUSH
 332: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 336: LD_EXP 3
 340: PPUSH
 341: LD_INT 4
 343: PPUSH
 344: CALL_OW 336
// end ; if LoadVariable ( FrankInDelta , 0 ) = 1 then
 348: LD_STRING FrankInDelta
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 30
 358: PUSH
 359: LD_INT 1
 361: EQUAL
 362: IFFALSE 435
// begin Frank = PrepareUnit ( Frank , true ) ;
 364: LD_ADDR_EXP 5
 368: PUSH
 369: LD_STRING Frank
 371: PPUSH
 372: LD_INT 1
 374: PPUSH
 375: CALL 1846 0 2
 379: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 380: LD_EXP 5
 384: PPUSH
 385: LD_VAR 0 3
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: CALL_OW 250
 398: PPUSH
 399: LD_VAR 0 3
 403: PUSH
 404: LD_INT 1
 406: ARRAY
 407: PPUSH
 408: CALL_OW 251
 412: PPUSH
 413: LD_INT 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 423: LD_EXP 5
 427: PPUSH
 428: LD_INT 1
 430: PPUSH
 431: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 435: LD_STRING LisaInDelta
 437: PPUSH
 438: LD_INT 0
 440: PPUSH
 441: CALL_OW 30
 445: PUSH
 446: LD_INT 1
 448: EQUAL
 449: IFFALSE 522
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 451: LD_ADDR_EXP 4
 455: PUSH
 456: LD_STRING Lisa
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: CALL 1846 0 2
 466: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 467: LD_EXP 4
 471: PPUSH
 472: LD_VAR 0 3
 476: PUSH
 477: LD_INT 1
 479: ARRAY
 480: PPUSH
 481: CALL_OW 250
 485: PPUSH
 486: LD_VAR 0 3
 490: PUSH
 491: LD_INT 1
 493: ARRAY
 494: PPUSH
 495: CALL_OW 251
 499: PPUSH
 500: LD_INT 5
 502: PPUSH
 503: LD_INT 0
 505: PPUSH
 506: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 510: LD_EXP 4
 514: PPUSH
 515: LD_INT 1
 517: PPUSH
 518: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 522: LD_STRING BobbyInDelta
 524: PPUSH
 525: LD_INT 0
 527: PPUSH
 528: CALL_OW 30
 532: PUSH
 533: LD_INT 1
 535: EQUAL
 536: IFFALSE 609
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 538: LD_ADDR_EXP 6
 542: PUSH
 543: LD_STRING Bobby
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: CALL 1846 0 2
 553: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 554: LD_EXP 6
 558: PPUSH
 559: LD_VAR 0 3
 563: PUSH
 564: LD_INT 1
 566: ARRAY
 567: PPUSH
 568: CALL_OW 250
 572: PPUSH
 573: LD_VAR 0 3
 577: PUSH
 578: LD_INT 1
 580: ARRAY
 581: PPUSH
 582: CALL_OW 251
 586: PPUSH
 587: LD_INT 5
 589: PPUSH
 590: LD_INT 0
 592: PPUSH
 593: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 597: LD_EXP 6
 601: PPUSH
 602: LD_INT 1
 604: PPUSH
 605: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 609: LD_STRING CyrusInDelta
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 30
 619: PUSH
 620: LD_INT 1
 622: EQUAL
 623: IFFALSE 696
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 625: LD_ADDR_EXP 7
 629: PUSH
 630: LD_STRING Cyrus
 632: PPUSH
 633: LD_INT 1
 635: PPUSH
 636: CALL 1846 0 2
 640: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 641: LD_EXP 7
 645: PPUSH
 646: LD_VAR 0 3
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: CALL_OW 250
 659: PPUSH
 660: LD_VAR 0 3
 664: PUSH
 665: LD_INT 1
 667: ARRAY
 668: PPUSH
 669: CALL_OW 251
 673: PPUSH
 674: LD_INT 5
 676: PPUSH
 677: LD_INT 0
 679: PPUSH
 680: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 684: LD_EXP 7
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: CALL_OW 336
// end ; others = CreateCharacter ( othersInDelta ) ;
 696: LD_ADDR_EXP 10
 700: PUSH
 701: LD_STRING othersInDelta
 703: PPUSH
 704: CALL_OW 34
 708: ST_TO_ADDR
// for i in others do
 709: LD_ADDR_VAR 0 2
 713: PUSH
 714: LD_EXP 10
 718: PUSH
 719: FOR_IN
 720: IFFALSE 806
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
 722: LD_VAR 0 2
 726: PPUSH
 727: LD_VAR 0 3
 731: PUSH
 732: LD_INT 1
 734: ARRAY
 735: PPUSH
 736: CALL_OW 250
 740: PPUSH
 741: LD_VAR 0 3
 745: PUSH
 746: LD_INT 1
 748: ARRAY
 749: PPUSH
 750: CALL_OW 251
 754: PPUSH
 755: LD_INT 15
 757: PPUSH
 758: LD_INT 0
 760: PPUSH
 761: CALL_OW 50
// SetClass ( i , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] ) ;
 765: LD_VAR 0 2
 769: PPUSH
 770: LD_INT 1
 772: PUSH
 773: LD_INT 2
 775: PUSH
 776: LD_INT 3
 778: PUSH
 779: LD_INT 4
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 1
 790: PPUSH
 791: LD_INT 4
 793: PPUSH
 794: CALL_OW 12
 798: ARRAY
 799: PPUSH
 800: CALL_OW 336
// end ;
 804: GO 719
 806: POP
 807: POP
// end ;
 808: LD_VAR 0 1
 812: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
 813: LD_INT 0
 815: PPUSH
 816: PPUSH
 817: PPUSH
 818: PPUSH
// uc_side = 1 ;
 819: LD_ADDR_OWVAR 20
 823: PUSH
 824: LD_INT 1
 826: ST_TO_ADDR
// uc_nation = 1 ;
 827: LD_ADDR_OWVAR 21
 831: PUSH
 832: LD_INT 1
 834: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 835: LD_ADDR_VAR 0 4
 839: PUSH
 840: LD_INT 22
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: PUSH
 850: LD_INT 21
 852: PUSH
 853: LD_INT 3
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PUSH
 860: LD_INT 30
 862: PUSH
 863: LD_INT 0
 865: PUSH
 866: EMPTY
 867: LIST
 868: LIST
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: LIST
 874: PPUSH
 875: CALL_OW 69
 879: ST_TO_ADDR
// for i = 1 to 5 do
 880: LD_ADDR_VAR 0 2
 884: PUSH
 885: DOUBLE
 886: LD_INT 1
 888: DEC
 889: ST_TO_ADDR
 890: LD_INT 5
 892: PUSH
 893: FOR_TO
 894: IFFALSE 1015
// begin hc_gallery =  ;
 896: LD_ADDR_OWVAR 33
 900: PUSH
 901: LD_STRING 
 903: ST_TO_ADDR
// hc_name =  ;
 904: LD_ADDR_OWVAR 26
 908: PUSH
 909: LD_STRING 
 911: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 1 , 4 ) ) ;
 912: LD_INT 0
 914: PPUSH
 915: LD_INT 1
 917: PUSH
 918: LD_INT 2
 920: PUSH
 921: LD_INT 3
 923: PUSH
 924: LD_INT 4
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: LIST
 931: LIST
 932: PUSH
 933: LD_INT 1
 935: PPUSH
 936: LD_INT 4
 938: PPUSH
 939: CALL_OW 12
 943: ARRAY
 944: PPUSH
 945: LD_INT 1
 947: PPUSH
 948: LD_INT 4
 950: PPUSH
 951: CALL_OW 12
 955: PPUSH
 956: CALL_OW 380
// un = CreateHuman ;
 960: LD_ADDR_VAR 0 3
 964: PUSH
 965: CALL_OW 44
 969: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
 970: LD_VAR 0 3
 974: PPUSH
 975: LD_VAR 0 4
 979: PUSH
 980: LD_INT 1
 982: ARRAY
 983: PPUSH
 984: CALL_OW 250
 988: PPUSH
 989: LD_VAR 0 4
 993: PUSH
 994: LD_INT 1
 996: ARRAY
 997: PPUSH
 998: CALL_OW 251
1002: PPUSH
1003: LD_INT 15
1005: PPUSH
1006: LD_INT 0
1008: PPUSH
1009: CALL_OW 50
// end ;
1013: GO 893
1015: POP
1016: POP
// PrepareHuman ( sex_male , 4 , 6 ) ;
1017: LD_INT 1
1019: PPUSH
1020: LD_INT 4
1022: PPUSH
1023: LD_INT 6
1025: PPUSH
1026: CALL_OW 380
// deltaDoctor = CreateHuman ;
1030: LD_ADDR_EXP 11
1034: PUSH
1035: CALL_OW 44
1039: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1040: LD_EXP 11
1044: PPUSH
1045: LD_VAR 0 4
1049: PUSH
1050: LD_INT 1
1052: ARRAY
1053: PPUSH
1054: CALL_OW 250
1058: PPUSH
1059: LD_VAR 0 4
1063: PUSH
1064: LD_INT 1
1066: ARRAY
1067: PPUSH
1068: CALL_OW 251
1072: PPUSH
1073: LD_INT 5
1075: PPUSH
1076: LD_INT 0
1078: PPUSH
1079: CALL_OW 50
// end ; end_of_file
1083: LD_VAR 0 1
1087: RET
// export function PrepareDeltaBase ; var i , j , building , buildings ; begin
1088: LD_INT 0
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
1095: LD_ADDR_VAR 0 5
1099: PUSH
1100: LD_STRING buildingsInDelta
1102: PPUSH
1103: EMPTY
1104: PPUSH
1105: CALL_OW 30
1109: ST_TO_ADDR
// uc_side = 1 ;
1110: LD_ADDR_OWVAR 20
1114: PUSH
1115: LD_INT 1
1117: ST_TO_ADDR
// uc_nation = 1 ;
1118: LD_ADDR_OWVAR 21
1122: PUSH
1123: LD_INT 1
1125: ST_TO_ADDR
// for i = 1 to buildings do
1126: LD_ADDR_VAR 0 2
1130: PUSH
1131: DOUBLE
1132: LD_INT 1
1134: DEC
1135: ST_TO_ADDR
1136: LD_VAR 0 5
1140: PUSH
1141: FOR_TO
1142: IFFALSE 1362
// begin for j := 1 to buildings do
1144: LD_ADDR_VAR 0 3
1148: PUSH
1149: DOUBLE
1150: LD_INT 1
1152: DEC
1153: ST_TO_ADDR
1154: LD_VAR 0 5
1158: PUSH
1159: FOR_TO
1160: IFFALSE 1358
// begin bc_type = buildings [ i ] [ 1 ] ;
1162: LD_ADDR_OWVAR 42
1166: PUSH
1167: LD_VAR 0 5
1171: PUSH
1172: LD_VAR 0 2
1176: ARRAY
1177: PUSH
1178: LD_INT 1
1180: ARRAY
1181: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
1182: LD_ADDR_OWVAR 43
1186: PUSH
1187: LD_VAR 0 5
1191: PUSH
1192: LD_VAR 0 2
1196: ARRAY
1197: PUSH
1198: LD_INT 2
1200: ARRAY
1201: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
1202: LD_OWVAR 42
1206: PUSH
1207: LD_INT 7
1209: EQUAL
1210: PUSH
1211: LD_OWVAR 42
1215: PUSH
1216: LD_INT 8
1218: EQUAL
1219: OR
1220: IFFALSE 1262
// begin bc_kind1 = buildings [ i ] [ 6 ] ;
1222: LD_ADDR_OWVAR 44
1226: PUSH
1227: LD_VAR 0 5
1231: PUSH
1232: LD_VAR 0 2
1236: ARRAY
1237: PUSH
1238: LD_INT 6
1240: ARRAY
1241: ST_TO_ADDR
// bc_kind2 = buildings [ i ] [ 7 ] ;
1242: LD_ADDR_OWVAR 45
1246: PUSH
1247: LD_VAR 0 5
1251: PUSH
1252: LD_VAR 0 2
1256: ARRAY
1257: PUSH
1258: LD_INT 7
1260: ARRAY
1261: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
1262: LD_ADDR_VAR 0 4
1266: PUSH
1267: LD_VAR 0 5
1271: PUSH
1272: LD_VAR 0 2
1276: ARRAY
1277: PUSH
1278: LD_INT 3
1280: ARRAY
1281: PPUSH
1282: LD_VAR 0 5
1286: PUSH
1287: LD_VAR 0 2
1291: ARRAY
1292: PUSH
1293: LD_INT 4
1295: ARRAY
1296: PPUSH
1297: LD_VAR 0 5
1301: PUSH
1302: LD_VAR 0 2
1306: ARRAY
1307: PUSH
1308: LD_INT 5
1310: ARRAY
1311: PPUSH
1312: CALL_OW 47
1316: ST_TO_ADDR
// if GetBType ( bc_type = b_bunker ) then
1317: LD_OWVAR 42
1321: PUSH
1322: LD_INT 32
1324: EQUAL
1325: PPUSH
1326: CALL_OW 266
1330: IFFALSE 1356
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
1332: LD_VAR 0 4
1336: PPUSH
1337: LD_VAR 0 5
1341: PUSH
1342: LD_VAR 0 2
1346: ARRAY
1347: PUSH
1348: LD_INT 8
1350: ARRAY
1351: PPUSH
1352: CALL_OW 431
// end ;
1356: GO 1159
1358: POP
1359: POP
// end ;
1360: GO 1141
1362: POP
1363: POP
// end ; end_of_file
1364: LD_VAR 0 1
1368: RET
// every 1 do var tmp ;
1369: GO 1371
1371: DISABLE
1372: LD_INT 0
1374: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1375: LD_ADDR_VAR 0 1
1379: PUSH
1380: LD_INT 22
1382: PUSH
1383: LD_INT 1
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 2
1392: PUSH
1393: LD_INT 30
1395: PUSH
1396: LD_INT 6
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PUSH
1403: LD_INT 30
1405: PUSH
1406: LD_INT 7
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: LD_INT 30
1415: PUSH
1416: LD_INT 8
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: PPUSH
1433: CALL_OW 69
1437: ST_TO_ADDR
// InGameOn ;
1438: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
1442: LD_VAR 0 1
1446: PUSH
1447: LD_INT 1
1449: ARRAY
1450: PPUSH
1451: CALL_OW 87
// ComEnterUnit ( [ JMM , DeltaDoctor ] , tmp [ 1 ] ) ;
1455: LD_EXP 1
1459: PUSH
1460: LD_EXP 11
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PPUSH
1469: LD_VAR 0 1
1473: PUSH
1474: LD_INT 1
1476: ARRAY
1477: PPUSH
1478: CALL_OW 120
// Say ( JMM , D1-JMM-1 ) ;
1482: LD_EXP 1
1486: PPUSH
1487: LD_STRING D1-JMM-1
1489: PPUSH
1490: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
1494: LD_EXP 11
1498: PPUSH
1499: LD_STRING D1-Sci-1
1501: PPUSH
1502: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1506: LD_EXP 1
1510: PPUSH
1511: LD_STRING D1-JMM-2
1513: PPUSH
1514: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
1518: LD_EXP 11
1522: PPUSH
1523: LD_STRING D1-Sci-2
1525: PPUSH
1526: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1530: LD_EXP 1
1534: PPUSH
1535: LD_STRING D1-JMM-3
1537: PPUSH
1538: CALL_OW 88
// if IsOK ( Denis ) then
1542: LD_EXP 3
1546: PPUSH
1547: CALL_OW 302
1551: IFFALSE 1567
// Say ( DeltaDoctor , D1-Sci-3 ) else
1553: LD_EXP 11
1557: PPUSH
1558: LD_STRING D1-Sci-3
1560: PPUSH
1561: CALL_OW 88
1565: GO 1579
// Say ( DeltaDoctor , D1-Sci-3a ) ;
1567: LD_EXP 11
1571: PPUSH
1572: LD_STRING D1-Sci-3a
1574: PPUSH
1575: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
1579: LD_EXP 1
1583: PPUSH
1584: LD_STRING D1-JMM-4
1586: PPUSH
1587: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-4 ) ;
1591: LD_EXP 11
1595: PPUSH
1596: LD_STRING D1-Sci-4
1598: PPUSH
1599: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1603: LD_EXP 1
1607: PPUSH
1608: LD_STRING D1-JMM-5
1610: PPUSH
1611: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
1615: LD_EXP 11
1619: PPUSH
1620: LD_STRING D1-Sci-5
1622: PPUSH
1623: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
1627: LD_EXP 1
1631: PPUSH
1632: LD_STRING D1-JMM-6
1634: PPUSH
1635: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
1639: LD_EXP 12
1643: PPUSH
1644: LD_STRING D1-Har-6
1646: PPUSH
1647: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
1651: LD_EXP 1
1655: PPUSH
1656: LD_STRING D1-JMM-7
1658: PPUSH
1659: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
1663: LD_EXP 12
1667: PPUSH
1668: LD_STRING D1-Har-7
1670: PPUSH
1671: CALL_OW 94
// if IsOK ( Denis ) then
1675: LD_EXP 3
1679: PPUSH
1680: CALL_OW 302
1684: IFFALSE 1698
// Say ( JMM , D1-JMM-8 ) ;
1686: LD_EXP 1
1690: PPUSH
1691: LD_STRING D1-JMM-8
1693: PPUSH
1694: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
1698: LD_EXP 1
1702: PPUSH
1703: LD_STRING D1-JMM-8a
1705: PPUSH
1706: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
1710: LD_EXP 12
1714: PPUSH
1715: LD_STRING D1-Har-8
1717: PPUSH
1718: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
1722: LD_EXP 1
1726: PPUSH
1727: LD_STRING D1-JMM-9
1729: PPUSH
1730: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
1734: LD_EXP 12
1738: PPUSH
1739: LD_STRING D1-Har-9
1741: PPUSH
1742: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
1746: LD_EXP 1
1750: PPUSH
1751: LD_STRING D1-JMM-10
1753: PPUSH
1754: CALL_OW 88
// if IsOK ( Denis ) then
1758: LD_EXP 3
1762: PPUSH
1763: CALL_OW 302
1767: IFFALSE 1781
// Say ( JMM , D1-JMM-10a ) ;
1769: LD_EXP 1
1773: PPUSH
1774: LD_STRING D1-JMM-10a
1776: PPUSH
1777: CALL_OW 88
// SelectAndSaveCharacters ;
1781: CALL 1903 0 0
// SetResourceType ( tmp [ 1 ] , 1 , 250 ) ;
1785: LD_VAR 0 1
1789: PUSH
1790: LD_INT 1
1792: ARRAY
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_INT 250
1799: PPUSH
1800: CALL_OW 277
// InGameOff ;
1804: CALL_OW 9
// Query ( Q1 ) ;
1808: LD_STRING Q1
1810: PPUSH
1811: CALL_OW 97
// end ;
1815: PPOPN 1
1817: END
// every 0 0$1 trigger IsInArea ( JMM , ExitArea ) do
1818: LD_EXP 1
1822: PPUSH
1823: LD_INT 10
1825: PPUSH
1826: CALL_OW 308
1830: IFFALSE 1845
1832: GO 1834
1834: DISABLE
// begin ChangeMap ( 6 , %_cont ) ;
1835: LD_INT 6
1837: PPUSH
1838: LD_STRING %_cont
1840: PPUSH
1841: CALL_OW 340
// end ; end_of_file
1845: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1846: LD_INT 0
1848: PPUSH
1849: PPUSH
// if exist_mode then
1850: LD_VAR 0 2
1854: IFFALSE 1873
// unit := CreateCharacter ( ident ) else
1856: LD_ADDR_VAR 0 4
1860: PUSH
1861: LD_VAR 0 1
1865: PPUSH
1866: CALL_OW 34
1870: ST_TO_ADDR
1871: GO 1888
// unit := NewCharacter ( ident ) ;
1873: LD_ADDR_VAR 0 4
1877: PUSH
1878: LD_VAR 0 1
1882: PPUSH
1883: CALL_OW 25
1887: ST_TO_ADDR
// result := unit ;
1888: LD_ADDR_VAR 0 3
1892: PUSH
1893: LD_VAR 0 4
1897: ST_TO_ADDR
// end ;
1898: LD_VAR 0 3
1902: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople ; begin
1903: LD_INT 0
1905: PPUSH
1906: PPUSH
1907: PPUSH
1908: PPUSH
// yourPeople = FilterAllUnits ( [ f_type , unit_human ] ) diff [ JMM , DeltaDoctor , Denis ] ;
1909: LD_ADDR_VAR 0 3
1913: PUSH
1914: LD_INT 21
1916: PUSH
1917: LD_INT 1
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PPUSH
1924: CALL_OW 69
1928: PUSH
1929: LD_EXP 1
1933: PUSH
1934: LD_EXP 11
1938: PUSH
1939: LD_EXP 3
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: LIST
1948: DIFF
1949: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
1950: LD_ADDR_VAR 0 4
1954: PUSH
1955: LD_STRING text
1957: PPUSH
1958: LD_INT 5
1960: PPUSH
1961: LD_INT 5
1963: PPUSH
1964: LD_INT -5
1966: PUSH
1967: LD_EXP 1
1971: PUSH
1972: LD_INT -6
1974: PUSH
1975: LD_INT -2
1977: PUSH
1978: LD_INT -3
1980: PUSH
1981: LD_INT -5
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: PUSH
1992: LD_VAR 0 3
1996: ADD
1997: PUSH
1998: LD_INT -6
2000: PUSH
2001: LD_INT -4
2003: PUSH
2004: LD_EXP 3
2008: PUSH
2009: LD_EXP 11
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: ADD
2020: PPUSH
2021: LD_INT 1
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: LD_INT 2
2029: PUSH
2030: LD_INT 1
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: PUSH
2037: LD_INT 4
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: PPUSH
2046: CALL_OW 42
2050: ST_TO_ADDR
// SaveCharacters ( JMM , JMM ) ;
2051: LD_EXP 1
2055: PPUSH
2056: LD_STRING JMM
2058: PPUSH
2059: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
2063: LD_EXP 11
2067: PPUSH
2068: LD_STRING DeltaDoctor
2070: PPUSH
2071: CALL_OW 38
// SaveCharacters ( Denis , Denis ) ;
2075: LD_EXP 3
2079: PPUSH
2080: LD_STRING Denis
2082: PPUSH
2083: CALL_OW 38
// if Lisa in selectedPeople then
2087: LD_EXP 4
2091: PUSH
2092: LD_VAR 0 4
2096: IN
2097: IFFALSE 2121
// begin SaveCharacters ( Lisa , Lisa ) ;
2099: LD_EXP 4
2103: PPUSH
2104: LD_STRING Lisa
2106: PPUSH
2107: CALL_OW 38
// SaveVariable ( true , LisaIn06 ) ;
2111: LD_INT 1
2113: PPUSH
2114: LD_STRING LisaIn06
2116: PPUSH
2117: CALL_OW 39
// end ; if Bobby in selectedPeople then
2121: LD_EXP 6
2125: PUSH
2126: LD_VAR 0 4
2130: IN
2131: IFFALSE 2155
// begin SaveCharacters ( Bobby , Bobby ) ;
2133: LD_EXP 6
2137: PPUSH
2138: LD_STRING Bobby
2140: PPUSH
2141: CALL_OW 38
// SaveVariable ( true , BobbyIn06 ) ;
2145: LD_INT 1
2147: PPUSH
2148: LD_STRING BobbyIn06
2150: PPUSH
2151: CALL_OW 39
// end ; if Cyrus in selectedPeople then
2155: LD_EXP 7
2159: PUSH
2160: LD_VAR 0 4
2164: IN
2165: IFFALSE 2189
// begin SaveCharacters ( Cyrus , Cyrus ) ;
2167: LD_EXP 7
2171: PPUSH
2172: LD_STRING Cyrus
2174: PPUSH
2175: CALL_OW 38
// SaveVariable ( true , CyrusIn06 ) ;
2179: LD_INT 1
2181: PPUSH
2182: LD_STRING CyrusIn06
2184: PPUSH
2185: CALL_OW 39
// end ; if Frank in selectedPeople then
2189: LD_EXP 5
2193: PUSH
2194: LD_VAR 0 4
2198: IN
2199: IFFALSE 2223
// begin SaveCharacters ( Cyrus , Frank ) ;
2201: LD_EXP 7
2205: PPUSH
2206: LD_STRING Frank
2208: PPUSH
2209: CALL_OW 38
// SaveVariable ( true , FrankIn06 ) ;
2213: LD_INT 1
2215: PPUSH
2216: LD_STRING FrankIn06
2218: PPUSH
2219: CALL_OW 39
// end ; if Brown in selectedPeople then
2223: LD_EXP 8
2227: PUSH
2228: LD_VAR 0 4
2232: IN
2233: IFFALSE 2257
// begin SaveCharacters ( Brown , Brown ) ;
2235: LD_EXP 8
2239: PPUSH
2240: LD_STRING Brown
2242: PPUSH
2243: CALL_OW 38
// SaveVariable ( true , BrownIn06 ) ;
2247: LD_INT 1
2249: PPUSH
2250: LD_STRING BrownIn06
2252: PPUSH
2253: CALL_OW 39
// end ; if Donaldson in selectedPeople then
2257: LD_EXP 9
2261: PUSH
2262: LD_VAR 0 4
2266: IN
2267: IFFALSE 2291
// begin SaveCharacters ( Donaldson , Donaldson ) ;
2269: LD_EXP 9
2273: PPUSH
2274: LD_STRING Donaldson
2276: PPUSH
2277: CALL_OW 38
// SaveVariable ( true , DonaldsonIn06 ) ;
2281: LD_INT 1
2283: PPUSH
2284: LD_STRING DonaldsonIn06
2286: PPUSH
2287: CALL_OW 39
// end ; SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
2291: LD_INT 22
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 21
2303: PUSH
2304: LD_INT 1
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: PUSH
2311: EMPTY
2312: LIST
2313: LIST
2314: PPUSH
2315: CALL_OW 69
2319: PPUSH
2320: LD_INT 4
2322: PPUSH
2323: CALL_OW 235
// for i in selectedPeople do
2327: LD_ADDR_VAR 0 2
2331: PUSH
2332: LD_VAR 0 4
2336: PUSH
2337: FOR_IN
2338: IFFALSE 2354
// SetSide ( i , 1 ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_INT 1
2347: PPUSH
2348: CALL_OW 235
2352: GO 2337
2354: POP
2355: POP
// SetSide ( JMM , 1 ) ;
2356: LD_EXP 1
2360: PPUSH
2361: LD_INT 1
2363: PPUSH
2364: CALL_OW 235
// end ;
2368: LD_VAR 0 1
2372: RET
