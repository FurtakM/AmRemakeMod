// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitVariables ;
   8: CALL 587 0 0
// InitMacro ;
  12: CALL 52074 0 0
// PrepareNature ( 3 , 3 , 3 , 4 , 3 , 0 , 0 , nature_area , 0 ) ;
  16: LD_INT 3
  18: PPUSH
  19: LD_INT 3
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 4
  27: PPUSH
  28: LD_INT 3
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: LD_INT 5
  39: PPUSH
  40: LD_INT 0
  42: PPUSH
  43: CALL 47025 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_russian , 0 ) ;
  47: LD_INT 0
  49: PPUSH
  50: LD_INT 0
  52: PPUSH
  53: LD_INT 5
  55: PPUSH
  56: LD_INT 0
  58: PPUSH
  59: LD_INT 0
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: LD_INT 0
  67: PPUSH
  68: LD_INT 8
  70: PPUSH
  71: LD_INT 0
  73: PPUSH
  74: CALL 47025 0 9
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 1 , 0 , area_apeman_arabian , 0 ) ;
  78: LD_INT 0
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 6
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: LD_INT 0
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: LD_INT 6
 101: PPUSH
 102: LD_INT 0
 104: PPUSH
 105: CALL 47025 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_alliance , 0 ) ;
 109: LD_INT 0
 111: PPUSH
 112: LD_INT 0
 114: PPUSH
 115: LD_INT 5
 117: PPUSH
 118: LD_INT 0
 120: PPUSH
 121: LD_INT 0
 123: PPUSH
 124: LD_INT 0
 126: PPUSH
 127: LD_INT 0
 129: PPUSH
 130: LD_INT 12
 132: PPUSH
 133: LD_INT 0
 135: PPUSH
 136: CALL 47025 0 9
// PrepareArabian ;
 140: CALL 3421 0 0
// PrepareRussian ;
 144: CALL 2548 0 0
// PrepareAlliance ;
 148: CALL 697 0 0
// MC_Start ( ) ;
 152: CALL 53132 0 0
// if debug then
 156: LD_EXP 1
 160: IFFALSE 169
// FogOff ( 1 ) ;
 162: LD_INT 1
 164: PPUSH
 165: CALL_OW 344
// Action ;
 169: CALL 6608 0 0
// end ;
 173: END
// export function CustomInitMacro ; var i ; begin
 174: LD_INT 0
 176: PPUSH
 177: PPUSH
// mc_parking := [ parking_arabian , parking_russian ] ;
 178: LD_ADDR_EXP 81
 182: PUSH
 183: LD_INT 1
 185: PUSH
 186: LD_INT 2
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: ST_TO_ADDR
// mc_scan_area := [ area_base_arabian , area_base_russian ] ;
 193: LD_ADDR_EXP 82
 197: PUSH
 198: LD_INT 3
 200: PUSH
 201: LD_INT 4
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 12 , 15 , 18 ] [ Difficulty ] , minefield ) ;
 208: LD_INT 1
 210: PPUSH
 211: LD_INT 12
 213: PUSH
 214: LD_INT 15
 216: PUSH
 217: LD_INT 18
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: PUSH
 225: LD_OWVAR 67
 229: ARRAY
 230: PPUSH
 231: LD_INT 7
 233: PPUSH
 234: CALL 67684 0 3
// MC_SetDefenderList ( 1 , arabian_guard ) ;
 238: LD_INT 1
 240: PPUSH
 241: LD_EXP 53
 245: PPUSH
 246: CALL 68132 0 2
// MC_SetTame ( 1 , area_apeman_arabian ) ;
 250: LD_INT 1
 252: PPUSH
 253: LD_INT 6
 255: PPUSH
 256: CALL 68585 0 2
// MC_SetCratesArea ( 1 , [ area_collect_arabian ] ) ;
 260: LD_INT 1
 262: PPUSH
 263: LD_INT 9
 265: PUSH
 266: EMPTY
 267: LIST
 268: PPUSH
 269: CALL 68854 0 2
// MC_InsertProduceList ( 1 , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 13
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: LD_INT 2
 284: PUSH
 285: LD_INT 32
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL 68069 0 2
// MC_SetLabKind ( 2 , [ b_lab_computer , b_lab_spacetime , b_lab_weapon , b_lab_siberium ] ) ;
 298: LD_INT 2
 300: PPUSH
 301: LD_INT 12
 303: PUSH
 304: LD_INT 14
 306: PUSH
 307: LD_INT 10
 309: PUSH
 310: LD_INT 11
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: PPUSH
 319: CALL 68761 0 2
// MC_SetDefenderList ( 2 , russian_guard ) ;
 323: LD_INT 2
 325: PPUSH
 326: LD_EXP 50
 330: PPUSH
 331: CALL 68132 0 2
// MC_SetTame ( 2 , area_apeman_russian ) ;
 335: LD_INT 2
 337: PPUSH
 338: LD_INT 8
 340: PPUSH
 341: CALL 68585 0 2
// MC_SetCratesArea ( 2 , [ area_collect_russian ] ) ;
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 10
 350: PUSH
 351: EMPTY
 352: LIST
 353: PPUSH
 354: CALL 68854 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 71 , 116 , 4 ] , [ b_armoury , 85 , 116 , 4 ] , [ b_bunker , 83 , 111 , 4 ] , [ b_bunker , 87 , 121 , 4 ] , [ b_turret , 88 , 128 , 4 ] , [ b_bunker , 59 , 89 , 3 ] , [ b_turret , 69 , 98 , 3 ] , [ b_turret , 77 , 103 , 3 ] , [ b_turret , 83 , 105 , 3 ] , [ b_turret , 71 , 125 , 5 ] ] ) ;
 358: LD_INT 2
 360: PPUSH
 361: LD_INT 6
 363: PUSH
 364: LD_INT 71
 366: PUSH
 367: LD_INT 116
 369: PUSH
 370: LD_INT 4
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_INT 4
 381: PUSH
 382: LD_INT 85
 384: PUSH
 385: LD_INT 116
 387: PUSH
 388: LD_INT 4
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 32
 399: PUSH
 400: LD_INT 83
 402: PUSH
 403: LD_INT 111
 405: PUSH
 406: LD_INT 4
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 32
 417: PUSH
 418: LD_INT 87
 420: PUSH
 421: LD_INT 121
 423: PUSH
 424: LD_INT 4
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 33
 435: PUSH
 436: LD_INT 88
 438: PUSH
 439: LD_INT 128
 441: PUSH
 442: LD_INT 4
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 32
 453: PUSH
 454: LD_INT 59
 456: PUSH
 457: LD_INT 89
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 33
 471: PUSH
 472: LD_INT 69
 474: PUSH
 475: LD_INT 98
 477: PUSH
 478: LD_INT 3
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 33
 489: PUSH
 490: LD_INT 77
 492: PUSH
 493: LD_INT 103
 495: PUSH
 496: LD_INT 3
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_INT 33
 507: PUSH
 508: LD_INT 83
 510: PUSH
 511: LD_INT 105
 513: PUSH
 514: LD_INT 3
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 33
 525: PUSH
 526: LD_INT 71
 528: PUSH
 529: LD_INT 125
 531: PUSH
 532: LD_INT 5
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL 67894 0 2
// MC_InsertProduceList ( 2 , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ) ;
 557: LD_INT 2
 559: PPUSH
 560: LD_INT 21
 562: PUSH
 563: LD_INT 1
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 51
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL 68069 0 2
// end ;
 582: LD_VAR 0 1
 586: RET
// export debug , game , freedom , gossudarov_arrive , ru_lab_builded , player_spotted , first_attack , ar_base_spotted , ar_active_attack , ar_attackers , first_powell_attack , abdul_escaped , loss_counter ; function InitVariables ; begin
 587: LD_INT 0
 589: PPUSH
// debug := false ;
 590: LD_ADDR_EXP 1
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// game := true ;
 598: LD_ADDR_EXP 2
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// gossudarov_arrive := false ;
 606: LD_ADDR_EXP 4
 610: PUSH
 611: LD_INT 0
 613: ST_TO_ADDR
// ru_lab_builded := false ;
 614: LD_ADDR_EXP 5
 618: PUSH
 619: LD_INT 0
 621: ST_TO_ADDR
// player_spotted := false ;
 622: LD_ADDR_EXP 6
 626: PUSH
 627: LD_INT 0
 629: ST_TO_ADDR
// first_attack := false ;
 630: LD_ADDR_EXP 7
 634: PUSH
 635: LD_INT 0
 637: ST_TO_ADDR
// ru_attackers := [ ] ;
 638: LD_ADDR_EXP 51
 642: PUSH
 643: EMPTY
 644: ST_TO_ADDR
// ar_base_spotted := false ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_INT 0
 652: ST_TO_ADDR
// ar_active_attack := false ;
 653: LD_ADDR_EXP 9
 657: PUSH
 658: LD_INT 0
 660: ST_TO_ADDR
// ar_attackers := [ ] ;
 661: LD_ADDR_EXP 10
 665: PUSH
 666: EMPTY
 667: ST_TO_ADDR
// first_powell_attack := false ;
 668: LD_ADDR_EXP 11
 672: PUSH
 673: LD_INT 0
 675: ST_TO_ADDR
// abdul_escaped := true ;
 676: LD_ADDR_EXP 12
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// loss_counter := 0 ;
 684: LD_ADDR_EXP 13
 688: PUSH
 689: LD_INT 0
 691: ST_TO_ADDR
// end ; end_of_file
 692: LD_VAR 0 1
 696: RET
// export JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export Gossudarov , Kirilenkova , Titov , Fadeev , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov ; export Burlak , Belkov , Gnyevko ; export Masha ; export function PrepareAlliance ; var veh , i , tmp ; begin
 697: LD_INT 0
 699: PPUSH
 700: PPUSH
 701: PPUSH
 702: PPUSH
// uc_side := 7 ;
 703: LD_ADDR_OWVAR 20
 707: PUSH
 708: LD_INT 7
 710: ST_TO_ADDR
// uc_nation := 1 ;
 711: LD_ADDR_OWVAR 21
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 12a_ ) ;
 719: LD_ADDR_EXP 14
 723: PUSH
 724: LD_STRING JMM
 726: PPUSH
 727: LD_EXP 1
 731: NOT
 732: PPUSH
 733: LD_STRING 12a_
 735: PPUSH
 736: CALL 13487 0 3
 740: ST_TO_ADDR
// PlaceUnitXY ( JMM , 71 , 23 , false ) ;
 741: LD_EXP 14
 745: PPUSH
 746: LD_INT 71
 748: PPUSH
 749: LD_INT 23
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL_OW 48
// SetClass ( JMM , 2 ) ;
 759: LD_EXP 14
 763: PPUSH
 764: LD_INT 2
 766: PPUSH
 767: CALL_OW 336
// Roth := PrepareUnit ( Roth , ( not debug ) , 12a_ ) ;
 771: LD_ADDR_EXP 15
 775: PUSH
 776: LD_STRING Roth
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_STRING 12a_
 787: PPUSH
 788: CALL 13487 0 3
 792: ST_TO_ADDR
// if Roth then
 793: LD_EXP 15
 797: IFFALSE 817
// PlaceUnitXY ( Roth , 71 , 21 , false ) ;
 799: LD_EXP 15
 803: PPUSH
 804: LD_INT 71
 806: PPUSH
 807: LD_INT 21
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL_OW 48
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 12a_ ) ;
 817: LD_ADDR_EXP 16
 821: PUSH
 822: LD_STRING Lisa
 824: PPUSH
 825: LD_EXP 1
 829: NOT
 830: PPUSH
 831: LD_STRING 12a_
 833: PPUSH
 834: CALL 13487 0 3
 838: ST_TO_ADDR
// if Lisa then
 839: LD_EXP 16
 843: IFFALSE 860
// PlaceUnitArea ( Lisa , alliance_start , false ) ;
 845: LD_EXP 16
 849: PPUSH
 850: LD_INT 13
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 49
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 12a_ ) ;
 860: LD_ADDR_EXP 17
 864: PUSH
 865: LD_STRING Donaldson
 867: PPUSH
 868: LD_EXP 1
 872: NOT
 873: PPUSH
 874: LD_STRING 12a_
 876: PPUSH
 877: CALL 13487 0 3
 881: ST_TO_ADDR
// if Donaldson then
 882: LD_EXP 17
 886: IFFALSE 903
// PlaceUnitArea ( Donaldson , alliance_start , false ) ;
 888: LD_EXP 17
 892: PPUSH
 893: LD_INT 13
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 49
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 12a_ ) ;
 903: LD_ADDR_EXP 18
 907: PUSH
 908: LD_STRING Bobby
 910: PPUSH
 911: LD_EXP 1
 915: NOT
 916: PPUSH
 917: LD_STRING 12a_
 919: PPUSH
 920: CALL 13487 0 3
 924: ST_TO_ADDR
// if Bobby then
 925: LD_EXP 18
 929: IFFALSE 946
// PlaceUnitArea ( Bobby , alliance_start , false ) ;
 931: LD_EXP 18
 935: PPUSH
 936: LD_INT 13
 938: PPUSH
 939: LD_INT 0
 941: PPUSH
 942: CALL_OW 49
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 12a_ ) ;
 946: LD_ADDR_EXP 19
 950: PUSH
 951: LD_STRING Cyrus
 953: PPUSH
 954: LD_EXP 1
 958: NOT
 959: PPUSH
 960: LD_STRING 12a_
 962: PPUSH
 963: CALL 13487 0 3
 967: ST_TO_ADDR
// if Cyrus then
 968: LD_EXP 19
 972: IFFALSE 989
// PlaceUnitArea ( Cyrus , alliance_start , false ) ;
 974: LD_EXP 19
 978: PPUSH
 979: LD_INT 13
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 49
// Denis := PrepareUnit ( Denis , ( not debug ) , 12a_ ) ;
 989: LD_ADDR_EXP 20
 993: PUSH
 994: LD_STRING Denis
 996: PPUSH
 997: LD_EXP 1
1001: NOT
1002: PPUSH
1003: LD_STRING 12a_
1005: PPUSH
1006: CALL 13487 0 3
1010: ST_TO_ADDR
// if Denis then
1011: LD_EXP 20
1015: IFFALSE 1032
// PlaceUnitArea ( Denis , alliance_start , false ) ;
1017: LD_EXP 20
1021: PPUSH
1022: LD_INT 13
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// Brown := PrepareUnit ( Brown , ( not debug ) , 12a_ ) ;
1032: LD_ADDR_EXP 21
1036: PUSH
1037: LD_STRING Brown
1039: PPUSH
1040: LD_EXP 1
1044: NOT
1045: PPUSH
1046: LD_STRING 12a_
1048: PPUSH
1049: CALL 13487 0 3
1053: ST_TO_ADDR
// if Brown then
1054: LD_EXP 21
1058: IFFALSE 1075
// PlaceUnitArea ( Brown , alliance_start , false ) ;
1060: LD_EXP 21
1064: PPUSH
1065: LD_INT 13
1067: PPUSH
1068: LD_INT 0
1070: PPUSH
1071: CALL_OW 49
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 12a_ ) ;
1075: LD_ADDR_EXP 22
1079: PUSH
1080: LD_STRING Gladstone
1082: PPUSH
1083: LD_EXP 1
1087: NOT
1088: PPUSH
1089: LD_STRING 12a_
1091: PPUSH
1092: CALL 13487 0 3
1096: ST_TO_ADDR
// if Gladstone then
1097: LD_EXP 22
1101: IFFALSE 1118
// PlaceUnitArea ( Gladstone , alliance_start , false ) ;
1103: LD_EXP 22
1107: PPUSH
1108: LD_INT 13
1110: PPUSH
1111: LD_INT 0
1113: PPUSH
1114: CALL_OW 49
// Houten := PrepareUnit ( Houten , ( not debug ) , 12a_ ) ;
1118: LD_ADDR_EXP 23
1122: PUSH
1123: LD_STRING Houten
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_STRING 12a_
1134: PPUSH
1135: CALL 13487 0 3
1139: ST_TO_ADDR
// if Houten then
1140: LD_EXP 23
1144: IFFALSE 1161
// PlaceUnitArea ( Houten , alliance_start , false ) ;
1146: LD_EXP 23
1150: PPUSH
1151: LD_INT 13
1153: PPUSH
1154: LD_INT 0
1156: PPUSH
1157: CALL_OW 49
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 12a_ ) ;
1161: LD_ADDR_EXP 24
1165: PUSH
1166: LD_STRING Cornel
1168: PPUSH
1169: LD_EXP 1
1173: NOT
1174: PPUSH
1175: LD_STRING 12a_
1177: PPUSH
1178: CALL 13487 0 3
1182: ST_TO_ADDR
// if Cornel then
1183: LD_EXP 24
1187: IFFALSE 1204
// PlaceUnitArea ( Cornel , alliance_start , false ) ;
1189: LD_EXP 24
1193: PPUSH
1194: LD_INT 13
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 49
// Gary := PrepareUnit ( Gary , ( not debug ) , 12a_ ) ;
1204: LD_ADDR_EXP 25
1208: PUSH
1209: LD_STRING Gary
1211: PPUSH
1212: LD_EXP 1
1216: NOT
1217: PPUSH
1218: LD_STRING 12a_
1220: PPUSH
1221: CALL 13487 0 3
1225: ST_TO_ADDR
// if Gary then
1226: LD_EXP 25
1230: IFFALSE 1247
// PlaceUnitArea ( Gary , alliance_start , false ) ;
1232: LD_EXP 25
1236: PPUSH
1237: LD_INT 13
1239: PPUSH
1240: LD_INT 0
1242: PPUSH
1243: CALL_OW 49
// Frank := PrepareUnit ( Frank , ( not debug ) , 12a_ ) ;
1247: LD_ADDR_EXP 26
1251: PUSH
1252: LD_STRING Frank
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_STRING 12a_
1263: PPUSH
1264: CALL 13487 0 3
1268: ST_TO_ADDR
// if Frank then
1269: LD_EXP 26
1273: IFFALSE 1290
// PlaceUnitArea ( Frank , alliance_start , false ) ;
1275: LD_EXP 26
1279: PPUSH
1280: LD_INT 13
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 49
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 12a_ ) ;
1290: LD_ADDR_EXP 27
1294: PUSH
1295: LD_STRING Kikuchi
1297: PPUSH
1298: LD_EXP 1
1302: NOT
1303: PPUSH
1304: LD_STRING 12a_
1306: PPUSH
1307: CALL 13487 0 3
1311: ST_TO_ADDR
// if Kikuchi then
1312: LD_EXP 27
1316: IFFALSE 1333
// PlaceUnitArea ( Kikuchi , alliance_start , false ) ;
1318: LD_EXP 27
1322: PPUSH
1323: LD_INT 13
1325: PPUSH
1326: LD_INT 0
1328: PPUSH
1329: CALL_OW 49
// Simms := PrepareUnit ( Simms , ( not debug ) , 12a_ ) ;
1333: LD_ADDR_EXP 28
1337: PUSH
1338: LD_STRING Simms
1340: PPUSH
1341: LD_EXP 1
1345: NOT
1346: PPUSH
1347: LD_STRING 12a_
1349: PPUSH
1350: CALL 13487 0 3
1354: ST_TO_ADDR
// if Simms then
1355: LD_EXP 28
1359: IFFALSE 1376
// PlaceUnitArea ( Simms , alliance_start , false ) ;
1361: LD_EXP 28
1365: PPUSH
1366: LD_INT 13
1368: PPUSH
1369: LD_INT 0
1371: PPUSH
1372: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 12a_ ) ;
1376: LD_ADDR_EXP 29
1380: PUSH
1381: LD_STRING Joan
1383: PPUSH
1384: LD_EXP 1
1388: NOT
1389: PPUSH
1390: LD_STRING 12a_
1392: PPUSH
1393: CALL 13487 0 3
1397: ST_TO_ADDR
// if Joan then
1398: LD_EXP 29
1402: IFFALSE 1419
// PlaceUnitArea ( Joan , alliance_start , false ) ;
1404: LD_EXP 29
1408: PPUSH
1409: LD_INT 13
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 12a_ ) ;
1419: LD_ADDR_EXP 30
1423: PUSH
1424: LD_STRING DeltaDoctor
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_STRING 12a_
1435: PPUSH
1436: CALL 13487 0 3
1440: ST_TO_ADDR
// if DeltaDoctor then
1441: LD_EXP 30
1445: IFFALSE 1462
// PlaceUnitArea ( DeltaDoctor , alliance_start , false ) ;
1447: LD_EXP 30
1451: PPUSH
1452: LD_INT 13
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// tmp := CreateCharacterSet ( 12a_others ) ;
1462: LD_ADDR_VAR 0 4
1466: PUSH
1467: LD_STRING 12a_others
1469: PPUSH
1470: CALL_OW 31
1474: ST_TO_ADDR
// if tmp then
1475: LD_VAR 0 4
1479: IFFALSE 1513
// for i in tmp do
1481: LD_ADDR_VAR 0 3
1485: PUSH
1486: LD_VAR 0 4
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1511
// PlaceUnitArea ( i , alliance_start , false ) ;
1494: LD_VAR 0 3
1498: PPUSH
1499: LD_INT 13
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 49
1509: GO 1491
1511: POP
1512: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1513: LD_INT 3
1515: PPUSH
1516: LD_INT 3
1518: PPUSH
1519: LD_INT 3
1521: PPUSH
1522: LD_INT 12
1524: PPUSH
1525: LD_INT 100
1527: PPUSH
1528: CALL 19567 0 5
// veh := CreateVehicle ;
1532: LD_ADDR_VAR 0 2
1536: PUSH
1537: CALL_OW 45
1541: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1542: LD_VAR 0 2
1546: PPUSH
1547: LD_INT 2
1549: PPUSH
1550: CALL_OW 233
// PlaceUnitXY ( veh , 63 , 9 , false ) ;
1554: LD_VAR 0 2
1558: PPUSH
1559: LD_INT 63
1561: PPUSH
1562: LD_INT 9
1564: PPUSH
1565: LD_INT 0
1567: PPUSH
1568: CALL_OW 48
// SetCargo ( veh , mat_artifact , 30 ) ;
1572: LD_VAR 0 2
1576: PPUSH
1577: LD_INT 4
1579: PPUSH
1580: LD_INT 30
1582: PPUSH
1583: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
1587: LD_STRING 11_artifact_captured
1589: PPUSH
1590: LD_INT 0
1592: PPUSH
1593: CALL_OW 30
1597: IFFALSE 1673
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1599: LD_INT 3
1601: PPUSH
1602: LD_INT 3
1604: PPUSH
1605: LD_INT 3
1607: PPUSH
1608: LD_INT 12
1610: PPUSH
1611: LD_INT 100
1613: PPUSH
1614: CALL 19567 0 5
// veh := CreateVehicle ;
1618: LD_ADDR_VAR 0 2
1622: PUSH
1623: CALL_OW 45
1627: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1628: LD_VAR 0 2
1632: PPUSH
1633: LD_INT 2
1635: PPUSH
1636: CALL_OW 233
// PlaceUnitXY ( veh , 60 , 4 , false ) ;
1640: LD_VAR 0 2
1644: PPUSH
1645: LD_INT 60
1647: PPUSH
1648: LD_INT 4
1650: PPUSH
1651: LD_INT 0
1653: PPUSH
1654: CALL_OW 48
// SetCargo ( veh , mat_artifact , 50 ) ;
1658: LD_VAR 0 2
1662: PPUSH
1663: LD_INT 4
1665: PPUSH
1666: LD_INT 50
1668: PPUSH
1669: CALL_OW 290
// end ; end ;
1673: LD_VAR 0 1
1677: RET
// export function PrepareGossudarov ; var tmp , i ; begin
1678: LD_INT 0
1680: PPUSH
1681: PPUSH
1682: PPUSH
// uc_side := 6 ;
1683: LD_ADDR_OWVAR 20
1687: PUSH
1688: LD_INT 6
1690: ST_TO_ADDR
// uc_nation := 3 ;
1691: LD_ADDR_OWVAR 21
1695: PUSH
1696: LD_INT 3
1698: ST_TO_ADDR
// InitHc ;
1699: CALL_OW 19
// Gossudarov := NewCharacter ( Gossudarov ) ;
1703: LD_ADDR_EXP 31
1707: PUSH
1708: LD_STRING Gossudarov
1710: PPUSH
1711: CALL_OW 25
1715: ST_TO_ADDR
// Kirilenkova := NewCharacter ( Kirilenkova ) ;
1716: LD_ADDR_EXP 32
1720: PUSH
1721: LD_STRING Kirilenkova
1723: PPUSH
1724: CALL_OW 25
1728: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
1729: LD_ADDR_EXP 33
1733: PUSH
1734: LD_STRING Titov
1736: PPUSH
1737: CALL_OW 25
1741: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
1742: LD_ADDR_EXP 38
1746: PUSH
1747: LD_STRING Oblukov
1749: PPUSH
1750: CALL_OW 25
1754: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
1755: LD_ADDR_EXP 35
1759: PUSH
1760: LD_STRING Dolgov
1762: PPUSH
1763: CALL_OW 25
1767: ST_TO_ADDR
// Petrosyan := NewCharacter ( Petrosyan ) ;
1768: LD_ADDR_EXP 36
1772: PUSH
1773: LD_STRING Petrosyan
1775: PPUSH
1776: CALL_OW 25
1780: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
1781: LD_ADDR_EXP 37
1785: PUSH
1786: LD_STRING Scholtze
1788: PPUSH
1789: CALL_OW 25
1793: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
1794: LD_ADDR_EXP 39
1798: PUSH
1799: LD_STRING Kapitsova
1801: PPUSH
1802: CALL_OW 25
1806: ST_TO_ADDR
// tmp := [ Gossudarov , Kirilenkova , Titov , Oblukov , Dolgov , Petrosyan , Scholtze , Kapitsova ] ;
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: LD_EXP 31
1816: PUSH
1817: LD_EXP 32
1821: PUSH
1822: LD_EXP 33
1826: PUSH
1827: LD_EXP 38
1831: PUSH
1832: LD_EXP 35
1836: PUSH
1837: LD_EXP 36
1841: PUSH
1842: LD_EXP 37
1846: PUSH
1847: LD_EXP 39
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: ST_TO_ADDR
// for i in tmp do
1862: LD_ADDR_VAR 0 3
1866: PUSH
1867: LD_VAR 0 2
1871: PUSH
1872: FOR_IN
1873: IFFALSE 1892
// PlaceUnitArea ( i , gossudarov_spawn , false ) ;
1875: LD_VAR 0 3
1879: PPUSH
1880: LD_INT 14
1882: PPUSH
1883: LD_INT 0
1885: PPUSH
1886: CALL_OW 49
1890: GO 1872
1892: POP
1893: POP
// ComMoveXY ( tmp , GetX ( freedom ) , GetY ( freedom ) ) ;
1894: LD_VAR 0 2
1898: PPUSH
1899: LD_EXP 3
1903: PPUSH
1904: CALL_OW 250
1908: PPUSH
1909: LD_EXP 3
1913: PPUSH
1914: CALL_OW 251
1918: PPUSH
1919: CALL_OW 111
// end ;
1923: LD_VAR 0 1
1927: RET
// export function PrepareBelkov ; begin
1928: LD_INT 0
1930: PPUSH
// uc_side := 4 ;
1931: LD_ADDR_OWVAR 20
1935: PUSH
1936: LD_INT 4
1938: ST_TO_ADDR
// uc_nation := 3 ;
1939: LD_ADDR_OWVAR 21
1943: PUSH
1944: LD_INT 3
1946: ST_TO_ADDR
// InitHc ;
1947: CALL_OW 19
// Belkov := NewCharacter ( Belkov ) ;
1951: LD_ADDR_EXP 46
1955: PUSH
1956: LD_STRING Belkov
1958: PPUSH
1959: CALL_OW 25
1963: ST_TO_ADDR
// PlaceUnitArea ( Belkov , gossudarov_spawn , false ) ;
1964: LD_EXP 46
1968: PPUSH
1969: LD_INT 14
1971: PPUSH
1972: LD_INT 0
1974: PPUSH
1975: CALL_OW 49
// end ;
1979: LD_VAR 0 1
1983: RET
// export function PrepareGnyevko ; begin
1984: LD_INT 0
1986: PPUSH
// uc_side := 4 ;
1987: LD_ADDR_OWVAR 20
1991: PUSH
1992: LD_INT 4
1994: ST_TO_ADDR
// uc_nation := 3 ;
1995: LD_ADDR_OWVAR 21
1999: PUSH
2000: LD_INT 3
2002: ST_TO_ADDR
// InitHc ;
2003: CALL_OW 19
// Gnyevko := NewCharacter ( Gnyevko ) ;
2007: LD_ADDR_EXP 47
2011: PUSH
2012: LD_STRING Gnyevko
2014: PPUSH
2015: CALL_OW 25
2019: ST_TO_ADDR
// PlaceUnitArea ( Gnyevko , gossudarov_spawn , false ) ;
2020: LD_EXP 47
2024: PPUSH
2025: LD_INT 14
2027: PPUSH
2028: LD_INT 0
2030: PPUSH
2031: CALL_OW 49
// end ;
2035: LD_VAR 0 1
2039: RET
// export function PrepareBurlak ; var i , tmp ; begin
2040: LD_INT 0
2042: PPUSH
2043: PPUSH
2044: PPUSH
// uc_side := 4 ;
2045: LD_ADDR_OWVAR 20
2049: PUSH
2050: LD_INT 4
2052: ST_TO_ADDR
// uc_nation := 3 ;
2053: LD_ADDR_OWVAR 21
2057: PUSH
2058: LD_INT 3
2060: ST_TO_ADDR
// InitHc ;
2061: CALL_OW 19
// Burlak := NewCharacter ( Burlak ) ;
2065: LD_ADDR_EXP 45
2069: PUSH
2070: LD_STRING Burlak
2072: PPUSH
2073: CALL_OW 25
2077: ST_TO_ADDR
// PrepareVehicle ( [ ru_heavy_tracked , ru_heavy_wheeled , ru_medium_tracked ] [ Difficulty ] , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gun , ru_gatling_gun ] [ Difficulty ] , 0 ) ;
2078: LD_INT 24
2080: PUSH
2081: LD_INT 23
2083: PUSH
2084: LD_INT 22
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: PUSH
2092: LD_OWVAR 67
2096: ARRAY
2097: PPUSH
2098: LD_INT 1
2100: PPUSH
2101: LD_INT 1
2103: PPUSH
2104: LD_INT 45
2106: PUSH
2107: LD_INT 44
2109: PUSH
2110: LD_INT 43
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: LIST
2117: PUSH
2118: LD_OWVAR 67
2122: ARRAY
2123: PPUSH
2124: LD_INT 0
2126: PPUSH
2127: CALL 19567 0 5
// Masha := CreateVehicle ;
2131: LD_ADDR_EXP 48
2135: PUSH
2136: CALL_OW 45
2140: ST_TO_ADDR
// SetLives ( [ Masha , Burlak ] , 499 ) ;
2141: LD_EXP 48
2145: PUSH
2146: LD_EXP 45
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: PPUSH
2155: LD_INT 499
2157: PPUSH
2158: CALL_OW 234
// SetDir ( Masha , 3 ) ;
2162: LD_EXP 48
2166: PPUSH
2167: LD_INT 3
2169: PPUSH
2170: CALL_OW 233
// SetMark ( Masha , 1 ) ;
2174: LD_EXP 48
2178: PPUSH
2179: LD_INT 1
2181: PPUSH
2182: CALL_OW 242
// PlaceUnitArea ( Masha , burlak_spawn , false ) ;
2186: LD_EXP 48
2190: PPUSH
2191: LD_INT 18
2193: PPUSH
2194: LD_INT 0
2196: PPUSH
2197: CALL_OW 49
// PlaceUnitXY ( Burlak , 125 , 1 , false ) ;
2201: LD_EXP 45
2205: PPUSH
2206: LD_INT 125
2208: PPUSH
2209: LD_INT 1
2211: PPUSH
2212: LD_INT 0
2214: PPUSH
2215: CALL_OW 48
// ComMoveUnit ( Burlak , Masha ) ;
2219: LD_EXP 45
2223: PPUSH
2224: LD_EXP 48
2228: PPUSH
2229: CALL_OW 112
// wait ( 0 0$0.3 ) ;
2233: LD_INT 10
2235: PPUSH
2236: CALL_OW 67
// AddComMoveXY ( Masha , 110 , 10 ) ;
2240: LD_EXP 48
2244: PPUSH
2245: LD_INT 110
2247: PPUSH
2248: LD_INT 10
2250: PPUSH
2251: CALL_OW 171
// Petrovova := NewCharacter ( Petrovova ) ;
2255: LD_ADDR_EXP 41
2259: PUSH
2260: LD_STRING Petrovova
2262: PPUSH
2263: CALL_OW 25
2267: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
2268: LD_ADDR_EXP 43
2272: PUSH
2273: LD_STRING Kuzmov
2275: PPUSH
2276: CALL_OW 25
2280: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
2281: LD_ADDR_EXP 42
2285: PUSH
2286: LD_STRING Kovalyuk
2288: PPUSH
2289: CALL_OW 25
2293: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
2294: LD_ADDR_EXP 40
2298: PUSH
2299: LD_STRING Lipshchin
2301: PPUSH
2302: CALL_OW 25
2306: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
2307: LD_ADDR_EXP 44
2311: PUSH
2312: LD_STRING Karamazov
2314: PPUSH
2315: CALL_OW 25
2319: ST_TO_ADDR
// tmp := [ Petrovova , Kuzmov , Kovalyuk , Lipshchin , Karamazov ] ;
2320: LD_ADDR_VAR 0 3
2324: PUSH
2325: LD_EXP 41
2329: PUSH
2330: LD_EXP 43
2334: PUSH
2335: LD_EXP 42
2339: PUSH
2340: LD_EXP 40
2344: PUSH
2345: LD_EXP 44
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// for i in tmp do
2357: LD_ADDR_VAR 0 2
2361: PUSH
2362: LD_VAR 0 3
2366: PUSH
2367: FOR_IN
2368: IFFALSE 2407
// begin SetLives ( i , rand ( 399 , 799 ) ) ;
2370: LD_VAR 0 2
2374: PPUSH
2375: LD_INT 399
2377: PPUSH
2378: LD_INT 799
2380: PPUSH
2381: CALL_OW 12
2385: PPUSH
2386: CALL_OW 234
// PlaceUnitArea ( i , burlak_friends_spawn , false ) ;
2390: LD_VAR 0 2
2394: PPUSH
2395: LD_INT 19
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 49
// end ;
2405: GO 2367
2407: POP
2408: POP
// ComMoveXY ( tmp , 116 , 8 ) ;
2409: LD_VAR 0 3
2413: PPUSH
2414: LD_INT 116
2416: PPUSH
2417: LD_INT 8
2419: PPUSH
2420: CALL_OW 111
// AddComHold ( tmp ) ;
2424: LD_VAR 0 3
2428: PPUSH
2429: CALL_OW 200
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: LD_VAR 0 3
2442: PPUSH
2443: LD_INT 25
2445: PUSH
2446: LD_INT 1
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PPUSH
2453: CALL_OW 72
2457: PUSH
2458: FOR_IN
2459: IFFALSE 2499
// begin AddComMoveToArea ( i , burlak_crawl_area ) ;
2461: LD_VAR 0 2
2465: PPUSH
2466: LD_INT 20
2468: PPUSH
2469: CALL_OW 173
// AddComTurnXY ( i , 147 , 45 ) ;
2473: LD_VAR 0 2
2477: PPUSH
2478: LD_INT 147
2480: PPUSH
2481: LD_INT 45
2483: PPUSH
2484: CALL_OW 178
// AddComCrawl ( i ) ;
2488: LD_VAR 0 2
2492: PPUSH
2493: CALL_OW 197
// end ;
2497: GO 2458
2499: POP
2500: POP
// repeat wait ( 0 0$1 ) ;
2501: LD_INT 35
2503: PPUSH
2504: CALL_OW 67
// until IsAt ( Masha , 110 , 10 ) ;
2508: LD_EXP 48
2512: PPUSH
2513: LD_INT 110
2515: PPUSH
2516: LD_INT 10
2518: PPUSH
2519: CALL_OW 307
2523: IFFALSE 2501
// ComStop ( Burlak ) ;
2525: LD_EXP 45
2529: PPUSH
2530: CALL_OW 141
// AddComHold ( Burlak ) ;
2534: LD_EXP 45
2538: PPUSH
2539: CALL_OW 200
// end ; end_of_file
2543: LD_VAR 0 1
2547: RET
// export russian_force , russian_guard , ru_attackers ; export function PrepareRussian ; var i , veh , tmp ; begin
2548: LD_INT 0
2550: PPUSH
2551: PPUSH
2552: PPUSH
2553: PPUSH
// uc_side := 3 ;
2554: LD_ADDR_OWVAR 20
2558: PUSH
2559: LD_INT 3
2561: ST_TO_ADDR
// uc_nation := 3 ;
2562: LD_ADDR_OWVAR 21
2566: PUSH
2567: LD_INT 3
2569: ST_TO_ADDR
// russian_force := PrepareBase ( ru_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 10000 , 3000 , 300 ] , [ 9 , 5 , 6 , 6 ] ) ;
2570: LD_ADDR_EXP 49
2574: PUSH
2575: LD_INT 47
2577: PPUSH
2578: LD_STRING 
2580: PPUSH
2581: LD_INT 7
2583: PUSH
2584: LD_INT 8
2586: PUSH
2587: LD_INT 9
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: LIST
2594: PUSH
2595: LD_OWVAR 67
2599: ARRAY
2600: PPUSH
2601: LD_INT 10000
2603: PUSH
2604: LD_INT 3000
2606: PUSH
2607: LD_INT 300
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: LIST
2614: PPUSH
2615: LD_INT 9
2617: PUSH
2618: LD_INT 5
2620: PUSH
2621: LD_INT 6
2623: PUSH
2624: LD_INT 6
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: PPUSH
2633: CALL 22966 0 5
2637: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , russian_force ) ;
2638: LD_ADDR_EXP 57
2642: PUSH
2643: LD_EXP 57
2647: PPUSH
2648: LD_INT 2
2650: PPUSH
2651: LD_EXP 49
2655: PPUSH
2656: CALL_OW 1
2660: ST_TO_ADDR
// tmp := [ ] ;
2661: LD_ADDR_VAR 0 4
2665: PUSH
2666: EMPTY
2667: ST_TO_ADDR
// for i = 1 to 4 do
2668: LD_ADDR_VAR 0 2
2672: PUSH
2673: DOUBLE
2674: LD_INT 1
2676: DEC
2677: ST_TO_ADDR
2678: LD_INT 4
2680: PUSH
2681: FOR_TO
2682: IFFALSE 2775
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun ] [ i mod 4 + 1 ] , 100 ) ;
2684: LD_INT 22
2686: PPUSH
2687: LD_INT 3
2689: PPUSH
2690: LD_INT 3
2692: PPUSH
2693: LD_INT 43
2695: PUSH
2696: LD_INT 45
2698: PUSH
2699: LD_INT 45
2701: PUSH
2702: LD_INT 44
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: PUSH
2711: LD_VAR 0 2
2715: PUSH
2716: LD_INT 4
2718: MOD
2719: PUSH
2720: LD_INT 1
2722: PLUS
2723: ARRAY
2724: PPUSH
2725: LD_INT 100
2727: PPUSH
2728: CALL 19567 0 5
// veh := CreateVehicle ;
2732: LD_ADDR_VAR 0 3
2736: PUSH
2737: CALL_OW 45
2741: ST_TO_ADDR
// tmp := tmp ^ veh ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 4
2751: PUSH
2752: LD_VAR 0 3
2756: ADD
2757: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_russian , false ) ;
2758: LD_VAR 0 3
2762: PPUSH
2763: LD_INT 2
2765: PPUSH
2766: LD_INT 0
2768: PPUSH
2769: CALL_OW 49
// end ;
2773: GO 2681
2775: POP
2776: POP
// russian_guard := tmp ;
2777: LD_ADDR_EXP 50
2781: PUSH
2782: LD_VAR 0 4
2786: ST_TO_ADDR
// end ;
2787: LD_VAR 0 1
2791: RET
// every 9 9$00 + 2 2$00 trigger IsOk ( ru_depot ) and player_spotted do var i , base , tmp , flags , _target , attackers ;
2792: LD_INT 47
2794: PPUSH
2795: CALL_OW 302
2799: PUSH
2800: LD_EXP 6
2804: AND
2805: IFFALSE 3418
2807: GO 2809
2809: DISABLE
2810: LD_INT 0
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
2816: PPUSH
2817: PPUSH
// begin enable ;
2818: ENABLE
// base := 2 ;
2819: LD_ADDR_VAR 0 2
2823: PUSH
2824: LD_INT 2
2826: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
2827: LD_ADDR_VAR 0 4
2831: PUSH
2832: LD_INT 0
2834: PUSH
2835: LD_INT 0
2837: PUSH
2838: LD_INT 0
2840: PUSH
2841: LD_INT 0
2843: PUSH
2844: LD_INT 0
2846: PUSH
2847: LD_INT 0
2849: PUSH
2850: LD_INT 0
2852: PUSH
2853: LD_INT 0
2855: PUSH
2856: LD_INT 1
2858: PUSH
2859: LD_INT 0
2861: PUSH
2862: EMPTY
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: ST_TO_ADDR
// tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] ] ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 22
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: LD_INT 3
2887: PUSH
2888: LD_INT 45
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: PUSH
2897: LD_INT 21
2899: PUSH
2900: LD_INT 1
2902: PUSH
2903: LD_INT 3
2905: PUSH
2906: LD_INT 45
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: LD_INT 22
2917: PUSH
2918: LD_INT 1
2920: PUSH
2921: LD_INT 3
2923: PUSH
2924: LD_INT 45
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: LIST
2931: LIST
2932: PUSH
2933: LD_INT 23
2935: PUSH
2936: LD_INT 1
2938: PUSH
2939: LD_INT 3
2941: PUSH
2942: LD_INT 46
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
2957: LD_ADDR_VAR 0 1
2961: PUSH
2962: DOUBLE
2963: LD_INT 1
2965: DEC
2966: ST_TO_ADDR
2967: LD_OWVAR 67
2971: PUSH
2972: LD_OWVAR 1
2976: PUSH
2977: LD_INT 21000
2979: DIV
2980: PLUS
2981: PUSH
2982: FOR_TO
2983: IFFALSE 3071
// tmp := Insert ( tmp , tmp + 1 , [ [ ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
2985: LD_ADDR_VAR 0 3
2989: PUSH
2990: LD_VAR 0 3
2994: PPUSH
2995: LD_VAR 0 3
2999: PUSH
3000: LD_INT 1
3002: PLUS
3003: PPUSH
3004: LD_INT 23
3006: PUSH
3007: LD_INT 24
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PUSH
3014: LD_INT 1
3016: PPUSH
3017: LD_INT 2
3019: PPUSH
3020: CALL_OW 12
3024: ARRAY
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: LD_INT 3
3031: PUSH
3032: LD_INT 46
3034: PUSH
3035: LD_INT 47
3037: PUSH
3038: LD_INT 45
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: LIST
3045: PUSH
3046: LD_INT 1
3048: PPUSH
3049: LD_INT 3
3051: PPUSH
3052: CALL_OW 12
3056: ARRAY
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 2
3068: ST_TO_ADDR
3069: GO 2982
3071: POP
3072: POP
// MC_SetProduceList ( base , tmp ) ;
3073: LD_VAR 0 2
3077: PPUSH
3078: LD_VAR 0 3
3082: PPUSH
3083: CALL 68021 0 2
// repeat wait ( 0 0$1 ) ;
3087: LD_INT 35
3089: PPUSH
3090: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
3094: LD_VAR 0 2
3098: PPUSH
3099: CALL 68478 0 1
3103: PUSH
3104: LD_INT 0
3106: EQUAL
3107: IFFALSE 3087
// wait ( 0 0$20 ) ;
3109: LD_INT 700
3111: PPUSH
3112: CALL_OW 67
// _target := [ [ 71 , 19 ] , [ 91 , 67 ] , [ 52 , 44 ] , [ 68 , 48 ] ] ;
3116: LD_ADDR_VAR 0 5
3120: PUSH
3121: LD_INT 71
3123: PUSH
3124: LD_INT 19
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: LD_INT 91
3133: PUSH
3134: LD_INT 67
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: PUSH
3141: LD_INT 52
3143: PUSH
3144: LD_INT 44
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: PUSH
3151: LD_INT 68
3153: PUSH
3154: LD_INT 48
3156: PUSH
3157: EMPTY
3158: LIST
3159: LIST
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] ] ) ) ;
3167: LD_ADDR_VAR 0 6
3171: PUSH
3172: LD_EXP 76
3176: PUSH
3177: LD_VAR 0 2
3181: ARRAY
3182: PUSH
3183: LD_EXP 79
3187: PUSH
3188: LD_VAR 0 2
3192: ARRAY
3193: PUSH
3194: LD_EXP 76
3198: PUSH
3199: LD_VAR 0 2
3203: ARRAY
3204: PPUSH
3205: LD_INT 2
3207: PUSH
3208: LD_INT 34
3210: PUSH
3211: LD_INT 51
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: LD_INT 34
3220: PUSH
3221: LD_INT 52
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: LIST
3232: PPUSH
3233: CALL_OW 72
3237: UNION
3238: DIFF
3239: ST_TO_ADDR
// if not attackers then
3240: LD_VAR 0 6
3244: NOT
3245: IFFALSE 3249
// exit ;
3247: GO 3418
// ru_attackers := attackers ;
3249: LD_ADDR_EXP 51
3253: PUSH
3254: LD_VAR 0 6
3258: ST_TO_ADDR
// for i = 1 to attackers do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 6
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3352
// begin case i mod 3 of 0 :
3277: LD_VAR 0 1
3281: PUSH
3282: LD_INT 3
3284: MOD
3285: PUSH
3286: LD_INT 0
3288: DOUBLE
3289: EQUAL
3290: IFTRUE 3294
3292: GO 3297
3294: POP
// ; 1 :
3295: GO 3350
3297: LD_INT 1
3299: DOUBLE
3300: EQUAL
3301: IFTRUE 3305
3303: GO 3323
3305: POP
// ComAgressiveMove ( i , 32 , 49 ) ; 2 :
3306: LD_VAR 0 1
3310: PPUSH
3311: LD_INT 32
3313: PPUSH
3314: LD_INT 49
3316: PPUSH
3317: CALL_OW 114
3321: GO 3350
3323: LD_INT 2
3325: DOUBLE
3326: EQUAL
3327: IFTRUE 3331
3329: GO 3349
3331: POP
// ComAgressiveMove ( i , 117 , 107 ) ; end ;
3332: LD_VAR 0 1
3336: PPUSH
3337: LD_INT 117
3339: PPUSH
3340: LD_INT 107
3342: PPUSH
3343: CALL_OW 114
3347: GO 3350
3349: POP
// end ;
3350: GO 3274
3352: POP
3353: POP
// repeat wait ( 0 0$1 ) ;
3354: LD_INT 35
3356: PPUSH
3357: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
3361: LD_VAR 0 6
3365: PPUSH
3366: LD_INT 60
3368: PUSH
3369: EMPTY
3370: LIST
3371: PPUSH
3372: CALL_OW 72
3376: NOT
3377: IFFALSE 3354
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
3379: LD_VAR 0 2
3383: PPUSH
3384: LD_VAR 0 6
3388: PPUSH
3389: LD_VAR 0 5
3393: PPUSH
3394: LD_VAR 0 4
3398: PPUSH
3399: CALL 68315 0 4
// if not first_attack then
3403: LD_EXP 7
3407: NOT
3408: IFFALSE 3418
// first_attack := true ;
3410: LD_ADDR_EXP 7
3414: PUSH
3415: LD_INT 1
3417: ST_TO_ADDR
// end ; end_of_file
3418: PPOPN 6
3420: END
// export arabian_force , arabian_guard , Abdul , mastodont ; export function PrepareArabian ; var i , veh , tmp , xy , un , un2 ; begin
3421: LD_INT 0
3423: PPUSH
3424: PPUSH
3425: PPUSH
3426: PPUSH
3427: PPUSH
3428: PPUSH
3429: PPUSH
// uc_side := 2 ;
3430: LD_ADDR_OWVAR 20
3434: PUSH
3435: LD_INT 2
3437: ST_TO_ADDR
// uc_nation := 2 ;
3438: LD_ADDR_OWVAR 21
3442: PUSH
3443: LD_INT 2
3445: ST_TO_ADDR
// Abdul := NewCharacter ( Abdul ) ;
3446: LD_ADDR_EXP 54
3450: PUSH
3451: LD_STRING Abdul
3453: PPUSH
3454: CALL_OW 25
3458: ST_TO_ADDR
// SetClass ( Abdul , class_desert_warior ) ;
3459: LD_EXP 54
3463: PPUSH
3464: LD_INT 11
3466: PPUSH
3467: CALL_OW 336
// PlaceHumanInUnit ( Abdul , ar_depot ) ;
3471: LD_EXP 54
3475: PPUSH
3476: LD_INT 1
3478: PPUSH
3479: CALL_OW 52
// vc_chassis := 31 ;
3483: LD_ADDR_OWVAR 37
3487: PUSH
3488: LD_INT 31
3490: ST_TO_ADDR
// vc_control := control_rider ;
3491: LD_ADDR_OWVAR 38
3495: PUSH
3496: LD_INT 4
3498: ST_TO_ADDR
// mastodont := CreateVehicle ;
3499: LD_ADDR_EXP 55
3503: PUSH
3504: CALL_OW 45
3508: ST_TO_ADDR
// PlaceUnitXY ( mastodont , 153 , 71 , false ) ;
3509: LD_EXP 55
3513: PPUSH
3514: LD_INT 153
3516: PPUSH
3517: LD_INT 71
3519: PPUSH
3520: LD_INT 0
3522: PPUSH
3523: CALL_OW 48
// InitVc ;
3527: CALL_OW 20
// arabian_force := PrepareBase ( ar_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 5000 , 1000 , 300 ] , [ 22 , 5 , 6 , 9 ] ) ;
3531: LD_ADDR_EXP 52
3535: PUSH
3536: LD_INT 1
3538: PPUSH
3539: LD_STRING 
3541: PPUSH
3542: LD_INT 7
3544: PUSH
3545: LD_INT 8
3547: PUSH
3548: LD_INT 9
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: LIST
3555: PUSH
3556: LD_OWVAR 67
3560: ARRAY
3561: PPUSH
3562: LD_INT 5000
3564: PUSH
3565: LD_INT 1000
3567: PUSH
3568: LD_INT 300
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: PPUSH
3576: LD_INT 22
3578: PUSH
3579: LD_INT 5
3581: PUSH
3582: LD_INT 6
3584: PUSH
3585: LD_INT 9
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PPUSH
3594: CALL 22966 0 5
3598: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , arabian_force ) ;
3599: LD_ADDR_EXP 57
3603: PUSH
3604: LD_EXP 57
3608: PPUSH
3609: LD_INT 1
3611: PPUSH
3612: LD_EXP 52
3616: PPUSH
3617: CALL_OW 1
3621: ST_TO_ADDR
// tmp := [ ] ;
3622: LD_ADDR_VAR 0 4
3626: PUSH
3627: EMPTY
3628: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
3629: LD_ADDR_OWVAR 37
3633: PUSH
3634: LD_INT 14
3636: ST_TO_ADDR
// vc_engine := engine_siberite ;
3637: LD_ADDR_OWVAR 39
3641: PUSH
3642: LD_INT 3
3644: ST_TO_ADDR
// vc_control := control_manual ;
3645: LD_ADDR_OWVAR 38
3649: PUSH
3650: LD_INT 1
3652: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
3653: LD_ADDR_OWVAR 40
3657: PUSH
3658: LD_INT 31
3660: ST_TO_ADDR
// for i = 1 to 3 do
3661: LD_ADDR_VAR 0 2
3665: PUSH
3666: DOUBLE
3667: LD_INT 1
3669: DEC
3670: ST_TO_ADDR
3671: LD_INT 3
3673: PUSH
3674: FOR_TO
3675: IFFALSE 3919
// begin xy := [ [ 153 , 71 ] , [ 155 , 81 ] ] [ i mod 2 + 1 ] ;
3677: LD_ADDR_VAR 0 5
3681: PUSH
3682: LD_INT 153
3684: PUSH
3685: LD_INT 71
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PUSH
3692: LD_INT 155
3694: PUSH
3695: LD_INT 81
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_VAR 0 2
3710: PUSH
3711: LD_INT 2
3713: MOD
3714: PUSH
3715: LD_INT 1
3717: PLUS
3718: ARRAY
3719: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
3720: LD_INT 0
3722: PPUSH
3723: LD_INT 3
3725: PPUSH
3726: LD_INT 7
3728: PUSH
3729: LD_INT 8
3731: PUSH
3732: LD_INT 9
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: LIST
3739: PUSH
3740: LD_OWVAR 67
3744: ARRAY
3745: PPUSH
3746: CALL_OW 380
// un := CreateVehicle ;
3750: LD_ADDR_VAR 0 6
3754: PUSH
3755: CALL_OW 45
3759: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3760: LD_VAR 0 6
3764: PPUSH
3765: LD_INT 0
3767: PPUSH
3768: LD_INT 5
3770: PPUSH
3771: CALL_OW 12
3775: PPUSH
3776: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
3780: LD_VAR 0 6
3784: PPUSH
3785: LD_VAR 0 5
3789: PUSH
3790: LD_INT 1
3792: ARRAY
3793: PPUSH
3794: LD_VAR 0 5
3798: PUSH
3799: LD_INT 2
3801: ARRAY
3802: PPUSH
3803: LD_INT 6
3805: PPUSH
3806: LD_INT 0
3808: PPUSH
3809: CALL_OW 50
// un2 := CreateHuman ;
3813: LD_ADDR_VAR 0 7
3817: PUSH
3818: CALL_OW 44
3822: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
3823: LD_VAR 0 7
3827: PPUSH
3828: LD_VAR 0 6
3832: PPUSH
3833: CALL_OW 52
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un ) ;
3837: LD_ADDR_EXP 57
3841: PUSH
3842: LD_EXP 57
3846: PPUSH
3847: LD_INT 1
3849: PUSH
3850: LD_EXP 57
3854: PUSH
3855: LD_INT 1
3857: ARRAY
3858: PUSH
3859: LD_INT 1
3861: PLUS
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: PPUSH
3867: LD_VAR 0 6
3871: PPUSH
3872: CALL 20124 0 3
3876: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un2 ) ;
3877: LD_ADDR_EXP 57
3881: PUSH
3882: LD_EXP 57
3886: PPUSH
3887: LD_INT 1
3889: PUSH
3890: LD_EXP 57
3894: PUSH
3895: LD_INT 1
3897: ARRAY
3898: PUSH
3899: LD_INT 1
3901: PLUS
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: PPUSH
3907: LD_VAR 0 7
3911: PPUSH
3912: CALL 20124 0 3
3916: ST_TO_ADDR
// end ;
3917: GO 3674
3919: POP
3920: POP
// for i = 1 to 5 do
3921: LD_ADDR_VAR 0 2
3925: PUSH
3926: DOUBLE
3927: LD_INT 1
3929: DEC
3930: ST_TO_ADDR
3931: LD_INT 5
3933: PUSH
3934: FOR_TO
3935: IFFALSE 4028
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gatling_gun , ar_rocket_launcher , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 100 ) ;
3937: LD_INT 14
3939: PPUSH
3940: LD_INT 3
3942: PPUSH
3943: LD_INT 1
3945: PPUSH
3946: LD_INT 25
3948: PUSH
3949: LD_INT 28
3951: PUSH
3952: LD_INT 28
3954: PUSH
3955: LD_INT 26
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: PUSH
3964: LD_VAR 0 2
3968: PUSH
3969: LD_INT 4
3971: MOD
3972: PUSH
3973: LD_INT 1
3975: PLUS
3976: ARRAY
3977: PPUSH
3978: LD_INT 100
3980: PPUSH
3981: CALL 19567 0 5
// veh := CreateVehicle ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: CALL_OW 45
3994: ST_TO_ADDR
// tmp := tmp ^ veh ;
3995: LD_ADDR_VAR 0 4
3999: PUSH
4000: LD_VAR 0 4
4004: PUSH
4005: LD_VAR 0 3
4009: ADD
4010: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_arabian , false ) ;
4011: LD_VAR 0 3
4015: PPUSH
4016: LD_INT 1
4018: PPUSH
4019: LD_INT 0
4021: PPUSH
4022: CALL_OW 49
// end ;
4026: GO 3934
4028: POP
4029: POP
// arabian_guard := tmp ;
4030: LD_ADDR_EXP 53
4034: PUSH
4035: LD_VAR 0 4
4039: ST_TO_ADDR
// end ;
4040: LD_VAR 0 1
4044: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , ar_depot , 12 ] ] ) or GetLives ( Mastodont ) < 990 or GetLives ( Abdul ) < 990 do
4045: LD_INT 22
4047: PUSH
4048: LD_INT 7
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 91
4057: PUSH
4058: LD_INT 1
4060: PUSH
4061: LD_INT 12
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: LIST
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 69
4077: PUSH
4078: LD_EXP 55
4082: PPUSH
4083: CALL_OW 256
4087: PUSH
4088: LD_INT 990
4090: LESS
4091: OR
4092: PUSH
4093: LD_EXP 54
4097: PPUSH
4098: CALL_OW 256
4102: PUSH
4103: LD_INT 990
4105: LESS
4106: OR
4107: IFFALSE 4250
4109: GO 4111
4111: DISABLE
// begin if IsInUnit ( Abdul ) then
4112: LD_EXP 54
4116: PPUSH
4117: CALL_OW 310
4121: IFFALSE 4132
// ComExitBuilding ( Abdul ) ;
4123: LD_EXP 54
4127: PPUSH
4128: CALL_OW 122
// if Mastodont then
4132: LD_EXP 55
4136: IFFALSE 4153
// ComMoveXY ( Mastodont , 205 , 132 ) ;
4138: LD_EXP 55
4142: PPUSH
4143: LD_INT 205
4145: PPUSH
4146: LD_INT 132
4148: PPUSH
4149: CALL_OW 111
// AddComMoveXY ( Abdul , 205 , 132 ) ;
4153: LD_EXP 54
4157: PPUSH
4158: LD_INT 205
4160: PPUSH
4161: LD_INT 132
4163: PPUSH
4164: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4168: LD_INT 35
4170: PPUSH
4171: CALL_OW 67
// until IsInArea ( Abdul , escape_area ) ;
4175: LD_EXP 54
4179: PPUSH
4180: LD_INT 21
4182: PPUSH
4183: CALL_OW 308
4187: IFFALSE 4168
// RemoveUnit ( Abdul ) ;
4189: LD_EXP 54
4193: PPUSH
4194: CALL_OW 64
// repeat wait ( 0 0$1 ) ;
4198: LD_INT 35
4200: PPUSH
4201: CALL_OW 67
// until IsInArea ( Mastodont , escape_area ) or IsDead ( Mastodont ) ;
4205: LD_EXP 55
4209: PPUSH
4210: LD_INT 21
4212: PPUSH
4213: CALL_OW 308
4217: PUSH
4218: LD_EXP 55
4222: PPUSH
4223: CALL_OW 301
4227: OR
4228: IFFALSE 4198
// if IsOk ( Mastodont ) then
4230: LD_EXP 55
4234: PPUSH
4235: CALL_OW 302
4239: IFFALSE 4250
// RemoveUnit ( Mastodont ) ;
4241: LD_EXP 55
4245: PPUSH
4246: CALL_OW 64
// end ;
4250: END
// every 0 0$5 trigger IsDead ( Abdul ) or FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 8 ] ] ] ) < [ 16 , 19 , 22 ] [ Difficulty ] do var tmp_vehs , tmp , tmp_ape , tmp_empty , i , veh ;
4251: LD_EXP 54
4255: PPUSH
4256: CALL_OW 301
4260: PUSH
4261: LD_INT 22
4263: PUSH
4264: LD_INT 2
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PUSH
4271: LD_INT 2
4273: PUSH
4274: LD_INT 25
4276: PUSH
4277: LD_INT 1
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 25
4286: PUSH
4287: LD_INT 2
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: LD_INT 25
4296: PUSH
4297: LD_INT 3
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: PUSH
4304: LD_INT 25
4306: PUSH
4307: LD_INT 4
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PUSH
4314: LD_INT 25
4316: PUSH
4317: LD_INT 8
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PPUSH
4336: CALL_OW 69
4340: PUSH
4341: LD_INT 16
4343: PUSH
4344: LD_INT 19
4346: PUSH
4347: LD_INT 22
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: PUSH
4355: LD_OWVAR 67
4359: ARRAY
4360: LESS
4361: OR
4362: IFFALSE 5028
4364: GO 4366
4366: DISABLE
4367: LD_INT 0
4369: PPUSH
4370: PPUSH
4371: PPUSH
4372: PPUSH
4373: PPUSH
4374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 8 ] ] ] ) ;
4375: LD_ADDR_VAR 0 2
4379: PUSH
4380: LD_INT 22
4382: PUSH
4383: LD_INT 2
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 2
4392: PUSH
4393: LD_INT 25
4395: PUSH
4396: LD_INT 1
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 25
4405: PUSH
4406: LD_INT 2
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: LD_INT 25
4415: PUSH
4416: LD_INT 3
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_INT 25
4425: PUSH
4426: LD_INT 4
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PUSH
4433: LD_INT 25
4435: PUSH
4436: LD_INT 8
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PPUSH
4455: CALL_OW 69
4459: ST_TO_ADDR
// for i in tmp do
4460: LD_ADDR_VAR 0 5
4464: PUSH
4465: LD_VAR 0 2
4469: PUSH
4470: FOR_IN
4471: IFFALSE 4487
// SetTag ( i , 10 ) ;
4473: LD_VAR 0 5
4477: PPUSH
4478: LD_INT 10
4480: PPUSH
4481: CALL_OW 109
4485: GO 4470
4487: POP
4488: POP
// tmp_ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff tmp ;
4489: LD_ADDR_VAR 0 3
4493: PUSH
4494: LD_INT 22
4496: PUSH
4497: LD_INT 2
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 21
4506: PUSH
4507: LD_INT 1
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: PUSH
4523: LD_VAR 0 2
4527: DIFF
4528: ST_TO_ADDR
// tmp_vehs := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_lives , 300 ] ] ) ;
4529: LD_ADDR_VAR 0 1
4533: PUSH
4534: LD_INT 22
4536: PUSH
4537: LD_INT 2
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: PUSH
4544: LD_INT 21
4546: PUSH
4547: LD_INT 2
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 300
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: LIST
4568: PPUSH
4569: CALL_OW 69
4573: ST_TO_ADDR
// tmp_empty := UnitFilter ( tmp_vehs , [ [ f_control , control_manual ] , [ f_empty ] ] ) ;
4574: LD_ADDR_VAR 0 4
4578: PUSH
4579: LD_VAR 0 1
4583: PPUSH
4584: LD_INT 33
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 58
4596: PUSH
4597: EMPTY
4598: LIST
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: CALL_OW 72
4608: ST_TO_ADDR
// for i in tmp do
4609: LD_ADDR_VAR 0 5
4613: PUSH
4614: LD_VAR 0 2
4618: PUSH
4619: FOR_IN
4620: IFFALSE 4804
// begin if i in FilterAllUnits ( [ f_driving ] ) then
4622: LD_VAR 0 5
4626: PUSH
4627: LD_INT 55
4629: PUSH
4630: EMPTY
4631: LIST
4632: PPUSH
4633: CALL_OW 69
4637: IN
4638: IFFALSE 4657
// begin AddComMoveXY ( i , 209 , 132 ) ;
4640: LD_VAR 0 5
4644: PPUSH
4645: LD_INT 209
4647: PPUSH
4648: LD_INT 132
4650: PPUSH
4651: CALL_OW 171
// continue ;
4655: GO 4619
// end ; if IsInUnit ( i ) then
4657: LD_VAR 0 5
4661: PPUSH
4662: CALL_OW 310
4666: IFFALSE 4684
// begin ComExitBuilding ( i ) ;
4668: LD_VAR 0 5
4672: PPUSH
4673: CALL_OW 122
// wait ( 3 ) ;
4677: LD_INT 3
4679: PPUSH
4680: CALL_OW 67
// end ; if tmp_empty then
4684: LD_VAR 0 4
4688: IFFALSE 4787
// if GetDistUnits ( i , NearestUnitToUnit ( tmp_empty , i ) ) < 25 then
4690: LD_VAR 0 5
4694: PPUSH
4695: LD_VAR 0 4
4699: PPUSH
4700: LD_VAR 0 5
4704: PPUSH
4705: CALL_OW 74
4709: PPUSH
4710: CALL_OW 296
4714: PUSH
4715: LD_INT 25
4717: LESS
4718: IFFALSE 4787
// begin veh := NearestUnitToUnit ( tmp_empty , i ) ;
4720: LD_ADDR_VAR 0 6
4724: PUSH
4725: LD_VAR 0 4
4729: PPUSH
4730: LD_VAR 0 5
4734: PPUSH
4735: CALL_OW 74
4739: ST_TO_ADDR
// AddComEnterUnit ( i , veh ) ;
4740: LD_VAR 0 5
4744: PPUSH
4745: LD_VAR 0 6
4749: PPUSH
4750: CALL_OW 180
// AddComMoveXY ( i , 209 , 132 ) ;
4754: LD_VAR 0 5
4758: PPUSH
4759: LD_INT 209
4761: PPUSH
4762: LD_INT 132
4764: PPUSH
4765: CALL_OW 171
// tmp_empty := tmp_empty diff veh ;
4769: LD_ADDR_VAR 0 4
4773: PUSH
4774: LD_VAR 0 4
4778: PUSH
4779: LD_VAR 0 6
4783: DIFF
4784: ST_TO_ADDR
// continue ;
4785: GO 4619
// end ; AddComMoveXY ( i , 201 , 132 ) ;
4787: LD_VAR 0 5
4791: PPUSH
4792: LD_INT 201
4794: PPUSH
4795: LD_INT 132
4797: PPUSH
4798: CALL_OW 171
// end ;
4802: GO 4619
4804: POP
4805: POP
// for i in tmp_ape do
4806: LD_ADDR_VAR 0 5
4810: PUSH
4811: LD_VAR 0 3
4815: PUSH
4816: FOR_IN
4817: IFFALSE 4856
// begin if IsInUnit ( i ) then
4819: LD_VAR 0 5
4823: PPUSH
4824: CALL_OW 310
4828: IFFALSE 4839
// ComExitBuilding ( i ) ;
4830: LD_VAR 0 5
4834: PPUSH
4835: CALL_OW 122
// AddComMoveXY ( i , 201 , 132 ) ;
4839: LD_VAR 0 5
4843: PPUSH
4844: LD_INT 201
4846: PPUSH
4847: LD_INT 132
4849: PPUSH
4850: CALL_OW 171
// end ;
4854: GO 4816
4856: POP
4857: POP
// repeat wait ( 0 0$1 ) ;
4858: LD_INT 35
4860: PPUSH
4861: CALL_OW 67
// for i in tmp union tmp_ape union tmp_vehs do
4865: LD_ADDR_VAR 0 5
4869: PUSH
4870: LD_VAR 0 2
4874: PUSH
4875: LD_VAR 0 3
4879: UNION
4880: PUSH
4881: LD_VAR 0 1
4885: UNION
4886: PUSH
4887: FOR_IN
4888: IFFALSE 4919
// if not HasTask ( i ) then
4890: LD_VAR 0 5
4894: PPUSH
4895: CALL_OW 314
4899: NOT
4900: IFFALSE 4917
// ComMoveXY ( i , 201 , 132 ) ;
4902: LD_VAR 0 5
4906: PPUSH
4907: LD_INT 201
4909: PPUSH
4910: LD_INT 132
4912: PPUSH
4913: CALL_OW 111
4917: GO 4887
4919: POP
4920: POP
// if FilterUnitsInArea ( escape_area , [ f_side , 2 ] ) then
4921: LD_INT 21
4923: PPUSH
4924: LD_INT 22
4926: PUSH
4927: LD_INT 2
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PPUSH
4934: CALL_OW 70
4938: IFFALSE 4979
// for i in FilterUnitsInArea ( escape_area , [ f_side , 2 ] ) do
4940: LD_ADDR_VAR 0 5
4944: PUSH
4945: LD_INT 21
4947: PPUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 2
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PPUSH
4958: CALL_OW 70
4962: PUSH
4963: FOR_IN
4964: IFFALSE 4977
// RemoveUnit ( i ) ;
4966: LD_VAR 0 5
4970: PPUSH
4971: CALL_OW 64
4975: GO 4963
4977: POP
4978: POP
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
4979: LD_INT 22
4981: PUSH
4982: LD_INT 2
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 2
4991: PUSH
4992: LD_INT 21
4994: PUSH
4995: LD_INT 1
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 21
5004: PUSH
5005: LD_INT 2
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: NOT
5026: IFFALSE 4858
// end ;
5028: PPOPN 6
5030: END
// every 12 12$00 trigger ar_active_attack and GetBType ( HexInfo ( 92 , 40 ) ) = b_siberite_mine do var sci ;
5031: LD_EXP 9
5035: PUSH
5036: LD_INT 92
5038: PPUSH
5039: LD_INT 40
5041: PPUSH
5042: CALL_OW 428
5046: PPUSH
5047: CALL_OW 266
5051: PUSH
5052: LD_INT 30
5054: EQUAL
5055: AND
5056: IFFALSE 5252
5058: GO 5060
5060: DISABLE
5061: LD_INT 0
5063: PPUSH
// begin sci := UnitFilter ( mc_bases [ 1 ] , [ f_class , 4 ] ) ;
5064: LD_ADDR_VAR 0 1
5068: PUSH
5069: LD_EXP 57
5073: PUSH
5074: LD_INT 1
5076: ARRAY
5077: PPUSH
5078: LD_INT 25
5080: PUSH
5081: LD_INT 4
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: PPUSH
5088: CALL_OW 72
5092: ST_TO_ADDR
// if not sci then
5093: LD_VAR 0 1
5097: NOT
5098: IFFALSE 5102
// exit ;
5100: GO 5252
// mc_bases := Replace ( mc_bases , 1 , mc_bases [ 1 ] diff sci [ 1 ] ) ;
5102: LD_ADDR_EXP 57
5106: PUSH
5107: LD_EXP 57
5111: PPUSH
5112: LD_INT 1
5114: PPUSH
5115: LD_EXP 57
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PUSH
5124: LD_VAR 0 1
5128: PUSH
5129: LD_INT 1
5131: ARRAY
5132: DIFF
5133: PPUSH
5134: CALL_OW 1
5138: ST_TO_ADDR
// if IsInUnit ( sci [ 1 ] ) then
5139: LD_VAR 0 1
5143: PUSH
5144: LD_INT 1
5146: ARRAY
5147: PPUSH
5148: CALL_OW 310
5152: IFFALSE 5167
// ComExitBuilding ( sci [ 1 ] ) ;
5154: LD_VAR 0 1
5158: PUSH
5159: LD_INT 1
5161: ARRAY
5162: PPUSH
5163: CALL_OW 122
// if DangerAtRangeXY ( 2 , 105 , 14 , 20 ) [ 4 ] < 10 then
5167: LD_INT 2
5169: PPUSH
5170: LD_INT 105
5172: PPUSH
5173: LD_INT 14
5175: PPUSH
5176: LD_INT 20
5178: PPUSH
5179: CALL 20618 0 4
5183: PUSH
5184: LD_INT 4
5186: ARRAY
5187: PUSH
5188: LD_INT 10
5190: LESS
5191: IFFALSE 5214
// AddComMoveXY ( sci [ 1 ] , 105 , 14 ) else
5193: LD_VAR 0 1
5197: PUSH
5198: LD_INT 1
5200: ARRAY
5201: PPUSH
5202: LD_INT 105
5204: PPUSH
5205: LD_INT 14
5207: PPUSH
5208: CALL_OW 171
5212: GO 5233
// AddComMoveXY ( sci [ 1 ] , 118 , 77 ) ;
5214: LD_VAR 0 1
5218: PUSH
5219: LD_INT 1
5221: ARRAY
5222: PPUSH
5223: LD_INT 118
5225: PPUSH
5226: LD_INT 77
5228: PPUSH
5229: CALL_OW 171
// AddComContaminate ( sci [ 1 ] , 92 , 40 ) ;
5233: LD_VAR 0 1
5237: PUSH
5238: LD_INT 1
5240: ARRAY
5241: PPUSH
5242: LD_INT 92
5244: PPUSH
5245: LD_INT 40
5247: PPUSH
5248: CALL_OW 218
// end ;
5252: PPOPN 1
5254: END
// every 14 14$00 trigger IsOk ( ar_depot ) and ar_active_attack do var i , base , tmp , flags , _target , attackers ;
5255: LD_INT 1
5257: PPUSH
5258: CALL_OW 302
5262: PUSH
5263: LD_EXP 9
5267: AND
5268: IFFALSE 5738
5270: GO 5272
5272: DISABLE
5273: LD_INT 0
5275: PPUSH
5276: PPUSH
5277: PPUSH
5278: PPUSH
5279: PPUSH
5280: PPUSH
// begin enable ;
5281: ENABLE
// base := 1 ;
5282: LD_ADDR_VAR 0 2
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: LD_INT 0
5297: PUSH
5298: LD_INT 0
5300: PUSH
5301: LD_INT 0
5303: PUSH
5304: LD_INT 0
5306: PUSH
5307: LD_INT 0
5309: PUSH
5310: LD_INT 0
5312: PUSH
5313: LD_INT 0
5315: PUSH
5316: LD_INT 0
5318: PUSH
5319: LD_INT 1
5321: PUSH
5322: LD_INT 0
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: ST_TO_ADDR
// tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_flame_thrower ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , ] ;
5337: LD_ADDR_VAR 0 3
5341: PUSH
5342: LD_INT 14
5344: PUSH
5345: LD_INT 1
5347: PUSH
5348: LD_INT 2
5350: PUSH
5351: LD_INT 26
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: PUSH
5360: LD_INT 14
5362: PUSH
5363: LD_INT 1
5365: PUSH
5366: LD_INT 2
5368: PUSH
5369: LD_INT 28
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: PUSH
5378: LD_INT 13
5380: PUSH
5381: LD_INT 1
5383: PUSH
5384: LD_INT 2
5386: PUSH
5387: LD_INT 29
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: LIST
5400: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
5401: LD_ADDR_VAR 0 1
5405: PUSH
5406: DOUBLE
5407: LD_INT 1
5409: DEC
5410: ST_TO_ADDR
5411: LD_OWVAR 67
5415: PUSH
5416: LD_OWVAR 1
5420: PUSH
5421: LD_INT 21000
5423: DIV
5424: PLUS
5425: PUSH
5426: FOR_TO
5427: IFFALSE 5519
// tmp := Insert ( tmp , tmp + 1 , [ [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_remote , [ ar_rocket_launcher , ar_selfpropelled_bomb , ar_gatling_gun , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ) ;
5429: LD_ADDR_VAR 0 3
5433: PUSH
5434: LD_VAR 0 3
5438: PPUSH
5439: LD_VAR 0 3
5443: PUSH
5444: LD_INT 1
5446: PLUS
5447: PPUSH
5448: LD_INT 13
5450: PUSH
5451: LD_INT 14
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PUSH
5458: LD_INT 1
5460: PPUSH
5461: LD_INT 2
5463: PPUSH
5464: CALL_OW 12
5468: ARRAY
5469: PUSH
5470: LD_INT 1
5472: PUSH
5473: LD_INT 2
5475: PUSH
5476: LD_INT 28
5478: PUSH
5479: LD_INT 29
5481: PUSH
5482: LD_INT 25
5484: PUSH
5485: LD_INT 26
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 1
5496: PPUSH
5497: LD_INT 4
5499: PPUSH
5500: CALL_OW 12
5504: ARRAY
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: PPUSH
5512: CALL_OW 2
5516: ST_TO_ADDR
5517: GO 5426
5519: POP
5520: POP
// MC_SetProduceList ( base , tmp ) ;
5521: LD_VAR 0 2
5525: PPUSH
5526: LD_VAR 0 3
5530: PPUSH
5531: CALL 68021 0 2
// repeat wait ( 0 0$1 ) ;
5535: LD_INT 35
5537: PPUSH
5538: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
5542: LD_VAR 0 2
5546: PPUSH
5547: CALL 68478 0 1
5551: PUSH
5552: LD_INT 0
5554: EQUAL
5555: IFFALSE 5535
// wait ( 0 0$20 ) ;
5557: LD_INT 700
5559: PPUSH
5560: CALL_OW 67
// _target := [ [ 124 , 85 ] , [ 90 , 61 ] , [ 69 , 48 ] , [ 68 , 48 ] ] ;
5564: LD_ADDR_VAR 0 5
5568: PUSH
5569: LD_INT 124
5571: PUSH
5572: LD_INT 85
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PUSH
5579: LD_INT 90
5581: PUSH
5582: LD_INT 61
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PUSH
5589: LD_INT 69
5591: PUSH
5592: LD_INT 48
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 68
5601: PUSH
5602: LD_INT 48
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , ar_cargo_bay ] ) ) ;
5615: LD_ADDR_VAR 0 6
5619: PUSH
5620: LD_EXP 76
5624: PUSH
5625: LD_VAR 0 2
5629: ARRAY
5630: PUSH
5631: LD_EXP 79
5635: PUSH
5636: LD_VAR 0 2
5640: ARRAY
5641: PUSH
5642: LD_EXP 76
5646: PUSH
5647: LD_VAR 0 2
5651: ARRAY
5652: PPUSH
5653: LD_INT 34
5655: PUSH
5656: LD_INT 32
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PPUSH
5663: CALL_OW 72
5667: UNION
5668: DIFF
5669: ST_TO_ADDR
// if not attackers then
5670: LD_VAR 0 6
5674: NOT
5675: IFFALSE 5679
// exit ;
5677: GO 5738
// ar_attackers := attackers ;
5679: LD_ADDR_EXP 10
5683: PUSH
5684: LD_VAR 0 6
5688: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5689: LD_INT 35
5691: PPUSH
5692: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
5696: LD_VAR 0 6
5700: PPUSH
5701: LD_INT 60
5703: PUSH
5704: EMPTY
5705: LIST
5706: PPUSH
5707: CALL_OW 72
5711: NOT
5712: IFFALSE 5689
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
5714: LD_VAR 0 2
5718: PPUSH
5719: LD_VAR 0 6
5723: PPUSH
5724: LD_VAR 0 5
5728: PPUSH
5729: LD_VAR 0 4
5733: PPUSH
5734: CALL 68315 0 4
// end ;
5738: PPOPN 6
5740: END
// every 11 11$00 trigger IsOk ( ar_depot ) and ar_active_attack and IsInArea ( masha , masha_area ) and MC_GetProduceList ( 1 ) = 0 and not ar_attackers do var i , base , tmp , flags , _target , attackers , un ;
5741: LD_INT 1
5743: PPUSH
5744: CALL_OW 302
5748: PUSH
5749: LD_EXP 9
5753: AND
5754: PUSH
5755: LD_EXP 48
5759: PPUSH
5760: LD_INT 22
5762: PPUSH
5763: CALL_OW 308
5767: AND
5768: PUSH
5769: LD_INT 1
5771: PPUSH
5772: CALL 68478 0 1
5776: PUSH
5777: LD_INT 0
5779: EQUAL
5780: AND
5781: PUSH
5782: LD_EXP 10
5786: NOT
5787: AND
5788: IFFALSE 6263
5790: GO 5792
5792: DISABLE
5793: LD_INT 0
5795: PPUSH
5796: PPUSH
5797: PPUSH
5798: PPUSH
5799: PPUSH
5800: PPUSH
5801: PPUSH
// begin base := 1 ;
5802: LD_ADDR_VAR 0 2
5806: PUSH
5807: LD_INT 1
5809: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
5810: LD_ADDR_VAR 0 4
5814: PUSH
5815: LD_INT 0
5817: PUSH
5818: LD_INT 0
5820: PUSH
5821: LD_INT 0
5823: PUSH
5824: LD_INT 0
5826: PUSH
5827: LD_INT 0
5829: PUSH
5830: LD_INT 0
5832: PUSH
5833: LD_INT 0
5835: PUSH
5836: LD_INT 0
5838: PUSH
5839: LD_INT 1
5841: PUSH
5842: LD_INT 0
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: ST_TO_ADDR
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_hovercraft , engine_solar , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_solar , control_remote , ar_double_machine_gun ] ] ;
5857: LD_ADDR_VAR 0 3
5861: PUSH
5862: LD_INT 13
5864: PUSH
5865: LD_INT 1
5867: PUSH
5868: LD_INT 2
5870: PUSH
5871: LD_INT 28
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: PUSH
5880: LD_INT 13
5882: PUSH
5883: LD_INT 1
5885: PUSH
5886: LD_INT 2
5888: PUSH
5889: LD_INT 27
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 13
5900: PUSH
5901: LD_INT 1
5903: PUSH
5904: LD_INT 2
5906: PUSH
5907: LD_INT 25
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 11
5918: PUSH
5919: LD_INT 2
5921: PUSH
5922: LD_INT 2
5924: PUSH
5925: LD_INT 24
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: PUSH
5934: LD_INT 11
5936: PUSH
5937: LD_INT 2
5939: PUSH
5940: LD_INT 2
5942: PUSH
5943: LD_INT 24
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// MC_SetProduceList ( base , tmp ) ;
5959: LD_VAR 0 2
5963: PPUSH
5964: LD_VAR 0 3
5968: PPUSH
5969: CALL 68021 0 2
// repeat wait ( 0 0$1 ) ;
5973: LD_INT 35
5975: PPUSH
5976: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
5980: LD_VAR 0 2
5984: PPUSH
5985: CALL 68478 0 1
5989: PUSH
5990: LD_INT 0
5992: EQUAL
5993: IFFALSE 5973
// wait ( 0 0$20 ) ;
5995: LD_INT 700
5997: PPUSH
5998: CALL_OW 67
// _target := [ [ 119 , 9 ] ] ;
6002: LD_ADDR_VAR 0 5
6006: PUSH
6007: LD_INT 119
6009: PUSH
6010: LD_INT 9
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: EMPTY
6018: LIST
6019: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , ar_cargo_bay ] ) ) ;
6020: LD_ADDR_VAR 0 6
6024: PUSH
6025: LD_EXP 76
6029: PUSH
6030: LD_VAR 0 2
6034: ARRAY
6035: PUSH
6036: LD_EXP 79
6040: PUSH
6041: LD_VAR 0 2
6045: ARRAY
6046: PUSH
6047: LD_EXP 76
6051: PUSH
6052: LD_VAR 0 2
6056: ARRAY
6057: PPUSH
6058: LD_INT 34
6060: PUSH
6061: LD_INT 32
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PPUSH
6068: CALL_OW 72
6072: UNION
6073: DIFF
6074: ST_TO_ADDR
// if not attackers then
6075: LD_VAR 0 6
6079: NOT
6080: IFFALSE 6084
// exit ;
6082: GO 6263
// uc_side := 2 ;
6084: LD_ADDR_OWVAR 20
6088: PUSH
6089: LD_INT 2
6091: ST_TO_ADDR
// uc_nation := 2 ;
6092: LD_ADDR_OWVAR 21
6096: PUSH
6097: LD_INT 2
6099: ST_TO_ADDR
// InitHc ;
6100: CALL_OW 19
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6104: LD_ADDR_VAR 0 1
6108: PUSH
6109: DOUBLE
6110: LD_INT 1
6112: DEC
6113: ST_TO_ADDR
6114: LD_INT 4
6116: PUSH
6117: LD_INT 5
6119: PUSH
6120: LD_INT 6
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: LIST
6127: PUSH
6128: LD_OWVAR 67
6132: ARRAY
6133: PUSH
6134: FOR_TO
6135: IFFALSE 6212
// begin PrepareHuman ( false , [ class_apeman_soldier , class_apeman_kamikaze ] [ rand ( 1 , 2 ) ] , 8 ) ;
6137: LD_INT 0
6139: PPUSH
6140: LD_INT 15
6142: PUSH
6143: LD_INT 17
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 1
6152: PPUSH
6153: LD_INT 2
6155: PPUSH
6156: CALL_OW 12
6160: ARRAY
6161: PPUSH
6162: LD_INT 8
6164: PPUSH
6165: CALL_OW 380
// un := CreateHuman ;
6169: LD_ADDR_VAR 0 7
6173: PUSH
6174: CALL_OW 44
6178: ST_TO_ADDR
// PlaceUnitArea ( un , east_spawn , false ) ;
6179: LD_VAR 0 7
6183: PPUSH
6184: LD_INT 23
6186: PPUSH
6187: LD_INT 0
6189: PPUSH
6190: CALL_OW 49
// attackers := attackers union un ;
6194: LD_ADDR_VAR 0 6
6198: PUSH
6199: LD_VAR 0 6
6203: PUSH
6204: LD_VAR 0 7
6208: UNION
6209: ST_TO_ADDR
// end ;
6210: GO 6134
6212: POP
6213: POP
// repeat wait ( 0 0$1 ) ;
6214: LD_INT 35
6216: PPUSH
6217: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
6221: LD_VAR 0 6
6225: PPUSH
6226: LD_INT 60
6228: PUSH
6229: EMPTY
6230: LIST
6231: PPUSH
6232: CALL_OW 72
6236: NOT
6237: IFFALSE 6214
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
6239: LD_VAR 0 2
6243: PPUSH
6244: LD_VAR 0 6
6248: PPUSH
6249: LD_VAR 0 5
6253: PPUSH
6254: LD_VAR 0 4
6258: PPUSH
6259: CALL 68315 0 4
// end ; end_of_file
6263: PPOPN 7
6265: END
// export function PrepareAmericanAttack ; var i , tmp , veh , flags , _target ; begin
6266: LD_INT 0
6268: PPUSH
6269: PPUSH
6270: PPUSH
6271: PPUSH
6272: PPUSH
6273: PPUSH
// uc_side := 1 ;
6274: LD_ADDR_OWVAR 20
6278: PUSH
6279: LD_INT 1
6281: ST_TO_ADDR
// uc_nation := 1 ;
6282: LD_ADDR_OWVAR 21
6286: PUSH
6287: LD_INT 1
6289: ST_TO_ADDR
// InitHc ;
6290: CALL_OW 19
// InitVc ;
6294: CALL_OW 20
// tmp := [ ] ;
6298: LD_ADDR_VAR 0 3
6302: PUSH
6303: EMPTY
6304: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
6305: LD_ADDR_VAR 0 5
6309: PUSH
6310: LD_INT 0
6312: PUSH
6313: LD_INT 0
6315: PUSH
6316: LD_INT 0
6318: PUSH
6319: LD_INT 0
6321: PUSH
6322: LD_INT 0
6324: PUSH
6325: LD_INT 0
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: LD_INT 0
6333: PUSH
6334: LD_INT 1
6336: PUSH
6337: LD_INT 0
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: ST_TO_ADDR
// _target := [ [ 71 , 34 ] , [ 63 , 49 ] ] ;
6352: LD_ADDR_VAR 0 6
6356: PUSH
6357: LD_INT 71
6359: PUSH
6360: LD_INT 34
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: LD_INT 63
6369: PUSH
6370: LD_INT 49
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
6381: LD_ADDR_VAR 0 2
6385: PUSH
6386: DOUBLE
6387: LD_INT 1
6389: DEC
6390: ST_TO_ADDR
6391: LD_INT 5
6393: PUSH
6394: LD_INT 6
6396: PUSH
6397: LD_INT 6
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: PUSH
6405: LD_OWVAR 67
6409: ARRAY
6410: PUSH
6411: FOR_TO
6412: IFFALSE 6549
// begin PrepareVehicle ( [ us_medium_wheeled , us_heavy_tracked , us_morphling ] [ rand ( 1 , 3 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ us_laser , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 78 ) ;
6414: LD_INT 2
6416: PUSH
6417: LD_INT 4
6419: PUSH
6420: LD_INT 5
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: PUSH
6428: LD_INT 1
6430: PPUSH
6431: LD_INT 3
6433: PPUSH
6434: CALL_OW 12
6438: ARRAY
6439: PPUSH
6440: LD_INT 1
6442: PUSH
6443: LD_INT 3
6445: PUSH
6446: EMPTY
6447: LIST
6448: LIST
6449: PUSH
6450: LD_INT 1
6452: PPUSH
6453: LD_INT 2
6455: PPUSH
6456: CALL_OW 12
6460: ARRAY
6461: PPUSH
6462: LD_INT 3
6464: PPUSH
6465: LD_INT 9
6467: PUSH
6468: LD_INT 7
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 1
6477: PPUSH
6478: LD_INT 2
6480: PPUSH
6481: CALL_OW 12
6485: ARRAY
6486: PPUSH
6487: LD_INT 78
6489: PPUSH
6490: CALL 19567 0 5
// veh := CreateVehicle ;
6494: LD_ADDR_VAR 0 4
6498: PUSH
6499: CALL_OW 45
6503: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
6504: LD_VAR 0 4
6508: PPUSH
6509: LD_INT 2
6511: PPUSH
6512: CALL_OW 233
// PlaceUnitArea ( veh , north_spawn , false ) ;
6516: LD_VAR 0 4
6520: PPUSH
6521: LD_INT 17
6523: PPUSH
6524: LD_INT 0
6526: PPUSH
6527: CALL_OW 49
// tmp := tmp ^ veh ;
6531: LD_ADDR_VAR 0 3
6535: PUSH
6536: LD_VAR 0 3
6540: PUSH
6541: LD_VAR 0 4
6545: ADD
6546: ST_TO_ADDR
// end ;
6547: GO 6411
6549: POP
6550: POP
// if not tmp then
6551: LD_VAR 0 3
6555: NOT
6556: IFFALSE 6560
// exit ;
6558: GO 6603
// if not first_powell_attack then
6560: LD_EXP 11
6564: NOT
6565: IFFALSE 6575
// first_powell_attack := true ;
6567: LD_ADDR_EXP 11
6571: PUSH
6572: LD_INT 1
6574: ST_TO_ADDR
// Attack ( [ 0 , tmp , _target , flags ] ) ;
6575: LD_INT 0
6577: PUSH
6578: LD_VAR 0 3
6582: PUSH
6583: LD_VAR 0 6
6587: PUSH
6588: LD_VAR 0 5
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PPUSH
6599: CALL 47638 0 1
// end ; end_of_file
6603: LD_VAR 0 1
6607: RET
// export function Action ; var tmp , i , un ; begin
6608: LD_INT 0
6610: PPUSH
6611: PPUSH
6612: PPUSH
6613: PPUSH
// CenterNowOnXY ( 68 , 39 ) ;
6614: LD_INT 68
6616: PPUSH
6617: LD_INT 39
6619: PPUSH
6620: CALL_OW 86
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
6624: LD_ADDR_VAR 0 2
6628: PUSH
6629: LD_INT 22
6631: PUSH
6632: LD_INT 7
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PPUSH
6639: CALL_OW 69
6643: ST_TO_ADDR
// InGameOn ;
6644: CALL_OW 8
// ComMoveXY ( tmp , 71 , 49 ) ;
6648: LD_VAR 0 2
6652: PPUSH
6653: LD_INT 71
6655: PPUSH
6656: LD_INT 49
6658: PPUSH
6659: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6663: LD_INT 35
6665: PPUSH
6666: CALL_OW 67
// until SeeXY ( 7 , 71 , 51 ) ;
6670: LD_INT 7
6672: PPUSH
6673: LD_INT 71
6675: PPUSH
6676: LD_INT 51
6678: PPUSH
6679: CALL_OW 293
6683: IFFALSE 6663
// DialogueOn ;
6685: CALL_OW 6
// Say ( JMM , D1-JMM-1 ) ;
6689: LD_EXP 14
6693: PPUSH
6694: LD_STRING D1-JMM-1
6696: PPUSH
6697: CALL_OW 88
// if Joan then
6701: LD_EXP 29
6705: IFFALSE 6719
// Say ( Joan , D1-Joan-1 ) ;
6707: LD_EXP 29
6711: PPUSH
6712: LD_STRING D1-Joan-1
6714: PPUSH
6715: CALL_OW 88
// if Lisa then
6719: LD_EXP 16
6723: IFFALSE 6737
// Say ( Lisa , D1-Lisa-1 ) ;
6725: LD_EXP 16
6729: PPUSH
6730: LD_STRING D1-Lisa-1
6732: PPUSH
6733: CALL_OW 88
// if Joan or Lisa then
6737: LD_EXP 29
6741: PUSH
6742: LD_EXP 16
6746: OR
6747: IFFALSE 6761
// Say ( JMM , D1-JMM-2 ) ;
6749: LD_EXP 14
6753: PPUSH
6754: LD_STRING D1-JMM-2
6756: PPUSH
6757: CALL_OW 88
// DialogueOff ;
6761: CALL_OW 7
// InGameOff ;
6765: CALL_OW 9
// PlaceSeeing ( 71 , 50 , 7 , - 30 ) ;
6769: LD_INT 71
6771: PPUSH
6772: LD_INT 50
6774: PPUSH
6775: LD_INT 7
6777: PPUSH
6778: LD_INT 30
6780: NEG
6781: PPUSH
6782: CALL_OW 330
// RemoveSeeing ( 71 , 50 , 7 ) ;
6786: LD_INT 71
6788: PPUSH
6789: LD_INT 50
6791: PPUSH
6792: LD_INT 7
6794: PPUSH
6795: CALL_OW 331
// ChangeMissionObjectives ( M1 ) ;
6799: LD_STRING M1
6801: PPUSH
6802: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
6806: LD_INT 35
6808: PPUSH
6809: CALL_OW 67
// until freedom ;
6813: LD_EXP 3
6817: IFFALSE 6806
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
6819: LD_INT 350
6821: PPUSH
6822: LD_INT 700
6824: PPUSH
6825: CALL_OW 12
6829: PPUSH
6830: CALL_OW 67
// PrepareGossudarov ;
6834: CALL 1678 0 0
// repeat wait ( 0 0$1 ) ;
6838: LD_INT 35
6840: PPUSH
6841: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6845: LD_INT 22
6847: PUSH
6848: LD_INT 6
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PUSH
6855: LD_INT 3
6857: PUSH
6858: LD_INT 24
6860: PUSH
6861: LD_INT 1000
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 69
6880: IFFALSE 6838
// tmp := FilterAllUnits ( [ f_side , 6 ] ) ;
6882: LD_ADDR_VAR 0 2
6886: PUSH
6887: LD_INT 22
6889: PUSH
6890: LD_INT 6
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PPUSH
6897: CALL_OW 69
6901: ST_TO_ADDR
// for i in tmp do
6902: LD_ADDR_VAR 0 3
6906: PUSH
6907: LD_VAR 0 2
6911: PUSH
6912: FOR_IN
6913: IFFALSE 6929
// SetSide ( i , 7 ) ;
6915: LD_VAR 0 3
6919: PPUSH
6920: LD_INT 7
6922: PPUSH
6923: CALL_OW 235
6927: GO 6912
6929: POP
6930: POP
// DialogueOn ;
6931: CALL_OW 6
// ComTurnUnit ( [ JMM , Roth ] , Gossudarov ) ;
6935: LD_EXP 14
6939: PUSH
6940: LD_EXP 15
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PPUSH
6949: LD_EXP 31
6953: PPUSH
6954: CALL_OW 119
// CenterNowOnUnits ( Gossudarov ) ;
6958: LD_EXP 31
6962: PPUSH
6963: CALL_OW 87
// if not Roth then
6967: LD_EXP 15
6971: NOT
6972: IFFALSE 7036
// begin Say ( JMM , D2-JMM-1 ) ;
6974: LD_EXP 14
6978: PPUSH
6979: LD_STRING D2-JMM-1
6981: PPUSH
6982: CALL_OW 88
// Say ( JMM , D2-JMM-1b ) ;
6986: LD_EXP 14
6990: PPUSH
6991: LD_STRING D2-JMM-1b
6993: PPUSH
6994: CALL_OW 88
// Say ( Gossudarov , D2-Gos-1 ) ;
6998: LD_EXP 31
7002: PPUSH
7003: LD_STRING D2-Gos-1
7005: PPUSH
7006: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7010: LD_EXP 14
7014: PPUSH
7015: LD_STRING D2-JMM-2
7017: PPUSH
7018: CALL_OW 88
// Say ( Gossudarov , D2-Gos-2 ) ;
7022: LD_EXP 31
7026: PPUSH
7027: LD_STRING D2-Gos-2
7029: PPUSH
7030: CALL_OW 88
// end else
7034: GO 7132
// begin Say ( Roth , D2-Roth-2 ) ;
7036: LD_EXP 15
7040: PPUSH
7041: LD_STRING D2-Roth-2
7043: PPUSH
7044: CALL_OW 88
// Say ( JMM , D2-JMM-1a ) ;
7048: LD_EXP 14
7052: PPUSH
7053: LD_STRING D2-JMM-1a
7055: PPUSH
7056: CALL_OW 88
// Say ( Roth , D2-Roth-2a ) ;
7060: LD_EXP 15
7064: PPUSH
7065: LD_STRING D2-Roth-2a
7067: PPUSH
7068: CALL_OW 88
// Say ( Roth , D2-Roth-2b ) ;
7072: LD_EXP 15
7076: PPUSH
7077: LD_STRING D2-Roth-2b
7079: PPUSH
7080: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7084: LD_EXP 14
7088: PPUSH
7089: LD_STRING D2-JMM-3
7091: PPUSH
7092: CALL_OW 88
// Say ( Gossudarov , D2-Gos-3 ) ;
7096: LD_EXP 31
7100: PPUSH
7101: LD_STRING D2-Gos-3
7103: PPUSH
7104: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
7108: LD_EXP 14
7112: PPUSH
7113: LD_STRING D2-JMM-4
7115: PPUSH
7116: CALL_OW 88
// Say ( Gossudarov , D2-Gos-4 ) ;
7120: LD_EXP 31
7124: PPUSH
7125: LD_STRING D2-Gos-4
7127: PPUSH
7128: CALL_OW 88
// end ; Say ( JMM , D2-JMM-5 ) ;
7132: LD_EXP 14
7136: PPUSH
7137: LD_STRING D2-JMM-5
7139: PPUSH
7140: CALL_OW 88
// Say ( Gossudarov , D2-Gos-5 ) ;
7144: LD_EXP 31
7148: PPUSH
7149: LD_STRING D2-Gos-5
7151: PPUSH
7152: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
7156: LD_EXP 14
7160: PPUSH
7161: LD_STRING D2-JMM-6
7163: PPUSH
7164: CALL_OW 88
// DialogueOff ;
7168: CALL_OW 7
// wait ( 0 0$2 ) ;
7172: LD_INT 70
7174: PPUSH
7175: CALL_OW 67
// if Kirilenkova then
7179: LD_EXP 32
7183: IFFALSE 7197
// Say ( Kirilenkova , D3-Kir-1 ) ;
7185: LD_EXP 32
7189: PPUSH
7190: LD_STRING D3-Kir-1
7192: PPUSH
7193: CALL_OW 88
// gossudarov_arrive := true ;
7197: LD_ADDR_EXP 4
7201: PUSH
7202: LD_INT 1
7204: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7205: LD_INT 35
7207: PPUSH
7208: CALL_OW 67
// until ru_lab_builded ;
7212: LD_EXP 5
7216: IFFALSE 7205
// if Kirilenkova then
7218: LD_EXP 32
7222: IFFALSE 7238
// Say ( Kirilenkova , D3a-Kir-1 ) else
7224: LD_EXP 32
7228: PPUSH
7229: LD_STRING D3a-Kir-1
7231: PPUSH
7232: CALL_OW 88
7236: GO 7260
// begin un := SciRu ;
7238: LD_ADDR_VAR 0 4
7242: PUSH
7243: CALL 12026 0 0
7247: ST_TO_ADDR
// Say ( un , D3a-Sci1-1 ) ;
7248: LD_VAR 0 4
7252: PPUSH
7253: LD_STRING D3a-Sci1-1
7255: PPUSH
7256: CALL_OW 88
// end ; if Kirilenkova or un then
7260: LD_EXP 32
7264: PUSH
7265: LD_VAR 0 4
7269: OR
7270: IFFALSE 7284
// Say ( JMM , D3a-JMM-1 ) ;
7272: LD_EXP 14
7276: PPUSH
7277: LD_STRING D3a-JMM-1
7279: PPUSH
7280: CALL_OW 88
// end ;
7284: LD_VAR 0 1
7288: RET
// every 0 0$1 trigger gossudarov_arrive and FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) < 6 do
7289: LD_EXP 4
7293: PUSH
7294: LD_INT 22
7296: PUSH
7297: LD_INT 7
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: LD_INT 2
7306: PUSH
7307: LD_INT 25
7309: PUSH
7310: LD_INT 1
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 25
7319: PUSH
7320: LD_INT 2
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: LD_INT 25
7329: PUSH
7330: LD_INT 3
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 25
7339: PUSH
7340: LD_INT 4
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: LD_INT 25
7349: PUSH
7350: LD_INT 5
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 25
7359: PUSH
7360: LD_INT 8
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: LD_INT 25
7369: PUSH
7370: LD_INT 9
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PPUSH
7391: CALL_OW 69
7395: PUSH
7396: LD_INT 6
7398: LESS
7399: AND
7400: IFFALSE 7412
7402: GO 7404
7404: DISABLE
// YouLost ( TooMany ) ;
7405: LD_STRING TooMany
7407: PPUSH
7408: CALL_OW 104
7412: END
// every 0 0$40 trigger GetSide ( Gossudarov ) = 7 do var i , tmp , un ;
7413: LD_EXP 31
7417: PPUSH
7418: CALL_OW 255
7422: PUSH
7423: LD_INT 7
7425: EQUAL
7426: IFFALSE 7626
7428: GO 7430
7430: DISABLE
7431: LD_INT 0
7433: PPUSH
7434: PPUSH
7435: PPUSH
// begin uc_side := 3 ;
7436: LD_ADDR_OWVAR 20
7440: PUSH
7441: LD_INT 3
7443: ST_TO_ADDR
// uc_nation := 3 ;
7444: LD_ADDR_OWVAR 21
7448: PUSH
7449: LD_INT 3
7451: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_heavy_machine_gun , 100 ) ;
7452: LD_INT 21
7454: PPUSH
7455: LD_INT 3
7457: PPUSH
7458: LD_INT 3
7460: PPUSH
7461: LD_INT 42
7463: PPUSH
7464: LD_INT 100
7466: PPUSH
7467: CALL 19567 0 5
// un := CreateVehicle ;
7471: LD_ADDR_VAR 0 3
7475: PUSH
7476: CALL_OW 45
7480: ST_TO_ADDR
// PlaceUnitArea ( un , south_west_spawn , false ) ;
7481: LD_VAR 0 3
7485: PPUSH
7486: LD_INT 15
7488: PPUSH
7489: LD_INT 0
7491: PPUSH
7492: CALL_OW 49
// ComMoveXY ( un , 67 , 45 ) ;
7496: LD_VAR 0 3
7500: PPUSH
7501: LD_INT 67
7503: PPUSH
7504: LD_INT 45
7506: PPUSH
7507: CALL_OW 111
// AddComWait ( un , 0 0$2 ) ;
7511: LD_VAR 0 3
7515: PPUSH
7516: LD_INT 70
7518: PPUSH
7519: CALL_OW 202
// AddComMoveXY ( un , 69 , 18 ) ;
7523: LD_VAR 0 3
7527: PPUSH
7528: LD_INT 69
7530: PPUSH
7531: LD_INT 18
7533: PPUSH
7534: CALL_OW 171
// AddComMoveXY ( un , 60 , 2 ) ;
7538: LD_VAR 0 3
7542: PPUSH
7543: LD_INT 60
7545: PPUSH
7546: LD_INT 2
7548: PPUSH
7549: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7553: LD_INT 35
7555: PPUSH
7556: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , north_spawn ) ;
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 302
7569: NOT
7570: PUSH
7571: LD_VAR 0 3
7575: PPUSH
7576: LD_INT 17
7578: PPUSH
7579: CALL_OW 308
7583: OR
7584: IFFALSE 7553
// if IsInArea ( un , north_spawn ) or IsAt ( un , 60 , 2 ) then
7586: LD_VAR 0 3
7590: PPUSH
7591: LD_INT 17
7593: PPUSH
7594: CALL_OW 308
7598: PUSH
7599: LD_VAR 0 3
7603: PPUSH
7604: LD_INT 60
7606: PPUSH
7607: LD_INT 2
7609: PPUSH
7610: CALL_OW 307
7614: OR
7615: IFFALSE 7626
// RemoveUnit ( un ) ;
7617: LD_VAR 0 3
7621: PPUSH
7622: CALL_OW 64
// end ;
7626: PPOPN 3
7628: END
// every 0 0$2 do var i , un , tmp ;
7629: GO 7631
7631: DISABLE
7632: LD_INT 0
7634: PPUSH
7635: PPUSH
7636: PPUSH
// begin repeat wait ( 0 0$2 ) ;
7637: LD_INT 70
7639: PPUSH
7640: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 3 ] ] ) ;
7644: LD_ADDR_VAR 0 3
7648: PUSH
7649: LD_INT 22
7651: PUSH
7652: LD_INT 7
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: LD_INT 101
7661: PUSH
7662: LD_INT 3
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 69
7677: ST_TO_ADDR
// until tmp ;
7678: LD_VAR 0 3
7682: IFFALSE 7637
// un := NearestUnitToUnit ( tmp , JMM ) ;
7684: LD_ADDR_VAR 0 2
7688: PUSH
7689: LD_VAR 0 3
7693: PPUSH
7694: LD_EXP 14
7698: PPUSH
7699: CALL_OW 74
7703: ST_TO_ADDR
// player_spotted := true ;
7704: LD_ADDR_EXP 6
7708: PUSH
7709: LD_INT 1
7711: ST_TO_ADDR
// tmp := SciRu ;
7712: LD_ADDR_VAR 0 3
7716: PUSH
7717: CALL 12026 0 0
7721: ST_TO_ADDR
// DialogueOn ;
7722: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 7 , - 8 ) ;
7726: LD_VAR 0 2
7730: PPUSH
7731: CALL_OW 250
7735: PPUSH
7736: LD_VAR 0 2
7740: PPUSH
7741: CALL_OW 251
7745: PPUSH
7746: LD_INT 7
7748: PPUSH
7749: LD_INT 8
7751: NEG
7752: PPUSH
7753: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7757: LD_VAR 0 2
7761: PPUSH
7762: CALL_OW 87
// if tmp then
7766: LD_VAR 0 3
7770: IFFALSE 7784
// Say ( tmp , D4-RSci1-1 ) ;
7772: LD_VAR 0 3
7776: PPUSH
7777: LD_STRING D4-RSci1-1
7779: PPUSH
7780: CALL_OW 88
// if Gossudarov then
7784: LD_EXP 31
7788: IFFALSE 7814
// begin Say ( Gossudarov , D4-Gos-1 ) ;
7790: LD_EXP 31
7794: PPUSH
7795: LD_STRING D4-Gos-1
7797: PPUSH
7798: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7802: LD_EXP 14
7806: PPUSH
7807: LD_STRING D4-JMM-1
7809: PPUSH
7810: CALL_OW 88
// end ; RemoveSeeing ( GetX ( un ) , GetY ( un ) , 7 ) ;
7814: LD_VAR 0 2
7818: PPUSH
7819: CALL_OW 250
7823: PPUSH
7824: LD_VAR 0 2
7828: PPUSH
7829: CALL_OW 251
7833: PPUSH
7834: LD_INT 7
7836: PPUSH
7837: CALL_OW 331
// DialogueOff ;
7841: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
7845: LD_STRING M5
7847: PPUSH
7848: CALL_OW 337
// end ;
7852: PPOPN 3
7854: END
// every 0 0$30 + 2 2$30 trigger player_spotted do
7855: LD_EXP 6
7859: IFFALSE 8318
7861: GO 7863
7863: DISABLE
// begin PrepareBelkov ;
7864: CALL 1928 0 0
// ComMoveXY ( Belkov , 118 , 106 ) ;
7868: LD_EXP 46
7872: PPUSH
7873: LD_INT 118
7875: PPUSH
7876: LD_INT 106
7878: PPUSH
7879: CALL_OW 111
// AddComHold ( Belkov ) ;
7883: LD_EXP 46
7887: PPUSH
7888: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
7892: LD_INT 35
7894: PPUSH
7895: CALL_OW 67
// until IsAt ( Belkov , 118 , 106 ) ;
7899: LD_EXP 46
7903: PPUSH
7904: LD_INT 118
7906: PPUSH
7907: LD_INT 106
7909: PPUSH
7910: CALL_OW 307
7914: IFFALSE 7892
// ChangeSideFog ( 4 , 7 ) ;
7916: LD_INT 4
7918: PPUSH
7919: LD_INT 7
7921: PPUSH
7922: CALL_OW 343
// if IsOk ( Belkov ) then
7926: LD_EXP 46
7930: PPUSH
7931: CALL_OW 302
7935: IFFALSE 8019
// begin InGameOn ;
7937: CALL_OW 8
// DialogueOn ;
7941: CALL_OW 6
// SayRadio ( Belkov , D5-Bel-1 ) ;
7945: LD_EXP 46
7949: PPUSH
7950: LD_STRING D5-Bel-1
7952: PPUSH
7953: CALL_OW 94
// if Gossudarov then
7957: LD_EXP 31
7961: IFFALSE 8011
// begin Say ( Gossudarov , D5-Gos-1 ) ;
7963: LD_EXP 31
7967: PPUSH
7968: LD_STRING D5-Gos-1
7970: PPUSH
7971: CALL_OW 88
// Say ( JMM , D5-JMM-1 ) ;
7975: LD_EXP 14
7979: PPUSH
7980: LD_STRING D5-JMM-1
7982: PPUSH
7983: CALL_OW 88
// Say ( Gossudarov , D5-Gos-2 ) ;
7987: LD_EXP 31
7991: PPUSH
7992: LD_STRING D5-Gos-2
7994: PPUSH
7995: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
7999: LD_EXP 14
8003: PPUSH
8004: LD_STRING D5-JMM-2
8006: PPUSH
8007: CALL_OW 88
// end ; DialogueOff ;
8011: CALL_OW 7
// InGameOff ;
8015: CALL_OW 9
// end ; case Query ( QSaveBelkov ) of 1 :
8019: LD_STRING QSaveBelkov
8021: PPUSH
8022: CALL_OW 97
8026: PUSH
8027: LD_INT 1
8029: DOUBLE
8030: EQUAL
8031: IFTRUE 8035
8033: GO 8085
8035: POP
// begin DialogueOn ;
8036: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
8040: LD_EXP 14
8044: PPUSH
8045: LD_STRING D5a-JMM-1
8047: PPUSH
8048: CALL_OW 88
// SayRadio ( Belkov , D5a-Bel-1 ) ;
8052: LD_EXP 46
8056: PPUSH
8057: LD_STRING D5a-Bel-1
8059: PPUSH
8060: CALL_OW 94
// DialogueOff ;
8064: CALL_OW 7
// ComMoveXY ( Belkov , 83 , 49 ) ;
8068: LD_EXP 46
8072: PPUSH
8073: LD_INT 83
8075: PPUSH
8076: LD_INT 49
8078: PPUSH
8079: CALL_OW 111
// end ; 2 :
8083: GO 8145
8085: LD_INT 2
8087: DOUBLE
8088: EQUAL
8089: IFTRUE 8093
8091: GO 8144
8093: POP
// begin Say ( JMM , D5a-JMM-2 ) ;
8094: LD_EXP 14
8098: PPUSH
8099: LD_STRING D5a-JMM-2
8101: PPUSH
8102: CALL_OW 88
// ComWait ( Belkov , 0 0$10 ) ;
8106: LD_EXP 46
8110: PPUSH
8111: LD_INT 350
8113: PPUSH
8114: CALL_OW 142
// AddComMoveXY ( Belkov , 107 , 109 ) ;
8118: LD_EXP 46
8122: PPUSH
8123: LD_INT 107
8125: PPUSH
8126: LD_INT 109
8128: PPUSH
8129: CALL_OW 171
// AddComHold ( Belkov ) ;
8133: LD_EXP 46
8137: PPUSH
8138: CALL_OW 200
// end ; end ;
8142: GO 8145
8144: POP
// repeat wait ( 0 0$1 ) ;
8145: LD_INT 35
8147: PPUSH
8148: CALL_OW 67
// until ( IsDead ( Belkov ) and GetSide ( Belkov ) = 4 ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Belkov ) , Belkov ) < 10 ;
8152: LD_EXP 46
8156: PPUSH
8157: CALL_OW 301
8161: PUSH
8162: LD_EXP 46
8166: PPUSH
8167: CALL_OW 255
8171: PUSH
8172: LD_INT 4
8174: EQUAL
8175: AND
8176: PUSH
8177: LD_INT 22
8179: PUSH
8180: LD_INT 7
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PPUSH
8187: CALL_OW 69
8191: PPUSH
8192: LD_EXP 46
8196: PPUSH
8197: CALL_OW 74
8201: PPUSH
8202: LD_EXP 46
8206: PPUSH
8207: CALL_OW 296
8211: PUSH
8212: LD_INT 10
8214: LESS
8215: OR
8216: IFFALSE 8145
// if IsDead ( Belkov ) then
8218: LD_EXP 46
8222: PPUSH
8223: CALL_OW 301
8227: IFFALSE 8252
// begin CenterNowOnUnits ( Belkov ) ;
8229: LD_EXP 46
8233: PPUSH
8234: CALL_OW 87
// Say ( JMM , D5a-JMM-2a ) ;
8238: LD_EXP 14
8242: PPUSH
8243: LD_STRING D5a-JMM-2a
8245: PPUSH
8246: CALL_OW 88
// exit ;
8250: GO 8318
// end ; if See ( 7 , Belkov ) then
8252: LD_INT 7
8254: PPUSH
8255: LD_EXP 46
8259: PPUSH
8260: CALL_OW 292
8264: IFFALSE 8278
// SetSide ( Belkov , 7 ) ;
8266: LD_EXP 46
8270: PPUSH
8271: LD_INT 7
8273: PPUSH
8274: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
8278: LD_INT 35
8280: PPUSH
8281: CALL_OW 67
// until GetDistUnitXY ( Belkov , 66 , 45 ) < 30 ;
8285: LD_EXP 46
8289: PPUSH
8290: LD_INT 66
8292: PPUSH
8293: LD_INT 45
8295: PPUSH
8296: CALL_OW 297
8300: PUSH
8301: LD_INT 30
8303: LESS
8304: IFFALSE 8278
// Say ( Belkov , D6-Bel-1 ) ;
8306: LD_EXP 46
8310: PPUSH
8311: LD_STRING D6-Bel-1
8313: PPUSH
8314: CALL_OW 88
// end ;
8318: END
// every 0 0$1 trigger IsOk ( Belkov ) and UnitShoot ( Belkov ) in FilterAllUnits ( [ f_or , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ) do
8319: LD_EXP 46
8323: PPUSH
8324: CALL_OW 302
8328: PUSH
8329: LD_EXP 46
8333: PPUSH
8334: CALL_OW 504
8338: PUSH
8339: LD_INT 2
8341: PUSH
8342: LD_INT 34
8344: PUSH
8345: LD_INT 47
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PUSH
8352: LD_INT 34
8354: PUSH
8355: LD_INT 45
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: PPUSH
8367: CALL_OW 69
8371: IN
8372: AND
8373: IFFALSE 8390
8375: GO 8377
8377: DISABLE
// Say ( Belkov , D7-Bel-1 ) ;
8378: LD_EXP 46
8382: PPUSH
8383: LD_STRING D7-Bel-1
8385: PPUSH
8386: CALL_OW 88
8390: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 2 ] ] ) and not ar_base_spotted and not IsPlaced ( Burlak ) do var tmp ;
8391: LD_INT 22
8393: PUSH
8394: LD_INT 7
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PUSH
8401: LD_INT 101
8403: PUSH
8404: LD_INT 2
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PPUSH
8415: CALL_OW 69
8419: PUSH
8420: LD_EXP 8
8424: NOT
8425: AND
8426: PUSH
8427: LD_EXP 45
8431: PPUSH
8432: CALL_OW 305
8436: NOT
8437: AND
8438: IFFALSE 8908
8440: GO 8442
8442: DISABLE
8443: LD_INT 0
8445: PPUSH
// begin ar_base_spotted := true ;
8446: LD_ADDR_EXP 8
8450: PUSH
8451: LD_INT 1
8453: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) ;
8454: LD_ADDR_VAR 0 1
8458: PUSH
8459: LD_INT 22
8461: PUSH
8462: LD_INT 2
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 21
8471: PUSH
8472: LD_INT 3
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: PPUSH
8483: CALL_OW 69
8487: ST_TO_ADDR
// tmp := NearestUnitToUnit ( tmp , JMM ) ;
8488: LD_ADDR_VAR 0 1
8492: PUSH
8493: LD_VAR 0 1
8497: PPUSH
8498: LD_EXP 14
8502: PPUSH
8503: CALL_OW 74
8507: ST_TO_ADDR
// RevealFogArea ( 7 , area_base_arabian ) ;
8508: LD_INT 7
8510: PPUSH
8511: LD_INT 3
8513: PPUSH
8514: CALL_OW 332
// DialogueOn ;
8518: CALL_OW 6
// CenterNowOnXY ( GetX ( tmp ) , GetY ( tmp ) ) ;
8522: LD_VAR 0 1
8526: PPUSH
8527: CALL_OW 250
8531: PPUSH
8532: LD_VAR 0 1
8536: PPUSH
8537: CALL_OW 251
8541: PPUSH
8542: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Frank , Roth , Cornel , Denis , Gladstone ] ;
8546: LD_ADDR_VAR 0 1
8550: PUSH
8551: LD_INT 22
8553: PUSH
8554: LD_INT 7
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 23
8563: PUSH
8564: LD_INT 1
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PUSH
8571: LD_INT 26
8573: PUSH
8574: LD_INT 1
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: LIST
8585: PPUSH
8586: CALL_OW 69
8590: PUSH
8591: LD_EXP 14
8595: PUSH
8596: LD_EXP 18
8600: PUSH
8601: LD_EXP 19
8605: PUSH
8606: LD_EXP 26
8610: PUSH
8611: LD_EXP 15
8615: PUSH
8616: LD_EXP 24
8620: PUSH
8621: LD_EXP 20
8625: PUSH
8626: LD_EXP 22
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: DIFF
8641: ST_TO_ADDR
// if not tmp then
8642: LD_VAR 0 1
8646: NOT
8647: IFFALSE 8721
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_female ] ] ) diff [ Joan , Lisa , Kikuchi , Simms ] ;
8649: LD_ADDR_VAR 0 1
8653: PUSH
8654: LD_INT 22
8656: PUSH
8657: LD_INT 7
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 23
8666: PUSH
8667: LD_INT 1
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 26
8676: PUSH
8677: LD_INT 2
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: LIST
8688: PPUSH
8689: CALL_OW 69
8693: PUSH
8694: LD_EXP 29
8698: PUSH
8699: LD_EXP 16
8703: PUSH
8704: LD_EXP 27
8708: PUSH
8709: LD_EXP 28
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: DIFF
8720: ST_TO_ADDR
// if tmp then
8721: LD_VAR 0 1
8725: IFFALSE 8796
// case GetSex ( tmp [ 1 ] ) of sex_male :
8727: LD_VAR 0 1
8731: PUSH
8732: LD_INT 1
8734: ARRAY
8735: PPUSH
8736: CALL_OW 258
8740: PUSH
8741: LD_INT 1
8743: DOUBLE
8744: EQUAL
8745: IFTRUE 8749
8747: GO 8768
8749: POP
// Say ( tmp [ 1 ] , D9-Sol1-1 ) ; sex_female :
8750: LD_VAR 0 1
8754: PUSH
8755: LD_INT 1
8757: ARRAY
8758: PPUSH
8759: LD_STRING D9-Sol1-1
8761: PPUSH
8762: CALL_OW 88
8766: GO 8796
8768: LD_INT 2
8770: DOUBLE
8771: EQUAL
8772: IFTRUE 8776
8774: GO 8795
8776: POP
// Say ( tmp [ 1 ] , D9-FSol1-1 ) ; end ;
8777: LD_VAR 0 1
8781: PUSH
8782: LD_INT 1
8784: ARRAY
8785: PPUSH
8786: LD_STRING D9-FSol1-1
8788: PPUSH
8789: CALL_OW 88
8793: GO 8796
8795: POP
// if Frank then
8796: LD_EXP 26
8800: IFFALSE 8904
// begin PlaceSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 , 8 ) ;
8802: LD_EXP 55
8806: PPUSH
8807: CALL_OW 250
8811: PPUSH
8812: LD_EXP 55
8816: PPUSH
8817: CALL_OW 251
8821: PPUSH
8822: LD_INT 7
8824: PPUSH
8825: LD_INT 8
8827: PPUSH
8828: CALL_OW 330
// CenterNowOnUnits ( mastodont ) ;
8832: LD_EXP 55
8836: PPUSH
8837: CALL_OW 87
// Say ( Frank , D9-Frank-1 ) ;
8841: LD_EXP 26
8845: PPUSH
8846: LD_STRING D9-Frank-1
8848: PPUSH
8849: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
8853: LD_EXP 14
8857: PPUSH
8858: LD_STRING D9-JMM-1
8860: PPUSH
8861: CALL_OW 88
// Say ( Frank , D9-Frank-2 ) ;
8865: LD_EXP 26
8869: PPUSH
8870: LD_STRING D9-Frank-2
8872: PPUSH
8873: CALL_OW 88
// RemoveSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 ) ;
8877: LD_EXP 55
8881: PPUSH
8882: CALL_OW 250
8886: PPUSH
8887: LD_EXP 55
8891: PPUSH
8892: CALL_OW 251
8896: PPUSH
8897: LD_INT 7
8899: PPUSH
8900: CALL_OW 331
// end ; DialogueOff ;
8904: CALL_OW 7
// end ;
8908: PPOPN 1
8910: END
// every 0 0$20 trigger first_attack do var i , selected_option ;
8911: LD_EXP 7
8915: IFFALSE 9942
8917: GO 8919
8919: DISABLE
8920: LD_INT 0
8922: PPUSH
8923: PPUSH
// begin selected_option := 1 ;
8924: LD_ADDR_VAR 0 2
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8932: LD_INT 10500
8934: PPUSH
8935: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8939: LD_INT 35
8941: PPUSH
8942: CALL_OW 67
// until not ru_attackers ;
8946: LD_EXP 51
8950: NOT
8951: IFFALSE 8939
// PrepareBurlak ;
8953: CALL 2040 0 0
// repeat wait ( 0 0$2 ) ;
8957: LD_INT 70
8959: PPUSH
8960: CALL_OW 67
// until not HasTask ( Burlak ) ;
8964: LD_EXP 45
8968: PPUSH
8969: CALL_OW 314
8973: NOT
8974: IFFALSE 8957
// InGameOn ;
8976: CALL_OW 8
// DialogueOn ;
8980: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
8984: LD_EXP 48
8988: PPUSH
8989: CALL_OW 87
// SayRadio ( Burlak , D10-Bur-1 ) ;
8993: LD_EXP 45
8997: PPUSH
8998: LD_STRING D10-Bur-1
9000: PPUSH
9001: CALL_OW 94
// if Belkov and GetSide ( Belkov ) = 7 then
9005: LD_EXP 46
9009: PUSH
9010: LD_EXP 46
9014: PPUSH
9015: CALL_OW 255
9019: PUSH
9020: LD_INT 7
9022: EQUAL
9023: AND
9024: IFFALSE 9038
// Say ( Belkov , D10-Bel-1 ) ;
9026: LD_EXP 46
9030: PPUSH
9031: LD_STRING D10-Bel-1
9033: PPUSH
9034: CALL_OW 88
// if Gossudarov then
9038: LD_EXP 31
9042: IFFALSE 9056
// Say ( Gossudarov , D10-Gos-1 ) ;
9044: LD_EXP 31
9048: PPUSH
9049: LD_STRING D10-Gos-1
9051: PPUSH
9052: CALL_OW 88
// if Kirilenkova then
9056: LD_EXP 32
9060: IFFALSE 9074
// Say ( Kirilenkova , D10-Kir-1 ) ;
9062: LD_EXP 32
9066: PPUSH
9067: LD_STRING D10-Kir-1
9069: PPUSH
9070: CALL_OW 88
// Say ( SolRu , D10-RSol1-1 ) ;
9074: CALL 12155 0 0
9078: PPUSH
9079: LD_STRING D10-RSol1-1
9081: PPUSH
9082: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-2 ) ;
9086: LD_EXP 45
9090: PPUSH
9091: LD_STRING D10-Bur-2
9093: PPUSH
9094: CALL_OW 94
// Say ( JMM , D10-JMM-2 ) ;
9098: LD_EXP 14
9102: PPUSH
9103: LD_STRING D10-JMM-2
9105: PPUSH
9106: CALL_OW 88
// if Kirilenkova then
9110: LD_EXP 32
9114: IFFALSE 9130
// Say ( Kirilenkova , D10-Kir-2 ) else
9116: LD_EXP 32
9120: PPUSH
9121: LD_STRING D10-Kir-2
9123: PPUSH
9124: CALL_OW 88
9128: GO 9142
// Say ( SolRu , D10-RSol1-2 ) ;
9130: CALL 12155 0 0
9134: PPUSH
9135: LD_STRING D10-RSol1-2
9137: PPUSH
9138: CALL_OW 88
// Say ( JMM , D10-JMM-3 ) ;
9142: LD_EXP 14
9146: PPUSH
9147: LD_STRING D10-JMM-3
9149: PPUSH
9150: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-3 ) ;
9154: LD_EXP 45
9158: PPUSH
9159: LD_STRING D10-Bur-3
9161: PPUSH
9162: CALL_OW 94
// Say ( JMM , D10-JMM-4 ) ;
9166: LD_EXP 14
9170: PPUSH
9171: LD_STRING D10-JMM-4
9173: PPUSH
9174: CALL_OW 88
// DialogueOff ;
9178: CALL_OW 7
// InGameOff ;
9182: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
9186: LD_STRING M2
9188: PPUSH
9189: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
9193: LD_INT 35
9195: PPUSH
9196: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , Burlak , 8 ] ] ) ;
9200: LD_INT 22
9202: PUSH
9203: LD_INT 7
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 91
9212: PUSH
9213: LD_EXP 45
9217: PUSH
9218: LD_INT 8
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: LIST
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PPUSH
9230: CALL_OW 69
9234: IFFALSE 9193
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9236: LD_ADDR_VAR 0 1
9240: PUSH
9241: LD_INT 22
9243: PUSH
9244: LD_INT 4
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PPUSH
9251: CALL_OW 69
9255: PUSH
9256: FOR_IN
9257: IFFALSE 9273
// SetSide ( i , 7 ) ;
9259: LD_VAR 0 1
9263: PPUSH
9264: LD_INT 7
9266: PPUSH
9267: CALL_OW 235
9271: GO 9256
9273: POP
9274: POP
// ChangeMissionObjectives ( M3 ) ;
9275: LD_STRING M3
9277: PPUSH
9278: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
9282: LD_INT 35
9284: PPUSH
9285: CALL_OW 67
// until GetDistUnits ( JMM , Burlak ) < 8 ;
9289: LD_EXP 14
9293: PPUSH
9294: LD_EXP 45
9298: PPUSH
9299: CALL_OW 296
9303: PUSH
9304: LD_INT 8
9306: LESS
9307: IFFALSE 9282
// ComTurnUnit ( JMM , Burlak ) ;
9309: LD_EXP 14
9313: PPUSH
9314: LD_EXP 45
9318: PPUSH
9319: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
9323: LD_EXP 45
9327: PPUSH
9328: LD_EXP 14
9332: PPUSH
9333: CALL_OW 119
// wait ( 0 0$0.3 ) ;
9337: LD_INT 10
9339: PPUSH
9340: CALL_OW 67
// DialogueOn ;
9344: CALL_OW 6
// Say ( JMM , D11-JMM-1 ) ;
9348: LD_EXP 14
9352: PPUSH
9353: LD_STRING D11-JMM-1
9355: PPUSH
9356: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
9360: LD_EXP 45
9364: PPUSH
9365: LD_STRING D11-Bur-1
9367: PPUSH
9368: CALL_OW 88
// Say ( JMM , D11-JMM-2 ) ;
9372: LD_EXP 14
9376: PPUSH
9377: LD_STRING D11-JMM-2
9379: PPUSH
9380: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
9384: LD_EXP 45
9388: PPUSH
9389: LD_STRING D11-Bur-2
9391: PPUSH
9392: CALL_OW 88
// Say ( JMM , D11-JMM-3 ) ;
9396: LD_EXP 14
9400: PPUSH
9401: LD_STRING D11-JMM-3
9403: PPUSH
9404: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
9408: LD_EXP 45
9412: PPUSH
9413: LD_STRING D11-Bur-3
9415: PPUSH
9416: CALL_OW 88
// Say ( JMM , D11-JMM-4 ) ;
9420: LD_EXP 14
9424: PPUSH
9425: LD_STRING D11-JMM-4
9427: PPUSH
9428: CALL_OW 88
// if ar_base_spotted then
9432: LD_EXP 8
9436: IFFALSE 9452
// Say ( Burlak , D12-Bur-1 ) else
9438: LD_EXP 45
9442: PPUSH
9443: LD_STRING D12-Bur-1
9445: PPUSH
9446: CALL_OW 88
9450: GO 9491
// begin RevealFogArea ( 7 , area_base_arabian ) ;
9452: LD_INT 7
9454: PPUSH
9455: LD_INT 3
9457: PPUSH
9458: CALL_OW 332
// CenterNowOnXY ( 127 , 45 ) ;
9462: LD_INT 127
9464: PPUSH
9465: LD_INT 45
9467: PPUSH
9468: CALL_OW 86
// Say ( Burlak , D12-Bur-1a ) ;
9472: LD_EXP 45
9476: PPUSH
9477: LD_STRING D12-Bur-1a
9479: PPUSH
9480: CALL_OW 88
// dwait ( 0 0$2 ) ;
9484: LD_INT 70
9486: PPUSH
9487: CALL_OW 68
// end ; Say ( Burlak , D12-Bur-1b ) ;
9491: LD_EXP 45
9495: PPUSH
9496: LD_STRING D12-Bur-1b
9498: PPUSH
9499: CALL_OW 88
// Say ( JMM , D12-JMM-1 ) ;
9503: LD_EXP 14
9507: PPUSH
9508: LD_STRING D12-JMM-1
9510: PPUSH
9511: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
9515: LD_EXP 45
9519: PPUSH
9520: LD_STRING D12-Bur-2
9522: PPUSH
9523: CALL_OW 88
// if Roth then
9527: LD_EXP 15
9531: IFFALSE 9547
// Say ( Roth , D12-Roth-2 ) else
9533: LD_EXP 15
9537: PPUSH
9538: LD_STRING D12-Roth-2
9540: PPUSH
9541: CALL_OW 88
9545: GO 9559
// Say ( SciRu , D12-RSci1-2 ) ;
9547: CALL 12026 0 0
9551: PPUSH
9552: LD_STRING D12-RSci1-2
9554: PPUSH
9555: CALL_OW 88
// Say ( JMM , D12-JMM-2 ) ;
9559: LD_EXP 14
9563: PPUSH
9564: LD_STRING D12-JMM-2
9566: PPUSH
9567: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
9571: LD_EXP 45
9575: PPUSH
9576: LD_STRING D12-Bur-3
9578: PPUSH
9579: CALL_OW 88
// Say ( JMM , D12-JMM-3 ) ;
9583: LD_EXP 14
9587: PPUSH
9588: LD_STRING D12-JMM-3
9590: PPUSH
9591: CALL_OW 88
// Say ( Burlak , D12-Bur-4 ) ;
9595: LD_EXP 45
9599: PPUSH
9600: LD_STRING D12-Bur-4
9602: PPUSH
9603: CALL_OW 88
// case Query ( QBase ) of 1 :
9607: LD_STRING QBase
9609: PPUSH
9610: CALL_OW 97
9614: PUSH
9615: LD_INT 1
9617: DOUBLE
9618: EQUAL
9619: IFTRUE 9623
9621: GO 9741
9623: POP
// begin Say ( JMM , D13a-JMM-1 ) ;
9624: LD_EXP 14
9628: PPUSH
9629: LD_STRING D13a-JMM-1
9631: PPUSH
9632: CALL_OW 88
// Say ( Burlak , D13a-Bur-1 ) ;
9636: LD_EXP 45
9640: PPUSH
9641: LD_STRING D13a-Bur-1
9643: PPUSH
9644: CALL_OW 88
// if Roth then
9648: LD_EXP 15
9652: IFFALSE 9668
// Say ( Roth , D13a-Roth-1 ) else
9654: LD_EXP 15
9658: PPUSH
9659: LD_STRING D13a-Roth-1
9661: PPUSH
9662: CALL_OW 88
9666: GO 9680
// Say ( SciRu , D13a-RSci1-1 ) ;
9668: CALL 12026 0 0
9672: PPUSH
9673: LD_STRING D13a-RSci1-1
9675: PPUSH
9676: CALL_OW 88
// Say ( JMM , D13a-JMM-2 ) ;
9680: LD_EXP 14
9684: PPUSH
9685: LD_STRING D13a-JMM-2
9687: PPUSH
9688: CALL_OW 88
// case Query ( QBaseAgain ) of 1 :
9692: LD_STRING QBaseAgain
9694: PPUSH
9695: CALL_OW 97
9699: PUSH
9700: LD_INT 1
9702: DOUBLE
9703: EQUAL
9704: IFTRUE 9708
9706: GO 9719
9708: POP
// selected_option := 2 ; 2 :
9709: LD_ADDR_VAR 0 2
9713: PUSH
9714: LD_INT 2
9716: ST_TO_ADDR
9717: GO 9739
9719: LD_INT 2
9721: DOUBLE
9722: EQUAL
9723: IFTRUE 9727
9725: GO 9738
9727: POP
// selected_option := 3 ; end ;
9728: LD_ADDR_VAR 0 2
9732: PUSH
9733: LD_INT 3
9735: ST_TO_ADDR
9736: GO 9739
9738: POP
// end ; 2 :
9739: GO 9780
9741: LD_INT 2
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9760
9749: POP
// selected_option := 2 ; 3 :
9750: LD_ADDR_VAR 0 2
9754: PUSH
9755: LD_INT 2
9757: ST_TO_ADDR
9758: GO 9780
9760: LD_INT 3
9762: DOUBLE
9763: EQUAL
9764: IFTRUE 9768
9766: GO 9779
9768: POP
// selected_option := 3 ; end ;
9769: LD_ADDR_VAR 0 2
9773: PUSH
9774: LD_INT 3
9776: ST_TO_ADDR
9777: GO 9780
9779: POP
// if selected_option = 2 then
9780: LD_VAR 0 2
9784: PUSH
9785: LD_INT 2
9787: EQUAL
9788: IFFALSE 9882
// begin Say ( JMM , D13b-JMM-1 ) ;
9790: LD_EXP 14
9794: PPUSH
9795: LD_STRING D13b-JMM-1
9797: PPUSH
9798: CALL_OW 88
// Say ( Burlak , D13b-Bur-1 ) ;
9802: LD_EXP 45
9806: PPUSH
9807: LD_STRING D13b-Bur-1
9809: PPUSH
9810: CALL_OW 88
// Say ( JMM , D13b-JMM-2 ) ;
9814: LD_EXP 14
9818: PPUSH
9819: LD_STRING D13b-JMM-2
9821: PPUSH
9822: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-2 ) ;
9826: LD_EXP 54
9830: PPUSH
9831: LD_STRING D13b-Abd-2
9833: PPUSH
9834: CALL_OW 94
// Say ( JMM , D13b-JMM-3 ) ;
9838: LD_EXP 14
9842: PPUSH
9843: LD_STRING D13b-JMM-3
9845: PPUSH
9846: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-3 ) ;
9850: LD_EXP 54
9854: PPUSH
9855: LD_STRING D13b-Abd-3
9857: PPUSH
9858: CALL_OW 94
// Say ( JMM , D13b-JMM-4 ) ;
9862: LD_EXP 14
9866: PPUSH
9867: LD_STRING D13b-JMM-4
9869: PPUSH
9870: CALL_OW 88
// ar_active_attack := true ;
9874: LD_ADDR_EXP 9
9878: PUSH
9879: LD_INT 1
9881: ST_TO_ADDR
// end ; if selected_option = 3 then
9882: LD_VAR 0 2
9886: PUSH
9887: LD_INT 3
9889: EQUAL
9890: IFFALSE 9916
// begin Say ( JMM , D13c-JMM-1 ) ;
9892: LD_EXP 14
9896: PPUSH
9897: LD_STRING D13c-JMM-1
9899: PPUSH
9900: CALL_OW 88
// Say ( Burlak , D13c-Bur-1 ) ;
9904: LD_EXP 45
9908: PPUSH
9909: LD_STRING D13c-Bur-1
9911: PPUSH
9912: CALL_OW 88
// end ; DialogueOff ;
9916: CALL_OW 7
// if not ar_active_attack then
9920: LD_EXP 9
9924: NOT
9925: IFFALSE 9942
// begin wait ( 6 6$00 ) ;
9927: LD_INT 12600
9929: PPUSH
9930: CALL_OW 67
// ar_active_attack := true ;
9934: LD_ADDR_EXP 9
9938: PUSH
9939: LD_INT 1
9941: ST_TO_ADDR
// end ; end ;
9942: PPOPN 2
9944: END
// every 0 0$1 trigger IsPlaced ( Burlak ) and GetSide ( Burlak ) = 7 do
9945: LD_EXP 45
9949: PPUSH
9950: CALL_OW 305
9954: PUSH
9955: LD_EXP 45
9959: PPUSH
9960: CALL_OW 255
9964: PUSH
9965: LD_INT 7
9967: EQUAL
9968: AND
9969: IFFALSE 10130
9971: GO 9973
9973: DISABLE
// begin wait ( 4 4$40 ) ;
9974: LD_INT 9800
9976: PPUSH
9977: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9981: LD_INT 35
9983: PPUSH
9984: CALL_OW 67
// until not ru_attackers ;
9988: LD_EXP 51
9992: NOT
9993: IFFALSE 9981
// PrepareGnyevko ;
9995: CALL 1984 0 0
// ComMoveXY ( Gnyevko , 124 , 118 ) ;
9999: LD_EXP 47
10003: PPUSH
10004: LD_INT 124
10006: PPUSH
10007: LD_INT 118
10009: PPUSH
10010: CALL_OW 111
// AddComHold ( Gnyevko ) ;
10014: LD_EXP 47
10018: PPUSH
10019: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10023: LD_INT 35
10025: PPUSH
10026: CALL_OW 67
// until IsAt ( Gnyevko , 124 , 118 ) ;
10030: LD_EXP 47
10034: PPUSH
10035: LD_INT 124
10037: PPUSH
10038: LD_INT 118
10040: PPUSH
10041: CALL_OW 307
10045: IFFALSE 10023
// SayRadio ( Gnyevko , DBelkov-Gny-1 ) ;
10047: LD_EXP 47
10051: PPUSH
10052: LD_STRING DBelkov-Gny-1
10054: PPUSH
10055: CALL_OW 94
// Say ( Burlak , DBelkov-Bur-1a ) ;
10059: LD_EXP 45
10063: PPUSH
10064: LD_STRING DBelkov-Bur-1a
10066: PPUSH
10067: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10071: LD_INT 35
10073: PPUSH
10074: CALL_OW 67
// until GetDistUnits ( Gnyevko , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Gnyevko ) ) < 8 ;
10078: LD_EXP 47
10082: PPUSH
10083: LD_INT 22
10085: PUSH
10086: LD_INT 7
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PPUSH
10093: CALL_OW 69
10097: PPUSH
10098: LD_EXP 47
10102: PPUSH
10103: CALL_OW 74
10107: PPUSH
10108: CALL_OW 296
10112: PUSH
10113: LD_INT 8
10115: LESS
10116: IFFALSE 10071
// SetSide ( Gnyevko , 7 ) ;
10118: LD_EXP 47
10122: PPUSH
10123: LD_INT 7
10125: PPUSH
10126: CALL_OW 235
// end ;
10130: END
// every 10 10$00 + 1 1$30 trigger GetSide ( Burlak ) = 7 do
10131: LD_EXP 45
10135: PPUSH
10136: CALL_OW 255
10140: PUSH
10141: LD_INT 7
10143: EQUAL
10144: IFFALSE 10154
10146: GO 10148
10148: DISABLE
// begin enable ;
10149: ENABLE
// PrepareAmericanAttack ;
10150: CALL 6266 0 0
// end ;
10154: END
// every 0 0$2 trigger FilterAllUnits ( [ f_side , 1 ] ) do var i , tmp ;
10155: LD_INT 22
10157: PUSH
10158: LD_INT 1
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: PPUSH
10165: CALL_OW 69
10169: IFFALSE 10353
10171: GO 10173
10173: DISABLE
10174: LD_INT 0
10176: PPUSH
10177: PPUSH
// begin while true do
10178: LD_INT 1
10180: IFFALSE 10237
// begin wait ( 0 0$1 ) ;
10182: LD_INT 35
10184: PPUSH
10185: CALL_OW 67
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , JMM ) ;
10189: LD_ADDR_VAR 0 2
10193: PUSH
10194: LD_INT 22
10196: PUSH
10197: LD_INT 1
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PPUSH
10204: CALL_OW 69
10208: PPUSH
10209: LD_EXP 14
10213: PPUSH
10214: CALL_OW 74
10218: ST_TO_ADDR
// if See ( 7 , tmp ) then
10219: LD_INT 7
10221: PPUSH
10222: LD_VAR 0 2
10226: PPUSH
10227: CALL_OW 292
10231: IFFALSE 10235
// break ;
10233: GO 10237
// end ;
10235: GO 10178
// DialogueOn ;
10237: CALL_OW 6
// CenterNowOnUnits ( tmp ) ;
10241: LD_VAR 0 2
10245: PPUSH
10246: CALL_OW 87
// PlaceSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 , 8 ) ;
10250: LD_VAR 0 2
10254: PPUSH
10255: CALL_OW 250
10259: PPUSH
10260: LD_VAR 0 2
10264: PPUSH
10265: CALL_OW 251
10269: PPUSH
10270: LD_INT 7
10272: PPUSH
10273: LD_INT 8
10275: PPUSH
10276: CALL_OW 330
// if Denis then
10280: LD_EXP 20
10284: IFFALSE 10298
// Say ( Denis , DAmerAttack-Pet-1 ) ;
10286: LD_EXP 20
10290: PPUSH
10291: LD_STRING DAmerAttack-Pet-1
10293: PPUSH
10294: CALL_OW 88
// Say ( JMM , DAmerAttack-JMM-1 ) ;
10298: LD_EXP 14
10302: PPUSH
10303: LD_STRING DAmerAttack-JMM-1
10305: PPUSH
10306: CALL_OW 88
// Say ( Burlak , DStop-Bur-1 ) ;
10310: LD_EXP 45
10314: PPUSH
10315: LD_STRING DStop-Bur-1
10317: PPUSH
10318: CALL_OW 88
// RemoveSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 ) ;
10322: LD_VAR 0 2
10326: PPUSH
10327: CALL_OW 250
10331: PPUSH
10332: LD_VAR 0 2
10336: PPUSH
10337: CALL_OW 251
10341: PPUSH
10342: LD_INT 7
10344: PPUSH
10345: CALL_OW 331
// DialogueOff ;
10349: CALL_OW 7
// end ;
10353: PPOPN 2
10355: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and IsDead ( ru_depot ) do
10356: LD_INT 22
10358: PUSH
10359: LD_INT 3
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 21
10368: PUSH
10369: LD_INT 1
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PPUSH
10380: CALL_OW 69
10384: PUSH
10385: LD_INT 0
10387: EQUAL
10388: PUSH
10389: LD_INT 47
10391: PPUSH
10392: CALL_OW 301
10396: AND
10397: IFFALSE 10439
10399: GO 10401
10401: DISABLE
// begin ChangeMissionObjectives ( M5a ) ;
10402: LD_STRING M5a
10404: PPUSH
10405: CALL_OW 337
// Say ( JMM , D8-JMM-1 ) ;
10409: LD_EXP 14
10413: PPUSH
10414: LD_STRING D8-JMM-1
10416: PPUSH
10417: CALL_OW 88
// if Gossudarov then
10421: LD_EXP 31
10425: IFFALSE 10439
// Say ( Gossudarov , D8-Gos-1 ) ;
10427: LD_EXP 31
10431: PPUSH
10432: LD_STRING D8-Gos-1
10434: PPUSH
10435: CALL_OW 88
// end ;
10439: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 do
10440: LD_INT 22
10442: PUSH
10443: LD_INT 2
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PUSH
10450: LD_INT 21
10452: PUSH
10453: LD_INT 1
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PPUSH
10464: CALL_OW 69
10468: PUSH
10469: LD_INT 0
10471: EQUAL
10472: IFFALSE 10522
10474: GO 10476
10476: DISABLE
// begin ChangeMissionObjectives ( M4c ) ;
10477: LD_STRING M4c
10479: PPUSH
10480: CALL_OW 337
// if Roth then
10484: LD_EXP 15
10488: IFFALSE 10504
// Say ( Roth , DStop-Roth-1 ) else
10490: LD_EXP 15
10494: PPUSH
10495: LD_STRING DStop-Roth-1
10497: PPUSH
10498: CALL_OW 88
10502: GO 10522
// if Gossudarov then
10504: LD_EXP 31
10508: IFFALSE 10522
// Say ( Gossudarov , D8-Gos-1a ) ;
10510: LD_EXP 31
10514: PPUSH
10515: LD_STRING D8-Gos-1a
10517: PPUSH
10518: CALL_OW 88
// end ;
10522: END
// every 0 0$01 trigger GetTechNation ( 7 , 1 , state_enabled ) = 0 and GetTechNation ( 7 , 3 , state_enabled ) = 0 do
10523: LD_INT 7
10525: PPUSH
10526: LD_INT 1
10528: PPUSH
10529: LD_INT 1
10531: PPUSH
10532: CALL 13550 0 3
10536: PUSH
10537: LD_INT 0
10539: EQUAL
10540: PUSH
10541: LD_INT 7
10543: PPUSH
10544: LD_INT 3
10546: PPUSH
10547: LD_INT 1
10549: PPUSH
10550: CALL 13550 0 3
10554: PUSH
10555: LD_INT 0
10557: EQUAL
10558: AND
10559: IFFALSE 10571
10561: GO 10563
10563: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
10564: LD_STRING M1a
10566: PPUSH
10567: CALL_OW 337
// end ;
10571: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ f_side , 3 ] ) = 0 and FilterAllUnits ( [ f_side , 1 ] ) = 0 and GetTechNation ( 7 , 1 , state_enabled ) = 0 and GetTechNation ( 7 , 3 , state_enabled ) = 0 do var i , tmp , tmp2 ;
10572: LD_INT 22
10574: PUSH
10575: LD_INT 2
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PUSH
10582: LD_INT 21
10584: PUSH
10585: LD_INT 1
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PPUSH
10596: CALL_OW 69
10600: PUSH
10601: LD_INT 0
10603: EQUAL
10604: PUSH
10605: LD_INT 22
10607: PUSH
10608: LD_INT 3
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PPUSH
10615: CALL_OW 69
10619: PUSH
10620: LD_INT 0
10622: EQUAL
10623: AND
10624: PUSH
10625: LD_INT 22
10627: PUSH
10628: LD_INT 1
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PPUSH
10635: CALL_OW 69
10639: PUSH
10640: LD_INT 0
10642: EQUAL
10643: AND
10644: PUSH
10645: LD_INT 7
10647: PPUSH
10648: LD_INT 1
10650: PPUSH
10651: LD_INT 1
10653: PPUSH
10654: CALL 13550 0 3
10658: PUSH
10659: LD_INT 0
10661: EQUAL
10662: AND
10663: PUSH
10664: LD_INT 7
10666: PPUSH
10667: LD_INT 3
10669: PPUSH
10670: LD_INT 1
10672: PPUSH
10673: CALL 13550 0 3
10677: PUSH
10678: LD_INT 0
10680: EQUAL
10681: AND
10682: IFFALSE 12023
10684: GO 10686
10686: DISABLE
10687: LD_INT 0
10689: PPUSH
10690: PPUSH
10691: PPUSH
// begin wait ( 0 0$3 ) ;
10692: LD_INT 105
10694: PPUSH
10695: CALL_OW 67
// if not IsDead ( Masha ) then
10699: LD_EXP 48
10703: PPUSH
10704: CALL_OW 301
10708: NOT
10709: IFFALSE 10723
// AddMedal ( Masha , 1 ) else
10711: LD_STRING Masha
10713: PPUSH
10714: LD_INT 1
10716: PPUSH
10717: CALL_OW 101
10721: GO 10734
// AddMedal ( Masha , - 1 ) ;
10723: LD_STRING Masha
10725: PPUSH
10726: LD_INT 1
10728: NEG
10729: PPUSH
10730: CALL_OW 101
// if abdul_escaped then
10734: LD_EXP 12
10738: IFFALSE 10753
// AddMedal ( Abdul , - 1 ) else
10740: LD_STRING Abdul
10742: PPUSH
10743: LD_INT 1
10745: NEG
10746: PPUSH
10747: CALL_OW 101
10751: GO 10763
// AddMedal ( Abdul , 1 ) ;
10753: LD_STRING Abdul
10755: PPUSH
10756: LD_INT 1
10758: PPUSH
10759: CALL_OW 101
// if loss_counter = 0 then
10763: LD_EXP 13
10767: PUSH
10768: LD_INT 0
10770: EQUAL
10771: IFFALSE 10785
// AddMedal ( People , 2 ) else
10773: LD_STRING People
10775: PPUSH
10776: LD_INT 2
10778: PPUSH
10779: CALL_OW 101
10783: GO 10835
// if loss_counter <= [ 3 , 2 , 2 ] [ Difficulty ] then
10785: LD_EXP 13
10789: PUSH
10790: LD_INT 3
10792: PUSH
10793: LD_INT 2
10795: PUSH
10796: LD_INT 2
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: PUSH
10804: LD_OWVAR 67
10808: ARRAY
10809: LESSEQUAL
10810: IFFALSE 10824
// AddMedal ( People , 1 ) else
10812: LD_STRING People
10814: PPUSH
10815: LD_INT 1
10817: PPUSH
10818: CALL_OW 101
10822: GO 10835
// AddMedal ( People , - 1 ) ;
10824: LD_STRING People
10826: PPUSH
10827: LD_INT 1
10829: NEG
10830: PPUSH
10831: CALL_OW 101
// GiveMedals ( MAIN ) ;
10835: LD_STRING MAIN
10837: PPUSH
10838: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10842: LD_ADDR_VAR 0 2
10846: PUSH
10847: LD_INT 22
10849: PUSH
10850: LD_INT 7
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: LD_INT 2
10859: PUSH
10860: LD_INT 25
10862: PUSH
10863: LD_INT 1
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 25
10872: PUSH
10873: LD_INT 2
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: LD_INT 25
10882: PUSH
10883: LD_INT 3
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: LD_INT 25
10892: PUSH
10893: LD_INT 4
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: LD_INT 25
10902: PUSH
10903: LD_INT 5
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: PUSH
10910: LD_INT 25
10912: PUSH
10913: LD_INT 8
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 25
10922: PUSH
10923: LD_INT 9
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PPUSH
10944: CALL_OW 69
10948: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10949: LD_VAR 0 2
10953: PPUSH
10954: CALL_OW 43
// tmp2 := [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Burlak , Belkov , Gnyevko ] ;
10958: LD_ADDR_VAR 0 3
10962: PUSH
10963: LD_EXP 14
10967: PUSH
10968: LD_EXP 15
10972: PUSH
10973: LD_EXP 16
10977: PUSH
10978: LD_EXP 17
10982: PUSH
10983: LD_EXP 18
10987: PUSH
10988: LD_EXP 19
10992: PUSH
10993: LD_EXP 20
10997: PUSH
10998: LD_EXP 21
11002: PUSH
11003: LD_EXP 22
11007: PUSH
11008: LD_EXP 23
11012: PUSH
11013: LD_EXP 24
11017: PUSH
11018: LD_EXP 25
11022: PUSH
11023: LD_EXP 26
11027: PUSH
11028: LD_EXP 27
11032: PUSH
11033: LD_EXP 28
11037: PUSH
11038: LD_EXP 29
11042: PUSH
11043: LD_EXP 30
11047: PUSH
11048: LD_EXP 31
11052: PUSH
11053: LD_EXP 32
11057: PUSH
11058: LD_EXP 33
11062: PUSH
11063: LD_EXP 35
11067: PUSH
11068: LD_EXP 36
11072: PUSH
11073: LD_EXP 37
11077: PUSH
11078: LD_EXP 38
11082: PUSH
11083: LD_EXP 39
11087: PUSH
11088: LD_EXP 40
11092: PUSH
11093: LD_EXP 41
11097: PUSH
11098: LD_EXP 42
11102: PUSH
11103: LD_EXP 43
11107: PUSH
11108: LD_EXP 44
11112: PUSH
11113: LD_EXP 45
11117: PUSH
11118: LD_EXP 46
11122: PUSH
11123: LD_EXP 47
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: ST_TO_ADDR
// if tmp diff tmp2 then
11163: LD_VAR 0 2
11167: PUSH
11168: LD_VAR 0 3
11172: DIFF
11173: IFFALSE 11193
// SaveCharacters ( tmp diff tmp2 , 13a_others ) ;
11175: LD_VAR 0 2
11179: PUSH
11180: LD_VAR 0 3
11184: DIFF
11185: PPUSH
11186: LD_STRING 13a_others
11188: PPUSH
11189: CALL_OW 38
// SaveCharacters ( JMM , 13a_JMM ) ;
11193: LD_EXP 14
11197: PPUSH
11198: LD_STRING 13a_JMM
11200: PPUSH
11201: CALL_OW 38
// if Titov then
11205: LD_EXP 33
11209: IFFALSE 11223
// SaveCharacters ( Titov , 13a_Titov ) ;
11211: LD_EXP 33
11215: PPUSH
11216: LD_STRING 13a_Titov
11218: PPUSH
11219: CALL_OW 38
// if Dolgov then
11223: LD_EXP 35
11227: IFFALSE 11241
// SaveCharacters ( Dolgov , 13a_Dolgov ) ;
11229: LD_EXP 35
11233: PPUSH
11234: LD_STRING 13a_Dolgov
11236: PPUSH
11237: CALL_OW 38
// if Petrosyan then
11241: LD_EXP 36
11245: IFFALSE 11259
// SaveCharacters ( Petrosyan , 13a_Petrosyan ) ;
11247: LD_EXP 36
11251: PPUSH
11252: LD_STRING 13a_Petrosyan
11254: PPUSH
11255: CALL_OW 38
// if Scholtze then
11259: LD_EXP 37
11263: IFFALSE 11277
// SaveCharacters ( Scholtze , 13a_Scholtze ) ;
11265: LD_EXP 37
11269: PPUSH
11270: LD_STRING 13a_Scholtze
11272: PPUSH
11273: CALL_OW 38
// if Oblukov then
11277: LD_EXP 38
11281: IFFALSE 11295
// SaveCharacters ( Oblukov , 13a_Oblukov ) ;
11283: LD_EXP 38
11287: PPUSH
11288: LD_STRING 13a_Oblukov
11290: PPUSH
11291: CALL_OW 38
// if Kapitsova then
11295: LD_EXP 39
11299: IFFALSE 11313
// SaveCharacters ( Kapitsova , 13a_Kapitsova ) ;
11301: LD_EXP 39
11305: PPUSH
11306: LD_STRING 13a_Kapitsova
11308: PPUSH
11309: CALL_OW 38
// if Lipshchin then
11313: LD_EXP 40
11317: IFFALSE 11331
// SaveCharacters ( Lipshchin , 13a_Lipshchin ) ;
11319: LD_EXP 40
11323: PPUSH
11324: LD_STRING 13a_Lipshchin
11326: PPUSH
11327: CALL_OW 38
// if Petrovova then
11331: LD_EXP 41
11335: IFFALSE 11349
// SaveCharacters ( Petrovova , 13a_Petrovova ) ;
11337: LD_EXP 41
11341: PPUSH
11342: LD_STRING 13a_Petrovova
11344: PPUSH
11345: CALL_OW 38
// if Kovalyuk then
11349: LD_EXP 42
11353: IFFALSE 11367
// SaveCharacters ( Kovalyuk , 13a_Kovalyuk ) ;
11355: LD_EXP 42
11359: PPUSH
11360: LD_STRING 13a_Kovalyuk
11362: PPUSH
11363: CALL_OW 38
// if Kuzmov then
11367: LD_EXP 43
11371: IFFALSE 11385
// SaveCharacters ( Kuzmov , 13a_Kuzmov ) ;
11373: LD_EXP 43
11377: PPUSH
11378: LD_STRING 13a_Kuzmov
11380: PPUSH
11381: CALL_OW 38
// if Karamazov then
11385: LD_EXP 44
11389: IFFALSE 11403
// SaveCharacters ( Karamazov , 13a_Karamazov ) ;
11391: LD_EXP 44
11395: PPUSH
11396: LD_STRING 13a_Karamazov
11398: PPUSH
11399: CALL_OW 38
// if Burlak then
11403: LD_EXP 45
11407: IFFALSE 11421
// SaveCharacters ( Burlak , 13a_Burlak ) ;
11409: LD_EXP 45
11413: PPUSH
11414: LD_STRING 13a_Burlak
11416: PPUSH
11417: CALL_OW 38
// if Belkov then
11421: LD_EXP 46
11425: IFFALSE 11439
// SaveCharacters ( Belkov , 13a_Belkov ) ;
11427: LD_EXP 46
11431: PPUSH
11432: LD_STRING 13a_Belkov
11434: PPUSH
11435: CALL_OW 38
// if Gnyevko then
11439: LD_EXP 47
11443: IFFALSE 11457
// SaveCharacters ( Gnyevko , 13a_Gnyevko ) ;
11445: LD_EXP 47
11449: PPUSH
11450: LD_STRING 13a_Gnyevko
11452: PPUSH
11453: CALL_OW 38
// if Lisa then
11457: LD_EXP 16
11461: IFFALSE 11475
// SaveCharacters ( Lisa , 13a_Lisa ) ;
11463: LD_EXP 16
11467: PPUSH
11468: LD_STRING 13a_Lisa
11470: PPUSH
11471: CALL_OW 38
// if Donaldson then
11475: LD_EXP 17
11479: IFFALSE 11493
// SaveCharacters ( Donaldson , 13a_Donaldson ) ;
11481: LD_EXP 17
11485: PPUSH
11486: LD_STRING 13a_Donaldson
11488: PPUSH
11489: CALL_OW 38
// if Bobby then
11493: LD_EXP 18
11497: IFFALSE 11511
// SaveCharacters ( Bobby , 13a_Bobby ) ;
11499: LD_EXP 18
11503: PPUSH
11504: LD_STRING 13a_Bobby
11506: PPUSH
11507: CALL_OW 38
// if Cyrus then
11511: LD_EXP 19
11515: IFFALSE 11529
// SaveCharacters ( Cyrus , 13a_Cyrus ) ;
11517: LD_EXP 19
11521: PPUSH
11522: LD_STRING 13a_Cyrus
11524: PPUSH
11525: CALL_OW 38
// if Denis then
11529: LD_EXP 20
11533: IFFALSE 11547
// SaveCharacters ( Denis , 13a_Denis ) ;
11535: LD_EXP 20
11539: PPUSH
11540: LD_STRING 13a_Denis
11542: PPUSH
11543: CALL_OW 38
// if Brown then
11547: LD_EXP 21
11551: IFFALSE 11565
// SaveCharacters ( Brown , 13a_Brown ) ;
11553: LD_EXP 21
11557: PPUSH
11558: LD_STRING 13a_Brown
11560: PPUSH
11561: CALL_OW 38
// if Gladstone then
11565: LD_EXP 22
11569: IFFALSE 11583
// SaveCharacters ( Gladstone , 13a_Gladstone ) ;
11571: LD_EXP 22
11575: PPUSH
11576: LD_STRING 13a_Gladstone
11578: PPUSH
11579: CALL_OW 38
// if Houten then
11583: LD_EXP 23
11587: IFFALSE 11601
// SaveCharacters ( Houten , 13a_Houten ) ;
11589: LD_EXP 23
11593: PPUSH
11594: LD_STRING 13a_Houten
11596: PPUSH
11597: CALL_OW 38
// if Cornel then
11601: LD_EXP 24
11605: IFFALSE 11619
// SaveCharacters ( Cornel , 13a_Cornel ) ;
11607: LD_EXP 24
11611: PPUSH
11612: LD_STRING 13a_Cornel
11614: PPUSH
11615: CALL_OW 38
// if Gary then
11619: LD_EXP 25
11623: IFFALSE 11637
// SaveCharacters ( Gary , 13a_Gary ) ;
11625: LD_EXP 25
11629: PPUSH
11630: LD_STRING 13a_Gary
11632: PPUSH
11633: CALL_OW 38
// if Frank then
11637: LD_EXP 26
11641: IFFALSE 11655
// SaveCharacters ( Frank , 13a_Frank ) ;
11643: LD_EXP 26
11647: PPUSH
11648: LD_STRING 13a_Frank
11650: PPUSH
11651: CALL_OW 38
// if Kikuchi then
11655: LD_EXP 27
11659: IFFALSE 11673
// SaveCharacters ( Kikuchi , 13a_Kikuchi ) ;
11661: LD_EXP 27
11665: PPUSH
11666: LD_STRING 13a_Kikuchi
11668: PPUSH
11669: CALL_OW 38
// if Simms then
11673: LD_EXP 28
11677: IFFALSE 11691
// SaveCharacters ( Simms , 13a_Simms ) ;
11679: LD_EXP 28
11683: PPUSH
11684: LD_STRING 13a_Simms
11686: PPUSH
11687: CALL_OW 38
// if Joan then
11691: LD_EXP 29
11695: IFFALSE 11709
// SaveCharacters ( Joan , 13a_Joan ) ;
11697: LD_EXP 29
11701: PPUSH
11702: LD_STRING 13a_Joan
11704: PPUSH
11705: CALL_OW 38
// if DeltaDoctor then
11709: LD_EXP 30
11713: IFFALSE 11727
// SaveCharacters ( DeltaDoctor , 13a_DeltaDoctor ) ;
11715: LD_EXP 30
11719: PPUSH
11720: LD_STRING 13a_DeltaDoctor
11722: PPUSH
11723: CALL_OW 38
// if Gossudarov then
11727: LD_EXP 31
11731: IFFALSE 11745
// SaveCharacters ( Gossudarov , 13a_Gossudarov ) ;
11733: LD_EXP 31
11737: PPUSH
11738: LD_STRING 13a_Gossudarov
11740: PPUSH
11741: CALL_OW 38
// if Kirilenkova then
11745: LD_EXP 32
11749: IFFALSE 11763
// SaveCharacters ( Kirilenkova , 13a_Kirilenkova ) ;
11751: LD_EXP 32
11755: PPUSH
11756: LD_STRING 13a_Kirilenkova
11758: PPUSH
11759: CALL_OW 38
// if Masha then
11763: LD_EXP 48
11767: IFFALSE 11822
// SaveVariable ( [ GetChassis ( Masha ) , GetEngine ( Masha ) , GetControl ( Masha ) , GetWeapon ( Masha ) ] , 13a_Masha ) ;
11769: LD_EXP 48
11773: PPUSH
11774: CALL_OW 265
11778: PUSH
11779: LD_EXP 48
11783: PPUSH
11784: CALL_OW 262
11788: PUSH
11789: LD_EXP 48
11793: PPUSH
11794: CALL_OW 263
11798: PUSH
11799: LD_EXP 48
11803: PPUSH
11804: CALL_OW 264
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: PPUSH
11815: LD_STRING 13a_Masha
11817: PPUSH
11818: CALL_OW 39
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
11822: LD_ADDR_VAR 0 2
11826: PUSH
11827: LD_INT 21
11829: PUSH
11830: LD_INT 3
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PPUSH
11837: CALL_OW 69
11841: ST_TO_ADDR
// tmp2 := [ ] ;
11842: LD_ADDR_VAR 0 3
11846: PUSH
11847: EMPTY
11848: ST_TO_ADDR
// if tmp then
11849: LD_VAR 0 2
11853: IFFALSE 12001
// for i in tmp do
11855: LD_ADDR_VAR 0 1
11859: PUSH
11860: LD_VAR 0 2
11864: PUSH
11865: FOR_IN
11866: IFFALSE 11999
// if IsOk ( i ) then
11868: LD_VAR 0 1
11872: PPUSH
11873: CALL_OW 302
11877: IFFALSE 11997
// tmp2 := tmp2 ^ [ GetSide ( i ) , GetNation ( i ) , GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ;
11879: LD_ADDR_VAR 0 3
11883: PUSH
11884: LD_VAR 0 3
11888: PUSH
11889: LD_VAR 0 1
11893: PPUSH
11894: CALL_OW 255
11898: PUSH
11899: LD_VAR 0 1
11903: PPUSH
11904: CALL_OW 248
11908: PUSH
11909: LD_VAR 0 1
11913: PPUSH
11914: CALL_OW 266
11918: PUSH
11919: LD_VAR 0 1
11923: PPUSH
11924: CALL_OW 250
11928: PUSH
11929: LD_VAR 0 1
11933: PPUSH
11934: CALL_OW 251
11938: PUSH
11939: LD_VAR 0 1
11943: PPUSH
11944: CALL_OW 254
11948: PUSH
11949: LD_VAR 0 1
11953: PPUSH
11954: CALL_OW 267
11958: PUSH
11959: LD_VAR 0 1
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: CALL_OW 268
11971: PUSH
11972: LD_VAR 0 1
11976: PPUSH
11977: LD_INT 2
11979: PPUSH
11980: CALL_OW 268
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: ADD
11996: ST_TO_ADDR
11997: GO 11865
11999: POP
12000: POP
// if tmp2 then
12001: LD_VAR 0 3
12005: IFFALSE 12019
// SaveVariable ( tmp2 , 13a_buildings ) ;
12007: LD_VAR 0 3
12011: PPUSH
12012: LD_STRING 13a_buildings
12014: PPUSH
12015: CALL_OW 39
// YouWin ;
12019: CALL_OW 103
// end ;
12023: PPOPN 3
12025: END
// export function SciRu ; var tmp , t ; begin
12026: LD_INT 0
12028: PPUSH
12029: PPUSH
12030: PPUSH
// t := [ Gossudarov , Burlak , Titov , Belkov , Gnyevko ] ;
12031: LD_ADDR_VAR 0 3
12035: PUSH
12036: LD_EXP 31
12040: PUSH
12041: LD_EXP 45
12045: PUSH
12046: LD_EXP 33
12050: PUSH
12051: LD_EXP 46
12055: PUSH
12056: LD_EXP 47
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff t ;
12068: LD_ADDR_VAR 0 2
12072: PUSH
12073: LD_INT 22
12075: PUSH
12076: LD_INT 7
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PUSH
12083: LD_INT 23
12085: PUSH
12086: LD_INT 3
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: LD_INT 25
12095: PUSH
12096: LD_INT 4
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 26
12105: PUSH
12106: LD_INT 1
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: PPUSH
12119: CALL_OW 69
12123: PUSH
12124: LD_VAR 0 3
12128: DIFF
12129: ST_TO_ADDR
// if tmp then
12130: LD_VAR 0 2
12134: IFFALSE 12150
// result := tmp [ 1 ] ;
12136: LD_ADDR_VAR 0 1
12140: PUSH
12141: LD_VAR 0 2
12145: PUSH
12146: LD_INT 1
12148: ARRAY
12149: ST_TO_ADDR
// end ;
12150: LD_VAR 0 1
12154: RET
// export function SolRu ; var tmp , t ; begin
12155: LD_INT 0
12157: PPUSH
12158: PPUSH
12159: PPUSH
// t := [ Belkov , Burlak , Gossudarov ] ;
12160: LD_ADDR_VAR 0 3
12164: PUSH
12165: LD_EXP 46
12169: PUSH
12170: LD_EXP 45
12174: PUSH
12175: LD_EXP 31
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: LIST
12184: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 1 ] , [ f_sex , sex_male ] ] ) diff t ;
12185: LD_ADDR_VAR 0 2
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_INT 7
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 23
12202: PUSH
12203: LD_INT 3
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 25
12212: PUSH
12213: LD_INT 1
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 26
12222: PUSH
12223: LD_INT 1
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: PPUSH
12236: CALL_OW 69
12240: PUSH
12241: LD_VAR 0 3
12245: DIFF
12246: ST_TO_ADDR
// if tmp then
12247: LD_VAR 0 2
12251: IFFALSE 12267
// result := tmp [ 1 ] ;
12253: LD_ADDR_VAR 0 1
12257: PUSH
12258: LD_VAR 0 2
12262: PUSH
12263: LD_INT 1
12265: ARRAY
12266: ST_TO_ADDR
// end ; end_of_file
12267: LD_VAR 0 1
12271: RET
// on UnitDestroyed ( un ) do var i , side ;
12272: LD_INT 0
12274: PPUSH
12275: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) then
12276: LD_VAR 0 1
12280: PUSH
12281: LD_INT 22
12283: PUSH
12284: LD_INT 7
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 2
12293: PUSH
12294: LD_INT 25
12296: PUSH
12297: LD_INT 1
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 25
12306: PUSH
12307: LD_INT 2
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 25
12316: PUSH
12317: LD_INT 3
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 25
12326: PUSH
12327: LD_INT 4
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 25
12336: PUSH
12337: LD_INT 5
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: LD_INT 25
12346: PUSH
12347: LD_INT 8
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 25
12356: PUSH
12357: LD_INT 9
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PPUSH
12378: CALL_OW 69
12382: IN
12383: IFFALSE 12399
// loss_counter := loss_counter + 1 ;
12385: LD_ADDR_EXP 13
12389: PUSH
12390: LD_EXP 13
12394: PUSH
12395: LD_INT 1
12397: PLUS
12398: ST_TO_ADDR
// if un = Abdul then
12399: LD_VAR 0 1
12403: PUSH
12404: LD_EXP 54
12408: EQUAL
12409: IFFALSE 12419
// abdul_escaped := false ;
12411: LD_ADDR_EXP 12
12415: PUSH
12416: LD_INT 0
12418: ST_TO_ADDR
// if un in ru_attackers then
12419: LD_VAR 0 1
12423: PUSH
12424: LD_EXP 51
12428: IN
12429: IFFALSE 12447
// ru_attackers := ru_attackers diff un ;
12431: LD_ADDR_EXP 51
12435: PUSH
12436: LD_EXP 51
12440: PUSH
12441: LD_VAR 0 1
12445: DIFF
12446: ST_TO_ADDR
// if un in ar_attackers then
12447: LD_VAR 0 1
12451: PUSH
12452: LD_EXP 10
12456: IN
12457: IFFALSE 12475
// ar_attackers := ar_attackers diff un ;
12459: LD_ADDR_EXP 10
12463: PUSH
12464: LD_EXP 10
12468: PUSH
12469: LD_VAR 0 1
12473: DIFF
12474: ST_TO_ADDR
// if un = JMM then
12475: LD_VAR 0 1
12479: PUSH
12480: LD_EXP 14
12484: EQUAL
12485: IFFALSE 12496
// begin YouLost ( JMM ) ;
12487: LD_STRING JMM
12489: PPUSH
12490: CALL_OW 104
// exit ;
12494: GO 12585
// end ; if un = Burlak then
12496: LD_VAR 0 1
12500: PUSH
12501: LD_EXP 45
12505: EQUAL
12506: IFFALSE 12517
// begin YouLost ( Burlak ) ;
12508: LD_STRING Burlak
12510: PPUSH
12511: CALL_OW 104
// exit ;
12515: GO 12585
// end ; if un = freedom then
12517: LD_VAR 0 1
12521: PUSH
12522: LD_EXP 3
12526: EQUAL
12527: IFFALSE 12538
// begin YouLost ( Destroyed ) ;
12529: LD_STRING Destroyed
12531: PPUSH
12532: CALL_OW 104
// exit ;
12536: GO 12585
// end ; if un = Masha then
12538: LD_VAR 0 1
12542: PUSH
12543: LD_EXP 48
12547: EQUAL
12548: IFFALSE 12557
// ChangeMissionObjectives ( M4b ) ;
12550: LD_STRING M4b
12552: PPUSH
12553: CALL_OW 337
// if un = Mastodont then
12557: LD_VAR 0 1
12561: PUSH
12562: LD_EXP 55
12566: EQUAL
12567: IFFALSE 12576
// ChangeMissionObjectives ( M4a ) ;
12569: LD_STRING M4a
12571: PPUSH
12572: CALL_OW 337
// MCE_UnitDestroyed ( un ) ;
12576: LD_VAR 0 1
12580: PPUSH
12581: CALL 71036 0 1
// end ;
12585: PPOPN 3
12587: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
12588: LD_VAR 0 1
12592: PPUSH
12593: LD_VAR 0 2
12597: PPUSH
12598: CALL 72903 0 2
// end ;
12602: PPOPN 2
12604: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
12605: LD_VAR 0 1
12609: PPUSH
12610: CALL 71985 0 1
// end ;
12614: PPOPN 1
12616: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_depot ] ] ) then
12617: LD_VAR 0 1
12621: PUSH
12622: LD_INT 22
12624: PUSH
12625: LD_INT 7
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: LD_INT 30
12634: PUSH
12635: LD_INT 0
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PPUSH
12646: CALL_OW 69
12650: IN
12651: IFFALSE 12690
// begin SetBName ( building , freedom ) ;
12653: LD_VAR 0 1
12657: PPUSH
12658: LD_STRING freedom
12660: PPUSH
12661: CALL_OW 500
// SetRestrict ( b_depot , 7 , false ) ;
12665: LD_INT 0
12667: PPUSH
12668: LD_INT 7
12670: PPUSH
12671: LD_INT 0
12673: PPUSH
12674: CALL_OW 324
// freedom := building ;
12678: LD_ADDR_EXP 3
12682: PUSH
12683: LD_VAR 0 1
12687: ST_TO_ADDR
// exit ;
12688: GO 12756
// end ; if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_btype , b_lab ] ] ) then
12690: LD_VAR 0 1
12694: PUSH
12695: LD_INT 22
12697: PUSH
12698: LD_INT 7
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: PUSH
12705: LD_INT 23
12707: PUSH
12708: LD_INT 3
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: LD_INT 30
12717: PUSH
12718: LD_INT 6
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: LIST
12729: PPUSH
12730: CALL_OW 69
12734: IN
12735: IFFALSE 12747
// begin ru_lab_builded := true ;
12737: LD_ADDR_EXP 5
12741: PUSH
12742: LD_INT 1
12744: ST_TO_ADDR
// exit ;
12745: GO 12756
// end ; MCE_BuildingComplete ( building ) ;
12747: LD_VAR 0 1
12751: PPUSH
12752: CALL 72219 0 1
// end ;
12756: PPOPN 1
12758: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
12759: LD_VAR 0 1
12763: PPUSH
12764: LD_VAR 0 2
12768: PPUSH
12769: CALL 70748 0 2
// end ;
12773: PPOPN 2
12775: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
12776: LD_VAR 0 1
12780: PPUSH
12781: LD_VAR 0 2
12785: PPUSH
12786: LD_VAR 0 3
12790: PPUSH
12791: LD_VAR 0 4
12795: PPUSH
12796: LD_VAR 0 5
12800: PPUSH
12801: CALL 70375 0 5
// end ;
12805: PPOPN 5
12807: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
12808: LD_VAR 0 1
12812: PPUSH
12813: LD_VAR 0 2
12817: PPUSH
12818: CALL 70063 0 2
// end ;
12822: PPOPN 2
12824: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
12825: LD_VAR 0 1
12829: PPUSH
12830: LD_VAR 0 2
12834: PPUSH
12835: LD_VAR 0 3
12839: PPUSH
12840: LD_VAR 0 4
12844: PPUSH
12845: CALL 69908 0 4
// end ;
12849: PPOPN 4
12851: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
12852: LD_VAR 0 1
12856: PPUSH
12857: LD_VAR 0 2
12861: PPUSH
12862: LD_VAR 0 3
12866: PPUSH
12867: CALL 69690 0 3
// end ;
12871: PPOPN 3
12873: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
12874: LD_VAR 0 1
12878: PPUSH
12879: LD_VAR 0 2
12883: PPUSH
12884: CALL 69582 0 2
// end ;
12888: PPOPN 2
12890: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
12891: LD_VAR 0 1
12895: PPUSH
12896: LD_VAR 0 2
12900: PPUSH
12901: CALL 73157 0 2
// end ;
12905: PPOPN 2
12907: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
12908: LD_VAR 0 1
12912: PPUSH
12913: LD_VAR 0 2
12917: PPUSH
12918: LD_VAR 0 3
12922: PPUSH
12923: LD_VAR 0 4
12927: PPUSH
12928: CALL 73366 0 4
// end ;
12932: PPOPN 4
12934: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
12935: LD_VAR 0 1
12939: PPUSH
12940: LD_VAR 0 2
12944: PPUSH
12945: CALL 69398 0 2
// end ; end_of_file
12949: PPOPN 2
12951: END
// every 0 0$30 do var cr , time ;
12952: GO 12954
12954: DISABLE
12955: LD_INT 0
12957: PPUSH
12958: PPUSH
// begin time := 0 0$10 ;
12959: LD_ADDR_VAR 0 2
12963: PUSH
12964: LD_INT 350
12966: ST_TO_ADDR
// while game do
12967: LD_EXP 2
12971: IFFALSE 13070
// begin wait ( time ) ;
12973: LD_VAR 0 2
12977: PPUSH
12978: CALL_OW 67
// if tick > 2 2$00 then
12982: LD_OWVAR 1
12986: PUSH
12987: LD_INT 4200
12989: GREATER
12990: IFFALSE 13023
// time := time + [ 0 0$06 , 0 0$07 , 0 0$08 ] [ Difficulty ] ;
12992: LD_ADDR_VAR 0 2
12996: PUSH
12997: LD_VAR 0 2
13001: PUSH
13002: LD_INT 210
13004: PUSH
13005: LD_INT 245
13007: PUSH
13008: LD_INT 280
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: LD_OWVAR 67
13020: ARRAY
13021: PLUS
13022: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 70 , 49 , 25 , true ) ;
13023: LD_INT 1
13025: PPUSH
13026: LD_INT 5
13028: PPUSH
13029: CALL_OW 12
13033: PPUSH
13034: LD_INT 70
13036: PPUSH
13037: LD_INT 49
13039: PPUSH
13040: LD_INT 25
13042: PPUSH
13043: LD_INT 1
13045: PPUSH
13046: CALL_OW 56
// if time > 5 5$00 then
13050: LD_VAR 0 2
13054: PUSH
13055: LD_INT 10500
13057: GREATER
13058: IFFALSE 13068
// time := 0 0$30 ;
13060: LD_ADDR_VAR 0 2
13064: PUSH
13065: LD_INT 1050
13067: ST_TO_ADDR
// end ;
13068: GO 12967
// end ;
13070: PPOPN 2
13072: END
// every 0 0$30 do var cr , time ;
13073: GO 13075
13075: DISABLE
13076: LD_INT 0
13078: PPUSH
13079: PPUSH
// begin time := 0 0$01 ;
13080: LD_ADDR_VAR 0 2
13084: PUSH
13085: LD_INT 35
13087: ST_TO_ADDR
// while game do
13088: LD_EXP 2
13092: IFFALSE 13181
// begin wait ( time ) ;
13094: LD_VAR 0 2
13098: PPUSH
13099: CALL_OW 67
// time := time + [ 0 0$04 , 0 0$05 , 0 0$06 ] [ Difficulty ] ;
13103: LD_ADDR_VAR 0 2
13107: PUSH
13108: LD_VAR 0 2
13112: PUSH
13113: LD_INT 140
13115: PUSH
13116: LD_INT 175
13118: PUSH
13119: LD_INT 210
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: LIST
13126: PUSH
13127: LD_OWVAR 67
13131: ARRAY
13132: PLUS
13133: ST_TO_ADDR
// CreateCratesXYR ( rand ( 3 , 5 ) , 26 , 9 , 30 , true ) ;
13134: LD_INT 3
13136: PPUSH
13137: LD_INT 5
13139: PPUSH
13140: CALL_OW 12
13144: PPUSH
13145: LD_INT 26
13147: PPUSH
13148: LD_INT 9
13150: PPUSH
13151: LD_INT 30
13153: PPUSH
13154: LD_INT 1
13156: PPUSH
13157: CALL_OW 56
// if time > 3 3$00 then
13161: LD_VAR 0 2
13165: PUSH
13166: LD_INT 6300
13168: GREATER
13169: IFFALSE 13179
// time := 0 0$20 ;
13171: LD_ADDR_VAR 0 2
13175: PUSH
13176: LD_INT 700
13178: ST_TO_ADDR
// end ;
13179: GO 13088
// end ;
13181: PPOPN 2
13183: END
// every 0 0$30 do var cr , time ;
13184: GO 13186
13186: DISABLE
13187: LD_INT 0
13189: PPUSH
13190: PPUSH
// begin time := 0 0$20 ;
13191: LD_ADDR_VAR 0 2
13195: PUSH
13196: LD_INT 700
13198: ST_TO_ADDR
// while game do
13199: LD_EXP 2
13203: IFFALSE 13328
// begin wait ( time ) ;
13205: LD_VAR 0 2
13209: PPUSH
13210: CALL_OW 67
// time := time + [ 0 0$05 , 0 0$06 , 0 0$08 ] [ Difficulty ] ;
13214: LD_ADDR_VAR 0 2
13218: PUSH
13219: LD_VAR 0 2
13223: PUSH
13224: LD_INT 175
13226: PUSH
13227: LD_INT 210
13229: PUSH
13230: LD_INT 280
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: LIST
13237: PUSH
13238: LD_OWVAR 67
13242: ARRAY
13243: PLUS
13244: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 179 , 101 , 20 , true ) ;
13245: LD_INT 1
13247: PPUSH
13248: LD_INT 5
13250: PPUSH
13251: CALL_OW 12
13255: PPUSH
13256: LD_INT 179
13258: PPUSH
13259: LD_INT 101
13261: PPUSH
13262: LD_INT 20
13264: PPUSH
13265: LD_INT 1
13267: PPUSH
13268: CALL_OW 56
// wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
13272: LD_INT 350
13274: PPUSH
13275: LD_INT 525
13277: PPUSH
13278: CALL_OW 12
13282: PPUSH
13283: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area_collect_arabian , true ) ;
13287: LD_INT 1
13289: PPUSH
13290: LD_INT 5
13292: PPUSH
13293: CALL_OW 12
13297: PPUSH
13298: LD_INT 9
13300: PPUSH
13301: LD_INT 1
13303: PPUSH
13304: CALL_OW 55
// if time > 4 4$00 then
13308: LD_VAR 0 2
13312: PUSH
13313: LD_INT 8400
13315: GREATER
13316: IFFALSE 13326
// time := 0 0$30 ;
13318: LD_ADDR_VAR 0 2
13322: PUSH
13323: LD_INT 1050
13325: ST_TO_ADDR
// end ;
13326: GO 13199
// end ;
13328: PPOPN 2
13330: END
// every 0 0$30 do var cr , time ;
13331: GO 13333
13333: DISABLE
13334: LD_INT 0
13336: PPUSH
13337: PPUSH
// begin time := 0 0$10 ;
13338: LD_ADDR_VAR 0 2
13342: PUSH
13343: LD_INT 350
13345: ST_TO_ADDR
// while game do
13346: LD_EXP 2
13350: IFFALSE 13484
// begin wait ( time ) ;
13352: LD_VAR 0 2
13356: PPUSH
13357: CALL_OW 67
// time := time + 0 0$10 ;
13361: LD_ADDR_VAR 0 2
13365: PUSH
13366: LD_VAR 0 2
13370: PUSH
13371: LD_INT 350
13373: PLUS
13374: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , area_crates_russian , true ) ;
13375: LD_INT 1
13377: PPUSH
13378: LD_INT 5
13380: PPUSH
13381: CALL_OW 12
13385: PPUSH
13386: LD_INT 11
13388: PPUSH
13389: LD_INT 1
13391: PPUSH
13392: CALL_OW 55
// cr := rand ( 1 , 3 ) ;
13396: LD_ADDR_VAR 0 1
13400: PUSH
13401: LD_INT 1
13403: PPUSH
13404: LD_INT 3
13406: PPUSH
13407: CALL_OW 12
13411: ST_TO_ADDR
// if cr = 1 then
13412: LD_VAR 0 1
13416: PUSH
13417: LD_INT 1
13419: EQUAL
13420: IFFALSE 13464
// begin wait ( rand ( 0 0$20 , 0 0$45 ) ) ;
13422: LD_INT 700
13424: PPUSH
13425: LD_INT 1575
13427: PPUSH
13428: CALL_OW 12
13432: PPUSH
13433: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 34 , 50 , 7 , true ) ;
13437: LD_INT 1
13439: PPUSH
13440: LD_INT 5
13442: PPUSH
13443: CALL_OW 12
13447: PPUSH
13448: LD_INT 34
13450: PPUSH
13451: LD_INT 50
13453: PPUSH
13454: LD_INT 7
13456: PPUSH
13457: LD_INT 1
13459: PPUSH
13460: CALL_OW 56
// end ; if time > 8 8$00 then
13464: LD_VAR 0 2
13468: PUSH
13469: LD_INT 16800
13471: GREATER
13472: IFFALSE 13482
// time := 0 0$40 ;
13474: LD_ADDR_VAR 0 2
13478: PUSH
13479: LD_INT 1400
13481: ST_TO_ADDR
// end ;
13482: GO 13346
// end ; end_of_file
13484: PPOPN 2
13486: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13487: LD_INT 0
13489: PPUSH
13490: PPUSH
// if exist_mode then
13491: LD_VAR 0 2
13495: IFFALSE 13520
// unit := CreateCharacter ( prefix & ident ) else
13497: LD_ADDR_VAR 0 5
13501: PUSH
13502: LD_VAR 0 3
13506: PUSH
13507: LD_VAR 0 1
13511: STR
13512: PPUSH
13513: CALL_OW 34
13517: ST_TO_ADDR
13518: GO 13535
// unit := NewCharacter ( ident ) ;
13520: LD_ADDR_VAR 0 5
13524: PUSH
13525: LD_VAR 0 1
13529: PPUSH
13530: CALL_OW 25
13534: ST_TO_ADDR
// result := unit ;
13535: LD_ADDR_VAR 0 4
13539: PUSH
13540: LD_VAR 0 5
13544: ST_TO_ADDR
// end ;
13545: LD_VAR 0 4
13549: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13550: LD_INT 0
13552: PPUSH
13553: PPUSH
// if not side or not nation then
13554: LD_VAR 0 1
13558: NOT
13559: PUSH
13560: LD_VAR 0 2
13564: NOT
13565: OR
13566: IFFALSE 13570
// exit ;
13568: GO 14190
// case nation of nation_american :
13570: LD_VAR 0 2
13574: PUSH
13575: LD_INT 1
13577: DOUBLE
13578: EQUAL
13579: IFTRUE 13583
13581: GO 13749
13583: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
13584: LD_ADDR_VAR 0 4
13588: PUSH
13589: LD_INT 35
13591: PUSH
13592: LD_INT 45
13594: PUSH
13595: LD_INT 46
13597: PUSH
13598: LD_INT 47
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: LD_INT 2
13606: PUSH
13607: LD_INT 6
13609: PUSH
13610: LD_INT 15
13612: PUSH
13613: LD_INT 16
13615: PUSH
13616: LD_INT 7
13618: PUSH
13619: LD_INT 12
13621: PUSH
13622: LD_INT 13
13624: PUSH
13625: LD_INT 10
13627: PUSH
13628: LD_INT 14
13630: PUSH
13631: LD_INT 20
13633: PUSH
13634: LD_INT 25
13636: PUSH
13637: LD_INT 32
13639: PUSH
13640: LD_INT 27
13642: PUSH
13643: LD_INT 36
13645: PUSH
13646: LD_INT 69
13648: PUSH
13649: LD_INT 39
13651: PUSH
13652: LD_INT 34
13654: PUSH
13655: LD_INT 40
13657: PUSH
13658: LD_INT 48
13660: PUSH
13661: LD_INT 49
13663: PUSH
13664: LD_INT 50
13666: PUSH
13667: LD_INT 51
13669: PUSH
13670: LD_INT 52
13672: PUSH
13673: LD_INT 53
13675: PUSH
13676: LD_INT 54
13678: PUSH
13679: LD_INT 55
13681: PUSH
13682: LD_INT 56
13684: PUSH
13685: LD_INT 57
13687: PUSH
13688: LD_INT 58
13690: PUSH
13691: LD_INT 59
13693: PUSH
13694: LD_INT 60
13696: PUSH
13697: LD_INT 61
13699: PUSH
13700: LD_INT 62
13702: PUSH
13703: LD_INT 80
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: ST_TO_ADDR
13747: GO 14114
13749: LD_INT 2
13751: DOUBLE
13752: EQUAL
13753: IFTRUE 13757
13755: GO 13927
13757: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
13758: LD_ADDR_VAR 0 4
13762: PUSH
13763: LD_INT 35
13765: PUSH
13766: LD_INT 45
13768: PUSH
13769: LD_INT 46
13771: PUSH
13772: LD_INT 47
13774: PUSH
13775: LD_INT 70
13777: PUSH
13778: LD_INT 1
13780: PUSH
13781: LD_INT 11
13783: PUSH
13784: LD_INT 3
13786: PUSH
13787: LD_INT 4
13789: PUSH
13790: LD_INT 5
13792: PUSH
13793: LD_INT 6
13795: PUSH
13796: LD_INT 15
13798: PUSH
13799: LD_INT 18
13801: PUSH
13802: LD_INT 7
13804: PUSH
13805: LD_INT 17
13807: PUSH
13808: LD_INT 8
13810: PUSH
13811: LD_INT 20
13813: PUSH
13814: LD_INT 72
13816: PUSH
13817: LD_INT 26
13819: PUSH
13820: LD_INT 69
13822: PUSH
13823: LD_INT 39
13825: PUSH
13826: LD_INT 40
13828: PUSH
13829: LD_INT 41
13831: PUSH
13832: LD_INT 42
13834: PUSH
13835: LD_INT 43
13837: PUSH
13838: LD_INT 48
13840: PUSH
13841: LD_INT 49
13843: PUSH
13844: LD_INT 50
13846: PUSH
13847: LD_INT 51
13849: PUSH
13850: LD_INT 52
13852: PUSH
13853: LD_INT 53
13855: PUSH
13856: LD_INT 54
13858: PUSH
13859: LD_INT 55
13861: PUSH
13862: LD_INT 56
13864: PUSH
13865: LD_INT 60
13867: PUSH
13868: LD_INT 61
13870: PUSH
13871: LD_INT 62
13873: PUSH
13874: LD_INT 66
13876: PUSH
13877: LD_INT 67
13879: PUSH
13880: LD_INT 68
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: ST_TO_ADDR
13925: GO 14114
13927: LD_INT 3
13929: DOUBLE
13930: EQUAL
13931: IFTRUE 13935
13933: GO 14113
13935: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
13936: LD_ADDR_VAR 0 4
13940: PUSH
13941: LD_INT 46
13943: PUSH
13944: LD_INT 47
13946: PUSH
13947: LD_INT 1
13949: PUSH
13950: LD_INT 2
13952: PUSH
13953: LD_INT 11
13955: PUSH
13956: LD_INT 9
13958: PUSH
13959: LD_INT 20
13961: PUSH
13962: LD_INT 19
13964: PUSH
13965: LD_INT 21
13967: PUSH
13968: LD_INT 24
13970: PUSH
13971: LD_INT 22
13973: PUSH
13974: LD_INT 25
13976: PUSH
13977: LD_INT 28
13979: PUSH
13980: LD_INT 29
13982: PUSH
13983: LD_INT 31
13985: PUSH
13986: LD_INT 37
13988: PUSH
13989: LD_INT 38
13991: PUSH
13992: LD_INT 32
13994: PUSH
13995: LD_INT 27
13997: PUSH
13998: LD_INT 33
14000: PUSH
14001: LD_INT 69
14003: PUSH
14004: LD_INT 39
14006: PUSH
14007: LD_INT 34
14009: PUSH
14010: LD_INT 40
14012: PUSH
14013: LD_INT 71
14015: PUSH
14016: LD_INT 23
14018: PUSH
14019: LD_INT 44
14021: PUSH
14022: LD_INT 48
14024: PUSH
14025: LD_INT 49
14027: PUSH
14028: LD_INT 50
14030: PUSH
14031: LD_INT 51
14033: PUSH
14034: LD_INT 52
14036: PUSH
14037: LD_INT 53
14039: PUSH
14040: LD_INT 54
14042: PUSH
14043: LD_INT 55
14045: PUSH
14046: LD_INT 56
14048: PUSH
14049: LD_INT 57
14051: PUSH
14052: LD_INT 58
14054: PUSH
14055: LD_INT 59
14057: PUSH
14058: LD_INT 63
14060: PUSH
14061: LD_INT 64
14063: PUSH
14064: LD_INT 65
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: ST_TO_ADDR
14111: GO 14114
14113: POP
// if state > - 1 and state < 3 then
14114: LD_VAR 0 3
14118: PUSH
14119: LD_INT 1
14121: NEG
14122: GREATER
14123: PUSH
14124: LD_VAR 0 3
14128: PUSH
14129: LD_INT 3
14131: LESS
14132: AND
14133: IFFALSE 14190
// for i in result do
14135: LD_ADDR_VAR 0 5
14139: PUSH
14140: LD_VAR 0 4
14144: PUSH
14145: FOR_IN
14146: IFFALSE 14188
// if GetTech ( i , side ) <> state then
14148: LD_VAR 0 5
14152: PPUSH
14153: LD_VAR 0 1
14157: PPUSH
14158: CALL_OW 321
14162: PUSH
14163: LD_VAR 0 3
14167: NONEQUAL
14168: IFFALSE 14186
// result := result diff i ;
14170: LD_ADDR_VAR 0 4
14174: PUSH
14175: LD_VAR 0 4
14179: PUSH
14180: LD_VAR 0 5
14184: DIFF
14185: ST_TO_ADDR
14186: GO 14145
14188: POP
14189: POP
// end ;
14190: LD_VAR 0 4
14194: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14195: LD_INT 0
14197: PPUSH
14198: PPUSH
14199: PPUSH
// result := true ;
14200: LD_ADDR_VAR 0 3
14204: PUSH
14205: LD_INT 1
14207: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14208: LD_ADDR_VAR 0 5
14212: PUSH
14213: LD_VAR 0 2
14217: PPUSH
14218: CALL_OW 480
14222: ST_TO_ADDR
// if not tmp then
14223: LD_VAR 0 5
14227: NOT
14228: IFFALSE 14232
// exit ;
14230: GO 14281
// for i in tmp do
14232: LD_ADDR_VAR 0 4
14236: PUSH
14237: LD_VAR 0 5
14241: PUSH
14242: FOR_IN
14243: IFFALSE 14279
// if GetTech ( i , side ) <> state_researched then
14245: LD_VAR 0 4
14249: PPUSH
14250: LD_VAR 0 1
14254: PPUSH
14255: CALL_OW 321
14259: PUSH
14260: LD_INT 2
14262: NONEQUAL
14263: IFFALSE 14277
// begin result := false ;
14265: LD_ADDR_VAR 0 3
14269: PUSH
14270: LD_INT 0
14272: ST_TO_ADDR
// exit ;
14273: POP
14274: POP
14275: GO 14281
// end ;
14277: GO 14242
14279: POP
14280: POP
// end ;
14281: LD_VAR 0 3
14285: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14286: LD_INT 0
14288: PPUSH
14289: PPUSH
14290: PPUSH
14291: PPUSH
14292: PPUSH
14293: PPUSH
14294: PPUSH
14295: PPUSH
14296: PPUSH
14297: PPUSH
14298: PPUSH
14299: PPUSH
14300: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14301: LD_VAR 0 1
14305: NOT
14306: PUSH
14307: LD_VAR 0 1
14311: PPUSH
14312: CALL_OW 257
14316: PUSH
14317: LD_INT 9
14319: NONEQUAL
14320: OR
14321: IFFALSE 14325
// exit ;
14323: GO 14898
// side := GetSide ( unit ) ;
14325: LD_ADDR_VAR 0 9
14329: PUSH
14330: LD_VAR 0 1
14334: PPUSH
14335: CALL_OW 255
14339: ST_TO_ADDR
// tech_space := tech_spacanom ;
14340: LD_ADDR_VAR 0 12
14344: PUSH
14345: LD_INT 29
14347: ST_TO_ADDR
// tech_time := tech_taurad ;
14348: LD_ADDR_VAR 0 13
14352: PUSH
14353: LD_INT 28
14355: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14356: LD_ADDR_VAR 0 11
14360: PUSH
14361: LD_VAR 0 1
14365: PPUSH
14366: CALL_OW 310
14370: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14371: LD_VAR 0 11
14375: PPUSH
14376: CALL_OW 247
14380: PUSH
14381: LD_INT 2
14383: EQUAL
14384: IFFALSE 14388
// exit ;
14386: GO 14898
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14388: LD_ADDR_VAR 0 8
14392: PUSH
14393: LD_INT 81
14395: PUSH
14396: LD_VAR 0 9
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: LD_INT 3
14407: PUSH
14408: LD_INT 21
14410: PUSH
14411: LD_INT 3
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PPUSH
14426: CALL_OW 69
14430: ST_TO_ADDR
// if not tmp then
14431: LD_VAR 0 8
14435: NOT
14436: IFFALSE 14440
// exit ;
14438: GO 14898
// if in_unit then
14440: LD_VAR 0 11
14444: IFFALSE 14468
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14446: LD_ADDR_VAR 0 10
14450: PUSH
14451: LD_VAR 0 8
14455: PPUSH
14456: LD_VAR 0 11
14460: PPUSH
14461: CALL_OW 74
14465: ST_TO_ADDR
14466: GO 14488
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14468: LD_ADDR_VAR 0 10
14472: PUSH
14473: LD_VAR 0 8
14477: PPUSH
14478: LD_VAR 0 1
14482: PPUSH
14483: CALL_OW 74
14487: ST_TO_ADDR
// if not enemy then
14488: LD_VAR 0 10
14492: NOT
14493: IFFALSE 14497
// exit ;
14495: GO 14898
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14497: LD_VAR 0 11
14501: PUSH
14502: LD_VAR 0 11
14506: PPUSH
14507: LD_VAR 0 10
14511: PPUSH
14512: CALL_OW 296
14516: PUSH
14517: LD_INT 13
14519: GREATER
14520: AND
14521: PUSH
14522: LD_VAR 0 1
14526: PPUSH
14527: LD_VAR 0 10
14531: PPUSH
14532: CALL_OW 296
14536: PUSH
14537: LD_INT 12
14539: GREATER
14540: OR
14541: IFFALSE 14545
// exit ;
14543: GO 14898
// missile := [ 1 ] ;
14545: LD_ADDR_VAR 0 14
14549: PUSH
14550: LD_INT 1
14552: PUSH
14553: EMPTY
14554: LIST
14555: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14556: LD_VAR 0 9
14560: PPUSH
14561: LD_VAR 0 12
14565: PPUSH
14566: CALL_OW 325
14570: IFFALSE 14599
// missile := Insert ( missile , missile + 1 , 2 ) ;
14572: LD_ADDR_VAR 0 14
14576: PUSH
14577: LD_VAR 0 14
14581: PPUSH
14582: LD_VAR 0 14
14586: PUSH
14587: LD_INT 1
14589: PLUS
14590: PPUSH
14591: LD_INT 2
14593: PPUSH
14594: CALL_OW 2
14598: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14599: LD_VAR 0 9
14603: PPUSH
14604: LD_VAR 0 13
14608: PPUSH
14609: CALL_OW 325
14613: PUSH
14614: LD_VAR 0 10
14618: PPUSH
14619: CALL_OW 255
14623: PPUSH
14624: LD_VAR 0 13
14628: PPUSH
14629: CALL_OW 325
14633: NOT
14634: AND
14635: IFFALSE 14664
// missile := Insert ( missile , missile + 1 , 3 ) ;
14637: LD_ADDR_VAR 0 14
14641: PUSH
14642: LD_VAR 0 14
14646: PPUSH
14647: LD_VAR 0 14
14651: PUSH
14652: LD_INT 1
14654: PLUS
14655: PPUSH
14656: LD_INT 3
14658: PPUSH
14659: CALL_OW 2
14663: ST_TO_ADDR
// if missile < 2 then
14664: LD_VAR 0 14
14668: PUSH
14669: LD_INT 2
14671: LESS
14672: IFFALSE 14676
// exit ;
14674: GO 14898
// x := GetX ( enemy ) ;
14676: LD_ADDR_VAR 0 4
14680: PUSH
14681: LD_VAR 0 10
14685: PPUSH
14686: CALL_OW 250
14690: ST_TO_ADDR
// y := GetY ( enemy ) ;
14691: LD_ADDR_VAR 0 5
14695: PUSH
14696: LD_VAR 0 10
14700: PPUSH
14701: CALL_OW 251
14705: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14706: LD_ADDR_VAR 0 6
14710: PUSH
14711: LD_VAR 0 4
14715: PUSH
14716: LD_INT 1
14718: NEG
14719: PPUSH
14720: LD_INT 1
14722: PPUSH
14723: CALL_OW 12
14727: PLUS
14728: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14729: LD_ADDR_VAR 0 7
14733: PUSH
14734: LD_VAR 0 5
14738: PUSH
14739: LD_INT 1
14741: NEG
14742: PPUSH
14743: LD_INT 1
14745: PPUSH
14746: CALL_OW 12
14750: PLUS
14751: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14752: LD_VAR 0 6
14756: PPUSH
14757: LD_VAR 0 7
14761: PPUSH
14762: CALL_OW 488
14766: NOT
14767: IFFALSE 14789
// begin _x := x ;
14769: LD_ADDR_VAR 0 6
14773: PUSH
14774: LD_VAR 0 4
14778: ST_TO_ADDR
// _y := y ;
14779: LD_ADDR_VAR 0 7
14783: PUSH
14784: LD_VAR 0 5
14788: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14789: LD_ADDR_VAR 0 3
14793: PUSH
14794: LD_INT 1
14796: PPUSH
14797: LD_VAR 0 14
14801: PPUSH
14802: CALL_OW 12
14806: ST_TO_ADDR
// case i of 1 :
14807: LD_VAR 0 3
14811: PUSH
14812: LD_INT 1
14814: DOUBLE
14815: EQUAL
14816: IFTRUE 14820
14818: GO 14837
14820: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14821: LD_VAR 0 1
14825: PPUSH
14826: LD_VAR 0 10
14830: PPUSH
14831: CALL_OW 115
14835: GO 14898
14837: LD_INT 2
14839: DOUBLE
14840: EQUAL
14841: IFTRUE 14845
14843: GO 14867
14845: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14846: LD_VAR 0 1
14850: PPUSH
14851: LD_VAR 0 6
14855: PPUSH
14856: LD_VAR 0 7
14860: PPUSH
14861: CALL_OW 153
14865: GO 14898
14867: LD_INT 3
14869: DOUBLE
14870: EQUAL
14871: IFTRUE 14875
14873: GO 14897
14875: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14876: LD_VAR 0 1
14880: PPUSH
14881: LD_VAR 0 6
14885: PPUSH
14886: LD_VAR 0 7
14890: PPUSH
14891: CALL_OW 154
14895: GO 14898
14897: POP
// end ;
14898: LD_VAR 0 2
14902: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14903: LD_INT 0
14905: PPUSH
14906: PPUSH
14907: PPUSH
14908: PPUSH
14909: PPUSH
14910: PPUSH
// if not unit or not building then
14911: LD_VAR 0 1
14915: NOT
14916: PUSH
14917: LD_VAR 0 2
14921: NOT
14922: OR
14923: IFFALSE 14927
// exit ;
14925: GO 15082
// x := GetX ( building ) ;
14927: LD_ADDR_VAR 0 5
14931: PUSH
14932: LD_VAR 0 2
14936: PPUSH
14937: CALL_OW 250
14941: ST_TO_ADDR
// y := GetY ( building ) ;
14942: LD_ADDR_VAR 0 6
14946: PUSH
14947: LD_VAR 0 2
14951: PPUSH
14952: CALL_OW 251
14956: ST_TO_ADDR
// for i = 0 to 5 do
14957: LD_ADDR_VAR 0 4
14961: PUSH
14962: DOUBLE
14963: LD_INT 0
14965: DEC
14966: ST_TO_ADDR
14967: LD_INT 5
14969: PUSH
14970: FOR_TO
14971: IFFALSE 15080
// begin _x := ShiftX ( x , i , 3 ) ;
14973: LD_ADDR_VAR 0 7
14977: PUSH
14978: LD_VAR 0 5
14982: PPUSH
14983: LD_VAR 0 4
14987: PPUSH
14988: LD_INT 3
14990: PPUSH
14991: CALL_OW 272
14995: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
14996: LD_ADDR_VAR 0 8
15000: PUSH
15001: LD_VAR 0 6
15005: PPUSH
15006: LD_VAR 0 4
15010: PPUSH
15011: LD_INT 3
15013: PPUSH
15014: CALL_OW 273
15018: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
15019: LD_VAR 0 7
15023: PPUSH
15024: LD_VAR 0 8
15028: PPUSH
15029: CALL_OW 428
15033: PUSH
15034: LD_INT 0
15036: EQUAL
15037: PUSH
15038: LD_VAR 0 7
15042: PPUSH
15043: LD_VAR 0 8
15047: PPUSH
15048: CALL_OW 488
15052: AND
15053: IFFALSE 15078
// begin ComMoveXY ( unit , _x , _y ) ;
15055: LD_VAR 0 1
15059: PPUSH
15060: LD_VAR 0 7
15064: PPUSH
15065: LD_VAR 0 8
15069: PPUSH
15070: CALL_OW 111
// exit ;
15074: POP
15075: POP
15076: GO 15082
// end ; end ;
15078: GO 14970
15080: POP
15081: POP
// end ;
15082: LD_VAR 0 3
15086: RET
// export function ScanBase ( side , base_area ) ; begin
15087: LD_INT 0
15089: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15090: LD_ADDR_VAR 0 3
15094: PUSH
15095: LD_VAR 0 2
15099: PPUSH
15100: LD_INT 81
15102: PUSH
15103: LD_VAR 0 1
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PPUSH
15112: CALL_OW 70
15116: ST_TO_ADDR
// end ;
15117: LD_VAR 0 3
15121: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
15122: LD_INT 0
15124: PPUSH
15125: PPUSH
15126: PPUSH
15127: PPUSH
15128: PPUSH
15129: PPUSH
15130: PPUSH
15131: PPUSH
15132: PPUSH
15133: PPUSH
15134: PPUSH
15135: PPUSH
15136: PPUSH
15137: PPUSH
15138: PPUSH
15139: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
15140: LD_ADDR_VAR 0 12
15144: PUSH
15145: LD_EXP 57
15149: PUSH
15150: LD_VAR 0 1
15154: ARRAY
15155: PPUSH
15156: LD_INT 25
15158: PUSH
15159: LD_INT 3
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: PPUSH
15166: CALL_OW 72
15170: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
15171: LD_ADDR_VAR 0 8
15175: PUSH
15176: LD_EXP 57
15180: PUSH
15181: LD_VAR 0 1
15185: ARRAY
15186: PPUSH
15187: LD_INT 2
15189: PUSH
15190: LD_INT 25
15192: PUSH
15193: LD_INT 1
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: LD_INT 25
15202: PUSH
15203: LD_INT 5
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: LD_INT 25
15212: PUSH
15213: LD_INT 8
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 25
15222: PUSH
15223: LD_INT 9
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: PPUSH
15237: CALL_OW 72
15241: ST_TO_ADDR
// if not defenders and not solds then
15242: LD_VAR 0 2
15246: NOT
15247: PUSH
15248: LD_VAR 0 8
15252: NOT
15253: AND
15254: IFFALSE 15258
// exit ;
15256: GO 16624
// depot_under_attack := false ;
15258: LD_ADDR_VAR 0 16
15262: PUSH
15263: LD_INT 0
15265: ST_TO_ADDR
// sold_defenders := [ ] ;
15266: LD_ADDR_VAR 0 17
15270: PUSH
15271: EMPTY
15272: ST_TO_ADDR
// if mechs then
15273: LD_VAR 0 12
15277: IFFALSE 15406
// for i in defenders do
15279: LD_ADDR_VAR 0 5
15283: PUSH
15284: LD_VAR 0 2
15288: PUSH
15289: FOR_IN
15290: IFFALSE 15404
// begin SetTag ( i , 20 ) ;
15292: LD_VAR 0 5
15296: PPUSH
15297: LD_INT 20
15299: PPUSH
15300: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
15304: LD_VAR 0 5
15308: PPUSH
15309: CALL_OW 263
15313: PUSH
15314: LD_INT 1
15316: EQUAL
15317: PUSH
15318: LD_VAR 0 5
15322: PPUSH
15323: CALL_OW 311
15327: NOT
15328: AND
15329: PUSH
15330: LD_VAR 0 12
15334: AND
15335: IFFALSE 15402
// begin un := mechs [ 1 ] ;
15337: LD_ADDR_VAR 0 10
15341: PUSH
15342: LD_VAR 0 12
15346: PUSH
15347: LD_INT 1
15349: ARRAY
15350: ST_TO_ADDR
// ComExitBuilding ( un ) ;
15351: LD_VAR 0 10
15355: PPUSH
15356: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
15360: LD_VAR 0 10
15364: PPUSH
15365: LD_VAR 0 5
15369: PPUSH
15370: CALL_OW 180
// SetTag ( un , 19 ) ;
15374: LD_VAR 0 10
15378: PPUSH
15379: LD_INT 19
15381: PPUSH
15382: CALL_OW 109
// mechs := mechs diff un ;
15386: LD_ADDR_VAR 0 12
15390: PUSH
15391: LD_VAR 0 12
15395: PUSH
15396: LD_VAR 0 10
15400: DIFF
15401: ST_TO_ADDR
// end ; end ;
15402: GO 15289
15404: POP
15405: POP
// if solds then
15406: LD_VAR 0 8
15410: IFFALSE 15469
// for i in solds do
15412: LD_ADDR_VAR 0 5
15416: PUSH
15417: LD_VAR 0 8
15421: PUSH
15422: FOR_IN
15423: IFFALSE 15467
// if not GetTag ( i ) then
15425: LD_VAR 0 5
15429: PPUSH
15430: CALL_OW 110
15434: NOT
15435: IFFALSE 15465
// begin defenders := defenders union i ;
15437: LD_ADDR_VAR 0 2
15441: PUSH
15442: LD_VAR 0 2
15446: PUSH
15447: LD_VAR 0 5
15451: UNION
15452: ST_TO_ADDR
// SetTag ( i , 18 ) ;
15453: LD_VAR 0 5
15457: PPUSH
15458: LD_INT 18
15460: PPUSH
15461: CALL_OW 109
// end ;
15465: GO 15422
15467: POP
15468: POP
// repeat wait ( 0 0$1 ) ;
15469: LD_INT 35
15471: PPUSH
15472: CALL_OW 67
// enemy := mc_scan [ base ] ;
15476: LD_ADDR_VAR 0 3
15480: PUSH
15481: LD_EXP 80
15485: PUSH
15486: LD_VAR 0 1
15490: ARRAY
15491: ST_TO_ADDR
// for i in defenders do
15492: LD_ADDR_VAR 0 5
15496: PUSH
15497: LD_VAR 0 2
15501: PUSH
15502: FOR_IN
15503: IFFALSE 16188
// begin e := NearestUnitToUnit ( enemy , i ) ;
15505: LD_ADDR_VAR 0 13
15509: PUSH
15510: LD_VAR 0 3
15514: PPUSH
15515: LD_VAR 0 5
15519: PPUSH
15520: CALL_OW 74
15524: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
15525: LD_ADDR_VAR 0 16
15529: PUSH
15530: LD_EXP 57
15534: PUSH
15535: LD_VAR 0 1
15539: ARRAY
15540: PPUSH
15541: LD_INT 2
15543: PUSH
15544: LD_INT 30
15546: PUSH
15547: LD_INT 0
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 30
15556: PUSH
15557: LD_INT 1
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: LIST
15568: PPUSH
15569: CALL_OW 72
15573: NOT
15574: PUSH
15575: LD_EXP 57
15579: PUSH
15580: LD_VAR 0 1
15584: ARRAY
15585: PPUSH
15586: LD_INT 2
15588: PUSH
15589: LD_INT 30
15591: PUSH
15592: LD_INT 0
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: LD_INT 30
15601: PUSH
15602: LD_INT 1
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: LIST
15613: PPUSH
15614: CALL_OW 72
15618: PPUSH
15619: CALL_OW 256
15623: PUSH
15624: LD_INT 600
15626: LESS
15627: OR
15628: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
15629: LD_VAR 0 5
15633: PPUSH
15634: CALL_OW 247
15638: PUSH
15639: LD_INT 2
15641: DOUBLE
15642: EQUAL
15643: IFTRUE 15647
15645: GO 15894
15647: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
15648: LD_VAR 0 5
15652: PPUSH
15653: CALL_OW 256
15657: PUSH
15658: LD_INT 650
15660: GREATER
15661: PUSH
15662: LD_VAR 0 5
15666: PPUSH
15667: LD_VAR 0 13
15671: PPUSH
15672: CALL_OW 296
15676: PUSH
15677: LD_INT 40
15679: LESS
15680: AND
15681: IFFALSE 15699
// ComAttackUnit ( i , e ) else
15683: LD_VAR 0 5
15687: PPUSH
15688: LD_VAR 0 13
15692: PPUSH
15693: CALL_OW 115
15697: GO 15777
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
15699: LD_VAR 0 5
15703: PPUSH
15704: LD_VAR 0 13
15708: PPUSH
15709: CALL_OW 296
15713: PUSH
15714: LD_INT 30
15716: GREATEREQUAL
15717: PUSH
15718: LD_VAR 0 5
15722: PPUSH
15723: CALL_OW 256
15727: PUSH
15728: LD_INT 650
15730: LESSEQUAL
15731: OR
15732: PUSH
15733: LD_VAR 0 5
15737: PPUSH
15738: LD_EXP 81
15742: PUSH
15743: LD_VAR 0 1
15747: ARRAY
15748: PPUSH
15749: CALL_OW 308
15753: NOT
15754: AND
15755: IFFALSE 15777
// ComMoveToArea ( i , mc_parking [ base ] ) ;
15757: LD_VAR 0 5
15761: PPUSH
15762: LD_EXP 81
15766: PUSH
15767: LD_VAR 0 1
15771: ARRAY
15772: PPUSH
15773: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
15777: LD_VAR 0 5
15781: PPUSH
15782: CALL_OW 256
15786: PUSH
15787: LD_INT 998
15789: LESS
15790: PUSH
15791: LD_VAR 0 5
15795: PPUSH
15796: CALL_OW 263
15800: PUSH
15801: LD_INT 1
15803: EQUAL
15804: AND
15805: PUSH
15806: LD_VAR 0 5
15810: PPUSH
15811: CALL_OW 311
15815: AND
15816: PUSH
15817: LD_VAR 0 5
15821: PPUSH
15822: LD_EXP 81
15826: PUSH
15827: LD_VAR 0 1
15831: ARRAY
15832: PPUSH
15833: CALL_OW 308
15837: AND
15838: IFFALSE 15892
// begin mech := IsDrivenBy ( i ) ;
15840: LD_ADDR_VAR 0 9
15844: PUSH
15845: LD_VAR 0 5
15849: PPUSH
15850: CALL_OW 311
15854: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
15855: LD_VAR 0 9
15859: PPUSH
15860: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
15864: LD_VAR 0 9
15868: PPUSH
15869: LD_VAR 0 5
15873: PPUSH
15874: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
15878: LD_VAR 0 9
15882: PPUSH
15883: LD_VAR 0 5
15887: PPUSH
15888: CALL_OW 180
// end ; end ; unit_human :
15892: GO 16159
15894: LD_INT 1
15896: DOUBLE
15897: EQUAL
15898: IFTRUE 15902
15900: GO 16158
15902: POP
// begin b := IsInUnit ( i ) ;
15903: LD_ADDR_VAR 0 18
15907: PUSH
15908: LD_VAR 0 5
15912: PPUSH
15913: CALL_OW 310
15917: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
15918: LD_ADDR_VAR 0 19
15922: PUSH
15923: LD_VAR 0 18
15927: NOT
15928: PUSH
15929: LD_VAR 0 18
15933: PPUSH
15934: CALL_OW 266
15938: PUSH
15939: LD_INT 32
15941: PUSH
15942: LD_INT 31
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: IN
15949: OR
15950: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
15951: LD_VAR 0 16
15955: PUSH
15956: LD_VAR 0 2
15960: PPUSH
15961: LD_INT 21
15963: PUSH
15964: LD_INT 2
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PPUSH
15971: CALL_OW 72
15975: PUSH
15976: LD_INT 1
15978: LESSEQUAL
15979: OR
15980: PUSH
15981: LD_VAR 0 19
15985: AND
15986: PUSH
15987: LD_VAR 0 5
15991: PUSH
15992: LD_VAR 0 17
15996: IN
15997: NOT
15998: AND
15999: IFFALSE 16092
// begin if b then
16001: LD_VAR 0 18
16005: IFFALSE 16054
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
16007: LD_VAR 0 18
16011: PPUSH
16012: LD_VAR 0 3
16016: PPUSH
16017: LD_VAR 0 18
16021: PPUSH
16022: CALL_OW 74
16026: PPUSH
16027: CALL_OW 296
16031: PUSH
16032: LD_INT 10
16034: LESS
16035: PUSH
16036: LD_VAR 0 18
16040: PPUSH
16041: CALL_OW 461
16045: PUSH
16046: LD_INT 7
16048: NONEQUAL
16049: AND
16050: IFFALSE 16054
// continue ;
16052: GO 15502
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
16054: LD_ADDR_VAR 0 17
16058: PUSH
16059: LD_VAR 0 17
16063: PPUSH
16064: LD_VAR 0 17
16068: PUSH
16069: LD_INT 1
16071: PLUS
16072: PPUSH
16073: LD_VAR 0 5
16077: PPUSH
16078: CALL_OW 1
16082: ST_TO_ADDR
// ComExitBuilding ( i ) ;
16083: LD_VAR 0 5
16087: PPUSH
16088: CALL_OW 122
// end ; if sold_defenders then
16092: LD_VAR 0 17
16096: IFFALSE 16156
// if i in sold_defenders then
16098: LD_VAR 0 5
16102: PUSH
16103: LD_VAR 0 17
16107: IN
16108: IFFALSE 16156
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
16110: LD_VAR 0 5
16114: PPUSH
16115: CALL_OW 314
16119: NOT
16120: PUSH
16121: LD_VAR 0 5
16125: PPUSH
16126: LD_VAR 0 13
16130: PPUSH
16131: CALL_OW 296
16135: PUSH
16136: LD_INT 30
16138: LESS
16139: AND
16140: IFFALSE 16156
// ComAttackUnit ( i , e ) ;
16142: LD_VAR 0 5
16146: PPUSH
16147: LD_VAR 0 13
16151: PPUSH
16152: CALL_OW 115
// end ; end ; end ;
16156: GO 16159
16158: POP
// if IsDead ( i ) then
16159: LD_VAR 0 5
16163: PPUSH
16164: CALL_OW 301
16168: IFFALSE 16186
// defenders := defenders diff i ;
16170: LD_ADDR_VAR 0 2
16174: PUSH
16175: LD_VAR 0 2
16179: PUSH
16180: LD_VAR 0 5
16184: DIFF
16185: ST_TO_ADDR
// end ;
16186: GO 15502
16188: POP
16189: POP
// until not enemy or not defenders ;
16190: LD_VAR 0 3
16194: NOT
16195: PUSH
16196: LD_VAR 0 2
16200: NOT
16201: OR
16202: IFFALSE 15469
// MC_Reset ( base , 18 ) ;
16204: LD_VAR 0 1
16208: PPUSH
16209: LD_INT 18
16211: PPUSH
16212: CALL 54992 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
16216: LD_ADDR_VAR 0 2
16220: PUSH
16221: LD_VAR 0 2
16225: PUSH
16226: LD_VAR 0 2
16230: PPUSH
16231: LD_INT 2
16233: PUSH
16234: LD_INT 25
16236: PUSH
16237: LD_INT 1
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 25
16246: PUSH
16247: LD_INT 5
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 25
16256: PUSH
16257: LD_INT 8
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PUSH
16264: LD_INT 25
16266: PUSH
16267: LD_INT 9
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: PPUSH
16281: CALL_OW 72
16285: DIFF
16286: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
16287: LD_VAR 0 3
16291: NOT
16292: PUSH
16293: LD_VAR 0 2
16297: PPUSH
16298: LD_INT 21
16300: PUSH
16301: LD_INT 2
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PPUSH
16308: CALL_OW 72
16312: AND
16313: IFFALSE 16575
// begin tmp := FilterByTag ( defenders , 19 ) ;
16315: LD_ADDR_VAR 0 11
16319: PUSH
16320: LD_VAR 0 2
16324: PPUSH
16325: LD_INT 19
16327: PPUSH
16328: CALL 51086 0 2
16332: ST_TO_ADDR
// if tmp then
16333: LD_VAR 0 11
16337: IFFALSE 16407
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
16339: LD_ADDR_VAR 0 11
16343: PUSH
16344: LD_VAR 0 11
16348: PPUSH
16349: LD_INT 25
16351: PUSH
16352: LD_INT 3
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PPUSH
16359: CALL_OW 72
16363: ST_TO_ADDR
// if tmp then
16364: LD_VAR 0 11
16368: IFFALSE 16407
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
16370: LD_ADDR_EXP 69
16374: PUSH
16375: LD_EXP 69
16379: PPUSH
16380: LD_VAR 0 1
16384: PPUSH
16385: LD_EXP 69
16389: PUSH
16390: LD_VAR 0 1
16394: ARRAY
16395: PUSH
16396: LD_VAR 0 11
16400: UNION
16401: PPUSH
16402: CALL_OW 1
16406: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
16407: LD_VAR 0 1
16411: PPUSH
16412: LD_INT 19
16414: PPUSH
16415: CALL 54992 0 2
// repeat wait ( 0 0$1 ) ;
16419: LD_INT 35
16421: PPUSH
16422: CALL_OW 67
// for i in defenders do
16426: LD_ADDR_VAR 0 5
16430: PUSH
16431: LD_VAR 0 2
16435: PUSH
16436: FOR_IN
16437: IFFALSE 16526
// begin if not IsInArea ( i , mc_parking [ base ] ) then
16439: LD_VAR 0 5
16443: PPUSH
16444: LD_EXP 81
16448: PUSH
16449: LD_VAR 0 1
16453: ARRAY
16454: PPUSH
16455: CALL_OW 308
16459: NOT
16460: IFFALSE 16484
// ComMoveToArea ( i , mc_parking [ base ] ) else
16462: LD_VAR 0 5
16466: PPUSH
16467: LD_EXP 81
16471: PUSH
16472: LD_VAR 0 1
16476: ARRAY
16477: PPUSH
16478: CALL_OW 113
16482: GO 16524
// if GetControl ( i ) = control_manual then
16484: LD_VAR 0 5
16488: PPUSH
16489: CALL_OW 263
16493: PUSH
16494: LD_INT 1
16496: EQUAL
16497: IFFALSE 16524
// if IsDrivenBy ( i ) then
16499: LD_VAR 0 5
16503: PPUSH
16504: CALL_OW 311
16508: IFFALSE 16524
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
16510: LD_VAR 0 5
16514: PPUSH
16515: CALL_OW 311
16519: PPUSH
16520: CALL_OW 121
// end ;
16524: GO 16436
16526: POP
16527: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
16528: LD_VAR 0 2
16532: PPUSH
16533: LD_INT 95
16535: PUSH
16536: LD_EXP 81
16540: PUSH
16541: LD_VAR 0 1
16545: ARRAY
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PPUSH
16551: CALL_OW 72
16555: PUSH
16556: LD_VAR 0 2
16560: EQUAL
16561: PUSH
16562: LD_EXP 80
16566: PUSH
16567: LD_VAR 0 1
16571: ARRAY
16572: OR
16573: IFFALSE 16419
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
16575: LD_ADDR_EXP 79
16579: PUSH
16580: LD_EXP 79
16584: PPUSH
16585: LD_VAR 0 1
16589: PPUSH
16590: LD_EXP 79
16594: PUSH
16595: LD_VAR 0 1
16599: ARRAY
16600: PUSH
16601: LD_VAR 0 2
16605: UNION
16606: PPUSH
16607: CALL_OW 1
16611: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
16612: LD_VAR 0 1
16616: PPUSH
16617: LD_INT 20
16619: PPUSH
16620: CALL 54992 0 2
// end ;
16624: LD_VAR 0 4
16628: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16629: LD_INT 0
16631: PPUSH
16632: PPUSH
16633: PPUSH
16634: PPUSH
// result := false ;
16635: LD_ADDR_VAR 0 2
16639: PUSH
16640: LD_INT 0
16642: ST_TO_ADDR
// side := GetSide ( unit ) ;
16643: LD_ADDR_VAR 0 3
16647: PUSH
16648: LD_VAR 0 1
16652: PPUSH
16653: CALL_OW 255
16657: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16658: LD_ADDR_VAR 0 4
16662: PUSH
16663: LD_VAR 0 1
16667: PPUSH
16668: CALL_OW 248
16672: ST_TO_ADDR
// case nat of 1 :
16673: LD_VAR 0 4
16677: PUSH
16678: LD_INT 1
16680: DOUBLE
16681: EQUAL
16682: IFTRUE 16686
16684: GO 16697
16686: POP
// tech := tech_lassight ; 2 :
16687: LD_ADDR_VAR 0 5
16691: PUSH
16692: LD_INT 12
16694: ST_TO_ADDR
16695: GO 16736
16697: LD_INT 2
16699: DOUBLE
16700: EQUAL
16701: IFTRUE 16705
16703: GO 16716
16705: POP
// tech := tech_mortar ; 3 :
16706: LD_ADDR_VAR 0 5
16710: PUSH
16711: LD_INT 41
16713: ST_TO_ADDR
16714: GO 16736
16716: LD_INT 3
16718: DOUBLE
16719: EQUAL
16720: IFTRUE 16724
16722: GO 16735
16724: POP
// tech := tech_bazooka ; end ;
16725: LD_ADDR_VAR 0 5
16729: PUSH
16730: LD_INT 44
16732: ST_TO_ADDR
16733: GO 16736
16735: POP
// if Researched ( side , tech ) then
16736: LD_VAR 0 3
16740: PPUSH
16741: LD_VAR 0 5
16745: PPUSH
16746: CALL_OW 325
16750: IFFALSE 16777
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
16752: LD_ADDR_VAR 0 2
16756: PUSH
16757: LD_INT 5
16759: PUSH
16760: LD_INT 8
16762: PUSH
16763: LD_INT 9
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: LIST
16770: PUSH
16771: LD_VAR 0 4
16775: ARRAY
16776: ST_TO_ADDR
// end ;
16777: LD_VAR 0 2
16781: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
16782: LD_INT 0
16784: PPUSH
16785: PPUSH
16786: PPUSH
// if not mines then
16787: LD_VAR 0 2
16791: NOT
16792: IFFALSE 16796
// exit ;
16794: GO 16940
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16796: LD_ADDR_VAR 0 5
16800: PUSH
16801: LD_INT 81
16803: PUSH
16804: LD_VAR 0 1
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 3
16815: PUSH
16816: LD_INT 21
16818: PUSH
16819: LD_INT 3
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PPUSH
16834: CALL_OW 69
16838: ST_TO_ADDR
// for i in mines do
16839: LD_ADDR_VAR 0 4
16843: PUSH
16844: LD_VAR 0 2
16848: PUSH
16849: FOR_IN
16850: IFFALSE 16938
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
16852: LD_VAR 0 4
16856: PUSH
16857: LD_INT 1
16859: ARRAY
16860: PPUSH
16861: LD_VAR 0 4
16865: PUSH
16866: LD_INT 2
16868: ARRAY
16869: PPUSH
16870: CALL_OW 458
16874: NOT
16875: IFFALSE 16879
// continue ;
16877: GO 16849
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
16879: LD_VAR 0 4
16883: PUSH
16884: LD_INT 1
16886: ARRAY
16887: PPUSH
16888: LD_VAR 0 4
16892: PUSH
16893: LD_INT 2
16895: ARRAY
16896: PPUSH
16897: CALL_OW 428
16901: PUSH
16902: LD_VAR 0 5
16906: IN
16907: IFFALSE 16936
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
16909: LD_VAR 0 4
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: LD_VAR 0 4
16922: PUSH
16923: LD_INT 2
16925: ARRAY
16926: PPUSH
16927: LD_VAR 0 1
16931: PPUSH
16932: CALL_OW 456
// end ;
16936: GO 16849
16938: POP
16939: POP
// end ;
16940: LD_VAR 0 3
16944: RET
// export function Count ( array ) ; var i ; begin
16945: LD_INT 0
16947: PPUSH
16948: PPUSH
// result := 0 ;
16949: LD_ADDR_VAR 0 2
16953: PUSH
16954: LD_INT 0
16956: ST_TO_ADDR
// for i in array do
16957: LD_ADDR_VAR 0 3
16961: PUSH
16962: LD_VAR 0 1
16966: PUSH
16967: FOR_IN
16968: IFFALSE 16992
// if i then
16970: LD_VAR 0 3
16974: IFFALSE 16990
// result := result + 1 ;
16976: LD_ADDR_VAR 0 2
16980: PUSH
16981: LD_VAR 0 2
16985: PUSH
16986: LD_INT 1
16988: PLUS
16989: ST_TO_ADDR
16990: GO 16967
16992: POP
16993: POP
// end ;
16994: LD_VAR 0 2
16998: RET
// export function IsEmpty ( building ) ; begin
16999: LD_INT 0
17001: PPUSH
// if not building then
17002: LD_VAR 0 1
17006: NOT
17007: IFFALSE 17011
// exit ;
17009: GO 17054
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17011: LD_ADDR_VAR 0 2
17015: PUSH
17016: LD_VAR 0 1
17020: PUSH
17021: LD_INT 22
17023: PUSH
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 255
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 58
17040: PUSH
17041: EMPTY
17042: LIST
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PPUSH
17048: CALL_OW 69
17052: IN
17053: ST_TO_ADDR
// end ;
17054: LD_VAR 0 2
17058: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17059: LD_INT 0
17061: PPUSH
17062: PPUSH
17063: PPUSH
17064: PPUSH
// tmp := [ ] ;
17065: LD_ADDR_VAR 0 3
17069: PUSH
17070: EMPTY
17071: ST_TO_ADDR
// list := [ ] ;
17072: LD_ADDR_VAR 0 5
17076: PUSH
17077: EMPTY
17078: ST_TO_ADDR
// for i = 16 to 25 do
17079: LD_ADDR_VAR 0 4
17083: PUSH
17084: DOUBLE
17085: LD_INT 16
17087: DEC
17088: ST_TO_ADDR
17089: LD_INT 25
17091: PUSH
17092: FOR_TO
17093: IFFALSE 17166
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17095: LD_ADDR_VAR 0 3
17099: PUSH
17100: LD_VAR 0 3
17104: PUSH
17105: LD_INT 22
17107: PUSH
17108: LD_VAR 0 1
17112: PPUSH
17113: CALL_OW 255
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 91
17124: PUSH
17125: LD_VAR 0 1
17129: PUSH
17130: LD_INT 6
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 30
17140: PUSH
17141: LD_VAR 0 4
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: LIST
17154: PUSH
17155: EMPTY
17156: LIST
17157: PPUSH
17158: CALL_OW 69
17162: ADD
17163: ST_TO_ADDR
17164: GO 17092
17166: POP
17167: POP
// for i = 1 to tmp do
17168: LD_ADDR_VAR 0 4
17172: PUSH
17173: DOUBLE
17174: LD_INT 1
17176: DEC
17177: ST_TO_ADDR
17178: LD_VAR 0 3
17182: PUSH
17183: FOR_TO
17184: IFFALSE 17272
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17186: LD_ADDR_VAR 0 5
17190: PUSH
17191: LD_VAR 0 5
17195: PUSH
17196: LD_VAR 0 3
17200: PUSH
17201: LD_VAR 0 4
17205: ARRAY
17206: PPUSH
17207: CALL_OW 266
17211: PUSH
17212: LD_VAR 0 3
17216: PUSH
17217: LD_VAR 0 4
17221: ARRAY
17222: PPUSH
17223: CALL_OW 250
17227: PUSH
17228: LD_VAR 0 3
17232: PUSH
17233: LD_VAR 0 4
17237: ARRAY
17238: PPUSH
17239: CALL_OW 251
17243: PUSH
17244: LD_VAR 0 3
17248: PUSH
17249: LD_VAR 0 4
17253: ARRAY
17254: PPUSH
17255: CALL_OW 254
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: PUSH
17266: EMPTY
17267: LIST
17268: ADD
17269: ST_TO_ADDR
17270: GO 17183
17272: POP
17273: POP
// result := list ;
17274: LD_ADDR_VAR 0 2
17278: PUSH
17279: LD_VAR 0 5
17283: ST_TO_ADDR
// end ;
17284: LD_VAR 0 2
17288: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17289: LD_INT 0
17291: PPUSH
17292: PPUSH
17293: PPUSH
17294: PPUSH
17295: PPUSH
17296: PPUSH
17297: PPUSH
// if not factory then
17298: LD_VAR 0 1
17302: NOT
17303: IFFALSE 17307
// exit ;
17305: GO 17832
// if control = control_apeman then
17307: LD_VAR 0 4
17311: PUSH
17312: LD_INT 5
17314: EQUAL
17315: IFFALSE 17424
// begin tmp := UnitsInside ( factory ) ;
17317: LD_ADDR_VAR 0 8
17321: PUSH
17322: LD_VAR 0 1
17326: PPUSH
17327: CALL_OW 313
17331: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17332: LD_VAR 0 8
17336: PPUSH
17337: LD_INT 25
17339: PUSH
17340: LD_INT 12
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PPUSH
17347: CALL_OW 72
17351: NOT
17352: IFFALSE 17362
// control := control_manual ;
17354: LD_ADDR_VAR 0 4
17358: PUSH
17359: LD_INT 1
17361: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17362: LD_ADDR_VAR 0 8
17366: PUSH
17367: LD_VAR 0 1
17371: PPUSH
17372: CALL 17059 0 1
17376: ST_TO_ADDR
// if tmp then
17377: LD_VAR 0 8
17381: IFFALSE 17424
// begin for i in tmp do
17383: LD_ADDR_VAR 0 7
17387: PUSH
17388: LD_VAR 0 8
17392: PUSH
17393: FOR_IN
17394: IFFALSE 17422
// if i [ 1 ] = b_ext_radar then
17396: LD_VAR 0 7
17400: PUSH
17401: LD_INT 1
17403: ARRAY
17404: PUSH
17405: LD_INT 20
17407: EQUAL
17408: IFFALSE 17420
// begin control := control_remote ;
17410: LD_ADDR_VAR 0 4
17414: PUSH
17415: LD_INT 2
17417: ST_TO_ADDR
// break ;
17418: GO 17422
// end ;
17420: GO 17393
17422: POP
17423: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17424: LD_VAR 0 1
17428: PPUSH
17429: LD_VAR 0 2
17433: PPUSH
17434: LD_VAR 0 3
17438: PPUSH
17439: LD_VAR 0 4
17443: PPUSH
17444: LD_VAR 0 5
17448: PPUSH
17449: CALL_OW 448
17453: IFFALSE 17488
// begin result := [ chassis , engine , control , weapon ] ;
17455: LD_ADDR_VAR 0 6
17459: PUSH
17460: LD_VAR 0 2
17464: PUSH
17465: LD_VAR 0 3
17469: PUSH
17470: LD_VAR 0 4
17474: PUSH
17475: LD_VAR 0 5
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: ST_TO_ADDR
// exit ;
17486: GO 17832
// end ; _chassis := AvailableChassisList ( factory ) ;
17488: LD_ADDR_VAR 0 9
17492: PUSH
17493: LD_VAR 0 1
17497: PPUSH
17498: CALL_OW 475
17502: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17503: LD_ADDR_VAR 0 11
17507: PUSH
17508: LD_VAR 0 1
17512: PPUSH
17513: CALL_OW 476
17517: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17518: LD_ADDR_VAR 0 12
17522: PUSH
17523: LD_VAR 0 1
17527: PPUSH
17528: CALL_OW 477
17532: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17533: LD_ADDR_VAR 0 10
17537: PUSH
17538: LD_VAR 0 1
17542: PPUSH
17543: CALL_OW 478
17547: ST_TO_ADDR
// if not chassis in _chassis then
17548: LD_VAR 0 2
17552: PUSH
17553: LD_VAR 0 9
17557: IN
17558: NOT
17559: IFFALSE 17585
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17561: LD_ADDR_VAR 0 2
17565: PUSH
17566: LD_VAR 0 9
17570: PUSH
17571: LD_INT 1
17573: PPUSH
17574: LD_VAR 0 9
17578: PPUSH
17579: CALL_OW 12
17583: ARRAY
17584: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17585: LD_VAR 0 2
17589: PPUSH
17590: LD_VAR 0 3
17594: PPUSH
17595: CALL 17837 0 2
17599: NOT
17600: IFFALSE 17659
// repeat engine := _engine [ 1 ] ;
17602: LD_ADDR_VAR 0 3
17606: PUSH
17607: LD_VAR 0 11
17611: PUSH
17612: LD_INT 1
17614: ARRAY
17615: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17616: LD_ADDR_VAR 0 11
17620: PUSH
17621: LD_VAR 0 11
17625: PPUSH
17626: LD_INT 1
17628: PPUSH
17629: CALL_OW 3
17633: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17634: LD_VAR 0 2
17638: PPUSH
17639: LD_VAR 0 3
17643: PPUSH
17644: CALL 17837 0 2
17648: PUSH
17649: LD_VAR 0 11
17653: PUSH
17654: EMPTY
17655: EQUAL
17656: OR
17657: IFFALSE 17602
// if not control in _control then
17659: LD_VAR 0 4
17663: PUSH
17664: LD_VAR 0 12
17668: IN
17669: NOT
17670: IFFALSE 17696
// control := _control [ rand ( 1 , _control ) ] ;
17672: LD_ADDR_VAR 0 4
17676: PUSH
17677: LD_VAR 0 12
17681: PUSH
17682: LD_INT 1
17684: PPUSH
17685: LD_VAR 0 12
17689: PPUSH
17690: CALL_OW 12
17694: ARRAY
17695: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
17696: LD_VAR 0 2
17700: PPUSH
17701: LD_VAR 0 5
17705: PPUSH
17706: CALL 18057 0 2
17710: NOT
17711: IFFALSE 17770
// repeat weapon := _weapon [ 1 ] ;
17713: LD_ADDR_VAR 0 5
17717: PUSH
17718: LD_VAR 0 10
17722: PUSH
17723: LD_INT 1
17725: ARRAY
17726: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
17727: LD_ADDR_VAR 0 10
17731: PUSH
17732: LD_VAR 0 10
17736: PPUSH
17737: LD_INT 1
17739: PPUSH
17740: CALL_OW 3
17744: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
17745: LD_VAR 0 2
17749: PPUSH
17750: LD_VAR 0 5
17754: PPUSH
17755: CALL 18057 0 2
17759: PUSH
17760: LD_VAR 0 10
17764: PUSH
17765: EMPTY
17766: EQUAL
17767: OR
17768: IFFALSE 17713
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17770: LD_VAR 0 1
17774: PPUSH
17775: LD_VAR 0 2
17779: PPUSH
17780: LD_VAR 0 3
17784: PPUSH
17785: LD_VAR 0 4
17789: PPUSH
17790: LD_VAR 0 5
17794: PPUSH
17795: CALL_OW 448
17799: IFFALSE 17832
// result := [ chassis , engine , control , weapon ] ;
17801: LD_ADDR_VAR 0 6
17805: PUSH
17806: LD_VAR 0 2
17810: PUSH
17811: LD_VAR 0 3
17815: PUSH
17816: LD_VAR 0 4
17820: PUSH
17821: LD_VAR 0 5
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: ST_TO_ADDR
// end ;
17832: LD_VAR 0 6
17836: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
17837: LD_INT 0
17839: PPUSH
// if not chassis or not engine then
17840: LD_VAR 0 1
17844: NOT
17845: PUSH
17846: LD_VAR 0 2
17850: NOT
17851: OR
17852: IFFALSE 17856
// exit ;
17854: GO 18052
// case engine of engine_solar :
17856: LD_VAR 0 2
17860: PUSH
17861: LD_INT 2
17863: DOUBLE
17864: EQUAL
17865: IFTRUE 17869
17867: GO 17907
17869: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
17870: LD_ADDR_VAR 0 3
17874: PUSH
17875: LD_INT 11
17877: PUSH
17878: LD_INT 12
17880: PUSH
17881: LD_INT 13
17883: PUSH
17884: LD_INT 14
17886: PUSH
17887: LD_INT 1
17889: PUSH
17890: LD_INT 2
17892: PUSH
17893: LD_INT 3
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: ST_TO_ADDR
17905: GO 18036
17907: LD_INT 1
17909: DOUBLE
17910: EQUAL
17911: IFTRUE 17915
17913: GO 17977
17915: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
17916: LD_ADDR_VAR 0 3
17920: PUSH
17921: LD_INT 11
17923: PUSH
17924: LD_INT 12
17926: PUSH
17927: LD_INT 13
17929: PUSH
17930: LD_INT 14
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: LD_INT 2
17938: PUSH
17939: LD_INT 3
17941: PUSH
17942: LD_INT 4
17944: PUSH
17945: LD_INT 5
17947: PUSH
17948: LD_INT 21
17950: PUSH
17951: LD_INT 23
17953: PUSH
17954: LD_INT 22
17956: PUSH
17957: LD_INT 24
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: ST_TO_ADDR
17975: GO 18036
17977: LD_INT 3
17979: DOUBLE
17980: EQUAL
17981: IFTRUE 17985
17983: GO 18035
17985: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17986: LD_ADDR_VAR 0 3
17990: PUSH
17991: LD_INT 13
17993: PUSH
17994: LD_INT 14
17996: PUSH
17997: LD_INT 2
17999: PUSH
18000: LD_INT 3
18002: PUSH
18003: LD_INT 4
18005: PUSH
18006: LD_INT 5
18008: PUSH
18009: LD_INT 21
18011: PUSH
18012: LD_INT 22
18014: PUSH
18015: LD_INT 23
18017: PUSH
18018: LD_INT 24
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: ST_TO_ADDR
18033: GO 18036
18035: POP
// result := ( chassis in result ) ;
18036: LD_ADDR_VAR 0 3
18040: PUSH
18041: LD_VAR 0 1
18045: PUSH
18046: LD_VAR 0 3
18050: IN
18051: ST_TO_ADDR
// end ;
18052: LD_VAR 0 3
18056: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18057: LD_INT 0
18059: PPUSH
// if not chassis or not weapon then
18060: LD_VAR 0 1
18064: NOT
18065: PUSH
18066: LD_VAR 0 2
18070: NOT
18071: OR
18072: IFFALSE 18076
// exit ;
18074: GO 19102
// case weapon of us_machine_gun :
18076: LD_VAR 0 2
18080: PUSH
18081: LD_INT 2
18083: DOUBLE
18084: EQUAL
18085: IFTRUE 18089
18087: GO 18119
18089: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18090: LD_ADDR_VAR 0 3
18094: PUSH
18095: LD_INT 1
18097: PUSH
18098: LD_INT 2
18100: PUSH
18101: LD_INT 3
18103: PUSH
18104: LD_INT 4
18106: PUSH
18107: LD_INT 5
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: ST_TO_ADDR
18117: GO 19086
18119: LD_INT 3
18121: DOUBLE
18122: EQUAL
18123: IFTRUE 18127
18125: GO 18157
18127: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18128: LD_ADDR_VAR 0 3
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: LD_INT 2
18138: PUSH
18139: LD_INT 3
18141: PUSH
18142: LD_INT 4
18144: PUSH
18145: LD_INT 5
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: ST_TO_ADDR
18155: GO 19086
18157: LD_INT 11
18159: DOUBLE
18160: EQUAL
18161: IFTRUE 18165
18163: GO 18195
18165: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18166: LD_ADDR_VAR 0 3
18170: PUSH
18171: LD_INT 1
18173: PUSH
18174: LD_INT 2
18176: PUSH
18177: LD_INT 3
18179: PUSH
18180: LD_INT 4
18182: PUSH
18183: LD_INT 5
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: ST_TO_ADDR
18193: GO 19086
18195: LD_INT 4
18197: DOUBLE
18198: EQUAL
18199: IFTRUE 18203
18201: GO 18229
18203: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18204: LD_ADDR_VAR 0 3
18208: PUSH
18209: LD_INT 2
18211: PUSH
18212: LD_INT 3
18214: PUSH
18215: LD_INT 4
18217: PUSH
18218: LD_INT 5
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: ST_TO_ADDR
18227: GO 19086
18229: LD_INT 5
18231: DOUBLE
18232: EQUAL
18233: IFTRUE 18237
18235: GO 18263
18237: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18238: LD_ADDR_VAR 0 3
18242: PUSH
18243: LD_INT 2
18245: PUSH
18246: LD_INT 3
18248: PUSH
18249: LD_INT 4
18251: PUSH
18252: LD_INT 5
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: ST_TO_ADDR
18261: GO 19086
18263: LD_INT 9
18265: DOUBLE
18266: EQUAL
18267: IFTRUE 18271
18269: GO 18297
18271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18272: LD_ADDR_VAR 0 3
18276: PUSH
18277: LD_INT 2
18279: PUSH
18280: LD_INT 3
18282: PUSH
18283: LD_INT 4
18285: PUSH
18286: LD_INT 5
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: ST_TO_ADDR
18295: GO 19086
18297: LD_INT 7
18299: DOUBLE
18300: EQUAL
18301: IFTRUE 18305
18303: GO 18331
18305: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18306: LD_ADDR_VAR 0 3
18310: PUSH
18311: LD_INT 2
18313: PUSH
18314: LD_INT 3
18316: PUSH
18317: LD_INT 4
18319: PUSH
18320: LD_INT 5
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: ST_TO_ADDR
18329: GO 19086
18331: LD_INT 12
18333: DOUBLE
18334: EQUAL
18335: IFTRUE 18339
18337: GO 18365
18339: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18340: LD_ADDR_VAR 0 3
18344: PUSH
18345: LD_INT 2
18347: PUSH
18348: LD_INT 3
18350: PUSH
18351: LD_INT 4
18353: PUSH
18354: LD_INT 5
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: ST_TO_ADDR
18363: GO 19086
18365: LD_INT 13
18367: DOUBLE
18368: EQUAL
18369: IFTRUE 18373
18371: GO 18399
18373: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18374: LD_ADDR_VAR 0 3
18378: PUSH
18379: LD_INT 2
18381: PUSH
18382: LD_INT 3
18384: PUSH
18385: LD_INT 4
18387: PUSH
18388: LD_INT 5
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: ST_TO_ADDR
18397: GO 19086
18399: LD_INT 14
18401: DOUBLE
18402: EQUAL
18403: IFTRUE 18407
18405: GO 18425
18407: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18408: LD_ADDR_VAR 0 3
18412: PUSH
18413: LD_INT 4
18415: PUSH
18416: LD_INT 5
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: ST_TO_ADDR
18423: GO 19086
18425: LD_INT 6
18427: DOUBLE
18428: EQUAL
18429: IFTRUE 18433
18431: GO 18451
18433: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18434: LD_ADDR_VAR 0 3
18438: PUSH
18439: LD_INT 4
18441: PUSH
18442: LD_INT 5
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: ST_TO_ADDR
18449: GO 19086
18451: LD_INT 10
18453: DOUBLE
18454: EQUAL
18455: IFTRUE 18459
18457: GO 18477
18459: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18460: LD_ADDR_VAR 0 3
18464: PUSH
18465: LD_INT 4
18467: PUSH
18468: LD_INT 5
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: ST_TO_ADDR
18475: GO 19086
18477: LD_INT 22
18479: DOUBLE
18480: EQUAL
18481: IFTRUE 18485
18483: GO 18511
18485: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18486: LD_ADDR_VAR 0 3
18490: PUSH
18491: LD_INT 11
18493: PUSH
18494: LD_INT 12
18496: PUSH
18497: LD_INT 13
18499: PUSH
18500: LD_INT 14
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: ST_TO_ADDR
18509: GO 19086
18511: LD_INT 23
18513: DOUBLE
18514: EQUAL
18515: IFTRUE 18519
18517: GO 18545
18519: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18520: LD_ADDR_VAR 0 3
18524: PUSH
18525: LD_INT 11
18527: PUSH
18528: LD_INT 12
18530: PUSH
18531: LD_INT 13
18533: PUSH
18534: LD_INT 14
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: ST_TO_ADDR
18543: GO 19086
18545: LD_INT 24
18547: DOUBLE
18548: EQUAL
18549: IFTRUE 18553
18551: GO 18579
18553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18554: LD_ADDR_VAR 0 3
18558: PUSH
18559: LD_INT 11
18561: PUSH
18562: LD_INT 12
18564: PUSH
18565: LD_INT 13
18567: PUSH
18568: LD_INT 14
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: ST_TO_ADDR
18577: GO 19086
18579: LD_INT 30
18581: DOUBLE
18582: EQUAL
18583: IFTRUE 18587
18585: GO 18613
18587: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18588: LD_ADDR_VAR 0 3
18592: PUSH
18593: LD_INT 11
18595: PUSH
18596: LD_INT 12
18598: PUSH
18599: LD_INT 13
18601: PUSH
18602: LD_INT 14
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: ST_TO_ADDR
18611: GO 19086
18613: LD_INT 25
18615: DOUBLE
18616: EQUAL
18617: IFTRUE 18621
18619: GO 18639
18621: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18622: LD_ADDR_VAR 0 3
18626: PUSH
18627: LD_INT 13
18629: PUSH
18630: LD_INT 14
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: ST_TO_ADDR
18637: GO 19086
18639: LD_INT 27
18641: DOUBLE
18642: EQUAL
18643: IFTRUE 18647
18645: GO 18665
18647: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
18648: LD_ADDR_VAR 0 3
18652: PUSH
18653: LD_INT 13
18655: PUSH
18656: LD_INT 14
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: ST_TO_ADDR
18663: GO 19086
18665: LD_INT 28
18667: DOUBLE
18668: EQUAL
18669: IFTRUE 18673
18671: GO 18691
18673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
18674: LD_ADDR_VAR 0 3
18678: PUSH
18679: LD_INT 13
18681: PUSH
18682: LD_INT 14
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: ST_TO_ADDR
18689: GO 19086
18691: LD_INT 29
18693: DOUBLE
18694: EQUAL
18695: IFTRUE 18699
18697: GO 18717
18699: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
18700: LD_ADDR_VAR 0 3
18704: PUSH
18705: LD_INT 13
18707: PUSH
18708: LD_INT 14
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: ST_TO_ADDR
18715: GO 19086
18717: LD_INT 31
18719: DOUBLE
18720: EQUAL
18721: IFTRUE 18725
18723: GO 18743
18725: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
18726: LD_ADDR_VAR 0 3
18730: PUSH
18731: LD_INT 13
18733: PUSH
18734: LD_INT 14
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: ST_TO_ADDR
18741: GO 19086
18743: LD_INT 26
18745: DOUBLE
18746: EQUAL
18747: IFTRUE 18751
18749: GO 18769
18751: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
18752: LD_ADDR_VAR 0 3
18756: PUSH
18757: LD_INT 13
18759: PUSH
18760: LD_INT 14
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: ST_TO_ADDR
18767: GO 19086
18769: LD_INT 42
18771: DOUBLE
18772: EQUAL
18773: IFTRUE 18777
18775: GO 18803
18777: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
18778: LD_ADDR_VAR 0 3
18782: PUSH
18783: LD_INT 21
18785: PUSH
18786: LD_INT 22
18788: PUSH
18789: LD_INT 23
18791: PUSH
18792: LD_INT 24
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: ST_TO_ADDR
18801: GO 19086
18803: LD_INT 43
18805: DOUBLE
18806: EQUAL
18807: IFTRUE 18811
18809: GO 18837
18811: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
18812: LD_ADDR_VAR 0 3
18816: PUSH
18817: LD_INT 21
18819: PUSH
18820: LD_INT 22
18822: PUSH
18823: LD_INT 23
18825: PUSH
18826: LD_INT 24
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: ST_TO_ADDR
18835: GO 19086
18837: LD_INT 44
18839: DOUBLE
18840: EQUAL
18841: IFTRUE 18845
18843: GO 18871
18845: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
18846: LD_ADDR_VAR 0 3
18850: PUSH
18851: LD_INT 21
18853: PUSH
18854: LD_INT 22
18856: PUSH
18857: LD_INT 23
18859: PUSH
18860: LD_INT 24
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: ST_TO_ADDR
18869: GO 19086
18871: LD_INT 45
18873: DOUBLE
18874: EQUAL
18875: IFTRUE 18879
18877: GO 18905
18879: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
18880: LD_ADDR_VAR 0 3
18884: PUSH
18885: LD_INT 21
18887: PUSH
18888: LD_INT 22
18890: PUSH
18891: LD_INT 23
18893: PUSH
18894: LD_INT 24
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: ST_TO_ADDR
18903: GO 19086
18905: LD_INT 49
18907: DOUBLE
18908: EQUAL
18909: IFTRUE 18913
18911: GO 18939
18913: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
18914: LD_ADDR_VAR 0 3
18918: PUSH
18919: LD_INT 21
18921: PUSH
18922: LD_INT 22
18924: PUSH
18925: LD_INT 23
18927: PUSH
18928: LD_INT 24
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: ST_TO_ADDR
18937: GO 19086
18939: LD_INT 51
18941: DOUBLE
18942: EQUAL
18943: IFTRUE 18947
18945: GO 18973
18947: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
18948: LD_ADDR_VAR 0 3
18952: PUSH
18953: LD_INT 21
18955: PUSH
18956: LD_INT 22
18958: PUSH
18959: LD_INT 23
18961: PUSH
18962: LD_INT 24
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: ST_TO_ADDR
18971: GO 19086
18973: LD_INT 52
18975: DOUBLE
18976: EQUAL
18977: IFTRUE 18981
18979: GO 19007
18981: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
18982: LD_ADDR_VAR 0 3
18986: PUSH
18987: LD_INT 21
18989: PUSH
18990: LD_INT 22
18992: PUSH
18993: LD_INT 23
18995: PUSH
18996: LD_INT 24
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: ST_TO_ADDR
19005: GO 19086
19007: LD_INT 53
19009: DOUBLE
19010: EQUAL
19011: IFTRUE 19015
19013: GO 19033
19015: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19016: LD_ADDR_VAR 0 3
19020: PUSH
19021: LD_INT 23
19023: PUSH
19024: LD_INT 24
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: ST_TO_ADDR
19031: GO 19086
19033: LD_INT 46
19035: DOUBLE
19036: EQUAL
19037: IFTRUE 19041
19039: GO 19059
19041: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19042: LD_ADDR_VAR 0 3
19046: PUSH
19047: LD_INT 23
19049: PUSH
19050: LD_INT 24
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: ST_TO_ADDR
19057: GO 19086
19059: LD_INT 47
19061: DOUBLE
19062: EQUAL
19063: IFTRUE 19067
19065: GO 19085
19067: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19068: LD_ADDR_VAR 0 3
19072: PUSH
19073: LD_INT 23
19075: PUSH
19076: LD_INT 24
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: ST_TO_ADDR
19083: GO 19086
19085: POP
// result := ( chassis in result ) ;
19086: LD_ADDR_VAR 0 3
19090: PUSH
19091: LD_VAR 0 1
19095: PUSH
19096: LD_VAR 0 3
19100: IN
19101: ST_TO_ADDR
// end ;
19102: LD_VAR 0 3
19106: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19107: LD_INT 0
19109: PPUSH
19110: PPUSH
19111: PPUSH
19112: PPUSH
19113: PPUSH
19114: PPUSH
19115: PPUSH
// result := array ;
19116: LD_ADDR_VAR 0 5
19120: PUSH
19121: LD_VAR 0 1
19125: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19126: LD_VAR 0 1
19130: NOT
19131: PUSH
19132: LD_VAR 0 2
19136: NOT
19137: OR
19138: PUSH
19139: LD_VAR 0 3
19143: NOT
19144: OR
19145: PUSH
19146: LD_VAR 0 2
19150: PUSH
19151: LD_VAR 0 1
19155: GREATER
19156: OR
19157: PUSH
19158: LD_VAR 0 3
19162: PUSH
19163: LD_VAR 0 1
19167: GREATER
19168: OR
19169: IFFALSE 19173
// exit ;
19171: GO 19469
// if direction then
19173: LD_VAR 0 4
19177: IFFALSE 19241
// begin d := 1 ;
19179: LD_ADDR_VAR 0 9
19183: PUSH
19184: LD_INT 1
19186: ST_TO_ADDR
// if i_from > i_to then
19187: LD_VAR 0 2
19191: PUSH
19192: LD_VAR 0 3
19196: GREATER
19197: IFFALSE 19223
// length := ( array - i_from ) + i_to else
19199: LD_ADDR_VAR 0 11
19203: PUSH
19204: LD_VAR 0 1
19208: PUSH
19209: LD_VAR 0 2
19213: MINUS
19214: PUSH
19215: LD_VAR 0 3
19219: PLUS
19220: ST_TO_ADDR
19221: GO 19239
// length := i_to - i_from ;
19223: LD_ADDR_VAR 0 11
19227: PUSH
19228: LD_VAR 0 3
19232: PUSH
19233: LD_VAR 0 2
19237: MINUS
19238: ST_TO_ADDR
// end else
19239: GO 19302
// begin d := - 1 ;
19241: LD_ADDR_VAR 0 9
19245: PUSH
19246: LD_INT 1
19248: NEG
19249: ST_TO_ADDR
// if i_from > i_to then
19250: LD_VAR 0 2
19254: PUSH
19255: LD_VAR 0 3
19259: GREATER
19260: IFFALSE 19280
// length := i_from - i_to else
19262: LD_ADDR_VAR 0 11
19266: PUSH
19267: LD_VAR 0 2
19271: PUSH
19272: LD_VAR 0 3
19276: MINUS
19277: ST_TO_ADDR
19278: GO 19302
// length := ( array - i_to ) + i_from ;
19280: LD_ADDR_VAR 0 11
19284: PUSH
19285: LD_VAR 0 1
19289: PUSH
19290: LD_VAR 0 3
19294: MINUS
19295: PUSH
19296: LD_VAR 0 2
19300: PLUS
19301: ST_TO_ADDR
// end ; if not length then
19302: LD_VAR 0 11
19306: NOT
19307: IFFALSE 19311
// exit ;
19309: GO 19469
// tmp := array ;
19311: LD_ADDR_VAR 0 10
19315: PUSH
19316: LD_VAR 0 1
19320: ST_TO_ADDR
// for i = 1 to length do
19321: LD_ADDR_VAR 0 6
19325: PUSH
19326: DOUBLE
19327: LD_INT 1
19329: DEC
19330: ST_TO_ADDR
19331: LD_VAR 0 11
19335: PUSH
19336: FOR_TO
19337: IFFALSE 19457
// begin for j = 1 to array do
19339: LD_ADDR_VAR 0 7
19343: PUSH
19344: DOUBLE
19345: LD_INT 1
19347: DEC
19348: ST_TO_ADDR
19349: LD_VAR 0 1
19353: PUSH
19354: FOR_TO
19355: IFFALSE 19443
// begin k := j + d ;
19357: LD_ADDR_VAR 0 8
19361: PUSH
19362: LD_VAR 0 7
19366: PUSH
19367: LD_VAR 0 9
19371: PLUS
19372: ST_TO_ADDR
// if k > array then
19373: LD_VAR 0 8
19377: PUSH
19378: LD_VAR 0 1
19382: GREATER
19383: IFFALSE 19393
// k := 1 ;
19385: LD_ADDR_VAR 0 8
19389: PUSH
19390: LD_INT 1
19392: ST_TO_ADDR
// if not k then
19393: LD_VAR 0 8
19397: NOT
19398: IFFALSE 19410
// k := array ;
19400: LD_ADDR_VAR 0 8
19404: PUSH
19405: LD_VAR 0 1
19409: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19410: LD_ADDR_VAR 0 10
19414: PUSH
19415: LD_VAR 0 10
19419: PPUSH
19420: LD_VAR 0 8
19424: PPUSH
19425: LD_VAR 0 1
19429: PUSH
19430: LD_VAR 0 7
19434: ARRAY
19435: PPUSH
19436: CALL_OW 1
19440: ST_TO_ADDR
// end ;
19441: GO 19354
19443: POP
19444: POP
// array := tmp ;
19445: LD_ADDR_VAR 0 1
19449: PUSH
19450: LD_VAR 0 10
19454: ST_TO_ADDR
// end ;
19455: GO 19336
19457: POP
19458: POP
// result := array ;
19459: LD_ADDR_VAR 0 5
19463: PUSH
19464: LD_VAR 0 1
19468: ST_TO_ADDR
// end ;
19469: LD_VAR 0 5
19473: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19474: LD_INT 0
19476: PPUSH
19477: PPUSH
// result := 0 ;
19478: LD_ADDR_VAR 0 3
19482: PUSH
19483: LD_INT 0
19485: ST_TO_ADDR
// if not array or not value in array then
19486: LD_VAR 0 1
19490: NOT
19491: PUSH
19492: LD_VAR 0 2
19496: PUSH
19497: LD_VAR 0 1
19501: IN
19502: NOT
19503: OR
19504: IFFALSE 19508
// exit ;
19506: GO 19562
// for i = 1 to array do
19508: LD_ADDR_VAR 0 4
19512: PUSH
19513: DOUBLE
19514: LD_INT 1
19516: DEC
19517: ST_TO_ADDR
19518: LD_VAR 0 1
19522: PUSH
19523: FOR_TO
19524: IFFALSE 19560
// if value = array [ i ] then
19526: LD_VAR 0 2
19530: PUSH
19531: LD_VAR 0 1
19535: PUSH
19536: LD_VAR 0 4
19540: ARRAY
19541: EQUAL
19542: IFFALSE 19558
// begin result := i ;
19544: LD_ADDR_VAR 0 3
19548: PUSH
19549: LD_VAR 0 4
19553: ST_TO_ADDR
// exit ;
19554: POP
19555: POP
19556: GO 19562
// end ;
19558: GO 19523
19560: POP
19561: POP
// end ;
19562: LD_VAR 0 3
19566: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19567: LD_INT 0
19569: PPUSH
// vc_chassis := chassis ;
19570: LD_ADDR_OWVAR 37
19574: PUSH
19575: LD_VAR 0 1
19579: ST_TO_ADDR
// vc_engine := engine ;
19580: LD_ADDR_OWVAR 39
19584: PUSH
19585: LD_VAR 0 2
19589: ST_TO_ADDR
// vc_control := control ;
19590: LD_ADDR_OWVAR 38
19594: PUSH
19595: LD_VAR 0 3
19599: ST_TO_ADDR
// vc_weapon := weapon ;
19600: LD_ADDR_OWVAR 40
19604: PUSH
19605: LD_VAR 0 4
19609: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19610: LD_ADDR_OWVAR 41
19614: PUSH
19615: LD_VAR 0 5
19619: ST_TO_ADDR
// end ;
19620: LD_VAR 0 6
19624: RET
// export function WantPlant ( unit ) ; var task ; begin
19625: LD_INT 0
19627: PPUSH
19628: PPUSH
// result := false ;
19629: LD_ADDR_VAR 0 2
19633: PUSH
19634: LD_INT 0
19636: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
19637: LD_ADDR_VAR 0 3
19641: PUSH
19642: LD_VAR 0 1
19646: PPUSH
19647: CALL_OW 437
19651: ST_TO_ADDR
// if task then
19652: LD_VAR 0 3
19656: IFFALSE 19684
// if task [ 1 ] [ 1 ] = p then
19658: LD_VAR 0 3
19662: PUSH
19663: LD_INT 1
19665: ARRAY
19666: PUSH
19667: LD_INT 1
19669: ARRAY
19670: PUSH
19671: LD_STRING p
19673: EQUAL
19674: IFFALSE 19684
// result := true ;
19676: LD_ADDR_VAR 0 2
19680: PUSH
19681: LD_INT 1
19683: ST_TO_ADDR
// end ;
19684: LD_VAR 0 2
19688: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
19689: LD_INT 0
19691: PPUSH
19692: PPUSH
19693: PPUSH
19694: PPUSH
// if pos < 1 then
19695: LD_VAR 0 2
19699: PUSH
19700: LD_INT 1
19702: LESS
19703: IFFALSE 19707
// exit ;
19705: GO 20010
// if pos = 1 then
19707: LD_VAR 0 2
19711: PUSH
19712: LD_INT 1
19714: EQUAL
19715: IFFALSE 19748
// result := Replace ( arr , pos [ 1 ] , value ) else
19717: LD_ADDR_VAR 0 4
19721: PUSH
19722: LD_VAR 0 1
19726: PPUSH
19727: LD_VAR 0 2
19731: PUSH
19732: LD_INT 1
19734: ARRAY
19735: PPUSH
19736: LD_VAR 0 3
19740: PPUSH
19741: CALL_OW 1
19745: ST_TO_ADDR
19746: GO 20010
// begin tmp := arr ;
19748: LD_ADDR_VAR 0 6
19752: PUSH
19753: LD_VAR 0 1
19757: ST_TO_ADDR
// s_arr := [ tmp ] ;
19758: LD_ADDR_VAR 0 7
19762: PUSH
19763: LD_VAR 0 6
19767: PUSH
19768: EMPTY
19769: LIST
19770: ST_TO_ADDR
// for i = 1 to pos - 1 do
19771: LD_ADDR_VAR 0 5
19775: PUSH
19776: DOUBLE
19777: LD_INT 1
19779: DEC
19780: ST_TO_ADDR
19781: LD_VAR 0 2
19785: PUSH
19786: LD_INT 1
19788: MINUS
19789: PUSH
19790: FOR_TO
19791: IFFALSE 19836
// begin tmp := tmp [ pos [ i ] ] ;
19793: LD_ADDR_VAR 0 6
19797: PUSH
19798: LD_VAR 0 6
19802: PUSH
19803: LD_VAR 0 2
19807: PUSH
19808: LD_VAR 0 5
19812: ARRAY
19813: ARRAY
19814: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
19815: LD_ADDR_VAR 0 7
19819: PUSH
19820: LD_VAR 0 7
19824: PUSH
19825: LD_VAR 0 6
19829: PUSH
19830: EMPTY
19831: LIST
19832: ADD
19833: ST_TO_ADDR
// end ;
19834: GO 19790
19836: POP
19837: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
19838: LD_ADDR_VAR 0 6
19842: PUSH
19843: LD_VAR 0 6
19847: PPUSH
19848: LD_VAR 0 2
19852: PUSH
19853: LD_VAR 0 2
19857: ARRAY
19858: PPUSH
19859: LD_VAR 0 3
19863: PPUSH
19864: CALL_OW 1
19868: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
19869: LD_ADDR_VAR 0 7
19873: PUSH
19874: LD_VAR 0 7
19878: PPUSH
19879: LD_VAR 0 7
19883: PPUSH
19884: LD_VAR 0 6
19888: PPUSH
19889: CALL_OW 1
19893: ST_TO_ADDR
// for i = s_arr downto 2 do
19894: LD_ADDR_VAR 0 5
19898: PUSH
19899: DOUBLE
19900: LD_VAR 0 7
19904: INC
19905: ST_TO_ADDR
19906: LD_INT 2
19908: PUSH
19909: FOR_DOWNTO
19910: IFFALSE 19994
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
19912: LD_ADDR_VAR 0 6
19916: PUSH
19917: LD_VAR 0 7
19921: PUSH
19922: LD_VAR 0 5
19926: PUSH
19927: LD_INT 1
19929: MINUS
19930: ARRAY
19931: PPUSH
19932: LD_VAR 0 2
19936: PUSH
19937: LD_VAR 0 5
19941: PUSH
19942: LD_INT 1
19944: MINUS
19945: ARRAY
19946: PPUSH
19947: LD_VAR 0 7
19951: PUSH
19952: LD_VAR 0 5
19956: ARRAY
19957: PPUSH
19958: CALL_OW 1
19962: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
19963: LD_ADDR_VAR 0 7
19967: PUSH
19968: LD_VAR 0 7
19972: PPUSH
19973: LD_VAR 0 5
19977: PUSH
19978: LD_INT 1
19980: MINUS
19981: PPUSH
19982: LD_VAR 0 6
19986: PPUSH
19987: CALL_OW 1
19991: ST_TO_ADDR
// end ;
19992: GO 19909
19994: POP
19995: POP
// result := s_arr [ 1 ] ;
19996: LD_ADDR_VAR 0 4
20000: PUSH
20001: LD_VAR 0 7
20005: PUSH
20006: LD_INT 1
20008: ARRAY
20009: ST_TO_ADDR
// end ; end ;
20010: LD_VAR 0 4
20014: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20015: LD_INT 0
20017: PPUSH
20018: PPUSH
// if not list then
20019: LD_VAR 0 1
20023: NOT
20024: IFFALSE 20028
// exit ;
20026: GO 20119
// i := list [ pos1 ] ;
20028: LD_ADDR_VAR 0 5
20032: PUSH
20033: LD_VAR 0 1
20037: PUSH
20038: LD_VAR 0 2
20042: ARRAY
20043: ST_TO_ADDR
// if not i then
20044: LD_VAR 0 5
20048: NOT
20049: IFFALSE 20053
// exit ;
20051: GO 20119
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20053: LD_ADDR_VAR 0 1
20057: PUSH
20058: LD_VAR 0 1
20062: PPUSH
20063: LD_VAR 0 2
20067: PPUSH
20068: LD_VAR 0 1
20072: PUSH
20073: LD_VAR 0 3
20077: ARRAY
20078: PPUSH
20079: CALL_OW 1
20083: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20084: LD_ADDR_VAR 0 1
20088: PUSH
20089: LD_VAR 0 1
20093: PPUSH
20094: LD_VAR 0 3
20098: PPUSH
20099: LD_VAR 0 5
20103: PPUSH
20104: CALL_OW 1
20108: ST_TO_ADDR
// result := list ;
20109: LD_ADDR_VAR 0 4
20113: PUSH
20114: LD_VAR 0 1
20118: ST_TO_ADDR
// end ;
20119: LD_VAR 0 4
20123: RET
// export function Add ( list , pos , val ) ; begin
20124: LD_INT 0
20126: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
20127: LD_ADDR_VAR 0 4
20131: PUSH
20132: LD_VAR 0 1
20136: PPUSH
20137: LD_VAR 0 2
20141: PPUSH
20142: LD_VAR 0 3
20146: PPUSH
20147: CALL 19689 0 3
20151: ST_TO_ADDR
20152: LD_VAR 0 4
20156: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20157: LD_INT 0
20159: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20160: LD_ADDR_VAR 0 5
20164: PUSH
20165: LD_VAR 0 1
20169: PPUSH
20170: CALL_OW 250
20174: PPUSH
20175: LD_VAR 0 1
20179: PPUSH
20180: CALL_OW 251
20184: PPUSH
20185: LD_VAR 0 2
20189: PPUSH
20190: LD_VAR 0 3
20194: PPUSH
20195: LD_VAR 0 4
20199: PPUSH
20200: CALL 20210 0 5
20204: ST_TO_ADDR
// end ;
20205: LD_VAR 0 5
20209: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20210: LD_INT 0
20212: PPUSH
20213: PPUSH
20214: PPUSH
20215: PPUSH
// if not list then
20216: LD_VAR 0 3
20220: NOT
20221: IFFALSE 20225
// exit ;
20223: GO 20613
// result := [ ] ;
20225: LD_ADDR_VAR 0 6
20229: PUSH
20230: EMPTY
20231: ST_TO_ADDR
// for i in list do
20232: LD_ADDR_VAR 0 7
20236: PUSH
20237: LD_VAR 0 3
20241: PUSH
20242: FOR_IN
20243: IFFALSE 20445
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20245: LD_ADDR_VAR 0 9
20249: PUSH
20250: LD_VAR 0 7
20254: PPUSH
20255: LD_VAR 0 1
20259: PPUSH
20260: LD_VAR 0 2
20264: PPUSH
20265: CALL_OW 297
20269: ST_TO_ADDR
// if not result then
20270: LD_VAR 0 6
20274: NOT
20275: IFFALSE 20301
// result := [ [ i , tmp ] ] else
20277: LD_ADDR_VAR 0 6
20281: PUSH
20282: LD_VAR 0 7
20286: PUSH
20287: LD_VAR 0 9
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: EMPTY
20297: LIST
20298: ST_TO_ADDR
20299: GO 20443
// begin if result [ result ] [ 2 ] < tmp then
20301: LD_VAR 0 6
20305: PUSH
20306: LD_VAR 0 6
20310: ARRAY
20311: PUSH
20312: LD_INT 2
20314: ARRAY
20315: PUSH
20316: LD_VAR 0 9
20320: LESS
20321: IFFALSE 20363
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20323: LD_ADDR_VAR 0 6
20327: PUSH
20328: LD_VAR 0 6
20332: PPUSH
20333: LD_VAR 0 6
20337: PUSH
20338: LD_INT 1
20340: PLUS
20341: PPUSH
20342: LD_VAR 0 7
20346: PUSH
20347: LD_VAR 0 9
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PPUSH
20356: CALL_OW 2
20360: ST_TO_ADDR
20361: GO 20443
// for j = 1 to result do
20363: LD_ADDR_VAR 0 8
20367: PUSH
20368: DOUBLE
20369: LD_INT 1
20371: DEC
20372: ST_TO_ADDR
20373: LD_VAR 0 6
20377: PUSH
20378: FOR_TO
20379: IFFALSE 20441
// begin if tmp < result [ j ] [ 2 ] then
20381: LD_VAR 0 9
20385: PUSH
20386: LD_VAR 0 6
20390: PUSH
20391: LD_VAR 0 8
20395: ARRAY
20396: PUSH
20397: LD_INT 2
20399: ARRAY
20400: LESS
20401: IFFALSE 20439
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20403: LD_ADDR_VAR 0 6
20407: PUSH
20408: LD_VAR 0 6
20412: PPUSH
20413: LD_VAR 0 8
20417: PPUSH
20418: LD_VAR 0 7
20422: PUSH
20423: LD_VAR 0 9
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PPUSH
20432: CALL_OW 2
20436: ST_TO_ADDR
// break ;
20437: GO 20441
// end ; end ;
20439: GO 20378
20441: POP
20442: POP
// end ; end ;
20443: GO 20242
20445: POP
20446: POP
// if result and not asc then
20447: LD_VAR 0 6
20451: PUSH
20452: LD_VAR 0 4
20456: NOT
20457: AND
20458: IFFALSE 20533
// begin tmp := result ;
20460: LD_ADDR_VAR 0 9
20464: PUSH
20465: LD_VAR 0 6
20469: ST_TO_ADDR
// for i = tmp downto 1 do
20470: LD_ADDR_VAR 0 7
20474: PUSH
20475: DOUBLE
20476: LD_VAR 0 9
20480: INC
20481: ST_TO_ADDR
20482: LD_INT 1
20484: PUSH
20485: FOR_DOWNTO
20486: IFFALSE 20531
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
20488: LD_ADDR_VAR 0 6
20492: PUSH
20493: LD_VAR 0 6
20497: PPUSH
20498: LD_VAR 0 9
20502: PUSH
20503: LD_VAR 0 7
20507: MINUS
20508: PUSH
20509: LD_INT 1
20511: PLUS
20512: PPUSH
20513: LD_VAR 0 9
20517: PUSH
20518: LD_VAR 0 7
20522: ARRAY
20523: PPUSH
20524: CALL_OW 1
20528: ST_TO_ADDR
20529: GO 20485
20531: POP
20532: POP
// end ; tmp := [ ] ;
20533: LD_ADDR_VAR 0 9
20537: PUSH
20538: EMPTY
20539: ST_TO_ADDR
// if mode then
20540: LD_VAR 0 5
20544: IFFALSE 20613
// begin for i = 1 to result do
20546: LD_ADDR_VAR 0 7
20550: PUSH
20551: DOUBLE
20552: LD_INT 1
20554: DEC
20555: ST_TO_ADDR
20556: LD_VAR 0 6
20560: PUSH
20561: FOR_TO
20562: IFFALSE 20601
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
20564: LD_ADDR_VAR 0 9
20568: PUSH
20569: LD_VAR 0 9
20573: PPUSH
20574: LD_VAR 0 7
20578: PPUSH
20579: LD_VAR 0 6
20583: PUSH
20584: LD_VAR 0 7
20588: ARRAY
20589: PUSH
20590: LD_INT 1
20592: ARRAY
20593: PPUSH
20594: CALL_OW 1
20598: ST_TO_ADDR
20599: GO 20561
20601: POP
20602: POP
// result := tmp ;
20603: LD_ADDR_VAR 0 6
20607: PUSH
20608: LD_VAR 0 9
20612: ST_TO_ADDR
// end ; end ;
20613: LD_VAR 0 6
20617: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
20618: LD_INT 0
20620: PPUSH
20621: PPUSH
20622: PPUSH
20623: PPUSH
20624: PPUSH
20625: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
20626: LD_ADDR_VAR 0 5
20630: PUSH
20631: LD_INT 0
20633: PUSH
20634: LD_INT 0
20636: PUSH
20637: LD_INT 0
20639: PUSH
20640: EMPTY
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: ST_TO_ADDR
// if not x or not y then
20648: LD_VAR 0 2
20652: NOT
20653: PUSH
20654: LD_VAR 0 3
20658: NOT
20659: OR
20660: IFFALSE 20664
// exit ;
20662: GO 22310
// if not range then
20664: LD_VAR 0 4
20668: NOT
20669: IFFALSE 20679
// range := 10 ;
20671: LD_ADDR_VAR 0 4
20675: PUSH
20676: LD_INT 10
20678: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20679: LD_ADDR_VAR 0 8
20683: PUSH
20684: LD_INT 81
20686: PUSH
20687: LD_VAR 0 1
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 92
20698: PUSH
20699: LD_VAR 0 2
20703: PUSH
20704: LD_VAR 0 3
20708: PUSH
20709: LD_VAR 0 4
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 3
20722: PUSH
20723: LD_INT 21
20725: PUSH
20726: LD_INT 3
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: LIST
20741: PPUSH
20742: CALL_OW 69
20746: ST_TO_ADDR
// if not tmp then
20747: LD_VAR 0 8
20751: NOT
20752: IFFALSE 20756
// exit ;
20754: GO 22310
// for i in tmp do
20756: LD_ADDR_VAR 0 6
20760: PUSH
20761: LD_VAR 0 8
20765: PUSH
20766: FOR_IN
20767: IFFALSE 22285
// begin points := [ 0 , 0 , 0 ] ;
20769: LD_ADDR_VAR 0 9
20773: PUSH
20774: LD_INT 0
20776: PUSH
20777: LD_INT 0
20779: PUSH
20780: LD_INT 0
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: LIST
20787: ST_TO_ADDR
// bpoints := 1 ;
20788: LD_ADDR_VAR 0 10
20792: PUSH
20793: LD_INT 1
20795: ST_TO_ADDR
// case GetType ( i ) of unit_human :
20796: LD_VAR 0 6
20800: PPUSH
20801: CALL_OW 247
20805: PUSH
20806: LD_INT 1
20808: DOUBLE
20809: EQUAL
20810: IFTRUE 20814
20812: GO 21392
20814: POP
// begin if GetClass ( i ) = 1 then
20815: LD_VAR 0 6
20819: PPUSH
20820: CALL_OW 257
20824: PUSH
20825: LD_INT 1
20827: EQUAL
20828: IFFALSE 20849
// points := [ 10 , 5 , 3 ] ;
20830: LD_ADDR_VAR 0 9
20834: PUSH
20835: LD_INT 10
20837: PUSH
20838: LD_INT 5
20840: PUSH
20841: LD_INT 3
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
20849: LD_VAR 0 6
20853: PPUSH
20854: CALL_OW 257
20858: PUSH
20859: LD_INT 2
20861: PUSH
20862: LD_INT 3
20864: PUSH
20865: LD_INT 4
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: LIST
20872: IN
20873: IFFALSE 20894
// points := [ 3 , 2 , 1 ] ;
20875: LD_ADDR_VAR 0 9
20879: PUSH
20880: LD_INT 3
20882: PUSH
20883: LD_INT 2
20885: PUSH
20886: LD_INT 1
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: LIST
20893: ST_TO_ADDR
// if GetClass ( i ) = 5 then
20894: LD_VAR 0 6
20898: PPUSH
20899: CALL_OW 257
20903: PUSH
20904: LD_INT 5
20906: EQUAL
20907: IFFALSE 20928
// points := [ 130 , 5 , 2 ] ;
20909: LD_ADDR_VAR 0 9
20913: PUSH
20914: LD_INT 130
20916: PUSH
20917: LD_INT 5
20919: PUSH
20920: LD_INT 2
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: LIST
20927: ST_TO_ADDR
// if GetClass ( i ) = 8 then
20928: LD_VAR 0 6
20932: PPUSH
20933: CALL_OW 257
20937: PUSH
20938: LD_INT 8
20940: EQUAL
20941: IFFALSE 20962
// points := [ 35 , 35 , 30 ] ;
20943: LD_ADDR_VAR 0 9
20947: PUSH
20948: LD_INT 35
20950: PUSH
20951: LD_INT 35
20953: PUSH
20954: LD_INT 30
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: LIST
20961: ST_TO_ADDR
// if GetClass ( i ) = 9 then
20962: LD_VAR 0 6
20966: PPUSH
20967: CALL_OW 257
20971: PUSH
20972: LD_INT 9
20974: EQUAL
20975: IFFALSE 20996
// points := [ 20 , 55 , 40 ] ;
20977: LD_ADDR_VAR 0 9
20981: PUSH
20982: LD_INT 20
20984: PUSH
20985: LD_INT 55
20987: PUSH
20988: LD_INT 40
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: LIST
20995: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
20996: LD_VAR 0 6
21000: PPUSH
21001: CALL_OW 257
21005: PUSH
21006: LD_INT 12
21008: PUSH
21009: LD_INT 16
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: IN
21016: IFFALSE 21037
// points := [ 5 , 3 , 2 ] ;
21018: LD_ADDR_VAR 0 9
21022: PUSH
21023: LD_INT 5
21025: PUSH
21026: LD_INT 3
21028: PUSH
21029: LD_INT 2
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: LIST
21036: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21037: LD_VAR 0 6
21041: PPUSH
21042: CALL_OW 257
21046: PUSH
21047: LD_INT 17
21049: EQUAL
21050: IFFALSE 21071
// points := [ 100 , 50 , 75 ] ;
21052: LD_ADDR_VAR 0 9
21056: PUSH
21057: LD_INT 100
21059: PUSH
21060: LD_INT 50
21062: PUSH
21063: LD_INT 75
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: LIST
21070: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21071: LD_VAR 0 6
21075: PPUSH
21076: CALL_OW 257
21080: PUSH
21081: LD_INT 15
21083: EQUAL
21084: IFFALSE 21105
// points := [ 10 , 5 , 3 ] ;
21086: LD_ADDR_VAR 0 9
21090: PUSH
21091: LD_INT 10
21093: PUSH
21094: LD_INT 5
21096: PUSH
21097: LD_INT 3
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: LIST
21104: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21105: LD_VAR 0 6
21109: PPUSH
21110: CALL_OW 257
21114: PUSH
21115: LD_INT 14
21117: EQUAL
21118: IFFALSE 21139
// points := [ 10 , 0 , 0 ] ;
21120: LD_ADDR_VAR 0 9
21124: PUSH
21125: LD_INT 10
21127: PUSH
21128: LD_INT 0
21130: PUSH
21131: LD_INT 0
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: LIST
21138: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21139: LD_VAR 0 6
21143: PPUSH
21144: CALL_OW 257
21148: PUSH
21149: LD_INT 11
21151: EQUAL
21152: IFFALSE 21173
// points := [ 30 , 10 , 5 ] ;
21154: LD_ADDR_VAR 0 9
21158: PUSH
21159: LD_INT 30
21161: PUSH
21162: LD_INT 10
21164: PUSH
21165: LD_INT 5
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: LIST
21172: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21173: LD_VAR 0 1
21177: PPUSH
21178: LD_INT 5
21180: PPUSH
21181: CALL_OW 321
21185: PUSH
21186: LD_INT 2
21188: EQUAL
21189: IFFALSE 21206
// bpoints := bpoints * 1.8 ;
21191: LD_ADDR_VAR 0 10
21195: PUSH
21196: LD_VAR 0 10
21200: PUSH
21201: LD_REAL  1.80000000000000E+0000
21204: MUL
21205: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21206: LD_VAR 0 6
21210: PPUSH
21211: CALL_OW 257
21215: PUSH
21216: LD_INT 1
21218: PUSH
21219: LD_INT 2
21221: PUSH
21222: LD_INT 3
21224: PUSH
21225: LD_INT 4
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: IN
21234: PUSH
21235: LD_VAR 0 1
21239: PPUSH
21240: LD_INT 51
21242: PPUSH
21243: CALL_OW 321
21247: PUSH
21248: LD_INT 2
21250: EQUAL
21251: AND
21252: IFFALSE 21269
// bpoints := bpoints * 1.2 ;
21254: LD_ADDR_VAR 0 10
21258: PUSH
21259: LD_VAR 0 10
21263: PUSH
21264: LD_REAL  1.20000000000000E+0000
21267: MUL
21268: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21269: LD_VAR 0 6
21273: PPUSH
21274: CALL_OW 257
21278: PUSH
21279: LD_INT 5
21281: PUSH
21282: LD_INT 7
21284: PUSH
21285: LD_INT 9
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: LIST
21292: IN
21293: PUSH
21294: LD_VAR 0 1
21298: PPUSH
21299: LD_INT 52
21301: PPUSH
21302: CALL_OW 321
21306: PUSH
21307: LD_INT 2
21309: EQUAL
21310: AND
21311: IFFALSE 21328
// bpoints := bpoints * 1.5 ;
21313: LD_ADDR_VAR 0 10
21317: PUSH
21318: LD_VAR 0 10
21322: PUSH
21323: LD_REAL  1.50000000000000E+0000
21326: MUL
21327: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21328: LD_VAR 0 1
21332: PPUSH
21333: LD_INT 66
21335: PPUSH
21336: CALL_OW 321
21340: PUSH
21341: LD_INT 2
21343: EQUAL
21344: IFFALSE 21361
// bpoints := bpoints * 1.1 ;
21346: LD_ADDR_VAR 0 10
21350: PUSH
21351: LD_VAR 0 10
21355: PUSH
21356: LD_REAL  1.10000000000000E+0000
21359: MUL
21360: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21361: LD_ADDR_VAR 0 10
21365: PUSH
21366: LD_VAR 0 10
21370: PUSH
21371: LD_VAR 0 6
21375: PPUSH
21376: LD_INT 1
21378: PPUSH
21379: CALL_OW 259
21383: PUSH
21384: LD_REAL  1.15000000000000E+0000
21387: MUL
21388: MUL
21389: ST_TO_ADDR
// end ; unit_vehicle :
21390: GO 22214
21392: LD_INT 2
21394: DOUBLE
21395: EQUAL
21396: IFTRUE 21400
21398: GO 22202
21400: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21401: LD_VAR 0 6
21405: PPUSH
21406: CALL_OW 264
21410: PUSH
21411: LD_INT 2
21413: PUSH
21414: LD_INT 42
21416: PUSH
21417: LD_INT 24
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: LIST
21424: IN
21425: IFFALSE 21446
// points := [ 25 , 5 , 3 ] ;
21427: LD_ADDR_VAR 0 9
21431: PUSH
21432: LD_INT 25
21434: PUSH
21435: LD_INT 5
21437: PUSH
21438: LD_INT 3
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: LIST
21445: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
21446: LD_VAR 0 6
21450: PPUSH
21451: CALL_OW 264
21455: PUSH
21456: LD_INT 4
21458: PUSH
21459: LD_INT 43
21461: PUSH
21462: LD_INT 25
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: LIST
21469: IN
21470: IFFALSE 21491
// points := [ 40 , 15 , 5 ] ;
21472: LD_ADDR_VAR 0 9
21476: PUSH
21477: LD_INT 40
21479: PUSH
21480: LD_INT 15
21482: PUSH
21483: LD_INT 5
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: LIST
21490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
21491: LD_VAR 0 6
21495: PPUSH
21496: CALL_OW 264
21500: PUSH
21501: LD_INT 3
21503: PUSH
21504: LD_INT 23
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: IN
21511: IFFALSE 21532
// points := [ 7 , 25 , 8 ] ;
21513: LD_ADDR_VAR 0 9
21517: PUSH
21518: LD_INT 7
21520: PUSH
21521: LD_INT 25
21523: PUSH
21524: LD_INT 8
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: LIST
21531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
21532: LD_VAR 0 6
21536: PPUSH
21537: CALL_OW 264
21541: PUSH
21542: LD_INT 5
21544: PUSH
21545: LD_INT 27
21547: PUSH
21548: LD_INT 44
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: LIST
21555: IN
21556: IFFALSE 21577
// points := [ 14 , 50 , 16 ] ;
21558: LD_ADDR_VAR 0 9
21562: PUSH
21563: LD_INT 14
21565: PUSH
21566: LD_INT 50
21568: PUSH
21569: LD_INT 16
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: LIST
21576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
21577: LD_VAR 0 6
21581: PPUSH
21582: CALL_OW 264
21586: PUSH
21587: LD_INT 6
21589: PUSH
21590: LD_INT 46
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: IN
21597: IFFALSE 21618
// points := [ 32 , 120 , 70 ] ;
21599: LD_ADDR_VAR 0 9
21603: PUSH
21604: LD_INT 32
21606: PUSH
21607: LD_INT 120
21609: PUSH
21610: LD_INT 70
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: LIST
21617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
21618: LD_VAR 0 6
21622: PPUSH
21623: CALL_OW 264
21627: PUSH
21628: LD_INT 7
21630: PUSH
21631: LD_INT 28
21633: PUSH
21634: LD_INT 45
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: IN
21642: IFFALSE 21663
// points := [ 35 , 20 , 45 ] ;
21644: LD_ADDR_VAR 0 9
21648: PUSH
21649: LD_INT 35
21651: PUSH
21652: LD_INT 20
21654: PUSH
21655: LD_INT 45
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: LIST
21662: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
21663: LD_VAR 0 6
21667: PPUSH
21668: CALL_OW 264
21672: PUSH
21673: LD_INT 47
21675: PUSH
21676: EMPTY
21677: LIST
21678: IN
21679: IFFALSE 21700
// points := [ 67 , 45 , 75 ] ;
21681: LD_ADDR_VAR 0 9
21685: PUSH
21686: LD_INT 67
21688: PUSH
21689: LD_INT 45
21691: PUSH
21692: LD_INT 75
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
21700: LD_VAR 0 6
21704: PPUSH
21705: CALL_OW 264
21709: PUSH
21710: LD_INT 26
21712: PUSH
21713: EMPTY
21714: LIST
21715: IN
21716: IFFALSE 21737
// points := [ 120 , 30 , 80 ] ;
21718: LD_ADDR_VAR 0 9
21722: PUSH
21723: LD_INT 120
21725: PUSH
21726: LD_INT 30
21728: PUSH
21729: LD_INT 80
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: LIST
21736: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
21737: LD_VAR 0 6
21741: PPUSH
21742: CALL_OW 264
21746: PUSH
21747: LD_INT 22
21749: PUSH
21750: EMPTY
21751: LIST
21752: IN
21753: IFFALSE 21774
// points := [ 40 , 1 , 1 ] ;
21755: LD_ADDR_VAR 0 9
21759: PUSH
21760: LD_INT 40
21762: PUSH
21763: LD_INT 1
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: LIST
21773: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
21774: LD_VAR 0 6
21778: PPUSH
21779: CALL_OW 264
21783: PUSH
21784: LD_INT 29
21786: PUSH
21787: EMPTY
21788: LIST
21789: IN
21790: IFFALSE 21811
// points := [ 70 , 200 , 400 ] ;
21792: LD_ADDR_VAR 0 9
21796: PUSH
21797: LD_INT 70
21799: PUSH
21800: LD_INT 200
21802: PUSH
21803: LD_INT 400
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: LIST
21810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
21811: LD_VAR 0 6
21815: PPUSH
21816: CALL_OW 264
21820: PUSH
21821: LD_INT 14
21823: PUSH
21824: LD_INT 53
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: IN
21831: IFFALSE 21852
// points := [ 40 , 10 , 20 ] ;
21833: LD_ADDR_VAR 0 9
21837: PUSH
21838: LD_INT 40
21840: PUSH
21841: LD_INT 10
21843: PUSH
21844: LD_INT 20
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: LIST
21851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
21852: LD_VAR 0 6
21856: PPUSH
21857: CALL_OW 264
21861: PUSH
21862: LD_INT 9
21864: PUSH
21865: EMPTY
21866: LIST
21867: IN
21868: IFFALSE 21889
// points := [ 5 , 70 , 20 ] ;
21870: LD_ADDR_VAR 0 9
21874: PUSH
21875: LD_INT 5
21877: PUSH
21878: LD_INT 70
21880: PUSH
21881: LD_INT 20
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: LIST
21888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
21889: LD_VAR 0 6
21893: PPUSH
21894: CALL_OW 264
21898: PUSH
21899: LD_INT 10
21901: PUSH
21902: EMPTY
21903: LIST
21904: IN
21905: IFFALSE 21926
// points := [ 35 , 110 , 70 ] ;
21907: LD_ADDR_VAR 0 9
21911: PUSH
21912: LD_INT 35
21914: PUSH
21915: LD_INT 110
21917: PUSH
21918: LD_INT 70
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
21926: LD_VAR 0 6
21930: PPUSH
21931: CALL_OW 265
21935: PUSH
21936: LD_INT 25
21938: EQUAL
21939: IFFALSE 21960
// points := [ 80 , 65 , 100 ] ;
21941: LD_ADDR_VAR 0 9
21945: PUSH
21946: LD_INT 80
21948: PUSH
21949: LD_INT 65
21951: PUSH
21952: LD_INT 100
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: LIST
21959: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
21960: LD_VAR 0 6
21964: PPUSH
21965: CALL_OW 263
21969: PUSH
21970: LD_INT 1
21972: EQUAL
21973: IFFALSE 22008
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
21975: LD_ADDR_VAR 0 10
21979: PUSH
21980: LD_VAR 0 10
21984: PUSH
21985: LD_VAR 0 6
21989: PPUSH
21990: CALL_OW 311
21994: PPUSH
21995: LD_INT 3
21997: PPUSH
21998: CALL_OW 259
22002: PUSH
22003: LD_INT 4
22005: MUL
22006: MUL
22007: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22008: LD_VAR 0 6
22012: PPUSH
22013: CALL_OW 263
22017: PUSH
22018: LD_INT 2
22020: EQUAL
22021: IFFALSE 22072
// begin j := IsControledBy ( i ) ;
22023: LD_ADDR_VAR 0 7
22027: PUSH
22028: LD_VAR 0 6
22032: PPUSH
22033: CALL_OW 312
22037: ST_TO_ADDR
// if j then
22038: LD_VAR 0 7
22042: IFFALSE 22072
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22044: LD_ADDR_VAR 0 10
22048: PUSH
22049: LD_VAR 0 10
22053: PUSH
22054: LD_VAR 0 7
22058: PPUSH
22059: LD_INT 3
22061: PPUSH
22062: CALL_OW 259
22066: PUSH
22067: LD_INT 3
22069: MUL
22070: MUL
22071: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22072: LD_VAR 0 6
22076: PPUSH
22077: CALL_OW 264
22081: PUSH
22082: LD_INT 5
22084: PUSH
22085: LD_INT 6
22087: PUSH
22088: LD_INT 46
22090: PUSH
22091: LD_INT 44
22093: PUSH
22094: LD_INT 47
22096: PUSH
22097: LD_INT 45
22099: PUSH
22100: LD_INT 28
22102: PUSH
22103: LD_INT 7
22105: PUSH
22106: LD_INT 27
22108: PUSH
22109: LD_INT 29
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: IN
22124: PUSH
22125: LD_VAR 0 1
22129: PPUSH
22130: LD_INT 52
22132: PPUSH
22133: CALL_OW 321
22137: PUSH
22138: LD_INT 2
22140: EQUAL
22141: AND
22142: IFFALSE 22159
// bpoints := bpoints * 1.2 ;
22144: LD_ADDR_VAR 0 10
22148: PUSH
22149: LD_VAR 0 10
22153: PUSH
22154: LD_REAL  1.20000000000000E+0000
22157: MUL
22158: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22159: LD_VAR 0 6
22163: PPUSH
22164: CALL_OW 264
22168: PUSH
22169: LD_INT 6
22171: PUSH
22172: LD_INT 46
22174: PUSH
22175: LD_INT 47
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: LIST
22182: IN
22183: IFFALSE 22200
// bpoints := bpoints * 1.2 ;
22185: LD_ADDR_VAR 0 10
22189: PUSH
22190: LD_VAR 0 10
22194: PUSH
22195: LD_REAL  1.20000000000000E+0000
22198: MUL
22199: ST_TO_ADDR
// end ; unit_building :
22200: GO 22214
22202: LD_INT 3
22204: DOUBLE
22205: EQUAL
22206: IFTRUE 22210
22208: GO 22213
22210: POP
// ; end ;
22211: GO 22214
22213: POP
// for j = 1 to 3 do
22214: LD_ADDR_VAR 0 7
22218: PUSH
22219: DOUBLE
22220: LD_INT 1
22222: DEC
22223: ST_TO_ADDR
22224: LD_INT 3
22226: PUSH
22227: FOR_TO
22228: IFFALSE 22281
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22230: LD_ADDR_VAR 0 5
22234: PUSH
22235: LD_VAR 0 5
22239: PPUSH
22240: LD_VAR 0 7
22244: PPUSH
22245: LD_VAR 0 5
22249: PUSH
22250: LD_VAR 0 7
22254: ARRAY
22255: PUSH
22256: LD_VAR 0 9
22260: PUSH
22261: LD_VAR 0 7
22265: ARRAY
22266: PUSH
22267: LD_VAR 0 10
22271: MUL
22272: PLUS
22273: PPUSH
22274: CALL_OW 1
22278: ST_TO_ADDR
22279: GO 22227
22281: POP
22282: POP
// end ;
22283: GO 20766
22285: POP
22286: POP
// result := Replace ( result , 4 , tmp ) ;
22287: LD_ADDR_VAR 0 5
22291: PUSH
22292: LD_VAR 0 5
22296: PPUSH
22297: LD_INT 4
22299: PPUSH
22300: LD_VAR 0 8
22304: PPUSH
22305: CALL_OW 1
22309: ST_TO_ADDR
// end ;
22310: LD_VAR 0 5
22314: RET
// export function DangerAtRange ( unit , range ) ; begin
22315: LD_INT 0
22317: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22318: LD_ADDR_VAR 0 3
22322: PUSH
22323: LD_VAR 0 1
22327: PPUSH
22328: CALL_OW 255
22332: PPUSH
22333: LD_VAR 0 1
22337: PPUSH
22338: CALL_OW 250
22342: PPUSH
22343: LD_VAR 0 1
22347: PPUSH
22348: CALL_OW 251
22352: PPUSH
22353: LD_VAR 0 2
22357: PPUSH
22358: CALL 20618 0 4
22362: ST_TO_ADDR
// end ;
22363: LD_VAR 0 3
22367: RET
// export function IsExtension ( b ) ; begin
22368: LD_INT 0
22370: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22371: LD_ADDR_VAR 0 2
22375: PUSH
22376: LD_VAR 0 1
22380: PPUSH
22381: CALL_OW 266
22385: PUSH
22386: LD_INT 23
22388: PUSH
22389: LD_INT 20
22391: PUSH
22392: LD_INT 22
22394: PUSH
22395: LD_INT 17
22397: PUSH
22398: LD_INT 24
22400: PUSH
22401: LD_INT 21
22403: PUSH
22404: LD_INT 19
22406: PUSH
22407: LD_INT 16
22409: PUSH
22410: LD_INT 25
22412: PUSH
22413: LD_INT 18
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: IN
22428: ST_TO_ADDR
// end ;
22429: LD_VAR 0 2
22433: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
22434: LD_INT 0
22436: PPUSH
22437: PPUSH
22438: PPUSH
// result := [ ] ;
22439: LD_ADDR_VAR 0 2
22443: PUSH
22444: EMPTY
22445: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
22446: LD_ADDR_VAR 0 3
22450: PUSH
22451: LD_INT 21
22453: PUSH
22454: LD_INT 3
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PPUSH
22461: CALL_OW 69
22465: ST_TO_ADDR
// if not tmp then
22466: LD_VAR 0 3
22470: NOT
22471: IFFALSE 22475
// exit ;
22473: GO 22525
// for i in tmp do
22475: LD_ADDR_VAR 0 4
22479: PUSH
22480: LD_VAR 0 3
22484: PUSH
22485: FOR_IN
22486: IFFALSE 22523
// if GetBase ( i ) = base then
22488: LD_VAR 0 4
22492: PPUSH
22493: CALL_OW 274
22497: PUSH
22498: LD_VAR 0 1
22502: EQUAL
22503: IFFALSE 22521
// result := result ^ i ;
22505: LD_ADDR_VAR 0 2
22509: PUSH
22510: LD_VAR 0 2
22514: PUSH
22515: LD_VAR 0 4
22519: ADD
22520: ST_TO_ADDR
22521: GO 22485
22523: POP
22524: POP
// end ;
22525: LD_VAR 0 2
22529: RET
// export function ComComplete ( unit , b ) ; var i ; begin
22530: LD_INT 0
22532: PPUSH
22533: PPUSH
// if BuildingStatus ( b ) = bs_build then
22534: LD_VAR 0 2
22538: PPUSH
22539: CALL_OW 461
22543: PUSH
22544: LD_INT 1
22546: EQUAL
22547: IFFALSE 22607
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
22549: LD_VAR 0 1
22553: PPUSH
22554: LD_STRING h
22556: PUSH
22557: LD_VAR 0 2
22561: PPUSH
22562: CALL_OW 250
22566: PUSH
22567: LD_VAR 0 2
22571: PPUSH
22572: CALL_OW 251
22576: PUSH
22577: LD_VAR 0 2
22581: PUSH
22582: LD_INT 0
22584: PUSH
22585: LD_INT 0
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: PUSH
22600: EMPTY
22601: LIST
22602: PPUSH
22603: CALL_OW 446
// end ;
22607: LD_VAR 0 3
22611: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
22612: LD_INT 0
22614: PPUSH
22615: PPUSH
22616: PPUSH
22617: PPUSH
22618: PPUSH
22619: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
22620: LD_VAR 0 1
22624: NOT
22625: PUSH
22626: LD_VAR 0 1
22630: PPUSH
22631: CALL_OW 263
22635: PUSH
22636: LD_INT 2
22638: EQUAL
22639: NOT
22640: OR
22641: IFFALSE 22645
// exit ;
22643: GO 22961
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
22645: LD_ADDR_VAR 0 6
22649: PUSH
22650: LD_INT 22
22652: PUSH
22653: LD_VAR 0 1
22657: PPUSH
22658: CALL_OW 255
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 2
22669: PUSH
22670: LD_INT 30
22672: PUSH
22673: LD_INT 36
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 34
22682: PUSH
22683: LD_INT 31
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: LIST
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PPUSH
22699: CALL_OW 69
22703: ST_TO_ADDR
// if not tmp then
22704: LD_VAR 0 6
22708: NOT
22709: IFFALSE 22713
// exit ;
22711: GO 22961
// result := [ ] ;
22713: LD_ADDR_VAR 0 2
22717: PUSH
22718: EMPTY
22719: ST_TO_ADDR
// for i in tmp do
22720: LD_ADDR_VAR 0 3
22724: PUSH
22725: LD_VAR 0 6
22729: PUSH
22730: FOR_IN
22731: IFFALSE 22802
// begin t := UnitsInside ( i ) ;
22733: LD_ADDR_VAR 0 4
22737: PUSH
22738: LD_VAR 0 3
22742: PPUSH
22743: CALL_OW 313
22747: ST_TO_ADDR
// if t then
22748: LD_VAR 0 4
22752: IFFALSE 22800
// for j in t do
22754: LD_ADDR_VAR 0 7
22758: PUSH
22759: LD_VAR 0 4
22763: PUSH
22764: FOR_IN
22765: IFFALSE 22798
// result := Insert ( result , result + 1 , j ) ;
22767: LD_ADDR_VAR 0 2
22771: PUSH
22772: LD_VAR 0 2
22776: PPUSH
22777: LD_VAR 0 2
22781: PUSH
22782: LD_INT 1
22784: PLUS
22785: PPUSH
22786: LD_VAR 0 7
22790: PPUSH
22791: CALL_OW 2
22795: ST_TO_ADDR
22796: GO 22764
22798: POP
22799: POP
// end ;
22800: GO 22730
22802: POP
22803: POP
// if not result then
22804: LD_VAR 0 2
22808: NOT
22809: IFFALSE 22813
// exit ;
22811: GO 22961
// mech := result [ 1 ] ;
22813: LD_ADDR_VAR 0 5
22817: PUSH
22818: LD_VAR 0 2
22822: PUSH
22823: LD_INT 1
22825: ARRAY
22826: ST_TO_ADDR
// if result > 1 then
22827: LD_VAR 0 2
22831: PUSH
22832: LD_INT 1
22834: GREATER
22835: IFFALSE 22947
// for i = 2 to result do
22837: LD_ADDR_VAR 0 3
22841: PUSH
22842: DOUBLE
22843: LD_INT 2
22845: DEC
22846: ST_TO_ADDR
22847: LD_VAR 0 2
22851: PUSH
22852: FOR_TO
22853: IFFALSE 22945
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
22855: LD_ADDR_VAR 0 4
22859: PUSH
22860: LD_VAR 0 2
22864: PUSH
22865: LD_VAR 0 3
22869: ARRAY
22870: PPUSH
22871: LD_INT 3
22873: PPUSH
22874: CALL_OW 259
22878: PUSH
22879: LD_VAR 0 2
22883: PUSH
22884: LD_VAR 0 3
22888: ARRAY
22889: PPUSH
22890: CALL_OW 432
22894: MINUS
22895: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
22896: LD_VAR 0 4
22900: PUSH
22901: LD_VAR 0 5
22905: PPUSH
22906: LD_INT 3
22908: PPUSH
22909: CALL_OW 259
22913: PUSH
22914: LD_VAR 0 5
22918: PPUSH
22919: CALL_OW 432
22923: MINUS
22924: GREATEREQUAL
22925: IFFALSE 22943
// mech := result [ i ] ;
22927: LD_ADDR_VAR 0 5
22931: PUSH
22932: LD_VAR 0 2
22936: PUSH
22937: LD_VAR 0 3
22941: ARRAY
22942: ST_TO_ADDR
// end ;
22943: GO 22852
22945: POP
22946: POP
// ComLinkTo ( vehicle , mech ) ;
22947: LD_VAR 0 1
22951: PPUSH
22952: LD_VAR 0 5
22956: PPUSH
22957: CALL_OW 135
// end ;
22961: LD_VAR 0 2
22965: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
22966: LD_INT 0
22968: PPUSH
22969: PPUSH
22970: PPUSH
22971: PPUSH
22972: PPUSH
22973: PPUSH
22974: PPUSH
22975: PPUSH
22976: PPUSH
22977: PPUSH
22978: PPUSH
22979: PPUSH
// result := [ ] ;
22980: LD_ADDR_VAR 0 6
22984: PUSH
22985: EMPTY
22986: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
22987: LD_VAR 0 1
22991: PPUSH
22992: CALL_OW 266
22996: PUSH
22997: LD_INT 0
22999: PUSH
23000: LD_INT 1
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: IN
23007: NOT
23008: IFFALSE 23012
// exit ;
23010: GO 24412
// if name then
23012: LD_VAR 0 2
23016: IFFALSE 23032
// SetBName ( base_dep , name ) ;
23018: LD_VAR 0 1
23022: PPUSH
23023: LD_VAR 0 2
23027: PPUSH
23028: CALL_OW 500
// base := GetBase ( base_dep ) ;
23032: LD_ADDR_VAR 0 14
23036: PUSH
23037: LD_VAR 0 1
23041: PPUSH
23042: CALL_OW 274
23046: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23047: LD_ADDR_VAR 0 15
23051: PUSH
23052: LD_VAR 0 1
23056: PPUSH
23057: CALL_OW 255
23061: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23062: LD_ADDR_VAR 0 16
23066: PUSH
23067: LD_VAR 0 1
23071: PPUSH
23072: CALL_OW 248
23076: ST_TO_ADDR
// if sources then
23077: LD_VAR 0 4
23081: IFFALSE 23128
// for i = 1 to 3 do
23083: LD_ADDR_VAR 0 7
23087: PUSH
23088: DOUBLE
23089: LD_INT 1
23091: DEC
23092: ST_TO_ADDR
23093: LD_INT 3
23095: PUSH
23096: FOR_TO
23097: IFFALSE 23126
// AddResourceType ( base , i , sources [ i ] ) ;
23099: LD_VAR 0 14
23103: PPUSH
23104: LD_VAR 0 7
23108: PPUSH
23109: LD_VAR 0 4
23113: PUSH
23114: LD_VAR 0 7
23118: ARRAY
23119: PPUSH
23120: CALL_OW 276
23124: GO 23096
23126: POP
23127: POP
// buildings := GetBaseBuildings ( base ) ;
23128: LD_ADDR_VAR 0 17
23132: PUSH
23133: LD_VAR 0 14
23137: PPUSH
23138: CALL 22434 0 1
23142: ST_TO_ADDR
// InitHc ;
23143: CALL_OW 19
// InitUc ;
23147: CALL_OW 18
// uc_side := side ;
23151: LD_ADDR_OWVAR 20
23155: PUSH
23156: LD_VAR 0 15
23160: ST_TO_ADDR
// uc_nation := nation ;
23161: LD_ADDR_OWVAR 21
23165: PUSH
23166: LD_VAR 0 16
23170: ST_TO_ADDR
// if buildings then
23171: LD_VAR 0 17
23175: IFFALSE 24271
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23177: LD_VAR 0 17
23181: PPUSH
23182: LD_INT 2
23184: PUSH
23185: LD_INT 30
23187: PUSH
23188: LD_INT 32
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 30
23197: PUSH
23198: LD_INT 33
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: LIST
23209: PPUSH
23210: CALL_OW 72
23214: IFFALSE 23297
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23216: LD_ADDR_VAR 0 7
23220: PUSH
23221: LD_VAR 0 17
23225: PPUSH
23226: LD_INT 2
23228: PUSH
23229: LD_INT 30
23231: PUSH
23232: LD_INT 32
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 30
23241: PUSH
23242: LD_INT 33
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: PPUSH
23254: CALL_OW 72
23258: PUSH
23259: FOR_IN
23260: IFFALSE 23295
// begin if not GetBWeapon ( i ) then
23262: LD_VAR 0 7
23266: PPUSH
23267: CALL_OW 269
23271: NOT
23272: IFFALSE 23293
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
23274: LD_VAR 0 7
23278: PPUSH
23279: LD_VAR 0 7
23283: PPUSH
23284: CALL 24417 0 1
23288: PPUSH
23289: CALL_OW 431
// end ;
23293: GO 23259
23295: POP
23296: POP
// end ; for i = 1 to personel do
23297: LD_ADDR_VAR 0 7
23301: PUSH
23302: DOUBLE
23303: LD_INT 1
23305: DEC
23306: ST_TO_ADDR
23307: LD_VAR 0 5
23311: PUSH
23312: FOR_TO
23313: IFFALSE 24251
// begin if i > 4 then
23315: LD_VAR 0 7
23319: PUSH
23320: LD_INT 4
23322: GREATER
23323: IFFALSE 23327
// break ;
23325: GO 24251
// case i of 1 :
23327: LD_VAR 0 7
23331: PUSH
23332: LD_INT 1
23334: DOUBLE
23335: EQUAL
23336: IFTRUE 23340
23338: GO 23413
23340: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
23341: LD_ADDR_VAR 0 11
23345: PUSH
23346: LD_VAR 0 17
23350: PPUSH
23351: LD_INT 22
23353: PUSH
23354: LD_VAR 0 15
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 2
23365: PUSH
23366: LD_INT 30
23368: PUSH
23369: LD_INT 32
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 30
23378: PUSH
23379: LD_INT 4
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 30
23388: PUSH
23389: LD_INT 5
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PPUSH
23406: CALL_OW 72
23410: ST_TO_ADDR
23411: GO 23635
23413: LD_INT 2
23415: DOUBLE
23416: EQUAL
23417: IFTRUE 23421
23419: GO 23483
23421: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
23422: LD_ADDR_VAR 0 11
23426: PUSH
23427: LD_VAR 0 17
23431: PPUSH
23432: LD_INT 22
23434: PUSH
23435: LD_VAR 0 15
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 30
23449: PUSH
23450: LD_INT 0
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 30
23459: PUSH
23460: LD_INT 1
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: LIST
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PPUSH
23476: CALL_OW 72
23480: ST_TO_ADDR
23481: GO 23635
23483: LD_INT 3
23485: DOUBLE
23486: EQUAL
23487: IFTRUE 23491
23489: GO 23553
23491: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
23492: LD_ADDR_VAR 0 11
23496: PUSH
23497: LD_VAR 0 17
23501: PPUSH
23502: LD_INT 22
23504: PUSH
23505: LD_VAR 0 15
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 2
23516: PUSH
23517: LD_INT 30
23519: PUSH
23520: LD_INT 2
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 30
23529: PUSH
23530: LD_INT 3
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: LIST
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PPUSH
23546: CALL_OW 72
23550: ST_TO_ADDR
23551: GO 23635
23553: LD_INT 4
23555: DOUBLE
23556: EQUAL
23557: IFTRUE 23561
23559: GO 23634
23561: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
23562: LD_ADDR_VAR 0 11
23566: PUSH
23567: LD_VAR 0 17
23571: PPUSH
23572: LD_INT 22
23574: PUSH
23575: LD_VAR 0 15
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 2
23586: PUSH
23587: LD_INT 30
23589: PUSH
23590: LD_INT 6
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 30
23599: PUSH
23600: LD_INT 7
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 30
23609: PUSH
23610: LD_INT 8
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PPUSH
23627: CALL_OW 72
23631: ST_TO_ADDR
23632: GO 23635
23634: POP
// x := personel [ i ] ;
23635: LD_ADDR_VAR 0 12
23639: PUSH
23640: LD_VAR 0 5
23644: PUSH
23645: LD_VAR 0 7
23649: ARRAY
23650: ST_TO_ADDR
// if x = - 1 then
23651: LD_VAR 0 12
23655: PUSH
23656: LD_INT 1
23658: NEG
23659: EQUAL
23660: IFFALSE 23869
// begin for j in f do
23662: LD_ADDR_VAR 0 8
23666: PUSH
23667: LD_VAR 0 11
23671: PUSH
23672: FOR_IN
23673: IFFALSE 23865
// repeat InitHc ;
23675: CALL_OW 19
// if GetBType ( j ) = b_barracks then
23679: LD_VAR 0 8
23683: PPUSH
23684: CALL_OW 266
23688: PUSH
23689: LD_INT 5
23691: EQUAL
23692: IFFALSE 23762
// begin if UnitsInside ( j ) < 3 then
23694: LD_VAR 0 8
23698: PPUSH
23699: CALL_OW 313
23703: PUSH
23704: LD_INT 3
23706: LESS
23707: IFFALSE 23743
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23709: LD_INT 0
23711: PPUSH
23712: LD_INT 5
23714: PUSH
23715: LD_INT 8
23717: PUSH
23718: LD_INT 9
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: LIST
23725: PUSH
23726: LD_VAR 0 16
23730: ARRAY
23731: PPUSH
23732: LD_VAR 0 3
23736: PPUSH
23737: CALL_OW 380
23741: GO 23760
// PrepareHuman ( false , i , skill ) ;
23743: LD_INT 0
23745: PPUSH
23746: LD_VAR 0 7
23750: PPUSH
23751: LD_VAR 0 3
23755: PPUSH
23756: CALL_OW 380
// end else
23760: GO 23779
// PrepareHuman ( false , i , skill ) ;
23762: LD_INT 0
23764: PPUSH
23765: LD_VAR 0 7
23769: PPUSH
23770: LD_VAR 0 3
23774: PPUSH
23775: CALL_OW 380
// un := CreateHuman ;
23779: LD_ADDR_VAR 0 13
23783: PUSH
23784: CALL_OW 44
23788: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23789: LD_ADDR_VAR 0 6
23793: PUSH
23794: LD_VAR 0 6
23798: PPUSH
23799: LD_INT 1
23801: PPUSH
23802: LD_VAR 0 13
23806: PPUSH
23807: CALL_OW 2
23811: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
23812: LD_VAR 0 13
23816: PPUSH
23817: LD_VAR 0 8
23821: PPUSH
23822: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
23826: LD_VAR 0 8
23830: PPUSH
23831: CALL_OW 313
23835: PUSH
23836: LD_INT 6
23838: EQUAL
23839: PUSH
23840: LD_VAR 0 8
23844: PPUSH
23845: CALL_OW 266
23849: PUSH
23850: LD_INT 32
23852: PUSH
23853: LD_INT 31
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: IN
23860: OR
23861: IFFALSE 23675
23863: GO 23672
23865: POP
23866: POP
// end else
23867: GO 24249
// for j = 1 to x do
23869: LD_ADDR_VAR 0 8
23873: PUSH
23874: DOUBLE
23875: LD_INT 1
23877: DEC
23878: ST_TO_ADDR
23879: LD_VAR 0 12
23883: PUSH
23884: FOR_TO
23885: IFFALSE 24247
// begin InitHc ;
23887: CALL_OW 19
// if not f then
23891: LD_VAR 0 11
23895: NOT
23896: IFFALSE 23985
// begin PrepareHuman ( false , i , skill ) ;
23898: LD_INT 0
23900: PPUSH
23901: LD_VAR 0 7
23905: PPUSH
23906: LD_VAR 0 3
23910: PPUSH
23911: CALL_OW 380
// un := CreateHuman ;
23915: LD_ADDR_VAR 0 13
23919: PUSH
23920: CALL_OW 44
23924: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23925: LD_ADDR_VAR 0 6
23929: PUSH
23930: LD_VAR 0 6
23934: PPUSH
23935: LD_INT 1
23937: PPUSH
23938: LD_VAR 0 13
23942: PPUSH
23943: CALL_OW 2
23947: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23948: LD_VAR 0 13
23952: PPUSH
23953: LD_VAR 0 1
23957: PPUSH
23958: CALL_OW 250
23962: PPUSH
23963: LD_VAR 0 1
23967: PPUSH
23968: CALL_OW 251
23972: PPUSH
23973: LD_INT 10
23975: PPUSH
23976: LD_INT 0
23978: PPUSH
23979: CALL_OW 50
// continue ;
23983: GO 23884
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
23985: LD_VAR 0 11
23989: PUSH
23990: LD_INT 1
23992: ARRAY
23993: PPUSH
23994: CALL_OW 313
23998: PUSH
23999: LD_VAR 0 11
24003: PUSH
24004: LD_INT 1
24006: ARRAY
24007: PPUSH
24008: CALL_OW 266
24012: PUSH
24013: LD_INT 32
24015: PUSH
24016: LD_INT 31
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: IN
24023: AND
24024: PUSH
24025: LD_VAR 0 11
24029: PUSH
24030: LD_INT 1
24032: ARRAY
24033: PPUSH
24034: CALL_OW 313
24038: PUSH
24039: LD_INT 6
24041: EQUAL
24042: OR
24043: IFFALSE 24063
// f := Delete ( f , 1 ) ;
24045: LD_ADDR_VAR 0 11
24049: PUSH
24050: LD_VAR 0 11
24054: PPUSH
24055: LD_INT 1
24057: PPUSH
24058: CALL_OW 3
24062: ST_TO_ADDR
// if not f then
24063: LD_VAR 0 11
24067: NOT
24068: IFFALSE 24086
// begin x := x + 2 ;
24070: LD_ADDR_VAR 0 12
24074: PUSH
24075: LD_VAR 0 12
24079: PUSH
24080: LD_INT 2
24082: PLUS
24083: ST_TO_ADDR
// continue ;
24084: GO 23884
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24086: LD_VAR 0 11
24090: PUSH
24091: LD_INT 1
24093: ARRAY
24094: PPUSH
24095: CALL_OW 266
24099: PUSH
24100: LD_INT 5
24102: EQUAL
24103: IFFALSE 24177
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24105: LD_VAR 0 11
24109: PUSH
24110: LD_INT 1
24112: ARRAY
24113: PPUSH
24114: CALL_OW 313
24118: PUSH
24119: LD_INT 3
24121: LESS
24122: IFFALSE 24158
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24124: LD_INT 0
24126: PPUSH
24127: LD_INT 5
24129: PUSH
24130: LD_INT 8
24132: PUSH
24133: LD_INT 9
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: LIST
24140: PUSH
24141: LD_VAR 0 16
24145: ARRAY
24146: PPUSH
24147: LD_VAR 0 3
24151: PPUSH
24152: CALL_OW 380
24156: GO 24175
// PrepareHuman ( false , i , skill ) ;
24158: LD_INT 0
24160: PPUSH
24161: LD_VAR 0 7
24165: PPUSH
24166: LD_VAR 0 3
24170: PPUSH
24171: CALL_OW 380
// end else
24175: GO 24194
// PrepareHuman ( false , i , skill ) ;
24177: LD_INT 0
24179: PPUSH
24180: LD_VAR 0 7
24184: PPUSH
24185: LD_VAR 0 3
24189: PPUSH
24190: CALL_OW 380
// un := CreateHuman ;
24194: LD_ADDR_VAR 0 13
24198: PUSH
24199: CALL_OW 44
24203: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24204: LD_ADDR_VAR 0 6
24208: PUSH
24209: LD_VAR 0 6
24213: PPUSH
24214: LD_INT 1
24216: PPUSH
24217: LD_VAR 0 13
24221: PPUSH
24222: CALL_OW 2
24226: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
24227: LD_VAR 0 13
24231: PPUSH
24232: LD_VAR 0 11
24236: PUSH
24237: LD_INT 1
24239: ARRAY
24240: PPUSH
24241: CALL_OW 52
// end ;
24245: GO 23884
24247: POP
24248: POP
// end ;
24249: GO 23312
24251: POP
24252: POP
// result := result ^ buildings ;
24253: LD_ADDR_VAR 0 6
24257: PUSH
24258: LD_VAR 0 6
24262: PUSH
24263: LD_VAR 0 17
24267: ADD
24268: ST_TO_ADDR
// end else
24269: GO 24412
// begin for i = 1 to personel do
24271: LD_ADDR_VAR 0 7
24275: PUSH
24276: DOUBLE
24277: LD_INT 1
24279: DEC
24280: ST_TO_ADDR
24281: LD_VAR 0 5
24285: PUSH
24286: FOR_TO
24287: IFFALSE 24410
// begin if i > 4 then
24289: LD_VAR 0 7
24293: PUSH
24294: LD_INT 4
24296: GREATER
24297: IFFALSE 24301
// break ;
24299: GO 24410
// x := personel [ i ] ;
24301: LD_ADDR_VAR 0 12
24305: PUSH
24306: LD_VAR 0 5
24310: PUSH
24311: LD_VAR 0 7
24315: ARRAY
24316: ST_TO_ADDR
// if x = - 1 then
24317: LD_VAR 0 12
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: EQUAL
24326: IFFALSE 24330
// continue ;
24328: GO 24286
// PrepareHuman ( false , i , skill ) ;
24330: LD_INT 0
24332: PPUSH
24333: LD_VAR 0 7
24337: PPUSH
24338: LD_VAR 0 3
24342: PPUSH
24343: CALL_OW 380
// un := CreateHuman ;
24347: LD_ADDR_VAR 0 13
24351: PUSH
24352: CALL_OW 44
24356: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24357: LD_VAR 0 13
24361: PPUSH
24362: LD_VAR 0 1
24366: PPUSH
24367: CALL_OW 250
24371: PPUSH
24372: LD_VAR 0 1
24376: PPUSH
24377: CALL_OW 251
24381: PPUSH
24382: LD_INT 10
24384: PPUSH
24385: LD_INT 0
24387: PPUSH
24388: CALL_OW 50
// result := result ^ un ;
24392: LD_ADDR_VAR 0 6
24396: PUSH
24397: LD_VAR 0 6
24401: PUSH
24402: LD_VAR 0 13
24406: ADD
24407: ST_TO_ADDR
// end ;
24408: GO 24286
24410: POP
24411: POP
// end ; end ;
24412: LD_VAR 0 6
24416: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
24417: LD_INT 0
24419: PPUSH
24420: PPUSH
24421: PPUSH
24422: PPUSH
24423: PPUSH
24424: PPUSH
24425: PPUSH
24426: PPUSH
24427: PPUSH
24428: PPUSH
24429: PPUSH
24430: PPUSH
24431: PPUSH
24432: PPUSH
24433: PPUSH
24434: PPUSH
// result := false ;
24435: LD_ADDR_VAR 0 2
24439: PUSH
24440: LD_INT 0
24442: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
24443: LD_VAR 0 1
24447: NOT
24448: PUSH
24449: LD_VAR 0 1
24453: PPUSH
24454: CALL_OW 266
24458: PUSH
24459: LD_INT 32
24461: PUSH
24462: LD_INT 33
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: IN
24469: NOT
24470: OR
24471: IFFALSE 24475
// exit ;
24473: GO 25606
// nat := GetNation ( tower ) ;
24475: LD_ADDR_VAR 0 11
24479: PUSH
24480: LD_VAR 0 1
24484: PPUSH
24485: CALL_OW 248
24489: ST_TO_ADDR
// side := GetSide ( tower ) ;
24490: LD_ADDR_VAR 0 15
24494: PUSH
24495: LD_VAR 0 1
24499: PPUSH
24500: CALL_OW 255
24504: ST_TO_ADDR
// x := GetX ( tower ) ;
24505: LD_ADDR_VAR 0 9
24509: PUSH
24510: LD_VAR 0 1
24514: PPUSH
24515: CALL_OW 250
24519: ST_TO_ADDR
// y := GetY ( tower ) ;
24520: LD_ADDR_VAR 0 10
24524: PUSH
24525: LD_VAR 0 1
24529: PPUSH
24530: CALL_OW 251
24534: ST_TO_ADDR
// if not x or not y then
24535: LD_VAR 0 9
24539: NOT
24540: PUSH
24541: LD_VAR 0 10
24545: NOT
24546: OR
24547: IFFALSE 24551
// exit ;
24549: GO 25606
// weapon := 0 ;
24551: LD_ADDR_VAR 0 17
24555: PUSH
24556: LD_INT 0
24558: ST_TO_ADDR
// fac_list := [ ] ;
24559: LD_ADDR_VAR 0 16
24563: PUSH
24564: EMPTY
24565: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
24566: LD_ADDR_VAR 0 5
24570: PUSH
24571: LD_VAR 0 1
24575: PPUSH
24576: CALL_OW 274
24580: PPUSH
24581: CALL 22434 0 1
24585: PPUSH
24586: LD_INT 30
24588: PUSH
24589: LD_INT 3
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PPUSH
24596: CALL_OW 72
24600: ST_TO_ADDR
// if not factories then
24601: LD_VAR 0 5
24605: NOT
24606: IFFALSE 24610
// exit ;
24608: GO 25606
// for i in factories do
24610: LD_ADDR_VAR 0 7
24614: PUSH
24615: LD_VAR 0 5
24619: PUSH
24620: FOR_IN
24621: IFFALSE 24646
// fac_list := fac_list union AvailableWeaponList ( i ) ;
24623: LD_ADDR_VAR 0 16
24627: PUSH
24628: LD_VAR 0 16
24632: PUSH
24633: LD_VAR 0 7
24637: PPUSH
24638: CALL_OW 478
24642: UNION
24643: ST_TO_ADDR
24644: GO 24620
24646: POP
24647: POP
// if not fac_list then
24648: LD_VAR 0 16
24652: NOT
24653: IFFALSE 24657
// exit ;
24655: GO 25606
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
24657: LD_ADDR_VAR 0 4
24661: PUSH
24662: LD_INT 4
24664: PUSH
24665: LD_INT 5
24667: PUSH
24668: LD_INT 9
24670: PUSH
24671: LD_INT 10
24673: PUSH
24674: LD_INT 6
24676: PUSH
24677: LD_INT 7
24679: PUSH
24680: LD_INT 11
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 27
24694: PUSH
24695: LD_INT 28
24697: PUSH
24698: LD_INT 26
24700: PUSH
24701: LD_INT 30
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 43
24712: PUSH
24713: LD_INT 44
24715: PUSH
24716: LD_INT 46
24718: PUSH
24719: LD_INT 45
24721: PUSH
24722: LD_INT 47
24724: PUSH
24725: LD_INT 49
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: LIST
24740: PUSH
24741: LD_VAR 0 11
24745: ARRAY
24746: ST_TO_ADDR
// for i in list do
24747: LD_ADDR_VAR 0 7
24751: PUSH
24752: LD_VAR 0 4
24756: PUSH
24757: FOR_IN
24758: IFFALSE 24791
// if not i in fac_list then
24760: LD_VAR 0 7
24764: PUSH
24765: LD_VAR 0 16
24769: IN
24770: NOT
24771: IFFALSE 24789
// list := list diff i ;
24773: LD_ADDR_VAR 0 4
24777: PUSH
24778: LD_VAR 0 4
24782: PUSH
24783: LD_VAR 0 7
24787: DIFF
24788: ST_TO_ADDR
24789: GO 24757
24791: POP
24792: POP
// if not list then
24793: LD_VAR 0 4
24797: NOT
24798: IFFALSE 24802
// exit ;
24800: GO 25606
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
24802: LD_VAR 0 11
24806: PUSH
24807: LD_INT 3
24809: EQUAL
24810: PUSH
24811: LD_INT 49
24813: PUSH
24814: LD_VAR 0 4
24818: IN
24819: AND
24820: PUSH
24821: LD_INT 31
24823: PPUSH
24824: LD_VAR 0 15
24828: PPUSH
24829: CALL_OW 321
24833: PUSH
24834: LD_INT 2
24836: EQUAL
24837: AND
24838: IFFALSE 24898
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
24840: LD_INT 22
24842: PUSH
24843: LD_VAR 0 15
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 35
24854: PUSH
24855: LD_INT 49
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 91
24864: PUSH
24865: LD_VAR 0 1
24869: PUSH
24870: LD_INT 10
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: LIST
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: LIST
24882: PPUSH
24883: CALL_OW 69
24887: NOT
24888: IFFALSE 24898
// weapon := ru_time_lapser ;
24890: LD_ADDR_VAR 0 17
24894: PUSH
24895: LD_INT 49
24897: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
24898: LD_VAR 0 11
24902: PUSH
24903: LD_INT 1
24905: PUSH
24906: LD_INT 2
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: IN
24913: PUSH
24914: LD_INT 11
24916: PUSH
24917: LD_VAR 0 4
24921: IN
24922: PUSH
24923: LD_INT 30
24925: PUSH
24926: LD_VAR 0 4
24930: IN
24931: OR
24932: AND
24933: PUSH
24934: LD_INT 6
24936: PPUSH
24937: LD_VAR 0 15
24941: PPUSH
24942: CALL_OW 321
24946: PUSH
24947: LD_INT 2
24949: EQUAL
24950: AND
24951: IFFALSE 25116
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
24953: LD_INT 22
24955: PUSH
24956: LD_VAR 0 15
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 2
24967: PUSH
24968: LD_INT 35
24970: PUSH
24971: LD_INT 11
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 35
24980: PUSH
24981: LD_INT 30
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 91
24995: PUSH
24996: LD_VAR 0 1
25000: PUSH
25001: LD_INT 18
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: LIST
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: LIST
25013: PPUSH
25014: CALL_OW 69
25018: NOT
25019: PUSH
25020: LD_INT 22
25022: PUSH
25023: LD_VAR 0 15
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 2
25034: PUSH
25035: LD_INT 30
25037: PUSH
25038: LD_INT 32
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 30
25047: PUSH
25048: LD_INT 33
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 91
25062: PUSH
25063: LD_VAR 0 1
25067: PUSH
25068: LD_INT 12
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: LIST
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: LIST
25080: PUSH
25081: EMPTY
25082: LIST
25083: PPUSH
25084: CALL_OW 69
25088: PUSH
25089: LD_INT 2
25091: GREATER
25092: AND
25093: IFFALSE 25116
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25095: LD_ADDR_VAR 0 17
25099: PUSH
25100: LD_INT 11
25102: PUSH
25103: LD_INT 30
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_VAR 0 11
25114: ARRAY
25115: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25116: LD_VAR 0 17
25120: NOT
25121: PUSH
25122: LD_INT 40
25124: PPUSH
25125: LD_VAR 0 15
25129: PPUSH
25130: CALL_OW 321
25134: PUSH
25135: LD_INT 2
25137: EQUAL
25138: AND
25139: PUSH
25140: LD_INT 7
25142: PUSH
25143: LD_VAR 0 4
25147: IN
25148: PUSH
25149: LD_INT 28
25151: PUSH
25152: LD_VAR 0 4
25156: IN
25157: OR
25158: PUSH
25159: LD_INT 45
25161: PUSH
25162: LD_VAR 0 4
25166: IN
25167: OR
25168: AND
25169: IFFALSE 25423
// begin hex := GetHexInfo ( x , y ) ;
25171: LD_ADDR_VAR 0 3
25175: PUSH
25176: LD_VAR 0 9
25180: PPUSH
25181: LD_VAR 0 10
25185: PPUSH
25186: CALL_OW 546
25190: ST_TO_ADDR
// if hex [ 1 ] then
25191: LD_VAR 0 3
25195: PUSH
25196: LD_INT 1
25198: ARRAY
25199: IFFALSE 25203
// exit ;
25201: GO 25606
// height := hex [ 2 ] ;
25203: LD_ADDR_VAR 0 14
25207: PUSH
25208: LD_VAR 0 3
25212: PUSH
25213: LD_INT 2
25215: ARRAY
25216: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
25217: LD_ADDR_VAR 0 13
25221: PUSH
25222: LD_INT 0
25224: PUSH
25225: LD_INT 2
25227: PUSH
25228: LD_INT 3
25230: PUSH
25231: LD_INT 5
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: ST_TO_ADDR
// for i in tmp do
25240: LD_ADDR_VAR 0 7
25244: PUSH
25245: LD_VAR 0 13
25249: PUSH
25250: FOR_IN
25251: IFFALSE 25421
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
25253: LD_ADDR_VAR 0 8
25257: PUSH
25258: LD_VAR 0 9
25262: PPUSH
25263: LD_VAR 0 7
25267: PPUSH
25268: LD_INT 5
25270: PPUSH
25271: CALL_OW 272
25275: PUSH
25276: LD_VAR 0 10
25280: PPUSH
25281: LD_VAR 0 7
25285: PPUSH
25286: LD_INT 5
25288: PPUSH
25289: CALL_OW 273
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
25298: LD_VAR 0 8
25302: PUSH
25303: LD_INT 1
25305: ARRAY
25306: PPUSH
25307: LD_VAR 0 8
25311: PUSH
25312: LD_INT 2
25314: ARRAY
25315: PPUSH
25316: CALL_OW 488
25320: IFFALSE 25419
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
25322: LD_ADDR_VAR 0 3
25326: PUSH
25327: LD_VAR 0 8
25331: PUSH
25332: LD_INT 1
25334: ARRAY
25335: PPUSH
25336: LD_VAR 0 8
25340: PUSH
25341: LD_INT 2
25343: ARRAY
25344: PPUSH
25345: CALL_OW 546
25349: ST_TO_ADDR
// if hex [ 1 ] then
25350: LD_VAR 0 3
25354: PUSH
25355: LD_INT 1
25357: ARRAY
25358: IFFALSE 25362
// continue ;
25360: GO 25250
// h := hex [ 2 ] ;
25362: LD_ADDR_VAR 0 12
25366: PUSH
25367: LD_VAR 0 3
25371: PUSH
25372: LD_INT 2
25374: ARRAY
25375: ST_TO_ADDR
// if h + 7 < height then
25376: LD_VAR 0 12
25380: PUSH
25381: LD_INT 7
25383: PLUS
25384: PUSH
25385: LD_VAR 0 14
25389: LESS
25390: IFFALSE 25419
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
25392: LD_ADDR_VAR 0 17
25396: PUSH
25397: LD_INT 7
25399: PUSH
25400: LD_INT 28
25402: PUSH
25403: LD_INT 45
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: LIST
25410: PUSH
25411: LD_VAR 0 11
25415: ARRAY
25416: ST_TO_ADDR
// break ;
25417: GO 25421
// end ; end ; end ;
25419: GO 25250
25421: POP
25422: POP
// end ; if not weapon then
25423: LD_VAR 0 17
25427: NOT
25428: IFFALSE 25488
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
25430: LD_ADDR_VAR 0 4
25434: PUSH
25435: LD_VAR 0 4
25439: PUSH
25440: LD_INT 11
25442: PUSH
25443: LD_INT 30
25445: PUSH
25446: LD_INT 49
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: LIST
25453: DIFF
25454: ST_TO_ADDR
// if not list then
25455: LD_VAR 0 4
25459: NOT
25460: IFFALSE 25464
// exit ;
25462: GO 25606
// weapon := list [ rand ( 1 , list ) ] ;
25464: LD_ADDR_VAR 0 17
25468: PUSH
25469: LD_VAR 0 4
25473: PUSH
25474: LD_INT 1
25476: PPUSH
25477: LD_VAR 0 4
25481: PPUSH
25482: CALL_OW 12
25486: ARRAY
25487: ST_TO_ADDR
// end ; if weapon then
25488: LD_VAR 0 17
25492: IFFALSE 25606
// begin tmp := CostOfWeapon ( weapon ) ;
25494: LD_ADDR_VAR 0 13
25498: PUSH
25499: LD_VAR 0 17
25503: PPUSH
25504: CALL_OW 451
25508: ST_TO_ADDR
// j := GetBase ( tower ) ;
25509: LD_ADDR_VAR 0 8
25513: PUSH
25514: LD_VAR 0 1
25518: PPUSH
25519: CALL_OW 274
25523: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
25524: LD_VAR 0 8
25528: PPUSH
25529: LD_INT 1
25531: PPUSH
25532: CALL_OW 275
25536: PUSH
25537: LD_VAR 0 13
25541: PUSH
25542: LD_INT 1
25544: ARRAY
25545: GREATEREQUAL
25546: PUSH
25547: LD_VAR 0 8
25551: PPUSH
25552: LD_INT 2
25554: PPUSH
25555: CALL_OW 275
25559: PUSH
25560: LD_VAR 0 13
25564: PUSH
25565: LD_INT 2
25567: ARRAY
25568: GREATEREQUAL
25569: AND
25570: PUSH
25571: LD_VAR 0 8
25575: PPUSH
25576: LD_INT 3
25578: PPUSH
25579: CALL_OW 275
25583: PUSH
25584: LD_VAR 0 13
25588: PUSH
25589: LD_INT 3
25591: ARRAY
25592: GREATEREQUAL
25593: AND
25594: IFFALSE 25606
// result := weapon ;
25596: LD_ADDR_VAR 0 2
25600: PUSH
25601: LD_VAR 0 17
25605: ST_TO_ADDR
// end ; end ;
25606: LD_VAR 0 2
25610: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
25611: LD_INT 0
25613: PPUSH
25614: PPUSH
// result := true ;
25615: LD_ADDR_VAR 0 3
25619: PUSH
25620: LD_INT 1
25622: ST_TO_ADDR
// if array1 = array2 then
25623: LD_VAR 0 1
25627: PUSH
25628: LD_VAR 0 2
25632: EQUAL
25633: IFFALSE 25693
// begin for i = 1 to array1 do
25635: LD_ADDR_VAR 0 4
25639: PUSH
25640: DOUBLE
25641: LD_INT 1
25643: DEC
25644: ST_TO_ADDR
25645: LD_VAR 0 1
25649: PUSH
25650: FOR_TO
25651: IFFALSE 25689
// if array1 [ i ] <> array2 [ i ] then
25653: LD_VAR 0 1
25657: PUSH
25658: LD_VAR 0 4
25662: ARRAY
25663: PUSH
25664: LD_VAR 0 2
25668: PUSH
25669: LD_VAR 0 4
25673: ARRAY
25674: NONEQUAL
25675: IFFALSE 25687
// begin result := false ;
25677: LD_ADDR_VAR 0 3
25681: PUSH
25682: LD_INT 0
25684: ST_TO_ADDR
// break ;
25685: GO 25689
// end ;
25687: GO 25650
25689: POP
25690: POP
// end else
25691: GO 25701
// result := false ;
25693: LD_ADDR_VAR 0 3
25697: PUSH
25698: LD_INT 0
25700: ST_TO_ADDR
// end ;
25701: LD_VAR 0 3
25705: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
25706: LD_INT 0
25708: PPUSH
25709: PPUSH
25710: PPUSH
// pom := GetBase ( fac ) ;
25711: LD_ADDR_VAR 0 5
25715: PUSH
25716: LD_VAR 0 1
25720: PPUSH
25721: CALL_OW 274
25725: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
25726: LD_ADDR_VAR 0 4
25730: PUSH
25731: LD_VAR 0 2
25735: PUSH
25736: LD_INT 1
25738: ARRAY
25739: PPUSH
25740: LD_VAR 0 2
25744: PUSH
25745: LD_INT 2
25747: ARRAY
25748: PPUSH
25749: LD_VAR 0 2
25753: PUSH
25754: LD_INT 3
25756: ARRAY
25757: PPUSH
25758: LD_VAR 0 2
25762: PUSH
25763: LD_INT 4
25765: ARRAY
25766: PPUSH
25767: CALL_OW 449
25771: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25772: LD_ADDR_VAR 0 3
25776: PUSH
25777: LD_VAR 0 5
25781: PPUSH
25782: LD_INT 1
25784: PPUSH
25785: CALL_OW 275
25789: PUSH
25790: LD_VAR 0 4
25794: PUSH
25795: LD_INT 1
25797: ARRAY
25798: GREATEREQUAL
25799: PUSH
25800: LD_VAR 0 5
25804: PPUSH
25805: LD_INT 2
25807: PPUSH
25808: CALL_OW 275
25812: PUSH
25813: LD_VAR 0 4
25817: PUSH
25818: LD_INT 2
25820: ARRAY
25821: GREATEREQUAL
25822: AND
25823: PUSH
25824: LD_VAR 0 5
25828: PPUSH
25829: LD_INT 3
25831: PPUSH
25832: CALL_OW 275
25836: PUSH
25837: LD_VAR 0 4
25841: PUSH
25842: LD_INT 3
25844: ARRAY
25845: GREATEREQUAL
25846: AND
25847: ST_TO_ADDR
// end ;
25848: LD_VAR 0 3
25852: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
25853: LD_INT 0
25855: PPUSH
25856: PPUSH
25857: PPUSH
25858: PPUSH
// pom := GetBase ( building ) ;
25859: LD_ADDR_VAR 0 3
25863: PUSH
25864: LD_VAR 0 1
25868: PPUSH
25869: CALL_OW 274
25873: ST_TO_ADDR
// if not pom then
25874: LD_VAR 0 3
25878: NOT
25879: IFFALSE 25883
// exit ;
25881: GO 26053
// btype := GetBType ( building ) ;
25883: LD_ADDR_VAR 0 5
25887: PUSH
25888: LD_VAR 0 1
25892: PPUSH
25893: CALL_OW 266
25897: ST_TO_ADDR
// if btype = b_armoury then
25898: LD_VAR 0 5
25902: PUSH
25903: LD_INT 4
25905: EQUAL
25906: IFFALSE 25916
// btype := b_barracks ;
25908: LD_ADDR_VAR 0 5
25912: PUSH
25913: LD_INT 5
25915: ST_TO_ADDR
// if btype = b_depot then
25916: LD_VAR 0 5
25920: PUSH
25921: LD_INT 0
25923: EQUAL
25924: IFFALSE 25934
// btype := b_warehouse ;
25926: LD_ADDR_VAR 0 5
25930: PUSH
25931: LD_INT 1
25933: ST_TO_ADDR
// if btype = b_workshop then
25934: LD_VAR 0 5
25938: PUSH
25939: LD_INT 2
25941: EQUAL
25942: IFFALSE 25952
// btype := b_factory ;
25944: LD_ADDR_VAR 0 5
25948: PUSH
25949: LD_INT 3
25951: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25952: LD_ADDR_VAR 0 4
25956: PUSH
25957: LD_VAR 0 5
25961: PPUSH
25962: LD_VAR 0 1
25966: PPUSH
25967: CALL_OW 248
25971: PPUSH
25972: CALL_OW 450
25976: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25977: LD_ADDR_VAR 0 2
25981: PUSH
25982: LD_VAR 0 3
25986: PPUSH
25987: LD_INT 1
25989: PPUSH
25990: CALL_OW 275
25994: PUSH
25995: LD_VAR 0 4
25999: PUSH
26000: LD_INT 1
26002: ARRAY
26003: GREATEREQUAL
26004: PUSH
26005: LD_VAR 0 3
26009: PPUSH
26010: LD_INT 2
26012: PPUSH
26013: CALL_OW 275
26017: PUSH
26018: LD_VAR 0 4
26022: PUSH
26023: LD_INT 2
26025: ARRAY
26026: GREATEREQUAL
26027: AND
26028: PUSH
26029: LD_VAR 0 3
26033: PPUSH
26034: LD_INT 3
26036: PPUSH
26037: CALL_OW 275
26041: PUSH
26042: LD_VAR 0 4
26046: PUSH
26047: LD_INT 3
26049: ARRAY
26050: GREATEREQUAL
26051: AND
26052: ST_TO_ADDR
// end ;
26053: LD_VAR 0 2
26057: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
26058: LD_INT 0
26060: PPUSH
26061: PPUSH
26062: PPUSH
// pom := GetBase ( building ) ;
26063: LD_ADDR_VAR 0 4
26067: PUSH
26068: LD_VAR 0 1
26072: PPUSH
26073: CALL_OW 274
26077: ST_TO_ADDR
// if not pom then
26078: LD_VAR 0 4
26082: NOT
26083: IFFALSE 26087
// exit ;
26085: GO 26188
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26087: LD_ADDR_VAR 0 5
26091: PUSH
26092: LD_VAR 0 2
26096: PPUSH
26097: LD_VAR 0 1
26101: PPUSH
26102: CALL_OW 248
26106: PPUSH
26107: CALL_OW 450
26111: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26112: LD_ADDR_VAR 0 3
26116: PUSH
26117: LD_VAR 0 4
26121: PPUSH
26122: LD_INT 1
26124: PPUSH
26125: CALL_OW 275
26129: PUSH
26130: LD_VAR 0 5
26134: PUSH
26135: LD_INT 1
26137: ARRAY
26138: GREATEREQUAL
26139: PUSH
26140: LD_VAR 0 4
26144: PPUSH
26145: LD_INT 2
26147: PPUSH
26148: CALL_OW 275
26152: PUSH
26153: LD_VAR 0 5
26157: PUSH
26158: LD_INT 2
26160: ARRAY
26161: GREATEREQUAL
26162: AND
26163: PUSH
26164: LD_VAR 0 4
26168: PPUSH
26169: LD_INT 3
26171: PPUSH
26172: CALL_OW 275
26176: PUSH
26177: LD_VAR 0 5
26181: PUSH
26182: LD_INT 3
26184: ARRAY
26185: GREATEREQUAL
26186: AND
26187: ST_TO_ADDR
// end ;
26188: LD_VAR 0 3
26192: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
26193: LD_INT 0
26195: PPUSH
26196: PPUSH
26197: PPUSH
26198: PPUSH
26199: PPUSH
26200: PPUSH
26201: PPUSH
26202: PPUSH
26203: PPUSH
26204: PPUSH
// result := false ;
26205: LD_ADDR_VAR 0 6
26209: PUSH
26210: LD_INT 0
26212: ST_TO_ADDR
// if not base or not btype or not x or not y then
26213: LD_VAR 0 1
26217: NOT
26218: PUSH
26219: LD_VAR 0 2
26223: NOT
26224: OR
26225: PUSH
26226: LD_VAR 0 3
26230: NOT
26231: OR
26232: PUSH
26233: LD_VAR 0 4
26237: NOT
26238: OR
26239: IFFALSE 26243
// exit ;
26241: GO 26757
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
26243: LD_ADDR_VAR 0 12
26247: PUSH
26248: LD_VAR 0 2
26252: PPUSH
26253: LD_VAR 0 3
26257: PPUSH
26258: LD_VAR 0 4
26262: PPUSH
26263: LD_VAR 0 5
26267: PPUSH
26268: LD_VAR 0 1
26272: PUSH
26273: LD_INT 1
26275: ARRAY
26276: PPUSH
26277: CALL_OW 248
26281: PPUSH
26282: LD_INT 0
26284: PPUSH
26285: CALL 27586 0 6
26289: ST_TO_ADDR
// if not hexes then
26290: LD_VAR 0 12
26294: NOT
26295: IFFALSE 26299
// exit ;
26297: GO 26757
// for i = 1 to hexes do
26299: LD_ADDR_VAR 0 7
26303: PUSH
26304: DOUBLE
26305: LD_INT 1
26307: DEC
26308: ST_TO_ADDR
26309: LD_VAR 0 12
26313: PUSH
26314: FOR_TO
26315: IFFALSE 26755
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26317: LD_ADDR_VAR 0 11
26321: PUSH
26322: LD_VAR 0 12
26326: PUSH
26327: LD_VAR 0 7
26331: ARRAY
26332: PUSH
26333: LD_INT 1
26335: ARRAY
26336: PPUSH
26337: LD_VAR 0 12
26341: PUSH
26342: LD_VAR 0 7
26346: ARRAY
26347: PUSH
26348: LD_INT 2
26350: ARRAY
26351: PPUSH
26352: CALL_OW 428
26356: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
26357: LD_VAR 0 11
26361: NOT
26362: PUSH
26363: LD_VAR 0 11
26367: PPUSH
26368: CALL_OW 247
26372: PUSH
26373: LD_INT 3
26375: EQUAL
26376: OR
26377: IFFALSE 26381
// continue ;
26379: GO 26314
// result := true ;
26381: LD_ADDR_VAR 0 6
26385: PUSH
26386: LD_INT 1
26388: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26389: LD_ADDR_VAR 0 15
26393: PUSH
26394: LD_INT 22
26396: PUSH
26397: LD_VAR 0 11
26401: PPUSH
26402: CALL_OW 255
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 2
26413: PUSH
26414: LD_INT 30
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 30
26426: PUSH
26427: LD_INT 1
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: LIST
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PPUSH
26443: CALL_OW 69
26447: ST_TO_ADDR
// if dep then
26448: LD_VAR 0 15
26452: IFFALSE 26588
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
26454: LD_ADDR_VAR 0 14
26458: PUSH
26459: LD_VAR 0 15
26463: PUSH
26464: LD_INT 1
26466: ARRAY
26467: PPUSH
26468: CALL_OW 250
26472: PPUSH
26473: LD_VAR 0 15
26477: PUSH
26478: LD_INT 1
26480: ARRAY
26481: PPUSH
26482: CALL_OW 254
26486: PPUSH
26487: LD_INT 5
26489: PPUSH
26490: CALL_OW 272
26494: PUSH
26495: LD_VAR 0 15
26499: PUSH
26500: LD_INT 1
26502: ARRAY
26503: PPUSH
26504: CALL_OW 251
26508: PPUSH
26509: LD_VAR 0 15
26513: PUSH
26514: LD_INT 1
26516: ARRAY
26517: PPUSH
26518: CALL_OW 254
26522: PPUSH
26523: LD_INT 5
26525: PPUSH
26526: CALL_OW 273
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
26535: LD_VAR 0 14
26539: PUSH
26540: LD_INT 1
26542: ARRAY
26543: PPUSH
26544: LD_VAR 0 14
26548: PUSH
26549: LD_INT 2
26551: ARRAY
26552: PPUSH
26553: CALL_OW 488
26557: IFFALSE 26588
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
26559: LD_VAR 0 11
26563: PPUSH
26564: LD_VAR 0 14
26568: PUSH
26569: LD_INT 1
26571: ARRAY
26572: PPUSH
26573: LD_VAR 0 14
26577: PUSH
26578: LD_INT 2
26580: ARRAY
26581: PPUSH
26582: CALL_OW 111
// continue ;
26586: GO 26314
// end ; end ; r := GetDir ( tmp ) ;
26588: LD_ADDR_VAR 0 13
26592: PUSH
26593: LD_VAR 0 11
26597: PPUSH
26598: CALL_OW 254
26602: ST_TO_ADDR
// if r = 5 then
26603: LD_VAR 0 13
26607: PUSH
26608: LD_INT 5
26610: EQUAL
26611: IFFALSE 26621
// r := 0 ;
26613: LD_ADDR_VAR 0 13
26617: PUSH
26618: LD_INT 0
26620: ST_TO_ADDR
// for j = r to 5 do
26621: LD_ADDR_VAR 0 8
26625: PUSH
26626: DOUBLE
26627: LD_VAR 0 13
26631: DEC
26632: ST_TO_ADDR
26633: LD_INT 5
26635: PUSH
26636: FOR_TO
26637: IFFALSE 26751
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
26639: LD_ADDR_VAR 0 9
26643: PUSH
26644: LD_VAR 0 11
26648: PPUSH
26649: CALL_OW 250
26653: PPUSH
26654: LD_VAR 0 8
26658: PPUSH
26659: LD_INT 2
26661: PPUSH
26662: CALL_OW 272
26666: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
26667: LD_ADDR_VAR 0 10
26671: PUSH
26672: LD_VAR 0 11
26676: PPUSH
26677: CALL_OW 251
26681: PPUSH
26682: LD_VAR 0 8
26686: PPUSH
26687: LD_INT 2
26689: PPUSH
26690: CALL_OW 273
26694: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
26695: LD_VAR 0 9
26699: PPUSH
26700: LD_VAR 0 10
26704: PPUSH
26705: CALL_OW 488
26709: PUSH
26710: LD_VAR 0 9
26714: PPUSH
26715: LD_VAR 0 10
26719: PPUSH
26720: CALL_OW 428
26724: NOT
26725: AND
26726: IFFALSE 26749
// begin ComMoveXY ( tmp , _x , _y ) ;
26728: LD_VAR 0 11
26732: PPUSH
26733: LD_VAR 0 9
26737: PPUSH
26738: LD_VAR 0 10
26742: PPUSH
26743: CALL_OW 111
// break ;
26747: GO 26751
// end ; end ;
26749: GO 26636
26751: POP
26752: POP
// end ;
26753: GO 26314
26755: POP
26756: POP
// end ;
26757: LD_VAR 0 6
26761: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
26762: LD_INT 0
26764: PPUSH
26765: PPUSH
26766: PPUSH
26767: PPUSH
26768: PPUSH
26769: PPUSH
26770: PPUSH
26771: PPUSH
26772: PPUSH
// result := false ;
26773: LD_ADDR_VAR 0 6
26777: PUSH
26778: LD_INT 0
26780: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
26781: LD_VAR 0 1
26785: NOT
26786: PUSH
26787: LD_VAR 0 1
26791: PPUSH
26792: CALL_OW 266
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: LD_INT 1
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: IN
26807: NOT
26808: OR
26809: PUSH
26810: LD_VAR 0 2
26814: NOT
26815: OR
26816: PUSH
26817: LD_VAR 0 5
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: LD_INT 2
26830: PUSH
26831: LD_INT 3
26833: PUSH
26834: LD_INT 4
26836: PUSH
26837: LD_INT 5
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: IN
26848: NOT
26849: OR
26850: PUSH
26851: LD_VAR 0 3
26855: PPUSH
26856: LD_VAR 0 4
26860: PPUSH
26861: CALL_OW 488
26865: NOT
26866: OR
26867: IFFALSE 26871
// exit ;
26869: GO 27581
// pom := GetBase ( bdepot ) ;
26871: LD_ADDR_VAR 0 9
26875: PUSH
26876: LD_VAR 0 1
26880: PPUSH
26881: CALL_OW 274
26885: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
26886: LD_ADDR_VAR 0 10
26890: PUSH
26891: LD_VAR 0 2
26895: PPUSH
26896: LD_VAR 0 1
26900: PPUSH
26901: CALL_OW 248
26905: PPUSH
26906: CALL_OW 450
26910: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26911: LD_VAR 0 9
26915: PPUSH
26916: LD_INT 1
26918: PPUSH
26919: CALL_OW 275
26923: PUSH
26924: LD_VAR 0 10
26928: PUSH
26929: LD_INT 1
26931: ARRAY
26932: GREATEREQUAL
26933: PUSH
26934: LD_VAR 0 9
26938: PPUSH
26939: LD_INT 2
26941: PPUSH
26942: CALL_OW 275
26946: PUSH
26947: LD_VAR 0 10
26951: PUSH
26952: LD_INT 2
26954: ARRAY
26955: GREATEREQUAL
26956: AND
26957: PUSH
26958: LD_VAR 0 9
26962: PPUSH
26963: LD_INT 3
26965: PPUSH
26966: CALL_OW 275
26970: PUSH
26971: LD_VAR 0 10
26975: PUSH
26976: LD_INT 3
26978: ARRAY
26979: GREATEREQUAL
26980: AND
26981: NOT
26982: IFFALSE 26986
// exit ;
26984: GO 27581
// if GetBType ( bdepot ) = b_depot then
26986: LD_VAR 0 1
26990: PPUSH
26991: CALL_OW 266
26995: PUSH
26996: LD_INT 0
26998: EQUAL
26999: IFFALSE 27011
// dist := 28 else
27001: LD_ADDR_VAR 0 13
27005: PUSH
27006: LD_INT 28
27008: ST_TO_ADDR
27009: GO 27019
// dist := 36 ;
27011: LD_ADDR_VAR 0 13
27015: PUSH
27016: LD_INT 36
27018: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
27019: LD_VAR 0 1
27023: PPUSH
27024: LD_VAR 0 3
27028: PPUSH
27029: LD_VAR 0 4
27033: PPUSH
27034: CALL_OW 297
27038: PUSH
27039: LD_VAR 0 13
27043: GREATER
27044: IFFALSE 27048
// exit ;
27046: GO 27581
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
27048: LD_ADDR_VAR 0 11
27052: PUSH
27053: LD_VAR 0 2
27057: PPUSH
27058: LD_VAR 0 3
27062: PPUSH
27063: LD_VAR 0 4
27067: PPUSH
27068: LD_VAR 0 5
27072: PPUSH
27073: LD_VAR 0 1
27077: PPUSH
27078: CALL_OW 248
27082: PPUSH
27083: LD_INT 0
27085: PPUSH
27086: CALL 27586 0 6
27090: ST_TO_ADDR
// if not hexes then
27091: LD_VAR 0 11
27095: NOT
27096: IFFALSE 27100
// exit ;
27098: GO 27581
// hex := GetHexInfo ( x , y ) ;
27100: LD_ADDR_VAR 0 14
27104: PUSH
27105: LD_VAR 0 3
27109: PPUSH
27110: LD_VAR 0 4
27114: PPUSH
27115: CALL_OW 546
27119: ST_TO_ADDR
// if hex [ 1 ] then
27120: LD_VAR 0 14
27124: PUSH
27125: LD_INT 1
27127: ARRAY
27128: IFFALSE 27132
// exit ;
27130: GO 27581
// height := hex [ 2 ] ;
27132: LD_ADDR_VAR 0 12
27136: PUSH
27137: LD_VAR 0 14
27141: PUSH
27142: LD_INT 2
27144: ARRAY
27145: ST_TO_ADDR
// for i = 1 to hexes do
27146: LD_ADDR_VAR 0 7
27150: PUSH
27151: DOUBLE
27152: LD_INT 1
27154: DEC
27155: ST_TO_ADDR
27156: LD_VAR 0 11
27160: PUSH
27161: FOR_TO
27162: IFFALSE 27490
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27164: LD_VAR 0 11
27168: PUSH
27169: LD_VAR 0 7
27173: ARRAY
27174: PUSH
27175: LD_INT 1
27177: ARRAY
27178: PPUSH
27179: LD_VAR 0 11
27183: PUSH
27184: LD_VAR 0 7
27188: ARRAY
27189: PUSH
27190: LD_INT 2
27192: ARRAY
27193: PPUSH
27194: CALL_OW 488
27198: NOT
27199: IFFALSE 27203
// continue ;
27201: GO 27161
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27203: LD_ADDR_VAR 0 8
27207: PUSH
27208: LD_VAR 0 11
27212: PUSH
27213: LD_VAR 0 7
27217: ARRAY
27218: PUSH
27219: LD_INT 1
27221: ARRAY
27222: PPUSH
27223: LD_VAR 0 11
27227: PUSH
27228: LD_VAR 0 7
27232: ARRAY
27233: PUSH
27234: LD_INT 2
27236: ARRAY
27237: PPUSH
27238: CALL_OW 546
27242: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27243: LD_VAR 0 8
27247: PUSH
27248: LD_INT 1
27250: ARRAY
27251: PUSH
27252: LD_VAR 0 8
27256: PUSH
27257: LD_INT 2
27259: ARRAY
27260: PUSH
27261: LD_VAR 0 12
27265: PUSH
27266: LD_INT 2
27268: PLUS
27269: GREATER
27270: OR
27271: PUSH
27272: LD_VAR 0 8
27276: PUSH
27277: LD_INT 2
27279: ARRAY
27280: PUSH
27281: LD_VAR 0 12
27285: PUSH
27286: LD_INT 2
27288: MINUS
27289: LESS
27290: OR
27291: PUSH
27292: LD_VAR 0 8
27296: PUSH
27297: LD_INT 3
27299: ARRAY
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: LD_INT 8
27306: PUSH
27307: LD_INT 9
27309: PUSH
27310: LD_INT 10
27312: PUSH
27313: LD_INT 11
27315: PUSH
27316: LD_INT 12
27318: PUSH
27319: LD_INT 13
27321: PUSH
27322: LD_INT 16
27324: PUSH
27325: LD_INT 17
27327: PUSH
27328: LD_INT 18
27330: PUSH
27331: LD_INT 19
27333: PUSH
27334: LD_INT 20
27336: PUSH
27337: LD_INT 21
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: IN
27355: NOT
27356: OR
27357: PUSH
27358: LD_VAR 0 8
27362: PUSH
27363: LD_INT 5
27365: ARRAY
27366: NOT
27367: OR
27368: PUSH
27369: LD_VAR 0 8
27373: PUSH
27374: LD_INT 6
27376: ARRAY
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: LD_INT 2
27383: PUSH
27384: LD_INT 7
27386: PUSH
27387: LD_INT 9
27389: PUSH
27390: LD_INT 10
27392: PUSH
27393: LD_INT 11
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: IN
27404: NOT
27405: OR
27406: PUSH
27407: LD_VAR 0 11
27411: PUSH
27412: LD_VAR 0 7
27416: ARRAY
27417: PUSH
27418: LD_INT 1
27420: ARRAY
27421: PPUSH
27422: LD_VAR 0 11
27426: PUSH
27427: LD_VAR 0 7
27431: ARRAY
27432: PUSH
27433: LD_INT 2
27435: ARRAY
27436: PPUSH
27437: CALL_OW 428
27441: PUSH
27442: LD_INT 0
27444: GREATER
27445: OR
27446: PUSH
27447: LD_VAR 0 11
27451: PUSH
27452: LD_VAR 0 7
27456: ARRAY
27457: PUSH
27458: LD_INT 1
27460: ARRAY
27461: PPUSH
27462: LD_VAR 0 11
27466: PUSH
27467: LD_VAR 0 7
27471: ARRAY
27472: PUSH
27473: LD_INT 2
27475: ARRAY
27476: PPUSH
27477: CALL_OW 351
27481: OR
27482: IFFALSE 27488
// exit ;
27484: POP
27485: POP
27486: GO 27581
// end ;
27488: GO 27161
27490: POP
27491: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
27492: LD_VAR 0 1
27496: PPUSH
27497: CALL_OW 255
27501: PPUSH
27502: LD_VAR 0 3
27506: PPUSH
27507: LD_VAR 0 4
27511: PPUSH
27512: LD_INT 20
27514: PPUSH
27515: CALL 20618 0 4
27519: PUSH
27520: LD_INT 4
27522: ARRAY
27523: IFFALSE 27527
// exit ;
27525: GO 27581
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
27527: LD_VAR 0 2
27531: PUSH
27532: LD_INT 29
27534: PUSH
27535: LD_INT 30
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: IN
27542: PUSH
27543: LD_VAR 0 3
27547: PPUSH
27548: LD_VAR 0 4
27552: PPUSH
27553: LD_VAR 0 1
27557: PPUSH
27558: CALL_OW 255
27562: PPUSH
27563: CALL_OW 440
27567: NOT
27568: AND
27569: IFFALSE 27573
// exit ;
27571: GO 27581
// result := true ;
27573: LD_ADDR_VAR 0 6
27577: PUSH
27578: LD_INT 1
27580: ST_TO_ADDR
// end ;
27581: LD_VAR 0 6
27585: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
27586: LD_INT 0
27588: PPUSH
27589: PPUSH
27590: PPUSH
27591: PPUSH
27592: PPUSH
27593: PPUSH
27594: PPUSH
27595: PPUSH
27596: PPUSH
27597: PPUSH
27598: PPUSH
27599: PPUSH
27600: PPUSH
27601: PPUSH
27602: PPUSH
27603: PPUSH
27604: PPUSH
27605: PPUSH
27606: PPUSH
27607: PPUSH
27608: PPUSH
27609: PPUSH
27610: PPUSH
27611: PPUSH
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
27616: PPUSH
27617: PPUSH
27618: PPUSH
27619: PPUSH
27620: PPUSH
27621: PPUSH
27622: PPUSH
27623: PPUSH
27624: PPUSH
27625: PPUSH
27626: PPUSH
27627: PPUSH
27628: PPUSH
27629: PPUSH
27630: PPUSH
27631: PPUSH
27632: PPUSH
27633: PPUSH
27634: PPUSH
27635: PPUSH
27636: PPUSH
27637: PPUSH
27638: PPUSH
27639: PPUSH
27640: PPUSH
27641: PPUSH
27642: PPUSH
27643: PPUSH
27644: PPUSH
27645: PPUSH
// result = [ ] ;
27646: LD_ADDR_VAR 0 7
27650: PUSH
27651: EMPTY
27652: ST_TO_ADDR
// temp_list = [ ] ;
27653: LD_ADDR_VAR 0 9
27657: PUSH
27658: EMPTY
27659: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
27660: LD_VAR 0 4
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: LD_INT 1
27670: PUSH
27671: LD_INT 2
27673: PUSH
27674: LD_INT 3
27676: PUSH
27677: LD_INT 4
27679: PUSH
27680: LD_INT 5
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: IN
27691: NOT
27692: PUSH
27693: LD_VAR 0 1
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: IN
27708: PUSH
27709: LD_VAR 0 5
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: LD_INT 2
27719: PUSH
27720: LD_INT 3
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: LIST
27727: IN
27728: NOT
27729: AND
27730: OR
27731: IFFALSE 27735
// exit ;
27733: GO 46120
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
27735: LD_VAR 0 1
27739: PUSH
27740: LD_INT 6
27742: PUSH
27743: LD_INT 7
27745: PUSH
27746: LD_INT 8
27748: PUSH
27749: LD_INT 13
27751: PUSH
27752: LD_INT 12
27754: PUSH
27755: LD_INT 15
27757: PUSH
27758: LD_INT 11
27760: PUSH
27761: LD_INT 14
27763: PUSH
27764: LD_INT 10
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: IN
27778: IFFALSE 27788
// btype = b_lab ;
27780: LD_ADDR_VAR 0 1
27784: PUSH
27785: LD_INT 6
27787: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
27788: LD_VAR 0 6
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: LD_INT 2
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: LIST
27806: IN
27807: NOT
27808: PUSH
27809: LD_VAR 0 1
27813: PUSH
27814: LD_INT 0
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: LD_INT 2
27822: PUSH
27823: LD_INT 3
27825: PUSH
27826: LD_INT 6
27828: PUSH
27829: LD_INT 36
27831: PUSH
27832: LD_INT 4
27834: PUSH
27835: LD_INT 5
27837: PUSH
27838: LD_INT 31
27840: PUSH
27841: LD_INT 32
27843: PUSH
27844: LD_INT 33
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: IN
27860: NOT
27861: PUSH
27862: LD_VAR 0 6
27866: PUSH
27867: LD_INT 1
27869: EQUAL
27870: AND
27871: OR
27872: PUSH
27873: LD_VAR 0 1
27877: PUSH
27878: LD_INT 2
27880: PUSH
27881: LD_INT 3
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: IN
27888: NOT
27889: PUSH
27890: LD_VAR 0 6
27894: PUSH
27895: LD_INT 2
27897: EQUAL
27898: AND
27899: OR
27900: IFFALSE 27910
// mode = 0 ;
27902: LD_ADDR_VAR 0 6
27906: PUSH
27907: LD_INT 0
27909: ST_TO_ADDR
// case mode of 0 :
27910: LD_VAR 0 6
27914: PUSH
27915: LD_INT 0
27917: DOUBLE
27918: EQUAL
27919: IFTRUE 27923
27921: GO 39376
27923: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27924: LD_ADDR_VAR 0 11
27928: PUSH
27929: LD_INT 0
27931: PUSH
27932: LD_INT 0
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: LD_INT 1
27944: NEG
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: LD_INT 1
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 1
27982: NEG
27983: PUSH
27984: LD_INT 0
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 1
27993: NEG
27994: PUSH
27995: LD_INT 1
27997: NEG
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 1
28005: NEG
28006: PUSH
28007: LD_INT 2
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 0
28017: PUSH
28018: LD_INT 2
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: LD_INT 2
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 0
28049: PUSH
28050: LD_INT 2
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 1
28059: NEG
28060: PUSH
28061: LD_INT 1
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 1
28070: PUSH
28071: LD_INT 3
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 0
28080: PUSH
28081: LD_INT 3
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 1
28090: NEG
28091: PUSH
28092: LD_INT 2
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28117: LD_ADDR_VAR 0 12
28121: PUSH
28122: LD_INT 0
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: LD_INT 1
28137: NEG
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 1
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: LD_INT 1
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 1
28175: NEG
28176: PUSH
28177: LD_INT 0
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 1
28186: NEG
28187: PUSH
28188: LD_INT 1
28190: NEG
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 1
28198: PUSH
28199: LD_INT 1
28201: NEG
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 2
28209: PUSH
28210: LD_INT 0
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 2
28219: PUSH
28220: LD_INT 1
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 1
28229: NEG
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 2
28240: NEG
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: NEG
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 2
28263: NEG
28264: PUSH
28265: LD_INT 1
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 3
28274: NEG
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 3
28285: NEG
28286: PUSH
28287: LD_INT 1
28289: NEG
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28313: LD_ADDR_VAR 0 13
28317: PUSH
28318: LD_INT 0
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: LD_INT 1
28333: NEG
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: LD_INT 0
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: LD_INT 1
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: LD_INT 1
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 1
28382: NEG
28383: PUSH
28384: LD_INT 1
28386: NEG
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 1
28394: NEG
28395: PUSH
28396: LD_INT 2
28398: NEG
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 2
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: LD_INT 2
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 2
28436: NEG
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 2
28448: NEG
28449: PUSH
28450: LD_INT 2
28452: NEG
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 2
28460: NEG
28461: PUSH
28462: LD_INT 3
28464: NEG
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 3
28472: NEG
28473: PUSH
28474: LD_INT 2
28476: NEG
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 3
28484: NEG
28485: PUSH
28486: LD_INT 3
28488: NEG
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28512: LD_ADDR_VAR 0 14
28516: PUSH
28517: LD_INT 0
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 0
28529: PUSH
28530: LD_INT 1
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 1
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 1
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 0
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 1
28570: NEG
28571: PUSH
28572: LD_INT 0
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 1
28581: NEG
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 1
28593: NEG
28594: PUSH
28595: LD_INT 2
28597: NEG
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: LD_INT 2
28608: NEG
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 1
28616: PUSH
28617: LD_INT 1
28619: NEG
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 1
28627: PUSH
28628: LD_INT 2
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: LD_INT 2
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 1
28647: NEG
28648: PUSH
28649: LD_INT 1
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 1
28658: NEG
28659: PUSH
28660: LD_INT 3
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: LD_INT 3
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: LD_INT 2
28684: NEG
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28708: LD_ADDR_VAR 0 15
28712: PUSH
28713: LD_INT 0
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: LD_INT 1
28728: NEG
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: LD_INT 0
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 1
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 1
28766: NEG
28767: PUSH
28768: LD_INT 0
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: LD_INT 1
28781: NEG
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: LD_INT 1
28792: NEG
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 2
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 2
28810: PUSH
28811: LD_INT 1
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 1
28820: NEG
28821: PUSH
28822: LD_INT 1
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 2
28831: NEG
28832: PUSH
28833: LD_INT 0
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 2
28842: NEG
28843: PUSH
28844: LD_INT 1
28846: NEG
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 2
28854: PUSH
28855: LD_INT 1
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 3
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 3
28875: PUSH
28876: LD_INT 1
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28901: LD_ADDR_VAR 0 16
28905: PUSH
28906: LD_INT 0
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 0
28918: PUSH
28919: LD_INT 1
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 1
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: NEG
28960: PUSH
28961: LD_INT 0
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 1
28970: NEG
28971: PUSH
28972: LD_INT 1
28974: NEG
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: LD_INT 2
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 2
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 2
29004: PUSH
29005: LD_INT 2
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 1
29014: PUSH
29015: LD_INT 2
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 2
29024: NEG
29025: PUSH
29026: LD_INT 1
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 2
29036: NEG
29037: PUSH
29038: LD_INT 2
29040: NEG
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 3
29048: PUSH
29049: LD_INT 2
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 3
29058: PUSH
29059: LD_INT 3
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 2
29068: PUSH
29069: LD_INT 3
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29094: LD_ADDR_VAR 0 17
29098: PUSH
29099: LD_INT 0
29101: PUSH
29102: LD_INT 0
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 0
29111: PUSH
29112: LD_INT 1
29114: NEG
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 1
29122: PUSH
29123: LD_INT 0
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: LD_INT 1
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: LD_INT 0
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: NEG
29164: PUSH
29165: LD_INT 1
29167: NEG
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: NEG
29176: PUSH
29177: LD_INT 2
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 0
29187: PUSH
29188: LD_INT 2
29190: NEG
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 1
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 2
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 2
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 2
29229: PUSH
29230: LD_INT 2
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: LD_INT 2
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 0
29249: PUSH
29250: LD_INT 2
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: NEG
29260: PUSH
29261: LD_INT 1
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 2
29270: NEG
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 2
29281: NEG
29282: PUSH
29283: LD_INT 1
29285: NEG
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 2
29293: NEG
29294: PUSH
29295: LD_INT 2
29297: NEG
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29324: LD_ADDR_VAR 0 18
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: LD_INT 0
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 0
29341: PUSH
29342: LD_INT 1
29344: NEG
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 1
29352: PUSH
29353: LD_INT 0
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 1
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 0
29372: PUSH
29373: LD_INT 1
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 1
29382: NEG
29383: PUSH
29384: LD_INT 0
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 1
29393: NEG
29394: PUSH
29395: LD_INT 1
29397: NEG
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 1
29405: NEG
29406: PUSH
29407: LD_INT 2
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 0
29417: PUSH
29418: LD_INT 2
29420: NEG
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 1
29428: PUSH
29429: LD_INT 1
29431: NEG
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 2
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 2
29449: PUSH
29450: LD_INT 1
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 2
29459: PUSH
29460: LD_INT 2
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 1
29469: PUSH
29470: LD_INT 2
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 0
29479: PUSH
29480: LD_INT 2
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 2
29500: NEG
29501: PUSH
29502: LD_INT 0
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 2
29511: NEG
29512: PUSH
29513: LD_INT 1
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 2
29523: NEG
29524: PUSH
29525: LD_INT 2
29527: NEG
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29554: LD_ADDR_VAR 0 19
29558: PUSH
29559: LD_INT 0
29561: PUSH
29562: LD_INT 0
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 0
29571: PUSH
29572: LD_INT 1
29574: NEG
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 1
29582: PUSH
29583: LD_INT 0
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 1
29592: PUSH
29593: LD_INT 1
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 0
29602: PUSH
29603: LD_INT 1
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 1
29612: NEG
29613: PUSH
29614: LD_INT 0
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 1
29623: NEG
29624: PUSH
29625: LD_INT 1
29627: NEG
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: NEG
29636: PUSH
29637: LD_INT 2
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 0
29647: PUSH
29648: LD_INT 2
29650: NEG
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 1
29658: PUSH
29659: LD_INT 1
29661: NEG
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 2
29669: PUSH
29670: LD_INT 0
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 2
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 2
29689: PUSH
29690: LD_INT 2
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 1
29699: PUSH
29700: LD_INT 2
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: LD_INT 2
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 1
29719: NEG
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 2
29730: NEG
29731: PUSH
29732: LD_INT 0
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 2
29741: NEG
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 2
29753: NEG
29754: PUSH
29755: LD_INT 2
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29784: LD_ADDR_VAR 0 20
29788: PUSH
29789: LD_INT 0
29791: PUSH
29792: LD_INT 0
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 0
29801: PUSH
29802: LD_INT 1
29804: NEG
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 1
29812: PUSH
29813: LD_INT 0
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: LD_INT 1
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 0
29832: PUSH
29833: LD_INT 1
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 1
29842: NEG
29843: PUSH
29844: LD_INT 0
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 1
29853: NEG
29854: PUSH
29855: LD_INT 1
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 1
29865: NEG
29866: PUSH
29867: LD_INT 2
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: LD_INT 2
29880: NEG
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: LD_INT 1
29891: NEG
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 2
29899: PUSH
29900: LD_INT 0
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 2
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 2
29919: PUSH
29920: LD_INT 2
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: LD_INT 2
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 0
29939: PUSH
29940: LD_INT 2
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: LD_INT 1
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 2
29960: NEG
29961: PUSH
29962: LD_INT 0
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 2
29971: NEG
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 2
29983: NEG
29984: PUSH
29985: LD_INT 2
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30014: LD_ADDR_VAR 0 21
30018: PUSH
30019: LD_INT 0
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 0
30031: PUSH
30032: LD_INT 1
30034: NEG
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 1
30042: PUSH
30043: LD_INT 0
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: NEG
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 1
30083: NEG
30084: PUSH
30085: LD_INT 1
30087: NEG
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 1
30095: NEG
30096: PUSH
30097: LD_INT 2
30099: NEG
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 0
30107: PUSH
30108: LD_INT 2
30110: NEG
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: LD_INT 1
30121: NEG
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: LD_INT 0
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 2
30139: PUSH
30140: LD_INT 1
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 2
30149: PUSH
30150: LD_INT 2
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: PUSH
30160: LD_INT 2
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: LD_INT 2
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 1
30179: NEG
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 2
30190: NEG
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 2
30201: NEG
30202: PUSH
30203: LD_INT 1
30205: NEG
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 2
30213: NEG
30214: PUSH
30215: LD_INT 2
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30244: LD_ADDR_VAR 0 22
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: LD_INT 0
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 0
30261: PUSH
30262: LD_INT 1
30264: NEG
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: LD_INT 0
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: LD_INT 1
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 0
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: LD_INT 0
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 1
30313: NEG
30314: PUSH
30315: LD_INT 1
30317: NEG
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: LD_INT 2
30329: NEG
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: LD_INT 2
30340: NEG
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: LD_INT 1
30351: NEG
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: LD_INT 1
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 2
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 1
30389: PUSH
30390: LD_INT 2
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: LD_INT 2
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 1
30409: NEG
30410: PUSH
30411: LD_INT 1
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 2
30420: NEG
30421: PUSH
30422: LD_INT 0
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 2
30431: NEG
30432: PUSH
30433: LD_INT 1
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 2
30443: NEG
30444: PUSH
30445: LD_INT 2
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30474: LD_ADDR_VAR 0 23
30478: PUSH
30479: LD_INT 0
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 0
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 1
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 1
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 0
30522: PUSH
30523: LD_INT 1
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 1
30532: NEG
30533: PUSH
30534: LD_INT 0
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 1
30543: NEG
30544: PUSH
30545: LD_INT 1
30547: NEG
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 1
30555: NEG
30556: PUSH
30557: LD_INT 2
30559: NEG
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 0
30567: PUSH
30568: LD_INT 2
30570: NEG
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 1
30578: PUSH
30579: LD_INT 1
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 2
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: LD_INT 1
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 2
30609: PUSH
30610: LD_INT 2
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 1
30619: PUSH
30620: LD_INT 2
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 0
30629: PUSH
30630: LD_INT 2
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: LD_INT 1
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 2
30650: NEG
30651: PUSH
30652: LD_INT 0
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 2
30661: NEG
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 2
30673: NEG
30674: PUSH
30675: LD_INT 2
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 2
30685: NEG
30686: PUSH
30687: LD_INT 3
30689: NEG
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 1
30697: NEG
30698: PUSH
30699: LD_INT 3
30701: NEG
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: LD_INT 2
30712: NEG
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 2
30720: PUSH
30721: LD_INT 1
30723: NEG
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
30754: LD_ADDR_VAR 0 24
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: LD_INT 0
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 1
30792: PUSH
30793: LD_INT 1
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 0
30802: PUSH
30803: LD_INT 1
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 1
30812: NEG
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 1
30823: NEG
30824: PUSH
30825: LD_INT 1
30827: NEG
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 1
30835: NEG
30836: PUSH
30837: LD_INT 2
30839: NEG
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: LD_INT 2
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: LD_INT 1
30861: NEG
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 2
30869: PUSH
30870: LD_INT 0
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: LD_INT 1
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 2
30889: PUSH
30890: LD_INT 2
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: LD_INT 2
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: LD_INT 2
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 2
30930: NEG
30931: PUSH
30932: LD_INT 0
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 2
30941: NEG
30942: PUSH
30943: LD_INT 1
30945: NEG
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 2
30953: NEG
30954: PUSH
30955: LD_INT 2
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: LD_INT 2
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 2
30976: PUSH
30977: LD_INT 1
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 3
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 3
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
31030: LD_ADDR_VAR 0 25
31034: PUSH
31035: LD_INT 0
31037: PUSH
31038: LD_INT 0
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 0
31047: PUSH
31048: LD_INT 1
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 1
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: LD_INT 1
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 0
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 1
31088: NEG
31089: PUSH
31090: LD_INT 0
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 1
31099: NEG
31100: PUSH
31101: LD_INT 1
31103: NEG
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: LD_INT 2
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: LD_INT 2
31126: NEG
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 1
31134: PUSH
31135: LD_INT 1
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: LD_INT 0
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 2
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 2
31165: PUSH
31166: LD_INT 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: LD_INT 2
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 1
31195: NEG
31196: PUSH
31197: LD_INT 1
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 2
31206: NEG
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 2
31229: NEG
31230: PUSH
31231: LD_INT 2
31233: NEG
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 3
31241: PUSH
31242: LD_INT 1
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 3
31251: PUSH
31252: LD_INT 2
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 2
31261: PUSH
31262: LD_INT 3
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: PUSH
31272: LD_INT 3
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31304: LD_ADDR_VAR 0 26
31308: PUSH
31309: LD_INT 0
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 0
31321: PUSH
31322: LD_INT 1
31324: NEG
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 1
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 0
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 1
31362: NEG
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 1
31373: NEG
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: LD_INT 2
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 0
31397: PUSH
31398: LD_INT 2
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 1
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 2
31419: PUSH
31420: LD_INT 0
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 2
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 2
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 1
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 0
31459: PUSH
31460: LD_INT 2
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 2
31480: NEG
31481: PUSH
31482: LD_INT 0
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 2
31491: NEG
31492: PUSH
31493: LD_INT 1
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 2
31503: NEG
31504: PUSH
31505: LD_INT 2
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 2
31515: PUSH
31516: LD_INT 3
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: PUSH
31526: LD_INT 3
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 1
31535: NEG
31536: PUSH
31537: LD_INT 2
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 2
31546: NEG
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31580: LD_ADDR_VAR 0 27
31584: PUSH
31585: LD_INT 0
31587: PUSH
31588: LD_INT 0
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: LD_INT 0
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 1
31618: PUSH
31619: LD_INT 1
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 1
31638: NEG
31639: PUSH
31640: LD_INT 0
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 1
31649: NEG
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 1
31661: NEG
31662: PUSH
31663: LD_INT 2
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: LD_INT 2
31676: NEG
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 1
31684: PUSH
31685: LD_INT 1
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 2
31695: PUSH
31696: LD_INT 0
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 2
31705: PUSH
31706: LD_INT 1
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 2
31715: PUSH
31716: LD_INT 2
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 1
31725: PUSH
31726: LD_INT 2
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: LD_INT 2
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 1
31745: NEG
31746: PUSH
31747: LD_INT 1
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 2
31756: NEG
31757: PUSH
31758: LD_INT 0
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 2
31767: NEG
31768: PUSH
31769: LD_INT 1
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 2
31779: NEG
31780: PUSH
31781: LD_INT 2
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: LD_INT 2
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 2
31802: NEG
31803: PUSH
31804: LD_INT 1
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 3
31813: NEG
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 3
31825: NEG
31826: PUSH
31827: LD_INT 2
31829: NEG
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31860: LD_ADDR_VAR 0 28
31864: PUSH
31865: LD_INT 0
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: LD_INT 1
31880: NEG
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 1
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 0
31908: PUSH
31909: LD_INT 1
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 1
31918: NEG
31919: PUSH
31920: LD_INT 0
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: LD_INT 2
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: LD_INT 2
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 1
31964: PUSH
31965: LD_INT 1
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 2
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: LD_INT 2
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: LD_INT 2
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: LD_INT 2
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: NEG
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 2
32036: NEG
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 2
32047: NEG
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 2
32059: NEG
32060: PUSH
32061: LD_INT 2
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 2
32071: NEG
32072: PUSH
32073: LD_INT 3
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 1
32083: NEG
32084: PUSH
32085: LD_INT 3
32087: NEG
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 3
32095: NEG
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 3
32107: NEG
32108: PUSH
32109: LD_INT 2
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32142: LD_ADDR_VAR 0 29
32146: PUSH
32147: LD_INT 0
32149: PUSH
32150: LD_INT 0
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 0
32159: PUSH
32160: LD_INT 1
32162: NEG
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 1
32170: PUSH
32171: LD_INT 0
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 0
32190: PUSH
32191: LD_INT 1
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 1
32200: NEG
32201: PUSH
32202: LD_INT 0
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 1
32211: NEG
32212: PUSH
32213: LD_INT 1
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 1
32223: NEG
32224: PUSH
32225: LD_INT 2
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 0
32235: PUSH
32236: LD_INT 2
32238: NEG
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 2
32257: PUSH
32258: LD_INT 0
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 2
32267: PUSH
32268: LD_INT 1
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: LD_INT 2
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: LD_INT 2
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 2
32308: NEG
32309: PUSH
32310: LD_INT 1
32312: NEG
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 2
32320: NEG
32321: PUSH
32322: LD_INT 2
32324: NEG
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 2
32332: NEG
32333: PUSH
32334: LD_INT 3
32336: NEG
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: LD_INT 1
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 3
32355: PUSH
32356: LD_INT 1
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 1
32365: PUSH
32366: LD_INT 3
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 1
32375: NEG
32376: PUSH
32377: LD_INT 2
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 3
32386: NEG
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32421: LD_ADDR_VAR 0 30
32425: PUSH
32426: LD_INT 0
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 0
32438: PUSH
32439: LD_INT 1
32441: NEG
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 1
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: LD_INT 1
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: LD_INT 1
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: LD_INT 0
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: NEG
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: LD_INT 2
32506: NEG
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 0
32514: PUSH
32515: LD_INT 2
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: PUSH
32526: LD_INT 1
32528: NEG
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 2
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 2
32556: PUSH
32557: LD_INT 2
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 1
32576: NEG
32577: PUSH
32578: LD_INT 1
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 2
32587: NEG
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 2
32598: NEG
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 1
32610: NEG
32611: PUSH
32612: LD_INT 3
32614: NEG
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 1
32622: PUSH
32623: LD_INT 2
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 3
32633: PUSH
32634: LD_INT 2
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 2
32643: PUSH
32644: LD_INT 3
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 2
32653: NEG
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 3
32664: NEG
32665: PUSH
32666: LD_INT 1
32668: NEG
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32699: LD_ADDR_VAR 0 31
32703: PUSH
32704: LD_INT 0
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 0
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 1
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 1
32737: PUSH
32738: LD_INT 1
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 0
32747: PUSH
32748: LD_INT 1
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 1
32757: NEG
32758: PUSH
32759: LD_INT 0
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 1
32768: NEG
32769: PUSH
32770: LD_INT 1
32772: NEG
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: LD_INT 2
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: LD_INT 1
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 2
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: LD_INT 2
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: LD_INT 2
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: LD_INT 2
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 1
32853: NEG
32854: PUSH
32855: LD_INT 1
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 2
32864: NEG
32865: PUSH
32866: LD_INT 1
32868: NEG
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 2
32876: NEG
32877: PUSH
32878: LD_INT 2
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 2
32888: NEG
32889: PUSH
32890: LD_INT 3
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: LD_INT 1
32903: NEG
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 3
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: LD_INT 3
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: LD_INT 2
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 3
32942: NEG
32943: PUSH
32944: LD_INT 2
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32977: LD_ADDR_VAR 0 32
32981: PUSH
32982: LD_INT 0
32984: PUSH
32985: LD_INT 0
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 0
32994: PUSH
32995: LD_INT 1
32997: NEG
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 1
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: LD_INT 1
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 1
33046: NEG
33047: PUSH
33048: LD_INT 1
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: LD_INT 2
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: LD_INT 2
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: LD_INT 1
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 2
33092: PUSH
33093: LD_INT 1
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 2
33102: PUSH
33103: LD_INT 2
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: LD_INT 2
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: LD_INT 2
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 1
33132: NEG
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 2
33143: NEG
33144: PUSH
33145: LD_INT 0
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 2
33154: NEG
33155: PUSH
33156: LD_INT 1
33158: NEG
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 1
33166: NEG
33167: PUSH
33168: LD_INT 3
33170: NEG
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 1
33178: PUSH
33179: LD_INT 2
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 3
33189: PUSH
33190: LD_INT 2
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 2
33199: PUSH
33200: LD_INT 3
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 2
33209: NEG
33210: PUSH
33211: LD_INT 1
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 3
33220: NEG
33221: PUSH
33222: LD_INT 1
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33255: LD_ADDR_VAR 0 33
33259: PUSH
33260: LD_INT 0
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 0
33272: PUSH
33273: LD_INT 1
33275: NEG
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 1
33283: PUSH
33284: LD_INT 0
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: LD_INT 1
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: LD_INT 0
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 1
33324: NEG
33325: PUSH
33326: LD_INT 1
33328: NEG
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 1
33336: NEG
33337: PUSH
33338: LD_INT 2
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 1
33348: PUSH
33349: LD_INT 1
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: LD_INT 0
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 2
33369: PUSH
33370: LD_INT 1
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: LD_INT 2
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: LD_INT 0
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 2
33421: NEG
33422: PUSH
33423: LD_INT 1
33425: NEG
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 2
33433: NEG
33434: PUSH
33435: LD_INT 2
33437: NEG
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 2
33445: NEG
33446: PUSH
33447: LD_INT 3
33449: NEG
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 2
33457: PUSH
33458: LD_INT 1
33460: NEG
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 3
33468: PUSH
33469: LD_INT 1
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: LD_INT 3
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 1
33488: NEG
33489: PUSH
33490: LD_INT 2
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 3
33499: NEG
33500: PUSH
33501: LD_INT 2
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33534: LD_ADDR_VAR 0 34
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: LD_INT 0
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 0
33551: PUSH
33552: LD_INT 1
33554: NEG
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: LD_INT 0
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 1
33572: PUSH
33573: LD_INT 1
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 0
33582: PUSH
33583: LD_INT 1
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 1
33603: NEG
33604: PUSH
33605: LD_INT 1
33607: NEG
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 1
33615: NEG
33616: PUSH
33617: LD_INT 2
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: LD_INT 2
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 1
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 2
33659: PUSH
33660: LD_INT 2
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 1
33669: PUSH
33670: LD_INT 2
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 2
33690: NEG
33691: PUSH
33692: LD_INT 0
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: NEG
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: NEG
33714: PUSH
33715: LD_INT 2
33717: NEG
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 1
33725: NEG
33726: PUSH
33727: LD_INT 3
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: PUSH
33738: LD_INT 2
33740: NEG
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 3
33748: PUSH
33749: LD_INT 2
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 2
33758: PUSH
33759: LD_INT 3
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 2
33768: NEG
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 3
33779: NEG
33780: PUSH
33781: LD_INT 1
33783: NEG
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33814: LD_ADDR_VAR 0 35
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 0
33831: PUSH
33832: LD_INT 1
33834: NEG
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 1
33842: PUSH
33843: LD_INT 0
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 1
33852: PUSH
33853: LD_INT 1
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 1
33872: NEG
33873: PUSH
33874: LD_INT 0
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 2
33895: PUSH
33896: LD_INT 1
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 2
33905: NEG
33906: PUSH
33907: LD_INT 1
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33926: LD_ADDR_VAR 0 36
33930: PUSH
33931: LD_INT 0
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 0
33943: PUSH
33944: LD_INT 1
33946: NEG
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 0
33974: PUSH
33975: LD_INT 1
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 1
33984: NEG
33985: PUSH
33986: LD_INT 0
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: NEG
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 1
34007: NEG
34008: PUSH
34009: LD_INT 2
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: LD_INT 2
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34038: LD_ADDR_VAR 0 37
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: LD_INT 1
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 1
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 0
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: NEG
34097: PUSH
34098: LD_INT 0
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: NEG
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34150: LD_ADDR_VAR 0 38
34154: PUSH
34155: LD_INT 0
34157: PUSH
34158: LD_INT 0
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: LD_INT 1
34170: NEG
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 1
34178: PUSH
34179: LD_INT 0
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 1
34188: PUSH
34189: LD_INT 1
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 0
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 1
34208: NEG
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 1
34219: NEG
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 2
34231: PUSH
34232: LD_INT 1
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 2
34241: NEG
34242: PUSH
34243: LD_INT 1
34245: NEG
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34262: LD_ADDR_VAR 0 39
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: LD_INT 1
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 1
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 1
34300: PUSH
34301: LD_INT 1
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 1
34320: NEG
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 1
34331: NEG
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: LD_INT 2
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 1
34355: PUSH
34356: LD_INT 2
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34374: LD_ADDR_VAR 0 40
34378: PUSH
34379: LD_INT 0
34381: PUSH
34382: LD_INT 0
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: LD_INT 1
34394: NEG
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 1
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 0
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 1
34432: NEG
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 1
34443: NEG
34444: PUSH
34445: LD_INT 1
34447: NEG
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: LD_INT 1
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34486: LD_ADDR_VAR 0 41
34490: PUSH
34491: LD_INT 0
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: LD_INT 1
34506: NEG
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: LD_INT 0
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 1
34524: PUSH
34525: LD_INT 1
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 1
34544: NEG
34545: PUSH
34546: LD_INT 0
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 1
34555: NEG
34556: PUSH
34557: LD_INT 1
34559: NEG
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: NEG
34568: PUSH
34569: LD_INT 2
34571: NEG
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 1
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 2
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 1
34630: NEG
34631: PUSH
34632: LD_INT 1
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 2
34641: NEG
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 2
34652: NEG
34653: PUSH
34654: LD_INT 1
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 2
34664: NEG
34665: PUSH
34666: LD_INT 2
34668: NEG
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 2
34676: NEG
34677: PUSH
34678: LD_INT 3
34680: NEG
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 3
34699: PUSH
34700: LD_INT 0
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 3
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 3
34719: PUSH
34720: LD_INT 2
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 3
34729: PUSH
34730: LD_INT 3
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: LD_INT 3
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 2
34749: NEG
34750: PUSH
34751: LD_INT 1
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 3
34760: NEG
34761: PUSH
34762: LD_INT 0
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 3
34771: NEG
34772: PUSH
34773: LD_INT 1
34775: NEG
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 3
34783: NEG
34784: PUSH
34785: LD_INT 2
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 3
34795: NEG
34796: PUSH
34797: LD_INT 3
34799: NEG
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34836: LD_ADDR_VAR 0 42
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: LD_INT 1
34856: NEG
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 1
34864: PUSH
34865: LD_INT 0
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: LD_INT 1
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: LD_INT 1
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 1
34894: NEG
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 1
34905: NEG
34906: PUSH
34907: LD_INT 1
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 1
34917: NEG
34918: PUSH
34919: LD_INT 2
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: LD_INT 2
34932: NEG
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 1
34940: PUSH
34941: LD_INT 1
34943: NEG
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 2
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 2
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 1
34971: PUSH
34972: LD_INT 2
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: LD_INT 2
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 1
34991: NEG
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 2
35002: NEG
35003: PUSH
35004: LD_INT 1
35006: NEG
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 2
35014: NEG
35015: PUSH
35016: LD_INT 2
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 2
35026: NEG
35027: PUSH
35028: LD_INT 3
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: LD_INT 3
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: LD_INT 3
35053: NEG
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 1
35061: PUSH
35062: LD_INT 2
35064: NEG
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 3
35072: PUSH
35073: LD_INT 2
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 3
35082: PUSH
35083: LD_INT 3
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 2
35092: PUSH
35093: LD_INT 3
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: PUSH
35103: LD_INT 3
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: LD_INT 3
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 1
35122: NEG
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 3
35133: NEG
35134: PUSH
35135: LD_INT 2
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 3
35145: NEG
35146: PUSH
35147: LD_INT 3
35149: NEG
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35186: LD_ADDR_VAR 0 43
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 0
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 1
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 1
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 0
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: LD_INT 0
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 1
35267: NEG
35268: PUSH
35269: LD_INT 2
35271: NEG
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 0
35279: PUSH
35280: LD_INT 2
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: LD_INT 1
35293: NEG
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 2
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 2
35311: PUSH
35312: LD_INT 1
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: LD_INT 2
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: LD_INT 2
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 1
35341: NEG
35342: PUSH
35343: LD_INT 1
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 2
35352: NEG
35353: PUSH
35354: LD_INT 0
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 2
35363: NEG
35364: PUSH
35365: LD_INT 1
35367: NEG
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 1
35375: NEG
35376: PUSH
35377: LD_INT 3
35379: NEG
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 0
35387: PUSH
35388: LD_INT 3
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 1
35398: PUSH
35399: LD_INT 2
35401: NEG
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 2
35409: PUSH
35410: LD_INT 1
35412: NEG
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 3
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 3
35430: PUSH
35431: LD_INT 1
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: LD_INT 3
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: LD_INT 3
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 1
35460: NEG
35461: PUSH
35462: LD_INT 2
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 2
35471: NEG
35472: PUSH
35473: LD_INT 1
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 3
35482: NEG
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 3
35493: NEG
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35534: LD_ADDR_VAR 0 44
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: LD_INT 1
35554: NEG
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 1
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: PUSH
35573: LD_INT 1
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 1
35592: NEG
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: NEG
35604: PUSH
35605: LD_INT 1
35607: NEG
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: NEG
35616: PUSH
35617: LD_INT 2
35619: NEG
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 1
35627: PUSH
35628: LD_INT 1
35630: NEG
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 2
35638: PUSH
35639: LD_INT 0
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 2
35648: PUSH
35649: LD_INT 1
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 2
35658: PUSH
35659: LD_INT 2
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: LD_INT 2
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: LD_INT 1
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 2
35689: NEG
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 2
35700: NEG
35701: PUSH
35702: LD_INT 1
35704: NEG
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 2
35712: NEG
35713: PUSH
35714: LD_INT 2
35716: NEG
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 2
35724: NEG
35725: PUSH
35726: LD_INT 3
35728: NEG
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 2
35736: PUSH
35737: LD_INT 1
35739: NEG
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 3
35747: PUSH
35748: LD_INT 0
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 3
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 3
35767: PUSH
35768: LD_INT 2
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 3
35777: PUSH
35778: LD_INT 3
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 2
35787: PUSH
35788: LD_INT 3
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 2
35797: NEG
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 3
35808: NEG
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 3
35819: NEG
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 3
35831: NEG
35832: PUSH
35833: LD_INT 2
35835: NEG
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 3
35843: NEG
35844: PUSH
35845: LD_INT 3
35847: NEG
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35884: LD_ADDR_VAR 0 45
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: LD_INT 0
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 1
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: LD_INT 1
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 1
35942: NEG
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: NEG
35954: PUSH
35955: LD_INT 1
35957: NEG
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: LD_INT 2
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: LD_INT 2
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: LD_INT 1
35991: NEG
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 2
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 2
36009: PUSH
36010: LD_INT 2
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: LD_INT 2
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 0
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 2
36050: NEG
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 2
36062: NEG
36063: PUSH
36064: LD_INT 2
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 2
36074: NEG
36075: PUSH
36076: LD_INT 3
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 1
36086: NEG
36087: PUSH
36088: LD_INT 3
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: LD_INT 3
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 1
36109: PUSH
36110: LD_INT 2
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 3
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 3
36130: PUSH
36131: LD_INT 3
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 2
36140: PUSH
36141: LD_INT 3
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 1
36150: PUSH
36151: LD_INT 3
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: LD_INT 3
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: NEG
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 3
36181: NEG
36182: PUSH
36183: LD_INT 2
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 3
36193: NEG
36194: PUSH
36195: LD_INT 3
36197: NEG
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36234: LD_ADDR_VAR 0 46
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 1
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: LD_INT 2
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: LD_INT 2
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 2
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 2
36359: PUSH
36360: LD_INT 1
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: LD_INT 2
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: LD_INT 2
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: LD_INT 1
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 2
36400: NEG
36401: PUSH
36402: LD_INT 0
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 2
36411: NEG
36412: PUSH
36413: LD_INT 1
36415: NEG
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: LD_INT 3
36427: NEG
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 0
36435: PUSH
36436: LD_INT 3
36438: NEG
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: LD_INT 2
36449: NEG
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: LD_INT 1
36460: NEG
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 3
36468: PUSH
36469: LD_INT 0
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 3
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: PUSH
36489: LD_INT 3
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: LD_INT 3
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: NEG
36509: PUSH
36510: LD_INT 2
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 2
36519: NEG
36520: PUSH
36521: LD_INT 1
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 3
36530: NEG
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 3
36541: NEG
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36582: LD_ADDR_VAR 0 47
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: LD_INT 0
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: LD_INT 1
36602: NEG
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 1
36610: PUSH
36611: LD_INT 0
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: LD_INT 1
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 1
36640: NEG
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: NEG
36652: PUSH
36653: LD_INT 1
36655: NEG
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 1
36663: NEG
36664: PUSH
36665: LD_INT 2
36667: NEG
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: LD_INT 2
36678: NEG
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: PUSH
36687: LD_INT 1
36689: NEG
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 2
36697: NEG
36698: PUSH
36699: LD_INT 1
36701: NEG
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 2
36709: NEG
36710: PUSH
36711: LD_INT 2
36713: NEG
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36733: LD_ADDR_VAR 0 48
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: LD_INT 0
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: LD_INT 1
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: NEG
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: LD_INT 1
36806: NEG
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: LD_INT 2
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: LD_INT 2
36829: NEG
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 1
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 2
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 2
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36880: LD_ADDR_VAR 0 49
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: LD_INT 1
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: NEG
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: LD_INT 1
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: LD_INT 1
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 2
36992: PUSH
36993: LD_INT 2
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37024: LD_ADDR_VAR 0 50
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 1
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: PUSH
37063: LD_INT 1
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: LD_INT 1
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 1
37093: NEG
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 2
37115: PUSH
37116: LD_INT 2
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: LD_INT 2
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 1
37145: NEG
37146: PUSH
37147: LD_INT 1
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37168: LD_ADDR_VAR 0 51
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 0
37185: PUSH
37186: LD_INT 1
37188: NEG
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 1
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 1
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: LD_INT 1
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: NEG
37227: PUSH
37228: LD_INT 0
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 1
37237: NEG
37238: PUSH
37239: LD_INT 1
37241: NEG
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: LD_INT 2
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: LD_INT 1
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 2
37280: NEG
37281: PUSH
37282: LD_INT 0
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 2
37291: NEG
37292: PUSH
37293: LD_INT 1
37295: NEG
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37315: LD_ADDR_VAR 0 52
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: LD_INT 1
37335: NEG
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: LD_INT 0
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: LD_INT 1
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 0
37363: PUSH
37364: LD_INT 1
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 1
37373: NEG
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 1
37384: NEG
37385: PUSH
37386: LD_INT 1
37388: NEG
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: LD_INT 2
37400: NEG
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 2
37419: NEG
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 2
37430: NEG
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: LD_INT 2
37446: NEG
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37466: LD_ADDR_VAR 0 53
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: LD_INT 1
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: LD_INT 1
37539: NEG
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 1
37547: NEG
37548: PUSH
37549: LD_INT 2
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: LD_INT 1
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 2
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 2
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 2
37601: PUSH
37602: LD_INT 2
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: LD_INT 2
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 0
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 2
37642: NEG
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 2
37653: NEG
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 2
37665: NEG
37666: PUSH
37667: LD_INT 2
37669: NEG
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37696: LD_ADDR_VAR 0 54
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 0
37713: PUSH
37714: LD_INT 1
37716: NEG
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: LD_INT 1
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: NEG
37766: PUSH
37767: LD_INT 1
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 1
37777: NEG
37778: PUSH
37779: LD_INT 2
37781: NEG
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: LD_INT 2
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 2
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 2
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: LD_INT 2
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 2
37872: NEG
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 2
37883: NEG
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 2
37895: NEG
37896: PUSH
37897: LD_INT 2
37899: NEG
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37926: LD_ADDR_VAR 0 55
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: LD_INT 1
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: NEG
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: LD_INT 2
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 2
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 2
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 2
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: LD_INT 2
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: LD_INT 2
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 2
38102: NEG
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 2
38113: NEG
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 2
38125: NEG
38126: PUSH
38127: LD_INT 2
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38156: LD_ADDR_VAR 0 56
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: LD_INT 1
38176: NEG
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: NEG
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: LD_INT 2
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: LD_INT 2
38252: NEG
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 1
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 2
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 2
38281: PUSH
38282: LD_INT 1
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: LD_INT 2
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: LD_INT 2
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 2
38332: NEG
38333: PUSH
38334: LD_INT 0
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 2
38343: NEG
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 2
38355: NEG
38356: PUSH
38357: LD_INT 2
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38386: LD_ADDR_VAR 0 57
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: NEG
38445: PUSH
38446: LD_INT 0
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 1
38455: NEG
38456: PUSH
38457: LD_INT 1
38459: NEG
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 1
38467: NEG
38468: PUSH
38469: LD_INT 2
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: LD_INT 2
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 2
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 2
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: LD_INT 2
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 2
38562: NEG
38563: PUSH
38564: LD_INT 0
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 2
38573: NEG
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 2
38585: NEG
38586: PUSH
38587: LD_INT 2
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38616: LD_ADDR_VAR 0 58
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: LD_INT 1
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: LD_INT 1
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 1
38674: NEG
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 1
38685: NEG
38686: PUSH
38687: LD_INT 1
38689: NEG
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: LD_INT 2
38701: NEG
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: LD_INT 2
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: LD_INT 1
38723: NEG
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 2
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 2
38751: PUSH
38752: LD_INT 2
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: LD_INT 2
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 2
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 2
38792: NEG
38793: PUSH
38794: LD_INT 0
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 2
38803: NEG
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 2
38815: NEG
38816: PUSH
38817: LD_INT 2
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38846: LD_ADDR_VAR 0 59
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: LD_INT 1
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PUSH
38917: LD_INT 1
38919: NEG
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38934: LD_ADDR_VAR 0 60
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 0
38982: PUSH
38983: LD_INT 1
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: LD_INT 0
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 1
39003: NEG
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39022: LD_ADDR_VAR 0 61
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39110: LD_ADDR_VAR 0 62
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 0
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 0
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 1
39179: NEG
39180: PUSH
39181: LD_INT 1
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39198: LD_ADDR_VAR 0 63
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: PUSH
39237: LD_INT 1
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: NEG
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: NEG
39268: PUSH
39269: LD_INT 1
39271: NEG
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39286: LD_ADDR_VAR 0 64
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: LD_INT 1
39306: NEG
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: LD_INT 1
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 1
39355: NEG
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: ST_TO_ADDR
// end ; 1 :
39374: GO 45271
39376: LD_INT 1
39378: DOUBLE
39379: EQUAL
39380: IFTRUE 39384
39382: GO 42007
39384: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39385: LD_ADDR_VAR 0 11
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: LD_INT 3
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: LD_INT 3
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: LD_INT 2
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: LIST
39428: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39429: LD_ADDR_VAR 0 12
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 3
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 3
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: LIST
39469: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39470: LD_ADDR_VAR 0 13
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 3
39487: PUSH
39488: LD_INT 3
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 2
39497: PUSH
39498: LD_INT 3
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: LIST
39509: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39510: LD_ADDR_VAR 0 14
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: LD_INT 3
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: LD_INT 3
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: LD_INT 2
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: LIST
39550: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39551: LD_ADDR_VAR 0 15
39555: PUSH
39556: LD_INT 2
39558: NEG
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 3
39569: NEG
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 3
39580: NEG
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: LIST
39594: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39595: LD_ADDR_VAR 0 16
39599: PUSH
39600: LD_INT 2
39602: NEG
39603: PUSH
39604: LD_INT 3
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 3
39614: NEG
39615: PUSH
39616: LD_INT 2
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 3
39626: NEG
39627: PUSH
39628: LD_INT 3
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: LIST
39640: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39641: LD_ADDR_VAR 0 17
39645: PUSH
39646: LD_INT 1
39648: NEG
39649: PUSH
39650: LD_INT 3
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 0
39660: PUSH
39661: LD_INT 3
39663: NEG
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: LD_INT 2
39674: NEG
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: LIST
39684: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39685: LD_ADDR_VAR 0 18
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 3
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 3
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: LIST
39725: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39726: LD_ADDR_VAR 0 19
39730: PUSH
39731: LD_INT 3
39733: PUSH
39734: LD_INT 2
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 3
39743: PUSH
39744: LD_INT 3
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: LD_INT 3
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: LIST
39765: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39766: LD_ADDR_VAR 0 20
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: LD_INT 3
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: LD_INT 3
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: LD_INT 2
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: LIST
39806: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39807: LD_ADDR_VAR 0 21
39811: PUSH
39812: LD_INT 2
39814: NEG
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 3
39825: NEG
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 3
39836: NEG
39837: PUSH
39838: LD_INT 1
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39851: LD_ADDR_VAR 0 22
39855: PUSH
39856: LD_INT 2
39858: NEG
39859: PUSH
39860: LD_INT 3
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 3
39870: NEG
39871: PUSH
39872: LD_INT 2
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 3
39882: NEG
39883: PUSH
39884: LD_INT 3
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39897: LD_ADDR_VAR 0 23
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: LD_INT 3
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 1
39915: NEG
39916: PUSH
39917: LD_INT 4
39919: NEG
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: LD_INT 3
39930: NEG
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: LIST
39940: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39941: LD_ADDR_VAR 0 24
39945: PUSH
39946: LD_INT 3
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 3
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 4
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: LIST
39981: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39982: LD_ADDR_VAR 0 25
39986: PUSH
39987: LD_INT 3
39989: PUSH
39990: LD_INT 3
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 4
39999: PUSH
40000: LD_INT 3
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 3
40009: PUSH
40010: LD_INT 4
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: LIST
40021: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
40022: LD_ADDR_VAR 0 26
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: LD_INT 3
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: LD_INT 4
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 1
40049: NEG
40050: PUSH
40051: LD_INT 3
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
40063: LD_ADDR_VAR 0 27
40067: PUSH
40068: LD_INT 3
40070: NEG
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 3
40081: NEG
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 4
40092: NEG
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: LIST
40106: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
40107: LD_ADDR_VAR 0 28
40111: PUSH
40112: LD_INT 3
40114: NEG
40115: PUSH
40116: LD_INT 3
40118: NEG
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 3
40126: NEG
40127: PUSH
40128: LD_INT 4
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 4
40138: NEG
40139: PUSH
40140: LD_INT 3
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: LIST
40152: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
40153: LD_ADDR_VAR 0 29
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: LD_INT 3
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: LD_INT 3
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: LD_INT 2
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: NEG
40195: PUSH
40196: LD_INT 4
40198: NEG
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 0
40206: PUSH
40207: LD_INT 4
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: LD_INT 3
40220: NEG
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PUSH
40230: LD_INT 5
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: LD_INT 5
40243: NEG
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: PUSH
40252: LD_INT 4
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: NEG
40263: PUSH
40264: LD_INT 6
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: LD_INT 6
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: LD_INT 5
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
40308: LD_ADDR_VAR 0 30
40312: PUSH
40313: LD_INT 2
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 3
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 3
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 3
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 4
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 4
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 4
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 5
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 5
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 5
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 6
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 6
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
40451: LD_ADDR_VAR 0 31
40455: PUSH
40456: LD_INT 3
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 3
40468: PUSH
40469: LD_INT 3
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 2
40478: PUSH
40479: LD_INT 3
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 4
40488: PUSH
40489: LD_INT 3
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 4
40498: PUSH
40499: LD_INT 4
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 3
40508: PUSH
40509: LD_INT 4
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 5
40518: PUSH
40519: LD_INT 4
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 5
40528: PUSH
40529: LD_INT 5
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 4
40538: PUSH
40539: LD_INT 5
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 6
40548: PUSH
40549: LD_INT 5
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 6
40558: PUSH
40559: LD_INT 6
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 5
40568: PUSH
40569: LD_INT 6
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
40590: LD_ADDR_VAR 0 32
40594: PUSH
40595: LD_INT 1
40597: PUSH
40598: LD_INT 3
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 0
40607: PUSH
40608: LD_INT 3
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 1
40617: NEG
40618: PUSH
40619: LD_INT 2
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: LD_INT 4
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 4
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: LD_INT 3
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: LD_INT 5
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: LD_INT 5
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: LD_INT 4
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: LD_INT 6
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: LD_INT 6
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: LD_INT 5
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
40733: LD_ADDR_VAR 0 33
40737: PUSH
40738: LD_INT 2
40740: NEG
40741: PUSH
40742: LD_INT 1
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 3
40751: NEG
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 3
40762: NEG
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 3
40774: NEG
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 4
40785: NEG
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 4
40796: NEG
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 4
40808: NEG
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 5
40819: NEG
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 5
40830: NEG
40831: PUSH
40832: LD_INT 1
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 5
40842: NEG
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 6
40853: NEG
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 6
40864: NEG
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40888: LD_ADDR_VAR 0 34
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: LD_INT 3
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 3
40907: NEG
40908: PUSH
40909: LD_INT 2
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 3
40919: NEG
40920: PUSH
40921: LD_INT 3
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 3
40931: NEG
40932: PUSH
40933: LD_INT 4
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 4
40943: NEG
40944: PUSH
40945: LD_INT 3
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 4
40955: NEG
40956: PUSH
40957: LD_INT 4
40959: NEG
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 4
40967: NEG
40968: PUSH
40969: LD_INT 5
40971: NEG
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 5
40979: NEG
40980: PUSH
40981: LD_INT 4
40983: NEG
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 5
40991: NEG
40992: PUSH
40993: LD_INT 5
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 5
41003: NEG
41004: PUSH
41005: LD_INT 6
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 6
41015: NEG
41016: PUSH
41017: LD_INT 5
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 6
41027: NEG
41028: PUSH
41029: LD_INT 6
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
41051: LD_ADDR_VAR 0 41
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: LD_INT 2
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: NEG
41070: PUSH
41071: LD_INT 3
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: LIST
41094: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
41095: LD_ADDR_VAR 0 42
41099: PUSH
41100: LD_INT 2
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 2
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 3
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: LIST
41135: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
41136: LD_ADDR_VAR 0 43
41140: PUSH
41141: LD_INT 2
41143: PUSH
41144: LD_INT 2
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 3
41153: PUSH
41154: LD_INT 2
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: PUSH
41164: LD_INT 3
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: LIST
41175: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
41176: LD_ADDR_VAR 0 44
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: LD_INT 3
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: LIST
41216: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41217: LD_ADDR_VAR 0 45
41221: PUSH
41222: LD_INT 2
41224: NEG
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 2
41235: NEG
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 3
41246: NEG
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: LIST
41260: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
41261: LD_ADDR_VAR 0 46
41265: PUSH
41266: LD_INT 2
41268: NEG
41269: PUSH
41270: LD_INT 2
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 2
41280: NEG
41281: PUSH
41282: LD_INT 3
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 3
41292: NEG
41293: PUSH
41294: LD_INT 2
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: LIST
41306: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
41307: LD_ADDR_VAR 0 47
41311: PUSH
41312: LD_INT 2
41314: NEG
41315: PUSH
41316: LD_INT 3
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: LD_INT 3
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41340: LD_ADDR_VAR 0 48
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: LD_INT 2
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
41371: LD_ADDR_VAR 0 49
41375: PUSH
41376: LD_INT 3
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 3
41388: PUSH
41389: LD_INT 2
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
41400: LD_ADDR_VAR 0 50
41404: PUSH
41405: LD_INT 2
41407: PUSH
41408: LD_INT 3
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: LD_INT 3
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41429: LD_ADDR_VAR 0 51
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 2
41447: NEG
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41460: LD_ADDR_VAR 0 52
41464: PUSH
41465: LD_INT 3
41467: NEG
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 3
41479: NEG
41480: PUSH
41481: LD_INT 2
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41493: LD_ADDR_VAR 0 53
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: LD_INT 3
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: LD_INT 3
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: LD_INT 2
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: LIST
41536: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41537: LD_ADDR_VAR 0 54
41541: PUSH
41542: LD_INT 2
41544: PUSH
41545: LD_INT 1
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 3
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 3
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: LIST
41577: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41578: LD_ADDR_VAR 0 55
41582: PUSH
41583: LD_INT 3
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 3
41595: PUSH
41596: LD_INT 3
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 2
41605: PUSH
41606: LD_INT 3
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: LIST
41617: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41618: LD_ADDR_VAR 0 56
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: LD_INT 3
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: LD_INT 3
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: LIST
41658: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41659: LD_ADDR_VAR 0 57
41663: PUSH
41664: LD_INT 2
41666: NEG
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 3
41677: NEG
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 3
41688: NEG
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41703: LD_ADDR_VAR 0 58
41707: PUSH
41708: LD_INT 2
41710: NEG
41711: PUSH
41712: LD_INT 3
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 3
41722: NEG
41723: PUSH
41724: LD_INT 2
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 3
41734: NEG
41735: PUSH
41736: LD_INT 3
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: LIST
41748: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
41749: LD_ADDR_VAR 0 59
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 0
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: LIST
41792: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41793: LD_ADDR_VAR 0 60
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 2
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: LIST
41833: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41834: LD_ADDR_VAR 0 61
41838: PUSH
41839: LD_INT 2
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 2
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: LIST
41873: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41874: LD_ADDR_VAR 0 62
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: LD_INT 2
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: LIST
41914: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41915: LD_ADDR_VAR 0 63
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: LIST
41958: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41959: LD_ADDR_VAR 0 64
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: LD_INT 2
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 2
41978: NEG
41979: PUSH
41980: LD_INT 1
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 2
41990: NEG
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: LIST
42004: ST_TO_ADDR
// end ; 2 :
42005: GO 45271
42007: LD_INT 2
42009: DOUBLE
42010: EQUAL
42011: IFTRUE 42015
42013: GO 45270
42015: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
42016: LD_ADDR_VAR 0 29
42020: PUSH
42021: LD_INT 4
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 4
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 5
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 5
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 4
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 3
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 3
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 3
42095: PUSH
42096: LD_INT 2
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 5
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 3
42116: PUSH
42117: LD_INT 3
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 3
42126: PUSH
42127: LD_INT 2
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 4
42136: PUSH
42137: LD_INT 3
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 4
42146: PUSH
42147: LD_INT 4
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 3
42156: PUSH
42157: LD_INT 4
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: LD_INT 3
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: LD_INT 2
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 4
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: LD_INT 4
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: LD_INT 4
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: LD_INT 3
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 1
42226: PUSH
42227: LD_INT 4
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: PUSH
42237: LD_INT 5
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: LD_INT 5
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: LD_INT 4
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: LD_INT 3
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: LD_INT 5
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 2
42288: NEG
42289: PUSH
42290: LD_INT 3
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 3
42299: NEG
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 3
42310: NEG
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 2
42322: NEG
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 2
42333: NEG
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 3
42344: NEG
42345: PUSH
42346: LD_INT 1
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 4
42355: NEG
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 4
42366: NEG
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 4
42378: NEG
42379: PUSH
42380: LD_INT 2
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: LD_INT 2
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 4
42401: NEG
42402: PUSH
42403: LD_INT 4
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 4
42413: NEG
42414: PUSH
42415: LD_INT 5
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 3
42425: NEG
42426: PUSH
42427: LD_INT 4
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 3
42437: NEG
42438: PUSH
42439: LD_INT 3
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 4
42449: NEG
42450: PUSH
42451: LD_INT 3
42453: NEG
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 5
42461: NEG
42462: PUSH
42463: LD_INT 4
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 5
42473: NEG
42474: PUSH
42475: LD_INT 5
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 3
42485: NEG
42486: PUSH
42487: LD_INT 5
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 5
42497: NEG
42498: PUSH
42499: LD_INT 3
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
42554: LD_ADDR_VAR 0 30
42558: PUSH
42559: LD_INT 4
42561: PUSH
42562: LD_INT 4
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 4
42571: PUSH
42572: LD_INT 3
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 5
42581: PUSH
42582: LD_INT 4
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 5
42591: PUSH
42592: LD_INT 5
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 4
42601: PUSH
42602: LD_INT 5
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 3
42611: PUSH
42612: LD_INT 4
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 3
42621: PUSH
42622: LD_INT 3
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 5
42631: PUSH
42632: LD_INT 3
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 3
42641: PUSH
42642: LD_INT 5
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: LD_INT 3
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: LD_INT 2
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 3
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: LD_INT 4
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: LD_INT 4
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: LD_INT 3
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: LD_INT 2
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: LD_INT 4
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 2
42733: NEG
42734: PUSH
42735: LD_INT 2
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 4
42744: NEG
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 4
42755: NEG
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 3
42767: NEG
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 3
42778: NEG
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 4
42789: NEG
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 5
42800: NEG
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 5
42811: NEG
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 5
42823: NEG
42824: PUSH
42825: LD_INT 2
42827: NEG
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 3
42835: NEG
42836: PUSH
42837: LD_INT 2
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 3
42846: NEG
42847: PUSH
42848: LD_INT 3
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 3
42858: NEG
42859: PUSH
42860: LD_INT 4
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 2
42870: NEG
42871: PUSH
42872: LD_INT 3
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 3
42894: NEG
42895: PUSH
42896: LD_INT 2
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 4
42906: NEG
42907: PUSH
42908: LD_INT 3
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 4
42918: NEG
42919: PUSH
42920: LD_INT 4
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 2
42930: NEG
42931: PUSH
42932: LD_INT 4
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 4
42942: NEG
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: LD_INT 4
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 5
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: LD_INT 4
42979: NEG
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: LD_INT 3
42990: NEG
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_INT 3
43001: NEG
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: LD_INT 4
43013: NEG
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: LD_INT 5
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: LD_INT 3
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 2
43044: NEG
43045: PUSH
43046: LD_INT 5
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
43101: LD_ADDR_VAR 0 31
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 4
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 3
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: LD_INT 4
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: LD_INT 5
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: LD_INT 5
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: LD_INT 4
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: LD_INT 3
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 2
43180: PUSH
43181: LD_INT 5
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 2
43190: NEG
43191: PUSH
43192: LD_INT 3
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 3
43201: NEG
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 3
43212: NEG
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 2
43224: NEG
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 2
43235: NEG
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 3
43246: NEG
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 4
43257: NEG
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 4
43268: NEG
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 4
43280: NEG
43281: PUSH
43282: LD_INT 2
43284: NEG
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 2
43292: NEG
43293: PUSH
43294: LD_INT 2
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 4
43303: NEG
43304: PUSH
43305: LD_INT 4
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 4
43315: NEG
43316: PUSH
43317: LD_INT 5
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 3
43327: NEG
43328: PUSH
43329: LD_INT 4
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 3
43339: NEG
43340: PUSH
43341: LD_INT 3
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 4
43351: NEG
43352: PUSH
43353: LD_INT 3
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 5
43363: NEG
43364: PUSH
43365: LD_INT 4
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 5
43375: NEG
43376: PUSH
43377: LD_INT 5
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 3
43387: NEG
43388: PUSH
43389: LD_INT 5
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 5
43399: NEG
43400: PUSH
43401: LD_INT 3
43403: NEG
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 3
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: LD_INT 4
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: LD_INT 3
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: LD_INT 2
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: LD_INT 2
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: LD_INT 3
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: LD_INT 4
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 2
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 2
43501: NEG
43502: PUSH
43503: LD_INT 4
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 4
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 4
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 5
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 5
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 4
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 3
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 3
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 3
43585: PUSH
43586: LD_INT 2
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 5
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
43651: LD_ADDR_VAR 0 32
43655: PUSH
43656: LD_INT 4
43658: NEG
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 4
43669: NEG
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 3
43681: NEG
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 3
43692: NEG
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 4
43703: NEG
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 5
43714: NEG
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 5
43725: NEG
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 5
43737: NEG
43738: PUSH
43739: LD_INT 2
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 3
43749: NEG
43750: PUSH
43751: LD_INT 2
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 3
43760: NEG
43761: PUSH
43762: LD_INT 3
43764: NEG
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 3
43772: NEG
43773: PUSH
43774: LD_INT 4
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: LD_INT 3
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: NEG
43797: PUSH
43798: LD_INT 2
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 3
43808: NEG
43809: PUSH
43810: LD_INT 2
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 4
43820: NEG
43821: PUSH
43822: LD_INT 3
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 4
43832: NEG
43833: PUSH
43834: LD_INT 4
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: LD_INT 4
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 4
43856: NEG
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: LD_INT 4
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: LD_INT 5
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: LD_INT 4
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: LD_INT 3
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: LD_INT 3
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: LD_INT 4
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: LD_INT 5
43939: NEG
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 2
43947: PUSH
43948: LD_INT 3
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: LD_INT 5
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 3
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 3
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 4
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 4
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 3
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 2
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 2
44042: PUSH
44043: LD_INT 2
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 4
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 4
44063: PUSH
44064: LD_INT 4
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 4
44073: PUSH
44074: LD_INT 3
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 5
44083: PUSH
44084: LD_INT 4
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 5
44093: PUSH
44094: LD_INT 5
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 4
44103: PUSH
44104: LD_INT 5
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 3
44113: PUSH
44114: LD_INT 4
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 3
44123: PUSH
44124: LD_INT 3
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 5
44133: PUSH
44134: LD_INT 3
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 3
44143: PUSH
44144: LD_INT 5
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
44198: LD_ADDR_VAR 0 33
44202: PUSH
44203: LD_INT 4
44205: NEG
44206: PUSH
44207: LD_INT 4
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 4
44217: NEG
44218: PUSH
44219: LD_INT 5
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 3
44229: NEG
44230: PUSH
44231: LD_INT 4
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 3
44241: NEG
44242: PUSH
44243: LD_INT 3
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 4
44253: NEG
44254: PUSH
44255: LD_INT 3
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 5
44265: NEG
44266: PUSH
44267: LD_INT 4
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 5
44277: NEG
44278: PUSH
44279: LD_INT 5
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 3
44289: NEG
44290: PUSH
44291: LD_INT 5
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 5
44301: NEG
44302: PUSH
44303: LD_INT 3
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: LD_INT 3
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 4
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: LD_INT 3
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: LD_INT 3
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: LD_INT 4
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: LD_INT 2
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 2
44403: NEG
44404: PUSH
44405: LD_INT 4
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 4
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 4
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 5
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 5
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 4
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 3
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 3
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 3
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 5
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 3
44508: PUSH
44509: LD_INT 3
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 3
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 4
44528: PUSH
44529: LD_INT 3
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 4
44538: PUSH
44539: LD_INT 4
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 3
44548: PUSH
44549: LD_INT 4
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 2
44558: PUSH
44559: LD_INT 3
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 2
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 4
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: LD_INT 4
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 4
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: LD_INT 3
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 4
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 5
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: LD_INT 5
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: LD_INT 4
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: LD_INT 3
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: LD_INT 5
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: LD_INT 3
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
44736: LD_ADDR_VAR 0 34
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: LD_INT 4
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: LD_INT 5
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: LD_INT 4
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: LD_INT 3
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 3
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: LD_INT 4
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: LD_INT 5
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: LD_INT 3
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 2
44833: NEG
44834: PUSH
44835: LD_INT 5
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 3
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 3
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 4
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 4
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 3
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: LD_INT 2
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 4
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 4
44938: PUSH
44939: LD_INT 4
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 4
44948: PUSH
44949: LD_INT 3
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 5
44958: PUSH
44959: LD_INT 4
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 5
44968: PUSH
44969: LD_INT 5
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 4
44978: PUSH
44979: LD_INT 5
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 3
44988: PUSH
44989: LD_INT 4
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 3
44998: PUSH
44999: LD_INT 3
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 5
45008: PUSH
45009: LD_INT 3
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 3
45018: PUSH
45019: LD_INT 5
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 3
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: LD_INT 3
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: LD_INT 4
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 4
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: LD_INT 3
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: LD_INT 2
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: LD_INT 4
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 2
45110: NEG
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 4
45121: NEG
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 4
45132: NEG
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 3
45144: NEG
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 3
45155: NEG
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 4
45166: NEG
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 5
45177: NEG
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 5
45188: NEG
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 5
45200: NEG
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 3
45212: NEG
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: ST_TO_ADDR
// end ; end ;
45268: GO 45271
45270: POP
// case btype of b_depot , b_warehouse :
45271: LD_VAR 0 1
45275: PUSH
45276: LD_INT 0
45278: DOUBLE
45279: EQUAL
45280: IFTRUE 45290
45282: LD_INT 1
45284: DOUBLE
45285: EQUAL
45286: IFTRUE 45290
45288: GO 45491
45290: POP
// case nation of nation_american :
45291: LD_VAR 0 5
45295: PUSH
45296: LD_INT 1
45298: DOUBLE
45299: EQUAL
45300: IFTRUE 45304
45302: GO 45360
45304: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
45305: LD_ADDR_VAR 0 9
45309: PUSH
45310: LD_VAR 0 11
45314: PUSH
45315: LD_VAR 0 12
45319: PUSH
45320: LD_VAR 0 13
45324: PUSH
45325: LD_VAR 0 14
45329: PUSH
45330: LD_VAR 0 15
45334: PUSH
45335: LD_VAR 0 16
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: PUSH
45348: LD_VAR 0 4
45352: PUSH
45353: LD_INT 1
45355: PLUS
45356: ARRAY
45357: ST_TO_ADDR
45358: GO 45489
45360: LD_INT 2
45362: DOUBLE
45363: EQUAL
45364: IFTRUE 45368
45366: GO 45424
45368: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
45369: LD_ADDR_VAR 0 9
45373: PUSH
45374: LD_VAR 0 17
45378: PUSH
45379: LD_VAR 0 18
45383: PUSH
45384: LD_VAR 0 19
45388: PUSH
45389: LD_VAR 0 20
45393: PUSH
45394: LD_VAR 0 21
45398: PUSH
45399: LD_VAR 0 22
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: PUSH
45412: LD_VAR 0 4
45416: PUSH
45417: LD_INT 1
45419: PLUS
45420: ARRAY
45421: ST_TO_ADDR
45422: GO 45489
45424: LD_INT 3
45426: DOUBLE
45427: EQUAL
45428: IFTRUE 45432
45430: GO 45488
45432: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
45433: LD_ADDR_VAR 0 9
45437: PUSH
45438: LD_VAR 0 23
45442: PUSH
45443: LD_VAR 0 24
45447: PUSH
45448: LD_VAR 0 25
45452: PUSH
45453: LD_VAR 0 26
45457: PUSH
45458: LD_VAR 0 27
45462: PUSH
45463: LD_VAR 0 28
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: PUSH
45476: LD_VAR 0 4
45480: PUSH
45481: LD_INT 1
45483: PLUS
45484: ARRAY
45485: ST_TO_ADDR
45486: GO 45489
45488: POP
45489: GO 46038
45491: LD_INT 2
45493: DOUBLE
45494: EQUAL
45495: IFTRUE 45505
45497: LD_INT 3
45499: DOUBLE
45500: EQUAL
45501: IFTRUE 45505
45503: GO 45561
45505: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
45506: LD_ADDR_VAR 0 9
45510: PUSH
45511: LD_VAR 0 29
45515: PUSH
45516: LD_VAR 0 30
45520: PUSH
45521: LD_VAR 0 31
45525: PUSH
45526: LD_VAR 0 32
45530: PUSH
45531: LD_VAR 0 33
45535: PUSH
45536: LD_VAR 0 34
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: PUSH
45549: LD_VAR 0 4
45553: PUSH
45554: LD_INT 1
45556: PLUS
45557: ARRAY
45558: ST_TO_ADDR
45559: GO 46038
45561: LD_INT 16
45563: DOUBLE
45564: EQUAL
45565: IFTRUE 45617
45567: LD_INT 17
45569: DOUBLE
45570: EQUAL
45571: IFTRUE 45617
45573: LD_INT 18
45575: DOUBLE
45576: EQUAL
45577: IFTRUE 45617
45579: LD_INT 19
45581: DOUBLE
45582: EQUAL
45583: IFTRUE 45617
45585: LD_INT 20
45587: DOUBLE
45588: EQUAL
45589: IFTRUE 45617
45591: LD_INT 21
45593: DOUBLE
45594: EQUAL
45595: IFTRUE 45617
45597: LD_INT 23
45599: DOUBLE
45600: EQUAL
45601: IFTRUE 45617
45603: LD_INT 24
45605: DOUBLE
45606: EQUAL
45607: IFTRUE 45617
45609: LD_INT 25
45611: DOUBLE
45612: EQUAL
45613: IFTRUE 45617
45615: GO 45673
45617: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
45618: LD_ADDR_VAR 0 9
45622: PUSH
45623: LD_VAR 0 35
45627: PUSH
45628: LD_VAR 0 36
45632: PUSH
45633: LD_VAR 0 37
45637: PUSH
45638: LD_VAR 0 38
45642: PUSH
45643: LD_VAR 0 39
45647: PUSH
45648: LD_VAR 0 40
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: PUSH
45661: LD_VAR 0 4
45665: PUSH
45666: LD_INT 1
45668: PLUS
45669: ARRAY
45670: ST_TO_ADDR
45671: GO 46038
45673: LD_INT 6
45675: DOUBLE
45676: EQUAL
45677: IFTRUE 45729
45679: LD_INT 7
45681: DOUBLE
45682: EQUAL
45683: IFTRUE 45729
45685: LD_INT 8
45687: DOUBLE
45688: EQUAL
45689: IFTRUE 45729
45691: LD_INT 13
45693: DOUBLE
45694: EQUAL
45695: IFTRUE 45729
45697: LD_INT 12
45699: DOUBLE
45700: EQUAL
45701: IFTRUE 45729
45703: LD_INT 15
45705: DOUBLE
45706: EQUAL
45707: IFTRUE 45729
45709: LD_INT 11
45711: DOUBLE
45712: EQUAL
45713: IFTRUE 45729
45715: LD_INT 14
45717: DOUBLE
45718: EQUAL
45719: IFTRUE 45729
45721: LD_INT 10
45723: DOUBLE
45724: EQUAL
45725: IFTRUE 45729
45727: GO 45785
45729: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
45730: LD_ADDR_VAR 0 9
45734: PUSH
45735: LD_VAR 0 41
45739: PUSH
45740: LD_VAR 0 42
45744: PUSH
45745: LD_VAR 0 43
45749: PUSH
45750: LD_VAR 0 44
45754: PUSH
45755: LD_VAR 0 45
45759: PUSH
45760: LD_VAR 0 46
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: PUSH
45773: LD_VAR 0 4
45777: PUSH
45778: LD_INT 1
45780: PLUS
45781: ARRAY
45782: ST_TO_ADDR
45783: GO 46038
45785: LD_INT 36
45787: DOUBLE
45788: EQUAL
45789: IFTRUE 45793
45791: GO 45849
45793: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
45794: LD_ADDR_VAR 0 9
45798: PUSH
45799: LD_VAR 0 47
45803: PUSH
45804: LD_VAR 0 48
45808: PUSH
45809: LD_VAR 0 49
45813: PUSH
45814: LD_VAR 0 50
45818: PUSH
45819: LD_VAR 0 51
45823: PUSH
45824: LD_VAR 0 52
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: PUSH
45837: LD_VAR 0 4
45841: PUSH
45842: LD_INT 1
45844: PLUS
45845: ARRAY
45846: ST_TO_ADDR
45847: GO 46038
45849: LD_INT 4
45851: DOUBLE
45852: EQUAL
45853: IFTRUE 45875
45855: LD_INT 5
45857: DOUBLE
45858: EQUAL
45859: IFTRUE 45875
45861: LD_INT 34
45863: DOUBLE
45864: EQUAL
45865: IFTRUE 45875
45867: LD_INT 37
45869: DOUBLE
45870: EQUAL
45871: IFTRUE 45875
45873: GO 45931
45875: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45876: LD_ADDR_VAR 0 9
45880: PUSH
45881: LD_VAR 0 53
45885: PUSH
45886: LD_VAR 0 54
45890: PUSH
45891: LD_VAR 0 55
45895: PUSH
45896: LD_VAR 0 56
45900: PUSH
45901: LD_VAR 0 57
45905: PUSH
45906: LD_VAR 0 58
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: PUSH
45919: LD_VAR 0 4
45923: PUSH
45924: LD_INT 1
45926: PLUS
45927: ARRAY
45928: ST_TO_ADDR
45929: GO 46038
45931: LD_INT 31
45933: DOUBLE
45934: EQUAL
45935: IFTRUE 45981
45937: LD_INT 32
45939: DOUBLE
45940: EQUAL
45941: IFTRUE 45981
45943: LD_INT 33
45945: DOUBLE
45946: EQUAL
45947: IFTRUE 45981
45949: LD_INT 27
45951: DOUBLE
45952: EQUAL
45953: IFTRUE 45981
45955: LD_INT 26
45957: DOUBLE
45958: EQUAL
45959: IFTRUE 45981
45961: LD_INT 28
45963: DOUBLE
45964: EQUAL
45965: IFTRUE 45981
45967: LD_INT 29
45969: DOUBLE
45970: EQUAL
45971: IFTRUE 45981
45973: LD_INT 30
45975: DOUBLE
45976: EQUAL
45977: IFTRUE 45981
45979: GO 46037
45981: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
45982: LD_ADDR_VAR 0 9
45986: PUSH
45987: LD_VAR 0 59
45991: PUSH
45992: LD_VAR 0 60
45996: PUSH
45997: LD_VAR 0 61
46001: PUSH
46002: LD_VAR 0 62
46006: PUSH
46007: LD_VAR 0 63
46011: PUSH
46012: LD_VAR 0 64
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: PUSH
46025: LD_VAR 0 4
46029: PUSH
46030: LD_INT 1
46032: PLUS
46033: ARRAY
46034: ST_TO_ADDR
46035: GO 46038
46037: POP
// temp_list2 = [ ] ;
46038: LD_ADDR_VAR 0 10
46042: PUSH
46043: EMPTY
46044: ST_TO_ADDR
// for i in temp_list do
46045: LD_ADDR_VAR 0 8
46049: PUSH
46050: LD_VAR 0 9
46054: PUSH
46055: FOR_IN
46056: IFFALSE 46108
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
46058: LD_ADDR_VAR 0 10
46062: PUSH
46063: LD_VAR 0 10
46067: PUSH
46068: LD_VAR 0 8
46072: PUSH
46073: LD_INT 1
46075: ARRAY
46076: PUSH
46077: LD_VAR 0 2
46081: PLUS
46082: PUSH
46083: LD_VAR 0 8
46087: PUSH
46088: LD_INT 2
46090: ARRAY
46091: PUSH
46092: LD_VAR 0 3
46096: PLUS
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: EMPTY
46103: LIST
46104: ADD
46105: ST_TO_ADDR
46106: GO 46055
46108: POP
46109: POP
// result = temp_list2 ;
46110: LD_ADDR_VAR 0 7
46114: PUSH
46115: LD_VAR 0 10
46119: ST_TO_ADDR
// end ;
46120: LD_VAR 0 7
46124: RET
// export function EnemyInRange ( unit , dist ) ; begin
46125: LD_INT 0
46127: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
46128: LD_ADDR_VAR 0 3
46132: PUSH
46133: LD_VAR 0 1
46137: PPUSH
46138: CALL_OW 255
46142: PPUSH
46143: LD_VAR 0 1
46147: PPUSH
46148: CALL_OW 250
46152: PPUSH
46153: LD_VAR 0 1
46157: PPUSH
46158: CALL_OW 251
46162: PPUSH
46163: LD_VAR 0 2
46167: PPUSH
46168: CALL 20618 0 4
46172: PUSH
46173: LD_INT 4
46175: ARRAY
46176: ST_TO_ADDR
// end ;
46177: LD_VAR 0 3
46181: RET
// export function PlayerSeeMe ( unit ) ; begin
46182: LD_INT 0
46184: PPUSH
// result := See ( your_side , unit ) ;
46185: LD_ADDR_VAR 0 2
46189: PUSH
46190: LD_OWVAR 2
46194: PPUSH
46195: LD_VAR 0 1
46199: PPUSH
46200: CALL_OW 292
46204: ST_TO_ADDR
// end ;
46205: LD_VAR 0 2
46209: RET
// export function ReverseDir ( unit ) ; begin
46210: LD_INT 0
46212: PPUSH
// if not unit then
46213: LD_VAR 0 1
46217: NOT
46218: IFFALSE 46222
// exit ;
46220: GO 46268
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
46222: LD_ADDR_VAR 0 2
46226: PUSH
46227: LD_INT 3
46229: PUSH
46230: LD_INT 4
46232: PUSH
46233: LD_INT 5
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: PUSH
46253: LD_VAR 0 1
46257: PPUSH
46258: CALL_OW 254
46262: PUSH
46263: LD_INT 1
46265: PLUS
46266: ARRAY
46267: ST_TO_ADDR
// end ;
46268: LD_VAR 0 2
46272: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
46273: LD_INT 0
46275: PPUSH
46276: PPUSH
46277: PPUSH
46278: PPUSH
46279: PPUSH
// if not hexes then
46280: LD_VAR 0 2
46284: NOT
46285: IFFALSE 46289
// exit ;
46287: GO 46437
// dist := 9999 ;
46289: LD_ADDR_VAR 0 5
46293: PUSH
46294: LD_INT 9999
46296: ST_TO_ADDR
// for i = 1 to hexes do
46297: LD_ADDR_VAR 0 4
46301: PUSH
46302: DOUBLE
46303: LD_INT 1
46305: DEC
46306: ST_TO_ADDR
46307: LD_VAR 0 2
46311: PUSH
46312: FOR_TO
46313: IFFALSE 46425
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
46315: LD_VAR 0 1
46319: PPUSH
46320: LD_VAR 0 2
46324: PUSH
46325: LD_VAR 0 4
46329: ARRAY
46330: PUSH
46331: LD_INT 1
46333: ARRAY
46334: PPUSH
46335: LD_VAR 0 2
46339: PUSH
46340: LD_VAR 0 4
46344: ARRAY
46345: PUSH
46346: LD_INT 2
46348: ARRAY
46349: PPUSH
46350: CALL_OW 297
46354: PUSH
46355: LD_VAR 0 5
46359: LESS
46360: IFFALSE 46423
// begin hex := hexes [ i ] ;
46362: LD_ADDR_VAR 0 7
46366: PUSH
46367: LD_VAR 0 2
46371: PUSH
46372: LD_VAR 0 4
46376: ARRAY
46377: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46378: LD_ADDR_VAR 0 5
46382: PUSH
46383: LD_VAR 0 1
46387: PPUSH
46388: LD_VAR 0 2
46392: PUSH
46393: LD_VAR 0 4
46397: ARRAY
46398: PUSH
46399: LD_INT 1
46401: ARRAY
46402: PPUSH
46403: LD_VAR 0 2
46407: PUSH
46408: LD_VAR 0 4
46412: ARRAY
46413: PUSH
46414: LD_INT 2
46416: ARRAY
46417: PPUSH
46418: CALL_OW 297
46422: ST_TO_ADDR
// end ; end ;
46423: GO 46312
46425: POP
46426: POP
// result := hex ;
46427: LD_ADDR_VAR 0 3
46431: PUSH
46432: LD_VAR 0 7
46436: ST_TO_ADDR
// end ;
46437: LD_VAR 0 3
46441: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
46442: LD_INT 0
46444: PPUSH
46445: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
46446: LD_VAR 0 1
46450: NOT
46451: PUSH
46452: LD_VAR 0 1
46456: PUSH
46457: LD_INT 21
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 23
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PPUSH
46481: CALL_OW 69
46485: IN
46486: NOT
46487: OR
46488: IFFALSE 46492
// exit ;
46490: GO 46539
// for i = 1 to 3 do
46492: LD_ADDR_VAR 0 3
46496: PUSH
46497: DOUBLE
46498: LD_INT 1
46500: DEC
46501: ST_TO_ADDR
46502: LD_INT 3
46504: PUSH
46505: FOR_TO
46506: IFFALSE 46537
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
46508: LD_VAR 0 1
46512: PPUSH
46513: CALL_OW 250
46517: PPUSH
46518: LD_VAR 0 1
46522: PPUSH
46523: CALL_OW 251
46527: PPUSH
46528: LD_INT 1
46530: PPUSH
46531: CALL_OW 453
46535: GO 46505
46537: POP
46538: POP
// end ;
46539: LD_VAR 0 2
46543: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
46544: LD_INT 0
46546: PPUSH
46547: PPUSH
46548: PPUSH
46549: PPUSH
46550: PPUSH
46551: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
46552: LD_VAR 0 1
46556: NOT
46557: PUSH
46558: LD_VAR 0 2
46562: NOT
46563: OR
46564: PUSH
46565: LD_VAR 0 1
46569: PPUSH
46570: CALL_OW 314
46574: OR
46575: IFFALSE 46579
// exit ;
46577: GO 47020
// x := GetX ( enemy_unit ) ;
46579: LD_ADDR_VAR 0 7
46583: PUSH
46584: LD_VAR 0 2
46588: PPUSH
46589: CALL_OW 250
46593: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
46594: LD_ADDR_VAR 0 8
46598: PUSH
46599: LD_VAR 0 2
46603: PPUSH
46604: CALL_OW 251
46608: ST_TO_ADDR
// if not x or not y then
46609: LD_VAR 0 7
46613: NOT
46614: PUSH
46615: LD_VAR 0 8
46619: NOT
46620: OR
46621: IFFALSE 46625
// exit ;
46623: GO 47020
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
46625: LD_ADDR_VAR 0 6
46629: PUSH
46630: LD_VAR 0 7
46634: PPUSH
46635: LD_INT 0
46637: PPUSH
46638: LD_INT 4
46640: PPUSH
46641: CALL_OW 272
46645: PUSH
46646: LD_VAR 0 8
46650: PPUSH
46651: LD_INT 0
46653: PPUSH
46654: LD_INT 4
46656: PPUSH
46657: CALL_OW 273
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_VAR 0 7
46670: PPUSH
46671: LD_INT 1
46673: PPUSH
46674: LD_INT 4
46676: PPUSH
46677: CALL_OW 272
46681: PUSH
46682: LD_VAR 0 8
46686: PPUSH
46687: LD_INT 1
46689: PPUSH
46690: LD_INT 4
46692: PPUSH
46693: CALL_OW 273
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_VAR 0 7
46706: PPUSH
46707: LD_INT 2
46709: PPUSH
46710: LD_INT 4
46712: PPUSH
46713: CALL_OW 272
46717: PUSH
46718: LD_VAR 0 8
46722: PPUSH
46723: LD_INT 2
46725: PPUSH
46726: LD_INT 4
46728: PPUSH
46729: CALL_OW 273
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_VAR 0 7
46742: PPUSH
46743: LD_INT 3
46745: PPUSH
46746: LD_INT 4
46748: PPUSH
46749: CALL_OW 272
46753: PUSH
46754: LD_VAR 0 8
46758: PPUSH
46759: LD_INT 3
46761: PPUSH
46762: LD_INT 4
46764: PPUSH
46765: CALL_OW 273
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_VAR 0 7
46778: PPUSH
46779: LD_INT 4
46781: PPUSH
46782: LD_INT 4
46784: PPUSH
46785: CALL_OW 272
46789: PUSH
46790: LD_VAR 0 8
46794: PPUSH
46795: LD_INT 4
46797: PPUSH
46798: LD_INT 4
46800: PPUSH
46801: CALL_OW 273
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_VAR 0 7
46814: PPUSH
46815: LD_INT 5
46817: PPUSH
46818: LD_INT 4
46820: PPUSH
46821: CALL_OW 272
46825: PUSH
46826: LD_VAR 0 8
46830: PPUSH
46831: LD_INT 5
46833: PPUSH
46834: LD_INT 4
46836: PPUSH
46837: CALL_OW 273
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: ST_TO_ADDR
// for i = tmp downto 1 do
46854: LD_ADDR_VAR 0 4
46858: PUSH
46859: DOUBLE
46860: LD_VAR 0 6
46864: INC
46865: ST_TO_ADDR
46866: LD_INT 1
46868: PUSH
46869: FOR_DOWNTO
46870: IFFALSE 46971
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
46872: LD_VAR 0 6
46876: PUSH
46877: LD_VAR 0 4
46881: ARRAY
46882: PUSH
46883: LD_INT 1
46885: ARRAY
46886: PPUSH
46887: LD_VAR 0 6
46891: PUSH
46892: LD_VAR 0 4
46896: ARRAY
46897: PUSH
46898: LD_INT 2
46900: ARRAY
46901: PPUSH
46902: CALL_OW 488
46906: NOT
46907: PUSH
46908: LD_VAR 0 6
46912: PUSH
46913: LD_VAR 0 4
46917: ARRAY
46918: PUSH
46919: LD_INT 1
46921: ARRAY
46922: PPUSH
46923: LD_VAR 0 6
46927: PUSH
46928: LD_VAR 0 4
46932: ARRAY
46933: PUSH
46934: LD_INT 2
46936: ARRAY
46937: PPUSH
46938: CALL_OW 428
46942: PUSH
46943: LD_INT 0
46945: NONEQUAL
46946: OR
46947: IFFALSE 46969
// tmp := Delete ( tmp , i ) ;
46949: LD_ADDR_VAR 0 6
46953: PUSH
46954: LD_VAR 0 6
46958: PPUSH
46959: LD_VAR 0 4
46963: PPUSH
46964: CALL_OW 3
46968: ST_TO_ADDR
46969: GO 46869
46971: POP
46972: POP
// j := GetClosestHex ( unit , tmp ) ;
46973: LD_ADDR_VAR 0 5
46977: PUSH
46978: LD_VAR 0 1
46982: PPUSH
46983: LD_VAR 0 6
46987: PPUSH
46988: CALL 46273 0 2
46992: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46993: LD_VAR 0 1
46997: PPUSH
46998: LD_VAR 0 5
47002: PUSH
47003: LD_INT 1
47005: ARRAY
47006: PPUSH
47007: LD_VAR 0 5
47011: PUSH
47012: LD_INT 2
47014: ARRAY
47015: PPUSH
47016: CALL_OW 111
// end ;
47020: LD_VAR 0 3
47024: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
47025: LD_INT 0
47027: PPUSH
47028: PPUSH
47029: PPUSH
// uc_side = 0 ;
47030: LD_ADDR_OWVAR 20
47034: PUSH
47035: LD_INT 0
47037: ST_TO_ADDR
// uc_nation = 0 ;
47038: LD_ADDR_OWVAR 21
47042: PUSH
47043: LD_INT 0
47045: ST_TO_ADDR
// InitHc ;
47046: CALL_OW 19
// InitVc ;
47050: CALL_OW 20
// if mastodonts then
47054: LD_VAR 0 6
47058: IFFALSE 47125
// for i = 1 to mastodonts do
47060: LD_ADDR_VAR 0 11
47064: PUSH
47065: DOUBLE
47066: LD_INT 1
47068: DEC
47069: ST_TO_ADDR
47070: LD_VAR 0 6
47074: PUSH
47075: FOR_TO
47076: IFFALSE 47123
// begin vc_chassis := 31 ;
47078: LD_ADDR_OWVAR 37
47082: PUSH
47083: LD_INT 31
47085: ST_TO_ADDR
// vc_control := control_rider ;
47086: LD_ADDR_OWVAR 38
47090: PUSH
47091: LD_INT 4
47093: ST_TO_ADDR
// animal := CreateVehicle ;
47094: LD_ADDR_VAR 0 12
47098: PUSH
47099: CALL_OW 45
47103: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47104: LD_VAR 0 12
47108: PPUSH
47109: LD_VAR 0 8
47113: PPUSH
47114: LD_INT 0
47116: PPUSH
47117: CALL_OW 49
// end ;
47121: GO 47075
47123: POP
47124: POP
// if horses then
47125: LD_VAR 0 5
47129: IFFALSE 47196
// for i = 1 to horses do
47131: LD_ADDR_VAR 0 11
47135: PUSH
47136: DOUBLE
47137: LD_INT 1
47139: DEC
47140: ST_TO_ADDR
47141: LD_VAR 0 5
47145: PUSH
47146: FOR_TO
47147: IFFALSE 47194
// begin hc_class := 21 ;
47149: LD_ADDR_OWVAR 28
47153: PUSH
47154: LD_INT 21
47156: ST_TO_ADDR
// hc_gallery :=  ;
47157: LD_ADDR_OWVAR 33
47161: PUSH
47162: LD_STRING 
47164: ST_TO_ADDR
// animal := CreateHuman ;
47165: LD_ADDR_VAR 0 12
47169: PUSH
47170: CALL_OW 44
47174: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47175: LD_VAR 0 12
47179: PPUSH
47180: LD_VAR 0 8
47184: PPUSH
47185: LD_INT 0
47187: PPUSH
47188: CALL_OW 49
// end ;
47192: GO 47146
47194: POP
47195: POP
// if birds then
47196: LD_VAR 0 1
47200: IFFALSE 47267
// for i = 1 to birds do
47202: LD_ADDR_VAR 0 11
47206: PUSH
47207: DOUBLE
47208: LD_INT 1
47210: DEC
47211: ST_TO_ADDR
47212: LD_VAR 0 1
47216: PUSH
47217: FOR_TO
47218: IFFALSE 47265
// begin hc_class = 18 ;
47220: LD_ADDR_OWVAR 28
47224: PUSH
47225: LD_INT 18
47227: ST_TO_ADDR
// hc_gallery =  ;
47228: LD_ADDR_OWVAR 33
47232: PUSH
47233: LD_STRING 
47235: ST_TO_ADDR
// animal := CreateHuman ;
47236: LD_ADDR_VAR 0 12
47240: PUSH
47241: CALL_OW 44
47245: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47246: LD_VAR 0 12
47250: PPUSH
47251: LD_VAR 0 8
47255: PPUSH
47256: LD_INT 0
47258: PPUSH
47259: CALL_OW 49
// end ;
47263: GO 47217
47265: POP
47266: POP
// if tigers then
47267: LD_VAR 0 2
47271: IFFALSE 47355
// for i = 1 to tigers do
47273: LD_ADDR_VAR 0 11
47277: PUSH
47278: DOUBLE
47279: LD_INT 1
47281: DEC
47282: ST_TO_ADDR
47283: LD_VAR 0 2
47287: PUSH
47288: FOR_TO
47289: IFFALSE 47353
// begin hc_class = class_tiger ;
47291: LD_ADDR_OWVAR 28
47295: PUSH
47296: LD_INT 14
47298: ST_TO_ADDR
// hc_gallery =  ;
47299: LD_ADDR_OWVAR 33
47303: PUSH
47304: LD_STRING 
47306: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
47307: LD_ADDR_OWVAR 35
47311: PUSH
47312: LD_INT 7
47314: NEG
47315: PPUSH
47316: LD_INT 7
47318: PPUSH
47319: CALL_OW 12
47323: ST_TO_ADDR
// animal := CreateHuman ;
47324: LD_ADDR_VAR 0 12
47328: PUSH
47329: CALL_OW 44
47333: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47334: LD_VAR 0 12
47338: PPUSH
47339: LD_VAR 0 8
47343: PPUSH
47344: LD_INT 0
47346: PPUSH
47347: CALL_OW 49
// end ;
47351: GO 47288
47353: POP
47354: POP
// if apemans then
47355: LD_VAR 0 3
47359: IFFALSE 47482
// for i = 1 to apemans do
47361: LD_ADDR_VAR 0 11
47365: PUSH
47366: DOUBLE
47367: LD_INT 1
47369: DEC
47370: ST_TO_ADDR
47371: LD_VAR 0 3
47375: PUSH
47376: FOR_TO
47377: IFFALSE 47480
// begin hc_class = class_apeman ;
47379: LD_ADDR_OWVAR 28
47383: PUSH
47384: LD_INT 12
47386: ST_TO_ADDR
// hc_gallery =  ;
47387: LD_ADDR_OWVAR 33
47391: PUSH
47392: LD_STRING 
47394: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
47395: LD_ADDR_OWVAR 35
47399: PUSH
47400: LD_INT 5
47402: NEG
47403: PPUSH
47404: LD_INT 5
47406: PPUSH
47407: CALL_OW 12
47411: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
47412: LD_ADDR_OWVAR 31
47416: PUSH
47417: LD_INT 1
47419: PPUSH
47420: LD_INT 3
47422: PPUSH
47423: CALL_OW 12
47427: PUSH
47428: LD_INT 1
47430: PPUSH
47431: LD_INT 3
47433: PPUSH
47434: CALL_OW 12
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: ST_TO_ADDR
// animal := CreateHuman ;
47451: LD_ADDR_VAR 0 12
47455: PUSH
47456: CALL_OW 44
47460: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47461: LD_VAR 0 12
47465: PPUSH
47466: LD_VAR 0 8
47470: PPUSH
47471: LD_INT 0
47473: PPUSH
47474: CALL_OW 49
// end ;
47478: GO 47376
47480: POP
47481: POP
// if enchidnas then
47482: LD_VAR 0 4
47486: IFFALSE 47553
// for i = 1 to enchidnas do
47488: LD_ADDR_VAR 0 11
47492: PUSH
47493: DOUBLE
47494: LD_INT 1
47496: DEC
47497: ST_TO_ADDR
47498: LD_VAR 0 4
47502: PUSH
47503: FOR_TO
47504: IFFALSE 47551
// begin hc_class = 13 ;
47506: LD_ADDR_OWVAR 28
47510: PUSH
47511: LD_INT 13
47513: ST_TO_ADDR
// hc_gallery =  ;
47514: LD_ADDR_OWVAR 33
47518: PUSH
47519: LD_STRING 
47521: ST_TO_ADDR
// animal := CreateHuman ;
47522: LD_ADDR_VAR 0 12
47526: PUSH
47527: CALL_OW 44
47531: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47532: LD_VAR 0 12
47536: PPUSH
47537: LD_VAR 0 8
47541: PPUSH
47542: LD_INT 0
47544: PPUSH
47545: CALL_OW 49
// end ;
47549: GO 47503
47551: POP
47552: POP
// if not wat_area then
47553: LD_VAR 0 9
47557: NOT
47558: IFFALSE 47562
// exit ;
47560: GO 47633
// if fishes then
47562: LD_VAR 0 7
47566: IFFALSE 47633
// for i = 1 to fishes do
47568: LD_ADDR_VAR 0 11
47572: PUSH
47573: DOUBLE
47574: LD_INT 1
47576: DEC
47577: ST_TO_ADDR
47578: LD_VAR 0 7
47582: PUSH
47583: FOR_TO
47584: IFFALSE 47631
// begin hc_class = 20 ;
47586: LD_ADDR_OWVAR 28
47590: PUSH
47591: LD_INT 20
47593: ST_TO_ADDR
// hc_gallery =  ;
47594: LD_ADDR_OWVAR 33
47598: PUSH
47599: LD_STRING 
47601: ST_TO_ADDR
// animal := CreateHuman ;
47602: LD_ADDR_VAR 0 12
47606: PUSH
47607: CALL_OW 44
47611: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
47612: LD_VAR 0 12
47616: PPUSH
47617: LD_VAR 0 9
47621: PPUSH
47622: LD_INT 0
47624: PPUSH
47625: CALL_OW 49
// end ;
47629: GO 47583
47631: POP
47632: POP
// end ;
47633: LD_VAR 0 10
47637: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
47638: LD_INT 0
47640: PPUSH
47641: PPUSH
47642: PPUSH
47643: PPUSH
47644: PPUSH
47645: PPUSH
47646: PPUSH
47647: PPUSH
47648: PPUSH
47649: PPUSH
47650: PPUSH
47651: PPUSH
47652: PPUSH
47653: PPUSH
47654: PPUSH
47655: PPUSH
47656: PPUSH
47657: PPUSH
47658: PPUSH
47659: PPUSH
47660: PPUSH
47661: PPUSH
47662: PPUSH
47663: PPUSH
47664: PPUSH
47665: PPUSH
47666: PPUSH
47667: PPUSH
// if not list then
47668: LD_VAR 0 1
47672: NOT
47673: IFFALSE 47677
// exit ;
47675: GO 50974
// base := list [ 1 ] ;
47677: LD_ADDR_VAR 0 3
47681: PUSH
47682: LD_VAR 0 1
47686: PUSH
47687: LD_INT 1
47689: ARRAY
47690: ST_TO_ADDR
// group := list [ 2 ] ;
47691: LD_ADDR_VAR 0 4
47695: PUSH
47696: LD_VAR 0 1
47700: PUSH
47701: LD_INT 2
47703: ARRAY
47704: ST_TO_ADDR
// path := list [ 3 ] ;
47705: LD_ADDR_VAR 0 5
47709: PUSH
47710: LD_VAR 0 1
47714: PUSH
47715: LD_INT 3
47717: ARRAY
47718: ST_TO_ADDR
// flags := list [ 4 ] ;
47719: LD_ADDR_VAR 0 6
47723: PUSH
47724: LD_VAR 0 1
47728: PUSH
47729: LD_INT 4
47731: ARRAY
47732: ST_TO_ADDR
// mined := [ ] ;
47733: LD_ADDR_VAR 0 27
47737: PUSH
47738: EMPTY
47739: ST_TO_ADDR
// bombed := [ ] ;
47740: LD_ADDR_VAR 0 28
47744: PUSH
47745: EMPTY
47746: ST_TO_ADDR
// if not group or not path then
47747: LD_VAR 0 4
47751: NOT
47752: PUSH
47753: LD_VAR 0 5
47757: NOT
47758: OR
47759: IFFALSE 47763
// exit ;
47761: GO 50974
// if flags then
47763: LD_VAR 0 6
47767: IFFALSE 47911
// begin f_ignore_area := flags [ 1 ] ;
47769: LD_ADDR_VAR 0 17
47773: PUSH
47774: LD_VAR 0 6
47778: PUSH
47779: LD_INT 1
47781: ARRAY
47782: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
47783: LD_ADDR_VAR 0 18
47787: PUSH
47788: LD_VAR 0 6
47792: PUSH
47793: LD_INT 2
47795: ARRAY
47796: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
47797: LD_ADDR_VAR 0 19
47801: PUSH
47802: LD_VAR 0 6
47806: PUSH
47807: LD_INT 3
47809: ARRAY
47810: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
47811: LD_ADDR_VAR 0 20
47815: PUSH
47816: LD_VAR 0 6
47820: PUSH
47821: LD_INT 4
47823: ARRAY
47824: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
47825: LD_ADDR_VAR 0 21
47829: PUSH
47830: LD_VAR 0 6
47834: PUSH
47835: LD_INT 5
47837: ARRAY
47838: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
47839: LD_ADDR_VAR 0 22
47843: PUSH
47844: LD_VAR 0 6
47848: PUSH
47849: LD_INT 6
47851: ARRAY
47852: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
47853: LD_ADDR_VAR 0 23
47857: PUSH
47858: LD_VAR 0 6
47862: PUSH
47863: LD_INT 7
47865: ARRAY
47866: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
47867: LD_ADDR_VAR 0 24
47871: PUSH
47872: LD_VAR 0 6
47876: PUSH
47877: LD_INT 8
47879: ARRAY
47880: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
47881: LD_ADDR_VAR 0 25
47885: PUSH
47886: LD_VAR 0 6
47890: PUSH
47891: LD_INT 9
47893: ARRAY
47894: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
47895: LD_ADDR_VAR 0 26
47899: PUSH
47900: LD_VAR 0 6
47904: PUSH
47905: LD_INT 10
47907: ARRAY
47908: ST_TO_ADDR
// end else
47909: GO 47991
// begin f_ignore_area := false ;
47911: LD_ADDR_VAR 0 17
47915: PUSH
47916: LD_INT 0
47918: ST_TO_ADDR
// f_capture := false ;
47919: LD_ADDR_VAR 0 18
47923: PUSH
47924: LD_INT 0
47926: ST_TO_ADDR
// f_ignore_civ := false ;
47927: LD_ADDR_VAR 0 19
47931: PUSH
47932: LD_INT 0
47934: ST_TO_ADDR
// f_murder := false ;
47935: LD_ADDR_VAR 0 20
47939: PUSH
47940: LD_INT 0
47942: ST_TO_ADDR
// f_mines := false ;
47943: LD_ADDR_VAR 0 21
47947: PUSH
47948: LD_INT 0
47950: ST_TO_ADDR
// f_repair := false ;
47951: LD_ADDR_VAR 0 22
47955: PUSH
47956: LD_INT 0
47958: ST_TO_ADDR
// f_heal := false ;
47959: LD_ADDR_VAR 0 23
47963: PUSH
47964: LD_INT 0
47966: ST_TO_ADDR
// f_spacetime := false ;
47967: LD_ADDR_VAR 0 24
47971: PUSH
47972: LD_INT 0
47974: ST_TO_ADDR
// f_attack_depot := false ;
47975: LD_ADDR_VAR 0 25
47979: PUSH
47980: LD_INT 0
47982: ST_TO_ADDR
// f_crawl := false ;
47983: LD_ADDR_VAR 0 26
47987: PUSH
47988: LD_INT 0
47990: ST_TO_ADDR
// end ; units_path := [ ] ;
47991: LD_ADDR_VAR 0 16
47995: PUSH
47996: EMPTY
47997: ST_TO_ADDR
// for i = 1 to group do
47998: LD_ADDR_VAR 0 7
48002: PUSH
48003: DOUBLE
48004: LD_INT 1
48006: DEC
48007: ST_TO_ADDR
48008: LD_VAR 0 4
48012: PUSH
48013: FOR_TO
48014: IFFALSE 48043
// begin units_path := Replace ( units_path , i , path ) ;
48016: LD_ADDR_VAR 0 16
48020: PUSH
48021: LD_VAR 0 16
48025: PPUSH
48026: LD_VAR 0 7
48030: PPUSH
48031: LD_VAR 0 5
48035: PPUSH
48036: CALL_OW 1
48040: ST_TO_ADDR
// end ;
48041: GO 48013
48043: POP
48044: POP
// repeat for i = group downto 1 do
48045: LD_ADDR_VAR 0 7
48049: PUSH
48050: DOUBLE
48051: LD_VAR 0 4
48055: INC
48056: ST_TO_ADDR
48057: LD_INT 1
48059: PUSH
48060: FOR_DOWNTO
48061: IFFALSE 50956
// begin wait ( 0 0$1 ) ;
48063: LD_INT 35
48065: PPUSH
48066: CALL_OW 67
// tmp := [ ] ;
48070: LD_ADDR_VAR 0 14
48074: PUSH
48075: EMPTY
48076: ST_TO_ADDR
// attacking := false ;
48077: LD_ADDR_VAR 0 29
48081: PUSH
48082: LD_INT 0
48084: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
48085: LD_VAR 0 4
48089: PUSH
48090: LD_VAR 0 7
48094: ARRAY
48095: PPUSH
48096: CALL_OW 301
48100: PUSH
48101: LD_VAR 0 4
48105: PUSH
48106: LD_VAR 0 7
48110: ARRAY
48111: NOT
48112: OR
48113: IFFALSE 48157
// begin group := Delete ( group , i ) ;
48115: LD_ADDR_VAR 0 4
48119: PUSH
48120: LD_VAR 0 4
48124: PPUSH
48125: LD_VAR 0 7
48129: PPUSH
48130: CALL_OW 3
48134: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
48135: LD_ADDR_VAR 0 16
48139: PUSH
48140: LD_VAR 0 16
48144: PPUSH
48145: LD_VAR 0 7
48149: PPUSH
48150: CALL_OW 3
48154: ST_TO_ADDR
// continue ;
48155: GO 48060
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
48157: LD_VAR 0 4
48161: PUSH
48162: LD_VAR 0 7
48166: ARRAY
48167: PPUSH
48168: LD_INT 10
48170: PPUSH
48171: CALL 46125 0 2
48175: NOT
48176: PUSH
48177: LD_VAR 0 16
48181: PUSH
48182: LD_VAR 0 7
48186: ARRAY
48187: PUSH
48188: EMPTY
48189: EQUAL
48190: NOT
48191: AND
48192: IFFALSE 48458
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
48194: LD_VAR 0 4
48198: PUSH
48199: LD_VAR 0 7
48203: ARRAY
48204: PPUSH
48205: CALL_OW 262
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: IN
48220: IFFALSE 48261
// if GetFuel ( group [ i ] ) < 10 then
48222: LD_VAR 0 4
48226: PUSH
48227: LD_VAR 0 7
48231: ARRAY
48232: PPUSH
48233: CALL_OW 261
48237: PUSH
48238: LD_INT 10
48240: LESS
48241: IFFALSE 48261
// SetFuel ( group [ i ] , 12 ) ;
48243: LD_VAR 0 4
48247: PUSH
48248: LD_VAR 0 7
48252: ARRAY
48253: PPUSH
48254: LD_INT 12
48256: PPUSH
48257: CALL_OW 240
// if units_path [ i ] then
48261: LD_VAR 0 16
48265: PUSH
48266: LD_VAR 0 7
48270: ARRAY
48271: IFFALSE 48456
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
48273: LD_VAR 0 4
48277: PUSH
48278: LD_VAR 0 7
48282: ARRAY
48283: PPUSH
48284: LD_VAR 0 16
48288: PUSH
48289: LD_VAR 0 7
48293: ARRAY
48294: PUSH
48295: LD_INT 1
48297: ARRAY
48298: PUSH
48299: LD_INT 1
48301: ARRAY
48302: PPUSH
48303: LD_VAR 0 16
48307: PUSH
48308: LD_VAR 0 7
48312: ARRAY
48313: PUSH
48314: LD_INT 1
48316: ARRAY
48317: PUSH
48318: LD_INT 2
48320: ARRAY
48321: PPUSH
48322: CALL_OW 297
48326: PUSH
48327: LD_INT 6
48329: GREATER
48330: IFFALSE 48405
// begin if not HasTask ( group [ i ] ) then
48332: LD_VAR 0 4
48336: PUSH
48337: LD_VAR 0 7
48341: ARRAY
48342: PPUSH
48343: CALL_OW 314
48347: NOT
48348: IFFALSE 48403
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
48350: LD_VAR 0 4
48354: PUSH
48355: LD_VAR 0 7
48359: ARRAY
48360: PPUSH
48361: LD_VAR 0 16
48365: PUSH
48366: LD_VAR 0 7
48370: ARRAY
48371: PUSH
48372: LD_INT 1
48374: ARRAY
48375: PUSH
48376: LD_INT 1
48378: ARRAY
48379: PPUSH
48380: LD_VAR 0 16
48384: PUSH
48385: LD_VAR 0 7
48389: ARRAY
48390: PUSH
48391: LD_INT 1
48393: ARRAY
48394: PUSH
48395: LD_INT 2
48397: ARRAY
48398: PPUSH
48399: CALL_OW 114
// end else
48403: GO 48456
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
48405: LD_ADDR_VAR 0 15
48409: PUSH
48410: LD_VAR 0 16
48414: PUSH
48415: LD_VAR 0 7
48419: ARRAY
48420: PPUSH
48421: LD_INT 1
48423: PPUSH
48424: CALL_OW 3
48428: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
48429: LD_ADDR_VAR 0 16
48433: PUSH
48434: LD_VAR 0 16
48438: PPUSH
48439: LD_VAR 0 7
48443: PPUSH
48444: LD_VAR 0 15
48448: PPUSH
48449: CALL_OW 1
48453: ST_TO_ADDR
// continue ;
48454: GO 48060
// end ; end ; end else
48456: GO 50954
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
48458: LD_ADDR_VAR 0 14
48462: PUSH
48463: LD_INT 81
48465: PUSH
48466: LD_VAR 0 4
48470: PUSH
48471: LD_VAR 0 7
48475: ARRAY
48476: PPUSH
48477: CALL_OW 255
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PPUSH
48486: CALL_OW 69
48490: ST_TO_ADDR
// if not tmp then
48491: LD_VAR 0 14
48495: NOT
48496: IFFALSE 48500
// continue ;
48498: GO 48060
// if f_ignore_area then
48500: LD_VAR 0 17
48504: IFFALSE 48592
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
48506: LD_ADDR_VAR 0 15
48510: PUSH
48511: LD_VAR 0 14
48515: PPUSH
48516: LD_INT 3
48518: PUSH
48519: LD_INT 92
48521: PUSH
48522: LD_VAR 0 17
48526: PUSH
48527: LD_INT 1
48529: ARRAY
48530: PUSH
48531: LD_VAR 0 17
48535: PUSH
48536: LD_INT 2
48538: ARRAY
48539: PUSH
48540: LD_VAR 0 17
48544: PUSH
48545: LD_INT 3
48547: ARRAY
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PPUSH
48559: CALL_OW 72
48563: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48564: LD_VAR 0 14
48568: PUSH
48569: LD_VAR 0 15
48573: DIFF
48574: IFFALSE 48592
// tmp := tmp diff tmp2 ;
48576: LD_ADDR_VAR 0 14
48580: PUSH
48581: LD_VAR 0 14
48585: PUSH
48586: LD_VAR 0 15
48590: DIFF
48591: ST_TO_ADDR
// end ; if not f_murder then
48592: LD_VAR 0 20
48596: NOT
48597: IFFALSE 48655
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
48599: LD_ADDR_VAR 0 15
48603: PUSH
48604: LD_VAR 0 14
48608: PPUSH
48609: LD_INT 3
48611: PUSH
48612: LD_INT 50
48614: PUSH
48615: EMPTY
48616: LIST
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PPUSH
48622: CALL_OW 72
48626: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48627: LD_VAR 0 14
48631: PUSH
48632: LD_VAR 0 15
48636: DIFF
48637: IFFALSE 48655
// tmp := tmp diff tmp2 ;
48639: LD_ADDR_VAR 0 14
48643: PUSH
48644: LD_VAR 0 14
48648: PUSH
48649: LD_VAR 0 15
48653: DIFF
48654: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
48655: LD_ADDR_VAR 0 14
48659: PUSH
48660: LD_VAR 0 4
48664: PUSH
48665: LD_VAR 0 7
48669: ARRAY
48670: PPUSH
48671: LD_VAR 0 14
48675: PPUSH
48676: LD_INT 1
48678: PPUSH
48679: LD_INT 1
48681: PPUSH
48682: CALL 20157 0 4
48686: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
48687: LD_VAR 0 4
48691: PUSH
48692: LD_VAR 0 7
48696: ARRAY
48697: PPUSH
48698: CALL_OW 257
48702: PUSH
48703: LD_INT 1
48705: EQUAL
48706: IFFALSE 49154
// begin if WantPlant ( group [ i ] ) then
48708: LD_VAR 0 4
48712: PUSH
48713: LD_VAR 0 7
48717: ARRAY
48718: PPUSH
48719: CALL 19625 0 1
48723: IFFALSE 48727
// continue ;
48725: GO 48060
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
48727: LD_VAR 0 18
48731: PUSH
48732: LD_VAR 0 4
48736: PUSH
48737: LD_VAR 0 7
48741: ARRAY
48742: PPUSH
48743: CALL_OW 310
48747: NOT
48748: AND
48749: PUSH
48750: LD_VAR 0 14
48754: PUSH
48755: LD_INT 1
48757: ARRAY
48758: PUSH
48759: LD_VAR 0 14
48763: PPUSH
48764: LD_INT 21
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 58
48776: PUSH
48777: EMPTY
48778: LIST
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PPUSH
48784: CALL_OW 72
48788: IN
48789: AND
48790: IFFALSE 48826
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
48792: LD_VAR 0 4
48796: PUSH
48797: LD_VAR 0 7
48801: ARRAY
48802: PPUSH
48803: LD_VAR 0 14
48807: PUSH
48808: LD_INT 1
48810: ARRAY
48811: PPUSH
48812: CALL_OW 120
// attacking := true ;
48816: LD_ADDR_VAR 0 29
48820: PUSH
48821: LD_INT 1
48823: ST_TO_ADDR
// continue ;
48824: GO 48060
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
48826: LD_VAR 0 26
48830: PUSH
48831: LD_VAR 0 4
48835: PUSH
48836: LD_VAR 0 7
48840: ARRAY
48841: PPUSH
48842: CALL_OW 257
48846: PUSH
48847: LD_INT 1
48849: EQUAL
48850: AND
48851: PUSH
48852: LD_VAR 0 4
48856: PUSH
48857: LD_VAR 0 7
48861: ARRAY
48862: PPUSH
48863: CALL_OW 256
48867: PUSH
48868: LD_INT 800
48870: LESS
48871: AND
48872: PUSH
48873: LD_VAR 0 4
48877: PUSH
48878: LD_VAR 0 7
48882: ARRAY
48883: PPUSH
48884: CALL_OW 318
48888: NOT
48889: AND
48890: IFFALSE 48907
// ComCrawl ( group [ i ] ) ;
48892: LD_VAR 0 4
48896: PUSH
48897: LD_VAR 0 7
48901: ARRAY
48902: PPUSH
48903: CALL_OW 137
// if f_mines then
48907: LD_VAR 0 21
48911: IFFALSE 49154
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
48913: LD_VAR 0 14
48917: PUSH
48918: LD_INT 1
48920: ARRAY
48921: PPUSH
48922: CALL_OW 247
48926: PUSH
48927: LD_INT 3
48929: EQUAL
48930: PUSH
48931: LD_VAR 0 14
48935: PUSH
48936: LD_INT 1
48938: ARRAY
48939: PUSH
48940: LD_VAR 0 27
48944: IN
48945: NOT
48946: AND
48947: IFFALSE 49154
// begin x := GetX ( tmp [ 1 ] ) ;
48949: LD_ADDR_VAR 0 10
48953: PUSH
48954: LD_VAR 0 14
48958: PUSH
48959: LD_INT 1
48961: ARRAY
48962: PPUSH
48963: CALL_OW 250
48967: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
48968: LD_ADDR_VAR 0 11
48972: PUSH
48973: LD_VAR 0 14
48977: PUSH
48978: LD_INT 1
48980: ARRAY
48981: PPUSH
48982: CALL_OW 251
48986: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
48987: LD_ADDR_VAR 0 12
48991: PUSH
48992: LD_VAR 0 4
48996: PUSH
48997: LD_VAR 0 7
49001: ARRAY
49002: PPUSH
49003: CALL 46210 0 1
49007: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
49008: LD_VAR 0 4
49012: PUSH
49013: LD_VAR 0 7
49017: ARRAY
49018: PPUSH
49019: LD_VAR 0 10
49023: PPUSH
49024: LD_VAR 0 11
49028: PPUSH
49029: LD_VAR 0 14
49033: PUSH
49034: LD_INT 1
49036: ARRAY
49037: PPUSH
49038: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
49042: LD_VAR 0 4
49046: PUSH
49047: LD_VAR 0 7
49051: ARRAY
49052: PPUSH
49053: LD_VAR 0 10
49057: PPUSH
49058: LD_VAR 0 12
49062: PPUSH
49063: LD_INT 7
49065: PPUSH
49066: CALL_OW 272
49070: PPUSH
49071: LD_VAR 0 11
49075: PPUSH
49076: LD_VAR 0 12
49080: PPUSH
49081: LD_INT 7
49083: PPUSH
49084: CALL_OW 273
49088: PPUSH
49089: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
49093: LD_VAR 0 4
49097: PUSH
49098: LD_VAR 0 7
49102: ARRAY
49103: PPUSH
49104: LD_INT 71
49106: PPUSH
49107: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
49111: LD_ADDR_VAR 0 27
49115: PUSH
49116: LD_VAR 0 27
49120: PPUSH
49121: LD_VAR 0 27
49125: PUSH
49126: LD_INT 1
49128: PLUS
49129: PPUSH
49130: LD_VAR 0 14
49134: PUSH
49135: LD_INT 1
49137: ARRAY
49138: PPUSH
49139: CALL_OW 1
49143: ST_TO_ADDR
// attacking := true ;
49144: LD_ADDR_VAR 0 29
49148: PUSH
49149: LD_INT 1
49151: ST_TO_ADDR
// continue ;
49152: GO 48060
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
49154: LD_VAR 0 4
49158: PUSH
49159: LD_VAR 0 7
49163: ARRAY
49164: PPUSH
49165: CALL_OW 257
49169: PUSH
49170: LD_INT 17
49172: EQUAL
49173: PUSH
49174: LD_VAR 0 4
49178: PUSH
49179: LD_VAR 0 7
49183: ARRAY
49184: PPUSH
49185: CALL_OW 110
49189: PUSH
49190: LD_INT 71
49192: EQUAL
49193: NOT
49194: AND
49195: IFFALSE 49341
// begin attacking := false ;
49197: LD_ADDR_VAR 0 29
49201: PUSH
49202: LD_INT 0
49204: ST_TO_ADDR
// k := 5 ;
49205: LD_ADDR_VAR 0 9
49209: PUSH
49210: LD_INT 5
49212: ST_TO_ADDR
// if tmp < k then
49213: LD_VAR 0 14
49217: PUSH
49218: LD_VAR 0 9
49222: LESS
49223: IFFALSE 49235
// k := tmp ;
49225: LD_ADDR_VAR 0 9
49229: PUSH
49230: LD_VAR 0 14
49234: ST_TO_ADDR
// for j = 1 to k do
49235: LD_ADDR_VAR 0 8
49239: PUSH
49240: DOUBLE
49241: LD_INT 1
49243: DEC
49244: ST_TO_ADDR
49245: LD_VAR 0 9
49249: PUSH
49250: FOR_TO
49251: IFFALSE 49339
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
49253: LD_VAR 0 14
49257: PUSH
49258: LD_VAR 0 8
49262: ARRAY
49263: PUSH
49264: LD_VAR 0 14
49268: PPUSH
49269: LD_INT 58
49271: PUSH
49272: EMPTY
49273: LIST
49274: PPUSH
49275: CALL_OW 72
49279: IN
49280: NOT
49281: IFFALSE 49337
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49283: LD_VAR 0 4
49287: PUSH
49288: LD_VAR 0 7
49292: ARRAY
49293: PPUSH
49294: LD_VAR 0 14
49298: PUSH
49299: LD_VAR 0 8
49303: ARRAY
49304: PPUSH
49305: CALL_OW 115
// attacking := true ;
49309: LD_ADDR_VAR 0 29
49313: PUSH
49314: LD_INT 1
49316: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
49317: LD_VAR 0 4
49321: PUSH
49322: LD_VAR 0 7
49326: ARRAY
49327: PPUSH
49328: LD_INT 71
49330: PPUSH
49331: CALL_OW 109
// continue ;
49335: GO 49250
// end ; end ;
49337: GO 49250
49339: POP
49340: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
49341: LD_VAR 0 4
49345: PUSH
49346: LD_VAR 0 7
49350: ARRAY
49351: PPUSH
49352: CALL_OW 257
49356: PUSH
49357: LD_INT 8
49359: EQUAL
49360: PUSH
49361: LD_VAR 0 4
49365: PUSH
49366: LD_VAR 0 7
49370: ARRAY
49371: PPUSH
49372: CALL_OW 264
49376: PUSH
49377: LD_INT 28
49379: PUSH
49380: LD_INT 45
49382: PUSH
49383: LD_INT 7
49385: PUSH
49386: LD_INT 47
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: IN
49395: OR
49396: IFFALSE 49626
// begin attacking := false ;
49398: LD_ADDR_VAR 0 29
49402: PUSH
49403: LD_INT 0
49405: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
49406: LD_VAR 0 14
49410: PUSH
49411: LD_INT 1
49413: ARRAY
49414: PPUSH
49415: CALL_OW 266
49419: PUSH
49420: LD_INT 32
49422: PUSH
49423: LD_INT 31
49425: PUSH
49426: LD_INT 33
49428: PUSH
49429: LD_INT 4
49431: PUSH
49432: LD_INT 5
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: IN
49442: IFFALSE 49626
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
49444: LD_ADDR_VAR 0 9
49448: PUSH
49449: LD_VAR 0 14
49453: PUSH
49454: LD_INT 1
49456: ARRAY
49457: PPUSH
49458: CALL_OW 266
49462: PPUSH
49463: LD_VAR 0 14
49467: PUSH
49468: LD_INT 1
49470: ARRAY
49471: PPUSH
49472: CALL_OW 250
49476: PPUSH
49477: LD_VAR 0 14
49481: PUSH
49482: LD_INT 1
49484: ARRAY
49485: PPUSH
49486: CALL_OW 251
49490: PPUSH
49491: LD_VAR 0 14
49495: PUSH
49496: LD_INT 1
49498: ARRAY
49499: PPUSH
49500: CALL_OW 254
49504: PPUSH
49505: LD_VAR 0 14
49509: PUSH
49510: LD_INT 1
49512: ARRAY
49513: PPUSH
49514: CALL_OW 248
49518: PPUSH
49519: LD_INT 0
49521: PPUSH
49522: CALL 27586 0 6
49526: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
49527: LD_ADDR_VAR 0 8
49531: PUSH
49532: LD_VAR 0 4
49536: PUSH
49537: LD_VAR 0 7
49541: ARRAY
49542: PPUSH
49543: LD_VAR 0 9
49547: PPUSH
49548: CALL 46273 0 2
49552: ST_TO_ADDR
// if j then
49553: LD_VAR 0 8
49557: IFFALSE 49626
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49559: LD_VAR 0 8
49563: PUSH
49564: LD_INT 1
49566: ARRAY
49567: PPUSH
49568: LD_VAR 0 8
49572: PUSH
49573: LD_INT 2
49575: ARRAY
49576: PPUSH
49577: CALL_OW 488
49581: IFFALSE 49626
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
49583: LD_VAR 0 4
49587: PUSH
49588: LD_VAR 0 7
49592: ARRAY
49593: PPUSH
49594: LD_VAR 0 8
49598: PUSH
49599: LD_INT 1
49601: ARRAY
49602: PPUSH
49603: LD_VAR 0 8
49607: PUSH
49608: LD_INT 2
49610: ARRAY
49611: PPUSH
49612: CALL_OW 116
// attacking := true ;
49616: LD_ADDR_VAR 0 29
49620: PUSH
49621: LD_INT 1
49623: ST_TO_ADDR
// continue ;
49624: GO 48060
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
49626: LD_VAR 0 4
49630: PUSH
49631: LD_VAR 0 7
49635: ARRAY
49636: PPUSH
49637: CALL_OW 265
49641: PUSH
49642: LD_INT 11
49644: EQUAL
49645: IFFALSE 49923
// begin k := 10 ;
49647: LD_ADDR_VAR 0 9
49651: PUSH
49652: LD_INT 10
49654: ST_TO_ADDR
// x := 0 ;
49655: LD_ADDR_VAR 0 10
49659: PUSH
49660: LD_INT 0
49662: ST_TO_ADDR
// if tmp < k then
49663: LD_VAR 0 14
49667: PUSH
49668: LD_VAR 0 9
49672: LESS
49673: IFFALSE 49685
// k := tmp ;
49675: LD_ADDR_VAR 0 9
49679: PUSH
49680: LD_VAR 0 14
49684: ST_TO_ADDR
// for j = k downto 1 do
49685: LD_ADDR_VAR 0 8
49689: PUSH
49690: DOUBLE
49691: LD_VAR 0 9
49695: INC
49696: ST_TO_ADDR
49697: LD_INT 1
49699: PUSH
49700: FOR_DOWNTO
49701: IFFALSE 49776
// begin if GetType ( tmp [ j ] ) = unit_human then
49703: LD_VAR 0 14
49707: PUSH
49708: LD_VAR 0 8
49712: ARRAY
49713: PPUSH
49714: CALL_OW 247
49718: PUSH
49719: LD_INT 1
49721: EQUAL
49722: IFFALSE 49774
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
49724: LD_VAR 0 4
49728: PUSH
49729: LD_VAR 0 7
49733: ARRAY
49734: PPUSH
49735: LD_VAR 0 14
49739: PUSH
49740: LD_VAR 0 8
49744: ARRAY
49745: PPUSH
49746: CALL 46544 0 2
// x := tmp [ j ] ;
49750: LD_ADDR_VAR 0 10
49754: PUSH
49755: LD_VAR 0 14
49759: PUSH
49760: LD_VAR 0 8
49764: ARRAY
49765: ST_TO_ADDR
// attacking := true ;
49766: LD_ADDR_VAR 0 29
49770: PUSH
49771: LD_INT 1
49773: ST_TO_ADDR
// end ; end ;
49774: GO 49700
49776: POP
49777: POP
// if not x then
49778: LD_VAR 0 10
49782: NOT
49783: IFFALSE 49923
// begin attacking := true ;
49785: LD_ADDR_VAR 0 29
49789: PUSH
49790: LD_INT 1
49792: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
49793: LD_VAR 0 4
49797: PUSH
49798: LD_VAR 0 7
49802: ARRAY
49803: PPUSH
49804: CALL_OW 250
49808: PPUSH
49809: LD_VAR 0 4
49813: PUSH
49814: LD_VAR 0 7
49818: ARRAY
49819: PPUSH
49820: CALL_OW 251
49824: PPUSH
49825: CALL_OW 546
49829: PUSH
49830: LD_INT 2
49832: ARRAY
49833: PUSH
49834: LD_VAR 0 14
49838: PUSH
49839: LD_INT 1
49841: ARRAY
49842: PPUSH
49843: CALL_OW 250
49847: PPUSH
49848: LD_VAR 0 14
49852: PUSH
49853: LD_INT 1
49855: ARRAY
49856: PPUSH
49857: CALL_OW 251
49861: PPUSH
49862: CALL_OW 546
49866: PUSH
49867: LD_INT 2
49869: ARRAY
49870: EQUAL
49871: IFFALSE 49899
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
49873: LD_VAR 0 4
49877: PUSH
49878: LD_VAR 0 7
49882: ARRAY
49883: PPUSH
49884: LD_VAR 0 14
49888: PUSH
49889: LD_INT 1
49891: ARRAY
49892: PPUSH
49893: CALL 46544 0 2
49897: GO 49923
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49899: LD_VAR 0 4
49903: PUSH
49904: LD_VAR 0 7
49908: ARRAY
49909: PPUSH
49910: LD_VAR 0 14
49914: PUSH
49915: LD_INT 1
49917: ARRAY
49918: PPUSH
49919: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
49923: LD_VAR 0 4
49927: PUSH
49928: LD_VAR 0 7
49932: ARRAY
49933: PPUSH
49934: CALL_OW 264
49938: PUSH
49939: LD_INT 29
49941: EQUAL
49942: IFFALSE 50308
// begin if WantsToAttack ( group [ i ] ) in bombed then
49944: LD_VAR 0 4
49948: PUSH
49949: LD_VAR 0 7
49953: ARRAY
49954: PPUSH
49955: CALL_OW 319
49959: PUSH
49960: LD_VAR 0 28
49964: IN
49965: IFFALSE 49969
// continue ;
49967: GO 48060
// k := 8 ;
49969: LD_ADDR_VAR 0 9
49973: PUSH
49974: LD_INT 8
49976: ST_TO_ADDR
// x := 0 ;
49977: LD_ADDR_VAR 0 10
49981: PUSH
49982: LD_INT 0
49984: ST_TO_ADDR
// if tmp < k then
49985: LD_VAR 0 14
49989: PUSH
49990: LD_VAR 0 9
49994: LESS
49995: IFFALSE 50007
// k := tmp ;
49997: LD_ADDR_VAR 0 9
50001: PUSH
50002: LD_VAR 0 14
50006: ST_TO_ADDR
// for j = 1 to k do
50007: LD_ADDR_VAR 0 8
50011: PUSH
50012: DOUBLE
50013: LD_INT 1
50015: DEC
50016: ST_TO_ADDR
50017: LD_VAR 0 9
50021: PUSH
50022: FOR_TO
50023: IFFALSE 50155
// begin if GetType ( tmp [ j ] ) = unit_building then
50025: LD_VAR 0 14
50029: PUSH
50030: LD_VAR 0 8
50034: ARRAY
50035: PPUSH
50036: CALL_OW 247
50040: PUSH
50041: LD_INT 3
50043: EQUAL
50044: IFFALSE 50153
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
50046: LD_VAR 0 14
50050: PUSH
50051: LD_VAR 0 8
50055: ARRAY
50056: PUSH
50057: LD_VAR 0 28
50061: IN
50062: NOT
50063: PUSH
50064: LD_VAR 0 14
50068: PUSH
50069: LD_VAR 0 8
50073: ARRAY
50074: PPUSH
50075: CALL_OW 313
50079: AND
50080: IFFALSE 50153
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50082: LD_VAR 0 4
50086: PUSH
50087: LD_VAR 0 7
50091: ARRAY
50092: PPUSH
50093: LD_VAR 0 14
50097: PUSH
50098: LD_VAR 0 8
50102: ARRAY
50103: PPUSH
50104: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
50108: LD_ADDR_VAR 0 28
50112: PUSH
50113: LD_VAR 0 28
50117: PPUSH
50118: LD_VAR 0 28
50122: PUSH
50123: LD_INT 1
50125: PLUS
50126: PPUSH
50127: LD_VAR 0 14
50131: PUSH
50132: LD_VAR 0 8
50136: ARRAY
50137: PPUSH
50138: CALL_OW 1
50142: ST_TO_ADDR
// attacking := true ;
50143: LD_ADDR_VAR 0 29
50147: PUSH
50148: LD_INT 1
50150: ST_TO_ADDR
// break ;
50151: GO 50155
// end ; end ;
50153: GO 50022
50155: POP
50156: POP
// if not attacking and f_attack_depot then
50157: LD_VAR 0 29
50161: NOT
50162: PUSH
50163: LD_VAR 0 25
50167: AND
50168: IFFALSE 50263
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50170: LD_ADDR_VAR 0 13
50174: PUSH
50175: LD_VAR 0 14
50179: PPUSH
50180: LD_INT 2
50182: PUSH
50183: LD_INT 30
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 30
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: LIST
50207: PPUSH
50208: CALL_OW 72
50212: ST_TO_ADDR
// if z then
50213: LD_VAR 0 13
50217: IFFALSE 50263
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
50219: LD_VAR 0 4
50223: PUSH
50224: LD_VAR 0 7
50228: ARRAY
50229: PPUSH
50230: LD_VAR 0 13
50234: PPUSH
50235: LD_VAR 0 4
50239: PUSH
50240: LD_VAR 0 7
50244: ARRAY
50245: PPUSH
50246: CALL_OW 74
50250: PPUSH
50251: CALL_OW 115
// attacking := true ;
50255: LD_ADDR_VAR 0 29
50259: PUSH
50260: LD_INT 1
50262: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
50263: LD_VAR 0 4
50267: PUSH
50268: LD_VAR 0 7
50272: ARRAY
50273: PPUSH
50274: CALL_OW 256
50278: PUSH
50279: LD_INT 500
50281: LESS
50282: IFFALSE 50308
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50284: LD_VAR 0 4
50288: PUSH
50289: LD_VAR 0 7
50293: ARRAY
50294: PPUSH
50295: LD_VAR 0 14
50299: PUSH
50300: LD_INT 1
50302: ARRAY
50303: PPUSH
50304: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50308: LD_VAR 0 4
50312: PUSH
50313: LD_VAR 0 7
50317: ARRAY
50318: PPUSH
50319: CALL_OW 256
50323: PUSH
50324: LD_INT 250
50326: LESS
50327: PUSH
50328: LD_VAR 0 4
50332: PUSH
50333: LD_VAR 0 7
50337: ARRAY
50338: PUSH
50339: LD_INT 21
50341: PUSH
50342: LD_INT 2
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 23
50351: PUSH
50352: LD_INT 2
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PPUSH
50363: CALL_OW 69
50367: IN
50368: AND
50369: IFFALSE 50494
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
50371: LD_ADDR_VAR 0 9
50375: PUSH
50376: LD_OWVAR 3
50380: PUSH
50381: LD_VAR 0 4
50385: PUSH
50386: LD_VAR 0 7
50390: ARRAY
50391: DIFF
50392: PPUSH
50393: LD_VAR 0 4
50397: PUSH
50398: LD_VAR 0 7
50402: ARRAY
50403: PPUSH
50404: CALL_OW 74
50408: ST_TO_ADDR
// if not k then
50409: LD_VAR 0 9
50413: NOT
50414: IFFALSE 50418
// continue ;
50416: GO 48060
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
50418: LD_VAR 0 9
50422: PUSH
50423: LD_INT 81
50425: PUSH
50426: LD_VAR 0 4
50430: PUSH
50431: LD_VAR 0 7
50435: ARRAY
50436: PPUSH
50437: CALL_OW 255
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PPUSH
50446: CALL_OW 69
50450: IN
50451: PUSH
50452: LD_VAR 0 9
50456: PPUSH
50457: LD_VAR 0 4
50461: PUSH
50462: LD_VAR 0 7
50466: ARRAY
50467: PPUSH
50468: CALL_OW 296
50472: PUSH
50473: LD_INT 5
50475: LESS
50476: AND
50477: IFFALSE 50494
// ComAutodestruct ( group [ i ] ) ;
50479: LD_VAR 0 4
50483: PUSH
50484: LD_VAR 0 7
50488: ARRAY
50489: PPUSH
50490: CALL 46442 0 1
// end ; if f_attack_depot then
50494: LD_VAR 0 25
50498: IFFALSE 50610
// begin k := 6 ;
50500: LD_ADDR_VAR 0 9
50504: PUSH
50505: LD_INT 6
50507: ST_TO_ADDR
// if tmp < k then
50508: LD_VAR 0 14
50512: PUSH
50513: LD_VAR 0 9
50517: LESS
50518: IFFALSE 50530
// k := tmp ;
50520: LD_ADDR_VAR 0 9
50524: PUSH
50525: LD_VAR 0 14
50529: ST_TO_ADDR
// for j = 1 to k do
50530: LD_ADDR_VAR 0 8
50534: PUSH
50535: DOUBLE
50536: LD_INT 1
50538: DEC
50539: ST_TO_ADDR
50540: LD_VAR 0 9
50544: PUSH
50545: FOR_TO
50546: IFFALSE 50608
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
50548: LD_VAR 0 8
50552: PPUSH
50553: CALL_OW 266
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: IN
50568: IFFALSE 50606
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50570: LD_VAR 0 4
50574: PUSH
50575: LD_VAR 0 7
50579: ARRAY
50580: PPUSH
50581: LD_VAR 0 14
50585: PUSH
50586: LD_VAR 0 8
50590: ARRAY
50591: PPUSH
50592: CALL_OW 115
// attacking := true ;
50596: LD_ADDR_VAR 0 29
50600: PUSH
50601: LD_INT 1
50603: ST_TO_ADDR
// break ;
50604: GO 50608
// end ;
50606: GO 50545
50608: POP
50609: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
50610: LD_VAR 0 4
50614: PUSH
50615: LD_VAR 0 7
50619: ARRAY
50620: PPUSH
50621: CALL_OW 302
50625: PUSH
50626: LD_VAR 0 29
50630: NOT
50631: AND
50632: IFFALSE 50954
// begin if GetTag ( group [ i ] ) = 71 then
50634: LD_VAR 0 4
50638: PUSH
50639: LD_VAR 0 7
50643: ARRAY
50644: PPUSH
50645: CALL_OW 110
50649: PUSH
50650: LD_INT 71
50652: EQUAL
50653: IFFALSE 50694
// begin if HasTask ( group [ i ] ) then
50655: LD_VAR 0 4
50659: PUSH
50660: LD_VAR 0 7
50664: ARRAY
50665: PPUSH
50666: CALL_OW 314
50670: IFFALSE 50676
// continue else
50672: GO 48060
50674: GO 50694
// SetTag ( group [ i ] , 0 ) ;
50676: LD_VAR 0 4
50680: PUSH
50681: LD_VAR 0 7
50685: ARRAY
50686: PPUSH
50687: LD_INT 0
50689: PPUSH
50690: CALL_OW 109
// end ; k := 8 ;
50694: LD_ADDR_VAR 0 9
50698: PUSH
50699: LD_INT 8
50701: ST_TO_ADDR
// x := 0 ;
50702: LD_ADDR_VAR 0 10
50706: PUSH
50707: LD_INT 0
50709: ST_TO_ADDR
// if tmp < k then
50710: LD_VAR 0 14
50714: PUSH
50715: LD_VAR 0 9
50719: LESS
50720: IFFALSE 50732
// k := tmp ;
50722: LD_ADDR_VAR 0 9
50726: PUSH
50727: LD_VAR 0 14
50731: ST_TO_ADDR
// for j = 1 to k do
50732: LD_ADDR_VAR 0 8
50736: PUSH
50737: DOUBLE
50738: LD_INT 1
50740: DEC
50741: ST_TO_ADDR
50742: LD_VAR 0 9
50746: PUSH
50747: FOR_TO
50748: IFFALSE 50846
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
50750: LD_VAR 0 14
50754: PUSH
50755: LD_VAR 0 8
50759: ARRAY
50760: PPUSH
50761: CALL_OW 247
50765: PUSH
50766: LD_INT 1
50768: EQUAL
50769: PUSH
50770: LD_VAR 0 14
50774: PUSH
50775: LD_VAR 0 8
50779: ARRAY
50780: PPUSH
50781: CALL_OW 256
50785: PUSH
50786: LD_INT 250
50788: LESS
50789: PUSH
50790: LD_VAR 0 20
50794: AND
50795: PUSH
50796: LD_VAR 0 20
50800: NOT
50801: PUSH
50802: LD_VAR 0 14
50806: PUSH
50807: LD_VAR 0 8
50811: ARRAY
50812: PPUSH
50813: CALL_OW 256
50817: PUSH
50818: LD_INT 250
50820: GREATEREQUAL
50821: AND
50822: OR
50823: AND
50824: IFFALSE 50844
// begin x := tmp [ j ] ;
50826: LD_ADDR_VAR 0 10
50830: PUSH
50831: LD_VAR 0 14
50835: PUSH
50836: LD_VAR 0 8
50840: ARRAY
50841: ST_TO_ADDR
// break ;
50842: GO 50846
// end ;
50844: GO 50747
50846: POP
50847: POP
// if x then
50848: LD_VAR 0 10
50852: IFFALSE 50876
// ComAttackUnit ( group [ i ] , x ) else
50854: LD_VAR 0 4
50858: PUSH
50859: LD_VAR 0 7
50863: ARRAY
50864: PPUSH
50865: LD_VAR 0 10
50869: PPUSH
50870: CALL_OW 115
50874: GO 50900
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50876: LD_VAR 0 4
50880: PUSH
50881: LD_VAR 0 7
50885: ARRAY
50886: PPUSH
50887: LD_VAR 0 14
50891: PUSH
50892: LD_INT 1
50894: ARRAY
50895: PPUSH
50896: CALL_OW 115
// if not HasTask ( group [ i ] ) then
50900: LD_VAR 0 4
50904: PUSH
50905: LD_VAR 0 7
50909: ARRAY
50910: PPUSH
50911: CALL_OW 314
50915: NOT
50916: IFFALSE 50954
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
50918: LD_VAR 0 4
50922: PUSH
50923: LD_VAR 0 7
50927: ARRAY
50928: PPUSH
50929: LD_VAR 0 14
50933: PPUSH
50934: LD_VAR 0 4
50938: PUSH
50939: LD_VAR 0 7
50943: ARRAY
50944: PPUSH
50945: CALL_OW 74
50949: PPUSH
50950: CALL_OW 115
// end ; end ; end ;
50954: GO 48060
50956: POP
50957: POP
// wait ( 0 0$1 ) ;
50958: LD_INT 35
50960: PPUSH
50961: CALL_OW 67
// until group = [ ] ;
50965: LD_VAR 0 4
50969: PUSH
50970: EMPTY
50971: EQUAL
50972: IFFALSE 48045
// end ;
50974: LD_VAR 0 2
50978: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50979: LD_INT 0
50981: PPUSH
50982: PPUSH
50983: PPUSH
50984: PPUSH
// if not base_units then
50985: LD_VAR 0 1
50989: NOT
50990: IFFALSE 50994
// exit ;
50992: GO 51081
// result := false ;
50994: LD_ADDR_VAR 0 2
50998: PUSH
50999: LD_INT 0
51001: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51002: LD_ADDR_VAR 0 5
51006: PUSH
51007: LD_VAR 0 1
51011: PPUSH
51012: LD_INT 21
51014: PUSH
51015: LD_INT 3
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PPUSH
51022: CALL_OW 72
51026: ST_TO_ADDR
// if not tmp then
51027: LD_VAR 0 5
51031: NOT
51032: IFFALSE 51036
// exit ;
51034: GO 51081
// for i in tmp do
51036: LD_ADDR_VAR 0 3
51040: PUSH
51041: LD_VAR 0 5
51045: PUSH
51046: FOR_IN
51047: IFFALSE 51079
// begin result := EnemyInRange ( i , 22 ) ;
51049: LD_ADDR_VAR 0 2
51053: PUSH
51054: LD_VAR 0 3
51058: PPUSH
51059: LD_INT 22
51061: PPUSH
51062: CALL 46125 0 2
51066: ST_TO_ADDR
// if result then
51067: LD_VAR 0 2
51071: IFFALSE 51077
// exit ;
51073: POP
51074: POP
51075: GO 51081
// end ;
51077: GO 51046
51079: POP
51080: POP
// end ;
51081: LD_VAR 0 2
51085: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
51086: LD_INT 0
51088: PPUSH
51089: PPUSH
// if not units then
51090: LD_VAR 0 1
51094: NOT
51095: IFFALSE 51099
// exit ;
51097: GO 51169
// result := [ ] ;
51099: LD_ADDR_VAR 0 3
51103: PUSH
51104: EMPTY
51105: ST_TO_ADDR
// for i in units do
51106: LD_ADDR_VAR 0 4
51110: PUSH
51111: LD_VAR 0 1
51115: PUSH
51116: FOR_IN
51117: IFFALSE 51167
// if GetTag ( i ) = tag then
51119: LD_VAR 0 4
51123: PPUSH
51124: CALL_OW 110
51128: PUSH
51129: LD_VAR 0 2
51133: EQUAL
51134: IFFALSE 51165
// result := Insert ( result , result + 1 , i ) ;
51136: LD_ADDR_VAR 0 3
51140: PUSH
51141: LD_VAR 0 3
51145: PPUSH
51146: LD_VAR 0 3
51150: PUSH
51151: LD_INT 1
51153: PLUS
51154: PPUSH
51155: LD_VAR 0 4
51159: PPUSH
51160: CALL_OW 2
51164: ST_TO_ADDR
51165: GO 51116
51167: POP
51168: POP
// end ;
51169: LD_VAR 0 3
51173: RET
// export function IsDriver ( un ) ; begin
51174: LD_INT 0
51176: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51177: LD_ADDR_VAR 0 2
51181: PUSH
51182: LD_VAR 0 1
51186: PUSH
51187: LD_INT 55
51189: PUSH
51190: EMPTY
51191: LIST
51192: PPUSH
51193: CALL_OW 69
51197: IN
51198: ST_TO_ADDR
// end ;
51199: LD_VAR 0 2
51203: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51204: LD_INT 0
51206: PPUSH
51207: PPUSH
// list := [ ] ;
51208: LD_ADDR_VAR 0 5
51212: PUSH
51213: EMPTY
51214: ST_TO_ADDR
// case d of 0 :
51215: LD_VAR 0 3
51219: PUSH
51220: LD_INT 0
51222: DOUBLE
51223: EQUAL
51224: IFTRUE 51228
51226: GO 51361
51228: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51229: LD_ADDR_VAR 0 5
51233: PUSH
51234: LD_VAR 0 1
51238: PUSH
51239: LD_INT 4
51241: MINUS
51242: PUSH
51243: LD_VAR 0 2
51247: PUSH
51248: LD_INT 4
51250: MINUS
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: LIST
51259: PUSH
51260: LD_VAR 0 1
51264: PUSH
51265: LD_INT 3
51267: MINUS
51268: PUSH
51269: LD_VAR 0 2
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: LIST
51281: PUSH
51282: LD_VAR 0 1
51286: PUSH
51287: LD_INT 4
51289: PLUS
51290: PUSH
51291: LD_VAR 0 2
51295: PUSH
51296: LD_INT 4
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: LIST
51303: PUSH
51304: LD_VAR 0 1
51308: PUSH
51309: LD_INT 3
51311: PLUS
51312: PUSH
51313: LD_VAR 0 2
51317: PUSH
51318: LD_INT 3
51320: PLUS
51321: PUSH
51322: LD_INT 5
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: LIST
51329: PUSH
51330: LD_VAR 0 1
51334: PUSH
51335: LD_VAR 0 2
51339: PUSH
51340: LD_INT 4
51342: PLUS
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: LIST
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: ST_TO_ADDR
// end ; 1 :
51359: GO 52059
51361: LD_INT 1
51363: DOUBLE
51364: EQUAL
51365: IFTRUE 51369
51367: GO 51502
51369: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51370: LD_ADDR_VAR 0 5
51374: PUSH
51375: LD_VAR 0 1
51379: PUSH
51380: LD_VAR 0 2
51384: PUSH
51385: LD_INT 4
51387: MINUS
51388: PUSH
51389: LD_INT 3
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: LIST
51396: PUSH
51397: LD_VAR 0 1
51401: PUSH
51402: LD_INT 3
51404: MINUS
51405: PUSH
51406: LD_VAR 0 2
51410: PUSH
51411: LD_INT 3
51413: MINUS
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: PUSH
51423: LD_VAR 0 1
51427: PUSH
51428: LD_INT 4
51430: MINUS
51431: PUSH
51432: LD_VAR 0 2
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: LIST
51444: PUSH
51445: LD_VAR 0 1
51449: PUSH
51450: LD_VAR 0 2
51454: PUSH
51455: LD_INT 3
51457: PLUS
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: LIST
51466: PUSH
51467: LD_VAR 0 1
51471: PUSH
51472: LD_INT 4
51474: PLUS
51475: PUSH
51476: LD_VAR 0 2
51480: PUSH
51481: LD_INT 4
51483: PLUS
51484: PUSH
51485: LD_INT 5
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: LIST
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: ST_TO_ADDR
// end ; 2 :
51500: GO 52059
51502: LD_INT 2
51504: DOUBLE
51505: EQUAL
51506: IFTRUE 51510
51508: GO 51639
51510: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51511: LD_ADDR_VAR 0 5
51515: PUSH
51516: LD_VAR 0 1
51520: PUSH
51521: LD_VAR 0 2
51525: PUSH
51526: LD_INT 3
51528: MINUS
51529: PUSH
51530: LD_INT 3
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: LIST
51537: PUSH
51538: LD_VAR 0 1
51542: PUSH
51543: LD_INT 4
51545: PLUS
51546: PUSH
51547: LD_VAR 0 2
51551: PUSH
51552: LD_INT 4
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: LIST
51559: PUSH
51560: LD_VAR 0 1
51564: PUSH
51565: LD_VAR 0 2
51569: PUSH
51570: LD_INT 4
51572: PLUS
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: LIST
51581: PUSH
51582: LD_VAR 0 1
51586: PUSH
51587: LD_INT 3
51589: MINUS
51590: PUSH
51591: LD_VAR 0 2
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: LIST
51603: PUSH
51604: LD_VAR 0 1
51608: PUSH
51609: LD_INT 4
51611: MINUS
51612: PUSH
51613: LD_VAR 0 2
51617: PUSH
51618: LD_INT 4
51620: MINUS
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: LIST
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: ST_TO_ADDR
// end ; 3 :
51637: GO 52059
51639: LD_INT 3
51641: DOUBLE
51642: EQUAL
51643: IFTRUE 51647
51645: GO 51780
51647: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51648: LD_ADDR_VAR 0 5
51652: PUSH
51653: LD_VAR 0 1
51657: PUSH
51658: LD_INT 3
51660: PLUS
51661: PUSH
51662: LD_VAR 0 2
51666: PUSH
51667: LD_INT 4
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: LIST
51674: PUSH
51675: LD_VAR 0 1
51679: PUSH
51680: LD_INT 4
51682: PLUS
51683: PUSH
51684: LD_VAR 0 2
51688: PUSH
51689: LD_INT 4
51691: PLUS
51692: PUSH
51693: LD_INT 5
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: LIST
51700: PUSH
51701: LD_VAR 0 1
51705: PUSH
51706: LD_INT 4
51708: MINUS
51709: PUSH
51710: LD_VAR 0 2
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: LIST
51722: PUSH
51723: LD_VAR 0 1
51727: PUSH
51728: LD_VAR 0 2
51732: PUSH
51733: LD_INT 4
51735: MINUS
51736: PUSH
51737: LD_INT 3
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: LIST
51744: PUSH
51745: LD_VAR 0 1
51749: PUSH
51750: LD_INT 3
51752: MINUS
51753: PUSH
51754: LD_VAR 0 2
51758: PUSH
51759: LD_INT 3
51761: MINUS
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: LIST
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: ST_TO_ADDR
// end ; 4 :
51778: GO 52059
51780: LD_INT 4
51782: DOUBLE
51783: EQUAL
51784: IFTRUE 51788
51786: GO 51921
51788: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51789: LD_ADDR_VAR 0 5
51793: PUSH
51794: LD_VAR 0 1
51798: PUSH
51799: LD_VAR 0 2
51803: PUSH
51804: LD_INT 4
51806: PLUS
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: LIST
51815: PUSH
51816: LD_VAR 0 1
51820: PUSH
51821: LD_INT 3
51823: PLUS
51824: PUSH
51825: LD_VAR 0 2
51829: PUSH
51830: LD_INT 3
51832: PLUS
51833: PUSH
51834: LD_INT 5
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: LIST
51841: PUSH
51842: LD_VAR 0 1
51846: PUSH
51847: LD_INT 4
51849: PLUS
51850: PUSH
51851: LD_VAR 0 2
51855: PUSH
51856: LD_INT 4
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: LIST
51863: PUSH
51864: LD_VAR 0 1
51868: PUSH
51869: LD_VAR 0 2
51873: PUSH
51874: LD_INT 3
51876: MINUS
51877: PUSH
51878: LD_INT 3
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: PUSH
51886: LD_VAR 0 1
51890: PUSH
51891: LD_INT 4
51893: MINUS
51894: PUSH
51895: LD_VAR 0 2
51899: PUSH
51900: LD_INT 4
51902: MINUS
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: LIST
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: ST_TO_ADDR
// end ; 5 :
51919: GO 52059
51921: LD_INT 5
51923: DOUBLE
51924: EQUAL
51925: IFTRUE 51929
51927: GO 52058
51929: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51930: LD_ADDR_VAR 0 5
51934: PUSH
51935: LD_VAR 0 1
51939: PUSH
51940: LD_INT 4
51942: MINUS
51943: PUSH
51944: LD_VAR 0 2
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: PUSH
51957: LD_VAR 0 1
51961: PUSH
51962: LD_VAR 0 2
51966: PUSH
51967: LD_INT 4
51969: MINUS
51970: PUSH
51971: LD_INT 3
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: LIST
51978: PUSH
51979: LD_VAR 0 1
51983: PUSH
51984: LD_INT 4
51986: PLUS
51987: PUSH
51988: LD_VAR 0 2
51992: PUSH
51993: LD_INT 4
51995: PLUS
51996: PUSH
51997: LD_INT 5
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: LIST
52004: PUSH
52005: LD_VAR 0 1
52009: PUSH
52010: LD_INT 3
52012: PLUS
52013: PUSH
52014: LD_VAR 0 2
52018: PUSH
52019: LD_INT 4
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: LIST
52026: PUSH
52027: LD_VAR 0 1
52031: PUSH
52032: LD_VAR 0 2
52036: PUSH
52037: LD_INT 3
52039: PLUS
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: LIST
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: ST_TO_ADDR
// end ; end ;
52056: GO 52059
52058: POP
// result := list ;
52059: LD_ADDR_VAR 0 4
52063: PUSH
52064: LD_VAR 0 5
52068: ST_TO_ADDR
// end ; end_of_file
52069: LD_VAR 0 4
52073: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver ; export function InitMacro ; var i ; begin
52074: LD_INT 0
52076: PPUSH
52077: PPUSH
// skirmish := false ;
52078: LD_ADDR_EXP 56
52082: PUSH
52083: LD_INT 0
52085: ST_TO_ADDR
// mc_bases := [ ] ;
52086: LD_ADDR_EXP 57
52090: PUSH
52091: EMPTY
52092: ST_TO_ADDR
// mc_sides := [ ] ;
52093: LD_ADDR_EXP 83
52097: PUSH
52098: EMPTY
52099: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
52100: LD_ADDR_EXP 58
52104: PUSH
52105: EMPTY
52106: ST_TO_ADDR
// mc_building_repairs := [ ] ;
52107: LD_ADDR_EXP 59
52111: PUSH
52112: EMPTY
52113: ST_TO_ADDR
// mc_need_heal := [ ] ;
52114: LD_ADDR_EXP 60
52118: PUSH
52119: EMPTY
52120: ST_TO_ADDR
// mc_healers := [ ] ;
52121: LD_ADDR_EXP 61
52125: PUSH
52126: EMPTY
52127: ST_TO_ADDR
// mc_build_list := [ ] ;
52128: LD_ADDR_EXP 62
52132: PUSH
52133: EMPTY
52134: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
52135: LD_ADDR_EXP 89
52139: PUSH
52140: EMPTY
52141: ST_TO_ADDR
// mc_builders := [ ] ;
52142: LD_ADDR_EXP 63
52146: PUSH
52147: EMPTY
52148: ST_TO_ADDR
// mc_construct_list := [ ] ;
52149: LD_ADDR_EXP 64
52153: PUSH
52154: EMPTY
52155: ST_TO_ADDR
// mc_turret_list := [ ] ;
52156: LD_ADDR_EXP 65
52160: PUSH
52161: EMPTY
52162: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
52163: LD_ADDR_EXP 66
52167: PUSH
52168: EMPTY
52169: ST_TO_ADDR
// mc_miners := [ ] ;
52170: LD_ADDR_EXP 71
52174: PUSH
52175: EMPTY
52176: ST_TO_ADDR
// mc_mines := [ ] ;
52177: LD_ADDR_EXP 70
52181: PUSH
52182: EMPTY
52183: ST_TO_ADDR
// mc_minefields := [ ] ;
52184: LD_ADDR_EXP 72
52188: PUSH
52189: EMPTY
52190: ST_TO_ADDR
// mc_crates := [ ] ;
52191: LD_ADDR_EXP 73
52195: PUSH
52196: EMPTY
52197: ST_TO_ADDR
// mc_crates_collector := [ ] ;
52198: LD_ADDR_EXP 74
52202: PUSH
52203: EMPTY
52204: ST_TO_ADDR
// mc_crates_area := [ ] ;
52205: LD_ADDR_EXP 75
52209: PUSH
52210: EMPTY
52211: ST_TO_ADDR
// mc_vehicles := [ ] ;
52212: LD_ADDR_EXP 76
52216: PUSH
52217: EMPTY
52218: ST_TO_ADDR
// mc_attack := [ ] ;
52219: LD_ADDR_EXP 77
52223: PUSH
52224: EMPTY
52225: ST_TO_ADDR
// mc_produce := [ ] ;
52226: LD_ADDR_EXP 78
52230: PUSH
52231: EMPTY
52232: ST_TO_ADDR
// mc_defender := [ ] ;
52233: LD_ADDR_EXP 79
52237: PUSH
52238: EMPTY
52239: ST_TO_ADDR
// mc_parking := [ ] ;
52240: LD_ADDR_EXP 81
52244: PUSH
52245: EMPTY
52246: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
52247: LD_ADDR_EXP 67
52251: PUSH
52252: EMPTY
52253: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
52254: LD_ADDR_EXP 69
52258: PUSH
52259: EMPTY
52260: ST_TO_ADDR
// mc_scan := [ ] ;
52261: LD_ADDR_EXP 80
52265: PUSH
52266: EMPTY
52267: ST_TO_ADDR
// mc_scan_area := [ ] ;
52268: LD_ADDR_EXP 82
52272: PUSH
52273: EMPTY
52274: ST_TO_ADDR
// mc_tech := [ ] ;
52275: LD_ADDR_EXP 84
52279: PUSH
52280: EMPTY
52281: ST_TO_ADDR
// end ;
52282: LD_VAR 0 1
52286: RET
// export function MC_Kill ( base ) ; begin
52287: LD_INT 0
52289: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
52290: LD_ADDR_EXP 57
52294: PUSH
52295: LD_EXP 57
52299: PPUSH
52300: LD_VAR 0 1
52304: PPUSH
52305: EMPTY
52306: PPUSH
52307: CALL_OW 1
52311: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
52312: LD_ADDR_EXP 58
52316: PUSH
52317: LD_EXP 58
52321: PPUSH
52322: LD_VAR 0 1
52326: PPUSH
52327: EMPTY
52328: PPUSH
52329: CALL_OW 1
52333: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
52334: LD_ADDR_EXP 59
52338: PUSH
52339: LD_EXP 59
52343: PPUSH
52344: LD_VAR 0 1
52348: PPUSH
52349: EMPTY
52350: PPUSH
52351: CALL_OW 1
52355: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
52356: LD_ADDR_EXP 60
52360: PUSH
52361: LD_EXP 60
52365: PPUSH
52366: LD_VAR 0 1
52370: PPUSH
52371: EMPTY
52372: PPUSH
52373: CALL_OW 1
52377: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
52378: LD_ADDR_EXP 61
52382: PUSH
52383: LD_EXP 61
52387: PPUSH
52388: LD_VAR 0 1
52392: PPUSH
52393: EMPTY
52394: PPUSH
52395: CALL_OW 1
52399: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
52400: LD_ADDR_EXP 62
52404: PUSH
52405: LD_EXP 62
52409: PPUSH
52410: LD_VAR 0 1
52414: PPUSH
52415: EMPTY
52416: PPUSH
52417: CALL_OW 1
52421: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
52422: LD_ADDR_EXP 63
52426: PUSH
52427: LD_EXP 63
52431: PPUSH
52432: LD_VAR 0 1
52436: PPUSH
52437: EMPTY
52438: PPUSH
52439: CALL_OW 1
52443: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
52444: LD_ADDR_EXP 64
52448: PUSH
52449: LD_EXP 64
52453: PPUSH
52454: LD_VAR 0 1
52458: PPUSH
52459: EMPTY
52460: PPUSH
52461: CALL_OW 1
52465: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
52466: LD_ADDR_EXP 65
52470: PUSH
52471: LD_EXP 65
52475: PPUSH
52476: LD_VAR 0 1
52480: PPUSH
52481: EMPTY
52482: PPUSH
52483: CALL_OW 1
52487: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
52488: LD_ADDR_EXP 66
52492: PUSH
52493: LD_EXP 66
52497: PPUSH
52498: LD_VAR 0 1
52502: PPUSH
52503: EMPTY
52504: PPUSH
52505: CALL_OW 1
52509: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
52510: LD_ADDR_EXP 67
52514: PUSH
52515: LD_EXP 67
52519: PPUSH
52520: LD_VAR 0 1
52524: PPUSH
52525: EMPTY
52526: PPUSH
52527: CALL_OW 1
52531: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
52532: LD_ADDR_EXP 68
52536: PUSH
52537: LD_EXP 68
52541: PPUSH
52542: LD_VAR 0 1
52546: PPUSH
52547: LD_INT 0
52549: PPUSH
52550: CALL_OW 1
52554: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
52555: LD_ADDR_EXP 69
52559: PUSH
52560: LD_EXP 69
52564: PPUSH
52565: LD_VAR 0 1
52569: PPUSH
52570: EMPTY
52571: PPUSH
52572: CALL_OW 1
52576: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
52577: LD_ADDR_EXP 70
52581: PUSH
52582: LD_EXP 70
52586: PPUSH
52587: LD_VAR 0 1
52591: PPUSH
52592: EMPTY
52593: PPUSH
52594: CALL_OW 1
52598: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
52599: LD_ADDR_EXP 71
52603: PUSH
52604: LD_EXP 71
52608: PPUSH
52609: LD_VAR 0 1
52613: PPUSH
52614: EMPTY
52615: PPUSH
52616: CALL_OW 1
52620: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
52621: LD_ADDR_EXP 72
52625: PUSH
52626: LD_EXP 72
52630: PPUSH
52631: LD_VAR 0 1
52635: PPUSH
52636: EMPTY
52637: PPUSH
52638: CALL_OW 1
52642: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
52643: LD_ADDR_EXP 73
52647: PUSH
52648: LD_EXP 73
52652: PPUSH
52653: LD_VAR 0 1
52657: PPUSH
52658: EMPTY
52659: PPUSH
52660: CALL_OW 1
52664: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
52665: LD_ADDR_EXP 74
52669: PUSH
52670: LD_EXP 74
52674: PPUSH
52675: LD_VAR 0 1
52679: PPUSH
52680: EMPTY
52681: PPUSH
52682: CALL_OW 1
52686: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
52687: LD_ADDR_EXP 75
52691: PUSH
52692: LD_EXP 75
52696: PPUSH
52697: LD_VAR 0 1
52701: PPUSH
52702: EMPTY
52703: PPUSH
52704: CALL_OW 1
52708: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
52709: LD_ADDR_EXP 76
52713: PUSH
52714: LD_EXP 76
52718: PPUSH
52719: LD_VAR 0 1
52723: PPUSH
52724: EMPTY
52725: PPUSH
52726: CALL_OW 1
52730: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
52731: LD_ADDR_EXP 77
52735: PUSH
52736: LD_EXP 77
52740: PPUSH
52741: LD_VAR 0 1
52745: PPUSH
52746: EMPTY
52747: PPUSH
52748: CALL_OW 1
52752: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
52753: LD_ADDR_EXP 78
52757: PUSH
52758: LD_EXP 78
52762: PPUSH
52763: LD_VAR 0 1
52767: PPUSH
52768: EMPTY
52769: PPUSH
52770: CALL_OW 1
52774: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
52775: LD_ADDR_EXP 79
52779: PUSH
52780: LD_EXP 79
52784: PPUSH
52785: LD_VAR 0 1
52789: PPUSH
52790: EMPTY
52791: PPUSH
52792: CALL_OW 1
52796: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
52797: LD_ADDR_EXP 80
52801: PUSH
52802: LD_EXP 80
52806: PPUSH
52807: LD_VAR 0 1
52811: PPUSH
52812: EMPTY
52813: PPUSH
52814: CALL_OW 1
52818: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
52819: LD_ADDR_EXP 81
52823: PUSH
52824: LD_EXP 81
52828: PPUSH
52829: LD_VAR 0 1
52833: PPUSH
52834: EMPTY
52835: PPUSH
52836: CALL_OW 1
52840: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
52841: LD_ADDR_EXP 82
52845: PUSH
52846: LD_EXP 82
52850: PPUSH
52851: LD_VAR 0 1
52855: PPUSH
52856: EMPTY
52857: PPUSH
52858: CALL_OW 1
52862: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
52863: LD_ADDR_EXP 84
52867: PUSH
52868: LD_EXP 84
52872: PPUSH
52873: LD_VAR 0 1
52877: PPUSH
52878: EMPTY
52879: PPUSH
52880: CALL_OW 1
52884: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
52885: LD_ADDR_EXP 86
52889: PUSH
52890: LD_EXP 86
52894: PPUSH
52895: LD_VAR 0 1
52899: PPUSH
52900: EMPTY
52901: PPUSH
52902: CALL_OW 1
52906: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
52907: LD_ADDR_EXP 87
52911: PUSH
52912: LD_EXP 87
52916: PPUSH
52917: LD_VAR 0 1
52921: PPUSH
52922: EMPTY
52923: PPUSH
52924: CALL_OW 1
52928: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
52929: LD_ADDR_EXP 88
52933: PUSH
52934: LD_EXP 88
52938: PPUSH
52939: LD_VAR 0 1
52943: PPUSH
52944: EMPTY
52945: PPUSH
52946: CALL_OW 1
52950: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
52951: LD_ADDR_EXP 89
52955: PUSH
52956: LD_EXP 89
52960: PPUSH
52961: LD_VAR 0 1
52965: PPUSH
52966: EMPTY
52967: PPUSH
52968: CALL_OW 1
52972: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
52973: LD_ADDR_EXP 90
52977: PUSH
52978: LD_EXP 90
52982: PPUSH
52983: LD_VAR 0 1
52987: PPUSH
52988: EMPTY
52989: PPUSH
52990: CALL_OW 1
52994: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
52995: LD_ADDR_EXP 91
52999: PUSH
53000: LD_EXP 91
53004: PPUSH
53005: LD_VAR 0 1
53009: PPUSH
53010: EMPTY
53011: PPUSH
53012: CALL_OW 1
53016: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
53017: LD_ADDR_EXP 92
53021: PUSH
53022: LD_EXP 92
53026: PPUSH
53027: LD_VAR 0 1
53031: PPUSH
53032: EMPTY
53033: PPUSH
53034: CALL_OW 1
53038: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
53039: LD_ADDR_EXP 93
53043: PUSH
53044: LD_EXP 93
53048: PPUSH
53049: LD_VAR 0 1
53053: PPUSH
53054: EMPTY
53055: PPUSH
53056: CALL_OW 1
53060: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
53061: LD_ADDR_EXP 94
53065: PUSH
53066: LD_EXP 94
53070: PPUSH
53071: LD_VAR 0 1
53075: PPUSH
53076: EMPTY
53077: PPUSH
53078: CALL_OW 1
53082: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
53083: LD_ADDR_EXP 95
53087: PUSH
53088: LD_EXP 95
53092: PPUSH
53093: LD_VAR 0 1
53097: PPUSH
53098: EMPTY
53099: PPUSH
53100: CALL_OW 1
53104: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
53105: LD_ADDR_EXP 96
53109: PUSH
53110: LD_EXP 96
53114: PPUSH
53115: LD_VAR 0 1
53119: PPUSH
53120: EMPTY
53121: PPUSH
53122: CALL_OW 1
53126: ST_TO_ADDR
// end ;
53127: LD_VAR 0 2
53131: RET
// export function MC_Start ( ) ; var i ; begin
53132: LD_INT 0
53134: PPUSH
53135: PPUSH
// for i = 1 to mc_bases do
53136: LD_ADDR_VAR 0 2
53140: PUSH
53141: DOUBLE
53142: LD_INT 1
53144: DEC
53145: ST_TO_ADDR
53146: LD_EXP 57
53150: PUSH
53151: FOR_TO
53152: IFFALSE 54085
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
53154: LD_ADDR_EXP 58
53158: PUSH
53159: LD_EXP 58
53163: PPUSH
53164: LD_VAR 0 2
53168: PPUSH
53169: EMPTY
53170: PPUSH
53171: CALL_OW 1
53175: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
53176: LD_ADDR_EXP 59
53180: PUSH
53181: LD_EXP 59
53185: PPUSH
53186: LD_VAR 0 2
53190: PPUSH
53191: EMPTY
53192: PPUSH
53193: CALL_OW 1
53197: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
53198: LD_ADDR_EXP 60
53202: PUSH
53203: LD_EXP 60
53207: PPUSH
53208: LD_VAR 0 2
53212: PPUSH
53213: EMPTY
53214: PPUSH
53215: CALL_OW 1
53219: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
53220: LD_ADDR_EXP 61
53224: PUSH
53225: LD_EXP 61
53229: PPUSH
53230: LD_VAR 0 2
53234: PPUSH
53235: EMPTY
53236: PUSH
53237: EMPTY
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PPUSH
53243: CALL_OW 1
53247: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
53248: LD_ADDR_EXP 62
53252: PUSH
53253: LD_EXP 62
53257: PPUSH
53258: LD_VAR 0 2
53262: PPUSH
53263: EMPTY
53264: PPUSH
53265: CALL_OW 1
53269: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
53270: LD_ADDR_EXP 89
53274: PUSH
53275: LD_EXP 89
53279: PPUSH
53280: LD_VAR 0 2
53284: PPUSH
53285: EMPTY
53286: PPUSH
53287: CALL_OW 1
53291: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
53292: LD_ADDR_EXP 63
53296: PUSH
53297: LD_EXP 63
53301: PPUSH
53302: LD_VAR 0 2
53306: PPUSH
53307: EMPTY
53308: PPUSH
53309: CALL_OW 1
53313: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
53314: LD_ADDR_EXP 64
53318: PUSH
53319: LD_EXP 64
53323: PPUSH
53324: LD_VAR 0 2
53328: PPUSH
53329: EMPTY
53330: PPUSH
53331: CALL_OW 1
53335: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
53336: LD_ADDR_EXP 65
53340: PUSH
53341: LD_EXP 65
53345: PPUSH
53346: LD_VAR 0 2
53350: PPUSH
53351: EMPTY
53352: PPUSH
53353: CALL_OW 1
53357: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
53358: LD_ADDR_EXP 66
53362: PUSH
53363: LD_EXP 66
53367: PPUSH
53368: LD_VAR 0 2
53372: PPUSH
53373: LD_EXP 57
53377: PUSH
53378: LD_VAR 0 2
53382: ARRAY
53383: PPUSH
53384: LD_INT 2
53386: PUSH
53387: LD_INT 30
53389: PUSH
53390: LD_INT 32
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 30
53399: PUSH
53400: LD_INT 31
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 58
53414: PUSH
53415: EMPTY
53416: LIST
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PPUSH
53422: CALL_OW 72
53426: PPUSH
53427: CALL_OW 1
53431: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
53432: LD_ADDR_EXP 67
53436: PUSH
53437: LD_EXP 67
53441: PPUSH
53442: LD_VAR 0 2
53446: PPUSH
53447: EMPTY
53448: PPUSH
53449: CALL_OW 1
53453: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
53454: LD_ADDR_EXP 71
53458: PUSH
53459: LD_EXP 71
53463: PPUSH
53464: LD_VAR 0 2
53468: PPUSH
53469: EMPTY
53470: PPUSH
53471: CALL_OW 1
53475: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
53476: LD_ADDR_EXP 70
53480: PUSH
53481: LD_EXP 70
53485: PPUSH
53486: LD_VAR 0 2
53490: PPUSH
53491: EMPTY
53492: PPUSH
53493: CALL_OW 1
53497: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
53498: LD_ADDR_EXP 72
53502: PUSH
53503: LD_EXP 72
53507: PPUSH
53508: LD_VAR 0 2
53512: PPUSH
53513: EMPTY
53514: PPUSH
53515: CALL_OW 1
53519: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
53520: LD_ADDR_EXP 73
53524: PUSH
53525: LD_EXP 73
53529: PPUSH
53530: LD_VAR 0 2
53534: PPUSH
53535: EMPTY
53536: PPUSH
53537: CALL_OW 1
53541: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
53542: LD_ADDR_EXP 74
53546: PUSH
53547: LD_EXP 74
53551: PPUSH
53552: LD_VAR 0 2
53556: PPUSH
53557: EMPTY
53558: PPUSH
53559: CALL_OW 1
53563: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
53564: LD_ADDR_EXP 75
53568: PUSH
53569: LD_EXP 75
53573: PPUSH
53574: LD_VAR 0 2
53578: PPUSH
53579: EMPTY
53580: PPUSH
53581: CALL_OW 1
53585: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
53586: LD_ADDR_EXP 76
53590: PUSH
53591: LD_EXP 76
53595: PPUSH
53596: LD_VAR 0 2
53600: PPUSH
53601: EMPTY
53602: PPUSH
53603: CALL_OW 1
53607: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
53608: LD_ADDR_EXP 77
53612: PUSH
53613: LD_EXP 77
53617: PPUSH
53618: LD_VAR 0 2
53622: PPUSH
53623: EMPTY
53624: PPUSH
53625: CALL_OW 1
53629: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
53630: LD_ADDR_EXP 78
53634: PUSH
53635: LD_EXP 78
53639: PPUSH
53640: LD_VAR 0 2
53644: PPUSH
53645: EMPTY
53646: PPUSH
53647: CALL_OW 1
53651: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
53652: LD_ADDR_EXP 79
53656: PUSH
53657: LD_EXP 79
53661: PPUSH
53662: LD_VAR 0 2
53666: PPUSH
53667: EMPTY
53668: PPUSH
53669: CALL_OW 1
53673: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
53674: LD_ADDR_EXP 68
53678: PUSH
53679: LD_EXP 68
53683: PPUSH
53684: LD_VAR 0 2
53688: PPUSH
53689: LD_INT 0
53691: PPUSH
53692: CALL_OW 1
53696: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
53697: LD_ADDR_EXP 81
53701: PUSH
53702: LD_EXP 81
53706: PPUSH
53707: LD_VAR 0 2
53711: PPUSH
53712: LD_INT 0
53714: PPUSH
53715: CALL_OW 1
53719: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
53720: LD_ADDR_EXP 69
53724: PUSH
53725: LD_EXP 69
53729: PPUSH
53730: LD_VAR 0 2
53734: PPUSH
53735: EMPTY
53736: PPUSH
53737: CALL_OW 1
53741: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
53742: LD_ADDR_EXP 80
53746: PUSH
53747: LD_EXP 80
53751: PPUSH
53752: LD_VAR 0 2
53756: PPUSH
53757: LD_INT 0
53759: PPUSH
53760: CALL_OW 1
53764: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
53765: LD_ADDR_EXP 82
53769: PUSH
53770: LD_EXP 82
53774: PPUSH
53775: LD_VAR 0 2
53779: PPUSH
53780: EMPTY
53781: PPUSH
53782: CALL_OW 1
53786: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
53787: LD_ADDR_EXP 85
53791: PUSH
53792: LD_EXP 85
53796: PPUSH
53797: LD_VAR 0 2
53801: PPUSH
53802: LD_INT 0
53804: PPUSH
53805: CALL_OW 1
53809: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
53810: LD_ADDR_EXP 86
53814: PUSH
53815: LD_EXP 86
53819: PPUSH
53820: LD_VAR 0 2
53824: PPUSH
53825: EMPTY
53826: PPUSH
53827: CALL_OW 1
53831: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
53832: LD_ADDR_EXP 87
53836: PUSH
53837: LD_EXP 87
53841: PPUSH
53842: LD_VAR 0 2
53846: PPUSH
53847: EMPTY
53848: PPUSH
53849: CALL_OW 1
53853: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
53854: LD_ADDR_EXP 88
53858: PUSH
53859: LD_EXP 88
53863: PPUSH
53864: LD_VAR 0 2
53868: PPUSH
53869: EMPTY
53870: PPUSH
53871: CALL_OW 1
53875: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
53876: LD_ADDR_EXP 90
53880: PUSH
53881: LD_EXP 90
53885: PPUSH
53886: LD_VAR 0 2
53890: PPUSH
53891: LD_EXP 57
53895: PUSH
53896: LD_VAR 0 2
53900: ARRAY
53901: PPUSH
53902: LD_INT 2
53904: PUSH
53905: LD_INT 30
53907: PUSH
53908: LD_INT 6
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 30
53917: PUSH
53918: LD_INT 7
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 30
53927: PUSH
53928: LD_INT 8
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: PPUSH
53941: CALL_OW 72
53945: PPUSH
53946: CALL_OW 1
53950: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
53951: LD_ADDR_EXP 91
53955: PUSH
53956: LD_EXP 91
53960: PPUSH
53961: LD_VAR 0 2
53965: PPUSH
53966: EMPTY
53967: PPUSH
53968: CALL_OW 1
53972: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
53973: LD_ADDR_EXP 92
53977: PUSH
53978: LD_EXP 92
53982: PPUSH
53983: LD_VAR 0 2
53987: PPUSH
53988: EMPTY
53989: PPUSH
53990: CALL_OW 1
53994: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
53995: LD_ADDR_EXP 93
53999: PUSH
54000: LD_EXP 93
54004: PPUSH
54005: LD_VAR 0 2
54009: PPUSH
54010: EMPTY
54011: PPUSH
54012: CALL_OW 1
54016: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
54017: LD_ADDR_EXP 94
54021: PUSH
54022: LD_EXP 94
54026: PPUSH
54027: LD_VAR 0 2
54031: PPUSH
54032: EMPTY
54033: PPUSH
54034: CALL_OW 1
54038: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
54039: LD_ADDR_EXP 95
54043: PUSH
54044: LD_EXP 95
54048: PPUSH
54049: LD_VAR 0 2
54053: PPUSH
54054: EMPTY
54055: PPUSH
54056: CALL_OW 1
54060: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
54061: LD_ADDR_EXP 96
54065: PUSH
54066: LD_EXP 96
54070: PPUSH
54071: LD_VAR 0 2
54075: PPUSH
54076: EMPTY
54077: PPUSH
54078: CALL_OW 1
54082: ST_TO_ADDR
// end ;
54083: GO 53151
54085: POP
54086: POP
// MC_InitSides ( ) ;
54087: CALL 54373 0 0
// MC_InitResearch ( ) ;
54091: CALL 54112 0 0
// CustomInitMacro ( ) ;
54095: CALL 174 0 0
// skirmish := true ;
54099: LD_ADDR_EXP 56
54103: PUSH
54104: LD_INT 1
54106: ST_TO_ADDR
// end ;
54107: LD_VAR 0 1
54111: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
54112: LD_INT 0
54114: PPUSH
54115: PPUSH
54116: PPUSH
54117: PPUSH
54118: PPUSH
54119: PPUSH
// if not mc_bases then
54120: LD_EXP 57
54124: NOT
54125: IFFALSE 54129
// exit ;
54127: GO 54368
// for i = 1 to 8 do
54129: LD_ADDR_VAR 0 2
54133: PUSH
54134: DOUBLE
54135: LD_INT 1
54137: DEC
54138: ST_TO_ADDR
54139: LD_INT 8
54141: PUSH
54142: FOR_TO
54143: IFFALSE 54169
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
54145: LD_ADDR_EXP 84
54149: PUSH
54150: LD_EXP 84
54154: PPUSH
54155: LD_VAR 0 2
54159: PPUSH
54160: EMPTY
54161: PPUSH
54162: CALL_OW 1
54166: ST_TO_ADDR
54167: GO 54142
54169: POP
54170: POP
// tmp := [ ] ;
54171: LD_ADDR_VAR 0 5
54175: PUSH
54176: EMPTY
54177: ST_TO_ADDR
// for i = 1 to mc_sides do
54178: LD_ADDR_VAR 0 2
54182: PUSH
54183: DOUBLE
54184: LD_INT 1
54186: DEC
54187: ST_TO_ADDR
54188: LD_EXP 83
54192: PUSH
54193: FOR_TO
54194: IFFALSE 54252
// if not mc_sides [ i ] in tmp then
54196: LD_EXP 83
54200: PUSH
54201: LD_VAR 0 2
54205: ARRAY
54206: PUSH
54207: LD_VAR 0 5
54211: IN
54212: NOT
54213: IFFALSE 54250
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
54215: LD_ADDR_VAR 0 5
54219: PUSH
54220: LD_VAR 0 5
54224: PPUSH
54225: LD_VAR 0 5
54229: PUSH
54230: LD_INT 1
54232: PLUS
54233: PPUSH
54234: LD_EXP 83
54238: PUSH
54239: LD_VAR 0 2
54243: ARRAY
54244: PPUSH
54245: CALL_OW 2
54249: ST_TO_ADDR
54250: GO 54193
54252: POP
54253: POP
// if not tmp then
54254: LD_VAR 0 5
54258: NOT
54259: IFFALSE 54263
// exit ;
54261: GO 54368
// for j in tmp do
54263: LD_ADDR_VAR 0 3
54267: PUSH
54268: LD_VAR 0 5
54272: PUSH
54273: FOR_IN
54274: IFFALSE 54366
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
54276: LD_ADDR_VAR 0 6
54280: PUSH
54281: LD_INT 22
54283: PUSH
54284: LD_VAR 0 3
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PPUSH
54293: CALL_OW 69
54297: ST_TO_ADDR
// if not un then
54298: LD_VAR 0 6
54302: NOT
54303: IFFALSE 54307
// continue ;
54305: GO 54273
// nation := GetNation ( un [ 1 ] ) ;
54307: LD_ADDR_VAR 0 4
54311: PUSH
54312: LD_VAR 0 6
54316: PUSH
54317: LD_INT 1
54319: ARRAY
54320: PPUSH
54321: CALL_OW 248
54325: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
54326: LD_ADDR_EXP 84
54330: PUSH
54331: LD_EXP 84
54335: PPUSH
54336: LD_VAR 0 3
54340: PPUSH
54341: LD_VAR 0 3
54345: PPUSH
54346: LD_VAR 0 4
54350: PPUSH
54351: LD_INT 1
54353: PPUSH
54354: CALL 13550 0 3
54358: PPUSH
54359: CALL_OW 1
54363: ST_TO_ADDR
// end ;
54364: GO 54273
54366: POP
54367: POP
// end ;
54368: LD_VAR 0 1
54372: RET
// export function MC_InitSides ( ) ; var i ; begin
54373: LD_INT 0
54375: PPUSH
54376: PPUSH
// if not mc_bases then
54377: LD_EXP 57
54381: NOT
54382: IFFALSE 54386
// exit ;
54384: GO 54460
// for i = 1 to mc_bases do
54386: LD_ADDR_VAR 0 2
54390: PUSH
54391: DOUBLE
54392: LD_INT 1
54394: DEC
54395: ST_TO_ADDR
54396: LD_EXP 57
54400: PUSH
54401: FOR_TO
54402: IFFALSE 54458
// if mc_bases [ i ] then
54404: LD_EXP 57
54408: PUSH
54409: LD_VAR 0 2
54413: ARRAY
54414: IFFALSE 54456
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
54416: LD_ADDR_EXP 83
54420: PUSH
54421: LD_EXP 83
54425: PPUSH
54426: LD_VAR 0 2
54430: PPUSH
54431: LD_EXP 57
54435: PUSH
54436: LD_VAR 0 2
54440: ARRAY
54441: PUSH
54442: LD_INT 1
54444: ARRAY
54445: PPUSH
54446: CALL_OW 255
54450: PPUSH
54451: CALL_OW 1
54455: ST_TO_ADDR
54456: GO 54401
54458: POP
54459: POP
// end ;
54460: LD_VAR 0 1
54464: RET
// every 0 0$01 trigger skirmish do
54465: LD_EXP 56
54469: IFFALSE 54602
54471: GO 54473
54473: DISABLE
// begin enable ;
54474: ENABLE
// MC_CheckBuildings ( ) ;
54475: CALL 55087 0 0
// MC_CheckPeopleLife ( ) ;
54479: CALL 55212 0 0
// RaiseSailEvent ( 103 ) ;
54483: LD_INT 103
54485: PPUSH
54486: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
54490: LD_INT 104
54492: PPUSH
54493: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
54497: LD_INT 105
54499: PPUSH
54500: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
54504: LD_INT 106
54506: PPUSH
54507: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
54511: LD_INT 107
54513: PPUSH
54514: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
54518: LD_INT 108
54520: PPUSH
54521: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
54525: LD_INT 109
54527: PPUSH
54528: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
54532: LD_INT 110
54534: PPUSH
54535: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
54539: LD_INT 111
54541: PPUSH
54542: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
54546: LD_INT 112
54548: PPUSH
54549: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
54553: LD_INT 120
54555: PPUSH
54556: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
54560: LD_INT 121
54562: PPUSH
54563: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
54567: LD_INT 122
54569: PPUSH
54570: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
54574: LD_INT 123
54576: PPUSH
54577: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
54581: LD_INT 125
54583: PPUSH
54584: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
54588: LD_INT 126
54590: PPUSH
54591: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
54595: LD_INT 200
54597: PPUSH
54598: CALL_OW 427
// end ;
54602: END
// every 10 trigger skirmish do var i ;
54603: LD_EXP 56
54607: IFFALSE 54706
54609: GO 54611
54611: DISABLE
54612: LD_INT 0
54614: PPUSH
// begin enable ;
54615: ENABLE
// if not mc_bases then
54616: LD_EXP 57
54620: NOT
54621: IFFALSE 54625
// exit ;
54623: GO 54706
// for i = 1 to mc_bases do
54625: LD_ADDR_VAR 0 1
54629: PUSH
54630: DOUBLE
54631: LD_INT 1
54633: DEC
54634: ST_TO_ADDR
54635: LD_EXP 57
54639: PUSH
54640: FOR_TO
54641: IFFALSE 54704
// if mc_mines [ i ] and mc_miners [ i ] then
54643: LD_EXP 70
54647: PUSH
54648: LD_VAR 0 1
54652: ARRAY
54653: PUSH
54654: LD_EXP 71
54658: PUSH
54659: LD_VAR 0 1
54663: ARRAY
54664: AND
54665: IFFALSE 54702
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
54667: LD_EXP 71
54671: PUSH
54672: LD_VAR 0 1
54676: ARRAY
54677: PUSH
54678: LD_INT 1
54680: ARRAY
54681: PPUSH
54682: CALL_OW 255
54686: PPUSH
54687: LD_EXP 70
54691: PUSH
54692: LD_VAR 0 1
54696: ARRAY
54697: PPUSH
54698: CALL 16782 0 2
54702: GO 54640
54704: POP
54705: POP
// end ;
54706: PPOPN 1
54708: END
// on SailEvent ( event ) do begin if event = 101 then
54709: LD_VAR 0 1
54713: PUSH
54714: LD_INT 101
54716: EQUAL
54717: IFFALSE 54723
// MC_RepairBuildings ( ) ;
54719: CALL 55770 0 0
// if event = 102 then
54723: LD_VAR 0 1
54727: PUSH
54728: LD_INT 102
54730: EQUAL
54731: IFFALSE 54737
// MC_Heal ( ) ;
54733: CALL 56176 0 0
// if event = 103 then
54737: LD_VAR 0 1
54741: PUSH
54742: LD_INT 103
54744: EQUAL
54745: IFFALSE 54751
// MC_Build ( ) ;
54747: CALL 56598 0 0
// if event = 104 then
54751: LD_VAR 0 1
54755: PUSH
54756: LD_INT 104
54758: EQUAL
54759: IFFALSE 54765
// MC_TurretWeapon ( ) ;
54761: CALL 58015 0 0
// if event = 105 then
54765: LD_VAR 0 1
54769: PUSH
54770: LD_INT 105
54772: EQUAL
54773: IFFALSE 54779
// MC_BuildUpgrade ( ) ;
54775: CALL 57566 0 0
// if event = 106 then
54779: LD_VAR 0 1
54783: PUSH
54784: LD_INT 106
54786: EQUAL
54787: IFFALSE 54793
// MC_PlantMines ( ) ;
54789: CALL 58367 0 0
// if event = 107 then
54793: LD_VAR 0 1
54797: PUSH
54798: LD_INT 107
54800: EQUAL
54801: IFFALSE 54807
// MC_CollectCrates ( ) ;
54803: CALL 59374 0 0
// if event = 108 then
54807: LD_VAR 0 1
54811: PUSH
54812: LD_INT 108
54814: EQUAL
54815: IFFALSE 54821
// MC_LinkRemoteControl ( ) ;
54817: CALL 60878 0 0
// if event = 109 then
54821: LD_VAR 0 1
54825: PUSH
54826: LD_INT 109
54828: EQUAL
54829: IFFALSE 54835
// MC_ProduceVehicle ( ) ;
54831: CALL 61059 0 0
// if event = 110 then
54835: LD_VAR 0 1
54839: PUSH
54840: LD_INT 110
54842: EQUAL
54843: IFFALSE 54849
// MC_SendAttack ( ) ;
54845: CALL 61540 0 0
// if event = 111 then
54849: LD_VAR 0 1
54853: PUSH
54854: LD_INT 111
54856: EQUAL
54857: IFFALSE 54863
// MC_Defend ( ) ;
54859: CALL 61648 0 0
// if event = 112 then
54863: LD_VAR 0 1
54867: PUSH
54868: LD_INT 112
54870: EQUAL
54871: IFFALSE 54877
// MC_Research ( ) ;
54873: CALL 62046 0 0
// if event = 120 then
54877: LD_VAR 0 1
54881: PUSH
54882: LD_INT 120
54884: EQUAL
54885: IFFALSE 54891
// MC_RepairVehicle ( ) ;
54887: CALL 63015 0 0
// if event = 121 then
54891: LD_VAR 0 1
54895: PUSH
54896: LD_INT 121
54898: EQUAL
54899: IFFALSE 54905
// MC_TameApe ( ) ;
54901: CALL 63704 0 0
// if event = 122 then
54905: LD_VAR 0 1
54909: PUSH
54910: LD_INT 122
54912: EQUAL
54913: IFFALSE 54919
// MC_ChangeApeClass ( ) ;
54915: CALL 64467 0 0
// if event = 123 then
54919: LD_VAR 0 1
54923: PUSH
54924: LD_INT 123
54926: EQUAL
54927: IFFALSE 54933
// MC_Bazooka ( ) ;
54929: CALL 65101 0 0
// if event = 124 then
54933: LD_VAR 0 1
54937: PUSH
54938: LD_INT 124
54940: EQUAL
54941: IFFALSE 54947
// MC_TeleportExit ( ) ;
54943: CALL 65299 0 0
// if event = 125 then
54947: LD_VAR 0 1
54951: PUSH
54952: LD_INT 125
54954: EQUAL
54955: IFFALSE 54961
// MC_Deposits ( ) ;
54957: CALL 65341 0 0
// if event = 126 then
54961: LD_VAR 0 1
54965: PUSH
54966: LD_INT 126
54968: EQUAL
54969: IFFALSE 54975
// MC_RemoteDriver ( ) ;
54971: CALL 65920 0 0
// if event = 200 then
54975: LD_VAR 0 1
54979: PUSH
54980: LD_INT 200
54982: EQUAL
54983: IFFALSE 54989
// MC_Idle ( ) ;
54985: CALL 67425 0 0
// end ;
54989: PPOPN 1
54991: END
// export function MC_Reset ( base , tag ) ; var i ; begin
54992: LD_INT 0
54994: PPUSH
54995: PPUSH
// if not mc_bases [ base ] or not tag then
54996: LD_EXP 57
55000: PUSH
55001: LD_VAR 0 1
55005: ARRAY
55006: NOT
55007: PUSH
55008: LD_VAR 0 2
55012: NOT
55013: OR
55014: IFFALSE 55018
// exit ;
55016: GO 55082
// for i in mc_bases [ base ] union mc_ape [ base ] do
55018: LD_ADDR_VAR 0 4
55022: PUSH
55023: LD_EXP 57
55027: PUSH
55028: LD_VAR 0 1
55032: ARRAY
55033: PUSH
55034: LD_EXP 86
55038: PUSH
55039: LD_VAR 0 1
55043: ARRAY
55044: UNION
55045: PUSH
55046: FOR_IN
55047: IFFALSE 55080
// if GetTag ( i ) = tag then
55049: LD_VAR 0 4
55053: PPUSH
55054: CALL_OW 110
55058: PUSH
55059: LD_VAR 0 2
55063: EQUAL
55064: IFFALSE 55078
// SetTag ( i , 0 ) ;
55066: LD_VAR 0 4
55070: PPUSH
55071: LD_INT 0
55073: PPUSH
55074: CALL_OW 109
55078: GO 55046
55080: POP
55081: POP
// end ;
55082: LD_VAR 0 3
55086: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
55087: LD_INT 0
55089: PPUSH
55090: PPUSH
55091: PPUSH
// if not mc_bases then
55092: LD_EXP 57
55096: NOT
55097: IFFALSE 55101
// exit ;
55099: GO 55207
// for i = 1 to mc_bases do
55101: LD_ADDR_VAR 0 2
55105: PUSH
55106: DOUBLE
55107: LD_INT 1
55109: DEC
55110: ST_TO_ADDR
55111: LD_EXP 57
55115: PUSH
55116: FOR_TO
55117: IFFALSE 55198
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
55119: LD_ADDR_VAR 0 3
55123: PUSH
55124: LD_EXP 57
55128: PUSH
55129: LD_VAR 0 2
55133: ARRAY
55134: PPUSH
55135: LD_INT 21
55137: PUSH
55138: LD_INT 3
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 3
55147: PUSH
55148: LD_INT 24
55150: PUSH
55151: LD_INT 1000
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PPUSH
55166: CALL_OW 72
55170: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
55171: LD_ADDR_EXP 58
55175: PUSH
55176: LD_EXP 58
55180: PPUSH
55181: LD_VAR 0 2
55185: PPUSH
55186: LD_VAR 0 3
55190: PPUSH
55191: CALL_OW 1
55195: ST_TO_ADDR
// end ;
55196: GO 55116
55198: POP
55199: POP
// RaiseSailEvent ( 101 ) ;
55200: LD_INT 101
55202: PPUSH
55203: CALL_OW 427
// end ;
55207: LD_VAR 0 1
55211: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
55212: LD_INT 0
55214: PPUSH
55215: PPUSH
55216: PPUSH
55217: PPUSH
55218: PPUSH
55219: PPUSH
55220: PPUSH
// if not mc_bases then
55221: LD_EXP 57
55225: NOT
55226: IFFALSE 55230
// exit ;
55228: GO 55765
// for i = 1 to mc_bases do
55230: LD_ADDR_VAR 0 2
55234: PUSH
55235: DOUBLE
55236: LD_INT 1
55238: DEC
55239: ST_TO_ADDR
55240: LD_EXP 57
55244: PUSH
55245: FOR_TO
55246: IFFALSE 55756
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
55248: LD_ADDR_VAR 0 5
55252: PUSH
55253: LD_EXP 57
55257: PUSH
55258: LD_VAR 0 2
55262: ARRAY
55263: PUSH
55264: LD_EXP 86
55268: PUSH
55269: LD_VAR 0 2
55273: ARRAY
55274: UNION
55275: PPUSH
55276: LD_INT 21
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: LD_INT 3
55291: PUSH
55292: LD_INT 54
55294: PUSH
55295: EMPTY
55296: LIST
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 3
55304: PUSH
55305: LD_INT 24
55307: PUSH
55308: LD_INT 700
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: LIST
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PPUSH
55328: CALL_OW 72
55332: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
55333: LD_ADDR_VAR 0 6
55337: PUSH
55338: LD_EXP 57
55342: PUSH
55343: LD_VAR 0 2
55347: ARRAY
55348: PPUSH
55349: LD_INT 21
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: LD_INT 3
55364: PUSH
55365: LD_INT 54
55367: PUSH
55368: EMPTY
55369: LIST
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 3
55377: PUSH
55378: LD_INT 24
55380: PUSH
55381: LD_INT 250
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: LIST
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PPUSH
55401: CALL_OW 72
55405: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
55406: LD_ADDR_VAR 0 7
55410: PUSH
55411: LD_VAR 0 5
55415: PUSH
55416: LD_VAR 0 6
55420: DIFF
55421: ST_TO_ADDR
// if not need_heal_1 then
55422: LD_VAR 0 6
55426: NOT
55427: IFFALSE 55460
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
55429: LD_ADDR_EXP 60
55433: PUSH
55434: LD_EXP 60
55438: PPUSH
55439: LD_VAR 0 2
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PPUSH
55451: EMPTY
55452: PPUSH
55453: CALL 20124 0 3
55457: ST_TO_ADDR
55458: GO 55492
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
55460: LD_ADDR_EXP 60
55464: PUSH
55465: LD_EXP 60
55469: PPUSH
55470: LD_VAR 0 2
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PPUSH
55482: LD_VAR 0 6
55486: PPUSH
55487: CALL 20124 0 3
55491: ST_TO_ADDR
// if not need_heal_2 then
55492: LD_VAR 0 7
55496: NOT
55497: IFFALSE 55530
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
55499: LD_ADDR_EXP 60
55503: PUSH
55504: LD_EXP 60
55508: PPUSH
55509: LD_VAR 0 2
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PPUSH
55521: EMPTY
55522: PPUSH
55523: CALL 20124 0 3
55527: ST_TO_ADDR
55528: GO 55562
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
55530: LD_ADDR_EXP 60
55534: PUSH
55535: LD_EXP 60
55539: PPUSH
55540: LD_VAR 0 2
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PPUSH
55552: LD_VAR 0 7
55556: PPUSH
55557: CALL 20124 0 3
55561: ST_TO_ADDR
// if need_heal_2 then
55562: LD_VAR 0 7
55566: IFFALSE 55738
// for j in need_heal_2 do
55568: LD_ADDR_VAR 0 3
55572: PUSH
55573: LD_VAR 0 7
55577: PUSH
55578: FOR_IN
55579: IFFALSE 55736
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
55581: LD_ADDR_VAR 0 5
55585: PUSH
55586: LD_EXP 57
55590: PUSH
55591: LD_VAR 0 2
55595: ARRAY
55596: PPUSH
55597: LD_INT 2
55599: PUSH
55600: LD_INT 30
55602: PUSH
55603: LD_INT 6
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 30
55612: PUSH
55613: LD_INT 7
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 30
55622: PUSH
55623: LD_INT 8
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 30
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 30
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 25
55652: PUSH
55653: LD_INT 4
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: PPUSH
55669: CALL_OW 72
55673: ST_TO_ADDR
// if tmp then
55674: LD_VAR 0 5
55678: IFFALSE 55734
// begin k := NearestUnitToUnit ( tmp , j ) ;
55680: LD_ADDR_VAR 0 4
55684: PUSH
55685: LD_VAR 0 5
55689: PPUSH
55690: LD_VAR 0 3
55694: PPUSH
55695: CALL_OW 74
55699: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
55700: LD_VAR 0 3
55704: PPUSH
55705: LD_VAR 0 4
55709: PPUSH
55710: CALL_OW 296
55714: PUSH
55715: LD_INT 7
55717: GREATER
55718: IFFALSE 55734
// ComMoveUnit ( j , k ) ;
55720: LD_VAR 0 3
55724: PPUSH
55725: LD_VAR 0 4
55729: PPUSH
55730: CALL_OW 112
// end ; end ;
55734: GO 55578
55736: POP
55737: POP
// if not need_heal_1 and not need_heal_2 then
55738: LD_VAR 0 6
55742: NOT
55743: PUSH
55744: LD_VAR 0 7
55748: NOT
55749: AND
55750: IFFALSE 55754
// continue ;
55752: GO 55245
// end ;
55754: GO 55245
55756: POP
55757: POP
// RaiseSailEvent ( 102 ) ;
55758: LD_INT 102
55760: PPUSH
55761: CALL_OW 427
// end ;
55765: LD_VAR 0 1
55769: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
55770: LD_INT 0
55772: PPUSH
55773: PPUSH
55774: PPUSH
55775: PPUSH
55776: PPUSH
// if not mc_bases then
55777: LD_EXP 57
55781: NOT
55782: IFFALSE 55786
// exit ;
55784: GO 56171
// for i = 1 to mc_bases do
55786: LD_ADDR_VAR 0 2
55790: PUSH
55791: DOUBLE
55792: LD_INT 1
55794: DEC
55795: ST_TO_ADDR
55796: LD_EXP 57
55800: PUSH
55801: FOR_TO
55802: IFFALSE 56169
// begin if not mc_building_need_repair [ i ] then
55804: LD_EXP 58
55808: PUSH
55809: LD_VAR 0 2
55813: ARRAY
55814: NOT
55815: IFFALSE 55853
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
55817: LD_ADDR_EXP 59
55821: PUSH
55822: LD_EXP 59
55826: PPUSH
55827: LD_VAR 0 2
55831: PPUSH
55832: EMPTY
55833: PPUSH
55834: CALL_OW 1
55838: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
55839: LD_VAR 0 2
55843: PPUSH
55844: LD_INT 101
55846: PPUSH
55847: CALL 54992 0 2
// continue ;
55851: GO 55801
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
55853: LD_ADDR_EXP 63
55857: PUSH
55858: LD_EXP 63
55862: PPUSH
55863: LD_VAR 0 2
55867: PPUSH
55868: EMPTY
55869: PPUSH
55870: CALL_OW 1
55874: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
55875: LD_VAR 0 2
55879: PPUSH
55880: LD_INT 103
55882: PPUSH
55883: CALL 54992 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
55887: LD_ADDR_VAR 0 5
55891: PUSH
55892: LD_EXP 57
55896: PUSH
55897: LD_VAR 0 2
55901: ARRAY
55902: PUSH
55903: LD_EXP 86
55907: PUSH
55908: LD_VAR 0 2
55912: ARRAY
55913: UNION
55914: PPUSH
55915: LD_INT 2
55917: PUSH
55918: LD_INT 25
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 25
55930: PUSH
55931: LD_INT 16
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: LIST
55942: PUSH
55943: EMPTY
55944: LIST
55945: PPUSH
55946: CALL_OW 72
55950: ST_TO_ADDR
// if not tmp then
55951: LD_VAR 0 5
55955: NOT
55956: IFFALSE 55960
// continue ;
55958: GO 55801
// for j in tmp do
55960: LD_ADDR_VAR 0 3
55964: PUSH
55965: LD_VAR 0 5
55969: PUSH
55970: FOR_IN
55971: IFFALSE 56165
// begin if mc_need_heal [ i ] then
55973: LD_EXP 60
55977: PUSH
55978: LD_VAR 0 2
55982: ARRAY
55983: IFFALSE 56031
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
55985: LD_VAR 0 3
55989: PUSH
55990: LD_EXP 60
55994: PUSH
55995: LD_VAR 0 2
55999: ARRAY
56000: PUSH
56001: LD_INT 1
56003: ARRAY
56004: IN
56005: PUSH
56006: LD_VAR 0 3
56010: PUSH
56011: LD_EXP 60
56015: PUSH
56016: LD_VAR 0 2
56020: ARRAY
56021: PUSH
56022: LD_INT 2
56024: ARRAY
56025: IN
56026: OR
56027: IFFALSE 56031
// continue ;
56029: GO 55970
// if IsInUnit ( j ) then
56031: LD_VAR 0 3
56035: PPUSH
56036: CALL_OW 310
56040: IFFALSE 56051
// ComExitBuilding ( j ) ;
56042: LD_VAR 0 3
56046: PPUSH
56047: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
56051: LD_VAR 0 3
56055: PUSH
56056: LD_EXP 59
56060: PUSH
56061: LD_VAR 0 2
56065: ARRAY
56066: IN
56067: NOT
56068: IFFALSE 56126
// begin SetTag ( j , 101 ) ;
56070: LD_VAR 0 3
56074: PPUSH
56075: LD_INT 101
56077: PPUSH
56078: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
56082: LD_ADDR_EXP 59
56086: PUSH
56087: LD_EXP 59
56091: PPUSH
56092: LD_VAR 0 2
56096: PUSH
56097: LD_EXP 59
56101: PUSH
56102: LD_VAR 0 2
56106: ARRAY
56107: PUSH
56108: LD_INT 1
56110: PLUS
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PPUSH
56116: LD_VAR 0 3
56120: PPUSH
56121: CALL 20124 0 3
56125: ST_TO_ADDR
// end ; Wait ( 3 ) ;
56126: LD_INT 3
56128: PPUSH
56129: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
56133: LD_VAR 0 3
56137: PPUSH
56138: LD_EXP 58
56142: PUSH
56143: LD_VAR 0 2
56147: ARRAY
56148: PPUSH
56149: LD_VAR 0 3
56153: PPUSH
56154: CALL_OW 74
56158: PPUSH
56159: CALL_OW 130
// end ;
56163: GO 55970
56165: POP
56166: POP
// end ;
56167: GO 55801
56169: POP
56170: POP
// end ;
56171: LD_VAR 0 1
56175: RET
// export function MC_Heal ; var i , j , tmp ; begin
56176: LD_INT 0
56178: PPUSH
56179: PPUSH
56180: PPUSH
56181: PPUSH
// if not mc_bases then
56182: LD_EXP 57
56186: NOT
56187: IFFALSE 56191
// exit ;
56189: GO 56593
// for i = 1 to mc_bases do
56191: LD_ADDR_VAR 0 2
56195: PUSH
56196: DOUBLE
56197: LD_INT 1
56199: DEC
56200: ST_TO_ADDR
56201: LD_EXP 57
56205: PUSH
56206: FOR_TO
56207: IFFALSE 56591
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
56209: LD_EXP 60
56213: PUSH
56214: LD_VAR 0 2
56218: ARRAY
56219: PUSH
56220: LD_INT 1
56222: ARRAY
56223: NOT
56224: PUSH
56225: LD_EXP 60
56229: PUSH
56230: LD_VAR 0 2
56234: ARRAY
56235: PUSH
56236: LD_INT 2
56238: ARRAY
56239: NOT
56240: AND
56241: IFFALSE 56279
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
56243: LD_ADDR_EXP 61
56247: PUSH
56248: LD_EXP 61
56252: PPUSH
56253: LD_VAR 0 2
56257: PPUSH
56258: EMPTY
56259: PPUSH
56260: CALL_OW 1
56264: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
56265: LD_VAR 0 2
56269: PPUSH
56270: LD_INT 102
56272: PPUSH
56273: CALL 54992 0 2
// continue ;
56277: GO 56206
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
56279: LD_ADDR_VAR 0 4
56283: PUSH
56284: LD_EXP 57
56288: PUSH
56289: LD_VAR 0 2
56293: ARRAY
56294: PPUSH
56295: LD_INT 25
56297: PUSH
56298: LD_INT 4
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PPUSH
56305: CALL_OW 72
56309: ST_TO_ADDR
// if not tmp then
56310: LD_VAR 0 4
56314: NOT
56315: IFFALSE 56319
// continue ;
56317: GO 56206
// if mc_taming [ i ] then
56319: LD_EXP 88
56323: PUSH
56324: LD_VAR 0 2
56328: ARRAY
56329: IFFALSE 56353
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
56331: LD_ADDR_EXP 88
56335: PUSH
56336: LD_EXP 88
56340: PPUSH
56341: LD_VAR 0 2
56345: PPUSH
56346: EMPTY
56347: PPUSH
56348: CALL_OW 1
56352: ST_TO_ADDR
// for j in tmp do
56353: LD_ADDR_VAR 0 3
56357: PUSH
56358: LD_VAR 0 4
56362: PUSH
56363: FOR_IN
56364: IFFALSE 56587
// begin if IsInUnit ( j ) then
56366: LD_VAR 0 3
56370: PPUSH
56371: CALL_OW 310
56375: IFFALSE 56386
// ComExitBuilding ( j ) ;
56377: LD_VAR 0 3
56381: PPUSH
56382: CALL_OW 122
// if not j in mc_healers [ i ] then
56386: LD_VAR 0 3
56390: PUSH
56391: LD_EXP 61
56395: PUSH
56396: LD_VAR 0 2
56400: ARRAY
56401: IN
56402: NOT
56403: IFFALSE 56449
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
56405: LD_ADDR_EXP 61
56409: PUSH
56410: LD_EXP 61
56414: PPUSH
56415: LD_VAR 0 2
56419: PUSH
56420: LD_EXP 61
56424: PUSH
56425: LD_VAR 0 2
56429: ARRAY
56430: PUSH
56431: LD_INT 1
56433: PLUS
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PPUSH
56439: LD_VAR 0 3
56443: PPUSH
56444: CALL 20124 0 3
56448: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
56449: LD_VAR 0 3
56453: PPUSH
56454: CALL_OW 110
56458: PUSH
56459: LD_INT 102
56461: NONEQUAL
56462: IFFALSE 56476
// SetTag ( j , 102 ) ;
56464: LD_VAR 0 3
56468: PPUSH
56469: LD_INT 102
56471: PPUSH
56472: CALL_OW 109
// Wait ( 3 ) ;
56476: LD_INT 3
56478: PPUSH
56479: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
56483: LD_EXP 60
56487: PUSH
56488: LD_VAR 0 2
56492: ARRAY
56493: PUSH
56494: LD_INT 1
56496: ARRAY
56497: IFFALSE 56529
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
56499: LD_VAR 0 3
56503: PPUSH
56504: LD_EXP 60
56508: PUSH
56509: LD_VAR 0 2
56513: ARRAY
56514: PUSH
56515: LD_INT 1
56517: ARRAY
56518: PUSH
56519: LD_INT 1
56521: ARRAY
56522: PPUSH
56523: CALL_OW 128
56527: GO 56585
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
56529: LD_VAR 0 3
56533: PPUSH
56534: CALL_OW 314
56538: NOT
56539: PUSH
56540: LD_EXP 60
56544: PUSH
56545: LD_VAR 0 2
56549: ARRAY
56550: PUSH
56551: LD_INT 2
56553: ARRAY
56554: AND
56555: IFFALSE 56585
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
56557: LD_VAR 0 3
56561: PPUSH
56562: LD_EXP 60
56566: PUSH
56567: LD_VAR 0 2
56571: ARRAY
56572: PUSH
56573: LD_INT 2
56575: ARRAY
56576: PUSH
56577: LD_INT 1
56579: ARRAY
56580: PPUSH
56581: CALL_OW 128
// end ;
56585: GO 56363
56587: POP
56588: POP
// end ;
56589: GO 56206
56591: POP
56592: POP
// end ;
56593: LD_VAR 0 1
56597: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
56598: LD_INT 0
56600: PPUSH
56601: PPUSH
56602: PPUSH
56603: PPUSH
// if not mc_bases then
56604: LD_EXP 57
56608: NOT
56609: IFFALSE 56613
// exit ;
56611: GO 57561
// for i = 1 to mc_bases do
56613: LD_ADDR_VAR 0 2
56617: PUSH
56618: DOUBLE
56619: LD_INT 1
56621: DEC
56622: ST_TO_ADDR
56623: LD_EXP 57
56627: PUSH
56628: FOR_TO
56629: IFFALSE 57559
// begin if mc_scan [ i ] then
56631: LD_EXP 80
56635: PUSH
56636: LD_VAR 0 2
56640: ARRAY
56641: IFFALSE 56645
// continue ;
56643: GO 56628
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
56645: LD_EXP 62
56649: PUSH
56650: LD_VAR 0 2
56654: ARRAY
56655: NOT
56656: PUSH
56657: LD_EXP 64
56661: PUSH
56662: LD_VAR 0 2
56666: ARRAY
56667: NOT
56668: AND
56669: PUSH
56670: LD_EXP 63
56674: PUSH
56675: LD_VAR 0 2
56679: ARRAY
56680: AND
56681: IFFALSE 56719
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
56683: LD_ADDR_EXP 63
56687: PUSH
56688: LD_EXP 63
56692: PPUSH
56693: LD_VAR 0 2
56697: PPUSH
56698: EMPTY
56699: PPUSH
56700: CALL_OW 1
56704: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
56705: LD_VAR 0 2
56709: PPUSH
56710: LD_INT 103
56712: PPUSH
56713: CALL 54992 0 2
// continue ;
56717: GO 56628
// end ; if mc_construct_list [ i ] then
56719: LD_EXP 64
56723: PUSH
56724: LD_VAR 0 2
56728: ARRAY
56729: IFFALSE 56949
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
56731: LD_ADDR_VAR 0 4
56735: PUSH
56736: LD_EXP 57
56740: PUSH
56741: LD_VAR 0 2
56745: ARRAY
56746: PPUSH
56747: LD_INT 25
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PPUSH
56757: CALL_OW 72
56761: PUSH
56762: LD_EXP 59
56766: PUSH
56767: LD_VAR 0 2
56771: ARRAY
56772: DIFF
56773: ST_TO_ADDR
// if not tmp then
56774: LD_VAR 0 4
56778: NOT
56779: IFFALSE 56783
// continue ;
56781: GO 56628
// for j in tmp do
56783: LD_ADDR_VAR 0 3
56787: PUSH
56788: LD_VAR 0 4
56792: PUSH
56793: FOR_IN
56794: IFFALSE 56945
// begin if not mc_builders [ i ] then
56796: LD_EXP 63
56800: PUSH
56801: LD_VAR 0 2
56805: ARRAY
56806: NOT
56807: IFFALSE 56865
// begin SetTag ( j , 103 ) ;
56809: LD_VAR 0 3
56813: PPUSH
56814: LD_INT 103
56816: PPUSH
56817: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
56821: LD_ADDR_EXP 63
56825: PUSH
56826: LD_EXP 63
56830: PPUSH
56831: LD_VAR 0 2
56835: PUSH
56836: LD_EXP 63
56840: PUSH
56841: LD_VAR 0 2
56845: ARRAY
56846: PUSH
56847: LD_INT 1
56849: PLUS
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PPUSH
56855: LD_VAR 0 3
56859: PPUSH
56860: CALL 20124 0 3
56864: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
56865: LD_VAR 0 3
56869: PPUSH
56870: CALL_OW 310
56874: IFFALSE 56885
// ComExitBuilding ( j ) ;
56876: LD_VAR 0 3
56880: PPUSH
56881: CALL_OW 122
// wait ( 3 ) ;
56885: LD_INT 3
56887: PPUSH
56888: CALL_OW 67
// if not mc_construct_list [ i ] then
56892: LD_EXP 64
56896: PUSH
56897: LD_VAR 0 2
56901: ARRAY
56902: NOT
56903: IFFALSE 56907
// break ;
56905: GO 56945
// if not HasTask ( j ) then
56907: LD_VAR 0 3
56911: PPUSH
56912: CALL_OW 314
56916: NOT
56917: IFFALSE 56943
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
56919: LD_VAR 0 3
56923: PPUSH
56924: LD_EXP 64
56928: PUSH
56929: LD_VAR 0 2
56933: ARRAY
56934: PUSH
56935: LD_INT 1
56937: ARRAY
56938: PPUSH
56939: CALL 22530 0 2
// end ;
56943: GO 56793
56945: POP
56946: POP
// end else
56947: GO 57557
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
56949: LD_EXP 62
56953: PUSH
56954: LD_VAR 0 2
56958: ARRAY
56959: PUSH
56960: LD_EXP 57
56964: PUSH
56965: LD_VAR 0 2
56969: ARRAY
56970: PPUSH
56971: LD_INT 2
56973: PUSH
56974: LD_INT 30
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 30
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: LIST
56998: PPUSH
56999: CALL_OW 72
57003: AND
57004: IFFALSE 57557
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
57006: LD_EXP 57
57010: PUSH
57011: LD_VAR 0 2
57015: ARRAY
57016: PPUSH
57017: LD_INT 2
57019: PUSH
57020: LD_INT 30
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 30
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: LIST
57044: PPUSH
57045: CALL_OW 72
57049: PUSH
57050: LD_INT 1
57052: ARRAY
57053: PPUSH
57054: LD_EXP 62
57058: PUSH
57059: LD_VAR 0 2
57063: ARRAY
57064: PUSH
57065: LD_INT 1
57067: ARRAY
57068: PUSH
57069: LD_INT 1
57071: ARRAY
57072: PPUSH
57073: LD_EXP 62
57077: PUSH
57078: LD_VAR 0 2
57082: ARRAY
57083: PUSH
57084: LD_INT 1
57086: ARRAY
57087: PUSH
57088: LD_INT 2
57090: ARRAY
57091: PPUSH
57092: LD_EXP 62
57096: PUSH
57097: LD_VAR 0 2
57101: ARRAY
57102: PUSH
57103: LD_INT 1
57105: ARRAY
57106: PUSH
57107: LD_INT 3
57109: ARRAY
57110: PPUSH
57111: LD_EXP 62
57115: PUSH
57116: LD_VAR 0 2
57120: ARRAY
57121: PUSH
57122: LD_INT 1
57124: ARRAY
57125: PUSH
57126: LD_INT 4
57128: ARRAY
57129: PPUSH
57130: CALL 26762 0 5
57134: IFFALSE 57415
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
57136: LD_ADDR_VAR 0 4
57140: PUSH
57141: LD_EXP 57
57145: PUSH
57146: LD_VAR 0 2
57150: ARRAY
57151: PPUSH
57152: LD_INT 25
57154: PUSH
57155: LD_INT 2
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PPUSH
57162: CALL_OW 72
57166: PUSH
57167: LD_EXP 59
57171: PUSH
57172: LD_VAR 0 2
57176: ARRAY
57177: DIFF
57178: ST_TO_ADDR
// if not tmp then
57179: LD_VAR 0 4
57183: NOT
57184: IFFALSE 57188
// continue ;
57186: GO 56628
// for j in tmp do
57188: LD_ADDR_VAR 0 3
57192: PUSH
57193: LD_VAR 0 4
57197: PUSH
57198: FOR_IN
57199: IFFALSE 57411
// begin if not mc_builders [ i ] then
57201: LD_EXP 63
57205: PUSH
57206: LD_VAR 0 2
57210: ARRAY
57211: NOT
57212: IFFALSE 57270
// begin SetTag ( j , 103 ) ;
57214: LD_VAR 0 3
57218: PPUSH
57219: LD_INT 103
57221: PPUSH
57222: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
57226: LD_ADDR_EXP 63
57230: PUSH
57231: LD_EXP 63
57235: PPUSH
57236: LD_VAR 0 2
57240: PUSH
57241: LD_EXP 63
57245: PUSH
57246: LD_VAR 0 2
57250: ARRAY
57251: PUSH
57252: LD_INT 1
57254: PLUS
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PPUSH
57260: LD_VAR 0 3
57264: PPUSH
57265: CALL 20124 0 3
57269: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
57270: LD_VAR 0 3
57274: PPUSH
57275: CALL_OW 310
57279: IFFALSE 57290
// ComExitBuilding ( j ) ;
57281: LD_VAR 0 3
57285: PPUSH
57286: CALL_OW 122
// wait ( 3 ) ;
57290: LD_INT 3
57292: PPUSH
57293: CALL_OW 67
// if not mc_build_list [ i ] then
57297: LD_EXP 62
57301: PUSH
57302: LD_VAR 0 2
57306: ARRAY
57307: NOT
57308: IFFALSE 57312
// break ;
57310: GO 57411
// if not HasTask ( j ) then
57312: LD_VAR 0 3
57316: PPUSH
57317: CALL_OW 314
57321: NOT
57322: IFFALSE 57409
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
57324: LD_VAR 0 3
57328: PPUSH
57329: LD_EXP 62
57333: PUSH
57334: LD_VAR 0 2
57338: ARRAY
57339: PUSH
57340: LD_INT 1
57342: ARRAY
57343: PUSH
57344: LD_INT 1
57346: ARRAY
57347: PPUSH
57348: LD_EXP 62
57352: PUSH
57353: LD_VAR 0 2
57357: ARRAY
57358: PUSH
57359: LD_INT 1
57361: ARRAY
57362: PUSH
57363: LD_INT 2
57365: ARRAY
57366: PPUSH
57367: LD_EXP 62
57371: PUSH
57372: LD_VAR 0 2
57376: ARRAY
57377: PUSH
57378: LD_INT 1
57380: ARRAY
57381: PUSH
57382: LD_INT 3
57384: ARRAY
57385: PPUSH
57386: LD_EXP 62
57390: PUSH
57391: LD_VAR 0 2
57395: ARRAY
57396: PUSH
57397: LD_INT 1
57399: ARRAY
57400: PUSH
57401: LD_INT 4
57403: ARRAY
57404: PPUSH
57405: CALL_OW 145
// end ;
57409: GO 57198
57411: POP
57412: POP
// end else
57413: GO 57557
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
57415: LD_EXP 57
57419: PUSH
57420: LD_VAR 0 2
57424: ARRAY
57425: PPUSH
57426: LD_EXP 62
57430: PUSH
57431: LD_VAR 0 2
57435: ARRAY
57436: PUSH
57437: LD_INT 1
57439: ARRAY
57440: PUSH
57441: LD_INT 1
57443: ARRAY
57444: PPUSH
57445: LD_EXP 62
57449: PUSH
57450: LD_VAR 0 2
57454: ARRAY
57455: PUSH
57456: LD_INT 1
57458: ARRAY
57459: PUSH
57460: LD_INT 2
57462: ARRAY
57463: PPUSH
57464: LD_EXP 62
57468: PUSH
57469: LD_VAR 0 2
57473: ARRAY
57474: PUSH
57475: LD_INT 1
57477: ARRAY
57478: PUSH
57479: LD_INT 3
57481: ARRAY
57482: PPUSH
57483: LD_EXP 62
57487: PUSH
57488: LD_VAR 0 2
57492: ARRAY
57493: PUSH
57494: LD_INT 1
57496: ARRAY
57497: PUSH
57498: LD_INT 4
57500: ARRAY
57501: PPUSH
57502: CALL 26193 0 5
57506: NOT
57507: IFFALSE 57557
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
57509: LD_ADDR_EXP 62
57513: PUSH
57514: LD_EXP 62
57518: PPUSH
57519: LD_VAR 0 2
57523: PPUSH
57524: LD_EXP 62
57528: PUSH
57529: LD_VAR 0 2
57533: ARRAY
57534: PPUSH
57535: LD_INT 1
57537: PPUSH
57538: LD_INT 1
57540: NEG
57541: PPUSH
57542: LD_INT 0
57544: PPUSH
57545: CALL 19107 0 4
57549: PPUSH
57550: CALL_OW 1
57554: ST_TO_ADDR
// continue ;
57555: GO 56628
// end ; end ;
57557: GO 56628
57559: POP
57560: POP
// end ;
57561: LD_VAR 0 1
57565: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
57566: LD_INT 0
57568: PPUSH
57569: PPUSH
57570: PPUSH
57571: PPUSH
57572: PPUSH
57573: PPUSH
// if not mc_bases then
57574: LD_EXP 57
57578: NOT
57579: IFFALSE 57583
// exit ;
57581: GO 58010
// for i = 1 to mc_bases do
57583: LD_ADDR_VAR 0 2
57587: PUSH
57588: DOUBLE
57589: LD_INT 1
57591: DEC
57592: ST_TO_ADDR
57593: LD_EXP 57
57597: PUSH
57598: FOR_TO
57599: IFFALSE 58008
// begin tmp := mc_build_upgrade [ i ] ;
57601: LD_ADDR_VAR 0 4
57605: PUSH
57606: LD_EXP 89
57610: PUSH
57611: LD_VAR 0 2
57615: ARRAY
57616: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
57617: LD_ADDR_VAR 0 6
57621: PUSH
57622: LD_EXP 90
57626: PUSH
57627: LD_VAR 0 2
57631: ARRAY
57632: PPUSH
57633: LD_INT 2
57635: PUSH
57636: LD_INT 30
57638: PUSH
57639: LD_INT 6
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 30
57648: PUSH
57649: LD_INT 7
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: LIST
57660: PPUSH
57661: CALL_OW 72
57665: ST_TO_ADDR
// if not tmp and not lab then
57666: LD_VAR 0 4
57670: NOT
57671: PUSH
57672: LD_VAR 0 6
57676: NOT
57677: AND
57678: IFFALSE 57682
// continue ;
57680: GO 57598
// if tmp then
57682: LD_VAR 0 4
57686: IFFALSE 57806
// for j in tmp do
57688: LD_ADDR_VAR 0 3
57692: PUSH
57693: LD_VAR 0 4
57697: PUSH
57698: FOR_IN
57699: IFFALSE 57804
// begin if UpgradeCost ( j ) then
57701: LD_VAR 0 3
57705: PPUSH
57706: CALL 25853 0 1
57710: IFFALSE 57802
// begin ComUpgrade ( j ) ;
57712: LD_VAR 0 3
57716: PPUSH
57717: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
57721: LD_ADDR_EXP 89
57725: PUSH
57726: LD_EXP 89
57730: PPUSH
57731: LD_VAR 0 2
57735: PPUSH
57736: LD_EXP 89
57740: PUSH
57741: LD_VAR 0 2
57745: ARRAY
57746: PUSH
57747: LD_VAR 0 3
57751: DIFF
57752: PPUSH
57753: CALL_OW 1
57757: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
57758: LD_ADDR_EXP 64
57762: PUSH
57763: LD_EXP 64
57767: PPUSH
57768: LD_VAR 0 2
57772: PUSH
57773: LD_EXP 64
57777: PUSH
57778: LD_VAR 0 2
57782: ARRAY
57783: PUSH
57784: LD_INT 1
57786: PLUS
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PPUSH
57792: LD_VAR 0 3
57796: PPUSH
57797: CALL 20124 0 3
57801: ST_TO_ADDR
// end ; end ;
57802: GO 57698
57804: POP
57805: POP
// if not lab or not mc_lab_upgrade [ i ] then
57806: LD_VAR 0 6
57810: NOT
57811: PUSH
57812: LD_EXP 91
57816: PUSH
57817: LD_VAR 0 2
57821: ARRAY
57822: NOT
57823: OR
57824: IFFALSE 57828
// continue ;
57826: GO 57598
// for j in lab do
57828: LD_ADDR_VAR 0 3
57832: PUSH
57833: LD_VAR 0 6
57837: PUSH
57838: FOR_IN
57839: IFFALSE 58004
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
57841: LD_VAR 0 3
57845: PPUSH
57846: CALL_OW 266
57850: PUSH
57851: LD_INT 6
57853: PUSH
57854: LD_INT 7
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: IN
57861: PUSH
57862: LD_VAR 0 3
57866: PPUSH
57867: CALL_OW 461
57871: PUSH
57872: LD_INT 1
57874: NONEQUAL
57875: AND
57876: IFFALSE 58002
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
57878: LD_VAR 0 3
57882: PPUSH
57883: LD_EXP 91
57887: PUSH
57888: LD_VAR 0 2
57892: ARRAY
57893: PUSH
57894: LD_INT 1
57896: ARRAY
57897: PPUSH
57898: CALL 26058 0 2
57902: IFFALSE 58002
// begin ComCancel ( j ) ;
57904: LD_VAR 0 3
57908: PPUSH
57909: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
57913: LD_VAR 0 3
57917: PPUSH
57918: LD_EXP 91
57922: PUSH
57923: LD_VAR 0 2
57927: ARRAY
57928: PUSH
57929: LD_INT 1
57931: ARRAY
57932: PPUSH
57933: CALL_OW 207
// if not j in mc_construct_list [ i ] then
57937: LD_VAR 0 3
57941: PUSH
57942: LD_EXP 64
57946: PUSH
57947: LD_VAR 0 2
57951: ARRAY
57952: IN
57953: NOT
57954: IFFALSE 58000
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
57956: LD_ADDR_EXP 64
57960: PUSH
57961: LD_EXP 64
57965: PPUSH
57966: LD_VAR 0 2
57970: PUSH
57971: LD_EXP 64
57975: PUSH
57976: LD_VAR 0 2
57980: ARRAY
57981: PUSH
57982: LD_INT 1
57984: PLUS
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PPUSH
57990: LD_VAR 0 3
57994: PPUSH
57995: CALL 20124 0 3
57999: ST_TO_ADDR
// break ;
58000: GO 58004
// end ; end ; end ;
58002: GO 57838
58004: POP
58005: POP
// end ;
58006: GO 57598
58008: POP
58009: POP
// end ;
58010: LD_VAR 0 1
58014: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
58015: LD_INT 0
58017: PPUSH
58018: PPUSH
58019: PPUSH
58020: PPUSH
58021: PPUSH
58022: PPUSH
58023: PPUSH
// if not mc_bases then
58024: LD_EXP 57
58028: NOT
58029: IFFALSE 58033
// exit ;
58031: GO 58362
// for i = 1 to mc_bases do
58033: LD_ADDR_VAR 0 2
58037: PUSH
58038: DOUBLE
58039: LD_INT 1
58041: DEC
58042: ST_TO_ADDR
58043: LD_EXP 57
58047: PUSH
58048: FOR_TO
58049: IFFALSE 58360
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
58051: LD_EXP 65
58055: PUSH
58056: LD_VAR 0 2
58060: ARRAY
58061: NOT
58062: PUSH
58063: LD_EXP 57
58067: PUSH
58068: LD_VAR 0 2
58072: ARRAY
58073: PPUSH
58074: LD_INT 30
58076: PUSH
58077: LD_INT 3
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PPUSH
58084: CALL_OW 72
58088: NOT
58089: OR
58090: IFFALSE 58094
// continue ;
58092: GO 58048
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
58094: LD_EXP 65
58098: PUSH
58099: LD_VAR 0 2
58103: ARRAY
58104: PUSH
58105: LD_INT 1
58107: ARRAY
58108: PPUSH
58109: CALL_OW 269
58113: IFFALSE 58179
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
58115: LD_ADDR_VAR 0 4
58119: PUSH
58120: LD_EXP 65
58124: PUSH
58125: LD_VAR 0 2
58129: ARRAY
58130: PPUSH
58131: LD_INT 1
58133: PPUSH
58134: CALL_OW 3
58138: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
58139: LD_ADDR_EXP 65
58143: PUSH
58144: LD_EXP 65
58148: PPUSH
58149: LD_VAR 0 2
58153: PPUSH
58154: LD_VAR 0 4
58158: PPUSH
58159: CALL_OW 1
58163: ST_TO_ADDR
// if not mc_turret_list [ i ] then
58164: LD_EXP 65
58168: PUSH
58169: LD_VAR 0 2
58173: ARRAY
58174: NOT
58175: IFFALSE 58179
// continue ;
58177: GO 58048
// end ; busy := false ;
58179: LD_ADDR_VAR 0 6
58183: PUSH
58184: LD_INT 0
58186: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
58187: LD_ADDR_VAR 0 4
58191: PUSH
58192: LD_EXP 57
58196: PUSH
58197: LD_VAR 0 2
58201: ARRAY
58202: PPUSH
58203: LD_INT 30
58205: PUSH
58206: LD_INT 3
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PPUSH
58213: CALL_OW 72
58217: ST_TO_ADDR
// for j in tmp do
58218: LD_ADDR_VAR 0 3
58222: PUSH
58223: LD_VAR 0 4
58227: PUSH
58228: FOR_IN
58229: IFFALSE 58257
// if not BuildingStatus ( j ) = bs_idle then
58231: LD_VAR 0 3
58235: PPUSH
58236: CALL_OW 461
58240: PUSH
58241: LD_INT 2
58243: EQUAL
58244: NOT
58245: IFFALSE 58255
// busy := true ;
58247: LD_ADDR_VAR 0 6
58251: PUSH
58252: LD_INT 1
58254: ST_TO_ADDR
58255: GO 58228
58257: POP
58258: POP
// if busy then
58259: LD_VAR 0 6
58263: IFFALSE 58267
// continue ;
58265: GO 58048
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
58267: LD_ADDR_VAR 0 7
58271: PUSH
58272: LD_EXP 65
58276: PUSH
58277: LD_VAR 0 2
58281: ARRAY
58282: PUSH
58283: LD_INT 1
58285: ARRAY
58286: PPUSH
58287: CALL 24417 0 1
58291: ST_TO_ADDR
// if not weapon then
58292: LD_VAR 0 7
58296: NOT
58297: IFFALSE 58301
// continue ;
58299: GO 58048
// if mc_allowed_tower_weapons [ i ] then
58301: LD_EXP 95
58305: PUSH
58306: LD_VAR 0 2
58310: ARRAY
58311: IFFALSE 58334
// if not weapon in mc_allowed_tower_weapons [ i ] then
58313: LD_VAR 0 7
58317: PUSH
58318: LD_EXP 95
58322: PUSH
58323: LD_VAR 0 2
58327: ARRAY
58328: IN
58329: NOT
58330: IFFALSE 58334
// continue ;
58332: GO 58048
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
58334: LD_EXP 65
58338: PUSH
58339: LD_VAR 0 2
58343: ARRAY
58344: PUSH
58345: LD_INT 1
58347: ARRAY
58348: PPUSH
58349: LD_VAR 0 7
58353: PPUSH
58354: CALL_OW 148
// end ;
58358: GO 58048
58360: POP
58361: POP
// end ;
58362: LD_VAR 0 1
58366: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
58367: LD_INT 0
58369: PPUSH
58370: PPUSH
58371: PPUSH
58372: PPUSH
58373: PPUSH
58374: PPUSH
// if not mc_bases then
58375: LD_EXP 57
58379: NOT
58380: IFFALSE 58384
// exit ;
58382: GO 59369
// for i = 1 to mc_bases do
58384: LD_ADDR_VAR 0 2
58388: PUSH
58389: DOUBLE
58390: LD_INT 1
58392: DEC
58393: ST_TO_ADDR
58394: LD_EXP 57
58398: PUSH
58399: FOR_TO
58400: IFFALSE 59367
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
58402: LD_EXP 70
58406: PUSH
58407: LD_VAR 0 2
58411: ARRAY
58412: NOT
58413: PUSH
58414: LD_EXP 70
58418: PUSH
58419: LD_VAR 0 2
58423: ARRAY
58424: PUSH
58425: LD_EXP 71
58429: PUSH
58430: LD_VAR 0 2
58434: ARRAY
58435: EQUAL
58436: OR
58437: IFFALSE 58441
// continue ;
58439: GO 58399
// if mc_miners [ i ] then
58441: LD_EXP 71
58445: PUSH
58446: LD_VAR 0 2
58450: ARRAY
58451: IFFALSE 59054
// begin k := 1 ;
58453: LD_ADDR_VAR 0 4
58457: PUSH
58458: LD_INT 1
58460: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
58461: LD_ADDR_VAR 0 3
58465: PUSH
58466: DOUBLE
58467: LD_EXP 71
58471: PUSH
58472: LD_VAR 0 2
58476: ARRAY
58477: INC
58478: ST_TO_ADDR
58479: LD_INT 1
58481: PUSH
58482: FOR_DOWNTO
58483: IFFALSE 59052
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
58485: LD_EXP 71
58489: PUSH
58490: LD_VAR 0 2
58494: ARRAY
58495: PUSH
58496: LD_VAR 0 3
58500: ARRAY
58501: PPUSH
58502: CALL_OW 301
58506: IFFALSE 58569
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
58508: LD_ADDR_VAR 0 5
58512: PUSH
58513: LD_EXP 71
58517: PUSH
58518: LD_VAR 0 2
58522: ARRAY
58523: PUSH
58524: LD_EXP 71
58528: PUSH
58529: LD_VAR 0 2
58533: ARRAY
58534: PUSH
58535: LD_VAR 0 3
58539: ARRAY
58540: DIFF
58541: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
58542: LD_ADDR_EXP 71
58546: PUSH
58547: LD_EXP 71
58551: PPUSH
58552: LD_VAR 0 2
58556: PPUSH
58557: LD_VAR 0 5
58561: PPUSH
58562: CALL_OW 1
58566: ST_TO_ADDR
// continue ;
58567: GO 58482
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
58569: LD_EXP 71
58573: PUSH
58574: LD_VAR 0 2
58578: ARRAY
58579: PUSH
58580: LD_VAR 0 3
58584: ARRAY
58585: PPUSH
58586: CALL 19625 0 1
58590: PUSH
58591: LD_EXP 71
58595: PUSH
58596: LD_VAR 0 2
58600: ARRAY
58601: PUSH
58602: LD_VAR 0 3
58606: ARRAY
58607: PPUSH
58608: CALL_OW 255
58612: PPUSH
58613: LD_EXP 70
58617: PUSH
58618: LD_VAR 0 2
58622: ARRAY
58623: PUSH
58624: LD_VAR 0 4
58628: ARRAY
58629: PUSH
58630: LD_INT 1
58632: ARRAY
58633: PPUSH
58634: LD_EXP 70
58638: PUSH
58639: LD_VAR 0 2
58643: ARRAY
58644: PUSH
58645: LD_VAR 0 4
58649: ARRAY
58650: PUSH
58651: LD_INT 2
58653: ARRAY
58654: PPUSH
58655: LD_INT 15
58657: PPUSH
58658: CALL 20618 0 4
58662: PUSH
58663: LD_INT 4
58665: ARRAY
58666: PUSH
58667: LD_EXP 71
58671: PUSH
58672: LD_VAR 0 2
58676: ARRAY
58677: PUSH
58678: LD_VAR 0 3
58682: ARRAY
58683: PPUSH
58684: LD_INT 10
58686: PPUSH
58687: CALL 22315 0 2
58691: PUSH
58692: LD_INT 4
58694: ARRAY
58695: OR
58696: AND
58697: IFFALSE 58720
// ComStop ( mc_miners [ i ] [ j ] ) ;
58699: LD_EXP 71
58703: PUSH
58704: LD_VAR 0 2
58708: ARRAY
58709: PUSH
58710: LD_VAR 0 3
58714: ARRAY
58715: PPUSH
58716: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
58720: LD_EXP 71
58724: PUSH
58725: LD_VAR 0 2
58729: ARRAY
58730: PUSH
58731: LD_VAR 0 3
58735: ARRAY
58736: PPUSH
58737: CALL_OW 257
58741: PUSH
58742: LD_INT 1
58744: EQUAL
58745: PUSH
58746: LD_EXP 71
58750: PUSH
58751: LD_VAR 0 2
58755: ARRAY
58756: PUSH
58757: LD_VAR 0 3
58761: ARRAY
58762: PPUSH
58763: CALL_OW 459
58767: NOT
58768: AND
58769: PUSH
58770: LD_EXP 71
58774: PUSH
58775: LD_VAR 0 2
58779: ARRAY
58780: PUSH
58781: LD_VAR 0 3
58785: ARRAY
58786: PPUSH
58787: CALL_OW 255
58791: PPUSH
58792: LD_EXP 70
58796: PUSH
58797: LD_VAR 0 2
58801: ARRAY
58802: PUSH
58803: LD_VAR 0 4
58807: ARRAY
58808: PUSH
58809: LD_INT 1
58811: ARRAY
58812: PPUSH
58813: LD_EXP 70
58817: PUSH
58818: LD_VAR 0 2
58822: ARRAY
58823: PUSH
58824: LD_VAR 0 4
58828: ARRAY
58829: PUSH
58830: LD_INT 2
58832: ARRAY
58833: PPUSH
58834: LD_INT 15
58836: PPUSH
58837: CALL 20618 0 4
58841: PUSH
58842: LD_INT 4
58844: ARRAY
58845: PUSH
58846: LD_INT 0
58848: EQUAL
58849: AND
58850: PUSH
58851: LD_EXP 71
58855: PUSH
58856: LD_VAR 0 2
58860: ARRAY
58861: PUSH
58862: LD_VAR 0 3
58866: ARRAY
58867: PPUSH
58868: CALL_OW 314
58872: NOT
58873: AND
58874: IFFALSE 59050
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
58876: LD_EXP 71
58880: PUSH
58881: LD_VAR 0 2
58885: ARRAY
58886: PUSH
58887: LD_VAR 0 3
58891: ARRAY
58892: PPUSH
58893: CALL_OW 310
58897: IFFALSE 58920
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
58899: LD_EXP 71
58903: PUSH
58904: LD_VAR 0 2
58908: ARRAY
58909: PUSH
58910: LD_VAR 0 3
58914: ARRAY
58915: PPUSH
58916: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
58920: LD_EXP 71
58924: PUSH
58925: LD_VAR 0 2
58929: ARRAY
58930: PUSH
58931: LD_VAR 0 3
58935: ARRAY
58936: PPUSH
58937: CALL_OW 314
58941: NOT
58942: IFFALSE 59010
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
58944: LD_EXP 71
58948: PUSH
58949: LD_VAR 0 2
58953: ARRAY
58954: PUSH
58955: LD_VAR 0 3
58959: ARRAY
58960: PPUSH
58961: LD_EXP 70
58965: PUSH
58966: LD_VAR 0 2
58970: ARRAY
58971: PUSH
58972: LD_VAR 0 4
58976: ARRAY
58977: PUSH
58978: LD_INT 1
58980: ARRAY
58981: PPUSH
58982: LD_EXP 70
58986: PUSH
58987: LD_VAR 0 2
58991: ARRAY
58992: PUSH
58993: LD_VAR 0 4
58997: ARRAY
58998: PUSH
58999: LD_INT 2
59001: ARRAY
59002: PPUSH
59003: LD_INT 0
59005: PPUSH
59006: CALL_OW 193
// k := k + 1 ;
59010: LD_ADDR_VAR 0 4
59014: PUSH
59015: LD_VAR 0 4
59019: PUSH
59020: LD_INT 1
59022: PLUS
59023: ST_TO_ADDR
// if k > mc_mines [ i ] then
59024: LD_VAR 0 4
59028: PUSH
59029: LD_EXP 70
59033: PUSH
59034: LD_VAR 0 2
59038: ARRAY
59039: GREATER
59040: IFFALSE 59050
// k := 1 ;
59042: LD_ADDR_VAR 0 4
59046: PUSH
59047: LD_INT 1
59049: ST_TO_ADDR
// end ; end ;
59050: GO 58482
59052: POP
59053: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
59054: LD_ADDR_VAR 0 5
59058: PUSH
59059: LD_EXP 57
59063: PUSH
59064: LD_VAR 0 2
59068: ARRAY
59069: PPUSH
59070: LD_INT 2
59072: PUSH
59073: LD_INT 30
59075: PUSH
59076: LD_INT 4
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 30
59085: PUSH
59086: LD_INT 5
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 30
59095: PUSH
59096: LD_INT 32
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: PPUSH
59109: CALL_OW 72
59113: ST_TO_ADDR
// if not tmp then
59114: LD_VAR 0 5
59118: NOT
59119: IFFALSE 59123
// continue ;
59121: GO 58399
// list := [ ] ;
59123: LD_ADDR_VAR 0 6
59127: PUSH
59128: EMPTY
59129: ST_TO_ADDR
// for j in tmp do
59130: LD_ADDR_VAR 0 3
59134: PUSH
59135: LD_VAR 0 5
59139: PUSH
59140: FOR_IN
59141: IFFALSE 59210
// begin for k in UnitsInside ( j ) do
59143: LD_ADDR_VAR 0 4
59147: PUSH
59148: LD_VAR 0 3
59152: PPUSH
59153: CALL_OW 313
59157: PUSH
59158: FOR_IN
59159: IFFALSE 59206
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
59161: LD_VAR 0 4
59165: PPUSH
59166: CALL_OW 257
59170: PUSH
59171: LD_INT 1
59173: EQUAL
59174: PUSH
59175: LD_VAR 0 4
59179: PPUSH
59180: CALL_OW 459
59184: NOT
59185: AND
59186: IFFALSE 59204
// list := list ^ k ;
59188: LD_ADDR_VAR 0 6
59192: PUSH
59193: LD_VAR 0 6
59197: PUSH
59198: LD_VAR 0 4
59202: ADD
59203: ST_TO_ADDR
59204: GO 59158
59206: POP
59207: POP
// end ;
59208: GO 59140
59210: POP
59211: POP
// list := list diff mc_miners [ i ] ;
59212: LD_ADDR_VAR 0 6
59216: PUSH
59217: LD_VAR 0 6
59221: PUSH
59222: LD_EXP 71
59226: PUSH
59227: LD_VAR 0 2
59231: ARRAY
59232: DIFF
59233: ST_TO_ADDR
// if not list then
59234: LD_VAR 0 6
59238: NOT
59239: IFFALSE 59243
// continue ;
59241: GO 58399
// k := mc_mines [ i ] - mc_miners [ i ] ;
59243: LD_ADDR_VAR 0 4
59247: PUSH
59248: LD_EXP 70
59252: PUSH
59253: LD_VAR 0 2
59257: ARRAY
59258: PUSH
59259: LD_EXP 71
59263: PUSH
59264: LD_VAR 0 2
59268: ARRAY
59269: MINUS
59270: ST_TO_ADDR
// if k > list then
59271: LD_VAR 0 4
59275: PUSH
59276: LD_VAR 0 6
59280: GREATER
59281: IFFALSE 59293
// k := list ;
59283: LD_ADDR_VAR 0 4
59287: PUSH
59288: LD_VAR 0 6
59292: ST_TO_ADDR
// for j = 1 to k do
59293: LD_ADDR_VAR 0 3
59297: PUSH
59298: DOUBLE
59299: LD_INT 1
59301: DEC
59302: ST_TO_ADDR
59303: LD_VAR 0 4
59307: PUSH
59308: FOR_TO
59309: IFFALSE 59363
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
59311: LD_ADDR_EXP 71
59315: PUSH
59316: LD_EXP 71
59320: PPUSH
59321: LD_VAR 0 2
59325: PUSH
59326: LD_EXP 71
59330: PUSH
59331: LD_VAR 0 2
59335: ARRAY
59336: PUSH
59337: LD_INT 1
59339: PLUS
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PPUSH
59345: LD_VAR 0 6
59349: PUSH
59350: LD_VAR 0 3
59354: ARRAY
59355: PPUSH
59356: CALL 20124 0 3
59360: ST_TO_ADDR
59361: GO 59308
59363: POP
59364: POP
// end ;
59365: GO 58399
59367: POP
59368: POP
// end ;
59369: LD_VAR 0 1
59373: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
59374: LD_INT 0
59376: PPUSH
59377: PPUSH
59378: PPUSH
59379: PPUSH
59380: PPUSH
59381: PPUSH
59382: PPUSH
59383: PPUSH
59384: PPUSH
// if not mc_bases then
59385: LD_EXP 57
59389: NOT
59390: IFFALSE 59394
// exit ;
59392: GO 60873
// for i = 1 to mc_bases do
59394: LD_ADDR_VAR 0 2
59398: PUSH
59399: DOUBLE
59400: LD_INT 1
59402: DEC
59403: ST_TO_ADDR
59404: LD_EXP 57
59408: PUSH
59409: FOR_TO
59410: IFFALSE 60871
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
59412: LD_EXP 57
59416: PUSH
59417: LD_VAR 0 2
59421: ARRAY
59422: NOT
59423: PUSH
59424: LD_EXP 64
59428: PUSH
59429: LD_VAR 0 2
59433: ARRAY
59434: OR
59435: IFFALSE 59439
// continue ;
59437: GO 59409
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
59439: LD_EXP 73
59443: PUSH
59444: LD_VAR 0 2
59448: ARRAY
59449: NOT
59450: PUSH
59451: LD_EXP 74
59455: PUSH
59456: LD_VAR 0 2
59460: ARRAY
59461: AND
59462: IFFALSE 59500
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
59464: LD_ADDR_EXP 74
59468: PUSH
59469: LD_EXP 74
59473: PPUSH
59474: LD_VAR 0 2
59478: PPUSH
59479: EMPTY
59480: PPUSH
59481: CALL_OW 1
59485: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
59486: LD_VAR 0 2
59490: PPUSH
59491: LD_INT 107
59493: PPUSH
59494: CALL 54992 0 2
// continue ;
59498: GO 59409
// end ; target := [ ] ;
59500: LD_ADDR_VAR 0 5
59504: PUSH
59505: EMPTY
59506: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
59507: LD_ADDR_VAR 0 3
59511: PUSH
59512: DOUBLE
59513: LD_EXP 73
59517: PUSH
59518: LD_VAR 0 2
59522: ARRAY
59523: INC
59524: ST_TO_ADDR
59525: LD_INT 1
59527: PUSH
59528: FOR_DOWNTO
59529: IFFALSE 59789
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
59531: LD_EXP 73
59535: PUSH
59536: LD_VAR 0 2
59540: ARRAY
59541: PUSH
59542: LD_VAR 0 3
59546: ARRAY
59547: PUSH
59548: LD_INT 2
59550: ARRAY
59551: PPUSH
59552: LD_EXP 73
59556: PUSH
59557: LD_VAR 0 2
59561: ARRAY
59562: PUSH
59563: LD_VAR 0 3
59567: ARRAY
59568: PUSH
59569: LD_INT 3
59571: ARRAY
59572: PPUSH
59573: CALL_OW 488
59577: PUSH
59578: LD_EXP 73
59582: PUSH
59583: LD_VAR 0 2
59587: ARRAY
59588: PUSH
59589: LD_VAR 0 3
59593: ARRAY
59594: PUSH
59595: LD_INT 2
59597: ARRAY
59598: PPUSH
59599: LD_EXP 73
59603: PUSH
59604: LD_VAR 0 2
59608: ARRAY
59609: PUSH
59610: LD_VAR 0 3
59614: ARRAY
59615: PUSH
59616: LD_INT 3
59618: ARRAY
59619: PPUSH
59620: CALL_OW 284
59624: PUSH
59625: LD_INT 0
59627: EQUAL
59628: AND
59629: IFFALSE 59684
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
59631: LD_ADDR_VAR 0 4
59635: PUSH
59636: LD_EXP 73
59640: PUSH
59641: LD_VAR 0 2
59645: ARRAY
59646: PPUSH
59647: LD_VAR 0 3
59651: PPUSH
59652: CALL_OW 3
59656: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
59657: LD_ADDR_EXP 73
59661: PUSH
59662: LD_EXP 73
59666: PPUSH
59667: LD_VAR 0 2
59671: PPUSH
59672: LD_VAR 0 4
59676: PPUSH
59677: CALL_OW 1
59681: ST_TO_ADDR
// continue ;
59682: GO 59528
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
59684: LD_EXP 57
59688: PUSH
59689: LD_VAR 0 2
59693: ARRAY
59694: PUSH
59695: LD_INT 1
59697: ARRAY
59698: PPUSH
59699: CALL_OW 255
59703: PPUSH
59704: LD_EXP 73
59708: PUSH
59709: LD_VAR 0 2
59713: ARRAY
59714: PUSH
59715: LD_VAR 0 3
59719: ARRAY
59720: PUSH
59721: LD_INT 2
59723: ARRAY
59724: PPUSH
59725: LD_EXP 73
59729: PUSH
59730: LD_VAR 0 2
59734: ARRAY
59735: PUSH
59736: LD_VAR 0 3
59740: ARRAY
59741: PUSH
59742: LD_INT 3
59744: ARRAY
59745: PPUSH
59746: LD_INT 20
59748: PPUSH
59749: CALL 20618 0 4
59753: PUSH
59754: LD_INT 4
59756: ARRAY
59757: PUSH
59758: LD_INT 0
59760: EQUAL
59761: IFFALSE 59787
// begin target := mc_crates [ i ] [ j ] ;
59763: LD_ADDR_VAR 0 5
59767: PUSH
59768: LD_EXP 73
59772: PUSH
59773: LD_VAR 0 2
59777: ARRAY
59778: PUSH
59779: LD_VAR 0 3
59783: ARRAY
59784: ST_TO_ADDR
// break ;
59785: GO 59789
// end ; end ;
59787: GO 59528
59789: POP
59790: POP
// if not target then
59791: LD_VAR 0 5
59795: NOT
59796: IFFALSE 59800
// continue ;
59798: GO 59409
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
59800: LD_ADDR_VAR 0 6
59804: PUSH
59805: LD_EXP 76
59809: PUSH
59810: LD_VAR 0 2
59814: ARRAY
59815: PPUSH
59816: LD_INT 2
59818: PUSH
59819: LD_INT 3
59821: PUSH
59822: LD_INT 58
59824: PUSH
59825: EMPTY
59826: LIST
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 61
59834: PUSH
59835: EMPTY
59836: LIST
59837: PUSH
59838: LD_INT 33
59840: PUSH
59841: LD_INT 5
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 33
59850: PUSH
59851: LD_INT 3
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 2
59867: PUSH
59868: LD_INT 34
59870: PUSH
59871: LD_INT 32
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 34
59880: PUSH
59881: LD_INT 51
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 34
59890: PUSH
59891: LD_INT 12
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PPUSH
59908: CALL_OW 72
59912: ST_TO_ADDR
// if not cargo then
59913: LD_VAR 0 6
59917: NOT
59918: IFFALSE 60406
// begin if mc_crates_collector [ i ] < 5 then
59920: LD_EXP 74
59924: PUSH
59925: LD_VAR 0 2
59929: ARRAY
59930: PUSH
59931: LD_INT 5
59933: LESS
59934: IFFALSE 60220
// begin if mc_ape [ i ] then
59936: LD_EXP 86
59940: PUSH
59941: LD_VAR 0 2
59945: ARRAY
59946: IFFALSE 59993
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
59948: LD_ADDR_VAR 0 4
59952: PUSH
59953: LD_EXP 86
59957: PUSH
59958: LD_VAR 0 2
59962: ARRAY
59963: PPUSH
59964: LD_INT 25
59966: PUSH
59967: LD_INT 16
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 24
59976: PUSH
59977: LD_INT 750
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PPUSH
59988: CALL_OW 72
59992: ST_TO_ADDR
// if not tmp then
59993: LD_VAR 0 4
59997: NOT
59998: IFFALSE 60047
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) else
60000: LD_ADDR_VAR 0 4
60004: PUSH
60005: LD_EXP 57
60009: PUSH
60010: LD_VAR 0 2
60014: ARRAY
60015: PPUSH
60016: LD_INT 25
60018: PUSH
60019: LD_INT 2
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 24
60028: PUSH
60029: LD_INT 750
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PPUSH
60040: CALL_OW 72
60044: ST_TO_ADDR
60045: GO 60108
// if tmp < 5 then
60047: LD_VAR 0 4
60051: PUSH
60052: LD_INT 5
60054: LESS
60055: IFFALSE 60108
// tmp := tmp union UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
60057: LD_ADDR_VAR 0 4
60061: PUSH
60062: LD_VAR 0 4
60066: PUSH
60067: LD_EXP 57
60071: PUSH
60072: LD_VAR 0 2
60076: ARRAY
60077: PPUSH
60078: LD_INT 25
60080: PUSH
60081: LD_INT 2
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 24
60090: PUSH
60091: LD_INT 750
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PPUSH
60102: CALL_OW 72
60106: UNION
60107: ST_TO_ADDR
// if not tmp then
60108: LD_VAR 0 4
60112: NOT
60113: IFFALSE 60117
// continue ;
60115: GO 59409
// for j in tmp do
60117: LD_ADDR_VAR 0 3
60121: PUSH
60122: LD_VAR 0 4
60126: PUSH
60127: FOR_IN
60128: IFFALSE 60218
// if not GetTag ( j ) then
60130: LD_VAR 0 3
60134: PPUSH
60135: CALL_OW 110
60139: NOT
60140: IFFALSE 60216
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
60142: LD_ADDR_EXP 74
60146: PUSH
60147: LD_EXP 74
60151: PPUSH
60152: LD_VAR 0 2
60156: PUSH
60157: LD_EXP 74
60161: PUSH
60162: LD_VAR 0 2
60166: ARRAY
60167: PUSH
60168: LD_INT 1
60170: PLUS
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PPUSH
60176: LD_VAR 0 3
60180: PPUSH
60181: CALL 20124 0 3
60185: ST_TO_ADDR
// SetTag ( j , 107 ) ;
60186: LD_VAR 0 3
60190: PPUSH
60191: LD_INT 107
60193: PPUSH
60194: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
60198: LD_EXP 74
60202: PUSH
60203: LD_VAR 0 2
60207: ARRAY
60208: PUSH
60209: LD_INT 5
60211: GREATEREQUAL
60212: IFFALSE 60216
// break ;
60214: GO 60218
// end ;
60216: GO 60127
60218: POP
60219: POP
// end ; if mc_crates_collector [ i ] and target then
60220: LD_EXP 74
60224: PUSH
60225: LD_VAR 0 2
60229: ARRAY
60230: PUSH
60231: LD_VAR 0 5
60235: AND
60236: IFFALSE 60404
// begin if mc_crates_collector [ i ] < target [ 1 ] then
60238: LD_EXP 74
60242: PUSH
60243: LD_VAR 0 2
60247: ARRAY
60248: PUSH
60249: LD_VAR 0 5
60253: PUSH
60254: LD_INT 1
60256: ARRAY
60257: LESS
60258: IFFALSE 60278
// tmp := mc_crates_collector [ i ] else
60260: LD_ADDR_VAR 0 4
60264: PUSH
60265: LD_EXP 74
60269: PUSH
60270: LD_VAR 0 2
60274: ARRAY
60275: ST_TO_ADDR
60276: GO 60292
// tmp := target [ 1 ] ;
60278: LD_ADDR_VAR 0 4
60282: PUSH
60283: LD_VAR 0 5
60287: PUSH
60288: LD_INT 1
60290: ARRAY
60291: ST_TO_ADDR
// for j = 1 to tmp do
60292: LD_ADDR_VAR 0 3
60296: PUSH
60297: DOUBLE
60298: LD_INT 1
60300: DEC
60301: ST_TO_ADDR
60302: LD_VAR 0 4
60306: PUSH
60307: FOR_TO
60308: IFFALSE 60402
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
60310: LD_EXP 74
60314: PUSH
60315: LD_VAR 0 2
60319: ARRAY
60320: PUSH
60321: LD_VAR 0 3
60325: ARRAY
60326: PPUSH
60327: CALL_OW 310
60331: IFFALSE 60354
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
60333: LD_EXP 74
60337: PUSH
60338: LD_VAR 0 2
60342: ARRAY
60343: PUSH
60344: LD_VAR 0 3
60348: ARRAY
60349: PPUSH
60350: CALL_OW 122
// wait ( 3 ) ;
60354: LD_INT 3
60356: PPUSH
60357: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
60361: LD_EXP 74
60365: PUSH
60366: LD_VAR 0 2
60370: ARRAY
60371: PUSH
60372: LD_VAR 0 3
60376: ARRAY
60377: PPUSH
60378: LD_VAR 0 5
60382: PUSH
60383: LD_INT 2
60385: ARRAY
60386: PPUSH
60387: LD_VAR 0 5
60391: PUSH
60392: LD_INT 3
60394: ARRAY
60395: PPUSH
60396: CALL_OW 117
// end ;
60400: GO 60307
60402: POP
60403: POP
// end ; end else
60404: GO 60869
// begin for j in cargo do
60406: LD_ADDR_VAR 0 3
60410: PUSH
60411: LD_VAR 0 6
60415: PUSH
60416: FOR_IN
60417: IFFALSE 60867
// begin if GetTag ( j ) <> 0 then
60419: LD_VAR 0 3
60423: PPUSH
60424: CALL_OW 110
60428: PUSH
60429: LD_INT 0
60431: NONEQUAL
60432: IFFALSE 60436
// continue ;
60434: GO 60416
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
60436: LD_VAR 0 3
60440: PPUSH
60441: CALL_OW 262
60445: PUSH
60446: LD_INT 2
60448: EQUAL
60449: PUSH
60450: LD_VAR 0 3
60454: PPUSH
60455: CALL_OW 261
60459: PUSH
60460: LD_INT 15
60462: LESS
60463: AND
60464: IFFALSE 60468
// continue ;
60466: GO 60416
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
60468: LD_VAR 0 3
60472: PPUSH
60473: CALL_OW 262
60477: PUSH
60478: LD_INT 1
60480: EQUAL
60481: PUSH
60482: LD_VAR 0 3
60486: PPUSH
60487: CALL_OW 261
60491: PUSH
60492: LD_INT 10
60494: LESS
60495: AND
60496: IFFALSE 60806
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
60498: LD_ADDR_VAR 0 7
60502: PUSH
60503: LD_EXP 57
60507: PUSH
60508: LD_VAR 0 2
60512: ARRAY
60513: PPUSH
60514: LD_INT 2
60516: PUSH
60517: LD_INT 30
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 30
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: LIST
60541: PPUSH
60542: CALL_OW 72
60546: ST_TO_ADDR
// if not depot then
60547: LD_VAR 0 7
60551: NOT
60552: IFFALSE 60556
// continue ;
60554: GO 60416
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
60556: LD_VAR 0 3
60560: PPUSH
60561: LD_VAR 0 7
60565: PPUSH
60566: LD_VAR 0 3
60570: PPUSH
60571: CALL_OW 74
60575: PPUSH
60576: CALL_OW 296
60580: PUSH
60581: LD_INT 6
60583: LESS
60584: IFFALSE 60600
// SetFuel ( j , 100 ) else
60586: LD_VAR 0 3
60590: PPUSH
60591: LD_INT 100
60593: PPUSH
60594: CALL_OW 240
60598: GO 60806
// if GetFuel ( j ) = 0 then
60600: LD_VAR 0 3
60604: PPUSH
60605: CALL_OW 261
60609: PUSH
60610: LD_INT 0
60612: EQUAL
60613: IFFALSE 60806
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
60615: LD_ADDR_EXP 76
60619: PUSH
60620: LD_EXP 76
60624: PPUSH
60625: LD_VAR 0 2
60629: PPUSH
60630: LD_EXP 76
60634: PUSH
60635: LD_VAR 0 2
60639: ARRAY
60640: PUSH
60641: LD_VAR 0 3
60645: DIFF
60646: PPUSH
60647: CALL_OW 1
60651: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
60652: LD_VAR 0 3
60656: PPUSH
60657: CALL_OW 263
60661: PUSH
60662: LD_INT 1
60664: EQUAL
60665: IFFALSE 60681
// ComExitVehicle ( IsInUnit ( j ) ) ;
60667: LD_VAR 0 3
60671: PPUSH
60672: CALL_OW 310
60676: PPUSH
60677: CALL_OW 121
// if GetControl ( j ) = control_remote then
60681: LD_VAR 0 3
60685: PPUSH
60686: CALL_OW 263
60690: PUSH
60691: LD_INT 2
60693: EQUAL
60694: IFFALSE 60705
// ComUnlink ( j ) ;
60696: LD_VAR 0 3
60700: PPUSH
60701: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
60705: LD_ADDR_VAR 0 8
60709: PUSH
60710: LD_VAR 0 2
60714: PPUSH
60715: LD_INT 3
60717: PPUSH
60718: CALL 68502 0 2
60722: ST_TO_ADDR
// if fac then
60723: LD_VAR 0 8
60727: IFFALSE 60804
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
60729: LD_ADDR_VAR 0 9
60733: PUSH
60734: LD_VAR 0 8
60738: PPUSH
60739: LD_VAR 0 3
60743: PPUSH
60744: CALL_OW 265
60748: PPUSH
60749: LD_VAR 0 3
60753: PPUSH
60754: CALL_OW 262
60758: PPUSH
60759: LD_VAR 0 3
60763: PPUSH
60764: CALL_OW 263
60768: PPUSH
60769: LD_VAR 0 3
60773: PPUSH
60774: CALL_OW 264
60778: PPUSH
60779: CALL 17289 0 5
60783: ST_TO_ADDR
// if components then
60784: LD_VAR 0 9
60788: IFFALSE 60804
// MC_InsertProduceList ( i , components ) ;
60790: LD_VAR 0 2
60794: PPUSH
60795: LD_VAR 0 9
60799: PPUSH
60800: CALL 68069 0 2
// end ; continue ;
60804: GO 60416
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
60806: LD_VAR 0 3
60810: PPUSH
60811: LD_INT 1
60813: PPUSH
60814: CALL_OW 289
60818: PUSH
60819: LD_INT 100
60821: LESS
60822: PUSH
60823: LD_VAR 0 3
60827: PPUSH
60828: CALL_OW 314
60832: NOT
60833: AND
60834: IFFALSE 60863
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
60836: LD_VAR 0 3
60840: PPUSH
60841: LD_VAR 0 5
60845: PUSH
60846: LD_INT 2
60848: ARRAY
60849: PPUSH
60850: LD_VAR 0 5
60854: PUSH
60855: LD_INT 3
60857: ARRAY
60858: PPUSH
60859: CALL_OW 117
// break ;
60863: GO 60867
// end ;
60865: GO 60416
60867: POP
60868: POP
// end ; end ;
60869: GO 59409
60871: POP
60872: POP
// end ;
60873: LD_VAR 0 1
60877: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
60878: LD_INT 0
60880: PPUSH
60881: PPUSH
60882: PPUSH
60883: PPUSH
// if not mc_bases then
60884: LD_EXP 57
60888: NOT
60889: IFFALSE 60893
// exit ;
60891: GO 61054
// for i = 1 to mc_bases do
60893: LD_ADDR_VAR 0 2
60897: PUSH
60898: DOUBLE
60899: LD_INT 1
60901: DEC
60902: ST_TO_ADDR
60903: LD_EXP 57
60907: PUSH
60908: FOR_TO
60909: IFFALSE 61052
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
60911: LD_ADDR_VAR 0 4
60915: PUSH
60916: LD_EXP 76
60920: PUSH
60921: LD_VAR 0 2
60925: ARRAY
60926: PUSH
60927: LD_EXP 79
60931: PUSH
60932: LD_VAR 0 2
60936: ARRAY
60937: ADD
60938: PPUSH
60939: LD_INT 33
60941: PUSH
60942: LD_INT 2
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PPUSH
60949: CALL_OW 72
60953: ST_TO_ADDR
// if tmp then
60954: LD_VAR 0 4
60958: IFFALSE 61050
// for j in tmp do
60960: LD_ADDR_VAR 0 3
60964: PUSH
60965: LD_VAR 0 4
60969: PUSH
60970: FOR_IN
60971: IFFALSE 61048
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
60973: LD_VAR 0 3
60977: PPUSH
60978: CALL_OW 312
60982: NOT
60983: PUSH
60984: LD_VAR 0 3
60988: PPUSH
60989: CALL_OW 256
60993: PUSH
60994: LD_INT 250
60996: GREATEREQUAL
60997: AND
60998: IFFALSE 61011
// Connect ( j ) else
61000: LD_VAR 0 3
61004: PPUSH
61005: CALL 22612 0 1
61009: GO 61046
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
61011: LD_VAR 0 3
61015: PPUSH
61016: CALL_OW 256
61020: PUSH
61021: LD_INT 250
61023: LESS
61024: PUSH
61025: LD_VAR 0 3
61029: PPUSH
61030: CALL_OW 312
61034: AND
61035: IFFALSE 61046
// ComUnlink ( j ) ;
61037: LD_VAR 0 3
61041: PPUSH
61042: CALL_OW 136
61046: GO 60970
61048: POP
61049: POP
// end ;
61050: GO 60908
61052: POP
61053: POP
// end ;
61054: LD_VAR 0 1
61058: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
61059: LD_INT 0
61061: PPUSH
61062: PPUSH
61063: PPUSH
61064: PPUSH
61065: PPUSH
// if not mc_bases then
61066: LD_EXP 57
61070: NOT
61071: IFFALSE 61075
// exit ;
61073: GO 61535
// for i = 1 to mc_bases do
61075: LD_ADDR_VAR 0 2
61079: PUSH
61080: DOUBLE
61081: LD_INT 1
61083: DEC
61084: ST_TO_ADDR
61085: LD_EXP 57
61089: PUSH
61090: FOR_TO
61091: IFFALSE 61533
// begin if not mc_produce [ i ] then
61093: LD_EXP 78
61097: PUSH
61098: LD_VAR 0 2
61102: ARRAY
61103: NOT
61104: IFFALSE 61108
// continue ;
61106: GO 61090
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
61108: LD_ADDR_VAR 0 5
61112: PUSH
61113: LD_EXP 57
61117: PUSH
61118: LD_VAR 0 2
61122: ARRAY
61123: PPUSH
61124: LD_INT 30
61126: PUSH
61127: LD_INT 3
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PPUSH
61134: CALL_OW 72
61138: ST_TO_ADDR
// if not fac then
61139: LD_VAR 0 5
61143: NOT
61144: IFFALSE 61148
// continue ;
61146: GO 61090
// for j in fac do
61148: LD_ADDR_VAR 0 3
61152: PUSH
61153: LD_VAR 0 5
61157: PUSH
61158: FOR_IN
61159: IFFALSE 61529
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
61161: LD_VAR 0 3
61165: PPUSH
61166: CALL_OW 461
61170: PUSH
61171: LD_INT 2
61173: NONEQUAL
61174: PUSH
61175: LD_VAR 0 3
61179: PPUSH
61180: LD_INT 15
61182: PPUSH
61183: CALL 22315 0 2
61187: PUSH
61188: LD_INT 4
61190: ARRAY
61191: OR
61192: PUSH
61193: LD_VAR 0 3
61197: PPUSH
61198: CALL_OW 313
61202: PUSH
61203: LD_INT 0
61205: EQUAL
61206: OR
61207: IFFALSE 61211
// continue ;
61209: GO 61158
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
61211: LD_VAR 0 3
61215: PPUSH
61216: LD_EXP 78
61220: PUSH
61221: LD_VAR 0 2
61225: ARRAY
61226: PUSH
61227: LD_INT 1
61229: ARRAY
61230: PUSH
61231: LD_INT 1
61233: ARRAY
61234: PPUSH
61235: LD_EXP 78
61239: PUSH
61240: LD_VAR 0 2
61244: ARRAY
61245: PUSH
61246: LD_INT 1
61248: ARRAY
61249: PUSH
61250: LD_INT 2
61252: ARRAY
61253: PPUSH
61254: LD_EXP 78
61258: PUSH
61259: LD_VAR 0 2
61263: ARRAY
61264: PUSH
61265: LD_INT 1
61267: ARRAY
61268: PUSH
61269: LD_INT 3
61271: ARRAY
61272: PPUSH
61273: LD_EXP 78
61277: PUSH
61278: LD_VAR 0 2
61282: ARRAY
61283: PUSH
61284: LD_INT 1
61286: ARRAY
61287: PUSH
61288: LD_INT 4
61290: ARRAY
61291: PPUSH
61292: CALL_OW 448
61296: PUSH
61297: LD_VAR 0 3
61301: PPUSH
61302: LD_EXP 78
61306: PUSH
61307: LD_VAR 0 2
61311: ARRAY
61312: PUSH
61313: LD_INT 1
61315: ARRAY
61316: PUSH
61317: LD_INT 1
61319: ARRAY
61320: PUSH
61321: LD_EXP 78
61325: PUSH
61326: LD_VAR 0 2
61330: ARRAY
61331: PUSH
61332: LD_INT 1
61334: ARRAY
61335: PUSH
61336: LD_INT 2
61338: ARRAY
61339: PUSH
61340: LD_EXP 78
61344: PUSH
61345: LD_VAR 0 2
61349: ARRAY
61350: PUSH
61351: LD_INT 1
61353: ARRAY
61354: PUSH
61355: LD_INT 3
61357: ARRAY
61358: PUSH
61359: LD_EXP 78
61363: PUSH
61364: LD_VAR 0 2
61368: ARRAY
61369: PUSH
61370: LD_INT 1
61372: ARRAY
61373: PUSH
61374: LD_INT 4
61376: ARRAY
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: PPUSH
61384: CALL 25706 0 2
61388: AND
61389: IFFALSE 61527
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
61391: LD_VAR 0 3
61395: PPUSH
61396: LD_EXP 78
61400: PUSH
61401: LD_VAR 0 2
61405: ARRAY
61406: PUSH
61407: LD_INT 1
61409: ARRAY
61410: PUSH
61411: LD_INT 1
61413: ARRAY
61414: PPUSH
61415: LD_EXP 78
61419: PUSH
61420: LD_VAR 0 2
61424: ARRAY
61425: PUSH
61426: LD_INT 1
61428: ARRAY
61429: PUSH
61430: LD_INT 2
61432: ARRAY
61433: PPUSH
61434: LD_EXP 78
61438: PUSH
61439: LD_VAR 0 2
61443: ARRAY
61444: PUSH
61445: LD_INT 1
61447: ARRAY
61448: PUSH
61449: LD_INT 3
61451: ARRAY
61452: PPUSH
61453: LD_EXP 78
61457: PUSH
61458: LD_VAR 0 2
61462: ARRAY
61463: PUSH
61464: LD_INT 1
61466: ARRAY
61467: PUSH
61468: LD_INT 4
61470: ARRAY
61471: PPUSH
61472: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
61476: LD_ADDR_VAR 0 4
61480: PUSH
61481: LD_EXP 78
61485: PUSH
61486: LD_VAR 0 2
61490: ARRAY
61491: PPUSH
61492: LD_INT 1
61494: PPUSH
61495: CALL_OW 3
61499: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
61500: LD_ADDR_EXP 78
61504: PUSH
61505: LD_EXP 78
61509: PPUSH
61510: LD_VAR 0 2
61514: PPUSH
61515: LD_VAR 0 4
61519: PPUSH
61520: CALL_OW 1
61524: ST_TO_ADDR
// break ;
61525: GO 61529
// end ; end ;
61527: GO 61158
61529: POP
61530: POP
// end ;
61531: GO 61090
61533: POP
61534: POP
// end ;
61535: LD_VAR 0 1
61539: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
61540: LD_INT 0
61542: PPUSH
61543: PPUSH
61544: PPUSH
// if not mc_bases then
61545: LD_EXP 57
61549: NOT
61550: IFFALSE 61554
// exit ;
61552: GO 61643
// for i = 1 to mc_bases do
61554: LD_ADDR_VAR 0 2
61558: PUSH
61559: DOUBLE
61560: LD_INT 1
61562: DEC
61563: ST_TO_ADDR
61564: LD_EXP 57
61568: PUSH
61569: FOR_TO
61570: IFFALSE 61641
// begin if mc_attack [ i ] then
61572: LD_EXP 77
61576: PUSH
61577: LD_VAR 0 2
61581: ARRAY
61582: IFFALSE 61639
// begin tmp := mc_attack [ i ] [ 1 ] ;
61584: LD_ADDR_VAR 0 3
61588: PUSH
61589: LD_EXP 77
61593: PUSH
61594: LD_VAR 0 2
61598: ARRAY
61599: PUSH
61600: LD_INT 1
61602: ARRAY
61603: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
61604: LD_ADDR_EXP 77
61608: PUSH
61609: LD_EXP 77
61613: PPUSH
61614: LD_VAR 0 2
61618: PPUSH
61619: EMPTY
61620: PPUSH
61621: CALL_OW 1
61625: ST_TO_ADDR
// Attack ( tmp ) ;
61626: LD_VAR 0 3
61630: PPUSH
61631: CALL 47638 0 1
// exit ;
61635: POP
61636: POP
61637: GO 61643
// end ; end ;
61639: GO 61569
61641: POP
61642: POP
// end ;
61643: LD_VAR 0 1
61647: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
61648: LD_INT 0
61650: PPUSH
61651: PPUSH
61652: PPUSH
61653: PPUSH
61654: PPUSH
61655: PPUSH
61656: PPUSH
// if not mc_bases then
61657: LD_EXP 57
61661: NOT
61662: IFFALSE 61666
// exit ;
61664: GO 62041
// for i = 1 to mc_bases do
61666: LD_ADDR_VAR 0 2
61670: PUSH
61671: DOUBLE
61672: LD_INT 1
61674: DEC
61675: ST_TO_ADDR
61676: LD_EXP 57
61680: PUSH
61681: FOR_TO
61682: IFFALSE 62039
// begin if not mc_bases [ i ] then
61684: LD_EXP 57
61688: PUSH
61689: LD_VAR 0 2
61693: ARRAY
61694: NOT
61695: IFFALSE 61699
// continue ;
61697: GO 61681
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
61699: LD_ADDR_VAR 0 7
61703: PUSH
61704: LD_EXP 57
61708: PUSH
61709: LD_VAR 0 2
61713: ARRAY
61714: PUSH
61715: LD_INT 1
61717: ARRAY
61718: PPUSH
61719: CALL 16629 0 1
61723: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
61724: LD_ADDR_EXP 80
61728: PUSH
61729: LD_EXP 80
61733: PPUSH
61734: LD_VAR 0 2
61738: PPUSH
61739: LD_EXP 57
61743: PUSH
61744: LD_VAR 0 2
61748: ARRAY
61749: PUSH
61750: LD_INT 1
61752: ARRAY
61753: PPUSH
61754: CALL_OW 255
61758: PPUSH
61759: LD_EXP 82
61763: PUSH
61764: LD_VAR 0 2
61768: ARRAY
61769: PPUSH
61770: CALL 15087 0 2
61774: PPUSH
61775: CALL_OW 1
61779: ST_TO_ADDR
// if not mc_scan [ i ] then
61780: LD_EXP 80
61784: PUSH
61785: LD_VAR 0 2
61789: ARRAY
61790: NOT
61791: IFFALSE 61946
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
61793: LD_ADDR_VAR 0 4
61797: PUSH
61798: LD_EXP 57
61802: PUSH
61803: LD_VAR 0 2
61807: ARRAY
61808: PPUSH
61809: LD_INT 2
61811: PUSH
61812: LD_INT 25
61814: PUSH
61815: LD_INT 5
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 25
61824: PUSH
61825: LD_INT 8
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 25
61834: PUSH
61835: LD_INT 9
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: PPUSH
61848: CALL_OW 72
61852: ST_TO_ADDR
// if not tmp then
61853: LD_VAR 0 4
61857: NOT
61858: IFFALSE 61862
// continue ;
61860: GO 61681
// for j in tmp do
61862: LD_ADDR_VAR 0 3
61866: PUSH
61867: LD_VAR 0 4
61871: PUSH
61872: FOR_IN
61873: IFFALSE 61944
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
61875: LD_VAR 0 3
61879: PPUSH
61880: CALL_OW 310
61884: PPUSH
61885: CALL_OW 266
61889: PUSH
61890: LD_INT 5
61892: EQUAL
61893: PUSH
61894: LD_VAR 0 3
61898: PPUSH
61899: CALL_OW 257
61903: PUSH
61904: LD_INT 1
61906: EQUAL
61907: AND
61908: PUSH
61909: LD_VAR 0 3
61913: PPUSH
61914: CALL_OW 459
61918: NOT
61919: AND
61920: PUSH
61921: LD_VAR 0 7
61925: AND
61926: IFFALSE 61942
// ComChangeProfession ( j , class ) ;
61928: LD_VAR 0 3
61932: PPUSH
61933: LD_VAR 0 7
61937: PPUSH
61938: CALL_OW 123
61942: GO 61872
61944: POP
61945: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
61946: LD_EXP 80
61950: PUSH
61951: LD_VAR 0 2
61955: ARRAY
61956: PUSH
61957: LD_EXP 79
61961: PUSH
61962: LD_VAR 0 2
61966: ARRAY
61967: AND
61968: IFFALSE 62037
// begin tmp := mc_defender [ i ] ;
61970: LD_ADDR_VAR 0 4
61974: PUSH
61975: LD_EXP 79
61979: PUSH
61980: LD_VAR 0 2
61984: ARRAY
61985: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
61986: LD_ADDR_EXP 79
61990: PUSH
61991: LD_EXP 79
61995: PPUSH
61996: LD_VAR 0 2
62000: PPUSH
62001: EMPTY
62002: PPUSH
62003: CALL_OW 1
62007: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
62008: LD_VAR 0 2
62012: PPUSH
62013: LD_VAR 0 4
62017: PPUSH
62018: LD_EXP 80
62022: PUSH
62023: LD_VAR 0 2
62027: ARRAY
62028: PPUSH
62029: CALL 15122 0 3
// exit ;
62033: POP
62034: POP
62035: GO 62041
// end ; end ;
62037: GO 61681
62039: POP
62040: POP
// end ;
62041: LD_VAR 0 1
62045: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
62046: LD_INT 0
62048: PPUSH
62049: PPUSH
62050: PPUSH
62051: PPUSH
62052: PPUSH
62053: PPUSH
62054: PPUSH
62055: PPUSH
62056: PPUSH
// if not mc_bases then
62057: LD_EXP 57
62061: NOT
62062: IFFALSE 62066
// exit ;
62064: GO 63010
// for i = 1 to mc_bases do
62066: LD_ADDR_VAR 0 2
62070: PUSH
62071: DOUBLE
62072: LD_INT 1
62074: DEC
62075: ST_TO_ADDR
62076: LD_EXP 57
62080: PUSH
62081: FOR_TO
62082: IFFALSE 63008
// begin tmp := mc_lab [ i ] ;
62084: LD_ADDR_VAR 0 6
62088: PUSH
62089: LD_EXP 90
62093: PUSH
62094: LD_VAR 0 2
62098: ARRAY
62099: ST_TO_ADDR
// if not tmp then
62100: LD_VAR 0 6
62104: NOT
62105: IFFALSE 62109
// continue ;
62107: GO 62081
// for j in tmp do
62109: LD_ADDR_VAR 0 3
62113: PUSH
62114: LD_VAR 0 6
62118: PUSH
62119: FOR_IN
62120: IFFALSE 63004
// begin side := GetSide ( j ) ;
62122: LD_ADDR_VAR 0 4
62126: PUSH
62127: LD_VAR 0 3
62131: PPUSH
62132: CALL_OW 255
62136: ST_TO_ADDR
// if not mc_tech [ side ] then
62137: LD_EXP 84
62141: PUSH
62142: LD_VAR 0 4
62146: ARRAY
62147: NOT
62148: IFFALSE 62152
// continue ;
62150: GO 62119
// if BuildingStatus ( j ) = bs_idle then
62152: LD_VAR 0 3
62156: PPUSH
62157: CALL_OW 461
62161: PUSH
62162: LD_INT 2
62164: EQUAL
62165: IFFALSE 62238
// for t in mc_tech [ side ] do
62167: LD_ADDR_VAR 0 5
62171: PUSH
62172: LD_EXP 84
62176: PUSH
62177: LD_VAR 0 4
62181: ARRAY
62182: PUSH
62183: FOR_IN
62184: IFFALSE 62236
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
62186: LD_VAR 0 3
62190: PPUSH
62191: LD_VAR 0 5
62195: PPUSH
62196: CALL_OW 430
62200: PUSH
62201: LD_VAR 0 4
62205: PPUSH
62206: LD_VAR 0 5
62210: PPUSH
62211: CALL 14195 0 2
62215: AND
62216: IFFALSE 62234
// begin ComResearch ( j , t ) ;
62218: LD_VAR 0 3
62222: PPUSH
62223: LD_VAR 0 5
62227: PPUSH
62228: CALL_OW 124
// break ;
62232: GO 62236
// end ;
62234: GO 62183
62236: POP
62237: POP
// if BuildingStatus ( j ) = bs_need_ape then
62238: LD_VAR 0 3
62242: PPUSH
62243: CALL_OW 461
62247: PUSH
62248: LD_INT 10
62250: EQUAL
62251: IFFALSE 62839
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
62253: LD_EXP 86
62257: PUSH
62258: LD_VAR 0 2
62262: ARRAY
62263: NOT
62264: PUSH
62265: LD_EXP 87
62269: PUSH
62270: LD_VAR 0 2
62274: ARRAY
62275: NOT
62276: AND
62277: PUSH
62278: LD_EXP 84
62282: PUSH
62283: LD_VAR 0 4
62287: ARRAY
62288: PUSH
62289: LD_INT 1
62291: GREATER
62292: AND
62293: IFFALSE 62424
// begin ComCancel ( j ) ;
62295: LD_VAR 0 3
62299: PPUSH
62300: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
62304: LD_ADDR_EXP 84
62308: PUSH
62309: LD_EXP 84
62313: PPUSH
62314: LD_VAR 0 4
62318: PPUSH
62319: LD_EXP 84
62323: PUSH
62324: LD_VAR 0 4
62328: ARRAY
62329: PPUSH
62330: LD_EXP 84
62334: PUSH
62335: LD_VAR 0 4
62339: ARRAY
62340: PUSH
62341: LD_INT 1
62343: MINUS
62344: PPUSH
62345: LD_EXP 84
62349: PUSH
62350: LD_VAR 0 4
62354: ARRAY
62355: PPUSH
62356: LD_INT 0
62358: PPUSH
62359: CALL 19107 0 4
62363: PPUSH
62364: CALL_OW 1
62368: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
62369: LD_ADDR_EXP 84
62373: PUSH
62374: LD_EXP 84
62378: PPUSH
62379: LD_VAR 0 4
62383: PPUSH
62384: LD_EXP 84
62388: PUSH
62389: LD_VAR 0 4
62393: ARRAY
62394: PPUSH
62395: LD_EXP 84
62399: PUSH
62400: LD_VAR 0 4
62404: ARRAY
62405: PPUSH
62406: LD_INT 1
62408: PPUSH
62409: LD_INT 0
62411: PPUSH
62412: CALL 19107 0 4
62416: PPUSH
62417: CALL_OW 1
62421: ST_TO_ADDR
// continue ;
62422: GO 62119
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
62424: LD_EXP 86
62428: PUSH
62429: LD_VAR 0 2
62433: ARRAY
62434: PUSH
62435: LD_EXP 87
62439: PUSH
62440: LD_VAR 0 2
62444: ARRAY
62445: NOT
62446: AND
62447: IFFALSE 62574
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
62449: LD_ADDR_EXP 87
62453: PUSH
62454: LD_EXP 87
62458: PPUSH
62459: LD_VAR 0 2
62463: PUSH
62464: LD_EXP 87
62468: PUSH
62469: LD_VAR 0 2
62473: ARRAY
62474: PUSH
62475: LD_INT 1
62477: PLUS
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PPUSH
62483: LD_EXP 86
62487: PUSH
62488: LD_VAR 0 2
62492: ARRAY
62493: PUSH
62494: LD_INT 1
62496: ARRAY
62497: PPUSH
62498: CALL 20124 0 3
62502: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
62503: LD_EXP 86
62507: PUSH
62508: LD_VAR 0 2
62512: ARRAY
62513: PUSH
62514: LD_INT 1
62516: ARRAY
62517: PPUSH
62518: LD_INT 112
62520: PPUSH
62521: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
62525: LD_ADDR_VAR 0 9
62529: PUSH
62530: LD_EXP 86
62534: PUSH
62535: LD_VAR 0 2
62539: ARRAY
62540: PPUSH
62541: LD_INT 1
62543: PPUSH
62544: CALL_OW 3
62548: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
62549: LD_ADDR_EXP 86
62553: PUSH
62554: LD_EXP 86
62558: PPUSH
62559: LD_VAR 0 2
62563: PPUSH
62564: LD_VAR 0 9
62568: PPUSH
62569: CALL_OW 1
62573: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
62574: LD_EXP 86
62578: PUSH
62579: LD_VAR 0 2
62583: ARRAY
62584: PUSH
62585: LD_EXP 87
62589: PUSH
62590: LD_VAR 0 2
62594: ARRAY
62595: AND
62596: PUSH
62597: LD_EXP 87
62601: PUSH
62602: LD_VAR 0 2
62606: ARRAY
62607: PUSH
62608: LD_INT 1
62610: ARRAY
62611: PPUSH
62612: CALL_OW 310
62616: NOT
62617: AND
62618: PUSH
62619: LD_VAR 0 3
62623: PPUSH
62624: CALL_OW 313
62628: PUSH
62629: LD_INT 6
62631: EQUAL
62632: AND
62633: IFFALSE 62689
// begin tmp2 := UnitsInside ( j ) ;
62635: LD_ADDR_VAR 0 9
62639: PUSH
62640: LD_VAR 0 3
62644: PPUSH
62645: CALL_OW 313
62649: ST_TO_ADDR
// if tmp2 = 6 then
62650: LD_VAR 0 9
62654: PUSH
62655: LD_INT 6
62657: EQUAL
62658: IFFALSE 62689
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
62660: LD_VAR 0 9
62664: PUSH
62665: LD_INT 1
62667: ARRAY
62668: PPUSH
62669: LD_INT 112
62671: PPUSH
62672: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
62676: LD_VAR 0 9
62680: PUSH
62681: LD_INT 1
62683: ARRAY
62684: PPUSH
62685: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
62689: LD_EXP 87
62693: PUSH
62694: LD_VAR 0 2
62698: ARRAY
62699: PUSH
62700: LD_EXP 87
62704: PUSH
62705: LD_VAR 0 2
62709: ARRAY
62710: PUSH
62711: LD_INT 1
62713: ARRAY
62714: PPUSH
62715: CALL_OW 314
62719: NOT
62720: AND
62721: PUSH
62722: LD_EXP 87
62726: PUSH
62727: LD_VAR 0 2
62731: ARRAY
62732: PUSH
62733: LD_INT 1
62735: ARRAY
62736: PPUSH
62737: CALL_OW 310
62741: NOT
62742: AND
62743: IFFALSE 62769
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
62745: LD_EXP 87
62749: PUSH
62750: LD_VAR 0 2
62754: ARRAY
62755: PUSH
62756: LD_INT 1
62758: ARRAY
62759: PPUSH
62760: LD_VAR 0 3
62764: PPUSH
62765: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
62769: LD_EXP 87
62773: PUSH
62774: LD_VAR 0 2
62778: ARRAY
62779: PUSH
62780: LD_INT 1
62782: ARRAY
62783: PPUSH
62784: CALL_OW 310
62788: PUSH
62789: LD_EXP 87
62793: PUSH
62794: LD_VAR 0 2
62798: ARRAY
62799: PUSH
62800: LD_INT 1
62802: ARRAY
62803: PPUSH
62804: CALL_OW 310
62808: PPUSH
62809: CALL_OW 461
62813: PUSH
62814: LD_INT 3
62816: NONEQUAL
62817: AND
62818: IFFALSE 62839
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
62820: LD_EXP 87
62824: PUSH
62825: LD_VAR 0 2
62829: ARRAY
62830: PUSH
62831: LD_INT 1
62833: ARRAY
62834: PPUSH
62835: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
62839: LD_VAR 0 3
62843: PPUSH
62844: CALL_OW 461
62848: PUSH
62849: LD_INT 6
62851: EQUAL
62852: PUSH
62853: LD_VAR 0 6
62857: PUSH
62858: LD_INT 1
62860: GREATER
62861: AND
62862: IFFALSE 63002
// begin sci := [ ] ;
62864: LD_ADDR_VAR 0 8
62868: PUSH
62869: EMPTY
62870: ST_TO_ADDR
// for x in tmp diff j do
62871: LD_ADDR_VAR 0 7
62875: PUSH
62876: LD_VAR 0 6
62880: PUSH
62881: LD_VAR 0 3
62885: DIFF
62886: PUSH
62887: FOR_IN
62888: IFFALSE 62928
// begin if BuildingStatus ( x ) = bs_idle then
62890: LD_VAR 0 7
62894: PPUSH
62895: CALL_OW 461
62899: PUSH
62900: LD_INT 2
62902: EQUAL
62903: IFFALSE 62926
// sci := sci ^ UnitsInside ( x ) ;
62905: LD_ADDR_VAR 0 8
62909: PUSH
62910: LD_VAR 0 8
62914: PUSH
62915: LD_VAR 0 7
62919: PPUSH
62920: CALL_OW 313
62924: ADD
62925: ST_TO_ADDR
// end ;
62926: GO 62887
62928: POP
62929: POP
// if not sci then
62930: LD_VAR 0 8
62934: NOT
62935: IFFALSE 62939
// continue ;
62937: GO 62119
// for x in sci do
62939: LD_ADDR_VAR 0 7
62943: PUSH
62944: LD_VAR 0 8
62948: PUSH
62949: FOR_IN
62950: IFFALSE 63000
// if IsInUnit ( x ) and not HasTask ( x ) then
62952: LD_VAR 0 7
62956: PPUSH
62957: CALL_OW 310
62961: PUSH
62962: LD_VAR 0 7
62966: PPUSH
62967: CALL_OW 314
62971: NOT
62972: AND
62973: IFFALSE 62998
// begin ComExitBuilding ( x ) ;
62975: LD_VAR 0 7
62979: PPUSH
62980: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
62984: LD_VAR 0 7
62988: PPUSH
62989: LD_VAR 0 3
62993: PPUSH
62994: CALL_OW 180
// end ;
62998: GO 62949
63000: POP
63001: POP
// end ; end ;
63002: GO 62119
63004: POP
63005: POP
// end ;
63006: GO 62081
63008: POP
63009: POP
// end ;
63010: LD_VAR 0 1
63014: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
63015: LD_INT 0
63017: PPUSH
63018: PPUSH
63019: PPUSH
63020: PPUSH
63021: PPUSH
63022: PPUSH
63023: PPUSH
63024: PPUSH
// if not mc_bases or not mc_parking then
63025: LD_EXP 57
63029: NOT
63030: PUSH
63031: LD_EXP 81
63035: NOT
63036: OR
63037: IFFALSE 63041
// exit ;
63039: GO 63699
// for i = 1 to mc_bases do
63041: LD_ADDR_VAR 0 2
63045: PUSH
63046: DOUBLE
63047: LD_INT 1
63049: DEC
63050: ST_TO_ADDR
63051: LD_EXP 57
63055: PUSH
63056: FOR_TO
63057: IFFALSE 63697
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
63059: LD_EXP 57
63063: PUSH
63064: LD_VAR 0 2
63068: ARRAY
63069: NOT
63070: PUSH
63071: LD_EXP 81
63075: PUSH
63076: LD_VAR 0 2
63080: ARRAY
63081: NOT
63082: OR
63083: IFFALSE 63087
// continue ;
63085: GO 63056
// if mc_scan [ i ] then
63087: LD_EXP 80
63091: PUSH
63092: LD_VAR 0 2
63096: ARRAY
63097: IFFALSE 63123
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
63099: LD_ADDR_EXP 69
63103: PUSH
63104: LD_EXP 69
63108: PPUSH
63109: LD_VAR 0 2
63113: PPUSH
63114: EMPTY
63115: PPUSH
63116: CALL_OW 1
63120: ST_TO_ADDR
// continue ;
63121: GO 63056
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
63123: LD_ADDR_VAR 0 5
63127: PUSH
63128: LD_EXP 57
63132: PUSH
63133: LD_VAR 0 2
63137: ARRAY
63138: PUSH
63139: LD_INT 1
63141: ARRAY
63142: PPUSH
63143: CALL_OW 255
63147: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
63148: LD_ADDR_VAR 0 6
63152: PUSH
63153: LD_EXP 57
63157: PUSH
63158: LD_VAR 0 2
63162: ARRAY
63163: PPUSH
63164: LD_INT 30
63166: PUSH
63167: LD_INT 3
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PPUSH
63174: CALL_OW 72
63178: ST_TO_ADDR
// if not fac then
63179: LD_VAR 0 6
63183: NOT
63184: IFFALSE 63235
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63186: LD_ADDR_VAR 0 6
63190: PUSH
63191: LD_EXP 57
63195: PUSH
63196: LD_VAR 0 2
63200: ARRAY
63201: PPUSH
63202: LD_INT 2
63204: PUSH
63205: LD_INT 30
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 30
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: LIST
63229: PPUSH
63230: CALL_OW 72
63234: ST_TO_ADDR
// if not fac then
63235: LD_VAR 0 6
63239: NOT
63240: IFFALSE 63244
// continue ;
63242: GO 63056
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
63244: LD_ADDR_VAR 0 7
63248: PUSH
63249: LD_EXP 81
63253: PUSH
63254: LD_VAR 0 2
63258: ARRAY
63259: PPUSH
63260: LD_INT 22
63262: PUSH
63263: LD_VAR 0 5
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 21
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 3
63284: PUSH
63285: LD_INT 24
63287: PUSH
63288: LD_INT 1000
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: LIST
63303: PPUSH
63304: CALL_OW 70
63308: PUSH
63309: LD_INT 22
63311: PUSH
63312: LD_VAR 0 5
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 91
63323: PUSH
63324: LD_VAR 0 6
63328: PUSH
63329: LD_INT 1
63331: ARRAY
63332: PUSH
63333: LD_INT 25
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 21
63343: PUSH
63344: LD_INT 2
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 3
63353: PUSH
63354: LD_INT 24
63356: PUSH
63357: LD_INT 1000
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: PPUSH
63374: CALL_OW 69
63378: UNION
63379: ST_TO_ADDR
// if not vehs then
63380: LD_VAR 0 7
63384: NOT
63385: IFFALSE 63411
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
63387: LD_ADDR_EXP 69
63391: PUSH
63392: LD_EXP 69
63396: PPUSH
63397: LD_VAR 0 2
63401: PPUSH
63402: EMPTY
63403: PPUSH
63404: CALL_OW 1
63408: ST_TO_ADDR
// continue ;
63409: GO 63056
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
63411: LD_ADDR_VAR 0 8
63415: PUSH
63416: LD_EXP 57
63420: PUSH
63421: LD_VAR 0 2
63425: ARRAY
63426: PPUSH
63427: LD_INT 30
63429: PUSH
63430: LD_INT 3
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PPUSH
63437: CALL_OW 72
63441: ST_TO_ADDR
// if tmp then
63442: LD_VAR 0 8
63446: IFFALSE 63549
// begin for j in tmp do
63448: LD_ADDR_VAR 0 3
63452: PUSH
63453: LD_VAR 0 8
63457: PUSH
63458: FOR_IN
63459: IFFALSE 63547
// for k in UnitsInside ( j ) do
63461: LD_ADDR_VAR 0 4
63465: PUSH
63466: LD_VAR 0 3
63470: PPUSH
63471: CALL_OW 313
63475: PUSH
63476: FOR_IN
63477: IFFALSE 63543
// if k then
63479: LD_VAR 0 4
63483: IFFALSE 63541
// if not k in mc_repair_vehicle [ i ] then
63485: LD_VAR 0 4
63489: PUSH
63490: LD_EXP 69
63494: PUSH
63495: LD_VAR 0 2
63499: ARRAY
63500: IN
63501: NOT
63502: IFFALSE 63541
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
63504: LD_ADDR_EXP 69
63508: PUSH
63509: LD_EXP 69
63513: PPUSH
63514: LD_VAR 0 2
63518: PPUSH
63519: LD_EXP 69
63523: PUSH
63524: LD_VAR 0 2
63528: ARRAY
63529: PUSH
63530: LD_VAR 0 4
63534: UNION
63535: PPUSH
63536: CALL_OW 1
63540: ST_TO_ADDR
63541: GO 63476
63543: POP
63544: POP
63545: GO 63458
63547: POP
63548: POP
// end ; if not mc_repair_vehicle [ i ] then
63549: LD_EXP 69
63553: PUSH
63554: LD_VAR 0 2
63558: ARRAY
63559: NOT
63560: IFFALSE 63564
// continue ;
63562: GO 63056
// for j in mc_repair_vehicle [ i ] do
63564: LD_ADDR_VAR 0 3
63568: PUSH
63569: LD_EXP 69
63573: PUSH
63574: LD_VAR 0 2
63578: ARRAY
63579: PUSH
63580: FOR_IN
63581: IFFALSE 63693
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
63583: LD_VAR 0 3
63587: PPUSH
63588: CALL_OW 311
63592: NOT
63593: PUSH
63594: LD_VAR 0 3
63598: PUSH
63599: LD_EXP 60
63603: PUSH
63604: LD_VAR 0 2
63608: ARRAY
63609: PUSH
63610: LD_INT 1
63612: ARRAY
63613: IN
63614: NOT
63615: AND
63616: PUSH
63617: LD_VAR 0 3
63621: PUSH
63622: LD_EXP 60
63626: PUSH
63627: LD_VAR 0 2
63631: ARRAY
63632: PUSH
63633: LD_INT 2
63635: ARRAY
63636: IN
63637: NOT
63638: AND
63639: IFFALSE 63691
// begin if IsInUnit ( j ) then
63641: LD_VAR 0 3
63645: PPUSH
63646: CALL_OW 310
63650: IFFALSE 63661
// ComExitBuilding ( j ) ;
63652: LD_VAR 0 3
63656: PPUSH
63657: CALL_OW 122
// if not HasTask ( j ) then
63661: LD_VAR 0 3
63665: PPUSH
63666: CALL_OW 314
63670: NOT
63671: IFFALSE 63691
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
63673: LD_VAR 0 3
63677: PPUSH
63678: LD_VAR 0 7
63682: PUSH
63683: LD_INT 1
63685: ARRAY
63686: PPUSH
63687: CALL_OW 189
// end ; end ;
63691: GO 63580
63693: POP
63694: POP
// end ;
63695: GO 63056
63697: POP
63698: POP
// end ;
63699: LD_VAR 0 1
63703: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
63704: LD_INT 0
63706: PPUSH
63707: PPUSH
63708: PPUSH
63709: PPUSH
63710: PPUSH
63711: PPUSH
63712: PPUSH
63713: PPUSH
63714: PPUSH
63715: PPUSH
63716: PPUSH
// if not mc_bases then
63717: LD_EXP 57
63721: NOT
63722: IFFALSE 63726
// exit ;
63724: GO 64462
// for i = 1 to mc_bases do
63726: LD_ADDR_VAR 0 2
63730: PUSH
63731: DOUBLE
63732: LD_INT 1
63734: DEC
63735: ST_TO_ADDR
63736: LD_EXP 57
63740: PUSH
63741: FOR_TO
63742: IFFALSE 64460
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
63744: LD_EXP 85
63748: PUSH
63749: LD_VAR 0 2
63753: ARRAY
63754: NOT
63755: PUSH
63756: LD_EXP 60
63760: PUSH
63761: LD_VAR 0 2
63765: ARRAY
63766: PUSH
63767: LD_INT 1
63769: ARRAY
63770: OR
63771: PUSH
63772: LD_EXP 60
63776: PUSH
63777: LD_VAR 0 2
63781: ARRAY
63782: PUSH
63783: LD_INT 2
63785: ARRAY
63786: OR
63787: PUSH
63788: LD_EXP 83
63792: PUSH
63793: LD_VAR 0 2
63797: ARRAY
63798: PPUSH
63799: LD_INT 1
63801: PPUSH
63802: CALL_OW 325
63806: NOT
63807: OR
63808: PUSH
63809: LD_EXP 80
63813: PUSH
63814: LD_VAR 0 2
63818: ARRAY
63819: OR
63820: IFFALSE 63824
// continue ;
63822: GO 63741
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
63824: LD_ADDR_VAR 0 8
63828: PUSH
63829: LD_EXP 57
63833: PUSH
63834: LD_VAR 0 2
63838: ARRAY
63839: PPUSH
63840: LD_INT 25
63842: PUSH
63843: LD_INT 4
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 50
63852: PUSH
63853: EMPTY
63854: LIST
63855: PUSH
63856: LD_INT 3
63858: PUSH
63859: LD_INT 60
63861: PUSH
63862: EMPTY
63863: LIST
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: LIST
63873: PPUSH
63874: CALL_OW 72
63878: PUSH
63879: LD_EXP 61
63883: PUSH
63884: LD_VAR 0 2
63888: ARRAY
63889: DIFF
63890: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63891: LD_ADDR_VAR 0 9
63895: PUSH
63896: LD_EXP 57
63900: PUSH
63901: LD_VAR 0 2
63905: ARRAY
63906: PPUSH
63907: LD_INT 2
63909: PUSH
63910: LD_INT 30
63912: PUSH
63913: LD_INT 0
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 30
63922: PUSH
63923: LD_INT 1
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: LIST
63934: PPUSH
63935: CALL_OW 72
63939: ST_TO_ADDR
// if not tmp or not dep then
63940: LD_VAR 0 8
63944: NOT
63945: PUSH
63946: LD_VAR 0 9
63950: NOT
63951: OR
63952: IFFALSE 63956
// continue ;
63954: GO 63741
// side := GetSide ( tmp [ 1 ] ) ;
63956: LD_ADDR_VAR 0 11
63960: PUSH
63961: LD_VAR 0 8
63965: PUSH
63966: LD_INT 1
63968: ARRAY
63969: PPUSH
63970: CALL_OW 255
63974: ST_TO_ADDR
// dep := dep [ 1 ] ;
63975: LD_ADDR_VAR 0 9
63979: PUSH
63980: LD_VAR 0 9
63984: PUSH
63985: LD_INT 1
63987: ARRAY
63988: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
63989: LD_ADDR_VAR 0 7
63993: PUSH
63994: LD_EXP 85
63998: PUSH
63999: LD_VAR 0 2
64003: ARRAY
64004: PPUSH
64005: LD_INT 22
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 25
64017: PUSH
64018: LD_INT 12
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PPUSH
64029: CALL_OW 70
64033: PUSH
64034: LD_INT 22
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 25
64046: PUSH
64047: LD_INT 12
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 91
64056: PUSH
64057: LD_VAR 0 9
64061: PUSH
64062: LD_INT 20
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: LIST
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: LIST
64074: PPUSH
64075: CALL_OW 69
64079: UNION
64080: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
64081: LD_ADDR_VAR 0 10
64085: PUSH
64086: LD_EXP 85
64090: PUSH
64091: LD_VAR 0 2
64095: ARRAY
64096: PPUSH
64097: LD_INT 81
64099: PUSH
64100: LD_VAR 0 11
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PPUSH
64109: CALL_OW 70
64113: ST_TO_ADDR
// if not apes or danger_at_area then
64114: LD_VAR 0 7
64118: NOT
64119: PUSH
64120: LD_VAR 0 10
64124: OR
64125: IFFALSE 64175
// begin if mc_taming [ i ] then
64127: LD_EXP 88
64131: PUSH
64132: LD_VAR 0 2
64136: ARRAY
64137: IFFALSE 64173
// begin MC_Reset ( i , 121 ) ;
64139: LD_VAR 0 2
64143: PPUSH
64144: LD_INT 121
64146: PPUSH
64147: CALL 54992 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
64151: LD_ADDR_EXP 88
64155: PUSH
64156: LD_EXP 88
64160: PPUSH
64161: LD_VAR 0 2
64165: PPUSH
64166: EMPTY
64167: PPUSH
64168: CALL_OW 1
64172: ST_TO_ADDR
// end ; continue ;
64173: GO 63741
// end ; for j in tmp do
64175: LD_ADDR_VAR 0 3
64179: PUSH
64180: LD_VAR 0 8
64184: PUSH
64185: FOR_IN
64186: IFFALSE 64456
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
64188: LD_VAR 0 3
64192: PUSH
64193: LD_EXP 88
64197: PUSH
64198: LD_VAR 0 2
64202: ARRAY
64203: IN
64204: NOT
64205: PUSH
64206: LD_EXP 88
64210: PUSH
64211: LD_VAR 0 2
64215: ARRAY
64216: PUSH
64217: LD_INT 3
64219: LESS
64220: AND
64221: IFFALSE 64279
// begin SetTag ( j , 121 ) ;
64223: LD_VAR 0 3
64227: PPUSH
64228: LD_INT 121
64230: PPUSH
64231: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
64235: LD_ADDR_EXP 88
64239: PUSH
64240: LD_EXP 88
64244: PPUSH
64245: LD_VAR 0 2
64249: PUSH
64250: LD_EXP 88
64254: PUSH
64255: LD_VAR 0 2
64259: ARRAY
64260: PUSH
64261: LD_INT 1
64263: PLUS
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PPUSH
64269: LD_VAR 0 3
64273: PPUSH
64274: CALL 20124 0 3
64278: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
64279: LD_VAR 0 3
64283: PUSH
64284: LD_EXP 88
64288: PUSH
64289: LD_VAR 0 2
64293: ARRAY
64294: IN
64295: IFFALSE 64454
// begin if IsInUnit ( j ) then
64297: LD_VAR 0 3
64301: PPUSH
64302: CALL_OW 310
64306: IFFALSE 64317
// ComExitBuilding ( j ) ;
64308: LD_VAR 0 3
64312: PPUSH
64313: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
64317: LD_ADDR_VAR 0 6
64321: PUSH
64322: LD_VAR 0 7
64326: PPUSH
64327: LD_VAR 0 3
64331: PPUSH
64332: CALL_OW 74
64336: ST_TO_ADDR
// if not ape then
64337: LD_VAR 0 6
64341: NOT
64342: IFFALSE 64346
// break ;
64344: GO 64456
// x := GetX ( ape ) ;
64346: LD_ADDR_VAR 0 4
64350: PUSH
64351: LD_VAR 0 6
64355: PPUSH
64356: CALL_OW 250
64360: ST_TO_ADDR
// y := GetY ( ape ) ;
64361: LD_ADDR_VAR 0 5
64365: PUSH
64366: LD_VAR 0 6
64370: PPUSH
64371: CALL_OW 251
64375: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
64376: LD_VAR 0 4
64380: PPUSH
64381: LD_VAR 0 5
64385: PPUSH
64386: CALL_OW 488
64390: NOT
64391: PUSH
64392: LD_VAR 0 11
64396: PPUSH
64397: LD_VAR 0 4
64401: PPUSH
64402: LD_VAR 0 5
64406: PPUSH
64407: LD_INT 20
64409: PPUSH
64410: CALL 20618 0 4
64414: PUSH
64415: LD_INT 4
64417: ARRAY
64418: OR
64419: IFFALSE 64423
// break ;
64421: GO 64456
// if not HasTask ( j ) then
64423: LD_VAR 0 3
64427: PPUSH
64428: CALL_OW 314
64432: NOT
64433: IFFALSE 64454
// ComTameXY ( j , x , y ) ;
64435: LD_VAR 0 3
64439: PPUSH
64440: LD_VAR 0 4
64444: PPUSH
64445: LD_VAR 0 5
64449: PPUSH
64450: CALL_OW 131
// end ; end ;
64454: GO 64185
64456: POP
64457: POP
// end ;
64458: GO 63741
64460: POP
64461: POP
// end ;
64462: LD_VAR 0 1
64466: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
64467: LD_INT 0
64469: PPUSH
64470: PPUSH
64471: PPUSH
64472: PPUSH
64473: PPUSH
64474: PPUSH
64475: PPUSH
64476: PPUSH
// if not mc_bases then
64477: LD_EXP 57
64481: NOT
64482: IFFALSE 64486
// exit ;
64484: GO 65096
// for i = 1 to mc_bases do
64486: LD_ADDR_VAR 0 2
64490: PUSH
64491: DOUBLE
64492: LD_INT 1
64494: DEC
64495: ST_TO_ADDR
64496: LD_EXP 57
64500: PUSH
64501: FOR_TO
64502: IFFALSE 65094
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
64504: LD_EXP 86
64508: PUSH
64509: LD_VAR 0 2
64513: ARRAY
64514: NOT
64515: PUSH
64516: LD_EXP 86
64520: PUSH
64521: LD_VAR 0 2
64525: ARRAY
64526: PPUSH
64527: LD_INT 25
64529: PUSH
64530: LD_INT 12
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PPUSH
64537: CALL_OW 72
64541: NOT
64542: OR
64543: IFFALSE 64547
// continue ;
64545: GO 64501
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
64547: LD_ADDR_VAR 0 5
64551: PUSH
64552: LD_EXP 86
64556: PUSH
64557: LD_VAR 0 2
64561: ARRAY
64562: PUSH
64563: LD_INT 1
64565: ARRAY
64566: PPUSH
64567: CALL_OW 255
64571: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
64572: LD_VAR 0 5
64576: PPUSH
64577: LD_INT 2
64579: PPUSH
64580: CALL_OW 325
64584: IFFALSE 64829
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
64586: LD_ADDR_VAR 0 4
64590: PUSH
64591: LD_EXP 86
64595: PUSH
64596: LD_VAR 0 2
64600: ARRAY
64601: PPUSH
64602: LD_INT 25
64604: PUSH
64605: LD_INT 16
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PPUSH
64612: CALL_OW 72
64616: ST_TO_ADDR
// if tmp < 6 then
64617: LD_VAR 0 4
64621: PUSH
64622: LD_INT 6
64624: LESS
64625: IFFALSE 64829
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64627: LD_ADDR_VAR 0 6
64631: PUSH
64632: LD_EXP 57
64636: PUSH
64637: LD_VAR 0 2
64641: ARRAY
64642: PPUSH
64643: LD_INT 2
64645: PUSH
64646: LD_INT 30
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 30
64658: PUSH
64659: LD_INT 1
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: LIST
64670: PPUSH
64671: CALL_OW 72
64675: ST_TO_ADDR
// if depot then
64676: LD_VAR 0 6
64680: IFFALSE 64829
// begin for j in depot do
64682: LD_ADDR_VAR 0 3
64686: PUSH
64687: LD_VAR 0 6
64691: PUSH
64692: FOR_IN
64693: IFFALSE 64724
// begin if UnitsInside ( j ) < 6 then
64695: LD_VAR 0 3
64699: PPUSH
64700: CALL_OW 313
64704: PUSH
64705: LD_INT 6
64707: LESS
64708: IFFALSE 64722
// begin selected := j ;
64710: LD_ADDR_VAR 0 7
64714: PUSH
64715: LD_VAR 0 3
64719: ST_TO_ADDR
// break ;
64720: GO 64724
// end ; end ;
64722: GO 64692
64724: POP
64725: POP
// if selected then
64726: LD_VAR 0 7
64730: IFFALSE 64829
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
64732: LD_ADDR_VAR 0 3
64736: PUSH
64737: LD_EXP 86
64741: PUSH
64742: LD_VAR 0 2
64746: ARRAY
64747: PPUSH
64748: LD_INT 25
64750: PUSH
64751: LD_INT 12
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PPUSH
64758: CALL_OW 72
64762: PUSH
64763: FOR_IN
64764: IFFALSE 64827
// if not HasTask ( j ) then
64766: LD_VAR 0 3
64770: PPUSH
64771: CALL_OW 314
64775: NOT
64776: IFFALSE 64825
// begin if not IsInUnit ( j ) then
64778: LD_VAR 0 3
64782: PPUSH
64783: CALL_OW 310
64787: NOT
64788: IFFALSE 64804
// ComEnterUnit ( j , selected ) ;
64790: LD_VAR 0 3
64794: PPUSH
64795: LD_VAR 0 7
64799: PPUSH
64800: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
64804: LD_VAR 0 3
64808: PPUSH
64809: LD_INT 16
64811: PPUSH
64812: CALL_OW 183
// AddComExitBuilding ( j ) ;
64816: LD_VAR 0 3
64820: PPUSH
64821: CALL_OW 182
// end ;
64825: GO 64763
64827: POP
64828: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
64829: LD_VAR 0 5
64833: PPUSH
64834: LD_INT 11
64836: PPUSH
64837: CALL_OW 325
64841: IFFALSE 65092
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
64843: LD_ADDR_VAR 0 4
64847: PUSH
64848: LD_EXP 86
64852: PUSH
64853: LD_VAR 0 2
64857: ARRAY
64858: PPUSH
64859: LD_INT 25
64861: PUSH
64862: LD_INT 16
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PPUSH
64869: CALL_OW 72
64873: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
64874: LD_VAR 0 4
64878: PUSH
64879: LD_INT 6
64881: GREATEREQUAL
64882: PUSH
64883: LD_VAR 0 5
64887: PPUSH
64888: LD_INT 2
64890: PPUSH
64891: CALL_OW 325
64895: NOT
64896: OR
64897: IFFALSE 65092
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
64899: LD_ADDR_VAR 0 8
64903: PUSH
64904: LD_EXP 57
64908: PUSH
64909: LD_VAR 0 2
64913: ARRAY
64914: PPUSH
64915: LD_INT 2
64917: PUSH
64918: LD_INT 30
64920: PUSH
64921: LD_INT 4
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 30
64930: PUSH
64931: LD_INT 5
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: LIST
64942: PPUSH
64943: CALL_OW 72
64947: ST_TO_ADDR
// if barracks then
64948: LD_VAR 0 8
64952: IFFALSE 65092
// begin for j in barracks do
64954: LD_ADDR_VAR 0 3
64958: PUSH
64959: LD_VAR 0 8
64963: PUSH
64964: FOR_IN
64965: IFFALSE 64996
// begin if UnitsInside ( j ) < 6 then
64967: LD_VAR 0 3
64971: PPUSH
64972: CALL_OW 313
64976: PUSH
64977: LD_INT 6
64979: LESS
64980: IFFALSE 64994
// begin selected := j ;
64982: LD_ADDR_VAR 0 7
64986: PUSH
64987: LD_VAR 0 3
64991: ST_TO_ADDR
// break ;
64992: GO 64996
// end ; end ;
64994: GO 64964
64996: POP
64997: POP
// if selected then
64998: LD_VAR 0 7
65002: IFFALSE 65092
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
65004: LD_ADDR_VAR 0 3
65008: PUSH
65009: LD_EXP 86
65013: PUSH
65014: LD_VAR 0 2
65018: ARRAY
65019: PPUSH
65020: LD_INT 25
65022: PUSH
65023: LD_INT 12
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PPUSH
65030: CALL_OW 72
65034: PUSH
65035: FOR_IN
65036: IFFALSE 65090
// if not IsInUnit ( j ) and not HasTask ( j ) then
65038: LD_VAR 0 3
65042: PPUSH
65043: CALL_OW 310
65047: NOT
65048: PUSH
65049: LD_VAR 0 3
65053: PPUSH
65054: CALL_OW 314
65058: NOT
65059: AND
65060: IFFALSE 65088
// begin ComEnterUnit ( j , selected ) ;
65062: LD_VAR 0 3
65066: PPUSH
65067: LD_VAR 0 7
65071: PPUSH
65072: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
65076: LD_VAR 0 3
65080: PPUSH
65081: LD_INT 15
65083: PPUSH
65084: CALL_OW 183
// end ;
65088: GO 65035
65090: POP
65091: POP
// end ; end ; end ; end ; end ;
65092: GO 64501
65094: POP
65095: POP
// end ;
65096: LD_VAR 0 1
65100: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
65101: LD_INT 0
65103: PPUSH
65104: PPUSH
65105: PPUSH
65106: PPUSH
// if not mc_bases then
65107: LD_EXP 57
65111: NOT
65112: IFFALSE 65116
// exit ;
65114: GO 65294
// for i = 1 to mc_bases do
65116: LD_ADDR_VAR 0 2
65120: PUSH
65121: DOUBLE
65122: LD_INT 1
65124: DEC
65125: ST_TO_ADDR
65126: LD_EXP 57
65130: PUSH
65131: FOR_TO
65132: IFFALSE 65292
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
65134: LD_ADDR_VAR 0 4
65138: PUSH
65139: LD_EXP 57
65143: PUSH
65144: LD_VAR 0 2
65148: ARRAY
65149: PPUSH
65150: LD_INT 25
65152: PUSH
65153: LD_INT 9
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PPUSH
65160: CALL_OW 72
65164: ST_TO_ADDR
// if not tmp then
65165: LD_VAR 0 4
65169: NOT
65170: IFFALSE 65174
// continue ;
65172: GO 65131
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
65174: LD_EXP 83
65178: PUSH
65179: LD_VAR 0 2
65183: ARRAY
65184: PPUSH
65185: LD_INT 29
65187: PPUSH
65188: CALL_OW 325
65192: NOT
65193: PUSH
65194: LD_EXP 83
65198: PUSH
65199: LD_VAR 0 2
65203: ARRAY
65204: PPUSH
65205: LD_INT 28
65207: PPUSH
65208: CALL_OW 325
65212: NOT
65213: AND
65214: IFFALSE 65218
// continue ;
65216: GO 65131
// for j in tmp do
65218: LD_ADDR_VAR 0 3
65222: PUSH
65223: LD_VAR 0 4
65227: PUSH
65228: FOR_IN
65229: IFFALSE 65288
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
65231: LD_VAR 0 3
65235: PUSH
65236: LD_EXP 60
65240: PUSH
65241: LD_VAR 0 2
65245: ARRAY
65246: PUSH
65247: LD_INT 1
65249: ARRAY
65250: IN
65251: NOT
65252: PUSH
65253: LD_VAR 0 3
65257: PUSH
65258: LD_EXP 60
65262: PUSH
65263: LD_VAR 0 2
65267: ARRAY
65268: PUSH
65269: LD_INT 2
65271: ARRAY
65272: IN
65273: NOT
65274: AND
65275: IFFALSE 65286
// ComSpaceTimeShoot ( j ) ;
65277: LD_VAR 0 3
65281: PPUSH
65282: CALL 14286 0 1
65286: GO 65228
65288: POP
65289: POP
// end ;
65290: GO 65131
65292: POP
65293: POP
// end ;
65294: LD_VAR 0 1
65298: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
65299: LD_INT 0
65301: PPUSH
65302: PPUSH
65303: PPUSH
65304: PPUSH
// if not mc_bases then
65305: LD_EXP 57
65309: NOT
65310: IFFALSE 65314
// exit ;
65312: GO 65336
// for i = 1 to mc_bases do
65314: LD_ADDR_VAR 0 2
65318: PUSH
65319: DOUBLE
65320: LD_INT 1
65322: DEC
65323: ST_TO_ADDR
65324: LD_EXP 57
65328: PUSH
65329: FOR_TO
65330: IFFALSE 65334
// begin end ;
65332: GO 65329
65334: POP
65335: POP
// end ;
65336: LD_VAR 0 1
65340: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
65341: LD_INT 0
65343: PPUSH
65344: PPUSH
65345: PPUSH
// if not mc_bases then
65346: LD_EXP 57
65350: NOT
65351: IFFALSE 65355
// exit ;
65353: GO 65915
// for i = 1 to mc_bases do
65355: LD_ADDR_VAR 0 2
65359: PUSH
65360: DOUBLE
65361: LD_INT 1
65363: DEC
65364: ST_TO_ADDR
65365: LD_EXP 57
65369: PUSH
65370: FOR_TO
65371: IFFALSE 65913
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
65373: LD_ADDR_VAR 0 3
65377: PUSH
65378: LD_EXP 57
65382: PUSH
65383: LD_VAR 0 2
65387: ARRAY
65388: PPUSH
65389: LD_INT 25
65391: PUSH
65392: LD_INT 4
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PPUSH
65399: CALL_OW 72
65403: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] then
65404: LD_VAR 0 3
65408: NOT
65409: PUSH
65410: LD_EXP 93
65414: PUSH
65415: LD_VAR 0 2
65419: ARRAY
65420: NOT
65421: OR
65422: IFFALSE 65472
// begin if mc_deposits_finder [ i ] then
65424: LD_EXP 94
65428: PUSH
65429: LD_VAR 0 2
65433: ARRAY
65434: IFFALSE 65470
// begin MC_Reset ( i , 125 ) ;
65436: LD_VAR 0 2
65440: PPUSH
65441: LD_INT 125
65443: PPUSH
65444: CALL 54992 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65448: LD_ADDR_EXP 94
65452: PUSH
65453: LD_EXP 94
65457: PPUSH
65458: LD_VAR 0 2
65462: PPUSH
65463: EMPTY
65464: PPUSH
65465: CALL_OW 1
65469: ST_TO_ADDR
// end ; continue ;
65470: GO 65370
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
65472: LD_EXP 93
65476: PUSH
65477: LD_VAR 0 2
65481: ARRAY
65482: PUSH
65483: LD_INT 1
65485: ARRAY
65486: PUSH
65487: LD_INT 3
65489: ARRAY
65490: PUSH
65491: LD_INT 1
65493: EQUAL
65494: PUSH
65495: LD_INT 20
65497: PPUSH
65498: LD_EXP 83
65502: PUSH
65503: LD_VAR 0 2
65507: ARRAY
65508: PPUSH
65509: CALL_OW 321
65513: PUSH
65514: LD_INT 2
65516: NONEQUAL
65517: AND
65518: IFFALSE 65568
// begin if mc_deposits_finder [ i ] then
65520: LD_EXP 94
65524: PUSH
65525: LD_VAR 0 2
65529: ARRAY
65530: IFFALSE 65566
// begin MC_Reset ( i , 125 ) ;
65532: LD_VAR 0 2
65536: PPUSH
65537: LD_INT 125
65539: PPUSH
65540: CALL 54992 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65544: LD_ADDR_EXP 94
65548: PUSH
65549: LD_EXP 94
65553: PPUSH
65554: LD_VAR 0 2
65558: PPUSH
65559: EMPTY
65560: PPUSH
65561: CALL_OW 1
65565: ST_TO_ADDR
// end ; continue ;
65566: GO 65370
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
65568: LD_EXP 93
65572: PUSH
65573: LD_VAR 0 2
65577: ARRAY
65578: PUSH
65579: LD_INT 1
65581: ARRAY
65582: PUSH
65583: LD_INT 1
65585: ARRAY
65586: PPUSH
65587: LD_EXP 93
65591: PUSH
65592: LD_VAR 0 2
65596: ARRAY
65597: PUSH
65598: LD_INT 1
65600: ARRAY
65601: PUSH
65602: LD_INT 2
65604: ARRAY
65605: PPUSH
65606: LD_EXP 83
65610: PUSH
65611: LD_VAR 0 2
65615: ARRAY
65616: PPUSH
65617: CALL_OW 440
65621: IFFALSE 65664
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
65623: LD_ADDR_EXP 93
65627: PUSH
65628: LD_EXP 93
65632: PPUSH
65633: LD_VAR 0 2
65637: PPUSH
65638: LD_EXP 93
65642: PUSH
65643: LD_VAR 0 2
65647: ARRAY
65648: PPUSH
65649: LD_INT 1
65651: PPUSH
65652: CALL_OW 3
65656: PPUSH
65657: CALL_OW 1
65661: ST_TO_ADDR
65662: GO 65911
// begin if not mc_deposits_finder [ i ] then
65664: LD_EXP 94
65668: PUSH
65669: LD_VAR 0 2
65673: ARRAY
65674: NOT
65675: IFFALSE 65727
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
65677: LD_ADDR_EXP 94
65681: PUSH
65682: LD_EXP 94
65686: PPUSH
65687: LD_VAR 0 2
65691: PPUSH
65692: LD_VAR 0 3
65696: PUSH
65697: LD_INT 1
65699: ARRAY
65700: PUSH
65701: EMPTY
65702: LIST
65703: PPUSH
65704: CALL_OW 1
65708: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
65709: LD_VAR 0 3
65713: PUSH
65714: LD_INT 1
65716: ARRAY
65717: PPUSH
65718: LD_INT 125
65720: PPUSH
65721: CALL_OW 109
// end else
65725: GO 65911
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
65727: LD_EXP 94
65731: PUSH
65732: LD_VAR 0 2
65736: ARRAY
65737: PUSH
65738: LD_INT 1
65740: ARRAY
65741: PPUSH
65742: CALL_OW 310
65746: IFFALSE 65769
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
65748: LD_EXP 94
65752: PUSH
65753: LD_VAR 0 2
65757: ARRAY
65758: PUSH
65759: LD_INT 1
65761: ARRAY
65762: PPUSH
65763: CALL_OW 122
65767: GO 65911
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
65769: LD_EXP 94
65773: PUSH
65774: LD_VAR 0 2
65778: ARRAY
65779: PUSH
65780: LD_INT 1
65782: ARRAY
65783: PPUSH
65784: CALL_OW 314
65788: NOT
65789: PUSH
65790: LD_EXP 94
65794: PUSH
65795: LD_VAR 0 2
65799: ARRAY
65800: PUSH
65801: LD_INT 1
65803: ARRAY
65804: PPUSH
65805: LD_EXP 93
65809: PUSH
65810: LD_VAR 0 2
65814: ARRAY
65815: PUSH
65816: LD_INT 1
65818: ARRAY
65819: PUSH
65820: LD_INT 1
65822: ARRAY
65823: PPUSH
65824: LD_EXP 93
65828: PUSH
65829: LD_VAR 0 2
65833: ARRAY
65834: PUSH
65835: LD_INT 1
65837: ARRAY
65838: PUSH
65839: LD_INT 2
65841: ARRAY
65842: PPUSH
65843: CALL_OW 297
65847: PUSH
65848: LD_INT 6
65850: GREATER
65851: AND
65852: IFFALSE 65911
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
65854: LD_EXP 94
65858: PUSH
65859: LD_VAR 0 2
65863: ARRAY
65864: PUSH
65865: LD_INT 1
65867: ARRAY
65868: PPUSH
65869: LD_EXP 93
65873: PUSH
65874: LD_VAR 0 2
65878: ARRAY
65879: PUSH
65880: LD_INT 1
65882: ARRAY
65883: PUSH
65884: LD_INT 1
65886: ARRAY
65887: PPUSH
65888: LD_EXP 93
65892: PUSH
65893: LD_VAR 0 2
65897: ARRAY
65898: PUSH
65899: LD_INT 1
65901: ARRAY
65902: PUSH
65903: LD_INT 2
65905: ARRAY
65906: PPUSH
65907: CALL_OW 111
// end ; end ; end ;
65911: GO 65370
65913: POP
65914: POP
// end ;
65915: LD_VAR 0 1
65919: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts ; begin
65920: LD_INT 0
65922: PPUSH
65923: PPUSH
65924: PPUSH
65925: PPUSH
65926: PPUSH
65927: PPUSH
65928: PPUSH
65929: PPUSH
65930: PPUSH
// if not mc_bases then
65931: LD_EXP 57
65935: NOT
65936: IFFALSE 65940
// exit ;
65938: GO 66438
// for i = 1 to mc_bases do
65940: LD_ADDR_VAR 0 2
65944: PUSH
65945: DOUBLE
65946: LD_INT 1
65948: DEC
65949: ST_TO_ADDR
65950: LD_EXP 57
65954: PUSH
65955: FOR_TO
65956: IFFALSE 66436
// begin if not mc_bases [ i ] then
65958: LD_EXP 57
65962: PUSH
65963: LD_VAR 0 2
65967: ARRAY
65968: NOT
65969: IFFALSE 65973
// continue ;
65971: GO 65955
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
65973: LD_ADDR_VAR 0 7
65977: PUSH
65978: LD_EXP 57
65982: PUSH
65983: LD_VAR 0 2
65987: ARRAY
65988: PUSH
65989: LD_INT 1
65991: ARRAY
65992: PPUSH
65993: CALL_OW 248
65997: ST_TO_ADDR
// if nation <> 1 or not UnitFilter ( ( mc_vehicles [ i ] union mc_defender [ i ] ) , [ f_control , control_remote ] ) then
65998: LD_VAR 0 7
66002: PUSH
66003: LD_INT 1
66005: NONEQUAL
66006: PUSH
66007: LD_EXP 76
66011: PUSH
66012: LD_VAR 0 2
66016: ARRAY
66017: PUSH
66018: LD_EXP 79
66022: PUSH
66023: LD_VAR 0 2
66027: ARRAY
66028: UNION
66029: PPUSH
66030: LD_INT 33
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PPUSH
66040: CALL_OW 72
66044: NOT
66045: OR
66046: IFFALSE 66050
// continue ;
66048: GO 65955
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
66050: LD_ADDR_VAR 0 9
66054: PUSH
66055: LD_EXP 57
66059: PUSH
66060: LD_VAR 0 2
66064: ARRAY
66065: PPUSH
66066: LD_INT 30
66068: PUSH
66069: LD_INT 36
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PPUSH
66076: CALL_OW 72
66080: ST_TO_ADDR
// if not cts then
66081: LD_VAR 0 9
66085: NOT
66086: IFFALSE 66090
// continue ;
66088: GO 65955
// if mc_remote_driver [ i ] then
66090: LD_EXP 96
66094: PUSH
66095: LD_VAR 0 2
66099: ARRAY
66100: IFFALSE 66249
// for j in mc_remote_driver [ i ] do
66102: LD_ADDR_VAR 0 3
66106: PUSH
66107: LD_EXP 96
66111: PUSH
66112: LD_VAR 0 2
66116: ARRAY
66117: PUSH
66118: FOR_IN
66119: IFFALSE 66247
// if not IsInUnit ( j ) or GetBType ( IsInUnit ( j ) ) <> b_control_tower then
66121: LD_VAR 0 3
66125: PPUSH
66126: CALL_OW 310
66130: NOT
66131: PUSH
66132: LD_VAR 0 3
66136: PPUSH
66137: CALL_OW 310
66141: PPUSH
66142: CALL_OW 266
66146: PUSH
66147: LD_INT 36
66149: NONEQUAL
66150: OR
66151: IFFALSE 66245
// begin if IsInUnit ( j ) then
66153: LD_VAR 0 3
66157: PPUSH
66158: CALL_OW 310
66162: IFFALSE 66173
// ComExitBuilding ( j ) ;
66164: LD_VAR 0 3
66168: PPUSH
66169: CALL_OW 122
// ct := 0 ;
66173: LD_ADDR_VAR 0 8
66177: PUSH
66178: LD_INT 0
66180: ST_TO_ADDR
// for k in cts do
66181: LD_ADDR_VAR 0 4
66185: PUSH
66186: LD_VAR 0 9
66190: PUSH
66191: FOR_IN
66192: IFFALSE 66223
// if UnitsInside ( k ) < 3 then
66194: LD_VAR 0 4
66198: PPUSH
66199: CALL_OW 313
66203: PUSH
66204: LD_INT 3
66206: LESS
66207: IFFALSE 66221
// begin ct := k ;
66209: LD_ADDR_VAR 0 8
66213: PUSH
66214: LD_VAR 0 4
66218: ST_TO_ADDR
// break ;
66219: GO 66223
// end ;
66221: GO 66191
66223: POP
66224: POP
// if ct then
66225: LD_VAR 0 8
66229: IFFALSE 66245
// AddComEnterUnit ( j , ct ) ;
66231: LD_VAR 0 3
66235: PPUSH
66236: LD_VAR 0 8
66240: PPUSH
66241: CALL_OW 180
// end ;
66245: GO 66118
66247: POP
66248: POP
// places := 0 ;
66249: LD_ADDR_VAR 0 5
66253: PUSH
66254: LD_INT 0
66256: ST_TO_ADDR
// for j = 1 to cts do
66257: LD_ADDR_VAR 0 3
66261: PUSH
66262: DOUBLE
66263: LD_INT 1
66265: DEC
66266: ST_TO_ADDR
66267: LD_VAR 0 9
66271: PUSH
66272: FOR_TO
66273: IFFALSE 66291
// places := places + 3 ;
66275: LD_ADDR_VAR 0 5
66279: PUSH
66280: LD_VAR 0 5
66284: PUSH
66285: LD_INT 3
66287: PLUS
66288: ST_TO_ADDR
66289: GO 66272
66291: POP
66292: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] ;
66293: LD_ADDR_VAR 0 6
66297: PUSH
66298: LD_EXP 57
66302: PUSH
66303: LD_VAR 0 2
66307: ARRAY
66308: PPUSH
66309: LD_INT 25
66311: PUSH
66312: LD_INT 3
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PPUSH
66319: CALL_OW 72
66323: PUSH
66324: LD_EXP 96
66328: PUSH
66329: LD_VAR 0 2
66333: ARRAY
66334: DIFF
66335: ST_TO_ADDR
// if not tmp then
66336: LD_VAR 0 6
66340: NOT
66341: IFFALSE 66345
// continue ;
66343: GO 65955
// places := places - ( mc_remote_driver [ i ] + 1 ) ;
66345: LD_ADDR_VAR 0 5
66349: PUSH
66350: LD_VAR 0 5
66354: PUSH
66355: LD_EXP 96
66359: PUSH
66360: LD_VAR 0 2
66364: ARRAY
66365: PUSH
66366: LD_INT 1
66368: PLUS
66369: MINUS
66370: ST_TO_ADDR
// if places then
66371: LD_VAR 0 5
66375: IFFALSE 66434
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
66377: LD_ADDR_EXP 96
66381: PUSH
66382: LD_EXP 96
66386: PPUSH
66387: LD_VAR 0 2
66391: PPUSH
66392: LD_EXP 96
66396: PUSH
66397: LD_VAR 0 2
66401: ARRAY
66402: PUSH
66403: LD_VAR 0 6
66407: PUSH
66408: LD_INT 1
66410: ARRAY
66411: UNION
66412: PPUSH
66413: CALL_OW 1
66417: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
66418: LD_VAR 0 6
66422: PUSH
66423: LD_INT 1
66425: ARRAY
66426: PPUSH
66427: LD_INT 126
66429: PPUSH
66430: CALL_OW 109
// end ; end ;
66434: GO 65955
66436: POP
66437: POP
// end ;
66438: LD_VAR 0 1
66442: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
66443: LD_INT 0
66445: PPUSH
66446: PPUSH
66447: PPUSH
66448: PPUSH
66449: PPUSH
66450: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
66451: LD_VAR 0 1
66455: NOT
66456: PUSH
66457: LD_VAR 0 2
66461: NOT
66462: OR
66463: PUSH
66464: LD_VAR 0 3
66468: NOT
66469: OR
66470: PUSH
66471: LD_VAR 0 4
66475: PUSH
66476: LD_INT 1
66478: PUSH
66479: LD_INT 2
66481: PUSH
66482: LD_INT 3
66484: PUSH
66485: LD_INT 4
66487: PUSH
66488: LD_INT 5
66490: PUSH
66491: LD_INT 8
66493: PUSH
66494: LD_INT 9
66496: PUSH
66497: LD_INT 15
66499: PUSH
66500: LD_INT 16
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: IN
66514: NOT
66515: OR
66516: IFFALSE 66520
// exit ;
66518: GO 67420
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
66520: LD_ADDR_VAR 0 2
66524: PUSH
66525: LD_VAR 0 2
66529: PPUSH
66530: LD_INT 21
66532: PUSH
66533: LD_INT 3
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 24
66542: PUSH
66543: LD_INT 250
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PPUSH
66554: CALL_OW 72
66558: ST_TO_ADDR
// case class of 1 , 15 :
66559: LD_VAR 0 4
66563: PUSH
66564: LD_INT 1
66566: DOUBLE
66567: EQUAL
66568: IFTRUE 66578
66570: LD_INT 15
66572: DOUBLE
66573: EQUAL
66574: IFTRUE 66578
66576: GO 66663
66578: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
66579: LD_ADDR_VAR 0 8
66583: PUSH
66584: LD_VAR 0 2
66588: PPUSH
66589: LD_INT 2
66591: PUSH
66592: LD_INT 30
66594: PUSH
66595: LD_INT 32
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 30
66604: PUSH
66605: LD_INT 31
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: LIST
66616: PPUSH
66617: CALL_OW 72
66621: PUSH
66622: LD_VAR 0 2
66626: PPUSH
66627: LD_INT 2
66629: PUSH
66630: LD_INT 30
66632: PUSH
66633: LD_INT 4
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 30
66642: PUSH
66643: LD_INT 5
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: LIST
66654: PPUSH
66655: CALL_OW 72
66659: ADD
66660: ST_TO_ADDR
66661: GO 66909
66663: LD_INT 2
66665: DOUBLE
66666: EQUAL
66667: IFTRUE 66677
66669: LD_INT 16
66671: DOUBLE
66672: EQUAL
66673: IFTRUE 66677
66675: GO 66723
66677: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
66678: LD_ADDR_VAR 0 8
66682: PUSH
66683: LD_VAR 0 2
66687: PPUSH
66688: LD_INT 2
66690: PUSH
66691: LD_INT 30
66693: PUSH
66694: LD_INT 0
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 30
66703: PUSH
66704: LD_INT 1
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: LIST
66715: PPUSH
66716: CALL_OW 72
66720: ST_TO_ADDR
66721: GO 66909
66723: LD_INT 3
66725: DOUBLE
66726: EQUAL
66727: IFTRUE 66731
66729: GO 66777
66731: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
66732: LD_ADDR_VAR 0 8
66736: PUSH
66737: LD_VAR 0 2
66741: PPUSH
66742: LD_INT 2
66744: PUSH
66745: LD_INT 30
66747: PUSH
66748: LD_INT 2
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 30
66757: PUSH
66758: LD_INT 3
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: LIST
66769: PPUSH
66770: CALL_OW 72
66774: ST_TO_ADDR
66775: GO 66909
66777: LD_INT 4
66779: DOUBLE
66780: EQUAL
66781: IFTRUE 66785
66783: GO 66842
66785: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
66786: LD_ADDR_VAR 0 8
66790: PUSH
66791: LD_VAR 0 2
66795: PPUSH
66796: LD_INT 2
66798: PUSH
66799: LD_INT 30
66801: PUSH
66802: LD_INT 6
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 30
66811: PUSH
66812: LD_INT 7
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 30
66821: PUSH
66822: LD_INT 8
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: PPUSH
66835: CALL_OW 72
66839: ST_TO_ADDR
66840: GO 66909
66842: LD_INT 5
66844: DOUBLE
66845: EQUAL
66846: IFTRUE 66862
66848: LD_INT 8
66850: DOUBLE
66851: EQUAL
66852: IFTRUE 66862
66854: LD_INT 9
66856: DOUBLE
66857: EQUAL
66858: IFTRUE 66862
66860: GO 66908
66862: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
66863: LD_ADDR_VAR 0 8
66867: PUSH
66868: LD_VAR 0 2
66872: PPUSH
66873: LD_INT 2
66875: PUSH
66876: LD_INT 30
66878: PUSH
66879: LD_INT 4
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 30
66888: PUSH
66889: LD_INT 5
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: LIST
66900: PPUSH
66901: CALL_OW 72
66905: ST_TO_ADDR
66906: GO 66909
66908: POP
// if not tmp then
66909: LD_VAR 0 8
66913: NOT
66914: IFFALSE 66918
// exit ;
66916: GO 67420
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
66918: LD_VAR 0 4
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: LD_INT 15
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: IN
66933: PUSH
66934: LD_EXP 66
66938: PUSH
66939: LD_VAR 0 1
66943: ARRAY
66944: AND
66945: IFFALSE 67101
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
66947: LD_ADDR_VAR 0 9
66951: PUSH
66952: LD_EXP 66
66956: PUSH
66957: LD_VAR 0 1
66961: ARRAY
66962: PUSH
66963: LD_INT 1
66965: ARRAY
66966: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
66967: LD_VAR 0 9
66971: PUSH
66972: LD_EXP 67
66976: PUSH
66977: LD_VAR 0 1
66981: ARRAY
66982: IN
66983: NOT
66984: IFFALSE 67099
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
66986: LD_ADDR_EXP 67
66990: PUSH
66991: LD_EXP 67
66995: PPUSH
66996: LD_VAR 0 1
67000: PUSH
67001: LD_EXP 67
67005: PUSH
67006: LD_VAR 0 1
67010: ARRAY
67011: PUSH
67012: LD_INT 1
67014: PLUS
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PPUSH
67020: LD_VAR 0 9
67024: PPUSH
67025: CALL 20124 0 3
67029: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
67030: LD_ADDR_EXP 66
67034: PUSH
67035: LD_EXP 66
67039: PPUSH
67040: LD_VAR 0 1
67044: PPUSH
67045: LD_EXP 66
67049: PUSH
67050: LD_VAR 0 1
67054: ARRAY
67055: PUSH
67056: LD_VAR 0 9
67060: DIFF
67061: PPUSH
67062: CALL_OW 1
67066: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
67067: LD_VAR 0 3
67071: PPUSH
67072: LD_EXP 67
67076: PUSH
67077: LD_VAR 0 1
67081: ARRAY
67082: PUSH
67083: LD_EXP 67
67087: PUSH
67088: LD_VAR 0 1
67092: ARRAY
67093: ARRAY
67094: PPUSH
67095: CALL_OW 120
// end ; exit ;
67099: GO 67420
// end ; if tmp > 1 then
67101: LD_VAR 0 8
67105: PUSH
67106: LD_INT 1
67108: GREATER
67109: IFFALSE 67213
// for i = 2 to tmp do
67111: LD_ADDR_VAR 0 6
67115: PUSH
67116: DOUBLE
67117: LD_INT 2
67119: DEC
67120: ST_TO_ADDR
67121: LD_VAR 0 8
67125: PUSH
67126: FOR_TO
67127: IFFALSE 67211
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
67129: LD_VAR 0 8
67133: PUSH
67134: LD_VAR 0 6
67138: ARRAY
67139: PPUSH
67140: CALL_OW 461
67144: PUSH
67145: LD_INT 6
67147: EQUAL
67148: IFFALSE 67209
// begin x := tmp [ i ] ;
67150: LD_ADDR_VAR 0 9
67154: PUSH
67155: LD_VAR 0 8
67159: PUSH
67160: LD_VAR 0 6
67164: ARRAY
67165: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
67166: LD_ADDR_VAR 0 8
67170: PUSH
67171: LD_VAR 0 8
67175: PPUSH
67176: LD_VAR 0 6
67180: PPUSH
67181: CALL_OW 3
67185: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
67186: LD_ADDR_VAR 0 8
67190: PUSH
67191: LD_VAR 0 8
67195: PPUSH
67196: LD_INT 1
67198: PPUSH
67199: LD_VAR 0 9
67203: PPUSH
67204: CALL_OW 2
67208: ST_TO_ADDR
// end ;
67209: GO 67126
67211: POP
67212: POP
// for i in tmp do
67213: LD_ADDR_VAR 0 6
67217: PUSH
67218: LD_VAR 0 8
67222: PUSH
67223: FOR_IN
67224: IFFALSE 67293
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
67226: LD_VAR 0 6
67230: PPUSH
67231: CALL_OW 313
67235: PUSH
67236: LD_INT 6
67238: LESS
67239: PUSH
67240: LD_VAR 0 6
67244: PPUSH
67245: CALL_OW 266
67249: PUSH
67250: LD_INT 31
67252: PUSH
67253: LD_INT 32
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: IN
67260: NOT
67261: AND
67262: PUSH
67263: LD_VAR 0 6
67267: PPUSH
67268: CALL_OW 313
67272: PUSH
67273: LD_INT 0
67275: EQUAL
67276: OR
67277: IFFALSE 67291
// begin j := i ;
67279: LD_ADDR_VAR 0 7
67283: PUSH
67284: LD_VAR 0 6
67288: ST_TO_ADDR
// break ;
67289: GO 67293
// end ; end ;
67291: GO 67223
67293: POP
67294: POP
// if j then
67295: LD_VAR 0 7
67299: IFFALSE 67317
// ComEnterUnit ( unit , j ) else
67301: LD_VAR 0 3
67305: PPUSH
67306: LD_VAR 0 7
67310: PPUSH
67311: CALL_OW 120
67315: GO 67420
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67317: LD_ADDR_VAR 0 10
67321: PUSH
67322: LD_VAR 0 2
67326: PPUSH
67327: LD_INT 2
67329: PUSH
67330: LD_INT 30
67332: PUSH
67333: LD_INT 0
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 30
67342: PUSH
67343: LD_INT 1
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: LIST
67354: PPUSH
67355: CALL_OW 72
67359: ST_TO_ADDR
// if depot then
67360: LD_VAR 0 10
67364: IFFALSE 67420
// begin depot := NearestUnitToUnit ( depot , unit ) ;
67366: LD_ADDR_VAR 0 10
67370: PUSH
67371: LD_VAR 0 10
67375: PPUSH
67376: LD_VAR 0 3
67380: PPUSH
67381: CALL_OW 74
67385: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
67386: LD_VAR 0 3
67390: PPUSH
67391: LD_VAR 0 10
67395: PPUSH
67396: CALL_OW 296
67400: PUSH
67401: LD_INT 10
67403: GREATER
67404: IFFALSE 67420
// ComStandNearbyBuilding ( unit , depot ) ;
67406: LD_VAR 0 3
67410: PPUSH
67411: LD_VAR 0 10
67415: PPUSH
67416: CALL 14903 0 2
// end ; end ; end ;
67420: LD_VAR 0 5
67424: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
67425: LD_INT 0
67427: PPUSH
67428: PPUSH
67429: PPUSH
67430: PPUSH
// if not mc_bases then
67431: LD_EXP 57
67435: NOT
67436: IFFALSE 67440
// exit ;
67438: GO 67679
// for i = 1 to mc_bases do
67440: LD_ADDR_VAR 0 2
67444: PUSH
67445: DOUBLE
67446: LD_INT 1
67448: DEC
67449: ST_TO_ADDR
67450: LD_EXP 57
67454: PUSH
67455: FOR_TO
67456: IFFALSE 67677
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
67458: LD_ADDR_VAR 0 4
67462: PUSH
67463: LD_EXP 57
67467: PUSH
67468: LD_VAR 0 2
67472: ARRAY
67473: PPUSH
67474: LD_INT 21
67476: PUSH
67477: LD_INT 1
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PPUSH
67484: CALL_OW 72
67488: PUSH
67489: LD_EXP 86
67493: PUSH
67494: LD_VAR 0 2
67498: ARRAY
67499: UNION
67500: ST_TO_ADDR
// if not tmp then
67501: LD_VAR 0 4
67505: NOT
67506: IFFALSE 67510
// continue ;
67508: GO 67455
// for j in tmp do
67510: LD_ADDR_VAR 0 3
67514: PUSH
67515: LD_VAR 0 4
67519: PUSH
67520: FOR_IN
67521: IFFALSE 67673
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
67523: LD_VAR 0 3
67527: PPUSH
67528: CALL_OW 110
67532: NOT
67533: PUSH
67534: LD_VAR 0 3
67538: PPUSH
67539: CALL_OW 314
67543: NOT
67544: AND
67545: PUSH
67546: LD_VAR 0 3
67550: PPUSH
67551: CALL_OW 311
67555: NOT
67556: AND
67557: PUSH
67558: LD_VAR 0 3
67562: PPUSH
67563: CALL_OW 310
67567: NOT
67568: AND
67569: PUSH
67570: LD_VAR 0 3
67574: PUSH
67575: LD_EXP 60
67579: PUSH
67580: LD_VAR 0 2
67584: ARRAY
67585: PUSH
67586: LD_INT 1
67588: ARRAY
67589: IN
67590: NOT
67591: AND
67592: PUSH
67593: LD_VAR 0 3
67597: PUSH
67598: LD_EXP 60
67602: PUSH
67603: LD_VAR 0 2
67607: ARRAY
67608: PUSH
67609: LD_INT 2
67611: ARRAY
67612: IN
67613: NOT
67614: AND
67615: PUSH
67616: LD_VAR 0 3
67620: PUSH
67621: LD_EXP 69
67625: PUSH
67626: LD_VAR 0 2
67630: ARRAY
67631: IN
67632: NOT
67633: AND
67634: IFFALSE 67671
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
67636: LD_VAR 0 2
67640: PPUSH
67641: LD_EXP 57
67645: PUSH
67646: LD_VAR 0 2
67650: ARRAY
67651: PPUSH
67652: LD_VAR 0 3
67656: PPUSH
67657: LD_VAR 0 3
67661: PPUSH
67662: CALL_OW 257
67666: PPUSH
67667: CALL 66443 0 4
// end ;
67671: GO 67520
67673: POP
67674: POP
// end ;
67675: GO 67455
67677: POP
67678: POP
// end ;
67679: LD_VAR 0 1
67683: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
67684: LD_INT 0
67686: PPUSH
67687: PPUSH
67688: PPUSH
67689: PPUSH
67690: PPUSH
67691: PPUSH
// if not mc_bases [ base ] then
67692: LD_EXP 57
67696: PUSH
67697: LD_VAR 0 1
67701: ARRAY
67702: NOT
67703: IFFALSE 67707
// exit ;
67705: GO 67889
// tmp := [ ] ;
67707: LD_ADDR_VAR 0 6
67711: PUSH
67712: EMPTY
67713: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
67714: LD_ADDR_VAR 0 7
67718: PUSH
67719: LD_VAR 0 3
67723: PPUSH
67724: LD_INT 0
67726: PPUSH
67727: CALL_OW 517
67731: ST_TO_ADDR
// if not list then
67732: LD_VAR 0 7
67736: NOT
67737: IFFALSE 67741
// exit ;
67739: GO 67889
// for i = 1 to amount do
67741: LD_ADDR_VAR 0 5
67745: PUSH
67746: DOUBLE
67747: LD_INT 1
67749: DEC
67750: ST_TO_ADDR
67751: LD_VAR 0 2
67755: PUSH
67756: FOR_TO
67757: IFFALSE 67837
// begin x := rand ( 1 , list [ 1 ] ) ;
67759: LD_ADDR_VAR 0 8
67763: PUSH
67764: LD_INT 1
67766: PPUSH
67767: LD_VAR 0 7
67771: PUSH
67772: LD_INT 1
67774: ARRAY
67775: PPUSH
67776: CALL_OW 12
67780: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
67781: LD_ADDR_VAR 0 6
67785: PUSH
67786: LD_VAR 0 6
67790: PPUSH
67791: LD_VAR 0 5
67795: PPUSH
67796: LD_VAR 0 7
67800: PUSH
67801: LD_INT 1
67803: ARRAY
67804: PUSH
67805: LD_VAR 0 8
67809: ARRAY
67810: PUSH
67811: LD_VAR 0 7
67815: PUSH
67816: LD_INT 2
67818: ARRAY
67819: PUSH
67820: LD_VAR 0 8
67824: ARRAY
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PPUSH
67830: CALL_OW 1
67834: ST_TO_ADDR
// end ;
67835: GO 67756
67837: POP
67838: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
67839: LD_ADDR_EXP 70
67843: PUSH
67844: LD_EXP 70
67848: PPUSH
67849: LD_VAR 0 1
67853: PPUSH
67854: LD_VAR 0 6
67858: PPUSH
67859: CALL_OW 1
67863: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
67864: LD_ADDR_EXP 72
67868: PUSH
67869: LD_EXP 72
67873: PPUSH
67874: LD_VAR 0 1
67878: PPUSH
67879: LD_VAR 0 3
67883: PPUSH
67884: CALL_OW 1
67888: ST_TO_ADDR
// end ;
67889: LD_VAR 0 4
67893: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
67894: LD_INT 0
67896: PPUSH
// if not mc_bases [ base ] then
67897: LD_EXP 57
67901: PUSH
67902: LD_VAR 0 1
67906: ARRAY
67907: NOT
67908: IFFALSE 67912
// exit ;
67910: GO 67937
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
67912: LD_ADDR_EXP 62
67916: PUSH
67917: LD_EXP 62
67921: PPUSH
67922: LD_VAR 0 1
67926: PPUSH
67927: LD_VAR 0 2
67931: PPUSH
67932: CALL_OW 1
67936: ST_TO_ADDR
// end ;
67937: LD_VAR 0 3
67941: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
67942: LD_INT 0
67944: PPUSH
// if not mc_bases [ base ] then
67945: LD_EXP 57
67949: PUSH
67950: LD_VAR 0 1
67954: ARRAY
67955: NOT
67956: IFFALSE 67960
// exit ;
67958: GO 68016
// mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , list ) ) ;
67960: LD_ADDR_EXP 62
67964: PUSH
67965: LD_EXP 62
67969: PPUSH
67970: LD_VAR 0 1
67974: PPUSH
67975: LD_EXP 62
67979: PUSH
67980: LD_VAR 0 1
67984: ARRAY
67985: PPUSH
67986: LD_EXP 62
67990: PUSH
67991: LD_VAR 0 1
67995: ARRAY
67996: PUSH
67997: LD_INT 1
67999: PLUS
68000: PPUSH
68001: LD_VAR 0 2
68005: PPUSH
68006: CALL_OW 2
68010: PPUSH
68011: CALL_OW 1
68015: ST_TO_ADDR
// end ;
68016: LD_VAR 0 3
68020: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
68021: LD_INT 0
68023: PPUSH
// if not mc_bases [ base ] then
68024: LD_EXP 57
68028: PUSH
68029: LD_VAR 0 1
68033: ARRAY
68034: NOT
68035: IFFALSE 68039
// exit ;
68037: GO 68064
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
68039: LD_ADDR_EXP 78
68043: PUSH
68044: LD_EXP 78
68048: PPUSH
68049: LD_VAR 0 1
68053: PPUSH
68054: LD_VAR 0 2
68058: PPUSH
68059: CALL_OW 1
68063: ST_TO_ADDR
// end ;
68064: LD_VAR 0 3
68068: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
68069: LD_INT 0
68071: PPUSH
// if not mc_bases [ base ] then
68072: LD_EXP 57
68076: PUSH
68077: LD_VAR 0 1
68081: ARRAY
68082: NOT
68083: IFFALSE 68087
// exit ;
68085: GO 68127
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
68087: LD_ADDR_EXP 78
68091: PUSH
68092: LD_EXP 78
68096: PPUSH
68097: LD_VAR 0 1
68101: PPUSH
68102: LD_EXP 78
68106: PUSH
68107: LD_VAR 0 1
68111: ARRAY
68112: PUSH
68113: LD_VAR 0 2
68117: PUSH
68118: EMPTY
68119: LIST
68120: ADD
68121: PPUSH
68122: CALL_OW 1
68126: ST_TO_ADDR
// end ;
68127: LD_VAR 0 3
68131: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
68132: LD_INT 0
68134: PPUSH
// if not mc_bases [ base ] then
68135: LD_EXP 57
68139: PUSH
68140: LD_VAR 0 1
68144: ARRAY
68145: NOT
68146: IFFALSE 68150
// exit ;
68148: GO 68262
// mc_defender := Replace ( mc_defender , base , deflist ) ;
68150: LD_ADDR_EXP 79
68154: PUSH
68155: LD_EXP 79
68159: PPUSH
68160: LD_VAR 0 1
68164: PPUSH
68165: LD_VAR 0 2
68169: PPUSH
68170: CALL_OW 1
68174: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
68175: LD_ADDR_EXP 68
68179: PUSH
68180: LD_EXP 68
68184: PPUSH
68185: LD_VAR 0 1
68189: PPUSH
68190: LD_VAR 0 2
68194: PUSH
68195: LD_INT 0
68197: PLUS
68198: PPUSH
68199: CALL_OW 1
68203: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
68204: LD_ADDR_EXP 76
68208: PUSH
68209: LD_EXP 76
68213: PPUSH
68214: LD_VAR 0 1
68218: PPUSH
68219: LD_EXP 76
68223: PUSH
68224: LD_VAR 0 1
68228: ARRAY
68229: PUSH
68230: LD_EXP 79
68234: PUSH
68235: LD_VAR 0 1
68239: ARRAY
68240: PPUSH
68241: LD_INT 21
68243: PUSH
68244: LD_INT 2
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PPUSH
68251: CALL_OW 72
68255: UNION
68256: PPUSH
68257: CALL_OW 1
68261: ST_TO_ADDR
// end ;
68262: LD_VAR 0 3
68266: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
68267: LD_INT 0
68269: PPUSH
// if not mc_bases [ base ] then
68270: LD_EXP 57
68274: PUSH
68275: LD_VAR 0 1
68279: ARRAY
68280: NOT
68281: IFFALSE 68285
// exit ;
68283: GO 68310
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
68285: LD_ADDR_EXP 68
68289: PUSH
68290: LD_EXP 68
68294: PPUSH
68295: LD_VAR 0 1
68299: PPUSH
68300: LD_VAR 0 2
68304: PPUSH
68305: CALL_OW 1
68309: ST_TO_ADDR
// end ;
68310: LD_VAR 0 3
68314: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
68315: LD_INT 0
68317: PPUSH
68318: PPUSH
68319: PPUSH
68320: PPUSH
// if not mc_bases [ base ] then
68321: LD_EXP 57
68325: PUSH
68326: LD_VAR 0 1
68330: ARRAY
68331: NOT
68332: IFFALSE 68336
// exit ;
68334: GO 68401
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
68336: LD_ADDR_EXP 77
68340: PUSH
68341: LD_EXP 77
68345: PPUSH
68346: LD_VAR 0 1
68350: PUSH
68351: LD_EXP 77
68355: PUSH
68356: LD_VAR 0 1
68360: ARRAY
68361: PUSH
68362: LD_INT 1
68364: PLUS
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PPUSH
68370: LD_VAR 0 1
68374: PUSH
68375: LD_VAR 0 2
68379: PUSH
68380: LD_VAR 0 3
68384: PUSH
68385: LD_VAR 0 4
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: PPUSH
68396: CALL 20124 0 3
68400: ST_TO_ADDR
// end ;
68401: LD_VAR 0 5
68405: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
68406: LD_INT 0
68408: PPUSH
// if not mc_bases [ base ] then
68409: LD_EXP 57
68413: PUSH
68414: LD_VAR 0 1
68418: ARRAY
68419: NOT
68420: IFFALSE 68424
// exit ;
68422: GO 68449
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
68424: LD_ADDR_EXP 93
68428: PUSH
68429: LD_EXP 93
68433: PPUSH
68434: LD_VAR 0 1
68438: PPUSH
68439: LD_VAR 0 2
68443: PPUSH
68444: CALL_OW 1
68448: ST_TO_ADDR
// end ;
68449: LD_VAR 0 3
68453: RET
// export function MC_GetMinesField ( base ) ; begin
68454: LD_INT 0
68456: PPUSH
// result := mc_mines [ base ] ;
68457: LD_ADDR_VAR 0 2
68461: PUSH
68462: LD_EXP 70
68466: PUSH
68467: LD_VAR 0 1
68471: ARRAY
68472: ST_TO_ADDR
// end ;
68473: LD_VAR 0 2
68477: RET
// export function MC_GetProduceList ( base ) ; begin
68478: LD_INT 0
68480: PPUSH
// result := mc_produce [ base ] ;
68481: LD_ADDR_VAR 0 2
68485: PUSH
68486: LD_EXP 78
68490: PUSH
68491: LD_VAR 0 1
68495: ARRAY
68496: ST_TO_ADDR
// end ;
68497: LD_VAR 0 2
68501: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
68502: LD_INT 0
68504: PPUSH
68505: PPUSH
// if not mc_bases then
68506: LD_EXP 57
68510: NOT
68511: IFFALSE 68515
// exit ;
68513: GO 68580
// if mc_bases [ base ] then
68515: LD_EXP 57
68519: PUSH
68520: LD_VAR 0 1
68524: ARRAY
68525: IFFALSE 68580
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
68527: LD_ADDR_VAR 0 3
68531: PUSH
68532: LD_EXP 57
68536: PUSH
68537: LD_VAR 0 1
68541: ARRAY
68542: PPUSH
68543: LD_INT 30
68545: PUSH
68546: LD_VAR 0 2
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PPUSH
68555: CALL_OW 72
68559: ST_TO_ADDR
// if result then
68560: LD_VAR 0 3
68564: IFFALSE 68580
// result := result [ 1 ] ;
68566: LD_ADDR_VAR 0 3
68570: PUSH
68571: LD_VAR 0 3
68575: PUSH
68576: LD_INT 1
68578: ARRAY
68579: ST_TO_ADDR
// end ; end ;
68580: LD_VAR 0 3
68584: RET
// export function MC_SetTame ( base , area ) ; begin
68585: LD_INT 0
68587: PPUSH
// if not mc_bases or not base then
68588: LD_EXP 57
68592: NOT
68593: PUSH
68594: LD_VAR 0 1
68598: NOT
68599: OR
68600: IFFALSE 68604
// exit ;
68602: GO 68629
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
68604: LD_ADDR_EXP 85
68608: PUSH
68609: LD_EXP 85
68613: PPUSH
68614: LD_VAR 0 1
68618: PPUSH
68619: LD_VAR 0 2
68623: PPUSH
68624: CALL_OW 1
68628: ST_TO_ADDR
// end ;
68629: LD_VAR 0 3
68633: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
68634: LD_INT 0
68636: PPUSH
68637: PPUSH
// if not mc_bases or not base then
68638: LD_EXP 57
68642: NOT
68643: PUSH
68644: LD_VAR 0 1
68648: NOT
68649: OR
68650: IFFALSE 68654
// exit ;
68652: GO 68756
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
68654: LD_ADDR_VAR 0 4
68658: PUSH
68659: LD_EXP 57
68663: PUSH
68664: LD_VAR 0 1
68668: ARRAY
68669: PPUSH
68670: LD_INT 30
68672: PUSH
68673: LD_VAR 0 2
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PPUSH
68682: CALL_OW 72
68686: ST_TO_ADDR
// if not tmp then
68687: LD_VAR 0 4
68691: NOT
68692: IFFALSE 68696
// exit ;
68694: GO 68756
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
68696: LD_ADDR_EXP 89
68700: PUSH
68701: LD_EXP 89
68705: PPUSH
68706: LD_VAR 0 1
68710: PPUSH
68711: LD_EXP 89
68715: PUSH
68716: LD_VAR 0 1
68720: ARRAY
68721: PPUSH
68722: LD_EXP 89
68726: PUSH
68727: LD_VAR 0 1
68731: ARRAY
68732: PUSH
68733: LD_INT 1
68735: PLUS
68736: PPUSH
68737: LD_VAR 0 4
68741: PUSH
68742: LD_INT 1
68744: ARRAY
68745: PPUSH
68746: CALL_OW 2
68750: PPUSH
68751: CALL_OW 1
68755: ST_TO_ADDR
// end ;
68756: LD_VAR 0 3
68760: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
68761: LD_INT 0
68763: PPUSH
68764: PPUSH
// if not mc_bases or not base or not kinds then
68765: LD_EXP 57
68769: NOT
68770: PUSH
68771: LD_VAR 0 1
68775: NOT
68776: OR
68777: PUSH
68778: LD_VAR 0 2
68782: NOT
68783: OR
68784: IFFALSE 68788
// exit ;
68786: GO 68849
// for i in kinds do
68788: LD_ADDR_VAR 0 4
68792: PUSH
68793: LD_VAR 0 2
68797: PUSH
68798: FOR_IN
68799: IFFALSE 68847
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
68801: LD_ADDR_EXP 91
68805: PUSH
68806: LD_EXP 91
68810: PPUSH
68811: LD_VAR 0 1
68815: PUSH
68816: LD_EXP 91
68820: PUSH
68821: LD_VAR 0 1
68825: ARRAY
68826: PUSH
68827: LD_INT 1
68829: PLUS
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PPUSH
68835: LD_VAR 0 4
68839: PPUSH
68840: CALL 20124 0 3
68844: ST_TO_ADDR
68845: GO 68798
68847: POP
68848: POP
// end ;
68849: LD_VAR 0 3
68853: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
68854: LD_INT 0
68856: PPUSH
// if not mc_bases or not base or not areas then
68857: LD_EXP 57
68861: NOT
68862: PUSH
68863: LD_VAR 0 1
68867: NOT
68868: OR
68869: PUSH
68870: LD_VAR 0 2
68874: NOT
68875: OR
68876: IFFALSE 68880
// exit ;
68878: GO 68905
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
68880: LD_ADDR_EXP 75
68884: PUSH
68885: LD_EXP 75
68889: PPUSH
68890: LD_VAR 0 1
68894: PPUSH
68895: LD_VAR 0 2
68899: PPUSH
68900: CALL_OW 1
68904: ST_TO_ADDR
// end ;
68905: LD_VAR 0 3
68909: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
68910: LD_INT 0
68912: PPUSH
// if not mc_bases or not base then
68913: LD_EXP 57
68917: NOT
68918: PUSH
68919: LD_VAR 0 1
68923: NOT
68924: OR
68925: IFFALSE 68929
// exit ;
68927: GO 68963
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
68929: LD_ADDR_EXP 92
68933: PUSH
68934: LD_EXP 92
68938: PPUSH
68939: LD_VAR 0 1
68943: PPUSH
68944: LD_VAR 0 2
68948: PUSH
68949: LD_VAR 0 3
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PPUSH
68958: CALL_OW 1
68962: ST_TO_ADDR
// end ;
68963: LD_VAR 0 4
68967: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
68968: LD_INT 0
68970: PPUSH
68971: PPUSH
68972: PPUSH
// if not mc_bases or not base or not ext_list then
68973: LD_EXP 57
68977: NOT
68978: PUSH
68979: LD_VAR 0 1
68983: NOT
68984: OR
68985: PUSH
68986: LD_VAR 0 5
68990: NOT
68991: OR
68992: IFFALSE 68996
// exit ;
68994: GO 69169
// tmp := GetFacExtXYD ( x , y , d ) ;
68996: LD_ADDR_VAR 0 8
69000: PUSH
69001: LD_VAR 0 2
69005: PPUSH
69006: LD_VAR 0 3
69010: PPUSH
69011: LD_VAR 0 4
69015: PPUSH
69016: CALL 51204 0 3
69020: ST_TO_ADDR
// if not tmp then
69021: LD_VAR 0 8
69025: NOT
69026: IFFALSE 69030
// exit ;
69028: GO 69169
// for i in tmp do
69030: LD_ADDR_VAR 0 7
69034: PUSH
69035: LD_VAR 0 8
69039: PUSH
69040: FOR_IN
69041: IFFALSE 69167
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
69043: LD_ADDR_EXP 62
69047: PUSH
69048: LD_EXP 62
69052: PPUSH
69053: LD_VAR 0 1
69057: PPUSH
69058: LD_EXP 62
69062: PUSH
69063: LD_VAR 0 1
69067: ARRAY
69068: PPUSH
69069: LD_EXP 62
69073: PUSH
69074: LD_VAR 0 1
69078: ARRAY
69079: PUSH
69080: LD_INT 1
69082: PLUS
69083: PPUSH
69084: LD_VAR 0 5
69088: PUSH
69089: LD_INT 1
69091: ARRAY
69092: PUSH
69093: LD_VAR 0 7
69097: PUSH
69098: LD_INT 1
69100: ARRAY
69101: PUSH
69102: LD_VAR 0 7
69106: PUSH
69107: LD_INT 2
69109: ARRAY
69110: PUSH
69111: LD_VAR 0 7
69115: PUSH
69116: LD_INT 3
69118: ARRAY
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: PPUSH
69126: CALL_OW 2
69130: PPUSH
69131: CALL_OW 1
69135: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
69136: LD_ADDR_VAR 0 5
69140: PUSH
69141: LD_VAR 0 5
69145: PPUSH
69146: LD_INT 1
69148: PPUSH
69149: CALL_OW 3
69153: ST_TO_ADDR
// if not ext_list then
69154: LD_VAR 0 5
69158: NOT
69159: IFFALSE 69165
// exit ;
69161: POP
69162: POP
69163: GO 69169
// end ;
69165: GO 69040
69167: POP
69168: POP
// end ;
69169: LD_VAR 0 6
69173: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
69174: LD_INT 0
69176: PPUSH
// if not mc_bases or not base or not weapon_list then
69177: LD_EXP 57
69181: NOT
69182: PUSH
69183: LD_VAR 0 1
69187: NOT
69188: OR
69189: PUSH
69190: LD_VAR 0 2
69194: NOT
69195: OR
69196: IFFALSE 69200
// exit ;
69198: GO 69225
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
69200: LD_ADDR_EXP 95
69204: PUSH
69205: LD_EXP 95
69209: PPUSH
69210: LD_VAR 0 1
69214: PPUSH
69215: LD_VAR 0 2
69219: PPUSH
69220: CALL_OW 1
69224: ST_TO_ADDR
// end ;
69225: LD_VAR 0 3
69229: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
69230: LD_INT 0
69232: PPUSH
// if not mc_bases or not base or not tech_list then
69233: LD_EXP 57
69237: NOT
69238: PUSH
69239: LD_VAR 0 1
69243: NOT
69244: OR
69245: PUSH
69246: LD_VAR 0 2
69250: NOT
69251: OR
69252: IFFALSE 69256
// exit ;
69254: GO 69281
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
69256: LD_ADDR_EXP 84
69260: PUSH
69261: LD_EXP 84
69265: PPUSH
69266: LD_VAR 0 1
69270: PPUSH
69271: LD_VAR 0 2
69275: PPUSH
69276: CALL_OW 1
69280: ST_TO_ADDR
// end ;
69281: LD_VAR 0 3
69285: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
69286: LD_INT 0
69288: PPUSH
// if not mc_bases or not parking_area or not base then
69289: LD_EXP 57
69293: NOT
69294: PUSH
69295: LD_VAR 0 2
69299: NOT
69300: OR
69301: PUSH
69302: LD_VAR 0 1
69306: NOT
69307: OR
69308: IFFALSE 69312
// exit ;
69310: GO 69337
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
69312: LD_ADDR_EXP 81
69316: PUSH
69317: LD_EXP 81
69321: PPUSH
69322: LD_VAR 0 1
69326: PPUSH
69327: LD_VAR 0 2
69331: PPUSH
69332: CALL_OW 1
69336: ST_TO_ADDR
// end ;
69337: LD_VAR 0 3
69341: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
69342: LD_INT 0
69344: PPUSH
// if not mc_bases or not base or not scan_area then
69345: LD_EXP 57
69349: NOT
69350: PUSH
69351: LD_VAR 0 1
69355: NOT
69356: OR
69357: PUSH
69358: LD_VAR 0 2
69362: NOT
69363: OR
69364: IFFALSE 69368
// exit ;
69366: GO 69393
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
69368: LD_ADDR_EXP 82
69372: PUSH
69373: LD_EXP 82
69377: PPUSH
69378: LD_VAR 0 1
69382: PPUSH
69383: LD_VAR 0 2
69387: PPUSH
69388: CALL_OW 1
69392: ST_TO_ADDR
// end ; end_of_file
69393: LD_VAR 0 3
69397: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
69398: LD_INT 0
69400: PPUSH
69401: PPUSH
69402: PPUSH
// if not mc_bases then
69403: LD_EXP 57
69407: NOT
69408: IFFALSE 69412
// exit ;
69410: GO 69577
// for i = 1 to mc_bases do
69412: LD_ADDR_VAR 0 4
69416: PUSH
69417: DOUBLE
69418: LD_INT 1
69420: DEC
69421: ST_TO_ADDR
69422: LD_EXP 57
69426: PUSH
69427: FOR_TO
69428: IFFALSE 69575
// begin if sci in mc_bases [ i ] then
69430: LD_VAR 0 2
69434: PUSH
69435: LD_EXP 57
69439: PUSH
69440: LD_VAR 0 4
69444: ARRAY
69445: IN
69446: IFFALSE 69573
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
69448: LD_ADDR_EXP 86
69452: PUSH
69453: LD_EXP 86
69457: PPUSH
69458: LD_VAR 0 4
69462: PUSH
69463: LD_EXP 86
69467: PUSH
69468: LD_VAR 0 4
69472: ARRAY
69473: PUSH
69474: LD_INT 1
69476: PLUS
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PPUSH
69482: LD_VAR 0 1
69486: PPUSH
69487: CALL 20124 0 3
69491: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
69492: LD_ADDR_VAR 0 5
69496: PUSH
69497: LD_EXP 57
69501: PUSH
69502: LD_VAR 0 4
69506: ARRAY
69507: PPUSH
69508: LD_INT 2
69510: PUSH
69511: LD_INT 30
69513: PUSH
69514: LD_INT 0
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 30
69523: PUSH
69524: LD_INT 1
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: LIST
69535: PPUSH
69536: CALL_OW 72
69540: PPUSH
69541: LD_VAR 0 1
69545: PPUSH
69546: CALL_OW 74
69550: ST_TO_ADDR
// if tmp then
69551: LD_VAR 0 5
69555: IFFALSE 69571
// ComStandNearbyBuilding ( ape , tmp ) ;
69557: LD_VAR 0 1
69561: PPUSH
69562: LD_VAR 0 5
69566: PPUSH
69567: CALL 14903 0 2
// break ;
69571: GO 69575
// end ; end ;
69573: GO 69427
69575: POP
69576: POP
// end ;
69577: LD_VAR 0 3
69581: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
69582: LD_INT 0
69584: PPUSH
69585: PPUSH
69586: PPUSH
// if not mc_bases then
69587: LD_EXP 57
69591: NOT
69592: IFFALSE 69596
// exit ;
69594: GO 69685
// for i = 1 to mc_bases do
69596: LD_ADDR_VAR 0 4
69600: PUSH
69601: DOUBLE
69602: LD_INT 1
69604: DEC
69605: ST_TO_ADDR
69606: LD_EXP 57
69610: PUSH
69611: FOR_TO
69612: IFFALSE 69683
// begin if building in mc_busy_turret_list [ i ] then
69614: LD_VAR 0 1
69618: PUSH
69619: LD_EXP 67
69623: PUSH
69624: LD_VAR 0 4
69628: ARRAY
69629: IN
69630: IFFALSE 69681
// begin tmp := mc_busy_turret_list [ i ] diff building ;
69632: LD_ADDR_VAR 0 5
69636: PUSH
69637: LD_EXP 67
69641: PUSH
69642: LD_VAR 0 4
69646: ARRAY
69647: PUSH
69648: LD_VAR 0 1
69652: DIFF
69653: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
69654: LD_ADDR_EXP 67
69658: PUSH
69659: LD_EXP 67
69663: PPUSH
69664: LD_VAR 0 4
69668: PPUSH
69669: LD_VAR 0 5
69673: PPUSH
69674: CALL_OW 1
69678: ST_TO_ADDR
// break ;
69679: GO 69683
// end ; end ;
69681: GO 69611
69683: POP
69684: POP
// end ;
69685: LD_VAR 0 3
69689: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
69690: LD_INT 0
69692: PPUSH
69693: PPUSH
69694: PPUSH
// if not mc_bases then
69695: LD_EXP 57
69699: NOT
69700: IFFALSE 69704
// exit ;
69702: GO 69903
// for i = 1 to mc_bases do
69704: LD_ADDR_VAR 0 5
69708: PUSH
69709: DOUBLE
69710: LD_INT 1
69712: DEC
69713: ST_TO_ADDR
69714: LD_EXP 57
69718: PUSH
69719: FOR_TO
69720: IFFALSE 69901
// if building in mc_bases [ i ] then
69722: LD_VAR 0 1
69726: PUSH
69727: LD_EXP 57
69731: PUSH
69732: LD_VAR 0 5
69736: ARRAY
69737: IN
69738: IFFALSE 69899
// begin tmp := mc_bases [ i ] diff building ;
69740: LD_ADDR_VAR 0 6
69744: PUSH
69745: LD_EXP 57
69749: PUSH
69750: LD_VAR 0 5
69754: ARRAY
69755: PUSH
69756: LD_VAR 0 1
69760: DIFF
69761: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
69762: LD_ADDR_EXP 57
69766: PUSH
69767: LD_EXP 57
69771: PPUSH
69772: LD_VAR 0 5
69776: PPUSH
69777: LD_VAR 0 6
69781: PPUSH
69782: CALL_OW 1
69786: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
69787: LD_VAR 0 1
69791: PUSH
69792: LD_EXP 65
69796: PUSH
69797: LD_VAR 0 5
69801: ARRAY
69802: IN
69803: IFFALSE 69842
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
69805: LD_ADDR_EXP 65
69809: PUSH
69810: LD_EXP 65
69814: PPUSH
69815: LD_VAR 0 5
69819: PPUSH
69820: LD_EXP 65
69824: PUSH
69825: LD_VAR 0 5
69829: ARRAY
69830: PUSH
69831: LD_VAR 0 1
69835: DIFF
69836: PPUSH
69837: CALL_OW 1
69841: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
69842: LD_VAR 0 1
69846: PUSH
69847: LD_EXP 66
69851: PUSH
69852: LD_VAR 0 5
69856: ARRAY
69857: IN
69858: IFFALSE 69897
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
69860: LD_ADDR_EXP 66
69864: PUSH
69865: LD_EXP 66
69869: PPUSH
69870: LD_VAR 0 5
69874: PPUSH
69875: LD_EXP 66
69879: PUSH
69880: LD_VAR 0 5
69884: ARRAY
69885: PUSH
69886: LD_VAR 0 1
69890: DIFF
69891: PPUSH
69892: CALL_OW 1
69896: ST_TO_ADDR
// break ;
69897: GO 69901
// end ;
69899: GO 69719
69901: POP
69902: POP
// end ;
69903: LD_VAR 0 4
69907: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
69908: LD_INT 0
69910: PPUSH
69911: PPUSH
69912: PPUSH
// if not mc_bases or not side in mc_sides then
69913: LD_EXP 57
69917: NOT
69918: PUSH
69919: LD_VAR 0 3
69923: PUSH
69924: LD_EXP 83
69928: IN
69929: NOT
69930: OR
69931: IFFALSE 69935
// exit ;
69933: GO 70058
// for i = 1 to mc_vehicles do
69935: LD_ADDR_VAR 0 6
69939: PUSH
69940: DOUBLE
69941: LD_INT 1
69943: DEC
69944: ST_TO_ADDR
69945: LD_EXP 76
69949: PUSH
69950: FOR_TO
69951: IFFALSE 70056
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
69953: LD_VAR 0 2
69957: PUSH
69958: LD_EXP 76
69962: PUSH
69963: LD_VAR 0 6
69967: ARRAY
69968: IN
69969: PUSH
69970: LD_VAR 0 1
69974: PUSH
69975: LD_EXP 76
69979: PUSH
69980: LD_VAR 0 6
69984: ARRAY
69985: IN
69986: OR
69987: IFFALSE 70054
// begin tmp := mc_vehicles [ i ] diff old ;
69989: LD_ADDR_VAR 0 7
69993: PUSH
69994: LD_EXP 76
69998: PUSH
69999: LD_VAR 0 6
70003: ARRAY
70004: PUSH
70005: LD_VAR 0 2
70009: DIFF
70010: ST_TO_ADDR
// tmp := tmp diff new ;
70011: LD_ADDR_VAR 0 7
70015: PUSH
70016: LD_VAR 0 7
70020: PUSH
70021: LD_VAR 0 1
70025: DIFF
70026: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
70027: LD_ADDR_EXP 76
70031: PUSH
70032: LD_EXP 76
70036: PPUSH
70037: LD_VAR 0 6
70041: PPUSH
70042: LD_VAR 0 7
70046: PPUSH
70047: CALL_OW 1
70051: ST_TO_ADDR
// break ;
70052: GO 70056
// end ;
70054: GO 69950
70056: POP
70057: POP
// end ;
70058: LD_VAR 0 5
70062: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
70063: LD_INT 0
70065: PPUSH
70066: PPUSH
70067: PPUSH
70068: PPUSH
// if not mc_bases then
70069: LD_EXP 57
70073: NOT
70074: IFFALSE 70078
// exit ;
70076: GO 70370
// side := GetSide ( vehicle ) ;
70078: LD_ADDR_VAR 0 5
70082: PUSH
70083: LD_VAR 0 1
70087: PPUSH
70088: CALL_OW 255
70092: ST_TO_ADDR
// for i = 1 to mc_bases do
70093: LD_ADDR_VAR 0 4
70097: PUSH
70098: DOUBLE
70099: LD_INT 1
70101: DEC
70102: ST_TO_ADDR
70103: LD_EXP 57
70107: PUSH
70108: FOR_TO
70109: IFFALSE 70368
// begin if factory in mc_bases [ i ] then
70111: LD_VAR 0 2
70115: PUSH
70116: LD_EXP 57
70120: PUSH
70121: LD_VAR 0 4
70125: ARRAY
70126: IN
70127: IFFALSE 70366
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
70129: LD_EXP 79
70133: PUSH
70134: LD_VAR 0 4
70138: ARRAY
70139: PUSH
70140: LD_EXP 68
70144: PUSH
70145: LD_VAR 0 4
70149: ARRAY
70150: LESS
70151: IFFALSE 70322
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
70153: LD_ADDR_EXP 79
70157: PUSH
70158: LD_EXP 79
70162: PPUSH
70163: LD_VAR 0 4
70167: PPUSH
70168: LD_EXP 79
70172: PUSH
70173: LD_VAR 0 4
70177: ARRAY
70178: PUSH
70179: LD_VAR 0 1
70183: ADD
70184: PPUSH
70185: CALL_OW 1
70189: ST_TO_ADDR
// if not mc_scan [ i ] then
70190: LD_EXP 80
70194: PUSH
70195: LD_VAR 0 4
70199: ARRAY
70200: NOT
70201: IFFALSE 70320
// begin if GetControl ( vehicle ) = control_remote then
70203: LD_VAR 0 1
70207: PPUSH
70208: CALL_OW 263
70212: PUSH
70213: LD_INT 2
70215: EQUAL
70216: IFFALSE 70236
// repeat wait ( 0 0$1 ) ;
70218: LD_INT 35
70220: PPUSH
70221: CALL_OW 67
// until IsControledBy ( vehicle ) ;
70225: LD_VAR 0 1
70229: PPUSH
70230: CALL_OW 312
70234: IFFALSE 70218
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
70236: LD_VAR 0 1
70240: PPUSH
70241: LD_EXP 81
70245: PUSH
70246: LD_VAR 0 4
70250: ARRAY
70251: PPUSH
70252: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
70256: LD_VAR 0 1
70260: PPUSH
70261: CALL_OW 263
70265: PUSH
70266: LD_INT 1
70268: NONEQUAL
70269: IFFALSE 70273
// break ;
70271: GO 70368
// repeat wait ( 0 0$1 ) ;
70273: LD_INT 35
70275: PPUSH
70276: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
70280: LD_VAR 0 1
70284: PPUSH
70285: LD_EXP 81
70289: PUSH
70290: LD_VAR 0 4
70294: ARRAY
70295: PPUSH
70296: CALL_OW 308
70300: IFFALSE 70273
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
70302: LD_VAR 0 1
70306: PPUSH
70307: CALL_OW 311
70311: PPUSH
70312: CALL_OW 121
// exit ;
70316: POP
70317: POP
70318: GO 70370
// end ; end else
70320: GO 70366
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
70322: LD_ADDR_EXP 76
70326: PUSH
70327: LD_EXP 76
70331: PPUSH
70332: LD_VAR 0 4
70336: PUSH
70337: LD_EXP 76
70341: PUSH
70342: LD_VAR 0 4
70346: ARRAY
70347: PUSH
70348: LD_INT 1
70350: PLUS
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PPUSH
70356: LD_VAR 0 1
70360: PPUSH
70361: CALL 20124 0 3
70365: ST_TO_ADDR
// end ; end ;
70366: GO 70108
70368: POP
70369: POP
// end ;
70370: LD_VAR 0 3
70374: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
70375: LD_INT 0
70377: PPUSH
70378: PPUSH
70379: PPUSH
70380: PPUSH
// if not mc_bases then
70381: LD_EXP 57
70385: NOT
70386: IFFALSE 70390
// exit ;
70388: GO 70743
// repeat wait ( 0 0$1 ) ;
70390: LD_INT 35
70392: PPUSH
70393: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
70397: LD_VAR 0 2
70401: PPUSH
70402: LD_VAR 0 3
70406: PPUSH
70407: CALL_OW 284
70411: IFFALSE 70390
// if GetResourceTypeXY ( x , y ) = mat_artefact then
70413: LD_VAR 0 2
70417: PPUSH
70418: LD_VAR 0 3
70422: PPUSH
70423: CALL_OW 283
70427: PUSH
70428: LD_INT 4
70430: EQUAL
70431: IFFALSE 70435
// exit ;
70433: GO 70743
// for i = 1 to mc_bases do
70435: LD_ADDR_VAR 0 7
70439: PUSH
70440: DOUBLE
70441: LD_INT 1
70443: DEC
70444: ST_TO_ADDR
70445: LD_EXP 57
70449: PUSH
70450: FOR_TO
70451: IFFALSE 70741
// begin if mc_crates_area [ i ] then
70453: LD_EXP 75
70457: PUSH
70458: LD_VAR 0 7
70462: ARRAY
70463: IFFALSE 70574
// for j in mc_crates_area [ i ] do
70465: LD_ADDR_VAR 0 8
70469: PUSH
70470: LD_EXP 75
70474: PUSH
70475: LD_VAR 0 7
70479: ARRAY
70480: PUSH
70481: FOR_IN
70482: IFFALSE 70572
// if InArea ( x , y , j ) then
70484: LD_VAR 0 2
70488: PPUSH
70489: LD_VAR 0 3
70493: PPUSH
70494: LD_VAR 0 8
70498: PPUSH
70499: CALL_OW 309
70503: IFFALSE 70570
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
70505: LD_ADDR_EXP 73
70509: PUSH
70510: LD_EXP 73
70514: PPUSH
70515: LD_VAR 0 7
70519: PUSH
70520: LD_EXP 73
70524: PUSH
70525: LD_VAR 0 7
70529: ARRAY
70530: PUSH
70531: LD_INT 1
70533: PLUS
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PPUSH
70539: LD_VAR 0 4
70543: PUSH
70544: LD_VAR 0 2
70548: PUSH
70549: LD_VAR 0 3
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: LIST
70558: PPUSH
70559: CALL 20124 0 3
70563: ST_TO_ADDR
// exit ;
70564: POP
70565: POP
70566: POP
70567: POP
70568: GO 70743
// end ;
70570: GO 70481
70572: POP
70573: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70574: LD_ADDR_VAR 0 9
70578: PUSH
70579: LD_EXP 57
70583: PUSH
70584: LD_VAR 0 7
70588: ARRAY
70589: PPUSH
70590: LD_INT 2
70592: PUSH
70593: LD_INT 30
70595: PUSH
70596: LD_INT 0
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 30
70605: PUSH
70606: LD_INT 1
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: LIST
70617: PPUSH
70618: CALL_OW 72
70622: ST_TO_ADDR
// if not depot then
70623: LD_VAR 0 9
70627: NOT
70628: IFFALSE 70632
// continue ;
70630: GO 70450
// for j in depot do
70632: LD_ADDR_VAR 0 8
70636: PUSH
70637: LD_VAR 0 9
70641: PUSH
70642: FOR_IN
70643: IFFALSE 70737
// if GetDistUnitXY ( j , x , y ) < 30 then
70645: LD_VAR 0 8
70649: PPUSH
70650: LD_VAR 0 2
70654: PPUSH
70655: LD_VAR 0 3
70659: PPUSH
70660: CALL_OW 297
70664: PUSH
70665: LD_INT 30
70667: LESS
70668: IFFALSE 70735
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
70670: LD_ADDR_EXP 73
70674: PUSH
70675: LD_EXP 73
70679: PPUSH
70680: LD_VAR 0 7
70684: PUSH
70685: LD_EXP 73
70689: PUSH
70690: LD_VAR 0 7
70694: ARRAY
70695: PUSH
70696: LD_INT 1
70698: PLUS
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PPUSH
70704: LD_VAR 0 4
70708: PUSH
70709: LD_VAR 0 2
70713: PUSH
70714: LD_VAR 0 3
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: LIST
70723: PPUSH
70724: CALL 20124 0 3
70728: ST_TO_ADDR
// exit ;
70729: POP
70730: POP
70731: POP
70732: POP
70733: GO 70743
// end ;
70735: GO 70642
70737: POP
70738: POP
// end ;
70739: GO 70450
70741: POP
70742: POP
// end ;
70743: LD_VAR 0 6
70747: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
70748: LD_INT 0
70750: PPUSH
70751: PPUSH
70752: PPUSH
70753: PPUSH
// side := GetSide ( lab ) ;
70754: LD_ADDR_VAR 0 4
70758: PUSH
70759: LD_VAR 0 2
70763: PPUSH
70764: CALL_OW 255
70768: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
70769: LD_VAR 0 4
70773: PUSH
70774: LD_EXP 83
70778: IN
70779: NOT
70780: PUSH
70781: LD_EXP 84
70785: NOT
70786: OR
70787: PUSH
70788: LD_EXP 57
70792: NOT
70793: OR
70794: IFFALSE 70798
// exit ;
70796: GO 71031
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
70798: LD_ADDR_EXP 84
70802: PUSH
70803: LD_EXP 84
70807: PPUSH
70808: LD_VAR 0 4
70812: PPUSH
70813: LD_EXP 84
70817: PUSH
70818: LD_VAR 0 4
70822: ARRAY
70823: PUSH
70824: LD_VAR 0 1
70828: DIFF
70829: PPUSH
70830: CALL_OW 1
70834: ST_TO_ADDR
// for i = 1 to mc_bases do
70835: LD_ADDR_VAR 0 5
70839: PUSH
70840: DOUBLE
70841: LD_INT 1
70843: DEC
70844: ST_TO_ADDR
70845: LD_EXP 57
70849: PUSH
70850: FOR_TO
70851: IFFALSE 71029
// begin if lab in mc_bases [ i ] then
70853: LD_VAR 0 2
70857: PUSH
70858: LD_EXP 57
70862: PUSH
70863: LD_VAR 0 5
70867: ARRAY
70868: IN
70869: IFFALSE 71027
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
70871: LD_VAR 0 1
70875: PUSH
70876: LD_INT 11
70878: PUSH
70879: LD_INT 4
70881: PUSH
70882: LD_INT 3
70884: PUSH
70885: LD_INT 2
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: IN
70894: PUSH
70895: LD_EXP 87
70899: PUSH
70900: LD_VAR 0 5
70904: ARRAY
70905: AND
70906: IFFALSE 71027
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
70908: LD_ADDR_VAR 0 6
70912: PUSH
70913: LD_EXP 87
70917: PUSH
70918: LD_VAR 0 5
70922: ARRAY
70923: PUSH
70924: LD_INT 1
70926: ARRAY
70927: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
70928: LD_ADDR_EXP 87
70932: PUSH
70933: LD_EXP 87
70937: PPUSH
70938: LD_VAR 0 5
70942: PPUSH
70943: EMPTY
70944: PPUSH
70945: CALL_OW 1
70949: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
70950: LD_VAR 0 6
70954: PPUSH
70955: LD_INT 0
70957: PPUSH
70958: CALL_OW 109
// ComExitBuilding ( tmp ) ;
70962: LD_VAR 0 6
70966: PPUSH
70967: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
70971: LD_ADDR_EXP 86
70975: PUSH
70976: LD_EXP 86
70980: PPUSH
70981: LD_VAR 0 5
70985: PPUSH
70986: LD_EXP 86
70990: PUSH
70991: LD_VAR 0 5
70995: ARRAY
70996: PPUSH
70997: LD_INT 1
70999: PPUSH
71000: LD_VAR 0 6
71004: PPUSH
71005: CALL_OW 2
71009: PPUSH
71010: CALL_OW 1
71014: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
71015: LD_VAR 0 5
71019: PPUSH
71020: LD_INT 112
71022: PPUSH
71023: CALL 54992 0 2
// end ; end ; end ;
71027: GO 70850
71029: POP
71030: POP
// end ;
71031: LD_VAR 0 3
71035: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
71036: LD_INT 0
71038: PPUSH
71039: PPUSH
71040: PPUSH
71041: PPUSH
71042: PPUSH
71043: PPUSH
71044: PPUSH
71045: PPUSH
// if not mc_bases then
71046: LD_EXP 57
71050: NOT
71051: IFFALSE 71055
// exit ;
71053: GO 71980
// for i = 1 to mc_bases do
71055: LD_ADDR_VAR 0 3
71059: PUSH
71060: DOUBLE
71061: LD_INT 1
71063: DEC
71064: ST_TO_ADDR
71065: LD_EXP 57
71069: PUSH
71070: FOR_TO
71071: IFFALSE 71978
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
71073: LD_VAR 0 1
71077: PUSH
71078: LD_EXP 57
71082: PUSH
71083: LD_VAR 0 3
71087: ARRAY
71088: IN
71089: PUSH
71090: LD_VAR 0 1
71094: PUSH
71095: LD_EXP 64
71099: PUSH
71100: LD_VAR 0 3
71104: ARRAY
71105: IN
71106: OR
71107: PUSH
71108: LD_VAR 0 1
71112: PUSH
71113: LD_EXP 76
71117: PUSH
71118: LD_VAR 0 3
71122: ARRAY
71123: IN
71124: OR
71125: PUSH
71126: LD_VAR 0 1
71130: PUSH
71131: LD_EXP 86
71135: PUSH
71136: LD_VAR 0 3
71140: ARRAY
71141: IN
71142: OR
71143: PUSH
71144: LD_VAR 0 1
71148: PUSH
71149: LD_EXP 87
71153: PUSH
71154: LD_VAR 0 3
71158: ARRAY
71159: IN
71160: OR
71161: IFFALSE 71976
// begin if un in mc_ape [ i ] then
71163: LD_VAR 0 1
71167: PUSH
71168: LD_EXP 86
71172: PUSH
71173: LD_VAR 0 3
71177: ARRAY
71178: IN
71179: IFFALSE 71218
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
71181: LD_ADDR_EXP 86
71185: PUSH
71186: LD_EXP 86
71190: PPUSH
71191: LD_VAR 0 3
71195: PPUSH
71196: LD_EXP 86
71200: PUSH
71201: LD_VAR 0 3
71205: ARRAY
71206: PUSH
71207: LD_VAR 0 1
71211: DIFF
71212: PPUSH
71213: CALL_OW 1
71217: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
71218: LD_VAR 0 1
71222: PUSH
71223: LD_EXP 87
71227: PUSH
71228: LD_VAR 0 3
71232: ARRAY
71233: IN
71234: IFFALSE 71258
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
71236: LD_ADDR_EXP 87
71240: PUSH
71241: LD_EXP 87
71245: PPUSH
71246: LD_VAR 0 3
71250: PPUSH
71251: EMPTY
71252: PPUSH
71253: CALL_OW 1
71257: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
71258: LD_VAR 0 1
71262: PPUSH
71263: CALL_OW 247
71267: PUSH
71268: LD_INT 2
71270: EQUAL
71271: PUSH
71272: LD_VAR 0 1
71276: PPUSH
71277: CALL_OW 110
71281: PUSH
71282: LD_INT 20
71284: EQUAL
71285: AND
71286: IFFALSE 71389
// begin fac := MC_GetBuilding ( i , b_factory ) ;
71288: LD_ADDR_VAR 0 8
71292: PUSH
71293: LD_VAR 0 3
71297: PPUSH
71298: LD_INT 3
71300: PPUSH
71301: CALL 68502 0 2
71305: ST_TO_ADDR
// if fac then
71306: LD_VAR 0 8
71310: IFFALSE 71389
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
71312: LD_ADDR_VAR 0 9
71316: PUSH
71317: LD_VAR 0 8
71321: PPUSH
71322: LD_VAR 0 1
71326: PPUSH
71327: CALL_OW 265
71331: PPUSH
71332: LD_VAR 0 1
71336: PPUSH
71337: CALL_OW 262
71341: PPUSH
71342: LD_VAR 0 1
71346: PPUSH
71347: CALL_OW 263
71351: PPUSH
71352: LD_VAR 0 1
71356: PPUSH
71357: CALL_OW 264
71361: PPUSH
71362: CALL 17289 0 5
71366: ST_TO_ADDR
// if components then
71367: LD_VAR 0 9
71371: IFFALSE 71387
// MC_InsertProduceList ( i , components ) ;
71373: LD_VAR 0 3
71377: PPUSH
71378: LD_VAR 0 9
71382: PPUSH
71383: CALL 68069 0 2
// break ;
71387: GO 71978
// end ; end ; if GetType ( un ) = unit_building then
71389: LD_VAR 0 1
71393: PPUSH
71394: CALL_OW 247
71398: PUSH
71399: LD_INT 3
71401: EQUAL
71402: IFFALSE 71699
// begin btype := GetBType ( un ) ;
71404: LD_ADDR_VAR 0 5
71408: PUSH
71409: LD_VAR 0 1
71413: PPUSH
71414: CALL_OW 266
71418: ST_TO_ADDR
// if btype = b_warehouse then
71419: LD_VAR 0 5
71423: PUSH
71424: LD_INT 1
71426: EQUAL
71427: IFFALSE 71445
// begin btype := b_depot ;
71429: LD_ADDR_VAR 0 5
71433: PUSH
71434: LD_INT 0
71436: ST_TO_ADDR
// pos := 1 ;
71437: LD_ADDR_VAR 0 6
71441: PUSH
71442: LD_INT 1
71444: ST_TO_ADDR
// end ; if btype = b_factory then
71445: LD_VAR 0 5
71449: PUSH
71450: LD_INT 3
71452: EQUAL
71453: IFFALSE 71471
// begin btype := b_workshop ;
71455: LD_ADDR_VAR 0 5
71459: PUSH
71460: LD_INT 2
71462: ST_TO_ADDR
// pos := 1 ;
71463: LD_ADDR_VAR 0 6
71467: PUSH
71468: LD_INT 1
71470: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
71471: LD_VAR 0 5
71475: PUSH
71476: LD_INT 7
71478: PUSH
71479: LD_INT 8
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: IN
71486: IFFALSE 71496
// btype := b_lab ;
71488: LD_ADDR_VAR 0 5
71492: PUSH
71493: LD_INT 6
71495: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
71496: LD_ADDR_EXP 62
71500: PUSH
71501: LD_EXP 62
71505: PPUSH
71506: LD_VAR 0 3
71510: PUSH
71511: LD_EXP 62
71515: PUSH
71516: LD_VAR 0 3
71520: ARRAY
71521: PUSH
71522: LD_INT 1
71524: PLUS
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PPUSH
71530: LD_VAR 0 5
71534: PUSH
71535: LD_VAR 0 1
71539: PPUSH
71540: CALL_OW 250
71544: PUSH
71545: LD_VAR 0 1
71549: PPUSH
71550: CALL_OW 251
71554: PUSH
71555: LD_VAR 0 1
71559: PPUSH
71560: CALL_OW 254
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: PPUSH
71571: CALL 20124 0 3
71575: ST_TO_ADDR
// if pos = 1 then
71576: LD_VAR 0 6
71580: PUSH
71581: LD_INT 1
71583: EQUAL
71584: IFFALSE 71699
// begin tmp := mc_build_list [ i ] ;
71586: LD_ADDR_VAR 0 7
71590: PUSH
71591: LD_EXP 62
71595: PUSH
71596: LD_VAR 0 3
71600: ARRAY
71601: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
71602: LD_VAR 0 7
71606: PPUSH
71607: LD_INT 2
71609: PUSH
71610: LD_INT 30
71612: PUSH
71613: LD_INT 0
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PUSH
71620: LD_INT 30
71622: PUSH
71623: LD_INT 1
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: LIST
71634: PPUSH
71635: CALL_OW 72
71639: IFFALSE 71649
// pos := 2 ;
71641: LD_ADDR_VAR 0 6
71645: PUSH
71646: LD_INT 2
71648: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
71649: LD_ADDR_VAR 0 7
71653: PUSH
71654: LD_VAR 0 7
71658: PPUSH
71659: LD_VAR 0 6
71663: PPUSH
71664: LD_VAR 0 7
71668: PPUSH
71669: CALL 20015 0 3
71673: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
71674: LD_ADDR_EXP 62
71678: PUSH
71679: LD_EXP 62
71683: PPUSH
71684: LD_VAR 0 3
71688: PPUSH
71689: LD_VAR 0 7
71693: PPUSH
71694: CALL_OW 1
71698: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
71699: LD_VAR 0 1
71703: PUSH
71704: LD_EXP 57
71708: PUSH
71709: LD_VAR 0 3
71713: ARRAY
71714: IN
71715: IFFALSE 71754
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
71717: LD_ADDR_EXP 57
71721: PUSH
71722: LD_EXP 57
71726: PPUSH
71727: LD_VAR 0 3
71731: PPUSH
71732: LD_EXP 57
71736: PUSH
71737: LD_VAR 0 3
71741: ARRAY
71742: PUSH
71743: LD_VAR 0 1
71747: DIFF
71748: PPUSH
71749: CALL_OW 1
71753: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
71754: LD_VAR 0 1
71758: PUSH
71759: LD_EXP 64
71763: PUSH
71764: LD_VAR 0 3
71768: ARRAY
71769: IN
71770: IFFALSE 71809
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
71772: LD_ADDR_EXP 64
71776: PUSH
71777: LD_EXP 64
71781: PPUSH
71782: LD_VAR 0 3
71786: PPUSH
71787: LD_EXP 64
71791: PUSH
71792: LD_VAR 0 3
71796: ARRAY
71797: PUSH
71798: LD_VAR 0 1
71802: DIFF
71803: PPUSH
71804: CALL_OW 1
71808: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
71809: LD_VAR 0 1
71813: PUSH
71814: LD_EXP 76
71818: PUSH
71819: LD_VAR 0 3
71823: ARRAY
71824: IN
71825: IFFALSE 71864
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
71827: LD_ADDR_EXP 76
71831: PUSH
71832: LD_EXP 76
71836: PPUSH
71837: LD_VAR 0 3
71841: PPUSH
71842: LD_EXP 76
71846: PUSH
71847: LD_VAR 0 3
71851: ARRAY
71852: PUSH
71853: LD_VAR 0 1
71857: DIFF
71858: PPUSH
71859: CALL_OW 1
71863: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
71864: LD_VAR 0 1
71868: PUSH
71869: LD_EXP 66
71873: PUSH
71874: LD_VAR 0 3
71878: ARRAY
71879: IN
71880: IFFALSE 71919
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
71882: LD_ADDR_EXP 66
71886: PUSH
71887: LD_EXP 66
71891: PPUSH
71892: LD_VAR 0 3
71896: PPUSH
71897: LD_EXP 66
71901: PUSH
71902: LD_VAR 0 3
71906: ARRAY
71907: PUSH
71908: LD_VAR 0 1
71912: DIFF
71913: PPUSH
71914: CALL_OW 1
71918: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
71919: LD_VAR 0 1
71923: PUSH
71924: LD_EXP 65
71928: PUSH
71929: LD_VAR 0 3
71933: ARRAY
71934: IN
71935: IFFALSE 71974
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
71937: LD_ADDR_EXP 65
71941: PUSH
71942: LD_EXP 65
71946: PPUSH
71947: LD_VAR 0 3
71951: PPUSH
71952: LD_EXP 65
71956: PUSH
71957: LD_VAR 0 3
71961: ARRAY
71962: PUSH
71963: LD_VAR 0 1
71967: DIFF
71968: PPUSH
71969: CALL_OW 1
71973: ST_TO_ADDR
// end ; break ;
71974: GO 71978
// end ;
71976: GO 71070
71978: POP
71979: POP
// end ;
71980: LD_VAR 0 2
71984: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
71985: LD_INT 0
71987: PPUSH
71988: PPUSH
71989: PPUSH
// if not mc_bases then
71990: LD_EXP 57
71994: NOT
71995: IFFALSE 71999
// exit ;
71997: GO 72214
// for i = 1 to mc_bases do
71999: LD_ADDR_VAR 0 3
72003: PUSH
72004: DOUBLE
72005: LD_INT 1
72007: DEC
72008: ST_TO_ADDR
72009: LD_EXP 57
72013: PUSH
72014: FOR_TO
72015: IFFALSE 72212
// begin if building in mc_construct_list [ i ] then
72017: LD_VAR 0 1
72021: PUSH
72022: LD_EXP 64
72026: PUSH
72027: LD_VAR 0 3
72031: ARRAY
72032: IN
72033: IFFALSE 72210
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
72035: LD_ADDR_EXP 64
72039: PUSH
72040: LD_EXP 64
72044: PPUSH
72045: LD_VAR 0 3
72049: PPUSH
72050: LD_EXP 64
72054: PUSH
72055: LD_VAR 0 3
72059: ARRAY
72060: PUSH
72061: LD_VAR 0 1
72065: DIFF
72066: PPUSH
72067: CALL_OW 1
72071: ST_TO_ADDR
// if building in mc_lab [ i ] then
72072: LD_VAR 0 1
72076: PUSH
72077: LD_EXP 90
72081: PUSH
72082: LD_VAR 0 3
72086: ARRAY
72087: IN
72088: IFFALSE 72143
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
72090: LD_ADDR_EXP 91
72094: PUSH
72095: LD_EXP 91
72099: PPUSH
72100: LD_VAR 0 3
72104: PPUSH
72105: LD_EXP 91
72109: PUSH
72110: LD_VAR 0 3
72114: ARRAY
72115: PPUSH
72116: LD_INT 1
72118: PPUSH
72119: LD_EXP 91
72123: PUSH
72124: LD_VAR 0 3
72128: ARRAY
72129: PPUSH
72130: LD_INT 0
72132: PPUSH
72133: CALL 19107 0 4
72137: PPUSH
72138: CALL_OW 1
72142: ST_TO_ADDR
// if not building in mc_bases [ i ] then
72143: LD_VAR 0 1
72147: PUSH
72148: LD_EXP 57
72152: PUSH
72153: LD_VAR 0 3
72157: ARRAY
72158: IN
72159: NOT
72160: IFFALSE 72206
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
72162: LD_ADDR_EXP 57
72166: PUSH
72167: LD_EXP 57
72171: PPUSH
72172: LD_VAR 0 3
72176: PUSH
72177: LD_EXP 57
72181: PUSH
72182: LD_VAR 0 3
72186: ARRAY
72187: PUSH
72188: LD_INT 1
72190: PLUS
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PPUSH
72196: LD_VAR 0 1
72200: PPUSH
72201: CALL 20124 0 3
72205: ST_TO_ADDR
// exit ;
72206: POP
72207: POP
72208: GO 72214
// end ; end ;
72210: GO 72014
72212: POP
72213: POP
// end ;
72214: LD_VAR 0 2
72218: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
72219: LD_INT 0
72221: PPUSH
72222: PPUSH
72223: PPUSH
72224: PPUSH
72225: PPUSH
72226: PPUSH
72227: PPUSH
// if not mc_bases then
72228: LD_EXP 57
72232: NOT
72233: IFFALSE 72237
// exit ;
72235: GO 72898
// for i = 1 to mc_bases do
72237: LD_ADDR_VAR 0 3
72241: PUSH
72242: DOUBLE
72243: LD_INT 1
72245: DEC
72246: ST_TO_ADDR
72247: LD_EXP 57
72251: PUSH
72252: FOR_TO
72253: IFFALSE 72896
// begin if building in mc_construct_list [ i ] then
72255: LD_VAR 0 1
72259: PUSH
72260: LD_EXP 64
72264: PUSH
72265: LD_VAR 0 3
72269: ARRAY
72270: IN
72271: IFFALSE 72894
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
72273: LD_ADDR_EXP 64
72277: PUSH
72278: LD_EXP 64
72282: PPUSH
72283: LD_VAR 0 3
72287: PPUSH
72288: LD_EXP 64
72292: PUSH
72293: LD_VAR 0 3
72297: ARRAY
72298: PUSH
72299: LD_VAR 0 1
72303: DIFF
72304: PPUSH
72305: CALL_OW 1
72309: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
72310: LD_ADDR_EXP 57
72314: PUSH
72315: LD_EXP 57
72319: PPUSH
72320: LD_VAR 0 3
72324: PUSH
72325: LD_EXP 57
72329: PUSH
72330: LD_VAR 0 3
72334: ARRAY
72335: PUSH
72336: LD_INT 1
72338: PLUS
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PPUSH
72344: LD_VAR 0 1
72348: PPUSH
72349: CALL 20124 0 3
72353: ST_TO_ADDR
// btype := GetBType ( building ) ;
72354: LD_ADDR_VAR 0 5
72358: PUSH
72359: LD_VAR 0 1
72363: PPUSH
72364: CALL_OW 266
72368: ST_TO_ADDR
// side := GetSide ( building ) ;
72369: LD_ADDR_VAR 0 8
72373: PUSH
72374: LD_VAR 0 1
72378: PPUSH
72379: CALL_OW 255
72383: ST_TO_ADDR
// if btype = b_lab then
72384: LD_VAR 0 5
72388: PUSH
72389: LD_INT 6
72391: EQUAL
72392: IFFALSE 72442
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
72394: LD_ADDR_EXP 90
72398: PUSH
72399: LD_EXP 90
72403: PPUSH
72404: LD_VAR 0 3
72408: PUSH
72409: LD_EXP 90
72413: PUSH
72414: LD_VAR 0 3
72418: ARRAY
72419: PUSH
72420: LD_INT 1
72422: PLUS
72423: PUSH
72424: EMPTY
72425: LIST
72426: LIST
72427: PPUSH
72428: LD_VAR 0 1
72432: PPUSH
72433: CALL 20124 0 3
72437: ST_TO_ADDR
// exit ;
72438: POP
72439: POP
72440: GO 72898
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
72442: LD_VAR 0 5
72446: PUSH
72447: LD_INT 0
72449: PUSH
72450: LD_INT 2
72452: PUSH
72453: LD_INT 4
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: LIST
72460: IN
72461: IFFALSE 72585
// begin if btype = b_armoury then
72463: LD_VAR 0 5
72467: PUSH
72468: LD_INT 4
72470: EQUAL
72471: IFFALSE 72481
// btype := b_barracks ;
72473: LD_ADDR_VAR 0 5
72477: PUSH
72478: LD_INT 5
72480: ST_TO_ADDR
// if btype = b_depot then
72481: LD_VAR 0 5
72485: PUSH
72486: LD_INT 0
72488: EQUAL
72489: IFFALSE 72499
// btype := b_warehouse ;
72491: LD_ADDR_VAR 0 5
72495: PUSH
72496: LD_INT 1
72498: ST_TO_ADDR
// if btype = b_workshop then
72499: LD_VAR 0 5
72503: PUSH
72504: LD_INT 2
72506: EQUAL
72507: IFFALSE 72517
// btype := b_factory ;
72509: LD_ADDR_VAR 0 5
72513: PUSH
72514: LD_INT 3
72516: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
72517: LD_VAR 0 5
72521: PPUSH
72522: LD_VAR 0 8
72526: PPUSH
72527: CALL_OW 323
72531: PUSH
72532: LD_INT 1
72534: EQUAL
72535: IFFALSE 72581
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
72537: LD_ADDR_EXP 89
72541: PUSH
72542: LD_EXP 89
72546: PPUSH
72547: LD_VAR 0 3
72551: PUSH
72552: LD_EXP 89
72556: PUSH
72557: LD_VAR 0 3
72561: ARRAY
72562: PUSH
72563: LD_INT 1
72565: PLUS
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PPUSH
72571: LD_VAR 0 1
72575: PPUSH
72576: CALL 20124 0 3
72580: ST_TO_ADDR
// exit ;
72581: POP
72582: POP
72583: GO 72898
// end ; if btype in [ b_bunker , b_turret ] then
72585: LD_VAR 0 5
72589: PUSH
72590: LD_INT 32
72592: PUSH
72593: LD_INT 33
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: IN
72600: IFFALSE 72890
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
72602: LD_ADDR_EXP 65
72606: PUSH
72607: LD_EXP 65
72611: PPUSH
72612: LD_VAR 0 3
72616: PUSH
72617: LD_EXP 65
72621: PUSH
72622: LD_VAR 0 3
72626: ARRAY
72627: PUSH
72628: LD_INT 1
72630: PLUS
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PPUSH
72636: LD_VAR 0 1
72640: PPUSH
72641: CALL 20124 0 3
72645: ST_TO_ADDR
// if btype = b_bunker then
72646: LD_VAR 0 5
72650: PUSH
72651: LD_INT 32
72653: EQUAL
72654: IFFALSE 72890
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
72656: LD_ADDR_EXP 66
72660: PUSH
72661: LD_EXP 66
72665: PPUSH
72666: LD_VAR 0 3
72670: PUSH
72671: LD_EXP 66
72675: PUSH
72676: LD_VAR 0 3
72680: ARRAY
72681: PUSH
72682: LD_INT 1
72684: PLUS
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: PPUSH
72690: LD_VAR 0 1
72694: PPUSH
72695: CALL 20124 0 3
72699: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
72700: LD_ADDR_VAR 0 6
72704: PUSH
72705: LD_EXP 57
72709: PUSH
72710: LD_VAR 0 3
72714: ARRAY
72715: PPUSH
72716: LD_INT 25
72718: PUSH
72719: LD_INT 1
72721: PUSH
72722: EMPTY
72723: LIST
72724: LIST
72725: PUSH
72726: LD_INT 3
72728: PUSH
72729: LD_INT 54
72731: PUSH
72732: EMPTY
72733: LIST
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PPUSH
72743: CALL_OW 72
72747: ST_TO_ADDR
// if tmp then
72748: LD_VAR 0 6
72752: IFFALSE 72758
// exit ;
72754: POP
72755: POP
72756: GO 72898
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
72758: LD_ADDR_VAR 0 6
72762: PUSH
72763: LD_EXP 57
72767: PUSH
72768: LD_VAR 0 3
72772: ARRAY
72773: PPUSH
72774: LD_INT 2
72776: PUSH
72777: LD_INT 30
72779: PUSH
72780: LD_INT 4
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: PUSH
72787: LD_INT 30
72789: PUSH
72790: LD_INT 5
72792: PUSH
72793: EMPTY
72794: LIST
72795: LIST
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: LIST
72801: PPUSH
72802: CALL_OW 72
72806: ST_TO_ADDR
// if not tmp then
72807: LD_VAR 0 6
72811: NOT
72812: IFFALSE 72818
// exit ;
72814: POP
72815: POP
72816: GO 72898
// for j in tmp do
72818: LD_ADDR_VAR 0 4
72822: PUSH
72823: LD_VAR 0 6
72827: PUSH
72828: FOR_IN
72829: IFFALSE 72888
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
72831: LD_ADDR_VAR 0 7
72835: PUSH
72836: LD_VAR 0 4
72840: PPUSH
72841: CALL_OW 313
72845: PPUSH
72846: LD_INT 25
72848: PUSH
72849: LD_INT 1
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PPUSH
72856: CALL_OW 72
72860: ST_TO_ADDR
// if units then
72861: LD_VAR 0 7
72865: IFFALSE 72886
// begin ComExitBuilding ( units [ 1 ] ) ;
72867: LD_VAR 0 7
72871: PUSH
72872: LD_INT 1
72874: ARRAY
72875: PPUSH
72876: CALL_OW 122
// exit ;
72880: POP
72881: POP
72882: POP
72883: POP
72884: GO 72898
// end ; end ;
72886: GO 72828
72888: POP
72889: POP
// end ; end ; exit ;
72890: POP
72891: POP
72892: GO 72898
// end ; end ;
72894: GO 72252
72896: POP
72897: POP
// end ;
72898: LD_VAR 0 2
72902: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
72903: LD_INT 0
72905: PPUSH
72906: PPUSH
72907: PPUSH
72908: PPUSH
72909: PPUSH
72910: PPUSH
72911: PPUSH
// if not mc_bases then
72912: LD_EXP 57
72916: NOT
72917: IFFALSE 72921
// exit ;
72919: GO 73152
// btype := GetBType ( building ) ;
72921: LD_ADDR_VAR 0 6
72925: PUSH
72926: LD_VAR 0 1
72930: PPUSH
72931: CALL_OW 266
72935: ST_TO_ADDR
// x := GetX ( building ) ;
72936: LD_ADDR_VAR 0 7
72940: PUSH
72941: LD_VAR 0 1
72945: PPUSH
72946: CALL_OW 250
72950: ST_TO_ADDR
// y := GetY ( building ) ;
72951: LD_ADDR_VAR 0 8
72955: PUSH
72956: LD_VAR 0 1
72960: PPUSH
72961: CALL_OW 251
72965: ST_TO_ADDR
// d := GetDir ( building ) ;
72966: LD_ADDR_VAR 0 9
72970: PUSH
72971: LD_VAR 0 1
72975: PPUSH
72976: CALL_OW 254
72980: ST_TO_ADDR
// for i = 1 to mc_bases do
72981: LD_ADDR_VAR 0 4
72985: PUSH
72986: DOUBLE
72987: LD_INT 1
72989: DEC
72990: ST_TO_ADDR
72991: LD_EXP 57
72995: PUSH
72996: FOR_TO
72997: IFFALSE 73150
// begin if not mc_build_list [ i ] then
72999: LD_EXP 62
73003: PUSH
73004: LD_VAR 0 4
73008: ARRAY
73009: NOT
73010: IFFALSE 73014
// continue ;
73012: GO 72996
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
73014: LD_VAR 0 6
73018: PUSH
73019: LD_VAR 0 7
73023: PUSH
73024: LD_VAR 0 8
73028: PUSH
73029: LD_VAR 0 9
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: PPUSH
73040: LD_EXP 62
73044: PUSH
73045: LD_VAR 0 4
73049: ARRAY
73050: PUSH
73051: LD_INT 1
73053: ARRAY
73054: PPUSH
73055: CALL 25611 0 2
73059: IFFALSE 73148
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
73061: LD_ADDR_EXP 62
73065: PUSH
73066: LD_EXP 62
73070: PPUSH
73071: LD_VAR 0 4
73075: PPUSH
73076: LD_EXP 62
73080: PUSH
73081: LD_VAR 0 4
73085: ARRAY
73086: PPUSH
73087: LD_INT 1
73089: PPUSH
73090: CALL_OW 3
73094: PPUSH
73095: CALL_OW 1
73099: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
73100: LD_ADDR_EXP 64
73104: PUSH
73105: LD_EXP 64
73109: PPUSH
73110: LD_VAR 0 4
73114: PUSH
73115: LD_EXP 64
73119: PUSH
73120: LD_VAR 0 4
73124: ARRAY
73125: PUSH
73126: LD_INT 1
73128: PLUS
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PPUSH
73134: LD_VAR 0 1
73138: PPUSH
73139: CALL 20124 0 3
73143: ST_TO_ADDR
// exit ;
73144: POP
73145: POP
73146: GO 73152
// end ; end ;
73148: GO 72996
73150: POP
73151: POP
// end ;
73152: LD_VAR 0 3
73156: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
73157: LD_INT 0
73159: PPUSH
73160: PPUSH
73161: PPUSH
// if not mc_bases then
73162: LD_EXP 57
73166: NOT
73167: IFFALSE 73171
// exit ;
73169: GO 73361
// for i = 1 to mc_bases do
73171: LD_ADDR_VAR 0 4
73175: PUSH
73176: DOUBLE
73177: LD_INT 1
73179: DEC
73180: ST_TO_ADDR
73181: LD_EXP 57
73185: PUSH
73186: FOR_TO
73187: IFFALSE 73274
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
73189: LD_VAR 0 1
73193: PUSH
73194: LD_EXP 65
73198: PUSH
73199: LD_VAR 0 4
73203: ARRAY
73204: IN
73205: PUSH
73206: LD_VAR 0 1
73210: PUSH
73211: LD_EXP 66
73215: PUSH
73216: LD_VAR 0 4
73220: ARRAY
73221: IN
73222: NOT
73223: AND
73224: IFFALSE 73272
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
73226: LD_ADDR_EXP 66
73230: PUSH
73231: LD_EXP 66
73235: PPUSH
73236: LD_VAR 0 4
73240: PUSH
73241: LD_EXP 66
73245: PUSH
73246: LD_VAR 0 4
73250: ARRAY
73251: PUSH
73252: LD_INT 1
73254: PLUS
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PPUSH
73260: LD_VAR 0 1
73264: PPUSH
73265: CALL 20124 0 3
73269: ST_TO_ADDR
// break ;
73270: GO 73274
// end ; end ;
73272: GO 73186
73274: POP
73275: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
73276: LD_VAR 0 1
73280: PPUSH
73281: CALL_OW 257
73285: PUSH
73286: LD_EXP 83
73290: IN
73291: PUSH
73292: LD_VAR 0 1
73296: PPUSH
73297: CALL_OW 266
73301: PUSH
73302: LD_INT 5
73304: EQUAL
73305: AND
73306: PUSH
73307: LD_VAR 0 2
73311: PPUSH
73312: CALL_OW 110
73316: PUSH
73317: LD_INT 18
73319: NONEQUAL
73320: AND
73321: IFFALSE 73361
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
73323: LD_VAR 0 2
73327: PPUSH
73328: CALL_OW 257
73332: PUSH
73333: LD_INT 5
73335: PUSH
73336: LD_INT 8
73338: PUSH
73339: LD_INT 9
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: LIST
73346: IN
73347: IFFALSE 73361
// SetClass ( unit , 1 ) ;
73349: LD_VAR 0 2
73353: PPUSH
73354: LD_INT 1
73356: PPUSH
73357: CALL_OW 336
// end ;
73361: LD_VAR 0 3
73365: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
73366: LD_INT 0
73368: PPUSH
73369: PPUSH
// if not mc_bases then
73370: LD_EXP 57
73374: NOT
73375: IFFALSE 73379
// exit ;
73377: GO 73495
// if GetLives ( abandoned_vehicle ) > 250 then
73379: LD_VAR 0 2
73383: PPUSH
73384: CALL_OW 256
73388: PUSH
73389: LD_INT 250
73391: GREATER
73392: IFFALSE 73396
// exit ;
73394: GO 73495
// for i = 1 to mc_bases do
73396: LD_ADDR_VAR 0 6
73400: PUSH
73401: DOUBLE
73402: LD_INT 1
73404: DEC
73405: ST_TO_ADDR
73406: LD_EXP 57
73410: PUSH
73411: FOR_TO
73412: IFFALSE 73493
// begin if driver in mc_bases [ i ] then
73414: LD_VAR 0 1
73418: PUSH
73419: LD_EXP 57
73423: PUSH
73424: LD_VAR 0 6
73428: ARRAY
73429: IN
73430: IFFALSE 73491
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
73432: LD_VAR 0 1
73436: PPUSH
73437: LD_EXP 57
73441: PUSH
73442: LD_VAR 0 6
73446: ARRAY
73447: PPUSH
73448: LD_INT 2
73450: PUSH
73451: LD_INT 30
73453: PUSH
73454: LD_INT 0
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: LD_INT 30
73463: PUSH
73464: LD_INT 1
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: EMPTY
73472: LIST
73473: LIST
73474: LIST
73475: PPUSH
73476: CALL_OW 72
73480: PUSH
73481: LD_INT 1
73483: ARRAY
73484: PPUSH
73485: CALL_OW 112
// break ;
73489: GO 73493
// end ; end ;
73491: GO 73411
73493: POP
73494: POP
// end ;
73495: LD_VAR 0 5
73499: RET
