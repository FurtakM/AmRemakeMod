// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitVariables ;
   8: CALL 587 0 0
// InitMacro ;
  12: CALL 50215 0 0
// PrepareNature ( 3 , 3 , 3 , 4 , 3 , 0 , 0 , nature_area , 0 ) ;
  16: LD_INT 3
  18: PPUSH
  19: LD_INT 3
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 4
  27: PPUSH
  28: LD_INT 3
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: LD_INT 5
  39: PPUSH
  40: LD_INT 0
  42: PPUSH
  43: CALL 46036 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_russian , 0 ) ;
  47: LD_INT 0
  49: PPUSH
  50: LD_INT 0
  52: PPUSH
  53: LD_INT 5
  55: PPUSH
  56: LD_INT 0
  58: PPUSH
  59: LD_INT 0
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: LD_INT 0
  67: PPUSH
  68: LD_INT 8
  70: PPUSH
  71: LD_INT 0
  73: PPUSH
  74: CALL 46036 0 9
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 1 , 0 , area_apeman_arabian , 0 ) ;
  78: LD_INT 0
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 6
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: LD_INT 0
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: LD_INT 6
 101: PPUSH
 102: LD_INT 0
 104: PPUSH
 105: CALL 46036 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_alliance , 0 ) ;
 109: LD_INT 0
 111: PPUSH
 112: LD_INT 0
 114: PPUSH
 115: LD_INT 5
 117: PPUSH
 118: LD_INT 0
 120: PPUSH
 121: LD_INT 0
 123: PPUSH
 124: LD_INT 0
 126: PPUSH
 127: LD_INT 0
 129: PPUSH
 130: LD_INT 12
 132: PPUSH
 133: LD_INT 0
 135: PPUSH
 136: CALL 46036 0 9
// PrepareArabian ;
 140: CALL 3406 0 0
// PrepareRussian ;
 144: CALL 2533 0 0
// PrepareAlliance ;
 148: CALL 697 0 0
// MC_Start ( ) ;
 152: CALL 50428 0 0
// if debug then
 156: LD_EXP 1
 160: IFFALSE 169
// FogOff ( 1 ) ;
 162: LD_INT 1
 164: PPUSH
 165: CALL_OW 344
// Action ;
 169: CALL 5821 0 0
// end ;
 173: END
// export function CustomInitMacro ; var i ; begin
 174: LD_INT 0
 176: PPUSH
 177: PPUSH
// mc_parking := [ parking_arabian , parking_russian ] ;
 178: LD_ADDR_EXP 81
 182: PUSH
 183: LD_INT 1
 185: PUSH
 186: LD_INT 2
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: ST_TO_ADDR
// mc_scan_area := [ area_base_arabian , area_base_russian ] ;
 193: LD_ADDR_EXP 82
 197: PUSH
 198: LD_INT 3
 200: PUSH
 201: LD_INT 4
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 12 , 15 , 18 ] [ Difficulty ] , minefield ) ;
 208: LD_INT 1
 210: PPUSH
 211: LD_INT 12
 213: PUSH
 214: LD_INT 15
 216: PUSH
 217: LD_INT 18
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: PUSH
 225: LD_OWVAR 67
 229: ARRAY
 230: PPUSH
 231: LD_INT 7
 233: PPUSH
 234: CALL 63420 0 3
// MC_SetDefenderList ( 1 , arabian_guard ) ;
 238: LD_INT 1
 240: PPUSH
 241: LD_EXP 53
 245: PPUSH
 246: CALL 63789 0 2
// MC_SetTame ( 1 , area_apeman_arabian ) ;
 250: LD_INT 1
 252: PPUSH
 253: LD_INT 6
 255: PPUSH
 256: CALL 64146 0 2
// MC_SetCratesArea ( 1 , [ area_collect_arabian ] ) ;
 260: LD_INT 1
 262: PPUSH
 263: LD_INT 9
 265: PUSH
 266: EMPTY
 267: LIST
 268: PPUSH
 269: CALL 64288 0 2
// MC_InsertProduceList ( 1 , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 13
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: LD_INT 2
 284: PUSH
 285: LD_INT 32
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL 63726 0 2
// MC_SetLabKind ( 2 , [ b_lab_computer , b_lab_spacetime , b_lab_weapon , b_lab_siberium ] ) ;
 298: LD_INT 2
 300: PPUSH
 301: LD_INT 12
 303: PUSH
 304: LD_INT 14
 306: PUSH
 307: LD_INT 10
 309: PUSH
 310: LD_INT 11
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: PPUSH
 319: CALL 64195 0 2
// MC_SetDefenderList ( 2 , russian_guard ) ;
 323: LD_INT 2
 325: PPUSH
 326: LD_EXP 50
 330: PPUSH
 331: CALL 63789 0 2
// MC_SetTame ( 2 , area_apeman_russian ) ;
 335: LD_INT 2
 337: PPUSH
 338: LD_INT 8
 340: PPUSH
 341: CALL 64146 0 2
// MC_SetCratesArea ( 2 , [ area_collect_russian ] ) ;
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 10
 350: PUSH
 351: EMPTY
 352: LIST
 353: PPUSH
 354: CALL 64288 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 71 , 116 , 4 ] , [ b_armoury , 85 , 116 , 4 ] , [ b_bunker , 83 , 111 , 4 ] , [ b_bunker , 87 , 121 , 4 ] , [ b_turret , 88 , 128 , 4 ] , [ b_bunker , 59 , 89 , 3 ] , [ b_turret , 69 , 98 , 3 ] , [ b_turret , 77 , 103 , 3 ] , [ b_turret , 83 , 105 , 3 ] , [ b_turret , 71 , 125 , 5 ] ] ) ;
 358: LD_INT 2
 360: PPUSH
 361: LD_INT 6
 363: PUSH
 364: LD_INT 71
 366: PUSH
 367: LD_INT 116
 369: PUSH
 370: LD_INT 4
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_INT 4
 381: PUSH
 382: LD_INT 85
 384: PUSH
 385: LD_INT 116
 387: PUSH
 388: LD_INT 4
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 32
 399: PUSH
 400: LD_INT 83
 402: PUSH
 403: LD_INT 111
 405: PUSH
 406: LD_INT 4
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 32
 417: PUSH
 418: LD_INT 87
 420: PUSH
 421: LD_INT 121
 423: PUSH
 424: LD_INT 4
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 33
 435: PUSH
 436: LD_INT 88
 438: PUSH
 439: LD_INT 128
 441: PUSH
 442: LD_INT 4
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 32
 453: PUSH
 454: LD_INT 59
 456: PUSH
 457: LD_INT 89
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 33
 471: PUSH
 472: LD_INT 69
 474: PUSH
 475: LD_INT 98
 477: PUSH
 478: LD_INT 3
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 33
 489: PUSH
 490: LD_INT 77
 492: PUSH
 493: LD_INT 103
 495: PUSH
 496: LD_INT 3
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_INT 33
 507: PUSH
 508: LD_INT 83
 510: PUSH
 511: LD_INT 105
 513: PUSH
 514: LD_INT 3
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 33
 525: PUSH
 526: LD_INT 71
 528: PUSH
 529: LD_INT 125
 531: PUSH
 532: LD_INT 5
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL 63630 0 2
// MC_InsertProduceList ( 2 , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ) ;
 557: LD_INT 2
 559: PPUSH
 560: LD_INT 21
 562: PUSH
 563: LD_INT 1
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 51
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL 63726 0 2
// end ;
 582: LD_VAR 0 1
 586: RET
// export debug , game , freedom , gossudarov_arrive , ru_lab_builded , player_spotted , first_attack , ar_base_spotted , ar_active_attack , ar_attackers , first_powell_attack , abdul_escaped , loss_counter ; function InitVariables ; begin
 587: LD_INT 0
 589: PPUSH
// debug := 1 ;
 590: LD_ADDR_EXP 1
 594: PUSH
 595: LD_INT 1
 597: ST_TO_ADDR
// game := true ;
 598: LD_ADDR_EXP 2
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// gossudarov_arrive := false ;
 606: LD_ADDR_EXP 4
 610: PUSH
 611: LD_INT 0
 613: ST_TO_ADDR
// ru_lab_builded := false ;
 614: LD_ADDR_EXP 5
 618: PUSH
 619: LD_INT 0
 621: ST_TO_ADDR
// player_spotted := false ;
 622: LD_ADDR_EXP 6
 626: PUSH
 627: LD_INT 0
 629: ST_TO_ADDR
// first_attack := false ;
 630: LD_ADDR_EXP 7
 634: PUSH
 635: LD_INT 0
 637: ST_TO_ADDR
// ru_attackers := [ ] ;
 638: LD_ADDR_EXP 51
 642: PUSH
 643: EMPTY
 644: ST_TO_ADDR
// ar_base_spotted := false ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_INT 0
 652: ST_TO_ADDR
// ar_active_attack := false ;
 653: LD_ADDR_EXP 9
 657: PUSH
 658: LD_INT 0
 660: ST_TO_ADDR
// ar_attackers := [ ] ;
 661: LD_ADDR_EXP 10
 665: PUSH
 666: EMPTY
 667: ST_TO_ADDR
// first_powell_attack := false ;
 668: LD_ADDR_EXP 11
 672: PUSH
 673: LD_INT 0
 675: ST_TO_ADDR
// abdul_escaped := false ;
 676: LD_ADDR_EXP 12
 680: PUSH
 681: LD_INT 0
 683: ST_TO_ADDR
// loss_counter := 0 ;
 684: LD_ADDR_EXP 13
 688: PUSH
 689: LD_INT 0
 691: ST_TO_ADDR
// end ; end_of_file
 692: LD_VAR 0 1
 696: RET
// export JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export Gossudarov , Kirilenkova , Titov , Fadeev , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov ; export Burlak , Belkov , Gnyevko ; export Masha ; export function PrepareAlliance ; var veh , i , tmp ; begin
 697: LD_INT 0
 699: PPUSH
 700: PPUSH
 701: PPUSH
 702: PPUSH
// uc_side := 7 ;
 703: LD_ADDR_OWVAR 20
 707: PUSH
 708: LD_INT 7
 710: ST_TO_ADDR
// uc_nation := 1 ;
 711: LD_ADDR_OWVAR 21
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 12a_ ) ;
 719: LD_ADDR_EXP 14
 723: PUSH
 724: LD_STRING JMM
 726: PPUSH
 727: LD_EXP 1
 731: NOT
 732: PPUSH
 733: LD_STRING 12a_
 735: PPUSH
 736: CALL 12680 0 3
 740: ST_TO_ADDR
// PlaceUnitXY ( JMM , 71 , 23 , false ) ;
 741: LD_EXP 14
 745: PPUSH
 746: LD_INT 71
 748: PPUSH
 749: LD_INT 23
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL_OW 48
// SetClass ( JMM , 2 ) ;
 759: LD_EXP 14
 763: PPUSH
 764: LD_INT 2
 766: PPUSH
 767: CALL_OW 336
// Roth := PrepareUnit ( Roth , ( not debug ) , 12a_ ) ;
 771: LD_ADDR_EXP 15
 775: PUSH
 776: LD_STRING Roth
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_STRING 12a_
 787: PPUSH
 788: CALL 12680 0 3
 792: ST_TO_ADDR
// if Roth then
 793: LD_EXP 15
 797: IFFALSE 817
// PlaceUnitXY ( Roth , 71 , 21 , false ) ;
 799: LD_EXP 15
 803: PPUSH
 804: LD_INT 71
 806: PPUSH
 807: LD_INT 21
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL_OW 48
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 12a_ ) ;
 817: LD_ADDR_EXP 16
 821: PUSH
 822: LD_STRING Lisa
 824: PPUSH
 825: LD_EXP 1
 829: NOT
 830: PPUSH
 831: LD_STRING 12a_
 833: PPUSH
 834: CALL 12680 0 3
 838: ST_TO_ADDR
// if Lisa then
 839: LD_EXP 16
 843: IFFALSE 860
// PlaceUnitArea ( Lisa , alliance_start , false ) ;
 845: LD_EXP 16
 849: PPUSH
 850: LD_INT 13
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 49
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 12a_ ) ;
 860: LD_ADDR_EXP 17
 864: PUSH
 865: LD_STRING Donaldson
 867: PPUSH
 868: LD_EXP 1
 872: NOT
 873: PPUSH
 874: LD_STRING 12a_
 876: PPUSH
 877: CALL 12680 0 3
 881: ST_TO_ADDR
// if Donaldson then
 882: LD_EXP 17
 886: IFFALSE 903
// PlaceUnitArea ( Donaldson , alliance_start , false ) ;
 888: LD_EXP 17
 892: PPUSH
 893: LD_INT 13
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 49
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 12a_ ) ;
 903: LD_ADDR_EXP 18
 907: PUSH
 908: LD_STRING Bobby
 910: PPUSH
 911: LD_EXP 1
 915: NOT
 916: PPUSH
 917: LD_STRING 12a_
 919: PPUSH
 920: CALL 12680 0 3
 924: ST_TO_ADDR
// if Bobby then
 925: LD_EXP 18
 929: IFFALSE 946
// PlaceUnitArea ( Bobby , alliance_start , false ) ;
 931: LD_EXP 18
 935: PPUSH
 936: LD_INT 13
 938: PPUSH
 939: LD_INT 0
 941: PPUSH
 942: CALL_OW 49
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 12a_ ) ;
 946: LD_ADDR_EXP 19
 950: PUSH
 951: LD_STRING Cyrus
 953: PPUSH
 954: LD_EXP 1
 958: NOT
 959: PPUSH
 960: LD_STRING 12a_
 962: PPUSH
 963: CALL 12680 0 3
 967: ST_TO_ADDR
// if Cyrus then
 968: LD_EXP 19
 972: IFFALSE 989
// PlaceUnitArea ( Cyrus , alliance_start , false ) ;
 974: LD_EXP 19
 978: PPUSH
 979: LD_INT 13
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 49
// Denis := PrepareUnit ( Denis , ( not debug ) , 12a_ ) ;
 989: LD_ADDR_EXP 20
 993: PUSH
 994: LD_STRING Denis
 996: PPUSH
 997: LD_EXP 1
1001: NOT
1002: PPUSH
1003: LD_STRING 12a_
1005: PPUSH
1006: CALL 12680 0 3
1010: ST_TO_ADDR
// if Denis then
1011: LD_EXP 20
1015: IFFALSE 1032
// PlaceUnitArea ( Denis , alliance_start , false ) ;
1017: LD_EXP 20
1021: PPUSH
1022: LD_INT 13
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// Brown := PrepareUnit ( Brown , ( not debug ) , 12a_ ) ;
1032: LD_ADDR_EXP 21
1036: PUSH
1037: LD_STRING Brown
1039: PPUSH
1040: LD_EXP 1
1044: NOT
1045: PPUSH
1046: LD_STRING 12a_
1048: PPUSH
1049: CALL 12680 0 3
1053: ST_TO_ADDR
// if Brown then
1054: LD_EXP 21
1058: IFFALSE 1075
// PlaceUnitArea ( Brown , alliance_start , false ) ;
1060: LD_EXP 21
1064: PPUSH
1065: LD_INT 13
1067: PPUSH
1068: LD_INT 0
1070: PPUSH
1071: CALL_OW 49
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 12a_ ) ;
1075: LD_ADDR_EXP 22
1079: PUSH
1080: LD_STRING Gladstone
1082: PPUSH
1083: LD_EXP 1
1087: NOT
1088: PPUSH
1089: LD_STRING 12a_
1091: PPUSH
1092: CALL 12680 0 3
1096: ST_TO_ADDR
// if Gladstone then
1097: LD_EXP 22
1101: IFFALSE 1118
// PlaceUnitArea ( Gladstone , alliance_start , false ) ;
1103: LD_EXP 22
1107: PPUSH
1108: LD_INT 13
1110: PPUSH
1111: LD_INT 0
1113: PPUSH
1114: CALL_OW 49
// Houten := PrepareUnit ( Houten , ( not debug ) , 12a_ ) ;
1118: LD_ADDR_EXP 23
1122: PUSH
1123: LD_STRING Houten
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_STRING 12a_
1134: PPUSH
1135: CALL 12680 0 3
1139: ST_TO_ADDR
// if Houten then
1140: LD_EXP 23
1144: IFFALSE 1161
// PlaceUnitArea ( Houten , alliance_start , false ) ;
1146: LD_EXP 23
1150: PPUSH
1151: LD_INT 13
1153: PPUSH
1154: LD_INT 0
1156: PPUSH
1157: CALL_OW 49
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 12a_ ) ;
1161: LD_ADDR_EXP 24
1165: PUSH
1166: LD_STRING Cornel
1168: PPUSH
1169: LD_EXP 1
1173: NOT
1174: PPUSH
1175: LD_STRING 12a_
1177: PPUSH
1178: CALL 12680 0 3
1182: ST_TO_ADDR
// if Cornel then
1183: LD_EXP 24
1187: IFFALSE 1204
// PlaceUnitArea ( Cornel , alliance_start , false ) ;
1189: LD_EXP 24
1193: PPUSH
1194: LD_INT 13
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 49
// Gary := PrepareUnit ( Gary , ( not debug ) , 12a_ ) ;
1204: LD_ADDR_EXP 25
1208: PUSH
1209: LD_STRING Gary
1211: PPUSH
1212: LD_EXP 1
1216: NOT
1217: PPUSH
1218: LD_STRING 12a_
1220: PPUSH
1221: CALL 12680 0 3
1225: ST_TO_ADDR
// if Gary then
1226: LD_EXP 25
1230: IFFALSE 1247
// PlaceUnitArea ( Gary , alliance_start , false ) ;
1232: LD_EXP 25
1236: PPUSH
1237: LD_INT 13
1239: PPUSH
1240: LD_INT 0
1242: PPUSH
1243: CALL_OW 49
// Frank := PrepareUnit ( Frank , ( not debug ) , 12a_ ) ;
1247: LD_ADDR_EXP 26
1251: PUSH
1252: LD_STRING Frank
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_STRING 12a_
1263: PPUSH
1264: CALL 12680 0 3
1268: ST_TO_ADDR
// if Frank then
1269: LD_EXP 26
1273: IFFALSE 1290
// PlaceUnitArea ( Frank , alliance_start , false ) ;
1275: LD_EXP 26
1279: PPUSH
1280: LD_INT 13
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 49
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 12a_ ) ;
1290: LD_ADDR_EXP 27
1294: PUSH
1295: LD_STRING Kikuchi
1297: PPUSH
1298: LD_EXP 1
1302: NOT
1303: PPUSH
1304: LD_STRING 12a_
1306: PPUSH
1307: CALL 12680 0 3
1311: ST_TO_ADDR
// if Kikuchi then
1312: LD_EXP 27
1316: IFFALSE 1333
// PlaceUnitArea ( Kikuchi , alliance_start , false ) ;
1318: LD_EXP 27
1322: PPUSH
1323: LD_INT 13
1325: PPUSH
1326: LD_INT 0
1328: PPUSH
1329: CALL_OW 49
// Simms := PrepareUnit ( Simms , ( not debug ) , 12a_ ) ;
1333: LD_ADDR_EXP 28
1337: PUSH
1338: LD_STRING Simms
1340: PPUSH
1341: LD_EXP 1
1345: NOT
1346: PPUSH
1347: LD_STRING 12a_
1349: PPUSH
1350: CALL 12680 0 3
1354: ST_TO_ADDR
// if Simms then
1355: LD_EXP 28
1359: IFFALSE 1376
// PlaceUnitArea ( Simms , alliance_start , false ) ;
1361: LD_EXP 28
1365: PPUSH
1366: LD_INT 13
1368: PPUSH
1369: LD_INT 0
1371: PPUSH
1372: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 12a_ ) ;
1376: LD_ADDR_EXP 29
1380: PUSH
1381: LD_STRING Joan
1383: PPUSH
1384: LD_EXP 1
1388: NOT
1389: PPUSH
1390: LD_STRING 12a_
1392: PPUSH
1393: CALL 12680 0 3
1397: ST_TO_ADDR
// if Joan then
1398: LD_EXP 29
1402: IFFALSE 1419
// PlaceUnitArea ( Joan , alliance_start , false ) ;
1404: LD_EXP 29
1408: PPUSH
1409: LD_INT 13
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 12a_ ) ;
1419: LD_ADDR_EXP 30
1423: PUSH
1424: LD_STRING DeltaDoctor
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_STRING 12a_
1435: PPUSH
1436: CALL 12680 0 3
1440: ST_TO_ADDR
// if DeltaDoctor then
1441: LD_EXP 30
1445: IFFALSE 1462
// PlaceUnitArea ( DeltaDoctor , alliance_start , false ) ;
1447: LD_EXP 30
1451: PPUSH
1452: LD_INT 13
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// tmp := CreateCharacterSet ( 12a_others ) ;
1462: LD_ADDR_VAR 0 4
1466: PUSH
1467: LD_STRING 12a_others
1469: PPUSH
1470: CALL_OW 31
1474: ST_TO_ADDR
// if tmp then
1475: LD_VAR 0 4
1479: IFFALSE 1513
// for i in tmp do
1481: LD_ADDR_VAR 0 3
1485: PUSH
1486: LD_VAR 0 4
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1511
// PlaceUnitArea ( i , alliance_start , false ) ;
1494: LD_VAR 0 3
1498: PPUSH
1499: LD_INT 13
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 49
1509: GO 1491
1511: POP
1512: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1513: LD_INT 3
1515: PPUSH
1516: LD_INT 3
1518: PPUSH
1519: LD_INT 3
1521: PPUSH
1522: LD_INT 12
1524: PPUSH
1525: LD_INT 100
1527: PPUSH
1528: CALL 18752 0 5
// veh := CreateVehicle ;
1532: LD_ADDR_VAR 0 2
1536: PUSH
1537: CALL_OW 45
1541: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1542: LD_VAR 0 2
1546: PPUSH
1547: LD_INT 2
1549: PPUSH
1550: CALL_OW 233
// PlaceUnitXY ( veh , 63 , 9 , false ) ;
1554: LD_VAR 0 2
1558: PPUSH
1559: LD_INT 63
1561: PPUSH
1562: LD_INT 9
1564: PPUSH
1565: LD_INT 0
1567: PPUSH
1568: CALL_OW 48
// SetCargo ( veh , mat_artifact , 30 ) ;
1572: LD_VAR 0 2
1576: PPUSH
1577: LD_INT 4
1579: PPUSH
1580: LD_INT 30
1582: PPUSH
1583: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , debug ) then
1587: LD_STRING 11_artifact_captured
1589: PPUSH
1590: LD_EXP 1
1594: PPUSH
1595: CALL_OW 30
1599: IFFALSE 1675
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1601: LD_INT 3
1603: PPUSH
1604: LD_INT 3
1606: PPUSH
1607: LD_INT 3
1609: PPUSH
1610: LD_INT 12
1612: PPUSH
1613: LD_INT 100
1615: PPUSH
1616: CALL 18752 0 5
// veh := CreateVehicle ;
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: CALL_OW 45
1629: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1630: LD_VAR 0 2
1634: PPUSH
1635: LD_INT 2
1637: PPUSH
1638: CALL_OW 233
// PlaceUnitXY ( veh , 60 , 4 , false ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_INT 60
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 0
1655: PPUSH
1656: CALL_OW 48
// SetCargo ( veh , mat_artifact , 50 ) ;
1660: LD_VAR 0 2
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: LD_INT 50
1670: PPUSH
1671: CALL_OW 290
// end ; end ;
1675: LD_VAR 0 1
1679: RET
// export function PrepareGossudarov ; var tmp , i ; begin
1680: LD_INT 0
1682: PPUSH
1683: PPUSH
1684: PPUSH
// uc_side := 6 ;
1685: LD_ADDR_OWVAR 20
1689: PUSH
1690: LD_INT 6
1692: ST_TO_ADDR
// uc_nation := 3 ;
1693: LD_ADDR_OWVAR 21
1697: PUSH
1698: LD_INT 3
1700: ST_TO_ADDR
// InitHc ;
1701: CALL_OW 19
// Gossudarov := NewCharacter ( Gossudarov ) ;
1705: LD_ADDR_EXP 31
1709: PUSH
1710: LD_STRING Gossudarov
1712: PPUSH
1713: CALL_OW 25
1717: ST_TO_ADDR
// Kirilenkova := NewCharacter ( Kirilenkova ) ;
1718: LD_ADDR_EXP 32
1722: PUSH
1723: LD_STRING Kirilenkova
1725: PPUSH
1726: CALL_OW 25
1730: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
1731: LD_ADDR_EXP 33
1735: PUSH
1736: LD_STRING Titov
1738: PPUSH
1739: CALL_OW 25
1743: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
1744: LD_ADDR_EXP 38
1748: PUSH
1749: LD_STRING Oblukov
1751: PPUSH
1752: CALL_OW 25
1756: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
1757: LD_ADDR_EXP 35
1761: PUSH
1762: LD_STRING Dolgov
1764: PPUSH
1765: CALL_OW 25
1769: ST_TO_ADDR
// Petrosyan := NewCharacter ( Petrosyan ) ;
1770: LD_ADDR_EXP 36
1774: PUSH
1775: LD_STRING Petrosyan
1777: PPUSH
1778: CALL_OW 25
1782: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
1783: LD_ADDR_EXP 37
1787: PUSH
1788: LD_STRING Scholtze
1790: PPUSH
1791: CALL_OW 25
1795: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
1796: LD_ADDR_EXP 39
1800: PUSH
1801: LD_STRING Kapitsova
1803: PPUSH
1804: CALL_OW 25
1808: ST_TO_ADDR
// tmp := [ Gossudarov , Kirilenkova , Titov , Oblukov , Dolgov , Petrosyan , Scholtze , Kapitsova ] ;
1809: LD_ADDR_VAR 0 2
1813: PUSH
1814: LD_EXP 31
1818: PUSH
1819: LD_EXP 32
1823: PUSH
1824: LD_EXP 33
1828: PUSH
1829: LD_EXP 38
1833: PUSH
1834: LD_EXP 35
1838: PUSH
1839: LD_EXP 36
1843: PUSH
1844: LD_EXP 37
1848: PUSH
1849: LD_EXP 39
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: ST_TO_ADDR
// for i in tmp do
1864: LD_ADDR_VAR 0 3
1868: PUSH
1869: LD_VAR 0 2
1873: PUSH
1874: FOR_IN
1875: IFFALSE 1894
// PlaceUnitArea ( i , gossudarov_spawn , false ) ;
1877: LD_VAR 0 3
1881: PPUSH
1882: LD_INT 14
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL_OW 49
1892: GO 1874
1894: POP
1895: POP
// ComMoveXY ( tmp , GetX ( freedom ) , GetY ( freedom ) ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_EXP 3
1905: PPUSH
1906: CALL_OW 250
1910: PPUSH
1911: LD_EXP 3
1915: PPUSH
1916: CALL_OW 251
1920: PPUSH
1921: CALL_OW 111
// end ;
1925: LD_VAR 0 1
1929: RET
// export function PrepareBelkov ; begin
1930: LD_INT 0
1932: PPUSH
// uc_side := 4 ;
1933: LD_ADDR_OWVAR 20
1937: PUSH
1938: LD_INT 4
1940: ST_TO_ADDR
// uc_nation := 3 ;
1941: LD_ADDR_OWVAR 21
1945: PUSH
1946: LD_INT 3
1948: ST_TO_ADDR
// InitHc ;
1949: CALL_OW 19
// Belkov := NewCharacter ( Belkov ) ;
1953: LD_ADDR_EXP 46
1957: PUSH
1958: LD_STRING Belkov
1960: PPUSH
1961: CALL_OW 25
1965: ST_TO_ADDR
// PlaceUnitArea ( Belkov , gossudarov_spawn , false ) ;
1966: LD_EXP 46
1970: PPUSH
1971: LD_INT 14
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 49
// end ;
1981: LD_VAR 0 1
1985: RET
// export function PrepareGnyevko ; begin
1986: LD_INT 0
1988: PPUSH
// uc_side := 4 ;
1989: LD_ADDR_OWVAR 20
1993: PUSH
1994: LD_INT 4
1996: ST_TO_ADDR
// uc_nation := 3 ;
1997: LD_ADDR_OWVAR 21
2001: PUSH
2002: LD_INT 3
2004: ST_TO_ADDR
// InitHc ;
2005: CALL_OW 19
// Gnyevko := NewCharacter ( Gnyevko ) ;
2009: LD_ADDR_EXP 47
2013: PUSH
2014: LD_STRING Gnyevko
2016: PPUSH
2017: CALL_OW 25
2021: ST_TO_ADDR
// PlaceUnitArea ( Gnyevko , gossudarov_spawn , false ) ;
2022: LD_EXP 47
2026: PPUSH
2027: LD_INT 14
2029: PPUSH
2030: LD_INT 0
2032: PPUSH
2033: CALL_OW 49
// end ;
2037: LD_VAR 0 1
2041: RET
// export function PrepareBurlak ; var i , tmp ; begin
2042: LD_INT 0
2044: PPUSH
2045: PPUSH
2046: PPUSH
// uc_side := 4 ;
2047: LD_ADDR_OWVAR 20
2051: PUSH
2052: LD_INT 4
2054: ST_TO_ADDR
// uc_nation := 3 ;
2055: LD_ADDR_OWVAR 21
2059: PUSH
2060: LD_INT 3
2062: ST_TO_ADDR
// InitHc ;
2063: CALL_OW 19
// Burlak := NewCharacter ( Burlak ) ;
2067: LD_ADDR_EXP 45
2071: PUSH
2072: LD_STRING Burlak
2074: PPUSH
2075: CALL_OW 25
2079: ST_TO_ADDR
// PrepareVehicle ( [ ru_heavy_tracked , ru_heavy_wheeled , ru_medium_tracked ] [ Difficulty ] , engine_combustion , control_manual , ru_rocket_launcher , 0 ) ;
2080: LD_INT 24
2082: PUSH
2083: LD_INT 23
2085: PUSH
2086: LD_INT 22
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: PUSH
2094: LD_OWVAR 67
2098: ARRAY
2099: PPUSH
2100: LD_INT 1
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 45
2108: PPUSH
2109: LD_INT 0
2111: PPUSH
2112: CALL 18752 0 5
// Masha := CreateVehicle ;
2116: LD_ADDR_EXP 48
2120: PUSH
2121: CALL_OW 45
2125: ST_TO_ADDR
// SetLives ( [ Masha , Burlak ] , 499 ) ;
2126: LD_EXP 48
2130: PUSH
2131: LD_EXP 45
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PPUSH
2140: LD_INT 499
2142: PPUSH
2143: CALL_OW 234
// SetDir ( Masha , 3 ) ;
2147: LD_EXP 48
2151: PPUSH
2152: LD_INT 3
2154: PPUSH
2155: CALL_OW 233
// SetMark ( Masha , 1 ) ;
2159: LD_EXP 48
2163: PPUSH
2164: LD_INT 1
2166: PPUSH
2167: CALL_OW 242
// PlaceUnitArea ( Masha , burlak_spawn , false ) ;
2171: LD_EXP 48
2175: PPUSH
2176: LD_INT 18
2178: PPUSH
2179: LD_INT 0
2181: PPUSH
2182: CALL_OW 49
// PlaceUnitXY ( Burlak , 125 , 1 , false ) ;
2186: LD_EXP 45
2190: PPUSH
2191: LD_INT 125
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: LD_INT 0
2199: PPUSH
2200: CALL_OW 48
// ComMoveUnit ( Burlak , Masha ) ;
2204: LD_EXP 45
2208: PPUSH
2209: LD_EXP 48
2213: PPUSH
2214: CALL_OW 112
// wait ( 0 0$0.3 ) ;
2218: LD_INT 10
2220: PPUSH
2221: CALL_OW 67
// AddComMoveXY ( Masha , 110 , 10 ) ;
2225: LD_EXP 48
2229: PPUSH
2230: LD_INT 110
2232: PPUSH
2233: LD_INT 10
2235: PPUSH
2236: CALL_OW 171
// Petrovova := NewCharacter ( Petrovova ) ;
2240: LD_ADDR_EXP 41
2244: PUSH
2245: LD_STRING Petrovova
2247: PPUSH
2248: CALL_OW 25
2252: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
2253: LD_ADDR_EXP 43
2257: PUSH
2258: LD_STRING Kuzmov
2260: PPUSH
2261: CALL_OW 25
2265: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
2266: LD_ADDR_EXP 42
2270: PUSH
2271: LD_STRING Kovalyuk
2273: PPUSH
2274: CALL_OW 25
2278: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
2279: LD_ADDR_EXP 40
2283: PUSH
2284: LD_STRING Lipshchin
2286: PPUSH
2287: CALL_OW 25
2291: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
2292: LD_ADDR_EXP 44
2296: PUSH
2297: LD_STRING Karamazov
2299: PPUSH
2300: CALL_OW 25
2304: ST_TO_ADDR
// tmp := [ Petrovova , Kuzmov , Kovalyuk , Lipshchin , Karamazov ] ;
2305: LD_ADDR_VAR 0 3
2309: PUSH
2310: LD_EXP 41
2314: PUSH
2315: LD_EXP 43
2319: PUSH
2320: LD_EXP 42
2324: PUSH
2325: LD_EXP 40
2329: PUSH
2330: LD_EXP 44
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// for i in tmp do
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_VAR 0 3
2351: PUSH
2352: FOR_IN
2353: IFFALSE 2392
// begin SetLives ( i , rand ( 399 , 799 ) ) ;
2355: LD_VAR 0 2
2359: PPUSH
2360: LD_INT 399
2362: PPUSH
2363: LD_INT 799
2365: PPUSH
2366: CALL_OW 12
2370: PPUSH
2371: CALL_OW 234
// PlaceUnitArea ( i , burlak_friends_spawn , false ) ;
2375: LD_VAR 0 2
2379: PPUSH
2380: LD_INT 19
2382: PPUSH
2383: LD_INT 0
2385: PPUSH
2386: CALL_OW 49
// end ;
2390: GO 2352
2392: POP
2393: POP
// ComMoveXY ( tmp , 116 , 8 ) ;
2394: LD_VAR 0 3
2398: PPUSH
2399: LD_INT 116
2401: PPUSH
2402: LD_INT 8
2404: PPUSH
2405: CALL_OW 111
// AddComHold ( tmp ) ;
2409: LD_VAR 0 3
2413: PPUSH
2414: CALL_OW 200
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
2418: LD_ADDR_VAR 0 2
2422: PUSH
2423: LD_VAR 0 3
2427: PPUSH
2428: LD_INT 25
2430: PUSH
2431: LD_INT 1
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PPUSH
2438: CALL_OW 72
2442: PUSH
2443: FOR_IN
2444: IFFALSE 2484
// begin AddComMoveToArea ( i , burlak_crawl_area ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 20
2453: PPUSH
2454: CALL_OW 173
// AddComTurnXY ( i , 147 , 45 ) ;
2458: LD_VAR 0 2
2462: PPUSH
2463: LD_INT 147
2465: PPUSH
2466: LD_INT 45
2468: PPUSH
2469: CALL_OW 178
// AddComCrawl ( i ) ;
2473: LD_VAR 0 2
2477: PPUSH
2478: CALL_OW 197
// end ;
2482: GO 2443
2484: POP
2485: POP
// repeat wait ( 0 0$1 ) ;
2486: LD_INT 35
2488: PPUSH
2489: CALL_OW 67
// until IsAt ( Masha , 110 , 10 ) ;
2493: LD_EXP 48
2497: PPUSH
2498: LD_INT 110
2500: PPUSH
2501: LD_INT 10
2503: PPUSH
2504: CALL_OW 307
2508: IFFALSE 2486
// ComStop ( Burlak ) ;
2510: LD_EXP 45
2514: PPUSH
2515: CALL_OW 141
// AddComHold ( Burlak ) ;
2519: LD_EXP 45
2523: PPUSH
2524: CALL_OW 200
// end ; end_of_file
2528: LD_VAR 0 1
2532: RET
// export russian_force , russian_guard , ru_attackers ; export function PrepareRussian ; var i , veh , tmp ; begin
2533: LD_INT 0
2535: PPUSH
2536: PPUSH
2537: PPUSH
2538: PPUSH
// uc_side := 3 ;
2539: LD_ADDR_OWVAR 20
2543: PUSH
2544: LD_INT 3
2546: ST_TO_ADDR
// uc_nation := 3 ;
2547: LD_ADDR_OWVAR 21
2551: PUSH
2552: LD_INT 3
2554: ST_TO_ADDR
// russian_force := PrepareBase ( ru_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 10000 , 3000 , 300 ] , [ 9 , 5 , 6 , 6 ] ) ;
2555: LD_ADDR_EXP 49
2559: PUSH
2560: LD_INT 47
2562: PPUSH
2563: LD_STRING 
2565: PPUSH
2566: LD_INT 7
2568: PUSH
2569: LD_INT 8
2571: PUSH
2572: LD_INT 9
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: LIST
2579: PUSH
2580: LD_OWVAR 67
2584: ARRAY
2585: PPUSH
2586: LD_INT 10000
2588: PUSH
2589: LD_INT 3000
2591: PUSH
2592: LD_INT 300
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: LD_INT 9
2602: PUSH
2603: LD_INT 5
2605: PUSH
2606: LD_INT 6
2608: PUSH
2609: LD_INT 6
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: PPUSH
2618: CALL 22151 0 5
2622: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , russian_force ) ;
2623: LD_ADDR_EXP 57
2627: PUSH
2628: LD_EXP 57
2632: PPUSH
2633: LD_INT 2
2635: PPUSH
2636: LD_EXP 49
2640: PPUSH
2641: CALL_OW 1
2645: ST_TO_ADDR
// tmp := [ ] ;
2646: LD_ADDR_VAR 0 4
2650: PUSH
2651: EMPTY
2652: ST_TO_ADDR
// for i = 1 to 4 do
2653: LD_ADDR_VAR 0 2
2657: PUSH
2658: DOUBLE
2659: LD_INT 1
2661: DEC
2662: ST_TO_ADDR
2663: LD_INT 4
2665: PUSH
2666: FOR_TO
2667: IFFALSE 2760
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun ] [ i mod 4 + 1 ] , 100 ) ;
2669: LD_INT 22
2671: PPUSH
2672: LD_INT 3
2674: PPUSH
2675: LD_INT 3
2677: PPUSH
2678: LD_INT 43
2680: PUSH
2681: LD_INT 45
2683: PUSH
2684: LD_INT 45
2686: PUSH
2687: LD_INT 44
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: PUSH
2696: LD_VAR 0 2
2700: PUSH
2701: LD_INT 4
2703: MOD
2704: PUSH
2705: LD_INT 1
2707: PLUS
2708: ARRAY
2709: PPUSH
2710: LD_INT 100
2712: PPUSH
2713: CALL 18752 0 5
// veh := CreateVehicle ;
2717: LD_ADDR_VAR 0 3
2721: PUSH
2722: CALL_OW 45
2726: ST_TO_ADDR
// tmp := tmp ^ veh ;
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: LD_VAR 0 4
2736: PUSH
2737: LD_VAR 0 3
2741: ADD
2742: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_russian , false ) ;
2743: LD_VAR 0 3
2747: PPUSH
2748: LD_INT 2
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: CALL_OW 49
// end ;
2758: GO 2666
2760: POP
2761: POP
// russian_guard := tmp ;
2762: LD_ADDR_EXP 50
2766: PUSH
2767: LD_VAR 0 4
2771: ST_TO_ADDR
// end ;
2772: LD_VAR 0 1
2776: RET
// every 9 9$00 + 2 2$00 trigger IsOk ( ru_depot ) and player_spotted do var i , base , tmp , flags , _target , attackers ;
2777: LD_INT 47
2779: PPUSH
2780: CALL_OW 302
2784: PUSH
2785: LD_EXP 6
2789: AND
2790: IFFALSE 3403
2792: GO 2794
2794: DISABLE
2795: LD_INT 0
2797: PPUSH
2798: PPUSH
2799: PPUSH
2800: PPUSH
2801: PPUSH
2802: PPUSH
// begin enable ;
2803: ENABLE
// base := 2 ;
2804: LD_ADDR_VAR 0 2
2808: PUSH
2809: LD_INT 2
2811: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
2812: LD_ADDR_VAR 0 4
2816: PUSH
2817: LD_INT 0
2819: PUSH
2820: LD_INT 0
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: LD_INT 0
2828: PUSH
2829: LD_INT 0
2831: PUSH
2832: LD_INT 0
2834: PUSH
2835: LD_INT 0
2837: PUSH
2838: LD_INT 0
2840: PUSH
2841: LD_INT 1
2843: PUSH
2844: LD_INT 0
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: ST_TO_ADDR
// tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] ] ;
2859: LD_ADDR_VAR 0 3
2863: PUSH
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: LD_INT 3
2872: PUSH
2873: LD_INT 45
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: LD_INT 21
2884: PUSH
2885: LD_INT 1
2887: PUSH
2888: LD_INT 3
2890: PUSH
2891: LD_INT 45
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: PUSH
2900: LD_INT 22
2902: PUSH
2903: LD_INT 1
2905: PUSH
2906: LD_INT 3
2908: PUSH
2909: LD_INT 45
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 23
2920: PUSH
2921: LD_INT 1
2923: PUSH
2924: LD_INT 3
2926: PUSH
2927: LD_INT 46
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
2942: LD_ADDR_VAR 0 1
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_OWVAR 67
2956: PUSH
2957: LD_OWVAR 1
2961: PUSH
2962: LD_INT 21000
2964: DIV
2965: PLUS
2966: PUSH
2967: FOR_TO
2968: IFFALSE 3056
// tmp := Insert ( tmp , tmp + 1 , [ [ ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
2970: LD_ADDR_VAR 0 3
2974: PUSH
2975: LD_VAR 0 3
2979: PPUSH
2980: LD_VAR 0 3
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: PPUSH
2989: LD_INT 23
2991: PUSH
2992: LD_INT 24
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 1
3001: PPUSH
3002: LD_INT 2
3004: PPUSH
3005: CALL_OW 12
3009: ARRAY
3010: PUSH
3011: LD_INT 1
3013: PUSH
3014: LD_INT 3
3016: PUSH
3017: LD_INT 46
3019: PUSH
3020: LD_INT 47
3022: PUSH
3023: LD_INT 45
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 1
3033: PPUSH
3034: LD_INT 3
3036: PPUSH
3037: CALL_OW 12
3041: ARRAY
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 2
3053: ST_TO_ADDR
3054: GO 2967
3056: POP
3057: POP
// MC_SetProduceList ( base , tmp ) ;
3058: LD_VAR 0 2
3062: PPUSH
3063: LD_VAR 0 3
3067: PPUSH
3068: CALL 63678 0 2
// repeat wait ( 0 0$1 ) ;
3072: LD_INT 35
3074: PPUSH
3075: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
3079: LD_VAR 0 2
3083: PPUSH
3084: CALL 64039 0 1
3088: PUSH
3089: LD_INT 0
3091: EQUAL
3092: IFFALSE 3072
// wait ( 0 0$20 ) ;
3094: LD_INT 700
3096: PPUSH
3097: CALL_OW 67
// _target := [ [ 71 , 19 ] , [ 91 , 67 ] , [ 52 , 44 ] , [ 68 , 48 ] ] ;
3101: LD_ADDR_VAR 0 5
3105: PUSH
3106: LD_INT 71
3108: PUSH
3109: LD_INT 19
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 91
3118: PUSH
3119: LD_INT 67
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 52
3128: PUSH
3129: LD_INT 44
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 68
3138: PUSH
3139: LD_INT 48
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] ] ) ) ;
3152: LD_ADDR_VAR 0 6
3156: PUSH
3157: LD_EXP 76
3161: PUSH
3162: LD_VAR 0 2
3166: ARRAY
3167: PUSH
3168: LD_EXP 79
3172: PUSH
3173: LD_VAR 0 2
3177: ARRAY
3178: PUSH
3179: LD_EXP 76
3183: PUSH
3184: LD_VAR 0 2
3188: ARRAY
3189: PPUSH
3190: LD_INT 2
3192: PUSH
3193: LD_INT 34
3195: PUSH
3196: LD_INT 51
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 34
3205: PUSH
3206: LD_INT 52
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: LIST
3217: PPUSH
3218: CALL_OW 72
3222: UNION
3223: DIFF
3224: ST_TO_ADDR
// if not attackers then
3225: LD_VAR 0 6
3229: NOT
3230: IFFALSE 3234
// exit ;
3232: GO 3403
// ru_attackers := attackers ;
3234: LD_ADDR_EXP 51
3238: PUSH
3239: LD_VAR 0 6
3243: ST_TO_ADDR
// for i = 1 to attackers do
3244: LD_ADDR_VAR 0 1
3248: PUSH
3249: DOUBLE
3250: LD_INT 1
3252: DEC
3253: ST_TO_ADDR
3254: LD_VAR 0 6
3258: PUSH
3259: FOR_TO
3260: IFFALSE 3337
// begin case i mod 3 of 0 :
3262: LD_VAR 0 1
3266: PUSH
3267: LD_INT 3
3269: MOD
3270: PUSH
3271: LD_INT 0
3273: DOUBLE
3274: EQUAL
3275: IFTRUE 3279
3277: GO 3282
3279: POP
// ; 1 :
3280: GO 3335
3282: LD_INT 1
3284: DOUBLE
3285: EQUAL
3286: IFTRUE 3290
3288: GO 3308
3290: POP
// ComAgressiveMove ( i , 32 , 49 ) ; 2 :
3291: LD_VAR 0 1
3295: PPUSH
3296: LD_INT 32
3298: PPUSH
3299: LD_INT 49
3301: PPUSH
3302: CALL_OW 114
3306: GO 3335
3308: LD_INT 2
3310: DOUBLE
3311: EQUAL
3312: IFTRUE 3316
3314: GO 3334
3316: POP
// ComAgressiveMove ( i , 117 , 107 ) ; end ;
3317: LD_VAR 0 1
3321: PPUSH
3322: LD_INT 117
3324: PPUSH
3325: LD_INT 107
3327: PPUSH
3328: CALL_OW 114
3332: GO 3335
3334: POP
// end ;
3335: GO 3259
3337: POP
3338: POP
// repeat wait ( 0 0$1 ) ;
3339: LD_INT 35
3341: PPUSH
3342: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
3346: LD_VAR 0 6
3350: PPUSH
3351: LD_INT 60
3353: PUSH
3354: EMPTY
3355: LIST
3356: PPUSH
3357: CALL_OW 72
3361: NOT
3362: IFFALSE 3339
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
3364: LD_VAR 0 2
3368: PPUSH
3369: LD_VAR 0 6
3373: PPUSH
3374: LD_VAR 0 5
3378: PPUSH
3379: LD_VAR 0 4
3383: PPUSH
3384: CALL 63924 0 4
// if not first_attack then
3388: LD_EXP 7
3392: NOT
3393: IFFALSE 3403
// first_attack := true ;
3395: LD_ADDR_EXP 7
3399: PUSH
3400: LD_INT 1
3402: ST_TO_ADDR
// end ; end_of_file
3403: PPOPN 6
3405: END
// export arabian_force , arabian_guard , Abdul , mastodont ; export function PrepareArabian ; var i , veh , tmp , xy , un , un2 ; begin
3406: LD_INT 0
3408: PPUSH
3409: PPUSH
3410: PPUSH
3411: PPUSH
3412: PPUSH
3413: PPUSH
3414: PPUSH
// uc_side := 2 ;
3415: LD_ADDR_OWVAR 20
3419: PUSH
3420: LD_INT 2
3422: ST_TO_ADDR
// uc_nation := 2 ;
3423: LD_ADDR_OWVAR 21
3427: PUSH
3428: LD_INT 2
3430: ST_TO_ADDR
// Abdul := NewCharacter ( Abdul ) ;
3431: LD_ADDR_EXP 54
3435: PUSH
3436: LD_STRING Abdul
3438: PPUSH
3439: CALL_OW 25
3443: ST_TO_ADDR
// SetClass ( Abdul , class_desert_warior ) ;
3444: LD_EXP 54
3448: PPUSH
3449: LD_INT 11
3451: PPUSH
3452: CALL_OW 336
// PlaceHumanInUnit ( Abdul , ar_depot ) ;
3456: LD_EXP 54
3460: PPUSH
3461: LD_INT 1
3463: PPUSH
3464: CALL_OW 52
// vc_chassis := 31 ;
3468: LD_ADDR_OWVAR 37
3472: PUSH
3473: LD_INT 31
3475: ST_TO_ADDR
// vc_control := control_rider ;
3476: LD_ADDR_OWVAR 38
3480: PUSH
3481: LD_INT 4
3483: ST_TO_ADDR
// mastodont := CreateVehicle ;
3484: LD_ADDR_EXP 55
3488: PUSH
3489: CALL_OW 45
3493: ST_TO_ADDR
// PlaceUnitXY ( mastodont , 153 , 71 , false ) ;
3494: LD_EXP 55
3498: PPUSH
3499: LD_INT 153
3501: PPUSH
3502: LD_INT 71
3504: PPUSH
3505: LD_INT 0
3507: PPUSH
3508: CALL_OW 48
// InitVc ;
3512: CALL_OW 20
// arabian_force := PrepareBase ( ar_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 5000 , 1000 , 300 ] , [ 22 , 5 , 6 , 9 ] ) ;
3516: LD_ADDR_EXP 52
3520: PUSH
3521: LD_INT 1
3523: PPUSH
3524: LD_STRING 
3526: PPUSH
3527: LD_INT 7
3529: PUSH
3530: LD_INT 8
3532: PUSH
3533: LD_INT 9
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: LIST
3540: PUSH
3541: LD_OWVAR 67
3545: ARRAY
3546: PPUSH
3547: LD_INT 5000
3549: PUSH
3550: LD_INT 1000
3552: PUSH
3553: LD_INT 300
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: PPUSH
3561: LD_INT 22
3563: PUSH
3564: LD_INT 5
3566: PUSH
3567: LD_INT 6
3569: PUSH
3570: LD_INT 9
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: PPUSH
3579: CALL 22151 0 5
3583: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , arabian_force ) ;
3584: LD_ADDR_EXP 57
3588: PUSH
3589: LD_EXP 57
3593: PPUSH
3594: LD_INT 1
3596: PPUSH
3597: LD_EXP 52
3601: PPUSH
3602: CALL_OW 1
3606: ST_TO_ADDR
// tmp := [ ] ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: EMPTY
3613: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
3614: LD_ADDR_OWVAR 37
3618: PUSH
3619: LD_INT 14
3621: ST_TO_ADDR
// vc_engine := engine_siberite ;
3622: LD_ADDR_OWVAR 39
3626: PUSH
3627: LD_INT 3
3629: ST_TO_ADDR
// vc_control := control_manual ;
3630: LD_ADDR_OWVAR 38
3634: PUSH
3635: LD_INT 1
3637: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
3638: LD_ADDR_OWVAR 40
3642: PUSH
3643: LD_INT 31
3645: ST_TO_ADDR
// for i = 1 to 3 do
3646: LD_ADDR_VAR 0 2
3650: PUSH
3651: DOUBLE
3652: LD_INT 1
3654: DEC
3655: ST_TO_ADDR
3656: LD_INT 3
3658: PUSH
3659: FOR_TO
3660: IFFALSE 3904
// begin xy := [ [ 153 , 71 ] , [ 155 , 81 ] ] [ i mod 2 + 1 ] ;
3662: LD_ADDR_VAR 0 5
3666: PUSH
3667: LD_INT 153
3669: PUSH
3670: LD_INT 71
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 155
3679: PUSH
3680: LD_INT 81
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PUSH
3691: LD_VAR 0 2
3695: PUSH
3696: LD_INT 2
3698: MOD
3699: PUSH
3700: LD_INT 1
3702: PLUS
3703: ARRAY
3704: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
3705: LD_INT 0
3707: PPUSH
3708: LD_INT 3
3710: PPUSH
3711: LD_INT 7
3713: PUSH
3714: LD_INT 8
3716: PUSH
3717: LD_INT 9
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: LIST
3724: PUSH
3725: LD_OWVAR 67
3729: ARRAY
3730: PPUSH
3731: CALL_OW 380
// un := CreateVehicle ;
3735: LD_ADDR_VAR 0 6
3739: PUSH
3740: CALL_OW 45
3744: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3745: LD_VAR 0 6
3749: PPUSH
3750: LD_INT 0
3752: PPUSH
3753: LD_INT 5
3755: PPUSH
3756: CALL_OW 12
3760: PPUSH
3761: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
3765: LD_VAR 0 6
3769: PPUSH
3770: LD_VAR 0 5
3774: PUSH
3775: LD_INT 1
3777: ARRAY
3778: PPUSH
3779: LD_VAR 0 5
3783: PUSH
3784: LD_INT 2
3786: ARRAY
3787: PPUSH
3788: LD_INT 6
3790: PPUSH
3791: LD_INT 0
3793: PPUSH
3794: CALL_OW 50
// un2 := CreateHuman ;
3798: LD_ADDR_VAR 0 7
3802: PUSH
3803: CALL_OW 44
3807: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
3808: LD_VAR 0 7
3812: PPUSH
3813: LD_VAR 0 6
3817: PPUSH
3818: CALL_OW 52
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un ) ;
3822: LD_ADDR_EXP 57
3826: PUSH
3827: LD_EXP 57
3831: PPUSH
3832: LD_INT 1
3834: PUSH
3835: LD_EXP 57
3839: PUSH
3840: LD_INT 1
3842: ARRAY
3843: PUSH
3844: LD_INT 1
3846: PLUS
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PPUSH
3852: LD_VAR 0 6
3856: PPUSH
3857: CALL 19309 0 3
3861: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un2 ) ;
3862: LD_ADDR_EXP 57
3866: PUSH
3867: LD_EXP 57
3871: PPUSH
3872: LD_INT 1
3874: PUSH
3875: LD_EXP 57
3879: PUSH
3880: LD_INT 1
3882: ARRAY
3883: PUSH
3884: LD_INT 1
3886: PLUS
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PPUSH
3892: LD_VAR 0 7
3896: PPUSH
3897: CALL 19309 0 3
3901: ST_TO_ADDR
// end ;
3902: GO 3659
3904: POP
3905: POP
// for i = 1 to 5 do
3906: LD_ADDR_VAR 0 2
3910: PUSH
3911: DOUBLE
3912: LD_INT 1
3914: DEC
3915: ST_TO_ADDR
3916: LD_INT 5
3918: PUSH
3919: FOR_TO
3920: IFFALSE 4013
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gatling_gun , ar_rocket_launcher , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 100 ) ;
3922: LD_INT 14
3924: PPUSH
3925: LD_INT 3
3927: PPUSH
3928: LD_INT 1
3930: PPUSH
3931: LD_INT 25
3933: PUSH
3934: LD_INT 28
3936: PUSH
3937: LD_INT 28
3939: PUSH
3940: LD_INT 26
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: PUSH
3949: LD_VAR 0 2
3953: PUSH
3954: LD_INT 4
3956: MOD
3957: PUSH
3958: LD_INT 1
3960: PLUS
3961: ARRAY
3962: PPUSH
3963: LD_INT 100
3965: PPUSH
3966: CALL 18752 0 5
// veh := CreateVehicle ;
3970: LD_ADDR_VAR 0 3
3974: PUSH
3975: CALL_OW 45
3979: ST_TO_ADDR
// tmp := tmp ^ veh ;
3980: LD_ADDR_VAR 0 4
3984: PUSH
3985: LD_VAR 0 4
3989: PUSH
3990: LD_VAR 0 3
3994: ADD
3995: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_arabian , false ) ;
3996: LD_VAR 0 3
4000: PPUSH
4001: LD_INT 1
4003: PPUSH
4004: LD_INT 0
4006: PPUSH
4007: CALL_OW 49
// end ;
4011: GO 3919
4013: POP
4014: POP
// arabian_guard := tmp ;
4015: LD_ADDR_EXP 53
4019: PUSH
4020: LD_VAR 0 4
4024: ST_TO_ADDR
// end ;
4025: LD_VAR 0 1
4029: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , ar_depot , 12 ] ] ) or GetLives ( Mastodont ) < 990 or GetLives ( Abdul ) < 990 do
4030: LD_INT 22
4032: PUSH
4033: LD_INT 7
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: LD_INT 91
4042: PUSH
4043: LD_INT 1
4045: PUSH
4046: LD_INT 12
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: LIST
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: PPUSH
4058: CALL_OW 69
4062: PUSH
4063: LD_EXP 55
4067: PPUSH
4068: CALL_OW 256
4072: PUSH
4073: LD_INT 990
4075: LESS
4076: OR
4077: PUSH
4078: LD_EXP 54
4082: PPUSH
4083: CALL_OW 256
4087: PUSH
4088: LD_INT 990
4090: LESS
4091: OR
4092: IFFALSE 4243
4094: GO 4096
4096: DISABLE
// begin if IsInUnit ( Abdul ) then
4097: LD_EXP 54
4101: PPUSH
4102: CALL_OW 310
4106: IFFALSE 4117
// ComExitBuilding ( Abdul ) ;
4108: LD_EXP 54
4112: PPUSH
4113: CALL_OW 122
// if Mastodont then
4117: LD_EXP 55
4121: IFFALSE 4138
// ComMoveXY ( Mastodont , 205 , 132 ) ;
4123: LD_EXP 55
4127: PPUSH
4128: LD_INT 205
4130: PPUSH
4131: LD_INT 132
4133: PPUSH
4134: CALL_OW 111
// AddComMoveXY ( Abdul , 205 , 132 ) ;
4138: LD_EXP 54
4142: PPUSH
4143: LD_INT 205
4145: PPUSH
4146: LD_INT 132
4148: PPUSH
4149: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4153: LD_INT 35
4155: PPUSH
4156: CALL_OW 67
// until IsInArea ( Abdul , escape_area ) ;
4160: LD_EXP 54
4164: PPUSH
4165: LD_INT 21
4167: PPUSH
4168: CALL_OW 308
4172: IFFALSE 4153
// RemoveUnit ( Abdul ) ;
4174: LD_EXP 54
4178: PPUSH
4179: CALL_OW 64
// abdul_escaped := true ;
4183: LD_ADDR_EXP 12
4187: PUSH
4188: LD_INT 1
4190: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4191: LD_INT 35
4193: PPUSH
4194: CALL_OW 67
// until IsInArea ( Mastodont , escape_area ) or IsDead ( Mastodont ) ;
4198: LD_EXP 55
4202: PPUSH
4203: LD_INT 21
4205: PPUSH
4206: CALL_OW 308
4210: PUSH
4211: LD_EXP 55
4215: PPUSH
4216: CALL_OW 301
4220: OR
4221: IFFALSE 4191
// if IsOk ( Mastodont ) then
4223: LD_EXP 55
4227: PPUSH
4228: CALL_OW 302
4232: IFFALSE 4243
// RemoveUnit ( Mastodont ) ;
4234: LD_EXP 55
4238: PPUSH
4239: CALL_OW 64
// end ;
4243: END
// every 12 12$00 trigger ar_active_attack and GetBType ( HexInfo ( 92 , 40 ) ) = b_siberite_mine do var sci ;
4244: LD_EXP 9
4248: PUSH
4249: LD_INT 92
4251: PPUSH
4252: LD_INT 40
4254: PPUSH
4255: CALL_OW 428
4259: PPUSH
4260: CALL_OW 266
4264: PUSH
4265: LD_INT 30
4267: EQUAL
4268: AND
4269: IFFALSE 4465
4271: GO 4273
4273: DISABLE
4274: LD_INT 0
4276: PPUSH
// begin sci := UnitFilter ( mc_bases [ 1 ] , [ f_class , 4 ] ) ;
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: LD_EXP 57
4286: PUSH
4287: LD_INT 1
4289: ARRAY
4290: PPUSH
4291: LD_INT 25
4293: PUSH
4294: LD_INT 4
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PPUSH
4301: CALL_OW 72
4305: ST_TO_ADDR
// if not sci then
4306: LD_VAR 0 1
4310: NOT
4311: IFFALSE 4315
// exit ;
4313: GO 4465
// mc_bases := Replace ( mc_bases , 1 , mc_bases [ 1 ] diff sci [ 1 ] ) ;
4315: LD_ADDR_EXP 57
4319: PUSH
4320: LD_EXP 57
4324: PPUSH
4325: LD_INT 1
4327: PPUSH
4328: LD_EXP 57
4332: PUSH
4333: LD_INT 1
4335: ARRAY
4336: PUSH
4337: LD_VAR 0 1
4341: PUSH
4342: LD_INT 1
4344: ARRAY
4345: DIFF
4346: PPUSH
4347: CALL_OW 1
4351: ST_TO_ADDR
// if IsInUnit ( sci [ 1 ] ) then
4352: LD_VAR 0 1
4356: PUSH
4357: LD_INT 1
4359: ARRAY
4360: PPUSH
4361: CALL_OW 310
4365: IFFALSE 4380
// ComExitBuilding ( sci [ 1 ] ) ;
4367: LD_VAR 0 1
4371: PUSH
4372: LD_INT 1
4374: ARRAY
4375: PPUSH
4376: CALL_OW 122
// if DangerAtRangeXY ( 2 , 105 , 14 , 20 ) [ 4 ] < 10 then
4380: LD_INT 2
4382: PPUSH
4383: LD_INT 105
4385: PPUSH
4386: LD_INT 14
4388: PPUSH
4389: LD_INT 20
4391: PPUSH
4392: CALL 19803 0 4
4396: PUSH
4397: LD_INT 4
4399: ARRAY
4400: PUSH
4401: LD_INT 10
4403: LESS
4404: IFFALSE 4427
// AddComMoveXY ( sci [ 1 ] , 105 , 14 ) else
4406: LD_VAR 0 1
4410: PUSH
4411: LD_INT 1
4413: ARRAY
4414: PPUSH
4415: LD_INT 105
4417: PPUSH
4418: LD_INT 14
4420: PPUSH
4421: CALL_OW 171
4425: GO 4446
// AddComMoveXY ( sci [ 1 ] , 118 , 77 ) ;
4427: LD_VAR 0 1
4431: PUSH
4432: LD_INT 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 118
4438: PPUSH
4439: LD_INT 77
4441: PPUSH
4442: CALL_OW 171
// AddComContaminate ( sci [ 1 ] , 92 , 40 ) ;
4446: LD_VAR 0 1
4450: PUSH
4451: LD_INT 1
4453: ARRAY
4454: PPUSH
4455: LD_INT 92
4457: PPUSH
4458: LD_INT 40
4460: PPUSH
4461: CALL_OW 218
// end ;
4465: PPOPN 1
4467: END
// every 14 14$00 trigger IsOk ( ar_depot ) and ar_active_attack do var i , base , tmp , flags , _target , attackers ;
4468: LD_INT 1
4470: PPUSH
4471: CALL_OW 302
4475: PUSH
4476: LD_EXP 9
4480: AND
4481: IFFALSE 4951
4483: GO 4485
4485: DISABLE
4486: LD_INT 0
4488: PPUSH
4489: PPUSH
4490: PPUSH
4491: PPUSH
4492: PPUSH
4493: PPUSH
// begin enable ;
4494: ENABLE
// base := 1 ;
4495: LD_ADDR_VAR 0 2
4499: PUSH
4500: LD_INT 1
4502: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
4503: LD_ADDR_VAR 0 4
4507: PUSH
4508: LD_INT 0
4510: PUSH
4511: LD_INT 0
4513: PUSH
4514: LD_INT 0
4516: PUSH
4517: LD_INT 0
4519: PUSH
4520: LD_INT 0
4522: PUSH
4523: LD_INT 0
4525: PUSH
4526: LD_INT 0
4528: PUSH
4529: LD_INT 0
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: LD_INT 0
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: ST_TO_ADDR
// tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_flame_thrower ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , ] ;
4550: LD_ADDR_VAR 0 3
4554: PUSH
4555: LD_INT 14
4557: PUSH
4558: LD_INT 1
4560: PUSH
4561: LD_INT 2
4563: PUSH
4564: LD_INT 26
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 14
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: LD_INT 2
4581: PUSH
4582: LD_INT 28
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: PUSH
4591: LD_INT 13
4593: PUSH
4594: LD_INT 1
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: LD_INT 29
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
4614: LD_ADDR_VAR 0 1
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_OWVAR 67
4628: PUSH
4629: LD_OWVAR 1
4633: PUSH
4634: LD_INT 21000
4636: DIV
4637: PLUS
4638: PUSH
4639: FOR_TO
4640: IFFALSE 4732
// tmp := Insert ( tmp , tmp + 1 , [ [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_remote , [ ar_rocket_launcher , ar_selfpropelled_bomb , ar_gatling_gun , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ) ;
4642: LD_ADDR_VAR 0 3
4646: PUSH
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_VAR 0 3
4656: PUSH
4657: LD_INT 1
4659: PLUS
4660: PPUSH
4661: LD_INT 13
4663: PUSH
4664: LD_INT 14
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 1
4673: PPUSH
4674: LD_INT 2
4676: PPUSH
4677: CALL_OW 12
4681: ARRAY
4682: PUSH
4683: LD_INT 1
4685: PUSH
4686: LD_INT 2
4688: PUSH
4689: LD_INT 28
4691: PUSH
4692: LD_INT 29
4694: PUSH
4695: LD_INT 25
4697: PUSH
4698: LD_INT 26
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 1
4709: PPUSH
4710: LD_INT 4
4712: PPUSH
4713: CALL_OW 12
4717: ARRAY
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: PPUSH
4725: CALL_OW 2
4729: ST_TO_ADDR
4730: GO 4639
4732: POP
4733: POP
// MC_SetProduceList ( base , tmp ) ;
4734: LD_VAR 0 2
4738: PPUSH
4739: LD_VAR 0 3
4743: PPUSH
4744: CALL 63678 0 2
// repeat wait ( 0 0$1 ) ;
4748: LD_INT 35
4750: PPUSH
4751: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
4755: LD_VAR 0 2
4759: PPUSH
4760: CALL 64039 0 1
4764: PUSH
4765: LD_INT 0
4767: EQUAL
4768: IFFALSE 4748
// wait ( 0 0$20 ) ;
4770: LD_INT 700
4772: PPUSH
4773: CALL_OW 67
// _target := [ [ 124 , 85 ] , [ 90 , 61 ] , [ 69 , 48 ] , [ 68 , 48 ] ] ;
4777: LD_ADDR_VAR 0 5
4781: PUSH
4782: LD_INT 124
4784: PUSH
4785: LD_INT 85
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 90
4794: PUSH
4795: LD_INT 61
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 69
4804: PUSH
4805: LD_INT 48
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 68
4814: PUSH
4815: LD_INT 48
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , ar_cargo_bay ] ) ) ;
4828: LD_ADDR_VAR 0 6
4832: PUSH
4833: LD_EXP 76
4837: PUSH
4838: LD_VAR 0 2
4842: ARRAY
4843: PUSH
4844: LD_EXP 79
4848: PUSH
4849: LD_VAR 0 2
4853: ARRAY
4854: PUSH
4855: LD_EXP 76
4859: PUSH
4860: LD_VAR 0 2
4864: ARRAY
4865: PPUSH
4866: LD_INT 34
4868: PUSH
4869: LD_INT 32
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 72
4880: UNION
4881: DIFF
4882: ST_TO_ADDR
// if not attackers then
4883: LD_VAR 0 6
4887: NOT
4888: IFFALSE 4892
// exit ;
4890: GO 4951
// ar_attackers := attackers ;
4892: LD_ADDR_EXP 10
4896: PUSH
4897: LD_VAR 0 6
4901: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4902: LD_INT 35
4904: PPUSH
4905: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
4909: LD_VAR 0 6
4913: PPUSH
4914: LD_INT 60
4916: PUSH
4917: EMPTY
4918: LIST
4919: PPUSH
4920: CALL_OW 72
4924: NOT
4925: IFFALSE 4902
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
4927: LD_VAR 0 2
4931: PPUSH
4932: LD_VAR 0 6
4936: PPUSH
4937: LD_VAR 0 5
4941: PPUSH
4942: LD_VAR 0 4
4946: PPUSH
4947: CALL 63924 0 4
// end ;
4951: PPOPN 6
4953: END
// every 11 11$00 trigger IsOk ( ar_depot ) and ar_active_attack and IsInArea ( masha , masha_area ) and MC_GetProduceList ( 1 ) = 0 and not ar_attackers do var i , base , tmp , flags , _target , attackers , un ;
4954: LD_INT 1
4956: PPUSH
4957: CALL_OW 302
4961: PUSH
4962: LD_EXP 9
4966: AND
4967: PUSH
4968: LD_EXP 48
4972: PPUSH
4973: LD_INT 22
4975: PPUSH
4976: CALL_OW 308
4980: AND
4981: PUSH
4982: LD_INT 1
4984: PPUSH
4985: CALL 64039 0 1
4989: PUSH
4990: LD_INT 0
4992: EQUAL
4993: AND
4994: PUSH
4995: LD_EXP 10
4999: NOT
5000: AND
5001: IFFALSE 5476
5003: GO 5005
5005: DISABLE
5006: LD_INT 0
5008: PPUSH
5009: PPUSH
5010: PPUSH
5011: PPUSH
5012: PPUSH
5013: PPUSH
5014: PPUSH
// begin base := 1 ;
5015: LD_ADDR_VAR 0 2
5019: PUSH
5020: LD_INT 1
5022: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
5023: LD_ADDR_VAR 0 4
5027: PUSH
5028: LD_INT 0
5030: PUSH
5031: LD_INT 0
5033: PUSH
5034: LD_INT 0
5036: PUSH
5037: LD_INT 0
5039: PUSH
5040: LD_INT 0
5042: PUSH
5043: LD_INT 0
5045: PUSH
5046: LD_INT 0
5048: PUSH
5049: LD_INT 0
5051: PUSH
5052: LD_INT 1
5054: PUSH
5055: LD_INT 0
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: ST_TO_ADDR
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_hovercraft , engine_solar , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_solar , control_remote , ar_double_machine_gun ] ] ;
5070: LD_ADDR_VAR 0 3
5074: PUSH
5075: LD_INT 13
5077: PUSH
5078: LD_INT 1
5080: PUSH
5081: LD_INT 2
5083: PUSH
5084: LD_INT 28
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: PUSH
5093: LD_INT 13
5095: PUSH
5096: LD_INT 1
5098: PUSH
5099: LD_INT 2
5101: PUSH
5102: LD_INT 27
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: PUSH
5111: LD_INT 13
5113: PUSH
5114: LD_INT 1
5116: PUSH
5117: LD_INT 2
5119: PUSH
5120: LD_INT 25
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: PUSH
5129: LD_INT 11
5131: PUSH
5132: LD_INT 2
5134: PUSH
5135: LD_INT 2
5137: PUSH
5138: LD_INT 24
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: PUSH
5147: LD_INT 11
5149: PUSH
5150: LD_INT 2
5152: PUSH
5153: LD_INT 2
5155: PUSH
5156: LD_INT 24
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: ST_TO_ADDR
// MC_SetProduceList ( base , tmp ) ;
5172: LD_VAR 0 2
5176: PPUSH
5177: LD_VAR 0 3
5181: PPUSH
5182: CALL 63678 0 2
// repeat wait ( 0 0$1 ) ;
5186: LD_INT 35
5188: PPUSH
5189: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
5193: LD_VAR 0 2
5197: PPUSH
5198: CALL 64039 0 1
5202: PUSH
5203: LD_INT 0
5205: EQUAL
5206: IFFALSE 5186
// wait ( 0 0$20 ) ;
5208: LD_INT 700
5210: PPUSH
5211: CALL_OW 67
// _target := [ [ 119 , 9 ] ] ;
5215: LD_ADDR_VAR 0 5
5219: PUSH
5220: LD_INT 119
5222: PUSH
5223: LD_INT 9
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: PUSH
5230: EMPTY
5231: LIST
5232: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , ar_cargo_bay ] ) ) ;
5233: LD_ADDR_VAR 0 6
5237: PUSH
5238: LD_EXP 76
5242: PUSH
5243: LD_VAR 0 2
5247: ARRAY
5248: PUSH
5249: LD_EXP 79
5253: PUSH
5254: LD_VAR 0 2
5258: ARRAY
5259: PUSH
5260: LD_EXP 76
5264: PUSH
5265: LD_VAR 0 2
5269: ARRAY
5270: PPUSH
5271: LD_INT 34
5273: PUSH
5274: LD_INT 32
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PPUSH
5281: CALL_OW 72
5285: UNION
5286: DIFF
5287: ST_TO_ADDR
// if not attackers then
5288: LD_VAR 0 6
5292: NOT
5293: IFFALSE 5297
// exit ;
5295: GO 5476
// uc_side := 2 ;
5297: LD_ADDR_OWVAR 20
5301: PUSH
5302: LD_INT 2
5304: ST_TO_ADDR
// uc_nation := 2 ;
5305: LD_ADDR_OWVAR 21
5309: PUSH
5310: LD_INT 2
5312: ST_TO_ADDR
// InitHc ;
5313: CALL_OW 19
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5317: LD_ADDR_VAR 0 1
5321: PUSH
5322: DOUBLE
5323: LD_INT 1
5325: DEC
5326: ST_TO_ADDR
5327: LD_INT 4
5329: PUSH
5330: LD_INT 5
5332: PUSH
5333: LD_INT 6
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: LIST
5340: PUSH
5341: LD_OWVAR 67
5345: ARRAY
5346: PUSH
5347: FOR_TO
5348: IFFALSE 5425
// begin PrepareHuman ( false , [ class_apeman_soldier , class_apeman_kamikaze ] [ rand ( 1 , 2 ) ] , 8 ) ;
5350: LD_INT 0
5352: PPUSH
5353: LD_INT 15
5355: PUSH
5356: LD_INT 17
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PUSH
5363: LD_INT 1
5365: PPUSH
5366: LD_INT 2
5368: PPUSH
5369: CALL_OW 12
5373: ARRAY
5374: PPUSH
5375: LD_INT 8
5377: PPUSH
5378: CALL_OW 380
// un := CreateHuman ;
5382: LD_ADDR_VAR 0 7
5386: PUSH
5387: CALL_OW 44
5391: ST_TO_ADDR
// PlaceUnitArea ( un , east_spawn , false ) ;
5392: LD_VAR 0 7
5396: PPUSH
5397: LD_INT 23
5399: PPUSH
5400: LD_INT 0
5402: PPUSH
5403: CALL_OW 49
// attackers := attackers union un ;
5407: LD_ADDR_VAR 0 6
5411: PUSH
5412: LD_VAR 0 6
5416: PUSH
5417: LD_VAR 0 7
5421: UNION
5422: ST_TO_ADDR
// end ;
5423: GO 5347
5425: POP
5426: POP
// repeat wait ( 0 0$1 ) ;
5427: LD_INT 35
5429: PPUSH
5430: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
5434: LD_VAR 0 6
5438: PPUSH
5439: LD_INT 60
5441: PUSH
5442: EMPTY
5443: LIST
5444: PPUSH
5445: CALL_OW 72
5449: NOT
5450: IFFALSE 5427
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
5452: LD_VAR 0 2
5456: PPUSH
5457: LD_VAR 0 6
5461: PPUSH
5462: LD_VAR 0 5
5466: PPUSH
5467: LD_VAR 0 4
5471: PPUSH
5472: CALL 63924 0 4
// end ; end_of_file
5476: PPOPN 7
5478: END
// export function PrepareAmericanAttack ; var i , tmp , veh , flags , _target ; begin
5479: LD_INT 0
5481: PPUSH
5482: PPUSH
5483: PPUSH
5484: PPUSH
5485: PPUSH
5486: PPUSH
// uc_side := 1 ;
5487: LD_ADDR_OWVAR 20
5491: PUSH
5492: LD_INT 1
5494: ST_TO_ADDR
// uc_nation := 1 ;
5495: LD_ADDR_OWVAR 21
5499: PUSH
5500: LD_INT 1
5502: ST_TO_ADDR
// InitHc ;
5503: CALL_OW 19
// InitVc ;
5507: CALL_OW 20
// tmp := [ ] ;
5511: LD_ADDR_VAR 0 3
5515: PUSH
5516: EMPTY
5517: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
5518: LD_ADDR_VAR 0 5
5522: PUSH
5523: LD_INT 0
5525: PUSH
5526: LD_INT 0
5528: PUSH
5529: LD_INT 0
5531: PUSH
5532: LD_INT 0
5534: PUSH
5535: LD_INT 0
5537: PUSH
5538: LD_INT 0
5540: PUSH
5541: LD_INT 0
5543: PUSH
5544: LD_INT 0
5546: PUSH
5547: LD_INT 1
5549: PUSH
5550: LD_INT 0
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: ST_TO_ADDR
// _target := [ [ 71 , 34 ] , [ 63 , 49 ] ] ;
5565: LD_ADDR_VAR 0 6
5569: PUSH
5570: LD_INT 71
5572: PUSH
5573: LD_INT 34
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: PUSH
5580: LD_INT 63
5582: PUSH
5583: LD_INT 49
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
5594: LD_ADDR_VAR 0 2
5598: PUSH
5599: DOUBLE
5600: LD_INT 1
5602: DEC
5603: ST_TO_ADDR
5604: LD_INT 5
5606: PUSH
5607: LD_INT 6
5609: PUSH
5610: LD_INT 6
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: LIST
5617: PUSH
5618: LD_OWVAR 67
5622: ARRAY
5623: PUSH
5624: FOR_TO
5625: IFFALSE 5762
// begin PrepareVehicle ( [ us_medium_wheeled , us_heavy_tracked , us_morphling ] [ rand ( 1 , 3 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ us_laser , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 78 ) ;
5627: LD_INT 2
5629: PUSH
5630: LD_INT 4
5632: PUSH
5633: LD_INT 5
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 1
5643: PPUSH
5644: LD_INT 3
5646: PPUSH
5647: CALL_OW 12
5651: ARRAY
5652: PPUSH
5653: LD_INT 1
5655: PUSH
5656: LD_INT 3
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PUSH
5663: LD_INT 1
5665: PPUSH
5666: LD_INT 2
5668: PPUSH
5669: CALL_OW 12
5673: ARRAY
5674: PPUSH
5675: LD_INT 3
5677: PPUSH
5678: LD_INT 9
5680: PUSH
5681: LD_INT 7
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: PUSH
5688: LD_INT 1
5690: PPUSH
5691: LD_INT 2
5693: PPUSH
5694: CALL_OW 12
5698: ARRAY
5699: PPUSH
5700: LD_INT 78
5702: PPUSH
5703: CALL 18752 0 5
// veh := CreateVehicle ;
5707: LD_ADDR_VAR 0 4
5711: PUSH
5712: CALL_OW 45
5716: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
5717: LD_VAR 0 4
5721: PPUSH
5722: LD_INT 2
5724: PPUSH
5725: CALL_OW 233
// PlaceUnitArea ( veh , north_spawn , false ) ;
5729: LD_VAR 0 4
5733: PPUSH
5734: LD_INT 17
5736: PPUSH
5737: LD_INT 0
5739: PPUSH
5740: CALL_OW 49
// tmp := tmp ^ veh ;
5744: LD_ADDR_VAR 0 3
5748: PUSH
5749: LD_VAR 0 3
5753: PUSH
5754: LD_VAR 0 4
5758: ADD
5759: ST_TO_ADDR
// end ;
5760: GO 5624
5762: POP
5763: POP
// if not tmp then
5764: LD_VAR 0 3
5768: NOT
5769: IFFALSE 5773
// exit ;
5771: GO 5816
// if not first_powell_attack then
5773: LD_EXP 11
5777: NOT
5778: IFFALSE 5788
// first_powell_attack := true ;
5780: LD_ADDR_EXP 11
5784: PUSH
5785: LD_INT 1
5787: ST_TO_ADDR
// Attack ( [ 0 , tmp , _target , flags ] ) ;
5788: LD_INT 0
5790: PUSH
5791: LD_VAR 0 3
5795: PUSH
5796: LD_VAR 0 6
5800: PUSH
5801: LD_VAR 0 5
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: PPUSH
5812: CALL 46649 0 1
// end ; end_of_file
5816: LD_VAR 0 1
5820: RET
// export function Action ; var tmp , i , un ; begin
5821: LD_INT 0
5823: PPUSH
5824: PPUSH
5825: PPUSH
5826: PPUSH
// CenterNowOnXY ( 68 , 39 ) ;
5827: LD_INT 68
5829: PPUSH
5830: LD_INT 39
5832: PPUSH
5833: CALL_OW 86
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
5837: LD_ADDR_VAR 0 2
5841: PUSH
5842: LD_INT 22
5844: PUSH
5845: LD_INT 7
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: PPUSH
5852: CALL_OW 69
5856: ST_TO_ADDR
// InGameOn ;
5857: CALL_OW 8
// ComMoveXY ( tmp , 71 , 49 ) ;
5861: LD_VAR 0 2
5865: PPUSH
5866: LD_INT 71
5868: PPUSH
5869: LD_INT 49
5871: PPUSH
5872: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5876: LD_INT 35
5878: PPUSH
5879: CALL_OW 67
// until SeeXY ( 7 , 71 , 51 ) ;
5883: LD_INT 7
5885: PPUSH
5886: LD_INT 71
5888: PPUSH
5889: LD_INT 51
5891: PPUSH
5892: CALL_OW 293
5896: IFFALSE 5876
// DialogueOn ;
5898: CALL_OW 6
// Say ( JMM , D1-JMM-1 ) ;
5902: LD_EXP 14
5906: PPUSH
5907: LD_STRING D1-JMM-1
5909: PPUSH
5910: CALL_OW 88
// if Joan then
5914: LD_EXP 29
5918: IFFALSE 5932
// Say ( Joan , D1-Joan-1 ) ;
5920: LD_EXP 29
5924: PPUSH
5925: LD_STRING D1-Joan-1
5927: PPUSH
5928: CALL_OW 88
// if Lisa then
5932: LD_EXP 16
5936: IFFALSE 5950
// Say ( Lisa , D1-Lisa-1 ) ;
5938: LD_EXP 16
5942: PPUSH
5943: LD_STRING D1-Lisa-1
5945: PPUSH
5946: CALL_OW 88
// if Joan or Lisa then
5950: LD_EXP 29
5954: PUSH
5955: LD_EXP 16
5959: OR
5960: IFFALSE 5974
// Say ( JMM , D1-JMM-2 ) ;
5962: LD_EXP 14
5966: PPUSH
5967: LD_STRING D1-JMM-2
5969: PPUSH
5970: CALL_OW 88
// DialogueOff ;
5974: CALL_OW 7
// InGameOff ;
5978: CALL_OW 9
// PlaceSeeing ( 71 , 50 , 7 , - 30 ) ;
5982: LD_INT 71
5984: PPUSH
5985: LD_INT 50
5987: PPUSH
5988: LD_INT 7
5990: PPUSH
5991: LD_INT 30
5993: NEG
5994: PPUSH
5995: CALL_OW 330
// RemoveSeeing ( 71 , 50 , 7 ) ;
5999: LD_INT 71
6001: PPUSH
6002: LD_INT 50
6004: PPUSH
6005: LD_INT 7
6007: PPUSH
6008: CALL_OW 331
// ChangeMissionObjectives ( M1 ) ;
6012: LD_STRING M1
6014: PPUSH
6015: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
6019: LD_INT 35
6021: PPUSH
6022: CALL_OW 67
// until freedom ;
6026: LD_EXP 3
6030: IFFALSE 6019
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
6032: LD_INT 350
6034: PPUSH
6035: LD_INT 700
6037: PPUSH
6038: CALL_OW 12
6042: PPUSH
6043: CALL_OW 67
// PrepareGossudarov ;
6047: CALL 1680 0 0
// repeat wait ( 0 0$1 ) ;
6051: LD_INT 35
6053: PPUSH
6054: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6058: LD_INT 22
6060: PUSH
6061: LD_INT 6
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 3
6070: PUSH
6071: LD_INT 24
6073: PUSH
6074: LD_INT 1000
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PPUSH
6089: CALL_OW 69
6093: IFFALSE 6051
// tmp := FilterAllUnits ( [ f_side , 6 ] ) ;
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_INT 22
6102: PUSH
6103: LD_INT 6
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PPUSH
6110: CALL_OW 69
6114: ST_TO_ADDR
// for i in tmp do
6115: LD_ADDR_VAR 0 3
6119: PUSH
6120: LD_VAR 0 2
6124: PUSH
6125: FOR_IN
6126: IFFALSE 6142
// SetSide ( i , 7 ) ;
6128: LD_VAR 0 3
6132: PPUSH
6133: LD_INT 7
6135: PPUSH
6136: CALL_OW 235
6140: GO 6125
6142: POP
6143: POP
// DialogueOn ;
6144: CALL_OW 6
// ComTurnUnit ( [ JMM , Roth ] , Gossudarov ) ;
6148: LD_EXP 14
6152: PUSH
6153: LD_EXP 15
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PPUSH
6162: LD_EXP 31
6166: PPUSH
6167: CALL_OW 119
// CenterNowOnUnits ( Gossudarov ) ;
6171: LD_EXP 31
6175: PPUSH
6176: CALL_OW 87
// if not Roth then
6180: LD_EXP 15
6184: NOT
6185: IFFALSE 6249
// begin Say ( JMM , D2-JMM-1 ) ;
6187: LD_EXP 14
6191: PPUSH
6192: LD_STRING D2-JMM-1
6194: PPUSH
6195: CALL_OW 88
// Say ( JMM , D2-JMM-1b ) ;
6199: LD_EXP 14
6203: PPUSH
6204: LD_STRING D2-JMM-1b
6206: PPUSH
6207: CALL_OW 88
// Say ( Gossudarov , D2-Gos-1 ) ;
6211: LD_EXP 31
6215: PPUSH
6216: LD_STRING D2-Gos-1
6218: PPUSH
6219: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
6223: LD_EXP 14
6227: PPUSH
6228: LD_STRING D2-JMM-2
6230: PPUSH
6231: CALL_OW 88
// Say ( Gossudarov , D2-Gos-2 ) ;
6235: LD_EXP 31
6239: PPUSH
6240: LD_STRING D2-Gos-2
6242: PPUSH
6243: CALL_OW 88
// end else
6247: GO 6345
// begin Say ( Roth , D2-Roth-2 ) ;
6249: LD_EXP 15
6253: PPUSH
6254: LD_STRING D2-Roth-2
6256: PPUSH
6257: CALL_OW 88
// Say ( JMM , D2-JMM-1a ) ;
6261: LD_EXP 14
6265: PPUSH
6266: LD_STRING D2-JMM-1a
6268: PPUSH
6269: CALL_OW 88
// Say ( Roth , D2-Roth-2a ) ;
6273: LD_EXP 15
6277: PPUSH
6278: LD_STRING D2-Roth-2a
6280: PPUSH
6281: CALL_OW 88
// Say ( Roth , D2-Roth-2b ) ;
6285: LD_EXP 15
6289: PPUSH
6290: LD_STRING D2-Roth-2b
6292: PPUSH
6293: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
6297: LD_EXP 14
6301: PPUSH
6302: LD_STRING D2-JMM-3
6304: PPUSH
6305: CALL_OW 88
// Say ( Gossudarov , D2-Gos-3 ) ;
6309: LD_EXP 31
6313: PPUSH
6314: LD_STRING D2-Gos-3
6316: PPUSH
6317: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
6321: LD_EXP 14
6325: PPUSH
6326: LD_STRING D2-JMM-4
6328: PPUSH
6329: CALL_OW 88
// Say ( Gossudarov , D2-Gos-4 ) ;
6333: LD_EXP 31
6337: PPUSH
6338: LD_STRING D2-Gos-4
6340: PPUSH
6341: CALL_OW 88
// end ; Say ( JMM , D2-JMM-5 ) ;
6345: LD_EXP 14
6349: PPUSH
6350: LD_STRING D2-JMM-5
6352: PPUSH
6353: CALL_OW 88
// Say ( Gossudarov , D2-Gos-5 ) ;
6357: LD_EXP 31
6361: PPUSH
6362: LD_STRING D2-Gos-5
6364: PPUSH
6365: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
6369: LD_EXP 14
6373: PPUSH
6374: LD_STRING D2-JMM-6
6376: PPUSH
6377: CALL_OW 88
// DialogueOff ;
6381: CALL_OW 7
// wait ( 0 0$2 ) ;
6385: LD_INT 70
6387: PPUSH
6388: CALL_OW 67
// if Kirilenkova then
6392: LD_EXP 32
6396: IFFALSE 6410
// Say ( Kirilenkova , D3-Kir-1 ) ;
6398: LD_EXP 32
6402: PPUSH
6403: LD_STRING D3-Kir-1
6405: PPUSH
6406: CALL_OW 88
// gossudarov_arrive := true ;
6410: LD_ADDR_EXP 4
6414: PUSH
6415: LD_INT 1
6417: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6418: LD_INT 35
6420: PPUSH
6421: CALL_OW 67
// until ru_lab_builded ;
6425: LD_EXP 5
6429: IFFALSE 6418
// if Kirilenkova then
6431: LD_EXP 32
6435: IFFALSE 6451
// Say ( Kirilenkova , D3a-Kir-1 ) else
6437: LD_EXP 32
6441: PPUSH
6442: LD_STRING D3a-Kir-1
6444: PPUSH
6445: CALL_OW 88
6449: GO 6473
// begin un := SciRu ;
6451: LD_ADDR_VAR 0 4
6455: PUSH
6456: CALL 11239 0 0
6460: ST_TO_ADDR
// Say ( un , D3a-Sci1-1 ) ;
6461: LD_VAR 0 4
6465: PPUSH
6466: LD_STRING D3a-Sci1-1
6468: PPUSH
6469: CALL_OW 88
// end ; if Kirilenkova or un then
6473: LD_EXP 32
6477: PUSH
6478: LD_VAR 0 4
6482: OR
6483: IFFALSE 6497
// Say ( JMM , D3a-JMM-1 ) ;
6485: LD_EXP 14
6489: PPUSH
6490: LD_STRING D3a-JMM-1
6492: PPUSH
6493: CALL_OW 88
// end ;
6497: LD_VAR 0 1
6501: RET
// every 0 0$1 trigger gossudarov_arrive and FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) < 6 do
6502: LD_EXP 4
6506: PUSH
6507: LD_INT 22
6509: PUSH
6510: LD_INT 7
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: LD_INT 2
6519: PUSH
6520: LD_INT 25
6522: PUSH
6523: LD_INT 1
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: LD_INT 25
6532: PUSH
6533: LD_INT 2
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: LD_INT 25
6542: PUSH
6543: LD_INT 3
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: LD_INT 25
6552: PUSH
6553: LD_INT 4
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 25
6562: PUSH
6563: LD_INT 5
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: LD_INT 25
6572: PUSH
6573: LD_INT 8
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 25
6582: PUSH
6583: LD_INT 9
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PPUSH
6604: CALL_OW 69
6608: PUSH
6609: LD_INT 6
6611: LESS
6612: AND
6613: IFFALSE 6625
6615: GO 6617
6617: DISABLE
// YouLost ( TooMany ) ;
6618: LD_STRING TooMany
6620: PPUSH
6621: CALL_OW 104
6625: END
// every 0 0$40 trigger GetSide ( Gossudarov ) = 7 do var i , tmp , un ;
6626: LD_EXP 31
6630: PPUSH
6631: CALL_OW 255
6635: PUSH
6636: LD_INT 7
6638: EQUAL
6639: IFFALSE 6839
6641: GO 6643
6643: DISABLE
6644: LD_INT 0
6646: PPUSH
6647: PPUSH
6648: PPUSH
// begin uc_side := 3 ;
6649: LD_ADDR_OWVAR 20
6653: PUSH
6654: LD_INT 3
6656: ST_TO_ADDR
// uc_nation := 3 ;
6657: LD_ADDR_OWVAR 21
6661: PUSH
6662: LD_INT 3
6664: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_heavy_machine_gun , 100 ) ;
6665: LD_INT 21
6667: PPUSH
6668: LD_INT 3
6670: PPUSH
6671: LD_INT 3
6673: PPUSH
6674: LD_INT 42
6676: PPUSH
6677: LD_INT 100
6679: PPUSH
6680: CALL 18752 0 5
// un := CreateVehicle ;
6684: LD_ADDR_VAR 0 3
6688: PUSH
6689: CALL_OW 45
6693: ST_TO_ADDR
// PlaceUnitArea ( un , south_west_spawn , false ) ;
6694: LD_VAR 0 3
6698: PPUSH
6699: LD_INT 15
6701: PPUSH
6702: LD_INT 0
6704: PPUSH
6705: CALL_OW 49
// ComMoveXY ( un , 67 , 45 ) ;
6709: LD_VAR 0 3
6713: PPUSH
6714: LD_INT 67
6716: PPUSH
6717: LD_INT 45
6719: PPUSH
6720: CALL_OW 111
// AddComWait ( un , 0 0$2 ) ;
6724: LD_VAR 0 3
6728: PPUSH
6729: LD_INT 70
6731: PPUSH
6732: CALL_OW 202
// AddComMoveXY ( un , 69 , 18 ) ;
6736: LD_VAR 0 3
6740: PPUSH
6741: LD_INT 69
6743: PPUSH
6744: LD_INT 18
6746: PPUSH
6747: CALL_OW 171
// AddComMoveXY ( un , 60 , 2 ) ;
6751: LD_VAR 0 3
6755: PPUSH
6756: LD_INT 60
6758: PPUSH
6759: LD_INT 2
6761: PPUSH
6762: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6766: LD_INT 35
6768: PPUSH
6769: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , north_spawn ) ;
6773: LD_VAR 0 3
6777: PPUSH
6778: CALL_OW 302
6782: NOT
6783: PUSH
6784: LD_VAR 0 3
6788: PPUSH
6789: LD_INT 17
6791: PPUSH
6792: CALL_OW 308
6796: OR
6797: IFFALSE 6766
// if IsInArea ( un , north_spawn ) or IsAt ( un , 60 , 2 ) then
6799: LD_VAR 0 3
6803: PPUSH
6804: LD_INT 17
6806: PPUSH
6807: CALL_OW 308
6811: PUSH
6812: LD_VAR 0 3
6816: PPUSH
6817: LD_INT 60
6819: PPUSH
6820: LD_INT 2
6822: PPUSH
6823: CALL_OW 307
6827: OR
6828: IFFALSE 6839
// RemoveUnit ( un ) ;
6830: LD_VAR 0 3
6834: PPUSH
6835: CALL_OW 64
// end ;
6839: PPOPN 3
6841: END
// every 0 0$2 do var i , un , tmp ;
6842: GO 6844
6844: DISABLE
6845: LD_INT 0
6847: PPUSH
6848: PPUSH
6849: PPUSH
// begin repeat wait ( 0 0$2 ) ;
6850: LD_INT 70
6852: PPUSH
6853: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 3 ] ] ) ;
6857: LD_ADDR_VAR 0 3
6861: PUSH
6862: LD_INT 22
6864: PUSH
6865: LD_INT 7
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: LD_INT 101
6874: PUSH
6875: LD_INT 3
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: ST_TO_ADDR
// until tmp ;
6891: LD_VAR 0 3
6895: IFFALSE 6850
// un := NearestUnitToUnit ( tmp , JMM ) ;
6897: LD_ADDR_VAR 0 2
6901: PUSH
6902: LD_VAR 0 3
6906: PPUSH
6907: LD_EXP 14
6911: PPUSH
6912: CALL_OW 74
6916: ST_TO_ADDR
// player_spotted := true ;
6917: LD_ADDR_EXP 6
6921: PUSH
6922: LD_INT 1
6924: ST_TO_ADDR
// tmp := SciRu ;
6925: LD_ADDR_VAR 0 3
6929: PUSH
6930: CALL 11239 0 0
6934: ST_TO_ADDR
// DialogueOn ;
6935: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 7 , - 8 ) ;
6939: LD_VAR 0 2
6943: PPUSH
6944: CALL_OW 250
6948: PPUSH
6949: LD_VAR 0 2
6953: PPUSH
6954: CALL_OW 251
6958: PPUSH
6959: LD_INT 7
6961: PPUSH
6962: LD_INT 8
6964: NEG
6965: PPUSH
6966: CALL_OW 330
// CenterNowOnUnits ( un ) ;
6970: LD_VAR 0 2
6974: PPUSH
6975: CALL_OW 87
// if tmp then
6979: LD_VAR 0 3
6983: IFFALSE 6997
// Say ( tmp , D4-RSci1-1 ) ;
6985: LD_VAR 0 3
6989: PPUSH
6990: LD_STRING D4-RSci1-1
6992: PPUSH
6993: CALL_OW 88
// if Gossudarov then
6997: LD_EXP 31
7001: IFFALSE 7027
// begin Say ( Gossudarov , D4-Gos-1 ) ;
7003: LD_EXP 31
7007: PPUSH
7008: LD_STRING D4-Gos-1
7010: PPUSH
7011: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7015: LD_EXP 14
7019: PPUSH
7020: LD_STRING D4-JMM-1
7022: PPUSH
7023: CALL_OW 88
// end ; RemoveSeeing ( GetX ( un ) , GetY ( un ) , 7 ) ;
7027: LD_VAR 0 2
7031: PPUSH
7032: CALL_OW 250
7036: PPUSH
7037: LD_VAR 0 2
7041: PPUSH
7042: CALL_OW 251
7046: PPUSH
7047: LD_INT 7
7049: PPUSH
7050: CALL_OW 331
// DialogueOff ;
7054: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
7058: LD_STRING M5
7060: PPUSH
7061: CALL_OW 337
// end ;
7065: PPOPN 3
7067: END
// every 0 0$30 + 2 2$30 trigger player_spotted do
7068: LD_EXP 6
7072: IFFALSE 7531
7074: GO 7076
7076: DISABLE
// begin PrepareBelkov ;
7077: CALL 1930 0 0
// ComMoveXY ( Belkov , 118 , 106 ) ;
7081: LD_EXP 46
7085: PPUSH
7086: LD_INT 118
7088: PPUSH
7089: LD_INT 106
7091: PPUSH
7092: CALL_OW 111
// AddComHold ( Belkov ) ;
7096: LD_EXP 46
7100: PPUSH
7101: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
7105: LD_INT 35
7107: PPUSH
7108: CALL_OW 67
// until IsAt ( Belkov , 118 , 106 ) ;
7112: LD_EXP 46
7116: PPUSH
7117: LD_INT 118
7119: PPUSH
7120: LD_INT 106
7122: PPUSH
7123: CALL_OW 307
7127: IFFALSE 7105
// ChangeSideFog ( 4 , 7 ) ;
7129: LD_INT 4
7131: PPUSH
7132: LD_INT 7
7134: PPUSH
7135: CALL_OW 343
// if IsOk ( Belkov ) then
7139: LD_EXP 46
7143: PPUSH
7144: CALL_OW 302
7148: IFFALSE 7232
// begin InGameOn ;
7150: CALL_OW 8
// DialogueOn ;
7154: CALL_OW 6
// SayRadio ( Belkov , D5-Bel-1 ) ;
7158: LD_EXP 46
7162: PPUSH
7163: LD_STRING D5-Bel-1
7165: PPUSH
7166: CALL_OW 94
// if Gossudarov then
7170: LD_EXP 31
7174: IFFALSE 7224
// begin Say ( Gossudarov , D5-Gos-1 ) ;
7176: LD_EXP 31
7180: PPUSH
7181: LD_STRING D5-Gos-1
7183: PPUSH
7184: CALL_OW 88
// Say ( JMM , D5-JMM-1 ) ;
7188: LD_EXP 14
7192: PPUSH
7193: LD_STRING D5-JMM-1
7195: PPUSH
7196: CALL_OW 88
// Say ( Gossudarov , D5-Gos-2 ) ;
7200: LD_EXP 31
7204: PPUSH
7205: LD_STRING D5-Gos-2
7207: PPUSH
7208: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
7212: LD_EXP 14
7216: PPUSH
7217: LD_STRING D5-JMM-2
7219: PPUSH
7220: CALL_OW 88
// end ; DialogueOff ;
7224: CALL_OW 7
// InGameOff ;
7228: CALL_OW 9
// end ; case Query ( QSaveBelkov ) of 1 :
7232: LD_STRING QSaveBelkov
7234: PPUSH
7235: CALL_OW 97
7239: PUSH
7240: LD_INT 1
7242: DOUBLE
7243: EQUAL
7244: IFTRUE 7248
7246: GO 7298
7248: POP
// begin DialogueOn ;
7249: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
7253: LD_EXP 14
7257: PPUSH
7258: LD_STRING D5a-JMM-1
7260: PPUSH
7261: CALL_OW 88
// SayRadio ( Belkov , D5a-Bel-1 ) ;
7265: LD_EXP 46
7269: PPUSH
7270: LD_STRING D5a-Bel-1
7272: PPUSH
7273: CALL_OW 94
// DialogueOff ;
7277: CALL_OW 7
// ComMoveXY ( Belkov , 83 , 49 ) ;
7281: LD_EXP 46
7285: PPUSH
7286: LD_INT 83
7288: PPUSH
7289: LD_INT 49
7291: PPUSH
7292: CALL_OW 111
// end ; 2 :
7296: GO 7358
7298: LD_INT 2
7300: DOUBLE
7301: EQUAL
7302: IFTRUE 7306
7304: GO 7357
7306: POP
// begin Say ( JMM , D5a-JMM-2 ) ;
7307: LD_EXP 14
7311: PPUSH
7312: LD_STRING D5a-JMM-2
7314: PPUSH
7315: CALL_OW 88
// ComWait ( Belkov , 0 0$10 ) ;
7319: LD_EXP 46
7323: PPUSH
7324: LD_INT 350
7326: PPUSH
7327: CALL_OW 142
// AddComMoveXY ( Belkov , 107 , 109 ) ;
7331: LD_EXP 46
7335: PPUSH
7336: LD_INT 107
7338: PPUSH
7339: LD_INT 109
7341: PPUSH
7342: CALL_OW 171
// AddComHold ( Belkov ) ;
7346: LD_EXP 46
7350: PPUSH
7351: CALL_OW 200
// end ; end ;
7355: GO 7358
7357: POP
// repeat wait ( 0 0$1 ) ;
7358: LD_INT 35
7360: PPUSH
7361: CALL_OW 67
// until ( IsDead ( Belkov ) and GetSide ( Belkov ) = 4 ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Belkov ) , Belkov ) < 10 ;
7365: LD_EXP 46
7369: PPUSH
7370: CALL_OW 301
7374: PUSH
7375: LD_EXP 46
7379: PPUSH
7380: CALL_OW 255
7384: PUSH
7385: LD_INT 4
7387: EQUAL
7388: AND
7389: PUSH
7390: LD_INT 22
7392: PUSH
7393: LD_INT 7
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PPUSH
7400: CALL_OW 69
7404: PPUSH
7405: LD_EXP 46
7409: PPUSH
7410: CALL_OW 74
7414: PPUSH
7415: LD_EXP 46
7419: PPUSH
7420: CALL_OW 296
7424: PUSH
7425: LD_INT 10
7427: LESS
7428: OR
7429: IFFALSE 7358
// if IsDead ( Belkov ) then
7431: LD_EXP 46
7435: PPUSH
7436: CALL_OW 301
7440: IFFALSE 7465
// begin CenterNowOnUnits ( Belkov ) ;
7442: LD_EXP 46
7446: PPUSH
7447: CALL_OW 87
// Say ( JMM , D5a-JMM-2a ) ;
7451: LD_EXP 14
7455: PPUSH
7456: LD_STRING D5a-JMM-2a
7458: PPUSH
7459: CALL_OW 88
// exit ;
7463: GO 7531
// end ; if See ( 7 , Belkov ) then
7465: LD_INT 7
7467: PPUSH
7468: LD_EXP 46
7472: PPUSH
7473: CALL_OW 292
7477: IFFALSE 7491
// SetSide ( Belkov , 7 ) ;
7479: LD_EXP 46
7483: PPUSH
7484: LD_INT 7
7486: PPUSH
7487: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7491: LD_INT 35
7493: PPUSH
7494: CALL_OW 67
// until GetDistUnitXY ( Belkov , 66 , 45 ) < 30 ;
7498: LD_EXP 46
7502: PPUSH
7503: LD_INT 66
7505: PPUSH
7506: LD_INT 45
7508: PPUSH
7509: CALL_OW 297
7513: PUSH
7514: LD_INT 30
7516: LESS
7517: IFFALSE 7491
// Say ( Belkov , D6-Bel-1 ) ;
7519: LD_EXP 46
7523: PPUSH
7524: LD_STRING D6-Bel-1
7526: PPUSH
7527: CALL_OW 88
// end ;
7531: END
// every 0 0$1 trigger IsOk ( Belkov ) and UnitShoot ( Belkov ) in FilterAllUnits ( [ f_or , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ) do
7532: LD_EXP 46
7536: PPUSH
7537: CALL_OW 302
7541: PUSH
7542: LD_EXP 46
7546: PPUSH
7547: CALL_OW 504
7551: PUSH
7552: LD_INT 2
7554: PUSH
7555: LD_INT 34
7557: PUSH
7558: LD_INT 47
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PUSH
7565: LD_INT 34
7567: PUSH
7568: LD_INT 45
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: PPUSH
7580: CALL_OW 69
7584: IN
7585: AND
7586: IFFALSE 7603
7588: GO 7590
7590: DISABLE
// Say ( Belkov , D7-Bel-1 ) ;
7591: LD_EXP 46
7595: PPUSH
7596: LD_STRING D7-Bel-1
7598: PPUSH
7599: CALL_OW 88
7603: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 2 ] ] ) and not ar_base_spotted and not IsPlaced ( Burlak ) do var tmp ;
7604: LD_INT 22
7606: PUSH
7607: LD_INT 7
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: LD_INT 101
7616: PUSH
7617: LD_INT 2
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PPUSH
7628: CALL_OW 69
7632: PUSH
7633: LD_EXP 8
7637: NOT
7638: AND
7639: PUSH
7640: LD_EXP 45
7644: PPUSH
7645: CALL_OW 305
7649: NOT
7650: AND
7651: IFFALSE 8121
7653: GO 7655
7655: DISABLE
7656: LD_INT 0
7658: PPUSH
// begin ar_base_spotted := true ;
7659: LD_ADDR_EXP 8
7663: PUSH
7664: LD_INT 1
7666: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) ;
7667: LD_ADDR_VAR 0 1
7671: PUSH
7672: LD_INT 22
7674: PUSH
7675: LD_INT 2
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: LD_INT 21
7684: PUSH
7685: LD_INT 3
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: PPUSH
7696: CALL_OW 69
7700: ST_TO_ADDR
// tmp := NearestUnitToUnit ( tmp , JMM ) ;
7701: LD_ADDR_VAR 0 1
7705: PUSH
7706: LD_VAR 0 1
7710: PPUSH
7711: LD_EXP 14
7715: PPUSH
7716: CALL_OW 74
7720: ST_TO_ADDR
// RevealFogArea ( 7 , area_base_arabian ) ;
7721: LD_INT 7
7723: PPUSH
7724: LD_INT 3
7726: PPUSH
7727: CALL_OW 332
// DialogueOn ;
7731: CALL_OW 6
// CenterNowOnXY ( GetX ( tmp ) , GetY ( tmp ) ) ;
7735: LD_VAR 0 1
7739: PPUSH
7740: CALL_OW 250
7744: PPUSH
7745: LD_VAR 0 1
7749: PPUSH
7750: CALL_OW 251
7754: PPUSH
7755: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Frank , Roth , Cornel , Denis , Gladstone ] ;
7759: LD_ADDR_VAR 0 1
7763: PUSH
7764: LD_INT 22
7766: PUSH
7767: LD_INT 7
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: LD_INT 23
7776: PUSH
7777: LD_INT 1
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PUSH
7784: LD_INT 26
7786: PUSH
7787: LD_INT 1
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: PUSH
7804: LD_EXP 14
7808: PUSH
7809: LD_EXP 18
7813: PUSH
7814: LD_EXP 19
7818: PUSH
7819: LD_EXP 26
7823: PUSH
7824: LD_EXP 15
7828: PUSH
7829: LD_EXP 24
7833: PUSH
7834: LD_EXP 20
7838: PUSH
7839: LD_EXP 22
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: DIFF
7854: ST_TO_ADDR
// if not tmp then
7855: LD_VAR 0 1
7859: NOT
7860: IFFALSE 7934
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_female ] ] ) diff [ Joan , Lisa , Kikuchi , Simms ] ;
7862: LD_ADDR_VAR 0 1
7866: PUSH
7867: LD_INT 22
7869: PUSH
7870: LD_INT 7
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: LD_INT 23
7879: PUSH
7880: LD_INT 1
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 26
7889: PUSH
7890: LD_INT 2
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: PPUSH
7902: CALL_OW 69
7906: PUSH
7907: LD_EXP 29
7911: PUSH
7912: LD_EXP 16
7916: PUSH
7917: LD_EXP 27
7921: PUSH
7922: LD_EXP 28
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: DIFF
7933: ST_TO_ADDR
// if tmp then
7934: LD_VAR 0 1
7938: IFFALSE 8009
// case GetSex ( tmp [ 1 ] ) of sex_male :
7940: LD_VAR 0 1
7944: PUSH
7945: LD_INT 1
7947: ARRAY
7948: PPUSH
7949: CALL_OW 258
7953: PUSH
7954: LD_INT 1
7956: DOUBLE
7957: EQUAL
7958: IFTRUE 7962
7960: GO 7981
7962: POP
// Say ( tmp [ 1 ] , D9-Sol1-1 ) ; sex_female :
7963: LD_VAR 0 1
7967: PUSH
7968: LD_INT 1
7970: ARRAY
7971: PPUSH
7972: LD_STRING D9-Sol1-1
7974: PPUSH
7975: CALL_OW 88
7979: GO 8009
7981: LD_INT 2
7983: DOUBLE
7984: EQUAL
7985: IFTRUE 7989
7987: GO 8008
7989: POP
// Say ( tmp [ 1 ] , D9-FSol1-1 ) ; end ;
7990: LD_VAR 0 1
7994: PUSH
7995: LD_INT 1
7997: ARRAY
7998: PPUSH
7999: LD_STRING D9-FSol1-1
8001: PPUSH
8002: CALL_OW 88
8006: GO 8009
8008: POP
// if Frank then
8009: LD_EXP 26
8013: IFFALSE 8117
// begin PlaceSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 , 8 ) ;
8015: LD_EXP 55
8019: PPUSH
8020: CALL_OW 250
8024: PPUSH
8025: LD_EXP 55
8029: PPUSH
8030: CALL_OW 251
8034: PPUSH
8035: LD_INT 7
8037: PPUSH
8038: LD_INT 8
8040: PPUSH
8041: CALL_OW 330
// CenterNowOnUnits ( mastodont ) ;
8045: LD_EXP 55
8049: PPUSH
8050: CALL_OW 87
// Say ( Frank , D9-Frank-1 ) ;
8054: LD_EXP 26
8058: PPUSH
8059: LD_STRING D9-Frank-1
8061: PPUSH
8062: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
8066: LD_EXP 14
8070: PPUSH
8071: LD_STRING D9-JMM-1
8073: PPUSH
8074: CALL_OW 88
// Say ( Frank , D9-Frank-2 ) ;
8078: LD_EXP 26
8082: PPUSH
8083: LD_STRING D9-Frank-2
8085: PPUSH
8086: CALL_OW 88
// RemoveSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 ) ;
8090: LD_EXP 55
8094: PPUSH
8095: CALL_OW 250
8099: PPUSH
8100: LD_EXP 55
8104: PPUSH
8105: CALL_OW 251
8109: PPUSH
8110: LD_INT 7
8112: PPUSH
8113: CALL_OW 331
// end ; DialogueOff ;
8117: CALL_OW 7
// end ;
8121: PPOPN 1
8123: END
// every 0 0$20 trigger first_attack do var i , selected_option ;
8124: LD_EXP 7
8128: IFFALSE 9155
8130: GO 8132
8132: DISABLE
8133: LD_INT 0
8135: PPUSH
8136: PPUSH
// begin selected_option := 1 ;
8137: LD_ADDR_VAR 0 2
8141: PUSH
8142: LD_INT 1
8144: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8145: LD_INT 10500
8147: PPUSH
8148: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8152: LD_INT 35
8154: PPUSH
8155: CALL_OW 67
// until not ru_attackers ;
8159: LD_EXP 51
8163: NOT
8164: IFFALSE 8152
// PrepareBurlak ;
8166: CALL 2042 0 0
// repeat wait ( 0 0$2 ) ;
8170: LD_INT 70
8172: PPUSH
8173: CALL_OW 67
// until not HasTask ( Burlak ) ;
8177: LD_EXP 45
8181: PPUSH
8182: CALL_OW 314
8186: NOT
8187: IFFALSE 8170
// InGameOn ;
8189: CALL_OW 8
// DialogueOn ;
8193: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
8197: LD_EXP 48
8201: PPUSH
8202: CALL_OW 87
// SayRadio ( Burlak , D10-Bur-1 ) ;
8206: LD_EXP 45
8210: PPUSH
8211: LD_STRING D10-Bur-1
8213: PPUSH
8214: CALL_OW 94
// if Belkov and GetSide ( Belkov ) = 7 then
8218: LD_EXP 46
8222: PUSH
8223: LD_EXP 46
8227: PPUSH
8228: CALL_OW 255
8232: PUSH
8233: LD_INT 7
8235: EQUAL
8236: AND
8237: IFFALSE 8251
// Say ( Belkov , D10-Bel-1 ) ;
8239: LD_EXP 46
8243: PPUSH
8244: LD_STRING D10-Bel-1
8246: PPUSH
8247: CALL_OW 88
// if Gossudarov then
8251: LD_EXP 31
8255: IFFALSE 8269
// Say ( Gossudarov , D10-Gos-1 ) ;
8257: LD_EXP 31
8261: PPUSH
8262: LD_STRING D10-Gos-1
8264: PPUSH
8265: CALL_OW 88
// if Kirilenkova then
8269: LD_EXP 32
8273: IFFALSE 8287
// Say ( Kirilenkova , D10-Kir-1 ) ;
8275: LD_EXP 32
8279: PPUSH
8280: LD_STRING D10-Kir-1
8282: PPUSH
8283: CALL_OW 88
// Say ( SolRu , D10-RSol1-1 ) ;
8287: CALL 11368 0 0
8291: PPUSH
8292: LD_STRING D10-RSol1-1
8294: PPUSH
8295: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-2 ) ;
8299: LD_EXP 45
8303: PPUSH
8304: LD_STRING D10-Bur-2
8306: PPUSH
8307: CALL_OW 94
// Say ( JMM , D10-JMM-2 ) ;
8311: LD_EXP 14
8315: PPUSH
8316: LD_STRING D10-JMM-2
8318: PPUSH
8319: CALL_OW 88
// if Kirilenkova then
8323: LD_EXP 32
8327: IFFALSE 8343
// Say ( Kirilenkova , D10-Kir-2 ) else
8329: LD_EXP 32
8333: PPUSH
8334: LD_STRING D10-Kir-2
8336: PPUSH
8337: CALL_OW 88
8341: GO 8355
// Say ( SolRu , D10-RSol1-2 ) ;
8343: CALL 11368 0 0
8347: PPUSH
8348: LD_STRING D10-RSol1-2
8350: PPUSH
8351: CALL_OW 88
// Say ( JMM , D10-JMM-3 ) ;
8355: LD_EXP 14
8359: PPUSH
8360: LD_STRING D10-JMM-3
8362: PPUSH
8363: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-3 ) ;
8367: LD_EXP 45
8371: PPUSH
8372: LD_STRING D10-Bur-3
8374: PPUSH
8375: CALL_OW 94
// Say ( JMM , D10-JMM-4 ) ;
8379: LD_EXP 14
8383: PPUSH
8384: LD_STRING D10-JMM-4
8386: PPUSH
8387: CALL_OW 88
// DialogueOff ;
8391: CALL_OW 7
// InGameOff ;
8395: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
8399: LD_STRING M2
8401: PPUSH
8402: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
8406: LD_INT 35
8408: PPUSH
8409: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , Burlak , 8 ] ] ) ;
8413: LD_INT 22
8415: PUSH
8416: LD_INT 7
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PUSH
8423: LD_INT 91
8425: PUSH
8426: LD_EXP 45
8430: PUSH
8431: LD_INT 8
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: LIST
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: PPUSH
8443: CALL_OW 69
8447: IFFALSE 8406
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
8449: LD_ADDR_VAR 0 1
8453: PUSH
8454: LD_INT 22
8456: PUSH
8457: LD_INT 4
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PPUSH
8464: CALL_OW 69
8468: PUSH
8469: FOR_IN
8470: IFFALSE 8486
// SetSide ( i , 7 ) ;
8472: LD_VAR 0 1
8476: PPUSH
8477: LD_INT 7
8479: PPUSH
8480: CALL_OW 235
8484: GO 8469
8486: POP
8487: POP
// ChangeMissionObjectives ( M3 ) ;
8488: LD_STRING M3
8490: PPUSH
8491: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
8495: LD_INT 35
8497: PPUSH
8498: CALL_OW 67
// until GetDistUnits ( JMM , Burlak ) < 8 ;
8502: LD_EXP 14
8506: PPUSH
8507: LD_EXP 45
8511: PPUSH
8512: CALL_OW 296
8516: PUSH
8517: LD_INT 8
8519: LESS
8520: IFFALSE 8495
// ComTurnUnit ( JMM , Burlak ) ;
8522: LD_EXP 14
8526: PPUSH
8527: LD_EXP 45
8531: PPUSH
8532: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
8536: LD_EXP 45
8540: PPUSH
8541: LD_EXP 14
8545: PPUSH
8546: CALL_OW 119
// wait ( 0 0$0.3 ) ;
8550: LD_INT 10
8552: PPUSH
8553: CALL_OW 67
// DialogueOn ;
8557: CALL_OW 6
// Say ( JMM , D11-JMM-1 ) ;
8561: LD_EXP 14
8565: PPUSH
8566: LD_STRING D11-JMM-1
8568: PPUSH
8569: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
8573: LD_EXP 45
8577: PPUSH
8578: LD_STRING D11-Bur-1
8580: PPUSH
8581: CALL_OW 88
// Say ( JMM , D11-JMM-2 ) ;
8585: LD_EXP 14
8589: PPUSH
8590: LD_STRING D11-JMM-2
8592: PPUSH
8593: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
8597: LD_EXP 45
8601: PPUSH
8602: LD_STRING D11-Bur-2
8604: PPUSH
8605: CALL_OW 88
// Say ( JMM , D11-JMM-3 ) ;
8609: LD_EXP 14
8613: PPUSH
8614: LD_STRING D11-JMM-3
8616: PPUSH
8617: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
8621: LD_EXP 45
8625: PPUSH
8626: LD_STRING D11-Bur-3
8628: PPUSH
8629: CALL_OW 88
// Say ( JMM , D11-JMM-4 ) ;
8633: LD_EXP 14
8637: PPUSH
8638: LD_STRING D11-JMM-4
8640: PPUSH
8641: CALL_OW 88
// if ar_base_spotted then
8645: LD_EXP 8
8649: IFFALSE 8665
// Say ( Burlak , D12-Bur-1 ) else
8651: LD_EXP 45
8655: PPUSH
8656: LD_STRING D12-Bur-1
8658: PPUSH
8659: CALL_OW 88
8663: GO 8704
// begin RevealFogArea ( 7 , area_base_arabian ) ;
8665: LD_INT 7
8667: PPUSH
8668: LD_INT 3
8670: PPUSH
8671: CALL_OW 332
// CenterNowOnXY ( 127 , 45 ) ;
8675: LD_INT 127
8677: PPUSH
8678: LD_INT 45
8680: PPUSH
8681: CALL_OW 86
// Say ( Burlak , D12-Bur-1a ) ;
8685: LD_EXP 45
8689: PPUSH
8690: LD_STRING D12-Bur-1a
8692: PPUSH
8693: CALL_OW 88
// dwait ( 0 0$2 ) ;
8697: LD_INT 70
8699: PPUSH
8700: CALL_OW 68
// end ; Say ( Burlak , D12-Bur-1b ) ;
8704: LD_EXP 45
8708: PPUSH
8709: LD_STRING D12-Bur-1b
8711: PPUSH
8712: CALL_OW 88
// Say ( JMM , D12-JMM-1 ) ;
8716: LD_EXP 14
8720: PPUSH
8721: LD_STRING D12-JMM-1
8723: PPUSH
8724: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
8728: LD_EXP 45
8732: PPUSH
8733: LD_STRING D12-Bur-2
8735: PPUSH
8736: CALL_OW 88
// if Roth then
8740: LD_EXP 15
8744: IFFALSE 8760
// Say ( Roth , D12-Roth-2 ) else
8746: LD_EXP 15
8750: PPUSH
8751: LD_STRING D12-Roth-2
8753: PPUSH
8754: CALL_OW 88
8758: GO 8772
// Say ( SciRu , D12-RSci1-2 ) ;
8760: CALL 11239 0 0
8764: PPUSH
8765: LD_STRING D12-RSci1-2
8767: PPUSH
8768: CALL_OW 88
// Say ( JMM , D12-JMM-2 ) ;
8772: LD_EXP 14
8776: PPUSH
8777: LD_STRING D12-JMM-2
8779: PPUSH
8780: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
8784: LD_EXP 45
8788: PPUSH
8789: LD_STRING D12-Bur-3
8791: PPUSH
8792: CALL_OW 88
// Say ( JMM , D12-JMM-3 ) ;
8796: LD_EXP 14
8800: PPUSH
8801: LD_STRING D12-JMM-3
8803: PPUSH
8804: CALL_OW 88
// Say ( Burlak , D12-Bur-4 ) ;
8808: LD_EXP 45
8812: PPUSH
8813: LD_STRING D12-Bur-4
8815: PPUSH
8816: CALL_OW 88
// case Query ( QBase ) of 1 :
8820: LD_STRING QBase
8822: PPUSH
8823: CALL_OW 97
8827: PUSH
8828: LD_INT 1
8830: DOUBLE
8831: EQUAL
8832: IFTRUE 8836
8834: GO 8954
8836: POP
// begin Say ( JMM , D13a-JMM-1 ) ;
8837: LD_EXP 14
8841: PPUSH
8842: LD_STRING D13a-JMM-1
8844: PPUSH
8845: CALL_OW 88
// Say ( Burlak , D13a-Bur-1 ) ;
8849: LD_EXP 45
8853: PPUSH
8854: LD_STRING D13a-Bur-1
8856: PPUSH
8857: CALL_OW 88
// if Roth then
8861: LD_EXP 15
8865: IFFALSE 8881
// Say ( Roth , D13a-Roth-1 ) else
8867: LD_EXP 15
8871: PPUSH
8872: LD_STRING D13a-Roth-1
8874: PPUSH
8875: CALL_OW 88
8879: GO 8893
// Say ( SciRu , D13a-RSci1-1 ) ;
8881: CALL 11239 0 0
8885: PPUSH
8886: LD_STRING D13a-RSci1-1
8888: PPUSH
8889: CALL_OW 88
// Say ( JMM , D13a-JMM-2 ) ;
8893: LD_EXP 14
8897: PPUSH
8898: LD_STRING D13a-JMM-2
8900: PPUSH
8901: CALL_OW 88
// case Query ( QBaseAgain ) of 1 :
8905: LD_STRING QBaseAgain
8907: PPUSH
8908: CALL_OW 97
8912: PUSH
8913: LD_INT 1
8915: DOUBLE
8916: EQUAL
8917: IFTRUE 8921
8919: GO 8932
8921: POP
// selected_option := 2 ; 2 :
8922: LD_ADDR_VAR 0 2
8926: PUSH
8927: LD_INT 2
8929: ST_TO_ADDR
8930: GO 8952
8932: LD_INT 2
8934: DOUBLE
8935: EQUAL
8936: IFTRUE 8940
8938: GO 8951
8940: POP
// selected_option := 3 ; end ;
8941: LD_ADDR_VAR 0 2
8945: PUSH
8946: LD_INT 3
8948: ST_TO_ADDR
8949: GO 8952
8951: POP
// end ; 2 :
8952: GO 8993
8954: LD_INT 2
8956: DOUBLE
8957: EQUAL
8958: IFTRUE 8962
8960: GO 8973
8962: POP
// selected_option := 2 ; 3 :
8963: LD_ADDR_VAR 0 2
8967: PUSH
8968: LD_INT 2
8970: ST_TO_ADDR
8971: GO 8993
8973: LD_INT 3
8975: DOUBLE
8976: EQUAL
8977: IFTRUE 8981
8979: GO 8992
8981: POP
// selected_option := 3 ; end ;
8982: LD_ADDR_VAR 0 2
8986: PUSH
8987: LD_INT 3
8989: ST_TO_ADDR
8990: GO 8993
8992: POP
// if selected_option = 2 then
8993: LD_VAR 0 2
8997: PUSH
8998: LD_INT 2
9000: EQUAL
9001: IFFALSE 9095
// begin Say ( JMM , D13b-JMM-1 ) ;
9003: LD_EXP 14
9007: PPUSH
9008: LD_STRING D13b-JMM-1
9010: PPUSH
9011: CALL_OW 88
// Say ( Burlak , D13b-Bur-1 ) ;
9015: LD_EXP 45
9019: PPUSH
9020: LD_STRING D13b-Bur-1
9022: PPUSH
9023: CALL_OW 88
// Say ( JMM , D13b-JMM-2 ) ;
9027: LD_EXP 14
9031: PPUSH
9032: LD_STRING D13b-JMM-2
9034: PPUSH
9035: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-2 ) ;
9039: LD_EXP 54
9043: PPUSH
9044: LD_STRING D13b-Abd-2
9046: PPUSH
9047: CALL_OW 94
// Say ( JMM , D13b-JMM-3 ) ;
9051: LD_EXP 14
9055: PPUSH
9056: LD_STRING D13b-JMM-3
9058: PPUSH
9059: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-3 ) ;
9063: LD_EXP 54
9067: PPUSH
9068: LD_STRING D13b-Abd-3
9070: PPUSH
9071: CALL_OW 94
// Say ( JMM , D13b-JMM-4 ) ;
9075: LD_EXP 14
9079: PPUSH
9080: LD_STRING D13b-JMM-4
9082: PPUSH
9083: CALL_OW 88
// ar_active_attack := true ;
9087: LD_ADDR_EXP 9
9091: PUSH
9092: LD_INT 1
9094: ST_TO_ADDR
// end ; if selected_option = 3 then
9095: LD_VAR 0 2
9099: PUSH
9100: LD_INT 3
9102: EQUAL
9103: IFFALSE 9129
// begin Say ( JMM , D13c-JMM-1 ) ;
9105: LD_EXP 14
9109: PPUSH
9110: LD_STRING D13c-JMM-1
9112: PPUSH
9113: CALL_OW 88
// Say ( Burlak , D13c-Bur-1 ) ;
9117: LD_EXP 45
9121: PPUSH
9122: LD_STRING D13c-Bur-1
9124: PPUSH
9125: CALL_OW 88
// end ; DialogueOff ;
9129: CALL_OW 7
// if not ar_active_attack then
9133: LD_EXP 9
9137: NOT
9138: IFFALSE 9155
// begin wait ( 6 6$00 ) ;
9140: LD_INT 12600
9142: PPUSH
9143: CALL_OW 67
// ar_active_attack := true ;
9147: LD_ADDR_EXP 9
9151: PUSH
9152: LD_INT 1
9154: ST_TO_ADDR
// end ; end ;
9155: PPOPN 2
9157: END
// every 0 0$1 trigger IsPlaced ( Burlak ) and GetSide ( Burlak ) = 7 do
9158: LD_EXP 45
9162: PPUSH
9163: CALL_OW 305
9167: PUSH
9168: LD_EXP 45
9172: PPUSH
9173: CALL_OW 255
9177: PUSH
9178: LD_INT 7
9180: EQUAL
9181: AND
9182: IFFALSE 9343
9184: GO 9186
9186: DISABLE
// begin wait ( 4 4$40 ) ;
9187: LD_INT 9800
9189: PPUSH
9190: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9194: LD_INT 35
9196: PPUSH
9197: CALL_OW 67
// until not ru_attackers ;
9201: LD_EXP 51
9205: NOT
9206: IFFALSE 9194
// PrepareGnyevko ;
9208: CALL 1986 0 0
// ComMoveXY ( Gnyevko , 124 , 118 ) ;
9212: LD_EXP 47
9216: PPUSH
9217: LD_INT 124
9219: PPUSH
9220: LD_INT 118
9222: PPUSH
9223: CALL_OW 111
// AddComHold ( Gnyevko ) ;
9227: LD_EXP 47
9231: PPUSH
9232: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
9236: LD_INT 35
9238: PPUSH
9239: CALL_OW 67
// until IsAt ( Gnyevko , 124 , 118 ) ;
9243: LD_EXP 47
9247: PPUSH
9248: LD_INT 124
9250: PPUSH
9251: LD_INT 118
9253: PPUSH
9254: CALL_OW 307
9258: IFFALSE 9236
// SayRadio ( Gnyevko , DBelkov-Gny-1 ) ;
9260: LD_EXP 47
9264: PPUSH
9265: LD_STRING DBelkov-Gny-1
9267: PPUSH
9268: CALL_OW 94
// Say ( Burlak , DBelkov-Bur-1a ) ;
9272: LD_EXP 45
9276: PPUSH
9277: LD_STRING DBelkov-Bur-1a
9279: PPUSH
9280: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
9284: LD_INT 35
9286: PPUSH
9287: CALL_OW 67
// until GetDistUnits ( Gnyevko , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Gnyevko ) ) < 8 ;
9291: LD_EXP 47
9295: PPUSH
9296: LD_INT 22
9298: PUSH
9299: LD_INT 7
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PPUSH
9306: CALL_OW 69
9310: PPUSH
9311: LD_EXP 47
9315: PPUSH
9316: CALL_OW 74
9320: PPUSH
9321: CALL_OW 296
9325: PUSH
9326: LD_INT 8
9328: LESS
9329: IFFALSE 9284
// SetSide ( Gnyevko , 7 ) ;
9331: LD_EXP 47
9335: PPUSH
9336: LD_INT 7
9338: PPUSH
9339: CALL_OW 235
// end ;
9343: END
// every 10 10$00 + 1 1$30 trigger GetSide ( Burlak ) = 7 do
9344: LD_EXP 45
9348: PPUSH
9349: CALL_OW 255
9353: PUSH
9354: LD_INT 7
9356: EQUAL
9357: IFFALSE 9367
9359: GO 9361
9361: DISABLE
// begin enable ;
9362: ENABLE
// PrepareAmericanAttack ;
9363: CALL 5479 0 0
// end ;
9367: END
// every 0 0$2 trigger FilterAllUnits ( [ f_side , 1 ] ) do var i , tmp ;
9368: LD_INT 22
9370: PUSH
9371: LD_INT 1
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: PPUSH
9378: CALL_OW 69
9382: IFFALSE 9566
9384: GO 9386
9386: DISABLE
9387: LD_INT 0
9389: PPUSH
9390: PPUSH
// begin while true do
9391: LD_INT 1
9393: IFFALSE 9450
// begin wait ( 0 0$1 ) ;
9395: LD_INT 35
9397: PPUSH
9398: CALL_OW 67
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , JMM ) ;
9402: LD_ADDR_VAR 0 2
9406: PUSH
9407: LD_INT 22
9409: PUSH
9410: LD_INT 1
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PPUSH
9417: CALL_OW 69
9421: PPUSH
9422: LD_EXP 14
9426: PPUSH
9427: CALL_OW 74
9431: ST_TO_ADDR
// if See ( 7 , tmp ) then
9432: LD_INT 7
9434: PPUSH
9435: LD_VAR 0 2
9439: PPUSH
9440: CALL_OW 292
9444: IFFALSE 9448
// break ;
9446: GO 9450
// end ;
9448: GO 9391
// DialogueOn ;
9450: CALL_OW 6
// CenterNowOnUnits ( tmp ) ;
9454: LD_VAR 0 2
9458: PPUSH
9459: CALL_OW 87
// PlaceSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 , 8 ) ;
9463: LD_VAR 0 2
9467: PPUSH
9468: CALL_OW 250
9472: PPUSH
9473: LD_VAR 0 2
9477: PPUSH
9478: CALL_OW 251
9482: PPUSH
9483: LD_INT 7
9485: PPUSH
9486: LD_INT 8
9488: PPUSH
9489: CALL_OW 330
// if Denis then
9493: LD_EXP 20
9497: IFFALSE 9511
// Say ( Denis , DAmerAttack-Pet-1 ) ;
9499: LD_EXP 20
9503: PPUSH
9504: LD_STRING DAmerAttack-Pet-1
9506: PPUSH
9507: CALL_OW 88
// Say ( JMM , DAmerAttack-JMM-1 ) ;
9511: LD_EXP 14
9515: PPUSH
9516: LD_STRING DAmerAttack-JMM-1
9518: PPUSH
9519: CALL_OW 88
// Say ( Burlak , DStop-Bur-1 ) ;
9523: LD_EXP 45
9527: PPUSH
9528: LD_STRING DStop-Bur-1
9530: PPUSH
9531: CALL_OW 88
// RemoveSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 ) ;
9535: LD_VAR 0 2
9539: PPUSH
9540: CALL_OW 250
9544: PPUSH
9545: LD_VAR 0 2
9549: PPUSH
9550: CALL_OW 251
9554: PPUSH
9555: LD_INT 7
9557: PPUSH
9558: CALL_OW 331
// DialogueOff ;
9562: CALL_OW 7
// end ;
9566: PPOPN 2
9568: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and IsDead ( ru_depot ) do
9569: LD_INT 22
9571: PUSH
9572: LD_INT 3
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: LD_INT 21
9581: PUSH
9582: LD_INT 1
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 69
9597: PUSH
9598: LD_INT 0
9600: EQUAL
9601: PUSH
9602: LD_INT 47
9604: PPUSH
9605: CALL_OW 301
9609: AND
9610: IFFALSE 9652
9612: GO 9614
9614: DISABLE
// begin ChangeMissionObjectives ( M5a ) ;
9615: LD_STRING M5a
9617: PPUSH
9618: CALL_OW 337
// Say ( JMM , D8-JMM-1 ) ;
9622: LD_EXP 14
9626: PPUSH
9627: LD_STRING D8-JMM-1
9629: PPUSH
9630: CALL_OW 88
// if Gossudarov then
9634: LD_EXP 31
9638: IFFALSE 9652
// Say ( Gossudarov , D8-Gos-1 ) ;
9640: LD_EXP 31
9644: PPUSH
9645: LD_STRING D8-Gos-1
9647: PPUSH
9648: CALL_OW 88
// end ;
9652: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 do
9653: LD_INT 22
9655: PUSH
9656: LD_INT 2
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 21
9665: PUSH
9666: LD_INT 1
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 69
9681: PUSH
9682: LD_INT 0
9684: EQUAL
9685: IFFALSE 9735
9687: GO 9689
9689: DISABLE
// begin ChangeMissionObjectives ( M4c ) ;
9690: LD_STRING M4c
9692: PPUSH
9693: CALL_OW 337
// if Roth then
9697: LD_EXP 15
9701: IFFALSE 9717
// Say ( Roth , DStop-Roth-1 ) else
9703: LD_EXP 15
9707: PPUSH
9708: LD_STRING DStop-Roth-1
9710: PPUSH
9711: CALL_OW 88
9715: GO 9735
// if Gossudarov then
9717: LD_EXP 31
9721: IFFALSE 9735
// Say ( Gossudarov , D8-Gos-1a ) ;
9723: LD_EXP 31
9727: PPUSH
9728: LD_STRING D8-Gos-1a
9730: PPUSH
9731: CALL_OW 88
// end ;
9735: END
// every 0 0$01 trigger GetTechNation ( 7 , 1 , state_enabled ) = 0 and GetTechNation ( 7 , 3 , state_enabled ) = 0 do
9736: LD_INT 7
9738: PPUSH
9739: LD_INT 1
9741: PPUSH
9742: LD_INT 1
9744: PPUSH
9745: CALL 12743 0 3
9749: PUSH
9750: LD_INT 0
9752: EQUAL
9753: PUSH
9754: LD_INT 7
9756: PPUSH
9757: LD_INT 3
9759: PPUSH
9760: LD_INT 1
9762: PPUSH
9763: CALL 12743 0 3
9767: PUSH
9768: LD_INT 0
9770: EQUAL
9771: AND
9772: IFFALSE 9784
9774: GO 9776
9776: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
9777: LD_STRING M1a
9779: PPUSH
9780: CALL_OW 337
// end ;
9784: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ f_side , 3 ] ) = 0 and FilterAllUnits ( [ f_side , 1 ] ) = 0 and GetTechNation ( 7 , 1 , state_enabled ) = 0 and GetTechNation ( 7 , 3 , state_enabled ) = 0 do var i , tmp , tmp2 ;
9785: LD_INT 22
9787: PUSH
9788: LD_INT 2
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 21
9797: PUSH
9798: LD_INT 1
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PPUSH
9809: CALL_OW 69
9813: PUSH
9814: LD_INT 0
9816: EQUAL
9817: PUSH
9818: LD_INT 22
9820: PUSH
9821: LD_INT 3
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: PPUSH
9828: CALL_OW 69
9832: PUSH
9833: LD_INT 0
9835: EQUAL
9836: AND
9837: PUSH
9838: LD_INT 22
9840: PUSH
9841: LD_INT 1
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PPUSH
9848: CALL_OW 69
9852: PUSH
9853: LD_INT 0
9855: EQUAL
9856: AND
9857: PUSH
9858: LD_INT 7
9860: PPUSH
9861: LD_INT 1
9863: PPUSH
9864: LD_INT 1
9866: PPUSH
9867: CALL 12743 0 3
9871: PUSH
9872: LD_INT 0
9874: EQUAL
9875: AND
9876: PUSH
9877: LD_INT 7
9879: PPUSH
9880: LD_INT 3
9882: PPUSH
9883: LD_INT 1
9885: PPUSH
9886: CALL 12743 0 3
9890: PUSH
9891: LD_INT 0
9893: EQUAL
9894: AND
9895: IFFALSE 11236
9897: GO 9899
9899: DISABLE
9900: LD_INT 0
9902: PPUSH
9903: PPUSH
9904: PPUSH
// begin wait ( 0 0$3 ) ;
9905: LD_INT 105
9907: PPUSH
9908: CALL_OW 67
// if not IsDead ( Masha ) then
9912: LD_EXP 48
9916: PPUSH
9917: CALL_OW 301
9921: NOT
9922: IFFALSE 9936
// AddMedal ( Masha , 1 ) else
9924: LD_STRING Masha
9926: PPUSH
9927: LD_INT 1
9929: PPUSH
9930: CALL_OW 101
9934: GO 9947
// AddMedal ( Masha , - 1 ) ;
9936: LD_STRING Masha
9938: PPUSH
9939: LD_INT 1
9941: NEG
9942: PPUSH
9943: CALL_OW 101
// if abdul_escaped then
9947: LD_EXP 12
9951: IFFALSE 9966
// AddMedal ( Abdul , - 1 ) else
9953: LD_STRING Abdul
9955: PPUSH
9956: LD_INT 1
9958: NEG
9959: PPUSH
9960: CALL_OW 101
9964: GO 9976
// AddMedal ( Abdul , 1 ) ;
9966: LD_STRING Abdul
9968: PPUSH
9969: LD_INT 1
9971: PPUSH
9972: CALL_OW 101
// if loss_counter = 0 then
9976: LD_EXP 13
9980: PUSH
9981: LD_INT 0
9983: EQUAL
9984: IFFALSE 9998
// AddMedal ( People , 2 ) else
9986: LD_STRING People
9988: PPUSH
9989: LD_INT 2
9991: PPUSH
9992: CALL_OW 101
9996: GO 10048
// if loss_counter <= [ 3 , 2 , 2 ] [ Difficulty ] then
9998: LD_EXP 13
10002: PUSH
10003: LD_INT 3
10005: PUSH
10006: LD_INT 2
10008: PUSH
10009: LD_INT 2
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: LIST
10016: PUSH
10017: LD_OWVAR 67
10021: ARRAY
10022: LESSEQUAL
10023: IFFALSE 10037
// AddMedal ( People , 1 ) else
10025: LD_STRING People
10027: PPUSH
10028: LD_INT 1
10030: PPUSH
10031: CALL_OW 101
10035: GO 10048
// AddMedal ( People , - 1 ) ;
10037: LD_STRING People
10039: PPUSH
10040: LD_INT 1
10042: NEG
10043: PPUSH
10044: CALL_OW 101
// GiveMedals ( MAIN ) ;
10048: LD_STRING MAIN
10050: PPUSH
10051: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10055: LD_ADDR_VAR 0 2
10059: PUSH
10060: LD_INT 22
10062: PUSH
10063: LD_INT 7
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PUSH
10070: LD_INT 2
10072: PUSH
10073: LD_INT 25
10075: PUSH
10076: LD_INT 1
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: LD_INT 25
10085: PUSH
10086: LD_INT 2
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PUSH
10093: LD_INT 25
10095: PUSH
10096: LD_INT 3
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: LD_INT 25
10105: PUSH
10106: LD_INT 4
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PUSH
10113: LD_INT 25
10115: PUSH
10116: LD_INT 5
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 25
10125: PUSH
10126: LD_INT 8
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: LD_INT 25
10135: PUSH
10136: LD_INT 9
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PPUSH
10157: CALL_OW 69
10161: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10162: LD_VAR 0 2
10166: PPUSH
10167: CALL_OW 43
// tmp2 := [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Burlak , Belkov , Gnyevko ] ;
10171: LD_ADDR_VAR 0 3
10175: PUSH
10176: LD_EXP 14
10180: PUSH
10181: LD_EXP 15
10185: PUSH
10186: LD_EXP 16
10190: PUSH
10191: LD_EXP 17
10195: PUSH
10196: LD_EXP 18
10200: PUSH
10201: LD_EXP 19
10205: PUSH
10206: LD_EXP 20
10210: PUSH
10211: LD_EXP 21
10215: PUSH
10216: LD_EXP 22
10220: PUSH
10221: LD_EXP 23
10225: PUSH
10226: LD_EXP 24
10230: PUSH
10231: LD_EXP 25
10235: PUSH
10236: LD_EXP 26
10240: PUSH
10241: LD_EXP 27
10245: PUSH
10246: LD_EXP 28
10250: PUSH
10251: LD_EXP 29
10255: PUSH
10256: LD_EXP 30
10260: PUSH
10261: LD_EXP 31
10265: PUSH
10266: LD_EXP 32
10270: PUSH
10271: LD_EXP 33
10275: PUSH
10276: LD_EXP 35
10280: PUSH
10281: LD_EXP 36
10285: PUSH
10286: LD_EXP 37
10290: PUSH
10291: LD_EXP 38
10295: PUSH
10296: LD_EXP 39
10300: PUSH
10301: LD_EXP 40
10305: PUSH
10306: LD_EXP 41
10310: PUSH
10311: LD_EXP 42
10315: PUSH
10316: LD_EXP 43
10320: PUSH
10321: LD_EXP 44
10325: PUSH
10326: LD_EXP 45
10330: PUSH
10331: LD_EXP 46
10335: PUSH
10336: LD_EXP 47
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: ST_TO_ADDR
// if tmp diff tmp2 then
10376: LD_VAR 0 2
10380: PUSH
10381: LD_VAR 0 3
10385: DIFF
10386: IFFALSE 10406
// SaveCharacters ( tmp diff tmp2 , 13a_others ) ;
10388: LD_VAR 0 2
10392: PUSH
10393: LD_VAR 0 3
10397: DIFF
10398: PPUSH
10399: LD_STRING 13a_others
10401: PPUSH
10402: CALL_OW 38
// SaveCharacters ( JMM , 13a_JMM ) ;
10406: LD_EXP 14
10410: PPUSH
10411: LD_STRING 13a_JMM
10413: PPUSH
10414: CALL_OW 38
// if Titov then
10418: LD_EXP 33
10422: IFFALSE 10436
// SaveCharacters ( Titov , 13a_Titov ) ;
10424: LD_EXP 33
10428: PPUSH
10429: LD_STRING 13a_Titov
10431: PPUSH
10432: CALL_OW 38
// if Dolgov then
10436: LD_EXP 35
10440: IFFALSE 10454
// SaveCharacters ( Dolgov , 13a_Dolgov ) ;
10442: LD_EXP 35
10446: PPUSH
10447: LD_STRING 13a_Dolgov
10449: PPUSH
10450: CALL_OW 38
// if Petrosyan then
10454: LD_EXP 36
10458: IFFALSE 10472
// SaveCharacters ( Petrosyan , 13a_Petrosyan ) ;
10460: LD_EXP 36
10464: PPUSH
10465: LD_STRING 13a_Petrosyan
10467: PPUSH
10468: CALL_OW 38
// if Scholtze then
10472: LD_EXP 37
10476: IFFALSE 10490
// SaveCharacters ( Scholtze , 13a_Scholtze ) ;
10478: LD_EXP 37
10482: PPUSH
10483: LD_STRING 13a_Scholtze
10485: PPUSH
10486: CALL_OW 38
// if Oblukov then
10490: LD_EXP 38
10494: IFFALSE 10508
// SaveCharacters ( Oblukov , 13a_Oblukov ) ;
10496: LD_EXP 38
10500: PPUSH
10501: LD_STRING 13a_Oblukov
10503: PPUSH
10504: CALL_OW 38
// if Kapitsova then
10508: LD_EXP 39
10512: IFFALSE 10526
// SaveCharacters ( Kapitsova , 13a_Kapitsova ) ;
10514: LD_EXP 39
10518: PPUSH
10519: LD_STRING 13a_Kapitsova
10521: PPUSH
10522: CALL_OW 38
// if Lipshchin then
10526: LD_EXP 40
10530: IFFALSE 10544
// SaveCharacters ( Lipshchin , 13a_Lipshchin ) ;
10532: LD_EXP 40
10536: PPUSH
10537: LD_STRING 13a_Lipshchin
10539: PPUSH
10540: CALL_OW 38
// if Petrovova then
10544: LD_EXP 41
10548: IFFALSE 10562
// SaveCharacters ( Petrovova , 13a_Petrovova ) ;
10550: LD_EXP 41
10554: PPUSH
10555: LD_STRING 13a_Petrovova
10557: PPUSH
10558: CALL_OW 38
// if Kovalyuk then
10562: LD_EXP 42
10566: IFFALSE 10580
// SaveCharacters ( Kovalyuk , 13a_Kovalyuk ) ;
10568: LD_EXP 42
10572: PPUSH
10573: LD_STRING 13a_Kovalyuk
10575: PPUSH
10576: CALL_OW 38
// if Kuzmov then
10580: LD_EXP 43
10584: IFFALSE 10598
// SaveCharacters ( Kuzmov , 13a_Kuzmov ) ;
10586: LD_EXP 43
10590: PPUSH
10591: LD_STRING 13a_Kuzmov
10593: PPUSH
10594: CALL_OW 38
// if Karamazov then
10598: LD_EXP 44
10602: IFFALSE 10616
// SaveCharacters ( Karamazov , 13a_Karamazov ) ;
10604: LD_EXP 44
10608: PPUSH
10609: LD_STRING 13a_Karamazov
10611: PPUSH
10612: CALL_OW 38
// if Burlak then
10616: LD_EXP 45
10620: IFFALSE 10634
// SaveCharacters ( Burlak , 13a_Burlak ) ;
10622: LD_EXP 45
10626: PPUSH
10627: LD_STRING 13a_Burlak
10629: PPUSH
10630: CALL_OW 38
// if Belkov then
10634: LD_EXP 46
10638: IFFALSE 10652
// SaveCharacters ( Belkov , 13a_Belkov ) ;
10640: LD_EXP 46
10644: PPUSH
10645: LD_STRING 13a_Belkov
10647: PPUSH
10648: CALL_OW 38
// if Gnyevko then
10652: LD_EXP 47
10656: IFFALSE 10670
// SaveCharacters ( Gnyevko , 13a_Gnyevko ) ;
10658: LD_EXP 47
10662: PPUSH
10663: LD_STRING 13a_Gnyevko
10665: PPUSH
10666: CALL_OW 38
// if Lisa then
10670: LD_EXP 16
10674: IFFALSE 10688
// SaveCharacters ( Lisa , 13a_Lisa ) ;
10676: LD_EXP 16
10680: PPUSH
10681: LD_STRING 13a_Lisa
10683: PPUSH
10684: CALL_OW 38
// if Donaldson then
10688: LD_EXP 17
10692: IFFALSE 10706
// SaveCharacters ( Donaldson , 13a_Donaldson ) ;
10694: LD_EXP 17
10698: PPUSH
10699: LD_STRING 13a_Donaldson
10701: PPUSH
10702: CALL_OW 38
// if Bobby then
10706: LD_EXP 18
10710: IFFALSE 10724
// SaveCharacters ( Bobby , 13a_Bobby ) ;
10712: LD_EXP 18
10716: PPUSH
10717: LD_STRING 13a_Bobby
10719: PPUSH
10720: CALL_OW 38
// if Cyrus then
10724: LD_EXP 19
10728: IFFALSE 10742
// SaveCharacters ( Cyrus , 13a_Cyrus ) ;
10730: LD_EXP 19
10734: PPUSH
10735: LD_STRING 13a_Cyrus
10737: PPUSH
10738: CALL_OW 38
// if Denis then
10742: LD_EXP 20
10746: IFFALSE 10760
// SaveCharacters ( Denis , 13a_Denis ) ;
10748: LD_EXP 20
10752: PPUSH
10753: LD_STRING 13a_Denis
10755: PPUSH
10756: CALL_OW 38
// if Brown then
10760: LD_EXP 21
10764: IFFALSE 10778
// SaveCharacters ( Brown , 13a_Brown ) ;
10766: LD_EXP 21
10770: PPUSH
10771: LD_STRING 13a_Brown
10773: PPUSH
10774: CALL_OW 38
// if Gladstone then
10778: LD_EXP 22
10782: IFFALSE 10796
// SaveCharacters ( Gladstone , 13a_Gladstone ) ;
10784: LD_EXP 22
10788: PPUSH
10789: LD_STRING 13a_Gladstone
10791: PPUSH
10792: CALL_OW 38
// if Houten then
10796: LD_EXP 23
10800: IFFALSE 10814
// SaveCharacters ( Houten , 13a_Houten ) ;
10802: LD_EXP 23
10806: PPUSH
10807: LD_STRING 13a_Houten
10809: PPUSH
10810: CALL_OW 38
// if Cornel then
10814: LD_EXP 24
10818: IFFALSE 10832
// SaveCharacters ( Cornel , 13a_Cornel ) ;
10820: LD_EXP 24
10824: PPUSH
10825: LD_STRING 13a_Cornel
10827: PPUSH
10828: CALL_OW 38
// if Gary then
10832: LD_EXP 25
10836: IFFALSE 10850
// SaveCharacters ( Gary , 13a_Gary ) ;
10838: LD_EXP 25
10842: PPUSH
10843: LD_STRING 13a_Gary
10845: PPUSH
10846: CALL_OW 38
// if Frank then
10850: LD_EXP 26
10854: IFFALSE 10868
// SaveCharacters ( Frank , 13a_Frank ) ;
10856: LD_EXP 26
10860: PPUSH
10861: LD_STRING 13a_Frank
10863: PPUSH
10864: CALL_OW 38
// if Kikuchi then
10868: LD_EXP 27
10872: IFFALSE 10886
// SaveCharacters ( Kikuchi , 13a_Kikuchi ) ;
10874: LD_EXP 27
10878: PPUSH
10879: LD_STRING 13a_Kikuchi
10881: PPUSH
10882: CALL_OW 38
// if Simms then
10886: LD_EXP 28
10890: IFFALSE 10904
// SaveCharacters ( Simms , 13a_Simms ) ;
10892: LD_EXP 28
10896: PPUSH
10897: LD_STRING 13a_Simms
10899: PPUSH
10900: CALL_OW 38
// if Joan then
10904: LD_EXP 29
10908: IFFALSE 10922
// SaveCharacters ( Joan , 13a_Joan ) ;
10910: LD_EXP 29
10914: PPUSH
10915: LD_STRING 13a_Joan
10917: PPUSH
10918: CALL_OW 38
// if DeltaDoctor then
10922: LD_EXP 30
10926: IFFALSE 10940
// SaveCharacters ( DeltaDoctor , 13a_DeltaDoctor ) ;
10928: LD_EXP 30
10932: PPUSH
10933: LD_STRING 13a_DeltaDoctor
10935: PPUSH
10936: CALL_OW 38
// if Gossudarov then
10940: LD_EXP 31
10944: IFFALSE 10958
// SaveCharacters ( Gossudarov , 13a_Gossudarov ) ;
10946: LD_EXP 31
10950: PPUSH
10951: LD_STRING 13a_Gossudarov
10953: PPUSH
10954: CALL_OW 38
// if Kirilenkova then
10958: LD_EXP 32
10962: IFFALSE 10976
// SaveCharacters ( Kirilenkova , 13a_Kirilenkova ) ;
10964: LD_EXP 32
10968: PPUSH
10969: LD_STRING 13a_Kirilenkova
10971: PPUSH
10972: CALL_OW 38
// if Masha then
10976: LD_EXP 48
10980: IFFALSE 11035
// SaveVariable ( [ GetChassis ( Masha ) , GetEngine ( Masha ) , GetControl ( Masha ) , GetWeapon ( Masha ) ] , 13a_Masha ) ;
10982: LD_EXP 48
10986: PPUSH
10987: CALL_OW 265
10991: PUSH
10992: LD_EXP 48
10996: PPUSH
10997: CALL_OW 262
11001: PUSH
11002: LD_EXP 48
11006: PPUSH
11007: CALL_OW 263
11011: PUSH
11012: LD_EXP 48
11016: PPUSH
11017: CALL_OW 264
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: PPUSH
11028: LD_STRING 13a_Masha
11030: PPUSH
11031: CALL_OW 39
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
11035: LD_ADDR_VAR 0 2
11039: PUSH
11040: LD_INT 21
11042: PUSH
11043: LD_INT 3
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PPUSH
11050: CALL_OW 69
11054: ST_TO_ADDR
// tmp2 := [ ] ;
11055: LD_ADDR_VAR 0 3
11059: PUSH
11060: EMPTY
11061: ST_TO_ADDR
// if tmp then
11062: LD_VAR 0 2
11066: IFFALSE 11214
// for i in tmp do
11068: LD_ADDR_VAR 0 1
11072: PUSH
11073: LD_VAR 0 2
11077: PUSH
11078: FOR_IN
11079: IFFALSE 11212
// if IsOk ( i ) then
11081: LD_VAR 0 1
11085: PPUSH
11086: CALL_OW 302
11090: IFFALSE 11210
// tmp2 := tmp2 ^ [ GetSide ( i ) , GetNation ( i ) , GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ;
11092: LD_ADDR_VAR 0 3
11096: PUSH
11097: LD_VAR 0 3
11101: PUSH
11102: LD_VAR 0 1
11106: PPUSH
11107: CALL_OW 255
11111: PUSH
11112: LD_VAR 0 1
11116: PPUSH
11117: CALL_OW 248
11121: PUSH
11122: LD_VAR 0 1
11126: PPUSH
11127: CALL_OW 266
11131: PUSH
11132: LD_VAR 0 1
11136: PPUSH
11137: CALL_OW 250
11141: PUSH
11142: LD_VAR 0 1
11146: PPUSH
11147: CALL_OW 251
11151: PUSH
11152: LD_VAR 0 1
11156: PPUSH
11157: CALL_OW 254
11161: PUSH
11162: LD_VAR 0 1
11166: PPUSH
11167: CALL_OW 267
11171: PUSH
11172: LD_VAR 0 1
11176: PPUSH
11177: LD_INT 1
11179: PPUSH
11180: CALL_OW 268
11184: PUSH
11185: LD_VAR 0 1
11189: PPUSH
11190: LD_INT 2
11192: PPUSH
11193: CALL_OW 268
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: ADD
11209: ST_TO_ADDR
11210: GO 11078
11212: POP
11213: POP
// if tmp2 then
11214: LD_VAR 0 3
11218: IFFALSE 11232
// SaveVariable ( tmp2 , 13a_buildings ) ;
11220: LD_VAR 0 3
11224: PPUSH
11225: LD_STRING 13a_buildings
11227: PPUSH
11228: CALL_OW 39
// YouWin ;
11232: CALL_OW 103
// end ;
11236: PPOPN 3
11238: END
// export function SciRu ; var tmp , t ; begin
11239: LD_INT 0
11241: PPUSH
11242: PPUSH
11243: PPUSH
// t := [ Gossudarov , Burlak , Titov , Belkov , Gnyevko ] ;
11244: LD_ADDR_VAR 0 3
11248: PUSH
11249: LD_EXP 31
11253: PUSH
11254: LD_EXP 45
11258: PUSH
11259: LD_EXP 33
11263: PUSH
11264: LD_EXP 46
11268: PUSH
11269: LD_EXP 47
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff t ;
11281: LD_ADDR_VAR 0 2
11285: PUSH
11286: LD_INT 22
11288: PUSH
11289: LD_INT 7
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 23
11298: PUSH
11299: LD_INT 3
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 25
11308: PUSH
11309: LD_INT 4
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PUSH
11316: LD_INT 26
11318: PUSH
11319: LD_INT 1
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: PPUSH
11332: CALL_OW 69
11336: PUSH
11337: LD_VAR 0 3
11341: DIFF
11342: ST_TO_ADDR
// if tmp then
11343: LD_VAR 0 2
11347: IFFALSE 11363
// result := tmp [ 1 ] ;
11349: LD_ADDR_VAR 0 1
11353: PUSH
11354: LD_VAR 0 2
11358: PUSH
11359: LD_INT 1
11361: ARRAY
11362: ST_TO_ADDR
// end ;
11363: LD_VAR 0 1
11367: RET
// export function SolRu ; var tmp , t ; begin
11368: LD_INT 0
11370: PPUSH
11371: PPUSH
11372: PPUSH
// t := [ Belkov , Burlak , Gossudarov ] ;
11373: LD_ADDR_VAR 0 3
11377: PUSH
11378: LD_EXP 46
11382: PUSH
11383: LD_EXP 45
11387: PUSH
11388: LD_EXP 31
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 1 ] , [ f_sex , sex_male ] ] ) diff t ;
11398: LD_ADDR_VAR 0 2
11402: PUSH
11403: LD_INT 22
11405: PUSH
11406: LD_INT 7
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: LD_INT 23
11415: PUSH
11416: LD_INT 3
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 25
11425: PUSH
11426: LD_INT 1
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 26
11435: PUSH
11436: LD_INT 1
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: PPUSH
11449: CALL_OW 69
11453: PUSH
11454: LD_VAR 0 3
11458: DIFF
11459: ST_TO_ADDR
// if tmp then
11460: LD_VAR 0 2
11464: IFFALSE 11480
// result := tmp [ 1 ] ;
11466: LD_ADDR_VAR 0 1
11470: PUSH
11471: LD_VAR 0 2
11475: PUSH
11476: LD_INT 1
11478: ARRAY
11479: ST_TO_ADDR
// end ; end_of_file
11480: LD_VAR 0 1
11484: RET
// on UnitDestroyed ( un ) do var i , side ;
11485: LD_INT 0
11487: PPUSH
11488: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) then
11489: LD_VAR 0 1
11493: PUSH
11494: LD_INT 22
11496: PUSH
11497: LD_INT 7
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 2
11506: PUSH
11507: LD_INT 25
11509: PUSH
11510: LD_INT 1
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: LD_INT 25
11519: PUSH
11520: LD_INT 2
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: PUSH
11527: LD_INT 25
11529: PUSH
11530: LD_INT 3
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PUSH
11537: LD_INT 25
11539: PUSH
11540: LD_INT 4
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: LD_INT 25
11549: PUSH
11550: LD_INT 5
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PUSH
11557: LD_INT 25
11559: PUSH
11560: LD_INT 8
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: LD_INT 25
11569: PUSH
11570: LD_INT 9
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PPUSH
11591: CALL_OW 69
11595: IN
11596: IFFALSE 11612
// loss_counter := loss_counter + 1 ;
11598: LD_ADDR_EXP 13
11602: PUSH
11603: LD_EXP 13
11607: PUSH
11608: LD_INT 1
11610: PLUS
11611: ST_TO_ADDR
// if un in ru_attackers then
11612: LD_VAR 0 1
11616: PUSH
11617: LD_EXP 51
11621: IN
11622: IFFALSE 11640
// ru_attackers := ru_attackers diff un ;
11624: LD_ADDR_EXP 51
11628: PUSH
11629: LD_EXP 51
11633: PUSH
11634: LD_VAR 0 1
11638: DIFF
11639: ST_TO_ADDR
// if un in ar_attackers then
11640: LD_VAR 0 1
11644: PUSH
11645: LD_EXP 10
11649: IN
11650: IFFALSE 11668
// ar_attackers := ar_attackers diff un ;
11652: LD_ADDR_EXP 10
11656: PUSH
11657: LD_EXP 10
11661: PUSH
11662: LD_VAR 0 1
11666: DIFF
11667: ST_TO_ADDR
// if un = JMM then
11668: LD_VAR 0 1
11672: PUSH
11673: LD_EXP 14
11677: EQUAL
11678: IFFALSE 11689
// begin YouLost ( JMM ) ;
11680: LD_STRING JMM
11682: PPUSH
11683: CALL_OW 104
// exit ;
11687: GO 11778
// end ; if un = Burlak then
11689: LD_VAR 0 1
11693: PUSH
11694: LD_EXP 45
11698: EQUAL
11699: IFFALSE 11710
// begin YouLost ( Burlak ) ;
11701: LD_STRING Burlak
11703: PPUSH
11704: CALL_OW 104
// exit ;
11708: GO 11778
// end ; if un = freedom then
11710: LD_VAR 0 1
11714: PUSH
11715: LD_EXP 3
11719: EQUAL
11720: IFFALSE 11731
// begin YouLost ( Destroyed ) ;
11722: LD_STRING Destroyed
11724: PPUSH
11725: CALL_OW 104
// exit ;
11729: GO 11778
// end ; if un = Masha then
11731: LD_VAR 0 1
11735: PUSH
11736: LD_EXP 48
11740: EQUAL
11741: IFFALSE 11750
// ChangeMissionObjectives ( M4b ) ;
11743: LD_STRING M4b
11745: PPUSH
11746: CALL_OW 337
// if un = Mastodont then
11750: LD_VAR 0 1
11754: PUSH
11755: LD_EXP 55
11759: EQUAL
11760: IFFALSE 11769
// ChangeMissionObjectives ( M4a ) ;
11762: LD_STRING M4a
11764: PPUSH
11765: CALL_OW 337
// MCE_UnitDestroyed ( un ) ;
11769: LD_VAR 0 1
11773: PPUSH
11774: CALL 66040 0 1
// end ;
11778: PPOPN 3
11780: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
11781: LD_VAR 0 1
11785: PPUSH
11786: LD_VAR 0 2
11790: PPUSH
11791: CALL 67907 0 2
// end ;
11795: PPOPN 2
11797: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
11798: LD_VAR 0 1
11802: PPUSH
11803: CALL 66989 0 1
// end ;
11807: PPOPN 1
11809: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_depot ] ] ) then
11810: LD_VAR 0 1
11814: PUSH
11815: LD_INT 22
11817: PUSH
11818: LD_INT 7
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 30
11827: PUSH
11828: LD_INT 0
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PPUSH
11839: CALL_OW 69
11843: IN
11844: IFFALSE 11883
// begin SetBName ( building , freedom ) ;
11846: LD_VAR 0 1
11850: PPUSH
11851: LD_STRING freedom
11853: PPUSH
11854: CALL_OW 500
// SetRestrict ( b_depot , 7 , false ) ;
11858: LD_INT 0
11860: PPUSH
11861: LD_INT 7
11863: PPUSH
11864: LD_INT 0
11866: PPUSH
11867: CALL_OW 324
// freedom := building ;
11871: LD_ADDR_EXP 3
11875: PUSH
11876: LD_VAR 0 1
11880: ST_TO_ADDR
// exit ;
11881: GO 11949
// end ; if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_btype , b_lab ] ] ) then
11883: LD_VAR 0 1
11887: PUSH
11888: LD_INT 22
11890: PUSH
11891: LD_INT 7
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 23
11900: PUSH
11901: LD_INT 3
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 30
11910: PUSH
11911: LD_INT 6
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: LIST
11922: PPUSH
11923: CALL_OW 69
11927: IN
11928: IFFALSE 11940
// begin ru_lab_builded := true ;
11930: LD_ADDR_EXP 5
11934: PUSH
11935: LD_INT 1
11937: ST_TO_ADDR
// exit ;
11938: GO 11949
// end ; MCE_BuildingComplete ( building ) ;
11940: LD_VAR 0 1
11944: PPUSH
11945: CALL 67223 0 1
// end ;
11949: PPOPN 1
11951: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
11952: LD_VAR 0 1
11956: PPUSH
11957: LD_VAR 0 2
11961: PPUSH
11962: CALL 65752 0 2
// end ;
11966: PPOPN 2
11968: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
11969: LD_VAR 0 1
11973: PPUSH
11974: LD_VAR 0 2
11978: PPUSH
11979: LD_VAR 0 3
11983: PPUSH
11984: LD_VAR 0 4
11988: PPUSH
11989: LD_VAR 0 5
11993: PPUSH
11994: CALL 65379 0 5
// end ;
11998: PPOPN 5
12000: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
12001: LD_VAR 0 1
12005: PPUSH
12006: LD_VAR 0 2
12010: PPUSH
12011: CALL 65067 0 2
// end ;
12015: PPOPN 2
12017: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
12018: LD_VAR 0 1
12022: PPUSH
12023: LD_VAR 0 2
12027: PPUSH
12028: LD_VAR 0 3
12032: PPUSH
12033: LD_VAR 0 4
12037: PPUSH
12038: CALL 64912 0 4
// end ;
12042: PPOPN 4
12044: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
12045: LD_VAR 0 1
12049: PPUSH
12050: LD_VAR 0 2
12054: PPUSH
12055: LD_VAR 0 3
12059: PPUSH
12060: CALL 64694 0 3
// end ;
12064: PPOPN 3
12066: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
12067: LD_VAR 0 1
12071: PPUSH
12072: LD_VAR 0 2
12076: PPUSH
12077: CALL 64586 0 2
// end ;
12081: PPOPN 2
12083: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
12084: LD_VAR 0 1
12088: PPUSH
12089: LD_VAR 0 2
12093: PPUSH
12094: CALL 68161 0 2
// end ;
12098: PPOPN 2
12100: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
12101: LD_VAR 0 1
12105: PPUSH
12106: LD_VAR 0 2
12110: PPUSH
12111: LD_VAR 0 3
12115: PPUSH
12116: LD_VAR 0 4
12120: PPUSH
12121: CALL 68370 0 4
// end ;
12125: PPOPN 4
12127: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
12128: LD_VAR 0 1
12132: PPUSH
12133: LD_VAR 0 2
12137: PPUSH
12138: CALL 64402 0 2
// end ; end_of_file
12142: PPOPN 2
12144: END
// every 0 0$30 do var cr , time ;
12145: GO 12147
12147: DISABLE
12148: LD_INT 0
12150: PPUSH
12151: PPUSH
// begin time := 0 0$10 ;
12152: LD_ADDR_VAR 0 2
12156: PUSH
12157: LD_INT 350
12159: ST_TO_ADDR
// while game do
12160: LD_EXP 2
12164: IFFALSE 12263
// begin wait ( time ) ;
12166: LD_VAR 0 2
12170: PPUSH
12171: CALL_OW 67
// if tick > 2 2$00 then
12175: LD_OWVAR 1
12179: PUSH
12180: LD_INT 4200
12182: GREATER
12183: IFFALSE 12216
// time := time + [ 0 0$05 , 0 0$06 , 0 0$07 ] [ Difficulty ] ;
12185: LD_ADDR_VAR 0 2
12189: PUSH
12190: LD_VAR 0 2
12194: PUSH
12195: LD_INT 175
12197: PUSH
12198: LD_INT 210
12200: PUSH
12201: LD_INT 245
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: LIST
12208: PUSH
12209: LD_OWVAR 67
12213: ARRAY
12214: PLUS
12215: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 70 , 49 , 25 , true ) ;
12216: LD_INT 1
12218: PPUSH
12219: LD_INT 5
12221: PPUSH
12222: CALL_OW 12
12226: PPUSH
12227: LD_INT 70
12229: PPUSH
12230: LD_INT 49
12232: PPUSH
12233: LD_INT 25
12235: PPUSH
12236: LD_INT 1
12238: PPUSH
12239: CALL_OW 56
// if time > 5 5$00 then
12243: LD_VAR 0 2
12247: PUSH
12248: LD_INT 10500
12250: GREATER
12251: IFFALSE 12261
// time := 0 0$30 ;
12253: LD_ADDR_VAR 0 2
12257: PUSH
12258: LD_INT 1050
12260: ST_TO_ADDR
// end ;
12261: GO 12160
// end ;
12263: PPOPN 2
12265: END
// every 0 0$30 do var cr , time ;
12266: GO 12268
12268: DISABLE
12269: LD_INT 0
12271: PPUSH
12272: PPUSH
// begin time := 0 0$01 ;
12273: LD_ADDR_VAR 0 2
12277: PUSH
12278: LD_INT 35
12280: ST_TO_ADDR
// while game do
12281: LD_EXP 2
12285: IFFALSE 12374
// begin wait ( time ) ;
12287: LD_VAR 0 2
12291: PPUSH
12292: CALL_OW 67
// time := time + [ 0 0$04 , 0 0$05 , 0 0$06 ] [ Difficulty ] ;
12296: LD_ADDR_VAR 0 2
12300: PUSH
12301: LD_VAR 0 2
12305: PUSH
12306: LD_INT 140
12308: PUSH
12309: LD_INT 175
12311: PUSH
12312: LD_INT 210
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: LIST
12319: PUSH
12320: LD_OWVAR 67
12324: ARRAY
12325: PLUS
12326: ST_TO_ADDR
// CreateCratesXYR ( rand ( 3 , 5 ) , 26 , 9 , 30 , true ) ;
12327: LD_INT 3
12329: PPUSH
12330: LD_INT 5
12332: PPUSH
12333: CALL_OW 12
12337: PPUSH
12338: LD_INT 26
12340: PPUSH
12341: LD_INT 9
12343: PPUSH
12344: LD_INT 30
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: CALL_OW 56
// if time > 3 3$00 then
12354: LD_VAR 0 2
12358: PUSH
12359: LD_INT 6300
12361: GREATER
12362: IFFALSE 12372
// time := 0 0$20 ;
12364: LD_ADDR_VAR 0 2
12368: PUSH
12369: LD_INT 700
12371: ST_TO_ADDR
// end ;
12372: GO 12281
// end ;
12374: PPOPN 2
12376: END
// every 0 0$30 do var cr , time ;
12377: GO 12379
12379: DISABLE
12380: LD_INT 0
12382: PPUSH
12383: PPUSH
// begin time := 0 0$20 ;
12384: LD_ADDR_VAR 0 2
12388: PUSH
12389: LD_INT 700
12391: ST_TO_ADDR
// while game do
12392: LD_EXP 2
12396: IFFALSE 12521
// begin wait ( time ) ;
12398: LD_VAR 0 2
12402: PPUSH
12403: CALL_OW 67
// time := time + [ 0 0$05 , 0 0$06 , 0 0$08 ] [ Difficulty ] ;
12407: LD_ADDR_VAR 0 2
12411: PUSH
12412: LD_VAR 0 2
12416: PUSH
12417: LD_INT 175
12419: PUSH
12420: LD_INT 210
12422: PUSH
12423: LD_INT 280
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: LIST
12430: PUSH
12431: LD_OWVAR 67
12435: ARRAY
12436: PLUS
12437: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 179 , 101 , 20 , true ) ;
12438: LD_INT 1
12440: PPUSH
12441: LD_INT 5
12443: PPUSH
12444: CALL_OW 12
12448: PPUSH
12449: LD_INT 179
12451: PPUSH
12452: LD_INT 101
12454: PPUSH
12455: LD_INT 20
12457: PPUSH
12458: LD_INT 1
12460: PPUSH
12461: CALL_OW 56
// wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
12465: LD_INT 350
12467: PPUSH
12468: LD_INT 525
12470: PPUSH
12471: CALL_OW 12
12475: PPUSH
12476: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area_collect_arabian , true ) ;
12480: LD_INT 1
12482: PPUSH
12483: LD_INT 5
12485: PPUSH
12486: CALL_OW 12
12490: PPUSH
12491: LD_INT 9
12493: PPUSH
12494: LD_INT 1
12496: PPUSH
12497: CALL_OW 55
// if time > 4 4$00 then
12501: LD_VAR 0 2
12505: PUSH
12506: LD_INT 8400
12508: GREATER
12509: IFFALSE 12519
// time := 0 0$30 ;
12511: LD_ADDR_VAR 0 2
12515: PUSH
12516: LD_INT 1050
12518: ST_TO_ADDR
// end ;
12519: GO 12392
// end ;
12521: PPOPN 2
12523: END
// every 0 0$30 do var cr , time ;
12524: GO 12526
12526: DISABLE
12527: LD_INT 0
12529: PPUSH
12530: PPUSH
// begin time := 0 0$10 ;
12531: LD_ADDR_VAR 0 2
12535: PUSH
12536: LD_INT 350
12538: ST_TO_ADDR
// while game do
12539: LD_EXP 2
12543: IFFALSE 12677
// begin wait ( time ) ;
12545: LD_VAR 0 2
12549: PPUSH
12550: CALL_OW 67
// time := time + 0 0$10 ;
12554: LD_ADDR_VAR 0 2
12558: PUSH
12559: LD_VAR 0 2
12563: PUSH
12564: LD_INT 350
12566: PLUS
12567: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , area_crates_russian , true ) ;
12568: LD_INT 1
12570: PPUSH
12571: LD_INT 5
12573: PPUSH
12574: CALL_OW 12
12578: PPUSH
12579: LD_INT 11
12581: PPUSH
12582: LD_INT 1
12584: PPUSH
12585: CALL_OW 55
// cr := rand ( 1 , 3 ) ;
12589: LD_ADDR_VAR 0 1
12593: PUSH
12594: LD_INT 1
12596: PPUSH
12597: LD_INT 3
12599: PPUSH
12600: CALL_OW 12
12604: ST_TO_ADDR
// if cr = 1 then
12605: LD_VAR 0 1
12609: PUSH
12610: LD_INT 1
12612: EQUAL
12613: IFFALSE 12657
// begin wait ( rand ( 0 0$20 , 0 0$45 ) ) ;
12615: LD_INT 700
12617: PPUSH
12618: LD_INT 1575
12620: PPUSH
12621: CALL_OW 12
12625: PPUSH
12626: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 34 , 50 , 7 , true ) ;
12630: LD_INT 1
12632: PPUSH
12633: LD_INT 5
12635: PPUSH
12636: CALL_OW 12
12640: PPUSH
12641: LD_INT 34
12643: PPUSH
12644: LD_INT 50
12646: PPUSH
12647: LD_INT 7
12649: PPUSH
12650: LD_INT 1
12652: PPUSH
12653: CALL_OW 56
// end ; if time > 8 8$00 then
12657: LD_VAR 0 2
12661: PUSH
12662: LD_INT 16800
12664: GREATER
12665: IFFALSE 12675
// time := 0 0$40 ;
12667: LD_ADDR_VAR 0 2
12671: PUSH
12672: LD_INT 1400
12674: ST_TO_ADDR
// end ;
12675: GO 12539
// end ; end_of_file
12677: PPOPN 2
12679: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
12680: LD_INT 0
12682: PPUSH
12683: PPUSH
// if exist_mode then
12684: LD_VAR 0 2
12688: IFFALSE 12713
// unit := CreateCharacter ( prefix & ident ) else
12690: LD_ADDR_VAR 0 5
12694: PUSH
12695: LD_VAR 0 3
12699: PUSH
12700: LD_VAR 0 1
12704: STR
12705: PPUSH
12706: CALL_OW 34
12710: ST_TO_ADDR
12711: GO 12728
// unit := NewCharacter ( ident ) ;
12713: LD_ADDR_VAR 0 5
12717: PUSH
12718: LD_VAR 0 1
12722: PPUSH
12723: CALL_OW 25
12727: ST_TO_ADDR
// result := unit ;
12728: LD_ADDR_VAR 0 4
12732: PUSH
12733: LD_VAR 0 5
12737: ST_TO_ADDR
// end ;
12738: LD_VAR 0 4
12742: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
12743: LD_INT 0
12745: PPUSH
12746: PPUSH
// if not side or not nation then
12747: LD_VAR 0 1
12751: NOT
12752: PUSH
12753: LD_VAR 0 2
12757: NOT
12758: OR
12759: IFFALSE 12763
// exit ;
12761: GO 13375
// case nation of nation_american :
12763: LD_VAR 0 2
12767: PUSH
12768: LD_INT 1
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12934
12776: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
12777: LD_ADDR_VAR 0 4
12781: PUSH
12782: LD_INT 35
12784: PUSH
12785: LD_INT 45
12787: PUSH
12788: LD_INT 46
12790: PUSH
12791: LD_INT 47
12793: PUSH
12794: LD_INT 1
12796: PUSH
12797: LD_INT 2
12799: PUSH
12800: LD_INT 6
12802: PUSH
12803: LD_INT 15
12805: PUSH
12806: LD_INT 16
12808: PUSH
12809: LD_INT 7
12811: PUSH
12812: LD_INT 12
12814: PUSH
12815: LD_INT 13
12817: PUSH
12818: LD_INT 10
12820: PUSH
12821: LD_INT 14
12823: PUSH
12824: LD_INT 20
12826: PUSH
12827: LD_INT 25
12829: PUSH
12830: LD_INT 36
12832: PUSH
12833: LD_INT 69
12835: PUSH
12836: LD_INT 39
12838: PUSH
12839: LD_INT 34
12841: PUSH
12842: LD_INT 40
12844: PUSH
12845: LD_INT 48
12847: PUSH
12848: LD_INT 49
12850: PUSH
12851: LD_INT 50
12853: PUSH
12854: LD_INT 51
12856: PUSH
12857: LD_INT 52
12859: PUSH
12860: LD_INT 53
12862: PUSH
12863: LD_INT 54
12865: PUSH
12866: LD_INT 55
12868: PUSH
12869: LD_INT 56
12871: PUSH
12872: LD_INT 57
12874: PUSH
12875: LD_INT 58
12877: PUSH
12878: LD_INT 59
12880: PUSH
12881: LD_INT 60
12883: PUSH
12884: LD_INT 61
12886: PUSH
12887: LD_INT 62
12889: PUSH
12890: LD_INT 80
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: ST_TO_ADDR
12932: GO 13299
12934: LD_INT 2
12936: DOUBLE
12937: EQUAL
12938: IFTRUE 12942
12940: GO 13112
12942: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
12943: LD_ADDR_VAR 0 4
12947: PUSH
12948: LD_INT 35
12950: PUSH
12951: LD_INT 45
12953: PUSH
12954: LD_INT 46
12956: PUSH
12957: LD_INT 47
12959: PUSH
12960: LD_INT 70
12962: PUSH
12963: LD_INT 1
12965: PUSH
12966: LD_INT 11
12968: PUSH
12969: LD_INT 3
12971: PUSH
12972: LD_INT 4
12974: PUSH
12975: LD_INT 5
12977: PUSH
12978: LD_INT 6
12980: PUSH
12981: LD_INT 15
12983: PUSH
12984: LD_INT 18
12986: PUSH
12987: LD_INT 7
12989: PUSH
12990: LD_INT 17
12992: PUSH
12993: LD_INT 8
12995: PUSH
12996: LD_INT 20
12998: PUSH
12999: LD_INT 72
13001: PUSH
13002: LD_INT 26
13004: PUSH
13005: LD_INT 69
13007: PUSH
13008: LD_INT 39
13010: PUSH
13011: LD_INT 40
13013: PUSH
13014: LD_INT 41
13016: PUSH
13017: LD_INT 42
13019: PUSH
13020: LD_INT 43
13022: PUSH
13023: LD_INT 48
13025: PUSH
13026: LD_INT 49
13028: PUSH
13029: LD_INT 50
13031: PUSH
13032: LD_INT 51
13034: PUSH
13035: LD_INT 52
13037: PUSH
13038: LD_INT 53
13040: PUSH
13041: LD_INT 54
13043: PUSH
13044: LD_INT 55
13046: PUSH
13047: LD_INT 56
13049: PUSH
13050: LD_INT 60
13052: PUSH
13053: LD_INT 61
13055: PUSH
13056: LD_INT 62
13058: PUSH
13059: LD_INT 66
13061: PUSH
13062: LD_INT 67
13064: PUSH
13065: LD_INT 68
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: ST_TO_ADDR
13110: GO 13299
13112: LD_INT 3
13114: DOUBLE
13115: EQUAL
13116: IFTRUE 13120
13118: GO 13298
13120: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
13121: LD_ADDR_VAR 0 4
13125: PUSH
13126: LD_INT 46
13128: PUSH
13129: LD_INT 47
13131: PUSH
13132: LD_INT 1
13134: PUSH
13135: LD_INT 2
13137: PUSH
13138: LD_INT 11
13140: PUSH
13141: LD_INT 9
13143: PUSH
13144: LD_INT 20
13146: PUSH
13147: LD_INT 19
13149: PUSH
13150: LD_INT 21
13152: PUSH
13153: LD_INT 24
13155: PUSH
13156: LD_INT 22
13158: PUSH
13159: LD_INT 25
13161: PUSH
13162: LD_INT 28
13164: PUSH
13165: LD_INT 29
13167: PUSH
13168: LD_INT 31
13170: PUSH
13171: LD_INT 37
13173: PUSH
13174: LD_INT 38
13176: PUSH
13177: LD_INT 32
13179: PUSH
13180: LD_INT 27
13182: PUSH
13183: LD_INT 33
13185: PUSH
13186: LD_INT 69
13188: PUSH
13189: LD_INT 39
13191: PUSH
13192: LD_INT 34
13194: PUSH
13195: LD_INT 40
13197: PUSH
13198: LD_INT 71
13200: PUSH
13201: LD_INT 23
13203: PUSH
13204: LD_INT 44
13206: PUSH
13207: LD_INT 48
13209: PUSH
13210: LD_INT 49
13212: PUSH
13213: LD_INT 50
13215: PUSH
13216: LD_INT 51
13218: PUSH
13219: LD_INT 52
13221: PUSH
13222: LD_INT 53
13224: PUSH
13225: LD_INT 54
13227: PUSH
13228: LD_INT 55
13230: PUSH
13231: LD_INT 56
13233: PUSH
13234: LD_INT 57
13236: PUSH
13237: LD_INT 58
13239: PUSH
13240: LD_INT 59
13242: PUSH
13243: LD_INT 63
13245: PUSH
13246: LD_INT 64
13248: PUSH
13249: LD_INT 65
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: ST_TO_ADDR
13296: GO 13299
13298: POP
// if state > - 1 and state < 3 then
13299: LD_VAR 0 3
13303: PUSH
13304: LD_INT 1
13306: NEG
13307: GREATER
13308: PUSH
13309: LD_VAR 0 3
13313: PUSH
13314: LD_INT 3
13316: LESS
13317: AND
13318: IFFALSE 13375
// for i in result do
13320: LD_ADDR_VAR 0 5
13324: PUSH
13325: LD_VAR 0 4
13329: PUSH
13330: FOR_IN
13331: IFFALSE 13373
// if GetTech ( i , side ) <> state then
13333: LD_VAR 0 5
13337: PPUSH
13338: LD_VAR 0 1
13342: PPUSH
13343: CALL_OW 321
13347: PUSH
13348: LD_VAR 0 3
13352: NONEQUAL
13353: IFFALSE 13371
// result := result diff i ;
13355: LD_ADDR_VAR 0 4
13359: PUSH
13360: LD_VAR 0 4
13364: PUSH
13365: LD_VAR 0 5
13369: DIFF
13370: ST_TO_ADDR
13371: GO 13330
13373: POP
13374: POP
// end ;
13375: LD_VAR 0 4
13379: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
13380: LD_INT 0
13382: PPUSH
13383: PPUSH
13384: PPUSH
// result := true ;
13385: LD_ADDR_VAR 0 3
13389: PUSH
13390: LD_INT 1
13392: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
13393: LD_ADDR_VAR 0 5
13397: PUSH
13398: LD_VAR 0 2
13402: PPUSH
13403: CALL_OW 480
13407: ST_TO_ADDR
// if not tmp then
13408: LD_VAR 0 5
13412: NOT
13413: IFFALSE 13417
// exit ;
13415: GO 13466
// for i in tmp do
13417: LD_ADDR_VAR 0 4
13421: PUSH
13422: LD_VAR 0 5
13426: PUSH
13427: FOR_IN
13428: IFFALSE 13464
// if GetTech ( i , side ) <> state_researched then
13430: LD_VAR 0 4
13434: PPUSH
13435: LD_VAR 0 1
13439: PPUSH
13440: CALL_OW 321
13444: PUSH
13445: LD_INT 2
13447: NONEQUAL
13448: IFFALSE 13462
// begin result := false ;
13450: LD_ADDR_VAR 0 3
13454: PUSH
13455: LD_INT 0
13457: ST_TO_ADDR
// exit ;
13458: POP
13459: POP
13460: GO 13466
// end ;
13462: GO 13427
13464: POP
13465: POP
// end ;
13466: LD_VAR 0 3
13470: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
13471: LD_INT 0
13473: PPUSH
13474: PPUSH
13475: PPUSH
13476: PPUSH
13477: PPUSH
13478: PPUSH
13479: PPUSH
13480: PPUSH
13481: PPUSH
13482: PPUSH
13483: PPUSH
13484: PPUSH
13485: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
13486: LD_VAR 0 1
13490: NOT
13491: PUSH
13492: LD_VAR 0 1
13496: PPUSH
13497: CALL_OW 257
13501: PUSH
13502: LD_INT 9
13504: NONEQUAL
13505: OR
13506: IFFALSE 13510
// exit ;
13508: GO 14083
// side := GetSide ( unit ) ;
13510: LD_ADDR_VAR 0 9
13514: PUSH
13515: LD_VAR 0 1
13519: PPUSH
13520: CALL_OW 255
13524: ST_TO_ADDR
// tech_space := tech_spacanom ;
13525: LD_ADDR_VAR 0 12
13529: PUSH
13530: LD_INT 29
13532: ST_TO_ADDR
// tech_time := tech_taurad ;
13533: LD_ADDR_VAR 0 13
13537: PUSH
13538: LD_INT 28
13540: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
13541: LD_ADDR_VAR 0 11
13545: PUSH
13546: LD_VAR 0 1
13550: PPUSH
13551: CALL_OW 310
13555: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
13556: LD_VAR 0 11
13560: PPUSH
13561: CALL_OW 247
13565: PUSH
13566: LD_INT 2
13568: EQUAL
13569: IFFALSE 13573
// exit ;
13571: GO 14083
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13573: LD_ADDR_VAR 0 8
13577: PUSH
13578: LD_INT 81
13580: PUSH
13581: LD_VAR 0 9
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 3
13592: PUSH
13593: LD_INT 21
13595: PUSH
13596: LD_INT 3
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PPUSH
13611: CALL_OW 69
13615: ST_TO_ADDR
// if not tmp then
13616: LD_VAR 0 8
13620: NOT
13621: IFFALSE 13625
// exit ;
13623: GO 14083
// if in_unit then
13625: LD_VAR 0 11
13629: IFFALSE 13653
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
13631: LD_ADDR_VAR 0 10
13635: PUSH
13636: LD_VAR 0 8
13640: PPUSH
13641: LD_VAR 0 11
13645: PPUSH
13646: CALL_OW 74
13650: ST_TO_ADDR
13651: GO 13673
// enemy := NearestUnitToUnit ( tmp , unit ) ;
13653: LD_ADDR_VAR 0 10
13657: PUSH
13658: LD_VAR 0 8
13662: PPUSH
13663: LD_VAR 0 1
13667: PPUSH
13668: CALL_OW 74
13672: ST_TO_ADDR
// if not enemy then
13673: LD_VAR 0 10
13677: NOT
13678: IFFALSE 13682
// exit ;
13680: GO 14083
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
13682: LD_VAR 0 11
13686: PUSH
13687: LD_VAR 0 11
13691: PPUSH
13692: LD_VAR 0 10
13696: PPUSH
13697: CALL_OW 296
13701: PUSH
13702: LD_INT 13
13704: GREATER
13705: AND
13706: PUSH
13707: LD_VAR 0 1
13711: PPUSH
13712: LD_VAR 0 10
13716: PPUSH
13717: CALL_OW 296
13721: PUSH
13722: LD_INT 12
13724: GREATER
13725: OR
13726: IFFALSE 13730
// exit ;
13728: GO 14083
// missile := [ 1 ] ;
13730: LD_ADDR_VAR 0 14
13734: PUSH
13735: LD_INT 1
13737: PUSH
13738: EMPTY
13739: LIST
13740: ST_TO_ADDR
// if Researched ( side , tech_space ) then
13741: LD_VAR 0 9
13745: PPUSH
13746: LD_VAR 0 12
13750: PPUSH
13751: CALL_OW 325
13755: IFFALSE 13784
// missile := Insert ( missile , missile + 1 , 2 ) ;
13757: LD_ADDR_VAR 0 14
13761: PUSH
13762: LD_VAR 0 14
13766: PPUSH
13767: LD_VAR 0 14
13771: PUSH
13772: LD_INT 1
13774: PLUS
13775: PPUSH
13776: LD_INT 2
13778: PPUSH
13779: CALL_OW 2
13783: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
13784: LD_VAR 0 9
13788: PPUSH
13789: LD_VAR 0 13
13793: PPUSH
13794: CALL_OW 325
13798: PUSH
13799: LD_VAR 0 10
13803: PPUSH
13804: CALL_OW 255
13808: PPUSH
13809: LD_VAR 0 13
13813: PPUSH
13814: CALL_OW 325
13818: NOT
13819: AND
13820: IFFALSE 13849
// missile := Insert ( missile , missile + 1 , 3 ) ;
13822: LD_ADDR_VAR 0 14
13826: PUSH
13827: LD_VAR 0 14
13831: PPUSH
13832: LD_VAR 0 14
13836: PUSH
13837: LD_INT 1
13839: PLUS
13840: PPUSH
13841: LD_INT 3
13843: PPUSH
13844: CALL_OW 2
13848: ST_TO_ADDR
// if missile < 2 then
13849: LD_VAR 0 14
13853: PUSH
13854: LD_INT 2
13856: LESS
13857: IFFALSE 13861
// exit ;
13859: GO 14083
// x := GetX ( enemy ) ;
13861: LD_ADDR_VAR 0 4
13865: PUSH
13866: LD_VAR 0 10
13870: PPUSH
13871: CALL_OW 250
13875: ST_TO_ADDR
// y := GetY ( enemy ) ;
13876: LD_ADDR_VAR 0 5
13880: PUSH
13881: LD_VAR 0 10
13885: PPUSH
13886: CALL_OW 251
13890: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
13891: LD_ADDR_VAR 0 6
13895: PUSH
13896: LD_VAR 0 4
13900: PUSH
13901: LD_INT 1
13903: NEG
13904: PPUSH
13905: LD_INT 1
13907: PPUSH
13908: CALL_OW 12
13912: PLUS
13913: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
13914: LD_ADDR_VAR 0 7
13918: PUSH
13919: LD_VAR 0 5
13923: PUSH
13924: LD_INT 1
13926: NEG
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: CALL_OW 12
13935: PLUS
13936: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13937: LD_VAR 0 6
13941: PPUSH
13942: LD_VAR 0 7
13946: PPUSH
13947: CALL_OW 488
13951: NOT
13952: IFFALSE 13974
// begin _x := x ;
13954: LD_ADDR_VAR 0 6
13958: PUSH
13959: LD_VAR 0 4
13963: ST_TO_ADDR
// _y := y ;
13964: LD_ADDR_VAR 0 7
13968: PUSH
13969: LD_VAR 0 5
13973: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
13974: LD_ADDR_VAR 0 3
13978: PUSH
13979: LD_INT 1
13981: PPUSH
13982: LD_VAR 0 14
13986: PPUSH
13987: CALL_OW 12
13991: ST_TO_ADDR
// case i of 1 :
13992: LD_VAR 0 3
13996: PUSH
13997: LD_INT 1
13999: DOUBLE
14000: EQUAL
14001: IFTRUE 14005
14003: GO 14022
14005: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14006: LD_VAR 0 1
14010: PPUSH
14011: LD_VAR 0 10
14015: PPUSH
14016: CALL_OW 115
14020: GO 14083
14022: LD_INT 2
14024: DOUBLE
14025: EQUAL
14026: IFTRUE 14030
14028: GO 14052
14030: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14031: LD_VAR 0 1
14035: PPUSH
14036: LD_VAR 0 6
14040: PPUSH
14041: LD_VAR 0 7
14045: PPUSH
14046: CALL_OW 153
14050: GO 14083
14052: LD_INT 3
14054: DOUBLE
14055: EQUAL
14056: IFTRUE 14060
14058: GO 14082
14060: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14061: LD_VAR 0 1
14065: PPUSH
14066: LD_VAR 0 6
14070: PPUSH
14071: LD_VAR 0 7
14075: PPUSH
14076: CALL_OW 154
14080: GO 14083
14082: POP
// end ;
14083: LD_VAR 0 2
14087: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14088: LD_INT 0
14090: PPUSH
14091: PPUSH
14092: PPUSH
14093: PPUSH
14094: PPUSH
14095: PPUSH
// if not unit or not building then
14096: LD_VAR 0 1
14100: NOT
14101: PUSH
14102: LD_VAR 0 2
14106: NOT
14107: OR
14108: IFFALSE 14112
// exit ;
14110: GO 14267
// x := GetX ( building ) ;
14112: LD_ADDR_VAR 0 5
14116: PUSH
14117: LD_VAR 0 2
14121: PPUSH
14122: CALL_OW 250
14126: ST_TO_ADDR
// y := GetY ( building ) ;
14127: LD_ADDR_VAR 0 6
14131: PUSH
14132: LD_VAR 0 2
14136: PPUSH
14137: CALL_OW 251
14141: ST_TO_ADDR
// for i = 0 to 5 do
14142: LD_ADDR_VAR 0 4
14146: PUSH
14147: DOUBLE
14148: LD_INT 0
14150: DEC
14151: ST_TO_ADDR
14152: LD_INT 5
14154: PUSH
14155: FOR_TO
14156: IFFALSE 14265
// begin _x := ShiftX ( x , i , 3 ) ;
14158: LD_ADDR_VAR 0 7
14162: PUSH
14163: LD_VAR 0 5
14167: PPUSH
14168: LD_VAR 0 4
14172: PPUSH
14173: LD_INT 3
14175: PPUSH
14176: CALL_OW 272
14180: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
14181: LD_ADDR_VAR 0 8
14185: PUSH
14186: LD_VAR 0 6
14190: PPUSH
14191: LD_VAR 0 4
14195: PPUSH
14196: LD_INT 3
14198: PPUSH
14199: CALL_OW 273
14203: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
14204: LD_VAR 0 7
14208: PPUSH
14209: LD_VAR 0 8
14213: PPUSH
14214: CALL_OW 428
14218: PUSH
14219: LD_INT 0
14221: EQUAL
14222: PUSH
14223: LD_VAR 0 7
14227: PPUSH
14228: LD_VAR 0 8
14232: PPUSH
14233: CALL_OW 488
14237: AND
14238: IFFALSE 14263
// begin ComMoveXY ( unit , _x , _y ) ;
14240: LD_VAR 0 1
14244: PPUSH
14245: LD_VAR 0 7
14249: PPUSH
14250: LD_VAR 0 8
14254: PPUSH
14255: CALL_OW 111
// exit ;
14259: POP
14260: POP
14261: GO 14267
// end ; end ;
14263: GO 14155
14265: POP
14266: POP
// end ;
14267: LD_VAR 0 3
14271: RET
// export function ScanBase ( side , base_area ) ; begin
14272: LD_INT 0
14274: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
14275: LD_ADDR_VAR 0 3
14279: PUSH
14280: LD_VAR 0 2
14284: PPUSH
14285: LD_INT 81
14287: PUSH
14288: LD_VAR 0 1
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: PPUSH
14297: CALL_OW 70
14301: ST_TO_ADDR
// end ;
14302: LD_VAR 0 3
14306: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
14307: LD_INT 0
14309: PPUSH
14310: PPUSH
14311: PPUSH
14312: PPUSH
14313: PPUSH
14314: PPUSH
14315: PPUSH
14316: PPUSH
14317: PPUSH
14318: PPUSH
14319: PPUSH
14320: PPUSH
14321: PPUSH
14322: PPUSH
14323: PPUSH
14324: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
14325: LD_ADDR_VAR 0 12
14329: PUSH
14330: LD_EXP 57
14334: PUSH
14335: LD_VAR 0 1
14339: ARRAY
14340: PPUSH
14341: LD_INT 25
14343: PUSH
14344: LD_INT 3
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PPUSH
14351: CALL_OW 72
14355: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
14356: LD_ADDR_VAR 0 8
14360: PUSH
14361: LD_EXP 57
14365: PUSH
14366: LD_VAR 0 1
14370: ARRAY
14371: PPUSH
14372: LD_INT 2
14374: PUSH
14375: LD_INT 25
14377: PUSH
14378: LD_INT 1
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 25
14387: PUSH
14388: LD_INT 5
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 25
14397: PUSH
14398: LD_INT 8
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: LD_INT 25
14407: PUSH
14408: LD_INT 9
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: PPUSH
14422: CALL_OW 72
14426: ST_TO_ADDR
// if not defenders and not solds then
14427: LD_VAR 0 2
14431: NOT
14432: PUSH
14433: LD_VAR 0 8
14437: NOT
14438: AND
14439: IFFALSE 14443
// exit ;
14441: GO 15809
// depot_under_attack := false ;
14443: LD_ADDR_VAR 0 16
14447: PUSH
14448: LD_INT 0
14450: ST_TO_ADDR
// sold_defenders := [ ] ;
14451: LD_ADDR_VAR 0 17
14455: PUSH
14456: EMPTY
14457: ST_TO_ADDR
// if mechs then
14458: LD_VAR 0 12
14462: IFFALSE 14591
// for i in defenders do
14464: LD_ADDR_VAR 0 5
14468: PUSH
14469: LD_VAR 0 2
14473: PUSH
14474: FOR_IN
14475: IFFALSE 14589
// begin SetTag ( i , 20 ) ;
14477: LD_VAR 0 5
14481: PPUSH
14482: LD_INT 20
14484: PPUSH
14485: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
14489: LD_VAR 0 5
14493: PPUSH
14494: CALL_OW 263
14498: PUSH
14499: LD_INT 1
14501: EQUAL
14502: PUSH
14503: LD_VAR 0 5
14507: PPUSH
14508: CALL_OW 311
14512: NOT
14513: AND
14514: PUSH
14515: LD_VAR 0 12
14519: AND
14520: IFFALSE 14587
// begin un := mechs [ 1 ] ;
14522: LD_ADDR_VAR 0 10
14526: PUSH
14527: LD_VAR 0 12
14531: PUSH
14532: LD_INT 1
14534: ARRAY
14535: ST_TO_ADDR
// ComExitBuilding ( un ) ;
14536: LD_VAR 0 10
14540: PPUSH
14541: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
14545: LD_VAR 0 10
14549: PPUSH
14550: LD_VAR 0 5
14554: PPUSH
14555: CALL_OW 180
// SetTag ( un , 19 ) ;
14559: LD_VAR 0 10
14563: PPUSH
14564: LD_INT 19
14566: PPUSH
14567: CALL_OW 109
// mechs := mechs diff un ;
14571: LD_ADDR_VAR 0 12
14575: PUSH
14576: LD_VAR 0 12
14580: PUSH
14581: LD_VAR 0 10
14585: DIFF
14586: ST_TO_ADDR
// end ; end ;
14587: GO 14474
14589: POP
14590: POP
// if solds then
14591: LD_VAR 0 8
14595: IFFALSE 14654
// for i in solds do
14597: LD_ADDR_VAR 0 5
14601: PUSH
14602: LD_VAR 0 8
14606: PUSH
14607: FOR_IN
14608: IFFALSE 14652
// if not GetTag ( i ) then
14610: LD_VAR 0 5
14614: PPUSH
14615: CALL_OW 110
14619: NOT
14620: IFFALSE 14650
// begin defenders := defenders union i ;
14622: LD_ADDR_VAR 0 2
14626: PUSH
14627: LD_VAR 0 2
14631: PUSH
14632: LD_VAR 0 5
14636: UNION
14637: ST_TO_ADDR
// SetTag ( i , 18 ) ;
14638: LD_VAR 0 5
14642: PPUSH
14643: LD_INT 18
14645: PPUSH
14646: CALL_OW 109
// end ;
14650: GO 14607
14652: POP
14653: POP
// repeat wait ( 0 0$1 ) ;
14654: LD_INT 35
14656: PPUSH
14657: CALL_OW 67
// enemy := mc_scan [ base ] ;
14661: LD_ADDR_VAR 0 3
14665: PUSH
14666: LD_EXP 80
14670: PUSH
14671: LD_VAR 0 1
14675: ARRAY
14676: ST_TO_ADDR
// for i in defenders do
14677: LD_ADDR_VAR 0 5
14681: PUSH
14682: LD_VAR 0 2
14686: PUSH
14687: FOR_IN
14688: IFFALSE 15373
// begin e := NearestUnitToUnit ( enemy , i ) ;
14690: LD_ADDR_VAR 0 13
14694: PUSH
14695: LD_VAR 0 3
14699: PPUSH
14700: LD_VAR 0 5
14704: PPUSH
14705: CALL_OW 74
14709: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
14710: LD_ADDR_VAR 0 16
14714: PUSH
14715: LD_EXP 57
14719: PUSH
14720: LD_VAR 0 1
14724: ARRAY
14725: PPUSH
14726: LD_INT 2
14728: PUSH
14729: LD_INT 30
14731: PUSH
14732: LD_INT 0
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 30
14741: PUSH
14742: LD_INT 1
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: LIST
14753: PPUSH
14754: CALL_OW 72
14758: NOT
14759: PUSH
14760: LD_EXP 57
14764: PUSH
14765: LD_VAR 0 1
14769: ARRAY
14770: PPUSH
14771: LD_INT 2
14773: PUSH
14774: LD_INT 30
14776: PUSH
14777: LD_INT 0
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 30
14786: PUSH
14787: LD_INT 1
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: PPUSH
14799: CALL_OW 72
14803: PPUSH
14804: CALL_OW 256
14808: PUSH
14809: LD_INT 600
14811: LESS
14812: OR
14813: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
14814: LD_VAR 0 5
14818: PPUSH
14819: CALL_OW 247
14823: PUSH
14824: LD_INT 2
14826: DOUBLE
14827: EQUAL
14828: IFTRUE 14832
14830: GO 15079
14832: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
14833: LD_VAR 0 5
14837: PPUSH
14838: CALL_OW 256
14842: PUSH
14843: LD_INT 650
14845: GREATER
14846: PUSH
14847: LD_VAR 0 5
14851: PPUSH
14852: LD_VAR 0 13
14856: PPUSH
14857: CALL_OW 296
14861: PUSH
14862: LD_INT 40
14864: LESS
14865: AND
14866: IFFALSE 14884
// ComAttackUnit ( i , e ) else
14868: LD_VAR 0 5
14872: PPUSH
14873: LD_VAR 0 13
14877: PPUSH
14878: CALL_OW 115
14882: GO 14962
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
14884: LD_VAR 0 5
14888: PPUSH
14889: LD_VAR 0 13
14893: PPUSH
14894: CALL_OW 296
14898: PUSH
14899: LD_INT 30
14901: GREATEREQUAL
14902: PUSH
14903: LD_VAR 0 5
14907: PPUSH
14908: CALL_OW 256
14912: PUSH
14913: LD_INT 650
14915: LESSEQUAL
14916: OR
14917: PUSH
14918: LD_VAR 0 5
14922: PPUSH
14923: LD_EXP 81
14927: PUSH
14928: LD_VAR 0 1
14932: ARRAY
14933: PPUSH
14934: CALL_OW 308
14938: NOT
14939: AND
14940: IFFALSE 14962
// ComMoveToArea ( i , mc_parking [ base ] ) ;
14942: LD_VAR 0 5
14946: PPUSH
14947: LD_EXP 81
14951: PUSH
14952: LD_VAR 0 1
14956: ARRAY
14957: PPUSH
14958: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
14962: LD_VAR 0 5
14966: PPUSH
14967: CALL_OW 256
14971: PUSH
14972: LD_INT 998
14974: LESS
14975: PUSH
14976: LD_VAR 0 5
14980: PPUSH
14981: CALL_OW 263
14985: PUSH
14986: LD_INT 1
14988: EQUAL
14989: AND
14990: PUSH
14991: LD_VAR 0 5
14995: PPUSH
14996: CALL_OW 311
15000: AND
15001: PUSH
15002: LD_VAR 0 5
15006: PPUSH
15007: LD_EXP 81
15011: PUSH
15012: LD_VAR 0 1
15016: ARRAY
15017: PPUSH
15018: CALL_OW 308
15022: AND
15023: IFFALSE 15077
// begin mech := IsDrivenBy ( i ) ;
15025: LD_ADDR_VAR 0 9
15029: PUSH
15030: LD_VAR 0 5
15034: PPUSH
15035: CALL_OW 311
15039: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
15040: LD_VAR 0 9
15044: PPUSH
15045: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
15049: LD_VAR 0 9
15053: PPUSH
15054: LD_VAR 0 5
15058: PPUSH
15059: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
15063: LD_VAR 0 9
15067: PPUSH
15068: LD_VAR 0 5
15072: PPUSH
15073: CALL_OW 180
// end ; end ; unit_human :
15077: GO 15344
15079: LD_INT 1
15081: DOUBLE
15082: EQUAL
15083: IFTRUE 15087
15085: GO 15343
15087: POP
// begin b := IsInUnit ( i ) ;
15088: LD_ADDR_VAR 0 18
15092: PUSH
15093: LD_VAR 0 5
15097: PPUSH
15098: CALL_OW 310
15102: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
15103: LD_ADDR_VAR 0 19
15107: PUSH
15108: LD_VAR 0 18
15112: NOT
15113: PUSH
15114: LD_VAR 0 18
15118: PPUSH
15119: CALL_OW 266
15123: PUSH
15124: LD_INT 32
15126: PUSH
15127: LD_INT 31
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: IN
15134: OR
15135: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
15136: LD_VAR 0 16
15140: PUSH
15141: LD_VAR 0 2
15145: PPUSH
15146: LD_INT 21
15148: PUSH
15149: LD_INT 2
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PPUSH
15156: CALL_OW 72
15160: PUSH
15161: LD_INT 1
15163: LESSEQUAL
15164: OR
15165: PUSH
15166: LD_VAR 0 19
15170: AND
15171: PUSH
15172: LD_VAR 0 5
15176: PUSH
15177: LD_VAR 0 17
15181: IN
15182: NOT
15183: AND
15184: IFFALSE 15277
// begin if b then
15186: LD_VAR 0 18
15190: IFFALSE 15239
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
15192: LD_VAR 0 18
15196: PPUSH
15197: LD_VAR 0 3
15201: PPUSH
15202: LD_VAR 0 18
15206: PPUSH
15207: CALL_OW 74
15211: PPUSH
15212: CALL_OW 296
15216: PUSH
15217: LD_INT 10
15219: LESS
15220: PUSH
15221: LD_VAR 0 18
15225: PPUSH
15226: CALL_OW 461
15230: PUSH
15231: LD_INT 7
15233: NONEQUAL
15234: AND
15235: IFFALSE 15239
// continue ;
15237: GO 14687
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
15239: LD_ADDR_VAR 0 17
15243: PUSH
15244: LD_VAR 0 17
15248: PPUSH
15249: LD_VAR 0 17
15253: PUSH
15254: LD_INT 1
15256: PLUS
15257: PPUSH
15258: LD_VAR 0 5
15262: PPUSH
15263: CALL_OW 1
15267: ST_TO_ADDR
// ComExitBuilding ( i ) ;
15268: LD_VAR 0 5
15272: PPUSH
15273: CALL_OW 122
// end ; if sold_defenders then
15277: LD_VAR 0 17
15281: IFFALSE 15341
// if i in sold_defenders then
15283: LD_VAR 0 5
15287: PUSH
15288: LD_VAR 0 17
15292: IN
15293: IFFALSE 15341
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
15295: LD_VAR 0 5
15299: PPUSH
15300: CALL_OW 314
15304: NOT
15305: PUSH
15306: LD_VAR 0 5
15310: PPUSH
15311: LD_VAR 0 13
15315: PPUSH
15316: CALL_OW 296
15320: PUSH
15321: LD_INT 30
15323: LESS
15324: AND
15325: IFFALSE 15341
// ComAttackUnit ( i , e ) ;
15327: LD_VAR 0 5
15331: PPUSH
15332: LD_VAR 0 13
15336: PPUSH
15337: CALL_OW 115
// end ; end ; end ;
15341: GO 15344
15343: POP
// if IsDead ( i ) then
15344: LD_VAR 0 5
15348: PPUSH
15349: CALL_OW 301
15353: IFFALSE 15371
// defenders := defenders diff i ;
15355: LD_ADDR_VAR 0 2
15359: PUSH
15360: LD_VAR 0 2
15364: PUSH
15365: LD_VAR 0 5
15369: DIFF
15370: ST_TO_ADDR
// end ;
15371: GO 14687
15373: POP
15374: POP
// until not enemy or not defenders ;
15375: LD_VAR 0 3
15379: NOT
15380: PUSH
15381: LD_VAR 0 2
15385: NOT
15386: OR
15387: IFFALSE 14654
// MC_Reset ( base , 18 ) ;
15389: LD_VAR 0 1
15393: PPUSH
15394: LD_INT 18
15396: PPUSH
15397: CALL 51805 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
15401: LD_ADDR_VAR 0 2
15405: PUSH
15406: LD_VAR 0 2
15410: PUSH
15411: LD_VAR 0 2
15415: PPUSH
15416: LD_INT 2
15418: PUSH
15419: LD_INT 25
15421: PUSH
15422: LD_INT 1
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PUSH
15429: LD_INT 25
15431: PUSH
15432: LD_INT 5
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 25
15441: PUSH
15442: LD_INT 8
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 25
15451: PUSH
15452: LD_INT 9
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: PPUSH
15466: CALL_OW 72
15470: DIFF
15471: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
15472: LD_VAR 0 3
15476: NOT
15477: PUSH
15478: LD_VAR 0 2
15482: PPUSH
15483: LD_INT 21
15485: PUSH
15486: LD_INT 2
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: PPUSH
15493: CALL_OW 72
15497: AND
15498: IFFALSE 15760
// begin tmp := FilterByTag ( defenders , 19 ) ;
15500: LD_ADDR_VAR 0 11
15504: PUSH
15505: LD_VAR 0 2
15509: PPUSH
15510: LD_INT 19
15512: PPUSH
15513: CALL 50097 0 2
15517: ST_TO_ADDR
// if tmp then
15518: LD_VAR 0 11
15522: IFFALSE 15592
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
15524: LD_ADDR_VAR 0 11
15528: PUSH
15529: LD_VAR 0 11
15533: PPUSH
15534: LD_INT 25
15536: PUSH
15537: LD_INT 3
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PPUSH
15544: CALL_OW 72
15548: ST_TO_ADDR
// if tmp then
15549: LD_VAR 0 11
15553: IFFALSE 15592
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
15555: LD_ADDR_EXP 69
15559: PUSH
15560: LD_EXP 69
15564: PPUSH
15565: LD_VAR 0 1
15569: PPUSH
15570: LD_EXP 69
15574: PUSH
15575: LD_VAR 0 1
15579: ARRAY
15580: PUSH
15581: LD_VAR 0 11
15585: UNION
15586: PPUSH
15587: CALL_OW 1
15591: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
15592: LD_VAR 0 1
15596: PPUSH
15597: LD_INT 19
15599: PPUSH
15600: CALL 51805 0 2
// repeat wait ( 0 0$1 ) ;
15604: LD_INT 35
15606: PPUSH
15607: CALL_OW 67
// for i in defenders do
15611: LD_ADDR_VAR 0 5
15615: PUSH
15616: LD_VAR 0 2
15620: PUSH
15621: FOR_IN
15622: IFFALSE 15711
// begin if not IsInArea ( i , mc_parking [ base ] ) then
15624: LD_VAR 0 5
15628: PPUSH
15629: LD_EXP 81
15633: PUSH
15634: LD_VAR 0 1
15638: ARRAY
15639: PPUSH
15640: CALL_OW 308
15644: NOT
15645: IFFALSE 15669
// ComMoveToArea ( i , mc_parking [ base ] ) else
15647: LD_VAR 0 5
15651: PPUSH
15652: LD_EXP 81
15656: PUSH
15657: LD_VAR 0 1
15661: ARRAY
15662: PPUSH
15663: CALL_OW 113
15667: GO 15709
// if GetControl ( i ) = control_manual then
15669: LD_VAR 0 5
15673: PPUSH
15674: CALL_OW 263
15678: PUSH
15679: LD_INT 1
15681: EQUAL
15682: IFFALSE 15709
// if IsDrivenBy ( i ) then
15684: LD_VAR 0 5
15688: PPUSH
15689: CALL_OW 311
15693: IFFALSE 15709
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
15695: LD_VAR 0 5
15699: PPUSH
15700: CALL_OW 311
15704: PPUSH
15705: CALL_OW 121
// end ;
15709: GO 15621
15711: POP
15712: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
15713: LD_VAR 0 2
15717: PPUSH
15718: LD_INT 95
15720: PUSH
15721: LD_EXP 81
15725: PUSH
15726: LD_VAR 0 1
15730: ARRAY
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PPUSH
15736: CALL_OW 72
15740: PUSH
15741: LD_VAR 0 2
15745: EQUAL
15746: PUSH
15747: LD_EXP 80
15751: PUSH
15752: LD_VAR 0 1
15756: ARRAY
15757: OR
15758: IFFALSE 15604
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
15760: LD_ADDR_EXP 79
15764: PUSH
15765: LD_EXP 79
15769: PPUSH
15770: LD_VAR 0 1
15774: PPUSH
15775: LD_EXP 79
15779: PUSH
15780: LD_VAR 0 1
15784: ARRAY
15785: PUSH
15786: LD_VAR 0 2
15790: UNION
15791: PPUSH
15792: CALL_OW 1
15796: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
15797: LD_VAR 0 1
15801: PPUSH
15802: LD_INT 20
15804: PPUSH
15805: CALL 51805 0 2
// end ;
15809: LD_VAR 0 4
15813: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15814: LD_INT 0
15816: PPUSH
15817: PPUSH
15818: PPUSH
15819: PPUSH
// result := false ;
15820: LD_ADDR_VAR 0 2
15824: PUSH
15825: LD_INT 0
15827: ST_TO_ADDR
// side := GetSide ( unit ) ;
15828: LD_ADDR_VAR 0 3
15832: PUSH
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 255
15842: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15843: LD_ADDR_VAR 0 4
15847: PUSH
15848: LD_VAR 0 1
15852: PPUSH
15853: CALL_OW 248
15857: ST_TO_ADDR
// case nat of 1 :
15858: LD_VAR 0 4
15862: PUSH
15863: LD_INT 1
15865: DOUBLE
15866: EQUAL
15867: IFTRUE 15871
15869: GO 15882
15871: POP
// tech := tech_lassight ; 2 :
15872: LD_ADDR_VAR 0 5
15876: PUSH
15877: LD_INT 12
15879: ST_TO_ADDR
15880: GO 15921
15882: LD_INT 2
15884: DOUBLE
15885: EQUAL
15886: IFTRUE 15890
15888: GO 15901
15890: POP
// tech := tech_mortar ; 3 :
15891: LD_ADDR_VAR 0 5
15895: PUSH
15896: LD_INT 41
15898: ST_TO_ADDR
15899: GO 15921
15901: LD_INT 3
15903: DOUBLE
15904: EQUAL
15905: IFTRUE 15909
15907: GO 15920
15909: POP
// tech := tech_bazooka ; end ;
15910: LD_ADDR_VAR 0 5
15914: PUSH
15915: LD_INT 44
15917: ST_TO_ADDR
15918: GO 15921
15920: POP
// if Researched ( side , tech ) then
15921: LD_VAR 0 3
15925: PPUSH
15926: LD_VAR 0 5
15930: PPUSH
15931: CALL_OW 325
15935: IFFALSE 15962
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15937: LD_ADDR_VAR 0 2
15941: PUSH
15942: LD_INT 5
15944: PUSH
15945: LD_INT 8
15947: PUSH
15948: LD_INT 9
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: LIST
15955: PUSH
15956: LD_VAR 0 4
15960: ARRAY
15961: ST_TO_ADDR
// end ;
15962: LD_VAR 0 2
15966: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15967: LD_INT 0
15969: PPUSH
15970: PPUSH
15971: PPUSH
// if not mines then
15972: LD_VAR 0 2
15976: NOT
15977: IFFALSE 15981
// exit ;
15979: GO 16125
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15981: LD_ADDR_VAR 0 5
15985: PUSH
15986: LD_INT 81
15988: PUSH
15989: LD_VAR 0 1
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 3
16000: PUSH
16001: LD_INT 21
16003: PUSH
16004: LD_INT 3
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PPUSH
16019: CALL_OW 69
16023: ST_TO_ADDR
// for i in mines do
16024: LD_ADDR_VAR 0 4
16028: PUSH
16029: LD_VAR 0 2
16033: PUSH
16034: FOR_IN
16035: IFFALSE 16123
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
16037: LD_VAR 0 4
16041: PUSH
16042: LD_INT 1
16044: ARRAY
16045: PPUSH
16046: LD_VAR 0 4
16050: PUSH
16051: LD_INT 2
16053: ARRAY
16054: PPUSH
16055: CALL_OW 458
16059: NOT
16060: IFFALSE 16064
// continue ;
16062: GO 16034
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
16064: LD_VAR 0 4
16068: PUSH
16069: LD_INT 1
16071: ARRAY
16072: PPUSH
16073: LD_VAR 0 4
16077: PUSH
16078: LD_INT 2
16080: ARRAY
16081: PPUSH
16082: CALL_OW 428
16086: PUSH
16087: LD_VAR 0 5
16091: IN
16092: IFFALSE 16121
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
16094: LD_VAR 0 4
16098: PUSH
16099: LD_INT 1
16101: ARRAY
16102: PPUSH
16103: LD_VAR 0 4
16107: PUSH
16108: LD_INT 2
16110: ARRAY
16111: PPUSH
16112: LD_VAR 0 1
16116: PPUSH
16117: CALL_OW 456
// end ;
16121: GO 16034
16123: POP
16124: POP
// end ;
16125: LD_VAR 0 3
16129: RET
// export function Count ( array ) ; var i ; begin
16130: LD_INT 0
16132: PPUSH
16133: PPUSH
// result := 0 ;
16134: LD_ADDR_VAR 0 2
16138: PUSH
16139: LD_INT 0
16141: ST_TO_ADDR
// for i in array do
16142: LD_ADDR_VAR 0 3
16146: PUSH
16147: LD_VAR 0 1
16151: PUSH
16152: FOR_IN
16153: IFFALSE 16177
// if i then
16155: LD_VAR 0 3
16159: IFFALSE 16175
// result := result + 1 ;
16161: LD_ADDR_VAR 0 2
16165: PUSH
16166: LD_VAR 0 2
16170: PUSH
16171: LD_INT 1
16173: PLUS
16174: ST_TO_ADDR
16175: GO 16152
16177: POP
16178: POP
// end ;
16179: LD_VAR 0 2
16183: RET
// export function IsEmpty ( building ) ; begin
16184: LD_INT 0
16186: PPUSH
// if not building then
16187: LD_VAR 0 1
16191: NOT
16192: IFFALSE 16196
// exit ;
16194: GO 16239
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
16196: LD_ADDR_VAR 0 2
16200: PUSH
16201: LD_VAR 0 1
16205: PUSH
16206: LD_INT 22
16208: PUSH
16209: LD_VAR 0 1
16213: PPUSH
16214: CALL_OW 255
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: LD_INT 58
16225: PUSH
16226: EMPTY
16227: LIST
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PPUSH
16233: CALL_OW 69
16237: IN
16238: ST_TO_ADDR
// end ;
16239: LD_VAR 0 2
16243: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
16244: LD_INT 0
16246: PPUSH
16247: PPUSH
16248: PPUSH
16249: PPUSH
// tmp := [ ] ;
16250: LD_ADDR_VAR 0 3
16254: PUSH
16255: EMPTY
16256: ST_TO_ADDR
// list := [ ] ;
16257: LD_ADDR_VAR 0 5
16261: PUSH
16262: EMPTY
16263: ST_TO_ADDR
// for i = 16 to 25 do
16264: LD_ADDR_VAR 0 4
16268: PUSH
16269: DOUBLE
16270: LD_INT 16
16272: DEC
16273: ST_TO_ADDR
16274: LD_INT 25
16276: PUSH
16277: FOR_TO
16278: IFFALSE 16351
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
16280: LD_ADDR_VAR 0 3
16284: PUSH
16285: LD_VAR 0 3
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_VAR 0 1
16297: PPUSH
16298: CALL_OW 255
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 91
16309: PUSH
16310: LD_VAR 0 1
16314: PUSH
16315: LD_INT 6
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 30
16325: PUSH
16326: LD_VAR 0 4
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: PPUSH
16343: CALL_OW 69
16347: ADD
16348: ST_TO_ADDR
16349: GO 16277
16351: POP
16352: POP
// for i = 1 to tmp do
16353: LD_ADDR_VAR 0 4
16357: PUSH
16358: DOUBLE
16359: LD_INT 1
16361: DEC
16362: ST_TO_ADDR
16363: LD_VAR 0 3
16367: PUSH
16368: FOR_TO
16369: IFFALSE 16457
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
16371: LD_ADDR_VAR 0 5
16375: PUSH
16376: LD_VAR 0 5
16380: PUSH
16381: LD_VAR 0 3
16385: PUSH
16386: LD_VAR 0 4
16390: ARRAY
16391: PPUSH
16392: CALL_OW 266
16396: PUSH
16397: LD_VAR 0 3
16401: PUSH
16402: LD_VAR 0 4
16406: ARRAY
16407: PPUSH
16408: CALL_OW 250
16412: PUSH
16413: LD_VAR 0 3
16417: PUSH
16418: LD_VAR 0 4
16422: ARRAY
16423: PPUSH
16424: CALL_OW 251
16428: PUSH
16429: LD_VAR 0 3
16433: PUSH
16434: LD_VAR 0 4
16438: ARRAY
16439: PPUSH
16440: CALL_OW 254
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: PUSH
16451: EMPTY
16452: LIST
16453: ADD
16454: ST_TO_ADDR
16455: GO 16368
16457: POP
16458: POP
// result := list ;
16459: LD_ADDR_VAR 0 2
16463: PUSH
16464: LD_VAR 0 5
16468: ST_TO_ADDR
// end ;
16469: LD_VAR 0 2
16473: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
16474: LD_INT 0
16476: PPUSH
16477: PPUSH
16478: PPUSH
16479: PPUSH
16480: PPUSH
16481: PPUSH
16482: PPUSH
// if not factory then
16483: LD_VAR 0 1
16487: NOT
16488: IFFALSE 16492
// exit ;
16490: GO 17017
// if control = control_apeman then
16492: LD_VAR 0 4
16496: PUSH
16497: LD_INT 5
16499: EQUAL
16500: IFFALSE 16609
// begin tmp := UnitsInside ( factory ) ;
16502: LD_ADDR_VAR 0 8
16506: PUSH
16507: LD_VAR 0 1
16511: PPUSH
16512: CALL_OW 313
16516: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
16517: LD_VAR 0 8
16521: PPUSH
16522: LD_INT 25
16524: PUSH
16525: LD_INT 12
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PPUSH
16532: CALL_OW 72
16536: NOT
16537: IFFALSE 16547
// control := control_manual ;
16539: LD_ADDR_VAR 0 4
16543: PUSH
16544: LD_INT 1
16546: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
16547: LD_ADDR_VAR 0 8
16551: PUSH
16552: LD_VAR 0 1
16556: PPUSH
16557: CALL 16244 0 1
16561: ST_TO_ADDR
// if tmp then
16562: LD_VAR 0 8
16566: IFFALSE 16609
// begin for i in tmp do
16568: LD_ADDR_VAR 0 7
16572: PUSH
16573: LD_VAR 0 8
16577: PUSH
16578: FOR_IN
16579: IFFALSE 16607
// if i [ 1 ] = b_ext_radar then
16581: LD_VAR 0 7
16585: PUSH
16586: LD_INT 1
16588: ARRAY
16589: PUSH
16590: LD_INT 20
16592: EQUAL
16593: IFFALSE 16605
// begin control := control_remote ;
16595: LD_ADDR_VAR 0 4
16599: PUSH
16600: LD_INT 2
16602: ST_TO_ADDR
// break ;
16603: GO 16607
// end ;
16605: GO 16578
16607: POP
16608: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16609: LD_VAR 0 1
16613: PPUSH
16614: LD_VAR 0 2
16618: PPUSH
16619: LD_VAR 0 3
16623: PPUSH
16624: LD_VAR 0 4
16628: PPUSH
16629: LD_VAR 0 5
16633: PPUSH
16634: CALL_OW 448
16638: IFFALSE 16673
// begin result := [ chassis , engine , control , weapon ] ;
16640: LD_ADDR_VAR 0 6
16644: PUSH
16645: LD_VAR 0 2
16649: PUSH
16650: LD_VAR 0 3
16654: PUSH
16655: LD_VAR 0 4
16659: PUSH
16660: LD_VAR 0 5
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: ST_TO_ADDR
// exit ;
16671: GO 17017
// end ; _chassis := AvailableChassisList ( factory ) ;
16673: LD_ADDR_VAR 0 9
16677: PUSH
16678: LD_VAR 0 1
16682: PPUSH
16683: CALL_OW 475
16687: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16688: LD_ADDR_VAR 0 11
16692: PUSH
16693: LD_VAR 0 1
16697: PPUSH
16698: CALL_OW 476
16702: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16703: LD_ADDR_VAR 0 12
16707: PUSH
16708: LD_VAR 0 1
16712: PPUSH
16713: CALL_OW 477
16717: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16718: LD_ADDR_VAR 0 10
16722: PUSH
16723: LD_VAR 0 1
16727: PPUSH
16728: CALL_OW 478
16732: ST_TO_ADDR
// if not chassis in _chassis then
16733: LD_VAR 0 2
16737: PUSH
16738: LD_VAR 0 9
16742: IN
16743: NOT
16744: IFFALSE 16770
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16746: LD_ADDR_VAR 0 2
16750: PUSH
16751: LD_VAR 0 9
16755: PUSH
16756: LD_INT 1
16758: PPUSH
16759: LD_VAR 0 9
16763: PPUSH
16764: CALL_OW 12
16768: ARRAY
16769: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16770: LD_VAR 0 2
16774: PPUSH
16775: LD_VAR 0 3
16779: PPUSH
16780: CALL 17022 0 2
16784: NOT
16785: IFFALSE 16844
// repeat engine := _engine [ 1 ] ;
16787: LD_ADDR_VAR 0 3
16791: PUSH
16792: LD_VAR 0 11
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16801: LD_ADDR_VAR 0 11
16805: PUSH
16806: LD_VAR 0 11
16810: PPUSH
16811: LD_INT 1
16813: PPUSH
16814: CALL_OW 3
16818: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16819: LD_VAR 0 2
16823: PPUSH
16824: LD_VAR 0 3
16828: PPUSH
16829: CALL 17022 0 2
16833: PUSH
16834: LD_VAR 0 11
16838: PUSH
16839: EMPTY
16840: EQUAL
16841: OR
16842: IFFALSE 16787
// if not control in _control then
16844: LD_VAR 0 4
16848: PUSH
16849: LD_VAR 0 12
16853: IN
16854: NOT
16855: IFFALSE 16881
// control := _control [ rand ( 1 , _control ) ] ;
16857: LD_ADDR_VAR 0 4
16861: PUSH
16862: LD_VAR 0 12
16866: PUSH
16867: LD_INT 1
16869: PPUSH
16870: LD_VAR 0 12
16874: PPUSH
16875: CALL_OW 12
16879: ARRAY
16880: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16881: LD_VAR 0 2
16885: PPUSH
16886: LD_VAR 0 5
16890: PPUSH
16891: CALL 17242 0 2
16895: NOT
16896: IFFALSE 16955
// repeat weapon := _weapon [ 1 ] ;
16898: LD_ADDR_VAR 0 5
16902: PUSH
16903: LD_VAR 0 10
16907: PUSH
16908: LD_INT 1
16910: ARRAY
16911: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16912: LD_ADDR_VAR 0 10
16916: PUSH
16917: LD_VAR 0 10
16921: PPUSH
16922: LD_INT 1
16924: PPUSH
16925: CALL_OW 3
16929: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16930: LD_VAR 0 2
16934: PPUSH
16935: LD_VAR 0 5
16939: PPUSH
16940: CALL 17242 0 2
16944: PUSH
16945: LD_VAR 0 10
16949: PUSH
16950: EMPTY
16951: EQUAL
16952: OR
16953: IFFALSE 16898
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16955: LD_VAR 0 1
16959: PPUSH
16960: LD_VAR 0 2
16964: PPUSH
16965: LD_VAR 0 3
16969: PPUSH
16970: LD_VAR 0 4
16974: PPUSH
16975: LD_VAR 0 5
16979: PPUSH
16980: CALL_OW 448
16984: IFFALSE 17017
// result := [ chassis , engine , control , weapon ] ;
16986: LD_ADDR_VAR 0 6
16990: PUSH
16991: LD_VAR 0 2
16995: PUSH
16996: LD_VAR 0 3
17000: PUSH
17001: LD_VAR 0 4
17005: PUSH
17006: LD_VAR 0 5
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: ST_TO_ADDR
// end ;
17017: LD_VAR 0 6
17021: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
17022: LD_INT 0
17024: PPUSH
// if not chassis or not engine then
17025: LD_VAR 0 1
17029: NOT
17030: PUSH
17031: LD_VAR 0 2
17035: NOT
17036: OR
17037: IFFALSE 17041
// exit ;
17039: GO 17237
// case engine of engine_solar :
17041: LD_VAR 0 2
17045: PUSH
17046: LD_INT 2
17048: DOUBLE
17049: EQUAL
17050: IFTRUE 17054
17052: GO 17092
17054: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
17055: LD_ADDR_VAR 0 3
17059: PUSH
17060: LD_INT 11
17062: PUSH
17063: LD_INT 12
17065: PUSH
17066: LD_INT 13
17068: PUSH
17069: LD_INT 14
17071: PUSH
17072: LD_INT 1
17074: PUSH
17075: LD_INT 2
17077: PUSH
17078: LD_INT 3
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: ST_TO_ADDR
17090: GO 17221
17092: LD_INT 1
17094: DOUBLE
17095: EQUAL
17096: IFTRUE 17100
17098: GO 17162
17100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
17101: LD_ADDR_VAR 0 3
17105: PUSH
17106: LD_INT 11
17108: PUSH
17109: LD_INT 12
17111: PUSH
17112: LD_INT 13
17114: PUSH
17115: LD_INT 14
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: LD_INT 2
17123: PUSH
17124: LD_INT 3
17126: PUSH
17127: LD_INT 4
17129: PUSH
17130: LD_INT 5
17132: PUSH
17133: LD_INT 21
17135: PUSH
17136: LD_INT 23
17138: PUSH
17139: LD_INT 22
17141: PUSH
17142: LD_INT 24
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: ST_TO_ADDR
17160: GO 17221
17162: LD_INT 3
17164: DOUBLE
17165: EQUAL
17166: IFTRUE 17170
17168: GO 17220
17170: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17171: LD_ADDR_VAR 0 3
17175: PUSH
17176: LD_INT 13
17178: PUSH
17179: LD_INT 14
17181: PUSH
17182: LD_INT 2
17184: PUSH
17185: LD_INT 3
17187: PUSH
17188: LD_INT 4
17190: PUSH
17191: LD_INT 5
17193: PUSH
17194: LD_INT 21
17196: PUSH
17197: LD_INT 22
17199: PUSH
17200: LD_INT 23
17202: PUSH
17203: LD_INT 24
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: ST_TO_ADDR
17218: GO 17221
17220: POP
// result := ( chassis in result ) ;
17221: LD_ADDR_VAR 0 3
17225: PUSH
17226: LD_VAR 0 1
17230: PUSH
17231: LD_VAR 0 3
17235: IN
17236: ST_TO_ADDR
// end ;
17237: LD_VAR 0 3
17241: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
17242: LD_INT 0
17244: PPUSH
// if not chassis or not weapon then
17245: LD_VAR 0 1
17249: NOT
17250: PUSH
17251: LD_VAR 0 2
17255: NOT
17256: OR
17257: IFFALSE 17261
// exit ;
17259: GO 18287
// case weapon of us_machine_gun :
17261: LD_VAR 0 2
17265: PUSH
17266: LD_INT 2
17268: DOUBLE
17269: EQUAL
17270: IFTRUE 17274
17272: GO 17304
17274: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
17275: LD_ADDR_VAR 0 3
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: LD_INT 2
17285: PUSH
17286: LD_INT 3
17288: PUSH
17289: LD_INT 4
17291: PUSH
17292: LD_INT 5
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: ST_TO_ADDR
17302: GO 18271
17304: LD_INT 3
17306: DOUBLE
17307: EQUAL
17308: IFTRUE 17312
17310: GO 17342
17312: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
17313: LD_ADDR_VAR 0 3
17317: PUSH
17318: LD_INT 1
17320: PUSH
17321: LD_INT 2
17323: PUSH
17324: LD_INT 3
17326: PUSH
17327: LD_INT 4
17329: PUSH
17330: LD_INT 5
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: ST_TO_ADDR
17340: GO 18271
17342: LD_INT 11
17344: DOUBLE
17345: EQUAL
17346: IFTRUE 17350
17348: GO 17380
17350: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
17351: LD_ADDR_VAR 0 3
17355: PUSH
17356: LD_INT 1
17358: PUSH
17359: LD_INT 2
17361: PUSH
17362: LD_INT 3
17364: PUSH
17365: LD_INT 4
17367: PUSH
17368: LD_INT 5
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: ST_TO_ADDR
17378: GO 18271
17380: LD_INT 4
17382: DOUBLE
17383: EQUAL
17384: IFTRUE 17388
17386: GO 17414
17388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
17389: LD_ADDR_VAR 0 3
17393: PUSH
17394: LD_INT 2
17396: PUSH
17397: LD_INT 3
17399: PUSH
17400: LD_INT 4
17402: PUSH
17403: LD_INT 5
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: ST_TO_ADDR
17412: GO 18271
17414: LD_INT 5
17416: DOUBLE
17417: EQUAL
17418: IFTRUE 17422
17420: GO 17448
17422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
17423: LD_ADDR_VAR 0 3
17427: PUSH
17428: LD_INT 2
17430: PUSH
17431: LD_INT 3
17433: PUSH
17434: LD_INT 4
17436: PUSH
17437: LD_INT 5
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: ST_TO_ADDR
17446: GO 18271
17448: LD_INT 9
17450: DOUBLE
17451: EQUAL
17452: IFTRUE 17456
17454: GO 17482
17456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
17457: LD_ADDR_VAR 0 3
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: LD_INT 3
17467: PUSH
17468: LD_INT 4
17470: PUSH
17471: LD_INT 5
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: ST_TO_ADDR
17480: GO 18271
17482: LD_INT 7
17484: DOUBLE
17485: EQUAL
17486: IFTRUE 17490
17488: GO 17516
17490: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
17491: LD_ADDR_VAR 0 3
17495: PUSH
17496: LD_INT 2
17498: PUSH
17499: LD_INT 3
17501: PUSH
17502: LD_INT 4
17504: PUSH
17505: LD_INT 5
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: ST_TO_ADDR
17514: GO 18271
17516: LD_INT 12
17518: DOUBLE
17519: EQUAL
17520: IFTRUE 17524
17522: GO 17550
17524: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17525: LD_ADDR_VAR 0 3
17529: PUSH
17530: LD_INT 2
17532: PUSH
17533: LD_INT 3
17535: PUSH
17536: LD_INT 4
17538: PUSH
17539: LD_INT 5
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: ST_TO_ADDR
17548: GO 18271
17550: LD_INT 13
17552: DOUBLE
17553: EQUAL
17554: IFTRUE 17558
17556: GO 17584
17558: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17559: LD_ADDR_VAR 0 3
17563: PUSH
17564: LD_INT 2
17566: PUSH
17567: LD_INT 3
17569: PUSH
17570: LD_INT 4
17572: PUSH
17573: LD_INT 5
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: ST_TO_ADDR
17582: GO 18271
17584: LD_INT 14
17586: DOUBLE
17587: EQUAL
17588: IFTRUE 17592
17590: GO 17610
17592: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17593: LD_ADDR_VAR 0 3
17597: PUSH
17598: LD_INT 4
17600: PUSH
17601: LD_INT 5
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: ST_TO_ADDR
17608: GO 18271
17610: LD_INT 6
17612: DOUBLE
17613: EQUAL
17614: IFTRUE 17618
17616: GO 17636
17618: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17619: LD_ADDR_VAR 0 3
17623: PUSH
17624: LD_INT 4
17626: PUSH
17627: LD_INT 5
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: ST_TO_ADDR
17634: GO 18271
17636: LD_INT 10
17638: DOUBLE
17639: EQUAL
17640: IFTRUE 17644
17642: GO 17662
17644: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17645: LD_ADDR_VAR 0 3
17649: PUSH
17650: LD_INT 4
17652: PUSH
17653: LD_INT 5
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: ST_TO_ADDR
17660: GO 18271
17662: LD_INT 22
17664: DOUBLE
17665: EQUAL
17666: IFTRUE 17670
17668: GO 17696
17670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17671: LD_ADDR_VAR 0 3
17675: PUSH
17676: LD_INT 11
17678: PUSH
17679: LD_INT 12
17681: PUSH
17682: LD_INT 13
17684: PUSH
17685: LD_INT 14
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: ST_TO_ADDR
17694: GO 18271
17696: LD_INT 23
17698: DOUBLE
17699: EQUAL
17700: IFTRUE 17704
17702: GO 17730
17704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17705: LD_ADDR_VAR 0 3
17709: PUSH
17710: LD_INT 11
17712: PUSH
17713: LD_INT 12
17715: PUSH
17716: LD_INT 13
17718: PUSH
17719: LD_INT 14
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: ST_TO_ADDR
17728: GO 18271
17730: LD_INT 24
17732: DOUBLE
17733: EQUAL
17734: IFTRUE 17738
17736: GO 17764
17738: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17739: LD_ADDR_VAR 0 3
17743: PUSH
17744: LD_INT 11
17746: PUSH
17747: LD_INT 12
17749: PUSH
17750: LD_INT 13
17752: PUSH
17753: LD_INT 14
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: ST_TO_ADDR
17762: GO 18271
17764: LD_INT 30
17766: DOUBLE
17767: EQUAL
17768: IFTRUE 17772
17770: GO 17798
17772: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17773: LD_ADDR_VAR 0 3
17777: PUSH
17778: LD_INT 11
17780: PUSH
17781: LD_INT 12
17783: PUSH
17784: LD_INT 13
17786: PUSH
17787: LD_INT 14
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: ST_TO_ADDR
17796: GO 18271
17798: LD_INT 25
17800: DOUBLE
17801: EQUAL
17802: IFTRUE 17806
17804: GO 17824
17806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17807: LD_ADDR_VAR 0 3
17811: PUSH
17812: LD_INT 13
17814: PUSH
17815: LD_INT 14
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: ST_TO_ADDR
17822: GO 18271
17824: LD_INT 27
17826: DOUBLE
17827: EQUAL
17828: IFTRUE 17832
17830: GO 17850
17832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17833: LD_ADDR_VAR 0 3
17837: PUSH
17838: LD_INT 13
17840: PUSH
17841: LD_INT 14
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: ST_TO_ADDR
17848: GO 18271
17850: LD_INT 28
17852: DOUBLE
17853: EQUAL
17854: IFTRUE 17858
17856: GO 17876
17858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17859: LD_ADDR_VAR 0 3
17863: PUSH
17864: LD_INT 13
17866: PUSH
17867: LD_INT 14
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: ST_TO_ADDR
17874: GO 18271
17876: LD_INT 29
17878: DOUBLE
17879: EQUAL
17880: IFTRUE 17884
17882: GO 17902
17884: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17885: LD_ADDR_VAR 0 3
17889: PUSH
17890: LD_INT 13
17892: PUSH
17893: LD_INT 14
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: ST_TO_ADDR
17900: GO 18271
17902: LD_INT 31
17904: DOUBLE
17905: EQUAL
17906: IFTRUE 17910
17908: GO 17928
17910: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17911: LD_ADDR_VAR 0 3
17915: PUSH
17916: LD_INT 13
17918: PUSH
17919: LD_INT 14
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: ST_TO_ADDR
17926: GO 18271
17928: LD_INT 26
17930: DOUBLE
17931: EQUAL
17932: IFTRUE 17936
17934: GO 17954
17936: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17937: LD_ADDR_VAR 0 3
17941: PUSH
17942: LD_INT 13
17944: PUSH
17945: LD_INT 14
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: ST_TO_ADDR
17952: GO 18271
17954: LD_INT 42
17956: DOUBLE
17957: EQUAL
17958: IFTRUE 17962
17960: GO 17988
17962: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17963: LD_ADDR_VAR 0 3
17967: PUSH
17968: LD_INT 21
17970: PUSH
17971: LD_INT 22
17973: PUSH
17974: LD_INT 23
17976: PUSH
17977: LD_INT 24
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: ST_TO_ADDR
17986: GO 18271
17988: LD_INT 43
17990: DOUBLE
17991: EQUAL
17992: IFTRUE 17996
17994: GO 18022
17996: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17997: LD_ADDR_VAR 0 3
18001: PUSH
18002: LD_INT 21
18004: PUSH
18005: LD_INT 22
18007: PUSH
18008: LD_INT 23
18010: PUSH
18011: LD_INT 24
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: ST_TO_ADDR
18020: GO 18271
18022: LD_INT 44
18024: DOUBLE
18025: EQUAL
18026: IFTRUE 18030
18028: GO 18056
18030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
18031: LD_ADDR_VAR 0 3
18035: PUSH
18036: LD_INT 21
18038: PUSH
18039: LD_INT 22
18041: PUSH
18042: LD_INT 23
18044: PUSH
18045: LD_INT 24
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: ST_TO_ADDR
18054: GO 18271
18056: LD_INT 45
18058: DOUBLE
18059: EQUAL
18060: IFTRUE 18064
18062: GO 18090
18064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
18065: LD_ADDR_VAR 0 3
18069: PUSH
18070: LD_INT 21
18072: PUSH
18073: LD_INT 22
18075: PUSH
18076: LD_INT 23
18078: PUSH
18079: LD_INT 24
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: ST_TO_ADDR
18088: GO 18271
18090: LD_INT 49
18092: DOUBLE
18093: EQUAL
18094: IFTRUE 18098
18096: GO 18124
18098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
18099: LD_ADDR_VAR 0 3
18103: PUSH
18104: LD_INT 21
18106: PUSH
18107: LD_INT 22
18109: PUSH
18110: LD_INT 23
18112: PUSH
18113: LD_INT 24
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: ST_TO_ADDR
18122: GO 18271
18124: LD_INT 51
18126: DOUBLE
18127: EQUAL
18128: IFTRUE 18132
18130: GO 18158
18132: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
18133: LD_ADDR_VAR 0 3
18137: PUSH
18138: LD_INT 21
18140: PUSH
18141: LD_INT 22
18143: PUSH
18144: LD_INT 23
18146: PUSH
18147: LD_INT 24
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: ST_TO_ADDR
18156: GO 18271
18158: LD_INT 52
18160: DOUBLE
18161: EQUAL
18162: IFTRUE 18166
18164: GO 18192
18166: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
18167: LD_ADDR_VAR 0 3
18171: PUSH
18172: LD_INT 21
18174: PUSH
18175: LD_INT 22
18177: PUSH
18178: LD_INT 23
18180: PUSH
18181: LD_INT 24
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: ST_TO_ADDR
18190: GO 18271
18192: LD_INT 53
18194: DOUBLE
18195: EQUAL
18196: IFTRUE 18200
18198: GO 18218
18200: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
18201: LD_ADDR_VAR 0 3
18205: PUSH
18206: LD_INT 23
18208: PUSH
18209: LD_INT 24
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: ST_TO_ADDR
18216: GO 18271
18218: LD_INT 46
18220: DOUBLE
18221: EQUAL
18222: IFTRUE 18226
18224: GO 18244
18226: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
18227: LD_ADDR_VAR 0 3
18231: PUSH
18232: LD_INT 23
18234: PUSH
18235: LD_INT 24
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: ST_TO_ADDR
18242: GO 18271
18244: LD_INT 47
18246: DOUBLE
18247: EQUAL
18248: IFTRUE 18252
18250: GO 18270
18252: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18253: LD_ADDR_VAR 0 3
18257: PUSH
18258: LD_INT 23
18260: PUSH
18261: LD_INT 24
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: ST_TO_ADDR
18268: GO 18271
18270: POP
// result := ( chassis in result ) ;
18271: LD_ADDR_VAR 0 3
18275: PUSH
18276: LD_VAR 0 1
18280: PUSH
18281: LD_VAR 0 3
18285: IN
18286: ST_TO_ADDR
// end ;
18287: LD_VAR 0 3
18291: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
18292: LD_INT 0
18294: PPUSH
18295: PPUSH
18296: PPUSH
18297: PPUSH
18298: PPUSH
18299: PPUSH
18300: PPUSH
// result := array ;
18301: LD_ADDR_VAR 0 5
18305: PUSH
18306: LD_VAR 0 1
18310: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
18311: LD_VAR 0 1
18315: NOT
18316: PUSH
18317: LD_VAR 0 2
18321: NOT
18322: OR
18323: PUSH
18324: LD_VAR 0 3
18328: NOT
18329: OR
18330: PUSH
18331: LD_VAR 0 2
18335: PUSH
18336: LD_VAR 0 1
18340: GREATER
18341: OR
18342: PUSH
18343: LD_VAR 0 3
18347: PUSH
18348: LD_VAR 0 1
18352: GREATER
18353: OR
18354: IFFALSE 18358
// exit ;
18356: GO 18654
// if direction then
18358: LD_VAR 0 4
18362: IFFALSE 18426
// begin d := 1 ;
18364: LD_ADDR_VAR 0 9
18368: PUSH
18369: LD_INT 1
18371: ST_TO_ADDR
// if i_from > i_to then
18372: LD_VAR 0 2
18376: PUSH
18377: LD_VAR 0 3
18381: GREATER
18382: IFFALSE 18408
// length := ( array - i_from ) + i_to else
18384: LD_ADDR_VAR 0 11
18388: PUSH
18389: LD_VAR 0 1
18393: PUSH
18394: LD_VAR 0 2
18398: MINUS
18399: PUSH
18400: LD_VAR 0 3
18404: PLUS
18405: ST_TO_ADDR
18406: GO 18424
// length := i_to - i_from ;
18408: LD_ADDR_VAR 0 11
18412: PUSH
18413: LD_VAR 0 3
18417: PUSH
18418: LD_VAR 0 2
18422: MINUS
18423: ST_TO_ADDR
// end else
18424: GO 18487
// begin d := - 1 ;
18426: LD_ADDR_VAR 0 9
18430: PUSH
18431: LD_INT 1
18433: NEG
18434: ST_TO_ADDR
// if i_from > i_to then
18435: LD_VAR 0 2
18439: PUSH
18440: LD_VAR 0 3
18444: GREATER
18445: IFFALSE 18465
// length := i_from - i_to else
18447: LD_ADDR_VAR 0 11
18451: PUSH
18452: LD_VAR 0 2
18456: PUSH
18457: LD_VAR 0 3
18461: MINUS
18462: ST_TO_ADDR
18463: GO 18487
// length := ( array - i_to ) + i_from ;
18465: LD_ADDR_VAR 0 11
18469: PUSH
18470: LD_VAR 0 1
18474: PUSH
18475: LD_VAR 0 3
18479: MINUS
18480: PUSH
18481: LD_VAR 0 2
18485: PLUS
18486: ST_TO_ADDR
// end ; if not length then
18487: LD_VAR 0 11
18491: NOT
18492: IFFALSE 18496
// exit ;
18494: GO 18654
// tmp := array ;
18496: LD_ADDR_VAR 0 10
18500: PUSH
18501: LD_VAR 0 1
18505: ST_TO_ADDR
// for i = 1 to length do
18506: LD_ADDR_VAR 0 6
18510: PUSH
18511: DOUBLE
18512: LD_INT 1
18514: DEC
18515: ST_TO_ADDR
18516: LD_VAR 0 11
18520: PUSH
18521: FOR_TO
18522: IFFALSE 18642
// begin for j = 1 to array do
18524: LD_ADDR_VAR 0 7
18528: PUSH
18529: DOUBLE
18530: LD_INT 1
18532: DEC
18533: ST_TO_ADDR
18534: LD_VAR 0 1
18538: PUSH
18539: FOR_TO
18540: IFFALSE 18628
// begin k := j + d ;
18542: LD_ADDR_VAR 0 8
18546: PUSH
18547: LD_VAR 0 7
18551: PUSH
18552: LD_VAR 0 9
18556: PLUS
18557: ST_TO_ADDR
// if k > array then
18558: LD_VAR 0 8
18562: PUSH
18563: LD_VAR 0 1
18567: GREATER
18568: IFFALSE 18578
// k := 1 ;
18570: LD_ADDR_VAR 0 8
18574: PUSH
18575: LD_INT 1
18577: ST_TO_ADDR
// if not k then
18578: LD_VAR 0 8
18582: NOT
18583: IFFALSE 18595
// k := array ;
18585: LD_ADDR_VAR 0 8
18589: PUSH
18590: LD_VAR 0 1
18594: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18595: LD_ADDR_VAR 0 10
18599: PUSH
18600: LD_VAR 0 10
18604: PPUSH
18605: LD_VAR 0 8
18609: PPUSH
18610: LD_VAR 0 1
18614: PUSH
18615: LD_VAR 0 7
18619: ARRAY
18620: PPUSH
18621: CALL_OW 1
18625: ST_TO_ADDR
// end ;
18626: GO 18539
18628: POP
18629: POP
// array := tmp ;
18630: LD_ADDR_VAR 0 1
18634: PUSH
18635: LD_VAR 0 10
18639: ST_TO_ADDR
// end ;
18640: GO 18521
18642: POP
18643: POP
// result := array ;
18644: LD_ADDR_VAR 0 5
18648: PUSH
18649: LD_VAR 0 1
18653: ST_TO_ADDR
// end ;
18654: LD_VAR 0 5
18658: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18659: LD_INT 0
18661: PPUSH
18662: PPUSH
// result := 0 ;
18663: LD_ADDR_VAR 0 3
18667: PUSH
18668: LD_INT 0
18670: ST_TO_ADDR
// if not array or not value in array then
18671: LD_VAR 0 1
18675: NOT
18676: PUSH
18677: LD_VAR 0 2
18681: PUSH
18682: LD_VAR 0 1
18686: IN
18687: NOT
18688: OR
18689: IFFALSE 18693
// exit ;
18691: GO 18747
// for i = 1 to array do
18693: LD_ADDR_VAR 0 4
18697: PUSH
18698: DOUBLE
18699: LD_INT 1
18701: DEC
18702: ST_TO_ADDR
18703: LD_VAR 0 1
18707: PUSH
18708: FOR_TO
18709: IFFALSE 18745
// if value = array [ i ] then
18711: LD_VAR 0 2
18715: PUSH
18716: LD_VAR 0 1
18720: PUSH
18721: LD_VAR 0 4
18725: ARRAY
18726: EQUAL
18727: IFFALSE 18743
// begin result := i ;
18729: LD_ADDR_VAR 0 3
18733: PUSH
18734: LD_VAR 0 4
18738: ST_TO_ADDR
// exit ;
18739: POP
18740: POP
18741: GO 18747
// end ;
18743: GO 18708
18745: POP
18746: POP
// end ;
18747: LD_VAR 0 3
18751: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18752: LD_INT 0
18754: PPUSH
// vc_chassis := chassis ;
18755: LD_ADDR_OWVAR 37
18759: PUSH
18760: LD_VAR 0 1
18764: ST_TO_ADDR
// vc_engine := engine ;
18765: LD_ADDR_OWVAR 39
18769: PUSH
18770: LD_VAR 0 2
18774: ST_TO_ADDR
// vc_control := control ;
18775: LD_ADDR_OWVAR 38
18779: PUSH
18780: LD_VAR 0 3
18784: ST_TO_ADDR
// vc_weapon := weapon ;
18785: LD_ADDR_OWVAR 40
18789: PUSH
18790: LD_VAR 0 4
18794: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18795: LD_ADDR_OWVAR 41
18799: PUSH
18800: LD_VAR 0 5
18804: ST_TO_ADDR
// end ;
18805: LD_VAR 0 6
18809: RET
// export function WantPlant ( unit ) ; var task ; begin
18810: LD_INT 0
18812: PPUSH
18813: PPUSH
// result := false ;
18814: LD_ADDR_VAR 0 2
18818: PUSH
18819: LD_INT 0
18821: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18822: LD_ADDR_VAR 0 3
18826: PUSH
18827: LD_VAR 0 1
18831: PPUSH
18832: CALL_OW 437
18836: ST_TO_ADDR
// if task then
18837: LD_VAR 0 3
18841: IFFALSE 18869
// if task [ 1 ] [ 1 ] = p then
18843: LD_VAR 0 3
18847: PUSH
18848: LD_INT 1
18850: ARRAY
18851: PUSH
18852: LD_INT 1
18854: ARRAY
18855: PUSH
18856: LD_STRING p
18858: EQUAL
18859: IFFALSE 18869
// result := true ;
18861: LD_ADDR_VAR 0 2
18865: PUSH
18866: LD_INT 1
18868: ST_TO_ADDR
// end ;
18869: LD_VAR 0 2
18873: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18874: LD_INT 0
18876: PPUSH
18877: PPUSH
18878: PPUSH
18879: PPUSH
// if pos < 1 then
18880: LD_VAR 0 2
18884: PUSH
18885: LD_INT 1
18887: LESS
18888: IFFALSE 18892
// exit ;
18890: GO 19195
// if pos = 1 then
18892: LD_VAR 0 2
18896: PUSH
18897: LD_INT 1
18899: EQUAL
18900: IFFALSE 18933
// result := Replace ( arr , pos [ 1 ] , value ) else
18902: LD_ADDR_VAR 0 4
18906: PUSH
18907: LD_VAR 0 1
18911: PPUSH
18912: LD_VAR 0 2
18916: PUSH
18917: LD_INT 1
18919: ARRAY
18920: PPUSH
18921: LD_VAR 0 3
18925: PPUSH
18926: CALL_OW 1
18930: ST_TO_ADDR
18931: GO 19195
// begin tmp := arr ;
18933: LD_ADDR_VAR 0 6
18937: PUSH
18938: LD_VAR 0 1
18942: ST_TO_ADDR
// s_arr := [ tmp ] ;
18943: LD_ADDR_VAR 0 7
18947: PUSH
18948: LD_VAR 0 6
18952: PUSH
18953: EMPTY
18954: LIST
18955: ST_TO_ADDR
// for i = 1 to pos - 1 do
18956: LD_ADDR_VAR 0 5
18960: PUSH
18961: DOUBLE
18962: LD_INT 1
18964: DEC
18965: ST_TO_ADDR
18966: LD_VAR 0 2
18970: PUSH
18971: LD_INT 1
18973: MINUS
18974: PUSH
18975: FOR_TO
18976: IFFALSE 19021
// begin tmp := tmp [ pos [ i ] ] ;
18978: LD_ADDR_VAR 0 6
18982: PUSH
18983: LD_VAR 0 6
18987: PUSH
18988: LD_VAR 0 2
18992: PUSH
18993: LD_VAR 0 5
18997: ARRAY
18998: ARRAY
18999: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
19000: LD_ADDR_VAR 0 7
19004: PUSH
19005: LD_VAR 0 7
19009: PUSH
19010: LD_VAR 0 6
19014: PUSH
19015: EMPTY
19016: LIST
19017: ADD
19018: ST_TO_ADDR
// end ;
19019: GO 18975
19021: POP
19022: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
19023: LD_ADDR_VAR 0 6
19027: PUSH
19028: LD_VAR 0 6
19032: PPUSH
19033: LD_VAR 0 2
19037: PUSH
19038: LD_VAR 0 2
19042: ARRAY
19043: PPUSH
19044: LD_VAR 0 3
19048: PPUSH
19049: CALL_OW 1
19053: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
19054: LD_ADDR_VAR 0 7
19058: PUSH
19059: LD_VAR 0 7
19063: PPUSH
19064: LD_VAR 0 7
19068: PPUSH
19069: LD_VAR 0 6
19073: PPUSH
19074: CALL_OW 1
19078: ST_TO_ADDR
// for i = s_arr downto 2 do
19079: LD_ADDR_VAR 0 5
19083: PUSH
19084: DOUBLE
19085: LD_VAR 0 7
19089: INC
19090: ST_TO_ADDR
19091: LD_INT 2
19093: PUSH
19094: FOR_DOWNTO
19095: IFFALSE 19179
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
19097: LD_ADDR_VAR 0 6
19101: PUSH
19102: LD_VAR 0 7
19106: PUSH
19107: LD_VAR 0 5
19111: PUSH
19112: LD_INT 1
19114: MINUS
19115: ARRAY
19116: PPUSH
19117: LD_VAR 0 2
19121: PUSH
19122: LD_VAR 0 5
19126: PUSH
19127: LD_INT 1
19129: MINUS
19130: ARRAY
19131: PPUSH
19132: LD_VAR 0 7
19136: PUSH
19137: LD_VAR 0 5
19141: ARRAY
19142: PPUSH
19143: CALL_OW 1
19147: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
19148: LD_ADDR_VAR 0 7
19152: PUSH
19153: LD_VAR 0 7
19157: PPUSH
19158: LD_VAR 0 5
19162: PUSH
19163: LD_INT 1
19165: MINUS
19166: PPUSH
19167: LD_VAR 0 6
19171: PPUSH
19172: CALL_OW 1
19176: ST_TO_ADDR
// end ;
19177: GO 19094
19179: POP
19180: POP
// result := s_arr [ 1 ] ;
19181: LD_ADDR_VAR 0 4
19185: PUSH
19186: LD_VAR 0 7
19190: PUSH
19191: LD_INT 1
19193: ARRAY
19194: ST_TO_ADDR
// end ; end ;
19195: LD_VAR 0 4
19199: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
19200: LD_INT 0
19202: PPUSH
19203: PPUSH
// if not list then
19204: LD_VAR 0 1
19208: NOT
19209: IFFALSE 19213
// exit ;
19211: GO 19304
// i := list [ pos1 ] ;
19213: LD_ADDR_VAR 0 5
19217: PUSH
19218: LD_VAR 0 1
19222: PUSH
19223: LD_VAR 0 2
19227: ARRAY
19228: ST_TO_ADDR
// if not i then
19229: LD_VAR 0 5
19233: NOT
19234: IFFALSE 19238
// exit ;
19236: GO 19304
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
19238: LD_ADDR_VAR 0 1
19242: PUSH
19243: LD_VAR 0 1
19247: PPUSH
19248: LD_VAR 0 2
19252: PPUSH
19253: LD_VAR 0 1
19257: PUSH
19258: LD_VAR 0 3
19262: ARRAY
19263: PPUSH
19264: CALL_OW 1
19268: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
19269: LD_ADDR_VAR 0 1
19273: PUSH
19274: LD_VAR 0 1
19278: PPUSH
19279: LD_VAR 0 3
19283: PPUSH
19284: LD_VAR 0 5
19288: PPUSH
19289: CALL_OW 1
19293: ST_TO_ADDR
// result := list ;
19294: LD_ADDR_VAR 0 4
19298: PUSH
19299: LD_VAR 0 1
19303: ST_TO_ADDR
// end ;
19304: LD_VAR 0 4
19308: RET
// export function Add ( list , pos , val ) ; begin
19309: LD_INT 0
19311: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
19312: LD_ADDR_VAR 0 4
19316: PUSH
19317: LD_VAR 0 1
19321: PPUSH
19322: LD_VAR 0 2
19326: PPUSH
19327: LD_VAR 0 3
19331: PPUSH
19332: CALL 18874 0 3
19336: ST_TO_ADDR
19337: LD_VAR 0 4
19341: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
19342: LD_INT 0
19344: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
19345: LD_ADDR_VAR 0 5
19349: PUSH
19350: LD_VAR 0 1
19354: PPUSH
19355: CALL_OW 250
19359: PPUSH
19360: LD_VAR 0 1
19364: PPUSH
19365: CALL_OW 251
19369: PPUSH
19370: LD_VAR 0 2
19374: PPUSH
19375: LD_VAR 0 3
19379: PPUSH
19380: LD_VAR 0 4
19384: PPUSH
19385: CALL 19395 0 5
19389: ST_TO_ADDR
// end ;
19390: LD_VAR 0 5
19394: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
19395: LD_INT 0
19397: PPUSH
19398: PPUSH
19399: PPUSH
19400: PPUSH
// if not list then
19401: LD_VAR 0 3
19405: NOT
19406: IFFALSE 19410
// exit ;
19408: GO 19798
// result := [ ] ;
19410: LD_ADDR_VAR 0 6
19414: PUSH
19415: EMPTY
19416: ST_TO_ADDR
// for i in list do
19417: LD_ADDR_VAR 0 7
19421: PUSH
19422: LD_VAR 0 3
19426: PUSH
19427: FOR_IN
19428: IFFALSE 19630
// begin tmp := GetDistUnitXY ( i , x , y ) ;
19430: LD_ADDR_VAR 0 9
19434: PUSH
19435: LD_VAR 0 7
19439: PPUSH
19440: LD_VAR 0 1
19444: PPUSH
19445: LD_VAR 0 2
19449: PPUSH
19450: CALL_OW 297
19454: ST_TO_ADDR
// if not result then
19455: LD_VAR 0 6
19459: NOT
19460: IFFALSE 19486
// result := [ [ i , tmp ] ] else
19462: LD_ADDR_VAR 0 6
19466: PUSH
19467: LD_VAR 0 7
19471: PUSH
19472: LD_VAR 0 9
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: EMPTY
19482: LIST
19483: ST_TO_ADDR
19484: GO 19628
// begin if result [ result ] [ 2 ] < tmp then
19486: LD_VAR 0 6
19490: PUSH
19491: LD_VAR 0 6
19495: ARRAY
19496: PUSH
19497: LD_INT 2
19499: ARRAY
19500: PUSH
19501: LD_VAR 0 9
19505: LESS
19506: IFFALSE 19548
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
19508: LD_ADDR_VAR 0 6
19512: PUSH
19513: LD_VAR 0 6
19517: PPUSH
19518: LD_VAR 0 6
19522: PUSH
19523: LD_INT 1
19525: PLUS
19526: PPUSH
19527: LD_VAR 0 7
19531: PUSH
19532: LD_VAR 0 9
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PPUSH
19541: CALL_OW 2
19545: ST_TO_ADDR
19546: GO 19628
// for j = 1 to result do
19548: LD_ADDR_VAR 0 8
19552: PUSH
19553: DOUBLE
19554: LD_INT 1
19556: DEC
19557: ST_TO_ADDR
19558: LD_VAR 0 6
19562: PUSH
19563: FOR_TO
19564: IFFALSE 19626
// begin if tmp < result [ j ] [ 2 ] then
19566: LD_VAR 0 9
19570: PUSH
19571: LD_VAR 0 6
19575: PUSH
19576: LD_VAR 0 8
19580: ARRAY
19581: PUSH
19582: LD_INT 2
19584: ARRAY
19585: LESS
19586: IFFALSE 19624
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19588: LD_ADDR_VAR 0 6
19592: PUSH
19593: LD_VAR 0 6
19597: PPUSH
19598: LD_VAR 0 8
19602: PPUSH
19603: LD_VAR 0 7
19607: PUSH
19608: LD_VAR 0 9
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PPUSH
19617: CALL_OW 2
19621: ST_TO_ADDR
// break ;
19622: GO 19626
// end ; end ;
19624: GO 19563
19626: POP
19627: POP
// end ; end ;
19628: GO 19427
19630: POP
19631: POP
// if result and not asc then
19632: LD_VAR 0 6
19636: PUSH
19637: LD_VAR 0 4
19641: NOT
19642: AND
19643: IFFALSE 19718
// begin tmp := result ;
19645: LD_ADDR_VAR 0 9
19649: PUSH
19650: LD_VAR 0 6
19654: ST_TO_ADDR
// for i = tmp downto 1 do
19655: LD_ADDR_VAR 0 7
19659: PUSH
19660: DOUBLE
19661: LD_VAR 0 9
19665: INC
19666: ST_TO_ADDR
19667: LD_INT 1
19669: PUSH
19670: FOR_DOWNTO
19671: IFFALSE 19716
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19673: LD_ADDR_VAR 0 6
19677: PUSH
19678: LD_VAR 0 6
19682: PPUSH
19683: LD_VAR 0 9
19687: PUSH
19688: LD_VAR 0 7
19692: MINUS
19693: PUSH
19694: LD_INT 1
19696: PLUS
19697: PPUSH
19698: LD_VAR 0 9
19702: PUSH
19703: LD_VAR 0 7
19707: ARRAY
19708: PPUSH
19709: CALL_OW 1
19713: ST_TO_ADDR
19714: GO 19670
19716: POP
19717: POP
// end ; tmp := [ ] ;
19718: LD_ADDR_VAR 0 9
19722: PUSH
19723: EMPTY
19724: ST_TO_ADDR
// if mode then
19725: LD_VAR 0 5
19729: IFFALSE 19798
// begin for i = 1 to result do
19731: LD_ADDR_VAR 0 7
19735: PUSH
19736: DOUBLE
19737: LD_INT 1
19739: DEC
19740: ST_TO_ADDR
19741: LD_VAR 0 6
19745: PUSH
19746: FOR_TO
19747: IFFALSE 19786
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19749: LD_ADDR_VAR 0 9
19753: PUSH
19754: LD_VAR 0 9
19758: PPUSH
19759: LD_VAR 0 7
19763: PPUSH
19764: LD_VAR 0 6
19768: PUSH
19769: LD_VAR 0 7
19773: ARRAY
19774: PUSH
19775: LD_INT 1
19777: ARRAY
19778: PPUSH
19779: CALL_OW 1
19783: ST_TO_ADDR
19784: GO 19746
19786: POP
19787: POP
// result := tmp ;
19788: LD_ADDR_VAR 0 6
19792: PUSH
19793: LD_VAR 0 9
19797: ST_TO_ADDR
// end ; end ;
19798: LD_VAR 0 6
19802: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19803: LD_INT 0
19805: PPUSH
19806: PPUSH
19807: PPUSH
19808: PPUSH
19809: PPUSH
19810: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19811: LD_ADDR_VAR 0 5
19815: PUSH
19816: LD_INT 0
19818: PUSH
19819: LD_INT 0
19821: PUSH
19822: LD_INT 0
19824: PUSH
19825: EMPTY
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: ST_TO_ADDR
// if not x or not y then
19833: LD_VAR 0 2
19837: NOT
19838: PUSH
19839: LD_VAR 0 3
19843: NOT
19844: OR
19845: IFFALSE 19849
// exit ;
19847: GO 21495
// if not range then
19849: LD_VAR 0 4
19853: NOT
19854: IFFALSE 19864
// range := 10 ;
19856: LD_ADDR_VAR 0 4
19860: PUSH
19861: LD_INT 10
19863: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19864: LD_ADDR_VAR 0 8
19868: PUSH
19869: LD_INT 81
19871: PUSH
19872: LD_VAR 0 1
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 92
19883: PUSH
19884: LD_VAR 0 2
19888: PUSH
19889: LD_VAR 0 3
19893: PUSH
19894: LD_VAR 0 4
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 3
19907: PUSH
19908: LD_INT 21
19910: PUSH
19911: LD_INT 3
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: LIST
19926: PPUSH
19927: CALL_OW 69
19931: ST_TO_ADDR
// if not tmp then
19932: LD_VAR 0 8
19936: NOT
19937: IFFALSE 19941
// exit ;
19939: GO 21495
// for i in tmp do
19941: LD_ADDR_VAR 0 6
19945: PUSH
19946: LD_VAR 0 8
19950: PUSH
19951: FOR_IN
19952: IFFALSE 21470
// begin points := [ 0 , 0 , 0 ] ;
19954: LD_ADDR_VAR 0 9
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: LD_INT 0
19964: PUSH
19965: LD_INT 0
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: ST_TO_ADDR
// bpoints := 1 ;
19973: LD_ADDR_VAR 0 10
19977: PUSH
19978: LD_INT 1
19980: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19981: LD_VAR 0 6
19985: PPUSH
19986: CALL_OW 247
19990: PUSH
19991: LD_INT 1
19993: DOUBLE
19994: EQUAL
19995: IFTRUE 19999
19997: GO 20577
19999: POP
// begin if GetClass ( i ) = 1 then
20000: LD_VAR 0 6
20004: PPUSH
20005: CALL_OW 257
20009: PUSH
20010: LD_INT 1
20012: EQUAL
20013: IFFALSE 20034
// points := [ 10 , 5 , 3 ] ;
20015: LD_ADDR_VAR 0 9
20019: PUSH
20020: LD_INT 10
20022: PUSH
20023: LD_INT 5
20025: PUSH
20026: LD_INT 3
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: LIST
20033: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
20034: LD_VAR 0 6
20038: PPUSH
20039: CALL_OW 257
20043: PUSH
20044: LD_INT 2
20046: PUSH
20047: LD_INT 3
20049: PUSH
20050: LD_INT 4
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: LIST
20057: IN
20058: IFFALSE 20079
// points := [ 3 , 2 , 1 ] ;
20060: LD_ADDR_VAR 0 9
20064: PUSH
20065: LD_INT 3
20067: PUSH
20068: LD_INT 2
20070: PUSH
20071: LD_INT 1
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: LIST
20078: ST_TO_ADDR
// if GetClass ( i ) = 5 then
20079: LD_VAR 0 6
20083: PPUSH
20084: CALL_OW 257
20088: PUSH
20089: LD_INT 5
20091: EQUAL
20092: IFFALSE 20113
// points := [ 130 , 5 , 2 ] ;
20094: LD_ADDR_VAR 0 9
20098: PUSH
20099: LD_INT 130
20101: PUSH
20102: LD_INT 5
20104: PUSH
20105: LD_INT 2
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: LIST
20112: ST_TO_ADDR
// if GetClass ( i ) = 8 then
20113: LD_VAR 0 6
20117: PPUSH
20118: CALL_OW 257
20122: PUSH
20123: LD_INT 8
20125: EQUAL
20126: IFFALSE 20147
// points := [ 35 , 35 , 30 ] ;
20128: LD_ADDR_VAR 0 9
20132: PUSH
20133: LD_INT 35
20135: PUSH
20136: LD_INT 35
20138: PUSH
20139: LD_INT 30
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: ST_TO_ADDR
// if GetClass ( i ) = 9 then
20147: LD_VAR 0 6
20151: PPUSH
20152: CALL_OW 257
20156: PUSH
20157: LD_INT 9
20159: EQUAL
20160: IFFALSE 20181
// points := [ 20 , 55 , 40 ] ;
20162: LD_ADDR_VAR 0 9
20166: PUSH
20167: LD_INT 20
20169: PUSH
20170: LD_INT 55
20172: PUSH
20173: LD_INT 40
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: LIST
20180: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
20181: LD_VAR 0 6
20185: PPUSH
20186: CALL_OW 257
20190: PUSH
20191: LD_INT 12
20193: PUSH
20194: LD_INT 16
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: IN
20201: IFFALSE 20222
// points := [ 5 , 3 , 2 ] ;
20203: LD_ADDR_VAR 0 9
20207: PUSH
20208: LD_INT 5
20210: PUSH
20211: LD_INT 3
20213: PUSH
20214: LD_INT 2
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: LIST
20221: ST_TO_ADDR
// if GetClass ( i ) = 17 then
20222: LD_VAR 0 6
20226: PPUSH
20227: CALL_OW 257
20231: PUSH
20232: LD_INT 17
20234: EQUAL
20235: IFFALSE 20256
// points := [ 100 , 50 , 75 ] ;
20237: LD_ADDR_VAR 0 9
20241: PUSH
20242: LD_INT 100
20244: PUSH
20245: LD_INT 50
20247: PUSH
20248: LD_INT 75
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: LIST
20255: ST_TO_ADDR
// if GetClass ( i ) = 15 then
20256: LD_VAR 0 6
20260: PPUSH
20261: CALL_OW 257
20265: PUSH
20266: LD_INT 15
20268: EQUAL
20269: IFFALSE 20290
// points := [ 10 , 5 , 3 ] ;
20271: LD_ADDR_VAR 0 9
20275: PUSH
20276: LD_INT 10
20278: PUSH
20279: LD_INT 5
20281: PUSH
20282: LD_INT 3
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: LIST
20289: ST_TO_ADDR
// if GetClass ( i ) = 14 then
20290: LD_VAR 0 6
20294: PPUSH
20295: CALL_OW 257
20299: PUSH
20300: LD_INT 14
20302: EQUAL
20303: IFFALSE 20324
// points := [ 10 , 0 , 0 ] ;
20305: LD_ADDR_VAR 0 9
20309: PUSH
20310: LD_INT 10
20312: PUSH
20313: LD_INT 0
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: ST_TO_ADDR
// if GetClass ( i ) = 11 then
20324: LD_VAR 0 6
20328: PPUSH
20329: CALL_OW 257
20333: PUSH
20334: LD_INT 11
20336: EQUAL
20337: IFFALSE 20358
// points := [ 30 , 10 , 5 ] ;
20339: LD_ADDR_VAR 0 9
20343: PUSH
20344: LD_INT 30
20346: PUSH
20347: LD_INT 10
20349: PUSH
20350: LD_INT 5
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: LIST
20357: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
20358: LD_VAR 0 1
20362: PPUSH
20363: LD_INT 5
20365: PPUSH
20366: CALL_OW 321
20370: PUSH
20371: LD_INT 2
20373: EQUAL
20374: IFFALSE 20391
// bpoints := bpoints * 1.8 ;
20376: LD_ADDR_VAR 0 10
20380: PUSH
20381: LD_VAR 0 10
20385: PUSH
20386: LD_REAL  1.80000000000000E+0000
20389: MUL
20390: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
20391: LD_VAR 0 6
20395: PPUSH
20396: CALL_OW 257
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: LD_INT 2
20406: PUSH
20407: LD_INT 3
20409: PUSH
20410: LD_INT 4
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: IN
20419: PUSH
20420: LD_VAR 0 1
20424: PPUSH
20425: LD_INT 51
20427: PPUSH
20428: CALL_OW 321
20432: PUSH
20433: LD_INT 2
20435: EQUAL
20436: AND
20437: IFFALSE 20454
// bpoints := bpoints * 1.2 ;
20439: LD_ADDR_VAR 0 10
20443: PUSH
20444: LD_VAR 0 10
20448: PUSH
20449: LD_REAL  1.20000000000000E+0000
20452: MUL
20453: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
20454: LD_VAR 0 6
20458: PPUSH
20459: CALL_OW 257
20463: PUSH
20464: LD_INT 5
20466: PUSH
20467: LD_INT 7
20469: PUSH
20470: LD_INT 9
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: LIST
20477: IN
20478: PUSH
20479: LD_VAR 0 1
20483: PPUSH
20484: LD_INT 52
20486: PPUSH
20487: CALL_OW 321
20491: PUSH
20492: LD_INT 2
20494: EQUAL
20495: AND
20496: IFFALSE 20513
// bpoints := bpoints * 1.5 ;
20498: LD_ADDR_VAR 0 10
20502: PUSH
20503: LD_VAR 0 10
20507: PUSH
20508: LD_REAL  1.50000000000000E+0000
20511: MUL
20512: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
20513: LD_VAR 0 1
20517: PPUSH
20518: LD_INT 66
20520: PPUSH
20521: CALL_OW 321
20525: PUSH
20526: LD_INT 2
20528: EQUAL
20529: IFFALSE 20546
// bpoints := bpoints * 1.1 ;
20531: LD_ADDR_VAR 0 10
20535: PUSH
20536: LD_VAR 0 10
20540: PUSH
20541: LD_REAL  1.10000000000000E+0000
20544: MUL
20545: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20546: LD_ADDR_VAR 0 10
20550: PUSH
20551: LD_VAR 0 10
20555: PUSH
20556: LD_VAR 0 6
20560: PPUSH
20561: LD_INT 1
20563: PPUSH
20564: CALL_OW 259
20568: PUSH
20569: LD_REAL  1.15000000000000E+0000
20572: MUL
20573: MUL
20574: ST_TO_ADDR
// end ; unit_vehicle :
20575: GO 21399
20577: LD_INT 2
20579: DOUBLE
20580: EQUAL
20581: IFTRUE 20585
20583: GO 21387
20585: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20586: LD_VAR 0 6
20590: PPUSH
20591: CALL_OW 264
20595: PUSH
20596: LD_INT 2
20598: PUSH
20599: LD_INT 42
20601: PUSH
20602: LD_INT 24
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: LIST
20609: IN
20610: IFFALSE 20631
// points := [ 25 , 5 , 3 ] ;
20612: LD_ADDR_VAR 0 9
20616: PUSH
20617: LD_INT 25
20619: PUSH
20620: LD_INT 5
20622: PUSH
20623: LD_INT 3
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: LIST
20630: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20631: LD_VAR 0 6
20635: PPUSH
20636: CALL_OW 264
20640: PUSH
20641: LD_INT 4
20643: PUSH
20644: LD_INT 43
20646: PUSH
20647: LD_INT 25
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: LIST
20654: IN
20655: IFFALSE 20676
// points := [ 40 , 15 , 5 ] ;
20657: LD_ADDR_VAR 0 9
20661: PUSH
20662: LD_INT 40
20664: PUSH
20665: LD_INT 15
20667: PUSH
20668: LD_INT 5
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: LIST
20675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20676: LD_VAR 0 6
20680: PPUSH
20681: CALL_OW 264
20685: PUSH
20686: LD_INT 3
20688: PUSH
20689: LD_INT 23
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: IN
20696: IFFALSE 20717
// points := [ 7 , 25 , 8 ] ;
20698: LD_ADDR_VAR 0 9
20702: PUSH
20703: LD_INT 7
20705: PUSH
20706: LD_INT 25
20708: PUSH
20709: LD_INT 8
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: LIST
20716: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20717: LD_VAR 0 6
20721: PPUSH
20722: CALL_OW 264
20726: PUSH
20727: LD_INT 5
20729: PUSH
20730: LD_INT 27
20732: PUSH
20733: LD_INT 44
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: LIST
20740: IN
20741: IFFALSE 20762
// points := [ 14 , 50 , 16 ] ;
20743: LD_ADDR_VAR 0 9
20747: PUSH
20748: LD_INT 14
20750: PUSH
20751: LD_INT 50
20753: PUSH
20754: LD_INT 16
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: LIST
20761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20762: LD_VAR 0 6
20766: PPUSH
20767: CALL_OW 264
20771: PUSH
20772: LD_INT 6
20774: PUSH
20775: LD_INT 46
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: IN
20782: IFFALSE 20803
// points := [ 32 , 120 , 70 ] ;
20784: LD_ADDR_VAR 0 9
20788: PUSH
20789: LD_INT 32
20791: PUSH
20792: LD_INT 120
20794: PUSH
20795: LD_INT 70
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: LIST
20802: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
20803: LD_VAR 0 6
20807: PPUSH
20808: CALL_OW 264
20812: PUSH
20813: LD_INT 7
20815: PUSH
20816: LD_INT 28
20818: PUSH
20819: LD_INT 45
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: LIST
20826: IN
20827: IFFALSE 20848
// points := [ 35 , 20 , 45 ] ;
20829: LD_ADDR_VAR 0 9
20833: PUSH
20834: LD_INT 35
20836: PUSH
20837: LD_INT 20
20839: PUSH
20840: LD_INT 45
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: LIST
20847: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20848: LD_VAR 0 6
20852: PPUSH
20853: CALL_OW 264
20857: PUSH
20858: LD_INT 47
20860: PUSH
20861: EMPTY
20862: LIST
20863: IN
20864: IFFALSE 20885
// points := [ 67 , 45 , 75 ] ;
20866: LD_ADDR_VAR 0 9
20870: PUSH
20871: LD_INT 67
20873: PUSH
20874: LD_INT 45
20876: PUSH
20877: LD_INT 75
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: LIST
20884: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20885: LD_VAR 0 6
20889: PPUSH
20890: CALL_OW 264
20894: PUSH
20895: LD_INT 26
20897: PUSH
20898: EMPTY
20899: LIST
20900: IN
20901: IFFALSE 20922
// points := [ 120 , 30 , 80 ] ;
20903: LD_ADDR_VAR 0 9
20907: PUSH
20908: LD_INT 120
20910: PUSH
20911: LD_INT 30
20913: PUSH
20914: LD_INT 80
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: LIST
20921: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20922: LD_VAR 0 6
20926: PPUSH
20927: CALL_OW 264
20931: PUSH
20932: LD_INT 22
20934: PUSH
20935: EMPTY
20936: LIST
20937: IN
20938: IFFALSE 20959
// points := [ 40 , 1 , 1 ] ;
20940: LD_ADDR_VAR 0 9
20944: PUSH
20945: LD_INT 40
20947: PUSH
20948: LD_INT 1
20950: PUSH
20951: LD_INT 1
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: LIST
20958: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20959: LD_VAR 0 6
20963: PPUSH
20964: CALL_OW 264
20968: PUSH
20969: LD_INT 29
20971: PUSH
20972: EMPTY
20973: LIST
20974: IN
20975: IFFALSE 20996
// points := [ 70 , 200 , 400 ] ;
20977: LD_ADDR_VAR 0 9
20981: PUSH
20982: LD_INT 70
20984: PUSH
20985: LD_INT 200
20987: PUSH
20988: LD_INT 400
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: LIST
20995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20996: LD_VAR 0 6
21000: PPUSH
21001: CALL_OW 264
21005: PUSH
21006: LD_INT 14
21008: PUSH
21009: LD_INT 53
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: IN
21016: IFFALSE 21037
// points := [ 40 , 10 , 20 ] ;
21018: LD_ADDR_VAR 0 9
21022: PUSH
21023: LD_INT 40
21025: PUSH
21026: LD_INT 10
21028: PUSH
21029: LD_INT 20
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: LIST
21036: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
21037: LD_VAR 0 6
21041: PPUSH
21042: CALL_OW 264
21046: PUSH
21047: LD_INT 9
21049: PUSH
21050: EMPTY
21051: LIST
21052: IN
21053: IFFALSE 21074
// points := [ 5 , 70 , 20 ] ;
21055: LD_ADDR_VAR 0 9
21059: PUSH
21060: LD_INT 5
21062: PUSH
21063: LD_INT 70
21065: PUSH
21066: LD_INT 20
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: LIST
21073: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
21074: LD_VAR 0 6
21078: PPUSH
21079: CALL_OW 264
21083: PUSH
21084: LD_INT 10
21086: PUSH
21087: EMPTY
21088: LIST
21089: IN
21090: IFFALSE 21111
// points := [ 35 , 110 , 70 ] ;
21092: LD_ADDR_VAR 0 9
21096: PUSH
21097: LD_INT 35
21099: PUSH
21100: LD_INT 110
21102: PUSH
21103: LD_INT 70
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
21111: LD_VAR 0 6
21115: PPUSH
21116: CALL_OW 265
21120: PUSH
21121: LD_INT 25
21123: EQUAL
21124: IFFALSE 21145
// points := [ 80 , 65 , 100 ] ;
21126: LD_ADDR_VAR 0 9
21130: PUSH
21131: LD_INT 80
21133: PUSH
21134: LD_INT 65
21136: PUSH
21137: LD_INT 100
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: LIST
21144: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
21145: LD_VAR 0 6
21149: PPUSH
21150: CALL_OW 263
21154: PUSH
21155: LD_INT 1
21157: EQUAL
21158: IFFALSE 21193
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
21160: LD_ADDR_VAR 0 10
21164: PUSH
21165: LD_VAR 0 10
21169: PUSH
21170: LD_VAR 0 6
21174: PPUSH
21175: CALL_OW 311
21179: PPUSH
21180: LD_INT 3
21182: PPUSH
21183: CALL_OW 259
21187: PUSH
21188: LD_INT 4
21190: MUL
21191: MUL
21192: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
21193: LD_VAR 0 6
21197: PPUSH
21198: CALL_OW 263
21202: PUSH
21203: LD_INT 2
21205: EQUAL
21206: IFFALSE 21257
// begin j := IsControledBy ( i ) ;
21208: LD_ADDR_VAR 0 7
21212: PUSH
21213: LD_VAR 0 6
21217: PPUSH
21218: CALL_OW 312
21222: ST_TO_ADDR
// if j then
21223: LD_VAR 0 7
21227: IFFALSE 21257
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
21229: LD_ADDR_VAR 0 10
21233: PUSH
21234: LD_VAR 0 10
21238: PUSH
21239: LD_VAR 0 7
21243: PPUSH
21244: LD_INT 3
21246: PPUSH
21247: CALL_OW 259
21251: PUSH
21252: LD_INT 3
21254: MUL
21255: MUL
21256: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
21257: LD_VAR 0 6
21261: PPUSH
21262: CALL_OW 264
21266: PUSH
21267: LD_INT 5
21269: PUSH
21270: LD_INT 6
21272: PUSH
21273: LD_INT 46
21275: PUSH
21276: LD_INT 44
21278: PUSH
21279: LD_INT 47
21281: PUSH
21282: LD_INT 45
21284: PUSH
21285: LD_INT 28
21287: PUSH
21288: LD_INT 7
21290: PUSH
21291: LD_INT 27
21293: PUSH
21294: LD_INT 29
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: IN
21309: PUSH
21310: LD_VAR 0 1
21314: PPUSH
21315: LD_INT 52
21317: PPUSH
21318: CALL_OW 321
21322: PUSH
21323: LD_INT 2
21325: EQUAL
21326: AND
21327: IFFALSE 21344
// bpoints := bpoints * 1.2 ;
21329: LD_ADDR_VAR 0 10
21333: PUSH
21334: LD_VAR 0 10
21338: PUSH
21339: LD_REAL  1.20000000000000E+0000
21342: MUL
21343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
21344: LD_VAR 0 6
21348: PPUSH
21349: CALL_OW 264
21353: PUSH
21354: LD_INT 6
21356: PUSH
21357: LD_INT 46
21359: PUSH
21360: LD_INT 47
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: LIST
21367: IN
21368: IFFALSE 21385
// bpoints := bpoints * 1.2 ;
21370: LD_ADDR_VAR 0 10
21374: PUSH
21375: LD_VAR 0 10
21379: PUSH
21380: LD_REAL  1.20000000000000E+0000
21383: MUL
21384: ST_TO_ADDR
// end ; unit_building :
21385: GO 21399
21387: LD_INT 3
21389: DOUBLE
21390: EQUAL
21391: IFTRUE 21395
21393: GO 21398
21395: POP
// ; end ;
21396: GO 21399
21398: POP
// for j = 1 to 3 do
21399: LD_ADDR_VAR 0 7
21403: PUSH
21404: DOUBLE
21405: LD_INT 1
21407: DEC
21408: ST_TO_ADDR
21409: LD_INT 3
21411: PUSH
21412: FOR_TO
21413: IFFALSE 21466
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
21415: LD_ADDR_VAR 0 5
21419: PUSH
21420: LD_VAR 0 5
21424: PPUSH
21425: LD_VAR 0 7
21429: PPUSH
21430: LD_VAR 0 5
21434: PUSH
21435: LD_VAR 0 7
21439: ARRAY
21440: PUSH
21441: LD_VAR 0 9
21445: PUSH
21446: LD_VAR 0 7
21450: ARRAY
21451: PUSH
21452: LD_VAR 0 10
21456: MUL
21457: PLUS
21458: PPUSH
21459: CALL_OW 1
21463: ST_TO_ADDR
21464: GO 21412
21466: POP
21467: POP
// end ;
21468: GO 19951
21470: POP
21471: POP
// result := Replace ( result , 4 , tmp ) ;
21472: LD_ADDR_VAR 0 5
21476: PUSH
21477: LD_VAR 0 5
21481: PPUSH
21482: LD_INT 4
21484: PPUSH
21485: LD_VAR 0 8
21489: PPUSH
21490: CALL_OW 1
21494: ST_TO_ADDR
// end ;
21495: LD_VAR 0 5
21499: RET
// export function DangerAtRange ( unit , range ) ; begin
21500: LD_INT 0
21502: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
21503: LD_ADDR_VAR 0 3
21507: PUSH
21508: LD_VAR 0 1
21512: PPUSH
21513: CALL_OW 255
21517: PPUSH
21518: LD_VAR 0 1
21522: PPUSH
21523: CALL_OW 250
21527: PPUSH
21528: LD_VAR 0 1
21532: PPUSH
21533: CALL_OW 251
21537: PPUSH
21538: LD_VAR 0 2
21542: PPUSH
21543: CALL 19803 0 4
21547: ST_TO_ADDR
// end ;
21548: LD_VAR 0 3
21552: RET
// export function IsExtension ( b ) ; begin
21553: LD_INT 0
21555: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21556: LD_ADDR_VAR 0 2
21560: PUSH
21561: LD_VAR 0 1
21565: PPUSH
21566: CALL_OW 266
21570: PUSH
21571: LD_INT 23
21573: PUSH
21574: LD_INT 20
21576: PUSH
21577: LD_INT 22
21579: PUSH
21580: LD_INT 17
21582: PUSH
21583: LD_INT 24
21585: PUSH
21586: LD_INT 21
21588: PUSH
21589: LD_INT 19
21591: PUSH
21592: LD_INT 16
21594: PUSH
21595: LD_INT 25
21597: PUSH
21598: LD_INT 18
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: IN
21613: ST_TO_ADDR
// end ;
21614: LD_VAR 0 2
21618: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
21619: LD_INT 0
21621: PPUSH
21622: PPUSH
21623: PPUSH
// result := [ ] ;
21624: LD_ADDR_VAR 0 2
21628: PUSH
21629: EMPTY
21630: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
21631: LD_ADDR_VAR 0 3
21635: PUSH
21636: LD_INT 21
21638: PUSH
21639: LD_INT 3
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PPUSH
21646: CALL_OW 69
21650: ST_TO_ADDR
// if not tmp then
21651: LD_VAR 0 3
21655: NOT
21656: IFFALSE 21660
// exit ;
21658: GO 21710
// for i in tmp do
21660: LD_ADDR_VAR 0 4
21664: PUSH
21665: LD_VAR 0 3
21669: PUSH
21670: FOR_IN
21671: IFFALSE 21708
// if GetBase ( i ) = base then
21673: LD_VAR 0 4
21677: PPUSH
21678: CALL_OW 274
21682: PUSH
21683: LD_VAR 0 1
21687: EQUAL
21688: IFFALSE 21706
// result := result ^ i ;
21690: LD_ADDR_VAR 0 2
21694: PUSH
21695: LD_VAR 0 2
21699: PUSH
21700: LD_VAR 0 4
21704: ADD
21705: ST_TO_ADDR
21706: GO 21670
21708: POP
21709: POP
// end ;
21710: LD_VAR 0 2
21714: RET
// export function ComComplete ( unit , b ) ; var i ; begin
21715: LD_INT 0
21717: PPUSH
21718: PPUSH
// if BuildingStatus ( b ) = bs_build then
21719: LD_VAR 0 2
21723: PPUSH
21724: CALL_OW 461
21728: PUSH
21729: LD_INT 1
21731: EQUAL
21732: IFFALSE 21792
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21734: LD_VAR 0 1
21738: PPUSH
21739: LD_STRING h
21741: PUSH
21742: LD_VAR 0 2
21746: PPUSH
21747: CALL_OW 250
21751: PUSH
21752: LD_VAR 0 2
21756: PPUSH
21757: CALL_OW 251
21761: PUSH
21762: LD_VAR 0 2
21766: PUSH
21767: LD_INT 0
21769: PUSH
21770: LD_INT 0
21772: PUSH
21773: LD_INT 0
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: PUSH
21785: EMPTY
21786: LIST
21787: PPUSH
21788: CALL_OW 446
// end ;
21792: LD_VAR 0 3
21796: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21797: LD_INT 0
21799: PPUSH
21800: PPUSH
21801: PPUSH
21802: PPUSH
21803: PPUSH
21804: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
21805: LD_VAR 0 1
21809: NOT
21810: PUSH
21811: LD_VAR 0 1
21815: PPUSH
21816: CALL_OW 263
21820: PUSH
21821: LD_INT 2
21823: EQUAL
21824: NOT
21825: OR
21826: IFFALSE 21830
// exit ;
21828: GO 22146
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21830: LD_ADDR_VAR 0 6
21834: PUSH
21835: LD_INT 22
21837: PUSH
21838: LD_VAR 0 1
21842: PPUSH
21843: CALL_OW 255
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 2
21854: PUSH
21855: LD_INT 30
21857: PUSH
21858: LD_INT 36
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 34
21867: PUSH
21868: LD_INT 31
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: LIST
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PPUSH
21884: CALL_OW 69
21888: ST_TO_ADDR
// if not tmp then
21889: LD_VAR 0 6
21893: NOT
21894: IFFALSE 21898
// exit ;
21896: GO 22146
// result := [ ] ;
21898: LD_ADDR_VAR 0 2
21902: PUSH
21903: EMPTY
21904: ST_TO_ADDR
// for i in tmp do
21905: LD_ADDR_VAR 0 3
21909: PUSH
21910: LD_VAR 0 6
21914: PUSH
21915: FOR_IN
21916: IFFALSE 21987
// begin t := UnitsInside ( i ) ;
21918: LD_ADDR_VAR 0 4
21922: PUSH
21923: LD_VAR 0 3
21927: PPUSH
21928: CALL_OW 313
21932: ST_TO_ADDR
// if t then
21933: LD_VAR 0 4
21937: IFFALSE 21985
// for j in t do
21939: LD_ADDR_VAR 0 7
21943: PUSH
21944: LD_VAR 0 4
21948: PUSH
21949: FOR_IN
21950: IFFALSE 21983
// result := Insert ( result , result + 1 , j ) ;
21952: LD_ADDR_VAR 0 2
21956: PUSH
21957: LD_VAR 0 2
21961: PPUSH
21962: LD_VAR 0 2
21966: PUSH
21967: LD_INT 1
21969: PLUS
21970: PPUSH
21971: LD_VAR 0 7
21975: PPUSH
21976: CALL_OW 2
21980: ST_TO_ADDR
21981: GO 21949
21983: POP
21984: POP
// end ;
21985: GO 21915
21987: POP
21988: POP
// if not result then
21989: LD_VAR 0 2
21993: NOT
21994: IFFALSE 21998
// exit ;
21996: GO 22146
// mech := result [ 1 ] ;
21998: LD_ADDR_VAR 0 5
22002: PUSH
22003: LD_VAR 0 2
22007: PUSH
22008: LD_INT 1
22010: ARRAY
22011: ST_TO_ADDR
// if result > 1 then
22012: LD_VAR 0 2
22016: PUSH
22017: LD_INT 1
22019: GREATER
22020: IFFALSE 22132
// for i = 2 to result do
22022: LD_ADDR_VAR 0 3
22026: PUSH
22027: DOUBLE
22028: LD_INT 2
22030: DEC
22031: ST_TO_ADDR
22032: LD_VAR 0 2
22036: PUSH
22037: FOR_TO
22038: IFFALSE 22130
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
22040: LD_ADDR_VAR 0 4
22044: PUSH
22045: LD_VAR 0 2
22049: PUSH
22050: LD_VAR 0 3
22054: ARRAY
22055: PPUSH
22056: LD_INT 3
22058: PPUSH
22059: CALL_OW 259
22063: PUSH
22064: LD_VAR 0 2
22068: PUSH
22069: LD_VAR 0 3
22073: ARRAY
22074: PPUSH
22075: CALL_OW 432
22079: MINUS
22080: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
22081: LD_VAR 0 4
22085: PUSH
22086: LD_VAR 0 5
22090: PPUSH
22091: LD_INT 3
22093: PPUSH
22094: CALL_OW 259
22098: PUSH
22099: LD_VAR 0 5
22103: PPUSH
22104: CALL_OW 432
22108: MINUS
22109: GREATEREQUAL
22110: IFFALSE 22128
// mech := result [ i ] ;
22112: LD_ADDR_VAR 0 5
22116: PUSH
22117: LD_VAR 0 2
22121: PUSH
22122: LD_VAR 0 3
22126: ARRAY
22127: ST_TO_ADDR
// end ;
22128: GO 22037
22130: POP
22131: POP
// ComLinkTo ( vehicle , mech ) ;
22132: LD_VAR 0 1
22136: PPUSH
22137: LD_VAR 0 5
22141: PPUSH
22142: CALL_OW 135
// end ;
22146: LD_VAR 0 2
22150: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
22151: LD_INT 0
22153: PPUSH
22154: PPUSH
22155: PPUSH
22156: PPUSH
22157: PPUSH
22158: PPUSH
22159: PPUSH
22160: PPUSH
22161: PPUSH
22162: PPUSH
22163: PPUSH
22164: PPUSH
// result := [ ] ;
22165: LD_ADDR_VAR 0 6
22169: PUSH
22170: EMPTY
22171: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
22172: LD_VAR 0 1
22176: PPUSH
22177: CALL_OW 266
22181: PUSH
22182: LD_INT 0
22184: PUSH
22185: LD_INT 1
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: IN
22192: NOT
22193: IFFALSE 22197
// exit ;
22195: GO 23606
// if name then
22197: LD_VAR 0 2
22201: IFFALSE 22217
// SetBName ( base_dep , name ) ;
22203: LD_VAR 0 1
22207: PPUSH
22208: LD_VAR 0 2
22212: PPUSH
22213: CALL_OW 500
// base := GetBase ( base_dep ) ;
22217: LD_ADDR_VAR 0 14
22221: PUSH
22222: LD_VAR 0 1
22226: PPUSH
22227: CALL_OW 274
22231: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
22232: LD_ADDR_VAR 0 15
22236: PUSH
22237: LD_VAR 0 1
22241: PPUSH
22242: CALL_OW 255
22246: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
22247: LD_ADDR_VAR 0 16
22251: PUSH
22252: LD_VAR 0 1
22256: PPUSH
22257: CALL_OW 248
22261: ST_TO_ADDR
// if sources then
22262: LD_VAR 0 4
22266: IFFALSE 22313
// for i = 1 to 3 do
22268: LD_ADDR_VAR 0 7
22272: PUSH
22273: DOUBLE
22274: LD_INT 1
22276: DEC
22277: ST_TO_ADDR
22278: LD_INT 3
22280: PUSH
22281: FOR_TO
22282: IFFALSE 22311
// AddResourceType ( base , i , sources [ i ] ) ;
22284: LD_VAR 0 14
22288: PPUSH
22289: LD_VAR 0 7
22293: PPUSH
22294: LD_VAR 0 4
22298: PUSH
22299: LD_VAR 0 7
22303: ARRAY
22304: PPUSH
22305: CALL_OW 276
22309: GO 22281
22311: POP
22312: POP
// buildings := GetBaseBuildings ( base ) ;
22313: LD_ADDR_VAR 0 17
22317: PUSH
22318: LD_VAR 0 14
22322: PPUSH
22323: CALL 21619 0 1
22327: ST_TO_ADDR
// InitHc ;
22328: CALL_OW 19
// InitUc ;
22332: CALL_OW 18
// uc_side := side ;
22336: LD_ADDR_OWVAR 20
22340: PUSH
22341: LD_VAR 0 15
22345: ST_TO_ADDR
// uc_nation := nation ;
22346: LD_ADDR_OWVAR 21
22350: PUSH
22351: LD_VAR 0 16
22355: ST_TO_ADDR
// if buildings then
22356: LD_VAR 0 17
22360: IFFALSE 23465
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22362: LD_VAR 0 17
22366: PPUSH
22367: LD_INT 2
22369: PUSH
22370: LD_INT 30
22372: PUSH
22373: LD_INT 32
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 30
22382: PUSH
22383: LD_INT 33
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: LIST
22394: PPUSH
22395: CALL_OW 72
22399: IFFALSE 22482
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22401: LD_ADDR_VAR 0 7
22405: PUSH
22406: LD_VAR 0 17
22410: PPUSH
22411: LD_INT 2
22413: PUSH
22414: LD_INT 30
22416: PUSH
22417: LD_INT 32
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 30
22426: PUSH
22427: LD_INT 33
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: PPUSH
22439: CALL_OW 72
22443: PUSH
22444: FOR_IN
22445: IFFALSE 22480
// begin if not GetBWeapon ( i ) then
22447: LD_VAR 0 7
22451: PPUSH
22452: CALL_OW 269
22456: NOT
22457: IFFALSE 22478
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
22459: LD_VAR 0 7
22463: PPUSH
22464: LD_VAR 0 7
22468: PPUSH
22469: CALL 23611 0 1
22473: PPUSH
22474: CALL_OW 431
// end ;
22478: GO 22444
22480: POP
22481: POP
// end ; for i = 1 to personel do
22482: LD_ADDR_VAR 0 7
22486: PUSH
22487: DOUBLE
22488: LD_INT 1
22490: DEC
22491: ST_TO_ADDR
22492: LD_VAR 0 5
22496: PUSH
22497: FOR_TO
22498: IFFALSE 23445
// begin if i > 4 then
22500: LD_VAR 0 7
22504: PUSH
22505: LD_INT 4
22507: GREATER
22508: IFFALSE 22512
// break ;
22510: GO 23445
// case i of 1 :
22512: LD_VAR 0 7
22516: PUSH
22517: LD_INT 1
22519: DOUBLE
22520: EQUAL
22521: IFTRUE 22525
22523: GO 22598
22525: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22526: LD_ADDR_VAR 0 11
22530: PUSH
22531: LD_VAR 0 17
22535: PPUSH
22536: LD_INT 22
22538: PUSH
22539: LD_VAR 0 15
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 2
22550: PUSH
22551: LD_INT 30
22553: PUSH
22554: LD_INT 32
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 30
22563: PUSH
22564: LD_INT 4
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 30
22573: PUSH
22574: LD_INT 5
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PPUSH
22591: CALL_OW 72
22595: ST_TO_ADDR
22596: GO 22820
22598: LD_INT 2
22600: DOUBLE
22601: EQUAL
22602: IFTRUE 22606
22604: GO 22668
22606: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22607: LD_ADDR_VAR 0 11
22611: PUSH
22612: LD_VAR 0 17
22616: PPUSH
22617: LD_INT 22
22619: PUSH
22620: LD_VAR 0 15
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: LD_INT 30
22634: PUSH
22635: LD_INT 0
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 30
22644: PUSH
22645: LD_INT 1
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: LIST
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PPUSH
22661: CALL_OW 72
22665: ST_TO_ADDR
22666: GO 22820
22668: LD_INT 3
22670: DOUBLE
22671: EQUAL
22672: IFTRUE 22676
22674: GO 22738
22676: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22677: LD_ADDR_VAR 0 11
22681: PUSH
22682: LD_VAR 0 17
22686: PPUSH
22687: LD_INT 22
22689: PUSH
22690: LD_VAR 0 15
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 2
22701: PUSH
22702: LD_INT 30
22704: PUSH
22705: LD_INT 2
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 30
22714: PUSH
22715: LD_INT 3
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PPUSH
22731: CALL_OW 72
22735: ST_TO_ADDR
22736: GO 22820
22738: LD_INT 4
22740: DOUBLE
22741: EQUAL
22742: IFTRUE 22746
22744: GO 22819
22746: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22747: LD_ADDR_VAR 0 11
22751: PUSH
22752: LD_VAR 0 17
22756: PPUSH
22757: LD_INT 22
22759: PUSH
22760: LD_VAR 0 15
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 2
22771: PUSH
22772: LD_INT 30
22774: PUSH
22775: LD_INT 6
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 30
22784: PUSH
22785: LD_INT 7
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 30
22794: PUSH
22795: LD_INT 8
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PPUSH
22812: CALL_OW 72
22816: ST_TO_ADDR
22817: GO 22820
22819: POP
// if not f then
22820: LD_VAR 0 11
22824: NOT
22825: IFFALSE 22829
// continue ;
22827: GO 22497
// x := personel [ i ] ;
22829: LD_ADDR_VAR 0 12
22833: PUSH
22834: LD_VAR 0 5
22838: PUSH
22839: LD_VAR 0 7
22843: ARRAY
22844: ST_TO_ADDR
// if x = - 1 then
22845: LD_VAR 0 12
22849: PUSH
22850: LD_INT 1
22852: NEG
22853: EQUAL
22854: IFFALSE 23063
// begin for j in f do
22856: LD_ADDR_VAR 0 8
22860: PUSH
22861: LD_VAR 0 11
22865: PUSH
22866: FOR_IN
22867: IFFALSE 23059
// repeat InitHc ;
22869: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22873: LD_VAR 0 8
22877: PPUSH
22878: CALL_OW 266
22882: PUSH
22883: LD_INT 5
22885: EQUAL
22886: IFFALSE 22956
// begin if UnitsInside ( j ) < 3 then
22888: LD_VAR 0 8
22892: PPUSH
22893: CALL_OW 313
22897: PUSH
22898: LD_INT 3
22900: LESS
22901: IFFALSE 22937
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22903: LD_INT 0
22905: PPUSH
22906: LD_INT 5
22908: PUSH
22909: LD_INT 8
22911: PUSH
22912: LD_INT 9
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: LIST
22919: PUSH
22920: LD_VAR 0 16
22924: ARRAY
22925: PPUSH
22926: LD_VAR 0 3
22930: PPUSH
22931: CALL_OW 380
22935: GO 22954
// PrepareHuman ( false , i , skill ) ;
22937: LD_INT 0
22939: PPUSH
22940: LD_VAR 0 7
22944: PPUSH
22945: LD_VAR 0 3
22949: PPUSH
22950: CALL_OW 380
// end else
22954: GO 22973
// PrepareHuman ( false , i , skill ) ;
22956: LD_INT 0
22958: PPUSH
22959: LD_VAR 0 7
22963: PPUSH
22964: LD_VAR 0 3
22968: PPUSH
22969: CALL_OW 380
// un := CreateHuman ;
22973: LD_ADDR_VAR 0 13
22977: PUSH
22978: CALL_OW 44
22982: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22983: LD_ADDR_VAR 0 6
22987: PUSH
22988: LD_VAR 0 6
22992: PPUSH
22993: LD_INT 1
22995: PPUSH
22996: LD_VAR 0 13
23000: PPUSH
23001: CALL_OW 2
23005: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
23006: LD_VAR 0 13
23010: PPUSH
23011: LD_VAR 0 8
23015: PPUSH
23016: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
23020: LD_VAR 0 8
23024: PPUSH
23025: CALL_OW 313
23029: PUSH
23030: LD_INT 6
23032: EQUAL
23033: PUSH
23034: LD_VAR 0 8
23038: PPUSH
23039: CALL_OW 266
23043: PUSH
23044: LD_INT 32
23046: PUSH
23047: LD_INT 31
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: IN
23054: OR
23055: IFFALSE 22869
23057: GO 22866
23059: POP
23060: POP
// end else
23061: GO 23443
// for j = 1 to x do
23063: LD_ADDR_VAR 0 8
23067: PUSH
23068: DOUBLE
23069: LD_INT 1
23071: DEC
23072: ST_TO_ADDR
23073: LD_VAR 0 12
23077: PUSH
23078: FOR_TO
23079: IFFALSE 23441
// begin InitHc ;
23081: CALL_OW 19
// if not f then
23085: LD_VAR 0 11
23089: NOT
23090: IFFALSE 23179
// begin PrepareHuman ( false , i , skill ) ;
23092: LD_INT 0
23094: PPUSH
23095: LD_VAR 0 7
23099: PPUSH
23100: LD_VAR 0 3
23104: PPUSH
23105: CALL_OW 380
// un := CreateHuman ;
23109: LD_ADDR_VAR 0 13
23113: PUSH
23114: CALL_OW 44
23118: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23119: LD_ADDR_VAR 0 6
23123: PUSH
23124: LD_VAR 0 6
23128: PPUSH
23129: LD_INT 1
23131: PPUSH
23132: LD_VAR 0 13
23136: PPUSH
23137: CALL_OW 2
23141: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23142: LD_VAR 0 13
23146: PPUSH
23147: LD_VAR 0 1
23151: PPUSH
23152: CALL_OW 250
23156: PPUSH
23157: LD_VAR 0 1
23161: PPUSH
23162: CALL_OW 251
23166: PPUSH
23167: LD_INT 10
23169: PPUSH
23170: LD_INT 0
23172: PPUSH
23173: CALL_OW 50
// continue ;
23177: GO 23078
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
23179: LD_VAR 0 11
23183: PUSH
23184: LD_INT 1
23186: ARRAY
23187: PPUSH
23188: CALL_OW 313
23192: PUSH
23193: LD_VAR 0 11
23197: PUSH
23198: LD_INT 1
23200: ARRAY
23201: PPUSH
23202: CALL_OW 266
23206: PUSH
23207: LD_INT 32
23209: PUSH
23210: LD_INT 31
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: IN
23217: AND
23218: PUSH
23219: LD_VAR 0 11
23223: PUSH
23224: LD_INT 1
23226: ARRAY
23227: PPUSH
23228: CALL_OW 313
23232: PUSH
23233: LD_INT 6
23235: EQUAL
23236: OR
23237: IFFALSE 23257
// f := Delete ( f , 1 ) ;
23239: LD_ADDR_VAR 0 11
23243: PUSH
23244: LD_VAR 0 11
23248: PPUSH
23249: LD_INT 1
23251: PPUSH
23252: CALL_OW 3
23256: ST_TO_ADDR
// if not f then
23257: LD_VAR 0 11
23261: NOT
23262: IFFALSE 23280
// begin x := x + 2 ;
23264: LD_ADDR_VAR 0 12
23268: PUSH
23269: LD_VAR 0 12
23273: PUSH
23274: LD_INT 2
23276: PLUS
23277: ST_TO_ADDR
// continue ;
23278: GO 23078
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23280: LD_VAR 0 11
23284: PUSH
23285: LD_INT 1
23287: ARRAY
23288: PPUSH
23289: CALL_OW 266
23293: PUSH
23294: LD_INT 5
23296: EQUAL
23297: IFFALSE 23371
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23299: LD_VAR 0 11
23303: PUSH
23304: LD_INT 1
23306: ARRAY
23307: PPUSH
23308: CALL_OW 313
23312: PUSH
23313: LD_INT 3
23315: LESS
23316: IFFALSE 23352
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23318: LD_INT 0
23320: PPUSH
23321: LD_INT 5
23323: PUSH
23324: LD_INT 8
23326: PUSH
23327: LD_INT 9
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: LIST
23334: PUSH
23335: LD_VAR 0 16
23339: ARRAY
23340: PPUSH
23341: LD_VAR 0 3
23345: PPUSH
23346: CALL_OW 380
23350: GO 23369
// PrepareHuman ( false , i , skill ) ;
23352: LD_INT 0
23354: PPUSH
23355: LD_VAR 0 7
23359: PPUSH
23360: LD_VAR 0 3
23364: PPUSH
23365: CALL_OW 380
// end else
23369: GO 23388
// PrepareHuman ( false , i , skill ) ;
23371: LD_INT 0
23373: PPUSH
23374: LD_VAR 0 7
23378: PPUSH
23379: LD_VAR 0 3
23383: PPUSH
23384: CALL_OW 380
// un := CreateHuman ;
23388: LD_ADDR_VAR 0 13
23392: PUSH
23393: CALL_OW 44
23397: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23398: LD_ADDR_VAR 0 6
23402: PUSH
23403: LD_VAR 0 6
23407: PPUSH
23408: LD_INT 1
23410: PPUSH
23411: LD_VAR 0 13
23415: PPUSH
23416: CALL_OW 2
23420: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23421: LD_VAR 0 13
23425: PPUSH
23426: LD_VAR 0 11
23430: PUSH
23431: LD_INT 1
23433: ARRAY
23434: PPUSH
23435: CALL_OW 52
// end ;
23439: GO 23078
23441: POP
23442: POP
// end ;
23443: GO 22497
23445: POP
23446: POP
// result := result ^ buildings ;
23447: LD_ADDR_VAR 0 6
23451: PUSH
23452: LD_VAR 0 6
23456: PUSH
23457: LD_VAR 0 17
23461: ADD
23462: ST_TO_ADDR
// end else
23463: GO 23606
// begin for i = 1 to personel do
23465: LD_ADDR_VAR 0 7
23469: PUSH
23470: DOUBLE
23471: LD_INT 1
23473: DEC
23474: ST_TO_ADDR
23475: LD_VAR 0 5
23479: PUSH
23480: FOR_TO
23481: IFFALSE 23604
// begin if i > 4 then
23483: LD_VAR 0 7
23487: PUSH
23488: LD_INT 4
23490: GREATER
23491: IFFALSE 23495
// break ;
23493: GO 23604
// x := personel [ i ] ;
23495: LD_ADDR_VAR 0 12
23499: PUSH
23500: LD_VAR 0 5
23504: PUSH
23505: LD_VAR 0 7
23509: ARRAY
23510: ST_TO_ADDR
// if x = - 1 then
23511: LD_VAR 0 12
23515: PUSH
23516: LD_INT 1
23518: NEG
23519: EQUAL
23520: IFFALSE 23524
// continue ;
23522: GO 23480
// PrepareHuman ( false , i , skill ) ;
23524: LD_INT 0
23526: PPUSH
23527: LD_VAR 0 7
23531: PPUSH
23532: LD_VAR 0 3
23536: PPUSH
23537: CALL_OW 380
// un := CreateHuman ;
23541: LD_ADDR_VAR 0 13
23545: PUSH
23546: CALL_OW 44
23550: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23551: LD_VAR 0 13
23555: PPUSH
23556: LD_VAR 0 1
23560: PPUSH
23561: CALL_OW 250
23565: PPUSH
23566: LD_VAR 0 1
23570: PPUSH
23571: CALL_OW 251
23575: PPUSH
23576: LD_INT 10
23578: PPUSH
23579: LD_INT 0
23581: PPUSH
23582: CALL_OW 50
// result := result ^ un ;
23586: LD_ADDR_VAR 0 6
23590: PUSH
23591: LD_VAR 0 6
23595: PUSH
23596: LD_VAR 0 13
23600: ADD
23601: ST_TO_ADDR
// end ;
23602: GO 23480
23604: POP
23605: POP
// end ; end ;
23606: LD_VAR 0 6
23610: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23611: LD_INT 0
23613: PPUSH
23614: PPUSH
23615: PPUSH
23616: PPUSH
23617: PPUSH
23618: PPUSH
23619: PPUSH
23620: PPUSH
23621: PPUSH
23622: PPUSH
23623: PPUSH
23624: PPUSH
23625: PPUSH
23626: PPUSH
23627: PPUSH
23628: PPUSH
// result := false ;
23629: LD_ADDR_VAR 0 2
23633: PUSH
23634: LD_INT 0
23636: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23637: LD_VAR 0 1
23641: NOT
23642: PUSH
23643: LD_VAR 0 1
23647: PPUSH
23648: CALL_OW 266
23652: PUSH
23653: LD_INT 32
23655: PUSH
23656: LD_INT 33
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: IN
23663: NOT
23664: OR
23665: IFFALSE 23669
// exit ;
23667: GO 24902
// nat := GetNation ( tower ) ;
23669: LD_ADDR_VAR 0 11
23673: PUSH
23674: LD_VAR 0 1
23678: PPUSH
23679: CALL_OW 248
23683: ST_TO_ADDR
// side := GetSide ( tower ) ;
23684: LD_ADDR_VAR 0 15
23688: PUSH
23689: LD_VAR 0 1
23693: PPUSH
23694: CALL_OW 255
23698: ST_TO_ADDR
// x := GetX ( tower ) ;
23699: LD_ADDR_VAR 0 9
23703: PUSH
23704: LD_VAR 0 1
23708: PPUSH
23709: CALL_OW 250
23713: ST_TO_ADDR
// y := GetY ( tower ) ;
23714: LD_ADDR_VAR 0 10
23718: PUSH
23719: LD_VAR 0 1
23723: PPUSH
23724: CALL_OW 251
23728: ST_TO_ADDR
// if not x or not y then
23729: LD_VAR 0 9
23733: NOT
23734: PUSH
23735: LD_VAR 0 10
23739: NOT
23740: OR
23741: IFFALSE 23745
// exit ;
23743: GO 24902
// weapon := 0 ;
23745: LD_ADDR_VAR 0 17
23749: PUSH
23750: LD_INT 0
23752: ST_TO_ADDR
// fac_list := [ ] ;
23753: LD_ADDR_VAR 0 16
23757: PUSH
23758: EMPTY
23759: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
23760: LD_ADDR_VAR 0 5
23764: PUSH
23765: LD_VAR 0 1
23769: PPUSH
23770: CALL_OW 274
23774: PPUSH
23775: CALL 21619 0 1
23779: PPUSH
23780: LD_INT 30
23782: PUSH
23783: LD_INT 3
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PPUSH
23790: CALL_OW 72
23794: ST_TO_ADDR
// if not factories then
23795: LD_VAR 0 5
23799: NOT
23800: IFFALSE 23804
// exit ;
23802: GO 24902
// for i in factories do
23804: LD_ADDR_VAR 0 7
23808: PUSH
23809: LD_VAR 0 5
23813: PUSH
23814: FOR_IN
23815: IFFALSE 23840
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23817: LD_ADDR_VAR 0 16
23821: PUSH
23822: LD_VAR 0 16
23826: PUSH
23827: LD_VAR 0 7
23831: PPUSH
23832: CALL_OW 478
23836: UNION
23837: ST_TO_ADDR
23838: GO 23814
23840: POP
23841: POP
// if not fac_list then
23842: LD_VAR 0 16
23846: NOT
23847: IFFALSE 23851
// exit ;
23849: GO 24902
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23851: LD_ADDR_VAR 0 4
23855: PUSH
23856: LD_INT 4
23858: PUSH
23859: LD_INT 5
23861: PUSH
23862: LD_INT 9
23864: PUSH
23865: LD_INT 10
23867: PUSH
23868: LD_INT 6
23870: PUSH
23871: LD_INT 7
23873: PUSH
23874: LD_INT 11
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 27
23888: PUSH
23889: LD_INT 28
23891: PUSH
23892: LD_INT 26
23894: PUSH
23895: LD_INT 30
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 43
23906: PUSH
23907: LD_INT 44
23909: PUSH
23910: LD_INT 46
23912: PUSH
23913: LD_INT 45
23915: PUSH
23916: LD_INT 47
23918: PUSH
23919: LD_INT 49
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: LIST
23934: PUSH
23935: LD_VAR 0 11
23939: ARRAY
23940: ST_TO_ADDR
// for i in list do
23941: LD_ADDR_VAR 0 7
23945: PUSH
23946: LD_VAR 0 4
23950: PUSH
23951: FOR_IN
23952: IFFALSE 23985
// if not i in fac_list then
23954: LD_VAR 0 7
23958: PUSH
23959: LD_VAR 0 16
23963: IN
23964: NOT
23965: IFFALSE 23983
// list := list diff i ;
23967: LD_ADDR_VAR 0 4
23971: PUSH
23972: LD_VAR 0 4
23976: PUSH
23977: LD_VAR 0 7
23981: DIFF
23982: ST_TO_ADDR
23983: GO 23951
23985: POP
23986: POP
// if not list then
23987: LD_VAR 0 4
23991: NOT
23992: IFFALSE 23996
// exit ;
23994: GO 24902
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23996: LD_VAR 0 11
24000: PUSH
24001: LD_INT 3
24003: EQUAL
24004: PUSH
24005: LD_INT 49
24007: PUSH
24008: LD_VAR 0 4
24012: IN
24013: AND
24014: PUSH
24015: LD_INT 31
24017: PPUSH
24018: LD_VAR 0 15
24022: PPUSH
24023: CALL_OW 321
24027: PUSH
24028: LD_INT 2
24030: EQUAL
24031: AND
24032: IFFALSE 24092
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
24034: LD_INT 22
24036: PUSH
24037: LD_VAR 0 15
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 35
24048: PUSH
24049: LD_INT 49
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 91
24058: PUSH
24059: LD_VAR 0 1
24063: PUSH
24064: LD_INT 10
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: LIST
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: LIST
24076: PPUSH
24077: CALL_OW 69
24081: NOT
24082: IFFALSE 24092
// weapon := ru_time_lapser ;
24084: LD_ADDR_VAR 0 17
24088: PUSH
24089: LD_INT 49
24091: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
24092: LD_VAR 0 11
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: LD_INT 2
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: IN
24107: PUSH
24108: LD_INT 11
24110: PUSH
24111: LD_VAR 0 4
24115: IN
24116: PUSH
24117: LD_INT 30
24119: PUSH
24120: LD_VAR 0 4
24124: IN
24125: OR
24126: AND
24127: PUSH
24128: LD_INT 6
24130: PPUSH
24131: LD_VAR 0 15
24135: PPUSH
24136: CALL_OW 321
24140: PUSH
24141: LD_INT 2
24143: EQUAL
24144: AND
24145: IFFALSE 24310
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
24147: LD_INT 22
24149: PUSH
24150: LD_VAR 0 15
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 2
24161: PUSH
24162: LD_INT 35
24164: PUSH
24165: LD_INT 11
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 35
24174: PUSH
24175: LD_INT 30
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 91
24189: PUSH
24190: LD_VAR 0 1
24194: PUSH
24195: LD_INT 18
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: LIST
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: LIST
24207: PPUSH
24208: CALL_OW 69
24212: NOT
24213: PUSH
24214: LD_INT 22
24216: PUSH
24217: LD_VAR 0 15
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 2
24228: PUSH
24229: LD_INT 30
24231: PUSH
24232: LD_INT 32
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 30
24241: PUSH
24242: LD_INT 33
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 91
24256: PUSH
24257: LD_VAR 0 1
24261: PUSH
24262: LD_INT 12
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: LIST
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: LIST
24274: PUSH
24275: EMPTY
24276: LIST
24277: PPUSH
24278: CALL_OW 69
24282: PUSH
24283: LD_INT 2
24285: GREATER
24286: AND
24287: IFFALSE 24310
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24289: LD_ADDR_VAR 0 17
24293: PUSH
24294: LD_INT 11
24296: PUSH
24297: LD_INT 30
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_VAR 0 11
24308: ARRAY
24309: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24310: LD_VAR 0 17
24314: NOT
24315: PUSH
24316: LD_INT 40
24318: PPUSH
24319: LD_VAR 0 15
24323: PPUSH
24324: CALL_OW 321
24328: PUSH
24329: LD_INT 2
24331: EQUAL
24332: AND
24333: PUSH
24334: LD_INT 7
24336: PUSH
24337: LD_VAR 0 4
24341: IN
24342: PUSH
24343: LD_INT 28
24345: PUSH
24346: LD_VAR 0 4
24350: IN
24351: OR
24352: PUSH
24353: LD_INT 45
24355: PUSH
24356: LD_VAR 0 4
24360: IN
24361: OR
24362: AND
24363: IFFALSE 24617
// begin hex := GetHexInfo ( x , y ) ;
24365: LD_ADDR_VAR 0 3
24369: PUSH
24370: LD_VAR 0 9
24374: PPUSH
24375: LD_VAR 0 10
24379: PPUSH
24380: CALL_OW 546
24384: ST_TO_ADDR
// if hex [ 1 ] then
24385: LD_VAR 0 3
24389: PUSH
24390: LD_INT 1
24392: ARRAY
24393: IFFALSE 24397
// exit ;
24395: GO 24902
// height := hex [ 2 ] ;
24397: LD_ADDR_VAR 0 14
24401: PUSH
24402: LD_VAR 0 3
24406: PUSH
24407: LD_INT 2
24409: ARRAY
24410: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24411: LD_ADDR_VAR 0 13
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: LD_INT 2
24421: PUSH
24422: LD_INT 3
24424: PUSH
24425: LD_INT 5
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: ST_TO_ADDR
// for i in tmp do
24434: LD_ADDR_VAR 0 7
24438: PUSH
24439: LD_VAR 0 13
24443: PUSH
24444: FOR_IN
24445: IFFALSE 24615
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24447: LD_ADDR_VAR 0 8
24451: PUSH
24452: LD_VAR 0 9
24456: PPUSH
24457: LD_VAR 0 7
24461: PPUSH
24462: LD_INT 5
24464: PPUSH
24465: CALL_OW 272
24469: PUSH
24470: LD_VAR 0 10
24474: PPUSH
24475: LD_VAR 0 7
24479: PPUSH
24480: LD_INT 5
24482: PPUSH
24483: CALL_OW 273
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24492: LD_VAR 0 8
24496: PUSH
24497: LD_INT 1
24499: ARRAY
24500: PPUSH
24501: LD_VAR 0 8
24505: PUSH
24506: LD_INT 2
24508: ARRAY
24509: PPUSH
24510: CALL_OW 488
24514: IFFALSE 24613
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24516: LD_ADDR_VAR 0 3
24520: PUSH
24521: LD_VAR 0 8
24525: PUSH
24526: LD_INT 1
24528: ARRAY
24529: PPUSH
24530: LD_VAR 0 8
24534: PUSH
24535: LD_INT 2
24537: ARRAY
24538: PPUSH
24539: CALL_OW 546
24543: ST_TO_ADDR
// if hex [ 1 ] then
24544: LD_VAR 0 3
24548: PUSH
24549: LD_INT 1
24551: ARRAY
24552: IFFALSE 24556
// continue ;
24554: GO 24444
// h := hex [ 2 ] ;
24556: LD_ADDR_VAR 0 12
24560: PUSH
24561: LD_VAR 0 3
24565: PUSH
24566: LD_INT 2
24568: ARRAY
24569: ST_TO_ADDR
// if h + 7 < height then
24570: LD_VAR 0 12
24574: PUSH
24575: LD_INT 7
24577: PLUS
24578: PUSH
24579: LD_VAR 0 14
24583: LESS
24584: IFFALSE 24613
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24586: LD_ADDR_VAR 0 17
24590: PUSH
24591: LD_INT 7
24593: PUSH
24594: LD_INT 28
24596: PUSH
24597: LD_INT 45
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: LIST
24604: PUSH
24605: LD_VAR 0 11
24609: ARRAY
24610: ST_TO_ADDR
// break ;
24611: GO 24615
// end ; end ; end ;
24613: GO 24444
24615: POP
24616: POP
// end ; if not weapon then
24617: LD_VAR 0 17
24621: NOT
24622: IFFALSE 24784
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24624: LD_ADDR_VAR 0 4
24628: PUSH
24629: LD_VAR 0 4
24633: PUSH
24634: LD_INT 11
24636: PUSH
24637: LD_INT 30
24639: PUSH
24640: LD_INT 49
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: LIST
24647: DIFF
24648: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
24649: LD_ADDR_VAR 0 17
24653: PUSH
24654: LD_VAR 0 4
24658: PUSH
24659: LD_INT 1
24661: PPUSH
24662: LD_VAR 0 4
24666: PPUSH
24667: CALL_OW 12
24671: ARRAY
24672: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
24673: LD_ADDR_VAR 0 13
24677: PUSH
24678: LD_INT 22
24680: PUSH
24681: LD_VAR 0 15
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 3
24692: PUSH
24693: LD_INT 35
24695: PUSH
24696: LD_INT 0
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PPUSH
24711: CALL_OW 69
24715: ST_TO_ADDR
// for i in tmp do
24716: LD_ADDR_VAR 0 7
24720: PUSH
24721: LD_VAR 0 13
24725: PUSH
24726: FOR_IN
24727: IFFALSE 24752
// list := list diff GetBWeapon ( i ) ;
24729: LD_ADDR_VAR 0 4
24733: PUSH
24734: LD_VAR 0 4
24738: PUSH
24739: LD_VAR 0 7
24743: PPUSH
24744: CALL_OW 269
24748: DIFF
24749: ST_TO_ADDR
24750: GO 24726
24752: POP
24753: POP
// if list then
24754: LD_VAR 0 4
24758: IFFALSE 24784
// weapon := list [ rand ( 1 , list ) ] ;
24760: LD_ADDR_VAR 0 17
24764: PUSH
24765: LD_VAR 0 4
24769: PUSH
24770: LD_INT 1
24772: PPUSH
24773: LD_VAR 0 4
24777: PPUSH
24778: CALL_OW 12
24782: ARRAY
24783: ST_TO_ADDR
// end ; if weapon then
24784: LD_VAR 0 17
24788: IFFALSE 24902
// begin tmp := CostOfWeapon ( weapon ) ;
24790: LD_ADDR_VAR 0 13
24794: PUSH
24795: LD_VAR 0 17
24799: PPUSH
24800: CALL_OW 451
24804: ST_TO_ADDR
// j := GetBase ( tower ) ;
24805: LD_ADDR_VAR 0 8
24809: PUSH
24810: LD_VAR 0 1
24814: PPUSH
24815: CALL_OW 274
24819: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24820: LD_VAR 0 8
24824: PPUSH
24825: LD_INT 1
24827: PPUSH
24828: CALL_OW 275
24832: PUSH
24833: LD_VAR 0 13
24837: PUSH
24838: LD_INT 1
24840: ARRAY
24841: GREATEREQUAL
24842: PUSH
24843: LD_VAR 0 8
24847: PPUSH
24848: LD_INT 2
24850: PPUSH
24851: CALL_OW 275
24855: PUSH
24856: LD_VAR 0 13
24860: PUSH
24861: LD_INT 2
24863: ARRAY
24864: GREATEREQUAL
24865: AND
24866: PUSH
24867: LD_VAR 0 8
24871: PPUSH
24872: LD_INT 3
24874: PPUSH
24875: CALL_OW 275
24879: PUSH
24880: LD_VAR 0 13
24884: PUSH
24885: LD_INT 3
24887: ARRAY
24888: GREATEREQUAL
24889: AND
24890: IFFALSE 24902
// result := weapon ;
24892: LD_ADDR_VAR 0 2
24896: PUSH
24897: LD_VAR 0 17
24901: ST_TO_ADDR
// end ; end ;
24902: LD_VAR 0 2
24906: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24907: LD_INT 0
24909: PPUSH
24910: PPUSH
// result := true ;
24911: LD_ADDR_VAR 0 3
24915: PUSH
24916: LD_INT 1
24918: ST_TO_ADDR
// if array1 = array2 then
24919: LD_VAR 0 1
24923: PUSH
24924: LD_VAR 0 2
24928: EQUAL
24929: IFFALSE 24989
// begin for i = 1 to array1 do
24931: LD_ADDR_VAR 0 4
24935: PUSH
24936: DOUBLE
24937: LD_INT 1
24939: DEC
24940: ST_TO_ADDR
24941: LD_VAR 0 1
24945: PUSH
24946: FOR_TO
24947: IFFALSE 24985
// if array1 [ i ] <> array2 [ i ] then
24949: LD_VAR 0 1
24953: PUSH
24954: LD_VAR 0 4
24958: ARRAY
24959: PUSH
24960: LD_VAR 0 2
24964: PUSH
24965: LD_VAR 0 4
24969: ARRAY
24970: NONEQUAL
24971: IFFALSE 24983
// begin result := false ;
24973: LD_ADDR_VAR 0 3
24977: PUSH
24978: LD_INT 0
24980: ST_TO_ADDR
// break ;
24981: GO 24985
// end ;
24983: GO 24946
24985: POP
24986: POP
// end else
24987: GO 24997
// result := false ;
24989: LD_ADDR_VAR 0 3
24993: PUSH
24994: LD_INT 0
24996: ST_TO_ADDR
// end ;
24997: LD_VAR 0 3
25001: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
25002: LD_INT 0
25004: PPUSH
25005: PPUSH
25006: PPUSH
// pom := GetBase ( fac ) ;
25007: LD_ADDR_VAR 0 5
25011: PUSH
25012: LD_VAR 0 1
25016: PPUSH
25017: CALL_OW 274
25021: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
25022: LD_ADDR_VAR 0 4
25026: PUSH
25027: LD_VAR 0 2
25031: PUSH
25032: LD_INT 1
25034: ARRAY
25035: PPUSH
25036: LD_VAR 0 2
25040: PUSH
25041: LD_INT 2
25043: ARRAY
25044: PPUSH
25045: LD_VAR 0 2
25049: PUSH
25050: LD_INT 3
25052: ARRAY
25053: PPUSH
25054: LD_VAR 0 2
25058: PUSH
25059: LD_INT 4
25061: ARRAY
25062: PPUSH
25063: CALL_OW 449
25067: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
25068: LD_VAR 0 5
25072: PPUSH
25073: LD_INT 1
25075: PPUSH
25076: CALL_OW 275
25080: PUSH
25081: LD_VAR 0 4
25085: PUSH
25086: LD_INT 1
25088: ARRAY
25089: GREATEREQUAL
25090: PUSH
25091: LD_VAR 0 5
25095: PPUSH
25096: LD_INT 2
25098: PPUSH
25099: CALL_OW 275
25103: PUSH
25104: LD_VAR 0 4
25108: PUSH
25109: LD_INT 2
25111: ARRAY
25112: GREATEREQUAL
25113: AND
25114: PUSH
25115: LD_VAR 0 5
25119: PPUSH
25120: LD_INT 3
25122: PPUSH
25123: CALL_OW 275
25127: PUSH
25128: LD_VAR 0 4
25132: PUSH
25133: LD_INT 3
25135: ARRAY
25136: GREATEREQUAL
25137: AND
25138: IFFALSE 25150
// result := true else
25140: LD_ADDR_VAR 0 3
25144: PUSH
25145: LD_INT 1
25147: ST_TO_ADDR
25148: GO 25158
// result := false ;
25150: LD_ADDR_VAR 0 3
25154: PUSH
25155: LD_INT 0
25157: ST_TO_ADDR
// end ;
25158: LD_VAR 0 3
25162: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
25163: LD_INT 0
25165: PPUSH
25166: PPUSH
25167: PPUSH
25168: PPUSH
// pom := GetBase ( building ) ;
25169: LD_ADDR_VAR 0 3
25173: PUSH
25174: LD_VAR 0 1
25178: PPUSH
25179: CALL_OW 274
25183: ST_TO_ADDR
// if not pom then
25184: LD_VAR 0 3
25188: NOT
25189: IFFALSE 25193
// exit ;
25191: GO 25363
// btype := GetBType ( building ) ;
25193: LD_ADDR_VAR 0 5
25197: PUSH
25198: LD_VAR 0 1
25202: PPUSH
25203: CALL_OW 266
25207: ST_TO_ADDR
// if btype = b_armoury then
25208: LD_VAR 0 5
25212: PUSH
25213: LD_INT 4
25215: EQUAL
25216: IFFALSE 25226
// btype := b_barracks ;
25218: LD_ADDR_VAR 0 5
25222: PUSH
25223: LD_INT 5
25225: ST_TO_ADDR
// if btype = b_depot then
25226: LD_VAR 0 5
25230: PUSH
25231: LD_INT 0
25233: EQUAL
25234: IFFALSE 25244
// btype := b_warehouse ;
25236: LD_ADDR_VAR 0 5
25240: PUSH
25241: LD_INT 1
25243: ST_TO_ADDR
// if btype = b_workshop then
25244: LD_VAR 0 5
25248: PUSH
25249: LD_INT 2
25251: EQUAL
25252: IFFALSE 25262
// btype := b_factory ;
25254: LD_ADDR_VAR 0 5
25258: PUSH
25259: LD_INT 3
25261: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25262: LD_ADDR_VAR 0 4
25266: PUSH
25267: LD_VAR 0 5
25271: PPUSH
25272: LD_VAR 0 1
25276: PPUSH
25277: CALL_OW 248
25281: PPUSH
25282: CALL_OW 450
25286: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25287: LD_ADDR_VAR 0 2
25291: PUSH
25292: LD_VAR 0 3
25296: PPUSH
25297: LD_INT 1
25299: PPUSH
25300: CALL_OW 275
25304: PUSH
25305: LD_VAR 0 4
25309: PUSH
25310: LD_INT 1
25312: ARRAY
25313: GREATEREQUAL
25314: PUSH
25315: LD_VAR 0 3
25319: PPUSH
25320: LD_INT 2
25322: PPUSH
25323: CALL_OW 275
25327: PUSH
25328: LD_VAR 0 4
25332: PUSH
25333: LD_INT 2
25335: ARRAY
25336: GREATEREQUAL
25337: AND
25338: PUSH
25339: LD_VAR 0 3
25343: PPUSH
25344: LD_INT 3
25346: PPUSH
25347: CALL_OW 275
25351: PUSH
25352: LD_VAR 0 4
25356: PUSH
25357: LD_INT 3
25359: ARRAY
25360: GREATEREQUAL
25361: AND
25362: ST_TO_ADDR
// end ;
25363: LD_VAR 0 2
25367: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25368: LD_INT 0
25370: PPUSH
25371: PPUSH
25372: PPUSH
// pom := GetBase ( building ) ;
25373: LD_ADDR_VAR 0 4
25377: PUSH
25378: LD_VAR 0 1
25382: PPUSH
25383: CALL_OW 274
25387: ST_TO_ADDR
// if not pom then
25388: LD_VAR 0 4
25392: NOT
25393: IFFALSE 25397
// exit ;
25395: GO 25498
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25397: LD_ADDR_VAR 0 5
25401: PUSH
25402: LD_VAR 0 2
25406: PPUSH
25407: LD_VAR 0 1
25411: PPUSH
25412: CALL_OW 248
25416: PPUSH
25417: CALL_OW 450
25421: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25422: LD_ADDR_VAR 0 3
25426: PUSH
25427: LD_VAR 0 4
25431: PPUSH
25432: LD_INT 1
25434: PPUSH
25435: CALL_OW 275
25439: PUSH
25440: LD_VAR 0 5
25444: PUSH
25445: LD_INT 1
25447: ARRAY
25448: GREATEREQUAL
25449: PUSH
25450: LD_VAR 0 4
25454: PPUSH
25455: LD_INT 2
25457: PPUSH
25458: CALL_OW 275
25462: PUSH
25463: LD_VAR 0 5
25467: PUSH
25468: LD_INT 2
25470: ARRAY
25471: GREATEREQUAL
25472: AND
25473: PUSH
25474: LD_VAR 0 4
25478: PPUSH
25479: LD_INT 3
25481: PPUSH
25482: CALL_OW 275
25486: PUSH
25487: LD_VAR 0 5
25491: PUSH
25492: LD_INT 3
25494: ARRAY
25495: GREATEREQUAL
25496: AND
25497: ST_TO_ADDR
// end ;
25498: LD_VAR 0 3
25502: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes ; begin
25503: LD_INT 0
25505: PPUSH
25506: PPUSH
25507: PPUSH
25508: PPUSH
25509: PPUSH
25510: PPUSH
25511: PPUSH
// if not base or not btype or not x or not y then
25512: LD_VAR 0 1
25516: NOT
25517: PUSH
25518: LD_VAR 0 2
25522: NOT
25523: OR
25524: PUSH
25525: LD_VAR 0 3
25529: NOT
25530: OR
25531: PUSH
25532: LD_VAR 0 4
25536: NOT
25537: OR
25538: IFFALSE 25542
// exit ;
25540: GO 25814
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
25542: LD_ADDR_VAR 0 12
25546: PUSH
25547: LD_VAR 0 2
25551: PPUSH
25552: LD_VAR 0 3
25556: PPUSH
25557: LD_VAR 0 4
25561: PPUSH
25562: LD_VAR 0 5
25566: PPUSH
25567: LD_VAR 0 1
25571: PUSH
25572: LD_INT 1
25574: ARRAY
25575: PPUSH
25576: CALL_OW 248
25580: PPUSH
25581: LD_INT 0
25583: PPUSH
25584: CALL 26597 0 6
25588: ST_TO_ADDR
// if not hexes then
25589: LD_VAR 0 12
25593: NOT
25594: IFFALSE 25598
// exit ;
25596: GO 25814
// for i = 1 to hexes do
25598: LD_ADDR_VAR 0 7
25602: PUSH
25603: DOUBLE
25604: LD_INT 1
25606: DEC
25607: ST_TO_ADDR
25608: LD_VAR 0 12
25612: PUSH
25613: FOR_TO
25614: IFFALSE 25812
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25616: LD_ADDR_VAR 0 11
25620: PUSH
25621: LD_VAR 0 12
25625: PUSH
25626: LD_VAR 0 7
25630: ARRAY
25631: PUSH
25632: LD_INT 1
25634: ARRAY
25635: PPUSH
25636: LD_VAR 0 12
25640: PUSH
25641: LD_VAR 0 7
25645: ARRAY
25646: PUSH
25647: LD_INT 2
25649: ARRAY
25650: PPUSH
25651: CALL_OW 428
25655: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
25656: LD_VAR 0 11
25660: NOT
25661: PUSH
25662: LD_VAR 0 11
25666: PPUSH
25667: CALL_OW 247
25671: PUSH
25672: LD_INT 3
25674: EQUAL
25675: OR
25676: IFFALSE 25680
// continue ;
25678: GO 25613
// for j = 0 to 5 do
25680: LD_ADDR_VAR 0 8
25684: PUSH
25685: DOUBLE
25686: LD_INT 0
25688: DEC
25689: ST_TO_ADDR
25690: LD_INT 5
25692: PUSH
25693: FOR_TO
25694: IFFALSE 25808
// begin _x := ShiftX ( GetX ( tmp ) , j , 3 ) ;
25696: LD_ADDR_VAR 0 9
25700: PUSH
25701: LD_VAR 0 11
25705: PPUSH
25706: CALL_OW 250
25710: PPUSH
25711: LD_VAR 0 8
25715: PPUSH
25716: LD_INT 3
25718: PPUSH
25719: CALL_OW 272
25723: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 3 ) ;
25724: LD_ADDR_VAR 0 10
25728: PUSH
25729: LD_VAR 0 11
25733: PPUSH
25734: CALL_OW 251
25738: PPUSH
25739: LD_VAR 0 8
25743: PPUSH
25744: LD_INT 3
25746: PPUSH
25747: CALL_OW 273
25751: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25752: LD_VAR 0 9
25756: PPUSH
25757: LD_VAR 0 10
25761: PPUSH
25762: CALL_OW 488
25766: PUSH
25767: LD_VAR 0 9
25771: PPUSH
25772: LD_VAR 0 10
25776: PPUSH
25777: CALL_OW 428
25781: NOT
25782: AND
25783: IFFALSE 25806
// begin ComMoveXY ( tmp , _x , _y ) ;
25785: LD_VAR 0 11
25789: PPUSH
25790: LD_VAR 0 9
25794: PPUSH
25795: LD_VAR 0 10
25799: PPUSH
25800: CALL_OW 111
// break ;
25804: GO 25808
// end ; end ;
25806: GO 25693
25808: POP
25809: POP
// end ;
25810: GO 25613
25812: POP
25813: POP
// end ;
25814: LD_VAR 0 6
25818: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
25819: LD_INT 0
25821: PPUSH
25822: PPUSH
25823: PPUSH
25824: PPUSH
25825: PPUSH
25826: PPUSH
25827: PPUSH
25828: PPUSH
25829: PPUSH
// result := false ;
25830: LD_ADDR_VAR 0 6
25834: PUSH
25835: LD_INT 0
25837: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25838: LD_VAR 0 1
25842: NOT
25843: PUSH
25844: LD_VAR 0 1
25848: PPUSH
25849: CALL_OW 266
25853: PUSH
25854: LD_INT 0
25856: PUSH
25857: LD_INT 1
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: IN
25864: NOT
25865: OR
25866: PUSH
25867: LD_VAR 0 2
25871: NOT
25872: OR
25873: PUSH
25874: LD_VAR 0 5
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: LD_INT 1
25884: PUSH
25885: LD_INT 2
25887: PUSH
25888: LD_INT 3
25890: PUSH
25891: LD_INT 4
25893: PUSH
25894: LD_INT 5
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: IN
25905: NOT
25906: OR
25907: PUSH
25908: LD_VAR 0 3
25912: PPUSH
25913: LD_VAR 0 4
25917: PPUSH
25918: CALL_OW 488
25922: NOT
25923: OR
25924: IFFALSE 25928
// exit ;
25926: GO 26592
// pom := GetBase ( bdepot ) ;
25928: LD_ADDR_VAR 0 9
25932: PUSH
25933: LD_VAR 0 1
25937: PPUSH
25938: CALL_OW 274
25942: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
25943: LD_ADDR_VAR 0 10
25947: PUSH
25948: LD_VAR 0 2
25952: PPUSH
25953: LD_VAR 0 1
25957: PPUSH
25958: CALL_OW 248
25962: PPUSH
25963: CALL_OW 450
25967: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25968: LD_VAR 0 9
25972: PPUSH
25973: LD_INT 1
25975: PPUSH
25976: CALL_OW 275
25980: PUSH
25981: LD_VAR 0 10
25985: PUSH
25986: LD_INT 1
25988: ARRAY
25989: GREATEREQUAL
25990: PUSH
25991: LD_VAR 0 9
25995: PPUSH
25996: LD_INT 2
25998: PPUSH
25999: CALL_OW 275
26003: PUSH
26004: LD_VAR 0 10
26008: PUSH
26009: LD_INT 2
26011: ARRAY
26012: GREATEREQUAL
26013: AND
26014: PUSH
26015: LD_VAR 0 9
26019: PPUSH
26020: LD_INT 3
26022: PPUSH
26023: CALL_OW 275
26027: PUSH
26028: LD_VAR 0 10
26032: PUSH
26033: LD_INT 3
26035: ARRAY
26036: GREATEREQUAL
26037: AND
26038: NOT
26039: IFFALSE 26043
// exit ;
26041: GO 26592
// if GetBType ( bdepot ) = b_depot then
26043: LD_VAR 0 1
26047: PPUSH
26048: CALL_OW 266
26052: PUSH
26053: LD_INT 0
26055: EQUAL
26056: IFFALSE 26068
// dist := 28 else
26058: LD_ADDR_VAR 0 13
26062: PUSH
26063: LD_INT 28
26065: ST_TO_ADDR
26066: GO 26076
// dist := 36 ;
26068: LD_ADDR_VAR 0 13
26072: PUSH
26073: LD_INT 36
26075: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
26076: LD_VAR 0 1
26080: PPUSH
26081: LD_VAR 0 3
26085: PPUSH
26086: LD_VAR 0 4
26090: PPUSH
26091: CALL_OW 297
26095: PUSH
26096: LD_VAR 0 13
26100: GREATER
26101: IFFALSE 26105
// exit ;
26103: GO 26592
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
26105: LD_ADDR_VAR 0 11
26109: PUSH
26110: LD_VAR 0 2
26114: PPUSH
26115: LD_VAR 0 3
26119: PPUSH
26120: LD_VAR 0 4
26124: PPUSH
26125: LD_VAR 0 5
26129: PPUSH
26130: LD_VAR 0 1
26134: PPUSH
26135: CALL_OW 248
26139: PPUSH
26140: LD_INT 0
26142: PPUSH
26143: CALL 26597 0 6
26147: ST_TO_ADDR
// if not hexes then
26148: LD_VAR 0 11
26152: NOT
26153: IFFALSE 26157
// exit ;
26155: GO 26592
// hex := GetHexInfo ( x , y ) ;
26157: LD_ADDR_VAR 0 14
26161: PUSH
26162: LD_VAR 0 3
26166: PPUSH
26167: LD_VAR 0 4
26171: PPUSH
26172: CALL_OW 546
26176: ST_TO_ADDR
// if hex [ 1 ] then
26177: LD_VAR 0 14
26181: PUSH
26182: LD_INT 1
26184: ARRAY
26185: IFFALSE 26189
// exit ;
26187: GO 26592
// height := hex [ 2 ] ;
26189: LD_ADDR_VAR 0 12
26193: PUSH
26194: LD_VAR 0 14
26198: PUSH
26199: LD_INT 2
26201: ARRAY
26202: ST_TO_ADDR
// for i = 1 to hexes do
26203: LD_ADDR_VAR 0 7
26207: PUSH
26208: DOUBLE
26209: LD_INT 1
26211: DEC
26212: ST_TO_ADDR
26213: LD_VAR 0 11
26217: PUSH
26218: FOR_TO
26219: IFFALSE 26547
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26221: LD_VAR 0 11
26225: PUSH
26226: LD_VAR 0 7
26230: ARRAY
26231: PUSH
26232: LD_INT 1
26234: ARRAY
26235: PPUSH
26236: LD_VAR 0 11
26240: PUSH
26241: LD_VAR 0 7
26245: ARRAY
26246: PUSH
26247: LD_INT 2
26249: ARRAY
26250: PPUSH
26251: CALL_OW 488
26255: NOT
26256: IFFALSE 26260
// continue ;
26258: GO 26218
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26260: LD_ADDR_VAR 0 8
26264: PUSH
26265: LD_VAR 0 11
26269: PUSH
26270: LD_VAR 0 7
26274: ARRAY
26275: PUSH
26276: LD_INT 1
26278: ARRAY
26279: PPUSH
26280: LD_VAR 0 11
26284: PUSH
26285: LD_VAR 0 7
26289: ARRAY
26290: PUSH
26291: LD_INT 2
26293: ARRAY
26294: PPUSH
26295: CALL_OW 546
26299: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26300: LD_VAR 0 8
26304: PUSH
26305: LD_INT 1
26307: ARRAY
26308: PUSH
26309: LD_VAR 0 8
26313: PUSH
26314: LD_INT 2
26316: ARRAY
26317: PUSH
26318: LD_VAR 0 12
26322: PUSH
26323: LD_INT 2
26325: PLUS
26326: GREATER
26327: OR
26328: PUSH
26329: LD_VAR 0 8
26333: PUSH
26334: LD_INT 2
26336: ARRAY
26337: PUSH
26338: LD_VAR 0 12
26342: PUSH
26343: LD_INT 2
26345: MINUS
26346: LESS
26347: OR
26348: PUSH
26349: LD_VAR 0 8
26353: PUSH
26354: LD_INT 3
26356: ARRAY
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: LD_INT 8
26363: PUSH
26364: LD_INT 9
26366: PUSH
26367: LD_INT 10
26369: PUSH
26370: LD_INT 11
26372: PUSH
26373: LD_INT 12
26375: PUSH
26376: LD_INT 13
26378: PUSH
26379: LD_INT 16
26381: PUSH
26382: LD_INT 17
26384: PUSH
26385: LD_INT 18
26387: PUSH
26388: LD_INT 19
26390: PUSH
26391: LD_INT 20
26393: PUSH
26394: LD_INT 21
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: IN
26412: NOT
26413: OR
26414: PUSH
26415: LD_VAR 0 8
26419: PUSH
26420: LD_INT 5
26422: ARRAY
26423: NOT
26424: OR
26425: PUSH
26426: LD_VAR 0 8
26430: PUSH
26431: LD_INT 6
26433: ARRAY
26434: PUSH
26435: LD_INT 1
26437: PUSH
26438: LD_INT 2
26440: PUSH
26441: LD_INT 7
26443: PUSH
26444: LD_INT 9
26446: PUSH
26447: LD_INT 10
26449: PUSH
26450: LD_INT 11
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: IN
26461: NOT
26462: OR
26463: PUSH
26464: LD_VAR 0 11
26468: PUSH
26469: LD_VAR 0 7
26473: ARRAY
26474: PUSH
26475: LD_INT 1
26477: ARRAY
26478: PPUSH
26479: LD_VAR 0 11
26483: PUSH
26484: LD_VAR 0 7
26488: ARRAY
26489: PUSH
26490: LD_INT 2
26492: ARRAY
26493: PPUSH
26494: CALL_OW 428
26498: PUSH
26499: LD_INT 0
26501: GREATER
26502: OR
26503: PUSH
26504: LD_VAR 0 11
26508: PUSH
26509: LD_VAR 0 7
26513: ARRAY
26514: PUSH
26515: LD_INT 1
26517: ARRAY
26518: PPUSH
26519: LD_VAR 0 11
26523: PUSH
26524: LD_VAR 0 7
26528: ARRAY
26529: PUSH
26530: LD_INT 2
26532: ARRAY
26533: PPUSH
26534: CALL_OW 351
26538: OR
26539: IFFALSE 26545
// exit ;
26541: POP
26542: POP
26543: GO 26592
// end ;
26545: GO 26218
26547: POP
26548: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
26549: LD_VAR 0 1
26553: PPUSH
26554: CALL_OW 255
26558: PPUSH
26559: LD_VAR 0 3
26563: PPUSH
26564: LD_VAR 0 4
26568: PPUSH
26569: LD_INT 20
26571: PPUSH
26572: CALL 19803 0 4
26576: PUSH
26577: LD_INT 4
26579: ARRAY
26580: IFFALSE 26584
// exit ;
26582: GO 26592
// result := true ;
26584: LD_ADDR_VAR 0 6
26588: PUSH
26589: LD_INT 1
26591: ST_TO_ADDR
// end ;
26592: LD_VAR 0 6
26596: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
26597: LD_INT 0
26599: PPUSH
26600: PPUSH
26601: PPUSH
26602: PPUSH
26603: PPUSH
26604: PPUSH
26605: PPUSH
26606: PPUSH
26607: PPUSH
26608: PPUSH
26609: PPUSH
26610: PPUSH
26611: PPUSH
26612: PPUSH
26613: PPUSH
26614: PPUSH
26615: PPUSH
26616: PPUSH
26617: PPUSH
26618: PPUSH
26619: PPUSH
26620: PPUSH
26621: PPUSH
26622: PPUSH
26623: PPUSH
26624: PPUSH
26625: PPUSH
26626: PPUSH
26627: PPUSH
26628: PPUSH
26629: PPUSH
26630: PPUSH
26631: PPUSH
26632: PPUSH
26633: PPUSH
26634: PPUSH
26635: PPUSH
26636: PPUSH
26637: PPUSH
26638: PPUSH
26639: PPUSH
26640: PPUSH
26641: PPUSH
26642: PPUSH
26643: PPUSH
26644: PPUSH
26645: PPUSH
26646: PPUSH
26647: PPUSH
26648: PPUSH
26649: PPUSH
26650: PPUSH
26651: PPUSH
26652: PPUSH
26653: PPUSH
26654: PPUSH
26655: PPUSH
26656: PPUSH
// result = [ ] ;
26657: LD_ADDR_VAR 0 7
26661: PUSH
26662: EMPTY
26663: ST_TO_ADDR
// temp_list = [ ] ;
26664: LD_ADDR_VAR 0 9
26668: PUSH
26669: EMPTY
26670: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26671: LD_VAR 0 4
26675: PUSH
26676: LD_INT 0
26678: PUSH
26679: LD_INT 1
26681: PUSH
26682: LD_INT 2
26684: PUSH
26685: LD_INT 3
26687: PUSH
26688: LD_INT 4
26690: PUSH
26691: LD_INT 5
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: IN
26702: NOT
26703: PUSH
26704: LD_VAR 0 1
26708: PUSH
26709: LD_INT 0
26711: PUSH
26712: LD_INT 1
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: IN
26719: PUSH
26720: LD_VAR 0 5
26724: PUSH
26725: LD_INT 1
26727: PUSH
26728: LD_INT 2
26730: PUSH
26731: LD_INT 3
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: LIST
26738: IN
26739: NOT
26740: AND
26741: OR
26742: IFFALSE 26746
// exit ;
26744: GO 45131
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26746: LD_VAR 0 1
26750: PUSH
26751: LD_INT 6
26753: PUSH
26754: LD_INT 7
26756: PUSH
26757: LD_INT 8
26759: PUSH
26760: LD_INT 13
26762: PUSH
26763: LD_INT 12
26765: PUSH
26766: LD_INT 15
26768: PUSH
26769: LD_INT 11
26771: PUSH
26772: LD_INT 14
26774: PUSH
26775: LD_INT 10
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: IN
26789: IFFALSE 26799
// btype = b_lab ;
26791: LD_ADDR_VAR 0 1
26795: PUSH
26796: LD_INT 6
26798: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26799: LD_VAR 0 6
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: LD_INT 2
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: LIST
26817: IN
26818: NOT
26819: PUSH
26820: LD_VAR 0 1
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: LD_INT 1
26830: PUSH
26831: LD_INT 2
26833: PUSH
26834: LD_INT 3
26836: PUSH
26837: LD_INT 6
26839: PUSH
26840: LD_INT 36
26842: PUSH
26843: LD_INT 4
26845: PUSH
26846: LD_INT 5
26848: PUSH
26849: LD_INT 31
26851: PUSH
26852: LD_INT 32
26854: PUSH
26855: LD_INT 33
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: IN
26871: NOT
26872: PUSH
26873: LD_VAR 0 6
26877: PUSH
26878: LD_INT 1
26880: EQUAL
26881: AND
26882: OR
26883: PUSH
26884: LD_VAR 0 1
26888: PUSH
26889: LD_INT 2
26891: PUSH
26892: LD_INT 3
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: IN
26899: NOT
26900: PUSH
26901: LD_VAR 0 6
26905: PUSH
26906: LD_INT 2
26908: EQUAL
26909: AND
26910: OR
26911: IFFALSE 26921
// mode = 0 ;
26913: LD_ADDR_VAR 0 6
26917: PUSH
26918: LD_INT 0
26920: ST_TO_ADDR
// case mode of 0 :
26921: LD_VAR 0 6
26925: PUSH
26926: LD_INT 0
26928: DOUBLE
26929: EQUAL
26930: IFTRUE 26934
26932: GO 38387
26934: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26935: LD_ADDR_VAR 0 11
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: LD_INT 0
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 1
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: NEG
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 1
27004: NEG
27005: PUSH
27006: LD_INT 1
27008: NEG
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 1
27016: NEG
27017: PUSH
27018: LD_INT 2
27020: NEG
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: LD_INT 2
27031: NEG
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 1
27050: PUSH
27051: LD_INT 2
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 0
27060: PUSH
27061: LD_INT 2
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 1
27070: NEG
27071: PUSH
27072: LD_INT 1
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 1
27081: PUSH
27082: LD_INT 3
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: LD_INT 3
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: LD_INT 2
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27128: LD_ADDR_VAR 0 12
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 0
27145: PUSH
27146: LD_INT 1
27148: NEG
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: LD_INT 0
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 1
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 0
27176: PUSH
27177: LD_INT 1
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: LD_INT 0
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 1
27197: NEG
27198: PUSH
27199: LD_INT 1
27201: NEG
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 1
27209: PUSH
27210: LD_INT 1
27212: NEG
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 2
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 2
27230: PUSH
27231: LD_INT 1
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 1
27240: NEG
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 2
27251: NEG
27252: PUSH
27253: LD_INT 0
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 2
27262: NEG
27263: PUSH
27264: LD_INT 1
27266: NEG
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 2
27274: NEG
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 3
27285: NEG
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 3
27296: NEG
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27324: LD_ADDR_VAR 0 13
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: LD_INT 0
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: LD_INT 1
27344: NEG
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: LD_INT 1
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 1
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 1
27382: NEG
27383: PUSH
27384: LD_INT 0
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: NEG
27394: PUSH
27395: LD_INT 1
27397: NEG
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 1
27405: NEG
27406: PUSH
27407: LD_INT 2
27409: NEG
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 2
27417: PUSH
27418: LD_INT 1
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 2
27427: PUSH
27428: LD_INT 2
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: LD_INT 2
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 2
27447: NEG
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 2
27459: NEG
27460: PUSH
27461: LD_INT 2
27463: NEG
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 2
27471: NEG
27472: PUSH
27473: LD_INT 3
27475: NEG
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 3
27483: NEG
27484: PUSH
27485: LD_INT 2
27487: NEG
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 3
27495: NEG
27496: PUSH
27497: LD_INT 3
27499: NEG
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27523: LD_ADDR_VAR 0 14
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: LD_INT 0
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: LD_INT 1
27543: NEG
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 1
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 1
27561: PUSH
27562: LD_INT 1
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: NEG
27582: PUSH
27583: LD_INT 0
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: PUSH
27594: LD_INT 1
27596: NEG
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 1
27604: NEG
27605: PUSH
27606: LD_INT 2
27608: NEG
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 0
27616: PUSH
27617: LD_INT 2
27619: NEG
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 1
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: LD_INT 2
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: LD_INT 2
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 1
27658: NEG
27659: PUSH
27660: LD_INT 1
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: PUSH
27671: LD_INT 3
27673: NEG
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: LD_INT 3
27684: NEG
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 1
27692: PUSH
27693: LD_INT 2
27695: NEG
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27719: LD_ADDR_VAR 0 15
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: LD_INT 1
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 2
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: LD_INT 1
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 1
27831: NEG
27832: PUSH
27833: LD_INT 1
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 2
27842: NEG
27843: PUSH
27844: LD_INT 0
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 2
27853: NEG
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 2
27865: PUSH
27866: LD_INT 1
27868: NEG
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 3
27876: PUSH
27877: LD_INT 0
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 3
27886: PUSH
27887: LD_INT 1
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27912: LD_ADDR_VAR 0 16
27916: PUSH
27917: LD_INT 0
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 0
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 0
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: NEG
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: NEG
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 1
27993: NEG
27994: PUSH
27995: LD_INT 2
27997: NEG
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 2
28005: PUSH
28006: LD_INT 1
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 2
28015: PUSH
28016: LD_INT 2
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 1
28025: PUSH
28026: LD_INT 2
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 2
28035: NEG
28036: PUSH
28037: LD_INT 1
28039: NEG
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 2
28047: NEG
28048: PUSH
28049: LD_INT 2
28051: NEG
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 3
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 3
28069: PUSH
28070: LD_INT 3
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 2
28079: PUSH
28080: LD_INT 3
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28105: LD_ADDR_VAR 0 17
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 1
28143: PUSH
28144: LD_INT 1
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 0
28153: PUSH
28154: LD_INT 1
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 1
28163: NEG
28164: PUSH
28165: LD_INT 0
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 1
28186: NEG
28187: PUSH
28188: LD_INT 2
28190: NEG
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 0
28198: PUSH
28199: LD_INT 2
28201: NEG
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 2
28220: PUSH
28221: LD_INT 0
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 2
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 2
28240: PUSH
28241: LD_INT 2
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 1
28250: PUSH
28251: LD_INT 2
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 0
28260: PUSH
28261: LD_INT 2
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 1
28270: NEG
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 2
28281: NEG
28282: PUSH
28283: LD_INT 0
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 2
28292: NEG
28293: PUSH
28294: LD_INT 1
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 2
28304: NEG
28305: PUSH
28306: LD_INT 2
28308: NEG
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28335: LD_ADDR_VAR 0 18
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: LD_INT 1
28355: NEG
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 1
28363: PUSH
28364: LD_INT 0
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 1
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 0
28383: PUSH
28384: LD_INT 1
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 1
28393: NEG
28394: PUSH
28395: LD_INT 0
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: PUSH
28406: LD_INT 1
28408: NEG
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 1
28416: NEG
28417: PUSH
28418: LD_INT 2
28420: NEG
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: LD_INT 2
28431: NEG
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 2
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 2
28470: PUSH
28471: LD_INT 2
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: LD_INT 2
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: LD_INT 2
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 1
28500: NEG
28501: PUSH
28502: LD_INT 1
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 2
28511: NEG
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 2
28522: NEG
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 2
28534: NEG
28535: PUSH
28536: LD_INT 2
28538: NEG
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28565: LD_ADDR_VAR 0 19
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 1
28603: PUSH
28604: LD_INT 1
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: LD_INT 1
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 1
28623: NEG
28624: PUSH
28625: LD_INT 0
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: LD_INT 1
28638: NEG
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PUSH
28648: LD_INT 2
28650: NEG
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 0
28658: PUSH
28659: LD_INT 2
28661: NEG
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 1
28669: PUSH
28670: LD_INT 1
28672: NEG
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 2
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 2
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 2
28700: PUSH
28701: LD_INT 2
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: LD_INT 2
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: LD_INT 2
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 2
28741: NEG
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 2
28752: NEG
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 2
28764: NEG
28765: PUSH
28766: LD_INT 2
28768: NEG
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28795: LD_ADDR_VAR 0 20
28799: PUSH
28800: LD_INT 0
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: LD_INT 1
28815: NEG
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 1
28823: PUSH
28824: LD_INT 0
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: LD_INT 1
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 1
28853: NEG
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: LD_INT 1
28868: NEG
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 1
28876: NEG
28877: PUSH
28878: LD_INT 2
28880: NEG
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: LD_INT 2
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 1
28899: PUSH
28900: LD_INT 1
28902: NEG
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 2
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 2
28920: PUSH
28921: LD_INT 1
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 2
28930: PUSH
28931: LD_INT 2
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: LD_INT 2
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 0
28950: PUSH
28951: LD_INT 2
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 1
28960: NEG
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 2
28971: NEG
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: LD_INT 1
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 2
28994: NEG
28995: PUSH
28996: LD_INT 2
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29025: LD_ADDR_VAR 0 21
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 0
29042: PUSH
29043: LD_INT 1
29045: NEG
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 1
29053: PUSH
29054: LD_INT 0
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: LD_INT 1
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 0
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 1
29083: NEG
29084: PUSH
29085: LD_INT 0
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 1
29094: NEG
29095: PUSH
29096: LD_INT 1
29098: NEG
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 1
29106: NEG
29107: PUSH
29108: LD_INT 2
29110: NEG
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 0
29118: PUSH
29119: LD_INT 2
29121: NEG
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: LD_INT 1
29132: NEG
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 2
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 2
29150: PUSH
29151: LD_INT 1
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 2
29160: PUSH
29161: LD_INT 2
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: LD_INT 2
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 0
29180: PUSH
29181: LD_INT 2
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 1
29190: NEG
29191: PUSH
29192: LD_INT 1
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 2
29201: NEG
29202: PUSH
29203: LD_INT 0
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 2
29212: NEG
29213: PUSH
29214: LD_INT 1
29216: NEG
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 2
29224: NEG
29225: PUSH
29226: LD_INT 2
29228: NEG
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29255: LD_ADDR_VAR 0 22
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: LD_INT 0
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 0
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 1
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 0
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 1
29313: NEG
29314: PUSH
29315: LD_INT 0
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 1
29324: NEG
29325: PUSH
29326: LD_INT 1
29328: NEG
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 1
29336: NEG
29337: PUSH
29338: LD_INT 2
29340: NEG
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: LD_INT 2
29351: NEG
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 1
29359: PUSH
29360: LD_INT 1
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 2
29370: PUSH
29371: LD_INT 0
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 2
29380: PUSH
29381: LD_INT 1
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 2
29390: PUSH
29391: LD_INT 2
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: LD_INT 2
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 0
29410: PUSH
29411: LD_INT 2
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 1
29420: NEG
29421: PUSH
29422: LD_INT 1
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 2
29431: NEG
29432: PUSH
29433: LD_INT 0
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 2
29442: NEG
29443: PUSH
29444: LD_INT 1
29446: NEG
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 2
29454: NEG
29455: PUSH
29456: LD_INT 2
29458: NEG
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29485: LD_ADDR_VAR 0 23
29489: PUSH
29490: LD_INT 0
29492: PUSH
29493: LD_INT 0
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 0
29502: PUSH
29503: LD_INT 1
29505: NEG
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 1
29513: PUSH
29514: LD_INT 0
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: LD_INT 1
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 0
29533: PUSH
29534: LD_INT 1
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 1
29543: NEG
29544: PUSH
29545: LD_INT 0
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 1
29554: NEG
29555: PUSH
29556: LD_INT 1
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: LD_INT 2
29570: NEG
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 0
29578: PUSH
29579: LD_INT 2
29581: NEG
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 1
29589: PUSH
29590: LD_INT 1
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 2
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 2
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 2
29620: PUSH
29621: LD_INT 2
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: LD_INT 2
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 0
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 1
29650: NEG
29651: PUSH
29652: LD_INT 1
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 2
29661: NEG
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 2
29672: NEG
29673: PUSH
29674: LD_INT 1
29676: NEG
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 2
29684: NEG
29685: PUSH
29686: LD_INT 2
29688: NEG
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 2
29696: NEG
29697: PUSH
29698: LD_INT 3
29700: NEG
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 1
29708: NEG
29709: PUSH
29710: LD_INT 3
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: LD_INT 2
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 2
29731: PUSH
29732: LD_INT 1
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29765: LD_ADDR_VAR 0 24
29769: PUSH
29770: LD_INT 0
29772: PUSH
29773: LD_INT 0
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 1
29793: PUSH
29794: LD_INT 0
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 0
29813: PUSH
29814: LD_INT 1
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 1
29834: NEG
29835: PUSH
29836: LD_INT 1
29838: NEG
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: LD_INT 2
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: LD_INT 2
29861: NEG
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 1
29869: PUSH
29870: LD_INT 1
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 2
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 2
29890: PUSH
29891: LD_INT 1
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 2
29900: PUSH
29901: LD_INT 2
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 1
29910: PUSH
29911: LD_INT 2
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: LD_INT 2
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: NEG
29931: PUSH
29932: LD_INT 1
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 2
29941: NEG
29942: PUSH
29943: LD_INT 0
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 2
29952: NEG
29953: PUSH
29954: LD_INT 1
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 2
29964: NEG
29965: PUSH
29966: LD_INT 2
29968: NEG
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 1
29976: PUSH
29977: LD_INT 2
29979: NEG
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 2
29987: PUSH
29988: LD_INT 1
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 3
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 3
30008: PUSH
30009: LD_INT 2
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30041: LD_ADDR_VAR 0 25
30045: PUSH
30046: LD_INT 0
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: LD_INT 1
30061: NEG
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 1
30069: PUSH
30070: LD_INT 0
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 0
30089: PUSH
30090: LD_INT 1
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: PUSH
30101: LD_INT 0
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 1
30110: NEG
30111: PUSH
30112: LD_INT 1
30114: NEG
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 1
30122: NEG
30123: PUSH
30124: LD_INT 2
30126: NEG
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: LD_INT 2
30137: NEG
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 1
30145: PUSH
30146: LD_INT 1
30148: NEG
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 2
30156: PUSH
30157: LD_INT 0
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 2
30166: PUSH
30167: LD_INT 1
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 2
30176: PUSH
30177: LD_INT 2
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 1
30186: PUSH
30187: LD_INT 2
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 0
30196: PUSH
30197: LD_INT 2
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 1
30206: NEG
30207: PUSH
30208: LD_INT 1
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 2
30217: NEG
30218: PUSH
30219: LD_INT 0
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 2
30228: NEG
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 2
30240: NEG
30241: PUSH
30242: LD_INT 2
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 3
30252: PUSH
30253: LD_INT 1
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 3
30262: PUSH
30263: LD_INT 2
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 2
30272: PUSH
30273: LD_INT 3
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: LD_INT 3
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30315: LD_ADDR_VAR 0 26
30319: PUSH
30320: LD_INT 0
30322: PUSH
30323: LD_INT 0
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: LD_INT 1
30335: NEG
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 1
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 1
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: LD_INT 1
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 1
30373: NEG
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 1
30384: NEG
30385: PUSH
30386: LD_INT 1
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: LD_INT 2
30400: NEG
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 0
30408: PUSH
30409: LD_INT 2
30411: NEG
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 1
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 2
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 2
30440: PUSH
30441: LD_INT 1
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 2
30450: PUSH
30451: LD_INT 2
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: LD_INT 2
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 0
30470: PUSH
30471: LD_INT 2
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 1
30480: NEG
30481: PUSH
30482: LD_INT 1
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 2
30491: NEG
30492: PUSH
30493: LD_INT 0
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 2
30502: NEG
30503: PUSH
30504: LD_INT 1
30506: NEG
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 2
30514: NEG
30515: PUSH
30516: LD_INT 2
30518: NEG
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 2
30526: PUSH
30527: LD_INT 3
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 1
30536: PUSH
30537: LD_INT 3
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 1
30546: NEG
30547: PUSH
30548: LD_INT 2
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 2
30557: NEG
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30591: LD_ADDR_VAR 0 27
30595: PUSH
30596: LD_INT 0
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: LD_INT 1
30611: NEG
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 1
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 1
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 0
30639: PUSH
30640: LD_INT 1
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 1
30649: NEG
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 1
30660: NEG
30661: PUSH
30662: LD_INT 1
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 1
30672: NEG
30673: PUSH
30674: LD_INT 2
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 0
30684: PUSH
30685: LD_INT 2
30687: NEG
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 1
30695: PUSH
30696: LD_INT 1
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: LD_INT 1
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 2
30726: PUSH
30727: LD_INT 2
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 1
30736: PUSH
30737: LD_INT 2
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 0
30746: PUSH
30747: LD_INT 2
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 1
30756: NEG
30757: PUSH
30758: LD_INT 1
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 2
30767: NEG
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 2
30778: NEG
30779: PUSH
30780: LD_INT 1
30782: NEG
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 2
30790: NEG
30791: PUSH
30792: LD_INT 2
30794: NEG
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 1
30802: NEG
30803: PUSH
30804: LD_INT 2
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 2
30813: NEG
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 3
30824: NEG
30825: PUSH
30826: LD_INT 1
30828: NEG
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 3
30836: NEG
30837: PUSH
30838: LD_INT 2
30840: NEG
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30871: LD_ADDR_VAR 0 28
30875: PUSH
30876: LD_INT 0
30878: PUSH
30879: LD_INT 0
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 0
30888: PUSH
30889: LD_INT 1
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: LD_INT 1
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 0
30919: PUSH
30920: LD_INT 1
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: NEG
30930: PUSH
30931: LD_INT 0
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 1
30940: NEG
30941: PUSH
30942: LD_INT 1
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 1
30952: NEG
30953: PUSH
30954: LD_INT 2
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 0
30964: PUSH
30965: LD_INT 2
30967: NEG
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: PUSH
30976: LD_INT 1
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 2
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 2
30996: PUSH
30997: LD_INT 1
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 2
31006: PUSH
31007: LD_INT 2
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 1
31016: PUSH
31017: LD_INT 2
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 0
31026: PUSH
31027: LD_INT 2
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 1
31036: NEG
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 2
31047: NEG
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 2
31058: NEG
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 2
31070: NEG
31071: PUSH
31072: LD_INT 2
31074: NEG
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 2
31082: NEG
31083: PUSH
31084: LD_INT 3
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: NEG
31095: PUSH
31096: LD_INT 3
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 3
31106: NEG
31107: PUSH
31108: LD_INT 1
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 3
31118: NEG
31119: PUSH
31120: LD_INT 2
31122: NEG
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31153: LD_ADDR_VAR 0 29
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 0
31170: PUSH
31171: LD_INT 1
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: LD_INT 0
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: LD_INT 1
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: LD_INT 1
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 1
31211: NEG
31212: PUSH
31213: LD_INT 0
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 1
31222: NEG
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 1
31234: NEG
31235: PUSH
31236: LD_INT 2
31238: NEG
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: LD_INT 2
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: LD_INT 1
31260: NEG
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 2
31268: PUSH
31269: LD_INT 0
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 2
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 1
31288: PUSH
31289: LD_INT 2
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 0
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 1
31308: NEG
31309: PUSH
31310: LD_INT 1
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 2
31319: NEG
31320: PUSH
31321: LD_INT 1
31323: NEG
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 2
31331: NEG
31332: PUSH
31333: LD_INT 2
31335: NEG
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 2
31343: NEG
31344: PUSH
31345: LD_INT 3
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 2
31355: PUSH
31356: LD_INT 1
31358: NEG
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 3
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: LD_INT 3
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 1
31386: NEG
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 3
31397: NEG
31398: PUSH
31399: LD_INT 2
31401: NEG
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31432: LD_ADDR_VAR 0 30
31436: PUSH
31437: LD_INT 0
31439: PUSH
31440: LD_INT 0
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 1
31460: PUSH
31461: LD_INT 0
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 1
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 0
31480: PUSH
31481: LD_INT 1
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 1
31490: NEG
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 1
31501: NEG
31502: PUSH
31503: LD_INT 1
31505: NEG
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 1
31513: NEG
31514: PUSH
31515: LD_INT 2
31517: NEG
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: LD_INT 2
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: LD_INT 1
31539: NEG
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 2
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 2
31557: PUSH
31558: LD_INT 1
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 2
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 1
31577: PUSH
31578: LD_INT 2
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 1
31587: NEG
31588: PUSH
31589: LD_INT 1
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 2
31598: NEG
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 2
31609: NEG
31610: PUSH
31611: LD_INT 1
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 1
31621: NEG
31622: PUSH
31623: LD_INT 3
31625: NEG
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: LD_INT 2
31636: NEG
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 3
31644: PUSH
31645: LD_INT 2
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: LD_INT 3
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 2
31664: NEG
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 3
31675: NEG
31676: PUSH
31677: LD_INT 1
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31710: LD_ADDR_VAR 0 31
31714: PUSH
31715: LD_INT 0
31717: PUSH
31718: LD_INT 0
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 0
31727: PUSH
31728: LD_INT 1
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 1
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 1
31748: PUSH
31749: LD_INT 1
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 0
31758: PUSH
31759: LD_INT 1
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 1
31779: NEG
31780: PUSH
31781: LD_INT 1
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: LD_INT 2
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 1
31803: PUSH
31804: LD_INT 1
31806: NEG
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 2
31814: PUSH
31815: LD_INT 0
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 2
31824: PUSH
31825: LD_INT 1
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 2
31834: PUSH
31835: LD_INT 2
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: LD_INT 2
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: LD_INT 1
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 2
31875: NEG
31876: PUSH
31877: LD_INT 1
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 2
31887: NEG
31888: PUSH
31889: LD_INT 2
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: LD_INT 3
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 2
31911: PUSH
31912: LD_INT 1
31914: NEG
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 3
31922: PUSH
31923: LD_INT 1
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 1
31932: PUSH
31933: LD_INT 3
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 1
31942: NEG
31943: PUSH
31944: LD_INT 2
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 3
31953: NEG
31954: PUSH
31955: LD_INT 2
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31988: LD_ADDR_VAR 0 32
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 0
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 1
32016: PUSH
32017: LD_INT 0
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 1
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 0
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 1
32046: NEG
32047: PUSH
32048: LD_INT 0
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: LD_INT 1
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 1
32069: NEG
32070: PUSH
32071: LD_INT 2
32073: NEG
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 0
32081: PUSH
32082: LD_INT 2
32084: NEG
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 1
32092: PUSH
32093: LD_INT 1
32095: NEG
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 2
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 1
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 0
32133: PUSH
32134: LD_INT 2
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 1
32143: NEG
32144: PUSH
32145: LD_INT 1
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 2
32154: NEG
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 2
32165: NEG
32166: PUSH
32167: LD_INT 1
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 1
32177: NEG
32178: PUSH
32179: LD_INT 3
32181: NEG
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: LD_INT 2
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: LD_INT 2
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 2
32210: PUSH
32211: LD_INT 3
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 2
32220: NEG
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 3
32231: NEG
32232: PUSH
32233: LD_INT 1
32235: NEG
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32266: LD_ADDR_VAR 0 33
32270: PUSH
32271: LD_INT 0
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 0
32283: PUSH
32284: LD_INT 1
32286: NEG
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 1
32294: PUSH
32295: LD_INT 0
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 1
32304: PUSH
32305: LD_INT 1
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 0
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 1
32324: NEG
32325: PUSH
32326: LD_INT 0
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 1
32335: NEG
32336: PUSH
32337: LD_INT 1
32339: NEG
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 1
32347: NEG
32348: PUSH
32349: LD_INT 2
32351: NEG
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: LD_INT 1
32362: NEG
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 2
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 1
32390: PUSH
32391: LD_INT 2
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: LD_INT 2
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 2
32421: NEG
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 2
32432: NEG
32433: PUSH
32434: LD_INT 1
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 2
32444: NEG
32445: PUSH
32446: LD_INT 2
32448: NEG
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 2
32456: NEG
32457: PUSH
32458: LD_INT 3
32460: NEG
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 2
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 3
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: PUSH
32490: LD_INT 3
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 1
32499: NEG
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 3
32510: NEG
32511: PUSH
32512: LD_INT 2
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32545: LD_ADDR_VAR 0 34
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: LD_INT 1
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 1
32583: PUSH
32584: LD_INT 1
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 1
32603: NEG
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 1
32614: NEG
32615: PUSH
32616: LD_INT 1
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 1
32626: NEG
32627: PUSH
32628: LD_INT 2
32630: NEG
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: LD_INT 2
32641: NEG
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: PUSH
32650: LD_INT 1
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 2
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 2
32670: PUSH
32671: LD_INT 2
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: LD_INT 2
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 1
32690: NEG
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 2
32701: NEG
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 2
32712: NEG
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 2
32724: NEG
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 1
32736: NEG
32737: PUSH
32738: LD_INT 3
32740: NEG
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 1
32748: PUSH
32749: LD_INT 2
32751: NEG
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 3
32759: PUSH
32760: LD_INT 2
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: LD_INT 3
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 2
32779: NEG
32780: PUSH
32781: LD_INT 1
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 3
32790: NEG
32791: PUSH
32792: LD_INT 1
32794: NEG
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32825: LD_ADDR_VAR 0 35
32829: PUSH
32830: LD_INT 0
32832: PUSH
32833: LD_INT 0
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 0
32842: PUSH
32843: LD_INT 1
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 1
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 1
32883: NEG
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 1
32894: NEG
32895: PUSH
32896: LD_INT 1
32898: NEG
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: LD_INT 1
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 2
32916: NEG
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32937: LD_ADDR_VAR 0 36
32941: PUSH
32942: LD_INT 0
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 0
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 1
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 1
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 1
32995: NEG
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: LD_INT 1
33010: NEG
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 1
33018: NEG
33019: PUSH
33020: LD_INT 2
33022: NEG
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: LD_INT 2
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33049: LD_ADDR_VAR 0 37
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: LD_INT 0
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: LD_INT 1
33122: NEG
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: PUSH
33131: LD_INT 1
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 1
33141: NEG
33142: PUSH
33143: LD_INT 1
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33161: LD_ADDR_VAR 0 38
33165: PUSH
33166: LD_INT 0
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: LD_INT 1
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 1
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: LD_INT 1
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 0
33209: PUSH
33210: LD_INT 1
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 1
33219: NEG
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 1
33230: NEG
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 2
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 2
33252: NEG
33253: PUSH
33254: LD_INT 1
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33273: LD_ADDR_VAR 0 39
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 1
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: LD_INT 1
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 1
33331: NEG
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 1
33342: NEG
33343: PUSH
33344: LD_INT 1
33346: NEG
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: LD_INT 2
33358: NEG
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 1
33366: PUSH
33367: LD_INT 2
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33385: LD_ADDR_VAR 0 40
33389: PUSH
33390: LD_INT 0
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 0
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 1
33413: PUSH
33414: LD_INT 0
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 1
33423: PUSH
33424: LD_INT 1
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: LD_INT 1
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 1
33443: NEG
33444: PUSH
33445: LD_INT 0
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 1
33454: NEG
33455: PUSH
33456: LD_INT 1
33458: NEG
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: LD_INT 1
33469: NEG
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 1
33477: NEG
33478: PUSH
33479: LD_INT 1
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33497: LD_ADDR_VAR 0 41
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 1
33525: PUSH
33526: LD_INT 0
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: NEG
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 1
33566: NEG
33567: PUSH
33568: LD_INT 1
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 1
33578: NEG
33579: PUSH
33580: LD_INT 2
33582: NEG
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 1
33590: PUSH
33591: LD_INT 1
33593: NEG
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 2
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 2
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 1
33631: PUSH
33632: LD_INT 2
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: LD_INT 1
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: LD_INT 0
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 2
33663: NEG
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 2
33675: NEG
33676: PUSH
33677: LD_INT 2
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 2
33687: NEG
33688: PUSH
33689: LD_INT 3
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 2
33699: PUSH
33700: LD_INT 1
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 3
33710: PUSH
33711: LD_INT 0
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 3
33720: PUSH
33721: LD_INT 1
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 3
33730: PUSH
33731: LD_INT 2
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 3
33740: PUSH
33741: LD_INT 3
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 2
33750: PUSH
33751: LD_INT 3
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 2
33760: NEG
33761: PUSH
33762: LD_INT 1
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 3
33771: NEG
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 3
33782: NEG
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 3
33794: NEG
33795: PUSH
33796: LD_INT 2
33798: NEG
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 3
33806: NEG
33807: PUSH
33808: LD_INT 3
33810: NEG
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33847: LD_ADDR_VAR 0 42
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 0
33864: PUSH
33865: LD_INT 1
33867: NEG
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 1
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 1
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 0
33895: PUSH
33896: LD_INT 1
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 1
33905: NEG
33906: PUSH
33907: LD_INT 0
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 1
33916: NEG
33917: PUSH
33918: LD_INT 1
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 1
33928: NEG
33929: PUSH
33930: LD_INT 2
33932: NEG
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: LD_INT 2
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: LD_INT 1
33954: NEG
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 2
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 2
33972: PUSH
33973: LD_INT 2
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 1
33982: PUSH
33983: LD_INT 2
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: LD_INT 2
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 1
34002: NEG
34003: PUSH
34004: LD_INT 1
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 2
34013: NEG
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 2
34025: NEG
34026: PUSH
34027: LD_INT 2
34029: NEG
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 2
34037: NEG
34038: PUSH
34039: LD_INT 3
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 1
34049: NEG
34050: PUSH
34051: LD_INT 3
34053: NEG
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 0
34061: PUSH
34062: LD_INT 3
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: PUSH
34073: LD_INT 2
34075: NEG
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 3
34083: PUSH
34084: LD_INT 2
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 3
34093: PUSH
34094: LD_INT 3
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 2
34103: PUSH
34104: LD_INT 3
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 1
34113: PUSH
34114: LD_INT 3
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: LD_INT 3
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 1
34133: NEG
34134: PUSH
34135: LD_INT 2
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 3
34144: NEG
34145: PUSH
34146: LD_INT 2
34148: NEG
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 3
34156: NEG
34157: PUSH
34158: LD_INT 3
34160: NEG
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34197: LD_ADDR_VAR 0 43
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: LD_INT 0
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 0
34214: PUSH
34215: LD_INT 1
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: LD_INT 1
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: LD_INT 1
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: NEG
34256: PUSH
34257: LD_INT 0
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 1
34266: NEG
34267: PUSH
34268: LD_INT 1
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: NEG
34279: PUSH
34280: LD_INT 2
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 0
34290: PUSH
34291: LD_INT 2
34293: NEG
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 1
34301: PUSH
34302: LD_INT 1
34304: NEG
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 2
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 2
34322: PUSH
34323: LD_INT 1
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 1
34332: PUSH
34333: LD_INT 2
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 0
34342: PUSH
34343: LD_INT 2
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: LD_INT 1
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 2
34363: NEG
34364: PUSH
34365: LD_INT 0
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 2
34374: NEG
34375: PUSH
34376: LD_INT 1
34378: NEG
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: LD_INT 3
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 0
34398: PUSH
34399: LD_INT 3
34401: NEG
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 1
34409: PUSH
34410: LD_INT 2
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 2
34420: PUSH
34421: LD_INT 1
34423: NEG
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 3
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 3
34441: PUSH
34442: LD_INT 1
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: PUSH
34452: LD_INT 3
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 0
34461: PUSH
34462: LD_INT 3
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 1
34471: NEG
34472: PUSH
34473: LD_INT 2
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 2
34482: NEG
34483: PUSH
34484: LD_INT 1
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 3
34493: NEG
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 3
34504: NEG
34505: PUSH
34506: LD_INT 1
34508: NEG
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34545: LD_ADDR_VAR 0 44
34549: PUSH
34550: LD_INT 0
34552: PUSH
34553: LD_INT 0
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 0
34562: PUSH
34563: LD_INT 1
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: LD_INT 0
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 1
34583: PUSH
34584: LD_INT 1
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: LD_INT 1
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: LD_INT 0
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 1
34614: NEG
34615: PUSH
34616: LD_INT 1
34618: NEG
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 1
34626: NEG
34627: PUSH
34628: LD_INT 2
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 2
34669: PUSH
34670: LD_INT 2
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: LD_INT 2
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: LD_INT 1
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 2
34700: NEG
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 2
34711: NEG
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 2
34723: NEG
34724: PUSH
34725: LD_INT 2
34727: NEG
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 2
34735: NEG
34736: PUSH
34737: LD_INT 3
34739: NEG
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 2
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 3
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 3
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 3
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 3
34788: PUSH
34789: LD_INT 3
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 2
34798: PUSH
34799: LD_INT 3
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 2
34808: NEG
34809: PUSH
34810: LD_INT 1
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 3
34819: NEG
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 3
34830: NEG
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 3
34842: NEG
34843: PUSH
34844: LD_INT 2
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 3
34854: NEG
34855: PUSH
34856: LD_INT 3
34858: NEG
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34895: LD_ADDR_VAR 0 45
34899: PUSH
34900: LD_INT 0
34902: PUSH
34903: LD_INT 0
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 0
34912: PUSH
34913: LD_INT 1
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 1
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 1
34933: PUSH
34934: LD_INT 1
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: LD_INT 1
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 1
34953: NEG
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 1
34964: NEG
34965: PUSH
34966: LD_INT 1
34968: NEG
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: PUSH
34978: LD_INT 2
34980: NEG
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: LD_INT 2
34991: NEG
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: LD_INT 1
35002: NEG
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 2
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 2
35020: PUSH
35021: LD_INT 2
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: LD_INT 2
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 0
35040: PUSH
35041: LD_INT 2
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: LD_INT 1
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: NEG
35062: PUSH
35063: LD_INT 1
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 2
35073: NEG
35074: PUSH
35075: LD_INT 2
35077: NEG
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 2
35085: NEG
35086: PUSH
35087: LD_INT 3
35089: NEG
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 1
35097: NEG
35098: PUSH
35099: LD_INT 3
35101: NEG
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: LD_INT 3
35112: NEG
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 1
35120: PUSH
35121: LD_INT 2
35123: NEG
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 3
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 3
35141: PUSH
35142: LD_INT 3
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 2
35151: PUSH
35152: LD_INT 3
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 1
35161: PUSH
35162: LD_INT 3
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: LD_INT 3
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 1
35181: NEG
35182: PUSH
35183: LD_INT 2
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 3
35192: NEG
35193: PUSH
35194: LD_INT 2
35196: NEG
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 3
35204: NEG
35205: PUSH
35206: LD_INT 3
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35245: LD_ADDR_VAR 0 46
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 0
35262: PUSH
35263: LD_INT 1
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 1
35273: PUSH
35274: LD_INT 0
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: LD_INT 1
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: LD_INT 1
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: NEG
35304: PUSH
35305: LD_INT 0
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 1
35314: NEG
35315: PUSH
35316: LD_INT 1
35318: NEG
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 1
35326: NEG
35327: PUSH
35328: LD_INT 2
35330: NEG
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 0
35338: PUSH
35339: LD_INT 2
35341: NEG
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: LD_INT 1
35352: NEG
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 2
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 2
35370: PUSH
35371: LD_INT 1
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 1
35380: PUSH
35381: LD_INT 2
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 0
35390: PUSH
35391: LD_INT 2
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 1
35400: NEG
35401: PUSH
35402: LD_INT 1
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 2
35411: NEG
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 2
35422: NEG
35423: PUSH
35424: LD_INT 1
35426: NEG
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: LD_INT 3
35438: NEG
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: LD_INT 3
35449: NEG
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: LD_INT 2
35460: NEG
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 2
35468: PUSH
35469: LD_INT 1
35471: NEG
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 3
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 3
35489: PUSH
35490: LD_INT 1
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 1
35499: PUSH
35500: LD_INT 3
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 0
35509: PUSH
35510: LD_INT 3
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: LD_INT 2
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 2
35530: NEG
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 3
35541: NEG
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 3
35552: NEG
35553: PUSH
35554: LD_INT 1
35556: NEG
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35593: LD_ADDR_VAR 0 47
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 0
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 1
35621: PUSH
35622: LD_INT 0
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 1
35631: PUSH
35632: LD_INT 1
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 0
35641: PUSH
35642: LD_INT 1
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 1
35651: NEG
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: LD_INT 1
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 1
35674: NEG
35675: PUSH
35676: LD_INT 2
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: LD_INT 2
35689: NEG
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 2
35708: NEG
35709: PUSH
35710: LD_INT 1
35712: NEG
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 2
35720: NEG
35721: PUSH
35722: LD_INT 2
35724: NEG
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35744: LD_ADDR_VAR 0 48
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: LD_INT 1
35764: NEG
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: LD_INT 1
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: NEG
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 1
35813: NEG
35814: PUSH
35815: LD_INT 1
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: NEG
35826: PUSH
35827: LD_INT 2
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: LD_INT 2
35840: NEG
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 1
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 2
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35891: LD_ADDR_VAR 0 49
35895: PUSH
35896: LD_INT 0
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: LD_INT 1
35911: NEG
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 1
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: LD_INT 1
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 1
35949: NEG
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 1
35960: NEG
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 1
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 2
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 2
35993: PUSH
35994: LD_INT 1
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 2
36003: PUSH
36004: LD_INT 2
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: LD_INT 2
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36035: LD_ADDR_VAR 0 50
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: LD_INT 0
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: LD_INT 1
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 1
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: PUSH
36074: LD_INT 1
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 1
36104: NEG
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 2
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 2
36126: PUSH
36127: LD_INT 2
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: LD_INT 2
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: LD_INT 2
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: LD_INT 1
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36179: LD_ADDR_VAR 0 51
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: LD_INT 0
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: LD_INT 1
36199: NEG
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 1
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 0
36227: PUSH
36228: LD_INT 1
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 1
36237: NEG
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: LD_INT 2
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 0
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: NEG
36281: PUSH
36282: LD_INT 1
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 2
36291: NEG
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 2
36302: NEG
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36326: LD_ADDR_VAR 0 52
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 0
36343: PUSH
36344: LD_INT 1
36346: NEG
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: PUSH
36365: LD_INT 1
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 0
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 1
36384: NEG
36385: PUSH
36386: LD_INT 0
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: LD_INT 1
36399: NEG
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 1
36407: NEG
36408: PUSH
36409: LD_INT 2
36411: NEG
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 2
36430: NEG
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 2
36441: NEG
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: LD_INT 2
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36477: LD_ADDR_VAR 0 53
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 0
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: LD_INT 1
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: LD_INT 0
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 1
36546: NEG
36547: PUSH
36548: LD_INT 1
36550: NEG
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 1
36558: NEG
36559: PUSH
36560: LD_INT 2
36562: NEG
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 0
36570: PUSH
36571: LD_INT 2
36573: NEG
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 2
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 2
36602: PUSH
36603: LD_INT 1
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 2
36612: PUSH
36613: LD_INT 2
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 1
36622: PUSH
36623: LD_INT 2
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: LD_INT 2
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 1
36642: NEG
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 2
36653: NEG
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 2
36664: NEG
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 2
36676: NEG
36677: PUSH
36678: LD_INT 2
36680: NEG
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36707: LD_ADDR_VAR 0 54
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: LD_INT 0
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: LD_INT 0
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 1
36776: NEG
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: LD_INT 2
36792: NEG
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: LD_INT 2
36803: NEG
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 1
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 2
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: LD_INT 1
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 2
36842: PUSH
36843: LD_INT 2
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: LD_INT 2
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: LD_INT 2
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 2
36894: NEG
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 2
36906: NEG
36907: PUSH
36908: LD_INT 2
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36937: LD_ADDR_VAR 0 55
36941: PUSH
36942: LD_INT 0
36944: PUSH
36945: LD_INT 0
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 1
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: LD_INT 1
37010: NEG
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: LD_INT 2
37022: NEG
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: LD_INT 2
37033: NEG
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 2
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 2
37062: PUSH
37063: LD_INT 1
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 2
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 1
37082: PUSH
37083: LD_INT 2
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: LD_INT 2
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 1
37102: NEG
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 2
37113: NEG
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 2
37124: NEG
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 2
37136: NEG
37137: PUSH
37138: LD_INT 2
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37167: LD_ADDR_VAR 0 56
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: LD_INT 1
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 1
37236: NEG
37237: PUSH
37238: LD_INT 1
37240: NEG
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: LD_INT 2
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: LD_INT 2
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: LD_INT 0
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 2
37292: PUSH
37293: LD_INT 1
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 2
37302: PUSH
37303: LD_INT 2
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 1
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: LD_INT 2
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 2
37343: NEG
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 2
37354: NEG
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 2
37366: NEG
37367: PUSH
37368: LD_INT 2
37370: NEG
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37397: LD_ADDR_VAR 0 57
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: LD_INT 1
37417: NEG
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 0
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: LD_INT 0
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: LD_INT 2
37482: NEG
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: LD_INT 2
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 2
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: LD_INT 2
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: LD_INT 1
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 2
37573: NEG
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 2
37584: NEG
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 2
37596: NEG
37597: PUSH
37598: LD_INT 2
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37627: LD_ADDR_VAR 0 58
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: LD_INT 2
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 0
37720: PUSH
37721: LD_INT 2
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 1
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: LD_INT 1
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 2
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 2
37814: NEG
37815: PUSH
37816: LD_INT 1
37818: NEG
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: LD_INT 2
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37857: LD_ADDR_VAR 0 59
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: LD_INT 0
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 1
37926: NEG
37927: PUSH
37928: LD_INT 1
37930: NEG
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37945: LD_ADDR_VAR 0 60
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: LD_INT 1
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 0
37993: PUSH
37994: LD_INT 1
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 1
38003: NEG
38004: PUSH
38005: LD_INT 0
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: NEG
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38033: LD_ADDR_VAR 0 61
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: LD_INT 0
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38121: LD_ADDR_VAR 0 62
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 1
38190: NEG
38191: PUSH
38192: LD_INT 1
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38209: LD_ADDR_VAR 0 63
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: LD_INT 0
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 0
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: LD_INT 0
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 1
38247: PUSH
38248: LD_INT 1
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: LD_INT 1
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 1
38267: NEG
38268: PUSH
38269: LD_INT 0
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 1
38278: NEG
38279: PUSH
38280: LD_INT 1
38282: NEG
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38297: LD_ADDR_VAR 0 64
38301: PUSH
38302: LD_INT 0
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 1
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: LD_INT 0
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 1
38366: NEG
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: ST_TO_ADDR
// end ; 1 :
38385: GO 44282
38387: LD_INT 1
38389: DOUBLE
38390: EQUAL
38391: IFTRUE 38395
38393: GO 41018
38395: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38396: LD_ADDR_VAR 0 11
38400: PUSH
38401: LD_INT 1
38403: NEG
38404: PUSH
38405: LD_INT 3
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 0
38415: PUSH
38416: LD_INT 3
38418: NEG
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: LD_INT 2
38429: NEG
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: LIST
38439: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38440: LD_ADDR_VAR 0 12
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 3
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 3
38468: PUSH
38469: LD_INT 1
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: LIST
38480: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38481: LD_ADDR_VAR 0 13
38485: PUSH
38486: LD_INT 3
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 3
38498: PUSH
38499: LD_INT 3
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 2
38508: PUSH
38509: LD_INT 3
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: LIST
38520: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38521: LD_ADDR_VAR 0 14
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: LD_INT 3
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 3
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: LIST
38561: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38562: LD_ADDR_VAR 0 15
38566: PUSH
38567: LD_INT 2
38569: NEG
38570: PUSH
38571: LD_INT 1
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 3
38580: NEG
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 3
38591: NEG
38592: PUSH
38593: LD_INT 1
38595: NEG
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: LIST
38605: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38606: LD_ADDR_VAR 0 16
38610: PUSH
38611: LD_INT 2
38613: NEG
38614: PUSH
38615: LD_INT 3
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 3
38625: NEG
38626: PUSH
38627: LD_INT 2
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 3
38637: NEG
38638: PUSH
38639: LD_INT 3
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38652: LD_ADDR_VAR 0 17
38656: PUSH
38657: LD_INT 1
38659: NEG
38660: PUSH
38661: LD_INT 3
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 3
38674: NEG
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 1
38682: PUSH
38683: LD_INT 2
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: LIST
38695: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38696: LD_ADDR_VAR 0 18
38700: PUSH
38701: LD_INT 2
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 3
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: LIST
38736: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38737: LD_ADDR_VAR 0 19
38741: PUSH
38742: LD_INT 3
38744: PUSH
38745: LD_INT 2
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 3
38754: PUSH
38755: LD_INT 3
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 2
38764: PUSH
38765: LD_INT 3
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38777: LD_ADDR_VAR 0 20
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: LD_INT 3
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: LD_INT 3
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PUSH
38806: LD_INT 2
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: LIST
38817: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38818: LD_ADDR_VAR 0 21
38822: PUSH
38823: LD_INT 2
38825: NEG
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 3
38836: NEG
38837: PUSH
38838: LD_INT 0
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 3
38847: NEG
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: LIST
38861: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38862: LD_ADDR_VAR 0 22
38866: PUSH
38867: LD_INT 2
38869: NEG
38870: PUSH
38871: LD_INT 3
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 3
38881: NEG
38882: PUSH
38883: LD_INT 2
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 3
38893: NEG
38894: PUSH
38895: LD_INT 3
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38908: LD_ADDR_VAR 0 23
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: LD_INT 3
38918: NEG
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: LD_INT 4
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: LD_INT 3
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: LIST
38951: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38952: LD_ADDR_VAR 0 24
38956: PUSH
38957: LD_INT 3
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 3
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 4
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: LIST
38992: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38993: LD_ADDR_VAR 0 25
38997: PUSH
38998: LD_INT 3
39000: PUSH
39001: LD_INT 3
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 4
39010: PUSH
39011: LD_INT 3
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 3
39020: PUSH
39021: LD_INT 4
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: LIST
39032: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39033: LD_ADDR_VAR 0 26
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: LD_INT 3
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 4
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: NEG
39061: PUSH
39062: LD_INT 3
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39074: LD_ADDR_VAR 0 27
39078: PUSH
39079: LD_INT 3
39081: NEG
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 3
39092: NEG
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 4
39103: NEG
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: LIST
39117: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39118: LD_ADDR_VAR 0 28
39122: PUSH
39123: LD_INT 3
39125: NEG
39126: PUSH
39127: LD_INT 3
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 3
39137: NEG
39138: PUSH
39139: LD_INT 4
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 4
39149: NEG
39150: PUSH
39151: LD_INT 3
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: LIST
39163: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39164: LD_ADDR_VAR 0 29
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: LD_INT 3
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: LD_INT 3
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 1
39194: PUSH
39195: LD_INT 2
39197: NEG
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: LD_INT 4
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 4
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: LD_INT 3
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: LD_INT 5
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: LD_INT 5
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 4
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: NEG
39274: PUSH
39275: LD_INT 6
39277: NEG
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: LD_INT 6
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: LD_INT 5
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39319: LD_ADDR_VAR 0 30
39323: PUSH
39324: LD_INT 2
39326: PUSH
39327: LD_INT 1
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 3
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 3
39347: PUSH
39348: LD_INT 1
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 3
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 4
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 4
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 4
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 5
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 5
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 5
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 6
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 6
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39462: LD_ADDR_VAR 0 31
39466: PUSH
39467: LD_INT 3
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 3
39479: PUSH
39480: LD_INT 3
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 2
39489: PUSH
39490: LD_INT 3
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 4
39499: PUSH
39500: LD_INT 3
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 4
39509: PUSH
39510: LD_INT 4
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 3
39519: PUSH
39520: LD_INT 4
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 5
39529: PUSH
39530: LD_INT 4
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 5
39539: PUSH
39540: LD_INT 5
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 4
39549: PUSH
39550: LD_INT 5
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 6
39559: PUSH
39560: LD_INT 5
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 6
39569: PUSH
39570: LD_INT 6
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 5
39579: PUSH
39580: LD_INT 6
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39601: LD_ADDR_VAR 0 32
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: LD_INT 3
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: LD_INT 3
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: LD_INT 2
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: LD_INT 4
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: LD_INT 4
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 1
39659: NEG
39660: PUSH
39661: LD_INT 3
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: LD_INT 5
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: LD_INT 5
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: LD_INT 4
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: LD_INT 6
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: LD_INT 6
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: LD_INT 5
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39744: LD_ADDR_VAR 0 33
39748: PUSH
39749: LD_INT 2
39751: NEG
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 3
39762: NEG
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 3
39773: NEG
39774: PUSH
39775: LD_INT 1
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 3
39785: NEG
39786: PUSH
39787: LD_INT 1
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 4
39796: NEG
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 4
39807: NEG
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 4
39819: NEG
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 5
39830: NEG
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 5
39841: NEG
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 5
39853: NEG
39854: PUSH
39855: LD_INT 1
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 6
39864: NEG
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 6
39875: NEG
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39899: LD_ADDR_VAR 0 34
39903: PUSH
39904: LD_INT 2
39906: NEG
39907: PUSH
39908: LD_INT 3
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 3
39918: NEG
39919: PUSH
39920: LD_INT 2
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 3
39930: NEG
39931: PUSH
39932: LD_INT 3
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 3
39942: NEG
39943: PUSH
39944: LD_INT 4
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 4
39954: NEG
39955: PUSH
39956: LD_INT 3
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 4
39966: NEG
39967: PUSH
39968: LD_INT 4
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 4
39978: NEG
39979: PUSH
39980: LD_INT 5
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 5
39990: NEG
39991: PUSH
39992: LD_INT 4
39994: NEG
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 5
40002: NEG
40003: PUSH
40004: LD_INT 5
40006: NEG
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 5
40014: NEG
40015: PUSH
40016: LD_INT 6
40018: NEG
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 6
40026: NEG
40027: PUSH
40028: LD_INT 5
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 6
40038: NEG
40039: PUSH
40040: LD_INT 6
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40062: LD_ADDR_VAR 0 41
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 1
40080: NEG
40081: PUSH
40082: LD_INT 3
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: LD_INT 2
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: LIST
40105: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40106: LD_ADDR_VAR 0 42
40110: PUSH
40111: LD_INT 2
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 2
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 3
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: LIST
40146: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40147: LD_ADDR_VAR 0 43
40151: PUSH
40152: LD_INT 2
40154: PUSH
40155: LD_INT 2
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 3
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 2
40174: PUSH
40175: LD_INT 3
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: LIST
40186: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40187: LD_ADDR_VAR 0 44
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: LD_INT 2
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: LD_INT 3
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: LD_INT 2
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: LIST
40227: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40228: LD_ADDR_VAR 0 45
40232: PUSH
40233: LD_INT 2
40235: NEG
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 2
40246: NEG
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 3
40257: NEG
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: LIST
40271: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40272: LD_ADDR_VAR 0 46
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: LD_INT 2
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 2
40291: NEG
40292: PUSH
40293: LD_INT 3
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 3
40303: NEG
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40318: LD_ADDR_VAR 0 47
40322: PUSH
40323: LD_INT 2
40325: NEG
40326: PUSH
40327: LD_INT 3
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 3
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40351: LD_ADDR_VAR 0 48
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: LD_INT 2
40361: NEG
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 2
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40382: LD_ADDR_VAR 0 49
40386: PUSH
40387: LD_INT 3
40389: PUSH
40390: LD_INT 1
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 3
40399: PUSH
40400: LD_INT 2
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40411: LD_ADDR_VAR 0 50
40415: PUSH
40416: LD_INT 2
40418: PUSH
40419: LD_INT 3
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: LD_INT 3
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40440: LD_ADDR_VAR 0 51
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: LD_INT 2
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 2
40458: NEG
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40471: LD_ADDR_VAR 0 52
40475: PUSH
40476: LD_INT 3
40478: NEG
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 3
40490: NEG
40491: PUSH
40492: LD_INT 2
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40504: LD_ADDR_VAR 0 53
40508: PUSH
40509: LD_INT 1
40511: NEG
40512: PUSH
40513: LD_INT 3
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: LD_INT 3
40526: NEG
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: LD_INT 2
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: LIST
40547: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40548: LD_ADDR_VAR 0 54
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 3
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 3
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: LIST
40588: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40589: LD_ADDR_VAR 0 55
40593: PUSH
40594: LD_INT 3
40596: PUSH
40597: LD_INT 2
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 3
40606: PUSH
40607: LD_INT 3
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 2
40616: PUSH
40617: LD_INT 3
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: LIST
40628: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40629: LD_ADDR_VAR 0 56
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 3
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: LD_INT 3
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 2
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: LIST
40669: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40670: LD_ADDR_VAR 0 57
40674: PUSH
40675: LD_INT 2
40677: NEG
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 3
40688: NEG
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 3
40699: NEG
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: LIST
40713: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40714: LD_ADDR_VAR 0 58
40718: PUSH
40719: LD_INT 2
40721: NEG
40722: PUSH
40723: LD_INT 3
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 3
40733: NEG
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 3
40745: NEG
40746: PUSH
40747: LD_INT 3
40749: NEG
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: LIST
40759: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40760: LD_ADDR_VAR 0 59
40764: PUSH
40765: LD_INT 1
40767: NEG
40768: PUSH
40769: LD_INT 2
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: LD_INT 2
40782: NEG
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: LD_INT 1
40793: NEG
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: LIST
40803: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40804: LD_ADDR_VAR 0 60
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: LIST
40844: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40845: LD_ADDR_VAR 0 61
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: LD_INT 1
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 2
40862: PUSH
40863: LD_INT 2
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: LD_INT 2
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: LIST
40884: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40885: LD_ADDR_VAR 0 62
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: LD_INT 2
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 2
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: LD_INT 1
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: LIST
40925: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40926: LD_ADDR_VAR 0 63
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: LD_INT 1
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 2
40944: NEG
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 2
40955: NEG
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: LIST
40969: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40970: LD_ADDR_VAR 0 64
40974: PUSH
40975: LD_INT 1
40977: NEG
40978: PUSH
40979: LD_INT 2
40981: NEG
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 2
40989: NEG
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 2
41001: NEG
41002: PUSH
41003: LD_INT 2
41005: NEG
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: LIST
41015: ST_TO_ADDR
// end ; 2 :
41016: GO 44282
41018: LD_INT 2
41020: DOUBLE
41021: EQUAL
41022: IFTRUE 41026
41024: GO 44281
41026: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41027: LD_ADDR_VAR 0 29
41031: PUSH
41032: LD_INT 4
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 4
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 5
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 5
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 4
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 3
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 3
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 3
41106: PUSH
41107: LD_INT 2
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 5
41117: PUSH
41118: LD_INT 2
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 3
41127: PUSH
41128: LD_INT 3
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 3
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 4
41147: PUSH
41148: LD_INT 3
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 4
41157: PUSH
41158: LD_INT 4
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 3
41167: PUSH
41168: LD_INT 4
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 2
41177: PUSH
41178: LD_INT 3
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 2
41187: PUSH
41188: LD_INT 2
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 4
41197: PUSH
41198: LD_INT 2
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: LD_INT 4
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: LD_INT 4
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: LD_INT 3
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: LD_INT 4
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: LD_INT 5
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 0
41257: PUSH
41258: LD_INT 5
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: LD_INT 4
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: LD_INT 3
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 2
41289: PUSH
41290: LD_INT 5
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: NEG
41300: PUSH
41301: LD_INT 3
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 3
41310: NEG
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 3
41321: NEG
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 2
41333: NEG
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 2
41344: NEG
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 3
41355: NEG
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 4
41366: NEG
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 4
41377: NEG
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 4
41389: NEG
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 2
41401: NEG
41402: PUSH
41403: LD_INT 2
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 4
41412: NEG
41413: PUSH
41414: LD_INT 4
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 4
41424: NEG
41425: PUSH
41426: LD_INT 5
41428: NEG
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 3
41436: NEG
41437: PUSH
41438: LD_INT 4
41440: NEG
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 3
41448: NEG
41449: PUSH
41450: LD_INT 3
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 4
41460: NEG
41461: PUSH
41462: LD_INT 3
41464: NEG
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 5
41472: NEG
41473: PUSH
41474: LD_INT 4
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 5
41484: NEG
41485: PUSH
41486: LD_INT 5
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 3
41496: NEG
41497: PUSH
41498: LD_INT 5
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 5
41508: NEG
41509: PUSH
41510: LD_INT 3
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41565: LD_ADDR_VAR 0 30
41569: PUSH
41570: LD_INT 4
41572: PUSH
41573: LD_INT 4
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 4
41582: PUSH
41583: LD_INT 3
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 5
41592: PUSH
41593: LD_INT 4
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 5
41602: PUSH
41603: LD_INT 5
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 4
41612: PUSH
41613: LD_INT 5
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 3
41622: PUSH
41623: LD_INT 4
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 3
41632: PUSH
41633: LD_INT 3
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 5
41642: PUSH
41643: LD_INT 3
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 3
41652: PUSH
41653: LD_INT 5
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 3
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 2
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: LD_INT 3
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: LD_INT 4
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: LD_INT 4
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: LD_INT 3
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 2
41734: PUSH
41735: LD_INT 4
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 4
41755: NEG
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 4
41766: NEG
41767: PUSH
41768: LD_INT 1
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 3
41778: NEG
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 3
41789: NEG
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 4
41800: NEG
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 5
41811: NEG
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 5
41822: NEG
41823: PUSH
41824: LD_INT 1
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 5
41834: NEG
41835: PUSH
41836: LD_INT 2
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 3
41846: NEG
41847: PUSH
41848: LD_INT 2
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 3
41857: NEG
41858: PUSH
41859: LD_INT 3
41861: NEG
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 3
41869: NEG
41870: PUSH
41871: LD_INT 4
41873: NEG
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 2
41881: NEG
41882: PUSH
41883: LD_INT 3
41885: NEG
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 2
41893: NEG
41894: PUSH
41895: LD_INT 2
41897: NEG
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 3
41905: NEG
41906: PUSH
41907: LD_INT 2
41909: NEG
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 4
41917: NEG
41918: PUSH
41919: LD_INT 3
41921: NEG
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 4
41929: NEG
41930: PUSH
41931: LD_INT 4
41933: NEG
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: NEG
41942: PUSH
41943: LD_INT 4
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 4
41953: NEG
41954: PUSH
41955: LD_INT 2
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: LD_INT 4
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: LD_INT 5
41979: NEG
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: LD_INT 4
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: LD_INT 3
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 3
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: LD_INT 4
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: LD_INT 5
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 2
42044: PUSH
42045: LD_INT 3
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 2
42055: NEG
42056: PUSH
42057: LD_INT 5
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42112: LD_ADDR_VAR 0 31
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: LD_INT 4
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: LD_INT 3
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: LD_INT 4
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 5
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 5
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 4
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 3
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: PUSH
42192: LD_INT 5
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: LD_INT 3
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 3
42212: NEG
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 3
42223: NEG
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 3
42257: NEG
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 4
42268: NEG
42269: PUSH
42270: LD_INT 0
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 4
42279: NEG
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 4
42291: NEG
42292: PUSH
42293: LD_INT 2
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: LD_INT 2
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 4
42314: NEG
42315: PUSH
42316: LD_INT 4
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 4
42326: NEG
42327: PUSH
42328: LD_INT 5
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 3
42338: NEG
42339: PUSH
42340: LD_INT 4
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 3
42350: NEG
42351: PUSH
42352: LD_INT 3
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 4
42362: NEG
42363: PUSH
42364: LD_INT 3
42366: NEG
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 5
42374: NEG
42375: PUSH
42376: LD_INT 4
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 5
42386: NEG
42387: PUSH
42388: LD_INT 5
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 3
42398: NEG
42399: PUSH
42400: LD_INT 5
42402: NEG
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 5
42410: NEG
42411: PUSH
42412: LD_INT 3
42414: NEG
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: LD_INT 3
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: LD_INT 4
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: LD_INT 3
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: PUSH
42456: LD_INT 2
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: LD_INT 2
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: NEG
42478: PUSH
42479: LD_INT 3
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: LD_INT 4
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 2
42501: PUSH
42502: LD_INT 2
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 2
42512: NEG
42513: PUSH
42514: LD_INT 4
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 4
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 4
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 5
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 5
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 4
42565: PUSH
42566: LD_INT 1
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 3
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 3
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 3
42596: PUSH
42597: LD_INT 2
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 5
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42662: LD_ADDR_VAR 0 32
42666: PUSH
42667: LD_INT 4
42669: NEG
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 4
42680: NEG
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 3
42692: NEG
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 3
42703: NEG
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 4
42714: NEG
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 5
42725: NEG
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 5
42736: NEG
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 5
42748: NEG
42749: PUSH
42750: LD_INT 2
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 3
42760: NEG
42761: PUSH
42762: LD_INT 2
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 3
42771: NEG
42772: PUSH
42773: LD_INT 3
42775: NEG
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 3
42783: NEG
42784: PUSH
42785: LD_INT 4
42787: NEG
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 2
42795: NEG
42796: PUSH
42797: LD_INT 3
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 2
42807: NEG
42808: PUSH
42809: LD_INT 2
42811: NEG
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 3
42819: NEG
42820: PUSH
42821: LD_INT 2
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 4
42831: NEG
42832: PUSH
42833: LD_INT 3
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 4
42843: NEG
42844: PUSH
42845: LD_INT 4
42847: NEG
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 2
42855: NEG
42856: PUSH
42857: LD_INT 4
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 4
42867: NEG
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 4
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: LD_INT 5
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: LD_INT 4
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: LD_INT 3
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: LD_INT 3
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: LD_INT 4
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: LD_INT 5
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 2
42958: PUSH
42959: LD_INT 3
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: NEG
42970: PUSH
42971: LD_INT 5
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 3
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 3
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 4
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 4
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 3
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 2
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 2
43053: PUSH
43054: LD_INT 2
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 4
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 4
43074: PUSH
43075: LD_INT 4
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 4
43084: PUSH
43085: LD_INT 3
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 5
43094: PUSH
43095: LD_INT 4
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 5
43104: PUSH
43105: LD_INT 5
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 4
43114: PUSH
43115: LD_INT 5
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 3
43124: PUSH
43125: LD_INT 4
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 3
43134: PUSH
43135: LD_INT 3
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 5
43144: PUSH
43145: LD_INT 3
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 3
43154: PUSH
43155: LD_INT 5
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43209: LD_ADDR_VAR 0 33
43213: PUSH
43214: LD_INT 4
43216: NEG
43217: PUSH
43218: LD_INT 4
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 4
43228: NEG
43229: PUSH
43230: LD_INT 5
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 3
43240: NEG
43241: PUSH
43242: LD_INT 4
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 3
43252: NEG
43253: PUSH
43254: LD_INT 3
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 4
43264: NEG
43265: PUSH
43266: LD_INT 3
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 5
43276: NEG
43277: PUSH
43278: LD_INT 4
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 5
43288: NEG
43289: PUSH
43290: LD_INT 5
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 3
43300: NEG
43301: PUSH
43302: LD_INT 5
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 5
43312: NEG
43313: PUSH
43314: LD_INT 3
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: LD_INT 3
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: LD_INT 4
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: LD_INT 3
43349: NEG
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: LD_INT 2
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: LD_INT 2
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: LD_INT 3
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: LD_INT 4
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: LD_INT 2
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 2
43414: NEG
43415: PUSH
43416: LD_INT 4
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 4
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 4
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 5
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 5
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 4
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 3
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 3
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 3
43498: PUSH
43499: LD_INT 2
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 5
43509: PUSH
43510: LD_INT 2
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 3
43519: PUSH
43520: LD_INT 3
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 3
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 4
43539: PUSH
43540: LD_INT 3
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 4
43549: PUSH
43550: LD_INT 4
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 3
43559: PUSH
43560: LD_INT 4
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: LD_INT 3
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 2
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 4
43589: PUSH
43590: LD_INT 2
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: LD_INT 4
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: LD_INT 4
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 3
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: LD_INT 4
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: LD_INT 5
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: LD_INT 5
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: LD_INT 4
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: LD_INT 3
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 2
43681: PUSH
43682: LD_INT 5
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 2
43691: NEG
43692: PUSH
43693: LD_INT 3
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43747: LD_ADDR_VAR 0 34
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 4
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 5
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: LD_INT 4
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: LD_INT 3
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: LD_INT 3
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: LD_INT 4
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: LD_INT 5
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: LD_INT 3
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: LD_INT 5
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 3
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 3
43866: PUSH
43867: LD_INT 1
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 4
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 4
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 3
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: LD_INT 1
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 2
43928: PUSH
43929: LD_INT 2
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 4
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 4
43949: PUSH
43950: LD_INT 4
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 4
43959: PUSH
43960: LD_INT 3
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 5
43969: PUSH
43970: LD_INT 4
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 5
43979: PUSH
43980: LD_INT 5
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 4
43989: PUSH
43990: LD_INT 5
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 3
43999: PUSH
44000: LD_INT 4
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 3
44009: PUSH
44010: LD_INT 3
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 5
44019: PUSH
44020: LD_INT 3
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 3
44029: PUSH
44030: LD_INT 5
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_INT 3
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: LD_INT 3
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 4
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 4
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: LD_INT 3
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: LD_INT 4
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 2
44121: NEG
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 4
44132: NEG
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 4
44143: NEG
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 3
44155: NEG
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 3
44166: NEG
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 4
44177: NEG
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 5
44188: NEG
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 5
44199: NEG
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 5
44211: NEG
44212: PUSH
44213: LD_INT 2
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 3
44223: NEG
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: ST_TO_ADDR
// end ; end ;
44279: GO 44282
44281: POP
// case btype of b_depot , b_warehouse :
44282: LD_VAR 0 1
44286: PUSH
44287: LD_INT 0
44289: DOUBLE
44290: EQUAL
44291: IFTRUE 44301
44293: LD_INT 1
44295: DOUBLE
44296: EQUAL
44297: IFTRUE 44301
44299: GO 44502
44301: POP
// case nation of nation_american :
44302: LD_VAR 0 5
44306: PUSH
44307: LD_INT 1
44309: DOUBLE
44310: EQUAL
44311: IFTRUE 44315
44313: GO 44371
44315: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
44316: LD_ADDR_VAR 0 9
44320: PUSH
44321: LD_VAR 0 11
44325: PUSH
44326: LD_VAR 0 12
44330: PUSH
44331: LD_VAR 0 13
44335: PUSH
44336: LD_VAR 0 14
44340: PUSH
44341: LD_VAR 0 15
44345: PUSH
44346: LD_VAR 0 16
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: PUSH
44359: LD_VAR 0 4
44363: PUSH
44364: LD_INT 1
44366: PLUS
44367: ARRAY
44368: ST_TO_ADDR
44369: GO 44500
44371: LD_INT 2
44373: DOUBLE
44374: EQUAL
44375: IFTRUE 44379
44377: GO 44435
44379: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
44380: LD_ADDR_VAR 0 9
44384: PUSH
44385: LD_VAR 0 17
44389: PUSH
44390: LD_VAR 0 18
44394: PUSH
44395: LD_VAR 0 19
44399: PUSH
44400: LD_VAR 0 20
44404: PUSH
44405: LD_VAR 0 21
44409: PUSH
44410: LD_VAR 0 22
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: PUSH
44423: LD_VAR 0 4
44427: PUSH
44428: LD_INT 1
44430: PLUS
44431: ARRAY
44432: ST_TO_ADDR
44433: GO 44500
44435: LD_INT 3
44437: DOUBLE
44438: EQUAL
44439: IFTRUE 44443
44441: GO 44499
44443: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44444: LD_ADDR_VAR 0 9
44448: PUSH
44449: LD_VAR 0 23
44453: PUSH
44454: LD_VAR 0 24
44458: PUSH
44459: LD_VAR 0 25
44463: PUSH
44464: LD_VAR 0 26
44468: PUSH
44469: LD_VAR 0 27
44473: PUSH
44474: LD_VAR 0 28
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: PUSH
44487: LD_VAR 0 4
44491: PUSH
44492: LD_INT 1
44494: PLUS
44495: ARRAY
44496: ST_TO_ADDR
44497: GO 44500
44499: POP
44500: GO 45049
44502: LD_INT 2
44504: DOUBLE
44505: EQUAL
44506: IFTRUE 44516
44508: LD_INT 3
44510: DOUBLE
44511: EQUAL
44512: IFTRUE 44516
44514: GO 44572
44516: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44517: LD_ADDR_VAR 0 9
44521: PUSH
44522: LD_VAR 0 29
44526: PUSH
44527: LD_VAR 0 30
44531: PUSH
44532: LD_VAR 0 31
44536: PUSH
44537: LD_VAR 0 32
44541: PUSH
44542: LD_VAR 0 33
44546: PUSH
44547: LD_VAR 0 34
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: PUSH
44560: LD_VAR 0 4
44564: PUSH
44565: LD_INT 1
44567: PLUS
44568: ARRAY
44569: ST_TO_ADDR
44570: GO 45049
44572: LD_INT 16
44574: DOUBLE
44575: EQUAL
44576: IFTRUE 44628
44578: LD_INT 17
44580: DOUBLE
44581: EQUAL
44582: IFTRUE 44628
44584: LD_INT 18
44586: DOUBLE
44587: EQUAL
44588: IFTRUE 44628
44590: LD_INT 19
44592: DOUBLE
44593: EQUAL
44594: IFTRUE 44628
44596: LD_INT 20
44598: DOUBLE
44599: EQUAL
44600: IFTRUE 44628
44602: LD_INT 21
44604: DOUBLE
44605: EQUAL
44606: IFTRUE 44628
44608: LD_INT 23
44610: DOUBLE
44611: EQUAL
44612: IFTRUE 44628
44614: LD_INT 24
44616: DOUBLE
44617: EQUAL
44618: IFTRUE 44628
44620: LD_INT 25
44622: DOUBLE
44623: EQUAL
44624: IFTRUE 44628
44626: GO 44684
44628: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44629: LD_ADDR_VAR 0 9
44633: PUSH
44634: LD_VAR 0 35
44638: PUSH
44639: LD_VAR 0 36
44643: PUSH
44644: LD_VAR 0 37
44648: PUSH
44649: LD_VAR 0 38
44653: PUSH
44654: LD_VAR 0 39
44658: PUSH
44659: LD_VAR 0 40
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: PUSH
44672: LD_VAR 0 4
44676: PUSH
44677: LD_INT 1
44679: PLUS
44680: ARRAY
44681: ST_TO_ADDR
44682: GO 45049
44684: LD_INT 6
44686: DOUBLE
44687: EQUAL
44688: IFTRUE 44740
44690: LD_INT 7
44692: DOUBLE
44693: EQUAL
44694: IFTRUE 44740
44696: LD_INT 8
44698: DOUBLE
44699: EQUAL
44700: IFTRUE 44740
44702: LD_INT 13
44704: DOUBLE
44705: EQUAL
44706: IFTRUE 44740
44708: LD_INT 12
44710: DOUBLE
44711: EQUAL
44712: IFTRUE 44740
44714: LD_INT 15
44716: DOUBLE
44717: EQUAL
44718: IFTRUE 44740
44720: LD_INT 11
44722: DOUBLE
44723: EQUAL
44724: IFTRUE 44740
44726: LD_INT 14
44728: DOUBLE
44729: EQUAL
44730: IFTRUE 44740
44732: LD_INT 10
44734: DOUBLE
44735: EQUAL
44736: IFTRUE 44740
44738: GO 44796
44740: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
44741: LD_ADDR_VAR 0 9
44745: PUSH
44746: LD_VAR 0 41
44750: PUSH
44751: LD_VAR 0 42
44755: PUSH
44756: LD_VAR 0 43
44760: PUSH
44761: LD_VAR 0 44
44765: PUSH
44766: LD_VAR 0 45
44770: PUSH
44771: LD_VAR 0 46
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: PUSH
44784: LD_VAR 0 4
44788: PUSH
44789: LD_INT 1
44791: PLUS
44792: ARRAY
44793: ST_TO_ADDR
44794: GO 45049
44796: LD_INT 36
44798: DOUBLE
44799: EQUAL
44800: IFTRUE 44804
44802: GO 44860
44804: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44805: LD_ADDR_VAR 0 9
44809: PUSH
44810: LD_VAR 0 47
44814: PUSH
44815: LD_VAR 0 48
44819: PUSH
44820: LD_VAR 0 49
44824: PUSH
44825: LD_VAR 0 50
44829: PUSH
44830: LD_VAR 0 51
44834: PUSH
44835: LD_VAR 0 52
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: PUSH
44848: LD_VAR 0 4
44852: PUSH
44853: LD_INT 1
44855: PLUS
44856: ARRAY
44857: ST_TO_ADDR
44858: GO 45049
44860: LD_INT 4
44862: DOUBLE
44863: EQUAL
44864: IFTRUE 44886
44866: LD_INT 5
44868: DOUBLE
44869: EQUAL
44870: IFTRUE 44886
44872: LD_INT 34
44874: DOUBLE
44875: EQUAL
44876: IFTRUE 44886
44878: LD_INT 37
44880: DOUBLE
44881: EQUAL
44882: IFTRUE 44886
44884: GO 44942
44886: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44887: LD_ADDR_VAR 0 9
44891: PUSH
44892: LD_VAR 0 53
44896: PUSH
44897: LD_VAR 0 54
44901: PUSH
44902: LD_VAR 0 55
44906: PUSH
44907: LD_VAR 0 56
44911: PUSH
44912: LD_VAR 0 57
44916: PUSH
44917: LD_VAR 0 58
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: PUSH
44930: LD_VAR 0 4
44934: PUSH
44935: LD_INT 1
44937: PLUS
44938: ARRAY
44939: ST_TO_ADDR
44940: GO 45049
44942: LD_INT 31
44944: DOUBLE
44945: EQUAL
44946: IFTRUE 44992
44948: LD_INT 32
44950: DOUBLE
44951: EQUAL
44952: IFTRUE 44992
44954: LD_INT 33
44956: DOUBLE
44957: EQUAL
44958: IFTRUE 44992
44960: LD_INT 27
44962: DOUBLE
44963: EQUAL
44964: IFTRUE 44992
44966: LD_INT 26
44968: DOUBLE
44969: EQUAL
44970: IFTRUE 44992
44972: LD_INT 28
44974: DOUBLE
44975: EQUAL
44976: IFTRUE 44992
44978: LD_INT 29
44980: DOUBLE
44981: EQUAL
44982: IFTRUE 44992
44984: LD_INT 30
44986: DOUBLE
44987: EQUAL
44988: IFTRUE 44992
44990: GO 45048
44992: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
44993: LD_ADDR_VAR 0 9
44997: PUSH
44998: LD_VAR 0 59
45002: PUSH
45003: LD_VAR 0 60
45007: PUSH
45008: LD_VAR 0 61
45012: PUSH
45013: LD_VAR 0 62
45017: PUSH
45018: LD_VAR 0 63
45022: PUSH
45023: LD_VAR 0 64
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: PUSH
45036: LD_VAR 0 4
45040: PUSH
45041: LD_INT 1
45043: PLUS
45044: ARRAY
45045: ST_TO_ADDR
45046: GO 45049
45048: POP
// temp_list2 = [ ] ;
45049: LD_ADDR_VAR 0 10
45053: PUSH
45054: EMPTY
45055: ST_TO_ADDR
// for i in temp_list do
45056: LD_ADDR_VAR 0 8
45060: PUSH
45061: LD_VAR 0 9
45065: PUSH
45066: FOR_IN
45067: IFFALSE 45119
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45069: LD_ADDR_VAR 0 10
45073: PUSH
45074: LD_VAR 0 10
45078: PUSH
45079: LD_VAR 0 8
45083: PUSH
45084: LD_INT 1
45086: ARRAY
45087: PUSH
45088: LD_VAR 0 2
45092: PLUS
45093: PUSH
45094: LD_VAR 0 8
45098: PUSH
45099: LD_INT 2
45101: ARRAY
45102: PUSH
45103: LD_VAR 0 3
45107: PLUS
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: EMPTY
45114: LIST
45115: ADD
45116: ST_TO_ADDR
45117: GO 45066
45119: POP
45120: POP
// result = temp_list2 ;
45121: LD_ADDR_VAR 0 7
45125: PUSH
45126: LD_VAR 0 10
45130: ST_TO_ADDR
// end ;
45131: LD_VAR 0 7
45135: RET
// export function EnemyInRange ( unit , dist ) ; begin
45136: LD_INT 0
45138: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45139: LD_ADDR_VAR 0 3
45143: PUSH
45144: LD_VAR 0 1
45148: PPUSH
45149: CALL_OW 255
45153: PPUSH
45154: LD_VAR 0 1
45158: PPUSH
45159: CALL_OW 250
45163: PPUSH
45164: LD_VAR 0 1
45168: PPUSH
45169: CALL_OW 251
45173: PPUSH
45174: LD_VAR 0 2
45178: PPUSH
45179: CALL 19803 0 4
45183: PUSH
45184: LD_INT 4
45186: ARRAY
45187: ST_TO_ADDR
// end ;
45188: LD_VAR 0 3
45192: RET
// export function PlayerSeeMe ( unit ) ; begin
45193: LD_INT 0
45195: PPUSH
// result := See ( your_side , unit ) ;
45196: LD_ADDR_VAR 0 2
45200: PUSH
45201: LD_OWVAR 2
45205: PPUSH
45206: LD_VAR 0 1
45210: PPUSH
45211: CALL_OW 292
45215: ST_TO_ADDR
// end ;
45216: LD_VAR 0 2
45220: RET
// export function ReverseDir ( unit ) ; begin
45221: LD_INT 0
45223: PPUSH
// if not unit then
45224: LD_VAR 0 1
45228: NOT
45229: IFFALSE 45233
// exit ;
45231: GO 45279
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
45233: LD_ADDR_VAR 0 2
45237: PUSH
45238: LD_INT 3
45240: PUSH
45241: LD_INT 4
45243: PUSH
45244: LD_INT 5
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: PUSH
45264: LD_VAR 0 1
45268: PPUSH
45269: CALL_OW 254
45273: PUSH
45274: LD_INT 1
45276: PLUS
45277: ARRAY
45278: ST_TO_ADDR
// end ;
45279: LD_VAR 0 2
45283: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45284: LD_INT 0
45286: PPUSH
45287: PPUSH
45288: PPUSH
45289: PPUSH
45290: PPUSH
// if not hexes then
45291: LD_VAR 0 2
45295: NOT
45296: IFFALSE 45300
// exit ;
45298: GO 45448
// dist := 9999 ;
45300: LD_ADDR_VAR 0 5
45304: PUSH
45305: LD_INT 9999
45307: ST_TO_ADDR
// for i = 1 to hexes do
45308: LD_ADDR_VAR 0 4
45312: PUSH
45313: DOUBLE
45314: LD_INT 1
45316: DEC
45317: ST_TO_ADDR
45318: LD_VAR 0 2
45322: PUSH
45323: FOR_TO
45324: IFFALSE 45436
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45326: LD_VAR 0 1
45330: PPUSH
45331: LD_VAR 0 2
45335: PUSH
45336: LD_VAR 0 4
45340: ARRAY
45341: PUSH
45342: LD_INT 1
45344: ARRAY
45345: PPUSH
45346: LD_VAR 0 2
45350: PUSH
45351: LD_VAR 0 4
45355: ARRAY
45356: PUSH
45357: LD_INT 2
45359: ARRAY
45360: PPUSH
45361: CALL_OW 297
45365: PUSH
45366: LD_VAR 0 5
45370: LESS
45371: IFFALSE 45434
// begin hex := hexes [ i ] ;
45373: LD_ADDR_VAR 0 7
45377: PUSH
45378: LD_VAR 0 2
45382: PUSH
45383: LD_VAR 0 4
45387: ARRAY
45388: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45389: LD_ADDR_VAR 0 5
45393: PUSH
45394: LD_VAR 0 1
45398: PPUSH
45399: LD_VAR 0 2
45403: PUSH
45404: LD_VAR 0 4
45408: ARRAY
45409: PUSH
45410: LD_INT 1
45412: ARRAY
45413: PPUSH
45414: LD_VAR 0 2
45418: PUSH
45419: LD_VAR 0 4
45423: ARRAY
45424: PUSH
45425: LD_INT 2
45427: ARRAY
45428: PPUSH
45429: CALL_OW 297
45433: ST_TO_ADDR
// end ; end ;
45434: GO 45323
45436: POP
45437: POP
// result := hex ;
45438: LD_ADDR_VAR 0 3
45442: PUSH
45443: LD_VAR 0 7
45447: ST_TO_ADDR
// end ;
45448: LD_VAR 0 3
45452: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45453: LD_INT 0
45455: PPUSH
45456: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45457: LD_VAR 0 1
45461: NOT
45462: PUSH
45463: LD_VAR 0 1
45467: PUSH
45468: LD_INT 21
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 23
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PPUSH
45492: CALL_OW 69
45496: IN
45497: NOT
45498: OR
45499: IFFALSE 45503
// exit ;
45501: GO 45550
// for i = 1 to 3 do
45503: LD_ADDR_VAR 0 3
45507: PUSH
45508: DOUBLE
45509: LD_INT 1
45511: DEC
45512: ST_TO_ADDR
45513: LD_INT 3
45515: PUSH
45516: FOR_TO
45517: IFFALSE 45548
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45519: LD_VAR 0 1
45523: PPUSH
45524: CALL_OW 250
45528: PPUSH
45529: LD_VAR 0 1
45533: PPUSH
45534: CALL_OW 251
45538: PPUSH
45539: LD_INT 1
45541: PPUSH
45542: CALL_OW 453
45546: GO 45516
45548: POP
45549: POP
// end ;
45550: LD_VAR 0 2
45554: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45555: LD_INT 0
45557: PPUSH
45558: PPUSH
45559: PPUSH
45560: PPUSH
45561: PPUSH
45562: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45563: LD_VAR 0 1
45567: NOT
45568: PUSH
45569: LD_VAR 0 2
45573: NOT
45574: OR
45575: PUSH
45576: LD_VAR 0 1
45580: PPUSH
45581: CALL_OW 314
45585: OR
45586: IFFALSE 45590
// exit ;
45588: GO 46031
// x := GetX ( enemy_unit ) ;
45590: LD_ADDR_VAR 0 7
45594: PUSH
45595: LD_VAR 0 2
45599: PPUSH
45600: CALL_OW 250
45604: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45605: LD_ADDR_VAR 0 8
45609: PUSH
45610: LD_VAR 0 2
45614: PPUSH
45615: CALL_OW 251
45619: ST_TO_ADDR
// if not x or not y then
45620: LD_VAR 0 7
45624: NOT
45625: PUSH
45626: LD_VAR 0 8
45630: NOT
45631: OR
45632: IFFALSE 45636
// exit ;
45634: GO 46031
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45636: LD_ADDR_VAR 0 6
45640: PUSH
45641: LD_VAR 0 7
45645: PPUSH
45646: LD_INT 0
45648: PPUSH
45649: LD_INT 4
45651: PPUSH
45652: CALL_OW 272
45656: PUSH
45657: LD_VAR 0 8
45661: PPUSH
45662: LD_INT 0
45664: PPUSH
45665: LD_INT 4
45667: PPUSH
45668: CALL_OW 273
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_VAR 0 7
45681: PPUSH
45682: LD_INT 1
45684: PPUSH
45685: LD_INT 4
45687: PPUSH
45688: CALL_OW 272
45692: PUSH
45693: LD_VAR 0 8
45697: PPUSH
45698: LD_INT 1
45700: PPUSH
45701: LD_INT 4
45703: PPUSH
45704: CALL_OW 273
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_VAR 0 7
45717: PPUSH
45718: LD_INT 2
45720: PPUSH
45721: LD_INT 4
45723: PPUSH
45724: CALL_OW 272
45728: PUSH
45729: LD_VAR 0 8
45733: PPUSH
45734: LD_INT 2
45736: PPUSH
45737: LD_INT 4
45739: PPUSH
45740: CALL_OW 273
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_VAR 0 7
45753: PPUSH
45754: LD_INT 3
45756: PPUSH
45757: LD_INT 4
45759: PPUSH
45760: CALL_OW 272
45764: PUSH
45765: LD_VAR 0 8
45769: PPUSH
45770: LD_INT 3
45772: PPUSH
45773: LD_INT 4
45775: PPUSH
45776: CALL_OW 273
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_VAR 0 7
45789: PPUSH
45790: LD_INT 4
45792: PPUSH
45793: LD_INT 4
45795: PPUSH
45796: CALL_OW 272
45800: PUSH
45801: LD_VAR 0 8
45805: PPUSH
45806: LD_INT 4
45808: PPUSH
45809: LD_INT 4
45811: PPUSH
45812: CALL_OW 273
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_VAR 0 7
45825: PPUSH
45826: LD_INT 5
45828: PPUSH
45829: LD_INT 4
45831: PPUSH
45832: CALL_OW 272
45836: PUSH
45837: LD_VAR 0 8
45841: PPUSH
45842: LD_INT 5
45844: PPUSH
45845: LD_INT 4
45847: PPUSH
45848: CALL_OW 273
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: ST_TO_ADDR
// for i = tmp downto 1 do
45865: LD_ADDR_VAR 0 4
45869: PUSH
45870: DOUBLE
45871: LD_VAR 0 6
45875: INC
45876: ST_TO_ADDR
45877: LD_INT 1
45879: PUSH
45880: FOR_DOWNTO
45881: IFFALSE 45982
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45883: LD_VAR 0 6
45887: PUSH
45888: LD_VAR 0 4
45892: ARRAY
45893: PUSH
45894: LD_INT 1
45896: ARRAY
45897: PPUSH
45898: LD_VAR 0 6
45902: PUSH
45903: LD_VAR 0 4
45907: ARRAY
45908: PUSH
45909: LD_INT 2
45911: ARRAY
45912: PPUSH
45913: CALL_OW 488
45917: NOT
45918: PUSH
45919: LD_VAR 0 6
45923: PUSH
45924: LD_VAR 0 4
45928: ARRAY
45929: PUSH
45930: LD_INT 1
45932: ARRAY
45933: PPUSH
45934: LD_VAR 0 6
45938: PUSH
45939: LD_VAR 0 4
45943: ARRAY
45944: PUSH
45945: LD_INT 2
45947: ARRAY
45948: PPUSH
45949: CALL_OW 428
45953: PUSH
45954: LD_INT 0
45956: NONEQUAL
45957: OR
45958: IFFALSE 45980
// tmp := Delete ( tmp , i ) ;
45960: LD_ADDR_VAR 0 6
45964: PUSH
45965: LD_VAR 0 6
45969: PPUSH
45970: LD_VAR 0 4
45974: PPUSH
45975: CALL_OW 3
45979: ST_TO_ADDR
45980: GO 45880
45982: POP
45983: POP
// j := GetClosestHex ( unit , tmp ) ;
45984: LD_ADDR_VAR 0 5
45988: PUSH
45989: LD_VAR 0 1
45993: PPUSH
45994: LD_VAR 0 6
45998: PPUSH
45999: CALL 45284 0 2
46003: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46004: LD_VAR 0 1
46008: PPUSH
46009: LD_VAR 0 5
46013: PUSH
46014: LD_INT 1
46016: ARRAY
46017: PPUSH
46018: LD_VAR 0 5
46022: PUSH
46023: LD_INT 2
46025: ARRAY
46026: PPUSH
46027: CALL_OW 111
// end ;
46031: LD_VAR 0 3
46035: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46036: LD_INT 0
46038: PPUSH
46039: PPUSH
46040: PPUSH
// uc_side = 0 ;
46041: LD_ADDR_OWVAR 20
46045: PUSH
46046: LD_INT 0
46048: ST_TO_ADDR
// uc_nation = 0 ;
46049: LD_ADDR_OWVAR 21
46053: PUSH
46054: LD_INT 0
46056: ST_TO_ADDR
// InitHc ;
46057: CALL_OW 19
// InitVc ;
46061: CALL_OW 20
// if mastodonts then
46065: LD_VAR 0 6
46069: IFFALSE 46136
// for i = 1 to mastodonts do
46071: LD_ADDR_VAR 0 11
46075: PUSH
46076: DOUBLE
46077: LD_INT 1
46079: DEC
46080: ST_TO_ADDR
46081: LD_VAR 0 6
46085: PUSH
46086: FOR_TO
46087: IFFALSE 46134
// begin vc_chassis := 31 ;
46089: LD_ADDR_OWVAR 37
46093: PUSH
46094: LD_INT 31
46096: ST_TO_ADDR
// vc_control := control_rider ;
46097: LD_ADDR_OWVAR 38
46101: PUSH
46102: LD_INT 4
46104: ST_TO_ADDR
// animal := CreateVehicle ;
46105: LD_ADDR_VAR 0 12
46109: PUSH
46110: CALL_OW 45
46114: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
46115: LD_VAR 0 12
46119: PPUSH
46120: LD_VAR 0 8
46124: PPUSH
46125: LD_INT 0
46127: PPUSH
46128: CALL_OW 49
// end ;
46132: GO 46086
46134: POP
46135: POP
// if horses then
46136: LD_VAR 0 5
46140: IFFALSE 46207
// for i = 1 to horses do
46142: LD_ADDR_VAR 0 11
46146: PUSH
46147: DOUBLE
46148: LD_INT 1
46150: DEC
46151: ST_TO_ADDR
46152: LD_VAR 0 5
46156: PUSH
46157: FOR_TO
46158: IFFALSE 46205
// begin hc_class := 21 ;
46160: LD_ADDR_OWVAR 28
46164: PUSH
46165: LD_INT 21
46167: ST_TO_ADDR
// hc_gallery :=  ;
46168: LD_ADDR_OWVAR 33
46172: PUSH
46173: LD_STRING 
46175: ST_TO_ADDR
// animal := CreateHuman ;
46176: LD_ADDR_VAR 0 12
46180: PUSH
46181: CALL_OW 44
46185: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
46186: LD_VAR 0 12
46190: PPUSH
46191: LD_VAR 0 8
46195: PPUSH
46196: LD_INT 0
46198: PPUSH
46199: CALL_OW 49
// end ;
46203: GO 46157
46205: POP
46206: POP
// if birds then
46207: LD_VAR 0 1
46211: IFFALSE 46278
// for i = 1 to birds do
46213: LD_ADDR_VAR 0 11
46217: PUSH
46218: DOUBLE
46219: LD_INT 1
46221: DEC
46222: ST_TO_ADDR
46223: LD_VAR 0 1
46227: PUSH
46228: FOR_TO
46229: IFFALSE 46276
// begin hc_class = 18 ;
46231: LD_ADDR_OWVAR 28
46235: PUSH
46236: LD_INT 18
46238: ST_TO_ADDR
// hc_gallery =  ;
46239: LD_ADDR_OWVAR 33
46243: PUSH
46244: LD_STRING 
46246: ST_TO_ADDR
// animal := CreateHuman ;
46247: LD_ADDR_VAR 0 12
46251: PUSH
46252: CALL_OW 44
46256: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
46257: LD_VAR 0 12
46261: PPUSH
46262: LD_VAR 0 8
46266: PPUSH
46267: LD_INT 0
46269: PPUSH
46270: CALL_OW 49
// end ;
46274: GO 46228
46276: POP
46277: POP
// if tigers then
46278: LD_VAR 0 2
46282: IFFALSE 46366
// for i = 1 to tigers do
46284: LD_ADDR_VAR 0 11
46288: PUSH
46289: DOUBLE
46290: LD_INT 1
46292: DEC
46293: ST_TO_ADDR
46294: LD_VAR 0 2
46298: PUSH
46299: FOR_TO
46300: IFFALSE 46364
// begin hc_class = class_tiger ;
46302: LD_ADDR_OWVAR 28
46306: PUSH
46307: LD_INT 14
46309: ST_TO_ADDR
// hc_gallery =  ;
46310: LD_ADDR_OWVAR 33
46314: PUSH
46315: LD_STRING 
46317: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46318: LD_ADDR_OWVAR 35
46322: PUSH
46323: LD_INT 7
46325: NEG
46326: PPUSH
46327: LD_INT 7
46329: PPUSH
46330: CALL_OW 12
46334: ST_TO_ADDR
// animal := CreateHuman ;
46335: LD_ADDR_VAR 0 12
46339: PUSH
46340: CALL_OW 44
46344: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
46345: LD_VAR 0 12
46349: PPUSH
46350: LD_VAR 0 8
46354: PPUSH
46355: LD_INT 0
46357: PPUSH
46358: CALL_OW 49
// end ;
46362: GO 46299
46364: POP
46365: POP
// if apemans then
46366: LD_VAR 0 3
46370: IFFALSE 46493
// for i = 1 to apemans do
46372: LD_ADDR_VAR 0 11
46376: PUSH
46377: DOUBLE
46378: LD_INT 1
46380: DEC
46381: ST_TO_ADDR
46382: LD_VAR 0 3
46386: PUSH
46387: FOR_TO
46388: IFFALSE 46491
// begin hc_class = class_apeman ;
46390: LD_ADDR_OWVAR 28
46394: PUSH
46395: LD_INT 12
46397: ST_TO_ADDR
// hc_gallery =  ;
46398: LD_ADDR_OWVAR 33
46402: PUSH
46403: LD_STRING 
46405: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
46406: LD_ADDR_OWVAR 35
46410: PUSH
46411: LD_INT 5
46413: NEG
46414: PPUSH
46415: LD_INT 5
46417: PPUSH
46418: CALL_OW 12
46422: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46423: LD_ADDR_OWVAR 31
46427: PUSH
46428: LD_INT 1
46430: PPUSH
46431: LD_INT 3
46433: PPUSH
46434: CALL_OW 12
46438: PUSH
46439: LD_INT 1
46441: PPUSH
46442: LD_INT 3
46444: PPUSH
46445: CALL_OW 12
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: ST_TO_ADDR
// animal := CreateHuman ;
46462: LD_ADDR_VAR 0 12
46466: PUSH
46467: CALL_OW 44
46471: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
46472: LD_VAR 0 12
46476: PPUSH
46477: LD_VAR 0 8
46481: PPUSH
46482: LD_INT 0
46484: PPUSH
46485: CALL_OW 49
// end ;
46489: GO 46387
46491: POP
46492: POP
// if enchidnas then
46493: LD_VAR 0 4
46497: IFFALSE 46564
// for i = 1 to enchidnas do
46499: LD_ADDR_VAR 0 11
46503: PUSH
46504: DOUBLE
46505: LD_INT 1
46507: DEC
46508: ST_TO_ADDR
46509: LD_VAR 0 4
46513: PUSH
46514: FOR_TO
46515: IFFALSE 46562
// begin hc_class = 13 ;
46517: LD_ADDR_OWVAR 28
46521: PUSH
46522: LD_INT 13
46524: ST_TO_ADDR
// hc_gallery =  ;
46525: LD_ADDR_OWVAR 33
46529: PUSH
46530: LD_STRING 
46532: ST_TO_ADDR
// animal := CreateHuman ;
46533: LD_ADDR_VAR 0 12
46537: PUSH
46538: CALL_OW 44
46542: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
46543: LD_VAR 0 12
46547: PPUSH
46548: LD_VAR 0 8
46552: PPUSH
46553: LD_INT 0
46555: PPUSH
46556: CALL_OW 49
// end ;
46560: GO 46514
46562: POP
46563: POP
// if not wat_area then
46564: LD_VAR 0 9
46568: NOT
46569: IFFALSE 46573
// exit ;
46571: GO 46644
// if fishes then
46573: LD_VAR 0 7
46577: IFFALSE 46644
// for i = 1 to fishes do
46579: LD_ADDR_VAR 0 11
46583: PUSH
46584: DOUBLE
46585: LD_INT 1
46587: DEC
46588: ST_TO_ADDR
46589: LD_VAR 0 7
46593: PUSH
46594: FOR_TO
46595: IFFALSE 46642
// begin hc_class = 20 ;
46597: LD_ADDR_OWVAR 28
46601: PUSH
46602: LD_INT 20
46604: ST_TO_ADDR
// hc_gallery =  ;
46605: LD_ADDR_OWVAR 33
46609: PUSH
46610: LD_STRING 
46612: ST_TO_ADDR
// animal := CreateHuman ;
46613: LD_ADDR_VAR 0 12
46617: PUSH
46618: CALL_OW 44
46622: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
46623: LD_VAR 0 12
46627: PPUSH
46628: LD_VAR 0 9
46632: PPUSH
46633: LD_INT 0
46635: PPUSH
46636: CALL_OW 49
// end ;
46640: GO 46594
46642: POP
46643: POP
// end ;
46644: LD_VAR 0 10
46648: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
46649: LD_INT 0
46651: PPUSH
46652: PPUSH
46653: PPUSH
46654: PPUSH
46655: PPUSH
46656: PPUSH
46657: PPUSH
46658: PPUSH
46659: PPUSH
46660: PPUSH
46661: PPUSH
46662: PPUSH
46663: PPUSH
46664: PPUSH
46665: PPUSH
46666: PPUSH
46667: PPUSH
46668: PPUSH
46669: PPUSH
46670: PPUSH
46671: PPUSH
46672: PPUSH
46673: PPUSH
46674: PPUSH
46675: PPUSH
46676: PPUSH
46677: PPUSH
46678: PPUSH
// if not list then
46679: LD_VAR 0 1
46683: NOT
46684: IFFALSE 46688
// exit ;
46686: GO 49985
// base := list [ 1 ] ;
46688: LD_ADDR_VAR 0 3
46692: PUSH
46693: LD_VAR 0 1
46697: PUSH
46698: LD_INT 1
46700: ARRAY
46701: ST_TO_ADDR
// group := list [ 2 ] ;
46702: LD_ADDR_VAR 0 4
46706: PUSH
46707: LD_VAR 0 1
46711: PUSH
46712: LD_INT 2
46714: ARRAY
46715: ST_TO_ADDR
// path := list [ 3 ] ;
46716: LD_ADDR_VAR 0 5
46720: PUSH
46721: LD_VAR 0 1
46725: PUSH
46726: LD_INT 3
46728: ARRAY
46729: ST_TO_ADDR
// flags := list [ 4 ] ;
46730: LD_ADDR_VAR 0 6
46734: PUSH
46735: LD_VAR 0 1
46739: PUSH
46740: LD_INT 4
46742: ARRAY
46743: ST_TO_ADDR
// mined := [ ] ;
46744: LD_ADDR_VAR 0 27
46748: PUSH
46749: EMPTY
46750: ST_TO_ADDR
// bombed := [ ] ;
46751: LD_ADDR_VAR 0 28
46755: PUSH
46756: EMPTY
46757: ST_TO_ADDR
// if not group or not path then
46758: LD_VAR 0 4
46762: NOT
46763: PUSH
46764: LD_VAR 0 5
46768: NOT
46769: OR
46770: IFFALSE 46774
// exit ;
46772: GO 49985
// if flags then
46774: LD_VAR 0 6
46778: IFFALSE 46922
// begin f_ignore_area := flags [ 1 ] ;
46780: LD_ADDR_VAR 0 17
46784: PUSH
46785: LD_VAR 0 6
46789: PUSH
46790: LD_INT 1
46792: ARRAY
46793: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
46794: LD_ADDR_VAR 0 18
46798: PUSH
46799: LD_VAR 0 6
46803: PUSH
46804: LD_INT 2
46806: ARRAY
46807: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
46808: LD_ADDR_VAR 0 19
46812: PUSH
46813: LD_VAR 0 6
46817: PUSH
46818: LD_INT 3
46820: ARRAY
46821: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
46822: LD_ADDR_VAR 0 20
46826: PUSH
46827: LD_VAR 0 6
46831: PUSH
46832: LD_INT 4
46834: ARRAY
46835: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
46836: LD_ADDR_VAR 0 21
46840: PUSH
46841: LD_VAR 0 6
46845: PUSH
46846: LD_INT 5
46848: ARRAY
46849: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
46850: LD_ADDR_VAR 0 22
46854: PUSH
46855: LD_VAR 0 6
46859: PUSH
46860: LD_INT 6
46862: ARRAY
46863: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
46864: LD_ADDR_VAR 0 23
46868: PUSH
46869: LD_VAR 0 6
46873: PUSH
46874: LD_INT 7
46876: ARRAY
46877: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
46878: LD_ADDR_VAR 0 24
46882: PUSH
46883: LD_VAR 0 6
46887: PUSH
46888: LD_INT 8
46890: ARRAY
46891: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
46892: LD_ADDR_VAR 0 25
46896: PUSH
46897: LD_VAR 0 6
46901: PUSH
46902: LD_INT 9
46904: ARRAY
46905: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
46906: LD_ADDR_VAR 0 26
46910: PUSH
46911: LD_VAR 0 6
46915: PUSH
46916: LD_INT 10
46918: ARRAY
46919: ST_TO_ADDR
// end else
46920: GO 47002
// begin f_ignore_area := false ;
46922: LD_ADDR_VAR 0 17
46926: PUSH
46927: LD_INT 0
46929: ST_TO_ADDR
// f_capture := false ;
46930: LD_ADDR_VAR 0 18
46934: PUSH
46935: LD_INT 0
46937: ST_TO_ADDR
// f_ignore_civ := false ;
46938: LD_ADDR_VAR 0 19
46942: PUSH
46943: LD_INT 0
46945: ST_TO_ADDR
// f_murder := false ;
46946: LD_ADDR_VAR 0 20
46950: PUSH
46951: LD_INT 0
46953: ST_TO_ADDR
// f_mines := false ;
46954: LD_ADDR_VAR 0 21
46958: PUSH
46959: LD_INT 0
46961: ST_TO_ADDR
// f_repair := false ;
46962: LD_ADDR_VAR 0 22
46966: PUSH
46967: LD_INT 0
46969: ST_TO_ADDR
// f_heal := false ;
46970: LD_ADDR_VAR 0 23
46974: PUSH
46975: LD_INT 0
46977: ST_TO_ADDR
// f_spacetime := false ;
46978: LD_ADDR_VAR 0 24
46982: PUSH
46983: LD_INT 0
46985: ST_TO_ADDR
// f_attack_depot := false ;
46986: LD_ADDR_VAR 0 25
46990: PUSH
46991: LD_INT 0
46993: ST_TO_ADDR
// f_crawl := false ;
46994: LD_ADDR_VAR 0 26
46998: PUSH
46999: LD_INT 0
47001: ST_TO_ADDR
// end ; units_path := [ ] ;
47002: LD_ADDR_VAR 0 16
47006: PUSH
47007: EMPTY
47008: ST_TO_ADDR
// for i = 1 to group do
47009: LD_ADDR_VAR 0 7
47013: PUSH
47014: DOUBLE
47015: LD_INT 1
47017: DEC
47018: ST_TO_ADDR
47019: LD_VAR 0 4
47023: PUSH
47024: FOR_TO
47025: IFFALSE 47054
// begin units_path := Replace ( units_path , i , path ) ;
47027: LD_ADDR_VAR 0 16
47031: PUSH
47032: LD_VAR 0 16
47036: PPUSH
47037: LD_VAR 0 7
47041: PPUSH
47042: LD_VAR 0 5
47046: PPUSH
47047: CALL_OW 1
47051: ST_TO_ADDR
// end ;
47052: GO 47024
47054: POP
47055: POP
// repeat for i = group downto 1 do
47056: LD_ADDR_VAR 0 7
47060: PUSH
47061: DOUBLE
47062: LD_VAR 0 4
47066: INC
47067: ST_TO_ADDR
47068: LD_INT 1
47070: PUSH
47071: FOR_DOWNTO
47072: IFFALSE 49967
// begin wait ( 0 0$1 ) ;
47074: LD_INT 35
47076: PPUSH
47077: CALL_OW 67
// tmp := [ ] ;
47081: LD_ADDR_VAR 0 14
47085: PUSH
47086: EMPTY
47087: ST_TO_ADDR
// attacking := false ;
47088: LD_ADDR_VAR 0 29
47092: PUSH
47093: LD_INT 0
47095: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
47096: LD_VAR 0 4
47100: PUSH
47101: LD_VAR 0 7
47105: ARRAY
47106: PPUSH
47107: CALL_OW 301
47111: PUSH
47112: LD_VAR 0 4
47116: PUSH
47117: LD_VAR 0 7
47121: ARRAY
47122: NOT
47123: OR
47124: IFFALSE 47168
// begin group := Delete ( group , i ) ;
47126: LD_ADDR_VAR 0 4
47130: PUSH
47131: LD_VAR 0 4
47135: PPUSH
47136: LD_VAR 0 7
47140: PPUSH
47141: CALL_OW 3
47145: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
47146: LD_ADDR_VAR 0 16
47150: PUSH
47151: LD_VAR 0 16
47155: PPUSH
47156: LD_VAR 0 7
47160: PPUSH
47161: CALL_OW 3
47165: ST_TO_ADDR
// continue ;
47166: GO 47071
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
47168: LD_VAR 0 4
47172: PUSH
47173: LD_VAR 0 7
47177: ARRAY
47178: PPUSH
47179: LD_INT 10
47181: PPUSH
47182: CALL 45136 0 2
47186: NOT
47187: PUSH
47188: LD_VAR 0 16
47192: PUSH
47193: LD_VAR 0 7
47197: ARRAY
47198: PUSH
47199: EMPTY
47200: EQUAL
47201: NOT
47202: AND
47203: IFFALSE 47469
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
47205: LD_VAR 0 4
47209: PUSH
47210: LD_VAR 0 7
47214: ARRAY
47215: PPUSH
47216: CALL_OW 262
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: IN
47231: IFFALSE 47272
// if GetFuel ( group [ i ] ) < 10 then
47233: LD_VAR 0 4
47237: PUSH
47238: LD_VAR 0 7
47242: ARRAY
47243: PPUSH
47244: CALL_OW 261
47248: PUSH
47249: LD_INT 10
47251: LESS
47252: IFFALSE 47272
// SetFuel ( group [ i ] , 12 ) ;
47254: LD_VAR 0 4
47258: PUSH
47259: LD_VAR 0 7
47263: ARRAY
47264: PPUSH
47265: LD_INT 12
47267: PPUSH
47268: CALL_OW 240
// if units_path [ i ] then
47272: LD_VAR 0 16
47276: PUSH
47277: LD_VAR 0 7
47281: ARRAY
47282: IFFALSE 47467
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
47284: LD_VAR 0 4
47288: PUSH
47289: LD_VAR 0 7
47293: ARRAY
47294: PPUSH
47295: LD_VAR 0 16
47299: PUSH
47300: LD_VAR 0 7
47304: ARRAY
47305: PUSH
47306: LD_INT 1
47308: ARRAY
47309: PUSH
47310: LD_INT 1
47312: ARRAY
47313: PPUSH
47314: LD_VAR 0 16
47318: PUSH
47319: LD_VAR 0 7
47323: ARRAY
47324: PUSH
47325: LD_INT 1
47327: ARRAY
47328: PUSH
47329: LD_INT 2
47331: ARRAY
47332: PPUSH
47333: CALL_OW 297
47337: PUSH
47338: LD_INT 6
47340: GREATER
47341: IFFALSE 47416
// begin if not HasTask ( group [ i ] ) then
47343: LD_VAR 0 4
47347: PUSH
47348: LD_VAR 0 7
47352: ARRAY
47353: PPUSH
47354: CALL_OW 314
47358: NOT
47359: IFFALSE 47414
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
47361: LD_VAR 0 4
47365: PUSH
47366: LD_VAR 0 7
47370: ARRAY
47371: PPUSH
47372: LD_VAR 0 16
47376: PUSH
47377: LD_VAR 0 7
47381: ARRAY
47382: PUSH
47383: LD_INT 1
47385: ARRAY
47386: PUSH
47387: LD_INT 1
47389: ARRAY
47390: PPUSH
47391: LD_VAR 0 16
47395: PUSH
47396: LD_VAR 0 7
47400: ARRAY
47401: PUSH
47402: LD_INT 1
47404: ARRAY
47405: PUSH
47406: LD_INT 2
47408: ARRAY
47409: PPUSH
47410: CALL_OW 114
// end else
47414: GO 47467
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
47416: LD_ADDR_VAR 0 15
47420: PUSH
47421: LD_VAR 0 16
47425: PUSH
47426: LD_VAR 0 7
47430: ARRAY
47431: PPUSH
47432: LD_INT 1
47434: PPUSH
47435: CALL_OW 3
47439: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
47440: LD_ADDR_VAR 0 16
47444: PUSH
47445: LD_VAR 0 16
47449: PPUSH
47450: LD_VAR 0 7
47454: PPUSH
47455: LD_VAR 0 15
47459: PPUSH
47460: CALL_OW 1
47464: ST_TO_ADDR
// continue ;
47465: GO 47071
// end ; end ; end else
47467: GO 49965
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
47469: LD_ADDR_VAR 0 14
47473: PUSH
47474: LD_INT 81
47476: PUSH
47477: LD_VAR 0 4
47481: PUSH
47482: LD_VAR 0 7
47486: ARRAY
47487: PPUSH
47488: CALL_OW 255
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PPUSH
47497: CALL_OW 69
47501: ST_TO_ADDR
// if not tmp then
47502: LD_VAR 0 14
47506: NOT
47507: IFFALSE 47511
// continue ;
47509: GO 47071
// if f_ignore_area then
47511: LD_VAR 0 17
47515: IFFALSE 47603
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
47517: LD_ADDR_VAR 0 15
47521: PUSH
47522: LD_VAR 0 14
47526: PPUSH
47527: LD_INT 3
47529: PUSH
47530: LD_INT 92
47532: PUSH
47533: LD_VAR 0 17
47537: PUSH
47538: LD_INT 1
47540: ARRAY
47541: PUSH
47542: LD_VAR 0 17
47546: PUSH
47547: LD_INT 2
47549: ARRAY
47550: PUSH
47551: LD_VAR 0 17
47555: PUSH
47556: LD_INT 3
47558: ARRAY
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PPUSH
47570: CALL_OW 72
47574: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
47575: LD_VAR 0 14
47579: PUSH
47580: LD_VAR 0 15
47584: DIFF
47585: IFFALSE 47603
// tmp := tmp diff tmp2 ;
47587: LD_ADDR_VAR 0 14
47591: PUSH
47592: LD_VAR 0 14
47596: PUSH
47597: LD_VAR 0 15
47601: DIFF
47602: ST_TO_ADDR
// end ; if not f_murder then
47603: LD_VAR 0 20
47607: NOT
47608: IFFALSE 47666
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
47610: LD_ADDR_VAR 0 15
47614: PUSH
47615: LD_VAR 0 14
47619: PPUSH
47620: LD_INT 3
47622: PUSH
47623: LD_INT 50
47625: PUSH
47626: EMPTY
47627: LIST
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PPUSH
47633: CALL_OW 72
47637: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
47638: LD_VAR 0 14
47642: PUSH
47643: LD_VAR 0 15
47647: DIFF
47648: IFFALSE 47666
// tmp := tmp diff tmp2 ;
47650: LD_ADDR_VAR 0 14
47654: PUSH
47655: LD_VAR 0 14
47659: PUSH
47660: LD_VAR 0 15
47664: DIFF
47665: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
47666: LD_ADDR_VAR 0 14
47670: PUSH
47671: LD_VAR 0 4
47675: PUSH
47676: LD_VAR 0 7
47680: ARRAY
47681: PPUSH
47682: LD_VAR 0 14
47686: PPUSH
47687: LD_INT 1
47689: PPUSH
47690: LD_INT 1
47692: PPUSH
47693: CALL 19342 0 4
47697: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
47698: LD_VAR 0 4
47702: PUSH
47703: LD_VAR 0 7
47707: ARRAY
47708: PPUSH
47709: CALL_OW 257
47713: PUSH
47714: LD_INT 1
47716: EQUAL
47717: IFFALSE 48165
// begin if WantPlant ( group [ i ] ) then
47719: LD_VAR 0 4
47723: PUSH
47724: LD_VAR 0 7
47728: ARRAY
47729: PPUSH
47730: CALL 18810 0 1
47734: IFFALSE 47738
// continue ;
47736: GO 47071
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
47738: LD_VAR 0 18
47742: PUSH
47743: LD_VAR 0 4
47747: PUSH
47748: LD_VAR 0 7
47752: ARRAY
47753: PPUSH
47754: CALL_OW 310
47758: NOT
47759: AND
47760: PUSH
47761: LD_VAR 0 14
47765: PUSH
47766: LD_INT 1
47768: ARRAY
47769: PUSH
47770: LD_VAR 0 14
47774: PPUSH
47775: LD_INT 21
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 58
47787: PUSH
47788: EMPTY
47789: LIST
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PPUSH
47795: CALL_OW 72
47799: IN
47800: AND
47801: IFFALSE 47837
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
47803: LD_VAR 0 4
47807: PUSH
47808: LD_VAR 0 7
47812: ARRAY
47813: PPUSH
47814: LD_VAR 0 14
47818: PUSH
47819: LD_INT 1
47821: ARRAY
47822: PPUSH
47823: CALL_OW 120
// attacking := true ;
47827: LD_ADDR_VAR 0 29
47831: PUSH
47832: LD_INT 1
47834: ST_TO_ADDR
// continue ;
47835: GO 47071
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
47837: LD_VAR 0 26
47841: PUSH
47842: LD_VAR 0 4
47846: PUSH
47847: LD_VAR 0 7
47851: ARRAY
47852: PPUSH
47853: CALL_OW 257
47857: PUSH
47858: LD_INT 1
47860: EQUAL
47861: AND
47862: PUSH
47863: LD_VAR 0 4
47867: PUSH
47868: LD_VAR 0 7
47872: ARRAY
47873: PPUSH
47874: CALL_OW 256
47878: PUSH
47879: LD_INT 800
47881: LESS
47882: AND
47883: PUSH
47884: LD_VAR 0 4
47888: PUSH
47889: LD_VAR 0 7
47893: ARRAY
47894: PPUSH
47895: CALL_OW 318
47899: NOT
47900: AND
47901: IFFALSE 47918
// ComCrawl ( group [ i ] ) ;
47903: LD_VAR 0 4
47907: PUSH
47908: LD_VAR 0 7
47912: ARRAY
47913: PPUSH
47914: CALL_OW 137
// if f_mines then
47918: LD_VAR 0 21
47922: IFFALSE 48165
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
47924: LD_VAR 0 14
47928: PUSH
47929: LD_INT 1
47931: ARRAY
47932: PPUSH
47933: CALL_OW 247
47937: PUSH
47938: LD_INT 3
47940: EQUAL
47941: PUSH
47942: LD_VAR 0 14
47946: PUSH
47947: LD_INT 1
47949: ARRAY
47950: PUSH
47951: LD_VAR 0 27
47955: IN
47956: NOT
47957: AND
47958: IFFALSE 48165
// begin x := GetX ( tmp [ 1 ] ) ;
47960: LD_ADDR_VAR 0 10
47964: PUSH
47965: LD_VAR 0 14
47969: PUSH
47970: LD_INT 1
47972: ARRAY
47973: PPUSH
47974: CALL_OW 250
47978: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
47979: LD_ADDR_VAR 0 11
47983: PUSH
47984: LD_VAR 0 14
47988: PUSH
47989: LD_INT 1
47991: ARRAY
47992: PPUSH
47993: CALL_OW 251
47997: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
47998: LD_ADDR_VAR 0 12
48002: PUSH
48003: LD_VAR 0 4
48007: PUSH
48008: LD_VAR 0 7
48012: ARRAY
48013: PPUSH
48014: CALL 45221 0 1
48018: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
48019: LD_VAR 0 4
48023: PUSH
48024: LD_VAR 0 7
48028: ARRAY
48029: PPUSH
48030: LD_VAR 0 10
48034: PPUSH
48035: LD_VAR 0 11
48039: PPUSH
48040: LD_VAR 0 14
48044: PUSH
48045: LD_INT 1
48047: ARRAY
48048: PPUSH
48049: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
48053: LD_VAR 0 4
48057: PUSH
48058: LD_VAR 0 7
48062: ARRAY
48063: PPUSH
48064: LD_VAR 0 10
48068: PPUSH
48069: LD_VAR 0 12
48073: PPUSH
48074: LD_INT 7
48076: PPUSH
48077: CALL_OW 272
48081: PPUSH
48082: LD_VAR 0 11
48086: PPUSH
48087: LD_VAR 0 12
48091: PPUSH
48092: LD_INT 7
48094: PPUSH
48095: CALL_OW 273
48099: PPUSH
48100: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
48104: LD_VAR 0 4
48108: PUSH
48109: LD_VAR 0 7
48113: ARRAY
48114: PPUSH
48115: LD_INT 71
48117: PPUSH
48118: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
48122: LD_ADDR_VAR 0 27
48126: PUSH
48127: LD_VAR 0 27
48131: PPUSH
48132: LD_VAR 0 27
48136: PUSH
48137: LD_INT 1
48139: PLUS
48140: PPUSH
48141: LD_VAR 0 14
48145: PUSH
48146: LD_INT 1
48148: ARRAY
48149: PPUSH
48150: CALL_OW 1
48154: ST_TO_ADDR
// attacking := true ;
48155: LD_ADDR_VAR 0 29
48159: PUSH
48160: LD_INT 1
48162: ST_TO_ADDR
// continue ;
48163: GO 47071
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
48165: LD_VAR 0 4
48169: PUSH
48170: LD_VAR 0 7
48174: ARRAY
48175: PPUSH
48176: CALL_OW 257
48180: PUSH
48181: LD_INT 17
48183: EQUAL
48184: PUSH
48185: LD_VAR 0 4
48189: PUSH
48190: LD_VAR 0 7
48194: ARRAY
48195: PPUSH
48196: CALL_OW 110
48200: PUSH
48201: LD_INT 71
48203: EQUAL
48204: NOT
48205: AND
48206: IFFALSE 48352
// begin attacking := false ;
48208: LD_ADDR_VAR 0 29
48212: PUSH
48213: LD_INT 0
48215: ST_TO_ADDR
// k := 5 ;
48216: LD_ADDR_VAR 0 9
48220: PUSH
48221: LD_INT 5
48223: ST_TO_ADDR
// if tmp < k then
48224: LD_VAR 0 14
48228: PUSH
48229: LD_VAR 0 9
48233: LESS
48234: IFFALSE 48246
// k := tmp ;
48236: LD_ADDR_VAR 0 9
48240: PUSH
48241: LD_VAR 0 14
48245: ST_TO_ADDR
// for j = 1 to k do
48246: LD_ADDR_VAR 0 8
48250: PUSH
48251: DOUBLE
48252: LD_INT 1
48254: DEC
48255: ST_TO_ADDR
48256: LD_VAR 0 9
48260: PUSH
48261: FOR_TO
48262: IFFALSE 48350
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
48264: LD_VAR 0 14
48268: PUSH
48269: LD_VAR 0 8
48273: ARRAY
48274: PUSH
48275: LD_VAR 0 14
48279: PPUSH
48280: LD_INT 58
48282: PUSH
48283: EMPTY
48284: LIST
48285: PPUSH
48286: CALL_OW 72
48290: IN
48291: NOT
48292: IFFALSE 48348
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
48294: LD_VAR 0 4
48298: PUSH
48299: LD_VAR 0 7
48303: ARRAY
48304: PPUSH
48305: LD_VAR 0 14
48309: PUSH
48310: LD_VAR 0 8
48314: ARRAY
48315: PPUSH
48316: CALL_OW 115
// attacking := true ;
48320: LD_ADDR_VAR 0 29
48324: PUSH
48325: LD_INT 1
48327: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
48328: LD_VAR 0 4
48332: PUSH
48333: LD_VAR 0 7
48337: ARRAY
48338: PPUSH
48339: LD_INT 71
48341: PPUSH
48342: CALL_OW 109
// continue ;
48346: GO 48261
// end ; end ;
48348: GO 48261
48350: POP
48351: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
48352: LD_VAR 0 4
48356: PUSH
48357: LD_VAR 0 7
48361: ARRAY
48362: PPUSH
48363: CALL_OW 257
48367: PUSH
48368: LD_INT 8
48370: EQUAL
48371: PUSH
48372: LD_VAR 0 4
48376: PUSH
48377: LD_VAR 0 7
48381: ARRAY
48382: PPUSH
48383: CALL_OW 264
48387: PUSH
48388: LD_INT 28
48390: PUSH
48391: LD_INT 45
48393: PUSH
48394: LD_INT 7
48396: PUSH
48397: LD_INT 47
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: IN
48406: OR
48407: IFFALSE 48637
// begin attacking := false ;
48409: LD_ADDR_VAR 0 29
48413: PUSH
48414: LD_INT 0
48416: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
48417: LD_VAR 0 14
48421: PUSH
48422: LD_INT 1
48424: ARRAY
48425: PPUSH
48426: CALL_OW 266
48430: PUSH
48431: LD_INT 32
48433: PUSH
48434: LD_INT 31
48436: PUSH
48437: LD_INT 33
48439: PUSH
48440: LD_INT 4
48442: PUSH
48443: LD_INT 5
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: IN
48453: IFFALSE 48637
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
48455: LD_ADDR_VAR 0 9
48459: PUSH
48460: LD_VAR 0 14
48464: PUSH
48465: LD_INT 1
48467: ARRAY
48468: PPUSH
48469: CALL_OW 266
48473: PPUSH
48474: LD_VAR 0 14
48478: PUSH
48479: LD_INT 1
48481: ARRAY
48482: PPUSH
48483: CALL_OW 250
48487: PPUSH
48488: LD_VAR 0 14
48492: PUSH
48493: LD_INT 1
48495: ARRAY
48496: PPUSH
48497: CALL_OW 251
48501: PPUSH
48502: LD_VAR 0 14
48506: PUSH
48507: LD_INT 1
48509: ARRAY
48510: PPUSH
48511: CALL_OW 254
48515: PPUSH
48516: LD_VAR 0 14
48520: PUSH
48521: LD_INT 1
48523: ARRAY
48524: PPUSH
48525: CALL_OW 248
48529: PPUSH
48530: LD_INT 0
48532: PPUSH
48533: CALL 26597 0 6
48537: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
48538: LD_ADDR_VAR 0 8
48542: PUSH
48543: LD_VAR 0 4
48547: PUSH
48548: LD_VAR 0 7
48552: ARRAY
48553: PPUSH
48554: LD_VAR 0 9
48558: PPUSH
48559: CALL 45284 0 2
48563: ST_TO_ADDR
// if j then
48564: LD_VAR 0 8
48568: IFFALSE 48637
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48570: LD_VAR 0 8
48574: PUSH
48575: LD_INT 1
48577: ARRAY
48578: PPUSH
48579: LD_VAR 0 8
48583: PUSH
48584: LD_INT 2
48586: ARRAY
48587: PPUSH
48588: CALL_OW 488
48592: IFFALSE 48637
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
48594: LD_VAR 0 4
48598: PUSH
48599: LD_VAR 0 7
48603: ARRAY
48604: PPUSH
48605: LD_VAR 0 8
48609: PUSH
48610: LD_INT 1
48612: ARRAY
48613: PPUSH
48614: LD_VAR 0 8
48618: PUSH
48619: LD_INT 2
48621: ARRAY
48622: PPUSH
48623: CALL_OW 116
// attacking := true ;
48627: LD_ADDR_VAR 0 29
48631: PUSH
48632: LD_INT 1
48634: ST_TO_ADDR
// continue ;
48635: GO 47071
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
48637: LD_VAR 0 4
48641: PUSH
48642: LD_VAR 0 7
48646: ARRAY
48647: PPUSH
48648: CALL_OW 265
48652: PUSH
48653: LD_INT 11
48655: EQUAL
48656: IFFALSE 48934
// begin k := 10 ;
48658: LD_ADDR_VAR 0 9
48662: PUSH
48663: LD_INT 10
48665: ST_TO_ADDR
// x := 0 ;
48666: LD_ADDR_VAR 0 10
48670: PUSH
48671: LD_INT 0
48673: ST_TO_ADDR
// if tmp < k then
48674: LD_VAR 0 14
48678: PUSH
48679: LD_VAR 0 9
48683: LESS
48684: IFFALSE 48696
// k := tmp ;
48686: LD_ADDR_VAR 0 9
48690: PUSH
48691: LD_VAR 0 14
48695: ST_TO_ADDR
// for j = k downto 1 do
48696: LD_ADDR_VAR 0 8
48700: PUSH
48701: DOUBLE
48702: LD_VAR 0 9
48706: INC
48707: ST_TO_ADDR
48708: LD_INT 1
48710: PUSH
48711: FOR_DOWNTO
48712: IFFALSE 48787
// begin if GetType ( tmp [ j ] ) = unit_human then
48714: LD_VAR 0 14
48718: PUSH
48719: LD_VAR 0 8
48723: ARRAY
48724: PPUSH
48725: CALL_OW 247
48729: PUSH
48730: LD_INT 1
48732: EQUAL
48733: IFFALSE 48785
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
48735: LD_VAR 0 4
48739: PUSH
48740: LD_VAR 0 7
48744: ARRAY
48745: PPUSH
48746: LD_VAR 0 14
48750: PUSH
48751: LD_VAR 0 8
48755: ARRAY
48756: PPUSH
48757: CALL 45555 0 2
// x := tmp [ j ] ;
48761: LD_ADDR_VAR 0 10
48765: PUSH
48766: LD_VAR 0 14
48770: PUSH
48771: LD_VAR 0 8
48775: ARRAY
48776: ST_TO_ADDR
// attacking := true ;
48777: LD_ADDR_VAR 0 29
48781: PUSH
48782: LD_INT 1
48784: ST_TO_ADDR
// end ; end ;
48785: GO 48711
48787: POP
48788: POP
// if not x then
48789: LD_VAR 0 10
48793: NOT
48794: IFFALSE 48934
// begin attacking := true ;
48796: LD_ADDR_VAR 0 29
48800: PUSH
48801: LD_INT 1
48803: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
48804: LD_VAR 0 4
48808: PUSH
48809: LD_VAR 0 7
48813: ARRAY
48814: PPUSH
48815: CALL_OW 250
48819: PPUSH
48820: LD_VAR 0 4
48824: PUSH
48825: LD_VAR 0 7
48829: ARRAY
48830: PPUSH
48831: CALL_OW 251
48835: PPUSH
48836: CALL_OW 546
48840: PUSH
48841: LD_INT 2
48843: ARRAY
48844: PUSH
48845: LD_VAR 0 14
48849: PUSH
48850: LD_INT 1
48852: ARRAY
48853: PPUSH
48854: CALL_OW 250
48858: PPUSH
48859: LD_VAR 0 14
48863: PUSH
48864: LD_INT 1
48866: ARRAY
48867: PPUSH
48868: CALL_OW 251
48872: PPUSH
48873: CALL_OW 546
48877: PUSH
48878: LD_INT 2
48880: ARRAY
48881: EQUAL
48882: IFFALSE 48910
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
48884: LD_VAR 0 4
48888: PUSH
48889: LD_VAR 0 7
48893: ARRAY
48894: PPUSH
48895: LD_VAR 0 14
48899: PUSH
48900: LD_INT 1
48902: ARRAY
48903: PPUSH
48904: CALL 45555 0 2
48908: GO 48934
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
48910: LD_VAR 0 4
48914: PUSH
48915: LD_VAR 0 7
48919: ARRAY
48920: PPUSH
48921: LD_VAR 0 14
48925: PUSH
48926: LD_INT 1
48928: ARRAY
48929: PPUSH
48930: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
48934: LD_VAR 0 4
48938: PUSH
48939: LD_VAR 0 7
48943: ARRAY
48944: PPUSH
48945: CALL_OW 264
48949: PUSH
48950: LD_INT 29
48952: EQUAL
48953: IFFALSE 49319
// begin if WantsToAttack ( group [ i ] ) in bombed then
48955: LD_VAR 0 4
48959: PUSH
48960: LD_VAR 0 7
48964: ARRAY
48965: PPUSH
48966: CALL_OW 319
48970: PUSH
48971: LD_VAR 0 28
48975: IN
48976: IFFALSE 48980
// continue ;
48978: GO 47071
// k := 8 ;
48980: LD_ADDR_VAR 0 9
48984: PUSH
48985: LD_INT 8
48987: ST_TO_ADDR
// x := 0 ;
48988: LD_ADDR_VAR 0 10
48992: PUSH
48993: LD_INT 0
48995: ST_TO_ADDR
// if tmp < k then
48996: LD_VAR 0 14
49000: PUSH
49001: LD_VAR 0 9
49005: LESS
49006: IFFALSE 49018
// k := tmp ;
49008: LD_ADDR_VAR 0 9
49012: PUSH
49013: LD_VAR 0 14
49017: ST_TO_ADDR
// for j = 1 to k do
49018: LD_ADDR_VAR 0 8
49022: PUSH
49023: DOUBLE
49024: LD_INT 1
49026: DEC
49027: ST_TO_ADDR
49028: LD_VAR 0 9
49032: PUSH
49033: FOR_TO
49034: IFFALSE 49166
// begin if GetType ( tmp [ j ] ) = unit_building then
49036: LD_VAR 0 14
49040: PUSH
49041: LD_VAR 0 8
49045: ARRAY
49046: PPUSH
49047: CALL_OW 247
49051: PUSH
49052: LD_INT 3
49054: EQUAL
49055: IFFALSE 49164
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
49057: LD_VAR 0 14
49061: PUSH
49062: LD_VAR 0 8
49066: ARRAY
49067: PUSH
49068: LD_VAR 0 28
49072: IN
49073: NOT
49074: PUSH
49075: LD_VAR 0 14
49079: PUSH
49080: LD_VAR 0 8
49084: ARRAY
49085: PPUSH
49086: CALL_OW 313
49090: AND
49091: IFFALSE 49164
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49093: LD_VAR 0 4
49097: PUSH
49098: LD_VAR 0 7
49102: ARRAY
49103: PPUSH
49104: LD_VAR 0 14
49108: PUSH
49109: LD_VAR 0 8
49113: ARRAY
49114: PPUSH
49115: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
49119: LD_ADDR_VAR 0 28
49123: PUSH
49124: LD_VAR 0 28
49128: PPUSH
49129: LD_VAR 0 28
49133: PUSH
49134: LD_INT 1
49136: PLUS
49137: PPUSH
49138: LD_VAR 0 14
49142: PUSH
49143: LD_VAR 0 8
49147: ARRAY
49148: PPUSH
49149: CALL_OW 1
49153: ST_TO_ADDR
// attacking := true ;
49154: LD_ADDR_VAR 0 29
49158: PUSH
49159: LD_INT 1
49161: ST_TO_ADDR
// break ;
49162: GO 49166
// end ; end ;
49164: GO 49033
49166: POP
49167: POP
// if not attacking and f_attack_depot then
49168: LD_VAR 0 29
49172: NOT
49173: PUSH
49174: LD_VAR 0 25
49178: AND
49179: IFFALSE 49274
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49181: LD_ADDR_VAR 0 13
49185: PUSH
49186: LD_VAR 0 14
49190: PPUSH
49191: LD_INT 2
49193: PUSH
49194: LD_INT 30
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 30
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: LIST
49218: PPUSH
49219: CALL_OW 72
49223: ST_TO_ADDR
// if z then
49224: LD_VAR 0 13
49228: IFFALSE 49274
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
49230: LD_VAR 0 4
49234: PUSH
49235: LD_VAR 0 7
49239: ARRAY
49240: PPUSH
49241: LD_VAR 0 13
49245: PPUSH
49246: LD_VAR 0 4
49250: PUSH
49251: LD_VAR 0 7
49255: ARRAY
49256: PPUSH
49257: CALL_OW 74
49261: PPUSH
49262: CALL_OW 115
// attacking := true ;
49266: LD_ADDR_VAR 0 29
49270: PUSH
49271: LD_INT 1
49273: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
49274: LD_VAR 0 4
49278: PUSH
49279: LD_VAR 0 7
49283: ARRAY
49284: PPUSH
49285: CALL_OW 256
49289: PUSH
49290: LD_INT 500
49292: LESS
49293: IFFALSE 49319
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49295: LD_VAR 0 4
49299: PUSH
49300: LD_VAR 0 7
49304: ARRAY
49305: PPUSH
49306: LD_VAR 0 14
49310: PUSH
49311: LD_INT 1
49313: ARRAY
49314: PPUSH
49315: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49319: LD_VAR 0 4
49323: PUSH
49324: LD_VAR 0 7
49328: ARRAY
49329: PPUSH
49330: CALL_OW 256
49334: PUSH
49335: LD_INT 250
49337: LESS
49338: PUSH
49339: LD_VAR 0 4
49343: PUSH
49344: LD_VAR 0 7
49348: ARRAY
49349: PUSH
49350: LD_INT 21
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 23
49362: PUSH
49363: LD_INT 2
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PPUSH
49374: CALL_OW 69
49378: IN
49379: AND
49380: IFFALSE 49505
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
49382: LD_ADDR_VAR 0 9
49386: PUSH
49387: LD_OWVAR 3
49391: PUSH
49392: LD_VAR 0 4
49396: PUSH
49397: LD_VAR 0 7
49401: ARRAY
49402: DIFF
49403: PPUSH
49404: LD_VAR 0 4
49408: PUSH
49409: LD_VAR 0 7
49413: ARRAY
49414: PPUSH
49415: CALL_OW 74
49419: ST_TO_ADDR
// if not k then
49420: LD_VAR 0 9
49424: NOT
49425: IFFALSE 49429
// continue ;
49427: GO 47071
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
49429: LD_VAR 0 9
49433: PUSH
49434: LD_INT 81
49436: PUSH
49437: LD_VAR 0 4
49441: PUSH
49442: LD_VAR 0 7
49446: ARRAY
49447: PPUSH
49448: CALL_OW 255
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PPUSH
49457: CALL_OW 69
49461: IN
49462: PUSH
49463: LD_VAR 0 9
49467: PPUSH
49468: LD_VAR 0 4
49472: PUSH
49473: LD_VAR 0 7
49477: ARRAY
49478: PPUSH
49479: CALL_OW 296
49483: PUSH
49484: LD_INT 5
49486: LESS
49487: AND
49488: IFFALSE 49505
// ComAutodestruct ( group [ i ] ) ;
49490: LD_VAR 0 4
49494: PUSH
49495: LD_VAR 0 7
49499: ARRAY
49500: PPUSH
49501: CALL 45453 0 1
// end ; if f_attack_depot then
49505: LD_VAR 0 25
49509: IFFALSE 49621
// begin k := 6 ;
49511: LD_ADDR_VAR 0 9
49515: PUSH
49516: LD_INT 6
49518: ST_TO_ADDR
// if tmp < k then
49519: LD_VAR 0 14
49523: PUSH
49524: LD_VAR 0 9
49528: LESS
49529: IFFALSE 49541
// k := tmp ;
49531: LD_ADDR_VAR 0 9
49535: PUSH
49536: LD_VAR 0 14
49540: ST_TO_ADDR
// for j = 1 to k do
49541: LD_ADDR_VAR 0 8
49545: PUSH
49546: DOUBLE
49547: LD_INT 1
49549: DEC
49550: ST_TO_ADDR
49551: LD_VAR 0 9
49555: PUSH
49556: FOR_TO
49557: IFFALSE 49619
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
49559: LD_VAR 0 8
49563: PPUSH
49564: CALL_OW 266
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: IN
49579: IFFALSE 49617
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49581: LD_VAR 0 4
49585: PUSH
49586: LD_VAR 0 7
49590: ARRAY
49591: PPUSH
49592: LD_VAR 0 14
49596: PUSH
49597: LD_VAR 0 8
49601: ARRAY
49602: PPUSH
49603: CALL_OW 115
// attacking := true ;
49607: LD_ADDR_VAR 0 29
49611: PUSH
49612: LD_INT 1
49614: ST_TO_ADDR
// break ;
49615: GO 49619
// end ;
49617: GO 49556
49619: POP
49620: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
49621: LD_VAR 0 4
49625: PUSH
49626: LD_VAR 0 7
49630: ARRAY
49631: PPUSH
49632: CALL_OW 302
49636: PUSH
49637: LD_VAR 0 29
49641: NOT
49642: AND
49643: IFFALSE 49965
// begin if GetTag ( group [ i ] ) = 71 then
49645: LD_VAR 0 4
49649: PUSH
49650: LD_VAR 0 7
49654: ARRAY
49655: PPUSH
49656: CALL_OW 110
49660: PUSH
49661: LD_INT 71
49663: EQUAL
49664: IFFALSE 49705
// begin if HasTask ( group [ i ] ) then
49666: LD_VAR 0 4
49670: PUSH
49671: LD_VAR 0 7
49675: ARRAY
49676: PPUSH
49677: CALL_OW 314
49681: IFFALSE 49687
// continue else
49683: GO 47071
49685: GO 49705
// SetTag ( group [ i ] , 0 ) ;
49687: LD_VAR 0 4
49691: PUSH
49692: LD_VAR 0 7
49696: ARRAY
49697: PPUSH
49698: LD_INT 0
49700: PPUSH
49701: CALL_OW 109
// end ; k := 8 ;
49705: LD_ADDR_VAR 0 9
49709: PUSH
49710: LD_INT 8
49712: ST_TO_ADDR
// x := 0 ;
49713: LD_ADDR_VAR 0 10
49717: PUSH
49718: LD_INT 0
49720: ST_TO_ADDR
// if tmp < k then
49721: LD_VAR 0 14
49725: PUSH
49726: LD_VAR 0 9
49730: LESS
49731: IFFALSE 49743
// k := tmp ;
49733: LD_ADDR_VAR 0 9
49737: PUSH
49738: LD_VAR 0 14
49742: ST_TO_ADDR
// for j = 1 to k do
49743: LD_ADDR_VAR 0 8
49747: PUSH
49748: DOUBLE
49749: LD_INT 1
49751: DEC
49752: ST_TO_ADDR
49753: LD_VAR 0 9
49757: PUSH
49758: FOR_TO
49759: IFFALSE 49857
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
49761: LD_VAR 0 14
49765: PUSH
49766: LD_VAR 0 8
49770: ARRAY
49771: PPUSH
49772: CALL_OW 247
49776: PUSH
49777: LD_INT 1
49779: EQUAL
49780: PUSH
49781: LD_VAR 0 14
49785: PUSH
49786: LD_VAR 0 8
49790: ARRAY
49791: PPUSH
49792: CALL_OW 256
49796: PUSH
49797: LD_INT 250
49799: LESS
49800: PUSH
49801: LD_VAR 0 20
49805: AND
49806: PUSH
49807: LD_VAR 0 20
49811: NOT
49812: PUSH
49813: LD_VAR 0 14
49817: PUSH
49818: LD_VAR 0 8
49822: ARRAY
49823: PPUSH
49824: CALL_OW 256
49828: PUSH
49829: LD_INT 250
49831: GREATEREQUAL
49832: AND
49833: OR
49834: AND
49835: IFFALSE 49855
// begin x := tmp [ j ] ;
49837: LD_ADDR_VAR 0 10
49841: PUSH
49842: LD_VAR 0 14
49846: PUSH
49847: LD_VAR 0 8
49851: ARRAY
49852: ST_TO_ADDR
// break ;
49853: GO 49857
// end ;
49855: GO 49758
49857: POP
49858: POP
// if x then
49859: LD_VAR 0 10
49863: IFFALSE 49887
// ComAttackUnit ( group [ i ] , x ) else
49865: LD_VAR 0 4
49869: PUSH
49870: LD_VAR 0 7
49874: ARRAY
49875: PPUSH
49876: LD_VAR 0 10
49880: PPUSH
49881: CALL_OW 115
49885: GO 49911
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49887: LD_VAR 0 4
49891: PUSH
49892: LD_VAR 0 7
49896: ARRAY
49897: PPUSH
49898: LD_VAR 0 14
49902: PUSH
49903: LD_INT 1
49905: ARRAY
49906: PPUSH
49907: CALL_OW 115
// if not HasTask ( group [ i ] ) then
49911: LD_VAR 0 4
49915: PUSH
49916: LD_VAR 0 7
49920: ARRAY
49921: PPUSH
49922: CALL_OW 314
49926: NOT
49927: IFFALSE 49965
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
49929: LD_VAR 0 4
49933: PUSH
49934: LD_VAR 0 7
49938: ARRAY
49939: PPUSH
49940: LD_VAR 0 14
49944: PPUSH
49945: LD_VAR 0 4
49949: PUSH
49950: LD_VAR 0 7
49954: ARRAY
49955: PPUSH
49956: CALL_OW 74
49960: PPUSH
49961: CALL_OW 115
// end ; end ; end ;
49965: GO 47071
49967: POP
49968: POP
// wait ( 0 0$1 ) ;
49969: LD_INT 35
49971: PPUSH
49972: CALL_OW 67
// until group = [ ] ;
49976: LD_VAR 0 4
49980: PUSH
49981: EMPTY
49982: EQUAL
49983: IFFALSE 47056
// end ;
49985: LD_VAR 0 2
49989: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
49990: LD_INT 0
49992: PPUSH
49993: PPUSH
49994: PPUSH
49995: PPUSH
// if not base_units then
49996: LD_VAR 0 1
50000: NOT
50001: IFFALSE 50005
// exit ;
50003: GO 50092
// result := false ;
50005: LD_ADDR_VAR 0 2
50009: PUSH
50010: LD_INT 0
50012: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50013: LD_ADDR_VAR 0 5
50017: PUSH
50018: LD_VAR 0 1
50022: PPUSH
50023: LD_INT 21
50025: PUSH
50026: LD_INT 3
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PPUSH
50033: CALL_OW 72
50037: ST_TO_ADDR
// if not tmp then
50038: LD_VAR 0 5
50042: NOT
50043: IFFALSE 50047
// exit ;
50045: GO 50092
// for i in tmp do
50047: LD_ADDR_VAR 0 3
50051: PUSH
50052: LD_VAR 0 5
50056: PUSH
50057: FOR_IN
50058: IFFALSE 50090
// begin result := EnemyInRange ( i , 22 ) ;
50060: LD_ADDR_VAR 0 2
50064: PUSH
50065: LD_VAR 0 3
50069: PPUSH
50070: LD_INT 22
50072: PPUSH
50073: CALL 45136 0 2
50077: ST_TO_ADDR
// if result then
50078: LD_VAR 0 2
50082: IFFALSE 50088
// exit ;
50084: POP
50085: POP
50086: GO 50092
// end ;
50088: GO 50057
50090: POP
50091: POP
// end ;
50092: LD_VAR 0 2
50096: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
50097: LD_INT 0
50099: PPUSH
50100: PPUSH
// if not units then
50101: LD_VAR 0 1
50105: NOT
50106: IFFALSE 50110
// exit ;
50108: GO 50180
// result := [ ] ;
50110: LD_ADDR_VAR 0 3
50114: PUSH
50115: EMPTY
50116: ST_TO_ADDR
// for i in units do
50117: LD_ADDR_VAR 0 4
50121: PUSH
50122: LD_VAR 0 1
50126: PUSH
50127: FOR_IN
50128: IFFALSE 50178
// if GetTag ( i ) = tag then
50130: LD_VAR 0 4
50134: PPUSH
50135: CALL_OW 110
50139: PUSH
50140: LD_VAR 0 2
50144: EQUAL
50145: IFFALSE 50176
// result := Insert ( result , result + 1 , i ) ;
50147: LD_ADDR_VAR 0 3
50151: PUSH
50152: LD_VAR 0 3
50156: PPUSH
50157: LD_VAR 0 3
50161: PUSH
50162: LD_INT 1
50164: PLUS
50165: PPUSH
50166: LD_VAR 0 4
50170: PPUSH
50171: CALL_OW 2
50175: ST_TO_ADDR
50176: GO 50127
50178: POP
50179: POP
// end ;
50180: LD_VAR 0 3
50184: RET
// export function IsDriver ( un ) ; begin
50185: LD_INT 0
50187: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50188: LD_ADDR_VAR 0 2
50192: PUSH
50193: LD_VAR 0 1
50197: PUSH
50198: LD_INT 55
50200: PUSH
50201: EMPTY
50202: LIST
50203: PPUSH
50204: CALL_OW 69
50208: IN
50209: ST_TO_ADDR
// end ; end_of_file
50210: LD_VAR 0 2
50214: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit ; export function InitMacro ; var i ; begin
50215: LD_INT 0
50217: PPUSH
50218: PPUSH
// skirmish := false ;
50219: LD_ADDR_EXP 56
50223: PUSH
50224: LD_INT 0
50226: ST_TO_ADDR
// mc_bases := [ ] ;
50227: LD_ADDR_EXP 57
50231: PUSH
50232: EMPTY
50233: ST_TO_ADDR
// mc_sides := [ ] ;
50234: LD_ADDR_EXP 83
50238: PUSH
50239: EMPTY
50240: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
50241: LD_ADDR_EXP 58
50245: PUSH
50246: EMPTY
50247: ST_TO_ADDR
// mc_building_repairs := [ ] ;
50248: LD_ADDR_EXP 59
50252: PUSH
50253: EMPTY
50254: ST_TO_ADDR
// mc_need_heal := [ ] ;
50255: LD_ADDR_EXP 60
50259: PUSH
50260: EMPTY
50261: ST_TO_ADDR
// mc_healers := [ ] ;
50262: LD_ADDR_EXP 61
50266: PUSH
50267: EMPTY
50268: ST_TO_ADDR
// mc_build_list := [ ] ;
50269: LD_ADDR_EXP 62
50273: PUSH
50274: EMPTY
50275: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
50276: LD_ADDR_EXP 89
50280: PUSH
50281: EMPTY
50282: ST_TO_ADDR
// mc_builders := [ ] ;
50283: LD_ADDR_EXP 63
50287: PUSH
50288: EMPTY
50289: ST_TO_ADDR
// mc_construct_list := [ ] ;
50290: LD_ADDR_EXP 64
50294: PUSH
50295: EMPTY
50296: ST_TO_ADDR
// mc_turret_list := [ ] ;
50297: LD_ADDR_EXP 65
50301: PUSH
50302: EMPTY
50303: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
50304: LD_ADDR_EXP 66
50308: PUSH
50309: EMPTY
50310: ST_TO_ADDR
// mc_miners := [ ] ;
50311: LD_ADDR_EXP 71
50315: PUSH
50316: EMPTY
50317: ST_TO_ADDR
// mc_mines := [ ] ;
50318: LD_ADDR_EXP 70
50322: PUSH
50323: EMPTY
50324: ST_TO_ADDR
// mc_minefields := [ ] ;
50325: LD_ADDR_EXP 72
50329: PUSH
50330: EMPTY
50331: ST_TO_ADDR
// mc_crates := [ ] ;
50332: LD_ADDR_EXP 73
50336: PUSH
50337: EMPTY
50338: ST_TO_ADDR
// mc_crates_collector := [ ] ;
50339: LD_ADDR_EXP 74
50343: PUSH
50344: EMPTY
50345: ST_TO_ADDR
// mc_crates_area := [ ] ;
50346: LD_ADDR_EXP 75
50350: PUSH
50351: EMPTY
50352: ST_TO_ADDR
// mc_vehicles := [ ] ;
50353: LD_ADDR_EXP 76
50357: PUSH
50358: EMPTY
50359: ST_TO_ADDR
// mc_attack := [ ] ;
50360: LD_ADDR_EXP 77
50364: PUSH
50365: EMPTY
50366: ST_TO_ADDR
// mc_produce := [ ] ;
50367: LD_ADDR_EXP 78
50371: PUSH
50372: EMPTY
50373: ST_TO_ADDR
// mc_defender := [ ] ;
50374: LD_ADDR_EXP 79
50378: PUSH
50379: EMPTY
50380: ST_TO_ADDR
// mc_parking := [ ] ;
50381: LD_ADDR_EXP 81
50385: PUSH
50386: EMPTY
50387: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
50388: LD_ADDR_EXP 67
50392: PUSH
50393: EMPTY
50394: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
50395: LD_ADDR_EXP 69
50399: PUSH
50400: EMPTY
50401: ST_TO_ADDR
// mc_scan := [ ] ;
50402: LD_ADDR_EXP 80
50406: PUSH
50407: EMPTY
50408: ST_TO_ADDR
// mc_scan_area := [ ] ;
50409: LD_ADDR_EXP 82
50413: PUSH
50414: EMPTY
50415: ST_TO_ADDR
// mc_tech := [ ] ;
50416: LD_ADDR_EXP 84
50420: PUSH
50421: EMPTY
50422: ST_TO_ADDR
// end ;
50423: LD_VAR 0 1
50427: RET
// export function MC_Start ( ) ; var i ; begin
50428: LD_INT 0
50430: PPUSH
50431: PPUSH
// for i = 1 to mc_bases do
50432: LD_ADDR_VAR 0 2
50436: PUSH
50437: DOUBLE
50438: LD_INT 1
50440: DEC
50441: ST_TO_ADDR
50442: LD_EXP 57
50446: PUSH
50447: FOR_TO
50448: IFFALSE 51293
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
50450: LD_ADDR_EXP 58
50454: PUSH
50455: LD_EXP 58
50459: PPUSH
50460: LD_VAR 0 2
50464: PPUSH
50465: EMPTY
50466: PPUSH
50467: CALL_OW 1
50471: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
50472: LD_ADDR_EXP 59
50476: PUSH
50477: LD_EXP 59
50481: PPUSH
50482: LD_VAR 0 2
50486: PPUSH
50487: EMPTY
50488: PPUSH
50489: CALL_OW 1
50493: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
50494: LD_ADDR_EXP 60
50498: PUSH
50499: LD_EXP 60
50503: PPUSH
50504: LD_VAR 0 2
50508: PPUSH
50509: EMPTY
50510: PPUSH
50511: CALL_OW 1
50515: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
50516: LD_ADDR_EXP 61
50520: PUSH
50521: LD_EXP 61
50525: PPUSH
50526: LD_VAR 0 2
50530: PPUSH
50531: EMPTY
50532: PUSH
50533: EMPTY
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PPUSH
50539: CALL_OW 1
50543: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
50544: LD_ADDR_EXP 62
50548: PUSH
50549: LD_EXP 62
50553: PPUSH
50554: LD_VAR 0 2
50558: PPUSH
50559: EMPTY
50560: PPUSH
50561: CALL_OW 1
50565: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
50566: LD_ADDR_EXP 89
50570: PUSH
50571: LD_EXP 89
50575: PPUSH
50576: LD_VAR 0 2
50580: PPUSH
50581: EMPTY
50582: PPUSH
50583: CALL_OW 1
50587: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
50588: LD_ADDR_EXP 63
50592: PUSH
50593: LD_EXP 63
50597: PPUSH
50598: LD_VAR 0 2
50602: PPUSH
50603: EMPTY
50604: PPUSH
50605: CALL_OW 1
50609: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
50610: LD_ADDR_EXP 64
50614: PUSH
50615: LD_EXP 64
50619: PPUSH
50620: LD_VAR 0 2
50624: PPUSH
50625: EMPTY
50626: PPUSH
50627: CALL_OW 1
50631: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
50632: LD_ADDR_EXP 65
50636: PUSH
50637: LD_EXP 65
50641: PPUSH
50642: LD_VAR 0 2
50646: PPUSH
50647: EMPTY
50648: PPUSH
50649: CALL_OW 1
50653: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
50654: LD_ADDR_EXP 66
50658: PUSH
50659: LD_EXP 66
50663: PPUSH
50664: LD_VAR 0 2
50668: PPUSH
50669: LD_EXP 57
50673: PUSH
50674: LD_VAR 0 2
50678: ARRAY
50679: PPUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 30
50685: PUSH
50686: LD_INT 32
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 30
50695: PUSH
50696: LD_INT 31
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 58
50710: PUSH
50711: EMPTY
50712: LIST
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PPUSH
50718: CALL_OW 72
50722: PPUSH
50723: CALL_OW 1
50727: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
50728: LD_ADDR_EXP 67
50732: PUSH
50733: LD_EXP 67
50737: PPUSH
50738: LD_VAR 0 2
50742: PPUSH
50743: EMPTY
50744: PPUSH
50745: CALL_OW 1
50749: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
50750: LD_ADDR_EXP 71
50754: PUSH
50755: LD_EXP 71
50759: PPUSH
50760: LD_VAR 0 2
50764: PPUSH
50765: EMPTY
50766: PPUSH
50767: CALL_OW 1
50771: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
50772: LD_ADDR_EXP 70
50776: PUSH
50777: LD_EXP 70
50781: PPUSH
50782: LD_VAR 0 2
50786: PPUSH
50787: EMPTY
50788: PPUSH
50789: CALL_OW 1
50793: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
50794: LD_ADDR_EXP 72
50798: PUSH
50799: LD_EXP 72
50803: PPUSH
50804: LD_VAR 0 2
50808: PPUSH
50809: EMPTY
50810: PPUSH
50811: CALL_OW 1
50815: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
50816: LD_ADDR_EXP 73
50820: PUSH
50821: LD_EXP 73
50825: PPUSH
50826: LD_VAR 0 2
50830: PPUSH
50831: EMPTY
50832: PPUSH
50833: CALL_OW 1
50837: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
50838: LD_ADDR_EXP 74
50842: PUSH
50843: LD_EXP 74
50847: PPUSH
50848: LD_VAR 0 2
50852: PPUSH
50853: EMPTY
50854: PPUSH
50855: CALL_OW 1
50859: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
50860: LD_ADDR_EXP 75
50864: PUSH
50865: LD_EXP 75
50869: PPUSH
50870: LD_VAR 0 2
50874: PPUSH
50875: EMPTY
50876: PPUSH
50877: CALL_OW 1
50881: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
50882: LD_ADDR_EXP 76
50886: PUSH
50887: LD_EXP 76
50891: PPUSH
50892: LD_VAR 0 2
50896: PPUSH
50897: EMPTY
50898: PPUSH
50899: CALL_OW 1
50903: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
50904: LD_ADDR_EXP 77
50908: PUSH
50909: LD_EXP 77
50913: PPUSH
50914: LD_VAR 0 2
50918: PPUSH
50919: EMPTY
50920: PPUSH
50921: CALL_OW 1
50925: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
50926: LD_ADDR_EXP 78
50930: PUSH
50931: LD_EXP 78
50935: PPUSH
50936: LD_VAR 0 2
50940: PPUSH
50941: EMPTY
50942: PPUSH
50943: CALL_OW 1
50947: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
50948: LD_ADDR_EXP 79
50952: PUSH
50953: LD_EXP 79
50957: PPUSH
50958: LD_VAR 0 2
50962: PPUSH
50963: EMPTY
50964: PPUSH
50965: CALL_OW 1
50969: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
50970: LD_ADDR_EXP 68
50974: PUSH
50975: LD_EXP 68
50979: PPUSH
50980: LD_VAR 0 2
50984: PPUSH
50985: LD_INT 0
50987: PPUSH
50988: CALL_OW 1
50992: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
50993: LD_ADDR_EXP 81
50997: PUSH
50998: LD_EXP 81
51002: PPUSH
51003: LD_VAR 0 2
51007: PPUSH
51008: LD_INT 0
51010: PPUSH
51011: CALL_OW 1
51015: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
51016: LD_ADDR_EXP 69
51020: PUSH
51021: LD_EXP 69
51025: PPUSH
51026: LD_VAR 0 2
51030: PPUSH
51031: EMPTY
51032: PPUSH
51033: CALL_OW 1
51037: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
51038: LD_ADDR_EXP 80
51042: PUSH
51043: LD_EXP 80
51047: PPUSH
51048: LD_VAR 0 2
51052: PPUSH
51053: LD_INT 0
51055: PPUSH
51056: CALL_OW 1
51060: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
51061: LD_ADDR_EXP 82
51065: PUSH
51066: LD_EXP 82
51070: PPUSH
51071: LD_VAR 0 2
51075: PPUSH
51076: EMPTY
51077: PPUSH
51078: CALL_OW 1
51082: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
51083: LD_ADDR_EXP 85
51087: PUSH
51088: LD_EXP 85
51092: PPUSH
51093: LD_VAR 0 2
51097: PPUSH
51098: LD_INT 0
51100: PPUSH
51101: CALL_OW 1
51105: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
51106: LD_ADDR_EXP 86
51110: PUSH
51111: LD_EXP 86
51115: PPUSH
51116: LD_VAR 0 2
51120: PPUSH
51121: EMPTY
51122: PPUSH
51123: CALL_OW 1
51127: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
51128: LD_ADDR_EXP 87
51132: PUSH
51133: LD_EXP 87
51137: PPUSH
51138: LD_VAR 0 2
51142: PPUSH
51143: EMPTY
51144: PPUSH
51145: CALL_OW 1
51149: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
51150: LD_ADDR_EXP 88
51154: PUSH
51155: LD_EXP 88
51159: PPUSH
51160: LD_VAR 0 2
51164: PPUSH
51165: EMPTY
51166: PPUSH
51167: CALL_OW 1
51171: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
51172: LD_ADDR_EXP 90
51176: PUSH
51177: LD_EXP 90
51181: PPUSH
51182: LD_VAR 0 2
51186: PPUSH
51187: LD_EXP 57
51191: PUSH
51192: LD_VAR 0 2
51196: ARRAY
51197: PPUSH
51198: LD_INT 2
51200: PUSH
51201: LD_INT 30
51203: PUSH
51204: LD_INT 6
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 30
51213: PUSH
51214: LD_INT 7
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 30
51223: PUSH
51224: LD_INT 8
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: PPUSH
51237: CALL_OW 72
51241: PPUSH
51242: CALL_OW 1
51246: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
51247: LD_ADDR_EXP 91
51251: PUSH
51252: LD_EXP 91
51256: PPUSH
51257: LD_VAR 0 2
51261: PPUSH
51262: EMPTY
51263: PPUSH
51264: CALL_OW 1
51268: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
51269: LD_ADDR_EXP 92
51273: PUSH
51274: LD_EXP 92
51278: PPUSH
51279: LD_VAR 0 2
51283: PPUSH
51284: EMPTY
51285: PPUSH
51286: CALL_OW 1
51290: ST_TO_ADDR
// end ;
51291: GO 50447
51293: POP
51294: POP
// MC_InitSides ( ) ;
51295: CALL 59899 0 0
// MC_InitResearch ( ) ;
51299: CALL 59638 0 0
// CustomInitMacro ( ) ;
51303: CALL 174 0 0
// skirmish := true ;
51307: LD_ADDR_EXP 56
51311: PUSH
51312: LD_INT 1
51314: ST_TO_ADDR
// end ;
51315: LD_VAR 0 1
51319: RET
// every 0 0$01 trigger skirmish do
51320: LD_EXP 56
51324: IFFALSE 51443
51326: GO 51328
51328: DISABLE
// begin enable ;
51329: ENABLE
// MC_CheckBuildings ( ) ;
51330: CALL 51888 0 0
// MC_CheckPeopleLife ( ) ;
51334: CALL 52013 0 0
// RaiseSailEvent ( 103 ) ;
51338: LD_INT 103
51340: PPUSH
51341: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
51345: LD_INT 104
51347: PPUSH
51348: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
51352: LD_INT 105
51354: PPUSH
51355: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
51359: LD_INT 106
51361: PPUSH
51362: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
51366: LD_INT 107
51368: PPUSH
51369: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
51373: LD_INT 108
51375: PPUSH
51376: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
51380: LD_INT 109
51382: PPUSH
51383: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
51387: LD_INT 110
51389: PPUSH
51390: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
51394: LD_INT 111
51396: PPUSH
51397: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
51401: LD_INT 112
51403: PPUSH
51404: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
51408: LD_INT 120
51410: PPUSH
51411: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
51415: LD_INT 121
51417: PPUSH
51418: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
51422: LD_INT 122
51424: PPUSH
51425: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
51429: LD_INT 123
51431: PPUSH
51432: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
51436: LD_INT 200
51438: PPUSH
51439: CALL_OW 427
// end ;
51443: END
// every 10 trigger skirmish do var i ;
51444: LD_EXP 56
51448: IFFALSE 51547
51450: GO 51452
51452: DISABLE
51453: LD_INT 0
51455: PPUSH
// begin enable ;
51456: ENABLE
// if not mc_bases then
51457: LD_EXP 57
51461: NOT
51462: IFFALSE 51466
// exit ;
51464: GO 51547
// for i = 1 to mc_bases do
51466: LD_ADDR_VAR 0 1
51470: PUSH
51471: DOUBLE
51472: LD_INT 1
51474: DEC
51475: ST_TO_ADDR
51476: LD_EXP 57
51480: PUSH
51481: FOR_TO
51482: IFFALSE 51545
// if mc_mines [ i ] and mc_miners [ i ] then
51484: LD_EXP 70
51488: PUSH
51489: LD_VAR 0 1
51493: ARRAY
51494: PUSH
51495: LD_EXP 71
51499: PUSH
51500: LD_VAR 0 1
51504: ARRAY
51505: AND
51506: IFFALSE 51543
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
51508: LD_EXP 71
51512: PUSH
51513: LD_VAR 0 1
51517: ARRAY
51518: PUSH
51519: LD_INT 1
51521: ARRAY
51522: PPUSH
51523: CALL_OW 255
51527: PPUSH
51528: LD_EXP 70
51532: PUSH
51533: LD_VAR 0 1
51537: ARRAY
51538: PPUSH
51539: CALL 15967 0 2
51543: GO 51481
51545: POP
51546: POP
// end ;
51547: PPOPN 1
51549: END
// on SailEvent ( event ) do begin if event = 101 then
51550: LD_VAR 0 1
51554: PUSH
51555: LD_INT 101
51557: EQUAL
51558: IFFALSE 51564
// MC_RepairBuildings ( ) ;
51560: CALL 52571 0 0
// if event = 102 then
51564: LD_VAR 0 1
51568: PUSH
51569: LD_INT 102
51571: EQUAL
51572: IFFALSE 51578
// MC_Heal ( ) ;
51574: CALL 52977 0 0
// if event = 103 then
51578: LD_VAR 0 1
51582: PUSH
51583: LD_INT 103
51585: EQUAL
51586: IFFALSE 51592
// MC_Build ( ) ;
51588: CALL 53399 0 0
// if event = 104 then
51592: LD_VAR 0 1
51596: PUSH
51597: LD_INT 104
51599: EQUAL
51600: IFFALSE 51606
// MC_TurretWeapon ( ) ;
51602: CALL 54765 0 0
// if event = 105 then
51606: LD_VAR 0 1
51610: PUSH
51611: LD_INT 105
51613: EQUAL
51614: IFFALSE 51620
// MC_BuildUpgrade ( ) ;
51616: CALL 54316 0 0
// if event = 106 then
51620: LD_VAR 0 1
51624: PUSH
51625: LD_INT 106
51627: EQUAL
51628: IFFALSE 51634
// MC_PlantMines ( ) ;
51630: CALL 55084 0 0
// if event = 107 then
51634: LD_VAR 0 1
51638: PUSH
51639: LD_INT 107
51641: EQUAL
51642: IFFALSE 51648
// MC_CollectCrates ( ) ;
51644: CALL 56091 0 0
// if event = 108 then
51648: LD_VAR 0 1
51652: PUSH
51653: LD_INT 108
51655: EQUAL
51656: IFFALSE 51662
// MC_LinkRemoteControl ( ) ;
51658: CALL 57501 0 0
// if event = 109 then
51662: LD_VAR 0 1
51666: PUSH
51667: LD_INT 109
51669: EQUAL
51670: IFFALSE 51676
// MC_ProduceVehicle ( ) ;
51672: CALL 57682 0 0
// if event = 110 then
51676: LD_VAR 0 1
51680: PUSH
51681: LD_INT 110
51683: EQUAL
51684: IFFALSE 51690
// MC_SendAttack ( ) ;
51686: CALL 58163 0 0
// if event = 111 then
51690: LD_VAR 0 1
51694: PUSH
51695: LD_INT 111
51697: EQUAL
51698: IFFALSE 51704
// MC_Defend ( ) ;
51700: CALL 58271 0 0
// if event = 112 then
51704: LD_VAR 0 1
51708: PUSH
51709: LD_INT 112
51711: EQUAL
51712: IFFALSE 51718
// MC_Research ( ) ;
51714: CALL 58669 0 0
// if event = 120 then
51718: LD_VAR 0 1
51722: PUSH
51723: LD_INT 120
51725: EQUAL
51726: IFFALSE 51732
// MC_RepairVehicle ( ) ;
51728: CALL 59991 0 0
// if event = 121 then
51732: LD_VAR 0 1
51736: PUSH
51737: LD_INT 121
51739: EQUAL
51740: IFFALSE 51746
// MC_TameApe ( ) ;
51742: CALL 60660 0 0
// if event = 122 then
51746: LD_VAR 0 1
51750: PUSH
51751: LD_INT 122
51753: EQUAL
51754: IFFALSE 51760
// MC_ChangeApeClass ( ) ;
51756: CALL 61305 0 0
// if event = 123 then
51760: LD_VAR 0 1
51764: PUSH
51765: LD_INT 123
51767: EQUAL
51768: IFFALSE 51774
// MC_Bazooka ( ) ;
51770: CALL 61939 0 0
// if event = 124 then
51774: LD_VAR 0 1
51778: PUSH
51779: LD_INT 124
51781: EQUAL
51782: IFFALSE 51788
// MC_TeleportExit ( ) ;
51784: CALL 62137 0 0
// if event = 200 then
51788: LD_VAR 0 1
51792: PUSH
51793: LD_INT 200
51795: EQUAL
51796: IFFALSE 51802
// MC_Idle ( ) ;
51798: CALL 63161 0 0
// end ;
51802: PPOPN 1
51804: END
// export function MC_Reset ( base , tag ) ; var i ; begin
51805: LD_INT 0
51807: PPUSH
51808: PPUSH
// if not mc_bases [ base ] or not tag then
51809: LD_EXP 57
51813: PUSH
51814: LD_VAR 0 1
51818: ARRAY
51819: NOT
51820: PUSH
51821: LD_VAR 0 2
51825: NOT
51826: OR
51827: IFFALSE 51831
// exit ;
51829: GO 51883
// for i in mc_bases [ base ] do
51831: LD_ADDR_VAR 0 4
51835: PUSH
51836: LD_EXP 57
51840: PUSH
51841: LD_VAR 0 1
51845: ARRAY
51846: PUSH
51847: FOR_IN
51848: IFFALSE 51881
// if GetTag ( i ) = tag then
51850: LD_VAR 0 4
51854: PPUSH
51855: CALL_OW 110
51859: PUSH
51860: LD_VAR 0 2
51864: EQUAL
51865: IFFALSE 51879
// SetTag ( i , 0 ) ;
51867: LD_VAR 0 4
51871: PPUSH
51872: LD_INT 0
51874: PPUSH
51875: CALL_OW 109
51879: GO 51847
51881: POP
51882: POP
// end ;
51883: LD_VAR 0 3
51887: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
51888: LD_INT 0
51890: PPUSH
51891: PPUSH
51892: PPUSH
// if not mc_bases then
51893: LD_EXP 57
51897: NOT
51898: IFFALSE 51902
// exit ;
51900: GO 52008
// for i = 1 to mc_bases do
51902: LD_ADDR_VAR 0 2
51906: PUSH
51907: DOUBLE
51908: LD_INT 1
51910: DEC
51911: ST_TO_ADDR
51912: LD_EXP 57
51916: PUSH
51917: FOR_TO
51918: IFFALSE 51999
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
51920: LD_ADDR_VAR 0 3
51924: PUSH
51925: LD_EXP 57
51929: PUSH
51930: LD_VAR 0 2
51934: ARRAY
51935: PPUSH
51936: LD_INT 21
51938: PUSH
51939: LD_INT 3
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 3
51948: PUSH
51949: LD_INT 24
51951: PUSH
51952: LD_INT 1000
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PPUSH
51967: CALL_OW 72
51971: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
51972: LD_ADDR_EXP 58
51976: PUSH
51977: LD_EXP 58
51981: PPUSH
51982: LD_VAR 0 2
51986: PPUSH
51987: LD_VAR 0 3
51991: PPUSH
51992: CALL_OW 1
51996: ST_TO_ADDR
// end ;
51997: GO 51917
51999: POP
52000: POP
// RaiseSailEvent ( 101 ) ;
52001: LD_INT 101
52003: PPUSH
52004: CALL_OW 427
// end ;
52008: LD_VAR 0 1
52012: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
52013: LD_INT 0
52015: PPUSH
52016: PPUSH
52017: PPUSH
52018: PPUSH
52019: PPUSH
52020: PPUSH
52021: PPUSH
// if not mc_bases then
52022: LD_EXP 57
52026: NOT
52027: IFFALSE 52031
// exit ;
52029: GO 52566
// for i = 1 to mc_bases do
52031: LD_ADDR_VAR 0 2
52035: PUSH
52036: DOUBLE
52037: LD_INT 1
52039: DEC
52040: ST_TO_ADDR
52041: LD_EXP 57
52045: PUSH
52046: FOR_TO
52047: IFFALSE 52557
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
52049: LD_ADDR_VAR 0 5
52053: PUSH
52054: LD_EXP 57
52058: PUSH
52059: LD_VAR 0 2
52063: ARRAY
52064: PUSH
52065: LD_EXP 86
52069: PUSH
52070: LD_VAR 0 2
52074: ARRAY
52075: UNION
52076: PPUSH
52077: LD_INT 21
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 3
52092: PUSH
52093: LD_INT 54
52095: PUSH
52096: EMPTY
52097: LIST
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 3
52105: PUSH
52106: LD_INT 24
52108: PUSH
52109: LD_INT 700
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PPUSH
52129: CALL_OW 72
52133: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
52134: LD_ADDR_VAR 0 6
52138: PUSH
52139: LD_EXP 57
52143: PUSH
52144: LD_VAR 0 2
52148: ARRAY
52149: PPUSH
52150: LD_INT 21
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: LD_INT 3
52165: PUSH
52166: LD_INT 54
52168: PUSH
52169: EMPTY
52170: LIST
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 3
52178: PUSH
52179: LD_INT 24
52181: PUSH
52182: LD_INT 250
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: LIST
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PPUSH
52202: CALL_OW 72
52206: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
52207: LD_ADDR_VAR 0 7
52211: PUSH
52212: LD_VAR 0 5
52216: PUSH
52217: LD_VAR 0 6
52221: DIFF
52222: ST_TO_ADDR
// if not need_heal_1 then
52223: LD_VAR 0 6
52227: NOT
52228: IFFALSE 52261
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
52230: LD_ADDR_EXP 60
52234: PUSH
52235: LD_EXP 60
52239: PPUSH
52240: LD_VAR 0 2
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PPUSH
52252: EMPTY
52253: PPUSH
52254: CALL 19309 0 3
52258: ST_TO_ADDR
52259: GO 52293
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
52261: LD_ADDR_EXP 60
52265: PUSH
52266: LD_EXP 60
52270: PPUSH
52271: LD_VAR 0 2
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PPUSH
52283: LD_VAR 0 6
52287: PPUSH
52288: CALL 19309 0 3
52292: ST_TO_ADDR
// if not need_heal_2 then
52293: LD_VAR 0 7
52297: NOT
52298: IFFALSE 52331
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
52300: LD_ADDR_EXP 60
52304: PUSH
52305: LD_EXP 60
52309: PPUSH
52310: LD_VAR 0 2
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PPUSH
52322: EMPTY
52323: PPUSH
52324: CALL 19309 0 3
52328: ST_TO_ADDR
52329: GO 52363
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
52331: LD_ADDR_EXP 60
52335: PUSH
52336: LD_EXP 60
52340: PPUSH
52341: LD_VAR 0 2
52345: PUSH
52346: LD_INT 2
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PPUSH
52353: LD_VAR 0 7
52357: PPUSH
52358: CALL 19309 0 3
52362: ST_TO_ADDR
// if need_heal_2 then
52363: LD_VAR 0 7
52367: IFFALSE 52539
// for j in need_heal_2 do
52369: LD_ADDR_VAR 0 3
52373: PUSH
52374: LD_VAR 0 7
52378: PUSH
52379: FOR_IN
52380: IFFALSE 52537
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
52382: LD_ADDR_VAR 0 5
52386: PUSH
52387: LD_EXP 57
52391: PUSH
52392: LD_VAR 0 2
52396: ARRAY
52397: PPUSH
52398: LD_INT 2
52400: PUSH
52401: LD_INT 30
52403: PUSH
52404: LD_INT 6
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 30
52413: PUSH
52414: LD_INT 7
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 30
52423: PUSH
52424: LD_INT 8
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 30
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 30
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 25
52453: PUSH
52454: LD_INT 4
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: PPUSH
52470: CALL_OW 72
52474: ST_TO_ADDR
// if tmp then
52475: LD_VAR 0 5
52479: IFFALSE 52535
// begin k := NearestUnitToUnit ( tmp , j ) ;
52481: LD_ADDR_VAR 0 4
52485: PUSH
52486: LD_VAR 0 5
52490: PPUSH
52491: LD_VAR 0 3
52495: PPUSH
52496: CALL_OW 74
52500: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
52501: LD_VAR 0 3
52505: PPUSH
52506: LD_VAR 0 4
52510: PPUSH
52511: CALL_OW 296
52515: PUSH
52516: LD_INT 7
52518: GREATER
52519: IFFALSE 52535
// ComMoveUnit ( j , k ) ;
52521: LD_VAR 0 3
52525: PPUSH
52526: LD_VAR 0 4
52530: PPUSH
52531: CALL_OW 112
// end ; end ;
52535: GO 52379
52537: POP
52538: POP
// if not need_heal_1 and not need_heal_2 then
52539: LD_VAR 0 6
52543: NOT
52544: PUSH
52545: LD_VAR 0 7
52549: NOT
52550: AND
52551: IFFALSE 52555
// continue ;
52553: GO 52046
// end ;
52555: GO 52046
52557: POP
52558: POP
// RaiseSailEvent ( 102 ) ;
52559: LD_INT 102
52561: PPUSH
52562: CALL_OW 427
// end ;
52566: LD_VAR 0 1
52570: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
52571: LD_INT 0
52573: PPUSH
52574: PPUSH
52575: PPUSH
52576: PPUSH
52577: PPUSH
// if not mc_bases then
52578: LD_EXP 57
52582: NOT
52583: IFFALSE 52587
// exit ;
52585: GO 52972
// for i = 1 to mc_bases do
52587: LD_ADDR_VAR 0 2
52591: PUSH
52592: DOUBLE
52593: LD_INT 1
52595: DEC
52596: ST_TO_ADDR
52597: LD_EXP 57
52601: PUSH
52602: FOR_TO
52603: IFFALSE 52970
// begin if not mc_building_need_repair [ i ] then
52605: LD_EXP 58
52609: PUSH
52610: LD_VAR 0 2
52614: ARRAY
52615: NOT
52616: IFFALSE 52654
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
52618: LD_ADDR_EXP 59
52622: PUSH
52623: LD_EXP 59
52627: PPUSH
52628: LD_VAR 0 2
52632: PPUSH
52633: EMPTY
52634: PPUSH
52635: CALL_OW 1
52639: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
52640: LD_VAR 0 2
52644: PPUSH
52645: LD_INT 101
52647: PPUSH
52648: CALL 51805 0 2
// continue ;
52652: GO 52602
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
52654: LD_ADDR_EXP 63
52658: PUSH
52659: LD_EXP 63
52663: PPUSH
52664: LD_VAR 0 2
52668: PPUSH
52669: EMPTY
52670: PPUSH
52671: CALL_OW 1
52675: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
52676: LD_VAR 0 2
52680: PPUSH
52681: LD_INT 103
52683: PPUSH
52684: CALL 51805 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
52688: LD_ADDR_VAR 0 5
52692: PUSH
52693: LD_EXP 57
52697: PUSH
52698: LD_VAR 0 2
52702: ARRAY
52703: PUSH
52704: LD_EXP 86
52708: PUSH
52709: LD_VAR 0 2
52713: ARRAY
52714: UNION
52715: PPUSH
52716: LD_INT 2
52718: PUSH
52719: LD_INT 25
52721: PUSH
52722: LD_INT 2
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 25
52731: PUSH
52732: LD_INT 16
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: LIST
52743: PUSH
52744: EMPTY
52745: LIST
52746: PPUSH
52747: CALL_OW 72
52751: ST_TO_ADDR
// if not tmp then
52752: LD_VAR 0 5
52756: NOT
52757: IFFALSE 52761
// continue ;
52759: GO 52602
// for j in tmp do
52761: LD_ADDR_VAR 0 3
52765: PUSH
52766: LD_VAR 0 5
52770: PUSH
52771: FOR_IN
52772: IFFALSE 52966
// begin if mc_need_heal [ i ] then
52774: LD_EXP 60
52778: PUSH
52779: LD_VAR 0 2
52783: ARRAY
52784: IFFALSE 52832
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
52786: LD_VAR 0 3
52790: PUSH
52791: LD_EXP 60
52795: PUSH
52796: LD_VAR 0 2
52800: ARRAY
52801: PUSH
52802: LD_INT 1
52804: ARRAY
52805: IN
52806: PUSH
52807: LD_VAR 0 3
52811: PUSH
52812: LD_EXP 60
52816: PUSH
52817: LD_VAR 0 2
52821: ARRAY
52822: PUSH
52823: LD_INT 2
52825: ARRAY
52826: IN
52827: OR
52828: IFFALSE 52832
// continue ;
52830: GO 52771
// if IsInUnit ( j ) then
52832: LD_VAR 0 3
52836: PPUSH
52837: CALL_OW 310
52841: IFFALSE 52852
// ComExitBuilding ( j ) ;
52843: LD_VAR 0 3
52847: PPUSH
52848: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
52852: LD_VAR 0 3
52856: PUSH
52857: LD_EXP 59
52861: PUSH
52862: LD_VAR 0 2
52866: ARRAY
52867: IN
52868: NOT
52869: IFFALSE 52927
// begin SetTag ( j , 101 ) ;
52871: LD_VAR 0 3
52875: PPUSH
52876: LD_INT 101
52878: PPUSH
52879: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
52883: LD_ADDR_EXP 59
52887: PUSH
52888: LD_EXP 59
52892: PPUSH
52893: LD_VAR 0 2
52897: PUSH
52898: LD_EXP 59
52902: PUSH
52903: LD_VAR 0 2
52907: ARRAY
52908: PUSH
52909: LD_INT 1
52911: PLUS
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PPUSH
52917: LD_VAR 0 3
52921: PPUSH
52922: CALL 19309 0 3
52926: ST_TO_ADDR
// end ; Wait ( 3 ) ;
52927: LD_INT 3
52929: PPUSH
52930: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
52934: LD_VAR 0 3
52938: PPUSH
52939: LD_EXP 58
52943: PUSH
52944: LD_VAR 0 2
52948: ARRAY
52949: PPUSH
52950: LD_VAR 0 3
52954: PPUSH
52955: CALL_OW 74
52959: PPUSH
52960: CALL_OW 130
// end ;
52964: GO 52771
52966: POP
52967: POP
// end ;
52968: GO 52602
52970: POP
52971: POP
// end ;
52972: LD_VAR 0 1
52976: RET
// export function MC_Heal ; var i , j , tmp ; begin
52977: LD_INT 0
52979: PPUSH
52980: PPUSH
52981: PPUSH
52982: PPUSH
// if not mc_bases then
52983: LD_EXP 57
52987: NOT
52988: IFFALSE 52992
// exit ;
52990: GO 53394
// for i = 1 to mc_bases do
52992: LD_ADDR_VAR 0 2
52996: PUSH
52997: DOUBLE
52998: LD_INT 1
53000: DEC
53001: ST_TO_ADDR
53002: LD_EXP 57
53006: PUSH
53007: FOR_TO
53008: IFFALSE 53392
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
53010: LD_EXP 60
53014: PUSH
53015: LD_VAR 0 2
53019: ARRAY
53020: PUSH
53021: LD_INT 1
53023: ARRAY
53024: NOT
53025: PUSH
53026: LD_EXP 60
53030: PUSH
53031: LD_VAR 0 2
53035: ARRAY
53036: PUSH
53037: LD_INT 2
53039: ARRAY
53040: NOT
53041: AND
53042: IFFALSE 53080
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
53044: LD_ADDR_EXP 61
53048: PUSH
53049: LD_EXP 61
53053: PPUSH
53054: LD_VAR 0 2
53058: PPUSH
53059: EMPTY
53060: PPUSH
53061: CALL_OW 1
53065: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
53066: LD_VAR 0 2
53070: PPUSH
53071: LD_INT 102
53073: PPUSH
53074: CALL 51805 0 2
// continue ;
53078: GO 53007
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
53080: LD_ADDR_VAR 0 4
53084: PUSH
53085: LD_EXP 57
53089: PUSH
53090: LD_VAR 0 2
53094: ARRAY
53095: PPUSH
53096: LD_INT 25
53098: PUSH
53099: LD_INT 4
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PPUSH
53106: CALL_OW 72
53110: ST_TO_ADDR
// if not tmp then
53111: LD_VAR 0 4
53115: NOT
53116: IFFALSE 53120
// continue ;
53118: GO 53007
// if mc_taming [ i ] then
53120: LD_EXP 88
53124: PUSH
53125: LD_VAR 0 2
53129: ARRAY
53130: IFFALSE 53154
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
53132: LD_ADDR_EXP 88
53136: PUSH
53137: LD_EXP 88
53141: PPUSH
53142: LD_VAR 0 2
53146: PPUSH
53147: EMPTY
53148: PPUSH
53149: CALL_OW 1
53153: ST_TO_ADDR
// for j in tmp do
53154: LD_ADDR_VAR 0 3
53158: PUSH
53159: LD_VAR 0 4
53163: PUSH
53164: FOR_IN
53165: IFFALSE 53388
// begin if IsInUnit ( j ) then
53167: LD_VAR 0 3
53171: PPUSH
53172: CALL_OW 310
53176: IFFALSE 53187
// ComExitBuilding ( j ) ;
53178: LD_VAR 0 3
53182: PPUSH
53183: CALL_OW 122
// if not j in mc_healers [ i ] then
53187: LD_VAR 0 3
53191: PUSH
53192: LD_EXP 61
53196: PUSH
53197: LD_VAR 0 2
53201: ARRAY
53202: IN
53203: NOT
53204: IFFALSE 53250
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
53206: LD_ADDR_EXP 61
53210: PUSH
53211: LD_EXP 61
53215: PPUSH
53216: LD_VAR 0 2
53220: PUSH
53221: LD_EXP 61
53225: PUSH
53226: LD_VAR 0 2
53230: ARRAY
53231: PUSH
53232: LD_INT 1
53234: PLUS
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PPUSH
53240: LD_VAR 0 3
53244: PPUSH
53245: CALL 19309 0 3
53249: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
53250: LD_VAR 0 3
53254: PPUSH
53255: CALL_OW 110
53259: PUSH
53260: LD_INT 102
53262: NONEQUAL
53263: IFFALSE 53277
// SetTag ( j , 102 ) ;
53265: LD_VAR 0 3
53269: PPUSH
53270: LD_INT 102
53272: PPUSH
53273: CALL_OW 109
// Wait ( 3 ) ;
53277: LD_INT 3
53279: PPUSH
53280: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
53284: LD_EXP 60
53288: PUSH
53289: LD_VAR 0 2
53293: ARRAY
53294: PUSH
53295: LD_INT 1
53297: ARRAY
53298: IFFALSE 53330
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
53300: LD_VAR 0 3
53304: PPUSH
53305: LD_EXP 60
53309: PUSH
53310: LD_VAR 0 2
53314: ARRAY
53315: PUSH
53316: LD_INT 1
53318: ARRAY
53319: PUSH
53320: LD_INT 1
53322: ARRAY
53323: PPUSH
53324: CALL_OW 128
53328: GO 53386
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
53330: LD_VAR 0 3
53334: PPUSH
53335: CALL_OW 314
53339: NOT
53340: PUSH
53341: LD_EXP 60
53345: PUSH
53346: LD_VAR 0 2
53350: ARRAY
53351: PUSH
53352: LD_INT 2
53354: ARRAY
53355: AND
53356: IFFALSE 53386
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
53358: LD_VAR 0 3
53362: PPUSH
53363: LD_EXP 60
53367: PUSH
53368: LD_VAR 0 2
53372: ARRAY
53373: PUSH
53374: LD_INT 2
53376: ARRAY
53377: PUSH
53378: LD_INT 1
53380: ARRAY
53381: PPUSH
53382: CALL_OW 128
// end ;
53386: GO 53164
53388: POP
53389: POP
// end ;
53390: GO 53007
53392: POP
53393: POP
// end ;
53394: LD_VAR 0 1
53398: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
53399: LD_INT 0
53401: PPUSH
53402: PPUSH
53403: PPUSH
53404: PPUSH
// if not mc_bases then
53405: LD_EXP 57
53409: NOT
53410: IFFALSE 53414
// exit ;
53412: GO 54311
// for i = 1 to mc_bases do
53414: LD_ADDR_VAR 0 2
53418: PUSH
53419: DOUBLE
53420: LD_INT 1
53422: DEC
53423: ST_TO_ADDR
53424: LD_EXP 57
53428: PUSH
53429: FOR_TO
53430: IFFALSE 54309
// begin if mc_scan [ i ] then
53432: LD_EXP 80
53436: PUSH
53437: LD_VAR 0 2
53441: ARRAY
53442: IFFALSE 53446
// continue ;
53444: GO 53429
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
53446: LD_EXP 62
53450: PUSH
53451: LD_VAR 0 2
53455: ARRAY
53456: NOT
53457: PUSH
53458: LD_EXP 64
53462: PUSH
53463: LD_VAR 0 2
53467: ARRAY
53468: NOT
53469: AND
53470: PUSH
53471: LD_EXP 63
53475: PUSH
53476: LD_VAR 0 2
53480: ARRAY
53481: AND
53482: IFFALSE 53520
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
53484: LD_ADDR_EXP 63
53488: PUSH
53489: LD_EXP 63
53493: PPUSH
53494: LD_VAR 0 2
53498: PPUSH
53499: EMPTY
53500: PPUSH
53501: CALL_OW 1
53505: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
53506: LD_VAR 0 2
53510: PPUSH
53511: LD_INT 103
53513: PPUSH
53514: CALL 51805 0 2
// continue ;
53518: GO 53429
// end ; if mc_construct_list [ i ] then
53520: LD_EXP 64
53524: PUSH
53525: LD_VAR 0 2
53529: ARRAY
53530: IFFALSE 53750
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
53532: LD_ADDR_VAR 0 4
53536: PUSH
53537: LD_EXP 57
53541: PUSH
53542: LD_VAR 0 2
53546: ARRAY
53547: PPUSH
53548: LD_INT 25
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PPUSH
53558: CALL_OW 72
53562: PUSH
53563: LD_EXP 59
53567: PUSH
53568: LD_VAR 0 2
53572: ARRAY
53573: DIFF
53574: ST_TO_ADDR
// if not tmp then
53575: LD_VAR 0 4
53579: NOT
53580: IFFALSE 53584
// continue ;
53582: GO 53429
// for j in tmp do
53584: LD_ADDR_VAR 0 3
53588: PUSH
53589: LD_VAR 0 4
53593: PUSH
53594: FOR_IN
53595: IFFALSE 53746
// begin if not mc_builders [ i ] then
53597: LD_EXP 63
53601: PUSH
53602: LD_VAR 0 2
53606: ARRAY
53607: NOT
53608: IFFALSE 53666
// begin SetTag ( j , 103 ) ;
53610: LD_VAR 0 3
53614: PPUSH
53615: LD_INT 103
53617: PPUSH
53618: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
53622: LD_ADDR_EXP 63
53626: PUSH
53627: LD_EXP 63
53631: PPUSH
53632: LD_VAR 0 2
53636: PUSH
53637: LD_EXP 63
53641: PUSH
53642: LD_VAR 0 2
53646: ARRAY
53647: PUSH
53648: LD_INT 1
53650: PLUS
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PPUSH
53656: LD_VAR 0 3
53660: PPUSH
53661: CALL 19309 0 3
53665: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
53666: LD_VAR 0 3
53670: PPUSH
53671: CALL_OW 310
53675: IFFALSE 53686
// ComExitBuilding ( j ) ;
53677: LD_VAR 0 3
53681: PPUSH
53682: CALL_OW 122
// wait ( 3 ) ;
53686: LD_INT 3
53688: PPUSH
53689: CALL_OW 67
// if not mc_construct_list [ i ] then
53693: LD_EXP 64
53697: PUSH
53698: LD_VAR 0 2
53702: ARRAY
53703: NOT
53704: IFFALSE 53708
// break ;
53706: GO 53746
// if not HasTask ( j ) then
53708: LD_VAR 0 3
53712: PPUSH
53713: CALL_OW 314
53717: NOT
53718: IFFALSE 53744
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
53720: LD_VAR 0 3
53724: PPUSH
53725: LD_EXP 64
53729: PUSH
53730: LD_VAR 0 2
53734: ARRAY
53735: PUSH
53736: LD_INT 1
53738: ARRAY
53739: PPUSH
53740: CALL 21715 0 2
// end ;
53744: GO 53594
53746: POP
53747: POP
// end else
53748: GO 54307
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
53750: LD_EXP 62
53754: PUSH
53755: LD_VAR 0 2
53759: ARRAY
53760: PUSH
53761: LD_EXP 57
53765: PUSH
53766: LD_VAR 0 2
53770: ARRAY
53771: PPUSH
53772: LD_INT 2
53774: PUSH
53775: LD_INT 30
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 30
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: LIST
53799: PPUSH
53800: CALL_OW 72
53804: AND
53805: IFFALSE 54307
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
53807: LD_EXP 57
53811: PUSH
53812: LD_VAR 0 2
53816: ARRAY
53817: PPUSH
53818: LD_INT 2
53820: PUSH
53821: LD_INT 30
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 30
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: LIST
53845: PPUSH
53846: CALL_OW 72
53850: PUSH
53851: LD_INT 1
53853: ARRAY
53854: PPUSH
53855: LD_EXP 62
53859: PUSH
53860: LD_VAR 0 2
53864: ARRAY
53865: PUSH
53866: LD_INT 1
53868: ARRAY
53869: PUSH
53870: LD_INT 1
53872: ARRAY
53873: PPUSH
53874: LD_EXP 62
53878: PUSH
53879: LD_VAR 0 2
53883: ARRAY
53884: PUSH
53885: LD_INT 1
53887: ARRAY
53888: PUSH
53889: LD_INT 2
53891: ARRAY
53892: PPUSH
53893: LD_EXP 62
53897: PUSH
53898: LD_VAR 0 2
53902: ARRAY
53903: PUSH
53904: LD_INT 1
53906: ARRAY
53907: PUSH
53908: LD_INT 3
53910: ARRAY
53911: PPUSH
53912: LD_EXP 62
53916: PUSH
53917: LD_VAR 0 2
53921: ARRAY
53922: PUSH
53923: LD_INT 1
53925: ARRAY
53926: PUSH
53927: LD_INT 4
53929: ARRAY
53930: PPUSH
53931: CALL 25819 0 5
53935: IFFALSE 54216
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
53937: LD_ADDR_VAR 0 4
53941: PUSH
53942: LD_EXP 57
53946: PUSH
53947: LD_VAR 0 2
53951: ARRAY
53952: PPUSH
53953: LD_INT 25
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PPUSH
53963: CALL_OW 72
53967: PUSH
53968: LD_EXP 59
53972: PUSH
53973: LD_VAR 0 2
53977: ARRAY
53978: DIFF
53979: ST_TO_ADDR
// if not tmp then
53980: LD_VAR 0 4
53984: NOT
53985: IFFALSE 53989
// continue ;
53987: GO 53429
// for j in tmp do
53989: LD_ADDR_VAR 0 3
53993: PUSH
53994: LD_VAR 0 4
53998: PUSH
53999: FOR_IN
54000: IFFALSE 54212
// begin if not mc_builders [ i ] then
54002: LD_EXP 63
54006: PUSH
54007: LD_VAR 0 2
54011: ARRAY
54012: NOT
54013: IFFALSE 54071
// begin SetTag ( j , 103 ) ;
54015: LD_VAR 0 3
54019: PPUSH
54020: LD_INT 103
54022: PPUSH
54023: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
54027: LD_ADDR_EXP 63
54031: PUSH
54032: LD_EXP 63
54036: PPUSH
54037: LD_VAR 0 2
54041: PUSH
54042: LD_EXP 63
54046: PUSH
54047: LD_VAR 0 2
54051: ARRAY
54052: PUSH
54053: LD_INT 1
54055: PLUS
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PPUSH
54061: LD_VAR 0 3
54065: PPUSH
54066: CALL 19309 0 3
54070: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
54071: LD_VAR 0 3
54075: PPUSH
54076: CALL_OW 310
54080: IFFALSE 54091
// ComExitBuilding ( j ) ;
54082: LD_VAR 0 3
54086: PPUSH
54087: CALL_OW 122
// wait ( 3 ) ;
54091: LD_INT 3
54093: PPUSH
54094: CALL_OW 67
// if not mc_build_list [ i ] then
54098: LD_EXP 62
54102: PUSH
54103: LD_VAR 0 2
54107: ARRAY
54108: NOT
54109: IFFALSE 54113
// break ;
54111: GO 54212
// if not HasTask ( j ) then
54113: LD_VAR 0 3
54117: PPUSH
54118: CALL_OW 314
54122: NOT
54123: IFFALSE 54210
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
54125: LD_VAR 0 3
54129: PPUSH
54130: LD_EXP 62
54134: PUSH
54135: LD_VAR 0 2
54139: ARRAY
54140: PUSH
54141: LD_INT 1
54143: ARRAY
54144: PUSH
54145: LD_INT 1
54147: ARRAY
54148: PPUSH
54149: LD_EXP 62
54153: PUSH
54154: LD_VAR 0 2
54158: ARRAY
54159: PUSH
54160: LD_INT 1
54162: ARRAY
54163: PUSH
54164: LD_INT 2
54166: ARRAY
54167: PPUSH
54168: LD_EXP 62
54172: PUSH
54173: LD_VAR 0 2
54177: ARRAY
54178: PUSH
54179: LD_INT 1
54181: ARRAY
54182: PUSH
54183: LD_INT 3
54185: ARRAY
54186: PPUSH
54187: LD_EXP 62
54191: PUSH
54192: LD_VAR 0 2
54196: ARRAY
54197: PUSH
54198: LD_INT 1
54200: ARRAY
54201: PUSH
54202: LD_INT 4
54204: ARRAY
54205: PPUSH
54206: CALL_OW 145
// end ;
54210: GO 53999
54212: POP
54213: POP
// end else
54214: GO 54307
// TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
54216: LD_EXP 57
54220: PUSH
54221: LD_VAR 0 2
54225: ARRAY
54226: PPUSH
54227: LD_EXP 62
54231: PUSH
54232: LD_VAR 0 2
54236: ARRAY
54237: PUSH
54238: LD_INT 1
54240: ARRAY
54241: PUSH
54242: LD_INT 1
54244: ARRAY
54245: PPUSH
54246: LD_EXP 62
54250: PUSH
54251: LD_VAR 0 2
54255: ARRAY
54256: PUSH
54257: LD_INT 1
54259: ARRAY
54260: PUSH
54261: LD_INT 2
54263: ARRAY
54264: PPUSH
54265: LD_EXP 62
54269: PUSH
54270: LD_VAR 0 2
54274: ARRAY
54275: PUSH
54276: LD_INT 1
54278: ARRAY
54279: PUSH
54280: LD_INT 3
54282: ARRAY
54283: PPUSH
54284: LD_EXP 62
54288: PUSH
54289: LD_VAR 0 2
54293: ARRAY
54294: PUSH
54295: LD_INT 1
54297: ARRAY
54298: PUSH
54299: LD_INT 4
54301: ARRAY
54302: PPUSH
54303: CALL 25503 0 5
// end ;
54307: GO 53429
54309: POP
54310: POP
// end ;
54311: LD_VAR 0 1
54315: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
54316: LD_INT 0
54318: PPUSH
54319: PPUSH
54320: PPUSH
54321: PPUSH
54322: PPUSH
54323: PPUSH
// if not mc_bases then
54324: LD_EXP 57
54328: NOT
54329: IFFALSE 54333
// exit ;
54331: GO 54760
// for i = 1 to mc_bases do
54333: LD_ADDR_VAR 0 2
54337: PUSH
54338: DOUBLE
54339: LD_INT 1
54341: DEC
54342: ST_TO_ADDR
54343: LD_EXP 57
54347: PUSH
54348: FOR_TO
54349: IFFALSE 54758
// begin tmp := mc_build_upgrade [ i ] ;
54351: LD_ADDR_VAR 0 4
54355: PUSH
54356: LD_EXP 89
54360: PUSH
54361: LD_VAR 0 2
54365: ARRAY
54366: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
54367: LD_ADDR_VAR 0 6
54371: PUSH
54372: LD_EXP 90
54376: PUSH
54377: LD_VAR 0 2
54381: ARRAY
54382: PPUSH
54383: LD_INT 2
54385: PUSH
54386: LD_INT 30
54388: PUSH
54389: LD_INT 6
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 30
54398: PUSH
54399: LD_INT 7
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: LIST
54410: PPUSH
54411: CALL_OW 72
54415: ST_TO_ADDR
// if not tmp and not lab then
54416: LD_VAR 0 4
54420: NOT
54421: PUSH
54422: LD_VAR 0 6
54426: NOT
54427: AND
54428: IFFALSE 54432
// continue ;
54430: GO 54348
// if tmp then
54432: LD_VAR 0 4
54436: IFFALSE 54556
// for j in tmp do
54438: LD_ADDR_VAR 0 3
54442: PUSH
54443: LD_VAR 0 4
54447: PUSH
54448: FOR_IN
54449: IFFALSE 54554
// begin if UpgradeCost ( j ) then
54451: LD_VAR 0 3
54455: PPUSH
54456: CALL 25163 0 1
54460: IFFALSE 54552
// begin ComUpgrade ( j ) ;
54462: LD_VAR 0 3
54466: PPUSH
54467: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
54471: LD_ADDR_EXP 89
54475: PUSH
54476: LD_EXP 89
54480: PPUSH
54481: LD_VAR 0 2
54485: PPUSH
54486: LD_EXP 89
54490: PUSH
54491: LD_VAR 0 2
54495: ARRAY
54496: PUSH
54497: LD_VAR 0 3
54501: DIFF
54502: PPUSH
54503: CALL_OW 1
54507: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
54508: LD_ADDR_EXP 64
54512: PUSH
54513: LD_EXP 64
54517: PPUSH
54518: LD_VAR 0 2
54522: PUSH
54523: LD_EXP 64
54527: PUSH
54528: LD_VAR 0 2
54532: ARRAY
54533: PUSH
54534: LD_INT 1
54536: PLUS
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PPUSH
54542: LD_VAR 0 3
54546: PPUSH
54547: CALL 19309 0 3
54551: ST_TO_ADDR
// end ; end ;
54552: GO 54448
54554: POP
54555: POP
// if not lab or not mc_lab_upgrade [ i ] then
54556: LD_VAR 0 6
54560: NOT
54561: PUSH
54562: LD_EXP 91
54566: PUSH
54567: LD_VAR 0 2
54571: ARRAY
54572: NOT
54573: OR
54574: IFFALSE 54578
// continue ;
54576: GO 54348
// for j in lab do
54578: LD_ADDR_VAR 0 3
54582: PUSH
54583: LD_VAR 0 6
54587: PUSH
54588: FOR_IN
54589: IFFALSE 54754
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
54591: LD_VAR 0 3
54595: PPUSH
54596: CALL_OW 266
54600: PUSH
54601: LD_INT 6
54603: PUSH
54604: LD_INT 7
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: IN
54611: PUSH
54612: LD_VAR 0 3
54616: PPUSH
54617: CALL_OW 461
54621: PUSH
54622: LD_INT 1
54624: NONEQUAL
54625: AND
54626: IFFALSE 54752
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
54628: LD_VAR 0 3
54632: PPUSH
54633: LD_EXP 91
54637: PUSH
54638: LD_VAR 0 2
54642: ARRAY
54643: PUSH
54644: LD_INT 1
54646: ARRAY
54647: PPUSH
54648: CALL 25368 0 2
54652: IFFALSE 54752
// begin ComCancel ( j ) ;
54654: LD_VAR 0 3
54658: PPUSH
54659: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
54663: LD_VAR 0 3
54667: PPUSH
54668: LD_EXP 91
54672: PUSH
54673: LD_VAR 0 2
54677: ARRAY
54678: PUSH
54679: LD_INT 1
54681: ARRAY
54682: PPUSH
54683: CALL_OW 207
// if not j in mc_construct_list [ i ] then
54687: LD_VAR 0 3
54691: PUSH
54692: LD_EXP 64
54696: PUSH
54697: LD_VAR 0 2
54701: ARRAY
54702: IN
54703: NOT
54704: IFFALSE 54750
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
54706: LD_ADDR_EXP 64
54710: PUSH
54711: LD_EXP 64
54715: PPUSH
54716: LD_VAR 0 2
54720: PUSH
54721: LD_EXP 64
54725: PUSH
54726: LD_VAR 0 2
54730: ARRAY
54731: PUSH
54732: LD_INT 1
54734: PLUS
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PPUSH
54740: LD_VAR 0 3
54744: PPUSH
54745: CALL 19309 0 3
54749: ST_TO_ADDR
// break ;
54750: GO 54754
// end ; end ; end ;
54752: GO 54588
54754: POP
54755: POP
// end ;
54756: GO 54348
54758: POP
54759: POP
// end ;
54760: LD_VAR 0 1
54764: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
54765: LD_INT 0
54767: PPUSH
54768: PPUSH
54769: PPUSH
54770: PPUSH
54771: PPUSH
54772: PPUSH
54773: PPUSH
// if not mc_bases then
54774: LD_EXP 57
54778: NOT
54779: IFFALSE 54783
// exit ;
54781: GO 55079
// for i = 1 to mc_bases do
54783: LD_ADDR_VAR 0 2
54787: PUSH
54788: DOUBLE
54789: LD_INT 1
54791: DEC
54792: ST_TO_ADDR
54793: LD_EXP 57
54797: PUSH
54798: FOR_TO
54799: IFFALSE 55077
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
54801: LD_EXP 65
54805: PUSH
54806: LD_VAR 0 2
54810: ARRAY
54811: NOT
54812: PUSH
54813: LD_EXP 57
54817: PUSH
54818: LD_VAR 0 2
54822: ARRAY
54823: PPUSH
54824: LD_INT 30
54826: PUSH
54827: LD_INT 3
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PPUSH
54834: CALL_OW 72
54838: NOT
54839: OR
54840: IFFALSE 54844
// continue ;
54842: GO 54798
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
54844: LD_EXP 65
54848: PUSH
54849: LD_VAR 0 2
54853: ARRAY
54854: PUSH
54855: LD_INT 1
54857: ARRAY
54858: PPUSH
54859: CALL_OW 269
54863: IFFALSE 54929
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
54865: LD_ADDR_VAR 0 4
54869: PUSH
54870: LD_EXP 65
54874: PUSH
54875: LD_VAR 0 2
54879: ARRAY
54880: PPUSH
54881: LD_INT 1
54883: PPUSH
54884: CALL_OW 3
54888: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
54889: LD_ADDR_EXP 65
54893: PUSH
54894: LD_EXP 65
54898: PPUSH
54899: LD_VAR 0 2
54903: PPUSH
54904: LD_VAR 0 4
54908: PPUSH
54909: CALL_OW 1
54913: ST_TO_ADDR
// if not mc_turret_list [ i ] then
54914: LD_EXP 65
54918: PUSH
54919: LD_VAR 0 2
54923: ARRAY
54924: NOT
54925: IFFALSE 54929
// continue ;
54927: GO 54798
// end ; busy := false ;
54929: LD_ADDR_VAR 0 6
54933: PUSH
54934: LD_INT 0
54936: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
54937: LD_ADDR_VAR 0 4
54941: PUSH
54942: LD_EXP 57
54946: PUSH
54947: LD_VAR 0 2
54951: ARRAY
54952: PPUSH
54953: LD_INT 30
54955: PUSH
54956: LD_INT 3
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PPUSH
54963: CALL_OW 72
54967: ST_TO_ADDR
// for j in tmp do
54968: LD_ADDR_VAR 0 3
54972: PUSH
54973: LD_VAR 0 4
54977: PUSH
54978: FOR_IN
54979: IFFALSE 55007
// if not BuildingStatus ( j ) = bs_idle then
54981: LD_VAR 0 3
54985: PPUSH
54986: CALL_OW 461
54990: PUSH
54991: LD_INT 2
54993: EQUAL
54994: NOT
54995: IFFALSE 55005
// busy := true ;
54997: LD_ADDR_VAR 0 6
55001: PUSH
55002: LD_INT 1
55004: ST_TO_ADDR
55005: GO 54978
55007: POP
55008: POP
// if busy then
55009: LD_VAR 0 6
55013: IFFALSE 55017
// continue ;
55015: GO 54798
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
55017: LD_ADDR_VAR 0 7
55021: PUSH
55022: LD_EXP 65
55026: PUSH
55027: LD_VAR 0 2
55031: ARRAY
55032: PUSH
55033: LD_INT 1
55035: ARRAY
55036: PPUSH
55037: CALL 23611 0 1
55041: ST_TO_ADDR
// if not weapon then
55042: LD_VAR 0 7
55046: NOT
55047: IFFALSE 55051
// continue ;
55049: GO 54798
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
55051: LD_EXP 65
55055: PUSH
55056: LD_VAR 0 2
55060: ARRAY
55061: PUSH
55062: LD_INT 1
55064: ARRAY
55065: PPUSH
55066: LD_VAR 0 7
55070: PPUSH
55071: CALL_OW 148
// end ;
55075: GO 54798
55077: POP
55078: POP
// end ;
55079: LD_VAR 0 1
55083: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
55084: LD_INT 0
55086: PPUSH
55087: PPUSH
55088: PPUSH
55089: PPUSH
55090: PPUSH
55091: PPUSH
// if not mc_bases then
55092: LD_EXP 57
55096: NOT
55097: IFFALSE 55101
// exit ;
55099: GO 56086
// for i = 1 to mc_bases do
55101: LD_ADDR_VAR 0 2
55105: PUSH
55106: DOUBLE
55107: LD_INT 1
55109: DEC
55110: ST_TO_ADDR
55111: LD_EXP 57
55115: PUSH
55116: FOR_TO
55117: IFFALSE 56084
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
55119: LD_EXP 70
55123: PUSH
55124: LD_VAR 0 2
55128: ARRAY
55129: NOT
55130: PUSH
55131: LD_EXP 70
55135: PUSH
55136: LD_VAR 0 2
55140: ARRAY
55141: PUSH
55142: LD_EXP 71
55146: PUSH
55147: LD_VAR 0 2
55151: ARRAY
55152: EQUAL
55153: OR
55154: IFFALSE 55158
// continue ;
55156: GO 55116
// if mc_miners [ i ] then
55158: LD_EXP 71
55162: PUSH
55163: LD_VAR 0 2
55167: ARRAY
55168: IFFALSE 55771
// begin k := 1 ;
55170: LD_ADDR_VAR 0 4
55174: PUSH
55175: LD_INT 1
55177: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
55178: LD_ADDR_VAR 0 3
55182: PUSH
55183: DOUBLE
55184: LD_EXP 71
55188: PUSH
55189: LD_VAR 0 2
55193: ARRAY
55194: INC
55195: ST_TO_ADDR
55196: LD_INT 1
55198: PUSH
55199: FOR_DOWNTO
55200: IFFALSE 55769
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
55202: LD_EXP 71
55206: PUSH
55207: LD_VAR 0 2
55211: ARRAY
55212: PUSH
55213: LD_VAR 0 3
55217: ARRAY
55218: PPUSH
55219: CALL_OW 301
55223: IFFALSE 55286
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
55225: LD_ADDR_VAR 0 5
55229: PUSH
55230: LD_EXP 71
55234: PUSH
55235: LD_VAR 0 2
55239: ARRAY
55240: PUSH
55241: LD_EXP 71
55245: PUSH
55246: LD_VAR 0 2
55250: ARRAY
55251: PUSH
55252: LD_VAR 0 3
55256: ARRAY
55257: DIFF
55258: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
55259: LD_ADDR_EXP 71
55263: PUSH
55264: LD_EXP 71
55268: PPUSH
55269: LD_VAR 0 2
55273: PPUSH
55274: LD_VAR 0 5
55278: PPUSH
55279: CALL_OW 1
55283: ST_TO_ADDR
// continue ;
55284: GO 55199
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
55286: LD_EXP 71
55290: PUSH
55291: LD_VAR 0 2
55295: ARRAY
55296: PUSH
55297: LD_VAR 0 3
55301: ARRAY
55302: PPUSH
55303: CALL 18810 0 1
55307: PUSH
55308: LD_EXP 71
55312: PUSH
55313: LD_VAR 0 2
55317: ARRAY
55318: PUSH
55319: LD_VAR 0 3
55323: ARRAY
55324: PPUSH
55325: CALL_OW 255
55329: PPUSH
55330: LD_EXP 70
55334: PUSH
55335: LD_VAR 0 2
55339: ARRAY
55340: PUSH
55341: LD_VAR 0 4
55345: ARRAY
55346: PUSH
55347: LD_INT 1
55349: ARRAY
55350: PPUSH
55351: LD_EXP 70
55355: PUSH
55356: LD_VAR 0 2
55360: ARRAY
55361: PUSH
55362: LD_VAR 0 4
55366: ARRAY
55367: PUSH
55368: LD_INT 2
55370: ARRAY
55371: PPUSH
55372: LD_INT 15
55374: PPUSH
55375: CALL 19803 0 4
55379: PUSH
55380: LD_INT 4
55382: ARRAY
55383: PUSH
55384: LD_EXP 71
55388: PUSH
55389: LD_VAR 0 2
55393: ARRAY
55394: PUSH
55395: LD_VAR 0 3
55399: ARRAY
55400: PPUSH
55401: LD_INT 10
55403: PPUSH
55404: CALL 21500 0 2
55408: PUSH
55409: LD_INT 4
55411: ARRAY
55412: OR
55413: AND
55414: IFFALSE 55437
// ComStop ( mc_miners [ i ] [ j ] ) ;
55416: LD_EXP 71
55420: PUSH
55421: LD_VAR 0 2
55425: ARRAY
55426: PUSH
55427: LD_VAR 0 3
55431: ARRAY
55432: PPUSH
55433: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
55437: LD_EXP 71
55441: PUSH
55442: LD_VAR 0 2
55446: ARRAY
55447: PUSH
55448: LD_VAR 0 3
55452: ARRAY
55453: PPUSH
55454: CALL_OW 257
55458: PUSH
55459: LD_INT 1
55461: EQUAL
55462: PUSH
55463: LD_EXP 71
55467: PUSH
55468: LD_VAR 0 2
55472: ARRAY
55473: PUSH
55474: LD_VAR 0 3
55478: ARRAY
55479: PPUSH
55480: CALL_OW 459
55484: NOT
55485: AND
55486: PUSH
55487: LD_EXP 71
55491: PUSH
55492: LD_VAR 0 2
55496: ARRAY
55497: PUSH
55498: LD_VAR 0 3
55502: ARRAY
55503: PPUSH
55504: CALL_OW 255
55508: PPUSH
55509: LD_EXP 70
55513: PUSH
55514: LD_VAR 0 2
55518: ARRAY
55519: PUSH
55520: LD_VAR 0 4
55524: ARRAY
55525: PUSH
55526: LD_INT 1
55528: ARRAY
55529: PPUSH
55530: LD_EXP 70
55534: PUSH
55535: LD_VAR 0 2
55539: ARRAY
55540: PUSH
55541: LD_VAR 0 4
55545: ARRAY
55546: PUSH
55547: LD_INT 2
55549: ARRAY
55550: PPUSH
55551: LD_INT 15
55553: PPUSH
55554: CALL 19803 0 4
55558: PUSH
55559: LD_INT 4
55561: ARRAY
55562: PUSH
55563: LD_INT 0
55565: EQUAL
55566: AND
55567: PUSH
55568: LD_EXP 71
55572: PUSH
55573: LD_VAR 0 2
55577: ARRAY
55578: PUSH
55579: LD_VAR 0 3
55583: ARRAY
55584: PPUSH
55585: CALL_OW 314
55589: NOT
55590: AND
55591: IFFALSE 55767
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
55593: LD_EXP 71
55597: PUSH
55598: LD_VAR 0 2
55602: ARRAY
55603: PUSH
55604: LD_VAR 0 3
55608: ARRAY
55609: PPUSH
55610: CALL_OW 310
55614: IFFALSE 55637
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
55616: LD_EXP 71
55620: PUSH
55621: LD_VAR 0 2
55625: ARRAY
55626: PUSH
55627: LD_VAR 0 3
55631: ARRAY
55632: PPUSH
55633: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
55637: LD_EXP 71
55641: PUSH
55642: LD_VAR 0 2
55646: ARRAY
55647: PUSH
55648: LD_VAR 0 3
55652: ARRAY
55653: PPUSH
55654: CALL_OW 314
55658: NOT
55659: IFFALSE 55727
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
55661: LD_EXP 71
55665: PUSH
55666: LD_VAR 0 2
55670: ARRAY
55671: PUSH
55672: LD_VAR 0 3
55676: ARRAY
55677: PPUSH
55678: LD_EXP 70
55682: PUSH
55683: LD_VAR 0 2
55687: ARRAY
55688: PUSH
55689: LD_VAR 0 4
55693: ARRAY
55694: PUSH
55695: LD_INT 1
55697: ARRAY
55698: PPUSH
55699: LD_EXP 70
55703: PUSH
55704: LD_VAR 0 2
55708: ARRAY
55709: PUSH
55710: LD_VAR 0 4
55714: ARRAY
55715: PUSH
55716: LD_INT 2
55718: ARRAY
55719: PPUSH
55720: LD_INT 0
55722: PPUSH
55723: CALL_OW 193
// k := k + 1 ;
55727: LD_ADDR_VAR 0 4
55731: PUSH
55732: LD_VAR 0 4
55736: PUSH
55737: LD_INT 1
55739: PLUS
55740: ST_TO_ADDR
// if k > mc_mines [ i ] then
55741: LD_VAR 0 4
55745: PUSH
55746: LD_EXP 70
55750: PUSH
55751: LD_VAR 0 2
55755: ARRAY
55756: GREATER
55757: IFFALSE 55767
// k := 1 ;
55759: LD_ADDR_VAR 0 4
55763: PUSH
55764: LD_INT 1
55766: ST_TO_ADDR
// end ; end ;
55767: GO 55199
55769: POP
55770: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
55771: LD_ADDR_VAR 0 5
55775: PUSH
55776: LD_EXP 57
55780: PUSH
55781: LD_VAR 0 2
55785: ARRAY
55786: PPUSH
55787: LD_INT 2
55789: PUSH
55790: LD_INT 30
55792: PUSH
55793: LD_INT 4
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 30
55802: PUSH
55803: LD_INT 5
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 30
55812: PUSH
55813: LD_INT 32
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: PPUSH
55826: CALL_OW 72
55830: ST_TO_ADDR
// if not tmp then
55831: LD_VAR 0 5
55835: NOT
55836: IFFALSE 55840
// continue ;
55838: GO 55116
// list := [ ] ;
55840: LD_ADDR_VAR 0 6
55844: PUSH
55845: EMPTY
55846: ST_TO_ADDR
// for j in tmp do
55847: LD_ADDR_VAR 0 3
55851: PUSH
55852: LD_VAR 0 5
55856: PUSH
55857: FOR_IN
55858: IFFALSE 55927
// begin for k in UnitsInside ( j ) do
55860: LD_ADDR_VAR 0 4
55864: PUSH
55865: LD_VAR 0 3
55869: PPUSH
55870: CALL_OW 313
55874: PUSH
55875: FOR_IN
55876: IFFALSE 55923
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
55878: LD_VAR 0 4
55882: PPUSH
55883: CALL_OW 257
55887: PUSH
55888: LD_INT 1
55890: EQUAL
55891: PUSH
55892: LD_VAR 0 4
55896: PPUSH
55897: CALL_OW 459
55901: NOT
55902: AND
55903: IFFALSE 55921
// list := list ^ k ;
55905: LD_ADDR_VAR 0 6
55909: PUSH
55910: LD_VAR 0 6
55914: PUSH
55915: LD_VAR 0 4
55919: ADD
55920: ST_TO_ADDR
55921: GO 55875
55923: POP
55924: POP
// end ;
55925: GO 55857
55927: POP
55928: POP
// list := list diff mc_miners [ i ] ;
55929: LD_ADDR_VAR 0 6
55933: PUSH
55934: LD_VAR 0 6
55938: PUSH
55939: LD_EXP 71
55943: PUSH
55944: LD_VAR 0 2
55948: ARRAY
55949: DIFF
55950: ST_TO_ADDR
// if not list then
55951: LD_VAR 0 6
55955: NOT
55956: IFFALSE 55960
// continue ;
55958: GO 55116
// k := mc_mines [ i ] - mc_miners [ i ] ;
55960: LD_ADDR_VAR 0 4
55964: PUSH
55965: LD_EXP 70
55969: PUSH
55970: LD_VAR 0 2
55974: ARRAY
55975: PUSH
55976: LD_EXP 71
55980: PUSH
55981: LD_VAR 0 2
55985: ARRAY
55986: MINUS
55987: ST_TO_ADDR
// if k > list then
55988: LD_VAR 0 4
55992: PUSH
55993: LD_VAR 0 6
55997: GREATER
55998: IFFALSE 56010
// k := list ;
56000: LD_ADDR_VAR 0 4
56004: PUSH
56005: LD_VAR 0 6
56009: ST_TO_ADDR
// for j = 1 to k do
56010: LD_ADDR_VAR 0 3
56014: PUSH
56015: DOUBLE
56016: LD_INT 1
56018: DEC
56019: ST_TO_ADDR
56020: LD_VAR 0 4
56024: PUSH
56025: FOR_TO
56026: IFFALSE 56080
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
56028: LD_ADDR_EXP 71
56032: PUSH
56033: LD_EXP 71
56037: PPUSH
56038: LD_VAR 0 2
56042: PUSH
56043: LD_EXP 71
56047: PUSH
56048: LD_VAR 0 2
56052: ARRAY
56053: PUSH
56054: LD_INT 1
56056: PLUS
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PPUSH
56062: LD_VAR 0 6
56066: PUSH
56067: LD_VAR 0 3
56071: ARRAY
56072: PPUSH
56073: CALL 19309 0 3
56077: ST_TO_ADDR
56078: GO 56025
56080: POP
56081: POP
// end ;
56082: GO 55116
56084: POP
56085: POP
// end ;
56086: LD_VAR 0 1
56090: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
56091: LD_INT 0
56093: PPUSH
56094: PPUSH
56095: PPUSH
56096: PPUSH
56097: PPUSH
56098: PPUSH
56099: PPUSH
56100: PPUSH
56101: PPUSH
// if not mc_bases then
56102: LD_EXP 57
56106: NOT
56107: IFFALSE 56111
// exit ;
56109: GO 57496
// for i = 1 to mc_bases do
56111: LD_ADDR_VAR 0 2
56115: PUSH
56116: DOUBLE
56117: LD_INT 1
56119: DEC
56120: ST_TO_ADDR
56121: LD_EXP 57
56125: PUSH
56126: FOR_TO
56127: IFFALSE 57494
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
56129: LD_EXP 57
56133: PUSH
56134: LD_VAR 0 2
56138: ARRAY
56139: NOT
56140: PUSH
56141: LD_EXP 64
56145: PUSH
56146: LD_VAR 0 2
56150: ARRAY
56151: OR
56152: IFFALSE 56156
// continue ;
56154: GO 56126
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
56156: LD_EXP 73
56160: PUSH
56161: LD_VAR 0 2
56165: ARRAY
56166: NOT
56167: PUSH
56168: LD_EXP 74
56172: PUSH
56173: LD_VAR 0 2
56177: ARRAY
56178: AND
56179: IFFALSE 56217
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
56181: LD_ADDR_EXP 74
56185: PUSH
56186: LD_EXP 74
56190: PPUSH
56191: LD_VAR 0 2
56195: PPUSH
56196: EMPTY
56197: PPUSH
56198: CALL_OW 1
56202: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
56203: LD_VAR 0 2
56207: PPUSH
56208: LD_INT 107
56210: PPUSH
56211: CALL 51805 0 2
// continue ;
56215: GO 56126
// end ; target := [ ] ;
56217: LD_ADDR_VAR 0 5
56221: PUSH
56222: EMPTY
56223: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
56224: LD_ADDR_VAR 0 3
56228: PUSH
56229: DOUBLE
56230: LD_EXP 73
56234: PUSH
56235: LD_VAR 0 2
56239: ARRAY
56240: INC
56241: ST_TO_ADDR
56242: LD_INT 1
56244: PUSH
56245: FOR_DOWNTO
56246: IFFALSE 56506
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
56248: LD_EXP 73
56252: PUSH
56253: LD_VAR 0 2
56257: ARRAY
56258: PUSH
56259: LD_VAR 0 3
56263: ARRAY
56264: PUSH
56265: LD_INT 2
56267: ARRAY
56268: PPUSH
56269: LD_EXP 73
56273: PUSH
56274: LD_VAR 0 2
56278: ARRAY
56279: PUSH
56280: LD_VAR 0 3
56284: ARRAY
56285: PUSH
56286: LD_INT 3
56288: ARRAY
56289: PPUSH
56290: CALL_OW 488
56294: PUSH
56295: LD_EXP 73
56299: PUSH
56300: LD_VAR 0 2
56304: ARRAY
56305: PUSH
56306: LD_VAR 0 3
56310: ARRAY
56311: PUSH
56312: LD_INT 2
56314: ARRAY
56315: PPUSH
56316: LD_EXP 73
56320: PUSH
56321: LD_VAR 0 2
56325: ARRAY
56326: PUSH
56327: LD_VAR 0 3
56331: ARRAY
56332: PUSH
56333: LD_INT 3
56335: ARRAY
56336: PPUSH
56337: CALL_OW 284
56341: PUSH
56342: LD_INT 0
56344: EQUAL
56345: AND
56346: IFFALSE 56401
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
56348: LD_ADDR_VAR 0 4
56352: PUSH
56353: LD_EXP 73
56357: PUSH
56358: LD_VAR 0 2
56362: ARRAY
56363: PPUSH
56364: LD_VAR 0 3
56368: PPUSH
56369: CALL_OW 3
56373: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
56374: LD_ADDR_EXP 73
56378: PUSH
56379: LD_EXP 73
56383: PPUSH
56384: LD_VAR 0 2
56388: PPUSH
56389: LD_VAR 0 4
56393: PPUSH
56394: CALL_OW 1
56398: ST_TO_ADDR
// continue ;
56399: GO 56245
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
56401: LD_EXP 57
56405: PUSH
56406: LD_VAR 0 2
56410: ARRAY
56411: PUSH
56412: LD_INT 1
56414: ARRAY
56415: PPUSH
56416: CALL_OW 255
56420: PPUSH
56421: LD_EXP 73
56425: PUSH
56426: LD_VAR 0 2
56430: ARRAY
56431: PUSH
56432: LD_VAR 0 3
56436: ARRAY
56437: PUSH
56438: LD_INT 2
56440: ARRAY
56441: PPUSH
56442: LD_EXP 73
56446: PUSH
56447: LD_VAR 0 2
56451: ARRAY
56452: PUSH
56453: LD_VAR 0 3
56457: ARRAY
56458: PUSH
56459: LD_INT 3
56461: ARRAY
56462: PPUSH
56463: LD_INT 20
56465: PPUSH
56466: CALL 19803 0 4
56470: PUSH
56471: LD_INT 4
56473: ARRAY
56474: PUSH
56475: LD_INT 0
56477: EQUAL
56478: IFFALSE 56504
// begin target := mc_crates [ i ] [ j ] ;
56480: LD_ADDR_VAR 0 5
56484: PUSH
56485: LD_EXP 73
56489: PUSH
56490: LD_VAR 0 2
56494: ARRAY
56495: PUSH
56496: LD_VAR 0 3
56500: ARRAY
56501: ST_TO_ADDR
// break ;
56502: GO 56506
// end ; end ;
56504: GO 56245
56506: POP
56507: POP
// if not target then
56508: LD_VAR 0 5
56512: NOT
56513: IFFALSE 56517
// continue ;
56515: GO 56126
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
56517: LD_ADDR_VAR 0 6
56521: PUSH
56522: LD_EXP 76
56526: PUSH
56527: LD_VAR 0 2
56531: ARRAY
56532: PPUSH
56533: LD_INT 2
56535: PUSH
56536: LD_INT 3
56538: PUSH
56539: LD_INT 58
56541: PUSH
56542: EMPTY
56543: LIST
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 61
56551: PUSH
56552: EMPTY
56553: LIST
56554: PUSH
56555: LD_INT 33
56557: PUSH
56558: LD_INT 5
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 33
56567: PUSH
56568: LD_INT 3
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: LD_INT 34
56587: PUSH
56588: LD_INT 32
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 34
56597: PUSH
56598: LD_INT 51
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 34
56607: PUSH
56608: LD_INT 12
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PPUSH
56625: CALL_OW 72
56629: ST_TO_ADDR
// if not cargo then
56630: LD_VAR 0 6
56634: NOT
56635: IFFALSE 57029
// begin if mc_crates_collector [ i ] < 5 then
56637: LD_EXP 74
56641: PUSH
56642: LD_VAR 0 2
56646: ARRAY
56647: PUSH
56648: LD_INT 5
56650: LESS
56651: IFFALSE 56843
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
56653: LD_ADDR_VAR 0 4
56657: PUSH
56658: LD_EXP 57
56662: PUSH
56663: LD_VAR 0 2
56667: ARRAY
56668: PUSH
56669: LD_EXP 86
56673: PUSH
56674: LD_VAR 0 2
56678: ARRAY
56679: UNION
56680: PPUSH
56681: LD_INT 2
56683: PUSH
56684: LD_INT 25
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 25
56696: PUSH
56697: LD_INT 16
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 24
56711: PUSH
56712: LD_INT 750
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PPUSH
56723: CALL_OW 72
56727: ST_TO_ADDR
// if not tmp then
56728: LD_VAR 0 4
56732: NOT
56733: IFFALSE 56737
// continue ;
56735: GO 56126
// for j in tmp do
56737: LD_ADDR_VAR 0 3
56741: PUSH
56742: LD_VAR 0 4
56746: PUSH
56747: FOR_IN
56748: IFFALSE 56841
// if GetTag ( j ) = 0 then
56750: LD_VAR 0 3
56754: PPUSH
56755: CALL_OW 110
56759: PUSH
56760: LD_INT 0
56762: EQUAL
56763: IFFALSE 56839
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
56765: LD_ADDR_EXP 74
56769: PUSH
56770: LD_EXP 74
56774: PPUSH
56775: LD_VAR 0 2
56779: PUSH
56780: LD_EXP 74
56784: PUSH
56785: LD_VAR 0 2
56789: ARRAY
56790: PUSH
56791: LD_INT 1
56793: PLUS
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PPUSH
56799: LD_VAR 0 3
56803: PPUSH
56804: CALL 19309 0 3
56808: ST_TO_ADDR
// SetTag ( j , 107 ) ;
56809: LD_VAR 0 3
56813: PPUSH
56814: LD_INT 107
56816: PPUSH
56817: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
56821: LD_EXP 74
56825: PUSH
56826: LD_VAR 0 2
56830: ARRAY
56831: PUSH
56832: LD_INT 5
56834: GREATER
56835: IFFALSE 56839
// break ;
56837: GO 56841
// end ;
56839: GO 56747
56841: POP
56842: POP
// end ; if mc_crates_collector [ i ] and target then
56843: LD_EXP 74
56847: PUSH
56848: LD_VAR 0 2
56852: ARRAY
56853: PUSH
56854: LD_VAR 0 5
56858: AND
56859: IFFALSE 57027
// begin if mc_crates_collector [ i ] < target [ 1 ] then
56861: LD_EXP 74
56865: PUSH
56866: LD_VAR 0 2
56870: ARRAY
56871: PUSH
56872: LD_VAR 0 5
56876: PUSH
56877: LD_INT 1
56879: ARRAY
56880: LESS
56881: IFFALSE 56901
// tmp := mc_crates_collector [ i ] else
56883: LD_ADDR_VAR 0 4
56887: PUSH
56888: LD_EXP 74
56892: PUSH
56893: LD_VAR 0 2
56897: ARRAY
56898: ST_TO_ADDR
56899: GO 56915
// tmp := target [ 1 ] ;
56901: LD_ADDR_VAR 0 4
56905: PUSH
56906: LD_VAR 0 5
56910: PUSH
56911: LD_INT 1
56913: ARRAY
56914: ST_TO_ADDR
// for j = 1 to tmp do
56915: LD_ADDR_VAR 0 3
56919: PUSH
56920: DOUBLE
56921: LD_INT 1
56923: DEC
56924: ST_TO_ADDR
56925: LD_VAR 0 4
56929: PUSH
56930: FOR_TO
56931: IFFALSE 57025
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
56933: LD_EXP 74
56937: PUSH
56938: LD_VAR 0 2
56942: ARRAY
56943: PUSH
56944: LD_VAR 0 3
56948: ARRAY
56949: PPUSH
56950: CALL_OW 310
56954: IFFALSE 56977
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
56956: LD_EXP 74
56960: PUSH
56961: LD_VAR 0 2
56965: ARRAY
56966: PUSH
56967: LD_VAR 0 3
56971: ARRAY
56972: PPUSH
56973: CALL_OW 122
// wait ( 3 ) ;
56977: LD_INT 3
56979: PPUSH
56980: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
56984: LD_EXP 74
56988: PUSH
56989: LD_VAR 0 2
56993: ARRAY
56994: PUSH
56995: LD_VAR 0 3
56999: ARRAY
57000: PPUSH
57001: LD_VAR 0 5
57005: PUSH
57006: LD_INT 2
57008: ARRAY
57009: PPUSH
57010: LD_VAR 0 5
57014: PUSH
57015: LD_INT 3
57017: ARRAY
57018: PPUSH
57019: CALL_OW 117
// end ;
57023: GO 56930
57025: POP
57026: POP
// end ; end else
57027: GO 57492
// begin for j in cargo do
57029: LD_ADDR_VAR 0 3
57033: PUSH
57034: LD_VAR 0 6
57038: PUSH
57039: FOR_IN
57040: IFFALSE 57490
// begin if GetTag ( j ) <> 0 then
57042: LD_VAR 0 3
57046: PPUSH
57047: CALL_OW 110
57051: PUSH
57052: LD_INT 0
57054: NONEQUAL
57055: IFFALSE 57059
// continue ;
57057: GO 57039
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
57059: LD_VAR 0 3
57063: PPUSH
57064: CALL_OW 262
57068: PUSH
57069: LD_INT 2
57071: EQUAL
57072: PUSH
57073: LD_VAR 0 3
57077: PPUSH
57078: CALL_OW 261
57082: PUSH
57083: LD_INT 15
57085: LESS
57086: AND
57087: IFFALSE 57091
// continue ;
57089: GO 57039
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
57091: LD_VAR 0 3
57095: PPUSH
57096: CALL_OW 262
57100: PUSH
57101: LD_INT 1
57103: EQUAL
57104: PUSH
57105: LD_VAR 0 3
57109: PPUSH
57110: CALL_OW 261
57114: PUSH
57115: LD_INT 10
57117: LESS
57118: AND
57119: IFFALSE 57429
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
57121: LD_ADDR_VAR 0 7
57125: PUSH
57126: LD_EXP 57
57130: PUSH
57131: LD_VAR 0 2
57135: ARRAY
57136: PPUSH
57137: LD_INT 2
57139: PUSH
57140: LD_INT 30
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 30
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: LIST
57164: PPUSH
57165: CALL_OW 72
57169: ST_TO_ADDR
// if not depot then
57170: LD_VAR 0 7
57174: NOT
57175: IFFALSE 57179
// continue ;
57177: GO 57039
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
57179: LD_VAR 0 3
57183: PPUSH
57184: LD_VAR 0 7
57188: PPUSH
57189: LD_VAR 0 3
57193: PPUSH
57194: CALL_OW 74
57198: PPUSH
57199: CALL_OW 296
57203: PUSH
57204: LD_INT 6
57206: LESS
57207: IFFALSE 57223
// SetFuel ( j , 100 ) else
57209: LD_VAR 0 3
57213: PPUSH
57214: LD_INT 100
57216: PPUSH
57217: CALL_OW 240
57221: GO 57429
// if GetFuel ( j ) = 0 then
57223: LD_VAR 0 3
57227: PPUSH
57228: CALL_OW 261
57232: PUSH
57233: LD_INT 0
57235: EQUAL
57236: IFFALSE 57429
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
57238: LD_ADDR_EXP 76
57242: PUSH
57243: LD_EXP 76
57247: PPUSH
57248: LD_VAR 0 2
57252: PPUSH
57253: LD_EXP 76
57257: PUSH
57258: LD_VAR 0 2
57262: ARRAY
57263: PUSH
57264: LD_VAR 0 3
57268: DIFF
57269: PPUSH
57270: CALL_OW 1
57274: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
57275: LD_VAR 0 3
57279: PPUSH
57280: CALL_OW 263
57284: PUSH
57285: LD_INT 1
57287: EQUAL
57288: IFFALSE 57304
// ComExitVehicle ( IsInUnit ( j ) ) ;
57290: LD_VAR 0 3
57294: PPUSH
57295: CALL_OW 310
57299: PPUSH
57300: CALL_OW 121
// if GetControl ( j ) = control_remote then
57304: LD_VAR 0 3
57308: PPUSH
57309: CALL_OW 263
57313: PUSH
57314: LD_INT 2
57316: EQUAL
57317: IFFALSE 57328
// ComUnlink ( j ) ;
57319: LD_VAR 0 3
57323: PPUSH
57324: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
57328: LD_ADDR_VAR 0 8
57332: PUSH
57333: LD_VAR 0 2
57337: PPUSH
57338: LD_INT 3
57340: PPUSH
57341: CALL 64063 0 2
57345: ST_TO_ADDR
// if fac then
57346: LD_VAR 0 8
57350: IFFALSE 57427
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
57352: LD_ADDR_VAR 0 9
57356: PUSH
57357: LD_VAR 0 8
57361: PPUSH
57362: LD_VAR 0 3
57366: PPUSH
57367: CALL_OW 265
57371: PPUSH
57372: LD_VAR 0 3
57376: PPUSH
57377: CALL_OW 262
57381: PPUSH
57382: LD_VAR 0 3
57386: PPUSH
57387: CALL_OW 263
57391: PPUSH
57392: LD_VAR 0 3
57396: PPUSH
57397: CALL_OW 264
57401: PPUSH
57402: CALL 16474 0 5
57406: ST_TO_ADDR
// if components then
57407: LD_VAR 0 9
57411: IFFALSE 57427
// MC_InsertProduceList ( i , components ) ;
57413: LD_VAR 0 2
57417: PPUSH
57418: LD_VAR 0 9
57422: PPUSH
57423: CALL 63726 0 2
// end ; continue ;
57427: GO 57039
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
57429: LD_VAR 0 3
57433: PPUSH
57434: LD_INT 1
57436: PPUSH
57437: CALL_OW 289
57441: PUSH
57442: LD_INT 100
57444: LESS
57445: PUSH
57446: LD_VAR 0 3
57450: PPUSH
57451: CALL_OW 314
57455: NOT
57456: AND
57457: IFFALSE 57486
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
57459: LD_VAR 0 3
57463: PPUSH
57464: LD_VAR 0 5
57468: PUSH
57469: LD_INT 2
57471: ARRAY
57472: PPUSH
57473: LD_VAR 0 5
57477: PUSH
57478: LD_INT 3
57480: ARRAY
57481: PPUSH
57482: CALL_OW 117
// break ;
57486: GO 57490
// end ;
57488: GO 57039
57490: POP
57491: POP
// end ; end ;
57492: GO 56126
57494: POP
57495: POP
// end ;
57496: LD_VAR 0 1
57500: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
57501: LD_INT 0
57503: PPUSH
57504: PPUSH
57505: PPUSH
57506: PPUSH
// if not mc_bases then
57507: LD_EXP 57
57511: NOT
57512: IFFALSE 57516
// exit ;
57514: GO 57677
// for i = 1 to mc_bases do
57516: LD_ADDR_VAR 0 2
57520: PUSH
57521: DOUBLE
57522: LD_INT 1
57524: DEC
57525: ST_TO_ADDR
57526: LD_EXP 57
57530: PUSH
57531: FOR_TO
57532: IFFALSE 57675
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
57534: LD_ADDR_VAR 0 4
57538: PUSH
57539: LD_EXP 76
57543: PUSH
57544: LD_VAR 0 2
57548: ARRAY
57549: PUSH
57550: LD_EXP 79
57554: PUSH
57555: LD_VAR 0 2
57559: ARRAY
57560: ADD
57561: PPUSH
57562: LD_INT 33
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PPUSH
57572: CALL_OW 72
57576: ST_TO_ADDR
// if tmp then
57577: LD_VAR 0 4
57581: IFFALSE 57673
// for j in tmp do
57583: LD_ADDR_VAR 0 3
57587: PUSH
57588: LD_VAR 0 4
57592: PUSH
57593: FOR_IN
57594: IFFALSE 57671
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
57596: LD_VAR 0 3
57600: PPUSH
57601: CALL_OW 312
57605: NOT
57606: PUSH
57607: LD_VAR 0 3
57611: PPUSH
57612: CALL_OW 256
57616: PUSH
57617: LD_INT 250
57619: GREATEREQUAL
57620: AND
57621: IFFALSE 57634
// Connect ( j ) else
57623: LD_VAR 0 3
57627: PPUSH
57628: CALL 21797 0 1
57632: GO 57669
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
57634: LD_VAR 0 3
57638: PPUSH
57639: CALL_OW 256
57643: PUSH
57644: LD_INT 250
57646: LESS
57647: PUSH
57648: LD_VAR 0 3
57652: PPUSH
57653: CALL_OW 312
57657: AND
57658: IFFALSE 57669
// ComUnlink ( j ) ;
57660: LD_VAR 0 3
57664: PPUSH
57665: CALL_OW 136
57669: GO 57593
57671: POP
57672: POP
// end ;
57673: GO 57531
57675: POP
57676: POP
// end ;
57677: LD_VAR 0 1
57681: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
57682: LD_INT 0
57684: PPUSH
57685: PPUSH
57686: PPUSH
57687: PPUSH
57688: PPUSH
// if not mc_bases then
57689: LD_EXP 57
57693: NOT
57694: IFFALSE 57698
// exit ;
57696: GO 58158
// for i = 1 to mc_bases do
57698: LD_ADDR_VAR 0 2
57702: PUSH
57703: DOUBLE
57704: LD_INT 1
57706: DEC
57707: ST_TO_ADDR
57708: LD_EXP 57
57712: PUSH
57713: FOR_TO
57714: IFFALSE 58156
// begin if not mc_produce [ i ] then
57716: LD_EXP 78
57720: PUSH
57721: LD_VAR 0 2
57725: ARRAY
57726: NOT
57727: IFFALSE 57731
// continue ;
57729: GO 57713
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
57731: LD_ADDR_VAR 0 5
57735: PUSH
57736: LD_EXP 57
57740: PUSH
57741: LD_VAR 0 2
57745: ARRAY
57746: PPUSH
57747: LD_INT 30
57749: PUSH
57750: LD_INT 3
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PPUSH
57757: CALL_OW 72
57761: ST_TO_ADDR
// if not fac then
57762: LD_VAR 0 5
57766: NOT
57767: IFFALSE 57771
// continue ;
57769: GO 57713
// for j in fac do
57771: LD_ADDR_VAR 0 3
57775: PUSH
57776: LD_VAR 0 5
57780: PUSH
57781: FOR_IN
57782: IFFALSE 58152
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
57784: LD_VAR 0 3
57788: PPUSH
57789: CALL_OW 461
57793: PUSH
57794: LD_INT 2
57796: NONEQUAL
57797: PUSH
57798: LD_VAR 0 3
57802: PPUSH
57803: LD_INT 15
57805: PPUSH
57806: CALL 21500 0 2
57810: PUSH
57811: LD_INT 4
57813: ARRAY
57814: OR
57815: PUSH
57816: LD_VAR 0 3
57820: PPUSH
57821: CALL_OW 313
57825: PUSH
57826: LD_INT 0
57828: EQUAL
57829: OR
57830: IFFALSE 57834
// continue ;
57832: GO 57781
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
57834: LD_VAR 0 3
57838: PPUSH
57839: LD_EXP 78
57843: PUSH
57844: LD_VAR 0 2
57848: ARRAY
57849: PUSH
57850: LD_INT 1
57852: ARRAY
57853: PUSH
57854: LD_INT 1
57856: ARRAY
57857: PPUSH
57858: LD_EXP 78
57862: PUSH
57863: LD_VAR 0 2
57867: ARRAY
57868: PUSH
57869: LD_INT 1
57871: ARRAY
57872: PUSH
57873: LD_INT 2
57875: ARRAY
57876: PPUSH
57877: LD_EXP 78
57881: PUSH
57882: LD_VAR 0 2
57886: ARRAY
57887: PUSH
57888: LD_INT 1
57890: ARRAY
57891: PUSH
57892: LD_INT 3
57894: ARRAY
57895: PPUSH
57896: LD_EXP 78
57900: PUSH
57901: LD_VAR 0 2
57905: ARRAY
57906: PUSH
57907: LD_INT 1
57909: ARRAY
57910: PUSH
57911: LD_INT 4
57913: ARRAY
57914: PPUSH
57915: CALL_OW 448
57919: PUSH
57920: LD_VAR 0 3
57924: PPUSH
57925: LD_EXP 78
57929: PUSH
57930: LD_VAR 0 2
57934: ARRAY
57935: PUSH
57936: LD_INT 1
57938: ARRAY
57939: PUSH
57940: LD_INT 1
57942: ARRAY
57943: PUSH
57944: LD_EXP 78
57948: PUSH
57949: LD_VAR 0 2
57953: ARRAY
57954: PUSH
57955: LD_INT 1
57957: ARRAY
57958: PUSH
57959: LD_INT 2
57961: ARRAY
57962: PUSH
57963: LD_EXP 78
57967: PUSH
57968: LD_VAR 0 2
57972: ARRAY
57973: PUSH
57974: LD_INT 1
57976: ARRAY
57977: PUSH
57978: LD_INT 3
57980: ARRAY
57981: PUSH
57982: LD_EXP 78
57986: PUSH
57987: LD_VAR 0 2
57991: ARRAY
57992: PUSH
57993: LD_INT 1
57995: ARRAY
57996: PUSH
57997: LD_INT 4
57999: ARRAY
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: PPUSH
58007: CALL 25002 0 2
58011: AND
58012: IFFALSE 58150
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
58014: LD_VAR 0 3
58018: PPUSH
58019: LD_EXP 78
58023: PUSH
58024: LD_VAR 0 2
58028: ARRAY
58029: PUSH
58030: LD_INT 1
58032: ARRAY
58033: PUSH
58034: LD_INT 1
58036: ARRAY
58037: PPUSH
58038: LD_EXP 78
58042: PUSH
58043: LD_VAR 0 2
58047: ARRAY
58048: PUSH
58049: LD_INT 1
58051: ARRAY
58052: PUSH
58053: LD_INT 2
58055: ARRAY
58056: PPUSH
58057: LD_EXP 78
58061: PUSH
58062: LD_VAR 0 2
58066: ARRAY
58067: PUSH
58068: LD_INT 1
58070: ARRAY
58071: PUSH
58072: LD_INT 3
58074: ARRAY
58075: PPUSH
58076: LD_EXP 78
58080: PUSH
58081: LD_VAR 0 2
58085: ARRAY
58086: PUSH
58087: LD_INT 1
58089: ARRAY
58090: PUSH
58091: LD_INT 4
58093: ARRAY
58094: PPUSH
58095: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
58099: LD_ADDR_VAR 0 4
58103: PUSH
58104: LD_EXP 78
58108: PUSH
58109: LD_VAR 0 2
58113: ARRAY
58114: PPUSH
58115: LD_INT 1
58117: PPUSH
58118: CALL_OW 3
58122: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
58123: LD_ADDR_EXP 78
58127: PUSH
58128: LD_EXP 78
58132: PPUSH
58133: LD_VAR 0 2
58137: PPUSH
58138: LD_VAR 0 4
58142: PPUSH
58143: CALL_OW 1
58147: ST_TO_ADDR
// break ;
58148: GO 58152
// end ; end ;
58150: GO 57781
58152: POP
58153: POP
// end ;
58154: GO 57713
58156: POP
58157: POP
// end ;
58158: LD_VAR 0 1
58162: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
58163: LD_INT 0
58165: PPUSH
58166: PPUSH
58167: PPUSH
// if not mc_bases then
58168: LD_EXP 57
58172: NOT
58173: IFFALSE 58177
// exit ;
58175: GO 58266
// for i = 1 to mc_bases do
58177: LD_ADDR_VAR 0 2
58181: PUSH
58182: DOUBLE
58183: LD_INT 1
58185: DEC
58186: ST_TO_ADDR
58187: LD_EXP 57
58191: PUSH
58192: FOR_TO
58193: IFFALSE 58264
// begin if mc_attack [ i ] then
58195: LD_EXP 77
58199: PUSH
58200: LD_VAR 0 2
58204: ARRAY
58205: IFFALSE 58262
// begin tmp := mc_attack [ i ] [ 1 ] ;
58207: LD_ADDR_VAR 0 3
58211: PUSH
58212: LD_EXP 77
58216: PUSH
58217: LD_VAR 0 2
58221: ARRAY
58222: PUSH
58223: LD_INT 1
58225: ARRAY
58226: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
58227: LD_ADDR_EXP 77
58231: PUSH
58232: LD_EXP 77
58236: PPUSH
58237: LD_VAR 0 2
58241: PPUSH
58242: EMPTY
58243: PPUSH
58244: CALL_OW 1
58248: ST_TO_ADDR
// Attack ( tmp ) ;
58249: LD_VAR 0 3
58253: PPUSH
58254: CALL 46649 0 1
// exit ;
58258: POP
58259: POP
58260: GO 58266
// end ; end ;
58262: GO 58192
58264: POP
58265: POP
// end ;
58266: LD_VAR 0 1
58270: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
58271: LD_INT 0
58273: PPUSH
58274: PPUSH
58275: PPUSH
58276: PPUSH
58277: PPUSH
58278: PPUSH
58279: PPUSH
// if not mc_bases then
58280: LD_EXP 57
58284: NOT
58285: IFFALSE 58289
// exit ;
58287: GO 58664
// for i = 1 to mc_bases do
58289: LD_ADDR_VAR 0 2
58293: PUSH
58294: DOUBLE
58295: LD_INT 1
58297: DEC
58298: ST_TO_ADDR
58299: LD_EXP 57
58303: PUSH
58304: FOR_TO
58305: IFFALSE 58662
// begin if not mc_bases [ i ] then
58307: LD_EXP 57
58311: PUSH
58312: LD_VAR 0 2
58316: ARRAY
58317: NOT
58318: IFFALSE 58322
// continue ;
58320: GO 58304
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
58322: LD_ADDR_VAR 0 7
58326: PUSH
58327: LD_EXP 57
58331: PUSH
58332: LD_VAR 0 2
58336: ARRAY
58337: PUSH
58338: LD_INT 1
58340: ARRAY
58341: PPUSH
58342: CALL 15814 0 1
58346: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
58347: LD_ADDR_EXP 80
58351: PUSH
58352: LD_EXP 80
58356: PPUSH
58357: LD_VAR 0 2
58361: PPUSH
58362: LD_EXP 57
58366: PUSH
58367: LD_VAR 0 2
58371: ARRAY
58372: PUSH
58373: LD_INT 1
58375: ARRAY
58376: PPUSH
58377: CALL_OW 255
58381: PPUSH
58382: LD_EXP 82
58386: PUSH
58387: LD_VAR 0 2
58391: ARRAY
58392: PPUSH
58393: CALL 14272 0 2
58397: PPUSH
58398: CALL_OW 1
58402: ST_TO_ADDR
// if not mc_scan [ i ] then
58403: LD_EXP 80
58407: PUSH
58408: LD_VAR 0 2
58412: ARRAY
58413: NOT
58414: IFFALSE 58569
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
58416: LD_ADDR_VAR 0 4
58420: PUSH
58421: LD_EXP 57
58425: PUSH
58426: LD_VAR 0 2
58430: ARRAY
58431: PPUSH
58432: LD_INT 2
58434: PUSH
58435: LD_INT 25
58437: PUSH
58438: LD_INT 5
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 25
58447: PUSH
58448: LD_INT 8
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 25
58457: PUSH
58458: LD_INT 9
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: PPUSH
58471: CALL_OW 72
58475: ST_TO_ADDR
// if not tmp then
58476: LD_VAR 0 4
58480: NOT
58481: IFFALSE 58485
// continue ;
58483: GO 58304
// for j in tmp do
58485: LD_ADDR_VAR 0 3
58489: PUSH
58490: LD_VAR 0 4
58494: PUSH
58495: FOR_IN
58496: IFFALSE 58567
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
58498: LD_VAR 0 3
58502: PPUSH
58503: CALL_OW 310
58507: PPUSH
58508: CALL_OW 266
58512: PUSH
58513: LD_INT 5
58515: EQUAL
58516: PUSH
58517: LD_VAR 0 3
58521: PPUSH
58522: CALL_OW 257
58526: PUSH
58527: LD_INT 1
58529: EQUAL
58530: AND
58531: PUSH
58532: LD_VAR 0 3
58536: PPUSH
58537: CALL_OW 459
58541: NOT
58542: AND
58543: PUSH
58544: LD_VAR 0 7
58548: AND
58549: IFFALSE 58565
// ComChangeProfession ( j , class ) ;
58551: LD_VAR 0 3
58555: PPUSH
58556: LD_VAR 0 7
58560: PPUSH
58561: CALL_OW 123
58565: GO 58495
58567: POP
58568: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
58569: LD_EXP 80
58573: PUSH
58574: LD_VAR 0 2
58578: ARRAY
58579: PUSH
58580: LD_EXP 79
58584: PUSH
58585: LD_VAR 0 2
58589: ARRAY
58590: AND
58591: IFFALSE 58660
// begin tmp := mc_defender [ i ] ;
58593: LD_ADDR_VAR 0 4
58597: PUSH
58598: LD_EXP 79
58602: PUSH
58603: LD_VAR 0 2
58607: ARRAY
58608: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
58609: LD_ADDR_EXP 79
58613: PUSH
58614: LD_EXP 79
58618: PPUSH
58619: LD_VAR 0 2
58623: PPUSH
58624: EMPTY
58625: PPUSH
58626: CALL_OW 1
58630: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
58631: LD_VAR 0 2
58635: PPUSH
58636: LD_VAR 0 4
58640: PPUSH
58641: LD_EXP 80
58645: PUSH
58646: LD_VAR 0 2
58650: ARRAY
58651: PPUSH
58652: CALL 14307 0 3
// exit ;
58656: POP
58657: POP
58658: GO 58664
// end ; end ;
58660: GO 58304
58662: POP
58663: POP
// end ;
58664: LD_VAR 0 1
58668: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
58669: LD_INT 0
58671: PPUSH
58672: PPUSH
58673: PPUSH
58674: PPUSH
58675: PPUSH
58676: PPUSH
58677: PPUSH
58678: PPUSH
58679: PPUSH
// if not mc_bases then
58680: LD_EXP 57
58684: NOT
58685: IFFALSE 58689
// exit ;
58687: GO 59633
// for i = 1 to mc_bases do
58689: LD_ADDR_VAR 0 2
58693: PUSH
58694: DOUBLE
58695: LD_INT 1
58697: DEC
58698: ST_TO_ADDR
58699: LD_EXP 57
58703: PUSH
58704: FOR_TO
58705: IFFALSE 59631
// begin tmp := mc_lab [ i ] ;
58707: LD_ADDR_VAR 0 6
58711: PUSH
58712: LD_EXP 90
58716: PUSH
58717: LD_VAR 0 2
58721: ARRAY
58722: ST_TO_ADDR
// if not tmp then
58723: LD_VAR 0 6
58727: NOT
58728: IFFALSE 58732
// continue ;
58730: GO 58704
// for j in tmp do
58732: LD_ADDR_VAR 0 3
58736: PUSH
58737: LD_VAR 0 6
58741: PUSH
58742: FOR_IN
58743: IFFALSE 59627
// begin side := GetSide ( j ) ;
58745: LD_ADDR_VAR 0 4
58749: PUSH
58750: LD_VAR 0 3
58754: PPUSH
58755: CALL_OW 255
58759: ST_TO_ADDR
// if not mc_tech [ side ] then
58760: LD_EXP 84
58764: PUSH
58765: LD_VAR 0 4
58769: ARRAY
58770: NOT
58771: IFFALSE 58775
// continue ;
58773: GO 58742
// if BuildingStatus ( j ) = bs_idle then
58775: LD_VAR 0 3
58779: PPUSH
58780: CALL_OW 461
58784: PUSH
58785: LD_INT 2
58787: EQUAL
58788: IFFALSE 58861
// for t in mc_tech [ side ] do
58790: LD_ADDR_VAR 0 5
58794: PUSH
58795: LD_EXP 84
58799: PUSH
58800: LD_VAR 0 4
58804: ARRAY
58805: PUSH
58806: FOR_IN
58807: IFFALSE 58859
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
58809: LD_VAR 0 3
58813: PPUSH
58814: LD_VAR 0 5
58818: PPUSH
58819: CALL_OW 430
58823: PUSH
58824: LD_VAR 0 4
58828: PPUSH
58829: LD_VAR 0 5
58833: PPUSH
58834: CALL 13380 0 2
58838: AND
58839: IFFALSE 58857
// begin ComResearch ( j , t ) ;
58841: LD_VAR 0 3
58845: PPUSH
58846: LD_VAR 0 5
58850: PPUSH
58851: CALL_OW 124
// break ;
58855: GO 58859
// end ;
58857: GO 58806
58859: POP
58860: POP
// if BuildingStatus ( j ) = bs_need_ape then
58861: LD_VAR 0 3
58865: PPUSH
58866: CALL_OW 461
58870: PUSH
58871: LD_INT 10
58873: EQUAL
58874: IFFALSE 59462
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
58876: LD_EXP 86
58880: PUSH
58881: LD_VAR 0 2
58885: ARRAY
58886: NOT
58887: PUSH
58888: LD_EXP 87
58892: PUSH
58893: LD_VAR 0 2
58897: ARRAY
58898: NOT
58899: AND
58900: PUSH
58901: LD_EXP 84
58905: PUSH
58906: LD_VAR 0 4
58910: ARRAY
58911: PUSH
58912: LD_INT 1
58914: GREATER
58915: AND
58916: IFFALSE 59047
// begin ComCancel ( j ) ;
58918: LD_VAR 0 3
58922: PPUSH
58923: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
58927: LD_ADDR_EXP 84
58931: PUSH
58932: LD_EXP 84
58936: PPUSH
58937: LD_VAR 0 4
58941: PPUSH
58942: LD_EXP 84
58946: PUSH
58947: LD_VAR 0 4
58951: ARRAY
58952: PPUSH
58953: LD_EXP 84
58957: PUSH
58958: LD_VAR 0 4
58962: ARRAY
58963: PUSH
58964: LD_INT 1
58966: MINUS
58967: PPUSH
58968: LD_EXP 84
58972: PUSH
58973: LD_VAR 0 4
58977: ARRAY
58978: PPUSH
58979: LD_INT 0
58981: PPUSH
58982: CALL 18292 0 4
58986: PPUSH
58987: CALL_OW 1
58991: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
58992: LD_ADDR_EXP 84
58996: PUSH
58997: LD_EXP 84
59001: PPUSH
59002: LD_VAR 0 4
59006: PPUSH
59007: LD_EXP 84
59011: PUSH
59012: LD_VAR 0 4
59016: ARRAY
59017: PPUSH
59018: LD_EXP 84
59022: PUSH
59023: LD_VAR 0 4
59027: ARRAY
59028: PPUSH
59029: LD_INT 1
59031: PPUSH
59032: LD_INT 0
59034: PPUSH
59035: CALL 18292 0 4
59039: PPUSH
59040: CALL_OW 1
59044: ST_TO_ADDR
// continue ;
59045: GO 58742
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
59047: LD_EXP 86
59051: PUSH
59052: LD_VAR 0 2
59056: ARRAY
59057: PUSH
59058: LD_EXP 87
59062: PUSH
59063: LD_VAR 0 2
59067: ARRAY
59068: NOT
59069: AND
59070: IFFALSE 59197
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
59072: LD_ADDR_EXP 87
59076: PUSH
59077: LD_EXP 87
59081: PPUSH
59082: LD_VAR 0 2
59086: PUSH
59087: LD_EXP 87
59091: PUSH
59092: LD_VAR 0 2
59096: ARRAY
59097: PUSH
59098: LD_INT 1
59100: PLUS
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PPUSH
59106: LD_EXP 86
59110: PUSH
59111: LD_VAR 0 2
59115: ARRAY
59116: PUSH
59117: LD_INT 1
59119: ARRAY
59120: PPUSH
59121: CALL 19309 0 3
59125: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
59126: LD_EXP 86
59130: PUSH
59131: LD_VAR 0 2
59135: ARRAY
59136: PUSH
59137: LD_INT 1
59139: ARRAY
59140: PPUSH
59141: LD_INT 112
59143: PPUSH
59144: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
59148: LD_ADDR_VAR 0 9
59152: PUSH
59153: LD_EXP 86
59157: PUSH
59158: LD_VAR 0 2
59162: ARRAY
59163: PPUSH
59164: LD_INT 1
59166: PPUSH
59167: CALL_OW 3
59171: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
59172: LD_ADDR_EXP 86
59176: PUSH
59177: LD_EXP 86
59181: PPUSH
59182: LD_VAR 0 2
59186: PPUSH
59187: LD_VAR 0 9
59191: PPUSH
59192: CALL_OW 1
59196: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
59197: LD_EXP 86
59201: PUSH
59202: LD_VAR 0 2
59206: ARRAY
59207: PUSH
59208: LD_EXP 87
59212: PUSH
59213: LD_VAR 0 2
59217: ARRAY
59218: AND
59219: PUSH
59220: LD_EXP 87
59224: PUSH
59225: LD_VAR 0 2
59229: ARRAY
59230: PUSH
59231: LD_INT 1
59233: ARRAY
59234: PPUSH
59235: CALL_OW 310
59239: NOT
59240: AND
59241: PUSH
59242: LD_VAR 0 3
59246: PPUSH
59247: CALL_OW 313
59251: PUSH
59252: LD_INT 6
59254: EQUAL
59255: AND
59256: IFFALSE 59312
// begin tmp2 := UnitsInside ( j ) ;
59258: LD_ADDR_VAR 0 9
59262: PUSH
59263: LD_VAR 0 3
59267: PPUSH
59268: CALL_OW 313
59272: ST_TO_ADDR
// if tmp2 = 6 then
59273: LD_VAR 0 9
59277: PUSH
59278: LD_INT 6
59280: EQUAL
59281: IFFALSE 59312
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
59283: LD_VAR 0 9
59287: PUSH
59288: LD_INT 1
59290: ARRAY
59291: PPUSH
59292: LD_INT 112
59294: PPUSH
59295: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
59299: LD_VAR 0 9
59303: PUSH
59304: LD_INT 1
59306: ARRAY
59307: PPUSH
59308: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
59312: LD_EXP 87
59316: PUSH
59317: LD_VAR 0 2
59321: ARRAY
59322: PUSH
59323: LD_EXP 87
59327: PUSH
59328: LD_VAR 0 2
59332: ARRAY
59333: PUSH
59334: LD_INT 1
59336: ARRAY
59337: PPUSH
59338: CALL_OW 314
59342: NOT
59343: AND
59344: PUSH
59345: LD_EXP 87
59349: PUSH
59350: LD_VAR 0 2
59354: ARRAY
59355: PUSH
59356: LD_INT 1
59358: ARRAY
59359: PPUSH
59360: CALL_OW 310
59364: NOT
59365: AND
59366: IFFALSE 59392
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
59368: LD_EXP 87
59372: PUSH
59373: LD_VAR 0 2
59377: ARRAY
59378: PUSH
59379: LD_INT 1
59381: ARRAY
59382: PPUSH
59383: LD_VAR 0 3
59387: PPUSH
59388: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
59392: LD_EXP 87
59396: PUSH
59397: LD_VAR 0 2
59401: ARRAY
59402: PUSH
59403: LD_INT 1
59405: ARRAY
59406: PPUSH
59407: CALL_OW 310
59411: PUSH
59412: LD_EXP 87
59416: PUSH
59417: LD_VAR 0 2
59421: ARRAY
59422: PUSH
59423: LD_INT 1
59425: ARRAY
59426: PPUSH
59427: CALL_OW 310
59431: PPUSH
59432: CALL_OW 461
59436: PUSH
59437: LD_INT 3
59439: NONEQUAL
59440: AND
59441: IFFALSE 59462
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
59443: LD_EXP 87
59447: PUSH
59448: LD_VAR 0 2
59452: ARRAY
59453: PUSH
59454: LD_INT 1
59456: ARRAY
59457: PPUSH
59458: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
59462: LD_VAR 0 3
59466: PPUSH
59467: CALL_OW 461
59471: PUSH
59472: LD_INT 6
59474: EQUAL
59475: PUSH
59476: LD_VAR 0 6
59480: PUSH
59481: LD_INT 1
59483: GREATER
59484: AND
59485: IFFALSE 59625
// begin sci := [ ] ;
59487: LD_ADDR_VAR 0 8
59491: PUSH
59492: EMPTY
59493: ST_TO_ADDR
// for x in tmp diff j do
59494: LD_ADDR_VAR 0 7
59498: PUSH
59499: LD_VAR 0 6
59503: PUSH
59504: LD_VAR 0 3
59508: DIFF
59509: PUSH
59510: FOR_IN
59511: IFFALSE 59551
// begin if BuildingStatus ( x ) = bs_idle then
59513: LD_VAR 0 7
59517: PPUSH
59518: CALL_OW 461
59522: PUSH
59523: LD_INT 2
59525: EQUAL
59526: IFFALSE 59549
// sci := sci ^ UnitsInside ( x ) ;
59528: LD_ADDR_VAR 0 8
59532: PUSH
59533: LD_VAR 0 8
59537: PUSH
59538: LD_VAR 0 7
59542: PPUSH
59543: CALL_OW 313
59547: ADD
59548: ST_TO_ADDR
// end ;
59549: GO 59510
59551: POP
59552: POP
// if not sci then
59553: LD_VAR 0 8
59557: NOT
59558: IFFALSE 59562
// continue ;
59560: GO 58742
// for x in sci do
59562: LD_ADDR_VAR 0 7
59566: PUSH
59567: LD_VAR 0 8
59571: PUSH
59572: FOR_IN
59573: IFFALSE 59623
// if IsInUnit ( x ) and not HasTask ( x ) then
59575: LD_VAR 0 7
59579: PPUSH
59580: CALL_OW 310
59584: PUSH
59585: LD_VAR 0 7
59589: PPUSH
59590: CALL_OW 314
59594: NOT
59595: AND
59596: IFFALSE 59621
// begin ComExitBuilding ( x ) ;
59598: LD_VAR 0 7
59602: PPUSH
59603: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
59607: LD_VAR 0 7
59611: PPUSH
59612: LD_VAR 0 3
59616: PPUSH
59617: CALL_OW 180
// end ;
59621: GO 59572
59623: POP
59624: POP
// end ; end ;
59625: GO 58742
59627: POP
59628: POP
// end ;
59629: GO 58704
59631: POP
59632: POP
// end ;
59633: LD_VAR 0 1
59637: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
59638: LD_INT 0
59640: PPUSH
59641: PPUSH
59642: PPUSH
59643: PPUSH
59644: PPUSH
59645: PPUSH
// if not mc_bases then
59646: LD_EXP 57
59650: NOT
59651: IFFALSE 59655
// exit ;
59653: GO 59894
// for i = 1 to 8 do
59655: LD_ADDR_VAR 0 2
59659: PUSH
59660: DOUBLE
59661: LD_INT 1
59663: DEC
59664: ST_TO_ADDR
59665: LD_INT 8
59667: PUSH
59668: FOR_TO
59669: IFFALSE 59695
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
59671: LD_ADDR_EXP 84
59675: PUSH
59676: LD_EXP 84
59680: PPUSH
59681: LD_VAR 0 2
59685: PPUSH
59686: EMPTY
59687: PPUSH
59688: CALL_OW 1
59692: ST_TO_ADDR
59693: GO 59668
59695: POP
59696: POP
// tmp := [ ] ;
59697: LD_ADDR_VAR 0 5
59701: PUSH
59702: EMPTY
59703: ST_TO_ADDR
// for i = 1 to mc_sides do
59704: LD_ADDR_VAR 0 2
59708: PUSH
59709: DOUBLE
59710: LD_INT 1
59712: DEC
59713: ST_TO_ADDR
59714: LD_EXP 83
59718: PUSH
59719: FOR_TO
59720: IFFALSE 59778
// if not mc_sides [ i ] in tmp then
59722: LD_EXP 83
59726: PUSH
59727: LD_VAR 0 2
59731: ARRAY
59732: PUSH
59733: LD_VAR 0 5
59737: IN
59738: NOT
59739: IFFALSE 59776
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
59741: LD_ADDR_VAR 0 5
59745: PUSH
59746: LD_VAR 0 5
59750: PPUSH
59751: LD_VAR 0 5
59755: PUSH
59756: LD_INT 1
59758: PLUS
59759: PPUSH
59760: LD_EXP 83
59764: PUSH
59765: LD_VAR 0 2
59769: ARRAY
59770: PPUSH
59771: CALL_OW 2
59775: ST_TO_ADDR
59776: GO 59719
59778: POP
59779: POP
// if not tmp then
59780: LD_VAR 0 5
59784: NOT
59785: IFFALSE 59789
// exit ;
59787: GO 59894
// for j in tmp do
59789: LD_ADDR_VAR 0 3
59793: PUSH
59794: LD_VAR 0 5
59798: PUSH
59799: FOR_IN
59800: IFFALSE 59892
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
59802: LD_ADDR_VAR 0 6
59806: PUSH
59807: LD_INT 22
59809: PUSH
59810: LD_VAR 0 3
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PPUSH
59819: CALL_OW 69
59823: ST_TO_ADDR
// if not un then
59824: LD_VAR 0 6
59828: NOT
59829: IFFALSE 59833
// continue ;
59831: GO 59799
// nation := GetNation ( un [ 1 ] ) ;
59833: LD_ADDR_VAR 0 4
59837: PUSH
59838: LD_VAR 0 6
59842: PUSH
59843: LD_INT 1
59845: ARRAY
59846: PPUSH
59847: CALL_OW 248
59851: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
59852: LD_ADDR_EXP 84
59856: PUSH
59857: LD_EXP 84
59861: PPUSH
59862: LD_VAR 0 3
59866: PPUSH
59867: LD_VAR 0 3
59871: PPUSH
59872: LD_VAR 0 4
59876: PPUSH
59877: LD_INT 1
59879: PPUSH
59880: CALL 12743 0 3
59884: PPUSH
59885: CALL_OW 1
59889: ST_TO_ADDR
// end ;
59890: GO 59799
59892: POP
59893: POP
// end ;
59894: LD_VAR 0 1
59898: RET
// export function MC_InitSides ( ) ; var i ; begin
59899: LD_INT 0
59901: PPUSH
59902: PPUSH
// if not mc_bases then
59903: LD_EXP 57
59907: NOT
59908: IFFALSE 59912
// exit ;
59910: GO 59986
// for i = 1 to mc_bases do
59912: LD_ADDR_VAR 0 2
59916: PUSH
59917: DOUBLE
59918: LD_INT 1
59920: DEC
59921: ST_TO_ADDR
59922: LD_EXP 57
59926: PUSH
59927: FOR_TO
59928: IFFALSE 59984
// if mc_bases [ i ] then
59930: LD_EXP 57
59934: PUSH
59935: LD_VAR 0 2
59939: ARRAY
59940: IFFALSE 59982
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
59942: LD_ADDR_EXP 83
59946: PUSH
59947: LD_EXP 83
59951: PPUSH
59952: LD_VAR 0 2
59956: PPUSH
59957: LD_EXP 57
59961: PUSH
59962: LD_VAR 0 2
59966: ARRAY
59967: PUSH
59968: LD_INT 1
59970: ARRAY
59971: PPUSH
59972: CALL_OW 255
59976: PPUSH
59977: CALL_OW 1
59981: ST_TO_ADDR
59982: GO 59927
59984: POP
59985: POP
// end ;
59986: LD_VAR 0 1
59990: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
59991: LD_INT 0
59993: PPUSH
59994: PPUSH
59995: PPUSH
59996: PPUSH
59997: PPUSH
59998: PPUSH
59999: PPUSH
60000: PPUSH
// if not mc_bases then
60001: LD_EXP 57
60005: NOT
60006: IFFALSE 60010
// exit ;
60008: GO 60655
// for i = 1 to mc_bases do
60010: LD_ADDR_VAR 0 2
60014: PUSH
60015: DOUBLE
60016: LD_INT 1
60018: DEC
60019: ST_TO_ADDR
60020: LD_EXP 57
60024: PUSH
60025: FOR_TO
60026: IFFALSE 60653
// begin if not mc_bases [ i ] then
60028: LD_EXP 57
60032: PUSH
60033: LD_VAR 0 2
60037: ARRAY
60038: NOT
60039: IFFALSE 60043
// continue ;
60041: GO 60025
// if mc_scan [ i ] then
60043: LD_EXP 80
60047: PUSH
60048: LD_VAR 0 2
60052: ARRAY
60053: IFFALSE 60079
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
60055: LD_ADDR_EXP 69
60059: PUSH
60060: LD_EXP 69
60064: PPUSH
60065: LD_VAR 0 2
60069: PPUSH
60070: EMPTY
60071: PPUSH
60072: CALL_OW 1
60076: ST_TO_ADDR
// continue ;
60077: GO 60025
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
60079: LD_ADDR_VAR 0 5
60083: PUSH
60084: LD_EXP 57
60088: PUSH
60089: LD_VAR 0 2
60093: ARRAY
60094: PUSH
60095: LD_INT 1
60097: ARRAY
60098: PPUSH
60099: CALL_OW 255
60103: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
60104: LD_ADDR_VAR 0 6
60108: PUSH
60109: LD_EXP 57
60113: PUSH
60114: LD_VAR 0 2
60118: ARRAY
60119: PPUSH
60120: LD_INT 30
60122: PUSH
60123: LD_INT 3
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PPUSH
60130: CALL_OW 72
60134: ST_TO_ADDR
// if not fac then
60135: LD_VAR 0 6
60139: NOT
60140: IFFALSE 60191
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
60142: LD_ADDR_VAR 0 6
60146: PUSH
60147: LD_EXP 57
60151: PUSH
60152: LD_VAR 0 2
60156: ARRAY
60157: PPUSH
60158: LD_INT 2
60160: PUSH
60161: LD_INT 30
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 30
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: LIST
60185: PPUSH
60186: CALL_OW 72
60190: ST_TO_ADDR
// if not fac then
60191: LD_VAR 0 6
60195: NOT
60196: IFFALSE 60200
// continue ;
60198: GO 60025
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
60200: LD_ADDR_VAR 0 7
60204: PUSH
60205: LD_EXP 81
60209: PUSH
60210: LD_VAR 0 2
60214: ARRAY
60215: PPUSH
60216: LD_INT 22
60218: PUSH
60219: LD_VAR 0 5
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 21
60230: PUSH
60231: LD_INT 2
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 3
60240: PUSH
60241: LD_INT 24
60243: PUSH
60244: LD_INT 1000
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: LIST
60259: PPUSH
60260: CALL_OW 70
60264: PUSH
60265: LD_INT 22
60267: PUSH
60268: LD_VAR 0 5
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 91
60279: PUSH
60280: LD_VAR 0 6
60284: PUSH
60285: LD_INT 1
60287: ARRAY
60288: PUSH
60289: LD_INT 25
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 21
60299: PUSH
60300: LD_INT 2
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 3
60309: PUSH
60310: LD_INT 24
60312: PUSH
60313: LD_INT 1000
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: PPUSH
60330: CALL_OW 69
60334: UNION
60335: ST_TO_ADDR
// if not vehs then
60336: LD_VAR 0 7
60340: NOT
60341: IFFALSE 60367
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
60343: LD_ADDR_EXP 69
60347: PUSH
60348: LD_EXP 69
60352: PPUSH
60353: LD_VAR 0 2
60357: PPUSH
60358: EMPTY
60359: PPUSH
60360: CALL_OW 1
60364: ST_TO_ADDR
// continue ;
60365: GO 60025
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
60367: LD_ADDR_VAR 0 8
60371: PUSH
60372: LD_EXP 57
60376: PUSH
60377: LD_VAR 0 2
60381: ARRAY
60382: PPUSH
60383: LD_INT 30
60385: PUSH
60386: LD_INT 3
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PPUSH
60393: CALL_OW 72
60397: ST_TO_ADDR
// if tmp then
60398: LD_VAR 0 8
60402: IFFALSE 60505
// begin for j in tmp do
60404: LD_ADDR_VAR 0 3
60408: PUSH
60409: LD_VAR 0 8
60413: PUSH
60414: FOR_IN
60415: IFFALSE 60503
// for k in UnitsInside ( j ) do
60417: LD_ADDR_VAR 0 4
60421: PUSH
60422: LD_VAR 0 3
60426: PPUSH
60427: CALL_OW 313
60431: PUSH
60432: FOR_IN
60433: IFFALSE 60499
// if k then
60435: LD_VAR 0 4
60439: IFFALSE 60497
// if not k in mc_repair_vehicle [ i ] then
60441: LD_VAR 0 4
60445: PUSH
60446: LD_EXP 69
60450: PUSH
60451: LD_VAR 0 2
60455: ARRAY
60456: IN
60457: NOT
60458: IFFALSE 60497
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
60460: LD_ADDR_EXP 69
60464: PUSH
60465: LD_EXP 69
60469: PPUSH
60470: LD_VAR 0 2
60474: PPUSH
60475: LD_EXP 69
60479: PUSH
60480: LD_VAR 0 2
60484: ARRAY
60485: PUSH
60486: LD_VAR 0 4
60490: UNION
60491: PPUSH
60492: CALL_OW 1
60496: ST_TO_ADDR
60497: GO 60432
60499: POP
60500: POP
60501: GO 60414
60503: POP
60504: POP
// end ; if not mc_repair_vehicle [ i ] then
60505: LD_EXP 69
60509: PUSH
60510: LD_VAR 0 2
60514: ARRAY
60515: NOT
60516: IFFALSE 60520
// continue ;
60518: GO 60025
// for j in mc_repair_vehicle [ i ] do
60520: LD_ADDR_VAR 0 3
60524: PUSH
60525: LD_EXP 69
60529: PUSH
60530: LD_VAR 0 2
60534: ARRAY
60535: PUSH
60536: FOR_IN
60537: IFFALSE 60649
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
60539: LD_VAR 0 3
60543: PPUSH
60544: CALL_OW 311
60548: NOT
60549: PUSH
60550: LD_VAR 0 3
60554: PUSH
60555: LD_EXP 60
60559: PUSH
60560: LD_VAR 0 2
60564: ARRAY
60565: PUSH
60566: LD_INT 1
60568: ARRAY
60569: IN
60570: NOT
60571: AND
60572: PUSH
60573: LD_VAR 0 3
60577: PUSH
60578: LD_EXP 60
60582: PUSH
60583: LD_VAR 0 2
60587: ARRAY
60588: PUSH
60589: LD_INT 2
60591: ARRAY
60592: IN
60593: NOT
60594: AND
60595: IFFALSE 60647
// begin if IsInUnit ( j ) then
60597: LD_VAR 0 3
60601: PPUSH
60602: CALL_OW 310
60606: IFFALSE 60617
// ComExitBuilding ( j ) ;
60608: LD_VAR 0 3
60612: PPUSH
60613: CALL_OW 122
// if not HasTask ( j ) then
60617: LD_VAR 0 3
60621: PPUSH
60622: CALL_OW 314
60626: NOT
60627: IFFALSE 60647
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
60629: LD_VAR 0 3
60633: PPUSH
60634: LD_VAR 0 7
60638: PUSH
60639: LD_INT 1
60641: ARRAY
60642: PPUSH
60643: CALL_OW 189
// end ; end ;
60647: GO 60536
60649: POP
60650: POP
// end ;
60651: GO 60025
60653: POP
60654: POP
// end ;
60655: LD_VAR 0 1
60659: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , danger_at_area , side ; begin
60660: LD_INT 0
60662: PPUSH
60663: PPUSH
60664: PPUSH
60665: PPUSH
60666: PPUSH
60667: PPUSH
60668: PPUSH
60669: PPUSH
60670: PPUSH
60671: PPUSH
// if not mc_bases then
60672: LD_EXP 57
60676: NOT
60677: IFFALSE 60681
// exit ;
60679: GO 61300
// for i = 1 to mc_bases do
60681: LD_ADDR_VAR 0 2
60685: PUSH
60686: DOUBLE
60687: LD_INT 1
60689: DEC
60690: ST_TO_ADDR
60691: LD_EXP 57
60695: PUSH
60696: FOR_TO
60697: IFFALSE 61298
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
60699: LD_EXP 85
60703: PUSH
60704: LD_VAR 0 2
60708: ARRAY
60709: NOT
60710: PUSH
60711: LD_EXP 60
60715: PUSH
60716: LD_VAR 0 2
60720: ARRAY
60721: PUSH
60722: LD_INT 1
60724: ARRAY
60725: OR
60726: PUSH
60727: LD_EXP 60
60731: PUSH
60732: LD_VAR 0 2
60736: ARRAY
60737: PUSH
60738: LD_INT 2
60740: ARRAY
60741: OR
60742: PUSH
60743: LD_EXP 83
60747: PUSH
60748: LD_VAR 0 2
60752: ARRAY
60753: PPUSH
60754: LD_INT 1
60756: PPUSH
60757: CALL_OW 325
60761: NOT
60762: OR
60763: PUSH
60764: LD_EXP 80
60768: PUSH
60769: LD_VAR 0 2
60773: ARRAY
60774: OR
60775: IFFALSE 60779
// continue ;
60777: GO 60696
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
60779: LD_ADDR_VAR 0 8
60783: PUSH
60784: LD_EXP 57
60788: PUSH
60789: LD_VAR 0 2
60793: ARRAY
60794: PPUSH
60795: LD_INT 25
60797: PUSH
60798: LD_INT 4
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 50
60807: PUSH
60808: EMPTY
60809: LIST
60810: PUSH
60811: LD_INT 3
60813: PUSH
60814: LD_INT 60
60816: PUSH
60817: EMPTY
60818: LIST
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: LIST
60828: PPUSH
60829: CALL_OW 72
60833: PUSH
60834: LD_EXP 61
60838: PUSH
60839: LD_VAR 0 2
60843: ARRAY
60844: DIFF
60845: ST_TO_ADDR
// if not tmp then
60846: LD_VAR 0 8
60850: NOT
60851: IFFALSE 60855
// continue ;
60853: GO 60696
// side := GetSide ( tmp [ 1 ] ) ;
60855: LD_ADDR_VAR 0 10
60859: PUSH
60860: LD_VAR 0 8
60864: PUSH
60865: LD_INT 1
60867: ARRAY
60868: PPUSH
60869: CALL_OW 255
60873: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
60874: LD_ADDR_VAR 0 7
60878: PUSH
60879: LD_EXP 85
60883: PUSH
60884: LD_VAR 0 2
60888: ARRAY
60889: PPUSH
60890: LD_INT 22
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 25
60902: PUSH
60903: LD_INT 12
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PPUSH
60914: CALL_OW 70
60918: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
60919: LD_ADDR_VAR 0 9
60923: PUSH
60924: LD_EXP 85
60928: PUSH
60929: LD_VAR 0 2
60933: ARRAY
60934: PPUSH
60935: LD_INT 81
60937: PUSH
60938: LD_VAR 0 10
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PPUSH
60947: CALL_OW 70
60951: ST_TO_ADDR
// if not apes or danger_at_area then
60952: LD_VAR 0 7
60956: NOT
60957: PUSH
60958: LD_VAR 0 9
60962: OR
60963: IFFALSE 61013
// begin if mc_taming [ i ] then
60965: LD_EXP 88
60969: PUSH
60970: LD_VAR 0 2
60974: ARRAY
60975: IFFALSE 61011
// begin MC_Reset ( i , 121 ) ;
60977: LD_VAR 0 2
60981: PPUSH
60982: LD_INT 121
60984: PPUSH
60985: CALL 51805 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
60989: LD_ADDR_EXP 88
60993: PUSH
60994: LD_EXP 88
60998: PPUSH
60999: LD_VAR 0 2
61003: PPUSH
61004: EMPTY
61005: PPUSH
61006: CALL_OW 1
61010: ST_TO_ADDR
// end ; continue ;
61011: GO 60696
// end ; for j in tmp do
61013: LD_ADDR_VAR 0 3
61017: PUSH
61018: LD_VAR 0 8
61022: PUSH
61023: FOR_IN
61024: IFFALSE 61294
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
61026: LD_VAR 0 3
61030: PUSH
61031: LD_EXP 88
61035: PUSH
61036: LD_VAR 0 2
61040: ARRAY
61041: IN
61042: NOT
61043: PUSH
61044: LD_EXP 88
61048: PUSH
61049: LD_VAR 0 2
61053: ARRAY
61054: PUSH
61055: LD_INT 3
61057: LESS
61058: AND
61059: IFFALSE 61117
// begin SetTag ( j , 121 ) ;
61061: LD_VAR 0 3
61065: PPUSH
61066: LD_INT 121
61068: PPUSH
61069: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
61073: LD_ADDR_EXP 88
61077: PUSH
61078: LD_EXP 88
61082: PPUSH
61083: LD_VAR 0 2
61087: PUSH
61088: LD_EXP 88
61092: PUSH
61093: LD_VAR 0 2
61097: ARRAY
61098: PUSH
61099: LD_INT 1
61101: PLUS
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PPUSH
61107: LD_VAR 0 3
61111: PPUSH
61112: CALL 19309 0 3
61116: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
61117: LD_VAR 0 3
61121: PUSH
61122: LD_EXP 88
61126: PUSH
61127: LD_VAR 0 2
61131: ARRAY
61132: IN
61133: IFFALSE 61292
// begin if IsInUnit ( j ) then
61135: LD_VAR 0 3
61139: PPUSH
61140: CALL_OW 310
61144: IFFALSE 61155
// ComExitBuilding ( j ) ;
61146: LD_VAR 0 3
61150: PPUSH
61151: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
61155: LD_ADDR_VAR 0 6
61159: PUSH
61160: LD_VAR 0 7
61164: PPUSH
61165: LD_VAR 0 3
61169: PPUSH
61170: CALL_OW 74
61174: ST_TO_ADDR
// if not ape then
61175: LD_VAR 0 6
61179: NOT
61180: IFFALSE 61184
// break ;
61182: GO 61294
// x := GetX ( ape ) ;
61184: LD_ADDR_VAR 0 4
61188: PUSH
61189: LD_VAR 0 6
61193: PPUSH
61194: CALL_OW 250
61198: ST_TO_ADDR
// y := GetY ( ape ) ;
61199: LD_ADDR_VAR 0 5
61203: PUSH
61204: LD_VAR 0 6
61208: PPUSH
61209: CALL_OW 251
61213: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
61214: LD_VAR 0 4
61218: PPUSH
61219: LD_VAR 0 5
61223: PPUSH
61224: CALL_OW 488
61228: NOT
61229: PUSH
61230: LD_VAR 0 10
61234: PPUSH
61235: LD_VAR 0 4
61239: PPUSH
61240: LD_VAR 0 5
61244: PPUSH
61245: LD_INT 20
61247: PPUSH
61248: CALL 19803 0 4
61252: PUSH
61253: LD_INT 4
61255: ARRAY
61256: OR
61257: IFFALSE 61261
// break ;
61259: GO 61294
// if not HasTask ( j ) then
61261: LD_VAR 0 3
61265: PPUSH
61266: CALL_OW 314
61270: NOT
61271: IFFALSE 61292
// ComTameXY ( j , x , y ) ;
61273: LD_VAR 0 3
61277: PPUSH
61278: LD_VAR 0 4
61282: PPUSH
61283: LD_VAR 0 5
61287: PPUSH
61288: CALL_OW 131
// end ; end ;
61292: GO 61023
61294: POP
61295: POP
// end ;
61296: GO 60696
61298: POP
61299: POP
// end ;
61300: LD_VAR 0 1
61304: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
61305: LD_INT 0
61307: PPUSH
61308: PPUSH
61309: PPUSH
61310: PPUSH
61311: PPUSH
61312: PPUSH
61313: PPUSH
61314: PPUSH
// if not mc_bases then
61315: LD_EXP 57
61319: NOT
61320: IFFALSE 61324
// exit ;
61322: GO 61934
// for i = 1 to mc_bases do
61324: LD_ADDR_VAR 0 2
61328: PUSH
61329: DOUBLE
61330: LD_INT 1
61332: DEC
61333: ST_TO_ADDR
61334: LD_EXP 57
61338: PUSH
61339: FOR_TO
61340: IFFALSE 61932
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
61342: LD_EXP 86
61346: PUSH
61347: LD_VAR 0 2
61351: ARRAY
61352: NOT
61353: PUSH
61354: LD_EXP 86
61358: PUSH
61359: LD_VAR 0 2
61363: ARRAY
61364: PPUSH
61365: LD_INT 25
61367: PUSH
61368: LD_INT 12
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PPUSH
61375: CALL_OW 72
61379: NOT
61380: OR
61381: IFFALSE 61385
// continue ;
61383: GO 61339
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
61385: LD_ADDR_VAR 0 5
61389: PUSH
61390: LD_EXP 86
61394: PUSH
61395: LD_VAR 0 2
61399: ARRAY
61400: PUSH
61401: LD_INT 1
61403: ARRAY
61404: PPUSH
61405: CALL_OW 255
61409: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
61410: LD_VAR 0 5
61414: PPUSH
61415: LD_INT 2
61417: PPUSH
61418: CALL_OW 325
61422: IFFALSE 61667
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
61424: LD_ADDR_VAR 0 4
61428: PUSH
61429: LD_EXP 86
61433: PUSH
61434: LD_VAR 0 2
61438: ARRAY
61439: PPUSH
61440: LD_INT 25
61442: PUSH
61443: LD_INT 16
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PPUSH
61450: CALL_OW 72
61454: ST_TO_ADDR
// if tmp < 6 then
61455: LD_VAR 0 4
61459: PUSH
61460: LD_INT 6
61462: LESS
61463: IFFALSE 61667
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
61465: LD_ADDR_VAR 0 6
61469: PUSH
61470: LD_EXP 57
61474: PUSH
61475: LD_VAR 0 2
61479: ARRAY
61480: PPUSH
61481: LD_INT 2
61483: PUSH
61484: LD_INT 30
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 30
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: LIST
61508: PPUSH
61509: CALL_OW 72
61513: ST_TO_ADDR
// if depot then
61514: LD_VAR 0 6
61518: IFFALSE 61667
// begin for j in depot do
61520: LD_ADDR_VAR 0 3
61524: PUSH
61525: LD_VAR 0 6
61529: PUSH
61530: FOR_IN
61531: IFFALSE 61562
// begin if UnitsInside ( j ) < 6 then
61533: LD_VAR 0 3
61537: PPUSH
61538: CALL_OW 313
61542: PUSH
61543: LD_INT 6
61545: LESS
61546: IFFALSE 61560
// begin selected := j ;
61548: LD_ADDR_VAR 0 7
61552: PUSH
61553: LD_VAR 0 3
61557: ST_TO_ADDR
// break ;
61558: GO 61562
// end ; end ;
61560: GO 61530
61562: POP
61563: POP
// if selected then
61564: LD_VAR 0 7
61568: IFFALSE 61667
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
61570: LD_ADDR_VAR 0 3
61574: PUSH
61575: LD_EXP 86
61579: PUSH
61580: LD_VAR 0 2
61584: ARRAY
61585: PPUSH
61586: LD_INT 25
61588: PUSH
61589: LD_INT 12
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PPUSH
61596: CALL_OW 72
61600: PUSH
61601: FOR_IN
61602: IFFALSE 61665
// if not HasTask ( j ) then
61604: LD_VAR 0 3
61608: PPUSH
61609: CALL_OW 314
61613: NOT
61614: IFFALSE 61663
// begin if not IsInUnit ( j ) then
61616: LD_VAR 0 3
61620: PPUSH
61621: CALL_OW 310
61625: NOT
61626: IFFALSE 61642
// ComEnterUnit ( j , selected ) ;
61628: LD_VAR 0 3
61632: PPUSH
61633: LD_VAR 0 7
61637: PPUSH
61638: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
61642: LD_VAR 0 3
61646: PPUSH
61647: LD_INT 16
61649: PPUSH
61650: CALL_OW 183
// AddComExitBuilding ( j ) ;
61654: LD_VAR 0 3
61658: PPUSH
61659: CALL_OW 182
// end ;
61663: GO 61601
61665: POP
61666: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
61667: LD_VAR 0 5
61671: PPUSH
61672: LD_INT 11
61674: PPUSH
61675: CALL_OW 325
61679: IFFALSE 61930
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
61681: LD_ADDR_VAR 0 4
61685: PUSH
61686: LD_EXP 86
61690: PUSH
61691: LD_VAR 0 2
61695: ARRAY
61696: PPUSH
61697: LD_INT 25
61699: PUSH
61700: LD_INT 16
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PPUSH
61707: CALL_OW 72
61711: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
61712: LD_VAR 0 4
61716: PUSH
61717: LD_INT 6
61719: GREATEREQUAL
61720: PUSH
61721: LD_VAR 0 5
61725: PPUSH
61726: LD_INT 2
61728: PPUSH
61729: CALL_OW 325
61733: NOT
61734: OR
61735: IFFALSE 61930
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
61737: LD_ADDR_VAR 0 8
61741: PUSH
61742: LD_EXP 57
61746: PUSH
61747: LD_VAR 0 2
61751: ARRAY
61752: PPUSH
61753: LD_INT 2
61755: PUSH
61756: LD_INT 30
61758: PUSH
61759: LD_INT 4
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 30
61768: PUSH
61769: LD_INT 5
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: LIST
61780: PPUSH
61781: CALL_OW 72
61785: ST_TO_ADDR
// if barracks then
61786: LD_VAR 0 8
61790: IFFALSE 61930
// begin for j in barracks do
61792: LD_ADDR_VAR 0 3
61796: PUSH
61797: LD_VAR 0 8
61801: PUSH
61802: FOR_IN
61803: IFFALSE 61834
// begin if UnitsInside ( j ) < 6 then
61805: LD_VAR 0 3
61809: PPUSH
61810: CALL_OW 313
61814: PUSH
61815: LD_INT 6
61817: LESS
61818: IFFALSE 61832
// begin selected := j ;
61820: LD_ADDR_VAR 0 7
61824: PUSH
61825: LD_VAR 0 3
61829: ST_TO_ADDR
// break ;
61830: GO 61834
// end ; end ;
61832: GO 61802
61834: POP
61835: POP
// if selected then
61836: LD_VAR 0 7
61840: IFFALSE 61930
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
61842: LD_ADDR_VAR 0 3
61846: PUSH
61847: LD_EXP 86
61851: PUSH
61852: LD_VAR 0 2
61856: ARRAY
61857: PPUSH
61858: LD_INT 25
61860: PUSH
61861: LD_INT 12
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PPUSH
61868: CALL_OW 72
61872: PUSH
61873: FOR_IN
61874: IFFALSE 61928
// if not IsInUnit ( j ) and not HasTask ( j ) then
61876: LD_VAR 0 3
61880: PPUSH
61881: CALL_OW 310
61885: NOT
61886: PUSH
61887: LD_VAR 0 3
61891: PPUSH
61892: CALL_OW 314
61896: NOT
61897: AND
61898: IFFALSE 61926
// begin ComEnterUnit ( j , selected ) ;
61900: LD_VAR 0 3
61904: PPUSH
61905: LD_VAR 0 7
61909: PPUSH
61910: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
61914: LD_VAR 0 3
61918: PPUSH
61919: LD_INT 15
61921: PPUSH
61922: CALL_OW 183
// end ;
61926: GO 61873
61928: POP
61929: POP
// end ; end ; end ; end ; end ;
61930: GO 61339
61932: POP
61933: POP
// end ;
61934: LD_VAR 0 1
61938: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
61939: LD_INT 0
61941: PPUSH
61942: PPUSH
61943: PPUSH
61944: PPUSH
// if not mc_bases then
61945: LD_EXP 57
61949: NOT
61950: IFFALSE 61954
// exit ;
61952: GO 62132
// for i = 1 to mc_bases do
61954: LD_ADDR_VAR 0 2
61958: PUSH
61959: DOUBLE
61960: LD_INT 1
61962: DEC
61963: ST_TO_ADDR
61964: LD_EXP 57
61968: PUSH
61969: FOR_TO
61970: IFFALSE 62130
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
61972: LD_ADDR_VAR 0 4
61976: PUSH
61977: LD_EXP 57
61981: PUSH
61982: LD_VAR 0 2
61986: ARRAY
61987: PPUSH
61988: LD_INT 25
61990: PUSH
61991: LD_INT 9
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PPUSH
61998: CALL_OW 72
62002: ST_TO_ADDR
// if not tmp then
62003: LD_VAR 0 4
62007: NOT
62008: IFFALSE 62012
// continue ;
62010: GO 61969
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
62012: LD_EXP 83
62016: PUSH
62017: LD_VAR 0 2
62021: ARRAY
62022: PPUSH
62023: LD_INT 29
62025: PPUSH
62026: CALL_OW 325
62030: NOT
62031: PUSH
62032: LD_EXP 83
62036: PUSH
62037: LD_VAR 0 2
62041: ARRAY
62042: PPUSH
62043: LD_INT 28
62045: PPUSH
62046: CALL_OW 325
62050: NOT
62051: AND
62052: IFFALSE 62056
// continue ;
62054: GO 61969
// for j in tmp do
62056: LD_ADDR_VAR 0 3
62060: PUSH
62061: LD_VAR 0 4
62065: PUSH
62066: FOR_IN
62067: IFFALSE 62126
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
62069: LD_VAR 0 3
62073: PUSH
62074: LD_EXP 60
62078: PUSH
62079: LD_VAR 0 2
62083: ARRAY
62084: PUSH
62085: LD_INT 1
62087: ARRAY
62088: IN
62089: NOT
62090: PUSH
62091: LD_VAR 0 3
62095: PUSH
62096: LD_EXP 60
62100: PUSH
62101: LD_VAR 0 2
62105: ARRAY
62106: PUSH
62107: LD_INT 2
62109: ARRAY
62110: IN
62111: NOT
62112: AND
62113: IFFALSE 62124
// ComSpaceTimeShoot ( j ) ;
62115: LD_VAR 0 3
62119: PPUSH
62120: CALL 13471 0 1
62124: GO 62066
62126: POP
62127: POP
// end ;
62128: GO 61969
62130: POP
62131: POP
// end ;
62132: LD_VAR 0 1
62136: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
62137: LD_INT 0
62139: PPUSH
62140: PPUSH
62141: PPUSH
62142: PPUSH
// if not mc_bases then
62143: LD_EXP 57
62147: NOT
62148: IFFALSE 62152
// exit ;
62150: GO 62174
// for i = 1 to mc_bases do
62152: LD_ADDR_VAR 0 2
62156: PUSH
62157: DOUBLE
62158: LD_INT 1
62160: DEC
62161: ST_TO_ADDR
62162: LD_EXP 57
62166: PUSH
62167: FOR_TO
62168: IFFALSE 62172
// begin end ;
62170: GO 62167
62172: POP
62173: POP
// end ;
62174: LD_VAR 0 1
62178: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
62179: LD_INT 0
62181: PPUSH
62182: PPUSH
62183: PPUSH
62184: PPUSH
62185: PPUSH
62186: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
62187: LD_VAR 0 1
62191: NOT
62192: PUSH
62193: LD_VAR 0 2
62197: NOT
62198: OR
62199: PUSH
62200: LD_VAR 0 3
62204: NOT
62205: OR
62206: PUSH
62207: LD_VAR 0 4
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: LD_INT 2
62217: PUSH
62218: LD_INT 3
62220: PUSH
62221: LD_INT 4
62223: PUSH
62224: LD_INT 5
62226: PUSH
62227: LD_INT 8
62229: PUSH
62230: LD_INT 9
62232: PUSH
62233: LD_INT 15
62235: PUSH
62236: LD_INT 16
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: IN
62250: NOT
62251: OR
62252: IFFALSE 62256
// exit ;
62254: GO 63156
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
62256: LD_ADDR_VAR 0 2
62260: PUSH
62261: LD_VAR 0 2
62265: PPUSH
62266: LD_INT 21
62268: PUSH
62269: LD_INT 3
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 24
62278: PUSH
62279: LD_INT 250
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PPUSH
62290: CALL_OW 72
62294: ST_TO_ADDR
// case class of 1 , 15 :
62295: LD_VAR 0 4
62299: PUSH
62300: LD_INT 1
62302: DOUBLE
62303: EQUAL
62304: IFTRUE 62314
62306: LD_INT 15
62308: DOUBLE
62309: EQUAL
62310: IFTRUE 62314
62312: GO 62399
62314: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
62315: LD_ADDR_VAR 0 8
62319: PUSH
62320: LD_VAR 0 2
62324: PPUSH
62325: LD_INT 2
62327: PUSH
62328: LD_INT 30
62330: PUSH
62331: LD_INT 32
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 30
62340: PUSH
62341: LD_INT 31
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: PPUSH
62353: CALL_OW 72
62357: PUSH
62358: LD_VAR 0 2
62362: PPUSH
62363: LD_INT 2
62365: PUSH
62366: LD_INT 30
62368: PUSH
62369: LD_INT 4
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 30
62378: PUSH
62379: LD_INT 5
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: LIST
62390: PPUSH
62391: CALL_OW 72
62395: ADD
62396: ST_TO_ADDR
62397: GO 62645
62399: LD_INT 2
62401: DOUBLE
62402: EQUAL
62403: IFTRUE 62413
62405: LD_INT 16
62407: DOUBLE
62408: EQUAL
62409: IFTRUE 62413
62411: GO 62459
62413: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
62414: LD_ADDR_VAR 0 8
62418: PUSH
62419: LD_VAR 0 2
62423: PPUSH
62424: LD_INT 2
62426: PUSH
62427: LD_INT 30
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 30
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: LIST
62451: PPUSH
62452: CALL_OW 72
62456: ST_TO_ADDR
62457: GO 62645
62459: LD_INT 3
62461: DOUBLE
62462: EQUAL
62463: IFTRUE 62467
62465: GO 62513
62467: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
62468: LD_ADDR_VAR 0 8
62472: PUSH
62473: LD_VAR 0 2
62477: PPUSH
62478: LD_INT 2
62480: PUSH
62481: LD_INT 30
62483: PUSH
62484: LD_INT 2
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 30
62493: PUSH
62494: LD_INT 3
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: LIST
62505: PPUSH
62506: CALL_OW 72
62510: ST_TO_ADDR
62511: GO 62645
62513: LD_INT 4
62515: DOUBLE
62516: EQUAL
62517: IFTRUE 62521
62519: GO 62578
62521: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
62522: LD_ADDR_VAR 0 8
62526: PUSH
62527: LD_VAR 0 2
62531: PPUSH
62532: LD_INT 2
62534: PUSH
62535: LD_INT 30
62537: PUSH
62538: LD_INT 6
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 30
62547: PUSH
62548: LD_INT 7
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 30
62557: PUSH
62558: LD_INT 8
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: PPUSH
62571: CALL_OW 72
62575: ST_TO_ADDR
62576: GO 62645
62578: LD_INT 5
62580: DOUBLE
62581: EQUAL
62582: IFTRUE 62598
62584: LD_INT 8
62586: DOUBLE
62587: EQUAL
62588: IFTRUE 62598
62590: LD_INT 9
62592: DOUBLE
62593: EQUAL
62594: IFTRUE 62598
62596: GO 62644
62598: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
62599: LD_ADDR_VAR 0 8
62603: PUSH
62604: LD_VAR 0 2
62608: PPUSH
62609: LD_INT 2
62611: PUSH
62612: LD_INT 30
62614: PUSH
62615: LD_INT 4
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 30
62624: PUSH
62625: LD_INT 5
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: LIST
62636: PPUSH
62637: CALL_OW 72
62641: ST_TO_ADDR
62642: GO 62645
62644: POP
// if not tmp then
62645: LD_VAR 0 8
62649: NOT
62650: IFFALSE 62654
// exit ;
62652: GO 63156
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
62654: LD_VAR 0 4
62658: PUSH
62659: LD_INT 1
62661: PUSH
62662: LD_INT 15
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: IN
62669: PUSH
62670: LD_EXP 66
62674: PUSH
62675: LD_VAR 0 1
62679: ARRAY
62680: AND
62681: IFFALSE 62837
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
62683: LD_ADDR_VAR 0 9
62687: PUSH
62688: LD_EXP 66
62692: PUSH
62693: LD_VAR 0 1
62697: ARRAY
62698: PUSH
62699: LD_INT 1
62701: ARRAY
62702: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
62703: LD_VAR 0 9
62707: PUSH
62708: LD_EXP 67
62712: PUSH
62713: LD_VAR 0 1
62717: ARRAY
62718: IN
62719: NOT
62720: IFFALSE 62835
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
62722: LD_ADDR_EXP 67
62726: PUSH
62727: LD_EXP 67
62731: PPUSH
62732: LD_VAR 0 1
62736: PUSH
62737: LD_EXP 67
62741: PUSH
62742: LD_VAR 0 1
62746: ARRAY
62747: PUSH
62748: LD_INT 1
62750: PLUS
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PPUSH
62756: LD_VAR 0 9
62760: PPUSH
62761: CALL 19309 0 3
62765: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
62766: LD_ADDR_EXP 66
62770: PUSH
62771: LD_EXP 66
62775: PPUSH
62776: LD_VAR 0 1
62780: PPUSH
62781: LD_EXP 66
62785: PUSH
62786: LD_VAR 0 1
62790: ARRAY
62791: PUSH
62792: LD_VAR 0 9
62796: DIFF
62797: PPUSH
62798: CALL_OW 1
62802: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
62803: LD_VAR 0 3
62807: PPUSH
62808: LD_EXP 67
62812: PUSH
62813: LD_VAR 0 1
62817: ARRAY
62818: PUSH
62819: LD_EXP 67
62823: PUSH
62824: LD_VAR 0 1
62828: ARRAY
62829: ARRAY
62830: PPUSH
62831: CALL_OW 120
// end ; exit ;
62835: GO 63156
// end ; if tmp > 1 then
62837: LD_VAR 0 8
62841: PUSH
62842: LD_INT 1
62844: GREATER
62845: IFFALSE 62949
// for i = 2 to tmp do
62847: LD_ADDR_VAR 0 6
62851: PUSH
62852: DOUBLE
62853: LD_INT 2
62855: DEC
62856: ST_TO_ADDR
62857: LD_VAR 0 8
62861: PUSH
62862: FOR_TO
62863: IFFALSE 62947
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
62865: LD_VAR 0 8
62869: PUSH
62870: LD_VAR 0 6
62874: ARRAY
62875: PPUSH
62876: CALL_OW 461
62880: PUSH
62881: LD_INT 6
62883: EQUAL
62884: IFFALSE 62945
// begin x := tmp [ i ] ;
62886: LD_ADDR_VAR 0 9
62890: PUSH
62891: LD_VAR 0 8
62895: PUSH
62896: LD_VAR 0 6
62900: ARRAY
62901: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
62902: LD_ADDR_VAR 0 8
62906: PUSH
62907: LD_VAR 0 8
62911: PPUSH
62912: LD_VAR 0 6
62916: PPUSH
62917: CALL_OW 3
62921: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
62922: LD_ADDR_VAR 0 8
62926: PUSH
62927: LD_VAR 0 8
62931: PPUSH
62932: LD_INT 1
62934: PPUSH
62935: LD_VAR 0 9
62939: PPUSH
62940: CALL_OW 2
62944: ST_TO_ADDR
// end ;
62945: GO 62862
62947: POP
62948: POP
// for i in tmp do
62949: LD_ADDR_VAR 0 6
62953: PUSH
62954: LD_VAR 0 8
62958: PUSH
62959: FOR_IN
62960: IFFALSE 63029
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
62962: LD_VAR 0 6
62966: PPUSH
62967: CALL_OW 313
62971: PUSH
62972: LD_INT 6
62974: LESS
62975: PUSH
62976: LD_VAR 0 6
62980: PPUSH
62981: CALL_OW 266
62985: PUSH
62986: LD_INT 31
62988: PUSH
62989: LD_INT 32
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: IN
62996: NOT
62997: AND
62998: PUSH
62999: LD_VAR 0 6
63003: PPUSH
63004: CALL_OW 313
63008: PUSH
63009: LD_INT 0
63011: EQUAL
63012: OR
63013: IFFALSE 63027
// begin j := i ;
63015: LD_ADDR_VAR 0 7
63019: PUSH
63020: LD_VAR 0 6
63024: ST_TO_ADDR
// break ;
63025: GO 63029
// end ; end ;
63027: GO 62959
63029: POP
63030: POP
// if j then
63031: LD_VAR 0 7
63035: IFFALSE 63053
// ComEnterUnit ( unit , j ) else
63037: LD_VAR 0 3
63041: PPUSH
63042: LD_VAR 0 7
63046: PPUSH
63047: CALL_OW 120
63051: GO 63156
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63053: LD_ADDR_VAR 0 10
63057: PUSH
63058: LD_VAR 0 2
63062: PPUSH
63063: LD_INT 2
63065: PUSH
63066: LD_INT 30
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 30
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: LIST
63090: PPUSH
63091: CALL_OW 72
63095: ST_TO_ADDR
// if depot then
63096: LD_VAR 0 10
63100: IFFALSE 63156
// begin depot := NearestUnitToUnit ( depot , unit ) ;
63102: LD_ADDR_VAR 0 10
63106: PUSH
63107: LD_VAR 0 10
63111: PPUSH
63112: LD_VAR 0 3
63116: PPUSH
63117: CALL_OW 74
63121: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
63122: LD_VAR 0 3
63126: PPUSH
63127: LD_VAR 0 10
63131: PPUSH
63132: CALL_OW 296
63136: PUSH
63137: LD_INT 10
63139: GREATER
63140: IFFALSE 63156
// ComStandNearbyBuilding ( unit , depot ) ;
63142: LD_VAR 0 3
63146: PPUSH
63147: LD_VAR 0 10
63151: PPUSH
63152: CALL 14088 0 2
// end ; end ; end ;
63156: LD_VAR 0 5
63160: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
63161: LD_INT 0
63163: PPUSH
63164: PPUSH
63165: PPUSH
63166: PPUSH
// if not mc_bases then
63167: LD_EXP 57
63171: NOT
63172: IFFALSE 63176
// exit ;
63174: GO 63415
// for i = 1 to mc_bases do
63176: LD_ADDR_VAR 0 2
63180: PUSH
63181: DOUBLE
63182: LD_INT 1
63184: DEC
63185: ST_TO_ADDR
63186: LD_EXP 57
63190: PUSH
63191: FOR_TO
63192: IFFALSE 63413
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
63194: LD_ADDR_VAR 0 4
63198: PUSH
63199: LD_EXP 57
63203: PUSH
63204: LD_VAR 0 2
63208: ARRAY
63209: PPUSH
63210: LD_INT 21
63212: PUSH
63213: LD_INT 1
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PPUSH
63220: CALL_OW 72
63224: PUSH
63225: LD_EXP 86
63229: PUSH
63230: LD_VAR 0 2
63234: ARRAY
63235: UNION
63236: ST_TO_ADDR
// if not tmp then
63237: LD_VAR 0 4
63241: NOT
63242: IFFALSE 63246
// continue ;
63244: GO 63191
// for j in tmp do
63246: LD_ADDR_VAR 0 3
63250: PUSH
63251: LD_VAR 0 4
63255: PUSH
63256: FOR_IN
63257: IFFALSE 63409
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
63259: LD_VAR 0 3
63263: PPUSH
63264: CALL_OW 110
63268: NOT
63269: PUSH
63270: LD_VAR 0 3
63274: PPUSH
63275: CALL_OW 314
63279: NOT
63280: AND
63281: PUSH
63282: LD_VAR 0 3
63286: PPUSH
63287: CALL_OW 311
63291: NOT
63292: AND
63293: PUSH
63294: LD_VAR 0 3
63298: PPUSH
63299: CALL_OW 310
63303: NOT
63304: AND
63305: PUSH
63306: LD_VAR 0 3
63310: PUSH
63311: LD_EXP 60
63315: PUSH
63316: LD_VAR 0 2
63320: ARRAY
63321: PUSH
63322: LD_INT 1
63324: ARRAY
63325: IN
63326: NOT
63327: AND
63328: PUSH
63329: LD_VAR 0 3
63333: PUSH
63334: LD_EXP 60
63338: PUSH
63339: LD_VAR 0 2
63343: ARRAY
63344: PUSH
63345: LD_INT 2
63347: ARRAY
63348: IN
63349: NOT
63350: AND
63351: PUSH
63352: LD_VAR 0 3
63356: PUSH
63357: LD_EXP 69
63361: PUSH
63362: LD_VAR 0 2
63366: ARRAY
63367: IN
63368: NOT
63369: AND
63370: IFFALSE 63407
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
63372: LD_VAR 0 2
63376: PPUSH
63377: LD_EXP 57
63381: PUSH
63382: LD_VAR 0 2
63386: ARRAY
63387: PPUSH
63388: LD_VAR 0 3
63392: PPUSH
63393: LD_VAR 0 3
63397: PPUSH
63398: CALL_OW 257
63402: PPUSH
63403: CALL 62179 0 4
// end ;
63407: GO 63256
63409: POP
63410: POP
// end ;
63411: GO 63191
63413: POP
63414: POP
// end ;
63415: LD_VAR 0 1
63419: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
63420: LD_INT 0
63422: PPUSH
63423: PPUSH
63424: PPUSH
63425: PPUSH
63426: PPUSH
63427: PPUSH
// if not mc_bases [ base ] then
63428: LD_EXP 57
63432: PUSH
63433: LD_VAR 0 1
63437: ARRAY
63438: NOT
63439: IFFALSE 63443
// exit ;
63441: GO 63625
// tmp := [ ] ;
63443: LD_ADDR_VAR 0 6
63447: PUSH
63448: EMPTY
63449: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
63450: LD_ADDR_VAR 0 7
63454: PUSH
63455: LD_VAR 0 3
63459: PPUSH
63460: LD_INT 0
63462: PPUSH
63463: CALL_OW 517
63467: ST_TO_ADDR
// if not list then
63468: LD_VAR 0 7
63472: NOT
63473: IFFALSE 63477
// exit ;
63475: GO 63625
// for i = 1 to amount do
63477: LD_ADDR_VAR 0 5
63481: PUSH
63482: DOUBLE
63483: LD_INT 1
63485: DEC
63486: ST_TO_ADDR
63487: LD_VAR 0 2
63491: PUSH
63492: FOR_TO
63493: IFFALSE 63573
// begin x := rand ( 1 , list [ 1 ] ) ;
63495: LD_ADDR_VAR 0 8
63499: PUSH
63500: LD_INT 1
63502: PPUSH
63503: LD_VAR 0 7
63507: PUSH
63508: LD_INT 1
63510: ARRAY
63511: PPUSH
63512: CALL_OW 12
63516: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
63517: LD_ADDR_VAR 0 6
63521: PUSH
63522: LD_VAR 0 6
63526: PPUSH
63527: LD_VAR 0 5
63531: PPUSH
63532: LD_VAR 0 7
63536: PUSH
63537: LD_INT 1
63539: ARRAY
63540: PUSH
63541: LD_VAR 0 8
63545: ARRAY
63546: PUSH
63547: LD_VAR 0 7
63551: PUSH
63552: LD_INT 2
63554: ARRAY
63555: PUSH
63556: LD_VAR 0 8
63560: ARRAY
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PPUSH
63566: CALL_OW 1
63570: ST_TO_ADDR
// end ;
63571: GO 63492
63573: POP
63574: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
63575: LD_ADDR_EXP 70
63579: PUSH
63580: LD_EXP 70
63584: PPUSH
63585: LD_VAR 0 1
63589: PPUSH
63590: LD_VAR 0 6
63594: PPUSH
63595: CALL_OW 1
63599: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
63600: LD_ADDR_EXP 72
63604: PUSH
63605: LD_EXP 72
63609: PPUSH
63610: LD_VAR 0 1
63614: PPUSH
63615: LD_VAR 0 3
63619: PPUSH
63620: CALL_OW 1
63624: ST_TO_ADDR
// end ;
63625: LD_VAR 0 4
63629: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
63630: LD_INT 0
63632: PPUSH
// if not mc_bases [ base ] then
63633: LD_EXP 57
63637: PUSH
63638: LD_VAR 0 1
63642: ARRAY
63643: NOT
63644: IFFALSE 63648
// exit ;
63646: GO 63673
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
63648: LD_ADDR_EXP 62
63652: PUSH
63653: LD_EXP 62
63657: PPUSH
63658: LD_VAR 0 1
63662: PPUSH
63663: LD_VAR 0 2
63667: PPUSH
63668: CALL_OW 1
63672: ST_TO_ADDR
// end ;
63673: LD_VAR 0 3
63677: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
63678: LD_INT 0
63680: PPUSH
// if not mc_bases [ base ] then
63681: LD_EXP 57
63685: PUSH
63686: LD_VAR 0 1
63690: ARRAY
63691: NOT
63692: IFFALSE 63696
// exit ;
63694: GO 63721
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
63696: LD_ADDR_EXP 78
63700: PUSH
63701: LD_EXP 78
63705: PPUSH
63706: LD_VAR 0 1
63710: PPUSH
63711: LD_VAR 0 2
63715: PPUSH
63716: CALL_OW 1
63720: ST_TO_ADDR
// end ;
63721: LD_VAR 0 3
63725: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
63726: LD_INT 0
63728: PPUSH
// if not mc_bases [ base ] then
63729: LD_EXP 57
63733: PUSH
63734: LD_VAR 0 1
63738: ARRAY
63739: NOT
63740: IFFALSE 63744
// exit ;
63742: GO 63784
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
63744: LD_ADDR_EXP 78
63748: PUSH
63749: LD_EXP 78
63753: PPUSH
63754: LD_VAR 0 1
63758: PPUSH
63759: LD_EXP 78
63763: PUSH
63764: LD_VAR 0 1
63768: ARRAY
63769: PUSH
63770: LD_VAR 0 2
63774: PUSH
63775: EMPTY
63776: LIST
63777: ADD
63778: PPUSH
63779: CALL_OW 1
63783: ST_TO_ADDR
// end ;
63784: LD_VAR 0 3
63788: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
63789: LD_INT 0
63791: PPUSH
// if not mc_bases [ base ] then
63792: LD_EXP 57
63796: PUSH
63797: LD_VAR 0 1
63801: ARRAY
63802: NOT
63803: IFFALSE 63807
// exit ;
63805: GO 63919
// mc_defender := Replace ( mc_defender , base , deflist ) ;
63807: LD_ADDR_EXP 79
63811: PUSH
63812: LD_EXP 79
63816: PPUSH
63817: LD_VAR 0 1
63821: PPUSH
63822: LD_VAR 0 2
63826: PPUSH
63827: CALL_OW 1
63831: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
63832: LD_ADDR_EXP 68
63836: PUSH
63837: LD_EXP 68
63841: PPUSH
63842: LD_VAR 0 1
63846: PPUSH
63847: LD_VAR 0 2
63851: PUSH
63852: LD_INT 0
63854: PLUS
63855: PPUSH
63856: CALL_OW 1
63860: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
63861: LD_ADDR_EXP 76
63865: PUSH
63866: LD_EXP 76
63870: PPUSH
63871: LD_VAR 0 1
63875: PPUSH
63876: LD_EXP 76
63880: PUSH
63881: LD_VAR 0 1
63885: ARRAY
63886: PUSH
63887: LD_EXP 79
63891: PUSH
63892: LD_VAR 0 1
63896: ARRAY
63897: PPUSH
63898: LD_INT 21
63900: PUSH
63901: LD_INT 2
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PPUSH
63908: CALL_OW 72
63912: UNION
63913: PPUSH
63914: CALL_OW 1
63918: ST_TO_ADDR
// end ;
63919: LD_VAR 0 3
63923: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
63924: LD_INT 0
63926: PPUSH
63927: PPUSH
63928: PPUSH
63929: PPUSH
// if not mc_bases [ base ] then
63930: LD_EXP 57
63934: PUSH
63935: LD_VAR 0 1
63939: ARRAY
63940: NOT
63941: IFFALSE 63945
// exit ;
63943: GO 64010
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
63945: LD_ADDR_EXP 77
63949: PUSH
63950: LD_EXP 77
63954: PPUSH
63955: LD_VAR 0 1
63959: PUSH
63960: LD_EXP 77
63964: PUSH
63965: LD_VAR 0 1
63969: ARRAY
63970: PUSH
63971: LD_INT 1
63973: PLUS
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PPUSH
63979: LD_VAR 0 1
63983: PUSH
63984: LD_VAR 0 2
63988: PUSH
63989: LD_VAR 0 3
63993: PUSH
63994: LD_VAR 0 4
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: PPUSH
64005: CALL 19309 0 3
64009: ST_TO_ADDR
// end ;
64010: LD_VAR 0 5
64014: RET
// export function MC_GetMinesField ( base ) ; begin
64015: LD_INT 0
64017: PPUSH
// result := mc_mines [ base ] ;
64018: LD_ADDR_VAR 0 2
64022: PUSH
64023: LD_EXP 70
64027: PUSH
64028: LD_VAR 0 1
64032: ARRAY
64033: ST_TO_ADDR
// end ;
64034: LD_VAR 0 2
64038: RET
// export function MC_GetProduceList ( base ) ; begin
64039: LD_INT 0
64041: PPUSH
// result := mc_produce [ base ] ;
64042: LD_ADDR_VAR 0 2
64046: PUSH
64047: LD_EXP 78
64051: PUSH
64052: LD_VAR 0 1
64056: ARRAY
64057: ST_TO_ADDR
// end ;
64058: LD_VAR 0 2
64062: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
64063: LD_INT 0
64065: PPUSH
64066: PPUSH
// if not mc_bases then
64067: LD_EXP 57
64071: NOT
64072: IFFALSE 64076
// exit ;
64074: GO 64141
// if mc_bases [ base ] then
64076: LD_EXP 57
64080: PUSH
64081: LD_VAR 0 1
64085: ARRAY
64086: IFFALSE 64141
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
64088: LD_ADDR_VAR 0 3
64092: PUSH
64093: LD_EXP 57
64097: PUSH
64098: LD_VAR 0 1
64102: ARRAY
64103: PPUSH
64104: LD_INT 30
64106: PUSH
64107: LD_VAR 0 2
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PPUSH
64116: CALL_OW 72
64120: ST_TO_ADDR
// if result then
64121: LD_VAR 0 3
64125: IFFALSE 64141
// result := result [ 1 ] ;
64127: LD_ADDR_VAR 0 3
64131: PUSH
64132: LD_VAR 0 3
64136: PUSH
64137: LD_INT 1
64139: ARRAY
64140: ST_TO_ADDR
// end ; end ;
64141: LD_VAR 0 3
64145: RET
// export function MC_SetTame ( base , area ) ; begin
64146: LD_INT 0
64148: PPUSH
// if not mc_bases or not base then
64149: LD_EXP 57
64153: NOT
64154: PUSH
64155: LD_VAR 0 1
64159: NOT
64160: OR
64161: IFFALSE 64165
// exit ;
64163: GO 64190
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
64165: LD_ADDR_EXP 85
64169: PUSH
64170: LD_EXP 85
64174: PPUSH
64175: LD_VAR 0 1
64179: PPUSH
64180: LD_VAR 0 2
64184: PPUSH
64185: CALL_OW 1
64189: ST_TO_ADDR
// end ;
64190: LD_VAR 0 3
64194: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
64195: LD_INT 0
64197: PPUSH
64198: PPUSH
// if not mc_bases or not base or not kinds then
64199: LD_EXP 57
64203: NOT
64204: PUSH
64205: LD_VAR 0 1
64209: NOT
64210: OR
64211: PUSH
64212: LD_VAR 0 2
64216: NOT
64217: OR
64218: IFFALSE 64222
// exit ;
64220: GO 64283
// for i in kinds do
64222: LD_ADDR_VAR 0 4
64226: PUSH
64227: LD_VAR 0 2
64231: PUSH
64232: FOR_IN
64233: IFFALSE 64281
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
64235: LD_ADDR_EXP 91
64239: PUSH
64240: LD_EXP 91
64244: PPUSH
64245: LD_VAR 0 1
64249: PUSH
64250: LD_EXP 91
64254: PUSH
64255: LD_VAR 0 1
64259: ARRAY
64260: PUSH
64261: LD_INT 1
64263: PLUS
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PPUSH
64269: LD_VAR 0 4
64273: PPUSH
64274: CALL 19309 0 3
64278: ST_TO_ADDR
64279: GO 64232
64281: POP
64282: POP
// end ;
64283: LD_VAR 0 3
64287: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
64288: LD_INT 0
64290: PPUSH
// if not mc_bases or not base or not areas then
64291: LD_EXP 57
64295: NOT
64296: PUSH
64297: LD_VAR 0 1
64301: NOT
64302: OR
64303: PUSH
64304: LD_VAR 0 2
64308: NOT
64309: OR
64310: IFFALSE 64314
// exit ;
64312: GO 64339
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
64314: LD_ADDR_EXP 75
64318: PUSH
64319: LD_EXP 75
64323: PPUSH
64324: LD_VAR 0 1
64328: PPUSH
64329: LD_VAR 0 2
64333: PPUSH
64334: CALL_OW 1
64338: ST_TO_ADDR
// end ;
64339: LD_VAR 0 3
64343: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
64344: LD_INT 0
64346: PPUSH
// if not mc_bases or not base then
64347: LD_EXP 57
64351: NOT
64352: PUSH
64353: LD_VAR 0 1
64357: NOT
64358: OR
64359: IFFALSE 64363
// exit ;
64361: GO 64397
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
64363: LD_ADDR_EXP 92
64367: PUSH
64368: LD_EXP 92
64372: PPUSH
64373: LD_VAR 0 1
64377: PPUSH
64378: LD_VAR 0 2
64382: PUSH
64383: LD_VAR 0 3
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PPUSH
64392: CALL_OW 1
64396: ST_TO_ADDR
// end ; end_of_file
64397: LD_VAR 0 4
64401: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
64402: LD_INT 0
64404: PPUSH
64405: PPUSH
64406: PPUSH
// if not mc_bases then
64407: LD_EXP 57
64411: NOT
64412: IFFALSE 64416
// exit ;
64414: GO 64581
// for i = 1 to mc_bases do
64416: LD_ADDR_VAR 0 4
64420: PUSH
64421: DOUBLE
64422: LD_INT 1
64424: DEC
64425: ST_TO_ADDR
64426: LD_EXP 57
64430: PUSH
64431: FOR_TO
64432: IFFALSE 64579
// begin if sci in mc_bases [ i ] then
64434: LD_VAR 0 2
64438: PUSH
64439: LD_EXP 57
64443: PUSH
64444: LD_VAR 0 4
64448: ARRAY
64449: IN
64450: IFFALSE 64577
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
64452: LD_ADDR_EXP 86
64456: PUSH
64457: LD_EXP 86
64461: PPUSH
64462: LD_VAR 0 4
64466: PUSH
64467: LD_EXP 86
64471: PUSH
64472: LD_VAR 0 4
64476: ARRAY
64477: PUSH
64478: LD_INT 1
64480: PLUS
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PPUSH
64486: LD_VAR 0 1
64490: PPUSH
64491: CALL 19309 0 3
64495: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
64496: LD_ADDR_VAR 0 5
64500: PUSH
64501: LD_EXP 57
64505: PUSH
64506: LD_VAR 0 4
64510: ARRAY
64511: PPUSH
64512: LD_INT 2
64514: PUSH
64515: LD_INT 30
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 30
64527: PUSH
64528: LD_INT 1
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: LIST
64539: PPUSH
64540: CALL_OW 72
64544: PPUSH
64545: LD_VAR 0 1
64549: PPUSH
64550: CALL_OW 74
64554: ST_TO_ADDR
// if tmp then
64555: LD_VAR 0 5
64559: IFFALSE 64575
// ComStandNearbyBuilding ( ape , tmp ) ;
64561: LD_VAR 0 1
64565: PPUSH
64566: LD_VAR 0 5
64570: PPUSH
64571: CALL 14088 0 2
// break ;
64575: GO 64579
// end ; end ;
64577: GO 64431
64579: POP
64580: POP
// end ;
64581: LD_VAR 0 3
64585: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
64586: LD_INT 0
64588: PPUSH
64589: PPUSH
64590: PPUSH
// if not mc_bases then
64591: LD_EXP 57
64595: NOT
64596: IFFALSE 64600
// exit ;
64598: GO 64689
// for i = 1 to mc_bases do
64600: LD_ADDR_VAR 0 4
64604: PUSH
64605: DOUBLE
64606: LD_INT 1
64608: DEC
64609: ST_TO_ADDR
64610: LD_EXP 57
64614: PUSH
64615: FOR_TO
64616: IFFALSE 64687
// begin if building in mc_busy_turret_list [ i ] then
64618: LD_VAR 0 1
64622: PUSH
64623: LD_EXP 67
64627: PUSH
64628: LD_VAR 0 4
64632: ARRAY
64633: IN
64634: IFFALSE 64685
// begin tmp := mc_busy_turret_list [ i ] diff building ;
64636: LD_ADDR_VAR 0 5
64640: PUSH
64641: LD_EXP 67
64645: PUSH
64646: LD_VAR 0 4
64650: ARRAY
64651: PUSH
64652: LD_VAR 0 1
64656: DIFF
64657: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
64658: LD_ADDR_EXP 67
64662: PUSH
64663: LD_EXP 67
64667: PPUSH
64668: LD_VAR 0 4
64672: PPUSH
64673: LD_VAR 0 5
64677: PPUSH
64678: CALL_OW 1
64682: ST_TO_ADDR
// break ;
64683: GO 64687
// end ; end ;
64685: GO 64615
64687: POP
64688: POP
// end ;
64689: LD_VAR 0 3
64693: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
64694: LD_INT 0
64696: PPUSH
64697: PPUSH
64698: PPUSH
// if not mc_bases then
64699: LD_EXP 57
64703: NOT
64704: IFFALSE 64708
// exit ;
64706: GO 64907
// for i = 1 to mc_bases do
64708: LD_ADDR_VAR 0 5
64712: PUSH
64713: DOUBLE
64714: LD_INT 1
64716: DEC
64717: ST_TO_ADDR
64718: LD_EXP 57
64722: PUSH
64723: FOR_TO
64724: IFFALSE 64905
// if building in mc_bases [ i ] then
64726: LD_VAR 0 1
64730: PUSH
64731: LD_EXP 57
64735: PUSH
64736: LD_VAR 0 5
64740: ARRAY
64741: IN
64742: IFFALSE 64903
// begin tmp := mc_bases [ i ] diff building ;
64744: LD_ADDR_VAR 0 6
64748: PUSH
64749: LD_EXP 57
64753: PUSH
64754: LD_VAR 0 5
64758: ARRAY
64759: PUSH
64760: LD_VAR 0 1
64764: DIFF
64765: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
64766: LD_ADDR_EXP 57
64770: PUSH
64771: LD_EXP 57
64775: PPUSH
64776: LD_VAR 0 5
64780: PPUSH
64781: LD_VAR 0 6
64785: PPUSH
64786: CALL_OW 1
64790: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
64791: LD_VAR 0 1
64795: PUSH
64796: LD_EXP 65
64800: PUSH
64801: LD_VAR 0 5
64805: ARRAY
64806: IN
64807: IFFALSE 64846
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
64809: LD_ADDR_EXP 65
64813: PUSH
64814: LD_EXP 65
64818: PPUSH
64819: LD_VAR 0 5
64823: PPUSH
64824: LD_EXP 65
64828: PUSH
64829: LD_VAR 0 5
64833: ARRAY
64834: PUSH
64835: LD_VAR 0 1
64839: DIFF
64840: PPUSH
64841: CALL_OW 1
64845: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
64846: LD_VAR 0 1
64850: PUSH
64851: LD_EXP 66
64855: PUSH
64856: LD_VAR 0 5
64860: ARRAY
64861: IN
64862: IFFALSE 64901
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
64864: LD_ADDR_EXP 66
64868: PUSH
64869: LD_EXP 66
64873: PPUSH
64874: LD_VAR 0 5
64878: PPUSH
64879: LD_EXP 66
64883: PUSH
64884: LD_VAR 0 5
64888: ARRAY
64889: PUSH
64890: LD_VAR 0 1
64894: DIFF
64895: PPUSH
64896: CALL_OW 1
64900: ST_TO_ADDR
// break ;
64901: GO 64905
// end ;
64903: GO 64723
64905: POP
64906: POP
// end ;
64907: LD_VAR 0 4
64911: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
64912: LD_INT 0
64914: PPUSH
64915: PPUSH
64916: PPUSH
// if not mc_bases or not side in mc_sides then
64917: LD_EXP 57
64921: NOT
64922: PUSH
64923: LD_VAR 0 3
64927: PUSH
64928: LD_EXP 83
64932: IN
64933: NOT
64934: OR
64935: IFFALSE 64939
// exit ;
64937: GO 65062
// for i = 1 to mc_vehicles do
64939: LD_ADDR_VAR 0 6
64943: PUSH
64944: DOUBLE
64945: LD_INT 1
64947: DEC
64948: ST_TO_ADDR
64949: LD_EXP 76
64953: PUSH
64954: FOR_TO
64955: IFFALSE 65060
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
64957: LD_VAR 0 2
64961: PUSH
64962: LD_EXP 76
64966: PUSH
64967: LD_VAR 0 6
64971: ARRAY
64972: IN
64973: PUSH
64974: LD_VAR 0 1
64978: PUSH
64979: LD_EXP 76
64983: PUSH
64984: LD_VAR 0 6
64988: ARRAY
64989: IN
64990: OR
64991: IFFALSE 65058
// begin tmp := mc_vehicles [ i ] diff old ;
64993: LD_ADDR_VAR 0 7
64997: PUSH
64998: LD_EXP 76
65002: PUSH
65003: LD_VAR 0 6
65007: ARRAY
65008: PUSH
65009: LD_VAR 0 2
65013: DIFF
65014: ST_TO_ADDR
// tmp := tmp diff new ;
65015: LD_ADDR_VAR 0 7
65019: PUSH
65020: LD_VAR 0 7
65024: PUSH
65025: LD_VAR 0 1
65029: DIFF
65030: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
65031: LD_ADDR_EXP 76
65035: PUSH
65036: LD_EXP 76
65040: PPUSH
65041: LD_VAR 0 6
65045: PPUSH
65046: LD_VAR 0 7
65050: PPUSH
65051: CALL_OW 1
65055: ST_TO_ADDR
// break ;
65056: GO 65060
// end ;
65058: GO 64954
65060: POP
65061: POP
// end ;
65062: LD_VAR 0 5
65066: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
65067: LD_INT 0
65069: PPUSH
65070: PPUSH
65071: PPUSH
65072: PPUSH
// if not mc_bases then
65073: LD_EXP 57
65077: NOT
65078: IFFALSE 65082
// exit ;
65080: GO 65374
// side := GetSide ( vehicle ) ;
65082: LD_ADDR_VAR 0 5
65086: PUSH
65087: LD_VAR 0 1
65091: PPUSH
65092: CALL_OW 255
65096: ST_TO_ADDR
// for i = 1 to mc_bases do
65097: LD_ADDR_VAR 0 4
65101: PUSH
65102: DOUBLE
65103: LD_INT 1
65105: DEC
65106: ST_TO_ADDR
65107: LD_EXP 57
65111: PUSH
65112: FOR_TO
65113: IFFALSE 65372
// begin if factory in mc_bases [ i ] then
65115: LD_VAR 0 2
65119: PUSH
65120: LD_EXP 57
65124: PUSH
65125: LD_VAR 0 4
65129: ARRAY
65130: IN
65131: IFFALSE 65370
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
65133: LD_EXP 79
65137: PUSH
65138: LD_VAR 0 4
65142: ARRAY
65143: PUSH
65144: LD_EXP 68
65148: PUSH
65149: LD_VAR 0 4
65153: ARRAY
65154: LESS
65155: IFFALSE 65326
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
65157: LD_ADDR_EXP 79
65161: PUSH
65162: LD_EXP 79
65166: PPUSH
65167: LD_VAR 0 4
65171: PPUSH
65172: LD_EXP 79
65176: PUSH
65177: LD_VAR 0 4
65181: ARRAY
65182: PUSH
65183: LD_VAR 0 1
65187: ADD
65188: PPUSH
65189: CALL_OW 1
65193: ST_TO_ADDR
// if not mc_scan [ i ] then
65194: LD_EXP 80
65198: PUSH
65199: LD_VAR 0 4
65203: ARRAY
65204: NOT
65205: IFFALSE 65324
// begin if GetControl ( vehicle ) = control_remote then
65207: LD_VAR 0 1
65211: PPUSH
65212: CALL_OW 263
65216: PUSH
65217: LD_INT 2
65219: EQUAL
65220: IFFALSE 65240
// repeat wait ( 0 0$1 ) ;
65222: LD_INT 35
65224: PPUSH
65225: CALL_OW 67
// until IsControledBy ( vehicle ) ;
65229: LD_VAR 0 1
65233: PPUSH
65234: CALL_OW 312
65238: IFFALSE 65222
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
65240: LD_VAR 0 1
65244: PPUSH
65245: LD_EXP 81
65249: PUSH
65250: LD_VAR 0 4
65254: ARRAY
65255: PPUSH
65256: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
65260: LD_VAR 0 1
65264: PPUSH
65265: CALL_OW 263
65269: PUSH
65270: LD_INT 1
65272: NONEQUAL
65273: IFFALSE 65277
// break ;
65275: GO 65372
// repeat wait ( 0 0$1 ) ;
65277: LD_INT 35
65279: PPUSH
65280: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
65284: LD_VAR 0 1
65288: PPUSH
65289: LD_EXP 81
65293: PUSH
65294: LD_VAR 0 4
65298: ARRAY
65299: PPUSH
65300: CALL_OW 308
65304: IFFALSE 65277
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
65306: LD_VAR 0 1
65310: PPUSH
65311: CALL_OW 311
65315: PPUSH
65316: CALL_OW 121
// exit ;
65320: POP
65321: POP
65322: GO 65374
// end ; end else
65324: GO 65370
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
65326: LD_ADDR_EXP 76
65330: PUSH
65331: LD_EXP 76
65335: PPUSH
65336: LD_VAR 0 4
65340: PUSH
65341: LD_EXP 76
65345: PUSH
65346: LD_VAR 0 4
65350: ARRAY
65351: PUSH
65352: LD_INT 1
65354: PLUS
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PPUSH
65360: LD_VAR 0 1
65364: PPUSH
65365: CALL 19309 0 3
65369: ST_TO_ADDR
// end ; end ;
65370: GO 65112
65372: POP
65373: POP
// end ;
65374: LD_VAR 0 3
65378: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
65379: LD_INT 0
65381: PPUSH
65382: PPUSH
65383: PPUSH
65384: PPUSH
// if not mc_bases then
65385: LD_EXP 57
65389: NOT
65390: IFFALSE 65394
// exit ;
65392: GO 65747
// repeat wait ( 0 0$1 ) ;
65394: LD_INT 35
65396: PPUSH
65397: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
65401: LD_VAR 0 2
65405: PPUSH
65406: LD_VAR 0 3
65410: PPUSH
65411: CALL_OW 284
65415: IFFALSE 65394
// if GetResourceTypeXY ( x , y ) = mat_artefact then
65417: LD_VAR 0 2
65421: PPUSH
65422: LD_VAR 0 3
65426: PPUSH
65427: CALL_OW 283
65431: PUSH
65432: LD_INT 4
65434: EQUAL
65435: IFFALSE 65439
// exit ;
65437: GO 65747
// for i = 1 to mc_bases do
65439: LD_ADDR_VAR 0 7
65443: PUSH
65444: DOUBLE
65445: LD_INT 1
65447: DEC
65448: ST_TO_ADDR
65449: LD_EXP 57
65453: PUSH
65454: FOR_TO
65455: IFFALSE 65745
// begin if mc_crates_area [ i ] then
65457: LD_EXP 75
65461: PUSH
65462: LD_VAR 0 7
65466: ARRAY
65467: IFFALSE 65578
// for j in mc_crates_area [ i ] do
65469: LD_ADDR_VAR 0 8
65473: PUSH
65474: LD_EXP 75
65478: PUSH
65479: LD_VAR 0 7
65483: ARRAY
65484: PUSH
65485: FOR_IN
65486: IFFALSE 65576
// if InArea ( x , y , j ) then
65488: LD_VAR 0 2
65492: PPUSH
65493: LD_VAR 0 3
65497: PPUSH
65498: LD_VAR 0 8
65502: PPUSH
65503: CALL_OW 309
65507: IFFALSE 65574
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
65509: LD_ADDR_EXP 73
65513: PUSH
65514: LD_EXP 73
65518: PPUSH
65519: LD_VAR 0 7
65523: PUSH
65524: LD_EXP 73
65528: PUSH
65529: LD_VAR 0 7
65533: ARRAY
65534: PUSH
65535: LD_INT 1
65537: PLUS
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PPUSH
65543: LD_VAR 0 4
65547: PUSH
65548: LD_VAR 0 2
65552: PUSH
65553: LD_VAR 0 3
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: LIST
65562: PPUSH
65563: CALL 19309 0 3
65567: ST_TO_ADDR
// exit ;
65568: POP
65569: POP
65570: POP
65571: POP
65572: GO 65747
// end ;
65574: GO 65485
65576: POP
65577: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65578: LD_ADDR_VAR 0 9
65582: PUSH
65583: LD_EXP 57
65587: PUSH
65588: LD_VAR 0 7
65592: ARRAY
65593: PPUSH
65594: LD_INT 2
65596: PUSH
65597: LD_INT 30
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 30
65609: PUSH
65610: LD_INT 1
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: LIST
65621: PPUSH
65622: CALL_OW 72
65626: ST_TO_ADDR
// if not depot then
65627: LD_VAR 0 9
65631: NOT
65632: IFFALSE 65636
// continue ;
65634: GO 65454
// for j in depot do
65636: LD_ADDR_VAR 0 8
65640: PUSH
65641: LD_VAR 0 9
65645: PUSH
65646: FOR_IN
65647: IFFALSE 65741
// if GetDistUnitXY ( j , x , y ) < 30 then
65649: LD_VAR 0 8
65653: PPUSH
65654: LD_VAR 0 2
65658: PPUSH
65659: LD_VAR 0 3
65663: PPUSH
65664: CALL_OW 297
65668: PUSH
65669: LD_INT 30
65671: LESS
65672: IFFALSE 65739
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
65674: LD_ADDR_EXP 73
65678: PUSH
65679: LD_EXP 73
65683: PPUSH
65684: LD_VAR 0 7
65688: PUSH
65689: LD_EXP 73
65693: PUSH
65694: LD_VAR 0 7
65698: ARRAY
65699: PUSH
65700: LD_INT 1
65702: PLUS
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PPUSH
65708: LD_VAR 0 4
65712: PUSH
65713: LD_VAR 0 2
65717: PUSH
65718: LD_VAR 0 3
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: LIST
65727: PPUSH
65728: CALL 19309 0 3
65732: ST_TO_ADDR
// exit ;
65733: POP
65734: POP
65735: POP
65736: POP
65737: GO 65747
// end ;
65739: GO 65646
65741: POP
65742: POP
// end ;
65743: GO 65454
65745: POP
65746: POP
// end ;
65747: LD_VAR 0 6
65751: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
65752: LD_INT 0
65754: PPUSH
65755: PPUSH
65756: PPUSH
65757: PPUSH
// side := GetSide ( lab ) ;
65758: LD_ADDR_VAR 0 4
65762: PUSH
65763: LD_VAR 0 2
65767: PPUSH
65768: CALL_OW 255
65772: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
65773: LD_VAR 0 4
65777: PUSH
65778: LD_EXP 83
65782: IN
65783: NOT
65784: PUSH
65785: LD_EXP 84
65789: NOT
65790: OR
65791: PUSH
65792: LD_EXP 57
65796: NOT
65797: OR
65798: IFFALSE 65802
// exit ;
65800: GO 66035
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
65802: LD_ADDR_EXP 84
65806: PUSH
65807: LD_EXP 84
65811: PPUSH
65812: LD_VAR 0 4
65816: PPUSH
65817: LD_EXP 84
65821: PUSH
65822: LD_VAR 0 4
65826: ARRAY
65827: PUSH
65828: LD_VAR 0 1
65832: DIFF
65833: PPUSH
65834: CALL_OW 1
65838: ST_TO_ADDR
// for i = 1 to mc_bases do
65839: LD_ADDR_VAR 0 5
65843: PUSH
65844: DOUBLE
65845: LD_INT 1
65847: DEC
65848: ST_TO_ADDR
65849: LD_EXP 57
65853: PUSH
65854: FOR_TO
65855: IFFALSE 66033
// begin if lab in mc_bases [ i ] then
65857: LD_VAR 0 2
65861: PUSH
65862: LD_EXP 57
65866: PUSH
65867: LD_VAR 0 5
65871: ARRAY
65872: IN
65873: IFFALSE 66031
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
65875: LD_VAR 0 1
65879: PUSH
65880: LD_INT 11
65882: PUSH
65883: LD_INT 4
65885: PUSH
65886: LD_INT 3
65888: PUSH
65889: LD_INT 2
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: IN
65898: PUSH
65899: LD_EXP 87
65903: PUSH
65904: LD_VAR 0 5
65908: ARRAY
65909: AND
65910: IFFALSE 66031
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
65912: LD_ADDR_VAR 0 6
65916: PUSH
65917: LD_EXP 87
65921: PUSH
65922: LD_VAR 0 5
65926: ARRAY
65927: PUSH
65928: LD_INT 1
65930: ARRAY
65931: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
65932: LD_ADDR_EXP 87
65936: PUSH
65937: LD_EXP 87
65941: PPUSH
65942: LD_VAR 0 5
65946: PPUSH
65947: EMPTY
65948: PPUSH
65949: CALL_OW 1
65953: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
65954: LD_VAR 0 6
65958: PPUSH
65959: LD_INT 0
65961: PPUSH
65962: CALL_OW 109
// ComExitBuilding ( tmp ) ;
65966: LD_VAR 0 6
65970: PPUSH
65971: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
65975: LD_ADDR_EXP 86
65979: PUSH
65980: LD_EXP 86
65984: PPUSH
65985: LD_VAR 0 5
65989: PPUSH
65990: LD_EXP 86
65994: PUSH
65995: LD_VAR 0 5
65999: ARRAY
66000: PPUSH
66001: LD_INT 1
66003: PPUSH
66004: LD_VAR 0 6
66008: PPUSH
66009: CALL_OW 2
66013: PPUSH
66014: CALL_OW 1
66018: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
66019: LD_VAR 0 5
66023: PPUSH
66024: LD_INT 112
66026: PPUSH
66027: CALL 51805 0 2
// end ; end ; end ;
66031: GO 65854
66033: POP
66034: POP
// end ;
66035: LD_VAR 0 3
66039: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
66040: LD_INT 0
66042: PPUSH
66043: PPUSH
66044: PPUSH
66045: PPUSH
66046: PPUSH
66047: PPUSH
66048: PPUSH
66049: PPUSH
// if not mc_bases then
66050: LD_EXP 57
66054: NOT
66055: IFFALSE 66059
// exit ;
66057: GO 66984
// for i = 1 to mc_bases do
66059: LD_ADDR_VAR 0 3
66063: PUSH
66064: DOUBLE
66065: LD_INT 1
66067: DEC
66068: ST_TO_ADDR
66069: LD_EXP 57
66073: PUSH
66074: FOR_TO
66075: IFFALSE 66982
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
66077: LD_VAR 0 1
66081: PUSH
66082: LD_EXP 57
66086: PUSH
66087: LD_VAR 0 3
66091: ARRAY
66092: IN
66093: PUSH
66094: LD_VAR 0 1
66098: PUSH
66099: LD_EXP 64
66103: PUSH
66104: LD_VAR 0 3
66108: ARRAY
66109: IN
66110: OR
66111: PUSH
66112: LD_VAR 0 1
66116: PUSH
66117: LD_EXP 76
66121: PUSH
66122: LD_VAR 0 3
66126: ARRAY
66127: IN
66128: OR
66129: PUSH
66130: LD_VAR 0 1
66134: PUSH
66135: LD_EXP 86
66139: PUSH
66140: LD_VAR 0 3
66144: ARRAY
66145: IN
66146: OR
66147: PUSH
66148: LD_VAR 0 1
66152: PUSH
66153: LD_EXP 87
66157: PUSH
66158: LD_VAR 0 3
66162: ARRAY
66163: IN
66164: OR
66165: IFFALSE 66980
// begin if un in mc_ape [ i ] then
66167: LD_VAR 0 1
66171: PUSH
66172: LD_EXP 86
66176: PUSH
66177: LD_VAR 0 3
66181: ARRAY
66182: IN
66183: IFFALSE 66222
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
66185: LD_ADDR_EXP 86
66189: PUSH
66190: LD_EXP 86
66194: PPUSH
66195: LD_VAR 0 3
66199: PPUSH
66200: LD_EXP 86
66204: PUSH
66205: LD_VAR 0 3
66209: ARRAY
66210: PUSH
66211: LD_VAR 0 1
66215: DIFF
66216: PPUSH
66217: CALL_OW 1
66221: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
66222: LD_VAR 0 1
66226: PUSH
66227: LD_EXP 87
66231: PUSH
66232: LD_VAR 0 3
66236: ARRAY
66237: IN
66238: IFFALSE 66262
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
66240: LD_ADDR_EXP 87
66244: PUSH
66245: LD_EXP 87
66249: PPUSH
66250: LD_VAR 0 3
66254: PPUSH
66255: EMPTY
66256: PPUSH
66257: CALL_OW 1
66261: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
66262: LD_VAR 0 1
66266: PPUSH
66267: CALL_OW 247
66271: PUSH
66272: LD_INT 2
66274: EQUAL
66275: PUSH
66276: LD_VAR 0 1
66280: PPUSH
66281: CALL_OW 110
66285: PUSH
66286: LD_INT 20
66288: EQUAL
66289: AND
66290: IFFALSE 66393
// begin fac := MC_GetBuilding ( i , b_factory ) ;
66292: LD_ADDR_VAR 0 8
66296: PUSH
66297: LD_VAR 0 3
66301: PPUSH
66302: LD_INT 3
66304: PPUSH
66305: CALL 64063 0 2
66309: ST_TO_ADDR
// if fac then
66310: LD_VAR 0 8
66314: IFFALSE 66393
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
66316: LD_ADDR_VAR 0 9
66320: PUSH
66321: LD_VAR 0 8
66325: PPUSH
66326: LD_VAR 0 1
66330: PPUSH
66331: CALL_OW 265
66335: PPUSH
66336: LD_VAR 0 1
66340: PPUSH
66341: CALL_OW 262
66345: PPUSH
66346: LD_VAR 0 1
66350: PPUSH
66351: CALL_OW 263
66355: PPUSH
66356: LD_VAR 0 1
66360: PPUSH
66361: CALL_OW 264
66365: PPUSH
66366: CALL 16474 0 5
66370: ST_TO_ADDR
// if components then
66371: LD_VAR 0 9
66375: IFFALSE 66391
// MC_InsertProduceList ( i , components ) ;
66377: LD_VAR 0 3
66381: PPUSH
66382: LD_VAR 0 9
66386: PPUSH
66387: CALL 63726 0 2
// break ;
66391: GO 66982
// end ; end ; if GetType ( un ) = unit_building then
66393: LD_VAR 0 1
66397: PPUSH
66398: CALL_OW 247
66402: PUSH
66403: LD_INT 3
66405: EQUAL
66406: IFFALSE 66703
// begin btype := GetBType ( un ) ;
66408: LD_ADDR_VAR 0 5
66412: PUSH
66413: LD_VAR 0 1
66417: PPUSH
66418: CALL_OW 266
66422: ST_TO_ADDR
// if btype = b_warehouse then
66423: LD_VAR 0 5
66427: PUSH
66428: LD_INT 1
66430: EQUAL
66431: IFFALSE 66449
// begin btype := b_depot ;
66433: LD_ADDR_VAR 0 5
66437: PUSH
66438: LD_INT 0
66440: ST_TO_ADDR
// pos := 1 ;
66441: LD_ADDR_VAR 0 6
66445: PUSH
66446: LD_INT 1
66448: ST_TO_ADDR
// end ; if btype = b_factory then
66449: LD_VAR 0 5
66453: PUSH
66454: LD_INT 3
66456: EQUAL
66457: IFFALSE 66475
// begin btype := b_workshop ;
66459: LD_ADDR_VAR 0 5
66463: PUSH
66464: LD_INT 2
66466: ST_TO_ADDR
// pos := 1 ;
66467: LD_ADDR_VAR 0 6
66471: PUSH
66472: LD_INT 1
66474: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
66475: LD_VAR 0 5
66479: PUSH
66480: LD_INT 7
66482: PUSH
66483: LD_INT 8
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: IN
66490: IFFALSE 66500
// btype := b_lab ;
66492: LD_ADDR_VAR 0 5
66496: PUSH
66497: LD_INT 6
66499: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
66500: LD_ADDR_EXP 62
66504: PUSH
66505: LD_EXP 62
66509: PPUSH
66510: LD_VAR 0 3
66514: PUSH
66515: LD_EXP 62
66519: PUSH
66520: LD_VAR 0 3
66524: ARRAY
66525: PUSH
66526: LD_INT 1
66528: PLUS
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PPUSH
66534: LD_VAR 0 5
66538: PUSH
66539: LD_VAR 0 1
66543: PPUSH
66544: CALL_OW 250
66548: PUSH
66549: LD_VAR 0 1
66553: PPUSH
66554: CALL_OW 251
66558: PUSH
66559: LD_VAR 0 1
66563: PPUSH
66564: CALL_OW 254
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: PPUSH
66575: CALL 19309 0 3
66579: ST_TO_ADDR
// if pos = 1 then
66580: LD_VAR 0 6
66584: PUSH
66585: LD_INT 1
66587: EQUAL
66588: IFFALSE 66703
// begin tmp := mc_build_list [ i ] ;
66590: LD_ADDR_VAR 0 7
66594: PUSH
66595: LD_EXP 62
66599: PUSH
66600: LD_VAR 0 3
66604: ARRAY
66605: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
66606: LD_VAR 0 7
66610: PPUSH
66611: LD_INT 2
66613: PUSH
66614: LD_INT 30
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 30
66626: PUSH
66627: LD_INT 1
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: LIST
66638: PPUSH
66639: CALL_OW 72
66643: IFFALSE 66653
// pos := 2 ;
66645: LD_ADDR_VAR 0 6
66649: PUSH
66650: LD_INT 2
66652: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
66653: LD_ADDR_VAR 0 7
66657: PUSH
66658: LD_VAR 0 7
66662: PPUSH
66663: LD_VAR 0 6
66667: PPUSH
66668: LD_VAR 0 7
66672: PPUSH
66673: CALL 19200 0 3
66677: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
66678: LD_ADDR_EXP 62
66682: PUSH
66683: LD_EXP 62
66687: PPUSH
66688: LD_VAR 0 3
66692: PPUSH
66693: LD_VAR 0 7
66697: PPUSH
66698: CALL_OW 1
66702: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
66703: LD_VAR 0 1
66707: PUSH
66708: LD_EXP 57
66712: PUSH
66713: LD_VAR 0 3
66717: ARRAY
66718: IN
66719: IFFALSE 66758
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
66721: LD_ADDR_EXP 57
66725: PUSH
66726: LD_EXP 57
66730: PPUSH
66731: LD_VAR 0 3
66735: PPUSH
66736: LD_EXP 57
66740: PUSH
66741: LD_VAR 0 3
66745: ARRAY
66746: PUSH
66747: LD_VAR 0 1
66751: DIFF
66752: PPUSH
66753: CALL_OW 1
66757: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
66758: LD_VAR 0 1
66762: PUSH
66763: LD_EXP 64
66767: PUSH
66768: LD_VAR 0 3
66772: ARRAY
66773: IN
66774: IFFALSE 66813
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
66776: LD_ADDR_EXP 64
66780: PUSH
66781: LD_EXP 64
66785: PPUSH
66786: LD_VAR 0 3
66790: PPUSH
66791: LD_EXP 64
66795: PUSH
66796: LD_VAR 0 3
66800: ARRAY
66801: PUSH
66802: LD_VAR 0 1
66806: DIFF
66807: PPUSH
66808: CALL_OW 1
66812: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
66813: LD_VAR 0 1
66817: PUSH
66818: LD_EXP 76
66822: PUSH
66823: LD_VAR 0 3
66827: ARRAY
66828: IN
66829: IFFALSE 66868
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
66831: LD_ADDR_EXP 76
66835: PUSH
66836: LD_EXP 76
66840: PPUSH
66841: LD_VAR 0 3
66845: PPUSH
66846: LD_EXP 76
66850: PUSH
66851: LD_VAR 0 3
66855: ARRAY
66856: PUSH
66857: LD_VAR 0 1
66861: DIFF
66862: PPUSH
66863: CALL_OW 1
66867: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
66868: LD_VAR 0 1
66872: PUSH
66873: LD_EXP 66
66877: PUSH
66878: LD_VAR 0 3
66882: ARRAY
66883: IN
66884: IFFALSE 66923
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
66886: LD_ADDR_EXP 66
66890: PUSH
66891: LD_EXP 66
66895: PPUSH
66896: LD_VAR 0 3
66900: PPUSH
66901: LD_EXP 66
66905: PUSH
66906: LD_VAR 0 3
66910: ARRAY
66911: PUSH
66912: LD_VAR 0 1
66916: DIFF
66917: PPUSH
66918: CALL_OW 1
66922: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
66923: LD_VAR 0 1
66927: PUSH
66928: LD_EXP 65
66932: PUSH
66933: LD_VAR 0 3
66937: ARRAY
66938: IN
66939: IFFALSE 66978
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
66941: LD_ADDR_EXP 65
66945: PUSH
66946: LD_EXP 65
66950: PPUSH
66951: LD_VAR 0 3
66955: PPUSH
66956: LD_EXP 65
66960: PUSH
66961: LD_VAR 0 3
66965: ARRAY
66966: PUSH
66967: LD_VAR 0 1
66971: DIFF
66972: PPUSH
66973: CALL_OW 1
66977: ST_TO_ADDR
// end ; break ;
66978: GO 66982
// end ;
66980: GO 66074
66982: POP
66983: POP
// end ;
66984: LD_VAR 0 2
66988: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
66989: LD_INT 0
66991: PPUSH
66992: PPUSH
66993: PPUSH
// if not mc_bases then
66994: LD_EXP 57
66998: NOT
66999: IFFALSE 67003
// exit ;
67001: GO 67218
// for i = 1 to mc_bases do
67003: LD_ADDR_VAR 0 3
67007: PUSH
67008: DOUBLE
67009: LD_INT 1
67011: DEC
67012: ST_TO_ADDR
67013: LD_EXP 57
67017: PUSH
67018: FOR_TO
67019: IFFALSE 67216
// begin if building in mc_construct_list [ i ] then
67021: LD_VAR 0 1
67025: PUSH
67026: LD_EXP 64
67030: PUSH
67031: LD_VAR 0 3
67035: ARRAY
67036: IN
67037: IFFALSE 67214
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
67039: LD_ADDR_EXP 64
67043: PUSH
67044: LD_EXP 64
67048: PPUSH
67049: LD_VAR 0 3
67053: PPUSH
67054: LD_EXP 64
67058: PUSH
67059: LD_VAR 0 3
67063: ARRAY
67064: PUSH
67065: LD_VAR 0 1
67069: DIFF
67070: PPUSH
67071: CALL_OW 1
67075: ST_TO_ADDR
// if building in mc_lab [ i ] then
67076: LD_VAR 0 1
67080: PUSH
67081: LD_EXP 90
67085: PUSH
67086: LD_VAR 0 3
67090: ARRAY
67091: IN
67092: IFFALSE 67147
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
67094: LD_ADDR_EXP 91
67098: PUSH
67099: LD_EXP 91
67103: PPUSH
67104: LD_VAR 0 3
67108: PPUSH
67109: LD_EXP 91
67113: PUSH
67114: LD_VAR 0 3
67118: ARRAY
67119: PPUSH
67120: LD_INT 1
67122: PPUSH
67123: LD_EXP 91
67127: PUSH
67128: LD_VAR 0 3
67132: ARRAY
67133: PPUSH
67134: LD_INT 0
67136: PPUSH
67137: CALL 18292 0 4
67141: PPUSH
67142: CALL_OW 1
67146: ST_TO_ADDR
// if not building in mc_bases [ i ] then
67147: LD_VAR 0 1
67151: PUSH
67152: LD_EXP 57
67156: PUSH
67157: LD_VAR 0 3
67161: ARRAY
67162: IN
67163: NOT
67164: IFFALSE 67210
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
67166: LD_ADDR_EXP 57
67170: PUSH
67171: LD_EXP 57
67175: PPUSH
67176: LD_VAR 0 3
67180: PUSH
67181: LD_EXP 57
67185: PUSH
67186: LD_VAR 0 3
67190: ARRAY
67191: PUSH
67192: LD_INT 1
67194: PLUS
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PPUSH
67200: LD_VAR 0 1
67204: PPUSH
67205: CALL 19309 0 3
67209: ST_TO_ADDR
// exit ;
67210: POP
67211: POP
67212: GO 67218
// end ; end ;
67214: GO 67018
67216: POP
67217: POP
// end ;
67218: LD_VAR 0 2
67222: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
67223: LD_INT 0
67225: PPUSH
67226: PPUSH
67227: PPUSH
67228: PPUSH
67229: PPUSH
67230: PPUSH
67231: PPUSH
// if not mc_bases then
67232: LD_EXP 57
67236: NOT
67237: IFFALSE 67241
// exit ;
67239: GO 67902
// for i = 1 to mc_bases do
67241: LD_ADDR_VAR 0 3
67245: PUSH
67246: DOUBLE
67247: LD_INT 1
67249: DEC
67250: ST_TO_ADDR
67251: LD_EXP 57
67255: PUSH
67256: FOR_TO
67257: IFFALSE 67900
// begin if building in mc_construct_list [ i ] then
67259: LD_VAR 0 1
67263: PUSH
67264: LD_EXP 64
67268: PUSH
67269: LD_VAR 0 3
67273: ARRAY
67274: IN
67275: IFFALSE 67898
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
67277: LD_ADDR_EXP 64
67281: PUSH
67282: LD_EXP 64
67286: PPUSH
67287: LD_VAR 0 3
67291: PPUSH
67292: LD_EXP 64
67296: PUSH
67297: LD_VAR 0 3
67301: ARRAY
67302: PUSH
67303: LD_VAR 0 1
67307: DIFF
67308: PPUSH
67309: CALL_OW 1
67313: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
67314: LD_ADDR_EXP 57
67318: PUSH
67319: LD_EXP 57
67323: PPUSH
67324: LD_VAR 0 3
67328: PUSH
67329: LD_EXP 57
67333: PUSH
67334: LD_VAR 0 3
67338: ARRAY
67339: PUSH
67340: LD_INT 1
67342: PLUS
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PPUSH
67348: LD_VAR 0 1
67352: PPUSH
67353: CALL 19309 0 3
67357: ST_TO_ADDR
// btype := GetBType ( building ) ;
67358: LD_ADDR_VAR 0 5
67362: PUSH
67363: LD_VAR 0 1
67367: PPUSH
67368: CALL_OW 266
67372: ST_TO_ADDR
// side := GetSide ( building ) ;
67373: LD_ADDR_VAR 0 8
67377: PUSH
67378: LD_VAR 0 1
67382: PPUSH
67383: CALL_OW 255
67387: ST_TO_ADDR
// if btype = b_lab then
67388: LD_VAR 0 5
67392: PUSH
67393: LD_INT 6
67395: EQUAL
67396: IFFALSE 67446
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
67398: LD_ADDR_EXP 90
67402: PUSH
67403: LD_EXP 90
67407: PPUSH
67408: LD_VAR 0 3
67412: PUSH
67413: LD_EXP 90
67417: PUSH
67418: LD_VAR 0 3
67422: ARRAY
67423: PUSH
67424: LD_INT 1
67426: PLUS
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PPUSH
67432: LD_VAR 0 1
67436: PPUSH
67437: CALL 19309 0 3
67441: ST_TO_ADDR
// exit ;
67442: POP
67443: POP
67444: GO 67902
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
67446: LD_VAR 0 5
67450: PUSH
67451: LD_INT 0
67453: PUSH
67454: LD_INT 2
67456: PUSH
67457: LD_INT 4
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: LIST
67464: IN
67465: IFFALSE 67589
// begin if btype = b_armoury then
67467: LD_VAR 0 5
67471: PUSH
67472: LD_INT 4
67474: EQUAL
67475: IFFALSE 67485
// btype := b_barracks ;
67477: LD_ADDR_VAR 0 5
67481: PUSH
67482: LD_INT 5
67484: ST_TO_ADDR
// if btype = b_depot then
67485: LD_VAR 0 5
67489: PUSH
67490: LD_INT 0
67492: EQUAL
67493: IFFALSE 67503
// btype := b_warehouse ;
67495: LD_ADDR_VAR 0 5
67499: PUSH
67500: LD_INT 1
67502: ST_TO_ADDR
// if btype = b_workshop then
67503: LD_VAR 0 5
67507: PUSH
67508: LD_INT 2
67510: EQUAL
67511: IFFALSE 67521
// btype := b_factory ;
67513: LD_ADDR_VAR 0 5
67517: PUSH
67518: LD_INT 3
67520: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
67521: LD_VAR 0 5
67525: PPUSH
67526: LD_VAR 0 8
67530: PPUSH
67531: CALL_OW 323
67535: PUSH
67536: LD_INT 1
67538: EQUAL
67539: IFFALSE 67585
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
67541: LD_ADDR_EXP 89
67545: PUSH
67546: LD_EXP 89
67550: PPUSH
67551: LD_VAR 0 3
67555: PUSH
67556: LD_EXP 89
67560: PUSH
67561: LD_VAR 0 3
67565: ARRAY
67566: PUSH
67567: LD_INT 1
67569: PLUS
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PPUSH
67575: LD_VAR 0 1
67579: PPUSH
67580: CALL 19309 0 3
67584: ST_TO_ADDR
// exit ;
67585: POP
67586: POP
67587: GO 67902
// end ; if btype in [ b_bunker , b_turret ] then
67589: LD_VAR 0 5
67593: PUSH
67594: LD_INT 32
67596: PUSH
67597: LD_INT 33
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: IN
67604: IFFALSE 67894
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
67606: LD_ADDR_EXP 65
67610: PUSH
67611: LD_EXP 65
67615: PPUSH
67616: LD_VAR 0 3
67620: PUSH
67621: LD_EXP 65
67625: PUSH
67626: LD_VAR 0 3
67630: ARRAY
67631: PUSH
67632: LD_INT 1
67634: PLUS
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PPUSH
67640: LD_VAR 0 1
67644: PPUSH
67645: CALL 19309 0 3
67649: ST_TO_ADDR
// if btype = b_bunker then
67650: LD_VAR 0 5
67654: PUSH
67655: LD_INT 32
67657: EQUAL
67658: IFFALSE 67894
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
67660: LD_ADDR_EXP 66
67664: PUSH
67665: LD_EXP 66
67669: PPUSH
67670: LD_VAR 0 3
67674: PUSH
67675: LD_EXP 66
67679: PUSH
67680: LD_VAR 0 3
67684: ARRAY
67685: PUSH
67686: LD_INT 1
67688: PLUS
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PPUSH
67694: LD_VAR 0 1
67698: PPUSH
67699: CALL 19309 0 3
67703: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
67704: LD_ADDR_VAR 0 6
67708: PUSH
67709: LD_EXP 57
67713: PUSH
67714: LD_VAR 0 3
67718: ARRAY
67719: PPUSH
67720: LD_INT 25
67722: PUSH
67723: LD_INT 1
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 3
67732: PUSH
67733: LD_INT 54
67735: PUSH
67736: EMPTY
67737: LIST
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PPUSH
67747: CALL_OW 72
67751: ST_TO_ADDR
// if tmp then
67752: LD_VAR 0 6
67756: IFFALSE 67762
// exit ;
67758: POP
67759: POP
67760: GO 67902
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67762: LD_ADDR_VAR 0 6
67766: PUSH
67767: LD_EXP 57
67771: PUSH
67772: LD_VAR 0 3
67776: ARRAY
67777: PPUSH
67778: LD_INT 2
67780: PUSH
67781: LD_INT 30
67783: PUSH
67784: LD_INT 4
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 30
67793: PUSH
67794: LD_INT 5
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: LIST
67805: PPUSH
67806: CALL_OW 72
67810: ST_TO_ADDR
// if not tmp then
67811: LD_VAR 0 6
67815: NOT
67816: IFFALSE 67822
// exit ;
67818: POP
67819: POP
67820: GO 67902
// for j in tmp do
67822: LD_ADDR_VAR 0 4
67826: PUSH
67827: LD_VAR 0 6
67831: PUSH
67832: FOR_IN
67833: IFFALSE 67892
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
67835: LD_ADDR_VAR 0 7
67839: PUSH
67840: LD_VAR 0 4
67844: PPUSH
67845: CALL_OW 313
67849: PPUSH
67850: LD_INT 25
67852: PUSH
67853: LD_INT 1
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PPUSH
67860: CALL_OW 72
67864: ST_TO_ADDR
// if units then
67865: LD_VAR 0 7
67869: IFFALSE 67890
// begin ComExitBuilding ( units [ 1 ] ) ;
67871: LD_VAR 0 7
67875: PUSH
67876: LD_INT 1
67878: ARRAY
67879: PPUSH
67880: CALL_OW 122
// exit ;
67884: POP
67885: POP
67886: POP
67887: POP
67888: GO 67902
// end ; end ;
67890: GO 67832
67892: POP
67893: POP
// end ; end ; exit ;
67894: POP
67895: POP
67896: GO 67902
// end ; end ;
67898: GO 67256
67900: POP
67901: POP
// end ;
67902: LD_VAR 0 2
67906: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
67907: LD_INT 0
67909: PPUSH
67910: PPUSH
67911: PPUSH
67912: PPUSH
67913: PPUSH
67914: PPUSH
67915: PPUSH
// if not mc_bases then
67916: LD_EXP 57
67920: NOT
67921: IFFALSE 67925
// exit ;
67923: GO 68156
// btype := GetBType ( building ) ;
67925: LD_ADDR_VAR 0 6
67929: PUSH
67930: LD_VAR 0 1
67934: PPUSH
67935: CALL_OW 266
67939: ST_TO_ADDR
// x := GetX ( building ) ;
67940: LD_ADDR_VAR 0 7
67944: PUSH
67945: LD_VAR 0 1
67949: PPUSH
67950: CALL_OW 250
67954: ST_TO_ADDR
// y := GetY ( building ) ;
67955: LD_ADDR_VAR 0 8
67959: PUSH
67960: LD_VAR 0 1
67964: PPUSH
67965: CALL_OW 251
67969: ST_TO_ADDR
// d := GetDir ( building ) ;
67970: LD_ADDR_VAR 0 9
67974: PUSH
67975: LD_VAR 0 1
67979: PPUSH
67980: CALL_OW 254
67984: ST_TO_ADDR
// for i = 1 to mc_bases do
67985: LD_ADDR_VAR 0 4
67989: PUSH
67990: DOUBLE
67991: LD_INT 1
67993: DEC
67994: ST_TO_ADDR
67995: LD_EXP 57
67999: PUSH
68000: FOR_TO
68001: IFFALSE 68154
// begin if not mc_build_list [ i ] then
68003: LD_EXP 62
68007: PUSH
68008: LD_VAR 0 4
68012: ARRAY
68013: NOT
68014: IFFALSE 68018
// continue ;
68016: GO 68000
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
68018: LD_VAR 0 6
68022: PUSH
68023: LD_VAR 0 7
68027: PUSH
68028: LD_VAR 0 8
68032: PUSH
68033: LD_VAR 0 9
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: PPUSH
68044: LD_EXP 62
68048: PUSH
68049: LD_VAR 0 4
68053: ARRAY
68054: PUSH
68055: LD_INT 1
68057: ARRAY
68058: PPUSH
68059: CALL 24907 0 2
68063: IFFALSE 68152
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
68065: LD_ADDR_EXP 62
68069: PUSH
68070: LD_EXP 62
68074: PPUSH
68075: LD_VAR 0 4
68079: PPUSH
68080: LD_EXP 62
68084: PUSH
68085: LD_VAR 0 4
68089: ARRAY
68090: PPUSH
68091: LD_INT 1
68093: PPUSH
68094: CALL_OW 3
68098: PPUSH
68099: CALL_OW 1
68103: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
68104: LD_ADDR_EXP 64
68108: PUSH
68109: LD_EXP 64
68113: PPUSH
68114: LD_VAR 0 4
68118: PUSH
68119: LD_EXP 64
68123: PUSH
68124: LD_VAR 0 4
68128: ARRAY
68129: PUSH
68130: LD_INT 1
68132: PLUS
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PPUSH
68138: LD_VAR 0 1
68142: PPUSH
68143: CALL 19309 0 3
68147: ST_TO_ADDR
// exit ;
68148: POP
68149: POP
68150: GO 68156
// end ; end ;
68152: GO 68000
68154: POP
68155: POP
// end ;
68156: LD_VAR 0 3
68160: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
68161: LD_INT 0
68163: PPUSH
68164: PPUSH
68165: PPUSH
// if not mc_bases then
68166: LD_EXP 57
68170: NOT
68171: IFFALSE 68175
// exit ;
68173: GO 68365
// for i = 1 to mc_bases do
68175: LD_ADDR_VAR 0 4
68179: PUSH
68180: DOUBLE
68181: LD_INT 1
68183: DEC
68184: ST_TO_ADDR
68185: LD_EXP 57
68189: PUSH
68190: FOR_TO
68191: IFFALSE 68278
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
68193: LD_VAR 0 1
68197: PUSH
68198: LD_EXP 65
68202: PUSH
68203: LD_VAR 0 4
68207: ARRAY
68208: IN
68209: PUSH
68210: LD_VAR 0 1
68214: PUSH
68215: LD_EXP 66
68219: PUSH
68220: LD_VAR 0 4
68224: ARRAY
68225: IN
68226: NOT
68227: AND
68228: IFFALSE 68276
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
68230: LD_ADDR_EXP 66
68234: PUSH
68235: LD_EXP 66
68239: PPUSH
68240: LD_VAR 0 4
68244: PUSH
68245: LD_EXP 66
68249: PUSH
68250: LD_VAR 0 4
68254: ARRAY
68255: PUSH
68256: LD_INT 1
68258: PLUS
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PPUSH
68264: LD_VAR 0 1
68268: PPUSH
68269: CALL 19309 0 3
68273: ST_TO_ADDR
// break ;
68274: GO 68278
// end ; end ;
68276: GO 68190
68278: POP
68279: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
68280: LD_VAR 0 1
68284: PPUSH
68285: CALL_OW 257
68289: PUSH
68290: LD_EXP 83
68294: IN
68295: PUSH
68296: LD_VAR 0 1
68300: PPUSH
68301: CALL_OW 266
68305: PUSH
68306: LD_INT 5
68308: EQUAL
68309: AND
68310: PUSH
68311: LD_VAR 0 2
68315: PPUSH
68316: CALL_OW 110
68320: PUSH
68321: LD_INT 18
68323: NONEQUAL
68324: AND
68325: IFFALSE 68365
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
68327: LD_VAR 0 2
68331: PPUSH
68332: CALL_OW 257
68336: PUSH
68337: LD_INT 5
68339: PUSH
68340: LD_INT 8
68342: PUSH
68343: LD_INT 9
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: LIST
68350: IN
68351: IFFALSE 68365
// SetClass ( unit , 1 ) ;
68353: LD_VAR 0 2
68357: PPUSH
68358: LD_INT 1
68360: PPUSH
68361: CALL_OW 336
// end ;
68365: LD_VAR 0 3
68369: RET
// export function MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
68370: LD_INT 0
68372: PPUSH
68373: PPUSH
// if not mc_bases then
68374: LD_EXP 57
68378: NOT
68379: IFFALSE 68383
// exit ;
68381: GO 68499
// if GetLives ( abandoned_vehicle ) > 250 then
68383: LD_VAR 0 2
68387: PPUSH
68388: CALL_OW 256
68392: PUSH
68393: LD_INT 250
68395: GREATER
68396: IFFALSE 68400
// exit ;
68398: GO 68499
// for i = 1 to mc_bases do
68400: LD_ADDR_VAR 0 6
68404: PUSH
68405: DOUBLE
68406: LD_INT 1
68408: DEC
68409: ST_TO_ADDR
68410: LD_EXP 57
68414: PUSH
68415: FOR_TO
68416: IFFALSE 68497
// begin if driver in mc_bases [ i ] then
68418: LD_VAR 0 1
68422: PUSH
68423: LD_EXP 57
68427: PUSH
68428: LD_VAR 0 6
68432: ARRAY
68433: IN
68434: IFFALSE 68495
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
68436: LD_VAR 0 1
68440: PPUSH
68441: LD_EXP 57
68445: PUSH
68446: LD_VAR 0 6
68450: ARRAY
68451: PPUSH
68452: LD_INT 2
68454: PUSH
68455: LD_INT 30
68457: PUSH
68458: LD_INT 0
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 30
68467: PUSH
68468: LD_INT 1
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: LIST
68479: PPUSH
68480: CALL_OW 72
68484: PUSH
68485: LD_INT 1
68487: ARRAY
68488: PPUSH
68489: CALL_OW 112
// break ;
68493: GO 68497
// end ; end ;
68495: GO 68415
68497: POP
68498: POP
// end ;
68499: LD_VAR 0 5
68503: RET
