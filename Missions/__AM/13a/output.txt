// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitVariables ;
   8: CALL 574 0 0
// InitMacro ;
  12: CALL 42681 0 0
// PrepareNature ( 3 , 3 , 3 , 4 , 3 , 0 , 0 , nature_area , 0 ) ;
  16: LD_INT 3
  18: PPUSH
  19: LD_INT 3
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 4
  27: PPUSH
  28: LD_INT 3
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: LD_INT 5
  39: PPUSH
  40: LD_INT 0
  42: PPUSH
  43: CALL 38556 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_russian , 0 ) ;
  47: LD_INT 0
  49: PPUSH
  50: LD_INT 0
  52: PPUSH
  53: LD_INT 5
  55: PPUSH
  56: LD_INT 0
  58: PPUSH
  59: LD_INT 0
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: LD_INT 0
  67: PPUSH
  68: LD_INT 8
  70: PPUSH
  71: LD_INT 0
  73: PPUSH
  74: CALL 38556 0 9
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 1 , 0 , area_apeman_arabian , 0 ) ;
  78: LD_INT 0
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 6
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: LD_INT 0
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: LD_INT 6
 101: PPUSH
 102: LD_INT 0
 104: PPUSH
 105: CALL 38556 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_alliance , 0 ) ;
 109: LD_INT 0
 111: PPUSH
 112: LD_INT 0
 114: PPUSH
 115: LD_INT 5
 117: PPUSH
 118: LD_INT 0
 120: PPUSH
 121: LD_INT 0
 123: PPUSH
 124: LD_INT 0
 126: PPUSH
 127: LD_INT 0
 129: PPUSH
 130: LD_INT 12
 132: PPUSH
 133: LD_INT 0
 135: PPUSH
 136: CALL 38556 0 9
// PrepareArabian ;
 140: CALL 2106 0 0
// PrepareRussian ;
 144: CALL 1862 0 0
// PrepareAlliance ;
 148: CALL 622 0 0
// Skirmish_Start ;
 152: CALL 42894 0 0
// Action ;
 156: CALL 2645 0 0
// end ;
 160: END
// export function CustomInitMacro ; var i ; begin
 161: LD_INT 0
 163: PPUSH
 164: PPUSH
// mc_parking := [ parking_arabian , parking_russian ] ;
 165: LD_ADDR_EXP 62
 169: PUSH
 170: LD_INT 1
 172: PUSH
 173: LD_INT 2
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// mc_scan_area := [ area_base_arabian , area_base_russian ] ;
 180: LD_ADDR_EXP 63
 184: PUSH
 185: LD_INT 3
 187: PUSH
 188: LD_INT 4
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 12 , 15 , 18 ] [ Difficulty ] , minefield ) ;
 195: LD_INT 1
 197: PPUSH
 198: LD_INT 12
 200: PUSH
 201: LD_INT 15
 203: PUSH
 204: LD_INT 18
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: LIST
 211: PUSH
 212: LD_OWVAR 67
 216: ARRAY
 217: PPUSH
 218: LD_INT 7
 220: PPUSH
 221: CALL 55724 0 3
// MC_SetDefenderList ( 1 , arabian_guard ) ;
 225: LD_INT 1
 227: PPUSH
 228: LD_EXP 36
 232: PPUSH
 233: CALL 56093 0 2
// MC_SetTame ( 1 , area_apeman_arabian ) ;
 237: LD_INT 1
 239: PPUSH
 240: LD_INT 6
 242: PPUSH
 243: CALL 56450 0 2
// MC_SetCratesArea ( 1 , [ area_collect_arabian ] ) ;
 247: LD_INT 1
 249: PPUSH
 250: LD_INT 9
 252: PUSH
 253: EMPTY
 254: LIST
 255: PPUSH
 256: CALL 56592 0 2
// MC_InsertProduceList ( 1 , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
 260: LD_INT 1
 262: PPUSH
 263: LD_INT 13
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 2
 271: PUSH
 272: LD_INT 32
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: PPUSH
 281: CALL 56030 0 2
// MC_SetLabKind ( 2 , [ b_lab_computer , b_lab_spacetime , b_lab_weapon , b_lab_siberium ] ) ;
 285: LD_INT 2
 287: PPUSH
 288: LD_INT 12
 290: PUSH
 291: LD_INT 14
 293: PUSH
 294: LD_INT 10
 296: PUSH
 297: LD_INT 11
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: LIST
 305: PPUSH
 306: CALL 56499 0 2
// MC_SetDefenderList ( 2 , russian_guard ) ;
 310: LD_INT 2
 312: PPUSH
 313: LD_EXP 34
 317: PPUSH
 318: CALL 56093 0 2
// MC_SetTame ( 2 , area_apeman_russian ) ;
 322: LD_INT 2
 324: PPUSH
 325: LD_INT 8
 327: PPUSH
 328: CALL 56450 0 2
// MC_SetCratesArea ( 2 , [ area_collect_russian ] ) ;
 332: LD_INT 2
 334: PPUSH
 335: LD_INT 10
 337: PUSH
 338: EMPTY
 339: LIST
 340: PPUSH
 341: CALL 56592 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 71 , 116 , 4 ] , [ b_armoury , 85 , 116 , 4 ] , [ b_bunker , 83 , 111 , 4 ] , [ b_bunker , 87 , 121 , 4 ] , [ b_turret , 88 , 128 , 4 ] , [ b_bunker , 59 , 89 , 3 ] , [ b_turret , 69 , 98 , 3 ] , [ b_turret , 77 , 103 , 3 ] , [ b_turret , 83 , 105 , 3 ] , [ b_turret , 71 , 125 , 5 ] ] ) ;
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 6
 350: PUSH
 351: LD_INT 71
 353: PUSH
 354: LD_INT 116
 356: PUSH
 357: LD_INT 4
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: LIST
 364: LIST
 365: PUSH
 366: LD_INT 4
 368: PUSH
 369: LD_INT 85
 371: PUSH
 372: LD_INT 116
 374: PUSH
 375: LD_INT 4
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 32
 386: PUSH
 387: LD_INT 83
 389: PUSH
 390: LD_INT 111
 392: PUSH
 393: LD_INT 4
 395: PUSH
 396: EMPTY
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 32
 404: PUSH
 405: LD_INT 87
 407: PUSH
 408: LD_INT 121
 410: PUSH
 411: LD_INT 4
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: LIST
 419: PUSH
 420: LD_INT 33
 422: PUSH
 423: LD_INT 88
 425: PUSH
 426: LD_INT 128
 428: PUSH
 429: LD_INT 4
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 32
 440: PUSH
 441: LD_INT 59
 443: PUSH
 444: LD_INT 89
 446: PUSH
 447: LD_INT 3
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: PUSH
 456: LD_INT 33
 458: PUSH
 459: LD_INT 69
 461: PUSH
 462: LD_INT 98
 464: PUSH
 465: LD_INT 3
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 33
 476: PUSH
 477: LD_INT 77
 479: PUSH
 480: LD_INT 103
 482: PUSH
 483: LD_INT 3
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_INT 33
 494: PUSH
 495: LD_INT 83
 497: PUSH
 498: LD_INT 105
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: PUSH
 510: LD_INT 33
 512: PUSH
 513: LD_INT 71
 515: PUSH
 516: LD_INT 125
 518: PUSH
 519: LD_INT 5
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: PPUSH
 540: CALL 55934 0 2
// MC_InsertProduceList ( 2 , [ ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay ] ) ;
 544: LD_INT 2
 546: PPUSH
 547: LD_INT 21
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 3
 555: PUSH
 556: LD_INT 51
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: PPUSH
 565: CALL 56030 0 2
// end ;
 569: LD_VAR 0 1
 573: RET
// export debug , game , freedom , gossudarov_arrive , ru_lab_builded , player_spotted ; function InitVariables ; begin
 574: LD_INT 0
 576: PPUSH
// debug := true ;
 577: LD_ADDR_EXP 1
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// game := true ;
 585: LD_ADDR_EXP 2
 589: PUSH
 590: LD_INT 1
 592: ST_TO_ADDR
// gossudarov_arrive := false ;
 593: LD_ADDR_EXP 4
 597: PUSH
 598: LD_INT 0
 600: ST_TO_ADDR
// ru_lab_builded := false ;
 601: LD_ADDR_EXP 5
 605: PUSH
 606: LD_INT 0
 608: ST_TO_ADDR
// player_spotted := false ;
 609: LD_ADDR_EXP 6
 613: PUSH
 614: LD_INT 0
 616: ST_TO_ADDR
// end ; end_of_file
 617: LD_VAR 0 1
 621: RET
// export JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export Gossudarov , Kirilenkova , Titov , Fadeev , Dolgov , Petrosyan ; export Burlak , Bielkov , Gnyevko ; export function PrepareAlliance ; var veh ; begin
 622: LD_INT 0
 624: PPUSH
 625: PPUSH
// uc_side := 7 ;
 626: LD_ADDR_OWVAR 20
 630: PUSH
 631: LD_INT 7
 633: ST_TO_ADDR
// uc_nation := 1 ;
 634: LD_ADDR_OWVAR 21
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 12a_ ) ;
 642: LD_ADDR_EXP 7
 646: PUSH
 647: LD_STRING JMM
 649: PPUSH
 650: LD_EXP 1
 654: NOT
 655: PPUSH
 656: LD_STRING 12a_
 658: PPUSH
 659: CALL 5291 0 3
 663: ST_TO_ADDR
// PlaceUnitXY ( JMM , 71 , 23 , false ) ;
 664: LD_EXP 7
 668: PPUSH
 669: LD_INT 71
 671: PPUSH
 672: LD_INT 23
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 48
// SetClass ( JMM , 2 ) ;
 682: LD_EXP 7
 686: PPUSH
 687: LD_INT 2
 689: PPUSH
 690: CALL_OW 336
// Roth := PrepareUnit ( Roth , ( not debug ) , 12a_ ) ;
 694: LD_ADDR_EXP 8
 698: PUSH
 699: LD_STRING Roth
 701: PPUSH
 702: LD_EXP 1
 706: NOT
 707: PPUSH
 708: LD_STRING 12a_
 710: PPUSH
 711: CALL 5291 0 3
 715: ST_TO_ADDR
// if Roth then
 716: LD_EXP 8
 720: IFFALSE 740
// PlaceUnitXY ( Roth , 71 , 21 , false ) ;
 722: LD_EXP 8
 726: PPUSH
 727: LD_INT 71
 729: PPUSH
 730: LD_INT 21
 732: PPUSH
 733: LD_INT 0
 735: PPUSH
 736: CALL_OW 48
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 12a_ ) ;
 740: LD_ADDR_EXP 9
 744: PUSH
 745: LD_STRING Lisa
 747: PPUSH
 748: LD_EXP 1
 752: NOT
 753: PPUSH
 754: LD_STRING 12a_
 756: PPUSH
 757: CALL 5291 0 3
 761: ST_TO_ADDR
// if Lisa then
 762: LD_EXP 9
 766: IFFALSE 783
// PlaceUnitArea ( Lisa , alliance_start , false ) ;
 768: LD_EXP 9
 772: PPUSH
 773: LD_INT 13
 775: PPUSH
 776: LD_INT 0
 778: PPUSH
 779: CALL_OW 49
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 12a_ ) ;
 783: LD_ADDR_EXP 10
 787: PUSH
 788: LD_STRING Donaldson
 790: PPUSH
 791: LD_EXP 1
 795: NOT
 796: PPUSH
 797: LD_STRING 12a_
 799: PPUSH
 800: CALL 5291 0 3
 804: ST_TO_ADDR
// if Donaldson then
 805: LD_EXP 10
 809: IFFALSE 826
// PlaceUnitArea ( Donaldson , alliance_start , false ) ;
 811: LD_EXP 10
 815: PPUSH
 816: LD_INT 13
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 12a_ ) ;
 826: LD_ADDR_EXP 11
 830: PUSH
 831: LD_STRING Bobby
 833: PPUSH
 834: LD_EXP 1
 838: NOT
 839: PPUSH
 840: LD_STRING 12a_
 842: PPUSH
 843: CALL 5291 0 3
 847: ST_TO_ADDR
// if Bobby then
 848: LD_EXP 11
 852: IFFALSE 869
// PlaceUnitArea ( Bobby , alliance_start , false ) ;
 854: LD_EXP 11
 858: PPUSH
 859: LD_INT 13
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 12a_ ) ;
 869: LD_ADDR_EXP 12
 873: PUSH
 874: LD_STRING Cyrus
 876: PPUSH
 877: LD_EXP 1
 881: NOT
 882: PPUSH
 883: LD_STRING 12a_
 885: PPUSH
 886: CALL 5291 0 3
 890: ST_TO_ADDR
// if Cyrus then
 891: LD_EXP 12
 895: IFFALSE 912
// PlaceUnitArea ( Cyrus , alliance_start , false ) ;
 897: LD_EXP 12
 901: PPUSH
 902: LD_INT 13
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL_OW 49
// Denis := PrepareUnit ( Denis , ( not debug ) , 12a_ ) ;
 912: LD_ADDR_EXP 13
 916: PUSH
 917: LD_STRING Denis
 919: PPUSH
 920: LD_EXP 1
 924: NOT
 925: PPUSH
 926: LD_STRING 12a_
 928: PPUSH
 929: CALL 5291 0 3
 933: ST_TO_ADDR
// if Denis then
 934: LD_EXP 13
 938: IFFALSE 955
// PlaceUnitArea ( Denis , alliance_start , false ) ;
 940: LD_EXP 13
 944: PPUSH
 945: LD_INT 13
 947: PPUSH
 948: LD_INT 0
 950: PPUSH
 951: CALL_OW 49
// Brown := PrepareUnit ( Brown , ( not debug ) , 12a_ ) ;
 955: LD_ADDR_EXP 14
 959: PUSH
 960: LD_STRING Brown
 962: PPUSH
 963: LD_EXP 1
 967: NOT
 968: PPUSH
 969: LD_STRING 12a_
 971: PPUSH
 972: CALL 5291 0 3
 976: ST_TO_ADDR
// if Brown then
 977: LD_EXP 14
 981: IFFALSE 998
// PlaceUnitArea ( Brown , alliance_start , false ) ;
 983: LD_EXP 14
 987: PPUSH
 988: LD_INT 13
 990: PPUSH
 991: LD_INT 0
 993: PPUSH
 994: CALL_OW 49
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 12a_ ) ;
 998: LD_ADDR_EXP 15
1002: PUSH
1003: LD_STRING Gladstone
1005: PPUSH
1006: LD_EXP 1
1010: NOT
1011: PPUSH
1012: LD_STRING 12a_
1014: PPUSH
1015: CALL 5291 0 3
1019: ST_TO_ADDR
// if Gladstone then
1020: LD_EXP 15
1024: IFFALSE 1041
// PlaceUnitArea ( Gladstone , alliance_start , false ) ;
1026: LD_EXP 15
1030: PPUSH
1031: LD_INT 13
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// Houten := PrepareUnit ( Houten , ( not debug ) , 12a_ ) ;
1041: LD_ADDR_EXP 16
1045: PUSH
1046: LD_STRING Houten
1048: PPUSH
1049: LD_EXP 1
1053: NOT
1054: PPUSH
1055: LD_STRING 12a_
1057: PPUSH
1058: CALL 5291 0 3
1062: ST_TO_ADDR
// if Houten then
1063: LD_EXP 16
1067: IFFALSE 1084
// PlaceUnitArea ( Houten , alliance_start , false ) ;
1069: LD_EXP 16
1073: PPUSH
1074: LD_INT 13
1076: PPUSH
1077: LD_INT 0
1079: PPUSH
1080: CALL_OW 49
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 12a_ ) ;
1084: LD_ADDR_EXP 17
1088: PUSH
1089: LD_STRING Cornel
1091: PPUSH
1092: LD_EXP 1
1096: NOT
1097: PPUSH
1098: LD_STRING 12a_
1100: PPUSH
1101: CALL 5291 0 3
1105: ST_TO_ADDR
// if Cornel then
1106: LD_EXP 17
1110: IFFALSE 1127
// PlaceUnitArea ( Cornel , alliance_start , false ) ;
1112: LD_EXP 17
1116: PPUSH
1117: LD_INT 13
1119: PPUSH
1120: LD_INT 0
1122: PPUSH
1123: CALL_OW 49
// Gary := PrepareUnit ( Gary , ( not debug ) , 12a_ ) ;
1127: LD_ADDR_EXP 18
1131: PUSH
1132: LD_STRING Gary
1134: PPUSH
1135: LD_EXP 1
1139: NOT
1140: PPUSH
1141: LD_STRING 12a_
1143: PPUSH
1144: CALL 5291 0 3
1148: ST_TO_ADDR
// if Gary then
1149: LD_EXP 18
1153: IFFALSE 1170
// PlaceUnitArea ( Gary , alliance_start , false ) ;
1155: LD_EXP 18
1159: PPUSH
1160: LD_INT 13
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 49
// Frank := PrepareUnit ( Frank , ( not debug ) , 12a_ ) ;
1170: LD_ADDR_EXP 19
1174: PUSH
1175: LD_STRING Frank
1177: PPUSH
1178: LD_EXP 1
1182: NOT
1183: PPUSH
1184: LD_STRING 12a_
1186: PPUSH
1187: CALL 5291 0 3
1191: ST_TO_ADDR
// if Frank then
1192: LD_EXP 19
1196: IFFALSE 1213
// PlaceUnitArea ( Frank , alliance_start , false ) ;
1198: LD_EXP 19
1202: PPUSH
1203: LD_INT 13
1205: PPUSH
1206: LD_INT 0
1208: PPUSH
1209: CALL_OW 49
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 12a_ ) ;
1213: LD_ADDR_EXP 20
1217: PUSH
1218: LD_STRING Kikuchi
1220: PPUSH
1221: LD_EXP 1
1225: NOT
1226: PPUSH
1227: LD_STRING 12a_
1229: PPUSH
1230: CALL 5291 0 3
1234: ST_TO_ADDR
// if Kikuchi then
1235: LD_EXP 20
1239: IFFALSE 1256
// PlaceUnitArea ( Kikuchi , alliance_start , false ) ;
1241: LD_EXP 20
1245: PPUSH
1246: LD_INT 13
1248: PPUSH
1249: LD_INT 0
1251: PPUSH
1252: CALL_OW 49
// Simms := PrepareUnit ( Simms , ( not debug ) , 12a_ ) ;
1256: LD_ADDR_EXP 21
1260: PUSH
1261: LD_STRING Simms
1263: PPUSH
1264: LD_EXP 1
1268: NOT
1269: PPUSH
1270: LD_STRING 12a_
1272: PPUSH
1273: CALL 5291 0 3
1277: ST_TO_ADDR
// if Simms then
1278: LD_EXP 21
1282: IFFALSE 1299
// PlaceUnitArea ( Simms , alliance_start , false ) ;
1284: LD_EXP 21
1288: PPUSH
1289: LD_INT 13
1291: PPUSH
1292: LD_INT 0
1294: PPUSH
1295: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 12a_ ) ;
1299: LD_ADDR_EXP 22
1303: PUSH
1304: LD_STRING Joan
1306: PPUSH
1307: LD_EXP 1
1311: NOT
1312: PPUSH
1313: LD_STRING 12a_
1315: PPUSH
1316: CALL 5291 0 3
1320: ST_TO_ADDR
// if Joan then
1321: LD_EXP 22
1325: IFFALSE 1342
// PlaceUnitArea ( Joan , alliance_start , false ) ;
1327: LD_EXP 22
1331: PPUSH
1332: LD_INT 13
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL_OW 49
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 12a_ ) ;
1342: LD_ADDR_EXP 23
1346: PUSH
1347: LD_STRING DeltaDoctor
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_STRING 12a_
1358: PPUSH
1359: CALL 5291 0 3
1363: ST_TO_ADDR
// if DeltaDoctor then
1364: LD_EXP 23
1368: IFFALSE 1385
// PlaceUnitArea ( DeltaDoctor , alliance_start , false ) ;
1370: LD_EXP 23
1374: PPUSH
1375: LD_INT 13
1377: PPUSH
1378: LD_INT 0
1380: PPUSH
1381: CALL_OW 49
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1385: LD_INT 3
1387: PPUSH
1388: LD_INT 3
1390: PPUSH
1391: LD_INT 3
1393: PPUSH
1394: LD_INT 12
1396: PPUSH
1397: LD_INT 100
1399: PPUSH
1400: CALL 11272 0 5
// veh := CreateVehicle ;
1404: LD_ADDR_VAR 0 2
1408: PUSH
1409: CALL_OW 45
1413: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1414: LD_VAR 0 2
1418: PPUSH
1419: LD_INT 2
1421: PPUSH
1422: CALL_OW 233
// PlaceUnitXY ( veh , 63 , 9 , false ) ;
1426: LD_VAR 0 2
1430: PPUSH
1431: LD_INT 63
1433: PPUSH
1434: LD_INT 9
1436: PPUSH
1437: LD_INT 0
1439: PPUSH
1440: CALL_OW 48
// SetCargo ( veh , mat_artifact , 30 ) ;
1444: LD_VAR 0 2
1448: PPUSH
1449: LD_INT 4
1451: PPUSH
1452: LD_INT 30
1454: PPUSH
1455: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , debug ) then
1459: LD_STRING 11_artifact_captured
1461: PPUSH
1462: LD_EXP 1
1466: PPUSH
1467: CALL_OW 30
1471: IFFALSE 1547
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1473: LD_INT 3
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: LD_INT 3
1481: PPUSH
1482: LD_INT 12
1484: PPUSH
1485: LD_INT 100
1487: PPUSH
1488: CALL 11272 0 5
// veh := CreateVehicle ;
1492: LD_ADDR_VAR 0 2
1496: PUSH
1497: CALL_OW 45
1501: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1502: LD_VAR 0 2
1506: PPUSH
1507: LD_INT 2
1509: PPUSH
1510: CALL_OW 233
// PlaceUnitXY ( veh , 60 , 4 , false ) ;
1514: LD_VAR 0 2
1518: PPUSH
1519: LD_INT 60
1521: PPUSH
1522: LD_INT 4
1524: PPUSH
1525: LD_INT 0
1527: PPUSH
1528: CALL_OW 48
// SetCargo ( veh , mat_artifact , 50 ) ;
1532: LD_VAR 0 2
1536: PPUSH
1537: LD_INT 4
1539: PPUSH
1540: LD_INT 50
1542: PPUSH
1543: CALL_OW 290
// end ; end ;
1547: LD_VAR 0 1
1551: RET
// export function PrepareGossudarov ; var tmp , i , un ; begin
1552: LD_INT 0
1554: PPUSH
1555: PPUSH
1556: PPUSH
1557: PPUSH
// uc_side := 6 ;
1558: LD_ADDR_OWVAR 20
1562: PUSH
1563: LD_INT 6
1565: ST_TO_ADDR
// uc_nation := 3 ;
1566: LD_ADDR_OWVAR 21
1570: PUSH
1571: LD_INT 3
1573: ST_TO_ADDR
// InitHc ;
1574: CALL_OW 19
// Gossudarov := NewCharacter ( Gossudarov ) ;
1578: LD_ADDR_EXP 24
1582: PUSH
1583: LD_STRING Gossudarov
1585: PPUSH
1586: CALL_OW 25
1590: ST_TO_ADDR
// Kirilenkova := NewCharacter ( Kirilenkova ) ;
1591: LD_ADDR_EXP 25
1595: PUSH
1596: LD_STRING Kirilenkova
1598: PPUSH
1599: CALL_OW 25
1603: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
1604: LD_ADDR_EXP 26
1608: PUSH
1609: LD_STRING Titov
1611: PPUSH
1612: CALL_OW 25
1616: ST_TO_ADDR
// Fadeev := NewCharacter ( Fadeev ) ;
1617: LD_ADDR_EXP 27
1621: PUSH
1622: LD_STRING Fadeev
1624: PPUSH
1625: CALL_OW 25
1629: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
1630: LD_ADDR_EXP 28
1634: PUSH
1635: LD_STRING Dolgov
1637: PPUSH
1638: CALL_OW 25
1642: ST_TO_ADDR
// Petrosyan := NewCharacter ( Petrosyan ) ;
1643: LD_ADDR_EXP 29
1647: PUSH
1648: LD_STRING Petrosyan
1650: PPUSH
1651: CALL_OW 25
1655: ST_TO_ADDR
// PrepareScientist ( sex_male , 8 ) ;
1656: LD_INT 1
1658: PPUSH
1659: LD_INT 8
1661: PPUSH
1662: CALL_OW 384
// un := CreateHuman ;
1666: LD_ADDR_VAR 0 4
1670: PUSH
1671: CALL_OW 44
1675: ST_TO_ADDR
// PlaceUnitArea ( un , gossudarov_spawn , false ) ;
1676: LD_VAR 0 4
1680: PPUSH
1681: LD_INT 14
1683: PPUSH
1684: LD_INT 0
1686: PPUSH
1687: CALL_OW 49
// tmp := [ Gossudarov , Kirilenkova , Titov , Fadeev , Dolgov , Petrosyan , un ] ;
1691: LD_ADDR_VAR 0 2
1695: PUSH
1696: LD_EXP 24
1700: PUSH
1701: LD_EXP 25
1705: PUSH
1706: LD_EXP 26
1710: PUSH
1711: LD_EXP 27
1715: PUSH
1716: LD_EXP 28
1720: PUSH
1721: LD_EXP 29
1725: PUSH
1726: LD_VAR 0 4
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: ST_TO_ADDR
// for i in tmp do
1740: LD_ADDR_VAR 0 3
1744: PUSH
1745: LD_VAR 0 2
1749: PUSH
1750: FOR_IN
1751: IFFALSE 1770
// PlaceUnitArea ( i , gossudarov_spawn , false ) ;
1753: LD_VAR 0 3
1757: PPUSH
1758: LD_INT 14
1760: PPUSH
1761: LD_INT 0
1763: PPUSH
1764: CALL_OW 49
1768: GO 1750
1770: POP
1771: POP
// ComMoveXY ( tmp , GetX ( freedom ) , GetY ( freedom ) ) ;
1772: LD_VAR 0 2
1776: PPUSH
1777: LD_EXP 3
1781: PPUSH
1782: CALL_OW 250
1786: PPUSH
1787: LD_EXP 3
1791: PPUSH
1792: CALL_OW 251
1796: PPUSH
1797: CALL_OW 111
// end ;
1801: LD_VAR 0 1
1805: RET
// export function PrepareBielkov ; begin
1806: LD_INT 0
1808: PPUSH
// uc_side := 4 ;
1809: LD_ADDR_OWVAR 20
1813: PUSH
1814: LD_INT 4
1816: ST_TO_ADDR
// uc_nation := 3 ;
1817: LD_ADDR_OWVAR 21
1821: PUSH
1822: LD_INT 3
1824: ST_TO_ADDR
// InitHc ;
1825: CALL_OW 19
// Bielkov := NewCharacter ( Belkov ) ;
1829: LD_ADDR_EXP 31
1833: PUSH
1834: LD_STRING Belkov
1836: PPUSH
1837: CALL_OW 25
1841: ST_TO_ADDR
// PlaceUnitArea ( Bielkov , gossudarov_spawn , false ) ;
1842: LD_EXP 31
1846: PPUSH
1847: LD_INT 14
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// end ; end_of_file
1857: LD_VAR 0 1
1861: RET
// export russian_force , russian_guard ; export function PrepareRussian ; var i , veh , tmp ; begin
1862: LD_INT 0
1864: PPUSH
1865: PPUSH
1866: PPUSH
1867: PPUSH
// uc_side := 3 ;
1868: LD_ADDR_OWVAR 20
1872: PUSH
1873: LD_INT 3
1875: ST_TO_ADDR
// uc_nation := 3 ;
1876: LD_ADDR_OWVAR 21
1880: PUSH
1881: LD_INT 3
1883: ST_TO_ADDR
// russian_force := PrepareBase ( ru_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 10000 , 3000 , 300 ] , [ 9 , 5 , 6 , 6 ] ) ;
1884: LD_ADDR_EXP 33
1888: PUSH
1889: LD_INT 47
1891: PPUSH
1892: LD_STRING 
1894: PPUSH
1895: LD_INT 7
1897: PUSH
1898: LD_INT 8
1900: PUSH
1901: LD_INT 9
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: PUSH
1909: LD_OWVAR 67
1913: ARRAY
1914: PPUSH
1915: LD_INT 10000
1917: PUSH
1918: LD_INT 3000
1920: PUSH
1921: LD_INT 300
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: LIST
1928: PPUSH
1929: LD_INT 9
1931: PUSH
1932: LD_INT 5
1934: PUSH
1935: LD_INT 6
1937: PUSH
1938: LD_INT 6
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PPUSH
1947: CALL 14671 0 5
1951: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , russian_force ) ;
1952: LD_ADDR_EXP 38
1956: PUSH
1957: LD_EXP 38
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 33
1969: PPUSH
1970: CALL_OW 1
1974: ST_TO_ADDR
// tmp := [ ] ;
1975: LD_ADDR_VAR 0 4
1979: PUSH
1980: EMPTY
1981: ST_TO_ADDR
// for i = 1 to 4 do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 4
1994: PUSH
1995: FOR_TO
1996: IFFALSE 2089
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun ] [ i mod 4 + 1 ] , 100 ) ;
1998: LD_INT 22
2000: PPUSH
2001: LD_INT 3
2003: PPUSH
2004: LD_INT 3
2006: PPUSH
2007: LD_INT 43
2009: PUSH
2010: LD_INT 45
2012: PUSH
2013: LD_INT 45
2015: PUSH
2016: LD_INT 44
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: LD_VAR 0 2
2029: PUSH
2030: LD_INT 4
2032: MOD
2033: PUSH
2034: LD_INT 1
2036: PLUS
2037: ARRAY
2038: PPUSH
2039: LD_INT 100
2041: PPUSH
2042: CALL 11272 0 5
// veh := CreateVehicle ;
2046: LD_ADDR_VAR 0 3
2050: PUSH
2051: CALL_OW 45
2055: ST_TO_ADDR
// tmp := tmp ^ veh ;
2056: LD_ADDR_VAR 0 4
2060: PUSH
2061: LD_VAR 0 4
2065: PUSH
2066: LD_VAR 0 3
2070: ADD
2071: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_russian , false ) ;
2072: LD_VAR 0 3
2076: PPUSH
2077: LD_INT 2
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// end ;
2087: GO 1995
2089: POP
2090: POP
// russian_guard := tmp ;
2091: LD_ADDR_EXP 34
2095: PUSH
2096: LD_VAR 0 4
2100: ST_TO_ADDR
// end ; end_of_file
2101: LD_VAR 0 1
2105: RET
// export arabian_force , arabian_guard ; export function PrepareArabian ; var i , veh , tmp , xy , un , un2 ; begin
2106: LD_INT 0
2108: PPUSH
2109: PPUSH
2110: PPUSH
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
// uc_side := 2 ;
2115: LD_ADDR_OWVAR 20
2119: PUSH
2120: LD_INT 2
2122: ST_TO_ADDR
// uc_nation := 2 ;
2123: LD_ADDR_OWVAR 21
2127: PUSH
2128: LD_INT 2
2130: ST_TO_ADDR
// arabian_force := PrepareBase ( ar_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 5000 , 1000 , 300 ] , [ 22 , 5 , 6 , 9 ] ) ;
2131: LD_ADDR_EXP 35
2135: PUSH
2136: LD_INT 1
2138: PPUSH
2139: LD_STRING 
2141: PPUSH
2142: LD_INT 7
2144: PUSH
2145: LD_INT 8
2147: PUSH
2148: LD_INT 9
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: PUSH
2156: LD_OWVAR 67
2160: ARRAY
2161: PPUSH
2162: LD_INT 5000
2164: PUSH
2165: LD_INT 1000
2167: PUSH
2168: LD_INT 300
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: PPUSH
2176: LD_INT 22
2178: PUSH
2179: LD_INT 5
2181: PUSH
2182: LD_INT 6
2184: PUSH
2185: LD_INT 9
2187: PUSH
2188: EMPTY
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: PPUSH
2194: CALL 14671 0 5
2198: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , arabian_force ) ;
2199: LD_ADDR_EXP 38
2203: PUSH
2204: LD_EXP 38
2208: PPUSH
2209: LD_INT 1
2211: PPUSH
2212: LD_EXP 35
2216: PPUSH
2217: CALL_OW 1
2221: ST_TO_ADDR
// tmp := [ ] ;
2222: LD_ADDR_VAR 0 4
2226: PUSH
2227: EMPTY
2228: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2229: LD_ADDR_OWVAR 37
2233: PUSH
2234: LD_INT 14
2236: ST_TO_ADDR
// vc_engine := engine_siberite ;
2237: LD_ADDR_OWVAR 39
2241: PUSH
2242: LD_INT 3
2244: ST_TO_ADDR
// vc_control := control_manual ;
2245: LD_ADDR_OWVAR 38
2249: PUSH
2250: LD_INT 1
2252: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2253: LD_ADDR_OWVAR 40
2257: PUSH
2258: LD_INT 31
2260: ST_TO_ADDR
// for i = 1 to 3 do
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: DOUBLE
2267: LD_INT 1
2269: DEC
2270: ST_TO_ADDR
2271: LD_INT 3
2273: PUSH
2274: FOR_TO
2275: IFFALSE 2519
// begin xy := [ [ 153 , 71 ] , [ 155 , 81 ] ] [ i mod 2 + 1 ] ;
2277: LD_ADDR_VAR 0 5
2281: PUSH
2282: LD_INT 153
2284: PUSH
2285: LD_INT 71
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: LD_INT 155
2294: PUSH
2295: LD_INT 81
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_VAR 0 2
2310: PUSH
2311: LD_INT 2
2313: MOD
2314: PUSH
2315: LD_INT 1
2317: PLUS
2318: ARRAY
2319: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
2320: LD_INT 0
2322: PPUSH
2323: LD_INT 3
2325: PPUSH
2326: LD_INT 7
2328: PUSH
2329: LD_INT 8
2331: PUSH
2332: LD_INT 9
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: LIST
2339: PUSH
2340: LD_OWVAR 67
2344: ARRAY
2345: PPUSH
2346: CALL_OW 380
// un := CreateVehicle ;
2350: LD_ADDR_VAR 0 6
2354: PUSH
2355: CALL_OW 45
2359: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2360: LD_VAR 0 6
2364: PPUSH
2365: LD_INT 0
2367: PPUSH
2368: LD_INT 5
2370: PPUSH
2371: CALL_OW 12
2375: PPUSH
2376: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
2380: LD_VAR 0 6
2384: PPUSH
2385: LD_VAR 0 5
2389: PUSH
2390: LD_INT 1
2392: ARRAY
2393: PPUSH
2394: LD_VAR 0 5
2398: PUSH
2399: LD_INT 2
2401: ARRAY
2402: PPUSH
2403: LD_INT 6
2405: PPUSH
2406: LD_INT 0
2408: PPUSH
2409: CALL_OW 50
// un2 := CreateHuman ;
2413: LD_ADDR_VAR 0 7
2417: PUSH
2418: CALL_OW 44
2422: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
2423: LD_VAR 0 7
2427: PPUSH
2428: LD_VAR 0 6
2432: PPUSH
2433: CALL_OW 52
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un ) ;
2437: LD_ADDR_EXP 38
2441: PUSH
2442: LD_EXP 38
2446: PPUSH
2447: LD_INT 1
2449: PUSH
2450: LD_EXP 38
2454: PUSH
2455: LD_INT 1
2457: ARRAY
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PPUSH
2467: LD_VAR 0 6
2471: PPUSH
2472: CALL 11829 0 3
2476: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un2 ) ;
2477: LD_ADDR_EXP 38
2481: PUSH
2482: LD_EXP 38
2486: PPUSH
2487: LD_INT 1
2489: PUSH
2490: LD_EXP 38
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: PUSH
2499: LD_INT 1
2501: PLUS
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PPUSH
2507: LD_VAR 0 7
2511: PPUSH
2512: CALL 11829 0 3
2516: ST_TO_ADDR
// end ;
2517: GO 2274
2519: POP
2520: POP
// for i = 1 to 5 do
2521: LD_ADDR_VAR 0 2
2525: PUSH
2526: DOUBLE
2527: LD_INT 1
2529: DEC
2530: ST_TO_ADDR
2531: LD_INT 5
2533: PUSH
2534: FOR_TO
2535: IFFALSE 2628
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gatling_gun , ar_rocket_launcher , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] , 100 ) ;
2537: LD_INT 14
2539: PPUSH
2540: LD_INT 3
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_INT 25
2548: PUSH
2549: LD_INT 28
2551: PUSH
2552: LD_INT 28
2554: PUSH
2555: LD_INT 27
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: LD_VAR 0 2
2568: PUSH
2569: LD_INT 4
2571: MOD
2572: PUSH
2573: LD_INT 1
2575: PLUS
2576: ARRAY
2577: PPUSH
2578: LD_INT 100
2580: PPUSH
2581: CALL 11272 0 5
// veh := CreateVehicle ;
2585: LD_ADDR_VAR 0 3
2589: PUSH
2590: CALL_OW 45
2594: ST_TO_ADDR
// tmp := tmp ^ veh ;
2595: LD_ADDR_VAR 0 4
2599: PUSH
2600: LD_VAR 0 4
2604: PUSH
2605: LD_VAR 0 3
2609: ADD
2610: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_arabian , false ) ;
2611: LD_VAR 0 3
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_INT 0
2621: PPUSH
2622: CALL_OW 49
// end ;
2626: GO 2534
2628: POP
2629: POP
// arabian_guard := tmp ;
2630: LD_ADDR_EXP 36
2634: PUSH
2635: LD_VAR 0 4
2639: ST_TO_ADDR
// end ; end_of_file
2640: LD_VAR 0 1
2644: RET
// export function Action ; var tmp , i , un ; begin
2645: LD_INT 0
2647: PPUSH
2648: PPUSH
2649: PPUSH
2650: PPUSH
// CenterNowOnXY ( 68 , 39 ) ;
2651: LD_INT 68
2653: PPUSH
2654: LD_INT 39
2656: PPUSH
2657: CALL_OW 86
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2661: LD_ADDR_VAR 0 2
2665: PUSH
2666: LD_INT 22
2668: PUSH
2669: LD_INT 7
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: ST_TO_ADDR
// InGameOn ;
2681: CALL_OW 8
// ComMoveXY ( tmp , 71 , 49 ) ;
2685: LD_VAR 0 2
2689: PPUSH
2690: LD_INT 71
2692: PPUSH
2693: LD_INT 49
2695: PPUSH
2696: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2700: LD_INT 35
2702: PPUSH
2703: CALL_OW 67
// until SeeXY ( 7 , 71 , 51 ) ;
2707: LD_INT 7
2709: PPUSH
2710: LD_INT 71
2712: PPUSH
2713: LD_INT 51
2715: PPUSH
2716: CALL_OW 293
2720: IFFALSE 2700
// DialogueOn ;
2722: CALL_OW 6
// Say ( JMM , D1-JMM-1 ) ;
2726: LD_EXP 7
2730: PPUSH
2731: LD_STRING D1-JMM-1
2733: PPUSH
2734: CALL_OW 88
// if Joan then
2738: LD_EXP 22
2742: IFFALSE 2756
// Say ( Joan , D1-Joan-1 ) ;
2744: LD_EXP 22
2748: PPUSH
2749: LD_STRING D1-Joan-1
2751: PPUSH
2752: CALL_OW 88
// if Lisa then
2756: LD_EXP 9
2760: IFFALSE 2774
// Say ( Lisa , D1-Lisa-1 ) ;
2762: LD_EXP 9
2766: PPUSH
2767: LD_STRING D1-Lisa-1
2769: PPUSH
2770: CALL_OW 88
// if Joan or Lisa then
2774: LD_EXP 22
2778: PUSH
2779: LD_EXP 9
2783: OR
2784: IFFALSE 2798
// Say ( JMM , D1-JMM-2 ) ;
2786: LD_EXP 7
2790: PPUSH
2791: LD_STRING D1-JMM-2
2793: PPUSH
2794: CALL_OW 88
// DialogueOff ;
2798: CALL_OW 7
// InGameOff ;
2802: CALL_OW 9
// PlaceSeeing ( 71 , 50 , 7 , - 30 ) ;
2806: LD_INT 71
2808: PPUSH
2809: LD_INT 50
2811: PPUSH
2812: LD_INT 7
2814: PPUSH
2815: LD_INT 30
2817: NEG
2818: PPUSH
2819: CALL_OW 330
// RemoveSeeing ( 71 , 50 , 7 ) ;
2823: LD_INT 71
2825: PPUSH
2826: LD_INT 50
2828: PPUSH
2829: LD_INT 7
2831: PPUSH
2832: CALL_OW 331
// ChangeMissionObjectives ( M1 ) ;
2836: LD_STRING M1
2838: PPUSH
2839: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
2843: LD_INT 35
2845: PPUSH
2846: CALL_OW 67
// until freedom ;
2850: LD_EXP 3
2854: IFFALSE 2843
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
2856: LD_INT 350
2858: PPUSH
2859: LD_INT 700
2861: PPUSH
2862: CALL_OW 12
2866: PPUSH
2867: CALL_OW 67
// PrepareGossudarov ;
2871: CALL 1552 0 0
// repeat wait ( 0 0$1 ) ;
2875: LD_INT 35
2877: PPUSH
2878: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2882: LD_INT 22
2884: PUSH
2885: LD_INT 6
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: LD_INT 3
2894: PUSH
2895: LD_INT 24
2897: PUSH
2898: LD_INT 1000
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PPUSH
2913: CALL_OW 69
2917: IFFALSE 2875
// tmp := FilterAllUnits ( [ f_side , 6 ] ) ;
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: LD_INT 22
2926: PUSH
2927: LD_INT 6
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PPUSH
2934: CALL_OW 69
2938: ST_TO_ADDR
// for i in tmp do
2939: LD_ADDR_VAR 0 3
2943: PUSH
2944: LD_VAR 0 2
2948: PUSH
2949: FOR_IN
2950: IFFALSE 2966
// SetSide ( i , 7 ) ;
2952: LD_VAR 0 3
2956: PPUSH
2957: LD_INT 7
2959: PPUSH
2960: CALL_OW 235
2964: GO 2949
2966: POP
2967: POP
// DialogueOn ;
2968: CALL_OW 6
// ComTurnUnit ( [ JMM , Roth ] , Gossudarov ) ;
2972: LD_EXP 7
2976: PUSH
2977: LD_EXP 8
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PPUSH
2986: LD_EXP 24
2990: PPUSH
2991: CALL_OW 119
// CenterNowOnUnits ( Gossudarov ) ;
2995: LD_EXP 24
2999: PPUSH
3000: CALL_OW 87
// if not Roth then
3004: LD_EXP 8
3008: NOT
3009: IFFALSE 3073
// begin Say ( JMM , D2-JMM-1 ) ;
3011: LD_EXP 7
3015: PPUSH
3016: LD_STRING D2-JMM-1
3018: PPUSH
3019: CALL_OW 88
// Say ( JMM , D2-JMM-1b ) ;
3023: LD_EXP 7
3027: PPUSH
3028: LD_STRING D2-JMM-1b
3030: PPUSH
3031: CALL_OW 88
// Say ( Gossudarov , D2-Gos-1 ) ;
3035: LD_EXP 24
3039: PPUSH
3040: LD_STRING D2-Gos-1
3042: PPUSH
3043: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
3047: LD_EXP 7
3051: PPUSH
3052: LD_STRING D2-JMM-2
3054: PPUSH
3055: CALL_OW 88
// Say ( Gossudarov , D2-Gos-2 ) ;
3059: LD_EXP 24
3063: PPUSH
3064: LD_STRING D2-Gos-2
3066: PPUSH
3067: CALL_OW 88
// end else
3071: GO 3169
// begin Say ( Roth , D2-Roth-2 ) ;
3073: LD_EXP 8
3077: PPUSH
3078: LD_STRING D2-Roth-2
3080: PPUSH
3081: CALL_OW 88
// Say ( JMM , D2-JMM-1a ) ;
3085: LD_EXP 7
3089: PPUSH
3090: LD_STRING D2-JMM-1a
3092: PPUSH
3093: CALL_OW 88
// Say ( Roth , D2-Roth-2a ) ;
3097: LD_EXP 8
3101: PPUSH
3102: LD_STRING D2-Roth-2a
3104: PPUSH
3105: CALL_OW 88
// Say ( Roth , D2-Roth-2b ) ;
3109: LD_EXP 8
3113: PPUSH
3114: LD_STRING D2-Roth-2b
3116: PPUSH
3117: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
3121: LD_EXP 7
3125: PPUSH
3126: LD_STRING D2-JMM-3
3128: PPUSH
3129: CALL_OW 88
// Say ( Gossudarov , D2-Gos-3 ) ;
3133: LD_EXP 24
3137: PPUSH
3138: LD_STRING D2-Gos-3
3140: PPUSH
3141: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
3145: LD_EXP 7
3149: PPUSH
3150: LD_STRING D2-JMM-4
3152: PPUSH
3153: CALL_OW 88
// Say ( Gossudarov , D2-Gos-4 ) ;
3157: LD_EXP 24
3161: PPUSH
3162: LD_STRING D2-Gos-4
3164: PPUSH
3165: CALL_OW 88
// end ; Say ( JMM , D2-JMM-5 ) ;
3169: LD_EXP 7
3173: PPUSH
3174: LD_STRING D2-JMM-5
3176: PPUSH
3177: CALL_OW 88
// Say ( Gossudarov , D2-Gos-5 ) ;
3181: LD_EXP 24
3185: PPUSH
3186: LD_STRING D2-Gos-5
3188: PPUSH
3189: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
3193: LD_EXP 7
3197: PPUSH
3198: LD_STRING D2-JMM-6
3200: PPUSH
3201: CALL_OW 88
// DialogueOff ;
3205: CALL_OW 7
// wait ( 0 0$2 ) ;
3209: LD_INT 70
3211: PPUSH
3212: CALL_OW 67
// if Kirilenkova then
3216: LD_EXP 25
3220: IFFALSE 3234
// Say ( Kirilenkova , D3-Kir-1 ) ;
3222: LD_EXP 25
3226: PPUSH
3227: LD_STRING D3-Kir-1
3229: PPUSH
3230: CALL_OW 88
// gossudarov_arrive := true ;
3234: LD_ADDR_EXP 4
3238: PUSH
3239: LD_INT 1
3241: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3242: LD_INT 35
3244: PPUSH
3245: CALL_OW 67
// until ru_lab_builded ;
3249: LD_EXP 5
3253: IFFALSE 3242
// if Kirilenkova then
3255: LD_EXP 25
3259: IFFALSE 3275
// Say ( Kirilenkova , D3a-Kir-1 ) else
3261: LD_EXP 25
3265: PPUSH
3266: LD_STRING D3a-Kir-1
3268: PPUSH
3269: CALL_OW 88
3273: GO 3297
// begin un := SciRu ;
3275: LD_ADDR_VAR 0 4
3279: PUSH
3280: CALL 4218 0 0
3284: ST_TO_ADDR
// Say ( un , D3a-Sci1-1 ) ;
3285: LD_VAR 0 4
3289: PPUSH
3290: LD_STRING D3a-Sci1-1
3292: PPUSH
3293: CALL_OW 88
// end ; if Kirilenkova or un then
3297: LD_EXP 25
3301: PUSH
3302: LD_VAR 0 4
3306: OR
3307: IFFALSE 3321
// Say ( JMM , D3a-JMM-1 ) ;
3309: LD_EXP 7
3313: PPUSH
3314: LD_STRING D3a-JMM-1
3316: PPUSH
3317: CALL_OW 88
// end ;
3321: LD_VAR 0 1
3325: RET
// every 0 0$40 trigger GetSide ( Gossudarov ) = 7 do var i , tmp , un ;
3326: LD_EXP 24
3330: PPUSH
3331: CALL_OW 255
3335: PUSH
3336: LD_INT 7
3338: EQUAL
3339: IFFALSE 3522
3341: GO 3343
3343: DISABLE
3344: LD_INT 0
3346: PPUSH
3347: PPUSH
3348: PPUSH
// begin uc_side := 3 ;
3349: LD_ADDR_OWVAR 20
3353: PUSH
3354: LD_INT 3
3356: ST_TO_ADDR
// uc_nation := 3 ;
3357: LD_ADDR_OWVAR 21
3361: PUSH
3362: LD_INT 3
3364: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_heavy_machine_gun , 100 ) ;
3365: LD_INT 21
3367: PPUSH
3368: LD_INT 3
3370: PPUSH
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 42
3376: PPUSH
3377: LD_INT 100
3379: PPUSH
3380: CALL 11272 0 5
// un := CreateVehicle ;
3384: LD_ADDR_VAR 0 3
3388: PUSH
3389: CALL_OW 45
3393: ST_TO_ADDR
// PlaceUnitArea ( un , south_west_spawn , false ) ;
3394: LD_VAR 0 3
3398: PPUSH
3399: LD_INT 15
3401: PPUSH
3402: LD_INT 0
3404: PPUSH
3405: CALL_OW 49
// ComMoveXY ( un , 67 , 45 ) ;
3409: LD_VAR 0 3
3413: PPUSH
3414: LD_INT 67
3416: PPUSH
3417: LD_INT 45
3419: PPUSH
3420: CALL_OW 111
// AddComWait ( un , 0 0$2 ) ;
3424: LD_VAR 0 3
3428: PPUSH
3429: LD_INT 70
3431: PPUSH
3432: CALL_OW 202
// AddComMoveXY ( un , 69 , 18 ) ;
3436: LD_VAR 0 3
3440: PPUSH
3441: LD_INT 69
3443: PPUSH
3444: LD_INT 18
3446: PPUSH
3447: CALL_OW 171
// AddComMoveXY ( un , 60 , 2 ) ;
3451: LD_VAR 0 3
3455: PPUSH
3456: LD_INT 60
3458: PPUSH
3459: LD_INT 2
3461: PPUSH
3462: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
3466: LD_INT 35
3468: PPUSH
3469: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , north_spawn ) ;
3473: LD_VAR 0 3
3477: PPUSH
3478: CALL_OW 302
3482: NOT
3483: PUSH
3484: LD_VAR 0 3
3488: PPUSH
3489: LD_INT 17
3491: PPUSH
3492: CALL_OW 308
3496: OR
3497: IFFALSE 3466
// if IsInArea ( un , north_spawn ) then
3499: LD_VAR 0 3
3503: PPUSH
3504: LD_INT 17
3506: PPUSH
3507: CALL_OW 308
3511: IFFALSE 3522
// RemoveUnit ( un ) ;
3513: LD_VAR 0 3
3517: PPUSH
3518: CALL_OW 64
// end ;
3522: PPOPN 3
3524: END
// every 0 0$2 do var i , un , tmp ;
3525: GO 3527
3527: DISABLE
3528: LD_INT 0
3530: PPUSH
3531: PPUSH
3532: PPUSH
// begin repeat wait ( 0 0$2 ) ;
3533: LD_INT 70
3535: PPUSH
3536: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 3 ] ] ) ;
3540: LD_ADDR_VAR 0 3
3544: PUSH
3545: LD_INT 22
3547: PUSH
3548: LD_INT 7
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PUSH
3555: LD_INT 101
3557: PUSH
3558: LD_INT 3
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PPUSH
3569: CALL_OW 69
3573: ST_TO_ADDR
// until tmp ;
3574: LD_VAR 0 3
3578: IFFALSE 3533
// un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , JMM ) ;
3580: LD_ADDR_VAR 0 2
3584: PUSH
3585: LD_INT 22
3587: PUSH
3588: LD_INT 3
3590: PUSH
3591: EMPTY
3592: LIST
3593: LIST
3594: PPUSH
3595: CALL_OW 69
3599: PPUSH
3600: LD_EXP 7
3604: PPUSH
3605: CALL_OW 74
3609: ST_TO_ADDR
// player_spotted := true ;
3610: LD_ADDR_EXP 6
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// tmp := SciRu ;
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: CALL 4218 0 0
3627: ST_TO_ADDR
// DialogueOn ;
3628: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 7 , - 8 ) ;
3632: LD_VAR 0 2
3636: PPUSH
3637: CALL_OW 250
3641: PPUSH
3642: LD_VAR 0 2
3646: PPUSH
3647: CALL_OW 251
3651: PPUSH
3652: LD_INT 7
3654: PPUSH
3655: LD_INT 8
3657: NEG
3658: PPUSH
3659: CALL_OW 330
// CenterNowOnUnits ( un ) ;
3663: LD_VAR 0 2
3667: PPUSH
3668: CALL_OW 87
// if tmp then
3672: LD_VAR 0 3
3676: IFFALSE 3690
// Say ( tmp , D4-RSci1-1 ) ;
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_STRING D4-RSci1-1
3685: PPUSH
3686: CALL_OW 88
// if Gossudarov then
3690: LD_EXP 24
3694: IFFALSE 3720
// begin Say ( Gossudarov , D4-Gos-1 ) ;
3696: LD_EXP 24
3700: PPUSH
3701: LD_STRING D4-Gos-1
3703: PPUSH
3704: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
3708: LD_EXP 7
3712: PPUSH
3713: LD_STRING D4-JMM-1
3715: PPUSH
3716: CALL_OW 88
// end ; RemoveSeeing ( GetX ( un ) , GetY ( un ) , 7 ) ;
3720: LD_VAR 0 2
3724: PPUSH
3725: CALL_OW 250
3729: PPUSH
3730: LD_VAR 0 2
3734: PPUSH
3735: CALL_OW 251
3739: PPUSH
3740: LD_INT 7
3742: PPUSH
3743: CALL_OW 331
// DialogueOff ;
3747: CALL_OW 7
// end ;
3751: PPOPN 3
3753: END
// every 0 0$10 + 1 1$00 trigger player_spotted do
3754: LD_EXP 6
3758: IFFALSE 4217
3760: GO 3762
3762: DISABLE
// begin PrepareBielkov ;
3763: CALL 1806 0 0
// ComMoveXY ( Bielkov , 118 , 106 ) ;
3767: LD_EXP 31
3771: PPUSH
3772: LD_INT 118
3774: PPUSH
3775: LD_INT 106
3777: PPUSH
3778: CALL_OW 111
// AddComHold ( Bielkov ) ;
3782: LD_EXP 31
3786: PPUSH
3787: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
3791: LD_INT 35
3793: PPUSH
3794: CALL_OW 67
// until IsAt ( Bielkov , 118 , 106 ) ;
3798: LD_EXP 31
3802: PPUSH
3803: LD_INT 118
3805: PPUSH
3806: LD_INT 106
3808: PPUSH
3809: CALL_OW 307
3813: IFFALSE 3791
// ChangeSideFog ( 4 , 7 ) ;
3815: LD_INT 4
3817: PPUSH
3818: LD_INT 7
3820: PPUSH
3821: CALL_OW 343
// if IsOk ( Bielkov ) then
3825: LD_EXP 31
3829: PPUSH
3830: CALL_OW 302
3834: IFFALSE 3918
// begin InGameOn ;
3836: CALL_OW 8
// DialogueOn ;
3840: CALL_OW 6
// SayRadio ( Bielkov , D5-Bel-1 ) ;
3844: LD_EXP 31
3848: PPUSH
3849: LD_STRING D5-Bel-1
3851: PPUSH
3852: CALL_OW 94
// if Gossudarov then
3856: LD_EXP 24
3860: IFFALSE 3910
// begin Say ( Gossudarov , D5-Gos-1 ) ;
3862: LD_EXP 24
3866: PPUSH
3867: LD_STRING D5-Gos-1
3869: PPUSH
3870: CALL_OW 88
// Say ( JMM , D5-JMM-1 ) ;
3874: LD_EXP 7
3878: PPUSH
3879: LD_STRING D5-JMM-1
3881: PPUSH
3882: CALL_OW 88
// Say ( Gossudarov , D5-Gos-2 ) ;
3886: LD_EXP 24
3890: PPUSH
3891: LD_STRING D5-Gos-2
3893: PPUSH
3894: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
3898: LD_EXP 7
3902: PPUSH
3903: LD_STRING D5-JMM-2
3905: PPUSH
3906: CALL_OW 88
// end ; DialogueOff ;
3910: CALL_OW 7
// InGameOff ;
3914: CALL_OW 9
// end ; case Query ( QSaveBelkov ) of 1 :
3918: LD_STRING QSaveBelkov
3920: PPUSH
3921: CALL_OW 97
3925: PUSH
3926: LD_INT 1
3928: DOUBLE
3929: EQUAL
3930: IFTRUE 3934
3932: GO 3984
3934: POP
// begin DialogueOn ;
3935: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3939: LD_EXP 7
3943: PPUSH
3944: LD_STRING D5a-JMM-1
3946: PPUSH
3947: CALL_OW 88
// SayRadio ( Bielkov , D5a-Bel-1 ) ;
3951: LD_EXP 31
3955: PPUSH
3956: LD_STRING D5a-Bel-1
3958: PPUSH
3959: CALL_OW 94
// DialogueOff ;
3963: CALL_OW 7
// ComMoveXY ( Bielkov , 83 , 49 ) ;
3967: LD_EXP 31
3971: PPUSH
3972: LD_INT 83
3974: PPUSH
3975: LD_INT 49
3977: PPUSH
3978: CALL_OW 111
// end ; 2 :
3982: GO 4044
3984: LD_INT 2
3986: DOUBLE
3987: EQUAL
3988: IFTRUE 3992
3990: GO 4043
3992: POP
// begin Say ( JMM , D5a-JMM-2 ) ;
3993: LD_EXP 7
3997: PPUSH
3998: LD_STRING D5a-JMM-2
4000: PPUSH
4001: CALL_OW 88
// ComWait ( Bielkov , 0 0$10 ) ;
4005: LD_EXP 31
4009: PPUSH
4010: LD_INT 350
4012: PPUSH
4013: CALL_OW 142
// AddComMoveXY ( Bielkov , 107 , 109 ) ;
4017: LD_EXP 31
4021: PPUSH
4022: LD_INT 107
4024: PPUSH
4025: LD_INT 109
4027: PPUSH
4028: CALL_OW 171
// AddComHold ( Bielkov ) ;
4032: LD_EXP 31
4036: PPUSH
4037: CALL_OW 200
// end ; end ;
4041: GO 4044
4043: POP
// repeat wait ( 0 0$1 ) ;
4044: LD_INT 35
4046: PPUSH
4047: CALL_OW 67
// until ( IsDead ( Bielkov ) and GetSide ( Bielkov ) = 4 ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Bielkov ) , Bielkov ) < 10 ;
4051: LD_EXP 31
4055: PPUSH
4056: CALL_OW 301
4060: PUSH
4061: LD_EXP 31
4065: PPUSH
4066: CALL_OW 255
4070: PUSH
4071: LD_INT 4
4073: EQUAL
4074: AND
4075: PUSH
4076: LD_INT 22
4078: PUSH
4079: LD_INT 7
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PPUSH
4086: CALL_OW 69
4090: PPUSH
4091: LD_EXP 31
4095: PPUSH
4096: CALL_OW 74
4100: PPUSH
4101: LD_EXP 31
4105: PPUSH
4106: CALL_OW 296
4110: PUSH
4111: LD_INT 10
4113: LESS
4114: OR
4115: IFFALSE 4044
// if IsDead ( Bielkov ) then
4117: LD_EXP 31
4121: PPUSH
4122: CALL_OW 301
4126: IFFALSE 4151
// begin CenterNowOnUnits ( Bielkov ) ;
4128: LD_EXP 31
4132: PPUSH
4133: CALL_OW 87
// Say ( JMM , D5a-JMM-2a ) ;
4137: LD_EXP 7
4141: PPUSH
4142: LD_STRING D5a-JMM-2a
4144: PPUSH
4145: CALL_OW 88
// exit ;
4149: GO 4217
// end ; if See ( 7 , Bielkov ) then
4151: LD_INT 7
4153: PPUSH
4154: LD_EXP 31
4158: PPUSH
4159: CALL_OW 292
4163: IFFALSE 4177
// SetSide ( Bielkov , 7 ) ;
4165: LD_EXP 31
4169: PPUSH
4170: LD_INT 7
4172: PPUSH
4173: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
4177: LD_INT 35
4179: PPUSH
4180: CALL_OW 67
// until GetDistUnitXY ( Bielkov , 66 , 45 ) < 30 ;
4184: LD_EXP 31
4188: PPUSH
4189: LD_INT 66
4191: PPUSH
4192: LD_INT 45
4194: PPUSH
4195: CALL_OW 297
4199: PUSH
4200: LD_INT 30
4202: LESS
4203: IFFALSE 4177
// Say ( Bielkov , D6-Bel-1 ) ;
4205: LD_EXP 31
4209: PPUSH
4210: LD_STRING D6-Bel-1
4212: PPUSH
4213: CALL_OW 88
// end ;
4217: END
// export function SciRu ; var tmp , t ; begin
4218: LD_INT 0
4220: PPUSH
4221: PPUSH
4222: PPUSH
// t := [ Gossudarov , Titov , Fadeev , Dolgov , Petrosyan , Burlak , Bielkov , Gnyevko ] ;
4223: LD_ADDR_VAR 0 3
4227: PUSH
4228: LD_EXP 24
4232: PUSH
4233: LD_EXP 26
4237: PUSH
4238: LD_EXP 27
4242: PUSH
4243: LD_EXP 28
4247: PUSH
4248: LD_EXP 29
4252: PUSH
4253: LD_EXP 30
4257: PUSH
4258: LD_EXP 31
4262: PUSH
4263: LD_EXP 32
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff t ;
4278: LD_ADDR_VAR 0 2
4282: PUSH
4283: LD_INT 22
4285: PUSH
4286: LD_INT 7
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: PUSH
4293: LD_INT 23
4295: PUSH
4296: LD_INT 3
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 25
4305: PUSH
4306: LD_INT 4
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: LD_INT 26
4315: PUSH
4316: LD_INT 1
4318: PUSH
4319: EMPTY
4320: LIST
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: PPUSH
4329: CALL_OW 69
4333: PUSH
4334: LD_VAR 0 3
4338: DIFF
4339: ST_TO_ADDR
// if tmp then
4340: LD_VAR 0 2
4344: IFFALSE 4360
// result := tmp [ 1 ] ;
4346: LD_ADDR_VAR 0 1
4350: PUSH
4351: LD_VAR 0 2
4355: PUSH
4356: LD_INT 1
4358: ARRAY
4359: ST_TO_ADDR
// end ; end_of_file
4360: LD_VAR 0 1
4364: RET
// on UnitDestroyed ( un ) do var i , side ;
4365: LD_INT 0
4367: PPUSH
4368: PPUSH
// begin if un = JMM then
4369: LD_VAR 0 1
4373: PUSH
4374: LD_EXP 7
4378: EQUAL
4379: IFFALSE 4390
// begin YouLost ( JMM ) ;
4381: LD_STRING JMM
4383: PPUSH
4384: CALL_OW 104
// exit ;
4388: GO 4399
// end ; MCE_UnitDestroyed ( un ) ;
4390: LD_VAR 0 1
4394: PPUSH
4395: CALL 58380 0 1
// end ;
4399: PPOPN 3
4401: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
4402: LD_VAR 0 1
4406: PPUSH
4407: LD_VAR 0 2
4411: PPUSH
4412: CALL 60247 0 2
// end ;
4416: PPOPN 2
4418: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
4419: LD_VAR 0 1
4423: PPUSH
4424: CALL 59329 0 1
// end ;
4428: PPOPN 1
4430: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_depot ] ] ) then
4431: LD_VAR 0 1
4435: PUSH
4436: LD_INT 22
4438: PUSH
4439: LD_INT 7
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 30
4448: PUSH
4449: LD_INT 0
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PPUSH
4460: CALL_OW 69
4464: IN
4465: IFFALSE 4504
// begin SetBName ( building , freedom ) ;
4467: LD_VAR 0 1
4471: PPUSH
4472: LD_STRING freedom
4474: PPUSH
4475: CALL_OW 500
// SetRestrict ( b_depot , 7 , false ) ;
4479: LD_INT 0
4481: PPUSH
4482: LD_INT 7
4484: PPUSH
4485: LD_INT 0
4487: PPUSH
4488: CALL_OW 324
// freedom := building ;
4492: LD_ADDR_EXP 3
4496: PUSH
4497: LD_VAR 0 1
4501: ST_TO_ADDR
// exit ;
4502: GO 4570
// end ; if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_btype , b_lab ] ] ) then
4504: LD_VAR 0 1
4508: PUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 7
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: LD_INT 23
4521: PUSH
4522: LD_INT 3
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 30
4531: PUSH
4532: LD_INT 6
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: PPUSH
4544: CALL_OW 69
4548: IN
4549: IFFALSE 4561
// begin ru_lab_builded := true ;
4551: LD_ADDR_EXP 5
4555: PUSH
4556: LD_INT 1
4558: ST_TO_ADDR
// exit ;
4559: GO 4570
// end ; MCE_BuildingComplete ( building ) ;
4561: LD_VAR 0 1
4565: PPUSH
4566: CALL 59563 0 1
// end ;
4570: PPOPN 1
4572: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
4573: LD_VAR 0 1
4577: PPUSH
4578: LD_VAR 0 2
4582: PPUSH
4583: CALL 58056 0 2
// end ;
4587: PPOPN 2
4589: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
4590: LD_VAR 0 1
4594: PPUSH
4595: LD_VAR 0 2
4599: PPUSH
4600: LD_VAR 0 3
4604: PPUSH
4605: LD_VAR 0 4
4609: PPUSH
4610: LD_VAR 0 5
4614: PPUSH
4615: CALL 57683 0 5
// end ;
4619: PPOPN 5
4621: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
4622: LD_VAR 0 1
4626: PPUSH
4627: LD_VAR 0 2
4631: PPUSH
4632: CALL 57371 0 2
// end ;
4636: PPOPN 2
4638: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
4639: LD_VAR 0 1
4643: PPUSH
4644: LD_VAR 0 2
4648: PPUSH
4649: LD_VAR 0 3
4653: PPUSH
4654: LD_VAR 0 4
4658: PPUSH
4659: CALL 57216 0 4
// end ;
4663: PPOPN 4
4665: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
4666: LD_VAR 0 1
4670: PPUSH
4671: LD_VAR 0 2
4675: PPUSH
4676: LD_VAR 0 3
4680: PPUSH
4681: CALL 56998 0 3
// end ;
4685: PPOPN 3
4687: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
4688: LD_VAR 0 1
4692: PPUSH
4693: LD_VAR 0 2
4697: PPUSH
4698: CALL 56890 0 2
// end ;
4702: PPOPN 2
4704: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
4705: LD_VAR 0 1
4709: PPUSH
4710: LD_VAR 0 2
4714: PPUSH
4715: CALL 60501 0 2
// end ;
4719: PPOPN 2
4721: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
4722: LD_VAR 0 1
4726: PPUSH
4727: LD_VAR 0 2
4731: PPUSH
4732: LD_VAR 0 3
4736: PPUSH
4737: LD_VAR 0 4
4741: PPUSH
4742: CALL 60710 0 4
// end ;
4746: PPOPN 4
4748: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
4749: LD_VAR 0 1
4753: PPUSH
4754: LD_VAR 0 2
4758: PPUSH
4759: CALL 56706 0 2
// end ; end_of_file
4763: PPOPN 2
4765: END
// every 0 0$30 do var cr , time ;
4766: GO 4768
4768: DISABLE
4769: LD_INT 0
4771: PPUSH
4772: PPUSH
// begin time := 0 0$01 ;
4773: LD_ADDR_VAR 0 2
4777: PUSH
4778: LD_INT 35
4780: ST_TO_ADDR
// while game do
4781: LD_EXP 2
4785: IFFALSE 4874
// begin wait ( time ) ;
4787: LD_VAR 0 2
4791: PPUSH
4792: CALL_OW 67
// time := time + [ 0 0$05 , 0 0$07 , 0 0$09 ] [ Difficulty ] ;
4796: LD_ADDR_VAR 0 2
4800: PUSH
4801: LD_VAR 0 2
4805: PUSH
4806: LD_INT 175
4808: PUSH
4809: LD_INT 245
4811: PUSH
4812: LD_INT 315
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: PUSH
4820: LD_OWVAR 67
4824: ARRAY
4825: PLUS
4826: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 70 , 49 , 25 , true ) ;
4827: LD_INT 1
4829: PPUSH
4830: LD_INT 5
4832: PPUSH
4833: CALL_OW 12
4837: PPUSH
4838: LD_INT 70
4840: PPUSH
4841: LD_INT 49
4843: PPUSH
4844: LD_INT 25
4846: PPUSH
4847: LD_INT 1
4849: PPUSH
4850: CALL_OW 56
// if time > 6 6$00 then
4854: LD_VAR 0 2
4858: PUSH
4859: LD_INT 12600
4861: GREATER
4862: IFFALSE 4872
// time := 0 0$40 ;
4864: LD_ADDR_VAR 0 2
4868: PUSH
4869: LD_INT 1400
4871: ST_TO_ADDR
// end ;
4872: GO 4781
// end ;
4874: PPOPN 2
4876: END
// every 0 0$30 do var cr , time ;
4877: GO 4879
4879: DISABLE
4880: LD_INT 0
4882: PPUSH
4883: PPUSH
// begin time := 0 0$01 ;
4884: LD_ADDR_VAR 0 2
4888: PUSH
4889: LD_INT 35
4891: ST_TO_ADDR
// while game do
4892: LD_EXP 2
4896: IFFALSE 4985
// begin wait ( time ) ;
4898: LD_VAR 0 2
4902: PPUSH
4903: CALL_OW 67
// time := time + [ 0 0$03 , 0 0$05 , 0 0$07 ] [ Difficulty ] ;
4907: LD_ADDR_VAR 0 2
4911: PUSH
4912: LD_VAR 0 2
4916: PUSH
4917: LD_INT 105
4919: PUSH
4920: LD_INT 175
4922: PUSH
4923: LD_INT 245
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: PUSH
4931: LD_OWVAR 67
4935: ARRAY
4936: PLUS
4937: ST_TO_ADDR
// CreateCratesXYR ( rand ( 3 , 5 ) , 26 , 9 , 30 , true ) ;
4938: LD_INT 3
4940: PPUSH
4941: LD_INT 5
4943: PPUSH
4944: CALL_OW 12
4948: PPUSH
4949: LD_INT 26
4951: PPUSH
4952: LD_INT 9
4954: PPUSH
4955: LD_INT 30
4957: PPUSH
4958: LD_INT 1
4960: PPUSH
4961: CALL_OW 56
// if time > 4 4$00 then
4965: LD_VAR 0 2
4969: PUSH
4970: LD_INT 8400
4972: GREATER
4973: IFFALSE 4983
// time := 0 0$50 ;
4975: LD_ADDR_VAR 0 2
4979: PUSH
4980: LD_INT 1750
4982: ST_TO_ADDR
// end ;
4983: GO 4892
// end ;
4985: PPOPN 2
4987: END
// every 0 0$30 do var cr , time ;
4988: GO 4990
4990: DISABLE
4991: LD_INT 0
4993: PPUSH
4994: PPUSH
// begin time := 0 0$20 ;
4995: LD_ADDR_VAR 0 2
4999: PUSH
5000: LD_INT 700
5002: ST_TO_ADDR
// while game do
5003: LD_EXP 2
5007: IFFALSE 5132
// begin wait ( time ) ;
5009: LD_VAR 0 2
5013: PPUSH
5014: CALL_OW 67
// time := time + [ 0 0$05 , 0 0$06 , 0 0$08 ] [ Difficulty ] ;
5018: LD_ADDR_VAR 0 2
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: LD_INT 175
5030: PUSH
5031: LD_INT 210
5033: PUSH
5034: LD_INT 280
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: LIST
5041: PUSH
5042: LD_OWVAR 67
5046: ARRAY
5047: PLUS
5048: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 179 , 101 , 20 , true ) ;
5049: LD_INT 1
5051: PPUSH
5052: LD_INT 5
5054: PPUSH
5055: CALL_OW 12
5059: PPUSH
5060: LD_INT 179
5062: PPUSH
5063: LD_INT 101
5065: PPUSH
5066: LD_INT 20
5068: PPUSH
5069: LD_INT 1
5071: PPUSH
5072: CALL_OW 56
// wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
5076: LD_INT 350
5078: PPUSH
5079: LD_INT 525
5081: PPUSH
5082: CALL_OW 12
5086: PPUSH
5087: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area_collect_arabian , true ) ;
5091: LD_INT 1
5093: PPUSH
5094: LD_INT 5
5096: PPUSH
5097: CALL_OW 12
5101: PPUSH
5102: LD_INT 9
5104: PPUSH
5105: LD_INT 1
5107: PPUSH
5108: CALL_OW 55
// if time > 4 4$00 then
5112: LD_VAR 0 2
5116: PUSH
5117: LD_INT 8400
5119: GREATER
5120: IFFALSE 5130
// time := 0 0$30 ;
5122: LD_ADDR_VAR 0 2
5126: PUSH
5127: LD_INT 1050
5129: ST_TO_ADDR
// end ;
5130: GO 5003
// end ;
5132: PPOPN 2
5134: END
// every 0 0$30 do var cr , time ;
5135: GO 5137
5137: DISABLE
5138: LD_INT 0
5140: PPUSH
5141: PPUSH
// begin time := 0 0$10 ;
5142: LD_ADDR_VAR 0 2
5146: PUSH
5147: LD_INT 350
5149: ST_TO_ADDR
// while game do
5150: LD_EXP 2
5154: IFFALSE 5288
// begin wait ( time ) ;
5156: LD_VAR 0 2
5160: PPUSH
5161: CALL_OW 67
// time := time + 0 0$10 ;
5165: LD_ADDR_VAR 0 2
5169: PUSH
5170: LD_VAR 0 2
5174: PUSH
5175: LD_INT 350
5177: PLUS
5178: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , area_crates_russian , true ) ;
5179: LD_INT 1
5181: PPUSH
5182: LD_INT 5
5184: PPUSH
5185: CALL_OW 12
5189: PPUSH
5190: LD_INT 11
5192: PPUSH
5193: LD_INT 1
5195: PPUSH
5196: CALL_OW 55
// cr := rand ( 1 , 3 ) ;
5200: LD_ADDR_VAR 0 1
5204: PUSH
5205: LD_INT 1
5207: PPUSH
5208: LD_INT 3
5210: PPUSH
5211: CALL_OW 12
5215: ST_TO_ADDR
// if cr = 1 then
5216: LD_VAR 0 1
5220: PUSH
5221: LD_INT 1
5223: EQUAL
5224: IFFALSE 5268
// begin wait ( rand ( 0 0$20 , 0 0$45 ) ) ;
5226: LD_INT 700
5228: PPUSH
5229: LD_INT 1575
5231: PPUSH
5232: CALL_OW 12
5236: PPUSH
5237: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 34 , 50 , 7 , true ) ;
5241: LD_INT 1
5243: PPUSH
5244: LD_INT 5
5246: PPUSH
5247: CALL_OW 12
5251: PPUSH
5252: LD_INT 34
5254: PPUSH
5255: LD_INT 50
5257: PPUSH
5258: LD_INT 7
5260: PPUSH
5261: LD_INT 1
5263: PPUSH
5264: CALL_OW 56
// end ; if time > 8 8$00 then
5268: LD_VAR 0 2
5272: PUSH
5273: LD_INT 16800
5275: GREATER
5276: IFFALSE 5286
// time := 0 0$40 ;
5278: LD_ADDR_VAR 0 2
5282: PUSH
5283: LD_INT 1400
5285: ST_TO_ADDR
// end ;
5286: GO 5150
// end ; end_of_file
5288: PPOPN 2
5290: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
5291: LD_INT 0
5293: PPUSH
5294: PPUSH
// if exist_mode then
5295: LD_VAR 0 2
5299: IFFALSE 5324
// unit := CreateCharacter ( prefix & ident ) else
5301: LD_ADDR_VAR 0 5
5305: PUSH
5306: LD_VAR 0 3
5310: PUSH
5311: LD_VAR 0 1
5315: STR
5316: PPUSH
5317: CALL_OW 34
5321: ST_TO_ADDR
5322: GO 5339
// unit := NewCharacter ( ident ) ;
5324: LD_ADDR_VAR 0 5
5328: PUSH
5329: LD_VAR 0 1
5333: PPUSH
5334: CALL_OW 25
5338: ST_TO_ADDR
// result := unit ;
5339: LD_ADDR_VAR 0 4
5343: PUSH
5344: LD_VAR 0 5
5348: ST_TO_ADDR
// end ;
5349: LD_VAR 0 4
5353: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
5354: LD_INT 0
5356: PPUSH
5357: PPUSH
// if not side or not nation then
5358: LD_VAR 0 1
5362: NOT
5363: PUSH
5364: LD_VAR 0 2
5368: NOT
5369: OR
5370: IFFALSE 5374
// exit ;
5372: GO 5986
// case nation of nation_american :
5374: LD_VAR 0 2
5378: PUSH
5379: LD_INT 1
5381: DOUBLE
5382: EQUAL
5383: IFTRUE 5387
5385: GO 5545
5387: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
5388: LD_ADDR_VAR 0 4
5392: PUSH
5393: LD_INT 35
5395: PUSH
5396: LD_INT 45
5398: PUSH
5399: LD_INT 46
5401: PUSH
5402: LD_INT 47
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: LD_INT 2
5410: PUSH
5411: LD_INT 6
5413: PUSH
5414: LD_INT 15
5416: PUSH
5417: LD_INT 16
5419: PUSH
5420: LD_INT 7
5422: PUSH
5423: LD_INT 12
5425: PUSH
5426: LD_INT 13
5428: PUSH
5429: LD_INT 10
5431: PUSH
5432: LD_INT 14
5434: PUSH
5435: LD_INT 20
5437: PUSH
5438: LD_INT 25
5440: PUSH
5441: LD_INT 36
5443: PUSH
5444: LD_INT 69
5446: PUSH
5447: LD_INT 39
5449: PUSH
5450: LD_INT 34
5452: PUSH
5453: LD_INT 40
5455: PUSH
5456: LD_INT 48
5458: PUSH
5459: LD_INT 49
5461: PUSH
5462: LD_INT 50
5464: PUSH
5465: LD_INT 51
5467: PUSH
5468: LD_INT 52
5470: PUSH
5471: LD_INT 53
5473: PUSH
5474: LD_INT 54
5476: PUSH
5477: LD_INT 55
5479: PUSH
5480: LD_INT 56
5482: PUSH
5483: LD_INT 57
5485: PUSH
5486: LD_INT 58
5488: PUSH
5489: LD_INT 59
5491: PUSH
5492: LD_INT 60
5494: PUSH
5495: LD_INT 61
5497: PUSH
5498: LD_INT 62
5500: PUSH
5501: LD_INT 80
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: ST_TO_ADDR
5543: GO 5910
5545: LD_INT 2
5547: DOUBLE
5548: EQUAL
5549: IFTRUE 5553
5551: GO 5723
5553: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
5554: LD_ADDR_VAR 0 4
5558: PUSH
5559: LD_INT 35
5561: PUSH
5562: LD_INT 45
5564: PUSH
5565: LD_INT 46
5567: PUSH
5568: LD_INT 47
5570: PUSH
5571: LD_INT 70
5573: PUSH
5574: LD_INT 1
5576: PUSH
5577: LD_INT 11
5579: PUSH
5580: LD_INT 3
5582: PUSH
5583: LD_INT 4
5585: PUSH
5586: LD_INT 5
5588: PUSH
5589: LD_INT 6
5591: PUSH
5592: LD_INT 15
5594: PUSH
5595: LD_INT 18
5597: PUSH
5598: LD_INT 7
5600: PUSH
5601: LD_INT 17
5603: PUSH
5604: LD_INT 8
5606: PUSH
5607: LD_INT 20
5609: PUSH
5610: LD_INT 72
5612: PUSH
5613: LD_INT 26
5615: PUSH
5616: LD_INT 69
5618: PUSH
5619: LD_INT 39
5621: PUSH
5622: LD_INT 40
5624: PUSH
5625: LD_INT 41
5627: PUSH
5628: LD_INT 42
5630: PUSH
5631: LD_INT 43
5633: PUSH
5634: LD_INT 48
5636: PUSH
5637: LD_INT 49
5639: PUSH
5640: LD_INT 50
5642: PUSH
5643: LD_INT 51
5645: PUSH
5646: LD_INT 52
5648: PUSH
5649: LD_INT 53
5651: PUSH
5652: LD_INT 54
5654: PUSH
5655: LD_INT 55
5657: PUSH
5658: LD_INT 56
5660: PUSH
5661: LD_INT 60
5663: PUSH
5664: LD_INT 61
5666: PUSH
5667: LD_INT 62
5669: PUSH
5670: LD_INT 66
5672: PUSH
5673: LD_INT 67
5675: PUSH
5676: LD_INT 68
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: ST_TO_ADDR
5721: GO 5910
5723: LD_INT 3
5725: DOUBLE
5726: EQUAL
5727: IFTRUE 5731
5729: GO 5909
5731: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
5732: LD_ADDR_VAR 0 4
5736: PUSH
5737: LD_INT 46
5739: PUSH
5740: LD_INT 47
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: LD_INT 2
5748: PUSH
5749: LD_INT 11
5751: PUSH
5752: LD_INT 9
5754: PUSH
5755: LD_INT 20
5757: PUSH
5758: LD_INT 19
5760: PUSH
5761: LD_INT 21
5763: PUSH
5764: LD_INT 24
5766: PUSH
5767: LD_INT 22
5769: PUSH
5770: LD_INT 25
5772: PUSH
5773: LD_INT 28
5775: PUSH
5776: LD_INT 29
5778: PUSH
5779: LD_INT 31
5781: PUSH
5782: LD_INT 37
5784: PUSH
5785: LD_INT 38
5787: PUSH
5788: LD_INT 32
5790: PUSH
5791: LD_INT 27
5793: PUSH
5794: LD_INT 33
5796: PUSH
5797: LD_INT 69
5799: PUSH
5800: LD_INT 39
5802: PUSH
5803: LD_INT 34
5805: PUSH
5806: LD_INT 40
5808: PUSH
5809: LD_INT 71
5811: PUSH
5812: LD_INT 23
5814: PUSH
5815: LD_INT 44
5817: PUSH
5818: LD_INT 48
5820: PUSH
5821: LD_INT 49
5823: PUSH
5824: LD_INT 50
5826: PUSH
5827: LD_INT 51
5829: PUSH
5830: LD_INT 52
5832: PUSH
5833: LD_INT 53
5835: PUSH
5836: LD_INT 54
5838: PUSH
5839: LD_INT 55
5841: PUSH
5842: LD_INT 56
5844: PUSH
5845: LD_INT 57
5847: PUSH
5848: LD_INT 58
5850: PUSH
5851: LD_INT 59
5853: PUSH
5854: LD_INT 63
5856: PUSH
5857: LD_INT 64
5859: PUSH
5860: LD_INT 65
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: ST_TO_ADDR
5907: GO 5910
5909: POP
// if state > - 1 and state < 3 then
5910: LD_VAR 0 3
5914: PUSH
5915: LD_INT 1
5917: NEG
5918: GREATER
5919: PUSH
5920: LD_VAR 0 3
5924: PUSH
5925: LD_INT 3
5927: LESS
5928: AND
5929: IFFALSE 5986
// for i in result do
5931: LD_ADDR_VAR 0 5
5935: PUSH
5936: LD_VAR 0 4
5940: PUSH
5941: FOR_IN
5942: IFFALSE 5984
// if GetTech ( i , side ) <> state then
5944: LD_VAR 0 5
5948: PPUSH
5949: LD_VAR 0 1
5953: PPUSH
5954: CALL_OW 321
5958: PUSH
5959: LD_VAR 0 3
5963: NONEQUAL
5964: IFFALSE 5982
// result := result diff i ;
5966: LD_ADDR_VAR 0 4
5970: PUSH
5971: LD_VAR 0 4
5975: PUSH
5976: LD_VAR 0 5
5980: DIFF
5981: ST_TO_ADDR
5982: GO 5941
5984: POP
5985: POP
// end ;
5986: LD_VAR 0 4
5990: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5991: LD_INT 0
5993: PPUSH
5994: PPUSH
5995: PPUSH
5996: PPUSH
5997: PPUSH
5998: PPUSH
5999: PPUSH
6000: PPUSH
6001: PPUSH
6002: PPUSH
6003: PPUSH
6004: PPUSH
6005: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
6006: LD_VAR 0 1
6010: NOT
6011: PUSH
6012: LD_VAR 0 1
6016: PPUSH
6017: CALL_OW 257
6021: PUSH
6022: LD_INT 9
6024: NONEQUAL
6025: OR
6026: IFFALSE 6030
// exit ;
6028: GO 6603
// side := GetSide ( unit ) ;
6030: LD_ADDR_VAR 0 9
6034: PUSH
6035: LD_VAR 0 1
6039: PPUSH
6040: CALL_OW 255
6044: ST_TO_ADDR
// tech_space := tech_spacanom ;
6045: LD_ADDR_VAR 0 12
6049: PUSH
6050: LD_INT 29
6052: ST_TO_ADDR
// tech_time := tech_taurad ;
6053: LD_ADDR_VAR 0 13
6057: PUSH
6058: LD_INT 28
6060: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
6061: LD_ADDR_VAR 0 11
6065: PUSH
6066: LD_VAR 0 1
6070: PPUSH
6071: CALL_OW 310
6075: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
6076: LD_VAR 0 11
6080: PPUSH
6081: CALL_OW 247
6085: PUSH
6086: LD_INT 2
6088: EQUAL
6089: IFFALSE 6093
// exit ;
6091: GO 6603
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6093: LD_ADDR_VAR 0 8
6097: PUSH
6098: LD_INT 81
6100: PUSH
6101: LD_VAR 0 9
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 21
6115: PUSH
6116: LD_INT 3
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PPUSH
6131: CALL_OW 69
6135: ST_TO_ADDR
// if not tmp then
6136: LD_VAR 0 8
6140: NOT
6141: IFFALSE 6145
// exit ;
6143: GO 6603
// if in_unit then
6145: LD_VAR 0 11
6149: IFFALSE 6173
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
6151: LD_ADDR_VAR 0 10
6155: PUSH
6156: LD_VAR 0 8
6160: PPUSH
6161: LD_VAR 0 11
6165: PPUSH
6166: CALL_OW 74
6170: ST_TO_ADDR
6171: GO 6193
// enemy := NearestUnitToUnit ( tmp , unit ) ;
6173: LD_ADDR_VAR 0 10
6177: PUSH
6178: LD_VAR 0 8
6182: PPUSH
6183: LD_VAR 0 1
6187: PPUSH
6188: CALL_OW 74
6192: ST_TO_ADDR
// if not enemy then
6193: LD_VAR 0 10
6197: NOT
6198: IFFALSE 6202
// exit ;
6200: GO 6603
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
6202: LD_VAR 0 11
6206: PUSH
6207: LD_VAR 0 11
6211: PPUSH
6212: LD_VAR 0 10
6216: PPUSH
6217: CALL_OW 296
6221: PUSH
6222: LD_INT 13
6224: GREATER
6225: AND
6226: PUSH
6227: LD_VAR 0 1
6231: PPUSH
6232: LD_VAR 0 10
6236: PPUSH
6237: CALL_OW 296
6241: PUSH
6242: LD_INT 12
6244: GREATER
6245: OR
6246: IFFALSE 6250
// exit ;
6248: GO 6603
// missile := [ 1 ] ;
6250: LD_ADDR_VAR 0 14
6254: PUSH
6255: LD_INT 1
6257: PUSH
6258: EMPTY
6259: LIST
6260: ST_TO_ADDR
// if Researched ( side , tech_space ) then
6261: LD_VAR 0 9
6265: PPUSH
6266: LD_VAR 0 12
6270: PPUSH
6271: CALL_OW 325
6275: IFFALSE 6304
// missile := Insert ( missile , missile + 1 , 2 ) ;
6277: LD_ADDR_VAR 0 14
6281: PUSH
6282: LD_VAR 0 14
6286: PPUSH
6287: LD_VAR 0 14
6291: PUSH
6292: LD_INT 1
6294: PLUS
6295: PPUSH
6296: LD_INT 2
6298: PPUSH
6299: CALL_OW 2
6303: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
6304: LD_VAR 0 9
6308: PPUSH
6309: LD_VAR 0 13
6313: PPUSH
6314: CALL_OW 325
6318: PUSH
6319: LD_VAR 0 10
6323: PPUSH
6324: CALL_OW 255
6328: PPUSH
6329: LD_VAR 0 13
6333: PPUSH
6334: CALL_OW 325
6338: NOT
6339: AND
6340: IFFALSE 6369
// missile := Insert ( missile , missile + 1 , 3 ) ;
6342: LD_ADDR_VAR 0 14
6346: PUSH
6347: LD_VAR 0 14
6351: PPUSH
6352: LD_VAR 0 14
6356: PUSH
6357: LD_INT 1
6359: PLUS
6360: PPUSH
6361: LD_INT 3
6363: PPUSH
6364: CALL_OW 2
6368: ST_TO_ADDR
// if missile < 2 then
6369: LD_VAR 0 14
6373: PUSH
6374: LD_INT 2
6376: LESS
6377: IFFALSE 6381
// exit ;
6379: GO 6603
// x := GetX ( enemy ) ;
6381: LD_ADDR_VAR 0 4
6385: PUSH
6386: LD_VAR 0 10
6390: PPUSH
6391: CALL_OW 250
6395: ST_TO_ADDR
// y := GetY ( enemy ) ;
6396: LD_ADDR_VAR 0 5
6400: PUSH
6401: LD_VAR 0 10
6405: PPUSH
6406: CALL_OW 251
6410: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
6411: LD_ADDR_VAR 0 6
6415: PUSH
6416: LD_VAR 0 4
6420: PUSH
6421: LD_INT 1
6423: NEG
6424: PPUSH
6425: LD_INT 1
6427: PPUSH
6428: CALL_OW 12
6432: PLUS
6433: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
6434: LD_ADDR_VAR 0 7
6438: PUSH
6439: LD_VAR 0 5
6443: PUSH
6444: LD_INT 1
6446: NEG
6447: PPUSH
6448: LD_INT 1
6450: PPUSH
6451: CALL_OW 12
6455: PLUS
6456: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6457: LD_VAR 0 6
6461: PPUSH
6462: LD_VAR 0 7
6466: PPUSH
6467: CALL_OW 488
6471: NOT
6472: IFFALSE 6494
// begin _x := x ;
6474: LD_ADDR_VAR 0 6
6478: PUSH
6479: LD_VAR 0 4
6483: ST_TO_ADDR
// _y := y ;
6484: LD_ADDR_VAR 0 7
6488: PUSH
6489: LD_VAR 0 5
6493: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
6494: LD_ADDR_VAR 0 3
6498: PUSH
6499: LD_INT 1
6501: PPUSH
6502: LD_VAR 0 14
6506: PPUSH
6507: CALL_OW 12
6511: ST_TO_ADDR
// case i of 1 :
6512: LD_VAR 0 3
6516: PUSH
6517: LD_INT 1
6519: DOUBLE
6520: EQUAL
6521: IFTRUE 6525
6523: GO 6542
6525: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
6526: LD_VAR 0 1
6530: PPUSH
6531: LD_VAR 0 10
6535: PPUSH
6536: CALL_OW 115
6540: GO 6603
6542: LD_INT 2
6544: DOUBLE
6545: EQUAL
6546: IFTRUE 6550
6548: GO 6572
6550: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
6551: LD_VAR 0 1
6555: PPUSH
6556: LD_VAR 0 6
6560: PPUSH
6561: LD_VAR 0 7
6565: PPUSH
6566: CALL_OW 153
6570: GO 6603
6572: LD_INT 3
6574: DOUBLE
6575: EQUAL
6576: IFTRUE 6580
6578: GO 6602
6580: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
6581: LD_VAR 0 1
6585: PPUSH
6586: LD_VAR 0 6
6590: PPUSH
6591: LD_VAR 0 7
6595: PPUSH
6596: CALL_OW 154
6600: GO 6603
6602: POP
// end ;
6603: LD_VAR 0 2
6607: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
6608: LD_INT 0
6610: PPUSH
6611: PPUSH
6612: PPUSH
6613: PPUSH
6614: PPUSH
6615: PPUSH
// if not unit or not building then
6616: LD_VAR 0 1
6620: NOT
6621: PUSH
6622: LD_VAR 0 2
6626: NOT
6627: OR
6628: IFFALSE 6632
// exit ;
6630: GO 6787
// x := GetX ( building ) ;
6632: LD_ADDR_VAR 0 5
6636: PUSH
6637: LD_VAR 0 2
6641: PPUSH
6642: CALL_OW 250
6646: ST_TO_ADDR
// y := GetY ( building ) ;
6647: LD_ADDR_VAR 0 6
6651: PUSH
6652: LD_VAR 0 2
6656: PPUSH
6657: CALL_OW 251
6661: ST_TO_ADDR
// for i = 0 to 5 do
6662: LD_ADDR_VAR 0 4
6666: PUSH
6667: DOUBLE
6668: LD_INT 0
6670: DEC
6671: ST_TO_ADDR
6672: LD_INT 5
6674: PUSH
6675: FOR_TO
6676: IFFALSE 6785
// begin _x := ShiftX ( x , i , 3 ) ;
6678: LD_ADDR_VAR 0 7
6682: PUSH
6683: LD_VAR 0 5
6687: PPUSH
6688: LD_VAR 0 4
6692: PPUSH
6693: LD_INT 3
6695: PPUSH
6696: CALL_OW 272
6700: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6701: LD_ADDR_VAR 0 8
6705: PUSH
6706: LD_VAR 0 6
6710: PPUSH
6711: LD_VAR 0 4
6715: PPUSH
6716: LD_INT 3
6718: PPUSH
6719: CALL_OW 273
6723: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
6724: LD_VAR 0 7
6728: PPUSH
6729: LD_VAR 0 8
6733: PPUSH
6734: CALL_OW 428
6738: PUSH
6739: LD_INT 0
6741: EQUAL
6742: PUSH
6743: LD_VAR 0 7
6747: PPUSH
6748: LD_VAR 0 8
6752: PPUSH
6753: CALL_OW 488
6757: AND
6758: IFFALSE 6783
// begin ComMoveXY ( unit , _x , _y ) ;
6760: LD_VAR 0 1
6764: PPUSH
6765: LD_VAR 0 7
6769: PPUSH
6770: LD_VAR 0 8
6774: PPUSH
6775: CALL_OW 111
// exit ;
6779: POP
6780: POP
6781: GO 6787
// end ; end ;
6783: GO 6675
6785: POP
6786: POP
// end ;
6787: LD_VAR 0 3
6791: RET
// export function ScanBase ( side , base_area ) ; begin
6792: LD_INT 0
6794: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6795: LD_ADDR_VAR 0 3
6799: PUSH
6800: LD_VAR 0 2
6804: PPUSH
6805: LD_INT 81
6807: PUSH
6808: LD_VAR 0 1
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PPUSH
6817: CALL_OW 70
6821: ST_TO_ADDR
// end ;
6822: LD_VAR 0 3
6826: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
6827: LD_INT 0
6829: PPUSH
6830: PPUSH
6831: PPUSH
6832: PPUSH
6833: PPUSH
6834: PPUSH
6835: PPUSH
6836: PPUSH
6837: PPUSH
6838: PPUSH
6839: PPUSH
6840: PPUSH
6841: PPUSH
6842: PPUSH
6843: PPUSH
6844: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
6845: LD_ADDR_VAR 0 12
6849: PUSH
6850: LD_EXP 38
6854: PUSH
6855: LD_VAR 0 1
6859: ARRAY
6860: PPUSH
6861: LD_INT 25
6863: PUSH
6864: LD_INT 3
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PPUSH
6871: CALL_OW 72
6875: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
6876: LD_ADDR_VAR 0 8
6880: PUSH
6881: LD_EXP 38
6885: PUSH
6886: LD_VAR 0 1
6890: ARRAY
6891: PPUSH
6892: LD_INT 2
6894: PUSH
6895: LD_INT 25
6897: PUSH
6898: LD_INT 1
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: LD_INT 25
6907: PUSH
6908: LD_INT 5
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 25
6917: PUSH
6918: LD_INT 8
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: LD_INT 25
6927: PUSH
6928: LD_INT 9
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: PPUSH
6942: CALL_OW 72
6946: ST_TO_ADDR
// if not defenders and not solds then
6947: LD_VAR 0 2
6951: NOT
6952: PUSH
6953: LD_VAR 0 8
6957: NOT
6958: AND
6959: IFFALSE 6963
// exit ;
6961: GO 8329
// depot_under_attack := false ;
6963: LD_ADDR_VAR 0 16
6967: PUSH
6968: LD_INT 0
6970: ST_TO_ADDR
// sold_defenders := [ ] ;
6971: LD_ADDR_VAR 0 17
6975: PUSH
6976: EMPTY
6977: ST_TO_ADDR
// if mechs then
6978: LD_VAR 0 12
6982: IFFALSE 7111
// for i in defenders do
6984: LD_ADDR_VAR 0 5
6988: PUSH
6989: LD_VAR 0 2
6993: PUSH
6994: FOR_IN
6995: IFFALSE 7109
// begin SetTag ( i , 20 ) ;
6997: LD_VAR 0 5
7001: PPUSH
7002: LD_INT 20
7004: PPUSH
7005: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
7009: LD_VAR 0 5
7013: PPUSH
7014: CALL_OW 263
7018: PUSH
7019: LD_INT 1
7021: EQUAL
7022: PUSH
7023: LD_VAR 0 5
7027: PPUSH
7028: CALL_OW 311
7032: NOT
7033: AND
7034: PUSH
7035: LD_VAR 0 12
7039: AND
7040: IFFALSE 7107
// begin un := mechs [ 1 ] ;
7042: LD_ADDR_VAR 0 10
7046: PUSH
7047: LD_VAR 0 12
7051: PUSH
7052: LD_INT 1
7054: ARRAY
7055: ST_TO_ADDR
// ComExitBuilding ( un ) ;
7056: LD_VAR 0 10
7060: PPUSH
7061: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
7065: LD_VAR 0 10
7069: PPUSH
7070: LD_VAR 0 5
7074: PPUSH
7075: CALL_OW 180
// SetTag ( un , 19 ) ;
7079: LD_VAR 0 10
7083: PPUSH
7084: LD_INT 19
7086: PPUSH
7087: CALL_OW 109
// mechs := mechs diff un ;
7091: LD_ADDR_VAR 0 12
7095: PUSH
7096: LD_VAR 0 12
7100: PUSH
7101: LD_VAR 0 10
7105: DIFF
7106: ST_TO_ADDR
// end ; end ;
7107: GO 6994
7109: POP
7110: POP
// if solds then
7111: LD_VAR 0 8
7115: IFFALSE 7174
// for i in solds do
7117: LD_ADDR_VAR 0 5
7121: PUSH
7122: LD_VAR 0 8
7126: PUSH
7127: FOR_IN
7128: IFFALSE 7172
// if not GetTag ( i ) then
7130: LD_VAR 0 5
7134: PPUSH
7135: CALL_OW 110
7139: NOT
7140: IFFALSE 7170
// begin defenders := defenders union i ;
7142: LD_ADDR_VAR 0 2
7146: PUSH
7147: LD_VAR 0 2
7151: PUSH
7152: LD_VAR 0 5
7156: UNION
7157: ST_TO_ADDR
// SetTag ( i , 18 ) ;
7158: LD_VAR 0 5
7162: PPUSH
7163: LD_INT 18
7165: PPUSH
7166: CALL_OW 109
// end ;
7170: GO 7127
7172: POP
7173: POP
// repeat wait ( 0 0$1 ) ;
7174: LD_INT 35
7176: PPUSH
7177: CALL_OW 67
// enemy := mc_scan [ base ] ;
7181: LD_ADDR_VAR 0 3
7185: PUSH
7186: LD_EXP 61
7190: PUSH
7191: LD_VAR 0 1
7195: ARRAY
7196: ST_TO_ADDR
// for i in defenders do
7197: LD_ADDR_VAR 0 5
7201: PUSH
7202: LD_VAR 0 2
7206: PUSH
7207: FOR_IN
7208: IFFALSE 7893
// begin e := NearestUnitToUnit ( enemy , i ) ;
7210: LD_ADDR_VAR 0 13
7214: PUSH
7215: LD_VAR 0 3
7219: PPUSH
7220: LD_VAR 0 5
7224: PPUSH
7225: CALL_OW 74
7229: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
7230: LD_ADDR_VAR 0 16
7234: PUSH
7235: LD_EXP 38
7239: PUSH
7240: LD_VAR 0 1
7244: ARRAY
7245: PPUSH
7246: LD_INT 2
7248: PUSH
7249: LD_INT 30
7251: PUSH
7252: LD_INT 0
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: LD_INT 30
7261: PUSH
7262: LD_INT 1
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: LIST
7273: PPUSH
7274: CALL_OW 72
7278: NOT
7279: PUSH
7280: LD_EXP 38
7284: PUSH
7285: LD_VAR 0 1
7289: ARRAY
7290: PPUSH
7291: LD_INT 2
7293: PUSH
7294: LD_INT 30
7296: PUSH
7297: LD_INT 0
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: LD_INT 30
7306: PUSH
7307: LD_INT 1
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: LIST
7318: PPUSH
7319: CALL_OW 72
7323: PPUSH
7324: CALL_OW 256
7328: PUSH
7329: LD_INT 600
7331: LESS
7332: OR
7333: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
7334: LD_VAR 0 5
7338: PPUSH
7339: CALL_OW 247
7343: PUSH
7344: LD_INT 2
7346: DOUBLE
7347: EQUAL
7348: IFTRUE 7352
7350: GO 7599
7352: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
7353: LD_VAR 0 5
7357: PPUSH
7358: CALL_OW 256
7362: PUSH
7363: LD_INT 650
7365: GREATER
7366: PUSH
7367: LD_VAR 0 5
7371: PPUSH
7372: LD_VAR 0 13
7376: PPUSH
7377: CALL_OW 296
7381: PUSH
7382: LD_INT 40
7384: LESS
7385: AND
7386: IFFALSE 7404
// ComAttackUnit ( i , e ) else
7388: LD_VAR 0 5
7392: PPUSH
7393: LD_VAR 0 13
7397: PPUSH
7398: CALL_OW 115
7402: GO 7482
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
7404: LD_VAR 0 5
7408: PPUSH
7409: LD_VAR 0 13
7413: PPUSH
7414: CALL_OW 296
7418: PUSH
7419: LD_INT 30
7421: GREATEREQUAL
7422: PUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: CALL_OW 256
7432: PUSH
7433: LD_INT 650
7435: LESSEQUAL
7436: OR
7437: PUSH
7438: LD_VAR 0 5
7442: PPUSH
7443: LD_EXP 62
7447: PUSH
7448: LD_VAR 0 1
7452: ARRAY
7453: PPUSH
7454: CALL_OW 308
7458: NOT
7459: AND
7460: IFFALSE 7482
// ComMoveToArea ( i , mc_parking [ base ] ) ;
7462: LD_VAR 0 5
7466: PPUSH
7467: LD_EXP 62
7471: PUSH
7472: LD_VAR 0 1
7476: ARRAY
7477: PPUSH
7478: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
7482: LD_VAR 0 5
7486: PPUSH
7487: CALL_OW 256
7491: PUSH
7492: LD_INT 998
7494: LESS
7495: PUSH
7496: LD_VAR 0 5
7500: PPUSH
7501: CALL_OW 263
7505: PUSH
7506: LD_INT 1
7508: EQUAL
7509: AND
7510: PUSH
7511: LD_VAR 0 5
7515: PPUSH
7516: CALL_OW 311
7520: AND
7521: PUSH
7522: LD_VAR 0 5
7526: PPUSH
7527: LD_EXP 62
7531: PUSH
7532: LD_VAR 0 1
7536: ARRAY
7537: PPUSH
7538: CALL_OW 308
7542: AND
7543: IFFALSE 7597
// begin mech := IsDrivenBy ( i ) ;
7545: LD_ADDR_VAR 0 9
7549: PUSH
7550: LD_VAR 0 5
7554: PPUSH
7555: CALL_OW 311
7559: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
7560: LD_VAR 0 9
7564: PPUSH
7565: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
7569: LD_VAR 0 9
7573: PPUSH
7574: LD_VAR 0 5
7578: PPUSH
7579: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
7583: LD_VAR 0 9
7587: PPUSH
7588: LD_VAR 0 5
7592: PPUSH
7593: CALL_OW 180
// end ; end ; unit_human :
7597: GO 7864
7599: LD_INT 1
7601: DOUBLE
7602: EQUAL
7603: IFTRUE 7607
7605: GO 7863
7607: POP
// begin b := IsInUnit ( i ) ;
7608: LD_ADDR_VAR 0 18
7612: PUSH
7613: LD_VAR 0 5
7617: PPUSH
7618: CALL_OW 310
7622: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
7623: LD_ADDR_VAR 0 19
7627: PUSH
7628: LD_VAR 0 18
7632: NOT
7633: PUSH
7634: LD_VAR 0 18
7638: PPUSH
7639: CALL_OW 266
7643: PUSH
7644: LD_INT 32
7646: PUSH
7647: LD_INT 31
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: IN
7654: OR
7655: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
7656: LD_VAR 0 16
7660: PUSH
7661: LD_VAR 0 2
7665: PPUSH
7666: LD_INT 21
7668: PUSH
7669: LD_INT 2
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 72
7680: PUSH
7681: LD_INT 1
7683: LESSEQUAL
7684: OR
7685: PUSH
7686: LD_VAR 0 19
7690: AND
7691: PUSH
7692: LD_VAR 0 5
7696: PUSH
7697: LD_VAR 0 17
7701: IN
7702: NOT
7703: AND
7704: IFFALSE 7797
// begin if b then
7706: LD_VAR 0 18
7710: IFFALSE 7759
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
7712: LD_VAR 0 18
7716: PPUSH
7717: LD_VAR 0 3
7721: PPUSH
7722: LD_VAR 0 18
7726: PPUSH
7727: CALL_OW 74
7731: PPUSH
7732: CALL_OW 296
7736: PUSH
7737: LD_INT 10
7739: LESS
7740: PUSH
7741: LD_VAR 0 18
7745: PPUSH
7746: CALL_OW 461
7750: PUSH
7751: LD_INT 7
7753: NONEQUAL
7754: AND
7755: IFFALSE 7759
// continue ;
7757: GO 7207
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
7759: LD_ADDR_VAR 0 17
7763: PUSH
7764: LD_VAR 0 17
7768: PPUSH
7769: LD_VAR 0 17
7773: PUSH
7774: LD_INT 1
7776: PLUS
7777: PPUSH
7778: LD_VAR 0 5
7782: PPUSH
7783: CALL_OW 1
7787: ST_TO_ADDR
// ComExitBuilding ( i ) ;
7788: LD_VAR 0 5
7792: PPUSH
7793: CALL_OW 122
// end ; if sold_defenders then
7797: LD_VAR 0 17
7801: IFFALSE 7861
// if i in sold_defenders then
7803: LD_VAR 0 5
7807: PUSH
7808: LD_VAR 0 17
7812: IN
7813: IFFALSE 7861
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
7815: LD_VAR 0 5
7819: PPUSH
7820: CALL_OW 314
7824: NOT
7825: PUSH
7826: LD_VAR 0 5
7830: PPUSH
7831: LD_VAR 0 13
7835: PPUSH
7836: CALL_OW 296
7840: PUSH
7841: LD_INT 30
7843: LESS
7844: AND
7845: IFFALSE 7861
// ComAttackUnit ( i , e ) ;
7847: LD_VAR 0 5
7851: PPUSH
7852: LD_VAR 0 13
7856: PPUSH
7857: CALL_OW 115
// end ; end ; end ;
7861: GO 7864
7863: POP
// if IsDead ( i ) then
7864: LD_VAR 0 5
7868: PPUSH
7869: CALL_OW 301
7873: IFFALSE 7891
// defenders := defenders diff i ;
7875: LD_ADDR_VAR 0 2
7879: PUSH
7880: LD_VAR 0 2
7884: PUSH
7885: LD_VAR 0 5
7889: DIFF
7890: ST_TO_ADDR
// end ;
7891: GO 7207
7893: POP
7894: POP
// until not enemy or not defenders ;
7895: LD_VAR 0 3
7899: NOT
7900: PUSH
7901: LD_VAR 0 2
7905: NOT
7906: OR
7907: IFFALSE 7174
// MC_Reset ( base , 18 ) ;
7909: LD_VAR 0 1
7913: PPUSH
7914: LD_INT 18
7916: PPUSH
7917: CALL 44271 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
7921: LD_ADDR_VAR 0 2
7925: PUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_VAR 0 2
7935: PPUSH
7936: LD_INT 2
7938: PUSH
7939: LD_INT 25
7941: PUSH
7942: LD_INT 1
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: LD_INT 25
7951: PUSH
7952: LD_INT 5
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: LD_INT 25
7961: PUSH
7962: LD_INT 8
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PUSH
7969: LD_INT 25
7971: PUSH
7972: LD_INT 9
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: PPUSH
7986: CALL_OW 72
7990: DIFF
7991: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
7992: LD_VAR 0 3
7996: NOT
7997: PUSH
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_INT 21
8005: PUSH
8006: LD_INT 2
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PPUSH
8013: CALL_OW 72
8017: AND
8018: IFFALSE 8280
// begin tmp := FilterByTag ( defenders , 19 ) ;
8020: LD_ADDR_VAR 0 11
8024: PUSH
8025: LD_VAR 0 2
8029: PPUSH
8030: LD_INT 19
8032: PPUSH
8033: CALL 42563 0 2
8037: ST_TO_ADDR
// if tmp then
8038: LD_VAR 0 11
8042: IFFALSE 8112
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
8044: LD_ADDR_VAR 0 11
8048: PUSH
8049: LD_VAR 0 11
8053: PPUSH
8054: LD_INT 25
8056: PUSH
8057: LD_INT 3
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PPUSH
8064: CALL_OW 72
8068: ST_TO_ADDR
// if tmp then
8069: LD_VAR 0 11
8073: IFFALSE 8112
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
8075: LD_ADDR_EXP 50
8079: PUSH
8080: LD_EXP 50
8084: PPUSH
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_EXP 50
8094: PUSH
8095: LD_VAR 0 1
8099: ARRAY
8100: PUSH
8101: LD_VAR 0 11
8105: UNION
8106: PPUSH
8107: CALL_OW 1
8111: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_INT 19
8119: PPUSH
8120: CALL 44271 0 2
// repeat wait ( 0 0$1 ) ;
8124: LD_INT 35
8126: PPUSH
8127: CALL_OW 67
// for i in defenders do
8131: LD_ADDR_VAR 0 5
8135: PUSH
8136: LD_VAR 0 2
8140: PUSH
8141: FOR_IN
8142: IFFALSE 8231
// begin if not IsInArea ( i , mc_parking [ base ] ) then
8144: LD_VAR 0 5
8148: PPUSH
8149: LD_EXP 62
8153: PUSH
8154: LD_VAR 0 1
8158: ARRAY
8159: PPUSH
8160: CALL_OW 308
8164: NOT
8165: IFFALSE 8189
// ComMoveToArea ( i , mc_parking [ base ] ) else
8167: LD_VAR 0 5
8171: PPUSH
8172: LD_EXP 62
8176: PUSH
8177: LD_VAR 0 1
8181: ARRAY
8182: PPUSH
8183: CALL_OW 113
8187: GO 8229
// if GetControl ( i ) = control_manual then
8189: LD_VAR 0 5
8193: PPUSH
8194: CALL_OW 263
8198: PUSH
8199: LD_INT 1
8201: EQUAL
8202: IFFALSE 8229
// if IsDrivenBy ( i ) then
8204: LD_VAR 0 5
8208: PPUSH
8209: CALL_OW 311
8213: IFFALSE 8229
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
8215: LD_VAR 0 5
8219: PPUSH
8220: CALL_OW 311
8224: PPUSH
8225: CALL_OW 121
// end ;
8229: GO 8141
8231: POP
8232: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
8233: LD_VAR 0 2
8237: PPUSH
8238: LD_INT 95
8240: PUSH
8241: LD_EXP 62
8245: PUSH
8246: LD_VAR 0 1
8250: ARRAY
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PPUSH
8256: CALL_OW 72
8260: PUSH
8261: LD_VAR 0 2
8265: EQUAL
8266: PUSH
8267: LD_EXP 61
8271: PUSH
8272: LD_VAR 0 1
8276: ARRAY
8277: OR
8278: IFFALSE 8124
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
8280: LD_ADDR_EXP 60
8284: PUSH
8285: LD_EXP 60
8289: PPUSH
8290: LD_VAR 0 1
8294: PPUSH
8295: LD_EXP 60
8299: PUSH
8300: LD_VAR 0 1
8304: ARRAY
8305: PUSH
8306: LD_VAR 0 2
8310: UNION
8311: PPUSH
8312: CALL_OW 1
8316: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
8317: LD_VAR 0 1
8321: PPUSH
8322: LD_INT 20
8324: PPUSH
8325: CALL 44271 0 2
// end ;
8329: LD_VAR 0 4
8333: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
8334: LD_INT 0
8336: PPUSH
8337: PPUSH
8338: PPUSH
8339: PPUSH
// result := false ;
8340: LD_ADDR_VAR 0 2
8344: PUSH
8345: LD_INT 0
8347: ST_TO_ADDR
// side := GetSide ( unit ) ;
8348: LD_ADDR_VAR 0 3
8352: PUSH
8353: LD_VAR 0 1
8357: PPUSH
8358: CALL_OW 255
8362: ST_TO_ADDR
// nat := GetNation ( unit ) ;
8363: LD_ADDR_VAR 0 4
8367: PUSH
8368: LD_VAR 0 1
8372: PPUSH
8373: CALL_OW 248
8377: ST_TO_ADDR
// case nat of 1 :
8378: LD_VAR 0 4
8382: PUSH
8383: LD_INT 1
8385: DOUBLE
8386: EQUAL
8387: IFTRUE 8391
8389: GO 8402
8391: POP
// tech := tech_lassight ; 2 :
8392: LD_ADDR_VAR 0 5
8396: PUSH
8397: LD_INT 12
8399: ST_TO_ADDR
8400: GO 8441
8402: LD_INT 2
8404: DOUBLE
8405: EQUAL
8406: IFTRUE 8410
8408: GO 8421
8410: POP
// tech := tech_mortar ; 3 :
8411: LD_ADDR_VAR 0 5
8415: PUSH
8416: LD_INT 41
8418: ST_TO_ADDR
8419: GO 8441
8421: LD_INT 3
8423: DOUBLE
8424: EQUAL
8425: IFTRUE 8429
8427: GO 8440
8429: POP
// tech := tech_bazooka ; end ;
8430: LD_ADDR_VAR 0 5
8434: PUSH
8435: LD_INT 44
8437: ST_TO_ADDR
8438: GO 8441
8440: POP
// if Researched ( side , tech ) then
8441: LD_VAR 0 3
8445: PPUSH
8446: LD_VAR 0 5
8450: PPUSH
8451: CALL_OW 325
8455: IFFALSE 8482
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
8457: LD_ADDR_VAR 0 2
8461: PUSH
8462: LD_INT 5
8464: PUSH
8465: LD_INT 8
8467: PUSH
8468: LD_INT 9
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: LIST
8475: PUSH
8476: LD_VAR 0 4
8480: ARRAY
8481: ST_TO_ADDR
// end ;
8482: LD_VAR 0 2
8486: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
8487: LD_INT 0
8489: PPUSH
8490: PPUSH
8491: PPUSH
// if not mines then
8492: LD_VAR 0 2
8496: NOT
8497: IFFALSE 8501
// exit ;
8499: GO 8645
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8501: LD_ADDR_VAR 0 5
8505: PUSH
8506: LD_INT 81
8508: PUSH
8509: LD_VAR 0 1
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 3
8520: PUSH
8521: LD_INT 21
8523: PUSH
8524: LD_INT 3
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PPUSH
8539: CALL_OW 69
8543: ST_TO_ADDR
// for i in mines do
8544: LD_ADDR_VAR 0 4
8548: PUSH
8549: LD_VAR 0 2
8553: PUSH
8554: FOR_IN
8555: IFFALSE 8643
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
8557: LD_VAR 0 4
8561: PUSH
8562: LD_INT 1
8564: ARRAY
8565: PPUSH
8566: LD_VAR 0 4
8570: PUSH
8571: LD_INT 2
8573: ARRAY
8574: PPUSH
8575: CALL_OW 458
8579: NOT
8580: IFFALSE 8584
// continue ;
8582: GO 8554
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
8584: LD_VAR 0 4
8588: PUSH
8589: LD_INT 1
8591: ARRAY
8592: PPUSH
8593: LD_VAR 0 4
8597: PUSH
8598: LD_INT 2
8600: ARRAY
8601: PPUSH
8602: CALL_OW 428
8606: PUSH
8607: LD_VAR 0 5
8611: IN
8612: IFFALSE 8641
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
8614: LD_VAR 0 4
8618: PUSH
8619: LD_INT 1
8621: ARRAY
8622: PPUSH
8623: LD_VAR 0 4
8627: PUSH
8628: LD_INT 2
8630: ARRAY
8631: PPUSH
8632: LD_VAR 0 1
8636: PPUSH
8637: CALL_OW 456
// end ;
8641: GO 8554
8643: POP
8644: POP
// end ;
8645: LD_VAR 0 3
8649: RET
// export function Count ( array ) ; var i ; begin
8650: LD_INT 0
8652: PPUSH
8653: PPUSH
// result := 0 ;
8654: LD_ADDR_VAR 0 2
8658: PUSH
8659: LD_INT 0
8661: ST_TO_ADDR
// for i in array do
8662: LD_ADDR_VAR 0 3
8666: PUSH
8667: LD_VAR 0 1
8671: PUSH
8672: FOR_IN
8673: IFFALSE 8697
// if i then
8675: LD_VAR 0 3
8679: IFFALSE 8695
// result := result + 1 ;
8681: LD_ADDR_VAR 0 2
8685: PUSH
8686: LD_VAR 0 2
8690: PUSH
8691: LD_INT 1
8693: PLUS
8694: ST_TO_ADDR
8695: GO 8672
8697: POP
8698: POP
// end ;
8699: LD_VAR 0 2
8703: RET
// export function IsEmpty ( building ) ; begin
8704: LD_INT 0
8706: PPUSH
// if not building then
8707: LD_VAR 0 1
8711: NOT
8712: IFFALSE 8716
// exit ;
8714: GO 8759
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
8716: LD_ADDR_VAR 0 2
8720: PUSH
8721: LD_VAR 0 1
8725: PUSH
8726: LD_INT 22
8728: PUSH
8729: LD_VAR 0 1
8733: PPUSH
8734: CALL_OW 255
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PUSH
8743: LD_INT 58
8745: PUSH
8746: EMPTY
8747: LIST
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PPUSH
8753: CALL_OW 69
8757: IN
8758: ST_TO_ADDR
// end ;
8759: LD_VAR 0 2
8763: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
8764: LD_INT 0
8766: PPUSH
8767: PPUSH
8768: PPUSH
8769: PPUSH
// tmp := [ ] ;
8770: LD_ADDR_VAR 0 3
8774: PUSH
8775: EMPTY
8776: ST_TO_ADDR
// list := [ ] ;
8777: LD_ADDR_VAR 0 5
8781: PUSH
8782: EMPTY
8783: ST_TO_ADDR
// for i = 16 to 25 do
8784: LD_ADDR_VAR 0 4
8788: PUSH
8789: DOUBLE
8790: LD_INT 16
8792: DEC
8793: ST_TO_ADDR
8794: LD_INT 25
8796: PUSH
8797: FOR_TO
8798: IFFALSE 8871
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
8800: LD_ADDR_VAR 0 3
8804: PUSH
8805: LD_VAR 0 3
8809: PUSH
8810: LD_INT 22
8812: PUSH
8813: LD_VAR 0 1
8817: PPUSH
8818: CALL_OW 255
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: PUSH
8827: LD_INT 91
8829: PUSH
8830: LD_VAR 0 1
8834: PUSH
8835: LD_INT 6
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 30
8845: PUSH
8846: LD_VAR 0 4
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: LIST
8859: PUSH
8860: EMPTY
8861: LIST
8862: PPUSH
8863: CALL_OW 69
8867: ADD
8868: ST_TO_ADDR
8869: GO 8797
8871: POP
8872: POP
// for i = 1 to tmp do
8873: LD_ADDR_VAR 0 4
8877: PUSH
8878: DOUBLE
8879: LD_INT 1
8881: DEC
8882: ST_TO_ADDR
8883: LD_VAR 0 3
8887: PUSH
8888: FOR_TO
8889: IFFALSE 8977
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
8891: LD_ADDR_VAR 0 5
8895: PUSH
8896: LD_VAR 0 5
8900: PUSH
8901: LD_VAR 0 3
8905: PUSH
8906: LD_VAR 0 4
8910: ARRAY
8911: PPUSH
8912: CALL_OW 266
8916: PUSH
8917: LD_VAR 0 3
8921: PUSH
8922: LD_VAR 0 4
8926: ARRAY
8927: PPUSH
8928: CALL_OW 250
8932: PUSH
8933: LD_VAR 0 3
8937: PUSH
8938: LD_VAR 0 4
8942: ARRAY
8943: PPUSH
8944: CALL_OW 251
8948: PUSH
8949: LD_VAR 0 3
8953: PUSH
8954: LD_VAR 0 4
8958: ARRAY
8959: PPUSH
8960: CALL_OW 254
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: PUSH
8971: EMPTY
8972: LIST
8973: ADD
8974: ST_TO_ADDR
8975: GO 8888
8977: POP
8978: POP
// result := list ;
8979: LD_ADDR_VAR 0 2
8983: PUSH
8984: LD_VAR 0 5
8988: ST_TO_ADDR
// end ;
8989: LD_VAR 0 2
8993: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
8994: LD_INT 0
8996: PPUSH
8997: PPUSH
8998: PPUSH
8999: PPUSH
9000: PPUSH
9001: PPUSH
9002: PPUSH
// if not factory then
9003: LD_VAR 0 1
9007: NOT
9008: IFFALSE 9012
// exit ;
9010: GO 9537
// if control = control_apeman then
9012: LD_VAR 0 4
9016: PUSH
9017: LD_INT 5
9019: EQUAL
9020: IFFALSE 9129
// begin tmp := UnitsInside ( factory ) ;
9022: LD_ADDR_VAR 0 8
9026: PUSH
9027: LD_VAR 0 1
9031: PPUSH
9032: CALL_OW 313
9036: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
9037: LD_VAR 0 8
9041: PPUSH
9042: LD_INT 25
9044: PUSH
9045: LD_INT 12
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PPUSH
9052: CALL_OW 72
9056: NOT
9057: IFFALSE 9067
// control := control_manual ;
9059: LD_ADDR_VAR 0 4
9063: PUSH
9064: LD_INT 1
9066: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
9067: LD_ADDR_VAR 0 8
9071: PUSH
9072: LD_VAR 0 1
9076: PPUSH
9077: CALL 8764 0 1
9081: ST_TO_ADDR
// if tmp then
9082: LD_VAR 0 8
9086: IFFALSE 9129
// begin for i in tmp do
9088: LD_ADDR_VAR 0 7
9092: PUSH
9093: LD_VAR 0 8
9097: PUSH
9098: FOR_IN
9099: IFFALSE 9127
// if i [ 1 ] = b_ext_radar then
9101: LD_VAR 0 7
9105: PUSH
9106: LD_INT 1
9108: ARRAY
9109: PUSH
9110: LD_INT 20
9112: EQUAL
9113: IFFALSE 9125
// begin control := control_remote ;
9115: LD_ADDR_VAR 0 4
9119: PUSH
9120: LD_INT 2
9122: ST_TO_ADDR
// break ;
9123: GO 9127
// end ;
9125: GO 9098
9127: POP
9128: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9129: LD_VAR 0 1
9133: PPUSH
9134: LD_VAR 0 2
9138: PPUSH
9139: LD_VAR 0 3
9143: PPUSH
9144: LD_VAR 0 4
9148: PPUSH
9149: LD_VAR 0 5
9153: PPUSH
9154: CALL_OW 448
9158: IFFALSE 9193
// begin result := [ chassis , engine , control , weapon ] ;
9160: LD_ADDR_VAR 0 6
9164: PUSH
9165: LD_VAR 0 2
9169: PUSH
9170: LD_VAR 0 3
9174: PUSH
9175: LD_VAR 0 4
9179: PUSH
9180: LD_VAR 0 5
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: ST_TO_ADDR
// exit ;
9191: GO 9537
// end ; _chassis := AvailableChassisList ( factory ) ;
9193: LD_ADDR_VAR 0 9
9197: PUSH
9198: LD_VAR 0 1
9202: PPUSH
9203: CALL_OW 475
9207: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
9208: LD_ADDR_VAR 0 11
9212: PUSH
9213: LD_VAR 0 1
9217: PPUSH
9218: CALL_OW 476
9222: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
9223: LD_ADDR_VAR 0 12
9227: PUSH
9228: LD_VAR 0 1
9232: PPUSH
9233: CALL_OW 477
9237: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
9238: LD_ADDR_VAR 0 10
9242: PUSH
9243: LD_VAR 0 1
9247: PPUSH
9248: CALL_OW 478
9252: ST_TO_ADDR
// if not chassis in _chassis then
9253: LD_VAR 0 2
9257: PUSH
9258: LD_VAR 0 9
9262: IN
9263: NOT
9264: IFFALSE 9290
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
9266: LD_ADDR_VAR 0 2
9270: PUSH
9271: LD_VAR 0 9
9275: PUSH
9276: LD_INT 1
9278: PPUSH
9279: LD_VAR 0 9
9283: PPUSH
9284: CALL_OW 12
9288: ARRAY
9289: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
9290: LD_VAR 0 2
9294: PPUSH
9295: LD_VAR 0 3
9299: PPUSH
9300: CALL 9542 0 2
9304: NOT
9305: IFFALSE 9364
// repeat engine := _engine [ 1 ] ;
9307: LD_ADDR_VAR 0 3
9311: PUSH
9312: LD_VAR 0 11
9316: PUSH
9317: LD_INT 1
9319: ARRAY
9320: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
9321: LD_ADDR_VAR 0 11
9325: PUSH
9326: LD_VAR 0 11
9330: PPUSH
9331: LD_INT 1
9333: PPUSH
9334: CALL_OW 3
9338: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
9339: LD_VAR 0 2
9343: PPUSH
9344: LD_VAR 0 3
9348: PPUSH
9349: CALL 9542 0 2
9353: PUSH
9354: LD_VAR 0 11
9358: PUSH
9359: EMPTY
9360: EQUAL
9361: OR
9362: IFFALSE 9307
// if not control in _control then
9364: LD_VAR 0 4
9368: PUSH
9369: LD_VAR 0 12
9373: IN
9374: NOT
9375: IFFALSE 9401
// control := _control [ rand ( 1 , _control ) ] ;
9377: LD_ADDR_VAR 0 4
9381: PUSH
9382: LD_VAR 0 12
9386: PUSH
9387: LD_INT 1
9389: PPUSH
9390: LD_VAR 0 12
9394: PPUSH
9395: CALL_OW 12
9399: ARRAY
9400: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
9401: LD_VAR 0 2
9405: PPUSH
9406: LD_VAR 0 5
9410: PPUSH
9411: CALL 9762 0 2
9415: NOT
9416: IFFALSE 9475
// repeat weapon := _weapon [ 1 ] ;
9418: LD_ADDR_VAR 0 5
9422: PUSH
9423: LD_VAR 0 10
9427: PUSH
9428: LD_INT 1
9430: ARRAY
9431: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
9432: LD_ADDR_VAR 0 10
9436: PUSH
9437: LD_VAR 0 10
9441: PPUSH
9442: LD_INT 1
9444: PPUSH
9445: CALL_OW 3
9449: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
9450: LD_VAR 0 2
9454: PPUSH
9455: LD_VAR 0 5
9459: PPUSH
9460: CALL 9762 0 2
9464: PUSH
9465: LD_VAR 0 10
9469: PUSH
9470: EMPTY
9471: EQUAL
9472: OR
9473: IFFALSE 9418
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9475: LD_VAR 0 1
9479: PPUSH
9480: LD_VAR 0 2
9484: PPUSH
9485: LD_VAR 0 3
9489: PPUSH
9490: LD_VAR 0 4
9494: PPUSH
9495: LD_VAR 0 5
9499: PPUSH
9500: CALL_OW 448
9504: IFFALSE 9537
// result := [ chassis , engine , control , weapon ] ;
9506: LD_ADDR_VAR 0 6
9510: PUSH
9511: LD_VAR 0 2
9515: PUSH
9516: LD_VAR 0 3
9520: PUSH
9521: LD_VAR 0 4
9525: PUSH
9526: LD_VAR 0 5
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// end ;
9537: LD_VAR 0 6
9541: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
9542: LD_INT 0
9544: PPUSH
// if not chassis or not engine then
9545: LD_VAR 0 1
9549: NOT
9550: PUSH
9551: LD_VAR 0 2
9555: NOT
9556: OR
9557: IFFALSE 9561
// exit ;
9559: GO 9757
// case engine of engine_solar :
9561: LD_VAR 0 2
9565: PUSH
9566: LD_INT 2
9568: DOUBLE
9569: EQUAL
9570: IFTRUE 9574
9572: GO 9612
9574: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
9575: LD_ADDR_VAR 0 3
9579: PUSH
9580: LD_INT 11
9582: PUSH
9583: LD_INT 12
9585: PUSH
9586: LD_INT 13
9588: PUSH
9589: LD_INT 14
9591: PUSH
9592: LD_INT 1
9594: PUSH
9595: LD_INT 2
9597: PUSH
9598: LD_INT 3
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: ST_TO_ADDR
9610: GO 9741
9612: LD_INT 1
9614: DOUBLE
9615: EQUAL
9616: IFTRUE 9620
9618: GO 9682
9620: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
9621: LD_ADDR_VAR 0 3
9625: PUSH
9626: LD_INT 11
9628: PUSH
9629: LD_INT 12
9631: PUSH
9632: LD_INT 13
9634: PUSH
9635: LD_INT 14
9637: PUSH
9638: LD_INT 1
9640: PUSH
9641: LD_INT 2
9643: PUSH
9644: LD_INT 3
9646: PUSH
9647: LD_INT 4
9649: PUSH
9650: LD_INT 5
9652: PUSH
9653: LD_INT 21
9655: PUSH
9656: LD_INT 23
9658: PUSH
9659: LD_INT 22
9661: PUSH
9662: LD_INT 24
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: ST_TO_ADDR
9680: GO 9741
9682: LD_INT 3
9684: DOUBLE
9685: EQUAL
9686: IFTRUE 9690
9688: GO 9740
9690: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9691: LD_ADDR_VAR 0 3
9695: PUSH
9696: LD_INT 13
9698: PUSH
9699: LD_INT 14
9701: PUSH
9702: LD_INT 2
9704: PUSH
9705: LD_INT 3
9707: PUSH
9708: LD_INT 4
9710: PUSH
9711: LD_INT 5
9713: PUSH
9714: LD_INT 21
9716: PUSH
9717: LD_INT 22
9719: PUSH
9720: LD_INT 23
9722: PUSH
9723: LD_INT 24
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: ST_TO_ADDR
9738: GO 9741
9740: POP
// result := ( chassis in result ) ;
9741: LD_ADDR_VAR 0 3
9745: PUSH
9746: LD_VAR 0 1
9750: PUSH
9751: LD_VAR 0 3
9755: IN
9756: ST_TO_ADDR
// end ;
9757: LD_VAR 0 3
9761: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
9762: LD_INT 0
9764: PPUSH
// if not chassis or not weapon then
9765: LD_VAR 0 1
9769: NOT
9770: PUSH
9771: LD_VAR 0 2
9775: NOT
9776: OR
9777: IFFALSE 9781
// exit ;
9779: GO 10807
// case weapon of us_machine_gun :
9781: LD_VAR 0 2
9785: PUSH
9786: LD_INT 2
9788: DOUBLE
9789: EQUAL
9790: IFTRUE 9794
9792: GO 9824
9794: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
9795: LD_ADDR_VAR 0 3
9799: PUSH
9800: LD_INT 1
9802: PUSH
9803: LD_INT 2
9805: PUSH
9806: LD_INT 3
9808: PUSH
9809: LD_INT 4
9811: PUSH
9812: LD_INT 5
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: ST_TO_ADDR
9822: GO 10791
9824: LD_INT 3
9826: DOUBLE
9827: EQUAL
9828: IFTRUE 9832
9830: GO 9862
9832: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
9833: LD_ADDR_VAR 0 3
9837: PUSH
9838: LD_INT 1
9840: PUSH
9841: LD_INT 2
9843: PUSH
9844: LD_INT 3
9846: PUSH
9847: LD_INT 4
9849: PUSH
9850: LD_INT 5
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: ST_TO_ADDR
9860: GO 10791
9862: LD_INT 11
9864: DOUBLE
9865: EQUAL
9866: IFTRUE 9870
9868: GO 9900
9870: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
9871: LD_ADDR_VAR 0 3
9875: PUSH
9876: LD_INT 1
9878: PUSH
9879: LD_INT 2
9881: PUSH
9882: LD_INT 3
9884: PUSH
9885: LD_INT 4
9887: PUSH
9888: LD_INT 5
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: ST_TO_ADDR
9898: GO 10791
9900: LD_INT 4
9902: DOUBLE
9903: EQUAL
9904: IFTRUE 9908
9906: GO 9934
9908: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
9909: LD_ADDR_VAR 0 3
9913: PUSH
9914: LD_INT 2
9916: PUSH
9917: LD_INT 3
9919: PUSH
9920: LD_INT 4
9922: PUSH
9923: LD_INT 5
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: ST_TO_ADDR
9932: GO 10791
9934: LD_INT 5
9936: DOUBLE
9937: EQUAL
9938: IFTRUE 9942
9940: GO 9968
9942: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
9943: LD_ADDR_VAR 0 3
9947: PUSH
9948: LD_INT 2
9950: PUSH
9951: LD_INT 3
9953: PUSH
9954: LD_INT 4
9956: PUSH
9957: LD_INT 5
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: ST_TO_ADDR
9966: GO 10791
9968: LD_INT 9
9970: DOUBLE
9971: EQUAL
9972: IFTRUE 9976
9974: GO 10002
9976: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
9977: LD_ADDR_VAR 0 3
9981: PUSH
9982: LD_INT 2
9984: PUSH
9985: LD_INT 3
9987: PUSH
9988: LD_INT 4
9990: PUSH
9991: LD_INT 5
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: ST_TO_ADDR
10000: GO 10791
10002: LD_INT 7
10004: DOUBLE
10005: EQUAL
10006: IFTRUE 10010
10008: GO 10036
10010: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
10011: LD_ADDR_VAR 0 3
10015: PUSH
10016: LD_INT 2
10018: PUSH
10019: LD_INT 3
10021: PUSH
10022: LD_INT 4
10024: PUSH
10025: LD_INT 5
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: ST_TO_ADDR
10034: GO 10791
10036: LD_INT 12
10038: DOUBLE
10039: EQUAL
10040: IFTRUE 10044
10042: GO 10070
10044: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
10045: LD_ADDR_VAR 0 3
10049: PUSH
10050: LD_INT 2
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: LD_INT 4
10058: PUSH
10059: LD_INT 5
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: ST_TO_ADDR
10068: GO 10791
10070: LD_INT 13
10072: DOUBLE
10073: EQUAL
10074: IFTRUE 10078
10076: GO 10104
10078: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
10079: LD_ADDR_VAR 0 3
10083: PUSH
10084: LD_INT 2
10086: PUSH
10087: LD_INT 3
10089: PUSH
10090: LD_INT 4
10092: PUSH
10093: LD_INT 5
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: ST_TO_ADDR
10102: GO 10791
10104: LD_INT 14
10106: DOUBLE
10107: EQUAL
10108: IFTRUE 10112
10110: GO 10130
10112: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
10113: LD_ADDR_VAR 0 3
10117: PUSH
10118: LD_INT 4
10120: PUSH
10121: LD_INT 5
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: ST_TO_ADDR
10128: GO 10791
10130: LD_INT 6
10132: DOUBLE
10133: EQUAL
10134: IFTRUE 10138
10136: GO 10156
10138: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
10139: LD_ADDR_VAR 0 3
10143: PUSH
10144: LD_INT 4
10146: PUSH
10147: LD_INT 5
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: ST_TO_ADDR
10154: GO 10791
10156: LD_INT 10
10158: DOUBLE
10159: EQUAL
10160: IFTRUE 10164
10162: GO 10182
10164: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
10165: LD_ADDR_VAR 0 3
10169: PUSH
10170: LD_INT 4
10172: PUSH
10173: LD_INT 5
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: ST_TO_ADDR
10180: GO 10791
10182: LD_INT 22
10184: DOUBLE
10185: EQUAL
10186: IFTRUE 10190
10188: GO 10216
10190: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
10191: LD_ADDR_VAR 0 3
10195: PUSH
10196: LD_INT 11
10198: PUSH
10199: LD_INT 12
10201: PUSH
10202: LD_INT 13
10204: PUSH
10205: LD_INT 14
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: ST_TO_ADDR
10214: GO 10791
10216: LD_INT 23
10218: DOUBLE
10219: EQUAL
10220: IFTRUE 10224
10222: GO 10250
10224: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
10225: LD_ADDR_VAR 0 3
10229: PUSH
10230: LD_INT 11
10232: PUSH
10233: LD_INT 12
10235: PUSH
10236: LD_INT 13
10238: PUSH
10239: LD_INT 14
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: ST_TO_ADDR
10248: GO 10791
10250: LD_INT 24
10252: DOUBLE
10253: EQUAL
10254: IFTRUE 10258
10256: GO 10284
10258: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
10259: LD_ADDR_VAR 0 3
10263: PUSH
10264: LD_INT 11
10266: PUSH
10267: LD_INT 12
10269: PUSH
10270: LD_INT 13
10272: PUSH
10273: LD_INT 14
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: ST_TO_ADDR
10282: GO 10791
10284: LD_INT 30
10286: DOUBLE
10287: EQUAL
10288: IFTRUE 10292
10290: GO 10318
10292: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
10293: LD_ADDR_VAR 0 3
10297: PUSH
10298: LD_INT 11
10300: PUSH
10301: LD_INT 12
10303: PUSH
10304: LD_INT 13
10306: PUSH
10307: LD_INT 14
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: ST_TO_ADDR
10316: GO 10791
10318: LD_INT 25
10320: DOUBLE
10321: EQUAL
10322: IFTRUE 10326
10324: GO 10344
10326: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
10327: LD_ADDR_VAR 0 3
10331: PUSH
10332: LD_INT 13
10334: PUSH
10335: LD_INT 14
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: ST_TO_ADDR
10342: GO 10791
10344: LD_INT 27
10346: DOUBLE
10347: EQUAL
10348: IFTRUE 10352
10350: GO 10370
10352: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
10353: LD_ADDR_VAR 0 3
10357: PUSH
10358: LD_INT 13
10360: PUSH
10361: LD_INT 14
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: ST_TO_ADDR
10368: GO 10791
10370: LD_INT 28
10372: DOUBLE
10373: EQUAL
10374: IFTRUE 10378
10376: GO 10396
10378: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
10379: LD_ADDR_VAR 0 3
10383: PUSH
10384: LD_INT 13
10386: PUSH
10387: LD_INT 14
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: ST_TO_ADDR
10394: GO 10791
10396: LD_INT 29
10398: DOUBLE
10399: EQUAL
10400: IFTRUE 10404
10402: GO 10422
10404: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
10405: LD_ADDR_VAR 0 3
10409: PUSH
10410: LD_INT 13
10412: PUSH
10413: LD_INT 14
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: ST_TO_ADDR
10420: GO 10791
10422: LD_INT 31
10424: DOUBLE
10425: EQUAL
10426: IFTRUE 10430
10428: GO 10448
10430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
10431: LD_ADDR_VAR 0 3
10435: PUSH
10436: LD_INT 13
10438: PUSH
10439: LD_INT 14
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: ST_TO_ADDR
10446: GO 10791
10448: LD_INT 26
10450: DOUBLE
10451: EQUAL
10452: IFTRUE 10456
10454: GO 10474
10456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
10457: LD_ADDR_VAR 0 3
10461: PUSH
10462: LD_INT 13
10464: PUSH
10465: LD_INT 14
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: ST_TO_ADDR
10472: GO 10791
10474: LD_INT 42
10476: DOUBLE
10477: EQUAL
10478: IFTRUE 10482
10480: GO 10508
10482: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
10483: LD_ADDR_VAR 0 3
10487: PUSH
10488: LD_INT 21
10490: PUSH
10491: LD_INT 22
10493: PUSH
10494: LD_INT 23
10496: PUSH
10497: LD_INT 24
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: ST_TO_ADDR
10506: GO 10791
10508: LD_INT 43
10510: DOUBLE
10511: EQUAL
10512: IFTRUE 10516
10514: GO 10542
10516: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
10517: LD_ADDR_VAR 0 3
10521: PUSH
10522: LD_INT 21
10524: PUSH
10525: LD_INT 22
10527: PUSH
10528: LD_INT 23
10530: PUSH
10531: LD_INT 24
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: ST_TO_ADDR
10540: GO 10791
10542: LD_INT 44
10544: DOUBLE
10545: EQUAL
10546: IFTRUE 10550
10548: GO 10576
10550: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
10551: LD_ADDR_VAR 0 3
10555: PUSH
10556: LD_INT 21
10558: PUSH
10559: LD_INT 22
10561: PUSH
10562: LD_INT 23
10564: PUSH
10565: LD_INT 24
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: ST_TO_ADDR
10574: GO 10791
10576: LD_INT 45
10578: DOUBLE
10579: EQUAL
10580: IFTRUE 10584
10582: GO 10610
10584: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
10585: LD_ADDR_VAR 0 3
10589: PUSH
10590: LD_INT 21
10592: PUSH
10593: LD_INT 22
10595: PUSH
10596: LD_INT 23
10598: PUSH
10599: LD_INT 24
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: ST_TO_ADDR
10608: GO 10791
10610: LD_INT 49
10612: DOUBLE
10613: EQUAL
10614: IFTRUE 10618
10616: GO 10644
10618: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
10619: LD_ADDR_VAR 0 3
10623: PUSH
10624: LD_INT 21
10626: PUSH
10627: LD_INT 22
10629: PUSH
10630: LD_INT 23
10632: PUSH
10633: LD_INT 24
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: ST_TO_ADDR
10642: GO 10791
10644: LD_INT 51
10646: DOUBLE
10647: EQUAL
10648: IFTRUE 10652
10650: GO 10678
10652: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
10653: LD_ADDR_VAR 0 3
10657: PUSH
10658: LD_INT 21
10660: PUSH
10661: LD_INT 22
10663: PUSH
10664: LD_INT 23
10666: PUSH
10667: LD_INT 24
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: ST_TO_ADDR
10676: GO 10791
10678: LD_INT 52
10680: DOUBLE
10681: EQUAL
10682: IFTRUE 10686
10684: GO 10712
10686: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
10687: LD_ADDR_VAR 0 3
10691: PUSH
10692: LD_INT 21
10694: PUSH
10695: LD_INT 22
10697: PUSH
10698: LD_INT 23
10700: PUSH
10701: LD_INT 24
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: ST_TO_ADDR
10710: GO 10791
10712: LD_INT 53
10714: DOUBLE
10715: EQUAL
10716: IFTRUE 10720
10718: GO 10738
10720: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
10721: LD_ADDR_VAR 0 3
10725: PUSH
10726: LD_INT 23
10728: PUSH
10729: LD_INT 24
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: ST_TO_ADDR
10736: GO 10791
10738: LD_INT 46
10740: DOUBLE
10741: EQUAL
10742: IFTRUE 10746
10744: GO 10764
10746: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
10747: LD_ADDR_VAR 0 3
10751: PUSH
10752: LD_INT 23
10754: PUSH
10755: LD_INT 24
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: ST_TO_ADDR
10762: GO 10791
10764: LD_INT 47
10766: DOUBLE
10767: EQUAL
10768: IFTRUE 10772
10770: GO 10790
10772: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10773: LD_ADDR_VAR 0 3
10777: PUSH
10778: LD_INT 23
10780: PUSH
10781: LD_INT 24
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: ST_TO_ADDR
10788: GO 10791
10790: POP
// result := ( chassis in result ) ;
10791: LD_ADDR_VAR 0 3
10795: PUSH
10796: LD_VAR 0 1
10800: PUSH
10801: LD_VAR 0 3
10805: IN
10806: ST_TO_ADDR
// end ;
10807: LD_VAR 0 3
10811: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
10812: LD_INT 0
10814: PPUSH
10815: PPUSH
10816: PPUSH
10817: PPUSH
10818: PPUSH
10819: PPUSH
10820: PPUSH
// result := array ;
10821: LD_ADDR_VAR 0 5
10825: PUSH
10826: LD_VAR 0 1
10830: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
10831: LD_VAR 0 1
10835: NOT
10836: PUSH
10837: LD_VAR 0 2
10841: NOT
10842: OR
10843: PUSH
10844: LD_VAR 0 3
10848: NOT
10849: OR
10850: PUSH
10851: LD_VAR 0 2
10855: PUSH
10856: LD_VAR 0 1
10860: GREATER
10861: OR
10862: PUSH
10863: LD_VAR 0 3
10867: PUSH
10868: LD_VAR 0 1
10872: GREATER
10873: OR
10874: IFFALSE 10878
// exit ;
10876: GO 11174
// if direction then
10878: LD_VAR 0 4
10882: IFFALSE 10946
// begin d := 1 ;
10884: LD_ADDR_VAR 0 9
10888: PUSH
10889: LD_INT 1
10891: ST_TO_ADDR
// if i_from > i_to then
10892: LD_VAR 0 2
10896: PUSH
10897: LD_VAR 0 3
10901: GREATER
10902: IFFALSE 10928
// length := ( array - i_from ) + i_to else
10904: LD_ADDR_VAR 0 11
10908: PUSH
10909: LD_VAR 0 1
10913: PUSH
10914: LD_VAR 0 2
10918: MINUS
10919: PUSH
10920: LD_VAR 0 3
10924: PLUS
10925: ST_TO_ADDR
10926: GO 10944
// length := i_to - i_from ;
10928: LD_ADDR_VAR 0 11
10932: PUSH
10933: LD_VAR 0 3
10937: PUSH
10938: LD_VAR 0 2
10942: MINUS
10943: ST_TO_ADDR
// end else
10944: GO 11007
// begin d := - 1 ;
10946: LD_ADDR_VAR 0 9
10950: PUSH
10951: LD_INT 1
10953: NEG
10954: ST_TO_ADDR
// if i_from > i_to then
10955: LD_VAR 0 2
10959: PUSH
10960: LD_VAR 0 3
10964: GREATER
10965: IFFALSE 10985
// length := i_from - i_to else
10967: LD_ADDR_VAR 0 11
10971: PUSH
10972: LD_VAR 0 2
10976: PUSH
10977: LD_VAR 0 3
10981: MINUS
10982: ST_TO_ADDR
10983: GO 11007
// length := ( array - i_to ) + i_from ;
10985: LD_ADDR_VAR 0 11
10989: PUSH
10990: LD_VAR 0 1
10994: PUSH
10995: LD_VAR 0 3
10999: MINUS
11000: PUSH
11001: LD_VAR 0 2
11005: PLUS
11006: ST_TO_ADDR
// end ; if not length then
11007: LD_VAR 0 11
11011: NOT
11012: IFFALSE 11016
// exit ;
11014: GO 11174
// tmp := array ;
11016: LD_ADDR_VAR 0 10
11020: PUSH
11021: LD_VAR 0 1
11025: ST_TO_ADDR
// for i = 1 to length do
11026: LD_ADDR_VAR 0 6
11030: PUSH
11031: DOUBLE
11032: LD_INT 1
11034: DEC
11035: ST_TO_ADDR
11036: LD_VAR 0 11
11040: PUSH
11041: FOR_TO
11042: IFFALSE 11162
// begin for j = 1 to array do
11044: LD_ADDR_VAR 0 7
11048: PUSH
11049: DOUBLE
11050: LD_INT 1
11052: DEC
11053: ST_TO_ADDR
11054: LD_VAR 0 1
11058: PUSH
11059: FOR_TO
11060: IFFALSE 11148
// begin k := j + d ;
11062: LD_ADDR_VAR 0 8
11066: PUSH
11067: LD_VAR 0 7
11071: PUSH
11072: LD_VAR 0 9
11076: PLUS
11077: ST_TO_ADDR
// if k > array then
11078: LD_VAR 0 8
11082: PUSH
11083: LD_VAR 0 1
11087: GREATER
11088: IFFALSE 11098
// k := 1 ;
11090: LD_ADDR_VAR 0 8
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// if not k then
11098: LD_VAR 0 8
11102: NOT
11103: IFFALSE 11115
// k := array ;
11105: LD_ADDR_VAR 0 8
11109: PUSH
11110: LD_VAR 0 1
11114: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
11115: LD_ADDR_VAR 0 10
11119: PUSH
11120: LD_VAR 0 10
11124: PPUSH
11125: LD_VAR 0 8
11129: PPUSH
11130: LD_VAR 0 1
11134: PUSH
11135: LD_VAR 0 7
11139: ARRAY
11140: PPUSH
11141: CALL_OW 1
11145: ST_TO_ADDR
// end ;
11146: GO 11059
11148: POP
11149: POP
// array := tmp ;
11150: LD_ADDR_VAR 0 1
11154: PUSH
11155: LD_VAR 0 10
11159: ST_TO_ADDR
// end ;
11160: GO 11041
11162: POP
11163: POP
// result := array ;
11164: LD_ADDR_VAR 0 5
11168: PUSH
11169: LD_VAR 0 1
11173: ST_TO_ADDR
// end ;
11174: LD_VAR 0 5
11178: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
11179: LD_INT 0
11181: PPUSH
11182: PPUSH
// result := 0 ;
11183: LD_ADDR_VAR 0 3
11187: PUSH
11188: LD_INT 0
11190: ST_TO_ADDR
// if not array or not value in array then
11191: LD_VAR 0 1
11195: NOT
11196: PUSH
11197: LD_VAR 0 2
11201: PUSH
11202: LD_VAR 0 1
11206: IN
11207: NOT
11208: OR
11209: IFFALSE 11213
// exit ;
11211: GO 11267
// for i = 1 to array do
11213: LD_ADDR_VAR 0 4
11217: PUSH
11218: DOUBLE
11219: LD_INT 1
11221: DEC
11222: ST_TO_ADDR
11223: LD_VAR 0 1
11227: PUSH
11228: FOR_TO
11229: IFFALSE 11265
// if value = array [ i ] then
11231: LD_VAR 0 2
11235: PUSH
11236: LD_VAR 0 1
11240: PUSH
11241: LD_VAR 0 4
11245: ARRAY
11246: EQUAL
11247: IFFALSE 11263
// begin result := i ;
11249: LD_ADDR_VAR 0 3
11253: PUSH
11254: LD_VAR 0 4
11258: ST_TO_ADDR
// exit ;
11259: POP
11260: POP
11261: GO 11267
// end ;
11263: GO 11228
11265: POP
11266: POP
// end ;
11267: LD_VAR 0 3
11271: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
11272: LD_INT 0
11274: PPUSH
// vc_chassis := chassis ;
11275: LD_ADDR_OWVAR 37
11279: PUSH
11280: LD_VAR 0 1
11284: ST_TO_ADDR
// vc_engine := engine ;
11285: LD_ADDR_OWVAR 39
11289: PUSH
11290: LD_VAR 0 2
11294: ST_TO_ADDR
// vc_control := control ;
11295: LD_ADDR_OWVAR 38
11299: PUSH
11300: LD_VAR 0 3
11304: ST_TO_ADDR
// vc_weapon := weapon ;
11305: LD_ADDR_OWVAR 40
11309: PUSH
11310: LD_VAR 0 4
11314: ST_TO_ADDR
// vc_fuel_battery := fuel ;
11315: LD_ADDR_OWVAR 41
11319: PUSH
11320: LD_VAR 0 5
11324: ST_TO_ADDR
// end ;
11325: LD_VAR 0 6
11329: RET
// export function WantPlant ( unit ) ; var task ; begin
11330: LD_INT 0
11332: PPUSH
11333: PPUSH
// result := false ;
11334: LD_ADDR_VAR 0 2
11338: PUSH
11339: LD_INT 0
11341: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
11342: LD_ADDR_VAR 0 3
11346: PUSH
11347: LD_VAR 0 1
11351: PPUSH
11352: CALL_OW 437
11356: ST_TO_ADDR
// if task then
11357: LD_VAR 0 3
11361: IFFALSE 11389
// if task [ 1 ] [ 1 ] = p then
11363: LD_VAR 0 3
11367: PUSH
11368: LD_INT 1
11370: ARRAY
11371: PUSH
11372: LD_INT 1
11374: ARRAY
11375: PUSH
11376: LD_STRING p
11378: EQUAL
11379: IFFALSE 11389
// result := true ;
11381: LD_ADDR_VAR 0 2
11385: PUSH
11386: LD_INT 1
11388: ST_TO_ADDR
// end ;
11389: LD_VAR 0 2
11393: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
11394: LD_INT 0
11396: PPUSH
11397: PPUSH
11398: PPUSH
11399: PPUSH
// if pos < 1 then
11400: LD_VAR 0 2
11404: PUSH
11405: LD_INT 1
11407: LESS
11408: IFFALSE 11412
// exit ;
11410: GO 11715
// if pos = 1 then
11412: LD_VAR 0 2
11416: PUSH
11417: LD_INT 1
11419: EQUAL
11420: IFFALSE 11453
// result := Replace ( arr , pos [ 1 ] , value ) else
11422: LD_ADDR_VAR 0 4
11426: PUSH
11427: LD_VAR 0 1
11431: PPUSH
11432: LD_VAR 0 2
11436: PUSH
11437: LD_INT 1
11439: ARRAY
11440: PPUSH
11441: LD_VAR 0 3
11445: PPUSH
11446: CALL_OW 1
11450: ST_TO_ADDR
11451: GO 11715
// begin tmp := arr ;
11453: LD_ADDR_VAR 0 6
11457: PUSH
11458: LD_VAR 0 1
11462: ST_TO_ADDR
// s_arr := [ tmp ] ;
11463: LD_ADDR_VAR 0 7
11467: PUSH
11468: LD_VAR 0 6
11472: PUSH
11473: EMPTY
11474: LIST
11475: ST_TO_ADDR
// for i = 1 to pos - 1 do
11476: LD_ADDR_VAR 0 5
11480: PUSH
11481: DOUBLE
11482: LD_INT 1
11484: DEC
11485: ST_TO_ADDR
11486: LD_VAR 0 2
11490: PUSH
11491: LD_INT 1
11493: MINUS
11494: PUSH
11495: FOR_TO
11496: IFFALSE 11541
// begin tmp := tmp [ pos [ i ] ] ;
11498: LD_ADDR_VAR 0 6
11502: PUSH
11503: LD_VAR 0 6
11507: PUSH
11508: LD_VAR 0 2
11512: PUSH
11513: LD_VAR 0 5
11517: ARRAY
11518: ARRAY
11519: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
11520: LD_ADDR_VAR 0 7
11524: PUSH
11525: LD_VAR 0 7
11529: PUSH
11530: LD_VAR 0 6
11534: PUSH
11535: EMPTY
11536: LIST
11537: ADD
11538: ST_TO_ADDR
// end ;
11539: GO 11495
11541: POP
11542: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
11543: LD_ADDR_VAR 0 6
11547: PUSH
11548: LD_VAR 0 6
11552: PPUSH
11553: LD_VAR 0 2
11557: PUSH
11558: LD_VAR 0 2
11562: ARRAY
11563: PPUSH
11564: LD_VAR 0 3
11568: PPUSH
11569: CALL_OW 1
11573: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
11574: LD_ADDR_VAR 0 7
11578: PUSH
11579: LD_VAR 0 7
11583: PPUSH
11584: LD_VAR 0 7
11588: PPUSH
11589: LD_VAR 0 6
11593: PPUSH
11594: CALL_OW 1
11598: ST_TO_ADDR
// for i = s_arr downto 2 do
11599: LD_ADDR_VAR 0 5
11603: PUSH
11604: DOUBLE
11605: LD_VAR 0 7
11609: INC
11610: ST_TO_ADDR
11611: LD_INT 2
11613: PUSH
11614: FOR_DOWNTO
11615: IFFALSE 11699
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
11617: LD_ADDR_VAR 0 6
11621: PUSH
11622: LD_VAR 0 7
11626: PUSH
11627: LD_VAR 0 5
11631: PUSH
11632: LD_INT 1
11634: MINUS
11635: ARRAY
11636: PPUSH
11637: LD_VAR 0 2
11641: PUSH
11642: LD_VAR 0 5
11646: PUSH
11647: LD_INT 1
11649: MINUS
11650: ARRAY
11651: PPUSH
11652: LD_VAR 0 7
11656: PUSH
11657: LD_VAR 0 5
11661: ARRAY
11662: PPUSH
11663: CALL_OW 1
11667: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
11668: LD_ADDR_VAR 0 7
11672: PUSH
11673: LD_VAR 0 7
11677: PPUSH
11678: LD_VAR 0 5
11682: PUSH
11683: LD_INT 1
11685: MINUS
11686: PPUSH
11687: LD_VAR 0 6
11691: PPUSH
11692: CALL_OW 1
11696: ST_TO_ADDR
// end ;
11697: GO 11614
11699: POP
11700: POP
// result := s_arr [ 1 ] ;
11701: LD_ADDR_VAR 0 4
11705: PUSH
11706: LD_VAR 0 7
11710: PUSH
11711: LD_INT 1
11713: ARRAY
11714: ST_TO_ADDR
// end ; end ;
11715: LD_VAR 0 4
11719: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
11720: LD_INT 0
11722: PPUSH
11723: PPUSH
// if not list then
11724: LD_VAR 0 1
11728: NOT
11729: IFFALSE 11733
// exit ;
11731: GO 11824
// i := list [ pos1 ] ;
11733: LD_ADDR_VAR 0 5
11737: PUSH
11738: LD_VAR 0 1
11742: PUSH
11743: LD_VAR 0 2
11747: ARRAY
11748: ST_TO_ADDR
// if not i then
11749: LD_VAR 0 5
11753: NOT
11754: IFFALSE 11758
// exit ;
11756: GO 11824
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
11758: LD_ADDR_VAR 0 1
11762: PUSH
11763: LD_VAR 0 1
11767: PPUSH
11768: LD_VAR 0 2
11772: PPUSH
11773: LD_VAR 0 1
11777: PUSH
11778: LD_VAR 0 3
11782: ARRAY
11783: PPUSH
11784: CALL_OW 1
11788: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
11789: LD_ADDR_VAR 0 1
11793: PUSH
11794: LD_VAR 0 1
11798: PPUSH
11799: LD_VAR 0 3
11803: PPUSH
11804: LD_VAR 0 5
11808: PPUSH
11809: CALL_OW 1
11813: ST_TO_ADDR
// result := list ;
11814: LD_ADDR_VAR 0 4
11818: PUSH
11819: LD_VAR 0 1
11823: ST_TO_ADDR
// end ;
11824: LD_VAR 0 4
11828: RET
// export function Add ( list , pos , val ) ; begin
11829: LD_INT 0
11831: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
11832: LD_ADDR_VAR 0 4
11836: PUSH
11837: LD_VAR 0 1
11841: PPUSH
11842: LD_VAR 0 2
11846: PPUSH
11847: LD_VAR 0 3
11851: PPUSH
11852: CALL 11394 0 3
11856: ST_TO_ADDR
11857: LD_VAR 0 4
11861: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
11862: LD_INT 0
11864: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
11865: LD_ADDR_VAR 0 5
11869: PUSH
11870: LD_VAR 0 1
11874: PPUSH
11875: CALL_OW 250
11879: PPUSH
11880: LD_VAR 0 1
11884: PPUSH
11885: CALL_OW 251
11889: PPUSH
11890: LD_VAR 0 2
11894: PPUSH
11895: LD_VAR 0 3
11899: PPUSH
11900: LD_VAR 0 4
11904: PPUSH
11905: CALL 11915 0 5
11909: ST_TO_ADDR
// end ;
11910: LD_VAR 0 5
11914: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
11915: LD_INT 0
11917: PPUSH
11918: PPUSH
11919: PPUSH
11920: PPUSH
// if not list then
11921: LD_VAR 0 3
11925: NOT
11926: IFFALSE 11930
// exit ;
11928: GO 12318
// result := [ ] ;
11930: LD_ADDR_VAR 0 6
11934: PUSH
11935: EMPTY
11936: ST_TO_ADDR
// for i in list do
11937: LD_ADDR_VAR 0 7
11941: PUSH
11942: LD_VAR 0 3
11946: PUSH
11947: FOR_IN
11948: IFFALSE 12150
// begin tmp := GetDistUnitXY ( i , x , y ) ;
11950: LD_ADDR_VAR 0 9
11954: PUSH
11955: LD_VAR 0 7
11959: PPUSH
11960: LD_VAR 0 1
11964: PPUSH
11965: LD_VAR 0 2
11969: PPUSH
11970: CALL_OW 297
11974: ST_TO_ADDR
// if not result then
11975: LD_VAR 0 6
11979: NOT
11980: IFFALSE 12006
// result := [ [ i , tmp ] ] else
11982: LD_ADDR_VAR 0 6
11986: PUSH
11987: LD_VAR 0 7
11991: PUSH
11992: LD_VAR 0 9
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PUSH
12001: EMPTY
12002: LIST
12003: ST_TO_ADDR
12004: GO 12148
// begin if result [ result ] [ 2 ] < tmp then
12006: LD_VAR 0 6
12010: PUSH
12011: LD_VAR 0 6
12015: ARRAY
12016: PUSH
12017: LD_INT 2
12019: ARRAY
12020: PUSH
12021: LD_VAR 0 9
12025: LESS
12026: IFFALSE 12068
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
12028: LD_ADDR_VAR 0 6
12032: PUSH
12033: LD_VAR 0 6
12037: PPUSH
12038: LD_VAR 0 6
12042: PUSH
12043: LD_INT 1
12045: PLUS
12046: PPUSH
12047: LD_VAR 0 7
12051: PUSH
12052: LD_VAR 0 9
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PPUSH
12061: CALL_OW 2
12065: ST_TO_ADDR
12066: GO 12148
// for j = 1 to result do
12068: LD_ADDR_VAR 0 8
12072: PUSH
12073: DOUBLE
12074: LD_INT 1
12076: DEC
12077: ST_TO_ADDR
12078: LD_VAR 0 6
12082: PUSH
12083: FOR_TO
12084: IFFALSE 12146
// begin if tmp < result [ j ] [ 2 ] then
12086: LD_VAR 0 9
12090: PUSH
12091: LD_VAR 0 6
12095: PUSH
12096: LD_VAR 0 8
12100: ARRAY
12101: PUSH
12102: LD_INT 2
12104: ARRAY
12105: LESS
12106: IFFALSE 12144
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12108: LD_ADDR_VAR 0 6
12112: PUSH
12113: LD_VAR 0 6
12117: PPUSH
12118: LD_VAR 0 8
12122: PPUSH
12123: LD_VAR 0 7
12127: PUSH
12128: LD_VAR 0 9
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PPUSH
12137: CALL_OW 2
12141: ST_TO_ADDR
// break ;
12142: GO 12146
// end ; end ;
12144: GO 12083
12146: POP
12147: POP
// end ; end ;
12148: GO 11947
12150: POP
12151: POP
// if result and not asc then
12152: LD_VAR 0 6
12156: PUSH
12157: LD_VAR 0 4
12161: NOT
12162: AND
12163: IFFALSE 12238
// begin tmp := result ;
12165: LD_ADDR_VAR 0 9
12169: PUSH
12170: LD_VAR 0 6
12174: ST_TO_ADDR
// for i = tmp downto 1 do
12175: LD_ADDR_VAR 0 7
12179: PUSH
12180: DOUBLE
12181: LD_VAR 0 9
12185: INC
12186: ST_TO_ADDR
12187: LD_INT 1
12189: PUSH
12190: FOR_DOWNTO
12191: IFFALSE 12236
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
12193: LD_ADDR_VAR 0 6
12197: PUSH
12198: LD_VAR 0 6
12202: PPUSH
12203: LD_VAR 0 9
12207: PUSH
12208: LD_VAR 0 7
12212: MINUS
12213: PUSH
12214: LD_INT 1
12216: PLUS
12217: PPUSH
12218: LD_VAR 0 9
12222: PUSH
12223: LD_VAR 0 7
12227: ARRAY
12228: PPUSH
12229: CALL_OW 1
12233: ST_TO_ADDR
12234: GO 12190
12236: POP
12237: POP
// end ; tmp := [ ] ;
12238: LD_ADDR_VAR 0 9
12242: PUSH
12243: EMPTY
12244: ST_TO_ADDR
// if mode then
12245: LD_VAR 0 5
12249: IFFALSE 12318
// begin for i = 1 to result do
12251: LD_ADDR_VAR 0 7
12255: PUSH
12256: DOUBLE
12257: LD_INT 1
12259: DEC
12260: ST_TO_ADDR
12261: LD_VAR 0 6
12265: PUSH
12266: FOR_TO
12267: IFFALSE 12306
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
12269: LD_ADDR_VAR 0 9
12273: PUSH
12274: LD_VAR 0 9
12278: PPUSH
12279: LD_VAR 0 7
12283: PPUSH
12284: LD_VAR 0 6
12288: PUSH
12289: LD_VAR 0 7
12293: ARRAY
12294: PUSH
12295: LD_INT 1
12297: ARRAY
12298: PPUSH
12299: CALL_OW 1
12303: ST_TO_ADDR
12304: GO 12266
12306: POP
12307: POP
// result := tmp ;
12308: LD_ADDR_VAR 0 6
12312: PUSH
12313: LD_VAR 0 9
12317: ST_TO_ADDR
// end ; end ;
12318: LD_VAR 0 6
12322: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
12323: LD_INT 0
12325: PPUSH
12326: PPUSH
12327: PPUSH
12328: PPUSH
12329: PPUSH
12330: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
12331: LD_ADDR_VAR 0 5
12335: PUSH
12336: LD_INT 0
12338: PUSH
12339: LD_INT 0
12341: PUSH
12342: LD_INT 0
12344: PUSH
12345: EMPTY
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: ST_TO_ADDR
// if not x or not y then
12353: LD_VAR 0 2
12357: NOT
12358: PUSH
12359: LD_VAR 0 3
12363: NOT
12364: OR
12365: IFFALSE 12369
// exit ;
12367: GO 14015
// if not range then
12369: LD_VAR 0 4
12373: NOT
12374: IFFALSE 12384
// range := 10 ;
12376: LD_ADDR_VAR 0 4
12380: PUSH
12381: LD_INT 10
12383: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12384: LD_ADDR_VAR 0 8
12388: PUSH
12389: LD_INT 81
12391: PUSH
12392: LD_VAR 0 1
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 92
12403: PUSH
12404: LD_VAR 0 2
12408: PUSH
12409: LD_VAR 0 3
12413: PUSH
12414: LD_VAR 0 4
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 3
12427: PUSH
12428: LD_INT 21
12430: PUSH
12431: LD_INT 3
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: LIST
12446: PPUSH
12447: CALL_OW 69
12451: ST_TO_ADDR
// if not tmp then
12452: LD_VAR 0 8
12456: NOT
12457: IFFALSE 12461
// exit ;
12459: GO 14015
// for i in tmp do
12461: LD_ADDR_VAR 0 6
12465: PUSH
12466: LD_VAR 0 8
12470: PUSH
12471: FOR_IN
12472: IFFALSE 13990
// begin points := [ 0 , 0 , 0 ] ;
12474: LD_ADDR_VAR 0 9
12478: PUSH
12479: LD_INT 0
12481: PUSH
12482: LD_INT 0
12484: PUSH
12485: LD_INT 0
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: LIST
12492: ST_TO_ADDR
// bpoints := 1 ;
12493: LD_ADDR_VAR 0 10
12497: PUSH
12498: LD_INT 1
12500: ST_TO_ADDR
// case GetType ( i ) of unit_human :
12501: LD_VAR 0 6
12505: PPUSH
12506: CALL_OW 247
12510: PUSH
12511: LD_INT 1
12513: DOUBLE
12514: EQUAL
12515: IFTRUE 12519
12517: GO 13097
12519: POP
// begin if GetClass ( i ) = 1 then
12520: LD_VAR 0 6
12524: PPUSH
12525: CALL_OW 257
12529: PUSH
12530: LD_INT 1
12532: EQUAL
12533: IFFALSE 12554
// points := [ 10 , 5 , 3 ] ;
12535: LD_ADDR_VAR 0 9
12539: PUSH
12540: LD_INT 10
12542: PUSH
12543: LD_INT 5
12545: PUSH
12546: LD_INT 3
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: LIST
12553: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
12554: LD_VAR 0 6
12558: PPUSH
12559: CALL_OW 257
12563: PUSH
12564: LD_INT 2
12566: PUSH
12567: LD_INT 3
12569: PUSH
12570: LD_INT 4
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: LIST
12577: IN
12578: IFFALSE 12599
// points := [ 3 , 2 , 1 ] ;
12580: LD_ADDR_VAR 0 9
12584: PUSH
12585: LD_INT 3
12587: PUSH
12588: LD_INT 2
12590: PUSH
12591: LD_INT 1
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: LIST
12598: ST_TO_ADDR
// if GetClass ( i ) = 5 then
12599: LD_VAR 0 6
12603: PPUSH
12604: CALL_OW 257
12608: PUSH
12609: LD_INT 5
12611: EQUAL
12612: IFFALSE 12633
// points := [ 130 , 5 , 2 ] ;
12614: LD_ADDR_VAR 0 9
12618: PUSH
12619: LD_INT 130
12621: PUSH
12622: LD_INT 5
12624: PUSH
12625: LD_INT 2
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: LIST
12632: ST_TO_ADDR
// if GetClass ( i ) = 8 then
12633: LD_VAR 0 6
12637: PPUSH
12638: CALL_OW 257
12642: PUSH
12643: LD_INT 8
12645: EQUAL
12646: IFFALSE 12667
// points := [ 35 , 35 , 30 ] ;
12648: LD_ADDR_VAR 0 9
12652: PUSH
12653: LD_INT 35
12655: PUSH
12656: LD_INT 35
12658: PUSH
12659: LD_INT 30
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: ST_TO_ADDR
// if GetClass ( i ) = 9 then
12667: LD_VAR 0 6
12671: PPUSH
12672: CALL_OW 257
12676: PUSH
12677: LD_INT 9
12679: EQUAL
12680: IFFALSE 12701
// points := [ 20 , 55 , 40 ] ;
12682: LD_ADDR_VAR 0 9
12686: PUSH
12687: LD_INT 20
12689: PUSH
12690: LD_INT 55
12692: PUSH
12693: LD_INT 40
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: LIST
12700: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
12701: LD_VAR 0 6
12705: PPUSH
12706: CALL_OW 257
12710: PUSH
12711: LD_INT 12
12713: PUSH
12714: LD_INT 16
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: IN
12721: IFFALSE 12742
// points := [ 5 , 3 , 2 ] ;
12723: LD_ADDR_VAR 0 9
12727: PUSH
12728: LD_INT 5
12730: PUSH
12731: LD_INT 3
12733: PUSH
12734: LD_INT 2
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: LIST
12741: ST_TO_ADDR
// if GetClass ( i ) = 17 then
12742: LD_VAR 0 6
12746: PPUSH
12747: CALL_OW 257
12751: PUSH
12752: LD_INT 17
12754: EQUAL
12755: IFFALSE 12776
// points := [ 100 , 50 , 75 ] ;
12757: LD_ADDR_VAR 0 9
12761: PUSH
12762: LD_INT 100
12764: PUSH
12765: LD_INT 50
12767: PUSH
12768: LD_INT 75
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: LIST
12775: ST_TO_ADDR
// if GetClass ( i ) = 15 then
12776: LD_VAR 0 6
12780: PPUSH
12781: CALL_OW 257
12785: PUSH
12786: LD_INT 15
12788: EQUAL
12789: IFFALSE 12810
// points := [ 10 , 5 , 3 ] ;
12791: LD_ADDR_VAR 0 9
12795: PUSH
12796: LD_INT 10
12798: PUSH
12799: LD_INT 5
12801: PUSH
12802: LD_INT 3
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: LIST
12809: ST_TO_ADDR
// if GetClass ( i ) = 14 then
12810: LD_VAR 0 6
12814: PPUSH
12815: CALL_OW 257
12819: PUSH
12820: LD_INT 14
12822: EQUAL
12823: IFFALSE 12844
// points := [ 10 , 0 , 0 ] ;
12825: LD_ADDR_VAR 0 9
12829: PUSH
12830: LD_INT 10
12832: PUSH
12833: LD_INT 0
12835: PUSH
12836: LD_INT 0
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: ST_TO_ADDR
// if GetClass ( i ) = 11 then
12844: LD_VAR 0 6
12848: PPUSH
12849: CALL_OW 257
12853: PUSH
12854: LD_INT 11
12856: EQUAL
12857: IFFALSE 12878
// points := [ 30 , 10 , 5 ] ;
12859: LD_ADDR_VAR 0 9
12863: PUSH
12864: LD_INT 30
12866: PUSH
12867: LD_INT 10
12869: PUSH
12870: LD_INT 5
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: LIST
12877: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
12878: LD_VAR 0 1
12882: PPUSH
12883: LD_INT 5
12885: PPUSH
12886: CALL_OW 321
12890: PUSH
12891: LD_INT 2
12893: EQUAL
12894: IFFALSE 12911
// bpoints := bpoints * 1.8 ;
12896: LD_ADDR_VAR 0 10
12900: PUSH
12901: LD_VAR 0 10
12905: PUSH
12906: LD_REAL  1.80000000000000E+0000
12909: MUL
12910: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
12911: LD_VAR 0 6
12915: PPUSH
12916: CALL_OW 257
12920: PUSH
12921: LD_INT 1
12923: PUSH
12924: LD_INT 2
12926: PUSH
12927: LD_INT 3
12929: PUSH
12930: LD_INT 4
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: IN
12939: PUSH
12940: LD_VAR 0 1
12944: PPUSH
12945: LD_INT 51
12947: PPUSH
12948: CALL_OW 321
12952: PUSH
12953: LD_INT 2
12955: EQUAL
12956: AND
12957: IFFALSE 12974
// bpoints := bpoints * 1.2 ;
12959: LD_ADDR_VAR 0 10
12963: PUSH
12964: LD_VAR 0 10
12968: PUSH
12969: LD_REAL  1.20000000000000E+0000
12972: MUL
12973: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
12974: LD_VAR 0 6
12978: PPUSH
12979: CALL_OW 257
12983: PUSH
12984: LD_INT 5
12986: PUSH
12987: LD_INT 7
12989: PUSH
12990: LD_INT 9
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: LIST
12997: IN
12998: PUSH
12999: LD_VAR 0 1
13003: PPUSH
13004: LD_INT 52
13006: PPUSH
13007: CALL_OW 321
13011: PUSH
13012: LD_INT 2
13014: EQUAL
13015: AND
13016: IFFALSE 13033
// bpoints := bpoints * 1.5 ;
13018: LD_ADDR_VAR 0 10
13022: PUSH
13023: LD_VAR 0 10
13027: PUSH
13028: LD_REAL  1.50000000000000E+0000
13031: MUL
13032: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
13033: LD_VAR 0 1
13037: PPUSH
13038: LD_INT 66
13040: PPUSH
13041: CALL_OW 321
13045: PUSH
13046: LD_INT 2
13048: EQUAL
13049: IFFALSE 13066
// bpoints := bpoints * 1.1 ;
13051: LD_ADDR_VAR 0 10
13055: PUSH
13056: LD_VAR 0 10
13060: PUSH
13061: LD_REAL  1.10000000000000E+0000
13064: MUL
13065: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
13066: LD_ADDR_VAR 0 10
13070: PUSH
13071: LD_VAR 0 10
13075: PUSH
13076: LD_VAR 0 6
13080: PPUSH
13081: LD_INT 1
13083: PPUSH
13084: CALL_OW 259
13088: PUSH
13089: LD_REAL  1.15000000000000E+0000
13092: MUL
13093: MUL
13094: ST_TO_ADDR
// end ; unit_vehicle :
13095: GO 13919
13097: LD_INT 2
13099: DOUBLE
13100: EQUAL
13101: IFTRUE 13105
13103: GO 13907
13105: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
13106: LD_VAR 0 6
13110: PPUSH
13111: CALL_OW 264
13115: PUSH
13116: LD_INT 2
13118: PUSH
13119: LD_INT 42
13121: PUSH
13122: LD_INT 24
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: IN
13130: IFFALSE 13151
// points := [ 25 , 5 , 3 ] ;
13132: LD_ADDR_VAR 0 9
13136: PUSH
13137: LD_INT 25
13139: PUSH
13140: LD_INT 5
13142: PUSH
13143: LD_INT 3
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: LIST
13150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
13151: LD_VAR 0 6
13155: PPUSH
13156: CALL_OW 264
13160: PUSH
13161: LD_INT 4
13163: PUSH
13164: LD_INT 43
13166: PUSH
13167: LD_INT 25
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: LIST
13174: IN
13175: IFFALSE 13196
// points := [ 40 , 15 , 5 ] ;
13177: LD_ADDR_VAR 0 9
13181: PUSH
13182: LD_INT 40
13184: PUSH
13185: LD_INT 15
13187: PUSH
13188: LD_INT 5
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
13196: LD_VAR 0 6
13200: PPUSH
13201: CALL_OW 264
13205: PUSH
13206: LD_INT 3
13208: PUSH
13209: LD_INT 23
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: IN
13216: IFFALSE 13237
// points := [ 7 , 25 , 8 ] ;
13218: LD_ADDR_VAR 0 9
13222: PUSH
13223: LD_INT 7
13225: PUSH
13226: LD_INT 25
13228: PUSH
13229: LD_INT 8
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: LIST
13236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
13237: LD_VAR 0 6
13241: PPUSH
13242: CALL_OW 264
13246: PUSH
13247: LD_INT 5
13249: PUSH
13250: LD_INT 27
13252: PUSH
13253: LD_INT 44
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: LIST
13260: IN
13261: IFFALSE 13282
// points := [ 14 , 50 , 16 ] ;
13263: LD_ADDR_VAR 0 9
13267: PUSH
13268: LD_INT 14
13270: PUSH
13271: LD_INT 50
13273: PUSH
13274: LD_INT 16
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: LIST
13281: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
13282: LD_VAR 0 6
13286: PPUSH
13287: CALL_OW 264
13291: PUSH
13292: LD_INT 6
13294: PUSH
13295: LD_INT 46
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: IN
13302: IFFALSE 13323
// points := [ 32 , 120 , 70 ] ;
13304: LD_ADDR_VAR 0 9
13308: PUSH
13309: LD_INT 32
13311: PUSH
13312: LD_INT 120
13314: PUSH
13315: LD_INT 70
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: LIST
13322: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
13323: LD_VAR 0 6
13327: PPUSH
13328: CALL_OW 264
13332: PUSH
13333: LD_INT 7
13335: PUSH
13336: LD_INT 28
13338: PUSH
13339: LD_INT 45
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: LIST
13346: IN
13347: IFFALSE 13368
// points := [ 35 , 20 , 45 ] ;
13349: LD_ADDR_VAR 0 9
13353: PUSH
13354: LD_INT 35
13356: PUSH
13357: LD_INT 20
13359: PUSH
13360: LD_INT 45
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
13368: LD_VAR 0 6
13372: PPUSH
13373: CALL_OW 264
13377: PUSH
13378: LD_INT 47
13380: PUSH
13381: EMPTY
13382: LIST
13383: IN
13384: IFFALSE 13405
// points := [ 67 , 45 , 75 ] ;
13386: LD_ADDR_VAR 0 9
13390: PUSH
13391: LD_INT 67
13393: PUSH
13394: LD_INT 45
13396: PUSH
13397: LD_INT 75
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: LIST
13404: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
13405: LD_VAR 0 6
13409: PPUSH
13410: CALL_OW 264
13414: PUSH
13415: LD_INT 26
13417: PUSH
13418: EMPTY
13419: LIST
13420: IN
13421: IFFALSE 13442
// points := [ 120 , 30 , 80 ] ;
13423: LD_ADDR_VAR 0 9
13427: PUSH
13428: LD_INT 120
13430: PUSH
13431: LD_INT 30
13433: PUSH
13434: LD_INT 80
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: LIST
13441: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
13442: LD_VAR 0 6
13446: PPUSH
13447: CALL_OW 264
13451: PUSH
13452: LD_INT 22
13454: PUSH
13455: EMPTY
13456: LIST
13457: IN
13458: IFFALSE 13479
// points := [ 40 , 1 , 1 ] ;
13460: LD_ADDR_VAR 0 9
13464: PUSH
13465: LD_INT 40
13467: PUSH
13468: LD_INT 1
13470: PUSH
13471: LD_INT 1
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
13479: LD_VAR 0 6
13483: PPUSH
13484: CALL_OW 264
13488: PUSH
13489: LD_INT 29
13491: PUSH
13492: EMPTY
13493: LIST
13494: IN
13495: IFFALSE 13516
// points := [ 70 , 200 , 400 ] ;
13497: LD_ADDR_VAR 0 9
13501: PUSH
13502: LD_INT 70
13504: PUSH
13505: LD_INT 200
13507: PUSH
13508: LD_INT 400
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: LIST
13515: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
13516: LD_VAR 0 6
13520: PPUSH
13521: CALL_OW 264
13525: PUSH
13526: LD_INT 14
13528: PUSH
13529: LD_INT 53
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: IN
13536: IFFALSE 13557
// points := [ 40 , 10 , 20 ] ;
13538: LD_ADDR_VAR 0 9
13542: PUSH
13543: LD_INT 40
13545: PUSH
13546: LD_INT 10
13548: PUSH
13549: LD_INT 20
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: LIST
13556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
13557: LD_VAR 0 6
13561: PPUSH
13562: CALL_OW 264
13566: PUSH
13567: LD_INT 9
13569: PUSH
13570: EMPTY
13571: LIST
13572: IN
13573: IFFALSE 13594
// points := [ 5 , 70 , 20 ] ;
13575: LD_ADDR_VAR 0 9
13579: PUSH
13580: LD_INT 5
13582: PUSH
13583: LD_INT 70
13585: PUSH
13586: LD_INT 20
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: LIST
13593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
13594: LD_VAR 0 6
13598: PPUSH
13599: CALL_OW 264
13603: PUSH
13604: LD_INT 10
13606: PUSH
13607: EMPTY
13608: LIST
13609: IN
13610: IFFALSE 13631
// points := [ 35 , 110 , 70 ] ;
13612: LD_ADDR_VAR 0 9
13616: PUSH
13617: LD_INT 35
13619: PUSH
13620: LD_INT 110
13622: PUSH
13623: LD_INT 70
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: LIST
13630: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
13631: LD_VAR 0 6
13635: PPUSH
13636: CALL_OW 265
13640: PUSH
13641: LD_INT 25
13643: EQUAL
13644: IFFALSE 13665
// points := [ 80 , 65 , 100 ] ;
13646: LD_ADDR_VAR 0 9
13650: PUSH
13651: LD_INT 80
13653: PUSH
13654: LD_INT 65
13656: PUSH
13657: LD_INT 100
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: LIST
13664: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
13665: LD_VAR 0 6
13669: PPUSH
13670: CALL_OW 263
13674: PUSH
13675: LD_INT 1
13677: EQUAL
13678: IFFALSE 13713
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
13680: LD_ADDR_VAR 0 10
13684: PUSH
13685: LD_VAR 0 10
13689: PUSH
13690: LD_VAR 0 6
13694: PPUSH
13695: CALL_OW 311
13699: PPUSH
13700: LD_INT 3
13702: PPUSH
13703: CALL_OW 259
13707: PUSH
13708: LD_INT 4
13710: MUL
13711: MUL
13712: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
13713: LD_VAR 0 6
13717: PPUSH
13718: CALL_OW 263
13722: PUSH
13723: LD_INT 2
13725: EQUAL
13726: IFFALSE 13777
// begin j := IsControledBy ( i ) ;
13728: LD_ADDR_VAR 0 7
13732: PUSH
13733: LD_VAR 0 6
13737: PPUSH
13738: CALL_OW 312
13742: ST_TO_ADDR
// if j then
13743: LD_VAR 0 7
13747: IFFALSE 13777
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
13749: LD_ADDR_VAR 0 10
13753: PUSH
13754: LD_VAR 0 10
13758: PUSH
13759: LD_VAR 0 7
13763: PPUSH
13764: LD_INT 3
13766: PPUSH
13767: CALL_OW 259
13771: PUSH
13772: LD_INT 3
13774: MUL
13775: MUL
13776: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
13777: LD_VAR 0 6
13781: PPUSH
13782: CALL_OW 264
13786: PUSH
13787: LD_INT 5
13789: PUSH
13790: LD_INT 6
13792: PUSH
13793: LD_INT 46
13795: PUSH
13796: LD_INT 44
13798: PUSH
13799: LD_INT 47
13801: PUSH
13802: LD_INT 45
13804: PUSH
13805: LD_INT 28
13807: PUSH
13808: LD_INT 7
13810: PUSH
13811: LD_INT 27
13813: PUSH
13814: LD_INT 29
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: IN
13829: PUSH
13830: LD_VAR 0 1
13834: PPUSH
13835: LD_INT 52
13837: PPUSH
13838: CALL_OW 321
13842: PUSH
13843: LD_INT 2
13845: EQUAL
13846: AND
13847: IFFALSE 13864
// bpoints := bpoints * 1.2 ;
13849: LD_ADDR_VAR 0 10
13853: PUSH
13854: LD_VAR 0 10
13858: PUSH
13859: LD_REAL  1.20000000000000E+0000
13862: MUL
13863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
13864: LD_VAR 0 6
13868: PPUSH
13869: CALL_OW 264
13873: PUSH
13874: LD_INT 6
13876: PUSH
13877: LD_INT 46
13879: PUSH
13880: LD_INT 47
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: LIST
13887: IN
13888: IFFALSE 13905
// bpoints := bpoints * 1.2 ;
13890: LD_ADDR_VAR 0 10
13894: PUSH
13895: LD_VAR 0 10
13899: PUSH
13900: LD_REAL  1.20000000000000E+0000
13903: MUL
13904: ST_TO_ADDR
// end ; unit_building :
13905: GO 13919
13907: LD_INT 3
13909: DOUBLE
13910: EQUAL
13911: IFTRUE 13915
13913: GO 13918
13915: POP
// ; end ;
13916: GO 13919
13918: POP
// for j = 1 to 3 do
13919: LD_ADDR_VAR 0 7
13923: PUSH
13924: DOUBLE
13925: LD_INT 1
13927: DEC
13928: ST_TO_ADDR
13929: LD_INT 3
13931: PUSH
13932: FOR_TO
13933: IFFALSE 13986
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
13935: LD_ADDR_VAR 0 5
13939: PUSH
13940: LD_VAR 0 5
13944: PPUSH
13945: LD_VAR 0 7
13949: PPUSH
13950: LD_VAR 0 5
13954: PUSH
13955: LD_VAR 0 7
13959: ARRAY
13960: PUSH
13961: LD_VAR 0 9
13965: PUSH
13966: LD_VAR 0 7
13970: ARRAY
13971: PUSH
13972: LD_VAR 0 10
13976: MUL
13977: PLUS
13978: PPUSH
13979: CALL_OW 1
13983: ST_TO_ADDR
13984: GO 13932
13986: POP
13987: POP
// end ;
13988: GO 12471
13990: POP
13991: POP
// result := Replace ( result , 4 , tmp ) ;
13992: LD_ADDR_VAR 0 5
13996: PUSH
13997: LD_VAR 0 5
14001: PPUSH
14002: LD_INT 4
14004: PPUSH
14005: LD_VAR 0 8
14009: PPUSH
14010: CALL_OW 1
14014: ST_TO_ADDR
// end ;
14015: LD_VAR 0 5
14019: RET
// export function DangerAtRange ( unit , range ) ; begin
14020: LD_INT 0
14022: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
14023: LD_ADDR_VAR 0 3
14027: PUSH
14028: LD_VAR 0 1
14032: PPUSH
14033: CALL_OW 255
14037: PPUSH
14038: LD_VAR 0 1
14042: PPUSH
14043: CALL_OW 250
14047: PPUSH
14048: LD_VAR 0 1
14052: PPUSH
14053: CALL_OW 251
14057: PPUSH
14058: LD_VAR 0 2
14062: PPUSH
14063: CALL 12323 0 4
14067: ST_TO_ADDR
// end ;
14068: LD_VAR 0 3
14072: RET
// export function IsExtension ( b ) ; begin
14073: LD_INT 0
14075: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
14076: LD_ADDR_VAR 0 2
14080: PUSH
14081: LD_VAR 0 1
14085: PPUSH
14086: CALL_OW 266
14090: PUSH
14091: LD_INT 23
14093: PUSH
14094: LD_INT 20
14096: PUSH
14097: LD_INT 22
14099: PUSH
14100: LD_INT 17
14102: PUSH
14103: LD_INT 24
14105: PUSH
14106: LD_INT 21
14108: PUSH
14109: LD_INT 19
14111: PUSH
14112: LD_INT 16
14114: PUSH
14115: LD_INT 25
14117: PUSH
14118: LD_INT 18
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: IN
14133: ST_TO_ADDR
// end ;
14134: LD_VAR 0 2
14138: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
14139: LD_INT 0
14141: PPUSH
14142: PPUSH
14143: PPUSH
// result := [ ] ;
14144: LD_ADDR_VAR 0 2
14148: PUSH
14149: EMPTY
14150: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
14151: LD_ADDR_VAR 0 3
14155: PUSH
14156: LD_INT 21
14158: PUSH
14159: LD_INT 3
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PPUSH
14166: CALL_OW 69
14170: ST_TO_ADDR
// if not tmp then
14171: LD_VAR 0 3
14175: NOT
14176: IFFALSE 14180
// exit ;
14178: GO 14230
// for i in tmp do
14180: LD_ADDR_VAR 0 4
14184: PUSH
14185: LD_VAR 0 3
14189: PUSH
14190: FOR_IN
14191: IFFALSE 14228
// if GetBase ( i ) = base then
14193: LD_VAR 0 4
14197: PPUSH
14198: CALL_OW 274
14202: PUSH
14203: LD_VAR 0 1
14207: EQUAL
14208: IFFALSE 14226
// result := result ^ i ;
14210: LD_ADDR_VAR 0 2
14214: PUSH
14215: LD_VAR 0 2
14219: PUSH
14220: LD_VAR 0 4
14224: ADD
14225: ST_TO_ADDR
14226: GO 14190
14228: POP
14229: POP
// end ;
14230: LD_VAR 0 2
14234: RET
// export function ComComplete ( unit , b ) ; var i ; begin
14235: LD_INT 0
14237: PPUSH
14238: PPUSH
// if BuildingStatus ( b ) = bs_build then
14239: LD_VAR 0 2
14243: PPUSH
14244: CALL_OW 461
14248: PUSH
14249: LD_INT 1
14251: EQUAL
14252: IFFALSE 14312
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
14254: LD_VAR 0 1
14258: PPUSH
14259: LD_STRING h
14261: PUSH
14262: LD_VAR 0 2
14266: PPUSH
14267: CALL_OW 250
14271: PUSH
14272: LD_VAR 0 2
14276: PPUSH
14277: CALL_OW 251
14281: PUSH
14282: LD_VAR 0 2
14286: PUSH
14287: LD_INT 0
14289: PUSH
14290: LD_INT 0
14292: PUSH
14293: LD_INT 0
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: PPUSH
14308: CALL_OW 446
// end ;
14312: LD_VAR 0 3
14316: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
14317: LD_INT 0
14319: PPUSH
14320: PPUSH
14321: PPUSH
14322: PPUSH
14323: PPUSH
14324: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
14325: LD_VAR 0 1
14329: NOT
14330: PUSH
14331: LD_VAR 0 1
14335: PPUSH
14336: CALL_OW 263
14340: PUSH
14341: LD_INT 2
14343: EQUAL
14344: NOT
14345: OR
14346: IFFALSE 14350
// exit ;
14348: GO 14666
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
14350: LD_ADDR_VAR 0 6
14354: PUSH
14355: LD_INT 22
14357: PUSH
14358: LD_VAR 0 1
14362: PPUSH
14363: CALL_OW 255
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: LD_INT 2
14374: PUSH
14375: LD_INT 30
14377: PUSH
14378: LD_INT 36
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 34
14387: PUSH
14388: LD_INT 31
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: LIST
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PPUSH
14404: CALL_OW 69
14408: ST_TO_ADDR
// if not tmp then
14409: LD_VAR 0 6
14413: NOT
14414: IFFALSE 14418
// exit ;
14416: GO 14666
// result := [ ] ;
14418: LD_ADDR_VAR 0 2
14422: PUSH
14423: EMPTY
14424: ST_TO_ADDR
// for i in tmp do
14425: LD_ADDR_VAR 0 3
14429: PUSH
14430: LD_VAR 0 6
14434: PUSH
14435: FOR_IN
14436: IFFALSE 14507
// begin t := UnitsInside ( i ) ;
14438: LD_ADDR_VAR 0 4
14442: PUSH
14443: LD_VAR 0 3
14447: PPUSH
14448: CALL_OW 313
14452: ST_TO_ADDR
// if t then
14453: LD_VAR 0 4
14457: IFFALSE 14505
// for j in t do
14459: LD_ADDR_VAR 0 7
14463: PUSH
14464: LD_VAR 0 4
14468: PUSH
14469: FOR_IN
14470: IFFALSE 14503
// result := Insert ( result , result + 1 , j ) ;
14472: LD_ADDR_VAR 0 2
14476: PUSH
14477: LD_VAR 0 2
14481: PPUSH
14482: LD_VAR 0 2
14486: PUSH
14487: LD_INT 1
14489: PLUS
14490: PPUSH
14491: LD_VAR 0 7
14495: PPUSH
14496: CALL_OW 2
14500: ST_TO_ADDR
14501: GO 14469
14503: POP
14504: POP
// end ;
14505: GO 14435
14507: POP
14508: POP
// if not result then
14509: LD_VAR 0 2
14513: NOT
14514: IFFALSE 14518
// exit ;
14516: GO 14666
// mech := result [ 1 ] ;
14518: LD_ADDR_VAR 0 5
14522: PUSH
14523: LD_VAR 0 2
14527: PUSH
14528: LD_INT 1
14530: ARRAY
14531: ST_TO_ADDR
// if result > 1 then
14532: LD_VAR 0 2
14536: PUSH
14537: LD_INT 1
14539: GREATER
14540: IFFALSE 14652
// for i = 2 to result do
14542: LD_ADDR_VAR 0 3
14546: PUSH
14547: DOUBLE
14548: LD_INT 2
14550: DEC
14551: ST_TO_ADDR
14552: LD_VAR 0 2
14556: PUSH
14557: FOR_TO
14558: IFFALSE 14650
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
14560: LD_ADDR_VAR 0 4
14564: PUSH
14565: LD_VAR 0 2
14569: PUSH
14570: LD_VAR 0 3
14574: ARRAY
14575: PPUSH
14576: LD_INT 3
14578: PPUSH
14579: CALL_OW 259
14583: PUSH
14584: LD_VAR 0 2
14588: PUSH
14589: LD_VAR 0 3
14593: ARRAY
14594: PPUSH
14595: CALL_OW 432
14599: MINUS
14600: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
14601: LD_VAR 0 4
14605: PUSH
14606: LD_VAR 0 5
14610: PPUSH
14611: LD_INT 3
14613: PPUSH
14614: CALL_OW 259
14618: PUSH
14619: LD_VAR 0 5
14623: PPUSH
14624: CALL_OW 432
14628: MINUS
14629: GREATEREQUAL
14630: IFFALSE 14648
// mech := result [ i ] ;
14632: LD_ADDR_VAR 0 5
14636: PUSH
14637: LD_VAR 0 2
14641: PUSH
14642: LD_VAR 0 3
14646: ARRAY
14647: ST_TO_ADDR
// end ;
14648: GO 14557
14650: POP
14651: POP
// ComLinkTo ( vehicle , mech ) ;
14652: LD_VAR 0 1
14656: PPUSH
14657: LD_VAR 0 5
14661: PPUSH
14662: CALL_OW 135
// end ;
14666: LD_VAR 0 2
14670: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
14671: LD_INT 0
14673: PPUSH
14674: PPUSH
14675: PPUSH
14676: PPUSH
14677: PPUSH
14678: PPUSH
14679: PPUSH
14680: PPUSH
14681: PPUSH
14682: PPUSH
14683: PPUSH
14684: PPUSH
// result := [ ] ;
14685: LD_ADDR_VAR 0 6
14689: PUSH
14690: EMPTY
14691: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
14692: LD_VAR 0 1
14696: PPUSH
14697: CALL_OW 266
14701: PUSH
14702: LD_INT 0
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: IN
14712: NOT
14713: IFFALSE 14717
// exit ;
14715: GO 16126
// if name then
14717: LD_VAR 0 2
14721: IFFALSE 14737
// SetBName ( base_dep , name ) ;
14723: LD_VAR 0 1
14727: PPUSH
14728: LD_VAR 0 2
14732: PPUSH
14733: CALL_OW 500
// base := GetBase ( base_dep ) ;
14737: LD_ADDR_VAR 0 14
14741: PUSH
14742: LD_VAR 0 1
14746: PPUSH
14747: CALL_OW 274
14751: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
14752: LD_ADDR_VAR 0 15
14756: PUSH
14757: LD_VAR 0 1
14761: PPUSH
14762: CALL_OW 255
14766: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
14767: LD_ADDR_VAR 0 16
14771: PUSH
14772: LD_VAR 0 1
14776: PPUSH
14777: CALL_OW 248
14781: ST_TO_ADDR
// if sources then
14782: LD_VAR 0 4
14786: IFFALSE 14833
// for i = 1 to 3 do
14788: LD_ADDR_VAR 0 7
14792: PUSH
14793: DOUBLE
14794: LD_INT 1
14796: DEC
14797: ST_TO_ADDR
14798: LD_INT 3
14800: PUSH
14801: FOR_TO
14802: IFFALSE 14831
// AddResourceType ( base , i , sources [ i ] ) ;
14804: LD_VAR 0 14
14808: PPUSH
14809: LD_VAR 0 7
14813: PPUSH
14814: LD_VAR 0 4
14818: PUSH
14819: LD_VAR 0 7
14823: ARRAY
14824: PPUSH
14825: CALL_OW 276
14829: GO 14801
14831: POP
14832: POP
// buildings := GetBaseBuildings ( base ) ;
14833: LD_ADDR_VAR 0 17
14837: PUSH
14838: LD_VAR 0 14
14842: PPUSH
14843: CALL 14139 0 1
14847: ST_TO_ADDR
// InitHc ;
14848: CALL_OW 19
// InitUc ;
14852: CALL_OW 18
// uc_side := side ;
14856: LD_ADDR_OWVAR 20
14860: PUSH
14861: LD_VAR 0 15
14865: ST_TO_ADDR
// uc_nation := nation ;
14866: LD_ADDR_OWVAR 21
14870: PUSH
14871: LD_VAR 0 16
14875: ST_TO_ADDR
// if buildings then
14876: LD_VAR 0 17
14880: IFFALSE 15985
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
14882: LD_VAR 0 17
14886: PPUSH
14887: LD_INT 2
14889: PUSH
14890: LD_INT 30
14892: PUSH
14893: LD_INT 32
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: LD_INT 30
14902: PUSH
14903: LD_INT 33
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: LIST
14914: PPUSH
14915: CALL_OW 72
14919: IFFALSE 15002
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
14921: LD_ADDR_VAR 0 7
14925: PUSH
14926: LD_VAR 0 17
14930: PPUSH
14931: LD_INT 2
14933: PUSH
14934: LD_INT 30
14936: PUSH
14937: LD_INT 32
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 30
14946: PUSH
14947: LD_INT 33
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: LIST
14958: PPUSH
14959: CALL_OW 72
14963: PUSH
14964: FOR_IN
14965: IFFALSE 15000
// begin if not GetBWeapon ( i ) then
14967: LD_VAR 0 7
14971: PPUSH
14972: CALL_OW 269
14976: NOT
14977: IFFALSE 14998
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
14979: LD_VAR 0 7
14983: PPUSH
14984: LD_VAR 0 7
14988: PPUSH
14989: CALL 16131 0 1
14993: PPUSH
14994: CALL_OW 431
// end ;
14998: GO 14964
15000: POP
15001: POP
// end ; for i = 1 to personel do
15002: LD_ADDR_VAR 0 7
15006: PUSH
15007: DOUBLE
15008: LD_INT 1
15010: DEC
15011: ST_TO_ADDR
15012: LD_VAR 0 5
15016: PUSH
15017: FOR_TO
15018: IFFALSE 15965
// begin if i > 4 then
15020: LD_VAR 0 7
15024: PUSH
15025: LD_INT 4
15027: GREATER
15028: IFFALSE 15032
// break ;
15030: GO 15965
// case i of 1 :
15032: LD_VAR 0 7
15036: PUSH
15037: LD_INT 1
15039: DOUBLE
15040: EQUAL
15041: IFTRUE 15045
15043: GO 15118
15045: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
15046: LD_ADDR_VAR 0 11
15050: PUSH
15051: LD_VAR 0 17
15055: PPUSH
15056: LD_INT 22
15058: PUSH
15059: LD_VAR 0 15
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 2
15070: PUSH
15071: LD_INT 30
15073: PUSH
15074: LD_INT 32
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 30
15083: PUSH
15084: LD_INT 4
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 30
15093: PUSH
15094: LD_INT 5
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PPUSH
15111: CALL_OW 72
15115: ST_TO_ADDR
15116: GO 15340
15118: LD_INT 2
15120: DOUBLE
15121: EQUAL
15122: IFTRUE 15126
15124: GO 15188
15126: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
15127: LD_ADDR_VAR 0 11
15131: PUSH
15132: LD_VAR 0 17
15136: PPUSH
15137: LD_INT 22
15139: PUSH
15140: LD_VAR 0 15
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 2
15151: PUSH
15152: LD_INT 30
15154: PUSH
15155: LD_INT 0
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: PUSH
15162: LD_INT 30
15164: PUSH
15165: LD_INT 1
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: LIST
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PPUSH
15181: CALL_OW 72
15185: ST_TO_ADDR
15186: GO 15340
15188: LD_INT 3
15190: DOUBLE
15191: EQUAL
15192: IFTRUE 15196
15194: GO 15258
15196: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
15197: LD_ADDR_VAR 0 11
15201: PUSH
15202: LD_VAR 0 17
15206: PPUSH
15207: LD_INT 22
15209: PUSH
15210: LD_VAR 0 15
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 2
15221: PUSH
15222: LD_INT 30
15224: PUSH
15225: LD_INT 2
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 30
15234: PUSH
15235: LD_INT 3
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: LIST
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PPUSH
15251: CALL_OW 72
15255: ST_TO_ADDR
15256: GO 15340
15258: LD_INT 4
15260: DOUBLE
15261: EQUAL
15262: IFTRUE 15266
15264: GO 15339
15266: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
15267: LD_ADDR_VAR 0 11
15271: PUSH
15272: LD_VAR 0 17
15276: PPUSH
15277: LD_INT 22
15279: PUSH
15280: LD_VAR 0 15
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: LD_INT 2
15291: PUSH
15292: LD_INT 30
15294: PUSH
15295: LD_INT 6
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 30
15304: PUSH
15305: LD_INT 7
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: LD_INT 30
15314: PUSH
15315: LD_INT 8
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PPUSH
15332: CALL_OW 72
15336: ST_TO_ADDR
15337: GO 15340
15339: POP
// if not f then
15340: LD_VAR 0 11
15344: NOT
15345: IFFALSE 15349
// continue ;
15347: GO 15017
// x := personel [ i ] ;
15349: LD_ADDR_VAR 0 12
15353: PUSH
15354: LD_VAR 0 5
15358: PUSH
15359: LD_VAR 0 7
15363: ARRAY
15364: ST_TO_ADDR
// if x = - 1 then
15365: LD_VAR 0 12
15369: PUSH
15370: LD_INT 1
15372: NEG
15373: EQUAL
15374: IFFALSE 15583
// begin for j in f do
15376: LD_ADDR_VAR 0 8
15380: PUSH
15381: LD_VAR 0 11
15385: PUSH
15386: FOR_IN
15387: IFFALSE 15579
// repeat InitHc ;
15389: CALL_OW 19
// if GetBType ( j ) = b_barracks then
15393: LD_VAR 0 8
15397: PPUSH
15398: CALL_OW 266
15402: PUSH
15403: LD_INT 5
15405: EQUAL
15406: IFFALSE 15476
// begin if UnitsInside ( j ) < 3 then
15408: LD_VAR 0 8
15412: PPUSH
15413: CALL_OW 313
15417: PUSH
15418: LD_INT 3
15420: LESS
15421: IFFALSE 15457
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
15423: LD_INT 0
15425: PPUSH
15426: LD_INT 5
15428: PUSH
15429: LD_INT 8
15431: PUSH
15432: LD_INT 9
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: PUSH
15440: LD_VAR 0 16
15444: ARRAY
15445: PPUSH
15446: LD_VAR 0 3
15450: PPUSH
15451: CALL_OW 380
15455: GO 15474
// PrepareHuman ( false , i , skill ) ;
15457: LD_INT 0
15459: PPUSH
15460: LD_VAR 0 7
15464: PPUSH
15465: LD_VAR 0 3
15469: PPUSH
15470: CALL_OW 380
// end else
15474: GO 15493
// PrepareHuman ( false , i , skill ) ;
15476: LD_INT 0
15478: PPUSH
15479: LD_VAR 0 7
15483: PPUSH
15484: LD_VAR 0 3
15488: PPUSH
15489: CALL_OW 380
// un := CreateHuman ;
15493: LD_ADDR_VAR 0 13
15497: PUSH
15498: CALL_OW 44
15502: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15503: LD_ADDR_VAR 0 6
15507: PUSH
15508: LD_VAR 0 6
15512: PPUSH
15513: LD_INT 1
15515: PPUSH
15516: LD_VAR 0 13
15520: PPUSH
15521: CALL_OW 2
15525: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
15526: LD_VAR 0 13
15530: PPUSH
15531: LD_VAR 0 8
15535: PPUSH
15536: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
15540: LD_VAR 0 8
15544: PPUSH
15545: CALL_OW 313
15549: PUSH
15550: LD_INT 6
15552: EQUAL
15553: PUSH
15554: LD_VAR 0 8
15558: PPUSH
15559: CALL_OW 266
15563: PUSH
15564: LD_INT 32
15566: PUSH
15567: LD_INT 31
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: IN
15574: OR
15575: IFFALSE 15389
15577: GO 15386
15579: POP
15580: POP
// end else
15581: GO 15963
// for j = 1 to x do
15583: LD_ADDR_VAR 0 8
15587: PUSH
15588: DOUBLE
15589: LD_INT 1
15591: DEC
15592: ST_TO_ADDR
15593: LD_VAR 0 12
15597: PUSH
15598: FOR_TO
15599: IFFALSE 15961
// begin InitHc ;
15601: CALL_OW 19
// if not f then
15605: LD_VAR 0 11
15609: NOT
15610: IFFALSE 15699
// begin PrepareHuman ( false , i , skill ) ;
15612: LD_INT 0
15614: PPUSH
15615: LD_VAR 0 7
15619: PPUSH
15620: LD_VAR 0 3
15624: PPUSH
15625: CALL_OW 380
// un := CreateHuman ;
15629: LD_ADDR_VAR 0 13
15633: PUSH
15634: CALL_OW 44
15638: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15639: LD_ADDR_VAR 0 6
15643: PUSH
15644: LD_VAR 0 6
15648: PPUSH
15649: LD_INT 1
15651: PPUSH
15652: LD_VAR 0 13
15656: PPUSH
15657: CALL_OW 2
15661: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
15662: LD_VAR 0 13
15666: PPUSH
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL_OW 250
15676: PPUSH
15677: LD_VAR 0 1
15681: PPUSH
15682: CALL_OW 251
15686: PPUSH
15687: LD_INT 10
15689: PPUSH
15690: LD_INT 0
15692: PPUSH
15693: CALL_OW 50
// continue ;
15697: GO 15598
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
15699: LD_VAR 0 11
15703: PUSH
15704: LD_INT 1
15706: ARRAY
15707: PPUSH
15708: CALL_OW 313
15712: PUSH
15713: LD_VAR 0 11
15717: PUSH
15718: LD_INT 1
15720: ARRAY
15721: PPUSH
15722: CALL_OW 266
15726: PUSH
15727: LD_INT 32
15729: PUSH
15730: LD_INT 31
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: IN
15737: AND
15738: PUSH
15739: LD_VAR 0 11
15743: PUSH
15744: LD_INT 1
15746: ARRAY
15747: PPUSH
15748: CALL_OW 313
15752: PUSH
15753: LD_INT 6
15755: EQUAL
15756: OR
15757: IFFALSE 15777
// f := Delete ( f , 1 ) ;
15759: LD_ADDR_VAR 0 11
15763: PUSH
15764: LD_VAR 0 11
15768: PPUSH
15769: LD_INT 1
15771: PPUSH
15772: CALL_OW 3
15776: ST_TO_ADDR
// if not f then
15777: LD_VAR 0 11
15781: NOT
15782: IFFALSE 15800
// begin x := x + 2 ;
15784: LD_ADDR_VAR 0 12
15788: PUSH
15789: LD_VAR 0 12
15793: PUSH
15794: LD_INT 2
15796: PLUS
15797: ST_TO_ADDR
// continue ;
15798: GO 15598
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
15800: LD_VAR 0 11
15804: PUSH
15805: LD_INT 1
15807: ARRAY
15808: PPUSH
15809: CALL_OW 266
15813: PUSH
15814: LD_INT 5
15816: EQUAL
15817: IFFALSE 15891
// begin if UnitsInside ( f [ 1 ] ) < 3 then
15819: LD_VAR 0 11
15823: PUSH
15824: LD_INT 1
15826: ARRAY
15827: PPUSH
15828: CALL_OW 313
15832: PUSH
15833: LD_INT 3
15835: LESS
15836: IFFALSE 15872
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
15838: LD_INT 0
15840: PPUSH
15841: LD_INT 5
15843: PUSH
15844: LD_INT 8
15846: PUSH
15847: LD_INT 9
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: LIST
15854: PUSH
15855: LD_VAR 0 16
15859: ARRAY
15860: PPUSH
15861: LD_VAR 0 3
15865: PPUSH
15866: CALL_OW 380
15870: GO 15889
// PrepareHuman ( false , i , skill ) ;
15872: LD_INT 0
15874: PPUSH
15875: LD_VAR 0 7
15879: PPUSH
15880: LD_VAR 0 3
15884: PPUSH
15885: CALL_OW 380
// end else
15889: GO 15908
// PrepareHuman ( false , i , skill ) ;
15891: LD_INT 0
15893: PPUSH
15894: LD_VAR 0 7
15898: PPUSH
15899: LD_VAR 0 3
15903: PPUSH
15904: CALL_OW 380
// un := CreateHuman ;
15908: LD_ADDR_VAR 0 13
15912: PUSH
15913: CALL_OW 44
15917: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15918: LD_ADDR_VAR 0 6
15922: PUSH
15923: LD_VAR 0 6
15927: PPUSH
15928: LD_INT 1
15930: PPUSH
15931: LD_VAR 0 13
15935: PPUSH
15936: CALL_OW 2
15940: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
15941: LD_VAR 0 13
15945: PPUSH
15946: LD_VAR 0 11
15950: PUSH
15951: LD_INT 1
15953: ARRAY
15954: PPUSH
15955: CALL_OW 52
// end ;
15959: GO 15598
15961: POP
15962: POP
// end ;
15963: GO 15017
15965: POP
15966: POP
// result := result ^ buildings ;
15967: LD_ADDR_VAR 0 6
15971: PUSH
15972: LD_VAR 0 6
15976: PUSH
15977: LD_VAR 0 17
15981: ADD
15982: ST_TO_ADDR
// end else
15983: GO 16126
// begin for i = 1 to personel do
15985: LD_ADDR_VAR 0 7
15989: PUSH
15990: DOUBLE
15991: LD_INT 1
15993: DEC
15994: ST_TO_ADDR
15995: LD_VAR 0 5
15999: PUSH
16000: FOR_TO
16001: IFFALSE 16124
// begin if i > 4 then
16003: LD_VAR 0 7
16007: PUSH
16008: LD_INT 4
16010: GREATER
16011: IFFALSE 16015
// break ;
16013: GO 16124
// x := personel [ i ] ;
16015: LD_ADDR_VAR 0 12
16019: PUSH
16020: LD_VAR 0 5
16024: PUSH
16025: LD_VAR 0 7
16029: ARRAY
16030: ST_TO_ADDR
// if x = - 1 then
16031: LD_VAR 0 12
16035: PUSH
16036: LD_INT 1
16038: NEG
16039: EQUAL
16040: IFFALSE 16044
// continue ;
16042: GO 16000
// PrepareHuman ( false , i , skill ) ;
16044: LD_INT 0
16046: PPUSH
16047: LD_VAR 0 7
16051: PPUSH
16052: LD_VAR 0 3
16056: PPUSH
16057: CALL_OW 380
// un := CreateHuman ;
16061: LD_ADDR_VAR 0 13
16065: PUSH
16066: CALL_OW 44
16070: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16071: LD_VAR 0 13
16075: PPUSH
16076: LD_VAR 0 1
16080: PPUSH
16081: CALL_OW 250
16085: PPUSH
16086: LD_VAR 0 1
16090: PPUSH
16091: CALL_OW 251
16095: PPUSH
16096: LD_INT 10
16098: PPUSH
16099: LD_INT 0
16101: PPUSH
16102: CALL_OW 50
// result := result ^ un ;
16106: LD_ADDR_VAR 0 6
16110: PUSH
16111: LD_VAR 0 6
16115: PUSH
16116: LD_VAR 0 13
16120: ADD
16121: ST_TO_ADDR
// end ;
16122: GO 16000
16124: POP
16125: POP
// end ; end ;
16126: LD_VAR 0 6
16130: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
16131: LD_INT 0
16133: PPUSH
16134: PPUSH
16135: PPUSH
16136: PPUSH
16137: PPUSH
16138: PPUSH
16139: PPUSH
16140: PPUSH
16141: PPUSH
16142: PPUSH
16143: PPUSH
16144: PPUSH
16145: PPUSH
16146: PPUSH
16147: PPUSH
16148: PPUSH
// result := false ;
16149: LD_ADDR_VAR 0 2
16153: PUSH
16154: LD_INT 0
16156: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
16157: LD_VAR 0 1
16161: NOT
16162: PUSH
16163: LD_VAR 0 1
16167: PPUSH
16168: CALL_OW 266
16172: PUSH
16173: LD_INT 32
16175: PUSH
16176: LD_INT 33
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: IN
16183: NOT
16184: OR
16185: IFFALSE 16189
// exit ;
16187: GO 17422
// nat := GetNation ( tower ) ;
16189: LD_ADDR_VAR 0 11
16193: PUSH
16194: LD_VAR 0 1
16198: PPUSH
16199: CALL_OW 248
16203: ST_TO_ADDR
// side := GetSide ( tower ) ;
16204: LD_ADDR_VAR 0 15
16208: PUSH
16209: LD_VAR 0 1
16213: PPUSH
16214: CALL_OW 255
16218: ST_TO_ADDR
// x := GetX ( tower ) ;
16219: LD_ADDR_VAR 0 9
16223: PUSH
16224: LD_VAR 0 1
16228: PPUSH
16229: CALL_OW 250
16233: ST_TO_ADDR
// y := GetY ( tower ) ;
16234: LD_ADDR_VAR 0 10
16238: PUSH
16239: LD_VAR 0 1
16243: PPUSH
16244: CALL_OW 251
16248: ST_TO_ADDR
// if not x or not y then
16249: LD_VAR 0 9
16253: NOT
16254: PUSH
16255: LD_VAR 0 10
16259: NOT
16260: OR
16261: IFFALSE 16265
// exit ;
16263: GO 17422
// weapon := 0 ;
16265: LD_ADDR_VAR 0 17
16269: PUSH
16270: LD_INT 0
16272: ST_TO_ADDR
// fac_list := [ ] ;
16273: LD_ADDR_VAR 0 16
16277: PUSH
16278: EMPTY
16279: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
16280: LD_ADDR_VAR 0 5
16284: PUSH
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 274
16294: PPUSH
16295: CALL 14139 0 1
16299: PPUSH
16300: LD_INT 30
16302: PUSH
16303: LD_INT 3
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PPUSH
16310: CALL_OW 72
16314: ST_TO_ADDR
// if not factories then
16315: LD_VAR 0 5
16319: NOT
16320: IFFALSE 16324
// exit ;
16322: GO 17422
// for i in factories do
16324: LD_ADDR_VAR 0 7
16328: PUSH
16329: LD_VAR 0 5
16333: PUSH
16334: FOR_IN
16335: IFFALSE 16360
// fac_list := fac_list union AvailableWeaponList ( i ) ;
16337: LD_ADDR_VAR 0 16
16341: PUSH
16342: LD_VAR 0 16
16346: PUSH
16347: LD_VAR 0 7
16351: PPUSH
16352: CALL_OW 478
16356: UNION
16357: ST_TO_ADDR
16358: GO 16334
16360: POP
16361: POP
// if not fac_list then
16362: LD_VAR 0 16
16366: NOT
16367: IFFALSE 16371
// exit ;
16369: GO 17422
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
16371: LD_ADDR_VAR 0 4
16375: PUSH
16376: LD_INT 4
16378: PUSH
16379: LD_INT 5
16381: PUSH
16382: LD_INT 9
16384: PUSH
16385: LD_INT 10
16387: PUSH
16388: LD_INT 6
16390: PUSH
16391: LD_INT 7
16393: PUSH
16394: LD_INT 11
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 27
16408: PUSH
16409: LD_INT 28
16411: PUSH
16412: LD_INT 26
16414: PUSH
16415: LD_INT 30
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 43
16426: PUSH
16427: LD_INT 44
16429: PUSH
16430: LD_INT 46
16432: PUSH
16433: LD_INT 45
16435: PUSH
16436: LD_INT 47
16438: PUSH
16439: LD_INT 49
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: LIST
16454: PUSH
16455: LD_VAR 0 11
16459: ARRAY
16460: ST_TO_ADDR
// for i in list do
16461: LD_ADDR_VAR 0 7
16465: PUSH
16466: LD_VAR 0 4
16470: PUSH
16471: FOR_IN
16472: IFFALSE 16505
// if not i in fac_list then
16474: LD_VAR 0 7
16478: PUSH
16479: LD_VAR 0 16
16483: IN
16484: NOT
16485: IFFALSE 16503
// list := list diff i ;
16487: LD_ADDR_VAR 0 4
16491: PUSH
16492: LD_VAR 0 4
16496: PUSH
16497: LD_VAR 0 7
16501: DIFF
16502: ST_TO_ADDR
16503: GO 16471
16505: POP
16506: POP
// if not list then
16507: LD_VAR 0 4
16511: NOT
16512: IFFALSE 16516
// exit ;
16514: GO 17422
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
16516: LD_VAR 0 11
16520: PUSH
16521: LD_INT 3
16523: EQUAL
16524: PUSH
16525: LD_INT 49
16527: PUSH
16528: LD_VAR 0 4
16532: IN
16533: AND
16534: PUSH
16535: LD_INT 31
16537: PPUSH
16538: LD_VAR 0 15
16542: PPUSH
16543: CALL_OW 321
16547: PUSH
16548: LD_INT 2
16550: EQUAL
16551: AND
16552: IFFALSE 16612
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
16554: LD_INT 22
16556: PUSH
16557: LD_VAR 0 15
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 35
16568: PUSH
16569: LD_INT 49
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 91
16578: PUSH
16579: LD_VAR 0 1
16583: PUSH
16584: LD_INT 10
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: LIST
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: LIST
16596: PPUSH
16597: CALL_OW 69
16601: NOT
16602: IFFALSE 16612
// weapon := ru_time_lapser ;
16604: LD_ADDR_VAR 0 17
16608: PUSH
16609: LD_INT 49
16611: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
16612: LD_VAR 0 11
16616: PUSH
16617: LD_INT 1
16619: PUSH
16620: LD_INT 2
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: IN
16627: PUSH
16628: LD_INT 11
16630: PUSH
16631: LD_VAR 0 4
16635: IN
16636: PUSH
16637: LD_INT 30
16639: PUSH
16640: LD_VAR 0 4
16644: IN
16645: OR
16646: AND
16647: PUSH
16648: LD_INT 6
16650: PPUSH
16651: LD_VAR 0 15
16655: PPUSH
16656: CALL_OW 321
16660: PUSH
16661: LD_INT 2
16663: EQUAL
16664: AND
16665: IFFALSE 16830
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
16667: LD_INT 22
16669: PUSH
16670: LD_VAR 0 15
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 2
16681: PUSH
16682: LD_INT 35
16684: PUSH
16685: LD_INT 11
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: LD_INT 35
16694: PUSH
16695: LD_INT 30
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 91
16709: PUSH
16710: LD_VAR 0 1
16714: PUSH
16715: LD_INT 18
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: LIST
16727: PPUSH
16728: CALL_OW 69
16732: NOT
16733: PUSH
16734: LD_INT 22
16736: PUSH
16737: LD_VAR 0 15
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 2
16748: PUSH
16749: LD_INT 30
16751: PUSH
16752: LD_INT 32
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 30
16761: PUSH
16762: LD_INT 33
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: LIST
16773: PUSH
16774: LD_INT 91
16776: PUSH
16777: LD_VAR 0 1
16781: PUSH
16782: LD_INT 12
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: LIST
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: PPUSH
16798: CALL_OW 69
16802: PUSH
16803: LD_INT 2
16805: GREATER
16806: AND
16807: IFFALSE 16830
// weapon := [ us_radar , ar_radar ] [ nat ] ;
16809: LD_ADDR_VAR 0 17
16813: PUSH
16814: LD_INT 11
16816: PUSH
16817: LD_INT 30
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: LD_VAR 0 11
16828: ARRAY
16829: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
16830: LD_VAR 0 17
16834: NOT
16835: PUSH
16836: LD_INT 40
16838: PPUSH
16839: LD_VAR 0 15
16843: PPUSH
16844: CALL_OW 321
16848: PUSH
16849: LD_INT 2
16851: EQUAL
16852: AND
16853: PUSH
16854: LD_INT 7
16856: PUSH
16857: LD_VAR 0 4
16861: IN
16862: PUSH
16863: LD_INT 28
16865: PUSH
16866: LD_VAR 0 4
16870: IN
16871: OR
16872: PUSH
16873: LD_INT 45
16875: PUSH
16876: LD_VAR 0 4
16880: IN
16881: OR
16882: AND
16883: IFFALSE 17137
// begin hex := GetHexInfo ( x , y ) ;
16885: LD_ADDR_VAR 0 3
16889: PUSH
16890: LD_VAR 0 9
16894: PPUSH
16895: LD_VAR 0 10
16899: PPUSH
16900: CALL_OW 546
16904: ST_TO_ADDR
// if hex [ 1 ] then
16905: LD_VAR 0 3
16909: PUSH
16910: LD_INT 1
16912: ARRAY
16913: IFFALSE 16917
// exit ;
16915: GO 17422
// height := hex [ 2 ] ;
16917: LD_ADDR_VAR 0 14
16921: PUSH
16922: LD_VAR 0 3
16926: PUSH
16927: LD_INT 2
16929: ARRAY
16930: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
16931: LD_ADDR_VAR 0 13
16935: PUSH
16936: LD_INT 0
16938: PUSH
16939: LD_INT 2
16941: PUSH
16942: LD_INT 3
16944: PUSH
16945: LD_INT 5
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: ST_TO_ADDR
// for i in tmp do
16954: LD_ADDR_VAR 0 7
16958: PUSH
16959: LD_VAR 0 13
16963: PUSH
16964: FOR_IN
16965: IFFALSE 17135
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
16967: LD_ADDR_VAR 0 8
16971: PUSH
16972: LD_VAR 0 9
16976: PPUSH
16977: LD_VAR 0 7
16981: PPUSH
16982: LD_INT 5
16984: PPUSH
16985: CALL_OW 272
16989: PUSH
16990: LD_VAR 0 10
16994: PPUSH
16995: LD_VAR 0 7
16999: PPUSH
17000: LD_INT 5
17002: PPUSH
17003: CALL_OW 273
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
17012: LD_VAR 0 8
17016: PUSH
17017: LD_INT 1
17019: ARRAY
17020: PPUSH
17021: LD_VAR 0 8
17025: PUSH
17026: LD_INT 2
17028: ARRAY
17029: PPUSH
17030: CALL_OW 488
17034: IFFALSE 17133
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
17036: LD_ADDR_VAR 0 3
17040: PUSH
17041: LD_VAR 0 8
17045: PUSH
17046: LD_INT 1
17048: ARRAY
17049: PPUSH
17050: LD_VAR 0 8
17054: PUSH
17055: LD_INT 2
17057: ARRAY
17058: PPUSH
17059: CALL_OW 546
17063: ST_TO_ADDR
// if hex [ 1 ] then
17064: LD_VAR 0 3
17068: PUSH
17069: LD_INT 1
17071: ARRAY
17072: IFFALSE 17076
// continue ;
17074: GO 16964
// h := hex [ 2 ] ;
17076: LD_ADDR_VAR 0 12
17080: PUSH
17081: LD_VAR 0 3
17085: PUSH
17086: LD_INT 2
17088: ARRAY
17089: ST_TO_ADDR
// if h + 7 < height then
17090: LD_VAR 0 12
17094: PUSH
17095: LD_INT 7
17097: PLUS
17098: PUSH
17099: LD_VAR 0 14
17103: LESS
17104: IFFALSE 17133
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
17106: LD_ADDR_VAR 0 17
17110: PUSH
17111: LD_INT 7
17113: PUSH
17114: LD_INT 28
17116: PUSH
17117: LD_INT 45
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: LIST
17124: PUSH
17125: LD_VAR 0 11
17129: ARRAY
17130: ST_TO_ADDR
// break ;
17131: GO 17135
// end ; end ; end ;
17133: GO 16964
17135: POP
17136: POP
// end ; if not weapon then
17137: LD_VAR 0 17
17141: NOT
17142: IFFALSE 17304
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
17144: LD_ADDR_VAR 0 4
17148: PUSH
17149: LD_VAR 0 4
17153: PUSH
17154: LD_INT 11
17156: PUSH
17157: LD_INT 30
17159: PUSH
17160: LD_INT 49
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: LIST
17167: DIFF
17168: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
17169: LD_ADDR_VAR 0 17
17173: PUSH
17174: LD_VAR 0 4
17178: PUSH
17179: LD_INT 1
17181: PPUSH
17182: LD_VAR 0 4
17186: PPUSH
17187: CALL_OW 12
17191: ARRAY
17192: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
17193: LD_ADDR_VAR 0 13
17197: PUSH
17198: LD_INT 22
17200: PUSH
17201: LD_VAR 0 15
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 3
17212: PUSH
17213: LD_INT 35
17215: PUSH
17216: LD_INT 0
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PPUSH
17231: CALL_OW 69
17235: ST_TO_ADDR
// for i in tmp do
17236: LD_ADDR_VAR 0 7
17240: PUSH
17241: LD_VAR 0 13
17245: PUSH
17246: FOR_IN
17247: IFFALSE 17272
// list := list diff GetBWeapon ( i ) ;
17249: LD_ADDR_VAR 0 4
17253: PUSH
17254: LD_VAR 0 4
17258: PUSH
17259: LD_VAR 0 7
17263: PPUSH
17264: CALL_OW 269
17268: DIFF
17269: ST_TO_ADDR
17270: GO 17246
17272: POP
17273: POP
// if list then
17274: LD_VAR 0 4
17278: IFFALSE 17304
// weapon := list [ rand ( 1 , list ) ] ;
17280: LD_ADDR_VAR 0 17
17284: PUSH
17285: LD_VAR 0 4
17289: PUSH
17290: LD_INT 1
17292: PPUSH
17293: LD_VAR 0 4
17297: PPUSH
17298: CALL_OW 12
17302: ARRAY
17303: ST_TO_ADDR
// end ; if weapon then
17304: LD_VAR 0 17
17308: IFFALSE 17422
// begin tmp := CostOfWeapon ( weapon ) ;
17310: LD_ADDR_VAR 0 13
17314: PUSH
17315: LD_VAR 0 17
17319: PPUSH
17320: CALL_OW 451
17324: ST_TO_ADDR
// j := GetBase ( tower ) ;
17325: LD_ADDR_VAR 0 8
17329: PUSH
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 274
17339: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
17340: LD_VAR 0 8
17344: PPUSH
17345: LD_INT 1
17347: PPUSH
17348: CALL_OW 275
17352: PUSH
17353: LD_VAR 0 13
17357: PUSH
17358: LD_INT 1
17360: ARRAY
17361: GREATEREQUAL
17362: PUSH
17363: LD_VAR 0 8
17367: PPUSH
17368: LD_INT 2
17370: PPUSH
17371: CALL_OW 275
17375: PUSH
17376: LD_VAR 0 13
17380: PUSH
17381: LD_INT 2
17383: ARRAY
17384: GREATEREQUAL
17385: AND
17386: PUSH
17387: LD_VAR 0 8
17391: PPUSH
17392: LD_INT 3
17394: PPUSH
17395: CALL_OW 275
17399: PUSH
17400: LD_VAR 0 13
17404: PUSH
17405: LD_INT 3
17407: ARRAY
17408: GREATEREQUAL
17409: AND
17410: IFFALSE 17422
// result := weapon ;
17412: LD_ADDR_VAR 0 2
17416: PUSH
17417: LD_VAR 0 17
17421: ST_TO_ADDR
// end ; end ;
17422: LD_VAR 0 2
17426: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
17427: LD_INT 0
17429: PPUSH
17430: PPUSH
// result := true ;
17431: LD_ADDR_VAR 0 3
17435: PUSH
17436: LD_INT 1
17438: ST_TO_ADDR
// if array1 = array2 then
17439: LD_VAR 0 1
17443: PUSH
17444: LD_VAR 0 2
17448: EQUAL
17449: IFFALSE 17509
// begin for i = 1 to array1 do
17451: LD_ADDR_VAR 0 4
17455: PUSH
17456: DOUBLE
17457: LD_INT 1
17459: DEC
17460: ST_TO_ADDR
17461: LD_VAR 0 1
17465: PUSH
17466: FOR_TO
17467: IFFALSE 17505
// if array1 [ i ] <> array2 [ i ] then
17469: LD_VAR 0 1
17473: PUSH
17474: LD_VAR 0 4
17478: ARRAY
17479: PUSH
17480: LD_VAR 0 2
17484: PUSH
17485: LD_VAR 0 4
17489: ARRAY
17490: NONEQUAL
17491: IFFALSE 17503
// begin result := false ;
17493: LD_ADDR_VAR 0 3
17497: PUSH
17498: LD_INT 0
17500: ST_TO_ADDR
// break ;
17501: GO 17505
// end ;
17503: GO 17466
17505: POP
17506: POP
// end else
17507: GO 17517
// result := false ;
17509: LD_ADDR_VAR 0 3
17513: PUSH
17514: LD_INT 0
17516: ST_TO_ADDR
// end ;
17517: LD_VAR 0 3
17521: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
17522: LD_INT 0
17524: PPUSH
17525: PPUSH
17526: PPUSH
// pom := GetBase ( fac ) ;
17527: LD_ADDR_VAR 0 5
17531: PUSH
17532: LD_VAR 0 1
17536: PPUSH
17537: CALL_OW 274
17541: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
17542: LD_ADDR_VAR 0 4
17546: PUSH
17547: LD_VAR 0 2
17551: PUSH
17552: LD_INT 1
17554: ARRAY
17555: PPUSH
17556: LD_VAR 0 2
17560: PUSH
17561: LD_INT 2
17563: ARRAY
17564: PPUSH
17565: LD_VAR 0 2
17569: PUSH
17570: LD_INT 3
17572: ARRAY
17573: PPUSH
17574: LD_VAR 0 2
17578: PUSH
17579: LD_INT 4
17581: ARRAY
17582: PPUSH
17583: CALL_OW 449
17587: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
17588: LD_VAR 0 5
17592: PPUSH
17593: LD_INT 1
17595: PPUSH
17596: CALL_OW 275
17600: PUSH
17601: LD_VAR 0 4
17605: PUSH
17606: LD_INT 1
17608: ARRAY
17609: GREATEREQUAL
17610: PUSH
17611: LD_VAR 0 5
17615: PPUSH
17616: LD_INT 2
17618: PPUSH
17619: CALL_OW 275
17623: PUSH
17624: LD_VAR 0 4
17628: PUSH
17629: LD_INT 2
17631: ARRAY
17632: GREATEREQUAL
17633: AND
17634: PUSH
17635: LD_VAR 0 5
17639: PPUSH
17640: LD_INT 3
17642: PPUSH
17643: CALL_OW 275
17647: PUSH
17648: LD_VAR 0 4
17652: PUSH
17653: LD_INT 3
17655: ARRAY
17656: GREATEREQUAL
17657: AND
17658: IFFALSE 17670
// result := true else
17660: LD_ADDR_VAR 0 3
17664: PUSH
17665: LD_INT 1
17667: ST_TO_ADDR
17668: GO 17678
// result := false ;
17670: LD_ADDR_VAR 0 3
17674: PUSH
17675: LD_INT 0
17677: ST_TO_ADDR
// end ;
17678: LD_VAR 0 3
17682: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
17683: LD_INT 0
17685: PPUSH
17686: PPUSH
17687: PPUSH
17688: PPUSH
// pom := GetBase ( building ) ;
17689: LD_ADDR_VAR 0 3
17693: PUSH
17694: LD_VAR 0 1
17698: PPUSH
17699: CALL_OW 274
17703: ST_TO_ADDR
// if not pom then
17704: LD_VAR 0 3
17708: NOT
17709: IFFALSE 17713
// exit ;
17711: GO 17883
// btype := GetBType ( building ) ;
17713: LD_ADDR_VAR 0 5
17717: PUSH
17718: LD_VAR 0 1
17722: PPUSH
17723: CALL_OW 266
17727: ST_TO_ADDR
// if btype = b_armoury then
17728: LD_VAR 0 5
17732: PUSH
17733: LD_INT 4
17735: EQUAL
17736: IFFALSE 17746
// btype := b_barracks ;
17738: LD_ADDR_VAR 0 5
17742: PUSH
17743: LD_INT 5
17745: ST_TO_ADDR
// if btype = b_depot then
17746: LD_VAR 0 5
17750: PUSH
17751: LD_INT 0
17753: EQUAL
17754: IFFALSE 17764
// btype := b_warehouse ;
17756: LD_ADDR_VAR 0 5
17760: PUSH
17761: LD_INT 1
17763: ST_TO_ADDR
// if btype = b_workshop then
17764: LD_VAR 0 5
17768: PUSH
17769: LD_INT 2
17771: EQUAL
17772: IFFALSE 17782
// btype := b_factory ;
17774: LD_ADDR_VAR 0 5
17778: PUSH
17779: LD_INT 3
17781: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
17782: LD_ADDR_VAR 0 4
17786: PUSH
17787: LD_VAR 0 5
17791: PPUSH
17792: LD_VAR 0 1
17796: PPUSH
17797: CALL_OW 248
17801: PPUSH
17802: CALL_OW 450
17806: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
17807: LD_ADDR_VAR 0 2
17811: PUSH
17812: LD_VAR 0 3
17816: PPUSH
17817: LD_INT 1
17819: PPUSH
17820: CALL_OW 275
17824: PUSH
17825: LD_VAR 0 4
17829: PUSH
17830: LD_INT 1
17832: ARRAY
17833: GREATEREQUAL
17834: PUSH
17835: LD_VAR 0 3
17839: PPUSH
17840: LD_INT 2
17842: PPUSH
17843: CALL_OW 275
17847: PUSH
17848: LD_VAR 0 4
17852: PUSH
17853: LD_INT 2
17855: ARRAY
17856: GREATEREQUAL
17857: AND
17858: PUSH
17859: LD_VAR 0 3
17863: PPUSH
17864: LD_INT 3
17866: PPUSH
17867: CALL_OW 275
17871: PUSH
17872: LD_VAR 0 4
17876: PUSH
17877: LD_INT 3
17879: ARRAY
17880: GREATEREQUAL
17881: AND
17882: ST_TO_ADDR
// end ;
17883: LD_VAR 0 2
17887: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
17888: LD_INT 0
17890: PPUSH
17891: PPUSH
17892: PPUSH
// pom := GetBase ( building ) ;
17893: LD_ADDR_VAR 0 4
17897: PUSH
17898: LD_VAR 0 1
17902: PPUSH
17903: CALL_OW 274
17907: ST_TO_ADDR
// if not pom then
17908: LD_VAR 0 4
17912: NOT
17913: IFFALSE 17917
// exit ;
17915: GO 18018
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
17917: LD_ADDR_VAR 0 5
17921: PUSH
17922: LD_VAR 0 2
17926: PPUSH
17927: LD_VAR 0 1
17931: PPUSH
17932: CALL_OW 248
17936: PPUSH
17937: CALL_OW 450
17941: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
17942: LD_ADDR_VAR 0 3
17946: PUSH
17947: LD_VAR 0 4
17951: PPUSH
17952: LD_INT 1
17954: PPUSH
17955: CALL_OW 275
17959: PUSH
17960: LD_VAR 0 5
17964: PUSH
17965: LD_INT 1
17967: ARRAY
17968: GREATEREQUAL
17969: PUSH
17970: LD_VAR 0 4
17974: PPUSH
17975: LD_INT 2
17977: PPUSH
17978: CALL_OW 275
17982: PUSH
17983: LD_VAR 0 5
17987: PUSH
17988: LD_INT 2
17990: ARRAY
17991: GREATEREQUAL
17992: AND
17993: PUSH
17994: LD_VAR 0 4
17998: PPUSH
17999: LD_INT 3
18001: PPUSH
18002: CALL_OW 275
18006: PUSH
18007: LD_VAR 0 5
18011: PUSH
18012: LD_INT 3
18014: ARRAY
18015: GREATEREQUAL
18016: AND
18017: ST_TO_ADDR
// end ;
18018: LD_VAR 0 3
18022: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes ; begin
18023: LD_INT 0
18025: PPUSH
18026: PPUSH
18027: PPUSH
18028: PPUSH
18029: PPUSH
18030: PPUSH
18031: PPUSH
// if not base or not btype or not x or not y then
18032: LD_VAR 0 1
18036: NOT
18037: PUSH
18038: LD_VAR 0 2
18042: NOT
18043: OR
18044: PUSH
18045: LD_VAR 0 3
18049: NOT
18050: OR
18051: PUSH
18052: LD_VAR 0 4
18056: NOT
18057: OR
18058: IFFALSE 18062
// exit ;
18060: GO 18334
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
18062: LD_ADDR_VAR 0 12
18066: PUSH
18067: LD_VAR 0 2
18071: PPUSH
18072: LD_VAR 0 3
18076: PPUSH
18077: LD_VAR 0 4
18081: PPUSH
18082: LD_VAR 0 5
18086: PPUSH
18087: LD_VAR 0 1
18091: PUSH
18092: LD_INT 1
18094: ARRAY
18095: PPUSH
18096: CALL_OW 248
18100: PPUSH
18101: LD_INT 0
18103: PPUSH
18104: CALL 19117 0 6
18108: ST_TO_ADDR
// if not hexes then
18109: LD_VAR 0 12
18113: NOT
18114: IFFALSE 18118
// exit ;
18116: GO 18334
// for i = 1 to hexes do
18118: LD_ADDR_VAR 0 7
18122: PUSH
18123: DOUBLE
18124: LD_INT 1
18126: DEC
18127: ST_TO_ADDR
18128: LD_VAR 0 12
18132: PUSH
18133: FOR_TO
18134: IFFALSE 18332
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18136: LD_ADDR_VAR 0 11
18140: PUSH
18141: LD_VAR 0 12
18145: PUSH
18146: LD_VAR 0 7
18150: ARRAY
18151: PUSH
18152: LD_INT 1
18154: ARRAY
18155: PPUSH
18156: LD_VAR 0 12
18160: PUSH
18161: LD_VAR 0 7
18165: ARRAY
18166: PUSH
18167: LD_INT 2
18169: ARRAY
18170: PPUSH
18171: CALL_OW 428
18175: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
18176: LD_VAR 0 11
18180: NOT
18181: PUSH
18182: LD_VAR 0 11
18186: PPUSH
18187: CALL_OW 247
18191: PUSH
18192: LD_INT 3
18194: EQUAL
18195: OR
18196: IFFALSE 18200
// continue ;
18198: GO 18133
// for j = 0 to 5 do
18200: LD_ADDR_VAR 0 8
18204: PUSH
18205: DOUBLE
18206: LD_INT 0
18208: DEC
18209: ST_TO_ADDR
18210: LD_INT 5
18212: PUSH
18213: FOR_TO
18214: IFFALSE 18328
// begin _x := ShiftX ( GetX ( tmp ) , j , 3 ) ;
18216: LD_ADDR_VAR 0 9
18220: PUSH
18221: LD_VAR 0 11
18225: PPUSH
18226: CALL_OW 250
18230: PPUSH
18231: LD_VAR 0 8
18235: PPUSH
18236: LD_INT 3
18238: PPUSH
18239: CALL_OW 272
18243: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 3 ) ;
18244: LD_ADDR_VAR 0 10
18248: PUSH
18249: LD_VAR 0 11
18253: PPUSH
18254: CALL_OW 251
18258: PPUSH
18259: LD_VAR 0 8
18263: PPUSH
18264: LD_INT 3
18266: PPUSH
18267: CALL_OW 273
18271: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
18272: LD_VAR 0 9
18276: PPUSH
18277: LD_VAR 0 10
18281: PPUSH
18282: CALL_OW 488
18286: PUSH
18287: LD_VAR 0 9
18291: PPUSH
18292: LD_VAR 0 10
18296: PPUSH
18297: CALL_OW 428
18301: NOT
18302: AND
18303: IFFALSE 18326
// begin ComMoveXY ( tmp , _x , _y ) ;
18305: LD_VAR 0 11
18309: PPUSH
18310: LD_VAR 0 9
18314: PPUSH
18315: LD_VAR 0 10
18319: PPUSH
18320: CALL_OW 111
// break ;
18324: GO 18328
// end ; end ;
18326: GO 18213
18328: POP
18329: POP
// end ;
18330: GO 18133
18332: POP
18333: POP
// end ;
18334: LD_VAR 0 6
18338: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
18339: LD_INT 0
18341: PPUSH
18342: PPUSH
18343: PPUSH
18344: PPUSH
18345: PPUSH
18346: PPUSH
18347: PPUSH
18348: PPUSH
18349: PPUSH
// result := false ;
18350: LD_ADDR_VAR 0 6
18354: PUSH
18355: LD_INT 0
18357: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
18358: LD_VAR 0 1
18362: NOT
18363: PUSH
18364: LD_VAR 0 1
18368: PPUSH
18369: CALL_OW 266
18373: PUSH
18374: LD_INT 0
18376: PUSH
18377: LD_INT 1
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: IN
18384: NOT
18385: OR
18386: PUSH
18387: LD_VAR 0 2
18391: NOT
18392: OR
18393: PUSH
18394: LD_VAR 0 5
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: LD_INT 1
18404: PUSH
18405: LD_INT 2
18407: PUSH
18408: LD_INT 3
18410: PUSH
18411: LD_INT 4
18413: PUSH
18414: LD_INT 5
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: IN
18425: NOT
18426: OR
18427: PUSH
18428: LD_VAR 0 3
18432: PPUSH
18433: LD_VAR 0 4
18437: PPUSH
18438: CALL_OW 488
18442: NOT
18443: OR
18444: IFFALSE 18448
// exit ;
18446: GO 19112
// pom := GetBase ( bdepot ) ;
18448: LD_ADDR_VAR 0 9
18452: PUSH
18453: LD_VAR 0 1
18457: PPUSH
18458: CALL_OW 274
18462: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
18463: LD_ADDR_VAR 0 10
18467: PUSH
18468: LD_VAR 0 2
18472: PPUSH
18473: LD_VAR 0 1
18477: PPUSH
18478: CALL_OW 248
18482: PPUSH
18483: CALL_OW 450
18487: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
18488: LD_VAR 0 9
18492: PPUSH
18493: LD_INT 1
18495: PPUSH
18496: CALL_OW 275
18500: PUSH
18501: LD_VAR 0 10
18505: PUSH
18506: LD_INT 1
18508: ARRAY
18509: GREATEREQUAL
18510: PUSH
18511: LD_VAR 0 9
18515: PPUSH
18516: LD_INT 2
18518: PPUSH
18519: CALL_OW 275
18523: PUSH
18524: LD_VAR 0 10
18528: PUSH
18529: LD_INT 2
18531: ARRAY
18532: GREATEREQUAL
18533: AND
18534: PUSH
18535: LD_VAR 0 9
18539: PPUSH
18540: LD_INT 3
18542: PPUSH
18543: CALL_OW 275
18547: PUSH
18548: LD_VAR 0 10
18552: PUSH
18553: LD_INT 3
18555: ARRAY
18556: GREATEREQUAL
18557: AND
18558: NOT
18559: IFFALSE 18563
// exit ;
18561: GO 19112
// if GetBType ( bdepot ) = b_depot then
18563: LD_VAR 0 1
18567: PPUSH
18568: CALL_OW 266
18572: PUSH
18573: LD_INT 0
18575: EQUAL
18576: IFFALSE 18588
// dist := 28 else
18578: LD_ADDR_VAR 0 13
18582: PUSH
18583: LD_INT 28
18585: ST_TO_ADDR
18586: GO 18596
// dist := 36 ;
18588: LD_ADDR_VAR 0 13
18592: PUSH
18593: LD_INT 36
18595: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
18596: LD_VAR 0 1
18600: PPUSH
18601: LD_VAR 0 3
18605: PPUSH
18606: LD_VAR 0 4
18610: PPUSH
18611: CALL_OW 297
18615: PUSH
18616: LD_VAR 0 13
18620: GREATER
18621: IFFALSE 18625
// exit ;
18623: GO 19112
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
18625: LD_ADDR_VAR 0 11
18629: PUSH
18630: LD_VAR 0 2
18634: PPUSH
18635: LD_VAR 0 3
18639: PPUSH
18640: LD_VAR 0 4
18644: PPUSH
18645: LD_VAR 0 5
18649: PPUSH
18650: LD_VAR 0 1
18654: PPUSH
18655: CALL_OW 248
18659: PPUSH
18660: LD_INT 0
18662: PPUSH
18663: CALL 19117 0 6
18667: ST_TO_ADDR
// if not hexes then
18668: LD_VAR 0 11
18672: NOT
18673: IFFALSE 18677
// exit ;
18675: GO 19112
// hex := GetHexInfo ( x , y ) ;
18677: LD_ADDR_VAR 0 14
18681: PUSH
18682: LD_VAR 0 3
18686: PPUSH
18687: LD_VAR 0 4
18691: PPUSH
18692: CALL_OW 546
18696: ST_TO_ADDR
// if hex [ 1 ] then
18697: LD_VAR 0 14
18701: PUSH
18702: LD_INT 1
18704: ARRAY
18705: IFFALSE 18709
// exit ;
18707: GO 19112
// height := hex [ 2 ] ;
18709: LD_ADDR_VAR 0 12
18713: PUSH
18714: LD_VAR 0 14
18718: PUSH
18719: LD_INT 2
18721: ARRAY
18722: ST_TO_ADDR
// for i = 1 to hexes do
18723: LD_ADDR_VAR 0 7
18727: PUSH
18728: DOUBLE
18729: LD_INT 1
18731: DEC
18732: ST_TO_ADDR
18733: LD_VAR 0 11
18737: PUSH
18738: FOR_TO
18739: IFFALSE 19067
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18741: LD_VAR 0 11
18745: PUSH
18746: LD_VAR 0 7
18750: ARRAY
18751: PUSH
18752: LD_INT 1
18754: ARRAY
18755: PPUSH
18756: LD_VAR 0 11
18760: PUSH
18761: LD_VAR 0 7
18765: ARRAY
18766: PUSH
18767: LD_INT 2
18769: ARRAY
18770: PPUSH
18771: CALL_OW 488
18775: NOT
18776: IFFALSE 18780
// continue ;
18778: GO 18738
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18780: LD_ADDR_VAR 0 8
18784: PUSH
18785: LD_VAR 0 11
18789: PUSH
18790: LD_VAR 0 7
18794: ARRAY
18795: PUSH
18796: LD_INT 1
18798: ARRAY
18799: PPUSH
18800: LD_VAR 0 11
18804: PUSH
18805: LD_VAR 0 7
18809: ARRAY
18810: PUSH
18811: LD_INT 2
18813: ARRAY
18814: PPUSH
18815: CALL_OW 546
18819: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18820: LD_VAR 0 8
18824: PUSH
18825: LD_INT 1
18827: ARRAY
18828: PUSH
18829: LD_VAR 0 8
18833: PUSH
18834: LD_INT 2
18836: ARRAY
18837: PUSH
18838: LD_VAR 0 12
18842: PUSH
18843: LD_INT 2
18845: PLUS
18846: GREATER
18847: OR
18848: PUSH
18849: LD_VAR 0 8
18853: PUSH
18854: LD_INT 2
18856: ARRAY
18857: PUSH
18858: LD_VAR 0 12
18862: PUSH
18863: LD_INT 2
18865: MINUS
18866: LESS
18867: OR
18868: PUSH
18869: LD_VAR 0 8
18873: PUSH
18874: LD_INT 3
18876: ARRAY
18877: PUSH
18878: LD_INT 0
18880: PUSH
18881: LD_INT 8
18883: PUSH
18884: LD_INT 9
18886: PUSH
18887: LD_INT 10
18889: PUSH
18890: LD_INT 11
18892: PUSH
18893: LD_INT 12
18895: PUSH
18896: LD_INT 13
18898: PUSH
18899: LD_INT 16
18901: PUSH
18902: LD_INT 17
18904: PUSH
18905: LD_INT 18
18907: PUSH
18908: LD_INT 19
18910: PUSH
18911: LD_INT 20
18913: PUSH
18914: LD_INT 21
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: IN
18932: NOT
18933: OR
18934: PUSH
18935: LD_VAR 0 8
18939: PUSH
18940: LD_INT 5
18942: ARRAY
18943: NOT
18944: OR
18945: PUSH
18946: LD_VAR 0 8
18950: PUSH
18951: LD_INT 6
18953: ARRAY
18954: PUSH
18955: LD_INT 1
18957: PUSH
18958: LD_INT 2
18960: PUSH
18961: LD_INT 7
18963: PUSH
18964: LD_INT 9
18966: PUSH
18967: LD_INT 10
18969: PUSH
18970: LD_INT 11
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: IN
18981: NOT
18982: OR
18983: PUSH
18984: LD_VAR 0 11
18988: PUSH
18989: LD_VAR 0 7
18993: ARRAY
18994: PUSH
18995: LD_INT 1
18997: ARRAY
18998: PPUSH
18999: LD_VAR 0 11
19003: PUSH
19004: LD_VAR 0 7
19008: ARRAY
19009: PUSH
19010: LD_INT 2
19012: ARRAY
19013: PPUSH
19014: CALL_OW 428
19018: PUSH
19019: LD_INT 0
19021: GREATER
19022: OR
19023: PUSH
19024: LD_VAR 0 11
19028: PUSH
19029: LD_VAR 0 7
19033: ARRAY
19034: PUSH
19035: LD_INT 1
19037: ARRAY
19038: PPUSH
19039: LD_VAR 0 11
19043: PUSH
19044: LD_VAR 0 7
19048: ARRAY
19049: PUSH
19050: LD_INT 2
19052: ARRAY
19053: PPUSH
19054: CALL_OW 351
19058: OR
19059: IFFALSE 19065
// exit ;
19061: POP
19062: POP
19063: GO 19112
// end ;
19065: GO 18738
19067: POP
19068: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
19069: LD_VAR 0 1
19073: PPUSH
19074: CALL_OW 255
19078: PPUSH
19079: LD_VAR 0 3
19083: PPUSH
19084: LD_VAR 0 4
19088: PPUSH
19089: LD_INT 20
19091: PPUSH
19092: CALL 12323 0 4
19096: PUSH
19097: LD_INT 4
19099: ARRAY
19100: IFFALSE 19104
// exit ;
19102: GO 19112
// result := true ;
19104: LD_ADDR_VAR 0 6
19108: PUSH
19109: LD_INT 1
19111: ST_TO_ADDR
// end ;
19112: LD_VAR 0 6
19116: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
19117: LD_INT 0
19119: PPUSH
19120: PPUSH
19121: PPUSH
19122: PPUSH
19123: PPUSH
19124: PPUSH
19125: PPUSH
19126: PPUSH
19127: PPUSH
19128: PPUSH
19129: PPUSH
19130: PPUSH
19131: PPUSH
19132: PPUSH
19133: PPUSH
19134: PPUSH
19135: PPUSH
19136: PPUSH
19137: PPUSH
19138: PPUSH
19139: PPUSH
19140: PPUSH
19141: PPUSH
19142: PPUSH
19143: PPUSH
19144: PPUSH
19145: PPUSH
19146: PPUSH
19147: PPUSH
19148: PPUSH
19149: PPUSH
19150: PPUSH
19151: PPUSH
19152: PPUSH
19153: PPUSH
19154: PPUSH
19155: PPUSH
19156: PPUSH
19157: PPUSH
19158: PPUSH
19159: PPUSH
19160: PPUSH
19161: PPUSH
19162: PPUSH
19163: PPUSH
19164: PPUSH
19165: PPUSH
19166: PPUSH
19167: PPUSH
19168: PPUSH
19169: PPUSH
19170: PPUSH
19171: PPUSH
19172: PPUSH
19173: PPUSH
19174: PPUSH
19175: PPUSH
19176: PPUSH
// result = [ ] ;
19177: LD_ADDR_VAR 0 7
19181: PUSH
19182: EMPTY
19183: ST_TO_ADDR
// temp_list = [ ] ;
19184: LD_ADDR_VAR 0 9
19188: PUSH
19189: EMPTY
19190: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
19191: LD_VAR 0 4
19195: PUSH
19196: LD_INT 0
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: LD_INT 3
19207: PUSH
19208: LD_INT 4
19210: PUSH
19211: LD_INT 5
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: IN
19222: NOT
19223: PUSH
19224: LD_VAR 0 1
19228: PUSH
19229: LD_INT 0
19231: PUSH
19232: LD_INT 1
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: IN
19239: PUSH
19240: LD_VAR 0 5
19244: PUSH
19245: LD_INT 1
19247: PUSH
19248: LD_INT 2
19250: PUSH
19251: LD_INT 3
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: LIST
19258: IN
19259: NOT
19260: AND
19261: OR
19262: IFFALSE 19266
// exit ;
19264: GO 37651
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
19266: LD_VAR 0 1
19270: PUSH
19271: LD_INT 6
19273: PUSH
19274: LD_INT 7
19276: PUSH
19277: LD_INT 8
19279: PUSH
19280: LD_INT 13
19282: PUSH
19283: LD_INT 12
19285: PUSH
19286: LD_INT 15
19288: PUSH
19289: LD_INT 11
19291: PUSH
19292: LD_INT 14
19294: PUSH
19295: LD_INT 10
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: IN
19309: IFFALSE 19319
// btype = b_lab ;
19311: LD_ADDR_VAR 0 1
19315: PUSH
19316: LD_INT 6
19318: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
19319: LD_VAR 0 6
19323: PUSH
19324: LD_INT 0
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: LD_INT 2
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: LIST
19337: IN
19338: NOT
19339: PUSH
19340: LD_VAR 0 1
19344: PUSH
19345: LD_INT 0
19347: PUSH
19348: LD_INT 1
19350: PUSH
19351: LD_INT 2
19353: PUSH
19354: LD_INT 3
19356: PUSH
19357: LD_INT 6
19359: PUSH
19360: LD_INT 36
19362: PUSH
19363: LD_INT 4
19365: PUSH
19366: LD_INT 5
19368: PUSH
19369: LD_INT 31
19371: PUSH
19372: LD_INT 32
19374: PUSH
19375: LD_INT 33
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: IN
19391: NOT
19392: PUSH
19393: LD_VAR 0 6
19397: PUSH
19398: LD_INT 1
19400: EQUAL
19401: AND
19402: OR
19403: PUSH
19404: LD_VAR 0 1
19408: PUSH
19409: LD_INT 2
19411: PUSH
19412: LD_INT 3
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: IN
19419: NOT
19420: PUSH
19421: LD_VAR 0 6
19425: PUSH
19426: LD_INT 2
19428: EQUAL
19429: AND
19430: OR
19431: IFFALSE 19441
// mode = 0 ;
19433: LD_ADDR_VAR 0 6
19437: PUSH
19438: LD_INT 0
19440: ST_TO_ADDR
// case mode of 0 :
19441: LD_VAR 0 6
19445: PUSH
19446: LD_INT 0
19448: DOUBLE
19449: EQUAL
19450: IFTRUE 19454
19452: GO 30907
19454: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
19455: LD_ADDR_VAR 0 11
19459: PUSH
19460: LD_INT 0
19462: PUSH
19463: LD_INT 0
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 0
19472: PUSH
19473: LD_INT 1
19475: NEG
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: LD_INT 0
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 0
19503: PUSH
19504: LD_INT 1
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: NEG
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 1
19524: NEG
19525: PUSH
19526: LD_INT 1
19528: NEG
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 1
19536: NEG
19537: PUSH
19538: LD_INT 2
19540: NEG
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: LD_INT 2
19551: NEG
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 1
19559: PUSH
19560: LD_INT 1
19562: NEG
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: LD_INT 2
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 0
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 1
19590: NEG
19591: PUSH
19592: LD_INT 1
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: LD_INT 3
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 0
19611: PUSH
19612: LD_INT 3
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 1
19621: NEG
19622: PUSH
19623: LD_INT 2
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19648: LD_ADDR_VAR 0 12
19652: PUSH
19653: LD_INT 0
19655: PUSH
19656: LD_INT 0
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 0
19665: PUSH
19666: LD_INT 1
19668: NEG
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 1
19676: PUSH
19677: LD_INT 0
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 1
19686: PUSH
19687: LD_INT 1
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 0
19696: PUSH
19697: LD_INT 1
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 1
19706: NEG
19707: PUSH
19708: LD_INT 0
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: LD_INT 1
19721: NEG
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 1
19729: PUSH
19730: LD_INT 1
19732: NEG
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 2
19740: PUSH
19741: LD_INT 0
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 2
19750: PUSH
19751: LD_INT 1
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 1
19760: NEG
19761: PUSH
19762: LD_INT 1
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 2
19771: NEG
19772: PUSH
19773: LD_INT 0
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 2
19782: NEG
19783: PUSH
19784: LD_INT 1
19786: NEG
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 2
19794: NEG
19795: PUSH
19796: LD_INT 1
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 3
19805: NEG
19806: PUSH
19807: LD_INT 0
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 3
19816: NEG
19817: PUSH
19818: LD_INT 1
19820: NEG
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19844: LD_ADDR_VAR 0 13
19848: PUSH
19849: LD_INT 0
19851: PUSH
19852: LD_INT 0
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 0
19861: PUSH
19862: LD_INT 1
19864: NEG
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 1
19872: PUSH
19873: LD_INT 0
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 1
19882: PUSH
19883: LD_INT 1
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 0
19892: PUSH
19893: LD_INT 1
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 1
19902: NEG
19903: PUSH
19904: LD_INT 0
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 1
19913: NEG
19914: PUSH
19915: LD_INT 1
19917: NEG
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 1
19925: NEG
19926: PUSH
19927: LD_INT 2
19929: NEG
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 2
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 2
19947: PUSH
19948: LD_INT 2
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 1
19957: PUSH
19958: LD_INT 2
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 2
19967: NEG
19968: PUSH
19969: LD_INT 1
19971: NEG
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 2
19979: NEG
19980: PUSH
19981: LD_INT 2
19983: NEG
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 2
19991: NEG
19992: PUSH
19993: LD_INT 3
19995: NEG
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 3
20003: NEG
20004: PUSH
20005: LD_INT 2
20007: NEG
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 3
20015: NEG
20016: PUSH
20017: LD_INT 3
20019: NEG
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
20043: LD_ADDR_VAR 0 14
20047: PUSH
20048: LD_INT 0
20050: PUSH
20051: LD_INT 0
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 0
20060: PUSH
20061: LD_INT 1
20063: NEG
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 1
20071: PUSH
20072: LD_INT 0
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: LD_INT 1
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 0
20091: PUSH
20092: LD_INT 1
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 1
20101: NEG
20102: PUSH
20103: LD_INT 0
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 1
20112: NEG
20113: PUSH
20114: LD_INT 1
20116: NEG
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 1
20124: NEG
20125: PUSH
20126: LD_INT 2
20128: NEG
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 0
20136: PUSH
20137: LD_INT 2
20139: NEG
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 1
20147: PUSH
20148: LD_INT 1
20150: NEG
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 1
20158: PUSH
20159: LD_INT 2
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 0
20168: PUSH
20169: LD_INT 2
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 1
20178: NEG
20179: PUSH
20180: LD_INT 1
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 1
20189: NEG
20190: PUSH
20191: LD_INT 3
20193: NEG
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 0
20201: PUSH
20202: LD_INT 3
20204: NEG
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 1
20212: PUSH
20213: LD_INT 2
20215: NEG
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
20239: LD_ADDR_VAR 0 15
20243: PUSH
20244: LD_INT 0
20246: PUSH
20247: LD_INT 0
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: LD_INT 1
20259: NEG
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 0
20287: PUSH
20288: LD_INT 1
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 1
20297: NEG
20298: PUSH
20299: LD_INT 0
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: LD_INT 1
20312: NEG
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 1
20320: PUSH
20321: LD_INT 1
20323: NEG
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 2
20331: PUSH
20332: LD_INT 0
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 2
20341: PUSH
20342: LD_INT 1
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 1
20351: NEG
20352: PUSH
20353: LD_INT 1
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 2
20362: NEG
20363: PUSH
20364: LD_INT 0
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 2
20373: NEG
20374: PUSH
20375: LD_INT 1
20377: NEG
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 2
20385: PUSH
20386: LD_INT 1
20388: NEG
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 3
20396: PUSH
20397: LD_INT 0
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 3
20406: PUSH
20407: LD_INT 1
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
20432: LD_ADDR_VAR 0 16
20436: PUSH
20437: LD_INT 0
20439: PUSH
20440: LD_INT 0
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: LD_INT 1
20452: NEG
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 1
20460: PUSH
20461: LD_INT 0
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 1
20470: PUSH
20471: LD_INT 1
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 0
20480: PUSH
20481: LD_INT 1
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 1
20490: NEG
20491: PUSH
20492: LD_INT 0
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 1
20501: NEG
20502: PUSH
20503: LD_INT 1
20505: NEG
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 1
20513: NEG
20514: PUSH
20515: LD_INT 2
20517: NEG
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 2
20525: PUSH
20526: LD_INT 1
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 2
20535: PUSH
20536: LD_INT 2
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: LD_INT 2
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 2
20555: NEG
20556: PUSH
20557: LD_INT 1
20559: NEG
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 2
20567: NEG
20568: PUSH
20569: LD_INT 2
20571: NEG
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 3
20579: PUSH
20580: LD_INT 2
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 3
20589: PUSH
20590: LD_INT 3
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 2
20599: PUSH
20600: LD_INT 3
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20625: LD_ADDR_VAR 0 17
20629: PUSH
20630: LD_INT 0
20632: PUSH
20633: LD_INT 0
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 0
20642: PUSH
20643: LD_INT 1
20645: NEG
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 1
20653: PUSH
20654: LD_INT 0
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 1
20663: PUSH
20664: LD_INT 1
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 0
20673: PUSH
20674: LD_INT 1
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 1
20683: NEG
20684: PUSH
20685: LD_INT 0
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 1
20694: NEG
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 1
20706: NEG
20707: PUSH
20708: LD_INT 2
20710: NEG
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 0
20718: PUSH
20719: LD_INT 2
20721: NEG
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: LD_INT 1
20732: NEG
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 2
20740: PUSH
20741: LD_INT 0
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 2
20750: PUSH
20751: LD_INT 1
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 2
20760: PUSH
20761: LD_INT 2
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 1
20770: PUSH
20771: LD_INT 2
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 0
20780: PUSH
20781: LD_INT 2
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 1
20790: NEG
20791: PUSH
20792: LD_INT 1
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 2
20801: NEG
20802: PUSH
20803: LD_INT 0
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 2
20812: NEG
20813: PUSH
20814: LD_INT 1
20816: NEG
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 2
20824: NEG
20825: PUSH
20826: LD_INT 2
20828: NEG
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20855: LD_ADDR_VAR 0 18
20859: PUSH
20860: LD_INT 0
20862: PUSH
20863: LD_INT 0
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 0
20872: PUSH
20873: LD_INT 1
20875: NEG
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 1
20883: PUSH
20884: LD_INT 0
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: LD_INT 1
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 0
20903: PUSH
20904: LD_INT 1
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 1
20913: NEG
20914: PUSH
20915: LD_INT 0
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 1
20924: NEG
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: LD_INT 2
20940: NEG
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: LD_INT 2
20951: NEG
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: LD_INT 1
20962: NEG
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 2
20970: PUSH
20971: LD_INT 0
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 1
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 2
20990: PUSH
20991: LD_INT 2
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 1
21000: PUSH
21001: LD_INT 2
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 0
21010: PUSH
21011: LD_INT 2
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 1
21020: NEG
21021: PUSH
21022: LD_INT 1
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: LD_INT 2
21031: NEG
21032: PUSH
21033: LD_INT 0
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 2
21042: NEG
21043: PUSH
21044: LD_INT 1
21046: NEG
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 2
21054: NEG
21055: PUSH
21056: LD_INT 2
21058: NEG
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21085: LD_ADDR_VAR 0 19
21089: PUSH
21090: LD_INT 0
21092: PUSH
21093: LD_INT 0
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: LD_INT 1
21105: NEG
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 1
21113: PUSH
21114: LD_INT 0
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: LD_INT 1
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 0
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 1
21143: NEG
21144: PUSH
21145: LD_INT 0
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 1
21154: NEG
21155: PUSH
21156: LD_INT 1
21158: NEG
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 1
21166: NEG
21167: PUSH
21168: LD_INT 2
21170: NEG
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: LD_INT 2
21181: NEG
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 1
21189: PUSH
21190: LD_INT 1
21192: NEG
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: LD_INT 1
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: LD_INT 2
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 1
21230: PUSH
21231: LD_INT 2
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 0
21240: PUSH
21241: LD_INT 2
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 1
21250: NEG
21251: PUSH
21252: LD_INT 1
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 2
21261: NEG
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 2
21272: NEG
21273: PUSH
21274: LD_INT 1
21276: NEG
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 2
21284: NEG
21285: PUSH
21286: LD_INT 2
21288: NEG
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21315: LD_ADDR_VAR 0 20
21319: PUSH
21320: LD_INT 0
21322: PUSH
21323: LD_INT 0
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 0
21332: PUSH
21333: LD_INT 1
21335: NEG
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 1
21343: PUSH
21344: LD_INT 0
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: LD_INT 1
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: LD_INT 1
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 1
21373: NEG
21374: PUSH
21375: LD_INT 0
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 1
21384: NEG
21385: PUSH
21386: LD_INT 1
21388: NEG
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 1
21396: NEG
21397: PUSH
21398: LD_INT 2
21400: NEG
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 0
21408: PUSH
21409: LD_INT 2
21411: NEG
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 1
21419: PUSH
21420: LD_INT 1
21422: NEG
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 2
21430: PUSH
21431: LD_INT 0
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 2
21440: PUSH
21441: LD_INT 1
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 2
21450: PUSH
21451: LD_INT 2
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: LD_INT 2
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 0
21470: PUSH
21471: LD_INT 2
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 1
21480: NEG
21481: PUSH
21482: LD_INT 1
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 2
21491: NEG
21492: PUSH
21493: LD_INT 0
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 2
21502: NEG
21503: PUSH
21504: LD_INT 1
21506: NEG
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 2
21514: NEG
21515: PUSH
21516: LD_INT 2
21518: NEG
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21545: LD_ADDR_VAR 0 21
21549: PUSH
21550: LD_INT 0
21552: PUSH
21553: LD_INT 0
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 0
21562: PUSH
21563: LD_INT 1
21565: NEG
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 1
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: LD_INT 1
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: LD_INT 1
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 1
21603: NEG
21604: PUSH
21605: LD_INT 0
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 1
21614: NEG
21615: PUSH
21616: LD_INT 1
21618: NEG
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 1
21626: NEG
21627: PUSH
21628: LD_INT 2
21630: NEG
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: LD_INT 2
21641: NEG
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: LD_INT 1
21652: NEG
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 2
21660: PUSH
21661: LD_INT 0
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: LD_INT 1
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 2
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: PUSH
21691: LD_INT 2
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 0
21700: PUSH
21701: LD_INT 2
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 1
21710: NEG
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 2
21721: NEG
21722: PUSH
21723: LD_INT 0
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 2
21732: NEG
21733: PUSH
21734: LD_INT 1
21736: NEG
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 2
21744: NEG
21745: PUSH
21746: LD_INT 2
21748: NEG
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21775: LD_ADDR_VAR 0 22
21779: PUSH
21780: LD_INT 0
21782: PUSH
21783: LD_INT 0
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 0
21792: PUSH
21793: LD_INT 1
21795: NEG
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 1
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 1
21813: PUSH
21814: LD_INT 1
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 0
21823: PUSH
21824: LD_INT 1
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 1
21833: NEG
21834: PUSH
21835: LD_INT 0
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 1
21844: NEG
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 1
21856: NEG
21857: PUSH
21858: LD_INT 2
21860: NEG
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 0
21868: PUSH
21869: LD_INT 2
21871: NEG
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 1
21879: PUSH
21880: LD_INT 1
21882: NEG
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 2
21890: PUSH
21891: LD_INT 0
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 2
21900: PUSH
21901: LD_INT 1
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 2
21910: PUSH
21911: LD_INT 2
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 1
21920: PUSH
21921: LD_INT 2
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: LD_INT 2
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 1
21940: NEG
21941: PUSH
21942: LD_INT 1
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 2
21951: NEG
21952: PUSH
21953: LD_INT 0
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 2
21962: NEG
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 2
21974: NEG
21975: PUSH
21976: LD_INT 2
21978: NEG
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
22005: LD_ADDR_VAR 0 23
22009: PUSH
22010: LD_INT 0
22012: PUSH
22013: LD_INT 0
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 0
22022: PUSH
22023: LD_INT 1
22025: NEG
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 1
22033: PUSH
22034: LD_INT 0
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 1
22043: PUSH
22044: LD_INT 1
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 0
22053: PUSH
22054: LD_INT 1
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 1
22063: NEG
22064: PUSH
22065: LD_INT 0
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 1
22074: NEG
22075: PUSH
22076: LD_INT 1
22078: NEG
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 1
22086: NEG
22087: PUSH
22088: LD_INT 2
22090: NEG
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 0
22098: PUSH
22099: LD_INT 2
22101: NEG
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 1
22109: PUSH
22110: LD_INT 1
22112: NEG
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 2
22120: PUSH
22121: LD_INT 0
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 2
22130: PUSH
22131: LD_INT 1
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 2
22140: PUSH
22141: LD_INT 2
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 1
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 0
22160: PUSH
22161: LD_INT 2
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 1
22170: NEG
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 2
22181: NEG
22182: PUSH
22183: LD_INT 0
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 2
22192: NEG
22193: PUSH
22194: LD_INT 1
22196: NEG
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 2
22204: NEG
22205: PUSH
22206: LD_INT 2
22208: NEG
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 2
22216: NEG
22217: PUSH
22218: LD_INT 3
22220: NEG
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 1
22228: NEG
22229: PUSH
22230: LD_INT 3
22232: NEG
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: LD_INT 2
22243: NEG
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 2
22251: PUSH
22252: LD_INT 1
22254: NEG
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
22285: LD_ADDR_VAR 0 24
22289: PUSH
22290: LD_INT 0
22292: PUSH
22293: LD_INT 0
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 0
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 1
22313: PUSH
22314: LD_INT 0
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 1
22323: PUSH
22324: LD_INT 1
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 0
22333: PUSH
22334: LD_INT 1
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 1
22343: NEG
22344: PUSH
22345: LD_INT 0
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: LD_INT 1
22358: NEG
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 1
22366: NEG
22367: PUSH
22368: LD_INT 2
22370: NEG
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 0
22378: PUSH
22379: LD_INT 2
22381: NEG
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 1
22389: PUSH
22390: LD_INT 1
22392: NEG
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 2
22400: PUSH
22401: LD_INT 0
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 2
22410: PUSH
22411: LD_INT 1
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 2
22420: PUSH
22421: LD_INT 2
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 1
22430: PUSH
22431: LD_INT 2
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 0
22440: PUSH
22441: LD_INT 2
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 1
22450: NEG
22451: PUSH
22452: LD_INT 1
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 2
22461: NEG
22462: PUSH
22463: LD_INT 0
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 2
22472: NEG
22473: PUSH
22474: LD_INT 1
22476: NEG
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 2
22484: NEG
22485: PUSH
22486: LD_INT 2
22488: NEG
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 1
22496: PUSH
22497: LD_INT 2
22499: NEG
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 2
22507: PUSH
22508: LD_INT 1
22510: NEG
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 3
22518: PUSH
22519: LD_INT 1
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 3
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
22561: LD_ADDR_VAR 0 25
22565: PUSH
22566: LD_INT 0
22568: PUSH
22569: LD_INT 0
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 0
22578: PUSH
22579: LD_INT 1
22581: NEG
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 1
22589: PUSH
22590: LD_INT 0
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 0
22609: PUSH
22610: LD_INT 1
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 1
22619: NEG
22620: PUSH
22621: LD_INT 0
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 1
22630: NEG
22631: PUSH
22632: LD_INT 1
22634: NEG
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 1
22642: NEG
22643: PUSH
22644: LD_INT 2
22646: NEG
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 0
22654: PUSH
22655: LD_INT 2
22657: NEG
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 1
22665: PUSH
22666: LD_INT 1
22668: NEG
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 2
22676: PUSH
22677: LD_INT 0
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 2
22686: PUSH
22687: LD_INT 1
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 2
22696: PUSH
22697: LD_INT 2
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 1
22706: PUSH
22707: LD_INT 2
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 0
22716: PUSH
22717: LD_INT 2
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 1
22726: NEG
22727: PUSH
22728: LD_INT 1
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 2
22737: NEG
22738: PUSH
22739: LD_INT 0
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 2
22748: NEG
22749: PUSH
22750: LD_INT 1
22752: NEG
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 2
22760: NEG
22761: PUSH
22762: LD_INT 2
22764: NEG
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 3
22772: PUSH
22773: LD_INT 1
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 3
22782: PUSH
22783: LD_INT 2
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 2
22792: PUSH
22793: LD_INT 3
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 1
22802: PUSH
22803: LD_INT 3
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22835: LD_ADDR_VAR 0 26
22839: PUSH
22840: LD_INT 0
22842: PUSH
22843: LD_INT 0
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 0
22852: PUSH
22853: LD_INT 1
22855: NEG
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 1
22863: PUSH
22864: LD_INT 0
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 1
22873: PUSH
22874: LD_INT 1
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 0
22883: PUSH
22884: LD_INT 1
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 1
22893: NEG
22894: PUSH
22895: LD_INT 0
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 1
22904: NEG
22905: PUSH
22906: LD_INT 1
22908: NEG
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 1
22916: NEG
22917: PUSH
22918: LD_INT 2
22920: NEG
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 0
22928: PUSH
22929: LD_INT 2
22931: NEG
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 1
22939: PUSH
22940: LD_INT 1
22942: NEG
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 2
22950: PUSH
22951: LD_INT 0
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 2
22960: PUSH
22961: LD_INT 1
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 2
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 1
22980: PUSH
22981: LD_INT 2
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 0
22990: PUSH
22991: LD_INT 2
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 1
23000: NEG
23001: PUSH
23002: LD_INT 1
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 2
23011: NEG
23012: PUSH
23013: LD_INT 0
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 2
23022: NEG
23023: PUSH
23024: LD_INT 1
23026: NEG
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 2
23034: NEG
23035: PUSH
23036: LD_INT 2
23038: NEG
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 2
23046: PUSH
23047: LD_INT 3
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 1
23056: PUSH
23057: LD_INT 3
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 1
23066: NEG
23067: PUSH
23068: LD_INT 2
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 2
23077: NEG
23078: PUSH
23079: LD_INT 1
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23111: LD_ADDR_VAR 0 27
23115: PUSH
23116: LD_INT 0
23118: PUSH
23119: LD_INT 0
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 0
23128: PUSH
23129: LD_INT 1
23131: NEG
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 1
23139: PUSH
23140: LD_INT 0
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 1
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 0
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 1
23169: NEG
23170: PUSH
23171: LD_INT 0
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 1
23180: NEG
23181: PUSH
23182: LD_INT 1
23184: NEG
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 1
23192: NEG
23193: PUSH
23194: LD_INT 2
23196: NEG
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: LD_INT 2
23207: NEG
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: LD_INT 1
23218: NEG
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 2
23226: PUSH
23227: LD_INT 0
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 2
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 2
23246: PUSH
23247: LD_INT 2
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: LD_INT 2
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 0
23266: PUSH
23267: LD_INT 2
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 1
23276: NEG
23277: PUSH
23278: LD_INT 1
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 2
23287: NEG
23288: PUSH
23289: LD_INT 0
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 2
23298: NEG
23299: PUSH
23300: LD_INT 1
23302: NEG
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 2
23310: NEG
23311: PUSH
23312: LD_INT 2
23314: NEG
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 1
23322: NEG
23323: PUSH
23324: LD_INT 2
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 2
23333: NEG
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 3
23344: NEG
23345: PUSH
23346: LD_INT 1
23348: NEG
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 3
23356: NEG
23357: PUSH
23358: LD_INT 2
23360: NEG
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23391: LD_ADDR_VAR 0 28
23395: PUSH
23396: LD_INT 0
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 0
23408: PUSH
23409: LD_INT 1
23411: NEG
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 1
23429: PUSH
23430: LD_INT 1
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 0
23439: PUSH
23440: LD_INT 1
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 1
23449: NEG
23450: PUSH
23451: LD_INT 0
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 1
23460: NEG
23461: PUSH
23462: LD_INT 1
23464: NEG
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 1
23472: NEG
23473: PUSH
23474: LD_INT 2
23476: NEG
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 0
23484: PUSH
23485: LD_INT 2
23487: NEG
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 1
23495: PUSH
23496: LD_INT 1
23498: NEG
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 2
23506: PUSH
23507: LD_INT 0
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 2
23516: PUSH
23517: LD_INT 1
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: LD_INT 2
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 1
23536: PUSH
23537: LD_INT 2
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 0
23546: PUSH
23547: LD_INT 2
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 1
23556: NEG
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 2
23567: NEG
23568: PUSH
23569: LD_INT 0
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 2
23578: NEG
23579: PUSH
23580: LD_INT 1
23582: NEG
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 2
23590: NEG
23591: PUSH
23592: LD_INT 2
23594: NEG
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 2
23602: NEG
23603: PUSH
23604: LD_INT 3
23606: NEG
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 1
23614: NEG
23615: PUSH
23616: LD_INT 3
23618: NEG
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 3
23626: NEG
23627: PUSH
23628: LD_INT 1
23630: NEG
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 3
23638: NEG
23639: PUSH
23640: LD_INT 2
23642: NEG
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23673: LD_ADDR_VAR 0 29
23677: PUSH
23678: LD_INT 0
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: LD_INT 1
23693: NEG
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 1
23701: PUSH
23702: LD_INT 0
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: LD_INT 1
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 1
23742: NEG
23743: PUSH
23744: LD_INT 1
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 1
23754: NEG
23755: PUSH
23756: LD_INT 2
23758: NEG
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: LD_INT 2
23769: NEG
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 1
23777: PUSH
23778: LD_INT 1
23780: NEG
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: LD_INT 0
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 2
23798: PUSH
23799: LD_INT 1
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 1
23808: PUSH
23809: LD_INT 2
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 0
23818: PUSH
23819: LD_INT 2
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 1
23828: NEG
23829: PUSH
23830: LD_INT 1
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 2
23839: NEG
23840: PUSH
23841: LD_INT 1
23843: NEG
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 2
23851: NEG
23852: PUSH
23853: LD_INT 2
23855: NEG
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 2
23863: NEG
23864: PUSH
23865: LD_INT 3
23867: NEG
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 2
23875: PUSH
23876: LD_INT 1
23878: NEG
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 3
23886: PUSH
23887: LD_INT 1
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: LD_INT 3
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 1
23906: NEG
23907: PUSH
23908: LD_INT 2
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 3
23917: NEG
23918: PUSH
23919: LD_INT 2
23921: NEG
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23952: LD_ADDR_VAR 0 30
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 0
23969: PUSH
23970: LD_INT 1
23972: NEG
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 1
23980: PUSH
23981: LD_INT 0
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 1
23990: PUSH
23991: LD_INT 1
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: NEG
24011: PUSH
24012: LD_INT 0
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: NEG
24022: PUSH
24023: LD_INT 1
24025: NEG
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 1
24033: NEG
24034: PUSH
24035: LD_INT 2
24037: NEG
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: LD_INT 2
24048: NEG
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 1
24056: PUSH
24057: LD_INT 1
24059: NEG
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 2
24067: PUSH
24068: LD_INT 0
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 2
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: LD_INT 2
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: LD_INT 2
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 1
24107: NEG
24108: PUSH
24109: LD_INT 1
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 2
24118: NEG
24119: PUSH
24120: LD_INT 0
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 2
24129: NEG
24130: PUSH
24131: LD_INT 1
24133: NEG
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 1
24141: NEG
24142: PUSH
24143: LD_INT 3
24145: NEG
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 1
24153: PUSH
24154: LD_INT 2
24156: NEG
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 3
24164: PUSH
24165: LD_INT 2
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 2
24174: PUSH
24175: LD_INT 3
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 2
24184: NEG
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 3
24195: NEG
24196: PUSH
24197: LD_INT 1
24199: NEG
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24230: LD_ADDR_VAR 0 31
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: LD_INT 0
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 0
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: LD_INT 0
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: LD_INT 1
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 0
24278: PUSH
24279: LD_INT 1
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 1
24288: NEG
24289: PUSH
24290: LD_INT 0
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 1
24299: NEG
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 1
24311: NEG
24312: PUSH
24313: LD_INT 2
24315: NEG
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: LD_INT 1
24326: NEG
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 2
24334: PUSH
24335: LD_INT 0
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 2
24344: PUSH
24345: LD_INT 1
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 2
24354: PUSH
24355: LD_INT 2
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: LD_INT 2
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: LD_INT 2
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: NEG
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 2
24395: NEG
24396: PUSH
24397: LD_INT 1
24399: NEG
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 2
24407: NEG
24408: PUSH
24409: LD_INT 2
24411: NEG
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 2
24419: NEG
24420: PUSH
24421: LD_INT 3
24423: NEG
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 2
24431: PUSH
24432: LD_INT 1
24434: NEG
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 3
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: LD_INT 3
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 1
24462: NEG
24463: PUSH
24464: LD_INT 2
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 3
24473: NEG
24474: PUSH
24475: LD_INT 2
24477: NEG
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24508: LD_ADDR_VAR 0 32
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: LD_INT 0
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: LD_INT 1
24528: NEG
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 1
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 0
24556: PUSH
24557: LD_INT 1
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 1
24566: NEG
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: NEG
24578: PUSH
24579: LD_INT 1
24581: NEG
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 1
24589: NEG
24590: PUSH
24591: LD_INT 2
24593: NEG
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 2
24604: NEG
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: LD_INT 1
24615: NEG
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 2
24623: PUSH
24624: LD_INT 1
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 2
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 1
24643: PUSH
24644: LD_INT 2
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 0
24653: PUSH
24654: LD_INT 2
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 1
24663: NEG
24664: PUSH
24665: LD_INT 1
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 2
24674: NEG
24675: PUSH
24676: LD_INT 0
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 2
24685: NEG
24686: PUSH
24687: LD_INT 1
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 1
24697: NEG
24698: PUSH
24699: LD_INT 3
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 1
24709: PUSH
24710: LD_INT 2
24712: NEG
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 3
24720: PUSH
24721: LD_INT 2
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 2
24730: PUSH
24731: LD_INT 3
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 2
24740: NEG
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 3
24751: NEG
24752: PUSH
24753: LD_INT 1
24755: NEG
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24786: LD_ADDR_VAR 0 33
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 1
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: LD_INT 1
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: NEG
24845: PUSH
24846: LD_INT 0
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 1
24855: NEG
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: NEG
24868: PUSH
24869: LD_INT 2
24871: NEG
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 1
24879: PUSH
24880: LD_INT 1
24882: NEG
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 2
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: LD_INT 1
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: LD_INT 2
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 0
24920: PUSH
24921: LD_INT 2
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 1
24930: NEG
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 2
24941: NEG
24942: PUSH
24943: LD_INT 0
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 2
24952: NEG
24953: PUSH
24954: LD_INT 1
24956: NEG
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 2
24964: NEG
24965: PUSH
24966: LD_INT 2
24968: NEG
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 2
24976: NEG
24977: PUSH
24978: LD_INT 3
24980: NEG
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 2
24988: PUSH
24989: LD_INT 1
24991: NEG
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 3
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: LD_INT 3
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: LD_INT 2
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 3
25030: NEG
25031: PUSH
25032: LD_INT 2
25034: NEG
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25065: LD_ADDR_VAR 0 34
25069: PUSH
25070: LD_INT 0
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 0
25082: PUSH
25083: LD_INT 1
25085: NEG
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 1
25093: PUSH
25094: LD_INT 0
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 1
25103: PUSH
25104: LD_INT 1
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 0
25113: PUSH
25114: LD_INT 1
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 1
25123: NEG
25124: PUSH
25125: LD_INT 0
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 1
25134: NEG
25135: PUSH
25136: LD_INT 1
25138: NEG
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: PUSH
25148: LD_INT 2
25150: NEG
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: LD_INT 2
25161: NEG
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 1
25169: PUSH
25170: LD_INT 1
25172: NEG
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 2
25180: PUSH
25181: LD_INT 1
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 2
25190: PUSH
25191: LD_INT 2
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 1
25200: PUSH
25201: LD_INT 2
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: NEG
25211: PUSH
25212: LD_INT 1
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 2
25221: NEG
25222: PUSH
25223: LD_INT 0
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 2
25232: NEG
25233: PUSH
25234: LD_INT 1
25236: NEG
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 2
25244: NEG
25245: PUSH
25246: LD_INT 2
25248: NEG
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 1
25256: NEG
25257: PUSH
25258: LD_INT 3
25260: NEG
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 1
25268: PUSH
25269: LD_INT 2
25271: NEG
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 3
25279: PUSH
25280: LD_INT 2
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 2
25289: PUSH
25290: LD_INT 3
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 2
25299: NEG
25300: PUSH
25301: LD_INT 1
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 3
25310: NEG
25311: PUSH
25312: LD_INT 1
25314: NEG
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25345: LD_ADDR_VAR 0 35
25349: PUSH
25350: LD_INT 0
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: LD_INT 0
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 1
25383: PUSH
25384: LD_INT 1
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: LD_INT 1
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 1
25403: NEG
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 1
25414: NEG
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 2
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 2
25436: NEG
25437: PUSH
25438: LD_INT 1
25440: NEG
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25457: LD_ADDR_VAR 0 36
25461: PUSH
25462: LD_INT 0
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: LD_INT 1
25477: NEG
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 1
25485: PUSH
25486: LD_INT 0
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: LD_INT 1
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: LD_INT 1
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 1
25515: NEG
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: NEG
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: NEG
25539: PUSH
25540: LD_INT 2
25542: NEG
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: LD_INT 2
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25569: LD_ADDR_VAR 0 37
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: LD_INT 0
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: LD_INT 1
25589: NEG
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 1
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 1
25607: PUSH
25608: LD_INT 1
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 0
25617: PUSH
25618: LD_INT 1
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 1
25638: NEG
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 1
25661: NEG
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25681: LD_ADDR_VAR 0 38
25685: PUSH
25686: LD_INT 0
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 0
25698: PUSH
25699: LD_INT 1
25701: NEG
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 1
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 0
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: LD_INT 0
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 1
25750: NEG
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 2
25772: NEG
25773: PUSH
25774: LD_INT 1
25776: NEG
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25793: LD_ADDR_VAR 0 39
25797: PUSH
25798: LD_INT 0
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: LD_INT 1
25813: NEG
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: LD_INT 0
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 1
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 0
25841: PUSH
25842: LD_INT 1
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 1
25851: NEG
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 1
25862: NEG
25863: PUSH
25864: LD_INT 1
25866: NEG
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 1
25874: NEG
25875: PUSH
25876: LD_INT 2
25878: NEG
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: LD_INT 2
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25905: LD_ADDR_VAR 0 40
25909: PUSH
25910: LD_INT 0
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 0
25922: PUSH
25923: LD_INT 1
25925: NEG
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 1
25933: PUSH
25934: LD_INT 0
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 1
25943: PUSH
25944: LD_INT 1
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 0
25953: PUSH
25954: LD_INT 1
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 1
25963: NEG
25964: PUSH
25965: LD_INT 0
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 1
25974: NEG
25975: PUSH
25976: LD_INT 1
25978: NEG
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: LD_INT 1
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: NEG
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26017: LD_ADDR_VAR 0 41
26021: PUSH
26022: LD_INT 0
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: LD_INT 1
26037: NEG
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 1
26045: PUSH
26046: LD_INT 0
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 1
26055: PUSH
26056: LD_INT 1
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 0
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 1
26075: NEG
26076: PUSH
26077: LD_INT 0
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 1
26086: NEG
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 1
26098: NEG
26099: PUSH
26100: LD_INT 2
26102: NEG
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 1
26110: PUSH
26111: LD_INT 1
26113: NEG
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 2
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 2
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 2
26141: PUSH
26142: LD_INT 2
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: LD_INT 2
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 1
26161: NEG
26162: PUSH
26163: LD_INT 1
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 2
26172: NEG
26173: PUSH
26174: LD_INT 0
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 2
26183: NEG
26184: PUSH
26185: LD_INT 1
26187: NEG
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 2
26195: NEG
26196: PUSH
26197: LD_INT 2
26199: NEG
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 2
26207: NEG
26208: PUSH
26209: LD_INT 3
26211: NEG
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 2
26219: PUSH
26220: LD_INT 1
26222: NEG
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 3
26230: PUSH
26231: LD_INT 0
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 3
26240: PUSH
26241: LD_INT 1
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 3
26250: PUSH
26251: LD_INT 2
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 3
26260: PUSH
26261: LD_INT 3
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 2
26270: PUSH
26271: LD_INT 3
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 2
26280: NEG
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 3
26291: NEG
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 3
26302: NEG
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 3
26314: NEG
26315: PUSH
26316: LD_INT 2
26318: NEG
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 3
26326: NEG
26327: PUSH
26328: LD_INT 3
26330: NEG
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26367: LD_ADDR_VAR 0 42
26371: PUSH
26372: LD_INT 0
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: LD_INT 1
26387: NEG
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: LD_INT 1
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 0
26415: PUSH
26416: LD_INT 1
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 1
26425: NEG
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 1
26436: NEG
26437: PUSH
26438: LD_INT 1
26440: NEG
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: NEG
26449: PUSH
26450: LD_INT 2
26452: NEG
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: LD_INT 2
26463: NEG
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 1
26471: PUSH
26472: LD_INT 1
26474: NEG
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 2
26482: PUSH
26483: LD_INT 1
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 2
26492: PUSH
26493: LD_INT 2
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 1
26502: PUSH
26503: LD_INT 2
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: LD_INT 2
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 1
26522: NEG
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 2
26533: NEG
26534: PUSH
26535: LD_INT 1
26537: NEG
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 2
26545: NEG
26546: PUSH
26547: LD_INT 2
26549: NEG
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: LD_INT 3
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 1
26569: NEG
26570: PUSH
26571: LD_INT 3
26573: NEG
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 0
26581: PUSH
26582: LD_INT 3
26584: NEG
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: LD_INT 2
26595: NEG
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 3
26603: PUSH
26604: LD_INT 2
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 3
26613: PUSH
26614: LD_INT 3
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 2
26623: PUSH
26624: LD_INT 3
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: PUSH
26634: LD_INT 3
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: LD_INT 3
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 1
26653: NEG
26654: PUSH
26655: LD_INT 2
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 3
26664: NEG
26665: PUSH
26666: LD_INT 2
26668: NEG
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 3
26676: NEG
26677: PUSH
26678: LD_INT 3
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26717: LD_ADDR_VAR 0 43
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: LD_INT 0
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: LD_INT 1
26737: NEG
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: PUSH
26746: LD_INT 0
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 1
26755: PUSH
26756: LD_INT 1
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 0
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 1
26775: NEG
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 1
26786: NEG
26787: PUSH
26788: LD_INT 1
26790: NEG
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: LD_INT 2
26802: NEG
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: LD_INT 2
26813: NEG
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: LD_INT 1
26824: NEG
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 2
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 2
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: LD_INT 2
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: LD_INT 2
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 2
26883: NEG
26884: PUSH
26885: LD_INT 0
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 2
26894: NEG
26895: PUSH
26896: LD_INT 1
26898: NEG
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 1
26906: NEG
26907: PUSH
26908: LD_INT 3
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 0
26918: PUSH
26919: LD_INT 3
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: PUSH
26930: LD_INT 2
26932: NEG
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 2
26940: PUSH
26941: LD_INT 1
26943: NEG
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 3
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 3
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: LD_INT 3
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 0
26981: PUSH
26982: LD_INT 3
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: NEG
26992: PUSH
26993: LD_INT 2
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 2
27002: NEG
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 3
27013: NEG
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 3
27024: NEG
27025: PUSH
27026: LD_INT 1
27028: NEG
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27065: LD_ADDR_VAR 0 44
27069: PUSH
27070: LD_INT 0
27072: PUSH
27073: LD_INT 0
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: LD_INT 1
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 1
27093: PUSH
27094: LD_INT 0
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: LD_INT 1
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 1
27123: NEG
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 1
27146: NEG
27147: PUSH
27148: LD_INT 2
27150: NEG
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 2
27169: PUSH
27170: LD_INT 0
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 2
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 2
27189: PUSH
27190: LD_INT 2
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: LD_INT 2
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 2
27220: NEG
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 2
27231: NEG
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 2
27243: NEG
27244: PUSH
27245: LD_INT 2
27247: NEG
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 2
27255: NEG
27256: PUSH
27257: LD_INT 3
27259: NEG
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 2
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 3
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 3
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 3
27298: PUSH
27299: LD_INT 2
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 3
27308: PUSH
27309: LD_INT 3
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 2
27318: PUSH
27319: LD_INT 3
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 2
27328: NEG
27329: PUSH
27330: LD_INT 1
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 3
27339: NEG
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 3
27350: NEG
27351: PUSH
27352: LD_INT 1
27354: NEG
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 3
27362: NEG
27363: PUSH
27364: LD_INT 2
27366: NEG
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 3
27374: NEG
27375: PUSH
27376: LD_INT 3
27378: NEG
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27415: LD_ADDR_VAR 0 45
27419: PUSH
27420: LD_INT 0
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: LD_INT 1
27435: NEG
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 1
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: LD_INT 1
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 1
27473: NEG
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 1
27484: NEG
27485: PUSH
27486: LD_INT 1
27488: NEG
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 1
27496: NEG
27497: PUSH
27498: LD_INT 2
27500: NEG
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: LD_INT 2
27511: NEG
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 1
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 2
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 2
27540: PUSH
27541: LD_INT 2
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: LD_INT 2
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: LD_INT 2
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: NEG
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 2
27581: NEG
27582: PUSH
27583: LD_INT 1
27585: NEG
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 2
27593: NEG
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 2
27605: NEG
27606: PUSH
27607: LD_INT 3
27609: NEG
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 1
27617: NEG
27618: PUSH
27619: LD_INT 3
27621: NEG
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 0
27629: PUSH
27630: LD_INT 3
27632: NEG
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 1
27640: PUSH
27641: LD_INT 2
27643: NEG
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 3
27651: PUSH
27652: LD_INT 2
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 3
27661: PUSH
27662: LD_INT 3
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 2
27671: PUSH
27672: LD_INT 3
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: LD_INT 3
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: LD_INT 3
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: LD_INT 2
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 3
27712: NEG
27713: PUSH
27714: LD_INT 2
27716: NEG
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 3
27724: NEG
27725: PUSH
27726: LD_INT 3
27728: NEG
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27765: LD_ADDR_VAR 0 46
27769: PUSH
27770: LD_INT 0
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 1
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 1
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PUSH
27836: LD_INT 1
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: NEG
27847: PUSH
27848: LD_INT 2
27850: NEG
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: LD_INT 2
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: LD_INT 1
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 2
27880: PUSH
27881: LD_INT 0
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 2
27890: PUSH
27891: LD_INT 1
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: LD_INT 2
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: LD_INT 2
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 1
27920: NEG
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 2
27931: NEG
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 2
27942: NEG
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 1
27954: NEG
27955: PUSH
27956: LD_INT 3
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: LD_INT 3
27969: NEG
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: LD_INT 2
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 2
27988: PUSH
27989: LD_INT 1
27991: NEG
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 3
27999: PUSH
28000: LD_INT 0
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 3
28009: PUSH
28010: LD_INT 1
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 1
28019: PUSH
28020: LD_INT 3
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: LD_INT 3
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 1
28039: NEG
28040: PUSH
28041: LD_INT 2
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 2
28050: NEG
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 3
28061: NEG
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 3
28072: NEG
28073: PUSH
28074: LD_INT 1
28076: NEG
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28113: LD_ADDR_VAR 0 47
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: LD_INT 0
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: LD_INT 1
28133: NEG
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 1
28141: PUSH
28142: LD_INT 0
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: LD_INT 1
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 1
28171: NEG
28172: PUSH
28173: LD_INT 0
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 1
28182: NEG
28183: PUSH
28184: LD_INT 1
28186: NEG
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 1
28194: NEG
28195: PUSH
28196: LD_INT 2
28198: NEG
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: LD_INT 2
28209: NEG
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 1
28217: PUSH
28218: LD_INT 1
28220: NEG
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 2
28228: NEG
28229: PUSH
28230: LD_INT 1
28232: NEG
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 2
28240: NEG
28241: PUSH
28242: LD_INT 2
28244: NEG
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28264: LD_ADDR_VAR 0 48
28268: PUSH
28269: LD_INT 0
28271: PUSH
28272: LD_INT 0
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 0
28281: PUSH
28282: LD_INT 1
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: LD_INT 0
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 1
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 0
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 1
28322: NEG
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: NEG
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: LD_INT 2
28349: NEG
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: LD_INT 2
28360: NEG
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 1
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 2
28379: PUSH
28380: LD_INT 0
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28411: LD_ADDR_VAR 0 49
28415: PUSH
28416: LD_INT 0
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: LD_INT 1
28431: NEG
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: LD_INT 0
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: LD_INT 1
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: LD_INT 0
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 1
28480: NEG
28481: PUSH
28482: LD_INT 1
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 2
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 2
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 2
28523: PUSH
28524: LD_INT 2
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: PUSH
28534: LD_INT 2
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28555: LD_ADDR_VAR 0 50
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 1
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 0
28603: PUSH
28604: LD_INT 1
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 1
28613: NEG
28614: PUSH
28615: LD_INT 0
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 1
28624: NEG
28625: PUSH
28626: LD_INT 1
28628: NEG
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 2
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 2
28646: PUSH
28647: LD_INT 2
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 1
28656: PUSH
28657: LD_INT 2
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: LD_INT 2
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 1
28676: NEG
28677: PUSH
28678: LD_INT 1
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28699: LD_ADDR_VAR 0 51
28703: PUSH
28704: LD_INT 0
28706: PUSH
28707: LD_INT 0
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 0
28716: PUSH
28717: LD_INT 1
28719: NEG
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: LD_INT 0
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 1
28737: PUSH
28738: LD_INT 1
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 0
28747: PUSH
28748: LD_INT 1
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 1
28757: NEG
28758: PUSH
28759: LD_INT 0
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: NEG
28769: PUSH
28770: LD_INT 1
28772: NEG
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 1
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 0
28790: PUSH
28791: LD_INT 2
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 1
28800: NEG
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 2
28811: NEG
28812: PUSH
28813: LD_INT 0
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 2
28822: NEG
28823: PUSH
28824: LD_INT 1
28826: NEG
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28846: LD_ADDR_VAR 0 52
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: LD_INT 1
28866: NEG
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: LD_INT 0
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 1
28927: NEG
28928: PUSH
28929: LD_INT 2
28931: NEG
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 1
28939: NEG
28940: PUSH
28941: LD_INT 1
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 2
28950: NEG
28951: PUSH
28952: LD_INT 0
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 2
28961: NEG
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 2
28973: NEG
28974: PUSH
28975: LD_INT 2
28977: NEG
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28997: LD_ADDR_VAR 0 53
29001: PUSH
29002: LD_INT 0
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 0
29014: PUSH
29015: LD_INT 1
29017: NEG
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 1
29025: PUSH
29026: LD_INT 0
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 1
29035: PUSH
29036: LD_INT 1
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: LD_INT 1
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 1
29055: NEG
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 1
29066: NEG
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 1
29078: NEG
29079: PUSH
29080: LD_INT 2
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 0
29090: PUSH
29091: LD_INT 2
29093: NEG
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 1
29101: PUSH
29102: LD_INT 1
29104: NEG
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 2
29112: PUSH
29113: LD_INT 0
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 2
29122: PUSH
29123: LD_INT 1
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 2
29132: PUSH
29133: LD_INT 2
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: LD_INT 2
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: LD_INT 2
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 1
29162: NEG
29163: PUSH
29164: LD_INT 1
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 2
29173: NEG
29174: PUSH
29175: LD_INT 0
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 2
29184: NEG
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 2
29196: NEG
29197: PUSH
29198: LD_INT 2
29200: NEG
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29227: LD_ADDR_VAR 0 54
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: LD_INT 0
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 0
29244: PUSH
29245: LD_INT 1
29247: NEG
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 1
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: LD_INT 1
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: LD_INT 1
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 1
29285: NEG
29286: PUSH
29287: LD_INT 0
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: LD_INT 1
29300: NEG
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: NEG
29309: PUSH
29310: LD_INT 2
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: LD_INT 2
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: LD_INT 1
29334: NEG
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 2
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 2
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 2
29362: PUSH
29363: LD_INT 2
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: LD_INT 2
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 0
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 1
29392: NEG
29393: PUSH
29394: LD_INT 1
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 2
29403: NEG
29404: PUSH
29405: LD_INT 0
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 2
29414: NEG
29415: PUSH
29416: LD_INT 1
29418: NEG
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 2
29426: NEG
29427: PUSH
29428: LD_INT 2
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29457: LD_ADDR_VAR 0 55
29461: PUSH
29462: LD_INT 0
29464: PUSH
29465: LD_INT 0
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: LD_INT 1
29477: NEG
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: LD_INT 0
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 1
29495: PUSH
29496: LD_INT 1
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: LD_INT 1
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 1
29515: NEG
29516: PUSH
29517: LD_INT 0
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 1
29526: NEG
29527: PUSH
29528: LD_INT 1
29530: NEG
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 1
29538: NEG
29539: PUSH
29540: LD_INT 2
29542: NEG
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 0
29550: PUSH
29551: LD_INT 2
29553: NEG
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 1
29561: PUSH
29562: LD_INT 1
29564: NEG
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 2
29572: PUSH
29573: LD_INT 0
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: LD_INT 1
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 2
29592: PUSH
29593: LD_INT 2
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 1
29602: PUSH
29603: LD_INT 2
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 0
29612: PUSH
29613: LD_INT 2
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 1
29622: NEG
29623: PUSH
29624: LD_INT 1
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 2
29633: NEG
29634: PUSH
29635: LD_INT 0
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 2
29644: NEG
29645: PUSH
29646: LD_INT 1
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 2
29656: NEG
29657: PUSH
29658: LD_INT 2
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29687: LD_ADDR_VAR 0 56
29691: PUSH
29692: LD_INT 0
29694: PUSH
29695: LD_INT 0
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: LD_INT 1
29707: NEG
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 1
29715: PUSH
29716: LD_INT 0
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: LD_INT 1
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: LD_INT 1
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: LD_INT 0
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 1
29756: NEG
29757: PUSH
29758: LD_INT 1
29760: NEG
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 1
29768: NEG
29769: PUSH
29770: LD_INT 2
29772: NEG
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 0
29780: PUSH
29781: LD_INT 2
29783: NEG
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 1
29791: PUSH
29792: LD_INT 1
29794: NEG
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 2
29802: PUSH
29803: LD_INT 0
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 2
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 2
29822: PUSH
29823: LD_INT 2
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 1
29832: PUSH
29833: LD_INT 2
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 0
29842: PUSH
29843: LD_INT 2
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 1
29852: NEG
29853: PUSH
29854: LD_INT 1
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 2
29863: NEG
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 2
29874: NEG
29875: PUSH
29876: LD_INT 1
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 2
29886: NEG
29887: PUSH
29888: LD_INT 2
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29917: LD_ADDR_VAR 0 57
29921: PUSH
29922: LD_INT 0
29924: PUSH
29925: LD_INT 0
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 0
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 1
29945: PUSH
29946: LD_INT 0
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: LD_INT 1
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 0
29965: PUSH
29966: LD_INT 1
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: LD_INT 0
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 1
29986: NEG
29987: PUSH
29988: LD_INT 1
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 1
29998: NEG
29999: PUSH
30000: LD_INT 2
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: LD_INT 2
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 1
30021: PUSH
30022: LD_INT 1
30024: NEG
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 2
30032: PUSH
30033: LD_INT 0
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 2
30042: PUSH
30043: LD_INT 1
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 2
30052: PUSH
30053: LD_INT 2
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: LD_INT 2
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 0
30072: PUSH
30073: LD_INT 2
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 1
30082: NEG
30083: PUSH
30084: LD_INT 1
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 2
30093: NEG
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 2
30104: NEG
30105: PUSH
30106: LD_INT 1
30108: NEG
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 2
30116: NEG
30117: PUSH
30118: LD_INT 2
30120: NEG
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30147: LD_ADDR_VAR 0 58
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 0
30164: PUSH
30165: LD_INT 1
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 1
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 0
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 1
30205: NEG
30206: PUSH
30207: LD_INT 0
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 1
30216: NEG
30217: PUSH
30218: LD_INT 1
30220: NEG
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: LD_INT 2
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: LD_INT 2
30243: NEG
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: LD_INT 1
30254: NEG
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 2
30262: PUSH
30263: LD_INT 0
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 2
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 2
30282: PUSH
30283: LD_INT 2
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 1
30292: PUSH
30293: LD_INT 2
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: LD_INT 2
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: LD_INT 1
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 2
30323: NEG
30324: PUSH
30325: LD_INT 0
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 2
30334: NEG
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 2
30346: NEG
30347: PUSH
30348: LD_INT 2
30350: NEG
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30377: LD_ADDR_VAR 0 59
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 0
30394: PUSH
30395: LD_INT 1
30397: NEG
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: LD_INT 0
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 0
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 1
30435: NEG
30436: PUSH
30437: LD_INT 0
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 1
30446: NEG
30447: PUSH
30448: LD_INT 1
30450: NEG
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30465: LD_ADDR_VAR 0 60
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 0
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: LD_INT 0
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 1
30523: NEG
30524: PUSH
30525: LD_INT 0
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 1
30534: NEG
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30553: LD_ADDR_VAR 0 61
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: LD_INT 0
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: LD_INT 1
30573: NEG
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: LD_INT 0
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 1
30591: PUSH
30592: LD_INT 1
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: LD_INT 1
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 1
30611: NEG
30612: PUSH
30613: LD_INT 0
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: NEG
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30641: LD_ADDR_VAR 0 62
30645: PUSH
30646: LD_INT 0
30648: PUSH
30649: LD_INT 0
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 0
30658: PUSH
30659: LD_INT 1
30661: NEG
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 1
30669: PUSH
30670: LD_INT 0
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 1
30679: PUSH
30680: LD_INT 1
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 0
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: NEG
30700: PUSH
30701: LD_INT 0
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 1
30710: NEG
30711: PUSH
30712: LD_INT 1
30714: NEG
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30729: LD_ADDR_VAR 0 63
30733: PUSH
30734: LD_INT 0
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 0
30746: PUSH
30747: LD_INT 1
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 1
30757: PUSH
30758: LD_INT 0
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 1
30767: PUSH
30768: LD_INT 1
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 0
30777: PUSH
30778: LD_INT 1
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 1
30787: NEG
30788: PUSH
30789: LD_INT 0
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 1
30798: NEG
30799: PUSH
30800: LD_INT 1
30802: NEG
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30817: LD_ADDR_VAR 0 64
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: LD_INT 0
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 0
30834: PUSH
30835: LD_INT 1
30837: NEG
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: LD_INT 0
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 0
30865: PUSH
30866: LD_INT 1
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 1
30875: NEG
30876: PUSH
30877: LD_INT 0
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 1
30886: NEG
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: ST_TO_ADDR
// end ; 1 :
30905: GO 36802
30907: LD_INT 1
30909: DOUBLE
30910: EQUAL
30911: IFTRUE 30915
30913: GO 33538
30915: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30916: LD_ADDR_VAR 0 11
30920: PUSH
30921: LD_INT 1
30923: NEG
30924: PUSH
30925: LD_INT 3
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 0
30935: PUSH
30936: LD_INT 3
30938: NEG
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: LD_INT 2
30949: NEG
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: LIST
30959: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30960: LD_ADDR_VAR 0 12
30964: PUSH
30965: LD_INT 2
30967: PUSH
30968: LD_INT 1
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 3
30978: PUSH
30979: LD_INT 0
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 3
30988: PUSH
30989: LD_INT 1
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: LIST
31000: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31001: LD_ADDR_VAR 0 13
31005: PUSH
31006: LD_INT 3
31008: PUSH
31009: LD_INT 2
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 3
31018: PUSH
31019: LD_INT 3
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 2
31028: PUSH
31029: LD_INT 3
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: LIST
31040: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31041: LD_ADDR_VAR 0 14
31045: PUSH
31046: LD_INT 1
31048: PUSH
31049: LD_INT 3
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: LD_INT 3
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 1
31068: NEG
31069: PUSH
31070: LD_INT 2
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: LIST
31081: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31082: LD_ADDR_VAR 0 15
31086: PUSH
31087: LD_INT 2
31089: NEG
31090: PUSH
31091: LD_INT 1
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 3
31100: NEG
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 3
31111: NEG
31112: PUSH
31113: LD_INT 1
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: LIST
31125: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31126: LD_ADDR_VAR 0 16
31130: PUSH
31131: LD_INT 2
31133: NEG
31134: PUSH
31135: LD_INT 3
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 3
31145: NEG
31146: PUSH
31147: LD_INT 2
31149: NEG
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 3
31157: NEG
31158: PUSH
31159: LD_INT 3
31161: NEG
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: LIST
31171: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31172: LD_ADDR_VAR 0 17
31176: PUSH
31177: LD_INT 1
31179: NEG
31180: PUSH
31181: LD_INT 3
31183: NEG
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 0
31191: PUSH
31192: LD_INT 3
31194: NEG
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 1
31202: PUSH
31203: LD_INT 2
31205: NEG
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: LIST
31215: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31216: LD_ADDR_VAR 0 18
31220: PUSH
31221: LD_INT 2
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 3
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 3
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: LIST
31256: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31257: LD_ADDR_VAR 0 19
31261: PUSH
31262: LD_INT 3
31264: PUSH
31265: LD_INT 2
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 3
31274: PUSH
31275: LD_INT 3
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 2
31284: PUSH
31285: LD_INT 3
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: LIST
31296: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31297: LD_ADDR_VAR 0 20
31301: PUSH
31302: LD_INT 1
31304: PUSH
31305: LD_INT 3
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: LD_INT 3
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 1
31324: NEG
31325: PUSH
31326: LD_INT 2
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: LIST
31337: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31338: LD_ADDR_VAR 0 21
31342: PUSH
31343: LD_INT 2
31345: NEG
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 3
31356: NEG
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 3
31367: NEG
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: LIST
31381: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31382: LD_ADDR_VAR 0 22
31386: PUSH
31387: LD_INT 2
31389: NEG
31390: PUSH
31391: LD_INT 3
31393: NEG
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 3
31401: NEG
31402: PUSH
31403: LD_INT 2
31405: NEG
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 3
31413: NEG
31414: PUSH
31415: LD_INT 3
31417: NEG
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: LIST
31427: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
31428: LD_ADDR_VAR 0 23
31432: PUSH
31433: LD_INT 0
31435: PUSH
31436: LD_INT 3
31438: NEG
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: LD_INT 4
31450: NEG
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: LD_INT 3
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: LIST
31471: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
31472: LD_ADDR_VAR 0 24
31476: PUSH
31477: LD_INT 3
31479: PUSH
31480: LD_INT 0
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 3
31489: PUSH
31490: LD_INT 1
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 4
31500: PUSH
31501: LD_INT 1
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: LIST
31512: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
31513: LD_ADDR_VAR 0 25
31517: PUSH
31518: LD_INT 3
31520: PUSH
31521: LD_INT 3
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 4
31530: PUSH
31531: LD_INT 3
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 3
31540: PUSH
31541: LD_INT 4
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: LIST
31552: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
31553: LD_ADDR_VAR 0 26
31557: PUSH
31558: LD_INT 0
31560: PUSH
31561: LD_INT 3
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: LD_INT 4
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: LD_INT 3
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31594: LD_ADDR_VAR 0 27
31598: PUSH
31599: LD_INT 3
31601: NEG
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 3
31612: NEG
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 4
31623: NEG
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: LIST
31637: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31638: LD_ADDR_VAR 0 28
31642: PUSH
31643: LD_INT 3
31645: NEG
31646: PUSH
31647: LD_INT 3
31649: NEG
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 3
31657: NEG
31658: PUSH
31659: LD_INT 4
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 4
31669: NEG
31670: PUSH
31671: LD_INT 3
31673: NEG
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: LIST
31683: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31684: LD_ADDR_VAR 0 29
31688: PUSH
31689: LD_INT 1
31691: NEG
31692: PUSH
31693: LD_INT 3
31695: NEG
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: LD_INT 3
31706: NEG
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 1
31714: PUSH
31715: LD_INT 2
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: LD_INT 4
31729: NEG
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: LD_INT 4
31740: NEG
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 1
31748: PUSH
31749: LD_INT 3
31751: NEG
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 1
31759: NEG
31760: PUSH
31761: LD_INT 5
31763: NEG
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: LD_INT 5
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: LD_INT 4
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 1
31793: NEG
31794: PUSH
31795: LD_INT 6
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 0
31805: PUSH
31806: LD_INT 6
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 1
31816: PUSH
31817: LD_INT 5
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31839: LD_ADDR_VAR 0 30
31843: PUSH
31844: LD_INT 2
31846: PUSH
31847: LD_INT 1
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 3
31857: PUSH
31858: LD_INT 0
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 3
31867: PUSH
31868: LD_INT 1
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 3
31877: PUSH
31878: LD_INT 1
31880: NEG
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 4
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 4
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 4
31908: PUSH
31909: LD_INT 1
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 5
31919: PUSH
31920: LD_INT 0
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 5
31929: PUSH
31930: LD_INT 1
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 5
31939: PUSH
31940: LD_INT 1
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 6
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 6
31960: PUSH
31961: LD_INT 1
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31982: LD_ADDR_VAR 0 31
31986: PUSH
31987: LD_INT 3
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 3
31999: PUSH
32000: LD_INT 3
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 2
32009: PUSH
32010: LD_INT 3
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 4
32019: PUSH
32020: LD_INT 3
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 4
32029: PUSH
32030: LD_INT 4
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 3
32039: PUSH
32040: LD_INT 4
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 5
32049: PUSH
32050: LD_INT 4
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 5
32059: PUSH
32060: LD_INT 5
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 4
32069: PUSH
32070: LD_INT 5
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 6
32079: PUSH
32080: LD_INT 5
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 6
32089: PUSH
32090: LD_INT 6
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 5
32099: PUSH
32100: LD_INT 6
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
32121: LD_ADDR_VAR 0 32
32125: PUSH
32126: LD_INT 1
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 0
32138: PUSH
32139: LD_INT 3
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: LD_INT 2
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 1
32159: PUSH
32160: LD_INT 4
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: LD_INT 4
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 1
32179: NEG
32180: PUSH
32181: LD_INT 3
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 1
32190: PUSH
32191: LD_INT 5
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: LD_INT 5
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: NEG
32211: PUSH
32212: LD_INT 4
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 1
32221: PUSH
32222: LD_INT 6
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: LD_INT 6
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: LD_INT 5
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
32264: LD_ADDR_VAR 0 33
32268: PUSH
32269: LD_INT 2
32271: NEG
32272: PUSH
32273: LD_INT 1
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 3
32282: NEG
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 3
32293: NEG
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 3
32305: NEG
32306: PUSH
32307: LD_INT 1
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 4
32316: NEG
32317: PUSH
32318: LD_INT 0
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 4
32327: NEG
32328: PUSH
32329: LD_INT 1
32331: NEG
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 4
32339: NEG
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 5
32350: NEG
32351: PUSH
32352: LD_INT 0
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 5
32361: NEG
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 5
32373: NEG
32374: PUSH
32375: LD_INT 1
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 6
32384: NEG
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 6
32395: NEG
32396: PUSH
32397: LD_INT 1
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
32419: LD_ADDR_VAR 0 34
32423: PUSH
32424: LD_INT 2
32426: NEG
32427: PUSH
32428: LD_INT 3
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 3
32438: NEG
32439: PUSH
32440: LD_INT 2
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 3
32450: NEG
32451: PUSH
32452: LD_INT 3
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 3
32462: NEG
32463: PUSH
32464: LD_INT 4
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 4
32474: NEG
32475: PUSH
32476: LD_INT 3
32478: NEG
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 4
32486: NEG
32487: PUSH
32488: LD_INT 4
32490: NEG
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 4
32498: NEG
32499: PUSH
32500: LD_INT 5
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 5
32510: NEG
32511: PUSH
32512: LD_INT 4
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 5
32522: NEG
32523: PUSH
32524: LD_INT 5
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 5
32534: NEG
32535: PUSH
32536: LD_INT 6
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 6
32546: NEG
32547: PUSH
32548: LD_INT 5
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 6
32558: NEG
32559: PUSH
32560: LD_INT 6
32562: NEG
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32582: LD_ADDR_VAR 0 41
32586: PUSH
32587: LD_INT 0
32589: PUSH
32590: LD_INT 2
32592: NEG
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: NEG
32601: PUSH
32602: LD_INT 3
32604: NEG
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 1
32612: PUSH
32613: LD_INT 2
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: LIST
32625: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32626: LD_ADDR_VAR 0 42
32630: PUSH
32631: LD_INT 2
32633: PUSH
32634: LD_INT 0
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 2
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 3
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: LIST
32666: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32667: LD_ADDR_VAR 0 43
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: LD_INT 2
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 3
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 2
32694: PUSH
32695: LD_INT 3
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: LIST
32706: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32707: LD_ADDR_VAR 0 44
32711: PUSH
32712: LD_INT 0
32714: PUSH
32715: LD_INT 2
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: LD_INT 3
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: NEG
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: LIST
32747: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32748: LD_ADDR_VAR 0 45
32752: PUSH
32753: LD_INT 2
32755: NEG
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 2
32766: NEG
32767: PUSH
32768: LD_INT 1
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 3
32777: NEG
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: LIST
32791: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32792: LD_ADDR_VAR 0 46
32796: PUSH
32797: LD_INT 2
32799: NEG
32800: PUSH
32801: LD_INT 2
32803: NEG
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 2
32811: NEG
32812: PUSH
32813: LD_INT 3
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 3
32823: NEG
32824: PUSH
32825: LD_INT 2
32827: NEG
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: LIST
32837: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32838: LD_ADDR_VAR 0 47
32842: PUSH
32843: LD_INT 2
32845: NEG
32846: PUSH
32847: LD_INT 3
32849: NEG
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 1
32857: NEG
32858: PUSH
32859: LD_INT 3
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32871: LD_ADDR_VAR 0 48
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: LD_INT 2
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 2
32889: PUSH
32890: LD_INT 1
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32902: LD_ADDR_VAR 0 49
32906: PUSH
32907: LD_INT 3
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 3
32919: PUSH
32920: LD_INT 2
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32931: LD_ADDR_VAR 0 50
32935: PUSH
32936: LD_INT 2
32938: PUSH
32939: LD_INT 3
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 1
32948: PUSH
32949: LD_INT 3
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32960: LD_ADDR_VAR 0 51
32964: PUSH
32965: LD_INT 1
32967: NEG
32968: PUSH
32969: LD_INT 2
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 2
32978: NEG
32979: PUSH
32980: LD_INT 1
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32991: LD_ADDR_VAR 0 52
32995: PUSH
32996: LD_INT 3
32998: NEG
32999: PUSH
33000: LD_INT 1
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 3
33010: NEG
33011: PUSH
33012: LD_INT 2
33014: NEG
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33024: LD_ADDR_VAR 0 53
33028: PUSH
33029: LD_INT 1
33031: NEG
33032: PUSH
33033: LD_INT 3
33035: NEG
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 0
33043: PUSH
33044: LD_INT 3
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: LD_INT 2
33057: NEG
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: LIST
33067: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33068: LD_ADDR_VAR 0 54
33072: PUSH
33073: LD_INT 2
33075: PUSH
33076: LD_INT 1
33078: NEG
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 3
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 3
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: LIST
33108: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33109: LD_ADDR_VAR 0 55
33113: PUSH
33114: LD_INT 3
33116: PUSH
33117: LD_INT 2
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 3
33126: PUSH
33127: LD_INT 3
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 2
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: LIST
33148: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33149: LD_ADDR_VAR 0 56
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 3
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: LD_INT 3
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: LD_INT 2
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: LIST
33189: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33190: LD_ADDR_VAR 0 57
33194: PUSH
33195: LD_INT 2
33197: NEG
33198: PUSH
33199: LD_INT 1
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 3
33208: NEG
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 3
33219: NEG
33220: PUSH
33221: LD_INT 1
33223: NEG
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33234: LD_ADDR_VAR 0 58
33238: PUSH
33239: LD_INT 2
33241: NEG
33242: PUSH
33243: LD_INT 3
33245: NEG
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 3
33253: NEG
33254: PUSH
33255: LD_INT 2
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 3
33265: NEG
33266: PUSH
33267: LD_INT 3
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: LIST
33279: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
33280: LD_ADDR_VAR 0 59
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: LD_INT 2
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: LD_INT 2
33302: NEG
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 1
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: LIST
33323: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33324: LD_ADDR_VAR 0 60
33328: PUSH
33329: LD_INT 1
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 2
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 2
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: LIST
33364: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33365: LD_ADDR_VAR 0 61
33369: PUSH
33370: LD_INT 2
33372: PUSH
33373: LD_INT 1
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 2
33382: PUSH
33383: LD_INT 2
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 1
33392: PUSH
33393: LD_INT 2
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33405: LD_ADDR_VAR 0 62
33409: PUSH
33410: LD_INT 1
33412: PUSH
33413: LD_INT 2
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 0
33422: PUSH
33423: LD_INT 2
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 1
33432: NEG
33433: PUSH
33434: LD_INT 1
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: LIST
33445: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33446: LD_ADDR_VAR 0 63
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: PUSH
33455: LD_INT 1
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 2
33464: NEG
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 2
33475: NEG
33476: PUSH
33477: LD_INT 1
33479: NEG
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: LIST
33489: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33490: LD_ADDR_VAR 0 64
33494: PUSH
33495: LD_INT 1
33497: NEG
33498: PUSH
33499: LD_INT 2
33501: NEG
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 2
33509: NEG
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 2
33521: NEG
33522: PUSH
33523: LD_INT 2
33525: NEG
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: ST_TO_ADDR
// end ; 2 :
33536: GO 36802
33538: LD_INT 2
33540: DOUBLE
33541: EQUAL
33542: IFTRUE 33546
33544: GO 36801
33546: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
33547: LD_ADDR_VAR 0 29
33551: PUSH
33552: LD_INT 4
33554: PUSH
33555: LD_INT 0
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 4
33564: PUSH
33565: LD_INT 1
33567: NEG
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 5
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 5
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 4
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 3
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 3
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 3
33626: PUSH
33627: LD_INT 2
33629: NEG
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 5
33637: PUSH
33638: LD_INT 2
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 3
33647: PUSH
33648: LD_INT 3
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 3
33657: PUSH
33658: LD_INT 2
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 4
33667: PUSH
33668: LD_INT 3
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 4
33677: PUSH
33678: LD_INT 4
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 3
33687: PUSH
33688: LD_INT 4
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 2
33697: PUSH
33698: LD_INT 3
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 2
33707: PUSH
33708: LD_INT 2
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 4
33717: PUSH
33718: LD_INT 2
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 2
33727: PUSH
33728: LD_INT 4
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 0
33737: PUSH
33738: LD_INT 4
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: LD_INT 3
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: LD_INT 4
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: LD_INT 5
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 0
33777: PUSH
33778: LD_INT 5
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 1
33787: NEG
33788: PUSH
33789: LD_INT 4
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 1
33798: NEG
33799: PUSH
33800: LD_INT 3
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: PUSH
33810: LD_INT 5
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 2
33819: NEG
33820: PUSH
33821: LD_INT 3
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 3
33830: NEG
33831: PUSH
33832: LD_INT 0
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 3
33841: NEG
33842: PUSH
33843: LD_INT 1
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 2
33853: NEG
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 2
33864: NEG
33865: PUSH
33866: LD_INT 1
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 3
33875: NEG
33876: PUSH
33877: LD_INT 1
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 4
33886: NEG
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 4
33897: NEG
33898: PUSH
33899: LD_INT 1
33901: NEG
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 4
33909: NEG
33910: PUSH
33911: LD_INT 2
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: NEG
33922: PUSH
33923: LD_INT 2
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 4
33932: NEG
33933: PUSH
33934: LD_INT 4
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 4
33944: NEG
33945: PUSH
33946: LD_INT 5
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 3
33956: NEG
33957: PUSH
33958: LD_INT 4
33960: NEG
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 3
33968: NEG
33969: PUSH
33970: LD_INT 3
33972: NEG
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 4
33980: NEG
33981: PUSH
33982: LD_INT 3
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 5
33992: NEG
33993: PUSH
33994: LD_INT 4
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 5
34004: NEG
34005: PUSH
34006: LD_INT 5
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 3
34016: NEG
34017: PUSH
34018: LD_INT 5
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 5
34028: NEG
34029: PUSH
34030: LD_INT 3
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
34085: LD_ADDR_VAR 0 30
34089: PUSH
34090: LD_INT 4
34092: PUSH
34093: LD_INT 4
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 4
34102: PUSH
34103: LD_INT 3
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 5
34112: PUSH
34113: LD_INT 4
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 5
34122: PUSH
34123: LD_INT 5
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 4
34132: PUSH
34133: LD_INT 5
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 3
34142: PUSH
34143: LD_INT 4
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 3
34152: PUSH
34153: LD_INT 3
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 5
34162: PUSH
34163: LD_INT 3
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 3
34172: PUSH
34173: LD_INT 5
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 0
34182: PUSH
34183: LD_INT 3
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: LD_INT 2
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 1
34202: PUSH
34203: LD_INT 3
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: LD_INT 4
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 0
34222: PUSH
34223: LD_INT 4
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: NEG
34233: PUSH
34234: LD_INT 3
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 1
34243: NEG
34244: PUSH
34245: LD_INT 2
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 2
34254: PUSH
34255: LD_INT 4
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 2
34264: NEG
34265: PUSH
34266: LD_INT 2
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 4
34275: NEG
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 4
34286: NEG
34287: PUSH
34288: LD_INT 1
34290: NEG
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 3
34298: NEG
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 3
34309: NEG
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 4
34320: NEG
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 5
34331: NEG
34332: PUSH
34333: LD_INT 0
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 5
34342: NEG
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 5
34354: NEG
34355: PUSH
34356: LD_INT 2
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 3
34366: NEG
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 3
34377: NEG
34378: PUSH
34379: LD_INT 3
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 3
34389: NEG
34390: PUSH
34391: LD_INT 4
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 2
34401: NEG
34402: PUSH
34403: LD_INT 3
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 2
34413: NEG
34414: PUSH
34415: LD_INT 2
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 3
34425: NEG
34426: PUSH
34427: LD_INT 2
34429: NEG
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 4
34437: NEG
34438: PUSH
34439: LD_INT 3
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 4
34449: NEG
34450: PUSH
34451: LD_INT 4
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 2
34461: NEG
34462: PUSH
34463: LD_INT 4
34465: NEG
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 4
34473: NEG
34474: PUSH
34475: LD_INT 2
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: LD_INT 4
34488: NEG
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: LD_INT 5
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: PUSH
34508: LD_INT 4
34510: NEG
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 1
34518: PUSH
34519: LD_INT 3
34521: NEG
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: LD_INT 3
34532: NEG
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: LD_INT 4
34544: NEG
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 1
34552: NEG
34553: PUSH
34554: LD_INT 5
34556: NEG
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: LD_INT 3
34567: NEG
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 2
34575: NEG
34576: PUSH
34577: LD_INT 5
34579: NEG
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34632: LD_ADDR_VAR 0 31
34636: PUSH
34637: LD_INT 0
34639: PUSH
34640: LD_INT 4
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 0
34649: PUSH
34650: LD_INT 3
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: LD_INT 4
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 1
34669: PUSH
34670: LD_INT 5
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: LD_INT 5
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: LD_INT 4
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: LD_INT 3
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 2
34711: PUSH
34712: LD_INT 5
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 2
34721: NEG
34722: PUSH
34723: LD_INT 3
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 3
34732: NEG
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 3
34743: NEG
34744: PUSH
34745: LD_INT 1
34747: NEG
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 2
34755: NEG
34756: PUSH
34757: LD_INT 0
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 2
34766: NEG
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 3
34777: NEG
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 4
34788: NEG
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 4
34799: NEG
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 4
34811: NEG
34812: PUSH
34813: LD_INT 2
34815: NEG
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 2
34823: NEG
34824: PUSH
34825: LD_INT 2
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 4
34834: NEG
34835: PUSH
34836: LD_INT 4
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 4
34846: NEG
34847: PUSH
34848: LD_INT 5
34850: NEG
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 3
34858: NEG
34859: PUSH
34860: LD_INT 4
34862: NEG
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 3
34870: NEG
34871: PUSH
34872: LD_INT 3
34874: NEG
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 4
34882: NEG
34883: PUSH
34884: LD_INT 3
34886: NEG
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 5
34894: NEG
34895: PUSH
34896: LD_INT 4
34898: NEG
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 5
34906: NEG
34907: PUSH
34908: LD_INT 5
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 3
34918: NEG
34919: PUSH
34920: LD_INT 5
34922: NEG
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 5
34930: NEG
34931: PUSH
34932: LD_INT 3
34934: NEG
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 0
34942: PUSH
34943: LD_INT 3
34945: NEG
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: LD_INT 4
34956: NEG
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 1
34964: PUSH
34965: LD_INT 3
34967: NEG
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 1
34975: PUSH
34976: LD_INT 2
34978: NEG
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 2
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: NEG
34998: PUSH
34999: LD_INT 3
35001: NEG
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 1
35009: NEG
35010: PUSH
35011: LD_INT 4
35013: NEG
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 2
35021: PUSH
35022: LD_INT 2
35024: NEG
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 2
35032: NEG
35033: PUSH
35034: LD_INT 4
35036: NEG
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 4
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 4
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 5
35065: PUSH
35066: LD_INT 0
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 5
35075: PUSH
35076: LD_INT 1
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 4
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 3
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 3
35105: PUSH
35106: LD_INT 1
35108: NEG
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 3
35116: PUSH
35117: LD_INT 2
35119: NEG
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 5
35127: PUSH
35128: LD_INT 2
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
35182: LD_ADDR_VAR 0 32
35186: PUSH
35187: LD_INT 4
35189: NEG
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 4
35200: NEG
35201: PUSH
35202: LD_INT 1
35204: NEG
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 3
35212: NEG
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 3
35223: NEG
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 4
35234: NEG
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 5
35245: NEG
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 5
35256: NEG
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 5
35268: NEG
35269: PUSH
35270: LD_INT 2
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 3
35280: NEG
35281: PUSH
35282: LD_INT 2
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 3
35291: NEG
35292: PUSH
35293: LD_INT 3
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 3
35303: NEG
35304: PUSH
35305: LD_INT 4
35307: NEG
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 2
35315: NEG
35316: PUSH
35317: LD_INT 3
35319: NEG
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 2
35327: NEG
35328: PUSH
35329: LD_INT 2
35331: NEG
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 3
35339: NEG
35340: PUSH
35341: LD_INT 2
35343: NEG
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 4
35351: NEG
35352: PUSH
35353: LD_INT 3
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 4
35363: NEG
35364: PUSH
35365: LD_INT 4
35367: NEG
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 2
35375: NEG
35376: PUSH
35377: LD_INT 4
35379: NEG
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 4
35387: NEG
35388: PUSH
35389: LD_INT 2
35391: NEG
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: LD_INT 4
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 0
35410: PUSH
35411: LD_INT 5
35413: NEG
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 1
35421: PUSH
35422: LD_INT 4
35424: NEG
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: PUSH
35433: LD_INT 3
35435: NEG
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: LD_INT 3
35446: NEG
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 1
35454: NEG
35455: PUSH
35456: LD_INT 4
35458: NEG
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: LD_INT 5
35470: NEG
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 2
35478: PUSH
35479: LD_INT 3
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 2
35489: NEG
35490: PUSH
35491: LD_INT 5
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 3
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 3
35511: PUSH
35512: LD_INT 1
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 4
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 4
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 3
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 2
35562: PUSH
35563: LD_INT 1
35565: NEG
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 2
35573: PUSH
35574: LD_INT 2
35576: NEG
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 4
35584: PUSH
35585: LD_INT 2
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 4
35594: PUSH
35595: LD_INT 4
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 4
35604: PUSH
35605: LD_INT 3
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 5
35614: PUSH
35615: LD_INT 4
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 5
35624: PUSH
35625: LD_INT 5
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 4
35634: PUSH
35635: LD_INT 5
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 3
35644: PUSH
35645: LD_INT 4
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 3
35654: PUSH
35655: LD_INT 3
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 5
35664: PUSH
35665: LD_INT 3
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 3
35674: PUSH
35675: LD_INT 5
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35729: LD_ADDR_VAR 0 33
35733: PUSH
35734: LD_INT 4
35736: NEG
35737: PUSH
35738: LD_INT 4
35740: NEG
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 4
35748: NEG
35749: PUSH
35750: LD_INT 5
35752: NEG
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 3
35760: NEG
35761: PUSH
35762: LD_INT 4
35764: NEG
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 3
35772: NEG
35773: PUSH
35774: LD_INT 3
35776: NEG
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 4
35784: NEG
35785: PUSH
35786: LD_INT 3
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 5
35796: NEG
35797: PUSH
35798: LD_INT 4
35800: NEG
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 5
35808: NEG
35809: PUSH
35810: LD_INT 5
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 3
35820: NEG
35821: PUSH
35822: LD_INT 5
35824: NEG
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 5
35832: NEG
35833: PUSH
35834: LD_INT 3
35836: NEG
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 0
35844: PUSH
35845: LD_INT 3
35847: NEG
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: LD_INT 4
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: LD_INT 3
35869: NEG
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: LD_INT 2
35880: NEG
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: LD_INT 2
35891: NEG
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: LD_INT 3
35903: NEG
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 1
35911: NEG
35912: PUSH
35913: LD_INT 4
35915: NEG
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 2
35923: PUSH
35924: LD_INT 2
35926: NEG
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 2
35934: NEG
35935: PUSH
35936: LD_INT 4
35938: NEG
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 4
35946: PUSH
35947: LD_INT 0
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 4
35956: PUSH
35957: LD_INT 1
35959: NEG
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 5
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 5
35977: PUSH
35978: LD_INT 1
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 4
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 3
35997: PUSH
35998: LD_INT 0
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 3
36007: PUSH
36008: LD_INT 1
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 3
36018: PUSH
36019: LD_INT 2
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 5
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 3
36039: PUSH
36040: LD_INT 3
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 3
36049: PUSH
36050: LD_INT 2
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 4
36059: PUSH
36060: LD_INT 3
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 4
36069: PUSH
36070: LD_INT 4
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 3
36079: PUSH
36080: LD_INT 4
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 2
36089: PUSH
36090: LD_INT 3
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 2
36099: PUSH
36100: LD_INT 2
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 4
36109: PUSH
36110: LD_INT 2
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 2
36119: PUSH
36120: LD_INT 4
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: LD_INT 4
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: LD_INT 3
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: LD_INT 4
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: LD_INT 5
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 0
36169: PUSH
36170: LD_INT 5
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 1
36179: NEG
36180: PUSH
36181: LD_INT 4
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 1
36190: NEG
36191: PUSH
36192: LD_INT 3
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 2
36201: PUSH
36202: LD_INT 5
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 2
36211: NEG
36212: PUSH
36213: LD_INT 3
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
36267: LD_ADDR_VAR 0 34
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: LD_INT 4
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 0
36285: PUSH
36286: LD_INT 5
36288: NEG
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: LD_INT 4
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: LD_INT 3
36310: NEG
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: LD_INT 3
36321: NEG
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: LD_INT 4
36333: NEG
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: LD_INT 5
36345: NEG
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 2
36353: PUSH
36354: LD_INT 3
36356: NEG
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 2
36364: NEG
36365: PUSH
36366: LD_INT 5
36368: NEG
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 3
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 3
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 4
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 4
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 3
36417: PUSH
36418: LD_INT 1
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 2
36427: PUSH
36428: LD_INT 0
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 2
36437: PUSH
36438: LD_INT 1
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 2
36448: PUSH
36449: LD_INT 2
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 4
36459: PUSH
36460: LD_INT 2
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 4
36469: PUSH
36470: LD_INT 4
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 4
36479: PUSH
36480: LD_INT 3
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 5
36489: PUSH
36490: LD_INT 4
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 5
36499: PUSH
36500: LD_INT 5
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 4
36509: PUSH
36510: LD_INT 5
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 3
36519: PUSH
36520: LD_INT 4
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 3
36529: PUSH
36530: LD_INT 3
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 5
36539: PUSH
36540: LD_INT 3
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 3
36549: PUSH
36550: LD_INT 5
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: LD_INT 3
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: LD_INT 2
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: LD_INT 3
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 1
36589: PUSH
36590: LD_INT 4
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: LD_INT 4
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: LD_INT 3
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: LD_INT 2
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 2
36631: PUSH
36632: LD_INT 4
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 2
36641: NEG
36642: PUSH
36643: LD_INT 2
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 4
36652: NEG
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 4
36663: NEG
36664: PUSH
36665: LD_INT 1
36667: NEG
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 3
36675: NEG
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 3
36686: NEG
36687: PUSH
36688: LD_INT 1
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 4
36697: NEG
36698: PUSH
36699: LD_INT 1
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 5
36708: NEG
36709: PUSH
36710: LD_INT 0
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 5
36719: NEG
36720: PUSH
36721: LD_INT 1
36723: NEG
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 5
36731: NEG
36732: PUSH
36733: LD_INT 2
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 3
36743: NEG
36744: PUSH
36745: LD_INT 2
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: ST_TO_ADDR
// end ; end ;
36799: GO 36802
36801: POP
// case btype of b_depot , b_warehouse :
36802: LD_VAR 0 1
36806: PUSH
36807: LD_INT 0
36809: DOUBLE
36810: EQUAL
36811: IFTRUE 36821
36813: LD_INT 1
36815: DOUBLE
36816: EQUAL
36817: IFTRUE 36821
36819: GO 37022
36821: POP
// case nation of nation_american :
36822: LD_VAR 0 5
36826: PUSH
36827: LD_INT 1
36829: DOUBLE
36830: EQUAL
36831: IFTRUE 36835
36833: GO 36891
36835: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
36836: LD_ADDR_VAR 0 9
36840: PUSH
36841: LD_VAR 0 11
36845: PUSH
36846: LD_VAR 0 12
36850: PUSH
36851: LD_VAR 0 13
36855: PUSH
36856: LD_VAR 0 14
36860: PUSH
36861: LD_VAR 0 15
36865: PUSH
36866: LD_VAR 0 16
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: PUSH
36879: LD_VAR 0 4
36883: PUSH
36884: LD_INT 1
36886: PLUS
36887: ARRAY
36888: ST_TO_ADDR
36889: GO 37020
36891: LD_INT 2
36893: DOUBLE
36894: EQUAL
36895: IFTRUE 36899
36897: GO 36955
36899: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
36900: LD_ADDR_VAR 0 9
36904: PUSH
36905: LD_VAR 0 17
36909: PUSH
36910: LD_VAR 0 18
36914: PUSH
36915: LD_VAR 0 19
36919: PUSH
36920: LD_VAR 0 20
36924: PUSH
36925: LD_VAR 0 21
36929: PUSH
36930: LD_VAR 0 22
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: PUSH
36943: LD_VAR 0 4
36947: PUSH
36948: LD_INT 1
36950: PLUS
36951: ARRAY
36952: ST_TO_ADDR
36953: GO 37020
36955: LD_INT 3
36957: DOUBLE
36958: EQUAL
36959: IFTRUE 36963
36961: GO 37019
36963: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36964: LD_ADDR_VAR 0 9
36968: PUSH
36969: LD_VAR 0 23
36973: PUSH
36974: LD_VAR 0 24
36978: PUSH
36979: LD_VAR 0 25
36983: PUSH
36984: LD_VAR 0 26
36988: PUSH
36989: LD_VAR 0 27
36993: PUSH
36994: LD_VAR 0 28
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: PUSH
37007: LD_VAR 0 4
37011: PUSH
37012: LD_INT 1
37014: PLUS
37015: ARRAY
37016: ST_TO_ADDR
37017: GO 37020
37019: POP
37020: GO 37569
37022: LD_INT 2
37024: DOUBLE
37025: EQUAL
37026: IFTRUE 37036
37028: LD_INT 3
37030: DOUBLE
37031: EQUAL
37032: IFTRUE 37036
37034: GO 37092
37036: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
37037: LD_ADDR_VAR 0 9
37041: PUSH
37042: LD_VAR 0 29
37046: PUSH
37047: LD_VAR 0 30
37051: PUSH
37052: LD_VAR 0 31
37056: PUSH
37057: LD_VAR 0 32
37061: PUSH
37062: LD_VAR 0 33
37066: PUSH
37067: LD_VAR 0 34
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: PUSH
37080: LD_VAR 0 4
37084: PUSH
37085: LD_INT 1
37087: PLUS
37088: ARRAY
37089: ST_TO_ADDR
37090: GO 37569
37092: LD_INT 16
37094: DOUBLE
37095: EQUAL
37096: IFTRUE 37148
37098: LD_INT 17
37100: DOUBLE
37101: EQUAL
37102: IFTRUE 37148
37104: LD_INT 18
37106: DOUBLE
37107: EQUAL
37108: IFTRUE 37148
37110: LD_INT 19
37112: DOUBLE
37113: EQUAL
37114: IFTRUE 37148
37116: LD_INT 20
37118: DOUBLE
37119: EQUAL
37120: IFTRUE 37148
37122: LD_INT 21
37124: DOUBLE
37125: EQUAL
37126: IFTRUE 37148
37128: LD_INT 23
37130: DOUBLE
37131: EQUAL
37132: IFTRUE 37148
37134: LD_INT 24
37136: DOUBLE
37137: EQUAL
37138: IFTRUE 37148
37140: LD_INT 25
37142: DOUBLE
37143: EQUAL
37144: IFTRUE 37148
37146: GO 37204
37148: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
37149: LD_ADDR_VAR 0 9
37153: PUSH
37154: LD_VAR 0 35
37158: PUSH
37159: LD_VAR 0 36
37163: PUSH
37164: LD_VAR 0 37
37168: PUSH
37169: LD_VAR 0 38
37173: PUSH
37174: LD_VAR 0 39
37178: PUSH
37179: LD_VAR 0 40
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: PUSH
37192: LD_VAR 0 4
37196: PUSH
37197: LD_INT 1
37199: PLUS
37200: ARRAY
37201: ST_TO_ADDR
37202: GO 37569
37204: LD_INT 6
37206: DOUBLE
37207: EQUAL
37208: IFTRUE 37260
37210: LD_INT 7
37212: DOUBLE
37213: EQUAL
37214: IFTRUE 37260
37216: LD_INT 8
37218: DOUBLE
37219: EQUAL
37220: IFTRUE 37260
37222: LD_INT 13
37224: DOUBLE
37225: EQUAL
37226: IFTRUE 37260
37228: LD_INT 12
37230: DOUBLE
37231: EQUAL
37232: IFTRUE 37260
37234: LD_INT 15
37236: DOUBLE
37237: EQUAL
37238: IFTRUE 37260
37240: LD_INT 11
37242: DOUBLE
37243: EQUAL
37244: IFTRUE 37260
37246: LD_INT 14
37248: DOUBLE
37249: EQUAL
37250: IFTRUE 37260
37252: LD_INT 10
37254: DOUBLE
37255: EQUAL
37256: IFTRUE 37260
37258: GO 37316
37260: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
37261: LD_ADDR_VAR 0 9
37265: PUSH
37266: LD_VAR 0 41
37270: PUSH
37271: LD_VAR 0 42
37275: PUSH
37276: LD_VAR 0 43
37280: PUSH
37281: LD_VAR 0 44
37285: PUSH
37286: LD_VAR 0 45
37290: PUSH
37291: LD_VAR 0 46
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: PUSH
37304: LD_VAR 0 4
37308: PUSH
37309: LD_INT 1
37311: PLUS
37312: ARRAY
37313: ST_TO_ADDR
37314: GO 37569
37316: LD_INT 36
37318: DOUBLE
37319: EQUAL
37320: IFTRUE 37324
37322: GO 37380
37324: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
37325: LD_ADDR_VAR 0 9
37329: PUSH
37330: LD_VAR 0 47
37334: PUSH
37335: LD_VAR 0 48
37339: PUSH
37340: LD_VAR 0 49
37344: PUSH
37345: LD_VAR 0 50
37349: PUSH
37350: LD_VAR 0 51
37354: PUSH
37355: LD_VAR 0 52
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: PUSH
37368: LD_VAR 0 4
37372: PUSH
37373: LD_INT 1
37375: PLUS
37376: ARRAY
37377: ST_TO_ADDR
37378: GO 37569
37380: LD_INT 4
37382: DOUBLE
37383: EQUAL
37384: IFTRUE 37406
37386: LD_INT 5
37388: DOUBLE
37389: EQUAL
37390: IFTRUE 37406
37392: LD_INT 34
37394: DOUBLE
37395: EQUAL
37396: IFTRUE 37406
37398: LD_INT 37
37400: DOUBLE
37401: EQUAL
37402: IFTRUE 37406
37404: GO 37462
37406: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
37407: LD_ADDR_VAR 0 9
37411: PUSH
37412: LD_VAR 0 53
37416: PUSH
37417: LD_VAR 0 54
37421: PUSH
37422: LD_VAR 0 55
37426: PUSH
37427: LD_VAR 0 56
37431: PUSH
37432: LD_VAR 0 57
37436: PUSH
37437: LD_VAR 0 58
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: PUSH
37450: LD_VAR 0 4
37454: PUSH
37455: LD_INT 1
37457: PLUS
37458: ARRAY
37459: ST_TO_ADDR
37460: GO 37569
37462: LD_INT 31
37464: DOUBLE
37465: EQUAL
37466: IFTRUE 37512
37468: LD_INT 32
37470: DOUBLE
37471: EQUAL
37472: IFTRUE 37512
37474: LD_INT 33
37476: DOUBLE
37477: EQUAL
37478: IFTRUE 37512
37480: LD_INT 27
37482: DOUBLE
37483: EQUAL
37484: IFTRUE 37512
37486: LD_INT 26
37488: DOUBLE
37489: EQUAL
37490: IFTRUE 37512
37492: LD_INT 28
37494: DOUBLE
37495: EQUAL
37496: IFTRUE 37512
37498: LD_INT 29
37500: DOUBLE
37501: EQUAL
37502: IFTRUE 37512
37504: LD_INT 30
37506: DOUBLE
37507: EQUAL
37508: IFTRUE 37512
37510: GO 37568
37512: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
37513: LD_ADDR_VAR 0 9
37517: PUSH
37518: LD_VAR 0 59
37522: PUSH
37523: LD_VAR 0 60
37527: PUSH
37528: LD_VAR 0 61
37532: PUSH
37533: LD_VAR 0 62
37537: PUSH
37538: LD_VAR 0 63
37542: PUSH
37543: LD_VAR 0 64
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: PUSH
37556: LD_VAR 0 4
37560: PUSH
37561: LD_INT 1
37563: PLUS
37564: ARRAY
37565: ST_TO_ADDR
37566: GO 37569
37568: POP
// temp_list2 = [ ] ;
37569: LD_ADDR_VAR 0 10
37573: PUSH
37574: EMPTY
37575: ST_TO_ADDR
// for i in temp_list do
37576: LD_ADDR_VAR 0 8
37580: PUSH
37581: LD_VAR 0 9
37585: PUSH
37586: FOR_IN
37587: IFFALSE 37639
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37589: LD_ADDR_VAR 0 10
37593: PUSH
37594: LD_VAR 0 10
37598: PUSH
37599: LD_VAR 0 8
37603: PUSH
37604: LD_INT 1
37606: ARRAY
37607: PUSH
37608: LD_VAR 0 2
37612: PLUS
37613: PUSH
37614: LD_VAR 0 8
37618: PUSH
37619: LD_INT 2
37621: ARRAY
37622: PUSH
37623: LD_VAR 0 3
37627: PLUS
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: EMPTY
37634: LIST
37635: ADD
37636: ST_TO_ADDR
37637: GO 37586
37639: POP
37640: POP
// result = temp_list2 ;
37641: LD_ADDR_VAR 0 7
37645: PUSH
37646: LD_VAR 0 10
37650: ST_TO_ADDR
// end ;
37651: LD_VAR 0 7
37655: RET
// export function EnemyInRange ( unit , dist ) ; begin
37656: LD_INT 0
37658: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
37659: LD_ADDR_VAR 0 3
37663: PUSH
37664: LD_VAR 0 1
37668: PPUSH
37669: CALL_OW 255
37673: PPUSH
37674: LD_VAR 0 1
37678: PPUSH
37679: CALL_OW 250
37683: PPUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL_OW 251
37693: PPUSH
37694: LD_VAR 0 2
37698: PPUSH
37699: CALL 12323 0 4
37703: PUSH
37704: LD_INT 4
37706: ARRAY
37707: ST_TO_ADDR
// end ;
37708: LD_VAR 0 3
37712: RET
// export function PlayerSeeMe ( unit ) ; begin
37713: LD_INT 0
37715: PPUSH
// result := See ( your_side , unit ) ;
37716: LD_ADDR_VAR 0 2
37720: PUSH
37721: LD_OWVAR 2
37725: PPUSH
37726: LD_VAR 0 1
37730: PPUSH
37731: CALL_OW 292
37735: ST_TO_ADDR
// end ;
37736: LD_VAR 0 2
37740: RET
// export function ReverseDir ( unit ) ; begin
37741: LD_INT 0
37743: PPUSH
// if not unit then
37744: LD_VAR 0 1
37748: NOT
37749: IFFALSE 37753
// exit ;
37751: GO 37799
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
37753: LD_ADDR_VAR 0 2
37757: PUSH
37758: LD_INT 3
37760: PUSH
37761: LD_INT 4
37763: PUSH
37764: LD_INT 5
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: PUSH
37784: LD_VAR 0 1
37788: PPUSH
37789: CALL_OW 254
37793: PUSH
37794: LD_INT 1
37796: PLUS
37797: ARRAY
37798: ST_TO_ADDR
// end ;
37799: LD_VAR 0 2
37803: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
37804: LD_INT 0
37806: PPUSH
37807: PPUSH
37808: PPUSH
37809: PPUSH
37810: PPUSH
// if not hexes then
37811: LD_VAR 0 2
37815: NOT
37816: IFFALSE 37820
// exit ;
37818: GO 37968
// dist := 9999 ;
37820: LD_ADDR_VAR 0 5
37824: PUSH
37825: LD_INT 9999
37827: ST_TO_ADDR
// for i = 1 to hexes do
37828: LD_ADDR_VAR 0 4
37832: PUSH
37833: DOUBLE
37834: LD_INT 1
37836: DEC
37837: ST_TO_ADDR
37838: LD_VAR 0 2
37842: PUSH
37843: FOR_TO
37844: IFFALSE 37956
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
37846: LD_VAR 0 1
37850: PPUSH
37851: LD_VAR 0 2
37855: PUSH
37856: LD_VAR 0 4
37860: ARRAY
37861: PUSH
37862: LD_INT 1
37864: ARRAY
37865: PPUSH
37866: LD_VAR 0 2
37870: PUSH
37871: LD_VAR 0 4
37875: ARRAY
37876: PUSH
37877: LD_INT 2
37879: ARRAY
37880: PPUSH
37881: CALL_OW 297
37885: PUSH
37886: LD_VAR 0 5
37890: LESS
37891: IFFALSE 37954
// begin hex := hexes [ i ] ;
37893: LD_ADDR_VAR 0 7
37897: PUSH
37898: LD_VAR 0 2
37902: PUSH
37903: LD_VAR 0 4
37907: ARRAY
37908: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37909: LD_ADDR_VAR 0 5
37913: PUSH
37914: LD_VAR 0 1
37918: PPUSH
37919: LD_VAR 0 2
37923: PUSH
37924: LD_VAR 0 4
37928: ARRAY
37929: PUSH
37930: LD_INT 1
37932: ARRAY
37933: PPUSH
37934: LD_VAR 0 2
37938: PUSH
37939: LD_VAR 0 4
37943: ARRAY
37944: PUSH
37945: LD_INT 2
37947: ARRAY
37948: PPUSH
37949: CALL_OW 297
37953: ST_TO_ADDR
// end ; end ;
37954: GO 37843
37956: POP
37957: POP
// result := hex ;
37958: LD_ADDR_VAR 0 3
37962: PUSH
37963: LD_VAR 0 7
37967: ST_TO_ADDR
// end ;
37968: LD_VAR 0 3
37972: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37973: LD_INT 0
37975: PPUSH
37976: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37977: LD_VAR 0 1
37981: NOT
37982: PUSH
37983: LD_VAR 0 1
37987: PUSH
37988: LD_INT 21
37990: PUSH
37991: LD_INT 2
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 23
38000: PUSH
38001: LD_INT 2
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PPUSH
38012: CALL_OW 69
38016: IN
38017: NOT
38018: OR
38019: IFFALSE 38023
// exit ;
38021: GO 38070
// for i = 1 to 3 do
38023: LD_ADDR_VAR 0 3
38027: PUSH
38028: DOUBLE
38029: LD_INT 1
38031: DEC
38032: ST_TO_ADDR
38033: LD_INT 3
38035: PUSH
38036: FOR_TO
38037: IFFALSE 38068
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
38039: LD_VAR 0 1
38043: PPUSH
38044: CALL_OW 250
38048: PPUSH
38049: LD_VAR 0 1
38053: PPUSH
38054: CALL_OW 251
38058: PPUSH
38059: LD_INT 1
38061: PPUSH
38062: CALL_OW 453
38066: GO 38036
38068: POP
38069: POP
// end ;
38070: LD_VAR 0 2
38074: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
38075: LD_INT 0
38077: PPUSH
38078: PPUSH
38079: PPUSH
38080: PPUSH
38081: PPUSH
38082: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
38083: LD_VAR 0 1
38087: NOT
38088: PUSH
38089: LD_VAR 0 2
38093: NOT
38094: OR
38095: PUSH
38096: LD_VAR 0 1
38100: PPUSH
38101: CALL_OW 314
38105: OR
38106: IFFALSE 38110
// exit ;
38108: GO 38551
// x := GetX ( enemy_unit ) ;
38110: LD_ADDR_VAR 0 7
38114: PUSH
38115: LD_VAR 0 2
38119: PPUSH
38120: CALL_OW 250
38124: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
38125: LD_ADDR_VAR 0 8
38129: PUSH
38130: LD_VAR 0 2
38134: PPUSH
38135: CALL_OW 251
38139: ST_TO_ADDR
// if not x or not y then
38140: LD_VAR 0 7
38144: NOT
38145: PUSH
38146: LD_VAR 0 8
38150: NOT
38151: OR
38152: IFFALSE 38156
// exit ;
38154: GO 38551
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
38156: LD_ADDR_VAR 0 6
38160: PUSH
38161: LD_VAR 0 7
38165: PPUSH
38166: LD_INT 0
38168: PPUSH
38169: LD_INT 4
38171: PPUSH
38172: CALL_OW 272
38176: PUSH
38177: LD_VAR 0 8
38181: PPUSH
38182: LD_INT 0
38184: PPUSH
38185: LD_INT 4
38187: PPUSH
38188: CALL_OW 273
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_VAR 0 7
38201: PPUSH
38202: LD_INT 1
38204: PPUSH
38205: LD_INT 4
38207: PPUSH
38208: CALL_OW 272
38212: PUSH
38213: LD_VAR 0 8
38217: PPUSH
38218: LD_INT 1
38220: PPUSH
38221: LD_INT 4
38223: PPUSH
38224: CALL_OW 273
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_VAR 0 7
38237: PPUSH
38238: LD_INT 2
38240: PPUSH
38241: LD_INT 4
38243: PPUSH
38244: CALL_OW 272
38248: PUSH
38249: LD_VAR 0 8
38253: PPUSH
38254: LD_INT 2
38256: PPUSH
38257: LD_INT 4
38259: PPUSH
38260: CALL_OW 273
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_VAR 0 7
38273: PPUSH
38274: LD_INT 3
38276: PPUSH
38277: LD_INT 4
38279: PPUSH
38280: CALL_OW 272
38284: PUSH
38285: LD_VAR 0 8
38289: PPUSH
38290: LD_INT 3
38292: PPUSH
38293: LD_INT 4
38295: PPUSH
38296: CALL_OW 273
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_VAR 0 7
38309: PPUSH
38310: LD_INT 4
38312: PPUSH
38313: LD_INT 4
38315: PPUSH
38316: CALL_OW 272
38320: PUSH
38321: LD_VAR 0 8
38325: PPUSH
38326: LD_INT 4
38328: PPUSH
38329: LD_INT 4
38331: PPUSH
38332: CALL_OW 273
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_VAR 0 7
38345: PPUSH
38346: LD_INT 5
38348: PPUSH
38349: LD_INT 4
38351: PPUSH
38352: CALL_OW 272
38356: PUSH
38357: LD_VAR 0 8
38361: PPUSH
38362: LD_INT 5
38364: PPUSH
38365: LD_INT 4
38367: PPUSH
38368: CALL_OW 273
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: ST_TO_ADDR
// for i = tmp downto 1 do
38385: LD_ADDR_VAR 0 4
38389: PUSH
38390: DOUBLE
38391: LD_VAR 0 6
38395: INC
38396: ST_TO_ADDR
38397: LD_INT 1
38399: PUSH
38400: FOR_DOWNTO
38401: IFFALSE 38502
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
38403: LD_VAR 0 6
38407: PUSH
38408: LD_VAR 0 4
38412: ARRAY
38413: PUSH
38414: LD_INT 1
38416: ARRAY
38417: PPUSH
38418: LD_VAR 0 6
38422: PUSH
38423: LD_VAR 0 4
38427: ARRAY
38428: PUSH
38429: LD_INT 2
38431: ARRAY
38432: PPUSH
38433: CALL_OW 488
38437: NOT
38438: PUSH
38439: LD_VAR 0 6
38443: PUSH
38444: LD_VAR 0 4
38448: ARRAY
38449: PUSH
38450: LD_INT 1
38452: ARRAY
38453: PPUSH
38454: LD_VAR 0 6
38458: PUSH
38459: LD_VAR 0 4
38463: ARRAY
38464: PUSH
38465: LD_INT 2
38467: ARRAY
38468: PPUSH
38469: CALL_OW 428
38473: PUSH
38474: LD_INT 0
38476: NONEQUAL
38477: OR
38478: IFFALSE 38500
// tmp := Delete ( tmp , i ) ;
38480: LD_ADDR_VAR 0 6
38484: PUSH
38485: LD_VAR 0 6
38489: PPUSH
38490: LD_VAR 0 4
38494: PPUSH
38495: CALL_OW 3
38499: ST_TO_ADDR
38500: GO 38400
38502: POP
38503: POP
// j := GetClosestHex ( unit , tmp ) ;
38504: LD_ADDR_VAR 0 5
38508: PUSH
38509: LD_VAR 0 1
38513: PPUSH
38514: LD_VAR 0 6
38518: PPUSH
38519: CALL 37804 0 2
38523: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
38524: LD_VAR 0 1
38528: PPUSH
38529: LD_VAR 0 5
38533: PUSH
38534: LD_INT 1
38536: ARRAY
38537: PPUSH
38538: LD_VAR 0 5
38542: PUSH
38543: LD_INT 2
38545: ARRAY
38546: PPUSH
38547: CALL_OW 111
// end ;
38551: LD_VAR 0 3
38555: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38556: LD_INT 0
38558: PPUSH
38559: PPUSH
38560: PPUSH
// uc_side = 0 ;
38561: LD_ADDR_OWVAR 20
38565: PUSH
38566: LD_INT 0
38568: ST_TO_ADDR
// uc_nation = 0 ;
38569: LD_ADDR_OWVAR 21
38573: PUSH
38574: LD_INT 0
38576: ST_TO_ADDR
// InitHc ;
38577: CALL_OW 19
// InitVc ;
38581: CALL_OW 20
// if mastodonts then
38585: LD_VAR 0 6
38589: IFFALSE 38656
// for i = 1 to mastodonts do
38591: LD_ADDR_VAR 0 11
38595: PUSH
38596: DOUBLE
38597: LD_INT 1
38599: DEC
38600: ST_TO_ADDR
38601: LD_VAR 0 6
38605: PUSH
38606: FOR_TO
38607: IFFALSE 38654
// begin vc_chassis := 31 ;
38609: LD_ADDR_OWVAR 37
38613: PUSH
38614: LD_INT 31
38616: ST_TO_ADDR
// vc_control := control_rider ;
38617: LD_ADDR_OWVAR 38
38621: PUSH
38622: LD_INT 4
38624: ST_TO_ADDR
// animal := CreateVehicle ;
38625: LD_ADDR_VAR 0 12
38629: PUSH
38630: CALL_OW 45
38634: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
38635: LD_VAR 0 12
38639: PPUSH
38640: LD_VAR 0 8
38644: PPUSH
38645: LD_INT 0
38647: PPUSH
38648: CALL_OW 49
// end ;
38652: GO 38606
38654: POP
38655: POP
// if horses then
38656: LD_VAR 0 5
38660: IFFALSE 38727
// for i = 1 to horses do
38662: LD_ADDR_VAR 0 11
38666: PUSH
38667: DOUBLE
38668: LD_INT 1
38670: DEC
38671: ST_TO_ADDR
38672: LD_VAR 0 5
38676: PUSH
38677: FOR_TO
38678: IFFALSE 38725
// begin hc_class := 21 ;
38680: LD_ADDR_OWVAR 28
38684: PUSH
38685: LD_INT 21
38687: ST_TO_ADDR
// hc_gallery :=  ;
38688: LD_ADDR_OWVAR 33
38692: PUSH
38693: LD_STRING 
38695: ST_TO_ADDR
// animal := CreateHuman ;
38696: LD_ADDR_VAR 0 12
38700: PUSH
38701: CALL_OW 44
38705: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
38706: LD_VAR 0 12
38710: PPUSH
38711: LD_VAR 0 8
38715: PPUSH
38716: LD_INT 0
38718: PPUSH
38719: CALL_OW 49
// end ;
38723: GO 38677
38725: POP
38726: POP
// if birds then
38727: LD_VAR 0 1
38731: IFFALSE 38798
// for i = 1 to birds do
38733: LD_ADDR_VAR 0 11
38737: PUSH
38738: DOUBLE
38739: LD_INT 1
38741: DEC
38742: ST_TO_ADDR
38743: LD_VAR 0 1
38747: PUSH
38748: FOR_TO
38749: IFFALSE 38796
// begin hc_class = 18 ;
38751: LD_ADDR_OWVAR 28
38755: PUSH
38756: LD_INT 18
38758: ST_TO_ADDR
// hc_gallery =  ;
38759: LD_ADDR_OWVAR 33
38763: PUSH
38764: LD_STRING 
38766: ST_TO_ADDR
// animal := CreateHuman ;
38767: LD_ADDR_VAR 0 12
38771: PUSH
38772: CALL_OW 44
38776: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
38777: LD_VAR 0 12
38781: PPUSH
38782: LD_VAR 0 8
38786: PPUSH
38787: LD_INT 0
38789: PPUSH
38790: CALL_OW 49
// end ;
38794: GO 38748
38796: POP
38797: POP
// if tigers then
38798: LD_VAR 0 2
38802: IFFALSE 38886
// for i = 1 to tigers do
38804: LD_ADDR_VAR 0 11
38808: PUSH
38809: DOUBLE
38810: LD_INT 1
38812: DEC
38813: ST_TO_ADDR
38814: LD_VAR 0 2
38818: PUSH
38819: FOR_TO
38820: IFFALSE 38884
// begin hc_class = class_tiger ;
38822: LD_ADDR_OWVAR 28
38826: PUSH
38827: LD_INT 14
38829: ST_TO_ADDR
// hc_gallery =  ;
38830: LD_ADDR_OWVAR 33
38834: PUSH
38835: LD_STRING 
38837: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38838: LD_ADDR_OWVAR 35
38842: PUSH
38843: LD_INT 7
38845: NEG
38846: PPUSH
38847: LD_INT 7
38849: PPUSH
38850: CALL_OW 12
38854: ST_TO_ADDR
// animal := CreateHuman ;
38855: LD_ADDR_VAR 0 12
38859: PUSH
38860: CALL_OW 44
38864: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
38865: LD_VAR 0 12
38869: PPUSH
38870: LD_VAR 0 8
38874: PPUSH
38875: LD_INT 0
38877: PPUSH
38878: CALL_OW 49
// end ;
38882: GO 38819
38884: POP
38885: POP
// if apemans then
38886: LD_VAR 0 3
38890: IFFALSE 39013
// for i = 1 to apemans do
38892: LD_ADDR_VAR 0 11
38896: PUSH
38897: DOUBLE
38898: LD_INT 1
38900: DEC
38901: ST_TO_ADDR
38902: LD_VAR 0 3
38906: PUSH
38907: FOR_TO
38908: IFFALSE 39011
// begin hc_class = class_apeman ;
38910: LD_ADDR_OWVAR 28
38914: PUSH
38915: LD_INT 12
38917: ST_TO_ADDR
// hc_gallery =  ;
38918: LD_ADDR_OWVAR 33
38922: PUSH
38923: LD_STRING 
38925: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
38926: LD_ADDR_OWVAR 35
38930: PUSH
38931: LD_INT 5
38933: NEG
38934: PPUSH
38935: LD_INT 5
38937: PPUSH
38938: CALL_OW 12
38942: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38943: LD_ADDR_OWVAR 31
38947: PUSH
38948: LD_INT 1
38950: PPUSH
38951: LD_INT 3
38953: PPUSH
38954: CALL_OW 12
38958: PUSH
38959: LD_INT 1
38961: PPUSH
38962: LD_INT 3
38964: PPUSH
38965: CALL_OW 12
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: ST_TO_ADDR
// animal := CreateHuman ;
38982: LD_ADDR_VAR 0 12
38986: PUSH
38987: CALL_OW 44
38991: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
38992: LD_VAR 0 12
38996: PPUSH
38997: LD_VAR 0 8
39001: PPUSH
39002: LD_INT 0
39004: PPUSH
39005: CALL_OW 49
// end ;
39009: GO 38907
39011: POP
39012: POP
// if enchidnas then
39013: LD_VAR 0 4
39017: IFFALSE 39084
// for i = 1 to enchidnas do
39019: LD_ADDR_VAR 0 11
39023: PUSH
39024: DOUBLE
39025: LD_INT 1
39027: DEC
39028: ST_TO_ADDR
39029: LD_VAR 0 4
39033: PUSH
39034: FOR_TO
39035: IFFALSE 39082
// begin hc_class = 13 ;
39037: LD_ADDR_OWVAR 28
39041: PUSH
39042: LD_INT 13
39044: ST_TO_ADDR
// hc_gallery =  ;
39045: LD_ADDR_OWVAR 33
39049: PUSH
39050: LD_STRING 
39052: ST_TO_ADDR
// animal := CreateHuman ;
39053: LD_ADDR_VAR 0 12
39057: PUSH
39058: CALL_OW 44
39062: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
39063: LD_VAR 0 12
39067: PPUSH
39068: LD_VAR 0 8
39072: PPUSH
39073: LD_INT 0
39075: PPUSH
39076: CALL_OW 49
// end ;
39080: GO 39034
39082: POP
39083: POP
// if not wat_area then
39084: LD_VAR 0 9
39088: NOT
39089: IFFALSE 39093
// exit ;
39091: GO 39164
// if fishes then
39093: LD_VAR 0 7
39097: IFFALSE 39164
// for i = 1 to fishes do
39099: LD_ADDR_VAR 0 11
39103: PUSH
39104: DOUBLE
39105: LD_INT 1
39107: DEC
39108: ST_TO_ADDR
39109: LD_VAR 0 7
39113: PUSH
39114: FOR_TO
39115: IFFALSE 39162
// begin hc_class = 20 ;
39117: LD_ADDR_OWVAR 28
39121: PUSH
39122: LD_INT 20
39124: ST_TO_ADDR
// hc_gallery =  ;
39125: LD_ADDR_OWVAR 33
39129: PUSH
39130: LD_STRING 
39132: ST_TO_ADDR
// animal := CreateHuman ;
39133: LD_ADDR_VAR 0 12
39137: PUSH
39138: CALL_OW 44
39142: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
39143: LD_VAR 0 12
39147: PPUSH
39148: LD_VAR 0 9
39152: PPUSH
39153: LD_INT 0
39155: PPUSH
39156: CALL_OW 49
// end ;
39160: GO 39114
39162: POP
39163: POP
// end ;
39164: LD_VAR 0 10
39168: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
39169: LD_INT 0
39171: PPUSH
39172: PPUSH
39173: PPUSH
39174: PPUSH
39175: PPUSH
39176: PPUSH
39177: PPUSH
39178: PPUSH
39179: PPUSH
39180: PPUSH
39181: PPUSH
39182: PPUSH
39183: PPUSH
39184: PPUSH
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
39189: PPUSH
39190: PPUSH
39191: PPUSH
39192: PPUSH
39193: PPUSH
39194: PPUSH
39195: PPUSH
39196: PPUSH
39197: PPUSH
39198: PPUSH
// if not list then
39199: LD_VAR 0 1
39203: NOT
39204: IFFALSE 39208
// exit ;
39206: GO 42451
// base := list [ 1 ] ;
39208: LD_ADDR_VAR 0 3
39212: PUSH
39213: LD_VAR 0 1
39217: PUSH
39218: LD_INT 1
39220: ARRAY
39221: ST_TO_ADDR
// group := list [ 2 ] ;
39222: LD_ADDR_VAR 0 4
39226: PUSH
39227: LD_VAR 0 1
39231: PUSH
39232: LD_INT 2
39234: ARRAY
39235: ST_TO_ADDR
// path := list [ 3 ] ;
39236: LD_ADDR_VAR 0 5
39240: PUSH
39241: LD_VAR 0 1
39245: PUSH
39246: LD_INT 3
39248: ARRAY
39249: ST_TO_ADDR
// flags := list [ 4 ] ;
39250: LD_ADDR_VAR 0 6
39254: PUSH
39255: LD_VAR 0 1
39259: PUSH
39260: LD_INT 4
39262: ARRAY
39263: ST_TO_ADDR
// mined := [ ] ;
39264: LD_ADDR_VAR 0 27
39268: PUSH
39269: EMPTY
39270: ST_TO_ADDR
// bombed := [ ] ;
39271: LD_ADDR_VAR 0 28
39275: PUSH
39276: EMPTY
39277: ST_TO_ADDR
// if not group or not path then
39278: LD_VAR 0 4
39282: NOT
39283: PUSH
39284: LD_VAR 0 5
39288: NOT
39289: OR
39290: IFFALSE 39294
// exit ;
39292: GO 42451
// if flags then
39294: LD_VAR 0 6
39298: IFFALSE 39442
// begin f_ignore_area := flags [ 1 ] ;
39300: LD_ADDR_VAR 0 17
39304: PUSH
39305: LD_VAR 0 6
39309: PUSH
39310: LD_INT 1
39312: ARRAY
39313: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
39314: LD_ADDR_VAR 0 18
39318: PUSH
39319: LD_VAR 0 6
39323: PUSH
39324: LD_INT 2
39326: ARRAY
39327: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
39328: LD_ADDR_VAR 0 19
39332: PUSH
39333: LD_VAR 0 6
39337: PUSH
39338: LD_INT 3
39340: ARRAY
39341: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
39342: LD_ADDR_VAR 0 20
39346: PUSH
39347: LD_VAR 0 6
39351: PUSH
39352: LD_INT 4
39354: ARRAY
39355: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
39356: LD_ADDR_VAR 0 21
39360: PUSH
39361: LD_VAR 0 6
39365: PUSH
39366: LD_INT 5
39368: ARRAY
39369: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
39370: LD_ADDR_VAR 0 22
39374: PUSH
39375: LD_VAR 0 6
39379: PUSH
39380: LD_INT 6
39382: ARRAY
39383: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
39384: LD_ADDR_VAR 0 23
39388: PUSH
39389: LD_VAR 0 6
39393: PUSH
39394: LD_INT 7
39396: ARRAY
39397: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
39398: LD_ADDR_VAR 0 24
39402: PUSH
39403: LD_VAR 0 6
39407: PUSH
39408: LD_INT 8
39410: ARRAY
39411: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
39412: LD_ADDR_VAR 0 25
39416: PUSH
39417: LD_VAR 0 6
39421: PUSH
39422: LD_INT 9
39424: ARRAY
39425: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
39426: LD_ADDR_VAR 0 26
39430: PUSH
39431: LD_VAR 0 6
39435: PUSH
39436: LD_INT 10
39438: ARRAY
39439: ST_TO_ADDR
// end else
39440: GO 39522
// begin f_ignore_area := false ;
39442: LD_ADDR_VAR 0 17
39446: PUSH
39447: LD_INT 0
39449: ST_TO_ADDR
// f_capture := false ;
39450: LD_ADDR_VAR 0 18
39454: PUSH
39455: LD_INT 0
39457: ST_TO_ADDR
// f_ignore_civ := false ;
39458: LD_ADDR_VAR 0 19
39462: PUSH
39463: LD_INT 0
39465: ST_TO_ADDR
// f_murder := false ;
39466: LD_ADDR_VAR 0 20
39470: PUSH
39471: LD_INT 0
39473: ST_TO_ADDR
// f_mines := false ;
39474: LD_ADDR_VAR 0 21
39478: PUSH
39479: LD_INT 0
39481: ST_TO_ADDR
// f_repair := false ;
39482: LD_ADDR_VAR 0 22
39486: PUSH
39487: LD_INT 0
39489: ST_TO_ADDR
// f_heal := false ;
39490: LD_ADDR_VAR 0 23
39494: PUSH
39495: LD_INT 0
39497: ST_TO_ADDR
// f_spacetime := false ;
39498: LD_ADDR_VAR 0 24
39502: PUSH
39503: LD_INT 0
39505: ST_TO_ADDR
// f_attack_depot := false ;
39506: LD_ADDR_VAR 0 25
39510: PUSH
39511: LD_INT 0
39513: ST_TO_ADDR
// f_crawl := false ;
39514: LD_ADDR_VAR 0 26
39518: PUSH
39519: LD_INT 0
39521: ST_TO_ADDR
// end ; units_path := [ ] ;
39522: LD_ADDR_VAR 0 16
39526: PUSH
39527: EMPTY
39528: ST_TO_ADDR
// for i = 1 to group do
39529: LD_ADDR_VAR 0 7
39533: PUSH
39534: DOUBLE
39535: LD_INT 1
39537: DEC
39538: ST_TO_ADDR
39539: LD_VAR 0 4
39543: PUSH
39544: FOR_TO
39545: IFFALSE 39574
// begin units_path := Replace ( units_path , i , path ) ;
39547: LD_ADDR_VAR 0 16
39551: PUSH
39552: LD_VAR 0 16
39556: PPUSH
39557: LD_VAR 0 7
39561: PPUSH
39562: LD_VAR 0 5
39566: PPUSH
39567: CALL_OW 1
39571: ST_TO_ADDR
// end ;
39572: GO 39544
39574: POP
39575: POP
// repeat for i = group downto 1 do
39576: LD_ADDR_VAR 0 7
39580: PUSH
39581: DOUBLE
39582: LD_VAR 0 4
39586: INC
39587: ST_TO_ADDR
39588: LD_INT 1
39590: PUSH
39591: FOR_DOWNTO
39592: IFFALSE 42433
// begin wait ( 0 0$1 ) ;
39594: LD_INT 35
39596: PPUSH
39597: CALL_OW 67
// tmp := [ ] ;
39601: LD_ADDR_VAR 0 14
39605: PUSH
39606: EMPTY
39607: ST_TO_ADDR
// attacking := false ;
39608: LD_ADDR_VAR 0 29
39612: PUSH
39613: LD_INT 0
39615: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
39616: LD_VAR 0 4
39620: PUSH
39621: LD_VAR 0 7
39625: ARRAY
39626: PPUSH
39627: CALL_OW 301
39631: PUSH
39632: LD_VAR 0 4
39636: PUSH
39637: LD_VAR 0 7
39641: ARRAY
39642: NOT
39643: OR
39644: IFFALSE 39688
// begin group := Delete ( group , i ) ;
39646: LD_ADDR_VAR 0 4
39650: PUSH
39651: LD_VAR 0 4
39655: PPUSH
39656: LD_VAR 0 7
39660: PPUSH
39661: CALL_OW 3
39665: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
39666: LD_ADDR_VAR 0 16
39670: PUSH
39671: LD_VAR 0 16
39675: PPUSH
39676: LD_VAR 0 7
39680: PPUSH
39681: CALL_OW 3
39685: ST_TO_ADDR
// continue ;
39686: GO 39591
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
39688: LD_VAR 0 4
39692: PUSH
39693: LD_VAR 0 7
39697: ARRAY
39698: PPUSH
39699: LD_INT 10
39701: PPUSH
39702: CALL 37656 0 2
39706: NOT
39707: PUSH
39708: LD_VAR 0 16
39712: PUSH
39713: LD_VAR 0 7
39717: ARRAY
39718: PUSH
39719: EMPTY
39720: EQUAL
39721: NOT
39722: AND
39723: IFFALSE 39989
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
39725: LD_VAR 0 4
39729: PUSH
39730: LD_VAR 0 7
39734: ARRAY
39735: PPUSH
39736: CALL_OW 262
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: LD_INT 2
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: IN
39751: IFFALSE 39792
// if GetFuel ( group [ i ] ) < 10 then
39753: LD_VAR 0 4
39757: PUSH
39758: LD_VAR 0 7
39762: ARRAY
39763: PPUSH
39764: CALL_OW 261
39768: PUSH
39769: LD_INT 10
39771: LESS
39772: IFFALSE 39792
// SetFuel ( group [ i ] , 12 ) ;
39774: LD_VAR 0 4
39778: PUSH
39779: LD_VAR 0 7
39783: ARRAY
39784: PPUSH
39785: LD_INT 12
39787: PPUSH
39788: CALL_OW 240
// if units_path [ i ] then
39792: LD_VAR 0 16
39796: PUSH
39797: LD_VAR 0 7
39801: ARRAY
39802: IFFALSE 39987
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
39804: LD_VAR 0 4
39808: PUSH
39809: LD_VAR 0 7
39813: ARRAY
39814: PPUSH
39815: LD_VAR 0 16
39819: PUSH
39820: LD_VAR 0 7
39824: ARRAY
39825: PUSH
39826: LD_INT 1
39828: ARRAY
39829: PUSH
39830: LD_INT 1
39832: ARRAY
39833: PPUSH
39834: LD_VAR 0 16
39838: PUSH
39839: LD_VAR 0 7
39843: ARRAY
39844: PUSH
39845: LD_INT 1
39847: ARRAY
39848: PUSH
39849: LD_INT 2
39851: ARRAY
39852: PPUSH
39853: CALL_OW 297
39857: PUSH
39858: LD_INT 6
39860: GREATER
39861: IFFALSE 39936
// begin if not HasTask ( group [ i ] ) then
39863: LD_VAR 0 4
39867: PUSH
39868: LD_VAR 0 7
39872: ARRAY
39873: PPUSH
39874: CALL_OW 314
39878: NOT
39879: IFFALSE 39934
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
39881: LD_VAR 0 4
39885: PUSH
39886: LD_VAR 0 7
39890: ARRAY
39891: PPUSH
39892: LD_VAR 0 16
39896: PUSH
39897: LD_VAR 0 7
39901: ARRAY
39902: PUSH
39903: LD_INT 1
39905: ARRAY
39906: PUSH
39907: LD_INT 1
39909: ARRAY
39910: PPUSH
39911: LD_VAR 0 16
39915: PUSH
39916: LD_VAR 0 7
39920: ARRAY
39921: PUSH
39922: LD_INT 1
39924: ARRAY
39925: PUSH
39926: LD_INT 2
39928: ARRAY
39929: PPUSH
39930: CALL_OW 114
// end else
39934: GO 39987
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
39936: LD_ADDR_VAR 0 15
39940: PUSH
39941: LD_VAR 0 16
39945: PUSH
39946: LD_VAR 0 7
39950: ARRAY
39951: PPUSH
39952: LD_INT 1
39954: PPUSH
39955: CALL_OW 3
39959: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
39960: LD_ADDR_VAR 0 16
39964: PUSH
39965: LD_VAR 0 16
39969: PPUSH
39970: LD_VAR 0 7
39974: PPUSH
39975: LD_VAR 0 15
39979: PPUSH
39980: CALL_OW 1
39984: ST_TO_ADDR
// continue ;
39985: GO 39591
// end ; end ; end else
39987: GO 42431
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
39989: LD_ADDR_VAR 0 14
39993: PUSH
39994: LD_INT 81
39996: PUSH
39997: LD_VAR 0 4
40001: PUSH
40002: LD_VAR 0 7
40006: ARRAY
40007: PPUSH
40008: CALL_OW 255
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PPUSH
40017: CALL_OW 69
40021: ST_TO_ADDR
// if not tmp then
40022: LD_VAR 0 14
40026: NOT
40027: IFFALSE 40031
// continue ;
40029: GO 39591
// if f_ignore_area then
40031: LD_VAR 0 17
40035: IFFALSE 40123
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
40037: LD_ADDR_VAR 0 15
40041: PUSH
40042: LD_VAR 0 14
40046: PPUSH
40047: LD_INT 3
40049: PUSH
40050: LD_INT 92
40052: PUSH
40053: LD_VAR 0 17
40057: PUSH
40058: LD_INT 1
40060: ARRAY
40061: PUSH
40062: LD_VAR 0 17
40066: PUSH
40067: LD_INT 2
40069: ARRAY
40070: PUSH
40071: LD_VAR 0 17
40075: PUSH
40076: LD_INT 3
40078: ARRAY
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PPUSH
40090: CALL_OW 72
40094: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
40095: LD_VAR 0 14
40099: PUSH
40100: LD_VAR 0 15
40104: DIFF
40105: IFFALSE 40123
// tmp := tmp diff tmp2 ;
40107: LD_ADDR_VAR 0 14
40111: PUSH
40112: LD_VAR 0 14
40116: PUSH
40117: LD_VAR 0 15
40121: DIFF
40122: ST_TO_ADDR
// end ; if not f_murder then
40123: LD_VAR 0 20
40127: NOT
40128: IFFALSE 40186
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
40130: LD_ADDR_VAR 0 15
40134: PUSH
40135: LD_VAR 0 14
40139: PPUSH
40140: LD_INT 3
40142: PUSH
40143: LD_INT 50
40145: PUSH
40146: EMPTY
40147: LIST
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PPUSH
40153: CALL_OW 72
40157: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
40158: LD_VAR 0 14
40162: PUSH
40163: LD_VAR 0 15
40167: DIFF
40168: IFFALSE 40186
// tmp := tmp diff tmp2 ;
40170: LD_ADDR_VAR 0 14
40174: PUSH
40175: LD_VAR 0 14
40179: PUSH
40180: LD_VAR 0 15
40184: DIFF
40185: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
40186: LD_ADDR_VAR 0 14
40190: PUSH
40191: LD_VAR 0 4
40195: PUSH
40196: LD_VAR 0 7
40200: ARRAY
40201: PPUSH
40202: LD_VAR 0 14
40206: PPUSH
40207: LD_INT 1
40209: PPUSH
40210: LD_INT 1
40212: PPUSH
40213: CALL 11862 0 4
40217: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
40218: LD_VAR 0 4
40222: PUSH
40223: LD_VAR 0 7
40227: ARRAY
40228: PPUSH
40229: CALL_OW 257
40233: PUSH
40234: LD_INT 1
40236: EQUAL
40237: IFFALSE 40685
// begin if WantPlant ( group [ i ] ) then
40239: LD_VAR 0 4
40243: PUSH
40244: LD_VAR 0 7
40248: ARRAY
40249: PPUSH
40250: CALL 11330 0 1
40254: IFFALSE 40258
// continue ;
40256: GO 39591
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
40258: LD_VAR 0 18
40262: PUSH
40263: LD_VAR 0 4
40267: PUSH
40268: LD_VAR 0 7
40272: ARRAY
40273: PPUSH
40274: CALL_OW 310
40278: NOT
40279: AND
40280: PUSH
40281: LD_VAR 0 14
40285: PUSH
40286: LD_INT 1
40288: ARRAY
40289: PUSH
40290: LD_VAR 0 14
40294: PPUSH
40295: LD_INT 21
40297: PUSH
40298: LD_INT 2
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 58
40307: PUSH
40308: EMPTY
40309: LIST
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PPUSH
40315: CALL_OW 72
40319: IN
40320: AND
40321: IFFALSE 40357
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
40323: LD_VAR 0 4
40327: PUSH
40328: LD_VAR 0 7
40332: ARRAY
40333: PPUSH
40334: LD_VAR 0 14
40338: PUSH
40339: LD_INT 1
40341: ARRAY
40342: PPUSH
40343: CALL_OW 120
// attacking := true ;
40347: LD_ADDR_VAR 0 29
40351: PUSH
40352: LD_INT 1
40354: ST_TO_ADDR
// continue ;
40355: GO 39591
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
40357: LD_VAR 0 26
40361: PUSH
40362: LD_VAR 0 4
40366: PUSH
40367: LD_VAR 0 7
40371: ARRAY
40372: PPUSH
40373: CALL_OW 257
40377: PUSH
40378: LD_INT 1
40380: EQUAL
40381: AND
40382: PUSH
40383: LD_VAR 0 4
40387: PUSH
40388: LD_VAR 0 7
40392: ARRAY
40393: PPUSH
40394: CALL_OW 256
40398: PUSH
40399: LD_INT 800
40401: LESS
40402: AND
40403: PUSH
40404: LD_VAR 0 4
40408: PUSH
40409: LD_VAR 0 7
40413: ARRAY
40414: PPUSH
40415: CALL_OW 318
40419: NOT
40420: AND
40421: IFFALSE 40438
// ComCrawl ( group [ i ] ) ;
40423: LD_VAR 0 4
40427: PUSH
40428: LD_VAR 0 7
40432: ARRAY
40433: PPUSH
40434: CALL_OW 137
// if f_mines then
40438: LD_VAR 0 21
40442: IFFALSE 40685
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
40444: LD_VAR 0 14
40448: PUSH
40449: LD_INT 1
40451: ARRAY
40452: PPUSH
40453: CALL_OW 247
40457: PUSH
40458: LD_INT 3
40460: EQUAL
40461: PUSH
40462: LD_VAR 0 14
40466: PUSH
40467: LD_INT 1
40469: ARRAY
40470: PUSH
40471: LD_VAR 0 27
40475: IN
40476: NOT
40477: AND
40478: IFFALSE 40685
// begin x := GetX ( tmp [ 1 ] ) ;
40480: LD_ADDR_VAR 0 10
40484: PUSH
40485: LD_VAR 0 14
40489: PUSH
40490: LD_INT 1
40492: ARRAY
40493: PPUSH
40494: CALL_OW 250
40498: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
40499: LD_ADDR_VAR 0 11
40503: PUSH
40504: LD_VAR 0 14
40508: PUSH
40509: LD_INT 1
40511: ARRAY
40512: PPUSH
40513: CALL_OW 251
40517: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
40518: LD_ADDR_VAR 0 12
40522: PUSH
40523: LD_VAR 0 4
40527: PUSH
40528: LD_VAR 0 7
40532: ARRAY
40533: PPUSH
40534: CALL 37741 0 1
40538: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
40539: LD_VAR 0 4
40543: PUSH
40544: LD_VAR 0 7
40548: ARRAY
40549: PPUSH
40550: LD_VAR 0 10
40554: PPUSH
40555: LD_VAR 0 11
40559: PPUSH
40560: LD_VAR 0 14
40564: PUSH
40565: LD_INT 1
40567: ARRAY
40568: PPUSH
40569: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
40573: LD_VAR 0 4
40577: PUSH
40578: LD_VAR 0 7
40582: ARRAY
40583: PPUSH
40584: LD_VAR 0 10
40588: PPUSH
40589: LD_VAR 0 12
40593: PPUSH
40594: LD_INT 7
40596: PPUSH
40597: CALL_OW 272
40601: PPUSH
40602: LD_VAR 0 11
40606: PPUSH
40607: LD_VAR 0 12
40611: PPUSH
40612: LD_INT 7
40614: PPUSH
40615: CALL_OW 273
40619: PPUSH
40620: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
40624: LD_VAR 0 4
40628: PUSH
40629: LD_VAR 0 7
40633: ARRAY
40634: PPUSH
40635: LD_INT 71
40637: PPUSH
40638: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
40642: LD_ADDR_VAR 0 27
40646: PUSH
40647: LD_VAR 0 27
40651: PPUSH
40652: LD_VAR 0 27
40656: PUSH
40657: LD_INT 1
40659: PLUS
40660: PPUSH
40661: LD_VAR 0 14
40665: PUSH
40666: LD_INT 1
40668: ARRAY
40669: PPUSH
40670: CALL_OW 1
40674: ST_TO_ADDR
// attacking := true ;
40675: LD_ADDR_VAR 0 29
40679: PUSH
40680: LD_INT 1
40682: ST_TO_ADDR
// continue ;
40683: GO 39591
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
40685: LD_VAR 0 4
40689: PUSH
40690: LD_VAR 0 7
40694: ARRAY
40695: PPUSH
40696: CALL_OW 257
40700: PUSH
40701: LD_INT 17
40703: EQUAL
40704: PUSH
40705: LD_VAR 0 4
40709: PUSH
40710: LD_VAR 0 7
40714: ARRAY
40715: PPUSH
40716: CALL_OW 110
40720: PUSH
40721: LD_INT 71
40723: EQUAL
40724: NOT
40725: AND
40726: IFFALSE 40872
// begin attacking := false ;
40728: LD_ADDR_VAR 0 29
40732: PUSH
40733: LD_INT 0
40735: ST_TO_ADDR
// k := 5 ;
40736: LD_ADDR_VAR 0 9
40740: PUSH
40741: LD_INT 5
40743: ST_TO_ADDR
// if tmp < k then
40744: LD_VAR 0 14
40748: PUSH
40749: LD_VAR 0 9
40753: LESS
40754: IFFALSE 40766
// k := tmp ;
40756: LD_ADDR_VAR 0 9
40760: PUSH
40761: LD_VAR 0 14
40765: ST_TO_ADDR
// for j = 1 to k do
40766: LD_ADDR_VAR 0 8
40770: PUSH
40771: DOUBLE
40772: LD_INT 1
40774: DEC
40775: ST_TO_ADDR
40776: LD_VAR 0 9
40780: PUSH
40781: FOR_TO
40782: IFFALSE 40870
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
40784: LD_VAR 0 14
40788: PUSH
40789: LD_VAR 0 8
40793: ARRAY
40794: PUSH
40795: LD_VAR 0 14
40799: PPUSH
40800: LD_INT 58
40802: PUSH
40803: EMPTY
40804: LIST
40805: PPUSH
40806: CALL_OW 72
40810: IN
40811: NOT
40812: IFFALSE 40868
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
40814: LD_VAR 0 4
40818: PUSH
40819: LD_VAR 0 7
40823: ARRAY
40824: PPUSH
40825: LD_VAR 0 14
40829: PUSH
40830: LD_VAR 0 8
40834: ARRAY
40835: PPUSH
40836: CALL_OW 115
// attacking := true ;
40840: LD_ADDR_VAR 0 29
40844: PUSH
40845: LD_INT 1
40847: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
40848: LD_VAR 0 4
40852: PUSH
40853: LD_VAR 0 7
40857: ARRAY
40858: PPUSH
40859: LD_INT 71
40861: PPUSH
40862: CALL_OW 109
// continue ;
40866: GO 40781
// end ; end ;
40868: GO 40781
40870: POP
40871: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
40872: LD_VAR 0 4
40876: PUSH
40877: LD_VAR 0 7
40881: ARRAY
40882: PPUSH
40883: CALL_OW 257
40887: PUSH
40888: LD_INT 8
40890: EQUAL
40891: PUSH
40892: LD_VAR 0 4
40896: PUSH
40897: LD_VAR 0 7
40901: ARRAY
40902: PPUSH
40903: CALL_OW 264
40907: PUSH
40908: LD_INT 28
40910: PUSH
40911: LD_INT 45
40913: PUSH
40914: LD_INT 7
40916: PUSH
40917: LD_INT 47
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: IN
40926: OR
40927: IFFALSE 41157
// begin attacking := false ;
40929: LD_ADDR_VAR 0 29
40933: PUSH
40934: LD_INT 0
40936: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
40937: LD_VAR 0 14
40941: PUSH
40942: LD_INT 1
40944: ARRAY
40945: PPUSH
40946: CALL_OW 266
40950: PUSH
40951: LD_INT 32
40953: PUSH
40954: LD_INT 31
40956: PUSH
40957: LD_INT 33
40959: PUSH
40960: LD_INT 4
40962: PUSH
40963: LD_INT 5
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: IN
40973: IFFALSE 41157
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
40975: LD_ADDR_VAR 0 9
40979: PUSH
40980: LD_VAR 0 14
40984: PUSH
40985: LD_INT 1
40987: ARRAY
40988: PPUSH
40989: CALL_OW 266
40993: PPUSH
40994: LD_VAR 0 14
40998: PUSH
40999: LD_INT 1
41001: ARRAY
41002: PPUSH
41003: CALL_OW 250
41007: PPUSH
41008: LD_VAR 0 14
41012: PUSH
41013: LD_INT 1
41015: ARRAY
41016: PPUSH
41017: CALL_OW 251
41021: PPUSH
41022: LD_VAR 0 14
41026: PUSH
41027: LD_INT 1
41029: ARRAY
41030: PPUSH
41031: CALL_OW 254
41035: PPUSH
41036: LD_VAR 0 14
41040: PUSH
41041: LD_INT 1
41043: ARRAY
41044: PPUSH
41045: CALL_OW 248
41049: PPUSH
41050: LD_INT 0
41052: PPUSH
41053: CALL 19117 0 6
41057: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
41058: LD_ADDR_VAR 0 8
41062: PUSH
41063: LD_VAR 0 4
41067: PUSH
41068: LD_VAR 0 7
41072: ARRAY
41073: PPUSH
41074: LD_VAR 0 9
41078: PPUSH
41079: CALL 37804 0 2
41083: ST_TO_ADDR
// if j then
41084: LD_VAR 0 8
41088: IFFALSE 41157
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41090: LD_VAR 0 8
41094: PUSH
41095: LD_INT 1
41097: ARRAY
41098: PPUSH
41099: LD_VAR 0 8
41103: PUSH
41104: LD_INT 2
41106: ARRAY
41107: PPUSH
41108: CALL_OW 488
41112: IFFALSE 41157
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
41114: LD_VAR 0 4
41118: PUSH
41119: LD_VAR 0 7
41123: ARRAY
41124: PPUSH
41125: LD_VAR 0 8
41129: PUSH
41130: LD_INT 1
41132: ARRAY
41133: PPUSH
41134: LD_VAR 0 8
41138: PUSH
41139: LD_INT 2
41141: ARRAY
41142: PPUSH
41143: CALL_OW 116
// attacking := true ;
41147: LD_ADDR_VAR 0 29
41151: PUSH
41152: LD_INT 1
41154: ST_TO_ADDR
// continue ;
41155: GO 39591
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
41157: LD_VAR 0 4
41161: PUSH
41162: LD_VAR 0 7
41166: ARRAY
41167: PPUSH
41168: CALL_OW 265
41172: PUSH
41173: LD_INT 11
41175: EQUAL
41176: IFFALSE 41454
// begin k := 10 ;
41178: LD_ADDR_VAR 0 9
41182: PUSH
41183: LD_INT 10
41185: ST_TO_ADDR
// x := 0 ;
41186: LD_ADDR_VAR 0 10
41190: PUSH
41191: LD_INT 0
41193: ST_TO_ADDR
// if tmp < k then
41194: LD_VAR 0 14
41198: PUSH
41199: LD_VAR 0 9
41203: LESS
41204: IFFALSE 41216
// k := tmp ;
41206: LD_ADDR_VAR 0 9
41210: PUSH
41211: LD_VAR 0 14
41215: ST_TO_ADDR
// for j = k downto 1 do
41216: LD_ADDR_VAR 0 8
41220: PUSH
41221: DOUBLE
41222: LD_VAR 0 9
41226: INC
41227: ST_TO_ADDR
41228: LD_INT 1
41230: PUSH
41231: FOR_DOWNTO
41232: IFFALSE 41307
// begin if GetType ( tmp [ j ] ) = unit_human then
41234: LD_VAR 0 14
41238: PUSH
41239: LD_VAR 0 8
41243: ARRAY
41244: PPUSH
41245: CALL_OW 247
41249: PUSH
41250: LD_INT 1
41252: EQUAL
41253: IFFALSE 41305
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
41255: LD_VAR 0 4
41259: PUSH
41260: LD_VAR 0 7
41264: ARRAY
41265: PPUSH
41266: LD_VAR 0 14
41270: PUSH
41271: LD_VAR 0 8
41275: ARRAY
41276: PPUSH
41277: CALL 38075 0 2
// x := tmp [ j ] ;
41281: LD_ADDR_VAR 0 10
41285: PUSH
41286: LD_VAR 0 14
41290: PUSH
41291: LD_VAR 0 8
41295: ARRAY
41296: ST_TO_ADDR
// attacking := true ;
41297: LD_ADDR_VAR 0 29
41301: PUSH
41302: LD_INT 1
41304: ST_TO_ADDR
// end ; end ;
41305: GO 41231
41307: POP
41308: POP
// if not x then
41309: LD_VAR 0 10
41313: NOT
41314: IFFALSE 41454
// begin attacking := true ;
41316: LD_ADDR_VAR 0 29
41320: PUSH
41321: LD_INT 1
41323: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
41324: LD_VAR 0 4
41328: PUSH
41329: LD_VAR 0 7
41333: ARRAY
41334: PPUSH
41335: CALL_OW 250
41339: PPUSH
41340: LD_VAR 0 4
41344: PUSH
41345: LD_VAR 0 7
41349: ARRAY
41350: PPUSH
41351: CALL_OW 251
41355: PPUSH
41356: CALL_OW 546
41360: PUSH
41361: LD_INT 2
41363: ARRAY
41364: PUSH
41365: LD_VAR 0 14
41369: PUSH
41370: LD_INT 1
41372: ARRAY
41373: PPUSH
41374: CALL_OW 250
41378: PPUSH
41379: LD_VAR 0 14
41383: PUSH
41384: LD_INT 1
41386: ARRAY
41387: PPUSH
41388: CALL_OW 251
41392: PPUSH
41393: CALL_OW 546
41397: PUSH
41398: LD_INT 2
41400: ARRAY
41401: EQUAL
41402: IFFALSE 41430
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
41404: LD_VAR 0 4
41408: PUSH
41409: LD_VAR 0 7
41413: ARRAY
41414: PPUSH
41415: LD_VAR 0 14
41419: PUSH
41420: LD_INT 1
41422: ARRAY
41423: PPUSH
41424: CALL 38075 0 2
41428: GO 41454
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
41430: LD_VAR 0 4
41434: PUSH
41435: LD_VAR 0 7
41439: ARRAY
41440: PPUSH
41441: LD_VAR 0 14
41445: PUSH
41446: LD_INT 1
41448: ARRAY
41449: PPUSH
41450: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
41454: LD_VAR 0 4
41458: PUSH
41459: LD_VAR 0 7
41463: ARRAY
41464: PPUSH
41465: CALL_OW 264
41469: PUSH
41470: LD_INT 29
41472: EQUAL
41473: IFFALSE 41839
// begin if WantsToAttack ( group [ i ] ) in bombed then
41475: LD_VAR 0 4
41479: PUSH
41480: LD_VAR 0 7
41484: ARRAY
41485: PPUSH
41486: CALL_OW 319
41490: PUSH
41491: LD_VAR 0 28
41495: IN
41496: IFFALSE 41500
// continue ;
41498: GO 39591
// k := 8 ;
41500: LD_ADDR_VAR 0 9
41504: PUSH
41505: LD_INT 8
41507: ST_TO_ADDR
// x := 0 ;
41508: LD_ADDR_VAR 0 10
41512: PUSH
41513: LD_INT 0
41515: ST_TO_ADDR
// if tmp < k then
41516: LD_VAR 0 14
41520: PUSH
41521: LD_VAR 0 9
41525: LESS
41526: IFFALSE 41538
// k := tmp ;
41528: LD_ADDR_VAR 0 9
41532: PUSH
41533: LD_VAR 0 14
41537: ST_TO_ADDR
// for j = 1 to k do
41538: LD_ADDR_VAR 0 8
41542: PUSH
41543: DOUBLE
41544: LD_INT 1
41546: DEC
41547: ST_TO_ADDR
41548: LD_VAR 0 9
41552: PUSH
41553: FOR_TO
41554: IFFALSE 41686
// begin if GetType ( tmp [ j ] ) = unit_building then
41556: LD_VAR 0 14
41560: PUSH
41561: LD_VAR 0 8
41565: ARRAY
41566: PPUSH
41567: CALL_OW 247
41571: PUSH
41572: LD_INT 3
41574: EQUAL
41575: IFFALSE 41684
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
41577: LD_VAR 0 14
41581: PUSH
41582: LD_VAR 0 8
41586: ARRAY
41587: PUSH
41588: LD_VAR 0 28
41592: IN
41593: NOT
41594: PUSH
41595: LD_VAR 0 14
41599: PUSH
41600: LD_VAR 0 8
41604: ARRAY
41605: PPUSH
41606: CALL_OW 313
41610: AND
41611: IFFALSE 41684
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
41613: LD_VAR 0 4
41617: PUSH
41618: LD_VAR 0 7
41622: ARRAY
41623: PPUSH
41624: LD_VAR 0 14
41628: PUSH
41629: LD_VAR 0 8
41633: ARRAY
41634: PPUSH
41635: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
41639: LD_ADDR_VAR 0 28
41643: PUSH
41644: LD_VAR 0 28
41648: PPUSH
41649: LD_VAR 0 28
41653: PUSH
41654: LD_INT 1
41656: PLUS
41657: PPUSH
41658: LD_VAR 0 14
41662: PUSH
41663: LD_VAR 0 8
41667: ARRAY
41668: PPUSH
41669: CALL_OW 1
41673: ST_TO_ADDR
// attacking := true ;
41674: LD_ADDR_VAR 0 29
41678: PUSH
41679: LD_INT 1
41681: ST_TO_ADDR
// break ;
41682: GO 41686
// end ; end ;
41684: GO 41553
41686: POP
41687: POP
// if not attacking and f_attack_depot then
41688: LD_VAR 0 29
41692: NOT
41693: PUSH
41694: LD_VAR 0 25
41698: AND
41699: IFFALSE 41794
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
41701: LD_ADDR_VAR 0 13
41705: PUSH
41706: LD_VAR 0 14
41710: PPUSH
41711: LD_INT 2
41713: PUSH
41714: LD_INT 30
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 30
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: LIST
41738: PPUSH
41739: CALL_OW 72
41743: ST_TO_ADDR
// if z then
41744: LD_VAR 0 13
41748: IFFALSE 41794
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
41750: LD_VAR 0 4
41754: PUSH
41755: LD_VAR 0 7
41759: ARRAY
41760: PPUSH
41761: LD_VAR 0 13
41765: PPUSH
41766: LD_VAR 0 4
41770: PUSH
41771: LD_VAR 0 7
41775: ARRAY
41776: PPUSH
41777: CALL_OW 74
41781: PPUSH
41782: CALL_OW 115
// attacking := true ;
41786: LD_ADDR_VAR 0 29
41790: PUSH
41791: LD_INT 1
41793: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
41794: LD_VAR 0 4
41798: PUSH
41799: LD_VAR 0 7
41803: ARRAY
41804: PPUSH
41805: CALL_OW 256
41809: PUSH
41810: LD_INT 500
41812: LESS
41813: IFFALSE 41839
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
41815: LD_VAR 0 4
41819: PUSH
41820: LD_VAR 0 7
41824: ARRAY
41825: PPUSH
41826: LD_VAR 0 14
41830: PUSH
41831: LD_INT 1
41833: ARRAY
41834: PPUSH
41835: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
41839: LD_VAR 0 4
41843: PUSH
41844: LD_VAR 0 7
41848: ARRAY
41849: PPUSH
41850: CALL_OW 256
41854: PUSH
41855: LD_INT 250
41857: LESS
41858: PUSH
41859: LD_VAR 0 4
41863: PUSH
41864: LD_VAR 0 7
41868: ARRAY
41869: PUSH
41870: LD_INT 21
41872: PUSH
41873: LD_INT 2
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 23
41882: PUSH
41883: LD_INT 2
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PPUSH
41894: CALL_OW 69
41898: IN
41899: AND
41900: IFFALSE 42025
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
41902: LD_ADDR_VAR 0 9
41906: PUSH
41907: LD_OWVAR 3
41911: PUSH
41912: LD_VAR 0 4
41916: PUSH
41917: LD_VAR 0 7
41921: ARRAY
41922: DIFF
41923: PPUSH
41924: LD_VAR 0 4
41928: PUSH
41929: LD_VAR 0 7
41933: ARRAY
41934: PPUSH
41935: CALL_OW 74
41939: ST_TO_ADDR
// if not k then
41940: LD_VAR 0 9
41944: NOT
41945: IFFALSE 41949
// continue ;
41947: GO 39591
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
41949: LD_VAR 0 9
41953: PUSH
41954: LD_INT 81
41956: PUSH
41957: LD_VAR 0 4
41961: PUSH
41962: LD_VAR 0 7
41966: ARRAY
41967: PPUSH
41968: CALL_OW 255
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PPUSH
41977: CALL_OW 69
41981: IN
41982: PUSH
41983: LD_VAR 0 9
41987: PPUSH
41988: LD_VAR 0 4
41992: PUSH
41993: LD_VAR 0 7
41997: ARRAY
41998: PPUSH
41999: CALL_OW 296
42003: PUSH
42004: LD_INT 5
42006: LESS
42007: AND
42008: IFFALSE 42025
// ComAutodestruct ( group [ i ] ) ;
42010: LD_VAR 0 4
42014: PUSH
42015: LD_VAR 0 7
42019: ARRAY
42020: PPUSH
42021: CALL 37973 0 1
// end ; if f_attack_depot then
42025: LD_VAR 0 25
42029: IFFALSE 42141
// begin k := 6 ;
42031: LD_ADDR_VAR 0 9
42035: PUSH
42036: LD_INT 6
42038: ST_TO_ADDR
// if tmp < k then
42039: LD_VAR 0 14
42043: PUSH
42044: LD_VAR 0 9
42048: LESS
42049: IFFALSE 42061
// k := tmp ;
42051: LD_ADDR_VAR 0 9
42055: PUSH
42056: LD_VAR 0 14
42060: ST_TO_ADDR
// for j = 1 to k do
42061: LD_ADDR_VAR 0 8
42065: PUSH
42066: DOUBLE
42067: LD_INT 1
42069: DEC
42070: ST_TO_ADDR
42071: LD_VAR 0 9
42075: PUSH
42076: FOR_TO
42077: IFFALSE 42139
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
42079: LD_VAR 0 8
42083: PPUSH
42084: CALL_OW 266
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: IN
42099: IFFALSE 42137
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
42101: LD_VAR 0 4
42105: PUSH
42106: LD_VAR 0 7
42110: ARRAY
42111: PPUSH
42112: LD_VAR 0 14
42116: PUSH
42117: LD_VAR 0 8
42121: ARRAY
42122: PPUSH
42123: CALL_OW 115
// attacking := true ;
42127: LD_ADDR_VAR 0 29
42131: PUSH
42132: LD_INT 1
42134: ST_TO_ADDR
// break ;
42135: GO 42139
// end ;
42137: GO 42076
42139: POP
42140: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
42141: LD_VAR 0 4
42145: PUSH
42146: LD_VAR 0 7
42150: ARRAY
42151: PPUSH
42152: CALL_OW 302
42156: PUSH
42157: LD_VAR 0 29
42161: NOT
42162: AND
42163: IFFALSE 42431
// begin if GetTag ( group [ i ] ) = 71 then
42165: LD_VAR 0 4
42169: PUSH
42170: LD_VAR 0 7
42174: ARRAY
42175: PPUSH
42176: CALL_OW 110
42180: PUSH
42181: LD_INT 71
42183: EQUAL
42184: IFFALSE 42225
// begin if HasTask ( group [ i ] ) then
42186: LD_VAR 0 4
42190: PUSH
42191: LD_VAR 0 7
42195: ARRAY
42196: PPUSH
42197: CALL_OW 314
42201: IFFALSE 42207
// continue else
42203: GO 39591
42205: GO 42225
// SetTag ( group [ i ] , 0 ) ;
42207: LD_VAR 0 4
42211: PUSH
42212: LD_VAR 0 7
42216: ARRAY
42217: PPUSH
42218: LD_INT 0
42220: PPUSH
42221: CALL_OW 109
// end ; k := 8 ;
42225: LD_ADDR_VAR 0 9
42229: PUSH
42230: LD_INT 8
42232: ST_TO_ADDR
// x := 0 ;
42233: LD_ADDR_VAR 0 10
42237: PUSH
42238: LD_INT 0
42240: ST_TO_ADDR
// if tmp < k then
42241: LD_VAR 0 14
42245: PUSH
42246: LD_VAR 0 9
42250: LESS
42251: IFFALSE 42263
// k := tmp ;
42253: LD_ADDR_VAR 0 9
42257: PUSH
42258: LD_VAR 0 14
42262: ST_TO_ADDR
// for j = 1 to k do
42263: LD_ADDR_VAR 0 8
42267: PUSH
42268: DOUBLE
42269: LD_INT 1
42271: DEC
42272: ST_TO_ADDR
42273: LD_VAR 0 9
42277: PUSH
42278: FOR_TO
42279: IFFALSE 42377
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
42281: LD_VAR 0 14
42285: PUSH
42286: LD_VAR 0 8
42290: ARRAY
42291: PPUSH
42292: CALL_OW 247
42296: PUSH
42297: LD_INT 1
42299: EQUAL
42300: PUSH
42301: LD_VAR 0 14
42305: PUSH
42306: LD_VAR 0 8
42310: ARRAY
42311: PPUSH
42312: CALL_OW 256
42316: PUSH
42317: LD_INT 250
42319: LESS
42320: PUSH
42321: LD_VAR 0 20
42325: AND
42326: PUSH
42327: LD_VAR 0 20
42331: NOT
42332: PUSH
42333: LD_VAR 0 14
42337: PUSH
42338: LD_VAR 0 8
42342: ARRAY
42343: PPUSH
42344: CALL_OW 256
42348: PUSH
42349: LD_INT 250
42351: GREATEREQUAL
42352: AND
42353: OR
42354: AND
42355: IFFALSE 42375
// begin x := tmp [ j ] ;
42357: LD_ADDR_VAR 0 10
42361: PUSH
42362: LD_VAR 0 14
42366: PUSH
42367: LD_VAR 0 8
42371: ARRAY
42372: ST_TO_ADDR
// break ;
42373: GO 42377
// end ;
42375: GO 42278
42377: POP
42378: POP
// if x then
42379: LD_VAR 0 10
42383: IFFALSE 42407
// ComAttackUnit ( group [ i ] , x ) else
42385: LD_VAR 0 4
42389: PUSH
42390: LD_VAR 0 7
42394: ARRAY
42395: PPUSH
42396: LD_VAR 0 10
42400: PPUSH
42401: CALL_OW 115
42405: GO 42431
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
42407: LD_VAR 0 4
42411: PUSH
42412: LD_VAR 0 7
42416: ARRAY
42417: PPUSH
42418: LD_VAR 0 14
42422: PUSH
42423: LD_INT 1
42425: ARRAY
42426: PPUSH
42427: CALL_OW 115
// end ; end ; end ;
42431: GO 39591
42433: POP
42434: POP
// wait ( 0 0$1 ) ;
42435: LD_INT 35
42437: PPUSH
42438: CALL_OW 67
// until group = [ ] ;
42442: LD_VAR 0 4
42446: PUSH
42447: EMPTY
42448: EQUAL
42449: IFFALSE 39576
// end ;
42451: LD_VAR 0 2
42455: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42456: LD_INT 0
42458: PPUSH
42459: PPUSH
42460: PPUSH
42461: PPUSH
// if not base_units then
42462: LD_VAR 0 1
42466: NOT
42467: IFFALSE 42471
// exit ;
42469: GO 42558
// result := false ;
42471: LD_ADDR_VAR 0 2
42475: PUSH
42476: LD_INT 0
42478: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42479: LD_ADDR_VAR 0 5
42483: PUSH
42484: LD_VAR 0 1
42488: PPUSH
42489: LD_INT 21
42491: PUSH
42492: LD_INT 3
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PPUSH
42499: CALL_OW 72
42503: ST_TO_ADDR
// if not tmp then
42504: LD_VAR 0 5
42508: NOT
42509: IFFALSE 42513
// exit ;
42511: GO 42558
// for i in tmp do
42513: LD_ADDR_VAR 0 3
42517: PUSH
42518: LD_VAR 0 5
42522: PUSH
42523: FOR_IN
42524: IFFALSE 42556
// begin result := EnemyInRange ( i , 22 ) ;
42526: LD_ADDR_VAR 0 2
42530: PUSH
42531: LD_VAR 0 3
42535: PPUSH
42536: LD_INT 22
42538: PPUSH
42539: CALL 37656 0 2
42543: ST_TO_ADDR
// if result then
42544: LD_VAR 0 2
42548: IFFALSE 42554
// exit ;
42550: POP
42551: POP
42552: GO 42558
// end ;
42554: GO 42523
42556: POP
42557: POP
// end ;
42558: LD_VAR 0 2
42562: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
42563: LD_INT 0
42565: PPUSH
42566: PPUSH
// if not units then
42567: LD_VAR 0 1
42571: NOT
42572: IFFALSE 42576
// exit ;
42574: GO 42646
// result := [ ] ;
42576: LD_ADDR_VAR 0 3
42580: PUSH
42581: EMPTY
42582: ST_TO_ADDR
// for i in units do
42583: LD_ADDR_VAR 0 4
42587: PUSH
42588: LD_VAR 0 1
42592: PUSH
42593: FOR_IN
42594: IFFALSE 42644
// if GetTag ( i ) = tag then
42596: LD_VAR 0 4
42600: PPUSH
42601: CALL_OW 110
42605: PUSH
42606: LD_VAR 0 2
42610: EQUAL
42611: IFFALSE 42642
// result := Insert ( result , result + 1 , i ) ;
42613: LD_ADDR_VAR 0 3
42617: PUSH
42618: LD_VAR 0 3
42622: PPUSH
42623: LD_VAR 0 3
42627: PUSH
42628: LD_INT 1
42630: PLUS
42631: PPUSH
42632: LD_VAR 0 4
42636: PPUSH
42637: CALL_OW 2
42641: ST_TO_ADDR
42642: GO 42593
42644: POP
42645: POP
// end ;
42646: LD_VAR 0 3
42650: RET
// export function IsDriver ( un ) ; begin
42651: LD_INT 0
42653: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42654: LD_ADDR_VAR 0 2
42658: PUSH
42659: LD_VAR 0 1
42663: PUSH
42664: LD_INT 55
42666: PUSH
42667: EMPTY
42668: LIST
42669: PPUSH
42670: CALL_OW 69
42674: IN
42675: ST_TO_ADDR
// end ; end_of_file
42676: LD_VAR 0 2
42680: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit ; export function InitMacro ; var i ; begin
42681: LD_INT 0
42683: PPUSH
42684: PPUSH
// skirmish := false ;
42685: LD_ADDR_EXP 37
42689: PUSH
42690: LD_INT 0
42692: ST_TO_ADDR
// mc_bases := [ ] ;
42693: LD_ADDR_EXP 38
42697: PUSH
42698: EMPTY
42699: ST_TO_ADDR
// mc_sides := [ ] ;
42700: LD_ADDR_EXP 64
42704: PUSH
42705: EMPTY
42706: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
42707: LD_ADDR_EXP 39
42711: PUSH
42712: EMPTY
42713: ST_TO_ADDR
// mc_building_repairs := [ ] ;
42714: LD_ADDR_EXP 40
42718: PUSH
42719: EMPTY
42720: ST_TO_ADDR
// mc_need_heal := [ ] ;
42721: LD_ADDR_EXP 41
42725: PUSH
42726: EMPTY
42727: ST_TO_ADDR
// mc_healers := [ ] ;
42728: LD_ADDR_EXP 42
42732: PUSH
42733: EMPTY
42734: ST_TO_ADDR
// mc_build_list := [ ] ;
42735: LD_ADDR_EXP 43
42739: PUSH
42740: EMPTY
42741: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
42742: LD_ADDR_EXP 70
42746: PUSH
42747: EMPTY
42748: ST_TO_ADDR
// mc_builders := [ ] ;
42749: LD_ADDR_EXP 44
42753: PUSH
42754: EMPTY
42755: ST_TO_ADDR
// mc_construct_list := [ ] ;
42756: LD_ADDR_EXP 45
42760: PUSH
42761: EMPTY
42762: ST_TO_ADDR
// mc_turret_list := [ ] ;
42763: LD_ADDR_EXP 46
42767: PUSH
42768: EMPTY
42769: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
42770: LD_ADDR_EXP 47
42774: PUSH
42775: EMPTY
42776: ST_TO_ADDR
// mc_miners := [ ] ;
42777: LD_ADDR_EXP 52
42781: PUSH
42782: EMPTY
42783: ST_TO_ADDR
// mc_mines := [ ] ;
42784: LD_ADDR_EXP 51
42788: PUSH
42789: EMPTY
42790: ST_TO_ADDR
// mc_minefields := [ ] ;
42791: LD_ADDR_EXP 53
42795: PUSH
42796: EMPTY
42797: ST_TO_ADDR
// mc_crates := [ ] ;
42798: LD_ADDR_EXP 54
42802: PUSH
42803: EMPTY
42804: ST_TO_ADDR
// mc_crates_collector := [ ] ;
42805: LD_ADDR_EXP 55
42809: PUSH
42810: EMPTY
42811: ST_TO_ADDR
// mc_crates_area := [ ] ;
42812: LD_ADDR_EXP 56
42816: PUSH
42817: EMPTY
42818: ST_TO_ADDR
// mc_vehicles := [ ] ;
42819: LD_ADDR_EXP 57
42823: PUSH
42824: EMPTY
42825: ST_TO_ADDR
// mc_attack := [ ] ;
42826: LD_ADDR_EXP 58
42830: PUSH
42831: EMPTY
42832: ST_TO_ADDR
// mc_produce := [ ] ;
42833: LD_ADDR_EXP 59
42837: PUSH
42838: EMPTY
42839: ST_TO_ADDR
// mc_defender := [ ] ;
42840: LD_ADDR_EXP 60
42844: PUSH
42845: EMPTY
42846: ST_TO_ADDR
// mc_parking := [ ] ;
42847: LD_ADDR_EXP 62
42851: PUSH
42852: EMPTY
42853: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
42854: LD_ADDR_EXP 48
42858: PUSH
42859: EMPTY
42860: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
42861: LD_ADDR_EXP 50
42865: PUSH
42866: EMPTY
42867: ST_TO_ADDR
// mc_scan := [ ] ;
42868: LD_ADDR_EXP 61
42872: PUSH
42873: EMPTY
42874: ST_TO_ADDR
// mc_scan_area := [ ] ;
42875: LD_ADDR_EXP 63
42879: PUSH
42880: EMPTY
42881: ST_TO_ADDR
// mc_tech := [ ] ;
42882: LD_ADDR_EXP 65
42886: PUSH
42887: EMPTY
42888: ST_TO_ADDR
// end ;
42889: LD_VAR 0 1
42893: RET
// export function Skirmish_Start ; var i ; begin
42894: LD_INT 0
42896: PPUSH
42897: PPUSH
// for i = 1 to mc_bases do
42898: LD_ADDR_VAR 0 2
42902: PUSH
42903: DOUBLE
42904: LD_INT 1
42906: DEC
42907: ST_TO_ADDR
42908: LD_EXP 38
42912: PUSH
42913: FOR_TO
42914: IFFALSE 43759
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
42916: LD_ADDR_EXP 39
42920: PUSH
42921: LD_EXP 39
42925: PPUSH
42926: LD_VAR 0 2
42930: PPUSH
42931: EMPTY
42932: PPUSH
42933: CALL_OW 1
42937: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
42938: LD_ADDR_EXP 40
42942: PUSH
42943: LD_EXP 40
42947: PPUSH
42948: LD_VAR 0 2
42952: PPUSH
42953: EMPTY
42954: PPUSH
42955: CALL_OW 1
42959: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
42960: LD_ADDR_EXP 41
42964: PUSH
42965: LD_EXP 41
42969: PPUSH
42970: LD_VAR 0 2
42974: PPUSH
42975: EMPTY
42976: PPUSH
42977: CALL_OW 1
42981: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
42982: LD_ADDR_EXP 42
42986: PUSH
42987: LD_EXP 42
42991: PPUSH
42992: LD_VAR 0 2
42996: PPUSH
42997: EMPTY
42998: PUSH
42999: EMPTY
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PPUSH
43005: CALL_OW 1
43009: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
43010: LD_ADDR_EXP 43
43014: PUSH
43015: LD_EXP 43
43019: PPUSH
43020: LD_VAR 0 2
43024: PPUSH
43025: EMPTY
43026: PPUSH
43027: CALL_OW 1
43031: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
43032: LD_ADDR_EXP 70
43036: PUSH
43037: LD_EXP 70
43041: PPUSH
43042: LD_VAR 0 2
43046: PPUSH
43047: EMPTY
43048: PPUSH
43049: CALL_OW 1
43053: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
43054: LD_ADDR_EXP 44
43058: PUSH
43059: LD_EXP 44
43063: PPUSH
43064: LD_VAR 0 2
43068: PPUSH
43069: EMPTY
43070: PPUSH
43071: CALL_OW 1
43075: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
43076: LD_ADDR_EXP 45
43080: PUSH
43081: LD_EXP 45
43085: PPUSH
43086: LD_VAR 0 2
43090: PPUSH
43091: EMPTY
43092: PPUSH
43093: CALL_OW 1
43097: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
43098: LD_ADDR_EXP 46
43102: PUSH
43103: LD_EXP 46
43107: PPUSH
43108: LD_VAR 0 2
43112: PPUSH
43113: EMPTY
43114: PPUSH
43115: CALL_OW 1
43119: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
43120: LD_ADDR_EXP 47
43124: PUSH
43125: LD_EXP 47
43129: PPUSH
43130: LD_VAR 0 2
43134: PPUSH
43135: LD_EXP 38
43139: PUSH
43140: LD_VAR 0 2
43144: ARRAY
43145: PPUSH
43146: LD_INT 2
43148: PUSH
43149: LD_INT 30
43151: PUSH
43152: LD_INT 32
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 30
43161: PUSH
43162: LD_INT 31
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 58
43176: PUSH
43177: EMPTY
43178: LIST
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PPUSH
43184: CALL_OW 72
43188: PPUSH
43189: CALL_OW 1
43193: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
43194: LD_ADDR_EXP 48
43198: PUSH
43199: LD_EXP 48
43203: PPUSH
43204: LD_VAR 0 2
43208: PPUSH
43209: EMPTY
43210: PPUSH
43211: CALL_OW 1
43215: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
43216: LD_ADDR_EXP 52
43220: PUSH
43221: LD_EXP 52
43225: PPUSH
43226: LD_VAR 0 2
43230: PPUSH
43231: EMPTY
43232: PPUSH
43233: CALL_OW 1
43237: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
43238: LD_ADDR_EXP 51
43242: PUSH
43243: LD_EXP 51
43247: PPUSH
43248: LD_VAR 0 2
43252: PPUSH
43253: EMPTY
43254: PPUSH
43255: CALL_OW 1
43259: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
43260: LD_ADDR_EXP 53
43264: PUSH
43265: LD_EXP 53
43269: PPUSH
43270: LD_VAR 0 2
43274: PPUSH
43275: EMPTY
43276: PPUSH
43277: CALL_OW 1
43281: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
43282: LD_ADDR_EXP 54
43286: PUSH
43287: LD_EXP 54
43291: PPUSH
43292: LD_VAR 0 2
43296: PPUSH
43297: EMPTY
43298: PPUSH
43299: CALL_OW 1
43303: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
43304: LD_ADDR_EXP 55
43308: PUSH
43309: LD_EXP 55
43313: PPUSH
43314: LD_VAR 0 2
43318: PPUSH
43319: EMPTY
43320: PPUSH
43321: CALL_OW 1
43325: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
43326: LD_ADDR_EXP 56
43330: PUSH
43331: LD_EXP 56
43335: PPUSH
43336: LD_VAR 0 2
43340: PPUSH
43341: EMPTY
43342: PPUSH
43343: CALL_OW 1
43347: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
43348: LD_ADDR_EXP 57
43352: PUSH
43353: LD_EXP 57
43357: PPUSH
43358: LD_VAR 0 2
43362: PPUSH
43363: EMPTY
43364: PPUSH
43365: CALL_OW 1
43369: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
43370: LD_ADDR_EXP 58
43374: PUSH
43375: LD_EXP 58
43379: PPUSH
43380: LD_VAR 0 2
43384: PPUSH
43385: EMPTY
43386: PPUSH
43387: CALL_OW 1
43391: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
43392: LD_ADDR_EXP 59
43396: PUSH
43397: LD_EXP 59
43401: PPUSH
43402: LD_VAR 0 2
43406: PPUSH
43407: EMPTY
43408: PPUSH
43409: CALL_OW 1
43413: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
43414: LD_ADDR_EXP 60
43418: PUSH
43419: LD_EXP 60
43423: PPUSH
43424: LD_VAR 0 2
43428: PPUSH
43429: EMPTY
43430: PPUSH
43431: CALL_OW 1
43435: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
43436: LD_ADDR_EXP 49
43440: PUSH
43441: LD_EXP 49
43445: PPUSH
43446: LD_VAR 0 2
43450: PPUSH
43451: LD_INT 0
43453: PPUSH
43454: CALL_OW 1
43458: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
43459: LD_ADDR_EXP 62
43463: PUSH
43464: LD_EXP 62
43468: PPUSH
43469: LD_VAR 0 2
43473: PPUSH
43474: LD_INT 0
43476: PPUSH
43477: CALL_OW 1
43481: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
43482: LD_ADDR_EXP 50
43486: PUSH
43487: LD_EXP 50
43491: PPUSH
43492: LD_VAR 0 2
43496: PPUSH
43497: EMPTY
43498: PPUSH
43499: CALL_OW 1
43503: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
43504: LD_ADDR_EXP 61
43508: PUSH
43509: LD_EXP 61
43513: PPUSH
43514: LD_VAR 0 2
43518: PPUSH
43519: LD_INT 0
43521: PPUSH
43522: CALL_OW 1
43526: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
43527: LD_ADDR_EXP 63
43531: PUSH
43532: LD_EXP 63
43536: PPUSH
43537: LD_VAR 0 2
43541: PPUSH
43542: EMPTY
43543: PPUSH
43544: CALL_OW 1
43548: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
43549: LD_ADDR_EXP 66
43553: PUSH
43554: LD_EXP 66
43558: PPUSH
43559: LD_VAR 0 2
43563: PPUSH
43564: LD_INT 0
43566: PPUSH
43567: CALL_OW 1
43571: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
43572: LD_ADDR_EXP 67
43576: PUSH
43577: LD_EXP 67
43581: PPUSH
43582: LD_VAR 0 2
43586: PPUSH
43587: EMPTY
43588: PPUSH
43589: CALL_OW 1
43593: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
43594: LD_ADDR_EXP 68
43598: PUSH
43599: LD_EXP 68
43603: PPUSH
43604: LD_VAR 0 2
43608: PPUSH
43609: EMPTY
43610: PPUSH
43611: CALL_OW 1
43615: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
43616: LD_ADDR_EXP 69
43620: PUSH
43621: LD_EXP 69
43625: PPUSH
43626: LD_VAR 0 2
43630: PPUSH
43631: EMPTY
43632: PPUSH
43633: CALL_OW 1
43637: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
43638: LD_ADDR_EXP 71
43642: PUSH
43643: LD_EXP 71
43647: PPUSH
43648: LD_VAR 0 2
43652: PPUSH
43653: LD_EXP 38
43657: PUSH
43658: LD_VAR 0 2
43662: ARRAY
43663: PPUSH
43664: LD_INT 2
43666: PUSH
43667: LD_INT 30
43669: PUSH
43670: LD_INT 6
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 30
43679: PUSH
43680: LD_INT 7
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 30
43689: PUSH
43690: LD_INT 8
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: PPUSH
43703: CALL_OW 72
43707: PPUSH
43708: CALL_OW 1
43712: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
43713: LD_ADDR_EXP 72
43717: PUSH
43718: LD_EXP 72
43722: PPUSH
43723: LD_VAR 0 2
43727: PPUSH
43728: EMPTY
43729: PPUSH
43730: CALL_OW 1
43734: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
43735: LD_ADDR_EXP 73
43739: PUSH
43740: LD_EXP 73
43744: PPUSH
43745: LD_VAR 0 2
43749: PPUSH
43750: EMPTY
43751: PPUSH
43752: CALL_OW 1
43756: ST_TO_ADDR
// end ;
43757: GO 42913
43759: POP
43760: POP
// MC_InitSides ( ) ;
43761: CALL 52291 0 0
// MC_InitResearch ( ) ;
43765: CALL 52030 0 0
// CustomInitMacro ( ) ;
43769: CALL 161 0 0
// skirmish := true ;
43773: LD_ADDR_EXP 37
43777: PUSH
43778: LD_INT 1
43780: ST_TO_ADDR
// end ;
43781: LD_VAR 0 1
43785: RET
// every 0 0$01 trigger skirmish do
43786: LD_EXP 37
43790: IFFALSE 43909
43792: GO 43794
43794: DISABLE
// begin enable ;
43795: ENABLE
// MC_CheckBuildings ( ) ;
43796: CALL 44354 0 0
// MC_CheckPeopleLife ( ) ;
43800: CALL 44479 0 0
// RaiseSailEvent ( 103 ) ;
43804: LD_INT 103
43806: PPUSH
43807: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
43811: LD_INT 104
43813: PPUSH
43814: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
43818: LD_INT 105
43820: PPUSH
43821: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
43825: LD_INT 106
43827: PPUSH
43828: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
43832: LD_INT 107
43834: PPUSH
43835: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
43839: LD_INT 108
43841: PPUSH
43842: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
43846: LD_INT 109
43848: PPUSH
43849: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
43853: LD_INT 110
43855: PPUSH
43856: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
43860: LD_INT 111
43862: PPUSH
43863: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
43867: LD_INT 112
43869: PPUSH
43870: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
43874: LD_INT 120
43876: PPUSH
43877: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
43881: LD_INT 121
43883: PPUSH
43884: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
43888: LD_INT 122
43890: PPUSH
43891: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
43895: LD_INT 123
43897: PPUSH
43898: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
43902: LD_INT 200
43904: PPUSH
43905: CALL_OW 427
// end ;
43909: END
// every 10 trigger skirmish do var i ;
43910: LD_EXP 37
43914: IFFALSE 44013
43916: GO 43918
43918: DISABLE
43919: LD_INT 0
43921: PPUSH
// begin enable ;
43922: ENABLE
// if not mc_bases then
43923: LD_EXP 38
43927: NOT
43928: IFFALSE 43932
// exit ;
43930: GO 44013
// for i = 1 to mc_bases do
43932: LD_ADDR_VAR 0 1
43936: PUSH
43937: DOUBLE
43938: LD_INT 1
43940: DEC
43941: ST_TO_ADDR
43942: LD_EXP 38
43946: PUSH
43947: FOR_TO
43948: IFFALSE 44011
// if mc_mines [ i ] and mc_miners [ i ] then
43950: LD_EXP 51
43954: PUSH
43955: LD_VAR 0 1
43959: ARRAY
43960: PUSH
43961: LD_EXP 52
43965: PUSH
43966: LD_VAR 0 1
43970: ARRAY
43971: AND
43972: IFFALSE 44009
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
43974: LD_EXP 52
43978: PUSH
43979: LD_VAR 0 1
43983: ARRAY
43984: PUSH
43985: LD_INT 1
43987: ARRAY
43988: PPUSH
43989: CALL_OW 255
43993: PPUSH
43994: LD_EXP 51
43998: PUSH
43999: LD_VAR 0 1
44003: ARRAY
44004: PPUSH
44005: CALL 8487 0 2
44009: GO 43947
44011: POP
44012: POP
// end ;
44013: PPOPN 1
44015: END
// on SailEvent ( event ) do begin if event = 101 then
44016: LD_VAR 0 1
44020: PUSH
44021: LD_INT 101
44023: EQUAL
44024: IFFALSE 44030
// MC_RepairBuildings ( ) ;
44026: CALL 45037 0 0
// if event = 102 then
44030: LD_VAR 0 1
44034: PUSH
44035: LD_INT 102
44037: EQUAL
44038: IFFALSE 44044
// MC_Heal ( ) ;
44040: CALL 45443 0 0
// if event = 103 then
44044: LD_VAR 0 1
44048: PUSH
44049: LD_INT 103
44051: EQUAL
44052: IFFALSE 44058
// MC_Build ( ) ;
44054: CALL 45865 0 0
// if event = 104 then
44058: LD_VAR 0 1
44062: PUSH
44063: LD_INT 104
44065: EQUAL
44066: IFFALSE 44072
// MC_TurretWeapon ( ) ;
44068: CALL 47231 0 0
// if event = 105 then
44072: LD_VAR 0 1
44076: PUSH
44077: LD_INT 105
44079: EQUAL
44080: IFFALSE 44086
// MC_BuildUpgrade ( ) ;
44082: CALL 46782 0 0
// if event = 106 then
44086: LD_VAR 0 1
44090: PUSH
44091: LD_INT 106
44093: EQUAL
44094: IFFALSE 44100
// MC_PlantMines ( ) ;
44096: CALL 47550 0 0
// if event = 107 then
44100: LD_VAR 0 1
44104: PUSH
44105: LD_INT 107
44107: EQUAL
44108: IFFALSE 44114
// MC_CollectCrates ( ) ;
44110: CALL 48557 0 0
// if event = 108 then
44114: LD_VAR 0 1
44118: PUSH
44119: LD_INT 108
44121: EQUAL
44122: IFFALSE 44128
// MC_LinkRemoteControl ( ) ;
44124: CALL 49967 0 0
// if event = 109 then
44128: LD_VAR 0 1
44132: PUSH
44133: LD_INT 109
44135: EQUAL
44136: IFFALSE 44142
// MC_ProduceVehicle ( ) ;
44138: CALL 50148 0 0
// if event = 110 then
44142: LD_VAR 0 1
44146: PUSH
44147: LD_INT 110
44149: EQUAL
44150: IFFALSE 44156
// MC_SendAttack ( ) ;
44152: CALL 50629 0 0
// if event = 111 then
44156: LD_VAR 0 1
44160: PUSH
44161: LD_INT 111
44163: EQUAL
44164: IFFALSE 44170
// MC_Defend ( ) ;
44166: CALL 50737 0 0
// if event = 112 then
44170: LD_VAR 0 1
44174: PUSH
44175: LD_INT 112
44177: EQUAL
44178: IFFALSE 44184
// MC_Research ( ) ;
44180: CALL 51105 0 0
// if event = 120 then
44184: LD_VAR 0 1
44188: PUSH
44189: LD_INT 120
44191: EQUAL
44192: IFFALSE 44198
// MC_RepairVehicle ( ) ;
44194: CALL 52383 0 0
// if event = 121 then
44198: LD_VAR 0 1
44202: PUSH
44203: LD_INT 121
44205: EQUAL
44206: IFFALSE 44212
// MC_TameApe ( ) ;
44208: CALL 53052 0 0
// if event = 122 then
44212: LD_VAR 0 1
44216: PUSH
44217: LD_INT 122
44219: EQUAL
44220: IFFALSE 44226
// MC_ChangeApeClass ( ) ;
44222: CALL 53609 0 0
// if event = 123 then
44226: LD_VAR 0 1
44230: PUSH
44231: LD_INT 123
44233: EQUAL
44234: IFFALSE 44240
// MC_Bazooka ( ) ;
44236: CALL 54243 0 0
// if event = 124 then
44240: LD_VAR 0 1
44244: PUSH
44245: LD_INT 124
44247: EQUAL
44248: IFFALSE 44254
// MC_TeleportExit ( ) ;
44250: CALL 54441 0 0
// if event = 200 then
44254: LD_VAR 0 1
44258: PUSH
44259: LD_INT 200
44261: EQUAL
44262: IFFALSE 44268
// MC_Idle ( ) ;
44264: CALL 55465 0 0
// end ;
44268: PPOPN 1
44270: END
// export function MC_Reset ( base , tag ) ; var i ; begin
44271: LD_INT 0
44273: PPUSH
44274: PPUSH
// if not mc_bases [ base ] or not tag then
44275: LD_EXP 38
44279: PUSH
44280: LD_VAR 0 1
44284: ARRAY
44285: NOT
44286: PUSH
44287: LD_VAR 0 2
44291: NOT
44292: OR
44293: IFFALSE 44297
// exit ;
44295: GO 44349
// for i in mc_bases [ base ] do
44297: LD_ADDR_VAR 0 4
44301: PUSH
44302: LD_EXP 38
44306: PUSH
44307: LD_VAR 0 1
44311: ARRAY
44312: PUSH
44313: FOR_IN
44314: IFFALSE 44347
// if GetTag ( i ) = tag then
44316: LD_VAR 0 4
44320: PPUSH
44321: CALL_OW 110
44325: PUSH
44326: LD_VAR 0 2
44330: EQUAL
44331: IFFALSE 44345
// SetTag ( i , 0 ) ;
44333: LD_VAR 0 4
44337: PPUSH
44338: LD_INT 0
44340: PPUSH
44341: CALL_OW 109
44345: GO 44313
44347: POP
44348: POP
// end ;
44349: LD_VAR 0 3
44353: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
44354: LD_INT 0
44356: PPUSH
44357: PPUSH
44358: PPUSH
// if not mc_bases then
44359: LD_EXP 38
44363: NOT
44364: IFFALSE 44368
// exit ;
44366: GO 44474
// for i = 1 to mc_bases do
44368: LD_ADDR_VAR 0 2
44372: PUSH
44373: DOUBLE
44374: LD_INT 1
44376: DEC
44377: ST_TO_ADDR
44378: LD_EXP 38
44382: PUSH
44383: FOR_TO
44384: IFFALSE 44465
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
44386: LD_ADDR_VAR 0 3
44390: PUSH
44391: LD_EXP 38
44395: PUSH
44396: LD_VAR 0 2
44400: ARRAY
44401: PPUSH
44402: LD_INT 21
44404: PUSH
44405: LD_INT 3
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 3
44414: PUSH
44415: LD_INT 24
44417: PUSH
44418: LD_INT 1000
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PPUSH
44433: CALL_OW 72
44437: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
44438: LD_ADDR_EXP 39
44442: PUSH
44443: LD_EXP 39
44447: PPUSH
44448: LD_VAR 0 2
44452: PPUSH
44453: LD_VAR 0 3
44457: PPUSH
44458: CALL_OW 1
44462: ST_TO_ADDR
// end ;
44463: GO 44383
44465: POP
44466: POP
// RaiseSailEvent ( 101 ) ;
44467: LD_INT 101
44469: PPUSH
44470: CALL_OW 427
// end ;
44474: LD_VAR 0 1
44478: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
44479: LD_INT 0
44481: PPUSH
44482: PPUSH
44483: PPUSH
44484: PPUSH
44485: PPUSH
44486: PPUSH
44487: PPUSH
// if not mc_bases then
44488: LD_EXP 38
44492: NOT
44493: IFFALSE 44497
// exit ;
44495: GO 45032
// for i = 1 to mc_bases do
44497: LD_ADDR_VAR 0 2
44501: PUSH
44502: DOUBLE
44503: LD_INT 1
44505: DEC
44506: ST_TO_ADDR
44507: LD_EXP 38
44511: PUSH
44512: FOR_TO
44513: IFFALSE 45023
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
44515: LD_ADDR_VAR 0 5
44519: PUSH
44520: LD_EXP 38
44524: PUSH
44525: LD_VAR 0 2
44529: ARRAY
44530: PUSH
44531: LD_EXP 67
44535: PUSH
44536: LD_VAR 0 2
44540: ARRAY
44541: UNION
44542: PPUSH
44543: LD_INT 21
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 3
44558: PUSH
44559: LD_INT 54
44561: PUSH
44562: EMPTY
44563: LIST
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 3
44571: PUSH
44572: LD_INT 24
44574: PUSH
44575: LD_INT 700
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: LIST
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PPUSH
44595: CALL_OW 72
44599: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
44600: LD_ADDR_VAR 0 6
44604: PUSH
44605: LD_EXP 38
44609: PUSH
44610: LD_VAR 0 2
44614: ARRAY
44615: PPUSH
44616: LD_INT 21
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 3
44631: PUSH
44632: LD_INT 54
44634: PUSH
44635: EMPTY
44636: LIST
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 3
44644: PUSH
44645: LD_INT 24
44647: PUSH
44648: LD_INT 250
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: LIST
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PPUSH
44668: CALL_OW 72
44672: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
44673: LD_ADDR_VAR 0 7
44677: PUSH
44678: LD_VAR 0 5
44682: PUSH
44683: LD_VAR 0 6
44687: DIFF
44688: ST_TO_ADDR
// if not need_heal_1 then
44689: LD_VAR 0 6
44693: NOT
44694: IFFALSE 44727
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
44696: LD_ADDR_EXP 41
44700: PUSH
44701: LD_EXP 41
44705: PPUSH
44706: LD_VAR 0 2
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PPUSH
44718: EMPTY
44719: PPUSH
44720: CALL 11829 0 3
44724: ST_TO_ADDR
44725: GO 44759
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
44727: LD_ADDR_EXP 41
44731: PUSH
44732: LD_EXP 41
44736: PPUSH
44737: LD_VAR 0 2
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PPUSH
44749: LD_VAR 0 6
44753: PPUSH
44754: CALL 11829 0 3
44758: ST_TO_ADDR
// if not need_heal_2 then
44759: LD_VAR 0 7
44763: NOT
44764: IFFALSE 44797
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
44766: LD_ADDR_EXP 41
44770: PUSH
44771: LD_EXP 41
44775: PPUSH
44776: LD_VAR 0 2
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PPUSH
44788: EMPTY
44789: PPUSH
44790: CALL 11829 0 3
44794: ST_TO_ADDR
44795: GO 44829
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
44797: LD_ADDR_EXP 41
44801: PUSH
44802: LD_EXP 41
44806: PPUSH
44807: LD_VAR 0 2
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PPUSH
44819: LD_VAR 0 7
44823: PPUSH
44824: CALL 11829 0 3
44828: ST_TO_ADDR
// if need_heal_2 then
44829: LD_VAR 0 7
44833: IFFALSE 45005
// for j in need_heal_2 do
44835: LD_ADDR_VAR 0 3
44839: PUSH
44840: LD_VAR 0 7
44844: PUSH
44845: FOR_IN
44846: IFFALSE 45003
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
44848: LD_ADDR_VAR 0 5
44852: PUSH
44853: LD_EXP 38
44857: PUSH
44858: LD_VAR 0 2
44862: ARRAY
44863: PPUSH
44864: LD_INT 2
44866: PUSH
44867: LD_INT 30
44869: PUSH
44870: LD_INT 6
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 30
44879: PUSH
44880: LD_INT 7
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 30
44889: PUSH
44890: LD_INT 8
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 30
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 30
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 25
44919: PUSH
44920: LD_INT 4
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: PPUSH
44936: CALL_OW 72
44940: ST_TO_ADDR
// if tmp then
44941: LD_VAR 0 5
44945: IFFALSE 45001
// begin k := NearestUnitToUnit ( tmp , j ) ;
44947: LD_ADDR_VAR 0 4
44951: PUSH
44952: LD_VAR 0 5
44956: PPUSH
44957: LD_VAR 0 3
44961: PPUSH
44962: CALL_OW 74
44966: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
44967: LD_VAR 0 3
44971: PPUSH
44972: LD_VAR 0 4
44976: PPUSH
44977: CALL_OW 296
44981: PUSH
44982: LD_INT 7
44984: GREATER
44985: IFFALSE 45001
// ComMoveUnit ( j , k ) ;
44987: LD_VAR 0 3
44991: PPUSH
44992: LD_VAR 0 4
44996: PPUSH
44997: CALL_OW 112
// end ; end ;
45001: GO 44845
45003: POP
45004: POP
// if not need_heal_1 and not need_heal_2 then
45005: LD_VAR 0 6
45009: NOT
45010: PUSH
45011: LD_VAR 0 7
45015: NOT
45016: AND
45017: IFFALSE 45021
// continue ;
45019: GO 44512
// end ;
45021: GO 44512
45023: POP
45024: POP
// RaiseSailEvent ( 102 ) ;
45025: LD_INT 102
45027: PPUSH
45028: CALL_OW 427
// end ;
45032: LD_VAR 0 1
45036: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
45037: LD_INT 0
45039: PPUSH
45040: PPUSH
45041: PPUSH
45042: PPUSH
45043: PPUSH
// if not mc_bases then
45044: LD_EXP 38
45048: NOT
45049: IFFALSE 45053
// exit ;
45051: GO 45438
// for i = 1 to mc_bases do
45053: LD_ADDR_VAR 0 2
45057: PUSH
45058: DOUBLE
45059: LD_INT 1
45061: DEC
45062: ST_TO_ADDR
45063: LD_EXP 38
45067: PUSH
45068: FOR_TO
45069: IFFALSE 45436
// begin if not mc_building_need_repair [ i ] then
45071: LD_EXP 39
45075: PUSH
45076: LD_VAR 0 2
45080: ARRAY
45081: NOT
45082: IFFALSE 45120
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
45084: LD_ADDR_EXP 40
45088: PUSH
45089: LD_EXP 40
45093: PPUSH
45094: LD_VAR 0 2
45098: PPUSH
45099: EMPTY
45100: PPUSH
45101: CALL_OW 1
45105: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
45106: LD_VAR 0 2
45110: PPUSH
45111: LD_INT 101
45113: PPUSH
45114: CALL 44271 0 2
// continue ;
45118: GO 45068
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
45120: LD_ADDR_EXP 44
45124: PUSH
45125: LD_EXP 44
45129: PPUSH
45130: LD_VAR 0 2
45134: PPUSH
45135: EMPTY
45136: PPUSH
45137: CALL_OW 1
45141: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
45142: LD_VAR 0 2
45146: PPUSH
45147: LD_INT 103
45149: PPUSH
45150: CALL 44271 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
45154: LD_ADDR_VAR 0 5
45158: PUSH
45159: LD_EXP 38
45163: PUSH
45164: LD_VAR 0 2
45168: ARRAY
45169: PUSH
45170: LD_EXP 67
45174: PUSH
45175: LD_VAR 0 2
45179: ARRAY
45180: UNION
45181: PPUSH
45182: LD_INT 2
45184: PUSH
45185: LD_INT 25
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 25
45197: PUSH
45198: LD_INT 16
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: LIST
45209: PUSH
45210: EMPTY
45211: LIST
45212: PPUSH
45213: CALL_OW 72
45217: ST_TO_ADDR
// if not tmp then
45218: LD_VAR 0 5
45222: NOT
45223: IFFALSE 45227
// continue ;
45225: GO 45068
// for j in tmp do
45227: LD_ADDR_VAR 0 3
45231: PUSH
45232: LD_VAR 0 5
45236: PUSH
45237: FOR_IN
45238: IFFALSE 45432
// begin if mc_need_heal [ i ] then
45240: LD_EXP 41
45244: PUSH
45245: LD_VAR 0 2
45249: ARRAY
45250: IFFALSE 45298
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
45252: LD_VAR 0 3
45256: PUSH
45257: LD_EXP 41
45261: PUSH
45262: LD_VAR 0 2
45266: ARRAY
45267: PUSH
45268: LD_INT 1
45270: ARRAY
45271: IN
45272: PUSH
45273: LD_VAR 0 3
45277: PUSH
45278: LD_EXP 41
45282: PUSH
45283: LD_VAR 0 2
45287: ARRAY
45288: PUSH
45289: LD_INT 2
45291: ARRAY
45292: IN
45293: OR
45294: IFFALSE 45298
// continue ;
45296: GO 45237
// if IsInUnit ( j ) then
45298: LD_VAR 0 3
45302: PPUSH
45303: CALL_OW 310
45307: IFFALSE 45318
// ComExitBuilding ( j ) ;
45309: LD_VAR 0 3
45313: PPUSH
45314: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
45318: LD_VAR 0 3
45322: PUSH
45323: LD_EXP 40
45327: PUSH
45328: LD_VAR 0 2
45332: ARRAY
45333: IN
45334: NOT
45335: IFFALSE 45393
// begin SetTag ( j , 101 ) ;
45337: LD_VAR 0 3
45341: PPUSH
45342: LD_INT 101
45344: PPUSH
45345: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
45349: LD_ADDR_EXP 40
45353: PUSH
45354: LD_EXP 40
45358: PPUSH
45359: LD_VAR 0 2
45363: PUSH
45364: LD_EXP 40
45368: PUSH
45369: LD_VAR 0 2
45373: ARRAY
45374: PUSH
45375: LD_INT 1
45377: PLUS
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PPUSH
45383: LD_VAR 0 3
45387: PPUSH
45388: CALL 11829 0 3
45392: ST_TO_ADDR
// end ; Wait ( 3 ) ;
45393: LD_INT 3
45395: PPUSH
45396: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
45400: LD_VAR 0 3
45404: PPUSH
45405: LD_EXP 39
45409: PUSH
45410: LD_VAR 0 2
45414: ARRAY
45415: PPUSH
45416: LD_VAR 0 3
45420: PPUSH
45421: CALL_OW 74
45425: PPUSH
45426: CALL_OW 130
// end ;
45430: GO 45237
45432: POP
45433: POP
// end ;
45434: GO 45068
45436: POP
45437: POP
// end ;
45438: LD_VAR 0 1
45442: RET
// export function MC_Heal ; var i , j , tmp ; begin
45443: LD_INT 0
45445: PPUSH
45446: PPUSH
45447: PPUSH
45448: PPUSH
// if not mc_bases then
45449: LD_EXP 38
45453: NOT
45454: IFFALSE 45458
// exit ;
45456: GO 45860
// for i = 1 to mc_bases do
45458: LD_ADDR_VAR 0 2
45462: PUSH
45463: DOUBLE
45464: LD_INT 1
45466: DEC
45467: ST_TO_ADDR
45468: LD_EXP 38
45472: PUSH
45473: FOR_TO
45474: IFFALSE 45858
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
45476: LD_EXP 41
45480: PUSH
45481: LD_VAR 0 2
45485: ARRAY
45486: PUSH
45487: LD_INT 1
45489: ARRAY
45490: NOT
45491: PUSH
45492: LD_EXP 41
45496: PUSH
45497: LD_VAR 0 2
45501: ARRAY
45502: PUSH
45503: LD_INT 2
45505: ARRAY
45506: NOT
45507: AND
45508: IFFALSE 45546
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
45510: LD_ADDR_EXP 42
45514: PUSH
45515: LD_EXP 42
45519: PPUSH
45520: LD_VAR 0 2
45524: PPUSH
45525: EMPTY
45526: PPUSH
45527: CALL_OW 1
45531: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
45532: LD_VAR 0 2
45536: PPUSH
45537: LD_INT 102
45539: PPUSH
45540: CALL 44271 0 2
// continue ;
45544: GO 45473
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
45546: LD_ADDR_VAR 0 4
45550: PUSH
45551: LD_EXP 38
45555: PUSH
45556: LD_VAR 0 2
45560: ARRAY
45561: PPUSH
45562: LD_INT 25
45564: PUSH
45565: LD_INT 4
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PPUSH
45572: CALL_OW 72
45576: ST_TO_ADDR
// if not tmp then
45577: LD_VAR 0 4
45581: NOT
45582: IFFALSE 45586
// continue ;
45584: GO 45473
// if mc_taming [ i ] then
45586: LD_EXP 69
45590: PUSH
45591: LD_VAR 0 2
45595: ARRAY
45596: IFFALSE 45620
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
45598: LD_ADDR_EXP 69
45602: PUSH
45603: LD_EXP 69
45607: PPUSH
45608: LD_VAR 0 2
45612: PPUSH
45613: EMPTY
45614: PPUSH
45615: CALL_OW 1
45619: ST_TO_ADDR
// for j in tmp do
45620: LD_ADDR_VAR 0 3
45624: PUSH
45625: LD_VAR 0 4
45629: PUSH
45630: FOR_IN
45631: IFFALSE 45854
// begin if IsInUnit ( j ) then
45633: LD_VAR 0 3
45637: PPUSH
45638: CALL_OW 310
45642: IFFALSE 45653
// ComExitBuilding ( j ) ;
45644: LD_VAR 0 3
45648: PPUSH
45649: CALL_OW 122
// if not j in mc_healers [ i ] then
45653: LD_VAR 0 3
45657: PUSH
45658: LD_EXP 42
45662: PUSH
45663: LD_VAR 0 2
45667: ARRAY
45668: IN
45669: NOT
45670: IFFALSE 45716
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
45672: LD_ADDR_EXP 42
45676: PUSH
45677: LD_EXP 42
45681: PPUSH
45682: LD_VAR 0 2
45686: PUSH
45687: LD_EXP 42
45691: PUSH
45692: LD_VAR 0 2
45696: ARRAY
45697: PUSH
45698: LD_INT 1
45700: PLUS
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PPUSH
45706: LD_VAR 0 3
45710: PPUSH
45711: CALL 11829 0 3
45715: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
45716: LD_VAR 0 3
45720: PPUSH
45721: CALL_OW 110
45725: PUSH
45726: LD_INT 102
45728: NONEQUAL
45729: IFFALSE 45743
// SetTag ( j , 102 ) ;
45731: LD_VAR 0 3
45735: PPUSH
45736: LD_INT 102
45738: PPUSH
45739: CALL_OW 109
// Wait ( 3 ) ;
45743: LD_INT 3
45745: PPUSH
45746: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
45750: LD_EXP 41
45754: PUSH
45755: LD_VAR 0 2
45759: ARRAY
45760: PUSH
45761: LD_INT 1
45763: ARRAY
45764: IFFALSE 45796
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
45766: LD_VAR 0 3
45770: PPUSH
45771: LD_EXP 41
45775: PUSH
45776: LD_VAR 0 2
45780: ARRAY
45781: PUSH
45782: LD_INT 1
45784: ARRAY
45785: PUSH
45786: LD_INT 1
45788: ARRAY
45789: PPUSH
45790: CALL_OW 128
45794: GO 45852
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
45796: LD_VAR 0 3
45800: PPUSH
45801: CALL_OW 314
45805: NOT
45806: PUSH
45807: LD_EXP 41
45811: PUSH
45812: LD_VAR 0 2
45816: ARRAY
45817: PUSH
45818: LD_INT 2
45820: ARRAY
45821: AND
45822: IFFALSE 45852
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
45824: LD_VAR 0 3
45828: PPUSH
45829: LD_EXP 41
45833: PUSH
45834: LD_VAR 0 2
45838: ARRAY
45839: PUSH
45840: LD_INT 2
45842: ARRAY
45843: PUSH
45844: LD_INT 1
45846: ARRAY
45847: PPUSH
45848: CALL_OW 128
// end ;
45852: GO 45630
45854: POP
45855: POP
// end ;
45856: GO 45473
45858: POP
45859: POP
// end ;
45860: LD_VAR 0 1
45864: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
45865: LD_INT 0
45867: PPUSH
45868: PPUSH
45869: PPUSH
45870: PPUSH
// if not mc_bases then
45871: LD_EXP 38
45875: NOT
45876: IFFALSE 45880
// exit ;
45878: GO 46777
// for i = 1 to mc_bases do
45880: LD_ADDR_VAR 0 2
45884: PUSH
45885: DOUBLE
45886: LD_INT 1
45888: DEC
45889: ST_TO_ADDR
45890: LD_EXP 38
45894: PUSH
45895: FOR_TO
45896: IFFALSE 46775
// begin if mc_scan [ i ] then
45898: LD_EXP 61
45902: PUSH
45903: LD_VAR 0 2
45907: ARRAY
45908: IFFALSE 45912
// continue ;
45910: GO 45895
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
45912: LD_EXP 43
45916: PUSH
45917: LD_VAR 0 2
45921: ARRAY
45922: NOT
45923: PUSH
45924: LD_EXP 45
45928: PUSH
45929: LD_VAR 0 2
45933: ARRAY
45934: NOT
45935: AND
45936: PUSH
45937: LD_EXP 44
45941: PUSH
45942: LD_VAR 0 2
45946: ARRAY
45947: AND
45948: IFFALSE 45986
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
45950: LD_ADDR_EXP 44
45954: PUSH
45955: LD_EXP 44
45959: PPUSH
45960: LD_VAR 0 2
45964: PPUSH
45965: EMPTY
45966: PPUSH
45967: CALL_OW 1
45971: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
45972: LD_VAR 0 2
45976: PPUSH
45977: LD_INT 103
45979: PPUSH
45980: CALL 44271 0 2
// continue ;
45984: GO 45895
// end ; if mc_construct_list [ i ] then
45986: LD_EXP 45
45990: PUSH
45991: LD_VAR 0 2
45995: ARRAY
45996: IFFALSE 46216
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
45998: LD_ADDR_VAR 0 4
46002: PUSH
46003: LD_EXP 38
46007: PUSH
46008: LD_VAR 0 2
46012: ARRAY
46013: PPUSH
46014: LD_INT 25
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PPUSH
46024: CALL_OW 72
46028: PUSH
46029: LD_EXP 40
46033: PUSH
46034: LD_VAR 0 2
46038: ARRAY
46039: DIFF
46040: ST_TO_ADDR
// if not tmp then
46041: LD_VAR 0 4
46045: NOT
46046: IFFALSE 46050
// continue ;
46048: GO 45895
// for j in tmp do
46050: LD_ADDR_VAR 0 3
46054: PUSH
46055: LD_VAR 0 4
46059: PUSH
46060: FOR_IN
46061: IFFALSE 46212
// begin if not mc_builders [ i ] then
46063: LD_EXP 44
46067: PUSH
46068: LD_VAR 0 2
46072: ARRAY
46073: NOT
46074: IFFALSE 46132
// begin SetTag ( j , 103 ) ;
46076: LD_VAR 0 3
46080: PPUSH
46081: LD_INT 103
46083: PPUSH
46084: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
46088: LD_ADDR_EXP 44
46092: PUSH
46093: LD_EXP 44
46097: PPUSH
46098: LD_VAR 0 2
46102: PUSH
46103: LD_EXP 44
46107: PUSH
46108: LD_VAR 0 2
46112: ARRAY
46113: PUSH
46114: LD_INT 1
46116: PLUS
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PPUSH
46122: LD_VAR 0 3
46126: PPUSH
46127: CALL 11829 0 3
46131: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
46132: LD_VAR 0 3
46136: PPUSH
46137: CALL_OW 310
46141: IFFALSE 46152
// ComExitBuilding ( j ) ;
46143: LD_VAR 0 3
46147: PPUSH
46148: CALL_OW 122
// wait ( 3 ) ;
46152: LD_INT 3
46154: PPUSH
46155: CALL_OW 67
// if not mc_construct_list [ i ] then
46159: LD_EXP 45
46163: PUSH
46164: LD_VAR 0 2
46168: ARRAY
46169: NOT
46170: IFFALSE 46174
// break ;
46172: GO 46212
// if not HasTask ( j ) then
46174: LD_VAR 0 3
46178: PPUSH
46179: CALL_OW 314
46183: NOT
46184: IFFALSE 46210
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
46186: LD_VAR 0 3
46190: PPUSH
46191: LD_EXP 45
46195: PUSH
46196: LD_VAR 0 2
46200: ARRAY
46201: PUSH
46202: LD_INT 1
46204: ARRAY
46205: PPUSH
46206: CALL 14235 0 2
// end ;
46210: GO 46060
46212: POP
46213: POP
// end else
46214: GO 46773
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
46216: LD_EXP 43
46220: PUSH
46221: LD_VAR 0 2
46225: ARRAY
46226: PUSH
46227: LD_EXP 38
46231: PUSH
46232: LD_VAR 0 2
46236: ARRAY
46237: PPUSH
46238: LD_INT 2
46240: PUSH
46241: LD_INT 30
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 30
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: LIST
46265: PPUSH
46266: CALL_OW 72
46270: AND
46271: IFFALSE 46773
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
46273: LD_EXP 38
46277: PUSH
46278: LD_VAR 0 2
46282: ARRAY
46283: PPUSH
46284: LD_INT 2
46286: PUSH
46287: LD_INT 30
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 30
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: LIST
46311: PPUSH
46312: CALL_OW 72
46316: PUSH
46317: LD_INT 1
46319: ARRAY
46320: PPUSH
46321: LD_EXP 43
46325: PUSH
46326: LD_VAR 0 2
46330: ARRAY
46331: PUSH
46332: LD_INT 1
46334: ARRAY
46335: PUSH
46336: LD_INT 1
46338: ARRAY
46339: PPUSH
46340: LD_EXP 43
46344: PUSH
46345: LD_VAR 0 2
46349: ARRAY
46350: PUSH
46351: LD_INT 1
46353: ARRAY
46354: PUSH
46355: LD_INT 2
46357: ARRAY
46358: PPUSH
46359: LD_EXP 43
46363: PUSH
46364: LD_VAR 0 2
46368: ARRAY
46369: PUSH
46370: LD_INT 1
46372: ARRAY
46373: PUSH
46374: LD_INT 3
46376: ARRAY
46377: PPUSH
46378: LD_EXP 43
46382: PUSH
46383: LD_VAR 0 2
46387: ARRAY
46388: PUSH
46389: LD_INT 1
46391: ARRAY
46392: PUSH
46393: LD_INT 4
46395: ARRAY
46396: PPUSH
46397: CALL 18339 0 5
46401: IFFALSE 46682
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
46403: LD_ADDR_VAR 0 4
46407: PUSH
46408: LD_EXP 38
46412: PUSH
46413: LD_VAR 0 2
46417: ARRAY
46418: PPUSH
46419: LD_INT 25
46421: PUSH
46422: LD_INT 2
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PPUSH
46429: CALL_OW 72
46433: PUSH
46434: LD_EXP 40
46438: PUSH
46439: LD_VAR 0 2
46443: ARRAY
46444: DIFF
46445: ST_TO_ADDR
// if not tmp then
46446: LD_VAR 0 4
46450: NOT
46451: IFFALSE 46455
// continue ;
46453: GO 45895
// for j in tmp do
46455: LD_ADDR_VAR 0 3
46459: PUSH
46460: LD_VAR 0 4
46464: PUSH
46465: FOR_IN
46466: IFFALSE 46678
// begin if not mc_builders [ i ] then
46468: LD_EXP 44
46472: PUSH
46473: LD_VAR 0 2
46477: ARRAY
46478: NOT
46479: IFFALSE 46537
// begin SetTag ( j , 103 ) ;
46481: LD_VAR 0 3
46485: PPUSH
46486: LD_INT 103
46488: PPUSH
46489: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
46493: LD_ADDR_EXP 44
46497: PUSH
46498: LD_EXP 44
46502: PPUSH
46503: LD_VAR 0 2
46507: PUSH
46508: LD_EXP 44
46512: PUSH
46513: LD_VAR 0 2
46517: ARRAY
46518: PUSH
46519: LD_INT 1
46521: PLUS
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PPUSH
46527: LD_VAR 0 3
46531: PPUSH
46532: CALL 11829 0 3
46536: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
46537: LD_VAR 0 3
46541: PPUSH
46542: CALL_OW 310
46546: IFFALSE 46557
// ComExitBuilding ( j ) ;
46548: LD_VAR 0 3
46552: PPUSH
46553: CALL_OW 122
// wait ( 3 ) ;
46557: LD_INT 3
46559: PPUSH
46560: CALL_OW 67
// if not mc_build_list [ i ] then
46564: LD_EXP 43
46568: PUSH
46569: LD_VAR 0 2
46573: ARRAY
46574: NOT
46575: IFFALSE 46579
// break ;
46577: GO 46678
// if not HasTask ( j ) then
46579: LD_VAR 0 3
46583: PPUSH
46584: CALL_OW 314
46588: NOT
46589: IFFALSE 46676
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
46591: LD_VAR 0 3
46595: PPUSH
46596: LD_EXP 43
46600: PUSH
46601: LD_VAR 0 2
46605: ARRAY
46606: PUSH
46607: LD_INT 1
46609: ARRAY
46610: PUSH
46611: LD_INT 1
46613: ARRAY
46614: PPUSH
46615: LD_EXP 43
46619: PUSH
46620: LD_VAR 0 2
46624: ARRAY
46625: PUSH
46626: LD_INT 1
46628: ARRAY
46629: PUSH
46630: LD_INT 2
46632: ARRAY
46633: PPUSH
46634: LD_EXP 43
46638: PUSH
46639: LD_VAR 0 2
46643: ARRAY
46644: PUSH
46645: LD_INT 1
46647: ARRAY
46648: PUSH
46649: LD_INT 3
46651: ARRAY
46652: PPUSH
46653: LD_EXP 43
46657: PUSH
46658: LD_VAR 0 2
46662: ARRAY
46663: PUSH
46664: LD_INT 1
46666: ARRAY
46667: PUSH
46668: LD_INT 4
46670: ARRAY
46671: PPUSH
46672: CALL_OW 145
// end ;
46676: GO 46465
46678: POP
46679: POP
// end else
46680: GO 46773
// TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
46682: LD_EXP 38
46686: PUSH
46687: LD_VAR 0 2
46691: ARRAY
46692: PPUSH
46693: LD_EXP 43
46697: PUSH
46698: LD_VAR 0 2
46702: ARRAY
46703: PUSH
46704: LD_INT 1
46706: ARRAY
46707: PUSH
46708: LD_INT 1
46710: ARRAY
46711: PPUSH
46712: LD_EXP 43
46716: PUSH
46717: LD_VAR 0 2
46721: ARRAY
46722: PUSH
46723: LD_INT 1
46725: ARRAY
46726: PUSH
46727: LD_INT 2
46729: ARRAY
46730: PPUSH
46731: LD_EXP 43
46735: PUSH
46736: LD_VAR 0 2
46740: ARRAY
46741: PUSH
46742: LD_INT 1
46744: ARRAY
46745: PUSH
46746: LD_INT 3
46748: ARRAY
46749: PPUSH
46750: LD_EXP 43
46754: PUSH
46755: LD_VAR 0 2
46759: ARRAY
46760: PUSH
46761: LD_INT 1
46763: ARRAY
46764: PUSH
46765: LD_INT 4
46767: ARRAY
46768: PPUSH
46769: CALL 18023 0 5
// end ;
46773: GO 45895
46775: POP
46776: POP
// end ;
46777: LD_VAR 0 1
46781: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
46782: LD_INT 0
46784: PPUSH
46785: PPUSH
46786: PPUSH
46787: PPUSH
46788: PPUSH
46789: PPUSH
// if not mc_bases then
46790: LD_EXP 38
46794: NOT
46795: IFFALSE 46799
// exit ;
46797: GO 47226
// for i = 1 to mc_bases do
46799: LD_ADDR_VAR 0 2
46803: PUSH
46804: DOUBLE
46805: LD_INT 1
46807: DEC
46808: ST_TO_ADDR
46809: LD_EXP 38
46813: PUSH
46814: FOR_TO
46815: IFFALSE 47224
// begin tmp := mc_build_upgrade [ i ] ;
46817: LD_ADDR_VAR 0 4
46821: PUSH
46822: LD_EXP 70
46826: PUSH
46827: LD_VAR 0 2
46831: ARRAY
46832: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
46833: LD_ADDR_VAR 0 6
46837: PUSH
46838: LD_EXP 71
46842: PUSH
46843: LD_VAR 0 2
46847: ARRAY
46848: PPUSH
46849: LD_INT 2
46851: PUSH
46852: LD_INT 30
46854: PUSH
46855: LD_INT 6
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 30
46864: PUSH
46865: LD_INT 7
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: LIST
46876: PPUSH
46877: CALL_OW 72
46881: ST_TO_ADDR
// if not tmp and not lab then
46882: LD_VAR 0 4
46886: NOT
46887: PUSH
46888: LD_VAR 0 6
46892: NOT
46893: AND
46894: IFFALSE 46898
// continue ;
46896: GO 46814
// if tmp then
46898: LD_VAR 0 4
46902: IFFALSE 47022
// for j in tmp do
46904: LD_ADDR_VAR 0 3
46908: PUSH
46909: LD_VAR 0 4
46913: PUSH
46914: FOR_IN
46915: IFFALSE 47020
// begin if UpgradeCost ( j ) then
46917: LD_VAR 0 3
46921: PPUSH
46922: CALL 17683 0 1
46926: IFFALSE 47018
// begin ComUpgrade ( j ) ;
46928: LD_VAR 0 3
46932: PPUSH
46933: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
46937: LD_ADDR_EXP 70
46941: PUSH
46942: LD_EXP 70
46946: PPUSH
46947: LD_VAR 0 2
46951: PPUSH
46952: LD_EXP 70
46956: PUSH
46957: LD_VAR 0 2
46961: ARRAY
46962: PUSH
46963: LD_VAR 0 3
46967: DIFF
46968: PPUSH
46969: CALL_OW 1
46973: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
46974: LD_ADDR_EXP 45
46978: PUSH
46979: LD_EXP 45
46983: PPUSH
46984: LD_VAR 0 2
46988: PUSH
46989: LD_EXP 45
46993: PUSH
46994: LD_VAR 0 2
46998: ARRAY
46999: PUSH
47000: LD_INT 1
47002: PLUS
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PPUSH
47008: LD_VAR 0 3
47012: PPUSH
47013: CALL 11829 0 3
47017: ST_TO_ADDR
// end ; end ;
47018: GO 46914
47020: POP
47021: POP
// if not lab or not mc_lab_upgrade [ i ] then
47022: LD_VAR 0 6
47026: NOT
47027: PUSH
47028: LD_EXP 72
47032: PUSH
47033: LD_VAR 0 2
47037: ARRAY
47038: NOT
47039: OR
47040: IFFALSE 47044
// continue ;
47042: GO 46814
// for j in lab do
47044: LD_ADDR_VAR 0 3
47048: PUSH
47049: LD_VAR 0 6
47053: PUSH
47054: FOR_IN
47055: IFFALSE 47220
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
47057: LD_VAR 0 3
47061: PPUSH
47062: CALL_OW 266
47066: PUSH
47067: LD_INT 6
47069: PUSH
47070: LD_INT 7
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: IN
47077: PUSH
47078: LD_VAR 0 3
47082: PPUSH
47083: CALL_OW 461
47087: PUSH
47088: LD_INT 1
47090: NONEQUAL
47091: AND
47092: IFFALSE 47218
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
47094: LD_VAR 0 3
47098: PPUSH
47099: LD_EXP 72
47103: PUSH
47104: LD_VAR 0 2
47108: ARRAY
47109: PUSH
47110: LD_INT 1
47112: ARRAY
47113: PPUSH
47114: CALL 17888 0 2
47118: IFFALSE 47218
// begin ComCancel ( j ) ;
47120: LD_VAR 0 3
47124: PPUSH
47125: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
47129: LD_VAR 0 3
47133: PPUSH
47134: LD_EXP 72
47138: PUSH
47139: LD_VAR 0 2
47143: ARRAY
47144: PUSH
47145: LD_INT 1
47147: ARRAY
47148: PPUSH
47149: CALL_OW 207
// if not j in mc_construct_list [ i ] then
47153: LD_VAR 0 3
47157: PUSH
47158: LD_EXP 45
47162: PUSH
47163: LD_VAR 0 2
47167: ARRAY
47168: IN
47169: NOT
47170: IFFALSE 47216
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
47172: LD_ADDR_EXP 45
47176: PUSH
47177: LD_EXP 45
47181: PPUSH
47182: LD_VAR 0 2
47186: PUSH
47187: LD_EXP 45
47191: PUSH
47192: LD_VAR 0 2
47196: ARRAY
47197: PUSH
47198: LD_INT 1
47200: PLUS
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PPUSH
47206: LD_VAR 0 3
47210: PPUSH
47211: CALL 11829 0 3
47215: ST_TO_ADDR
// break ;
47216: GO 47220
// end ; end ; end ;
47218: GO 47054
47220: POP
47221: POP
// end ;
47222: GO 46814
47224: POP
47225: POP
// end ;
47226: LD_VAR 0 1
47230: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
47231: LD_INT 0
47233: PPUSH
47234: PPUSH
47235: PPUSH
47236: PPUSH
47237: PPUSH
47238: PPUSH
47239: PPUSH
// if not mc_bases then
47240: LD_EXP 38
47244: NOT
47245: IFFALSE 47249
// exit ;
47247: GO 47545
// for i = 1 to mc_bases do
47249: LD_ADDR_VAR 0 2
47253: PUSH
47254: DOUBLE
47255: LD_INT 1
47257: DEC
47258: ST_TO_ADDR
47259: LD_EXP 38
47263: PUSH
47264: FOR_TO
47265: IFFALSE 47543
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
47267: LD_EXP 46
47271: PUSH
47272: LD_VAR 0 2
47276: ARRAY
47277: NOT
47278: PUSH
47279: LD_EXP 38
47283: PUSH
47284: LD_VAR 0 2
47288: ARRAY
47289: PPUSH
47290: LD_INT 30
47292: PUSH
47293: LD_INT 3
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PPUSH
47300: CALL_OW 72
47304: NOT
47305: OR
47306: IFFALSE 47310
// continue ;
47308: GO 47264
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
47310: LD_EXP 46
47314: PUSH
47315: LD_VAR 0 2
47319: ARRAY
47320: PUSH
47321: LD_INT 1
47323: ARRAY
47324: PPUSH
47325: CALL_OW 269
47329: IFFALSE 47395
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
47331: LD_ADDR_VAR 0 4
47335: PUSH
47336: LD_EXP 46
47340: PUSH
47341: LD_VAR 0 2
47345: ARRAY
47346: PPUSH
47347: LD_INT 1
47349: PPUSH
47350: CALL_OW 3
47354: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
47355: LD_ADDR_EXP 46
47359: PUSH
47360: LD_EXP 46
47364: PPUSH
47365: LD_VAR 0 2
47369: PPUSH
47370: LD_VAR 0 4
47374: PPUSH
47375: CALL_OW 1
47379: ST_TO_ADDR
// if not mc_turret_list [ i ] then
47380: LD_EXP 46
47384: PUSH
47385: LD_VAR 0 2
47389: ARRAY
47390: NOT
47391: IFFALSE 47395
// continue ;
47393: GO 47264
// end ; busy := false ;
47395: LD_ADDR_VAR 0 6
47399: PUSH
47400: LD_INT 0
47402: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
47403: LD_ADDR_VAR 0 4
47407: PUSH
47408: LD_EXP 38
47412: PUSH
47413: LD_VAR 0 2
47417: ARRAY
47418: PPUSH
47419: LD_INT 30
47421: PUSH
47422: LD_INT 3
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PPUSH
47429: CALL_OW 72
47433: ST_TO_ADDR
// for j in tmp do
47434: LD_ADDR_VAR 0 3
47438: PUSH
47439: LD_VAR 0 4
47443: PUSH
47444: FOR_IN
47445: IFFALSE 47473
// if not BuildingStatus ( j ) = bs_idle then
47447: LD_VAR 0 3
47451: PPUSH
47452: CALL_OW 461
47456: PUSH
47457: LD_INT 2
47459: EQUAL
47460: NOT
47461: IFFALSE 47471
// busy := true ;
47463: LD_ADDR_VAR 0 6
47467: PUSH
47468: LD_INT 1
47470: ST_TO_ADDR
47471: GO 47444
47473: POP
47474: POP
// if busy then
47475: LD_VAR 0 6
47479: IFFALSE 47483
// continue ;
47481: GO 47264
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
47483: LD_ADDR_VAR 0 7
47487: PUSH
47488: LD_EXP 46
47492: PUSH
47493: LD_VAR 0 2
47497: ARRAY
47498: PUSH
47499: LD_INT 1
47501: ARRAY
47502: PPUSH
47503: CALL 16131 0 1
47507: ST_TO_ADDR
// if not weapon then
47508: LD_VAR 0 7
47512: NOT
47513: IFFALSE 47517
// continue ;
47515: GO 47264
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
47517: LD_EXP 46
47521: PUSH
47522: LD_VAR 0 2
47526: ARRAY
47527: PUSH
47528: LD_INT 1
47530: ARRAY
47531: PPUSH
47532: LD_VAR 0 7
47536: PPUSH
47537: CALL_OW 148
// end ;
47541: GO 47264
47543: POP
47544: POP
// end ;
47545: LD_VAR 0 1
47549: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
47550: LD_INT 0
47552: PPUSH
47553: PPUSH
47554: PPUSH
47555: PPUSH
47556: PPUSH
47557: PPUSH
// if not mc_bases then
47558: LD_EXP 38
47562: NOT
47563: IFFALSE 47567
// exit ;
47565: GO 48552
// for i = 1 to mc_bases do
47567: LD_ADDR_VAR 0 2
47571: PUSH
47572: DOUBLE
47573: LD_INT 1
47575: DEC
47576: ST_TO_ADDR
47577: LD_EXP 38
47581: PUSH
47582: FOR_TO
47583: IFFALSE 48550
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
47585: LD_EXP 51
47589: PUSH
47590: LD_VAR 0 2
47594: ARRAY
47595: NOT
47596: PUSH
47597: LD_EXP 51
47601: PUSH
47602: LD_VAR 0 2
47606: ARRAY
47607: PUSH
47608: LD_EXP 52
47612: PUSH
47613: LD_VAR 0 2
47617: ARRAY
47618: EQUAL
47619: OR
47620: IFFALSE 47624
// continue ;
47622: GO 47582
// if mc_miners [ i ] then
47624: LD_EXP 52
47628: PUSH
47629: LD_VAR 0 2
47633: ARRAY
47634: IFFALSE 48237
// begin k := 1 ;
47636: LD_ADDR_VAR 0 4
47640: PUSH
47641: LD_INT 1
47643: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
47644: LD_ADDR_VAR 0 3
47648: PUSH
47649: DOUBLE
47650: LD_EXP 52
47654: PUSH
47655: LD_VAR 0 2
47659: ARRAY
47660: INC
47661: ST_TO_ADDR
47662: LD_INT 1
47664: PUSH
47665: FOR_DOWNTO
47666: IFFALSE 48235
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
47668: LD_EXP 52
47672: PUSH
47673: LD_VAR 0 2
47677: ARRAY
47678: PUSH
47679: LD_VAR 0 3
47683: ARRAY
47684: PPUSH
47685: CALL_OW 301
47689: IFFALSE 47752
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
47691: LD_ADDR_VAR 0 5
47695: PUSH
47696: LD_EXP 52
47700: PUSH
47701: LD_VAR 0 2
47705: ARRAY
47706: PUSH
47707: LD_EXP 52
47711: PUSH
47712: LD_VAR 0 2
47716: ARRAY
47717: PUSH
47718: LD_VAR 0 3
47722: ARRAY
47723: DIFF
47724: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
47725: LD_ADDR_EXP 52
47729: PUSH
47730: LD_EXP 52
47734: PPUSH
47735: LD_VAR 0 2
47739: PPUSH
47740: LD_VAR 0 5
47744: PPUSH
47745: CALL_OW 1
47749: ST_TO_ADDR
// continue ;
47750: GO 47665
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
47752: LD_EXP 52
47756: PUSH
47757: LD_VAR 0 2
47761: ARRAY
47762: PUSH
47763: LD_VAR 0 3
47767: ARRAY
47768: PPUSH
47769: CALL 11330 0 1
47773: PUSH
47774: LD_EXP 52
47778: PUSH
47779: LD_VAR 0 2
47783: ARRAY
47784: PUSH
47785: LD_VAR 0 3
47789: ARRAY
47790: PPUSH
47791: CALL_OW 255
47795: PPUSH
47796: LD_EXP 51
47800: PUSH
47801: LD_VAR 0 2
47805: ARRAY
47806: PUSH
47807: LD_VAR 0 4
47811: ARRAY
47812: PUSH
47813: LD_INT 1
47815: ARRAY
47816: PPUSH
47817: LD_EXP 51
47821: PUSH
47822: LD_VAR 0 2
47826: ARRAY
47827: PUSH
47828: LD_VAR 0 4
47832: ARRAY
47833: PUSH
47834: LD_INT 2
47836: ARRAY
47837: PPUSH
47838: LD_INT 15
47840: PPUSH
47841: CALL 12323 0 4
47845: PUSH
47846: LD_INT 4
47848: ARRAY
47849: PUSH
47850: LD_EXP 52
47854: PUSH
47855: LD_VAR 0 2
47859: ARRAY
47860: PUSH
47861: LD_VAR 0 3
47865: ARRAY
47866: PPUSH
47867: LD_INT 10
47869: PPUSH
47870: CALL 14020 0 2
47874: PUSH
47875: LD_INT 4
47877: ARRAY
47878: OR
47879: AND
47880: IFFALSE 47903
// ComStop ( mc_miners [ i ] [ j ] ) ;
47882: LD_EXP 52
47886: PUSH
47887: LD_VAR 0 2
47891: ARRAY
47892: PUSH
47893: LD_VAR 0 3
47897: ARRAY
47898: PPUSH
47899: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
47903: LD_EXP 52
47907: PUSH
47908: LD_VAR 0 2
47912: ARRAY
47913: PUSH
47914: LD_VAR 0 3
47918: ARRAY
47919: PPUSH
47920: CALL_OW 257
47924: PUSH
47925: LD_INT 1
47927: EQUAL
47928: PUSH
47929: LD_EXP 52
47933: PUSH
47934: LD_VAR 0 2
47938: ARRAY
47939: PUSH
47940: LD_VAR 0 3
47944: ARRAY
47945: PPUSH
47946: CALL_OW 459
47950: NOT
47951: AND
47952: PUSH
47953: LD_EXP 52
47957: PUSH
47958: LD_VAR 0 2
47962: ARRAY
47963: PUSH
47964: LD_VAR 0 3
47968: ARRAY
47969: PPUSH
47970: CALL_OW 255
47974: PPUSH
47975: LD_EXP 51
47979: PUSH
47980: LD_VAR 0 2
47984: ARRAY
47985: PUSH
47986: LD_VAR 0 4
47990: ARRAY
47991: PUSH
47992: LD_INT 1
47994: ARRAY
47995: PPUSH
47996: LD_EXP 51
48000: PUSH
48001: LD_VAR 0 2
48005: ARRAY
48006: PUSH
48007: LD_VAR 0 4
48011: ARRAY
48012: PUSH
48013: LD_INT 2
48015: ARRAY
48016: PPUSH
48017: LD_INT 15
48019: PPUSH
48020: CALL 12323 0 4
48024: PUSH
48025: LD_INT 4
48027: ARRAY
48028: PUSH
48029: LD_INT 0
48031: EQUAL
48032: AND
48033: PUSH
48034: LD_EXP 52
48038: PUSH
48039: LD_VAR 0 2
48043: ARRAY
48044: PUSH
48045: LD_VAR 0 3
48049: ARRAY
48050: PPUSH
48051: CALL_OW 314
48055: NOT
48056: AND
48057: IFFALSE 48233
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
48059: LD_EXP 52
48063: PUSH
48064: LD_VAR 0 2
48068: ARRAY
48069: PUSH
48070: LD_VAR 0 3
48074: ARRAY
48075: PPUSH
48076: CALL_OW 310
48080: IFFALSE 48103
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
48082: LD_EXP 52
48086: PUSH
48087: LD_VAR 0 2
48091: ARRAY
48092: PUSH
48093: LD_VAR 0 3
48097: ARRAY
48098: PPUSH
48099: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
48103: LD_EXP 52
48107: PUSH
48108: LD_VAR 0 2
48112: ARRAY
48113: PUSH
48114: LD_VAR 0 3
48118: ARRAY
48119: PPUSH
48120: CALL_OW 314
48124: NOT
48125: IFFALSE 48193
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
48127: LD_EXP 52
48131: PUSH
48132: LD_VAR 0 2
48136: ARRAY
48137: PUSH
48138: LD_VAR 0 3
48142: ARRAY
48143: PPUSH
48144: LD_EXP 51
48148: PUSH
48149: LD_VAR 0 2
48153: ARRAY
48154: PUSH
48155: LD_VAR 0 4
48159: ARRAY
48160: PUSH
48161: LD_INT 1
48163: ARRAY
48164: PPUSH
48165: LD_EXP 51
48169: PUSH
48170: LD_VAR 0 2
48174: ARRAY
48175: PUSH
48176: LD_VAR 0 4
48180: ARRAY
48181: PUSH
48182: LD_INT 2
48184: ARRAY
48185: PPUSH
48186: LD_INT 0
48188: PPUSH
48189: CALL_OW 193
// k := k + 1 ;
48193: LD_ADDR_VAR 0 4
48197: PUSH
48198: LD_VAR 0 4
48202: PUSH
48203: LD_INT 1
48205: PLUS
48206: ST_TO_ADDR
// if k > mc_mines [ i ] then
48207: LD_VAR 0 4
48211: PUSH
48212: LD_EXP 51
48216: PUSH
48217: LD_VAR 0 2
48221: ARRAY
48222: GREATER
48223: IFFALSE 48233
// k := 1 ;
48225: LD_ADDR_VAR 0 4
48229: PUSH
48230: LD_INT 1
48232: ST_TO_ADDR
// end ; end ;
48233: GO 47665
48235: POP
48236: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
48237: LD_ADDR_VAR 0 5
48241: PUSH
48242: LD_EXP 38
48246: PUSH
48247: LD_VAR 0 2
48251: ARRAY
48252: PPUSH
48253: LD_INT 2
48255: PUSH
48256: LD_INT 30
48258: PUSH
48259: LD_INT 4
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 30
48268: PUSH
48269: LD_INT 5
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 30
48278: PUSH
48279: LD_INT 32
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: PPUSH
48292: CALL_OW 72
48296: ST_TO_ADDR
// if not tmp then
48297: LD_VAR 0 5
48301: NOT
48302: IFFALSE 48306
// continue ;
48304: GO 47582
// list := [ ] ;
48306: LD_ADDR_VAR 0 6
48310: PUSH
48311: EMPTY
48312: ST_TO_ADDR
// for j in tmp do
48313: LD_ADDR_VAR 0 3
48317: PUSH
48318: LD_VAR 0 5
48322: PUSH
48323: FOR_IN
48324: IFFALSE 48393
// begin for k in UnitsInside ( j ) do
48326: LD_ADDR_VAR 0 4
48330: PUSH
48331: LD_VAR 0 3
48335: PPUSH
48336: CALL_OW 313
48340: PUSH
48341: FOR_IN
48342: IFFALSE 48389
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
48344: LD_VAR 0 4
48348: PPUSH
48349: CALL_OW 257
48353: PUSH
48354: LD_INT 1
48356: EQUAL
48357: PUSH
48358: LD_VAR 0 4
48362: PPUSH
48363: CALL_OW 459
48367: NOT
48368: AND
48369: IFFALSE 48387
// list := list ^ k ;
48371: LD_ADDR_VAR 0 6
48375: PUSH
48376: LD_VAR 0 6
48380: PUSH
48381: LD_VAR 0 4
48385: ADD
48386: ST_TO_ADDR
48387: GO 48341
48389: POP
48390: POP
// end ;
48391: GO 48323
48393: POP
48394: POP
// list := list diff mc_miners [ i ] ;
48395: LD_ADDR_VAR 0 6
48399: PUSH
48400: LD_VAR 0 6
48404: PUSH
48405: LD_EXP 52
48409: PUSH
48410: LD_VAR 0 2
48414: ARRAY
48415: DIFF
48416: ST_TO_ADDR
// if not list then
48417: LD_VAR 0 6
48421: NOT
48422: IFFALSE 48426
// continue ;
48424: GO 47582
// k := mc_mines [ i ] - mc_miners [ i ] ;
48426: LD_ADDR_VAR 0 4
48430: PUSH
48431: LD_EXP 51
48435: PUSH
48436: LD_VAR 0 2
48440: ARRAY
48441: PUSH
48442: LD_EXP 52
48446: PUSH
48447: LD_VAR 0 2
48451: ARRAY
48452: MINUS
48453: ST_TO_ADDR
// if k > list then
48454: LD_VAR 0 4
48458: PUSH
48459: LD_VAR 0 6
48463: GREATER
48464: IFFALSE 48476
// k := list ;
48466: LD_ADDR_VAR 0 4
48470: PUSH
48471: LD_VAR 0 6
48475: ST_TO_ADDR
// for j = 1 to k do
48476: LD_ADDR_VAR 0 3
48480: PUSH
48481: DOUBLE
48482: LD_INT 1
48484: DEC
48485: ST_TO_ADDR
48486: LD_VAR 0 4
48490: PUSH
48491: FOR_TO
48492: IFFALSE 48546
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
48494: LD_ADDR_EXP 52
48498: PUSH
48499: LD_EXP 52
48503: PPUSH
48504: LD_VAR 0 2
48508: PUSH
48509: LD_EXP 52
48513: PUSH
48514: LD_VAR 0 2
48518: ARRAY
48519: PUSH
48520: LD_INT 1
48522: PLUS
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PPUSH
48528: LD_VAR 0 6
48532: PUSH
48533: LD_VAR 0 3
48537: ARRAY
48538: PPUSH
48539: CALL 11829 0 3
48543: ST_TO_ADDR
48544: GO 48491
48546: POP
48547: POP
// end ;
48548: GO 47582
48550: POP
48551: POP
// end ;
48552: LD_VAR 0 1
48556: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
48557: LD_INT 0
48559: PPUSH
48560: PPUSH
48561: PPUSH
48562: PPUSH
48563: PPUSH
48564: PPUSH
48565: PPUSH
48566: PPUSH
48567: PPUSH
// if not mc_bases then
48568: LD_EXP 38
48572: NOT
48573: IFFALSE 48577
// exit ;
48575: GO 49962
// for i = 1 to mc_bases do
48577: LD_ADDR_VAR 0 2
48581: PUSH
48582: DOUBLE
48583: LD_INT 1
48585: DEC
48586: ST_TO_ADDR
48587: LD_EXP 38
48591: PUSH
48592: FOR_TO
48593: IFFALSE 49960
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
48595: LD_EXP 38
48599: PUSH
48600: LD_VAR 0 2
48604: ARRAY
48605: NOT
48606: PUSH
48607: LD_EXP 45
48611: PUSH
48612: LD_VAR 0 2
48616: ARRAY
48617: OR
48618: IFFALSE 48622
// continue ;
48620: GO 48592
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
48622: LD_EXP 54
48626: PUSH
48627: LD_VAR 0 2
48631: ARRAY
48632: NOT
48633: PUSH
48634: LD_EXP 55
48638: PUSH
48639: LD_VAR 0 2
48643: ARRAY
48644: AND
48645: IFFALSE 48683
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
48647: LD_ADDR_EXP 55
48651: PUSH
48652: LD_EXP 55
48656: PPUSH
48657: LD_VAR 0 2
48661: PPUSH
48662: EMPTY
48663: PPUSH
48664: CALL_OW 1
48668: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
48669: LD_VAR 0 2
48673: PPUSH
48674: LD_INT 107
48676: PPUSH
48677: CALL 44271 0 2
// continue ;
48681: GO 48592
// end ; target := [ ] ;
48683: LD_ADDR_VAR 0 5
48687: PUSH
48688: EMPTY
48689: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
48690: LD_ADDR_VAR 0 3
48694: PUSH
48695: DOUBLE
48696: LD_EXP 54
48700: PUSH
48701: LD_VAR 0 2
48705: ARRAY
48706: INC
48707: ST_TO_ADDR
48708: LD_INT 1
48710: PUSH
48711: FOR_DOWNTO
48712: IFFALSE 48972
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
48714: LD_EXP 54
48718: PUSH
48719: LD_VAR 0 2
48723: ARRAY
48724: PUSH
48725: LD_VAR 0 3
48729: ARRAY
48730: PUSH
48731: LD_INT 2
48733: ARRAY
48734: PPUSH
48735: LD_EXP 54
48739: PUSH
48740: LD_VAR 0 2
48744: ARRAY
48745: PUSH
48746: LD_VAR 0 3
48750: ARRAY
48751: PUSH
48752: LD_INT 3
48754: ARRAY
48755: PPUSH
48756: CALL_OW 488
48760: PUSH
48761: LD_EXP 54
48765: PUSH
48766: LD_VAR 0 2
48770: ARRAY
48771: PUSH
48772: LD_VAR 0 3
48776: ARRAY
48777: PUSH
48778: LD_INT 2
48780: ARRAY
48781: PPUSH
48782: LD_EXP 54
48786: PUSH
48787: LD_VAR 0 2
48791: ARRAY
48792: PUSH
48793: LD_VAR 0 3
48797: ARRAY
48798: PUSH
48799: LD_INT 3
48801: ARRAY
48802: PPUSH
48803: CALL_OW 284
48807: PUSH
48808: LD_INT 0
48810: EQUAL
48811: AND
48812: IFFALSE 48867
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
48814: LD_ADDR_VAR 0 4
48818: PUSH
48819: LD_EXP 54
48823: PUSH
48824: LD_VAR 0 2
48828: ARRAY
48829: PPUSH
48830: LD_VAR 0 3
48834: PPUSH
48835: CALL_OW 3
48839: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
48840: LD_ADDR_EXP 54
48844: PUSH
48845: LD_EXP 54
48849: PPUSH
48850: LD_VAR 0 2
48854: PPUSH
48855: LD_VAR 0 4
48859: PPUSH
48860: CALL_OW 1
48864: ST_TO_ADDR
// continue ;
48865: GO 48711
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
48867: LD_EXP 38
48871: PUSH
48872: LD_VAR 0 2
48876: ARRAY
48877: PUSH
48878: LD_INT 1
48880: ARRAY
48881: PPUSH
48882: CALL_OW 255
48886: PPUSH
48887: LD_EXP 54
48891: PUSH
48892: LD_VAR 0 2
48896: ARRAY
48897: PUSH
48898: LD_VAR 0 3
48902: ARRAY
48903: PUSH
48904: LD_INT 2
48906: ARRAY
48907: PPUSH
48908: LD_EXP 54
48912: PUSH
48913: LD_VAR 0 2
48917: ARRAY
48918: PUSH
48919: LD_VAR 0 3
48923: ARRAY
48924: PUSH
48925: LD_INT 3
48927: ARRAY
48928: PPUSH
48929: LD_INT 20
48931: PPUSH
48932: CALL 12323 0 4
48936: PUSH
48937: LD_INT 4
48939: ARRAY
48940: PUSH
48941: LD_INT 0
48943: EQUAL
48944: IFFALSE 48970
// begin target := mc_crates [ i ] [ j ] ;
48946: LD_ADDR_VAR 0 5
48950: PUSH
48951: LD_EXP 54
48955: PUSH
48956: LD_VAR 0 2
48960: ARRAY
48961: PUSH
48962: LD_VAR 0 3
48966: ARRAY
48967: ST_TO_ADDR
// break ;
48968: GO 48972
// end ; end ;
48970: GO 48711
48972: POP
48973: POP
// if not target then
48974: LD_VAR 0 5
48978: NOT
48979: IFFALSE 48983
// continue ;
48981: GO 48592
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
48983: LD_ADDR_VAR 0 6
48987: PUSH
48988: LD_EXP 57
48992: PUSH
48993: LD_VAR 0 2
48997: ARRAY
48998: PPUSH
48999: LD_INT 2
49001: PUSH
49002: LD_INT 3
49004: PUSH
49005: LD_INT 58
49007: PUSH
49008: EMPTY
49009: LIST
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 61
49017: PUSH
49018: EMPTY
49019: LIST
49020: PUSH
49021: LD_INT 33
49023: PUSH
49024: LD_INT 5
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 33
49033: PUSH
49034: LD_INT 3
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: PUSH
49051: LD_INT 34
49053: PUSH
49054: LD_INT 32
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 34
49063: PUSH
49064: LD_INT 51
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 34
49073: PUSH
49074: LD_INT 12
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PPUSH
49091: CALL_OW 72
49095: ST_TO_ADDR
// if not cargo then
49096: LD_VAR 0 6
49100: NOT
49101: IFFALSE 49495
// begin if mc_crates_collector [ i ] < 5 then
49103: LD_EXP 55
49107: PUSH
49108: LD_VAR 0 2
49112: ARRAY
49113: PUSH
49114: LD_INT 5
49116: LESS
49117: IFFALSE 49309
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
49119: LD_ADDR_VAR 0 4
49123: PUSH
49124: LD_EXP 38
49128: PUSH
49129: LD_VAR 0 2
49133: ARRAY
49134: PUSH
49135: LD_EXP 67
49139: PUSH
49140: LD_VAR 0 2
49144: ARRAY
49145: UNION
49146: PPUSH
49147: LD_INT 2
49149: PUSH
49150: LD_INT 25
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 25
49162: PUSH
49163: LD_INT 16
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 24
49177: PUSH
49178: LD_INT 750
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PPUSH
49189: CALL_OW 72
49193: ST_TO_ADDR
// if not tmp then
49194: LD_VAR 0 4
49198: NOT
49199: IFFALSE 49203
// continue ;
49201: GO 48592
// for j in tmp do
49203: LD_ADDR_VAR 0 3
49207: PUSH
49208: LD_VAR 0 4
49212: PUSH
49213: FOR_IN
49214: IFFALSE 49307
// if GetTag ( j ) = 0 then
49216: LD_VAR 0 3
49220: PPUSH
49221: CALL_OW 110
49225: PUSH
49226: LD_INT 0
49228: EQUAL
49229: IFFALSE 49305
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
49231: LD_ADDR_EXP 55
49235: PUSH
49236: LD_EXP 55
49240: PPUSH
49241: LD_VAR 0 2
49245: PUSH
49246: LD_EXP 55
49250: PUSH
49251: LD_VAR 0 2
49255: ARRAY
49256: PUSH
49257: LD_INT 1
49259: PLUS
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PPUSH
49265: LD_VAR 0 3
49269: PPUSH
49270: CALL 11829 0 3
49274: ST_TO_ADDR
// SetTag ( j , 107 ) ;
49275: LD_VAR 0 3
49279: PPUSH
49280: LD_INT 107
49282: PPUSH
49283: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
49287: LD_EXP 55
49291: PUSH
49292: LD_VAR 0 2
49296: ARRAY
49297: PUSH
49298: LD_INT 5
49300: GREATER
49301: IFFALSE 49305
// break ;
49303: GO 49307
// end ;
49305: GO 49213
49307: POP
49308: POP
// end ; if mc_crates_collector [ i ] and target then
49309: LD_EXP 55
49313: PUSH
49314: LD_VAR 0 2
49318: ARRAY
49319: PUSH
49320: LD_VAR 0 5
49324: AND
49325: IFFALSE 49493
// begin if mc_crates_collector [ i ] < target [ 1 ] then
49327: LD_EXP 55
49331: PUSH
49332: LD_VAR 0 2
49336: ARRAY
49337: PUSH
49338: LD_VAR 0 5
49342: PUSH
49343: LD_INT 1
49345: ARRAY
49346: LESS
49347: IFFALSE 49367
// tmp := mc_crates_collector [ i ] else
49349: LD_ADDR_VAR 0 4
49353: PUSH
49354: LD_EXP 55
49358: PUSH
49359: LD_VAR 0 2
49363: ARRAY
49364: ST_TO_ADDR
49365: GO 49381
// tmp := target [ 1 ] ;
49367: LD_ADDR_VAR 0 4
49371: PUSH
49372: LD_VAR 0 5
49376: PUSH
49377: LD_INT 1
49379: ARRAY
49380: ST_TO_ADDR
// for j = 1 to tmp do
49381: LD_ADDR_VAR 0 3
49385: PUSH
49386: DOUBLE
49387: LD_INT 1
49389: DEC
49390: ST_TO_ADDR
49391: LD_VAR 0 4
49395: PUSH
49396: FOR_TO
49397: IFFALSE 49491
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
49399: LD_EXP 55
49403: PUSH
49404: LD_VAR 0 2
49408: ARRAY
49409: PUSH
49410: LD_VAR 0 3
49414: ARRAY
49415: PPUSH
49416: CALL_OW 310
49420: IFFALSE 49443
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
49422: LD_EXP 55
49426: PUSH
49427: LD_VAR 0 2
49431: ARRAY
49432: PUSH
49433: LD_VAR 0 3
49437: ARRAY
49438: PPUSH
49439: CALL_OW 122
// wait ( 3 ) ;
49443: LD_INT 3
49445: PPUSH
49446: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
49450: LD_EXP 55
49454: PUSH
49455: LD_VAR 0 2
49459: ARRAY
49460: PUSH
49461: LD_VAR 0 3
49465: ARRAY
49466: PPUSH
49467: LD_VAR 0 5
49471: PUSH
49472: LD_INT 2
49474: ARRAY
49475: PPUSH
49476: LD_VAR 0 5
49480: PUSH
49481: LD_INT 3
49483: ARRAY
49484: PPUSH
49485: CALL_OW 117
// end ;
49489: GO 49396
49491: POP
49492: POP
// end ; end else
49493: GO 49958
// begin for j in cargo do
49495: LD_ADDR_VAR 0 3
49499: PUSH
49500: LD_VAR 0 6
49504: PUSH
49505: FOR_IN
49506: IFFALSE 49956
// begin if GetTag ( j ) <> 0 then
49508: LD_VAR 0 3
49512: PPUSH
49513: CALL_OW 110
49517: PUSH
49518: LD_INT 0
49520: NONEQUAL
49521: IFFALSE 49525
// continue ;
49523: GO 49505
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
49525: LD_VAR 0 3
49529: PPUSH
49530: CALL_OW 262
49534: PUSH
49535: LD_INT 2
49537: EQUAL
49538: PUSH
49539: LD_VAR 0 3
49543: PPUSH
49544: CALL_OW 261
49548: PUSH
49549: LD_INT 15
49551: LESS
49552: AND
49553: IFFALSE 49557
// continue ;
49555: GO 49505
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
49557: LD_VAR 0 3
49561: PPUSH
49562: CALL_OW 262
49566: PUSH
49567: LD_INT 1
49569: EQUAL
49570: PUSH
49571: LD_VAR 0 3
49575: PPUSH
49576: CALL_OW 261
49580: PUSH
49581: LD_INT 10
49583: LESS
49584: AND
49585: IFFALSE 49895
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49587: LD_ADDR_VAR 0 7
49591: PUSH
49592: LD_EXP 38
49596: PUSH
49597: LD_VAR 0 2
49601: ARRAY
49602: PPUSH
49603: LD_INT 2
49605: PUSH
49606: LD_INT 30
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 30
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: LIST
49630: PPUSH
49631: CALL_OW 72
49635: ST_TO_ADDR
// if not depot then
49636: LD_VAR 0 7
49640: NOT
49641: IFFALSE 49645
// continue ;
49643: GO 49505
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
49645: LD_VAR 0 3
49649: PPUSH
49650: LD_VAR 0 7
49654: PPUSH
49655: LD_VAR 0 3
49659: PPUSH
49660: CALL_OW 74
49664: PPUSH
49665: CALL_OW 296
49669: PUSH
49670: LD_INT 6
49672: LESS
49673: IFFALSE 49689
// SetFuel ( j , 100 ) else
49675: LD_VAR 0 3
49679: PPUSH
49680: LD_INT 100
49682: PPUSH
49683: CALL_OW 240
49687: GO 49895
// if GetFuel ( j ) = 0 then
49689: LD_VAR 0 3
49693: PPUSH
49694: CALL_OW 261
49698: PUSH
49699: LD_INT 0
49701: EQUAL
49702: IFFALSE 49895
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
49704: LD_ADDR_EXP 57
49708: PUSH
49709: LD_EXP 57
49713: PPUSH
49714: LD_VAR 0 2
49718: PPUSH
49719: LD_EXP 57
49723: PUSH
49724: LD_VAR 0 2
49728: ARRAY
49729: PUSH
49730: LD_VAR 0 3
49734: DIFF
49735: PPUSH
49736: CALL_OW 1
49740: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
49741: LD_VAR 0 3
49745: PPUSH
49746: CALL_OW 263
49750: PUSH
49751: LD_INT 1
49753: EQUAL
49754: IFFALSE 49770
// ComExitVehicle ( IsInUnit ( j ) ) ;
49756: LD_VAR 0 3
49760: PPUSH
49761: CALL_OW 310
49765: PPUSH
49766: CALL_OW 121
// if GetControl ( j ) = control_remote then
49770: LD_VAR 0 3
49774: PPUSH
49775: CALL_OW 263
49779: PUSH
49780: LD_INT 2
49782: EQUAL
49783: IFFALSE 49794
// ComUnlink ( j ) ;
49785: LD_VAR 0 3
49789: PPUSH
49790: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
49794: LD_ADDR_VAR 0 8
49798: PUSH
49799: LD_VAR 0 2
49803: PPUSH
49804: LD_INT 3
49806: PPUSH
49807: CALL 56367 0 2
49811: ST_TO_ADDR
// if fac then
49812: LD_VAR 0 8
49816: IFFALSE 49893
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
49818: LD_ADDR_VAR 0 9
49822: PUSH
49823: LD_VAR 0 8
49827: PPUSH
49828: LD_VAR 0 3
49832: PPUSH
49833: CALL_OW 265
49837: PPUSH
49838: LD_VAR 0 3
49842: PPUSH
49843: CALL_OW 262
49847: PPUSH
49848: LD_VAR 0 3
49852: PPUSH
49853: CALL_OW 263
49857: PPUSH
49858: LD_VAR 0 3
49862: PPUSH
49863: CALL_OW 264
49867: PPUSH
49868: CALL 8994 0 5
49872: ST_TO_ADDR
// if components then
49873: LD_VAR 0 9
49877: IFFALSE 49893
// MC_InsertProduceList ( i , components ) ;
49879: LD_VAR 0 2
49883: PPUSH
49884: LD_VAR 0 9
49888: PPUSH
49889: CALL 56030 0 2
// end ; continue ;
49893: GO 49505
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
49895: LD_VAR 0 3
49899: PPUSH
49900: LD_INT 1
49902: PPUSH
49903: CALL_OW 289
49907: PUSH
49908: LD_INT 100
49910: LESS
49911: PUSH
49912: LD_VAR 0 3
49916: PPUSH
49917: CALL_OW 314
49921: NOT
49922: AND
49923: IFFALSE 49952
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
49925: LD_VAR 0 3
49929: PPUSH
49930: LD_VAR 0 5
49934: PUSH
49935: LD_INT 2
49937: ARRAY
49938: PPUSH
49939: LD_VAR 0 5
49943: PUSH
49944: LD_INT 3
49946: ARRAY
49947: PPUSH
49948: CALL_OW 117
// break ;
49952: GO 49956
// end ;
49954: GO 49505
49956: POP
49957: POP
// end ; end ;
49958: GO 48592
49960: POP
49961: POP
// end ;
49962: LD_VAR 0 1
49966: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
49967: LD_INT 0
49969: PPUSH
49970: PPUSH
49971: PPUSH
49972: PPUSH
// if not mc_bases then
49973: LD_EXP 38
49977: NOT
49978: IFFALSE 49982
// exit ;
49980: GO 50143
// for i = 1 to mc_bases do
49982: LD_ADDR_VAR 0 2
49986: PUSH
49987: DOUBLE
49988: LD_INT 1
49990: DEC
49991: ST_TO_ADDR
49992: LD_EXP 38
49996: PUSH
49997: FOR_TO
49998: IFFALSE 50141
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
50000: LD_ADDR_VAR 0 4
50004: PUSH
50005: LD_EXP 57
50009: PUSH
50010: LD_VAR 0 2
50014: ARRAY
50015: PUSH
50016: LD_EXP 60
50020: PUSH
50021: LD_VAR 0 2
50025: ARRAY
50026: ADD
50027: PPUSH
50028: LD_INT 33
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PPUSH
50038: CALL_OW 72
50042: ST_TO_ADDR
// if tmp then
50043: LD_VAR 0 4
50047: IFFALSE 50139
// for j in tmp do
50049: LD_ADDR_VAR 0 3
50053: PUSH
50054: LD_VAR 0 4
50058: PUSH
50059: FOR_IN
50060: IFFALSE 50137
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
50062: LD_VAR 0 3
50066: PPUSH
50067: CALL_OW 312
50071: NOT
50072: PUSH
50073: LD_VAR 0 3
50077: PPUSH
50078: CALL_OW 256
50082: PUSH
50083: LD_INT 250
50085: GREATEREQUAL
50086: AND
50087: IFFALSE 50100
// Connect ( j ) else
50089: LD_VAR 0 3
50093: PPUSH
50094: CALL 14317 0 1
50098: GO 50135
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
50100: LD_VAR 0 3
50104: PPUSH
50105: CALL_OW 256
50109: PUSH
50110: LD_INT 250
50112: LESS
50113: PUSH
50114: LD_VAR 0 3
50118: PPUSH
50119: CALL_OW 312
50123: AND
50124: IFFALSE 50135
// ComUnlink ( j ) ;
50126: LD_VAR 0 3
50130: PPUSH
50131: CALL_OW 136
50135: GO 50059
50137: POP
50138: POP
// end ;
50139: GO 49997
50141: POP
50142: POP
// end ;
50143: LD_VAR 0 1
50147: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
50148: LD_INT 0
50150: PPUSH
50151: PPUSH
50152: PPUSH
50153: PPUSH
50154: PPUSH
// if not mc_bases then
50155: LD_EXP 38
50159: NOT
50160: IFFALSE 50164
// exit ;
50162: GO 50624
// for i = 1 to mc_bases do
50164: LD_ADDR_VAR 0 2
50168: PUSH
50169: DOUBLE
50170: LD_INT 1
50172: DEC
50173: ST_TO_ADDR
50174: LD_EXP 38
50178: PUSH
50179: FOR_TO
50180: IFFALSE 50622
// begin if not mc_produce [ i ] then
50182: LD_EXP 59
50186: PUSH
50187: LD_VAR 0 2
50191: ARRAY
50192: NOT
50193: IFFALSE 50197
// continue ;
50195: GO 50179
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
50197: LD_ADDR_VAR 0 5
50201: PUSH
50202: LD_EXP 38
50206: PUSH
50207: LD_VAR 0 2
50211: ARRAY
50212: PPUSH
50213: LD_INT 30
50215: PUSH
50216: LD_INT 3
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PPUSH
50223: CALL_OW 72
50227: ST_TO_ADDR
// if not fac then
50228: LD_VAR 0 5
50232: NOT
50233: IFFALSE 50237
// continue ;
50235: GO 50179
// for j in fac do
50237: LD_ADDR_VAR 0 3
50241: PUSH
50242: LD_VAR 0 5
50246: PUSH
50247: FOR_IN
50248: IFFALSE 50618
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
50250: LD_VAR 0 3
50254: PPUSH
50255: CALL_OW 461
50259: PUSH
50260: LD_INT 2
50262: NONEQUAL
50263: PUSH
50264: LD_VAR 0 3
50268: PPUSH
50269: LD_INT 15
50271: PPUSH
50272: CALL 14020 0 2
50276: PUSH
50277: LD_INT 4
50279: ARRAY
50280: OR
50281: PUSH
50282: LD_VAR 0 3
50286: PPUSH
50287: CALL_OW 313
50291: PUSH
50292: LD_INT 0
50294: EQUAL
50295: OR
50296: IFFALSE 50300
// continue ;
50298: GO 50247
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
50300: LD_VAR 0 3
50304: PPUSH
50305: LD_EXP 59
50309: PUSH
50310: LD_VAR 0 2
50314: ARRAY
50315: PUSH
50316: LD_INT 1
50318: ARRAY
50319: PUSH
50320: LD_INT 1
50322: ARRAY
50323: PPUSH
50324: LD_EXP 59
50328: PUSH
50329: LD_VAR 0 2
50333: ARRAY
50334: PUSH
50335: LD_INT 1
50337: ARRAY
50338: PUSH
50339: LD_INT 2
50341: ARRAY
50342: PPUSH
50343: LD_EXP 59
50347: PUSH
50348: LD_VAR 0 2
50352: ARRAY
50353: PUSH
50354: LD_INT 1
50356: ARRAY
50357: PUSH
50358: LD_INT 3
50360: ARRAY
50361: PPUSH
50362: LD_EXP 59
50366: PUSH
50367: LD_VAR 0 2
50371: ARRAY
50372: PUSH
50373: LD_INT 1
50375: ARRAY
50376: PUSH
50377: LD_INT 4
50379: ARRAY
50380: PPUSH
50381: CALL_OW 448
50385: PUSH
50386: LD_VAR 0 3
50390: PPUSH
50391: LD_EXP 59
50395: PUSH
50396: LD_VAR 0 2
50400: ARRAY
50401: PUSH
50402: LD_INT 1
50404: ARRAY
50405: PUSH
50406: LD_INT 1
50408: ARRAY
50409: PUSH
50410: LD_EXP 59
50414: PUSH
50415: LD_VAR 0 2
50419: ARRAY
50420: PUSH
50421: LD_INT 1
50423: ARRAY
50424: PUSH
50425: LD_INT 2
50427: ARRAY
50428: PUSH
50429: LD_EXP 59
50433: PUSH
50434: LD_VAR 0 2
50438: ARRAY
50439: PUSH
50440: LD_INT 1
50442: ARRAY
50443: PUSH
50444: LD_INT 3
50446: ARRAY
50447: PUSH
50448: LD_EXP 59
50452: PUSH
50453: LD_VAR 0 2
50457: ARRAY
50458: PUSH
50459: LD_INT 1
50461: ARRAY
50462: PUSH
50463: LD_INT 4
50465: ARRAY
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: PPUSH
50473: CALL 17522 0 2
50477: AND
50478: IFFALSE 50616
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
50480: LD_VAR 0 3
50484: PPUSH
50485: LD_EXP 59
50489: PUSH
50490: LD_VAR 0 2
50494: ARRAY
50495: PUSH
50496: LD_INT 1
50498: ARRAY
50499: PUSH
50500: LD_INT 1
50502: ARRAY
50503: PPUSH
50504: LD_EXP 59
50508: PUSH
50509: LD_VAR 0 2
50513: ARRAY
50514: PUSH
50515: LD_INT 1
50517: ARRAY
50518: PUSH
50519: LD_INT 2
50521: ARRAY
50522: PPUSH
50523: LD_EXP 59
50527: PUSH
50528: LD_VAR 0 2
50532: ARRAY
50533: PUSH
50534: LD_INT 1
50536: ARRAY
50537: PUSH
50538: LD_INT 3
50540: ARRAY
50541: PPUSH
50542: LD_EXP 59
50546: PUSH
50547: LD_VAR 0 2
50551: ARRAY
50552: PUSH
50553: LD_INT 1
50555: ARRAY
50556: PUSH
50557: LD_INT 4
50559: ARRAY
50560: PPUSH
50561: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
50565: LD_ADDR_VAR 0 4
50569: PUSH
50570: LD_EXP 59
50574: PUSH
50575: LD_VAR 0 2
50579: ARRAY
50580: PPUSH
50581: LD_INT 1
50583: PPUSH
50584: CALL_OW 3
50588: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
50589: LD_ADDR_EXP 59
50593: PUSH
50594: LD_EXP 59
50598: PPUSH
50599: LD_VAR 0 2
50603: PPUSH
50604: LD_VAR 0 4
50608: PPUSH
50609: CALL_OW 1
50613: ST_TO_ADDR
// break ;
50614: GO 50618
// end ; end ;
50616: GO 50247
50618: POP
50619: POP
// end ;
50620: GO 50179
50622: POP
50623: POP
// end ;
50624: LD_VAR 0 1
50628: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
50629: LD_INT 0
50631: PPUSH
50632: PPUSH
50633: PPUSH
// if not mc_bases then
50634: LD_EXP 38
50638: NOT
50639: IFFALSE 50643
// exit ;
50641: GO 50732
// for i = 1 to mc_bases do
50643: LD_ADDR_VAR 0 2
50647: PUSH
50648: DOUBLE
50649: LD_INT 1
50651: DEC
50652: ST_TO_ADDR
50653: LD_EXP 38
50657: PUSH
50658: FOR_TO
50659: IFFALSE 50730
// begin if mc_attack [ i ] then
50661: LD_EXP 58
50665: PUSH
50666: LD_VAR 0 2
50670: ARRAY
50671: IFFALSE 50728
// begin tmp := mc_attack [ i ] [ 1 ] ;
50673: LD_ADDR_VAR 0 3
50677: PUSH
50678: LD_EXP 58
50682: PUSH
50683: LD_VAR 0 2
50687: ARRAY
50688: PUSH
50689: LD_INT 1
50691: ARRAY
50692: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
50693: LD_ADDR_EXP 58
50697: PUSH
50698: LD_EXP 58
50702: PPUSH
50703: LD_VAR 0 2
50707: PPUSH
50708: EMPTY
50709: PPUSH
50710: CALL_OW 1
50714: ST_TO_ADDR
// Attack ( tmp ) ;
50715: LD_VAR 0 3
50719: PPUSH
50720: CALL 39169 0 1
// exit ;
50724: POP
50725: POP
50726: GO 50732
// end ; end ;
50728: GO 50658
50730: POP
50731: POP
// end ;
50732: LD_VAR 0 1
50736: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
50737: LD_INT 0
50739: PPUSH
50740: PPUSH
50741: PPUSH
50742: PPUSH
50743: PPUSH
50744: PPUSH
50745: PPUSH
// if not mc_bases then
50746: LD_EXP 38
50750: NOT
50751: IFFALSE 50755
// exit ;
50753: GO 51100
// class := AllowSpecClass ( mc_defender [ 1 ] ) ;
50755: LD_ADDR_VAR 0 7
50759: PUSH
50760: LD_EXP 60
50764: PUSH
50765: LD_INT 1
50767: ARRAY
50768: PPUSH
50769: CALL 8334 0 1
50773: ST_TO_ADDR
// for i = 1 to mc_bases do
50774: LD_ADDR_VAR 0 2
50778: PUSH
50779: DOUBLE
50780: LD_INT 1
50782: DEC
50783: ST_TO_ADDR
50784: LD_EXP 38
50788: PUSH
50789: FOR_TO
50790: IFFALSE 51098
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ 1 ] ) , mc_scan_area [ i ] ) ) ;
50792: LD_ADDR_EXP 61
50796: PUSH
50797: LD_EXP 61
50801: PPUSH
50802: LD_VAR 0 2
50806: PPUSH
50807: LD_EXP 38
50811: PUSH
50812: LD_INT 1
50814: ARRAY
50815: PPUSH
50816: CALL_OW 255
50820: PPUSH
50821: LD_EXP 63
50825: PUSH
50826: LD_VAR 0 2
50830: ARRAY
50831: PPUSH
50832: CALL 6792 0 2
50836: PPUSH
50837: CALL_OW 1
50841: ST_TO_ADDR
// if not mc_scan [ i ] then
50842: LD_EXP 61
50846: PUSH
50847: LD_VAR 0 2
50851: ARRAY
50852: NOT
50853: IFFALSE 51005
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
50855: LD_ADDR_VAR 0 4
50859: PUSH
50860: LD_EXP 38
50864: PUSH
50865: LD_VAR 0 2
50869: ARRAY
50870: PPUSH
50871: LD_INT 2
50873: PUSH
50874: LD_INT 25
50876: PUSH
50877: LD_INT 5
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 25
50886: PUSH
50887: LD_INT 8
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 25
50896: PUSH
50897: LD_INT 9
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: PPUSH
50910: CALL_OW 72
50914: ST_TO_ADDR
// if not tmp then
50915: LD_VAR 0 4
50919: NOT
50920: IFFALSE 50924
// continue ;
50922: GO 50789
// for j in tmp do
50924: LD_ADDR_VAR 0 3
50928: PUSH
50929: LD_VAR 0 4
50933: PUSH
50934: FOR_IN
50935: IFFALSE 51003
// if GetBType ( IsInUnit ( j ) ) in [ b_barracks ] and GetClass ( j ) = 1 and not MineOfUnit ( j ) then
50937: LD_VAR 0 3
50941: PPUSH
50942: CALL_OW 310
50946: PPUSH
50947: CALL_OW 266
50951: PUSH
50952: LD_INT 5
50954: PUSH
50955: EMPTY
50956: LIST
50957: IN
50958: PUSH
50959: LD_VAR 0 3
50963: PPUSH
50964: CALL_OW 257
50968: PUSH
50969: LD_INT 1
50971: EQUAL
50972: AND
50973: PUSH
50974: LD_VAR 0 3
50978: PPUSH
50979: CALL_OW 459
50983: NOT
50984: AND
50985: IFFALSE 51001
// ComChangeProfession ( j , class ) ;
50987: LD_VAR 0 3
50991: PPUSH
50992: LD_VAR 0 7
50996: PPUSH
50997: CALL_OW 123
51001: GO 50934
51003: POP
51004: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
51005: LD_EXP 61
51009: PUSH
51010: LD_VAR 0 2
51014: ARRAY
51015: PUSH
51016: LD_EXP 60
51020: PUSH
51021: LD_VAR 0 2
51025: ARRAY
51026: AND
51027: IFFALSE 51096
// begin tmp := mc_defender [ i ] ;
51029: LD_ADDR_VAR 0 4
51033: PUSH
51034: LD_EXP 60
51038: PUSH
51039: LD_VAR 0 2
51043: ARRAY
51044: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
51045: LD_ADDR_EXP 60
51049: PUSH
51050: LD_EXP 60
51054: PPUSH
51055: LD_VAR 0 2
51059: PPUSH
51060: EMPTY
51061: PPUSH
51062: CALL_OW 1
51066: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
51067: LD_VAR 0 2
51071: PPUSH
51072: LD_VAR 0 4
51076: PPUSH
51077: LD_EXP 61
51081: PUSH
51082: LD_VAR 0 2
51086: ARRAY
51087: PPUSH
51088: CALL 6827 0 3
// exit ;
51092: POP
51093: POP
51094: GO 51100
// end ; end ;
51096: GO 50789
51098: POP
51099: POP
// end ;
51100: LD_VAR 0 1
51104: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tech_temp , tmp2 ; begin
51105: LD_INT 0
51107: PPUSH
51108: PPUSH
51109: PPUSH
51110: PPUSH
51111: PPUSH
51112: PPUSH
51113: PPUSH
51114: PPUSH
51115: PPUSH
51116: PPUSH
// if not mc_bases then
51117: LD_EXP 38
51121: NOT
51122: IFFALSE 51126
// exit ;
51124: GO 52025
// for i = 1 to mc_bases do
51126: LD_ADDR_VAR 0 2
51130: PUSH
51131: DOUBLE
51132: LD_INT 1
51134: DEC
51135: ST_TO_ADDR
51136: LD_EXP 38
51140: PUSH
51141: FOR_TO
51142: IFFALSE 52023
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
51144: LD_ADDR_VAR 0 6
51148: PUSH
51149: LD_EXP 38
51153: PUSH
51154: LD_VAR 0 2
51158: ARRAY
51159: PPUSH
51160: LD_INT 2
51162: PUSH
51163: LD_INT 30
51165: PUSH
51166: LD_INT 6
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 30
51175: PUSH
51176: LD_INT 7
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 30
51185: PUSH
51186: LD_INT 8
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: PPUSH
51199: CALL_OW 72
51203: ST_TO_ADDR
// if not tmp then
51204: LD_VAR 0 6
51208: NOT
51209: IFFALSE 51213
// continue ;
51211: GO 51141
// for j in tmp do
51213: LD_ADDR_VAR 0 3
51217: PUSH
51218: LD_VAR 0 6
51222: PUSH
51223: FOR_IN
51224: IFFALSE 52019
// begin side := GetSide ( j ) ;
51226: LD_ADDR_VAR 0 4
51230: PUSH
51231: LD_VAR 0 3
51235: PPUSH
51236: CALL_OW 255
51240: ST_TO_ADDR
// if not mc_tech [ side ] then
51241: LD_EXP 65
51245: PUSH
51246: LD_VAR 0 4
51250: ARRAY
51251: NOT
51252: IFFALSE 51256
// continue ;
51254: GO 51223
// if BuildingStatus ( j ) = bs_idle then
51256: LD_VAR 0 3
51260: PPUSH
51261: CALL_OW 461
51265: PUSH
51266: LD_INT 2
51268: EQUAL
51269: IFFALSE 51326
// for t in mc_tech [ side ] do
51271: LD_ADDR_VAR 0 5
51275: PUSH
51276: LD_EXP 65
51280: PUSH
51281: LD_VAR 0 4
51285: ARRAY
51286: PUSH
51287: FOR_IN
51288: IFFALSE 51324
// if CanBeResearched ( j , t ) then
51290: LD_VAR 0 3
51294: PPUSH
51295: LD_VAR 0 5
51299: PPUSH
51300: CALL_OW 430
51304: IFFALSE 51322
// begin ComResearch ( j , t ) ;
51306: LD_VAR 0 3
51310: PPUSH
51311: LD_VAR 0 5
51315: PPUSH
51316: CALL_OW 124
// break ;
51320: GO 51324
// end ;
51322: GO 51287
51324: POP
51325: POP
// if BuildingStatus ( j ) = bs_need_ape then
51326: LD_VAR 0 3
51330: PPUSH
51331: CALL_OW 461
51335: PUSH
51336: LD_INT 10
51338: EQUAL
51339: IFFALSE 51854
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
51341: LD_EXP 67
51345: PUSH
51346: LD_VAR 0 2
51350: ARRAY
51351: NOT
51352: PUSH
51353: LD_EXP 68
51357: PUSH
51358: LD_VAR 0 2
51362: ARRAY
51363: NOT
51364: AND
51365: PUSH
51366: LD_EXP 65
51370: PUSH
51371: LD_VAR 0 4
51375: ARRAY
51376: PUSH
51377: LD_INT 1
51379: GREATER
51380: AND
51381: IFFALSE 51457
// begin ComCancel ( j ) ;
51383: LD_VAR 0 3
51387: PPUSH
51388: CALL_OW 127
// tech_temp := Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ;
51392: LD_ADDR_VAR 0 9
51396: PUSH
51397: LD_EXP 65
51401: PUSH
51402: LD_VAR 0 4
51406: ARRAY
51407: PPUSH
51408: LD_EXP 65
51412: PUSH
51413: LD_VAR 0 4
51417: ARRAY
51418: PPUSH
51419: LD_INT 1
51421: PPUSH
51422: LD_INT 0
51424: PPUSH
51425: CALL 10812 0 4
51429: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , tech_temp ) ;
51430: LD_ADDR_EXP 65
51434: PUSH
51435: LD_EXP 65
51439: PPUSH
51440: LD_VAR 0 4
51444: PPUSH
51445: LD_VAR 0 9
51449: PPUSH
51450: CALL_OW 1
51454: ST_TO_ADDR
// continue ;
51455: GO 51223
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
51457: LD_EXP 67
51461: PUSH
51462: LD_VAR 0 2
51466: ARRAY
51467: PUSH
51468: LD_EXP 68
51472: PUSH
51473: LD_VAR 0 2
51477: ARRAY
51478: NOT
51479: AND
51480: IFFALSE 51607
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
51482: LD_ADDR_EXP 68
51486: PUSH
51487: LD_EXP 68
51491: PPUSH
51492: LD_VAR 0 2
51496: PUSH
51497: LD_EXP 68
51501: PUSH
51502: LD_VAR 0 2
51506: ARRAY
51507: PUSH
51508: LD_INT 1
51510: PLUS
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PPUSH
51516: LD_EXP 67
51520: PUSH
51521: LD_VAR 0 2
51525: ARRAY
51526: PUSH
51527: LD_INT 1
51529: ARRAY
51530: PPUSH
51531: CALL 11829 0 3
51535: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
51536: LD_EXP 67
51540: PUSH
51541: LD_VAR 0 2
51545: ARRAY
51546: PUSH
51547: LD_INT 1
51549: ARRAY
51550: PPUSH
51551: LD_INT 112
51553: PPUSH
51554: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
51558: LD_ADDR_VAR 0 10
51562: PUSH
51563: LD_EXP 67
51567: PUSH
51568: LD_VAR 0 2
51572: ARRAY
51573: PPUSH
51574: LD_INT 1
51576: PPUSH
51577: CALL_OW 3
51581: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
51582: LD_ADDR_EXP 67
51586: PUSH
51587: LD_EXP 67
51591: PPUSH
51592: LD_VAR 0 2
51596: PPUSH
51597: LD_VAR 0 10
51601: PPUSH
51602: CALL_OW 1
51606: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
51607: LD_EXP 67
51611: PUSH
51612: LD_VAR 0 2
51616: ARRAY
51617: PUSH
51618: LD_EXP 68
51622: PUSH
51623: LD_VAR 0 2
51627: ARRAY
51628: AND
51629: PUSH
51630: LD_EXP 68
51634: PUSH
51635: LD_VAR 0 2
51639: ARRAY
51640: PUSH
51641: LD_INT 1
51643: ARRAY
51644: PPUSH
51645: CALL_OW 310
51649: NOT
51650: AND
51651: PUSH
51652: LD_VAR 0 3
51656: PPUSH
51657: CALL_OW 313
51661: PUSH
51662: LD_INT 6
51664: EQUAL
51665: AND
51666: IFFALSE 51722
// begin tmp2 := UnitsInside ( j ) ;
51668: LD_ADDR_VAR 0 10
51672: PUSH
51673: LD_VAR 0 3
51677: PPUSH
51678: CALL_OW 313
51682: ST_TO_ADDR
// if tmp2 = 6 then
51683: LD_VAR 0 10
51687: PUSH
51688: LD_INT 6
51690: EQUAL
51691: IFFALSE 51722
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
51693: LD_VAR 0 10
51697: PUSH
51698: LD_INT 1
51700: ARRAY
51701: PPUSH
51702: LD_INT 112
51704: PPUSH
51705: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
51709: LD_VAR 0 10
51713: PUSH
51714: LD_INT 1
51716: ARRAY
51717: PPUSH
51718: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) in mc_lab [ i ] then
51722: LD_EXP 68
51726: PUSH
51727: LD_VAR 0 2
51731: ARRAY
51732: PUSH
51733: LD_EXP 68
51737: PUSH
51738: LD_VAR 0 2
51742: ARRAY
51743: PUSH
51744: LD_INT 1
51746: ARRAY
51747: PPUSH
51748: CALL_OW 314
51752: NOT
51753: AND
51754: PUSH
51755: LD_EXP 68
51759: PUSH
51760: LD_VAR 0 2
51764: ARRAY
51765: PUSH
51766: LD_INT 1
51768: ARRAY
51769: PPUSH
51770: CALL_OW 310
51774: PUSH
51775: LD_EXP 71
51779: PUSH
51780: LD_VAR 0 2
51784: ARRAY
51785: IN
51786: NOT
51787: AND
51788: IFFALSE 51854
// begin if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
51790: LD_EXP 68
51794: PUSH
51795: LD_VAR 0 2
51799: ARRAY
51800: PUSH
51801: LD_INT 1
51803: ARRAY
51804: PPUSH
51805: CALL_OW 310
51809: IFFALSE 51830
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
51811: LD_EXP 68
51815: PUSH
51816: LD_VAR 0 2
51820: ARRAY
51821: PUSH
51822: LD_INT 1
51824: ARRAY
51825: PPUSH
51826: CALL_OW 122
// AddComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
51830: LD_EXP 68
51834: PUSH
51835: LD_VAR 0 2
51839: ARRAY
51840: PUSH
51841: LD_INT 1
51843: ARRAY
51844: PPUSH
51845: LD_VAR 0 3
51849: PPUSH
51850: CALL_OW 180
// end ; end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
51854: LD_VAR 0 3
51858: PPUSH
51859: CALL_OW 461
51863: PUSH
51864: LD_INT 6
51866: EQUAL
51867: PUSH
51868: LD_VAR 0 6
51872: PUSH
51873: LD_INT 1
51875: GREATER
51876: AND
51877: IFFALSE 52017
// begin sci := [ ] ;
51879: LD_ADDR_VAR 0 8
51883: PUSH
51884: EMPTY
51885: ST_TO_ADDR
// for x in tmp diff j do
51886: LD_ADDR_VAR 0 7
51890: PUSH
51891: LD_VAR 0 6
51895: PUSH
51896: LD_VAR 0 3
51900: DIFF
51901: PUSH
51902: FOR_IN
51903: IFFALSE 51943
// begin if BuildingStatus ( x ) = bs_idle then
51905: LD_VAR 0 7
51909: PPUSH
51910: CALL_OW 461
51914: PUSH
51915: LD_INT 2
51917: EQUAL
51918: IFFALSE 51941
// sci := sci ^ UnitsInside ( x ) ;
51920: LD_ADDR_VAR 0 8
51924: PUSH
51925: LD_VAR 0 8
51929: PUSH
51930: LD_VAR 0 7
51934: PPUSH
51935: CALL_OW 313
51939: ADD
51940: ST_TO_ADDR
// end ;
51941: GO 51902
51943: POP
51944: POP
// if not sci then
51945: LD_VAR 0 8
51949: NOT
51950: IFFALSE 51954
// continue ;
51952: GO 51223
// for x in sci do
51954: LD_ADDR_VAR 0 7
51958: PUSH
51959: LD_VAR 0 8
51963: PUSH
51964: FOR_IN
51965: IFFALSE 52015
// if IsInUnit ( x ) and not HasTask ( x ) then
51967: LD_VAR 0 7
51971: PPUSH
51972: CALL_OW 310
51976: PUSH
51977: LD_VAR 0 7
51981: PPUSH
51982: CALL_OW 314
51986: NOT
51987: AND
51988: IFFALSE 52013
// begin ComExitBuilding ( x ) ;
51990: LD_VAR 0 7
51994: PPUSH
51995: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
51999: LD_VAR 0 7
52003: PPUSH
52004: LD_VAR 0 3
52008: PPUSH
52009: CALL_OW 180
// end ;
52013: GO 51964
52015: POP
52016: POP
// end ; end ;
52017: GO 51223
52019: POP
52020: POP
// end ;
52021: GO 51141
52023: POP
52024: POP
// end ;
52025: LD_VAR 0 1
52029: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
52030: LD_INT 0
52032: PPUSH
52033: PPUSH
52034: PPUSH
52035: PPUSH
52036: PPUSH
52037: PPUSH
// if not mc_bases then
52038: LD_EXP 38
52042: NOT
52043: IFFALSE 52047
// exit ;
52045: GO 52286
// for i = 1 to 8 do
52047: LD_ADDR_VAR 0 2
52051: PUSH
52052: DOUBLE
52053: LD_INT 1
52055: DEC
52056: ST_TO_ADDR
52057: LD_INT 8
52059: PUSH
52060: FOR_TO
52061: IFFALSE 52087
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
52063: LD_ADDR_EXP 65
52067: PUSH
52068: LD_EXP 65
52072: PPUSH
52073: LD_VAR 0 2
52077: PPUSH
52078: EMPTY
52079: PPUSH
52080: CALL_OW 1
52084: ST_TO_ADDR
52085: GO 52060
52087: POP
52088: POP
// tmp := [ ] ;
52089: LD_ADDR_VAR 0 5
52093: PUSH
52094: EMPTY
52095: ST_TO_ADDR
// for i = 1 to mc_sides do
52096: LD_ADDR_VAR 0 2
52100: PUSH
52101: DOUBLE
52102: LD_INT 1
52104: DEC
52105: ST_TO_ADDR
52106: LD_EXP 64
52110: PUSH
52111: FOR_TO
52112: IFFALSE 52170
// if not mc_sides [ i ] in tmp then
52114: LD_EXP 64
52118: PUSH
52119: LD_VAR 0 2
52123: ARRAY
52124: PUSH
52125: LD_VAR 0 5
52129: IN
52130: NOT
52131: IFFALSE 52168
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
52133: LD_ADDR_VAR 0 5
52137: PUSH
52138: LD_VAR 0 5
52142: PPUSH
52143: LD_VAR 0 5
52147: PUSH
52148: LD_INT 1
52150: PLUS
52151: PPUSH
52152: LD_EXP 64
52156: PUSH
52157: LD_VAR 0 2
52161: ARRAY
52162: PPUSH
52163: CALL_OW 2
52167: ST_TO_ADDR
52168: GO 52111
52170: POP
52171: POP
// if not tmp then
52172: LD_VAR 0 5
52176: NOT
52177: IFFALSE 52181
// exit ;
52179: GO 52286
// for j in tmp do
52181: LD_ADDR_VAR 0 3
52185: PUSH
52186: LD_VAR 0 5
52190: PUSH
52191: FOR_IN
52192: IFFALSE 52284
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
52194: LD_ADDR_VAR 0 6
52198: PUSH
52199: LD_INT 22
52201: PUSH
52202: LD_VAR 0 3
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PPUSH
52211: CALL_OW 69
52215: ST_TO_ADDR
// if not un then
52216: LD_VAR 0 6
52220: NOT
52221: IFFALSE 52225
// continue ;
52223: GO 52191
// nation := GetNation ( un [ 1 ] ) ;
52225: LD_ADDR_VAR 0 4
52229: PUSH
52230: LD_VAR 0 6
52234: PUSH
52235: LD_INT 1
52237: ARRAY
52238: PPUSH
52239: CALL_OW 248
52243: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
52244: LD_ADDR_EXP 65
52248: PUSH
52249: LD_EXP 65
52253: PPUSH
52254: LD_VAR 0 3
52258: PPUSH
52259: LD_VAR 0 3
52263: PPUSH
52264: LD_VAR 0 4
52268: PPUSH
52269: LD_INT 1
52271: PPUSH
52272: CALL 5354 0 3
52276: PPUSH
52277: CALL_OW 1
52281: ST_TO_ADDR
// end ;
52282: GO 52191
52284: POP
52285: POP
// end ;
52286: LD_VAR 0 1
52290: RET
// export function MC_InitSides ( ) ; var i ; begin
52291: LD_INT 0
52293: PPUSH
52294: PPUSH
// if not mc_bases then
52295: LD_EXP 38
52299: NOT
52300: IFFALSE 52304
// exit ;
52302: GO 52378
// for i = 1 to mc_bases do
52304: LD_ADDR_VAR 0 2
52308: PUSH
52309: DOUBLE
52310: LD_INT 1
52312: DEC
52313: ST_TO_ADDR
52314: LD_EXP 38
52318: PUSH
52319: FOR_TO
52320: IFFALSE 52376
// if mc_bases [ i ] then
52322: LD_EXP 38
52326: PUSH
52327: LD_VAR 0 2
52331: ARRAY
52332: IFFALSE 52374
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
52334: LD_ADDR_EXP 64
52338: PUSH
52339: LD_EXP 64
52343: PPUSH
52344: LD_VAR 0 2
52348: PPUSH
52349: LD_EXP 38
52353: PUSH
52354: LD_VAR 0 2
52358: ARRAY
52359: PUSH
52360: LD_INT 1
52362: ARRAY
52363: PPUSH
52364: CALL_OW 255
52368: PPUSH
52369: CALL_OW 1
52373: ST_TO_ADDR
52374: GO 52319
52376: POP
52377: POP
// end ;
52378: LD_VAR 0 1
52382: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
52383: LD_INT 0
52385: PPUSH
52386: PPUSH
52387: PPUSH
52388: PPUSH
52389: PPUSH
52390: PPUSH
52391: PPUSH
52392: PPUSH
// if not mc_bases then
52393: LD_EXP 38
52397: NOT
52398: IFFALSE 52402
// exit ;
52400: GO 53047
// for i = 1 to mc_bases do
52402: LD_ADDR_VAR 0 2
52406: PUSH
52407: DOUBLE
52408: LD_INT 1
52410: DEC
52411: ST_TO_ADDR
52412: LD_EXP 38
52416: PUSH
52417: FOR_TO
52418: IFFALSE 53045
// begin if not mc_bases [ i ] then
52420: LD_EXP 38
52424: PUSH
52425: LD_VAR 0 2
52429: ARRAY
52430: NOT
52431: IFFALSE 52435
// continue ;
52433: GO 52417
// if mc_scan [ i ] then
52435: LD_EXP 61
52439: PUSH
52440: LD_VAR 0 2
52444: ARRAY
52445: IFFALSE 52471
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
52447: LD_ADDR_EXP 50
52451: PUSH
52452: LD_EXP 50
52456: PPUSH
52457: LD_VAR 0 2
52461: PPUSH
52462: EMPTY
52463: PPUSH
52464: CALL_OW 1
52468: ST_TO_ADDR
// continue ;
52469: GO 52417
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
52471: LD_ADDR_VAR 0 5
52475: PUSH
52476: LD_EXP 38
52480: PUSH
52481: LD_VAR 0 2
52485: ARRAY
52486: PUSH
52487: LD_INT 1
52489: ARRAY
52490: PPUSH
52491: CALL_OW 255
52495: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
52496: LD_ADDR_VAR 0 6
52500: PUSH
52501: LD_EXP 38
52505: PUSH
52506: LD_VAR 0 2
52510: ARRAY
52511: PPUSH
52512: LD_INT 30
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PPUSH
52522: CALL_OW 72
52526: ST_TO_ADDR
// if not fac then
52527: LD_VAR 0 6
52531: NOT
52532: IFFALSE 52583
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
52534: LD_ADDR_VAR 0 6
52538: PUSH
52539: LD_EXP 38
52543: PUSH
52544: LD_VAR 0 2
52548: ARRAY
52549: PPUSH
52550: LD_INT 2
52552: PUSH
52553: LD_INT 30
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 30
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: LIST
52577: PPUSH
52578: CALL_OW 72
52582: ST_TO_ADDR
// if not fac then
52583: LD_VAR 0 6
52587: NOT
52588: IFFALSE 52592
// continue ;
52590: GO 52417
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
52592: LD_ADDR_VAR 0 7
52596: PUSH
52597: LD_EXP 62
52601: PUSH
52602: LD_VAR 0 2
52606: ARRAY
52607: PPUSH
52608: LD_INT 22
52610: PUSH
52611: LD_VAR 0 5
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 21
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 3
52632: PUSH
52633: LD_INT 24
52635: PUSH
52636: LD_INT 1000
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: LIST
52651: PPUSH
52652: CALL_OW 70
52656: PUSH
52657: LD_INT 22
52659: PUSH
52660: LD_VAR 0 5
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 91
52671: PUSH
52672: LD_VAR 0 6
52676: PUSH
52677: LD_INT 1
52679: ARRAY
52680: PUSH
52681: LD_INT 25
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 21
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 3
52701: PUSH
52702: LD_INT 24
52704: PUSH
52705: LD_INT 1000
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: PPUSH
52722: CALL_OW 69
52726: UNION
52727: ST_TO_ADDR
// if not vehs then
52728: LD_VAR 0 7
52732: NOT
52733: IFFALSE 52759
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
52735: LD_ADDR_EXP 50
52739: PUSH
52740: LD_EXP 50
52744: PPUSH
52745: LD_VAR 0 2
52749: PPUSH
52750: EMPTY
52751: PPUSH
52752: CALL_OW 1
52756: ST_TO_ADDR
// continue ;
52757: GO 52417
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
52759: LD_ADDR_VAR 0 8
52763: PUSH
52764: LD_EXP 38
52768: PUSH
52769: LD_VAR 0 2
52773: ARRAY
52774: PPUSH
52775: LD_INT 30
52777: PUSH
52778: LD_INT 3
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PPUSH
52785: CALL_OW 72
52789: ST_TO_ADDR
// if tmp then
52790: LD_VAR 0 8
52794: IFFALSE 52897
// begin for j in tmp do
52796: LD_ADDR_VAR 0 3
52800: PUSH
52801: LD_VAR 0 8
52805: PUSH
52806: FOR_IN
52807: IFFALSE 52895
// for k in UnitsInside ( j ) do
52809: LD_ADDR_VAR 0 4
52813: PUSH
52814: LD_VAR 0 3
52818: PPUSH
52819: CALL_OW 313
52823: PUSH
52824: FOR_IN
52825: IFFALSE 52891
// if k then
52827: LD_VAR 0 4
52831: IFFALSE 52889
// if not k in mc_repair_vehicle [ i ] then
52833: LD_VAR 0 4
52837: PUSH
52838: LD_EXP 50
52842: PUSH
52843: LD_VAR 0 2
52847: ARRAY
52848: IN
52849: NOT
52850: IFFALSE 52889
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
52852: LD_ADDR_EXP 50
52856: PUSH
52857: LD_EXP 50
52861: PPUSH
52862: LD_VAR 0 2
52866: PPUSH
52867: LD_EXP 50
52871: PUSH
52872: LD_VAR 0 2
52876: ARRAY
52877: PUSH
52878: LD_VAR 0 4
52882: UNION
52883: PPUSH
52884: CALL_OW 1
52888: ST_TO_ADDR
52889: GO 52824
52891: POP
52892: POP
52893: GO 52806
52895: POP
52896: POP
// end ; if not mc_repair_vehicle [ i ] then
52897: LD_EXP 50
52901: PUSH
52902: LD_VAR 0 2
52906: ARRAY
52907: NOT
52908: IFFALSE 52912
// continue ;
52910: GO 52417
// for j in mc_repair_vehicle [ i ] do
52912: LD_ADDR_VAR 0 3
52916: PUSH
52917: LD_EXP 50
52921: PUSH
52922: LD_VAR 0 2
52926: ARRAY
52927: PUSH
52928: FOR_IN
52929: IFFALSE 53041
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
52931: LD_VAR 0 3
52935: PPUSH
52936: CALL_OW 311
52940: NOT
52941: PUSH
52942: LD_VAR 0 3
52946: PUSH
52947: LD_EXP 41
52951: PUSH
52952: LD_VAR 0 2
52956: ARRAY
52957: PUSH
52958: LD_INT 1
52960: ARRAY
52961: IN
52962: NOT
52963: AND
52964: PUSH
52965: LD_VAR 0 3
52969: PUSH
52970: LD_EXP 41
52974: PUSH
52975: LD_VAR 0 2
52979: ARRAY
52980: PUSH
52981: LD_INT 2
52983: ARRAY
52984: IN
52985: NOT
52986: AND
52987: IFFALSE 53039
// begin if IsInUnit ( j ) then
52989: LD_VAR 0 3
52993: PPUSH
52994: CALL_OW 310
52998: IFFALSE 53009
// ComExitBuilding ( j ) ;
53000: LD_VAR 0 3
53004: PPUSH
53005: CALL_OW 122
// if not HasTask ( j ) then
53009: LD_VAR 0 3
53013: PPUSH
53014: CALL_OW 314
53018: NOT
53019: IFFALSE 53039
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
53021: LD_VAR 0 3
53025: PPUSH
53026: LD_VAR 0 7
53030: PUSH
53031: LD_INT 1
53033: ARRAY
53034: PPUSH
53035: CALL_OW 189
// end ; end ;
53039: GO 52928
53041: POP
53042: POP
// end ;
53043: GO 52417
53045: POP
53046: POP
// end ;
53047: LD_VAR 0 1
53051: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp ; begin
53052: LD_INT 0
53054: PPUSH
53055: PPUSH
53056: PPUSH
53057: PPUSH
53058: PPUSH
53059: PPUSH
53060: PPUSH
53061: PPUSH
// if not mc_bases then
53062: LD_EXP 38
53066: NOT
53067: IFFALSE 53071
// exit ;
53069: GO 53604
// for i = 1 to mc_bases do
53071: LD_ADDR_VAR 0 2
53075: PUSH
53076: DOUBLE
53077: LD_INT 1
53079: DEC
53080: ST_TO_ADDR
53081: LD_EXP 38
53085: PUSH
53086: FOR_TO
53087: IFFALSE 53602
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
53089: LD_EXP 66
53093: PUSH
53094: LD_VAR 0 2
53098: ARRAY
53099: NOT
53100: PUSH
53101: LD_EXP 41
53105: PUSH
53106: LD_VAR 0 2
53110: ARRAY
53111: PUSH
53112: LD_INT 1
53114: ARRAY
53115: OR
53116: PUSH
53117: LD_EXP 41
53121: PUSH
53122: LD_VAR 0 2
53126: ARRAY
53127: PUSH
53128: LD_INT 2
53130: ARRAY
53131: OR
53132: PUSH
53133: LD_EXP 64
53137: PUSH
53138: LD_VAR 0 2
53142: ARRAY
53143: PPUSH
53144: LD_INT 1
53146: PPUSH
53147: CALL_OW 325
53151: NOT
53152: OR
53153: PUSH
53154: LD_EXP 61
53158: PUSH
53159: LD_VAR 0 2
53163: ARRAY
53164: OR
53165: IFFALSE 53169
// continue ;
53167: GO 53086
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
53169: LD_ADDR_VAR 0 8
53173: PUSH
53174: LD_EXP 38
53178: PUSH
53179: LD_VAR 0 2
53183: ARRAY
53184: PPUSH
53185: LD_INT 25
53187: PUSH
53188: LD_INT 4
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 50
53197: PUSH
53198: EMPTY
53199: LIST
53200: PUSH
53201: LD_INT 3
53203: PUSH
53204: LD_INT 60
53206: PUSH
53207: EMPTY
53208: LIST
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: LIST
53218: PPUSH
53219: CALL_OW 72
53223: PUSH
53224: LD_EXP 42
53228: PUSH
53229: LD_VAR 0 2
53233: ARRAY
53234: DIFF
53235: ST_TO_ADDR
// if not tmp then
53236: LD_VAR 0 8
53240: NOT
53241: IFFALSE 53245
// continue ;
53243: GO 53086
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
53245: LD_ADDR_VAR 0 7
53249: PUSH
53250: LD_EXP 66
53254: PUSH
53255: LD_VAR 0 2
53259: ARRAY
53260: PPUSH
53261: LD_INT 22
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 25
53273: PUSH
53274: LD_INT 12
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PPUSH
53285: CALL_OW 70
53289: ST_TO_ADDR
// if not apes then
53290: LD_VAR 0 7
53294: NOT
53295: IFFALSE 53345
// begin if mc_taming [ i ] then
53297: LD_EXP 69
53301: PUSH
53302: LD_VAR 0 2
53306: ARRAY
53307: IFFALSE 53343
// begin MC_Reset ( i , 121 ) ;
53309: LD_VAR 0 2
53313: PPUSH
53314: LD_INT 121
53316: PPUSH
53317: CALL 44271 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
53321: LD_ADDR_EXP 69
53325: PUSH
53326: LD_EXP 69
53330: PPUSH
53331: LD_VAR 0 2
53335: PPUSH
53336: EMPTY
53337: PPUSH
53338: CALL_OW 1
53342: ST_TO_ADDR
// end ; continue ;
53343: GO 53086
// end ; for j in tmp do
53345: LD_ADDR_VAR 0 3
53349: PUSH
53350: LD_VAR 0 8
53354: PUSH
53355: FOR_IN
53356: IFFALSE 53598
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
53358: LD_VAR 0 3
53362: PUSH
53363: LD_EXP 69
53367: PUSH
53368: LD_VAR 0 2
53372: ARRAY
53373: IN
53374: NOT
53375: PUSH
53376: LD_EXP 69
53380: PUSH
53381: LD_VAR 0 2
53385: ARRAY
53386: PUSH
53387: LD_INT 3
53389: LESS
53390: AND
53391: IFFALSE 53449
// begin SetTag ( j , 121 ) ;
53393: LD_VAR 0 3
53397: PPUSH
53398: LD_INT 121
53400: PPUSH
53401: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
53405: LD_ADDR_EXP 69
53409: PUSH
53410: LD_EXP 69
53414: PPUSH
53415: LD_VAR 0 2
53419: PUSH
53420: LD_EXP 69
53424: PUSH
53425: LD_VAR 0 2
53429: ARRAY
53430: PUSH
53431: LD_INT 1
53433: PLUS
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PPUSH
53439: LD_VAR 0 3
53443: PPUSH
53444: CALL 11829 0 3
53448: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
53449: LD_VAR 0 3
53453: PUSH
53454: LD_EXP 69
53458: PUSH
53459: LD_VAR 0 2
53463: ARRAY
53464: IN
53465: IFFALSE 53596
// begin if IsInUnit ( j ) then
53467: LD_VAR 0 3
53471: PPUSH
53472: CALL_OW 310
53476: IFFALSE 53487
// ComExitBuilding ( j ) ;
53478: LD_VAR 0 3
53482: PPUSH
53483: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
53487: LD_ADDR_VAR 0 6
53491: PUSH
53492: LD_VAR 0 7
53496: PPUSH
53497: LD_VAR 0 3
53501: PPUSH
53502: CALL_OW 74
53506: ST_TO_ADDR
// if not ape then
53507: LD_VAR 0 6
53511: NOT
53512: IFFALSE 53516
// break ;
53514: GO 53598
// x := GetX ( ape ) ;
53516: LD_ADDR_VAR 0 4
53520: PUSH
53521: LD_VAR 0 6
53525: PPUSH
53526: CALL_OW 250
53530: ST_TO_ADDR
// y := GetY ( ape ) ;
53531: LD_ADDR_VAR 0 5
53535: PUSH
53536: LD_VAR 0 6
53540: PPUSH
53541: CALL_OW 251
53545: ST_TO_ADDR
// if not ValidHex ( x , y ) then
53546: LD_VAR 0 4
53550: PPUSH
53551: LD_VAR 0 5
53555: PPUSH
53556: CALL_OW 488
53560: NOT
53561: IFFALSE 53565
// break ;
53563: GO 53598
// if not HasTask ( j ) then
53565: LD_VAR 0 3
53569: PPUSH
53570: CALL_OW 314
53574: NOT
53575: IFFALSE 53596
// ComTameXY ( j , x , y ) ;
53577: LD_VAR 0 3
53581: PPUSH
53582: LD_VAR 0 4
53586: PPUSH
53587: LD_VAR 0 5
53591: PPUSH
53592: CALL_OW 131
// end ; end ;
53596: GO 53355
53598: POP
53599: POP
// end ;
53600: GO 53086
53602: POP
53603: POP
// end ;
53604: LD_VAR 0 1
53608: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
53609: LD_INT 0
53611: PPUSH
53612: PPUSH
53613: PPUSH
53614: PPUSH
53615: PPUSH
53616: PPUSH
53617: PPUSH
53618: PPUSH
// if not mc_bases then
53619: LD_EXP 38
53623: NOT
53624: IFFALSE 53628
// exit ;
53626: GO 54238
// for i = 1 to mc_bases do
53628: LD_ADDR_VAR 0 2
53632: PUSH
53633: DOUBLE
53634: LD_INT 1
53636: DEC
53637: ST_TO_ADDR
53638: LD_EXP 38
53642: PUSH
53643: FOR_TO
53644: IFFALSE 54236
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
53646: LD_EXP 67
53650: PUSH
53651: LD_VAR 0 2
53655: ARRAY
53656: NOT
53657: PUSH
53658: LD_EXP 67
53662: PUSH
53663: LD_VAR 0 2
53667: ARRAY
53668: PPUSH
53669: LD_INT 25
53671: PUSH
53672: LD_INT 12
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PPUSH
53679: CALL_OW 72
53683: NOT
53684: OR
53685: IFFALSE 53689
// continue ;
53687: GO 53643
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
53689: LD_ADDR_VAR 0 5
53693: PUSH
53694: LD_EXP 67
53698: PUSH
53699: LD_VAR 0 2
53703: ARRAY
53704: PUSH
53705: LD_INT 1
53707: ARRAY
53708: PPUSH
53709: CALL_OW 255
53713: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
53714: LD_VAR 0 5
53718: PPUSH
53719: LD_INT 2
53721: PPUSH
53722: CALL_OW 325
53726: IFFALSE 53971
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
53728: LD_ADDR_VAR 0 4
53732: PUSH
53733: LD_EXP 67
53737: PUSH
53738: LD_VAR 0 2
53742: ARRAY
53743: PPUSH
53744: LD_INT 25
53746: PUSH
53747: LD_INT 16
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PPUSH
53754: CALL_OW 72
53758: ST_TO_ADDR
// if tmp < 6 then
53759: LD_VAR 0 4
53763: PUSH
53764: LD_INT 6
53766: LESS
53767: IFFALSE 53971
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
53769: LD_ADDR_VAR 0 6
53773: PUSH
53774: LD_EXP 38
53778: PUSH
53779: LD_VAR 0 2
53783: ARRAY
53784: PPUSH
53785: LD_INT 2
53787: PUSH
53788: LD_INT 30
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 30
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: LIST
53812: PPUSH
53813: CALL_OW 72
53817: ST_TO_ADDR
// if depot then
53818: LD_VAR 0 6
53822: IFFALSE 53971
// begin for j in depot do
53824: LD_ADDR_VAR 0 3
53828: PUSH
53829: LD_VAR 0 6
53833: PUSH
53834: FOR_IN
53835: IFFALSE 53866
// begin if UnitsInside ( j ) < 6 then
53837: LD_VAR 0 3
53841: PPUSH
53842: CALL_OW 313
53846: PUSH
53847: LD_INT 6
53849: LESS
53850: IFFALSE 53864
// begin selected := j ;
53852: LD_ADDR_VAR 0 7
53856: PUSH
53857: LD_VAR 0 3
53861: ST_TO_ADDR
// break ;
53862: GO 53866
// end ; end ;
53864: GO 53834
53866: POP
53867: POP
// if selected then
53868: LD_VAR 0 7
53872: IFFALSE 53971
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
53874: LD_ADDR_VAR 0 3
53878: PUSH
53879: LD_EXP 67
53883: PUSH
53884: LD_VAR 0 2
53888: ARRAY
53889: PPUSH
53890: LD_INT 25
53892: PUSH
53893: LD_INT 12
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PPUSH
53900: CALL_OW 72
53904: PUSH
53905: FOR_IN
53906: IFFALSE 53969
// if not HasTask ( j ) then
53908: LD_VAR 0 3
53912: PPUSH
53913: CALL_OW 314
53917: NOT
53918: IFFALSE 53967
// begin if not IsInUnit ( j ) then
53920: LD_VAR 0 3
53924: PPUSH
53925: CALL_OW 310
53929: NOT
53930: IFFALSE 53946
// ComEnterUnit ( j , selected ) ;
53932: LD_VAR 0 3
53936: PPUSH
53937: LD_VAR 0 7
53941: PPUSH
53942: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
53946: LD_VAR 0 3
53950: PPUSH
53951: LD_INT 16
53953: PPUSH
53954: CALL_OW 183
// AddComExitBuilding ( j ) ;
53958: LD_VAR 0 3
53962: PPUSH
53963: CALL_OW 182
// end ;
53967: GO 53905
53969: POP
53970: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
53971: LD_VAR 0 5
53975: PPUSH
53976: LD_INT 11
53978: PPUSH
53979: CALL_OW 325
53983: IFFALSE 54234
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
53985: LD_ADDR_VAR 0 4
53989: PUSH
53990: LD_EXP 67
53994: PUSH
53995: LD_VAR 0 2
53999: ARRAY
54000: PPUSH
54001: LD_INT 25
54003: PUSH
54004: LD_INT 16
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PPUSH
54011: CALL_OW 72
54015: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
54016: LD_VAR 0 4
54020: PUSH
54021: LD_INT 6
54023: GREATEREQUAL
54024: PUSH
54025: LD_VAR 0 5
54029: PPUSH
54030: LD_INT 2
54032: PPUSH
54033: CALL_OW 325
54037: NOT
54038: OR
54039: IFFALSE 54234
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
54041: LD_ADDR_VAR 0 8
54045: PUSH
54046: LD_EXP 38
54050: PUSH
54051: LD_VAR 0 2
54055: ARRAY
54056: PPUSH
54057: LD_INT 2
54059: PUSH
54060: LD_INT 30
54062: PUSH
54063: LD_INT 4
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 30
54072: PUSH
54073: LD_INT 5
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: LIST
54084: PPUSH
54085: CALL_OW 72
54089: ST_TO_ADDR
// if barracks then
54090: LD_VAR 0 8
54094: IFFALSE 54234
// begin for j in barracks do
54096: LD_ADDR_VAR 0 3
54100: PUSH
54101: LD_VAR 0 8
54105: PUSH
54106: FOR_IN
54107: IFFALSE 54138
// begin if UnitsInside ( j ) < 6 then
54109: LD_VAR 0 3
54113: PPUSH
54114: CALL_OW 313
54118: PUSH
54119: LD_INT 6
54121: LESS
54122: IFFALSE 54136
// begin selected := j ;
54124: LD_ADDR_VAR 0 7
54128: PUSH
54129: LD_VAR 0 3
54133: ST_TO_ADDR
// break ;
54134: GO 54138
// end ; end ;
54136: GO 54106
54138: POP
54139: POP
// if selected then
54140: LD_VAR 0 7
54144: IFFALSE 54234
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
54146: LD_ADDR_VAR 0 3
54150: PUSH
54151: LD_EXP 67
54155: PUSH
54156: LD_VAR 0 2
54160: ARRAY
54161: PPUSH
54162: LD_INT 25
54164: PUSH
54165: LD_INT 12
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PPUSH
54172: CALL_OW 72
54176: PUSH
54177: FOR_IN
54178: IFFALSE 54232
// if not IsInUnit ( j ) and not HasTask ( j ) then
54180: LD_VAR 0 3
54184: PPUSH
54185: CALL_OW 310
54189: NOT
54190: PUSH
54191: LD_VAR 0 3
54195: PPUSH
54196: CALL_OW 314
54200: NOT
54201: AND
54202: IFFALSE 54230
// begin ComEnterUnit ( j , selected ) ;
54204: LD_VAR 0 3
54208: PPUSH
54209: LD_VAR 0 7
54213: PPUSH
54214: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
54218: LD_VAR 0 3
54222: PPUSH
54223: LD_INT 15
54225: PPUSH
54226: CALL_OW 183
// end ;
54230: GO 54177
54232: POP
54233: POP
// end ; end ; end ; end ; end ;
54234: GO 53643
54236: POP
54237: POP
// end ;
54238: LD_VAR 0 1
54242: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
54243: LD_INT 0
54245: PPUSH
54246: PPUSH
54247: PPUSH
54248: PPUSH
// if not mc_bases then
54249: LD_EXP 38
54253: NOT
54254: IFFALSE 54258
// exit ;
54256: GO 54436
// for i = 1 to mc_bases do
54258: LD_ADDR_VAR 0 2
54262: PUSH
54263: DOUBLE
54264: LD_INT 1
54266: DEC
54267: ST_TO_ADDR
54268: LD_EXP 38
54272: PUSH
54273: FOR_TO
54274: IFFALSE 54434
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
54276: LD_ADDR_VAR 0 4
54280: PUSH
54281: LD_EXP 38
54285: PUSH
54286: LD_VAR 0 2
54290: ARRAY
54291: PPUSH
54292: LD_INT 25
54294: PUSH
54295: LD_INT 9
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PPUSH
54302: CALL_OW 72
54306: ST_TO_ADDR
// if not tmp then
54307: LD_VAR 0 4
54311: NOT
54312: IFFALSE 54316
// continue ;
54314: GO 54273
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
54316: LD_EXP 64
54320: PUSH
54321: LD_VAR 0 2
54325: ARRAY
54326: PPUSH
54327: LD_INT 29
54329: PPUSH
54330: CALL_OW 325
54334: NOT
54335: PUSH
54336: LD_EXP 64
54340: PUSH
54341: LD_VAR 0 2
54345: ARRAY
54346: PPUSH
54347: LD_INT 28
54349: PPUSH
54350: CALL_OW 325
54354: NOT
54355: AND
54356: IFFALSE 54360
// continue ;
54358: GO 54273
// for j in tmp do
54360: LD_ADDR_VAR 0 3
54364: PUSH
54365: LD_VAR 0 4
54369: PUSH
54370: FOR_IN
54371: IFFALSE 54430
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
54373: LD_VAR 0 3
54377: PUSH
54378: LD_EXP 41
54382: PUSH
54383: LD_VAR 0 2
54387: ARRAY
54388: PUSH
54389: LD_INT 1
54391: ARRAY
54392: IN
54393: NOT
54394: PUSH
54395: LD_VAR 0 3
54399: PUSH
54400: LD_EXP 41
54404: PUSH
54405: LD_VAR 0 2
54409: ARRAY
54410: PUSH
54411: LD_INT 2
54413: ARRAY
54414: IN
54415: NOT
54416: AND
54417: IFFALSE 54428
// ComSpaceTimeShoot ( j ) ;
54419: LD_VAR 0 3
54423: PPUSH
54424: CALL 5991 0 1
54428: GO 54370
54430: POP
54431: POP
// end ;
54432: GO 54273
54434: POP
54435: POP
// end ;
54436: LD_VAR 0 1
54440: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
54441: LD_INT 0
54443: PPUSH
54444: PPUSH
54445: PPUSH
54446: PPUSH
// if not mc_bases then
54447: LD_EXP 38
54451: NOT
54452: IFFALSE 54456
// exit ;
54454: GO 54478
// for i = 1 to mc_bases do
54456: LD_ADDR_VAR 0 2
54460: PUSH
54461: DOUBLE
54462: LD_INT 1
54464: DEC
54465: ST_TO_ADDR
54466: LD_EXP 38
54470: PUSH
54471: FOR_TO
54472: IFFALSE 54476
// begin end ;
54474: GO 54471
54476: POP
54477: POP
// end ;
54478: LD_VAR 0 1
54482: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
54483: LD_INT 0
54485: PPUSH
54486: PPUSH
54487: PPUSH
54488: PPUSH
54489: PPUSH
54490: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
54491: LD_VAR 0 1
54495: NOT
54496: PUSH
54497: LD_VAR 0 2
54501: NOT
54502: OR
54503: PUSH
54504: LD_VAR 0 3
54508: NOT
54509: OR
54510: PUSH
54511: LD_VAR 0 4
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: LD_INT 3
54524: PUSH
54525: LD_INT 4
54527: PUSH
54528: LD_INT 5
54530: PUSH
54531: LD_INT 8
54533: PUSH
54534: LD_INT 9
54536: PUSH
54537: LD_INT 15
54539: PUSH
54540: LD_INT 16
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: IN
54554: NOT
54555: OR
54556: IFFALSE 54560
// exit ;
54558: GO 55460
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
54560: LD_ADDR_VAR 0 2
54564: PUSH
54565: LD_VAR 0 2
54569: PPUSH
54570: LD_INT 21
54572: PUSH
54573: LD_INT 3
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 24
54582: PUSH
54583: LD_INT 250
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PPUSH
54594: CALL_OW 72
54598: ST_TO_ADDR
// case class of 1 , 15 :
54599: LD_VAR 0 4
54603: PUSH
54604: LD_INT 1
54606: DOUBLE
54607: EQUAL
54608: IFTRUE 54618
54610: LD_INT 15
54612: DOUBLE
54613: EQUAL
54614: IFTRUE 54618
54616: GO 54703
54618: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
54619: LD_ADDR_VAR 0 8
54623: PUSH
54624: LD_VAR 0 2
54628: PPUSH
54629: LD_INT 2
54631: PUSH
54632: LD_INT 30
54634: PUSH
54635: LD_INT 32
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 30
54644: PUSH
54645: LD_INT 31
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: LIST
54656: PPUSH
54657: CALL_OW 72
54661: PUSH
54662: LD_VAR 0 2
54666: PPUSH
54667: LD_INT 2
54669: PUSH
54670: LD_INT 30
54672: PUSH
54673: LD_INT 4
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 30
54682: PUSH
54683: LD_INT 5
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: LIST
54694: PPUSH
54695: CALL_OW 72
54699: ADD
54700: ST_TO_ADDR
54701: GO 54949
54703: LD_INT 2
54705: DOUBLE
54706: EQUAL
54707: IFTRUE 54717
54709: LD_INT 16
54711: DOUBLE
54712: EQUAL
54713: IFTRUE 54717
54715: GO 54763
54717: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
54718: LD_ADDR_VAR 0 8
54722: PUSH
54723: LD_VAR 0 2
54727: PPUSH
54728: LD_INT 2
54730: PUSH
54731: LD_INT 30
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 30
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: LIST
54755: PPUSH
54756: CALL_OW 72
54760: ST_TO_ADDR
54761: GO 54949
54763: LD_INT 3
54765: DOUBLE
54766: EQUAL
54767: IFTRUE 54771
54769: GO 54817
54771: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
54772: LD_ADDR_VAR 0 8
54776: PUSH
54777: LD_VAR 0 2
54781: PPUSH
54782: LD_INT 2
54784: PUSH
54785: LD_INT 30
54787: PUSH
54788: LD_INT 2
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 30
54797: PUSH
54798: LD_INT 3
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: LIST
54809: PPUSH
54810: CALL_OW 72
54814: ST_TO_ADDR
54815: GO 54949
54817: LD_INT 4
54819: DOUBLE
54820: EQUAL
54821: IFTRUE 54825
54823: GO 54882
54825: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
54826: LD_ADDR_VAR 0 8
54830: PUSH
54831: LD_VAR 0 2
54835: PPUSH
54836: LD_INT 2
54838: PUSH
54839: LD_INT 30
54841: PUSH
54842: LD_INT 6
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 30
54851: PUSH
54852: LD_INT 7
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 30
54861: PUSH
54862: LD_INT 8
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: PPUSH
54875: CALL_OW 72
54879: ST_TO_ADDR
54880: GO 54949
54882: LD_INT 5
54884: DOUBLE
54885: EQUAL
54886: IFTRUE 54902
54888: LD_INT 8
54890: DOUBLE
54891: EQUAL
54892: IFTRUE 54902
54894: LD_INT 9
54896: DOUBLE
54897: EQUAL
54898: IFTRUE 54902
54900: GO 54948
54902: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
54903: LD_ADDR_VAR 0 8
54907: PUSH
54908: LD_VAR 0 2
54912: PPUSH
54913: LD_INT 2
54915: PUSH
54916: LD_INT 30
54918: PUSH
54919: LD_INT 4
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 30
54928: PUSH
54929: LD_INT 5
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: LIST
54940: PPUSH
54941: CALL_OW 72
54945: ST_TO_ADDR
54946: GO 54949
54948: POP
// if not tmp then
54949: LD_VAR 0 8
54953: NOT
54954: IFFALSE 54958
// exit ;
54956: GO 55460
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
54958: LD_VAR 0 4
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 15
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: IN
54973: PUSH
54974: LD_EXP 47
54978: PUSH
54979: LD_VAR 0 1
54983: ARRAY
54984: AND
54985: IFFALSE 55141
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
54987: LD_ADDR_VAR 0 9
54991: PUSH
54992: LD_EXP 47
54996: PUSH
54997: LD_VAR 0 1
55001: ARRAY
55002: PUSH
55003: LD_INT 1
55005: ARRAY
55006: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
55007: LD_VAR 0 9
55011: PUSH
55012: LD_EXP 48
55016: PUSH
55017: LD_VAR 0 1
55021: ARRAY
55022: IN
55023: NOT
55024: IFFALSE 55139
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
55026: LD_ADDR_EXP 48
55030: PUSH
55031: LD_EXP 48
55035: PPUSH
55036: LD_VAR 0 1
55040: PUSH
55041: LD_EXP 48
55045: PUSH
55046: LD_VAR 0 1
55050: ARRAY
55051: PUSH
55052: LD_INT 1
55054: PLUS
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PPUSH
55060: LD_VAR 0 9
55064: PPUSH
55065: CALL 11829 0 3
55069: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
55070: LD_ADDR_EXP 47
55074: PUSH
55075: LD_EXP 47
55079: PPUSH
55080: LD_VAR 0 1
55084: PPUSH
55085: LD_EXP 47
55089: PUSH
55090: LD_VAR 0 1
55094: ARRAY
55095: PUSH
55096: LD_VAR 0 9
55100: DIFF
55101: PPUSH
55102: CALL_OW 1
55106: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
55107: LD_VAR 0 3
55111: PPUSH
55112: LD_EXP 48
55116: PUSH
55117: LD_VAR 0 1
55121: ARRAY
55122: PUSH
55123: LD_EXP 48
55127: PUSH
55128: LD_VAR 0 1
55132: ARRAY
55133: ARRAY
55134: PPUSH
55135: CALL_OW 120
// end ; exit ;
55139: GO 55460
// end ; if tmp > 1 then
55141: LD_VAR 0 8
55145: PUSH
55146: LD_INT 1
55148: GREATER
55149: IFFALSE 55253
// for i = 2 to tmp do
55151: LD_ADDR_VAR 0 6
55155: PUSH
55156: DOUBLE
55157: LD_INT 2
55159: DEC
55160: ST_TO_ADDR
55161: LD_VAR 0 8
55165: PUSH
55166: FOR_TO
55167: IFFALSE 55251
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
55169: LD_VAR 0 8
55173: PUSH
55174: LD_VAR 0 6
55178: ARRAY
55179: PPUSH
55180: CALL_OW 461
55184: PUSH
55185: LD_INT 6
55187: EQUAL
55188: IFFALSE 55249
// begin x := tmp [ i ] ;
55190: LD_ADDR_VAR 0 9
55194: PUSH
55195: LD_VAR 0 8
55199: PUSH
55200: LD_VAR 0 6
55204: ARRAY
55205: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
55206: LD_ADDR_VAR 0 8
55210: PUSH
55211: LD_VAR 0 8
55215: PPUSH
55216: LD_VAR 0 6
55220: PPUSH
55221: CALL_OW 3
55225: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
55226: LD_ADDR_VAR 0 8
55230: PUSH
55231: LD_VAR 0 8
55235: PPUSH
55236: LD_INT 1
55238: PPUSH
55239: LD_VAR 0 9
55243: PPUSH
55244: CALL_OW 2
55248: ST_TO_ADDR
// end ;
55249: GO 55166
55251: POP
55252: POP
// for i in tmp do
55253: LD_ADDR_VAR 0 6
55257: PUSH
55258: LD_VAR 0 8
55262: PUSH
55263: FOR_IN
55264: IFFALSE 55333
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
55266: LD_VAR 0 6
55270: PPUSH
55271: CALL_OW 313
55275: PUSH
55276: LD_INT 6
55278: LESS
55279: PUSH
55280: LD_VAR 0 6
55284: PPUSH
55285: CALL_OW 266
55289: PUSH
55290: LD_INT 31
55292: PUSH
55293: LD_INT 32
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: IN
55300: NOT
55301: AND
55302: PUSH
55303: LD_VAR 0 6
55307: PPUSH
55308: CALL_OW 313
55312: PUSH
55313: LD_INT 0
55315: EQUAL
55316: OR
55317: IFFALSE 55331
// begin j := i ;
55319: LD_ADDR_VAR 0 7
55323: PUSH
55324: LD_VAR 0 6
55328: ST_TO_ADDR
// break ;
55329: GO 55333
// end ; end ;
55331: GO 55263
55333: POP
55334: POP
// if j then
55335: LD_VAR 0 7
55339: IFFALSE 55357
// ComEnterUnit ( unit , j ) else
55341: LD_VAR 0 3
55345: PPUSH
55346: LD_VAR 0 7
55350: PPUSH
55351: CALL_OW 120
55355: GO 55460
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
55357: LD_ADDR_VAR 0 10
55361: PUSH
55362: LD_VAR 0 2
55366: PPUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 30
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 30
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: LIST
55394: PPUSH
55395: CALL_OW 72
55399: ST_TO_ADDR
// if depot then
55400: LD_VAR 0 10
55404: IFFALSE 55460
// begin depot := NearestUnitToUnit ( depot , unit ) ;
55406: LD_ADDR_VAR 0 10
55410: PUSH
55411: LD_VAR 0 10
55415: PPUSH
55416: LD_VAR 0 3
55420: PPUSH
55421: CALL_OW 74
55425: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
55426: LD_VAR 0 3
55430: PPUSH
55431: LD_VAR 0 10
55435: PPUSH
55436: CALL_OW 296
55440: PUSH
55441: LD_INT 10
55443: GREATER
55444: IFFALSE 55460
// ComStandNearbyBuilding ( unit , depot ) ;
55446: LD_VAR 0 3
55450: PPUSH
55451: LD_VAR 0 10
55455: PPUSH
55456: CALL 6608 0 2
// end ; end ; end ;
55460: LD_VAR 0 5
55464: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
55465: LD_INT 0
55467: PPUSH
55468: PPUSH
55469: PPUSH
55470: PPUSH
// if not mc_bases then
55471: LD_EXP 38
55475: NOT
55476: IFFALSE 55480
// exit ;
55478: GO 55719
// for i = 1 to mc_bases do
55480: LD_ADDR_VAR 0 2
55484: PUSH
55485: DOUBLE
55486: LD_INT 1
55488: DEC
55489: ST_TO_ADDR
55490: LD_EXP 38
55494: PUSH
55495: FOR_TO
55496: IFFALSE 55717
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
55498: LD_ADDR_VAR 0 4
55502: PUSH
55503: LD_EXP 38
55507: PUSH
55508: LD_VAR 0 2
55512: ARRAY
55513: PPUSH
55514: LD_INT 21
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PPUSH
55524: CALL_OW 72
55528: PUSH
55529: LD_EXP 67
55533: PUSH
55534: LD_VAR 0 2
55538: ARRAY
55539: UNION
55540: ST_TO_ADDR
// if not tmp then
55541: LD_VAR 0 4
55545: NOT
55546: IFFALSE 55550
// continue ;
55548: GO 55495
// for j in tmp do
55550: LD_ADDR_VAR 0 3
55554: PUSH
55555: LD_VAR 0 4
55559: PUSH
55560: FOR_IN
55561: IFFALSE 55713
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
55563: LD_VAR 0 3
55567: PPUSH
55568: CALL_OW 110
55572: NOT
55573: PUSH
55574: LD_VAR 0 3
55578: PPUSH
55579: CALL_OW 314
55583: NOT
55584: AND
55585: PUSH
55586: LD_VAR 0 3
55590: PPUSH
55591: CALL_OW 311
55595: NOT
55596: AND
55597: PUSH
55598: LD_VAR 0 3
55602: PPUSH
55603: CALL_OW 310
55607: NOT
55608: AND
55609: PUSH
55610: LD_VAR 0 3
55614: PUSH
55615: LD_EXP 41
55619: PUSH
55620: LD_VAR 0 2
55624: ARRAY
55625: PUSH
55626: LD_INT 1
55628: ARRAY
55629: IN
55630: NOT
55631: AND
55632: PUSH
55633: LD_VAR 0 3
55637: PUSH
55638: LD_EXP 41
55642: PUSH
55643: LD_VAR 0 2
55647: ARRAY
55648: PUSH
55649: LD_INT 2
55651: ARRAY
55652: IN
55653: NOT
55654: AND
55655: PUSH
55656: LD_VAR 0 3
55660: PUSH
55661: LD_EXP 50
55665: PUSH
55666: LD_VAR 0 2
55670: ARRAY
55671: IN
55672: NOT
55673: AND
55674: IFFALSE 55711
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
55676: LD_VAR 0 2
55680: PPUSH
55681: LD_EXP 38
55685: PUSH
55686: LD_VAR 0 2
55690: ARRAY
55691: PPUSH
55692: LD_VAR 0 3
55696: PPUSH
55697: LD_VAR 0 3
55701: PPUSH
55702: CALL_OW 257
55706: PPUSH
55707: CALL 54483 0 4
// end ;
55711: GO 55560
55713: POP
55714: POP
// end ;
55715: GO 55495
55717: POP
55718: POP
// end ;
55719: LD_VAR 0 1
55723: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
55724: LD_INT 0
55726: PPUSH
55727: PPUSH
55728: PPUSH
55729: PPUSH
55730: PPUSH
55731: PPUSH
// if not mc_bases [ base ] then
55732: LD_EXP 38
55736: PUSH
55737: LD_VAR 0 1
55741: ARRAY
55742: NOT
55743: IFFALSE 55747
// exit ;
55745: GO 55929
// tmp := [ ] ;
55747: LD_ADDR_VAR 0 6
55751: PUSH
55752: EMPTY
55753: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
55754: LD_ADDR_VAR 0 7
55758: PUSH
55759: LD_VAR 0 3
55763: PPUSH
55764: LD_INT 0
55766: PPUSH
55767: CALL_OW 517
55771: ST_TO_ADDR
// if not list then
55772: LD_VAR 0 7
55776: NOT
55777: IFFALSE 55781
// exit ;
55779: GO 55929
// for i = 1 to amount do
55781: LD_ADDR_VAR 0 5
55785: PUSH
55786: DOUBLE
55787: LD_INT 1
55789: DEC
55790: ST_TO_ADDR
55791: LD_VAR 0 2
55795: PUSH
55796: FOR_TO
55797: IFFALSE 55877
// begin x := rand ( 1 , list [ 1 ] ) ;
55799: LD_ADDR_VAR 0 8
55803: PUSH
55804: LD_INT 1
55806: PPUSH
55807: LD_VAR 0 7
55811: PUSH
55812: LD_INT 1
55814: ARRAY
55815: PPUSH
55816: CALL_OW 12
55820: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
55821: LD_ADDR_VAR 0 6
55825: PUSH
55826: LD_VAR 0 6
55830: PPUSH
55831: LD_VAR 0 5
55835: PPUSH
55836: LD_VAR 0 7
55840: PUSH
55841: LD_INT 1
55843: ARRAY
55844: PUSH
55845: LD_VAR 0 8
55849: ARRAY
55850: PUSH
55851: LD_VAR 0 7
55855: PUSH
55856: LD_INT 2
55858: ARRAY
55859: PUSH
55860: LD_VAR 0 8
55864: ARRAY
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PPUSH
55870: CALL_OW 1
55874: ST_TO_ADDR
// end ;
55875: GO 55796
55877: POP
55878: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
55879: LD_ADDR_EXP 51
55883: PUSH
55884: LD_EXP 51
55888: PPUSH
55889: LD_VAR 0 1
55893: PPUSH
55894: LD_VAR 0 6
55898: PPUSH
55899: CALL_OW 1
55903: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
55904: LD_ADDR_EXP 53
55908: PUSH
55909: LD_EXP 53
55913: PPUSH
55914: LD_VAR 0 1
55918: PPUSH
55919: LD_VAR 0 3
55923: PPUSH
55924: CALL_OW 1
55928: ST_TO_ADDR
// end ;
55929: LD_VAR 0 4
55933: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
55934: LD_INT 0
55936: PPUSH
// if not mc_bases [ base ] then
55937: LD_EXP 38
55941: PUSH
55942: LD_VAR 0 1
55946: ARRAY
55947: NOT
55948: IFFALSE 55952
// exit ;
55950: GO 55977
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
55952: LD_ADDR_EXP 43
55956: PUSH
55957: LD_EXP 43
55961: PPUSH
55962: LD_VAR 0 1
55966: PPUSH
55967: LD_VAR 0 2
55971: PPUSH
55972: CALL_OW 1
55976: ST_TO_ADDR
// end ;
55977: LD_VAR 0 3
55981: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
55982: LD_INT 0
55984: PPUSH
// if not mc_bases [ base ] then
55985: LD_EXP 38
55989: PUSH
55990: LD_VAR 0 1
55994: ARRAY
55995: NOT
55996: IFFALSE 56000
// exit ;
55998: GO 56025
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
56000: LD_ADDR_EXP 59
56004: PUSH
56005: LD_EXP 59
56009: PPUSH
56010: LD_VAR 0 1
56014: PPUSH
56015: LD_VAR 0 2
56019: PPUSH
56020: CALL_OW 1
56024: ST_TO_ADDR
// end ;
56025: LD_VAR 0 3
56029: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
56030: LD_INT 0
56032: PPUSH
// if not mc_bases [ base ] then
56033: LD_EXP 38
56037: PUSH
56038: LD_VAR 0 1
56042: ARRAY
56043: NOT
56044: IFFALSE 56048
// exit ;
56046: GO 56088
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
56048: LD_ADDR_EXP 59
56052: PUSH
56053: LD_EXP 59
56057: PPUSH
56058: LD_VAR 0 1
56062: PPUSH
56063: LD_EXP 59
56067: PUSH
56068: LD_VAR 0 1
56072: ARRAY
56073: PUSH
56074: LD_VAR 0 2
56078: PUSH
56079: EMPTY
56080: LIST
56081: ADD
56082: PPUSH
56083: CALL_OW 1
56087: ST_TO_ADDR
// end ;
56088: LD_VAR 0 3
56092: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
56093: LD_INT 0
56095: PPUSH
// if not mc_bases [ base ] then
56096: LD_EXP 38
56100: PUSH
56101: LD_VAR 0 1
56105: ARRAY
56106: NOT
56107: IFFALSE 56111
// exit ;
56109: GO 56223
// mc_defender := Replace ( mc_defender , base , deflist ) ;
56111: LD_ADDR_EXP 60
56115: PUSH
56116: LD_EXP 60
56120: PPUSH
56121: LD_VAR 0 1
56125: PPUSH
56126: LD_VAR 0 2
56130: PPUSH
56131: CALL_OW 1
56135: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
56136: LD_ADDR_EXP 49
56140: PUSH
56141: LD_EXP 49
56145: PPUSH
56146: LD_VAR 0 1
56150: PPUSH
56151: LD_VAR 0 2
56155: PUSH
56156: LD_INT 0
56158: PLUS
56159: PPUSH
56160: CALL_OW 1
56164: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
56165: LD_ADDR_EXP 57
56169: PUSH
56170: LD_EXP 57
56174: PPUSH
56175: LD_VAR 0 1
56179: PPUSH
56180: LD_EXP 57
56184: PUSH
56185: LD_VAR 0 1
56189: ARRAY
56190: PUSH
56191: LD_EXP 60
56195: PUSH
56196: LD_VAR 0 1
56200: ARRAY
56201: PPUSH
56202: LD_INT 21
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PPUSH
56212: CALL_OW 72
56216: UNION
56217: PPUSH
56218: CALL_OW 1
56222: ST_TO_ADDR
// end ;
56223: LD_VAR 0 3
56227: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
56228: LD_INT 0
56230: PPUSH
56231: PPUSH
56232: PPUSH
56233: PPUSH
// if not mc_bases [ base ] then
56234: LD_EXP 38
56238: PUSH
56239: LD_VAR 0 1
56243: ARRAY
56244: NOT
56245: IFFALSE 56249
// exit ;
56247: GO 56314
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
56249: LD_ADDR_EXP 58
56253: PUSH
56254: LD_EXP 58
56258: PPUSH
56259: LD_VAR 0 1
56263: PUSH
56264: LD_EXP 58
56268: PUSH
56269: LD_VAR 0 1
56273: ARRAY
56274: PUSH
56275: LD_INT 1
56277: PLUS
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PPUSH
56283: LD_VAR 0 1
56287: PUSH
56288: LD_VAR 0 2
56292: PUSH
56293: LD_VAR 0 3
56297: PUSH
56298: LD_VAR 0 4
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: PPUSH
56309: CALL 11829 0 3
56313: ST_TO_ADDR
// end ;
56314: LD_VAR 0 5
56318: RET
// export function MC_GetMinesField ( base ) ; begin
56319: LD_INT 0
56321: PPUSH
// result := mc_mines [ base ] ;
56322: LD_ADDR_VAR 0 2
56326: PUSH
56327: LD_EXP 51
56331: PUSH
56332: LD_VAR 0 1
56336: ARRAY
56337: ST_TO_ADDR
// end ;
56338: LD_VAR 0 2
56342: RET
// export function MC_GetProduceList ( base ) ; begin
56343: LD_INT 0
56345: PPUSH
// result := mc_produce [ base ] ;
56346: LD_ADDR_VAR 0 2
56350: PUSH
56351: LD_EXP 59
56355: PUSH
56356: LD_VAR 0 1
56360: ARRAY
56361: ST_TO_ADDR
// end ;
56362: LD_VAR 0 2
56366: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
56367: LD_INT 0
56369: PPUSH
56370: PPUSH
// if not mc_bases then
56371: LD_EXP 38
56375: NOT
56376: IFFALSE 56380
// exit ;
56378: GO 56445
// if mc_bases [ base ] then
56380: LD_EXP 38
56384: PUSH
56385: LD_VAR 0 1
56389: ARRAY
56390: IFFALSE 56445
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
56392: LD_ADDR_VAR 0 3
56396: PUSH
56397: LD_EXP 38
56401: PUSH
56402: LD_VAR 0 1
56406: ARRAY
56407: PPUSH
56408: LD_INT 30
56410: PUSH
56411: LD_VAR 0 2
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PPUSH
56420: CALL_OW 72
56424: ST_TO_ADDR
// if result then
56425: LD_VAR 0 3
56429: IFFALSE 56445
// result := result [ 1 ] ;
56431: LD_ADDR_VAR 0 3
56435: PUSH
56436: LD_VAR 0 3
56440: PUSH
56441: LD_INT 1
56443: ARRAY
56444: ST_TO_ADDR
// end ; end ;
56445: LD_VAR 0 3
56449: RET
// export function MC_SetTame ( base , area ) ; begin
56450: LD_INT 0
56452: PPUSH
// if not mc_bases or not base then
56453: LD_EXP 38
56457: NOT
56458: PUSH
56459: LD_VAR 0 1
56463: NOT
56464: OR
56465: IFFALSE 56469
// exit ;
56467: GO 56494
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
56469: LD_ADDR_EXP 66
56473: PUSH
56474: LD_EXP 66
56478: PPUSH
56479: LD_VAR 0 1
56483: PPUSH
56484: LD_VAR 0 2
56488: PPUSH
56489: CALL_OW 1
56493: ST_TO_ADDR
// end ;
56494: LD_VAR 0 3
56498: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
56499: LD_INT 0
56501: PPUSH
56502: PPUSH
// if not mc_bases or not base or not kinds then
56503: LD_EXP 38
56507: NOT
56508: PUSH
56509: LD_VAR 0 1
56513: NOT
56514: OR
56515: PUSH
56516: LD_VAR 0 2
56520: NOT
56521: OR
56522: IFFALSE 56526
// exit ;
56524: GO 56587
// for i in kinds do
56526: LD_ADDR_VAR 0 4
56530: PUSH
56531: LD_VAR 0 2
56535: PUSH
56536: FOR_IN
56537: IFFALSE 56585
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
56539: LD_ADDR_EXP 72
56543: PUSH
56544: LD_EXP 72
56548: PPUSH
56549: LD_VAR 0 1
56553: PUSH
56554: LD_EXP 72
56558: PUSH
56559: LD_VAR 0 1
56563: ARRAY
56564: PUSH
56565: LD_INT 1
56567: PLUS
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PPUSH
56573: LD_VAR 0 4
56577: PPUSH
56578: CALL 11829 0 3
56582: ST_TO_ADDR
56583: GO 56536
56585: POP
56586: POP
// end ;
56587: LD_VAR 0 3
56591: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
56592: LD_INT 0
56594: PPUSH
// if not mc_bases or not base or not areas then
56595: LD_EXP 38
56599: NOT
56600: PUSH
56601: LD_VAR 0 1
56605: NOT
56606: OR
56607: PUSH
56608: LD_VAR 0 2
56612: NOT
56613: OR
56614: IFFALSE 56618
// exit ;
56616: GO 56643
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
56618: LD_ADDR_EXP 56
56622: PUSH
56623: LD_EXP 56
56627: PPUSH
56628: LD_VAR 0 1
56632: PPUSH
56633: LD_VAR 0 2
56637: PPUSH
56638: CALL_OW 1
56642: ST_TO_ADDR
// end ;
56643: LD_VAR 0 3
56647: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
56648: LD_INT 0
56650: PPUSH
// if not mc_bases or not base then
56651: LD_EXP 38
56655: NOT
56656: PUSH
56657: LD_VAR 0 1
56661: NOT
56662: OR
56663: IFFALSE 56667
// exit ;
56665: GO 56701
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
56667: LD_ADDR_EXP 73
56671: PUSH
56672: LD_EXP 73
56676: PPUSH
56677: LD_VAR 0 1
56681: PPUSH
56682: LD_VAR 0 2
56686: PUSH
56687: LD_VAR 0 3
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PPUSH
56696: CALL_OW 1
56700: ST_TO_ADDR
// end ; end_of_file
56701: LD_VAR 0 4
56705: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
56706: LD_INT 0
56708: PPUSH
56709: PPUSH
56710: PPUSH
// if not mc_bases then
56711: LD_EXP 38
56715: NOT
56716: IFFALSE 56720
// exit ;
56718: GO 56885
// for i = 1 to mc_bases do
56720: LD_ADDR_VAR 0 4
56724: PUSH
56725: DOUBLE
56726: LD_INT 1
56728: DEC
56729: ST_TO_ADDR
56730: LD_EXP 38
56734: PUSH
56735: FOR_TO
56736: IFFALSE 56883
// begin if sci in mc_bases [ i ] then
56738: LD_VAR 0 2
56742: PUSH
56743: LD_EXP 38
56747: PUSH
56748: LD_VAR 0 4
56752: ARRAY
56753: IN
56754: IFFALSE 56881
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
56756: LD_ADDR_EXP 67
56760: PUSH
56761: LD_EXP 67
56765: PPUSH
56766: LD_VAR 0 4
56770: PUSH
56771: LD_EXP 67
56775: PUSH
56776: LD_VAR 0 4
56780: ARRAY
56781: PUSH
56782: LD_INT 1
56784: PLUS
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PPUSH
56790: LD_VAR 0 1
56794: PPUSH
56795: CALL 11829 0 3
56799: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
56800: LD_ADDR_VAR 0 5
56804: PUSH
56805: LD_EXP 38
56809: PUSH
56810: LD_VAR 0 4
56814: ARRAY
56815: PPUSH
56816: LD_INT 2
56818: PUSH
56819: LD_INT 30
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 30
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: LIST
56843: PPUSH
56844: CALL_OW 72
56848: PPUSH
56849: LD_VAR 0 1
56853: PPUSH
56854: CALL_OW 74
56858: ST_TO_ADDR
// if tmp then
56859: LD_VAR 0 5
56863: IFFALSE 56879
// ComStandNearbyBuilding ( ape , tmp ) ;
56865: LD_VAR 0 1
56869: PPUSH
56870: LD_VAR 0 5
56874: PPUSH
56875: CALL 6608 0 2
// break ;
56879: GO 56883
// end ; end ;
56881: GO 56735
56883: POP
56884: POP
// end ;
56885: LD_VAR 0 3
56889: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
56890: LD_INT 0
56892: PPUSH
56893: PPUSH
56894: PPUSH
// if not mc_bases then
56895: LD_EXP 38
56899: NOT
56900: IFFALSE 56904
// exit ;
56902: GO 56993
// for i = 1 to mc_bases do
56904: LD_ADDR_VAR 0 4
56908: PUSH
56909: DOUBLE
56910: LD_INT 1
56912: DEC
56913: ST_TO_ADDR
56914: LD_EXP 38
56918: PUSH
56919: FOR_TO
56920: IFFALSE 56991
// begin if building in mc_busy_turret_list [ i ] then
56922: LD_VAR 0 1
56926: PUSH
56927: LD_EXP 48
56931: PUSH
56932: LD_VAR 0 4
56936: ARRAY
56937: IN
56938: IFFALSE 56989
// begin tmp := mc_busy_turret_list [ i ] diff building ;
56940: LD_ADDR_VAR 0 5
56944: PUSH
56945: LD_EXP 48
56949: PUSH
56950: LD_VAR 0 4
56954: ARRAY
56955: PUSH
56956: LD_VAR 0 1
56960: DIFF
56961: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
56962: LD_ADDR_EXP 48
56966: PUSH
56967: LD_EXP 48
56971: PPUSH
56972: LD_VAR 0 4
56976: PPUSH
56977: LD_VAR 0 5
56981: PPUSH
56982: CALL_OW 1
56986: ST_TO_ADDR
// break ;
56987: GO 56991
// end ; end ;
56989: GO 56919
56991: POP
56992: POP
// end ;
56993: LD_VAR 0 3
56997: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
56998: LD_INT 0
57000: PPUSH
57001: PPUSH
57002: PPUSH
// if not mc_bases then
57003: LD_EXP 38
57007: NOT
57008: IFFALSE 57012
// exit ;
57010: GO 57211
// for i = 1 to mc_bases do
57012: LD_ADDR_VAR 0 5
57016: PUSH
57017: DOUBLE
57018: LD_INT 1
57020: DEC
57021: ST_TO_ADDR
57022: LD_EXP 38
57026: PUSH
57027: FOR_TO
57028: IFFALSE 57209
// if building in mc_bases [ i ] then
57030: LD_VAR 0 1
57034: PUSH
57035: LD_EXP 38
57039: PUSH
57040: LD_VAR 0 5
57044: ARRAY
57045: IN
57046: IFFALSE 57207
// begin tmp := mc_bases [ i ] diff building ;
57048: LD_ADDR_VAR 0 6
57052: PUSH
57053: LD_EXP 38
57057: PUSH
57058: LD_VAR 0 5
57062: ARRAY
57063: PUSH
57064: LD_VAR 0 1
57068: DIFF
57069: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
57070: LD_ADDR_EXP 38
57074: PUSH
57075: LD_EXP 38
57079: PPUSH
57080: LD_VAR 0 5
57084: PPUSH
57085: LD_VAR 0 6
57089: PPUSH
57090: CALL_OW 1
57094: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
57095: LD_VAR 0 1
57099: PUSH
57100: LD_EXP 46
57104: PUSH
57105: LD_VAR 0 5
57109: ARRAY
57110: IN
57111: IFFALSE 57150
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
57113: LD_ADDR_EXP 46
57117: PUSH
57118: LD_EXP 46
57122: PPUSH
57123: LD_VAR 0 5
57127: PPUSH
57128: LD_EXP 46
57132: PUSH
57133: LD_VAR 0 5
57137: ARRAY
57138: PUSH
57139: LD_VAR 0 1
57143: DIFF
57144: PPUSH
57145: CALL_OW 1
57149: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
57150: LD_VAR 0 1
57154: PUSH
57155: LD_EXP 47
57159: PUSH
57160: LD_VAR 0 5
57164: ARRAY
57165: IN
57166: IFFALSE 57205
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
57168: LD_ADDR_EXP 47
57172: PUSH
57173: LD_EXP 47
57177: PPUSH
57178: LD_VAR 0 5
57182: PPUSH
57183: LD_EXP 47
57187: PUSH
57188: LD_VAR 0 5
57192: ARRAY
57193: PUSH
57194: LD_VAR 0 1
57198: DIFF
57199: PPUSH
57200: CALL_OW 1
57204: ST_TO_ADDR
// break ;
57205: GO 57209
// end ;
57207: GO 57027
57209: POP
57210: POP
// end ;
57211: LD_VAR 0 4
57215: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
57216: LD_INT 0
57218: PPUSH
57219: PPUSH
57220: PPUSH
// if not mc_bases or not side in mc_sides then
57221: LD_EXP 38
57225: NOT
57226: PUSH
57227: LD_VAR 0 3
57231: PUSH
57232: LD_EXP 64
57236: IN
57237: NOT
57238: OR
57239: IFFALSE 57243
// exit ;
57241: GO 57366
// for i = 1 to mc_vehicles do
57243: LD_ADDR_VAR 0 6
57247: PUSH
57248: DOUBLE
57249: LD_INT 1
57251: DEC
57252: ST_TO_ADDR
57253: LD_EXP 57
57257: PUSH
57258: FOR_TO
57259: IFFALSE 57364
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
57261: LD_VAR 0 2
57265: PUSH
57266: LD_EXP 57
57270: PUSH
57271: LD_VAR 0 6
57275: ARRAY
57276: IN
57277: PUSH
57278: LD_VAR 0 1
57282: PUSH
57283: LD_EXP 57
57287: PUSH
57288: LD_VAR 0 6
57292: ARRAY
57293: IN
57294: OR
57295: IFFALSE 57362
// begin tmp := mc_vehicles [ i ] diff old ;
57297: LD_ADDR_VAR 0 7
57301: PUSH
57302: LD_EXP 57
57306: PUSH
57307: LD_VAR 0 6
57311: ARRAY
57312: PUSH
57313: LD_VAR 0 2
57317: DIFF
57318: ST_TO_ADDR
// tmp := tmp diff new ;
57319: LD_ADDR_VAR 0 7
57323: PUSH
57324: LD_VAR 0 7
57328: PUSH
57329: LD_VAR 0 1
57333: DIFF
57334: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
57335: LD_ADDR_EXP 57
57339: PUSH
57340: LD_EXP 57
57344: PPUSH
57345: LD_VAR 0 6
57349: PPUSH
57350: LD_VAR 0 7
57354: PPUSH
57355: CALL_OW 1
57359: ST_TO_ADDR
// break ;
57360: GO 57364
// end ;
57362: GO 57258
57364: POP
57365: POP
// end ;
57366: LD_VAR 0 5
57370: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
57371: LD_INT 0
57373: PPUSH
57374: PPUSH
57375: PPUSH
57376: PPUSH
// if not mc_bases then
57377: LD_EXP 38
57381: NOT
57382: IFFALSE 57386
// exit ;
57384: GO 57678
// side := GetSide ( vehicle ) ;
57386: LD_ADDR_VAR 0 5
57390: PUSH
57391: LD_VAR 0 1
57395: PPUSH
57396: CALL_OW 255
57400: ST_TO_ADDR
// for i = 1 to mc_bases do
57401: LD_ADDR_VAR 0 4
57405: PUSH
57406: DOUBLE
57407: LD_INT 1
57409: DEC
57410: ST_TO_ADDR
57411: LD_EXP 38
57415: PUSH
57416: FOR_TO
57417: IFFALSE 57676
// begin if factory in mc_bases [ i ] then
57419: LD_VAR 0 2
57423: PUSH
57424: LD_EXP 38
57428: PUSH
57429: LD_VAR 0 4
57433: ARRAY
57434: IN
57435: IFFALSE 57674
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
57437: LD_EXP 60
57441: PUSH
57442: LD_VAR 0 4
57446: ARRAY
57447: PUSH
57448: LD_EXP 49
57452: PUSH
57453: LD_VAR 0 4
57457: ARRAY
57458: LESS
57459: IFFALSE 57630
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
57461: LD_ADDR_EXP 60
57465: PUSH
57466: LD_EXP 60
57470: PPUSH
57471: LD_VAR 0 4
57475: PPUSH
57476: LD_EXP 60
57480: PUSH
57481: LD_VAR 0 4
57485: ARRAY
57486: PUSH
57487: LD_VAR 0 1
57491: ADD
57492: PPUSH
57493: CALL_OW 1
57497: ST_TO_ADDR
// if not mc_scan [ i ] then
57498: LD_EXP 61
57502: PUSH
57503: LD_VAR 0 4
57507: ARRAY
57508: NOT
57509: IFFALSE 57628
// begin if GetControl ( vehicle ) = control_remote then
57511: LD_VAR 0 1
57515: PPUSH
57516: CALL_OW 263
57520: PUSH
57521: LD_INT 2
57523: EQUAL
57524: IFFALSE 57544
// repeat wait ( 0 0$1 ) ;
57526: LD_INT 35
57528: PPUSH
57529: CALL_OW 67
// until IsControledBy ( vehicle ) ;
57533: LD_VAR 0 1
57537: PPUSH
57538: CALL_OW 312
57542: IFFALSE 57526
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
57544: LD_VAR 0 1
57548: PPUSH
57549: LD_EXP 62
57553: PUSH
57554: LD_VAR 0 4
57558: ARRAY
57559: PPUSH
57560: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
57564: LD_VAR 0 1
57568: PPUSH
57569: CALL_OW 263
57573: PUSH
57574: LD_INT 1
57576: NONEQUAL
57577: IFFALSE 57581
// break ;
57579: GO 57676
// repeat wait ( 0 0$1 ) ;
57581: LD_INT 35
57583: PPUSH
57584: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
57588: LD_VAR 0 1
57592: PPUSH
57593: LD_EXP 62
57597: PUSH
57598: LD_VAR 0 4
57602: ARRAY
57603: PPUSH
57604: CALL_OW 308
57608: IFFALSE 57581
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
57610: LD_VAR 0 1
57614: PPUSH
57615: CALL_OW 311
57619: PPUSH
57620: CALL_OW 121
// exit ;
57624: POP
57625: POP
57626: GO 57678
// end ; end else
57628: GO 57674
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
57630: LD_ADDR_EXP 57
57634: PUSH
57635: LD_EXP 57
57639: PPUSH
57640: LD_VAR 0 4
57644: PUSH
57645: LD_EXP 57
57649: PUSH
57650: LD_VAR 0 4
57654: ARRAY
57655: PUSH
57656: LD_INT 1
57658: PLUS
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PPUSH
57664: LD_VAR 0 1
57668: PPUSH
57669: CALL 11829 0 3
57673: ST_TO_ADDR
// end ; end ;
57674: GO 57416
57676: POP
57677: POP
// end ;
57678: LD_VAR 0 3
57682: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
57683: LD_INT 0
57685: PPUSH
57686: PPUSH
57687: PPUSH
57688: PPUSH
// if not mc_bases then
57689: LD_EXP 38
57693: NOT
57694: IFFALSE 57698
// exit ;
57696: GO 58051
// repeat wait ( 0 0$1 ) ;
57698: LD_INT 35
57700: PPUSH
57701: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
57705: LD_VAR 0 2
57709: PPUSH
57710: LD_VAR 0 3
57714: PPUSH
57715: CALL_OW 284
57719: IFFALSE 57698
// if GetResourceTypeXY ( x , y ) = mat_artefact then
57721: LD_VAR 0 2
57725: PPUSH
57726: LD_VAR 0 3
57730: PPUSH
57731: CALL_OW 283
57735: PUSH
57736: LD_INT 4
57738: EQUAL
57739: IFFALSE 57743
// exit ;
57741: GO 58051
// for i = 1 to mc_bases do
57743: LD_ADDR_VAR 0 7
57747: PUSH
57748: DOUBLE
57749: LD_INT 1
57751: DEC
57752: ST_TO_ADDR
57753: LD_EXP 38
57757: PUSH
57758: FOR_TO
57759: IFFALSE 58049
// begin if mc_crates_area [ i ] then
57761: LD_EXP 56
57765: PUSH
57766: LD_VAR 0 7
57770: ARRAY
57771: IFFALSE 57882
// for j in mc_crates_area [ i ] do
57773: LD_ADDR_VAR 0 8
57777: PUSH
57778: LD_EXP 56
57782: PUSH
57783: LD_VAR 0 7
57787: ARRAY
57788: PUSH
57789: FOR_IN
57790: IFFALSE 57880
// if InArea ( x , y , j ) then
57792: LD_VAR 0 2
57796: PPUSH
57797: LD_VAR 0 3
57801: PPUSH
57802: LD_VAR 0 8
57806: PPUSH
57807: CALL_OW 309
57811: IFFALSE 57878
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
57813: LD_ADDR_EXP 54
57817: PUSH
57818: LD_EXP 54
57822: PPUSH
57823: LD_VAR 0 7
57827: PUSH
57828: LD_EXP 54
57832: PUSH
57833: LD_VAR 0 7
57837: ARRAY
57838: PUSH
57839: LD_INT 1
57841: PLUS
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PPUSH
57847: LD_VAR 0 4
57851: PUSH
57852: LD_VAR 0 2
57856: PUSH
57857: LD_VAR 0 3
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: LIST
57866: PPUSH
57867: CALL 11829 0 3
57871: ST_TO_ADDR
// exit ;
57872: POP
57873: POP
57874: POP
57875: POP
57876: GO 58051
// end ;
57878: GO 57789
57880: POP
57881: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
57882: LD_ADDR_VAR 0 9
57886: PUSH
57887: LD_EXP 38
57891: PUSH
57892: LD_VAR 0 7
57896: ARRAY
57897: PPUSH
57898: LD_INT 2
57900: PUSH
57901: LD_INT 30
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 30
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: LIST
57925: PPUSH
57926: CALL_OW 72
57930: ST_TO_ADDR
// if not depot then
57931: LD_VAR 0 9
57935: NOT
57936: IFFALSE 57940
// continue ;
57938: GO 57758
// for j in depot do
57940: LD_ADDR_VAR 0 8
57944: PUSH
57945: LD_VAR 0 9
57949: PUSH
57950: FOR_IN
57951: IFFALSE 58045
// if GetDistUnitXY ( j , x , y ) < 30 then
57953: LD_VAR 0 8
57957: PPUSH
57958: LD_VAR 0 2
57962: PPUSH
57963: LD_VAR 0 3
57967: PPUSH
57968: CALL_OW 297
57972: PUSH
57973: LD_INT 30
57975: LESS
57976: IFFALSE 58043
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
57978: LD_ADDR_EXP 54
57982: PUSH
57983: LD_EXP 54
57987: PPUSH
57988: LD_VAR 0 7
57992: PUSH
57993: LD_EXP 54
57997: PUSH
57998: LD_VAR 0 7
58002: ARRAY
58003: PUSH
58004: LD_INT 1
58006: PLUS
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PPUSH
58012: LD_VAR 0 4
58016: PUSH
58017: LD_VAR 0 2
58021: PUSH
58022: LD_VAR 0 3
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: LIST
58031: PPUSH
58032: CALL 11829 0 3
58036: ST_TO_ADDR
// exit ;
58037: POP
58038: POP
58039: POP
58040: POP
58041: GO 58051
// end ;
58043: GO 57950
58045: POP
58046: POP
// end ;
58047: GO 57758
58049: POP
58050: POP
// end ;
58051: LD_VAR 0 6
58055: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
58056: LD_INT 0
58058: PPUSH
58059: PPUSH
58060: PPUSH
58061: PPUSH
// side := GetSide ( lab ) ;
58062: LD_ADDR_VAR 0 4
58066: PUSH
58067: LD_VAR 0 2
58071: PPUSH
58072: CALL_OW 255
58076: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
58077: LD_VAR 0 4
58081: PUSH
58082: LD_EXP 64
58086: IN
58087: NOT
58088: PUSH
58089: LD_EXP 65
58093: NOT
58094: OR
58095: PUSH
58096: LD_EXP 38
58100: NOT
58101: OR
58102: IFFALSE 58106
// exit ;
58104: GO 58375
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
58106: LD_ADDR_EXP 65
58110: PUSH
58111: LD_EXP 65
58115: PPUSH
58116: LD_VAR 0 4
58120: PPUSH
58121: LD_EXP 65
58125: PUSH
58126: LD_VAR 0 4
58130: ARRAY
58131: PUSH
58132: LD_VAR 0 1
58136: DIFF
58137: PPUSH
58138: CALL_OW 1
58142: ST_TO_ADDR
// for i = 1 to mc_bases do
58143: LD_ADDR_VAR 0 5
58147: PUSH
58148: DOUBLE
58149: LD_INT 1
58151: DEC
58152: ST_TO_ADDR
58153: LD_EXP 38
58157: PUSH
58158: FOR_TO
58159: IFFALSE 58373
// begin if lab in mc_bases [ i ] then
58161: LD_VAR 0 2
58165: PUSH
58166: LD_EXP 38
58170: PUSH
58171: LD_VAR 0 5
58175: ARRAY
58176: IN
58177: IFFALSE 58371
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] and not mc_tech [ side ] [ 2 ] in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] then
58179: LD_VAR 0 1
58183: PUSH
58184: LD_INT 11
58186: PUSH
58187: LD_INT 4
58189: PUSH
58190: LD_INT 3
58192: PUSH
58193: LD_INT 2
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: IN
58202: PUSH
58203: LD_EXP 68
58207: PUSH
58208: LD_VAR 0 5
58212: ARRAY
58213: AND
58214: PUSH
58215: LD_EXP 65
58219: PUSH
58220: LD_VAR 0 4
58224: ARRAY
58225: PUSH
58226: LD_INT 2
58228: ARRAY
58229: PUSH
58230: LD_INT 11
58232: PUSH
58233: LD_INT 4
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: LD_INT 2
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: IN
58248: NOT
58249: AND
58250: IFFALSE 58371
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
58252: LD_ADDR_VAR 0 6
58256: PUSH
58257: LD_EXP 68
58261: PUSH
58262: LD_VAR 0 5
58266: ARRAY
58267: PUSH
58268: LD_INT 1
58270: ARRAY
58271: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
58272: LD_ADDR_EXP 68
58276: PUSH
58277: LD_EXP 68
58281: PPUSH
58282: LD_VAR 0 5
58286: PPUSH
58287: EMPTY
58288: PPUSH
58289: CALL_OW 1
58293: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
58294: LD_VAR 0 6
58298: PPUSH
58299: LD_INT 0
58301: PPUSH
58302: CALL_OW 109
// ComExitBuilding ( tmp ) ;
58306: LD_VAR 0 6
58310: PPUSH
58311: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
58315: LD_ADDR_EXP 67
58319: PUSH
58320: LD_EXP 67
58324: PPUSH
58325: LD_VAR 0 5
58329: PPUSH
58330: LD_EXP 67
58334: PUSH
58335: LD_VAR 0 5
58339: ARRAY
58340: PPUSH
58341: LD_INT 1
58343: PPUSH
58344: LD_VAR 0 6
58348: PPUSH
58349: CALL_OW 2
58353: PPUSH
58354: CALL_OW 1
58358: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
58359: LD_VAR 0 5
58363: PPUSH
58364: LD_INT 112
58366: PPUSH
58367: CALL 44271 0 2
// end ; end ; end ;
58371: GO 58158
58373: POP
58374: POP
// end ;
58375: LD_VAR 0 3
58379: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
58380: LD_INT 0
58382: PPUSH
58383: PPUSH
58384: PPUSH
58385: PPUSH
58386: PPUSH
58387: PPUSH
58388: PPUSH
58389: PPUSH
// if not mc_bases then
58390: LD_EXP 38
58394: NOT
58395: IFFALSE 58399
// exit ;
58397: GO 59324
// for i = 1 to mc_bases do
58399: LD_ADDR_VAR 0 3
58403: PUSH
58404: DOUBLE
58405: LD_INT 1
58407: DEC
58408: ST_TO_ADDR
58409: LD_EXP 38
58413: PUSH
58414: FOR_TO
58415: IFFALSE 59322
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
58417: LD_VAR 0 1
58421: PUSH
58422: LD_EXP 38
58426: PUSH
58427: LD_VAR 0 3
58431: ARRAY
58432: IN
58433: PUSH
58434: LD_VAR 0 1
58438: PUSH
58439: LD_EXP 45
58443: PUSH
58444: LD_VAR 0 3
58448: ARRAY
58449: IN
58450: OR
58451: PUSH
58452: LD_VAR 0 1
58456: PUSH
58457: LD_EXP 57
58461: PUSH
58462: LD_VAR 0 3
58466: ARRAY
58467: IN
58468: OR
58469: PUSH
58470: LD_VAR 0 1
58474: PUSH
58475: LD_EXP 67
58479: PUSH
58480: LD_VAR 0 3
58484: ARRAY
58485: IN
58486: OR
58487: PUSH
58488: LD_VAR 0 1
58492: PUSH
58493: LD_EXP 68
58497: PUSH
58498: LD_VAR 0 3
58502: ARRAY
58503: IN
58504: OR
58505: IFFALSE 59320
// begin if un in mc_ape [ i ] then
58507: LD_VAR 0 1
58511: PUSH
58512: LD_EXP 67
58516: PUSH
58517: LD_VAR 0 3
58521: ARRAY
58522: IN
58523: IFFALSE 58562
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
58525: LD_ADDR_EXP 67
58529: PUSH
58530: LD_EXP 67
58534: PPUSH
58535: LD_VAR 0 3
58539: PPUSH
58540: LD_EXP 67
58544: PUSH
58545: LD_VAR 0 3
58549: ARRAY
58550: PUSH
58551: LD_VAR 0 1
58555: DIFF
58556: PPUSH
58557: CALL_OW 1
58561: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
58562: LD_VAR 0 1
58566: PUSH
58567: LD_EXP 68
58571: PUSH
58572: LD_VAR 0 3
58576: ARRAY
58577: IN
58578: IFFALSE 58602
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
58580: LD_ADDR_EXP 68
58584: PUSH
58585: LD_EXP 68
58589: PPUSH
58590: LD_VAR 0 3
58594: PPUSH
58595: EMPTY
58596: PPUSH
58597: CALL_OW 1
58601: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
58602: LD_VAR 0 1
58606: PPUSH
58607: CALL_OW 247
58611: PUSH
58612: LD_INT 2
58614: EQUAL
58615: PUSH
58616: LD_VAR 0 1
58620: PPUSH
58621: CALL_OW 110
58625: PUSH
58626: LD_INT 20
58628: EQUAL
58629: AND
58630: IFFALSE 58733
// begin fac := MC_GetBuilding ( i , b_factory ) ;
58632: LD_ADDR_VAR 0 8
58636: PUSH
58637: LD_VAR 0 3
58641: PPUSH
58642: LD_INT 3
58644: PPUSH
58645: CALL 56367 0 2
58649: ST_TO_ADDR
// if fac then
58650: LD_VAR 0 8
58654: IFFALSE 58733
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
58656: LD_ADDR_VAR 0 9
58660: PUSH
58661: LD_VAR 0 8
58665: PPUSH
58666: LD_VAR 0 1
58670: PPUSH
58671: CALL_OW 265
58675: PPUSH
58676: LD_VAR 0 1
58680: PPUSH
58681: CALL_OW 262
58685: PPUSH
58686: LD_VAR 0 1
58690: PPUSH
58691: CALL_OW 263
58695: PPUSH
58696: LD_VAR 0 1
58700: PPUSH
58701: CALL_OW 264
58705: PPUSH
58706: CALL 8994 0 5
58710: ST_TO_ADDR
// if components then
58711: LD_VAR 0 9
58715: IFFALSE 58731
// MC_InsertProduceList ( i , components ) ;
58717: LD_VAR 0 3
58721: PPUSH
58722: LD_VAR 0 9
58726: PPUSH
58727: CALL 56030 0 2
// break ;
58731: GO 59322
// end ; end ; if GetType ( un ) = unit_building then
58733: LD_VAR 0 1
58737: PPUSH
58738: CALL_OW 247
58742: PUSH
58743: LD_INT 3
58745: EQUAL
58746: IFFALSE 59043
// begin btype := GetBType ( un ) ;
58748: LD_ADDR_VAR 0 5
58752: PUSH
58753: LD_VAR 0 1
58757: PPUSH
58758: CALL_OW 266
58762: ST_TO_ADDR
// if btype = b_warehouse then
58763: LD_VAR 0 5
58767: PUSH
58768: LD_INT 1
58770: EQUAL
58771: IFFALSE 58789
// begin btype := b_depot ;
58773: LD_ADDR_VAR 0 5
58777: PUSH
58778: LD_INT 0
58780: ST_TO_ADDR
// pos := 1 ;
58781: LD_ADDR_VAR 0 6
58785: PUSH
58786: LD_INT 1
58788: ST_TO_ADDR
// end ; if btype = b_factory then
58789: LD_VAR 0 5
58793: PUSH
58794: LD_INT 3
58796: EQUAL
58797: IFFALSE 58815
// begin btype := b_workshop ;
58799: LD_ADDR_VAR 0 5
58803: PUSH
58804: LD_INT 2
58806: ST_TO_ADDR
// pos := 1 ;
58807: LD_ADDR_VAR 0 6
58811: PUSH
58812: LD_INT 1
58814: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
58815: LD_VAR 0 5
58819: PUSH
58820: LD_INT 7
58822: PUSH
58823: LD_INT 8
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: IN
58830: IFFALSE 58840
// btype := b_lab ;
58832: LD_ADDR_VAR 0 5
58836: PUSH
58837: LD_INT 6
58839: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
58840: LD_ADDR_EXP 43
58844: PUSH
58845: LD_EXP 43
58849: PPUSH
58850: LD_VAR 0 3
58854: PUSH
58855: LD_EXP 43
58859: PUSH
58860: LD_VAR 0 3
58864: ARRAY
58865: PUSH
58866: LD_INT 1
58868: PLUS
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PPUSH
58874: LD_VAR 0 5
58878: PUSH
58879: LD_VAR 0 1
58883: PPUSH
58884: CALL_OW 250
58888: PUSH
58889: LD_VAR 0 1
58893: PPUSH
58894: CALL_OW 251
58898: PUSH
58899: LD_VAR 0 1
58903: PPUSH
58904: CALL_OW 254
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: PPUSH
58915: CALL 11829 0 3
58919: ST_TO_ADDR
// if pos = 1 then
58920: LD_VAR 0 6
58924: PUSH
58925: LD_INT 1
58927: EQUAL
58928: IFFALSE 59043
// begin tmp := mc_build_list [ i ] ;
58930: LD_ADDR_VAR 0 7
58934: PUSH
58935: LD_EXP 43
58939: PUSH
58940: LD_VAR 0 3
58944: ARRAY
58945: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
58946: LD_VAR 0 7
58950: PPUSH
58951: LD_INT 2
58953: PUSH
58954: LD_INT 30
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 30
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: LIST
58978: PPUSH
58979: CALL_OW 72
58983: IFFALSE 58993
// pos := 2 ;
58985: LD_ADDR_VAR 0 6
58989: PUSH
58990: LD_INT 2
58992: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
58993: LD_ADDR_VAR 0 7
58997: PUSH
58998: LD_VAR 0 7
59002: PPUSH
59003: LD_VAR 0 6
59007: PPUSH
59008: LD_VAR 0 7
59012: PPUSH
59013: CALL 11720 0 3
59017: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
59018: LD_ADDR_EXP 43
59022: PUSH
59023: LD_EXP 43
59027: PPUSH
59028: LD_VAR 0 3
59032: PPUSH
59033: LD_VAR 0 7
59037: PPUSH
59038: CALL_OW 1
59042: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
59043: LD_VAR 0 1
59047: PUSH
59048: LD_EXP 38
59052: PUSH
59053: LD_VAR 0 3
59057: ARRAY
59058: IN
59059: IFFALSE 59098
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
59061: LD_ADDR_EXP 38
59065: PUSH
59066: LD_EXP 38
59070: PPUSH
59071: LD_VAR 0 3
59075: PPUSH
59076: LD_EXP 38
59080: PUSH
59081: LD_VAR 0 3
59085: ARRAY
59086: PUSH
59087: LD_VAR 0 1
59091: DIFF
59092: PPUSH
59093: CALL_OW 1
59097: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
59098: LD_VAR 0 1
59102: PUSH
59103: LD_EXP 45
59107: PUSH
59108: LD_VAR 0 3
59112: ARRAY
59113: IN
59114: IFFALSE 59153
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
59116: LD_ADDR_EXP 45
59120: PUSH
59121: LD_EXP 45
59125: PPUSH
59126: LD_VAR 0 3
59130: PPUSH
59131: LD_EXP 45
59135: PUSH
59136: LD_VAR 0 3
59140: ARRAY
59141: PUSH
59142: LD_VAR 0 1
59146: DIFF
59147: PPUSH
59148: CALL_OW 1
59152: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
59153: LD_VAR 0 1
59157: PUSH
59158: LD_EXP 57
59162: PUSH
59163: LD_VAR 0 3
59167: ARRAY
59168: IN
59169: IFFALSE 59208
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
59171: LD_ADDR_EXP 57
59175: PUSH
59176: LD_EXP 57
59180: PPUSH
59181: LD_VAR 0 3
59185: PPUSH
59186: LD_EXP 57
59190: PUSH
59191: LD_VAR 0 3
59195: ARRAY
59196: PUSH
59197: LD_VAR 0 1
59201: DIFF
59202: PPUSH
59203: CALL_OW 1
59207: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
59208: LD_VAR 0 1
59212: PUSH
59213: LD_EXP 47
59217: PUSH
59218: LD_VAR 0 3
59222: ARRAY
59223: IN
59224: IFFALSE 59263
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
59226: LD_ADDR_EXP 47
59230: PUSH
59231: LD_EXP 47
59235: PPUSH
59236: LD_VAR 0 3
59240: PPUSH
59241: LD_EXP 47
59245: PUSH
59246: LD_VAR 0 3
59250: ARRAY
59251: PUSH
59252: LD_VAR 0 1
59256: DIFF
59257: PPUSH
59258: CALL_OW 1
59262: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
59263: LD_VAR 0 1
59267: PUSH
59268: LD_EXP 46
59272: PUSH
59273: LD_VAR 0 3
59277: ARRAY
59278: IN
59279: IFFALSE 59318
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
59281: LD_ADDR_EXP 46
59285: PUSH
59286: LD_EXP 46
59290: PPUSH
59291: LD_VAR 0 3
59295: PPUSH
59296: LD_EXP 46
59300: PUSH
59301: LD_VAR 0 3
59305: ARRAY
59306: PUSH
59307: LD_VAR 0 1
59311: DIFF
59312: PPUSH
59313: CALL_OW 1
59317: ST_TO_ADDR
// end ; break ;
59318: GO 59322
// end ;
59320: GO 58414
59322: POP
59323: POP
// end ;
59324: LD_VAR 0 2
59328: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
59329: LD_INT 0
59331: PPUSH
59332: PPUSH
59333: PPUSH
// if not mc_bases then
59334: LD_EXP 38
59338: NOT
59339: IFFALSE 59343
// exit ;
59341: GO 59558
// for i = 1 to mc_bases do
59343: LD_ADDR_VAR 0 3
59347: PUSH
59348: DOUBLE
59349: LD_INT 1
59351: DEC
59352: ST_TO_ADDR
59353: LD_EXP 38
59357: PUSH
59358: FOR_TO
59359: IFFALSE 59556
// begin if building in mc_construct_list [ i ] then
59361: LD_VAR 0 1
59365: PUSH
59366: LD_EXP 45
59370: PUSH
59371: LD_VAR 0 3
59375: ARRAY
59376: IN
59377: IFFALSE 59554
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
59379: LD_ADDR_EXP 45
59383: PUSH
59384: LD_EXP 45
59388: PPUSH
59389: LD_VAR 0 3
59393: PPUSH
59394: LD_EXP 45
59398: PUSH
59399: LD_VAR 0 3
59403: ARRAY
59404: PUSH
59405: LD_VAR 0 1
59409: DIFF
59410: PPUSH
59411: CALL_OW 1
59415: ST_TO_ADDR
// if building in mc_lab [ i ] then
59416: LD_VAR 0 1
59420: PUSH
59421: LD_EXP 71
59425: PUSH
59426: LD_VAR 0 3
59430: ARRAY
59431: IN
59432: IFFALSE 59487
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
59434: LD_ADDR_EXP 72
59438: PUSH
59439: LD_EXP 72
59443: PPUSH
59444: LD_VAR 0 3
59448: PPUSH
59449: LD_EXP 72
59453: PUSH
59454: LD_VAR 0 3
59458: ARRAY
59459: PPUSH
59460: LD_INT 1
59462: PPUSH
59463: LD_EXP 72
59467: PUSH
59468: LD_VAR 0 3
59472: ARRAY
59473: PPUSH
59474: LD_INT 0
59476: PPUSH
59477: CALL 10812 0 4
59481: PPUSH
59482: CALL_OW 1
59486: ST_TO_ADDR
// if not building in mc_bases [ i ] then
59487: LD_VAR 0 1
59491: PUSH
59492: LD_EXP 38
59496: PUSH
59497: LD_VAR 0 3
59501: ARRAY
59502: IN
59503: NOT
59504: IFFALSE 59550
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
59506: LD_ADDR_EXP 38
59510: PUSH
59511: LD_EXP 38
59515: PPUSH
59516: LD_VAR 0 3
59520: PUSH
59521: LD_EXP 38
59525: PUSH
59526: LD_VAR 0 3
59530: ARRAY
59531: PUSH
59532: LD_INT 1
59534: PLUS
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PPUSH
59540: LD_VAR 0 1
59544: PPUSH
59545: CALL 11829 0 3
59549: ST_TO_ADDR
// exit ;
59550: POP
59551: POP
59552: GO 59558
// end ; end ;
59554: GO 59358
59556: POP
59557: POP
// end ;
59558: LD_VAR 0 2
59562: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
59563: LD_INT 0
59565: PPUSH
59566: PPUSH
59567: PPUSH
59568: PPUSH
59569: PPUSH
59570: PPUSH
59571: PPUSH
// if not mc_bases then
59572: LD_EXP 38
59576: NOT
59577: IFFALSE 59581
// exit ;
59579: GO 60242
// for i = 1 to mc_bases do
59581: LD_ADDR_VAR 0 3
59585: PUSH
59586: DOUBLE
59587: LD_INT 1
59589: DEC
59590: ST_TO_ADDR
59591: LD_EXP 38
59595: PUSH
59596: FOR_TO
59597: IFFALSE 60240
// begin if building in mc_construct_list [ i ] then
59599: LD_VAR 0 1
59603: PUSH
59604: LD_EXP 45
59608: PUSH
59609: LD_VAR 0 3
59613: ARRAY
59614: IN
59615: IFFALSE 60238
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
59617: LD_ADDR_EXP 45
59621: PUSH
59622: LD_EXP 45
59626: PPUSH
59627: LD_VAR 0 3
59631: PPUSH
59632: LD_EXP 45
59636: PUSH
59637: LD_VAR 0 3
59641: ARRAY
59642: PUSH
59643: LD_VAR 0 1
59647: DIFF
59648: PPUSH
59649: CALL_OW 1
59653: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
59654: LD_ADDR_EXP 38
59658: PUSH
59659: LD_EXP 38
59663: PPUSH
59664: LD_VAR 0 3
59668: PUSH
59669: LD_EXP 38
59673: PUSH
59674: LD_VAR 0 3
59678: ARRAY
59679: PUSH
59680: LD_INT 1
59682: PLUS
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PPUSH
59688: LD_VAR 0 1
59692: PPUSH
59693: CALL 11829 0 3
59697: ST_TO_ADDR
// btype := GetBType ( building ) ;
59698: LD_ADDR_VAR 0 5
59702: PUSH
59703: LD_VAR 0 1
59707: PPUSH
59708: CALL_OW 266
59712: ST_TO_ADDR
// side := GetSide ( building ) ;
59713: LD_ADDR_VAR 0 8
59717: PUSH
59718: LD_VAR 0 1
59722: PPUSH
59723: CALL_OW 255
59727: ST_TO_ADDR
// if btype = b_lab then
59728: LD_VAR 0 5
59732: PUSH
59733: LD_INT 6
59735: EQUAL
59736: IFFALSE 59786
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
59738: LD_ADDR_EXP 71
59742: PUSH
59743: LD_EXP 71
59747: PPUSH
59748: LD_VAR 0 3
59752: PUSH
59753: LD_EXP 71
59757: PUSH
59758: LD_VAR 0 3
59762: ARRAY
59763: PUSH
59764: LD_INT 1
59766: PLUS
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PPUSH
59772: LD_VAR 0 1
59776: PPUSH
59777: CALL 11829 0 3
59781: ST_TO_ADDR
// exit ;
59782: POP
59783: POP
59784: GO 60242
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
59786: LD_VAR 0 5
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: LD_INT 4
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: LIST
59804: IN
59805: IFFALSE 59929
// begin if btype = b_armoury then
59807: LD_VAR 0 5
59811: PUSH
59812: LD_INT 4
59814: EQUAL
59815: IFFALSE 59825
// btype := b_barracks ;
59817: LD_ADDR_VAR 0 5
59821: PUSH
59822: LD_INT 5
59824: ST_TO_ADDR
// if btype = b_depot then
59825: LD_VAR 0 5
59829: PUSH
59830: LD_INT 0
59832: EQUAL
59833: IFFALSE 59843
// btype := b_warehouse ;
59835: LD_ADDR_VAR 0 5
59839: PUSH
59840: LD_INT 1
59842: ST_TO_ADDR
// if btype = b_workshop then
59843: LD_VAR 0 5
59847: PUSH
59848: LD_INT 2
59850: EQUAL
59851: IFFALSE 59861
// btype := b_factory ;
59853: LD_ADDR_VAR 0 5
59857: PUSH
59858: LD_INT 3
59860: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
59861: LD_VAR 0 5
59865: PPUSH
59866: LD_VAR 0 8
59870: PPUSH
59871: CALL_OW 323
59875: PUSH
59876: LD_INT 1
59878: EQUAL
59879: IFFALSE 59925
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
59881: LD_ADDR_EXP 70
59885: PUSH
59886: LD_EXP 70
59890: PPUSH
59891: LD_VAR 0 3
59895: PUSH
59896: LD_EXP 70
59900: PUSH
59901: LD_VAR 0 3
59905: ARRAY
59906: PUSH
59907: LD_INT 1
59909: PLUS
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PPUSH
59915: LD_VAR 0 1
59919: PPUSH
59920: CALL 11829 0 3
59924: ST_TO_ADDR
// exit ;
59925: POP
59926: POP
59927: GO 60242
// end ; if btype in [ b_bunker , b_turret ] then
59929: LD_VAR 0 5
59933: PUSH
59934: LD_INT 32
59936: PUSH
59937: LD_INT 33
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: IN
59944: IFFALSE 60234
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
59946: LD_ADDR_EXP 46
59950: PUSH
59951: LD_EXP 46
59955: PPUSH
59956: LD_VAR 0 3
59960: PUSH
59961: LD_EXP 46
59965: PUSH
59966: LD_VAR 0 3
59970: ARRAY
59971: PUSH
59972: LD_INT 1
59974: PLUS
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PPUSH
59980: LD_VAR 0 1
59984: PPUSH
59985: CALL 11829 0 3
59989: ST_TO_ADDR
// if btype = b_bunker then
59990: LD_VAR 0 5
59994: PUSH
59995: LD_INT 32
59997: EQUAL
59998: IFFALSE 60234
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
60000: LD_ADDR_EXP 47
60004: PUSH
60005: LD_EXP 47
60009: PPUSH
60010: LD_VAR 0 3
60014: PUSH
60015: LD_EXP 47
60019: PUSH
60020: LD_VAR 0 3
60024: ARRAY
60025: PUSH
60026: LD_INT 1
60028: PLUS
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PPUSH
60034: LD_VAR 0 1
60038: PPUSH
60039: CALL 11829 0 3
60043: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
60044: LD_ADDR_VAR 0 6
60048: PUSH
60049: LD_EXP 38
60053: PUSH
60054: LD_VAR 0 3
60058: ARRAY
60059: PPUSH
60060: LD_INT 25
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 3
60072: PUSH
60073: LD_INT 54
60075: PUSH
60076: EMPTY
60077: LIST
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PPUSH
60087: CALL_OW 72
60091: ST_TO_ADDR
// if tmp then
60092: LD_VAR 0 6
60096: IFFALSE 60102
// exit ;
60098: POP
60099: POP
60100: GO 60242
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
60102: LD_ADDR_VAR 0 6
60106: PUSH
60107: LD_EXP 38
60111: PUSH
60112: LD_VAR 0 3
60116: ARRAY
60117: PPUSH
60118: LD_INT 2
60120: PUSH
60121: LD_INT 30
60123: PUSH
60124: LD_INT 4
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 30
60133: PUSH
60134: LD_INT 5
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: LIST
60145: PPUSH
60146: CALL_OW 72
60150: ST_TO_ADDR
// if not tmp then
60151: LD_VAR 0 6
60155: NOT
60156: IFFALSE 60162
// exit ;
60158: POP
60159: POP
60160: GO 60242
// for j in tmp do
60162: LD_ADDR_VAR 0 4
60166: PUSH
60167: LD_VAR 0 6
60171: PUSH
60172: FOR_IN
60173: IFFALSE 60232
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
60175: LD_ADDR_VAR 0 7
60179: PUSH
60180: LD_VAR 0 4
60184: PPUSH
60185: CALL_OW 313
60189: PPUSH
60190: LD_INT 25
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PPUSH
60200: CALL_OW 72
60204: ST_TO_ADDR
// if units then
60205: LD_VAR 0 7
60209: IFFALSE 60230
// begin ComExitBuilding ( units [ 1 ] ) ;
60211: LD_VAR 0 7
60215: PUSH
60216: LD_INT 1
60218: ARRAY
60219: PPUSH
60220: CALL_OW 122
// exit ;
60224: POP
60225: POP
60226: POP
60227: POP
60228: GO 60242
// end ; end ;
60230: GO 60172
60232: POP
60233: POP
// end ; end ; exit ;
60234: POP
60235: POP
60236: GO 60242
// end ; end ;
60238: GO 59596
60240: POP
60241: POP
// end ;
60242: LD_VAR 0 2
60246: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
60247: LD_INT 0
60249: PPUSH
60250: PPUSH
60251: PPUSH
60252: PPUSH
60253: PPUSH
60254: PPUSH
60255: PPUSH
// if not mc_bases then
60256: LD_EXP 38
60260: NOT
60261: IFFALSE 60265
// exit ;
60263: GO 60496
// btype := GetBType ( building ) ;
60265: LD_ADDR_VAR 0 6
60269: PUSH
60270: LD_VAR 0 1
60274: PPUSH
60275: CALL_OW 266
60279: ST_TO_ADDR
// x := GetX ( building ) ;
60280: LD_ADDR_VAR 0 7
60284: PUSH
60285: LD_VAR 0 1
60289: PPUSH
60290: CALL_OW 250
60294: ST_TO_ADDR
// y := GetY ( building ) ;
60295: LD_ADDR_VAR 0 8
60299: PUSH
60300: LD_VAR 0 1
60304: PPUSH
60305: CALL_OW 251
60309: ST_TO_ADDR
// d := GetDir ( building ) ;
60310: LD_ADDR_VAR 0 9
60314: PUSH
60315: LD_VAR 0 1
60319: PPUSH
60320: CALL_OW 254
60324: ST_TO_ADDR
// for i = 1 to mc_bases do
60325: LD_ADDR_VAR 0 4
60329: PUSH
60330: DOUBLE
60331: LD_INT 1
60333: DEC
60334: ST_TO_ADDR
60335: LD_EXP 38
60339: PUSH
60340: FOR_TO
60341: IFFALSE 60494
// begin if not mc_build_list [ i ] then
60343: LD_EXP 43
60347: PUSH
60348: LD_VAR 0 4
60352: ARRAY
60353: NOT
60354: IFFALSE 60358
// continue ;
60356: GO 60340
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
60358: LD_VAR 0 6
60362: PUSH
60363: LD_VAR 0 7
60367: PUSH
60368: LD_VAR 0 8
60372: PUSH
60373: LD_VAR 0 9
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: PPUSH
60384: LD_EXP 43
60388: PUSH
60389: LD_VAR 0 4
60393: ARRAY
60394: PUSH
60395: LD_INT 1
60397: ARRAY
60398: PPUSH
60399: CALL 17427 0 2
60403: IFFALSE 60492
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
60405: LD_ADDR_EXP 43
60409: PUSH
60410: LD_EXP 43
60414: PPUSH
60415: LD_VAR 0 4
60419: PPUSH
60420: LD_EXP 43
60424: PUSH
60425: LD_VAR 0 4
60429: ARRAY
60430: PPUSH
60431: LD_INT 1
60433: PPUSH
60434: CALL_OW 3
60438: PPUSH
60439: CALL_OW 1
60443: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
60444: LD_ADDR_EXP 45
60448: PUSH
60449: LD_EXP 45
60453: PPUSH
60454: LD_VAR 0 4
60458: PUSH
60459: LD_EXP 45
60463: PUSH
60464: LD_VAR 0 4
60468: ARRAY
60469: PUSH
60470: LD_INT 1
60472: PLUS
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PPUSH
60478: LD_VAR 0 1
60482: PPUSH
60483: CALL 11829 0 3
60487: ST_TO_ADDR
// exit ;
60488: POP
60489: POP
60490: GO 60496
// end ; end ;
60492: GO 60340
60494: POP
60495: POP
// end ;
60496: LD_VAR 0 3
60500: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
60501: LD_INT 0
60503: PPUSH
60504: PPUSH
60505: PPUSH
// if not mc_bases then
60506: LD_EXP 38
60510: NOT
60511: IFFALSE 60515
// exit ;
60513: GO 60705
// for i = 1 to mc_bases do
60515: LD_ADDR_VAR 0 4
60519: PUSH
60520: DOUBLE
60521: LD_INT 1
60523: DEC
60524: ST_TO_ADDR
60525: LD_EXP 38
60529: PUSH
60530: FOR_TO
60531: IFFALSE 60618
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
60533: LD_VAR 0 1
60537: PUSH
60538: LD_EXP 46
60542: PUSH
60543: LD_VAR 0 4
60547: ARRAY
60548: IN
60549: PUSH
60550: LD_VAR 0 1
60554: PUSH
60555: LD_EXP 47
60559: PUSH
60560: LD_VAR 0 4
60564: ARRAY
60565: IN
60566: NOT
60567: AND
60568: IFFALSE 60616
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
60570: LD_ADDR_EXP 47
60574: PUSH
60575: LD_EXP 47
60579: PPUSH
60580: LD_VAR 0 4
60584: PUSH
60585: LD_EXP 47
60589: PUSH
60590: LD_VAR 0 4
60594: ARRAY
60595: PUSH
60596: LD_INT 1
60598: PLUS
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PPUSH
60604: LD_VAR 0 1
60608: PPUSH
60609: CALL 11829 0 3
60613: ST_TO_ADDR
// break ;
60614: GO 60618
// end ; end ;
60616: GO 60530
60618: POP
60619: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
60620: LD_VAR 0 1
60624: PPUSH
60625: CALL_OW 257
60629: PUSH
60630: LD_EXP 64
60634: IN
60635: PUSH
60636: LD_VAR 0 1
60640: PPUSH
60641: CALL_OW 266
60645: PUSH
60646: LD_INT 5
60648: EQUAL
60649: AND
60650: PUSH
60651: LD_VAR 0 2
60655: PPUSH
60656: CALL_OW 110
60660: PUSH
60661: LD_INT 18
60663: NONEQUAL
60664: AND
60665: IFFALSE 60705
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
60667: LD_VAR 0 2
60671: PPUSH
60672: CALL_OW 257
60676: PUSH
60677: LD_INT 5
60679: PUSH
60680: LD_INT 8
60682: PUSH
60683: LD_INT 9
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: LIST
60690: IN
60691: IFFALSE 60705
// SetClass ( unit , 1 ) ;
60693: LD_VAR 0 2
60697: PPUSH
60698: LD_INT 1
60700: PPUSH
60701: CALL_OW 336
// end ;
60705: LD_VAR 0 3
60709: RET
// export function MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
60710: LD_INT 0
60712: PPUSH
60713: PPUSH
// if not mc_bases then
60714: LD_EXP 38
60718: NOT
60719: IFFALSE 60723
// exit ;
60721: GO 60839
// if GetLives ( abandoned_vehicle ) > 250 then
60723: LD_VAR 0 2
60727: PPUSH
60728: CALL_OW 256
60732: PUSH
60733: LD_INT 250
60735: GREATER
60736: IFFALSE 60740
// exit ;
60738: GO 60839
// for i = 1 to mc_bases do
60740: LD_ADDR_VAR 0 6
60744: PUSH
60745: DOUBLE
60746: LD_INT 1
60748: DEC
60749: ST_TO_ADDR
60750: LD_EXP 38
60754: PUSH
60755: FOR_TO
60756: IFFALSE 60837
// begin if driver in mc_bases [ i ] then
60758: LD_VAR 0 1
60762: PUSH
60763: LD_EXP 38
60767: PUSH
60768: LD_VAR 0 6
60772: ARRAY
60773: IN
60774: IFFALSE 60835
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
60776: LD_VAR 0 1
60780: PPUSH
60781: LD_EXP 38
60785: PUSH
60786: LD_VAR 0 6
60790: ARRAY
60791: PPUSH
60792: LD_INT 2
60794: PUSH
60795: LD_INT 30
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 30
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: LIST
60819: PPUSH
60820: CALL_OW 72
60824: PUSH
60825: LD_INT 1
60827: ARRAY
60828: PPUSH
60829: CALL_OW 112
// break ;
60833: GO 60837
// end ; end ;
60835: GO 60755
60837: POP
60838: POP
// end ;
60839: LD_VAR 0 5
60843: RET
