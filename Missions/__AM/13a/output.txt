// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitVariables ;
   8: CALL 322 0 0
// InitMacro ;
  12: CALL 36889 0 0
// PrepareNature ( 4 , 3 , 11 , 6 , 3 , 1 , 0 , nature_area , 0 ) ;
  16: LD_INT 4
  18: PPUSH
  19: LD_INT 3
  21: PPUSH
  22: LD_INT 11
  24: PPUSH
  25: LD_INT 6
  27: PPUSH
  28: LD_INT 3
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: LD_INT 5
  39: PPUSH
  40: LD_INT 0
  42: PPUSH
  43: CALL 32764 0 9
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , area_base_russian , 0 ) ;
  47: LD_INT 0
  49: PPUSH
  50: LD_INT 0
  52: PPUSH
  53: LD_INT 4
  55: PPUSH
  56: LD_INT 0
  58: PPUSH
  59: LD_INT 0
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: LD_INT 0
  67: PPUSH
  68: LD_INT 4
  70: PPUSH
  71: LD_INT 0
  73: PPUSH
  74: CALL 32764 0 9
// PrepareRussian ;
  78: CALL 338 0 0
// Skirmish_Start ;
  82: CALL 37088 0 0
// if debug then
  86: LD_EXP 1
  90: IFFALSE 99
// FogOff ( 1 ) ;
  92: LD_INT 1
  94: PPUSH
  95: CALL_OW 344
// end ;
  99: END
// export function CustomInitMacro ; var i ; begin
 100: LD_INT 0
 102: PPUSH
 103: PPUSH
// mc_parking := [ parking_arabian , parking_russian ] ;
 104: LD_ADDR_EXP 28
 108: PUSH
 109: LD_INT 1
 111: PUSH
 112: LD_INT 2
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: ST_TO_ADDR
// mc_scan_area := [ area_base_arabian , area_base_russian ] ;
 119: LD_ADDR_EXP 29
 123: PUSH
 124: LD_INT 3
 126: PUSH
 127: LD_INT 4
 129: PUSH
 130: EMPTY
 131: LIST
 132: LIST
 133: ST_TO_ADDR
// MC_SetDefenderList ( 2 , russian_guard ) ;
 134: LD_INT 2
 136: PPUSH
 137: LD_EXP 3
 141: PPUSH
 142: CALL 48549 0 2
// MC_SetTame ( 2 , area_base_russian ) ;
 146: LD_INT 2
 148: PPUSH
 149: LD_INT 4
 151: PPUSH
 152: CALL 48906 0 2
// MC_SetBuildingList ( 2 , [ [ b_bunker , 83 , 111 , 4 ] , [ b_bunker , 87 , 121 , 4 ] , [ b_turret , 88 , 128 , 4 ] , [ b_bunker , 59 , 89 , 3 ] , [ b_turret , 69 , 98 , 3 ] , [ b_turret , 77 , 103 , 3 ] , [ b_turret , 83 , 105 , 3 ] , [ b_turret , 71 , 125 , 5 ] ] ) ;
 156: LD_INT 2
 158: PPUSH
 159: LD_INT 32
 161: PUSH
 162: LD_INT 83
 164: PUSH
 165: LD_INT 111
 167: PUSH
 168: LD_INT 4
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: LIST
 176: PUSH
 177: LD_INT 32
 179: PUSH
 180: LD_INT 87
 182: PUSH
 183: LD_INT 121
 185: PUSH
 186: LD_INT 4
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: PUSH
 195: LD_INT 33
 197: PUSH
 198: LD_INT 88
 200: PUSH
 201: LD_INT 128
 203: PUSH
 204: LD_INT 4
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 32
 215: PUSH
 216: LD_INT 59
 218: PUSH
 219: LD_INT 89
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 33
 233: PUSH
 234: LD_INT 69
 236: PUSH
 237: LD_INT 98
 239: PUSH
 240: LD_INT 3
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_INT 33
 251: PUSH
 252: LD_INT 77
 254: PUSH
 255: LD_INT 103
 257: PUSH
 258: LD_INT 3
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: PUSH
 267: LD_INT 33
 269: PUSH
 270: LD_INT 83
 272: PUSH
 273: LD_INT 105
 275: PUSH
 276: LD_INT 3
 278: PUSH
 279: EMPTY
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: PUSH
 285: LD_INT 33
 287: PUSH
 288: LD_INT 71
 290: PUSH
 291: LD_INT 125
 293: PUSH
 294: LD_INT 5
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: LIST
 312: PPUSH
 313: CALL 48390 0 2
// end ;
 317: LD_VAR 0 1
 321: RET
// export debug ; function InitVariables ; begin
 322: LD_INT 0
 324: PPUSH
// debug := true ;
 325: LD_ADDR_EXP 1
 329: PUSH
 330: LD_INT 1
 332: ST_TO_ADDR
// end ; end_of_file end_of_file
 333: LD_VAR 0 1
 337: RET
// export russian_force , russian_guard ; export function PrepareRussian ; var i , veh , tmp ; begin
 338: LD_INT 0
 340: PPUSH
 341: PPUSH
 342: PPUSH
 343: PPUSH
// uc_side := 3 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 3
 351: ST_TO_ADDR
// uc_nation := 3 ;
 352: LD_ADDR_OWVAR 21
 356: PUSH
 357: LD_INT 3
 359: ST_TO_ADDR
// russian_force := PrepareBase ( ru_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 5000 , 1000 , 300 ] , [ 9 , 5 , 6 , 6 ] ) ;
 360: LD_ADDR_EXP 2
 364: PUSH
 365: LD_INT 47
 367: PPUSH
 368: LD_STRING 
 370: PPUSH
 371: LD_INT 7
 373: PUSH
 374: LD_INT 8
 376: PUSH
 377: LD_INT 9
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: PUSH
 385: LD_OWVAR 67
 389: ARRAY
 390: PPUSH
 391: LD_INT 5000
 393: PUSH
 394: LD_INT 1000
 396: PUSH
 397: LD_INT 300
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: PPUSH
 405: LD_INT 9
 407: PUSH
 408: LD_INT 5
 410: PUSH
 411: LD_INT 6
 413: PUSH
 414: LD_INT 6
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL 9535 0 5
 427: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , russian_force ) ;
 428: LD_ADDR_EXP 5
 432: PUSH
 433: LD_EXP 5
 437: PPUSH
 438: LD_INT 2
 440: PPUSH
 441: LD_EXP 2
 445: PPUSH
 446: CALL_OW 1
 450: ST_TO_ADDR
// tmp := [ ] ;
 451: LD_ADDR_VAR 0 4
 455: PUSH
 456: EMPTY
 457: ST_TO_ADDR
// for i = 1 to 4 do
 458: LD_ADDR_VAR 0 2
 462: PUSH
 463: DOUBLE
 464: LD_INT 1
 466: DEC
 467: ST_TO_ADDR
 468: LD_INT 4
 470: PUSH
 471: FOR_TO
 472: IFFALSE 565
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun ] [ i mod 4 + 1 ] , 100 ) ;
 474: LD_INT 22
 476: PPUSH
 477: LD_INT 3
 479: PPUSH
 480: LD_INT 3
 482: PPUSH
 483: LD_INT 43
 485: PUSH
 486: LD_INT 45
 488: PUSH
 489: LD_INT 45
 491: PUSH
 492: LD_INT 44
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: PUSH
 501: LD_VAR 0 2
 505: PUSH
 506: LD_INT 4
 508: MOD
 509: PUSH
 510: LD_INT 1
 512: PLUS
 513: ARRAY
 514: PPUSH
 515: LD_INT 100
 517: PPUSH
 518: CALL 6136 0 5
// veh := CreateVehicle ;
 522: LD_ADDR_VAR 0 3
 526: PUSH
 527: CALL_OW 45
 531: ST_TO_ADDR
// tmp := tmp ^ veh ;
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: LD_VAR 0 4
 541: PUSH
 542: LD_VAR 0 3
 546: ADD
 547: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_russian , false ) ;
 548: LD_VAR 0 3
 552: PPUSH
 553: LD_INT 2
 555: PPUSH
 556: LD_INT 0
 558: PPUSH
 559: CALL_OW 49
// end ;
 563: GO 471
 565: POP
 566: POP
// russian_guard := tmp ;
 567: LD_ADDR_EXP 3
 571: PUSH
 572: LD_VAR 0 4
 576: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
 577: LD_VAR 0 1
 581: RET
// on UnitDestroyed ( un ) do var i , side ;
 582: LD_INT 0
 584: PPUSH
 585: PPUSH
// begin side := GetSide ( un ) ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 1
 595: PPUSH
 596: CALL_OW 255
 600: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
 601: LD_VAR 0 1
 605: PPUSH
 606: CALL 50490 0 1
// end ;
 610: PPOPN 3
 612: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
 613: LD_VAR 0 1
 617: PPUSH
 618: LD_VAR 0 2
 622: PPUSH
 623: CALL 51906 0 2
// end ;
 627: PPOPN 2
 629: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
 630: LD_VAR 0 1
 634: PPUSH
 635: CALL 51439 0 1
// end ;
 639: PPOPN 1
 641: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
 642: LD_VAR 0 1
 646: PPUSH
 647: LD_VAR 0 2
 651: PPUSH
 652: CALL 50166 0 2
// end ;
 656: PPOPN 2
 658: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
 659: LD_VAR 0 1
 663: PPUSH
 664: LD_VAR 0 2
 668: PPUSH
 669: LD_VAR 0 3
 673: PPUSH
 674: LD_VAR 0 4
 678: PPUSH
 679: LD_VAR 0 5
 683: PPUSH
 684: CALL 49932 0 5
// end ;
 688: PPOPN 5
 690: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
 691: LD_VAR 0 1
 695: PPUSH
 696: LD_VAR 0 2
 700: PPUSH
 701: CALL 49620 0 2
// end ;
 705: PPOPN 2
 707: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
 708: LD_VAR 0 1
 712: PPUSH
 713: LD_VAR 0 2
 717: PPUSH
 718: LD_VAR 0 3
 722: PPUSH
 723: LD_VAR 0 4
 727: PPUSH
 728: CALL 49465 0 4
// end ;
 732: PPOPN 4
 734: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
 735: LD_VAR 0 1
 739: PPUSH
 740: LD_VAR 0 2
 744: PPUSH
 745: LD_VAR 0 3
 749: PPUSH
 750: CALL 49247 0 3
// end ;
 754: PPOPN 3
 756: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
 757: LD_VAR 0 1
 761: PPUSH
 762: LD_VAR 0 2
 766: PPUSH
 767: CALL 49139 0 2
// end ;
 771: PPOPN 2
 773: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
 774: LD_VAR 0 1
 778: PPUSH
 779: LD_VAR 0 2
 783: PPUSH
 784: CALL 52160 0 2
// end ;
 788: PPOPN 2
 790: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
 791: LD_VAR 0 1
 795: PPUSH
 796: LD_VAR 0 2
 800: PPUSH
 801: LD_VAR 0 3
 805: PPUSH
 806: LD_VAR 0 4
 810: PPUSH
 811: CALL 52369 0 4
// end ;
 815: PPOPN 4
 817: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
 818: LD_VAR 0 1
 822: PPUSH
 823: LD_VAR 0 2
 827: PPUSH
 828: CALL 48955 0 2
// end ; end_of_file
 832: PPOPN 2
 834: END
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 835: LD_INT 0
 837: PPUSH
 838: PPUSH
// if not side or not nation then
 839: LD_VAR 0 1
 843: NOT
 844: PUSH
 845: LD_VAR 0 2
 849: NOT
 850: OR
 851: IFFALSE 855
// exit ;
 853: GO 1467
// case nation of nation_american :
 855: LD_VAR 0 2
 859: PUSH
 860: LD_INT 1
 862: DOUBLE
 863: EQUAL
 864: IFTRUE 868
 866: GO 1026
 868: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
 869: LD_ADDR_VAR 0 4
 873: PUSH
 874: LD_INT 35
 876: PUSH
 877: LD_INT 45
 879: PUSH
 880: LD_INT 46
 882: PUSH
 883: LD_INT 47
 885: PUSH
 886: LD_INT 1
 888: PUSH
 889: LD_INT 2
 891: PUSH
 892: LD_INT 6
 894: PUSH
 895: LD_INT 15
 897: PUSH
 898: LD_INT 16
 900: PUSH
 901: LD_INT 7
 903: PUSH
 904: LD_INT 12
 906: PUSH
 907: LD_INT 13
 909: PUSH
 910: LD_INT 10
 912: PUSH
 913: LD_INT 14
 915: PUSH
 916: LD_INT 20
 918: PUSH
 919: LD_INT 25
 921: PUSH
 922: LD_INT 36
 924: PUSH
 925: LD_INT 69
 927: PUSH
 928: LD_INT 39
 930: PUSH
 931: LD_INT 34
 933: PUSH
 934: LD_INT 40
 936: PUSH
 937: LD_INT 48
 939: PUSH
 940: LD_INT 49
 942: PUSH
 943: LD_INT 50
 945: PUSH
 946: LD_INT 51
 948: PUSH
 949: LD_INT 52
 951: PUSH
 952: LD_INT 53
 954: PUSH
 955: LD_INT 54
 957: PUSH
 958: LD_INT 55
 960: PUSH
 961: LD_INT 56
 963: PUSH
 964: LD_INT 57
 966: PUSH
 967: LD_INT 58
 969: PUSH
 970: LD_INT 59
 972: PUSH
 973: LD_INT 60
 975: PUSH
 976: LD_INT 61
 978: PUSH
 979: LD_INT 62
 981: PUSH
 982: LD_INT 80
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: ST_TO_ADDR
1024: GO 1391
1026: LD_INT 2
1028: DOUBLE
1029: EQUAL
1030: IFTRUE 1034
1032: GO 1204
1034: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
1035: LD_ADDR_VAR 0 4
1039: PUSH
1040: LD_INT 35
1042: PUSH
1043: LD_INT 45
1045: PUSH
1046: LD_INT 46
1048: PUSH
1049: LD_INT 47
1051: PUSH
1052: LD_INT 70
1054: PUSH
1055: LD_INT 1
1057: PUSH
1058: LD_INT 11
1060: PUSH
1061: LD_INT 3
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: LD_INT 5
1069: PUSH
1070: LD_INT 6
1072: PUSH
1073: LD_INT 15
1075: PUSH
1076: LD_INT 18
1078: PUSH
1079: LD_INT 7
1081: PUSH
1082: LD_INT 17
1084: PUSH
1085: LD_INT 8
1087: PUSH
1088: LD_INT 20
1090: PUSH
1091: LD_INT 72
1093: PUSH
1094: LD_INT 26
1096: PUSH
1097: LD_INT 69
1099: PUSH
1100: LD_INT 39
1102: PUSH
1103: LD_INT 40
1105: PUSH
1106: LD_INT 41
1108: PUSH
1109: LD_INT 42
1111: PUSH
1112: LD_INT 43
1114: PUSH
1115: LD_INT 48
1117: PUSH
1118: LD_INT 49
1120: PUSH
1121: LD_INT 50
1123: PUSH
1124: LD_INT 51
1126: PUSH
1127: LD_INT 52
1129: PUSH
1130: LD_INT 53
1132: PUSH
1133: LD_INT 54
1135: PUSH
1136: LD_INT 55
1138: PUSH
1139: LD_INT 56
1141: PUSH
1142: LD_INT 60
1144: PUSH
1145: LD_INT 61
1147: PUSH
1148: LD_INT 62
1150: PUSH
1151: LD_INT 66
1153: PUSH
1154: LD_INT 67
1156: PUSH
1157: LD_INT 68
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: ST_TO_ADDR
1202: GO 1391
1204: LD_INT 3
1206: DOUBLE
1207: EQUAL
1208: IFTRUE 1212
1210: GO 1390
1212: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
1213: LD_ADDR_VAR 0 4
1217: PUSH
1218: LD_INT 46
1220: PUSH
1221: LD_INT 47
1223: PUSH
1224: LD_INT 1
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: LD_INT 11
1232: PUSH
1233: LD_INT 9
1235: PUSH
1236: LD_INT 20
1238: PUSH
1239: LD_INT 19
1241: PUSH
1242: LD_INT 21
1244: PUSH
1245: LD_INT 24
1247: PUSH
1248: LD_INT 22
1250: PUSH
1251: LD_INT 25
1253: PUSH
1254: LD_INT 28
1256: PUSH
1257: LD_INT 29
1259: PUSH
1260: LD_INT 31
1262: PUSH
1263: LD_INT 37
1265: PUSH
1266: LD_INT 38
1268: PUSH
1269: LD_INT 32
1271: PUSH
1272: LD_INT 27
1274: PUSH
1275: LD_INT 33
1277: PUSH
1278: LD_INT 69
1280: PUSH
1281: LD_INT 39
1283: PUSH
1284: LD_INT 34
1286: PUSH
1287: LD_INT 40
1289: PUSH
1290: LD_INT 71
1292: PUSH
1293: LD_INT 23
1295: PUSH
1296: LD_INT 44
1298: PUSH
1299: LD_INT 48
1301: PUSH
1302: LD_INT 49
1304: PUSH
1305: LD_INT 50
1307: PUSH
1308: LD_INT 51
1310: PUSH
1311: LD_INT 52
1313: PUSH
1314: LD_INT 53
1316: PUSH
1317: LD_INT 54
1319: PUSH
1320: LD_INT 55
1322: PUSH
1323: LD_INT 56
1325: PUSH
1326: LD_INT 57
1328: PUSH
1329: LD_INT 58
1331: PUSH
1332: LD_INT 59
1334: PUSH
1335: LD_INT 63
1337: PUSH
1338: LD_INT 64
1340: PUSH
1341: LD_INT 65
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: ST_TO_ADDR
1388: GO 1391
1390: POP
// if state > - 1 and state < 3 then
1391: LD_VAR 0 3
1395: PUSH
1396: LD_INT 1
1398: NEG
1399: GREATER
1400: PUSH
1401: LD_VAR 0 3
1405: PUSH
1406: LD_INT 3
1408: LESS
1409: AND
1410: IFFALSE 1467
// for i in result do
1412: LD_ADDR_VAR 0 5
1416: PUSH
1417: LD_VAR 0 4
1421: PUSH
1422: FOR_IN
1423: IFFALSE 1465
// if GetTech ( i , side ) <> state then
1425: LD_VAR 0 5
1429: PPUSH
1430: LD_VAR 0 1
1434: PPUSH
1435: CALL_OW 321
1439: PUSH
1440: LD_VAR 0 3
1444: NONEQUAL
1445: IFFALSE 1463
// result := result diff i ;
1447: LD_ADDR_VAR 0 4
1451: PUSH
1452: LD_VAR 0 4
1456: PUSH
1457: LD_VAR 0 5
1461: DIFF
1462: ST_TO_ADDR
1463: GO 1422
1465: POP
1466: POP
// end ;
1467: LD_VAR 0 4
1471: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1472: LD_INT 0
1474: PPUSH
1475: PPUSH
1476: PPUSH
1477: PPUSH
1478: PPUSH
1479: PPUSH
// if not unit or not building then
1480: LD_VAR 0 1
1484: NOT
1485: PUSH
1486: LD_VAR 0 2
1490: NOT
1491: OR
1492: IFFALSE 1496
// exit ;
1494: GO 1651
// x := GetX ( building ) ;
1496: LD_ADDR_VAR 0 5
1500: PUSH
1501: LD_VAR 0 2
1505: PPUSH
1506: CALL_OW 250
1510: ST_TO_ADDR
// y := GetY ( building ) ;
1511: LD_ADDR_VAR 0 6
1515: PUSH
1516: LD_VAR 0 2
1520: PPUSH
1521: CALL_OW 251
1525: ST_TO_ADDR
// for i = 0 to 5 do
1526: LD_ADDR_VAR 0 4
1530: PUSH
1531: DOUBLE
1532: LD_INT 0
1534: DEC
1535: ST_TO_ADDR
1536: LD_INT 5
1538: PUSH
1539: FOR_TO
1540: IFFALSE 1649
// begin _x := ShiftX ( x , i , 3 ) ;
1542: LD_ADDR_VAR 0 7
1546: PUSH
1547: LD_VAR 0 5
1551: PPUSH
1552: LD_VAR 0 4
1556: PPUSH
1557: LD_INT 3
1559: PPUSH
1560: CALL_OW 272
1564: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
1565: LD_ADDR_VAR 0 8
1569: PUSH
1570: LD_VAR 0 6
1574: PPUSH
1575: LD_VAR 0 4
1579: PPUSH
1580: LD_INT 3
1582: PPUSH
1583: CALL_OW 273
1587: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
1588: LD_VAR 0 7
1592: PPUSH
1593: LD_VAR 0 8
1597: PPUSH
1598: CALL_OW 428
1602: PUSH
1603: LD_INT 0
1605: EQUAL
1606: PUSH
1607: LD_VAR 0 7
1611: PPUSH
1612: LD_VAR 0 8
1616: PPUSH
1617: CALL_OW 488
1621: AND
1622: IFFALSE 1647
// begin ComMoveXY ( unit , _x , _y ) ;
1624: LD_VAR 0 1
1628: PPUSH
1629: LD_VAR 0 7
1633: PPUSH
1634: LD_VAR 0 8
1638: PPUSH
1639: CALL_OW 111
// exit ;
1643: POP
1644: POP
1645: GO 1651
// end ; end ;
1647: GO 1539
1649: POP
1650: POP
// end ;
1651: LD_VAR 0 3
1655: RET
// export function ScanBase ( side , base_area ) ; begin
1656: LD_INT 0
1658: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
1659: LD_ADDR_VAR 0 3
1663: PUSH
1664: LD_VAR 0 2
1668: PPUSH
1669: LD_INT 81
1671: PUSH
1672: LD_VAR 0 1
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PPUSH
1681: CALL_OW 70
1685: ST_TO_ADDR
// end ;
1686: LD_VAR 0 3
1690: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
1691: LD_INT 0
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
1698: PPUSH
1699: PPUSH
1700: PPUSH
1701: PPUSH
1702: PPUSH
1703: PPUSH
1704: PPUSH
1705: PPUSH
1706: PPUSH
1707: PPUSH
1708: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
1709: LD_ADDR_VAR 0 12
1713: PUSH
1714: LD_EXP 5
1718: PUSH
1719: LD_VAR 0 1
1723: ARRAY
1724: PPUSH
1725: LD_INT 25
1727: PUSH
1728: LD_INT 3
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: PPUSH
1735: CALL_OW 72
1739: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
1740: LD_ADDR_VAR 0 8
1744: PUSH
1745: LD_EXP 5
1749: PUSH
1750: LD_VAR 0 1
1754: ARRAY
1755: PPUSH
1756: LD_INT 2
1758: PUSH
1759: LD_INT 25
1761: PUSH
1762: LD_INT 1
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: LD_INT 25
1771: PUSH
1772: LD_INT 5
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: LD_INT 25
1781: PUSH
1782: LD_INT 8
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: LD_INT 25
1791: PUSH
1792: LD_INT 9
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: PPUSH
1806: CALL_OW 72
1810: ST_TO_ADDR
// if not defenders and not solds then
1811: LD_VAR 0 2
1815: NOT
1816: PUSH
1817: LD_VAR 0 8
1821: NOT
1822: AND
1823: IFFALSE 1827
// exit ;
1825: GO 3193
// depot_under_attack := false ;
1827: LD_ADDR_VAR 0 16
1831: PUSH
1832: LD_INT 0
1834: ST_TO_ADDR
// sold_defenders := [ ] ;
1835: LD_ADDR_VAR 0 17
1839: PUSH
1840: EMPTY
1841: ST_TO_ADDR
// if mechs then
1842: LD_VAR 0 12
1846: IFFALSE 1975
// for i in defenders do
1848: LD_ADDR_VAR 0 5
1852: PUSH
1853: LD_VAR 0 2
1857: PUSH
1858: FOR_IN
1859: IFFALSE 1973
// begin SetTag ( i , 20 ) ;
1861: LD_VAR 0 5
1865: PPUSH
1866: LD_INT 20
1868: PPUSH
1869: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
1873: LD_VAR 0 5
1877: PPUSH
1878: CALL_OW 263
1882: PUSH
1883: LD_INT 1
1885: EQUAL
1886: PUSH
1887: LD_VAR 0 5
1891: PPUSH
1892: CALL_OW 311
1896: NOT
1897: AND
1898: PUSH
1899: LD_VAR 0 12
1903: AND
1904: IFFALSE 1971
// begin un := mechs [ 1 ] ;
1906: LD_ADDR_VAR 0 10
1910: PUSH
1911: LD_VAR 0 12
1915: PUSH
1916: LD_INT 1
1918: ARRAY
1919: ST_TO_ADDR
// ComExitBuilding ( un ) ;
1920: LD_VAR 0 10
1924: PPUSH
1925: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
1929: LD_VAR 0 10
1933: PPUSH
1934: LD_VAR 0 5
1938: PPUSH
1939: CALL_OW 180
// SetTag ( un , 19 ) ;
1943: LD_VAR 0 10
1947: PPUSH
1948: LD_INT 19
1950: PPUSH
1951: CALL_OW 109
// mechs := mechs diff un ;
1955: LD_ADDR_VAR 0 12
1959: PUSH
1960: LD_VAR 0 12
1964: PUSH
1965: LD_VAR 0 10
1969: DIFF
1970: ST_TO_ADDR
// end ; end ;
1971: GO 1858
1973: POP
1974: POP
// if solds then
1975: LD_VAR 0 8
1979: IFFALSE 2038
// for i in solds do
1981: LD_ADDR_VAR 0 5
1985: PUSH
1986: LD_VAR 0 8
1990: PUSH
1991: FOR_IN
1992: IFFALSE 2036
// if not GetTag ( i ) then
1994: LD_VAR 0 5
1998: PPUSH
1999: CALL_OW 110
2003: NOT
2004: IFFALSE 2034
// begin defenders := defenders union i ;
2006: LD_ADDR_VAR 0 2
2010: PUSH
2011: LD_VAR 0 2
2015: PUSH
2016: LD_VAR 0 5
2020: UNION
2021: ST_TO_ADDR
// SetTag ( i , 18 ) ;
2022: LD_VAR 0 5
2026: PPUSH
2027: LD_INT 18
2029: PPUSH
2030: CALL_OW 109
// end ;
2034: GO 1991
2036: POP
2037: POP
// repeat wait ( 0 0$1 ) ;
2038: LD_INT 35
2040: PPUSH
2041: CALL_OW 67
// enemy := mc_scan [ base ] ;
2045: LD_ADDR_VAR 0 3
2049: PUSH
2050: LD_EXP 27
2054: PUSH
2055: LD_VAR 0 1
2059: ARRAY
2060: ST_TO_ADDR
// for i in defenders do
2061: LD_ADDR_VAR 0 5
2065: PUSH
2066: LD_VAR 0 2
2070: PUSH
2071: FOR_IN
2072: IFFALSE 2757
// begin e := NearestUnitToUnit ( enemy , i ) ;
2074: LD_ADDR_VAR 0 13
2078: PUSH
2079: LD_VAR 0 3
2083: PPUSH
2084: LD_VAR 0 5
2088: PPUSH
2089: CALL_OW 74
2093: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
2094: LD_ADDR_VAR 0 16
2098: PUSH
2099: LD_EXP 5
2103: PUSH
2104: LD_VAR 0 1
2108: ARRAY
2109: PPUSH
2110: LD_INT 2
2112: PUSH
2113: LD_INT 30
2115: PUSH
2116: LD_INT 0
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: LD_INT 30
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 72
2142: NOT
2143: PUSH
2144: LD_EXP 5
2148: PUSH
2149: LD_VAR 0 1
2153: ARRAY
2154: PPUSH
2155: LD_INT 2
2157: PUSH
2158: LD_INT 30
2160: PUSH
2161: LD_INT 0
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PUSH
2168: LD_INT 30
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: PPUSH
2183: CALL_OW 72
2187: PPUSH
2188: CALL_OW 256
2192: PUSH
2193: LD_INT 600
2195: LESS
2196: OR
2197: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
2198: LD_VAR 0 5
2202: PPUSH
2203: CALL_OW 247
2207: PUSH
2208: LD_INT 2
2210: DOUBLE
2211: EQUAL
2212: IFTRUE 2216
2214: GO 2463
2216: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
2217: LD_VAR 0 5
2221: PPUSH
2222: CALL_OW 256
2226: PUSH
2227: LD_INT 650
2229: GREATER
2230: PUSH
2231: LD_VAR 0 5
2235: PPUSH
2236: LD_VAR 0 13
2240: PPUSH
2241: CALL_OW 296
2245: PUSH
2246: LD_INT 40
2248: LESS
2249: AND
2250: IFFALSE 2268
// ComAttackUnit ( i , e ) else
2252: LD_VAR 0 5
2256: PPUSH
2257: LD_VAR 0 13
2261: PPUSH
2262: CALL_OW 115
2266: GO 2346
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
2268: LD_VAR 0 5
2272: PPUSH
2273: LD_VAR 0 13
2277: PPUSH
2278: CALL_OW 296
2282: PUSH
2283: LD_INT 30
2285: GREATEREQUAL
2286: PUSH
2287: LD_VAR 0 5
2291: PPUSH
2292: CALL_OW 256
2296: PUSH
2297: LD_INT 650
2299: LESSEQUAL
2300: OR
2301: PUSH
2302: LD_VAR 0 5
2306: PPUSH
2307: LD_EXP 28
2311: PUSH
2312: LD_VAR 0 1
2316: ARRAY
2317: PPUSH
2318: CALL_OW 308
2322: NOT
2323: AND
2324: IFFALSE 2346
// ComMoveToArea ( i , mc_parking [ base ] ) ;
2326: LD_VAR 0 5
2330: PPUSH
2331: LD_EXP 28
2335: PUSH
2336: LD_VAR 0 1
2340: ARRAY
2341: PPUSH
2342: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
2346: LD_VAR 0 5
2350: PPUSH
2351: CALL_OW 256
2355: PUSH
2356: LD_INT 998
2358: LESS
2359: PUSH
2360: LD_VAR 0 5
2364: PPUSH
2365: CALL_OW 263
2369: PUSH
2370: LD_INT 1
2372: EQUAL
2373: AND
2374: PUSH
2375: LD_VAR 0 5
2379: PPUSH
2380: CALL_OW 311
2384: AND
2385: PUSH
2386: LD_VAR 0 5
2390: PPUSH
2391: LD_EXP 28
2395: PUSH
2396: LD_VAR 0 1
2400: ARRAY
2401: PPUSH
2402: CALL_OW 308
2406: AND
2407: IFFALSE 2461
// begin mech := IsDrivenBy ( i ) ;
2409: LD_ADDR_VAR 0 9
2413: PUSH
2414: LD_VAR 0 5
2418: PPUSH
2419: CALL_OW 311
2423: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
2424: LD_VAR 0 9
2428: PPUSH
2429: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
2433: LD_VAR 0 9
2437: PPUSH
2438: LD_VAR 0 5
2442: PPUSH
2443: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
2447: LD_VAR 0 9
2451: PPUSH
2452: LD_VAR 0 5
2456: PPUSH
2457: CALL_OW 180
// end ; end ; unit_human :
2461: GO 2728
2463: LD_INT 1
2465: DOUBLE
2466: EQUAL
2467: IFTRUE 2471
2469: GO 2727
2471: POP
// begin b := IsInUnit ( i ) ;
2472: LD_ADDR_VAR 0 18
2476: PUSH
2477: LD_VAR 0 5
2481: PPUSH
2482: CALL_OW 310
2486: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
2487: LD_ADDR_VAR 0 19
2491: PUSH
2492: LD_VAR 0 18
2496: NOT
2497: PUSH
2498: LD_VAR 0 18
2502: PPUSH
2503: CALL_OW 266
2507: PUSH
2508: LD_INT 32
2510: PUSH
2511: LD_INT 31
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: IN
2518: OR
2519: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
2520: LD_VAR 0 16
2524: PUSH
2525: LD_VAR 0 2
2529: PPUSH
2530: LD_INT 21
2532: PUSH
2533: LD_INT 2
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PPUSH
2540: CALL_OW 72
2544: PUSH
2545: LD_INT 1
2547: LESSEQUAL
2548: OR
2549: PUSH
2550: LD_VAR 0 19
2554: AND
2555: PUSH
2556: LD_VAR 0 5
2560: PUSH
2561: LD_VAR 0 17
2565: IN
2566: NOT
2567: AND
2568: IFFALSE 2661
// begin if b then
2570: LD_VAR 0 18
2574: IFFALSE 2623
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
2576: LD_VAR 0 18
2580: PPUSH
2581: LD_VAR 0 3
2585: PPUSH
2586: LD_VAR 0 18
2590: PPUSH
2591: CALL_OW 74
2595: PPUSH
2596: CALL_OW 296
2600: PUSH
2601: LD_INT 10
2603: LESS
2604: PUSH
2605: LD_VAR 0 18
2609: PPUSH
2610: CALL_OW 461
2614: PUSH
2615: LD_INT 7
2617: NONEQUAL
2618: AND
2619: IFFALSE 2623
// continue ;
2621: GO 2071
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
2623: LD_ADDR_VAR 0 17
2627: PUSH
2628: LD_VAR 0 17
2632: PPUSH
2633: LD_VAR 0 17
2637: PUSH
2638: LD_INT 1
2640: PLUS
2641: PPUSH
2642: LD_VAR 0 5
2646: PPUSH
2647: CALL_OW 1
2651: ST_TO_ADDR
// ComExitBuilding ( i ) ;
2652: LD_VAR 0 5
2656: PPUSH
2657: CALL_OW 122
// end ; if sold_defenders then
2661: LD_VAR 0 17
2665: IFFALSE 2725
// if i in sold_defenders then
2667: LD_VAR 0 5
2671: PUSH
2672: LD_VAR 0 17
2676: IN
2677: IFFALSE 2725
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
2679: LD_VAR 0 5
2683: PPUSH
2684: CALL_OW 314
2688: NOT
2689: PUSH
2690: LD_VAR 0 5
2694: PPUSH
2695: LD_VAR 0 13
2699: PPUSH
2700: CALL_OW 296
2704: PUSH
2705: LD_INT 30
2707: LESS
2708: AND
2709: IFFALSE 2725
// ComAttackUnit ( i , e ) ;
2711: LD_VAR 0 5
2715: PPUSH
2716: LD_VAR 0 13
2720: PPUSH
2721: CALL_OW 115
// end ; end ; end ;
2725: GO 2728
2727: POP
// if IsDead ( i ) then
2728: LD_VAR 0 5
2732: PPUSH
2733: CALL_OW 301
2737: IFFALSE 2755
// defenders := defenders diff i ;
2739: LD_ADDR_VAR 0 2
2743: PUSH
2744: LD_VAR 0 2
2748: PUSH
2749: LD_VAR 0 5
2753: DIFF
2754: ST_TO_ADDR
// end ;
2755: GO 2071
2757: POP
2758: POP
// until not enemy or not defenders ;
2759: LD_VAR 0 3
2763: NOT
2764: PUSH
2765: LD_VAR 0 2
2769: NOT
2770: OR
2771: IFFALSE 2038
// MC_Reset ( base , 18 ) ;
2773: LD_VAR 0 1
2777: PPUSH
2778: LD_INT 18
2780: PPUSH
2781: CALL 38246 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
2785: LD_ADDR_VAR 0 2
2789: PUSH
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: LD_INT 2
2802: PUSH
2803: LD_INT 25
2805: PUSH
2806: LD_INT 1
2808: PUSH
2809: EMPTY
2810: LIST
2811: LIST
2812: PUSH
2813: LD_INT 25
2815: PUSH
2816: LD_INT 5
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: PUSH
2823: LD_INT 25
2825: PUSH
2826: LD_INT 8
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 25
2835: PUSH
2836: LD_INT 9
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: LIST
2847: LIST
2848: LIST
2849: PPUSH
2850: CALL_OW 72
2854: DIFF
2855: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
2856: LD_VAR 0 3
2860: NOT
2861: PUSH
2862: LD_VAR 0 2
2866: PPUSH
2867: LD_INT 21
2869: PUSH
2870: LD_INT 2
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PPUSH
2877: CALL_OW 72
2881: AND
2882: IFFALSE 3144
// begin tmp := FilterByTag ( defenders , 19 ) ;
2884: LD_ADDR_VAR 0 11
2888: PUSH
2889: LD_VAR 0 2
2893: PPUSH
2894: LD_INT 19
2896: PPUSH
2897: CALL 36771 0 2
2901: ST_TO_ADDR
// if tmp then
2902: LD_VAR 0 11
2906: IFFALSE 2976
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
2908: LD_ADDR_VAR 0 11
2912: PUSH
2913: LD_VAR 0 11
2917: PPUSH
2918: LD_INT 25
2920: PUSH
2921: LD_INT 3
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: PPUSH
2928: CALL_OW 72
2932: ST_TO_ADDR
// if tmp then
2933: LD_VAR 0 11
2937: IFFALSE 2976
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
2939: LD_ADDR_EXP 17
2943: PUSH
2944: LD_EXP 17
2948: PPUSH
2949: LD_VAR 0 1
2953: PPUSH
2954: LD_EXP 17
2958: PUSH
2959: LD_VAR 0 1
2963: ARRAY
2964: PUSH
2965: LD_VAR 0 11
2969: UNION
2970: PPUSH
2971: CALL_OW 1
2975: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
2976: LD_VAR 0 1
2980: PPUSH
2981: LD_INT 19
2983: PPUSH
2984: CALL 38246 0 2
// repeat wait ( 0 0$1 ) ;
2988: LD_INT 35
2990: PPUSH
2991: CALL_OW 67
// for i in defenders do
2995: LD_ADDR_VAR 0 5
2999: PUSH
3000: LD_VAR 0 2
3004: PUSH
3005: FOR_IN
3006: IFFALSE 3095
// begin if not IsInArea ( i , mc_parking [ base ] ) then
3008: LD_VAR 0 5
3012: PPUSH
3013: LD_EXP 28
3017: PUSH
3018: LD_VAR 0 1
3022: ARRAY
3023: PPUSH
3024: CALL_OW 308
3028: NOT
3029: IFFALSE 3053
// ComMoveToArea ( i , mc_parking [ base ] ) else
3031: LD_VAR 0 5
3035: PPUSH
3036: LD_EXP 28
3040: PUSH
3041: LD_VAR 0 1
3045: ARRAY
3046: PPUSH
3047: CALL_OW 113
3051: GO 3093
// if GetControl ( i ) = control_manual then
3053: LD_VAR 0 5
3057: PPUSH
3058: CALL_OW 263
3062: PUSH
3063: LD_INT 1
3065: EQUAL
3066: IFFALSE 3093
// if IsDrivenBy ( i ) then
3068: LD_VAR 0 5
3072: PPUSH
3073: CALL_OW 311
3077: IFFALSE 3093
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
3079: LD_VAR 0 5
3083: PPUSH
3084: CALL_OW 311
3088: PPUSH
3089: CALL_OW 121
// end ;
3093: GO 3005
3095: POP
3096: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
3097: LD_VAR 0 2
3101: PPUSH
3102: LD_INT 95
3104: PUSH
3105: LD_EXP 28
3109: PUSH
3110: LD_VAR 0 1
3114: ARRAY
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PPUSH
3120: CALL_OW 72
3124: PUSH
3125: LD_VAR 0 2
3129: EQUAL
3130: PUSH
3131: LD_EXP 27
3135: PUSH
3136: LD_VAR 0 1
3140: ARRAY
3141: OR
3142: IFFALSE 2988
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
3144: LD_ADDR_EXP 26
3148: PUSH
3149: LD_EXP 26
3153: PPUSH
3154: LD_VAR 0 1
3158: PPUSH
3159: LD_EXP 26
3163: PUSH
3164: LD_VAR 0 1
3168: ARRAY
3169: PUSH
3170: LD_VAR 0 2
3174: UNION
3175: PPUSH
3176: CALL_OW 1
3180: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
3181: LD_VAR 0 1
3185: PPUSH
3186: LD_INT 20
3188: PPUSH
3189: CALL 38246 0 2
// end ;
3193: LD_VAR 0 4
3197: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3198: LD_INT 0
3200: PPUSH
3201: PPUSH
3202: PPUSH
3203: PPUSH
// result := false ;
3204: LD_ADDR_VAR 0 2
3208: PUSH
3209: LD_INT 0
3211: ST_TO_ADDR
// side := GetSide ( unit ) ;
3212: LD_ADDR_VAR 0 3
3216: PUSH
3217: LD_VAR 0 1
3221: PPUSH
3222: CALL_OW 255
3226: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3227: LD_ADDR_VAR 0 4
3231: PUSH
3232: LD_VAR 0 1
3236: PPUSH
3237: CALL_OW 248
3241: ST_TO_ADDR
// case nat of 1 :
3242: LD_VAR 0 4
3246: PUSH
3247: LD_INT 1
3249: DOUBLE
3250: EQUAL
3251: IFTRUE 3255
3253: GO 3266
3255: POP
// tech := tech_lassight ; 2 :
3256: LD_ADDR_VAR 0 5
3260: PUSH
3261: LD_INT 12
3263: ST_TO_ADDR
3264: GO 3305
3266: LD_INT 2
3268: DOUBLE
3269: EQUAL
3270: IFTRUE 3274
3272: GO 3285
3274: POP
// tech := tech_mortar ; 3 :
3275: LD_ADDR_VAR 0 5
3279: PUSH
3280: LD_INT 41
3282: ST_TO_ADDR
3283: GO 3305
3285: LD_INT 3
3287: DOUBLE
3288: EQUAL
3289: IFTRUE 3293
3291: GO 3304
3293: POP
// tech := tech_bazooka ; end ;
3294: LD_ADDR_VAR 0 5
3298: PUSH
3299: LD_INT 44
3301: ST_TO_ADDR
3302: GO 3305
3304: POP
// if Researched ( side , tech ) then
3305: LD_VAR 0 3
3309: PPUSH
3310: LD_VAR 0 5
3314: PPUSH
3315: CALL_OW 325
3319: IFFALSE 3346
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3321: LD_ADDR_VAR 0 2
3325: PUSH
3326: LD_INT 5
3328: PUSH
3329: LD_INT 8
3331: PUSH
3332: LD_INT 9
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: LIST
3339: PUSH
3340: LD_VAR 0 4
3344: ARRAY
3345: ST_TO_ADDR
// end ;
3346: LD_VAR 0 2
3350: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3351: LD_INT 0
3353: PPUSH
3354: PPUSH
3355: PPUSH
// if not mines then
3356: LD_VAR 0 2
3360: NOT
3361: IFFALSE 3365
// exit ;
3363: GO 3509
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3365: LD_ADDR_VAR 0 5
3369: PUSH
3370: LD_INT 81
3372: PUSH
3373: LD_VAR 0 1
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: PUSH
3382: LD_INT 3
3384: PUSH
3385: LD_INT 21
3387: PUSH
3388: LD_INT 3
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 69
3407: ST_TO_ADDR
// for i in mines do
3408: LD_ADDR_VAR 0 4
3412: PUSH
3413: LD_VAR 0 2
3417: PUSH
3418: FOR_IN
3419: IFFALSE 3507
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3421: LD_VAR 0 4
3425: PUSH
3426: LD_INT 1
3428: ARRAY
3429: PPUSH
3430: LD_VAR 0 4
3434: PUSH
3435: LD_INT 2
3437: ARRAY
3438: PPUSH
3439: CALL_OW 458
3443: NOT
3444: IFFALSE 3448
// continue ;
3446: GO 3418
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3448: LD_VAR 0 4
3452: PUSH
3453: LD_INT 1
3455: ARRAY
3456: PPUSH
3457: LD_VAR 0 4
3461: PUSH
3462: LD_INT 2
3464: ARRAY
3465: PPUSH
3466: CALL_OW 428
3470: PUSH
3471: LD_VAR 0 5
3475: IN
3476: IFFALSE 3505
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3478: LD_VAR 0 4
3482: PUSH
3483: LD_INT 1
3485: ARRAY
3486: PPUSH
3487: LD_VAR 0 4
3491: PUSH
3492: LD_INT 2
3494: ARRAY
3495: PPUSH
3496: LD_VAR 0 1
3500: PPUSH
3501: CALL_OW 456
// end ;
3505: GO 3418
3507: POP
3508: POP
// end ;
3509: LD_VAR 0 3
3513: RET
// export function Count ( array ) ; var i ; begin
3514: LD_INT 0
3516: PPUSH
3517: PPUSH
// result := 0 ;
3518: LD_ADDR_VAR 0 2
3522: PUSH
3523: LD_INT 0
3525: ST_TO_ADDR
// for i in array do
3526: LD_ADDR_VAR 0 3
3530: PUSH
3531: LD_VAR 0 1
3535: PUSH
3536: FOR_IN
3537: IFFALSE 3561
// if i then
3539: LD_VAR 0 3
3543: IFFALSE 3559
// result := result + 1 ;
3545: LD_ADDR_VAR 0 2
3549: PUSH
3550: LD_VAR 0 2
3554: PUSH
3555: LD_INT 1
3557: PLUS
3558: ST_TO_ADDR
3559: GO 3536
3561: POP
3562: POP
// end ;
3563: LD_VAR 0 2
3567: RET
// export function IsEmpty ( building ) ; begin
3568: LD_INT 0
3570: PPUSH
// if not building then
3571: LD_VAR 0 1
3575: NOT
3576: IFFALSE 3580
// exit ;
3578: GO 3623
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3580: LD_ADDR_VAR 0 2
3584: PUSH
3585: LD_VAR 0 1
3589: PUSH
3590: LD_INT 22
3592: PUSH
3593: LD_VAR 0 1
3597: PPUSH
3598: CALL_OW 255
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PUSH
3607: LD_INT 58
3609: PUSH
3610: EMPTY
3611: LIST
3612: PUSH
3613: EMPTY
3614: LIST
3615: LIST
3616: PPUSH
3617: CALL_OW 69
3621: IN
3622: ST_TO_ADDR
// end ;
3623: LD_VAR 0 2
3627: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3628: LD_INT 0
3630: PPUSH
3631: PPUSH
3632: PPUSH
3633: PPUSH
// tmp := [ ] ;
3634: LD_ADDR_VAR 0 3
3638: PUSH
3639: EMPTY
3640: ST_TO_ADDR
// list := [ ] ;
3641: LD_ADDR_VAR 0 5
3645: PUSH
3646: EMPTY
3647: ST_TO_ADDR
// for i = 16 to 25 do
3648: LD_ADDR_VAR 0 4
3652: PUSH
3653: DOUBLE
3654: LD_INT 16
3656: DEC
3657: ST_TO_ADDR
3658: LD_INT 25
3660: PUSH
3661: FOR_TO
3662: IFFALSE 3735
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: LD_VAR 0 3
3673: PUSH
3674: LD_INT 22
3676: PUSH
3677: LD_VAR 0 1
3681: PPUSH
3682: CALL_OW 255
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PUSH
3691: LD_INT 91
3693: PUSH
3694: LD_VAR 0 1
3698: PUSH
3699: LD_INT 6
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: PUSH
3707: LD_INT 30
3709: PUSH
3710: LD_VAR 0 4
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: LIST
3723: PUSH
3724: EMPTY
3725: LIST
3726: PPUSH
3727: CALL_OW 69
3731: ADD
3732: ST_TO_ADDR
3733: GO 3661
3735: POP
3736: POP
// for i = 1 to tmp do
3737: LD_ADDR_VAR 0 4
3741: PUSH
3742: DOUBLE
3743: LD_INT 1
3745: DEC
3746: ST_TO_ADDR
3747: LD_VAR 0 3
3751: PUSH
3752: FOR_TO
3753: IFFALSE 3841
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3755: LD_ADDR_VAR 0 5
3759: PUSH
3760: LD_VAR 0 5
3764: PUSH
3765: LD_VAR 0 3
3769: PUSH
3770: LD_VAR 0 4
3774: ARRAY
3775: PPUSH
3776: CALL_OW 266
3780: PUSH
3781: LD_VAR 0 3
3785: PUSH
3786: LD_VAR 0 4
3790: ARRAY
3791: PPUSH
3792: CALL_OW 250
3796: PUSH
3797: LD_VAR 0 3
3801: PUSH
3802: LD_VAR 0 4
3806: ARRAY
3807: PPUSH
3808: CALL_OW 251
3812: PUSH
3813: LD_VAR 0 3
3817: PUSH
3818: LD_VAR 0 4
3822: ARRAY
3823: PPUSH
3824: CALL_OW 254
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: ADD
3838: ST_TO_ADDR
3839: GO 3752
3841: POP
3842: POP
// result := list ;
3843: LD_ADDR_VAR 0 2
3847: PUSH
3848: LD_VAR 0 5
3852: ST_TO_ADDR
// end ;
3853: LD_VAR 0 2
3857: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3858: LD_INT 0
3860: PPUSH
3861: PPUSH
3862: PPUSH
3863: PPUSH
3864: PPUSH
3865: PPUSH
3866: PPUSH
// if not factory then
3867: LD_VAR 0 1
3871: NOT
3872: IFFALSE 3876
// exit ;
3874: GO 4401
// if control = control_apeman then
3876: LD_VAR 0 4
3880: PUSH
3881: LD_INT 5
3883: EQUAL
3884: IFFALSE 3993
// begin tmp := UnitsInside ( factory ) ;
3886: LD_ADDR_VAR 0 8
3890: PUSH
3891: LD_VAR 0 1
3895: PPUSH
3896: CALL_OW 313
3900: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3901: LD_VAR 0 8
3905: PPUSH
3906: LD_INT 25
3908: PUSH
3909: LD_INT 12
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: PPUSH
3916: CALL_OW 72
3920: NOT
3921: IFFALSE 3931
// control := control_manual ;
3923: LD_ADDR_VAR 0 4
3927: PUSH
3928: LD_INT 1
3930: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3931: LD_ADDR_VAR 0 8
3935: PUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL 3628 0 1
3945: ST_TO_ADDR
// if tmp then
3946: LD_VAR 0 8
3950: IFFALSE 3993
// begin for i in tmp do
3952: LD_ADDR_VAR 0 7
3956: PUSH
3957: LD_VAR 0 8
3961: PUSH
3962: FOR_IN
3963: IFFALSE 3991
// if i [ 1 ] = b_ext_radar then
3965: LD_VAR 0 7
3969: PUSH
3970: LD_INT 1
3972: ARRAY
3973: PUSH
3974: LD_INT 20
3976: EQUAL
3977: IFFALSE 3989
// begin control := control_remote ;
3979: LD_ADDR_VAR 0 4
3983: PUSH
3984: LD_INT 2
3986: ST_TO_ADDR
// break ;
3987: GO 3991
// end ;
3989: GO 3962
3991: POP
3992: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3993: LD_VAR 0 1
3997: PPUSH
3998: LD_VAR 0 2
4002: PPUSH
4003: LD_VAR 0 3
4007: PPUSH
4008: LD_VAR 0 4
4012: PPUSH
4013: LD_VAR 0 5
4017: PPUSH
4018: CALL_OW 448
4022: IFFALSE 4057
// begin result := [ chassis , engine , control , weapon ] ;
4024: LD_ADDR_VAR 0 6
4028: PUSH
4029: LD_VAR 0 2
4033: PUSH
4034: LD_VAR 0 3
4038: PUSH
4039: LD_VAR 0 4
4043: PUSH
4044: LD_VAR 0 5
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: ST_TO_ADDR
// exit ;
4055: GO 4401
// end ; _chassis := AvailableChassisList ( factory ) ;
4057: LD_ADDR_VAR 0 9
4061: PUSH
4062: LD_VAR 0 1
4066: PPUSH
4067: CALL_OW 475
4071: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4072: LD_ADDR_VAR 0 11
4076: PUSH
4077: LD_VAR 0 1
4081: PPUSH
4082: CALL_OW 476
4086: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4087: LD_ADDR_VAR 0 12
4091: PUSH
4092: LD_VAR 0 1
4096: PPUSH
4097: CALL_OW 477
4101: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4102: LD_ADDR_VAR 0 10
4106: PUSH
4107: LD_VAR 0 1
4111: PPUSH
4112: CALL_OW 478
4116: ST_TO_ADDR
// if not chassis in _chassis then
4117: LD_VAR 0 2
4121: PUSH
4122: LD_VAR 0 9
4126: IN
4127: NOT
4128: IFFALSE 4154
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4130: LD_ADDR_VAR 0 2
4134: PUSH
4135: LD_VAR 0 9
4139: PUSH
4140: LD_INT 1
4142: PPUSH
4143: LD_VAR 0 9
4147: PPUSH
4148: CALL_OW 12
4152: ARRAY
4153: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4154: LD_VAR 0 2
4158: PPUSH
4159: LD_VAR 0 3
4163: PPUSH
4164: CALL 4406 0 2
4168: NOT
4169: IFFALSE 4228
// repeat engine := _engine [ 1 ] ;
4171: LD_ADDR_VAR 0 3
4175: PUSH
4176: LD_VAR 0 11
4180: PUSH
4181: LD_INT 1
4183: ARRAY
4184: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4185: LD_ADDR_VAR 0 11
4189: PUSH
4190: LD_VAR 0 11
4194: PPUSH
4195: LD_INT 1
4197: PPUSH
4198: CALL_OW 3
4202: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4203: LD_VAR 0 2
4207: PPUSH
4208: LD_VAR 0 3
4212: PPUSH
4213: CALL 4406 0 2
4217: PUSH
4218: LD_VAR 0 11
4222: PUSH
4223: EMPTY
4224: EQUAL
4225: OR
4226: IFFALSE 4171
// if not control in _control then
4228: LD_VAR 0 4
4232: PUSH
4233: LD_VAR 0 12
4237: IN
4238: NOT
4239: IFFALSE 4265
// control := _control [ rand ( 1 , _control ) ] ;
4241: LD_ADDR_VAR 0 4
4245: PUSH
4246: LD_VAR 0 12
4250: PUSH
4251: LD_INT 1
4253: PPUSH
4254: LD_VAR 0 12
4258: PPUSH
4259: CALL_OW 12
4263: ARRAY
4264: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4265: LD_VAR 0 2
4269: PPUSH
4270: LD_VAR 0 5
4274: PPUSH
4275: CALL 4626 0 2
4279: NOT
4280: IFFALSE 4339
// repeat weapon := _weapon [ 1 ] ;
4282: LD_ADDR_VAR 0 5
4286: PUSH
4287: LD_VAR 0 10
4291: PUSH
4292: LD_INT 1
4294: ARRAY
4295: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4296: LD_ADDR_VAR 0 10
4300: PUSH
4301: LD_VAR 0 10
4305: PPUSH
4306: LD_INT 1
4308: PPUSH
4309: CALL_OW 3
4313: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4314: LD_VAR 0 2
4318: PPUSH
4319: LD_VAR 0 5
4323: PPUSH
4324: CALL 4626 0 2
4328: PUSH
4329: LD_VAR 0 10
4333: PUSH
4334: EMPTY
4335: EQUAL
4336: OR
4337: IFFALSE 4282
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4339: LD_VAR 0 1
4343: PPUSH
4344: LD_VAR 0 2
4348: PPUSH
4349: LD_VAR 0 3
4353: PPUSH
4354: LD_VAR 0 4
4358: PPUSH
4359: LD_VAR 0 5
4363: PPUSH
4364: CALL_OW 448
4368: IFFALSE 4401
// result := [ chassis , engine , control , weapon ] ;
4370: LD_ADDR_VAR 0 6
4374: PUSH
4375: LD_VAR 0 2
4379: PUSH
4380: LD_VAR 0 3
4384: PUSH
4385: LD_VAR 0 4
4389: PUSH
4390: LD_VAR 0 5
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: ST_TO_ADDR
// end ;
4401: LD_VAR 0 6
4405: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4406: LD_INT 0
4408: PPUSH
// if not chassis or not engine then
4409: LD_VAR 0 1
4413: NOT
4414: PUSH
4415: LD_VAR 0 2
4419: NOT
4420: OR
4421: IFFALSE 4425
// exit ;
4423: GO 4621
// case engine of engine_solar :
4425: LD_VAR 0 2
4429: PUSH
4430: LD_INT 2
4432: DOUBLE
4433: EQUAL
4434: IFTRUE 4438
4436: GO 4476
4438: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4439: LD_ADDR_VAR 0 3
4443: PUSH
4444: LD_INT 11
4446: PUSH
4447: LD_INT 12
4449: PUSH
4450: LD_INT 13
4452: PUSH
4453: LD_INT 14
4455: PUSH
4456: LD_INT 1
4458: PUSH
4459: LD_INT 2
4461: PUSH
4462: LD_INT 3
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: ST_TO_ADDR
4474: GO 4605
4476: LD_INT 1
4478: DOUBLE
4479: EQUAL
4480: IFTRUE 4484
4482: GO 4546
4484: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4485: LD_ADDR_VAR 0 3
4489: PUSH
4490: LD_INT 11
4492: PUSH
4493: LD_INT 12
4495: PUSH
4496: LD_INT 13
4498: PUSH
4499: LD_INT 14
4501: PUSH
4502: LD_INT 1
4504: PUSH
4505: LD_INT 2
4507: PUSH
4508: LD_INT 3
4510: PUSH
4511: LD_INT 4
4513: PUSH
4514: LD_INT 5
4516: PUSH
4517: LD_INT 21
4519: PUSH
4520: LD_INT 23
4522: PUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 24
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: ST_TO_ADDR
4544: GO 4605
4546: LD_INT 3
4548: DOUBLE
4549: EQUAL
4550: IFTRUE 4554
4552: GO 4604
4554: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4555: LD_ADDR_VAR 0 3
4559: PUSH
4560: LD_INT 13
4562: PUSH
4563: LD_INT 14
4565: PUSH
4566: LD_INT 2
4568: PUSH
4569: LD_INT 3
4571: PUSH
4572: LD_INT 4
4574: PUSH
4575: LD_INT 5
4577: PUSH
4578: LD_INT 21
4580: PUSH
4581: LD_INT 22
4583: PUSH
4584: LD_INT 23
4586: PUSH
4587: LD_INT 24
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: ST_TO_ADDR
4602: GO 4605
4604: POP
// result := ( chassis in result ) ;
4605: LD_ADDR_VAR 0 3
4609: PUSH
4610: LD_VAR 0 1
4614: PUSH
4615: LD_VAR 0 3
4619: IN
4620: ST_TO_ADDR
// end ;
4621: LD_VAR 0 3
4625: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4626: LD_INT 0
4628: PPUSH
// if not chassis or not weapon then
4629: LD_VAR 0 1
4633: NOT
4634: PUSH
4635: LD_VAR 0 2
4639: NOT
4640: OR
4641: IFFALSE 4645
// exit ;
4643: GO 5671
// case weapon of us_machine_gun :
4645: LD_VAR 0 2
4649: PUSH
4650: LD_INT 2
4652: DOUBLE
4653: EQUAL
4654: IFTRUE 4658
4656: GO 4688
4658: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4659: LD_ADDR_VAR 0 3
4663: PUSH
4664: LD_INT 1
4666: PUSH
4667: LD_INT 2
4669: PUSH
4670: LD_INT 3
4672: PUSH
4673: LD_INT 4
4675: PUSH
4676: LD_INT 5
4678: PUSH
4679: EMPTY
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: ST_TO_ADDR
4686: GO 5655
4688: LD_INT 3
4690: DOUBLE
4691: EQUAL
4692: IFTRUE 4696
4694: GO 4726
4696: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4697: LD_ADDR_VAR 0 3
4701: PUSH
4702: LD_INT 1
4704: PUSH
4705: LD_INT 2
4707: PUSH
4708: LD_INT 3
4710: PUSH
4711: LD_INT 4
4713: PUSH
4714: LD_INT 5
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: ST_TO_ADDR
4724: GO 5655
4726: LD_INT 11
4728: DOUBLE
4729: EQUAL
4730: IFTRUE 4734
4732: GO 4764
4734: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4735: LD_ADDR_VAR 0 3
4739: PUSH
4740: LD_INT 1
4742: PUSH
4743: LD_INT 2
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: LD_INT 4
4751: PUSH
4752: LD_INT 5
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: ST_TO_ADDR
4762: GO 5655
4764: LD_INT 4
4766: DOUBLE
4767: EQUAL
4768: IFTRUE 4772
4770: GO 4798
4772: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4773: LD_ADDR_VAR 0 3
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: LD_INT 3
4783: PUSH
4784: LD_INT 4
4786: PUSH
4787: LD_INT 5
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: ST_TO_ADDR
4796: GO 5655
4798: LD_INT 5
4800: DOUBLE
4801: EQUAL
4802: IFTRUE 4806
4804: GO 4832
4806: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4807: LD_ADDR_VAR 0 3
4811: PUSH
4812: LD_INT 2
4814: PUSH
4815: LD_INT 3
4817: PUSH
4818: LD_INT 4
4820: PUSH
4821: LD_INT 5
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: ST_TO_ADDR
4830: GO 5655
4832: LD_INT 9
4834: DOUBLE
4835: EQUAL
4836: IFTRUE 4840
4838: GO 4866
4840: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4841: LD_ADDR_VAR 0 3
4845: PUSH
4846: LD_INT 2
4848: PUSH
4849: LD_INT 3
4851: PUSH
4852: LD_INT 4
4854: PUSH
4855: LD_INT 5
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: ST_TO_ADDR
4864: GO 5655
4866: LD_INT 7
4868: DOUBLE
4869: EQUAL
4870: IFTRUE 4874
4872: GO 4900
4874: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4875: LD_ADDR_VAR 0 3
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: LD_INT 3
4885: PUSH
4886: LD_INT 4
4888: PUSH
4889: LD_INT 5
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: ST_TO_ADDR
4898: GO 5655
4900: LD_INT 12
4902: DOUBLE
4903: EQUAL
4904: IFTRUE 4908
4906: GO 4934
4908: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4909: LD_ADDR_VAR 0 3
4913: PUSH
4914: LD_INT 2
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: LD_INT 4
4922: PUSH
4923: LD_INT 5
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: ST_TO_ADDR
4932: GO 5655
4934: LD_INT 13
4936: DOUBLE
4937: EQUAL
4938: IFTRUE 4942
4940: GO 4968
4942: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4943: LD_ADDR_VAR 0 3
4947: PUSH
4948: LD_INT 2
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: LD_INT 5
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: ST_TO_ADDR
4966: GO 5655
4968: LD_INT 14
4970: DOUBLE
4971: EQUAL
4972: IFTRUE 4976
4974: GO 4994
4976: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4977: LD_ADDR_VAR 0 3
4981: PUSH
4982: LD_INT 4
4984: PUSH
4985: LD_INT 5
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: ST_TO_ADDR
4992: GO 5655
4994: LD_INT 6
4996: DOUBLE
4997: EQUAL
4998: IFTRUE 5002
5000: GO 5020
5002: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5003: LD_ADDR_VAR 0 3
5007: PUSH
5008: LD_INT 4
5010: PUSH
5011: LD_INT 5
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: ST_TO_ADDR
5018: GO 5655
5020: LD_INT 10
5022: DOUBLE
5023: EQUAL
5024: IFTRUE 5028
5026: GO 5046
5028: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5029: LD_ADDR_VAR 0 3
5033: PUSH
5034: LD_INT 4
5036: PUSH
5037: LD_INT 5
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: ST_TO_ADDR
5044: GO 5655
5046: LD_INT 22
5048: DOUBLE
5049: EQUAL
5050: IFTRUE 5054
5052: GO 5080
5054: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5055: LD_ADDR_VAR 0 3
5059: PUSH
5060: LD_INT 11
5062: PUSH
5063: LD_INT 12
5065: PUSH
5066: LD_INT 13
5068: PUSH
5069: LD_INT 14
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: ST_TO_ADDR
5078: GO 5655
5080: LD_INT 23
5082: DOUBLE
5083: EQUAL
5084: IFTRUE 5088
5086: GO 5114
5088: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5089: LD_ADDR_VAR 0 3
5093: PUSH
5094: LD_INT 11
5096: PUSH
5097: LD_INT 12
5099: PUSH
5100: LD_INT 13
5102: PUSH
5103: LD_INT 14
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: ST_TO_ADDR
5112: GO 5655
5114: LD_INT 24
5116: DOUBLE
5117: EQUAL
5118: IFTRUE 5122
5120: GO 5148
5122: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5123: LD_ADDR_VAR 0 3
5127: PUSH
5128: LD_INT 11
5130: PUSH
5131: LD_INT 12
5133: PUSH
5134: LD_INT 13
5136: PUSH
5137: LD_INT 14
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: ST_TO_ADDR
5146: GO 5655
5148: LD_INT 30
5150: DOUBLE
5151: EQUAL
5152: IFTRUE 5156
5154: GO 5182
5156: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5157: LD_ADDR_VAR 0 3
5161: PUSH
5162: LD_INT 11
5164: PUSH
5165: LD_INT 12
5167: PUSH
5168: LD_INT 13
5170: PUSH
5171: LD_INT 14
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: ST_TO_ADDR
5180: GO 5655
5182: LD_INT 25
5184: DOUBLE
5185: EQUAL
5186: IFTRUE 5190
5188: GO 5208
5190: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5191: LD_ADDR_VAR 0 3
5195: PUSH
5196: LD_INT 13
5198: PUSH
5199: LD_INT 14
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: ST_TO_ADDR
5206: GO 5655
5208: LD_INT 27
5210: DOUBLE
5211: EQUAL
5212: IFTRUE 5216
5214: GO 5234
5216: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5217: LD_ADDR_VAR 0 3
5221: PUSH
5222: LD_INT 13
5224: PUSH
5225: LD_INT 14
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: ST_TO_ADDR
5232: GO 5655
5234: LD_INT 28
5236: DOUBLE
5237: EQUAL
5238: IFTRUE 5242
5240: GO 5260
5242: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5243: LD_ADDR_VAR 0 3
5247: PUSH
5248: LD_INT 13
5250: PUSH
5251: LD_INT 14
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: ST_TO_ADDR
5258: GO 5655
5260: LD_INT 29
5262: DOUBLE
5263: EQUAL
5264: IFTRUE 5268
5266: GO 5286
5268: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5269: LD_ADDR_VAR 0 3
5273: PUSH
5274: LD_INT 13
5276: PUSH
5277: LD_INT 14
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: ST_TO_ADDR
5284: GO 5655
5286: LD_INT 31
5288: DOUBLE
5289: EQUAL
5290: IFTRUE 5294
5292: GO 5312
5294: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5295: LD_ADDR_VAR 0 3
5299: PUSH
5300: LD_INT 13
5302: PUSH
5303: LD_INT 14
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: ST_TO_ADDR
5310: GO 5655
5312: LD_INT 26
5314: DOUBLE
5315: EQUAL
5316: IFTRUE 5320
5318: GO 5338
5320: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5321: LD_ADDR_VAR 0 3
5325: PUSH
5326: LD_INT 13
5328: PUSH
5329: LD_INT 14
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: ST_TO_ADDR
5336: GO 5655
5338: LD_INT 42
5340: DOUBLE
5341: EQUAL
5342: IFTRUE 5346
5344: GO 5372
5346: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5347: LD_ADDR_VAR 0 3
5351: PUSH
5352: LD_INT 21
5354: PUSH
5355: LD_INT 22
5357: PUSH
5358: LD_INT 23
5360: PUSH
5361: LD_INT 24
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: ST_TO_ADDR
5370: GO 5655
5372: LD_INT 43
5374: DOUBLE
5375: EQUAL
5376: IFTRUE 5380
5378: GO 5406
5380: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5381: LD_ADDR_VAR 0 3
5385: PUSH
5386: LD_INT 21
5388: PUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 23
5394: PUSH
5395: LD_INT 24
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: ST_TO_ADDR
5404: GO 5655
5406: LD_INT 44
5408: DOUBLE
5409: EQUAL
5410: IFTRUE 5414
5412: GO 5440
5414: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5415: LD_ADDR_VAR 0 3
5419: PUSH
5420: LD_INT 21
5422: PUSH
5423: LD_INT 22
5425: PUSH
5426: LD_INT 23
5428: PUSH
5429: LD_INT 24
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: ST_TO_ADDR
5438: GO 5655
5440: LD_INT 45
5442: DOUBLE
5443: EQUAL
5444: IFTRUE 5448
5446: GO 5474
5448: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5449: LD_ADDR_VAR 0 3
5453: PUSH
5454: LD_INT 21
5456: PUSH
5457: LD_INT 22
5459: PUSH
5460: LD_INT 23
5462: PUSH
5463: LD_INT 24
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: ST_TO_ADDR
5472: GO 5655
5474: LD_INT 49
5476: DOUBLE
5477: EQUAL
5478: IFTRUE 5482
5480: GO 5508
5482: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5483: LD_ADDR_VAR 0 3
5487: PUSH
5488: LD_INT 21
5490: PUSH
5491: LD_INT 22
5493: PUSH
5494: LD_INT 23
5496: PUSH
5497: LD_INT 24
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: ST_TO_ADDR
5506: GO 5655
5508: LD_INT 51
5510: DOUBLE
5511: EQUAL
5512: IFTRUE 5516
5514: GO 5542
5516: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5517: LD_ADDR_VAR 0 3
5521: PUSH
5522: LD_INT 21
5524: PUSH
5525: LD_INT 22
5527: PUSH
5528: LD_INT 23
5530: PUSH
5531: LD_INT 24
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: ST_TO_ADDR
5540: GO 5655
5542: LD_INT 52
5544: DOUBLE
5545: EQUAL
5546: IFTRUE 5550
5548: GO 5576
5550: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5551: LD_ADDR_VAR 0 3
5555: PUSH
5556: LD_INT 21
5558: PUSH
5559: LD_INT 22
5561: PUSH
5562: LD_INT 23
5564: PUSH
5565: LD_INT 24
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: ST_TO_ADDR
5574: GO 5655
5576: LD_INT 53
5578: DOUBLE
5579: EQUAL
5580: IFTRUE 5584
5582: GO 5602
5584: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5585: LD_ADDR_VAR 0 3
5589: PUSH
5590: LD_INT 23
5592: PUSH
5593: LD_INT 24
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: ST_TO_ADDR
5600: GO 5655
5602: LD_INT 46
5604: DOUBLE
5605: EQUAL
5606: IFTRUE 5610
5608: GO 5628
5610: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5611: LD_ADDR_VAR 0 3
5615: PUSH
5616: LD_INT 23
5618: PUSH
5619: LD_INT 24
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: ST_TO_ADDR
5626: GO 5655
5628: LD_INT 47
5630: DOUBLE
5631: EQUAL
5632: IFTRUE 5636
5634: GO 5654
5636: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5637: LD_ADDR_VAR 0 3
5641: PUSH
5642: LD_INT 23
5644: PUSH
5645: LD_INT 24
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: ST_TO_ADDR
5652: GO 5655
5654: POP
// result := ( chassis in result ) ;
5655: LD_ADDR_VAR 0 3
5659: PUSH
5660: LD_VAR 0 1
5664: PUSH
5665: LD_VAR 0 3
5669: IN
5670: ST_TO_ADDR
// end ;
5671: LD_VAR 0 3
5675: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5676: LD_INT 0
5678: PPUSH
5679: PPUSH
5680: PPUSH
5681: PPUSH
5682: PPUSH
5683: PPUSH
5684: PPUSH
// result := array ;
5685: LD_ADDR_VAR 0 5
5689: PUSH
5690: LD_VAR 0 1
5694: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5695: LD_VAR 0 1
5699: NOT
5700: PUSH
5701: LD_VAR 0 2
5705: NOT
5706: OR
5707: PUSH
5708: LD_VAR 0 3
5712: NOT
5713: OR
5714: PUSH
5715: LD_VAR 0 2
5719: PUSH
5720: LD_VAR 0 1
5724: GREATER
5725: OR
5726: PUSH
5727: LD_VAR 0 3
5731: PUSH
5732: LD_VAR 0 1
5736: GREATER
5737: OR
5738: IFFALSE 5742
// exit ;
5740: GO 6038
// if direction then
5742: LD_VAR 0 4
5746: IFFALSE 5810
// begin d := 1 ;
5748: LD_ADDR_VAR 0 9
5752: PUSH
5753: LD_INT 1
5755: ST_TO_ADDR
// if i_from > i_to then
5756: LD_VAR 0 2
5760: PUSH
5761: LD_VAR 0 3
5765: GREATER
5766: IFFALSE 5792
// length := ( array - i_from ) + i_to else
5768: LD_ADDR_VAR 0 11
5772: PUSH
5773: LD_VAR 0 1
5777: PUSH
5778: LD_VAR 0 2
5782: MINUS
5783: PUSH
5784: LD_VAR 0 3
5788: PLUS
5789: ST_TO_ADDR
5790: GO 5808
// length := i_to - i_from ;
5792: LD_ADDR_VAR 0 11
5796: PUSH
5797: LD_VAR 0 3
5801: PUSH
5802: LD_VAR 0 2
5806: MINUS
5807: ST_TO_ADDR
// end else
5808: GO 5871
// begin d := - 1 ;
5810: LD_ADDR_VAR 0 9
5814: PUSH
5815: LD_INT 1
5817: NEG
5818: ST_TO_ADDR
// if i_from > i_to then
5819: LD_VAR 0 2
5823: PUSH
5824: LD_VAR 0 3
5828: GREATER
5829: IFFALSE 5849
// length := i_from - i_to else
5831: LD_ADDR_VAR 0 11
5835: PUSH
5836: LD_VAR 0 2
5840: PUSH
5841: LD_VAR 0 3
5845: MINUS
5846: ST_TO_ADDR
5847: GO 5871
// length := ( array - i_to ) + i_from ;
5849: LD_ADDR_VAR 0 11
5853: PUSH
5854: LD_VAR 0 1
5858: PUSH
5859: LD_VAR 0 3
5863: MINUS
5864: PUSH
5865: LD_VAR 0 2
5869: PLUS
5870: ST_TO_ADDR
// end ; if not length then
5871: LD_VAR 0 11
5875: NOT
5876: IFFALSE 5880
// exit ;
5878: GO 6038
// tmp := array ;
5880: LD_ADDR_VAR 0 10
5884: PUSH
5885: LD_VAR 0 1
5889: ST_TO_ADDR
// for i = 1 to length do
5890: LD_ADDR_VAR 0 6
5894: PUSH
5895: DOUBLE
5896: LD_INT 1
5898: DEC
5899: ST_TO_ADDR
5900: LD_VAR 0 11
5904: PUSH
5905: FOR_TO
5906: IFFALSE 6026
// begin for j = 1 to array do
5908: LD_ADDR_VAR 0 7
5912: PUSH
5913: DOUBLE
5914: LD_INT 1
5916: DEC
5917: ST_TO_ADDR
5918: LD_VAR 0 1
5922: PUSH
5923: FOR_TO
5924: IFFALSE 6012
// begin k := j + d ;
5926: LD_ADDR_VAR 0 8
5930: PUSH
5931: LD_VAR 0 7
5935: PUSH
5936: LD_VAR 0 9
5940: PLUS
5941: ST_TO_ADDR
// if k > array then
5942: LD_VAR 0 8
5946: PUSH
5947: LD_VAR 0 1
5951: GREATER
5952: IFFALSE 5962
// k := 1 ;
5954: LD_ADDR_VAR 0 8
5958: PUSH
5959: LD_INT 1
5961: ST_TO_ADDR
// if not k then
5962: LD_VAR 0 8
5966: NOT
5967: IFFALSE 5979
// k := array ;
5969: LD_ADDR_VAR 0 8
5973: PUSH
5974: LD_VAR 0 1
5978: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5979: LD_ADDR_VAR 0 10
5983: PUSH
5984: LD_VAR 0 10
5988: PPUSH
5989: LD_VAR 0 8
5993: PPUSH
5994: LD_VAR 0 1
5998: PUSH
5999: LD_VAR 0 7
6003: ARRAY
6004: PPUSH
6005: CALL_OW 1
6009: ST_TO_ADDR
// end ;
6010: GO 5923
6012: POP
6013: POP
// array := tmp ;
6014: LD_ADDR_VAR 0 1
6018: PUSH
6019: LD_VAR 0 10
6023: ST_TO_ADDR
// end ;
6024: GO 5905
6026: POP
6027: POP
// result := array ;
6028: LD_ADDR_VAR 0 5
6032: PUSH
6033: LD_VAR 0 1
6037: ST_TO_ADDR
// end ;
6038: LD_VAR 0 5
6042: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6043: LD_INT 0
6045: PPUSH
6046: PPUSH
// result := 0 ;
6047: LD_ADDR_VAR 0 3
6051: PUSH
6052: LD_INT 0
6054: ST_TO_ADDR
// if not array or not value in array then
6055: LD_VAR 0 1
6059: NOT
6060: PUSH
6061: LD_VAR 0 2
6065: PUSH
6066: LD_VAR 0 1
6070: IN
6071: NOT
6072: OR
6073: IFFALSE 6077
// exit ;
6075: GO 6131
// for i = 1 to array do
6077: LD_ADDR_VAR 0 4
6081: PUSH
6082: DOUBLE
6083: LD_INT 1
6085: DEC
6086: ST_TO_ADDR
6087: LD_VAR 0 1
6091: PUSH
6092: FOR_TO
6093: IFFALSE 6129
// if value = array [ i ] then
6095: LD_VAR 0 2
6099: PUSH
6100: LD_VAR 0 1
6104: PUSH
6105: LD_VAR 0 4
6109: ARRAY
6110: EQUAL
6111: IFFALSE 6127
// begin result := i ;
6113: LD_ADDR_VAR 0 3
6117: PUSH
6118: LD_VAR 0 4
6122: ST_TO_ADDR
// exit ;
6123: POP
6124: POP
6125: GO 6131
// end ;
6127: GO 6092
6129: POP
6130: POP
// end ;
6131: LD_VAR 0 3
6135: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6136: LD_INT 0
6138: PPUSH
// vc_chassis := chassis ;
6139: LD_ADDR_OWVAR 37
6143: PUSH
6144: LD_VAR 0 1
6148: ST_TO_ADDR
// vc_engine := engine ;
6149: LD_ADDR_OWVAR 39
6153: PUSH
6154: LD_VAR 0 2
6158: ST_TO_ADDR
// vc_control := control ;
6159: LD_ADDR_OWVAR 38
6163: PUSH
6164: LD_VAR 0 3
6168: ST_TO_ADDR
// vc_weapon := weapon ;
6169: LD_ADDR_OWVAR 40
6173: PUSH
6174: LD_VAR 0 4
6178: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6179: LD_ADDR_OWVAR 41
6183: PUSH
6184: LD_VAR 0 5
6188: ST_TO_ADDR
// end ;
6189: LD_VAR 0 6
6193: RET
// export function WantPlant ( unit ) ; var task ; begin
6194: LD_INT 0
6196: PPUSH
6197: PPUSH
// result := false ;
6198: LD_ADDR_VAR 0 2
6202: PUSH
6203: LD_INT 0
6205: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6206: LD_ADDR_VAR 0 3
6210: PUSH
6211: LD_VAR 0 1
6215: PPUSH
6216: CALL_OW 437
6220: ST_TO_ADDR
// if task then
6221: LD_VAR 0 3
6225: IFFALSE 6253
// if task [ 1 ] [ 1 ] = p then
6227: LD_VAR 0 3
6231: PUSH
6232: LD_INT 1
6234: ARRAY
6235: PUSH
6236: LD_INT 1
6238: ARRAY
6239: PUSH
6240: LD_STRING p
6242: EQUAL
6243: IFFALSE 6253
// result := true ;
6245: LD_ADDR_VAR 0 2
6249: PUSH
6250: LD_INT 1
6252: ST_TO_ADDR
// end ;
6253: LD_VAR 0 2
6257: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6258: LD_INT 0
6260: PPUSH
6261: PPUSH
6262: PPUSH
6263: PPUSH
// if pos < 1 then
6264: LD_VAR 0 2
6268: PUSH
6269: LD_INT 1
6271: LESS
6272: IFFALSE 6276
// exit ;
6274: GO 6579
// if pos = 1 then
6276: LD_VAR 0 2
6280: PUSH
6281: LD_INT 1
6283: EQUAL
6284: IFFALSE 6317
// result := Replace ( arr , pos [ 1 ] , value ) else
6286: LD_ADDR_VAR 0 4
6290: PUSH
6291: LD_VAR 0 1
6295: PPUSH
6296: LD_VAR 0 2
6300: PUSH
6301: LD_INT 1
6303: ARRAY
6304: PPUSH
6305: LD_VAR 0 3
6309: PPUSH
6310: CALL_OW 1
6314: ST_TO_ADDR
6315: GO 6579
// begin tmp := arr ;
6317: LD_ADDR_VAR 0 6
6321: PUSH
6322: LD_VAR 0 1
6326: ST_TO_ADDR
// s_arr := [ tmp ] ;
6327: LD_ADDR_VAR 0 7
6331: PUSH
6332: LD_VAR 0 6
6336: PUSH
6337: EMPTY
6338: LIST
6339: ST_TO_ADDR
// for i = 1 to pos - 1 do
6340: LD_ADDR_VAR 0 5
6344: PUSH
6345: DOUBLE
6346: LD_INT 1
6348: DEC
6349: ST_TO_ADDR
6350: LD_VAR 0 2
6354: PUSH
6355: LD_INT 1
6357: MINUS
6358: PUSH
6359: FOR_TO
6360: IFFALSE 6405
// begin tmp := tmp [ pos [ i ] ] ;
6362: LD_ADDR_VAR 0 6
6366: PUSH
6367: LD_VAR 0 6
6371: PUSH
6372: LD_VAR 0 2
6376: PUSH
6377: LD_VAR 0 5
6381: ARRAY
6382: ARRAY
6383: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6384: LD_ADDR_VAR 0 7
6388: PUSH
6389: LD_VAR 0 7
6393: PUSH
6394: LD_VAR 0 6
6398: PUSH
6399: EMPTY
6400: LIST
6401: ADD
6402: ST_TO_ADDR
// end ;
6403: GO 6359
6405: POP
6406: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6407: LD_ADDR_VAR 0 6
6411: PUSH
6412: LD_VAR 0 6
6416: PPUSH
6417: LD_VAR 0 2
6421: PUSH
6422: LD_VAR 0 2
6426: ARRAY
6427: PPUSH
6428: LD_VAR 0 3
6432: PPUSH
6433: CALL_OW 1
6437: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6438: LD_ADDR_VAR 0 7
6442: PUSH
6443: LD_VAR 0 7
6447: PPUSH
6448: LD_VAR 0 7
6452: PPUSH
6453: LD_VAR 0 6
6457: PPUSH
6458: CALL_OW 1
6462: ST_TO_ADDR
// for i = s_arr downto 2 do
6463: LD_ADDR_VAR 0 5
6467: PUSH
6468: DOUBLE
6469: LD_VAR 0 7
6473: INC
6474: ST_TO_ADDR
6475: LD_INT 2
6477: PUSH
6478: FOR_DOWNTO
6479: IFFALSE 6563
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6481: LD_ADDR_VAR 0 6
6485: PUSH
6486: LD_VAR 0 7
6490: PUSH
6491: LD_VAR 0 5
6495: PUSH
6496: LD_INT 1
6498: MINUS
6499: ARRAY
6500: PPUSH
6501: LD_VAR 0 2
6505: PUSH
6506: LD_VAR 0 5
6510: PUSH
6511: LD_INT 1
6513: MINUS
6514: ARRAY
6515: PPUSH
6516: LD_VAR 0 7
6520: PUSH
6521: LD_VAR 0 5
6525: ARRAY
6526: PPUSH
6527: CALL_OW 1
6531: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6532: LD_ADDR_VAR 0 7
6536: PUSH
6537: LD_VAR 0 7
6541: PPUSH
6542: LD_VAR 0 5
6546: PUSH
6547: LD_INT 1
6549: MINUS
6550: PPUSH
6551: LD_VAR 0 6
6555: PPUSH
6556: CALL_OW 1
6560: ST_TO_ADDR
// end ;
6561: GO 6478
6563: POP
6564: POP
// result := s_arr [ 1 ] ;
6565: LD_ADDR_VAR 0 4
6569: PUSH
6570: LD_VAR 0 7
6574: PUSH
6575: LD_INT 1
6577: ARRAY
6578: ST_TO_ADDR
// end ; end ;
6579: LD_VAR 0 4
6583: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6584: LD_INT 0
6586: PPUSH
6587: PPUSH
// if not list then
6588: LD_VAR 0 1
6592: NOT
6593: IFFALSE 6597
// exit ;
6595: GO 6688
// i := list [ pos1 ] ;
6597: LD_ADDR_VAR 0 5
6601: PUSH
6602: LD_VAR 0 1
6606: PUSH
6607: LD_VAR 0 2
6611: ARRAY
6612: ST_TO_ADDR
// if not i then
6613: LD_VAR 0 5
6617: NOT
6618: IFFALSE 6622
// exit ;
6620: GO 6688
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6622: LD_ADDR_VAR 0 1
6626: PUSH
6627: LD_VAR 0 1
6631: PPUSH
6632: LD_VAR 0 2
6636: PPUSH
6637: LD_VAR 0 1
6641: PUSH
6642: LD_VAR 0 3
6646: ARRAY
6647: PPUSH
6648: CALL_OW 1
6652: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6653: LD_ADDR_VAR 0 1
6657: PUSH
6658: LD_VAR 0 1
6662: PPUSH
6663: LD_VAR 0 3
6667: PPUSH
6668: LD_VAR 0 5
6672: PPUSH
6673: CALL_OW 1
6677: ST_TO_ADDR
// result := list ;
6678: LD_ADDR_VAR 0 4
6682: PUSH
6683: LD_VAR 0 1
6687: ST_TO_ADDR
// end ;
6688: LD_VAR 0 4
6692: RET
// export function Add ( list , pos , val ) ; begin
6693: LD_INT 0
6695: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
6696: LD_ADDR_VAR 0 4
6700: PUSH
6701: LD_VAR 0 1
6705: PPUSH
6706: LD_VAR 0 2
6710: PPUSH
6711: LD_VAR 0 3
6715: PPUSH
6716: CALL 6258 0 3
6720: ST_TO_ADDR
6721: LD_VAR 0 4
6725: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6726: LD_INT 0
6728: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6729: LD_ADDR_VAR 0 5
6733: PUSH
6734: LD_VAR 0 1
6738: PPUSH
6739: CALL_OW 250
6743: PPUSH
6744: LD_VAR 0 1
6748: PPUSH
6749: CALL_OW 251
6753: PPUSH
6754: LD_VAR 0 2
6758: PPUSH
6759: LD_VAR 0 3
6763: PPUSH
6764: LD_VAR 0 4
6768: PPUSH
6769: CALL 6779 0 5
6773: ST_TO_ADDR
// end ;
6774: LD_VAR 0 5
6778: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6779: LD_INT 0
6781: PPUSH
6782: PPUSH
6783: PPUSH
6784: PPUSH
// if not list then
6785: LD_VAR 0 3
6789: NOT
6790: IFFALSE 6794
// exit ;
6792: GO 7182
// result := [ ] ;
6794: LD_ADDR_VAR 0 6
6798: PUSH
6799: EMPTY
6800: ST_TO_ADDR
// for i in list do
6801: LD_ADDR_VAR 0 7
6805: PUSH
6806: LD_VAR 0 3
6810: PUSH
6811: FOR_IN
6812: IFFALSE 7014
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6814: LD_ADDR_VAR 0 9
6818: PUSH
6819: LD_VAR 0 7
6823: PPUSH
6824: LD_VAR 0 1
6828: PPUSH
6829: LD_VAR 0 2
6833: PPUSH
6834: CALL_OW 297
6838: ST_TO_ADDR
// if not result then
6839: LD_VAR 0 6
6843: NOT
6844: IFFALSE 6870
// result := [ [ i , tmp ] ] else
6846: LD_ADDR_VAR 0 6
6850: PUSH
6851: LD_VAR 0 7
6855: PUSH
6856: LD_VAR 0 9
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: EMPTY
6866: LIST
6867: ST_TO_ADDR
6868: GO 7012
// begin if result [ result ] [ 2 ] < tmp then
6870: LD_VAR 0 6
6874: PUSH
6875: LD_VAR 0 6
6879: ARRAY
6880: PUSH
6881: LD_INT 2
6883: ARRAY
6884: PUSH
6885: LD_VAR 0 9
6889: LESS
6890: IFFALSE 6932
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6892: LD_ADDR_VAR 0 6
6896: PUSH
6897: LD_VAR 0 6
6901: PPUSH
6902: LD_VAR 0 6
6906: PUSH
6907: LD_INT 1
6909: PLUS
6910: PPUSH
6911: LD_VAR 0 7
6915: PUSH
6916: LD_VAR 0 9
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PPUSH
6925: CALL_OW 2
6929: ST_TO_ADDR
6930: GO 7012
// for j = 1 to result do
6932: LD_ADDR_VAR 0 8
6936: PUSH
6937: DOUBLE
6938: LD_INT 1
6940: DEC
6941: ST_TO_ADDR
6942: LD_VAR 0 6
6946: PUSH
6947: FOR_TO
6948: IFFALSE 7010
// begin if tmp < result [ j ] [ 2 ] then
6950: LD_VAR 0 9
6954: PUSH
6955: LD_VAR 0 6
6959: PUSH
6960: LD_VAR 0 8
6964: ARRAY
6965: PUSH
6966: LD_INT 2
6968: ARRAY
6969: LESS
6970: IFFALSE 7008
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6972: LD_ADDR_VAR 0 6
6976: PUSH
6977: LD_VAR 0 6
6981: PPUSH
6982: LD_VAR 0 8
6986: PPUSH
6987: LD_VAR 0 7
6991: PUSH
6992: LD_VAR 0 9
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PPUSH
7001: CALL_OW 2
7005: ST_TO_ADDR
// break ;
7006: GO 7010
// end ; end ;
7008: GO 6947
7010: POP
7011: POP
// end ; end ;
7012: GO 6811
7014: POP
7015: POP
// if result and not asc then
7016: LD_VAR 0 6
7020: PUSH
7021: LD_VAR 0 4
7025: NOT
7026: AND
7027: IFFALSE 7102
// begin tmp := result ;
7029: LD_ADDR_VAR 0 9
7033: PUSH
7034: LD_VAR 0 6
7038: ST_TO_ADDR
// for i = tmp downto 1 do
7039: LD_ADDR_VAR 0 7
7043: PUSH
7044: DOUBLE
7045: LD_VAR 0 9
7049: INC
7050: ST_TO_ADDR
7051: LD_INT 1
7053: PUSH
7054: FOR_DOWNTO
7055: IFFALSE 7100
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7057: LD_ADDR_VAR 0 6
7061: PUSH
7062: LD_VAR 0 6
7066: PPUSH
7067: LD_VAR 0 9
7071: PUSH
7072: LD_VAR 0 7
7076: MINUS
7077: PUSH
7078: LD_INT 1
7080: PLUS
7081: PPUSH
7082: LD_VAR 0 9
7086: PUSH
7087: LD_VAR 0 7
7091: ARRAY
7092: PPUSH
7093: CALL_OW 1
7097: ST_TO_ADDR
7098: GO 7054
7100: POP
7101: POP
// end ; tmp := [ ] ;
7102: LD_ADDR_VAR 0 9
7106: PUSH
7107: EMPTY
7108: ST_TO_ADDR
// if mode then
7109: LD_VAR 0 5
7113: IFFALSE 7182
// begin for i = 1 to result do
7115: LD_ADDR_VAR 0 7
7119: PUSH
7120: DOUBLE
7121: LD_INT 1
7123: DEC
7124: ST_TO_ADDR
7125: LD_VAR 0 6
7129: PUSH
7130: FOR_TO
7131: IFFALSE 7170
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7133: LD_ADDR_VAR 0 9
7137: PUSH
7138: LD_VAR 0 9
7142: PPUSH
7143: LD_VAR 0 7
7147: PPUSH
7148: LD_VAR 0 6
7152: PUSH
7153: LD_VAR 0 7
7157: ARRAY
7158: PUSH
7159: LD_INT 1
7161: ARRAY
7162: PPUSH
7163: CALL_OW 1
7167: ST_TO_ADDR
7168: GO 7130
7170: POP
7171: POP
// result := tmp ;
7172: LD_ADDR_VAR 0 6
7176: PUSH
7177: LD_VAR 0 9
7181: ST_TO_ADDR
// end ; end ;
7182: LD_VAR 0 6
7186: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7187: LD_INT 0
7189: PPUSH
7190: PPUSH
7191: PPUSH
7192: PPUSH
7193: PPUSH
7194: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7195: LD_ADDR_VAR 0 5
7199: PUSH
7200: LD_INT 0
7202: PUSH
7203: LD_INT 0
7205: PUSH
7206: LD_INT 0
7208: PUSH
7209: EMPTY
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: ST_TO_ADDR
// if not x or not y then
7217: LD_VAR 0 2
7221: NOT
7222: PUSH
7223: LD_VAR 0 3
7227: NOT
7228: OR
7229: IFFALSE 7233
// exit ;
7231: GO 8879
// if not range then
7233: LD_VAR 0 4
7237: NOT
7238: IFFALSE 7248
// range := 10 ;
7240: LD_ADDR_VAR 0 4
7244: PUSH
7245: LD_INT 10
7247: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7248: LD_ADDR_VAR 0 8
7252: PUSH
7253: LD_INT 81
7255: PUSH
7256: LD_VAR 0 1
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 92
7267: PUSH
7268: LD_VAR 0 2
7272: PUSH
7273: LD_VAR 0 3
7277: PUSH
7278: LD_VAR 0 4
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: PUSH
7289: LD_INT 3
7291: PUSH
7292: LD_INT 21
7294: PUSH
7295: LD_INT 3
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: LIST
7310: PPUSH
7311: CALL_OW 69
7315: ST_TO_ADDR
// if not tmp then
7316: LD_VAR 0 8
7320: NOT
7321: IFFALSE 7325
// exit ;
7323: GO 8879
// for i in tmp do
7325: LD_ADDR_VAR 0 6
7329: PUSH
7330: LD_VAR 0 8
7334: PUSH
7335: FOR_IN
7336: IFFALSE 8854
// begin points := [ 0 , 0 , 0 ] ;
7338: LD_ADDR_VAR 0 9
7342: PUSH
7343: LD_INT 0
7345: PUSH
7346: LD_INT 0
7348: PUSH
7349: LD_INT 0
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: LIST
7356: ST_TO_ADDR
// bpoints := 1 ;
7357: LD_ADDR_VAR 0 10
7361: PUSH
7362: LD_INT 1
7364: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7365: LD_VAR 0 6
7369: PPUSH
7370: CALL_OW 247
7374: PUSH
7375: LD_INT 1
7377: DOUBLE
7378: EQUAL
7379: IFTRUE 7383
7381: GO 7961
7383: POP
// begin if GetClass ( i ) = 1 then
7384: LD_VAR 0 6
7388: PPUSH
7389: CALL_OW 257
7393: PUSH
7394: LD_INT 1
7396: EQUAL
7397: IFFALSE 7418
// points := [ 10 , 5 , 3 ] ;
7399: LD_ADDR_VAR 0 9
7403: PUSH
7404: LD_INT 10
7406: PUSH
7407: LD_INT 5
7409: PUSH
7410: LD_INT 3
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7418: LD_VAR 0 6
7422: PPUSH
7423: CALL_OW 257
7427: PUSH
7428: LD_INT 2
7430: PUSH
7431: LD_INT 3
7433: PUSH
7434: LD_INT 4
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: IN
7442: IFFALSE 7463
// points := [ 3 , 2 , 1 ] ;
7444: LD_ADDR_VAR 0 9
7448: PUSH
7449: LD_INT 3
7451: PUSH
7452: LD_INT 2
7454: PUSH
7455: LD_INT 1
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7463: LD_VAR 0 6
7467: PPUSH
7468: CALL_OW 257
7472: PUSH
7473: LD_INT 5
7475: EQUAL
7476: IFFALSE 7497
// points := [ 130 , 5 , 2 ] ;
7478: LD_ADDR_VAR 0 9
7482: PUSH
7483: LD_INT 130
7485: PUSH
7486: LD_INT 5
7488: PUSH
7489: LD_INT 2
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: LIST
7496: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7497: LD_VAR 0 6
7501: PPUSH
7502: CALL_OW 257
7506: PUSH
7507: LD_INT 8
7509: EQUAL
7510: IFFALSE 7531
// points := [ 35 , 35 , 30 ] ;
7512: LD_ADDR_VAR 0 9
7516: PUSH
7517: LD_INT 35
7519: PUSH
7520: LD_INT 35
7522: PUSH
7523: LD_INT 30
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7531: LD_VAR 0 6
7535: PPUSH
7536: CALL_OW 257
7540: PUSH
7541: LD_INT 9
7543: EQUAL
7544: IFFALSE 7565
// points := [ 20 , 55 , 40 ] ;
7546: LD_ADDR_VAR 0 9
7550: PUSH
7551: LD_INT 20
7553: PUSH
7554: LD_INT 55
7556: PUSH
7557: LD_INT 40
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: LIST
7564: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7565: LD_VAR 0 6
7569: PPUSH
7570: CALL_OW 257
7574: PUSH
7575: LD_INT 12
7577: PUSH
7578: LD_INT 16
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: IN
7585: IFFALSE 7606
// points := [ 5 , 3 , 2 ] ;
7587: LD_ADDR_VAR 0 9
7591: PUSH
7592: LD_INT 5
7594: PUSH
7595: LD_INT 3
7597: PUSH
7598: LD_INT 2
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7606: LD_VAR 0 6
7610: PPUSH
7611: CALL_OW 257
7615: PUSH
7616: LD_INT 17
7618: EQUAL
7619: IFFALSE 7640
// points := [ 100 , 50 , 75 ] ;
7621: LD_ADDR_VAR 0 9
7625: PUSH
7626: LD_INT 100
7628: PUSH
7629: LD_INT 50
7631: PUSH
7632: LD_INT 75
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: LIST
7639: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7640: LD_VAR 0 6
7644: PPUSH
7645: CALL_OW 257
7649: PUSH
7650: LD_INT 15
7652: EQUAL
7653: IFFALSE 7674
// points := [ 10 , 5 , 3 ] ;
7655: LD_ADDR_VAR 0 9
7659: PUSH
7660: LD_INT 10
7662: PUSH
7663: LD_INT 5
7665: PUSH
7666: LD_INT 3
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7674: LD_VAR 0 6
7678: PPUSH
7679: CALL_OW 257
7683: PUSH
7684: LD_INT 14
7686: EQUAL
7687: IFFALSE 7708
// points := [ 10 , 0 , 0 ] ;
7689: LD_ADDR_VAR 0 9
7693: PUSH
7694: LD_INT 10
7696: PUSH
7697: LD_INT 0
7699: PUSH
7700: LD_INT 0
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: LIST
7707: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7708: LD_VAR 0 6
7712: PPUSH
7713: CALL_OW 257
7717: PUSH
7718: LD_INT 11
7720: EQUAL
7721: IFFALSE 7742
// points := [ 30 , 10 , 5 ] ;
7723: LD_ADDR_VAR 0 9
7727: PUSH
7728: LD_INT 30
7730: PUSH
7731: LD_INT 10
7733: PUSH
7734: LD_INT 5
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7742: LD_VAR 0 1
7746: PPUSH
7747: LD_INT 5
7749: PPUSH
7750: CALL_OW 321
7754: PUSH
7755: LD_INT 2
7757: EQUAL
7758: IFFALSE 7775
// bpoints := bpoints * 1.8 ;
7760: LD_ADDR_VAR 0 10
7764: PUSH
7765: LD_VAR 0 10
7769: PUSH
7770: LD_REAL  1.80000000000000E+0000
7773: MUL
7774: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7775: LD_VAR 0 6
7779: PPUSH
7780: CALL_OW 257
7784: PUSH
7785: LD_INT 1
7787: PUSH
7788: LD_INT 2
7790: PUSH
7791: LD_INT 3
7793: PUSH
7794: LD_INT 4
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: IN
7803: PUSH
7804: LD_VAR 0 1
7808: PPUSH
7809: LD_INT 51
7811: PPUSH
7812: CALL_OW 321
7816: PUSH
7817: LD_INT 2
7819: EQUAL
7820: AND
7821: IFFALSE 7838
// bpoints := bpoints * 1.2 ;
7823: LD_ADDR_VAR 0 10
7827: PUSH
7828: LD_VAR 0 10
7832: PUSH
7833: LD_REAL  1.20000000000000E+0000
7836: MUL
7837: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7838: LD_VAR 0 6
7842: PPUSH
7843: CALL_OW 257
7847: PUSH
7848: LD_INT 5
7850: PUSH
7851: LD_INT 7
7853: PUSH
7854: LD_INT 9
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: LIST
7861: IN
7862: PUSH
7863: LD_VAR 0 1
7867: PPUSH
7868: LD_INT 52
7870: PPUSH
7871: CALL_OW 321
7875: PUSH
7876: LD_INT 2
7878: EQUAL
7879: AND
7880: IFFALSE 7897
// bpoints := bpoints * 1.5 ;
7882: LD_ADDR_VAR 0 10
7886: PUSH
7887: LD_VAR 0 10
7891: PUSH
7892: LD_REAL  1.50000000000000E+0000
7895: MUL
7896: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7897: LD_VAR 0 1
7901: PPUSH
7902: LD_INT 66
7904: PPUSH
7905: CALL_OW 321
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: IFFALSE 7930
// bpoints := bpoints * 1.1 ;
7915: LD_ADDR_VAR 0 10
7919: PUSH
7920: LD_VAR 0 10
7924: PUSH
7925: LD_REAL  1.10000000000000E+0000
7928: MUL
7929: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7930: LD_ADDR_VAR 0 10
7934: PUSH
7935: LD_VAR 0 10
7939: PUSH
7940: LD_VAR 0 6
7944: PPUSH
7945: LD_INT 1
7947: PPUSH
7948: CALL_OW 259
7952: PUSH
7953: LD_REAL  1.15000000000000E+0000
7956: MUL
7957: MUL
7958: ST_TO_ADDR
// end ; unit_vehicle :
7959: GO 8783
7961: LD_INT 2
7963: DOUBLE
7964: EQUAL
7965: IFTRUE 7969
7967: GO 8771
7969: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7970: LD_VAR 0 6
7974: PPUSH
7975: CALL_OW 264
7979: PUSH
7980: LD_INT 2
7982: PUSH
7983: LD_INT 42
7985: PUSH
7986: LD_INT 24
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: LIST
7993: IN
7994: IFFALSE 8015
// points := [ 25 , 5 , 3 ] ;
7996: LD_ADDR_VAR 0 9
8000: PUSH
8001: LD_INT 25
8003: PUSH
8004: LD_INT 5
8006: PUSH
8007: LD_INT 3
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: LIST
8014: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8015: LD_VAR 0 6
8019: PPUSH
8020: CALL_OW 264
8024: PUSH
8025: LD_INT 4
8027: PUSH
8028: LD_INT 43
8030: PUSH
8031: LD_INT 25
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: IN
8039: IFFALSE 8060
// points := [ 40 , 15 , 5 ] ;
8041: LD_ADDR_VAR 0 9
8045: PUSH
8046: LD_INT 40
8048: PUSH
8049: LD_INT 15
8051: PUSH
8052: LD_INT 5
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: LIST
8059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8060: LD_VAR 0 6
8064: PPUSH
8065: CALL_OW 264
8069: PUSH
8070: LD_INT 3
8072: PUSH
8073: LD_INT 23
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: IN
8080: IFFALSE 8101
// points := [ 7 , 25 , 8 ] ;
8082: LD_ADDR_VAR 0 9
8086: PUSH
8087: LD_INT 7
8089: PUSH
8090: LD_INT 25
8092: PUSH
8093: LD_INT 8
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: LIST
8100: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8101: LD_VAR 0 6
8105: PPUSH
8106: CALL_OW 264
8110: PUSH
8111: LD_INT 5
8113: PUSH
8114: LD_INT 27
8116: PUSH
8117: LD_INT 44
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: LIST
8124: IN
8125: IFFALSE 8146
// points := [ 14 , 50 , 16 ] ;
8127: LD_ADDR_VAR 0 9
8131: PUSH
8132: LD_INT 14
8134: PUSH
8135: LD_INT 50
8137: PUSH
8138: LD_INT 16
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: LIST
8145: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8146: LD_VAR 0 6
8150: PPUSH
8151: CALL_OW 264
8155: PUSH
8156: LD_INT 6
8158: PUSH
8159: LD_INT 46
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: IN
8166: IFFALSE 8187
// points := [ 32 , 120 , 70 ] ;
8168: LD_ADDR_VAR 0 9
8172: PUSH
8173: LD_INT 32
8175: PUSH
8176: LD_INT 120
8178: PUSH
8179: LD_INT 70
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: LIST
8186: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
8187: LD_VAR 0 6
8191: PPUSH
8192: CALL_OW 264
8196: PUSH
8197: LD_INT 7
8199: PUSH
8200: LD_INT 28
8202: PUSH
8203: LD_INT 45
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: IN
8211: IFFALSE 8232
// points := [ 35 , 20 , 45 ] ;
8213: LD_ADDR_VAR 0 9
8217: PUSH
8218: LD_INT 35
8220: PUSH
8221: LD_INT 20
8223: PUSH
8224: LD_INT 45
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: LIST
8231: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8232: LD_VAR 0 6
8236: PPUSH
8237: CALL_OW 264
8241: PUSH
8242: LD_INT 47
8244: PUSH
8245: EMPTY
8246: LIST
8247: IN
8248: IFFALSE 8269
// points := [ 67 , 45 , 75 ] ;
8250: LD_ADDR_VAR 0 9
8254: PUSH
8255: LD_INT 67
8257: PUSH
8258: LD_INT 45
8260: PUSH
8261: LD_INT 75
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: LIST
8268: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8269: LD_VAR 0 6
8273: PPUSH
8274: CALL_OW 264
8278: PUSH
8279: LD_INT 26
8281: PUSH
8282: EMPTY
8283: LIST
8284: IN
8285: IFFALSE 8306
// points := [ 120 , 30 , 80 ] ;
8287: LD_ADDR_VAR 0 9
8291: PUSH
8292: LD_INT 120
8294: PUSH
8295: LD_INT 30
8297: PUSH
8298: LD_INT 80
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: LIST
8305: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8306: LD_VAR 0 6
8310: PPUSH
8311: CALL_OW 264
8315: PUSH
8316: LD_INT 22
8318: PUSH
8319: EMPTY
8320: LIST
8321: IN
8322: IFFALSE 8343
// points := [ 40 , 1 , 1 ] ;
8324: LD_ADDR_VAR 0 9
8328: PUSH
8329: LD_INT 40
8331: PUSH
8332: LD_INT 1
8334: PUSH
8335: LD_INT 1
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8343: LD_VAR 0 6
8347: PPUSH
8348: CALL_OW 264
8352: PUSH
8353: LD_INT 29
8355: PUSH
8356: EMPTY
8357: LIST
8358: IN
8359: IFFALSE 8380
// points := [ 70 , 200 , 400 ] ;
8361: LD_ADDR_VAR 0 9
8365: PUSH
8366: LD_INT 70
8368: PUSH
8369: LD_INT 200
8371: PUSH
8372: LD_INT 400
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: LIST
8379: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8380: LD_VAR 0 6
8384: PPUSH
8385: CALL_OW 264
8389: PUSH
8390: LD_INT 14
8392: PUSH
8393: LD_INT 53
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: IN
8400: IFFALSE 8421
// points := [ 40 , 10 , 20 ] ;
8402: LD_ADDR_VAR 0 9
8406: PUSH
8407: LD_INT 40
8409: PUSH
8410: LD_INT 10
8412: PUSH
8413: LD_INT 20
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: LIST
8420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8421: LD_VAR 0 6
8425: PPUSH
8426: CALL_OW 264
8430: PUSH
8431: LD_INT 9
8433: PUSH
8434: EMPTY
8435: LIST
8436: IN
8437: IFFALSE 8458
// points := [ 5 , 70 , 20 ] ;
8439: LD_ADDR_VAR 0 9
8443: PUSH
8444: LD_INT 5
8446: PUSH
8447: LD_INT 70
8449: PUSH
8450: LD_INT 20
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: LIST
8457: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8458: LD_VAR 0 6
8462: PPUSH
8463: CALL_OW 264
8467: PUSH
8468: LD_INT 10
8470: PUSH
8471: EMPTY
8472: LIST
8473: IN
8474: IFFALSE 8495
// points := [ 35 , 110 , 70 ] ;
8476: LD_ADDR_VAR 0 9
8480: PUSH
8481: LD_INT 35
8483: PUSH
8484: LD_INT 110
8486: PUSH
8487: LD_INT 70
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: LIST
8494: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8495: LD_VAR 0 6
8499: PPUSH
8500: CALL_OW 265
8504: PUSH
8505: LD_INT 25
8507: EQUAL
8508: IFFALSE 8529
// points := [ 80 , 65 , 100 ] ;
8510: LD_ADDR_VAR 0 9
8514: PUSH
8515: LD_INT 80
8517: PUSH
8518: LD_INT 65
8520: PUSH
8521: LD_INT 100
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: LIST
8528: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8529: LD_VAR 0 6
8533: PPUSH
8534: CALL_OW 263
8538: PUSH
8539: LD_INT 1
8541: EQUAL
8542: IFFALSE 8577
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8544: LD_ADDR_VAR 0 10
8548: PUSH
8549: LD_VAR 0 10
8553: PUSH
8554: LD_VAR 0 6
8558: PPUSH
8559: CALL_OW 311
8563: PPUSH
8564: LD_INT 3
8566: PPUSH
8567: CALL_OW 259
8571: PUSH
8572: LD_INT 4
8574: MUL
8575: MUL
8576: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8577: LD_VAR 0 6
8581: PPUSH
8582: CALL_OW 263
8586: PUSH
8587: LD_INT 2
8589: EQUAL
8590: IFFALSE 8641
// begin j := IsControledBy ( i ) ;
8592: LD_ADDR_VAR 0 7
8596: PUSH
8597: LD_VAR 0 6
8601: PPUSH
8602: CALL_OW 312
8606: ST_TO_ADDR
// if j then
8607: LD_VAR 0 7
8611: IFFALSE 8641
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8613: LD_ADDR_VAR 0 10
8617: PUSH
8618: LD_VAR 0 10
8622: PUSH
8623: LD_VAR 0 7
8627: PPUSH
8628: LD_INT 3
8630: PPUSH
8631: CALL_OW 259
8635: PUSH
8636: LD_INT 3
8638: MUL
8639: MUL
8640: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8641: LD_VAR 0 6
8645: PPUSH
8646: CALL_OW 264
8650: PUSH
8651: LD_INT 5
8653: PUSH
8654: LD_INT 6
8656: PUSH
8657: LD_INT 46
8659: PUSH
8660: LD_INT 44
8662: PUSH
8663: LD_INT 47
8665: PUSH
8666: LD_INT 45
8668: PUSH
8669: LD_INT 28
8671: PUSH
8672: LD_INT 7
8674: PUSH
8675: LD_INT 27
8677: PUSH
8678: LD_INT 29
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: IN
8693: PUSH
8694: LD_VAR 0 1
8698: PPUSH
8699: LD_INT 52
8701: PPUSH
8702: CALL_OW 321
8706: PUSH
8707: LD_INT 2
8709: EQUAL
8710: AND
8711: IFFALSE 8728
// bpoints := bpoints * 1.2 ;
8713: LD_ADDR_VAR 0 10
8717: PUSH
8718: LD_VAR 0 10
8722: PUSH
8723: LD_REAL  1.20000000000000E+0000
8726: MUL
8727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8728: LD_VAR 0 6
8732: PPUSH
8733: CALL_OW 264
8737: PUSH
8738: LD_INT 6
8740: PUSH
8741: LD_INT 46
8743: PUSH
8744: LD_INT 47
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: LIST
8751: IN
8752: IFFALSE 8769
// bpoints := bpoints * 1.2 ;
8754: LD_ADDR_VAR 0 10
8758: PUSH
8759: LD_VAR 0 10
8763: PUSH
8764: LD_REAL  1.20000000000000E+0000
8767: MUL
8768: ST_TO_ADDR
// end ; unit_building :
8769: GO 8783
8771: LD_INT 3
8773: DOUBLE
8774: EQUAL
8775: IFTRUE 8779
8777: GO 8782
8779: POP
// ; end ;
8780: GO 8783
8782: POP
// for j = 1 to 3 do
8783: LD_ADDR_VAR 0 7
8787: PUSH
8788: DOUBLE
8789: LD_INT 1
8791: DEC
8792: ST_TO_ADDR
8793: LD_INT 3
8795: PUSH
8796: FOR_TO
8797: IFFALSE 8850
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8799: LD_ADDR_VAR 0 5
8803: PUSH
8804: LD_VAR 0 5
8808: PPUSH
8809: LD_VAR 0 7
8813: PPUSH
8814: LD_VAR 0 5
8818: PUSH
8819: LD_VAR 0 7
8823: ARRAY
8824: PUSH
8825: LD_VAR 0 9
8829: PUSH
8830: LD_VAR 0 7
8834: ARRAY
8835: PUSH
8836: LD_VAR 0 10
8840: MUL
8841: PLUS
8842: PPUSH
8843: CALL_OW 1
8847: ST_TO_ADDR
8848: GO 8796
8850: POP
8851: POP
// end ;
8852: GO 7335
8854: POP
8855: POP
// result := Replace ( result , 4 , tmp ) ;
8856: LD_ADDR_VAR 0 5
8860: PUSH
8861: LD_VAR 0 5
8865: PPUSH
8866: LD_INT 4
8868: PPUSH
8869: LD_VAR 0 8
8873: PPUSH
8874: CALL_OW 1
8878: ST_TO_ADDR
// end ;
8879: LD_VAR 0 5
8883: RET
// export function DangerAtRange ( unit , range ) ; begin
8884: LD_INT 0
8886: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8887: LD_ADDR_VAR 0 3
8891: PUSH
8892: LD_VAR 0 1
8896: PPUSH
8897: CALL_OW 255
8901: PPUSH
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 250
8911: PPUSH
8912: LD_VAR 0 1
8916: PPUSH
8917: CALL_OW 251
8921: PPUSH
8922: LD_VAR 0 2
8926: PPUSH
8927: CALL 7187 0 4
8931: ST_TO_ADDR
// end ;
8932: LD_VAR 0 3
8936: RET
// export function IsExtension ( b ) ; begin
8937: LD_INT 0
8939: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8940: LD_ADDR_VAR 0 2
8944: PUSH
8945: LD_VAR 0 1
8949: PPUSH
8950: CALL_OW 266
8954: PUSH
8955: LD_INT 23
8957: PUSH
8958: LD_INT 20
8960: PUSH
8961: LD_INT 22
8963: PUSH
8964: LD_INT 17
8966: PUSH
8967: LD_INT 24
8969: PUSH
8970: LD_INT 21
8972: PUSH
8973: LD_INT 19
8975: PUSH
8976: LD_INT 16
8978: PUSH
8979: LD_INT 25
8981: PUSH
8982: LD_INT 18
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: IN
8997: ST_TO_ADDR
// end ;
8998: LD_VAR 0 2
9002: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
9003: LD_INT 0
9005: PPUSH
9006: PPUSH
9007: PPUSH
// result := [ ] ;
9008: LD_ADDR_VAR 0 2
9012: PUSH
9013: EMPTY
9014: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
9015: LD_ADDR_VAR 0 3
9019: PUSH
9020: LD_INT 21
9022: PUSH
9023: LD_INT 3
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: ST_TO_ADDR
// if not tmp then
9035: LD_VAR 0 3
9039: NOT
9040: IFFALSE 9044
// exit ;
9042: GO 9094
// for i in tmp do
9044: LD_ADDR_VAR 0 4
9048: PUSH
9049: LD_VAR 0 3
9053: PUSH
9054: FOR_IN
9055: IFFALSE 9092
// if GetBase ( i ) = base then
9057: LD_VAR 0 4
9061: PPUSH
9062: CALL_OW 274
9066: PUSH
9067: LD_VAR 0 1
9071: EQUAL
9072: IFFALSE 9090
// result := result ^ i ;
9074: LD_ADDR_VAR 0 2
9078: PUSH
9079: LD_VAR 0 2
9083: PUSH
9084: LD_VAR 0 4
9088: ADD
9089: ST_TO_ADDR
9090: GO 9054
9092: POP
9093: POP
// end ;
9094: LD_VAR 0 2
9098: RET
// export function ComComplete ( unit , b ) ; var i ; begin
9099: LD_INT 0
9101: PPUSH
9102: PPUSH
// if BuildingStatus ( b ) = bs_build then
9103: LD_VAR 0 2
9107: PPUSH
9108: CALL_OW 461
9112: PUSH
9113: LD_INT 1
9115: EQUAL
9116: IFFALSE 9176
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9118: LD_VAR 0 1
9122: PPUSH
9123: LD_STRING h
9125: PUSH
9126: LD_VAR 0 2
9130: PPUSH
9131: CALL_OW 250
9135: PUSH
9136: LD_VAR 0 2
9140: PPUSH
9141: CALL_OW 251
9145: PUSH
9146: LD_VAR 0 2
9150: PUSH
9151: LD_INT 0
9153: PUSH
9154: LD_INT 0
9156: PUSH
9157: LD_INT 0
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: PUSH
9169: EMPTY
9170: LIST
9171: PPUSH
9172: CALL_OW 446
// end ;
9176: LD_VAR 0 3
9180: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9181: LD_INT 0
9183: PPUSH
9184: PPUSH
9185: PPUSH
9186: PPUSH
9187: PPUSH
9188: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
9189: LD_VAR 0 1
9193: NOT
9194: PUSH
9195: LD_VAR 0 1
9199: PPUSH
9200: CALL_OW 263
9204: PUSH
9205: LD_INT 2
9207: EQUAL
9208: NOT
9209: OR
9210: IFFALSE 9214
// exit ;
9212: GO 9530
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9214: LD_ADDR_VAR 0 6
9218: PUSH
9219: LD_INT 22
9221: PUSH
9222: LD_VAR 0 1
9226: PPUSH
9227: CALL_OW 255
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PUSH
9236: LD_INT 2
9238: PUSH
9239: LD_INT 30
9241: PUSH
9242: LD_INT 36
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: PUSH
9249: LD_INT 34
9251: PUSH
9252: LD_INT 31
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: PPUSH
9268: CALL_OW 69
9272: ST_TO_ADDR
// if not tmp then
9273: LD_VAR 0 6
9277: NOT
9278: IFFALSE 9282
// exit ;
9280: GO 9530
// result := [ ] ;
9282: LD_ADDR_VAR 0 2
9286: PUSH
9287: EMPTY
9288: ST_TO_ADDR
// for i in tmp do
9289: LD_ADDR_VAR 0 3
9293: PUSH
9294: LD_VAR 0 6
9298: PUSH
9299: FOR_IN
9300: IFFALSE 9371
// begin t := UnitsInside ( i ) ;
9302: LD_ADDR_VAR 0 4
9306: PUSH
9307: LD_VAR 0 3
9311: PPUSH
9312: CALL_OW 313
9316: ST_TO_ADDR
// if t then
9317: LD_VAR 0 4
9321: IFFALSE 9369
// for j in t do
9323: LD_ADDR_VAR 0 7
9327: PUSH
9328: LD_VAR 0 4
9332: PUSH
9333: FOR_IN
9334: IFFALSE 9367
// result := Insert ( result , result + 1 , j ) ;
9336: LD_ADDR_VAR 0 2
9340: PUSH
9341: LD_VAR 0 2
9345: PPUSH
9346: LD_VAR 0 2
9350: PUSH
9351: LD_INT 1
9353: PLUS
9354: PPUSH
9355: LD_VAR 0 7
9359: PPUSH
9360: CALL_OW 2
9364: ST_TO_ADDR
9365: GO 9333
9367: POP
9368: POP
// end ;
9369: GO 9299
9371: POP
9372: POP
// if not result then
9373: LD_VAR 0 2
9377: NOT
9378: IFFALSE 9382
// exit ;
9380: GO 9530
// mech := result [ 1 ] ;
9382: LD_ADDR_VAR 0 5
9386: PUSH
9387: LD_VAR 0 2
9391: PUSH
9392: LD_INT 1
9394: ARRAY
9395: ST_TO_ADDR
// if result > 1 then
9396: LD_VAR 0 2
9400: PUSH
9401: LD_INT 1
9403: GREATER
9404: IFFALSE 9516
// for i = 2 to result do
9406: LD_ADDR_VAR 0 3
9410: PUSH
9411: DOUBLE
9412: LD_INT 2
9414: DEC
9415: ST_TO_ADDR
9416: LD_VAR 0 2
9420: PUSH
9421: FOR_TO
9422: IFFALSE 9514
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9424: LD_ADDR_VAR 0 4
9428: PUSH
9429: LD_VAR 0 2
9433: PUSH
9434: LD_VAR 0 3
9438: ARRAY
9439: PPUSH
9440: LD_INT 3
9442: PPUSH
9443: CALL_OW 259
9447: PUSH
9448: LD_VAR 0 2
9452: PUSH
9453: LD_VAR 0 3
9457: ARRAY
9458: PPUSH
9459: CALL_OW 432
9463: MINUS
9464: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9465: LD_VAR 0 4
9469: PUSH
9470: LD_VAR 0 5
9474: PPUSH
9475: LD_INT 3
9477: PPUSH
9478: CALL_OW 259
9482: PUSH
9483: LD_VAR 0 5
9487: PPUSH
9488: CALL_OW 432
9492: MINUS
9493: GREATEREQUAL
9494: IFFALSE 9512
// mech := result [ i ] ;
9496: LD_ADDR_VAR 0 5
9500: PUSH
9501: LD_VAR 0 2
9505: PUSH
9506: LD_VAR 0 3
9510: ARRAY
9511: ST_TO_ADDR
// end ;
9512: GO 9421
9514: POP
9515: POP
// ComLinkTo ( vehicle , mech ) ;
9516: LD_VAR 0 1
9520: PPUSH
9521: LD_VAR 0 5
9525: PPUSH
9526: CALL_OW 135
// end ;
9530: LD_VAR 0 2
9534: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
9535: LD_INT 0
9537: PPUSH
9538: PPUSH
9539: PPUSH
9540: PPUSH
9541: PPUSH
9542: PPUSH
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
// result := [ ] ;
9549: LD_ADDR_VAR 0 6
9553: PUSH
9554: EMPTY
9555: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9556: LD_VAR 0 1
9560: PPUSH
9561: CALL_OW 266
9565: PUSH
9566: LD_INT 0
9568: PUSH
9569: LD_INT 1
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: IN
9576: NOT
9577: IFFALSE 9581
// exit ;
9579: GO 10990
// if name then
9581: LD_VAR 0 2
9585: IFFALSE 9601
// SetBName ( base_dep , name ) ;
9587: LD_VAR 0 1
9591: PPUSH
9592: LD_VAR 0 2
9596: PPUSH
9597: CALL_OW 500
// base := GetBase ( base_dep ) ;
9601: LD_ADDR_VAR 0 14
9605: PUSH
9606: LD_VAR 0 1
9610: PPUSH
9611: CALL_OW 274
9615: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9616: LD_ADDR_VAR 0 15
9620: PUSH
9621: LD_VAR 0 1
9625: PPUSH
9626: CALL_OW 255
9630: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9631: LD_ADDR_VAR 0 16
9635: PUSH
9636: LD_VAR 0 1
9640: PPUSH
9641: CALL_OW 248
9645: ST_TO_ADDR
// if sources then
9646: LD_VAR 0 4
9650: IFFALSE 9697
// for i = 1 to 3 do
9652: LD_ADDR_VAR 0 7
9656: PUSH
9657: DOUBLE
9658: LD_INT 1
9660: DEC
9661: ST_TO_ADDR
9662: LD_INT 3
9664: PUSH
9665: FOR_TO
9666: IFFALSE 9695
// AddResourceType ( base , i , sources [ i ] ) ;
9668: LD_VAR 0 14
9672: PPUSH
9673: LD_VAR 0 7
9677: PPUSH
9678: LD_VAR 0 4
9682: PUSH
9683: LD_VAR 0 7
9687: ARRAY
9688: PPUSH
9689: CALL_OW 276
9693: GO 9665
9695: POP
9696: POP
// buildings := GetBaseBuildings ( base ) ;
9697: LD_ADDR_VAR 0 17
9701: PUSH
9702: LD_VAR 0 14
9706: PPUSH
9707: CALL 9003 0 1
9711: ST_TO_ADDR
// InitHc ;
9712: CALL_OW 19
// InitUc ;
9716: CALL_OW 18
// uc_side := side ;
9720: LD_ADDR_OWVAR 20
9724: PUSH
9725: LD_VAR 0 15
9729: ST_TO_ADDR
// uc_nation := nation ;
9730: LD_ADDR_OWVAR 21
9734: PUSH
9735: LD_VAR 0 16
9739: ST_TO_ADDR
// if buildings then
9740: LD_VAR 0 17
9744: IFFALSE 10849
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9746: LD_VAR 0 17
9750: PPUSH
9751: LD_INT 2
9753: PUSH
9754: LD_INT 30
9756: PUSH
9757: LD_INT 32
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 30
9766: PUSH
9767: LD_INT 33
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: LIST
9778: PPUSH
9779: CALL_OW 72
9783: IFFALSE 9866
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9785: LD_ADDR_VAR 0 7
9789: PUSH
9790: LD_VAR 0 17
9794: PPUSH
9795: LD_INT 2
9797: PUSH
9798: LD_INT 30
9800: PUSH
9801: LD_INT 32
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 30
9810: PUSH
9811: LD_INT 33
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: LIST
9822: PPUSH
9823: CALL_OW 72
9827: PUSH
9828: FOR_IN
9829: IFFALSE 9864
// begin if not GetBWeapon ( i ) then
9831: LD_VAR 0 7
9835: PPUSH
9836: CALL_OW 269
9840: NOT
9841: IFFALSE 9862
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
9843: LD_VAR 0 7
9847: PPUSH
9848: LD_VAR 0 7
9852: PPUSH
9853: CALL 10995 0 1
9857: PPUSH
9858: CALL_OW 431
// end ;
9862: GO 9828
9864: POP
9865: POP
// end ; for i = 1 to personel do
9866: LD_ADDR_VAR 0 7
9870: PUSH
9871: DOUBLE
9872: LD_INT 1
9874: DEC
9875: ST_TO_ADDR
9876: LD_VAR 0 5
9880: PUSH
9881: FOR_TO
9882: IFFALSE 10829
// begin if i > 4 then
9884: LD_VAR 0 7
9888: PUSH
9889: LD_INT 4
9891: GREATER
9892: IFFALSE 9896
// break ;
9894: GO 10829
// case i of 1 :
9896: LD_VAR 0 7
9900: PUSH
9901: LD_INT 1
9903: DOUBLE
9904: EQUAL
9905: IFTRUE 9909
9907: GO 9982
9909: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9910: LD_ADDR_VAR 0 11
9914: PUSH
9915: LD_VAR 0 17
9919: PPUSH
9920: LD_INT 22
9922: PUSH
9923: LD_VAR 0 15
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 2
9934: PUSH
9935: LD_INT 30
9937: PUSH
9938: LD_INT 32
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: LD_INT 30
9947: PUSH
9948: LD_INT 4
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: LD_INT 30
9957: PUSH
9958: LD_INT 5
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PPUSH
9975: CALL_OW 72
9979: ST_TO_ADDR
9980: GO 10204
9982: LD_INT 2
9984: DOUBLE
9985: EQUAL
9986: IFTRUE 9990
9988: GO 10052
9990: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9991: LD_ADDR_VAR 0 11
9995: PUSH
9996: LD_VAR 0 17
10000: PPUSH
10001: LD_INT 22
10003: PUSH
10004: LD_VAR 0 15
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: LD_INT 2
10015: PUSH
10016: LD_INT 30
10018: PUSH
10019: LD_INT 0
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PUSH
10026: LD_INT 30
10028: PUSH
10029: LD_INT 1
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: LIST
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PPUSH
10045: CALL_OW 72
10049: ST_TO_ADDR
10050: GO 10204
10052: LD_INT 3
10054: DOUBLE
10055: EQUAL
10056: IFTRUE 10060
10058: GO 10122
10060: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10061: LD_ADDR_VAR 0 11
10065: PUSH
10066: LD_VAR 0 17
10070: PPUSH
10071: LD_INT 22
10073: PUSH
10074: LD_VAR 0 15
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: LD_INT 2
10085: PUSH
10086: LD_INT 30
10088: PUSH
10089: LD_INT 2
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 30
10098: PUSH
10099: LD_INT 3
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: LIST
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PPUSH
10115: CALL_OW 72
10119: ST_TO_ADDR
10120: GO 10204
10122: LD_INT 4
10124: DOUBLE
10125: EQUAL
10126: IFTRUE 10130
10128: GO 10203
10130: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10131: LD_ADDR_VAR 0 11
10135: PUSH
10136: LD_VAR 0 17
10140: PPUSH
10141: LD_INT 22
10143: PUSH
10144: LD_VAR 0 15
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: LD_INT 2
10155: PUSH
10156: LD_INT 30
10158: PUSH
10159: LD_INT 6
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: LD_INT 30
10168: PUSH
10169: LD_INT 7
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: LD_INT 30
10178: PUSH
10179: LD_INT 8
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: ST_TO_ADDR
10201: GO 10204
10203: POP
// if not f then
10204: LD_VAR 0 11
10208: NOT
10209: IFFALSE 10213
// continue ;
10211: GO 9881
// x := personel [ i ] ;
10213: LD_ADDR_VAR 0 12
10217: PUSH
10218: LD_VAR 0 5
10222: PUSH
10223: LD_VAR 0 7
10227: ARRAY
10228: ST_TO_ADDR
// if x = - 1 then
10229: LD_VAR 0 12
10233: PUSH
10234: LD_INT 1
10236: NEG
10237: EQUAL
10238: IFFALSE 10447
// begin for j in f do
10240: LD_ADDR_VAR 0 8
10244: PUSH
10245: LD_VAR 0 11
10249: PUSH
10250: FOR_IN
10251: IFFALSE 10443
// repeat InitHc ;
10253: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10257: LD_VAR 0 8
10261: PPUSH
10262: CALL_OW 266
10266: PUSH
10267: LD_INT 5
10269: EQUAL
10270: IFFALSE 10340
// begin if UnitsInside ( j ) < 3 then
10272: LD_VAR 0 8
10276: PPUSH
10277: CALL_OW 313
10281: PUSH
10282: LD_INT 3
10284: LESS
10285: IFFALSE 10321
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10287: LD_INT 0
10289: PPUSH
10290: LD_INT 5
10292: PUSH
10293: LD_INT 8
10295: PUSH
10296: LD_INT 9
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: LIST
10303: PUSH
10304: LD_VAR 0 16
10308: ARRAY
10309: PPUSH
10310: LD_VAR 0 3
10314: PPUSH
10315: CALL_OW 380
10319: GO 10338
// PrepareHuman ( false , i , skill ) ;
10321: LD_INT 0
10323: PPUSH
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_VAR 0 3
10333: PPUSH
10334: CALL_OW 380
// end else
10338: GO 10357
// PrepareHuman ( false , i , skill ) ;
10340: LD_INT 0
10342: PPUSH
10343: LD_VAR 0 7
10347: PPUSH
10348: LD_VAR 0 3
10352: PPUSH
10353: CALL_OW 380
// un := CreateHuman ;
10357: LD_ADDR_VAR 0 13
10361: PUSH
10362: CALL_OW 44
10366: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10367: LD_ADDR_VAR 0 6
10371: PUSH
10372: LD_VAR 0 6
10376: PPUSH
10377: LD_INT 1
10379: PPUSH
10380: LD_VAR 0 13
10384: PPUSH
10385: CALL_OW 2
10389: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10390: LD_VAR 0 13
10394: PPUSH
10395: LD_VAR 0 8
10399: PPUSH
10400: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10404: LD_VAR 0 8
10408: PPUSH
10409: CALL_OW 313
10413: PUSH
10414: LD_INT 6
10416: EQUAL
10417: PUSH
10418: LD_VAR 0 8
10422: PPUSH
10423: CALL_OW 266
10427: PUSH
10428: LD_INT 32
10430: PUSH
10431: LD_INT 31
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: IN
10438: OR
10439: IFFALSE 10253
10441: GO 10250
10443: POP
10444: POP
// end else
10445: GO 10827
// for j = 1 to x do
10447: LD_ADDR_VAR 0 8
10451: PUSH
10452: DOUBLE
10453: LD_INT 1
10455: DEC
10456: ST_TO_ADDR
10457: LD_VAR 0 12
10461: PUSH
10462: FOR_TO
10463: IFFALSE 10825
// begin InitHc ;
10465: CALL_OW 19
// if not f then
10469: LD_VAR 0 11
10473: NOT
10474: IFFALSE 10563
// begin PrepareHuman ( false , i , skill ) ;
10476: LD_INT 0
10478: PPUSH
10479: LD_VAR 0 7
10483: PPUSH
10484: LD_VAR 0 3
10488: PPUSH
10489: CALL_OW 380
// un := CreateHuman ;
10493: LD_ADDR_VAR 0 13
10497: PUSH
10498: CALL_OW 44
10502: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10503: LD_ADDR_VAR 0 6
10507: PUSH
10508: LD_VAR 0 6
10512: PPUSH
10513: LD_INT 1
10515: PPUSH
10516: LD_VAR 0 13
10520: PPUSH
10521: CALL_OW 2
10525: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10526: LD_VAR 0 13
10530: PPUSH
10531: LD_VAR 0 1
10535: PPUSH
10536: CALL_OW 250
10540: PPUSH
10541: LD_VAR 0 1
10545: PPUSH
10546: CALL_OW 251
10550: PPUSH
10551: LD_INT 10
10553: PPUSH
10554: LD_INT 0
10556: PPUSH
10557: CALL_OW 50
// continue ;
10561: GO 10462
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10563: LD_VAR 0 11
10567: PUSH
10568: LD_INT 1
10570: ARRAY
10571: PPUSH
10572: CALL_OW 313
10576: PUSH
10577: LD_VAR 0 11
10581: PUSH
10582: LD_INT 1
10584: ARRAY
10585: PPUSH
10586: CALL_OW 266
10590: PUSH
10591: LD_INT 32
10593: PUSH
10594: LD_INT 31
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: IN
10601: AND
10602: PUSH
10603: LD_VAR 0 11
10607: PUSH
10608: LD_INT 1
10610: ARRAY
10611: PPUSH
10612: CALL_OW 313
10616: PUSH
10617: LD_INT 6
10619: EQUAL
10620: OR
10621: IFFALSE 10641
// f := Delete ( f , 1 ) ;
10623: LD_ADDR_VAR 0 11
10627: PUSH
10628: LD_VAR 0 11
10632: PPUSH
10633: LD_INT 1
10635: PPUSH
10636: CALL_OW 3
10640: ST_TO_ADDR
// if not f then
10641: LD_VAR 0 11
10645: NOT
10646: IFFALSE 10664
// begin x := x + 2 ;
10648: LD_ADDR_VAR 0 12
10652: PUSH
10653: LD_VAR 0 12
10657: PUSH
10658: LD_INT 2
10660: PLUS
10661: ST_TO_ADDR
// continue ;
10662: GO 10462
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10664: LD_VAR 0 11
10668: PUSH
10669: LD_INT 1
10671: ARRAY
10672: PPUSH
10673: CALL_OW 266
10677: PUSH
10678: LD_INT 5
10680: EQUAL
10681: IFFALSE 10755
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10683: LD_VAR 0 11
10687: PUSH
10688: LD_INT 1
10690: ARRAY
10691: PPUSH
10692: CALL_OW 313
10696: PUSH
10697: LD_INT 3
10699: LESS
10700: IFFALSE 10736
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10702: LD_INT 0
10704: PPUSH
10705: LD_INT 5
10707: PUSH
10708: LD_INT 8
10710: PUSH
10711: LD_INT 9
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: LIST
10718: PUSH
10719: LD_VAR 0 16
10723: ARRAY
10724: PPUSH
10725: LD_VAR 0 3
10729: PPUSH
10730: CALL_OW 380
10734: GO 10753
// PrepareHuman ( false , i , skill ) ;
10736: LD_INT 0
10738: PPUSH
10739: LD_VAR 0 7
10743: PPUSH
10744: LD_VAR 0 3
10748: PPUSH
10749: CALL_OW 380
// end else
10753: GO 10772
// PrepareHuman ( false , i , skill ) ;
10755: LD_INT 0
10757: PPUSH
10758: LD_VAR 0 7
10762: PPUSH
10763: LD_VAR 0 3
10767: PPUSH
10768: CALL_OW 380
// un := CreateHuman ;
10772: LD_ADDR_VAR 0 13
10776: PUSH
10777: CALL_OW 44
10781: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10782: LD_ADDR_VAR 0 6
10786: PUSH
10787: LD_VAR 0 6
10791: PPUSH
10792: LD_INT 1
10794: PPUSH
10795: LD_VAR 0 13
10799: PPUSH
10800: CALL_OW 2
10804: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10805: LD_VAR 0 13
10809: PPUSH
10810: LD_VAR 0 11
10814: PUSH
10815: LD_INT 1
10817: ARRAY
10818: PPUSH
10819: CALL_OW 52
// end ;
10823: GO 10462
10825: POP
10826: POP
// end ;
10827: GO 9881
10829: POP
10830: POP
// result := result ^ buildings ;
10831: LD_ADDR_VAR 0 6
10835: PUSH
10836: LD_VAR 0 6
10840: PUSH
10841: LD_VAR 0 17
10845: ADD
10846: ST_TO_ADDR
// end else
10847: GO 10990
// begin for i = 1 to personel do
10849: LD_ADDR_VAR 0 7
10853: PUSH
10854: DOUBLE
10855: LD_INT 1
10857: DEC
10858: ST_TO_ADDR
10859: LD_VAR 0 5
10863: PUSH
10864: FOR_TO
10865: IFFALSE 10988
// begin if i > 4 then
10867: LD_VAR 0 7
10871: PUSH
10872: LD_INT 4
10874: GREATER
10875: IFFALSE 10879
// break ;
10877: GO 10988
// x := personel [ i ] ;
10879: LD_ADDR_VAR 0 12
10883: PUSH
10884: LD_VAR 0 5
10888: PUSH
10889: LD_VAR 0 7
10893: ARRAY
10894: ST_TO_ADDR
// if x = - 1 then
10895: LD_VAR 0 12
10899: PUSH
10900: LD_INT 1
10902: NEG
10903: EQUAL
10904: IFFALSE 10908
// continue ;
10906: GO 10864
// PrepareHuman ( false , i , skill ) ;
10908: LD_INT 0
10910: PPUSH
10911: LD_VAR 0 7
10915: PPUSH
10916: LD_VAR 0 3
10920: PPUSH
10921: CALL_OW 380
// un := CreateHuman ;
10925: LD_ADDR_VAR 0 13
10929: PUSH
10930: CALL_OW 44
10934: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10935: LD_VAR 0 13
10939: PPUSH
10940: LD_VAR 0 1
10944: PPUSH
10945: CALL_OW 250
10949: PPUSH
10950: LD_VAR 0 1
10954: PPUSH
10955: CALL_OW 251
10959: PPUSH
10960: LD_INT 10
10962: PPUSH
10963: LD_INT 0
10965: PPUSH
10966: CALL_OW 50
// result := result ^ un ;
10970: LD_ADDR_VAR 0 6
10974: PUSH
10975: LD_VAR 0 6
10979: PUSH
10980: LD_VAR 0 13
10984: ADD
10985: ST_TO_ADDR
// end ;
10986: GO 10864
10988: POP
10989: POP
// end ; end ;
10990: LD_VAR 0 6
10994: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10995: LD_INT 0
10997: PPUSH
10998: PPUSH
10999: PPUSH
11000: PPUSH
11001: PPUSH
11002: PPUSH
11003: PPUSH
11004: PPUSH
11005: PPUSH
11006: PPUSH
11007: PPUSH
11008: PPUSH
11009: PPUSH
11010: PPUSH
11011: PPUSH
11012: PPUSH
// result := false ;
11013: LD_ADDR_VAR 0 2
11017: PUSH
11018: LD_INT 0
11020: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11021: LD_VAR 0 1
11025: NOT
11026: PUSH
11027: LD_VAR 0 1
11031: PPUSH
11032: CALL_OW 266
11036: PUSH
11037: LD_INT 32
11039: PUSH
11040: LD_INT 33
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: IN
11047: NOT
11048: OR
11049: IFFALSE 11053
// exit ;
11051: GO 12286
// nat := GetNation ( tower ) ;
11053: LD_ADDR_VAR 0 11
11057: PUSH
11058: LD_VAR 0 1
11062: PPUSH
11063: CALL_OW 248
11067: ST_TO_ADDR
// side := GetSide ( tower ) ;
11068: LD_ADDR_VAR 0 15
11072: PUSH
11073: LD_VAR 0 1
11077: PPUSH
11078: CALL_OW 255
11082: ST_TO_ADDR
// x := GetX ( tower ) ;
11083: LD_ADDR_VAR 0 9
11087: PUSH
11088: LD_VAR 0 1
11092: PPUSH
11093: CALL_OW 250
11097: ST_TO_ADDR
// y := GetY ( tower ) ;
11098: LD_ADDR_VAR 0 10
11102: PUSH
11103: LD_VAR 0 1
11107: PPUSH
11108: CALL_OW 251
11112: ST_TO_ADDR
// if not x or not y then
11113: LD_VAR 0 9
11117: NOT
11118: PUSH
11119: LD_VAR 0 10
11123: NOT
11124: OR
11125: IFFALSE 11129
// exit ;
11127: GO 12286
// weapon := 0 ;
11129: LD_ADDR_VAR 0 17
11133: PUSH
11134: LD_INT 0
11136: ST_TO_ADDR
// fac_list := [ ] ;
11137: LD_ADDR_VAR 0 16
11141: PUSH
11142: EMPTY
11143: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
11144: LD_ADDR_VAR 0 5
11148: PUSH
11149: LD_VAR 0 1
11153: PPUSH
11154: CALL_OW 274
11158: PPUSH
11159: CALL 9003 0 1
11163: PPUSH
11164: LD_INT 30
11166: PUSH
11167: LD_INT 3
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PPUSH
11174: CALL_OW 72
11178: ST_TO_ADDR
// if not factories then
11179: LD_VAR 0 5
11183: NOT
11184: IFFALSE 11188
// exit ;
11186: GO 12286
// for i in factories do
11188: LD_ADDR_VAR 0 7
11192: PUSH
11193: LD_VAR 0 5
11197: PUSH
11198: FOR_IN
11199: IFFALSE 11224
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11201: LD_ADDR_VAR 0 16
11205: PUSH
11206: LD_VAR 0 16
11210: PUSH
11211: LD_VAR 0 7
11215: PPUSH
11216: CALL_OW 478
11220: UNION
11221: ST_TO_ADDR
11222: GO 11198
11224: POP
11225: POP
// if not fac_list then
11226: LD_VAR 0 16
11230: NOT
11231: IFFALSE 11235
// exit ;
11233: GO 12286
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11235: LD_ADDR_VAR 0 4
11239: PUSH
11240: LD_INT 4
11242: PUSH
11243: LD_INT 5
11245: PUSH
11246: LD_INT 9
11248: PUSH
11249: LD_INT 10
11251: PUSH
11252: LD_INT 6
11254: PUSH
11255: LD_INT 7
11257: PUSH
11258: LD_INT 11
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: PUSH
11270: LD_INT 27
11272: PUSH
11273: LD_INT 28
11275: PUSH
11276: LD_INT 26
11278: PUSH
11279: LD_INT 30
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 43
11290: PUSH
11291: LD_INT 44
11293: PUSH
11294: LD_INT 46
11296: PUSH
11297: LD_INT 45
11299: PUSH
11300: LD_INT 47
11302: PUSH
11303: LD_INT 49
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: LIST
11318: PUSH
11319: LD_VAR 0 11
11323: ARRAY
11324: ST_TO_ADDR
// for i in list do
11325: LD_ADDR_VAR 0 7
11329: PUSH
11330: LD_VAR 0 4
11334: PUSH
11335: FOR_IN
11336: IFFALSE 11369
// if not i in fac_list then
11338: LD_VAR 0 7
11342: PUSH
11343: LD_VAR 0 16
11347: IN
11348: NOT
11349: IFFALSE 11367
// list := list diff i ;
11351: LD_ADDR_VAR 0 4
11355: PUSH
11356: LD_VAR 0 4
11360: PUSH
11361: LD_VAR 0 7
11365: DIFF
11366: ST_TO_ADDR
11367: GO 11335
11369: POP
11370: POP
// if not list then
11371: LD_VAR 0 4
11375: NOT
11376: IFFALSE 11380
// exit ;
11378: GO 12286
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11380: LD_VAR 0 11
11384: PUSH
11385: LD_INT 3
11387: EQUAL
11388: PUSH
11389: LD_INT 49
11391: PUSH
11392: LD_VAR 0 4
11396: IN
11397: AND
11398: PUSH
11399: LD_INT 31
11401: PPUSH
11402: LD_VAR 0 15
11406: PPUSH
11407: CALL_OW 321
11411: PUSH
11412: LD_INT 2
11414: EQUAL
11415: AND
11416: IFFALSE 11476
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11418: LD_INT 22
11420: PUSH
11421: LD_VAR 0 15
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: LD_INT 35
11432: PUSH
11433: LD_INT 49
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 91
11442: PUSH
11443: LD_VAR 0 1
11447: PUSH
11448: LD_INT 10
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: LIST
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: PPUSH
11461: CALL_OW 69
11465: NOT
11466: IFFALSE 11476
// weapon := ru_time_lapser ;
11468: LD_ADDR_VAR 0 17
11472: PUSH
11473: LD_INT 49
11475: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11476: LD_VAR 0 11
11480: PUSH
11481: LD_INT 1
11483: PUSH
11484: LD_INT 2
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: IN
11491: PUSH
11492: LD_INT 11
11494: PUSH
11495: LD_VAR 0 4
11499: IN
11500: PUSH
11501: LD_INT 30
11503: PUSH
11504: LD_VAR 0 4
11508: IN
11509: OR
11510: AND
11511: PUSH
11512: LD_INT 6
11514: PPUSH
11515: LD_VAR 0 15
11519: PPUSH
11520: CALL_OW 321
11524: PUSH
11525: LD_INT 2
11527: EQUAL
11528: AND
11529: IFFALSE 11694
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11531: LD_INT 22
11533: PUSH
11534: LD_VAR 0 15
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 2
11545: PUSH
11546: LD_INT 35
11548: PUSH
11549: LD_INT 11
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 35
11558: PUSH
11559: LD_INT 30
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 91
11573: PUSH
11574: LD_VAR 0 1
11578: PUSH
11579: LD_INT 18
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: PPUSH
11592: CALL_OW 69
11596: NOT
11597: PUSH
11598: LD_INT 22
11600: PUSH
11601: LD_VAR 0 15
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 2
11612: PUSH
11613: LD_INT 30
11615: PUSH
11616: LD_INT 32
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 30
11625: PUSH
11626: LD_INT 33
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: LIST
11637: PUSH
11638: LD_INT 91
11640: PUSH
11641: LD_VAR 0 1
11645: PUSH
11646: LD_INT 12
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: PUSH
11659: EMPTY
11660: LIST
11661: PPUSH
11662: CALL_OW 69
11666: PUSH
11667: LD_INT 2
11669: GREATER
11670: AND
11671: IFFALSE 11694
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11673: LD_ADDR_VAR 0 17
11677: PUSH
11678: LD_INT 11
11680: PUSH
11681: LD_INT 30
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: LD_VAR 0 11
11692: ARRAY
11693: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11694: LD_VAR 0 17
11698: NOT
11699: PUSH
11700: LD_INT 40
11702: PPUSH
11703: LD_VAR 0 15
11707: PPUSH
11708: CALL_OW 321
11712: PUSH
11713: LD_INT 2
11715: EQUAL
11716: AND
11717: PUSH
11718: LD_INT 7
11720: PUSH
11721: LD_VAR 0 4
11725: IN
11726: PUSH
11727: LD_INT 28
11729: PUSH
11730: LD_VAR 0 4
11734: IN
11735: OR
11736: PUSH
11737: LD_INT 45
11739: PUSH
11740: LD_VAR 0 4
11744: IN
11745: OR
11746: AND
11747: IFFALSE 12001
// begin hex := GetHexInfo ( x , y ) ;
11749: LD_ADDR_VAR 0 3
11753: PUSH
11754: LD_VAR 0 9
11758: PPUSH
11759: LD_VAR 0 10
11763: PPUSH
11764: CALL_OW 546
11768: ST_TO_ADDR
// if hex [ 1 ] then
11769: LD_VAR 0 3
11773: PUSH
11774: LD_INT 1
11776: ARRAY
11777: IFFALSE 11781
// exit ;
11779: GO 12286
// height := hex [ 2 ] ;
11781: LD_ADDR_VAR 0 14
11785: PUSH
11786: LD_VAR 0 3
11790: PUSH
11791: LD_INT 2
11793: ARRAY
11794: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11795: LD_ADDR_VAR 0 13
11799: PUSH
11800: LD_INT 0
11802: PUSH
11803: LD_INT 2
11805: PUSH
11806: LD_INT 3
11808: PUSH
11809: LD_INT 5
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: ST_TO_ADDR
// for i in tmp do
11818: LD_ADDR_VAR 0 7
11822: PUSH
11823: LD_VAR 0 13
11827: PUSH
11828: FOR_IN
11829: IFFALSE 11999
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11831: LD_ADDR_VAR 0 8
11835: PUSH
11836: LD_VAR 0 9
11840: PPUSH
11841: LD_VAR 0 7
11845: PPUSH
11846: LD_INT 5
11848: PPUSH
11849: CALL_OW 272
11853: PUSH
11854: LD_VAR 0 10
11858: PPUSH
11859: LD_VAR 0 7
11863: PPUSH
11864: LD_INT 5
11866: PPUSH
11867: CALL_OW 273
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11876: LD_VAR 0 8
11880: PUSH
11881: LD_INT 1
11883: ARRAY
11884: PPUSH
11885: LD_VAR 0 8
11889: PUSH
11890: LD_INT 2
11892: ARRAY
11893: PPUSH
11894: CALL_OW 488
11898: IFFALSE 11997
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11900: LD_ADDR_VAR 0 3
11904: PUSH
11905: LD_VAR 0 8
11909: PUSH
11910: LD_INT 1
11912: ARRAY
11913: PPUSH
11914: LD_VAR 0 8
11918: PUSH
11919: LD_INT 2
11921: ARRAY
11922: PPUSH
11923: CALL_OW 546
11927: ST_TO_ADDR
// if hex [ 1 ] then
11928: LD_VAR 0 3
11932: PUSH
11933: LD_INT 1
11935: ARRAY
11936: IFFALSE 11940
// continue ;
11938: GO 11828
// h := hex [ 2 ] ;
11940: LD_ADDR_VAR 0 12
11944: PUSH
11945: LD_VAR 0 3
11949: PUSH
11950: LD_INT 2
11952: ARRAY
11953: ST_TO_ADDR
// if h + 7 < height then
11954: LD_VAR 0 12
11958: PUSH
11959: LD_INT 7
11961: PLUS
11962: PUSH
11963: LD_VAR 0 14
11967: LESS
11968: IFFALSE 11997
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11970: LD_ADDR_VAR 0 17
11974: PUSH
11975: LD_INT 7
11977: PUSH
11978: LD_INT 28
11980: PUSH
11981: LD_INT 45
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: LIST
11988: PUSH
11989: LD_VAR 0 11
11993: ARRAY
11994: ST_TO_ADDR
// break ;
11995: GO 11999
// end ; end ; end ;
11997: GO 11828
11999: POP
12000: POP
// end ; if not weapon then
12001: LD_VAR 0 17
12005: NOT
12006: IFFALSE 12168
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12008: LD_ADDR_VAR 0 4
12012: PUSH
12013: LD_VAR 0 4
12017: PUSH
12018: LD_INT 11
12020: PUSH
12021: LD_INT 30
12023: PUSH
12024: LD_INT 49
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: DIFF
12032: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
12033: LD_ADDR_VAR 0 17
12037: PUSH
12038: LD_VAR 0 4
12042: PUSH
12043: LD_INT 1
12045: PPUSH
12046: LD_VAR 0 4
12050: PPUSH
12051: CALL_OW 12
12055: ARRAY
12056: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
12057: LD_ADDR_VAR 0 13
12061: PUSH
12062: LD_INT 22
12064: PUSH
12065: LD_VAR 0 15
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PUSH
12074: LD_INT 3
12076: PUSH
12077: LD_INT 35
12079: PUSH
12080: LD_INT 0
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PPUSH
12095: CALL_OW 69
12099: ST_TO_ADDR
// for i in tmp do
12100: LD_ADDR_VAR 0 7
12104: PUSH
12105: LD_VAR 0 13
12109: PUSH
12110: FOR_IN
12111: IFFALSE 12136
// list := list diff GetBWeapon ( i ) ;
12113: LD_ADDR_VAR 0 4
12117: PUSH
12118: LD_VAR 0 4
12122: PUSH
12123: LD_VAR 0 7
12127: PPUSH
12128: CALL_OW 269
12132: DIFF
12133: ST_TO_ADDR
12134: GO 12110
12136: POP
12137: POP
// if list then
12138: LD_VAR 0 4
12142: IFFALSE 12168
// weapon := list [ rand ( 1 , list ) ] ;
12144: LD_ADDR_VAR 0 17
12148: PUSH
12149: LD_VAR 0 4
12153: PUSH
12154: LD_INT 1
12156: PPUSH
12157: LD_VAR 0 4
12161: PPUSH
12162: CALL_OW 12
12166: ARRAY
12167: ST_TO_ADDR
// end ; if weapon then
12168: LD_VAR 0 17
12172: IFFALSE 12286
// begin tmp := CostOfWeapon ( weapon ) ;
12174: LD_ADDR_VAR 0 13
12178: PUSH
12179: LD_VAR 0 17
12183: PPUSH
12184: CALL_OW 451
12188: ST_TO_ADDR
// j := GetBase ( tower ) ;
12189: LD_ADDR_VAR 0 8
12193: PUSH
12194: LD_VAR 0 1
12198: PPUSH
12199: CALL_OW 274
12203: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12204: LD_VAR 0 8
12208: PPUSH
12209: LD_INT 1
12211: PPUSH
12212: CALL_OW 275
12216: PUSH
12217: LD_VAR 0 13
12221: PUSH
12222: LD_INT 1
12224: ARRAY
12225: GREATEREQUAL
12226: PUSH
12227: LD_VAR 0 8
12231: PPUSH
12232: LD_INT 2
12234: PPUSH
12235: CALL_OW 275
12239: PUSH
12240: LD_VAR 0 13
12244: PUSH
12245: LD_INT 2
12247: ARRAY
12248: GREATEREQUAL
12249: AND
12250: PUSH
12251: LD_VAR 0 8
12255: PPUSH
12256: LD_INT 3
12258: PPUSH
12259: CALL_OW 275
12263: PUSH
12264: LD_VAR 0 13
12268: PUSH
12269: LD_INT 3
12271: ARRAY
12272: GREATEREQUAL
12273: AND
12274: IFFALSE 12286
// result := weapon ;
12276: LD_ADDR_VAR 0 2
12280: PUSH
12281: LD_VAR 0 17
12285: ST_TO_ADDR
// end ; end ;
12286: LD_VAR 0 2
12290: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12291: LD_INT 0
12293: PPUSH
12294: PPUSH
// result := true ;
12295: LD_ADDR_VAR 0 3
12299: PUSH
12300: LD_INT 1
12302: ST_TO_ADDR
// if array1 = array2 then
12303: LD_VAR 0 1
12307: PUSH
12308: LD_VAR 0 2
12312: EQUAL
12313: IFFALSE 12373
// begin for i = 1 to array1 do
12315: LD_ADDR_VAR 0 4
12319: PUSH
12320: DOUBLE
12321: LD_INT 1
12323: DEC
12324: ST_TO_ADDR
12325: LD_VAR 0 1
12329: PUSH
12330: FOR_TO
12331: IFFALSE 12369
// if array1 [ i ] <> array2 [ i ] then
12333: LD_VAR 0 1
12337: PUSH
12338: LD_VAR 0 4
12342: ARRAY
12343: PUSH
12344: LD_VAR 0 2
12348: PUSH
12349: LD_VAR 0 4
12353: ARRAY
12354: NONEQUAL
12355: IFFALSE 12367
// begin result := false ;
12357: LD_ADDR_VAR 0 3
12361: PUSH
12362: LD_INT 0
12364: ST_TO_ADDR
// break ;
12365: GO 12369
// end ;
12367: GO 12330
12369: POP
12370: POP
// end else
12371: GO 12381
// result := false ;
12373: LD_ADDR_VAR 0 3
12377: PUSH
12378: LD_INT 0
12380: ST_TO_ADDR
// end ;
12381: LD_VAR 0 3
12385: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12386: LD_INT 0
12388: PPUSH
12389: PPUSH
12390: PPUSH
// pom := GetBase ( fac ) ;
12391: LD_ADDR_VAR 0 5
12395: PUSH
12396: LD_VAR 0 1
12400: PPUSH
12401: CALL_OW 274
12405: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12406: LD_ADDR_VAR 0 4
12410: PUSH
12411: LD_VAR 0 2
12415: PUSH
12416: LD_INT 1
12418: ARRAY
12419: PPUSH
12420: LD_VAR 0 2
12424: PUSH
12425: LD_INT 2
12427: ARRAY
12428: PPUSH
12429: LD_VAR 0 2
12433: PUSH
12434: LD_INT 3
12436: ARRAY
12437: PPUSH
12438: LD_VAR 0 2
12442: PUSH
12443: LD_INT 4
12445: ARRAY
12446: PPUSH
12447: CALL_OW 449
12451: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
12452: LD_VAR 0 5
12456: PPUSH
12457: LD_INT 1
12459: PPUSH
12460: CALL_OW 275
12464: PUSH
12465: LD_VAR 0 4
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: GREATEREQUAL
12474: PUSH
12475: LD_VAR 0 5
12479: PPUSH
12480: LD_INT 2
12482: PPUSH
12483: CALL_OW 275
12487: PUSH
12488: LD_VAR 0 4
12492: PUSH
12493: LD_INT 2
12495: ARRAY
12496: GREATEREQUAL
12497: AND
12498: PUSH
12499: LD_VAR 0 5
12503: PPUSH
12504: LD_INT 3
12506: PPUSH
12507: CALL_OW 275
12511: PUSH
12512: LD_VAR 0 4
12516: PUSH
12517: LD_INT 3
12519: ARRAY
12520: GREATEREQUAL
12521: AND
12522: IFFALSE 12534
// result := true else
12524: LD_ADDR_VAR 0 3
12528: PUSH
12529: LD_INT 1
12531: ST_TO_ADDR
12532: GO 12542
// result := false ;
12534: LD_ADDR_VAR 0 3
12538: PUSH
12539: LD_INT 0
12541: ST_TO_ADDR
// end ;
12542: LD_VAR 0 3
12546: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
12547: LD_INT 0
12549: PPUSH
12550: PPUSH
12551: PPUSH
12552: PPUSH
12553: PPUSH
12554: PPUSH
12555: PPUSH
12556: PPUSH
12557: PPUSH
// result := false ;
12558: LD_ADDR_VAR 0 6
12562: PUSH
12563: LD_INT 0
12565: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
12566: LD_VAR 0 1
12570: NOT
12571: PUSH
12572: LD_VAR 0 1
12576: PPUSH
12577: CALL_OW 266
12581: PUSH
12582: LD_INT 0
12584: PUSH
12585: LD_INT 1
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: IN
12592: NOT
12593: OR
12594: PUSH
12595: LD_VAR 0 2
12599: NOT
12600: OR
12601: PUSH
12602: LD_VAR 0 5
12606: PUSH
12607: LD_INT 0
12609: PUSH
12610: LD_INT 1
12612: PUSH
12613: LD_INT 2
12615: PUSH
12616: LD_INT 3
12618: PUSH
12619: LD_INT 4
12621: PUSH
12622: LD_INT 5
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: IN
12633: NOT
12634: OR
12635: PUSH
12636: LD_VAR 0 3
12640: PPUSH
12641: LD_VAR 0 4
12645: PPUSH
12646: CALL_OW 488
12650: NOT
12651: OR
12652: IFFALSE 12656
// exit ;
12654: GO 13320
// pom := GetBase ( bdepot ) ;
12656: LD_ADDR_VAR 0 9
12660: PUSH
12661: LD_VAR 0 1
12665: PPUSH
12666: CALL_OW 274
12670: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
12671: LD_ADDR_VAR 0 10
12675: PUSH
12676: LD_VAR 0 2
12680: PPUSH
12681: LD_VAR 0 1
12685: PPUSH
12686: CALL_OW 248
12690: PPUSH
12691: CALL_OW 450
12695: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
12696: LD_VAR 0 9
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: CALL_OW 275
12708: PUSH
12709: LD_VAR 0 10
12713: PUSH
12714: LD_INT 1
12716: ARRAY
12717: GREATEREQUAL
12718: PUSH
12719: LD_VAR 0 9
12723: PPUSH
12724: LD_INT 2
12726: PPUSH
12727: CALL_OW 275
12731: PUSH
12732: LD_VAR 0 10
12736: PUSH
12737: LD_INT 2
12739: ARRAY
12740: GREATEREQUAL
12741: AND
12742: PUSH
12743: LD_VAR 0 9
12747: PPUSH
12748: LD_INT 3
12750: PPUSH
12751: CALL_OW 275
12755: PUSH
12756: LD_VAR 0 10
12760: PUSH
12761: LD_INT 3
12763: ARRAY
12764: GREATEREQUAL
12765: AND
12766: NOT
12767: IFFALSE 12771
// exit ;
12769: GO 13320
// if GetBType ( bdepot ) = b_depot then
12771: LD_VAR 0 1
12775: PPUSH
12776: CALL_OW 266
12780: PUSH
12781: LD_INT 0
12783: EQUAL
12784: IFFALSE 12796
// dist := 28 else
12786: LD_ADDR_VAR 0 13
12790: PUSH
12791: LD_INT 28
12793: ST_TO_ADDR
12794: GO 12804
// dist := 36 ;
12796: LD_ADDR_VAR 0 13
12800: PUSH
12801: LD_INT 36
12803: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
12804: LD_VAR 0 1
12808: PPUSH
12809: LD_VAR 0 3
12813: PPUSH
12814: LD_VAR 0 4
12818: PPUSH
12819: CALL_OW 297
12823: PUSH
12824: LD_VAR 0 13
12828: GREATER
12829: IFFALSE 12833
// exit ;
12831: GO 13320
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
12833: LD_ADDR_VAR 0 11
12837: PUSH
12838: LD_VAR 0 2
12842: PPUSH
12843: LD_VAR 0 3
12847: PPUSH
12848: LD_VAR 0 4
12852: PPUSH
12853: LD_VAR 0 5
12857: PPUSH
12858: LD_VAR 0 1
12862: PPUSH
12863: CALL_OW 248
12867: PPUSH
12868: LD_INT 0
12870: PPUSH
12871: CALL 13325 0 6
12875: ST_TO_ADDR
// if not hexes then
12876: LD_VAR 0 11
12880: NOT
12881: IFFALSE 12885
// exit ;
12883: GO 13320
// hex := GetHexInfo ( x , y ) ;
12885: LD_ADDR_VAR 0 14
12889: PUSH
12890: LD_VAR 0 3
12894: PPUSH
12895: LD_VAR 0 4
12899: PPUSH
12900: CALL_OW 546
12904: ST_TO_ADDR
// if hex [ 1 ] then
12905: LD_VAR 0 14
12909: PUSH
12910: LD_INT 1
12912: ARRAY
12913: IFFALSE 12917
// exit ;
12915: GO 13320
// height := hex [ 2 ] ;
12917: LD_ADDR_VAR 0 12
12921: PUSH
12922: LD_VAR 0 14
12926: PUSH
12927: LD_INT 2
12929: ARRAY
12930: ST_TO_ADDR
// for i = 1 to hexes do
12931: LD_ADDR_VAR 0 7
12935: PUSH
12936: DOUBLE
12937: LD_INT 1
12939: DEC
12940: ST_TO_ADDR
12941: LD_VAR 0 11
12945: PUSH
12946: FOR_TO
12947: IFFALSE 13275
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
12949: LD_VAR 0 11
12953: PUSH
12954: LD_VAR 0 7
12958: ARRAY
12959: PUSH
12960: LD_INT 1
12962: ARRAY
12963: PPUSH
12964: LD_VAR 0 11
12968: PUSH
12969: LD_VAR 0 7
12973: ARRAY
12974: PUSH
12975: LD_INT 2
12977: ARRAY
12978: PPUSH
12979: CALL_OW 488
12983: NOT
12984: IFFALSE 12988
// continue ;
12986: GO 12946
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12988: LD_ADDR_VAR 0 8
12992: PUSH
12993: LD_VAR 0 11
12997: PUSH
12998: LD_VAR 0 7
13002: ARRAY
13003: PUSH
13004: LD_INT 1
13006: ARRAY
13007: PPUSH
13008: LD_VAR 0 11
13012: PUSH
13013: LD_VAR 0 7
13017: ARRAY
13018: PUSH
13019: LD_INT 2
13021: ARRAY
13022: PPUSH
13023: CALL_OW 546
13027: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
13028: LD_VAR 0 8
13032: PUSH
13033: LD_INT 1
13035: ARRAY
13036: PUSH
13037: LD_VAR 0 8
13041: PUSH
13042: LD_INT 2
13044: ARRAY
13045: PUSH
13046: LD_VAR 0 12
13050: PUSH
13051: LD_INT 2
13053: PLUS
13054: GREATER
13055: OR
13056: PUSH
13057: LD_VAR 0 8
13061: PUSH
13062: LD_INT 2
13064: ARRAY
13065: PUSH
13066: LD_VAR 0 12
13070: PUSH
13071: LD_INT 2
13073: MINUS
13074: LESS
13075: OR
13076: PUSH
13077: LD_VAR 0 8
13081: PUSH
13082: LD_INT 3
13084: ARRAY
13085: PUSH
13086: LD_INT 0
13088: PUSH
13089: LD_INT 8
13091: PUSH
13092: LD_INT 9
13094: PUSH
13095: LD_INT 10
13097: PUSH
13098: LD_INT 11
13100: PUSH
13101: LD_INT 12
13103: PUSH
13104: LD_INT 13
13106: PUSH
13107: LD_INT 16
13109: PUSH
13110: LD_INT 17
13112: PUSH
13113: LD_INT 18
13115: PUSH
13116: LD_INT 19
13118: PUSH
13119: LD_INT 20
13121: PUSH
13122: LD_INT 21
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: IN
13140: NOT
13141: OR
13142: PUSH
13143: LD_VAR 0 8
13147: PUSH
13148: LD_INT 5
13150: ARRAY
13151: NOT
13152: OR
13153: PUSH
13154: LD_VAR 0 8
13158: PUSH
13159: LD_INT 6
13161: ARRAY
13162: PUSH
13163: LD_INT 1
13165: PUSH
13166: LD_INT 2
13168: PUSH
13169: LD_INT 7
13171: PUSH
13172: LD_INT 9
13174: PUSH
13175: LD_INT 10
13177: PUSH
13178: LD_INT 11
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: IN
13189: NOT
13190: OR
13191: PUSH
13192: LD_VAR 0 11
13196: PUSH
13197: LD_VAR 0 7
13201: ARRAY
13202: PUSH
13203: LD_INT 1
13205: ARRAY
13206: PPUSH
13207: LD_VAR 0 11
13211: PUSH
13212: LD_VAR 0 7
13216: ARRAY
13217: PUSH
13218: LD_INT 2
13220: ARRAY
13221: PPUSH
13222: CALL_OW 428
13226: PUSH
13227: LD_INT 0
13229: GREATER
13230: OR
13231: PUSH
13232: LD_VAR 0 11
13236: PUSH
13237: LD_VAR 0 7
13241: ARRAY
13242: PUSH
13243: LD_INT 1
13245: ARRAY
13246: PPUSH
13247: LD_VAR 0 11
13251: PUSH
13252: LD_VAR 0 7
13256: ARRAY
13257: PUSH
13258: LD_INT 2
13260: ARRAY
13261: PPUSH
13262: CALL_OW 351
13266: OR
13267: IFFALSE 13273
// exit ;
13269: POP
13270: POP
13271: GO 13320
// end ;
13273: GO 12946
13275: POP
13276: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
13277: LD_VAR 0 1
13281: PPUSH
13282: CALL_OW 255
13286: PPUSH
13287: LD_VAR 0 3
13291: PPUSH
13292: LD_VAR 0 4
13296: PPUSH
13297: LD_INT 20
13299: PPUSH
13300: CALL 7187 0 4
13304: PUSH
13305: LD_INT 4
13307: ARRAY
13308: IFFALSE 13312
// exit ;
13310: GO 13320
// result := true ;
13312: LD_ADDR_VAR 0 6
13316: PUSH
13317: LD_INT 1
13319: ST_TO_ADDR
// end ;
13320: LD_VAR 0 6
13324: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
13325: LD_INT 0
13327: PPUSH
13328: PPUSH
13329: PPUSH
13330: PPUSH
13331: PPUSH
13332: PPUSH
13333: PPUSH
13334: PPUSH
13335: PPUSH
13336: PPUSH
13337: PPUSH
13338: PPUSH
13339: PPUSH
13340: PPUSH
13341: PPUSH
13342: PPUSH
13343: PPUSH
13344: PPUSH
13345: PPUSH
13346: PPUSH
13347: PPUSH
13348: PPUSH
13349: PPUSH
13350: PPUSH
13351: PPUSH
13352: PPUSH
13353: PPUSH
13354: PPUSH
13355: PPUSH
13356: PPUSH
13357: PPUSH
13358: PPUSH
13359: PPUSH
13360: PPUSH
13361: PPUSH
13362: PPUSH
13363: PPUSH
13364: PPUSH
13365: PPUSH
13366: PPUSH
13367: PPUSH
13368: PPUSH
13369: PPUSH
13370: PPUSH
13371: PPUSH
13372: PPUSH
13373: PPUSH
13374: PPUSH
13375: PPUSH
13376: PPUSH
13377: PPUSH
13378: PPUSH
13379: PPUSH
13380: PPUSH
13381: PPUSH
13382: PPUSH
13383: PPUSH
13384: PPUSH
// result = [ ] ;
13385: LD_ADDR_VAR 0 7
13389: PUSH
13390: EMPTY
13391: ST_TO_ADDR
// temp_list = [ ] ;
13392: LD_ADDR_VAR 0 9
13396: PUSH
13397: EMPTY
13398: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
13399: LD_VAR 0 4
13403: PUSH
13404: LD_INT 0
13406: PUSH
13407: LD_INT 1
13409: PUSH
13410: LD_INT 2
13412: PUSH
13413: LD_INT 3
13415: PUSH
13416: LD_INT 4
13418: PUSH
13419: LD_INT 5
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: IN
13430: NOT
13431: PUSH
13432: LD_VAR 0 1
13436: PUSH
13437: LD_INT 0
13439: PUSH
13440: LD_INT 1
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: IN
13447: PUSH
13448: LD_VAR 0 5
13452: PUSH
13453: LD_INT 1
13455: PUSH
13456: LD_INT 2
13458: PUSH
13459: LD_INT 3
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: LIST
13466: IN
13467: NOT
13468: AND
13469: OR
13470: IFFALSE 13474
// exit ;
13472: GO 31859
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
13474: LD_VAR 0 1
13478: PUSH
13479: LD_INT 6
13481: PUSH
13482: LD_INT 7
13484: PUSH
13485: LD_INT 8
13487: PUSH
13488: LD_INT 13
13490: PUSH
13491: LD_INT 12
13493: PUSH
13494: LD_INT 15
13496: PUSH
13497: LD_INT 11
13499: PUSH
13500: LD_INT 14
13502: PUSH
13503: LD_INT 10
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: IN
13517: IFFALSE 13527
// btype = b_lab ;
13519: LD_ADDR_VAR 0 1
13523: PUSH
13524: LD_INT 6
13526: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
13527: LD_VAR 0 6
13531: PUSH
13532: LD_INT 0
13534: PUSH
13535: LD_INT 1
13537: PUSH
13538: LD_INT 2
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: IN
13546: NOT
13547: PUSH
13548: LD_VAR 0 1
13552: PUSH
13553: LD_INT 0
13555: PUSH
13556: LD_INT 1
13558: PUSH
13559: LD_INT 2
13561: PUSH
13562: LD_INT 3
13564: PUSH
13565: LD_INT 6
13567: PUSH
13568: LD_INT 36
13570: PUSH
13571: LD_INT 4
13573: PUSH
13574: LD_INT 5
13576: PUSH
13577: LD_INT 31
13579: PUSH
13580: LD_INT 32
13582: PUSH
13583: LD_INT 33
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: IN
13599: NOT
13600: PUSH
13601: LD_VAR 0 6
13605: PUSH
13606: LD_INT 1
13608: EQUAL
13609: AND
13610: OR
13611: PUSH
13612: LD_VAR 0 1
13616: PUSH
13617: LD_INT 2
13619: PUSH
13620: LD_INT 3
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: IN
13627: NOT
13628: PUSH
13629: LD_VAR 0 6
13633: PUSH
13634: LD_INT 2
13636: EQUAL
13637: AND
13638: OR
13639: IFFALSE 13649
// mode = 0 ;
13641: LD_ADDR_VAR 0 6
13645: PUSH
13646: LD_INT 0
13648: ST_TO_ADDR
// case mode of 0 :
13649: LD_VAR 0 6
13653: PUSH
13654: LD_INT 0
13656: DOUBLE
13657: EQUAL
13658: IFTRUE 13662
13660: GO 25115
13662: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
13663: LD_ADDR_VAR 0 11
13667: PUSH
13668: LD_INT 0
13670: PUSH
13671: LD_INT 0
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PUSH
13678: LD_INT 0
13680: PUSH
13681: LD_INT 1
13683: NEG
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 1
13691: PUSH
13692: LD_INT 0
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 1
13701: PUSH
13702: LD_INT 1
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 0
13711: PUSH
13712: LD_INT 1
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: LD_INT 1
13721: NEG
13722: PUSH
13723: LD_INT 0
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 1
13732: NEG
13733: PUSH
13734: LD_INT 1
13736: NEG
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PUSH
13742: LD_INT 1
13744: NEG
13745: PUSH
13746: LD_INT 2
13748: NEG
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: LD_INT 0
13756: PUSH
13757: LD_INT 2
13759: NEG
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 1
13767: PUSH
13768: LD_INT 1
13770: NEG
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 1
13778: PUSH
13779: LD_INT 2
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 0
13788: PUSH
13789: LD_INT 2
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: LD_INT 1
13798: NEG
13799: PUSH
13800: LD_INT 1
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: LD_INT 1
13809: PUSH
13810: LD_INT 3
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PUSH
13817: LD_INT 0
13819: PUSH
13820: LD_INT 3
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PUSH
13827: LD_INT 1
13829: NEG
13830: PUSH
13831: LD_INT 2
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
13856: LD_ADDR_VAR 0 12
13860: PUSH
13861: LD_INT 0
13863: PUSH
13864: LD_INT 0
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PUSH
13871: LD_INT 0
13873: PUSH
13874: LD_INT 1
13876: NEG
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 1
13884: PUSH
13885: LD_INT 0
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 1
13894: PUSH
13895: LD_INT 1
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 0
13904: PUSH
13905: LD_INT 1
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: LD_INT 1
13914: NEG
13915: PUSH
13916: LD_INT 0
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 1
13925: NEG
13926: PUSH
13927: LD_INT 1
13929: NEG
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: LD_INT 1
13937: PUSH
13938: LD_INT 1
13940: NEG
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: LD_INT 2
13948: PUSH
13949: LD_INT 0
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: LD_INT 2
13958: PUSH
13959: LD_INT 1
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: PUSH
13966: LD_INT 1
13968: NEG
13969: PUSH
13970: LD_INT 1
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PUSH
13977: LD_INT 2
13979: NEG
13980: PUSH
13981: LD_INT 0
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 2
13990: NEG
13991: PUSH
13992: LD_INT 1
13994: NEG
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 2
14002: NEG
14003: PUSH
14004: LD_INT 1
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PUSH
14011: LD_INT 3
14013: NEG
14014: PUSH
14015: LD_INT 0
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: LD_INT 3
14024: NEG
14025: PUSH
14026: LD_INT 1
14028: NEG
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
14052: LD_ADDR_VAR 0 13
14056: PUSH
14057: LD_INT 0
14059: PUSH
14060: LD_INT 0
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: PUSH
14067: LD_INT 0
14069: PUSH
14070: LD_INT 1
14072: NEG
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: LD_INT 1
14080: PUSH
14081: LD_INT 0
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 1
14090: PUSH
14091: LD_INT 1
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 0
14100: PUSH
14101: LD_INT 1
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: LD_INT 1
14110: NEG
14111: PUSH
14112: LD_INT 0
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 1
14121: NEG
14122: PUSH
14123: LD_INT 1
14125: NEG
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: LD_INT 1
14133: NEG
14134: PUSH
14135: LD_INT 2
14137: NEG
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: LD_INT 2
14145: PUSH
14146: LD_INT 1
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PUSH
14153: LD_INT 2
14155: PUSH
14156: LD_INT 2
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PUSH
14163: LD_INT 1
14165: PUSH
14166: LD_INT 2
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 2
14175: NEG
14176: PUSH
14177: LD_INT 1
14179: NEG
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: LD_INT 2
14187: NEG
14188: PUSH
14189: LD_INT 2
14191: NEG
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 2
14199: NEG
14200: PUSH
14201: LD_INT 3
14203: NEG
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 3
14211: NEG
14212: PUSH
14213: LD_INT 2
14215: NEG
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 3
14223: NEG
14224: PUSH
14225: LD_INT 3
14227: NEG
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
14251: LD_ADDR_VAR 0 14
14255: PUSH
14256: LD_INT 0
14258: PUSH
14259: LD_INT 0
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: LD_INT 0
14268: PUSH
14269: LD_INT 1
14271: NEG
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 1
14279: PUSH
14280: LD_INT 0
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 1
14289: PUSH
14290: LD_INT 1
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: PUSH
14297: LD_INT 0
14299: PUSH
14300: LD_INT 1
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 1
14309: NEG
14310: PUSH
14311: LD_INT 0
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: LD_INT 1
14320: NEG
14321: PUSH
14322: LD_INT 1
14324: NEG
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 1
14332: NEG
14333: PUSH
14334: LD_INT 2
14336: NEG
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 0
14344: PUSH
14345: LD_INT 2
14347: NEG
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 1
14355: PUSH
14356: LD_INT 1
14358: NEG
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 1
14366: PUSH
14367: LD_INT 2
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: LD_INT 0
14376: PUSH
14377: LD_INT 2
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 1
14386: NEG
14387: PUSH
14388: LD_INT 1
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 1
14397: NEG
14398: PUSH
14399: LD_INT 3
14401: NEG
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 0
14409: PUSH
14410: LD_INT 3
14412: NEG
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 1
14420: PUSH
14421: LD_INT 2
14423: NEG
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
14447: LD_ADDR_VAR 0 15
14451: PUSH
14452: LD_INT 0
14454: PUSH
14455: LD_INT 0
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: LD_INT 0
14464: PUSH
14465: LD_INT 1
14467: NEG
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: LD_INT 1
14475: PUSH
14476: LD_INT 0
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: LD_INT 1
14485: PUSH
14486: LD_INT 1
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 0
14495: PUSH
14496: LD_INT 1
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: LD_INT 1
14505: NEG
14506: PUSH
14507: LD_INT 0
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: LD_INT 1
14516: NEG
14517: PUSH
14518: LD_INT 1
14520: NEG
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: LD_INT 1
14528: PUSH
14529: LD_INT 1
14531: NEG
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: LD_INT 2
14539: PUSH
14540: LD_INT 0
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PUSH
14547: LD_INT 2
14549: PUSH
14550: LD_INT 1
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: LD_INT 1
14559: NEG
14560: PUSH
14561: LD_INT 1
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: LD_INT 2
14570: NEG
14571: PUSH
14572: LD_INT 0
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: LD_INT 2
14581: NEG
14582: PUSH
14583: LD_INT 1
14585: NEG
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PUSH
14591: LD_INT 2
14593: PUSH
14594: LD_INT 1
14596: NEG
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: LD_INT 3
14604: PUSH
14605: LD_INT 0
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 3
14614: PUSH
14615: LD_INT 1
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
14640: LD_ADDR_VAR 0 16
14644: PUSH
14645: LD_INT 0
14647: PUSH
14648: LD_INT 0
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 0
14657: PUSH
14658: LD_INT 1
14660: NEG
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: PUSH
14666: LD_INT 1
14668: PUSH
14669: LD_INT 0
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 1
14678: PUSH
14679: LD_INT 1
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 0
14688: PUSH
14689: LD_INT 1
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 1
14698: NEG
14699: PUSH
14700: LD_INT 0
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 1
14709: NEG
14710: PUSH
14711: LD_INT 1
14713: NEG
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: LD_INT 1
14721: NEG
14722: PUSH
14723: LD_INT 2
14725: NEG
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PUSH
14731: LD_INT 2
14733: PUSH
14734: LD_INT 1
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 2
14743: PUSH
14744: LD_INT 2
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 1
14753: PUSH
14754: LD_INT 2
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 2
14763: NEG
14764: PUSH
14765: LD_INT 1
14767: NEG
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: LD_INT 2
14775: NEG
14776: PUSH
14777: LD_INT 2
14779: NEG
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 3
14787: PUSH
14788: LD_INT 2
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 3
14797: PUSH
14798: LD_INT 3
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 2
14807: PUSH
14808: LD_INT 3
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
14833: LD_ADDR_VAR 0 17
14837: PUSH
14838: LD_INT 0
14840: PUSH
14841: LD_INT 0
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: LD_INT 0
14850: PUSH
14851: LD_INT 1
14853: NEG
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: LD_INT 0
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 1
14871: PUSH
14872: LD_INT 1
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 0
14881: PUSH
14882: LD_INT 1
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 1
14891: NEG
14892: PUSH
14893: LD_INT 0
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: LD_INT 1
14902: NEG
14903: PUSH
14904: LD_INT 1
14906: NEG
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: LD_INT 1
14914: NEG
14915: PUSH
14916: LD_INT 2
14918: NEG
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 0
14926: PUSH
14927: LD_INT 2
14929: NEG
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PUSH
14935: LD_INT 1
14937: PUSH
14938: LD_INT 1
14940: NEG
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 2
14948: PUSH
14949: LD_INT 0
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: LD_INT 2
14958: PUSH
14959: LD_INT 1
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 2
14968: PUSH
14969: LD_INT 2
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: LD_INT 2
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 0
14988: PUSH
14989: LD_INT 2
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: LD_INT 1
14998: NEG
14999: PUSH
15000: LD_INT 1
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 2
15009: NEG
15010: PUSH
15011: LD_INT 0
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PUSH
15018: LD_INT 2
15020: NEG
15021: PUSH
15022: LD_INT 1
15024: NEG
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: LD_INT 2
15032: NEG
15033: PUSH
15034: LD_INT 2
15036: NEG
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15063: LD_ADDR_VAR 0 18
15067: PUSH
15068: LD_INT 0
15070: PUSH
15071: LD_INT 0
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: LD_INT 0
15080: PUSH
15081: LD_INT 1
15083: NEG
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 1
15091: PUSH
15092: LD_INT 0
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 1
15101: PUSH
15102: LD_INT 1
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: LD_INT 0
15111: PUSH
15112: LD_INT 1
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 1
15121: NEG
15122: PUSH
15123: LD_INT 0
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 1
15132: NEG
15133: PUSH
15134: LD_INT 1
15136: NEG
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PUSH
15142: LD_INT 1
15144: NEG
15145: PUSH
15146: LD_INT 2
15148: NEG
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 0
15156: PUSH
15157: LD_INT 2
15159: NEG
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 1
15167: PUSH
15168: LD_INT 1
15170: NEG
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: LD_INT 2
15178: PUSH
15179: LD_INT 0
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 2
15188: PUSH
15189: LD_INT 1
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PUSH
15196: LD_INT 2
15198: PUSH
15199: LD_INT 2
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 1
15208: PUSH
15209: LD_INT 2
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: LD_INT 0
15218: PUSH
15219: LD_INT 2
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: LD_INT 1
15228: NEG
15229: PUSH
15230: LD_INT 1
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: LD_INT 2
15239: NEG
15240: PUSH
15241: LD_INT 0
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 2
15250: NEG
15251: PUSH
15252: LD_INT 1
15254: NEG
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: LD_INT 2
15262: NEG
15263: PUSH
15264: LD_INT 2
15266: NEG
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15293: LD_ADDR_VAR 0 19
15297: PUSH
15298: LD_INT 0
15300: PUSH
15301: LD_INT 0
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: LD_INT 0
15310: PUSH
15311: LD_INT 1
15313: NEG
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 1
15321: PUSH
15322: LD_INT 0
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 1
15331: PUSH
15332: LD_INT 1
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 0
15341: PUSH
15342: LD_INT 1
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: LD_INT 1
15351: NEG
15352: PUSH
15353: LD_INT 0
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 1
15362: NEG
15363: PUSH
15364: LD_INT 1
15366: NEG
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: LD_INT 1
15374: NEG
15375: PUSH
15376: LD_INT 2
15378: NEG
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 0
15386: PUSH
15387: LD_INT 2
15389: NEG
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 1
15397: PUSH
15398: LD_INT 1
15400: NEG
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PUSH
15406: LD_INT 2
15408: PUSH
15409: LD_INT 0
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: LD_INT 2
15418: PUSH
15419: LD_INT 1
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 2
15428: PUSH
15429: LD_INT 2
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: LD_INT 2
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: LD_INT 0
15448: PUSH
15449: LD_INT 2
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 1
15458: NEG
15459: PUSH
15460: LD_INT 1
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 2
15469: NEG
15470: PUSH
15471: LD_INT 0
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 2
15480: NEG
15481: PUSH
15482: LD_INT 1
15484: NEG
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: LD_INT 2
15492: NEG
15493: PUSH
15494: LD_INT 2
15496: NEG
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15523: LD_ADDR_VAR 0 20
15527: PUSH
15528: LD_INT 0
15530: PUSH
15531: LD_INT 0
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 0
15540: PUSH
15541: LD_INT 1
15543: NEG
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 1
15551: PUSH
15552: LD_INT 0
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: LD_INT 1
15561: PUSH
15562: LD_INT 1
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: LD_INT 0
15571: PUSH
15572: LD_INT 1
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 1
15581: NEG
15582: PUSH
15583: LD_INT 0
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 1
15592: NEG
15593: PUSH
15594: LD_INT 1
15596: NEG
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 1
15604: NEG
15605: PUSH
15606: LD_INT 2
15608: NEG
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 0
15616: PUSH
15617: LD_INT 2
15619: NEG
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: PUSH
15625: LD_INT 1
15627: PUSH
15628: LD_INT 1
15630: NEG
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 2
15638: PUSH
15639: LD_INT 0
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 2
15648: PUSH
15649: LD_INT 1
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: LD_INT 2
15658: PUSH
15659: LD_INT 2
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 1
15668: PUSH
15669: LD_INT 2
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 0
15678: PUSH
15679: LD_INT 2
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: LD_INT 1
15688: NEG
15689: PUSH
15690: LD_INT 1
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: LD_INT 2
15699: NEG
15700: PUSH
15701: LD_INT 0
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 2
15710: NEG
15711: PUSH
15712: LD_INT 1
15714: NEG
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PUSH
15720: LD_INT 2
15722: NEG
15723: PUSH
15724: LD_INT 2
15726: NEG
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15753: LD_ADDR_VAR 0 21
15757: PUSH
15758: LD_INT 0
15760: PUSH
15761: LD_INT 0
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 0
15770: PUSH
15771: LD_INT 1
15773: NEG
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 1
15781: PUSH
15782: LD_INT 0
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: LD_INT 1
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 0
15801: PUSH
15802: LD_INT 1
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 1
15811: NEG
15812: PUSH
15813: LD_INT 0
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 1
15822: NEG
15823: PUSH
15824: LD_INT 1
15826: NEG
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 1
15834: NEG
15835: PUSH
15836: LD_INT 2
15838: NEG
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 0
15846: PUSH
15847: LD_INT 2
15849: NEG
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 1
15857: PUSH
15858: LD_INT 1
15860: NEG
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 2
15868: PUSH
15869: LD_INT 0
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: LD_INT 2
15878: PUSH
15879: LD_INT 1
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PUSH
15886: LD_INT 2
15888: PUSH
15889: LD_INT 2
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 1
15898: PUSH
15899: LD_INT 2
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 0
15908: PUSH
15909: LD_INT 2
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 1
15918: NEG
15919: PUSH
15920: LD_INT 1
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 2
15929: NEG
15930: PUSH
15931: LD_INT 0
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 2
15940: NEG
15941: PUSH
15942: LD_INT 1
15944: NEG
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 2
15952: NEG
15953: PUSH
15954: LD_INT 2
15956: NEG
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15983: LD_ADDR_VAR 0 22
15987: PUSH
15988: LD_INT 0
15990: PUSH
15991: LD_INT 0
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 0
16000: PUSH
16001: LD_INT 1
16003: NEG
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 1
16011: PUSH
16012: LD_INT 0
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: LD_INT 1
16021: PUSH
16022: LD_INT 1
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: LD_INT 0
16031: PUSH
16032: LD_INT 1
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: LD_INT 1
16041: NEG
16042: PUSH
16043: LD_INT 0
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 1
16052: NEG
16053: PUSH
16054: LD_INT 1
16056: NEG
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 1
16064: NEG
16065: PUSH
16066: LD_INT 2
16068: NEG
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 0
16076: PUSH
16077: LD_INT 2
16079: NEG
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PUSH
16085: LD_INT 1
16087: PUSH
16088: LD_INT 1
16090: NEG
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 2
16098: PUSH
16099: LD_INT 0
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: LD_INT 2
16108: PUSH
16109: LD_INT 1
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PUSH
16116: LD_INT 2
16118: PUSH
16119: LD_INT 2
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PUSH
16126: LD_INT 1
16128: PUSH
16129: LD_INT 2
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: LD_INT 0
16138: PUSH
16139: LD_INT 2
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PUSH
16146: LD_INT 1
16148: NEG
16149: PUSH
16150: LD_INT 1
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 2
16159: NEG
16160: PUSH
16161: LD_INT 0
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 2
16170: NEG
16171: PUSH
16172: LD_INT 1
16174: NEG
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: LD_INT 2
16182: NEG
16183: PUSH
16184: LD_INT 2
16186: NEG
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
16213: LD_ADDR_VAR 0 23
16217: PUSH
16218: LD_INT 0
16220: PUSH
16221: LD_INT 0
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: LD_INT 0
16230: PUSH
16231: LD_INT 1
16233: NEG
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 1
16241: PUSH
16242: LD_INT 0
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 1
16251: PUSH
16252: LD_INT 1
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 0
16261: PUSH
16262: LD_INT 1
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 1
16271: NEG
16272: PUSH
16273: LD_INT 0
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 1
16282: NEG
16283: PUSH
16284: LD_INT 1
16286: NEG
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: LD_INT 1
16294: NEG
16295: PUSH
16296: LD_INT 2
16298: NEG
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 0
16306: PUSH
16307: LD_INT 2
16309: NEG
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 1
16317: PUSH
16318: LD_INT 1
16320: NEG
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 2
16328: PUSH
16329: LD_INT 0
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 2
16338: PUSH
16339: LD_INT 1
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 2
16348: PUSH
16349: LD_INT 2
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 1
16358: PUSH
16359: LD_INT 2
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 0
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 1
16378: NEG
16379: PUSH
16380: LD_INT 1
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 2
16389: NEG
16390: PUSH
16391: LD_INT 0
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PUSH
16398: LD_INT 2
16400: NEG
16401: PUSH
16402: LD_INT 1
16404: NEG
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: LD_INT 2
16412: NEG
16413: PUSH
16414: LD_INT 2
16416: NEG
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 2
16424: NEG
16425: PUSH
16426: LD_INT 3
16428: NEG
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 1
16436: NEG
16437: PUSH
16438: LD_INT 3
16440: NEG
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 1
16448: PUSH
16449: LD_INT 2
16451: NEG
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: LD_INT 2
16459: PUSH
16460: LD_INT 1
16462: NEG
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
16493: LD_ADDR_VAR 0 24
16497: PUSH
16498: LD_INT 0
16500: PUSH
16501: LD_INT 0
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 0
16510: PUSH
16511: LD_INT 1
16513: NEG
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 1
16521: PUSH
16522: LD_INT 0
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 1
16531: PUSH
16532: LD_INT 1
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: LD_INT 0
16541: PUSH
16542: LD_INT 1
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PUSH
16549: LD_INT 1
16551: NEG
16552: PUSH
16553: LD_INT 0
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 1
16562: NEG
16563: PUSH
16564: LD_INT 1
16566: NEG
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PUSH
16572: LD_INT 1
16574: NEG
16575: PUSH
16576: LD_INT 2
16578: NEG
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: LD_INT 0
16586: PUSH
16587: LD_INT 2
16589: NEG
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 1
16597: PUSH
16598: LD_INT 1
16600: NEG
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 2
16608: PUSH
16609: LD_INT 0
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 2
16618: PUSH
16619: LD_INT 1
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: LD_INT 2
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 1
16638: PUSH
16639: LD_INT 2
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 0
16648: PUSH
16649: LD_INT 2
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 1
16658: NEG
16659: PUSH
16660: LD_INT 1
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 2
16669: NEG
16670: PUSH
16671: LD_INT 0
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 2
16680: NEG
16681: PUSH
16682: LD_INT 1
16684: NEG
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 2
16692: NEG
16693: PUSH
16694: LD_INT 2
16696: NEG
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 1
16704: PUSH
16705: LD_INT 2
16707: NEG
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 2
16715: PUSH
16716: LD_INT 1
16718: NEG
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 3
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: LD_INT 3
16736: PUSH
16737: LD_INT 2
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
16769: LD_ADDR_VAR 0 25
16773: PUSH
16774: LD_INT 0
16776: PUSH
16777: LD_INT 0
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: PUSH
16784: LD_INT 0
16786: PUSH
16787: LD_INT 1
16789: NEG
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 1
16797: PUSH
16798: LD_INT 0
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: PUSH
16805: LD_INT 1
16807: PUSH
16808: LD_INT 1
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: LD_INT 0
16817: PUSH
16818: LD_INT 1
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 1
16827: NEG
16828: PUSH
16829: LD_INT 0
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 1
16838: NEG
16839: PUSH
16840: LD_INT 1
16842: NEG
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 1
16850: NEG
16851: PUSH
16852: LD_INT 2
16854: NEG
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 0
16862: PUSH
16863: LD_INT 2
16865: NEG
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 1
16873: PUSH
16874: LD_INT 1
16876: NEG
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: LD_INT 2
16884: PUSH
16885: LD_INT 0
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 2
16894: PUSH
16895: LD_INT 1
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 2
16904: PUSH
16905: LD_INT 2
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 1
16914: PUSH
16915: LD_INT 2
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 0
16924: PUSH
16925: LD_INT 2
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 1
16934: NEG
16935: PUSH
16936: LD_INT 1
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 2
16945: NEG
16946: PUSH
16947: LD_INT 0
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 2
16956: NEG
16957: PUSH
16958: LD_INT 1
16960: NEG
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 2
16968: NEG
16969: PUSH
16970: LD_INT 2
16972: NEG
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: LD_INT 3
16980: PUSH
16981: LD_INT 1
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 3
16990: PUSH
16991: LD_INT 2
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: LD_INT 2
17000: PUSH
17001: LD_INT 3
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 1
17010: PUSH
17011: LD_INT 3
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
17043: LD_ADDR_VAR 0 26
17047: PUSH
17048: LD_INT 0
17050: PUSH
17051: LD_INT 0
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 0
17060: PUSH
17061: LD_INT 1
17063: NEG
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: LD_INT 0
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 1
17081: PUSH
17082: LD_INT 1
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 0
17091: PUSH
17092: LD_INT 1
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 1
17101: NEG
17102: PUSH
17103: LD_INT 0
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 1
17112: NEG
17113: PUSH
17114: LD_INT 1
17116: NEG
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 1
17124: NEG
17125: PUSH
17126: LD_INT 2
17128: NEG
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 0
17136: PUSH
17137: LD_INT 2
17139: NEG
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: LD_INT 1
17150: NEG
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 2
17158: PUSH
17159: LD_INT 0
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PUSH
17166: LD_INT 2
17168: PUSH
17169: LD_INT 1
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: PUSH
17176: LD_INT 2
17178: PUSH
17179: LD_INT 2
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 1
17188: PUSH
17189: LD_INT 2
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 0
17198: PUSH
17199: LD_INT 2
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 1
17208: NEG
17209: PUSH
17210: LD_INT 1
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 2
17219: NEG
17220: PUSH
17221: LD_INT 0
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: LD_INT 2
17230: NEG
17231: PUSH
17232: LD_INT 1
17234: NEG
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 2
17242: NEG
17243: PUSH
17244: LD_INT 2
17246: NEG
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 2
17254: PUSH
17255: LD_INT 3
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: LD_INT 1
17264: PUSH
17265: LD_INT 3
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 1
17274: NEG
17275: PUSH
17276: LD_INT 2
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 2
17285: NEG
17286: PUSH
17287: LD_INT 1
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
17319: LD_ADDR_VAR 0 27
17323: PUSH
17324: LD_INT 0
17326: PUSH
17327: LD_INT 0
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 0
17336: PUSH
17337: LD_INT 1
17339: NEG
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 1
17347: PUSH
17348: LD_INT 0
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: LD_INT 1
17357: PUSH
17358: LD_INT 1
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 0
17367: PUSH
17368: LD_INT 1
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 1
17377: NEG
17378: PUSH
17379: LD_INT 0
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 1
17388: NEG
17389: PUSH
17390: LD_INT 1
17392: NEG
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 1
17400: NEG
17401: PUSH
17402: LD_INT 2
17404: NEG
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 0
17412: PUSH
17413: LD_INT 2
17415: NEG
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 1
17423: PUSH
17424: LD_INT 1
17426: NEG
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 2
17434: PUSH
17435: LD_INT 0
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 2
17444: PUSH
17445: LD_INT 1
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 2
17454: PUSH
17455: LD_INT 2
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 1
17464: PUSH
17465: LD_INT 2
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 0
17474: PUSH
17475: LD_INT 2
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 1
17484: NEG
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 2
17495: NEG
17496: PUSH
17497: LD_INT 0
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 2
17506: NEG
17507: PUSH
17508: LD_INT 1
17510: NEG
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 2
17518: NEG
17519: PUSH
17520: LD_INT 2
17522: NEG
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 1
17530: NEG
17531: PUSH
17532: LD_INT 2
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 2
17541: NEG
17542: PUSH
17543: LD_INT 1
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 3
17552: NEG
17553: PUSH
17554: LD_INT 1
17556: NEG
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 3
17564: NEG
17565: PUSH
17566: LD_INT 2
17568: NEG
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
17599: LD_ADDR_VAR 0 28
17603: PUSH
17604: LD_INT 0
17606: PUSH
17607: LD_INT 0
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 0
17616: PUSH
17617: LD_INT 1
17619: NEG
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 1
17627: PUSH
17628: LD_INT 0
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 1
17637: PUSH
17638: LD_INT 1
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 0
17647: PUSH
17648: LD_INT 1
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 1
17657: NEG
17658: PUSH
17659: LD_INT 0
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 1
17668: NEG
17669: PUSH
17670: LD_INT 1
17672: NEG
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 1
17680: NEG
17681: PUSH
17682: LD_INT 2
17684: NEG
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 0
17692: PUSH
17693: LD_INT 2
17695: NEG
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 1
17703: PUSH
17704: LD_INT 1
17706: NEG
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 2
17714: PUSH
17715: LD_INT 0
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 2
17724: PUSH
17725: LD_INT 1
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 2
17734: PUSH
17735: LD_INT 2
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 1
17744: PUSH
17745: LD_INT 2
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 0
17754: PUSH
17755: LD_INT 2
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 1
17764: NEG
17765: PUSH
17766: LD_INT 1
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: PUSH
17773: LD_INT 2
17775: NEG
17776: PUSH
17777: LD_INT 0
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 2
17786: NEG
17787: PUSH
17788: LD_INT 1
17790: NEG
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 2
17798: NEG
17799: PUSH
17800: LD_INT 2
17802: NEG
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 2
17810: NEG
17811: PUSH
17812: LD_INT 3
17814: NEG
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 1
17822: NEG
17823: PUSH
17824: LD_INT 3
17826: NEG
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 3
17834: NEG
17835: PUSH
17836: LD_INT 1
17838: NEG
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 3
17846: NEG
17847: PUSH
17848: LD_INT 2
17850: NEG
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
17881: LD_ADDR_VAR 0 29
17885: PUSH
17886: LD_INT 0
17888: PUSH
17889: LD_INT 0
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 0
17898: PUSH
17899: LD_INT 1
17901: NEG
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 1
17909: PUSH
17910: LD_INT 0
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 1
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 0
17929: PUSH
17930: LD_INT 1
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 1
17939: NEG
17940: PUSH
17941: LD_INT 0
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 1
17950: NEG
17951: PUSH
17952: LD_INT 1
17954: NEG
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 1
17962: NEG
17963: PUSH
17964: LD_INT 2
17966: NEG
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 0
17974: PUSH
17975: LD_INT 2
17977: NEG
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 1
17985: PUSH
17986: LD_INT 1
17988: NEG
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 2
17996: PUSH
17997: LD_INT 0
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 2
18006: PUSH
18007: LD_INT 1
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 1
18016: PUSH
18017: LD_INT 2
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: LD_INT 2
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 1
18036: NEG
18037: PUSH
18038: LD_INT 1
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 2
18047: NEG
18048: PUSH
18049: LD_INT 1
18051: NEG
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 2
18059: NEG
18060: PUSH
18061: LD_INT 2
18063: NEG
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 2
18071: NEG
18072: PUSH
18073: LD_INT 3
18075: NEG
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 2
18083: PUSH
18084: LD_INT 1
18086: NEG
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 3
18094: PUSH
18095: LD_INT 1
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: LD_INT 3
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 1
18114: NEG
18115: PUSH
18116: LD_INT 2
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 3
18125: NEG
18126: PUSH
18127: LD_INT 2
18129: NEG
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
18160: LD_ADDR_VAR 0 30
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: LD_INT 0
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 0
18177: PUSH
18178: LD_INT 1
18180: NEG
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: LD_INT 0
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 1
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 0
18208: PUSH
18209: LD_INT 1
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 1
18218: NEG
18219: PUSH
18220: LD_INT 0
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 1
18229: NEG
18230: PUSH
18231: LD_INT 1
18233: NEG
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 1
18241: NEG
18242: PUSH
18243: LD_INT 2
18245: NEG
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 0
18253: PUSH
18254: LD_INT 2
18256: NEG
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 1
18264: PUSH
18265: LD_INT 1
18267: NEG
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 2
18275: PUSH
18276: LD_INT 0
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 2
18285: PUSH
18286: LD_INT 1
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 2
18295: PUSH
18296: LD_INT 2
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: LD_INT 2
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 1
18315: NEG
18316: PUSH
18317: LD_INT 1
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 2
18326: NEG
18327: PUSH
18328: LD_INT 0
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 2
18337: NEG
18338: PUSH
18339: LD_INT 1
18341: NEG
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 1
18349: NEG
18350: PUSH
18351: LD_INT 3
18353: NEG
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 1
18361: PUSH
18362: LD_INT 2
18364: NEG
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 3
18372: PUSH
18373: LD_INT 2
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 2
18382: PUSH
18383: LD_INT 3
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 2
18392: NEG
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 3
18403: NEG
18404: PUSH
18405: LD_INT 1
18407: NEG
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18438: LD_ADDR_VAR 0 31
18442: PUSH
18443: LD_INT 0
18445: PUSH
18446: LD_INT 0
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 0
18455: PUSH
18456: LD_INT 1
18458: NEG
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: LD_INT 0
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 1
18476: PUSH
18477: LD_INT 1
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 0
18486: PUSH
18487: LD_INT 1
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 1
18496: NEG
18497: PUSH
18498: LD_INT 0
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 1
18507: NEG
18508: PUSH
18509: LD_INT 1
18511: NEG
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 1
18519: NEG
18520: PUSH
18521: LD_INT 2
18523: NEG
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 1
18531: PUSH
18532: LD_INT 1
18534: NEG
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 2
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 2
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 2
18562: PUSH
18563: LD_INT 2
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: LD_INT 2
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 0
18582: PUSH
18583: LD_INT 2
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 1
18592: NEG
18593: PUSH
18594: LD_INT 1
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 2
18603: NEG
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 2
18615: NEG
18616: PUSH
18617: LD_INT 2
18619: NEG
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 2
18627: NEG
18628: PUSH
18629: LD_INT 3
18631: NEG
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 2
18639: PUSH
18640: LD_INT 1
18642: NEG
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 3
18650: PUSH
18651: LD_INT 1
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: LD_INT 3
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 1
18670: NEG
18671: PUSH
18672: LD_INT 2
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 3
18681: NEG
18682: PUSH
18683: LD_INT 2
18685: NEG
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
18716: LD_ADDR_VAR 0 32
18720: PUSH
18721: LD_INT 0
18723: PUSH
18724: LD_INT 0
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 0
18733: PUSH
18734: LD_INT 1
18736: NEG
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: LD_INT 0
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 1
18754: PUSH
18755: LD_INT 1
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 0
18764: PUSH
18765: LD_INT 1
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 1
18774: NEG
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 1
18785: NEG
18786: PUSH
18787: LD_INT 1
18789: NEG
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 1
18797: NEG
18798: PUSH
18799: LD_INT 2
18801: NEG
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 0
18809: PUSH
18810: LD_INT 2
18812: NEG
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: LD_INT 1
18823: NEG
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 2
18831: PUSH
18832: LD_INT 1
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 2
18841: PUSH
18842: LD_INT 2
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 1
18851: PUSH
18852: LD_INT 2
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 0
18861: PUSH
18862: LD_INT 2
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 1
18871: NEG
18872: PUSH
18873: LD_INT 1
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 2
18882: NEG
18883: PUSH
18884: LD_INT 0
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 2
18893: NEG
18894: PUSH
18895: LD_INT 1
18897: NEG
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 1
18905: NEG
18906: PUSH
18907: LD_INT 3
18909: NEG
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 1
18917: PUSH
18918: LD_INT 2
18920: NEG
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 3
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 2
18938: PUSH
18939: LD_INT 3
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 2
18948: NEG
18949: PUSH
18950: LD_INT 1
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 3
18959: NEG
18960: PUSH
18961: LD_INT 1
18963: NEG
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18994: LD_ADDR_VAR 0 33
18998: PUSH
18999: LD_INT 0
19001: PUSH
19002: LD_INT 0
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 0
19011: PUSH
19012: LD_INT 1
19014: NEG
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 1
19022: PUSH
19023: LD_INT 0
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 1
19032: PUSH
19033: LD_INT 1
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 0
19042: PUSH
19043: LD_INT 1
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 1
19052: NEG
19053: PUSH
19054: LD_INT 0
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 1
19063: NEG
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 1
19075: NEG
19076: PUSH
19077: LD_INT 2
19079: NEG
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: LD_INT 1
19090: NEG
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: LD_INT 2
19098: PUSH
19099: LD_INT 0
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: LD_INT 1
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 1
19118: PUSH
19119: LD_INT 2
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 0
19128: PUSH
19129: LD_INT 2
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 1
19138: NEG
19139: PUSH
19140: LD_INT 1
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 2
19149: NEG
19150: PUSH
19151: LD_INT 0
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 2
19160: NEG
19161: PUSH
19162: LD_INT 1
19164: NEG
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 2
19172: NEG
19173: PUSH
19174: LD_INT 2
19176: NEG
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 2
19184: NEG
19185: PUSH
19186: LD_INT 3
19188: NEG
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 2
19196: PUSH
19197: LD_INT 1
19199: NEG
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 3
19207: PUSH
19208: LD_INT 1
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 1
19217: PUSH
19218: LD_INT 3
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 1
19227: NEG
19228: PUSH
19229: LD_INT 2
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 3
19238: NEG
19239: PUSH
19240: LD_INT 2
19242: NEG
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19273: LD_ADDR_VAR 0 34
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: LD_INT 0
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 0
19290: PUSH
19291: LD_INT 1
19293: NEG
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: LD_INT 0
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 1
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 1
19331: NEG
19332: PUSH
19333: LD_INT 0
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: LD_INT 1
19346: NEG
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 1
19354: NEG
19355: PUSH
19356: LD_INT 2
19358: NEG
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 0
19366: PUSH
19367: LD_INT 2
19369: NEG
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 1
19377: PUSH
19378: LD_INT 1
19380: NEG
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 2
19398: PUSH
19399: LD_INT 2
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: LD_INT 2
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 1
19418: NEG
19419: PUSH
19420: LD_INT 1
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 2
19429: NEG
19430: PUSH
19431: LD_INT 0
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 2
19440: NEG
19441: PUSH
19442: LD_INT 1
19444: NEG
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 2
19452: NEG
19453: PUSH
19454: LD_INT 2
19456: NEG
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 1
19464: NEG
19465: PUSH
19466: LD_INT 3
19468: NEG
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 1
19476: PUSH
19477: LD_INT 2
19479: NEG
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 3
19487: PUSH
19488: LD_INT 2
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 2
19497: PUSH
19498: LD_INT 3
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 2
19507: NEG
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 3
19518: NEG
19519: PUSH
19520: LD_INT 1
19522: NEG
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
19553: LD_ADDR_VAR 0 35
19557: PUSH
19558: LD_INT 0
19560: PUSH
19561: LD_INT 0
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 0
19570: PUSH
19571: LD_INT 1
19573: NEG
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 1
19581: PUSH
19582: LD_INT 0
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 1
19591: PUSH
19592: LD_INT 1
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 0
19601: PUSH
19602: LD_INT 1
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 1
19611: NEG
19612: PUSH
19613: LD_INT 0
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 1
19622: NEG
19623: PUSH
19624: LD_INT 1
19626: NEG
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 2
19634: PUSH
19635: LD_INT 1
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 2
19644: NEG
19645: PUSH
19646: LD_INT 1
19648: NEG
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
19665: LD_ADDR_VAR 0 36
19669: PUSH
19670: LD_INT 0
19672: PUSH
19673: LD_INT 0
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 0
19682: PUSH
19683: LD_INT 1
19685: NEG
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 1
19693: PUSH
19694: LD_INT 0
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 1
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: LD_INT 0
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 1
19734: NEG
19735: PUSH
19736: LD_INT 1
19738: NEG
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 1
19746: NEG
19747: PUSH
19748: LD_INT 2
19750: NEG
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: LD_INT 2
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
19777: LD_ADDR_VAR 0 37
19781: PUSH
19782: LD_INT 0
19784: PUSH
19785: LD_INT 0
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 0
19794: PUSH
19795: LD_INT 1
19797: NEG
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: LD_INT 0
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 1
19815: PUSH
19816: LD_INT 1
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 0
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 1
19835: NEG
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 1
19846: NEG
19847: PUSH
19848: LD_INT 1
19850: NEG
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 1
19858: PUSH
19859: LD_INT 1
19861: NEG
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 1
19869: NEG
19870: PUSH
19871: LD_INT 1
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
19889: LD_ADDR_VAR 0 38
19893: PUSH
19894: LD_INT 0
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 0
19906: PUSH
19907: LD_INT 1
19909: NEG
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: LD_INT 0
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 1
19927: PUSH
19928: LD_INT 1
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 0
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 1
19947: NEG
19948: PUSH
19949: LD_INT 0
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 1
19958: NEG
19959: PUSH
19960: LD_INT 1
19962: NEG
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 2
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 2
19980: NEG
19981: PUSH
19982: LD_INT 1
19984: NEG
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20001: LD_ADDR_VAR 0 39
20005: PUSH
20006: LD_INT 0
20008: PUSH
20009: LD_INT 0
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 0
20018: PUSH
20019: LD_INT 1
20021: NEG
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 1
20029: PUSH
20030: LD_INT 0
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 1
20039: PUSH
20040: LD_INT 1
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 0
20049: PUSH
20050: LD_INT 1
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 1
20059: NEG
20060: PUSH
20061: LD_INT 0
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 1
20070: NEG
20071: PUSH
20072: LD_INT 1
20074: NEG
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 1
20082: NEG
20083: PUSH
20084: LD_INT 2
20086: NEG
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 1
20094: PUSH
20095: LD_INT 2
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20113: LD_ADDR_VAR 0 40
20117: PUSH
20118: LD_INT 0
20120: PUSH
20121: LD_INT 0
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 0
20130: PUSH
20131: LD_INT 1
20133: NEG
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: LD_INT 0
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 1
20151: PUSH
20152: LD_INT 1
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 0
20161: PUSH
20162: LD_INT 1
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 1
20171: NEG
20172: PUSH
20173: LD_INT 0
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 1
20182: NEG
20183: PUSH
20184: LD_INT 1
20186: NEG
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: LD_INT 1
20197: NEG
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 1
20205: NEG
20206: PUSH
20207: LD_INT 1
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20225: LD_ADDR_VAR 0 41
20229: PUSH
20230: LD_INT 0
20232: PUSH
20233: LD_INT 0
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 0
20242: PUSH
20243: LD_INT 1
20245: NEG
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 1
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 1
20263: PUSH
20264: LD_INT 1
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 0
20273: PUSH
20274: LD_INT 1
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 1
20283: NEG
20284: PUSH
20285: LD_INT 0
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 1
20294: NEG
20295: PUSH
20296: LD_INT 1
20298: NEG
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 1
20306: NEG
20307: PUSH
20308: LD_INT 2
20310: NEG
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 1
20318: PUSH
20319: LD_INT 1
20321: NEG
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 2
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 2
20339: PUSH
20340: LD_INT 1
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 2
20349: PUSH
20350: LD_INT 2
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 1
20359: PUSH
20360: LD_INT 2
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 1
20369: NEG
20370: PUSH
20371: LD_INT 1
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 2
20380: NEG
20381: PUSH
20382: LD_INT 0
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 2
20391: NEG
20392: PUSH
20393: LD_INT 1
20395: NEG
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 2
20403: NEG
20404: PUSH
20405: LD_INT 2
20407: NEG
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: NEG
20416: PUSH
20417: LD_INT 3
20419: NEG
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 2
20427: PUSH
20428: LD_INT 1
20430: NEG
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 3
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 3
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 3
20458: PUSH
20459: LD_INT 2
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 3
20468: PUSH
20469: LD_INT 3
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 2
20478: PUSH
20479: LD_INT 3
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 2
20488: NEG
20489: PUSH
20490: LD_INT 1
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 3
20499: NEG
20500: PUSH
20501: LD_INT 0
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 3
20510: NEG
20511: PUSH
20512: LD_INT 1
20514: NEG
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 3
20522: NEG
20523: PUSH
20524: LD_INT 2
20526: NEG
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 3
20534: NEG
20535: PUSH
20536: LD_INT 3
20538: NEG
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20575: LD_ADDR_VAR 0 42
20579: PUSH
20580: LD_INT 0
20582: PUSH
20583: LD_INT 0
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 0
20592: PUSH
20593: LD_INT 1
20595: NEG
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 1
20603: PUSH
20604: LD_INT 0
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 1
20613: PUSH
20614: LD_INT 1
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 0
20623: PUSH
20624: LD_INT 1
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 1
20633: NEG
20634: PUSH
20635: LD_INT 0
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 1
20644: NEG
20645: PUSH
20646: LD_INT 1
20648: NEG
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 1
20656: NEG
20657: PUSH
20658: LD_INT 2
20660: NEG
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: LD_INT 2
20671: NEG
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 1
20679: PUSH
20680: LD_INT 1
20682: NEG
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 2
20690: PUSH
20691: LD_INT 1
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 2
20700: PUSH
20701: LD_INT 2
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 1
20710: PUSH
20711: LD_INT 2
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 0
20720: PUSH
20721: LD_INT 2
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 1
20730: NEG
20731: PUSH
20732: LD_INT 1
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 2
20741: NEG
20742: PUSH
20743: LD_INT 1
20745: NEG
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 2
20753: NEG
20754: PUSH
20755: LD_INT 2
20757: NEG
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 2
20765: NEG
20766: PUSH
20767: LD_INT 3
20769: NEG
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 1
20777: NEG
20778: PUSH
20779: LD_INT 3
20781: NEG
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 0
20789: PUSH
20790: LD_INT 3
20792: NEG
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 1
20800: PUSH
20801: LD_INT 2
20803: NEG
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 3
20811: PUSH
20812: LD_INT 2
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 3
20821: PUSH
20822: LD_INT 3
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 2
20831: PUSH
20832: LD_INT 3
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 1
20841: PUSH
20842: LD_INT 3
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 0
20851: PUSH
20852: LD_INT 3
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 1
20861: NEG
20862: PUSH
20863: LD_INT 2
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 3
20872: NEG
20873: PUSH
20874: LD_INT 2
20876: NEG
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 3
20884: NEG
20885: PUSH
20886: LD_INT 3
20888: NEG
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
20925: LD_ADDR_VAR 0 43
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: LD_INT 0
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 0
20942: PUSH
20943: LD_INT 1
20945: NEG
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 1
20953: PUSH
20954: LD_INT 0
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 1
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 0
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 1
20983: NEG
20984: PUSH
20985: LD_INT 0
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 1
20994: NEG
20995: PUSH
20996: LD_INT 1
20998: NEG
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 1
21006: NEG
21007: PUSH
21008: LD_INT 2
21010: NEG
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 0
21018: PUSH
21019: LD_INT 2
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 1
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 2
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 2
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 1
21060: PUSH
21061: LD_INT 2
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: LD_INT 2
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 1
21080: NEG
21081: PUSH
21082: LD_INT 1
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 2
21091: NEG
21092: PUSH
21093: LD_INT 0
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 2
21102: NEG
21103: PUSH
21104: LD_INT 1
21106: NEG
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 1
21114: NEG
21115: PUSH
21116: LD_INT 3
21118: NEG
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 0
21126: PUSH
21127: LD_INT 3
21129: NEG
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 1
21137: PUSH
21138: LD_INT 2
21140: NEG
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 2
21148: PUSH
21149: LD_INT 1
21151: NEG
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 3
21159: PUSH
21160: LD_INT 0
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 3
21169: PUSH
21170: LD_INT 1
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 1
21179: PUSH
21180: LD_INT 3
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 0
21189: PUSH
21190: LD_INT 3
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 1
21199: NEG
21200: PUSH
21201: LD_INT 2
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 2
21210: NEG
21211: PUSH
21212: LD_INT 1
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 3
21221: NEG
21222: PUSH
21223: LD_INT 0
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 3
21232: NEG
21233: PUSH
21234: LD_INT 1
21236: NEG
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21273: LD_ADDR_VAR 0 44
21277: PUSH
21278: LD_INT 0
21280: PUSH
21281: LD_INT 0
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 0
21290: PUSH
21291: LD_INT 1
21293: NEG
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: PUSH
21302: LD_INT 0
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: LD_INT 1
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 0
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 1
21331: NEG
21332: PUSH
21333: LD_INT 0
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 1
21342: NEG
21343: PUSH
21344: LD_INT 1
21346: NEG
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 1
21354: NEG
21355: PUSH
21356: LD_INT 2
21358: NEG
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 1
21366: PUSH
21367: LD_INT 1
21369: NEG
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 2
21377: PUSH
21378: LD_INT 0
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 2
21387: PUSH
21388: LD_INT 1
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 2
21397: PUSH
21398: LD_INT 2
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 1
21407: PUSH
21408: LD_INT 2
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 1
21417: NEG
21418: PUSH
21419: LD_INT 1
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 2
21428: NEG
21429: PUSH
21430: LD_INT 0
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 2
21439: NEG
21440: PUSH
21441: LD_INT 1
21443: NEG
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 2
21451: NEG
21452: PUSH
21453: LD_INT 2
21455: NEG
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 2
21463: NEG
21464: PUSH
21465: LD_INT 3
21467: NEG
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 2
21475: PUSH
21476: LD_INT 1
21478: NEG
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 3
21486: PUSH
21487: LD_INT 0
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 3
21496: PUSH
21497: LD_INT 1
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 3
21506: PUSH
21507: LD_INT 2
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 3
21516: PUSH
21517: LD_INT 3
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 2
21526: PUSH
21527: LD_INT 3
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 2
21536: NEG
21537: PUSH
21538: LD_INT 1
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 3
21547: NEG
21548: PUSH
21549: LD_INT 0
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 3
21558: NEG
21559: PUSH
21560: LD_INT 1
21562: NEG
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 3
21570: NEG
21571: PUSH
21572: LD_INT 2
21574: NEG
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 3
21582: NEG
21583: PUSH
21584: LD_INT 3
21586: NEG
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21623: LD_ADDR_VAR 0 45
21627: PUSH
21628: LD_INT 0
21630: PUSH
21631: LD_INT 0
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 0
21640: PUSH
21641: LD_INT 1
21643: NEG
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 1
21651: PUSH
21652: LD_INT 0
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 1
21661: PUSH
21662: LD_INT 1
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 0
21671: PUSH
21672: LD_INT 1
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 1
21681: NEG
21682: PUSH
21683: LD_INT 0
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 1
21692: NEG
21693: PUSH
21694: LD_INT 1
21696: NEG
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 1
21704: NEG
21705: PUSH
21706: LD_INT 2
21708: NEG
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 0
21716: PUSH
21717: LD_INT 2
21719: NEG
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 1
21727: PUSH
21728: LD_INT 1
21730: NEG
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 2
21748: PUSH
21749: LD_INT 2
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: LD_INT 2
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 0
21768: PUSH
21769: LD_INT 2
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 1
21778: NEG
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 2
21789: NEG
21790: PUSH
21791: LD_INT 1
21793: NEG
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 2
21801: NEG
21802: PUSH
21803: LD_INT 2
21805: NEG
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 2
21813: NEG
21814: PUSH
21815: LD_INT 3
21817: NEG
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: LD_INT 3
21829: NEG
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 0
21837: PUSH
21838: LD_INT 3
21840: NEG
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: PUSH
21849: LD_INT 2
21851: NEG
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 3
21859: PUSH
21860: LD_INT 2
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 3
21869: PUSH
21870: LD_INT 3
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 2
21879: PUSH
21880: LD_INT 3
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 1
21889: PUSH
21890: LD_INT 3
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 0
21899: PUSH
21900: LD_INT 3
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 1
21909: NEG
21910: PUSH
21911: LD_INT 2
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 3
21920: NEG
21921: PUSH
21922: LD_INT 2
21924: NEG
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 3
21932: NEG
21933: PUSH
21934: LD_INT 3
21936: NEG
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21973: LD_ADDR_VAR 0 46
21977: PUSH
21978: LD_INT 0
21980: PUSH
21981: LD_INT 0
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 0
21990: PUSH
21991: LD_INT 1
21993: NEG
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 1
22001: PUSH
22002: LD_INT 0
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 1
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 0
22021: PUSH
22022: LD_INT 1
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 1
22031: NEG
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 1
22042: NEG
22043: PUSH
22044: LD_INT 1
22046: NEG
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 1
22054: NEG
22055: PUSH
22056: LD_INT 2
22058: NEG
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: LD_INT 2
22069: NEG
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 1
22077: PUSH
22078: LD_INT 1
22080: NEG
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 2
22088: PUSH
22089: LD_INT 0
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 2
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 1
22108: PUSH
22109: LD_INT 2
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 0
22118: PUSH
22119: LD_INT 2
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 1
22128: NEG
22129: PUSH
22130: LD_INT 1
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 2
22139: NEG
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 2
22150: NEG
22151: PUSH
22152: LD_INT 1
22154: NEG
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 1
22162: NEG
22163: PUSH
22164: LD_INT 3
22166: NEG
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 0
22174: PUSH
22175: LD_INT 3
22177: NEG
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 1
22185: PUSH
22186: LD_INT 2
22188: NEG
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 2
22196: PUSH
22197: LD_INT 1
22199: NEG
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 3
22207: PUSH
22208: LD_INT 0
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 3
22217: PUSH
22218: LD_INT 1
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 1
22227: PUSH
22228: LD_INT 3
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 0
22237: PUSH
22238: LD_INT 3
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 1
22247: NEG
22248: PUSH
22249: LD_INT 2
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 2
22258: NEG
22259: PUSH
22260: LD_INT 1
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 3
22269: NEG
22270: PUSH
22271: LD_INT 0
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 3
22280: NEG
22281: PUSH
22282: LD_INT 1
22284: NEG
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22321: LD_ADDR_VAR 0 47
22325: PUSH
22326: LD_INT 0
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 0
22338: PUSH
22339: LD_INT 1
22341: NEG
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 1
22349: PUSH
22350: LD_INT 0
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 1
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 0
22369: PUSH
22370: LD_INT 1
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 1
22379: NEG
22380: PUSH
22381: LD_INT 0
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 1
22390: NEG
22391: PUSH
22392: LD_INT 1
22394: NEG
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: LD_INT 2
22406: NEG
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 0
22414: PUSH
22415: LD_INT 2
22417: NEG
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 1
22425: PUSH
22426: LD_INT 1
22428: NEG
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 2
22436: NEG
22437: PUSH
22438: LD_INT 1
22440: NEG
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 2
22448: NEG
22449: PUSH
22450: LD_INT 2
22452: NEG
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
22472: LD_ADDR_VAR 0 48
22476: PUSH
22477: LD_INT 0
22479: PUSH
22480: LD_INT 0
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 0
22489: PUSH
22490: LD_INT 1
22492: NEG
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: LD_INT 0
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 1
22510: PUSH
22511: LD_INT 1
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 0
22520: PUSH
22521: LD_INT 1
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 1
22530: NEG
22531: PUSH
22532: LD_INT 0
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: NEG
22542: PUSH
22543: LD_INT 1
22545: NEG
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 1
22553: NEG
22554: PUSH
22555: LD_INT 2
22557: NEG
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 0
22565: PUSH
22566: LD_INT 2
22568: NEG
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: LD_INT 1
22579: NEG
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 2
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 2
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
22619: LD_ADDR_VAR 0 49
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: LD_INT 0
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 0
22636: PUSH
22637: LD_INT 1
22639: NEG
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 1
22647: PUSH
22648: LD_INT 0
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: LD_INT 1
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 0
22667: PUSH
22668: LD_INT 1
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 1
22677: NEG
22678: PUSH
22679: LD_INT 0
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 1
22688: NEG
22689: PUSH
22690: LD_INT 1
22692: NEG
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 1
22700: PUSH
22701: LD_INT 1
22703: NEG
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 2
22711: PUSH
22712: LD_INT 0
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 2
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 2
22731: PUSH
22732: LD_INT 2
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 1
22741: PUSH
22742: LD_INT 2
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
22763: LD_ADDR_VAR 0 50
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: LD_INT 0
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 0
22780: PUSH
22781: LD_INT 1
22783: NEG
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 1
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 1
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: LD_INT 1
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 1
22821: NEG
22822: PUSH
22823: LD_INT 0
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 1
22832: NEG
22833: PUSH
22834: LD_INT 1
22836: NEG
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 2
22844: PUSH
22845: LD_INT 1
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 2
22854: PUSH
22855: LD_INT 2
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: LD_INT 2
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 0
22874: PUSH
22875: LD_INT 2
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 1
22884: NEG
22885: PUSH
22886: LD_INT 1
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
22907: LD_ADDR_VAR 0 51
22911: PUSH
22912: LD_INT 0
22914: PUSH
22915: LD_INT 0
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 0
22924: PUSH
22925: LD_INT 1
22927: NEG
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 1
22935: PUSH
22936: LD_INT 0
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 1
22945: PUSH
22946: LD_INT 1
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 0
22955: PUSH
22956: LD_INT 1
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 1
22965: NEG
22966: PUSH
22967: LD_INT 0
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 1
22976: NEG
22977: PUSH
22978: LD_INT 1
22980: NEG
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 1
22988: PUSH
22989: LD_INT 2
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 0
22998: PUSH
22999: LD_INT 2
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 1
23008: NEG
23009: PUSH
23010: LD_INT 1
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 2
23019: NEG
23020: PUSH
23021: LD_INT 0
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 2
23030: NEG
23031: PUSH
23032: LD_INT 1
23034: NEG
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23054: LD_ADDR_VAR 0 52
23058: PUSH
23059: LD_INT 0
23061: PUSH
23062: LD_INT 0
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 0
23071: PUSH
23072: LD_INT 1
23074: NEG
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: LD_INT 0
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 1
23092: PUSH
23093: LD_INT 1
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 0
23102: PUSH
23103: LD_INT 1
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 1
23112: NEG
23113: PUSH
23114: LD_INT 0
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 1
23123: NEG
23124: PUSH
23125: LD_INT 1
23127: NEG
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 1
23135: NEG
23136: PUSH
23137: LD_INT 2
23139: NEG
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 1
23147: NEG
23148: PUSH
23149: LD_INT 1
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 2
23158: NEG
23159: PUSH
23160: LD_INT 0
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 2
23169: NEG
23170: PUSH
23171: LD_INT 1
23173: NEG
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 2
23181: NEG
23182: PUSH
23183: LD_INT 2
23185: NEG
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23205: LD_ADDR_VAR 0 53
23209: PUSH
23210: LD_INT 0
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 0
23222: PUSH
23223: LD_INT 1
23225: NEG
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 1
23233: PUSH
23234: LD_INT 0
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: LD_INT 1
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 0
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 1
23263: NEG
23264: PUSH
23265: LD_INT 0
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 1
23274: NEG
23275: PUSH
23276: LD_INT 1
23278: NEG
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: LD_INT 2
23290: NEG
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 0
23298: PUSH
23299: LD_INT 2
23301: NEG
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: LD_INT 1
23312: NEG
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 2
23320: PUSH
23321: LD_INT 0
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 2
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 2
23340: PUSH
23341: LD_INT 2
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: LD_INT 2
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 0
23360: PUSH
23361: LD_INT 2
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: NEG
23371: PUSH
23372: LD_INT 1
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 2
23381: NEG
23382: PUSH
23383: LD_INT 0
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 2
23392: NEG
23393: PUSH
23394: LD_INT 1
23396: NEG
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 2
23404: NEG
23405: PUSH
23406: LD_INT 2
23408: NEG
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23435: LD_ADDR_VAR 0 54
23439: PUSH
23440: LD_INT 0
23442: PUSH
23443: LD_INT 0
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 0
23452: PUSH
23453: LD_INT 1
23455: NEG
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 1
23463: PUSH
23464: LD_INT 0
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 1
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 0
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 1
23493: NEG
23494: PUSH
23495: LD_INT 0
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 1
23504: NEG
23505: PUSH
23506: LD_INT 1
23508: NEG
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 1
23516: NEG
23517: PUSH
23518: LD_INT 2
23520: NEG
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 0
23528: PUSH
23529: LD_INT 2
23531: NEG
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 1
23539: PUSH
23540: LD_INT 1
23542: NEG
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 2
23550: PUSH
23551: LD_INT 0
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 2
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 2
23570: PUSH
23571: LD_INT 2
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: LD_INT 2
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 0
23590: PUSH
23591: LD_INT 2
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 1
23600: NEG
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 2
23611: NEG
23612: PUSH
23613: LD_INT 0
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 2
23622: NEG
23623: PUSH
23624: LD_INT 1
23626: NEG
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 2
23634: NEG
23635: PUSH
23636: LD_INT 2
23638: NEG
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23665: LD_ADDR_VAR 0 55
23669: PUSH
23670: LD_INT 0
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 0
23682: PUSH
23683: LD_INT 1
23685: NEG
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: LD_INT 0
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 1
23703: PUSH
23704: LD_INT 1
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 0
23713: PUSH
23714: LD_INT 1
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 1
23723: NEG
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 1
23734: NEG
23735: PUSH
23736: LD_INT 1
23738: NEG
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 1
23746: NEG
23747: PUSH
23748: LD_INT 2
23750: NEG
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 0
23758: PUSH
23759: LD_INT 2
23761: NEG
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 1
23769: PUSH
23770: LD_INT 1
23772: NEG
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 2
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 2
23800: PUSH
23801: LD_INT 2
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: LD_INT 2
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 0
23820: PUSH
23821: LD_INT 2
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 1
23830: NEG
23831: PUSH
23832: LD_INT 1
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 2
23841: NEG
23842: PUSH
23843: LD_INT 0
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 2
23852: NEG
23853: PUSH
23854: LD_INT 1
23856: NEG
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 2
23864: NEG
23865: PUSH
23866: LD_INT 2
23868: NEG
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23895: LD_ADDR_VAR 0 56
23899: PUSH
23900: LD_INT 0
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 0
23912: PUSH
23913: LD_INT 1
23915: NEG
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: LD_INT 0
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 1
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: LD_INT 1
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: NEG
23954: PUSH
23955: LD_INT 0
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 1
23964: NEG
23965: PUSH
23966: LD_INT 1
23968: NEG
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 1
23976: NEG
23977: PUSH
23978: LD_INT 2
23980: NEG
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: LD_INT 2
23991: NEG
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 1
23999: PUSH
24000: LD_INT 1
24002: NEG
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 2
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 2
24030: PUSH
24031: LD_INT 2
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: LD_INT 2
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 0
24050: PUSH
24051: LD_INT 2
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 1
24060: NEG
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 2
24071: NEG
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 2
24082: NEG
24083: PUSH
24084: LD_INT 1
24086: NEG
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 2
24094: NEG
24095: PUSH
24096: LD_INT 2
24098: NEG
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24125: LD_ADDR_VAR 0 57
24129: PUSH
24130: LD_INT 0
24132: PUSH
24133: LD_INT 0
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 0
24142: PUSH
24143: LD_INT 1
24145: NEG
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 1
24153: PUSH
24154: LD_INT 0
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 1
24163: PUSH
24164: LD_INT 1
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 0
24173: PUSH
24174: LD_INT 1
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 1
24183: NEG
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 1
24194: NEG
24195: PUSH
24196: LD_INT 1
24198: NEG
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 1
24206: NEG
24207: PUSH
24208: LD_INT 2
24210: NEG
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 0
24218: PUSH
24219: LD_INT 2
24221: NEG
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 1
24229: PUSH
24230: LD_INT 1
24232: NEG
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: LD_INT 0
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 2
24250: PUSH
24251: LD_INT 1
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 2
24260: PUSH
24261: LD_INT 2
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: LD_INT 2
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 0
24280: PUSH
24281: LD_INT 2
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 1
24290: NEG
24291: PUSH
24292: LD_INT 1
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 2
24301: NEG
24302: PUSH
24303: LD_INT 0
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 2
24312: NEG
24313: PUSH
24314: LD_INT 1
24316: NEG
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 2
24324: NEG
24325: PUSH
24326: LD_INT 2
24328: NEG
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24355: LD_ADDR_VAR 0 58
24359: PUSH
24360: LD_INT 0
24362: PUSH
24363: LD_INT 0
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 0
24372: PUSH
24373: LD_INT 1
24375: NEG
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 1
24383: PUSH
24384: LD_INT 0
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 1
24393: PUSH
24394: LD_INT 1
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 0
24403: PUSH
24404: LD_INT 1
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 1
24413: NEG
24414: PUSH
24415: LD_INT 0
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 1
24424: NEG
24425: PUSH
24426: LD_INT 1
24428: NEG
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 1
24436: NEG
24437: PUSH
24438: LD_INT 2
24440: NEG
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: LD_INT 2
24451: NEG
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: LD_INT 1
24462: NEG
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 2
24470: PUSH
24471: LD_INT 0
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 2
24480: PUSH
24481: LD_INT 1
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 2
24490: PUSH
24491: LD_INT 2
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 1
24500: PUSH
24501: LD_INT 2
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 0
24510: PUSH
24511: LD_INT 2
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 1
24520: NEG
24521: PUSH
24522: LD_INT 1
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 2
24531: NEG
24532: PUSH
24533: LD_INT 0
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 2
24542: NEG
24543: PUSH
24544: LD_INT 1
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 2
24554: NEG
24555: PUSH
24556: LD_INT 2
24558: NEG
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24585: LD_ADDR_VAR 0 59
24589: PUSH
24590: LD_INT 0
24592: PUSH
24593: LD_INT 0
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 0
24602: PUSH
24603: LD_INT 1
24605: NEG
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: LD_INT 1
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: LD_INT 0
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 1
24654: NEG
24655: PUSH
24656: LD_INT 1
24658: NEG
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24673: LD_ADDR_VAR 0 60
24677: PUSH
24678: LD_INT 0
24680: PUSH
24681: LD_INT 0
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 0
24690: PUSH
24691: LD_INT 1
24693: NEG
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 1
24701: PUSH
24702: LD_INT 0
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 1
24711: PUSH
24712: LD_INT 1
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 0
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 1
24731: NEG
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 1
24742: NEG
24743: PUSH
24744: LD_INT 1
24746: NEG
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24761: LD_ADDR_VAR 0 61
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: LD_INT 1
24781: NEG
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: LD_INT 1
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 0
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: LD_INT 0
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 1
24830: NEG
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24849: LD_ADDR_VAR 0 62
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: LD_INT 0
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 0
24866: PUSH
24867: LD_INT 1
24869: NEG
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 1
24877: PUSH
24878: LD_INT 0
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 1
24887: PUSH
24888: LD_INT 1
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 0
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 1
24907: NEG
24908: PUSH
24909: LD_INT 0
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: LD_INT 1
24922: NEG
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24937: LD_ADDR_VAR 0 63
24941: PUSH
24942: LD_INT 0
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 0
24954: PUSH
24955: LD_INT 1
24957: NEG
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 1
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 0
24985: PUSH
24986: LD_INT 1
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 1
24995: NEG
24996: PUSH
24997: LD_INT 0
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 1
25006: NEG
25007: PUSH
25008: LD_INT 1
25010: NEG
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25025: LD_ADDR_VAR 0 64
25029: PUSH
25030: LD_INT 0
25032: PUSH
25033: LD_INT 0
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 0
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 1
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 1
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 0
25073: PUSH
25074: LD_INT 1
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 1
25083: NEG
25084: PUSH
25085: LD_INT 0
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 1
25094: NEG
25095: PUSH
25096: LD_INT 1
25098: NEG
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: ST_TO_ADDR
// end ; 1 :
25113: GO 31010
25115: LD_INT 1
25117: DOUBLE
25118: EQUAL
25119: IFTRUE 25123
25121: GO 27746
25123: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25124: LD_ADDR_VAR 0 11
25128: PUSH
25129: LD_INT 1
25131: NEG
25132: PUSH
25133: LD_INT 3
25135: NEG
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: LD_INT 3
25146: NEG
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: LD_INT 2
25157: NEG
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: LIST
25167: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25168: LD_ADDR_VAR 0 12
25172: PUSH
25173: LD_INT 2
25175: PUSH
25176: LD_INT 1
25178: NEG
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 3
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 3
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: LIST
25208: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25209: LD_ADDR_VAR 0 13
25213: PUSH
25214: LD_INT 3
25216: PUSH
25217: LD_INT 2
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 3
25226: PUSH
25227: LD_INT 3
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 2
25236: PUSH
25237: LD_INT 3
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: LIST
25248: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25249: LD_ADDR_VAR 0 14
25253: PUSH
25254: LD_INT 1
25256: PUSH
25257: LD_INT 3
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 0
25266: PUSH
25267: LD_INT 3
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 1
25276: NEG
25277: PUSH
25278: LD_INT 2
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: LIST
25289: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25290: LD_ADDR_VAR 0 15
25294: PUSH
25295: LD_INT 2
25297: NEG
25298: PUSH
25299: LD_INT 1
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 3
25308: NEG
25309: PUSH
25310: LD_INT 0
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 3
25319: NEG
25320: PUSH
25321: LD_INT 1
25323: NEG
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: LIST
25333: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25334: LD_ADDR_VAR 0 16
25338: PUSH
25339: LD_INT 2
25341: NEG
25342: PUSH
25343: LD_INT 3
25345: NEG
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 3
25353: NEG
25354: PUSH
25355: LD_INT 2
25357: NEG
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 3
25365: NEG
25366: PUSH
25367: LD_INT 3
25369: NEG
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: LIST
25379: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25380: LD_ADDR_VAR 0 17
25384: PUSH
25385: LD_INT 1
25387: NEG
25388: PUSH
25389: LD_INT 3
25391: NEG
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 0
25399: PUSH
25400: LD_INT 3
25402: NEG
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: LD_INT 2
25413: NEG
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: LIST
25423: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25424: LD_ADDR_VAR 0 18
25428: PUSH
25429: LD_INT 2
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 3
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 3
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: LIST
25464: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25465: LD_ADDR_VAR 0 19
25469: PUSH
25470: LD_INT 3
25472: PUSH
25473: LD_INT 2
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 3
25482: PUSH
25483: LD_INT 3
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 2
25492: PUSH
25493: LD_INT 3
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: LIST
25504: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25505: LD_ADDR_VAR 0 20
25509: PUSH
25510: LD_INT 1
25512: PUSH
25513: LD_INT 3
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 0
25522: PUSH
25523: LD_INT 3
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 1
25532: NEG
25533: PUSH
25534: LD_INT 2
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: LIST
25545: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25546: LD_ADDR_VAR 0 21
25550: PUSH
25551: LD_INT 2
25553: NEG
25554: PUSH
25555: LD_INT 1
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 3
25564: NEG
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 3
25575: NEG
25576: PUSH
25577: LD_INT 1
25579: NEG
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: LIST
25589: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25590: LD_ADDR_VAR 0 22
25594: PUSH
25595: LD_INT 2
25597: NEG
25598: PUSH
25599: LD_INT 3
25601: NEG
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 3
25609: NEG
25610: PUSH
25611: LD_INT 2
25613: NEG
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 3
25621: NEG
25622: PUSH
25623: LD_INT 3
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: LIST
25635: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
25636: LD_ADDR_VAR 0 23
25640: PUSH
25641: LD_INT 0
25643: PUSH
25644: LD_INT 3
25646: NEG
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 1
25654: NEG
25655: PUSH
25656: LD_INT 4
25658: NEG
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 1
25666: PUSH
25667: LD_INT 3
25669: NEG
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: LIST
25679: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
25680: LD_ADDR_VAR 0 24
25684: PUSH
25685: LD_INT 3
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 3
25697: PUSH
25698: LD_INT 1
25700: NEG
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 4
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: LIST
25720: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
25721: LD_ADDR_VAR 0 25
25725: PUSH
25726: LD_INT 3
25728: PUSH
25729: LD_INT 3
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 4
25738: PUSH
25739: LD_INT 3
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 3
25748: PUSH
25749: LD_INT 4
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: LIST
25760: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
25761: LD_ADDR_VAR 0 26
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: LD_INT 3
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 1
25778: PUSH
25779: LD_INT 4
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 1
25788: NEG
25789: PUSH
25790: LD_INT 3
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: LIST
25801: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
25802: LD_ADDR_VAR 0 27
25806: PUSH
25807: LD_INT 3
25809: NEG
25810: PUSH
25811: LD_INT 0
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 3
25820: NEG
25821: PUSH
25822: LD_INT 1
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 4
25831: NEG
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: LIST
25845: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
25846: LD_ADDR_VAR 0 28
25850: PUSH
25851: LD_INT 3
25853: NEG
25854: PUSH
25855: LD_INT 3
25857: NEG
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 3
25865: NEG
25866: PUSH
25867: LD_INT 4
25869: NEG
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 4
25877: NEG
25878: PUSH
25879: LD_INT 3
25881: NEG
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: LIST
25891: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
25892: LD_ADDR_VAR 0 29
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: PUSH
25901: LD_INT 3
25903: NEG
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 0
25911: PUSH
25912: LD_INT 3
25914: NEG
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: LD_INT 2
25925: NEG
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 1
25933: NEG
25934: PUSH
25935: LD_INT 4
25937: NEG
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 0
25945: PUSH
25946: LD_INT 4
25948: NEG
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 1
25956: PUSH
25957: LD_INT 3
25959: NEG
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: LD_INT 5
25971: NEG
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: LD_INT 5
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: LD_INT 4
25993: NEG
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PUSH
26003: LD_INT 6
26005: NEG
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 0
26013: PUSH
26014: LD_INT 6
26016: NEG
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: LD_INT 5
26027: NEG
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
26047: LD_ADDR_VAR 0 30
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: LD_INT 1
26057: NEG
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 3
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 3
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 3
26085: PUSH
26086: LD_INT 1
26088: NEG
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 4
26096: PUSH
26097: LD_INT 0
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 4
26106: PUSH
26107: LD_INT 1
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 4
26116: PUSH
26117: LD_INT 1
26119: NEG
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 5
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 5
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 5
26147: PUSH
26148: LD_INT 1
26150: NEG
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 6
26158: PUSH
26159: LD_INT 0
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 6
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
26190: LD_ADDR_VAR 0 31
26194: PUSH
26195: LD_INT 3
26197: PUSH
26198: LD_INT 2
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 3
26207: PUSH
26208: LD_INT 3
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 2
26217: PUSH
26218: LD_INT 3
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 4
26227: PUSH
26228: LD_INT 3
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 4
26237: PUSH
26238: LD_INT 4
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 3
26247: PUSH
26248: LD_INT 4
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 5
26257: PUSH
26258: LD_INT 4
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 5
26267: PUSH
26268: LD_INT 5
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 4
26277: PUSH
26278: LD_INT 5
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 6
26287: PUSH
26288: LD_INT 5
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 6
26297: PUSH
26298: LD_INT 6
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 5
26307: PUSH
26308: LD_INT 6
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
26329: LD_ADDR_VAR 0 32
26333: PUSH
26334: LD_INT 1
26336: PUSH
26337: LD_INT 3
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: LD_INT 3
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: LD_INT 2
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 1
26367: PUSH
26368: LD_INT 4
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: LD_INT 4
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 1
26387: NEG
26388: PUSH
26389: LD_INT 3
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: LD_INT 5
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: LD_INT 5
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: NEG
26419: PUSH
26420: LD_INT 4
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 1
26429: PUSH
26430: LD_INT 6
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: LD_INT 6
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 1
26449: NEG
26450: PUSH
26451: LD_INT 5
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
26472: LD_ADDR_VAR 0 33
26476: PUSH
26477: LD_INT 2
26479: NEG
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 3
26490: NEG
26491: PUSH
26492: LD_INT 0
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 3
26501: NEG
26502: PUSH
26503: LD_INT 1
26505: NEG
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 3
26513: NEG
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 4
26524: NEG
26525: PUSH
26526: LD_INT 0
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 4
26535: NEG
26536: PUSH
26537: LD_INT 1
26539: NEG
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 4
26547: NEG
26548: PUSH
26549: LD_INT 1
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 5
26558: NEG
26559: PUSH
26560: LD_INT 0
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 5
26569: NEG
26570: PUSH
26571: LD_INT 1
26573: NEG
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 5
26581: NEG
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 6
26592: NEG
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 6
26603: NEG
26604: PUSH
26605: LD_INT 1
26607: NEG
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
26627: LD_ADDR_VAR 0 34
26631: PUSH
26632: LD_INT 2
26634: NEG
26635: PUSH
26636: LD_INT 3
26638: NEG
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 3
26646: NEG
26647: PUSH
26648: LD_INT 2
26650: NEG
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 3
26658: NEG
26659: PUSH
26660: LD_INT 3
26662: NEG
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 3
26670: NEG
26671: PUSH
26672: LD_INT 4
26674: NEG
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 4
26682: NEG
26683: PUSH
26684: LD_INT 3
26686: NEG
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 4
26694: NEG
26695: PUSH
26696: LD_INT 4
26698: NEG
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 4
26706: NEG
26707: PUSH
26708: LD_INT 5
26710: NEG
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 5
26718: NEG
26719: PUSH
26720: LD_INT 4
26722: NEG
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 5
26730: NEG
26731: PUSH
26732: LD_INT 5
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 5
26742: NEG
26743: PUSH
26744: LD_INT 6
26746: NEG
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 6
26754: NEG
26755: PUSH
26756: LD_INT 5
26758: NEG
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 6
26766: NEG
26767: PUSH
26768: LD_INT 6
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
26790: LD_ADDR_VAR 0 41
26794: PUSH
26795: LD_INT 0
26797: PUSH
26798: LD_INT 2
26800: NEG
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: NEG
26809: PUSH
26810: LD_INT 3
26812: NEG
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 1
26820: PUSH
26821: LD_INT 2
26823: NEG
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: LIST
26833: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
26834: LD_ADDR_VAR 0 42
26838: PUSH
26839: LD_INT 2
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 2
26851: PUSH
26852: LD_INT 1
26854: NEG
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 3
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: LIST
26874: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
26875: LD_ADDR_VAR 0 43
26879: PUSH
26880: LD_INT 2
26882: PUSH
26883: LD_INT 2
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 3
26892: PUSH
26893: LD_INT 2
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 2
26902: PUSH
26903: LD_INT 3
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: LIST
26914: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
26915: LD_ADDR_VAR 0 44
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: LD_INT 2
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 1
26932: PUSH
26933: LD_INT 3
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 1
26942: NEG
26943: PUSH
26944: LD_INT 2
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: LIST
26955: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26956: LD_ADDR_VAR 0 45
26960: PUSH
26961: LD_INT 2
26963: NEG
26964: PUSH
26965: LD_INT 0
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 2
26974: NEG
26975: PUSH
26976: LD_INT 1
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 3
26985: NEG
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: LIST
26999: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
27000: LD_ADDR_VAR 0 46
27004: PUSH
27005: LD_INT 2
27007: NEG
27008: PUSH
27009: LD_INT 2
27011: NEG
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 2
27019: NEG
27020: PUSH
27021: LD_INT 3
27023: NEG
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 3
27031: NEG
27032: PUSH
27033: LD_INT 2
27035: NEG
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: LIST
27045: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
27046: LD_ADDR_VAR 0 47
27050: PUSH
27051: LD_INT 2
27053: NEG
27054: PUSH
27055: LD_INT 3
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: NEG
27066: PUSH
27067: LD_INT 3
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27079: LD_ADDR_VAR 0 48
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: LD_INT 2
27089: NEG
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: PUSH
27098: LD_INT 1
27100: NEG
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
27110: LD_ADDR_VAR 0 49
27114: PUSH
27115: LD_INT 3
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 3
27127: PUSH
27128: LD_INT 2
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
27139: LD_ADDR_VAR 0 50
27143: PUSH
27144: LD_INT 2
27146: PUSH
27147: LD_INT 3
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: LD_INT 3
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27168: LD_ADDR_VAR 0 51
27172: PUSH
27173: LD_INT 1
27175: NEG
27176: PUSH
27177: LD_INT 2
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 2
27186: NEG
27187: PUSH
27188: LD_INT 1
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27199: LD_ADDR_VAR 0 52
27203: PUSH
27204: LD_INT 3
27206: NEG
27207: PUSH
27208: LD_INT 1
27210: NEG
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 3
27218: NEG
27219: PUSH
27220: LD_INT 2
27222: NEG
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27232: LD_ADDR_VAR 0 53
27236: PUSH
27237: LD_INT 1
27239: NEG
27240: PUSH
27241: LD_INT 3
27243: NEG
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: LD_INT 3
27254: NEG
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 1
27262: PUSH
27263: LD_INT 2
27265: NEG
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: LIST
27275: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27276: LD_ADDR_VAR 0 54
27280: PUSH
27281: LD_INT 2
27283: PUSH
27284: LD_INT 1
27286: NEG
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 3
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 3
27304: PUSH
27305: LD_INT 1
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: LIST
27316: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27317: LD_ADDR_VAR 0 55
27321: PUSH
27322: LD_INT 3
27324: PUSH
27325: LD_INT 2
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 3
27334: PUSH
27335: LD_INT 3
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 2
27344: PUSH
27345: LD_INT 3
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: LIST
27356: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27357: LD_ADDR_VAR 0 56
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: LD_INT 3
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 0
27374: PUSH
27375: LD_INT 3
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 1
27384: NEG
27385: PUSH
27386: LD_INT 2
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: LIST
27397: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27398: LD_ADDR_VAR 0 57
27402: PUSH
27403: LD_INT 2
27405: NEG
27406: PUSH
27407: LD_INT 1
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 3
27416: NEG
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 3
27427: NEG
27428: PUSH
27429: LD_INT 1
27431: NEG
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: LIST
27441: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27442: LD_ADDR_VAR 0 58
27446: PUSH
27447: LD_INT 2
27449: NEG
27450: PUSH
27451: LD_INT 3
27453: NEG
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 3
27461: NEG
27462: PUSH
27463: LD_INT 2
27465: NEG
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 3
27473: NEG
27474: PUSH
27475: LD_INT 3
27477: NEG
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: LIST
27487: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
27488: LD_ADDR_VAR 0 59
27492: PUSH
27493: LD_INT 1
27495: NEG
27496: PUSH
27497: LD_INT 2
27499: NEG
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 0
27507: PUSH
27508: LD_INT 2
27510: NEG
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: PUSH
27519: LD_INT 1
27521: NEG
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: LIST
27531: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27532: LD_ADDR_VAR 0 60
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: LD_INT 1
27542: NEG
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 2
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 2
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: LIST
27572: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27573: LD_ADDR_VAR 0 61
27577: PUSH
27578: LD_INT 2
27580: PUSH
27581: LD_INT 1
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 2
27590: PUSH
27591: LD_INT 2
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 2
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: LIST
27612: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27613: LD_ADDR_VAR 0 62
27617: PUSH
27618: LD_INT 1
27620: PUSH
27621: LD_INT 2
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 0
27630: PUSH
27631: LD_INT 2
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 1
27640: NEG
27641: PUSH
27642: LD_INT 1
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: LIST
27653: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27654: LD_ADDR_VAR 0 63
27658: PUSH
27659: LD_INT 1
27661: NEG
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 2
27672: NEG
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 2
27683: NEG
27684: PUSH
27685: LD_INT 1
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: LIST
27697: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27698: LD_ADDR_VAR 0 64
27702: PUSH
27703: LD_INT 1
27705: NEG
27706: PUSH
27707: LD_INT 2
27709: NEG
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 2
27717: NEG
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 2
27729: NEG
27730: PUSH
27731: LD_INT 2
27733: NEG
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: LIST
27743: ST_TO_ADDR
// end ; 2 :
27744: GO 31010
27746: LD_INT 2
27748: DOUBLE
27749: EQUAL
27750: IFTRUE 27754
27752: GO 31009
27754: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
27755: LD_ADDR_VAR 0 29
27759: PUSH
27760: LD_INT 4
27762: PUSH
27763: LD_INT 0
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 4
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 5
27783: PUSH
27784: LD_INT 0
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 5
27793: PUSH
27794: LD_INT 1
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 4
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 3
27813: PUSH
27814: LD_INT 0
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 3
27823: PUSH
27824: LD_INT 1
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 3
27834: PUSH
27835: LD_INT 2
27837: NEG
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 5
27845: PUSH
27846: LD_INT 2
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 3
27855: PUSH
27856: LD_INT 3
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 3
27865: PUSH
27866: LD_INT 2
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 4
27875: PUSH
27876: LD_INT 3
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 4
27885: PUSH
27886: LD_INT 4
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 3
27895: PUSH
27896: LD_INT 4
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 2
27905: PUSH
27906: LD_INT 3
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 2
27915: PUSH
27916: LD_INT 2
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 4
27925: PUSH
27926: LD_INT 2
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 2
27935: PUSH
27936: LD_INT 4
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 0
27945: PUSH
27946: LD_INT 4
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: LD_INT 3
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 1
27965: PUSH
27966: LD_INT 4
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: LD_INT 5
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: LD_INT 5
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: LD_INT 4
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 1
28006: NEG
28007: PUSH
28008: LD_INT 3
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 2
28017: PUSH
28018: LD_INT 5
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 2
28027: NEG
28028: PUSH
28029: LD_INT 3
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 3
28038: NEG
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 3
28049: NEG
28050: PUSH
28051: LD_INT 1
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 2
28061: NEG
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 2
28072: NEG
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 3
28083: NEG
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 4
28094: NEG
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 4
28105: NEG
28106: PUSH
28107: LD_INT 1
28109: NEG
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 4
28117: NEG
28118: PUSH
28119: LD_INT 2
28121: NEG
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 2
28129: NEG
28130: PUSH
28131: LD_INT 2
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 4
28140: NEG
28141: PUSH
28142: LD_INT 4
28144: NEG
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 4
28152: NEG
28153: PUSH
28154: LD_INT 5
28156: NEG
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 3
28164: NEG
28165: PUSH
28166: LD_INT 4
28168: NEG
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 3
28176: NEG
28177: PUSH
28178: LD_INT 3
28180: NEG
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 4
28188: NEG
28189: PUSH
28190: LD_INT 3
28192: NEG
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 5
28200: NEG
28201: PUSH
28202: LD_INT 4
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 5
28212: NEG
28213: PUSH
28214: LD_INT 5
28216: NEG
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 3
28224: NEG
28225: PUSH
28226: LD_INT 5
28228: NEG
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 5
28236: NEG
28237: PUSH
28238: LD_INT 3
28240: NEG
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
28293: LD_ADDR_VAR 0 30
28297: PUSH
28298: LD_INT 4
28300: PUSH
28301: LD_INT 4
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 4
28310: PUSH
28311: LD_INT 3
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 5
28320: PUSH
28321: LD_INT 4
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 5
28330: PUSH
28331: LD_INT 5
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 4
28340: PUSH
28341: LD_INT 5
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 3
28350: PUSH
28351: LD_INT 4
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 3
28360: PUSH
28361: LD_INT 3
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 5
28370: PUSH
28371: LD_INT 3
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 3
28380: PUSH
28381: LD_INT 5
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: LD_INT 3
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: LD_INT 2
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: LD_INT 3
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 1
28420: PUSH
28421: LD_INT 4
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: LD_INT 4
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: LD_INT 3
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 1
28451: NEG
28452: PUSH
28453: LD_INT 2
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 2
28462: PUSH
28463: LD_INT 4
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 2
28472: NEG
28473: PUSH
28474: LD_INT 2
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 4
28483: NEG
28484: PUSH
28485: LD_INT 0
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 4
28494: NEG
28495: PUSH
28496: LD_INT 1
28498: NEG
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 3
28506: NEG
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 3
28517: NEG
28518: PUSH
28519: LD_INT 1
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 4
28528: NEG
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 5
28539: NEG
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 5
28550: NEG
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 5
28562: NEG
28563: PUSH
28564: LD_INT 2
28566: NEG
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 3
28574: NEG
28575: PUSH
28576: LD_INT 2
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 3
28585: NEG
28586: PUSH
28587: LD_INT 3
28589: NEG
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 3
28597: NEG
28598: PUSH
28599: LD_INT 4
28601: NEG
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 2
28609: NEG
28610: PUSH
28611: LD_INT 3
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 2
28621: NEG
28622: PUSH
28623: LD_INT 2
28625: NEG
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 3
28633: NEG
28634: PUSH
28635: LD_INT 2
28637: NEG
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 4
28645: NEG
28646: PUSH
28647: LD_INT 3
28649: NEG
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 4
28657: NEG
28658: PUSH
28659: LD_INT 4
28661: NEG
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 2
28669: NEG
28670: PUSH
28671: LD_INT 4
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 4
28681: NEG
28682: PUSH
28683: LD_INT 2
28685: NEG
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: LD_INT 4
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: LD_INT 5
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: LD_INT 4
28718: NEG
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 1
28726: PUSH
28727: LD_INT 3
28729: NEG
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 0
28737: PUSH
28738: LD_INT 3
28740: NEG
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 1
28748: NEG
28749: PUSH
28750: LD_INT 4
28752: NEG
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 1
28760: NEG
28761: PUSH
28762: LD_INT 5
28764: NEG
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 2
28772: PUSH
28773: LD_INT 3
28775: NEG
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 2
28783: NEG
28784: PUSH
28785: LD_INT 5
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
28840: LD_ADDR_VAR 0 31
28844: PUSH
28845: LD_INT 0
28847: PUSH
28848: LD_INT 4
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: LD_INT 3
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 1
28867: PUSH
28868: LD_INT 4
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 1
28877: PUSH
28878: LD_INT 5
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: LD_INT 5
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 1
28897: NEG
28898: PUSH
28899: LD_INT 4
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 1
28908: NEG
28909: PUSH
28910: LD_INT 3
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 2
28919: PUSH
28920: LD_INT 5
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 2
28929: NEG
28930: PUSH
28931: LD_INT 3
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 3
28940: NEG
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 3
28951: NEG
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 2
28963: NEG
28964: PUSH
28965: LD_INT 0
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 2
28974: NEG
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 3
28985: NEG
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 4
28996: NEG
28997: PUSH
28998: LD_INT 0
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 4
29007: NEG
29008: PUSH
29009: LD_INT 1
29011: NEG
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 4
29019: NEG
29020: PUSH
29021: LD_INT 2
29023: NEG
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 2
29031: NEG
29032: PUSH
29033: LD_INT 2
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 4
29042: NEG
29043: PUSH
29044: LD_INT 4
29046: NEG
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 4
29054: NEG
29055: PUSH
29056: LD_INT 5
29058: NEG
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 3
29066: NEG
29067: PUSH
29068: LD_INT 4
29070: NEG
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 3
29078: NEG
29079: PUSH
29080: LD_INT 3
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 4
29090: NEG
29091: PUSH
29092: LD_INT 3
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 5
29102: NEG
29103: PUSH
29104: LD_INT 4
29106: NEG
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 5
29114: NEG
29115: PUSH
29116: LD_INT 5
29118: NEG
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 3
29126: NEG
29127: PUSH
29128: LD_INT 5
29130: NEG
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 5
29138: NEG
29139: PUSH
29140: LD_INT 3
29142: NEG
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: LD_INT 3
29153: NEG
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 0
29161: PUSH
29162: LD_INT 4
29164: NEG
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 1
29172: PUSH
29173: LD_INT 3
29175: NEG
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 1
29183: PUSH
29184: LD_INT 2
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: LD_INT 2
29197: NEG
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: LD_INT 3
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 1
29217: NEG
29218: PUSH
29219: LD_INT 4
29221: NEG
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 2
29229: PUSH
29230: LD_INT 2
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 2
29240: NEG
29241: PUSH
29242: LD_INT 4
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 4
29252: PUSH
29253: LD_INT 0
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 4
29262: PUSH
29263: LD_INT 1
29265: NEG
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 5
29273: PUSH
29274: LD_INT 0
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 5
29283: PUSH
29284: LD_INT 1
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 4
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 3
29303: PUSH
29304: LD_INT 0
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 3
29313: PUSH
29314: LD_INT 1
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 3
29324: PUSH
29325: LD_INT 2
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 5
29335: PUSH
29336: LD_INT 2
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
29390: LD_ADDR_VAR 0 32
29394: PUSH
29395: LD_INT 4
29397: NEG
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 4
29408: NEG
29409: PUSH
29410: LD_INT 1
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 3
29420: NEG
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 3
29431: NEG
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 4
29442: NEG
29443: PUSH
29444: LD_INT 1
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 5
29453: NEG
29454: PUSH
29455: LD_INT 0
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 5
29464: NEG
29465: PUSH
29466: LD_INT 1
29468: NEG
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 5
29476: NEG
29477: PUSH
29478: LD_INT 2
29480: NEG
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 3
29488: NEG
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 3
29499: NEG
29500: PUSH
29501: LD_INT 3
29503: NEG
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 3
29511: NEG
29512: PUSH
29513: LD_INT 4
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 2
29523: NEG
29524: PUSH
29525: LD_INT 3
29527: NEG
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 2
29535: NEG
29536: PUSH
29537: LD_INT 2
29539: NEG
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 3
29547: NEG
29548: PUSH
29549: LD_INT 2
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 4
29559: NEG
29560: PUSH
29561: LD_INT 3
29563: NEG
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 4
29571: NEG
29572: PUSH
29573: LD_INT 4
29575: NEG
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 2
29583: NEG
29584: PUSH
29585: LD_INT 4
29587: NEG
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 4
29595: NEG
29596: PUSH
29597: LD_INT 2
29599: NEG
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 0
29607: PUSH
29608: LD_INT 4
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 0
29618: PUSH
29619: LD_INT 5
29621: NEG
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 1
29629: PUSH
29630: LD_INT 4
29632: NEG
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: LD_INT 3
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 0
29651: PUSH
29652: LD_INT 3
29654: NEG
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 1
29662: NEG
29663: PUSH
29664: LD_INT 4
29666: NEG
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 1
29674: NEG
29675: PUSH
29676: LD_INT 5
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 2
29686: PUSH
29687: LD_INT 3
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 2
29697: NEG
29698: PUSH
29699: LD_INT 5
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 3
29709: PUSH
29710: LD_INT 0
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 3
29719: PUSH
29720: LD_INT 1
29722: NEG
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 4
29730: PUSH
29731: LD_INT 0
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 4
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 3
29750: PUSH
29751: LD_INT 1
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 2
29760: PUSH
29761: LD_INT 0
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 2
29770: PUSH
29771: LD_INT 1
29773: NEG
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 2
29781: PUSH
29782: LD_INT 2
29784: NEG
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 4
29792: PUSH
29793: LD_INT 2
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 4
29802: PUSH
29803: LD_INT 4
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 4
29812: PUSH
29813: LD_INT 3
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 5
29822: PUSH
29823: LD_INT 4
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 5
29832: PUSH
29833: LD_INT 5
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 4
29842: PUSH
29843: LD_INT 5
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 3
29852: PUSH
29853: LD_INT 4
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 3
29862: PUSH
29863: LD_INT 3
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 5
29872: PUSH
29873: LD_INT 3
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: LD_INT 5
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
29937: LD_ADDR_VAR 0 33
29941: PUSH
29942: LD_INT 4
29944: NEG
29945: PUSH
29946: LD_INT 4
29948: NEG
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 4
29956: NEG
29957: PUSH
29958: LD_INT 5
29960: NEG
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 3
29968: NEG
29969: PUSH
29970: LD_INT 4
29972: NEG
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 3
29980: NEG
29981: PUSH
29982: LD_INT 3
29984: NEG
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 4
29992: NEG
29993: PUSH
29994: LD_INT 3
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 5
30004: NEG
30005: PUSH
30006: LD_INT 4
30008: NEG
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 5
30016: NEG
30017: PUSH
30018: LD_INT 5
30020: NEG
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 3
30028: NEG
30029: PUSH
30030: LD_INT 5
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 5
30040: NEG
30041: PUSH
30042: LD_INT 3
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 0
30052: PUSH
30053: LD_INT 3
30055: NEG
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: LD_INT 4
30066: NEG
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 1
30074: PUSH
30075: LD_INT 3
30077: NEG
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: LD_INT 2
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 0
30096: PUSH
30097: LD_INT 2
30099: NEG
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 1
30107: NEG
30108: PUSH
30109: LD_INT 3
30111: NEG
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 1
30119: NEG
30120: PUSH
30121: LD_INT 4
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 2
30131: PUSH
30132: LD_INT 2
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 2
30142: NEG
30143: PUSH
30144: LD_INT 4
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 4
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 4
30164: PUSH
30165: LD_INT 1
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 5
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 5
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 4
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 3
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 3
30215: PUSH
30216: LD_INT 1
30218: NEG
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 3
30226: PUSH
30227: LD_INT 2
30229: NEG
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 5
30237: PUSH
30238: LD_INT 2
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 3
30247: PUSH
30248: LD_INT 3
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 3
30257: PUSH
30258: LD_INT 2
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 4
30267: PUSH
30268: LD_INT 3
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 4
30277: PUSH
30278: LD_INT 4
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 3
30287: PUSH
30288: LD_INT 4
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 2
30297: PUSH
30298: LD_INT 3
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 2
30307: PUSH
30308: LD_INT 2
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 4
30317: PUSH
30318: LD_INT 2
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 2
30327: PUSH
30328: LD_INT 4
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: LD_INT 4
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 0
30347: PUSH
30348: LD_INT 3
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 1
30357: PUSH
30358: LD_INT 4
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: PUSH
30368: LD_INT 5
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: LD_INT 5
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: LD_INT 4
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 1
30398: NEG
30399: PUSH
30400: LD_INT 3
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 2
30409: PUSH
30410: LD_INT 5
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 2
30419: NEG
30420: PUSH
30421: LD_INT 3
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
30475: LD_ADDR_VAR 0 34
30479: PUSH
30480: LD_INT 0
30482: PUSH
30483: LD_INT 4
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 0
30493: PUSH
30494: LD_INT 5
30496: NEG
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 1
30504: PUSH
30505: LD_INT 4
30507: NEG
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: LD_INT 3
30518: NEG
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 0
30526: PUSH
30527: LD_INT 3
30529: NEG
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 1
30537: NEG
30538: PUSH
30539: LD_INT 4
30541: NEG
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 1
30549: NEG
30550: PUSH
30551: LD_INT 5
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 2
30561: PUSH
30562: LD_INT 3
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 2
30572: NEG
30573: PUSH
30574: LD_INT 5
30576: NEG
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 3
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 3
30594: PUSH
30595: LD_INT 1
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 4
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 4
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: LD_INT 1
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 2
30635: PUSH
30636: LD_INT 0
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 2
30645: PUSH
30646: LD_INT 1
30648: NEG
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 2
30656: PUSH
30657: LD_INT 2
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 4
30667: PUSH
30668: LD_INT 2
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 4
30677: PUSH
30678: LD_INT 4
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 4
30687: PUSH
30688: LD_INT 3
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 5
30697: PUSH
30698: LD_INT 4
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 5
30707: PUSH
30708: LD_INT 5
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 4
30717: PUSH
30718: LD_INT 5
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 3
30727: PUSH
30728: LD_INT 4
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 3
30737: PUSH
30738: LD_INT 3
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 5
30747: PUSH
30748: LD_INT 3
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 3
30757: PUSH
30758: LD_INT 5
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 0
30767: PUSH
30768: LD_INT 3
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 0
30777: PUSH
30778: LD_INT 2
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 1
30787: PUSH
30788: LD_INT 3
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 1
30797: PUSH
30798: LD_INT 4
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: LD_INT 4
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 1
30817: NEG
30818: PUSH
30819: LD_INT 3
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 1
30828: NEG
30829: PUSH
30830: LD_INT 2
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 2
30839: PUSH
30840: LD_INT 4
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 2
30849: NEG
30850: PUSH
30851: LD_INT 2
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 4
30860: NEG
30861: PUSH
30862: LD_INT 0
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 4
30871: NEG
30872: PUSH
30873: LD_INT 1
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 3
30883: NEG
30884: PUSH
30885: LD_INT 0
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 3
30894: NEG
30895: PUSH
30896: LD_INT 1
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 4
30905: NEG
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 5
30916: NEG
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 5
30927: NEG
30928: PUSH
30929: LD_INT 1
30931: NEG
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 5
30939: NEG
30940: PUSH
30941: LD_INT 2
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 3
30951: NEG
30952: PUSH
30953: LD_INT 2
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: ST_TO_ADDR
// end ; end ;
31007: GO 31010
31009: POP
// case btype of b_depot , b_warehouse :
31010: LD_VAR 0 1
31014: PUSH
31015: LD_INT 0
31017: DOUBLE
31018: EQUAL
31019: IFTRUE 31029
31021: LD_INT 1
31023: DOUBLE
31024: EQUAL
31025: IFTRUE 31029
31027: GO 31230
31029: POP
// case nation of nation_american :
31030: LD_VAR 0 5
31034: PUSH
31035: LD_INT 1
31037: DOUBLE
31038: EQUAL
31039: IFTRUE 31043
31041: GO 31099
31043: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
31044: LD_ADDR_VAR 0 9
31048: PUSH
31049: LD_VAR 0 11
31053: PUSH
31054: LD_VAR 0 12
31058: PUSH
31059: LD_VAR 0 13
31063: PUSH
31064: LD_VAR 0 14
31068: PUSH
31069: LD_VAR 0 15
31073: PUSH
31074: LD_VAR 0 16
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: PUSH
31087: LD_VAR 0 4
31091: PUSH
31092: LD_INT 1
31094: PLUS
31095: ARRAY
31096: ST_TO_ADDR
31097: GO 31228
31099: LD_INT 2
31101: DOUBLE
31102: EQUAL
31103: IFTRUE 31107
31105: GO 31163
31107: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
31108: LD_ADDR_VAR 0 9
31112: PUSH
31113: LD_VAR 0 17
31117: PUSH
31118: LD_VAR 0 18
31122: PUSH
31123: LD_VAR 0 19
31127: PUSH
31128: LD_VAR 0 20
31132: PUSH
31133: LD_VAR 0 21
31137: PUSH
31138: LD_VAR 0 22
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: PUSH
31151: LD_VAR 0 4
31155: PUSH
31156: LD_INT 1
31158: PLUS
31159: ARRAY
31160: ST_TO_ADDR
31161: GO 31228
31163: LD_INT 3
31165: DOUBLE
31166: EQUAL
31167: IFTRUE 31171
31169: GO 31227
31171: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
31172: LD_ADDR_VAR 0 9
31176: PUSH
31177: LD_VAR 0 23
31181: PUSH
31182: LD_VAR 0 24
31186: PUSH
31187: LD_VAR 0 25
31191: PUSH
31192: LD_VAR 0 26
31196: PUSH
31197: LD_VAR 0 27
31201: PUSH
31202: LD_VAR 0 28
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: PUSH
31215: LD_VAR 0 4
31219: PUSH
31220: LD_INT 1
31222: PLUS
31223: ARRAY
31224: ST_TO_ADDR
31225: GO 31228
31227: POP
31228: GO 31777
31230: LD_INT 2
31232: DOUBLE
31233: EQUAL
31234: IFTRUE 31244
31236: LD_INT 3
31238: DOUBLE
31239: EQUAL
31240: IFTRUE 31244
31242: GO 31300
31244: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
31245: LD_ADDR_VAR 0 9
31249: PUSH
31250: LD_VAR 0 29
31254: PUSH
31255: LD_VAR 0 30
31259: PUSH
31260: LD_VAR 0 31
31264: PUSH
31265: LD_VAR 0 32
31269: PUSH
31270: LD_VAR 0 33
31274: PUSH
31275: LD_VAR 0 34
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: PUSH
31288: LD_VAR 0 4
31292: PUSH
31293: LD_INT 1
31295: PLUS
31296: ARRAY
31297: ST_TO_ADDR
31298: GO 31777
31300: LD_INT 16
31302: DOUBLE
31303: EQUAL
31304: IFTRUE 31356
31306: LD_INT 17
31308: DOUBLE
31309: EQUAL
31310: IFTRUE 31356
31312: LD_INT 18
31314: DOUBLE
31315: EQUAL
31316: IFTRUE 31356
31318: LD_INT 19
31320: DOUBLE
31321: EQUAL
31322: IFTRUE 31356
31324: LD_INT 20
31326: DOUBLE
31327: EQUAL
31328: IFTRUE 31356
31330: LD_INT 21
31332: DOUBLE
31333: EQUAL
31334: IFTRUE 31356
31336: LD_INT 23
31338: DOUBLE
31339: EQUAL
31340: IFTRUE 31356
31342: LD_INT 24
31344: DOUBLE
31345: EQUAL
31346: IFTRUE 31356
31348: LD_INT 25
31350: DOUBLE
31351: EQUAL
31352: IFTRUE 31356
31354: GO 31412
31356: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
31357: LD_ADDR_VAR 0 9
31361: PUSH
31362: LD_VAR 0 35
31366: PUSH
31367: LD_VAR 0 36
31371: PUSH
31372: LD_VAR 0 37
31376: PUSH
31377: LD_VAR 0 38
31381: PUSH
31382: LD_VAR 0 39
31386: PUSH
31387: LD_VAR 0 40
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: PUSH
31400: LD_VAR 0 4
31404: PUSH
31405: LD_INT 1
31407: PLUS
31408: ARRAY
31409: ST_TO_ADDR
31410: GO 31777
31412: LD_INT 6
31414: DOUBLE
31415: EQUAL
31416: IFTRUE 31468
31418: LD_INT 7
31420: DOUBLE
31421: EQUAL
31422: IFTRUE 31468
31424: LD_INT 8
31426: DOUBLE
31427: EQUAL
31428: IFTRUE 31468
31430: LD_INT 13
31432: DOUBLE
31433: EQUAL
31434: IFTRUE 31468
31436: LD_INT 12
31438: DOUBLE
31439: EQUAL
31440: IFTRUE 31468
31442: LD_INT 15
31444: DOUBLE
31445: EQUAL
31446: IFTRUE 31468
31448: LD_INT 11
31450: DOUBLE
31451: EQUAL
31452: IFTRUE 31468
31454: LD_INT 14
31456: DOUBLE
31457: EQUAL
31458: IFTRUE 31468
31460: LD_INT 10
31462: DOUBLE
31463: EQUAL
31464: IFTRUE 31468
31466: GO 31524
31468: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
31469: LD_ADDR_VAR 0 9
31473: PUSH
31474: LD_VAR 0 41
31478: PUSH
31479: LD_VAR 0 42
31483: PUSH
31484: LD_VAR 0 43
31488: PUSH
31489: LD_VAR 0 44
31493: PUSH
31494: LD_VAR 0 45
31498: PUSH
31499: LD_VAR 0 46
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: PUSH
31512: LD_VAR 0 4
31516: PUSH
31517: LD_INT 1
31519: PLUS
31520: ARRAY
31521: ST_TO_ADDR
31522: GO 31777
31524: LD_INT 36
31526: DOUBLE
31527: EQUAL
31528: IFTRUE 31532
31530: GO 31588
31532: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
31533: LD_ADDR_VAR 0 9
31537: PUSH
31538: LD_VAR 0 47
31542: PUSH
31543: LD_VAR 0 48
31547: PUSH
31548: LD_VAR 0 49
31552: PUSH
31553: LD_VAR 0 50
31557: PUSH
31558: LD_VAR 0 51
31562: PUSH
31563: LD_VAR 0 52
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: PUSH
31576: LD_VAR 0 4
31580: PUSH
31581: LD_INT 1
31583: PLUS
31584: ARRAY
31585: ST_TO_ADDR
31586: GO 31777
31588: LD_INT 4
31590: DOUBLE
31591: EQUAL
31592: IFTRUE 31614
31594: LD_INT 5
31596: DOUBLE
31597: EQUAL
31598: IFTRUE 31614
31600: LD_INT 34
31602: DOUBLE
31603: EQUAL
31604: IFTRUE 31614
31606: LD_INT 37
31608: DOUBLE
31609: EQUAL
31610: IFTRUE 31614
31612: GO 31670
31614: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
31615: LD_ADDR_VAR 0 9
31619: PUSH
31620: LD_VAR 0 53
31624: PUSH
31625: LD_VAR 0 54
31629: PUSH
31630: LD_VAR 0 55
31634: PUSH
31635: LD_VAR 0 56
31639: PUSH
31640: LD_VAR 0 57
31644: PUSH
31645: LD_VAR 0 58
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: PUSH
31658: LD_VAR 0 4
31662: PUSH
31663: LD_INT 1
31665: PLUS
31666: ARRAY
31667: ST_TO_ADDR
31668: GO 31777
31670: LD_INT 31
31672: DOUBLE
31673: EQUAL
31674: IFTRUE 31720
31676: LD_INT 32
31678: DOUBLE
31679: EQUAL
31680: IFTRUE 31720
31682: LD_INT 33
31684: DOUBLE
31685: EQUAL
31686: IFTRUE 31720
31688: LD_INT 27
31690: DOUBLE
31691: EQUAL
31692: IFTRUE 31720
31694: LD_INT 26
31696: DOUBLE
31697: EQUAL
31698: IFTRUE 31720
31700: LD_INT 28
31702: DOUBLE
31703: EQUAL
31704: IFTRUE 31720
31706: LD_INT 29
31708: DOUBLE
31709: EQUAL
31710: IFTRUE 31720
31712: LD_INT 30
31714: DOUBLE
31715: EQUAL
31716: IFTRUE 31720
31718: GO 31776
31720: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
31721: LD_ADDR_VAR 0 9
31725: PUSH
31726: LD_VAR 0 59
31730: PUSH
31731: LD_VAR 0 60
31735: PUSH
31736: LD_VAR 0 61
31740: PUSH
31741: LD_VAR 0 62
31745: PUSH
31746: LD_VAR 0 63
31750: PUSH
31751: LD_VAR 0 64
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: PUSH
31764: LD_VAR 0 4
31768: PUSH
31769: LD_INT 1
31771: PLUS
31772: ARRAY
31773: ST_TO_ADDR
31774: GO 31777
31776: POP
// temp_list2 = [ ] ;
31777: LD_ADDR_VAR 0 10
31781: PUSH
31782: EMPTY
31783: ST_TO_ADDR
// for i in temp_list do
31784: LD_ADDR_VAR 0 8
31788: PUSH
31789: LD_VAR 0 9
31793: PUSH
31794: FOR_IN
31795: IFFALSE 31847
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
31797: LD_ADDR_VAR 0 10
31801: PUSH
31802: LD_VAR 0 10
31806: PUSH
31807: LD_VAR 0 8
31811: PUSH
31812: LD_INT 1
31814: ARRAY
31815: PUSH
31816: LD_VAR 0 2
31820: PLUS
31821: PUSH
31822: LD_VAR 0 8
31826: PUSH
31827: LD_INT 2
31829: ARRAY
31830: PUSH
31831: LD_VAR 0 3
31835: PLUS
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: EMPTY
31842: LIST
31843: ADD
31844: ST_TO_ADDR
31845: GO 31794
31847: POP
31848: POP
// result = temp_list2 ;
31849: LD_ADDR_VAR 0 7
31853: PUSH
31854: LD_VAR 0 10
31858: ST_TO_ADDR
// end ;
31859: LD_VAR 0 7
31863: RET
// export function EnemyInRange ( unit , dist ) ; begin
31864: LD_INT 0
31866: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
31867: LD_ADDR_VAR 0 3
31871: PUSH
31872: LD_VAR 0 1
31876: PPUSH
31877: CALL_OW 255
31881: PPUSH
31882: LD_VAR 0 1
31886: PPUSH
31887: CALL_OW 250
31891: PPUSH
31892: LD_VAR 0 1
31896: PPUSH
31897: CALL_OW 251
31901: PPUSH
31902: LD_VAR 0 2
31906: PPUSH
31907: CALL 7187 0 4
31911: PUSH
31912: LD_INT 4
31914: ARRAY
31915: ST_TO_ADDR
// end ;
31916: LD_VAR 0 3
31920: RET
// export function PlayerSeeMe ( unit ) ; begin
31921: LD_INT 0
31923: PPUSH
// result := See ( your_side , unit ) ;
31924: LD_ADDR_VAR 0 2
31928: PUSH
31929: LD_OWVAR 2
31933: PPUSH
31934: LD_VAR 0 1
31938: PPUSH
31939: CALL_OW 292
31943: ST_TO_ADDR
// end ;
31944: LD_VAR 0 2
31948: RET
// export function ReverseDir ( unit ) ; begin
31949: LD_INT 0
31951: PPUSH
// if not unit then
31952: LD_VAR 0 1
31956: NOT
31957: IFFALSE 31961
// exit ;
31959: GO 32007
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
31961: LD_ADDR_VAR 0 2
31965: PUSH
31966: LD_INT 3
31968: PUSH
31969: LD_INT 4
31971: PUSH
31972: LD_INT 5
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: LD_INT 1
31980: PUSH
31981: LD_INT 2
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: PUSH
31992: LD_VAR 0 1
31996: PPUSH
31997: CALL_OW 254
32001: PUSH
32002: LD_INT 1
32004: PLUS
32005: ARRAY
32006: ST_TO_ADDR
// end ;
32007: LD_VAR 0 2
32011: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
32012: LD_INT 0
32014: PPUSH
32015: PPUSH
32016: PPUSH
32017: PPUSH
32018: PPUSH
// if not hexes then
32019: LD_VAR 0 2
32023: NOT
32024: IFFALSE 32028
// exit ;
32026: GO 32176
// dist := 9999 ;
32028: LD_ADDR_VAR 0 5
32032: PUSH
32033: LD_INT 9999
32035: ST_TO_ADDR
// for i = 1 to hexes do
32036: LD_ADDR_VAR 0 4
32040: PUSH
32041: DOUBLE
32042: LD_INT 1
32044: DEC
32045: ST_TO_ADDR
32046: LD_VAR 0 2
32050: PUSH
32051: FOR_TO
32052: IFFALSE 32164
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
32054: LD_VAR 0 1
32058: PPUSH
32059: LD_VAR 0 2
32063: PUSH
32064: LD_VAR 0 4
32068: ARRAY
32069: PUSH
32070: LD_INT 1
32072: ARRAY
32073: PPUSH
32074: LD_VAR 0 2
32078: PUSH
32079: LD_VAR 0 4
32083: ARRAY
32084: PUSH
32085: LD_INT 2
32087: ARRAY
32088: PPUSH
32089: CALL_OW 297
32093: PUSH
32094: LD_VAR 0 5
32098: LESS
32099: IFFALSE 32162
// begin hex := hexes [ i ] ;
32101: LD_ADDR_VAR 0 7
32105: PUSH
32106: LD_VAR 0 2
32110: PUSH
32111: LD_VAR 0 4
32115: ARRAY
32116: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32117: LD_ADDR_VAR 0 5
32121: PUSH
32122: LD_VAR 0 1
32126: PPUSH
32127: LD_VAR 0 2
32131: PUSH
32132: LD_VAR 0 4
32136: ARRAY
32137: PUSH
32138: LD_INT 1
32140: ARRAY
32141: PPUSH
32142: LD_VAR 0 2
32146: PUSH
32147: LD_VAR 0 4
32151: ARRAY
32152: PUSH
32153: LD_INT 2
32155: ARRAY
32156: PPUSH
32157: CALL_OW 297
32161: ST_TO_ADDR
// end ; end ;
32162: GO 32051
32164: POP
32165: POP
// result := hex ;
32166: LD_ADDR_VAR 0 3
32170: PUSH
32171: LD_VAR 0 7
32175: ST_TO_ADDR
// end ;
32176: LD_VAR 0 3
32180: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
32181: LD_INT 0
32183: PPUSH
32184: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
32185: LD_VAR 0 1
32189: NOT
32190: PUSH
32191: LD_VAR 0 1
32195: PUSH
32196: LD_INT 21
32198: PUSH
32199: LD_INT 2
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 23
32208: PUSH
32209: LD_INT 2
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PPUSH
32220: CALL_OW 69
32224: IN
32225: NOT
32226: OR
32227: IFFALSE 32231
// exit ;
32229: GO 32278
// for i = 1 to 3 do
32231: LD_ADDR_VAR 0 3
32235: PUSH
32236: DOUBLE
32237: LD_INT 1
32239: DEC
32240: ST_TO_ADDR
32241: LD_INT 3
32243: PUSH
32244: FOR_TO
32245: IFFALSE 32276
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
32247: LD_VAR 0 1
32251: PPUSH
32252: CALL_OW 250
32256: PPUSH
32257: LD_VAR 0 1
32261: PPUSH
32262: CALL_OW 251
32266: PPUSH
32267: LD_INT 1
32269: PPUSH
32270: CALL_OW 453
32274: GO 32244
32276: POP
32277: POP
// end ;
32278: LD_VAR 0 2
32282: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
32283: LD_INT 0
32285: PPUSH
32286: PPUSH
32287: PPUSH
32288: PPUSH
32289: PPUSH
32290: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
32291: LD_VAR 0 1
32295: NOT
32296: PUSH
32297: LD_VAR 0 2
32301: NOT
32302: OR
32303: PUSH
32304: LD_VAR 0 1
32308: PPUSH
32309: CALL_OW 314
32313: OR
32314: IFFALSE 32318
// exit ;
32316: GO 32759
// x := GetX ( enemy_unit ) ;
32318: LD_ADDR_VAR 0 7
32322: PUSH
32323: LD_VAR 0 2
32327: PPUSH
32328: CALL_OW 250
32332: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
32333: LD_ADDR_VAR 0 8
32337: PUSH
32338: LD_VAR 0 2
32342: PPUSH
32343: CALL_OW 251
32347: ST_TO_ADDR
// if not x or not y then
32348: LD_VAR 0 7
32352: NOT
32353: PUSH
32354: LD_VAR 0 8
32358: NOT
32359: OR
32360: IFFALSE 32364
// exit ;
32362: GO 32759
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
32364: LD_ADDR_VAR 0 6
32368: PUSH
32369: LD_VAR 0 7
32373: PPUSH
32374: LD_INT 0
32376: PPUSH
32377: LD_INT 4
32379: PPUSH
32380: CALL_OW 272
32384: PUSH
32385: LD_VAR 0 8
32389: PPUSH
32390: LD_INT 0
32392: PPUSH
32393: LD_INT 4
32395: PPUSH
32396: CALL_OW 273
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_VAR 0 7
32409: PPUSH
32410: LD_INT 1
32412: PPUSH
32413: LD_INT 4
32415: PPUSH
32416: CALL_OW 272
32420: PUSH
32421: LD_VAR 0 8
32425: PPUSH
32426: LD_INT 1
32428: PPUSH
32429: LD_INT 4
32431: PPUSH
32432: CALL_OW 273
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_VAR 0 7
32445: PPUSH
32446: LD_INT 2
32448: PPUSH
32449: LD_INT 4
32451: PPUSH
32452: CALL_OW 272
32456: PUSH
32457: LD_VAR 0 8
32461: PPUSH
32462: LD_INT 2
32464: PPUSH
32465: LD_INT 4
32467: PPUSH
32468: CALL_OW 273
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_VAR 0 7
32481: PPUSH
32482: LD_INT 3
32484: PPUSH
32485: LD_INT 4
32487: PPUSH
32488: CALL_OW 272
32492: PUSH
32493: LD_VAR 0 8
32497: PPUSH
32498: LD_INT 3
32500: PPUSH
32501: LD_INT 4
32503: PPUSH
32504: CALL_OW 273
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_VAR 0 7
32517: PPUSH
32518: LD_INT 4
32520: PPUSH
32521: LD_INT 4
32523: PPUSH
32524: CALL_OW 272
32528: PUSH
32529: LD_VAR 0 8
32533: PPUSH
32534: LD_INT 4
32536: PPUSH
32537: LD_INT 4
32539: PPUSH
32540: CALL_OW 273
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_VAR 0 7
32553: PPUSH
32554: LD_INT 5
32556: PPUSH
32557: LD_INT 4
32559: PPUSH
32560: CALL_OW 272
32564: PUSH
32565: LD_VAR 0 8
32569: PPUSH
32570: LD_INT 5
32572: PPUSH
32573: LD_INT 4
32575: PPUSH
32576: CALL_OW 273
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: ST_TO_ADDR
// for i = tmp downto 1 do
32593: LD_ADDR_VAR 0 4
32597: PUSH
32598: DOUBLE
32599: LD_VAR 0 6
32603: INC
32604: ST_TO_ADDR
32605: LD_INT 1
32607: PUSH
32608: FOR_DOWNTO
32609: IFFALSE 32710
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
32611: LD_VAR 0 6
32615: PUSH
32616: LD_VAR 0 4
32620: ARRAY
32621: PUSH
32622: LD_INT 1
32624: ARRAY
32625: PPUSH
32626: LD_VAR 0 6
32630: PUSH
32631: LD_VAR 0 4
32635: ARRAY
32636: PUSH
32637: LD_INT 2
32639: ARRAY
32640: PPUSH
32641: CALL_OW 488
32645: NOT
32646: PUSH
32647: LD_VAR 0 6
32651: PUSH
32652: LD_VAR 0 4
32656: ARRAY
32657: PUSH
32658: LD_INT 1
32660: ARRAY
32661: PPUSH
32662: LD_VAR 0 6
32666: PUSH
32667: LD_VAR 0 4
32671: ARRAY
32672: PUSH
32673: LD_INT 2
32675: ARRAY
32676: PPUSH
32677: CALL_OW 428
32681: PUSH
32682: LD_INT 0
32684: NONEQUAL
32685: OR
32686: IFFALSE 32708
// tmp := Delete ( tmp , i ) ;
32688: LD_ADDR_VAR 0 6
32692: PUSH
32693: LD_VAR 0 6
32697: PPUSH
32698: LD_VAR 0 4
32702: PPUSH
32703: CALL_OW 3
32707: ST_TO_ADDR
32708: GO 32608
32710: POP
32711: POP
// j := GetClosestHex ( unit , tmp ) ;
32712: LD_ADDR_VAR 0 5
32716: PUSH
32717: LD_VAR 0 1
32721: PPUSH
32722: LD_VAR 0 6
32726: PPUSH
32727: CALL 32012 0 2
32731: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
32732: LD_VAR 0 1
32736: PPUSH
32737: LD_VAR 0 5
32741: PUSH
32742: LD_INT 1
32744: ARRAY
32745: PPUSH
32746: LD_VAR 0 5
32750: PUSH
32751: LD_INT 2
32753: ARRAY
32754: PPUSH
32755: CALL_OW 111
// end ;
32759: LD_VAR 0 3
32763: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
32764: LD_INT 0
32766: PPUSH
32767: PPUSH
32768: PPUSH
// uc_side = 0 ;
32769: LD_ADDR_OWVAR 20
32773: PUSH
32774: LD_INT 0
32776: ST_TO_ADDR
// uc_nation = 0 ;
32777: LD_ADDR_OWVAR 21
32781: PUSH
32782: LD_INT 0
32784: ST_TO_ADDR
// InitHc ;
32785: CALL_OW 19
// InitVc ;
32789: CALL_OW 20
// if mastodonts then
32793: LD_VAR 0 6
32797: IFFALSE 32864
// for i = 1 to mastodonts do
32799: LD_ADDR_VAR 0 11
32803: PUSH
32804: DOUBLE
32805: LD_INT 1
32807: DEC
32808: ST_TO_ADDR
32809: LD_VAR 0 6
32813: PUSH
32814: FOR_TO
32815: IFFALSE 32862
// begin vc_chassis := 31 ;
32817: LD_ADDR_OWVAR 37
32821: PUSH
32822: LD_INT 31
32824: ST_TO_ADDR
// vc_control := control_rider ;
32825: LD_ADDR_OWVAR 38
32829: PUSH
32830: LD_INT 4
32832: ST_TO_ADDR
// animal := CreateVehicle ;
32833: LD_ADDR_VAR 0 12
32837: PUSH
32838: CALL_OW 45
32842: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
32843: LD_VAR 0 12
32847: PPUSH
32848: LD_VAR 0 8
32852: PPUSH
32853: LD_INT 0
32855: PPUSH
32856: CALL_OW 49
// end ;
32860: GO 32814
32862: POP
32863: POP
// if horses then
32864: LD_VAR 0 5
32868: IFFALSE 32935
// for i = 1 to horses do
32870: LD_ADDR_VAR 0 11
32874: PUSH
32875: DOUBLE
32876: LD_INT 1
32878: DEC
32879: ST_TO_ADDR
32880: LD_VAR 0 5
32884: PUSH
32885: FOR_TO
32886: IFFALSE 32933
// begin hc_class := 21 ;
32888: LD_ADDR_OWVAR 28
32892: PUSH
32893: LD_INT 21
32895: ST_TO_ADDR
// hc_gallery :=  ;
32896: LD_ADDR_OWVAR 33
32900: PUSH
32901: LD_STRING 
32903: ST_TO_ADDR
// animal := CreateHuman ;
32904: LD_ADDR_VAR 0 12
32908: PUSH
32909: CALL_OW 44
32913: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
32914: LD_VAR 0 12
32918: PPUSH
32919: LD_VAR 0 8
32923: PPUSH
32924: LD_INT 0
32926: PPUSH
32927: CALL_OW 49
// end ;
32931: GO 32885
32933: POP
32934: POP
// if birds then
32935: LD_VAR 0 1
32939: IFFALSE 33006
// for i = 1 to birds do
32941: LD_ADDR_VAR 0 11
32945: PUSH
32946: DOUBLE
32947: LD_INT 1
32949: DEC
32950: ST_TO_ADDR
32951: LD_VAR 0 1
32955: PUSH
32956: FOR_TO
32957: IFFALSE 33004
// begin hc_class = 18 ;
32959: LD_ADDR_OWVAR 28
32963: PUSH
32964: LD_INT 18
32966: ST_TO_ADDR
// hc_gallery =  ;
32967: LD_ADDR_OWVAR 33
32971: PUSH
32972: LD_STRING 
32974: ST_TO_ADDR
// animal := CreateHuman ;
32975: LD_ADDR_VAR 0 12
32979: PUSH
32980: CALL_OW 44
32984: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
32985: LD_VAR 0 12
32989: PPUSH
32990: LD_VAR 0 8
32994: PPUSH
32995: LD_INT 0
32997: PPUSH
32998: CALL_OW 49
// end ;
33002: GO 32956
33004: POP
33005: POP
// if tigers then
33006: LD_VAR 0 2
33010: IFFALSE 33094
// for i = 1 to tigers do
33012: LD_ADDR_VAR 0 11
33016: PUSH
33017: DOUBLE
33018: LD_INT 1
33020: DEC
33021: ST_TO_ADDR
33022: LD_VAR 0 2
33026: PUSH
33027: FOR_TO
33028: IFFALSE 33092
// begin hc_class = class_tiger ;
33030: LD_ADDR_OWVAR 28
33034: PUSH
33035: LD_INT 14
33037: ST_TO_ADDR
// hc_gallery =  ;
33038: LD_ADDR_OWVAR 33
33042: PUSH
33043: LD_STRING 
33045: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
33046: LD_ADDR_OWVAR 35
33050: PUSH
33051: LD_INT 7
33053: NEG
33054: PPUSH
33055: LD_INT 7
33057: PPUSH
33058: CALL_OW 12
33062: ST_TO_ADDR
// animal := CreateHuman ;
33063: LD_ADDR_VAR 0 12
33067: PUSH
33068: CALL_OW 44
33072: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
33073: LD_VAR 0 12
33077: PPUSH
33078: LD_VAR 0 8
33082: PPUSH
33083: LD_INT 0
33085: PPUSH
33086: CALL_OW 49
// end ;
33090: GO 33027
33092: POP
33093: POP
// if apemans then
33094: LD_VAR 0 3
33098: IFFALSE 33221
// for i = 1 to apemans do
33100: LD_ADDR_VAR 0 11
33104: PUSH
33105: DOUBLE
33106: LD_INT 1
33108: DEC
33109: ST_TO_ADDR
33110: LD_VAR 0 3
33114: PUSH
33115: FOR_TO
33116: IFFALSE 33219
// begin hc_class = class_apeman ;
33118: LD_ADDR_OWVAR 28
33122: PUSH
33123: LD_INT 12
33125: ST_TO_ADDR
// hc_gallery =  ;
33126: LD_ADDR_OWVAR 33
33130: PUSH
33131: LD_STRING 
33133: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
33134: LD_ADDR_OWVAR 35
33138: PUSH
33139: LD_INT 5
33141: NEG
33142: PPUSH
33143: LD_INT 5
33145: PPUSH
33146: CALL_OW 12
33150: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
33151: LD_ADDR_OWVAR 31
33155: PUSH
33156: LD_INT 1
33158: PPUSH
33159: LD_INT 3
33161: PPUSH
33162: CALL_OW 12
33166: PUSH
33167: LD_INT 1
33169: PPUSH
33170: LD_INT 3
33172: PPUSH
33173: CALL_OW 12
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: LD_INT 0
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: ST_TO_ADDR
// animal := CreateHuman ;
33190: LD_ADDR_VAR 0 12
33194: PUSH
33195: CALL_OW 44
33199: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
33200: LD_VAR 0 12
33204: PPUSH
33205: LD_VAR 0 8
33209: PPUSH
33210: LD_INT 0
33212: PPUSH
33213: CALL_OW 49
// end ;
33217: GO 33115
33219: POP
33220: POP
// if enchidnas then
33221: LD_VAR 0 4
33225: IFFALSE 33292
// for i = 1 to enchidnas do
33227: LD_ADDR_VAR 0 11
33231: PUSH
33232: DOUBLE
33233: LD_INT 1
33235: DEC
33236: ST_TO_ADDR
33237: LD_VAR 0 4
33241: PUSH
33242: FOR_TO
33243: IFFALSE 33290
// begin hc_class = 13 ;
33245: LD_ADDR_OWVAR 28
33249: PUSH
33250: LD_INT 13
33252: ST_TO_ADDR
// hc_gallery =  ;
33253: LD_ADDR_OWVAR 33
33257: PUSH
33258: LD_STRING 
33260: ST_TO_ADDR
// animal := CreateHuman ;
33261: LD_ADDR_VAR 0 12
33265: PUSH
33266: CALL_OW 44
33270: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
33271: LD_VAR 0 12
33275: PPUSH
33276: LD_VAR 0 8
33280: PPUSH
33281: LD_INT 0
33283: PPUSH
33284: CALL_OW 49
// end ;
33288: GO 33242
33290: POP
33291: POP
// if not wat_area then
33292: LD_VAR 0 9
33296: NOT
33297: IFFALSE 33301
// exit ;
33299: GO 33372
// if fishes then
33301: LD_VAR 0 7
33305: IFFALSE 33372
// for i = 1 to fishes do
33307: LD_ADDR_VAR 0 11
33311: PUSH
33312: DOUBLE
33313: LD_INT 1
33315: DEC
33316: ST_TO_ADDR
33317: LD_VAR 0 7
33321: PUSH
33322: FOR_TO
33323: IFFALSE 33370
// begin hc_class = 20 ;
33325: LD_ADDR_OWVAR 28
33329: PUSH
33330: LD_INT 20
33332: ST_TO_ADDR
// hc_gallery =  ;
33333: LD_ADDR_OWVAR 33
33337: PUSH
33338: LD_STRING 
33340: ST_TO_ADDR
// animal := CreateHuman ;
33341: LD_ADDR_VAR 0 12
33345: PUSH
33346: CALL_OW 44
33350: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
33351: LD_VAR 0 12
33355: PPUSH
33356: LD_VAR 0 9
33360: PPUSH
33361: LD_INT 0
33363: PPUSH
33364: CALL_OW 49
// end ;
33368: GO 33322
33370: POP
33371: POP
// end ;
33372: LD_VAR 0 10
33376: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
33377: LD_INT 0
33379: PPUSH
33380: PPUSH
33381: PPUSH
33382: PPUSH
33383: PPUSH
33384: PPUSH
33385: PPUSH
33386: PPUSH
33387: PPUSH
33388: PPUSH
33389: PPUSH
33390: PPUSH
33391: PPUSH
33392: PPUSH
33393: PPUSH
33394: PPUSH
33395: PPUSH
33396: PPUSH
33397: PPUSH
33398: PPUSH
33399: PPUSH
33400: PPUSH
33401: PPUSH
33402: PPUSH
33403: PPUSH
33404: PPUSH
33405: PPUSH
33406: PPUSH
// if not list then
33407: LD_VAR 0 1
33411: NOT
33412: IFFALSE 33416
// exit ;
33414: GO 36659
// base := list [ 1 ] ;
33416: LD_ADDR_VAR 0 3
33420: PUSH
33421: LD_VAR 0 1
33425: PUSH
33426: LD_INT 1
33428: ARRAY
33429: ST_TO_ADDR
// group := list [ 2 ] ;
33430: LD_ADDR_VAR 0 4
33434: PUSH
33435: LD_VAR 0 1
33439: PUSH
33440: LD_INT 2
33442: ARRAY
33443: ST_TO_ADDR
// path := list [ 3 ] ;
33444: LD_ADDR_VAR 0 5
33448: PUSH
33449: LD_VAR 0 1
33453: PUSH
33454: LD_INT 3
33456: ARRAY
33457: ST_TO_ADDR
// flags := list [ 4 ] ;
33458: LD_ADDR_VAR 0 6
33462: PUSH
33463: LD_VAR 0 1
33467: PUSH
33468: LD_INT 4
33470: ARRAY
33471: ST_TO_ADDR
// mined := [ ] ;
33472: LD_ADDR_VAR 0 27
33476: PUSH
33477: EMPTY
33478: ST_TO_ADDR
// bombed := [ ] ;
33479: LD_ADDR_VAR 0 28
33483: PUSH
33484: EMPTY
33485: ST_TO_ADDR
// if not group or not path then
33486: LD_VAR 0 4
33490: NOT
33491: PUSH
33492: LD_VAR 0 5
33496: NOT
33497: OR
33498: IFFALSE 33502
// exit ;
33500: GO 36659
// if flags then
33502: LD_VAR 0 6
33506: IFFALSE 33650
// begin f_ignore_area := flags [ 1 ] ;
33508: LD_ADDR_VAR 0 17
33512: PUSH
33513: LD_VAR 0 6
33517: PUSH
33518: LD_INT 1
33520: ARRAY
33521: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
33522: LD_ADDR_VAR 0 18
33526: PUSH
33527: LD_VAR 0 6
33531: PUSH
33532: LD_INT 2
33534: ARRAY
33535: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
33536: LD_ADDR_VAR 0 19
33540: PUSH
33541: LD_VAR 0 6
33545: PUSH
33546: LD_INT 3
33548: ARRAY
33549: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
33550: LD_ADDR_VAR 0 20
33554: PUSH
33555: LD_VAR 0 6
33559: PUSH
33560: LD_INT 4
33562: ARRAY
33563: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
33564: LD_ADDR_VAR 0 21
33568: PUSH
33569: LD_VAR 0 6
33573: PUSH
33574: LD_INT 5
33576: ARRAY
33577: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
33578: LD_ADDR_VAR 0 22
33582: PUSH
33583: LD_VAR 0 6
33587: PUSH
33588: LD_INT 6
33590: ARRAY
33591: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
33592: LD_ADDR_VAR 0 23
33596: PUSH
33597: LD_VAR 0 6
33601: PUSH
33602: LD_INT 7
33604: ARRAY
33605: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
33606: LD_ADDR_VAR 0 24
33610: PUSH
33611: LD_VAR 0 6
33615: PUSH
33616: LD_INT 8
33618: ARRAY
33619: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
33620: LD_ADDR_VAR 0 25
33624: PUSH
33625: LD_VAR 0 6
33629: PUSH
33630: LD_INT 9
33632: ARRAY
33633: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
33634: LD_ADDR_VAR 0 26
33638: PUSH
33639: LD_VAR 0 6
33643: PUSH
33644: LD_INT 10
33646: ARRAY
33647: ST_TO_ADDR
// end else
33648: GO 33730
// begin f_ignore_area := false ;
33650: LD_ADDR_VAR 0 17
33654: PUSH
33655: LD_INT 0
33657: ST_TO_ADDR
// f_capture := false ;
33658: LD_ADDR_VAR 0 18
33662: PUSH
33663: LD_INT 0
33665: ST_TO_ADDR
// f_ignore_civ := false ;
33666: LD_ADDR_VAR 0 19
33670: PUSH
33671: LD_INT 0
33673: ST_TO_ADDR
// f_murder := false ;
33674: LD_ADDR_VAR 0 20
33678: PUSH
33679: LD_INT 0
33681: ST_TO_ADDR
// f_mines := false ;
33682: LD_ADDR_VAR 0 21
33686: PUSH
33687: LD_INT 0
33689: ST_TO_ADDR
// f_repair := false ;
33690: LD_ADDR_VAR 0 22
33694: PUSH
33695: LD_INT 0
33697: ST_TO_ADDR
// f_heal := false ;
33698: LD_ADDR_VAR 0 23
33702: PUSH
33703: LD_INT 0
33705: ST_TO_ADDR
// f_spacetime := false ;
33706: LD_ADDR_VAR 0 24
33710: PUSH
33711: LD_INT 0
33713: ST_TO_ADDR
// f_attack_depot := false ;
33714: LD_ADDR_VAR 0 25
33718: PUSH
33719: LD_INT 0
33721: ST_TO_ADDR
// f_crawl := false ;
33722: LD_ADDR_VAR 0 26
33726: PUSH
33727: LD_INT 0
33729: ST_TO_ADDR
// end ; units_path := [ ] ;
33730: LD_ADDR_VAR 0 16
33734: PUSH
33735: EMPTY
33736: ST_TO_ADDR
// for i = 1 to group do
33737: LD_ADDR_VAR 0 7
33741: PUSH
33742: DOUBLE
33743: LD_INT 1
33745: DEC
33746: ST_TO_ADDR
33747: LD_VAR 0 4
33751: PUSH
33752: FOR_TO
33753: IFFALSE 33782
// begin units_path := Replace ( units_path , i , path ) ;
33755: LD_ADDR_VAR 0 16
33759: PUSH
33760: LD_VAR 0 16
33764: PPUSH
33765: LD_VAR 0 7
33769: PPUSH
33770: LD_VAR 0 5
33774: PPUSH
33775: CALL_OW 1
33779: ST_TO_ADDR
// end ;
33780: GO 33752
33782: POP
33783: POP
// repeat for i = group downto 1 do
33784: LD_ADDR_VAR 0 7
33788: PUSH
33789: DOUBLE
33790: LD_VAR 0 4
33794: INC
33795: ST_TO_ADDR
33796: LD_INT 1
33798: PUSH
33799: FOR_DOWNTO
33800: IFFALSE 36641
// begin wait ( 0 0$1 ) ;
33802: LD_INT 35
33804: PPUSH
33805: CALL_OW 67
// tmp := [ ] ;
33809: LD_ADDR_VAR 0 14
33813: PUSH
33814: EMPTY
33815: ST_TO_ADDR
// attacking := false ;
33816: LD_ADDR_VAR 0 29
33820: PUSH
33821: LD_INT 0
33823: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
33824: LD_VAR 0 4
33828: PUSH
33829: LD_VAR 0 7
33833: ARRAY
33834: PPUSH
33835: CALL_OW 301
33839: PUSH
33840: LD_VAR 0 4
33844: PUSH
33845: LD_VAR 0 7
33849: ARRAY
33850: NOT
33851: OR
33852: IFFALSE 33896
// begin group := Delete ( group , i ) ;
33854: LD_ADDR_VAR 0 4
33858: PUSH
33859: LD_VAR 0 4
33863: PPUSH
33864: LD_VAR 0 7
33868: PPUSH
33869: CALL_OW 3
33873: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
33874: LD_ADDR_VAR 0 16
33878: PUSH
33879: LD_VAR 0 16
33883: PPUSH
33884: LD_VAR 0 7
33888: PPUSH
33889: CALL_OW 3
33893: ST_TO_ADDR
// continue ;
33894: GO 33799
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
33896: LD_VAR 0 4
33900: PUSH
33901: LD_VAR 0 7
33905: ARRAY
33906: PPUSH
33907: LD_INT 10
33909: PPUSH
33910: CALL 31864 0 2
33914: NOT
33915: PUSH
33916: LD_VAR 0 16
33920: PUSH
33921: LD_VAR 0 7
33925: ARRAY
33926: PUSH
33927: EMPTY
33928: EQUAL
33929: NOT
33930: AND
33931: IFFALSE 34197
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
33933: LD_VAR 0 4
33937: PUSH
33938: LD_VAR 0 7
33942: ARRAY
33943: PPUSH
33944: CALL_OW 262
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: LD_INT 2
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: IN
33959: IFFALSE 34000
// if GetFuel ( group [ i ] ) < 10 then
33961: LD_VAR 0 4
33965: PUSH
33966: LD_VAR 0 7
33970: ARRAY
33971: PPUSH
33972: CALL_OW 261
33976: PUSH
33977: LD_INT 10
33979: LESS
33980: IFFALSE 34000
// SetFuel ( group [ i ] , 12 ) ;
33982: LD_VAR 0 4
33986: PUSH
33987: LD_VAR 0 7
33991: ARRAY
33992: PPUSH
33993: LD_INT 12
33995: PPUSH
33996: CALL_OW 240
// if units_path [ i ] then
34000: LD_VAR 0 16
34004: PUSH
34005: LD_VAR 0 7
34009: ARRAY
34010: IFFALSE 34195
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
34012: LD_VAR 0 4
34016: PUSH
34017: LD_VAR 0 7
34021: ARRAY
34022: PPUSH
34023: LD_VAR 0 16
34027: PUSH
34028: LD_VAR 0 7
34032: ARRAY
34033: PUSH
34034: LD_INT 1
34036: ARRAY
34037: PUSH
34038: LD_INT 1
34040: ARRAY
34041: PPUSH
34042: LD_VAR 0 16
34046: PUSH
34047: LD_VAR 0 7
34051: ARRAY
34052: PUSH
34053: LD_INT 1
34055: ARRAY
34056: PUSH
34057: LD_INT 2
34059: ARRAY
34060: PPUSH
34061: CALL_OW 297
34065: PUSH
34066: LD_INT 6
34068: GREATER
34069: IFFALSE 34144
// begin if not HasTask ( group [ i ] ) then
34071: LD_VAR 0 4
34075: PUSH
34076: LD_VAR 0 7
34080: ARRAY
34081: PPUSH
34082: CALL_OW 314
34086: NOT
34087: IFFALSE 34142
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
34089: LD_VAR 0 4
34093: PUSH
34094: LD_VAR 0 7
34098: ARRAY
34099: PPUSH
34100: LD_VAR 0 16
34104: PUSH
34105: LD_VAR 0 7
34109: ARRAY
34110: PUSH
34111: LD_INT 1
34113: ARRAY
34114: PUSH
34115: LD_INT 1
34117: ARRAY
34118: PPUSH
34119: LD_VAR 0 16
34123: PUSH
34124: LD_VAR 0 7
34128: ARRAY
34129: PUSH
34130: LD_INT 1
34132: ARRAY
34133: PUSH
34134: LD_INT 2
34136: ARRAY
34137: PPUSH
34138: CALL_OW 114
// end else
34142: GO 34195
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
34144: LD_ADDR_VAR 0 15
34148: PUSH
34149: LD_VAR 0 16
34153: PUSH
34154: LD_VAR 0 7
34158: ARRAY
34159: PPUSH
34160: LD_INT 1
34162: PPUSH
34163: CALL_OW 3
34167: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
34168: LD_ADDR_VAR 0 16
34172: PUSH
34173: LD_VAR 0 16
34177: PPUSH
34178: LD_VAR 0 7
34182: PPUSH
34183: LD_VAR 0 15
34187: PPUSH
34188: CALL_OW 1
34192: ST_TO_ADDR
// continue ;
34193: GO 33799
// end ; end ; end else
34195: GO 36639
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
34197: LD_ADDR_VAR 0 14
34201: PUSH
34202: LD_INT 81
34204: PUSH
34205: LD_VAR 0 4
34209: PUSH
34210: LD_VAR 0 7
34214: ARRAY
34215: PPUSH
34216: CALL_OW 255
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PPUSH
34225: CALL_OW 69
34229: ST_TO_ADDR
// if not tmp then
34230: LD_VAR 0 14
34234: NOT
34235: IFFALSE 34239
// continue ;
34237: GO 33799
// if f_ignore_area then
34239: LD_VAR 0 17
34243: IFFALSE 34331
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
34245: LD_ADDR_VAR 0 15
34249: PUSH
34250: LD_VAR 0 14
34254: PPUSH
34255: LD_INT 3
34257: PUSH
34258: LD_INT 92
34260: PUSH
34261: LD_VAR 0 17
34265: PUSH
34266: LD_INT 1
34268: ARRAY
34269: PUSH
34270: LD_VAR 0 17
34274: PUSH
34275: LD_INT 2
34277: ARRAY
34278: PUSH
34279: LD_VAR 0 17
34283: PUSH
34284: LD_INT 3
34286: ARRAY
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PPUSH
34298: CALL_OW 72
34302: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
34303: LD_VAR 0 14
34307: PUSH
34308: LD_VAR 0 15
34312: DIFF
34313: IFFALSE 34331
// tmp := tmp diff tmp2 ;
34315: LD_ADDR_VAR 0 14
34319: PUSH
34320: LD_VAR 0 14
34324: PUSH
34325: LD_VAR 0 15
34329: DIFF
34330: ST_TO_ADDR
// end ; if not f_murder then
34331: LD_VAR 0 20
34335: NOT
34336: IFFALSE 34394
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
34338: LD_ADDR_VAR 0 15
34342: PUSH
34343: LD_VAR 0 14
34347: PPUSH
34348: LD_INT 3
34350: PUSH
34351: LD_INT 50
34353: PUSH
34354: EMPTY
34355: LIST
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PPUSH
34361: CALL_OW 72
34365: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
34366: LD_VAR 0 14
34370: PUSH
34371: LD_VAR 0 15
34375: DIFF
34376: IFFALSE 34394
// tmp := tmp diff tmp2 ;
34378: LD_ADDR_VAR 0 14
34382: PUSH
34383: LD_VAR 0 14
34387: PUSH
34388: LD_VAR 0 15
34392: DIFF
34393: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
34394: LD_ADDR_VAR 0 14
34398: PUSH
34399: LD_VAR 0 4
34403: PUSH
34404: LD_VAR 0 7
34408: ARRAY
34409: PPUSH
34410: LD_VAR 0 14
34414: PPUSH
34415: LD_INT 1
34417: PPUSH
34418: LD_INT 1
34420: PPUSH
34421: CALL 6726 0 4
34425: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
34426: LD_VAR 0 4
34430: PUSH
34431: LD_VAR 0 7
34435: ARRAY
34436: PPUSH
34437: CALL_OW 257
34441: PUSH
34442: LD_INT 1
34444: EQUAL
34445: IFFALSE 34893
// begin if WantPlant ( group [ i ] ) then
34447: LD_VAR 0 4
34451: PUSH
34452: LD_VAR 0 7
34456: ARRAY
34457: PPUSH
34458: CALL 6194 0 1
34462: IFFALSE 34466
// continue ;
34464: GO 33799
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
34466: LD_VAR 0 18
34470: PUSH
34471: LD_VAR 0 4
34475: PUSH
34476: LD_VAR 0 7
34480: ARRAY
34481: PPUSH
34482: CALL_OW 310
34486: NOT
34487: AND
34488: PUSH
34489: LD_VAR 0 14
34493: PUSH
34494: LD_INT 1
34496: ARRAY
34497: PUSH
34498: LD_VAR 0 14
34502: PPUSH
34503: LD_INT 21
34505: PUSH
34506: LD_INT 2
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 58
34515: PUSH
34516: EMPTY
34517: LIST
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PPUSH
34523: CALL_OW 72
34527: IN
34528: AND
34529: IFFALSE 34565
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
34531: LD_VAR 0 4
34535: PUSH
34536: LD_VAR 0 7
34540: ARRAY
34541: PPUSH
34542: LD_VAR 0 14
34546: PUSH
34547: LD_INT 1
34549: ARRAY
34550: PPUSH
34551: CALL_OW 120
// attacking := true ;
34555: LD_ADDR_VAR 0 29
34559: PUSH
34560: LD_INT 1
34562: ST_TO_ADDR
// continue ;
34563: GO 33799
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
34565: LD_VAR 0 26
34569: PUSH
34570: LD_VAR 0 4
34574: PUSH
34575: LD_VAR 0 7
34579: ARRAY
34580: PPUSH
34581: CALL_OW 257
34585: PUSH
34586: LD_INT 1
34588: EQUAL
34589: AND
34590: PUSH
34591: LD_VAR 0 4
34595: PUSH
34596: LD_VAR 0 7
34600: ARRAY
34601: PPUSH
34602: CALL_OW 256
34606: PUSH
34607: LD_INT 800
34609: LESS
34610: AND
34611: PUSH
34612: LD_VAR 0 4
34616: PUSH
34617: LD_VAR 0 7
34621: ARRAY
34622: PPUSH
34623: CALL_OW 318
34627: NOT
34628: AND
34629: IFFALSE 34646
// ComCrawl ( group [ i ] ) ;
34631: LD_VAR 0 4
34635: PUSH
34636: LD_VAR 0 7
34640: ARRAY
34641: PPUSH
34642: CALL_OW 137
// if f_mines then
34646: LD_VAR 0 21
34650: IFFALSE 34893
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
34652: LD_VAR 0 14
34656: PUSH
34657: LD_INT 1
34659: ARRAY
34660: PPUSH
34661: CALL_OW 247
34665: PUSH
34666: LD_INT 3
34668: EQUAL
34669: PUSH
34670: LD_VAR 0 14
34674: PUSH
34675: LD_INT 1
34677: ARRAY
34678: PUSH
34679: LD_VAR 0 27
34683: IN
34684: NOT
34685: AND
34686: IFFALSE 34893
// begin x := GetX ( tmp [ 1 ] ) ;
34688: LD_ADDR_VAR 0 10
34692: PUSH
34693: LD_VAR 0 14
34697: PUSH
34698: LD_INT 1
34700: ARRAY
34701: PPUSH
34702: CALL_OW 250
34706: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
34707: LD_ADDR_VAR 0 11
34711: PUSH
34712: LD_VAR 0 14
34716: PUSH
34717: LD_INT 1
34719: ARRAY
34720: PPUSH
34721: CALL_OW 251
34725: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
34726: LD_ADDR_VAR 0 12
34730: PUSH
34731: LD_VAR 0 4
34735: PUSH
34736: LD_VAR 0 7
34740: ARRAY
34741: PPUSH
34742: CALL 31949 0 1
34746: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
34747: LD_VAR 0 4
34751: PUSH
34752: LD_VAR 0 7
34756: ARRAY
34757: PPUSH
34758: LD_VAR 0 10
34762: PPUSH
34763: LD_VAR 0 11
34767: PPUSH
34768: LD_VAR 0 14
34772: PUSH
34773: LD_INT 1
34775: ARRAY
34776: PPUSH
34777: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
34781: LD_VAR 0 4
34785: PUSH
34786: LD_VAR 0 7
34790: ARRAY
34791: PPUSH
34792: LD_VAR 0 10
34796: PPUSH
34797: LD_VAR 0 12
34801: PPUSH
34802: LD_INT 7
34804: PPUSH
34805: CALL_OW 272
34809: PPUSH
34810: LD_VAR 0 11
34814: PPUSH
34815: LD_VAR 0 12
34819: PPUSH
34820: LD_INT 7
34822: PPUSH
34823: CALL_OW 273
34827: PPUSH
34828: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
34832: LD_VAR 0 4
34836: PUSH
34837: LD_VAR 0 7
34841: ARRAY
34842: PPUSH
34843: LD_INT 71
34845: PPUSH
34846: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
34850: LD_ADDR_VAR 0 27
34854: PUSH
34855: LD_VAR 0 27
34859: PPUSH
34860: LD_VAR 0 27
34864: PUSH
34865: LD_INT 1
34867: PLUS
34868: PPUSH
34869: LD_VAR 0 14
34873: PUSH
34874: LD_INT 1
34876: ARRAY
34877: PPUSH
34878: CALL_OW 1
34882: ST_TO_ADDR
// attacking := true ;
34883: LD_ADDR_VAR 0 29
34887: PUSH
34888: LD_INT 1
34890: ST_TO_ADDR
// continue ;
34891: GO 33799
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
34893: LD_VAR 0 4
34897: PUSH
34898: LD_VAR 0 7
34902: ARRAY
34903: PPUSH
34904: CALL_OW 257
34908: PUSH
34909: LD_INT 17
34911: EQUAL
34912: PUSH
34913: LD_VAR 0 4
34917: PUSH
34918: LD_VAR 0 7
34922: ARRAY
34923: PPUSH
34924: CALL_OW 110
34928: PUSH
34929: LD_INT 71
34931: EQUAL
34932: NOT
34933: AND
34934: IFFALSE 35080
// begin attacking := false ;
34936: LD_ADDR_VAR 0 29
34940: PUSH
34941: LD_INT 0
34943: ST_TO_ADDR
// k := 5 ;
34944: LD_ADDR_VAR 0 9
34948: PUSH
34949: LD_INT 5
34951: ST_TO_ADDR
// if tmp < k then
34952: LD_VAR 0 14
34956: PUSH
34957: LD_VAR 0 9
34961: LESS
34962: IFFALSE 34974
// k := tmp ;
34964: LD_ADDR_VAR 0 9
34968: PUSH
34969: LD_VAR 0 14
34973: ST_TO_ADDR
// for j = 1 to k do
34974: LD_ADDR_VAR 0 8
34978: PUSH
34979: DOUBLE
34980: LD_INT 1
34982: DEC
34983: ST_TO_ADDR
34984: LD_VAR 0 9
34988: PUSH
34989: FOR_TO
34990: IFFALSE 35078
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
34992: LD_VAR 0 14
34996: PUSH
34997: LD_VAR 0 8
35001: ARRAY
35002: PUSH
35003: LD_VAR 0 14
35007: PPUSH
35008: LD_INT 58
35010: PUSH
35011: EMPTY
35012: LIST
35013: PPUSH
35014: CALL_OW 72
35018: IN
35019: NOT
35020: IFFALSE 35076
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
35022: LD_VAR 0 4
35026: PUSH
35027: LD_VAR 0 7
35031: ARRAY
35032: PPUSH
35033: LD_VAR 0 14
35037: PUSH
35038: LD_VAR 0 8
35042: ARRAY
35043: PPUSH
35044: CALL_OW 115
// attacking := true ;
35048: LD_ADDR_VAR 0 29
35052: PUSH
35053: LD_INT 1
35055: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
35056: LD_VAR 0 4
35060: PUSH
35061: LD_VAR 0 7
35065: ARRAY
35066: PPUSH
35067: LD_INT 71
35069: PPUSH
35070: CALL_OW 109
// continue ;
35074: GO 34989
// end ; end ;
35076: GO 34989
35078: POP
35079: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
35080: LD_VAR 0 4
35084: PUSH
35085: LD_VAR 0 7
35089: ARRAY
35090: PPUSH
35091: CALL_OW 257
35095: PUSH
35096: LD_INT 8
35098: EQUAL
35099: PUSH
35100: LD_VAR 0 4
35104: PUSH
35105: LD_VAR 0 7
35109: ARRAY
35110: PPUSH
35111: CALL_OW 264
35115: PUSH
35116: LD_INT 28
35118: PUSH
35119: LD_INT 45
35121: PUSH
35122: LD_INT 7
35124: PUSH
35125: LD_INT 47
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: IN
35134: OR
35135: IFFALSE 35365
// begin attacking := false ;
35137: LD_ADDR_VAR 0 29
35141: PUSH
35142: LD_INT 0
35144: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
35145: LD_VAR 0 14
35149: PUSH
35150: LD_INT 1
35152: ARRAY
35153: PPUSH
35154: CALL_OW 266
35158: PUSH
35159: LD_INT 32
35161: PUSH
35162: LD_INT 31
35164: PUSH
35165: LD_INT 33
35167: PUSH
35168: LD_INT 4
35170: PUSH
35171: LD_INT 5
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: IN
35181: IFFALSE 35365
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
35183: LD_ADDR_VAR 0 9
35187: PUSH
35188: LD_VAR 0 14
35192: PUSH
35193: LD_INT 1
35195: ARRAY
35196: PPUSH
35197: CALL_OW 266
35201: PPUSH
35202: LD_VAR 0 14
35206: PUSH
35207: LD_INT 1
35209: ARRAY
35210: PPUSH
35211: CALL_OW 250
35215: PPUSH
35216: LD_VAR 0 14
35220: PUSH
35221: LD_INT 1
35223: ARRAY
35224: PPUSH
35225: CALL_OW 251
35229: PPUSH
35230: LD_VAR 0 14
35234: PUSH
35235: LD_INT 1
35237: ARRAY
35238: PPUSH
35239: CALL_OW 254
35243: PPUSH
35244: LD_VAR 0 14
35248: PUSH
35249: LD_INT 1
35251: ARRAY
35252: PPUSH
35253: CALL_OW 248
35257: PPUSH
35258: LD_INT 0
35260: PPUSH
35261: CALL 13325 0 6
35265: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
35266: LD_ADDR_VAR 0 8
35270: PUSH
35271: LD_VAR 0 4
35275: PUSH
35276: LD_VAR 0 7
35280: ARRAY
35281: PPUSH
35282: LD_VAR 0 9
35286: PPUSH
35287: CALL 32012 0 2
35291: ST_TO_ADDR
// if j then
35292: LD_VAR 0 8
35296: IFFALSE 35365
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35298: LD_VAR 0 8
35302: PUSH
35303: LD_INT 1
35305: ARRAY
35306: PPUSH
35307: LD_VAR 0 8
35311: PUSH
35312: LD_INT 2
35314: ARRAY
35315: PPUSH
35316: CALL_OW 488
35320: IFFALSE 35365
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
35322: LD_VAR 0 4
35326: PUSH
35327: LD_VAR 0 7
35331: ARRAY
35332: PPUSH
35333: LD_VAR 0 8
35337: PUSH
35338: LD_INT 1
35340: ARRAY
35341: PPUSH
35342: LD_VAR 0 8
35346: PUSH
35347: LD_INT 2
35349: ARRAY
35350: PPUSH
35351: CALL_OW 116
// attacking := true ;
35355: LD_ADDR_VAR 0 29
35359: PUSH
35360: LD_INT 1
35362: ST_TO_ADDR
// continue ;
35363: GO 33799
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
35365: LD_VAR 0 4
35369: PUSH
35370: LD_VAR 0 7
35374: ARRAY
35375: PPUSH
35376: CALL_OW 265
35380: PUSH
35381: LD_INT 11
35383: EQUAL
35384: IFFALSE 35662
// begin k := 10 ;
35386: LD_ADDR_VAR 0 9
35390: PUSH
35391: LD_INT 10
35393: ST_TO_ADDR
// x := 0 ;
35394: LD_ADDR_VAR 0 10
35398: PUSH
35399: LD_INT 0
35401: ST_TO_ADDR
// if tmp < k then
35402: LD_VAR 0 14
35406: PUSH
35407: LD_VAR 0 9
35411: LESS
35412: IFFALSE 35424
// k := tmp ;
35414: LD_ADDR_VAR 0 9
35418: PUSH
35419: LD_VAR 0 14
35423: ST_TO_ADDR
// for j = k downto 1 do
35424: LD_ADDR_VAR 0 8
35428: PUSH
35429: DOUBLE
35430: LD_VAR 0 9
35434: INC
35435: ST_TO_ADDR
35436: LD_INT 1
35438: PUSH
35439: FOR_DOWNTO
35440: IFFALSE 35515
// begin if GetType ( tmp [ j ] ) = unit_human then
35442: LD_VAR 0 14
35446: PUSH
35447: LD_VAR 0 8
35451: ARRAY
35452: PPUSH
35453: CALL_OW 247
35457: PUSH
35458: LD_INT 1
35460: EQUAL
35461: IFFALSE 35513
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
35463: LD_VAR 0 4
35467: PUSH
35468: LD_VAR 0 7
35472: ARRAY
35473: PPUSH
35474: LD_VAR 0 14
35478: PUSH
35479: LD_VAR 0 8
35483: ARRAY
35484: PPUSH
35485: CALL 32283 0 2
// x := tmp [ j ] ;
35489: LD_ADDR_VAR 0 10
35493: PUSH
35494: LD_VAR 0 14
35498: PUSH
35499: LD_VAR 0 8
35503: ARRAY
35504: ST_TO_ADDR
// attacking := true ;
35505: LD_ADDR_VAR 0 29
35509: PUSH
35510: LD_INT 1
35512: ST_TO_ADDR
// end ; end ;
35513: GO 35439
35515: POP
35516: POP
// if not x then
35517: LD_VAR 0 10
35521: NOT
35522: IFFALSE 35662
// begin attacking := true ;
35524: LD_ADDR_VAR 0 29
35528: PUSH
35529: LD_INT 1
35531: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
35532: LD_VAR 0 4
35536: PUSH
35537: LD_VAR 0 7
35541: ARRAY
35542: PPUSH
35543: CALL_OW 250
35547: PPUSH
35548: LD_VAR 0 4
35552: PUSH
35553: LD_VAR 0 7
35557: ARRAY
35558: PPUSH
35559: CALL_OW 251
35563: PPUSH
35564: CALL_OW 546
35568: PUSH
35569: LD_INT 2
35571: ARRAY
35572: PUSH
35573: LD_VAR 0 14
35577: PUSH
35578: LD_INT 1
35580: ARRAY
35581: PPUSH
35582: CALL_OW 250
35586: PPUSH
35587: LD_VAR 0 14
35591: PUSH
35592: LD_INT 1
35594: ARRAY
35595: PPUSH
35596: CALL_OW 251
35600: PPUSH
35601: CALL_OW 546
35605: PUSH
35606: LD_INT 2
35608: ARRAY
35609: EQUAL
35610: IFFALSE 35638
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
35612: LD_VAR 0 4
35616: PUSH
35617: LD_VAR 0 7
35621: ARRAY
35622: PPUSH
35623: LD_VAR 0 14
35627: PUSH
35628: LD_INT 1
35630: ARRAY
35631: PPUSH
35632: CALL 32283 0 2
35636: GO 35662
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
35638: LD_VAR 0 4
35642: PUSH
35643: LD_VAR 0 7
35647: ARRAY
35648: PPUSH
35649: LD_VAR 0 14
35653: PUSH
35654: LD_INT 1
35656: ARRAY
35657: PPUSH
35658: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
35662: LD_VAR 0 4
35666: PUSH
35667: LD_VAR 0 7
35671: ARRAY
35672: PPUSH
35673: CALL_OW 264
35677: PUSH
35678: LD_INT 29
35680: EQUAL
35681: IFFALSE 36047
// begin if WantsToAttack ( group [ i ] ) in bombed then
35683: LD_VAR 0 4
35687: PUSH
35688: LD_VAR 0 7
35692: ARRAY
35693: PPUSH
35694: CALL_OW 319
35698: PUSH
35699: LD_VAR 0 28
35703: IN
35704: IFFALSE 35708
// continue ;
35706: GO 33799
// k := 8 ;
35708: LD_ADDR_VAR 0 9
35712: PUSH
35713: LD_INT 8
35715: ST_TO_ADDR
// x := 0 ;
35716: LD_ADDR_VAR 0 10
35720: PUSH
35721: LD_INT 0
35723: ST_TO_ADDR
// if tmp < k then
35724: LD_VAR 0 14
35728: PUSH
35729: LD_VAR 0 9
35733: LESS
35734: IFFALSE 35746
// k := tmp ;
35736: LD_ADDR_VAR 0 9
35740: PUSH
35741: LD_VAR 0 14
35745: ST_TO_ADDR
// for j = 1 to k do
35746: LD_ADDR_VAR 0 8
35750: PUSH
35751: DOUBLE
35752: LD_INT 1
35754: DEC
35755: ST_TO_ADDR
35756: LD_VAR 0 9
35760: PUSH
35761: FOR_TO
35762: IFFALSE 35894
// begin if GetType ( tmp [ j ] ) = unit_building then
35764: LD_VAR 0 14
35768: PUSH
35769: LD_VAR 0 8
35773: ARRAY
35774: PPUSH
35775: CALL_OW 247
35779: PUSH
35780: LD_INT 3
35782: EQUAL
35783: IFFALSE 35892
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
35785: LD_VAR 0 14
35789: PUSH
35790: LD_VAR 0 8
35794: ARRAY
35795: PUSH
35796: LD_VAR 0 28
35800: IN
35801: NOT
35802: PUSH
35803: LD_VAR 0 14
35807: PUSH
35808: LD_VAR 0 8
35812: ARRAY
35813: PPUSH
35814: CALL_OW 313
35818: AND
35819: IFFALSE 35892
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
35821: LD_VAR 0 4
35825: PUSH
35826: LD_VAR 0 7
35830: ARRAY
35831: PPUSH
35832: LD_VAR 0 14
35836: PUSH
35837: LD_VAR 0 8
35841: ARRAY
35842: PPUSH
35843: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
35847: LD_ADDR_VAR 0 28
35851: PUSH
35852: LD_VAR 0 28
35856: PPUSH
35857: LD_VAR 0 28
35861: PUSH
35862: LD_INT 1
35864: PLUS
35865: PPUSH
35866: LD_VAR 0 14
35870: PUSH
35871: LD_VAR 0 8
35875: ARRAY
35876: PPUSH
35877: CALL_OW 1
35881: ST_TO_ADDR
// attacking := true ;
35882: LD_ADDR_VAR 0 29
35886: PUSH
35887: LD_INT 1
35889: ST_TO_ADDR
// break ;
35890: GO 35894
// end ; end ;
35892: GO 35761
35894: POP
35895: POP
// if not attacking and f_attack_depot then
35896: LD_VAR 0 29
35900: NOT
35901: PUSH
35902: LD_VAR 0 25
35906: AND
35907: IFFALSE 36002
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35909: LD_ADDR_VAR 0 13
35913: PUSH
35914: LD_VAR 0 14
35918: PPUSH
35919: LD_INT 2
35921: PUSH
35922: LD_INT 30
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 30
35934: PUSH
35935: LD_INT 1
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: LIST
35946: PPUSH
35947: CALL_OW 72
35951: ST_TO_ADDR
// if z then
35952: LD_VAR 0 13
35956: IFFALSE 36002
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
35958: LD_VAR 0 4
35962: PUSH
35963: LD_VAR 0 7
35967: ARRAY
35968: PPUSH
35969: LD_VAR 0 13
35973: PPUSH
35974: LD_VAR 0 4
35978: PUSH
35979: LD_VAR 0 7
35983: ARRAY
35984: PPUSH
35985: CALL_OW 74
35989: PPUSH
35990: CALL_OW 115
// attacking := true ;
35994: LD_ADDR_VAR 0 29
35998: PUSH
35999: LD_INT 1
36001: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
36002: LD_VAR 0 4
36006: PUSH
36007: LD_VAR 0 7
36011: ARRAY
36012: PPUSH
36013: CALL_OW 256
36017: PUSH
36018: LD_INT 500
36020: LESS
36021: IFFALSE 36047
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
36023: LD_VAR 0 4
36027: PUSH
36028: LD_VAR 0 7
36032: ARRAY
36033: PPUSH
36034: LD_VAR 0 14
36038: PUSH
36039: LD_INT 1
36041: ARRAY
36042: PPUSH
36043: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36047: LD_VAR 0 4
36051: PUSH
36052: LD_VAR 0 7
36056: ARRAY
36057: PPUSH
36058: CALL_OW 256
36062: PUSH
36063: LD_INT 250
36065: LESS
36066: PUSH
36067: LD_VAR 0 4
36071: PUSH
36072: LD_VAR 0 7
36076: ARRAY
36077: PUSH
36078: LD_INT 21
36080: PUSH
36081: LD_INT 2
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 23
36090: PUSH
36091: LD_INT 2
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PPUSH
36102: CALL_OW 69
36106: IN
36107: AND
36108: IFFALSE 36233
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
36110: LD_ADDR_VAR 0 9
36114: PUSH
36115: LD_OWVAR 3
36119: PUSH
36120: LD_VAR 0 4
36124: PUSH
36125: LD_VAR 0 7
36129: ARRAY
36130: DIFF
36131: PPUSH
36132: LD_VAR 0 4
36136: PUSH
36137: LD_VAR 0 7
36141: ARRAY
36142: PPUSH
36143: CALL_OW 74
36147: ST_TO_ADDR
// if not k then
36148: LD_VAR 0 9
36152: NOT
36153: IFFALSE 36157
// continue ;
36155: GO 33799
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
36157: LD_VAR 0 9
36161: PUSH
36162: LD_INT 81
36164: PUSH
36165: LD_VAR 0 4
36169: PUSH
36170: LD_VAR 0 7
36174: ARRAY
36175: PPUSH
36176: CALL_OW 255
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PPUSH
36185: CALL_OW 69
36189: IN
36190: PUSH
36191: LD_VAR 0 9
36195: PPUSH
36196: LD_VAR 0 4
36200: PUSH
36201: LD_VAR 0 7
36205: ARRAY
36206: PPUSH
36207: CALL_OW 296
36211: PUSH
36212: LD_INT 5
36214: LESS
36215: AND
36216: IFFALSE 36233
// ComAutodestruct ( group [ i ] ) ;
36218: LD_VAR 0 4
36222: PUSH
36223: LD_VAR 0 7
36227: ARRAY
36228: PPUSH
36229: CALL 32181 0 1
// end ; if f_attack_depot then
36233: LD_VAR 0 25
36237: IFFALSE 36349
// begin k := 6 ;
36239: LD_ADDR_VAR 0 9
36243: PUSH
36244: LD_INT 6
36246: ST_TO_ADDR
// if tmp < k then
36247: LD_VAR 0 14
36251: PUSH
36252: LD_VAR 0 9
36256: LESS
36257: IFFALSE 36269
// k := tmp ;
36259: LD_ADDR_VAR 0 9
36263: PUSH
36264: LD_VAR 0 14
36268: ST_TO_ADDR
// for j = 1 to k do
36269: LD_ADDR_VAR 0 8
36273: PUSH
36274: DOUBLE
36275: LD_INT 1
36277: DEC
36278: ST_TO_ADDR
36279: LD_VAR 0 9
36283: PUSH
36284: FOR_TO
36285: IFFALSE 36347
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
36287: LD_VAR 0 8
36291: PPUSH
36292: CALL_OW 266
36296: PUSH
36297: LD_INT 0
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: IN
36307: IFFALSE 36345
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
36309: LD_VAR 0 4
36313: PUSH
36314: LD_VAR 0 7
36318: ARRAY
36319: PPUSH
36320: LD_VAR 0 14
36324: PUSH
36325: LD_VAR 0 8
36329: ARRAY
36330: PPUSH
36331: CALL_OW 115
// attacking := true ;
36335: LD_ADDR_VAR 0 29
36339: PUSH
36340: LD_INT 1
36342: ST_TO_ADDR
// break ;
36343: GO 36347
// end ;
36345: GO 36284
36347: POP
36348: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
36349: LD_VAR 0 4
36353: PUSH
36354: LD_VAR 0 7
36358: ARRAY
36359: PPUSH
36360: CALL_OW 302
36364: PUSH
36365: LD_VAR 0 29
36369: NOT
36370: AND
36371: IFFALSE 36639
// begin if GetTag ( group [ i ] ) = 71 then
36373: LD_VAR 0 4
36377: PUSH
36378: LD_VAR 0 7
36382: ARRAY
36383: PPUSH
36384: CALL_OW 110
36388: PUSH
36389: LD_INT 71
36391: EQUAL
36392: IFFALSE 36433
// begin if HasTask ( group [ i ] ) then
36394: LD_VAR 0 4
36398: PUSH
36399: LD_VAR 0 7
36403: ARRAY
36404: PPUSH
36405: CALL_OW 314
36409: IFFALSE 36415
// continue else
36411: GO 33799
36413: GO 36433
// SetTag ( group [ i ] , 0 ) ;
36415: LD_VAR 0 4
36419: PUSH
36420: LD_VAR 0 7
36424: ARRAY
36425: PPUSH
36426: LD_INT 0
36428: PPUSH
36429: CALL_OW 109
// end ; k := 8 ;
36433: LD_ADDR_VAR 0 9
36437: PUSH
36438: LD_INT 8
36440: ST_TO_ADDR
// x := 0 ;
36441: LD_ADDR_VAR 0 10
36445: PUSH
36446: LD_INT 0
36448: ST_TO_ADDR
// if tmp < k then
36449: LD_VAR 0 14
36453: PUSH
36454: LD_VAR 0 9
36458: LESS
36459: IFFALSE 36471
// k := tmp ;
36461: LD_ADDR_VAR 0 9
36465: PUSH
36466: LD_VAR 0 14
36470: ST_TO_ADDR
// for j = 1 to k do
36471: LD_ADDR_VAR 0 8
36475: PUSH
36476: DOUBLE
36477: LD_INT 1
36479: DEC
36480: ST_TO_ADDR
36481: LD_VAR 0 9
36485: PUSH
36486: FOR_TO
36487: IFFALSE 36585
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
36489: LD_VAR 0 14
36493: PUSH
36494: LD_VAR 0 8
36498: ARRAY
36499: PPUSH
36500: CALL_OW 247
36504: PUSH
36505: LD_INT 1
36507: EQUAL
36508: PUSH
36509: LD_VAR 0 14
36513: PUSH
36514: LD_VAR 0 8
36518: ARRAY
36519: PPUSH
36520: CALL_OW 256
36524: PUSH
36525: LD_INT 250
36527: LESS
36528: PUSH
36529: LD_VAR 0 20
36533: AND
36534: PUSH
36535: LD_VAR 0 20
36539: NOT
36540: PUSH
36541: LD_VAR 0 14
36545: PUSH
36546: LD_VAR 0 8
36550: ARRAY
36551: PPUSH
36552: CALL_OW 256
36556: PUSH
36557: LD_INT 250
36559: GREATEREQUAL
36560: AND
36561: OR
36562: AND
36563: IFFALSE 36583
// begin x := tmp [ j ] ;
36565: LD_ADDR_VAR 0 10
36569: PUSH
36570: LD_VAR 0 14
36574: PUSH
36575: LD_VAR 0 8
36579: ARRAY
36580: ST_TO_ADDR
// break ;
36581: GO 36585
// end ;
36583: GO 36486
36585: POP
36586: POP
// if x then
36587: LD_VAR 0 10
36591: IFFALSE 36615
// ComAttackUnit ( group [ i ] , x ) else
36593: LD_VAR 0 4
36597: PUSH
36598: LD_VAR 0 7
36602: ARRAY
36603: PPUSH
36604: LD_VAR 0 10
36608: PPUSH
36609: CALL_OW 115
36613: GO 36639
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
36615: LD_VAR 0 4
36619: PUSH
36620: LD_VAR 0 7
36624: ARRAY
36625: PPUSH
36626: LD_VAR 0 14
36630: PUSH
36631: LD_INT 1
36633: ARRAY
36634: PPUSH
36635: CALL_OW 115
// end ; end ; end ;
36639: GO 33799
36641: POP
36642: POP
// wait ( 0 0$1 ) ;
36643: LD_INT 35
36645: PPUSH
36646: CALL_OW 67
// until group = [ ] ;
36650: LD_VAR 0 4
36654: PUSH
36655: EMPTY
36656: EQUAL
36657: IFFALSE 33784
// end ;
36659: LD_VAR 0 2
36663: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36664: LD_INT 0
36666: PPUSH
36667: PPUSH
36668: PPUSH
36669: PPUSH
// if not base_units then
36670: LD_VAR 0 1
36674: NOT
36675: IFFALSE 36679
// exit ;
36677: GO 36766
// result := false ;
36679: LD_ADDR_VAR 0 2
36683: PUSH
36684: LD_INT 0
36686: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36687: LD_ADDR_VAR 0 5
36691: PUSH
36692: LD_VAR 0 1
36696: PPUSH
36697: LD_INT 21
36699: PUSH
36700: LD_INT 3
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PPUSH
36707: CALL_OW 72
36711: ST_TO_ADDR
// if not tmp then
36712: LD_VAR 0 5
36716: NOT
36717: IFFALSE 36721
// exit ;
36719: GO 36766
// for i in tmp do
36721: LD_ADDR_VAR 0 3
36725: PUSH
36726: LD_VAR 0 5
36730: PUSH
36731: FOR_IN
36732: IFFALSE 36764
// begin result := EnemyInRange ( i , 22 ) ;
36734: LD_ADDR_VAR 0 2
36738: PUSH
36739: LD_VAR 0 3
36743: PPUSH
36744: LD_INT 22
36746: PPUSH
36747: CALL 31864 0 2
36751: ST_TO_ADDR
// if result then
36752: LD_VAR 0 2
36756: IFFALSE 36762
// exit ;
36758: POP
36759: POP
36760: GO 36766
// end ;
36762: GO 36731
36764: POP
36765: POP
// end ;
36766: LD_VAR 0 2
36770: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
36771: LD_INT 0
36773: PPUSH
36774: PPUSH
// if not units then
36775: LD_VAR 0 1
36779: NOT
36780: IFFALSE 36784
// exit ;
36782: GO 36854
// result := [ ] ;
36784: LD_ADDR_VAR 0 3
36788: PUSH
36789: EMPTY
36790: ST_TO_ADDR
// for i in units do
36791: LD_ADDR_VAR 0 4
36795: PUSH
36796: LD_VAR 0 1
36800: PUSH
36801: FOR_IN
36802: IFFALSE 36852
// if GetTag ( i ) = tag then
36804: LD_VAR 0 4
36808: PPUSH
36809: CALL_OW 110
36813: PUSH
36814: LD_VAR 0 2
36818: EQUAL
36819: IFFALSE 36850
// result := Insert ( result , result + 1 , i ) ;
36821: LD_ADDR_VAR 0 3
36825: PUSH
36826: LD_VAR 0 3
36830: PPUSH
36831: LD_VAR 0 3
36835: PUSH
36836: LD_INT 1
36838: PLUS
36839: PPUSH
36840: LD_VAR 0 4
36844: PPUSH
36845: CALL_OW 2
36849: ST_TO_ADDR
36850: GO 36801
36852: POP
36853: POP
// end ;
36854: LD_VAR 0 3
36858: RET
// export function IsDriver ( un ) ; begin
36859: LD_INT 0
36861: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36862: LD_ADDR_VAR 0 2
36866: PUSH
36867: LD_VAR 0 1
36871: PUSH
36872: LD_INT 55
36874: PUSH
36875: EMPTY
36876: LIST
36877: PPUSH
36878: CALL_OW 69
36882: IN
36883: ST_TO_ADDR
// end ; end_of_file
36884: LD_VAR 0 2
36888: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming ; export function InitMacro ; var i ; begin
36889: LD_INT 0
36891: PPUSH
36892: PPUSH
// skirmish := false ;
36893: LD_ADDR_EXP 4
36897: PUSH
36898: LD_INT 0
36900: ST_TO_ADDR
// mc_bases := [ ] ;
36901: LD_ADDR_EXP 5
36905: PUSH
36906: EMPTY
36907: ST_TO_ADDR
// mc_sides := [ ] ;
36908: LD_ADDR_EXP 30
36912: PUSH
36913: EMPTY
36914: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
36915: LD_ADDR_EXP 6
36919: PUSH
36920: EMPTY
36921: ST_TO_ADDR
// mc_building_repairs := [ ] ;
36922: LD_ADDR_EXP 7
36926: PUSH
36927: EMPTY
36928: ST_TO_ADDR
// mc_need_heal := [ ] ;
36929: LD_ADDR_EXP 8
36933: PUSH
36934: EMPTY
36935: ST_TO_ADDR
// mc_healers := [ ] ;
36936: LD_ADDR_EXP 9
36940: PUSH
36941: EMPTY
36942: ST_TO_ADDR
// mc_build_list := [ ] ;
36943: LD_ADDR_EXP 10
36947: PUSH
36948: EMPTY
36949: ST_TO_ADDR
// mc_builders := [ ] ;
36950: LD_ADDR_EXP 11
36954: PUSH
36955: EMPTY
36956: ST_TO_ADDR
// mc_construct_list := [ ] ;
36957: LD_ADDR_EXP 12
36961: PUSH
36962: EMPTY
36963: ST_TO_ADDR
// mc_turret_list := [ ] ;
36964: LD_ADDR_EXP 13
36968: PUSH
36969: EMPTY
36970: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
36971: LD_ADDR_EXP 14
36975: PUSH
36976: EMPTY
36977: ST_TO_ADDR
// mc_miners := [ ] ;
36978: LD_ADDR_EXP 19
36982: PUSH
36983: EMPTY
36984: ST_TO_ADDR
// mc_mines := [ ] ;
36985: LD_ADDR_EXP 18
36989: PUSH
36990: EMPTY
36991: ST_TO_ADDR
// mc_minefields := [ ] ;
36992: LD_ADDR_EXP 20
36996: PUSH
36997: EMPTY
36998: ST_TO_ADDR
// mc_crates := [ ] ;
36999: LD_ADDR_EXP 21
37003: PUSH
37004: EMPTY
37005: ST_TO_ADDR
// mc_crates_collector := [ ] ;
37006: LD_ADDR_EXP 22
37010: PUSH
37011: EMPTY
37012: ST_TO_ADDR
// mc_vehicles := [ ] ;
37013: LD_ADDR_EXP 23
37017: PUSH
37018: EMPTY
37019: ST_TO_ADDR
// mc_attack := [ ] ;
37020: LD_ADDR_EXP 24
37024: PUSH
37025: EMPTY
37026: ST_TO_ADDR
// mc_produce := [ ] ;
37027: LD_ADDR_EXP 25
37031: PUSH
37032: EMPTY
37033: ST_TO_ADDR
// mc_defender := [ ] ;
37034: LD_ADDR_EXP 26
37038: PUSH
37039: EMPTY
37040: ST_TO_ADDR
// mc_parking := [ ] ;
37041: LD_ADDR_EXP 28
37045: PUSH
37046: EMPTY
37047: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
37048: LD_ADDR_EXP 15
37052: PUSH
37053: EMPTY
37054: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
37055: LD_ADDR_EXP 17
37059: PUSH
37060: EMPTY
37061: ST_TO_ADDR
// mc_scan := [ ] ;
37062: LD_ADDR_EXP 27
37066: PUSH
37067: EMPTY
37068: ST_TO_ADDR
// mc_scan_area := [ ] ;
37069: LD_ADDR_EXP 29
37073: PUSH
37074: EMPTY
37075: ST_TO_ADDR
// mc_tech := [ ] ;
37076: LD_ADDR_EXP 31
37080: PUSH
37081: EMPTY
37082: ST_TO_ADDR
// end ;
37083: LD_VAR 0 1
37087: RET
// export function Skirmish_Start ; var i ; begin
37088: LD_INT 0
37090: PPUSH
37091: PPUSH
// for i = 1 to mc_bases do
37092: LD_ADDR_VAR 0 2
37096: PUSH
37097: DOUBLE
37098: LD_INT 1
37100: DEC
37101: ST_TO_ADDR
37102: LD_EXP 5
37106: PUSH
37107: FOR_TO
37108: IFFALSE 37790
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
37110: LD_ADDR_EXP 6
37114: PUSH
37115: LD_EXP 6
37119: PPUSH
37120: LD_VAR 0 2
37124: PPUSH
37125: EMPTY
37126: PPUSH
37127: CALL_OW 1
37131: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
37132: LD_ADDR_EXP 7
37136: PUSH
37137: LD_EXP 7
37141: PPUSH
37142: LD_VAR 0 2
37146: PPUSH
37147: EMPTY
37148: PPUSH
37149: CALL_OW 1
37153: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
37154: LD_ADDR_EXP 8
37158: PUSH
37159: LD_EXP 8
37163: PPUSH
37164: LD_VAR 0 2
37168: PPUSH
37169: EMPTY
37170: PPUSH
37171: CALL_OW 1
37175: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
37176: LD_ADDR_EXP 9
37180: PUSH
37181: LD_EXP 9
37185: PPUSH
37186: LD_VAR 0 2
37190: PPUSH
37191: EMPTY
37192: PUSH
37193: EMPTY
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PPUSH
37199: CALL_OW 1
37203: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
37204: LD_ADDR_EXP 10
37208: PUSH
37209: LD_EXP 10
37213: PPUSH
37214: LD_VAR 0 2
37218: PPUSH
37219: EMPTY
37220: PPUSH
37221: CALL_OW 1
37225: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
37226: LD_ADDR_EXP 11
37230: PUSH
37231: LD_EXP 11
37235: PPUSH
37236: LD_VAR 0 2
37240: PPUSH
37241: EMPTY
37242: PPUSH
37243: CALL_OW 1
37247: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
37248: LD_ADDR_EXP 12
37252: PUSH
37253: LD_EXP 12
37257: PPUSH
37258: LD_VAR 0 2
37262: PPUSH
37263: EMPTY
37264: PPUSH
37265: CALL_OW 1
37269: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
37270: LD_ADDR_EXP 13
37274: PUSH
37275: LD_EXP 13
37279: PPUSH
37280: LD_VAR 0 2
37284: PPUSH
37285: EMPTY
37286: PPUSH
37287: CALL_OW 1
37291: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
37292: LD_ADDR_EXP 14
37296: PUSH
37297: LD_EXP 14
37301: PPUSH
37302: LD_VAR 0 2
37306: PPUSH
37307: LD_EXP 5
37311: PUSH
37312: LD_VAR 0 2
37316: ARRAY
37317: PPUSH
37318: LD_INT 2
37320: PUSH
37321: LD_INT 30
37323: PUSH
37324: LD_INT 32
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 30
37333: PUSH
37334: LD_INT 31
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 58
37348: PUSH
37349: EMPTY
37350: LIST
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PPUSH
37356: CALL_OW 72
37360: PPUSH
37361: CALL_OW 1
37365: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
37366: LD_ADDR_EXP 15
37370: PUSH
37371: LD_EXP 15
37375: PPUSH
37376: LD_VAR 0 2
37380: PPUSH
37381: EMPTY
37382: PPUSH
37383: CALL_OW 1
37387: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
37388: LD_ADDR_EXP 19
37392: PUSH
37393: LD_EXP 19
37397: PPUSH
37398: LD_VAR 0 2
37402: PPUSH
37403: EMPTY
37404: PPUSH
37405: CALL_OW 1
37409: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
37410: LD_ADDR_EXP 18
37414: PUSH
37415: LD_EXP 18
37419: PPUSH
37420: LD_VAR 0 2
37424: PPUSH
37425: EMPTY
37426: PPUSH
37427: CALL_OW 1
37431: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
37432: LD_ADDR_EXP 20
37436: PUSH
37437: LD_EXP 20
37441: PPUSH
37442: LD_VAR 0 2
37446: PPUSH
37447: EMPTY
37448: PPUSH
37449: CALL_OW 1
37453: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
37454: LD_ADDR_EXP 21
37458: PUSH
37459: LD_EXP 21
37463: PPUSH
37464: LD_VAR 0 2
37468: PPUSH
37469: EMPTY
37470: PPUSH
37471: CALL_OW 1
37475: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
37476: LD_ADDR_EXP 22
37480: PUSH
37481: LD_EXP 22
37485: PPUSH
37486: LD_VAR 0 2
37490: PPUSH
37491: EMPTY
37492: PPUSH
37493: CALL_OW 1
37497: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
37498: LD_ADDR_EXP 23
37502: PUSH
37503: LD_EXP 23
37507: PPUSH
37508: LD_VAR 0 2
37512: PPUSH
37513: EMPTY
37514: PPUSH
37515: CALL_OW 1
37519: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
37520: LD_ADDR_EXP 24
37524: PUSH
37525: LD_EXP 24
37529: PPUSH
37530: LD_VAR 0 2
37534: PPUSH
37535: EMPTY
37536: PPUSH
37537: CALL_OW 1
37541: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
37542: LD_ADDR_EXP 25
37546: PUSH
37547: LD_EXP 25
37551: PPUSH
37552: LD_VAR 0 2
37556: PPUSH
37557: EMPTY
37558: PPUSH
37559: CALL_OW 1
37563: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
37564: LD_ADDR_EXP 26
37568: PUSH
37569: LD_EXP 26
37573: PPUSH
37574: LD_VAR 0 2
37578: PPUSH
37579: EMPTY
37580: PPUSH
37581: CALL_OW 1
37585: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
37586: LD_ADDR_EXP 16
37590: PUSH
37591: LD_EXP 16
37595: PPUSH
37596: LD_VAR 0 2
37600: PPUSH
37601: LD_INT 0
37603: PPUSH
37604: CALL_OW 1
37608: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
37609: LD_ADDR_EXP 28
37613: PUSH
37614: LD_EXP 28
37618: PPUSH
37619: LD_VAR 0 2
37623: PPUSH
37624: LD_INT 0
37626: PPUSH
37627: CALL_OW 1
37631: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
37632: LD_ADDR_EXP 17
37636: PUSH
37637: LD_EXP 17
37641: PPUSH
37642: LD_VAR 0 2
37646: PPUSH
37647: EMPTY
37648: PPUSH
37649: CALL_OW 1
37653: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
37654: LD_ADDR_EXP 27
37658: PUSH
37659: LD_EXP 27
37663: PPUSH
37664: LD_VAR 0 2
37668: PPUSH
37669: LD_INT 0
37671: PPUSH
37672: CALL_OW 1
37676: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
37677: LD_ADDR_EXP 29
37681: PUSH
37682: LD_EXP 29
37686: PPUSH
37687: LD_VAR 0 2
37691: PPUSH
37692: EMPTY
37693: PPUSH
37694: CALL_OW 1
37698: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
37699: LD_ADDR_EXP 32
37703: PUSH
37704: LD_EXP 32
37708: PPUSH
37709: LD_VAR 0 2
37713: PPUSH
37714: LD_INT 0
37716: PPUSH
37717: CALL_OW 1
37721: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
37722: LD_ADDR_EXP 33
37726: PUSH
37727: LD_EXP 33
37731: PPUSH
37732: LD_VAR 0 2
37736: PPUSH
37737: EMPTY
37738: PPUSH
37739: CALL_OW 1
37743: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
37744: LD_ADDR_EXP 34
37748: PUSH
37749: LD_EXP 34
37753: PPUSH
37754: LD_VAR 0 2
37758: PPUSH
37759: EMPTY
37760: PPUSH
37761: CALL_OW 1
37765: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
37766: LD_ADDR_EXP 35
37770: PUSH
37771: LD_EXP 35
37775: PPUSH
37776: LD_VAR 0 2
37780: PPUSH
37781: EMPTY
37782: PPUSH
37783: CALL_OW 1
37787: ST_TO_ADDR
// end ;
37788: GO 37107
37790: POP
37791: POP
// MC_InitSides ( ) ;
37792: CALL 45053 0 0
// MC_InitResearch ( ) ;
37796: CALL 44792 0 0
// CustomInitMacro ( ) ;
37800: CALL 100 0 0
// skirmish := true ;
37804: LD_ADDR_EXP 4
37808: PUSH
37809: LD_INT 1
37811: ST_TO_ADDR
// end ;
37812: LD_VAR 0 1
37816: RET
// every 0 0$01 trigger skirmish do
37817: LD_EXP 4
37821: IFFALSE 37926
37823: GO 37825
37825: DISABLE
// begin enable ;
37826: ENABLE
// MC_CheckBuildings ( ) ;
37827: CALL 38329 0 0
// MC_CheckPeopleLife ( ) ;
37831: CALL 38454 0 0
// RaiseSailEvent ( 103 ) ;
37835: LD_INT 103
37837: PPUSH
37838: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
37842: LD_INT 104
37844: PPUSH
37845: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
37849: LD_INT 106
37851: PPUSH
37852: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
37856: LD_INT 107
37858: PPUSH
37859: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
37863: LD_INT 108
37865: PPUSH
37866: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
37870: LD_INT 109
37872: PPUSH
37873: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
37877: LD_INT 110
37879: PPUSH
37880: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
37884: LD_INT 111
37886: PPUSH
37887: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
37891: LD_INT 112
37893: PPUSH
37894: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
37898: LD_INT 120
37900: PPUSH
37901: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
37905: LD_INT 121
37907: PPUSH
37908: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
37912: LD_INT 122
37914: PPUSH
37915: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
37919: LD_INT 200
37921: PPUSH
37922: CALL_OW 427
// end ;
37926: END
// every 10 trigger skirmish do var i ;
37927: LD_EXP 4
37931: IFFALSE 38030
37933: GO 37935
37935: DISABLE
37936: LD_INT 0
37938: PPUSH
// begin enable ;
37939: ENABLE
// if not mc_bases then
37940: LD_EXP 5
37944: NOT
37945: IFFALSE 37949
// exit ;
37947: GO 38030
// for i = 1 to mc_bases do
37949: LD_ADDR_VAR 0 1
37953: PUSH
37954: DOUBLE
37955: LD_INT 1
37957: DEC
37958: ST_TO_ADDR
37959: LD_EXP 5
37963: PUSH
37964: FOR_TO
37965: IFFALSE 38028
// if mc_mines [ i ] and mc_miners [ i ] then
37967: LD_EXP 18
37971: PUSH
37972: LD_VAR 0 1
37976: ARRAY
37977: PUSH
37978: LD_EXP 19
37982: PUSH
37983: LD_VAR 0 1
37987: ARRAY
37988: AND
37989: IFFALSE 38026
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
37991: LD_EXP 19
37995: PUSH
37996: LD_VAR 0 1
38000: ARRAY
38001: PUSH
38002: LD_INT 1
38004: ARRAY
38005: PPUSH
38006: CALL_OW 255
38010: PPUSH
38011: LD_EXP 18
38015: PUSH
38016: LD_VAR 0 1
38020: ARRAY
38021: PPUSH
38022: CALL 3351 0 2
38026: GO 37964
38028: POP
38029: POP
// end ;
38030: PPOPN 1
38032: END
// on SailEvent ( event ) do begin if event = 101 then
38033: LD_VAR 0 1
38037: PUSH
38038: LD_INT 101
38040: EQUAL
38041: IFFALSE 38047
// MC_RepairBuildings ( ) ;
38043: CALL 39012 0 0
// if event = 102 then
38047: LD_VAR 0 1
38051: PUSH
38052: LD_INT 102
38054: EQUAL
38055: IFFALSE 38061
// MC_Heal ( ) ;
38057: CALL 39418 0 0
// if event = 103 then
38061: LD_VAR 0 1
38065: PUSH
38066: LD_INT 103
38068: EQUAL
38069: IFFALSE 38075
// MC_Build ( ) ;
38071: CALL 39840 0 0
// if event = 104 then
38075: LD_VAR 0 1
38079: PUSH
38080: LD_INT 104
38082: EQUAL
38083: IFFALSE 38089
// MC_TurretWeapon ( ) ;
38085: CALL 40649 0 0
// if event = 106 then
38089: LD_VAR 0 1
38093: PUSH
38094: LD_INT 106
38096: EQUAL
38097: IFFALSE 38103
// MC_PlantMines ( ) ;
38099: CALL 40968 0 0
// if event = 107 then
38103: LD_VAR 0 1
38107: PUSH
38108: LD_INT 107
38110: EQUAL
38111: IFFALSE 38117
// MC_CollectCrates ( ) ;
38113: CALL 41975 0 0
// if event = 108 then
38117: LD_VAR 0 1
38121: PUSH
38122: LD_INT 108
38124: EQUAL
38125: IFFALSE 38131
// MC_LinkRemoteControl ( ) ;
38127: CALL 42796 0 0
// if event = 109 then
38131: LD_VAR 0 1
38135: PUSH
38136: LD_INT 109
38138: EQUAL
38139: IFFALSE 38145
// MC_ProduceVehicle ( ) ;
38141: CALL 42977 0 0
// if event = 110 then
38145: LD_VAR 0 1
38149: PUSH
38150: LD_INT 110
38152: EQUAL
38153: IFFALSE 38159
// MC_SendAttack ( ) ;
38155: CALL 43458 0 0
// if event = 111 then
38159: LD_VAR 0 1
38163: PUSH
38164: LD_INT 111
38166: EQUAL
38167: IFFALSE 38173
// MC_Defend ( ) ;
38169: CALL 43566 0 0
// if event = 112 then
38173: LD_VAR 0 1
38177: PUSH
38178: LD_INT 112
38180: EQUAL
38181: IFFALSE 38187
// MC_Research ( ) ;
38183: CALL 43934 0 0
// if event = 120 then
38187: LD_VAR 0 1
38191: PUSH
38192: LD_INT 120
38194: EQUAL
38195: IFFALSE 38201
// MC_RepairVehicle ( ) ;
38197: CALL 45145 0 0
// if event = 121 then
38201: LD_VAR 0 1
38205: PUSH
38206: LD_INT 121
38208: EQUAL
38209: IFFALSE 38215
// MC_TameApe ( ) ;
38211: CALL 45814 0 0
// if event = 122 then
38215: LD_VAR 0 1
38219: PUSH
38220: LD_INT 122
38222: EQUAL
38223: IFFALSE 38229
// MC_ChangeApeClass ( ) ;
38225: CALL 46371 0 0
// if event = 200 then
38229: LD_VAR 0 1
38233: PUSH
38234: LD_INT 200
38236: EQUAL
38237: IFFALSE 38243
// MC_Idle ( ) ;
38239: CALL 47933 0 0
// end ;
38243: PPOPN 1
38245: END
// export function MC_Reset ( base , tag ) ; var i ; begin
38246: LD_INT 0
38248: PPUSH
38249: PPUSH
// if not mc_bases [ base ] or not tag then
38250: LD_EXP 5
38254: PUSH
38255: LD_VAR 0 1
38259: ARRAY
38260: NOT
38261: PUSH
38262: LD_VAR 0 2
38266: NOT
38267: OR
38268: IFFALSE 38272
// exit ;
38270: GO 38324
// for i in mc_bases [ base ] do
38272: LD_ADDR_VAR 0 4
38276: PUSH
38277: LD_EXP 5
38281: PUSH
38282: LD_VAR 0 1
38286: ARRAY
38287: PUSH
38288: FOR_IN
38289: IFFALSE 38322
// if GetTag ( i ) = tag then
38291: LD_VAR 0 4
38295: PPUSH
38296: CALL_OW 110
38300: PUSH
38301: LD_VAR 0 2
38305: EQUAL
38306: IFFALSE 38320
// SetTag ( i , 0 ) ;
38308: LD_VAR 0 4
38312: PPUSH
38313: LD_INT 0
38315: PPUSH
38316: CALL_OW 109
38320: GO 38288
38322: POP
38323: POP
// end ;
38324: LD_VAR 0 3
38328: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
38329: LD_INT 0
38331: PPUSH
38332: PPUSH
38333: PPUSH
// if not mc_bases then
38334: LD_EXP 5
38338: NOT
38339: IFFALSE 38343
// exit ;
38341: GO 38449
// for i = 1 to mc_bases do
38343: LD_ADDR_VAR 0 2
38347: PUSH
38348: DOUBLE
38349: LD_INT 1
38351: DEC
38352: ST_TO_ADDR
38353: LD_EXP 5
38357: PUSH
38358: FOR_TO
38359: IFFALSE 38440
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
38361: LD_ADDR_VAR 0 3
38365: PUSH
38366: LD_EXP 5
38370: PUSH
38371: LD_VAR 0 2
38375: ARRAY
38376: PPUSH
38377: LD_INT 21
38379: PUSH
38380: LD_INT 3
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 3
38389: PUSH
38390: LD_INT 24
38392: PUSH
38393: LD_INT 1000
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PPUSH
38408: CALL_OW 72
38412: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
38413: LD_ADDR_EXP 6
38417: PUSH
38418: LD_EXP 6
38422: PPUSH
38423: LD_VAR 0 2
38427: PPUSH
38428: LD_VAR 0 3
38432: PPUSH
38433: CALL_OW 1
38437: ST_TO_ADDR
// end ;
38438: GO 38358
38440: POP
38441: POP
// RaiseSailEvent ( 101 ) ;
38442: LD_INT 101
38444: PPUSH
38445: CALL_OW 427
// end ;
38449: LD_VAR 0 1
38453: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
38454: LD_INT 0
38456: PPUSH
38457: PPUSH
38458: PPUSH
38459: PPUSH
38460: PPUSH
38461: PPUSH
38462: PPUSH
// if not mc_bases then
38463: LD_EXP 5
38467: NOT
38468: IFFALSE 38472
// exit ;
38470: GO 39007
// for i = 1 to mc_bases do
38472: LD_ADDR_VAR 0 2
38476: PUSH
38477: DOUBLE
38478: LD_INT 1
38480: DEC
38481: ST_TO_ADDR
38482: LD_EXP 5
38486: PUSH
38487: FOR_TO
38488: IFFALSE 38998
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
38490: LD_ADDR_VAR 0 5
38494: PUSH
38495: LD_EXP 5
38499: PUSH
38500: LD_VAR 0 2
38504: ARRAY
38505: PUSH
38506: LD_EXP 33
38510: PUSH
38511: LD_VAR 0 2
38515: ARRAY
38516: UNION
38517: PPUSH
38518: LD_INT 21
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: LD_INT 3
38533: PUSH
38534: LD_INT 54
38536: PUSH
38537: EMPTY
38538: LIST
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 3
38546: PUSH
38547: LD_INT 24
38549: PUSH
38550: LD_INT 700
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: LIST
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PPUSH
38570: CALL_OW 72
38574: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
38575: LD_ADDR_VAR 0 6
38579: PUSH
38580: LD_EXP 5
38584: PUSH
38585: LD_VAR 0 2
38589: ARRAY
38590: PPUSH
38591: LD_INT 21
38593: PUSH
38594: LD_INT 1
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 1
38603: PUSH
38604: LD_INT 3
38606: PUSH
38607: LD_INT 54
38609: PUSH
38610: EMPTY
38611: LIST
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 3
38619: PUSH
38620: LD_INT 24
38622: PUSH
38623: LD_INT 250
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: LIST
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PPUSH
38643: CALL_OW 72
38647: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
38648: LD_ADDR_VAR 0 7
38652: PUSH
38653: LD_VAR 0 5
38657: PUSH
38658: LD_VAR 0 6
38662: DIFF
38663: ST_TO_ADDR
// if not need_heal_1 then
38664: LD_VAR 0 6
38668: NOT
38669: IFFALSE 38702
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
38671: LD_ADDR_EXP 8
38675: PUSH
38676: LD_EXP 8
38680: PPUSH
38681: LD_VAR 0 2
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PPUSH
38693: EMPTY
38694: PPUSH
38695: CALL 6693 0 3
38699: ST_TO_ADDR
38700: GO 38734
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
38702: LD_ADDR_EXP 8
38706: PUSH
38707: LD_EXP 8
38711: PPUSH
38712: LD_VAR 0 2
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PPUSH
38724: LD_VAR 0 6
38728: PPUSH
38729: CALL 6693 0 3
38733: ST_TO_ADDR
// if not need_heal_2 then
38734: LD_VAR 0 7
38738: NOT
38739: IFFALSE 38772
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
38741: LD_ADDR_EXP 8
38745: PUSH
38746: LD_EXP 8
38750: PPUSH
38751: LD_VAR 0 2
38755: PUSH
38756: LD_INT 2
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PPUSH
38763: EMPTY
38764: PPUSH
38765: CALL 6693 0 3
38769: ST_TO_ADDR
38770: GO 38804
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
38772: LD_ADDR_EXP 8
38776: PUSH
38777: LD_EXP 8
38781: PPUSH
38782: LD_VAR 0 2
38786: PUSH
38787: LD_INT 2
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PPUSH
38794: LD_VAR 0 7
38798: PPUSH
38799: CALL 6693 0 3
38803: ST_TO_ADDR
// if need_heal_2 then
38804: LD_VAR 0 7
38808: IFFALSE 38980
// for j in need_heal_2 do
38810: LD_ADDR_VAR 0 3
38814: PUSH
38815: LD_VAR 0 7
38819: PUSH
38820: FOR_IN
38821: IFFALSE 38978
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
38823: LD_ADDR_VAR 0 5
38827: PUSH
38828: LD_EXP 5
38832: PUSH
38833: LD_VAR 0 2
38837: ARRAY
38838: PPUSH
38839: LD_INT 2
38841: PUSH
38842: LD_INT 30
38844: PUSH
38845: LD_INT 6
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 30
38854: PUSH
38855: LD_INT 7
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 30
38864: PUSH
38865: LD_INT 8
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 30
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 30
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 25
38894: PUSH
38895: LD_INT 4
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: PPUSH
38911: CALL_OW 72
38915: ST_TO_ADDR
// if tmp then
38916: LD_VAR 0 5
38920: IFFALSE 38976
// begin k := NearestUnitToUnit ( tmp , j ) ;
38922: LD_ADDR_VAR 0 4
38926: PUSH
38927: LD_VAR 0 5
38931: PPUSH
38932: LD_VAR 0 3
38936: PPUSH
38937: CALL_OW 74
38941: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
38942: LD_VAR 0 3
38946: PPUSH
38947: LD_VAR 0 4
38951: PPUSH
38952: CALL_OW 296
38956: PUSH
38957: LD_INT 7
38959: GREATER
38960: IFFALSE 38976
// ComMoveUnit ( j , k ) ;
38962: LD_VAR 0 3
38966: PPUSH
38967: LD_VAR 0 4
38971: PPUSH
38972: CALL_OW 112
// end ; end ;
38976: GO 38820
38978: POP
38979: POP
// if not need_heal_1 and not need_heal_2 then
38980: LD_VAR 0 6
38984: NOT
38985: PUSH
38986: LD_VAR 0 7
38990: NOT
38991: AND
38992: IFFALSE 38996
// continue ;
38994: GO 38487
// end ;
38996: GO 38487
38998: POP
38999: POP
// RaiseSailEvent ( 102 ) ;
39000: LD_INT 102
39002: PPUSH
39003: CALL_OW 427
// end ;
39007: LD_VAR 0 1
39011: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
39012: LD_INT 0
39014: PPUSH
39015: PPUSH
39016: PPUSH
39017: PPUSH
39018: PPUSH
// if not mc_bases then
39019: LD_EXP 5
39023: NOT
39024: IFFALSE 39028
// exit ;
39026: GO 39413
// for i = 1 to mc_bases do
39028: LD_ADDR_VAR 0 2
39032: PUSH
39033: DOUBLE
39034: LD_INT 1
39036: DEC
39037: ST_TO_ADDR
39038: LD_EXP 5
39042: PUSH
39043: FOR_TO
39044: IFFALSE 39411
// begin if not mc_building_need_repair [ i ] then
39046: LD_EXP 6
39050: PUSH
39051: LD_VAR 0 2
39055: ARRAY
39056: NOT
39057: IFFALSE 39095
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
39059: LD_ADDR_EXP 7
39063: PUSH
39064: LD_EXP 7
39068: PPUSH
39069: LD_VAR 0 2
39073: PPUSH
39074: EMPTY
39075: PPUSH
39076: CALL_OW 1
39080: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
39081: LD_VAR 0 2
39085: PPUSH
39086: LD_INT 101
39088: PPUSH
39089: CALL 38246 0 2
// continue ;
39093: GO 39043
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
39095: LD_ADDR_EXP 11
39099: PUSH
39100: LD_EXP 11
39104: PPUSH
39105: LD_VAR 0 2
39109: PPUSH
39110: EMPTY
39111: PPUSH
39112: CALL_OW 1
39116: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
39117: LD_VAR 0 2
39121: PPUSH
39122: LD_INT 103
39124: PPUSH
39125: CALL 38246 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
39129: LD_ADDR_VAR 0 5
39133: PUSH
39134: LD_EXP 5
39138: PUSH
39139: LD_VAR 0 2
39143: ARRAY
39144: PUSH
39145: LD_EXP 33
39149: PUSH
39150: LD_VAR 0 2
39154: ARRAY
39155: UNION
39156: PPUSH
39157: LD_INT 2
39159: PUSH
39160: LD_INT 25
39162: PUSH
39163: LD_INT 2
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 25
39172: PUSH
39173: LD_INT 16
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: LIST
39184: PUSH
39185: EMPTY
39186: LIST
39187: PPUSH
39188: CALL_OW 72
39192: ST_TO_ADDR
// if not tmp then
39193: LD_VAR 0 5
39197: NOT
39198: IFFALSE 39202
// continue ;
39200: GO 39043
// for j in tmp do
39202: LD_ADDR_VAR 0 3
39206: PUSH
39207: LD_VAR 0 5
39211: PUSH
39212: FOR_IN
39213: IFFALSE 39407
// begin if mc_need_heal [ i ] then
39215: LD_EXP 8
39219: PUSH
39220: LD_VAR 0 2
39224: ARRAY
39225: IFFALSE 39273
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
39227: LD_VAR 0 3
39231: PUSH
39232: LD_EXP 8
39236: PUSH
39237: LD_VAR 0 2
39241: ARRAY
39242: PUSH
39243: LD_INT 1
39245: ARRAY
39246: IN
39247: PUSH
39248: LD_VAR 0 3
39252: PUSH
39253: LD_EXP 8
39257: PUSH
39258: LD_VAR 0 2
39262: ARRAY
39263: PUSH
39264: LD_INT 2
39266: ARRAY
39267: IN
39268: OR
39269: IFFALSE 39273
// continue ;
39271: GO 39212
// if IsInUnit ( j ) then
39273: LD_VAR 0 3
39277: PPUSH
39278: CALL_OW 310
39282: IFFALSE 39293
// ComExitBuilding ( j ) ;
39284: LD_VAR 0 3
39288: PPUSH
39289: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
39293: LD_VAR 0 3
39297: PUSH
39298: LD_EXP 7
39302: PUSH
39303: LD_VAR 0 2
39307: ARRAY
39308: IN
39309: NOT
39310: IFFALSE 39368
// begin SetTag ( j , 101 ) ;
39312: LD_VAR 0 3
39316: PPUSH
39317: LD_INT 101
39319: PPUSH
39320: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
39324: LD_ADDR_EXP 7
39328: PUSH
39329: LD_EXP 7
39333: PPUSH
39334: LD_VAR 0 2
39338: PUSH
39339: LD_EXP 7
39343: PUSH
39344: LD_VAR 0 2
39348: ARRAY
39349: PUSH
39350: LD_INT 1
39352: PLUS
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PPUSH
39358: LD_VAR 0 3
39362: PPUSH
39363: CALL 6693 0 3
39367: ST_TO_ADDR
// end ; Wait ( 3 ) ;
39368: LD_INT 3
39370: PPUSH
39371: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
39375: LD_VAR 0 3
39379: PPUSH
39380: LD_EXP 6
39384: PUSH
39385: LD_VAR 0 2
39389: ARRAY
39390: PPUSH
39391: LD_VAR 0 3
39395: PPUSH
39396: CALL_OW 74
39400: PPUSH
39401: CALL_OW 130
// end ;
39405: GO 39212
39407: POP
39408: POP
// end ;
39409: GO 39043
39411: POP
39412: POP
// end ;
39413: LD_VAR 0 1
39417: RET
// export function MC_Heal ; var i , j , tmp ; begin
39418: LD_INT 0
39420: PPUSH
39421: PPUSH
39422: PPUSH
39423: PPUSH
// if not mc_bases then
39424: LD_EXP 5
39428: NOT
39429: IFFALSE 39433
// exit ;
39431: GO 39835
// for i = 1 to mc_bases do
39433: LD_ADDR_VAR 0 2
39437: PUSH
39438: DOUBLE
39439: LD_INT 1
39441: DEC
39442: ST_TO_ADDR
39443: LD_EXP 5
39447: PUSH
39448: FOR_TO
39449: IFFALSE 39833
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
39451: LD_EXP 8
39455: PUSH
39456: LD_VAR 0 2
39460: ARRAY
39461: PUSH
39462: LD_INT 1
39464: ARRAY
39465: NOT
39466: PUSH
39467: LD_EXP 8
39471: PUSH
39472: LD_VAR 0 2
39476: ARRAY
39477: PUSH
39478: LD_INT 2
39480: ARRAY
39481: NOT
39482: AND
39483: IFFALSE 39521
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
39485: LD_ADDR_EXP 9
39489: PUSH
39490: LD_EXP 9
39494: PPUSH
39495: LD_VAR 0 2
39499: PPUSH
39500: EMPTY
39501: PPUSH
39502: CALL_OW 1
39506: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
39507: LD_VAR 0 2
39511: PPUSH
39512: LD_INT 102
39514: PPUSH
39515: CALL 38246 0 2
// continue ;
39519: GO 39448
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
39521: LD_ADDR_VAR 0 4
39525: PUSH
39526: LD_EXP 5
39530: PUSH
39531: LD_VAR 0 2
39535: ARRAY
39536: PPUSH
39537: LD_INT 25
39539: PUSH
39540: LD_INT 4
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PPUSH
39547: CALL_OW 72
39551: ST_TO_ADDR
// if not tmp then
39552: LD_VAR 0 4
39556: NOT
39557: IFFALSE 39561
// continue ;
39559: GO 39448
// if mc_taming [ i ] then
39561: LD_EXP 35
39565: PUSH
39566: LD_VAR 0 2
39570: ARRAY
39571: IFFALSE 39595
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
39573: LD_ADDR_EXP 35
39577: PUSH
39578: LD_EXP 35
39582: PPUSH
39583: LD_VAR 0 2
39587: PPUSH
39588: EMPTY
39589: PPUSH
39590: CALL_OW 1
39594: ST_TO_ADDR
// for j in tmp do
39595: LD_ADDR_VAR 0 3
39599: PUSH
39600: LD_VAR 0 4
39604: PUSH
39605: FOR_IN
39606: IFFALSE 39829
// begin if IsInUnit ( j ) then
39608: LD_VAR 0 3
39612: PPUSH
39613: CALL_OW 310
39617: IFFALSE 39628
// ComExitBuilding ( j ) ;
39619: LD_VAR 0 3
39623: PPUSH
39624: CALL_OW 122
// if not j in mc_healers [ i ] then
39628: LD_VAR 0 3
39632: PUSH
39633: LD_EXP 9
39637: PUSH
39638: LD_VAR 0 2
39642: ARRAY
39643: IN
39644: NOT
39645: IFFALSE 39691
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
39647: LD_ADDR_EXP 9
39651: PUSH
39652: LD_EXP 9
39656: PPUSH
39657: LD_VAR 0 2
39661: PUSH
39662: LD_EXP 9
39666: PUSH
39667: LD_VAR 0 2
39671: ARRAY
39672: PUSH
39673: LD_INT 1
39675: PLUS
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PPUSH
39681: LD_VAR 0 3
39685: PPUSH
39686: CALL 6693 0 3
39690: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
39691: LD_VAR 0 3
39695: PPUSH
39696: CALL_OW 110
39700: PUSH
39701: LD_INT 102
39703: NONEQUAL
39704: IFFALSE 39718
// SetTag ( j , 102 ) ;
39706: LD_VAR 0 3
39710: PPUSH
39711: LD_INT 102
39713: PPUSH
39714: CALL_OW 109
// Wait ( 3 ) ;
39718: LD_INT 3
39720: PPUSH
39721: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
39725: LD_EXP 8
39729: PUSH
39730: LD_VAR 0 2
39734: ARRAY
39735: PUSH
39736: LD_INT 1
39738: ARRAY
39739: IFFALSE 39771
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
39741: LD_VAR 0 3
39745: PPUSH
39746: LD_EXP 8
39750: PUSH
39751: LD_VAR 0 2
39755: ARRAY
39756: PUSH
39757: LD_INT 1
39759: ARRAY
39760: PUSH
39761: LD_INT 1
39763: ARRAY
39764: PPUSH
39765: CALL_OW 128
39769: GO 39827
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
39771: LD_VAR 0 3
39775: PPUSH
39776: CALL_OW 314
39780: NOT
39781: PUSH
39782: LD_EXP 8
39786: PUSH
39787: LD_VAR 0 2
39791: ARRAY
39792: PUSH
39793: LD_INT 2
39795: ARRAY
39796: AND
39797: IFFALSE 39827
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
39799: LD_VAR 0 3
39803: PPUSH
39804: LD_EXP 8
39808: PUSH
39809: LD_VAR 0 2
39813: ARRAY
39814: PUSH
39815: LD_INT 2
39817: ARRAY
39818: PUSH
39819: LD_INT 1
39821: ARRAY
39822: PPUSH
39823: CALL_OW 128
// end ;
39827: GO 39605
39829: POP
39830: POP
// end ;
39831: GO 39448
39833: POP
39834: POP
// end ;
39835: LD_VAR 0 1
39839: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
39840: LD_INT 0
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
// if not mc_bases then
39846: LD_EXP 5
39850: NOT
39851: IFFALSE 39855
// exit ;
39853: GO 40644
// for i = 1 to mc_bases do
39855: LD_ADDR_VAR 0 2
39859: PUSH
39860: DOUBLE
39861: LD_INT 1
39863: DEC
39864: ST_TO_ADDR
39865: LD_EXP 5
39869: PUSH
39870: FOR_TO
39871: IFFALSE 40642
// begin if mc_scan [ i ] then
39873: LD_EXP 27
39877: PUSH
39878: LD_VAR 0 2
39882: ARRAY
39883: IFFALSE 39887
// continue ;
39885: GO 39870
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
39887: LD_EXP 10
39891: PUSH
39892: LD_VAR 0 2
39896: ARRAY
39897: NOT
39898: PUSH
39899: LD_EXP 12
39903: PUSH
39904: LD_VAR 0 2
39908: ARRAY
39909: NOT
39910: AND
39911: PUSH
39912: LD_EXP 11
39916: PUSH
39917: LD_VAR 0 2
39921: ARRAY
39922: AND
39923: IFFALSE 39961
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
39925: LD_ADDR_EXP 11
39929: PUSH
39930: LD_EXP 11
39934: PPUSH
39935: LD_VAR 0 2
39939: PPUSH
39940: EMPTY
39941: PPUSH
39942: CALL_OW 1
39946: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
39947: LD_VAR 0 2
39951: PPUSH
39952: LD_INT 103
39954: PPUSH
39955: CALL 38246 0 2
// continue ;
39959: GO 39870
// end ; if mc_construct_list [ i ] then
39961: LD_EXP 12
39965: PUSH
39966: LD_VAR 0 2
39970: ARRAY
39971: IFFALSE 40191
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
39973: LD_ADDR_VAR 0 4
39977: PUSH
39978: LD_EXP 5
39982: PUSH
39983: LD_VAR 0 2
39987: ARRAY
39988: PPUSH
39989: LD_INT 25
39991: PUSH
39992: LD_INT 2
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PPUSH
39999: CALL_OW 72
40003: PUSH
40004: LD_EXP 7
40008: PUSH
40009: LD_VAR 0 2
40013: ARRAY
40014: DIFF
40015: ST_TO_ADDR
// if not tmp then
40016: LD_VAR 0 4
40020: NOT
40021: IFFALSE 40025
// continue ;
40023: GO 39870
// for j in tmp do
40025: LD_ADDR_VAR 0 3
40029: PUSH
40030: LD_VAR 0 4
40034: PUSH
40035: FOR_IN
40036: IFFALSE 40187
// begin if not mc_builders [ i ] then
40038: LD_EXP 11
40042: PUSH
40043: LD_VAR 0 2
40047: ARRAY
40048: NOT
40049: IFFALSE 40107
// begin SetTag ( j , 103 ) ;
40051: LD_VAR 0 3
40055: PPUSH
40056: LD_INT 103
40058: PPUSH
40059: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
40063: LD_ADDR_EXP 11
40067: PUSH
40068: LD_EXP 11
40072: PPUSH
40073: LD_VAR 0 2
40077: PUSH
40078: LD_EXP 11
40082: PUSH
40083: LD_VAR 0 2
40087: ARRAY
40088: PUSH
40089: LD_INT 1
40091: PLUS
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PPUSH
40097: LD_VAR 0 3
40101: PPUSH
40102: CALL 6693 0 3
40106: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
40107: LD_VAR 0 3
40111: PPUSH
40112: CALL_OW 310
40116: IFFALSE 40127
// ComExitBuilding ( j ) ;
40118: LD_VAR 0 3
40122: PPUSH
40123: CALL_OW 122
// wait ( 3 ) ;
40127: LD_INT 3
40129: PPUSH
40130: CALL_OW 67
// if not mc_construct_list [ i ] then
40134: LD_EXP 12
40138: PUSH
40139: LD_VAR 0 2
40143: ARRAY
40144: NOT
40145: IFFALSE 40149
// break ;
40147: GO 40187
// if not HasTask ( j ) then
40149: LD_VAR 0 3
40153: PPUSH
40154: CALL_OW 314
40158: NOT
40159: IFFALSE 40185
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
40161: LD_VAR 0 3
40165: PPUSH
40166: LD_EXP 12
40170: PUSH
40171: LD_VAR 0 2
40175: ARRAY
40176: PUSH
40177: LD_INT 1
40179: ARRAY
40180: PPUSH
40181: CALL 9099 0 2
// end ;
40185: GO 40035
40187: POP
40188: POP
// end else
40189: GO 40640
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
40191: LD_EXP 10
40195: PUSH
40196: LD_VAR 0 2
40200: ARRAY
40201: PUSH
40202: LD_EXP 5
40206: PUSH
40207: LD_VAR 0 2
40211: ARRAY
40212: PPUSH
40213: LD_INT 2
40215: PUSH
40216: LD_INT 30
40218: PUSH
40219: LD_INT 0
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 30
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: LIST
40240: PPUSH
40241: CALL_OW 72
40245: AND
40246: IFFALSE 40640
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
40248: LD_EXP 5
40252: PUSH
40253: LD_VAR 0 2
40257: ARRAY
40258: PPUSH
40259: LD_INT 2
40261: PUSH
40262: LD_INT 30
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 30
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: LIST
40286: PPUSH
40287: CALL_OW 72
40291: PUSH
40292: LD_INT 1
40294: ARRAY
40295: PPUSH
40296: LD_EXP 10
40300: PUSH
40301: LD_VAR 0 2
40305: ARRAY
40306: PUSH
40307: LD_INT 1
40309: ARRAY
40310: PUSH
40311: LD_INT 1
40313: ARRAY
40314: PPUSH
40315: LD_EXP 10
40319: PUSH
40320: LD_VAR 0 2
40324: ARRAY
40325: PUSH
40326: LD_INT 1
40328: ARRAY
40329: PUSH
40330: LD_INT 2
40332: ARRAY
40333: PPUSH
40334: LD_EXP 10
40338: PUSH
40339: LD_VAR 0 2
40343: ARRAY
40344: PUSH
40345: LD_INT 1
40347: ARRAY
40348: PUSH
40349: LD_INT 3
40351: ARRAY
40352: PPUSH
40353: LD_EXP 10
40357: PUSH
40358: LD_VAR 0 2
40362: ARRAY
40363: PUSH
40364: LD_INT 1
40366: ARRAY
40367: PUSH
40368: LD_INT 4
40370: ARRAY
40371: PPUSH
40372: CALL 12547 0 5
40376: IFFALSE 40640
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
40378: LD_ADDR_VAR 0 4
40382: PUSH
40383: LD_EXP 5
40387: PUSH
40388: LD_VAR 0 2
40392: ARRAY
40393: PPUSH
40394: LD_INT 25
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PPUSH
40404: CALL_OW 72
40408: PUSH
40409: LD_EXP 7
40413: PUSH
40414: LD_VAR 0 2
40418: ARRAY
40419: DIFF
40420: ST_TO_ADDR
// if not tmp then
40421: LD_VAR 0 4
40425: NOT
40426: IFFALSE 40430
// continue ;
40428: GO 39870
// for j in tmp do
40430: LD_ADDR_VAR 0 3
40434: PUSH
40435: LD_VAR 0 4
40439: PUSH
40440: FOR_IN
40441: IFFALSE 40638
// begin if not mc_builders [ i ] then
40443: LD_EXP 11
40447: PUSH
40448: LD_VAR 0 2
40452: ARRAY
40453: NOT
40454: IFFALSE 40512
// begin SetTag ( j , 103 ) ;
40456: LD_VAR 0 3
40460: PPUSH
40461: LD_INT 103
40463: PPUSH
40464: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
40468: LD_ADDR_EXP 11
40472: PUSH
40473: LD_EXP 11
40477: PPUSH
40478: LD_VAR 0 2
40482: PUSH
40483: LD_EXP 11
40487: PUSH
40488: LD_VAR 0 2
40492: ARRAY
40493: PUSH
40494: LD_INT 1
40496: PLUS
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PPUSH
40502: LD_VAR 0 3
40506: PPUSH
40507: CALL 6693 0 3
40511: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
40512: LD_VAR 0 3
40516: PPUSH
40517: CALL_OW 310
40521: IFFALSE 40532
// ComExitBuilding ( j ) ;
40523: LD_VAR 0 3
40527: PPUSH
40528: CALL_OW 122
// wait ( 3 ) ;
40532: LD_INT 3
40534: PPUSH
40535: CALL_OW 67
// if not HasTask ( j ) then
40539: LD_VAR 0 3
40543: PPUSH
40544: CALL_OW 314
40548: NOT
40549: IFFALSE 40636
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
40551: LD_VAR 0 3
40555: PPUSH
40556: LD_EXP 10
40560: PUSH
40561: LD_VAR 0 2
40565: ARRAY
40566: PUSH
40567: LD_INT 1
40569: ARRAY
40570: PUSH
40571: LD_INT 1
40573: ARRAY
40574: PPUSH
40575: LD_EXP 10
40579: PUSH
40580: LD_VAR 0 2
40584: ARRAY
40585: PUSH
40586: LD_INT 1
40588: ARRAY
40589: PUSH
40590: LD_INT 2
40592: ARRAY
40593: PPUSH
40594: LD_EXP 10
40598: PUSH
40599: LD_VAR 0 2
40603: ARRAY
40604: PUSH
40605: LD_INT 1
40607: ARRAY
40608: PUSH
40609: LD_INT 3
40611: ARRAY
40612: PPUSH
40613: LD_EXP 10
40617: PUSH
40618: LD_VAR 0 2
40622: ARRAY
40623: PUSH
40624: LD_INT 1
40626: ARRAY
40627: PUSH
40628: LD_INT 4
40630: ARRAY
40631: PPUSH
40632: CALL_OW 145
// end ;
40636: GO 40440
40638: POP
40639: POP
// end ; end ;
40640: GO 39870
40642: POP
40643: POP
// end ;
40644: LD_VAR 0 1
40648: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
40649: LD_INT 0
40651: PPUSH
40652: PPUSH
40653: PPUSH
40654: PPUSH
40655: PPUSH
40656: PPUSH
40657: PPUSH
// if not mc_bases then
40658: LD_EXP 5
40662: NOT
40663: IFFALSE 40667
// exit ;
40665: GO 40963
// for i = 1 to mc_bases do
40667: LD_ADDR_VAR 0 2
40671: PUSH
40672: DOUBLE
40673: LD_INT 1
40675: DEC
40676: ST_TO_ADDR
40677: LD_EXP 5
40681: PUSH
40682: FOR_TO
40683: IFFALSE 40961
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
40685: LD_EXP 13
40689: PUSH
40690: LD_VAR 0 2
40694: ARRAY
40695: NOT
40696: PUSH
40697: LD_EXP 5
40701: PUSH
40702: LD_VAR 0 2
40706: ARRAY
40707: PPUSH
40708: LD_INT 30
40710: PUSH
40711: LD_INT 3
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PPUSH
40718: CALL_OW 72
40722: NOT
40723: OR
40724: IFFALSE 40728
// continue ;
40726: GO 40682
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
40728: LD_EXP 13
40732: PUSH
40733: LD_VAR 0 2
40737: ARRAY
40738: PUSH
40739: LD_INT 1
40741: ARRAY
40742: PPUSH
40743: CALL_OW 269
40747: IFFALSE 40813
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
40749: LD_ADDR_VAR 0 4
40753: PUSH
40754: LD_EXP 13
40758: PUSH
40759: LD_VAR 0 2
40763: ARRAY
40764: PPUSH
40765: LD_INT 1
40767: PPUSH
40768: CALL_OW 3
40772: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
40773: LD_ADDR_EXP 13
40777: PUSH
40778: LD_EXP 13
40782: PPUSH
40783: LD_VAR 0 2
40787: PPUSH
40788: LD_VAR 0 4
40792: PPUSH
40793: CALL_OW 1
40797: ST_TO_ADDR
// if not mc_turret_list [ i ] then
40798: LD_EXP 13
40802: PUSH
40803: LD_VAR 0 2
40807: ARRAY
40808: NOT
40809: IFFALSE 40813
// continue ;
40811: GO 40682
// end ; busy := false ;
40813: LD_ADDR_VAR 0 6
40817: PUSH
40818: LD_INT 0
40820: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
40821: LD_ADDR_VAR 0 4
40825: PUSH
40826: LD_EXP 5
40830: PUSH
40831: LD_VAR 0 2
40835: ARRAY
40836: PPUSH
40837: LD_INT 30
40839: PUSH
40840: LD_INT 3
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PPUSH
40847: CALL_OW 72
40851: ST_TO_ADDR
// for j in tmp do
40852: LD_ADDR_VAR 0 3
40856: PUSH
40857: LD_VAR 0 4
40861: PUSH
40862: FOR_IN
40863: IFFALSE 40891
// if not BuildingStatus ( j ) = bs_idle then
40865: LD_VAR 0 3
40869: PPUSH
40870: CALL_OW 461
40874: PUSH
40875: LD_INT 2
40877: EQUAL
40878: NOT
40879: IFFALSE 40889
// busy := true ;
40881: LD_ADDR_VAR 0 6
40885: PUSH
40886: LD_INT 1
40888: ST_TO_ADDR
40889: GO 40862
40891: POP
40892: POP
// if busy then
40893: LD_VAR 0 6
40897: IFFALSE 40901
// continue ;
40899: GO 40682
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
40901: LD_ADDR_VAR 0 7
40905: PUSH
40906: LD_EXP 13
40910: PUSH
40911: LD_VAR 0 2
40915: ARRAY
40916: PUSH
40917: LD_INT 1
40919: ARRAY
40920: PPUSH
40921: CALL 10995 0 1
40925: ST_TO_ADDR
// if not weapon then
40926: LD_VAR 0 7
40930: NOT
40931: IFFALSE 40935
// continue ;
40933: GO 40682
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
40935: LD_EXP 13
40939: PUSH
40940: LD_VAR 0 2
40944: ARRAY
40945: PUSH
40946: LD_INT 1
40948: ARRAY
40949: PPUSH
40950: LD_VAR 0 7
40954: PPUSH
40955: CALL_OW 148
// end ;
40959: GO 40682
40961: POP
40962: POP
// end ;
40963: LD_VAR 0 1
40967: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
40968: LD_INT 0
40970: PPUSH
40971: PPUSH
40972: PPUSH
40973: PPUSH
40974: PPUSH
40975: PPUSH
// if not mc_bases then
40976: LD_EXP 5
40980: NOT
40981: IFFALSE 40985
// exit ;
40983: GO 41970
// for i = 1 to mc_bases do
40985: LD_ADDR_VAR 0 2
40989: PUSH
40990: DOUBLE
40991: LD_INT 1
40993: DEC
40994: ST_TO_ADDR
40995: LD_EXP 5
40999: PUSH
41000: FOR_TO
41001: IFFALSE 41968
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
41003: LD_EXP 18
41007: PUSH
41008: LD_VAR 0 2
41012: ARRAY
41013: NOT
41014: PUSH
41015: LD_EXP 18
41019: PUSH
41020: LD_VAR 0 2
41024: ARRAY
41025: PUSH
41026: LD_EXP 19
41030: PUSH
41031: LD_VAR 0 2
41035: ARRAY
41036: EQUAL
41037: OR
41038: IFFALSE 41042
// continue ;
41040: GO 41000
// if mc_miners [ i ] then
41042: LD_EXP 19
41046: PUSH
41047: LD_VAR 0 2
41051: ARRAY
41052: IFFALSE 41655
// begin k := 1 ;
41054: LD_ADDR_VAR 0 4
41058: PUSH
41059: LD_INT 1
41061: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
41062: LD_ADDR_VAR 0 3
41066: PUSH
41067: DOUBLE
41068: LD_EXP 19
41072: PUSH
41073: LD_VAR 0 2
41077: ARRAY
41078: INC
41079: ST_TO_ADDR
41080: LD_INT 1
41082: PUSH
41083: FOR_DOWNTO
41084: IFFALSE 41653
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
41086: LD_EXP 19
41090: PUSH
41091: LD_VAR 0 2
41095: ARRAY
41096: PUSH
41097: LD_VAR 0 3
41101: ARRAY
41102: PPUSH
41103: CALL_OW 301
41107: IFFALSE 41170
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
41109: LD_ADDR_VAR 0 5
41113: PUSH
41114: LD_EXP 19
41118: PUSH
41119: LD_VAR 0 2
41123: ARRAY
41124: PUSH
41125: LD_EXP 19
41129: PUSH
41130: LD_VAR 0 2
41134: ARRAY
41135: PUSH
41136: LD_VAR 0 3
41140: ARRAY
41141: DIFF
41142: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
41143: LD_ADDR_EXP 19
41147: PUSH
41148: LD_EXP 19
41152: PPUSH
41153: LD_VAR 0 2
41157: PPUSH
41158: LD_VAR 0 5
41162: PPUSH
41163: CALL_OW 1
41167: ST_TO_ADDR
// continue ;
41168: GO 41083
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
41170: LD_EXP 19
41174: PUSH
41175: LD_VAR 0 2
41179: ARRAY
41180: PUSH
41181: LD_VAR 0 3
41185: ARRAY
41186: PPUSH
41187: CALL 6194 0 1
41191: PUSH
41192: LD_EXP 19
41196: PUSH
41197: LD_VAR 0 2
41201: ARRAY
41202: PUSH
41203: LD_VAR 0 3
41207: ARRAY
41208: PPUSH
41209: CALL_OW 255
41213: PPUSH
41214: LD_EXP 18
41218: PUSH
41219: LD_VAR 0 2
41223: ARRAY
41224: PUSH
41225: LD_VAR 0 4
41229: ARRAY
41230: PUSH
41231: LD_INT 1
41233: ARRAY
41234: PPUSH
41235: LD_EXP 18
41239: PUSH
41240: LD_VAR 0 2
41244: ARRAY
41245: PUSH
41246: LD_VAR 0 4
41250: ARRAY
41251: PUSH
41252: LD_INT 2
41254: ARRAY
41255: PPUSH
41256: LD_INT 15
41258: PPUSH
41259: CALL 7187 0 4
41263: PUSH
41264: LD_INT 4
41266: ARRAY
41267: PUSH
41268: LD_EXP 19
41272: PUSH
41273: LD_VAR 0 2
41277: ARRAY
41278: PUSH
41279: LD_VAR 0 3
41283: ARRAY
41284: PPUSH
41285: LD_INT 10
41287: PPUSH
41288: CALL 8884 0 2
41292: PUSH
41293: LD_INT 4
41295: ARRAY
41296: OR
41297: AND
41298: IFFALSE 41321
// ComStop ( mc_miners [ i ] [ j ] ) ;
41300: LD_EXP 19
41304: PUSH
41305: LD_VAR 0 2
41309: ARRAY
41310: PUSH
41311: LD_VAR 0 3
41315: ARRAY
41316: PPUSH
41317: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
41321: LD_EXP 19
41325: PUSH
41326: LD_VAR 0 2
41330: ARRAY
41331: PUSH
41332: LD_VAR 0 3
41336: ARRAY
41337: PPUSH
41338: CALL_OW 257
41342: PUSH
41343: LD_INT 1
41345: EQUAL
41346: PUSH
41347: LD_EXP 19
41351: PUSH
41352: LD_VAR 0 2
41356: ARRAY
41357: PUSH
41358: LD_VAR 0 3
41362: ARRAY
41363: PPUSH
41364: CALL_OW 459
41368: NOT
41369: AND
41370: PUSH
41371: LD_EXP 19
41375: PUSH
41376: LD_VAR 0 2
41380: ARRAY
41381: PUSH
41382: LD_VAR 0 3
41386: ARRAY
41387: PPUSH
41388: CALL_OW 255
41392: PPUSH
41393: LD_EXP 18
41397: PUSH
41398: LD_VAR 0 2
41402: ARRAY
41403: PUSH
41404: LD_VAR 0 4
41408: ARRAY
41409: PUSH
41410: LD_INT 1
41412: ARRAY
41413: PPUSH
41414: LD_EXP 18
41418: PUSH
41419: LD_VAR 0 2
41423: ARRAY
41424: PUSH
41425: LD_VAR 0 4
41429: ARRAY
41430: PUSH
41431: LD_INT 2
41433: ARRAY
41434: PPUSH
41435: LD_INT 15
41437: PPUSH
41438: CALL 7187 0 4
41442: PUSH
41443: LD_INT 4
41445: ARRAY
41446: PUSH
41447: LD_INT 0
41449: EQUAL
41450: AND
41451: PUSH
41452: LD_EXP 19
41456: PUSH
41457: LD_VAR 0 2
41461: ARRAY
41462: PUSH
41463: LD_VAR 0 3
41467: ARRAY
41468: PPUSH
41469: CALL_OW 314
41473: NOT
41474: AND
41475: IFFALSE 41651
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
41477: LD_EXP 19
41481: PUSH
41482: LD_VAR 0 2
41486: ARRAY
41487: PUSH
41488: LD_VAR 0 3
41492: ARRAY
41493: PPUSH
41494: CALL_OW 310
41498: IFFALSE 41521
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
41500: LD_EXP 19
41504: PUSH
41505: LD_VAR 0 2
41509: ARRAY
41510: PUSH
41511: LD_VAR 0 3
41515: ARRAY
41516: PPUSH
41517: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
41521: LD_EXP 19
41525: PUSH
41526: LD_VAR 0 2
41530: ARRAY
41531: PUSH
41532: LD_VAR 0 3
41536: ARRAY
41537: PPUSH
41538: CALL_OW 314
41542: NOT
41543: IFFALSE 41611
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
41545: LD_EXP 19
41549: PUSH
41550: LD_VAR 0 2
41554: ARRAY
41555: PUSH
41556: LD_VAR 0 3
41560: ARRAY
41561: PPUSH
41562: LD_EXP 18
41566: PUSH
41567: LD_VAR 0 2
41571: ARRAY
41572: PUSH
41573: LD_VAR 0 4
41577: ARRAY
41578: PUSH
41579: LD_INT 1
41581: ARRAY
41582: PPUSH
41583: LD_EXP 18
41587: PUSH
41588: LD_VAR 0 2
41592: ARRAY
41593: PUSH
41594: LD_VAR 0 4
41598: ARRAY
41599: PUSH
41600: LD_INT 2
41602: ARRAY
41603: PPUSH
41604: LD_INT 0
41606: PPUSH
41607: CALL_OW 193
// k := k + 1 ;
41611: LD_ADDR_VAR 0 4
41615: PUSH
41616: LD_VAR 0 4
41620: PUSH
41621: LD_INT 1
41623: PLUS
41624: ST_TO_ADDR
// if k > mc_mines [ i ] then
41625: LD_VAR 0 4
41629: PUSH
41630: LD_EXP 18
41634: PUSH
41635: LD_VAR 0 2
41639: ARRAY
41640: GREATER
41641: IFFALSE 41651
// k := 1 ;
41643: LD_ADDR_VAR 0 4
41647: PUSH
41648: LD_INT 1
41650: ST_TO_ADDR
// end ; end ;
41651: GO 41083
41653: POP
41654: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
41655: LD_ADDR_VAR 0 5
41659: PUSH
41660: LD_EXP 5
41664: PUSH
41665: LD_VAR 0 2
41669: ARRAY
41670: PPUSH
41671: LD_INT 2
41673: PUSH
41674: LD_INT 30
41676: PUSH
41677: LD_INT 4
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 30
41686: PUSH
41687: LD_INT 5
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 30
41696: PUSH
41697: LD_INT 32
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: PPUSH
41710: CALL_OW 72
41714: ST_TO_ADDR
// if not tmp then
41715: LD_VAR 0 5
41719: NOT
41720: IFFALSE 41724
// continue ;
41722: GO 41000
// list := [ ] ;
41724: LD_ADDR_VAR 0 6
41728: PUSH
41729: EMPTY
41730: ST_TO_ADDR
// for j in tmp do
41731: LD_ADDR_VAR 0 3
41735: PUSH
41736: LD_VAR 0 5
41740: PUSH
41741: FOR_IN
41742: IFFALSE 41811
// begin for k in UnitsInside ( j ) do
41744: LD_ADDR_VAR 0 4
41748: PUSH
41749: LD_VAR 0 3
41753: PPUSH
41754: CALL_OW 313
41758: PUSH
41759: FOR_IN
41760: IFFALSE 41807
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
41762: LD_VAR 0 4
41766: PPUSH
41767: CALL_OW 257
41771: PUSH
41772: LD_INT 1
41774: EQUAL
41775: PUSH
41776: LD_VAR 0 4
41780: PPUSH
41781: CALL_OW 459
41785: NOT
41786: AND
41787: IFFALSE 41805
// list := list ^ k ;
41789: LD_ADDR_VAR 0 6
41793: PUSH
41794: LD_VAR 0 6
41798: PUSH
41799: LD_VAR 0 4
41803: ADD
41804: ST_TO_ADDR
41805: GO 41759
41807: POP
41808: POP
// end ;
41809: GO 41741
41811: POP
41812: POP
// list := list diff mc_miners [ i ] ;
41813: LD_ADDR_VAR 0 6
41817: PUSH
41818: LD_VAR 0 6
41822: PUSH
41823: LD_EXP 19
41827: PUSH
41828: LD_VAR 0 2
41832: ARRAY
41833: DIFF
41834: ST_TO_ADDR
// if not list then
41835: LD_VAR 0 6
41839: NOT
41840: IFFALSE 41844
// continue ;
41842: GO 41000
// k := mc_mines [ i ] - mc_miners [ i ] ;
41844: LD_ADDR_VAR 0 4
41848: PUSH
41849: LD_EXP 18
41853: PUSH
41854: LD_VAR 0 2
41858: ARRAY
41859: PUSH
41860: LD_EXP 19
41864: PUSH
41865: LD_VAR 0 2
41869: ARRAY
41870: MINUS
41871: ST_TO_ADDR
// if k > list then
41872: LD_VAR 0 4
41876: PUSH
41877: LD_VAR 0 6
41881: GREATER
41882: IFFALSE 41894
// k := list ;
41884: LD_ADDR_VAR 0 4
41888: PUSH
41889: LD_VAR 0 6
41893: ST_TO_ADDR
// for j = 1 to k do
41894: LD_ADDR_VAR 0 3
41898: PUSH
41899: DOUBLE
41900: LD_INT 1
41902: DEC
41903: ST_TO_ADDR
41904: LD_VAR 0 4
41908: PUSH
41909: FOR_TO
41910: IFFALSE 41964
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
41912: LD_ADDR_EXP 19
41916: PUSH
41917: LD_EXP 19
41921: PPUSH
41922: LD_VAR 0 2
41926: PUSH
41927: LD_EXP 19
41931: PUSH
41932: LD_VAR 0 2
41936: ARRAY
41937: PUSH
41938: LD_INT 1
41940: PLUS
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PPUSH
41946: LD_VAR 0 6
41950: PUSH
41951: LD_VAR 0 3
41955: ARRAY
41956: PPUSH
41957: CALL 6693 0 3
41961: ST_TO_ADDR
41962: GO 41909
41964: POP
41965: POP
// end ;
41966: GO 41000
41968: POP
41969: POP
// end ;
41970: LD_VAR 0 1
41974: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
41975: LD_INT 0
41977: PPUSH
41978: PPUSH
41979: PPUSH
41980: PPUSH
41981: PPUSH
// if not mc_bases then
41982: LD_EXP 5
41986: NOT
41987: IFFALSE 41991
// exit ;
41989: GO 42791
// for i = 1 to mc_bases do
41991: LD_ADDR_VAR 0 2
41995: PUSH
41996: DOUBLE
41997: LD_INT 1
41999: DEC
42000: ST_TO_ADDR
42001: LD_EXP 5
42005: PUSH
42006: FOR_TO
42007: IFFALSE 42789
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
42009: LD_EXP 5
42013: PUSH
42014: LD_VAR 0 2
42018: ARRAY
42019: NOT
42020: PUSH
42021: LD_EXP 12
42025: PUSH
42026: LD_VAR 0 2
42030: ARRAY
42031: OR
42032: IFFALSE 42036
// continue ;
42034: GO 42006
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
42036: LD_EXP 21
42040: PUSH
42041: LD_VAR 0 2
42045: ARRAY
42046: NOT
42047: PUSH
42048: LD_EXP 22
42052: PUSH
42053: LD_VAR 0 2
42057: ARRAY
42058: AND
42059: IFFALSE 42097
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
42061: LD_ADDR_EXP 22
42065: PUSH
42066: LD_EXP 22
42070: PPUSH
42071: LD_VAR 0 2
42075: PPUSH
42076: EMPTY
42077: PPUSH
42078: CALL_OW 1
42082: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
42083: LD_VAR 0 2
42087: PPUSH
42088: LD_INT 107
42090: PPUSH
42091: CALL 38246 0 2
// continue ;
42095: GO 42006
// end ; target := [ ] ;
42097: LD_ADDR_VAR 0 5
42101: PUSH
42102: EMPTY
42103: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
42104: LD_ADDR_VAR 0 3
42108: PUSH
42109: DOUBLE
42110: LD_EXP 21
42114: PUSH
42115: LD_VAR 0 2
42119: ARRAY
42120: INC
42121: ST_TO_ADDR
42122: LD_INT 1
42124: PUSH
42125: FOR_DOWNTO
42126: IFFALSE 42386
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
42128: LD_EXP 21
42132: PUSH
42133: LD_VAR 0 2
42137: ARRAY
42138: PUSH
42139: LD_VAR 0 3
42143: ARRAY
42144: PUSH
42145: LD_INT 2
42147: ARRAY
42148: PPUSH
42149: LD_EXP 21
42153: PUSH
42154: LD_VAR 0 2
42158: ARRAY
42159: PUSH
42160: LD_VAR 0 3
42164: ARRAY
42165: PUSH
42166: LD_INT 3
42168: ARRAY
42169: PPUSH
42170: CALL_OW 488
42174: PUSH
42175: LD_EXP 21
42179: PUSH
42180: LD_VAR 0 2
42184: ARRAY
42185: PUSH
42186: LD_VAR 0 3
42190: ARRAY
42191: PUSH
42192: LD_INT 2
42194: ARRAY
42195: PPUSH
42196: LD_EXP 21
42200: PUSH
42201: LD_VAR 0 2
42205: ARRAY
42206: PUSH
42207: LD_VAR 0 3
42211: ARRAY
42212: PUSH
42213: LD_INT 3
42215: ARRAY
42216: PPUSH
42217: CALL_OW 284
42221: PUSH
42222: LD_INT 0
42224: EQUAL
42225: AND
42226: IFFALSE 42281
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
42228: LD_ADDR_VAR 0 4
42232: PUSH
42233: LD_EXP 21
42237: PUSH
42238: LD_VAR 0 2
42242: ARRAY
42243: PPUSH
42244: LD_VAR 0 3
42248: PPUSH
42249: CALL_OW 3
42253: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
42254: LD_ADDR_EXP 21
42258: PUSH
42259: LD_EXP 21
42263: PPUSH
42264: LD_VAR 0 2
42268: PPUSH
42269: LD_VAR 0 4
42273: PPUSH
42274: CALL_OW 1
42278: ST_TO_ADDR
// continue ;
42279: GO 42125
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
42281: LD_EXP 5
42285: PUSH
42286: LD_VAR 0 2
42290: ARRAY
42291: PUSH
42292: LD_INT 1
42294: ARRAY
42295: PPUSH
42296: CALL_OW 255
42300: PPUSH
42301: LD_EXP 21
42305: PUSH
42306: LD_VAR 0 2
42310: ARRAY
42311: PUSH
42312: LD_VAR 0 3
42316: ARRAY
42317: PUSH
42318: LD_INT 2
42320: ARRAY
42321: PPUSH
42322: LD_EXP 21
42326: PUSH
42327: LD_VAR 0 2
42331: ARRAY
42332: PUSH
42333: LD_VAR 0 3
42337: ARRAY
42338: PUSH
42339: LD_INT 3
42341: ARRAY
42342: PPUSH
42343: LD_INT 20
42345: PPUSH
42346: CALL 7187 0 4
42350: PUSH
42351: LD_INT 4
42353: ARRAY
42354: PUSH
42355: LD_INT 0
42357: EQUAL
42358: IFFALSE 42384
// begin target := mc_crates [ i ] [ j ] ;
42360: LD_ADDR_VAR 0 5
42364: PUSH
42365: LD_EXP 21
42369: PUSH
42370: LD_VAR 0 2
42374: ARRAY
42375: PUSH
42376: LD_VAR 0 3
42380: ARRAY
42381: ST_TO_ADDR
// break ;
42382: GO 42386
// end ; end ;
42384: GO 42125
42386: POP
42387: POP
// if not target then
42388: LD_VAR 0 5
42392: NOT
42393: IFFALSE 42397
// continue ;
42395: GO 42006
// if mc_crates_collector [ i ] < 5 then
42397: LD_EXP 22
42401: PUSH
42402: LD_VAR 0 2
42406: ARRAY
42407: PUSH
42408: LD_INT 5
42410: LESS
42411: IFFALSE 42603
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
42413: LD_ADDR_VAR 0 4
42417: PUSH
42418: LD_EXP 5
42422: PUSH
42423: LD_VAR 0 2
42427: ARRAY
42428: PUSH
42429: LD_EXP 33
42433: PUSH
42434: LD_VAR 0 2
42438: ARRAY
42439: UNION
42440: PPUSH
42441: LD_INT 2
42443: PUSH
42444: LD_INT 25
42446: PUSH
42447: LD_INT 2
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 25
42456: PUSH
42457: LD_INT 16
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 24
42471: PUSH
42472: LD_INT 750
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PPUSH
42483: CALL_OW 72
42487: ST_TO_ADDR
// if not tmp then
42488: LD_VAR 0 4
42492: NOT
42493: IFFALSE 42497
// continue ;
42495: GO 42006
// for j in tmp do
42497: LD_ADDR_VAR 0 3
42501: PUSH
42502: LD_VAR 0 4
42506: PUSH
42507: FOR_IN
42508: IFFALSE 42601
// if GetTag ( j ) = 0 then
42510: LD_VAR 0 3
42514: PPUSH
42515: CALL_OW 110
42519: PUSH
42520: LD_INT 0
42522: EQUAL
42523: IFFALSE 42599
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
42525: LD_ADDR_EXP 22
42529: PUSH
42530: LD_EXP 22
42534: PPUSH
42535: LD_VAR 0 2
42539: PUSH
42540: LD_EXP 22
42544: PUSH
42545: LD_VAR 0 2
42549: ARRAY
42550: PUSH
42551: LD_INT 1
42553: PLUS
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PPUSH
42559: LD_VAR 0 3
42563: PPUSH
42564: CALL 6693 0 3
42568: ST_TO_ADDR
// SetTag ( j , 107 ) ;
42569: LD_VAR 0 3
42573: PPUSH
42574: LD_INT 107
42576: PPUSH
42577: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
42581: LD_EXP 22
42585: PUSH
42586: LD_VAR 0 2
42590: ARRAY
42591: PUSH
42592: LD_INT 5
42594: GREATER
42595: IFFALSE 42599
// break ;
42597: GO 42601
// end ;
42599: GO 42507
42601: POP
42602: POP
// end ; if mc_crates_collector [ i ] and target then
42603: LD_EXP 22
42607: PUSH
42608: LD_VAR 0 2
42612: ARRAY
42613: PUSH
42614: LD_VAR 0 5
42618: AND
42619: IFFALSE 42787
// begin if mc_crates_collector [ i ] < target [ 1 ] then
42621: LD_EXP 22
42625: PUSH
42626: LD_VAR 0 2
42630: ARRAY
42631: PUSH
42632: LD_VAR 0 5
42636: PUSH
42637: LD_INT 1
42639: ARRAY
42640: LESS
42641: IFFALSE 42661
// tmp := mc_crates_collector [ i ] else
42643: LD_ADDR_VAR 0 4
42647: PUSH
42648: LD_EXP 22
42652: PUSH
42653: LD_VAR 0 2
42657: ARRAY
42658: ST_TO_ADDR
42659: GO 42675
// tmp := target [ 1 ] ;
42661: LD_ADDR_VAR 0 4
42665: PUSH
42666: LD_VAR 0 5
42670: PUSH
42671: LD_INT 1
42673: ARRAY
42674: ST_TO_ADDR
// for j = 1 to tmp do
42675: LD_ADDR_VAR 0 3
42679: PUSH
42680: DOUBLE
42681: LD_INT 1
42683: DEC
42684: ST_TO_ADDR
42685: LD_VAR 0 4
42689: PUSH
42690: FOR_TO
42691: IFFALSE 42785
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
42693: LD_EXP 22
42697: PUSH
42698: LD_VAR 0 2
42702: ARRAY
42703: PUSH
42704: LD_VAR 0 3
42708: ARRAY
42709: PPUSH
42710: CALL_OW 310
42714: IFFALSE 42737
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
42716: LD_EXP 22
42720: PUSH
42721: LD_VAR 0 2
42725: ARRAY
42726: PUSH
42727: LD_VAR 0 3
42731: ARRAY
42732: PPUSH
42733: CALL_OW 122
// wait ( 3 ) ;
42737: LD_INT 3
42739: PPUSH
42740: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
42744: LD_EXP 22
42748: PUSH
42749: LD_VAR 0 2
42753: ARRAY
42754: PUSH
42755: LD_VAR 0 3
42759: ARRAY
42760: PPUSH
42761: LD_VAR 0 5
42765: PUSH
42766: LD_INT 2
42768: ARRAY
42769: PPUSH
42770: LD_VAR 0 5
42774: PUSH
42775: LD_INT 3
42777: ARRAY
42778: PPUSH
42779: CALL_OW 117
// end ;
42783: GO 42690
42785: POP
42786: POP
// end ; end ;
42787: GO 42006
42789: POP
42790: POP
// end ;
42791: LD_VAR 0 1
42795: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
42796: LD_INT 0
42798: PPUSH
42799: PPUSH
42800: PPUSH
42801: PPUSH
// if not mc_bases then
42802: LD_EXP 5
42806: NOT
42807: IFFALSE 42811
// exit ;
42809: GO 42972
// for i = 1 to mc_bases do
42811: LD_ADDR_VAR 0 2
42815: PUSH
42816: DOUBLE
42817: LD_INT 1
42819: DEC
42820: ST_TO_ADDR
42821: LD_EXP 5
42825: PUSH
42826: FOR_TO
42827: IFFALSE 42970
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
42829: LD_ADDR_VAR 0 4
42833: PUSH
42834: LD_EXP 23
42838: PUSH
42839: LD_VAR 0 2
42843: ARRAY
42844: PUSH
42845: LD_EXP 26
42849: PUSH
42850: LD_VAR 0 2
42854: ARRAY
42855: ADD
42856: PPUSH
42857: LD_INT 33
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PPUSH
42867: CALL_OW 72
42871: ST_TO_ADDR
// if tmp then
42872: LD_VAR 0 4
42876: IFFALSE 42968
// for j in tmp do
42878: LD_ADDR_VAR 0 3
42882: PUSH
42883: LD_VAR 0 4
42887: PUSH
42888: FOR_IN
42889: IFFALSE 42966
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
42891: LD_VAR 0 3
42895: PPUSH
42896: CALL_OW 312
42900: NOT
42901: PUSH
42902: LD_VAR 0 3
42906: PPUSH
42907: CALL_OW 256
42911: PUSH
42912: LD_INT 250
42914: GREATEREQUAL
42915: AND
42916: IFFALSE 42929
// Connect ( j ) else
42918: LD_VAR 0 3
42922: PPUSH
42923: CALL 9181 0 1
42927: GO 42964
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
42929: LD_VAR 0 3
42933: PPUSH
42934: CALL_OW 256
42938: PUSH
42939: LD_INT 250
42941: LESS
42942: PUSH
42943: LD_VAR 0 3
42947: PPUSH
42948: CALL_OW 312
42952: AND
42953: IFFALSE 42964
// ComUnlink ( j ) ;
42955: LD_VAR 0 3
42959: PPUSH
42960: CALL_OW 136
42964: GO 42888
42966: POP
42967: POP
// end ;
42968: GO 42826
42970: POP
42971: POP
// end ;
42972: LD_VAR 0 1
42976: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
42977: LD_INT 0
42979: PPUSH
42980: PPUSH
42981: PPUSH
42982: PPUSH
42983: PPUSH
// if not mc_bases then
42984: LD_EXP 5
42988: NOT
42989: IFFALSE 42993
// exit ;
42991: GO 43453
// for i = 1 to mc_bases do
42993: LD_ADDR_VAR 0 2
42997: PUSH
42998: DOUBLE
42999: LD_INT 1
43001: DEC
43002: ST_TO_ADDR
43003: LD_EXP 5
43007: PUSH
43008: FOR_TO
43009: IFFALSE 43451
// begin if not mc_produce [ i ] then
43011: LD_EXP 25
43015: PUSH
43016: LD_VAR 0 2
43020: ARRAY
43021: NOT
43022: IFFALSE 43026
// continue ;
43024: GO 43008
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
43026: LD_ADDR_VAR 0 5
43030: PUSH
43031: LD_EXP 5
43035: PUSH
43036: LD_VAR 0 2
43040: ARRAY
43041: PPUSH
43042: LD_INT 30
43044: PUSH
43045: LD_INT 3
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PPUSH
43052: CALL_OW 72
43056: ST_TO_ADDR
// if not fac then
43057: LD_VAR 0 5
43061: NOT
43062: IFFALSE 43066
// continue ;
43064: GO 43008
// for j in fac do
43066: LD_ADDR_VAR 0 3
43070: PUSH
43071: LD_VAR 0 5
43075: PUSH
43076: FOR_IN
43077: IFFALSE 43447
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
43079: LD_VAR 0 3
43083: PPUSH
43084: CALL_OW 461
43088: PUSH
43089: LD_INT 2
43091: NONEQUAL
43092: PUSH
43093: LD_VAR 0 3
43097: PPUSH
43098: LD_INT 15
43100: PPUSH
43101: CALL 8884 0 2
43105: PUSH
43106: LD_INT 4
43108: ARRAY
43109: OR
43110: PUSH
43111: LD_VAR 0 3
43115: PPUSH
43116: CALL_OW 313
43120: PUSH
43121: LD_INT 0
43123: EQUAL
43124: OR
43125: IFFALSE 43129
// continue ;
43127: GO 43076
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
43129: LD_VAR 0 3
43133: PPUSH
43134: LD_EXP 25
43138: PUSH
43139: LD_VAR 0 2
43143: ARRAY
43144: PUSH
43145: LD_INT 1
43147: ARRAY
43148: PUSH
43149: LD_INT 1
43151: ARRAY
43152: PPUSH
43153: LD_EXP 25
43157: PUSH
43158: LD_VAR 0 2
43162: ARRAY
43163: PUSH
43164: LD_INT 1
43166: ARRAY
43167: PUSH
43168: LD_INT 2
43170: ARRAY
43171: PPUSH
43172: LD_EXP 25
43176: PUSH
43177: LD_VAR 0 2
43181: ARRAY
43182: PUSH
43183: LD_INT 1
43185: ARRAY
43186: PUSH
43187: LD_INT 3
43189: ARRAY
43190: PPUSH
43191: LD_EXP 25
43195: PUSH
43196: LD_VAR 0 2
43200: ARRAY
43201: PUSH
43202: LD_INT 1
43204: ARRAY
43205: PUSH
43206: LD_INT 4
43208: ARRAY
43209: PPUSH
43210: CALL_OW 448
43214: PUSH
43215: LD_VAR 0 3
43219: PPUSH
43220: LD_EXP 25
43224: PUSH
43225: LD_VAR 0 2
43229: ARRAY
43230: PUSH
43231: LD_INT 1
43233: ARRAY
43234: PUSH
43235: LD_INT 1
43237: ARRAY
43238: PUSH
43239: LD_EXP 25
43243: PUSH
43244: LD_VAR 0 2
43248: ARRAY
43249: PUSH
43250: LD_INT 1
43252: ARRAY
43253: PUSH
43254: LD_INT 2
43256: ARRAY
43257: PUSH
43258: LD_EXP 25
43262: PUSH
43263: LD_VAR 0 2
43267: ARRAY
43268: PUSH
43269: LD_INT 1
43271: ARRAY
43272: PUSH
43273: LD_INT 3
43275: ARRAY
43276: PUSH
43277: LD_EXP 25
43281: PUSH
43282: LD_VAR 0 2
43286: ARRAY
43287: PUSH
43288: LD_INT 1
43290: ARRAY
43291: PUSH
43292: LD_INT 4
43294: ARRAY
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: PPUSH
43302: CALL 12386 0 2
43306: AND
43307: IFFALSE 43445
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
43309: LD_VAR 0 3
43313: PPUSH
43314: LD_EXP 25
43318: PUSH
43319: LD_VAR 0 2
43323: ARRAY
43324: PUSH
43325: LD_INT 1
43327: ARRAY
43328: PUSH
43329: LD_INT 1
43331: ARRAY
43332: PPUSH
43333: LD_EXP 25
43337: PUSH
43338: LD_VAR 0 2
43342: ARRAY
43343: PUSH
43344: LD_INT 1
43346: ARRAY
43347: PUSH
43348: LD_INT 2
43350: ARRAY
43351: PPUSH
43352: LD_EXP 25
43356: PUSH
43357: LD_VAR 0 2
43361: ARRAY
43362: PUSH
43363: LD_INT 1
43365: ARRAY
43366: PUSH
43367: LD_INT 3
43369: ARRAY
43370: PPUSH
43371: LD_EXP 25
43375: PUSH
43376: LD_VAR 0 2
43380: ARRAY
43381: PUSH
43382: LD_INT 1
43384: ARRAY
43385: PUSH
43386: LD_INT 4
43388: ARRAY
43389: PPUSH
43390: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
43394: LD_ADDR_VAR 0 4
43398: PUSH
43399: LD_EXP 25
43403: PUSH
43404: LD_VAR 0 2
43408: ARRAY
43409: PPUSH
43410: LD_INT 1
43412: PPUSH
43413: CALL_OW 3
43417: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
43418: LD_ADDR_EXP 25
43422: PUSH
43423: LD_EXP 25
43427: PPUSH
43428: LD_VAR 0 2
43432: PPUSH
43433: LD_VAR 0 4
43437: PPUSH
43438: CALL_OW 1
43442: ST_TO_ADDR
// break ;
43443: GO 43447
// end ; end ;
43445: GO 43076
43447: POP
43448: POP
// end ;
43449: GO 43008
43451: POP
43452: POP
// end ;
43453: LD_VAR 0 1
43457: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
43458: LD_INT 0
43460: PPUSH
43461: PPUSH
43462: PPUSH
// if not mc_bases then
43463: LD_EXP 5
43467: NOT
43468: IFFALSE 43472
// exit ;
43470: GO 43561
// for i = 1 to mc_bases do
43472: LD_ADDR_VAR 0 2
43476: PUSH
43477: DOUBLE
43478: LD_INT 1
43480: DEC
43481: ST_TO_ADDR
43482: LD_EXP 5
43486: PUSH
43487: FOR_TO
43488: IFFALSE 43559
// begin if mc_attack [ i ] then
43490: LD_EXP 24
43494: PUSH
43495: LD_VAR 0 2
43499: ARRAY
43500: IFFALSE 43557
// begin tmp := mc_attack [ i ] [ 1 ] ;
43502: LD_ADDR_VAR 0 3
43506: PUSH
43507: LD_EXP 24
43511: PUSH
43512: LD_VAR 0 2
43516: ARRAY
43517: PUSH
43518: LD_INT 1
43520: ARRAY
43521: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
43522: LD_ADDR_EXP 24
43526: PUSH
43527: LD_EXP 24
43531: PPUSH
43532: LD_VAR 0 2
43536: PPUSH
43537: EMPTY
43538: PPUSH
43539: CALL_OW 1
43543: ST_TO_ADDR
// Attack ( tmp ) ;
43544: LD_VAR 0 3
43548: PPUSH
43549: CALL 33377 0 1
// exit ;
43553: POP
43554: POP
43555: GO 43561
// end ; end ;
43557: GO 43487
43559: POP
43560: POP
// end ;
43561: LD_VAR 0 1
43565: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
43566: LD_INT 0
43568: PPUSH
43569: PPUSH
43570: PPUSH
43571: PPUSH
43572: PPUSH
43573: PPUSH
43574: PPUSH
// if not mc_bases then
43575: LD_EXP 5
43579: NOT
43580: IFFALSE 43584
// exit ;
43582: GO 43929
// class := AllowSpecClass ( mc_defender [ 1 ] ) ;
43584: LD_ADDR_VAR 0 7
43588: PUSH
43589: LD_EXP 26
43593: PUSH
43594: LD_INT 1
43596: ARRAY
43597: PPUSH
43598: CALL 3198 0 1
43602: ST_TO_ADDR
// for i = 1 to mc_bases do
43603: LD_ADDR_VAR 0 2
43607: PUSH
43608: DOUBLE
43609: LD_INT 1
43611: DEC
43612: ST_TO_ADDR
43613: LD_EXP 5
43617: PUSH
43618: FOR_TO
43619: IFFALSE 43927
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ 1 ] ) , mc_scan_area [ i ] ) ) ;
43621: LD_ADDR_EXP 27
43625: PUSH
43626: LD_EXP 27
43630: PPUSH
43631: LD_VAR 0 2
43635: PPUSH
43636: LD_EXP 5
43640: PUSH
43641: LD_INT 1
43643: ARRAY
43644: PPUSH
43645: CALL_OW 255
43649: PPUSH
43650: LD_EXP 29
43654: PUSH
43655: LD_VAR 0 2
43659: ARRAY
43660: PPUSH
43661: CALL 1656 0 2
43665: PPUSH
43666: CALL_OW 1
43670: ST_TO_ADDR
// if not mc_scan [ i ] then
43671: LD_EXP 27
43675: PUSH
43676: LD_VAR 0 2
43680: ARRAY
43681: NOT
43682: IFFALSE 43834
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
43684: LD_ADDR_VAR 0 4
43688: PUSH
43689: LD_EXP 5
43693: PUSH
43694: LD_VAR 0 2
43698: ARRAY
43699: PPUSH
43700: LD_INT 2
43702: PUSH
43703: LD_INT 25
43705: PUSH
43706: LD_INT 5
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 25
43715: PUSH
43716: LD_INT 8
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 25
43725: PUSH
43726: LD_INT 9
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: PPUSH
43739: CALL_OW 72
43743: ST_TO_ADDR
// if not tmp then
43744: LD_VAR 0 4
43748: NOT
43749: IFFALSE 43753
// continue ;
43751: GO 43618
// for j in tmp do
43753: LD_ADDR_VAR 0 3
43757: PUSH
43758: LD_VAR 0 4
43762: PUSH
43763: FOR_IN
43764: IFFALSE 43832
// if GetBType ( IsInUnit ( j ) ) in [ b_barracks ] and GetClass ( j ) = 1 and not MineOfUnit ( j ) then
43766: LD_VAR 0 3
43770: PPUSH
43771: CALL_OW 310
43775: PPUSH
43776: CALL_OW 266
43780: PUSH
43781: LD_INT 5
43783: PUSH
43784: EMPTY
43785: LIST
43786: IN
43787: PUSH
43788: LD_VAR 0 3
43792: PPUSH
43793: CALL_OW 257
43797: PUSH
43798: LD_INT 1
43800: EQUAL
43801: AND
43802: PUSH
43803: LD_VAR 0 3
43807: PPUSH
43808: CALL_OW 459
43812: NOT
43813: AND
43814: IFFALSE 43830
// ComChangeProfession ( j , class ) ;
43816: LD_VAR 0 3
43820: PPUSH
43821: LD_VAR 0 7
43825: PPUSH
43826: CALL_OW 123
43830: GO 43763
43832: POP
43833: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
43834: LD_EXP 27
43838: PUSH
43839: LD_VAR 0 2
43843: ARRAY
43844: PUSH
43845: LD_EXP 26
43849: PUSH
43850: LD_VAR 0 2
43854: ARRAY
43855: AND
43856: IFFALSE 43925
// begin tmp := mc_defender [ i ] ;
43858: LD_ADDR_VAR 0 4
43862: PUSH
43863: LD_EXP 26
43867: PUSH
43868: LD_VAR 0 2
43872: ARRAY
43873: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
43874: LD_ADDR_EXP 26
43878: PUSH
43879: LD_EXP 26
43883: PPUSH
43884: LD_VAR 0 2
43888: PPUSH
43889: EMPTY
43890: PPUSH
43891: CALL_OW 1
43895: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
43896: LD_VAR 0 2
43900: PPUSH
43901: LD_VAR 0 4
43905: PPUSH
43906: LD_EXP 27
43910: PUSH
43911: LD_VAR 0 2
43915: ARRAY
43916: PPUSH
43917: CALL 1691 0 3
// exit ;
43921: POP
43922: POP
43923: GO 43929
// end ; end ;
43925: GO 43618
43927: POP
43928: POP
// end ;
43929: LD_VAR 0 1
43933: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tech_temp , tmp2 ; begin
43934: LD_INT 0
43936: PPUSH
43937: PPUSH
43938: PPUSH
43939: PPUSH
43940: PPUSH
43941: PPUSH
43942: PPUSH
43943: PPUSH
43944: PPUSH
43945: PPUSH
// if not mc_bases then
43946: LD_EXP 5
43950: NOT
43951: IFFALSE 43955
// exit ;
43953: GO 44787
// for i = 1 to mc_bases do
43955: LD_ADDR_VAR 0 2
43959: PUSH
43960: DOUBLE
43961: LD_INT 1
43963: DEC
43964: ST_TO_ADDR
43965: LD_EXP 5
43969: PUSH
43970: FOR_TO
43971: IFFALSE 44785
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
43973: LD_ADDR_VAR 0 6
43977: PUSH
43978: LD_EXP 5
43982: PUSH
43983: LD_VAR 0 2
43987: ARRAY
43988: PPUSH
43989: LD_INT 2
43991: PUSH
43992: LD_INT 30
43994: PUSH
43995: LD_INT 6
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 30
44004: PUSH
44005: LD_INT 7
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 30
44014: PUSH
44015: LD_INT 8
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: PPUSH
44028: CALL_OW 72
44032: ST_TO_ADDR
// if not tmp then
44033: LD_VAR 0 6
44037: NOT
44038: IFFALSE 44042
// continue ;
44040: GO 43970
// for j in tmp do
44042: LD_ADDR_VAR 0 3
44046: PUSH
44047: LD_VAR 0 6
44051: PUSH
44052: FOR_IN
44053: IFFALSE 44781
// begin side := GetSide ( j ) ;
44055: LD_ADDR_VAR 0 4
44059: PUSH
44060: LD_VAR 0 3
44064: PPUSH
44065: CALL_OW 255
44069: ST_TO_ADDR
// if not mc_tech [ side ] then
44070: LD_EXP 31
44074: PUSH
44075: LD_VAR 0 4
44079: ARRAY
44080: NOT
44081: IFFALSE 44085
// continue ;
44083: GO 44052
// if BuildingStatus ( j ) = bs_idle then
44085: LD_VAR 0 3
44089: PPUSH
44090: CALL_OW 461
44094: PUSH
44095: LD_INT 2
44097: EQUAL
44098: IFFALSE 44155
// for t in mc_tech [ side ] do
44100: LD_ADDR_VAR 0 5
44104: PUSH
44105: LD_EXP 31
44109: PUSH
44110: LD_VAR 0 4
44114: ARRAY
44115: PUSH
44116: FOR_IN
44117: IFFALSE 44153
// if CanBeResearched ( j , t ) then
44119: LD_VAR 0 3
44123: PPUSH
44124: LD_VAR 0 5
44128: PPUSH
44129: CALL_OW 430
44133: IFFALSE 44151
// begin ComResearch ( j , t ) ;
44135: LD_VAR 0 3
44139: PPUSH
44140: LD_VAR 0 5
44144: PPUSH
44145: CALL_OW 124
// break ;
44149: GO 44153
// end ;
44151: GO 44116
44153: POP
44154: POP
// if BuildingStatus ( j ) = bs_need_ape then
44155: LD_VAR 0 3
44159: PPUSH
44160: CALL_OW 461
44164: PUSH
44165: LD_INT 10
44167: EQUAL
44168: IFFALSE 44616
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
44170: LD_EXP 33
44174: PUSH
44175: LD_VAR 0 2
44179: ARRAY
44180: NOT
44181: PUSH
44182: LD_EXP 34
44186: PUSH
44187: LD_VAR 0 2
44191: ARRAY
44192: NOT
44193: AND
44194: PUSH
44195: LD_EXP 31
44199: PUSH
44200: LD_VAR 0 4
44204: ARRAY
44205: PUSH
44206: LD_INT 1
44208: GREATER
44209: AND
44210: IFFALSE 44286
// begin ComCancel ( j ) ;
44212: LD_VAR 0 3
44216: PPUSH
44217: CALL_OW 127
// tech_temp := Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ;
44221: LD_ADDR_VAR 0 9
44225: PUSH
44226: LD_EXP 31
44230: PUSH
44231: LD_VAR 0 4
44235: ARRAY
44236: PPUSH
44237: LD_EXP 31
44241: PUSH
44242: LD_VAR 0 4
44246: ARRAY
44247: PPUSH
44248: LD_INT 1
44250: PPUSH
44251: LD_INT 0
44253: PPUSH
44254: CALL 5676 0 4
44258: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , tech_temp ) ;
44259: LD_ADDR_EXP 31
44263: PUSH
44264: LD_EXP 31
44268: PPUSH
44269: LD_VAR 0 4
44273: PPUSH
44274: LD_VAR 0 9
44278: PPUSH
44279: CALL_OW 1
44283: ST_TO_ADDR
// continue ;
44284: GO 44052
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
44286: LD_EXP 33
44290: PUSH
44291: LD_VAR 0 2
44295: ARRAY
44296: PUSH
44297: LD_EXP 34
44301: PUSH
44302: LD_VAR 0 2
44306: ARRAY
44307: NOT
44308: AND
44309: IFFALSE 44490
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
44311: LD_ADDR_EXP 34
44315: PUSH
44316: LD_EXP 34
44320: PPUSH
44321: LD_VAR 0 2
44325: PUSH
44326: LD_EXP 34
44330: PUSH
44331: LD_VAR 0 2
44335: ARRAY
44336: PUSH
44337: LD_INT 1
44339: PLUS
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PPUSH
44345: LD_EXP 33
44349: PUSH
44350: LD_VAR 0 2
44354: ARRAY
44355: PUSH
44356: LD_INT 1
44358: ARRAY
44359: PPUSH
44360: CALL 6693 0 3
44364: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
44365: LD_EXP 33
44369: PUSH
44370: LD_VAR 0 2
44374: ARRAY
44375: PUSH
44376: LD_INT 1
44378: ARRAY
44379: PPUSH
44380: LD_INT 112
44382: PPUSH
44383: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
44387: LD_ADDR_VAR 0 10
44391: PUSH
44392: LD_EXP 33
44396: PUSH
44397: LD_VAR 0 2
44401: ARRAY
44402: PPUSH
44403: LD_INT 1
44405: PPUSH
44406: CALL_OW 3
44410: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
44411: LD_ADDR_EXP 33
44415: PUSH
44416: LD_EXP 33
44420: PPUSH
44421: LD_VAR 0 2
44425: PPUSH
44426: LD_VAR 0 10
44430: PPUSH
44431: CALL_OW 1
44435: ST_TO_ADDR
// tmp2 := UnitsInside ( j ) ;
44436: LD_ADDR_VAR 0 10
44440: PUSH
44441: LD_VAR 0 3
44445: PPUSH
44446: CALL_OW 313
44450: ST_TO_ADDR
// if tmp2 = 6 then
44451: LD_VAR 0 10
44455: PUSH
44456: LD_INT 6
44458: EQUAL
44459: IFFALSE 44490
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
44461: LD_VAR 0 10
44465: PUSH
44466: LD_INT 1
44468: ARRAY
44469: PPUSH
44470: LD_INT 112
44472: PPUSH
44473: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
44477: LD_VAR 0 10
44481: PUSH
44482: LD_INT 1
44484: ARRAY
44485: PPUSH
44486: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) = j then
44490: LD_EXP 34
44494: PUSH
44495: LD_VAR 0 2
44499: ARRAY
44500: PUSH
44501: LD_EXP 34
44505: PUSH
44506: LD_VAR 0 2
44510: ARRAY
44511: PUSH
44512: LD_INT 1
44514: ARRAY
44515: PPUSH
44516: CALL_OW 314
44520: NOT
44521: AND
44522: PUSH
44523: LD_EXP 34
44527: PUSH
44528: LD_VAR 0 2
44532: ARRAY
44533: PUSH
44534: LD_INT 1
44536: ARRAY
44537: PPUSH
44538: CALL_OW 310
44542: PUSH
44543: LD_VAR 0 3
44547: EQUAL
44548: NOT
44549: AND
44550: IFFALSE 44616
// begin if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
44552: LD_EXP 34
44556: PUSH
44557: LD_VAR 0 2
44561: ARRAY
44562: PUSH
44563: LD_INT 1
44565: ARRAY
44566: PPUSH
44567: CALL_OW 310
44571: IFFALSE 44592
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
44573: LD_EXP 34
44577: PUSH
44578: LD_VAR 0 2
44582: ARRAY
44583: PUSH
44584: LD_INT 1
44586: ARRAY
44587: PPUSH
44588: CALL_OW 122
// AddComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
44592: LD_EXP 34
44596: PUSH
44597: LD_VAR 0 2
44601: ARRAY
44602: PUSH
44603: LD_INT 1
44605: ARRAY
44606: PPUSH
44607: LD_VAR 0 3
44611: PPUSH
44612: CALL_OW 180
// end ; end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
44616: LD_VAR 0 3
44620: PPUSH
44621: CALL_OW 461
44625: PUSH
44626: LD_INT 6
44628: EQUAL
44629: PUSH
44630: LD_VAR 0 6
44634: PUSH
44635: LD_INT 1
44637: GREATER
44638: AND
44639: IFFALSE 44779
// begin sci := [ ] ;
44641: LD_ADDR_VAR 0 8
44645: PUSH
44646: EMPTY
44647: ST_TO_ADDR
// for x in tmp diff j do
44648: LD_ADDR_VAR 0 7
44652: PUSH
44653: LD_VAR 0 6
44657: PUSH
44658: LD_VAR 0 3
44662: DIFF
44663: PUSH
44664: FOR_IN
44665: IFFALSE 44705
// begin if BuildingStatus ( x ) = bs_idle then
44667: LD_VAR 0 7
44671: PPUSH
44672: CALL_OW 461
44676: PUSH
44677: LD_INT 2
44679: EQUAL
44680: IFFALSE 44703
// sci := sci ^ UnitsInside ( x ) ;
44682: LD_ADDR_VAR 0 8
44686: PUSH
44687: LD_VAR 0 8
44691: PUSH
44692: LD_VAR 0 7
44696: PPUSH
44697: CALL_OW 313
44701: ADD
44702: ST_TO_ADDR
// end ;
44703: GO 44664
44705: POP
44706: POP
// if not sci then
44707: LD_VAR 0 8
44711: NOT
44712: IFFALSE 44716
// continue ;
44714: GO 44052
// for x in sci do
44716: LD_ADDR_VAR 0 7
44720: PUSH
44721: LD_VAR 0 8
44725: PUSH
44726: FOR_IN
44727: IFFALSE 44777
// if IsInUnit ( x ) and not HasTask ( x ) then
44729: LD_VAR 0 7
44733: PPUSH
44734: CALL_OW 310
44738: PUSH
44739: LD_VAR 0 7
44743: PPUSH
44744: CALL_OW 314
44748: NOT
44749: AND
44750: IFFALSE 44775
// begin ComExitBuilding ( x ) ;
44752: LD_VAR 0 7
44756: PPUSH
44757: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
44761: LD_VAR 0 7
44765: PPUSH
44766: LD_VAR 0 3
44770: PPUSH
44771: CALL_OW 180
// end ;
44775: GO 44726
44777: POP
44778: POP
// end ; end ;
44779: GO 44052
44781: POP
44782: POP
// end ;
44783: GO 43970
44785: POP
44786: POP
// end ;
44787: LD_VAR 0 1
44791: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
44792: LD_INT 0
44794: PPUSH
44795: PPUSH
44796: PPUSH
44797: PPUSH
44798: PPUSH
44799: PPUSH
// if not mc_bases then
44800: LD_EXP 5
44804: NOT
44805: IFFALSE 44809
// exit ;
44807: GO 45048
// for i = 1 to 8 do
44809: LD_ADDR_VAR 0 2
44813: PUSH
44814: DOUBLE
44815: LD_INT 1
44817: DEC
44818: ST_TO_ADDR
44819: LD_INT 8
44821: PUSH
44822: FOR_TO
44823: IFFALSE 44849
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
44825: LD_ADDR_EXP 31
44829: PUSH
44830: LD_EXP 31
44834: PPUSH
44835: LD_VAR 0 2
44839: PPUSH
44840: EMPTY
44841: PPUSH
44842: CALL_OW 1
44846: ST_TO_ADDR
44847: GO 44822
44849: POP
44850: POP
// tmp := [ ] ;
44851: LD_ADDR_VAR 0 5
44855: PUSH
44856: EMPTY
44857: ST_TO_ADDR
// for i = 1 to mc_sides do
44858: LD_ADDR_VAR 0 2
44862: PUSH
44863: DOUBLE
44864: LD_INT 1
44866: DEC
44867: ST_TO_ADDR
44868: LD_EXP 30
44872: PUSH
44873: FOR_TO
44874: IFFALSE 44932
// if not mc_sides [ i ] in tmp then
44876: LD_EXP 30
44880: PUSH
44881: LD_VAR 0 2
44885: ARRAY
44886: PUSH
44887: LD_VAR 0 5
44891: IN
44892: NOT
44893: IFFALSE 44930
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
44895: LD_ADDR_VAR 0 5
44899: PUSH
44900: LD_VAR 0 5
44904: PPUSH
44905: LD_VAR 0 5
44909: PUSH
44910: LD_INT 1
44912: PLUS
44913: PPUSH
44914: LD_EXP 30
44918: PUSH
44919: LD_VAR 0 2
44923: ARRAY
44924: PPUSH
44925: CALL_OW 2
44929: ST_TO_ADDR
44930: GO 44873
44932: POP
44933: POP
// if not tmp then
44934: LD_VAR 0 5
44938: NOT
44939: IFFALSE 44943
// exit ;
44941: GO 45048
// for j in tmp do
44943: LD_ADDR_VAR 0 3
44947: PUSH
44948: LD_VAR 0 5
44952: PUSH
44953: FOR_IN
44954: IFFALSE 45046
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
44956: LD_ADDR_VAR 0 6
44960: PUSH
44961: LD_INT 22
44963: PUSH
44964: LD_VAR 0 3
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PPUSH
44973: CALL_OW 69
44977: ST_TO_ADDR
// if not un then
44978: LD_VAR 0 6
44982: NOT
44983: IFFALSE 44987
// continue ;
44985: GO 44953
// nation := GetNation ( un [ 1 ] ) ;
44987: LD_ADDR_VAR 0 4
44991: PUSH
44992: LD_VAR 0 6
44996: PUSH
44997: LD_INT 1
44999: ARRAY
45000: PPUSH
45001: CALL_OW 248
45005: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
45006: LD_ADDR_EXP 31
45010: PUSH
45011: LD_EXP 31
45015: PPUSH
45016: LD_VAR 0 3
45020: PPUSH
45021: LD_VAR 0 3
45025: PPUSH
45026: LD_VAR 0 4
45030: PPUSH
45031: LD_INT 1
45033: PPUSH
45034: CALL 835 0 3
45038: PPUSH
45039: CALL_OW 1
45043: ST_TO_ADDR
// end ;
45044: GO 44953
45046: POP
45047: POP
// end ;
45048: LD_VAR 0 1
45052: RET
// export function MC_InitSides ( ) ; var i ; begin
45053: LD_INT 0
45055: PPUSH
45056: PPUSH
// if not mc_bases then
45057: LD_EXP 5
45061: NOT
45062: IFFALSE 45066
// exit ;
45064: GO 45140
// for i = 1 to mc_bases do
45066: LD_ADDR_VAR 0 2
45070: PUSH
45071: DOUBLE
45072: LD_INT 1
45074: DEC
45075: ST_TO_ADDR
45076: LD_EXP 5
45080: PUSH
45081: FOR_TO
45082: IFFALSE 45138
// if mc_bases [ i ] then
45084: LD_EXP 5
45088: PUSH
45089: LD_VAR 0 2
45093: ARRAY
45094: IFFALSE 45136
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
45096: LD_ADDR_EXP 30
45100: PUSH
45101: LD_EXP 30
45105: PPUSH
45106: LD_VAR 0 2
45110: PPUSH
45111: LD_EXP 5
45115: PUSH
45116: LD_VAR 0 2
45120: ARRAY
45121: PUSH
45122: LD_INT 1
45124: ARRAY
45125: PPUSH
45126: CALL_OW 255
45130: PPUSH
45131: CALL_OW 1
45135: ST_TO_ADDR
45136: GO 45081
45138: POP
45139: POP
// end ;
45140: LD_VAR 0 1
45144: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
45145: LD_INT 0
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
45152: PPUSH
45153: PPUSH
45154: PPUSH
// if not mc_bases then
45155: LD_EXP 5
45159: NOT
45160: IFFALSE 45164
// exit ;
45162: GO 45809
// for i = 1 to mc_bases do
45164: LD_ADDR_VAR 0 2
45168: PUSH
45169: DOUBLE
45170: LD_INT 1
45172: DEC
45173: ST_TO_ADDR
45174: LD_EXP 5
45178: PUSH
45179: FOR_TO
45180: IFFALSE 45807
// begin if not mc_bases [ i ] then
45182: LD_EXP 5
45186: PUSH
45187: LD_VAR 0 2
45191: ARRAY
45192: NOT
45193: IFFALSE 45197
// continue ;
45195: GO 45179
// if mc_scan [ i ] then
45197: LD_EXP 27
45201: PUSH
45202: LD_VAR 0 2
45206: ARRAY
45207: IFFALSE 45233
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
45209: LD_ADDR_EXP 17
45213: PUSH
45214: LD_EXP 17
45218: PPUSH
45219: LD_VAR 0 2
45223: PPUSH
45224: EMPTY
45225: PPUSH
45226: CALL_OW 1
45230: ST_TO_ADDR
// continue ;
45231: GO 45179
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
45233: LD_ADDR_VAR 0 5
45237: PUSH
45238: LD_EXP 5
45242: PUSH
45243: LD_VAR 0 2
45247: ARRAY
45248: PUSH
45249: LD_INT 1
45251: ARRAY
45252: PPUSH
45253: CALL_OW 255
45257: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
45258: LD_ADDR_VAR 0 6
45262: PUSH
45263: LD_EXP 5
45267: PUSH
45268: LD_VAR 0 2
45272: ARRAY
45273: PPUSH
45274: LD_INT 30
45276: PUSH
45277: LD_INT 3
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PPUSH
45284: CALL_OW 72
45288: ST_TO_ADDR
// if not fac then
45289: LD_VAR 0 6
45293: NOT
45294: IFFALSE 45345
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
45296: LD_ADDR_VAR 0 6
45300: PUSH
45301: LD_EXP 5
45305: PUSH
45306: LD_VAR 0 2
45310: ARRAY
45311: PPUSH
45312: LD_INT 2
45314: PUSH
45315: LD_INT 30
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 30
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: LIST
45339: PPUSH
45340: CALL_OW 72
45344: ST_TO_ADDR
// if not fac then
45345: LD_VAR 0 6
45349: NOT
45350: IFFALSE 45354
// continue ;
45352: GO 45179
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
45354: LD_ADDR_VAR 0 7
45358: PUSH
45359: LD_EXP 28
45363: PUSH
45364: LD_VAR 0 2
45368: ARRAY
45369: PPUSH
45370: LD_INT 22
45372: PUSH
45373: LD_VAR 0 5
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 21
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 3
45394: PUSH
45395: LD_INT 24
45397: PUSH
45398: LD_INT 1000
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: LIST
45413: PPUSH
45414: CALL_OW 70
45418: PUSH
45419: LD_INT 22
45421: PUSH
45422: LD_VAR 0 5
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 91
45433: PUSH
45434: LD_VAR 0 6
45438: PUSH
45439: LD_INT 1
45441: ARRAY
45442: PUSH
45443: LD_INT 25
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 21
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 3
45463: PUSH
45464: LD_INT 24
45466: PUSH
45467: LD_INT 1000
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: PPUSH
45484: CALL_OW 69
45488: UNION
45489: ST_TO_ADDR
// if not vehs then
45490: LD_VAR 0 7
45494: NOT
45495: IFFALSE 45521
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
45497: LD_ADDR_EXP 17
45501: PUSH
45502: LD_EXP 17
45506: PPUSH
45507: LD_VAR 0 2
45511: PPUSH
45512: EMPTY
45513: PPUSH
45514: CALL_OW 1
45518: ST_TO_ADDR
// continue ;
45519: GO 45179
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
45521: LD_ADDR_VAR 0 8
45525: PUSH
45526: LD_EXP 5
45530: PUSH
45531: LD_VAR 0 2
45535: ARRAY
45536: PPUSH
45537: LD_INT 30
45539: PUSH
45540: LD_INT 3
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PPUSH
45547: CALL_OW 72
45551: ST_TO_ADDR
// if tmp then
45552: LD_VAR 0 8
45556: IFFALSE 45659
// begin for j in tmp do
45558: LD_ADDR_VAR 0 3
45562: PUSH
45563: LD_VAR 0 8
45567: PUSH
45568: FOR_IN
45569: IFFALSE 45657
// for k in UnitsInside ( j ) do
45571: LD_ADDR_VAR 0 4
45575: PUSH
45576: LD_VAR 0 3
45580: PPUSH
45581: CALL_OW 313
45585: PUSH
45586: FOR_IN
45587: IFFALSE 45653
// if k then
45589: LD_VAR 0 4
45593: IFFALSE 45651
// if not k in mc_repair_vehicle [ i ] then
45595: LD_VAR 0 4
45599: PUSH
45600: LD_EXP 17
45604: PUSH
45605: LD_VAR 0 2
45609: ARRAY
45610: IN
45611: NOT
45612: IFFALSE 45651
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
45614: LD_ADDR_EXP 17
45618: PUSH
45619: LD_EXP 17
45623: PPUSH
45624: LD_VAR 0 2
45628: PPUSH
45629: LD_EXP 17
45633: PUSH
45634: LD_VAR 0 2
45638: ARRAY
45639: PUSH
45640: LD_VAR 0 4
45644: UNION
45645: PPUSH
45646: CALL_OW 1
45650: ST_TO_ADDR
45651: GO 45586
45653: POP
45654: POP
45655: GO 45568
45657: POP
45658: POP
// end ; if not mc_repair_vehicle [ i ] then
45659: LD_EXP 17
45663: PUSH
45664: LD_VAR 0 2
45668: ARRAY
45669: NOT
45670: IFFALSE 45674
// continue ;
45672: GO 45179
// for j in mc_repair_vehicle [ i ] do
45674: LD_ADDR_VAR 0 3
45678: PUSH
45679: LD_EXP 17
45683: PUSH
45684: LD_VAR 0 2
45688: ARRAY
45689: PUSH
45690: FOR_IN
45691: IFFALSE 45803
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
45693: LD_VAR 0 3
45697: PPUSH
45698: CALL_OW 311
45702: NOT
45703: PUSH
45704: LD_VAR 0 3
45708: PUSH
45709: LD_EXP 8
45713: PUSH
45714: LD_VAR 0 2
45718: ARRAY
45719: PUSH
45720: LD_INT 1
45722: ARRAY
45723: IN
45724: NOT
45725: AND
45726: PUSH
45727: LD_VAR 0 3
45731: PUSH
45732: LD_EXP 8
45736: PUSH
45737: LD_VAR 0 2
45741: ARRAY
45742: PUSH
45743: LD_INT 2
45745: ARRAY
45746: IN
45747: NOT
45748: AND
45749: IFFALSE 45801
// begin if IsInUnit ( j ) then
45751: LD_VAR 0 3
45755: PPUSH
45756: CALL_OW 310
45760: IFFALSE 45771
// ComExitBuilding ( j ) ;
45762: LD_VAR 0 3
45766: PPUSH
45767: CALL_OW 122
// if not HasTask ( j ) then
45771: LD_VAR 0 3
45775: PPUSH
45776: CALL_OW 314
45780: NOT
45781: IFFALSE 45801
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
45783: LD_VAR 0 3
45787: PPUSH
45788: LD_VAR 0 7
45792: PUSH
45793: LD_INT 1
45795: ARRAY
45796: PPUSH
45797: CALL_OW 189
// end ; end ;
45801: GO 45690
45803: POP
45804: POP
// end ;
45805: GO 45179
45807: POP
45808: POP
// end ;
45809: LD_VAR 0 1
45813: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp ; begin
45814: LD_INT 0
45816: PPUSH
45817: PPUSH
45818: PPUSH
45819: PPUSH
45820: PPUSH
45821: PPUSH
45822: PPUSH
45823: PPUSH
// if not mc_bases then
45824: LD_EXP 5
45828: NOT
45829: IFFALSE 45833
// exit ;
45831: GO 46366
// for i = 1 to mc_bases do
45833: LD_ADDR_VAR 0 2
45837: PUSH
45838: DOUBLE
45839: LD_INT 1
45841: DEC
45842: ST_TO_ADDR
45843: LD_EXP 5
45847: PUSH
45848: FOR_TO
45849: IFFALSE 46364
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
45851: LD_EXP 32
45855: PUSH
45856: LD_VAR 0 2
45860: ARRAY
45861: NOT
45862: PUSH
45863: LD_EXP 8
45867: PUSH
45868: LD_VAR 0 2
45872: ARRAY
45873: PUSH
45874: LD_INT 1
45876: ARRAY
45877: OR
45878: PUSH
45879: LD_EXP 8
45883: PUSH
45884: LD_VAR 0 2
45888: ARRAY
45889: PUSH
45890: LD_INT 2
45892: ARRAY
45893: OR
45894: PUSH
45895: LD_EXP 30
45899: PUSH
45900: LD_VAR 0 2
45904: ARRAY
45905: PPUSH
45906: LD_INT 1
45908: PPUSH
45909: CALL_OW 325
45913: NOT
45914: OR
45915: PUSH
45916: LD_EXP 27
45920: PUSH
45921: LD_VAR 0 2
45925: ARRAY
45926: OR
45927: IFFALSE 45931
// continue ;
45929: GO 45848
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
45931: LD_ADDR_VAR 0 8
45935: PUSH
45936: LD_EXP 5
45940: PUSH
45941: LD_VAR 0 2
45945: ARRAY
45946: PPUSH
45947: LD_INT 25
45949: PUSH
45950: LD_INT 4
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 50
45959: PUSH
45960: EMPTY
45961: LIST
45962: PUSH
45963: LD_INT 3
45965: PUSH
45966: LD_INT 60
45968: PUSH
45969: EMPTY
45970: LIST
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: LIST
45980: PPUSH
45981: CALL_OW 72
45985: PUSH
45986: LD_EXP 9
45990: PUSH
45991: LD_VAR 0 2
45995: ARRAY
45996: DIFF
45997: ST_TO_ADDR
// if not tmp then
45998: LD_VAR 0 8
46002: NOT
46003: IFFALSE 46007
// continue ;
46005: GO 45848
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
46007: LD_ADDR_VAR 0 7
46011: PUSH
46012: LD_EXP 32
46016: PUSH
46017: LD_VAR 0 2
46021: ARRAY
46022: PPUSH
46023: LD_INT 22
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 25
46035: PUSH
46036: LD_INT 12
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PPUSH
46047: CALL_OW 70
46051: ST_TO_ADDR
// if not apes then
46052: LD_VAR 0 7
46056: NOT
46057: IFFALSE 46107
// begin if mc_taming [ i ] then
46059: LD_EXP 35
46063: PUSH
46064: LD_VAR 0 2
46068: ARRAY
46069: IFFALSE 46105
// begin MC_Reset ( i , 121 ) ;
46071: LD_VAR 0 2
46075: PPUSH
46076: LD_INT 121
46078: PPUSH
46079: CALL 38246 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
46083: LD_ADDR_EXP 35
46087: PUSH
46088: LD_EXP 35
46092: PPUSH
46093: LD_VAR 0 2
46097: PPUSH
46098: EMPTY
46099: PPUSH
46100: CALL_OW 1
46104: ST_TO_ADDR
// end ; continue ;
46105: GO 45848
// end ; for j in tmp do
46107: LD_ADDR_VAR 0 3
46111: PUSH
46112: LD_VAR 0 8
46116: PUSH
46117: FOR_IN
46118: IFFALSE 46360
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
46120: LD_VAR 0 3
46124: PUSH
46125: LD_EXP 35
46129: PUSH
46130: LD_VAR 0 2
46134: ARRAY
46135: IN
46136: NOT
46137: PUSH
46138: LD_EXP 35
46142: PUSH
46143: LD_VAR 0 2
46147: ARRAY
46148: PUSH
46149: LD_INT 3
46151: LESS
46152: AND
46153: IFFALSE 46211
// begin SetTag ( j , 121 ) ;
46155: LD_VAR 0 3
46159: PPUSH
46160: LD_INT 121
46162: PPUSH
46163: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
46167: LD_ADDR_EXP 35
46171: PUSH
46172: LD_EXP 35
46176: PPUSH
46177: LD_VAR 0 2
46181: PUSH
46182: LD_EXP 35
46186: PUSH
46187: LD_VAR 0 2
46191: ARRAY
46192: PUSH
46193: LD_INT 1
46195: PLUS
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PPUSH
46201: LD_VAR 0 3
46205: PPUSH
46206: CALL 6693 0 3
46210: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
46211: LD_VAR 0 3
46215: PUSH
46216: LD_EXP 35
46220: PUSH
46221: LD_VAR 0 2
46225: ARRAY
46226: IN
46227: IFFALSE 46358
// begin if IsInUnit ( j ) then
46229: LD_VAR 0 3
46233: PPUSH
46234: CALL_OW 310
46238: IFFALSE 46249
// ComExitBuilding ( j ) ;
46240: LD_VAR 0 3
46244: PPUSH
46245: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
46249: LD_ADDR_VAR 0 6
46253: PUSH
46254: LD_VAR 0 7
46258: PPUSH
46259: LD_VAR 0 3
46263: PPUSH
46264: CALL_OW 74
46268: ST_TO_ADDR
// if not ape then
46269: LD_VAR 0 6
46273: NOT
46274: IFFALSE 46278
// break ;
46276: GO 46360
// x := GetX ( ape ) ;
46278: LD_ADDR_VAR 0 4
46282: PUSH
46283: LD_VAR 0 6
46287: PPUSH
46288: CALL_OW 250
46292: ST_TO_ADDR
// y := GetY ( ape ) ;
46293: LD_ADDR_VAR 0 5
46297: PUSH
46298: LD_VAR 0 6
46302: PPUSH
46303: CALL_OW 251
46307: ST_TO_ADDR
// if not ValidHex ( x , y ) then
46308: LD_VAR 0 4
46312: PPUSH
46313: LD_VAR 0 5
46317: PPUSH
46318: CALL_OW 488
46322: NOT
46323: IFFALSE 46327
// break ;
46325: GO 46360
// if not HasTask ( j ) then
46327: LD_VAR 0 3
46331: PPUSH
46332: CALL_OW 314
46336: NOT
46337: IFFALSE 46358
// ComTameXY ( j , x , y ) ;
46339: LD_VAR 0 3
46343: PPUSH
46344: LD_VAR 0 4
46348: PPUSH
46349: LD_VAR 0 5
46353: PPUSH
46354: CALL_OW 131
// end ; end ;
46358: GO 46117
46360: POP
46361: POP
// end ;
46362: GO 45848
46364: POP
46365: POP
// end ;
46366: LD_VAR 0 1
46370: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
46371: LD_INT 0
46373: PPUSH
46374: PPUSH
46375: PPUSH
46376: PPUSH
46377: PPUSH
46378: PPUSH
46379: PPUSH
46380: PPUSH
// if not mc_bases then
46381: LD_EXP 5
46385: NOT
46386: IFFALSE 46390
// exit ;
46388: GO 46985
// for i = 1 to mc_bases do
46390: LD_ADDR_VAR 0 2
46394: PUSH
46395: DOUBLE
46396: LD_INT 1
46398: DEC
46399: ST_TO_ADDR
46400: LD_EXP 5
46404: PUSH
46405: FOR_TO
46406: IFFALSE 46983
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
46408: LD_EXP 33
46412: PUSH
46413: LD_VAR 0 2
46417: ARRAY
46418: NOT
46419: PUSH
46420: LD_EXP 33
46424: PUSH
46425: LD_VAR 0 2
46429: ARRAY
46430: PPUSH
46431: LD_INT 25
46433: PUSH
46434: LD_INT 12
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PPUSH
46441: CALL_OW 72
46445: NOT
46446: OR
46447: IFFALSE 46451
// continue ;
46449: GO 46405
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
46451: LD_ADDR_VAR 0 5
46455: PUSH
46456: LD_EXP 33
46460: PUSH
46461: LD_VAR 0 2
46465: ARRAY
46466: PUSH
46467: LD_INT 1
46469: ARRAY
46470: PPUSH
46471: CALL_OW 255
46475: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
46476: LD_VAR 0 5
46480: PPUSH
46481: LD_INT 2
46483: PPUSH
46484: CALL_OW 325
46488: IFFALSE 46733
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
46490: LD_ADDR_VAR 0 4
46494: PUSH
46495: LD_EXP 33
46499: PUSH
46500: LD_VAR 0 2
46504: ARRAY
46505: PPUSH
46506: LD_INT 25
46508: PUSH
46509: LD_INT 16
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PPUSH
46516: CALL_OW 72
46520: ST_TO_ADDR
// if tmp < 6 then
46521: LD_VAR 0 4
46525: PUSH
46526: LD_INT 6
46528: LESS
46529: IFFALSE 46733
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
46531: LD_ADDR_VAR 0 6
46535: PUSH
46536: LD_EXP 5
46540: PUSH
46541: LD_VAR 0 2
46545: ARRAY
46546: PPUSH
46547: LD_INT 2
46549: PUSH
46550: LD_INT 30
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 30
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: LIST
46574: PPUSH
46575: CALL_OW 72
46579: ST_TO_ADDR
// if depot then
46580: LD_VAR 0 6
46584: IFFALSE 46733
// begin for j in depot do
46586: LD_ADDR_VAR 0 3
46590: PUSH
46591: LD_VAR 0 6
46595: PUSH
46596: FOR_IN
46597: IFFALSE 46628
// begin if UnitsInside ( j ) < 6 then
46599: LD_VAR 0 3
46603: PPUSH
46604: CALL_OW 313
46608: PUSH
46609: LD_INT 6
46611: LESS
46612: IFFALSE 46626
// begin selected := j ;
46614: LD_ADDR_VAR 0 7
46618: PUSH
46619: LD_VAR 0 3
46623: ST_TO_ADDR
// break ;
46624: GO 46628
// end ; end ;
46626: GO 46596
46628: POP
46629: POP
// if selected then
46630: LD_VAR 0 7
46634: IFFALSE 46733
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
46636: LD_ADDR_VAR 0 3
46640: PUSH
46641: LD_EXP 33
46645: PUSH
46646: LD_VAR 0 2
46650: ARRAY
46651: PPUSH
46652: LD_INT 25
46654: PUSH
46655: LD_INT 12
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PPUSH
46662: CALL_OW 72
46666: PUSH
46667: FOR_IN
46668: IFFALSE 46731
// if not HasTask ( j ) then
46670: LD_VAR 0 3
46674: PPUSH
46675: CALL_OW 314
46679: NOT
46680: IFFALSE 46729
// begin if not IsInUnit ( j ) then
46682: LD_VAR 0 3
46686: PPUSH
46687: CALL_OW 310
46691: NOT
46692: IFFALSE 46708
// ComEnterUnit ( j , selected ) ;
46694: LD_VAR 0 3
46698: PPUSH
46699: LD_VAR 0 7
46703: PPUSH
46704: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
46708: LD_VAR 0 3
46712: PPUSH
46713: LD_INT 16
46715: PPUSH
46716: CALL_OW 183
// AddComExitBuilding ( j ) ;
46720: LD_VAR 0 3
46724: PPUSH
46725: CALL_OW 182
// end ;
46729: GO 46667
46731: POP
46732: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
46733: LD_VAR 0 5
46737: PPUSH
46738: LD_INT 11
46740: PPUSH
46741: CALL_OW 325
46745: IFFALSE 46981
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
46747: LD_ADDR_VAR 0 4
46751: PUSH
46752: LD_EXP 33
46756: PUSH
46757: LD_VAR 0 2
46761: ARRAY
46762: PPUSH
46763: LD_INT 25
46765: PUSH
46766: LD_INT 16
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PPUSH
46773: CALL_OW 72
46777: ST_TO_ADDR
// if tmp >= 6 then
46778: LD_VAR 0 4
46782: PUSH
46783: LD_INT 6
46785: GREATEREQUAL
46786: IFFALSE 46981
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
46788: LD_ADDR_VAR 0 8
46792: PUSH
46793: LD_EXP 5
46797: PUSH
46798: LD_VAR 0 2
46802: ARRAY
46803: PPUSH
46804: LD_INT 2
46806: PUSH
46807: LD_INT 30
46809: PUSH
46810: LD_INT 4
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 30
46819: PUSH
46820: LD_INT 5
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: LIST
46831: PPUSH
46832: CALL_OW 72
46836: ST_TO_ADDR
// if barracks then
46837: LD_VAR 0 8
46841: IFFALSE 46981
// begin for j in barracks do
46843: LD_ADDR_VAR 0 3
46847: PUSH
46848: LD_VAR 0 8
46852: PUSH
46853: FOR_IN
46854: IFFALSE 46885
// begin if UnitsInside ( j ) < 6 then
46856: LD_VAR 0 3
46860: PPUSH
46861: CALL_OW 313
46865: PUSH
46866: LD_INT 6
46868: LESS
46869: IFFALSE 46883
// begin selected := j ;
46871: LD_ADDR_VAR 0 7
46875: PUSH
46876: LD_VAR 0 3
46880: ST_TO_ADDR
// break ;
46881: GO 46885
// end ; end ;
46883: GO 46853
46885: POP
46886: POP
// if selected then
46887: LD_VAR 0 7
46891: IFFALSE 46981
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
46893: LD_ADDR_VAR 0 3
46897: PUSH
46898: LD_EXP 33
46902: PUSH
46903: LD_VAR 0 2
46907: ARRAY
46908: PPUSH
46909: LD_INT 25
46911: PUSH
46912: LD_INT 12
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PPUSH
46919: CALL_OW 72
46923: PUSH
46924: FOR_IN
46925: IFFALSE 46979
// if not IsInUnit ( j ) and not HasTask ( j ) then
46927: LD_VAR 0 3
46931: PPUSH
46932: CALL_OW 310
46936: NOT
46937: PUSH
46938: LD_VAR 0 3
46942: PPUSH
46943: CALL_OW 314
46947: NOT
46948: AND
46949: IFFALSE 46977
// begin ComEnterUnit ( j , selected ) ;
46951: LD_VAR 0 3
46955: PPUSH
46956: LD_VAR 0 7
46960: PPUSH
46961: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
46965: LD_VAR 0 3
46969: PPUSH
46970: LD_INT 15
46972: PPUSH
46973: CALL_OW 183
// end ;
46977: GO 46924
46979: POP
46980: POP
// end ; end ; end ; end ; end ;
46981: GO 46405
46983: POP
46984: POP
// end ;
46985: LD_VAR 0 1
46989: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
46990: LD_INT 0
46992: PPUSH
46993: PPUSH
46994: PPUSH
46995: PPUSH
46996: PPUSH
46997: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] then
46998: LD_VAR 0 1
47002: NOT
47003: PUSH
47004: LD_VAR 0 2
47008: NOT
47009: OR
47010: PUSH
47011: LD_VAR 0 3
47015: NOT
47016: OR
47017: PUSH
47018: LD_VAR 0 4
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: LD_INT 3
47031: PUSH
47032: LD_INT 4
47034: PUSH
47035: LD_INT 5
47037: PUSH
47038: LD_INT 8
47040: PUSH
47041: LD_INT 9
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: IN
47053: NOT
47054: OR
47055: IFFALSE 47059
// exit ;
47057: GO 47928
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
47059: LD_ADDR_VAR 0 2
47063: PUSH
47064: LD_VAR 0 2
47068: PPUSH
47069: LD_INT 21
47071: PUSH
47072: LD_INT 3
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 24
47081: PUSH
47082: LD_INT 250
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PPUSH
47093: CALL_OW 72
47097: ST_TO_ADDR
// case class of 1 :
47098: LD_VAR 0 4
47102: PUSH
47103: LD_INT 1
47105: DOUBLE
47106: EQUAL
47107: IFTRUE 47111
47109: GO 47196
47111: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
47112: LD_ADDR_VAR 0 8
47116: PUSH
47117: LD_VAR 0 2
47121: PPUSH
47122: LD_INT 2
47124: PUSH
47125: LD_INT 30
47127: PUSH
47128: LD_INT 32
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 30
47137: PUSH
47138: LD_INT 31
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: LIST
47149: PPUSH
47150: CALL_OW 72
47154: PUSH
47155: LD_VAR 0 2
47159: PPUSH
47160: LD_INT 2
47162: PUSH
47163: LD_INT 30
47165: PUSH
47166: LD_INT 4
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 30
47175: PUSH
47176: LD_INT 5
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: LIST
47187: PPUSH
47188: CALL_OW 72
47192: ADD
47193: ST_TO_ADDR
47194: GO 47436
47196: LD_INT 2
47198: DOUBLE
47199: EQUAL
47200: IFTRUE 47204
47202: GO 47250
47204: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
47205: LD_ADDR_VAR 0 8
47209: PUSH
47210: LD_VAR 0 2
47214: PPUSH
47215: LD_INT 2
47217: PUSH
47218: LD_INT 30
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 30
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: LIST
47242: PPUSH
47243: CALL_OW 72
47247: ST_TO_ADDR
47248: GO 47436
47250: LD_INT 3
47252: DOUBLE
47253: EQUAL
47254: IFTRUE 47258
47256: GO 47304
47258: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
47259: LD_ADDR_VAR 0 8
47263: PUSH
47264: LD_VAR 0 2
47268: PPUSH
47269: LD_INT 2
47271: PUSH
47272: LD_INT 30
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 30
47284: PUSH
47285: LD_INT 3
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: LIST
47296: PPUSH
47297: CALL_OW 72
47301: ST_TO_ADDR
47302: GO 47436
47304: LD_INT 4
47306: DOUBLE
47307: EQUAL
47308: IFTRUE 47312
47310: GO 47369
47312: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
47313: LD_ADDR_VAR 0 8
47317: PUSH
47318: LD_VAR 0 2
47322: PPUSH
47323: LD_INT 2
47325: PUSH
47326: LD_INT 30
47328: PUSH
47329: LD_INT 6
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 30
47338: PUSH
47339: LD_INT 7
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 30
47348: PUSH
47349: LD_INT 8
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: PPUSH
47362: CALL_OW 72
47366: ST_TO_ADDR
47367: GO 47436
47369: LD_INT 5
47371: DOUBLE
47372: EQUAL
47373: IFTRUE 47389
47375: LD_INT 8
47377: DOUBLE
47378: EQUAL
47379: IFTRUE 47389
47381: LD_INT 9
47383: DOUBLE
47384: EQUAL
47385: IFTRUE 47389
47387: GO 47435
47389: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
47390: LD_ADDR_VAR 0 8
47394: PUSH
47395: LD_VAR 0 2
47399: PPUSH
47400: LD_INT 2
47402: PUSH
47403: LD_INT 30
47405: PUSH
47406: LD_INT 4
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 30
47415: PUSH
47416: LD_INT 5
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: LIST
47427: PPUSH
47428: CALL_OW 72
47432: ST_TO_ADDR
47433: GO 47436
47435: POP
// if not tmp then
47436: LD_VAR 0 8
47440: NOT
47441: IFFALSE 47445
// exit ;
47443: GO 47928
// if class = 1 and mc_empty_turret_list [ base ] then
47445: LD_VAR 0 4
47449: PUSH
47450: LD_INT 1
47452: EQUAL
47453: PUSH
47454: LD_EXP 14
47458: PUSH
47459: LD_VAR 0 1
47463: ARRAY
47464: AND
47465: IFFALSE 47621
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
47467: LD_ADDR_VAR 0 9
47471: PUSH
47472: LD_EXP 14
47476: PUSH
47477: LD_VAR 0 1
47481: ARRAY
47482: PUSH
47483: LD_INT 1
47485: ARRAY
47486: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
47487: LD_VAR 0 9
47491: PUSH
47492: LD_EXP 15
47496: PUSH
47497: LD_VAR 0 1
47501: ARRAY
47502: IN
47503: NOT
47504: IFFALSE 47619
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
47506: LD_ADDR_EXP 15
47510: PUSH
47511: LD_EXP 15
47515: PPUSH
47516: LD_VAR 0 1
47520: PUSH
47521: LD_EXP 15
47525: PUSH
47526: LD_VAR 0 1
47530: ARRAY
47531: PUSH
47532: LD_INT 1
47534: PLUS
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PPUSH
47540: LD_VAR 0 9
47544: PPUSH
47545: CALL 6693 0 3
47549: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
47550: LD_ADDR_EXP 14
47554: PUSH
47555: LD_EXP 14
47559: PPUSH
47560: LD_VAR 0 1
47564: PPUSH
47565: LD_EXP 14
47569: PUSH
47570: LD_VAR 0 1
47574: ARRAY
47575: PUSH
47576: LD_VAR 0 9
47580: DIFF
47581: PPUSH
47582: CALL_OW 1
47586: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
47587: LD_VAR 0 3
47591: PPUSH
47592: LD_EXP 15
47596: PUSH
47597: LD_VAR 0 1
47601: ARRAY
47602: PUSH
47603: LD_EXP 15
47607: PUSH
47608: LD_VAR 0 1
47612: ARRAY
47613: ARRAY
47614: PPUSH
47615: CALL_OW 120
// end ; exit ;
47619: GO 47928
// end ; if tmp > 1 then
47621: LD_VAR 0 8
47625: PUSH
47626: LD_INT 1
47628: GREATER
47629: IFFALSE 47733
// for i = 2 to tmp do
47631: LD_ADDR_VAR 0 6
47635: PUSH
47636: DOUBLE
47637: LD_INT 2
47639: DEC
47640: ST_TO_ADDR
47641: LD_VAR 0 8
47645: PUSH
47646: FOR_TO
47647: IFFALSE 47731
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
47649: LD_VAR 0 8
47653: PUSH
47654: LD_VAR 0 6
47658: ARRAY
47659: PPUSH
47660: CALL_OW 461
47664: PUSH
47665: LD_INT 6
47667: EQUAL
47668: IFFALSE 47729
// begin x := tmp [ i ] ;
47670: LD_ADDR_VAR 0 9
47674: PUSH
47675: LD_VAR 0 8
47679: PUSH
47680: LD_VAR 0 6
47684: ARRAY
47685: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
47686: LD_ADDR_VAR 0 8
47690: PUSH
47691: LD_VAR 0 8
47695: PPUSH
47696: LD_VAR 0 6
47700: PPUSH
47701: CALL_OW 3
47705: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
47706: LD_ADDR_VAR 0 8
47710: PUSH
47711: LD_VAR 0 8
47715: PPUSH
47716: LD_INT 1
47718: PPUSH
47719: LD_VAR 0 9
47723: PPUSH
47724: CALL_OW 2
47728: ST_TO_ADDR
// end ;
47729: GO 47646
47731: POP
47732: POP
// for i in tmp do
47733: LD_ADDR_VAR 0 6
47737: PUSH
47738: LD_VAR 0 8
47742: PUSH
47743: FOR_IN
47744: IFFALSE 47813
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
47746: LD_VAR 0 6
47750: PPUSH
47751: CALL_OW 313
47755: PUSH
47756: LD_INT 6
47758: LESS
47759: PUSH
47760: LD_VAR 0 6
47764: PPUSH
47765: CALL_OW 266
47769: PUSH
47770: LD_INT 31
47772: PUSH
47773: LD_INT 32
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: IN
47780: NOT
47781: AND
47782: PUSH
47783: LD_VAR 0 6
47787: PPUSH
47788: CALL_OW 313
47792: PUSH
47793: LD_INT 0
47795: EQUAL
47796: OR
47797: IFFALSE 47811
// begin j := i ;
47799: LD_ADDR_VAR 0 7
47803: PUSH
47804: LD_VAR 0 6
47808: ST_TO_ADDR
// break ;
47809: GO 47813
// end ; end ;
47811: GO 47743
47813: POP
47814: POP
// if j then
47815: LD_VAR 0 7
47819: IFFALSE 47837
// ComEnterUnit ( unit , j ) else
47821: LD_VAR 0 3
47825: PPUSH
47826: LD_VAR 0 7
47830: PPUSH
47831: CALL_OW 120
47835: GO 47928
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
47837: LD_ADDR_VAR 0 10
47841: PUSH
47842: LD_VAR 0 2
47846: PPUSH
47847: LD_INT 2
47849: PUSH
47850: LD_INT 30
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 30
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: LIST
47874: PPUSH
47875: CALL_OW 72
47879: ST_TO_ADDR
// if depot then
47880: LD_VAR 0 10
47884: IFFALSE 47928
// begin if GetDistUnits ( unit , depot [ 1 ] ) > 10 then
47886: LD_VAR 0 3
47890: PPUSH
47891: LD_VAR 0 10
47895: PUSH
47896: LD_INT 1
47898: ARRAY
47899: PPUSH
47900: CALL_OW 296
47904: PUSH
47905: LD_INT 10
47907: GREATER
47908: IFFALSE 47928
// ComStandNearbyBuilding ( unit , depot [ 1 ] ) ;
47910: LD_VAR 0 3
47914: PPUSH
47915: LD_VAR 0 10
47919: PUSH
47920: LD_INT 1
47922: ARRAY
47923: PPUSH
47924: CALL 1472 0 2
// end ; end ; end ;
47928: LD_VAR 0 5
47932: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
47933: LD_INT 0
47935: PPUSH
47936: PPUSH
47937: PPUSH
47938: PPUSH
// if not mc_bases then
47939: LD_EXP 5
47943: NOT
47944: IFFALSE 47948
// exit ;
47946: GO 48175
// for i = 1 to mc_bases do
47948: LD_ADDR_VAR 0 2
47952: PUSH
47953: DOUBLE
47954: LD_INT 1
47956: DEC
47957: ST_TO_ADDR
47958: LD_EXP 5
47962: PUSH
47963: FOR_TO
47964: IFFALSE 48173
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
47966: LD_ADDR_VAR 0 4
47970: PUSH
47971: LD_EXP 5
47975: PUSH
47976: LD_VAR 0 2
47980: ARRAY
47981: PPUSH
47982: LD_INT 21
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PPUSH
47992: CALL_OW 72
47996: ST_TO_ADDR
// if not tmp then
47997: LD_VAR 0 4
48001: NOT
48002: IFFALSE 48006
// continue ;
48004: GO 47963
// for j in tmp do
48006: LD_ADDR_VAR 0 3
48010: PUSH
48011: LD_VAR 0 4
48015: PUSH
48016: FOR_IN
48017: IFFALSE 48169
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
48019: LD_VAR 0 3
48023: PPUSH
48024: CALL_OW 110
48028: NOT
48029: PUSH
48030: LD_VAR 0 3
48034: PPUSH
48035: CALL_OW 314
48039: NOT
48040: AND
48041: PUSH
48042: LD_VAR 0 3
48046: PPUSH
48047: CALL_OW 311
48051: NOT
48052: AND
48053: PUSH
48054: LD_VAR 0 3
48058: PPUSH
48059: CALL_OW 310
48063: NOT
48064: AND
48065: PUSH
48066: LD_VAR 0 3
48070: PUSH
48071: LD_EXP 8
48075: PUSH
48076: LD_VAR 0 2
48080: ARRAY
48081: PUSH
48082: LD_INT 1
48084: ARRAY
48085: IN
48086: NOT
48087: AND
48088: PUSH
48089: LD_VAR 0 3
48093: PUSH
48094: LD_EXP 8
48098: PUSH
48099: LD_VAR 0 2
48103: ARRAY
48104: PUSH
48105: LD_INT 2
48107: ARRAY
48108: IN
48109: NOT
48110: AND
48111: PUSH
48112: LD_VAR 0 3
48116: PUSH
48117: LD_EXP 17
48121: PUSH
48122: LD_VAR 0 2
48126: ARRAY
48127: IN
48128: NOT
48129: AND
48130: IFFALSE 48167
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
48132: LD_VAR 0 2
48136: PPUSH
48137: LD_EXP 5
48141: PUSH
48142: LD_VAR 0 2
48146: ARRAY
48147: PPUSH
48148: LD_VAR 0 3
48152: PPUSH
48153: LD_VAR 0 3
48157: PPUSH
48158: CALL_OW 257
48162: PPUSH
48163: CALL 46990 0 4
// end ;
48167: GO 48016
48169: POP
48170: POP
// end ;
48171: GO 47963
48173: POP
48174: POP
// end ;
48175: LD_VAR 0 1
48179: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
48180: LD_INT 0
48182: PPUSH
48183: PPUSH
48184: PPUSH
48185: PPUSH
48186: PPUSH
48187: PPUSH
// if not mc_bases [ base ] then
48188: LD_EXP 5
48192: PUSH
48193: LD_VAR 0 1
48197: ARRAY
48198: NOT
48199: IFFALSE 48203
// exit ;
48201: GO 48385
// tmp := [ ] ;
48203: LD_ADDR_VAR 0 6
48207: PUSH
48208: EMPTY
48209: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
48210: LD_ADDR_VAR 0 7
48214: PUSH
48215: LD_VAR 0 3
48219: PPUSH
48220: LD_INT 0
48222: PPUSH
48223: CALL_OW 517
48227: ST_TO_ADDR
// if not list then
48228: LD_VAR 0 7
48232: NOT
48233: IFFALSE 48237
// exit ;
48235: GO 48385
// for i = 1 to amount do
48237: LD_ADDR_VAR 0 5
48241: PUSH
48242: DOUBLE
48243: LD_INT 1
48245: DEC
48246: ST_TO_ADDR
48247: LD_VAR 0 2
48251: PUSH
48252: FOR_TO
48253: IFFALSE 48333
// begin x := rand ( 1 , list [ 1 ] ) ;
48255: LD_ADDR_VAR 0 8
48259: PUSH
48260: LD_INT 1
48262: PPUSH
48263: LD_VAR 0 7
48267: PUSH
48268: LD_INT 1
48270: ARRAY
48271: PPUSH
48272: CALL_OW 12
48276: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
48277: LD_ADDR_VAR 0 6
48281: PUSH
48282: LD_VAR 0 6
48286: PPUSH
48287: LD_VAR 0 5
48291: PPUSH
48292: LD_VAR 0 7
48296: PUSH
48297: LD_INT 1
48299: ARRAY
48300: PUSH
48301: LD_VAR 0 8
48305: ARRAY
48306: PUSH
48307: LD_VAR 0 7
48311: PUSH
48312: LD_INT 2
48314: ARRAY
48315: PUSH
48316: LD_VAR 0 8
48320: ARRAY
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PPUSH
48326: CALL_OW 1
48330: ST_TO_ADDR
// end ;
48331: GO 48252
48333: POP
48334: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
48335: LD_ADDR_EXP 18
48339: PUSH
48340: LD_EXP 18
48344: PPUSH
48345: LD_VAR 0 1
48349: PPUSH
48350: LD_VAR 0 6
48354: PPUSH
48355: CALL_OW 1
48359: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
48360: LD_ADDR_EXP 20
48364: PUSH
48365: LD_EXP 20
48369: PPUSH
48370: LD_VAR 0 1
48374: PPUSH
48375: LD_VAR 0 3
48379: PPUSH
48380: CALL_OW 1
48384: ST_TO_ADDR
// end ;
48385: LD_VAR 0 4
48389: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
48390: LD_INT 0
48392: PPUSH
// if not mc_bases [ base ] then
48393: LD_EXP 5
48397: PUSH
48398: LD_VAR 0 1
48402: ARRAY
48403: NOT
48404: IFFALSE 48408
// exit ;
48406: GO 48433
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
48408: LD_ADDR_EXP 10
48412: PUSH
48413: LD_EXP 10
48417: PPUSH
48418: LD_VAR 0 1
48422: PPUSH
48423: LD_VAR 0 2
48427: PPUSH
48428: CALL_OW 1
48432: ST_TO_ADDR
// end ;
48433: LD_VAR 0 3
48437: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
48438: LD_INT 0
48440: PPUSH
// if not mc_bases [ base ] then
48441: LD_EXP 5
48445: PUSH
48446: LD_VAR 0 1
48450: ARRAY
48451: NOT
48452: IFFALSE 48456
// exit ;
48454: GO 48481
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
48456: LD_ADDR_EXP 25
48460: PUSH
48461: LD_EXP 25
48465: PPUSH
48466: LD_VAR 0 1
48470: PPUSH
48471: LD_VAR 0 2
48475: PPUSH
48476: CALL_OW 1
48480: ST_TO_ADDR
// end ;
48481: LD_VAR 0 3
48485: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
48486: LD_INT 0
48488: PPUSH
// if not mc_bases [ base ] then
48489: LD_EXP 5
48493: PUSH
48494: LD_VAR 0 1
48498: ARRAY
48499: NOT
48500: IFFALSE 48504
// exit ;
48502: GO 48544
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
48504: LD_ADDR_EXP 25
48508: PUSH
48509: LD_EXP 25
48513: PPUSH
48514: LD_VAR 0 1
48518: PPUSH
48519: LD_EXP 25
48523: PUSH
48524: LD_VAR 0 1
48528: ARRAY
48529: PUSH
48530: LD_VAR 0 2
48534: PUSH
48535: EMPTY
48536: LIST
48537: ADD
48538: PPUSH
48539: CALL_OW 1
48543: ST_TO_ADDR
// end ;
48544: LD_VAR 0 3
48548: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
48549: LD_INT 0
48551: PPUSH
// if not mc_bases [ base ] then
48552: LD_EXP 5
48556: PUSH
48557: LD_VAR 0 1
48561: ARRAY
48562: NOT
48563: IFFALSE 48567
// exit ;
48565: GO 48679
// mc_defender := Replace ( mc_defender , base , deflist ) ;
48567: LD_ADDR_EXP 26
48571: PUSH
48572: LD_EXP 26
48576: PPUSH
48577: LD_VAR 0 1
48581: PPUSH
48582: LD_VAR 0 2
48586: PPUSH
48587: CALL_OW 1
48591: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
48592: LD_ADDR_EXP 16
48596: PUSH
48597: LD_EXP 16
48601: PPUSH
48602: LD_VAR 0 1
48606: PPUSH
48607: LD_VAR 0 2
48611: PUSH
48612: LD_INT 0
48614: PLUS
48615: PPUSH
48616: CALL_OW 1
48620: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
48621: LD_ADDR_EXP 23
48625: PUSH
48626: LD_EXP 23
48630: PPUSH
48631: LD_VAR 0 1
48635: PPUSH
48636: LD_EXP 23
48640: PUSH
48641: LD_VAR 0 1
48645: ARRAY
48646: PUSH
48647: LD_EXP 26
48651: PUSH
48652: LD_VAR 0 1
48656: ARRAY
48657: PPUSH
48658: LD_INT 21
48660: PUSH
48661: LD_INT 2
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PPUSH
48668: CALL_OW 72
48672: UNION
48673: PPUSH
48674: CALL_OW 1
48678: ST_TO_ADDR
// end ;
48679: LD_VAR 0 3
48683: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
48684: LD_INT 0
48686: PPUSH
48687: PPUSH
48688: PPUSH
48689: PPUSH
// if not mc_bases [ base ] then
48690: LD_EXP 5
48694: PUSH
48695: LD_VAR 0 1
48699: ARRAY
48700: NOT
48701: IFFALSE 48705
// exit ;
48703: GO 48770
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
48705: LD_ADDR_EXP 24
48709: PUSH
48710: LD_EXP 24
48714: PPUSH
48715: LD_VAR 0 1
48719: PUSH
48720: LD_EXP 24
48724: PUSH
48725: LD_VAR 0 1
48729: ARRAY
48730: PUSH
48731: LD_INT 1
48733: PLUS
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PPUSH
48739: LD_VAR 0 1
48743: PUSH
48744: LD_VAR 0 2
48748: PUSH
48749: LD_VAR 0 3
48753: PUSH
48754: LD_VAR 0 4
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: PPUSH
48765: CALL 6693 0 3
48769: ST_TO_ADDR
// end ;
48770: LD_VAR 0 5
48774: RET
// export function MC_GetMinesField ( base ) ; begin
48775: LD_INT 0
48777: PPUSH
// result := mc_mines [ base ] ;
48778: LD_ADDR_VAR 0 2
48782: PUSH
48783: LD_EXP 18
48787: PUSH
48788: LD_VAR 0 1
48792: ARRAY
48793: ST_TO_ADDR
// end ;
48794: LD_VAR 0 2
48798: RET
// export function MC_GetProduceList ( base ) ; begin
48799: LD_INT 0
48801: PPUSH
// result := mc_produce [ base ] ;
48802: LD_ADDR_VAR 0 2
48806: PUSH
48807: LD_EXP 25
48811: PUSH
48812: LD_VAR 0 1
48816: ARRAY
48817: ST_TO_ADDR
// end ;
48818: LD_VAR 0 2
48822: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
48823: LD_INT 0
48825: PPUSH
48826: PPUSH
// if not mc_bases then
48827: LD_EXP 5
48831: NOT
48832: IFFALSE 48836
// exit ;
48834: GO 48901
// if mc_bases [ base ] then
48836: LD_EXP 5
48840: PUSH
48841: LD_VAR 0 1
48845: ARRAY
48846: IFFALSE 48901
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
48848: LD_ADDR_VAR 0 3
48852: PUSH
48853: LD_EXP 5
48857: PUSH
48858: LD_VAR 0 1
48862: ARRAY
48863: PPUSH
48864: LD_INT 30
48866: PUSH
48867: LD_VAR 0 2
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PPUSH
48876: CALL_OW 72
48880: ST_TO_ADDR
// if result then
48881: LD_VAR 0 3
48885: IFFALSE 48901
// result := result [ 1 ] ;
48887: LD_ADDR_VAR 0 3
48891: PUSH
48892: LD_VAR 0 3
48896: PUSH
48897: LD_INT 1
48899: ARRAY
48900: ST_TO_ADDR
// end ; end ;
48901: LD_VAR 0 3
48905: RET
// export function MC_SetTame ( base , area ) ; begin
48906: LD_INT 0
48908: PPUSH
// if not mc_bases or not base then
48909: LD_EXP 5
48913: NOT
48914: PUSH
48915: LD_VAR 0 1
48919: NOT
48920: OR
48921: IFFALSE 48925
// exit ;
48923: GO 48950
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
48925: LD_ADDR_EXP 32
48929: PUSH
48930: LD_EXP 32
48934: PPUSH
48935: LD_VAR 0 1
48939: PPUSH
48940: LD_VAR 0 2
48944: PPUSH
48945: CALL_OW 1
48949: ST_TO_ADDR
// end ; end_of_file
48950: LD_VAR 0 3
48954: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
48955: LD_INT 0
48957: PPUSH
48958: PPUSH
48959: PPUSH
// if not mc_bases then
48960: LD_EXP 5
48964: NOT
48965: IFFALSE 48969
// exit ;
48967: GO 49134
// for i = 1 to mc_bases do
48969: LD_ADDR_VAR 0 4
48973: PUSH
48974: DOUBLE
48975: LD_INT 1
48977: DEC
48978: ST_TO_ADDR
48979: LD_EXP 5
48983: PUSH
48984: FOR_TO
48985: IFFALSE 49132
// begin if sci in mc_bases [ i ] then
48987: LD_VAR 0 2
48991: PUSH
48992: LD_EXP 5
48996: PUSH
48997: LD_VAR 0 4
49001: ARRAY
49002: IN
49003: IFFALSE 49130
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
49005: LD_ADDR_EXP 33
49009: PUSH
49010: LD_EXP 33
49014: PPUSH
49015: LD_VAR 0 4
49019: PUSH
49020: LD_EXP 33
49024: PUSH
49025: LD_VAR 0 4
49029: ARRAY
49030: PUSH
49031: LD_INT 1
49033: PLUS
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PPUSH
49039: LD_VAR 0 1
49043: PPUSH
49044: CALL 6693 0 3
49048: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
49049: LD_ADDR_VAR 0 5
49053: PUSH
49054: LD_EXP 5
49058: PUSH
49059: LD_VAR 0 4
49063: ARRAY
49064: PPUSH
49065: LD_INT 2
49067: PUSH
49068: LD_INT 30
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 30
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: LIST
49092: PPUSH
49093: CALL_OW 72
49097: PPUSH
49098: LD_VAR 0 1
49102: PPUSH
49103: CALL_OW 74
49107: ST_TO_ADDR
// if tmp then
49108: LD_VAR 0 5
49112: IFFALSE 49128
// ComStandNearbyBuilding ( ape , tmp ) ;
49114: LD_VAR 0 1
49118: PPUSH
49119: LD_VAR 0 5
49123: PPUSH
49124: CALL 1472 0 2
// break ;
49128: GO 49132
// end ; end ;
49130: GO 48984
49132: POP
49133: POP
// end ;
49134: LD_VAR 0 3
49138: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
49139: LD_INT 0
49141: PPUSH
49142: PPUSH
49143: PPUSH
// if not mc_bases then
49144: LD_EXP 5
49148: NOT
49149: IFFALSE 49153
// exit ;
49151: GO 49242
// for i = 1 to mc_bases do
49153: LD_ADDR_VAR 0 4
49157: PUSH
49158: DOUBLE
49159: LD_INT 1
49161: DEC
49162: ST_TO_ADDR
49163: LD_EXP 5
49167: PUSH
49168: FOR_TO
49169: IFFALSE 49240
// begin if building in mc_busy_turret_list [ i ] then
49171: LD_VAR 0 1
49175: PUSH
49176: LD_EXP 15
49180: PUSH
49181: LD_VAR 0 4
49185: ARRAY
49186: IN
49187: IFFALSE 49238
// begin tmp := mc_busy_turret_list [ i ] diff building ;
49189: LD_ADDR_VAR 0 5
49193: PUSH
49194: LD_EXP 15
49198: PUSH
49199: LD_VAR 0 4
49203: ARRAY
49204: PUSH
49205: LD_VAR 0 1
49209: DIFF
49210: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
49211: LD_ADDR_EXP 15
49215: PUSH
49216: LD_EXP 15
49220: PPUSH
49221: LD_VAR 0 4
49225: PPUSH
49226: LD_VAR 0 5
49230: PPUSH
49231: CALL_OW 1
49235: ST_TO_ADDR
// break ;
49236: GO 49240
// end ; end ;
49238: GO 49168
49240: POP
49241: POP
// end ;
49242: LD_VAR 0 3
49246: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
49247: LD_INT 0
49249: PPUSH
49250: PPUSH
49251: PPUSH
// if not mc_bases then
49252: LD_EXP 5
49256: NOT
49257: IFFALSE 49261
// exit ;
49259: GO 49460
// for i = 1 to mc_bases do
49261: LD_ADDR_VAR 0 5
49265: PUSH
49266: DOUBLE
49267: LD_INT 1
49269: DEC
49270: ST_TO_ADDR
49271: LD_EXP 5
49275: PUSH
49276: FOR_TO
49277: IFFALSE 49458
// if building in mc_bases [ i ] then
49279: LD_VAR 0 1
49283: PUSH
49284: LD_EXP 5
49288: PUSH
49289: LD_VAR 0 5
49293: ARRAY
49294: IN
49295: IFFALSE 49456
// begin tmp := mc_bases [ i ] diff building ;
49297: LD_ADDR_VAR 0 6
49301: PUSH
49302: LD_EXP 5
49306: PUSH
49307: LD_VAR 0 5
49311: ARRAY
49312: PUSH
49313: LD_VAR 0 1
49317: DIFF
49318: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
49319: LD_ADDR_EXP 5
49323: PUSH
49324: LD_EXP 5
49328: PPUSH
49329: LD_VAR 0 5
49333: PPUSH
49334: LD_VAR 0 6
49338: PPUSH
49339: CALL_OW 1
49343: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
49344: LD_VAR 0 1
49348: PUSH
49349: LD_EXP 13
49353: PUSH
49354: LD_VAR 0 5
49358: ARRAY
49359: IN
49360: IFFALSE 49399
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
49362: LD_ADDR_EXP 13
49366: PUSH
49367: LD_EXP 13
49371: PPUSH
49372: LD_VAR 0 5
49376: PPUSH
49377: LD_EXP 13
49381: PUSH
49382: LD_VAR 0 5
49386: ARRAY
49387: PUSH
49388: LD_VAR 0 1
49392: DIFF
49393: PPUSH
49394: CALL_OW 1
49398: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
49399: LD_VAR 0 1
49403: PUSH
49404: LD_EXP 14
49408: PUSH
49409: LD_VAR 0 5
49413: ARRAY
49414: IN
49415: IFFALSE 49454
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
49417: LD_ADDR_EXP 14
49421: PUSH
49422: LD_EXP 14
49426: PPUSH
49427: LD_VAR 0 5
49431: PPUSH
49432: LD_EXP 14
49436: PUSH
49437: LD_VAR 0 5
49441: ARRAY
49442: PUSH
49443: LD_VAR 0 1
49447: DIFF
49448: PPUSH
49449: CALL_OW 1
49453: ST_TO_ADDR
// break ;
49454: GO 49458
// end ;
49456: GO 49276
49458: POP
49459: POP
// end ;
49460: LD_VAR 0 4
49464: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
49465: LD_INT 0
49467: PPUSH
49468: PPUSH
49469: PPUSH
// if not mc_bases or not side in mc_sides then
49470: LD_EXP 5
49474: NOT
49475: PUSH
49476: LD_VAR 0 3
49480: PUSH
49481: LD_EXP 30
49485: IN
49486: NOT
49487: OR
49488: IFFALSE 49492
// exit ;
49490: GO 49615
// for i = 1 to mc_vehicles do
49492: LD_ADDR_VAR 0 6
49496: PUSH
49497: DOUBLE
49498: LD_INT 1
49500: DEC
49501: ST_TO_ADDR
49502: LD_EXP 23
49506: PUSH
49507: FOR_TO
49508: IFFALSE 49613
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
49510: LD_VAR 0 2
49514: PUSH
49515: LD_EXP 23
49519: PUSH
49520: LD_VAR 0 6
49524: ARRAY
49525: IN
49526: PUSH
49527: LD_VAR 0 1
49531: PUSH
49532: LD_EXP 23
49536: PUSH
49537: LD_VAR 0 6
49541: ARRAY
49542: IN
49543: OR
49544: IFFALSE 49611
// begin tmp := mc_vehicles [ i ] diff old ;
49546: LD_ADDR_VAR 0 7
49550: PUSH
49551: LD_EXP 23
49555: PUSH
49556: LD_VAR 0 6
49560: ARRAY
49561: PUSH
49562: LD_VAR 0 2
49566: DIFF
49567: ST_TO_ADDR
// tmp := tmp diff new ;
49568: LD_ADDR_VAR 0 7
49572: PUSH
49573: LD_VAR 0 7
49577: PUSH
49578: LD_VAR 0 1
49582: DIFF
49583: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
49584: LD_ADDR_EXP 23
49588: PUSH
49589: LD_EXP 23
49593: PPUSH
49594: LD_VAR 0 6
49598: PPUSH
49599: LD_VAR 0 7
49603: PPUSH
49604: CALL_OW 1
49608: ST_TO_ADDR
// break ;
49609: GO 49613
// end ;
49611: GO 49507
49613: POP
49614: POP
// end ;
49615: LD_VAR 0 5
49619: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
49620: LD_INT 0
49622: PPUSH
49623: PPUSH
49624: PPUSH
49625: PPUSH
// if not mc_bases then
49626: LD_EXP 5
49630: NOT
49631: IFFALSE 49635
// exit ;
49633: GO 49927
// side := GetSide ( vehicle ) ;
49635: LD_ADDR_VAR 0 5
49639: PUSH
49640: LD_VAR 0 1
49644: PPUSH
49645: CALL_OW 255
49649: ST_TO_ADDR
// for i = 1 to mc_bases do
49650: LD_ADDR_VAR 0 4
49654: PUSH
49655: DOUBLE
49656: LD_INT 1
49658: DEC
49659: ST_TO_ADDR
49660: LD_EXP 5
49664: PUSH
49665: FOR_TO
49666: IFFALSE 49925
// begin if factory in mc_bases [ i ] then
49668: LD_VAR 0 2
49672: PUSH
49673: LD_EXP 5
49677: PUSH
49678: LD_VAR 0 4
49682: ARRAY
49683: IN
49684: IFFALSE 49923
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
49686: LD_EXP 26
49690: PUSH
49691: LD_VAR 0 4
49695: ARRAY
49696: PUSH
49697: LD_EXP 16
49701: PUSH
49702: LD_VAR 0 4
49706: ARRAY
49707: LESS
49708: IFFALSE 49879
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
49710: LD_ADDR_EXP 26
49714: PUSH
49715: LD_EXP 26
49719: PPUSH
49720: LD_VAR 0 4
49724: PPUSH
49725: LD_EXP 26
49729: PUSH
49730: LD_VAR 0 4
49734: ARRAY
49735: PUSH
49736: LD_VAR 0 1
49740: ADD
49741: PPUSH
49742: CALL_OW 1
49746: ST_TO_ADDR
// if not mc_scan [ i ] then
49747: LD_EXP 27
49751: PUSH
49752: LD_VAR 0 4
49756: ARRAY
49757: NOT
49758: IFFALSE 49877
// begin if GetControl ( vehicle ) = control_remote then
49760: LD_VAR 0 1
49764: PPUSH
49765: CALL_OW 263
49769: PUSH
49770: LD_INT 2
49772: EQUAL
49773: IFFALSE 49793
// repeat wait ( 0 0$1 ) ;
49775: LD_INT 35
49777: PPUSH
49778: CALL_OW 67
// until IsControledBy ( vehicle ) ;
49782: LD_VAR 0 1
49786: PPUSH
49787: CALL_OW 312
49791: IFFALSE 49775
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
49793: LD_VAR 0 1
49797: PPUSH
49798: LD_EXP 28
49802: PUSH
49803: LD_VAR 0 4
49807: ARRAY
49808: PPUSH
49809: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
49813: LD_VAR 0 1
49817: PPUSH
49818: CALL_OW 263
49822: PUSH
49823: LD_INT 1
49825: NONEQUAL
49826: IFFALSE 49830
// break ;
49828: GO 49925
// repeat wait ( 0 0$1 ) ;
49830: LD_INT 35
49832: PPUSH
49833: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
49837: LD_VAR 0 1
49841: PPUSH
49842: LD_EXP 28
49846: PUSH
49847: LD_VAR 0 4
49851: ARRAY
49852: PPUSH
49853: CALL_OW 308
49857: IFFALSE 49830
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
49859: LD_VAR 0 1
49863: PPUSH
49864: CALL_OW 311
49868: PPUSH
49869: CALL_OW 121
// exit ;
49873: POP
49874: POP
49875: GO 49927
// end ; end else
49877: GO 49923
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
49879: LD_ADDR_EXP 23
49883: PUSH
49884: LD_EXP 23
49888: PPUSH
49889: LD_VAR 0 4
49893: PUSH
49894: LD_EXP 23
49898: PUSH
49899: LD_VAR 0 4
49903: ARRAY
49904: PUSH
49905: LD_INT 1
49907: PLUS
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PPUSH
49913: LD_VAR 0 1
49917: PPUSH
49918: CALL 6693 0 3
49922: ST_TO_ADDR
// end ; end ;
49923: GO 49665
49925: POP
49926: POP
// end ;
49927: LD_VAR 0 3
49931: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , depot ; begin
49932: LD_INT 0
49934: PPUSH
49935: PPUSH
49936: PPUSH
// if not mc_bases then
49937: LD_EXP 5
49941: NOT
49942: IFFALSE 49946
// exit ;
49944: GO 50161
// repeat wait ( 0 0$1 ) ;
49946: LD_INT 35
49948: PPUSH
49949: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
49953: LD_VAR 0 2
49957: PPUSH
49958: LD_VAR 0 3
49962: PPUSH
49963: CALL_OW 284
49967: IFFALSE 49946
// if GetResourceTypeXY ( x , y ) = mat_artefact then
49969: LD_VAR 0 2
49973: PPUSH
49974: LD_VAR 0 3
49978: PPUSH
49979: CALL_OW 283
49983: PUSH
49984: LD_INT 4
49986: EQUAL
49987: IFFALSE 49991
// exit ;
49989: GO 50161
// for i = 1 to mc_bases do
49991: LD_ADDR_VAR 0 7
49995: PUSH
49996: DOUBLE
49997: LD_INT 1
49999: DEC
50000: ST_TO_ADDR
50001: LD_EXP 5
50005: PUSH
50006: FOR_TO
50007: IFFALSE 50159
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50009: LD_ADDR_VAR 0 8
50013: PUSH
50014: LD_EXP 5
50018: PUSH
50019: LD_VAR 0 7
50023: ARRAY
50024: PPUSH
50025: LD_INT 2
50027: PUSH
50028: LD_INT 30
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 30
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: LIST
50052: PPUSH
50053: CALL_OW 72
50057: ST_TO_ADDR
// if not depot then
50058: LD_VAR 0 8
50062: NOT
50063: IFFALSE 50067
// continue ;
50065: GO 50006
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
50067: LD_VAR 0 8
50071: PUSH
50072: LD_INT 1
50074: ARRAY
50075: PPUSH
50076: LD_VAR 0 2
50080: PPUSH
50081: LD_VAR 0 3
50085: PPUSH
50086: CALL_OW 297
50090: PUSH
50091: LD_INT 30
50093: LESS
50094: IFFALSE 50157
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
50096: LD_ADDR_EXP 21
50100: PUSH
50101: LD_EXP 21
50105: PPUSH
50106: LD_VAR 0 7
50110: PUSH
50111: LD_EXP 21
50115: PUSH
50116: LD_VAR 0 7
50120: ARRAY
50121: PUSH
50122: LD_INT 1
50124: PLUS
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PPUSH
50130: LD_VAR 0 4
50134: PUSH
50135: LD_VAR 0 2
50139: PUSH
50140: LD_VAR 0 3
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: LIST
50149: PPUSH
50150: CALL 6693 0 3
50154: ST_TO_ADDR
// break ;
50155: GO 50159
// end ; end ;
50157: GO 50006
50159: POP
50160: POP
// end ;
50161: LD_VAR 0 6
50165: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
50166: LD_INT 0
50168: PPUSH
50169: PPUSH
50170: PPUSH
50171: PPUSH
// side := GetSide ( lab ) ;
50172: LD_ADDR_VAR 0 4
50176: PUSH
50177: LD_VAR 0 2
50181: PPUSH
50182: CALL_OW 255
50186: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
50187: LD_VAR 0 4
50191: PUSH
50192: LD_EXP 30
50196: IN
50197: NOT
50198: PUSH
50199: LD_EXP 31
50203: NOT
50204: OR
50205: PUSH
50206: LD_EXP 5
50210: NOT
50211: OR
50212: IFFALSE 50216
// exit ;
50214: GO 50485
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
50216: LD_ADDR_EXP 31
50220: PUSH
50221: LD_EXP 31
50225: PPUSH
50226: LD_VAR 0 4
50230: PPUSH
50231: LD_EXP 31
50235: PUSH
50236: LD_VAR 0 4
50240: ARRAY
50241: PUSH
50242: LD_VAR 0 1
50246: DIFF
50247: PPUSH
50248: CALL_OW 1
50252: ST_TO_ADDR
// for i = 1 to mc_bases do
50253: LD_ADDR_VAR 0 5
50257: PUSH
50258: DOUBLE
50259: LD_INT 1
50261: DEC
50262: ST_TO_ADDR
50263: LD_EXP 5
50267: PUSH
50268: FOR_TO
50269: IFFALSE 50483
// begin if lab in mc_bases [ i ] then
50271: LD_VAR 0 2
50275: PUSH
50276: LD_EXP 5
50280: PUSH
50281: LD_VAR 0 5
50285: ARRAY
50286: IN
50287: IFFALSE 50481
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
50289: LD_VAR 0 1
50293: PUSH
50294: LD_INT 11
50296: PUSH
50297: LD_INT 4
50299: PUSH
50300: LD_INT 3
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: IN
50312: PUSH
50313: LD_EXP 34
50317: PUSH
50318: LD_VAR 0 5
50322: ARRAY
50323: AND
50324: IFFALSE 50481
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
50326: LD_ADDR_VAR 0 6
50330: PUSH
50331: LD_EXP 34
50335: PUSH
50336: LD_VAR 0 5
50340: ARRAY
50341: PUSH
50342: LD_INT 1
50344: ARRAY
50345: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
50346: LD_ADDR_EXP 34
50350: PUSH
50351: LD_EXP 34
50355: PPUSH
50356: LD_VAR 0 5
50360: PPUSH
50361: EMPTY
50362: PPUSH
50363: CALL_OW 1
50367: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
50368: LD_VAR 0 6
50372: PPUSH
50373: LD_INT 0
50375: PPUSH
50376: CALL_OW 109
// ComExitBuilding ( tmp ) ;
50380: LD_VAR 0 6
50384: PPUSH
50385: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
50389: LD_ADDR_EXP 33
50393: PUSH
50394: LD_EXP 33
50398: PPUSH
50399: LD_VAR 0 5
50403: PPUSH
50404: LD_EXP 33
50408: PUSH
50409: LD_VAR 0 5
50413: ARRAY
50414: PPUSH
50415: LD_INT 1
50417: PPUSH
50418: LD_VAR 0 6
50422: PPUSH
50423: CALL_OW 2
50427: PPUSH
50428: CALL_OW 1
50432: ST_TO_ADDR
// if not mc_tech [ side ] [ 1 ] in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] then
50433: LD_EXP 31
50437: PUSH
50438: LD_VAR 0 4
50442: ARRAY
50443: PUSH
50444: LD_INT 1
50446: ARRAY
50447: PUSH
50448: LD_INT 11
50450: PUSH
50451: LD_INT 4
50453: PUSH
50454: LD_INT 3
50456: PUSH
50457: LD_INT 2
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: IN
50466: NOT
50467: IFFALSE 50481
// MC_Reset ( i , 112 ) ;
50469: LD_VAR 0 5
50473: PPUSH
50474: LD_INT 112
50476: PPUSH
50477: CALL 38246 0 2
// end ; end ; end ;
50481: GO 50268
50483: POP
50484: POP
// end ;
50485: LD_VAR 0 3
50489: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
50490: LD_INT 0
50492: PPUSH
50493: PPUSH
50494: PPUSH
50495: PPUSH
50496: PPUSH
50497: PPUSH
50498: PPUSH
50499: PPUSH
// if not mc_bases then
50500: LD_EXP 5
50504: NOT
50505: IFFALSE 50509
// exit ;
50507: GO 51434
// for i = 1 to mc_bases do
50509: LD_ADDR_VAR 0 3
50513: PUSH
50514: DOUBLE
50515: LD_INT 1
50517: DEC
50518: ST_TO_ADDR
50519: LD_EXP 5
50523: PUSH
50524: FOR_TO
50525: IFFALSE 51432
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
50527: LD_VAR 0 1
50531: PUSH
50532: LD_EXP 5
50536: PUSH
50537: LD_VAR 0 3
50541: ARRAY
50542: IN
50543: PUSH
50544: LD_VAR 0 1
50548: PUSH
50549: LD_EXP 12
50553: PUSH
50554: LD_VAR 0 3
50558: ARRAY
50559: IN
50560: OR
50561: PUSH
50562: LD_VAR 0 1
50566: PUSH
50567: LD_EXP 23
50571: PUSH
50572: LD_VAR 0 3
50576: ARRAY
50577: IN
50578: OR
50579: PUSH
50580: LD_VAR 0 1
50584: PUSH
50585: LD_EXP 33
50589: PUSH
50590: LD_VAR 0 3
50594: ARRAY
50595: IN
50596: OR
50597: PUSH
50598: LD_VAR 0 1
50602: PUSH
50603: LD_EXP 34
50607: PUSH
50608: LD_VAR 0 3
50612: ARRAY
50613: IN
50614: OR
50615: IFFALSE 51430
// begin if un in mc_ape [ i ] then
50617: LD_VAR 0 1
50621: PUSH
50622: LD_EXP 33
50626: PUSH
50627: LD_VAR 0 3
50631: ARRAY
50632: IN
50633: IFFALSE 50672
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
50635: LD_ADDR_EXP 33
50639: PUSH
50640: LD_EXP 33
50644: PPUSH
50645: LD_VAR 0 3
50649: PPUSH
50650: LD_EXP 33
50654: PUSH
50655: LD_VAR 0 3
50659: ARRAY
50660: PUSH
50661: LD_VAR 0 1
50665: DIFF
50666: PPUSH
50667: CALL_OW 1
50671: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
50672: LD_VAR 0 1
50676: PUSH
50677: LD_EXP 34
50681: PUSH
50682: LD_VAR 0 3
50686: ARRAY
50687: IN
50688: IFFALSE 50712
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
50690: LD_ADDR_EXP 34
50694: PUSH
50695: LD_EXP 34
50699: PPUSH
50700: LD_VAR 0 3
50704: PPUSH
50705: EMPTY
50706: PPUSH
50707: CALL_OW 1
50711: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
50712: LD_VAR 0 1
50716: PPUSH
50717: CALL_OW 247
50721: PUSH
50722: LD_INT 2
50724: EQUAL
50725: PUSH
50726: LD_VAR 0 1
50730: PPUSH
50731: CALL_OW 110
50735: PUSH
50736: LD_INT 20
50738: EQUAL
50739: AND
50740: IFFALSE 50843
// begin fac := MC_GetBuilding ( i , b_factory ) ;
50742: LD_ADDR_VAR 0 8
50746: PUSH
50747: LD_VAR 0 3
50751: PPUSH
50752: LD_INT 3
50754: PPUSH
50755: CALL 48823 0 2
50759: ST_TO_ADDR
// if fac then
50760: LD_VAR 0 8
50764: IFFALSE 50843
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
50766: LD_ADDR_VAR 0 9
50770: PUSH
50771: LD_VAR 0 8
50775: PPUSH
50776: LD_VAR 0 1
50780: PPUSH
50781: CALL_OW 265
50785: PPUSH
50786: LD_VAR 0 1
50790: PPUSH
50791: CALL_OW 262
50795: PPUSH
50796: LD_VAR 0 1
50800: PPUSH
50801: CALL_OW 263
50805: PPUSH
50806: LD_VAR 0 1
50810: PPUSH
50811: CALL_OW 264
50815: PPUSH
50816: CALL 3858 0 5
50820: ST_TO_ADDR
// if components then
50821: LD_VAR 0 9
50825: IFFALSE 50841
// MC_InsertProduceList ( i , components ) ;
50827: LD_VAR 0 3
50831: PPUSH
50832: LD_VAR 0 9
50836: PPUSH
50837: CALL 48486 0 2
// break ;
50841: GO 51432
// end ; end ; if GetType ( un ) = unit_building then
50843: LD_VAR 0 1
50847: PPUSH
50848: CALL_OW 247
50852: PUSH
50853: LD_INT 3
50855: EQUAL
50856: IFFALSE 51153
// begin btype := GetBType ( un ) ;
50858: LD_ADDR_VAR 0 5
50862: PUSH
50863: LD_VAR 0 1
50867: PPUSH
50868: CALL_OW 266
50872: ST_TO_ADDR
// if btype = b_warehouse then
50873: LD_VAR 0 5
50877: PUSH
50878: LD_INT 1
50880: EQUAL
50881: IFFALSE 50899
// begin btype := b_depot ;
50883: LD_ADDR_VAR 0 5
50887: PUSH
50888: LD_INT 0
50890: ST_TO_ADDR
// pos := 1 ;
50891: LD_ADDR_VAR 0 6
50895: PUSH
50896: LD_INT 1
50898: ST_TO_ADDR
// end ; if btype = b_factory then
50899: LD_VAR 0 5
50903: PUSH
50904: LD_INT 3
50906: EQUAL
50907: IFFALSE 50925
// begin btype := b_workshop ;
50909: LD_ADDR_VAR 0 5
50913: PUSH
50914: LD_INT 2
50916: ST_TO_ADDR
// pos := 1 ;
50917: LD_ADDR_VAR 0 6
50921: PUSH
50922: LD_INT 1
50924: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
50925: LD_VAR 0 5
50929: PUSH
50930: LD_INT 7
50932: PUSH
50933: LD_INT 8
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: IN
50940: IFFALSE 50950
// btype := b_lab ;
50942: LD_ADDR_VAR 0 5
50946: PUSH
50947: LD_INT 6
50949: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
50950: LD_ADDR_EXP 10
50954: PUSH
50955: LD_EXP 10
50959: PPUSH
50960: LD_VAR 0 3
50964: PUSH
50965: LD_EXP 10
50969: PUSH
50970: LD_VAR 0 3
50974: ARRAY
50975: PUSH
50976: LD_INT 1
50978: PLUS
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PPUSH
50984: LD_VAR 0 5
50988: PUSH
50989: LD_VAR 0 1
50993: PPUSH
50994: CALL_OW 250
50998: PUSH
50999: LD_VAR 0 1
51003: PPUSH
51004: CALL_OW 251
51008: PUSH
51009: LD_VAR 0 1
51013: PPUSH
51014: CALL_OW 254
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: PPUSH
51025: CALL 6693 0 3
51029: ST_TO_ADDR
// if pos = 1 then
51030: LD_VAR 0 6
51034: PUSH
51035: LD_INT 1
51037: EQUAL
51038: IFFALSE 51153
// begin tmp := mc_build_list [ i ] ;
51040: LD_ADDR_VAR 0 7
51044: PUSH
51045: LD_EXP 10
51049: PUSH
51050: LD_VAR 0 3
51054: ARRAY
51055: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
51056: LD_VAR 0 7
51060: PPUSH
51061: LD_INT 2
51063: PUSH
51064: LD_INT 30
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 30
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: LIST
51088: PPUSH
51089: CALL_OW 72
51093: IFFALSE 51103
// pos := 2 ;
51095: LD_ADDR_VAR 0 6
51099: PUSH
51100: LD_INT 2
51102: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
51103: LD_ADDR_VAR 0 7
51107: PUSH
51108: LD_VAR 0 7
51112: PPUSH
51113: LD_VAR 0 6
51117: PPUSH
51118: LD_VAR 0 7
51122: PPUSH
51123: CALL 6584 0 3
51127: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
51128: LD_ADDR_EXP 10
51132: PUSH
51133: LD_EXP 10
51137: PPUSH
51138: LD_VAR 0 3
51142: PPUSH
51143: LD_VAR 0 7
51147: PPUSH
51148: CALL_OW 1
51152: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
51153: LD_VAR 0 1
51157: PUSH
51158: LD_EXP 5
51162: PUSH
51163: LD_VAR 0 3
51167: ARRAY
51168: IN
51169: IFFALSE 51208
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
51171: LD_ADDR_EXP 5
51175: PUSH
51176: LD_EXP 5
51180: PPUSH
51181: LD_VAR 0 3
51185: PPUSH
51186: LD_EXP 5
51190: PUSH
51191: LD_VAR 0 3
51195: ARRAY
51196: PUSH
51197: LD_VAR 0 1
51201: DIFF
51202: PPUSH
51203: CALL_OW 1
51207: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
51208: LD_VAR 0 1
51212: PUSH
51213: LD_EXP 12
51217: PUSH
51218: LD_VAR 0 3
51222: ARRAY
51223: IN
51224: IFFALSE 51263
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
51226: LD_ADDR_EXP 12
51230: PUSH
51231: LD_EXP 12
51235: PPUSH
51236: LD_VAR 0 3
51240: PPUSH
51241: LD_EXP 12
51245: PUSH
51246: LD_VAR 0 3
51250: ARRAY
51251: PUSH
51252: LD_VAR 0 1
51256: DIFF
51257: PPUSH
51258: CALL_OW 1
51262: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
51263: LD_VAR 0 1
51267: PUSH
51268: LD_EXP 23
51272: PUSH
51273: LD_VAR 0 3
51277: ARRAY
51278: IN
51279: IFFALSE 51318
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
51281: LD_ADDR_EXP 23
51285: PUSH
51286: LD_EXP 23
51290: PPUSH
51291: LD_VAR 0 3
51295: PPUSH
51296: LD_EXP 23
51300: PUSH
51301: LD_VAR 0 3
51305: ARRAY
51306: PUSH
51307: LD_VAR 0 1
51311: DIFF
51312: PPUSH
51313: CALL_OW 1
51317: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
51318: LD_VAR 0 1
51322: PUSH
51323: LD_EXP 14
51327: PUSH
51328: LD_VAR 0 3
51332: ARRAY
51333: IN
51334: IFFALSE 51373
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
51336: LD_ADDR_EXP 14
51340: PUSH
51341: LD_EXP 14
51345: PPUSH
51346: LD_VAR 0 3
51350: PPUSH
51351: LD_EXP 14
51355: PUSH
51356: LD_VAR 0 3
51360: ARRAY
51361: PUSH
51362: LD_VAR 0 1
51366: DIFF
51367: PPUSH
51368: CALL_OW 1
51372: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
51373: LD_VAR 0 1
51377: PUSH
51378: LD_EXP 13
51382: PUSH
51383: LD_VAR 0 3
51387: ARRAY
51388: IN
51389: IFFALSE 51428
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
51391: LD_ADDR_EXP 13
51395: PUSH
51396: LD_EXP 13
51400: PPUSH
51401: LD_VAR 0 3
51405: PPUSH
51406: LD_EXP 13
51410: PUSH
51411: LD_VAR 0 3
51415: ARRAY
51416: PUSH
51417: LD_VAR 0 1
51421: DIFF
51422: PPUSH
51423: CALL_OW 1
51427: ST_TO_ADDR
// end ; break ;
51428: GO 51432
// end ;
51430: GO 50524
51432: POP
51433: POP
// end ;
51434: LD_VAR 0 2
51438: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units ; begin
51439: LD_INT 0
51441: PPUSH
51442: PPUSH
51443: PPUSH
51444: PPUSH
51445: PPUSH
51446: PPUSH
// if not mc_bases then
51447: LD_EXP 5
51451: NOT
51452: IFFALSE 51456
// exit ;
51454: GO 51901
// for i = 1 to mc_bases do
51456: LD_ADDR_VAR 0 3
51460: PUSH
51461: DOUBLE
51462: LD_INT 1
51464: DEC
51465: ST_TO_ADDR
51466: LD_EXP 5
51470: PUSH
51471: FOR_TO
51472: IFFALSE 51899
// begin if building in mc_construct_list [ i ] then
51474: LD_VAR 0 1
51478: PUSH
51479: LD_EXP 12
51483: PUSH
51484: LD_VAR 0 3
51488: ARRAY
51489: IN
51490: IFFALSE 51897
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
51492: LD_ADDR_EXP 12
51496: PUSH
51497: LD_EXP 12
51501: PPUSH
51502: LD_VAR 0 3
51506: PPUSH
51507: LD_EXP 12
51511: PUSH
51512: LD_VAR 0 3
51516: ARRAY
51517: PUSH
51518: LD_VAR 0 1
51522: DIFF
51523: PPUSH
51524: CALL_OW 1
51528: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
51529: LD_ADDR_EXP 5
51533: PUSH
51534: LD_EXP 5
51538: PPUSH
51539: LD_VAR 0 3
51543: PUSH
51544: LD_EXP 5
51548: PUSH
51549: LD_VAR 0 3
51553: ARRAY
51554: PUSH
51555: LD_INT 1
51557: PLUS
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PPUSH
51563: LD_VAR 0 1
51567: PPUSH
51568: CALL 6693 0 3
51572: ST_TO_ADDR
// btype := GetBType ( building ) ;
51573: LD_ADDR_VAR 0 5
51577: PUSH
51578: LD_VAR 0 1
51582: PPUSH
51583: CALL_OW 266
51587: ST_TO_ADDR
// if btype in [ b_bunker , b_turret ] then
51588: LD_VAR 0 5
51592: PUSH
51593: LD_INT 32
51595: PUSH
51596: LD_INT 33
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: IN
51603: IFFALSE 51893
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
51605: LD_ADDR_EXP 13
51609: PUSH
51610: LD_EXP 13
51614: PPUSH
51615: LD_VAR 0 3
51619: PUSH
51620: LD_EXP 13
51624: PUSH
51625: LD_VAR 0 3
51629: ARRAY
51630: PUSH
51631: LD_INT 1
51633: PLUS
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PPUSH
51639: LD_VAR 0 1
51643: PPUSH
51644: CALL 6693 0 3
51648: ST_TO_ADDR
// if btype = b_bunker then
51649: LD_VAR 0 5
51653: PUSH
51654: LD_INT 32
51656: EQUAL
51657: IFFALSE 51893
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
51659: LD_ADDR_EXP 14
51663: PUSH
51664: LD_EXP 14
51668: PPUSH
51669: LD_VAR 0 3
51673: PUSH
51674: LD_EXP 14
51678: PUSH
51679: LD_VAR 0 3
51683: ARRAY
51684: PUSH
51685: LD_INT 1
51687: PLUS
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PPUSH
51693: LD_VAR 0 1
51697: PPUSH
51698: CALL 6693 0 3
51702: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
51703: LD_ADDR_VAR 0 6
51707: PUSH
51708: LD_EXP 5
51712: PUSH
51713: LD_VAR 0 3
51717: ARRAY
51718: PPUSH
51719: LD_INT 25
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: LD_INT 54
51734: PUSH
51735: EMPTY
51736: LIST
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PPUSH
51746: CALL_OW 72
51750: ST_TO_ADDR
// if tmp then
51751: LD_VAR 0 6
51755: IFFALSE 51761
// exit ;
51757: POP
51758: POP
51759: GO 51901
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
51761: LD_ADDR_VAR 0 6
51765: PUSH
51766: LD_EXP 5
51770: PUSH
51771: LD_VAR 0 3
51775: ARRAY
51776: PPUSH
51777: LD_INT 2
51779: PUSH
51780: LD_INT 30
51782: PUSH
51783: LD_INT 4
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 30
51792: PUSH
51793: LD_INT 5
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: LIST
51804: PPUSH
51805: CALL_OW 72
51809: ST_TO_ADDR
// if not tmp then
51810: LD_VAR 0 6
51814: NOT
51815: IFFALSE 51821
// exit ;
51817: POP
51818: POP
51819: GO 51901
// for j in tmp do
51821: LD_ADDR_VAR 0 4
51825: PUSH
51826: LD_VAR 0 6
51830: PUSH
51831: FOR_IN
51832: IFFALSE 51891
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
51834: LD_ADDR_VAR 0 7
51838: PUSH
51839: LD_VAR 0 4
51843: PPUSH
51844: CALL_OW 313
51848: PPUSH
51849: LD_INT 25
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PPUSH
51859: CALL_OW 72
51863: ST_TO_ADDR
// if units then
51864: LD_VAR 0 7
51868: IFFALSE 51889
// begin ComExitBuilding ( units [ 1 ] ) ;
51870: LD_VAR 0 7
51874: PUSH
51875: LD_INT 1
51877: ARRAY
51878: PPUSH
51879: CALL_OW 122
// exit ;
51883: POP
51884: POP
51885: POP
51886: POP
51887: GO 51901
// end ; end ;
51889: GO 51831
51891: POP
51892: POP
// end ; end ; exit ;
51893: POP
51894: POP
51895: GO 51901
// end ; end ;
51897: GO 51471
51899: POP
51900: POP
// end ;
51901: LD_VAR 0 2
51905: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
51906: LD_INT 0
51908: PPUSH
51909: PPUSH
51910: PPUSH
51911: PPUSH
51912: PPUSH
51913: PPUSH
51914: PPUSH
// if not mc_bases then
51915: LD_EXP 5
51919: NOT
51920: IFFALSE 51924
// exit ;
51922: GO 52155
// btype := GetBType ( building ) ;
51924: LD_ADDR_VAR 0 6
51928: PUSH
51929: LD_VAR 0 1
51933: PPUSH
51934: CALL_OW 266
51938: ST_TO_ADDR
// x := GetX ( building ) ;
51939: LD_ADDR_VAR 0 7
51943: PUSH
51944: LD_VAR 0 1
51948: PPUSH
51949: CALL_OW 250
51953: ST_TO_ADDR
// y := GetY ( building ) ;
51954: LD_ADDR_VAR 0 8
51958: PUSH
51959: LD_VAR 0 1
51963: PPUSH
51964: CALL_OW 251
51968: ST_TO_ADDR
// d := GetDir ( building ) ;
51969: LD_ADDR_VAR 0 9
51973: PUSH
51974: LD_VAR 0 1
51978: PPUSH
51979: CALL_OW 254
51983: ST_TO_ADDR
// for i = 1 to mc_bases do
51984: LD_ADDR_VAR 0 4
51988: PUSH
51989: DOUBLE
51990: LD_INT 1
51992: DEC
51993: ST_TO_ADDR
51994: LD_EXP 5
51998: PUSH
51999: FOR_TO
52000: IFFALSE 52153
// begin if not mc_build_list [ i ] then
52002: LD_EXP 10
52006: PUSH
52007: LD_VAR 0 4
52011: ARRAY
52012: NOT
52013: IFFALSE 52017
// continue ;
52015: GO 51999
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
52017: LD_VAR 0 6
52021: PUSH
52022: LD_VAR 0 7
52026: PUSH
52027: LD_VAR 0 8
52031: PUSH
52032: LD_VAR 0 9
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: PPUSH
52043: LD_EXP 10
52047: PUSH
52048: LD_VAR 0 4
52052: ARRAY
52053: PUSH
52054: LD_INT 1
52056: ARRAY
52057: PPUSH
52058: CALL 12291 0 2
52062: IFFALSE 52151
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
52064: LD_ADDR_EXP 10
52068: PUSH
52069: LD_EXP 10
52073: PPUSH
52074: LD_VAR 0 4
52078: PPUSH
52079: LD_EXP 10
52083: PUSH
52084: LD_VAR 0 4
52088: ARRAY
52089: PPUSH
52090: LD_INT 1
52092: PPUSH
52093: CALL_OW 3
52097: PPUSH
52098: CALL_OW 1
52102: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
52103: LD_ADDR_EXP 12
52107: PUSH
52108: LD_EXP 12
52112: PPUSH
52113: LD_VAR 0 4
52117: PUSH
52118: LD_EXP 12
52122: PUSH
52123: LD_VAR 0 4
52127: ARRAY
52128: PUSH
52129: LD_INT 1
52131: PLUS
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PPUSH
52137: LD_VAR 0 1
52141: PPUSH
52142: CALL 6693 0 3
52146: ST_TO_ADDR
// exit ;
52147: POP
52148: POP
52149: GO 52155
// end ; end ;
52151: GO 51999
52153: POP
52154: POP
// end ;
52155: LD_VAR 0 3
52159: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
52160: LD_INT 0
52162: PPUSH
52163: PPUSH
52164: PPUSH
// if not mc_bases then
52165: LD_EXP 5
52169: NOT
52170: IFFALSE 52174
// exit ;
52172: GO 52364
// for i = 1 to mc_bases do
52174: LD_ADDR_VAR 0 4
52178: PUSH
52179: DOUBLE
52180: LD_INT 1
52182: DEC
52183: ST_TO_ADDR
52184: LD_EXP 5
52188: PUSH
52189: FOR_TO
52190: IFFALSE 52277
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
52192: LD_VAR 0 1
52196: PUSH
52197: LD_EXP 13
52201: PUSH
52202: LD_VAR 0 4
52206: ARRAY
52207: IN
52208: PUSH
52209: LD_VAR 0 1
52213: PUSH
52214: LD_EXP 14
52218: PUSH
52219: LD_VAR 0 4
52223: ARRAY
52224: IN
52225: NOT
52226: AND
52227: IFFALSE 52275
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
52229: LD_ADDR_EXP 14
52233: PUSH
52234: LD_EXP 14
52238: PPUSH
52239: LD_VAR 0 4
52243: PUSH
52244: LD_EXP 14
52248: PUSH
52249: LD_VAR 0 4
52253: ARRAY
52254: PUSH
52255: LD_INT 1
52257: PLUS
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PPUSH
52263: LD_VAR 0 1
52267: PPUSH
52268: CALL 6693 0 3
52272: ST_TO_ADDR
// break ;
52273: GO 52277
// end ; end ;
52275: GO 52189
52277: POP
52278: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
52279: LD_VAR 0 1
52283: PPUSH
52284: CALL_OW 257
52288: PUSH
52289: LD_EXP 30
52293: IN
52294: PUSH
52295: LD_VAR 0 1
52299: PPUSH
52300: CALL_OW 266
52304: PUSH
52305: LD_INT 5
52307: EQUAL
52308: AND
52309: PUSH
52310: LD_VAR 0 2
52314: PPUSH
52315: CALL_OW 110
52319: PUSH
52320: LD_INT 18
52322: NONEQUAL
52323: AND
52324: IFFALSE 52364
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
52326: LD_VAR 0 2
52330: PPUSH
52331: CALL_OW 257
52335: PUSH
52336: LD_INT 5
52338: PUSH
52339: LD_INT 8
52341: PUSH
52342: LD_INT 9
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: LIST
52349: IN
52350: IFFALSE 52364
// SetClass ( unit , 1 ) ;
52352: LD_VAR 0 2
52356: PPUSH
52357: LD_INT 1
52359: PPUSH
52360: CALL_OW 336
// end ;
52364: LD_VAR 0 3
52368: RET
// export function MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
52369: LD_INT 0
52371: PPUSH
52372: PPUSH
// if not mc_bases then
52373: LD_EXP 5
52377: NOT
52378: IFFALSE 52382
// exit ;
52380: GO 52498
// if GetLives ( abandoned_vehicle ) > 250 then
52382: LD_VAR 0 2
52386: PPUSH
52387: CALL_OW 256
52391: PUSH
52392: LD_INT 250
52394: GREATER
52395: IFFALSE 52399
// exit ;
52397: GO 52498
// for i = 1 to mc_bases do
52399: LD_ADDR_VAR 0 6
52403: PUSH
52404: DOUBLE
52405: LD_INT 1
52407: DEC
52408: ST_TO_ADDR
52409: LD_EXP 5
52413: PUSH
52414: FOR_TO
52415: IFFALSE 52496
// begin if driver in mc_bases [ i ] then
52417: LD_VAR 0 1
52421: PUSH
52422: LD_EXP 5
52426: PUSH
52427: LD_VAR 0 6
52431: ARRAY
52432: IN
52433: IFFALSE 52494
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
52435: LD_VAR 0 1
52439: PPUSH
52440: LD_EXP 5
52444: PUSH
52445: LD_VAR 0 6
52449: ARRAY
52450: PPUSH
52451: LD_INT 2
52453: PUSH
52454: LD_INT 30
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 30
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: LIST
52478: PPUSH
52479: CALL_OW 72
52483: PUSH
52484: LD_INT 1
52486: ARRAY
52487: PPUSH
52488: CALL_OW 112
// break ;
52492: GO 52496
// end ; end ;
52494: GO 52414
52496: POP
52497: POP
// end ;
52498: LD_VAR 0 5
52502: RET
