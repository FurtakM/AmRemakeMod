// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitVariables ;
   8: CALL 587 0 0
// InitMacro ;
  12: CALL 49893 0 0
// PrepareNature ( 3 , 3 , 3 , 4 , 3 , 0 , 0 , nature_area , 0 ) ;
  16: LD_INT 3
  18: PPUSH
  19: LD_INT 3
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 4
  27: PPUSH
  28: LD_INT 3
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: LD_INT 5
  39: PPUSH
  40: LD_INT 0
  42: PPUSH
  43: CALL 45768 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_russian , 0 ) ;
  47: LD_INT 0
  49: PPUSH
  50: LD_INT 0
  52: PPUSH
  53: LD_INT 5
  55: PPUSH
  56: LD_INT 0
  58: PPUSH
  59: LD_INT 0
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: LD_INT 0
  67: PPUSH
  68: LD_INT 8
  70: PPUSH
  71: LD_INT 0
  73: PPUSH
  74: CALL 45768 0 9
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 1 , 0 , area_apeman_arabian , 0 ) ;
  78: LD_INT 0
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 6
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: LD_INT 0
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: LD_INT 6
 101: PPUSH
 102: LD_INT 0
 104: PPUSH
 105: CALL 45768 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_alliance , 0 ) ;
 109: LD_INT 0
 111: PPUSH
 112: LD_INT 0
 114: PPUSH
 115: LD_INT 5
 117: PPUSH
 118: LD_INT 0
 120: PPUSH
 121: LD_INT 0
 123: PPUSH
 124: LD_INT 0
 126: PPUSH
 127: LD_INT 0
 129: PPUSH
 130: LD_INT 12
 132: PPUSH
 133: LD_INT 0
 135: PPUSH
 136: CALL 45768 0 9
// PrepareArabian ;
 140: CALL 3406 0 0
// PrepareRussian ;
 144: CALL 2533 0 0
// PrepareAlliance ;
 148: CALL 697 0 0
// MC_Start ( ) ;
 152: CALL 50106 0 0
// if debug then
 156: LD_EXP 1
 160: IFFALSE 169
// FogOff ( 1 ) ;
 162: LD_INT 1
 164: PPUSH
 165: CALL_OW 344
// Action ;
 169: CALL 5479 0 0
// end ;
 173: END
// export function CustomInitMacro ; var i ; begin
 174: LD_INT 0
 176: PPUSH
 177: PPUSH
// mc_parking := [ parking_arabian , parking_russian ] ;
 178: LD_ADDR_EXP 81
 182: PUSH
 183: LD_INT 1
 185: PUSH
 186: LD_INT 2
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: ST_TO_ADDR
// mc_scan_area := [ area_base_arabian , area_base_russian ] ;
 193: LD_ADDR_EXP 82
 197: PUSH
 198: LD_INT 3
 200: PUSH
 201: LD_INT 4
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 12 , 15 , 18 ] [ Difficulty ] , minefield ) ;
 208: LD_INT 1
 210: PPUSH
 211: LD_INT 12
 213: PUSH
 214: LD_INT 15
 216: PUSH
 217: LD_INT 18
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: PUSH
 225: LD_OWVAR 67
 229: ARRAY
 230: PPUSH
 231: LD_INT 7
 233: PPUSH
 234: CALL 62980 0 3
// MC_SetDefenderList ( 1 , arabian_guard ) ;
 238: LD_INT 1
 240: PPUSH
 241: LD_EXP 53
 245: PPUSH
 246: CALL 63349 0 2
// MC_SetTame ( 1 , area_apeman_arabian ) ;
 250: LD_INT 1
 252: PPUSH
 253: LD_INT 6
 255: PPUSH
 256: CALL 63706 0 2
// MC_SetCratesArea ( 1 , [ area_collect_arabian ] ) ;
 260: LD_INT 1
 262: PPUSH
 263: LD_INT 9
 265: PUSH
 266: EMPTY
 267: LIST
 268: PPUSH
 269: CALL 63848 0 2
// MC_InsertProduceList ( 1 , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 13
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: LD_INT 2
 284: PUSH
 285: LD_INT 32
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL 63286 0 2
// MC_SetLabKind ( 2 , [ b_lab_computer , b_lab_spacetime , b_lab_weapon , b_lab_siberium ] ) ;
 298: LD_INT 2
 300: PPUSH
 301: LD_INT 12
 303: PUSH
 304: LD_INT 14
 306: PUSH
 307: LD_INT 10
 309: PUSH
 310: LD_INT 11
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: PPUSH
 319: CALL 63755 0 2
// MC_SetDefenderList ( 2 , russian_guard ) ;
 323: LD_INT 2
 325: PPUSH
 326: LD_EXP 50
 330: PPUSH
 331: CALL 63349 0 2
// MC_SetTame ( 2 , area_apeman_russian ) ;
 335: LD_INT 2
 337: PPUSH
 338: LD_INT 8
 340: PPUSH
 341: CALL 63706 0 2
// MC_SetCratesArea ( 2 , [ area_collect_russian ] ) ;
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 10
 350: PUSH
 351: EMPTY
 352: LIST
 353: PPUSH
 354: CALL 63848 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 71 , 116 , 4 ] , [ b_armoury , 85 , 116 , 4 ] , [ b_bunker , 83 , 111 , 4 ] , [ b_bunker , 87 , 121 , 4 ] , [ b_turret , 88 , 128 , 4 ] , [ b_bunker , 59 , 89 , 3 ] , [ b_turret , 69 , 98 , 3 ] , [ b_turret , 77 , 103 , 3 ] , [ b_turret , 83 , 105 , 3 ] , [ b_turret , 71 , 125 , 5 ] ] ) ;
 358: LD_INT 2
 360: PPUSH
 361: LD_INT 6
 363: PUSH
 364: LD_INT 71
 366: PUSH
 367: LD_INT 116
 369: PUSH
 370: LD_INT 4
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_INT 4
 381: PUSH
 382: LD_INT 85
 384: PUSH
 385: LD_INT 116
 387: PUSH
 388: LD_INT 4
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 32
 399: PUSH
 400: LD_INT 83
 402: PUSH
 403: LD_INT 111
 405: PUSH
 406: LD_INT 4
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 32
 417: PUSH
 418: LD_INT 87
 420: PUSH
 421: LD_INT 121
 423: PUSH
 424: LD_INT 4
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 33
 435: PUSH
 436: LD_INT 88
 438: PUSH
 439: LD_INT 128
 441: PUSH
 442: LD_INT 4
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 32
 453: PUSH
 454: LD_INT 59
 456: PUSH
 457: LD_INT 89
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 33
 471: PUSH
 472: LD_INT 69
 474: PUSH
 475: LD_INT 98
 477: PUSH
 478: LD_INT 3
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 33
 489: PUSH
 490: LD_INT 77
 492: PUSH
 493: LD_INT 103
 495: PUSH
 496: LD_INT 3
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_INT 33
 507: PUSH
 508: LD_INT 83
 510: PUSH
 511: LD_INT 105
 513: PUSH
 514: LD_INT 3
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 33
 525: PUSH
 526: LD_INT 71
 528: PUSH
 529: LD_INT 125
 531: PUSH
 532: LD_INT 5
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL 63190 0 2
// MC_InsertProduceList ( 2 , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ) ;
 557: LD_INT 2
 559: PPUSH
 560: LD_INT 21
 562: PUSH
 563: LD_INT 1
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 51
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL 63286 0 2
// end ;
 582: LD_VAR 0 1
 586: RET
// export debug , game , freedom , gossudarov_arrive , ru_lab_builded , player_spotted , first_attack , ar_base_spotted , ar_active_attack , ar_attackers , first_powell_attack , abdul_escaped , loss_counter ; function InitVariables ; begin
 587: LD_INT 0
 589: PPUSH
// debug := false ;
 590: LD_ADDR_EXP 1
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// game := true ;
 598: LD_ADDR_EXP 2
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// gossudarov_arrive := false ;
 606: LD_ADDR_EXP 4
 610: PUSH
 611: LD_INT 0
 613: ST_TO_ADDR
// ru_lab_builded := false ;
 614: LD_ADDR_EXP 5
 618: PUSH
 619: LD_INT 0
 621: ST_TO_ADDR
// player_spotted := false ;
 622: LD_ADDR_EXP 6
 626: PUSH
 627: LD_INT 0
 629: ST_TO_ADDR
// first_attack := false ;
 630: LD_ADDR_EXP 7
 634: PUSH
 635: LD_INT 0
 637: ST_TO_ADDR
// ru_attackers := [ ] ;
 638: LD_ADDR_EXP 51
 642: PUSH
 643: EMPTY
 644: ST_TO_ADDR
// ar_base_spotted := false ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_INT 0
 652: ST_TO_ADDR
// ar_active_attack := false ;
 653: LD_ADDR_EXP 9
 657: PUSH
 658: LD_INT 0
 660: ST_TO_ADDR
// ar_attackers := [ ] ;
 661: LD_ADDR_EXP 10
 665: PUSH
 666: EMPTY
 667: ST_TO_ADDR
// first_powell_attack := false ;
 668: LD_ADDR_EXP 11
 672: PUSH
 673: LD_INT 0
 675: ST_TO_ADDR
// abdul_escaped := false ;
 676: LD_ADDR_EXP 12
 680: PUSH
 681: LD_INT 0
 683: ST_TO_ADDR
// loss_counter := 0 ;
 684: LD_ADDR_EXP 13
 688: PUSH
 689: LD_INT 0
 691: ST_TO_ADDR
// end ; end_of_file
 692: LD_VAR 0 1
 696: RET
// export JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export Gossudarov , Kirilenkova , Titov , Fadeev , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov ; export Burlak , Belkov , Gnyevko ; export Masha ; export function PrepareAlliance ; var veh , i , tmp ; begin
 697: LD_INT 0
 699: PPUSH
 700: PPUSH
 701: PPUSH
 702: PPUSH
// uc_side := 7 ;
 703: LD_ADDR_OWVAR 20
 707: PUSH
 708: LD_INT 7
 710: ST_TO_ADDR
// uc_nation := 1 ;
 711: LD_ADDR_OWVAR 21
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 12a_ ) ;
 719: LD_ADDR_EXP 14
 723: PUSH
 724: LD_STRING JMM
 726: PPUSH
 727: LD_EXP 1
 731: NOT
 732: PPUSH
 733: LD_STRING 12a_
 735: PPUSH
 736: CALL 12412 0 3
 740: ST_TO_ADDR
// PlaceUnitXY ( JMM , 71 , 23 , false ) ;
 741: LD_EXP 14
 745: PPUSH
 746: LD_INT 71
 748: PPUSH
 749: LD_INT 23
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL_OW 48
// SetClass ( JMM , 2 ) ;
 759: LD_EXP 14
 763: PPUSH
 764: LD_INT 2
 766: PPUSH
 767: CALL_OW 336
// Roth := PrepareUnit ( Roth , ( not debug ) , 12a_ ) ;
 771: LD_ADDR_EXP 15
 775: PUSH
 776: LD_STRING Roth
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_STRING 12a_
 787: PPUSH
 788: CALL 12412 0 3
 792: ST_TO_ADDR
// if Roth then
 793: LD_EXP 15
 797: IFFALSE 817
// PlaceUnitXY ( Roth , 71 , 21 , false ) ;
 799: LD_EXP 15
 803: PPUSH
 804: LD_INT 71
 806: PPUSH
 807: LD_INT 21
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL_OW 48
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 12a_ ) ;
 817: LD_ADDR_EXP 16
 821: PUSH
 822: LD_STRING Lisa
 824: PPUSH
 825: LD_EXP 1
 829: NOT
 830: PPUSH
 831: LD_STRING 12a_
 833: PPUSH
 834: CALL 12412 0 3
 838: ST_TO_ADDR
// if Lisa then
 839: LD_EXP 16
 843: IFFALSE 860
// PlaceUnitArea ( Lisa , alliance_start , false ) ;
 845: LD_EXP 16
 849: PPUSH
 850: LD_INT 13
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 49
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 12a_ ) ;
 860: LD_ADDR_EXP 17
 864: PUSH
 865: LD_STRING Donaldson
 867: PPUSH
 868: LD_EXP 1
 872: NOT
 873: PPUSH
 874: LD_STRING 12a_
 876: PPUSH
 877: CALL 12412 0 3
 881: ST_TO_ADDR
// if Donaldson then
 882: LD_EXP 17
 886: IFFALSE 903
// PlaceUnitArea ( Donaldson , alliance_start , false ) ;
 888: LD_EXP 17
 892: PPUSH
 893: LD_INT 13
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 49
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 12a_ ) ;
 903: LD_ADDR_EXP 18
 907: PUSH
 908: LD_STRING Bobby
 910: PPUSH
 911: LD_EXP 1
 915: NOT
 916: PPUSH
 917: LD_STRING 12a_
 919: PPUSH
 920: CALL 12412 0 3
 924: ST_TO_ADDR
// if Bobby then
 925: LD_EXP 18
 929: IFFALSE 946
// PlaceUnitArea ( Bobby , alliance_start , false ) ;
 931: LD_EXP 18
 935: PPUSH
 936: LD_INT 13
 938: PPUSH
 939: LD_INT 0
 941: PPUSH
 942: CALL_OW 49
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 12a_ ) ;
 946: LD_ADDR_EXP 19
 950: PUSH
 951: LD_STRING Cyrus
 953: PPUSH
 954: LD_EXP 1
 958: NOT
 959: PPUSH
 960: LD_STRING 12a_
 962: PPUSH
 963: CALL 12412 0 3
 967: ST_TO_ADDR
// if Cyrus then
 968: LD_EXP 19
 972: IFFALSE 989
// PlaceUnitArea ( Cyrus , alliance_start , false ) ;
 974: LD_EXP 19
 978: PPUSH
 979: LD_INT 13
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 49
// Denis := PrepareUnit ( Denis , ( not debug ) , 12a_ ) ;
 989: LD_ADDR_EXP 20
 993: PUSH
 994: LD_STRING Denis
 996: PPUSH
 997: LD_EXP 1
1001: NOT
1002: PPUSH
1003: LD_STRING 12a_
1005: PPUSH
1006: CALL 12412 0 3
1010: ST_TO_ADDR
// if Denis then
1011: LD_EXP 20
1015: IFFALSE 1032
// PlaceUnitArea ( Denis , alliance_start , false ) ;
1017: LD_EXP 20
1021: PPUSH
1022: LD_INT 13
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// Brown := PrepareUnit ( Brown , ( not debug ) , 12a_ ) ;
1032: LD_ADDR_EXP 21
1036: PUSH
1037: LD_STRING Brown
1039: PPUSH
1040: LD_EXP 1
1044: NOT
1045: PPUSH
1046: LD_STRING 12a_
1048: PPUSH
1049: CALL 12412 0 3
1053: ST_TO_ADDR
// if Brown then
1054: LD_EXP 21
1058: IFFALSE 1075
// PlaceUnitArea ( Brown , alliance_start , false ) ;
1060: LD_EXP 21
1064: PPUSH
1065: LD_INT 13
1067: PPUSH
1068: LD_INT 0
1070: PPUSH
1071: CALL_OW 49
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 12a_ ) ;
1075: LD_ADDR_EXP 22
1079: PUSH
1080: LD_STRING Gladstone
1082: PPUSH
1083: LD_EXP 1
1087: NOT
1088: PPUSH
1089: LD_STRING 12a_
1091: PPUSH
1092: CALL 12412 0 3
1096: ST_TO_ADDR
// if Gladstone then
1097: LD_EXP 22
1101: IFFALSE 1118
// PlaceUnitArea ( Gladstone , alliance_start , false ) ;
1103: LD_EXP 22
1107: PPUSH
1108: LD_INT 13
1110: PPUSH
1111: LD_INT 0
1113: PPUSH
1114: CALL_OW 49
// Houten := PrepareUnit ( Houten , ( not debug ) , 12a_ ) ;
1118: LD_ADDR_EXP 23
1122: PUSH
1123: LD_STRING Houten
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_STRING 12a_
1134: PPUSH
1135: CALL 12412 0 3
1139: ST_TO_ADDR
// if Houten then
1140: LD_EXP 23
1144: IFFALSE 1161
// PlaceUnitArea ( Houten , alliance_start , false ) ;
1146: LD_EXP 23
1150: PPUSH
1151: LD_INT 13
1153: PPUSH
1154: LD_INT 0
1156: PPUSH
1157: CALL_OW 49
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 12a_ ) ;
1161: LD_ADDR_EXP 24
1165: PUSH
1166: LD_STRING Cornel
1168: PPUSH
1169: LD_EXP 1
1173: NOT
1174: PPUSH
1175: LD_STRING 12a_
1177: PPUSH
1178: CALL 12412 0 3
1182: ST_TO_ADDR
// if Cornel then
1183: LD_EXP 24
1187: IFFALSE 1204
// PlaceUnitArea ( Cornel , alliance_start , false ) ;
1189: LD_EXP 24
1193: PPUSH
1194: LD_INT 13
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 49
// Gary := PrepareUnit ( Gary , ( not debug ) , 12a_ ) ;
1204: LD_ADDR_EXP 25
1208: PUSH
1209: LD_STRING Gary
1211: PPUSH
1212: LD_EXP 1
1216: NOT
1217: PPUSH
1218: LD_STRING 12a_
1220: PPUSH
1221: CALL 12412 0 3
1225: ST_TO_ADDR
// if Gary then
1226: LD_EXP 25
1230: IFFALSE 1247
// PlaceUnitArea ( Gary , alliance_start , false ) ;
1232: LD_EXP 25
1236: PPUSH
1237: LD_INT 13
1239: PPUSH
1240: LD_INT 0
1242: PPUSH
1243: CALL_OW 49
// Frank := PrepareUnit ( Frank , ( not debug ) , 12a_ ) ;
1247: LD_ADDR_EXP 26
1251: PUSH
1252: LD_STRING Frank
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_STRING 12a_
1263: PPUSH
1264: CALL 12412 0 3
1268: ST_TO_ADDR
// if Frank then
1269: LD_EXP 26
1273: IFFALSE 1290
// PlaceUnitArea ( Frank , alliance_start , false ) ;
1275: LD_EXP 26
1279: PPUSH
1280: LD_INT 13
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 49
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 12a_ ) ;
1290: LD_ADDR_EXP 27
1294: PUSH
1295: LD_STRING Kikuchi
1297: PPUSH
1298: LD_EXP 1
1302: NOT
1303: PPUSH
1304: LD_STRING 12a_
1306: PPUSH
1307: CALL 12412 0 3
1311: ST_TO_ADDR
// if Kikuchi then
1312: LD_EXP 27
1316: IFFALSE 1333
// PlaceUnitArea ( Kikuchi , alliance_start , false ) ;
1318: LD_EXP 27
1322: PPUSH
1323: LD_INT 13
1325: PPUSH
1326: LD_INT 0
1328: PPUSH
1329: CALL_OW 49
// Simms := PrepareUnit ( Simms , ( not debug ) , 12a_ ) ;
1333: LD_ADDR_EXP 28
1337: PUSH
1338: LD_STRING Simms
1340: PPUSH
1341: LD_EXP 1
1345: NOT
1346: PPUSH
1347: LD_STRING 12a_
1349: PPUSH
1350: CALL 12412 0 3
1354: ST_TO_ADDR
// if Simms then
1355: LD_EXP 28
1359: IFFALSE 1376
// PlaceUnitArea ( Simms , alliance_start , false ) ;
1361: LD_EXP 28
1365: PPUSH
1366: LD_INT 13
1368: PPUSH
1369: LD_INT 0
1371: PPUSH
1372: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 12a_ ) ;
1376: LD_ADDR_EXP 29
1380: PUSH
1381: LD_STRING Joan
1383: PPUSH
1384: LD_EXP 1
1388: NOT
1389: PPUSH
1390: LD_STRING 12a_
1392: PPUSH
1393: CALL 12412 0 3
1397: ST_TO_ADDR
// if Joan then
1398: LD_EXP 29
1402: IFFALSE 1419
// PlaceUnitArea ( Joan , alliance_start , false ) ;
1404: LD_EXP 29
1408: PPUSH
1409: LD_INT 13
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 12a_ ) ;
1419: LD_ADDR_EXP 30
1423: PUSH
1424: LD_STRING DeltaDoctor
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_STRING 12a_
1435: PPUSH
1436: CALL 12412 0 3
1440: ST_TO_ADDR
// if DeltaDoctor then
1441: LD_EXP 30
1445: IFFALSE 1462
// PlaceUnitArea ( DeltaDoctor , alliance_start , false ) ;
1447: LD_EXP 30
1451: PPUSH
1452: LD_INT 13
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// tmp := CreateCharacterSet ( 12a_others ) ;
1462: LD_ADDR_VAR 0 4
1466: PUSH
1467: LD_STRING 12a_others
1469: PPUSH
1470: CALL_OW 31
1474: ST_TO_ADDR
// if tmp then
1475: LD_VAR 0 4
1479: IFFALSE 1513
// for i in tmp do
1481: LD_ADDR_VAR 0 3
1485: PUSH
1486: LD_VAR 0 4
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1511
// PlaceUnitArea ( i , alliance_start , false ) ;
1494: LD_VAR 0 3
1498: PPUSH
1499: LD_INT 13
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 49
1509: GO 1491
1511: POP
1512: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1513: LD_INT 3
1515: PPUSH
1516: LD_INT 3
1518: PPUSH
1519: LD_INT 3
1521: PPUSH
1522: LD_INT 12
1524: PPUSH
1525: LD_INT 100
1527: PPUSH
1528: CALL 18484 0 5
// veh := CreateVehicle ;
1532: LD_ADDR_VAR 0 2
1536: PUSH
1537: CALL_OW 45
1541: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1542: LD_VAR 0 2
1546: PPUSH
1547: LD_INT 2
1549: PPUSH
1550: CALL_OW 233
// PlaceUnitXY ( veh , 63 , 9 , false ) ;
1554: LD_VAR 0 2
1558: PPUSH
1559: LD_INT 63
1561: PPUSH
1562: LD_INT 9
1564: PPUSH
1565: LD_INT 0
1567: PPUSH
1568: CALL_OW 48
// SetCargo ( veh , mat_artifact , 30 ) ;
1572: LD_VAR 0 2
1576: PPUSH
1577: LD_INT 4
1579: PPUSH
1580: LD_INT 30
1582: PPUSH
1583: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , debug ) then
1587: LD_STRING 11_artifact_captured
1589: PPUSH
1590: LD_EXP 1
1594: PPUSH
1595: CALL_OW 30
1599: IFFALSE 1675
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1601: LD_INT 3
1603: PPUSH
1604: LD_INT 3
1606: PPUSH
1607: LD_INT 3
1609: PPUSH
1610: LD_INT 12
1612: PPUSH
1613: LD_INT 100
1615: PPUSH
1616: CALL 18484 0 5
// veh := CreateVehicle ;
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: CALL_OW 45
1629: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1630: LD_VAR 0 2
1634: PPUSH
1635: LD_INT 2
1637: PPUSH
1638: CALL_OW 233
// PlaceUnitXY ( veh , 60 , 4 , false ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_INT 60
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 0
1655: PPUSH
1656: CALL_OW 48
// SetCargo ( veh , mat_artifact , 50 ) ;
1660: LD_VAR 0 2
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: LD_INT 50
1670: PPUSH
1671: CALL_OW 290
// end ; end ;
1675: LD_VAR 0 1
1679: RET
// export function PrepareGossudarov ; var tmp , i ; begin
1680: LD_INT 0
1682: PPUSH
1683: PPUSH
1684: PPUSH
// uc_side := 6 ;
1685: LD_ADDR_OWVAR 20
1689: PUSH
1690: LD_INT 6
1692: ST_TO_ADDR
// uc_nation := 3 ;
1693: LD_ADDR_OWVAR 21
1697: PUSH
1698: LD_INT 3
1700: ST_TO_ADDR
// InitHc ;
1701: CALL_OW 19
// Gossudarov := NewCharacter ( Gossudarov ) ;
1705: LD_ADDR_EXP 31
1709: PUSH
1710: LD_STRING Gossudarov
1712: PPUSH
1713: CALL_OW 25
1717: ST_TO_ADDR
// Kirilenkova := NewCharacter ( Kirilenkova ) ;
1718: LD_ADDR_EXP 32
1722: PUSH
1723: LD_STRING Kirilenkova
1725: PPUSH
1726: CALL_OW 25
1730: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
1731: LD_ADDR_EXP 33
1735: PUSH
1736: LD_STRING Titov
1738: PPUSH
1739: CALL_OW 25
1743: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
1744: LD_ADDR_EXP 38
1748: PUSH
1749: LD_STRING Oblukov
1751: PPUSH
1752: CALL_OW 25
1756: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
1757: LD_ADDR_EXP 35
1761: PUSH
1762: LD_STRING Dolgov
1764: PPUSH
1765: CALL_OW 25
1769: ST_TO_ADDR
// Petrosyan := NewCharacter ( Petrosyan ) ;
1770: LD_ADDR_EXP 36
1774: PUSH
1775: LD_STRING Petrosyan
1777: PPUSH
1778: CALL_OW 25
1782: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
1783: LD_ADDR_EXP 37
1787: PUSH
1788: LD_STRING Scholtze
1790: PPUSH
1791: CALL_OW 25
1795: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
1796: LD_ADDR_EXP 39
1800: PUSH
1801: LD_STRING Kapitsova
1803: PPUSH
1804: CALL_OW 25
1808: ST_TO_ADDR
// tmp := [ Gossudarov , Kirilenkova , Titov , Oblukov , Dolgov , Petrosyan , Scholtze , Kapitsova ] ;
1809: LD_ADDR_VAR 0 2
1813: PUSH
1814: LD_EXP 31
1818: PUSH
1819: LD_EXP 32
1823: PUSH
1824: LD_EXP 33
1828: PUSH
1829: LD_EXP 38
1833: PUSH
1834: LD_EXP 35
1838: PUSH
1839: LD_EXP 36
1843: PUSH
1844: LD_EXP 37
1848: PUSH
1849: LD_EXP 39
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: ST_TO_ADDR
// for i in tmp do
1864: LD_ADDR_VAR 0 3
1868: PUSH
1869: LD_VAR 0 2
1873: PUSH
1874: FOR_IN
1875: IFFALSE 1894
// PlaceUnitArea ( i , gossudarov_spawn , false ) ;
1877: LD_VAR 0 3
1881: PPUSH
1882: LD_INT 14
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL_OW 49
1892: GO 1874
1894: POP
1895: POP
// ComMoveXY ( tmp , GetX ( freedom ) , GetY ( freedom ) ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_EXP 3
1905: PPUSH
1906: CALL_OW 250
1910: PPUSH
1911: LD_EXP 3
1915: PPUSH
1916: CALL_OW 251
1920: PPUSH
1921: CALL_OW 111
// end ;
1925: LD_VAR 0 1
1929: RET
// export function PrepareBelkov ; begin
1930: LD_INT 0
1932: PPUSH
// uc_side := 4 ;
1933: LD_ADDR_OWVAR 20
1937: PUSH
1938: LD_INT 4
1940: ST_TO_ADDR
// uc_nation := 3 ;
1941: LD_ADDR_OWVAR 21
1945: PUSH
1946: LD_INT 3
1948: ST_TO_ADDR
// InitHc ;
1949: CALL_OW 19
// Belkov := NewCharacter ( Belkov ) ;
1953: LD_ADDR_EXP 46
1957: PUSH
1958: LD_STRING Belkov
1960: PPUSH
1961: CALL_OW 25
1965: ST_TO_ADDR
// PlaceUnitArea ( Belkov , gossudarov_spawn , false ) ;
1966: LD_EXP 46
1970: PPUSH
1971: LD_INT 14
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 49
// end ;
1981: LD_VAR 0 1
1985: RET
// export function PrepareGnyevko ; begin
1986: LD_INT 0
1988: PPUSH
// uc_side := 4 ;
1989: LD_ADDR_OWVAR 20
1993: PUSH
1994: LD_INT 4
1996: ST_TO_ADDR
// uc_nation := 3 ;
1997: LD_ADDR_OWVAR 21
2001: PUSH
2002: LD_INT 3
2004: ST_TO_ADDR
// InitHc ;
2005: CALL_OW 19
// Gnyevko := NewCharacter ( Gnyevko ) ;
2009: LD_ADDR_EXP 47
2013: PUSH
2014: LD_STRING Gnyevko
2016: PPUSH
2017: CALL_OW 25
2021: ST_TO_ADDR
// PlaceUnitArea ( Gnyevko , gossudarov_spawn , false ) ;
2022: LD_EXP 47
2026: PPUSH
2027: LD_INT 14
2029: PPUSH
2030: LD_INT 0
2032: PPUSH
2033: CALL_OW 49
// end ;
2037: LD_VAR 0 1
2041: RET
// export function PrepareBurlak ; var i , tmp ; begin
2042: LD_INT 0
2044: PPUSH
2045: PPUSH
2046: PPUSH
// uc_side := 4 ;
2047: LD_ADDR_OWVAR 20
2051: PUSH
2052: LD_INT 4
2054: ST_TO_ADDR
// uc_nation := 3 ;
2055: LD_ADDR_OWVAR 21
2059: PUSH
2060: LD_INT 3
2062: ST_TO_ADDR
// InitHc ;
2063: CALL_OW 19
// Burlak := NewCharacter ( Burlak ) ;
2067: LD_ADDR_EXP 45
2071: PUSH
2072: LD_STRING Burlak
2074: PPUSH
2075: CALL_OW 25
2079: ST_TO_ADDR
// PrepareVehicle ( [ ru_heavy_tracked , ru_heavy_wheeled , ru_medium_tracked ] [ Difficulty ] , engine_combustion , control_manual , ru_rocket_launcher , 0 ) ;
2080: LD_INT 24
2082: PUSH
2083: LD_INT 23
2085: PUSH
2086: LD_INT 22
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: PUSH
2094: LD_OWVAR 67
2098: ARRAY
2099: PPUSH
2100: LD_INT 1
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 45
2108: PPUSH
2109: LD_INT 0
2111: PPUSH
2112: CALL 18484 0 5
// Masha := CreateVehicle ;
2116: LD_ADDR_EXP 48
2120: PUSH
2121: CALL_OW 45
2125: ST_TO_ADDR
// SetLives ( [ Masha , Burlak ] , 499 ) ;
2126: LD_EXP 48
2130: PUSH
2131: LD_EXP 45
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PPUSH
2140: LD_INT 499
2142: PPUSH
2143: CALL_OW 234
// SetDir ( Masha , 3 ) ;
2147: LD_EXP 48
2151: PPUSH
2152: LD_INT 3
2154: PPUSH
2155: CALL_OW 233
// SetMark ( Masha , 1 ) ;
2159: LD_EXP 48
2163: PPUSH
2164: LD_INT 1
2166: PPUSH
2167: CALL_OW 242
// PlaceUnitArea ( Masha , burlak_spawn , false ) ;
2171: LD_EXP 48
2175: PPUSH
2176: LD_INT 18
2178: PPUSH
2179: LD_INT 0
2181: PPUSH
2182: CALL_OW 49
// PlaceUnitXY ( Burlak , 125 , 1 , false ) ;
2186: LD_EXP 45
2190: PPUSH
2191: LD_INT 125
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: LD_INT 0
2199: PPUSH
2200: CALL_OW 48
// ComMoveUnit ( Burlak , Masha ) ;
2204: LD_EXP 45
2208: PPUSH
2209: LD_EXP 48
2213: PPUSH
2214: CALL_OW 112
// wait ( 0 0$0.3 ) ;
2218: LD_INT 10
2220: PPUSH
2221: CALL_OW 67
// AddComMoveXY ( Masha , 110 , 10 ) ;
2225: LD_EXP 48
2229: PPUSH
2230: LD_INT 110
2232: PPUSH
2233: LD_INT 10
2235: PPUSH
2236: CALL_OW 171
// Petrovova := NewCharacter ( Petrovova ) ;
2240: LD_ADDR_EXP 41
2244: PUSH
2245: LD_STRING Petrovova
2247: PPUSH
2248: CALL_OW 25
2252: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
2253: LD_ADDR_EXP 43
2257: PUSH
2258: LD_STRING Kuzmov
2260: PPUSH
2261: CALL_OW 25
2265: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
2266: LD_ADDR_EXP 42
2270: PUSH
2271: LD_STRING Kovalyuk
2273: PPUSH
2274: CALL_OW 25
2278: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
2279: LD_ADDR_EXP 40
2283: PUSH
2284: LD_STRING Lipshchin
2286: PPUSH
2287: CALL_OW 25
2291: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
2292: LD_ADDR_EXP 44
2296: PUSH
2297: LD_STRING Karamazov
2299: PPUSH
2300: CALL_OW 25
2304: ST_TO_ADDR
// tmp := [ Petrovova , Kuzmov , Kovalyuk , Lipshchin , Karamazov ] ;
2305: LD_ADDR_VAR 0 3
2309: PUSH
2310: LD_EXP 41
2314: PUSH
2315: LD_EXP 43
2319: PUSH
2320: LD_EXP 42
2324: PUSH
2325: LD_EXP 40
2329: PUSH
2330: LD_EXP 44
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// for i in tmp do
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_VAR 0 3
2351: PUSH
2352: FOR_IN
2353: IFFALSE 2392
// begin SetLives ( i , rand ( 399 , 799 ) ) ;
2355: LD_VAR 0 2
2359: PPUSH
2360: LD_INT 399
2362: PPUSH
2363: LD_INT 799
2365: PPUSH
2366: CALL_OW 12
2370: PPUSH
2371: CALL_OW 234
// PlaceUnitArea ( i , burlak_friends_spawn , false ) ;
2375: LD_VAR 0 2
2379: PPUSH
2380: LD_INT 19
2382: PPUSH
2383: LD_INT 0
2385: PPUSH
2386: CALL_OW 49
// end ;
2390: GO 2352
2392: POP
2393: POP
// ComMoveXY ( tmp , 116 , 8 ) ;
2394: LD_VAR 0 3
2398: PPUSH
2399: LD_INT 116
2401: PPUSH
2402: LD_INT 8
2404: PPUSH
2405: CALL_OW 111
// AddComHold ( tmp ) ;
2409: LD_VAR 0 3
2413: PPUSH
2414: CALL_OW 200
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
2418: LD_ADDR_VAR 0 2
2422: PUSH
2423: LD_VAR 0 3
2427: PPUSH
2428: LD_INT 25
2430: PUSH
2431: LD_INT 1
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PPUSH
2438: CALL_OW 72
2442: PUSH
2443: FOR_IN
2444: IFFALSE 2484
// begin AddComMoveToArea ( i , burlak_crawl_area ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 20
2453: PPUSH
2454: CALL_OW 173
// AddComTurnXY ( i , 147 , 45 ) ;
2458: LD_VAR 0 2
2462: PPUSH
2463: LD_INT 147
2465: PPUSH
2466: LD_INT 45
2468: PPUSH
2469: CALL_OW 178
// AddComCrawl ( i ) ;
2473: LD_VAR 0 2
2477: PPUSH
2478: CALL_OW 197
// end ;
2482: GO 2443
2484: POP
2485: POP
// repeat wait ( 0 0$1 ) ;
2486: LD_INT 35
2488: PPUSH
2489: CALL_OW 67
// until IsAt ( Masha , 110 , 10 ) ;
2493: LD_EXP 48
2497: PPUSH
2498: LD_INT 110
2500: PPUSH
2501: LD_INT 10
2503: PPUSH
2504: CALL_OW 307
2508: IFFALSE 2486
// ComStop ( Burlak ) ;
2510: LD_EXP 45
2514: PPUSH
2515: CALL_OW 141
// AddComHold ( Burlak ) ;
2519: LD_EXP 45
2523: PPUSH
2524: CALL_OW 200
// end ; end_of_file
2528: LD_VAR 0 1
2532: RET
// export russian_force , russian_guard , ru_attackers ; export function PrepareRussian ; var i , veh , tmp ; begin
2533: LD_INT 0
2535: PPUSH
2536: PPUSH
2537: PPUSH
2538: PPUSH
// uc_side := 3 ;
2539: LD_ADDR_OWVAR 20
2543: PUSH
2544: LD_INT 3
2546: ST_TO_ADDR
// uc_nation := 3 ;
2547: LD_ADDR_OWVAR 21
2551: PUSH
2552: LD_INT 3
2554: ST_TO_ADDR
// russian_force := PrepareBase ( ru_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 10000 , 3000 , 300 ] , [ 9 , 5 , 6 , 6 ] ) ;
2555: LD_ADDR_EXP 49
2559: PUSH
2560: LD_INT 47
2562: PPUSH
2563: LD_STRING 
2565: PPUSH
2566: LD_INT 7
2568: PUSH
2569: LD_INT 8
2571: PUSH
2572: LD_INT 9
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: LIST
2579: PUSH
2580: LD_OWVAR 67
2584: ARRAY
2585: PPUSH
2586: LD_INT 10000
2588: PUSH
2589: LD_INT 3000
2591: PUSH
2592: LD_INT 300
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: LD_INT 9
2602: PUSH
2603: LD_INT 5
2605: PUSH
2606: LD_INT 6
2608: PUSH
2609: LD_INT 6
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: PPUSH
2618: CALL 21883 0 5
2622: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , russian_force ) ;
2623: LD_ADDR_EXP 57
2627: PUSH
2628: LD_EXP 57
2632: PPUSH
2633: LD_INT 2
2635: PPUSH
2636: LD_EXP 49
2640: PPUSH
2641: CALL_OW 1
2645: ST_TO_ADDR
// tmp := [ ] ;
2646: LD_ADDR_VAR 0 4
2650: PUSH
2651: EMPTY
2652: ST_TO_ADDR
// for i = 1 to 4 do
2653: LD_ADDR_VAR 0 2
2657: PUSH
2658: DOUBLE
2659: LD_INT 1
2661: DEC
2662: ST_TO_ADDR
2663: LD_INT 4
2665: PUSH
2666: FOR_TO
2667: IFFALSE 2760
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun ] [ i mod 4 + 1 ] , 100 ) ;
2669: LD_INT 22
2671: PPUSH
2672: LD_INT 3
2674: PPUSH
2675: LD_INT 3
2677: PPUSH
2678: LD_INT 43
2680: PUSH
2681: LD_INT 45
2683: PUSH
2684: LD_INT 45
2686: PUSH
2687: LD_INT 44
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: PUSH
2696: LD_VAR 0 2
2700: PUSH
2701: LD_INT 4
2703: MOD
2704: PUSH
2705: LD_INT 1
2707: PLUS
2708: ARRAY
2709: PPUSH
2710: LD_INT 100
2712: PPUSH
2713: CALL 18484 0 5
// veh := CreateVehicle ;
2717: LD_ADDR_VAR 0 3
2721: PUSH
2722: CALL_OW 45
2726: ST_TO_ADDR
// tmp := tmp ^ veh ;
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: LD_VAR 0 4
2736: PUSH
2737: LD_VAR 0 3
2741: ADD
2742: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_russian , false ) ;
2743: LD_VAR 0 3
2747: PPUSH
2748: LD_INT 2
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: CALL_OW 49
// end ;
2758: GO 2666
2760: POP
2761: POP
// russian_guard := tmp ;
2762: LD_ADDR_EXP 50
2766: PUSH
2767: LD_VAR 0 4
2771: ST_TO_ADDR
// end ;
2772: LD_VAR 0 1
2776: RET
// every 6 6$00 + 2 2$00 trigger IsOk ( ru_depot ) and player_spotted do var i , base , tmp , flags , _target , attackers ;
2777: LD_INT 47
2779: PPUSH
2780: CALL_OW 302
2784: PUSH
2785: LD_EXP 6
2789: AND
2790: IFFALSE 3403
2792: GO 2794
2794: DISABLE
2795: LD_INT 0
2797: PPUSH
2798: PPUSH
2799: PPUSH
2800: PPUSH
2801: PPUSH
2802: PPUSH
// begin enable ;
2803: ENABLE
// base := 2 ;
2804: LD_ADDR_VAR 0 2
2808: PUSH
2809: LD_INT 2
2811: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
2812: LD_ADDR_VAR 0 4
2816: PUSH
2817: LD_INT 0
2819: PUSH
2820: LD_INT 0
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: LD_INT 0
2828: PUSH
2829: LD_INT 0
2831: PUSH
2832: LD_INT 0
2834: PUSH
2835: LD_INT 0
2837: PUSH
2838: LD_INT 0
2840: PUSH
2841: LD_INT 1
2843: PUSH
2844: LD_INT 0
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: ST_TO_ADDR
// tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] ] ;
2859: LD_ADDR_VAR 0 3
2863: PUSH
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: LD_INT 3
2872: PUSH
2873: LD_INT 45
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: LD_INT 21
2884: PUSH
2885: LD_INT 1
2887: PUSH
2888: LD_INT 3
2890: PUSH
2891: LD_INT 45
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: PUSH
2900: LD_INT 22
2902: PUSH
2903: LD_INT 1
2905: PUSH
2906: LD_INT 3
2908: PUSH
2909: LD_INT 45
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 23
2920: PUSH
2921: LD_INT 1
2923: PUSH
2924: LD_INT 3
2926: PUSH
2927: LD_INT 46
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
2942: LD_ADDR_VAR 0 1
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_OWVAR 67
2956: PUSH
2957: LD_OWVAR 1
2961: PUSH
2962: LD_INT 21000
2964: DIV
2965: PLUS
2966: PUSH
2967: FOR_TO
2968: IFFALSE 3056
// tmp := Insert ( tmp , tmp + 1 , [ [ ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
2970: LD_ADDR_VAR 0 3
2974: PUSH
2975: LD_VAR 0 3
2979: PPUSH
2980: LD_VAR 0 3
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: PPUSH
2989: LD_INT 23
2991: PUSH
2992: LD_INT 24
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 1
3001: PPUSH
3002: LD_INT 2
3004: PPUSH
3005: CALL_OW 12
3009: ARRAY
3010: PUSH
3011: LD_INT 1
3013: PUSH
3014: LD_INT 3
3016: PUSH
3017: LD_INT 46
3019: PUSH
3020: LD_INT 47
3022: PUSH
3023: LD_INT 45
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 1
3033: PPUSH
3034: LD_INT 3
3036: PPUSH
3037: CALL_OW 12
3041: ARRAY
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 2
3053: ST_TO_ADDR
3054: GO 2967
3056: POP
3057: POP
// MC_SetProduceList ( base , tmp ) ;
3058: LD_VAR 0 2
3062: PPUSH
3063: LD_VAR 0 3
3067: PPUSH
3068: CALL 63238 0 2
// repeat wait ( 0 0$1 ) ;
3072: LD_INT 35
3074: PPUSH
3075: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
3079: LD_VAR 0 2
3083: PPUSH
3084: CALL 63599 0 1
3088: PUSH
3089: LD_INT 0
3091: EQUAL
3092: IFFALSE 3072
// wait ( 0 0$20 ) ;
3094: LD_INT 700
3096: PPUSH
3097: CALL_OW 67
// _target := [ [ 71 , 19 ] , [ 91 , 67 ] , [ 52 , 44 ] , [ 68 , 48 ] ] ;
3101: LD_ADDR_VAR 0 5
3105: PUSH
3106: LD_INT 71
3108: PUSH
3109: LD_INT 19
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 91
3118: PUSH
3119: LD_INT 67
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 52
3128: PUSH
3129: LD_INT 44
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 68
3138: PUSH
3139: LD_INT 48
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] ] ) ) ;
3152: LD_ADDR_VAR 0 6
3156: PUSH
3157: LD_EXP 76
3161: PUSH
3162: LD_VAR 0 2
3166: ARRAY
3167: PUSH
3168: LD_EXP 79
3172: PUSH
3173: LD_VAR 0 2
3177: ARRAY
3178: PUSH
3179: LD_EXP 76
3183: PUSH
3184: LD_VAR 0 2
3188: ARRAY
3189: PPUSH
3190: LD_INT 2
3192: PUSH
3193: LD_INT 34
3195: PUSH
3196: LD_INT 51
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 34
3205: PUSH
3206: LD_INT 52
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: LIST
3217: PPUSH
3218: CALL_OW 72
3222: UNION
3223: DIFF
3224: ST_TO_ADDR
// if not attackers then
3225: LD_VAR 0 6
3229: NOT
3230: IFFALSE 3234
// exit ;
3232: GO 3403
// ru_attackers := attackers ;
3234: LD_ADDR_EXP 51
3238: PUSH
3239: LD_VAR 0 6
3243: ST_TO_ADDR
// for i = 1 to attackers do
3244: LD_ADDR_VAR 0 1
3248: PUSH
3249: DOUBLE
3250: LD_INT 1
3252: DEC
3253: ST_TO_ADDR
3254: LD_VAR 0 6
3258: PUSH
3259: FOR_TO
3260: IFFALSE 3337
// begin case i mod 3 of 0 :
3262: LD_VAR 0 1
3266: PUSH
3267: LD_INT 3
3269: MOD
3270: PUSH
3271: LD_INT 0
3273: DOUBLE
3274: EQUAL
3275: IFTRUE 3279
3277: GO 3282
3279: POP
// ; 1 :
3280: GO 3335
3282: LD_INT 1
3284: DOUBLE
3285: EQUAL
3286: IFTRUE 3290
3288: GO 3308
3290: POP
// ComAgressiveMove ( i , 32 , 49 ) ; 2 :
3291: LD_VAR 0 1
3295: PPUSH
3296: LD_INT 32
3298: PPUSH
3299: LD_INT 49
3301: PPUSH
3302: CALL_OW 114
3306: GO 3335
3308: LD_INT 2
3310: DOUBLE
3311: EQUAL
3312: IFTRUE 3316
3314: GO 3334
3316: POP
// ComAgressiveMove ( i , 117 , 107 ) ; end ;
3317: LD_VAR 0 1
3321: PPUSH
3322: LD_INT 117
3324: PPUSH
3325: LD_INT 107
3327: PPUSH
3328: CALL_OW 114
3332: GO 3335
3334: POP
// end ;
3335: GO 3259
3337: POP
3338: POP
// repeat wait ( 0 0$1 ) ;
3339: LD_INT 35
3341: PPUSH
3342: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
3346: LD_VAR 0 6
3350: PPUSH
3351: LD_INT 60
3353: PUSH
3354: EMPTY
3355: LIST
3356: PPUSH
3357: CALL_OW 72
3361: NOT
3362: IFFALSE 3339
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
3364: LD_VAR 0 2
3368: PPUSH
3369: LD_VAR 0 6
3373: PPUSH
3374: LD_VAR 0 5
3378: PPUSH
3379: LD_VAR 0 4
3383: PPUSH
3384: CALL 63484 0 4
// if not first_attack then
3388: LD_EXP 7
3392: NOT
3393: IFFALSE 3403
// first_attack := true ;
3395: LD_ADDR_EXP 7
3399: PUSH
3400: LD_INT 1
3402: ST_TO_ADDR
// end ; end_of_file
3403: PPOPN 6
3405: END
// export arabian_force , arabian_guard , Abdul , mastodont ; export function PrepareArabian ; var i , veh , tmp , xy , un , un2 ; begin
3406: LD_INT 0
3408: PPUSH
3409: PPUSH
3410: PPUSH
3411: PPUSH
3412: PPUSH
3413: PPUSH
3414: PPUSH
// uc_side := 2 ;
3415: LD_ADDR_OWVAR 20
3419: PUSH
3420: LD_INT 2
3422: ST_TO_ADDR
// uc_nation := 2 ;
3423: LD_ADDR_OWVAR 21
3427: PUSH
3428: LD_INT 2
3430: ST_TO_ADDR
// Abdul := NewCharacter ( Abdul ) ;
3431: LD_ADDR_EXP 54
3435: PUSH
3436: LD_STRING Abdul
3438: PPUSH
3439: CALL_OW 25
3443: ST_TO_ADDR
// SetClass ( Abdul , class_desert_warior ) ;
3444: LD_EXP 54
3448: PPUSH
3449: LD_INT 11
3451: PPUSH
3452: CALL_OW 336
// PlaceHumanInUnit ( Abdul , ar_depot ) ;
3456: LD_EXP 54
3460: PPUSH
3461: LD_INT 1
3463: PPUSH
3464: CALL_OW 52
// vc_chassis := 31 ;
3468: LD_ADDR_OWVAR 37
3472: PUSH
3473: LD_INT 31
3475: ST_TO_ADDR
// vc_control := control_rider ;
3476: LD_ADDR_OWVAR 38
3480: PUSH
3481: LD_INT 4
3483: ST_TO_ADDR
// mastodont := CreateVehicle ;
3484: LD_ADDR_EXP 55
3488: PUSH
3489: CALL_OW 45
3493: ST_TO_ADDR
// PlaceUnitXY ( mastodont , 153 , 71 , false ) ;
3494: LD_EXP 55
3498: PPUSH
3499: LD_INT 153
3501: PPUSH
3502: LD_INT 71
3504: PPUSH
3505: LD_INT 0
3507: PPUSH
3508: CALL_OW 48
// InitVc ;
3512: CALL_OW 20
// arabian_force := PrepareBase ( ar_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 5000 , 1000 , 300 ] , [ 22 , 5 , 6 , 9 ] ) ;
3516: LD_ADDR_EXP 52
3520: PUSH
3521: LD_INT 1
3523: PPUSH
3524: LD_STRING 
3526: PPUSH
3527: LD_INT 7
3529: PUSH
3530: LD_INT 8
3532: PUSH
3533: LD_INT 9
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: LIST
3540: PUSH
3541: LD_OWVAR 67
3545: ARRAY
3546: PPUSH
3547: LD_INT 5000
3549: PUSH
3550: LD_INT 1000
3552: PUSH
3553: LD_INT 300
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: PPUSH
3561: LD_INT 22
3563: PUSH
3564: LD_INT 5
3566: PUSH
3567: LD_INT 6
3569: PUSH
3570: LD_INT 9
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: PPUSH
3579: CALL 21883 0 5
3583: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , arabian_force ) ;
3584: LD_ADDR_EXP 57
3588: PUSH
3589: LD_EXP 57
3593: PPUSH
3594: LD_INT 1
3596: PPUSH
3597: LD_EXP 52
3601: PPUSH
3602: CALL_OW 1
3606: ST_TO_ADDR
// tmp := [ ] ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: EMPTY
3613: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
3614: LD_ADDR_OWVAR 37
3618: PUSH
3619: LD_INT 14
3621: ST_TO_ADDR
// vc_engine := engine_siberite ;
3622: LD_ADDR_OWVAR 39
3626: PUSH
3627: LD_INT 3
3629: ST_TO_ADDR
// vc_control := control_manual ;
3630: LD_ADDR_OWVAR 38
3634: PUSH
3635: LD_INT 1
3637: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
3638: LD_ADDR_OWVAR 40
3642: PUSH
3643: LD_INT 31
3645: ST_TO_ADDR
// for i = 1 to 3 do
3646: LD_ADDR_VAR 0 2
3650: PUSH
3651: DOUBLE
3652: LD_INT 1
3654: DEC
3655: ST_TO_ADDR
3656: LD_INT 3
3658: PUSH
3659: FOR_TO
3660: IFFALSE 3904
// begin xy := [ [ 153 , 71 ] , [ 155 , 81 ] ] [ i mod 2 + 1 ] ;
3662: LD_ADDR_VAR 0 5
3666: PUSH
3667: LD_INT 153
3669: PUSH
3670: LD_INT 71
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 155
3679: PUSH
3680: LD_INT 81
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PUSH
3691: LD_VAR 0 2
3695: PUSH
3696: LD_INT 2
3698: MOD
3699: PUSH
3700: LD_INT 1
3702: PLUS
3703: ARRAY
3704: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
3705: LD_INT 0
3707: PPUSH
3708: LD_INT 3
3710: PPUSH
3711: LD_INT 7
3713: PUSH
3714: LD_INT 8
3716: PUSH
3717: LD_INT 9
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: LIST
3724: PUSH
3725: LD_OWVAR 67
3729: ARRAY
3730: PPUSH
3731: CALL_OW 380
// un := CreateVehicle ;
3735: LD_ADDR_VAR 0 6
3739: PUSH
3740: CALL_OW 45
3744: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3745: LD_VAR 0 6
3749: PPUSH
3750: LD_INT 0
3752: PPUSH
3753: LD_INT 5
3755: PPUSH
3756: CALL_OW 12
3760: PPUSH
3761: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
3765: LD_VAR 0 6
3769: PPUSH
3770: LD_VAR 0 5
3774: PUSH
3775: LD_INT 1
3777: ARRAY
3778: PPUSH
3779: LD_VAR 0 5
3783: PUSH
3784: LD_INT 2
3786: ARRAY
3787: PPUSH
3788: LD_INT 6
3790: PPUSH
3791: LD_INT 0
3793: PPUSH
3794: CALL_OW 50
// un2 := CreateHuman ;
3798: LD_ADDR_VAR 0 7
3802: PUSH
3803: CALL_OW 44
3807: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
3808: LD_VAR 0 7
3812: PPUSH
3813: LD_VAR 0 6
3817: PPUSH
3818: CALL_OW 52
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un ) ;
3822: LD_ADDR_EXP 57
3826: PUSH
3827: LD_EXP 57
3831: PPUSH
3832: LD_INT 1
3834: PUSH
3835: LD_EXP 57
3839: PUSH
3840: LD_INT 1
3842: ARRAY
3843: PUSH
3844: LD_INT 1
3846: PLUS
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PPUSH
3852: LD_VAR 0 6
3856: PPUSH
3857: CALL 19041 0 3
3861: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un2 ) ;
3862: LD_ADDR_EXP 57
3866: PUSH
3867: LD_EXP 57
3871: PPUSH
3872: LD_INT 1
3874: PUSH
3875: LD_EXP 57
3879: PUSH
3880: LD_INT 1
3882: ARRAY
3883: PUSH
3884: LD_INT 1
3886: PLUS
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PPUSH
3892: LD_VAR 0 7
3896: PPUSH
3897: CALL 19041 0 3
3901: ST_TO_ADDR
// end ;
3902: GO 3659
3904: POP
3905: POP
// for i = 1 to 5 do
3906: LD_ADDR_VAR 0 2
3910: PUSH
3911: DOUBLE
3912: LD_INT 1
3914: DEC
3915: ST_TO_ADDR
3916: LD_INT 5
3918: PUSH
3919: FOR_TO
3920: IFFALSE 4013
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gatling_gun , ar_rocket_launcher , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 100 ) ;
3922: LD_INT 14
3924: PPUSH
3925: LD_INT 3
3927: PPUSH
3928: LD_INT 1
3930: PPUSH
3931: LD_INT 25
3933: PUSH
3934: LD_INT 28
3936: PUSH
3937: LD_INT 28
3939: PUSH
3940: LD_INT 26
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: PUSH
3949: LD_VAR 0 2
3953: PUSH
3954: LD_INT 4
3956: MOD
3957: PUSH
3958: LD_INT 1
3960: PLUS
3961: ARRAY
3962: PPUSH
3963: LD_INT 100
3965: PPUSH
3966: CALL 18484 0 5
// veh := CreateVehicle ;
3970: LD_ADDR_VAR 0 3
3974: PUSH
3975: CALL_OW 45
3979: ST_TO_ADDR
// tmp := tmp ^ veh ;
3980: LD_ADDR_VAR 0 4
3984: PUSH
3985: LD_VAR 0 4
3989: PUSH
3990: LD_VAR 0 3
3994: ADD
3995: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_arabian , false ) ;
3996: LD_VAR 0 3
4000: PPUSH
4001: LD_INT 1
4003: PPUSH
4004: LD_INT 0
4006: PPUSH
4007: CALL_OW 49
// end ;
4011: GO 3919
4013: POP
4014: POP
// arabian_guard := tmp ;
4015: LD_ADDR_EXP 53
4019: PUSH
4020: LD_VAR 0 4
4024: ST_TO_ADDR
// end ;
4025: LD_VAR 0 1
4029: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , ar_depot , 12 ] ] ) or GetLives ( Mastodont ) < 990 or GetLives ( Abdul ) < 990 do
4030: LD_INT 22
4032: PUSH
4033: LD_INT 7
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: LD_INT 91
4042: PUSH
4043: LD_INT 1
4045: PUSH
4046: LD_INT 12
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: LIST
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: PPUSH
4058: CALL_OW 69
4062: PUSH
4063: LD_EXP 55
4067: PPUSH
4068: CALL_OW 256
4072: PUSH
4073: LD_INT 990
4075: LESS
4076: OR
4077: PUSH
4078: LD_EXP 54
4082: PPUSH
4083: CALL_OW 256
4087: PUSH
4088: LD_INT 990
4090: LESS
4091: OR
4092: IFFALSE 4243
4094: GO 4096
4096: DISABLE
// begin if IsInUnit ( Abdul ) then
4097: LD_EXP 54
4101: PPUSH
4102: CALL_OW 310
4106: IFFALSE 4117
// ComExitBuilding ( Abdul ) ;
4108: LD_EXP 54
4112: PPUSH
4113: CALL_OW 122
// if Mastodont then
4117: LD_EXP 55
4121: IFFALSE 4138
// ComMoveXY ( Mastodont , 205 , 132 ) ;
4123: LD_EXP 55
4127: PPUSH
4128: LD_INT 205
4130: PPUSH
4131: LD_INT 132
4133: PPUSH
4134: CALL_OW 111
// AddComMoveXY ( Abdul , 205 , 132 ) ;
4138: LD_EXP 54
4142: PPUSH
4143: LD_INT 205
4145: PPUSH
4146: LD_INT 132
4148: PPUSH
4149: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4153: LD_INT 35
4155: PPUSH
4156: CALL_OW 67
// until IsInArea ( Abdul , escape_area ) ;
4160: LD_EXP 54
4164: PPUSH
4165: LD_INT 21
4167: PPUSH
4168: CALL_OW 308
4172: IFFALSE 4153
// RemoveUnit ( Abdul ) ;
4174: LD_EXP 54
4178: PPUSH
4179: CALL_OW 64
// abdul_escaped := true ;
4183: LD_ADDR_EXP 12
4187: PUSH
4188: LD_INT 1
4190: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4191: LD_INT 35
4193: PPUSH
4194: CALL_OW 67
// until IsInArea ( Mastodont , escape_area ) or IsDead ( Mastodont ) ;
4198: LD_EXP 55
4202: PPUSH
4203: LD_INT 21
4205: PPUSH
4206: CALL_OW 308
4210: PUSH
4211: LD_EXP 55
4215: PPUSH
4216: CALL_OW 301
4220: OR
4221: IFFALSE 4191
// if IsOk ( Mastodont ) then
4223: LD_EXP 55
4227: PPUSH
4228: CALL_OW 302
4232: IFFALSE 4243
// RemoveUnit ( Mastodont ) ;
4234: LD_EXP 55
4238: PPUSH
4239: CALL_OW 64
// end ;
4243: END
// every 12 12$00 trigger ar_active_attack and GetBType ( HexInfo ( 92 , 40 ) ) = b_siberite_mine do var sci ;
4244: LD_EXP 9
4248: PUSH
4249: LD_INT 92
4251: PPUSH
4252: LD_INT 40
4254: PPUSH
4255: CALL_OW 428
4259: PPUSH
4260: CALL_OW 266
4264: PUSH
4265: LD_INT 30
4267: EQUAL
4268: AND
4269: IFFALSE 4465
4271: GO 4273
4273: DISABLE
4274: LD_INT 0
4276: PPUSH
// begin sci := UnitFilter ( mc_bases [ 1 ] , [ f_class , 4 ] ) ;
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: LD_EXP 57
4286: PUSH
4287: LD_INT 1
4289: ARRAY
4290: PPUSH
4291: LD_INT 25
4293: PUSH
4294: LD_INT 4
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PPUSH
4301: CALL_OW 72
4305: ST_TO_ADDR
// if not sci then
4306: LD_VAR 0 1
4310: NOT
4311: IFFALSE 4315
// exit ;
4313: GO 4465
// mc_bases := Replace ( mc_bases , 1 , mc_bases [ 1 ] diff sci [ 1 ] ) ;
4315: LD_ADDR_EXP 57
4319: PUSH
4320: LD_EXP 57
4324: PPUSH
4325: LD_INT 1
4327: PPUSH
4328: LD_EXP 57
4332: PUSH
4333: LD_INT 1
4335: ARRAY
4336: PUSH
4337: LD_VAR 0 1
4341: PUSH
4342: LD_INT 1
4344: ARRAY
4345: DIFF
4346: PPUSH
4347: CALL_OW 1
4351: ST_TO_ADDR
// if IsInUnit ( sci [ 1 ] ) then
4352: LD_VAR 0 1
4356: PUSH
4357: LD_INT 1
4359: ARRAY
4360: PPUSH
4361: CALL_OW 310
4365: IFFALSE 4380
// ComExitBuilding ( sci [ 1 ] ) ;
4367: LD_VAR 0 1
4371: PUSH
4372: LD_INT 1
4374: ARRAY
4375: PPUSH
4376: CALL_OW 122
// if DangerAtRangeXY ( 2 , 105 , 14 , 20 ) [ 4 ] < 10 then
4380: LD_INT 2
4382: PPUSH
4383: LD_INT 105
4385: PPUSH
4386: LD_INT 14
4388: PPUSH
4389: LD_INT 20
4391: PPUSH
4392: CALL 19535 0 4
4396: PUSH
4397: LD_INT 4
4399: ARRAY
4400: PUSH
4401: LD_INT 10
4403: LESS
4404: IFFALSE 4427
// AddComMoveXY ( sci [ 1 ] , 105 , 14 ) else
4406: LD_VAR 0 1
4410: PUSH
4411: LD_INT 1
4413: ARRAY
4414: PPUSH
4415: LD_INT 105
4417: PPUSH
4418: LD_INT 14
4420: PPUSH
4421: CALL_OW 171
4425: GO 4446
// AddComMoveXY ( sci [ 1 ] , 118 , 77 ) ;
4427: LD_VAR 0 1
4431: PUSH
4432: LD_INT 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 118
4438: PPUSH
4439: LD_INT 77
4441: PPUSH
4442: CALL_OW 171
// AddComContaminate ( sci [ 1 ] , 92 , 40 ) ;
4446: LD_VAR 0 1
4450: PUSH
4451: LD_INT 1
4453: ARRAY
4454: PPUSH
4455: LD_INT 92
4457: PPUSH
4458: LD_INT 40
4460: PPUSH
4461: CALL_OW 218
// end ;
4465: PPOPN 1
4467: END
// every 8 8$00 trigger IsOk ( ar_depot ) and ar_active_attack do var i , base , tmp , flags , _target , attackers ;
4468: LD_INT 1
4470: PPUSH
4471: CALL_OW 302
4475: PUSH
4476: LD_EXP 9
4480: AND
4481: IFFALSE 4951
4483: GO 4485
4485: DISABLE
4486: LD_INT 0
4488: PPUSH
4489: PPUSH
4490: PPUSH
4491: PPUSH
4492: PPUSH
4493: PPUSH
// begin enable ;
4494: ENABLE
// base := 1 ;
4495: LD_ADDR_VAR 0 2
4499: PUSH
4500: LD_INT 1
4502: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
4503: LD_ADDR_VAR 0 4
4507: PUSH
4508: LD_INT 0
4510: PUSH
4511: LD_INT 0
4513: PUSH
4514: LD_INT 0
4516: PUSH
4517: LD_INT 0
4519: PUSH
4520: LD_INT 0
4522: PUSH
4523: LD_INT 0
4525: PUSH
4526: LD_INT 0
4528: PUSH
4529: LD_INT 0
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: LD_INT 0
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: ST_TO_ADDR
// tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_flame_thrower ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , ] ;
4550: LD_ADDR_VAR 0 3
4554: PUSH
4555: LD_INT 14
4557: PUSH
4558: LD_INT 1
4560: PUSH
4561: LD_INT 2
4563: PUSH
4564: LD_INT 26
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 14
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: LD_INT 2
4581: PUSH
4582: LD_INT 28
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: PUSH
4591: LD_INT 13
4593: PUSH
4594: LD_INT 1
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: LD_INT 29
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
4614: LD_ADDR_VAR 0 1
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_OWVAR 67
4628: PUSH
4629: LD_OWVAR 1
4633: PUSH
4634: LD_INT 21000
4636: DIV
4637: PLUS
4638: PUSH
4639: FOR_TO
4640: IFFALSE 4732
// tmp := Insert ( tmp , tmp + 1 , [ [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_remote , [ ar_rocket_launcher , ar_selfpropelled_bomb , ar_gatling_gun , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ) ;
4642: LD_ADDR_VAR 0 3
4646: PUSH
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_VAR 0 3
4656: PUSH
4657: LD_INT 1
4659: PLUS
4660: PPUSH
4661: LD_INT 13
4663: PUSH
4664: LD_INT 14
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 1
4673: PPUSH
4674: LD_INT 2
4676: PPUSH
4677: CALL_OW 12
4681: ARRAY
4682: PUSH
4683: LD_INT 1
4685: PUSH
4686: LD_INT 2
4688: PUSH
4689: LD_INT 28
4691: PUSH
4692: LD_INT 29
4694: PUSH
4695: LD_INT 25
4697: PUSH
4698: LD_INT 26
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 1
4709: PPUSH
4710: LD_INT 4
4712: PPUSH
4713: CALL_OW 12
4717: ARRAY
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: PPUSH
4725: CALL_OW 2
4729: ST_TO_ADDR
4730: GO 4639
4732: POP
4733: POP
// MC_SetProduceList ( base , tmp ) ;
4734: LD_VAR 0 2
4738: PPUSH
4739: LD_VAR 0 3
4743: PPUSH
4744: CALL 63238 0 2
// repeat wait ( 0 0$1 ) ;
4748: LD_INT 35
4750: PPUSH
4751: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
4755: LD_VAR 0 2
4759: PPUSH
4760: CALL 63599 0 1
4764: PUSH
4765: LD_INT 0
4767: EQUAL
4768: IFFALSE 4748
// wait ( 0 0$20 ) ;
4770: LD_INT 700
4772: PPUSH
4773: CALL_OW 67
// _target := [ [ 124 , 85 ] , [ 90 , 61 ] , [ 69 , 48 ] , [ 68 , 48 ] ] ;
4777: LD_ADDR_VAR 0 5
4781: PUSH
4782: LD_INT 124
4784: PUSH
4785: LD_INT 85
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 90
4794: PUSH
4795: LD_INT 61
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 69
4804: PUSH
4805: LD_INT 48
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 68
4814: PUSH
4815: LD_INT 48
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , ar_cargo_bay ] ) ) ;
4828: LD_ADDR_VAR 0 6
4832: PUSH
4833: LD_EXP 76
4837: PUSH
4838: LD_VAR 0 2
4842: ARRAY
4843: PUSH
4844: LD_EXP 79
4848: PUSH
4849: LD_VAR 0 2
4853: ARRAY
4854: PUSH
4855: LD_EXP 76
4859: PUSH
4860: LD_VAR 0 2
4864: ARRAY
4865: PPUSH
4866: LD_INT 34
4868: PUSH
4869: LD_INT 32
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 72
4880: UNION
4881: DIFF
4882: ST_TO_ADDR
// if not attackers then
4883: LD_VAR 0 6
4887: NOT
4888: IFFALSE 4892
// exit ;
4890: GO 4951
// ar_attackers := attackers ;
4892: LD_ADDR_EXP 10
4896: PUSH
4897: LD_VAR 0 6
4901: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4902: LD_INT 35
4904: PPUSH
4905: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
4909: LD_VAR 0 6
4913: PPUSH
4914: LD_INT 60
4916: PUSH
4917: EMPTY
4918: LIST
4919: PPUSH
4920: CALL_OW 72
4924: NOT
4925: IFFALSE 4902
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
4927: LD_VAR 0 2
4931: PPUSH
4932: LD_VAR 0 6
4936: PPUSH
4937: LD_VAR 0 5
4941: PPUSH
4942: LD_VAR 0 4
4946: PPUSH
4947: CALL 63484 0 4
// end ;
4951: PPOPN 6
4953: END
// every 12 12$00 trigger IsOk ( ar_depot ) and ar_active_attack and IsInArea ( masha , masha_area ) and MC_GetProduceList ( 1 ) = 0 and not ar_attackers do var i , base , tmp , flags , _target , attackers , un ;
4954: LD_INT 1
4956: PPUSH
4957: CALL_OW 302
4961: PUSH
4962: LD_EXP 9
4966: AND
4967: PUSH
4968: LD_EXP 48
4972: PPUSH
4973: LD_INT 22
4975: PPUSH
4976: CALL_OW 308
4980: AND
4981: PUSH
4982: LD_INT 1
4984: PPUSH
4985: CALL 63599 0 1
4989: PUSH
4990: LD_INT 0
4992: EQUAL
4993: AND
4994: PUSH
4995: LD_EXP 10
4999: NOT
5000: AND
5001: IFFALSE 5476
5003: GO 5005
5005: DISABLE
5006: LD_INT 0
5008: PPUSH
5009: PPUSH
5010: PPUSH
5011: PPUSH
5012: PPUSH
5013: PPUSH
5014: PPUSH
// begin base := 1 ;
5015: LD_ADDR_VAR 0 2
5019: PUSH
5020: LD_INT 1
5022: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
5023: LD_ADDR_VAR 0 4
5027: PUSH
5028: LD_INT 0
5030: PUSH
5031: LD_INT 0
5033: PUSH
5034: LD_INT 0
5036: PUSH
5037: LD_INT 0
5039: PUSH
5040: LD_INT 0
5042: PUSH
5043: LD_INT 0
5045: PUSH
5046: LD_INT 0
5048: PUSH
5049: LD_INT 0
5051: PUSH
5052: LD_INT 1
5054: PUSH
5055: LD_INT 0
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: ST_TO_ADDR
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_hovercraft , engine_solar , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_solar , control_remote , ar_double_machine_gun ] ] ;
5070: LD_ADDR_VAR 0 3
5074: PUSH
5075: LD_INT 13
5077: PUSH
5078: LD_INT 1
5080: PUSH
5081: LD_INT 2
5083: PUSH
5084: LD_INT 28
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: PUSH
5093: LD_INT 13
5095: PUSH
5096: LD_INT 1
5098: PUSH
5099: LD_INT 2
5101: PUSH
5102: LD_INT 27
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: PUSH
5111: LD_INT 13
5113: PUSH
5114: LD_INT 1
5116: PUSH
5117: LD_INT 2
5119: PUSH
5120: LD_INT 25
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: PUSH
5129: LD_INT 11
5131: PUSH
5132: LD_INT 2
5134: PUSH
5135: LD_INT 2
5137: PUSH
5138: LD_INT 24
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: PUSH
5147: LD_INT 11
5149: PUSH
5150: LD_INT 2
5152: PUSH
5153: LD_INT 2
5155: PUSH
5156: LD_INT 24
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: ST_TO_ADDR
// MC_SetProduceList ( base , tmp ) ;
5172: LD_VAR 0 2
5176: PPUSH
5177: LD_VAR 0 3
5181: PPUSH
5182: CALL 63238 0 2
// repeat wait ( 0 0$1 ) ;
5186: LD_INT 35
5188: PPUSH
5189: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
5193: LD_VAR 0 2
5197: PPUSH
5198: CALL 63599 0 1
5202: PUSH
5203: LD_INT 0
5205: EQUAL
5206: IFFALSE 5186
// wait ( 0 0$20 ) ;
5208: LD_INT 700
5210: PPUSH
5211: CALL_OW 67
// _target := [ [ 119 , 9 ] ] ;
5215: LD_ADDR_VAR 0 5
5219: PUSH
5220: LD_INT 119
5222: PUSH
5223: LD_INT 9
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: PUSH
5230: EMPTY
5231: LIST
5232: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , ar_cargo_bay ] ) ) ;
5233: LD_ADDR_VAR 0 6
5237: PUSH
5238: LD_EXP 76
5242: PUSH
5243: LD_VAR 0 2
5247: ARRAY
5248: PUSH
5249: LD_EXP 79
5253: PUSH
5254: LD_VAR 0 2
5258: ARRAY
5259: PUSH
5260: LD_EXP 76
5264: PUSH
5265: LD_VAR 0 2
5269: ARRAY
5270: PPUSH
5271: LD_INT 34
5273: PUSH
5274: LD_INT 32
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PPUSH
5281: CALL_OW 72
5285: UNION
5286: DIFF
5287: ST_TO_ADDR
// if not attackers then
5288: LD_VAR 0 6
5292: NOT
5293: IFFALSE 5297
// exit ;
5295: GO 5476
// uc_side := 2 ;
5297: LD_ADDR_OWVAR 20
5301: PUSH
5302: LD_INT 2
5304: ST_TO_ADDR
// uc_nation := 2 ;
5305: LD_ADDR_OWVAR 21
5309: PUSH
5310: LD_INT 2
5312: ST_TO_ADDR
// InitHc ;
5313: CALL_OW 19
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5317: LD_ADDR_VAR 0 1
5321: PUSH
5322: DOUBLE
5323: LD_INT 1
5325: DEC
5326: ST_TO_ADDR
5327: LD_INT 4
5329: PUSH
5330: LD_INT 5
5332: PUSH
5333: LD_INT 6
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: LIST
5340: PUSH
5341: LD_OWVAR 67
5345: ARRAY
5346: PUSH
5347: FOR_TO
5348: IFFALSE 5425
// begin PrepareHuman ( false , [ class_apeman_soldier , class_apeman_kamikaze ] [ rand ( 1 , 2 ) ] , 8 ) ;
5350: LD_INT 0
5352: PPUSH
5353: LD_INT 15
5355: PUSH
5356: LD_INT 17
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PUSH
5363: LD_INT 1
5365: PPUSH
5366: LD_INT 2
5368: PPUSH
5369: CALL_OW 12
5373: ARRAY
5374: PPUSH
5375: LD_INT 8
5377: PPUSH
5378: CALL_OW 380
// un := CreateHuman ;
5382: LD_ADDR_VAR 0 7
5386: PUSH
5387: CALL_OW 44
5391: ST_TO_ADDR
// PlaceUnitArea ( un , east_spawn , false ) ;
5392: LD_VAR 0 7
5396: PPUSH
5397: LD_INT 23
5399: PPUSH
5400: LD_INT 0
5402: PPUSH
5403: CALL_OW 49
// attackers := attackers union un ;
5407: LD_ADDR_VAR 0 6
5411: PUSH
5412: LD_VAR 0 6
5416: PUSH
5417: LD_VAR 0 7
5421: UNION
5422: ST_TO_ADDR
// end ;
5423: GO 5347
5425: POP
5426: POP
// repeat wait ( 0 0$1 ) ;
5427: LD_INT 35
5429: PPUSH
5430: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
5434: LD_VAR 0 6
5438: PPUSH
5439: LD_INT 60
5441: PUSH
5442: EMPTY
5443: LIST
5444: PPUSH
5445: CALL_OW 72
5449: NOT
5450: IFFALSE 5427
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
5452: LD_VAR 0 2
5456: PPUSH
5457: LD_VAR 0 6
5461: PPUSH
5462: LD_VAR 0 5
5466: PPUSH
5467: LD_VAR 0 4
5471: PPUSH
5472: CALL 63484 0 4
// end ; end_of_file
5476: PPOPN 7
5478: END
// export function Action ; var tmp , i , un ; begin
5479: LD_INT 0
5481: PPUSH
5482: PPUSH
5483: PPUSH
5484: PPUSH
// CenterNowOnXY ( 68 , 39 ) ;
5485: LD_INT 68
5487: PPUSH
5488: LD_INT 39
5490: PPUSH
5491: CALL_OW 86
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
5495: LD_ADDR_VAR 0 2
5499: PUSH
5500: LD_INT 22
5502: PUSH
5503: LD_INT 7
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PPUSH
5510: CALL_OW 69
5514: ST_TO_ADDR
// InGameOn ;
5515: CALL_OW 8
// ComMoveXY ( tmp , 71 , 49 ) ;
5519: LD_VAR 0 2
5523: PPUSH
5524: LD_INT 71
5526: PPUSH
5527: LD_INT 49
5529: PPUSH
5530: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5534: LD_INT 35
5536: PPUSH
5537: CALL_OW 67
// until SeeXY ( 7 , 71 , 51 ) ;
5541: LD_INT 7
5543: PPUSH
5544: LD_INT 71
5546: PPUSH
5547: LD_INT 51
5549: PPUSH
5550: CALL_OW 293
5554: IFFALSE 5534
// DialogueOn ;
5556: CALL_OW 6
// Say ( JMM , D1-JMM-1 ) ;
5560: LD_EXP 14
5564: PPUSH
5565: LD_STRING D1-JMM-1
5567: PPUSH
5568: CALL_OW 88
// if Joan then
5572: LD_EXP 29
5576: IFFALSE 5590
// Say ( Joan , D1-Joan-1 ) ;
5578: LD_EXP 29
5582: PPUSH
5583: LD_STRING D1-Joan-1
5585: PPUSH
5586: CALL_OW 88
// if Lisa then
5590: LD_EXP 16
5594: IFFALSE 5608
// Say ( Lisa , D1-Lisa-1 ) ;
5596: LD_EXP 16
5600: PPUSH
5601: LD_STRING D1-Lisa-1
5603: PPUSH
5604: CALL_OW 88
// if Joan or Lisa then
5608: LD_EXP 29
5612: PUSH
5613: LD_EXP 16
5617: OR
5618: IFFALSE 5632
// Say ( JMM , D1-JMM-2 ) ;
5620: LD_EXP 14
5624: PPUSH
5625: LD_STRING D1-JMM-2
5627: PPUSH
5628: CALL_OW 88
// DialogueOff ;
5632: CALL_OW 7
// InGameOff ;
5636: CALL_OW 9
// PlaceSeeing ( 71 , 50 , 7 , - 30 ) ;
5640: LD_INT 71
5642: PPUSH
5643: LD_INT 50
5645: PPUSH
5646: LD_INT 7
5648: PPUSH
5649: LD_INT 30
5651: NEG
5652: PPUSH
5653: CALL_OW 330
// RemoveSeeing ( 71 , 50 , 7 ) ;
5657: LD_INT 71
5659: PPUSH
5660: LD_INT 50
5662: PPUSH
5663: LD_INT 7
5665: PPUSH
5666: CALL_OW 331
// ChangeMissionObjectives ( M1 ) ;
5670: LD_STRING M1
5672: PPUSH
5673: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5677: LD_INT 35
5679: PPUSH
5680: CALL_OW 67
// until freedom ;
5684: LD_EXP 3
5688: IFFALSE 5677
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
5690: LD_INT 350
5692: PPUSH
5693: LD_INT 700
5695: PPUSH
5696: CALL_OW 12
5700: PPUSH
5701: CALL_OW 67
// PrepareGossudarov ;
5705: CALL 1680 0 0
// repeat wait ( 0 0$1 ) ;
5709: LD_INT 35
5711: PPUSH
5712: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5716: LD_INT 22
5718: PUSH
5719: LD_INT 6
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: PUSH
5726: LD_INT 3
5728: PUSH
5729: LD_INT 24
5731: PUSH
5732: LD_INT 1000
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PPUSH
5747: CALL_OW 69
5751: IFFALSE 5709
// tmp := FilterAllUnits ( [ f_side , 6 ] ) ;
5753: LD_ADDR_VAR 0 2
5757: PUSH
5758: LD_INT 22
5760: PUSH
5761: LD_INT 6
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PPUSH
5768: CALL_OW 69
5772: ST_TO_ADDR
// for i in tmp do
5773: LD_ADDR_VAR 0 3
5777: PUSH
5778: LD_VAR 0 2
5782: PUSH
5783: FOR_IN
5784: IFFALSE 5800
// SetSide ( i , 7 ) ;
5786: LD_VAR 0 3
5790: PPUSH
5791: LD_INT 7
5793: PPUSH
5794: CALL_OW 235
5798: GO 5783
5800: POP
5801: POP
// DialogueOn ;
5802: CALL_OW 6
// ComTurnUnit ( [ JMM , Roth ] , Gossudarov ) ;
5806: LD_EXP 14
5810: PUSH
5811: LD_EXP 15
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PPUSH
5820: LD_EXP 31
5824: PPUSH
5825: CALL_OW 119
// CenterNowOnUnits ( Gossudarov ) ;
5829: LD_EXP 31
5833: PPUSH
5834: CALL_OW 87
// if not Roth then
5838: LD_EXP 15
5842: NOT
5843: IFFALSE 5907
// begin Say ( JMM , D2-JMM-1 ) ;
5845: LD_EXP 14
5849: PPUSH
5850: LD_STRING D2-JMM-1
5852: PPUSH
5853: CALL_OW 88
// Say ( JMM , D2-JMM-1b ) ;
5857: LD_EXP 14
5861: PPUSH
5862: LD_STRING D2-JMM-1b
5864: PPUSH
5865: CALL_OW 88
// Say ( Gossudarov , D2-Gos-1 ) ;
5869: LD_EXP 31
5873: PPUSH
5874: LD_STRING D2-Gos-1
5876: PPUSH
5877: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
5881: LD_EXP 14
5885: PPUSH
5886: LD_STRING D2-JMM-2
5888: PPUSH
5889: CALL_OW 88
// Say ( Gossudarov , D2-Gos-2 ) ;
5893: LD_EXP 31
5897: PPUSH
5898: LD_STRING D2-Gos-2
5900: PPUSH
5901: CALL_OW 88
// end else
5905: GO 6003
// begin Say ( Roth , D2-Roth-2 ) ;
5907: LD_EXP 15
5911: PPUSH
5912: LD_STRING D2-Roth-2
5914: PPUSH
5915: CALL_OW 88
// Say ( JMM , D2-JMM-1a ) ;
5919: LD_EXP 14
5923: PPUSH
5924: LD_STRING D2-JMM-1a
5926: PPUSH
5927: CALL_OW 88
// Say ( Roth , D2-Roth-2a ) ;
5931: LD_EXP 15
5935: PPUSH
5936: LD_STRING D2-Roth-2a
5938: PPUSH
5939: CALL_OW 88
// Say ( Roth , D2-Roth-2b ) ;
5943: LD_EXP 15
5947: PPUSH
5948: LD_STRING D2-Roth-2b
5950: PPUSH
5951: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
5955: LD_EXP 14
5959: PPUSH
5960: LD_STRING D2-JMM-3
5962: PPUSH
5963: CALL_OW 88
// Say ( Gossudarov , D2-Gos-3 ) ;
5967: LD_EXP 31
5971: PPUSH
5972: LD_STRING D2-Gos-3
5974: PPUSH
5975: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
5979: LD_EXP 14
5983: PPUSH
5984: LD_STRING D2-JMM-4
5986: PPUSH
5987: CALL_OW 88
// Say ( Gossudarov , D2-Gos-4 ) ;
5991: LD_EXP 31
5995: PPUSH
5996: LD_STRING D2-Gos-4
5998: PPUSH
5999: CALL_OW 88
// end ; Say ( JMM , D2-JMM-5 ) ;
6003: LD_EXP 14
6007: PPUSH
6008: LD_STRING D2-JMM-5
6010: PPUSH
6011: CALL_OW 88
// Say ( Gossudarov , D2-Gos-5 ) ;
6015: LD_EXP 31
6019: PPUSH
6020: LD_STRING D2-Gos-5
6022: PPUSH
6023: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
6027: LD_EXP 14
6031: PPUSH
6032: LD_STRING D2-JMM-6
6034: PPUSH
6035: CALL_OW 88
// DialogueOff ;
6039: CALL_OW 7
// wait ( 0 0$2 ) ;
6043: LD_INT 70
6045: PPUSH
6046: CALL_OW 67
// if Kirilenkova then
6050: LD_EXP 32
6054: IFFALSE 6068
// Say ( Kirilenkova , D3-Kir-1 ) ;
6056: LD_EXP 32
6060: PPUSH
6061: LD_STRING D3-Kir-1
6063: PPUSH
6064: CALL_OW 88
// gossudarov_arrive := true ;
6068: LD_ADDR_EXP 4
6072: PUSH
6073: LD_INT 1
6075: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6076: LD_INT 35
6078: PPUSH
6079: CALL_OW 67
// until ru_lab_builded ;
6083: LD_EXP 5
6087: IFFALSE 6076
// if Kirilenkova then
6089: LD_EXP 32
6093: IFFALSE 6109
// Say ( Kirilenkova , D3a-Kir-1 ) else
6095: LD_EXP 32
6099: PPUSH
6100: LD_STRING D3a-Kir-1
6102: PPUSH
6103: CALL_OW 88
6107: GO 6131
// begin un := SciRu ;
6109: LD_ADDR_VAR 0 4
6113: PUSH
6114: CALL 10629 0 0
6118: ST_TO_ADDR
// Say ( un , D3a-Sci1-1 ) ;
6119: LD_VAR 0 4
6123: PPUSH
6124: LD_STRING D3a-Sci1-1
6126: PPUSH
6127: CALL_OW 88
// end ; if Kirilenkova or un then
6131: LD_EXP 32
6135: PUSH
6136: LD_VAR 0 4
6140: OR
6141: IFFALSE 6155
// Say ( JMM , D3a-JMM-1 ) ;
6143: LD_EXP 14
6147: PPUSH
6148: LD_STRING D3a-JMM-1
6150: PPUSH
6151: CALL_OW 88
// end ;
6155: LD_VAR 0 1
6159: RET
// every 0 0$1 trigger gossudarov_arrive and FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) < 6 do
6160: LD_EXP 4
6164: PUSH
6165: LD_INT 22
6167: PUSH
6168: LD_INT 7
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 2
6177: PUSH
6178: LD_INT 25
6180: PUSH
6181: LD_INT 1
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PUSH
6188: LD_INT 25
6190: PUSH
6191: LD_INT 2
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 3
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 25
6210: PUSH
6211: LD_INT 4
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 25
6220: PUSH
6221: LD_INT 5
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 25
6230: PUSH
6231: LD_INT 8
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: LD_INT 25
6240: PUSH
6241: LD_INT 9
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: PPUSH
6262: CALL_OW 69
6266: PUSH
6267: LD_INT 6
6269: LESS
6270: AND
6271: IFFALSE 6283
6273: GO 6275
6275: DISABLE
// YouLost ( TooMany ) ;
6276: LD_STRING TooMany
6278: PPUSH
6279: CALL_OW 104
6283: END
// every 0 0$40 trigger GetSide ( Gossudarov ) = 7 do var i , tmp , un ;
6284: LD_EXP 31
6288: PPUSH
6289: CALL_OW 255
6293: PUSH
6294: LD_INT 7
6296: EQUAL
6297: IFFALSE 6497
6299: GO 6301
6301: DISABLE
6302: LD_INT 0
6304: PPUSH
6305: PPUSH
6306: PPUSH
// begin uc_side := 3 ;
6307: LD_ADDR_OWVAR 20
6311: PUSH
6312: LD_INT 3
6314: ST_TO_ADDR
// uc_nation := 3 ;
6315: LD_ADDR_OWVAR 21
6319: PUSH
6320: LD_INT 3
6322: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_heavy_machine_gun , 100 ) ;
6323: LD_INT 21
6325: PPUSH
6326: LD_INT 3
6328: PPUSH
6329: LD_INT 3
6331: PPUSH
6332: LD_INT 42
6334: PPUSH
6335: LD_INT 100
6337: PPUSH
6338: CALL 18484 0 5
// un := CreateVehicle ;
6342: LD_ADDR_VAR 0 3
6346: PUSH
6347: CALL_OW 45
6351: ST_TO_ADDR
// PlaceUnitArea ( un , south_west_spawn , false ) ;
6352: LD_VAR 0 3
6356: PPUSH
6357: LD_INT 15
6359: PPUSH
6360: LD_INT 0
6362: PPUSH
6363: CALL_OW 49
// ComMoveXY ( un , 67 , 45 ) ;
6367: LD_VAR 0 3
6371: PPUSH
6372: LD_INT 67
6374: PPUSH
6375: LD_INT 45
6377: PPUSH
6378: CALL_OW 111
// AddComWait ( un , 0 0$2 ) ;
6382: LD_VAR 0 3
6386: PPUSH
6387: LD_INT 70
6389: PPUSH
6390: CALL_OW 202
// AddComMoveXY ( un , 69 , 18 ) ;
6394: LD_VAR 0 3
6398: PPUSH
6399: LD_INT 69
6401: PPUSH
6402: LD_INT 18
6404: PPUSH
6405: CALL_OW 171
// AddComMoveXY ( un , 60 , 2 ) ;
6409: LD_VAR 0 3
6413: PPUSH
6414: LD_INT 60
6416: PPUSH
6417: LD_INT 2
6419: PPUSH
6420: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6424: LD_INT 35
6426: PPUSH
6427: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , north_spawn ) ;
6431: LD_VAR 0 3
6435: PPUSH
6436: CALL_OW 302
6440: NOT
6441: PUSH
6442: LD_VAR 0 3
6446: PPUSH
6447: LD_INT 17
6449: PPUSH
6450: CALL_OW 308
6454: OR
6455: IFFALSE 6424
// if IsInArea ( un , north_spawn ) or IsAt ( un , 60 , 2 ) then
6457: LD_VAR 0 3
6461: PPUSH
6462: LD_INT 17
6464: PPUSH
6465: CALL_OW 308
6469: PUSH
6470: LD_VAR 0 3
6474: PPUSH
6475: LD_INT 60
6477: PPUSH
6478: LD_INT 2
6480: PPUSH
6481: CALL_OW 307
6485: OR
6486: IFFALSE 6497
// RemoveUnit ( un ) ;
6488: LD_VAR 0 3
6492: PPUSH
6493: CALL_OW 64
// end ;
6497: PPOPN 3
6499: END
// every 0 0$2 do var i , un , tmp ;
6500: GO 6502
6502: DISABLE
6503: LD_INT 0
6505: PPUSH
6506: PPUSH
6507: PPUSH
// begin repeat wait ( 0 0$2 ) ;
6508: LD_INT 70
6510: PPUSH
6511: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 3 ] ] ) ;
6515: LD_ADDR_VAR 0 3
6519: PUSH
6520: LD_INT 22
6522: PUSH
6523: LD_INT 7
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: LD_INT 101
6532: PUSH
6533: LD_INT 3
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: PPUSH
6544: CALL_OW 69
6548: ST_TO_ADDR
// until tmp ;
6549: LD_VAR 0 3
6553: IFFALSE 6508
// un := NearestUnitToUnit ( tmp , JMM ) ;
6555: LD_ADDR_VAR 0 2
6559: PUSH
6560: LD_VAR 0 3
6564: PPUSH
6565: LD_EXP 14
6569: PPUSH
6570: CALL_OW 74
6574: ST_TO_ADDR
// player_spotted := true ;
6575: LD_ADDR_EXP 6
6579: PUSH
6580: LD_INT 1
6582: ST_TO_ADDR
// tmp := SciRu ;
6583: LD_ADDR_VAR 0 3
6587: PUSH
6588: CALL 10629 0 0
6592: ST_TO_ADDR
// DialogueOn ;
6593: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 7 , - 8 ) ;
6597: LD_VAR 0 2
6601: PPUSH
6602: CALL_OW 250
6606: PPUSH
6607: LD_VAR 0 2
6611: PPUSH
6612: CALL_OW 251
6616: PPUSH
6617: LD_INT 7
6619: PPUSH
6620: LD_INT 8
6622: NEG
6623: PPUSH
6624: CALL_OW 330
// CenterNowOnUnits ( un ) ;
6628: LD_VAR 0 2
6632: PPUSH
6633: CALL_OW 87
// if tmp then
6637: LD_VAR 0 3
6641: IFFALSE 6655
// Say ( tmp , D4-RSci1-1 ) ;
6643: LD_VAR 0 3
6647: PPUSH
6648: LD_STRING D4-RSci1-1
6650: PPUSH
6651: CALL_OW 88
// if Gossudarov then
6655: LD_EXP 31
6659: IFFALSE 6685
// begin Say ( Gossudarov , D4-Gos-1 ) ;
6661: LD_EXP 31
6665: PPUSH
6666: LD_STRING D4-Gos-1
6668: PPUSH
6669: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6673: LD_EXP 14
6677: PPUSH
6678: LD_STRING D4-JMM-1
6680: PPUSH
6681: CALL_OW 88
// end ; RemoveSeeing ( GetX ( un ) , GetY ( un ) , 7 ) ;
6685: LD_VAR 0 2
6689: PPUSH
6690: CALL_OW 250
6694: PPUSH
6695: LD_VAR 0 2
6699: PPUSH
6700: CALL_OW 251
6704: PPUSH
6705: LD_INT 7
6707: PPUSH
6708: CALL_OW 331
// DialogueOff ;
6712: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
6716: LD_STRING M5
6718: PPUSH
6719: CALL_OW 337
// end ;
6723: PPOPN 3
6725: END
// every 0 0$30 + 2 2$30 trigger player_spotted do
6726: LD_EXP 6
6730: IFFALSE 7189
6732: GO 6734
6734: DISABLE
// begin PrepareBelkov ;
6735: CALL 1930 0 0
// ComMoveXY ( Belkov , 118 , 106 ) ;
6739: LD_EXP 46
6743: PPUSH
6744: LD_INT 118
6746: PPUSH
6747: LD_INT 106
6749: PPUSH
6750: CALL_OW 111
// AddComHold ( Belkov ) ;
6754: LD_EXP 46
6758: PPUSH
6759: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
6763: LD_INT 35
6765: PPUSH
6766: CALL_OW 67
// until IsAt ( Belkov , 118 , 106 ) ;
6770: LD_EXP 46
6774: PPUSH
6775: LD_INT 118
6777: PPUSH
6778: LD_INT 106
6780: PPUSH
6781: CALL_OW 307
6785: IFFALSE 6763
// ChangeSideFog ( 4 , 7 ) ;
6787: LD_INT 4
6789: PPUSH
6790: LD_INT 7
6792: PPUSH
6793: CALL_OW 343
// if IsOk ( Belkov ) then
6797: LD_EXP 46
6801: PPUSH
6802: CALL_OW 302
6806: IFFALSE 6890
// begin InGameOn ;
6808: CALL_OW 8
// DialogueOn ;
6812: CALL_OW 6
// SayRadio ( Belkov , D5-Bel-1 ) ;
6816: LD_EXP 46
6820: PPUSH
6821: LD_STRING D5-Bel-1
6823: PPUSH
6824: CALL_OW 94
// if Gossudarov then
6828: LD_EXP 31
6832: IFFALSE 6882
// begin Say ( Gossudarov , D5-Gos-1 ) ;
6834: LD_EXP 31
6838: PPUSH
6839: LD_STRING D5-Gos-1
6841: PPUSH
6842: CALL_OW 88
// Say ( JMM , D5-JMM-1 ) ;
6846: LD_EXP 14
6850: PPUSH
6851: LD_STRING D5-JMM-1
6853: PPUSH
6854: CALL_OW 88
// Say ( Gossudarov , D5-Gos-2 ) ;
6858: LD_EXP 31
6862: PPUSH
6863: LD_STRING D5-Gos-2
6865: PPUSH
6866: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
6870: LD_EXP 14
6874: PPUSH
6875: LD_STRING D5-JMM-2
6877: PPUSH
6878: CALL_OW 88
// end ; DialogueOff ;
6882: CALL_OW 7
// InGameOff ;
6886: CALL_OW 9
// end ; case Query ( QSaveBelkov ) of 1 :
6890: LD_STRING QSaveBelkov
6892: PPUSH
6893: CALL_OW 97
6897: PUSH
6898: LD_INT 1
6900: DOUBLE
6901: EQUAL
6902: IFTRUE 6906
6904: GO 6956
6906: POP
// begin DialogueOn ;
6907: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
6911: LD_EXP 14
6915: PPUSH
6916: LD_STRING D5a-JMM-1
6918: PPUSH
6919: CALL_OW 88
// SayRadio ( Belkov , D5a-Bel-1 ) ;
6923: LD_EXP 46
6927: PPUSH
6928: LD_STRING D5a-Bel-1
6930: PPUSH
6931: CALL_OW 94
// DialogueOff ;
6935: CALL_OW 7
// ComMoveXY ( Belkov , 83 , 49 ) ;
6939: LD_EXP 46
6943: PPUSH
6944: LD_INT 83
6946: PPUSH
6947: LD_INT 49
6949: PPUSH
6950: CALL_OW 111
// end ; 2 :
6954: GO 7016
6956: LD_INT 2
6958: DOUBLE
6959: EQUAL
6960: IFTRUE 6964
6962: GO 7015
6964: POP
// begin Say ( JMM , D5a-JMM-2 ) ;
6965: LD_EXP 14
6969: PPUSH
6970: LD_STRING D5a-JMM-2
6972: PPUSH
6973: CALL_OW 88
// ComWait ( Belkov , 0 0$10 ) ;
6977: LD_EXP 46
6981: PPUSH
6982: LD_INT 350
6984: PPUSH
6985: CALL_OW 142
// AddComMoveXY ( Belkov , 107 , 109 ) ;
6989: LD_EXP 46
6993: PPUSH
6994: LD_INT 107
6996: PPUSH
6997: LD_INT 109
6999: PPUSH
7000: CALL_OW 171
// AddComHold ( Belkov ) ;
7004: LD_EXP 46
7008: PPUSH
7009: CALL_OW 200
// end ; end ;
7013: GO 7016
7015: POP
// repeat wait ( 0 0$1 ) ;
7016: LD_INT 35
7018: PPUSH
7019: CALL_OW 67
// until ( IsDead ( Belkov ) and GetSide ( Belkov ) = 4 ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Belkov ) , Belkov ) < 10 ;
7023: LD_EXP 46
7027: PPUSH
7028: CALL_OW 301
7032: PUSH
7033: LD_EXP 46
7037: PPUSH
7038: CALL_OW 255
7042: PUSH
7043: LD_INT 4
7045: EQUAL
7046: AND
7047: PUSH
7048: LD_INT 22
7050: PUSH
7051: LD_INT 7
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: PPUSH
7063: LD_EXP 46
7067: PPUSH
7068: CALL_OW 74
7072: PPUSH
7073: LD_EXP 46
7077: PPUSH
7078: CALL_OW 296
7082: PUSH
7083: LD_INT 10
7085: LESS
7086: OR
7087: IFFALSE 7016
// if IsDead ( Belkov ) then
7089: LD_EXP 46
7093: PPUSH
7094: CALL_OW 301
7098: IFFALSE 7123
// begin CenterNowOnUnits ( Belkov ) ;
7100: LD_EXP 46
7104: PPUSH
7105: CALL_OW 87
// Say ( JMM , D5a-JMM-2a ) ;
7109: LD_EXP 14
7113: PPUSH
7114: LD_STRING D5a-JMM-2a
7116: PPUSH
7117: CALL_OW 88
// exit ;
7121: GO 7189
// end ; if See ( 7 , Belkov ) then
7123: LD_INT 7
7125: PPUSH
7126: LD_EXP 46
7130: PPUSH
7131: CALL_OW 292
7135: IFFALSE 7149
// SetSide ( Belkov , 7 ) ;
7137: LD_EXP 46
7141: PPUSH
7142: LD_INT 7
7144: PPUSH
7145: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7149: LD_INT 35
7151: PPUSH
7152: CALL_OW 67
// until GetDistUnitXY ( Belkov , 66 , 45 ) < 30 ;
7156: LD_EXP 46
7160: PPUSH
7161: LD_INT 66
7163: PPUSH
7164: LD_INT 45
7166: PPUSH
7167: CALL_OW 297
7171: PUSH
7172: LD_INT 30
7174: LESS
7175: IFFALSE 7149
// Say ( Belkov , D6-Bel-1 ) ;
7177: LD_EXP 46
7181: PPUSH
7182: LD_STRING D6-Bel-1
7184: PPUSH
7185: CALL_OW 88
// end ;
7189: END
// every 0 0$1 trigger IsOk ( Belkov ) and UnitShoot ( Belkov ) in FilterAllUnits ( [ f_or , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ) do
7190: LD_EXP 46
7194: PPUSH
7195: CALL_OW 302
7199: PUSH
7200: LD_EXP 46
7204: PPUSH
7205: CALL_OW 504
7209: PUSH
7210: LD_INT 2
7212: PUSH
7213: LD_INT 34
7215: PUSH
7216: LD_INT 47
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 34
7225: PUSH
7226: LD_INT 45
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: LIST
7237: PPUSH
7238: CALL_OW 69
7242: IN
7243: AND
7244: IFFALSE 7261
7246: GO 7248
7248: DISABLE
// Say ( Belkov , D7-Bel-1 ) ;
7249: LD_EXP 46
7253: PPUSH
7254: LD_STRING D7-Bel-1
7256: PPUSH
7257: CALL_OW 88
7261: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 2 ] ] ) and not ar_base_spotted and not IsPlaced ( Burlak ) do var tmp ;
7262: LD_INT 22
7264: PUSH
7265: LD_INT 7
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 101
7274: PUSH
7275: LD_INT 2
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PPUSH
7286: CALL_OW 69
7290: PUSH
7291: LD_EXP 8
7295: NOT
7296: AND
7297: PUSH
7298: LD_EXP 45
7302: PPUSH
7303: CALL_OW 305
7307: NOT
7308: AND
7309: IFFALSE 7779
7311: GO 7313
7313: DISABLE
7314: LD_INT 0
7316: PPUSH
// begin ar_base_spotted := true ;
7317: LD_ADDR_EXP 8
7321: PUSH
7322: LD_INT 1
7324: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) ;
7325: LD_ADDR_VAR 0 1
7329: PUSH
7330: LD_INT 22
7332: PUSH
7333: LD_INT 2
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: PUSH
7340: LD_INT 21
7342: PUSH
7343: LD_INT 3
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PPUSH
7354: CALL_OW 69
7358: ST_TO_ADDR
// tmp := NearestUnitToUnit ( tmp , JMM ) ;
7359: LD_ADDR_VAR 0 1
7363: PUSH
7364: LD_VAR 0 1
7368: PPUSH
7369: LD_EXP 14
7373: PPUSH
7374: CALL_OW 74
7378: ST_TO_ADDR
// RevealFogArea ( 7 , area_base_arabian ) ;
7379: LD_INT 7
7381: PPUSH
7382: LD_INT 3
7384: PPUSH
7385: CALL_OW 332
// DialogueOn ;
7389: CALL_OW 6
// CenterNowOnXY ( GetX ( tmp ) , GetY ( tmp ) ) ;
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 250
7402: PPUSH
7403: LD_VAR 0 1
7407: PPUSH
7408: CALL_OW 251
7412: PPUSH
7413: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Frank , Roth , Cornel , Denis , Gladstone ] ;
7417: LD_ADDR_VAR 0 1
7421: PUSH
7422: LD_INT 22
7424: PUSH
7425: LD_INT 7
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PUSH
7432: LD_INT 23
7434: PUSH
7435: LD_INT 1
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 26
7444: PUSH
7445: LD_INT 1
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: LIST
7456: PPUSH
7457: CALL_OW 69
7461: PUSH
7462: LD_EXP 14
7466: PUSH
7467: LD_EXP 18
7471: PUSH
7472: LD_EXP 19
7476: PUSH
7477: LD_EXP 26
7481: PUSH
7482: LD_EXP 15
7486: PUSH
7487: LD_EXP 24
7491: PUSH
7492: LD_EXP 20
7496: PUSH
7497: LD_EXP 22
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: DIFF
7512: ST_TO_ADDR
// if not tmp then
7513: LD_VAR 0 1
7517: NOT
7518: IFFALSE 7592
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_female ] ] ) diff [ Joan , Lisa , Kikuchi , Simms ] ;
7520: LD_ADDR_VAR 0 1
7524: PUSH
7525: LD_INT 22
7527: PUSH
7528: LD_INT 7
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PUSH
7535: LD_INT 23
7537: PUSH
7538: LD_INT 1
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: PUSH
7545: LD_INT 26
7547: PUSH
7548: LD_INT 2
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: LIST
7559: PPUSH
7560: CALL_OW 69
7564: PUSH
7565: LD_EXP 29
7569: PUSH
7570: LD_EXP 16
7574: PUSH
7575: LD_EXP 27
7579: PUSH
7580: LD_EXP 28
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: DIFF
7591: ST_TO_ADDR
// if tmp then
7592: LD_VAR 0 1
7596: IFFALSE 7667
// case GetSex ( tmp [ 1 ] ) of sex_male :
7598: LD_VAR 0 1
7602: PUSH
7603: LD_INT 1
7605: ARRAY
7606: PPUSH
7607: CALL_OW 258
7611: PUSH
7612: LD_INT 1
7614: DOUBLE
7615: EQUAL
7616: IFTRUE 7620
7618: GO 7639
7620: POP
// Say ( tmp [ 1 ] , D9-Sol1-1 ) ; sex_female :
7621: LD_VAR 0 1
7625: PUSH
7626: LD_INT 1
7628: ARRAY
7629: PPUSH
7630: LD_STRING D9-Sol1-1
7632: PPUSH
7633: CALL_OW 88
7637: GO 7667
7639: LD_INT 2
7641: DOUBLE
7642: EQUAL
7643: IFTRUE 7647
7645: GO 7666
7647: POP
// Say ( tmp [ 1 ] , D9-FSol1-1 ) ; end ;
7648: LD_VAR 0 1
7652: PUSH
7653: LD_INT 1
7655: ARRAY
7656: PPUSH
7657: LD_STRING D9-FSol1-1
7659: PPUSH
7660: CALL_OW 88
7664: GO 7667
7666: POP
// if Frank then
7667: LD_EXP 26
7671: IFFALSE 7775
// begin PlaceSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 , 8 ) ;
7673: LD_EXP 55
7677: PPUSH
7678: CALL_OW 250
7682: PPUSH
7683: LD_EXP 55
7687: PPUSH
7688: CALL_OW 251
7692: PPUSH
7693: LD_INT 7
7695: PPUSH
7696: LD_INT 8
7698: PPUSH
7699: CALL_OW 330
// CenterNowOnUnits ( mastodont ) ;
7703: LD_EXP 55
7707: PPUSH
7708: CALL_OW 87
// Say ( Frank , D9-Frank-1 ) ;
7712: LD_EXP 26
7716: PPUSH
7717: LD_STRING D9-Frank-1
7719: PPUSH
7720: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
7724: LD_EXP 14
7728: PPUSH
7729: LD_STRING D9-JMM-1
7731: PPUSH
7732: CALL_OW 88
// Say ( Frank , D9-Frank-2 ) ;
7736: LD_EXP 26
7740: PPUSH
7741: LD_STRING D9-Frank-2
7743: PPUSH
7744: CALL_OW 88
// RemoveSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 ) ;
7748: LD_EXP 55
7752: PPUSH
7753: CALL_OW 250
7757: PPUSH
7758: LD_EXP 55
7762: PPUSH
7763: CALL_OW 251
7767: PPUSH
7768: LD_INT 7
7770: PPUSH
7771: CALL_OW 331
// end ; DialogueOff ;
7775: CALL_OW 7
// end ;
7779: PPOPN 1
7781: END
// every 0 0$20 trigger first_attack do var i , selected_option ;
7782: LD_EXP 7
7786: IFFALSE 8813
7788: GO 7790
7790: DISABLE
7791: LD_INT 0
7793: PPUSH
7794: PPUSH
// begin selected_option := 1 ;
7795: LD_ADDR_VAR 0 2
7799: PUSH
7800: LD_INT 1
7802: ST_TO_ADDR
// wait ( 5 5$00 ) ;
7803: LD_INT 10500
7805: PPUSH
7806: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7810: LD_INT 35
7812: PPUSH
7813: CALL_OW 67
// until not ru_attackers ;
7817: LD_EXP 51
7821: NOT
7822: IFFALSE 7810
// PrepareBurlak ;
7824: CALL 2042 0 0
// repeat wait ( 0 0$2 ) ;
7828: LD_INT 70
7830: PPUSH
7831: CALL_OW 67
// until not HasTask ( Burlak ) ;
7835: LD_EXP 45
7839: PPUSH
7840: CALL_OW 314
7844: NOT
7845: IFFALSE 7828
// InGameOn ;
7847: CALL_OW 8
// DialogueOn ;
7851: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
7855: LD_EXP 48
7859: PPUSH
7860: CALL_OW 87
// SayRadio ( Burlak , D10-Bur-1 ) ;
7864: LD_EXP 45
7868: PPUSH
7869: LD_STRING D10-Bur-1
7871: PPUSH
7872: CALL_OW 94
// if Belkov and GetSide ( Belkov ) = 7 then
7876: LD_EXP 46
7880: PUSH
7881: LD_EXP 46
7885: PPUSH
7886: CALL_OW 255
7890: PUSH
7891: LD_INT 7
7893: EQUAL
7894: AND
7895: IFFALSE 7909
// Say ( Belkov , D10-Bel-1 ) ;
7897: LD_EXP 46
7901: PPUSH
7902: LD_STRING D10-Bel-1
7904: PPUSH
7905: CALL_OW 88
// if Gossudarov then
7909: LD_EXP 31
7913: IFFALSE 7927
// Say ( Gossudarov , D10-Gos-1 ) ;
7915: LD_EXP 31
7919: PPUSH
7920: LD_STRING D10-Gos-1
7922: PPUSH
7923: CALL_OW 88
// if Kirilenkova then
7927: LD_EXP 32
7931: IFFALSE 7945
// Say ( Kirilenkova , D10-Kir-1 ) ;
7933: LD_EXP 32
7937: PPUSH
7938: LD_STRING D10-Kir-1
7940: PPUSH
7941: CALL_OW 88
// Say ( SolRu , D10-RSol1-1 ) ;
7945: CALL 10758 0 0
7949: PPUSH
7950: LD_STRING D10-RSol1-1
7952: PPUSH
7953: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-2 ) ;
7957: LD_EXP 45
7961: PPUSH
7962: LD_STRING D10-Bur-2
7964: PPUSH
7965: CALL_OW 94
// Say ( JMM , D10-JMM-2 ) ;
7969: LD_EXP 14
7973: PPUSH
7974: LD_STRING D10-JMM-2
7976: PPUSH
7977: CALL_OW 88
// if Kirilenkova then
7981: LD_EXP 32
7985: IFFALSE 8001
// Say ( Kirilenkova , D10-Kir-2 ) else
7987: LD_EXP 32
7991: PPUSH
7992: LD_STRING D10-Kir-2
7994: PPUSH
7995: CALL_OW 88
7999: GO 8013
// Say ( SolRu , D10-RSol1-2 ) ;
8001: CALL 10758 0 0
8005: PPUSH
8006: LD_STRING D10-RSol1-2
8008: PPUSH
8009: CALL_OW 88
// Say ( JMM , D10-JMM-3 ) ;
8013: LD_EXP 14
8017: PPUSH
8018: LD_STRING D10-JMM-3
8020: PPUSH
8021: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-3 ) ;
8025: LD_EXP 45
8029: PPUSH
8030: LD_STRING D10-Bur-3
8032: PPUSH
8033: CALL_OW 94
// Say ( JMM , D10-JMM-4 ) ;
8037: LD_EXP 14
8041: PPUSH
8042: LD_STRING D10-JMM-4
8044: PPUSH
8045: CALL_OW 88
// DialogueOff ;
8049: CALL_OW 7
// InGameOff ;
8053: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
8057: LD_STRING M2
8059: PPUSH
8060: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
8064: LD_INT 35
8066: PPUSH
8067: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , Burlak , 8 ] ] ) ;
8071: LD_INT 22
8073: PUSH
8074: LD_INT 7
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PUSH
8081: LD_INT 91
8083: PUSH
8084: LD_EXP 45
8088: PUSH
8089: LD_INT 8
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: LIST
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PPUSH
8101: CALL_OW 69
8105: IFFALSE 8064
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
8107: LD_ADDR_VAR 0 1
8111: PUSH
8112: LD_INT 22
8114: PUSH
8115: LD_INT 4
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PPUSH
8122: CALL_OW 69
8126: PUSH
8127: FOR_IN
8128: IFFALSE 8144
// SetSide ( i , 7 ) ;
8130: LD_VAR 0 1
8134: PPUSH
8135: LD_INT 7
8137: PPUSH
8138: CALL_OW 235
8142: GO 8127
8144: POP
8145: POP
// ChangeMissionObjectives ( M3 ) ;
8146: LD_STRING M3
8148: PPUSH
8149: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
8153: LD_INT 35
8155: PPUSH
8156: CALL_OW 67
// until GetDistUnits ( JMM , Burlak ) < 8 ;
8160: LD_EXP 14
8164: PPUSH
8165: LD_EXP 45
8169: PPUSH
8170: CALL_OW 296
8174: PUSH
8175: LD_INT 8
8177: LESS
8178: IFFALSE 8153
// ComTurnUnit ( JMM , Burlak ) ;
8180: LD_EXP 14
8184: PPUSH
8185: LD_EXP 45
8189: PPUSH
8190: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
8194: LD_EXP 45
8198: PPUSH
8199: LD_EXP 14
8203: PPUSH
8204: CALL_OW 119
// wait ( 0 0$0.3 ) ;
8208: LD_INT 10
8210: PPUSH
8211: CALL_OW 67
// DialogueOn ;
8215: CALL_OW 6
// Say ( JMM , D11-JMM-1 ) ;
8219: LD_EXP 14
8223: PPUSH
8224: LD_STRING D11-JMM-1
8226: PPUSH
8227: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
8231: LD_EXP 45
8235: PPUSH
8236: LD_STRING D11-Bur-1
8238: PPUSH
8239: CALL_OW 88
// Say ( JMM , D11-JMM-2 ) ;
8243: LD_EXP 14
8247: PPUSH
8248: LD_STRING D11-JMM-2
8250: PPUSH
8251: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
8255: LD_EXP 45
8259: PPUSH
8260: LD_STRING D11-Bur-2
8262: PPUSH
8263: CALL_OW 88
// Say ( JMM , D11-JMM-3 ) ;
8267: LD_EXP 14
8271: PPUSH
8272: LD_STRING D11-JMM-3
8274: PPUSH
8275: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
8279: LD_EXP 45
8283: PPUSH
8284: LD_STRING D11-Bur-3
8286: PPUSH
8287: CALL_OW 88
// Say ( JMM , D11-JMM-4 ) ;
8291: LD_EXP 14
8295: PPUSH
8296: LD_STRING D11-JMM-4
8298: PPUSH
8299: CALL_OW 88
// if ar_base_spotted then
8303: LD_EXP 8
8307: IFFALSE 8323
// Say ( Burlak , D12-Bur-1 ) else
8309: LD_EXP 45
8313: PPUSH
8314: LD_STRING D12-Bur-1
8316: PPUSH
8317: CALL_OW 88
8321: GO 8362
// begin RevealFogArea ( 7 , area_base_arabian ) ;
8323: LD_INT 7
8325: PPUSH
8326: LD_INT 3
8328: PPUSH
8329: CALL_OW 332
// CenterNowOnXY ( 127 , 45 ) ;
8333: LD_INT 127
8335: PPUSH
8336: LD_INT 45
8338: PPUSH
8339: CALL_OW 86
// Say ( Burlak , D12-Bur-1a ) ;
8343: LD_EXP 45
8347: PPUSH
8348: LD_STRING D12-Bur-1a
8350: PPUSH
8351: CALL_OW 88
// dwait ( 0 0$2 ) ;
8355: LD_INT 70
8357: PPUSH
8358: CALL_OW 68
// end ; Say ( Burlak , D12-Bur-1b ) ;
8362: LD_EXP 45
8366: PPUSH
8367: LD_STRING D12-Bur-1b
8369: PPUSH
8370: CALL_OW 88
// Say ( JMM , D12-JMM-1 ) ;
8374: LD_EXP 14
8378: PPUSH
8379: LD_STRING D12-JMM-1
8381: PPUSH
8382: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
8386: LD_EXP 45
8390: PPUSH
8391: LD_STRING D12-Bur-2
8393: PPUSH
8394: CALL_OW 88
// if Roth then
8398: LD_EXP 15
8402: IFFALSE 8418
// Say ( Roth , D12-Roth-2 ) else
8404: LD_EXP 15
8408: PPUSH
8409: LD_STRING D12-Roth-2
8411: PPUSH
8412: CALL_OW 88
8416: GO 8430
// Say ( SciRu , D12-RSci1-2 ) ;
8418: CALL 10629 0 0
8422: PPUSH
8423: LD_STRING D12-RSci1-2
8425: PPUSH
8426: CALL_OW 88
// Say ( JMM , D12-JMM-2 ) ;
8430: LD_EXP 14
8434: PPUSH
8435: LD_STRING D12-JMM-2
8437: PPUSH
8438: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
8442: LD_EXP 45
8446: PPUSH
8447: LD_STRING D12-Bur-3
8449: PPUSH
8450: CALL_OW 88
// Say ( JMM , D12-JMM-3 ) ;
8454: LD_EXP 14
8458: PPUSH
8459: LD_STRING D12-JMM-3
8461: PPUSH
8462: CALL_OW 88
// Say ( Burlak , D12-Bur-4 ) ;
8466: LD_EXP 45
8470: PPUSH
8471: LD_STRING D12-Bur-4
8473: PPUSH
8474: CALL_OW 88
// case Query ( QBase ) of 1 :
8478: LD_STRING QBase
8480: PPUSH
8481: CALL_OW 97
8485: PUSH
8486: LD_INT 1
8488: DOUBLE
8489: EQUAL
8490: IFTRUE 8494
8492: GO 8612
8494: POP
// begin Say ( JMM , D13a-JMM-1 ) ;
8495: LD_EXP 14
8499: PPUSH
8500: LD_STRING D13a-JMM-1
8502: PPUSH
8503: CALL_OW 88
// Say ( Burlak , D13a-Bur-1 ) ;
8507: LD_EXP 45
8511: PPUSH
8512: LD_STRING D13a-Bur-1
8514: PPUSH
8515: CALL_OW 88
// if Roth then
8519: LD_EXP 15
8523: IFFALSE 8539
// Say ( Roth , D13a-Roth-1 ) else
8525: LD_EXP 15
8529: PPUSH
8530: LD_STRING D13a-Roth-1
8532: PPUSH
8533: CALL_OW 88
8537: GO 8551
// Say ( SciRu , D13a-RSci1-1 ) ;
8539: CALL 10629 0 0
8543: PPUSH
8544: LD_STRING D13a-RSci1-1
8546: PPUSH
8547: CALL_OW 88
// Say ( JMM , D13a-JMM-2 ) ;
8551: LD_EXP 14
8555: PPUSH
8556: LD_STRING D13a-JMM-2
8558: PPUSH
8559: CALL_OW 88
// case Query ( QBaseAgain ) of 1 :
8563: LD_STRING QBaseAgain
8565: PPUSH
8566: CALL_OW 97
8570: PUSH
8571: LD_INT 1
8573: DOUBLE
8574: EQUAL
8575: IFTRUE 8579
8577: GO 8590
8579: POP
// selected_option := 2 ; 2 :
8580: LD_ADDR_VAR 0 2
8584: PUSH
8585: LD_INT 2
8587: ST_TO_ADDR
8588: GO 8610
8590: LD_INT 2
8592: DOUBLE
8593: EQUAL
8594: IFTRUE 8598
8596: GO 8609
8598: POP
// selected_option := 3 ; end ;
8599: LD_ADDR_VAR 0 2
8603: PUSH
8604: LD_INT 3
8606: ST_TO_ADDR
8607: GO 8610
8609: POP
// end ; 2 :
8610: GO 8651
8612: LD_INT 2
8614: DOUBLE
8615: EQUAL
8616: IFTRUE 8620
8618: GO 8631
8620: POP
// selected_option := 2 ; 3 :
8621: LD_ADDR_VAR 0 2
8625: PUSH
8626: LD_INT 2
8628: ST_TO_ADDR
8629: GO 8651
8631: LD_INT 3
8633: DOUBLE
8634: EQUAL
8635: IFTRUE 8639
8637: GO 8650
8639: POP
// selected_option := 3 ; end ;
8640: LD_ADDR_VAR 0 2
8644: PUSH
8645: LD_INT 3
8647: ST_TO_ADDR
8648: GO 8651
8650: POP
// if selected_option = 2 then
8651: LD_VAR 0 2
8655: PUSH
8656: LD_INT 2
8658: EQUAL
8659: IFFALSE 8753
// begin Say ( JMM , D13b-JMM-1 ) ;
8661: LD_EXP 14
8665: PPUSH
8666: LD_STRING D13b-JMM-1
8668: PPUSH
8669: CALL_OW 88
// Say ( Burlak , D13b-Bur-1 ) ;
8673: LD_EXP 45
8677: PPUSH
8678: LD_STRING D13b-Bur-1
8680: PPUSH
8681: CALL_OW 88
// Say ( JMM , D13b-JMM-2 ) ;
8685: LD_EXP 14
8689: PPUSH
8690: LD_STRING D13b-JMM-2
8692: PPUSH
8693: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-2 ) ;
8697: LD_EXP 54
8701: PPUSH
8702: LD_STRING D13b-Abd-2
8704: PPUSH
8705: CALL_OW 94
// Say ( JMM , D13b-JMM-3 ) ;
8709: LD_EXP 14
8713: PPUSH
8714: LD_STRING D13b-JMM-3
8716: PPUSH
8717: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-3 ) ;
8721: LD_EXP 54
8725: PPUSH
8726: LD_STRING D13b-Abd-3
8728: PPUSH
8729: CALL_OW 94
// Say ( JMM , D13b-JMM-4 ) ;
8733: LD_EXP 14
8737: PPUSH
8738: LD_STRING D13b-JMM-4
8740: PPUSH
8741: CALL_OW 88
// ar_active_attack := true ;
8745: LD_ADDR_EXP 9
8749: PUSH
8750: LD_INT 1
8752: ST_TO_ADDR
// end ; if selected_option = 3 then
8753: LD_VAR 0 2
8757: PUSH
8758: LD_INT 3
8760: EQUAL
8761: IFFALSE 8787
// begin Say ( JMM , D13c-JMM-1 ) ;
8763: LD_EXP 14
8767: PPUSH
8768: LD_STRING D13c-JMM-1
8770: PPUSH
8771: CALL_OW 88
// Say ( Burlak , D13c-Bur-1 ) ;
8775: LD_EXP 45
8779: PPUSH
8780: LD_STRING D13c-Bur-1
8782: PPUSH
8783: CALL_OW 88
// end ; DialogueOff ;
8787: CALL_OW 7
// if not ar_active_attack then
8791: LD_EXP 9
8795: NOT
8796: IFFALSE 8813
// begin wait ( 6 6$00 ) ;
8798: LD_INT 12600
8800: PPUSH
8801: CALL_OW 67
// ar_active_attack := true ;
8805: LD_ADDR_EXP 9
8809: PUSH
8810: LD_INT 1
8812: ST_TO_ADDR
// end ; end ;
8813: PPOPN 2
8815: END
// every 0 0$1 trigger IsPlaced ( Burlak ) and GetSide ( Burlak ) = 7 do
8816: LD_EXP 45
8820: PPUSH
8821: CALL_OW 305
8825: PUSH
8826: LD_EXP 45
8830: PPUSH
8831: CALL_OW 255
8835: PUSH
8836: LD_INT 7
8838: EQUAL
8839: AND
8840: IFFALSE 9001
8842: GO 8844
8844: DISABLE
// begin wait ( 4 4$40 ) ;
8845: LD_INT 9800
8847: PPUSH
8848: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8852: LD_INT 35
8854: PPUSH
8855: CALL_OW 67
// until not ru_attackers ;
8859: LD_EXP 51
8863: NOT
8864: IFFALSE 8852
// PrepareGnyevko ;
8866: CALL 1986 0 0
// ComMoveXY ( Gnyevko , 124 , 118 ) ;
8870: LD_EXP 47
8874: PPUSH
8875: LD_INT 124
8877: PPUSH
8878: LD_INT 118
8880: PPUSH
8881: CALL_OW 111
// AddComHold ( Gnyevko ) ;
8885: LD_EXP 47
8889: PPUSH
8890: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
8894: LD_INT 35
8896: PPUSH
8897: CALL_OW 67
// until IsAt ( Gnyevko , 124 , 118 ) ;
8901: LD_EXP 47
8905: PPUSH
8906: LD_INT 124
8908: PPUSH
8909: LD_INT 118
8911: PPUSH
8912: CALL_OW 307
8916: IFFALSE 8894
// SayRadio ( Gnyevko , DBelkov-Gny-1 ) ;
8918: LD_EXP 47
8922: PPUSH
8923: LD_STRING DBelkov-Gny-1
8925: PPUSH
8926: CALL_OW 94
// Say ( Burlak , DBelkov-Bur-1a ) ;
8930: LD_EXP 45
8934: PPUSH
8935: LD_STRING DBelkov-Bur-1a
8937: PPUSH
8938: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
8942: LD_INT 35
8944: PPUSH
8945: CALL_OW 67
// until GetDistUnits ( Gnyevko , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Gnyevko ) ) < 8 ;
8949: LD_EXP 47
8953: PPUSH
8954: LD_INT 22
8956: PUSH
8957: LD_INT 7
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PPUSH
8964: CALL_OW 69
8968: PPUSH
8969: LD_EXP 47
8973: PPUSH
8974: CALL_OW 74
8978: PPUSH
8979: CALL_OW 296
8983: PUSH
8984: LD_INT 8
8986: LESS
8987: IFFALSE 8942
// SetSide ( Gnyevko , 7 ) ;
8989: LD_EXP 47
8993: PPUSH
8994: LD_INT 7
8996: PPUSH
8997: CALL_OW 235
// end ;
9001: END
// every 10 10$00 + 1 1$30 trigger GetSide ( Burlak ) = 7 do
9002: LD_EXP 45
9006: PPUSH
9007: CALL_OW 255
9011: PUSH
9012: LD_INT 7
9014: EQUAL
9015: IFFALSE 9025
9017: GO 9019
9019: DISABLE
// begin enable ;
9020: ENABLE
// PrepareAmericanAttack ;
9021: CALL 12070 0 0
// end ;
9025: END
// every 0 0$2 trigger FilterAllUnits ( [ f_side , 1 ] ) do var i , tmp ;
9026: LD_INT 22
9028: PUSH
9029: LD_INT 1
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PPUSH
9036: CALL_OW 69
9040: IFFALSE 9224
9042: GO 9044
9044: DISABLE
9045: LD_INT 0
9047: PPUSH
9048: PPUSH
// begin while true do
9049: LD_INT 1
9051: IFFALSE 9108
// begin wait ( 0 0$1 ) ;
9053: LD_INT 35
9055: PPUSH
9056: CALL_OW 67
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , JMM ) ;
9060: LD_ADDR_VAR 0 2
9064: PUSH
9065: LD_INT 22
9067: PUSH
9068: LD_INT 1
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: PPUSH
9075: CALL_OW 69
9079: PPUSH
9080: LD_EXP 14
9084: PPUSH
9085: CALL_OW 74
9089: ST_TO_ADDR
// if See ( 7 , tmp ) then
9090: LD_INT 7
9092: PPUSH
9093: LD_VAR 0 2
9097: PPUSH
9098: CALL_OW 292
9102: IFFALSE 9106
// break ;
9104: GO 9108
// end ;
9106: GO 9049
// DialogueOn ;
9108: CALL_OW 6
// CenterNowOnUnits ( tmp ) ;
9112: LD_VAR 0 2
9116: PPUSH
9117: CALL_OW 87
// PlaceSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 , 8 ) ;
9121: LD_VAR 0 2
9125: PPUSH
9126: CALL_OW 250
9130: PPUSH
9131: LD_VAR 0 2
9135: PPUSH
9136: CALL_OW 251
9140: PPUSH
9141: LD_INT 7
9143: PPUSH
9144: LD_INT 8
9146: PPUSH
9147: CALL_OW 330
// if Denis then
9151: LD_EXP 20
9155: IFFALSE 9169
// Say ( Denis , DAmerAttack-Pet-1 ) ;
9157: LD_EXP 20
9161: PPUSH
9162: LD_STRING DAmerAttack-Pet-1
9164: PPUSH
9165: CALL_OW 88
// Say ( JMM , DAmerAttack-JMM-1 ) ;
9169: LD_EXP 14
9173: PPUSH
9174: LD_STRING DAmerAttack-JMM-1
9176: PPUSH
9177: CALL_OW 88
// Say ( Burlak , DStop-Bur-1 ) ;
9181: LD_EXP 45
9185: PPUSH
9186: LD_STRING DStop-Bur-1
9188: PPUSH
9189: CALL_OW 88
// RemoveSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 ) ;
9193: LD_VAR 0 2
9197: PPUSH
9198: CALL_OW 250
9202: PPUSH
9203: LD_VAR 0 2
9207: PPUSH
9208: CALL_OW 251
9212: PPUSH
9213: LD_INT 7
9215: PPUSH
9216: CALL_OW 331
// DialogueOff ;
9220: CALL_OW 7
// end ;
9224: PPOPN 2
9226: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and IsDead ( ru_depot ) do
9227: LD_INT 22
9229: PUSH
9230: LD_INT 3
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: LD_INT 21
9239: PUSH
9240: LD_INT 1
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PPUSH
9251: CALL_OW 69
9255: PUSH
9256: LD_INT 0
9258: EQUAL
9259: PUSH
9260: LD_INT 47
9262: PPUSH
9263: CALL_OW 301
9267: AND
9268: IFFALSE 9310
9270: GO 9272
9272: DISABLE
// begin ChangeMissionObjectives ( M5a ) ;
9273: LD_STRING M5a
9275: PPUSH
9276: CALL_OW 337
// Say ( JMM , D8-JMM-1 ) ;
9280: LD_EXP 14
9284: PPUSH
9285: LD_STRING D8-JMM-1
9287: PPUSH
9288: CALL_OW 88
// if Gossudarov then
9292: LD_EXP 31
9296: IFFALSE 9310
// Say ( Gossudarov , D8-Gos-1 ) ;
9298: LD_EXP 31
9302: PPUSH
9303: LD_STRING D8-Gos-1
9305: PPUSH
9306: CALL_OW 88
// end ;
9310: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 do
9311: LD_INT 22
9313: PUSH
9314: LD_INT 2
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PUSH
9321: LD_INT 21
9323: PUSH
9324: LD_INT 1
9326: PUSH
9327: EMPTY
9328: LIST
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: PPUSH
9335: CALL_OW 69
9339: PUSH
9340: LD_INT 0
9342: EQUAL
9343: IFFALSE 9393
9345: GO 9347
9347: DISABLE
// begin ChangeMissionObjectives ( M4c ) ;
9348: LD_STRING M4c
9350: PPUSH
9351: CALL_OW 337
// if Roth then
9355: LD_EXP 15
9359: IFFALSE 9375
// Say ( Roth , DStop-Roth-1 ) else
9361: LD_EXP 15
9365: PPUSH
9366: LD_STRING DStop-Roth-1
9368: PPUSH
9369: CALL_OW 88
9373: GO 9393
// if Gossudarov then
9375: LD_EXP 31
9379: IFFALSE 9393
// Say ( Gossudarov , D8-Gos-1a ) ;
9381: LD_EXP 31
9385: PPUSH
9386: LD_STRING D8-Gos-1a
9388: PPUSH
9389: CALL_OW 88
// end ;
9393: END
// every 0 0$01 trigger GetTechNation ( 7 , 1 , state_enabled ) = 0 and GetTechNation ( 7 , 3 , state_enabled ) = 0 do
9394: LD_INT 7
9396: PPUSH
9397: LD_INT 1
9399: PPUSH
9400: LD_INT 1
9402: PPUSH
9403: CALL 12475 0 3
9407: PUSH
9408: LD_INT 0
9410: EQUAL
9411: PUSH
9412: LD_INT 7
9414: PPUSH
9415: LD_INT 3
9417: PPUSH
9418: LD_INT 1
9420: PPUSH
9421: CALL 12475 0 3
9425: PUSH
9426: LD_INT 0
9428: EQUAL
9429: AND
9430: IFFALSE 9442
9432: GO 9434
9434: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
9435: LD_STRING M1a
9437: PPUSH
9438: CALL_OW 337
// end ;
9442: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ f_side , 3 ] ) = 0 and FilterAllUnits ( [ f_side , 1 ] ) = 0 and GetTechNation ( 7 , 1 , state_enabled ) = 0 and GetTechNation ( 7 , 3 , state_enabled ) = 0 do var tmp , tmp2 ;
9443: LD_INT 22
9445: PUSH
9446: LD_INT 2
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 21
9455: PUSH
9456: LD_INT 1
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PPUSH
9467: CALL_OW 69
9471: PUSH
9472: LD_INT 0
9474: EQUAL
9475: PUSH
9476: LD_INT 22
9478: PUSH
9479: LD_INT 3
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PPUSH
9486: CALL_OW 69
9490: PUSH
9491: LD_INT 0
9493: EQUAL
9494: AND
9495: PUSH
9496: LD_INT 22
9498: PUSH
9499: LD_INT 1
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PPUSH
9506: CALL_OW 69
9510: PUSH
9511: LD_INT 0
9513: EQUAL
9514: AND
9515: PUSH
9516: LD_INT 7
9518: PPUSH
9519: LD_INT 1
9521: PPUSH
9522: LD_INT 1
9524: PPUSH
9525: CALL 12475 0 3
9529: PUSH
9530: LD_INT 0
9532: EQUAL
9533: AND
9534: PUSH
9535: LD_INT 7
9537: PPUSH
9538: LD_INT 3
9540: PPUSH
9541: LD_INT 1
9543: PPUSH
9544: CALL 12475 0 3
9548: PUSH
9549: LD_INT 0
9551: EQUAL
9552: AND
9553: IFFALSE 10626
9555: GO 9557
9557: DISABLE
9558: LD_INT 0
9560: PPUSH
9561: PPUSH
// begin if not IsDead ( Masha ) then
9562: LD_EXP 48
9566: PPUSH
9567: CALL_OW 301
9571: NOT
9572: IFFALSE 9586
// AddMedal ( Masha , 1 ) else
9574: LD_STRING Masha
9576: PPUSH
9577: LD_INT 1
9579: PPUSH
9580: CALL_OW 101
9584: GO 9597
// AddMedal ( Masha , - 1 ) ;
9586: LD_STRING Masha
9588: PPUSH
9589: LD_INT 1
9591: NEG
9592: PPUSH
9593: CALL_OW 101
// if abdul_escaped then
9597: LD_EXP 12
9601: IFFALSE 9616
// AddMedal ( Abdul , - 1 ) else
9603: LD_STRING Abdul
9605: PPUSH
9606: LD_INT 1
9608: NEG
9609: PPUSH
9610: CALL_OW 101
9614: GO 9626
// AddMedal ( Abdul , 1 ) ;
9616: LD_STRING Abdul
9618: PPUSH
9619: LD_INT 1
9621: PPUSH
9622: CALL_OW 101
// if loss_counter = 0 then
9626: LD_EXP 13
9630: PUSH
9631: LD_INT 0
9633: EQUAL
9634: IFFALSE 9648
// AddMedal ( People , 2 ) else
9636: LD_STRING People
9638: PPUSH
9639: LD_INT 2
9641: PPUSH
9642: CALL_OW 101
9646: GO 9698
// if loss_counter <= [ 3 , 2 , 2 ] [ Difficulty ] then
9648: LD_EXP 13
9652: PUSH
9653: LD_INT 3
9655: PUSH
9656: LD_INT 2
9658: PUSH
9659: LD_INT 2
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: LIST
9666: PUSH
9667: LD_OWVAR 67
9671: ARRAY
9672: LESSEQUAL
9673: IFFALSE 9687
// AddMedal ( People , 1 ) else
9675: LD_STRING People
9677: PPUSH
9678: LD_INT 1
9680: PPUSH
9681: CALL_OW 101
9685: GO 9698
// AddMedal ( People , - 1 ) ;
9687: LD_STRING People
9689: PPUSH
9690: LD_INT 1
9692: NEG
9693: PPUSH
9694: CALL_OW 101
// GiveMedals ( MAIN ) ;
9698: LD_STRING MAIN
9700: PPUSH
9701: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9705: LD_ADDR_VAR 0 1
9709: PUSH
9710: LD_INT 22
9712: PUSH
9713: LD_INT 7
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: LD_INT 2
9722: PUSH
9723: LD_INT 25
9725: PUSH
9726: LD_INT 1
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 25
9735: PUSH
9736: LD_INT 2
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 25
9745: PUSH
9746: LD_INT 3
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 25
9755: PUSH
9756: LD_INT 4
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: LD_INT 25
9765: PUSH
9766: LD_INT 5
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PUSH
9773: LD_INT 25
9775: PUSH
9776: LD_INT 8
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 25
9785: PUSH
9786: LD_INT 9
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PPUSH
9807: CALL_OW 69
9811: ST_TO_ADDR
// RewardPeople ( tmp ) ;
9812: LD_VAR 0 1
9816: PPUSH
9817: CALL_OW 43
// tmp2 := [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Burlak , Belkov , Gnyevko ] ;
9821: LD_ADDR_VAR 0 2
9825: PUSH
9826: LD_EXP 14
9830: PUSH
9831: LD_EXP 15
9835: PUSH
9836: LD_EXP 16
9840: PUSH
9841: LD_EXP 17
9845: PUSH
9846: LD_EXP 18
9850: PUSH
9851: LD_EXP 19
9855: PUSH
9856: LD_EXP 20
9860: PUSH
9861: LD_EXP 21
9865: PUSH
9866: LD_EXP 22
9870: PUSH
9871: LD_EXP 23
9875: PUSH
9876: LD_EXP 24
9880: PUSH
9881: LD_EXP 25
9885: PUSH
9886: LD_EXP 26
9890: PUSH
9891: LD_EXP 27
9895: PUSH
9896: LD_EXP 28
9900: PUSH
9901: LD_EXP 29
9905: PUSH
9906: LD_EXP 30
9910: PUSH
9911: LD_EXP 31
9915: PUSH
9916: LD_EXP 32
9920: PUSH
9921: LD_EXP 33
9925: PUSH
9926: LD_EXP 35
9930: PUSH
9931: LD_EXP 36
9935: PUSH
9936: LD_EXP 37
9940: PUSH
9941: LD_EXP 38
9945: PUSH
9946: LD_EXP 39
9950: PUSH
9951: LD_EXP 40
9955: PUSH
9956: LD_EXP 41
9960: PUSH
9961: LD_EXP 42
9965: PUSH
9966: LD_EXP 43
9970: PUSH
9971: LD_EXP 44
9975: PUSH
9976: LD_EXP 45
9980: PUSH
9981: LD_EXP 46
9985: PUSH
9986: LD_EXP 47
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: ST_TO_ADDR
// if tmp diff tmp2 then
10026: LD_VAR 0 1
10030: PUSH
10031: LD_VAR 0 2
10035: DIFF
10036: IFFALSE 10056
// SaveCharacters ( tmp diff tmp2 , 13a_others ) ;
10038: LD_VAR 0 1
10042: PUSH
10043: LD_VAR 0 2
10047: DIFF
10048: PPUSH
10049: LD_STRING 13a_others
10051: PPUSH
10052: CALL_OW 38
// SaveCharacters ( JMM , 13a_JMM ) ;
10056: LD_EXP 14
10060: PPUSH
10061: LD_STRING 13a_JMM
10063: PPUSH
10064: CALL_OW 38
// if Titov then
10068: LD_EXP 33
10072: IFFALSE 10086
// SaveCharacters ( Titov , 13a_Titov ) ;
10074: LD_EXP 33
10078: PPUSH
10079: LD_STRING 13a_Titov
10081: PPUSH
10082: CALL_OW 38
// if Dolgov then
10086: LD_EXP 35
10090: IFFALSE 10104
// SaveCharacters ( Dolgov , 13a_Dolgov ) ;
10092: LD_EXP 35
10096: PPUSH
10097: LD_STRING 13a_Dolgov
10099: PPUSH
10100: CALL_OW 38
// if Petrosyan then
10104: LD_EXP 36
10108: IFFALSE 10122
// SaveCharacters ( Petrosyan , 13a_Petrosyan ) ;
10110: LD_EXP 36
10114: PPUSH
10115: LD_STRING 13a_Petrosyan
10117: PPUSH
10118: CALL_OW 38
// if Scholtze then
10122: LD_EXP 37
10126: IFFALSE 10140
// SaveCharacters ( Scholtze , 13a_Scholtze ) ;
10128: LD_EXP 37
10132: PPUSH
10133: LD_STRING 13a_Scholtze
10135: PPUSH
10136: CALL_OW 38
// if Oblukov then
10140: LD_EXP 38
10144: IFFALSE 10158
// SaveCharacters ( Oblukov , 13a_Oblukov ) ;
10146: LD_EXP 38
10150: PPUSH
10151: LD_STRING 13a_Oblukov
10153: PPUSH
10154: CALL_OW 38
// if Kapitsova then
10158: LD_EXP 39
10162: IFFALSE 10176
// SaveCharacters ( Kapitsova , 13a_Kapitsova ) ;
10164: LD_EXP 39
10168: PPUSH
10169: LD_STRING 13a_Kapitsova
10171: PPUSH
10172: CALL_OW 38
// if Lipshchin then
10176: LD_EXP 40
10180: IFFALSE 10194
// SaveCharacters ( Lipshchin , 13a_Lipshchin ) ;
10182: LD_EXP 40
10186: PPUSH
10187: LD_STRING 13a_Lipshchin
10189: PPUSH
10190: CALL_OW 38
// if Petrovova then
10194: LD_EXP 41
10198: IFFALSE 10212
// SaveCharacters ( Petrovova , 13a_Petrovova ) ;
10200: LD_EXP 41
10204: PPUSH
10205: LD_STRING 13a_Petrovova
10207: PPUSH
10208: CALL_OW 38
// if Kovalyuk then
10212: LD_EXP 42
10216: IFFALSE 10230
// SaveCharacters ( Kovalyuk , 13a_Kovalyuk ) ;
10218: LD_EXP 42
10222: PPUSH
10223: LD_STRING 13a_Kovalyuk
10225: PPUSH
10226: CALL_OW 38
// if Kuzmov then
10230: LD_EXP 43
10234: IFFALSE 10248
// SaveCharacters ( Kuzmov , 13a_Kuzmov ) ;
10236: LD_EXP 43
10240: PPUSH
10241: LD_STRING 13a_Kuzmov
10243: PPUSH
10244: CALL_OW 38
// if Karamazov then
10248: LD_EXP 44
10252: IFFALSE 10266
// SaveCharacters ( Karamazov , 13a_Karamazov ) ;
10254: LD_EXP 44
10258: PPUSH
10259: LD_STRING 13a_Karamazov
10261: PPUSH
10262: CALL_OW 38
// if Burlak then
10266: LD_EXP 45
10270: IFFALSE 10284
// SaveCharacters ( Burlak , 13a_Burlak ) ;
10272: LD_EXP 45
10276: PPUSH
10277: LD_STRING 13a_Burlak
10279: PPUSH
10280: CALL_OW 38
// if Belkov then
10284: LD_EXP 46
10288: IFFALSE 10302
// SaveCharacters ( Belkov , 13a_Belkov ) ;
10290: LD_EXP 46
10294: PPUSH
10295: LD_STRING 13a_Belkov
10297: PPUSH
10298: CALL_OW 38
// if Gnyevko then
10302: LD_EXP 47
10306: IFFALSE 10320
// SaveCharacters ( Gnyevko , 13a_Gnyevko ) ;
10308: LD_EXP 47
10312: PPUSH
10313: LD_STRING 13a_Gnyevko
10315: PPUSH
10316: CALL_OW 38
// if Lisa then
10320: LD_EXP 16
10324: IFFALSE 10338
// SaveCharacters ( Lisa , 13a_Lisa ) ;
10326: LD_EXP 16
10330: PPUSH
10331: LD_STRING 13a_Lisa
10333: PPUSH
10334: CALL_OW 38
// if Donaldson then
10338: LD_EXP 17
10342: IFFALSE 10356
// SaveCharacters ( Donaldson , 13a_Donaldson ) ;
10344: LD_EXP 17
10348: PPUSH
10349: LD_STRING 13a_Donaldson
10351: PPUSH
10352: CALL_OW 38
// if Bobby then
10356: LD_EXP 18
10360: IFFALSE 10374
// SaveCharacters ( Bobby , 13a_Bobby ) ;
10362: LD_EXP 18
10366: PPUSH
10367: LD_STRING 13a_Bobby
10369: PPUSH
10370: CALL_OW 38
// if Cyrus then
10374: LD_EXP 19
10378: IFFALSE 10392
// SaveCharacters ( Cyrus , 13a_Cyrus ) ;
10380: LD_EXP 19
10384: PPUSH
10385: LD_STRING 13a_Cyrus
10387: PPUSH
10388: CALL_OW 38
// if Denis then
10392: LD_EXP 20
10396: IFFALSE 10410
// SaveCharacters ( Denis , 13a_Denis ) ;
10398: LD_EXP 20
10402: PPUSH
10403: LD_STRING 13a_Denis
10405: PPUSH
10406: CALL_OW 38
// if Brown then
10410: LD_EXP 21
10414: IFFALSE 10428
// SaveCharacters ( Brown , 13a_Brown ) ;
10416: LD_EXP 21
10420: PPUSH
10421: LD_STRING 13a_Brown
10423: PPUSH
10424: CALL_OW 38
// if Gladstone then
10428: LD_EXP 22
10432: IFFALSE 10446
// SaveCharacters ( Gladstone , 13a_Gladstone ) ;
10434: LD_EXP 22
10438: PPUSH
10439: LD_STRING 13a_Gladstone
10441: PPUSH
10442: CALL_OW 38
// if Houten then
10446: LD_EXP 23
10450: IFFALSE 10464
// SaveCharacters ( Houten , 13a_Houten ) ;
10452: LD_EXP 23
10456: PPUSH
10457: LD_STRING 13a_Houten
10459: PPUSH
10460: CALL_OW 38
// if Cornel then
10464: LD_EXP 24
10468: IFFALSE 10482
// SaveCharacters ( Cornel , 13a_Cornel ) ;
10470: LD_EXP 24
10474: PPUSH
10475: LD_STRING 13a_Cornel
10477: PPUSH
10478: CALL_OW 38
// if Gary then
10482: LD_EXP 25
10486: IFFALSE 10500
// SaveCharacters ( Gary , 13a_Gary ) ;
10488: LD_EXP 25
10492: PPUSH
10493: LD_STRING 13a_Gary
10495: PPUSH
10496: CALL_OW 38
// if Frank then
10500: LD_EXP 26
10504: IFFALSE 10518
// SaveCharacters ( Frank , 13a_Frank ) ;
10506: LD_EXP 26
10510: PPUSH
10511: LD_STRING 13a_Frank
10513: PPUSH
10514: CALL_OW 38
// if Kikuchi then
10518: LD_EXP 27
10522: IFFALSE 10536
// SaveCharacters ( Kikuchi , 13a_Kikuchi ) ;
10524: LD_EXP 27
10528: PPUSH
10529: LD_STRING 13a_Kikuchi
10531: PPUSH
10532: CALL_OW 38
// if Simms then
10536: LD_EXP 28
10540: IFFALSE 10554
// SaveCharacters ( Simms , 13a_Simms ) ;
10542: LD_EXP 28
10546: PPUSH
10547: LD_STRING 13a_Simms
10549: PPUSH
10550: CALL_OW 38
// if Joan then
10554: LD_EXP 29
10558: IFFALSE 10572
// SaveCharacters ( Joan , 13a_Joan ) ;
10560: LD_EXP 29
10564: PPUSH
10565: LD_STRING 13a_Joan
10567: PPUSH
10568: CALL_OW 38
// if DeltaDoctor then
10572: LD_EXP 30
10576: IFFALSE 10590
// SaveCharacters ( DeltaDoctor , 13a_DeltaDoctor ) ;
10578: LD_EXP 30
10582: PPUSH
10583: LD_STRING 13a_DeltaDoctor
10585: PPUSH
10586: CALL_OW 38
// if Gossudarov then
10590: LD_EXP 31
10594: IFFALSE 10608
// SaveCharacters ( Gossudarov , 13a_Gossudarov ) ;
10596: LD_EXP 31
10600: PPUSH
10601: LD_STRING 13a_Gossudarov
10603: PPUSH
10604: CALL_OW 38
// if Kirilenkova then
10608: LD_EXP 32
10612: IFFALSE 10626
// SaveCharacters ( Kirilenkova , 13a_Kirilenkova ) ;
10614: LD_EXP 32
10618: PPUSH
10619: LD_STRING 13a_Kirilenkova
10621: PPUSH
10622: CALL_OW 38
// end ;
10626: PPOPN 2
10628: END
// export function SciRu ; var tmp , t ; begin
10629: LD_INT 0
10631: PPUSH
10632: PPUSH
10633: PPUSH
// t := [ Gossudarov , Burlak , Titov , Belkov , Gnyevko ] ;
10634: LD_ADDR_VAR 0 3
10638: PUSH
10639: LD_EXP 31
10643: PUSH
10644: LD_EXP 45
10648: PUSH
10649: LD_EXP 33
10653: PUSH
10654: LD_EXP 46
10658: PUSH
10659: LD_EXP 47
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff t ;
10671: LD_ADDR_VAR 0 2
10675: PUSH
10676: LD_INT 22
10678: PUSH
10679: LD_INT 7
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 23
10688: PUSH
10689: LD_INT 3
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 25
10698: PUSH
10699: LD_INT 4
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: LD_INT 26
10708: PUSH
10709: LD_INT 1
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: PPUSH
10722: CALL_OW 69
10726: PUSH
10727: LD_VAR 0 3
10731: DIFF
10732: ST_TO_ADDR
// if tmp then
10733: LD_VAR 0 2
10737: IFFALSE 10753
// result := tmp [ 1 ] ;
10739: LD_ADDR_VAR 0 1
10743: PUSH
10744: LD_VAR 0 2
10748: PUSH
10749: LD_INT 1
10751: ARRAY
10752: ST_TO_ADDR
// end ;
10753: LD_VAR 0 1
10757: RET
// export function SolRu ; var tmp , t ; begin
10758: LD_INT 0
10760: PPUSH
10761: PPUSH
10762: PPUSH
// t := [ Belkov , Burlak , Gossudarov ] ;
10763: LD_ADDR_VAR 0 3
10767: PUSH
10768: LD_EXP 46
10772: PUSH
10773: LD_EXP 45
10777: PUSH
10778: LD_EXP 31
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 1 ] , [ f_sex , sex_male ] ] ) diff t ;
10788: LD_ADDR_VAR 0 2
10792: PUSH
10793: LD_INT 22
10795: PUSH
10796: LD_INT 7
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 23
10805: PUSH
10806: LD_INT 3
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 25
10815: PUSH
10816: LD_INT 1
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 26
10825: PUSH
10826: LD_INT 1
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: PPUSH
10839: CALL_OW 69
10843: PUSH
10844: LD_VAR 0 3
10848: DIFF
10849: ST_TO_ADDR
// if tmp then
10850: LD_VAR 0 2
10854: IFFALSE 10870
// result := tmp [ 1 ] ;
10856: LD_ADDR_VAR 0 1
10860: PUSH
10861: LD_VAR 0 2
10865: PUSH
10866: LD_INT 1
10868: ARRAY
10869: ST_TO_ADDR
// end ; end_of_file
10870: LD_VAR 0 1
10874: RET
// on UnitDestroyed ( un ) do var i , side ;
10875: LD_INT 0
10877: PPUSH
10878: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) then
10879: LD_VAR 0 1
10883: PUSH
10884: LD_INT 22
10886: PUSH
10887: LD_INT 7
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PUSH
10894: LD_INT 2
10896: PUSH
10897: LD_INT 25
10899: PUSH
10900: LD_INT 1
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PUSH
10907: LD_INT 25
10909: PUSH
10910: LD_INT 2
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 25
10919: PUSH
10920: LD_INT 3
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: LD_INT 25
10929: PUSH
10930: LD_INT 4
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: LD_INT 25
10939: PUSH
10940: LD_INT 5
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PUSH
10947: LD_INT 25
10949: PUSH
10950: LD_INT 8
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: PUSH
10957: LD_INT 25
10959: PUSH
10960: LD_INT 9
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PPUSH
10981: CALL_OW 69
10985: IN
10986: IFFALSE 11002
// loss_counter := loss_counter + 1 ;
10988: LD_ADDR_EXP 13
10992: PUSH
10993: LD_EXP 13
10997: PUSH
10998: LD_INT 1
11000: PLUS
11001: ST_TO_ADDR
// if un in ru_attackers then
11002: LD_VAR 0 1
11006: PUSH
11007: LD_EXP 51
11011: IN
11012: IFFALSE 11030
// ru_attackers := ru_attackers diff un ;
11014: LD_ADDR_EXP 51
11018: PUSH
11019: LD_EXP 51
11023: PUSH
11024: LD_VAR 0 1
11028: DIFF
11029: ST_TO_ADDR
// if un in ar_attackers then
11030: LD_VAR 0 1
11034: PUSH
11035: LD_EXP 10
11039: IN
11040: IFFALSE 11058
// ar_attackers := ar_attackers diff un ;
11042: LD_ADDR_EXP 10
11046: PUSH
11047: LD_EXP 10
11051: PUSH
11052: LD_VAR 0 1
11056: DIFF
11057: ST_TO_ADDR
// if un = JMM then
11058: LD_VAR 0 1
11062: PUSH
11063: LD_EXP 14
11067: EQUAL
11068: IFFALSE 11079
// begin YouLost ( JMM ) ;
11070: LD_STRING JMM
11072: PPUSH
11073: CALL_OW 104
// exit ;
11077: GO 11168
// end ; if un = Burlak then
11079: LD_VAR 0 1
11083: PUSH
11084: LD_EXP 45
11088: EQUAL
11089: IFFALSE 11100
// begin YouLost ( Burlak ) ;
11091: LD_STRING Burlak
11093: PPUSH
11094: CALL_OW 104
// exit ;
11098: GO 11168
// end ; if un = freedom then
11100: LD_VAR 0 1
11104: PUSH
11105: LD_EXP 3
11109: EQUAL
11110: IFFALSE 11121
// begin YouLost ( Destroyed ) ;
11112: LD_STRING Destroyed
11114: PPUSH
11115: CALL_OW 104
// exit ;
11119: GO 11168
// end ; if un = Masha then
11121: LD_VAR 0 1
11125: PUSH
11126: LD_EXP 48
11130: EQUAL
11131: IFFALSE 11140
// ChangeMissionObjectives ( M4b ) ;
11133: LD_STRING M4b
11135: PPUSH
11136: CALL_OW 337
// if un = Mastodont then
11140: LD_VAR 0 1
11144: PUSH
11145: LD_EXP 55
11149: EQUAL
11150: IFFALSE 11159
// ChangeMissionObjectives ( M4a ) ;
11152: LD_STRING M4a
11154: PPUSH
11155: CALL_OW 337
// MCE_UnitDestroyed ( un ) ;
11159: LD_VAR 0 1
11163: PPUSH
11164: CALL 65600 0 1
// end ;
11168: PPOPN 3
11170: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
11171: LD_VAR 0 1
11175: PPUSH
11176: LD_VAR 0 2
11180: PPUSH
11181: CALL 67467 0 2
// end ;
11185: PPOPN 2
11187: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
11188: LD_VAR 0 1
11192: PPUSH
11193: CALL 66549 0 1
// end ;
11197: PPOPN 1
11199: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_depot ] ] ) then
11200: LD_VAR 0 1
11204: PUSH
11205: LD_INT 22
11207: PUSH
11208: LD_INT 7
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: PUSH
11215: LD_INT 30
11217: PUSH
11218: LD_INT 0
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PPUSH
11229: CALL_OW 69
11233: IN
11234: IFFALSE 11273
// begin SetBName ( building , freedom ) ;
11236: LD_VAR 0 1
11240: PPUSH
11241: LD_STRING freedom
11243: PPUSH
11244: CALL_OW 500
// SetRestrict ( b_depot , 7 , false ) ;
11248: LD_INT 0
11250: PPUSH
11251: LD_INT 7
11253: PPUSH
11254: LD_INT 0
11256: PPUSH
11257: CALL_OW 324
// freedom := building ;
11261: LD_ADDR_EXP 3
11265: PUSH
11266: LD_VAR 0 1
11270: ST_TO_ADDR
// exit ;
11271: GO 11339
// end ; if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_btype , b_lab ] ] ) then
11273: LD_VAR 0 1
11277: PUSH
11278: LD_INT 22
11280: PUSH
11281: LD_INT 7
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 23
11290: PUSH
11291: LD_INT 3
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 30
11300: PUSH
11301: LD_INT 6
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: LIST
11312: PPUSH
11313: CALL_OW 69
11317: IN
11318: IFFALSE 11330
// begin ru_lab_builded := true ;
11320: LD_ADDR_EXP 5
11324: PUSH
11325: LD_INT 1
11327: ST_TO_ADDR
// exit ;
11328: GO 11339
// end ; MCE_BuildingComplete ( building ) ;
11330: LD_VAR 0 1
11334: PPUSH
11335: CALL 66783 0 1
// end ;
11339: PPOPN 1
11341: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
11342: LD_VAR 0 1
11346: PPUSH
11347: LD_VAR 0 2
11351: PPUSH
11352: CALL 65312 0 2
// end ;
11356: PPOPN 2
11358: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
11359: LD_VAR 0 1
11363: PPUSH
11364: LD_VAR 0 2
11368: PPUSH
11369: LD_VAR 0 3
11373: PPUSH
11374: LD_VAR 0 4
11378: PPUSH
11379: LD_VAR 0 5
11383: PPUSH
11384: CALL 64939 0 5
// end ;
11388: PPOPN 5
11390: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
11391: LD_VAR 0 1
11395: PPUSH
11396: LD_VAR 0 2
11400: PPUSH
11401: CALL 64627 0 2
// end ;
11405: PPOPN 2
11407: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
11408: LD_VAR 0 1
11412: PPUSH
11413: LD_VAR 0 2
11417: PPUSH
11418: LD_VAR 0 3
11422: PPUSH
11423: LD_VAR 0 4
11427: PPUSH
11428: CALL 64472 0 4
// end ;
11432: PPOPN 4
11434: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_VAR 0 2
11444: PPUSH
11445: LD_VAR 0 3
11449: PPUSH
11450: CALL 64254 0 3
// end ;
11454: PPOPN 3
11456: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
11457: LD_VAR 0 1
11461: PPUSH
11462: LD_VAR 0 2
11466: PPUSH
11467: CALL 64146 0 2
// end ;
11471: PPOPN 2
11473: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
11474: LD_VAR 0 1
11478: PPUSH
11479: LD_VAR 0 2
11483: PPUSH
11484: CALL 67721 0 2
// end ;
11488: PPOPN 2
11490: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
11491: LD_VAR 0 1
11495: PPUSH
11496: LD_VAR 0 2
11500: PPUSH
11501: LD_VAR 0 3
11505: PPUSH
11506: LD_VAR 0 4
11510: PPUSH
11511: CALL 67930 0 4
// end ;
11515: PPOPN 4
11517: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
11518: LD_VAR 0 1
11522: PPUSH
11523: LD_VAR 0 2
11527: PPUSH
11528: CALL 63962 0 2
// end ; end_of_file
11532: PPOPN 2
11534: END
// every 0 0$30 do var cr , time ;
11535: GO 11537
11537: DISABLE
11538: LD_INT 0
11540: PPUSH
11541: PPUSH
// begin time := 0 0$10 ;
11542: LD_ADDR_VAR 0 2
11546: PUSH
11547: LD_INT 350
11549: ST_TO_ADDR
// while game do
11550: LD_EXP 2
11554: IFFALSE 11653
// begin wait ( time ) ;
11556: LD_VAR 0 2
11560: PPUSH
11561: CALL_OW 67
// if tick > 2 2$00 then
11565: LD_OWVAR 1
11569: PUSH
11570: LD_INT 4200
11572: GREATER
11573: IFFALSE 11606
// time := time + [ 0 0$05 , 0 0$06 , 0 0$07 ] [ Difficulty ] ;
11575: LD_ADDR_VAR 0 2
11579: PUSH
11580: LD_VAR 0 2
11584: PUSH
11585: LD_INT 175
11587: PUSH
11588: LD_INT 210
11590: PUSH
11591: LD_INT 245
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: LIST
11598: PUSH
11599: LD_OWVAR 67
11603: ARRAY
11604: PLUS
11605: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 70 , 49 , 25 , true ) ;
11606: LD_INT 1
11608: PPUSH
11609: LD_INT 5
11611: PPUSH
11612: CALL_OW 12
11616: PPUSH
11617: LD_INT 70
11619: PPUSH
11620: LD_INT 49
11622: PPUSH
11623: LD_INT 25
11625: PPUSH
11626: LD_INT 1
11628: PPUSH
11629: CALL_OW 56
// if time > 5 5$00 then
11633: LD_VAR 0 2
11637: PUSH
11638: LD_INT 10500
11640: GREATER
11641: IFFALSE 11651
// time := 0 0$30 ;
11643: LD_ADDR_VAR 0 2
11647: PUSH
11648: LD_INT 1050
11650: ST_TO_ADDR
// end ;
11651: GO 11550
// end ;
11653: PPOPN 2
11655: END
// every 0 0$30 do var cr , time ;
11656: GO 11658
11658: DISABLE
11659: LD_INT 0
11661: PPUSH
11662: PPUSH
// begin time := 0 0$01 ;
11663: LD_ADDR_VAR 0 2
11667: PUSH
11668: LD_INT 35
11670: ST_TO_ADDR
// while game do
11671: LD_EXP 2
11675: IFFALSE 11764
// begin wait ( time ) ;
11677: LD_VAR 0 2
11681: PPUSH
11682: CALL_OW 67
// time := time + [ 0 0$04 , 0 0$05 , 0 0$06 ] [ Difficulty ] ;
11686: LD_ADDR_VAR 0 2
11690: PUSH
11691: LD_VAR 0 2
11695: PUSH
11696: LD_INT 140
11698: PUSH
11699: LD_INT 175
11701: PUSH
11702: LD_INT 210
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: LIST
11709: PUSH
11710: LD_OWVAR 67
11714: ARRAY
11715: PLUS
11716: ST_TO_ADDR
// CreateCratesXYR ( rand ( 3 , 5 ) , 26 , 9 , 30 , true ) ;
11717: LD_INT 3
11719: PPUSH
11720: LD_INT 5
11722: PPUSH
11723: CALL_OW 12
11727: PPUSH
11728: LD_INT 26
11730: PPUSH
11731: LD_INT 9
11733: PPUSH
11734: LD_INT 30
11736: PPUSH
11737: LD_INT 1
11739: PPUSH
11740: CALL_OW 56
// if time > 3 3$00 then
11744: LD_VAR 0 2
11748: PUSH
11749: LD_INT 6300
11751: GREATER
11752: IFFALSE 11762
// time := 0 0$20 ;
11754: LD_ADDR_VAR 0 2
11758: PUSH
11759: LD_INT 700
11761: ST_TO_ADDR
// end ;
11762: GO 11671
// end ;
11764: PPOPN 2
11766: END
// every 0 0$30 do var cr , time ;
11767: GO 11769
11769: DISABLE
11770: LD_INT 0
11772: PPUSH
11773: PPUSH
// begin time := 0 0$20 ;
11774: LD_ADDR_VAR 0 2
11778: PUSH
11779: LD_INT 700
11781: ST_TO_ADDR
// while game do
11782: LD_EXP 2
11786: IFFALSE 11911
// begin wait ( time ) ;
11788: LD_VAR 0 2
11792: PPUSH
11793: CALL_OW 67
// time := time + [ 0 0$05 , 0 0$06 , 0 0$08 ] [ Difficulty ] ;
11797: LD_ADDR_VAR 0 2
11801: PUSH
11802: LD_VAR 0 2
11806: PUSH
11807: LD_INT 175
11809: PUSH
11810: LD_INT 210
11812: PUSH
11813: LD_INT 280
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: LIST
11820: PUSH
11821: LD_OWVAR 67
11825: ARRAY
11826: PLUS
11827: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 179 , 101 , 20 , true ) ;
11828: LD_INT 1
11830: PPUSH
11831: LD_INT 5
11833: PPUSH
11834: CALL_OW 12
11838: PPUSH
11839: LD_INT 179
11841: PPUSH
11842: LD_INT 101
11844: PPUSH
11845: LD_INT 20
11847: PPUSH
11848: LD_INT 1
11850: PPUSH
11851: CALL_OW 56
// wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
11855: LD_INT 350
11857: PPUSH
11858: LD_INT 525
11860: PPUSH
11861: CALL_OW 12
11865: PPUSH
11866: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area_collect_arabian , true ) ;
11870: LD_INT 1
11872: PPUSH
11873: LD_INT 5
11875: PPUSH
11876: CALL_OW 12
11880: PPUSH
11881: LD_INT 9
11883: PPUSH
11884: LD_INT 1
11886: PPUSH
11887: CALL_OW 55
// if time > 4 4$00 then
11891: LD_VAR 0 2
11895: PUSH
11896: LD_INT 8400
11898: GREATER
11899: IFFALSE 11909
// time := 0 0$30 ;
11901: LD_ADDR_VAR 0 2
11905: PUSH
11906: LD_INT 1050
11908: ST_TO_ADDR
// end ;
11909: GO 11782
// end ;
11911: PPOPN 2
11913: END
// every 0 0$30 do var cr , time ;
11914: GO 11916
11916: DISABLE
11917: LD_INT 0
11919: PPUSH
11920: PPUSH
// begin time := 0 0$10 ;
11921: LD_ADDR_VAR 0 2
11925: PUSH
11926: LD_INT 350
11928: ST_TO_ADDR
// while game do
11929: LD_EXP 2
11933: IFFALSE 12067
// begin wait ( time ) ;
11935: LD_VAR 0 2
11939: PPUSH
11940: CALL_OW 67
// time := time + 0 0$10 ;
11944: LD_ADDR_VAR 0 2
11948: PUSH
11949: LD_VAR 0 2
11953: PUSH
11954: LD_INT 350
11956: PLUS
11957: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , area_crates_russian , true ) ;
11958: LD_INT 1
11960: PPUSH
11961: LD_INT 5
11963: PPUSH
11964: CALL_OW 12
11968: PPUSH
11969: LD_INT 11
11971: PPUSH
11972: LD_INT 1
11974: PPUSH
11975: CALL_OW 55
// cr := rand ( 1 , 3 ) ;
11979: LD_ADDR_VAR 0 1
11983: PUSH
11984: LD_INT 1
11986: PPUSH
11987: LD_INT 3
11989: PPUSH
11990: CALL_OW 12
11994: ST_TO_ADDR
// if cr = 1 then
11995: LD_VAR 0 1
11999: PUSH
12000: LD_INT 1
12002: EQUAL
12003: IFFALSE 12047
// begin wait ( rand ( 0 0$20 , 0 0$45 ) ) ;
12005: LD_INT 700
12007: PPUSH
12008: LD_INT 1575
12010: PPUSH
12011: CALL_OW 12
12015: PPUSH
12016: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 34 , 50 , 7 , true ) ;
12020: LD_INT 1
12022: PPUSH
12023: LD_INT 5
12025: PPUSH
12026: CALL_OW 12
12030: PPUSH
12031: LD_INT 34
12033: PPUSH
12034: LD_INT 50
12036: PPUSH
12037: LD_INT 7
12039: PPUSH
12040: LD_INT 1
12042: PPUSH
12043: CALL_OW 56
// end ; if time > 8 8$00 then
12047: LD_VAR 0 2
12051: PUSH
12052: LD_INT 16800
12054: GREATER
12055: IFFALSE 12065
// time := 0 0$40 ;
12057: LD_ADDR_VAR 0 2
12061: PUSH
12062: LD_INT 1400
12064: ST_TO_ADDR
// end ;
12065: GO 11929
// end ; end_of_file
12067: PPOPN 2
12069: END
// export function PrepareAmericanAttack ; var i , tmp , veh , flags , _target ; begin
12070: LD_INT 0
12072: PPUSH
12073: PPUSH
12074: PPUSH
12075: PPUSH
12076: PPUSH
12077: PPUSH
// uc_side := 1 ;
12078: LD_ADDR_OWVAR 20
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// uc_nation := 1 ;
12086: LD_ADDR_OWVAR 21
12090: PUSH
12091: LD_INT 1
12093: ST_TO_ADDR
// InitHc ;
12094: CALL_OW 19
// InitVc ;
12098: CALL_OW 20
// tmp := [ ] ;
12102: LD_ADDR_VAR 0 3
12106: PUSH
12107: EMPTY
12108: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
12109: LD_ADDR_VAR 0 5
12113: PUSH
12114: LD_INT 0
12116: PUSH
12117: LD_INT 0
12119: PUSH
12120: LD_INT 0
12122: PUSH
12123: LD_INT 0
12125: PUSH
12126: LD_INT 0
12128: PUSH
12129: LD_INT 0
12131: PUSH
12132: LD_INT 0
12134: PUSH
12135: LD_INT 0
12137: PUSH
12138: LD_INT 1
12140: PUSH
12141: LD_INT 0
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: ST_TO_ADDR
// _target := [ [ 71 , 34 ] , [ 63 , 49 ] ] ;
12156: LD_ADDR_VAR 0 6
12160: PUSH
12161: LD_INT 71
12163: PUSH
12164: LD_INT 34
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 63
12173: PUSH
12174: LD_INT 49
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
12185: LD_ADDR_VAR 0 2
12189: PUSH
12190: DOUBLE
12191: LD_INT 1
12193: DEC
12194: ST_TO_ADDR
12195: LD_INT 4
12197: PUSH
12198: LD_INT 5
12200: PUSH
12201: LD_INT 6
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: LIST
12208: PUSH
12209: LD_OWVAR 67
12213: ARRAY
12214: PUSH
12215: FOR_TO
12216: IFFALSE 12353
// begin PrepareVehicle ( [ us_medium_wheeled , us_heavy_tracked , us_morphling ] [ rand ( 1 , 3 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ us_laser , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 78 ) ;
12218: LD_INT 2
12220: PUSH
12221: LD_INT 4
12223: PUSH
12224: LD_INT 5
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 1
12234: PPUSH
12235: LD_INT 3
12237: PPUSH
12238: CALL_OW 12
12242: ARRAY
12243: PPUSH
12244: LD_INT 1
12246: PUSH
12247: LD_INT 3
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: LD_INT 1
12256: PPUSH
12257: LD_INT 2
12259: PPUSH
12260: CALL_OW 12
12264: ARRAY
12265: PPUSH
12266: LD_INT 3
12268: PPUSH
12269: LD_INT 9
12271: PUSH
12272: LD_INT 7
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 1
12281: PPUSH
12282: LD_INT 2
12284: PPUSH
12285: CALL_OW 12
12289: ARRAY
12290: PPUSH
12291: LD_INT 78
12293: PPUSH
12294: CALL 18484 0 5
// veh := CreateVehicle ;
12298: LD_ADDR_VAR 0 4
12302: PUSH
12303: CALL_OW 45
12307: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12308: LD_VAR 0 4
12312: PPUSH
12313: LD_INT 2
12315: PPUSH
12316: CALL_OW 233
// PlaceUnitArea ( veh , north_spawn , false ) ;
12320: LD_VAR 0 4
12324: PPUSH
12325: LD_INT 17
12327: PPUSH
12328: LD_INT 0
12330: PPUSH
12331: CALL_OW 49
// tmp := tmp union veh ;
12335: LD_ADDR_VAR 0 3
12339: PUSH
12340: LD_VAR 0 3
12344: PUSH
12345: LD_VAR 0 4
12349: UNION
12350: ST_TO_ADDR
// end ;
12351: GO 12215
12353: POP
12354: POP
// if not tmp then
12355: LD_VAR 0 3
12359: NOT
12360: IFFALSE 12364
// exit ;
12362: GO 12407
// if not first_powell_attack then
12364: LD_EXP 11
12368: NOT
12369: IFFALSE 12379
// first_powell_attack := true ;
12371: LD_ADDR_EXP 11
12375: PUSH
12376: LD_INT 1
12378: ST_TO_ADDR
// Attack ( [ 0 , tmp , _target , flags ] ) ;
12379: LD_INT 0
12381: PUSH
12382: LD_VAR 0 3
12386: PUSH
12387: LD_VAR 0 6
12391: PUSH
12392: LD_VAR 0 5
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: PPUSH
12403: CALL 46381 0 1
// end ; end_of_file
12407: LD_VAR 0 1
12411: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
12412: LD_INT 0
12414: PPUSH
12415: PPUSH
// if exist_mode then
12416: LD_VAR 0 2
12420: IFFALSE 12445
// unit := CreateCharacter ( prefix & ident ) else
12422: LD_ADDR_VAR 0 5
12426: PUSH
12427: LD_VAR 0 3
12431: PUSH
12432: LD_VAR 0 1
12436: STR
12437: PPUSH
12438: CALL_OW 34
12442: ST_TO_ADDR
12443: GO 12460
// unit := NewCharacter ( ident ) ;
12445: LD_ADDR_VAR 0 5
12449: PUSH
12450: LD_VAR 0 1
12454: PPUSH
12455: CALL_OW 25
12459: ST_TO_ADDR
// result := unit ;
12460: LD_ADDR_VAR 0 4
12464: PUSH
12465: LD_VAR 0 5
12469: ST_TO_ADDR
// end ;
12470: LD_VAR 0 4
12474: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
12475: LD_INT 0
12477: PPUSH
12478: PPUSH
// if not side or not nation then
12479: LD_VAR 0 1
12483: NOT
12484: PUSH
12485: LD_VAR 0 2
12489: NOT
12490: OR
12491: IFFALSE 12495
// exit ;
12493: GO 13107
// case nation of nation_american :
12495: LD_VAR 0 2
12499: PUSH
12500: LD_INT 1
12502: DOUBLE
12503: EQUAL
12504: IFTRUE 12508
12506: GO 12666
12508: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
12509: LD_ADDR_VAR 0 4
12513: PUSH
12514: LD_INT 35
12516: PUSH
12517: LD_INT 45
12519: PUSH
12520: LD_INT 46
12522: PUSH
12523: LD_INT 47
12525: PUSH
12526: LD_INT 1
12528: PUSH
12529: LD_INT 2
12531: PUSH
12532: LD_INT 6
12534: PUSH
12535: LD_INT 15
12537: PUSH
12538: LD_INT 16
12540: PUSH
12541: LD_INT 7
12543: PUSH
12544: LD_INT 12
12546: PUSH
12547: LD_INT 13
12549: PUSH
12550: LD_INT 10
12552: PUSH
12553: LD_INT 14
12555: PUSH
12556: LD_INT 20
12558: PUSH
12559: LD_INT 25
12561: PUSH
12562: LD_INT 36
12564: PUSH
12565: LD_INT 69
12567: PUSH
12568: LD_INT 39
12570: PUSH
12571: LD_INT 34
12573: PUSH
12574: LD_INT 40
12576: PUSH
12577: LD_INT 48
12579: PUSH
12580: LD_INT 49
12582: PUSH
12583: LD_INT 50
12585: PUSH
12586: LD_INT 51
12588: PUSH
12589: LD_INT 52
12591: PUSH
12592: LD_INT 53
12594: PUSH
12595: LD_INT 54
12597: PUSH
12598: LD_INT 55
12600: PUSH
12601: LD_INT 56
12603: PUSH
12604: LD_INT 57
12606: PUSH
12607: LD_INT 58
12609: PUSH
12610: LD_INT 59
12612: PUSH
12613: LD_INT 60
12615: PUSH
12616: LD_INT 61
12618: PUSH
12619: LD_INT 62
12621: PUSH
12622: LD_INT 80
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: ST_TO_ADDR
12664: GO 13031
12666: LD_INT 2
12668: DOUBLE
12669: EQUAL
12670: IFTRUE 12674
12672: GO 12844
12674: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
12675: LD_ADDR_VAR 0 4
12679: PUSH
12680: LD_INT 35
12682: PUSH
12683: LD_INT 45
12685: PUSH
12686: LD_INT 46
12688: PUSH
12689: LD_INT 47
12691: PUSH
12692: LD_INT 70
12694: PUSH
12695: LD_INT 1
12697: PUSH
12698: LD_INT 11
12700: PUSH
12701: LD_INT 3
12703: PUSH
12704: LD_INT 4
12706: PUSH
12707: LD_INT 5
12709: PUSH
12710: LD_INT 6
12712: PUSH
12713: LD_INT 15
12715: PUSH
12716: LD_INT 18
12718: PUSH
12719: LD_INT 7
12721: PUSH
12722: LD_INT 17
12724: PUSH
12725: LD_INT 8
12727: PUSH
12728: LD_INT 20
12730: PUSH
12731: LD_INT 72
12733: PUSH
12734: LD_INT 26
12736: PUSH
12737: LD_INT 69
12739: PUSH
12740: LD_INT 39
12742: PUSH
12743: LD_INT 40
12745: PUSH
12746: LD_INT 41
12748: PUSH
12749: LD_INT 42
12751: PUSH
12752: LD_INT 43
12754: PUSH
12755: LD_INT 48
12757: PUSH
12758: LD_INT 49
12760: PUSH
12761: LD_INT 50
12763: PUSH
12764: LD_INT 51
12766: PUSH
12767: LD_INT 52
12769: PUSH
12770: LD_INT 53
12772: PUSH
12773: LD_INT 54
12775: PUSH
12776: LD_INT 55
12778: PUSH
12779: LD_INT 56
12781: PUSH
12782: LD_INT 60
12784: PUSH
12785: LD_INT 61
12787: PUSH
12788: LD_INT 62
12790: PUSH
12791: LD_INT 66
12793: PUSH
12794: LD_INT 67
12796: PUSH
12797: LD_INT 68
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: ST_TO_ADDR
12842: GO 13031
12844: LD_INT 3
12846: DOUBLE
12847: EQUAL
12848: IFTRUE 12852
12850: GO 13030
12852: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
12853: LD_ADDR_VAR 0 4
12857: PUSH
12858: LD_INT 46
12860: PUSH
12861: LD_INT 47
12863: PUSH
12864: LD_INT 1
12866: PUSH
12867: LD_INT 2
12869: PUSH
12870: LD_INT 11
12872: PUSH
12873: LD_INT 9
12875: PUSH
12876: LD_INT 20
12878: PUSH
12879: LD_INT 19
12881: PUSH
12882: LD_INT 21
12884: PUSH
12885: LD_INT 24
12887: PUSH
12888: LD_INT 22
12890: PUSH
12891: LD_INT 25
12893: PUSH
12894: LD_INT 28
12896: PUSH
12897: LD_INT 29
12899: PUSH
12900: LD_INT 31
12902: PUSH
12903: LD_INT 37
12905: PUSH
12906: LD_INT 38
12908: PUSH
12909: LD_INT 32
12911: PUSH
12912: LD_INT 27
12914: PUSH
12915: LD_INT 33
12917: PUSH
12918: LD_INT 69
12920: PUSH
12921: LD_INT 39
12923: PUSH
12924: LD_INT 34
12926: PUSH
12927: LD_INT 40
12929: PUSH
12930: LD_INT 71
12932: PUSH
12933: LD_INT 23
12935: PUSH
12936: LD_INT 44
12938: PUSH
12939: LD_INT 48
12941: PUSH
12942: LD_INT 49
12944: PUSH
12945: LD_INT 50
12947: PUSH
12948: LD_INT 51
12950: PUSH
12951: LD_INT 52
12953: PUSH
12954: LD_INT 53
12956: PUSH
12957: LD_INT 54
12959: PUSH
12960: LD_INT 55
12962: PUSH
12963: LD_INT 56
12965: PUSH
12966: LD_INT 57
12968: PUSH
12969: LD_INT 58
12971: PUSH
12972: LD_INT 59
12974: PUSH
12975: LD_INT 63
12977: PUSH
12978: LD_INT 64
12980: PUSH
12981: LD_INT 65
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: ST_TO_ADDR
13028: GO 13031
13030: POP
// if state > - 1 and state < 3 then
13031: LD_VAR 0 3
13035: PUSH
13036: LD_INT 1
13038: NEG
13039: GREATER
13040: PUSH
13041: LD_VAR 0 3
13045: PUSH
13046: LD_INT 3
13048: LESS
13049: AND
13050: IFFALSE 13107
// for i in result do
13052: LD_ADDR_VAR 0 5
13056: PUSH
13057: LD_VAR 0 4
13061: PUSH
13062: FOR_IN
13063: IFFALSE 13105
// if GetTech ( i , side ) <> state then
13065: LD_VAR 0 5
13069: PPUSH
13070: LD_VAR 0 1
13074: PPUSH
13075: CALL_OW 321
13079: PUSH
13080: LD_VAR 0 3
13084: NONEQUAL
13085: IFFALSE 13103
// result := result diff i ;
13087: LD_ADDR_VAR 0 4
13091: PUSH
13092: LD_VAR 0 4
13096: PUSH
13097: LD_VAR 0 5
13101: DIFF
13102: ST_TO_ADDR
13103: GO 13062
13105: POP
13106: POP
// end ;
13107: LD_VAR 0 4
13111: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
13112: LD_INT 0
13114: PPUSH
13115: PPUSH
13116: PPUSH
// result := true ;
13117: LD_ADDR_VAR 0 3
13121: PUSH
13122: LD_INT 1
13124: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
13125: LD_ADDR_VAR 0 5
13129: PUSH
13130: LD_VAR 0 2
13134: PPUSH
13135: CALL_OW 480
13139: ST_TO_ADDR
// if not tmp then
13140: LD_VAR 0 5
13144: NOT
13145: IFFALSE 13149
// exit ;
13147: GO 13198
// for i in tmp do
13149: LD_ADDR_VAR 0 4
13153: PUSH
13154: LD_VAR 0 5
13158: PUSH
13159: FOR_IN
13160: IFFALSE 13196
// if GetTech ( i , side ) <> state_researched then
13162: LD_VAR 0 4
13166: PPUSH
13167: LD_VAR 0 1
13171: PPUSH
13172: CALL_OW 321
13176: PUSH
13177: LD_INT 2
13179: NONEQUAL
13180: IFFALSE 13194
// begin result := false ;
13182: LD_ADDR_VAR 0 3
13186: PUSH
13187: LD_INT 0
13189: ST_TO_ADDR
// exit ;
13190: POP
13191: POP
13192: GO 13198
// end ;
13194: GO 13159
13196: POP
13197: POP
// end ;
13198: LD_VAR 0 3
13202: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
13203: LD_INT 0
13205: PPUSH
13206: PPUSH
13207: PPUSH
13208: PPUSH
13209: PPUSH
13210: PPUSH
13211: PPUSH
13212: PPUSH
13213: PPUSH
13214: PPUSH
13215: PPUSH
13216: PPUSH
13217: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
13218: LD_VAR 0 1
13222: NOT
13223: PUSH
13224: LD_VAR 0 1
13228: PPUSH
13229: CALL_OW 257
13233: PUSH
13234: LD_INT 9
13236: NONEQUAL
13237: OR
13238: IFFALSE 13242
// exit ;
13240: GO 13815
// side := GetSide ( unit ) ;
13242: LD_ADDR_VAR 0 9
13246: PUSH
13247: LD_VAR 0 1
13251: PPUSH
13252: CALL_OW 255
13256: ST_TO_ADDR
// tech_space := tech_spacanom ;
13257: LD_ADDR_VAR 0 12
13261: PUSH
13262: LD_INT 29
13264: ST_TO_ADDR
// tech_time := tech_taurad ;
13265: LD_ADDR_VAR 0 13
13269: PUSH
13270: LD_INT 28
13272: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
13273: LD_ADDR_VAR 0 11
13277: PUSH
13278: LD_VAR 0 1
13282: PPUSH
13283: CALL_OW 310
13287: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
13288: LD_VAR 0 11
13292: PPUSH
13293: CALL_OW 247
13297: PUSH
13298: LD_INT 2
13300: EQUAL
13301: IFFALSE 13305
// exit ;
13303: GO 13815
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13305: LD_ADDR_VAR 0 8
13309: PUSH
13310: LD_INT 81
13312: PUSH
13313: LD_VAR 0 9
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 3
13324: PUSH
13325: LD_INT 21
13327: PUSH
13328: LD_INT 3
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PPUSH
13343: CALL_OW 69
13347: ST_TO_ADDR
// if not tmp then
13348: LD_VAR 0 8
13352: NOT
13353: IFFALSE 13357
// exit ;
13355: GO 13815
// if in_unit then
13357: LD_VAR 0 11
13361: IFFALSE 13385
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
13363: LD_ADDR_VAR 0 10
13367: PUSH
13368: LD_VAR 0 8
13372: PPUSH
13373: LD_VAR 0 11
13377: PPUSH
13378: CALL_OW 74
13382: ST_TO_ADDR
13383: GO 13405
// enemy := NearestUnitToUnit ( tmp , unit ) ;
13385: LD_ADDR_VAR 0 10
13389: PUSH
13390: LD_VAR 0 8
13394: PPUSH
13395: LD_VAR 0 1
13399: PPUSH
13400: CALL_OW 74
13404: ST_TO_ADDR
// if not enemy then
13405: LD_VAR 0 10
13409: NOT
13410: IFFALSE 13414
// exit ;
13412: GO 13815
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
13414: LD_VAR 0 11
13418: PUSH
13419: LD_VAR 0 11
13423: PPUSH
13424: LD_VAR 0 10
13428: PPUSH
13429: CALL_OW 296
13433: PUSH
13434: LD_INT 13
13436: GREATER
13437: AND
13438: PUSH
13439: LD_VAR 0 1
13443: PPUSH
13444: LD_VAR 0 10
13448: PPUSH
13449: CALL_OW 296
13453: PUSH
13454: LD_INT 12
13456: GREATER
13457: OR
13458: IFFALSE 13462
// exit ;
13460: GO 13815
// missile := [ 1 ] ;
13462: LD_ADDR_VAR 0 14
13466: PUSH
13467: LD_INT 1
13469: PUSH
13470: EMPTY
13471: LIST
13472: ST_TO_ADDR
// if Researched ( side , tech_space ) then
13473: LD_VAR 0 9
13477: PPUSH
13478: LD_VAR 0 12
13482: PPUSH
13483: CALL_OW 325
13487: IFFALSE 13516
// missile := Insert ( missile , missile + 1 , 2 ) ;
13489: LD_ADDR_VAR 0 14
13493: PUSH
13494: LD_VAR 0 14
13498: PPUSH
13499: LD_VAR 0 14
13503: PUSH
13504: LD_INT 1
13506: PLUS
13507: PPUSH
13508: LD_INT 2
13510: PPUSH
13511: CALL_OW 2
13515: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
13516: LD_VAR 0 9
13520: PPUSH
13521: LD_VAR 0 13
13525: PPUSH
13526: CALL_OW 325
13530: PUSH
13531: LD_VAR 0 10
13535: PPUSH
13536: CALL_OW 255
13540: PPUSH
13541: LD_VAR 0 13
13545: PPUSH
13546: CALL_OW 325
13550: NOT
13551: AND
13552: IFFALSE 13581
// missile := Insert ( missile , missile + 1 , 3 ) ;
13554: LD_ADDR_VAR 0 14
13558: PUSH
13559: LD_VAR 0 14
13563: PPUSH
13564: LD_VAR 0 14
13568: PUSH
13569: LD_INT 1
13571: PLUS
13572: PPUSH
13573: LD_INT 3
13575: PPUSH
13576: CALL_OW 2
13580: ST_TO_ADDR
// if missile < 2 then
13581: LD_VAR 0 14
13585: PUSH
13586: LD_INT 2
13588: LESS
13589: IFFALSE 13593
// exit ;
13591: GO 13815
// x := GetX ( enemy ) ;
13593: LD_ADDR_VAR 0 4
13597: PUSH
13598: LD_VAR 0 10
13602: PPUSH
13603: CALL_OW 250
13607: ST_TO_ADDR
// y := GetY ( enemy ) ;
13608: LD_ADDR_VAR 0 5
13612: PUSH
13613: LD_VAR 0 10
13617: PPUSH
13618: CALL_OW 251
13622: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
13623: LD_ADDR_VAR 0 6
13627: PUSH
13628: LD_VAR 0 4
13632: PUSH
13633: LD_INT 1
13635: NEG
13636: PPUSH
13637: LD_INT 1
13639: PPUSH
13640: CALL_OW 12
13644: PLUS
13645: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
13646: LD_ADDR_VAR 0 7
13650: PUSH
13651: LD_VAR 0 5
13655: PUSH
13656: LD_INT 1
13658: NEG
13659: PPUSH
13660: LD_INT 1
13662: PPUSH
13663: CALL_OW 12
13667: PLUS
13668: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13669: LD_VAR 0 6
13673: PPUSH
13674: LD_VAR 0 7
13678: PPUSH
13679: CALL_OW 488
13683: NOT
13684: IFFALSE 13706
// begin _x := x ;
13686: LD_ADDR_VAR 0 6
13690: PUSH
13691: LD_VAR 0 4
13695: ST_TO_ADDR
// _y := y ;
13696: LD_ADDR_VAR 0 7
13700: PUSH
13701: LD_VAR 0 5
13705: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
13706: LD_ADDR_VAR 0 3
13710: PUSH
13711: LD_INT 1
13713: PPUSH
13714: LD_VAR 0 14
13718: PPUSH
13719: CALL_OW 12
13723: ST_TO_ADDR
// case i of 1 :
13724: LD_VAR 0 3
13728: PUSH
13729: LD_INT 1
13731: DOUBLE
13732: EQUAL
13733: IFTRUE 13737
13735: GO 13754
13737: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
13738: LD_VAR 0 1
13742: PPUSH
13743: LD_VAR 0 10
13747: PPUSH
13748: CALL_OW 115
13752: GO 13815
13754: LD_INT 2
13756: DOUBLE
13757: EQUAL
13758: IFTRUE 13762
13760: GO 13784
13762: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
13763: LD_VAR 0 1
13767: PPUSH
13768: LD_VAR 0 6
13772: PPUSH
13773: LD_VAR 0 7
13777: PPUSH
13778: CALL_OW 153
13782: GO 13815
13784: LD_INT 3
13786: DOUBLE
13787: EQUAL
13788: IFTRUE 13792
13790: GO 13814
13792: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
13793: LD_VAR 0 1
13797: PPUSH
13798: LD_VAR 0 6
13802: PPUSH
13803: LD_VAR 0 7
13807: PPUSH
13808: CALL_OW 154
13812: GO 13815
13814: POP
// end ;
13815: LD_VAR 0 2
13819: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
13820: LD_INT 0
13822: PPUSH
13823: PPUSH
13824: PPUSH
13825: PPUSH
13826: PPUSH
13827: PPUSH
// if not unit or not building then
13828: LD_VAR 0 1
13832: NOT
13833: PUSH
13834: LD_VAR 0 2
13838: NOT
13839: OR
13840: IFFALSE 13844
// exit ;
13842: GO 13999
// x := GetX ( building ) ;
13844: LD_ADDR_VAR 0 5
13848: PUSH
13849: LD_VAR 0 2
13853: PPUSH
13854: CALL_OW 250
13858: ST_TO_ADDR
// y := GetY ( building ) ;
13859: LD_ADDR_VAR 0 6
13863: PUSH
13864: LD_VAR 0 2
13868: PPUSH
13869: CALL_OW 251
13873: ST_TO_ADDR
// for i = 0 to 5 do
13874: LD_ADDR_VAR 0 4
13878: PUSH
13879: DOUBLE
13880: LD_INT 0
13882: DEC
13883: ST_TO_ADDR
13884: LD_INT 5
13886: PUSH
13887: FOR_TO
13888: IFFALSE 13997
// begin _x := ShiftX ( x , i , 3 ) ;
13890: LD_ADDR_VAR 0 7
13894: PUSH
13895: LD_VAR 0 5
13899: PPUSH
13900: LD_VAR 0 4
13904: PPUSH
13905: LD_INT 3
13907: PPUSH
13908: CALL_OW 272
13912: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13913: LD_ADDR_VAR 0 8
13917: PUSH
13918: LD_VAR 0 6
13922: PPUSH
13923: LD_VAR 0 4
13927: PPUSH
13928: LD_INT 3
13930: PPUSH
13931: CALL_OW 273
13935: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
13936: LD_VAR 0 7
13940: PPUSH
13941: LD_VAR 0 8
13945: PPUSH
13946: CALL_OW 428
13950: PUSH
13951: LD_INT 0
13953: EQUAL
13954: PUSH
13955: LD_VAR 0 7
13959: PPUSH
13960: LD_VAR 0 8
13964: PPUSH
13965: CALL_OW 488
13969: AND
13970: IFFALSE 13995
// begin ComMoveXY ( unit , _x , _y ) ;
13972: LD_VAR 0 1
13976: PPUSH
13977: LD_VAR 0 7
13981: PPUSH
13982: LD_VAR 0 8
13986: PPUSH
13987: CALL_OW 111
// exit ;
13991: POP
13992: POP
13993: GO 13999
// end ; end ;
13995: GO 13887
13997: POP
13998: POP
// end ;
13999: LD_VAR 0 3
14003: RET
// export function ScanBase ( side , base_area ) ; begin
14004: LD_INT 0
14006: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
14007: LD_ADDR_VAR 0 3
14011: PUSH
14012: LD_VAR 0 2
14016: PPUSH
14017: LD_INT 81
14019: PUSH
14020: LD_VAR 0 1
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PPUSH
14029: CALL_OW 70
14033: ST_TO_ADDR
// end ;
14034: LD_VAR 0 3
14038: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
14039: LD_INT 0
14041: PPUSH
14042: PPUSH
14043: PPUSH
14044: PPUSH
14045: PPUSH
14046: PPUSH
14047: PPUSH
14048: PPUSH
14049: PPUSH
14050: PPUSH
14051: PPUSH
14052: PPUSH
14053: PPUSH
14054: PPUSH
14055: PPUSH
14056: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
14057: LD_ADDR_VAR 0 12
14061: PUSH
14062: LD_EXP 57
14066: PUSH
14067: LD_VAR 0 1
14071: ARRAY
14072: PPUSH
14073: LD_INT 25
14075: PUSH
14076: LD_INT 3
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PPUSH
14083: CALL_OW 72
14087: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
14088: LD_ADDR_VAR 0 8
14092: PUSH
14093: LD_EXP 57
14097: PUSH
14098: LD_VAR 0 1
14102: ARRAY
14103: PPUSH
14104: LD_INT 2
14106: PUSH
14107: LD_INT 25
14109: PUSH
14110: LD_INT 1
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: LD_INT 25
14119: PUSH
14120: LD_INT 5
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 25
14129: PUSH
14130: LD_INT 8
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 25
14139: PUSH
14140: LD_INT 9
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: PPUSH
14154: CALL_OW 72
14158: ST_TO_ADDR
// if not defenders and not solds then
14159: LD_VAR 0 2
14163: NOT
14164: PUSH
14165: LD_VAR 0 8
14169: NOT
14170: AND
14171: IFFALSE 14175
// exit ;
14173: GO 15541
// depot_under_attack := false ;
14175: LD_ADDR_VAR 0 16
14179: PUSH
14180: LD_INT 0
14182: ST_TO_ADDR
// sold_defenders := [ ] ;
14183: LD_ADDR_VAR 0 17
14187: PUSH
14188: EMPTY
14189: ST_TO_ADDR
// if mechs then
14190: LD_VAR 0 12
14194: IFFALSE 14323
// for i in defenders do
14196: LD_ADDR_VAR 0 5
14200: PUSH
14201: LD_VAR 0 2
14205: PUSH
14206: FOR_IN
14207: IFFALSE 14321
// begin SetTag ( i , 20 ) ;
14209: LD_VAR 0 5
14213: PPUSH
14214: LD_INT 20
14216: PPUSH
14217: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
14221: LD_VAR 0 5
14225: PPUSH
14226: CALL_OW 263
14230: PUSH
14231: LD_INT 1
14233: EQUAL
14234: PUSH
14235: LD_VAR 0 5
14239: PPUSH
14240: CALL_OW 311
14244: NOT
14245: AND
14246: PUSH
14247: LD_VAR 0 12
14251: AND
14252: IFFALSE 14319
// begin un := mechs [ 1 ] ;
14254: LD_ADDR_VAR 0 10
14258: PUSH
14259: LD_VAR 0 12
14263: PUSH
14264: LD_INT 1
14266: ARRAY
14267: ST_TO_ADDR
// ComExitBuilding ( un ) ;
14268: LD_VAR 0 10
14272: PPUSH
14273: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
14277: LD_VAR 0 10
14281: PPUSH
14282: LD_VAR 0 5
14286: PPUSH
14287: CALL_OW 180
// SetTag ( un , 19 ) ;
14291: LD_VAR 0 10
14295: PPUSH
14296: LD_INT 19
14298: PPUSH
14299: CALL_OW 109
// mechs := mechs diff un ;
14303: LD_ADDR_VAR 0 12
14307: PUSH
14308: LD_VAR 0 12
14312: PUSH
14313: LD_VAR 0 10
14317: DIFF
14318: ST_TO_ADDR
// end ; end ;
14319: GO 14206
14321: POP
14322: POP
// if solds then
14323: LD_VAR 0 8
14327: IFFALSE 14386
// for i in solds do
14329: LD_ADDR_VAR 0 5
14333: PUSH
14334: LD_VAR 0 8
14338: PUSH
14339: FOR_IN
14340: IFFALSE 14384
// if not GetTag ( i ) then
14342: LD_VAR 0 5
14346: PPUSH
14347: CALL_OW 110
14351: NOT
14352: IFFALSE 14382
// begin defenders := defenders union i ;
14354: LD_ADDR_VAR 0 2
14358: PUSH
14359: LD_VAR 0 2
14363: PUSH
14364: LD_VAR 0 5
14368: UNION
14369: ST_TO_ADDR
// SetTag ( i , 18 ) ;
14370: LD_VAR 0 5
14374: PPUSH
14375: LD_INT 18
14377: PPUSH
14378: CALL_OW 109
// end ;
14382: GO 14339
14384: POP
14385: POP
// repeat wait ( 0 0$1 ) ;
14386: LD_INT 35
14388: PPUSH
14389: CALL_OW 67
// enemy := mc_scan [ base ] ;
14393: LD_ADDR_VAR 0 3
14397: PUSH
14398: LD_EXP 80
14402: PUSH
14403: LD_VAR 0 1
14407: ARRAY
14408: ST_TO_ADDR
// for i in defenders do
14409: LD_ADDR_VAR 0 5
14413: PUSH
14414: LD_VAR 0 2
14418: PUSH
14419: FOR_IN
14420: IFFALSE 15105
// begin e := NearestUnitToUnit ( enemy , i ) ;
14422: LD_ADDR_VAR 0 13
14426: PUSH
14427: LD_VAR 0 3
14431: PPUSH
14432: LD_VAR 0 5
14436: PPUSH
14437: CALL_OW 74
14441: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
14442: LD_ADDR_VAR 0 16
14446: PUSH
14447: LD_EXP 57
14451: PUSH
14452: LD_VAR 0 1
14456: ARRAY
14457: PPUSH
14458: LD_INT 2
14460: PUSH
14461: LD_INT 30
14463: PUSH
14464: LD_INT 0
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: LD_INT 30
14473: PUSH
14474: LD_INT 1
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: LIST
14485: PPUSH
14486: CALL_OW 72
14490: NOT
14491: PUSH
14492: LD_EXP 57
14496: PUSH
14497: LD_VAR 0 1
14501: ARRAY
14502: PPUSH
14503: LD_INT 2
14505: PUSH
14506: LD_INT 30
14508: PUSH
14509: LD_INT 0
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: LD_INT 30
14518: PUSH
14519: LD_INT 1
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: LIST
14530: PPUSH
14531: CALL_OW 72
14535: PPUSH
14536: CALL_OW 256
14540: PUSH
14541: LD_INT 600
14543: LESS
14544: OR
14545: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
14546: LD_VAR 0 5
14550: PPUSH
14551: CALL_OW 247
14555: PUSH
14556: LD_INT 2
14558: DOUBLE
14559: EQUAL
14560: IFTRUE 14564
14562: GO 14811
14564: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
14565: LD_VAR 0 5
14569: PPUSH
14570: CALL_OW 256
14574: PUSH
14575: LD_INT 650
14577: GREATER
14578: PUSH
14579: LD_VAR 0 5
14583: PPUSH
14584: LD_VAR 0 13
14588: PPUSH
14589: CALL_OW 296
14593: PUSH
14594: LD_INT 40
14596: LESS
14597: AND
14598: IFFALSE 14616
// ComAttackUnit ( i , e ) else
14600: LD_VAR 0 5
14604: PPUSH
14605: LD_VAR 0 13
14609: PPUSH
14610: CALL_OW 115
14614: GO 14694
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
14616: LD_VAR 0 5
14620: PPUSH
14621: LD_VAR 0 13
14625: PPUSH
14626: CALL_OW 296
14630: PUSH
14631: LD_INT 30
14633: GREATEREQUAL
14634: PUSH
14635: LD_VAR 0 5
14639: PPUSH
14640: CALL_OW 256
14644: PUSH
14645: LD_INT 650
14647: LESSEQUAL
14648: OR
14649: PUSH
14650: LD_VAR 0 5
14654: PPUSH
14655: LD_EXP 81
14659: PUSH
14660: LD_VAR 0 1
14664: ARRAY
14665: PPUSH
14666: CALL_OW 308
14670: NOT
14671: AND
14672: IFFALSE 14694
// ComMoveToArea ( i , mc_parking [ base ] ) ;
14674: LD_VAR 0 5
14678: PPUSH
14679: LD_EXP 81
14683: PUSH
14684: LD_VAR 0 1
14688: ARRAY
14689: PPUSH
14690: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
14694: LD_VAR 0 5
14698: PPUSH
14699: CALL_OW 256
14703: PUSH
14704: LD_INT 998
14706: LESS
14707: PUSH
14708: LD_VAR 0 5
14712: PPUSH
14713: CALL_OW 263
14717: PUSH
14718: LD_INT 1
14720: EQUAL
14721: AND
14722: PUSH
14723: LD_VAR 0 5
14727: PPUSH
14728: CALL_OW 311
14732: AND
14733: PUSH
14734: LD_VAR 0 5
14738: PPUSH
14739: LD_EXP 81
14743: PUSH
14744: LD_VAR 0 1
14748: ARRAY
14749: PPUSH
14750: CALL_OW 308
14754: AND
14755: IFFALSE 14809
// begin mech := IsDrivenBy ( i ) ;
14757: LD_ADDR_VAR 0 9
14761: PUSH
14762: LD_VAR 0 5
14766: PPUSH
14767: CALL_OW 311
14771: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14772: LD_VAR 0 9
14776: PPUSH
14777: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14781: LD_VAR 0 9
14785: PPUSH
14786: LD_VAR 0 5
14790: PPUSH
14791: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
14795: LD_VAR 0 9
14799: PPUSH
14800: LD_VAR 0 5
14804: PPUSH
14805: CALL_OW 180
// end ; end ; unit_human :
14809: GO 15076
14811: LD_INT 1
14813: DOUBLE
14814: EQUAL
14815: IFTRUE 14819
14817: GO 15075
14819: POP
// begin b := IsInUnit ( i ) ;
14820: LD_ADDR_VAR 0 18
14824: PUSH
14825: LD_VAR 0 5
14829: PPUSH
14830: CALL_OW 310
14834: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
14835: LD_ADDR_VAR 0 19
14839: PUSH
14840: LD_VAR 0 18
14844: NOT
14845: PUSH
14846: LD_VAR 0 18
14850: PPUSH
14851: CALL_OW 266
14855: PUSH
14856: LD_INT 32
14858: PUSH
14859: LD_INT 31
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: IN
14866: OR
14867: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
14868: LD_VAR 0 16
14872: PUSH
14873: LD_VAR 0 2
14877: PPUSH
14878: LD_INT 21
14880: PUSH
14881: LD_INT 2
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PPUSH
14888: CALL_OW 72
14892: PUSH
14893: LD_INT 1
14895: LESSEQUAL
14896: OR
14897: PUSH
14898: LD_VAR 0 19
14902: AND
14903: PUSH
14904: LD_VAR 0 5
14908: PUSH
14909: LD_VAR 0 17
14913: IN
14914: NOT
14915: AND
14916: IFFALSE 15009
// begin if b then
14918: LD_VAR 0 18
14922: IFFALSE 14971
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
14924: LD_VAR 0 18
14928: PPUSH
14929: LD_VAR 0 3
14933: PPUSH
14934: LD_VAR 0 18
14938: PPUSH
14939: CALL_OW 74
14943: PPUSH
14944: CALL_OW 296
14948: PUSH
14949: LD_INT 10
14951: LESS
14952: PUSH
14953: LD_VAR 0 18
14957: PPUSH
14958: CALL_OW 461
14962: PUSH
14963: LD_INT 7
14965: NONEQUAL
14966: AND
14967: IFFALSE 14971
// continue ;
14969: GO 14419
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
14971: LD_ADDR_VAR 0 17
14975: PUSH
14976: LD_VAR 0 17
14980: PPUSH
14981: LD_VAR 0 17
14985: PUSH
14986: LD_INT 1
14988: PLUS
14989: PPUSH
14990: LD_VAR 0 5
14994: PPUSH
14995: CALL_OW 1
14999: ST_TO_ADDR
// ComExitBuilding ( i ) ;
15000: LD_VAR 0 5
15004: PPUSH
15005: CALL_OW 122
// end ; if sold_defenders then
15009: LD_VAR 0 17
15013: IFFALSE 15073
// if i in sold_defenders then
15015: LD_VAR 0 5
15019: PUSH
15020: LD_VAR 0 17
15024: IN
15025: IFFALSE 15073
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
15027: LD_VAR 0 5
15031: PPUSH
15032: CALL_OW 314
15036: NOT
15037: PUSH
15038: LD_VAR 0 5
15042: PPUSH
15043: LD_VAR 0 13
15047: PPUSH
15048: CALL_OW 296
15052: PUSH
15053: LD_INT 30
15055: LESS
15056: AND
15057: IFFALSE 15073
// ComAttackUnit ( i , e ) ;
15059: LD_VAR 0 5
15063: PPUSH
15064: LD_VAR 0 13
15068: PPUSH
15069: CALL_OW 115
// end ; end ; end ;
15073: GO 15076
15075: POP
// if IsDead ( i ) then
15076: LD_VAR 0 5
15080: PPUSH
15081: CALL_OW 301
15085: IFFALSE 15103
// defenders := defenders diff i ;
15087: LD_ADDR_VAR 0 2
15091: PUSH
15092: LD_VAR 0 2
15096: PUSH
15097: LD_VAR 0 5
15101: DIFF
15102: ST_TO_ADDR
// end ;
15103: GO 14419
15105: POP
15106: POP
// until not enemy or not defenders ;
15107: LD_VAR 0 3
15111: NOT
15112: PUSH
15113: LD_VAR 0 2
15117: NOT
15118: OR
15119: IFFALSE 14386
// MC_Reset ( base , 18 ) ;
15121: LD_VAR 0 1
15125: PPUSH
15126: LD_INT 18
15128: PPUSH
15129: CALL 51483 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
15133: LD_ADDR_VAR 0 2
15137: PUSH
15138: LD_VAR 0 2
15142: PUSH
15143: LD_VAR 0 2
15147: PPUSH
15148: LD_INT 2
15150: PUSH
15151: LD_INT 25
15153: PUSH
15154: LD_INT 1
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 25
15163: PUSH
15164: LD_INT 5
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: LD_INT 25
15173: PUSH
15174: LD_INT 8
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 25
15183: PUSH
15184: LD_INT 9
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: PPUSH
15198: CALL_OW 72
15202: DIFF
15203: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
15204: LD_VAR 0 3
15208: NOT
15209: PUSH
15210: LD_VAR 0 2
15214: PPUSH
15215: LD_INT 21
15217: PUSH
15218: LD_INT 2
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PPUSH
15225: CALL_OW 72
15229: AND
15230: IFFALSE 15492
// begin tmp := FilterByTag ( defenders , 19 ) ;
15232: LD_ADDR_VAR 0 11
15236: PUSH
15237: LD_VAR 0 2
15241: PPUSH
15242: LD_INT 19
15244: PPUSH
15245: CALL 49775 0 2
15249: ST_TO_ADDR
// if tmp then
15250: LD_VAR 0 11
15254: IFFALSE 15324
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
15256: LD_ADDR_VAR 0 11
15260: PUSH
15261: LD_VAR 0 11
15265: PPUSH
15266: LD_INT 25
15268: PUSH
15269: LD_INT 3
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PPUSH
15276: CALL_OW 72
15280: ST_TO_ADDR
// if tmp then
15281: LD_VAR 0 11
15285: IFFALSE 15324
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
15287: LD_ADDR_EXP 69
15291: PUSH
15292: LD_EXP 69
15296: PPUSH
15297: LD_VAR 0 1
15301: PPUSH
15302: LD_EXP 69
15306: PUSH
15307: LD_VAR 0 1
15311: ARRAY
15312: PUSH
15313: LD_VAR 0 11
15317: UNION
15318: PPUSH
15319: CALL_OW 1
15323: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
15324: LD_VAR 0 1
15328: PPUSH
15329: LD_INT 19
15331: PPUSH
15332: CALL 51483 0 2
// repeat wait ( 0 0$1 ) ;
15336: LD_INT 35
15338: PPUSH
15339: CALL_OW 67
// for i in defenders do
15343: LD_ADDR_VAR 0 5
15347: PUSH
15348: LD_VAR 0 2
15352: PUSH
15353: FOR_IN
15354: IFFALSE 15443
// begin if not IsInArea ( i , mc_parking [ base ] ) then
15356: LD_VAR 0 5
15360: PPUSH
15361: LD_EXP 81
15365: PUSH
15366: LD_VAR 0 1
15370: ARRAY
15371: PPUSH
15372: CALL_OW 308
15376: NOT
15377: IFFALSE 15401
// ComMoveToArea ( i , mc_parking [ base ] ) else
15379: LD_VAR 0 5
15383: PPUSH
15384: LD_EXP 81
15388: PUSH
15389: LD_VAR 0 1
15393: ARRAY
15394: PPUSH
15395: CALL_OW 113
15399: GO 15441
// if GetControl ( i ) = control_manual then
15401: LD_VAR 0 5
15405: PPUSH
15406: CALL_OW 263
15410: PUSH
15411: LD_INT 1
15413: EQUAL
15414: IFFALSE 15441
// if IsDrivenBy ( i ) then
15416: LD_VAR 0 5
15420: PPUSH
15421: CALL_OW 311
15425: IFFALSE 15441
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
15427: LD_VAR 0 5
15431: PPUSH
15432: CALL_OW 311
15436: PPUSH
15437: CALL_OW 121
// end ;
15441: GO 15353
15443: POP
15444: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
15445: LD_VAR 0 2
15449: PPUSH
15450: LD_INT 95
15452: PUSH
15453: LD_EXP 81
15457: PUSH
15458: LD_VAR 0 1
15462: ARRAY
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PPUSH
15468: CALL_OW 72
15472: PUSH
15473: LD_VAR 0 2
15477: EQUAL
15478: PUSH
15479: LD_EXP 80
15483: PUSH
15484: LD_VAR 0 1
15488: ARRAY
15489: OR
15490: IFFALSE 15336
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
15492: LD_ADDR_EXP 79
15496: PUSH
15497: LD_EXP 79
15501: PPUSH
15502: LD_VAR 0 1
15506: PPUSH
15507: LD_EXP 79
15511: PUSH
15512: LD_VAR 0 1
15516: ARRAY
15517: PUSH
15518: LD_VAR 0 2
15522: UNION
15523: PPUSH
15524: CALL_OW 1
15528: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
15529: LD_VAR 0 1
15533: PPUSH
15534: LD_INT 20
15536: PPUSH
15537: CALL 51483 0 2
// end ;
15541: LD_VAR 0 4
15545: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15546: LD_INT 0
15548: PPUSH
15549: PPUSH
15550: PPUSH
15551: PPUSH
// result := false ;
15552: LD_ADDR_VAR 0 2
15556: PUSH
15557: LD_INT 0
15559: ST_TO_ADDR
// side := GetSide ( unit ) ;
15560: LD_ADDR_VAR 0 3
15564: PUSH
15565: LD_VAR 0 1
15569: PPUSH
15570: CALL_OW 255
15574: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15575: LD_ADDR_VAR 0 4
15579: PUSH
15580: LD_VAR 0 1
15584: PPUSH
15585: CALL_OW 248
15589: ST_TO_ADDR
// case nat of 1 :
15590: LD_VAR 0 4
15594: PUSH
15595: LD_INT 1
15597: DOUBLE
15598: EQUAL
15599: IFTRUE 15603
15601: GO 15614
15603: POP
// tech := tech_lassight ; 2 :
15604: LD_ADDR_VAR 0 5
15608: PUSH
15609: LD_INT 12
15611: ST_TO_ADDR
15612: GO 15653
15614: LD_INT 2
15616: DOUBLE
15617: EQUAL
15618: IFTRUE 15622
15620: GO 15633
15622: POP
// tech := tech_mortar ; 3 :
15623: LD_ADDR_VAR 0 5
15627: PUSH
15628: LD_INT 41
15630: ST_TO_ADDR
15631: GO 15653
15633: LD_INT 3
15635: DOUBLE
15636: EQUAL
15637: IFTRUE 15641
15639: GO 15652
15641: POP
// tech := tech_bazooka ; end ;
15642: LD_ADDR_VAR 0 5
15646: PUSH
15647: LD_INT 44
15649: ST_TO_ADDR
15650: GO 15653
15652: POP
// if Researched ( side , tech ) then
15653: LD_VAR 0 3
15657: PPUSH
15658: LD_VAR 0 5
15662: PPUSH
15663: CALL_OW 325
15667: IFFALSE 15694
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15669: LD_ADDR_VAR 0 2
15673: PUSH
15674: LD_INT 5
15676: PUSH
15677: LD_INT 8
15679: PUSH
15680: LD_INT 9
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: LIST
15687: PUSH
15688: LD_VAR 0 4
15692: ARRAY
15693: ST_TO_ADDR
// end ;
15694: LD_VAR 0 2
15698: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15699: LD_INT 0
15701: PPUSH
15702: PPUSH
15703: PPUSH
// if not mines then
15704: LD_VAR 0 2
15708: NOT
15709: IFFALSE 15713
// exit ;
15711: GO 15857
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15713: LD_ADDR_VAR 0 5
15717: PUSH
15718: LD_INT 81
15720: PUSH
15721: LD_VAR 0 1
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 3
15732: PUSH
15733: LD_INT 21
15735: PUSH
15736: LD_INT 3
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PPUSH
15751: CALL_OW 69
15755: ST_TO_ADDR
// for i in mines do
15756: LD_ADDR_VAR 0 4
15760: PUSH
15761: LD_VAR 0 2
15765: PUSH
15766: FOR_IN
15767: IFFALSE 15855
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15769: LD_VAR 0 4
15773: PUSH
15774: LD_INT 1
15776: ARRAY
15777: PPUSH
15778: LD_VAR 0 4
15782: PUSH
15783: LD_INT 2
15785: ARRAY
15786: PPUSH
15787: CALL_OW 458
15791: NOT
15792: IFFALSE 15796
// continue ;
15794: GO 15766
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15796: LD_VAR 0 4
15800: PUSH
15801: LD_INT 1
15803: ARRAY
15804: PPUSH
15805: LD_VAR 0 4
15809: PUSH
15810: LD_INT 2
15812: ARRAY
15813: PPUSH
15814: CALL_OW 428
15818: PUSH
15819: LD_VAR 0 5
15823: IN
15824: IFFALSE 15853
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15826: LD_VAR 0 4
15830: PUSH
15831: LD_INT 1
15833: ARRAY
15834: PPUSH
15835: LD_VAR 0 4
15839: PUSH
15840: LD_INT 2
15842: ARRAY
15843: PPUSH
15844: LD_VAR 0 1
15848: PPUSH
15849: CALL_OW 456
// end ;
15853: GO 15766
15855: POP
15856: POP
// end ;
15857: LD_VAR 0 3
15861: RET
// export function Count ( array ) ; var i ; begin
15862: LD_INT 0
15864: PPUSH
15865: PPUSH
// result := 0 ;
15866: LD_ADDR_VAR 0 2
15870: PUSH
15871: LD_INT 0
15873: ST_TO_ADDR
// for i in array do
15874: LD_ADDR_VAR 0 3
15878: PUSH
15879: LD_VAR 0 1
15883: PUSH
15884: FOR_IN
15885: IFFALSE 15909
// if i then
15887: LD_VAR 0 3
15891: IFFALSE 15907
// result := result + 1 ;
15893: LD_ADDR_VAR 0 2
15897: PUSH
15898: LD_VAR 0 2
15902: PUSH
15903: LD_INT 1
15905: PLUS
15906: ST_TO_ADDR
15907: GO 15884
15909: POP
15910: POP
// end ;
15911: LD_VAR 0 2
15915: RET
// export function IsEmpty ( building ) ; begin
15916: LD_INT 0
15918: PPUSH
// if not building then
15919: LD_VAR 0 1
15923: NOT
15924: IFFALSE 15928
// exit ;
15926: GO 15971
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15928: LD_ADDR_VAR 0 2
15932: PUSH
15933: LD_VAR 0 1
15937: PUSH
15938: LD_INT 22
15940: PUSH
15941: LD_VAR 0 1
15945: PPUSH
15946: CALL_OW 255
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 58
15957: PUSH
15958: EMPTY
15959: LIST
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PPUSH
15965: CALL_OW 69
15969: IN
15970: ST_TO_ADDR
// end ;
15971: LD_VAR 0 2
15975: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15976: LD_INT 0
15978: PPUSH
15979: PPUSH
15980: PPUSH
15981: PPUSH
// tmp := [ ] ;
15982: LD_ADDR_VAR 0 3
15986: PUSH
15987: EMPTY
15988: ST_TO_ADDR
// list := [ ] ;
15989: LD_ADDR_VAR 0 5
15993: PUSH
15994: EMPTY
15995: ST_TO_ADDR
// for i = 16 to 25 do
15996: LD_ADDR_VAR 0 4
16000: PUSH
16001: DOUBLE
16002: LD_INT 16
16004: DEC
16005: ST_TO_ADDR
16006: LD_INT 25
16008: PUSH
16009: FOR_TO
16010: IFFALSE 16083
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
16012: LD_ADDR_VAR 0 3
16016: PUSH
16017: LD_VAR 0 3
16021: PUSH
16022: LD_INT 22
16024: PUSH
16025: LD_VAR 0 1
16029: PPUSH
16030: CALL_OW 255
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: LD_INT 91
16041: PUSH
16042: LD_VAR 0 1
16046: PUSH
16047: LD_INT 6
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 30
16057: PUSH
16058: LD_VAR 0 4
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: LIST
16071: PUSH
16072: EMPTY
16073: LIST
16074: PPUSH
16075: CALL_OW 69
16079: ADD
16080: ST_TO_ADDR
16081: GO 16009
16083: POP
16084: POP
// for i = 1 to tmp do
16085: LD_ADDR_VAR 0 4
16089: PUSH
16090: DOUBLE
16091: LD_INT 1
16093: DEC
16094: ST_TO_ADDR
16095: LD_VAR 0 3
16099: PUSH
16100: FOR_TO
16101: IFFALSE 16189
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
16103: LD_ADDR_VAR 0 5
16107: PUSH
16108: LD_VAR 0 5
16112: PUSH
16113: LD_VAR 0 3
16117: PUSH
16118: LD_VAR 0 4
16122: ARRAY
16123: PPUSH
16124: CALL_OW 266
16128: PUSH
16129: LD_VAR 0 3
16133: PUSH
16134: LD_VAR 0 4
16138: ARRAY
16139: PPUSH
16140: CALL_OW 250
16144: PUSH
16145: LD_VAR 0 3
16149: PUSH
16150: LD_VAR 0 4
16154: ARRAY
16155: PPUSH
16156: CALL_OW 251
16160: PUSH
16161: LD_VAR 0 3
16165: PUSH
16166: LD_VAR 0 4
16170: ARRAY
16171: PPUSH
16172: CALL_OW 254
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: PUSH
16183: EMPTY
16184: LIST
16185: ADD
16186: ST_TO_ADDR
16187: GO 16100
16189: POP
16190: POP
// result := list ;
16191: LD_ADDR_VAR 0 2
16195: PUSH
16196: LD_VAR 0 5
16200: ST_TO_ADDR
// end ;
16201: LD_VAR 0 2
16205: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
16206: LD_INT 0
16208: PPUSH
16209: PPUSH
16210: PPUSH
16211: PPUSH
16212: PPUSH
16213: PPUSH
16214: PPUSH
// if not factory then
16215: LD_VAR 0 1
16219: NOT
16220: IFFALSE 16224
// exit ;
16222: GO 16749
// if control = control_apeman then
16224: LD_VAR 0 4
16228: PUSH
16229: LD_INT 5
16231: EQUAL
16232: IFFALSE 16341
// begin tmp := UnitsInside ( factory ) ;
16234: LD_ADDR_VAR 0 8
16238: PUSH
16239: LD_VAR 0 1
16243: PPUSH
16244: CALL_OW 313
16248: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
16249: LD_VAR 0 8
16253: PPUSH
16254: LD_INT 25
16256: PUSH
16257: LD_INT 12
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PPUSH
16264: CALL_OW 72
16268: NOT
16269: IFFALSE 16279
// control := control_manual ;
16271: LD_ADDR_VAR 0 4
16275: PUSH
16276: LD_INT 1
16278: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
16279: LD_ADDR_VAR 0 8
16283: PUSH
16284: LD_VAR 0 1
16288: PPUSH
16289: CALL 15976 0 1
16293: ST_TO_ADDR
// if tmp then
16294: LD_VAR 0 8
16298: IFFALSE 16341
// begin for i in tmp do
16300: LD_ADDR_VAR 0 7
16304: PUSH
16305: LD_VAR 0 8
16309: PUSH
16310: FOR_IN
16311: IFFALSE 16339
// if i [ 1 ] = b_ext_radar then
16313: LD_VAR 0 7
16317: PUSH
16318: LD_INT 1
16320: ARRAY
16321: PUSH
16322: LD_INT 20
16324: EQUAL
16325: IFFALSE 16337
// begin control := control_remote ;
16327: LD_ADDR_VAR 0 4
16331: PUSH
16332: LD_INT 2
16334: ST_TO_ADDR
// break ;
16335: GO 16339
// end ;
16337: GO 16310
16339: POP
16340: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16341: LD_VAR 0 1
16345: PPUSH
16346: LD_VAR 0 2
16350: PPUSH
16351: LD_VAR 0 3
16355: PPUSH
16356: LD_VAR 0 4
16360: PPUSH
16361: LD_VAR 0 5
16365: PPUSH
16366: CALL_OW 448
16370: IFFALSE 16405
// begin result := [ chassis , engine , control , weapon ] ;
16372: LD_ADDR_VAR 0 6
16376: PUSH
16377: LD_VAR 0 2
16381: PUSH
16382: LD_VAR 0 3
16386: PUSH
16387: LD_VAR 0 4
16391: PUSH
16392: LD_VAR 0 5
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: ST_TO_ADDR
// exit ;
16403: GO 16749
// end ; _chassis := AvailableChassisList ( factory ) ;
16405: LD_ADDR_VAR 0 9
16409: PUSH
16410: LD_VAR 0 1
16414: PPUSH
16415: CALL_OW 475
16419: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16420: LD_ADDR_VAR 0 11
16424: PUSH
16425: LD_VAR 0 1
16429: PPUSH
16430: CALL_OW 476
16434: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16435: LD_ADDR_VAR 0 12
16439: PUSH
16440: LD_VAR 0 1
16444: PPUSH
16445: CALL_OW 477
16449: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16450: LD_ADDR_VAR 0 10
16454: PUSH
16455: LD_VAR 0 1
16459: PPUSH
16460: CALL_OW 478
16464: ST_TO_ADDR
// if not chassis in _chassis then
16465: LD_VAR 0 2
16469: PUSH
16470: LD_VAR 0 9
16474: IN
16475: NOT
16476: IFFALSE 16502
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16478: LD_ADDR_VAR 0 2
16482: PUSH
16483: LD_VAR 0 9
16487: PUSH
16488: LD_INT 1
16490: PPUSH
16491: LD_VAR 0 9
16495: PPUSH
16496: CALL_OW 12
16500: ARRAY
16501: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16502: LD_VAR 0 2
16506: PPUSH
16507: LD_VAR 0 3
16511: PPUSH
16512: CALL 16754 0 2
16516: NOT
16517: IFFALSE 16576
// repeat engine := _engine [ 1 ] ;
16519: LD_ADDR_VAR 0 3
16523: PUSH
16524: LD_VAR 0 11
16528: PUSH
16529: LD_INT 1
16531: ARRAY
16532: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16533: LD_ADDR_VAR 0 11
16537: PUSH
16538: LD_VAR 0 11
16542: PPUSH
16543: LD_INT 1
16545: PPUSH
16546: CALL_OW 3
16550: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16551: LD_VAR 0 2
16555: PPUSH
16556: LD_VAR 0 3
16560: PPUSH
16561: CALL 16754 0 2
16565: PUSH
16566: LD_VAR 0 11
16570: PUSH
16571: EMPTY
16572: EQUAL
16573: OR
16574: IFFALSE 16519
// if not control in _control then
16576: LD_VAR 0 4
16580: PUSH
16581: LD_VAR 0 12
16585: IN
16586: NOT
16587: IFFALSE 16613
// control := _control [ rand ( 1 , _control ) ] ;
16589: LD_ADDR_VAR 0 4
16593: PUSH
16594: LD_VAR 0 12
16598: PUSH
16599: LD_INT 1
16601: PPUSH
16602: LD_VAR 0 12
16606: PPUSH
16607: CALL_OW 12
16611: ARRAY
16612: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16613: LD_VAR 0 2
16617: PPUSH
16618: LD_VAR 0 5
16622: PPUSH
16623: CALL 16974 0 2
16627: NOT
16628: IFFALSE 16687
// repeat weapon := _weapon [ 1 ] ;
16630: LD_ADDR_VAR 0 5
16634: PUSH
16635: LD_VAR 0 10
16639: PUSH
16640: LD_INT 1
16642: ARRAY
16643: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16644: LD_ADDR_VAR 0 10
16648: PUSH
16649: LD_VAR 0 10
16653: PPUSH
16654: LD_INT 1
16656: PPUSH
16657: CALL_OW 3
16661: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16662: LD_VAR 0 2
16666: PPUSH
16667: LD_VAR 0 5
16671: PPUSH
16672: CALL 16974 0 2
16676: PUSH
16677: LD_VAR 0 10
16681: PUSH
16682: EMPTY
16683: EQUAL
16684: OR
16685: IFFALSE 16630
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16687: LD_VAR 0 1
16691: PPUSH
16692: LD_VAR 0 2
16696: PPUSH
16697: LD_VAR 0 3
16701: PPUSH
16702: LD_VAR 0 4
16706: PPUSH
16707: LD_VAR 0 5
16711: PPUSH
16712: CALL_OW 448
16716: IFFALSE 16749
// result := [ chassis , engine , control , weapon ] ;
16718: LD_ADDR_VAR 0 6
16722: PUSH
16723: LD_VAR 0 2
16727: PUSH
16728: LD_VAR 0 3
16732: PUSH
16733: LD_VAR 0 4
16737: PUSH
16738: LD_VAR 0 5
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: ST_TO_ADDR
// end ;
16749: LD_VAR 0 6
16753: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16754: LD_INT 0
16756: PPUSH
// if not chassis or not engine then
16757: LD_VAR 0 1
16761: NOT
16762: PUSH
16763: LD_VAR 0 2
16767: NOT
16768: OR
16769: IFFALSE 16773
// exit ;
16771: GO 16969
// case engine of engine_solar :
16773: LD_VAR 0 2
16777: PUSH
16778: LD_INT 2
16780: DOUBLE
16781: EQUAL
16782: IFTRUE 16786
16784: GO 16824
16786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16787: LD_ADDR_VAR 0 3
16791: PUSH
16792: LD_INT 11
16794: PUSH
16795: LD_INT 12
16797: PUSH
16798: LD_INT 13
16800: PUSH
16801: LD_INT 14
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: LD_INT 2
16809: PUSH
16810: LD_INT 3
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: ST_TO_ADDR
16822: GO 16953
16824: LD_INT 1
16826: DOUBLE
16827: EQUAL
16828: IFTRUE 16832
16830: GO 16894
16832: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16833: LD_ADDR_VAR 0 3
16837: PUSH
16838: LD_INT 11
16840: PUSH
16841: LD_INT 12
16843: PUSH
16844: LD_INT 13
16846: PUSH
16847: LD_INT 14
16849: PUSH
16850: LD_INT 1
16852: PUSH
16853: LD_INT 2
16855: PUSH
16856: LD_INT 3
16858: PUSH
16859: LD_INT 4
16861: PUSH
16862: LD_INT 5
16864: PUSH
16865: LD_INT 21
16867: PUSH
16868: LD_INT 23
16870: PUSH
16871: LD_INT 22
16873: PUSH
16874: LD_INT 24
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: ST_TO_ADDR
16892: GO 16953
16894: LD_INT 3
16896: DOUBLE
16897: EQUAL
16898: IFTRUE 16902
16900: GO 16952
16902: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16903: LD_ADDR_VAR 0 3
16907: PUSH
16908: LD_INT 13
16910: PUSH
16911: LD_INT 14
16913: PUSH
16914: LD_INT 2
16916: PUSH
16917: LD_INT 3
16919: PUSH
16920: LD_INT 4
16922: PUSH
16923: LD_INT 5
16925: PUSH
16926: LD_INT 21
16928: PUSH
16929: LD_INT 22
16931: PUSH
16932: LD_INT 23
16934: PUSH
16935: LD_INT 24
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: ST_TO_ADDR
16950: GO 16953
16952: POP
// result := ( chassis in result ) ;
16953: LD_ADDR_VAR 0 3
16957: PUSH
16958: LD_VAR 0 1
16962: PUSH
16963: LD_VAR 0 3
16967: IN
16968: ST_TO_ADDR
// end ;
16969: LD_VAR 0 3
16973: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16974: LD_INT 0
16976: PPUSH
// if not chassis or not weapon then
16977: LD_VAR 0 1
16981: NOT
16982: PUSH
16983: LD_VAR 0 2
16987: NOT
16988: OR
16989: IFFALSE 16993
// exit ;
16991: GO 18019
// case weapon of us_machine_gun :
16993: LD_VAR 0 2
16997: PUSH
16998: LD_INT 2
17000: DOUBLE
17001: EQUAL
17002: IFTRUE 17006
17004: GO 17036
17006: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
17007: LD_ADDR_VAR 0 3
17011: PUSH
17012: LD_INT 1
17014: PUSH
17015: LD_INT 2
17017: PUSH
17018: LD_INT 3
17020: PUSH
17021: LD_INT 4
17023: PUSH
17024: LD_INT 5
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: ST_TO_ADDR
17034: GO 18003
17036: LD_INT 3
17038: DOUBLE
17039: EQUAL
17040: IFTRUE 17044
17042: GO 17074
17044: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
17045: LD_ADDR_VAR 0 3
17049: PUSH
17050: LD_INT 1
17052: PUSH
17053: LD_INT 2
17055: PUSH
17056: LD_INT 3
17058: PUSH
17059: LD_INT 4
17061: PUSH
17062: LD_INT 5
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: ST_TO_ADDR
17072: GO 18003
17074: LD_INT 11
17076: DOUBLE
17077: EQUAL
17078: IFTRUE 17082
17080: GO 17112
17082: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
17083: LD_ADDR_VAR 0 3
17087: PUSH
17088: LD_INT 1
17090: PUSH
17091: LD_INT 2
17093: PUSH
17094: LD_INT 3
17096: PUSH
17097: LD_INT 4
17099: PUSH
17100: LD_INT 5
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: ST_TO_ADDR
17110: GO 18003
17112: LD_INT 4
17114: DOUBLE
17115: EQUAL
17116: IFTRUE 17120
17118: GO 17146
17120: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
17121: LD_ADDR_VAR 0 3
17125: PUSH
17126: LD_INT 2
17128: PUSH
17129: LD_INT 3
17131: PUSH
17132: LD_INT 4
17134: PUSH
17135: LD_INT 5
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: ST_TO_ADDR
17144: GO 18003
17146: LD_INT 5
17148: DOUBLE
17149: EQUAL
17150: IFTRUE 17154
17152: GO 17180
17154: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
17155: LD_ADDR_VAR 0 3
17159: PUSH
17160: LD_INT 2
17162: PUSH
17163: LD_INT 3
17165: PUSH
17166: LD_INT 4
17168: PUSH
17169: LD_INT 5
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: ST_TO_ADDR
17178: GO 18003
17180: LD_INT 9
17182: DOUBLE
17183: EQUAL
17184: IFTRUE 17188
17186: GO 17214
17188: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
17189: LD_ADDR_VAR 0 3
17193: PUSH
17194: LD_INT 2
17196: PUSH
17197: LD_INT 3
17199: PUSH
17200: LD_INT 4
17202: PUSH
17203: LD_INT 5
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: ST_TO_ADDR
17212: GO 18003
17214: LD_INT 7
17216: DOUBLE
17217: EQUAL
17218: IFTRUE 17222
17220: GO 17248
17222: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
17223: LD_ADDR_VAR 0 3
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: LD_INT 3
17233: PUSH
17234: LD_INT 4
17236: PUSH
17237: LD_INT 5
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: ST_TO_ADDR
17246: GO 18003
17248: LD_INT 12
17250: DOUBLE
17251: EQUAL
17252: IFTRUE 17256
17254: GO 17282
17256: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17257: LD_ADDR_VAR 0 3
17261: PUSH
17262: LD_INT 2
17264: PUSH
17265: LD_INT 3
17267: PUSH
17268: LD_INT 4
17270: PUSH
17271: LD_INT 5
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: ST_TO_ADDR
17280: GO 18003
17282: LD_INT 13
17284: DOUBLE
17285: EQUAL
17286: IFTRUE 17290
17288: GO 17316
17290: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17291: LD_ADDR_VAR 0 3
17295: PUSH
17296: LD_INT 2
17298: PUSH
17299: LD_INT 3
17301: PUSH
17302: LD_INT 4
17304: PUSH
17305: LD_INT 5
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: ST_TO_ADDR
17314: GO 18003
17316: LD_INT 14
17318: DOUBLE
17319: EQUAL
17320: IFTRUE 17324
17322: GO 17342
17324: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17325: LD_ADDR_VAR 0 3
17329: PUSH
17330: LD_INT 4
17332: PUSH
17333: LD_INT 5
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: ST_TO_ADDR
17340: GO 18003
17342: LD_INT 6
17344: DOUBLE
17345: EQUAL
17346: IFTRUE 17350
17348: GO 17368
17350: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17351: LD_ADDR_VAR 0 3
17355: PUSH
17356: LD_INT 4
17358: PUSH
17359: LD_INT 5
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: ST_TO_ADDR
17366: GO 18003
17368: LD_INT 10
17370: DOUBLE
17371: EQUAL
17372: IFTRUE 17376
17374: GO 17394
17376: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17377: LD_ADDR_VAR 0 3
17381: PUSH
17382: LD_INT 4
17384: PUSH
17385: LD_INT 5
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: ST_TO_ADDR
17392: GO 18003
17394: LD_INT 22
17396: DOUBLE
17397: EQUAL
17398: IFTRUE 17402
17400: GO 17428
17402: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17403: LD_ADDR_VAR 0 3
17407: PUSH
17408: LD_INT 11
17410: PUSH
17411: LD_INT 12
17413: PUSH
17414: LD_INT 13
17416: PUSH
17417: LD_INT 14
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: ST_TO_ADDR
17426: GO 18003
17428: LD_INT 23
17430: DOUBLE
17431: EQUAL
17432: IFTRUE 17436
17434: GO 17462
17436: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17437: LD_ADDR_VAR 0 3
17441: PUSH
17442: LD_INT 11
17444: PUSH
17445: LD_INT 12
17447: PUSH
17448: LD_INT 13
17450: PUSH
17451: LD_INT 14
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: ST_TO_ADDR
17460: GO 18003
17462: LD_INT 24
17464: DOUBLE
17465: EQUAL
17466: IFTRUE 17470
17468: GO 17496
17470: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17471: LD_ADDR_VAR 0 3
17475: PUSH
17476: LD_INT 11
17478: PUSH
17479: LD_INT 12
17481: PUSH
17482: LD_INT 13
17484: PUSH
17485: LD_INT 14
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: ST_TO_ADDR
17494: GO 18003
17496: LD_INT 30
17498: DOUBLE
17499: EQUAL
17500: IFTRUE 17504
17502: GO 17530
17504: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17505: LD_ADDR_VAR 0 3
17509: PUSH
17510: LD_INT 11
17512: PUSH
17513: LD_INT 12
17515: PUSH
17516: LD_INT 13
17518: PUSH
17519: LD_INT 14
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: ST_TO_ADDR
17528: GO 18003
17530: LD_INT 25
17532: DOUBLE
17533: EQUAL
17534: IFTRUE 17538
17536: GO 17556
17538: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17539: LD_ADDR_VAR 0 3
17543: PUSH
17544: LD_INT 13
17546: PUSH
17547: LD_INT 14
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: ST_TO_ADDR
17554: GO 18003
17556: LD_INT 27
17558: DOUBLE
17559: EQUAL
17560: IFTRUE 17564
17562: GO 17582
17564: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17565: LD_ADDR_VAR 0 3
17569: PUSH
17570: LD_INT 13
17572: PUSH
17573: LD_INT 14
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: ST_TO_ADDR
17580: GO 18003
17582: LD_INT 28
17584: DOUBLE
17585: EQUAL
17586: IFTRUE 17590
17588: GO 17608
17590: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17591: LD_ADDR_VAR 0 3
17595: PUSH
17596: LD_INT 13
17598: PUSH
17599: LD_INT 14
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: ST_TO_ADDR
17606: GO 18003
17608: LD_INT 29
17610: DOUBLE
17611: EQUAL
17612: IFTRUE 17616
17614: GO 17634
17616: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17617: LD_ADDR_VAR 0 3
17621: PUSH
17622: LD_INT 13
17624: PUSH
17625: LD_INT 14
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: ST_TO_ADDR
17632: GO 18003
17634: LD_INT 31
17636: DOUBLE
17637: EQUAL
17638: IFTRUE 17642
17640: GO 17660
17642: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17643: LD_ADDR_VAR 0 3
17647: PUSH
17648: LD_INT 13
17650: PUSH
17651: LD_INT 14
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: ST_TO_ADDR
17658: GO 18003
17660: LD_INT 26
17662: DOUBLE
17663: EQUAL
17664: IFTRUE 17668
17666: GO 17686
17668: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17669: LD_ADDR_VAR 0 3
17673: PUSH
17674: LD_INT 13
17676: PUSH
17677: LD_INT 14
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: ST_TO_ADDR
17684: GO 18003
17686: LD_INT 42
17688: DOUBLE
17689: EQUAL
17690: IFTRUE 17694
17692: GO 17720
17694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17695: LD_ADDR_VAR 0 3
17699: PUSH
17700: LD_INT 21
17702: PUSH
17703: LD_INT 22
17705: PUSH
17706: LD_INT 23
17708: PUSH
17709: LD_INT 24
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: ST_TO_ADDR
17718: GO 18003
17720: LD_INT 43
17722: DOUBLE
17723: EQUAL
17724: IFTRUE 17728
17726: GO 17754
17728: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17729: LD_ADDR_VAR 0 3
17733: PUSH
17734: LD_INT 21
17736: PUSH
17737: LD_INT 22
17739: PUSH
17740: LD_INT 23
17742: PUSH
17743: LD_INT 24
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: ST_TO_ADDR
17752: GO 18003
17754: LD_INT 44
17756: DOUBLE
17757: EQUAL
17758: IFTRUE 17762
17760: GO 17788
17762: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17763: LD_ADDR_VAR 0 3
17767: PUSH
17768: LD_INT 21
17770: PUSH
17771: LD_INT 22
17773: PUSH
17774: LD_INT 23
17776: PUSH
17777: LD_INT 24
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: ST_TO_ADDR
17786: GO 18003
17788: LD_INT 45
17790: DOUBLE
17791: EQUAL
17792: IFTRUE 17796
17794: GO 17822
17796: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17797: LD_ADDR_VAR 0 3
17801: PUSH
17802: LD_INT 21
17804: PUSH
17805: LD_INT 22
17807: PUSH
17808: LD_INT 23
17810: PUSH
17811: LD_INT 24
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: ST_TO_ADDR
17820: GO 18003
17822: LD_INT 49
17824: DOUBLE
17825: EQUAL
17826: IFTRUE 17830
17828: GO 17856
17830: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17831: LD_ADDR_VAR 0 3
17835: PUSH
17836: LD_INT 21
17838: PUSH
17839: LD_INT 22
17841: PUSH
17842: LD_INT 23
17844: PUSH
17845: LD_INT 24
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: ST_TO_ADDR
17854: GO 18003
17856: LD_INT 51
17858: DOUBLE
17859: EQUAL
17860: IFTRUE 17864
17862: GO 17890
17864: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17865: LD_ADDR_VAR 0 3
17869: PUSH
17870: LD_INT 21
17872: PUSH
17873: LD_INT 22
17875: PUSH
17876: LD_INT 23
17878: PUSH
17879: LD_INT 24
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: ST_TO_ADDR
17888: GO 18003
17890: LD_INT 52
17892: DOUBLE
17893: EQUAL
17894: IFTRUE 17898
17896: GO 17924
17898: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17899: LD_ADDR_VAR 0 3
17903: PUSH
17904: LD_INT 21
17906: PUSH
17907: LD_INT 22
17909: PUSH
17910: LD_INT 23
17912: PUSH
17913: LD_INT 24
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: ST_TO_ADDR
17922: GO 18003
17924: LD_INT 53
17926: DOUBLE
17927: EQUAL
17928: IFTRUE 17932
17930: GO 17950
17932: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17933: LD_ADDR_VAR 0 3
17937: PUSH
17938: LD_INT 23
17940: PUSH
17941: LD_INT 24
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: ST_TO_ADDR
17948: GO 18003
17950: LD_INT 46
17952: DOUBLE
17953: EQUAL
17954: IFTRUE 17958
17956: GO 17976
17958: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17959: LD_ADDR_VAR 0 3
17963: PUSH
17964: LD_INT 23
17966: PUSH
17967: LD_INT 24
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: ST_TO_ADDR
17974: GO 18003
17976: LD_INT 47
17978: DOUBLE
17979: EQUAL
17980: IFTRUE 17984
17982: GO 18002
17984: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17985: LD_ADDR_VAR 0 3
17989: PUSH
17990: LD_INT 23
17992: PUSH
17993: LD_INT 24
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: ST_TO_ADDR
18000: GO 18003
18002: POP
// result := ( chassis in result ) ;
18003: LD_ADDR_VAR 0 3
18007: PUSH
18008: LD_VAR 0 1
18012: PUSH
18013: LD_VAR 0 3
18017: IN
18018: ST_TO_ADDR
// end ;
18019: LD_VAR 0 3
18023: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
18024: LD_INT 0
18026: PPUSH
18027: PPUSH
18028: PPUSH
18029: PPUSH
18030: PPUSH
18031: PPUSH
18032: PPUSH
// result := array ;
18033: LD_ADDR_VAR 0 5
18037: PUSH
18038: LD_VAR 0 1
18042: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
18043: LD_VAR 0 1
18047: NOT
18048: PUSH
18049: LD_VAR 0 2
18053: NOT
18054: OR
18055: PUSH
18056: LD_VAR 0 3
18060: NOT
18061: OR
18062: PUSH
18063: LD_VAR 0 2
18067: PUSH
18068: LD_VAR 0 1
18072: GREATER
18073: OR
18074: PUSH
18075: LD_VAR 0 3
18079: PUSH
18080: LD_VAR 0 1
18084: GREATER
18085: OR
18086: IFFALSE 18090
// exit ;
18088: GO 18386
// if direction then
18090: LD_VAR 0 4
18094: IFFALSE 18158
// begin d := 1 ;
18096: LD_ADDR_VAR 0 9
18100: PUSH
18101: LD_INT 1
18103: ST_TO_ADDR
// if i_from > i_to then
18104: LD_VAR 0 2
18108: PUSH
18109: LD_VAR 0 3
18113: GREATER
18114: IFFALSE 18140
// length := ( array - i_from ) + i_to else
18116: LD_ADDR_VAR 0 11
18120: PUSH
18121: LD_VAR 0 1
18125: PUSH
18126: LD_VAR 0 2
18130: MINUS
18131: PUSH
18132: LD_VAR 0 3
18136: PLUS
18137: ST_TO_ADDR
18138: GO 18156
// length := i_to - i_from ;
18140: LD_ADDR_VAR 0 11
18144: PUSH
18145: LD_VAR 0 3
18149: PUSH
18150: LD_VAR 0 2
18154: MINUS
18155: ST_TO_ADDR
// end else
18156: GO 18219
// begin d := - 1 ;
18158: LD_ADDR_VAR 0 9
18162: PUSH
18163: LD_INT 1
18165: NEG
18166: ST_TO_ADDR
// if i_from > i_to then
18167: LD_VAR 0 2
18171: PUSH
18172: LD_VAR 0 3
18176: GREATER
18177: IFFALSE 18197
// length := i_from - i_to else
18179: LD_ADDR_VAR 0 11
18183: PUSH
18184: LD_VAR 0 2
18188: PUSH
18189: LD_VAR 0 3
18193: MINUS
18194: ST_TO_ADDR
18195: GO 18219
// length := ( array - i_to ) + i_from ;
18197: LD_ADDR_VAR 0 11
18201: PUSH
18202: LD_VAR 0 1
18206: PUSH
18207: LD_VAR 0 3
18211: MINUS
18212: PUSH
18213: LD_VAR 0 2
18217: PLUS
18218: ST_TO_ADDR
// end ; if not length then
18219: LD_VAR 0 11
18223: NOT
18224: IFFALSE 18228
// exit ;
18226: GO 18386
// tmp := array ;
18228: LD_ADDR_VAR 0 10
18232: PUSH
18233: LD_VAR 0 1
18237: ST_TO_ADDR
// for i = 1 to length do
18238: LD_ADDR_VAR 0 6
18242: PUSH
18243: DOUBLE
18244: LD_INT 1
18246: DEC
18247: ST_TO_ADDR
18248: LD_VAR 0 11
18252: PUSH
18253: FOR_TO
18254: IFFALSE 18374
// begin for j = 1 to array do
18256: LD_ADDR_VAR 0 7
18260: PUSH
18261: DOUBLE
18262: LD_INT 1
18264: DEC
18265: ST_TO_ADDR
18266: LD_VAR 0 1
18270: PUSH
18271: FOR_TO
18272: IFFALSE 18360
// begin k := j + d ;
18274: LD_ADDR_VAR 0 8
18278: PUSH
18279: LD_VAR 0 7
18283: PUSH
18284: LD_VAR 0 9
18288: PLUS
18289: ST_TO_ADDR
// if k > array then
18290: LD_VAR 0 8
18294: PUSH
18295: LD_VAR 0 1
18299: GREATER
18300: IFFALSE 18310
// k := 1 ;
18302: LD_ADDR_VAR 0 8
18306: PUSH
18307: LD_INT 1
18309: ST_TO_ADDR
// if not k then
18310: LD_VAR 0 8
18314: NOT
18315: IFFALSE 18327
// k := array ;
18317: LD_ADDR_VAR 0 8
18321: PUSH
18322: LD_VAR 0 1
18326: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18327: LD_ADDR_VAR 0 10
18331: PUSH
18332: LD_VAR 0 10
18336: PPUSH
18337: LD_VAR 0 8
18341: PPUSH
18342: LD_VAR 0 1
18346: PUSH
18347: LD_VAR 0 7
18351: ARRAY
18352: PPUSH
18353: CALL_OW 1
18357: ST_TO_ADDR
// end ;
18358: GO 18271
18360: POP
18361: POP
// array := tmp ;
18362: LD_ADDR_VAR 0 1
18366: PUSH
18367: LD_VAR 0 10
18371: ST_TO_ADDR
// end ;
18372: GO 18253
18374: POP
18375: POP
// result := array ;
18376: LD_ADDR_VAR 0 5
18380: PUSH
18381: LD_VAR 0 1
18385: ST_TO_ADDR
// end ;
18386: LD_VAR 0 5
18390: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18391: LD_INT 0
18393: PPUSH
18394: PPUSH
// result := 0 ;
18395: LD_ADDR_VAR 0 3
18399: PUSH
18400: LD_INT 0
18402: ST_TO_ADDR
// if not array or not value in array then
18403: LD_VAR 0 1
18407: NOT
18408: PUSH
18409: LD_VAR 0 2
18413: PUSH
18414: LD_VAR 0 1
18418: IN
18419: NOT
18420: OR
18421: IFFALSE 18425
// exit ;
18423: GO 18479
// for i = 1 to array do
18425: LD_ADDR_VAR 0 4
18429: PUSH
18430: DOUBLE
18431: LD_INT 1
18433: DEC
18434: ST_TO_ADDR
18435: LD_VAR 0 1
18439: PUSH
18440: FOR_TO
18441: IFFALSE 18477
// if value = array [ i ] then
18443: LD_VAR 0 2
18447: PUSH
18448: LD_VAR 0 1
18452: PUSH
18453: LD_VAR 0 4
18457: ARRAY
18458: EQUAL
18459: IFFALSE 18475
// begin result := i ;
18461: LD_ADDR_VAR 0 3
18465: PUSH
18466: LD_VAR 0 4
18470: ST_TO_ADDR
// exit ;
18471: POP
18472: POP
18473: GO 18479
// end ;
18475: GO 18440
18477: POP
18478: POP
// end ;
18479: LD_VAR 0 3
18483: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18484: LD_INT 0
18486: PPUSH
// vc_chassis := chassis ;
18487: LD_ADDR_OWVAR 37
18491: PUSH
18492: LD_VAR 0 1
18496: ST_TO_ADDR
// vc_engine := engine ;
18497: LD_ADDR_OWVAR 39
18501: PUSH
18502: LD_VAR 0 2
18506: ST_TO_ADDR
// vc_control := control ;
18507: LD_ADDR_OWVAR 38
18511: PUSH
18512: LD_VAR 0 3
18516: ST_TO_ADDR
// vc_weapon := weapon ;
18517: LD_ADDR_OWVAR 40
18521: PUSH
18522: LD_VAR 0 4
18526: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18527: LD_ADDR_OWVAR 41
18531: PUSH
18532: LD_VAR 0 5
18536: ST_TO_ADDR
// end ;
18537: LD_VAR 0 6
18541: RET
// export function WantPlant ( unit ) ; var task ; begin
18542: LD_INT 0
18544: PPUSH
18545: PPUSH
// result := false ;
18546: LD_ADDR_VAR 0 2
18550: PUSH
18551: LD_INT 0
18553: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18554: LD_ADDR_VAR 0 3
18558: PUSH
18559: LD_VAR 0 1
18563: PPUSH
18564: CALL_OW 437
18568: ST_TO_ADDR
// if task then
18569: LD_VAR 0 3
18573: IFFALSE 18601
// if task [ 1 ] [ 1 ] = p then
18575: LD_VAR 0 3
18579: PUSH
18580: LD_INT 1
18582: ARRAY
18583: PUSH
18584: LD_INT 1
18586: ARRAY
18587: PUSH
18588: LD_STRING p
18590: EQUAL
18591: IFFALSE 18601
// result := true ;
18593: LD_ADDR_VAR 0 2
18597: PUSH
18598: LD_INT 1
18600: ST_TO_ADDR
// end ;
18601: LD_VAR 0 2
18605: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18606: LD_INT 0
18608: PPUSH
18609: PPUSH
18610: PPUSH
18611: PPUSH
// if pos < 1 then
18612: LD_VAR 0 2
18616: PUSH
18617: LD_INT 1
18619: LESS
18620: IFFALSE 18624
// exit ;
18622: GO 18927
// if pos = 1 then
18624: LD_VAR 0 2
18628: PUSH
18629: LD_INT 1
18631: EQUAL
18632: IFFALSE 18665
// result := Replace ( arr , pos [ 1 ] , value ) else
18634: LD_ADDR_VAR 0 4
18638: PUSH
18639: LD_VAR 0 1
18643: PPUSH
18644: LD_VAR 0 2
18648: PUSH
18649: LD_INT 1
18651: ARRAY
18652: PPUSH
18653: LD_VAR 0 3
18657: PPUSH
18658: CALL_OW 1
18662: ST_TO_ADDR
18663: GO 18927
// begin tmp := arr ;
18665: LD_ADDR_VAR 0 6
18669: PUSH
18670: LD_VAR 0 1
18674: ST_TO_ADDR
// s_arr := [ tmp ] ;
18675: LD_ADDR_VAR 0 7
18679: PUSH
18680: LD_VAR 0 6
18684: PUSH
18685: EMPTY
18686: LIST
18687: ST_TO_ADDR
// for i = 1 to pos - 1 do
18688: LD_ADDR_VAR 0 5
18692: PUSH
18693: DOUBLE
18694: LD_INT 1
18696: DEC
18697: ST_TO_ADDR
18698: LD_VAR 0 2
18702: PUSH
18703: LD_INT 1
18705: MINUS
18706: PUSH
18707: FOR_TO
18708: IFFALSE 18753
// begin tmp := tmp [ pos [ i ] ] ;
18710: LD_ADDR_VAR 0 6
18714: PUSH
18715: LD_VAR 0 6
18719: PUSH
18720: LD_VAR 0 2
18724: PUSH
18725: LD_VAR 0 5
18729: ARRAY
18730: ARRAY
18731: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18732: LD_ADDR_VAR 0 7
18736: PUSH
18737: LD_VAR 0 7
18741: PUSH
18742: LD_VAR 0 6
18746: PUSH
18747: EMPTY
18748: LIST
18749: ADD
18750: ST_TO_ADDR
// end ;
18751: GO 18707
18753: POP
18754: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18755: LD_ADDR_VAR 0 6
18759: PUSH
18760: LD_VAR 0 6
18764: PPUSH
18765: LD_VAR 0 2
18769: PUSH
18770: LD_VAR 0 2
18774: ARRAY
18775: PPUSH
18776: LD_VAR 0 3
18780: PPUSH
18781: CALL_OW 1
18785: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18786: LD_ADDR_VAR 0 7
18790: PUSH
18791: LD_VAR 0 7
18795: PPUSH
18796: LD_VAR 0 7
18800: PPUSH
18801: LD_VAR 0 6
18805: PPUSH
18806: CALL_OW 1
18810: ST_TO_ADDR
// for i = s_arr downto 2 do
18811: LD_ADDR_VAR 0 5
18815: PUSH
18816: DOUBLE
18817: LD_VAR 0 7
18821: INC
18822: ST_TO_ADDR
18823: LD_INT 2
18825: PUSH
18826: FOR_DOWNTO
18827: IFFALSE 18911
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18829: LD_ADDR_VAR 0 6
18833: PUSH
18834: LD_VAR 0 7
18838: PUSH
18839: LD_VAR 0 5
18843: PUSH
18844: LD_INT 1
18846: MINUS
18847: ARRAY
18848: PPUSH
18849: LD_VAR 0 2
18853: PUSH
18854: LD_VAR 0 5
18858: PUSH
18859: LD_INT 1
18861: MINUS
18862: ARRAY
18863: PPUSH
18864: LD_VAR 0 7
18868: PUSH
18869: LD_VAR 0 5
18873: ARRAY
18874: PPUSH
18875: CALL_OW 1
18879: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18880: LD_ADDR_VAR 0 7
18884: PUSH
18885: LD_VAR 0 7
18889: PPUSH
18890: LD_VAR 0 5
18894: PUSH
18895: LD_INT 1
18897: MINUS
18898: PPUSH
18899: LD_VAR 0 6
18903: PPUSH
18904: CALL_OW 1
18908: ST_TO_ADDR
// end ;
18909: GO 18826
18911: POP
18912: POP
// result := s_arr [ 1 ] ;
18913: LD_ADDR_VAR 0 4
18917: PUSH
18918: LD_VAR 0 7
18922: PUSH
18923: LD_INT 1
18925: ARRAY
18926: ST_TO_ADDR
// end ; end ;
18927: LD_VAR 0 4
18931: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18932: LD_INT 0
18934: PPUSH
18935: PPUSH
// if not list then
18936: LD_VAR 0 1
18940: NOT
18941: IFFALSE 18945
// exit ;
18943: GO 19036
// i := list [ pos1 ] ;
18945: LD_ADDR_VAR 0 5
18949: PUSH
18950: LD_VAR 0 1
18954: PUSH
18955: LD_VAR 0 2
18959: ARRAY
18960: ST_TO_ADDR
// if not i then
18961: LD_VAR 0 5
18965: NOT
18966: IFFALSE 18970
// exit ;
18968: GO 19036
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18970: LD_ADDR_VAR 0 1
18974: PUSH
18975: LD_VAR 0 1
18979: PPUSH
18980: LD_VAR 0 2
18984: PPUSH
18985: LD_VAR 0 1
18989: PUSH
18990: LD_VAR 0 3
18994: ARRAY
18995: PPUSH
18996: CALL_OW 1
19000: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
19001: LD_ADDR_VAR 0 1
19005: PUSH
19006: LD_VAR 0 1
19010: PPUSH
19011: LD_VAR 0 3
19015: PPUSH
19016: LD_VAR 0 5
19020: PPUSH
19021: CALL_OW 1
19025: ST_TO_ADDR
// result := list ;
19026: LD_ADDR_VAR 0 4
19030: PUSH
19031: LD_VAR 0 1
19035: ST_TO_ADDR
// end ;
19036: LD_VAR 0 4
19040: RET
// export function Add ( list , pos , val ) ; begin
19041: LD_INT 0
19043: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
19044: LD_ADDR_VAR 0 4
19048: PUSH
19049: LD_VAR 0 1
19053: PPUSH
19054: LD_VAR 0 2
19058: PPUSH
19059: LD_VAR 0 3
19063: PPUSH
19064: CALL 18606 0 3
19068: ST_TO_ADDR
19069: LD_VAR 0 4
19073: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
19074: LD_INT 0
19076: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
19077: LD_ADDR_VAR 0 5
19081: PUSH
19082: LD_VAR 0 1
19086: PPUSH
19087: CALL_OW 250
19091: PPUSH
19092: LD_VAR 0 1
19096: PPUSH
19097: CALL_OW 251
19101: PPUSH
19102: LD_VAR 0 2
19106: PPUSH
19107: LD_VAR 0 3
19111: PPUSH
19112: LD_VAR 0 4
19116: PPUSH
19117: CALL 19127 0 5
19121: ST_TO_ADDR
// end ;
19122: LD_VAR 0 5
19126: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
19127: LD_INT 0
19129: PPUSH
19130: PPUSH
19131: PPUSH
19132: PPUSH
// if not list then
19133: LD_VAR 0 3
19137: NOT
19138: IFFALSE 19142
// exit ;
19140: GO 19530
// result := [ ] ;
19142: LD_ADDR_VAR 0 6
19146: PUSH
19147: EMPTY
19148: ST_TO_ADDR
// for i in list do
19149: LD_ADDR_VAR 0 7
19153: PUSH
19154: LD_VAR 0 3
19158: PUSH
19159: FOR_IN
19160: IFFALSE 19362
// begin tmp := GetDistUnitXY ( i , x , y ) ;
19162: LD_ADDR_VAR 0 9
19166: PUSH
19167: LD_VAR 0 7
19171: PPUSH
19172: LD_VAR 0 1
19176: PPUSH
19177: LD_VAR 0 2
19181: PPUSH
19182: CALL_OW 297
19186: ST_TO_ADDR
// if not result then
19187: LD_VAR 0 6
19191: NOT
19192: IFFALSE 19218
// result := [ [ i , tmp ] ] else
19194: LD_ADDR_VAR 0 6
19198: PUSH
19199: LD_VAR 0 7
19203: PUSH
19204: LD_VAR 0 9
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: EMPTY
19214: LIST
19215: ST_TO_ADDR
19216: GO 19360
// begin if result [ result ] [ 2 ] < tmp then
19218: LD_VAR 0 6
19222: PUSH
19223: LD_VAR 0 6
19227: ARRAY
19228: PUSH
19229: LD_INT 2
19231: ARRAY
19232: PUSH
19233: LD_VAR 0 9
19237: LESS
19238: IFFALSE 19280
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
19240: LD_ADDR_VAR 0 6
19244: PUSH
19245: LD_VAR 0 6
19249: PPUSH
19250: LD_VAR 0 6
19254: PUSH
19255: LD_INT 1
19257: PLUS
19258: PPUSH
19259: LD_VAR 0 7
19263: PUSH
19264: LD_VAR 0 9
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PPUSH
19273: CALL_OW 2
19277: ST_TO_ADDR
19278: GO 19360
// for j = 1 to result do
19280: LD_ADDR_VAR 0 8
19284: PUSH
19285: DOUBLE
19286: LD_INT 1
19288: DEC
19289: ST_TO_ADDR
19290: LD_VAR 0 6
19294: PUSH
19295: FOR_TO
19296: IFFALSE 19358
// begin if tmp < result [ j ] [ 2 ] then
19298: LD_VAR 0 9
19302: PUSH
19303: LD_VAR 0 6
19307: PUSH
19308: LD_VAR 0 8
19312: ARRAY
19313: PUSH
19314: LD_INT 2
19316: ARRAY
19317: LESS
19318: IFFALSE 19356
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19320: LD_ADDR_VAR 0 6
19324: PUSH
19325: LD_VAR 0 6
19329: PPUSH
19330: LD_VAR 0 8
19334: PPUSH
19335: LD_VAR 0 7
19339: PUSH
19340: LD_VAR 0 9
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PPUSH
19349: CALL_OW 2
19353: ST_TO_ADDR
// break ;
19354: GO 19358
// end ; end ;
19356: GO 19295
19358: POP
19359: POP
// end ; end ;
19360: GO 19159
19362: POP
19363: POP
// if result and not asc then
19364: LD_VAR 0 6
19368: PUSH
19369: LD_VAR 0 4
19373: NOT
19374: AND
19375: IFFALSE 19450
// begin tmp := result ;
19377: LD_ADDR_VAR 0 9
19381: PUSH
19382: LD_VAR 0 6
19386: ST_TO_ADDR
// for i = tmp downto 1 do
19387: LD_ADDR_VAR 0 7
19391: PUSH
19392: DOUBLE
19393: LD_VAR 0 9
19397: INC
19398: ST_TO_ADDR
19399: LD_INT 1
19401: PUSH
19402: FOR_DOWNTO
19403: IFFALSE 19448
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19405: LD_ADDR_VAR 0 6
19409: PUSH
19410: LD_VAR 0 6
19414: PPUSH
19415: LD_VAR 0 9
19419: PUSH
19420: LD_VAR 0 7
19424: MINUS
19425: PUSH
19426: LD_INT 1
19428: PLUS
19429: PPUSH
19430: LD_VAR 0 9
19434: PUSH
19435: LD_VAR 0 7
19439: ARRAY
19440: PPUSH
19441: CALL_OW 1
19445: ST_TO_ADDR
19446: GO 19402
19448: POP
19449: POP
// end ; tmp := [ ] ;
19450: LD_ADDR_VAR 0 9
19454: PUSH
19455: EMPTY
19456: ST_TO_ADDR
// if mode then
19457: LD_VAR 0 5
19461: IFFALSE 19530
// begin for i = 1 to result do
19463: LD_ADDR_VAR 0 7
19467: PUSH
19468: DOUBLE
19469: LD_INT 1
19471: DEC
19472: ST_TO_ADDR
19473: LD_VAR 0 6
19477: PUSH
19478: FOR_TO
19479: IFFALSE 19518
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19481: LD_ADDR_VAR 0 9
19485: PUSH
19486: LD_VAR 0 9
19490: PPUSH
19491: LD_VAR 0 7
19495: PPUSH
19496: LD_VAR 0 6
19500: PUSH
19501: LD_VAR 0 7
19505: ARRAY
19506: PUSH
19507: LD_INT 1
19509: ARRAY
19510: PPUSH
19511: CALL_OW 1
19515: ST_TO_ADDR
19516: GO 19478
19518: POP
19519: POP
// result := tmp ;
19520: LD_ADDR_VAR 0 6
19524: PUSH
19525: LD_VAR 0 9
19529: ST_TO_ADDR
// end ; end ;
19530: LD_VAR 0 6
19534: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19535: LD_INT 0
19537: PPUSH
19538: PPUSH
19539: PPUSH
19540: PPUSH
19541: PPUSH
19542: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19543: LD_ADDR_VAR 0 5
19547: PUSH
19548: LD_INT 0
19550: PUSH
19551: LD_INT 0
19553: PUSH
19554: LD_INT 0
19556: PUSH
19557: EMPTY
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: ST_TO_ADDR
// if not x or not y then
19565: LD_VAR 0 2
19569: NOT
19570: PUSH
19571: LD_VAR 0 3
19575: NOT
19576: OR
19577: IFFALSE 19581
// exit ;
19579: GO 21227
// if not range then
19581: LD_VAR 0 4
19585: NOT
19586: IFFALSE 19596
// range := 10 ;
19588: LD_ADDR_VAR 0 4
19592: PUSH
19593: LD_INT 10
19595: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19596: LD_ADDR_VAR 0 8
19600: PUSH
19601: LD_INT 81
19603: PUSH
19604: LD_VAR 0 1
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 92
19615: PUSH
19616: LD_VAR 0 2
19620: PUSH
19621: LD_VAR 0 3
19625: PUSH
19626: LD_VAR 0 4
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 3
19639: PUSH
19640: LD_INT 21
19642: PUSH
19643: LD_INT 3
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: PPUSH
19659: CALL_OW 69
19663: ST_TO_ADDR
// if not tmp then
19664: LD_VAR 0 8
19668: NOT
19669: IFFALSE 19673
// exit ;
19671: GO 21227
// for i in tmp do
19673: LD_ADDR_VAR 0 6
19677: PUSH
19678: LD_VAR 0 8
19682: PUSH
19683: FOR_IN
19684: IFFALSE 21202
// begin points := [ 0 , 0 , 0 ] ;
19686: LD_ADDR_VAR 0 9
19690: PUSH
19691: LD_INT 0
19693: PUSH
19694: LD_INT 0
19696: PUSH
19697: LD_INT 0
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: LIST
19704: ST_TO_ADDR
// bpoints := 1 ;
19705: LD_ADDR_VAR 0 10
19709: PUSH
19710: LD_INT 1
19712: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19713: LD_VAR 0 6
19717: PPUSH
19718: CALL_OW 247
19722: PUSH
19723: LD_INT 1
19725: DOUBLE
19726: EQUAL
19727: IFTRUE 19731
19729: GO 20309
19731: POP
// begin if GetClass ( i ) = 1 then
19732: LD_VAR 0 6
19736: PPUSH
19737: CALL_OW 257
19741: PUSH
19742: LD_INT 1
19744: EQUAL
19745: IFFALSE 19766
// points := [ 10 , 5 , 3 ] ;
19747: LD_ADDR_VAR 0 9
19751: PUSH
19752: LD_INT 10
19754: PUSH
19755: LD_INT 5
19757: PUSH
19758: LD_INT 3
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: LIST
19765: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19766: LD_VAR 0 6
19770: PPUSH
19771: CALL_OW 257
19775: PUSH
19776: LD_INT 2
19778: PUSH
19779: LD_INT 3
19781: PUSH
19782: LD_INT 4
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: LIST
19789: IN
19790: IFFALSE 19811
// points := [ 3 , 2 , 1 ] ;
19792: LD_ADDR_VAR 0 9
19796: PUSH
19797: LD_INT 3
19799: PUSH
19800: LD_INT 2
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: LIST
19810: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19811: LD_VAR 0 6
19815: PPUSH
19816: CALL_OW 257
19820: PUSH
19821: LD_INT 5
19823: EQUAL
19824: IFFALSE 19845
// points := [ 130 , 5 , 2 ] ;
19826: LD_ADDR_VAR 0 9
19830: PUSH
19831: LD_INT 130
19833: PUSH
19834: LD_INT 5
19836: PUSH
19837: LD_INT 2
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: LIST
19844: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19845: LD_VAR 0 6
19849: PPUSH
19850: CALL_OW 257
19854: PUSH
19855: LD_INT 8
19857: EQUAL
19858: IFFALSE 19879
// points := [ 35 , 35 , 30 ] ;
19860: LD_ADDR_VAR 0 9
19864: PUSH
19865: LD_INT 35
19867: PUSH
19868: LD_INT 35
19870: PUSH
19871: LD_INT 30
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: LIST
19878: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19879: LD_VAR 0 6
19883: PPUSH
19884: CALL_OW 257
19888: PUSH
19889: LD_INT 9
19891: EQUAL
19892: IFFALSE 19913
// points := [ 20 , 55 , 40 ] ;
19894: LD_ADDR_VAR 0 9
19898: PUSH
19899: LD_INT 20
19901: PUSH
19902: LD_INT 55
19904: PUSH
19905: LD_INT 40
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: LIST
19912: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19913: LD_VAR 0 6
19917: PPUSH
19918: CALL_OW 257
19922: PUSH
19923: LD_INT 12
19925: PUSH
19926: LD_INT 16
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: IN
19933: IFFALSE 19954
// points := [ 5 , 3 , 2 ] ;
19935: LD_ADDR_VAR 0 9
19939: PUSH
19940: LD_INT 5
19942: PUSH
19943: LD_INT 3
19945: PUSH
19946: LD_INT 2
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19954: LD_VAR 0 6
19958: PPUSH
19959: CALL_OW 257
19963: PUSH
19964: LD_INT 17
19966: EQUAL
19967: IFFALSE 19988
// points := [ 100 , 50 , 75 ] ;
19969: LD_ADDR_VAR 0 9
19973: PUSH
19974: LD_INT 100
19976: PUSH
19977: LD_INT 50
19979: PUSH
19980: LD_INT 75
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: LIST
19987: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19988: LD_VAR 0 6
19992: PPUSH
19993: CALL_OW 257
19997: PUSH
19998: LD_INT 15
20000: EQUAL
20001: IFFALSE 20022
// points := [ 10 , 5 , 3 ] ;
20003: LD_ADDR_VAR 0 9
20007: PUSH
20008: LD_INT 10
20010: PUSH
20011: LD_INT 5
20013: PUSH
20014: LD_INT 3
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: LIST
20021: ST_TO_ADDR
// if GetClass ( i ) = 14 then
20022: LD_VAR 0 6
20026: PPUSH
20027: CALL_OW 257
20031: PUSH
20032: LD_INT 14
20034: EQUAL
20035: IFFALSE 20056
// points := [ 10 , 0 , 0 ] ;
20037: LD_ADDR_VAR 0 9
20041: PUSH
20042: LD_INT 10
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: LD_INT 0
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: LIST
20055: ST_TO_ADDR
// if GetClass ( i ) = 11 then
20056: LD_VAR 0 6
20060: PPUSH
20061: CALL_OW 257
20065: PUSH
20066: LD_INT 11
20068: EQUAL
20069: IFFALSE 20090
// points := [ 30 , 10 , 5 ] ;
20071: LD_ADDR_VAR 0 9
20075: PUSH
20076: LD_INT 30
20078: PUSH
20079: LD_INT 10
20081: PUSH
20082: LD_INT 5
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: LIST
20089: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
20090: LD_VAR 0 1
20094: PPUSH
20095: LD_INT 5
20097: PPUSH
20098: CALL_OW 321
20102: PUSH
20103: LD_INT 2
20105: EQUAL
20106: IFFALSE 20123
// bpoints := bpoints * 1.8 ;
20108: LD_ADDR_VAR 0 10
20112: PUSH
20113: LD_VAR 0 10
20117: PUSH
20118: LD_REAL  1.80000000000000E+0000
20121: MUL
20122: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
20123: LD_VAR 0 6
20127: PPUSH
20128: CALL_OW 257
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: LD_INT 3
20141: PUSH
20142: LD_INT 4
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: IN
20151: PUSH
20152: LD_VAR 0 1
20156: PPUSH
20157: LD_INT 51
20159: PPUSH
20160: CALL_OW 321
20164: PUSH
20165: LD_INT 2
20167: EQUAL
20168: AND
20169: IFFALSE 20186
// bpoints := bpoints * 1.2 ;
20171: LD_ADDR_VAR 0 10
20175: PUSH
20176: LD_VAR 0 10
20180: PUSH
20181: LD_REAL  1.20000000000000E+0000
20184: MUL
20185: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
20186: LD_VAR 0 6
20190: PPUSH
20191: CALL_OW 257
20195: PUSH
20196: LD_INT 5
20198: PUSH
20199: LD_INT 7
20201: PUSH
20202: LD_INT 9
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: LIST
20209: IN
20210: PUSH
20211: LD_VAR 0 1
20215: PPUSH
20216: LD_INT 52
20218: PPUSH
20219: CALL_OW 321
20223: PUSH
20224: LD_INT 2
20226: EQUAL
20227: AND
20228: IFFALSE 20245
// bpoints := bpoints * 1.5 ;
20230: LD_ADDR_VAR 0 10
20234: PUSH
20235: LD_VAR 0 10
20239: PUSH
20240: LD_REAL  1.50000000000000E+0000
20243: MUL
20244: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
20245: LD_VAR 0 1
20249: PPUSH
20250: LD_INT 66
20252: PPUSH
20253: CALL_OW 321
20257: PUSH
20258: LD_INT 2
20260: EQUAL
20261: IFFALSE 20278
// bpoints := bpoints * 1.1 ;
20263: LD_ADDR_VAR 0 10
20267: PUSH
20268: LD_VAR 0 10
20272: PUSH
20273: LD_REAL  1.10000000000000E+0000
20276: MUL
20277: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20278: LD_ADDR_VAR 0 10
20282: PUSH
20283: LD_VAR 0 10
20287: PUSH
20288: LD_VAR 0 6
20292: PPUSH
20293: LD_INT 1
20295: PPUSH
20296: CALL_OW 259
20300: PUSH
20301: LD_REAL  1.15000000000000E+0000
20304: MUL
20305: MUL
20306: ST_TO_ADDR
// end ; unit_vehicle :
20307: GO 21131
20309: LD_INT 2
20311: DOUBLE
20312: EQUAL
20313: IFTRUE 20317
20315: GO 21119
20317: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20318: LD_VAR 0 6
20322: PPUSH
20323: CALL_OW 264
20327: PUSH
20328: LD_INT 2
20330: PUSH
20331: LD_INT 42
20333: PUSH
20334: LD_INT 24
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: LIST
20341: IN
20342: IFFALSE 20363
// points := [ 25 , 5 , 3 ] ;
20344: LD_ADDR_VAR 0 9
20348: PUSH
20349: LD_INT 25
20351: PUSH
20352: LD_INT 5
20354: PUSH
20355: LD_INT 3
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: LIST
20362: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20363: LD_VAR 0 6
20367: PPUSH
20368: CALL_OW 264
20372: PUSH
20373: LD_INT 4
20375: PUSH
20376: LD_INT 43
20378: PUSH
20379: LD_INT 25
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: LIST
20386: IN
20387: IFFALSE 20408
// points := [ 40 , 15 , 5 ] ;
20389: LD_ADDR_VAR 0 9
20393: PUSH
20394: LD_INT 40
20396: PUSH
20397: LD_INT 15
20399: PUSH
20400: LD_INT 5
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: LIST
20407: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20408: LD_VAR 0 6
20412: PPUSH
20413: CALL_OW 264
20417: PUSH
20418: LD_INT 3
20420: PUSH
20421: LD_INT 23
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: IN
20428: IFFALSE 20449
// points := [ 7 , 25 , 8 ] ;
20430: LD_ADDR_VAR 0 9
20434: PUSH
20435: LD_INT 7
20437: PUSH
20438: LD_INT 25
20440: PUSH
20441: LD_INT 8
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: LIST
20448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20449: LD_VAR 0 6
20453: PPUSH
20454: CALL_OW 264
20458: PUSH
20459: LD_INT 5
20461: PUSH
20462: LD_INT 27
20464: PUSH
20465: LD_INT 44
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: LIST
20472: IN
20473: IFFALSE 20494
// points := [ 14 , 50 , 16 ] ;
20475: LD_ADDR_VAR 0 9
20479: PUSH
20480: LD_INT 14
20482: PUSH
20483: LD_INT 50
20485: PUSH
20486: LD_INT 16
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: LIST
20493: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20494: LD_VAR 0 6
20498: PPUSH
20499: CALL_OW 264
20503: PUSH
20504: LD_INT 6
20506: PUSH
20507: LD_INT 46
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: IN
20514: IFFALSE 20535
// points := [ 32 , 120 , 70 ] ;
20516: LD_ADDR_VAR 0 9
20520: PUSH
20521: LD_INT 32
20523: PUSH
20524: LD_INT 120
20526: PUSH
20527: LD_INT 70
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: LIST
20534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
20535: LD_VAR 0 6
20539: PPUSH
20540: CALL_OW 264
20544: PUSH
20545: LD_INT 7
20547: PUSH
20548: LD_INT 28
20550: PUSH
20551: LD_INT 45
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: LIST
20558: IN
20559: IFFALSE 20580
// points := [ 35 , 20 , 45 ] ;
20561: LD_ADDR_VAR 0 9
20565: PUSH
20566: LD_INT 35
20568: PUSH
20569: LD_INT 20
20571: PUSH
20572: LD_INT 45
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: LIST
20579: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20580: LD_VAR 0 6
20584: PPUSH
20585: CALL_OW 264
20589: PUSH
20590: LD_INT 47
20592: PUSH
20593: EMPTY
20594: LIST
20595: IN
20596: IFFALSE 20617
// points := [ 67 , 45 , 75 ] ;
20598: LD_ADDR_VAR 0 9
20602: PUSH
20603: LD_INT 67
20605: PUSH
20606: LD_INT 45
20608: PUSH
20609: LD_INT 75
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: LIST
20616: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20617: LD_VAR 0 6
20621: PPUSH
20622: CALL_OW 264
20626: PUSH
20627: LD_INT 26
20629: PUSH
20630: EMPTY
20631: LIST
20632: IN
20633: IFFALSE 20654
// points := [ 120 , 30 , 80 ] ;
20635: LD_ADDR_VAR 0 9
20639: PUSH
20640: LD_INT 120
20642: PUSH
20643: LD_INT 30
20645: PUSH
20646: LD_INT 80
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: LIST
20653: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20654: LD_VAR 0 6
20658: PPUSH
20659: CALL_OW 264
20663: PUSH
20664: LD_INT 22
20666: PUSH
20667: EMPTY
20668: LIST
20669: IN
20670: IFFALSE 20691
// points := [ 40 , 1 , 1 ] ;
20672: LD_ADDR_VAR 0 9
20676: PUSH
20677: LD_INT 40
20679: PUSH
20680: LD_INT 1
20682: PUSH
20683: LD_INT 1
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: LIST
20690: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20691: LD_VAR 0 6
20695: PPUSH
20696: CALL_OW 264
20700: PUSH
20701: LD_INT 29
20703: PUSH
20704: EMPTY
20705: LIST
20706: IN
20707: IFFALSE 20728
// points := [ 70 , 200 , 400 ] ;
20709: LD_ADDR_VAR 0 9
20713: PUSH
20714: LD_INT 70
20716: PUSH
20717: LD_INT 200
20719: PUSH
20720: LD_INT 400
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: LIST
20727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20728: LD_VAR 0 6
20732: PPUSH
20733: CALL_OW 264
20737: PUSH
20738: LD_INT 14
20740: PUSH
20741: LD_INT 53
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: IN
20748: IFFALSE 20769
// points := [ 40 , 10 , 20 ] ;
20750: LD_ADDR_VAR 0 9
20754: PUSH
20755: LD_INT 40
20757: PUSH
20758: LD_INT 10
20760: PUSH
20761: LD_INT 20
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: LIST
20768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20769: LD_VAR 0 6
20773: PPUSH
20774: CALL_OW 264
20778: PUSH
20779: LD_INT 9
20781: PUSH
20782: EMPTY
20783: LIST
20784: IN
20785: IFFALSE 20806
// points := [ 5 , 70 , 20 ] ;
20787: LD_ADDR_VAR 0 9
20791: PUSH
20792: LD_INT 5
20794: PUSH
20795: LD_INT 70
20797: PUSH
20798: LD_INT 20
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: LIST
20805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20806: LD_VAR 0 6
20810: PPUSH
20811: CALL_OW 264
20815: PUSH
20816: LD_INT 10
20818: PUSH
20819: EMPTY
20820: LIST
20821: IN
20822: IFFALSE 20843
// points := [ 35 , 110 , 70 ] ;
20824: LD_ADDR_VAR 0 9
20828: PUSH
20829: LD_INT 35
20831: PUSH
20832: LD_INT 110
20834: PUSH
20835: LD_INT 70
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: LIST
20842: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20843: LD_VAR 0 6
20847: PPUSH
20848: CALL_OW 265
20852: PUSH
20853: LD_INT 25
20855: EQUAL
20856: IFFALSE 20877
// points := [ 80 , 65 , 100 ] ;
20858: LD_ADDR_VAR 0 9
20862: PUSH
20863: LD_INT 80
20865: PUSH
20866: LD_INT 65
20868: PUSH
20869: LD_INT 100
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: LIST
20876: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20877: LD_VAR 0 6
20881: PPUSH
20882: CALL_OW 263
20886: PUSH
20887: LD_INT 1
20889: EQUAL
20890: IFFALSE 20925
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20892: LD_ADDR_VAR 0 10
20896: PUSH
20897: LD_VAR 0 10
20901: PUSH
20902: LD_VAR 0 6
20906: PPUSH
20907: CALL_OW 311
20911: PPUSH
20912: LD_INT 3
20914: PPUSH
20915: CALL_OW 259
20919: PUSH
20920: LD_INT 4
20922: MUL
20923: MUL
20924: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20925: LD_VAR 0 6
20929: PPUSH
20930: CALL_OW 263
20934: PUSH
20935: LD_INT 2
20937: EQUAL
20938: IFFALSE 20989
// begin j := IsControledBy ( i ) ;
20940: LD_ADDR_VAR 0 7
20944: PUSH
20945: LD_VAR 0 6
20949: PPUSH
20950: CALL_OW 312
20954: ST_TO_ADDR
// if j then
20955: LD_VAR 0 7
20959: IFFALSE 20989
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20961: LD_ADDR_VAR 0 10
20965: PUSH
20966: LD_VAR 0 10
20970: PUSH
20971: LD_VAR 0 7
20975: PPUSH
20976: LD_INT 3
20978: PPUSH
20979: CALL_OW 259
20983: PUSH
20984: LD_INT 3
20986: MUL
20987: MUL
20988: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20989: LD_VAR 0 6
20993: PPUSH
20994: CALL_OW 264
20998: PUSH
20999: LD_INT 5
21001: PUSH
21002: LD_INT 6
21004: PUSH
21005: LD_INT 46
21007: PUSH
21008: LD_INT 44
21010: PUSH
21011: LD_INT 47
21013: PUSH
21014: LD_INT 45
21016: PUSH
21017: LD_INT 28
21019: PUSH
21020: LD_INT 7
21022: PUSH
21023: LD_INT 27
21025: PUSH
21026: LD_INT 29
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: IN
21041: PUSH
21042: LD_VAR 0 1
21046: PPUSH
21047: LD_INT 52
21049: PPUSH
21050: CALL_OW 321
21054: PUSH
21055: LD_INT 2
21057: EQUAL
21058: AND
21059: IFFALSE 21076
// bpoints := bpoints * 1.2 ;
21061: LD_ADDR_VAR 0 10
21065: PUSH
21066: LD_VAR 0 10
21070: PUSH
21071: LD_REAL  1.20000000000000E+0000
21074: MUL
21075: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
21076: LD_VAR 0 6
21080: PPUSH
21081: CALL_OW 264
21085: PUSH
21086: LD_INT 6
21088: PUSH
21089: LD_INT 46
21091: PUSH
21092: LD_INT 47
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: LIST
21099: IN
21100: IFFALSE 21117
// bpoints := bpoints * 1.2 ;
21102: LD_ADDR_VAR 0 10
21106: PUSH
21107: LD_VAR 0 10
21111: PUSH
21112: LD_REAL  1.20000000000000E+0000
21115: MUL
21116: ST_TO_ADDR
// end ; unit_building :
21117: GO 21131
21119: LD_INT 3
21121: DOUBLE
21122: EQUAL
21123: IFTRUE 21127
21125: GO 21130
21127: POP
// ; end ;
21128: GO 21131
21130: POP
// for j = 1 to 3 do
21131: LD_ADDR_VAR 0 7
21135: PUSH
21136: DOUBLE
21137: LD_INT 1
21139: DEC
21140: ST_TO_ADDR
21141: LD_INT 3
21143: PUSH
21144: FOR_TO
21145: IFFALSE 21198
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
21147: LD_ADDR_VAR 0 5
21151: PUSH
21152: LD_VAR 0 5
21156: PPUSH
21157: LD_VAR 0 7
21161: PPUSH
21162: LD_VAR 0 5
21166: PUSH
21167: LD_VAR 0 7
21171: ARRAY
21172: PUSH
21173: LD_VAR 0 9
21177: PUSH
21178: LD_VAR 0 7
21182: ARRAY
21183: PUSH
21184: LD_VAR 0 10
21188: MUL
21189: PLUS
21190: PPUSH
21191: CALL_OW 1
21195: ST_TO_ADDR
21196: GO 21144
21198: POP
21199: POP
// end ;
21200: GO 19683
21202: POP
21203: POP
// result := Replace ( result , 4 , tmp ) ;
21204: LD_ADDR_VAR 0 5
21208: PUSH
21209: LD_VAR 0 5
21213: PPUSH
21214: LD_INT 4
21216: PPUSH
21217: LD_VAR 0 8
21221: PPUSH
21222: CALL_OW 1
21226: ST_TO_ADDR
// end ;
21227: LD_VAR 0 5
21231: RET
// export function DangerAtRange ( unit , range ) ; begin
21232: LD_INT 0
21234: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
21235: LD_ADDR_VAR 0 3
21239: PUSH
21240: LD_VAR 0 1
21244: PPUSH
21245: CALL_OW 255
21249: PPUSH
21250: LD_VAR 0 1
21254: PPUSH
21255: CALL_OW 250
21259: PPUSH
21260: LD_VAR 0 1
21264: PPUSH
21265: CALL_OW 251
21269: PPUSH
21270: LD_VAR 0 2
21274: PPUSH
21275: CALL 19535 0 4
21279: ST_TO_ADDR
// end ;
21280: LD_VAR 0 3
21284: RET
// export function IsExtension ( b ) ; begin
21285: LD_INT 0
21287: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21288: LD_ADDR_VAR 0 2
21292: PUSH
21293: LD_VAR 0 1
21297: PPUSH
21298: CALL_OW 266
21302: PUSH
21303: LD_INT 23
21305: PUSH
21306: LD_INT 20
21308: PUSH
21309: LD_INT 22
21311: PUSH
21312: LD_INT 17
21314: PUSH
21315: LD_INT 24
21317: PUSH
21318: LD_INT 21
21320: PUSH
21321: LD_INT 19
21323: PUSH
21324: LD_INT 16
21326: PUSH
21327: LD_INT 25
21329: PUSH
21330: LD_INT 18
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: IN
21345: ST_TO_ADDR
// end ;
21346: LD_VAR 0 2
21350: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
21351: LD_INT 0
21353: PPUSH
21354: PPUSH
21355: PPUSH
// result := [ ] ;
21356: LD_ADDR_VAR 0 2
21360: PUSH
21361: EMPTY
21362: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
21363: LD_ADDR_VAR 0 3
21367: PUSH
21368: LD_INT 21
21370: PUSH
21371: LD_INT 3
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PPUSH
21378: CALL_OW 69
21382: ST_TO_ADDR
// if not tmp then
21383: LD_VAR 0 3
21387: NOT
21388: IFFALSE 21392
// exit ;
21390: GO 21442
// for i in tmp do
21392: LD_ADDR_VAR 0 4
21396: PUSH
21397: LD_VAR 0 3
21401: PUSH
21402: FOR_IN
21403: IFFALSE 21440
// if GetBase ( i ) = base then
21405: LD_VAR 0 4
21409: PPUSH
21410: CALL_OW 274
21414: PUSH
21415: LD_VAR 0 1
21419: EQUAL
21420: IFFALSE 21438
// result := result ^ i ;
21422: LD_ADDR_VAR 0 2
21426: PUSH
21427: LD_VAR 0 2
21431: PUSH
21432: LD_VAR 0 4
21436: ADD
21437: ST_TO_ADDR
21438: GO 21402
21440: POP
21441: POP
// end ;
21442: LD_VAR 0 2
21446: RET
// export function ComComplete ( unit , b ) ; var i ; begin
21447: LD_INT 0
21449: PPUSH
21450: PPUSH
// if BuildingStatus ( b ) = bs_build then
21451: LD_VAR 0 2
21455: PPUSH
21456: CALL_OW 461
21460: PUSH
21461: LD_INT 1
21463: EQUAL
21464: IFFALSE 21524
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21466: LD_VAR 0 1
21470: PPUSH
21471: LD_STRING h
21473: PUSH
21474: LD_VAR 0 2
21478: PPUSH
21479: CALL_OW 250
21483: PUSH
21484: LD_VAR 0 2
21488: PPUSH
21489: CALL_OW 251
21493: PUSH
21494: LD_VAR 0 2
21498: PUSH
21499: LD_INT 0
21501: PUSH
21502: LD_INT 0
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: PUSH
21517: EMPTY
21518: LIST
21519: PPUSH
21520: CALL_OW 446
// end ;
21524: LD_VAR 0 3
21528: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21529: LD_INT 0
21531: PPUSH
21532: PPUSH
21533: PPUSH
21534: PPUSH
21535: PPUSH
21536: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
21537: LD_VAR 0 1
21541: NOT
21542: PUSH
21543: LD_VAR 0 1
21547: PPUSH
21548: CALL_OW 263
21552: PUSH
21553: LD_INT 2
21555: EQUAL
21556: NOT
21557: OR
21558: IFFALSE 21562
// exit ;
21560: GO 21878
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21562: LD_ADDR_VAR 0 6
21566: PUSH
21567: LD_INT 22
21569: PUSH
21570: LD_VAR 0 1
21574: PPUSH
21575: CALL_OW 255
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 2
21586: PUSH
21587: LD_INT 30
21589: PUSH
21590: LD_INT 36
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 34
21599: PUSH
21600: LD_INT 31
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: LIST
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PPUSH
21616: CALL_OW 69
21620: ST_TO_ADDR
// if not tmp then
21621: LD_VAR 0 6
21625: NOT
21626: IFFALSE 21630
// exit ;
21628: GO 21878
// result := [ ] ;
21630: LD_ADDR_VAR 0 2
21634: PUSH
21635: EMPTY
21636: ST_TO_ADDR
// for i in tmp do
21637: LD_ADDR_VAR 0 3
21641: PUSH
21642: LD_VAR 0 6
21646: PUSH
21647: FOR_IN
21648: IFFALSE 21719
// begin t := UnitsInside ( i ) ;
21650: LD_ADDR_VAR 0 4
21654: PUSH
21655: LD_VAR 0 3
21659: PPUSH
21660: CALL_OW 313
21664: ST_TO_ADDR
// if t then
21665: LD_VAR 0 4
21669: IFFALSE 21717
// for j in t do
21671: LD_ADDR_VAR 0 7
21675: PUSH
21676: LD_VAR 0 4
21680: PUSH
21681: FOR_IN
21682: IFFALSE 21715
// result := Insert ( result , result + 1 , j ) ;
21684: LD_ADDR_VAR 0 2
21688: PUSH
21689: LD_VAR 0 2
21693: PPUSH
21694: LD_VAR 0 2
21698: PUSH
21699: LD_INT 1
21701: PLUS
21702: PPUSH
21703: LD_VAR 0 7
21707: PPUSH
21708: CALL_OW 2
21712: ST_TO_ADDR
21713: GO 21681
21715: POP
21716: POP
// end ;
21717: GO 21647
21719: POP
21720: POP
// if not result then
21721: LD_VAR 0 2
21725: NOT
21726: IFFALSE 21730
// exit ;
21728: GO 21878
// mech := result [ 1 ] ;
21730: LD_ADDR_VAR 0 5
21734: PUSH
21735: LD_VAR 0 2
21739: PUSH
21740: LD_INT 1
21742: ARRAY
21743: ST_TO_ADDR
// if result > 1 then
21744: LD_VAR 0 2
21748: PUSH
21749: LD_INT 1
21751: GREATER
21752: IFFALSE 21864
// for i = 2 to result do
21754: LD_ADDR_VAR 0 3
21758: PUSH
21759: DOUBLE
21760: LD_INT 2
21762: DEC
21763: ST_TO_ADDR
21764: LD_VAR 0 2
21768: PUSH
21769: FOR_TO
21770: IFFALSE 21862
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21772: LD_ADDR_VAR 0 4
21776: PUSH
21777: LD_VAR 0 2
21781: PUSH
21782: LD_VAR 0 3
21786: ARRAY
21787: PPUSH
21788: LD_INT 3
21790: PPUSH
21791: CALL_OW 259
21795: PUSH
21796: LD_VAR 0 2
21800: PUSH
21801: LD_VAR 0 3
21805: ARRAY
21806: PPUSH
21807: CALL_OW 432
21811: MINUS
21812: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21813: LD_VAR 0 4
21817: PUSH
21818: LD_VAR 0 5
21822: PPUSH
21823: LD_INT 3
21825: PPUSH
21826: CALL_OW 259
21830: PUSH
21831: LD_VAR 0 5
21835: PPUSH
21836: CALL_OW 432
21840: MINUS
21841: GREATEREQUAL
21842: IFFALSE 21860
// mech := result [ i ] ;
21844: LD_ADDR_VAR 0 5
21848: PUSH
21849: LD_VAR 0 2
21853: PUSH
21854: LD_VAR 0 3
21858: ARRAY
21859: ST_TO_ADDR
// end ;
21860: GO 21769
21862: POP
21863: POP
// ComLinkTo ( vehicle , mech ) ;
21864: LD_VAR 0 1
21868: PPUSH
21869: LD_VAR 0 5
21873: PPUSH
21874: CALL_OW 135
// end ;
21878: LD_VAR 0 2
21882: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
21883: LD_INT 0
21885: PPUSH
21886: PPUSH
21887: PPUSH
21888: PPUSH
21889: PPUSH
21890: PPUSH
21891: PPUSH
21892: PPUSH
21893: PPUSH
21894: PPUSH
21895: PPUSH
21896: PPUSH
// result := [ ] ;
21897: LD_ADDR_VAR 0 6
21901: PUSH
21902: EMPTY
21903: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21904: LD_VAR 0 1
21908: PPUSH
21909: CALL_OW 266
21913: PUSH
21914: LD_INT 0
21916: PUSH
21917: LD_INT 1
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: IN
21924: NOT
21925: IFFALSE 21929
// exit ;
21927: GO 23338
// if name then
21929: LD_VAR 0 2
21933: IFFALSE 21949
// SetBName ( base_dep , name ) ;
21935: LD_VAR 0 1
21939: PPUSH
21940: LD_VAR 0 2
21944: PPUSH
21945: CALL_OW 500
// base := GetBase ( base_dep ) ;
21949: LD_ADDR_VAR 0 14
21953: PUSH
21954: LD_VAR 0 1
21958: PPUSH
21959: CALL_OW 274
21963: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21964: LD_ADDR_VAR 0 15
21968: PUSH
21969: LD_VAR 0 1
21973: PPUSH
21974: CALL_OW 255
21978: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21979: LD_ADDR_VAR 0 16
21983: PUSH
21984: LD_VAR 0 1
21988: PPUSH
21989: CALL_OW 248
21993: ST_TO_ADDR
// if sources then
21994: LD_VAR 0 4
21998: IFFALSE 22045
// for i = 1 to 3 do
22000: LD_ADDR_VAR 0 7
22004: PUSH
22005: DOUBLE
22006: LD_INT 1
22008: DEC
22009: ST_TO_ADDR
22010: LD_INT 3
22012: PUSH
22013: FOR_TO
22014: IFFALSE 22043
// AddResourceType ( base , i , sources [ i ] ) ;
22016: LD_VAR 0 14
22020: PPUSH
22021: LD_VAR 0 7
22025: PPUSH
22026: LD_VAR 0 4
22030: PUSH
22031: LD_VAR 0 7
22035: ARRAY
22036: PPUSH
22037: CALL_OW 276
22041: GO 22013
22043: POP
22044: POP
// buildings := GetBaseBuildings ( base ) ;
22045: LD_ADDR_VAR 0 17
22049: PUSH
22050: LD_VAR 0 14
22054: PPUSH
22055: CALL 21351 0 1
22059: ST_TO_ADDR
// InitHc ;
22060: CALL_OW 19
// InitUc ;
22064: CALL_OW 18
// uc_side := side ;
22068: LD_ADDR_OWVAR 20
22072: PUSH
22073: LD_VAR 0 15
22077: ST_TO_ADDR
// uc_nation := nation ;
22078: LD_ADDR_OWVAR 21
22082: PUSH
22083: LD_VAR 0 16
22087: ST_TO_ADDR
// if buildings then
22088: LD_VAR 0 17
22092: IFFALSE 23197
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22094: LD_VAR 0 17
22098: PPUSH
22099: LD_INT 2
22101: PUSH
22102: LD_INT 30
22104: PUSH
22105: LD_INT 32
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 30
22114: PUSH
22115: LD_INT 33
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: LIST
22126: PPUSH
22127: CALL_OW 72
22131: IFFALSE 22214
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22133: LD_ADDR_VAR 0 7
22137: PUSH
22138: LD_VAR 0 17
22142: PPUSH
22143: LD_INT 2
22145: PUSH
22146: LD_INT 30
22148: PUSH
22149: LD_INT 32
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 30
22158: PUSH
22159: LD_INT 33
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: LIST
22170: PPUSH
22171: CALL_OW 72
22175: PUSH
22176: FOR_IN
22177: IFFALSE 22212
// begin if not GetBWeapon ( i ) then
22179: LD_VAR 0 7
22183: PPUSH
22184: CALL_OW 269
22188: NOT
22189: IFFALSE 22210
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
22191: LD_VAR 0 7
22195: PPUSH
22196: LD_VAR 0 7
22200: PPUSH
22201: CALL 23343 0 1
22205: PPUSH
22206: CALL_OW 431
// end ;
22210: GO 22176
22212: POP
22213: POP
// end ; for i = 1 to personel do
22214: LD_ADDR_VAR 0 7
22218: PUSH
22219: DOUBLE
22220: LD_INT 1
22222: DEC
22223: ST_TO_ADDR
22224: LD_VAR 0 5
22228: PUSH
22229: FOR_TO
22230: IFFALSE 23177
// begin if i > 4 then
22232: LD_VAR 0 7
22236: PUSH
22237: LD_INT 4
22239: GREATER
22240: IFFALSE 22244
// break ;
22242: GO 23177
// case i of 1 :
22244: LD_VAR 0 7
22248: PUSH
22249: LD_INT 1
22251: DOUBLE
22252: EQUAL
22253: IFTRUE 22257
22255: GO 22330
22257: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22258: LD_ADDR_VAR 0 11
22262: PUSH
22263: LD_VAR 0 17
22267: PPUSH
22268: LD_INT 22
22270: PUSH
22271: LD_VAR 0 15
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 2
22282: PUSH
22283: LD_INT 30
22285: PUSH
22286: LD_INT 32
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 30
22295: PUSH
22296: LD_INT 4
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 30
22305: PUSH
22306: LD_INT 5
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PPUSH
22323: CALL_OW 72
22327: ST_TO_ADDR
22328: GO 22552
22330: LD_INT 2
22332: DOUBLE
22333: EQUAL
22334: IFTRUE 22338
22336: GO 22400
22338: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22339: LD_ADDR_VAR 0 11
22343: PUSH
22344: LD_VAR 0 17
22348: PPUSH
22349: LD_INT 22
22351: PUSH
22352: LD_VAR 0 15
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 2
22363: PUSH
22364: LD_INT 30
22366: PUSH
22367: LD_INT 0
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 30
22376: PUSH
22377: LD_INT 1
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PPUSH
22393: CALL_OW 72
22397: ST_TO_ADDR
22398: GO 22552
22400: LD_INT 3
22402: DOUBLE
22403: EQUAL
22404: IFTRUE 22408
22406: GO 22470
22408: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22409: LD_ADDR_VAR 0 11
22413: PUSH
22414: LD_VAR 0 17
22418: PPUSH
22419: LD_INT 22
22421: PUSH
22422: LD_VAR 0 15
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 2
22433: PUSH
22434: LD_INT 30
22436: PUSH
22437: LD_INT 2
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 30
22446: PUSH
22447: LD_INT 3
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: LIST
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PPUSH
22463: CALL_OW 72
22467: ST_TO_ADDR
22468: GO 22552
22470: LD_INT 4
22472: DOUBLE
22473: EQUAL
22474: IFTRUE 22478
22476: GO 22551
22478: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22479: LD_ADDR_VAR 0 11
22483: PUSH
22484: LD_VAR 0 17
22488: PPUSH
22489: LD_INT 22
22491: PUSH
22492: LD_VAR 0 15
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 2
22503: PUSH
22504: LD_INT 30
22506: PUSH
22507: LD_INT 6
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 30
22516: PUSH
22517: LD_INT 7
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 30
22526: PUSH
22527: LD_INT 8
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PPUSH
22544: CALL_OW 72
22548: ST_TO_ADDR
22549: GO 22552
22551: POP
// if not f then
22552: LD_VAR 0 11
22556: NOT
22557: IFFALSE 22561
// continue ;
22559: GO 22229
// x := personel [ i ] ;
22561: LD_ADDR_VAR 0 12
22565: PUSH
22566: LD_VAR 0 5
22570: PUSH
22571: LD_VAR 0 7
22575: ARRAY
22576: ST_TO_ADDR
// if x = - 1 then
22577: LD_VAR 0 12
22581: PUSH
22582: LD_INT 1
22584: NEG
22585: EQUAL
22586: IFFALSE 22795
// begin for j in f do
22588: LD_ADDR_VAR 0 8
22592: PUSH
22593: LD_VAR 0 11
22597: PUSH
22598: FOR_IN
22599: IFFALSE 22791
// repeat InitHc ;
22601: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22605: LD_VAR 0 8
22609: PPUSH
22610: CALL_OW 266
22614: PUSH
22615: LD_INT 5
22617: EQUAL
22618: IFFALSE 22688
// begin if UnitsInside ( j ) < 3 then
22620: LD_VAR 0 8
22624: PPUSH
22625: CALL_OW 313
22629: PUSH
22630: LD_INT 3
22632: LESS
22633: IFFALSE 22669
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22635: LD_INT 0
22637: PPUSH
22638: LD_INT 5
22640: PUSH
22641: LD_INT 8
22643: PUSH
22644: LD_INT 9
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: LIST
22651: PUSH
22652: LD_VAR 0 16
22656: ARRAY
22657: PPUSH
22658: LD_VAR 0 3
22662: PPUSH
22663: CALL_OW 380
22667: GO 22686
// PrepareHuman ( false , i , skill ) ;
22669: LD_INT 0
22671: PPUSH
22672: LD_VAR 0 7
22676: PPUSH
22677: LD_VAR 0 3
22681: PPUSH
22682: CALL_OW 380
// end else
22686: GO 22705
// PrepareHuman ( false , i , skill ) ;
22688: LD_INT 0
22690: PPUSH
22691: LD_VAR 0 7
22695: PPUSH
22696: LD_VAR 0 3
22700: PPUSH
22701: CALL_OW 380
// un := CreateHuman ;
22705: LD_ADDR_VAR 0 13
22709: PUSH
22710: CALL_OW 44
22714: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22715: LD_ADDR_VAR 0 6
22719: PUSH
22720: LD_VAR 0 6
22724: PPUSH
22725: LD_INT 1
22727: PPUSH
22728: LD_VAR 0 13
22732: PPUSH
22733: CALL_OW 2
22737: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22738: LD_VAR 0 13
22742: PPUSH
22743: LD_VAR 0 8
22747: PPUSH
22748: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22752: LD_VAR 0 8
22756: PPUSH
22757: CALL_OW 313
22761: PUSH
22762: LD_INT 6
22764: EQUAL
22765: PUSH
22766: LD_VAR 0 8
22770: PPUSH
22771: CALL_OW 266
22775: PUSH
22776: LD_INT 32
22778: PUSH
22779: LD_INT 31
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: IN
22786: OR
22787: IFFALSE 22601
22789: GO 22598
22791: POP
22792: POP
// end else
22793: GO 23175
// for j = 1 to x do
22795: LD_ADDR_VAR 0 8
22799: PUSH
22800: DOUBLE
22801: LD_INT 1
22803: DEC
22804: ST_TO_ADDR
22805: LD_VAR 0 12
22809: PUSH
22810: FOR_TO
22811: IFFALSE 23173
// begin InitHc ;
22813: CALL_OW 19
// if not f then
22817: LD_VAR 0 11
22821: NOT
22822: IFFALSE 22911
// begin PrepareHuman ( false , i , skill ) ;
22824: LD_INT 0
22826: PPUSH
22827: LD_VAR 0 7
22831: PPUSH
22832: LD_VAR 0 3
22836: PPUSH
22837: CALL_OW 380
// un := CreateHuman ;
22841: LD_ADDR_VAR 0 13
22845: PUSH
22846: CALL_OW 44
22850: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22851: LD_ADDR_VAR 0 6
22855: PUSH
22856: LD_VAR 0 6
22860: PPUSH
22861: LD_INT 1
22863: PPUSH
22864: LD_VAR 0 13
22868: PPUSH
22869: CALL_OW 2
22873: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22874: LD_VAR 0 13
22878: PPUSH
22879: LD_VAR 0 1
22883: PPUSH
22884: CALL_OW 250
22888: PPUSH
22889: LD_VAR 0 1
22893: PPUSH
22894: CALL_OW 251
22898: PPUSH
22899: LD_INT 10
22901: PPUSH
22902: LD_INT 0
22904: PPUSH
22905: CALL_OW 50
// continue ;
22909: GO 22810
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22911: LD_VAR 0 11
22915: PUSH
22916: LD_INT 1
22918: ARRAY
22919: PPUSH
22920: CALL_OW 313
22924: PUSH
22925: LD_VAR 0 11
22929: PUSH
22930: LD_INT 1
22932: ARRAY
22933: PPUSH
22934: CALL_OW 266
22938: PUSH
22939: LD_INT 32
22941: PUSH
22942: LD_INT 31
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: IN
22949: AND
22950: PUSH
22951: LD_VAR 0 11
22955: PUSH
22956: LD_INT 1
22958: ARRAY
22959: PPUSH
22960: CALL_OW 313
22964: PUSH
22965: LD_INT 6
22967: EQUAL
22968: OR
22969: IFFALSE 22989
// f := Delete ( f , 1 ) ;
22971: LD_ADDR_VAR 0 11
22975: PUSH
22976: LD_VAR 0 11
22980: PPUSH
22981: LD_INT 1
22983: PPUSH
22984: CALL_OW 3
22988: ST_TO_ADDR
// if not f then
22989: LD_VAR 0 11
22993: NOT
22994: IFFALSE 23012
// begin x := x + 2 ;
22996: LD_ADDR_VAR 0 12
23000: PUSH
23001: LD_VAR 0 12
23005: PUSH
23006: LD_INT 2
23008: PLUS
23009: ST_TO_ADDR
// continue ;
23010: GO 22810
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23012: LD_VAR 0 11
23016: PUSH
23017: LD_INT 1
23019: ARRAY
23020: PPUSH
23021: CALL_OW 266
23025: PUSH
23026: LD_INT 5
23028: EQUAL
23029: IFFALSE 23103
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23031: LD_VAR 0 11
23035: PUSH
23036: LD_INT 1
23038: ARRAY
23039: PPUSH
23040: CALL_OW 313
23044: PUSH
23045: LD_INT 3
23047: LESS
23048: IFFALSE 23084
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23050: LD_INT 0
23052: PPUSH
23053: LD_INT 5
23055: PUSH
23056: LD_INT 8
23058: PUSH
23059: LD_INT 9
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: PUSH
23067: LD_VAR 0 16
23071: ARRAY
23072: PPUSH
23073: LD_VAR 0 3
23077: PPUSH
23078: CALL_OW 380
23082: GO 23101
// PrepareHuman ( false , i , skill ) ;
23084: LD_INT 0
23086: PPUSH
23087: LD_VAR 0 7
23091: PPUSH
23092: LD_VAR 0 3
23096: PPUSH
23097: CALL_OW 380
// end else
23101: GO 23120
// PrepareHuman ( false , i , skill ) ;
23103: LD_INT 0
23105: PPUSH
23106: LD_VAR 0 7
23110: PPUSH
23111: LD_VAR 0 3
23115: PPUSH
23116: CALL_OW 380
// un := CreateHuman ;
23120: LD_ADDR_VAR 0 13
23124: PUSH
23125: CALL_OW 44
23129: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23130: LD_ADDR_VAR 0 6
23134: PUSH
23135: LD_VAR 0 6
23139: PPUSH
23140: LD_INT 1
23142: PPUSH
23143: LD_VAR 0 13
23147: PPUSH
23148: CALL_OW 2
23152: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23153: LD_VAR 0 13
23157: PPUSH
23158: LD_VAR 0 11
23162: PUSH
23163: LD_INT 1
23165: ARRAY
23166: PPUSH
23167: CALL_OW 52
// end ;
23171: GO 22810
23173: POP
23174: POP
// end ;
23175: GO 22229
23177: POP
23178: POP
// result := result ^ buildings ;
23179: LD_ADDR_VAR 0 6
23183: PUSH
23184: LD_VAR 0 6
23188: PUSH
23189: LD_VAR 0 17
23193: ADD
23194: ST_TO_ADDR
// end else
23195: GO 23338
// begin for i = 1 to personel do
23197: LD_ADDR_VAR 0 7
23201: PUSH
23202: DOUBLE
23203: LD_INT 1
23205: DEC
23206: ST_TO_ADDR
23207: LD_VAR 0 5
23211: PUSH
23212: FOR_TO
23213: IFFALSE 23336
// begin if i > 4 then
23215: LD_VAR 0 7
23219: PUSH
23220: LD_INT 4
23222: GREATER
23223: IFFALSE 23227
// break ;
23225: GO 23336
// x := personel [ i ] ;
23227: LD_ADDR_VAR 0 12
23231: PUSH
23232: LD_VAR 0 5
23236: PUSH
23237: LD_VAR 0 7
23241: ARRAY
23242: ST_TO_ADDR
// if x = - 1 then
23243: LD_VAR 0 12
23247: PUSH
23248: LD_INT 1
23250: NEG
23251: EQUAL
23252: IFFALSE 23256
// continue ;
23254: GO 23212
// PrepareHuman ( false , i , skill ) ;
23256: LD_INT 0
23258: PPUSH
23259: LD_VAR 0 7
23263: PPUSH
23264: LD_VAR 0 3
23268: PPUSH
23269: CALL_OW 380
// un := CreateHuman ;
23273: LD_ADDR_VAR 0 13
23277: PUSH
23278: CALL_OW 44
23282: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23283: LD_VAR 0 13
23287: PPUSH
23288: LD_VAR 0 1
23292: PPUSH
23293: CALL_OW 250
23297: PPUSH
23298: LD_VAR 0 1
23302: PPUSH
23303: CALL_OW 251
23307: PPUSH
23308: LD_INT 10
23310: PPUSH
23311: LD_INT 0
23313: PPUSH
23314: CALL_OW 50
// result := result ^ un ;
23318: LD_ADDR_VAR 0 6
23322: PUSH
23323: LD_VAR 0 6
23327: PUSH
23328: LD_VAR 0 13
23332: ADD
23333: ST_TO_ADDR
// end ;
23334: GO 23212
23336: POP
23337: POP
// end ; end ;
23338: LD_VAR 0 6
23342: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23343: LD_INT 0
23345: PPUSH
23346: PPUSH
23347: PPUSH
23348: PPUSH
23349: PPUSH
23350: PPUSH
23351: PPUSH
23352: PPUSH
23353: PPUSH
23354: PPUSH
23355: PPUSH
23356: PPUSH
23357: PPUSH
23358: PPUSH
23359: PPUSH
23360: PPUSH
// result := false ;
23361: LD_ADDR_VAR 0 2
23365: PUSH
23366: LD_INT 0
23368: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23369: LD_VAR 0 1
23373: NOT
23374: PUSH
23375: LD_VAR 0 1
23379: PPUSH
23380: CALL_OW 266
23384: PUSH
23385: LD_INT 32
23387: PUSH
23388: LD_INT 33
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: IN
23395: NOT
23396: OR
23397: IFFALSE 23401
// exit ;
23399: GO 24634
// nat := GetNation ( tower ) ;
23401: LD_ADDR_VAR 0 11
23405: PUSH
23406: LD_VAR 0 1
23410: PPUSH
23411: CALL_OW 248
23415: ST_TO_ADDR
// side := GetSide ( tower ) ;
23416: LD_ADDR_VAR 0 15
23420: PUSH
23421: LD_VAR 0 1
23425: PPUSH
23426: CALL_OW 255
23430: ST_TO_ADDR
// x := GetX ( tower ) ;
23431: LD_ADDR_VAR 0 9
23435: PUSH
23436: LD_VAR 0 1
23440: PPUSH
23441: CALL_OW 250
23445: ST_TO_ADDR
// y := GetY ( tower ) ;
23446: LD_ADDR_VAR 0 10
23450: PUSH
23451: LD_VAR 0 1
23455: PPUSH
23456: CALL_OW 251
23460: ST_TO_ADDR
// if not x or not y then
23461: LD_VAR 0 9
23465: NOT
23466: PUSH
23467: LD_VAR 0 10
23471: NOT
23472: OR
23473: IFFALSE 23477
// exit ;
23475: GO 24634
// weapon := 0 ;
23477: LD_ADDR_VAR 0 17
23481: PUSH
23482: LD_INT 0
23484: ST_TO_ADDR
// fac_list := [ ] ;
23485: LD_ADDR_VAR 0 16
23489: PUSH
23490: EMPTY
23491: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
23492: LD_ADDR_VAR 0 5
23496: PUSH
23497: LD_VAR 0 1
23501: PPUSH
23502: CALL_OW 274
23506: PPUSH
23507: CALL 21351 0 1
23511: PPUSH
23512: LD_INT 30
23514: PUSH
23515: LD_INT 3
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PPUSH
23522: CALL_OW 72
23526: ST_TO_ADDR
// if not factories then
23527: LD_VAR 0 5
23531: NOT
23532: IFFALSE 23536
// exit ;
23534: GO 24634
// for i in factories do
23536: LD_ADDR_VAR 0 7
23540: PUSH
23541: LD_VAR 0 5
23545: PUSH
23546: FOR_IN
23547: IFFALSE 23572
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23549: LD_ADDR_VAR 0 16
23553: PUSH
23554: LD_VAR 0 16
23558: PUSH
23559: LD_VAR 0 7
23563: PPUSH
23564: CALL_OW 478
23568: UNION
23569: ST_TO_ADDR
23570: GO 23546
23572: POP
23573: POP
// if not fac_list then
23574: LD_VAR 0 16
23578: NOT
23579: IFFALSE 23583
// exit ;
23581: GO 24634
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23583: LD_ADDR_VAR 0 4
23587: PUSH
23588: LD_INT 4
23590: PUSH
23591: LD_INT 5
23593: PUSH
23594: LD_INT 9
23596: PUSH
23597: LD_INT 10
23599: PUSH
23600: LD_INT 6
23602: PUSH
23603: LD_INT 7
23605: PUSH
23606: LD_INT 11
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 27
23620: PUSH
23621: LD_INT 28
23623: PUSH
23624: LD_INT 26
23626: PUSH
23627: LD_INT 30
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 43
23638: PUSH
23639: LD_INT 44
23641: PUSH
23642: LD_INT 46
23644: PUSH
23645: LD_INT 45
23647: PUSH
23648: LD_INT 47
23650: PUSH
23651: LD_INT 49
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: LIST
23666: PUSH
23667: LD_VAR 0 11
23671: ARRAY
23672: ST_TO_ADDR
// for i in list do
23673: LD_ADDR_VAR 0 7
23677: PUSH
23678: LD_VAR 0 4
23682: PUSH
23683: FOR_IN
23684: IFFALSE 23717
// if not i in fac_list then
23686: LD_VAR 0 7
23690: PUSH
23691: LD_VAR 0 16
23695: IN
23696: NOT
23697: IFFALSE 23715
// list := list diff i ;
23699: LD_ADDR_VAR 0 4
23703: PUSH
23704: LD_VAR 0 4
23708: PUSH
23709: LD_VAR 0 7
23713: DIFF
23714: ST_TO_ADDR
23715: GO 23683
23717: POP
23718: POP
// if not list then
23719: LD_VAR 0 4
23723: NOT
23724: IFFALSE 23728
// exit ;
23726: GO 24634
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23728: LD_VAR 0 11
23732: PUSH
23733: LD_INT 3
23735: EQUAL
23736: PUSH
23737: LD_INT 49
23739: PUSH
23740: LD_VAR 0 4
23744: IN
23745: AND
23746: PUSH
23747: LD_INT 31
23749: PPUSH
23750: LD_VAR 0 15
23754: PPUSH
23755: CALL_OW 321
23759: PUSH
23760: LD_INT 2
23762: EQUAL
23763: AND
23764: IFFALSE 23824
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23766: LD_INT 22
23768: PUSH
23769: LD_VAR 0 15
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 35
23780: PUSH
23781: LD_INT 49
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 91
23790: PUSH
23791: LD_VAR 0 1
23795: PUSH
23796: LD_INT 10
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: LIST
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: LIST
23808: PPUSH
23809: CALL_OW 69
23813: NOT
23814: IFFALSE 23824
// weapon := ru_time_lapser ;
23816: LD_ADDR_VAR 0 17
23820: PUSH
23821: LD_INT 49
23823: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23824: LD_VAR 0 11
23828: PUSH
23829: LD_INT 1
23831: PUSH
23832: LD_INT 2
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: IN
23839: PUSH
23840: LD_INT 11
23842: PUSH
23843: LD_VAR 0 4
23847: IN
23848: PUSH
23849: LD_INT 30
23851: PUSH
23852: LD_VAR 0 4
23856: IN
23857: OR
23858: AND
23859: PUSH
23860: LD_INT 6
23862: PPUSH
23863: LD_VAR 0 15
23867: PPUSH
23868: CALL_OW 321
23872: PUSH
23873: LD_INT 2
23875: EQUAL
23876: AND
23877: IFFALSE 24042
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23879: LD_INT 22
23881: PUSH
23882: LD_VAR 0 15
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 2
23893: PUSH
23894: LD_INT 35
23896: PUSH
23897: LD_INT 11
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 35
23906: PUSH
23907: LD_INT 30
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 91
23921: PUSH
23922: LD_VAR 0 1
23926: PUSH
23927: LD_INT 18
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: PPUSH
23940: CALL_OW 69
23944: NOT
23945: PUSH
23946: LD_INT 22
23948: PUSH
23949: LD_VAR 0 15
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 2
23960: PUSH
23961: LD_INT 30
23963: PUSH
23964: LD_INT 32
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 30
23973: PUSH
23974: LD_INT 33
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 91
23988: PUSH
23989: LD_VAR 0 1
23993: PUSH
23994: LD_INT 12
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: LIST
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: LIST
24006: PUSH
24007: EMPTY
24008: LIST
24009: PPUSH
24010: CALL_OW 69
24014: PUSH
24015: LD_INT 2
24017: GREATER
24018: AND
24019: IFFALSE 24042
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24021: LD_ADDR_VAR 0 17
24025: PUSH
24026: LD_INT 11
24028: PUSH
24029: LD_INT 30
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_VAR 0 11
24040: ARRAY
24041: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24042: LD_VAR 0 17
24046: NOT
24047: PUSH
24048: LD_INT 40
24050: PPUSH
24051: LD_VAR 0 15
24055: PPUSH
24056: CALL_OW 321
24060: PUSH
24061: LD_INT 2
24063: EQUAL
24064: AND
24065: PUSH
24066: LD_INT 7
24068: PUSH
24069: LD_VAR 0 4
24073: IN
24074: PUSH
24075: LD_INT 28
24077: PUSH
24078: LD_VAR 0 4
24082: IN
24083: OR
24084: PUSH
24085: LD_INT 45
24087: PUSH
24088: LD_VAR 0 4
24092: IN
24093: OR
24094: AND
24095: IFFALSE 24349
// begin hex := GetHexInfo ( x , y ) ;
24097: LD_ADDR_VAR 0 3
24101: PUSH
24102: LD_VAR 0 9
24106: PPUSH
24107: LD_VAR 0 10
24111: PPUSH
24112: CALL_OW 546
24116: ST_TO_ADDR
// if hex [ 1 ] then
24117: LD_VAR 0 3
24121: PUSH
24122: LD_INT 1
24124: ARRAY
24125: IFFALSE 24129
// exit ;
24127: GO 24634
// height := hex [ 2 ] ;
24129: LD_ADDR_VAR 0 14
24133: PUSH
24134: LD_VAR 0 3
24138: PUSH
24139: LD_INT 2
24141: ARRAY
24142: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24143: LD_ADDR_VAR 0 13
24147: PUSH
24148: LD_INT 0
24150: PUSH
24151: LD_INT 2
24153: PUSH
24154: LD_INT 3
24156: PUSH
24157: LD_INT 5
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: ST_TO_ADDR
// for i in tmp do
24166: LD_ADDR_VAR 0 7
24170: PUSH
24171: LD_VAR 0 13
24175: PUSH
24176: FOR_IN
24177: IFFALSE 24347
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24179: LD_ADDR_VAR 0 8
24183: PUSH
24184: LD_VAR 0 9
24188: PPUSH
24189: LD_VAR 0 7
24193: PPUSH
24194: LD_INT 5
24196: PPUSH
24197: CALL_OW 272
24201: PUSH
24202: LD_VAR 0 10
24206: PPUSH
24207: LD_VAR 0 7
24211: PPUSH
24212: LD_INT 5
24214: PPUSH
24215: CALL_OW 273
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24224: LD_VAR 0 8
24228: PUSH
24229: LD_INT 1
24231: ARRAY
24232: PPUSH
24233: LD_VAR 0 8
24237: PUSH
24238: LD_INT 2
24240: ARRAY
24241: PPUSH
24242: CALL_OW 488
24246: IFFALSE 24345
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24248: LD_ADDR_VAR 0 3
24252: PUSH
24253: LD_VAR 0 8
24257: PUSH
24258: LD_INT 1
24260: ARRAY
24261: PPUSH
24262: LD_VAR 0 8
24266: PUSH
24267: LD_INT 2
24269: ARRAY
24270: PPUSH
24271: CALL_OW 546
24275: ST_TO_ADDR
// if hex [ 1 ] then
24276: LD_VAR 0 3
24280: PUSH
24281: LD_INT 1
24283: ARRAY
24284: IFFALSE 24288
// continue ;
24286: GO 24176
// h := hex [ 2 ] ;
24288: LD_ADDR_VAR 0 12
24292: PUSH
24293: LD_VAR 0 3
24297: PUSH
24298: LD_INT 2
24300: ARRAY
24301: ST_TO_ADDR
// if h + 7 < height then
24302: LD_VAR 0 12
24306: PUSH
24307: LD_INT 7
24309: PLUS
24310: PUSH
24311: LD_VAR 0 14
24315: LESS
24316: IFFALSE 24345
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24318: LD_ADDR_VAR 0 17
24322: PUSH
24323: LD_INT 7
24325: PUSH
24326: LD_INT 28
24328: PUSH
24329: LD_INT 45
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: LIST
24336: PUSH
24337: LD_VAR 0 11
24341: ARRAY
24342: ST_TO_ADDR
// break ;
24343: GO 24347
// end ; end ; end ;
24345: GO 24176
24347: POP
24348: POP
// end ; if not weapon then
24349: LD_VAR 0 17
24353: NOT
24354: IFFALSE 24516
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24356: LD_ADDR_VAR 0 4
24360: PUSH
24361: LD_VAR 0 4
24365: PUSH
24366: LD_INT 11
24368: PUSH
24369: LD_INT 30
24371: PUSH
24372: LD_INT 49
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: LIST
24379: DIFF
24380: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
24381: LD_ADDR_VAR 0 17
24385: PUSH
24386: LD_VAR 0 4
24390: PUSH
24391: LD_INT 1
24393: PPUSH
24394: LD_VAR 0 4
24398: PPUSH
24399: CALL_OW 12
24403: ARRAY
24404: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
24405: LD_ADDR_VAR 0 13
24409: PUSH
24410: LD_INT 22
24412: PUSH
24413: LD_VAR 0 15
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 3
24424: PUSH
24425: LD_INT 35
24427: PUSH
24428: LD_INT 0
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PPUSH
24443: CALL_OW 69
24447: ST_TO_ADDR
// for i in tmp do
24448: LD_ADDR_VAR 0 7
24452: PUSH
24453: LD_VAR 0 13
24457: PUSH
24458: FOR_IN
24459: IFFALSE 24484
// list := list diff GetBWeapon ( i ) ;
24461: LD_ADDR_VAR 0 4
24465: PUSH
24466: LD_VAR 0 4
24470: PUSH
24471: LD_VAR 0 7
24475: PPUSH
24476: CALL_OW 269
24480: DIFF
24481: ST_TO_ADDR
24482: GO 24458
24484: POP
24485: POP
// if list then
24486: LD_VAR 0 4
24490: IFFALSE 24516
// weapon := list [ rand ( 1 , list ) ] ;
24492: LD_ADDR_VAR 0 17
24496: PUSH
24497: LD_VAR 0 4
24501: PUSH
24502: LD_INT 1
24504: PPUSH
24505: LD_VAR 0 4
24509: PPUSH
24510: CALL_OW 12
24514: ARRAY
24515: ST_TO_ADDR
// end ; if weapon then
24516: LD_VAR 0 17
24520: IFFALSE 24634
// begin tmp := CostOfWeapon ( weapon ) ;
24522: LD_ADDR_VAR 0 13
24526: PUSH
24527: LD_VAR 0 17
24531: PPUSH
24532: CALL_OW 451
24536: ST_TO_ADDR
// j := GetBase ( tower ) ;
24537: LD_ADDR_VAR 0 8
24541: PUSH
24542: LD_VAR 0 1
24546: PPUSH
24547: CALL_OW 274
24551: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24552: LD_VAR 0 8
24556: PPUSH
24557: LD_INT 1
24559: PPUSH
24560: CALL_OW 275
24564: PUSH
24565: LD_VAR 0 13
24569: PUSH
24570: LD_INT 1
24572: ARRAY
24573: GREATEREQUAL
24574: PUSH
24575: LD_VAR 0 8
24579: PPUSH
24580: LD_INT 2
24582: PPUSH
24583: CALL_OW 275
24587: PUSH
24588: LD_VAR 0 13
24592: PUSH
24593: LD_INT 2
24595: ARRAY
24596: GREATEREQUAL
24597: AND
24598: PUSH
24599: LD_VAR 0 8
24603: PPUSH
24604: LD_INT 3
24606: PPUSH
24607: CALL_OW 275
24611: PUSH
24612: LD_VAR 0 13
24616: PUSH
24617: LD_INT 3
24619: ARRAY
24620: GREATEREQUAL
24621: AND
24622: IFFALSE 24634
// result := weapon ;
24624: LD_ADDR_VAR 0 2
24628: PUSH
24629: LD_VAR 0 17
24633: ST_TO_ADDR
// end ; end ;
24634: LD_VAR 0 2
24638: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24639: LD_INT 0
24641: PPUSH
24642: PPUSH
// result := true ;
24643: LD_ADDR_VAR 0 3
24647: PUSH
24648: LD_INT 1
24650: ST_TO_ADDR
// if array1 = array2 then
24651: LD_VAR 0 1
24655: PUSH
24656: LD_VAR 0 2
24660: EQUAL
24661: IFFALSE 24721
// begin for i = 1 to array1 do
24663: LD_ADDR_VAR 0 4
24667: PUSH
24668: DOUBLE
24669: LD_INT 1
24671: DEC
24672: ST_TO_ADDR
24673: LD_VAR 0 1
24677: PUSH
24678: FOR_TO
24679: IFFALSE 24717
// if array1 [ i ] <> array2 [ i ] then
24681: LD_VAR 0 1
24685: PUSH
24686: LD_VAR 0 4
24690: ARRAY
24691: PUSH
24692: LD_VAR 0 2
24696: PUSH
24697: LD_VAR 0 4
24701: ARRAY
24702: NONEQUAL
24703: IFFALSE 24715
// begin result := false ;
24705: LD_ADDR_VAR 0 3
24709: PUSH
24710: LD_INT 0
24712: ST_TO_ADDR
// break ;
24713: GO 24717
// end ;
24715: GO 24678
24717: POP
24718: POP
// end else
24719: GO 24729
// result := false ;
24721: LD_ADDR_VAR 0 3
24725: PUSH
24726: LD_INT 0
24728: ST_TO_ADDR
// end ;
24729: LD_VAR 0 3
24733: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24734: LD_INT 0
24736: PPUSH
24737: PPUSH
24738: PPUSH
// pom := GetBase ( fac ) ;
24739: LD_ADDR_VAR 0 5
24743: PUSH
24744: LD_VAR 0 1
24748: PPUSH
24749: CALL_OW 274
24753: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24754: LD_ADDR_VAR 0 4
24758: PUSH
24759: LD_VAR 0 2
24763: PUSH
24764: LD_INT 1
24766: ARRAY
24767: PPUSH
24768: LD_VAR 0 2
24772: PUSH
24773: LD_INT 2
24775: ARRAY
24776: PPUSH
24777: LD_VAR 0 2
24781: PUSH
24782: LD_INT 3
24784: ARRAY
24785: PPUSH
24786: LD_VAR 0 2
24790: PUSH
24791: LD_INT 4
24793: ARRAY
24794: PPUSH
24795: CALL_OW 449
24799: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
24800: LD_VAR 0 5
24804: PPUSH
24805: LD_INT 1
24807: PPUSH
24808: CALL_OW 275
24812: PUSH
24813: LD_VAR 0 4
24817: PUSH
24818: LD_INT 1
24820: ARRAY
24821: GREATEREQUAL
24822: PUSH
24823: LD_VAR 0 5
24827: PPUSH
24828: LD_INT 2
24830: PPUSH
24831: CALL_OW 275
24835: PUSH
24836: LD_VAR 0 4
24840: PUSH
24841: LD_INT 2
24843: ARRAY
24844: GREATEREQUAL
24845: AND
24846: PUSH
24847: LD_VAR 0 5
24851: PPUSH
24852: LD_INT 3
24854: PPUSH
24855: CALL_OW 275
24859: PUSH
24860: LD_VAR 0 4
24864: PUSH
24865: LD_INT 3
24867: ARRAY
24868: GREATEREQUAL
24869: AND
24870: IFFALSE 24882
// result := true else
24872: LD_ADDR_VAR 0 3
24876: PUSH
24877: LD_INT 1
24879: ST_TO_ADDR
24880: GO 24890
// result := false ;
24882: LD_ADDR_VAR 0 3
24886: PUSH
24887: LD_INT 0
24889: ST_TO_ADDR
// end ;
24890: LD_VAR 0 3
24894: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24895: LD_INT 0
24897: PPUSH
24898: PPUSH
24899: PPUSH
24900: PPUSH
// pom := GetBase ( building ) ;
24901: LD_ADDR_VAR 0 3
24905: PUSH
24906: LD_VAR 0 1
24910: PPUSH
24911: CALL_OW 274
24915: ST_TO_ADDR
// if not pom then
24916: LD_VAR 0 3
24920: NOT
24921: IFFALSE 24925
// exit ;
24923: GO 25095
// btype := GetBType ( building ) ;
24925: LD_ADDR_VAR 0 5
24929: PUSH
24930: LD_VAR 0 1
24934: PPUSH
24935: CALL_OW 266
24939: ST_TO_ADDR
// if btype = b_armoury then
24940: LD_VAR 0 5
24944: PUSH
24945: LD_INT 4
24947: EQUAL
24948: IFFALSE 24958
// btype := b_barracks ;
24950: LD_ADDR_VAR 0 5
24954: PUSH
24955: LD_INT 5
24957: ST_TO_ADDR
// if btype = b_depot then
24958: LD_VAR 0 5
24962: PUSH
24963: LD_INT 0
24965: EQUAL
24966: IFFALSE 24976
// btype := b_warehouse ;
24968: LD_ADDR_VAR 0 5
24972: PUSH
24973: LD_INT 1
24975: ST_TO_ADDR
// if btype = b_workshop then
24976: LD_VAR 0 5
24980: PUSH
24981: LD_INT 2
24983: EQUAL
24984: IFFALSE 24994
// btype := b_factory ;
24986: LD_ADDR_VAR 0 5
24990: PUSH
24991: LD_INT 3
24993: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24994: LD_ADDR_VAR 0 4
24998: PUSH
24999: LD_VAR 0 5
25003: PPUSH
25004: LD_VAR 0 1
25008: PPUSH
25009: CALL_OW 248
25013: PPUSH
25014: CALL_OW 450
25018: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25019: LD_ADDR_VAR 0 2
25023: PUSH
25024: LD_VAR 0 3
25028: PPUSH
25029: LD_INT 1
25031: PPUSH
25032: CALL_OW 275
25036: PUSH
25037: LD_VAR 0 4
25041: PUSH
25042: LD_INT 1
25044: ARRAY
25045: GREATEREQUAL
25046: PUSH
25047: LD_VAR 0 3
25051: PPUSH
25052: LD_INT 2
25054: PPUSH
25055: CALL_OW 275
25059: PUSH
25060: LD_VAR 0 4
25064: PUSH
25065: LD_INT 2
25067: ARRAY
25068: GREATEREQUAL
25069: AND
25070: PUSH
25071: LD_VAR 0 3
25075: PPUSH
25076: LD_INT 3
25078: PPUSH
25079: CALL_OW 275
25083: PUSH
25084: LD_VAR 0 4
25088: PUSH
25089: LD_INT 3
25091: ARRAY
25092: GREATEREQUAL
25093: AND
25094: ST_TO_ADDR
// end ;
25095: LD_VAR 0 2
25099: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25100: LD_INT 0
25102: PPUSH
25103: PPUSH
25104: PPUSH
// pom := GetBase ( building ) ;
25105: LD_ADDR_VAR 0 4
25109: PUSH
25110: LD_VAR 0 1
25114: PPUSH
25115: CALL_OW 274
25119: ST_TO_ADDR
// if not pom then
25120: LD_VAR 0 4
25124: NOT
25125: IFFALSE 25129
// exit ;
25127: GO 25230
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25129: LD_ADDR_VAR 0 5
25133: PUSH
25134: LD_VAR 0 2
25138: PPUSH
25139: LD_VAR 0 1
25143: PPUSH
25144: CALL_OW 248
25148: PPUSH
25149: CALL_OW 450
25153: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25154: LD_ADDR_VAR 0 3
25158: PUSH
25159: LD_VAR 0 4
25163: PPUSH
25164: LD_INT 1
25166: PPUSH
25167: CALL_OW 275
25171: PUSH
25172: LD_VAR 0 5
25176: PUSH
25177: LD_INT 1
25179: ARRAY
25180: GREATEREQUAL
25181: PUSH
25182: LD_VAR 0 4
25186: PPUSH
25187: LD_INT 2
25189: PPUSH
25190: CALL_OW 275
25194: PUSH
25195: LD_VAR 0 5
25199: PUSH
25200: LD_INT 2
25202: ARRAY
25203: GREATEREQUAL
25204: AND
25205: PUSH
25206: LD_VAR 0 4
25210: PPUSH
25211: LD_INT 3
25213: PPUSH
25214: CALL_OW 275
25218: PUSH
25219: LD_VAR 0 5
25223: PUSH
25224: LD_INT 3
25226: ARRAY
25227: GREATEREQUAL
25228: AND
25229: ST_TO_ADDR
// end ;
25230: LD_VAR 0 3
25234: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes ; begin
25235: LD_INT 0
25237: PPUSH
25238: PPUSH
25239: PPUSH
25240: PPUSH
25241: PPUSH
25242: PPUSH
25243: PPUSH
// if not base or not btype or not x or not y then
25244: LD_VAR 0 1
25248: NOT
25249: PUSH
25250: LD_VAR 0 2
25254: NOT
25255: OR
25256: PUSH
25257: LD_VAR 0 3
25261: NOT
25262: OR
25263: PUSH
25264: LD_VAR 0 4
25268: NOT
25269: OR
25270: IFFALSE 25274
// exit ;
25272: GO 25546
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
25274: LD_ADDR_VAR 0 12
25278: PUSH
25279: LD_VAR 0 2
25283: PPUSH
25284: LD_VAR 0 3
25288: PPUSH
25289: LD_VAR 0 4
25293: PPUSH
25294: LD_VAR 0 5
25298: PPUSH
25299: LD_VAR 0 1
25303: PUSH
25304: LD_INT 1
25306: ARRAY
25307: PPUSH
25308: CALL_OW 248
25312: PPUSH
25313: LD_INT 0
25315: PPUSH
25316: CALL 26329 0 6
25320: ST_TO_ADDR
// if not hexes then
25321: LD_VAR 0 12
25325: NOT
25326: IFFALSE 25330
// exit ;
25328: GO 25546
// for i = 1 to hexes do
25330: LD_ADDR_VAR 0 7
25334: PUSH
25335: DOUBLE
25336: LD_INT 1
25338: DEC
25339: ST_TO_ADDR
25340: LD_VAR 0 12
25344: PUSH
25345: FOR_TO
25346: IFFALSE 25544
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25348: LD_ADDR_VAR 0 11
25352: PUSH
25353: LD_VAR 0 12
25357: PUSH
25358: LD_VAR 0 7
25362: ARRAY
25363: PUSH
25364: LD_INT 1
25366: ARRAY
25367: PPUSH
25368: LD_VAR 0 12
25372: PUSH
25373: LD_VAR 0 7
25377: ARRAY
25378: PUSH
25379: LD_INT 2
25381: ARRAY
25382: PPUSH
25383: CALL_OW 428
25387: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
25388: LD_VAR 0 11
25392: NOT
25393: PUSH
25394: LD_VAR 0 11
25398: PPUSH
25399: CALL_OW 247
25403: PUSH
25404: LD_INT 3
25406: EQUAL
25407: OR
25408: IFFALSE 25412
// continue ;
25410: GO 25345
// for j = 0 to 5 do
25412: LD_ADDR_VAR 0 8
25416: PUSH
25417: DOUBLE
25418: LD_INT 0
25420: DEC
25421: ST_TO_ADDR
25422: LD_INT 5
25424: PUSH
25425: FOR_TO
25426: IFFALSE 25540
// begin _x := ShiftX ( GetX ( tmp ) , j , 3 ) ;
25428: LD_ADDR_VAR 0 9
25432: PUSH
25433: LD_VAR 0 11
25437: PPUSH
25438: CALL_OW 250
25442: PPUSH
25443: LD_VAR 0 8
25447: PPUSH
25448: LD_INT 3
25450: PPUSH
25451: CALL_OW 272
25455: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 3 ) ;
25456: LD_ADDR_VAR 0 10
25460: PUSH
25461: LD_VAR 0 11
25465: PPUSH
25466: CALL_OW 251
25470: PPUSH
25471: LD_VAR 0 8
25475: PPUSH
25476: LD_INT 3
25478: PPUSH
25479: CALL_OW 273
25483: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25484: LD_VAR 0 9
25488: PPUSH
25489: LD_VAR 0 10
25493: PPUSH
25494: CALL_OW 488
25498: PUSH
25499: LD_VAR 0 9
25503: PPUSH
25504: LD_VAR 0 10
25508: PPUSH
25509: CALL_OW 428
25513: NOT
25514: AND
25515: IFFALSE 25538
// begin ComMoveXY ( tmp , _x , _y ) ;
25517: LD_VAR 0 11
25521: PPUSH
25522: LD_VAR 0 9
25526: PPUSH
25527: LD_VAR 0 10
25531: PPUSH
25532: CALL_OW 111
// break ;
25536: GO 25540
// end ; end ;
25538: GO 25425
25540: POP
25541: POP
// end ;
25542: GO 25345
25544: POP
25545: POP
// end ;
25546: LD_VAR 0 6
25550: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
25551: LD_INT 0
25553: PPUSH
25554: PPUSH
25555: PPUSH
25556: PPUSH
25557: PPUSH
25558: PPUSH
25559: PPUSH
25560: PPUSH
25561: PPUSH
// result := false ;
25562: LD_ADDR_VAR 0 6
25566: PUSH
25567: LD_INT 0
25569: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25570: LD_VAR 0 1
25574: NOT
25575: PUSH
25576: LD_VAR 0 1
25580: PPUSH
25581: CALL_OW 266
25585: PUSH
25586: LD_INT 0
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: IN
25596: NOT
25597: OR
25598: PUSH
25599: LD_VAR 0 2
25603: NOT
25604: OR
25605: PUSH
25606: LD_VAR 0 5
25610: PUSH
25611: LD_INT 0
25613: PUSH
25614: LD_INT 1
25616: PUSH
25617: LD_INT 2
25619: PUSH
25620: LD_INT 3
25622: PUSH
25623: LD_INT 4
25625: PUSH
25626: LD_INT 5
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: IN
25637: NOT
25638: OR
25639: PUSH
25640: LD_VAR 0 3
25644: PPUSH
25645: LD_VAR 0 4
25649: PPUSH
25650: CALL_OW 488
25654: NOT
25655: OR
25656: IFFALSE 25660
// exit ;
25658: GO 26324
// pom := GetBase ( bdepot ) ;
25660: LD_ADDR_VAR 0 9
25664: PUSH
25665: LD_VAR 0 1
25669: PPUSH
25670: CALL_OW 274
25674: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
25675: LD_ADDR_VAR 0 10
25679: PUSH
25680: LD_VAR 0 2
25684: PPUSH
25685: LD_VAR 0 1
25689: PPUSH
25690: CALL_OW 248
25694: PPUSH
25695: CALL_OW 450
25699: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25700: LD_VAR 0 9
25704: PPUSH
25705: LD_INT 1
25707: PPUSH
25708: CALL_OW 275
25712: PUSH
25713: LD_VAR 0 10
25717: PUSH
25718: LD_INT 1
25720: ARRAY
25721: GREATEREQUAL
25722: PUSH
25723: LD_VAR 0 9
25727: PPUSH
25728: LD_INT 2
25730: PPUSH
25731: CALL_OW 275
25735: PUSH
25736: LD_VAR 0 10
25740: PUSH
25741: LD_INT 2
25743: ARRAY
25744: GREATEREQUAL
25745: AND
25746: PUSH
25747: LD_VAR 0 9
25751: PPUSH
25752: LD_INT 3
25754: PPUSH
25755: CALL_OW 275
25759: PUSH
25760: LD_VAR 0 10
25764: PUSH
25765: LD_INT 3
25767: ARRAY
25768: GREATEREQUAL
25769: AND
25770: NOT
25771: IFFALSE 25775
// exit ;
25773: GO 26324
// if GetBType ( bdepot ) = b_depot then
25775: LD_VAR 0 1
25779: PPUSH
25780: CALL_OW 266
25784: PUSH
25785: LD_INT 0
25787: EQUAL
25788: IFFALSE 25800
// dist := 28 else
25790: LD_ADDR_VAR 0 13
25794: PUSH
25795: LD_INT 28
25797: ST_TO_ADDR
25798: GO 25808
// dist := 36 ;
25800: LD_ADDR_VAR 0 13
25804: PUSH
25805: LD_INT 36
25807: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
25808: LD_VAR 0 1
25812: PPUSH
25813: LD_VAR 0 3
25817: PPUSH
25818: LD_VAR 0 4
25822: PPUSH
25823: CALL_OW 297
25827: PUSH
25828: LD_VAR 0 13
25832: GREATER
25833: IFFALSE 25837
// exit ;
25835: GO 26324
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
25837: LD_ADDR_VAR 0 11
25841: PUSH
25842: LD_VAR 0 2
25846: PPUSH
25847: LD_VAR 0 3
25851: PPUSH
25852: LD_VAR 0 4
25856: PPUSH
25857: LD_VAR 0 5
25861: PPUSH
25862: LD_VAR 0 1
25866: PPUSH
25867: CALL_OW 248
25871: PPUSH
25872: LD_INT 0
25874: PPUSH
25875: CALL 26329 0 6
25879: ST_TO_ADDR
// if not hexes then
25880: LD_VAR 0 11
25884: NOT
25885: IFFALSE 25889
// exit ;
25887: GO 26324
// hex := GetHexInfo ( x , y ) ;
25889: LD_ADDR_VAR 0 14
25893: PUSH
25894: LD_VAR 0 3
25898: PPUSH
25899: LD_VAR 0 4
25903: PPUSH
25904: CALL_OW 546
25908: ST_TO_ADDR
// if hex [ 1 ] then
25909: LD_VAR 0 14
25913: PUSH
25914: LD_INT 1
25916: ARRAY
25917: IFFALSE 25921
// exit ;
25919: GO 26324
// height := hex [ 2 ] ;
25921: LD_ADDR_VAR 0 12
25925: PUSH
25926: LD_VAR 0 14
25930: PUSH
25931: LD_INT 2
25933: ARRAY
25934: ST_TO_ADDR
// for i = 1 to hexes do
25935: LD_ADDR_VAR 0 7
25939: PUSH
25940: DOUBLE
25941: LD_INT 1
25943: DEC
25944: ST_TO_ADDR
25945: LD_VAR 0 11
25949: PUSH
25950: FOR_TO
25951: IFFALSE 26279
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25953: LD_VAR 0 11
25957: PUSH
25958: LD_VAR 0 7
25962: ARRAY
25963: PUSH
25964: LD_INT 1
25966: ARRAY
25967: PPUSH
25968: LD_VAR 0 11
25972: PUSH
25973: LD_VAR 0 7
25977: ARRAY
25978: PUSH
25979: LD_INT 2
25981: ARRAY
25982: PPUSH
25983: CALL_OW 488
25987: NOT
25988: IFFALSE 25992
// continue ;
25990: GO 25950
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25992: LD_ADDR_VAR 0 8
25996: PUSH
25997: LD_VAR 0 11
26001: PUSH
26002: LD_VAR 0 7
26006: ARRAY
26007: PUSH
26008: LD_INT 1
26010: ARRAY
26011: PPUSH
26012: LD_VAR 0 11
26016: PUSH
26017: LD_VAR 0 7
26021: ARRAY
26022: PUSH
26023: LD_INT 2
26025: ARRAY
26026: PPUSH
26027: CALL_OW 546
26031: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26032: LD_VAR 0 8
26036: PUSH
26037: LD_INT 1
26039: ARRAY
26040: PUSH
26041: LD_VAR 0 8
26045: PUSH
26046: LD_INT 2
26048: ARRAY
26049: PUSH
26050: LD_VAR 0 12
26054: PUSH
26055: LD_INT 2
26057: PLUS
26058: GREATER
26059: OR
26060: PUSH
26061: LD_VAR 0 8
26065: PUSH
26066: LD_INT 2
26068: ARRAY
26069: PUSH
26070: LD_VAR 0 12
26074: PUSH
26075: LD_INT 2
26077: MINUS
26078: LESS
26079: OR
26080: PUSH
26081: LD_VAR 0 8
26085: PUSH
26086: LD_INT 3
26088: ARRAY
26089: PUSH
26090: LD_INT 0
26092: PUSH
26093: LD_INT 8
26095: PUSH
26096: LD_INT 9
26098: PUSH
26099: LD_INT 10
26101: PUSH
26102: LD_INT 11
26104: PUSH
26105: LD_INT 12
26107: PUSH
26108: LD_INT 13
26110: PUSH
26111: LD_INT 16
26113: PUSH
26114: LD_INT 17
26116: PUSH
26117: LD_INT 18
26119: PUSH
26120: LD_INT 19
26122: PUSH
26123: LD_INT 20
26125: PUSH
26126: LD_INT 21
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: IN
26144: NOT
26145: OR
26146: PUSH
26147: LD_VAR 0 8
26151: PUSH
26152: LD_INT 5
26154: ARRAY
26155: NOT
26156: OR
26157: PUSH
26158: LD_VAR 0 8
26162: PUSH
26163: LD_INT 6
26165: ARRAY
26166: PUSH
26167: LD_INT 1
26169: PUSH
26170: LD_INT 2
26172: PUSH
26173: LD_INT 7
26175: PUSH
26176: LD_INT 9
26178: PUSH
26179: LD_INT 10
26181: PUSH
26182: LD_INT 11
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: IN
26193: NOT
26194: OR
26195: PUSH
26196: LD_VAR 0 11
26200: PUSH
26201: LD_VAR 0 7
26205: ARRAY
26206: PUSH
26207: LD_INT 1
26209: ARRAY
26210: PPUSH
26211: LD_VAR 0 11
26215: PUSH
26216: LD_VAR 0 7
26220: ARRAY
26221: PUSH
26222: LD_INT 2
26224: ARRAY
26225: PPUSH
26226: CALL_OW 428
26230: PUSH
26231: LD_INT 0
26233: GREATER
26234: OR
26235: PUSH
26236: LD_VAR 0 11
26240: PUSH
26241: LD_VAR 0 7
26245: ARRAY
26246: PUSH
26247: LD_INT 1
26249: ARRAY
26250: PPUSH
26251: LD_VAR 0 11
26255: PUSH
26256: LD_VAR 0 7
26260: ARRAY
26261: PUSH
26262: LD_INT 2
26264: ARRAY
26265: PPUSH
26266: CALL_OW 351
26270: OR
26271: IFFALSE 26277
// exit ;
26273: POP
26274: POP
26275: GO 26324
// end ;
26277: GO 25950
26279: POP
26280: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
26281: LD_VAR 0 1
26285: PPUSH
26286: CALL_OW 255
26290: PPUSH
26291: LD_VAR 0 3
26295: PPUSH
26296: LD_VAR 0 4
26300: PPUSH
26301: LD_INT 20
26303: PPUSH
26304: CALL 19535 0 4
26308: PUSH
26309: LD_INT 4
26311: ARRAY
26312: IFFALSE 26316
// exit ;
26314: GO 26324
// result := true ;
26316: LD_ADDR_VAR 0 6
26320: PUSH
26321: LD_INT 1
26323: ST_TO_ADDR
// end ;
26324: LD_VAR 0 6
26328: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
26329: LD_INT 0
26331: PPUSH
26332: PPUSH
26333: PPUSH
26334: PPUSH
26335: PPUSH
26336: PPUSH
26337: PPUSH
26338: PPUSH
26339: PPUSH
26340: PPUSH
26341: PPUSH
26342: PPUSH
26343: PPUSH
26344: PPUSH
26345: PPUSH
26346: PPUSH
26347: PPUSH
26348: PPUSH
26349: PPUSH
26350: PPUSH
26351: PPUSH
26352: PPUSH
26353: PPUSH
26354: PPUSH
26355: PPUSH
26356: PPUSH
26357: PPUSH
26358: PPUSH
26359: PPUSH
26360: PPUSH
26361: PPUSH
26362: PPUSH
26363: PPUSH
26364: PPUSH
26365: PPUSH
26366: PPUSH
26367: PPUSH
26368: PPUSH
26369: PPUSH
26370: PPUSH
26371: PPUSH
26372: PPUSH
26373: PPUSH
26374: PPUSH
26375: PPUSH
26376: PPUSH
26377: PPUSH
26378: PPUSH
26379: PPUSH
26380: PPUSH
26381: PPUSH
26382: PPUSH
26383: PPUSH
26384: PPUSH
26385: PPUSH
26386: PPUSH
26387: PPUSH
26388: PPUSH
// result = [ ] ;
26389: LD_ADDR_VAR 0 7
26393: PUSH
26394: EMPTY
26395: ST_TO_ADDR
// temp_list = [ ] ;
26396: LD_ADDR_VAR 0 9
26400: PUSH
26401: EMPTY
26402: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26403: LD_VAR 0 4
26407: PUSH
26408: LD_INT 0
26410: PUSH
26411: LD_INT 1
26413: PUSH
26414: LD_INT 2
26416: PUSH
26417: LD_INT 3
26419: PUSH
26420: LD_INT 4
26422: PUSH
26423: LD_INT 5
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: IN
26434: NOT
26435: PUSH
26436: LD_VAR 0 1
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: IN
26451: PUSH
26452: LD_VAR 0 5
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: LD_INT 3
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: LIST
26470: IN
26471: NOT
26472: AND
26473: OR
26474: IFFALSE 26478
// exit ;
26476: GO 44863
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26478: LD_VAR 0 1
26482: PUSH
26483: LD_INT 6
26485: PUSH
26486: LD_INT 7
26488: PUSH
26489: LD_INT 8
26491: PUSH
26492: LD_INT 13
26494: PUSH
26495: LD_INT 12
26497: PUSH
26498: LD_INT 15
26500: PUSH
26501: LD_INT 11
26503: PUSH
26504: LD_INT 14
26506: PUSH
26507: LD_INT 10
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: IN
26521: IFFALSE 26531
// btype = b_lab ;
26523: LD_ADDR_VAR 0 1
26527: PUSH
26528: LD_INT 6
26530: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26531: LD_VAR 0 6
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: LD_INT 1
26541: PUSH
26542: LD_INT 2
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: LIST
26549: IN
26550: NOT
26551: PUSH
26552: LD_VAR 0 1
26556: PUSH
26557: LD_INT 0
26559: PUSH
26560: LD_INT 1
26562: PUSH
26563: LD_INT 2
26565: PUSH
26566: LD_INT 3
26568: PUSH
26569: LD_INT 6
26571: PUSH
26572: LD_INT 36
26574: PUSH
26575: LD_INT 4
26577: PUSH
26578: LD_INT 5
26580: PUSH
26581: LD_INT 31
26583: PUSH
26584: LD_INT 32
26586: PUSH
26587: LD_INT 33
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: IN
26603: NOT
26604: PUSH
26605: LD_VAR 0 6
26609: PUSH
26610: LD_INT 1
26612: EQUAL
26613: AND
26614: OR
26615: PUSH
26616: LD_VAR 0 1
26620: PUSH
26621: LD_INT 2
26623: PUSH
26624: LD_INT 3
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: IN
26631: NOT
26632: PUSH
26633: LD_VAR 0 6
26637: PUSH
26638: LD_INT 2
26640: EQUAL
26641: AND
26642: OR
26643: IFFALSE 26653
// mode = 0 ;
26645: LD_ADDR_VAR 0 6
26649: PUSH
26650: LD_INT 0
26652: ST_TO_ADDR
// case mode of 0 :
26653: LD_VAR 0 6
26657: PUSH
26658: LD_INT 0
26660: DOUBLE
26661: EQUAL
26662: IFTRUE 26666
26664: GO 38119
26666: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26667: LD_ADDR_VAR 0 11
26671: PUSH
26672: LD_INT 0
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: LD_INT 1
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 1
26725: NEG
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: NEG
26737: PUSH
26738: LD_INT 1
26740: NEG
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: LD_INT 2
26752: NEG
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: LD_INT 2
26763: NEG
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 1
26771: PUSH
26772: LD_INT 1
26774: NEG
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 1
26782: PUSH
26783: LD_INT 2
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 0
26792: PUSH
26793: LD_INT 2
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 1
26802: NEG
26803: PUSH
26804: LD_INT 1
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 1
26813: PUSH
26814: LD_INT 3
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: LD_INT 3
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: LD_INT 2
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26860: LD_ADDR_VAR 0 12
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 0
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 1
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 1
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 0
26908: PUSH
26909: LD_INT 1
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: NEG
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: NEG
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: LD_INT 1
26944: NEG
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 2
26952: PUSH
26953: LD_INT 0
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 2
26962: PUSH
26963: LD_INT 1
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 1
26972: NEG
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 2
26983: NEG
26984: PUSH
26985: LD_INT 0
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 2
26994: NEG
26995: PUSH
26996: LD_INT 1
26998: NEG
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 2
27006: NEG
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 3
27017: NEG
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 3
27028: NEG
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27056: LD_ADDR_VAR 0 13
27060: PUSH
27061: LD_INT 0
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 0
27073: PUSH
27074: LD_INT 1
27076: NEG
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 1
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 1
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 0
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 1
27114: NEG
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 1
27125: NEG
27126: PUSH
27127: LD_INT 1
27129: NEG
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 1
27137: NEG
27138: PUSH
27139: LD_INT 2
27141: NEG
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 2
27149: PUSH
27150: LD_INT 1
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 2
27159: PUSH
27160: LD_INT 2
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: LD_INT 2
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 2
27179: NEG
27180: PUSH
27181: LD_INT 1
27183: NEG
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 2
27191: NEG
27192: PUSH
27193: LD_INT 2
27195: NEG
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 2
27203: NEG
27204: PUSH
27205: LD_INT 3
27207: NEG
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 3
27215: NEG
27216: PUSH
27217: LD_INT 2
27219: NEG
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 3
27227: NEG
27228: PUSH
27229: LD_INT 3
27231: NEG
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27255: LD_ADDR_VAR 0 14
27259: PUSH
27260: LD_INT 0
27262: PUSH
27263: LD_INT 0
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: LD_INT 1
27275: NEG
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 1
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 1
27313: NEG
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 1
27324: NEG
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: LD_INT 2
27340: NEG
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: LD_INT 2
27351: NEG
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 1
27370: PUSH
27371: LD_INT 2
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 0
27380: PUSH
27381: LD_INT 2
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 1
27390: NEG
27391: PUSH
27392: LD_INT 1
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 1
27401: NEG
27402: PUSH
27403: LD_INT 3
27405: NEG
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: LD_INT 3
27416: NEG
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 2
27427: NEG
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27451: LD_ADDR_VAR 0 15
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: LD_INT 0
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: LD_INT 1
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: PUSH
27480: LD_INT 0
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 0
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 1
27509: NEG
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 1
27520: NEG
27521: PUSH
27522: LD_INT 1
27524: NEG
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: LD_INT 1
27535: NEG
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 2
27543: PUSH
27544: LD_INT 0
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 2
27553: PUSH
27554: LD_INT 1
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 2
27574: NEG
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 2
27585: NEG
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 2
27597: PUSH
27598: LD_INT 1
27600: NEG
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 3
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 3
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27644: LD_ADDR_VAR 0 16
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: LD_INT 0
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: LD_INT 1
27664: NEG
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 1
27672: PUSH
27673: LD_INT 0
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: LD_INT 1
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: LD_INT 1
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: LD_INT 0
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 1
27713: NEG
27714: PUSH
27715: LD_INT 1
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 1
27725: NEG
27726: PUSH
27727: LD_INT 2
27729: NEG
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 2
27737: PUSH
27738: LD_INT 1
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 2
27747: PUSH
27748: LD_INT 2
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: LD_INT 2
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 2
27767: NEG
27768: PUSH
27769: LD_INT 1
27771: NEG
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 2
27779: NEG
27780: PUSH
27781: LD_INT 2
27783: NEG
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 3
27791: PUSH
27792: LD_INT 2
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 3
27801: PUSH
27802: LD_INT 3
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 2
27811: PUSH
27812: LD_INT 3
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27837: LD_ADDR_VAR 0 17
27841: PUSH
27842: LD_INT 0
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: LD_INT 0
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: LD_INT 1
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 1
27918: NEG
27919: PUSH
27920: LD_INT 2
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 0
27930: PUSH
27931: LD_INT 2
27933: NEG
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 1
27941: PUSH
27942: LD_INT 1
27944: NEG
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 2
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 2
27962: PUSH
27963: LD_INT 1
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 2
27972: PUSH
27973: LD_INT 2
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: LD_INT 2
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: LD_INT 2
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: NEG
28003: PUSH
28004: LD_INT 1
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 2
28013: NEG
28014: PUSH
28015: LD_INT 0
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 2
28024: NEG
28025: PUSH
28026: LD_INT 1
28028: NEG
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 2
28036: NEG
28037: PUSH
28038: LD_INT 2
28040: NEG
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28067: LD_ADDR_VAR 0 18
28071: PUSH
28072: LD_INT 0
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 0
28084: PUSH
28085: LD_INT 1
28087: NEG
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: LD_INT 1
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: LD_INT 1
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: LD_INT 0
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 1
28136: NEG
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 1
28148: NEG
28149: PUSH
28150: LD_INT 2
28152: NEG
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 0
28160: PUSH
28161: LD_INT 2
28163: NEG
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 1
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 2
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: LD_INT 2
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: LD_INT 2
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 0
28222: PUSH
28223: LD_INT 2
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 1
28232: NEG
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 2
28243: NEG
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 2
28254: NEG
28255: PUSH
28256: LD_INT 1
28258: NEG
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 2
28266: NEG
28267: PUSH
28268: LD_INT 2
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28297: LD_ADDR_VAR 0 19
28301: PUSH
28302: LD_INT 0
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 0
28314: PUSH
28315: LD_INT 1
28317: NEG
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 1
28325: PUSH
28326: LD_INT 0
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 1
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 1
28355: NEG
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 1
28366: NEG
28367: PUSH
28368: LD_INT 1
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: LD_INT 2
28382: NEG
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: LD_INT 2
28393: NEG
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 2
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 2
28432: PUSH
28433: LD_INT 2
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 0
28452: PUSH
28453: LD_INT 2
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 1
28462: NEG
28463: PUSH
28464: LD_INT 1
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 2
28473: NEG
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 2
28484: NEG
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 2
28496: NEG
28497: PUSH
28498: LD_INT 2
28500: NEG
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28527: LD_ADDR_VAR 0 20
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: LD_INT 0
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 0
28544: PUSH
28545: LD_INT 1
28547: NEG
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: LD_INT 0
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: LD_INT 1
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: LD_INT 1
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: LD_INT 1
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: NEG
28609: PUSH
28610: LD_INT 2
28612: NEG
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: LD_INT 2
28623: NEG
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 2
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 2
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: LD_INT 2
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: PUSH
28673: LD_INT 2
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 0
28682: PUSH
28683: LD_INT 2
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: LD_INT 1
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 2
28703: NEG
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 2
28714: NEG
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 2
28726: NEG
28727: PUSH
28728: LD_INT 2
28730: NEG
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28757: LD_ADDR_VAR 0 21
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 0
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 1
28815: NEG
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 1
28826: NEG
28827: PUSH
28828: LD_INT 1
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: LD_INT 2
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: LD_INT 2
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 2
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 2
28892: PUSH
28893: LD_INT 2
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: LD_INT 2
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: LD_INT 2
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: NEG
28923: PUSH
28924: LD_INT 1
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 2
28933: NEG
28934: PUSH
28935: LD_INT 0
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 2
28944: NEG
28945: PUSH
28946: LD_INT 1
28948: NEG
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 2
28956: NEG
28957: PUSH
28958: LD_INT 2
28960: NEG
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28987: LD_ADDR_VAR 0 22
28991: PUSH
28992: LD_INT 0
28994: PUSH
28995: LD_INT 0
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 0
29004: PUSH
29005: LD_INT 1
29007: NEG
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 1
29025: PUSH
29026: LD_INT 1
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: LD_INT 1
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 1
29045: NEG
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 1
29056: NEG
29057: PUSH
29058: LD_INT 1
29060: NEG
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 1
29068: NEG
29069: PUSH
29070: LD_INT 2
29072: NEG
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 0
29080: PUSH
29081: LD_INT 2
29083: NEG
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: LD_INT 1
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 2
29102: PUSH
29103: LD_INT 0
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 2
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 2
29122: PUSH
29123: LD_INT 2
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: LD_INT 2
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: LD_INT 2
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: LD_INT 1
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 2
29163: NEG
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 2
29174: NEG
29175: PUSH
29176: LD_INT 1
29178: NEG
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 2
29186: NEG
29187: PUSH
29188: LD_INT 2
29190: NEG
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29217: LD_ADDR_VAR 0 23
29221: PUSH
29222: LD_INT 0
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 1
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 1
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 0
29265: PUSH
29266: LD_INT 1
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 1
29286: NEG
29287: PUSH
29288: LD_INT 1
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: LD_INT 2
29302: NEG
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 0
29310: PUSH
29311: LD_INT 2
29313: NEG
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 1
29321: PUSH
29322: LD_INT 1
29324: NEG
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 2
29332: PUSH
29333: LD_INT 0
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 2
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 2
29352: PUSH
29353: LD_INT 2
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 1
29362: PUSH
29363: LD_INT 2
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 0
29372: PUSH
29373: LD_INT 2
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 1
29382: NEG
29383: PUSH
29384: LD_INT 1
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 2
29393: NEG
29394: PUSH
29395: LD_INT 0
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 2
29404: NEG
29405: PUSH
29406: LD_INT 1
29408: NEG
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 2
29416: NEG
29417: PUSH
29418: LD_INT 2
29420: NEG
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 2
29428: NEG
29429: PUSH
29430: LD_INT 3
29432: NEG
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 1
29440: NEG
29441: PUSH
29442: LD_INT 3
29444: NEG
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 1
29452: PUSH
29453: LD_INT 2
29455: NEG
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 2
29463: PUSH
29464: LD_INT 1
29466: NEG
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29497: LD_ADDR_VAR 0 24
29501: PUSH
29502: LD_INT 0
29504: PUSH
29505: LD_INT 0
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 0
29514: PUSH
29515: LD_INT 1
29517: NEG
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 1
29525: PUSH
29526: LD_INT 0
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 1
29535: PUSH
29536: LD_INT 1
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 0
29545: PUSH
29546: LD_INT 1
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 1
29555: NEG
29556: PUSH
29557: LD_INT 0
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 1
29578: NEG
29579: PUSH
29580: LD_INT 2
29582: NEG
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 0
29590: PUSH
29591: LD_INT 2
29593: NEG
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 1
29601: PUSH
29602: LD_INT 1
29604: NEG
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 2
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 2
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 2
29632: PUSH
29633: LD_INT 2
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 1
29642: PUSH
29643: LD_INT 2
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 0
29652: PUSH
29653: LD_INT 2
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 1
29662: NEG
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 2
29673: NEG
29674: PUSH
29675: LD_INT 0
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 2
29684: NEG
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 2
29696: NEG
29697: PUSH
29698: LD_INT 2
29700: NEG
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 1
29708: PUSH
29709: LD_INT 2
29711: NEG
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 2
29719: PUSH
29720: LD_INT 1
29722: NEG
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 3
29730: PUSH
29731: LD_INT 1
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 3
29740: PUSH
29741: LD_INT 2
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29773: LD_ADDR_VAR 0 25
29777: PUSH
29778: LD_INT 0
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 0
29790: PUSH
29791: LD_INT 1
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 1
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 0
29821: PUSH
29822: LD_INT 1
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PUSH
29833: LD_INT 0
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 1
29842: NEG
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 1
29854: NEG
29855: PUSH
29856: LD_INT 2
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 0
29866: PUSH
29867: LD_INT 2
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 1
29877: PUSH
29878: LD_INT 1
29880: NEG
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 2
29888: PUSH
29889: LD_INT 0
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 2
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 2
29908: PUSH
29909: LD_INT 2
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: PUSH
29919: LD_INT 2
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: LD_INT 2
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: NEG
29939: PUSH
29940: LD_INT 1
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 2
29949: NEG
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 2
29960: NEG
29961: PUSH
29962: LD_INT 1
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 2
29972: NEG
29973: PUSH
29974: LD_INT 2
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 3
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 3
29994: PUSH
29995: LD_INT 2
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: LD_INT 3
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: LD_INT 3
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30047: LD_ADDR_VAR 0 26
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: LD_INT 0
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 0
30064: PUSH
30065: LD_INT 1
30067: NEG
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 0
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 1
30105: NEG
30106: PUSH
30107: LD_INT 0
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 1
30116: NEG
30117: PUSH
30118: LD_INT 1
30120: NEG
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 1
30128: NEG
30129: PUSH
30130: LD_INT 2
30132: NEG
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 0
30140: PUSH
30141: LD_INT 2
30143: NEG
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 1
30151: PUSH
30152: LD_INT 1
30154: NEG
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 2
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 2
30172: PUSH
30173: LD_INT 1
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 2
30182: PUSH
30183: LD_INT 2
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 1
30192: PUSH
30193: LD_INT 2
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: LD_INT 2
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 1
30212: NEG
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 2
30223: NEG
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 2
30234: NEG
30235: PUSH
30236: LD_INT 1
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 2
30246: NEG
30247: PUSH
30248: LD_INT 2
30250: NEG
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 2
30258: PUSH
30259: LD_INT 3
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: PUSH
30269: LD_INT 3
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: LD_INT 2
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 2
30289: NEG
30290: PUSH
30291: LD_INT 1
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30323: LD_ADDR_VAR 0 27
30327: PUSH
30328: LD_INT 0
30330: PUSH
30331: LD_INT 0
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: LD_INT 1
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: LD_INT 0
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 1
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 1
30381: NEG
30382: PUSH
30383: LD_INT 0
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 1
30392: NEG
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 1
30404: NEG
30405: PUSH
30406: LD_INT 2
30408: NEG
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 0
30416: PUSH
30417: LD_INT 2
30419: NEG
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 1
30427: PUSH
30428: LD_INT 1
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 2
30438: PUSH
30439: LD_INT 0
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 2
30448: PUSH
30449: LD_INT 1
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: LD_INT 2
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: LD_INT 2
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: LD_INT 2
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 1
30488: NEG
30489: PUSH
30490: LD_INT 1
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 2
30499: NEG
30500: PUSH
30501: LD_INT 0
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 2
30510: NEG
30511: PUSH
30512: LD_INT 1
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: LD_INT 2
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 1
30534: NEG
30535: PUSH
30536: LD_INT 2
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 2
30545: NEG
30546: PUSH
30547: LD_INT 1
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 3
30556: NEG
30557: PUSH
30558: LD_INT 1
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 3
30568: NEG
30569: PUSH
30570: LD_INT 2
30572: NEG
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30603: LD_ADDR_VAR 0 28
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: LD_INT 0
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 0
30620: PUSH
30621: LD_INT 1
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 1
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 0
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: NEG
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 1
30672: NEG
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 1
30684: NEG
30685: PUSH
30686: LD_INT 2
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 0
30696: PUSH
30697: LD_INT 2
30699: NEG
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: LD_INT 1
30710: NEG
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 2
30718: PUSH
30719: LD_INT 0
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 2
30738: PUSH
30739: LD_INT 2
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: LD_INT 2
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: LD_INT 2
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 1
30768: NEG
30769: PUSH
30770: LD_INT 1
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 2
30779: NEG
30780: PUSH
30781: LD_INT 0
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 2
30790: NEG
30791: PUSH
30792: LD_INT 1
30794: NEG
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 2
30802: NEG
30803: PUSH
30804: LD_INT 2
30806: NEG
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 2
30814: NEG
30815: PUSH
30816: LD_INT 3
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: NEG
30827: PUSH
30828: LD_INT 3
30830: NEG
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 3
30838: NEG
30839: PUSH
30840: LD_INT 1
30842: NEG
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 3
30850: NEG
30851: PUSH
30852: LD_INT 2
30854: NEG
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30885: LD_ADDR_VAR 0 29
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: LD_INT 0
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: LD_INT 1
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: LD_INT 1
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 0
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 1
30943: NEG
30944: PUSH
30945: LD_INT 0
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 1
30954: NEG
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: LD_INT 2
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 0
30978: PUSH
30979: LD_INT 2
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 1
30989: PUSH
30990: LD_INT 1
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 2
31010: PUSH
31011: LD_INT 1
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: PUSH
31021: LD_INT 2
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 0
31030: PUSH
31031: LD_INT 2
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: NEG
31041: PUSH
31042: LD_INT 1
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 2
31051: NEG
31052: PUSH
31053: LD_INT 1
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 2
31063: NEG
31064: PUSH
31065: LD_INT 2
31067: NEG
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 2
31075: NEG
31076: PUSH
31077: LD_INT 3
31079: NEG
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 3
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: LD_INT 3
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: LD_INT 2
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 3
31129: NEG
31130: PUSH
31131: LD_INT 2
31133: NEG
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31164: LD_ADDR_VAR 0 30
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: LD_INT 0
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 0
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 1
31202: PUSH
31203: LD_INT 1
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: LD_INT 1
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 1
31222: NEG
31223: PUSH
31224: LD_INT 0
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: NEG
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 1
31245: NEG
31246: PUSH
31247: LD_INT 2
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: LD_INT 2
31260: NEG
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: LD_INT 1
31271: NEG
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 2
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 2
31299: PUSH
31300: LD_INT 2
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: LD_INT 2
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: LD_INT 1
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 2
31341: NEG
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 1
31353: NEG
31354: PUSH
31355: LD_INT 3
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 1
31365: PUSH
31366: LD_INT 2
31368: NEG
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 3
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 2
31386: PUSH
31387: LD_INT 3
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 2
31396: NEG
31397: PUSH
31398: LD_INT 1
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 3
31407: NEG
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31442: LD_ADDR_VAR 0 31
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 0
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 1
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: LD_INT 1
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: LD_INT 1
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 1
31511: NEG
31512: PUSH
31513: LD_INT 1
31515: NEG
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 1
31523: NEG
31524: PUSH
31525: LD_INT 2
31527: NEG
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: LD_INT 1
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 2
31546: PUSH
31547: LD_INT 0
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 2
31556: PUSH
31557: LD_INT 1
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 2
31566: PUSH
31567: LD_INT 2
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 1
31576: PUSH
31577: LD_INT 2
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 0
31586: PUSH
31587: LD_INT 2
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 1
31596: NEG
31597: PUSH
31598: LD_INT 1
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 2
31607: NEG
31608: PUSH
31609: LD_INT 1
31611: NEG
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 2
31619: NEG
31620: PUSH
31621: LD_INT 2
31623: NEG
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: LD_INT 3
31635: NEG
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 2
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 3
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 1
31664: PUSH
31665: LD_INT 3
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: LD_INT 2
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 3
31685: NEG
31686: PUSH
31687: LD_INT 2
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31720: LD_ADDR_VAR 0 32
31724: PUSH
31725: LD_INT 0
31727: PUSH
31728: LD_INT 0
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: LD_INT 1
31740: NEG
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 1
31748: PUSH
31749: LD_INT 0
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 1
31758: PUSH
31759: LD_INT 1
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 0
31768: PUSH
31769: LD_INT 1
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 1
31778: NEG
31779: PUSH
31780: LD_INT 0
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: PUSH
31791: LD_INT 1
31793: NEG
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 1
31801: NEG
31802: PUSH
31803: LD_INT 2
31805: NEG
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 0
31813: PUSH
31814: LD_INT 2
31816: NEG
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 1
31824: PUSH
31825: LD_INT 1
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 2
31835: PUSH
31836: LD_INT 1
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 2
31845: PUSH
31846: LD_INT 2
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: LD_INT 2
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 1
31875: NEG
31876: PUSH
31877: LD_INT 1
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 2
31886: NEG
31887: PUSH
31888: LD_INT 0
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 2
31897: NEG
31898: PUSH
31899: LD_INT 1
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: NEG
31910: PUSH
31911: LD_INT 3
31913: NEG
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: LD_INT 2
31924: NEG
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 3
31932: PUSH
31933: LD_INT 2
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 2
31942: PUSH
31943: LD_INT 3
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 2
31952: NEG
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 3
31963: NEG
31964: PUSH
31965: LD_INT 1
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31998: LD_ADDR_VAR 0 33
32002: PUSH
32003: LD_INT 0
32005: PUSH
32006: LD_INT 0
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 1
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: LD_INT 1
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 1
32056: NEG
32057: PUSH
32058: LD_INT 0
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: LD_INT 1
32071: NEG
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 1
32079: NEG
32080: PUSH
32081: LD_INT 2
32083: NEG
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: LD_INT 1
32094: NEG
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 2
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 2
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: LD_INT 2
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: LD_INT 2
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 1
32142: NEG
32143: PUSH
32144: LD_INT 1
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 2
32153: NEG
32154: PUSH
32155: LD_INT 0
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 2
32164: NEG
32165: PUSH
32166: LD_INT 1
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 2
32176: NEG
32177: PUSH
32178: LD_INT 2
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 2
32188: NEG
32189: PUSH
32190: LD_INT 3
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: LD_INT 1
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 3
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 1
32221: PUSH
32222: LD_INT 3
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: LD_INT 2
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 3
32242: NEG
32243: PUSH
32244: LD_INT 2
32246: NEG
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32277: LD_ADDR_VAR 0 34
32281: PUSH
32282: LD_INT 0
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 0
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 1
32305: PUSH
32306: LD_INT 0
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 1
32315: PUSH
32316: LD_INT 1
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 0
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 1
32335: NEG
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 1
32346: NEG
32347: PUSH
32348: LD_INT 1
32350: NEG
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 1
32358: NEG
32359: PUSH
32360: LD_INT 2
32362: NEG
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: LD_INT 2
32373: NEG
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 1
32381: PUSH
32382: LD_INT 1
32384: NEG
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 2
32392: PUSH
32393: LD_INT 1
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 2
32402: PUSH
32403: LD_INT 2
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 1
32412: PUSH
32413: LD_INT 2
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 2
32433: NEG
32434: PUSH
32435: LD_INT 0
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 2
32444: NEG
32445: PUSH
32446: LD_INT 1
32448: NEG
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 2
32456: NEG
32457: PUSH
32458: LD_INT 2
32460: NEG
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 1
32468: NEG
32469: PUSH
32470: LD_INT 3
32472: NEG
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: LD_INT 2
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 3
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 2
32501: PUSH
32502: LD_INT 3
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 2
32511: NEG
32512: PUSH
32513: LD_INT 1
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 3
32522: NEG
32523: PUSH
32524: LD_INT 1
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32557: LD_ADDR_VAR 0 35
32561: PUSH
32562: LD_INT 0
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 0
32574: PUSH
32575: LD_INT 1
32577: NEG
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 1
32585: PUSH
32586: LD_INT 0
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 1
32595: PUSH
32596: LD_INT 1
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: LD_INT 1
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 1
32615: NEG
32616: PUSH
32617: LD_INT 0
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 1
32626: NEG
32627: PUSH
32628: LD_INT 1
32630: NEG
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 2
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: NEG
32649: PUSH
32650: LD_INT 1
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32669: LD_ADDR_VAR 0 36
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: LD_INT 1
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 1
32727: NEG
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 1
32738: NEG
32739: PUSH
32740: LD_INT 1
32742: NEG
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 1
32750: NEG
32751: PUSH
32752: LD_INT 2
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: LD_INT 2
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32781: LD_ADDR_VAR 0 37
32785: PUSH
32786: LD_INT 0
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: LD_INT 1
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: LD_INT 0
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: LD_INT 1
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 0
32829: PUSH
32830: LD_INT 1
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 1
32839: NEG
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 1
32850: NEG
32851: PUSH
32852: LD_INT 1
32854: NEG
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 1
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32893: LD_ADDR_VAR 0 38
32897: PUSH
32898: LD_INT 0
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: LD_INT 1
32913: NEG
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: LD_INT 0
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 1
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: LD_INT 1
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 1
32951: NEG
32952: PUSH
32953: LD_INT 0
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: NEG
32963: PUSH
32964: LD_INT 1
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 2
32984: NEG
32985: PUSH
32986: LD_INT 1
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33005: LD_ADDR_VAR 0 39
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: LD_INT 1
33025: NEG
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 1
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: LD_INT 1
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 0
33053: PUSH
33054: LD_INT 1
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 1
33063: NEG
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 1
33074: NEG
33075: PUSH
33076: LD_INT 1
33078: NEG
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 1
33086: NEG
33087: PUSH
33088: LD_INT 2
33090: NEG
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 1
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33117: LD_ADDR_VAR 0 40
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 1
33145: PUSH
33146: LD_INT 0
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 1
33155: PUSH
33156: LD_INT 1
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: LD_INT 1
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 1
33175: NEG
33176: PUSH
33177: LD_INT 0
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: PUSH
33188: LD_INT 1
33190: NEG
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: LD_INT 1
33201: NEG
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 1
33209: NEG
33210: PUSH
33211: LD_INT 1
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33229: LD_ADDR_VAR 0 41
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: LD_INT 1
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 1
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 0
33277: PUSH
33278: LD_INT 1
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 1
33298: NEG
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 1
33310: NEG
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 2
33333: PUSH
33334: LD_INT 0
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 2
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: PUSH
33364: LD_INT 2
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 1
33373: NEG
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 2
33384: NEG
33385: PUSH
33386: LD_INT 0
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 2
33407: NEG
33408: PUSH
33409: LD_INT 2
33411: NEG
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 2
33419: NEG
33420: PUSH
33421: LD_INT 3
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 2
33431: PUSH
33432: LD_INT 1
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 3
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 3
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 3
33462: PUSH
33463: LD_INT 2
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 3
33472: PUSH
33473: LD_INT 3
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 2
33482: PUSH
33483: LD_INT 3
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 2
33492: NEG
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 3
33503: NEG
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 3
33514: NEG
33515: PUSH
33516: LD_INT 1
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 3
33526: NEG
33527: PUSH
33528: LD_INT 2
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 3
33538: NEG
33539: PUSH
33540: LD_INT 3
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33579: LD_ADDR_VAR 0 42
33583: PUSH
33584: LD_INT 0
33586: PUSH
33587: LD_INT 0
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: LD_INT 1
33599: NEG
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: LD_INT 0
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: LD_INT 1
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: LD_INT 1
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: LD_INT 0
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 1
33648: NEG
33649: PUSH
33650: LD_INT 1
33652: NEG
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 1
33660: NEG
33661: PUSH
33662: LD_INT 2
33664: NEG
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 0
33672: PUSH
33673: LD_INT 2
33675: NEG
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 2
33694: PUSH
33695: LD_INT 1
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: LD_INT 2
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: LD_INT 2
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 0
33724: PUSH
33725: LD_INT 2
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 1
33734: NEG
33735: PUSH
33736: LD_INT 1
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 2
33745: NEG
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 2
33757: NEG
33758: PUSH
33759: LD_INT 2
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 2
33769: NEG
33770: PUSH
33771: LD_INT 3
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 1
33781: NEG
33782: PUSH
33783: LD_INT 3
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: LD_INT 3
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 1
33804: PUSH
33805: LD_INT 2
33807: NEG
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 3
33815: PUSH
33816: LD_INT 2
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 3
33825: PUSH
33826: LD_INT 3
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 2
33835: PUSH
33836: LD_INT 3
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 1
33845: PUSH
33846: LD_INT 3
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 0
33855: PUSH
33856: LD_INT 3
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 1
33865: NEG
33866: PUSH
33867: LD_INT 2
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 3
33876: NEG
33877: PUSH
33878: LD_INT 2
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 3
33888: NEG
33889: PUSH
33890: LD_INT 3
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33929: LD_ADDR_VAR 0 43
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: LD_INT 0
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: LD_INT 1
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: LD_INT 0
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: LD_INT 1
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: LD_INT 1
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: LD_INT 0
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 1
33998: NEG
33999: PUSH
34000: LD_INT 1
34002: NEG
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 1
34010: NEG
34011: PUSH
34012: LD_INT 2
34014: NEG
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 0
34022: PUSH
34023: LD_INT 2
34025: NEG
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 1
34033: PUSH
34034: LD_INT 1
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 2
34044: PUSH
34045: LD_INT 0
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 2
34054: PUSH
34055: LD_INT 1
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: LD_INT 2
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: LD_INT 2
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: LD_INT 1
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 2
34095: NEG
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 2
34106: NEG
34107: PUSH
34108: LD_INT 1
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 1
34118: NEG
34119: PUSH
34120: LD_INT 3
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: LD_INT 3
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 1
34141: PUSH
34142: LD_INT 2
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: LD_INT 1
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 3
34163: PUSH
34164: LD_INT 0
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 3
34173: PUSH
34174: LD_INT 1
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: LD_INT 3
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: LD_INT 3
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 1
34203: NEG
34204: PUSH
34205: LD_INT 2
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 2
34214: NEG
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 3
34225: NEG
34226: PUSH
34227: LD_INT 0
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 3
34236: NEG
34237: PUSH
34238: LD_INT 1
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34277: LD_ADDR_VAR 0 44
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: LD_INT 0
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 0
34294: PUSH
34295: LD_INT 1
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 1
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 1
34315: PUSH
34316: LD_INT 1
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: LD_INT 1
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: LD_INT 0
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 1
34358: NEG
34359: PUSH
34360: LD_INT 2
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: PUSH
34371: LD_INT 1
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: LD_INT 0
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 2
34391: PUSH
34392: LD_INT 1
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 2
34401: PUSH
34402: LD_INT 2
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 1
34421: NEG
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 2
34432: NEG
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 2
34443: NEG
34444: PUSH
34445: LD_INT 1
34447: NEG
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: LD_INT 2
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 2
34467: NEG
34468: PUSH
34469: LD_INT 3
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 2
34479: PUSH
34480: LD_INT 1
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 3
34490: PUSH
34491: LD_INT 0
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 3
34500: PUSH
34501: LD_INT 1
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 3
34510: PUSH
34511: LD_INT 2
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 3
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 2
34530: PUSH
34531: LD_INT 3
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 2
34540: NEG
34541: PUSH
34542: LD_INT 1
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 3
34551: NEG
34552: PUSH
34553: LD_INT 0
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 3
34562: NEG
34563: PUSH
34564: LD_INT 1
34566: NEG
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 3
34574: NEG
34575: PUSH
34576: LD_INT 2
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 3
34586: NEG
34587: PUSH
34588: LD_INT 3
34590: NEG
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34627: LD_ADDR_VAR 0 45
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 1
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: NEG
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 1
34696: NEG
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 1
34708: NEG
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: LD_INT 2
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: LD_INT 1
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 2
34742: PUSH
34743: LD_INT 1
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 2
34752: PUSH
34753: LD_INT 2
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 1
34762: PUSH
34763: LD_INT 2
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 0
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 1
34782: NEG
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 2
34793: NEG
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 2
34805: NEG
34806: PUSH
34807: LD_INT 2
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 2
34817: NEG
34818: PUSH
34819: LD_INT 3
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 1
34829: NEG
34830: PUSH
34831: LD_INT 3
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: LD_INT 3
34844: NEG
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: LD_INT 2
34855: NEG
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 3
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 3
34873: PUSH
34874: LD_INT 3
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 2
34883: PUSH
34884: LD_INT 3
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 1
34893: PUSH
34894: LD_INT 3
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 0
34903: PUSH
34904: LD_INT 3
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 1
34913: NEG
34914: PUSH
34915: LD_INT 2
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 3
34924: NEG
34925: PUSH
34926: LD_INT 2
34928: NEG
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 3
34936: NEG
34937: PUSH
34938: LD_INT 3
34940: NEG
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34977: LD_ADDR_VAR 0 46
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: LD_INT 0
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 0
34994: PUSH
34995: LD_INT 1
34997: NEG
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 1
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 1
35015: PUSH
35016: LD_INT 1
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 1
35046: NEG
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: LD_INT 2
35062: NEG
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 0
35070: PUSH
35071: LD_INT 2
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 1
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 2
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 2
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 1
35112: PUSH
35113: LD_INT 2
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 0
35122: PUSH
35123: LD_INT 2
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 1
35132: NEG
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 2
35143: NEG
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 2
35154: NEG
35155: PUSH
35156: LD_INT 1
35158: NEG
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: LD_INT 3
35170: NEG
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 0
35178: PUSH
35179: LD_INT 3
35181: NEG
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: LD_INT 2
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 2
35200: PUSH
35201: LD_INT 1
35203: NEG
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 3
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 3
35221: PUSH
35222: LD_INT 1
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: LD_INT 3
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: LD_INT 3
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: LD_INT 2
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 2
35262: NEG
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 3
35273: NEG
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 3
35284: NEG
35285: PUSH
35286: LD_INT 1
35288: NEG
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35325: LD_ADDR_VAR 0 47
35329: PUSH
35330: LD_INT 0
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 0
35342: PUSH
35343: LD_INT 1
35345: NEG
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 1
35353: PUSH
35354: LD_INT 0
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 1
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 1
35383: NEG
35384: PUSH
35385: LD_INT 0
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 1
35394: NEG
35395: PUSH
35396: LD_INT 1
35398: NEG
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: LD_INT 2
35410: NEG
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 0
35418: PUSH
35419: LD_INT 2
35421: NEG
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 2
35440: NEG
35441: PUSH
35442: LD_INT 1
35444: NEG
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 2
35452: NEG
35453: PUSH
35454: LD_INT 2
35456: NEG
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35476: LD_ADDR_VAR 0 48
35480: PUSH
35481: LD_INT 0
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: LD_INT 1
35496: NEG
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 1
35534: NEG
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 1
35545: NEG
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 1
35557: NEG
35558: PUSH
35559: LD_INT 2
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 0
35569: PUSH
35570: LD_INT 2
35572: NEG
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 1
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 2
35591: PUSH
35592: LD_INT 0
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 2
35601: PUSH
35602: LD_INT 1
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35623: LD_ADDR_VAR 0 49
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 0
35640: PUSH
35641: LD_INT 1
35643: NEG
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 1
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: LD_INT 1
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 1
35681: NEG
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 1
35692: NEG
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: LD_INT 1
35707: NEG
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 2
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 2
35725: PUSH
35726: LD_INT 1
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 2
35735: PUSH
35736: LD_INT 2
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: PUSH
35746: LD_INT 2
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35767: LD_ADDR_VAR 0 50
35771: PUSH
35772: LD_INT 0
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 1
35805: PUSH
35806: LD_INT 1
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 0
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: NEG
35826: PUSH
35827: LD_INT 0
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 1
35836: NEG
35837: PUSH
35838: LD_INT 1
35840: NEG
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 2
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 2
35858: PUSH
35859: LD_INT 2
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 1
35868: PUSH
35869: LD_INT 2
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: LD_INT 2
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: LD_INT 1
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35911: LD_ADDR_VAR 0 51
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 1
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 1
35969: NEG
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 1
35980: NEG
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: PUSH
35993: LD_INT 2
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 2
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 1
36012: NEG
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 2
36023: NEG
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 2
36034: NEG
36035: PUSH
36036: LD_INT 1
36038: NEG
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36058: LD_ADDR_VAR 0 52
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: LD_INT 1
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: PUSH
36097: LD_INT 1
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: LD_INT 1
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 1
36116: NEG
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 1
36127: NEG
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: LD_INT 2
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 1
36151: NEG
36152: PUSH
36153: LD_INT 1
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 2
36162: NEG
36163: PUSH
36164: LD_INT 0
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 2
36173: NEG
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 2
36185: NEG
36186: PUSH
36187: LD_INT 2
36189: NEG
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36209: LD_ADDR_VAR 0 53
36213: PUSH
36214: LD_INT 0
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: LD_INT 1
36229: NEG
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: LD_INT 1
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 0
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 1
36267: NEG
36268: PUSH
36269: LD_INT 0
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 1
36278: NEG
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: NEG
36291: PUSH
36292: LD_INT 2
36294: NEG
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: LD_INT 2
36305: NEG
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 2
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 2
36334: PUSH
36335: LD_INT 1
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 2
36344: PUSH
36345: LD_INT 2
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 0
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 1
36374: NEG
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 2
36385: NEG
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 2
36396: NEG
36397: PUSH
36398: LD_INT 1
36400: NEG
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 2
36408: NEG
36409: PUSH
36410: LD_INT 2
36412: NEG
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36439: LD_ADDR_VAR 0 54
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: LD_INT 1
36459: NEG
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: LD_INT 0
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: LD_INT 1
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: NEG
36509: PUSH
36510: LD_INT 1
36512: NEG
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: NEG
36521: PUSH
36522: LD_INT 2
36524: NEG
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: LD_INT 2
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: LD_INT 1
36546: NEG
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 2
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 2
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 2
36574: PUSH
36575: LD_INT 2
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: LD_INT 2
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: LD_INT 2
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 1
36604: NEG
36605: PUSH
36606: LD_INT 1
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 2
36615: NEG
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 2
36626: NEG
36627: PUSH
36628: LD_INT 1
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: NEG
36639: PUSH
36640: LD_INT 2
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36669: LD_ADDR_VAR 0 55
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: LD_INT 1
36689: NEG
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: PUSH
36708: LD_INT 1
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 0
36717: PUSH
36718: LD_INT 1
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: LD_INT 0
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 1
36738: NEG
36739: PUSH
36740: LD_INT 1
36742: NEG
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 1
36750: NEG
36751: PUSH
36752: LD_INT 2
36754: NEG
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 0
36762: PUSH
36763: LD_INT 2
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: PUSH
36774: LD_INT 1
36776: NEG
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 2
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 2
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 2
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: LD_INT 2
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 0
36824: PUSH
36825: LD_INT 2
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 1
36834: NEG
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 2
36845: NEG
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 2
36856: NEG
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 2
36868: NEG
36869: PUSH
36870: LD_INT 2
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36899: LD_ADDR_VAR 0 56
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: LD_INT 1
36919: NEG
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: LD_INT 0
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 1
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 0
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 1
36968: NEG
36969: PUSH
36970: LD_INT 1
36972: NEG
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: LD_INT 2
36984: NEG
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: LD_INT 2
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 2
37024: PUSH
37025: LD_INT 1
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 2
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 1
37044: PUSH
37045: LD_INT 2
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: LD_INT 2
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: NEG
37065: PUSH
37066: LD_INT 1
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 2
37075: NEG
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 2
37086: NEG
37087: PUSH
37088: LD_INT 1
37090: NEG
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 2
37098: NEG
37099: PUSH
37100: LD_INT 2
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37129: LD_ADDR_VAR 0 57
37133: PUSH
37134: LD_INT 0
37136: PUSH
37137: LD_INT 0
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: LD_INT 1
37149: NEG
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 1
37157: PUSH
37158: LD_INT 0
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: LD_INT 1
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: LD_INT 1
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 1
37198: NEG
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: LD_INT 2
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: LD_INT 2
37225: NEG
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: LD_INT 1
37236: NEG
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 2
37244: PUSH
37245: LD_INT 0
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 2
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 2
37264: PUSH
37265: LD_INT 2
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 1
37274: PUSH
37275: LD_INT 2
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 0
37284: PUSH
37285: LD_INT 2
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 1
37294: NEG
37295: PUSH
37296: LD_INT 1
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 2
37305: NEG
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 2
37316: NEG
37317: PUSH
37318: LD_INT 1
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 2
37328: NEG
37329: PUSH
37330: LD_INT 2
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37359: LD_ADDR_VAR 0 58
37363: PUSH
37364: LD_INT 0
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: LD_INT 0
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 1
37397: PUSH
37398: LD_INT 1
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 1
37417: NEG
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: LD_INT 2
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 0
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 1
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 2
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 2
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 2
37494: PUSH
37495: LD_INT 2
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: LD_INT 2
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: LD_INT 2
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 2
37535: NEG
37536: PUSH
37537: LD_INT 0
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 2
37546: NEG
37547: PUSH
37548: LD_INT 1
37550: NEG
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 2
37558: NEG
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37589: LD_ADDR_VAR 0 59
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37677: LD_ADDR_VAR 0 60
37681: PUSH
37682: LD_INT 0
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: LD_INT 1
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: LD_INT 0
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: LD_INT 1
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: NEG
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37765: LD_ADDR_VAR 0 61
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: LD_INT 1
37785: NEG
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: LD_INT 0
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: LD_INT 1
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: LD_INT 1
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: NEG
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37853: LD_ADDR_VAR 0 62
37857: PUSH
37858: LD_INT 0
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 0
37870: PUSH
37871: LD_INT 1
37873: NEG
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: LD_INT 0
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: LD_INT 1
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 0
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: NEG
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: LD_INT 1
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37941: LD_ADDR_VAR 0 63
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 0
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: LD_INT 0
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: LD_INT 1
38014: NEG
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38029: LD_ADDR_VAR 0 64
38033: PUSH
38034: LD_INT 0
38036: PUSH
38037: LD_INT 0
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: LD_INT 1
38049: NEG
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: LD_INT 1
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: LD_INT 1
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: LD_INT 0
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 1
38098: NEG
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: ST_TO_ADDR
// end ; 1 :
38117: GO 44014
38119: LD_INT 1
38121: DOUBLE
38122: EQUAL
38123: IFTRUE 38127
38125: GO 40750
38127: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38128: LD_ADDR_VAR 0 11
38132: PUSH
38133: LD_INT 1
38135: NEG
38136: PUSH
38137: LD_INT 3
38139: NEG
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: LD_INT 3
38150: NEG
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 1
38158: PUSH
38159: LD_INT 2
38161: NEG
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: LIST
38171: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38172: LD_ADDR_VAR 0 12
38176: PUSH
38177: LD_INT 2
38179: PUSH
38180: LD_INT 1
38182: NEG
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 3
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 3
38200: PUSH
38201: LD_INT 1
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: LIST
38212: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38213: LD_ADDR_VAR 0 13
38217: PUSH
38218: LD_INT 3
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 3
38230: PUSH
38231: LD_INT 3
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 2
38240: PUSH
38241: LD_INT 3
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: LIST
38252: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38253: LD_ADDR_VAR 0 14
38257: PUSH
38258: LD_INT 1
38260: PUSH
38261: LD_INT 3
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: LD_INT 3
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: LD_INT 2
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: LIST
38293: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38294: LD_ADDR_VAR 0 15
38298: PUSH
38299: LD_INT 2
38301: NEG
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 3
38312: NEG
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 3
38323: NEG
38324: PUSH
38325: LD_INT 1
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: LIST
38337: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38338: LD_ADDR_VAR 0 16
38342: PUSH
38343: LD_INT 2
38345: NEG
38346: PUSH
38347: LD_INT 3
38349: NEG
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 3
38357: NEG
38358: PUSH
38359: LD_INT 2
38361: NEG
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 3
38369: NEG
38370: PUSH
38371: LD_INT 3
38373: NEG
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: LIST
38383: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38384: LD_ADDR_VAR 0 17
38388: PUSH
38389: LD_INT 1
38391: NEG
38392: PUSH
38393: LD_INT 3
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: LD_INT 3
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: LD_INT 2
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: LIST
38427: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38428: LD_ADDR_VAR 0 18
38432: PUSH
38433: LD_INT 2
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 3
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 3
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: LIST
38468: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38469: LD_ADDR_VAR 0 19
38473: PUSH
38474: LD_INT 3
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 3
38486: PUSH
38487: LD_INT 3
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 2
38496: PUSH
38497: LD_INT 3
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: LIST
38508: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38509: LD_ADDR_VAR 0 20
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: LD_INT 3
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: LD_INT 3
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: LD_INT 2
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: LIST
38549: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38550: LD_ADDR_VAR 0 21
38554: PUSH
38555: LD_INT 2
38557: NEG
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 3
38568: NEG
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 3
38579: NEG
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: LIST
38593: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38594: LD_ADDR_VAR 0 22
38598: PUSH
38599: LD_INT 2
38601: NEG
38602: PUSH
38603: LD_INT 3
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 3
38613: NEG
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 3
38625: NEG
38626: PUSH
38627: LD_INT 3
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: LIST
38639: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38640: LD_ADDR_VAR 0 23
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: LD_INT 3
38650: NEG
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: LD_INT 4
38662: NEG
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: LD_INT 3
38673: NEG
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: LIST
38683: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38684: LD_ADDR_VAR 0 24
38688: PUSH
38689: LD_INT 3
38691: PUSH
38692: LD_INT 0
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 3
38701: PUSH
38702: LD_INT 1
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 4
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: LIST
38724: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38725: LD_ADDR_VAR 0 25
38729: PUSH
38730: LD_INT 3
38732: PUSH
38733: LD_INT 3
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 4
38742: PUSH
38743: LD_INT 3
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 3
38752: PUSH
38753: LD_INT 4
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: LIST
38764: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38765: LD_ADDR_VAR 0 26
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: LD_INT 3
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: LD_INT 4
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: NEG
38793: PUSH
38794: LD_INT 3
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: LIST
38805: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38806: LD_ADDR_VAR 0 27
38810: PUSH
38811: LD_INT 3
38813: NEG
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 3
38824: NEG
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 4
38835: NEG
38836: PUSH
38837: LD_INT 1
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38850: LD_ADDR_VAR 0 28
38854: PUSH
38855: LD_INT 3
38857: NEG
38858: PUSH
38859: LD_INT 3
38861: NEG
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 3
38869: NEG
38870: PUSH
38871: LD_INT 4
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 4
38881: NEG
38882: PUSH
38883: LD_INT 3
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: LIST
38895: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38896: LD_ADDR_VAR 0 29
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: LD_INT 3
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: LD_INT 3
38918: NEG
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: PUSH
38927: LD_INT 2
38929: NEG
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: LD_INT 4
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: LD_INT 4
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: LD_INT 3
38963: NEG
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: LD_INT 5
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: LD_INT 5
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: LD_INT 4
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: NEG
39006: PUSH
39007: LD_INT 6
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: LD_INT 6
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: LD_INT 5
39031: NEG
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39051: LD_ADDR_VAR 0 30
39055: PUSH
39056: LD_INT 2
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 3
39069: PUSH
39070: LD_INT 0
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 3
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 3
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 4
39100: PUSH
39101: LD_INT 0
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 4
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 4
39120: PUSH
39121: LD_INT 1
39123: NEG
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 5
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 5
39141: PUSH
39142: LD_INT 1
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 5
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 6
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 6
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39194: LD_ADDR_VAR 0 31
39198: PUSH
39199: LD_INT 3
39201: PUSH
39202: LD_INT 2
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 3
39211: PUSH
39212: LD_INT 3
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 2
39221: PUSH
39222: LD_INT 3
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 4
39231: PUSH
39232: LD_INT 3
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 4
39241: PUSH
39242: LD_INT 4
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 3
39251: PUSH
39252: LD_INT 4
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 5
39261: PUSH
39262: LD_INT 4
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 5
39271: PUSH
39272: LD_INT 5
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 4
39281: PUSH
39282: LD_INT 5
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 6
39291: PUSH
39292: LD_INT 5
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 6
39301: PUSH
39302: LD_INT 6
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 5
39311: PUSH
39312: LD_INT 6
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39333: LD_ADDR_VAR 0 32
39337: PUSH
39338: LD_INT 1
39340: PUSH
39341: LD_INT 3
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: LD_INT 3
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: LD_INT 4
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: LD_INT 4
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: LD_INT 3
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: LD_INT 5
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: LD_INT 5
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: LD_INT 4
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: PUSH
39434: LD_INT 6
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: LD_INT 6
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: LD_INT 5
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39476: LD_ADDR_VAR 0 33
39480: PUSH
39481: LD_INT 2
39483: NEG
39484: PUSH
39485: LD_INT 1
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 3
39494: NEG
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 3
39505: NEG
39506: PUSH
39507: LD_INT 1
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 3
39517: NEG
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 4
39528: NEG
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 4
39539: NEG
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 4
39551: NEG
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 5
39562: NEG
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 5
39573: NEG
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 5
39585: NEG
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 6
39596: NEG
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 6
39607: NEG
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39631: LD_ADDR_VAR 0 34
39635: PUSH
39636: LD_INT 2
39638: NEG
39639: PUSH
39640: LD_INT 3
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 3
39650: NEG
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 3
39662: NEG
39663: PUSH
39664: LD_INT 3
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 3
39674: NEG
39675: PUSH
39676: LD_INT 4
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 4
39686: NEG
39687: PUSH
39688: LD_INT 3
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 4
39698: NEG
39699: PUSH
39700: LD_INT 4
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 4
39710: NEG
39711: PUSH
39712: LD_INT 5
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 5
39722: NEG
39723: PUSH
39724: LD_INT 4
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 5
39734: NEG
39735: PUSH
39736: LD_INT 5
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 5
39746: NEG
39747: PUSH
39748: LD_INT 6
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 6
39758: NEG
39759: PUSH
39760: LD_INT 5
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 6
39770: NEG
39771: PUSH
39772: LD_INT 6
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39794: LD_ADDR_VAR 0 41
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: LD_INT 2
39804: NEG
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: LD_INT 3
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: LD_INT 2
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: LIST
39837: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39838: LD_ADDR_VAR 0 42
39842: PUSH
39843: LD_INT 2
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 3
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: LIST
39878: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39879: LD_ADDR_VAR 0 43
39883: PUSH
39884: LD_INT 2
39886: PUSH
39887: LD_INT 2
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 3
39896: PUSH
39897: LD_INT 2
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 2
39906: PUSH
39907: LD_INT 3
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: LIST
39918: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39919: LD_ADDR_VAR 0 44
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: PUSH
39937: LD_INT 3
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: LD_INT 2
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: LIST
39959: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39960: LD_ADDR_VAR 0 45
39964: PUSH
39965: LD_INT 2
39967: NEG
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 2
39978: NEG
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 3
39989: NEG
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40004: LD_ADDR_VAR 0 46
40008: PUSH
40009: LD_INT 2
40011: NEG
40012: PUSH
40013: LD_INT 2
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 2
40023: NEG
40024: PUSH
40025: LD_INT 3
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 3
40035: NEG
40036: PUSH
40037: LD_INT 2
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: LIST
40049: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40050: LD_ADDR_VAR 0 47
40054: PUSH
40055: LD_INT 2
40057: NEG
40058: PUSH
40059: LD_INT 3
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: NEG
40070: PUSH
40071: LD_INT 3
40073: NEG
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40083: LD_ADDR_VAR 0 48
40087: PUSH
40088: LD_INT 1
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40114: LD_ADDR_VAR 0 49
40118: PUSH
40119: LD_INT 3
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 3
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40143: LD_ADDR_VAR 0 50
40147: PUSH
40148: LD_INT 2
40150: PUSH
40151: LD_INT 3
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: LD_INT 3
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40172: LD_ADDR_VAR 0 51
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: LD_INT 2
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40203: LD_ADDR_VAR 0 52
40207: PUSH
40208: LD_INT 3
40210: NEG
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 3
40222: NEG
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40236: LD_ADDR_VAR 0 53
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: LD_INT 3
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 3
40258: NEG
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: LD_INT 2
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: LIST
40279: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40280: LD_ADDR_VAR 0 54
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 3
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 3
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: LIST
40320: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40321: LD_ADDR_VAR 0 55
40325: PUSH
40326: LD_INT 3
40328: PUSH
40329: LD_INT 2
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 3
40338: PUSH
40339: LD_INT 3
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 2
40348: PUSH
40349: LD_INT 3
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: LIST
40360: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40361: LD_ADDR_VAR 0 56
40365: PUSH
40366: LD_INT 1
40368: PUSH
40369: LD_INT 3
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: LD_INT 3
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: LD_INT 2
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: LIST
40401: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40402: LD_ADDR_VAR 0 57
40406: PUSH
40407: LD_INT 2
40409: NEG
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 3
40420: NEG
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 3
40431: NEG
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: LIST
40445: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40446: LD_ADDR_VAR 0 58
40450: PUSH
40451: LD_INT 2
40453: NEG
40454: PUSH
40455: LD_INT 3
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 3
40465: NEG
40466: PUSH
40467: LD_INT 2
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 3
40477: NEG
40478: PUSH
40479: LD_INT 3
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: LIST
40491: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40492: LD_ADDR_VAR 0 59
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: PUSH
40501: LD_INT 2
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: LD_INT 2
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40536: LD_ADDR_VAR 0 60
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 2
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 2
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: LIST
40576: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40577: LD_ADDR_VAR 0 61
40581: PUSH
40582: LD_INT 2
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: LD_INT 2
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: LD_INT 2
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: LIST
40616: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40617: LD_ADDR_VAR 0 62
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: LD_INT 2
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 2
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: NEG
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: LIST
40657: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40658: LD_ADDR_VAR 0 63
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 2
40676: NEG
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 2
40687: NEG
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: LIST
40701: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40702: LD_ADDR_VAR 0 64
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: LD_INT 2
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: NEG
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 2
40733: NEG
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: LIST
40747: ST_TO_ADDR
// end ; 2 :
40748: GO 44014
40750: LD_INT 2
40752: DOUBLE
40753: EQUAL
40754: IFTRUE 40758
40756: GO 44013
40758: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40759: LD_ADDR_VAR 0 29
40763: PUSH
40764: LD_INT 4
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 4
40776: PUSH
40777: LD_INT 1
40779: NEG
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 5
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 5
40797: PUSH
40798: LD_INT 1
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 4
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 3
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 3
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 3
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 5
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 3
40859: PUSH
40860: LD_INT 3
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 3
40869: PUSH
40870: LD_INT 2
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 4
40879: PUSH
40880: LD_INT 3
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 4
40889: PUSH
40890: LD_INT 4
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 3
40899: PUSH
40900: LD_INT 4
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: LD_INT 3
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 2
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 4
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 2
40939: PUSH
40940: LD_INT 4
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: LD_INT 4
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: LD_INT 3
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: LD_INT 4
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: PUSH
40980: LD_INT 5
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: LD_INT 5
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: LD_INT 4
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: LD_INT 3
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 2
41021: PUSH
41022: LD_INT 5
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 2
41031: NEG
41032: PUSH
41033: LD_INT 3
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 3
41042: NEG
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 3
41053: NEG
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 2
41065: NEG
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 2
41076: NEG
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 3
41087: NEG
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 4
41098: NEG
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 4
41109: NEG
41110: PUSH
41111: LD_INT 1
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 4
41121: NEG
41122: PUSH
41123: LD_INT 2
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 2
41133: NEG
41134: PUSH
41135: LD_INT 2
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 4
41144: NEG
41145: PUSH
41146: LD_INT 4
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 4
41156: NEG
41157: PUSH
41158: LD_INT 5
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 3
41168: NEG
41169: PUSH
41170: LD_INT 4
41172: NEG
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 3
41180: NEG
41181: PUSH
41182: LD_INT 3
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 4
41192: NEG
41193: PUSH
41194: LD_INT 3
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 5
41204: NEG
41205: PUSH
41206: LD_INT 4
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 5
41216: NEG
41217: PUSH
41218: LD_INT 5
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 3
41228: NEG
41229: PUSH
41230: LD_INT 5
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 5
41240: NEG
41241: PUSH
41242: LD_INT 3
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41297: LD_ADDR_VAR 0 30
41301: PUSH
41302: LD_INT 4
41304: PUSH
41305: LD_INT 4
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 4
41314: PUSH
41315: LD_INT 3
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 5
41324: PUSH
41325: LD_INT 4
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 5
41334: PUSH
41335: LD_INT 5
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 4
41344: PUSH
41345: LD_INT 5
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 3
41354: PUSH
41355: LD_INT 4
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 3
41364: PUSH
41365: LD_INT 3
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 5
41374: PUSH
41375: LD_INT 3
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 3
41384: PUSH
41385: LD_INT 5
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: LD_INT 3
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: LD_INT 2
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: LD_INT 3
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: LD_INT 4
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 4
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: LD_INT 3
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: NEG
41456: PUSH
41457: LD_INT 2
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: LD_INT 4
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 2
41476: NEG
41477: PUSH
41478: LD_INT 2
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 4
41487: NEG
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 4
41498: NEG
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 3
41510: NEG
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 3
41521: NEG
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 4
41532: NEG
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 5
41543: NEG
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 5
41554: NEG
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 5
41566: NEG
41567: PUSH
41568: LD_INT 2
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 3
41578: NEG
41579: PUSH
41580: LD_INT 2
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 3
41589: NEG
41590: PUSH
41591: LD_INT 3
41593: NEG
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 3
41601: NEG
41602: PUSH
41603: LD_INT 4
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 2
41613: NEG
41614: PUSH
41615: LD_INT 3
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 2
41625: NEG
41626: PUSH
41627: LD_INT 2
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 3
41637: NEG
41638: PUSH
41639: LD_INT 2
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 4
41649: NEG
41650: PUSH
41651: LD_INT 3
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 4
41661: NEG
41662: PUSH
41663: LD_INT 4
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 2
41673: NEG
41674: PUSH
41675: LD_INT 4
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 4
41685: NEG
41686: PUSH
41687: LD_INT 2
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: LD_INT 4
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 0
41708: PUSH
41709: LD_INT 5
41711: NEG
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: LD_INT 4
41722: NEG
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: LD_INT 3
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: LD_INT 3
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: LD_INT 4
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: LD_INT 5
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 2
41776: PUSH
41777: LD_INT 3
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 2
41787: NEG
41788: PUSH
41789: LD_INT 5
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41844: LD_ADDR_VAR 0 31
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: LD_INT 4
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: LD_INT 3
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: LD_INT 4
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: LD_INT 5
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 5
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: LD_INT 4
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: LD_INT 3
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: LD_INT 5
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: LD_INT 3
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 3
41944: NEG
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 3
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: NEG
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 2
41978: NEG
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 3
41989: NEG
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 4
42000: NEG
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 4
42011: NEG
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 4
42023: NEG
42024: PUSH
42025: LD_INT 2
42027: NEG
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 2
42035: NEG
42036: PUSH
42037: LD_INT 2
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 4
42046: NEG
42047: PUSH
42048: LD_INT 4
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 4
42058: NEG
42059: PUSH
42060: LD_INT 5
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 3
42070: NEG
42071: PUSH
42072: LD_INT 4
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 3
42082: NEG
42083: PUSH
42084: LD_INT 3
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 4
42094: NEG
42095: PUSH
42096: LD_INT 3
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 5
42106: NEG
42107: PUSH
42108: LD_INT 4
42110: NEG
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 5
42118: NEG
42119: PUSH
42120: LD_INT 5
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 3
42130: NEG
42131: PUSH
42132: LD_INT 5
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 5
42142: NEG
42143: PUSH
42144: LD_INT 3
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: LD_INT 3
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: LD_INT 4
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: LD_INT 3
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: LD_INT 2
42190: NEG
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: LD_INT 3
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: LD_INT 4
42225: NEG
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 2
42233: PUSH
42234: LD_INT 2
42236: NEG
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: LD_INT 4
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 4
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 4
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 5
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 5
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 4
42297: PUSH
42298: LD_INT 1
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 3
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 3
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 3
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 5
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42394: LD_ADDR_VAR 0 32
42398: PUSH
42399: LD_INT 4
42401: NEG
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 4
42412: NEG
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 3
42424: NEG
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 3
42435: NEG
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 4
42446: NEG
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 5
42457: NEG
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 5
42468: NEG
42469: PUSH
42470: LD_INT 1
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 5
42480: NEG
42481: PUSH
42482: LD_INT 2
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 3
42492: NEG
42493: PUSH
42494: LD_INT 2
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 3
42503: NEG
42504: PUSH
42505: LD_INT 3
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 3
42515: NEG
42516: PUSH
42517: LD_INT 4
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 2
42527: NEG
42528: PUSH
42529: LD_INT 3
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 2
42539: NEG
42540: PUSH
42541: LD_INT 2
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 3
42551: NEG
42552: PUSH
42553: LD_INT 2
42555: NEG
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 4
42563: NEG
42564: PUSH
42565: LD_INT 3
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 4
42575: NEG
42576: PUSH
42577: LD_INT 4
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 2
42587: NEG
42588: PUSH
42589: LD_INT 4
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 4
42599: NEG
42600: PUSH
42601: LD_INT 2
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: LD_INT 4
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: LD_INT 5
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: LD_INT 4
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: LD_INT 3
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 0
42655: PUSH
42656: LD_INT 3
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: LD_INT 4
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: LD_INT 5
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 3
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 2
42701: NEG
42702: PUSH
42703: LD_INT 5
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 3
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 3
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 4
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 4
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 3
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 2
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 2
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 2
42785: PUSH
42786: LD_INT 2
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 4
42796: PUSH
42797: LD_INT 2
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 4
42806: PUSH
42807: LD_INT 4
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 4
42816: PUSH
42817: LD_INT 3
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 5
42826: PUSH
42827: LD_INT 4
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 5
42836: PUSH
42837: LD_INT 5
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 4
42846: PUSH
42847: LD_INT 5
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 3
42856: PUSH
42857: LD_INT 4
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 3
42866: PUSH
42867: LD_INT 3
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 5
42876: PUSH
42877: LD_INT 3
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 3
42886: PUSH
42887: LD_INT 5
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42941: LD_ADDR_VAR 0 33
42945: PUSH
42946: LD_INT 4
42948: NEG
42949: PUSH
42950: LD_INT 4
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 4
42960: NEG
42961: PUSH
42962: LD_INT 5
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 3
42972: NEG
42973: PUSH
42974: LD_INT 4
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 3
42984: NEG
42985: PUSH
42986: LD_INT 3
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 4
42996: NEG
42997: PUSH
42998: LD_INT 3
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 5
43008: NEG
43009: PUSH
43010: LD_INT 4
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 5
43020: NEG
43021: PUSH
43022: LD_INT 5
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 3
43032: NEG
43033: PUSH
43034: LD_INT 5
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 5
43044: NEG
43045: PUSH
43046: LD_INT 3
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: LD_INT 3
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: LD_INT 4
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: LD_INT 3
43081: NEG
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: LD_INT 2
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: LD_INT 2
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: LD_INT 3
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: LD_INT 4
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: NEG
43147: PUSH
43148: LD_INT 4
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 4
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 4
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 5
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 5
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 4
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 3
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 3
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 3
43230: PUSH
43231: LD_INT 2
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 5
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 3
43251: PUSH
43252: LD_INT 3
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 3
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 4
43271: PUSH
43272: LD_INT 3
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 4
43281: PUSH
43282: LD_INT 4
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 3
43291: PUSH
43292: LD_INT 4
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 2
43301: PUSH
43302: LD_INT 3
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 2
43311: PUSH
43312: LD_INT 2
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 4
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: LD_INT 4
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 0
43341: PUSH
43342: LD_INT 4
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: LD_INT 3
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: LD_INT 4
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: LD_INT 5
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: LD_INT 5
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: LD_INT 4
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: LD_INT 3
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 5
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: LD_INT 3
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43479: LD_ADDR_VAR 0 34
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: LD_INT 4
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: LD_INT 5
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: LD_INT 4
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: LD_INT 3
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: LD_INT 3
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: NEG
43542: PUSH
43543: LD_INT 4
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: LD_INT 5
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 2
43565: PUSH
43566: LD_INT 3
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: LD_INT 5
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 3
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 3
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 4
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 4
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 3
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 2
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 2
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 4
43671: PUSH
43672: LD_INT 2
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 4
43681: PUSH
43682: LD_INT 4
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 4
43691: PUSH
43692: LD_INT 3
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 5
43701: PUSH
43702: LD_INT 4
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 5
43711: PUSH
43712: LD_INT 5
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 4
43721: PUSH
43722: LD_INT 5
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 3
43731: PUSH
43732: LD_INT 4
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 3
43741: PUSH
43742: LD_INT 3
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 5
43751: PUSH
43752: LD_INT 3
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 3
43761: PUSH
43762: LD_INT 5
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: LD_INT 3
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 2
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: LD_INT 3
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: LD_INT 4
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: LD_INT 4
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: LD_INT 3
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: LD_INT 2
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: LD_INT 4
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 2
43853: NEG
43854: PUSH
43855: LD_INT 2
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 4
43864: NEG
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 4
43875: NEG
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 3
43887: NEG
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 3
43898: NEG
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 4
43909: NEG
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 5
43920: NEG
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 5
43931: NEG
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 5
43943: NEG
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 3
43955: NEG
43956: PUSH
43957: LD_INT 2
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: ST_TO_ADDR
// end ; end ;
44011: GO 44014
44013: POP
// case btype of b_depot , b_warehouse :
44014: LD_VAR 0 1
44018: PUSH
44019: LD_INT 0
44021: DOUBLE
44022: EQUAL
44023: IFTRUE 44033
44025: LD_INT 1
44027: DOUBLE
44028: EQUAL
44029: IFTRUE 44033
44031: GO 44234
44033: POP
// case nation of nation_american :
44034: LD_VAR 0 5
44038: PUSH
44039: LD_INT 1
44041: DOUBLE
44042: EQUAL
44043: IFTRUE 44047
44045: GO 44103
44047: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
44048: LD_ADDR_VAR 0 9
44052: PUSH
44053: LD_VAR 0 11
44057: PUSH
44058: LD_VAR 0 12
44062: PUSH
44063: LD_VAR 0 13
44067: PUSH
44068: LD_VAR 0 14
44072: PUSH
44073: LD_VAR 0 15
44077: PUSH
44078: LD_VAR 0 16
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: PUSH
44091: LD_VAR 0 4
44095: PUSH
44096: LD_INT 1
44098: PLUS
44099: ARRAY
44100: ST_TO_ADDR
44101: GO 44232
44103: LD_INT 2
44105: DOUBLE
44106: EQUAL
44107: IFTRUE 44111
44109: GO 44167
44111: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
44112: LD_ADDR_VAR 0 9
44116: PUSH
44117: LD_VAR 0 17
44121: PUSH
44122: LD_VAR 0 18
44126: PUSH
44127: LD_VAR 0 19
44131: PUSH
44132: LD_VAR 0 20
44136: PUSH
44137: LD_VAR 0 21
44141: PUSH
44142: LD_VAR 0 22
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: PUSH
44155: LD_VAR 0 4
44159: PUSH
44160: LD_INT 1
44162: PLUS
44163: ARRAY
44164: ST_TO_ADDR
44165: GO 44232
44167: LD_INT 3
44169: DOUBLE
44170: EQUAL
44171: IFTRUE 44175
44173: GO 44231
44175: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44176: LD_ADDR_VAR 0 9
44180: PUSH
44181: LD_VAR 0 23
44185: PUSH
44186: LD_VAR 0 24
44190: PUSH
44191: LD_VAR 0 25
44195: PUSH
44196: LD_VAR 0 26
44200: PUSH
44201: LD_VAR 0 27
44205: PUSH
44206: LD_VAR 0 28
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: PUSH
44219: LD_VAR 0 4
44223: PUSH
44224: LD_INT 1
44226: PLUS
44227: ARRAY
44228: ST_TO_ADDR
44229: GO 44232
44231: POP
44232: GO 44781
44234: LD_INT 2
44236: DOUBLE
44237: EQUAL
44238: IFTRUE 44248
44240: LD_INT 3
44242: DOUBLE
44243: EQUAL
44244: IFTRUE 44248
44246: GO 44304
44248: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44249: LD_ADDR_VAR 0 9
44253: PUSH
44254: LD_VAR 0 29
44258: PUSH
44259: LD_VAR 0 30
44263: PUSH
44264: LD_VAR 0 31
44268: PUSH
44269: LD_VAR 0 32
44273: PUSH
44274: LD_VAR 0 33
44278: PUSH
44279: LD_VAR 0 34
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: PUSH
44292: LD_VAR 0 4
44296: PUSH
44297: LD_INT 1
44299: PLUS
44300: ARRAY
44301: ST_TO_ADDR
44302: GO 44781
44304: LD_INT 16
44306: DOUBLE
44307: EQUAL
44308: IFTRUE 44360
44310: LD_INT 17
44312: DOUBLE
44313: EQUAL
44314: IFTRUE 44360
44316: LD_INT 18
44318: DOUBLE
44319: EQUAL
44320: IFTRUE 44360
44322: LD_INT 19
44324: DOUBLE
44325: EQUAL
44326: IFTRUE 44360
44328: LD_INT 20
44330: DOUBLE
44331: EQUAL
44332: IFTRUE 44360
44334: LD_INT 21
44336: DOUBLE
44337: EQUAL
44338: IFTRUE 44360
44340: LD_INT 23
44342: DOUBLE
44343: EQUAL
44344: IFTRUE 44360
44346: LD_INT 24
44348: DOUBLE
44349: EQUAL
44350: IFTRUE 44360
44352: LD_INT 25
44354: DOUBLE
44355: EQUAL
44356: IFTRUE 44360
44358: GO 44416
44360: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44361: LD_ADDR_VAR 0 9
44365: PUSH
44366: LD_VAR 0 35
44370: PUSH
44371: LD_VAR 0 36
44375: PUSH
44376: LD_VAR 0 37
44380: PUSH
44381: LD_VAR 0 38
44385: PUSH
44386: LD_VAR 0 39
44390: PUSH
44391: LD_VAR 0 40
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: PUSH
44404: LD_VAR 0 4
44408: PUSH
44409: LD_INT 1
44411: PLUS
44412: ARRAY
44413: ST_TO_ADDR
44414: GO 44781
44416: LD_INT 6
44418: DOUBLE
44419: EQUAL
44420: IFTRUE 44472
44422: LD_INT 7
44424: DOUBLE
44425: EQUAL
44426: IFTRUE 44472
44428: LD_INT 8
44430: DOUBLE
44431: EQUAL
44432: IFTRUE 44472
44434: LD_INT 13
44436: DOUBLE
44437: EQUAL
44438: IFTRUE 44472
44440: LD_INT 12
44442: DOUBLE
44443: EQUAL
44444: IFTRUE 44472
44446: LD_INT 15
44448: DOUBLE
44449: EQUAL
44450: IFTRUE 44472
44452: LD_INT 11
44454: DOUBLE
44455: EQUAL
44456: IFTRUE 44472
44458: LD_INT 14
44460: DOUBLE
44461: EQUAL
44462: IFTRUE 44472
44464: LD_INT 10
44466: DOUBLE
44467: EQUAL
44468: IFTRUE 44472
44470: GO 44528
44472: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
44473: LD_ADDR_VAR 0 9
44477: PUSH
44478: LD_VAR 0 41
44482: PUSH
44483: LD_VAR 0 42
44487: PUSH
44488: LD_VAR 0 43
44492: PUSH
44493: LD_VAR 0 44
44497: PUSH
44498: LD_VAR 0 45
44502: PUSH
44503: LD_VAR 0 46
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: PUSH
44516: LD_VAR 0 4
44520: PUSH
44521: LD_INT 1
44523: PLUS
44524: ARRAY
44525: ST_TO_ADDR
44526: GO 44781
44528: LD_INT 36
44530: DOUBLE
44531: EQUAL
44532: IFTRUE 44536
44534: GO 44592
44536: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44537: LD_ADDR_VAR 0 9
44541: PUSH
44542: LD_VAR 0 47
44546: PUSH
44547: LD_VAR 0 48
44551: PUSH
44552: LD_VAR 0 49
44556: PUSH
44557: LD_VAR 0 50
44561: PUSH
44562: LD_VAR 0 51
44566: PUSH
44567: LD_VAR 0 52
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: PUSH
44580: LD_VAR 0 4
44584: PUSH
44585: LD_INT 1
44587: PLUS
44588: ARRAY
44589: ST_TO_ADDR
44590: GO 44781
44592: LD_INT 4
44594: DOUBLE
44595: EQUAL
44596: IFTRUE 44618
44598: LD_INT 5
44600: DOUBLE
44601: EQUAL
44602: IFTRUE 44618
44604: LD_INT 34
44606: DOUBLE
44607: EQUAL
44608: IFTRUE 44618
44610: LD_INT 37
44612: DOUBLE
44613: EQUAL
44614: IFTRUE 44618
44616: GO 44674
44618: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44619: LD_ADDR_VAR 0 9
44623: PUSH
44624: LD_VAR 0 53
44628: PUSH
44629: LD_VAR 0 54
44633: PUSH
44634: LD_VAR 0 55
44638: PUSH
44639: LD_VAR 0 56
44643: PUSH
44644: LD_VAR 0 57
44648: PUSH
44649: LD_VAR 0 58
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: PUSH
44662: LD_VAR 0 4
44666: PUSH
44667: LD_INT 1
44669: PLUS
44670: ARRAY
44671: ST_TO_ADDR
44672: GO 44781
44674: LD_INT 31
44676: DOUBLE
44677: EQUAL
44678: IFTRUE 44724
44680: LD_INT 32
44682: DOUBLE
44683: EQUAL
44684: IFTRUE 44724
44686: LD_INT 33
44688: DOUBLE
44689: EQUAL
44690: IFTRUE 44724
44692: LD_INT 27
44694: DOUBLE
44695: EQUAL
44696: IFTRUE 44724
44698: LD_INT 26
44700: DOUBLE
44701: EQUAL
44702: IFTRUE 44724
44704: LD_INT 28
44706: DOUBLE
44707: EQUAL
44708: IFTRUE 44724
44710: LD_INT 29
44712: DOUBLE
44713: EQUAL
44714: IFTRUE 44724
44716: LD_INT 30
44718: DOUBLE
44719: EQUAL
44720: IFTRUE 44724
44722: GO 44780
44724: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
44725: LD_ADDR_VAR 0 9
44729: PUSH
44730: LD_VAR 0 59
44734: PUSH
44735: LD_VAR 0 60
44739: PUSH
44740: LD_VAR 0 61
44744: PUSH
44745: LD_VAR 0 62
44749: PUSH
44750: LD_VAR 0 63
44754: PUSH
44755: LD_VAR 0 64
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: PUSH
44768: LD_VAR 0 4
44772: PUSH
44773: LD_INT 1
44775: PLUS
44776: ARRAY
44777: ST_TO_ADDR
44778: GO 44781
44780: POP
// temp_list2 = [ ] ;
44781: LD_ADDR_VAR 0 10
44785: PUSH
44786: EMPTY
44787: ST_TO_ADDR
// for i in temp_list do
44788: LD_ADDR_VAR 0 8
44792: PUSH
44793: LD_VAR 0 9
44797: PUSH
44798: FOR_IN
44799: IFFALSE 44851
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44801: LD_ADDR_VAR 0 10
44805: PUSH
44806: LD_VAR 0 10
44810: PUSH
44811: LD_VAR 0 8
44815: PUSH
44816: LD_INT 1
44818: ARRAY
44819: PUSH
44820: LD_VAR 0 2
44824: PLUS
44825: PUSH
44826: LD_VAR 0 8
44830: PUSH
44831: LD_INT 2
44833: ARRAY
44834: PUSH
44835: LD_VAR 0 3
44839: PLUS
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: EMPTY
44846: LIST
44847: ADD
44848: ST_TO_ADDR
44849: GO 44798
44851: POP
44852: POP
// result = temp_list2 ;
44853: LD_ADDR_VAR 0 7
44857: PUSH
44858: LD_VAR 0 10
44862: ST_TO_ADDR
// end ;
44863: LD_VAR 0 7
44867: RET
// export function EnemyInRange ( unit , dist ) ; begin
44868: LD_INT 0
44870: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44871: LD_ADDR_VAR 0 3
44875: PUSH
44876: LD_VAR 0 1
44880: PPUSH
44881: CALL_OW 255
44885: PPUSH
44886: LD_VAR 0 1
44890: PPUSH
44891: CALL_OW 250
44895: PPUSH
44896: LD_VAR 0 1
44900: PPUSH
44901: CALL_OW 251
44905: PPUSH
44906: LD_VAR 0 2
44910: PPUSH
44911: CALL 19535 0 4
44915: PUSH
44916: LD_INT 4
44918: ARRAY
44919: ST_TO_ADDR
// end ;
44920: LD_VAR 0 3
44924: RET
// export function PlayerSeeMe ( unit ) ; begin
44925: LD_INT 0
44927: PPUSH
// result := See ( your_side , unit ) ;
44928: LD_ADDR_VAR 0 2
44932: PUSH
44933: LD_OWVAR 2
44937: PPUSH
44938: LD_VAR 0 1
44942: PPUSH
44943: CALL_OW 292
44947: ST_TO_ADDR
// end ;
44948: LD_VAR 0 2
44952: RET
// export function ReverseDir ( unit ) ; begin
44953: LD_INT 0
44955: PPUSH
// if not unit then
44956: LD_VAR 0 1
44960: NOT
44961: IFFALSE 44965
// exit ;
44963: GO 45011
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
44965: LD_ADDR_VAR 0 2
44969: PUSH
44970: LD_INT 3
44972: PUSH
44973: LD_INT 4
44975: PUSH
44976: LD_INT 5
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: PUSH
44996: LD_VAR 0 1
45000: PPUSH
45001: CALL_OW 254
45005: PUSH
45006: LD_INT 1
45008: PLUS
45009: ARRAY
45010: ST_TO_ADDR
// end ;
45011: LD_VAR 0 2
45015: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45016: LD_INT 0
45018: PPUSH
45019: PPUSH
45020: PPUSH
45021: PPUSH
45022: PPUSH
// if not hexes then
45023: LD_VAR 0 2
45027: NOT
45028: IFFALSE 45032
// exit ;
45030: GO 45180
// dist := 9999 ;
45032: LD_ADDR_VAR 0 5
45036: PUSH
45037: LD_INT 9999
45039: ST_TO_ADDR
// for i = 1 to hexes do
45040: LD_ADDR_VAR 0 4
45044: PUSH
45045: DOUBLE
45046: LD_INT 1
45048: DEC
45049: ST_TO_ADDR
45050: LD_VAR 0 2
45054: PUSH
45055: FOR_TO
45056: IFFALSE 45168
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45058: LD_VAR 0 1
45062: PPUSH
45063: LD_VAR 0 2
45067: PUSH
45068: LD_VAR 0 4
45072: ARRAY
45073: PUSH
45074: LD_INT 1
45076: ARRAY
45077: PPUSH
45078: LD_VAR 0 2
45082: PUSH
45083: LD_VAR 0 4
45087: ARRAY
45088: PUSH
45089: LD_INT 2
45091: ARRAY
45092: PPUSH
45093: CALL_OW 297
45097: PUSH
45098: LD_VAR 0 5
45102: LESS
45103: IFFALSE 45166
// begin hex := hexes [ i ] ;
45105: LD_ADDR_VAR 0 7
45109: PUSH
45110: LD_VAR 0 2
45114: PUSH
45115: LD_VAR 0 4
45119: ARRAY
45120: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45121: LD_ADDR_VAR 0 5
45125: PUSH
45126: LD_VAR 0 1
45130: PPUSH
45131: LD_VAR 0 2
45135: PUSH
45136: LD_VAR 0 4
45140: ARRAY
45141: PUSH
45142: LD_INT 1
45144: ARRAY
45145: PPUSH
45146: LD_VAR 0 2
45150: PUSH
45151: LD_VAR 0 4
45155: ARRAY
45156: PUSH
45157: LD_INT 2
45159: ARRAY
45160: PPUSH
45161: CALL_OW 297
45165: ST_TO_ADDR
// end ; end ;
45166: GO 45055
45168: POP
45169: POP
// result := hex ;
45170: LD_ADDR_VAR 0 3
45174: PUSH
45175: LD_VAR 0 7
45179: ST_TO_ADDR
// end ;
45180: LD_VAR 0 3
45184: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45185: LD_INT 0
45187: PPUSH
45188: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45189: LD_VAR 0 1
45193: NOT
45194: PUSH
45195: LD_VAR 0 1
45199: PUSH
45200: LD_INT 21
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 23
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PPUSH
45224: CALL_OW 69
45228: IN
45229: NOT
45230: OR
45231: IFFALSE 45235
// exit ;
45233: GO 45282
// for i = 1 to 3 do
45235: LD_ADDR_VAR 0 3
45239: PUSH
45240: DOUBLE
45241: LD_INT 1
45243: DEC
45244: ST_TO_ADDR
45245: LD_INT 3
45247: PUSH
45248: FOR_TO
45249: IFFALSE 45280
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45251: LD_VAR 0 1
45255: PPUSH
45256: CALL_OW 250
45260: PPUSH
45261: LD_VAR 0 1
45265: PPUSH
45266: CALL_OW 251
45270: PPUSH
45271: LD_INT 1
45273: PPUSH
45274: CALL_OW 453
45278: GO 45248
45280: POP
45281: POP
// end ;
45282: LD_VAR 0 2
45286: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45287: LD_INT 0
45289: PPUSH
45290: PPUSH
45291: PPUSH
45292: PPUSH
45293: PPUSH
45294: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45295: LD_VAR 0 1
45299: NOT
45300: PUSH
45301: LD_VAR 0 2
45305: NOT
45306: OR
45307: PUSH
45308: LD_VAR 0 1
45312: PPUSH
45313: CALL_OW 314
45317: OR
45318: IFFALSE 45322
// exit ;
45320: GO 45763
// x := GetX ( enemy_unit ) ;
45322: LD_ADDR_VAR 0 7
45326: PUSH
45327: LD_VAR 0 2
45331: PPUSH
45332: CALL_OW 250
45336: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45337: LD_ADDR_VAR 0 8
45341: PUSH
45342: LD_VAR 0 2
45346: PPUSH
45347: CALL_OW 251
45351: ST_TO_ADDR
// if not x or not y then
45352: LD_VAR 0 7
45356: NOT
45357: PUSH
45358: LD_VAR 0 8
45362: NOT
45363: OR
45364: IFFALSE 45368
// exit ;
45366: GO 45763
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45368: LD_ADDR_VAR 0 6
45372: PUSH
45373: LD_VAR 0 7
45377: PPUSH
45378: LD_INT 0
45380: PPUSH
45381: LD_INT 4
45383: PPUSH
45384: CALL_OW 272
45388: PUSH
45389: LD_VAR 0 8
45393: PPUSH
45394: LD_INT 0
45396: PPUSH
45397: LD_INT 4
45399: PPUSH
45400: CALL_OW 273
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_VAR 0 7
45413: PPUSH
45414: LD_INT 1
45416: PPUSH
45417: LD_INT 4
45419: PPUSH
45420: CALL_OW 272
45424: PUSH
45425: LD_VAR 0 8
45429: PPUSH
45430: LD_INT 1
45432: PPUSH
45433: LD_INT 4
45435: PPUSH
45436: CALL_OW 273
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_VAR 0 7
45449: PPUSH
45450: LD_INT 2
45452: PPUSH
45453: LD_INT 4
45455: PPUSH
45456: CALL_OW 272
45460: PUSH
45461: LD_VAR 0 8
45465: PPUSH
45466: LD_INT 2
45468: PPUSH
45469: LD_INT 4
45471: PPUSH
45472: CALL_OW 273
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_VAR 0 7
45485: PPUSH
45486: LD_INT 3
45488: PPUSH
45489: LD_INT 4
45491: PPUSH
45492: CALL_OW 272
45496: PUSH
45497: LD_VAR 0 8
45501: PPUSH
45502: LD_INT 3
45504: PPUSH
45505: LD_INT 4
45507: PPUSH
45508: CALL_OW 273
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_VAR 0 7
45521: PPUSH
45522: LD_INT 4
45524: PPUSH
45525: LD_INT 4
45527: PPUSH
45528: CALL_OW 272
45532: PUSH
45533: LD_VAR 0 8
45537: PPUSH
45538: LD_INT 4
45540: PPUSH
45541: LD_INT 4
45543: PPUSH
45544: CALL_OW 273
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_VAR 0 7
45557: PPUSH
45558: LD_INT 5
45560: PPUSH
45561: LD_INT 4
45563: PPUSH
45564: CALL_OW 272
45568: PUSH
45569: LD_VAR 0 8
45573: PPUSH
45574: LD_INT 5
45576: PPUSH
45577: LD_INT 4
45579: PPUSH
45580: CALL_OW 273
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: ST_TO_ADDR
// for i = tmp downto 1 do
45597: LD_ADDR_VAR 0 4
45601: PUSH
45602: DOUBLE
45603: LD_VAR 0 6
45607: INC
45608: ST_TO_ADDR
45609: LD_INT 1
45611: PUSH
45612: FOR_DOWNTO
45613: IFFALSE 45714
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45615: LD_VAR 0 6
45619: PUSH
45620: LD_VAR 0 4
45624: ARRAY
45625: PUSH
45626: LD_INT 1
45628: ARRAY
45629: PPUSH
45630: LD_VAR 0 6
45634: PUSH
45635: LD_VAR 0 4
45639: ARRAY
45640: PUSH
45641: LD_INT 2
45643: ARRAY
45644: PPUSH
45645: CALL_OW 488
45649: NOT
45650: PUSH
45651: LD_VAR 0 6
45655: PUSH
45656: LD_VAR 0 4
45660: ARRAY
45661: PUSH
45662: LD_INT 1
45664: ARRAY
45665: PPUSH
45666: LD_VAR 0 6
45670: PUSH
45671: LD_VAR 0 4
45675: ARRAY
45676: PUSH
45677: LD_INT 2
45679: ARRAY
45680: PPUSH
45681: CALL_OW 428
45685: PUSH
45686: LD_INT 0
45688: NONEQUAL
45689: OR
45690: IFFALSE 45712
// tmp := Delete ( tmp , i ) ;
45692: LD_ADDR_VAR 0 6
45696: PUSH
45697: LD_VAR 0 6
45701: PPUSH
45702: LD_VAR 0 4
45706: PPUSH
45707: CALL_OW 3
45711: ST_TO_ADDR
45712: GO 45612
45714: POP
45715: POP
// j := GetClosestHex ( unit , tmp ) ;
45716: LD_ADDR_VAR 0 5
45720: PUSH
45721: LD_VAR 0 1
45725: PPUSH
45726: LD_VAR 0 6
45730: PPUSH
45731: CALL 45016 0 2
45735: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45736: LD_VAR 0 1
45740: PPUSH
45741: LD_VAR 0 5
45745: PUSH
45746: LD_INT 1
45748: ARRAY
45749: PPUSH
45750: LD_VAR 0 5
45754: PUSH
45755: LD_INT 2
45757: ARRAY
45758: PPUSH
45759: CALL_OW 111
// end ;
45763: LD_VAR 0 3
45767: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45768: LD_INT 0
45770: PPUSH
45771: PPUSH
45772: PPUSH
// uc_side = 0 ;
45773: LD_ADDR_OWVAR 20
45777: PUSH
45778: LD_INT 0
45780: ST_TO_ADDR
// uc_nation = 0 ;
45781: LD_ADDR_OWVAR 21
45785: PUSH
45786: LD_INT 0
45788: ST_TO_ADDR
// InitHc ;
45789: CALL_OW 19
// InitVc ;
45793: CALL_OW 20
// if mastodonts then
45797: LD_VAR 0 6
45801: IFFALSE 45868
// for i = 1 to mastodonts do
45803: LD_ADDR_VAR 0 11
45807: PUSH
45808: DOUBLE
45809: LD_INT 1
45811: DEC
45812: ST_TO_ADDR
45813: LD_VAR 0 6
45817: PUSH
45818: FOR_TO
45819: IFFALSE 45866
// begin vc_chassis := 31 ;
45821: LD_ADDR_OWVAR 37
45825: PUSH
45826: LD_INT 31
45828: ST_TO_ADDR
// vc_control := control_rider ;
45829: LD_ADDR_OWVAR 38
45833: PUSH
45834: LD_INT 4
45836: ST_TO_ADDR
// animal := CreateVehicle ;
45837: LD_ADDR_VAR 0 12
45841: PUSH
45842: CALL_OW 45
45846: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
45847: LD_VAR 0 12
45851: PPUSH
45852: LD_VAR 0 8
45856: PPUSH
45857: LD_INT 0
45859: PPUSH
45860: CALL_OW 49
// end ;
45864: GO 45818
45866: POP
45867: POP
// if horses then
45868: LD_VAR 0 5
45872: IFFALSE 45939
// for i = 1 to horses do
45874: LD_ADDR_VAR 0 11
45878: PUSH
45879: DOUBLE
45880: LD_INT 1
45882: DEC
45883: ST_TO_ADDR
45884: LD_VAR 0 5
45888: PUSH
45889: FOR_TO
45890: IFFALSE 45937
// begin hc_class := 21 ;
45892: LD_ADDR_OWVAR 28
45896: PUSH
45897: LD_INT 21
45899: ST_TO_ADDR
// hc_gallery :=  ;
45900: LD_ADDR_OWVAR 33
45904: PUSH
45905: LD_STRING 
45907: ST_TO_ADDR
// animal := CreateHuman ;
45908: LD_ADDR_VAR 0 12
45912: PUSH
45913: CALL_OW 44
45917: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
45918: LD_VAR 0 12
45922: PPUSH
45923: LD_VAR 0 8
45927: PPUSH
45928: LD_INT 0
45930: PPUSH
45931: CALL_OW 49
// end ;
45935: GO 45889
45937: POP
45938: POP
// if birds then
45939: LD_VAR 0 1
45943: IFFALSE 46010
// for i = 1 to birds do
45945: LD_ADDR_VAR 0 11
45949: PUSH
45950: DOUBLE
45951: LD_INT 1
45953: DEC
45954: ST_TO_ADDR
45955: LD_VAR 0 1
45959: PUSH
45960: FOR_TO
45961: IFFALSE 46008
// begin hc_class = 18 ;
45963: LD_ADDR_OWVAR 28
45967: PUSH
45968: LD_INT 18
45970: ST_TO_ADDR
// hc_gallery =  ;
45971: LD_ADDR_OWVAR 33
45975: PUSH
45976: LD_STRING 
45978: ST_TO_ADDR
// animal := CreateHuman ;
45979: LD_ADDR_VAR 0 12
45983: PUSH
45984: CALL_OW 44
45988: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
45989: LD_VAR 0 12
45993: PPUSH
45994: LD_VAR 0 8
45998: PPUSH
45999: LD_INT 0
46001: PPUSH
46002: CALL_OW 49
// end ;
46006: GO 45960
46008: POP
46009: POP
// if tigers then
46010: LD_VAR 0 2
46014: IFFALSE 46098
// for i = 1 to tigers do
46016: LD_ADDR_VAR 0 11
46020: PUSH
46021: DOUBLE
46022: LD_INT 1
46024: DEC
46025: ST_TO_ADDR
46026: LD_VAR 0 2
46030: PUSH
46031: FOR_TO
46032: IFFALSE 46096
// begin hc_class = class_tiger ;
46034: LD_ADDR_OWVAR 28
46038: PUSH
46039: LD_INT 14
46041: ST_TO_ADDR
// hc_gallery =  ;
46042: LD_ADDR_OWVAR 33
46046: PUSH
46047: LD_STRING 
46049: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46050: LD_ADDR_OWVAR 35
46054: PUSH
46055: LD_INT 7
46057: NEG
46058: PPUSH
46059: LD_INT 7
46061: PPUSH
46062: CALL_OW 12
46066: ST_TO_ADDR
// animal := CreateHuman ;
46067: LD_ADDR_VAR 0 12
46071: PUSH
46072: CALL_OW 44
46076: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
46077: LD_VAR 0 12
46081: PPUSH
46082: LD_VAR 0 8
46086: PPUSH
46087: LD_INT 0
46089: PPUSH
46090: CALL_OW 49
// end ;
46094: GO 46031
46096: POP
46097: POP
// if apemans then
46098: LD_VAR 0 3
46102: IFFALSE 46225
// for i = 1 to apemans do
46104: LD_ADDR_VAR 0 11
46108: PUSH
46109: DOUBLE
46110: LD_INT 1
46112: DEC
46113: ST_TO_ADDR
46114: LD_VAR 0 3
46118: PUSH
46119: FOR_TO
46120: IFFALSE 46223
// begin hc_class = class_apeman ;
46122: LD_ADDR_OWVAR 28
46126: PUSH
46127: LD_INT 12
46129: ST_TO_ADDR
// hc_gallery =  ;
46130: LD_ADDR_OWVAR 33
46134: PUSH
46135: LD_STRING 
46137: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
46138: LD_ADDR_OWVAR 35
46142: PUSH
46143: LD_INT 5
46145: NEG
46146: PPUSH
46147: LD_INT 5
46149: PPUSH
46150: CALL_OW 12
46154: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46155: LD_ADDR_OWVAR 31
46159: PUSH
46160: LD_INT 1
46162: PPUSH
46163: LD_INT 3
46165: PPUSH
46166: CALL_OW 12
46170: PUSH
46171: LD_INT 1
46173: PPUSH
46174: LD_INT 3
46176: PPUSH
46177: CALL_OW 12
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: ST_TO_ADDR
// animal := CreateHuman ;
46194: LD_ADDR_VAR 0 12
46198: PUSH
46199: CALL_OW 44
46203: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
46204: LD_VAR 0 12
46208: PPUSH
46209: LD_VAR 0 8
46213: PPUSH
46214: LD_INT 0
46216: PPUSH
46217: CALL_OW 49
// end ;
46221: GO 46119
46223: POP
46224: POP
// if enchidnas then
46225: LD_VAR 0 4
46229: IFFALSE 46296
// for i = 1 to enchidnas do
46231: LD_ADDR_VAR 0 11
46235: PUSH
46236: DOUBLE
46237: LD_INT 1
46239: DEC
46240: ST_TO_ADDR
46241: LD_VAR 0 4
46245: PUSH
46246: FOR_TO
46247: IFFALSE 46294
// begin hc_class = 13 ;
46249: LD_ADDR_OWVAR 28
46253: PUSH
46254: LD_INT 13
46256: ST_TO_ADDR
// hc_gallery =  ;
46257: LD_ADDR_OWVAR 33
46261: PUSH
46262: LD_STRING 
46264: ST_TO_ADDR
// animal := CreateHuman ;
46265: LD_ADDR_VAR 0 12
46269: PUSH
46270: CALL_OW 44
46274: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
46275: LD_VAR 0 12
46279: PPUSH
46280: LD_VAR 0 8
46284: PPUSH
46285: LD_INT 0
46287: PPUSH
46288: CALL_OW 49
// end ;
46292: GO 46246
46294: POP
46295: POP
// if not wat_area then
46296: LD_VAR 0 9
46300: NOT
46301: IFFALSE 46305
// exit ;
46303: GO 46376
// if fishes then
46305: LD_VAR 0 7
46309: IFFALSE 46376
// for i = 1 to fishes do
46311: LD_ADDR_VAR 0 11
46315: PUSH
46316: DOUBLE
46317: LD_INT 1
46319: DEC
46320: ST_TO_ADDR
46321: LD_VAR 0 7
46325: PUSH
46326: FOR_TO
46327: IFFALSE 46374
// begin hc_class = 20 ;
46329: LD_ADDR_OWVAR 28
46333: PUSH
46334: LD_INT 20
46336: ST_TO_ADDR
// hc_gallery =  ;
46337: LD_ADDR_OWVAR 33
46341: PUSH
46342: LD_STRING 
46344: ST_TO_ADDR
// animal := CreateHuman ;
46345: LD_ADDR_VAR 0 12
46349: PUSH
46350: CALL_OW 44
46354: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
46355: LD_VAR 0 12
46359: PPUSH
46360: LD_VAR 0 9
46364: PPUSH
46365: LD_INT 0
46367: PPUSH
46368: CALL_OW 49
// end ;
46372: GO 46326
46374: POP
46375: POP
// end ;
46376: LD_VAR 0 10
46380: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
46381: LD_INT 0
46383: PPUSH
46384: PPUSH
46385: PPUSH
46386: PPUSH
46387: PPUSH
46388: PPUSH
46389: PPUSH
46390: PPUSH
46391: PPUSH
46392: PPUSH
46393: PPUSH
46394: PPUSH
46395: PPUSH
46396: PPUSH
46397: PPUSH
46398: PPUSH
46399: PPUSH
46400: PPUSH
46401: PPUSH
46402: PPUSH
46403: PPUSH
46404: PPUSH
46405: PPUSH
46406: PPUSH
46407: PPUSH
46408: PPUSH
46409: PPUSH
46410: PPUSH
// if not list then
46411: LD_VAR 0 1
46415: NOT
46416: IFFALSE 46420
// exit ;
46418: GO 49663
// base := list [ 1 ] ;
46420: LD_ADDR_VAR 0 3
46424: PUSH
46425: LD_VAR 0 1
46429: PUSH
46430: LD_INT 1
46432: ARRAY
46433: ST_TO_ADDR
// group := list [ 2 ] ;
46434: LD_ADDR_VAR 0 4
46438: PUSH
46439: LD_VAR 0 1
46443: PUSH
46444: LD_INT 2
46446: ARRAY
46447: ST_TO_ADDR
// path := list [ 3 ] ;
46448: LD_ADDR_VAR 0 5
46452: PUSH
46453: LD_VAR 0 1
46457: PUSH
46458: LD_INT 3
46460: ARRAY
46461: ST_TO_ADDR
// flags := list [ 4 ] ;
46462: LD_ADDR_VAR 0 6
46466: PUSH
46467: LD_VAR 0 1
46471: PUSH
46472: LD_INT 4
46474: ARRAY
46475: ST_TO_ADDR
// mined := [ ] ;
46476: LD_ADDR_VAR 0 27
46480: PUSH
46481: EMPTY
46482: ST_TO_ADDR
// bombed := [ ] ;
46483: LD_ADDR_VAR 0 28
46487: PUSH
46488: EMPTY
46489: ST_TO_ADDR
// if not group or not path then
46490: LD_VAR 0 4
46494: NOT
46495: PUSH
46496: LD_VAR 0 5
46500: NOT
46501: OR
46502: IFFALSE 46506
// exit ;
46504: GO 49663
// if flags then
46506: LD_VAR 0 6
46510: IFFALSE 46654
// begin f_ignore_area := flags [ 1 ] ;
46512: LD_ADDR_VAR 0 17
46516: PUSH
46517: LD_VAR 0 6
46521: PUSH
46522: LD_INT 1
46524: ARRAY
46525: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
46526: LD_ADDR_VAR 0 18
46530: PUSH
46531: LD_VAR 0 6
46535: PUSH
46536: LD_INT 2
46538: ARRAY
46539: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
46540: LD_ADDR_VAR 0 19
46544: PUSH
46545: LD_VAR 0 6
46549: PUSH
46550: LD_INT 3
46552: ARRAY
46553: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
46554: LD_ADDR_VAR 0 20
46558: PUSH
46559: LD_VAR 0 6
46563: PUSH
46564: LD_INT 4
46566: ARRAY
46567: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
46568: LD_ADDR_VAR 0 21
46572: PUSH
46573: LD_VAR 0 6
46577: PUSH
46578: LD_INT 5
46580: ARRAY
46581: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
46582: LD_ADDR_VAR 0 22
46586: PUSH
46587: LD_VAR 0 6
46591: PUSH
46592: LD_INT 6
46594: ARRAY
46595: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
46596: LD_ADDR_VAR 0 23
46600: PUSH
46601: LD_VAR 0 6
46605: PUSH
46606: LD_INT 7
46608: ARRAY
46609: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
46610: LD_ADDR_VAR 0 24
46614: PUSH
46615: LD_VAR 0 6
46619: PUSH
46620: LD_INT 8
46622: ARRAY
46623: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
46624: LD_ADDR_VAR 0 25
46628: PUSH
46629: LD_VAR 0 6
46633: PUSH
46634: LD_INT 9
46636: ARRAY
46637: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
46638: LD_ADDR_VAR 0 26
46642: PUSH
46643: LD_VAR 0 6
46647: PUSH
46648: LD_INT 10
46650: ARRAY
46651: ST_TO_ADDR
// end else
46652: GO 46734
// begin f_ignore_area := false ;
46654: LD_ADDR_VAR 0 17
46658: PUSH
46659: LD_INT 0
46661: ST_TO_ADDR
// f_capture := false ;
46662: LD_ADDR_VAR 0 18
46666: PUSH
46667: LD_INT 0
46669: ST_TO_ADDR
// f_ignore_civ := false ;
46670: LD_ADDR_VAR 0 19
46674: PUSH
46675: LD_INT 0
46677: ST_TO_ADDR
// f_murder := false ;
46678: LD_ADDR_VAR 0 20
46682: PUSH
46683: LD_INT 0
46685: ST_TO_ADDR
// f_mines := false ;
46686: LD_ADDR_VAR 0 21
46690: PUSH
46691: LD_INT 0
46693: ST_TO_ADDR
// f_repair := false ;
46694: LD_ADDR_VAR 0 22
46698: PUSH
46699: LD_INT 0
46701: ST_TO_ADDR
// f_heal := false ;
46702: LD_ADDR_VAR 0 23
46706: PUSH
46707: LD_INT 0
46709: ST_TO_ADDR
// f_spacetime := false ;
46710: LD_ADDR_VAR 0 24
46714: PUSH
46715: LD_INT 0
46717: ST_TO_ADDR
// f_attack_depot := false ;
46718: LD_ADDR_VAR 0 25
46722: PUSH
46723: LD_INT 0
46725: ST_TO_ADDR
// f_crawl := false ;
46726: LD_ADDR_VAR 0 26
46730: PUSH
46731: LD_INT 0
46733: ST_TO_ADDR
// end ; units_path := [ ] ;
46734: LD_ADDR_VAR 0 16
46738: PUSH
46739: EMPTY
46740: ST_TO_ADDR
// for i = 1 to group do
46741: LD_ADDR_VAR 0 7
46745: PUSH
46746: DOUBLE
46747: LD_INT 1
46749: DEC
46750: ST_TO_ADDR
46751: LD_VAR 0 4
46755: PUSH
46756: FOR_TO
46757: IFFALSE 46786
// begin units_path := Replace ( units_path , i , path ) ;
46759: LD_ADDR_VAR 0 16
46763: PUSH
46764: LD_VAR 0 16
46768: PPUSH
46769: LD_VAR 0 7
46773: PPUSH
46774: LD_VAR 0 5
46778: PPUSH
46779: CALL_OW 1
46783: ST_TO_ADDR
// end ;
46784: GO 46756
46786: POP
46787: POP
// repeat for i = group downto 1 do
46788: LD_ADDR_VAR 0 7
46792: PUSH
46793: DOUBLE
46794: LD_VAR 0 4
46798: INC
46799: ST_TO_ADDR
46800: LD_INT 1
46802: PUSH
46803: FOR_DOWNTO
46804: IFFALSE 49645
// begin wait ( 0 0$1 ) ;
46806: LD_INT 35
46808: PPUSH
46809: CALL_OW 67
// tmp := [ ] ;
46813: LD_ADDR_VAR 0 14
46817: PUSH
46818: EMPTY
46819: ST_TO_ADDR
// attacking := false ;
46820: LD_ADDR_VAR 0 29
46824: PUSH
46825: LD_INT 0
46827: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
46828: LD_VAR 0 4
46832: PUSH
46833: LD_VAR 0 7
46837: ARRAY
46838: PPUSH
46839: CALL_OW 301
46843: PUSH
46844: LD_VAR 0 4
46848: PUSH
46849: LD_VAR 0 7
46853: ARRAY
46854: NOT
46855: OR
46856: IFFALSE 46900
// begin group := Delete ( group , i ) ;
46858: LD_ADDR_VAR 0 4
46862: PUSH
46863: LD_VAR 0 4
46867: PPUSH
46868: LD_VAR 0 7
46872: PPUSH
46873: CALL_OW 3
46877: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
46878: LD_ADDR_VAR 0 16
46882: PUSH
46883: LD_VAR 0 16
46887: PPUSH
46888: LD_VAR 0 7
46892: PPUSH
46893: CALL_OW 3
46897: ST_TO_ADDR
// continue ;
46898: GO 46803
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
46900: LD_VAR 0 4
46904: PUSH
46905: LD_VAR 0 7
46909: ARRAY
46910: PPUSH
46911: LD_INT 10
46913: PPUSH
46914: CALL 44868 0 2
46918: NOT
46919: PUSH
46920: LD_VAR 0 16
46924: PUSH
46925: LD_VAR 0 7
46929: ARRAY
46930: PUSH
46931: EMPTY
46932: EQUAL
46933: NOT
46934: AND
46935: IFFALSE 47201
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
46937: LD_VAR 0 4
46941: PUSH
46942: LD_VAR 0 7
46946: ARRAY
46947: PPUSH
46948: CALL_OW 262
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: LD_INT 2
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: IN
46963: IFFALSE 47004
// if GetFuel ( group [ i ] ) < 10 then
46965: LD_VAR 0 4
46969: PUSH
46970: LD_VAR 0 7
46974: ARRAY
46975: PPUSH
46976: CALL_OW 261
46980: PUSH
46981: LD_INT 10
46983: LESS
46984: IFFALSE 47004
// SetFuel ( group [ i ] , 12 ) ;
46986: LD_VAR 0 4
46990: PUSH
46991: LD_VAR 0 7
46995: ARRAY
46996: PPUSH
46997: LD_INT 12
46999: PPUSH
47000: CALL_OW 240
// if units_path [ i ] then
47004: LD_VAR 0 16
47008: PUSH
47009: LD_VAR 0 7
47013: ARRAY
47014: IFFALSE 47199
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
47016: LD_VAR 0 4
47020: PUSH
47021: LD_VAR 0 7
47025: ARRAY
47026: PPUSH
47027: LD_VAR 0 16
47031: PUSH
47032: LD_VAR 0 7
47036: ARRAY
47037: PUSH
47038: LD_INT 1
47040: ARRAY
47041: PUSH
47042: LD_INT 1
47044: ARRAY
47045: PPUSH
47046: LD_VAR 0 16
47050: PUSH
47051: LD_VAR 0 7
47055: ARRAY
47056: PUSH
47057: LD_INT 1
47059: ARRAY
47060: PUSH
47061: LD_INT 2
47063: ARRAY
47064: PPUSH
47065: CALL_OW 297
47069: PUSH
47070: LD_INT 6
47072: GREATER
47073: IFFALSE 47148
// begin if not HasTask ( group [ i ] ) then
47075: LD_VAR 0 4
47079: PUSH
47080: LD_VAR 0 7
47084: ARRAY
47085: PPUSH
47086: CALL_OW 314
47090: NOT
47091: IFFALSE 47146
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
47093: LD_VAR 0 4
47097: PUSH
47098: LD_VAR 0 7
47102: ARRAY
47103: PPUSH
47104: LD_VAR 0 16
47108: PUSH
47109: LD_VAR 0 7
47113: ARRAY
47114: PUSH
47115: LD_INT 1
47117: ARRAY
47118: PUSH
47119: LD_INT 1
47121: ARRAY
47122: PPUSH
47123: LD_VAR 0 16
47127: PUSH
47128: LD_VAR 0 7
47132: ARRAY
47133: PUSH
47134: LD_INT 1
47136: ARRAY
47137: PUSH
47138: LD_INT 2
47140: ARRAY
47141: PPUSH
47142: CALL_OW 114
// end else
47146: GO 47199
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
47148: LD_ADDR_VAR 0 15
47152: PUSH
47153: LD_VAR 0 16
47157: PUSH
47158: LD_VAR 0 7
47162: ARRAY
47163: PPUSH
47164: LD_INT 1
47166: PPUSH
47167: CALL_OW 3
47171: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
47172: LD_ADDR_VAR 0 16
47176: PUSH
47177: LD_VAR 0 16
47181: PPUSH
47182: LD_VAR 0 7
47186: PPUSH
47187: LD_VAR 0 15
47191: PPUSH
47192: CALL_OW 1
47196: ST_TO_ADDR
// continue ;
47197: GO 46803
// end ; end ; end else
47199: GO 49643
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
47201: LD_ADDR_VAR 0 14
47205: PUSH
47206: LD_INT 81
47208: PUSH
47209: LD_VAR 0 4
47213: PUSH
47214: LD_VAR 0 7
47218: ARRAY
47219: PPUSH
47220: CALL_OW 255
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PPUSH
47229: CALL_OW 69
47233: ST_TO_ADDR
// if not tmp then
47234: LD_VAR 0 14
47238: NOT
47239: IFFALSE 47243
// continue ;
47241: GO 46803
// if f_ignore_area then
47243: LD_VAR 0 17
47247: IFFALSE 47335
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
47249: LD_ADDR_VAR 0 15
47253: PUSH
47254: LD_VAR 0 14
47258: PPUSH
47259: LD_INT 3
47261: PUSH
47262: LD_INT 92
47264: PUSH
47265: LD_VAR 0 17
47269: PUSH
47270: LD_INT 1
47272: ARRAY
47273: PUSH
47274: LD_VAR 0 17
47278: PUSH
47279: LD_INT 2
47281: ARRAY
47282: PUSH
47283: LD_VAR 0 17
47287: PUSH
47288: LD_INT 3
47290: ARRAY
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PPUSH
47302: CALL_OW 72
47306: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
47307: LD_VAR 0 14
47311: PUSH
47312: LD_VAR 0 15
47316: DIFF
47317: IFFALSE 47335
// tmp := tmp diff tmp2 ;
47319: LD_ADDR_VAR 0 14
47323: PUSH
47324: LD_VAR 0 14
47328: PUSH
47329: LD_VAR 0 15
47333: DIFF
47334: ST_TO_ADDR
// end ; if not f_murder then
47335: LD_VAR 0 20
47339: NOT
47340: IFFALSE 47398
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
47342: LD_ADDR_VAR 0 15
47346: PUSH
47347: LD_VAR 0 14
47351: PPUSH
47352: LD_INT 3
47354: PUSH
47355: LD_INT 50
47357: PUSH
47358: EMPTY
47359: LIST
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PPUSH
47365: CALL_OW 72
47369: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
47370: LD_VAR 0 14
47374: PUSH
47375: LD_VAR 0 15
47379: DIFF
47380: IFFALSE 47398
// tmp := tmp diff tmp2 ;
47382: LD_ADDR_VAR 0 14
47386: PUSH
47387: LD_VAR 0 14
47391: PUSH
47392: LD_VAR 0 15
47396: DIFF
47397: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
47398: LD_ADDR_VAR 0 14
47402: PUSH
47403: LD_VAR 0 4
47407: PUSH
47408: LD_VAR 0 7
47412: ARRAY
47413: PPUSH
47414: LD_VAR 0 14
47418: PPUSH
47419: LD_INT 1
47421: PPUSH
47422: LD_INT 1
47424: PPUSH
47425: CALL 19074 0 4
47429: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
47430: LD_VAR 0 4
47434: PUSH
47435: LD_VAR 0 7
47439: ARRAY
47440: PPUSH
47441: CALL_OW 257
47445: PUSH
47446: LD_INT 1
47448: EQUAL
47449: IFFALSE 47897
// begin if WantPlant ( group [ i ] ) then
47451: LD_VAR 0 4
47455: PUSH
47456: LD_VAR 0 7
47460: ARRAY
47461: PPUSH
47462: CALL 18542 0 1
47466: IFFALSE 47470
// continue ;
47468: GO 46803
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
47470: LD_VAR 0 18
47474: PUSH
47475: LD_VAR 0 4
47479: PUSH
47480: LD_VAR 0 7
47484: ARRAY
47485: PPUSH
47486: CALL_OW 310
47490: NOT
47491: AND
47492: PUSH
47493: LD_VAR 0 14
47497: PUSH
47498: LD_INT 1
47500: ARRAY
47501: PUSH
47502: LD_VAR 0 14
47506: PPUSH
47507: LD_INT 21
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 58
47519: PUSH
47520: EMPTY
47521: LIST
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PPUSH
47527: CALL_OW 72
47531: IN
47532: AND
47533: IFFALSE 47569
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
47535: LD_VAR 0 4
47539: PUSH
47540: LD_VAR 0 7
47544: ARRAY
47545: PPUSH
47546: LD_VAR 0 14
47550: PUSH
47551: LD_INT 1
47553: ARRAY
47554: PPUSH
47555: CALL_OW 120
// attacking := true ;
47559: LD_ADDR_VAR 0 29
47563: PUSH
47564: LD_INT 1
47566: ST_TO_ADDR
// continue ;
47567: GO 46803
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
47569: LD_VAR 0 26
47573: PUSH
47574: LD_VAR 0 4
47578: PUSH
47579: LD_VAR 0 7
47583: ARRAY
47584: PPUSH
47585: CALL_OW 257
47589: PUSH
47590: LD_INT 1
47592: EQUAL
47593: AND
47594: PUSH
47595: LD_VAR 0 4
47599: PUSH
47600: LD_VAR 0 7
47604: ARRAY
47605: PPUSH
47606: CALL_OW 256
47610: PUSH
47611: LD_INT 800
47613: LESS
47614: AND
47615: PUSH
47616: LD_VAR 0 4
47620: PUSH
47621: LD_VAR 0 7
47625: ARRAY
47626: PPUSH
47627: CALL_OW 318
47631: NOT
47632: AND
47633: IFFALSE 47650
// ComCrawl ( group [ i ] ) ;
47635: LD_VAR 0 4
47639: PUSH
47640: LD_VAR 0 7
47644: ARRAY
47645: PPUSH
47646: CALL_OW 137
// if f_mines then
47650: LD_VAR 0 21
47654: IFFALSE 47897
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
47656: LD_VAR 0 14
47660: PUSH
47661: LD_INT 1
47663: ARRAY
47664: PPUSH
47665: CALL_OW 247
47669: PUSH
47670: LD_INT 3
47672: EQUAL
47673: PUSH
47674: LD_VAR 0 14
47678: PUSH
47679: LD_INT 1
47681: ARRAY
47682: PUSH
47683: LD_VAR 0 27
47687: IN
47688: NOT
47689: AND
47690: IFFALSE 47897
// begin x := GetX ( tmp [ 1 ] ) ;
47692: LD_ADDR_VAR 0 10
47696: PUSH
47697: LD_VAR 0 14
47701: PUSH
47702: LD_INT 1
47704: ARRAY
47705: PPUSH
47706: CALL_OW 250
47710: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
47711: LD_ADDR_VAR 0 11
47715: PUSH
47716: LD_VAR 0 14
47720: PUSH
47721: LD_INT 1
47723: ARRAY
47724: PPUSH
47725: CALL_OW 251
47729: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
47730: LD_ADDR_VAR 0 12
47734: PUSH
47735: LD_VAR 0 4
47739: PUSH
47740: LD_VAR 0 7
47744: ARRAY
47745: PPUSH
47746: CALL 44953 0 1
47750: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
47751: LD_VAR 0 4
47755: PUSH
47756: LD_VAR 0 7
47760: ARRAY
47761: PPUSH
47762: LD_VAR 0 10
47766: PPUSH
47767: LD_VAR 0 11
47771: PPUSH
47772: LD_VAR 0 14
47776: PUSH
47777: LD_INT 1
47779: ARRAY
47780: PPUSH
47781: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
47785: LD_VAR 0 4
47789: PUSH
47790: LD_VAR 0 7
47794: ARRAY
47795: PPUSH
47796: LD_VAR 0 10
47800: PPUSH
47801: LD_VAR 0 12
47805: PPUSH
47806: LD_INT 7
47808: PPUSH
47809: CALL_OW 272
47813: PPUSH
47814: LD_VAR 0 11
47818: PPUSH
47819: LD_VAR 0 12
47823: PPUSH
47824: LD_INT 7
47826: PPUSH
47827: CALL_OW 273
47831: PPUSH
47832: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
47836: LD_VAR 0 4
47840: PUSH
47841: LD_VAR 0 7
47845: ARRAY
47846: PPUSH
47847: LD_INT 71
47849: PPUSH
47850: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
47854: LD_ADDR_VAR 0 27
47858: PUSH
47859: LD_VAR 0 27
47863: PPUSH
47864: LD_VAR 0 27
47868: PUSH
47869: LD_INT 1
47871: PLUS
47872: PPUSH
47873: LD_VAR 0 14
47877: PUSH
47878: LD_INT 1
47880: ARRAY
47881: PPUSH
47882: CALL_OW 1
47886: ST_TO_ADDR
// attacking := true ;
47887: LD_ADDR_VAR 0 29
47891: PUSH
47892: LD_INT 1
47894: ST_TO_ADDR
// continue ;
47895: GO 46803
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
47897: LD_VAR 0 4
47901: PUSH
47902: LD_VAR 0 7
47906: ARRAY
47907: PPUSH
47908: CALL_OW 257
47912: PUSH
47913: LD_INT 17
47915: EQUAL
47916: PUSH
47917: LD_VAR 0 4
47921: PUSH
47922: LD_VAR 0 7
47926: ARRAY
47927: PPUSH
47928: CALL_OW 110
47932: PUSH
47933: LD_INT 71
47935: EQUAL
47936: NOT
47937: AND
47938: IFFALSE 48084
// begin attacking := false ;
47940: LD_ADDR_VAR 0 29
47944: PUSH
47945: LD_INT 0
47947: ST_TO_ADDR
// k := 5 ;
47948: LD_ADDR_VAR 0 9
47952: PUSH
47953: LD_INT 5
47955: ST_TO_ADDR
// if tmp < k then
47956: LD_VAR 0 14
47960: PUSH
47961: LD_VAR 0 9
47965: LESS
47966: IFFALSE 47978
// k := tmp ;
47968: LD_ADDR_VAR 0 9
47972: PUSH
47973: LD_VAR 0 14
47977: ST_TO_ADDR
// for j = 1 to k do
47978: LD_ADDR_VAR 0 8
47982: PUSH
47983: DOUBLE
47984: LD_INT 1
47986: DEC
47987: ST_TO_ADDR
47988: LD_VAR 0 9
47992: PUSH
47993: FOR_TO
47994: IFFALSE 48082
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
47996: LD_VAR 0 14
48000: PUSH
48001: LD_VAR 0 8
48005: ARRAY
48006: PUSH
48007: LD_VAR 0 14
48011: PPUSH
48012: LD_INT 58
48014: PUSH
48015: EMPTY
48016: LIST
48017: PPUSH
48018: CALL_OW 72
48022: IN
48023: NOT
48024: IFFALSE 48080
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
48026: LD_VAR 0 4
48030: PUSH
48031: LD_VAR 0 7
48035: ARRAY
48036: PPUSH
48037: LD_VAR 0 14
48041: PUSH
48042: LD_VAR 0 8
48046: ARRAY
48047: PPUSH
48048: CALL_OW 115
// attacking := true ;
48052: LD_ADDR_VAR 0 29
48056: PUSH
48057: LD_INT 1
48059: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
48060: LD_VAR 0 4
48064: PUSH
48065: LD_VAR 0 7
48069: ARRAY
48070: PPUSH
48071: LD_INT 71
48073: PPUSH
48074: CALL_OW 109
// continue ;
48078: GO 47993
// end ; end ;
48080: GO 47993
48082: POP
48083: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
48084: LD_VAR 0 4
48088: PUSH
48089: LD_VAR 0 7
48093: ARRAY
48094: PPUSH
48095: CALL_OW 257
48099: PUSH
48100: LD_INT 8
48102: EQUAL
48103: PUSH
48104: LD_VAR 0 4
48108: PUSH
48109: LD_VAR 0 7
48113: ARRAY
48114: PPUSH
48115: CALL_OW 264
48119: PUSH
48120: LD_INT 28
48122: PUSH
48123: LD_INT 45
48125: PUSH
48126: LD_INT 7
48128: PUSH
48129: LD_INT 47
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: IN
48138: OR
48139: IFFALSE 48369
// begin attacking := false ;
48141: LD_ADDR_VAR 0 29
48145: PUSH
48146: LD_INT 0
48148: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
48149: LD_VAR 0 14
48153: PUSH
48154: LD_INT 1
48156: ARRAY
48157: PPUSH
48158: CALL_OW 266
48162: PUSH
48163: LD_INT 32
48165: PUSH
48166: LD_INT 31
48168: PUSH
48169: LD_INT 33
48171: PUSH
48172: LD_INT 4
48174: PUSH
48175: LD_INT 5
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: IN
48185: IFFALSE 48369
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
48187: LD_ADDR_VAR 0 9
48191: PUSH
48192: LD_VAR 0 14
48196: PUSH
48197: LD_INT 1
48199: ARRAY
48200: PPUSH
48201: CALL_OW 266
48205: PPUSH
48206: LD_VAR 0 14
48210: PUSH
48211: LD_INT 1
48213: ARRAY
48214: PPUSH
48215: CALL_OW 250
48219: PPUSH
48220: LD_VAR 0 14
48224: PUSH
48225: LD_INT 1
48227: ARRAY
48228: PPUSH
48229: CALL_OW 251
48233: PPUSH
48234: LD_VAR 0 14
48238: PUSH
48239: LD_INT 1
48241: ARRAY
48242: PPUSH
48243: CALL_OW 254
48247: PPUSH
48248: LD_VAR 0 14
48252: PUSH
48253: LD_INT 1
48255: ARRAY
48256: PPUSH
48257: CALL_OW 248
48261: PPUSH
48262: LD_INT 0
48264: PPUSH
48265: CALL 26329 0 6
48269: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
48270: LD_ADDR_VAR 0 8
48274: PUSH
48275: LD_VAR 0 4
48279: PUSH
48280: LD_VAR 0 7
48284: ARRAY
48285: PPUSH
48286: LD_VAR 0 9
48290: PPUSH
48291: CALL 45016 0 2
48295: ST_TO_ADDR
// if j then
48296: LD_VAR 0 8
48300: IFFALSE 48369
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48302: LD_VAR 0 8
48306: PUSH
48307: LD_INT 1
48309: ARRAY
48310: PPUSH
48311: LD_VAR 0 8
48315: PUSH
48316: LD_INT 2
48318: ARRAY
48319: PPUSH
48320: CALL_OW 488
48324: IFFALSE 48369
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
48326: LD_VAR 0 4
48330: PUSH
48331: LD_VAR 0 7
48335: ARRAY
48336: PPUSH
48337: LD_VAR 0 8
48341: PUSH
48342: LD_INT 1
48344: ARRAY
48345: PPUSH
48346: LD_VAR 0 8
48350: PUSH
48351: LD_INT 2
48353: ARRAY
48354: PPUSH
48355: CALL_OW 116
// attacking := true ;
48359: LD_ADDR_VAR 0 29
48363: PUSH
48364: LD_INT 1
48366: ST_TO_ADDR
// continue ;
48367: GO 46803
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
48369: LD_VAR 0 4
48373: PUSH
48374: LD_VAR 0 7
48378: ARRAY
48379: PPUSH
48380: CALL_OW 265
48384: PUSH
48385: LD_INT 11
48387: EQUAL
48388: IFFALSE 48666
// begin k := 10 ;
48390: LD_ADDR_VAR 0 9
48394: PUSH
48395: LD_INT 10
48397: ST_TO_ADDR
// x := 0 ;
48398: LD_ADDR_VAR 0 10
48402: PUSH
48403: LD_INT 0
48405: ST_TO_ADDR
// if tmp < k then
48406: LD_VAR 0 14
48410: PUSH
48411: LD_VAR 0 9
48415: LESS
48416: IFFALSE 48428
// k := tmp ;
48418: LD_ADDR_VAR 0 9
48422: PUSH
48423: LD_VAR 0 14
48427: ST_TO_ADDR
// for j = k downto 1 do
48428: LD_ADDR_VAR 0 8
48432: PUSH
48433: DOUBLE
48434: LD_VAR 0 9
48438: INC
48439: ST_TO_ADDR
48440: LD_INT 1
48442: PUSH
48443: FOR_DOWNTO
48444: IFFALSE 48519
// begin if GetType ( tmp [ j ] ) = unit_human then
48446: LD_VAR 0 14
48450: PUSH
48451: LD_VAR 0 8
48455: ARRAY
48456: PPUSH
48457: CALL_OW 247
48461: PUSH
48462: LD_INT 1
48464: EQUAL
48465: IFFALSE 48517
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
48467: LD_VAR 0 4
48471: PUSH
48472: LD_VAR 0 7
48476: ARRAY
48477: PPUSH
48478: LD_VAR 0 14
48482: PUSH
48483: LD_VAR 0 8
48487: ARRAY
48488: PPUSH
48489: CALL 45287 0 2
// x := tmp [ j ] ;
48493: LD_ADDR_VAR 0 10
48497: PUSH
48498: LD_VAR 0 14
48502: PUSH
48503: LD_VAR 0 8
48507: ARRAY
48508: ST_TO_ADDR
// attacking := true ;
48509: LD_ADDR_VAR 0 29
48513: PUSH
48514: LD_INT 1
48516: ST_TO_ADDR
// end ; end ;
48517: GO 48443
48519: POP
48520: POP
// if not x then
48521: LD_VAR 0 10
48525: NOT
48526: IFFALSE 48666
// begin attacking := true ;
48528: LD_ADDR_VAR 0 29
48532: PUSH
48533: LD_INT 1
48535: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
48536: LD_VAR 0 4
48540: PUSH
48541: LD_VAR 0 7
48545: ARRAY
48546: PPUSH
48547: CALL_OW 250
48551: PPUSH
48552: LD_VAR 0 4
48556: PUSH
48557: LD_VAR 0 7
48561: ARRAY
48562: PPUSH
48563: CALL_OW 251
48567: PPUSH
48568: CALL_OW 546
48572: PUSH
48573: LD_INT 2
48575: ARRAY
48576: PUSH
48577: LD_VAR 0 14
48581: PUSH
48582: LD_INT 1
48584: ARRAY
48585: PPUSH
48586: CALL_OW 250
48590: PPUSH
48591: LD_VAR 0 14
48595: PUSH
48596: LD_INT 1
48598: ARRAY
48599: PPUSH
48600: CALL_OW 251
48604: PPUSH
48605: CALL_OW 546
48609: PUSH
48610: LD_INT 2
48612: ARRAY
48613: EQUAL
48614: IFFALSE 48642
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
48616: LD_VAR 0 4
48620: PUSH
48621: LD_VAR 0 7
48625: ARRAY
48626: PPUSH
48627: LD_VAR 0 14
48631: PUSH
48632: LD_INT 1
48634: ARRAY
48635: PPUSH
48636: CALL 45287 0 2
48640: GO 48666
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
48642: LD_VAR 0 4
48646: PUSH
48647: LD_VAR 0 7
48651: ARRAY
48652: PPUSH
48653: LD_VAR 0 14
48657: PUSH
48658: LD_INT 1
48660: ARRAY
48661: PPUSH
48662: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
48666: LD_VAR 0 4
48670: PUSH
48671: LD_VAR 0 7
48675: ARRAY
48676: PPUSH
48677: CALL_OW 264
48681: PUSH
48682: LD_INT 29
48684: EQUAL
48685: IFFALSE 49051
// begin if WantsToAttack ( group [ i ] ) in bombed then
48687: LD_VAR 0 4
48691: PUSH
48692: LD_VAR 0 7
48696: ARRAY
48697: PPUSH
48698: CALL_OW 319
48702: PUSH
48703: LD_VAR 0 28
48707: IN
48708: IFFALSE 48712
// continue ;
48710: GO 46803
// k := 8 ;
48712: LD_ADDR_VAR 0 9
48716: PUSH
48717: LD_INT 8
48719: ST_TO_ADDR
// x := 0 ;
48720: LD_ADDR_VAR 0 10
48724: PUSH
48725: LD_INT 0
48727: ST_TO_ADDR
// if tmp < k then
48728: LD_VAR 0 14
48732: PUSH
48733: LD_VAR 0 9
48737: LESS
48738: IFFALSE 48750
// k := tmp ;
48740: LD_ADDR_VAR 0 9
48744: PUSH
48745: LD_VAR 0 14
48749: ST_TO_ADDR
// for j = 1 to k do
48750: LD_ADDR_VAR 0 8
48754: PUSH
48755: DOUBLE
48756: LD_INT 1
48758: DEC
48759: ST_TO_ADDR
48760: LD_VAR 0 9
48764: PUSH
48765: FOR_TO
48766: IFFALSE 48898
// begin if GetType ( tmp [ j ] ) = unit_building then
48768: LD_VAR 0 14
48772: PUSH
48773: LD_VAR 0 8
48777: ARRAY
48778: PPUSH
48779: CALL_OW 247
48783: PUSH
48784: LD_INT 3
48786: EQUAL
48787: IFFALSE 48896
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
48789: LD_VAR 0 14
48793: PUSH
48794: LD_VAR 0 8
48798: ARRAY
48799: PUSH
48800: LD_VAR 0 28
48804: IN
48805: NOT
48806: PUSH
48807: LD_VAR 0 14
48811: PUSH
48812: LD_VAR 0 8
48816: ARRAY
48817: PPUSH
48818: CALL_OW 313
48822: AND
48823: IFFALSE 48896
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
48825: LD_VAR 0 4
48829: PUSH
48830: LD_VAR 0 7
48834: ARRAY
48835: PPUSH
48836: LD_VAR 0 14
48840: PUSH
48841: LD_VAR 0 8
48845: ARRAY
48846: PPUSH
48847: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
48851: LD_ADDR_VAR 0 28
48855: PUSH
48856: LD_VAR 0 28
48860: PPUSH
48861: LD_VAR 0 28
48865: PUSH
48866: LD_INT 1
48868: PLUS
48869: PPUSH
48870: LD_VAR 0 14
48874: PUSH
48875: LD_VAR 0 8
48879: ARRAY
48880: PPUSH
48881: CALL_OW 1
48885: ST_TO_ADDR
// attacking := true ;
48886: LD_ADDR_VAR 0 29
48890: PUSH
48891: LD_INT 1
48893: ST_TO_ADDR
// break ;
48894: GO 48898
// end ; end ;
48896: GO 48765
48898: POP
48899: POP
// if not attacking and f_attack_depot then
48900: LD_VAR 0 29
48904: NOT
48905: PUSH
48906: LD_VAR 0 25
48910: AND
48911: IFFALSE 49006
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
48913: LD_ADDR_VAR 0 13
48917: PUSH
48918: LD_VAR 0 14
48922: PPUSH
48923: LD_INT 2
48925: PUSH
48926: LD_INT 30
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 30
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: LIST
48950: PPUSH
48951: CALL_OW 72
48955: ST_TO_ADDR
// if z then
48956: LD_VAR 0 13
48960: IFFALSE 49006
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
48962: LD_VAR 0 4
48966: PUSH
48967: LD_VAR 0 7
48971: ARRAY
48972: PPUSH
48973: LD_VAR 0 13
48977: PPUSH
48978: LD_VAR 0 4
48982: PUSH
48983: LD_VAR 0 7
48987: ARRAY
48988: PPUSH
48989: CALL_OW 74
48993: PPUSH
48994: CALL_OW 115
// attacking := true ;
48998: LD_ADDR_VAR 0 29
49002: PUSH
49003: LD_INT 1
49005: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
49006: LD_VAR 0 4
49010: PUSH
49011: LD_VAR 0 7
49015: ARRAY
49016: PPUSH
49017: CALL_OW 256
49021: PUSH
49022: LD_INT 500
49024: LESS
49025: IFFALSE 49051
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49027: LD_VAR 0 4
49031: PUSH
49032: LD_VAR 0 7
49036: ARRAY
49037: PPUSH
49038: LD_VAR 0 14
49042: PUSH
49043: LD_INT 1
49045: ARRAY
49046: PPUSH
49047: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49051: LD_VAR 0 4
49055: PUSH
49056: LD_VAR 0 7
49060: ARRAY
49061: PPUSH
49062: CALL_OW 256
49066: PUSH
49067: LD_INT 250
49069: LESS
49070: PUSH
49071: LD_VAR 0 4
49075: PUSH
49076: LD_VAR 0 7
49080: ARRAY
49081: PUSH
49082: LD_INT 21
49084: PUSH
49085: LD_INT 2
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 23
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PPUSH
49106: CALL_OW 69
49110: IN
49111: AND
49112: IFFALSE 49237
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
49114: LD_ADDR_VAR 0 9
49118: PUSH
49119: LD_OWVAR 3
49123: PUSH
49124: LD_VAR 0 4
49128: PUSH
49129: LD_VAR 0 7
49133: ARRAY
49134: DIFF
49135: PPUSH
49136: LD_VAR 0 4
49140: PUSH
49141: LD_VAR 0 7
49145: ARRAY
49146: PPUSH
49147: CALL_OW 74
49151: ST_TO_ADDR
// if not k then
49152: LD_VAR 0 9
49156: NOT
49157: IFFALSE 49161
// continue ;
49159: GO 46803
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
49161: LD_VAR 0 9
49165: PUSH
49166: LD_INT 81
49168: PUSH
49169: LD_VAR 0 4
49173: PUSH
49174: LD_VAR 0 7
49178: ARRAY
49179: PPUSH
49180: CALL_OW 255
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PPUSH
49189: CALL_OW 69
49193: IN
49194: PUSH
49195: LD_VAR 0 9
49199: PPUSH
49200: LD_VAR 0 4
49204: PUSH
49205: LD_VAR 0 7
49209: ARRAY
49210: PPUSH
49211: CALL_OW 296
49215: PUSH
49216: LD_INT 5
49218: LESS
49219: AND
49220: IFFALSE 49237
// ComAutodestruct ( group [ i ] ) ;
49222: LD_VAR 0 4
49226: PUSH
49227: LD_VAR 0 7
49231: ARRAY
49232: PPUSH
49233: CALL 45185 0 1
// end ; if f_attack_depot then
49237: LD_VAR 0 25
49241: IFFALSE 49353
// begin k := 6 ;
49243: LD_ADDR_VAR 0 9
49247: PUSH
49248: LD_INT 6
49250: ST_TO_ADDR
// if tmp < k then
49251: LD_VAR 0 14
49255: PUSH
49256: LD_VAR 0 9
49260: LESS
49261: IFFALSE 49273
// k := tmp ;
49263: LD_ADDR_VAR 0 9
49267: PUSH
49268: LD_VAR 0 14
49272: ST_TO_ADDR
// for j = 1 to k do
49273: LD_ADDR_VAR 0 8
49277: PUSH
49278: DOUBLE
49279: LD_INT 1
49281: DEC
49282: ST_TO_ADDR
49283: LD_VAR 0 9
49287: PUSH
49288: FOR_TO
49289: IFFALSE 49351
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
49291: LD_VAR 0 8
49295: PPUSH
49296: CALL_OW 266
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: IN
49311: IFFALSE 49349
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49313: LD_VAR 0 4
49317: PUSH
49318: LD_VAR 0 7
49322: ARRAY
49323: PPUSH
49324: LD_VAR 0 14
49328: PUSH
49329: LD_VAR 0 8
49333: ARRAY
49334: PPUSH
49335: CALL_OW 115
// attacking := true ;
49339: LD_ADDR_VAR 0 29
49343: PUSH
49344: LD_INT 1
49346: ST_TO_ADDR
// break ;
49347: GO 49351
// end ;
49349: GO 49288
49351: POP
49352: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
49353: LD_VAR 0 4
49357: PUSH
49358: LD_VAR 0 7
49362: ARRAY
49363: PPUSH
49364: CALL_OW 302
49368: PUSH
49369: LD_VAR 0 29
49373: NOT
49374: AND
49375: IFFALSE 49643
// begin if GetTag ( group [ i ] ) = 71 then
49377: LD_VAR 0 4
49381: PUSH
49382: LD_VAR 0 7
49386: ARRAY
49387: PPUSH
49388: CALL_OW 110
49392: PUSH
49393: LD_INT 71
49395: EQUAL
49396: IFFALSE 49437
// begin if HasTask ( group [ i ] ) then
49398: LD_VAR 0 4
49402: PUSH
49403: LD_VAR 0 7
49407: ARRAY
49408: PPUSH
49409: CALL_OW 314
49413: IFFALSE 49419
// continue else
49415: GO 46803
49417: GO 49437
// SetTag ( group [ i ] , 0 ) ;
49419: LD_VAR 0 4
49423: PUSH
49424: LD_VAR 0 7
49428: ARRAY
49429: PPUSH
49430: LD_INT 0
49432: PPUSH
49433: CALL_OW 109
// end ; k := 8 ;
49437: LD_ADDR_VAR 0 9
49441: PUSH
49442: LD_INT 8
49444: ST_TO_ADDR
// x := 0 ;
49445: LD_ADDR_VAR 0 10
49449: PUSH
49450: LD_INT 0
49452: ST_TO_ADDR
// if tmp < k then
49453: LD_VAR 0 14
49457: PUSH
49458: LD_VAR 0 9
49462: LESS
49463: IFFALSE 49475
// k := tmp ;
49465: LD_ADDR_VAR 0 9
49469: PUSH
49470: LD_VAR 0 14
49474: ST_TO_ADDR
// for j = 1 to k do
49475: LD_ADDR_VAR 0 8
49479: PUSH
49480: DOUBLE
49481: LD_INT 1
49483: DEC
49484: ST_TO_ADDR
49485: LD_VAR 0 9
49489: PUSH
49490: FOR_TO
49491: IFFALSE 49589
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
49493: LD_VAR 0 14
49497: PUSH
49498: LD_VAR 0 8
49502: ARRAY
49503: PPUSH
49504: CALL_OW 247
49508: PUSH
49509: LD_INT 1
49511: EQUAL
49512: PUSH
49513: LD_VAR 0 14
49517: PUSH
49518: LD_VAR 0 8
49522: ARRAY
49523: PPUSH
49524: CALL_OW 256
49528: PUSH
49529: LD_INT 250
49531: LESS
49532: PUSH
49533: LD_VAR 0 20
49537: AND
49538: PUSH
49539: LD_VAR 0 20
49543: NOT
49544: PUSH
49545: LD_VAR 0 14
49549: PUSH
49550: LD_VAR 0 8
49554: ARRAY
49555: PPUSH
49556: CALL_OW 256
49560: PUSH
49561: LD_INT 250
49563: GREATEREQUAL
49564: AND
49565: OR
49566: AND
49567: IFFALSE 49587
// begin x := tmp [ j ] ;
49569: LD_ADDR_VAR 0 10
49573: PUSH
49574: LD_VAR 0 14
49578: PUSH
49579: LD_VAR 0 8
49583: ARRAY
49584: ST_TO_ADDR
// break ;
49585: GO 49589
// end ;
49587: GO 49490
49589: POP
49590: POP
// if x then
49591: LD_VAR 0 10
49595: IFFALSE 49619
// ComAttackUnit ( group [ i ] , x ) else
49597: LD_VAR 0 4
49601: PUSH
49602: LD_VAR 0 7
49606: ARRAY
49607: PPUSH
49608: LD_VAR 0 10
49612: PPUSH
49613: CALL_OW 115
49617: GO 49643
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49619: LD_VAR 0 4
49623: PUSH
49624: LD_VAR 0 7
49628: ARRAY
49629: PPUSH
49630: LD_VAR 0 14
49634: PUSH
49635: LD_INT 1
49637: ARRAY
49638: PPUSH
49639: CALL_OW 115
// end ; end ; end ;
49643: GO 46803
49645: POP
49646: POP
// wait ( 0 0$1 ) ;
49647: LD_INT 35
49649: PPUSH
49650: CALL_OW 67
// until group = [ ] ;
49654: LD_VAR 0 4
49658: PUSH
49659: EMPTY
49660: EQUAL
49661: IFFALSE 46788
// end ;
49663: LD_VAR 0 2
49667: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
49668: LD_INT 0
49670: PPUSH
49671: PPUSH
49672: PPUSH
49673: PPUSH
// if not base_units then
49674: LD_VAR 0 1
49678: NOT
49679: IFFALSE 49683
// exit ;
49681: GO 49770
// result := false ;
49683: LD_ADDR_VAR 0 2
49687: PUSH
49688: LD_INT 0
49690: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
49691: LD_ADDR_VAR 0 5
49695: PUSH
49696: LD_VAR 0 1
49700: PPUSH
49701: LD_INT 21
49703: PUSH
49704: LD_INT 3
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PPUSH
49711: CALL_OW 72
49715: ST_TO_ADDR
// if not tmp then
49716: LD_VAR 0 5
49720: NOT
49721: IFFALSE 49725
// exit ;
49723: GO 49770
// for i in tmp do
49725: LD_ADDR_VAR 0 3
49729: PUSH
49730: LD_VAR 0 5
49734: PUSH
49735: FOR_IN
49736: IFFALSE 49768
// begin result := EnemyInRange ( i , 22 ) ;
49738: LD_ADDR_VAR 0 2
49742: PUSH
49743: LD_VAR 0 3
49747: PPUSH
49748: LD_INT 22
49750: PPUSH
49751: CALL 44868 0 2
49755: ST_TO_ADDR
// if result then
49756: LD_VAR 0 2
49760: IFFALSE 49766
// exit ;
49762: POP
49763: POP
49764: GO 49770
// end ;
49766: GO 49735
49768: POP
49769: POP
// end ;
49770: LD_VAR 0 2
49774: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
49775: LD_INT 0
49777: PPUSH
49778: PPUSH
// if not units then
49779: LD_VAR 0 1
49783: NOT
49784: IFFALSE 49788
// exit ;
49786: GO 49858
// result := [ ] ;
49788: LD_ADDR_VAR 0 3
49792: PUSH
49793: EMPTY
49794: ST_TO_ADDR
// for i in units do
49795: LD_ADDR_VAR 0 4
49799: PUSH
49800: LD_VAR 0 1
49804: PUSH
49805: FOR_IN
49806: IFFALSE 49856
// if GetTag ( i ) = tag then
49808: LD_VAR 0 4
49812: PPUSH
49813: CALL_OW 110
49817: PUSH
49818: LD_VAR 0 2
49822: EQUAL
49823: IFFALSE 49854
// result := Insert ( result , result + 1 , i ) ;
49825: LD_ADDR_VAR 0 3
49829: PUSH
49830: LD_VAR 0 3
49834: PPUSH
49835: LD_VAR 0 3
49839: PUSH
49840: LD_INT 1
49842: PLUS
49843: PPUSH
49844: LD_VAR 0 4
49848: PPUSH
49849: CALL_OW 2
49853: ST_TO_ADDR
49854: GO 49805
49856: POP
49857: POP
// end ;
49858: LD_VAR 0 3
49862: RET
// export function IsDriver ( un ) ; begin
49863: LD_INT 0
49865: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
49866: LD_ADDR_VAR 0 2
49870: PUSH
49871: LD_VAR 0 1
49875: PUSH
49876: LD_INT 55
49878: PUSH
49879: EMPTY
49880: LIST
49881: PPUSH
49882: CALL_OW 69
49886: IN
49887: ST_TO_ADDR
// end ; end_of_file
49888: LD_VAR 0 2
49892: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit ; export function InitMacro ; var i ; begin
49893: LD_INT 0
49895: PPUSH
49896: PPUSH
// skirmish := false ;
49897: LD_ADDR_EXP 56
49901: PUSH
49902: LD_INT 0
49904: ST_TO_ADDR
// mc_bases := [ ] ;
49905: LD_ADDR_EXP 57
49909: PUSH
49910: EMPTY
49911: ST_TO_ADDR
// mc_sides := [ ] ;
49912: LD_ADDR_EXP 83
49916: PUSH
49917: EMPTY
49918: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
49919: LD_ADDR_EXP 58
49923: PUSH
49924: EMPTY
49925: ST_TO_ADDR
// mc_building_repairs := [ ] ;
49926: LD_ADDR_EXP 59
49930: PUSH
49931: EMPTY
49932: ST_TO_ADDR
// mc_need_heal := [ ] ;
49933: LD_ADDR_EXP 60
49937: PUSH
49938: EMPTY
49939: ST_TO_ADDR
// mc_healers := [ ] ;
49940: LD_ADDR_EXP 61
49944: PUSH
49945: EMPTY
49946: ST_TO_ADDR
// mc_build_list := [ ] ;
49947: LD_ADDR_EXP 62
49951: PUSH
49952: EMPTY
49953: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
49954: LD_ADDR_EXP 89
49958: PUSH
49959: EMPTY
49960: ST_TO_ADDR
// mc_builders := [ ] ;
49961: LD_ADDR_EXP 63
49965: PUSH
49966: EMPTY
49967: ST_TO_ADDR
// mc_construct_list := [ ] ;
49968: LD_ADDR_EXP 64
49972: PUSH
49973: EMPTY
49974: ST_TO_ADDR
// mc_turret_list := [ ] ;
49975: LD_ADDR_EXP 65
49979: PUSH
49980: EMPTY
49981: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
49982: LD_ADDR_EXP 66
49986: PUSH
49987: EMPTY
49988: ST_TO_ADDR
// mc_miners := [ ] ;
49989: LD_ADDR_EXP 71
49993: PUSH
49994: EMPTY
49995: ST_TO_ADDR
// mc_mines := [ ] ;
49996: LD_ADDR_EXP 70
50000: PUSH
50001: EMPTY
50002: ST_TO_ADDR
// mc_minefields := [ ] ;
50003: LD_ADDR_EXP 72
50007: PUSH
50008: EMPTY
50009: ST_TO_ADDR
// mc_crates := [ ] ;
50010: LD_ADDR_EXP 73
50014: PUSH
50015: EMPTY
50016: ST_TO_ADDR
// mc_crates_collector := [ ] ;
50017: LD_ADDR_EXP 74
50021: PUSH
50022: EMPTY
50023: ST_TO_ADDR
// mc_crates_area := [ ] ;
50024: LD_ADDR_EXP 75
50028: PUSH
50029: EMPTY
50030: ST_TO_ADDR
// mc_vehicles := [ ] ;
50031: LD_ADDR_EXP 76
50035: PUSH
50036: EMPTY
50037: ST_TO_ADDR
// mc_attack := [ ] ;
50038: LD_ADDR_EXP 77
50042: PUSH
50043: EMPTY
50044: ST_TO_ADDR
// mc_produce := [ ] ;
50045: LD_ADDR_EXP 78
50049: PUSH
50050: EMPTY
50051: ST_TO_ADDR
// mc_defender := [ ] ;
50052: LD_ADDR_EXP 79
50056: PUSH
50057: EMPTY
50058: ST_TO_ADDR
// mc_parking := [ ] ;
50059: LD_ADDR_EXP 81
50063: PUSH
50064: EMPTY
50065: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
50066: LD_ADDR_EXP 67
50070: PUSH
50071: EMPTY
50072: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
50073: LD_ADDR_EXP 69
50077: PUSH
50078: EMPTY
50079: ST_TO_ADDR
// mc_scan := [ ] ;
50080: LD_ADDR_EXP 80
50084: PUSH
50085: EMPTY
50086: ST_TO_ADDR
// mc_scan_area := [ ] ;
50087: LD_ADDR_EXP 82
50091: PUSH
50092: EMPTY
50093: ST_TO_ADDR
// mc_tech := [ ] ;
50094: LD_ADDR_EXP 84
50098: PUSH
50099: EMPTY
50100: ST_TO_ADDR
// end ;
50101: LD_VAR 0 1
50105: RET
// export function MC_Start ( ) ; var i ; begin
50106: LD_INT 0
50108: PPUSH
50109: PPUSH
// for i = 1 to mc_bases do
50110: LD_ADDR_VAR 0 2
50114: PUSH
50115: DOUBLE
50116: LD_INT 1
50118: DEC
50119: ST_TO_ADDR
50120: LD_EXP 57
50124: PUSH
50125: FOR_TO
50126: IFFALSE 50971
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
50128: LD_ADDR_EXP 58
50132: PUSH
50133: LD_EXP 58
50137: PPUSH
50138: LD_VAR 0 2
50142: PPUSH
50143: EMPTY
50144: PPUSH
50145: CALL_OW 1
50149: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
50150: LD_ADDR_EXP 59
50154: PUSH
50155: LD_EXP 59
50159: PPUSH
50160: LD_VAR 0 2
50164: PPUSH
50165: EMPTY
50166: PPUSH
50167: CALL_OW 1
50171: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
50172: LD_ADDR_EXP 60
50176: PUSH
50177: LD_EXP 60
50181: PPUSH
50182: LD_VAR 0 2
50186: PPUSH
50187: EMPTY
50188: PPUSH
50189: CALL_OW 1
50193: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
50194: LD_ADDR_EXP 61
50198: PUSH
50199: LD_EXP 61
50203: PPUSH
50204: LD_VAR 0 2
50208: PPUSH
50209: EMPTY
50210: PUSH
50211: EMPTY
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PPUSH
50217: CALL_OW 1
50221: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
50222: LD_ADDR_EXP 62
50226: PUSH
50227: LD_EXP 62
50231: PPUSH
50232: LD_VAR 0 2
50236: PPUSH
50237: EMPTY
50238: PPUSH
50239: CALL_OW 1
50243: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
50244: LD_ADDR_EXP 89
50248: PUSH
50249: LD_EXP 89
50253: PPUSH
50254: LD_VAR 0 2
50258: PPUSH
50259: EMPTY
50260: PPUSH
50261: CALL_OW 1
50265: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
50266: LD_ADDR_EXP 63
50270: PUSH
50271: LD_EXP 63
50275: PPUSH
50276: LD_VAR 0 2
50280: PPUSH
50281: EMPTY
50282: PPUSH
50283: CALL_OW 1
50287: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
50288: LD_ADDR_EXP 64
50292: PUSH
50293: LD_EXP 64
50297: PPUSH
50298: LD_VAR 0 2
50302: PPUSH
50303: EMPTY
50304: PPUSH
50305: CALL_OW 1
50309: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
50310: LD_ADDR_EXP 65
50314: PUSH
50315: LD_EXP 65
50319: PPUSH
50320: LD_VAR 0 2
50324: PPUSH
50325: EMPTY
50326: PPUSH
50327: CALL_OW 1
50331: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
50332: LD_ADDR_EXP 66
50336: PUSH
50337: LD_EXP 66
50341: PPUSH
50342: LD_VAR 0 2
50346: PPUSH
50347: LD_EXP 57
50351: PUSH
50352: LD_VAR 0 2
50356: ARRAY
50357: PPUSH
50358: LD_INT 2
50360: PUSH
50361: LD_INT 30
50363: PUSH
50364: LD_INT 32
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 30
50373: PUSH
50374: LD_INT 31
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 58
50388: PUSH
50389: EMPTY
50390: LIST
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PPUSH
50396: CALL_OW 72
50400: PPUSH
50401: CALL_OW 1
50405: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
50406: LD_ADDR_EXP 67
50410: PUSH
50411: LD_EXP 67
50415: PPUSH
50416: LD_VAR 0 2
50420: PPUSH
50421: EMPTY
50422: PPUSH
50423: CALL_OW 1
50427: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
50428: LD_ADDR_EXP 71
50432: PUSH
50433: LD_EXP 71
50437: PPUSH
50438: LD_VAR 0 2
50442: PPUSH
50443: EMPTY
50444: PPUSH
50445: CALL_OW 1
50449: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
50450: LD_ADDR_EXP 70
50454: PUSH
50455: LD_EXP 70
50459: PPUSH
50460: LD_VAR 0 2
50464: PPUSH
50465: EMPTY
50466: PPUSH
50467: CALL_OW 1
50471: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
50472: LD_ADDR_EXP 72
50476: PUSH
50477: LD_EXP 72
50481: PPUSH
50482: LD_VAR 0 2
50486: PPUSH
50487: EMPTY
50488: PPUSH
50489: CALL_OW 1
50493: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
50494: LD_ADDR_EXP 73
50498: PUSH
50499: LD_EXP 73
50503: PPUSH
50504: LD_VAR 0 2
50508: PPUSH
50509: EMPTY
50510: PPUSH
50511: CALL_OW 1
50515: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
50516: LD_ADDR_EXP 74
50520: PUSH
50521: LD_EXP 74
50525: PPUSH
50526: LD_VAR 0 2
50530: PPUSH
50531: EMPTY
50532: PPUSH
50533: CALL_OW 1
50537: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
50538: LD_ADDR_EXP 75
50542: PUSH
50543: LD_EXP 75
50547: PPUSH
50548: LD_VAR 0 2
50552: PPUSH
50553: EMPTY
50554: PPUSH
50555: CALL_OW 1
50559: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
50560: LD_ADDR_EXP 76
50564: PUSH
50565: LD_EXP 76
50569: PPUSH
50570: LD_VAR 0 2
50574: PPUSH
50575: EMPTY
50576: PPUSH
50577: CALL_OW 1
50581: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
50582: LD_ADDR_EXP 77
50586: PUSH
50587: LD_EXP 77
50591: PPUSH
50592: LD_VAR 0 2
50596: PPUSH
50597: EMPTY
50598: PPUSH
50599: CALL_OW 1
50603: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
50604: LD_ADDR_EXP 78
50608: PUSH
50609: LD_EXP 78
50613: PPUSH
50614: LD_VAR 0 2
50618: PPUSH
50619: EMPTY
50620: PPUSH
50621: CALL_OW 1
50625: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
50626: LD_ADDR_EXP 79
50630: PUSH
50631: LD_EXP 79
50635: PPUSH
50636: LD_VAR 0 2
50640: PPUSH
50641: EMPTY
50642: PPUSH
50643: CALL_OW 1
50647: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
50648: LD_ADDR_EXP 68
50652: PUSH
50653: LD_EXP 68
50657: PPUSH
50658: LD_VAR 0 2
50662: PPUSH
50663: LD_INT 0
50665: PPUSH
50666: CALL_OW 1
50670: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
50671: LD_ADDR_EXP 81
50675: PUSH
50676: LD_EXP 81
50680: PPUSH
50681: LD_VAR 0 2
50685: PPUSH
50686: LD_INT 0
50688: PPUSH
50689: CALL_OW 1
50693: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
50694: LD_ADDR_EXP 69
50698: PUSH
50699: LD_EXP 69
50703: PPUSH
50704: LD_VAR 0 2
50708: PPUSH
50709: EMPTY
50710: PPUSH
50711: CALL_OW 1
50715: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
50716: LD_ADDR_EXP 80
50720: PUSH
50721: LD_EXP 80
50725: PPUSH
50726: LD_VAR 0 2
50730: PPUSH
50731: LD_INT 0
50733: PPUSH
50734: CALL_OW 1
50738: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
50739: LD_ADDR_EXP 82
50743: PUSH
50744: LD_EXP 82
50748: PPUSH
50749: LD_VAR 0 2
50753: PPUSH
50754: EMPTY
50755: PPUSH
50756: CALL_OW 1
50760: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
50761: LD_ADDR_EXP 85
50765: PUSH
50766: LD_EXP 85
50770: PPUSH
50771: LD_VAR 0 2
50775: PPUSH
50776: LD_INT 0
50778: PPUSH
50779: CALL_OW 1
50783: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
50784: LD_ADDR_EXP 86
50788: PUSH
50789: LD_EXP 86
50793: PPUSH
50794: LD_VAR 0 2
50798: PPUSH
50799: EMPTY
50800: PPUSH
50801: CALL_OW 1
50805: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
50806: LD_ADDR_EXP 87
50810: PUSH
50811: LD_EXP 87
50815: PPUSH
50816: LD_VAR 0 2
50820: PPUSH
50821: EMPTY
50822: PPUSH
50823: CALL_OW 1
50827: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
50828: LD_ADDR_EXP 88
50832: PUSH
50833: LD_EXP 88
50837: PPUSH
50838: LD_VAR 0 2
50842: PPUSH
50843: EMPTY
50844: PPUSH
50845: CALL_OW 1
50849: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
50850: LD_ADDR_EXP 90
50854: PUSH
50855: LD_EXP 90
50859: PPUSH
50860: LD_VAR 0 2
50864: PPUSH
50865: LD_EXP 57
50869: PUSH
50870: LD_VAR 0 2
50874: ARRAY
50875: PPUSH
50876: LD_INT 2
50878: PUSH
50879: LD_INT 30
50881: PUSH
50882: LD_INT 6
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 30
50891: PUSH
50892: LD_INT 7
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 30
50901: PUSH
50902: LD_INT 8
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: PPUSH
50915: CALL_OW 72
50919: PPUSH
50920: CALL_OW 1
50924: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
50925: LD_ADDR_EXP 91
50929: PUSH
50930: LD_EXP 91
50934: PPUSH
50935: LD_VAR 0 2
50939: PPUSH
50940: EMPTY
50941: PPUSH
50942: CALL_OW 1
50946: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
50947: LD_ADDR_EXP 92
50951: PUSH
50952: LD_EXP 92
50956: PPUSH
50957: LD_VAR 0 2
50961: PPUSH
50962: EMPTY
50963: PPUSH
50964: CALL_OW 1
50968: ST_TO_ADDR
// end ;
50969: GO 50125
50971: POP
50972: POP
// MC_InitSides ( ) ;
50973: CALL 59547 0 0
// MC_InitResearch ( ) ;
50977: CALL 59286 0 0
// CustomInitMacro ( ) ;
50981: CALL 174 0 0
// skirmish := true ;
50985: LD_ADDR_EXP 56
50989: PUSH
50990: LD_INT 1
50992: ST_TO_ADDR
// end ;
50993: LD_VAR 0 1
50997: RET
// every 0 0$01 trigger skirmish do
50998: LD_EXP 56
51002: IFFALSE 51121
51004: GO 51006
51006: DISABLE
// begin enable ;
51007: ENABLE
// MC_CheckBuildings ( ) ;
51008: CALL 51566 0 0
// MC_CheckPeopleLife ( ) ;
51012: CALL 51691 0 0
// RaiseSailEvent ( 103 ) ;
51016: LD_INT 103
51018: PPUSH
51019: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
51023: LD_INT 104
51025: PPUSH
51026: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
51030: LD_INT 105
51032: PPUSH
51033: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
51037: LD_INT 106
51039: PPUSH
51040: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
51044: LD_INT 107
51046: PPUSH
51047: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
51051: LD_INT 108
51053: PPUSH
51054: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
51058: LD_INT 109
51060: PPUSH
51061: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
51065: LD_INT 110
51067: PPUSH
51068: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
51072: LD_INT 111
51074: PPUSH
51075: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
51079: LD_INT 112
51081: PPUSH
51082: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
51086: LD_INT 120
51088: PPUSH
51089: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
51093: LD_INT 121
51095: PPUSH
51096: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
51100: LD_INT 122
51102: PPUSH
51103: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
51107: LD_INT 123
51109: PPUSH
51110: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
51114: LD_INT 200
51116: PPUSH
51117: CALL_OW 427
// end ;
51121: END
// every 10 trigger skirmish do var i ;
51122: LD_EXP 56
51126: IFFALSE 51225
51128: GO 51130
51130: DISABLE
51131: LD_INT 0
51133: PPUSH
// begin enable ;
51134: ENABLE
// if not mc_bases then
51135: LD_EXP 57
51139: NOT
51140: IFFALSE 51144
// exit ;
51142: GO 51225
// for i = 1 to mc_bases do
51144: LD_ADDR_VAR 0 1
51148: PUSH
51149: DOUBLE
51150: LD_INT 1
51152: DEC
51153: ST_TO_ADDR
51154: LD_EXP 57
51158: PUSH
51159: FOR_TO
51160: IFFALSE 51223
// if mc_mines [ i ] and mc_miners [ i ] then
51162: LD_EXP 70
51166: PUSH
51167: LD_VAR 0 1
51171: ARRAY
51172: PUSH
51173: LD_EXP 71
51177: PUSH
51178: LD_VAR 0 1
51182: ARRAY
51183: AND
51184: IFFALSE 51221
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
51186: LD_EXP 71
51190: PUSH
51191: LD_VAR 0 1
51195: ARRAY
51196: PUSH
51197: LD_INT 1
51199: ARRAY
51200: PPUSH
51201: CALL_OW 255
51205: PPUSH
51206: LD_EXP 70
51210: PUSH
51211: LD_VAR 0 1
51215: ARRAY
51216: PPUSH
51217: CALL 15699 0 2
51221: GO 51159
51223: POP
51224: POP
// end ;
51225: PPOPN 1
51227: END
// on SailEvent ( event ) do begin if event = 101 then
51228: LD_VAR 0 1
51232: PUSH
51233: LD_INT 101
51235: EQUAL
51236: IFFALSE 51242
// MC_RepairBuildings ( ) ;
51238: CALL 52249 0 0
// if event = 102 then
51242: LD_VAR 0 1
51246: PUSH
51247: LD_INT 102
51249: EQUAL
51250: IFFALSE 51256
// MC_Heal ( ) ;
51252: CALL 52655 0 0
// if event = 103 then
51256: LD_VAR 0 1
51260: PUSH
51261: LD_INT 103
51263: EQUAL
51264: IFFALSE 51270
// MC_Build ( ) ;
51266: CALL 53077 0 0
// if event = 104 then
51270: LD_VAR 0 1
51274: PUSH
51275: LD_INT 104
51277: EQUAL
51278: IFFALSE 51284
// MC_TurretWeapon ( ) ;
51280: CALL 54443 0 0
// if event = 105 then
51284: LD_VAR 0 1
51288: PUSH
51289: LD_INT 105
51291: EQUAL
51292: IFFALSE 51298
// MC_BuildUpgrade ( ) ;
51294: CALL 53994 0 0
// if event = 106 then
51298: LD_VAR 0 1
51302: PUSH
51303: LD_INT 106
51305: EQUAL
51306: IFFALSE 51312
// MC_PlantMines ( ) ;
51308: CALL 54762 0 0
// if event = 107 then
51312: LD_VAR 0 1
51316: PUSH
51317: LD_INT 107
51319: EQUAL
51320: IFFALSE 51326
// MC_CollectCrates ( ) ;
51322: CALL 55769 0 0
// if event = 108 then
51326: LD_VAR 0 1
51330: PUSH
51331: LD_INT 108
51333: EQUAL
51334: IFFALSE 51340
// MC_LinkRemoteControl ( ) ;
51336: CALL 57179 0 0
// if event = 109 then
51340: LD_VAR 0 1
51344: PUSH
51345: LD_INT 109
51347: EQUAL
51348: IFFALSE 51354
// MC_ProduceVehicle ( ) ;
51350: CALL 57360 0 0
// if event = 110 then
51354: LD_VAR 0 1
51358: PUSH
51359: LD_INT 110
51361: EQUAL
51362: IFFALSE 51368
// MC_SendAttack ( ) ;
51364: CALL 57841 0 0
// if event = 111 then
51368: LD_VAR 0 1
51372: PUSH
51373: LD_INT 111
51375: EQUAL
51376: IFFALSE 51382
// MC_Defend ( ) ;
51378: CALL 57949 0 0
// if event = 112 then
51382: LD_VAR 0 1
51386: PUSH
51387: LD_INT 112
51389: EQUAL
51390: IFFALSE 51396
// MC_Research ( ) ;
51392: CALL 58317 0 0
// if event = 120 then
51396: LD_VAR 0 1
51400: PUSH
51401: LD_INT 120
51403: EQUAL
51404: IFFALSE 51410
// MC_RepairVehicle ( ) ;
51406: CALL 59639 0 0
// if event = 121 then
51410: LD_VAR 0 1
51414: PUSH
51415: LD_INT 121
51417: EQUAL
51418: IFFALSE 51424
// MC_TameApe ( ) ;
51420: CALL 60308 0 0
// if event = 122 then
51424: LD_VAR 0 1
51428: PUSH
51429: LD_INT 122
51431: EQUAL
51432: IFFALSE 51438
// MC_ChangeApeClass ( ) ;
51434: CALL 60865 0 0
// if event = 123 then
51438: LD_VAR 0 1
51442: PUSH
51443: LD_INT 123
51445: EQUAL
51446: IFFALSE 51452
// MC_Bazooka ( ) ;
51448: CALL 61499 0 0
// if event = 124 then
51452: LD_VAR 0 1
51456: PUSH
51457: LD_INT 124
51459: EQUAL
51460: IFFALSE 51466
// MC_TeleportExit ( ) ;
51462: CALL 61697 0 0
// if event = 200 then
51466: LD_VAR 0 1
51470: PUSH
51471: LD_INT 200
51473: EQUAL
51474: IFFALSE 51480
// MC_Idle ( ) ;
51476: CALL 62721 0 0
// end ;
51480: PPOPN 1
51482: END
// export function MC_Reset ( base , tag ) ; var i ; begin
51483: LD_INT 0
51485: PPUSH
51486: PPUSH
// if not mc_bases [ base ] or not tag then
51487: LD_EXP 57
51491: PUSH
51492: LD_VAR 0 1
51496: ARRAY
51497: NOT
51498: PUSH
51499: LD_VAR 0 2
51503: NOT
51504: OR
51505: IFFALSE 51509
// exit ;
51507: GO 51561
// for i in mc_bases [ base ] do
51509: LD_ADDR_VAR 0 4
51513: PUSH
51514: LD_EXP 57
51518: PUSH
51519: LD_VAR 0 1
51523: ARRAY
51524: PUSH
51525: FOR_IN
51526: IFFALSE 51559
// if GetTag ( i ) = tag then
51528: LD_VAR 0 4
51532: PPUSH
51533: CALL_OW 110
51537: PUSH
51538: LD_VAR 0 2
51542: EQUAL
51543: IFFALSE 51557
// SetTag ( i , 0 ) ;
51545: LD_VAR 0 4
51549: PPUSH
51550: LD_INT 0
51552: PPUSH
51553: CALL_OW 109
51557: GO 51525
51559: POP
51560: POP
// end ;
51561: LD_VAR 0 3
51565: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
51566: LD_INT 0
51568: PPUSH
51569: PPUSH
51570: PPUSH
// if not mc_bases then
51571: LD_EXP 57
51575: NOT
51576: IFFALSE 51580
// exit ;
51578: GO 51686
// for i = 1 to mc_bases do
51580: LD_ADDR_VAR 0 2
51584: PUSH
51585: DOUBLE
51586: LD_INT 1
51588: DEC
51589: ST_TO_ADDR
51590: LD_EXP 57
51594: PUSH
51595: FOR_TO
51596: IFFALSE 51677
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
51598: LD_ADDR_VAR 0 3
51602: PUSH
51603: LD_EXP 57
51607: PUSH
51608: LD_VAR 0 2
51612: ARRAY
51613: PPUSH
51614: LD_INT 21
51616: PUSH
51617: LD_INT 3
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 3
51626: PUSH
51627: LD_INT 24
51629: PUSH
51630: LD_INT 1000
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PPUSH
51645: CALL_OW 72
51649: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
51650: LD_ADDR_EXP 58
51654: PUSH
51655: LD_EXP 58
51659: PPUSH
51660: LD_VAR 0 2
51664: PPUSH
51665: LD_VAR 0 3
51669: PPUSH
51670: CALL_OW 1
51674: ST_TO_ADDR
// end ;
51675: GO 51595
51677: POP
51678: POP
// RaiseSailEvent ( 101 ) ;
51679: LD_INT 101
51681: PPUSH
51682: CALL_OW 427
// end ;
51686: LD_VAR 0 1
51690: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
51691: LD_INT 0
51693: PPUSH
51694: PPUSH
51695: PPUSH
51696: PPUSH
51697: PPUSH
51698: PPUSH
51699: PPUSH
// if not mc_bases then
51700: LD_EXP 57
51704: NOT
51705: IFFALSE 51709
// exit ;
51707: GO 52244
// for i = 1 to mc_bases do
51709: LD_ADDR_VAR 0 2
51713: PUSH
51714: DOUBLE
51715: LD_INT 1
51717: DEC
51718: ST_TO_ADDR
51719: LD_EXP 57
51723: PUSH
51724: FOR_TO
51725: IFFALSE 52235
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
51727: LD_ADDR_VAR 0 5
51731: PUSH
51732: LD_EXP 57
51736: PUSH
51737: LD_VAR 0 2
51741: ARRAY
51742: PUSH
51743: LD_EXP 86
51747: PUSH
51748: LD_VAR 0 2
51752: ARRAY
51753: UNION
51754: PPUSH
51755: LD_INT 21
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 3
51770: PUSH
51771: LD_INT 54
51773: PUSH
51774: EMPTY
51775: LIST
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 3
51783: PUSH
51784: LD_INT 24
51786: PUSH
51787: LD_INT 700
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: LIST
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PPUSH
51807: CALL_OW 72
51811: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
51812: LD_ADDR_VAR 0 6
51816: PUSH
51817: LD_EXP 57
51821: PUSH
51822: LD_VAR 0 2
51826: ARRAY
51827: PPUSH
51828: LD_INT 21
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 3
51843: PUSH
51844: LD_INT 54
51846: PUSH
51847: EMPTY
51848: LIST
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: PUSH
51857: LD_INT 24
51859: PUSH
51860: LD_INT 250
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: LIST
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PPUSH
51880: CALL_OW 72
51884: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
51885: LD_ADDR_VAR 0 7
51889: PUSH
51890: LD_VAR 0 5
51894: PUSH
51895: LD_VAR 0 6
51899: DIFF
51900: ST_TO_ADDR
// if not need_heal_1 then
51901: LD_VAR 0 6
51905: NOT
51906: IFFALSE 51939
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
51908: LD_ADDR_EXP 60
51912: PUSH
51913: LD_EXP 60
51917: PPUSH
51918: LD_VAR 0 2
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PPUSH
51930: EMPTY
51931: PPUSH
51932: CALL 19041 0 3
51936: ST_TO_ADDR
51937: GO 51971
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
51939: LD_ADDR_EXP 60
51943: PUSH
51944: LD_EXP 60
51948: PPUSH
51949: LD_VAR 0 2
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PPUSH
51961: LD_VAR 0 6
51965: PPUSH
51966: CALL 19041 0 3
51970: ST_TO_ADDR
// if not need_heal_2 then
51971: LD_VAR 0 7
51975: NOT
51976: IFFALSE 52009
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
51978: LD_ADDR_EXP 60
51982: PUSH
51983: LD_EXP 60
51987: PPUSH
51988: LD_VAR 0 2
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PPUSH
52000: EMPTY
52001: PPUSH
52002: CALL 19041 0 3
52006: ST_TO_ADDR
52007: GO 52041
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
52009: LD_ADDR_EXP 60
52013: PUSH
52014: LD_EXP 60
52018: PPUSH
52019: LD_VAR 0 2
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PPUSH
52031: LD_VAR 0 7
52035: PPUSH
52036: CALL 19041 0 3
52040: ST_TO_ADDR
// if need_heal_2 then
52041: LD_VAR 0 7
52045: IFFALSE 52217
// for j in need_heal_2 do
52047: LD_ADDR_VAR 0 3
52051: PUSH
52052: LD_VAR 0 7
52056: PUSH
52057: FOR_IN
52058: IFFALSE 52215
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
52060: LD_ADDR_VAR 0 5
52064: PUSH
52065: LD_EXP 57
52069: PUSH
52070: LD_VAR 0 2
52074: ARRAY
52075: PPUSH
52076: LD_INT 2
52078: PUSH
52079: LD_INT 30
52081: PUSH
52082: LD_INT 6
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 30
52091: PUSH
52092: LD_INT 7
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 30
52101: PUSH
52102: LD_INT 8
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 30
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 30
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 25
52131: PUSH
52132: LD_INT 4
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: PPUSH
52148: CALL_OW 72
52152: ST_TO_ADDR
// if tmp then
52153: LD_VAR 0 5
52157: IFFALSE 52213
// begin k := NearestUnitToUnit ( tmp , j ) ;
52159: LD_ADDR_VAR 0 4
52163: PUSH
52164: LD_VAR 0 5
52168: PPUSH
52169: LD_VAR 0 3
52173: PPUSH
52174: CALL_OW 74
52178: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
52179: LD_VAR 0 3
52183: PPUSH
52184: LD_VAR 0 4
52188: PPUSH
52189: CALL_OW 296
52193: PUSH
52194: LD_INT 7
52196: GREATER
52197: IFFALSE 52213
// ComMoveUnit ( j , k ) ;
52199: LD_VAR 0 3
52203: PPUSH
52204: LD_VAR 0 4
52208: PPUSH
52209: CALL_OW 112
// end ; end ;
52213: GO 52057
52215: POP
52216: POP
// if not need_heal_1 and not need_heal_2 then
52217: LD_VAR 0 6
52221: NOT
52222: PUSH
52223: LD_VAR 0 7
52227: NOT
52228: AND
52229: IFFALSE 52233
// continue ;
52231: GO 51724
// end ;
52233: GO 51724
52235: POP
52236: POP
// RaiseSailEvent ( 102 ) ;
52237: LD_INT 102
52239: PPUSH
52240: CALL_OW 427
// end ;
52244: LD_VAR 0 1
52248: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
52249: LD_INT 0
52251: PPUSH
52252: PPUSH
52253: PPUSH
52254: PPUSH
52255: PPUSH
// if not mc_bases then
52256: LD_EXP 57
52260: NOT
52261: IFFALSE 52265
// exit ;
52263: GO 52650
// for i = 1 to mc_bases do
52265: LD_ADDR_VAR 0 2
52269: PUSH
52270: DOUBLE
52271: LD_INT 1
52273: DEC
52274: ST_TO_ADDR
52275: LD_EXP 57
52279: PUSH
52280: FOR_TO
52281: IFFALSE 52648
// begin if not mc_building_need_repair [ i ] then
52283: LD_EXP 58
52287: PUSH
52288: LD_VAR 0 2
52292: ARRAY
52293: NOT
52294: IFFALSE 52332
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
52296: LD_ADDR_EXP 59
52300: PUSH
52301: LD_EXP 59
52305: PPUSH
52306: LD_VAR 0 2
52310: PPUSH
52311: EMPTY
52312: PPUSH
52313: CALL_OW 1
52317: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
52318: LD_VAR 0 2
52322: PPUSH
52323: LD_INT 101
52325: PPUSH
52326: CALL 51483 0 2
// continue ;
52330: GO 52280
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
52332: LD_ADDR_EXP 63
52336: PUSH
52337: LD_EXP 63
52341: PPUSH
52342: LD_VAR 0 2
52346: PPUSH
52347: EMPTY
52348: PPUSH
52349: CALL_OW 1
52353: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
52354: LD_VAR 0 2
52358: PPUSH
52359: LD_INT 103
52361: PPUSH
52362: CALL 51483 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
52366: LD_ADDR_VAR 0 5
52370: PUSH
52371: LD_EXP 57
52375: PUSH
52376: LD_VAR 0 2
52380: ARRAY
52381: PUSH
52382: LD_EXP 86
52386: PUSH
52387: LD_VAR 0 2
52391: ARRAY
52392: UNION
52393: PPUSH
52394: LD_INT 2
52396: PUSH
52397: LD_INT 25
52399: PUSH
52400: LD_INT 2
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 25
52409: PUSH
52410: LD_INT 16
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: LIST
52421: PUSH
52422: EMPTY
52423: LIST
52424: PPUSH
52425: CALL_OW 72
52429: ST_TO_ADDR
// if not tmp then
52430: LD_VAR 0 5
52434: NOT
52435: IFFALSE 52439
// continue ;
52437: GO 52280
// for j in tmp do
52439: LD_ADDR_VAR 0 3
52443: PUSH
52444: LD_VAR 0 5
52448: PUSH
52449: FOR_IN
52450: IFFALSE 52644
// begin if mc_need_heal [ i ] then
52452: LD_EXP 60
52456: PUSH
52457: LD_VAR 0 2
52461: ARRAY
52462: IFFALSE 52510
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
52464: LD_VAR 0 3
52468: PUSH
52469: LD_EXP 60
52473: PUSH
52474: LD_VAR 0 2
52478: ARRAY
52479: PUSH
52480: LD_INT 1
52482: ARRAY
52483: IN
52484: PUSH
52485: LD_VAR 0 3
52489: PUSH
52490: LD_EXP 60
52494: PUSH
52495: LD_VAR 0 2
52499: ARRAY
52500: PUSH
52501: LD_INT 2
52503: ARRAY
52504: IN
52505: OR
52506: IFFALSE 52510
// continue ;
52508: GO 52449
// if IsInUnit ( j ) then
52510: LD_VAR 0 3
52514: PPUSH
52515: CALL_OW 310
52519: IFFALSE 52530
// ComExitBuilding ( j ) ;
52521: LD_VAR 0 3
52525: PPUSH
52526: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
52530: LD_VAR 0 3
52534: PUSH
52535: LD_EXP 59
52539: PUSH
52540: LD_VAR 0 2
52544: ARRAY
52545: IN
52546: NOT
52547: IFFALSE 52605
// begin SetTag ( j , 101 ) ;
52549: LD_VAR 0 3
52553: PPUSH
52554: LD_INT 101
52556: PPUSH
52557: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
52561: LD_ADDR_EXP 59
52565: PUSH
52566: LD_EXP 59
52570: PPUSH
52571: LD_VAR 0 2
52575: PUSH
52576: LD_EXP 59
52580: PUSH
52581: LD_VAR 0 2
52585: ARRAY
52586: PUSH
52587: LD_INT 1
52589: PLUS
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PPUSH
52595: LD_VAR 0 3
52599: PPUSH
52600: CALL 19041 0 3
52604: ST_TO_ADDR
// end ; Wait ( 3 ) ;
52605: LD_INT 3
52607: PPUSH
52608: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
52612: LD_VAR 0 3
52616: PPUSH
52617: LD_EXP 58
52621: PUSH
52622: LD_VAR 0 2
52626: ARRAY
52627: PPUSH
52628: LD_VAR 0 3
52632: PPUSH
52633: CALL_OW 74
52637: PPUSH
52638: CALL_OW 130
// end ;
52642: GO 52449
52644: POP
52645: POP
// end ;
52646: GO 52280
52648: POP
52649: POP
// end ;
52650: LD_VAR 0 1
52654: RET
// export function MC_Heal ; var i , j , tmp ; begin
52655: LD_INT 0
52657: PPUSH
52658: PPUSH
52659: PPUSH
52660: PPUSH
// if not mc_bases then
52661: LD_EXP 57
52665: NOT
52666: IFFALSE 52670
// exit ;
52668: GO 53072
// for i = 1 to mc_bases do
52670: LD_ADDR_VAR 0 2
52674: PUSH
52675: DOUBLE
52676: LD_INT 1
52678: DEC
52679: ST_TO_ADDR
52680: LD_EXP 57
52684: PUSH
52685: FOR_TO
52686: IFFALSE 53070
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
52688: LD_EXP 60
52692: PUSH
52693: LD_VAR 0 2
52697: ARRAY
52698: PUSH
52699: LD_INT 1
52701: ARRAY
52702: NOT
52703: PUSH
52704: LD_EXP 60
52708: PUSH
52709: LD_VAR 0 2
52713: ARRAY
52714: PUSH
52715: LD_INT 2
52717: ARRAY
52718: NOT
52719: AND
52720: IFFALSE 52758
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
52722: LD_ADDR_EXP 61
52726: PUSH
52727: LD_EXP 61
52731: PPUSH
52732: LD_VAR 0 2
52736: PPUSH
52737: EMPTY
52738: PPUSH
52739: CALL_OW 1
52743: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
52744: LD_VAR 0 2
52748: PPUSH
52749: LD_INT 102
52751: PPUSH
52752: CALL 51483 0 2
// continue ;
52756: GO 52685
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
52758: LD_ADDR_VAR 0 4
52762: PUSH
52763: LD_EXP 57
52767: PUSH
52768: LD_VAR 0 2
52772: ARRAY
52773: PPUSH
52774: LD_INT 25
52776: PUSH
52777: LD_INT 4
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PPUSH
52784: CALL_OW 72
52788: ST_TO_ADDR
// if not tmp then
52789: LD_VAR 0 4
52793: NOT
52794: IFFALSE 52798
// continue ;
52796: GO 52685
// if mc_taming [ i ] then
52798: LD_EXP 88
52802: PUSH
52803: LD_VAR 0 2
52807: ARRAY
52808: IFFALSE 52832
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
52810: LD_ADDR_EXP 88
52814: PUSH
52815: LD_EXP 88
52819: PPUSH
52820: LD_VAR 0 2
52824: PPUSH
52825: EMPTY
52826: PPUSH
52827: CALL_OW 1
52831: ST_TO_ADDR
// for j in tmp do
52832: LD_ADDR_VAR 0 3
52836: PUSH
52837: LD_VAR 0 4
52841: PUSH
52842: FOR_IN
52843: IFFALSE 53066
// begin if IsInUnit ( j ) then
52845: LD_VAR 0 3
52849: PPUSH
52850: CALL_OW 310
52854: IFFALSE 52865
// ComExitBuilding ( j ) ;
52856: LD_VAR 0 3
52860: PPUSH
52861: CALL_OW 122
// if not j in mc_healers [ i ] then
52865: LD_VAR 0 3
52869: PUSH
52870: LD_EXP 61
52874: PUSH
52875: LD_VAR 0 2
52879: ARRAY
52880: IN
52881: NOT
52882: IFFALSE 52928
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
52884: LD_ADDR_EXP 61
52888: PUSH
52889: LD_EXP 61
52893: PPUSH
52894: LD_VAR 0 2
52898: PUSH
52899: LD_EXP 61
52903: PUSH
52904: LD_VAR 0 2
52908: ARRAY
52909: PUSH
52910: LD_INT 1
52912: PLUS
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PPUSH
52918: LD_VAR 0 3
52922: PPUSH
52923: CALL 19041 0 3
52927: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
52928: LD_VAR 0 3
52932: PPUSH
52933: CALL_OW 110
52937: PUSH
52938: LD_INT 102
52940: NONEQUAL
52941: IFFALSE 52955
// SetTag ( j , 102 ) ;
52943: LD_VAR 0 3
52947: PPUSH
52948: LD_INT 102
52950: PPUSH
52951: CALL_OW 109
// Wait ( 3 ) ;
52955: LD_INT 3
52957: PPUSH
52958: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
52962: LD_EXP 60
52966: PUSH
52967: LD_VAR 0 2
52971: ARRAY
52972: PUSH
52973: LD_INT 1
52975: ARRAY
52976: IFFALSE 53008
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
52978: LD_VAR 0 3
52982: PPUSH
52983: LD_EXP 60
52987: PUSH
52988: LD_VAR 0 2
52992: ARRAY
52993: PUSH
52994: LD_INT 1
52996: ARRAY
52997: PUSH
52998: LD_INT 1
53000: ARRAY
53001: PPUSH
53002: CALL_OW 128
53006: GO 53064
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
53008: LD_VAR 0 3
53012: PPUSH
53013: CALL_OW 314
53017: NOT
53018: PUSH
53019: LD_EXP 60
53023: PUSH
53024: LD_VAR 0 2
53028: ARRAY
53029: PUSH
53030: LD_INT 2
53032: ARRAY
53033: AND
53034: IFFALSE 53064
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
53036: LD_VAR 0 3
53040: PPUSH
53041: LD_EXP 60
53045: PUSH
53046: LD_VAR 0 2
53050: ARRAY
53051: PUSH
53052: LD_INT 2
53054: ARRAY
53055: PUSH
53056: LD_INT 1
53058: ARRAY
53059: PPUSH
53060: CALL_OW 128
// end ;
53064: GO 52842
53066: POP
53067: POP
// end ;
53068: GO 52685
53070: POP
53071: POP
// end ;
53072: LD_VAR 0 1
53076: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
53077: LD_INT 0
53079: PPUSH
53080: PPUSH
53081: PPUSH
53082: PPUSH
// if not mc_bases then
53083: LD_EXP 57
53087: NOT
53088: IFFALSE 53092
// exit ;
53090: GO 53989
// for i = 1 to mc_bases do
53092: LD_ADDR_VAR 0 2
53096: PUSH
53097: DOUBLE
53098: LD_INT 1
53100: DEC
53101: ST_TO_ADDR
53102: LD_EXP 57
53106: PUSH
53107: FOR_TO
53108: IFFALSE 53987
// begin if mc_scan [ i ] then
53110: LD_EXP 80
53114: PUSH
53115: LD_VAR 0 2
53119: ARRAY
53120: IFFALSE 53124
// continue ;
53122: GO 53107
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
53124: LD_EXP 62
53128: PUSH
53129: LD_VAR 0 2
53133: ARRAY
53134: NOT
53135: PUSH
53136: LD_EXP 64
53140: PUSH
53141: LD_VAR 0 2
53145: ARRAY
53146: NOT
53147: AND
53148: PUSH
53149: LD_EXP 63
53153: PUSH
53154: LD_VAR 0 2
53158: ARRAY
53159: AND
53160: IFFALSE 53198
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
53162: LD_ADDR_EXP 63
53166: PUSH
53167: LD_EXP 63
53171: PPUSH
53172: LD_VAR 0 2
53176: PPUSH
53177: EMPTY
53178: PPUSH
53179: CALL_OW 1
53183: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
53184: LD_VAR 0 2
53188: PPUSH
53189: LD_INT 103
53191: PPUSH
53192: CALL 51483 0 2
// continue ;
53196: GO 53107
// end ; if mc_construct_list [ i ] then
53198: LD_EXP 64
53202: PUSH
53203: LD_VAR 0 2
53207: ARRAY
53208: IFFALSE 53428
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
53210: LD_ADDR_VAR 0 4
53214: PUSH
53215: LD_EXP 57
53219: PUSH
53220: LD_VAR 0 2
53224: ARRAY
53225: PPUSH
53226: LD_INT 25
53228: PUSH
53229: LD_INT 2
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PPUSH
53236: CALL_OW 72
53240: PUSH
53241: LD_EXP 59
53245: PUSH
53246: LD_VAR 0 2
53250: ARRAY
53251: DIFF
53252: ST_TO_ADDR
// if not tmp then
53253: LD_VAR 0 4
53257: NOT
53258: IFFALSE 53262
// continue ;
53260: GO 53107
// for j in tmp do
53262: LD_ADDR_VAR 0 3
53266: PUSH
53267: LD_VAR 0 4
53271: PUSH
53272: FOR_IN
53273: IFFALSE 53424
// begin if not mc_builders [ i ] then
53275: LD_EXP 63
53279: PUSH
53280: LD_VAR 0 2
53284: ARRAY
53285: NOT
53286: IFFALSE 53344
// begin SetTag ( j , 103 ) ;
53288: LD_VAR 0 3
53292: PPUSH
53293: LD_INT 103
53295: PPUSH
53296: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
53300: LD_ADDR_EXP 63
53304: PUSH
53305: LD_EXP 63
53309: PPUSH
53310: LD_VAR 0 2
53314: PUSH
53315: LD_EXP 63
53319: PUSH
53320: LD_VAR 0 2
53324: ARRAY
53325: PUSH
53326: LD_INT 1
53328: PLUS
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PPUSH
53334: LD_VAR 0 3
53338: PPUSH
53339: CALL 19041 0 3
53343: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
53344: LD_VAR 0 3
53348: PPUSH
53349: CALL_OW 310
53353: IFFALSE 53364
// ComExitBuilding ( j ) ;
53355: LD_VAR 0 3
53359: PPUSH
53360: CALL_OW 122
// wait ( 3 ) ;
53364: LD_INT 3
53366: PPUSH
53367: CALL_OW 67
// if not mc_construct_list [ i ] then
53371: LD_EXP 64
53375: PUSH
53376: LD_VAR 0 2
53380: ARRAY
53381: NOT
53382: IFFALSE 53386
// break ;
53384: GO 53424
// if not HasTask ( j ) then
53386: LD_VAR 0 3
53390: PPUSH
53391: CALL_OW 314
53395: NOT
53396: IFFALSE 53422
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
53398: LD_VAR 0 3
53402: PPUSH
53403: LD_EXP 64
53407: PUSH
53408: LD_VAR 0 2
53412: ARRAY
53413: PUSH
53414: LD_INT 1
53416: ARRAY
53417: PPUSH
53418: CALL 21447 0 2
// end ;
53422: GO 53272
53424: POP
53425: POP
// end else
53426: GO 53985
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
53428: LD_EXP 62
53432: PUSH
53433: LD_VAR 0 2
53437: ARRAY
53438: PUSH
53439: LD_EXP 57
53443: PUSH
53444: LD_VAR 0 2
53448: ARRAY
53449: PPUSH
53450: LD_INT 2
53452: PUSH
53453: LD_INT 30
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 30
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: LIST
53477: PPUSH
53478: CALL_OW 72
53482: AND
53483: IFFALSE 53985
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
53485: LD_EXP 57
53489: PUSH
53490: LD_VAR 0 2
53494: ARRAY
53495: PPUSH
53496: LD_INT 2
53498: PUSH
53499: LD_INT 30
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 30
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: LIST
53523: PPUSH
53524: CALL_OW 72
53528: PUSH
53529: LD_INT 1
53531: ARRAY
53532: PPUSH
53533: LD_EXP 62
53537: PUSH
53538: LD_VAR 0 2
53542: ARRAY
53543: PUSH
53544: LD_INT 1
53546: ARRAY
53547: PUSH
53548: LD_INT 1
53550: ARRAY
53551: PPUSH
53552: LD_EXP 62
53556: PUSH
53557: LD_VAR 0 2
53561: ARRAY
53562: PUSH
53563: LD_INT 1
53565: ARRAY
53566: PUSH
53567: LD_INT 2
53569: ARRAY
53570: PPUSH
53571: LD_EXP 62
53575: PUSH
53576: LD_VAR 0 2
53580: ARRAY
53581: PUSH
53582: LD_INT 1
53584: ARRAY
53585: PUSH
53586: LD_INT 3
53588: ARRAY
53589: PPUSH
53590: LD_EXP 62
53594: PUSH
53595: LD_VAR 0 2
53599: ARRAY
53600: PUSH
53601: LD_INT 1
53603: ARRAY
53604: PUSH
53605: LD_INT 4
53607: ARRAY
53608: PPUSH
53609: CALL 25551 0 5
53613: IFFALSE 53894
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
53615: LD_ADDR_VAR 0 4
53619: PUSH
53620: LD_EXP 57
53624: PUSH
53625: LD_VAR 0 2
53629: ARRAY
53630: PPUSH
53631: LD_INT 25
53633: PUSH
53634: LD_INT 2
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PPUSH
53641: CALL_OW 72
53645: PUSH
53646: LD_EXP 59
53650: PUSH
53651: LD_VAR 0 2
53655: ARRAY
53656: DIFF
53657: ST_TO_ADDR
// if not tmp then
53658: LD_VAR 0 4
53662: NOT
53663: IFFALSE 53667
// continue ;
53665: GO 53107
// for j in tmp do
53667: LD_ADDR_VAR 0 3
53671: PUSH
53672: LD_VAR 0 4
53676: PUSH
53677: FOR_IN
53678: IFFALSE 53890
// begin if not mc_builders [ i ] then
53680: LD_EXP 63
53684: PUSH
53685: LD_VAR 0 2
53689: ARRAY
53690: NOT
53691: IFFALSE 53749
// begin SetTag ( j , 103 ) ;
53693: LD_VAR 0 3
53697: PPUSH
53698: LD_INT 103
53700: PPUSH
53701: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
53705: LD_ADDR_EXP 63
53709: PUSH
53710: LD_EXP 63
53714: PPUSH
53715: LD_VAR 0 2
53719: PUSH
53720: LD_EXP 63
53724: PUSH
53725: LD_VAR 0 2
53729: ARRAY
53730: PUSH
53731: LD_INT 1
53733: PLUS
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PPUSH
53739: LD_VAR 0 3
53743: PPUSH
53744: CALL 19041 0 3
53748: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
53749: LD_VAR 0 3
53753: PPUSH
53754: CALL_OW 310
53758: IFFALSE 53769
// ComExitBuilding ( j ) ;
53760: LD_VAR 0 3
53764: PPUSH
53765: CALL_OW 122
// wait ( 3 ) ;
53769: LD_INT 3
53771: PPUSH
53772: CALL_OW 67
// if not mc_build_list [ i ] then
53776: LD_EXP 62
53780: PUSH
53781: LD_VAR 0 2
53785: ARRAY
53786: NOT
53787: IFFALSE 53791
// break ;
53789: GO 53890
// if not HasTask ( j ) then
53791: LD_VAR 0 3
53795: PPUSH
53796: CALL_OW 314
53800: NOT
53801: IFFALSE 53888
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
53803: LD_VAR 0 3
53807: PPUSH
53808: LD_EXP 62
53812: PUSH
53813: LD_VAR 0 2
53817: ARRAY
53818: PUSH
53819: LD_INT 1
53821: ARRAY
53822: PUSH
53823: LD_INT 1
53825: ARRAY
53826: PPUSH
53827: LD_EXP 62
53831: PUSH
53832: LD_VAR 0 2
53836: ARRAY
53837: PUSH
53838: LD_INT 1
53840: ARRAY
53841: PUSH
53842: LD_INT 2
53844: ARRAY
53845: PPUSH
53846: LD_EXP 62
53850: PUSH
53851: LD_VAR 0 2
53855: ARRAY
53856: PUSH
53857: LD_INT 1
53859: ARRAY
53860: PUSH
53861: LD_INT 3
53863: ARRAY
53864: PPUSH
53865: LD_EXP 62
53869: PUSH
53870: LD_VAR 0 2
53874: ARRAY
53875: PUSH
53876: LD_INT 1
53878: ARRAY
53879: PUSH
53880: LD_INT 4
53882: ARRAY
53883: PPUSH
53884: CALL_OW 145
// end ;
53888: GO 53677
53890: POP
53891: POP
// end else
53892: GO 53985
// TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
53894: LD_EXP 57
53898: PUSH
53899: LD_VAR 0 2
53903: ARRAY
53904: PPUSH
53905: LD_EXP 62
53909: PUSH
53910: LD_VAR 0 2
53914: ARRAY
53915: PUSH
53916: LD_INT 1
53918: ARRAY
53919: PUSH
53920: LD_INT 1
53922: ARRAY
53923: PPUSH
53924: LD_EXP 62
53928: PUSH
53929: LD_VAR 0 2
53933: ARRAY
53934: PUSH
53935: LD_INT 1
53937: ARRAY
53938: PUSH
53939: LD_INT 2
53941: ARRAY
53942: PPUSH
53943: LD_EXP 62
53947: PUSH
53948: LD_VAR 0 2
53952: ARRAY
53953: PUSH
53954: LD_INT 1
53956: ARRAY
53957: PUSH
53958: LD_INT 3
53960: ARRAY
53961: PPUSH
53962: LD_EXP 62
53966: PUSH
53967: LD_VAR 0 2
53971: ARRAY
53972: PUSH
53973: LD_INT 1
53975: ARRAY
53976: PUSH
53977: LD_INT 4
53979: ARRAY
53980: PPUSH
53981: CALL 25235 0 5
// end ;
53985: GO 53107
53987: POP
53988: POP
// end ;
53989: LD_VAR 0 1
53993: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
53994: LD_INT 0
53996: PPUSH
53997: PPUSH
53998: PPUSH
53999: PPUSH
54000: PPUSH
54001: PPUSH
// if not mc_bases then
54002: LD_EXP 57
54006: NOT
54007: IFFALSE 54011
// exit ;
54009: GO 54438
// for i = 1 to mc_bases do
54011: LD_ADDR_VAR 0 2
54015: PUSH
54016: DOUBLE
54017: LD_INT 1
54019: DEC
54020: ST_TO_ADDR
54021: LD_EXP 57
54025: PUSH
54026: FOR_TO
54027: IFFALSE 54436
// begin tmp := mc_build_upgrade [ i ] ;
54029: LD_ADDR_VAR 0 4
54033: PUSH
54034: LD_EXP 89
54038: PUSH
54039: LD_VAR 0 2
54043: ARRAY
54044: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
54045: LD_ADDR_VAR 0 6
54049: PUSH
54050: LD_EXP 90
54054: PUSH
54055: LD_VAR 0 2
54059: ARRAY
54060: PPUSH
54061: LD_INT 2
54063: PUSH
54064: LD_INT 30
54066: PUSH
54067: LD_INT 6
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 30
54076: PUSH
54077: LD_INT 7
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: LIST
54088: PPUSH
54089: CALL_OW 72
54093: ST_TO_ADDR
// if not tmp and not lab then
54094: LD_VAR 0 4
54098: NOT
54099: PUSH
54100: LD_VAR 0 6
54104: NOT
54105: AND
54106: IFFALSE 54110
// continue ;
54108: GO 54026
// if tmp then
54110: LD_VAR 0 4
54114: IFFALSE 54234
// for j in tmp do
54116: LD_ADDR_VAR 0 3
54120: PUSH
54121: LD_VAR 0 4
54125: PUSH
54126: FOR_IN
54127: IFFALSE 54232
// begin if UpgradeCost ( j ) then
54129: LD_VAR 0 3
54133: PPUSH
54134: CALL 24895 0 1
54138: IFFALSE 54230
// begin ComUpgrade ( j ) ;
54140: LD_VAR 0 3
54144: PPUSH
54145: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
54149: LD_ADDR_EXP 89
54153: PUSH
54154: LD_EXP 89
54158: PPUSH
54159: LD_VAR 0 2
54163: PPUSH
54164: LD_EXP 89
54168: PUSH
54169: LD_VAR 0 2
54173: ARRAY
54174: PUSH
54175: LD_VAR 0 3
54179: DIFF
54180: PPUSH
54181: CALL_OW 1
54185: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
54186: LD_ADDR_EXP 64
54190: PUSH
54191: LD_EXP 64
54195: PPUSH
54196: LD_VAR 0 2
54200: PUSH
54201: LD_EXP 64
54205: PUSH
54206: LD_VAR 0 2
54210: ARRAY
54211: PUSH
54212: LD_INT 1
54214: PLUS
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PPUSH
54220: LD_VAR 0 3
54224: PPUSH
54225: CALL 19041 0 3
54229: ST_TO_ADDR
// end ; end ;
54230: GO 54126
54232: POP
54233: POP
// if not lab or not mc_lab_upgrade [ i ] then
54234: LD_VAR 0 6
54238: NOT
54239: PUSH
54240: LD_EXP 91
54244: PUSH
54245: LD_VAR 0 2
54249: ARRAY
54250: NOT
54251: OR
54252: IFFALSE 54256
// continue ;
54254: GO 54026
// for j in lab do
54256: LD_ADDR_VAR 0 3
54260: PUSH
54261: LD_VAR 0 6
54265: PUSH
54266: FOR_IN
54267: IFFALSE 54432
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
54269: LD_VAR 0 3
54273: PPUSH
54274: CALL_OW 266
54278: PUSH
54279: LD_INT 6
54281: PUSH
54282: LD_INT 7
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: IN
54289: PUSH
54290: LD_VAR 0 3
54294: PPUSH
54295: CALL_OW 461
54299: PUSH
54300: LD_INT 1
54302: NONEQUAL
54303: AND
54304: IFFALSE 54430
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
54306: LD_VAR 0 3
54310: PPUSH
54311: LD_EXP 91
54315: PUSH
54316: LD_VAR 0 2
54320: ARRAY
54321: PUSH
54322: LD_INT 1
54324: ARRAY
54325: PPUSH
54326: CALL 25100 0 2
54330: IFFALSE 54430
// begin ComCancel ( j ) ;
54332: LD_VAR 0 3
54336: PPUSH
54337: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
54341: LD_VAR 0 3
54345: PPUSH
54346: LD_EXP 91
54350: PUSH
54351: LD_VAR 0 2
54355: ARRAY
54356: PUSH
54357: LD_INT 1
54359: ARRAY
54360: PPUSH
54361: CALL_OW 207
// if not j in mc_construct_list [ i ] then
54365: LD_VAR 0 3
54369: PUSH
54370: LD_EXP 64
54374: PUSH
54375: LD_VAR 0 2
54379: ARRAY
54380: IN
54381: NOT
54382: IFFALSE 54428
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
54384: LD_ADDR_EXP 64
54388: PUSH
54389: LD_EXP 64
54393: PPUSH
54394: LD_VAR 0 2
54398: PUSH
54399: LD_EXP 64
54403: PUSH
54404: LD_VAR 0 2
54408: ARRAY
54409: PUSH
54410: LD_INT 1
54412: PLUS
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PPUSH
54418: LD_VAR 0 3
54422: PPUSH
54423: CALL 19041 0 3
54427: ST_TO_ADDR
// break ;
54428: GO 54432
// end ; end ; end ;
54430: GO 54266
54432: POP
54433: POP
// end ;
54434: GO 54026
54436: POP
54437: POP
// end ;
54438: LD_VAR 0 1
54442: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
54443: LD_INT 0
54445: PPUSH
54446: PPUSH
54447: PPUSH
54448: PPUSH
54449: PPUSH
54450: PPUSH
54451: PPUSH
// if not mc_bases then
54452: LD_EXP 57
54456: NOT
54457: IFFALSE 54461
// exit ;
54459: GO 54757
// for i = 1 to mc_bases do
54461: LD_ADDR_VAR 0 2
54465: PUSH
54466: DOUBLE
54467: LD_INT 1
54469: DEC
54470: ST_TO_ADDR
54471: LD_EXP 57
54475: PUSH
54476: FOR_TO
54477: IFFALSE 54755
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
54479: LD_EXP 65
54483: PUSH
54484: LD_VAR 0 2
54488: ARRAY
54489: NOT
54490: PUSH
54491: LD_EXP 57
54495: PUSH
54496: LD_VAR 0 2
54500: ARRAY
54501: PPUSH
54502: LD_INT 30
54504: PUSH
54505: LD_INT 3
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PPUSH
54512: CALL_OW 72
54516: NOT
54517: OR
54518: IFFALSE 54522
// continue ;
54520: GO 54476
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
54522: LD_EXP 65
54526: PUSH
54527: LD_VAR 0 2
54531: ARRAY
54532: PUSH
54533: LD_INT 1
54535: ARRAY
54536: PPUSH
54537: CALL_OW 269
54541: IFFALSE 54607
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
54543: LD_ADDR_VAR 0 4
54547: PUSH
54548: LD_EXP 65
54552: PUSH
54553: LD_VAR 0 2
54557: ARRAY
54558: PPUSH
54559: LD_INT 1
54561: PPUSH
54562: CALL_OW 3
54566: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
54567: LD_ADDR_EXP 65
54571: PUSH
54572: LD_EXP 65
54576: PPUSH
54577: LD_VAR 0 2
54581: PPUSH
54582: LD_VAR 0 4
54586: PPUSH
54587: CALL_OW 1
54591: ST_TO_ADDR
// if not mc_turret_list [ i ] then
54592: LD_EXP 65
54596: PUSH
54597: LD_VAR 0 2
54601: ARRAY
54602: NOT
54603: IFFALSE 54607
// continue ;
54605: GO 54476
// end ; busy := false ;
54607: LD_ADDR_VAR 0 6
54611: PUSH
54612: LD_INT 0
54614: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
54615: LD_ADDR_VAR 0 4
54619: PUSH
54620: LD_EXP 57
54624: PUSH
54625: LD_VAR 0 2
54629: ARRAY
54630: PPUSH
54631: LD_INT 30
54633: PUSH
54634: LD_INT 3
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PPUSH
54641: CALL_OW 72
54645: ST_TO_ADDR
// for j in tmp do
54646: LD_ADDR_VAR 0 3
54650: PUSH
54651: LD_VAR 0 4
54655: PUSH
54656: FOR_IN
54657: IFFALSE 54685
// if not BuildingStatus ( j ) = bs_idle then
54659: LD_VAR 0 3
54663: PPUSH
54664: CALL_OW 461
54668: PUSH
54669: LD_INT 2
54671: EQUAL
54672: NOT
54673: IFFALSE 54683
// busy := true ;
54675: LD_ADDR_VAR 0 6
54679: PUSH
54680: LD_INT 1
54682: ST_TO_ADDR
54683: GO 54656
54685: POP
54686: POP
// if busy then
54687: LD_VAR 0 6
54691: IFFALSE 54695
// continue ;
54693: GO 54476
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
54695: LD_ADDR_VAR 0 7
54699: PUSH
54700: LD_EXP 65
54704: PUSH
54705: LD_VAR 0 2
54709: ARRAY
54710: PUSH
54711: LD_INT 1
54713: ARRAY
54714: PPUSH
54715: CALL 23343 0 1
54719: ST_TO_ADDR
// if not weapon then
54720: LD_VAR 0 7
54724: NOT
54725: IFFALSE 54729
// continue ;
54727: GO 54476
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
54729: LD_EXP 65
54733: PUSH
54734: LD_VAR 0 2
54738: ARRAY
54739: PUSH
54740: LD_INT 1
54742: ARRAY
54743: PPUSH
54744: LD_VAR 0 7
54748: PPUSH
54749: CALL_OW 148
// end ;
54753: GO 54476
54755: POP
54756: POP
// end ;
54757: LD_VAR 0 1
54761: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
54762: LD_INT 0
54764: PPUSH
54765: PPUSH
54766: PPUSH
54767: PPUSH
54768: PPUSH
54769: PPUSH
// if not mc_bases then
54770: LD_EXP 57
54774: NOT
54775: IFFALSE 54779
// exit ;
54777: GO 55764
// for i = 1 to mc_bases do
54779: LD_ADDR_VAR 0 2
54783: PUSH
54784: DOUBLE
54785: LD_INT 1
54787: DEC
54788: ST_TO_ADDR
54789: LD_EXP 57
54793: PUSH
54794: FOR_TO
54795: IFFALSE 55762
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
54797: LD_EXP 70
54801: PUSH
54802: LD_VAR 0 2
54806: ARRAY
54807: NOT
54808: PUSH
54809: LD_EXP 70
54813: PUSH
54814: LD_VAR 0 2
54818: ARRAY
54819: PUSH
54820: LD_EXP 71
54824: PUSH
54825: LD_VAR 0 2
54829: ARRAY
54830: EQUAL
54831: OR
54832: IFFALSE 54836
// continue ;
54834: GO 54794
// if mc_miners [ i ] then
54836: LD_EXP 71
54840: PUSH
54841: LD_VAR 0 2
54845: ARRAY
54846: IFFALSE 55449
// begin k := 1 ;
54848: LD_ADDR_VAR 0 4
54852: PUSH
54853: LD_INT 1
54855: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
54856: LD_ADDR_VAR 0 3
54860: PUSH
54861: DOUBLE
54862: LD_EXP 71
54866: PUSH
54867: LD_VAR 0 2
54871: ARRAY
54872: INC
54873: ST_TO_ADDR
54874: LD_INT 1
54876: PUSH
54877: FOR_DOWNTO
54878: IFFALSE 55447
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
54880: LD_EXP 71
54884: PUSH
54885: LD_VAR 0 2
54889: ARRAY
54890: PUSH
54891: LD_VAR 0 3
54895: ARRAY
54896: PPUSH
54897: CALL_OW 301
54901: IFFALSE 54964
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
54903: LD_ADDR_VAR 0 5
54907: PUSH
54908: LD_EXP 71
54912: PUSH
54913: LD_VAR 0 2
54917: ARRAY
54918: PUSH
54919: LD_EXP 71
54923: PUSH
54924: LD_VAR 0 2
54928: ARRAY
54929: PUSH
54930: LD_VAR 0 3
54934: ARRAY
54935: DIFF
54936: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
54937: LD_ADDR_EXP 71
54941: PUSH
54942: LD_EXP 71
54946: PPUSH
54947: LD_VAR 0 2
54951: PPUSH
54952: LD_VAR 0 5
54956: PPUSH
54957: CALL_OW 1
54961: ST_TO_ADDR
// continue ;
54962: GO 54877
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
54964: LD_EXP 71
54968: PUSH
54969: LD_VAR 0 2
54973: ARRAY
54974: PUSH
54975: LD_VAR 0 3
54979: ARRAY
54980: PPUSH
54981: CALL 18542 0 1
54985: PUSH
54986: LD_EXP 71
54990: PUSH
54991: LD_VAR 0 2
54995: ARRAY
54996: PUSH
54997: LD_VAR 0 3
55001: ARRAY
55002: PPUSH
55003: CALL_OW 255
55007: PPUSH
55008: LD_EXP 70
55012: PUSH
55013: LD_VAR 0 2
55017: ARRAY
55018: PUSH
55019: LD_VAR 0 4
55023: ARRAY
55024: PUSH
55025: LD_INT 1
55027: ARRAY
55028: PPUSH
55029: LD_EXP 70
55033: PUSH
55034: LD_VAR 0 2
55038: ARRAY
55039: PUSH
55040: LD_VAR 0 4
55044: ARRAY
55045: PUSH
55046: LD_INT 2
55048: ARRAY
55049: PPUSH
55050: LD_INT 15
55052: PPUSH
55053: CALL 19535 0 4
55057: PUSH
55058: LD_INT 4
55060: ARRAY
55061: PUSH
55062: LD_EXP 71
55066: PUSH
55067: LD_VAR 0 2
55071: ARRAY
55072: PUSH
55073: LD_VAR 0 3
55077: ARRAY
55078: PPUSH
55079: LD_INT 10
55081: PPUSH
55082: CALL 21232 0 2
55086: PUSH
55087: LD_INT 4
55089: ARRAY
55090: OR
55091: AND
55092: IFFALSE 55115
// ComStop ( mc_miners [ i ] [ j ] ) ;
55094: LD_EXP 71
55098: PUSH
55099: LD_VAR 0 2
55103: ARRAY
55104: PUSH
55105: LD_VAR 0 3
55109: ARRAY
55110: PPUSH
55111: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
55115: LD_EXP 71
55119: PUSH
55120: LD_VAR 0 2
55124: ARRAY
55125: PUSH
55126: LD_VAR 0 3
55130: ARRAY
55131: PPUSH
55132: CALL_OW 257
55136: PUSH
55137: LD_INT 1
55139: EQUAL
55140: PUSH
55141: LD_EXP 71
55145: PUSH
55146: LD_VAR 0 2
55150: ARRAY
55151: PUSH
55152: LD_VAR 0 3
55156: ARRAY
55157: PPUSH
55158: CALL_OW 459
55162: NOT
55163: AND
55164: PUSH
55165: LD_EXP 71
55169: PUSH
55170: LD_VAR 0 2
55174: ARRAY
55175: PUSH
55176: LD_VAR 0 3
55180: ARRAY
55181: PPUSH
55182: CALL_OW 255
55186: PPUSH
55187: LD_EXP 70
55191: PUSH
55192: LD_VAR 0 2
55196: ARRAY
55197: PUSH
55198: LD_VAR 0 4
55202: ARRAY
55203: PUSH
55204: LD_INT 1
55206: ARRAY
55207: PPUSH
55208: LD_EXP 70
55212: PUSH
55213: LD_VAR 0 2
55217: ARRAY
55218: PUSH
55219: LD_VAR 0 4
55223: ARRAY
55224: PUSH
55225: LD_INT 2
55227: ARRAY
55228: PPUSH
55229: LD_INT 15
55231: PPUSH
55232: CALL 19535 0 4
55236: PUSH
55237: LD_INT 4
55239: ARRAY
55240: PUSH
55241: LD_INT 0
55243: EQUAL
55244: AND
55245: PUSH
55246: LD_EXP 71
55250: PUSH
55251: LD_VAR 0 2
55255: ARRAY
55256: PUSH
55257: LD_VAR 0 3
55261: ARRAY
55262: PPUSH
55263: CALL_OW 314
55267: NOT
55268: AND
55269: IFFALSE 55445
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
55271: LD_EXP 71
55275: PUSH
55276: LD_VAR 0 2
55280: ARRAY
55281: PUSH
55282: LD_VAR 0 3
55286: ARRAY
55287: PPUSH
55288: CALL_OW 310
55292: IFFALSE 55315
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
55294: LD_EXP 71
55298: PUSH
55299: LD_VAR 0 2
55303: ARRAY
55304: PUSH
55305: LD_VAR 0 3
55309: ARRAY
55310: PPUSH
55311: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
55315: LD_EXP 71
55319: PUSH
55320: LD_VAR 0 2
55324: ARRAY
55325: PUSH
55326: LD_VAR 0 3
55330: ARRAY
55331: PPUSH
55332: CALL_OW 314
55336: NOT
55337: IFFALSE 55405
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
55339: LD_EXP 71
55343: PUSH
55344: LD_VAR 0 2
55348: ARRAY
55349: PUSH
55350: LD_VAR 0 3
55354: ARRAY
55355: PPUSH
55356: LD_EXP 70
55360: PUSH
55361: LD_VAR 0 2
55365: ARRAY
55366: PUSH
55367: LD_VAR 0 4
55371: ARRAY
55372: PUSH
55373: LD_INT 1
55375: ARRAY
55376: PPUSH
55377: LD_EXP 70
55381: PUSH
55382: LD_VAR 0 2
55386: ARRAY
55387: PUSH
55388: LD_VAR 0 4
55392: ARRAY
55393: PUSH
55394: LD_INT 2
55396: ARRAY
55397: PPUSH
55398: LD_INT 0
55400: PPUSH
55401: CALL_OW 193
// k := k + 1 ;
55405: LD_ADDR_VAR 0 4
55409: PUSH
55410: LD_VAR 0 4
55414: PUSH
55415: LD_INT 1
55417: PLUS
55418: ST_TO_ADDR
// if k > mc_mines [ i ] then
55419: LD_VAR 0 4
55423: PUSH
55424: LD_EXP 70
55428: PUSH
55429: LD_VAR 0 2
55433: ARRAY
55434: GREATER
55435: IFFALSE 55445
// k := 1 ;
55437: LD_ADDR_VAR 0 4
55441: PUSH
55442: LD_INT 1
55444: ST_TO_ADDR
// end ; end ;
55445: GO 54877
55447: POP
55448: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
55449: LD_ADDR_VAR 0 5
55453: PUSH
55454: LD_EXP 57
55458: PUSH
55459: LD_VAR 0 2
55463: ARRAY
55464: PPUSH
55465: LD_INT 2
55467: PUSH
55468: LD_INT 30
55470: PUSH
55471: LD_INT 4
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 30
55480: PUSH
55481: LD_INT 5
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 30
55490: PUSH
55491: LD_INT 32
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: PPUSH
55504: CALL_OW 72
55508: ST_TO_ADDR
// if not tmp then
55509: LD_VAR 0 5
55513: NOT
55514: IFFALSE 55518
// continue ;
55516: GO 54794
// list := [ ] ;
55518: LD_ADDR_VAR 0 6
55522: PUSH
55523: EMPTY
55524: ST_TO_ADDR
// for j in tmp do
55525: LD_ADDR_VAR 0 3
55529: PUSH
55530: LD_VAR 0 5
55534: PUSH
55535: FOR_IN
55536: IFFALSE 55605
// begin for k in UnitsInside ( j ) do
55538: LD_ADDR_VAR 0 4
55542: PUSH
55543: LD_VAR 0 3
55547: PPUSH
55548: CALL_OW 313
55552: PUSH
55553: FOR_IN
55554: IFFALSE 55601
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
55556: LD_VAR 0 4
55560: PPUSH
55561: CALL_OW 257
55565: PUSH
55566: LD_INT 1
55568: EQUAL
55569: PUSH
55570: LD_VAR 0 4
55574: PPUSH
55575: CALL_OW 459
55579: NOT
55580: AND
55581: IFFALSE 55599
// list := list ^ k ;
55583: LD_ADDR_VAR 0 6
55587: PUSH
55588: LD_VAR 0 6
55592: PUSH
55593: LD_VAR 0 4
55597: ADD
55598: ST_TO_ADDR
55599: GO 55553
55601: POP
55602: POP
// end ;
55603: GO 55535
55605: POP
55606: POP
// list := list diff mc_miners [ i ] ;
55607: LD_ADDR_VAR 0 6
55611: PUSH
55612: LD_VAR 0 6
55616: PUSH
55617: LD_EXP 71
55621: PUSH
55622: LD_VAR 0 2
55626: ARRAY
55627: DIFF
55628: ST_TO_ADDR
// if not list then
55629: LD_VAR 0 6
55633: NOT
55634: IFFALSE 55638
// continue ;
55636: GO 54794
// k := mc_mines [ i ] - mc_miners [ i ] ;
55638: LD_ADDR_VAR 0 4
55642: PUSH
55643: LD_EXP 70
55647: PUSH
55648: LD_VAR 0 2
55652: ARRAY
55653: PUSH
55654: LD_EXP 71
55658: PUSH
55659: LD_VAR 0 2
55663: ARRAY
55664: MINUS
55665: ST_TO_ADDR
// if k > list then
55666: LD_VAR 0 4
55670: PUSH
55671: LD_VAR 0 6
55675: GREATER
55676: IFFALSE 55688
// k := list ;
55678: LD_ADDR_VAR 0 4
55682: PUSH
55683: LD_VAR 0 6
55687: ST_TO_ADDR
// for j = 1 to k do
55688: LD_ADDR_VAR 0 3
55692: PUSH
55693: DOUBLE
55694: LD_INT 1
55696: DEC
55697: ST_TO_ADDR
55698: LD_VAR 0 4
55702: PUSH
55703: FOR_TO
55704: IFFALSE 55758
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
55706: LD_ADDR_EXP 71
55710: PUSH
55711: LD_EXP 71
55715: PPUSH
55716: LD_VAR 0 2
55720: PUSH
55721: LD_EXP 71
55725: PUSH
55726: LD_VAR 0 2
55730: ARRAY
55731: PUSH
55732: LD_INT 1
55734: PLUS
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PPUSH
55740: LD_VAR 0 6
55744: PUSH
55745: LD_VAR 0 3
55749: ARRAY
55750: PPUSH
55751: CALL 19041 0 3
55755: ST_TO_ADDR
55756: GO 55703
55758: POP
55759: POP
// end ;
55760: GO 54794
55762: POP
55763: POP
// end ;
55764: LD_VAR 0 1
55768: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
55769: LD_INT 0
55771: PPUSH
55772: PPUSH
55773: PPUSH
55774: PPUSH
55775: PPUSH
55776: PPUSH
55777: PPUSH
55778: PPUSH
55779: PPUSH
// if not mc_bases then
55780: LD_EXP 57
55784: NOT
55785: IFFALSE 55789
// exit ;
55787: GO 57174
// for i = 1 to mc_bases do
55789: LD_ADDR_VAR 0 2
55793: PUSH
55794: DOUBLE
55795: LD_INT 1
55797: DEC
55798: ST_TO_ADDR
55799: LD_EXP 57
55803: PUSH
55804: FOR_TO
55805: IFFALSE 57172
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
55807: LD_EXP 57
55811: PUSH
55812: LD_VAR 0 2
55816: ARRAY
55817: NOT
55818: PUSH
55819: LD_EXP 64
55823: PUSH
55824: LD_VAR 0 2
55828: ARRAY
55829: OR
55830: IFFALSE 55834
// continue ;
55832: GO 55804
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
55834: LD_EXP 73
55838: PUSH
55839: LD_VAR 0 2
55843: ARRAY
55844: NOT
55845: PUSH
55846: LD_EXP 74
55850: PUSH
55851: LD_VAR 0 2
55855: ARRAY
55856: AND
55857: IFFALSE 55895
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
55859: LD_ADDR_EXP 74
55863: PUSH
55864: LD_EXP 74
55868: PPUSH
55869: LD_VAR 0 2
55873: PPUSH
55874: EMPTY
55875: PPUSH
55876: CALL_OW 1
55880: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
55881: LD_VAR 0 2
55885: PPUSH
55886: LD_INT 107
55888: PPUSH
55889: CALL 51483 0 2
// continue ;
55893: GO 55804
// end ; target := [ ] ;
55895: LD_ADDR_VAR 0 5
55899: PUSH
55900: EMPTY
55901: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
55902: LD_ADDR_VAR 0 3
55906: PUSH
55907: DOUBLE
55908: LD_EXP 73
55912: PUSH
55913: LD_VAR 0 2
55917: ARRAY
55918: INC
55919: ST_TO_ADDR
55920: LD_INT 1
55922: PUSH
55923: FOR_DOWNTO
55924: IFFALSE 56184
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
55926: LD_EXP 73
55930: PUSH
55931: LD_VAR 0 2
55935: ARRAY
55936: PUSH
55937: LD_VAR 0 3
55941: ARRAY
55942: PUSH
55943: LD_INT 2
55945: ARRAY
55946: PPUSH
55947: LD_EXP 73
55951: PUSH
55952: LD_VAR 0 2
55956: ARRAY
55957: PUSH
55958: LD_VAR 0 3
55962: ARRAY
55963: PUSH
55964: LD_INT 3
55966: ARRAY
55967: PPUSH
55968: CALL_OW 488
55972: PUSH
55973: LD_EXP 73
55977: PUSH
55978: LD_VAR 0 2
55982: ARRAY
55983: PUSH
55984: LD_VAR 0 3
55988: ARRAY
55989: PUSH
55990: LD_INT 2
55992: ARRAY
55993: PPUSH
55994: LD_EXP 73
55998: PUSH
55999: LD_VAR 0 2
56003: ARRAY
56004: PUSH
56005: LD_VAR 0 3
56009: ARRAY
56010: PUSH
56011: LD_INT 3
56013: ARRAY
56014: PPUSH
56015: CALL_OW 284
56019: PUSH
56020: LD_INT 0
56022: EQUAL
56023: AND
56024: IFFALSE 56079
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
56026: LD_ADDR_VAR 0 4
56030: PUSH
56031: LD_EXP 73
56035: PUSH
56036: LD_VAR 0 2
56040: ARRAY
56041: PPUSH
56042: LD_VAR 0 3
56046: PPUSH
56047: CALL_OW 3
56051: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
56052: LD_ADDR_EXP 73
56056: PUSH
56057: LD_EXP 73
56061: PPUSH
56062: LD_VAR 0 2
56066: PPUSH
56067: LD_VAR 0 4
56071: PPUSH
56072: CALL_OW 1
56076: ST_TO_ADDR
// continue ;
56077: GO 55923
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
56079: LD_EXP 57
56083: PUSH
56084: LD_VAR 0 2
56088: ARRAY
56089: PUSH
56090: LD_INT 1
56092: ARRAY
56093: PPUSH
56094: CALL_OW 255
56098: PPUSH
56099: LD_EXP 73
56103: PUSH
56104: LD_VAR 0 2
56108: ARRAY
56109: PUSH
56110: LD_VAR 0 3
56114: ARRAY
56115: PUSH
56116: LD_INT 2
56118: ARRAY
56119: PPUSH
56120: LD_EXP 73
56124: PUSH
56125: LD_VAR 0 2
56129: ARRAY
56130: PUSH
56131: LD_VAR 0 3
56135: ARRAY
56136: PUSH
56137: LD_INT 3
56139: ARRAY
56140: PPUSH
56141: LD_INT 20
56143: PPUSH
56144: CALL 19535 0 4
56148: PUSH
56149: LD_INT 4
56151: ARRAY
56152: PUSH
56153: LD_INT 0
56155: EQUAL
56156: IFFALSE 56182
// begin target := mc_crates [ i ] [ j ] ;
56158: LD_ADDR_VAR 0 5
56162: PUSH
56163: LD_EXP 73
56167: PUSH
56168: LD_VAR 0 2
56172: ARRAY
56173: PUSH
56174: LD_VAR 0 3
56178: ARRAY
56179: ST_TO_ADDR
// break ;
56180: GO 56184
// end ; end ;
56182: GO 55923
56184: POP
56185: POP
// if not target then
56186: LD_VAR 0 5
56190: NOT
56191: IFFALSE 56195
// continue ;
56193: GO 55804
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
56195: LD_ADDR_VAR 0 6
56199: PUSH
56200: LD_EXP 76
56204: PUSH
56205: LD_VAR 0 2
56209: ARRAY
56210: PPUSH
56211: LD_INT 2
56213: PUSH
56214: LD_INT 3
56216: PUSH
56217: LD_INT 58
56219: PUSH
56220: EMPTY
56221: LIST
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 61
56229: PUSH
56230: EMPTY
56231: LIST
56232: PUSH
56233: LD_INT 33
56235: PUSH
56236: LD_INT 5
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 33
56245: PUSH
56246: LD_INT 3
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: LD_INT 34
56265: PUSH
56266: LD_INT 32
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 34
56275: PUSH
56276: LD_INT 51
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 34
56285: PUSH
56286: LD_INT 12
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PPUSH
56303: CALL_OW 72
56307: ST_TO_ADDR
// if not cargo then
56308: LD_VAR 0 6
56312: NOT
56313: IFFALSE 56707
// begin if mc_crates_collector [ i ] < 5 then
56315: LD_EXP 74
56319: PUSH
56320: LD_VAR 0 2
56324: ARRAY
56325: PUSH
56326: LD_INT 5
56328: LESS
56329: IFFALSE 56521
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
56331: LD_ADDR_VAR 0 4
56335: PUSH
56336: LD_EXP 57
56340: PUSH
56341: LD_VAR 0 2
56345: ARRAY
56346: PUSH
56347: LD_EXP 86
56351: PUSH
56352: LD_VAR 0 2
56356: ARRAY
56357: UNION
56358: PPUSH
56359: LD_INT 2
56361: PUSH
56362: LD_INT 25
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 25
56374: PUSH
56375: LD_INT 16
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 24
56389: PUSH
56390: LD_INT 750
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PPUSH
56401: CALL_OW 72
56405: ST_TO_ADDR
// if not tmp then
56406: LD_VAR 0 4
56410: NOT
56411: IFFALSE 56415
// continue ;
56413: GO 55804
// for j in tmp do
56415: LD_ADDR_VAR 0 3
56419: PUSH
56420: LD_VAR 0 4
56424: PUSH
56425: FOR_IN
56426: IFFALSE 56519
// if GetTag ( j ) = 0 then
56428: LD_VAR 0 3
56432: PPUSH
56433: CALL_OW 110
56437: PUSH
56438: LD_INT 0
56440: EQUAL
56441: IFFALSE 56517
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
56443: LD_ADDR_EXP 74
56447: PUSH
56448: LD_EXP 74
56452: PPUSH
56453: LD_VAR 0 2
56457: PUSH
56458: LD_EXP 74
56462: PUSH
56463: LD_VAR 0 2
56467: ARRAY
56468: PUSH
56469: LD_INT 1
56471: PLUS
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PPUSH
56477: LD_VAR 0 3
56481: PPUSH
56482: CALL 19041 0 3
56486: ST_TO_ADDR
// SetTag ( j , 107 ) ;
56487: LD_VAR 0 3
56491: PPUSH
56492: LD_INT 107
56494: PPUSH
56495: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
56499: LD_EXP 74
56503: PUSH
56504: LD_VAR 0 2
56508: ARRAY
56509: PUSH
56510: LD_INT 5
56512: GREATER
56513: IFFALSE 56517
// break ;
56515: GO 56519
// end ;
56517: GO 56425
56519: POP
56520: POP
// end ; if mc_crates_collector [ i ] and target then
56521: LD_EXP 74
56525: PUSH
56526: LD_VAR 0 2
56530: ARRAY
56531: PUSH
56532: LD_VAR 0 5
56536: AND
56537: IFFALSE 56705
// begin if mc_crates_collector [ i ] < target [ 1 ] then
56539: LD_EXP 74
56543: PUSH
56544: LD_VAR 0 2
56548: ARRAY
56549: PUSH
56550: LD_VAR 0 5
56554: PUSH
56555: LD_INT 1
56557: ARRAY
56558: LESS
56559: IFFALSE 56579
// tmp := mc_crates_collector [ i ] else
56561: LD_ADDR_VAR 0 4
56565: PUSH
56566: LD_EXP 74
56570: PUSH
56571: LD_VAR 0 2
56575: ARRAY
56576: ST_TO_ADDR
56577: GO 56593
// tmp := target [ 1 ] ;
56579: LD_ADDR_VAR 0 4
56583: PUSH
56584: LD_VAR 0 5
56588: PUSH
56589: LD_INT 1
56591: ARRAY
56592: ST_TO_ADDR
// for j = 1 to tmp do
56593: LD_ADDR_VAR 0 3
56597: PUSH
56598: DOUBLE
56599: LD_INT 1
56601: DEC
56602: ST_TO_ADDR
56603: LD_VAR 0 4
56607: PUSH
56608: FOR_TO
56609: IFFALSE 56703
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
56611: LD_EXP 74
56615: PUSH
56616: LD_VAR 0 2
56620: ARRAY
56621: PUSH
56622: LD_VAR 0 3
56626: ARRAY
56627: PPUSH
56628: CALL_OW 310
56632: IFFALSE 56655
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
56634: LD_EXP 74
56638: PUSH
56639: LD_VAR 0 2
56643: ARRAY
56644: PUSH
56645: LD_VAR 0 3
56649: ARRAY
56650: PPUSH
56651: CALL_OW 122
// wait ( 3 ) ;
56655: LD_INT 3
56657: PPUSH
56658: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
56662: LD_EXP 74
56666: PUSH
56667: LD_VAR 0 2
56671: ARRAY
56672: PUSH
56673: LD_VAR 0 3
56677: ARRAY
56678: PPUSH
56679: LD_VAR 0 5
56683: PUSH
56684: LD_INT 2
56686: ARRAY
56687: PPUSH
56688: LD_VAR 0 5
56692: PUSH
56693: LD_INT 3
56695: ARRAY
56696: PPUSH
56697: CALL_OW 117
// end ;
56701: GO 56608
56703: POP
56704: POP
// end ; end else
56705: GO 57170
// begin for j in cargo do
56707: LD_ADDR_VAR 0 3
56711: PUSH
56712: LD_VAR 0 6
56716: PUSH
56717: FOR_IN
56718: IFFALSE 57168
// begin if GetTag ( j ) <> 0 then
56720: LD_VAR 0 3
56724: PPUSH
56725: CALL_OW 110
56729: PUSH
56730: LD_INT 0
56732: NONEQUAL
56733: IFFALSE 56737
// continue ;
56735: GO 56717
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
56737: LD_VAR 0 3
56741: PPUSH
56742: CALL_OW 262
56746: PUSH
56747: LD_INT 2
56749: EQUAL
56750: PUSH
56751: LD_VAR 0 3
56755: PPUSH
56756: CALL_OW 261
56760: PUSH
56761: LD_INT 15
56763: LESS
56764: AND
56765: IFFALSE 56769
// continue ;
56767: GO 56717
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
56769: LD_VAR 0 3
56773: PPUSH
56774: CALL_OW 262
56778: PUSH
56779: LD_INT 1
56781: EQUAL
56782: PUSH
56783: LD_VAR 0 3
56787: PPUSH
56788: CALL_OW 261
56792: PUSH
56793: LD_INT 10
56795: LESS
56796: AND
56797: IFFALSE 57107
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56799: LD_ADDR_VAR 0 7
56803: PUSH
56804: LD_EXP 57
56808: PUSH
56809: LD_VAR 0 2
56813: ARRAY
56814: PPUSH
56815: LD_INT 2
56817: PUSH
56818: LD_INT 30
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 30
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: LIST
56842: PPUSH
56843: CALL_OW 72
56847: ST_TO_ADDR
// if not depot then
56848: LD_VAR 0 7
56852: NOT
56853: IFFALSE 56857
// continue ;
56855: GO 56717
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
56857: LD_VAR 0 3
56861: PPUSH
56862: LD_VAR 0 7
56866: PPUSH
56867: LD_VAR 0 3
56871: PPUSH
56872: CALL_OW 74
56876: PPUSH
56877: CALL_OW 296
56881: PUSH
56882: LD_INT 6
56884: LESS
56885: IFFALSE 56901
// SetFuel ( j , 100 ) else
56887: LD_VAR 0 3
56891: PPUSH
56892: LD_INT 100
56894: PPUSH
56895: CALL_OW 240
56899: GO 57107
// if GetFuel ( j ) = 0 then
56901: LD_VAR 0 3
56905: PPUSH
56906: CALL_OW 261
56910: PUSH
56911: LD_INT 0
56913: EQUAL
56914: IFFALSE 57107
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
56916: LD_ADDR_EXP 76
56920: PUSH
56921: LD_EXP 76
56925: PPUSH
56926: LD_VAR 0 2
56930: PPUSH
56931: LD_EXP 76
56935: PUSH
56936: LD_VAR 0 2
56940: ARRAY
56941: PUSH
56942: LD_VAR 0 3
56946: DIFF
56947: PPUSH
56948: CALL_OW 1
56952: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
56953: LD_VAR 0 3
56957: PPUSH
56958: CALL_OW 263
56962: PUSH
56963: LD_INT 1
56965: EQUAL
56966: IFFALSE 56982
// ComExitVehicle ( IsInUnit ( j ) ) ;
56968: LD_VAR 0 3
56972: PPUSH
56973: CALL_OW 310
56977: PPUSH
56978: CALL_OW 121
// if GetControl ( j ) = control_remote then
56982: LD_VAR 0 3
56986: PPUSH
56987: CALL_OW 263
56991: PUSH
56992: LD_INT 2
56994: EQUAL
56995: IFFALSE 57006
// ComUnlink ( j ) ;
56997: LD_VAR 0 3
57001: PPUSH
57002: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
57006: LD_ADDR_VAR 0 8
57010: PUSH
57011: LD_VAR 0 2
57015: PPUSH
57016: LD_INT 3
57018: PPUSH
57019: CALL 63623 0 2
57023: ST_TO_ADDR
// if fac then
57024: LD_VAR 0 8
57028: IFFALSE 57105
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
57030: LD_ADDR_VAR 0 9
57034: PUSH
57035: LD_VAR 0 8
57039: PPUSH
57040: LD_VAR 0 3
57044: PPUSH
57045: CALL_OW 265
57049: PPUSH
57050: LD_VAR 0 3
57054: PPUSH
57055: CALL_OW 262
57059: PPUSH
57060: LD_VAR 0 3
57064: PPUSH
57065: CALL_OW 263
57069: PPUSH
57070: LD_VAR 0 3
57074: PPUSH
57075: CALL_OW 264
57079: PPUSH
57080: CALL 16206 0 5
57084: ST_TO_ADDR
// if components then
57085: LD_VAR 0 9
57089: IFFALSE 57105
// MC_InsertProduceList ( i , components ) ;
57091: LD_VAR 0 2
57095: PPUSH
57096: LD_VAR 0 9
57100: PPUSH
57101: CALL 63286 0 2
// end ; continue ;
57105: GO 56717
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
57107: LD_VAR 0 3
57111: PPUSH
57112: LD_INT 1
57114: PPUSH
57115: CALL_OW 289
57119: PUSH
57120: LD_INT 100
57122: LESS
57123: PUSH
57124: LD_VAR 0 3
57128: PPUSH
57129: CALL_OW 314
57133: NOT
57134: AND
57135: IFFALSE 57164
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
57137: LD_VAR 0 3
57141: PPUSH
57142: LD_VAR 0 5
57146: PUSH
57147: LD_INT 2
57149: ARRAY
57150: PPUSH
57151: LD_VAR 0 5
57155: PUSH
57156: LD_INT 3
57158: ARRAY
57159: PPUSH
57160: CALL_OW 117
// break ;
57164: GO 57168
// end ;
57166: GO 56717
57168: POP
57169: POP
// end ; end ;
57170: GO 55804
57172: POP
57173: POP
// end ;
57174: LD_VAR 0 1
57178: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
57179: LD_INT 0
57181: PPUSH
57182: PPUSH
57183: PPUSH
57184: PPUSH
// if not mc_bases then
57185: LD_EXP 57
57189: NOT
57190: IFFALSE 57194
// exit ;
57192: GO 57355
// for i = 1 to mc_bases do
57194: LD_ADDR_VAR 0 2
57198: PUSH
57199: DOUBLE
57200: LD_INT 1
57202: DEC
57203: ST_TO_ADDR
57204: LD_EXP 57
57208: PUSH
57209: FOR_TO
57210: IFFALSE 57353
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
57212: LD_ADDR_VAR 0 4
57216: PUSH
57217: LD_EXP 76
57221: PUSH
57222: LD_VAR 0 2
57226: ARRAY
57227: PUSH
57228: LD_EXP 79
57232: PUSH
57233: LD_VAR 0 2
57237: ARRAY
57238: ADD
57239: PPUSH
57240: LD_INT 33
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PPUSH
57250: CALL_OW 72
57254: ST_TO_ADDR
// if tmp then
57255: LD_VAR 0 4
57259: IFFALSE 57351
// for j in tmp do
57261: LD_ADDR_VAR 0 3
57265: PUSH
57266: LD_VAR 0 4
57270: PUSH
57271: FOR_IN
57272: IFFALSE 57349
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
57274: LD_VAR 0 3
57278: PPUSH
57279: CALL_OW 312
57283: NOT
57284: PUSH
57285: LD_VAR 0 3
57289: PPUSH
57290: CALL_OW 256
57294: PUSH
57295: LD_INT 250
57297: GREATEREQUAL
57298: AND
57299: IFFALSE 57312
// Connect ( j ) else
57301: LD_VAR 0 3
57305: PPUSH
57306: CALL 21529 0 1
57310: GO 57347
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
57312: LD_VAR 0 3
57316: PPUSH
57317: CALL_OW 256
57321: PUSH
57322: LD_INT 250
57324: LESS
57325: PUSH
57326: LD_VAR 0 3
57330: PPUSH
57331: CALL_OW 312
57335: AND
57336: IFFALSE 57347
// ComUnlink ( j ) ;
57338: LD_VAR 0 3
57342: PPUSH
57343: CALL_OW 136
57347: GO 57271
57349: POP
57350: POP
// end ;
57351: GO 57209
57353: POP
57354: POP
// end ;
57355: LD_VAR 0 1
57359: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
57360: LD_INT 0
57362: PPUSH
57363: PPUSH
57364: PPUSH
57365: PPUSH
57366: PPUSH
// if not mc_bases then
57367: LD_EXP 57
57371: NOT
57372: IFFALSE 57376
// exit ;
57374: GO 57836
// for i = 1 to mc_bases do
57376: LD_ADDR_VAR 0 2
57380: PUSH
57381: DOUBLE
57382: LD_INT 1
57384: DEC
57385: ST_TO_ADDR
57386: LD_EXP 57
57390: PUSH
57391: FOR_TO
57392: IFFALSE 57834
// begin if not mc_produce [ i ] then
57394: LD_EXP 78
57398: PUSH
57399: LD_VAR 0 2
57403: ARRAY
57404: NOT
57405: IFFALSE 57409
// continue ;
57407: GO 57391
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
57409: LD_ADDR_VAR 0 5
57413: PUSH
57414: LD_EXP 57
57418: PUSH
57419: LD_VAR 0 2
57423: ARRAY
57424: PPUSH
57425: LD_INT 30
57427: PUSH
57428: LD_INT 3
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PPUSH
57435: CALL_OW 72
57439: ST_TO_ADDR
// if not fac then
57440: LD_VAR 0 5
57444: NOT
57445: IFFALSE 57449
// continue ;
57447: GO 57391
// for j in fac do
57449: LD_ADDR_VAR 0 3
57453: PUSH
57454: LD_VAR 0 5
57458: PUSH
57459: FOR_IN
57460: IFFALSE 57830
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
57462: LD_VAR 0 3
57466: PPUSH
57467: CALL_OW 461
57471: PUSH
57472: LD_INT 2
57474: NONEQUAL
57475: PUSH
57476: LD_VAR 0 3
57480: PPUSH
57481: LD_INT 15
57483: PPUSH
57484: CALL 21232 0 2
57488: PUSH
57489: LD_INT 4
57491: ARRAY
57492: OR
57493: PUSH
57494: LD_VAR 0 3
57498: PPUSH
57499: CALL_OW 313
57503: PUSH
57504: LD_INT 0
57506: EQUAL
57507: OR
57508: IFFALSE 57512
// continue ;
57510: GO 57459
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
57512: LD_VAR 0 3
57516: PPUSH
57517: LD_EXP 78
57521: PUSH
57522: LD_VAR 0 2
57526: ARRAY
57527: PUSH
57528: LD_INT 1
57530: ARRAY
57531: PUSH
57532: LD_INT 1
57534: ARRAY
57535: PPUSH
57536: LD_EXP 78
57540: PUSH
57541: LD_VAR 0 2
57545: ARRAY
57546: PUSH
57547: LD_INT 1
57549: ARRAY
57550: PUSH
57551: LD_INT 2
57553: ARRAY
57554: PPUSH
57555: LD_EXP 78
57559: PUSH
57560: LD_VAR 0 2
57564: ARRAY
57565: PUSH
57566: LD_INT 1
57568: ARRAY
57569: PUSH
57570: LD_INT 3
57572: ARRAY
57573: PPUSH
57574: LD_EXP 78
57578: PUSH
57579: LD_VAR 0 2
57583: ARRAY
57584: PUSH
57585: LD_INT 1
57587: ARRAY
57588: PUSH
57589: LD_INT 4
57591: ARRAY
57592: PPUSH
57593: CALL_OW 448
57597: PUSH
57598: LD_VAR 0 3
57602: PPUSH
57603: LD_EXP 78
57607: PUSH
57608: LD_VAR 0 2
57612: ARRAY
57613: PUSH
57614: LD_INT 1
57616: ARRAY
57617: PUSH
57618: LD_INT 1
57620: ARRAY
57621: PUSH
57622: LD_EXP 78
57626: PUSH
57627: LD_VAR 0 2
57631: ARRAY
57632: PUSH
57633: LD_INT 1
57635: ARRAY
57636: PUSH
57637: LD_INT 2
57639: ARRAY
57640: PUSH
57641: LD_EXP 78
57645: PUSH
57646: LD_VAR 0 2
57650: ARRAY
57651: PUSH
57652: LD_INT 1
57654: ARRAY
57655: PUSH
57656: LD_INT 3
57658: ARRAY
57659: PUSH
57660: LD_EXP 78
57664: PUSH
57665: LD_VAR 0 2
57669: ARRAY
57670: PUSH
57671: LD_INT 1
57673: ARRAY
57674: PUSH
57675: LD_INT 4
57677: ARRAY
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: PPUSH
57685: CALL 24734 0 2
57689: AND
57690: IFFALSE 57828
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
57692: LD_VAR 0 3
57696: PPUSH
57697: LD_EXP 78
57701: PUSH
57702: LD_VAR 0 2
57706: ARRAY
57707: PUSH
57708: LD_INT 1
57710: ARRAY
57711: PUSH
57712: LD_INT 1
57714: ARRAY
57715: PPUSH
57716: LD_EXP 78
57720: PUSH
57721: LD_VAR 0 2
57725: ARRAY
57726: PUSH
57727: LD_INT 1
57729: ARRAY
57730: PUSH
57731: LD_INT 2
57733: ARRAY
57734: PPUSH
57735: LD_EXP 78
57739: PUSH
57740: LD_VAR 0 2
57744: ARRAY
57745: PUSH
57746: LD_INT 1
57748: ARRAY
57749: PUSH
57750: LD_INT 3
57752: ARRAY
57753: PPUSH
57754: LD_EXP 78
57758: PUSH
57759: LD_VAR 0 2
57763: ARRAY
57764: PUSH
57765: LD_INT 1
57767: ARRAY
57768: PUSH
57769: LD_INT 4
57771: ARRAY
57772: PPUSH
57773: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
57777: LD_ADDR_VAR 0 4
57781: PUSH
57782: LD_EXP 78
57786: PUSH
57787: LD_VAR 0 2
57791: ARRAY
57792: PPUSH
57793: LD_INT 1
57795: PPUSH
57796: CALL_OW 3
57800: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
57801: LD_ADDR_EXP 78
57805: PUSH
57806: LD_EXP 78
57810: PPUSH
57811: LD_VAR 0 2
57815: PPUSH
57816: LD_VAR 0 4
57820: PPUSH
57821: CALL_OW 1
57825: ST_TO_ADDR
// break ;
57826: GO 57830
// end ; end ;
57828: GO 57459
57830: POP
57831: POP
// end ;
57832: GO 57391
57834: POP
57835: POP
// end ;
57836: LD_VAR 0 1
57840: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
57841: LD_INT 0
57843: PPUSH
57844: PPUSH
57845: PPUSH
// if not mc_bases then
57846: LD_EXP 57
57850: NOT
57851: IFFALSE 57855
// exit ;
57853: GO 57944
// for i = 1 to mc_bases do
57855: LD_ADDR_VAR 0 2
57859: PUSH
57860: DOUBLE
57861: LD_INT 1
57863: DEC
57864: ST_TO_ADDR
57865: LD_EXP 57
57869: PUSH
57870: FOR_TO
57871: IFFALSE 57942
// begin if mc_attack [ i ] then
57873: LD_EXP 77
57877: PUSH
57878: LD_VAR 0 2
57882: ARRAY
57883: IFFALSE 57940
// begin tmp := mc_attack [ i ] [ 1 ] ;
57885: LD_ADDR_VAR 0 3
57889: PUSH
57890: LD_EXP 77
57894: PUSH
57895: LD_VAR 0 2
57899: ARRAY
57900: PUSH
57901: LD_INT 1
57903: ARRAY
57904: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
57905: LD_ADDR_EXP 77
57909: PUSH
57910: LD_EXP 77
57914: PPUSH
57915: LD_VAR 0 2
57919: PPUSH
57920: EMPTY
57921: PPUSH
57922: CALL_OW 1
57926: ST_TO_ADDR
// Attack ( tmp ) ;
57927: LD_VAR 0 3
57931: PPUSH
57932: CALL 46381 0 1
// exit ;
57936: POP
57937: POP
57938: GO 57944
// end ; end ;
57940: GO 57870
57942: POP
57943: POP
// end ;
57944: LD_VAR 0 1
57948: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
57949: LD_INT 0
57951: PPUSH
57952: PPUSH
57953: PPUSH
57954: PPUSH
57955: PPUSH
57956: PPUSH
57957: PPUSH
// if not mc_bases then
57958: LD_EXP 57
57962: NOT
57963: IFFALSE 57967
// exit ;
57965: GO 58312
// class := AllowSpecClass ( mc_defender [ 1 ] ) ;
57967: LD_ADDR_VAR 0 7
57971: PUSH
57972: LD_EXP 79
57976: PUSH
57977: LD_INT 1
57979: ARRAY
57980: PPUSH
57981: CALL 15546 0 1
57985: ST_TO_ADDR
// for i = 1 to mc_bases do
57986: LD_ADDR_VAR 0 2
57990: PUSH
57991: DOUBLE
57992: LD_INT 1
57994: DEC
57995: ST_TO_ADDR
57996: LD_EXP 57
58000: PUSH
58001: FOR_TO
58002: IFFALSE 58310
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ 1 ] ) , mc_scan_area [ i ] ) ) ;
58004: LD_ADDR_EXP 80
58008: PUSH
58009: LD_EXP 80
58013: PPUSH
58014: LD_VAR 0 2
58018: PPUSH
58019: LD_EXP 57
58023: PUSH
58024: LD_INT 1
58026: ARRAY
58027: PPUSH
58028: CALL_OW 255
58032: PPUSH
58033: LD_EXP 82
58037: PUSH
58038: LD_VAR 0 2
58042: ARRAY
58043: PPUSH
58044: CALL 14004 0 2
58048: PPUSH
58049: CALL_OW 1
58053: ST_TO_ADDR
// if not mc_scan [ i ] then
58054: LD_EXP 80
58058: PUSH
58059: LD_VAR 0 2
58063: ARRAY
58064: NOT
58065: IFFALSE 58217
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
58067: LD_ADDR_VAR 0 4
58071: PUSH
58072: LD_EXP 57
58076: PUSH
58077: LD_VAR 0 2
58081: ARRAY
58082: PPUSH
58083: LD_INT 2
58085: PUSH
58086: LD_INT 25
58088: PUSH
58089: LD_INT 5
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 25
58098: PUSH
58099: LD_INT 8
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 25
58108: PUSH
58109: LD_INT 9
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: PPUSH
58122: CALL_OW 72
58126: ST_TO_ADDR
// if not tmp then
58127: LD_VAR 0 4
58131: NOT
58132: IFFALSE 58136
// continue ;
58134: GO 58001
// for j in tmp do
58136: LD_ADDR_VAR 0 3
58140: PUSH
58141: LD_VAR 0 4
58145: PUSH
58146: FOR_IN
58147: IFFALSE 58215
// if GetBType ( IsInUnit ( j ) ) in [ b_barracks ] and GetClass ( j ) = 1 and not MineOfUnit ( j ) then
58149: LD_VAR 0 3
58153: PPUSH
58154: CALL_OW 310
58158: PPUSH
58159: CALL_OW 266
58163: PUSH
58164: LD_INT 5
58166: PUSH
58167: EMPTY
58168: LIST
58169: IN
58170: PUSH
58171: LD_VAR 0 3
58175: PPUSH
58176: CALL_OW 257
58180: PUSH
58181: LD_INT 1
58183: EQUAL
58184: AND
58185: PUSH
58186: LD_VAR 0 3
58190: PPUSH
58191: CALL_OW 459
58195: NOT
58196: AND
58197: IFFALSE 58213
// ComChangeProfession ( j , class ) ;
58199: LD_VAR 0 3
58203: PPUSH
58204: LD_VAR 0 7
58208: PPUSH
58209: CALL_OW 123
58213: GO 58146
58215: POP
58216: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
58217: LD_EXP 80
58221: PUSH
58222: LD_VAR 0 2
58226: ARRAY
58227: PUSH
58228: LD_EXP 79
58232: PUSH
58233: LD_VAR 0 2
58237: ARRAY
58238: AND
58239: IFFALSE 58308
// begin tmp := mc_defender [ i ] ;
58241: LD_ADDR_VAR 0 4
58245: PUSH
58246: LD_EXP 79
58250: PUSH
58251: LD_VAR 0 2
58255: ARRAY
58256: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
58257: LD_ADDR_EXP 79
58261: PUSH
58262: LD_EXP 79
58266: PPUSH
58267: LD_VAR 0 2
58271: PPUSH
58272: EMPTY
58273: PPUSH
58274: CALL_OW 1
58278: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
58279: LD_VAR 0 2
58283: PPUSH
58284: LD_VAR 0 4
58288: PPUSH
58289: LD_EXP 80
58293: PUSH
58294: LD_VAR 0 2
58298: ARRAY
58299: PPUSH
58300: CALL 14039 0 3
// exit ;
58304: POP
58305: POP
58306: GO 58312
// end ; end ;
58308: GO 58001
58310: POP
58311: POP
// end ;
58312: LD_VAR 0 1
58316: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
58317: LD_INT 0
58319: PPUSH
58320: PPUSH
58321: PPUSH
58322: PPUSH
58323: PPUSH
58324: PPUSH
58325: PPUSH
58326: PPUSH
58327: PPUSH
// if not mc_bases then
58328: LD_EXP 57
58332: NOT
58333: IFFALSE 58337
// exit ;
58335: GO 59281
// for i = 1 to mc_bases do
58337: LD_ADDR_VAR 0 2
58341: PUSH
58342: DOUBLE
58343: LD_INT 1
58345: DEC
58346: ST_TO_ADDR
58347: LD_EXP 57
58351: PUSH
58352: FOR_TO
58353: IFFALSE 59279
// begin tmp := mc_lab [ i ] ;
58355: LD_ADDR_VAR 0 6
58359: PUSH
58360: LD_EXP 90
58364: PUSH
58365: LD_VAR 0 2
58369: ARRAY
58370: ST_TO_ADDR
// if not tmp then
58371: LD_VAR 0 6
58375: NOT
58376: IFFALSE 58380
// continue ;
58378: GO 58352
// for j in tmp do
58380: LD_ADDR_VAR 0 3
58384: PUSH
58385: LD_VAR 0 6
58389: PUSH
58390: FOR_IN
58391: IFFALSE 59275
// begin side := GetSide ( j ) ;
58393: LD_ADDR_VAR 0 4
58397: PUSH
58398: LD_VAR 0 3
58402: PPUSH
58403: CALL_OW 255
58407: ST_TO_ADDR
// if not mc_tech [ side ] then
58408: LD_EXP 84
58412: PUSH
58413: LD_VAR 0 4
58417: ARRAY
58418: NOT
58419: IFFALSE 58423
// continue ;
58421: GO 58390
// if BuildingStatus ( j ) = bs_idle then
58423: LD_VAR 0 3
58427: PPUSH
58428: CALL_OW 461
58432: PUSH
58433: LD_INT 2
58435: EQUAL
58436: IFFALSE 58509
// for t in mc_tech [ side ] do
58438: LD_ADDR_VAR 0 5
58442: PUSH
58443: LD_EXP 84
58447: PUSH
58448: LD_VAR 0 4
58452: ARRAY
58453: PUSH
58454: FOR_IN
58455: IFFALSE 58507
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
58457: LD_VAR 0 3
58461: PPUSH
58462: LD_VAR 0 5
58466: PPUSH
58467: CALL_OW 430
58471: PUSH
58472: LD_VAR 0 4
58476: PPUSH
58477: LD_VAR 0 5
58481: PPUSH
58482: CALL 13112 0 2
58486: AND
58487: IFFALSE 58505
// begin ComResearch ( j , t ) ;
58489: LD_VAR 0 3
58493: PPUSH
58494: LD_VAR 0 5
58498: PPUSH
58499: CALL_OW 124
// break ;
58503: GO 58507
// end ;
58505: GO 58454
58507: POP
58508: POP
// if BuildingStatus ( j ) = bs_need_ape then
58509: LD_VAR 0 3
58513: PPUSH
58514: CALL_OW 461
58518: PUSH
58519: LD_INT 10
58521: EQUAL
58522: IFFALSE 59110
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
58524: LD_EXP 86
58528: PUSH
58529: LD_VAR 0 2
58533: ARRAY
58534: NOT
58535: PUSH
58536: LD_EXP 87
58540: PUSH
58541: LD_VAR 0 2
58545: ARRAY
58546: NOT
58547: AND
58548: PUSH
58549: LD_EXP 84
58553: PUSH
58554: LD_VAR 0 4
58558: ARRAY
58559: PUSH
58560: LD_INT 1
58562: GREATER
58563: AND
58564: IFFALSE 58695
// begin ComCancel ( j ) ;
58566: LD_VAR 0 3
58570: PPUSH
58571: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
58575: LD_ADDR_EXP 84
58579: PUSH
58580: LD_EXP 84
58584: PPUSH
58585: LD_VAR 0 4
58589: PPUSH
58590: LD_EXP 84
58594: PUSH
58595: LD_VAR 0 4
58599: ARRAY
58600: PPUSH
58601: LD_EXP 84
58605: PUSH
58606: LD_VAR 0 4
58610: ARRAY
58611: PUSH
58612: LD_INT 1
58614: MINUS
58615: PPUSH
58616: LD_EXP 84
58620: PUSH
58621: LD_VAR 0 4
58625: ARRAY
58626: PPUSH
58627: LD_INT 0
58629: PPUSH
58630: CALL 18024 0 4
58634: PPUSH
58635: CALL_OW 1
58639: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
58640: LD_ADDR_EXP 84
58644: PUSH
58645: LD_EXP 84
58649: PPUSH
58650: LD_VAR 0 4
58654: PPUSH
58655: LD_EXP 84
58659: PUSH
58660: LD_VAR 0 4
58664: ARRAY
58665: PPUSH
58666: LD_EXP 84
58670: PUSH
58671: LD_VAR 0 4
58675: ARRAY
58676: PPUSH
58677: LD_INT 1
58679: PPUSH
58680: LD_INT 0
58682: PPUSH
58683: CALL 18024 0 4
58687: PPUSH
58688: CALL_OW 1
58692: ST_TO_ADDR
// continue ;
58693: GO 58390
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
58695: LD_EXP 86
58699: PUSH
58700: LD_VAR 0 2
58704: ARRAY
58705: PUSH
58706: LD_EXP 87
58710: PUSH
58711: LD_VAR 0 2
58715: ARRAY
58716: NOT
58717: AND
58718: IFFALSE 58845
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
58720: LD_ADDR_EXP 87
58724: PUSH
58725: LD_EXP 87
58729: PPUSH
58730: LD_VAR 0 2
58734: PUSH
58735: LD_EXP 87
58739: PUSH
58740: LD_VAR 0 2
58744: ARRAY
58745: PUSH
58746: LD_INT 1
58748: PLUS
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PPUSH
58754: LD_EXP 86
58758: PUSH
58759: LD_VAR 0 2
58763: ARRAY
58764: PUSH
58765: LD_INT 1
58767: ARRAY
58768: PPUSH
58769: CALL 19041 0 3
58773: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
58774: LD_EXP 86
58778: PUSH
58779: LD_VAR 0 2
58783: ARRAY
58784: PUSH
58785: LD_INT 1
58787: ARRAY
58788: PPUSH
58789: LD_INT 112
58791: PPUSH
58792: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
58796: LD_ADDR_VAR 0 9
58800: PUSH
58801: LD_EXP 86
58805: PUSH
58806: LD_VAR 0 2
58810: ARRAY
58811: PPUSH
58812: LD_INT 1
58814: PPUSH
58815: CALL_OW 3
58819: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
58820: LD_ADDR_EXP 86
58824: PUSH
58825: LD_EXP 86
58829: PPUSH
58830: LD_VAR 0 2
58834: PPUSH
58835: LD_VAR 0 9
58839: PPUSH
58840: CALL_OW 1
58844: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
58845: LD_EXP 86
58849: PUSH
58850: LD_VAR 0 2
58854: ARRAY
58855: PUSH
58856: LD_EXP 87
58860: PUSH
58861: LD_VAR 0 2
58865: ARRAY
58866: AND
58867: PUSH
58868: LD_EXP 87
58872: PUSH
58873: LD_VAR 0 2
58877: ARRAY
58878: PUSH
58879: LD_INT 1
58881: ARRAY
58882: PPUSH
58883: CALL_OW 310
58887: NOT
58888: AND
58889: PUSH
58890: LD_VAR 0 3
58894: PPUSH
58895: CALL_OW 313
58899: PUSH
58900: LD_INT 6
58902: EQUAL
58903: AND
58904: IFFALSE 58960
// begin tmp2 := UnitsInside ( j ) ;
58906: LD_ADDR_VAR 0 9
58910: PUSH
58911: LD_VAR 0 3
58915: PPUSH
58916: CALL_OW 313
58920: ST_TO_ADDR
// if tmp2 = 6 then
58921: LD_VAR 0 9
58925: PUSH
58926: LD_INT 6
58928: EQUAL
58929: IFFALSE 58960
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
58931: LD_VAR 0 9
58935: PUSH
58936: LD_INT 1
58938: ARRAY
58939: PPUSH
58940: LD_INT 112
58942: PPUSH
58943: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
58947: LD_VAR 0 9
58951: PUSH
58952: LD_INT 1
58954: ARRAY
58955: PPUSH
58956: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
58960: LD_EXP 87
58964: PUSH
58965: LD_VAR 0 2
58969: ARRAY
58970: PUSH
58971: LD_EXP 87
58975: PUSH
58976: LD_VAR 0 2
58980: ARRAY
58981: PUSH
58982: LD_INT 1
58984: ARRAY
58985: PPUSH
58986: CALL_OW 314
58990: NOT
58991: AND
58992: PUSH
58993: LD_EXP 87
58997: PUSH
58998: LD_VAR 0 2
59002: ARRAY
59003: PUSH
59004: LD_INT 1
59006: ARRAY
59007: PPUSH
59008: CALL_OW 310
59012: NOT
59013: AND
59014: IFFALSE 59040
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
59016: LD_EXP 87
59020: PUSH
59021: LD_VAR 0 2
59025: ARRAY
59026: PUSH
59027: LD_INT 1
59029: ARRAY
59030: PPUSH
59031: LD_VAR 0 3
59035: PPUSH
59036: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
59040: LD_EXP 87
59044: PUSH
59045: LD_VAR 0 2
59049: ARRAY
59050: PUSH
59051: LD_INT 1
59053: ARRAY
59054: PPUSH
59055: CALL_OW 310
59059: PUSH
59060: LD_EXP 87
59064: PUSH
59065: LD_VAR 0 2
59069: ARRAY
59070: PUSH
59071: LD_INT 1
59073: ARRAY
59074: PPUSH
59075: CALL_OW 310
59079: PPUSH
59080: CALL_OW 461
59084: PUSH
59085: LD_INT 3
59087: NONEQUAL
59088: AND
59089: IFFALSE 59110
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
59091: LD_EXP 87
59095: PUSH
59096: LD_VAR 0 2
59100: ARRAY
59101: PUSH
59102: LD_INT 1
59104: ARRAY
59105: PPUSH
59106: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
59110: LD_VAR 0 3
59114: PPUSH
59115: CALL_OW 461
59119: PUSH
59120: LD_INT 6
59122: EQUAL
59123: PUSH
59124: LD_VAR 0 6
59128: PUSH
59129: LD_INT 1
59131: GREATER
59132: AND
59133: IFFALSE 59273
// begin sci := [ ] ;
59135: LD_ADDR_VAR 0 8
59139: PUSH
59140: EMPTY
59141: ST_TO_ADDR
// for x in tmp diff j do
59142: LD_ADDR_VAR 0 7
59146: PUSH
59147: LD_VAR 0 6
59151: PUSH
59152: LD_VAR 0 3
59156: DIFF
59157: PUSH
59158: FOR_IN
59159: IFFALSE 59199
// begin if BuildingStatus ( x ) = bs_idle then
59161: LD_VAR 0 7
59165: PPUSH
59166: CALL_OW 461
59170: PUSH
59171: LD_INT 2
59173: EQUAL
59174: IFFALSE 59197
// sci := sci ^ UnitsInside ( x ) ;
59176: LD_ADDR_VAR 0 8
59180: PUSH
59181: LD_VAR 0 8
59185: PUSH
59186: LD_VAR 0 7
59190: PPUSH
59191: CALL_OW 313
59195: ADD
59196: ST_TO_ADDR
// end ;
59197: GO 59158
59199: POP
59200: POP
// if not sci then
59201: LD_VAR 0 8
59205: NOT
59206: IFFALSE 59210
// continue ;
59208: GO 58390
// for x in sci do
59210: LD_ADDR_VAR 0 7
59214: PUSH
59215: LD_VAR 0 8
59219: PUSH
59220: FOR_IN
59221: IFFALSE 59271
// if IsInUnit ( x ) and not HasTask ( x ) then
59223: LD_VAR 0 7
59227: PPUSH
59228: CALL_OW 310
59232: PUSH
59233: LD_VAR 0 7
59237: PPUSH
59238: CALL_OW 314
59242: NOT
59243: AND
59244: IFFALSE 59269
// begin ComExitBuilding ( x ) ;
59246: LD_VAR 0 7
59250: PPUSH
59251: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
59255: LD_VAR 0 7
59259: PPUSH
59260: LD_VAR 0 3
59264: PPUSH
59265: CALL_OW 180
// end ;
59269: GO 59220
59271: POP
59272: POP
// end ; end ;
59273: GO 58390
59275: POP
59276: POP
// end ;
59277: GO 58352
59279: POP
59280: POP
// end ;
59281: LD_VAR 0 1
59285: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
59286: LD_INT 0
59288: PPUSH
59289: PPUSH
59290: PPUSH
59291: PPUSH
59292: PPUSH
59293: PPUSH
// if not mc_bases then
59294: LD_EXP 57
59298: NOT
59299: IFFALSE 59303
// exit ;
59301: GO 59542
// for i = 1 to 8 do
59303: LD_ADDR_VAR 0 2
59307: PUSH
59308: DOUBLE
59309: LD_INT 1
59311: DEC
59312: ST_TO_ADDR
59313: LD_INT 8
59315: PUSH
59316: FOR_TO
59317: IFFALSE 59343
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
59319: LD_ADDR_EXP 84
59323: PUSH
59324: LD_EXP 84
59328: PPUSH
59329: LD_VAR 0 2
59333: PPUSH
59334: EMPTY
59335: PPUSH
59336: CALL_OW 1
59340: ST_TO_ADDR
59341: GO 59316
59343: POP
59344: POP
// tmp := [ ] ;
59345: LD_ADDR_VAR 0 5
59349: PUSH
59350: EMPTY
59351: ST_TO_ADDR
// for i = 1 to mc_sides do
59352: LD_ADDR_VAR 0 2
59356: PUSH
59357: DOUBLE
59358: LD_INT 1
59360: DEC
59361: ST_TO_ADDR
59362: LD_EXP 83
59366: PUSH
59367: FOR_TO
59368: IFFALSE 59426
// if not mc_sides [ i ] in tmp then
59370: LD_EXP 83
59374: PUSH
59375: LD_VAR 0 2
59379: ARRAY
59380: PUSH
59381: LD_VAR 0 5
59385: IN
59386: NOT
59387: IFFALSE 59424
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
59389: LD_ADDR_VAR 0 5
59393: PUSH
59394: LD_VAR 0 5
59398: PPUSH
59399: LD_VAR 0 5
59403: PUSH
59404: LD_INT 1
59406: PLUS
59407: PPUSH
59408: LD_EXP 83
59412: PUSH
59413: LD_VAR 0 2
59417: ARRAY
59418: PPUSH
59419: CALL_OW 2
59423: ST_TO_ADDR
59424: GO 59367
59426: POP
59427: POP
// if not tmp then
59428: LD_VAR 0 5
59432: NOT
59433: IFFALSE 59437
// exit ;
59435: GO 59542
// for j in tmp do
59437: LD_ADDR_VAR 0 3
59441: PUSH
59442: LD_VAR 0 5
59446: PUSH
59447: FOR_IN
59448: IFFALSE 59540
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
59450: LD_ADDR_VAR 0 6
59454: PUSH
59455: LD_INT 22
59457: PUSH
59458: LD_VAR 0 3
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PPUSH
59467: CALL_OW 69
59471: ST_TO_ADDR
// if not un then
59472: LD_VAR 0 6
59476: NOT
59477: IFFALSE 59481
// continue ;
59479: GO 59447
// nation := GetNation ( un [ 1 ] ) ;
59481: LD_ADDR_VAR 0 4
59485: PUSH
59486: LD_VAR 0 6
59490: PUSH
59491: LD_INT 1
59493: ARRAY
59494: PPUSH
59495: CALL_OW 248
59499: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
59500: LD_ADDR_EXP 84
59504: PUSH
59505: LD_EXP 84
59509: PPUSH
59510: LD_VAR 0 3
59514: PPUSH
59515: LD_VAR 0 3
59519: PPUSH
59520: LD_VAR 0 4
59524: PPUSH
59525: LD_INT 1
59527: PPUSH
59528: CALL 12475 0 3
59532: PPUSH
59533: CALL_OW 1
59537: ST_TO_ADDR
// end ;
59538: GO 59447
59540: POP
59541: POP
// end ;
59542: LD_VAR 0 1
59546: RET
// export function MC_InitSides ( ) ; var i ; begin
59547: LD_INT 0
59549: PPUSH
59550: PPUSH
// if not mc_bases then
59551: LD_EXP 57
59555: NOT
59556: IFFALSE 59560
// exit ;
59558: GO 59634
// for i = 1 to mc_bases do
59560: LD_ADDR_VAR 0 2
59564: PUSH
59565: DOUBLE
59566: LD_INT 1
59568: DEC
59569: ST_TO_ADDR
59570: LD_EXP 57
59574: PUSH
59575: FOR_TO
59576: IFFALSE 59632
// if mc_bases [ i ] then
59578: LD_EXP 57
59582: PUSH
59583: LD_VAR 0 2
59587: ARRAY
59588: IFFALSE 59630
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
59590: LD_ADDR_EXP 83
59594: PUSH
59595: LD_EXP 83
59599: PPUSH
59600: LD_VAR 0 2
59604: PPUSH
59605: LD_EXP 57
59609: PUSH
59610: LD_VAR 0 2
59614: ARRAY
59615: PUSH
59616: LD_INT 1
59618: ARRAY
59619: PPUSH
59620: CALL_OW 255
59624: PPUSH
59625: CALL_OW 1
59629: ST_TO_ADDR
59630: GO 59575
59632: POP
59633: POP
// end ;
59634: LD_VAR 0 1
59638: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
59639: LD_INT 0
59641: PPUSH
59642: PPUSH
59643: PPUSH
59644: PPUSH
59645: PPUSH
59646: PPUSH
59647: PPUSH
59648: PPUSH
// if not mc_bases then
59649: LD_EXP 57
59653: NOT
59654: IFFALSE 59658
// exit ;
59656: GO 60303
// for i = 1 to mc_bases do
59658: LD_ADDR_VAR 0 2
59662: PUSH
59663: DOUBLE
59664: LD_INT 1
59666: DEC
59667: ST_TO_ADDR
59668: LD_EXP 57
59672: PUSH
59673: FOR_TO
59674: IFFALSE 60301
// begin if not mc_bases [ i ] then
59676: LD_EXP 57
59680: PUSH
59681: LD_VAR 0 2
59685: ARRAY
59686: NOT
59687: IFFALSE 59691
// continue ;
59689: GO 59673
// if mc_scan [ i ] then
59691: LD_EXP 80
59695: PUSH
59696: LD_VAR 0 2
59700: ARRAY
59701: IFFALSE 59727
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
59703: LD_ADDR_EXP 69
59707: PUSH
59708: LD_EXP 69
59712: PPUSH
59713: LD_VAR 0 2
59717: PPUSH
59718: EMPTY
59719: PPUSH
59720: CALL_OW 1
59724: ST_TO_ADDR
// continue ;
59725: GO 59673
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
59727: LD_ADDR_VAR 0 5
59731: PUSH
59732: LD_EXP 57
59736: PUSH
59737: LD_VAR 0 2
59741: ARRAY
59742: PUSH
59743: LD_INT 1
59745: ARRAY
59746: PPUSH
59747: CALL_OW 255
59751: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
59752: LD_ADDR_VAR 0 6
59756: PUSH
59757: LD_EXP 57
59761: PUSH
59762: LD_VAR 0 2
59766: ARRAY
59767: PPUSH
59768: LD_INT 30
59770: PUSH
59771: LD_INT 3
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PPUSH
59778: CALL_OW 72
59782: ST_TO_ADDR
// if not fac then
59783: LD_VAR 0 6
59787: NOT
59788: IFFALSE 59839
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
59790: LD_ADDR_VAR 0 6
59794: PUSH
59795: LD_EXP 57
59799: PUSH
59800: LD_VAR 0 2
59804: ARRAY
59805: PPUSH
59806: LD_INT 2
59808: PUSH
59809: LD_INT 30
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 30
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: LIST
59833: PPUSH
59834: CALL_OW 72
59838: ST_TO_ADDR
// if not fac then
59839: LD_VAR 0 6
59843: NOT
59844: IFFALSE 59848
// continue ;
59846: GO 59673
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
59848: LD_ADDR_VAR 0 7
59852: PUSH
59853: LD_EXP 81
59857: PUSH
59858: LD_VAR 0 2
59862: ARRAY
59863: PPUSH
59864: LD_INT 22
59866: PUSH
59867: LD_VAR 0 5
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 21
59878: PUSH
59879: LD_INT 2
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 3
59888: PUSH
59889: LD_INT 24
59891: PUSH
59892: LD_INT 1000
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: LIST
59907: PPUSH
59908: CALL_OW 70
59912: PUSH
59913: LD_INT 22
59915: PUSH
59916: LD_VAR 0 5
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 91
59927: PUSH
59928: LD_VAR 0 6
59932: PUSH
59933: LD_INT 1
59935: ARRAY
59936: PUSH
59937: LD_INT 25
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 21
59947: PUSH
59948: LD_INT 2
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 3
59957: PUSH
59958: LD_INT 24
59960: PUSH
59961: LD_INT 1000
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: PPUSH
59978: CALL_OW 69
59982: UNION
59983: ST_TO_ADDR
// if not vehs then
59984: LD_VAR 0 7
59988: NOT
59989: IFFALSE 60015
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
59991: LD_ADDR_EXP 69
59995: PUSH
59996: LD_EXP 69
60000: PPUSH
60001: LD_VAR 0 2
60005: PPUSH
60006: EMPTY
60007: PPUSH
60008: CALL_OW 1
60012: ST_TO_ADDR
// continue ;
60013: GO 59673
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
60015: LD_ADDR_VAR 0 8
60019: PUSH
60020: LD_EXP 57
60024: PUSH
60025: LD_VAR 0 2
60029: ARRAY
60030: PPUSH
60031: LD_INT 30
60033: PUSH
60034: LD_INT 3
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PPUSH
60041: CALL_OW 72
60045: ST_TO_ADDR
// if tmp then
60046: LD_VAR 0 8
60050: IFFALSE 60153
// begin for j in tmp do
60052: LD_ADDR_VAR 0 3
60056: PUSH
60057: LD_VAR 0 8
60061: PUSH
60062: FOR_IN
60063: IFFALSE 60151
// for k in UnitsInside ( j ) do
60065: LD_ADDR_VAR 0 4
60069: PUSH
60070: LD_VAR 0 3
60074: PPUSH
60075: CALL_OW 313
60079: PUSH
60080: FOR_IN
60081: IFFALSE 60147
// if k then
60083: LD_VAR 0 4
60087: IFFALSE 60145
// if not k in mc_repair_vehicle [ i ] then
60089: LD_VAR 0 4
60093: PUSH
60094: LD_EXP 69
60098: PUSH
60099: LD_VAR 0 2
60103: ARRAY
60104: IN
60105: NOT
60106: IFFALSE 60145
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
60108: LD_ADDR_EXP 69
60112: PUSH
60113: LD_EXP 69
60117: PPUSH
60118: LD_VAR 0 2
60122: PPUSH
60123: LD_EXP 69
60127: PUSH
60128: LD_VAR 0 2
60132: ARRAY
60133: PUSH
60134: LD_VAR 0 4
60138: UNION
60139: PPUSH
60140: CALL_OW 1
60144: ST_TO_ADDR
60145: GO 60080
60147: POP
60148: POP
60149: GO 60062
60151: POP
60152: POP
// end ; if not mc_repair_vehicle [ i ] then
60153: LD_EXP 69
60157: PUSH
60158: LD_VAR 0 2
60162: ARRAY
60163: NOT
60164: IFFALSE 60168
// continue ;
60166: GO 59673
// for j in mc_repair_vehicle [ i ] do
60168: LD_ADDR_VAR 0 3
60172: PUSH
60173: LD_EXP 69
60177: PUSH
60178: LD_VAR 0 2
60182: ARRAY
60183: PUSH
60184: FOR_IN
60185: IFFALSE 60297
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
60187: LD_VAR 0 3
60191: PPUSH
60192: CALL_OW 311
60196: NOT
60197: PUSH
60198: LD_VAR 0 3
60202: PUSH
60203: LD_EXP 60
60207: PUSH
60208: LD_VAR 0 2
60212: ARRAY
60213: PUSH
60214: LD_INT 1
60216: ARRAY
60217: IN
60218: NOT
60219: AND
60220: PUSH
60221: LD_VAR 0 3
60225: PUSH
60226: LD_EXP 60
60230: PUSH
60231: LD_VAR 0 2
60235: ARRAY
60236: PUSH
60237: LD_INT 2
60239: ARRAY
60240: IN
60241: NOT
60242: AND
60243: IFFALSE 60295
// begin if IsInUnit ( j ) then
60245: LD_VAR 0 3
60249: PPUSH
60250: CALL_OW 310
60254: IFFALSE 60265
// ComExitBuilding ( j ) ;
60256: LD_VAR 0 3
60260: PPUSH
60261: CALL_OW 122
// if not HasTask ( j ) then
60265: LD_VAR 0 3
60269: PPUSH
60270: CALL_OW 314
60274: NOT
60275: IFFALSE 60295
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
60277: LD_VAR 0 3
60281: PPUSH
60282: LD_VAR 0 7
60286: PUSH
60287: LD_INT 1
60289: ARRAY
60290: PPUSH
60291: CALL_OW 189
// end ; end ;
60295: GO 60184
60297: POP
60298: POP
// end ;
60299: GO 59673
60301: POP
60302: POP
// end ;
60303: LD_VAR 0 1
60307: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp ; begin
60308: LD_INT 0
60310: PPUSH
60311: PPUSH
60312: PPUSH
60313: PPUSH
60314: PPUSH
60315: PPUSH
60316: PPUSH
60317: PPUSH
// if not mc_bases then
60318: LD_EXP 57
60322: NOT
60323: IFFALSE 60327
// exit ;
60325: GO 60860
// for i = 1 to mc_bases do
60327: LD_ADDR_VAR 0 2
60331: PUSH
60332: DOUBLE
60333: LD_INT 1
60335: DEC
60336: ST_TO_ADDR
60337: LD_EXP 57
60341: PUSH
60342: FOR_TO
60343: IFFALSE 60858
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
60345: LD_EXP 85
60349: PUSH
60350: LD_VAR 0 2
60354: ARRAY
60355: NOT
60356: PUSH
60357: LD_EXP 60
60361: PUSH
60362: LD_VAR 0 2
60366: ARRAY
60367: PUSH
60368: LD_INT 1
60370: ARRAY
60371: OR
60372: PUSH
60373: LD_EXP 60
60377: PUSH
60378: LD_VAR 0 2
60382: ARRAY
60383: PUSH
60384: LD_INT 2
60386: ARRAY
60387: OR
60388: PUSH
60389: LD_EXP 83
60393: PUSH
60394: LD_VAR 0 2
60398: ARRAY
60399: PPUSH
60400: LD_INT 1
60402: PPUSH
60403: CALL_OW 325
60407: NOT
60408: OR
60409: PUSH
60410: LD_EXP 80
60414: PUSH
60415: LD_VAR 0 2
60419: ARRAY
60420: OR
60421: IFFALSE 60425
// continue ;
60423: GO 60342
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
60425: LD_ADDR_VAR 0 8
60429: PUSH
60430: LD_EXP 57
60434: PUSH
60435: LD_VAR 0 2
60439: ARRAY
60440: PPUSH
60441: LD_INT 25
60443: PUSH
60444: LD_INT 4
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 50
60453: PUSH
60454: EMPTY
60455: LIST
60456: PUSH
60457: LD_INT 3
60459: PUSH
60460: LD_INT 60
60462: PUSH
60463: EMPTY
60464: LIST
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: LIST
60474: PPUSH
60475: CALL_OW 72
60479: PUSH
60480: LD_EXP 61
60484: PUSH
60485: LD_VAR 0 2
60489: ARRAY
60490: DIFF
60491: ST_TO_ADDR
// if not tmp then
60492: LD_VAR 0 8
60496: NOT
60497: IFFALSE 60501
// continue ;
60499: GO 60342
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
60501: LD_ADDR_VAR 0 7
60505: PUSH
60506: LD_EXP 85
60510: PUSH
60511: LD_VAR 0 2
60515: ARRAY
60516: PPUSH
60517: LD_INT 22
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 25
60529: PUSH
60530: LD_INT 12
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PPUSH
60541: CALL_OW 70
60545: ST_TO_ADDR
// if not apes then
60546: LD_VAR 0 7
60550: NOT
60551: IFFALSE 60601
// begin if mc_taming [ i ] then
60553: LD_EXP 88
60557: PUSH
60558: LD_VAR 0 2
60562: ARRAY
60563: IFFALSE 60599
// begin MC_Reset ( i , 121 ) ;
60565: LD_VAR 0 2
60569: PPUSH
60570: LD_INT 121
60572: PPUSH
60573: CALL 51483 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
60577: LD_ADDR_EXP 88
60581: PUSH
60582: LD_EXP 88
60586: PPUSH
60587: LD_VAR 0 2
60591: PPUSH
60592: EMPTY
60593: PPUSH
60594: CALL_OW 1
60598: ST_TO_ADDR
// end ; continue ;
60599: GO 60342
// end ; for j in tmp do
60601: LD_ADDR_VAR 0 3
60605: PUSH
60606: LD_VAR 0 8
60610: PUSH
60611: FOR_IN
60612: IFFALSE 60854
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
60614: LD_VAR 0 3
60618: PUSH
60619: LD_EXP 88
60623: PUSH
60624: LD_VAR 0 2
60628: ARRAY
60629: IN
60630: NOT
60631: PUSH
60632: LD_EXP 88
60636: PUSH
60637: LD_VAR 0 2
60641: ARRAY
60642: PUSH
60643: LD_INT 3
60645: LESS
60646: AND
60647: IFFALSE 60705
// begin SetTag ( j , 121 ) ;
60649: LD_VAR 0 3
60653: PPUSH
60654: LD_INT 121
60656: PPUSH
60657: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
60661: LD_ADDR_EXP 88
60665: PUSH
60666: LD_EXP 88
60670: PPUSH
60671: LD_VAR 0 2
60675: PUSH
60676: LD_EXP 88
60680: PUSH
60681: LD_VAR 0 2
60685: ARRAY
60686: PUSH
60687: LD_INT 1
60689: PLUS
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PPUSH
60695: LD_VAR 0 3
60699: PPUSH
60700: CALL 19041 0 3
60704: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
60705: LD_VAR 0 3
60709: PUSH
60710: LD_EXP 88
60714: PUSH
60715: LD_VAR 0 2
60719: ARRAY
60720: IN
60721: IFFALSE 60852
// begin if IsInUnit ( j ) then
60723: LD_VAR 0 3
60727: PPUSH
60728: CALL_OW 310
60732: IFFALSE 60743
// ComExitBuilding ( j ) ;
60734: LD_VAR 0 3
60738: PPUSH
60739: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
60743: LD_ADDR_VAR 0 6
60747: PUSH
60748: LD_VAR 0 7
60752: PPUSH
60753: LD_VAR 0 3
60757: PPUSH
60758: CALL_OW 74
60762: ST_TO_ADDR
// if not ape then
60763: LD_VAR 0 6
60767: NOT
60768: IFFALSE 60772
// break ;
60770: GO 60854
// x := GetX ( ape ) ;
60772: LD_ADDR_VAR 0 4
60776: PUSH
60777: LD_VAR 0 6
60781: PPUSH
60782: CALL_OW 250
60786: ST_TO_ADDR
// y := GetY ( ape ) ;
60787: LD_ADDR_VAR 0 5
60791: PUSH
60792: LD_VAR 0 6
60796: PPUSH
60797: CALL_OW 251
60801: ST_TO_ADDR
// if not ValidHex ( x , y ) then
60802: LD_VAR 0 4
60806: PPUSH
60807: LD_VAR 0 5
60811: PPUSH
60812: CALL_OW 488
60816: NOT
60817: IFFALSE 60821
// break ;
60819: GO 60854
// if not HasTask ( j ) then
60821: LD_VAR 0 3
60825: PPUSH
60826: CALL_OW 314
60830: NOT
60831: IFFALSE 60852
// ComTameXY ( j , x , y ) ;
60833: LD_VAR 0 3
60837: PPUSH
60838: LD_VAR 0 4
60842: PPUSH
60843: LD_VAR 0 5
60847: PPUSH
60848: CALL_OW 131
// end ; end ;
60852: GO 60611
60854: POP
60855: POP
// end ;
60856: GO 60342
60858: POP
60859: POP
// end ;
60860: LD_VAR 0 1
60864: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
60865: LD_INT 0
60867: PPUSH
60868: PPUSH
60869: PPUSH
60870: PPUSH
60871: PPUSH
60872: PPUSH
60873: PPUSH
60874: PPUSH
// if not mc_bases then
60875: LD_EXP 57
60879: NOT
60880: IFFALSE 60884
// exit ;
60882: GO 61494
// for i = 1 to mc_bases do
60884: LD_ADDR_VAR 0 2
60888: PUSH
60889: DOUBLE
60890: LD_INT 1
60892: DEC
60893: ST_TO_ADDR
60894: LD_EXP 57
60898: PUSH
60899: FOR_TO
60900: IFFALSE 61492
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
60902: LD_EXP 86
60906: PUSH
60907: LD_VAR 0 2
60911: ARRAY
60912: NOT
60913: PUSH
60914: LD_EXP 86
60918: PUSH
60919: LD_VAR 0 2
60923: ARRAY
60924: PPUSH
60925: LD_INT 25
60927: PUSH
60928: LD_INT 12
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PPUSH
60935: CALL_OW 72
60939: NOT
60940: OR
60941: IFFALSE 60945
// continue ;
60943: GO 60899
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
60945: LD_ADDR_VAR 0 5
60949: PUSH
60950: LD_EXP 86
60954: PUSH
60955: LD_VAR 0 2
60959: ARRAY
60960: PUSH
60961: LD_INT 1
60963: ARRAY
60964: PPUSH
60965: CALL_OW 255
60969: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
60970: LD_VAR 0 5
60974: PPUSH
60975: LD_INT 2
60977: PPUSH
60978: CALL_OW 325
60982: IFFALSE 61227
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
60984: LD_ADDR_VAR 0 4
60988: PUSH
60989: LD_EXP 86
60993: PUSH
60994: LD_VAR 0 2
60998: ARRAY
60999: PPUSH
61000: LD_INT 25
61002: PUSH
61003: LD_INT 16
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PPUSH
61010: CALL_OW 72
61014: ST_TO_ADDR
// if tmp < 6 then
61015: LD_VAR 0 4
61019: PUSH
61020: LD_INT 6
61022: LESS
61023: IFFALSE 61227
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
61025: LD_ADDR_VAR 0 6
61029: PUSH
61030: LD_EXP 57
61034: PUSH
61035: LD_VAR 0 2
61039: ARRAY
61040: PPUSH
61041: LD_INT 2
61043: PUSH
61044: LD_INT 30
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 30
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: LIST
61068: PPUSH
61069: CALL_OW 72
61073: ST_TO_ADDR
// if depot then
61074: LD_VAR 0 6
61078: IFFALSE 61227
// begin for j in depot do
61080: LD_ADDR_VAR 0 3
61084: PUSH
61085: LD_VAR 0 6
61089: PUSH
61090: FOR_IN
61091: IFFALSE 61122
// begin if UnitsInside ( j ) < 6 then
61093: LD_VAR 0 3
61097: PPUSH
61098: CALL_OW 313
61102: PUSH
61103: LD_INT 6
61105: LESS
61106: IFFALSE 61120
// begin selected := j ;
61108: LD_ADDR_VAR 0 7
61112: PUSH
61113: LD_VAR 0 3
61117: ST_TO_ADDR
// break ;
61118: GO 61122
// end ; end ;
61120: GO 61090
61122: POP
61123: POP
// if selected then
61124: LD_VAR 0 7
61128: IFFALSE 61227
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
61130: LD_ADDR_VAR 0 3
61134: PUSH
61135: LD_EXP 86
61139: PUSH
61140: LD_VAR 0 2
61144: ARRAY
61145: PPUSH
61146: LD_INT 25
61148: PUSH
61149: LD_INT 12
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PPUSH
61156: CALL_OW 72
61160: PUSH
61161: FOR_IN
61162: IFFALSE 61225
// if not HasTask ( j ) then
61164: LD_VAR 0 3
61168: PPUSH
61169: CALL_OW 314
61173: NOT
61174: IFFALSE 61223
// begin if not IsInUnit ( j ) then
61176: LD_VAR 0 3
61180: PPUSH
61181: CALL_OW 310
61185: NOT
61186: IFFALSE 61202
// ComEnterUnit ( j , selected ) ;
61188: LD_VAR 0 3
61192: PPUSH
61193: LD_VAR 0 7
61197: PPUSH
61198: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
61202: LD_VAR 0 3
61206: PPUSH
61207: LD_INT 16
61209: PPUSH
61210: CALL_OW 183
// AddComExitBuilding ( j ) ;
61214: LD_VAR 0 3
61218: PPUSH
61219: CALL_OW 182
// end ;
61223: GO 61161
61225: POP
61226: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
61227: LD_VAR 0 5
61231: PPUSH
61232: LD_INT 11
61234: PPUSH
61235: CALL_OW 325
61239: IFFALSE 61490
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
61241: LD_ADDR_VAR 0 4
61245: PUSH
61246: LD_EXP 86
61250: PUSH
61251: LD_VAR 0 2
61255: ARRAY
61256: PPUSH
61257: LD_INT 25
61259: PUSH
61260: LD_INT 16
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PPUSH
61267: CALL_OW 72
61271: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
61272: LD_VAR 0 4
61276: PUSH
61277: LD_INT 6
61279: GREATEREQUAL
61280: PUSH
61281: LD_VAR 0 5
61285: PPUSH
61286: LD_INT 2
61288: PPUSH
61289: CALL_OW 325
61293: NOT
61294: OR
61295: IFFALSE 61490
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
61297: LD_ADDR_VAR 0 8
61301: PUSH
61302: LD_EXP 57
61306: PUSH
61307: LD_VAR 0 2
61311: ARRAY
61312: PPUSH
61313: LD_INT 2
61315: PUSH
61316: LD_INT 30
61318: PUSH
61319: LD_INT 4
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 30
61328: PUSH
61329: LD_INT 5
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: LIST
61340: PPUSH
61341: CALL_OW 72
61345: ST_TO_ADDR
// if barracks then
61346: LD_VAR 0 8
61350: IFFALSE 61490
// begin for j in barracks do
61352: LD_ADDR_VAR 0 3
61356: PUSH
61357: LD_VAR 0 8
61361: PUSH
61362: FOR_IN
61363: IFFALSE 61394
// begin if UnitsInside ( j ) < 6 then
61365: LD_VAR 0 3
61369: PPUSH
61370: CALL_OW 313
61374: PUSH
61375: LD_INT 6
61377: LESS
61378: IFFALSE 61392
// begin selected := j ;
61380: LD_ADDR_VAR 0 7
61384: PUSH
61385: LD_VAR 0 3
61389: ST_TO_ADDR
// break ;
61390: GO 61394
// end ; end ;
61392: GO 61362
61394: POP
61395: POP
// if selected then
61396: LD_VAR 0 7
61400: IFFALSE 61490
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
61402: LD_ADDR_VAR 0 3
61406: PUSH
61407: LD_EXP 86
61411: PUSH
61412: LD_VAR 0 2
61416: ARRAY
61417: PPUSH
61418: LD_INT 25
61420: PUSH
61421: LD_INT 12
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PPUSH
61428: CALL_OW 72
61432: PUSH
61433: FOR_IN
61434: IFFALSE 61488
// if not IsInUnit ( j ) and not HasTask ( j ) then
61436: LD_VAR 0 3
61440: PPUSH
61441: CALL_OW 310
61445: NOT
61446: PUSH
61447: LD_VAR 0 3
61451: PPUSH
61452: CALL_OW 314
61456: NOT
61457: AND
61458: IFFALSE 61486
// begin ComEnterUnit ( j , selected ) ;
61460: LD_VAR 0 3
61464: PPUSH
61465: LD_VAR 0 7
61469: PPUSH
61470: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
61474: LD_VAR 0 3
61478: PPUSH
61479: LD_INT 15
61481: PPUSH
61482: CALL_OW 183
// end ;
61486: GO 61433
61488: POP
61489: POP
// end ; end ; end ; end ; end ;
61490: GO 60899
61492: POP
61493: POP
// end ;
61494: LD_VAR 0 1
61498: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
61499: LD_INT 0
61501: PPUSH
61502: PPUSH
61503: PPUSH
61504: PPUSH
// if not mc_bases then
61505: LD_EXP 57
61509: NOT
61510: IFFALSE 61514
// exit ;
61512: GO 61692
// for i = 1 to mc_bases do
61514: LD_ADDR_VAR 0 2
61518: PUSH
61519: DOUBLE
61520: LD_INT 1
61522: DEC
61523: ST_TO_ADDR
61524: LD_EXP 57
61528: PUSH
61529: FOR_TO
61530: IFFALSE 61690
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
61532: LD_ADDR_VAR 0 4
61536: PUSH
61537: LD_EXP 57
61541: PUSH
61542: LD_VAR 0 2
61546: ARRAY
61547: PPUSH
61548: LD_INT 25
61550: PUSH
61551: LD_INT 9
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PPUSH
61558: CALL_OW 72
61562: ST_TO_ADDR
// if not tmp then
61563: LD_VAR 0 4
61567: NOT
61568: IFFALSE 61572
// continue ;
61570: GO 61529
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
61572: LD_EXP 83
61576: PUSH
61577: LD_VAR 0 2
61581: ARRAY
61582: PPUSH
61583: LD_INT 29
61585: PPUSH
61586: CALL_OW 325
61590: NOT
61591: PUSH
61592: LD_EXP 83
61596: PUSH
61597: LD_VAR 0 2
61601: ARRAY
61602: PPUSH
61603: LD_INT 28
61605: PPUSH
61606: CALL_OW 325
61610: NOT
61611: AND
61612: IFFALSE 61616
// continue ;
61614: GO 61529
// for j in tmp do
61616: LD_ADDR_VAR 0 3
61620: PUSH
61621: LD_VAR 0 4
61625: PUSH
61626: FOR_IN
61627: IFFALSE 61686
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
61629: LD_VAR 0 3
61633: PUSH
61634: LD_EXP 60
61638: PUSH
61639: LD_VAR 0 2
61643: ARRAY
61644: PUSH
61645: LD_INT 1
61647: ARRAY
61648: IN
61649: NOT
61650: PUSH
61651: LD_VAR 0 3
61655: PUSH
61656: LD_EXP 60
61660: PUSH
61661: LD_VAR 0 2
61665: ARRAY
61666: PUSH
61667: LD_INT 2
61669: ARRAY
61670: IN
61671: NOT
61672: AND
61673: IFFALSE 61684
// ComSpaceTimeShoot ( j ) ;
61675: LD_VAR 0 3
61679: PPUSH
61680: CALL 13203 0 1
61684: GO 61626
61686: POP
61687: POP
// end ;
61688: GO 61529
61690: POP
61691: POP
// end ;
61692: LD_VAR 0 1
61696: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
61697: LD_INT 0
61699: PPUSH
61700: PPUSH
61701: PPUSH
61702: PPUSH
// if not mc_bases then
61703: LD_EXP 57
61707: NOT
61708: IFFALSE 61712
// exit ;
61710: GO 61734
// for i = 1 to mc_bases do
61712: LD_ADDR_VAR 0 2
61716: PUSH
61717: DOUBLE
61718: LD_INT 1
61720: DEC
61721: ST_TO_ADDR
61722: LD_EXP 57
61726: PUSH
61727: FOR_TO
61728: IFFALSE 61732
// begin end ;
61730: GO 61727
61732: POP
61733: POP
// end ;
61734: LD_VAR 0 1
61738: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
61739: LD_INT 0
61741: PPUSH
61742: PPUSH
61743: PPUSH
61744: PPUSH
61745: PPUSH
61746: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
61747: LD_VAR 0 1
61751: NOT
61752: PUSH
61753: LD_VAR 0 2
61757: NOT
61758: OR
61759: PUSH
61760: LD_VAR 0 3
61764: NOT
61765: OR
61766: PUSH
61767: LD_VAR 0 4
61771: PUSH
61772: LD_INT 1
61774: PUSH
61775: LD_INT 2
61777: PUSH
61778: LD_INT 3
61780: PUSH
61781: LD_INT 4
61783: PUSH
61784: LD_INT 5
61786: PUSH
61787: LD_INT 8
61789: PUSH
61790: LD_INT 9
61792: PUSH
61793: LD_INT 15
61795: PUSH
61796: LD_INT 16
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: IN
61810: NOT
61811: OR
61812: IFFALSE 61816
// exit ;
61814: GO 62716
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
61816: LD_ADDR_VAR 0 2
61820: PUSH
61821: LD_VAR 0 2
61825: PPUSH
61826: LD_INT 21
61828: PUSH
61829: LD_INT 3
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 24
61838: PUSH
61839: LD_INT 250
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PPUSH
61850: CALL_OW 72
61854: ST_TO_ADDR
// case class of 1 , 15 :
61855: LD_VAR 0 4
61859: PUSH
61860: LD_INT 1
61862: DOUBLE
61863: EQUAL
61864: IFTRUE 61874
61866: LD_INT 15
61868: DOUBLE
61869: EQUAL
61870: IFTRUE 61874
61872: GO 61959
61874: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
61875: LD_ADDR_VAR 0 8
61879: PUSH
61880: LD_VAR 0 2
61884: PPUSH
61885: LD_INT 2
61887: PUSH
61888: LD_INT 30
61890: PUSH
61891: LD_INT 32
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 30
61900: PUSH
61901: LD_INT 31
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: LIST
61912: PPUSH
61913: CALL_OW 72
61917: PUSH
61918: LD_VAR 0 2
61922: PPUSH
61923: LD_INT 2
61925: PUSH
61926: LD_INT 30
61928: PUSH
61929: LD_INT 4
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 30
61938: PUSH
61939: LD_INT 5
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: LIST
61950: PPUSH
61951: CALL_OW 72
61955: ADD
61956: ST_TO_ADDR
61957: GO 62205
61959: LD_INT 2
61961: DOUBLE
61962: EQUAL
61963: IFTRUE 61973
61965: LD_INT 16
61967: DOUBLE
61968: EQUAL
61969: IFTRUE 61973
61971: GO 62019
61973: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
61974: LD_ADDR_VAR 0 8
61978: PUSH
61979: LD_VAR 0 2
61983: PPUSH
61984: LD_INT 2
61986: PUSH
61987: LD_INT 30
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 30
61999: PUSH
62000: LD_INT 1
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: LIST
62011: PPUSH
62012: CALL_OW 72
62016: ST_TO_ADDR
62017: GO 62205
62019: LD_INT 3
62021: DOUBLE
62022: EQUAL
62023: IFTRUE 62027
62025: GO 62073
62027: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
62028: LD_ADDR_VAR 0 8
62032: PUSH
62033: LD_VAR 0 2
62037: PPUSH
62038: LD_INT 2
62040: PUSH
62041: LD_INT 30
62043: PUSH
62044: LD_INT 2
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 30
62053: PUSH
62054: LD_INT 3
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: LIST
62065: PPUSH
62066: CALL_OW 72
62070: ST_TO_ADDR
62071: GO 62205
62073: LD_INT 4
62075: DOUBLE
62076: EQUAL
62077: IFTRUE 62081
62079: GO 62138
62081: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
62082: LD_ADDR_VAR 0 8
62086: PUSH
62087: LD_VAR 0 2
62091: PPUSH
62092: LD_INT 2
62094: PUSH
62095: LD_INT 30
62097: PUSH
62098: LD_INT 6
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 30
62107: PUSH
62108: LD_INT 7
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 30
62117: PUSH
62118: LD_INT 8
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: PPUSH
62131: CALL_OW 72
62135: ST_TO_ADDR
62136: GO 62205
62138: LD_INT 5
62140: DOUBLE
62141: EQUAL
62142: IFTRUE 62158
62144: LD_INT 8
62146: DOUBLE
62147: EQUAL
62148: IFTRUE 62158
62150: LD_INT 9
62152: DOUBLE
62153: EQUAL
62154: IFTRUE 62158
62156: GO 62204
62158: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
62159: LD_ADDR_VAR 0 8
62163: PUSH
62164: LD_VAR 0 2
62168: PPUSH
62169: LD_INT 2
62171: PUSH
62172: LD_INT 30
62174: PUSH
62175: LD_INT 4
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 30
62184: PUSH
62185: LD_INT 5
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: LIST
62196: PPUSH
62197: CALL_OW 72
62201: ST_TO_ADDR
62202: GO 62205
62204: POP
// if not tmp then
62205: LD_VAR 0 8
62209: NOT
62210: IFFALSE 62214
// exit ;
62212: GO 62716
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
62214: LD_VAR 0 4
62218: PUSH
62219: LD_INT 1
62221: PUSH
62222: LD_INT 15
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: IN
62229: PUSH
62230: LD_EXP 66
62234: PUSH
62235: LD_VAR 0 1
62239: ARRAY
62240: AND
62241: IFFALSE 62397
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
62243: LD_ADDR_VAR 0 9
62247: PUSH
62248: LD_EXP 66
62252: PUSH
62253: LD_VAR 0 1
62257: ARRAY
62258: PUSH
62259: LD_INT 1
62261: ARRAY
62262: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
62263: LD_VAR 0 9
62267: PUSH
62268: LD_EXP 67
62272: PUSH
62273: LD_VAR 0 1
62277: ARRAY
62278: IN
62279: NOT
62280: IFFALSE 62395
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
62282: LD_ADDR_EXP 67
62286: PUSH
62287: LD_EXP 67
62291: PPUSH
62292: LD_VAR 0 1
62296: PUSH
62297: LD_EXP 67
62301: PUSH
62302: LD_VAR 0 1
62306: ARRAY
62307: PUSH
62308: LD_INT 1
62310: PLUS
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PPUSH
62316: LD_VAR 0 9
62320: PPUSH
62321: CALL 19041 0 3
62325: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
62326: LD_ADDR_EXP 66
62330: PUSH
62331: LD_EXP 66
62335: PPUSH
62336: LD_VAR 0 1
62340: PPUSH
62341: LD_EXP 66
62345: PUSH
62346: LD_VAR 0 1
62350: ARRAY
62351: PUSH
62352: LD_VAR 0 9
62356: DIFF
62357: PPUSH
62358: CALL_OW 1
62362: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
62363: LD_VAR 0 3
62367: PPUSH
62368: LD_EXP 67
62372: PUSH
62373: LD_VAR 0 1
62377: ARRAY
62378: PUSH
62379: LD_EXP 67
62383: PUSH
62384: LD_VAR 0 1
62388: ARRAY
62389: ARRAY
62390: PPUSH
62391: CALL_OW 120
// end ; exit ;
62395: GO 62716
// end ; if tmp > 1 then
62397: LD_VAR 0 8
62401: PUSH
62402: LD_INT 1
62404: GREATER
62405: IFFALSE 62509
// for i = 2 to tmp do
62407: LD_ADDR_VAR 0 6
62411: PUSH
62412: DOUBLE
62413: LD_INT 2
62415: DEC
62416: ST_TO_ADDR
62417: LD_VAR 0 8
62421: PUSH
62422: FOR_TO
62423: IFFALSE 62507
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
62425: LD_VAR 0 8
62429: PUSH
62430: LD_VAR 0 6
62434: ARRAY
62435: PPUSH
62436: CALL_OW 461
62440: PUSH
62441: LD_INT 6
62443: EQUAL
62444: IFFALSE 62505
// begin x := tmp [ i ] ;
62446: LD_ADDR_VAR 0 9
62450: PUSH
62451: LD_VAR 0 8
62455: PUSH
62456: LD_VAR 0 6
62460: ARRAY
62461: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
62462: LD_ADDR_VAR 0 8
62466: PUSH
62467: LD_VAR 0 8
62471: PPUSH
62472: LD_VAR 0 6
62476: PPUSH
62477: CALL_OW 3
62481: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
62482: LD_ADDR_VAR 0 8
62486: PUSH
62487: LD_VAR 0 8
62491: PPUSH
62492: LD_INT 1
62494: PPUSH
62495: LD_VAR 0 9
62499: PPUSH
62500: CALL_OW 2
62504: ST_TO_ADDR
// end ;
62505: GO 62422
62507: POP
62508: POP
// for i in tmp do
62509: LD_ADDR_VAR 0 6
62513: PUSH
62514: LD_VAR 0 8
62518: PUSH
62519: FOR_IN
62520: IFFALSE 62589
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
62522: LD_VAR 0 6
62526: PPUSH
62527: CALL_OW 313
62531: PUSH
62532: LD_INT 6
62534: LESS
62535: PUSH
62536: LD_VAR 0 6
62540: PPUSH
62541: CALL_OW 266
62545: PUSH
62546: LD_INT 31
62548: PUSH
62549: LD_INT 32
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: IN
62556: NOT
62557: AND
62558: PUSH
62559: LD_VAR 0 6
62563: PPUSH
62564: CALL_OW 313
62568: PUSH
62569: LD_INT 0
62571: EQUAL
62572: OR
62573: IFFALSE 62587
// begin j := i ;
62575: LD_ADDR_VAR 0 7
62579: PUSH
62580: LD_VAR 0 6
62584: ST_TO_ADDR
// break ;
62585: GO 62589
// end ; end ;
62587: GO 62519
62589: POP
62590: POP
// if j then
62591: LD_VAR 0 7
62595: IFFALSE 62613
// ComEnterUnit ( unit , j ) else
62597: LD_VAR 0 3
62601: PPUSH
62602: LD_VAR 0 7
62606: PPUSH
62607: CALL_OW 120
62611: GO 62716
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
62613: LD_ADDR_VAR 0 10
62617: PUSH
62618: LD_VAR 0 2
62622: PPUSH
62623: LD_INT 2
62625: PUSH
62626: LD_INT 30
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 30
62638: PUSH
62639: LD_INT 1
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: LIST
62650: PPUSH
62651: CALL_OW 72
62655: ST_TO_ADDR
// if depot then
62656: LD_VAR 0 10
62660: IFFALSE 62716
// begin depot := NearestUnitToUnit ( depot , unit ) ;
62662: LD_ADDR_VAR 0 10
62666: PUSH
62667: LD_VAR 0 10
62671: PPUSH
62672: LD_VAR 0 3
62676: PPUSH
62677: CALL_OW 74
62681: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
62682: LD_VAR 0 3
62686: PPUSH
62687: LD_VAR 0 10
62691: PPUSH
62692: CALL_OW 296
62696: PUSH
62697: LD_INT 10
62699: GREATER
62700: IFFALSE 62716
// ComStandNearbyBuilding ( unit , depot ) ;
62702: LD_VAR 0 3
62706: PPUSH
62707: LD_VAR 0 10
62711: PPUSH
62712: CALL 13820 0 2
// end ; end ; end ;
62716: LD_VAR 0 5
62720: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
62721: LD_INT 0
62723: PPUSH
62724: PPUSH
62725: PPUSH
62726: PPUSH
// if not mc_bases then
62727: LD_EXP 57
62731: NOT
62732: IFFALSE 62736
// exit ;
62734: GO 62975
// for i = 1 to mc_bases do
62736: LD_ADDR_VAR 0 2
62740: PUSH
62741: DOUBLE
62742: LD_INT 1
62744: DEC
62745: ST_TO_ADDR
62746: LD_EXP 57
62750: PUSH
62751: FOR_TO
62752: IFFALSE 62973
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
62754: LD_ADDR_VAR 0 4
62758: PUSH
62759: LD_EXP 57
62763: PUSH
62764: LD_VAR 0 2
62768: ARRAY
62769: PPUSH
62770: LD_INT 21
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PPUSH
62780: CALL_OW 72
62784: PUSH
62785: LD_EXP 86
62789: PUSH
62790: LD_VAR 0 2
62794: ARRAY
62795: UNION
62796: ST_TO_ADDR
// if not tmp then
62797: LD_VAR 0 4
62801: NOT
62802: IFFALSE 62806
// continue ;
62804: GO 62751
// for j in tmp do
62806: LD_ADDR_VAR 0 3
62810: PUSH
62811: LD_VAR 0 4
62815: PUSH
62816: FOR_IN
62817: IFFALSE 62969
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
62819: LD_VAR 0 3
62823: PPUSH
62824: CALL_OW 110
62828: NOT
62829: PUSH
62830: LD_VAR 0 3
62834: PPUSH
62835: CALL_OW 314
62839: NOT
62840: AND
62841: PUSH
62842: LD_VAR 0 3
62846: PPUSH
62847: CALL_OW 311
62851: NOT
62852: AND
62853: PUSH
62854: LD_VAR 0 3
62858: PPUSH
62859: CALL_OW 310
62863: NOT
62864: AND
62865: PUSH
62866: LD_VAR 0 3
62870: PUSH
62871: LD_EXP 60
62875: PUSH
62876: LD_VAR 0 2
62880: ARRAY
62881: PUSH
62882: LD_INT 1
62884: ARRAY
62885: IN
62886: NOT
62887: AND
62888: PUSH
62889: LD_VAR 0 3
62893: PUSH
62894: LD_EXP 60
62898: PUSH
62899: LD_VAR 0 2
62903: ARRAY
62904: PUSH
62905: LD_INT 2
62907: ARRAY
62908: IN
62909: NOT
62910: AND
62911: PUSH
62912: LD_VAR 0 3
62916: PUSH
62917: LD_EXP 69
62921: PUSH
62922: LD_VAR 0 2
62926: ARRAY
62927: IN
62928: NOT
62929: AND
62930: IFFALSE 62967
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
62932: LD_VAR 0 2
62936: PPUSH
62937: LD_EXP 57
62941: PUSH
62942: LD_VAR 0 2
62946: ARRAY
62947: PPUSH
62948: LD_VAR 0 3
62952: PPUSH
62953: LD_VAR 0 3
62957: PPUSH
62958: CALL_OW 257
62962: PPUSH
62963: CALL 61739 0 4
// end ;
62967: GO 62816
62969: POP
62970: POP
// end ;
62971: GO 62751
62973: POP
62974: POP
// end ;
62975: LD_VAR 0 1
62979: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
62980: LD_INT 0
62982: PPUSH
62983: PPUSH
62984: PPUSH
62985: PPUSH
62986: PPUSH
62987: PPUSH
// if not mc_bases [ base ] then
62988: LD_EXP 57
62992: PUSH
62993: LD_VAR 0 1
62997: ARRAY
62998: NOT
62999: IFFALSE 63003
// exit ;
63001: GO 63185
// tmp := [ ] ;
63003: LD_ADDR_VAR 0 6
63007: PUSH
63008: EMPTY
63009: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
63010: LD_ADDR_VAR 0 7
63014: PUSH
63015: LD_VAR 0 3
63019: PPUSH
63020: LD_INT 0
63022: PPUSH
63023: CALL_OW 517
63027: ST_TO_ADDR
// if not list then
63028: LD_VAR 0 7
63032: NOT
63033: IFFALSE 63037
// exit ;
63035: GO 63185
// for i = 1 to amount do
63037: LD_ADDR_VAR 0 5
63041: PUSH
63042: DOUBLE
63043: LD_INT 1
63045: DEC
63046: ST_TO_ADDR
63047: LD_VAR 0 2
63051: PUSH
63052: FOR_TO
63053: IFFALSE 63133
// begin x := rand ( 1 , list [ 1 ] ) ;
63055: LD_ADDR_VAR 0 8
63059: PUSH
63060: LD_INT 1
63062: PPUSH
63063: LD_VAR 0 7
63067: PUSH
63068: LD_INT 1
63070: ARRAY
63071: PPUSH
63072: CALL_OW 12
63076: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
63077: LD_ADDR_VAR 0 6
63081: PUSH
63082: LD_VAR 0 6
63086: PPUSH
63087: LD_VAR 0 5
63091: PPUSH
63092: LD_VAR 0 7
63096: PUSH
63097: LD_INT 1
63099: ARRAY
63100: PUSH
63101: LD_VAR 0 8
63105: ARRAY
63106: PUSH
63107: LD_VAR 0 7
63111: PUSH
63112: LD_INT 2
63114: ARRAY
63115: PUSH
63116: LD_VAR 0 8
63120: ARRAY
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PPUSH
63126: CALL_OW 1
63130: ST_TO_ADDR
// end ;
63131: GO 63052
63133: POP
63134: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
63135: LD_ADDR_EXP 70
63139: PUSH
63140: LD_EXP 70
63144: PPUSH
63145: LD_VAR 0 1
63149: PPUSH
63150: LD_VAR 0 6
63154: PPUSH
63155: CALL_OW 1
63159: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
63160: LD_ADDR_EXP 72
63164: PUSH
63165: LD_EXP 72
63169: PPUSH
63170: LD_VAR 0 1
63174: PPUSH
63175: LD_VAR 0 3
63179: PPUSH
63180: CALL_OW 1
63184: ST_TO_ADDR
// end ;
63185: LD_VAR 0 4
63189: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
63190: LD_INT 0
63192: PPUSH
// if not mc_bases [ base ] then
63193: LD_EXP 57
63197: PUSH
63198: LD_VAR 0 1
63202: ARRAY
63203: NOT
63204: IFFALSE 63208
// exit ;
63206: GO 63233
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
63208: LD_ADDR_EXP 62
63212: PUSH
63213: LD_EXP 62
63217: PPUSH
63218: LD_VAR 0 1
63222: PPUSH
63223: LD_VAR 0 2
63227: PPUSH
63228: CALL_OW 1
63232: ST_TO_ADDR
// end ;
63233: LD_VAR 0 3
63237: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
63238: LD_INT 0
63240: PPUSH
// if not mc_bases [ base ] then
63241: LD_EXP 57
63245: PUSH
63246: LD_VAR 0 1
63250: ARRAY
63251: NOT
63252: IFFALSE 63256
// exit ;
63254: GO 63281
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
63256: LD_ADDR_EXP 78
63260: PUSH
63261: LD_EXP 78
63265: PPUSH
63266: LD_VAR 0 1
63270: PPUSH
63271: LD_VAR 0 2
63275: PPUSH
63276: CALL_OW 1
63280: ST_TO_ADDR
// end ;
63281: LD_VAR 0 3
63285: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
63286: LD_INT 0
63288: PPUSH
// if not mc_bases [ base ] then
63289: LD_EXP 57
63293: PUSH
63294: LD_VAR 0 1
63298: ARRAY
63299: NOT
63300: IFFALSE 63304
// exit ;
63302: GO 63344
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
63304: LD_ADDR_EXP 78
63308: PUSH
63309: LD_EXP 78
63313: PPUSH
63314: LD_VAR 0 1
63318: PPUSH
63319: LD_EXP 78
63323: PUSH
63324: LD_VAR 0 1
63328: ARRAY
63329: PUSH
63330: LD_VAR 0 2
63334: PUSH
63335: EMPTY
63336: LIST
63337: ADD
63338: PPUSH
63339: CALL_OW 1
63343: ST_TO_ADDR
// end ;
63344: LD_VAR 0 3
63348: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
63349: LD_INT 0
63351: PPUSH
// if not mc_bases [ base ] then
63352: LD_EXP 57
63356: PUSH
63357: LD_VAR 0 1
63361: ARRAY
63362: NOT
63363: IFFALSE 63367
// exit ;
63365: GO 63479
// mc_defender := Replace ( mc_defender , base , deflist ) ;
63367: LD_ADDR_EXP 79
63371: PUSH
63372: LD_EXP 79
63376: PPUSH
63377: LD_VAR 0 1
63381: PPUSH
63382: LD_VAR 0 2
63386: PPUSH
63387: CALL_OW 1
63391: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
63392: LD_ADDR_EXP 68
63396: PUSH
63397: LD_EXP 68
63401: PPUSH
63402: LD_VAR 0 1
63406: PPUSH
63407: LD_VAR 0 2
63411: PUSH
63412: LD_INT 0
63414: PLUS
63415: PPUSH
63416: CALL_OW 1
63420: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
63421: LD_ADDR_EXP 76
63425: PUSH
63426: LD_EXP 76
63430: PPUSH
63431: LD_VAR 0 1
63435: PPUSH
63436: LD_EXP 76
63440: PUSH
63441: LD_VAR 0 1
63445: ARRAY
63446: PUSH
63447: LD_EXP 79
63451: PUSH
63452: LD_VAR 0 1
63456: ARRAY
63457: PPUSH
63458: LD_INT 21
63460: PUSH
63461: LD_INT 2
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PPUSH
63468: CALL_OW 72
63472: UNION
63473: PPUSH
63474: CALL_OW 1
63478: ST_TO_ADDR
// end ;
63479: LD_VAR 0 3
63483: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
63484: LD_INT 0
63486: PPUSH
63487: PPUSH
63488: PPUSH
63489: PPUSH
// if not mc_bases [ base ] then
63490: LD_EXP 57
63494: PUSH
63495: LD_VAR 0 1
63499: ARRAY
63500: NOT
63501: IFFALSE 63505
// exit ;
63503: GO 63570
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
63505: LD_ADDR_EXP 77
63509: PUSH
63510: LD_EXP 77
63514: PPUSH
63515: LD_VAR 0 1
63519: PUSH
63520: LD_EXP 77
63524: PUSH
63525: LD_VAR 0 1
63529: ARRAY
63530: PUSH
63531: LD_INT 1
63533: PLUS
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PPUSH
63539: LD_VAR 0 1
63543: PUSH
63544: LD_VAR 0 2
63548: PUSH
63549: LD_VAR 0 3
63553: PUSH
63554: LD_VAR 0 4
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: PPUSH
63565: CALL 19041 0 3
63569: ST_TO_ADDR
// end ;
63570: LD_VAR 0 5
63574: RET
// export function MC_GetMinesField ( base ) ; begin
63575: LD_INT 0
63577: PPUSH
// result := mc_mines [ base ] ;
63578: LD_ADDR_VAR 0 2
63582: PUSH
63583: LD_EXP 70
63587: PUSH
63588: LD_VAR 0 1
63592: ARRAY
63593: ST_TO_ADDR
// end ;
63594: LD_VAR 0 2
63598: RET
// export function MC_GetProduceList ( base ) ; begin
63599: LD_INT 0
63601: PPUSH
// result := mc_produce [ base ] ;
63602: LD_ADDR_VAR 0 2
63606: PUSH
63607: LD_EXP 78
63611: PUSH
63612: LD_VAR 0 1
63616: ARRAY
63617: ST_TO_ADDR
// end ;
63618: LD_VAR 0 2
63622: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
63623: LD_INT 0
63625: PPUSH
63626: PPUSH
// if not mc_bases then
63627: LD_EXP 57
63631: NOT
63632: IFFALSE 63636
// exit ;
63634: GO 63701
// if mc_bases [ base ] then
63636: LD_EXP 57
63640: PUSH
63641: LD_VAR 0 1
63645: ARRAY
63646: IFFALSE 63701
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
63648: LD_ADDR_VAR 0 3
63652: PUSH
63653: LD_EXP 57
63657: PUSH
63658: LD_VAR 0 1
63662: ARRAY
63663: PPUSH
63664: LD_INT 30
63666: PUSH
63667: LD_VAR 0 2
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PPUSH
63676: CALL_OW 72
63680: ST_TO_ADDR
// if result then
63681: LD_VAR 0 3
63685: IFFALSE 63701
// result := result [ 1 ] ;
63687: LD_ADDR_VAR 0 3
63691: PUSH
63692: LD_VAR 0 3
63696: PUSH
63697: LD_INT 1
63699: ARRAY
63700: ST_TO_ADDR
// end ; end ;
63701: LD_VAR 0 3
63705: RET
// export function MC_SetTame ( base , area ) ; begin
63706: LD_INT 0
63708: PPUSH
// if not mc_bases or not base then
63709: LD_EXP 57
63713: NOT
63714: PUSH
63715: LD_VAR 0 1
63719: NOT
63720: OR
63721: IFFALSE 63725
// exit ;
63723: GO 63750
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
63725: LD_ADDR_EXP 85
63729: PUSH
63730: LD_EXP 85
63734: PPUSH
63735: LD_VAR 0 1
63739: PPUSH
63740: LD_VAR 0 2
63744: PPUSH
63745: CALL_OW 1
63749: ST_TO_ADDR
// end ;
63750: LD_VAR 0 3
63754: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
63755: LD_INT 0
63757: PPUSH
63758: PPUSH
// if not mc_bases or not base or not kinds then
63759: LD_EXP 57
63763: NOT
63764: PUSH
63765: LD_VAR 0 1
63769: NOT
63770: OR
63771: PUSH
63772: LD_VAR 0 2
63776: NOT
63777: OR
63778: IFFALSE 63782
// exit ;
63780: GO 63843
// for i in kinds do
63782: LD_ADDR_VAR 0 4
63786: PUSH
63787: LD_VAR 0 2
63791: PUSH
63792: FOR_IN
63793: IFFALSE 63841
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
63795: LD_ADDR_EXP 91
63799: PUSH
63800: LD_EXP 91
63804: PPUSH
63805: LD_VAR 0 1
63809: PUSH
63810: LD_EXP 91
63814: PUSH
63815: LD_VAR 0 1
63819: ARRAY
63820: PUSH
63821: LD_INT 1
63823: PLUS
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PPUSH
63829: LD_VAR 0 4
63833: PPUSH
63834: CALL 19041 0 3
63838: ST_TO_ADDR
63839: GO 63792
63841: POP
63842: POP
// end ;
63843: LD_VAR 0 3
63847: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
63848: LD_INT 0
63850: PPUSH
// if not mc_bases or not base or not areas then
63851: LD_EXP 57
63855: NOT
63856: PUSH
63857: LD_VAR 0 1
63861: NOT
63862: OR
63863: PUSH
63864: LD_VAR 0 2
63868: NOT
63869: OR
63870: IFFALSE 63874
// exit ;
63872: GO 63899
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
63874: LD_ADDR_EXP 75
63878: PUSH
63879: LD_EXP 75
63883: PPUSH
63884: LD_VAR 0 1
63888: PPUSH
63889: LD_VAR 0 2
63893: PPUSH
63894: CALL_OW 1
63898: ST_TO_ADDR
// end ;
63899: LD_VAR 0 3
63903: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
63904: LD_INT 0
63906: PPUSH
// if not mc_bases or not base then
63907: LD_EXP 57
63911: NOT
63912: PUSH
63913: LD_VAR 0 1
63917: NOT
63918: OR
63919: IFFALSE 63923
// exit ;
63921: GO 63957
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
63923: LD_ADDR_EXP 92
63927: PUSH
63928: LD_EXP 92
63932: PPUSH
63933: LD_VAR 0 1
63937: PPUSH
63938: LD_VAR 0 2
63942: PUSH
63943: LD_VAR 0 3
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PPUSH
63952: CALL_OW 1
63956: ST_TO_ADDR
// end ; end_of_file
63957: LD_VAR 0 4
63961: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
63962: LD_INT 0
63964: PPUSH
63965: PPUSH
63966: PPUSH
// if not mc_bases then
63967: LD_EXP 57
63971: NOT
63972: IFFALSE 63976
// exit ;
63974: GO 64141
// for i = 1 to mc_bases do
63976: LD_ADDR_VAR 0 4
63980: PUSH
63981: DOUBLE
63982: LD_INT 1
63984: DEC
63985: ST_TO_ADDR
63986: LD_EXP 57
63990: PUSH
63991: FOR_TO
63992: IFFALSE 64139
// begin if sci in mc_bases [ i ] then
63994: LD_VAR 0 2
63998: PUSH
63999: LD_EXP 57
64003: PUSH
64004: LD_VAR 0 4
64008: ARRAY
64009: IN
64010: IFFALSE 64137
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
64012: LD_ADDR_EXP 86
64016: PUSH
64017: LD_EXP 86
64021: PPUSH
64022: LD_VAR 0 4
64026: PUSH
64027: LD_EXP 86
64031: PUSH
64032: LD_VAR 0 4
64036: ARRAY
64037: PUSH
64038: LD_INT 1
64040: PLUS
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PPUSH
64046: LD_VAR 0 1
64050: PPUSH
64051: CALL 19041 0 3
64055: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
64056: LD_ADDR_VAR 0 5
64060: PUSH
64061: LD_EXP 57
64065: PUSH
64066: LD_VAR 0 4
64070: ARRAY
64071: PPUSH
64072: LD_INT 2
64074: PUSH
64075: LD_INT 30
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 30
64087: PUSH
64088: LD_INT 1
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: LIST
64099: PPUSH
64100: CALL_OW 72
64104: PPUSH
64105: LD_VAR 0 1
64109: PPUSH
64110: CALL_OW 74
64114: ST_TO_ADDR
// if tmp then
64115: LD_VAR 0 5
64119: IFFALSE 64135
// ComStandNearbyBuilding ( ape , tmp ) ;
64121: LD_VAR 0 1
64125: PPUSH
64126: LD_VAR 0 5
64130: PPUSH
64131: CALL 13820 0 2
// break ;
64135: GO 64139
// end ; end ;
64137: GO 63991
64139: POP
64140: POP
// end ;
64141: LD_VAR 0 3
64145: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
64146: LD_INT 0
64148: PPUSH
64149: PPUSH
64150: PPUSH
// if not mc_bases then
64151: LD_EXP 57
64155: NOT
64156: IFFALSE 64160
// exit ;
64158: GO 64249
// for i = 1 to mc_bases do
64160: LD_ADDR_VAR 0 4
64164: PUSH
64165: DOUBLE
64166: LD_INT 1
64168: DEC
64169: ST_TO_ADDR
64170: LD_EXP 57
64174: PUSH
64175: FOR_TO
64176: IFFALSE 64247
// begin if building in mc_busy_turret_list [ i ] then
64178: LD_VAR 0 1
64182: PUSH
64183: LD_EXP 67
64187: PUSH
64188: LD_VAR 0 4
64192: ARRAY
64193: IN
64194: IFFALSE 64245
// begin tmp := mc_busy_turret_list [ i ] diff building ;
64196: LD_ADDR_VAR 0 5
64200: PUSH
64201: LD_EXP 67
64205: PUSH
64206: LD_VAR 0 4
64210: ARRAY
64211: PUSH
64212: LD_VAR 0 1
64216: DIFF
64217: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
64218: LD_ADDR_EXP 67
64222: PUSH
64223: LD_EXP 67
64227: PPUSH
64228: LD_VAR 0 4
64232: PPUSH
64233: LD_VAR 0 5
64237: PPUSH
64238: CALL_OW 1
64242: ST_TO_ADDR
// break ;
64243: GO 64247
// end ; end ;
64245: GO 64175
64247: POP
64248: POP
// end ;
64249: LD_VAR 0 3
64253: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
64254: LD_INT 0
64256: PPUSH
64257: PPUSH
64258: PPUSH
// if not mc_bases then
64259: LD_EXP 57
64263: NOT
64264: IFFALSE 64268
// exit ;
64266: GO 64467
// for i = 1 to mc_bases do
64268: LD_ADDR_VAR 0 5
64272: PUSH
64273: DOUBLE
64274: LD_INT 1
64276: DEC
64277: ST_TO_ADDR
64278: LD_EXP 57
64282: PUSH
64283: FOR_TO
64284: IFFALSE 64465
// if building in mc_bases [ i ] then
64286: LD_VAR 0 1
64290: PUSH
64291: LD_EXP 57
64295: PUSH
64296: LD_VAR 0 5
64300: ARRAY
64301: IN
64302: IFFALSE 64463
// begin tmp := mc_bases [ i ] diff building ;
64304: LD_ADDR_VAR 0 6
64308: PUSH
64309: LD_EXP 57
64313: PUSH
64314: LD_VAR 0 5
64318: ARRAY
64319: PUSH
64320: LD_VAR 0 1
64324: DIFF
64325: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
64326: LD_ADDR_EXP 57
64330: PUSH
64331: LD_EXP 57
64335: PPUSH
64336: LD_VAR 0 5
64340: PPUSH
64341: LD_VAR 0 6
64345: PPUSH
64346: CALL_OW 1
64350: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
64351: LD_VAR 0 1
64355: PUSH
64356: LD_EXP 65
64360: PUSH
64361: LD_VAR 0 5
64365: ARRAY
64366: IN
64367: IFFALSE 64406
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
64369: LD_ADDR_EXP 65
64373: PUSH
64374: LD_EXP 65
64378: PPUSH
64379: LD_VAR 0 5
64383: PPUSH
64384: LD_EXP 65
64388: PUSH
64389: LD_VAR 0 5
64393: ARRAY
64394: PUSH
64395: LD_VAR 0 1
64399: DIFF
64400: PPUSH
64401: CALL_OW 1
64405: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
64406: LD_VAR 0 1
64410: PUSH
64411: LD_EXP 66
64415: PUSH
64416: LD_VAR 0 5
64420: ARRAY
64421: IN
64422: IFFALSE 64461
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
64424: LD_ADDR_EXP 66
64428: PUSH
64429: LD_EXP 66
64433: PPUSH
64434: LD_VAR 0 5
64438: PPUSH
64439: LD_EXP 66
64443: PUSH
64444: LD_VAR 0 5
64448: ARRAY
64449: PUSH
64450: LD_VAR 0 1
64454: DIFF
64455: PPUSH
64456: CALL_OW 1
64460: ST_TO_ADDR
// break ;
64461: GO 64465
// end ;
64463: GO 64283
64465: POP
64466: POP
// end ;
64467: LD_VAR 0 4
64471: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
64472: LD_INT 0
64474: PPUSH
64475: PPUSH
64476: PPUSH
// if not mc_bases or not side in mc_sides then
64477: LD_EXP 57
64481: NOT
64482: PUSH
64483: LD_VAR 0 3
64487: PUSH
64488: LD_EXP 83
64492: IN
64493: NOT
64494: OR
64495: IFFALSE 64499
// exit ;
64497: GO 64622
// for i = 1 to mc_vehicles do
64499: LD_ADDR_VAR 0 6
64503: PUSH
64504: DOUBLE
64505: LD_INT 1
64507: DEC
64508: ST_TO_ADDR
64509: LD_EXP 76
64513: PUSH
64514: FOR_TO
64515: IFFALSE 64620
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
64517: LD_VAR 0 2
64521: PUSH
64522: LD_EXP 76
64526: PUSH
64527: LD_VAR 0 6
64531: ARRAY
64532: IN
64533: PUSH
64534: LD_VAR 0 1
64538: PUSH
64539: LD_EXP 76
64543: PUSH
64544: LD_VAR 0 6
64548: ARRAY
64549: IN
64550: OR
64551: IFFALSE 64618
// begin tmp := mc_vehicles [ i ] diff old ;
64553: LD_ADDR_VAR 0 7
64557: PUSH
64558: LD_EXP 76
64562: PUSH
64563: LD_VAR 0 6
64567: ARRAY
64568: PUSH
64569: LD_VAR 0 2
64573: DIFF
64574: ST_TO_ADDR
// tmp := tmp diff new ;
64575: LD_ADDR_VAR 0 7
64579: PUSH
64580: LD_VAR 0 7
64584: PUSH
64585: LD_VAR 0 1
64589: DIFF
64590: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
64591: LD_ADDR_EXP 76
64595: PUSH
64596: LD_EXP 76
64600: PPUSH
64601: LD_VAR 0 6
64605: PPUSH
64606: LD_VAR 0 7
64610: PPUSH
64611: CALL_OW 1
64615: ST_TO_ADDR
// break ;
64616: GO 64620
// end ;
64618: GO 64514
64620: POP
64621: POP
// end ;
64622: LD_VAR 0 5
64626: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
64627: LD_INT 0
64629: PPUSH
64630: PPUSH
64631: PPUSH
64632: PPUSH
// if not mc_bases then
64633: LD_EXP 57
64637: NOT
64638: IFFALSE 64642
// exit ;
64640: GO 64934
// side := GetSide ( vehicle ) ;
64642: LD_ADDR_VAR 0 5
64646: PUSH
64647: LD_VAR 0 1
64651: PPUSH
64652: CALL_OW 255
64656: ST_TO_ADDR
// for i = 1 to mc_bases do
64657: LD_ADDR_VAR 0 4
64661: PUSH
64662: DOUBLE
64663: LD_INT 1
64665: DEC
64666: ST_TO_ADDR
64667: LD_EXP 57
64671: PUSH
64672: FOR_TO
64673: IFFALSE 64932
// begin if factory in mc_bases [ i ] then
64675: LD_VAR 0 2
64679: PUSH
64680: LD_EXP 57
64684: PUSH
64685: LD_VAR 0 4
64689: ARRAY
64690: IN
64691: IFFALSE 64930
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
64693: LD_EXP 79
64697: PUSH
64698: LD_VAR 0 4
64702: ARRAY
64703: PUSH
64704: LD_EXP 68
64708: PUSH
64709: LD_VAR 0 4
64713: ARRAY
64714: LESS
64715: IFFALSE 64886
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
64717: LD_ADDR_EXP 79
64721: PUSH
64722: LD_EXP 79
64726: PPUSH
64727: LD_VAR 0 4
64731: PPUSH
64732: LD_EXP 79
64736: PUSH
64737: LD_VAR 0 4
64741: ARRAY
64742: PUSH
64743: LD_VAR 0 1
64747: ADD
64748: PPUSH
64749: CALL_OW 1
64753: ST_TO_ADDR
// if not mc_scan [ i ] then
64754: LD_EXP 80
64758: PUSH
64759: LD_VAR 0 4
64763: ARRAY
64764: NOT
64765: IFFALSE 64884
// begin if GetControl ( vehicle ) = control_remote then
64767: LD_VAR 0 1
64771: PPUSH
64772: CALL_OW 263
64776: PUSH
64777: LD_INT 2
64779: EQUAL
64780: IFFALSE 64800
// repeat wait ( 0 0$1 ) ;
64782: LD_INT 35
64784: PPUSH
64785: CALL_OW 67
// until IsControledBy ( vehicle ) ;
64789: LD_VAR 0 1
64793: PPUSH
64794: CALL_OW 312
64798: IFFALSE 64782
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
64800: LD_VAR 0 1
64804: PPUSH
64805: LD_EXP 81
64809: PUSH
64810: LD_VAR 0 4
64814: ARRAY
64815: PPUSH
64816: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
64820: LD_VAR 0 1
64824: PPUSH
64825: CALL_OW 263
64829: PUSH
64830: LD_INT 1
64832: NONEQUAL
64833: IFFALSE 64837
// break ;
64835: GO 64932
// repeat wait ( 0 0$1 ) ;
64837: LD_INT 35
64839: PPUSH
64840: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
64844: LD_VAR 0 1
64848: PPUSH
64849: LD_EXP 81
64853: PUSH
64854: LD_VAR 0 4
64858: ARRAY
64859: PPUSH
64860: CALL_OW 308
64864: IFFALSE 64837
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
64866: LD_VAR 0 1
64870: PPUSH
64871: CALL_OW 311
64875: PPUSH
64876: CALL_OW 121
// exit ;
64880: POP
64881: POP
64882: GO 64934
// end ; end else
64884: GO 64930
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
64886: LD_ADDR_EXP 76
64890: PUSH
64891: LD_EXP 76
64895: PPUSH
64896: LD_VAR 0 4
64900: PUSH
64901: LD_EXP 76
64905: PUSH
64906: LD_VAR 0 4
64910: ARRAY
64911: PUSH
64912: LD_INT 1
64914: PLUS
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PPUSH
64920: LD_VAR 0 1
64924: PPUSH
64925: CALL 19041 0 3
64929: ST_TO_ADDR
// end ; end ;
64930: GO 64672
64932: POP
64933: POP
// end ;
64934: LD_VAR 0 3
64938: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
64939: LD_INT 0
64941: PPUSH
64942: PPUSH
64943: PPUSH
64944: PPUSH
// if not mc_bases then
64945: LD_EXP 57
64949: NOT
64950: IFFALSE 64954
// exit ;
64952: GO 65307
// repeat wait ( 0 0$1 ) ;
64954: LD_INT 35
64956: PPUSH
64957: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
64961: LD_VAR 0 2
64965: PPUSH
64966: LD_VAR 0 3
64970: PPUSH
64971: CALL_OW 284
64975: IFFALSE 64954
// if GetResourceTypeXY ( x , y ) = mat_artefact then
64977: LD_VAR 0 2
64981: PPUSH
64982: LD_VAR 0 3
64986: PPUSH
64987: CALL_OW 283
64991: PUSH
64992: LD_INT 4
64994: EQUAL
64995: IFFALSE 64999
// exit ;
64997: GO 65307
// for i = 1 to mc_bases do
64999: LD_ADDR_VAR 0 7
65003: PUSH
65004: DOUBLE
65005: LD_INT 1
65007: DEC
65008: ST_TO_ADDR
65009: LD_EXP 57
65013: PUSH
65014: FOR_TO
65015: IFFALSE 65305
// begin if mc_crates_area [ i ] then
65017: LD_EXP 75
65021: PUSH
65022: LD_VAR 0 7
65026: ARRAY
65027: IFFALSE 65138
// for j in mc_crates_area [ i ] do
65029: LD_ADDR_VAR 0 8
65033: PUSH
65034: LD_EXP 75
65038: PUSH
65039: LD_VAR 0 7
65043: ARRAY
65044: PUSH
65045: FOR_IN
65046: IFFALSE 65136
// if InArea ( x , y , j ) then
65048: LD_VAR 0 2
65052: PPUSH
65053: LD_VAR 0 3
65057: PPUSH
65058: LD_VAR 0 8
65062: PPUSH
65063: CALL_OW 309
65067: IFFALSE 65134
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
65069: LD_ADDR_EXP 73
65073: PUSH
65074: LD_EXP 73
65078: PPUSH
65079: LD_VAR 0 7
65083: PUSH
65084: LD_EXP 73
65088: PUSH
65089: LD_VAR 0 7
65093: ARRAY
65094: PUSH
65095: LD_INT 1
65097: PLUS
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PPUSH
65103: LD_VAR 0 4
65107: PUSH
65108: LD_VAR 0 2
65112: PUSH
65113: LD_VAR 0 3
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: LIST
65122: PPUSH
65123: CALL 19041 0 3
65127: ST_TO_ADDR
// exit ;
65128: POP
65129: POP
65130: POP
65131: POP
65132: GO 65307
// end ;
65134: GO 65045
65136: POP
65137: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65138: LD_ADDR_VAR 0 9
65142: PUSH
65143: LD_EXP 57
65147: PUSH
65148: LD_VAR 0 7
65152: ARRAY
65153: PPUSH
65154: LD_INT 2
65156: PUSH
65157: LD_INT 30
65159: PUSH
65160: LD_INT 0
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 30
65169: PUSH
65170: LD_INT 1
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: LIST
65181: PPUSH
65182: CALL_OW 72
65186: ST_TO_ADDR
// if not depot then
65187: LD_VAR 0 9
65191: NOT
65192: IFFALSE 65196
// continue ;
65194: GO 65014
// for j in depot do
65196: LD_ADDR_VAR 0 8
65200: PUSH
65201: LD_VAR 0 9
65205: PUSH
65206: FOR_IN
65207: IFFALSE 65301
// if GetDistUnitXY ( j , x , y ) < 30 then
65209: LD_VAR 0 8
65213: PPUSH
65214: LD_VAR 0 2
65218: PPUSH
65219: LD_VAR 0 3
65223: PPUSH
65224: CALL_OW 297
65228: PUSH
65229: LD_INT 30
65231: LESS
65232: IFFALSE 65299
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
65234: LD_ADDR_EXP 73
65238: PUSH
65239: LD_EXP 73
65243: PPUSH
65244: LD_VAR 0 7
65248: PUSH
65249: LD_EXP 73
65253: PUSH
65254: LD_VAR 0 7
65258: ARRAY
65259: PUSH
65260: LD_INT 1
65262: PLUS
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PPUSH
65268: LD_VAR 0 4
65272: PUSH
65273: LD_VAR 0 2
65277: PUSH
65278: LD_VAR 0 3
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: LIST
65287: PPUSH
65288: CALL 19041 0 3
65292: ST_TO_ADDR
// exit ;
65293: POP
65294: POP
65295: POP
65296: POP
65297: GO 65307
// end ;
65299: GO 65206
65301: POP
65302: POP
// end ;
65303: GO 65014
65305: POP
65306: POP
// end ;
65307: LD_VAR 0 6
65311: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
65312: LD_INT 0
65314: PPUSH
65315: PPUSH
65316: PPUSH
65317: PPUSH
// side := GetSide ( lab ) ;
65318: LD_ADDR_VAR 0 4
65322: PUSH
65323: LD_VAR 0 2
65327: PPUSH
65328: CALL_OW 255
65332: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
65333: LD_VAR 0 4
65337: PUSH
65338: LD_EXP 83
65342: IN
65343: NOT
65344: PUSH
65345: LD_EXP 84
65349: NOT
65350: OR
65351: PUSH
65352: LD_EXP 57
65356: NOT
65357: OR
65358: IFFALSE 65362
// exit ;
65360: GO 65595
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
65362: LD_ADDR_EXP 84
65366: PUSH
65367: LD_EXP 84
65371: PPUSH
65372: LD_VAR 0 4
65376: PPUSH
65377: LD_EXP 84
65381: PUSH
65382: LD_VAR 0 4
65386: ARRAY
65387: PUSH
65388: LD_VAR 0 1
65392: DIFF
65393: PPUSH
65394: CALL_OW 1
65398: ST_TO_ADDR
// for i = 1 to mc_bases do
65399: LD_ADDR_VAR 0 5
65403: PUSH
65404: DOUBLE
65405: LD_INT 1
65407: DEC
65408: ST_TO_ADDR
65409: LD_EXP 57
65413: PUSH
65414: FOR_TO
65415: IFFALSE 65593
// begin if lab in mc_bases [ i ] then
65417: LD_VAR 0 2
65421: PUSH
65422: LD_EXP 57
65426: PUSH
65427: LD_VAR 0 5
65431: ARRAY
65432: IN
65433: IFFALSE 65591
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
65435: LD_VAR 0 1
65439: PUSH
65440: LD_INT 11
65442: PUSH
65443: LD_INT 4
65445: PUSH
65446: LD_INT 3
65448: PUSH
65449: LD_INT 2
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: IN
65458: PUSH
65459: LD_EXP 87
65463: PUSH
65464: LD_VAR 0 5
65468: ARRAY
65469: AND
65470: IFFALSE 65591
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
65472: LD_ADDR_VAR 0 6
65476: PUSH
65477: LD_EXP 87
65481: PUSH
65482: LD_VAR 0 5
65486: ARRAY
65487: PUSH
65488: LD_INT 1
65490: ARRAY
65491: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
65492: LD_ADDR_EXP 87
65496: PUSH
65497: LD_EXP 87
65501: PPUSH
65502: LD_VAR 0 5
65506: PPUSH
65507: EMPTY
65508: PPUSH
65509: CALL_OW 1
65513: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
65514: LD_VAR 0 6
65518: PPUSH
65519: LD_INT 0
65521: PPUSH
65522: CALL_OW 109
// ComExitBuilding ( tmp ) ;
65526: LD_VAR 0 6
65530: PPUSH
65531: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
65535: LD_ADDR_EXP 86
65539: PUSH
65540: LD_EXP 86
65544: PPUSH
65545: LD_VAR 0 5
65549: PPUSH
65550: LD_EXP 86
65554: PUSH
65555: LD_VAR 0 5
65559: ARRAY
65560: PPUSH
65561: LD_INT 1
65563: PPUSH
65564: LD_VAR 0 6
65568: PPUSH
65569: CALL_OW 2
65573: PPUSH
65574: CALL_OW 1
65578: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
65579: LD_VAR 0 5
65583: PPUSH
65584: LD_INT 112
65586: PPUSH
65587: CALL 51483 0 2
// end ; end ; end ;
65591: GO 65414
65593: POP
65594: POP
// end ;
65595: LD_VAR 0 3
65599: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
65600: LD_INT 0
65602: PPUSH
65603: PPUSH
65604: PPUSH
65605: PPUSH
65606: PPUSH
65607: PPUSH
65608: PPUSH
65609: PPUSH
// if not mc_bases then
65610: LD_EXP 57
65614: NOT
65615: IFFALSE 65619
// exit ;
65617: GO 66544
// for i = 1 to mc_bases do
65619: LD_ADDR_VAR 0 3
65623: PUSH
65624: DOUBLE
65625: LD_INT 1
65627: DEC
65628: ST_TO_ADDR
65629: LD_EXP 57
65633: PUSH
65634: FOR_TO
65635: IFFALSE 66542
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
65637: LD_VAR 0 1
65641: PUSH
65642: LD_EXP 57
65646: PUSH
65647: LD_VAR 0 3
65651: ARRAY
65652: IN
65653: PUSH
65654: LD_VAR 0 1
65658: PUSH
65659: LD_EXP 64
65663: PUSH
65664: LD_VAR 0 3
65668: ARRAY
65669: IN
65670: OR
65671: PUSH
65672: LD_VAR 0 1
65676: PUSH
65677: LD_EXP 76
65681: PUSH
65682: LD_VAR 0 3
65686: ARRAY
65687: IN
65688: OR
65689: PUSH
65690: LD_VAR 0 1
65694: PUSH
65695: LD_EXP 86
65699: PUSH
65700: LD_VAR 0 3
65704: ARRAY
65705: IN
65706: OR
65707: PUSH
65708: LD_VAR 0 1
65712: PUSH
65713: LD_EXP 87
65717: PUSH
65718: LD_VAR 0 3
65722: ARRAY
65723: IN
65724: OR
65725: IFFALSE 66540
// begin if un in mc_ape [ i ] then
65727: LD_VAR 0 1
65731: PUSH
65732: LD_EXP 86
65736: PUSH
65737: LD_VAR 0 3
65741: ARRAY
65742: IN
65743: IFFALSE 65782
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
65745: LD_ADDR_EXP 86
65749: PUSH
65750: LD_EXP 86
65754: PPUSH
65755: LD_VAR 0 3
65759: PPUSH
65760: LD_EXP 86
65764: PUSH
65765: LD_VAR 0 3
65769: ARRAY
65770: PUSH
65771: LD_VAR 0 1
65775: DIFF
65776: PPUSH
65777: CALL_OW 1
65781: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
65782: LD_VAR 0 1
65786: PUSH
65787: LD_EXP 87
65791: PUSH
65792: LD_VAR 0 3
65796: ARRAY
65797: IN
65798: IFFALSE 65822
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
65800: LD_ADDR_EXP 87
65804: PUSH
65805: LD_EXP 87
65809: PPUSH
65810: LD_VAR 0 3
65814: PPUSH
65815: EMPTY
65816: PPUSH
65817: CALL_OW 1
65821: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
65822: LD_VAR 0 1
65826: PPUSH
65827: CALL_OW 247
65831: PUSH
65832: LD_INT 2
65834: EQUAL
65835: PUSH
65836: LD_VAR 0 1
65840: PPUSH
65841: CALL_OW 110
65845: PUSH
65846: LD_INT 20
65848: EQUAL
65849: AND
65850: IFFALSE 65953
// begin fac := MC_GetBuilding ( i , b_factory ) ;
65852: LD_ADDR_VAR 0 8
65856: PUSH
65857: LD_VAR 0 3
65861: PPUSH
65862: LD_INT 3
65864: PPUSH
65865: CALL 63623 0 2
65869: ST_TO_ADDR
// if fac then
65870: LD_VAR 0 8
65874: IFFALSE 65953
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
65876: LD_ADDR_VAR 0 9
65880: PUSH
65881: LD_VAR 0 8
65885: PPUSH
65886: LD_VAR 0 1
65890: PPUSH
65891: CALL_OW 265
65895: PPUSH
65896: LD_VAR 0 1
65900: PPUSH
65901: CALL_OW 262
65905: PPUSH
65906: LD_VAR 0 1
65910: PPUSH
65911: CALL_OW 263
65915: PPUSH
65916: LD_VAR 0 1
65920: PPUSH
65921: CALL_OW 264
65925: PPUSH
65926: CALL 16206 0 5
65930: ST_TO_ADDR
// if components then
65931: LD_VAR 0 9
65935: IFFALSE 65951
// MC_InsertProduceList ( i , components ) ;
65937: LD_VAR 0 3
65941: PPUSH
65942: LD_VAR 0 9
65946: PPUSH
65947: CALL 63286 0 2
// break ;
65951: GO 66542
// end ; end ; if GetType ( un ) = unit_building then
65953: LD_VAR 0 1
65957: PPUSH
65958: CALL_OW 247
65962: PUSH
65963: LD_INT 3
65965: EQUAL
65966: IFFALSE 66263
// begin btype := GetBType ( un ) ;
65968: LD_ADDR_VAR 0 5
65972: PUSH
65973: LD_VAR 0 1
65977: PPUSH
65978: CALL_OW 266
65982: ST_TO_ADDR
// if btype = b_warehouse then
65983: LD_VAR 0 5
65987: PUSH
65988: LD_INT 1
65990: EQUAL
65991: IFFALSE 66009
// begin btype := b_depot ;
65993: LD_ADDR_VAR 0 5
65997: PUSH
65998: LD_INT 0
66000: ST_TO_ADDR
// pos := 1 ;
66001: LD_ADDR_VAR 0 6
66005: PUSH
66006: LD_INT 1
66008: ST_TO_ADDR
// end ; if btype = b_factory then
66009: LD_VAR 0 5
66013: PUSH
66014: LD_INT 3
66016: EQUAL
66017: IFFALSE 66035
// begin btype := b_workshop ;
66019: LD_ADDR_VAR 0 5
66023: PUSH
66024: LD_INT 2
66026: ST_TO_ADDR
// pos := 1 ;
66027: LD_ADDR_VAR 0 6
66031: PUSH
66032: LD_INT 1
66034: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
66035: LD_VAR 0 5
66039: PUSH
66040: LD_INT 7
66042: PUSH
66043: LD_INT 8
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: IN
66050: IFFALSE 66060
// btype := b_lab ;
66052: LD_ADDR_VAR 0 5
66056: PUSH
66057: LD_INT 6
66059: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
66060: LD_ADDR_EXP 62
66064: PUSH
66065: LD_EXP 62
66069: PPUSH
66070: LD_VAR 0 3
66074: PUSH
66075: LD_EXP 62
66079: PUSH
66080: LD_VAR 0 3
66084: ARRAY
66085: PUSH
66086: LD_INT 1
66088: PLUS
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PPUSH
66094: LD_VAR 0 5
66098: PUSH
66099: LD_VAR 0 1
66103: PPUSH
66104: CALL_OW 250
66108: PUSH
66109: LD_VAR 0 1
66113: PPUSH
66114: CALL_OW 251
66118: PUSH
66119: LD_VAR 0 1
66123: PPUSH
66124: CALL_OW 254
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: PPUSH
66135: CALL 19041 0 3
66139: ST_TO_ADDR
// if pos = 1 then
66140: LD_VAR 0 6
66144: PUSH
66145: LD_INT 1
66147: EQUAL
66148: IFFALSE 66263
// begin tmp := mc_build_list [ i ] ;
66150: LD_ADDR_VAR 0 7
66154: PUSH
66155: LD_EXP 62
66159: PUSH
66160: LD_VAR 0 3
66164: ARRAY
66165: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
66166: LD_VAR 0 7
66170: PPUSH
66171: LD_INT 2
66173: PUSH
66174: LD_INT 30
66176: PUSH
66177: LD_INT 0
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 30
66186: PUSH
66187: LD_INT 1
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: LIST
66198: PPUSH
66199: CALL_OW 72
66203: IFFALSE 66213
// pos := 2 ;
66205: LD_ADDR_VAR 0 6
66209: PUSH
66210: LD_INT 2
66212: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
66213: LD_ADDR_VAR 0 7
66217: PUSH
66218: LD_VAR 0 7
66222: PPUSH
66223: LD_VAR 0 6
66227: PPUSH
66228: LD_VAR 0 7
66232: PPUSH
66233: CALL 18932 0 3
66237: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
66238: LD_ADDR_EXP 62
66242: PUSH
66243: LD_EXP 62
66247: PPUSH
66248: LD_VAR 0 3
66252: PPUSH
66253: LD_VAR 0 7
66257: PPUSH
66258: CALL_OW 1
66262: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
66263: LD_VAR 0 1
66267: PUSH
66268: LD_EXP 57
66272: PUSH
66273: LD_VAR 0 3
66277: ARRAY
66278: IN
66279: IFFALSE 66318
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
66281: LD_ADDR_EXP 57
66285: PUSH
66286: LD_EXP 57
66290: PPUSH
66291: LD_VAR 0 3
66295: PPUSH
66296: LD_EXP 57
66300: PUSH
66301: LD_VAR 0 3
66305: ARRAY
66306: PUSH
66307: LD_VAR 0 1
66311: DIFF
66312: PPUSH
66313: CALL_OW 1
66317: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
66318: LD_VAR 0 1
66322: PUSH
66323: LD_EXP 64
66327: PUSH
66328: LD_VAR 0 3
66332: ARRAY
66333: IN
66334: IFFALSE 66373
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
66336: LD_ADDR_EXP 64
66340: PUSH
66341: LD_EXP 64
66345: PPUSH
66346: LD_VAR 0 3
66350: PPUSH
66351: LD_EXP 64
66355: PUSH
66356: LD_VAR 0 3
66360: ARRAY
66361: PUSH
66362: LD_VAR 0 1
66366: DIFF
66367: PPUSH
66368: CALL_OW 1
66372: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
66373: LD_VAR 0 1
66377: PUSH
66378: LD_EXP 76
66382: PUSH
66383: LD_VAR 0 3
66387: ARRAY
66388: IN
66389: IFFALSE 66428
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
66391: LD_ADDR_EXP 76
66395: PUSH
66396: LD_EXP 76
66400: PPUSH
66401: LD_VAR 0 3
66405: PPUSH
66406: LD_EXP 76
66410: PUSH
66411: LD_VAR 0 3
66415: ARRAY
66416: PUSH
66417: LD_VAR 0 1
66421: DIFF
66422: PPUSH
66423: CALL_OW 1
66427: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
66428: LD_VAR 0 1
66432: PUSH
66433: LD_EXP 66
66437: PUSH
66438: LD_VAR 0 3
66442: ARRAY
66443: IN
66444: IFFALSE 66483
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
66446: LD_ADDR_EXP 66
66450: PUSH
66451: LD_EXP 66
66455: PPUSH
66456: LD_VAR 0 3
66460: PPUSH
66461: LD_EXP 66
66465: PUSH
66466: LD_VAR 0 3
66470: ARRAY
66471: PUSH
66472: LD_VAR 0 1
66476: DIFF
66477: PPUSH
66478: CALL_OW 1
66482: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
66483: LD_VAR 0 1
66487: PUSH
66488: LD_EXP 65
66492: PUSH
66493: LD_VAR 0 3
66497: ARRAY
66498: IN
66499: IFFALSE 66538
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
66501: LD_ADDR_EXP 65
66505: PUSH
66506: LD_EXP 65
66510: PPUSH
66511: LD_VAR 0 3
66515: PPUSH
66516: LD_EXP 65
66520: PUSH
66521: LD_VAR 0 3
66525: ARRAY
66526: PUSH
66527: LD_VAR 0 1
66531: DIFF
66532: PPUSH
66533: CALL_OW 1
66537: ST_TO_ADDR
// end ; break ;
66538: GO 66542
// end ;
66540: GO 65634
66542: POP
66543: POP
// end ;
66544: LD_VAR 0 2
66548: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
66549: LD_INT 0
66551: PPUSH
66552: PPUSH
66553: PPUSH
// if not mc_bases then
66554: LD_EXP 57
66558: NOT
66559: IFFALSE 66563
// exit ;
66561: GO 66778
// for i = 1 to mc_bases do
66563: LD_ADDR_VAR 0 3
66567: PUSH
66568: DOUBLE
66569: LD_INT 1
66571: DEC
66572: ST_TO_ADDR
66573: LD_EXP 57
66577: PUSH
66578: FOR_TO
66579: IFFALSE 66776
// begin if building in mc_construct_list [ i ] then
66581: LD_VAR 0 1
66585: PUSH
66586: LD_EXP 64
66590: PUSH
66591: LD_VAR 0 3
66595: ARRAY
66596: IN
66597: IFFALSE 66774
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
66599: LD_ADDR_EXP 64
66603: PUSH
66604: LD_EXP 64
66608: PPUSH
66609: LD_VAR 0 3
66613: PPUSH
66614: LD_EXP 64
66618: PUSH
66619: LD_VAR 0 3
66623: ARRAY
66624: PUSH
66625: LD_VAR 0 1
66629: DIFF
66630: PPUSH
66631: CALL_OW 1
66635: ST_TO_ADDR
// if building in mc_lab [ i ] then
66636: LD_VAR 0 1
66640: PUSH
66641: LD_EXP 90
66645: PUSH
66646: LD_VAR 0 3
66650: ARRAY
66651: IN
66652: IFFALSE 66707
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
66654: LD_ADDR_EXP 91
66658: PUSH
66659: LD_EXP 91
66663: PPUSH
66664: LD_VAR 0 3
66668: PPUSH
66669: LD_EXP 91
66673: PUSH
66674: LD_VAR 0 3
66678: ARRAY
66679: PPUSH
66680: LD_INT 1
66682: PPUSH
66683: LD_EXP 91
66687: PUSH
66688: LD_VAR 0 3
66692: ARRAY
66693: PPUSH
66694: LD_INT 0
66696: PPUSH
66697: CALL 18024 0 4
66701: PPUSH
66702: CALL_OW 1
66706: ST_TO_ADDR
// if not building in mc_bases [ i ] then
66707: LD_VAR 0 1
66711: PUSH
66712: LD_EXP 57
66716: PUSH
66717: LD_VAR 0 3
66721: ARRAY
66722: IN
66723: NOT
66724: IFFALSE 66770
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
66726: LD_ADDR_EXP 57
66730: PUSH
66731: LD_EXP 57
66735: PPUSH
66736: LD_VAR 0 3
66740: PUSH
66741: LD_EXP 57
66745: PUSH
66746: LD_VAR 0 3
66750: ARRAY
66751: PUSH
66752: LD_INT 1
66754: PLUS
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PPUSH
66760: LD_VAR 0 1
66764: PPUSH
66765: CALL 19041 0 3
66769: ST_TO_ADDR
// exit ;
66770: POP
66771: POP
66772: GO 66778
// end ; end ;
66774: GO 66578
66776: POP
66777: POP
// end ;
66778: LD_VAR 0 2
66782: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
66783: LD_INT 0
66785: PPUSH
66786: PPUSH
66787: PPUSH
66788: PPUSH
66789: PPUSH
66790: PPUSH
66791: PPUSH
// if not mc_bases then
66792: LD_EXP 57
66796: NOT
66797: IFFALSE 66801
// exit ;
66799: GO 67462
// for i = 1 to mc_bases do
66801: LD_ADDR_VAR 0 3
66805: PUSH
66806: DOUBLE
66807: LD_INT 1
66809: DEC
66810: ST_TO_ADDR
66811: LD_EXP 57
66815: PUSH
66816: FOR_TO
66817: IFFALSE 67460
// begin if building in mc_construct_list [ i ] then
66819: LD_VAR 0 1
66823: PUSH
66824: LD_EXP 64
66828: PUSH
66829: LD_VAR 0 3
66833: ARRAY
66834: IN
66835: IFFALSE 67458
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
66837: LD_ADDR_EXP 64
66841: PUSH
66842: LD_EXP 64
66846: PPUSH
66847: LD_VAR 0 3
66851: PPUSH
66852: LD_EXP 64
66856: PUSH
66857: LD_VAR 0 3
66861: ARRAY
66862: PUSH
66863: LD_VAR 0 1
66867: DIFF
66868: PPUSH
66869: CALL_OW 1
66873: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
66874: LD_ADDR_EXP 57
66878: PUSH
66879: LD_EXP 57
66883: PPUSH
66884: LD_VAR 0 3
66888: PUSH
66889: LD_EXP 57
66893: PUSH
66894: LD_VAR 0 3
66898: ARRAY
66899: PUSH
66900: LD_INT 1
66902: PLUS
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PPUSH
66908: LD_VAR 0 1
66912: PPUSH
66913: CALL 19041 0 3
66917: ST_TO_ADDR
// btype := GetBType ( building ) ;
66918: LD_ADDR_VAR 0 5
66922: PUSH
66923: LD_VAR 0 1
66927: PPUSH
66928: CALL_OW 266
66932: ST_TO_ADDR
// side := GetSide ( building ) ;
66933: LD_ADDR_VAR 0 8
66937: PUSH
66938: LD_VAR 0 1
66942: PPUSH
66943: CALL_OW 255
66947: ST_TO_ADDR
// if btype = b_lab then
66948: LD_VAR 0 5
66952: PUSH
66953: LD_INT 6
66955: EQUAL
66956: IFFALSE 67006
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
66958: LD_ADDR_EXP 90
66962: PUSH
66963: LD_EXP 90
66967: PPUSH
66968: LD_VAR 0 3
66972: PUSH
66973: LD_EXP 90
66977: PUSH
66978: LD_VAR 0 3
66982: ARRAY
66983: PUSH
66984: LD_INT 1
66986: PLUS
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PPUSH
66992: LD_VAR 0 1
66996: PPUSH
66997: CALL 19041 0 3
67001: ST_TO_ADDR
// exit ;
67002: POP
67003: POP
67004: GO 67462
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
67006: LD_VAR 0 5
67010: PUSH
67011: LD_INT 0
67013: PUSH
67014: LD_INT 2
67016: PUSH
67017: LD_INT 4
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: LIST
67024: IN
67025: IFFALSE 67149
// begin if btype = b_armoury then
67027: LD_VAR 0 5
67031: PUSH
67032: LD_INT 4
67034: EQUAL
67035: IFFALSE 67045
// btype := b_barracks ;
67037: LD_ADDR_VAR 0 5
67041: PUSH
67042: LD_INT 5
67044: ST_TO_ADDR
// if btype = b_depot then
67045: LD_VAR 0 5
67049: PUSH
67050: LD_INT 0
67052: EQUAL
67053: IFFALSE 67063
// btype := b_warehouse ;
67055: LD_ADDR_VAR 0 5
67059: PUSH
67060: LD_INT 1
67062: ST_TO_ADDR
// if btype = b_workshop then
67063: LD_VAR 0 5
67067: PUSH
67068: LD_INT 2
67070: EQUAL
67071: IFFALSE 67081
// btype := b_factory ;
67073: LD_ADDR_VAR 0 5
67077: PUSH
67078: LD_INT 3
67080: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
67081: LD_VAR 0 5
67085: PPUSH
67086: LD_VAR 0 8
67090: PPUSH
67091: CALL_OW 323
67095: PUSH
67096: LD_INT 1
67098: EQUAL
67099: IFFALSE 67145
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
67101: LD_ADDR_EXP 89
67105: PUSH
67106: LD_EXP 89
67110: PPUSH
67111: LD_VAR 0 3
67115: PUSH
67116: LD_EXP 89
67120: PUSH
67121: LD_VAR 0 3
67125: ARRAY
67126: PUSH
67127: LD_INT 1
67129: PLUS
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PPUSH
67135: LD_VAR 0 1
67139: PPUSH
67140: CALL 19041 0 3
67144: ST_TO_ADDR
// exit ;
67145: POP
67146: POP
67147: GO 67462
// end ; if btype in [ b_bunker , b_turret ] then
67149: LD_VAR 0 5
67153: PUSH
67154: LD_INT 32
67156: PUSH
67157: LD_INT 33
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: IN
67164: IFFALSE 67454
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
67166: LD_ADDR_EXP 65
67170: PUSH
67171: LD_EXP 65
67175: PPUSH
67176: LD_VAR 0 3
67180: PUSH
67181: LD_EXP 65
67185: PUSH
67186: LD_VAR 0 3
67190: ARRAY
67191: PUSH
67192: LD_INT 1
67194: PLUS
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PPUSH
67200: LD_VAR 0 1
67204: PPUSH
67205: CALL 19041 0 3
67209: ST_TO_ADDR
// if btype = b_bunker then
67210: LD_VAR 0 5
67214: PUSH
67215: LD_INT 32
67217: EQUAL
67218: IFFALSE 67454
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
67220: LD_ADDR_EXP 66
67224: PUSH
67225: LD_EXP 66
67229: PPUSH
67230: LD_VAR 0 3
67234: PUSH
67235: LD_EXP 66
67239: PUSH
67240: LD_VAR 0 3
67244: ARRAY
67245: PUSH
67246: LD_INT 1
67248: PLUS
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PPUSH
67254: LD_VAR 0 1
67258: PPUSH
67259: CALL 19041 0 3
67263: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
67264: LD_ADDR_VAR 0 6
67268: PUSH
67269: LD_EXP 57
67273: PUSH
67274: LD_VAR 0 3
67278: ARRAY
67279: PPUSH
67280: LD_INT 25
67282: PUSH
67283: LD_INT 1
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 3
67292: PUSH
67293: LD_INT 54
67295: PUSH
67296: EMPTY
67297: LIST
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PPUSH
67307: CALL_OW 72
67311: ST_TO_ADDR
// if tmp then
67312: LD_VAR 0 6
67316: IFFALSE 67322
// exit ;
67318: POP
67319: POP
67320: GO 67462
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67322: LD_ADDR_VAR 0 6
67326: PUSH
67327: LD_EXP 57
67331: PUSH
67332: LD_VAR 0 3
67336: ARRAY
67337: PPUSH
67338: LD_INT 2
67340: PUSH
67341: LD_INT 30
67343: PUSH
67344: LD_INT 4
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 30
67353: PUSH
67354: LD_INT 5
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: LIST
67365: PPUSH
67366: CALL_OW 72
67370: ST_TO_ADDR
// if not tmp then
67371: LD_VAR 0 6
67375: NOT
67376: IFFALSE 67382
// exit ;
67378: POP
67379: POP
67380: GO 67462
// for j in tmp do
67382: LD_ADDR_VAR 0 4
67386: PUSH
67387: LD_VAR 0 6
67391: PUSH
67392: FOR_IN
67393: IFFALSE 67452
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
67395: LD_ADDR_VAR 0 7
67399: PUSH
67400: LD_VAR 0 4
67404: PPUSH
67405: CALL_OW 313
67409: PPUSH
67410: LD_INT 25
67412: PUSH
67413: LD_INT 1
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PPUSH
67420: CALL_OW 72
67424: ST_TO_ADDR
// if units then
67425: LD_VAR 0 7
67429: IFFALSE 67450
// begin ComExitBuilding ( units [ 1 ] ) ;
67431: LD_VAR 0 7
67435: PUSH
67436: LD_INT 1
67438: ARRAY
67439: PPUSH
67440: CALL_OW 122
// exit ;
67444: POP
67445: POP
67446: POP
67447: POP
67448: GO 67462
// end ; end ;
67450: GO 67392
67452: POP
67453: POP
// end ; end ; exit ;
67454: POP
67455: POP
67456: GO 67462
// end ; end ;
67458: GO 66816
67460: POP
67461: POP
// end ;
67462: LD_VAR 0 2
67466: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
67467: LD_INT 0
67469: PPUSH
67470: PPUSH
67471: PPUSH
67472: PPUSH
67473: PPUSH
67474: PPUSH
67475: PPUSH
// if not mc_bases then
67476: LD_EXP 57
67480: NOT
67481: IFFALSE 67485
// exit ;
67483: GO 67716
// btype := GetBType ( building ) ;
67485: LD_ADDR_VAR 0 6
67489: PUSH
67490: LD_VAR 0 1
67494: PPUSH
67495: CALL_OW 266
67499: ST_TO_ADDR
// x := GetX ( building ) ;
67500: LD_ADDR_VAR 0 7
67504: PUSH
67505: LD_VAR 0 1
67509: PPUSH
67510: CALL_OW 250
67514: ST_TO_ADDR
// y := GetY ( building ) ;
67515: LD_ADDR_VAR 0 8
67519: PUSH
67520: LD_VAR 0 1
67524: PPUSH
67525: CALL_OW 251
67529: ST_TO_ADDR
// d := GetDir ( building ) ;
67530: LD_ADDR_VAR 0 9
67534: PUSH
67535: LD_VAR 0 1
67539: PPUSH
67540: CALL_OW 254
67544: ST_TO_ADDR
// for i = 1 to mc_bases do
67545: LD_ADDR_VAR 0 4
67549: PUSH
67550: DOUBLE
67551: LD_INT 1
67553: DEC
67554: ST_TO_ADDR
67555: LD_EXP 57
67559: PUSH
67560: FOR_TO
67561: IFFALSE 67714
// begin if not mc_build_list [ i ] then
67563: LD_EXP 62
67567: PUSH
67568: LD_VAR 0 4
67572: ARRAY
67573: NOT
67574: IFFALSE 67578
// continue ;
67576: GO 67560
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
67578: LD_VAR 0 6
67582: PUSH
67583: LD_VAR 0 7
67587: PUSH
67588: LD_VAR 0 8
67592: PUSH
67593: LD_VAR 0 9
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: PPUSH
67604: LD_EXP 62
67608: PUSH
67609: LD_VAR 0 4
67613: ARRAY
67614: PUSH
67615: LD_INT 1
67617: ARRAY
67618: PPUSH
67619: CALL 24639 0 2
67623: IFFALSE 67712
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
67625: LD_ADDR_EXP 62
67629: PUSH
67630: LD_EXP 62
67634: PPUSH
67635: LD_VAR 0 4
67639: PPUSH
67640: LD_EXP 62
67644: PUSH
67645: LD_VAR 0 4
67649: ARRAY
67650: PPUSH
67651: LD_INT 1
67653: PPUSH
67654: CALL_OW 3
67658: PPUSH
67659: CALL_OW 1
67663: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
67664: LD_ADDR_EXP 64
67668: PUSH
67669: LD_EXP 64
67673: PPUSH
67674: LD_VAR 0 4
67678: PUSH
67679: LD_EXP 64
67683: PUSH
67684: LD_VAR 0 4
67688: ARRAY
67689: PUSH
67690: LD_INT 1
67692: PLUS
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PPUSH
67698: LD_VAR 0 1
67702: PPUSH
67703: CALL 19041 0 3
67707: ST_TO_ADDR
// exit ;
67708: POP
67709: POP
67710: GO 67716
// end ; end ;
67712: GO 67560
67714: POP
67715: POP
// end ;
67716: LD_VAR 0 3
67720: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
67721: LD_INT 0
67723: PPUSH
67724: PPUSH
67725: PPUSH
// if not mc_bases then
67726: LD_EXP 57
67730: NOT
67731: IFFALSE 67735
// exit ;
67733: GO 67925
// for i = 1 to mc_bases do
67735: LD_ADDR_VAR 0 4
67739: PUSH
67740: DOUBLE
67741: LD_INT 1
67743: DEC
67744: ST_TO_ADDR
67745: LD_EXP 57
67749: PUSH
67750: FOR_TO
67751: IFFALSE 67838
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
67753: LD_VAR 0 1
67757: PUSH
67758: LD_EXP 65
67762: PUSH
67763: LD_VAR 0 4
67767: ARRAY
67768: IN
67769: PUSH
67770: LD_VAR 0 1
67774: PUSH
67775: LD_EXP 66
67779: PUSH
67780: LD_VAR 0 4
67784: ARRAY
67785: IN
67786: NOT
67787: AND
67788: IFFALSE 67836
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
67790: LD_ADDR_EXP 66
67794: PUSH
67795: LD_EXP 66
67799: PPUSH
67800: LD_VAR 0 4
67804: PUSH
67805: LD_EXP 66
67809: PUSH
67810: LD_VAR 0 4
67814: ARRAY
67815: PUSH
67816: LD_INT 1
67818: PLUS
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PPUSH
67824: LD_VAR 0 1
67828: PPUSH
67829: CALL 19041 0 3
67833: ST_TO_ADDR
// break ;
67834: GO 67838
// end ; end ;
67836: GO 67750
67838: POP
67839: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
67840: LD_VAR 0 1
67844: PPUSH
67845: CALL_OW 257
67849: PUSH
67850: LD_EXP 83
67854: IN
67855: PUSH
67856: LD_VAR 0 1
67860: PPUSH
67861: CALL_OW 266
67865: PUSH
67866: LD_INT 5
67868: EQUAL
67869: AND
67870: PUSH
67871: LD_VAR 0 2
67875: PPUSH
67876: CALL_OW 110
67880: PUSH
67881: LD_INT 18
67883: NONEQUAL
67884: AND
67885: IFFALSE 67925
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
67887: LD_VAR 0 2
67891: PPUSH
67892: CALL_OW 257
67896: PUSH
67897: LD_INT 5
67899: PUSH
67900: LD_INT 8
67902: PUSH
67903: LD_INT 9
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: LIST
67910: IN
67911: IFFALSE 67925
// SetClass ( unit , 1 ) ;
67913: LD_VAR 0 2
67917: PPUSH
67918: LD_INT 1
67920: PPUSH
67921: CALL_OW 336
// end ;
67925: LD_VAR 0 3
67929: RET
// export function MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
67930: LD_INT 0
67932: PPUSH
67933: PPUSH
// if not mc_bases then
67934: LD_EXP 57
67938: NOT
67939: IFFALSE 67943
// exit ;
67941: GO 68059
// if GetLives ( abandoned_vehicle ) > 250 then
67943: LD_VAR 0 2
67947: PPUSH
67948: CALL_OW 256
67952: PUSH
67953: LD_INT 250
67955: GREATER
67956: IFFALSE 67960
// exit ;
67958: GO 68059
// for i = 1 to mc_bases do
67960: LD_ADDR_VAR 0 6
67964: PUSH
67965: DOUBLE
67966: LD_INT 1
67968: DEC
67969: ST_TO_ADDR
67970: LD_EXP 57
67974: PUSH
67975: FOR_TO
67976: IFFALSE 68057
// begin if driver in mc_bases [ i ] then
67978: LD_VAR 0 1
67982: PUSH
67983: LD_EXP 57
67987: PUSH
67988: LD_VAR 0 6
67992: ARRAY
67993: IN
67994: IFFALSE 68055
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
67996: LD_VAR 0 1
68000: PPUSH
68001: LD_EXP 57
68005: PUSH
68006: LD_VAR 0 6
68010: ARRAY
68011: PPUSH
68012: LD_INT 2
68014: PUSH
68015: LD_INT 30
68017: PUSH
68018: LD_INT 0
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 30
68027: PUSH
68028: LD_INT 1
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: LIST
68039: PPUSH
68040: CALL_OW 72
68044: PUSH
68045: LD_INT 1
68047: ARRAY
68048: PPUSH
68049: CALL_OW 112
// break ;
68053: GO 68057
// end ; end ;
68055: GO 67975
68057: POP
68058: POP
// end ;
68059: LD_VAR 0 5
68063: RET
