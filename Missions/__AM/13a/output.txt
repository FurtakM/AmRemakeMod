// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitVariables ;
   8: CALL 472 0 0
// InitMacro ;
  12: CALL 38848 0 0
// PrepareNature ( 3 , 3 , 6 , 4 , 3 , 0 , 0 , nature_area , 0 ) ;
  16: LD_INT 3
  18: PPUSH
  19: LD_INT 3
  21: PPUSH
  22: LD_INT 6
  24: PPUSH
  25: LD_INT 4
  27: PPUSH
  28: LD_INT 3
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: LD_INT 5
  39: PPUSH
  40: LD_INT 0
  42: PPUSH
  43: CALL 34723 0 9
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , area_base_russian , 0 ) ;
  47: LD_INT 0
  49: PPUSH
  50: LD_INT 0
  52: PPUSH
  53: LD_INT 4
  55: PPUSH
  56: LD_INT 0
  58: PPUSH
  59: LD_INT 0
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: LD_INT 0
  67: PPUSH
  68: LD_INT 4
  70: PPUSH
  71: LD_INT 0
  73: PPUSH
  74: CALL 34723 0 9
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 1 , 0 , area_apeman_arabian , 0 ) ;
  78: LD_INT 0
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 6
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: LD_INT 0
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: LD_INT 6
 101: PPUSH
 102: LD_INT 0
 104: PPUSH
 105: CALL 34723 0 9
// PrepareArabian ;
 109: CALL 732 0 0
// PrepareRussian ;
 113: CALL 488 0 0
// Skirmish_Start ;
 117: CALL 39054 0 0
// if debug then
 121: LD_EXP 1
 125: IFFALSE 134
// FogOff ( 1 ) ;
 127: LD_INT 1
 129: PPUSH
 130: CALL_OW 344
// end ;
 134: END
// export function CustomInitMacro ; var i ; begin
 135: LD_INT 0
 137: PPUSH
 138: PPUSH
// mc_parking := [ parking_arabian , parking_russian ] ;
 139: LD_ADDR_EXP 30
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: ST_TO_ADDR
// mc_scan_area := [ area_base_arabian , area_base_russian ] ;
 154: LD_ADDR_EXP 31
 158: PUSH
 159: LD_INT 3
 161: PUSH
 162: LD_INT 4
 164: PUSH
 165: EMPTY
 166: LIST
 167: LIST
 168: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 12 , 15 , 18 ] [ Difficulty ] , minefield ) ;
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 12
 174: PUSH
 175: LD_INT 15
 177: PUSH
 178: LD_INT 18
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: PUSH
 186: LD_OWVAR 67
 190: ARRAY
 191: PPUSH
 192: LD_INT 7
 194: PPUSH
 195: CALL 51088 0 3
// MC_SetDefenderList ( 1 , arabian_guard ) ;
 199: LD_INT 1
 201: PPUSH
 202: LD_EXP 5
 206: PPUSH
 207: CALL 51457 0 2
// MC_SetTame ( 1 , area_apeman_arabian ) ;
 211: LD_INT 1
 213: PPUSH
 214: LD_INT 6
 216: PPUSH
 217: CALL 51814 0 2
// MC_SetLabKind ( 2 , [ b_lab_computer , b_lab_spacetime , b_lab_weapon , b_lab_siberium ] ) ;
 221: LD_INT 2
 223: PPUSH
 224: LD_INT 12
 226: PUSH
 227: LD_INT 14
 229: PUSH
 230: LD_INT 10
 232: PUSH
 233: LD_INT 11
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PPUSH
 242: CALL 51863 0 2
// MC_SetDefenderList ( 2 , russian_guard ) ;
 246: LD_INT 2
 248: PPUSH
 249: LD_EXP 3
 253: PPUSH
 254: CALL 51457 0 2
// MC_SetTame ( 2 , area_base_russian ) ;
 258: LD_INT 2
 260: PPUSH
 261: LD_INT 4
 263: PPUSH
 264: CALL 51814 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 71 , 116 , 4 ] , [ b_armoury , 85 , 116 , 4 ] , [ b_bunker , 83 , 111 , 4 ] , [ b_bunker , 87 , 121 , 4 ] , [ b_turret , 88 , 128 , 4 ] , [ b_bunker , 59 , 89 , 3 ] , [ b_turret , 69 , 98 , 3 ] , [ b_turret , 77 , 103 , 3 ] , [ b_turret , 83 , 105 , 3 ] , [ b_turret , 71 , 125 , 5 ] ] ) ;
 268: LD_INT 2
 270: PPUSH
 271: LD_INT 6
 273: PUSH
 274: LD_INT 71
 276: PUSH
 277: LD_INT 116
 279: PUSH
 280: LD_INT 4
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: LIST
 287: LIST
 288: PUSH
 289: LD_INT 4
 291: PUSH
 292: LD_INT 85
 294: PUSH
 295: LD_INT 116
 297: PUSH
 298: LD_INT 4
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 32
 309: PUSH
 310: LD_INT 83
 312: PUSH
 313: LD_INT 111
 315: PUSH
 316: LD_INT 4
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: LIST
 323: LIST
 324: PUSH
 325: LD_INT 32
 327: PUSH
 328: LD_INT 87
 330: PUSH
 331: LD_INT 121
 333: PUSH
 334: LD_INT 4
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 33
 345: PUSH
 346: LD_INT 88
 348: PUSH
 349: LD_INT 128
 351: PUSH
 352: LD_INT 4
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 32
 363: PUSH
 364: LD_INT 59
 366: PUSH
 367: LD_INT 89
 369: PUSH
 370: LD_INT 3
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_INT 33
 381: PUSH
 382: LD_INT 69
 384: PUSH
 385: LD_INT 98
 387: PUSH
 388: LD_INT 3
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 33
 399: PUSH
 400: LD_INT 77
 402: PUSH
 403: LD_INT 103
 405: PUSH
 406: LD_INT 3
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 33
 417: PUSH
 418: LD_INT 83
 420: PUSH
 421: LD_INT 105
 423: PUSH
 424: LD_INT 3
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 33
 435: PUSH
 436: LD_INT 71
 438: PUSH
 439: LD_INT 125
 441: PUSH
 442: LD_INT 5
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: LIST
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: PPUSH
 463: CALL 51298 0 2
// end ;
 467: LD_VAR 0 1
 471: RET
// export debug ; function InitVariables ; begin
 472: LD_INT 0
 474: PPUSH
// debug := true ;
 475: LD_ADDR_EXP 1
 479: PUSH
 480: LD_INT 1
 482: ST_TO_ADDR
// end ; end_of_file end_of_file
 483: LD_VAR 0 1
 487: RET
// export russian_force , russian_guard ; export function PrepareRussian ; var i , veh , tmp ; begin
 488: LD_INT 0
 490: PPUSH
 491: PPUSH
 492: PPUSH
 493: PPUSH
// uc_side := 3 ;
 494: LD_ADDR_OWVAR 20
 498: PUSH
 499: LD_INT 3
 501: ST_TO_ADDR
// uc_nation := 3 ;
 502: LD_ADDR_OWVAR 21
 506: PUSH
 507: LD_INT 3
 509: ST_TO_ADDR
// russian_force := PrepareBase ( ru_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 5000 , 1000 , 300 ] , [ 9 , 5 , 6 , 6 ] ) ;
 510: LD_ADDR_EXP 2
 514: PUSH
 515: LD_INT 47
 517: PPUSH
 518: LD_STRING 
 520: PPUSH
 521: LD_INT 7
 523: PUSH
 524: LD_INT 8
 526: PUSH
 527: LD_INT 9
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: LIST
 534: PUSH
 535: LD_OWVAR 67
 539: ARRAY
 540: PPUSH
 541: LD_INT 5000
 543: PUSH
 544: LD_INT 1000
 546: PUSH
 547: LD_INT 300
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PPUSH
 555: LD_INT 9
 557: PUSH
 558: LD_INT 5
 560: PUSH
 561: LD_INT 6
 563: PUSH
 564: LD_INT 6
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL 10838 0 5
 577: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , russian_force ) ;
 578: LD_ADDR_EXP 7
 582: PUSH
 583: LD_EXP 7
 587: PPUSH
 588: LD_INT 2
 590: PPUSH
 591: LD_EXP 2
 595: PPUSH
 596: CALL_OW 1
 600: ST_TO_ADDR
// tmp := [ ] ;
 601: LD_ADDR_VAR 0 4
 605: PUSH
 606: EMPTY
 607: ST_TO_ADDR
// for i = 1 to 4 do
 608: LD_ADDR_VAR 0 2
 612: PUSH
 613: DOUBLE
 614: LD_INT 1
 616: DEC
 617: ST_TO_ADDR
 618: LD_INT 4
 620: PUSH
 621: FOR_TO
 622: IFFALSE 715
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun ] [ i mod 4 + 1 ] , 100 ) ;
 624: LD_INT 22
 626: PPUSH
 627: LD_INT 3
 629: PPUSH
 630: LD_INT 3
 632: PPUSH
 633: LD_INT 43
 635: PUSH
 636: LD_INT 45
 638: PUSH
 639: LD_INT 45
 641: PUSH
 642: LD_INT 44
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: PUSH
 651: LD_VAR 0 2
 655: PUSH
 656: LD_INT 4
 658: MOD
 659: PUSH
 660: LD_INT 1
 662: PLUS
 663: ARRAY
 664: PPUSH
 665: LD_INT 100
 667: PPUSH
 668: CALL 7439 0 5
// veh := CreateVehicle ;
 672: LD_ADDR_VAR 0 3
 676: PUSH
 677: CALL_OW 45
 681: ST_TO_ADDR
// tmp := tmp ^ veh ;
 682: LD_ADDR_VAR 0 4
 686: PUSH
 687: LD_VAR 0 4
 691: PUSH
 692: LD_VAR 0 3
 696: ADD
 697: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_russian , false ) ;
 698: LD_VAR 0 3
 702: PPUSH
 703: LD_INT 2
 705: PPUSH
 706: LD_INT 0
 708: PPUSH
 709: CALL_OW 49
// end ;
 713: GO 621
 715: POP
 716: POP
// russian_guard := tmp ;
 717: LD_ADDR_EXP 3
 721: PUSH
 722: LD_VAR 0 4
 726: ST_TO_ADDR
// end ; end_of_file
 727: LD_VAR 0 1
 731: RET
// export arabian_force , arabian_guard ; export function PrepareArabian ; var i , veh , tmp , xy , un , un2 ; begin
 732: LD_INT 0
 734: PPUSH
 735: PPUSH
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
// uc_side := 2 ;
 741: LD_ADDR_OWVAR 20
 745: PUSH
 746: LD_INT 2
 748: ST_TO_ADDR
// uc_nation := 2 ;
 749: LD_ADDR_OWVAR 21
 753: PUSH
 754: LD_INT 2
 756: ST_TO_ADDR
// arabian_force := PrepareBase ( ar_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 5000 , 1000 , 300 ] , [ 22 , 5 , 6 , 9 ] ) ;
 757: LD_ADDR_EXP 4
 761: PUSH
 762: LD_INT 1
 764: PPUSH
 765: LD_STRING 
 767: PPUSH
 768: LD_INT 7
 770: PUSH
 771: LD_INT 8
 773: PUSH
 774: LD_INT 9
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: LIST
 781: PUSH
 782: LD_OWVAR 67
 786: ARRAY
 787: PPUSH
 788: LD_INT 5000
 790: PUSH
 791: LD_INT 1000
 793: PUSH
 794: LD_INT 300
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: LIST
 801: PPUSH
 802: LD_INT 22
 804: PUSH
 805: LD_INT 5
 807: PUSH
 808: LD_INT 6
 810: PUSH
 811: LD_INT 9
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: PPUSH
 820: CALL 10838 0 5
 824: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , arabian_force ) ;
 825: LD_ADDR_EXP 7
 829: PUSH
 830: LD_EXP 7
 834: PPUSH
 835: LD_INT 1
 837: PPUSH
 838: LD_EXP 4
 842: PPUSH
 843: CALL_OW 1
 847: ST_TO_ADDR
// tmp := [ ] ;
 848: LD_ADDR_VAR 0 4
 852: PUSH
 853: EMPTY
 854: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
 855: LD_ADDR_OWVAR 37
 859: PUSH
 860: LD_INT 14
 862: ST_TO_ADDR
// vc_engine := engine_siberite ;
 863: LD_ADDR_OWVAR 39
 867: PUSH
 868: LD_INT 3
 870: ST_TO_ADDR
// vc_control := control_manual ;
 871: LD_ADDR_OWVAR 38
 875: PUSH
 876: LD_INT 1
 878: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
 879: LD_ADDR_OWVAR 40
 883: PUSH
 884: LD_INT 31
 886: ST_TO_ADDR
// for i = 1 to 3 do
 887: LD_ADDR_VAR 0 2
 891: PUSH
 892: DOUBLE
 893: LD_INT 1
 895: DEC
 896: ST_TO_ADDR
 897: LD_INT 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 1145
// begin xy := [ [ 153 , 71 ] , [ 155 , 81 ] ] [ i mod 2 + 1 ] ;
 903: LD_ADDR_VAR 0 5
 907: PUSH
 908: LD_INT 153
 910: PUSH
 911: LD_INT 71
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PUSH
 918: LD_INT 155
 920: PUSH
 921: LD_INT 81
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: LD_VAR 0 2
 936: PUSH
 937: LD_INT 2
 939: MOD
 940: PUSH
 941: LD_INT 1
 943: PLUS
 944: ARRAY
 945: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
 946: LD_INT 0
 948: PPUSH
 949: LD_INT 3
 951: PPUSH
 952: LD_INT 7
 954: PUSH
 955: LD_INT 8
 957: PUSH
 958: LD_INT 9
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_OWVAR 67
 970: ARRAY
 971: PPUSH
 972: CALL_OW 380
// un := CreateVehicle ;
 976: LD_ADDR_VAR 0 6
 980: PUSH
 981: CALL_OW 45
 985: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 986: LD_VAR 0 6
 990: PPUSH
 991: LD_INT 0
 993: PPUSH
 994: LD_INT 5
 996: PPUSH
 997: CALL_OW 12
1001: PPUSH
1002: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
1006: LD_VAR 0 6
1010: PPUSH
1011: LD_VAR 0 5
1015: PUSH
1016: LD_INT 1
1018: ARRAY
1019: PPUSH
1020: LD_VAR 0 5
1024: PUSH
1025: LD_INT 2
1027: ARRAY
1028: PPUSH
1029: LD_INT 6
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: CALL_OW 50
// un2 := CreateHuman ;
1039: LD_ADDR_VAR 0 7
1043: PUSH
1044: CALL_OW 44
1048: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
1049: LD_VAR 0 7
1053: PPUSH
1054: LD_VAR 0 6
1058: PPUSH
1059: CALL_OW 52
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un ) ;
1063: LD_ADDR_EXP 7
1067: PUSH
1068: LD_EXP 7
1072: PPUSH
1073: LD_INT 1
1075: PUSH
1076: LD_EXP 7
1080: PUSH
1081: LD_INT 1
1083: ARRAY
1084: PUSH
1085: LD_INT 1
1087: PLUS
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PPUSH
1093: LD_VAR 0 6
1097: PPUSH
1098: CALL 7996 0 3
1102: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un2 ) ;
1103: LD_ADDR_EXP 7
1107: PUSH
1108: LD_EXP 7
1112: PPUSH
1113: LD_INT 1
1115: PUSH
1116: LD_EXP 7
1120: PUSH
1121: LD_INT 1
1123: ARRAY
1124: PUSH
1125: LD_INT 1
1127: PLUS
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PPUSH
1133: LD_VAR 0 7
1137: PPUSH
1138: CALL 7996 0 3
1142: ST_TO_ADDR
// end ;
1143: GO 900
1145: POP
1146: POP
// for i = 1 to 5 do
1147: LD_ADDR_VAR 0 2
1151: PUSH
1152: DOUBLE
1153: LD_INT 1
1155: DEC
1156: ST_TO_ADDR
1157: LD_INT 5
1159: PUSH
1160: FOR_TO
1161: IFFALSE 1254
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gatling_gun , ar_rocket_launcher , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] , 100 ) ;
1163: LD_INT 14
1165: PPUSH
1166: LD_INT 3
1168: PPUSH
1169: LD_INT 1
1171: PPUSH
1172: LD_INT 25
1174: PUSH
1175: LD_INT 28
1177: PUSH
1178: LD_INT 28
1180: PUSH
1181: LD_INT 27
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: PUSH
1190: LD_VAR 0 2
1194: PUSH
1195: LD_INT 4
1197: MOD
1198: PUSH
1199: LD_INT 1
1201: PLUS
1202: ARRAY
1203: PPUSH
1204: LD_INT 100
1206: PPUSH
1207: CALL 7439 0 5
// veh := CreateVehicle ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: CALL_OW 45
1220: ST_TO_ADDR
// tmp := tmp ^ veh ;
1221: LD_ADDR_VAR 0 4
1225: PUSH
1226: LD_VAR 0 4
1230: PUSH
1231: LD_VAR 0 3
1235: ADD
1236: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_arabian , false ) ;
1237: LD_VAR 0 3
1241: PPUSH
1242: LD_INT 1
1244: PPUSH
1245: LD_INT 0
1247: PPUSH
1248: CALL_OW 49
// end ;
1252: GO 1160
1254: POP
1255: POP
// arabian_guard := tmp ;
1256: LD_ADDR_EXP 5
1260: PUSH
1261: LD_VAR 0 4
1265: ST_TO_ADDR
// end ; end_of_file end_of_file
1266: LD_VAR 0 1
1270: RET
// on UnitDestroyed ( un ) do var i , side ;
1271: LD_INT 0
1273: PPUSH
1274: PPUSH
// begin MCE_UnitDestroyed ( un ) ;
1275: LD_VAR 0 1
1279: PPUSH
1280: CALL 53491 0 1
// end ;
1284: PPOPN 3
1286: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
1287: LD_VAR 0 1
1291: PPUSH
1292: LD_VAR 0 2
1296: PPUSH
1297: CALL 55358 0 2
// end ;
1301: PPOPN 2
1303: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
1304: LD_VAR 0 1
1308: PPUSH
1309: CALL 54440 0 1
// end ;
1313: PPOPN 1
1315: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
1316: LD_VAR 0 1
1320: PPUSH
1321: CALL 54674 0 1
// end ;
1325: PPOPN 1
1327: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
1328: LD_VAR 0 1
1332: PPUSH
1333: LD_VAR 0 2
1337: PPUSH
1338: CALL 53167 0 2
// end ;
1342: PPOPN 2
1344: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
1345: LD_VAR 0 1
1349: PPUSH
1350: LD_VAR 0 2
1354: PPUSH
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_VAR 0 4
1364: PPUSH
1365: LD_VAR 0 5
1369: PPUSH
1370: CALL 52933 0 5
// end ;
1374: PPOPN 5
1376: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
1377: LD_VAR 0 1
1381: PPUSH
1382: LD_VAR 0 2
1386: PPUSH
1387: CALL 52621 0 2
// end ;
1391: PPOPN 2
1393: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
1394: LD_VAR 0 1
1398: PPUSH
1399: LD_VAR 0 2
1403: PPUSH
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_VAR 0 4
1413: PPUSH
1414: CALL 52466 0 4
// end ;
1418: PPOPN 4
1420: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
1421: LD_VAR 0 1
1425: PPUSH
1426: LD_VAR 0 2
1430: PPUSH
1431: LD_VAR 0 3
1435: PPUSH
1436: CALL 52248 0 3
// end ;
1440: PPOPN 3
1442: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
1443: LD_VAR 0 1
1447: PPUSH
1448: LD_VAR 0 2
1452: PPUSH
1453: CALL 52140 0 2
// end ;
1457: PPOPN 2
1459: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
1460: LD_VAR 0 1
1464: PPUSH
1465: LD_VAR 0 2
1469: PPUSH
1470: CALL 55612 0 2
// end ;
1474: PPOPN 2
1476: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
1477: LD_VAR 0 1
1481: PPUSH
1482: LD_VAR 0 2
1486: PPUSH
1487: LD_VAR 0 3
1491: PPUSH
1492: LD_VAR 0 4
1496: PPUSH
1497: CALL 55821 0 4
// end ;
1501: PPOPN 4
1503: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
1504: LD_VAR 0 1
1508: PPUSH
1509: LD_VAR 0 2
1513: PPUSH
1514: CALL 51956 0 2
// end ; end_of_file
1518: PPOPN 2
1520: END
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1521: LD_INT 0
1523: PPUSH
1524: PPUSH
// if not side or not nation then
1525: LD_VAR 0 1
1529: NOT
1530: PUSH
1531: LD_VAR 0 2
1535: NOT
1536: OR
1537: IFFALSE 1541
// exit ;
1539: GO 2153
// case nation of nation_american :
1541: LD_VAR 0 2
1545: PUSH
1546: LD_INT 1
1548: DOUBLE
1549: EQUAL
1550: IFTRUE 1554
1552: GO 1712
1554: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
1555: LD_ADDR_VAR 0 4
1559: PUSH
1560: LD_INT 35
1562: PUSH
1563: LD_INT 45
1565: PUSH
1566: LD_INT 46
1568: PUSH
1569: LD_INT 47
1571: PUSH
1572: LD_INT 1
1574: PUSH
1575: LD_INT 2
1577: PUSH
1578: LD_INT 6
1580: PUSH
1581: LD_INT 15
1583: PUSH
1584: LD_INT 16
1586: PUSH
1587: LD_INT 7
1589: PUSH
1590: LD_INT 12
1592: PUSH
1593: LD_INT 13
1595: PUSH
1596: LD_INT 10
1598: PUSH
1599: LD_INT 14
1601: PUSH
1602: LD_INT 20
1604: PUSH
1605: LD_INT 25
1607: PUSH
1608: LD_INT 36
1610: PUSH
1611: LD_INT 69
1613: PUSH
1614: LD_INT 39
1616: PUSH
1617: LD_INT 34
1619: PUSH
1620: LD_INT 40
1622: PUSH
1623: LD_INT 48
1625: PUSH
1626: LD_INT 49
1628: PUSH
1629: LD_INT 50
1631: PUSH
1632: LD_INT 51
1634: PUSH
1635: LD_INT 52
1637: PUSH
1638: LD_INT 53
1640: PUSH
1641: LD_INT 54
1643: PUSH
1644: LD_INT 55
1646: PUSH
1647: LD_INT 56
1649: PUSH
1650: LD_INT 57
1652: PUSH
1653: LD_INT 58
1655: PUSH
1656: LD_INT 59
1658: PUSH
1659: LD_INT 60
1661: PUSH
1662: LD_INT 61
1664: PUSH
1665: LD_INT 62
1667: PUSH
1668: LD_INT 80
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: ST_TO_ADDR
1710: GO 2077
1712: LD_INT 2
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1890
1720: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
1721: LD_ADDR_VAR 0 4
1725: PUSH
1726: LD_INT 35
1728: PUSH
1729: LD_INT 45
1731: PUSH
1732: LD_INT 46
1734: PUSH
1735: LD_INT 47
1737: PUSH
1738: LD_INT 70
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: LD_INT 11
1746: PUSH
1747: LD_INT 3
1749: PUSH
1750: LD_INT 4
1752: PUSH
1753: LD_INT 5
1755: PUSH
1756: LD_INT 6
1758: PUSH
1759: LD_INT 15
1761: PUSH
1762: LD_INT 18
1764: PUSH
1765: LD_INT 7
1767: PUSH
1768: LD_INT 17
1770: PUSH
1771: LD_INT 8
1773: PUSH
1774: LD_INT 20
1776: PUSH
1777: LD_INT 72
1779: PUSH
1780: LD_INT 26
1782: PUSH
1783: LD_INT 69
1785: PUSH
1786: LD_INT 39
1788: PUSH
1789: LD_INT 40
1791: PUSH
1792: LD_INT 41
1794: PUSH
1795: LD_INT 42
1797: PUSH
1798: LD_INT 43
1800: PUSH
1801: LD_INT 48
1803: PUSH
1804: LD_INT 49
1806: PUSH
1807: LD_INT 50
1809: PUSH
1810: LD_INT 51
1812: PUSH
1813: LD_INT 52
1815: PUSH
1816: LD_INT 53
1818: PUSH
1819: LD_INT 54
1821: PUSH
1822: LD_INT 55
1824: PUSH
1825: LD_INT 56
1827: PUSH
1828: LD_INT 60
1830: PUSH
1831: LD_INT 61
1833: PUSH
1834: LD_INT 62
1836: PUSH
1837: LD_INT 66
1839: PUSH
1840: LD_INT 67
1842: PUSH
1843: LD_INT 68
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: ST_TO_ADDR
1888: GO 2077
1890: LD_INT 3
1892: DOUBLE
1893: EQUAL
1894: IFTRUE 1898
1896: GO 2076
1898: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_INT 46
1906: PUSH
1907: LD_INT 47
1909: PUSH
1910: LD_INT 1
1912: PUSH
1913: LD_INT 2
1915: PUSH
1916: LD_INT 11
1918: PUSH
1919: LD_INT 9
1921: PUSH
1922: LD_INT 20
1924: PUSH
1925: LD_INT 19
1927: PUSH
1928: LD_INT 21
1930: PUSH
1931: LD_INT 24
1933: PUSH
1934: LD_INT 22
1936: PUSH
1937: LD_INT 25
1939: PUSH
1940: LD_INT 28
1942: PUSH
1943: LD_INT 29
1945: PUSH
1946: LD_INT 31
1948: PUSH
1949: LD_INT 37
1951: PUSH
1952: LD_INT 38
1954: PUSH
1955: LD_INT 32
1957: PUSH
1958: LD_INT 27
1960: PUSH
1961: LD_INT 33
1963: PUSH
1964: LD_INT 69
1966: PUSH
1967: LD_INT 39
1969: PUSH
1970: LD_INT 34
1972: PUSH
1973: LD_INT 40
1975: PUSH
1976: LD_INT 71
1978: PUSH
1979: LD_INT 23
1981: PUSH
1982: LD_INT 44
1984: PUSH
1985: LD_INT 48
1987: PUSH
1988: LD_INT 49
1990: PUSH
1991: LD_INT 50
1993: PUSH
1994: LD_INT 51
1996: PUSH
1997: LD_INT 52
1999: PUSH
2000: LD_INT 53
2002: PUSH
2003: LD_INT 54
2005: PUSH
2006: LD_INT 55
2008: PUSH
2009: LD_INT 56
2011: PUSH
2012: LD_INT 57
2014: PUSH
2015: LD_INT 58
2017: PUSH
2018: LD_INT 59
2020: PUSH
2021: LD_INT 63
2023: PUSH
2024: LD_INT 64
2026: PUSH
2027: LD_INT 65
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: ST_TO_ADDR
2074: GO 2077
2076: POP
// if state > - 1 and state < 3 then
2077: LD_VAR 0 3
2081: PUSH
2082: LD_INT 1
2084: NEG
2085: GREATER
2086: PUSH
2087: LD_VAR 0 3
2091: PUSH
2092: LD_INT 3
2094: LESS
2095: AND
2096: IFFALSE 2153
// for i in result do
2098: LD_ADDR_VAR 0 5
2102: PUSH
2103: LD_VAR 0 4
2107: PUSH
2108: FOR_IN
2109: IFFALSE 2151
// if GetTech ( i , side ) <> state then
2111: LD_VAR 0 5
2115: PPUSH
2116: LD_VAR 0 1
2120: PPUSH
2121: CALL_OW 321
2125: PUSH
2126: LD_VAR 0 3
2130: NONEQUAL
2131: IFFALSE 2149
// result := result diff i ;
2133: LD_ADDR_VAR 0 4
2137: PUSH
2138: LD_VAR 0 4
2142: PUSH
2143: LD_VAR 0 5
2147: DIFF
2148: ST_TO_ADDR
2149: GO 2108
2151: POP
2152: POP
// end ;
2153: LD_VAR 0 4
2157: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2158: LD_INT 0
2160: PPUSH
2161: PPUSH
2162: PPUSH
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
2168: PPUSH
2169: PPUSH
2170: PPUSH
2171: PPUSH
2172: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2173: LD_VAR 0 1
2177: NOT
2178: PUSH
2179: LD_VAR 0 1
2183: PPUSH
2184: CALL_OW 257
2188: PUSH
2189: LD_INT 9
2191: NONEQUAL
2192: OR
2193: IFFALSE 2197
// exit ;
2195: GO 2770
// side := GetSide ( unit ) ;
2197: LD_ADDR_VAR 0 9
2201: PUSH
2202: LD_VAR 0 1
2206: PPUSH
2207: CALL_OW 255
2211: ST_TO_ADDR
// tech_space := tech_spacanom ;
2212: LD_ADDR_VAR 0 12
2216: PUSH
2217: LD_INT 29
2219: ST_TO_ADDR
// tech_time := tech_taurad ;
2220: LD_ADDR_VAR 0 13
2224: PUSH
2225: LD_INT 28
2227: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2228: LD_ADDR_VAR 0 11
2232: PUSH
2233: LD_VAR 0 1
2237: PPUSH
2238: CALL_OW 310
2242: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2243: LD_VAR 0 11
2247: PPUSH
2248: CALL_OW 247
2252: PUSH
2253: LD_INT 2
2255: EQUAL
2256: IFFALSE 2260
// exit ;
2258: GO 2770
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2260: LD_ADDR_VAR 0 8
2264: PUSH
2265: LD_INT 81
2267: PUSH
2268: LD_VAR 0 9
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: PUSH
2277: LD_INT 3
2279: PUSH
2280: LD_INT 21
2282: PUSH
2283: LD_INT 3
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PUSH
2294: EMPTY
2295: LIST
2296: LIST
2297: PPUSH
2298: CALL_OW 69
2302: ST_TO_ADDR
// if not tmp then
2303: LD_VAR 0 8
2307: NOT
2308: IFFALSE 2312
// exit ;
2310: GO 2770
// if in_unit then
2312: LD_VAR 0 11
2316: IFFALSE 2340
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2318: LD_ADDR_VAR 0 10
2322: PUSH
2323: LD_VAR 0 8
2327: PPUSH
2328: LD_VAR 0 11
2332: PPUSH
2333: CALL_OW 74
2337: ST_TO_ADDR
2338: GO 2360
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2340: LD_ADDR_VAR 0 10
2344: PUSH
2345: LD_VAR 0 8
2349: PPUSH
2350: LD_VAR 0 1
2354: PPUSH
2355: CALL_OW 74
2359: ST_TO_ADDR
// if not enemy then
2360: LD_VAR 0 10
2364: NOT
2365: IFFALSE 2369
// exit ;
2367: GO 2770
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2369: LD_VAR 0 11
2373: PUSH
2374: LD_VAR 0 11
2378: PPUSH
2379: LD_VAR 0 10
2383: PPUSH
2384: CALL_OW 296
2388: PUSH
2389: LD_INT 13
2391: GREATER
2392: AND
2393: PUSH
2394: LD_VAR 0 1
2398: PPUSH
2399: LD_VAR 0 10
2403: PPUSH
2404: CALL_OW 296
2408: PUSH
2409: LD_INT 12
2411: GREATER
2412: OR
2413: IFFALSE 2417
// exit ;
2415: GO 2770
// missile := [ 1 ] ;
2417: LD_ADDR_VAR 0 14
2421: PUSH
2422: LD_INT 1
2424: PUSH
2425: EMPTY
2426: LIST
2427: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2428: LD_VAR 0 9
2432: PPUSH
2433: LD_VAR 0 12
2437: PPUSH
2438: CALL_OW 325
2442: IFFALSE 2471
// missile := Insert ( missile , missile + 1 , 2 ) ;
2444: LD_ADDR_VAR 0 14
2448: PUSH
2449: LD_VAR 0 14
2453: PPUSH
2454: LD_VAR 0 14
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: PPUSH
2463: LD_INT 2
2465: PPUSH
2466: CALL_OW 2
2470: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2471: LD_VAR 0 9
2475: PPUSH
2476: LD_VAR 0 13
2480: PPUSH
2481: CALL_OW 325
2485: PUSH
2486: LD_VAR 0 10
2490: PPUSH
2491: CALL_OW 255
2495: PPUSH
2496: LD_VAR 0 13
2500: PPUSH
2501: CALL_OW 325
2505: NOT
2506: AND
2507: IFFALSE 2536
// missile := Insert ( missile , missile + 1 , 3 ) ;
2509: LD_ADDR_VAR 0 14
2513: PUSH
2514: LD_VAR 0 14
2518: PPUSH
2519: LD_VAR 0 14
2523: PUSH
2524: LD_INT 1
2526: PLUS
2527: PPUSH
2528: LD_INT 3
2530: PPUSH
2531: CALL_OW 2
2535: ST_TO_ADDR
// if missile < 2 then
2536: LD_VAR 0 14
2540: PUSH
2541: LD_INT 2
2543: LESS
2544: IFFALSE 2548
// exit ;
2546: GO 2770
// x := GetX ( enemy ) ;
2548: LD_ADDR_VAR 0 4
2552: PUSH
2553: LD_VAR 0 10
2557: PPUSH
2558: CALL_OW 250
2562: ST_TO_ADDR
// y := GetY ( enemy ) ;
2563: LD_ADDR_VAR 0 5
2567: PUSH
2568: LD_VAR 0 10
2572: PPUSH
2573: CALL_OW 251
2577: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2578: LD_ADDR_VAR 0 6
2582: PUSH
2583: LD_VAR 0 4
2587: PUSH
2588: LD_INT 1
2590: NEG
2591: PPUSH
2592: LD_INT 1
2594: PPUSH
2595: CALL_OW 12
2599: PLUS
2600: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2601: LD_ADDR_VAR 0 7
2605: PUSH
2606: LD_VAR 0 5
2610: PUSH
2611: LD_INT 1
2613: NEG
2614: PPUSH
2615: LD_INT 1
2617: PPUSH
2618: CALL_OW 12
2622: PLUS
2623: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2624: LD_VAR 0 6
2628: PPUSH
2629: LD_VAR 0 7
2633: PPUSH
2634: CALL_OW 488
2638: NOT
2639: IFFALSE 2661
// begin _x := x ;
2641: LD_ADDR_VAR 0 6
2645: PUSH
2646: LD_VAR 0 4
2650: ST_TO_ADDR
// _y := y ;
2651: LD_ADDR_VAR 0 7
2655: PUSH
2656: LD_VAR 0 5
2660: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2661: LD_ADDR_VAR 0 3
2665: PUSH
2666: LD_INT 1
2668: PPUSH
2669: LD_VAR 0 14
2673: PPUSH
2674: CALL_OW 12
2678: ST_TO_ADDR
// case i of 1 :
2679: LD_VAR 0 3
2683: PUSH
2684: LD_INT 1
2686: DOUBLE
2687: EQUAL
2688: IFTRUE 2692
2690: GO 2709
2692: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2693: LD_VAR 0 1
2697: PPUSH
2698: LD_VAR 0 10
2702: PPUSH
2703: CALL_OW 115
2707: GO 2770
2709: LD_INT 2
2711: DOUBLE
2712: EQUAL
2713: IFTRUE 2717
2715: GO 2739
2717: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2718: LD_VAR 0 1
2722: PPUSH
2723: LD_VAR 0 6
2727: PPUSH
2728: LD_VAR 0 7
2732: PPUSH
2733: CALL_OW 153
2737: GO 2770
2739: LD_INT 3
2741: DOUBLE
2742: EQUAL
2743: IFTRUE 2747
2745: GO 2769
2747: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2748: LD_VAR 0 1
2752: PPUSH
2753: LD_VAR 0 6
2757: PPUSH
2758: LD_VAR 0 7
2762: PPUSH
2763: CALL_OW 154
2767: GO 2770
2769: POP
// end ;
2770: LD_VAR 0 2
2774: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2775: LD_INT 0
2777: PPUSH
2778: PPUSH
2779: PPUSH
2780: PPUSH
2781: PPUSH
2782: PPUSH
// if not unit or not building then
2783: LD_VAR 0 1
2787: NOT
2788: PUSH
2789: LD_VAR 0 2
2793: NOT
2794: OR
2795: IFFALSE 2799
// exit ;
2797: GO 2954
// x := GetX ( building ) ;
2799: LD_ADDR_VAR 0 5
2803: PUSH
2804: LD_VAR 0 2
2808: PPUSH
2809: CALL_OW 250
2813: ST_TO_ADDR
// y := GetY ( building ) ;
2814: LD_ADDR_VAR 0 6
2818: PUSH
2819: LD_VAR 0 2
2823: PPUSH
2824: CALL_OW 251
2828: ST_TO_ADDR
// for i = 0 to 5 do
2829: LD_ADDR_VAR 0 4
2833: PUSH
2834: DOUBLE
2835: LD_INT 0
2837: DEC
2838: ST_TO_ADDR
2839: LD_INT 5
2841: PUSH
2842: FOR_TO
2843: IFFALSE 2952
// begin _x := ShiftX ( x , i , 3 ) ;
2845: LD_ADDR_VAR 0 7
2849: PUSH
2850: LD_VAR 0 5
2854: PPUSH
2855: LD_VAR 0 4
2859: PPUSH
2860: LD_INT 3
2862: PPUSH
2863: CALL_OW 272
2867: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2868: LD_ADDR_VAR 0 8
2872: PUSH
2873: LD_VAR 0 6
2877: PPUSH
2878: LD_VAR 0 4
2882: PPUSH
2883: LD_INT 3
2885: PPUSH
2886: CALL_OW 273
2890: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
2891: LD_VAR 0 7
2895: PPUSH
2896: LD_VAR 0 8
2900: PPUSH
2901: CALL_OW 428
2905: PUSH
2906: LD_INT 0
2908: EQUAL
2909: PUSH
2910: LD_VAR 0 7
2914: PPUSH
2915: LD_VAR 0 8
2919: PPUSH
2920: CALL_OW 488
2924: AND
2925: IFFALSE 2950
// begin ComMoveXY ( unit , _x , _y ) ;
2927: LD_VAR 0 1
2931: PPUSH
2932: LD_VAR 0 7
2936: PPUSH
2937: LD_VAR 0 8
2941: PPUSH
2942: CALL_OW 111
// exit ;
2946: POP
2947: POP
2948: GO 2954
// end ; end ;
2950: GO 2842
2952: POP
2953: POP
// end ;
2954: LD_VAR 0 3
2958: RET
// export function ScanBase ( side , base_area ) ; begin
2959: LD_INT 0
2961: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2962: LD_ADDR_VAR 0 3
2966: PUSH
2967: LD_VAR 0 2
2971: PPUSH
2972: LD_INT 81
2974: PUSH
2975: LD_VAR 0 1
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 70
2988: ST_TO_ADDR
// end ;
2989: LD_VAR 0 3
2993: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
2994: LD_INT 0
2996: PPUSH
2997: PPUSH
2998: PPUSH
2999: PPUSH
3000: PPUSH
3001: PPUSH
3002: PPUSH
3003: PPUSH
3004: PPUSH
3005: PPUSH
3006: PPUSH
3007: PPUSH
3008: PPUSH
3009: PPUSH
3010: PPUSH
3011: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
3012: LD_ADDR_VAR 0 12
3016: PUSH
3017: LD_EXP 7
3021: PUSH
3022: LD_VAR 0 1
3026: ARRAY
3027: PPUSH
3028: LD_INT 25
3030: PUSH
3031: LD_INT 3
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PPUSH
3038: CALL_OW 72
3042: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
3043: LD_ADDR_VAR 0 8
3047: PUSH
3048: LD_EXP 7
3052: PUSH
3053: LD_VAR 0 1
3057: ARRAY
3058: PPUSH
3059: LD_INT 2
3061: PUSH
3062: LD_INT 25
3064: PUSH
3065: LD_INT 1
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PUSH
3072: LD_INT 25
3074: PUSH
3075: LD_INT 5
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 25
3084: PUSH
3085: LD_INT 8
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 25
3094: PUSH
3095: LD_INT 9
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: PPUSH
3109: CALL_OW 72
3113: ST_TO_ADDR
// if not defenders and not solds then
3114: LD_VAR 0 2
3118: NOT
3119: PUSH
3120: LD_VAR 0 8
3124: NOT
3125: AND
3126: IFFALSE 3130
// exit ;
3128: GO 4496
// depot_under_attack := false ;
3130: LD_ADDR_VAR 0 16
3134: PUSH
3135: LD_INT 0
3137: ST_TO_ADDR
// sold_defenders := [ ] ;
3138: LD_ADDR_VAR 0 17
3142: PUSH
3143: EMPTY
3144: ST_TO_ADDR
// if mechs then
3145: LD_VAR 0 12
3149: IFFALSE 3278
// for i in defenders do
3151: LD_ADDR_VAR 0 5
3155: PUSH
3156: LD_VAR 0 2
3160: PUSH
3161: FOR_IN
3162: IFFALSE 3276
// begin SetTag ( i , 20 ) ;
3164: LD_VAR 0 5
3168: PPUSH
3169: LD_INT 20
3171: PPUSH
3172: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
3176: LD_VAR 0 5
3180: PPUSH
3181: CALL_OW 263
3185: PUSH
3186: LD_INT 1
3188: EQUAL
3189: PUSH
3190: LD_VAR 0 5
3194: PPUSH
3195: CALL_OW 311
3199: NOT
3200: AND
3201: PUSH
3202: LD_VAR 0 12
3206: AND
3207: IFFALSE 3274
// begin un := mechs [ 1 ] ;
3209: LD_ADDR_VAR 0 10
3213: PUSH
3214: LD_VAR 0 12
3218: PUSH
3219: LD_INT 1
3221: ARRAY
3222: ST_TO_ADDR
// ComExitBuilding ( un ) ;
3223: LD_VAR 0 10
3227: PPUSH
3228: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
3232: LD_VAR 0 10
3236: PPUSH
3237: LD_VAR 0 5
3241: PPUSH
3242: CALL_OW 180
// SetTag ( un , 19 ) ;
3246: LD_VAR 0 10
3250: PPUSH
3251: LD_INT 19
3253: PPUSH
3254: CALL_OW 109
// mechs := mechs diff un ;
3258: LD_ADDR_VAR 0 12
3262: PUSH
3263: LD_VAR 0 12
3267: PUSH
3268: LD_VAR 0 10
3272: DIFF
3273: ST_TO_ADDR
// end ; end ;
3274: GO 3161
3276: POP
3277: POP
// if solds then
3278: LD_VAR 0 8
3282: IFFALSE 3341
// for i in solds do
3284: LD_ADDR_VAR 0 5
3288: PUSH
3289: LD_VAR 0 8
3293: PUSH
3294: FOR_IN
3295: IFFALSE 3339
// if not GetTag ( i ) then
3297: LD_VAR 0 5
3301: PPUSH
3302: CALL_OW 110
3306: NOT
3307: IFFALSE 3337
// begin defenders := defenders union i ;
3309: LD_ADDR_VAR 0 2
3313: PUSH
3314: LD_VAR 0 2
3318: PUSH
3319: LD_VAR 0 5
3323: UNION
3324: ST_TO_ADDR
// SetTag ( i , 18 ) ;
3325: LD_VAR 0 5
3329: PPUSH
3330: LD_INT 18
3332: PPUSH
3333: CALL_OW 109
// end ;
3337: GO 3294
3339: POP
3340: POP
// repeat wait ( 0 0$1 ) ;
3341: LD_INT 35
3343: PPUSH
3344: CALL_OW 67
// enemy := mc_scan [ base ] ;
3348: LD_ADDR_VAR 0 3
3352: PUSH
3353: LD_EXP 29
3357: PUSH
3358: LD_VAR 0 1
3362: ARRAY
3363: ST_TO_ADDR
// for i in defenders do
3364: LD_ADDR_VAR 0 5
3368: PUSH
3369: LD_VAR 0 2
3373: PUSH
3374: FOR_IN
3375: IFFALSE 4060
// begin e := NearestUnitToUnit ( enemy , i ) ;
3377: LD_ADDR_VAR 0 13
3381: PUSH
3382: LD_VAR 0 3
3386: PPUSH
3387: LD_VAR 0 5
3391: PPUSH
3392: CALL_OW 74
3396: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
3397: LD_ADDR_VAR 0 16
3401: PUSH
3402: LD_EXP 7
3406: PUSH
3407: LD_VAR 0 1
3411: ARRAY
3412: PPUSH
3413: LD_INT 2
3415: PUSH
3416: LD_INT 30
3418: PUSH
3419: LD_INT 0
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PUSH
3426: LD_INT 30
3428: PUSH
3429: LD_INT 1
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: LIST
3440: PPUSH
3441: CALL_OW 72
3445: NOT
3446: PUSH
3447: LD_EXP 7
3451: PUSH
3452: LD_VAR 0 1
3456: ARRAY
3457: PPUSH
3458: LD_INT 2
3460: PUSH
3461: LD_INT 30
3463: PUSH
3464: LD_INT 0
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: LD_INT 30
3473: PUSH
3474: LD_INT 1
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: PPUSH
3486: CALL_OW 72
3490: PPUSH
3491: CALL_OW 256
3495: PUSH
3496: LD_INT 600
3498: LESS
3499: OR
3500: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
3501: LD_VAR 0 5
3505: PPUSH
3506: CALL_OW 247
3510: PUSH
3511: LD_INT 2
3513: DOUBLE
3514: EQUAL
3515: IFTRUE 3519
3517: GO 3766
3519: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
3520: LD_VAR 0 5
3524: PPUSH
3525: CALL_OW 256
3529: PUSH
3530: LD_INT 650
3532: GREATER
3533: PUSH
3534: LD_VAR 0 5
3538: PPUSH
3539: LD_VAR 0 13
3543: PPUSH
3544: CALL_OW 296
3548: PUSH
3549: LD_INT 40
3551: LESS
3552: AND
3553: IFFALSE 3571
// ComAttackUnit ( i , e ) else
3555: LD_VAR 0 5
3559: PPUSH
3560: LD_VAR 0 13
3564: PPUSH
3565: CALL_OW 115
3569: GO 3649
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
3571: LD_VAR 0 5
3575: PPUSH
3576: LD_VAR 0 13
3580: PPUSH
3581: CALL_OW 296
3585: PUSH
3586: LD_INT 30
3588: GREATEREQUAL
3589: PUSH
3590: LD_VAR 0 5
3594: PPUSH
3595: CALL_OW 256
3599: PUSH
3600: LD_INT 650
3602: LESSEQUAL
3603: OR
3604: PUSH
3605: LD_VAR 0 5
3609: PPUSH
3610: LD_EXP 30
3614: PUSH
3615: LD_VAR 0 1
3619: ARRAY
3620: PPUSH
3621: CALL_OW 308
3625: NOT
3626: AND
3627: IFFALSE 3649
// ComMoveToArea ( i , mc_parking [ base ] ) ;
3629: LD_VAR 0 5
3633: PPUSH
3634: LD_EXP 30
3638: PUSH
3639: LD_VAR 0 1
3643: ARRAY
3644: PPUSH
3645: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
3649: LD_VAR 0 5
3653: PPUSH
3654: CALL_OW 256
3658: PUSH
3659: LD_INT 998
3661: LESS
3662: PUSH
3663: LD_VAR 0 5
3667: PPUSH
3668: CALL_OW 263
3672: PUSH
3673: LD_INT 1
3675: EQUAL
3676: AND
3677: PUSH
3678: LD_VAR 0 5
3682: PPUSH
3683: CALL_OW 311
3687: AND
3688: PUSH
3689: LD_VAR 0 5
3693: PPUSH
3694: LD_EXP 30
3698: PUSH
3699: LD_VAR 0 1
3703: ARRAY
3704: PPUSH
3705: CALL_OW 308
3709: AND
3710: IFFALSE 3764
// begin mech := IsDrivenBy ( i ) ;
3712: LD_ADDR_VAR 0 9
3716: PUSH
3717: LD_VAR 0 5
3721: PPUSH
3722: CALL_OW 311
3726: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
3727: LD_VAR 0 9
3731: PPUSH
3732: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
3736: LD_VAR 0 9
3740: PPUSH
3741: LD_VAR 0 5
3745: PPUSH
3746: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
3750: LD_VAR 0 9
3754: PPUSH
3755: LD_VAR 0 5
3759: PPUSH
3760: CALL_OW 180
// end ; end ; unit_human :
3764: GO 4031
3766: LD_INT 1
3768: DOUBLE
3769: EQUAL
3770: IFTRUE 3774
3772: GO 4030
3774: POP
// begin b := IsInUnit ( i ) ;
3775: LD_ADDR_VAR 0 18
3779: PUSH
3780: LD_VAR 0 5
3784: PPUSH
3785: CALL_OW 310
3789: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
3790: LD_ADDR_VAR 0 19
3794: PUSH
3795: LD_VAR 0 18
3799: NOT
3800: PUSH
3801: LD_VAR 0 18
3805: PPUSH
3806: CALL_OW 266
3810: PUSH
3811: LD_INT 32
3813: PUSH
3814: LD_INT 31
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: IN
3821: OR
3822: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
3823: LD_VAR 0 16
3827: PUSH
3828: LD_VAR 0 2
3832: PPUSH
3833: LD_INT 21
3835: PUSH
3836: LD_INT 2
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PPUSH
3843: CALL_OW 72
3847: PUSH
3848: LD_INT 1
3850: LESSEQUAL
3851: OR
3852: PUSH
3853: LD_VAR 0 19
3857: AND
3858: PUSH
3859: LD_VAR 0 5
3863: PUSH
3864: LD_VAR 0 17
3868: IN
3869: NOT
3870: AND
3871: IFFALSE 3964
// begin if b then
3873: LD_VAR 0 18
3877: IFFALSE 3926
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
3879: LD_VAR 0 18
3883: PPUSH
3884: LD_VAR 0 3
3888: PPUSH
3889: LD_VAR 0 18
3893: PPUSH
3894: CALL_OW 74
3898: PPUSH
3899: CALL_OW 296
3903: PUSH
3904: LD_INT 10
3906: LESS
3907: PUSH
3908: LD_VAR 0 18
3912: PPUSH
3913: CALL_OW 461
3917: PUSH
3918: LD_INT 7
3920: NONEQUAL
3921: AND
3922: IFFALSE 3926
// continue ;
3924: GO 3374
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
3926: LD_ADDR_VAR 0 17
3930: PUSH
3931: LD_VAR 0 17
3935: PPUSH
3936: LD_VAR 0 17
3940: PUSH
3941: LD_INT 1
3943: PLUS
3944: PPUSH
3945: LD_VAR 0 5
3949: PPUSH
3950: CALL_OW 1
3954: ST_TO_ADDR
// ComExitBuilding ( i ) ;
3955: LD_VAR 0 5
3959: PPUSH
3960: CALL_OW 122
// end ; if sold_defenders then
3964: LD_VAR 0 17
3968: IFFALSE 4028
// if i in sold_defenders then
3970: LD_VAR 0 5
3974: PUSH
3975: LD_VAR 0 17
3979: IN
3980: IFFALSE 4028
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
3982: LD_VAR 0 5
3986: PPUSH
3987: CALL_OW 314
3991: NOT
3992: PUSH
3993: LD_VAR 0 5
3997: PPUSH
3998: LD_VAR 0 13
4002: PPUSH
4003: CALL_OW 296
4007: PUSH
4008: LD_INT 30
4010: LESS
4011: AND
4012: IFFALSE 4028
// ComAttackUnit ( i , e ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_VAR 0 13
4023: PPUSH
4024: CALL_OW 115
// end ; end ; end ;
4028: GO 4031
4030: POP
// if IsDead ( i ) then
4031: LD_VAR 0 5
4035: PPUSH
4036: CALL_OW 301
4040: IFFALSE 4058
// defenders := defenders diff i ;
4042: LD_ADDR_VAR 0 2
4046: PUSH
4047: LD_VAR 0 2
4051: PUSH
4052: LD_VAR 0 5
4056: DIFF
4057: ST_TO_ADDR
// end ;
4058: GO 3374
4060: POP
4061: POP
// until not enemy or not defenders ;
4062: LD_VAR 0 3
4066: NOT
4067: PUSH
4068: LD_VAR 0 2
4072: NOT
4073: OR
4074: IFFALSE 3341
// MC_Reset ( base , 18 ) ;
4076: LD_VAR 0 1
4080: PPUSH
4081: LD_INT 18
4083: PPUSH
4084: CALL 40373 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
4088: LD_ADDR_VAR 0 2
4092: PUSH
4093: LD_VAR 0 2
4097: PUSH
4098: LD_VAR 0 2
4102: PPUSH
4103: LD_INT 2
4105: PUSH
4106: LD_INT 25
4108: PUSH
4109: LD_INT 1
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 25
4118: PUSH
4119: LD_INT 5
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: LD_INT 25
4128: PUSH
4129: LD_INT 8
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_INT 25
4138: PUSH
4139: LD_INT 9
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: PPUSH
4153: CALL_OW 72
4157: DIFF
4158: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
4159: LD_VAR 0 3
4163: NOT
4164: PUSH
4165: LD_VAR 0 2
4169: PPUSH
4170: LD_INT 21
4172: PUSH
4173: LD_INT 2
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 72
4184: AND
4185: IFFALSE 4447
// begin tmp := FilterByTag ( defenders , 19 ) ;
4187: LD_ADDR_VAR 0 11
4191: PUSH
4192: LD_VAR 0 2
4196: PPUSH
4197: LD_INT 19
4199: PPUSH
4200: CALL 38730 0 2
4204: ST_TO_ADDR
// if tmp then
4205: LD_VAR 0 11
4209: IFFALSE 4279
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
4211: LD_ADDR_VAR 0 11
4215: PUSH
4216: LD_VAR 0 11
4220: PPUSH
4221: LD_INT 25
4223: PUSH
4224: LD_INT 3
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PPUSH
4231: CALL_OW 72
4235: ST_TO_ADDR
// if tmp then
4236: LD_VAR 0 11
4240: IFFALSE 4279
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
4242: LD_ADDR_EXP 19
4246: PUSH
4247: LD_EXP 19
4251: PPUSH
4252: LD_VAR 0 1
4256: PPUSH
4257: LD_EXP 19
4261: PUSH
4262: LD_VAR 0 1
4266: ARRAY
4267: PUSH
4268: LD_VAR 0 11
4272: UNION
4273: PPUSH
4274: CALL_OW 1
4278: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
4279: LD_VAR 0 1
4283: PPUSH
4284: LD_INT 19
4286: PPUSH
4287: CALL 40373 0 2
// repeat wait ( 0 0$1 ) ;
4291: LD_INT 35
4293: PPUSH
4294: CALL_OW 67
// for i in defenders do
4298: LD_ADDR_VAR 0 5
4302: PUSH
4303: LD_VAR 0 2
4307: PUSH
4308: FOR_IN
4309: IFFALSE 4398
// begin if not IsInArea ( i , mc_parking [ base ] ) then
4311: LD_VAR 0 5
4315: PPUSH
4316: LD_EXP 30
4320: PUSH
4321: LD_VAR 0 1
4325: ARRAY
4326: PPUSH
4327: CALL_OW 308
4331: NOT
4332: IFFALSE 4356
// ComMoveToArea ( i , mc_parking [ base ] ) else
4334: LD_VAR 0 5
4338: PPUSH
4339: LD_EXP 30
4343: PUSH
4344: LD_VAR 0 1
4348: ARRAY
4349: PPUSH
4350: CALL_OW 113
4354: GO 4396
// if GetControl ( i ) = control_manual then
4356: LD_VAR 0 5
4360: PPUSH
4361: CALL_OW 263
4365: PUSH
4366: LD_INT 1
4368: EQUAL
4369: IFFALSE 4396
// if IsDrivenBy ( i ) then
4371: LD_VAR 0 5
4375: PPUSH
4376: CALL_OW 311
4380: IFFALSE 4396
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
4382: LD_VAR 0 5
4386: PPUSH
4387: CALL_OW 311
4391: PPUSH
4392: CALL_OW 121
// end ;
4396: GO 4308
4398: POP
4399: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
4400: LD_VAR 0 2
4404: PPUSH
4405: LD_INT 95
4407: PUSH
4408: LD_EXP 30
4412: PUSH
4413: LD_VAR 0 1
4417: ARRAY
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 72
4427: PUSH
4428: LD_VAR 0 2
4432: EQUAL
4433: PUSH
4434: LD_EXP 29
4438: PUSH
4439: LD_VAR 0 1
4443: ARRAY
4444: OR
4445: IFFALSE 4291
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
4447: LD_ADDR_EXP 28
4451: PUSH
4452: LD_EXP 28
4456: PPUSH
4457: LD_VAR 0 1
4461: PPUSH
4462: LD_EXP 28
4466: PUSH
4467: LD_VAR 0 1
4471: ARRAY
4472: PUSH
4473: LD_VAR 0 2
4477: UNION
4478: PPUSH
4479: CALL_OW 1
4483: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_INT 20
4491: PPUSH
4492: CALL 40373 0 2
// end ;
4496: LD_VAR 0 4
4500: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4501: LD_INT 0
4503: PPUSH
4504: PPUSH
4505: PPUSH
4506: PPUSH
// result := false ;
4507: LD_ADDR_VAR 0 2
4511: PUSH
4512: LD_INT 0
4514: ST_TO_ADDR
// side := GetSide ( unit ) ;
4515: LD_ADDR_VAR 0 3
4519: PUSH
4520: LD_VAR 0 1
4524: PPUSH
4525: CALL_OW 255
4529: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4530: LD_ADDR_VAR 0 4
4534: PUSH
4535: LD_VAR 0 1
4539: PPUSH
4540: CALL_OW 248
4544: ST_TO_ADDR
// case nat of 1 :
4545: LD_VAR 0 4
4549: PUSH
4550: LD_INT 1
4552: DOUBLE
4553: EQUAL
4554: IFTRUE 4558
4556: GO 4569
4558: POP
// tech := tech_lassight ; 2 :
4559: LD_ADDR_VAR 0 5
4563: PUSH
4564: LD_INT 12
4566: ST_TO_ADDR
4567: GO 4608
4569: LD_INT 2
4571: DOUBLE
4572: EQUAL
4573: IFTRUE 4577
4575: GO 4588
4577: POP
// tech := tech_mortar ; 3 :
4578: LD_ADDR_VAR 0 5
4582: PUSH
4583: LD_INT 41
4585: ST_TO_ADDR
4586: GO 4608
4588: LD_INT 3
4590: DOUBLE
4591: EQUAL
4592: IFTRUE 4596
4594: GO 4607
4596: POP
// tech := tech_bazooka ; end ;
4597: LD_ADDR_VAR 0 5
4601: PUSH
4602: LD_INT 44
4604: ST_TO_ADDR
4605: GO 4608
4607: POP
// if Researched ( side , tech ) then
4608: LD_VAR 0 3
4612: PPUSH
4613: LD_VAR 0 5
4617: PPUSH
4618: CALL_OW 325
4622: IFFALSE 4649
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4624: LD_ADDR_VAR 0 2
4628: PUSH
4629: LD_INT 5
4631: PUSH
4632: LD_INT 8
4634: PUSH
4635: LD_INT 9
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: LIST
4642: PUSH
4643: LD_VAR 0 4
4647: ARRAY
4648: ST_TO_ADDR
// end ;
4649: LD_VAR 0 2
4653: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4654: LD_INT 0
4656: PPUSH
4657: PPUSH
4658: PPUSH
// if not mines then
4659: LD_VAR 0 2
4663: NOT
4664: IFFALSE 4668
// exit ;
4666: GO 4812
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4668: LD_ADDR_VAR 0 5
4672: PUSH
4673: LD_INT 81
4675: PUSH
4676: LD_VAR 0 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 3
4687: PUSH
4688: LD_INT 21
4690: PUSH
4691: LD_INT 3
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: PPUSH
4706: CALL_OW 69
4710: ST_TO_ADDR
// for i in mines do
4711: LD_ADDR_VAR 0 4
4715: PUSH
4716: LD_VAR 0 2
4720: PUSH
4721: FOR_IN
4722: IFFALSE 4810
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4724: LD_VAR 0 4
4728: PUSH
4729: LD_INT 1
4731: ARRAY
4732: PPUSH
4733: LD_VAR 0 4
4737: PUSH
4738: LD_INT 2
4740: ARRAY
4741: PPUSH
4742: CALL_OW 458
4746: NOT
4747: IFFALSE 4751
// continue ;
4749: GO 4721
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4751: LD_VAR 0 4
4755: PUSH
4756: LD_INT 1
4758: ARRAY
4759: PPUSH
4760: LD_VAR 0 4
4764: PUSH
4765: LD_INT 2
4767: ARRAY
4768: PPUSH
4769: CALL_OW 428
4773: PUSH
4774: LD_VAR 0 5
4778: IN
4779: IFFALSE 4808
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4781: LD_VAR 0 4
4785: PUSH
4786: LD_INT 1
4788: ARRAY
4789: PPUSH
4790: LD_VAR 0 4
4794: PUSH
4795: LD_INT 2
4797: ARRAY
4798: PPUSH
4799: LD_VAR 0 1
4803: PPUSH
4804: CALL_OW 456
// end ;
4808: GO 4721
4810: POP
4811: POP
// end ;
4812: LD_VAR 0 3
4816: RET
// export function Count ( array ) ; var i ; begin
4817: LD_INT 0
4819: PPUSH
4820: PPUSH
// result := 0 ;
4821: LD_ADDR_VAR 0 2
4825: PUSH
4826: LD_INT 0
4828: ST_TO_ADDR
// for i in array do
4829: LD_ADDR_VAR 0 3
4833: PUSH
4834: LD_VAR 0 1
4838: PUSH
4839: FOR_IN
4840: IFFALSE 4864
// if i then
4842: LD_VAR 0 3
4846: IFFALSE 4862
// result := result + 1 ;
4848: LD_ADDR_VAR 0 2
4852: PUSH
4853: LD_VAR 0 2
4857: PUSH
4858: LD_INT 1
4860: PLUS
4861: ST_TO_ADDR
4862: GO 4839
4864: POP
4865: POP
// end ;
4866: LD_VAR 0 2
4870: RET
// export function IsEmpty ( building ) ; begin
4871: LD_INT 0
4873: PPUSH
// if not building then
4874: LD_VAR 0 1
4878: NOT
4879: IFFALSE 4883
// exit ;
4881: GO 4926
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4883: LD_ADDR_VAR 0 2
4887: PUSH
4888: LD_VAR 0 1
4892: PUSH
4893: LD_INT 22
4895: PUSH
4896: LD_VAR 0 1
4900: PPUSH
4901: CALL_OW 255
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 58
4912: PUSH
4913: EMPTY
4914: LIST
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PPUSH
4920: CALL_OW 69
4924: IN
4925: ST_TO_ADDR
// end ;
4926: LD_VAR 0 2
4930: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4931: LD_INT 0
4933: PPUSH
4934: PPUSH
4935: PPUSH
4936: PPUSH
// tmp := [ ] ;
4937: LD_ADDR_VAR 0 3
4941: PUSH
4942: EMPTY
4943: ST_TO_ADDR
// list := [ ] ;
4944: LD_ADDR_VAR 0 5
4948: PUSH
4949: EMPTY
4950: ST_TO_ADDR
// for i = 16 to 25 do
4951: LD_ADDR_VAR 0 4
4955: PUSH
4956: DOUBLE
4957: LD_INT 16
4959: DEC
4960: ST_TO_ADDR
4961: LD_INT 25
4963: PUSH
4964: FOR_TO
4965: IFFALSE 5038
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4967: LD_ADDR_VAR 0 3
4971: PUSH
4972: LD_VAR 0 3
4976: PUSH
4977: LD_INT 22
4979: PUSH
4980: LD_VAR 0 1
4984: PPUSH
4985: CALL_OW 255
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: PUSH
4994: LD_INT 91
4996: PUSH
4997: LD_VAR 0 1
5001: PUSH
5002: LD_INT 6
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: LIST
5009: PUSH
5010: LD_INT 30
5012: PUSH
5013: LD_VAR 0 4
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: PPUSH
5030: CALL_OW 69
5034: ADD
5035: ST_TO_ADDR
5036: GO 4964
5038: POP
5039: POP
// for i = 1 to tmp do
5040: LD_ADDR_VAR 0 4
5044: PUSH
5045: DOUBLE
5046: LD_INT 1
5048: DEC
5049: ST_TO_ADDR
5050: LD_VAR 0 3
5054: PUSH
5055: FOR_TO
5056: IFFALSE 5144
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5058: LD_ADDR_VAR 0 5
5062: PUSH
5063: LD_VAR 0 5
5067: PUSH
5068: LD_VAR 0 3
5072: PUSH
5073: LD_VAR 0 4
5077: ARRAY
5078: PPUSH
5079: CALL_OW 266
5083: PUSH
5084: LD_VAR 0 3
5088: PUSH
5089: LD_VAR 0 4
5093: ARRAY
5094: PPUSH
5095: CALL_OW 250
5099: PUSH
5100: LD_VAR 0 3
5104: PUSH
5105: LD_VAR 0 4
5109: ARRAY
5110: PPUSH
5111: CALL_OW 251
5115: PUSH
5116: LD_VAR 0 3
5120: PUSH
5121: LD_VAR 0 4
5125: ARRAY
5126: PPUSH
5127: CALL_OW 254
5131: PUSH
5132: EMPTY
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: PUSH
5138: EMPTY
5139: LIST
5140: ADD
5141: ST_TO_ADDR
5142: GO 5055
5144: POP
5145: POP
// result := list ;
5146: LD_ADDR_VAR 0 2
5150: PUSH
5151: LD_VAR 0 5
5155: ST_TO_ADDR
// end ;
5156: LD_VAR 0 2
5160: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5161: LD_INT 0
5163: PPUSH
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
5168: PPUSH
5169: PPUSH
// if not factory then
5170: LD_VAR 0 1
5174: NOT
5175: IFFALSE 5179
// exit ;
5177: GO 5704
// if control = control_apeman then
5179: LD_VAR 0 4
5183: PUSH
5184: LD_INT 5
5186: EQUAL
5187: IFFALSE 5296
// begin tmp := UnitsInside ( factory ) ;
5189: LD_ADDR_VAR 0 8
5193: PUSH
5194: LD_VAR 0 1
5198: PPUSH
5199: CALL_OW 313
5203: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5204: LD_VAR 0 8
5208: PPUSH
5209: LD_INT 25
5211: PUSH
5212: LD_INT 12
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PPUSH
5219: CALL_OW 72
5223: NOT
5224: IFFALSE 5234
// control := control_manual ;
5226: LD_ADDR_VAR 0 4
5230: PUSH
5231: LD_INT 1
5233: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5234: LD_ADDR_VAR 0 8
5238: PUSH
5239: LD_VAR 0 1
5243: PPUSH
5244: CALL 4931 0 1
5248: ST_TO_ADDR
// if tmp then
5249: LD_VAR 0 8
5253: IFFALSE 5296
// begin for i in tmp do
5255: LD_ADDR_VAR 0 7
5259: PUSH
5260: LD_VAR 0 8
5264: PUSH
5265: FOR_IN
5266: IFFALSE 5294
// if i [ 1 ] = b_ext_radar then
5268: LD_VAR 0 7
5272: PUSH
5273: LD_INT 1
5275: ARRAY
5276: PUSH
5277: LD_INT 20
5279: EQUAL
5280: IFFALSE 5292
// begin control := control_remote ;
5282: LD_ADDR_VAR 0 4
5286: PUSH
5287: LD_INT 2
5289: ST_TO_ADDR
// break ;
5290: GO 5294
// end ;
5292: GO 5265
5294: POP
5295: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5296: LD_VAR 0 1
5300: PPUSH
5301: LD_VAR 0 2
5305: PPUSH
5306: LD_VAR 0 3
5310: PPUSH
5311: LD_VAR 0 4
5315: PPUSH
5316: LD_VAR 0 5
5320: PPUSH
5321: CALL_OW 448
5325: IFFALSE 5360
// begin result := [ chassis , engine , control , weapon ] ;
5327: LD_ADDR_VAR 0 6
5331: PUSH
5332: LD_VAR 0 2
5336: PUSH
5337: LD_VAR 0 3
5341: PUSH
5342: LD_VAR 0 4
5346: PUSH
5347: LD_VAR 0 5
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: LIST
5356: LIST
5357: ST_TO_ADDR
// exit ;
5358: GO 5704
// end ; _chassis := AvailableChassisList ( factory ) ;
5360: LD_ADDR_VAR 0 9
5364: PUSH
5365: LD_VAR 0 1
5369: PPUSH
5370: CALL_OW 475
5374: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5375: LD_ADDR_VAR 0 11
5379: PUSH
5380: LD_VAR 0 1
5384: PPUSH
5385: CALL_OW 476
5389: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5390: LD_ADDR_VAR 0 12
5394: PUSH
5395: LD_VAR 0 1
5399: PPUSH
5400: CALL_OW 477
5404: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5405: LD_ADDR_VAR 0 10
5409: PUSH
5410: LD_VAR 0 1
5414: PPUSH
5415: CALL_OW 478
5419: ST_TO_ADDR
// if not chassis in _chassis then
5420: LD_VAR 0 2
5424: PUSH
5425: LD_VAR 0 9
5429: IN
5430: NOT
5431: IFFALSE 5457
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5433: LD_ADDR_VAR 0 2
5437: PUSH
5438: LD_VAR 0 9
5442: PUSH
5443: LD_INT 1
5445: PPUSH
5446: LD_VAR 0 9
5450: PPUSH
5451: CALL_OW 12
5455: ARRAY
5456: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5457: LD_VAR 0 2
5461: PPUSH
5462: LD_VAR 0 3
5466: PPUSH
5467: CALL 5709 0 2
5471: NOT
5472: IFFALSE 5531
// repeat engine := _engine [ 1 ] ;
5474: LD_ADDR_VAR 0 3
5478: PUSH
5479: LD_VAR 0 11
5483: PUSH
5484: LD_INT 1
5486: ARRAY
5487: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5488: LD_ADDR_VAR 0 11
5492: PUSH
5493: LD_VAR 0 11
5497: PPUSH
5498: LD_INT 1
5500: PPUSH
5501: CALL_OW 3
5505: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5506: LD_VAR 0 2
5510: PPUSH
5511: LD_VAR 0 3
5515: PPUSH
5516: CALL 5709 0 2
5520: PUSH
5521: LD_VAR 0 11
5525: PUSH
5526: EMPTY
5527: EQUAL
5528: OR
5529: IFFALSE 5474
// if not control in _control then
5531: LD_VAR 0 4
5535: PUSH
5536: LD_VAR 0 12
5540: IN
5541: NOT
5542: IFFALSE 5568
// control := _control [ rand ( 1 , _control ) ] ;
5544: LD_ADDR_VAR 0 4
5548: PUSH
5549: LD_VAR 0 12
5553: PUSH
5554: LD_INT 1
5556: PPUSH
5557: LD_VAR 0 12
5561: PPUSH
5562: CALL_OW 12
5566: ARRAY
5567: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5568: LD_VAR 0 2
5572: PPUSH
5573: LD_VAR 0 5
5577: PPUSH
5578: CALL 5929 0 2
5582: NOT
5583: IFFALSE 5642
// repeat weapon := _weapon [ 1 ] ;
5585: LD_ADDR_VAR 0 5
5589: PUSH
5590: LD_VAR 0 10
5594: PUSH
5595: LD_INT 1
5597: ARRAY
5598: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5599: LD_ADDR_VAR 0 10
5603: PUSH
5604: LD_VAR 0 10
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: CALL_OW 3
5616: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5617: LD_VAR 0 2
5621: PPUSH
5622: LD_VAR 0 5
5626: PPUSH
5627: CALL 5929 0 2
5631: PUSH
5632: LD_VAR 0 10
5636: PUSH
5637: EMPTY
5638: EQUAL
5639: OR
5640: IFFALSE 5585
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5642: LD_VAR 0 1
5646: PPUSH
5647: LD_VAR 0 2
5651: PPUSH
5652: LD_VAR 0 3
5656: PPUSH
5657: LD_VAR 0 4
5661: PPUSH
5662: LD_VAR 0 5
5666: PPUSH
5667: CALL_OW 448
5671: IFFALSE 5704
// result := [ chassis , engine , control , weapon ] ;
5673: LD_ADDR_VAR 0 6
5677: PUSH
5678: LD_VAR 0 2
5682: PUSH
5683: LD_VAR 0 3
5687: PUSH
5688: LD_VAR 0 4
5692: PUSH
5693: LD_VAR 0 5
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: ST_TO_ADDR
// end ;
5704: LD_VAR 0 6
5708: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5709: LD_INT 0
5711: PPUSH
// if not chassis or not engine then
5712: LD_VAR 0 1
5716: NOT
5717: PUSH
5718: LD_VAR 0 2
5722: NOT
5723: OR
5724: IFFALSE 5728
// exit ;
5726: GO 5924
// case engine of engine_solar :
5728: LD_VAR 0 2
5732: PUSH
5733: LD_INT 2
5735: DOUBLE
5736: EQUAL
5737: IFTRUE 5741
5739: GO 5779
5741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5742: LD_ADDR_VAR 0 3
5746: PUSH
5747: LD_INT 11
5749: PUSH
5750: LD_INT 12
5752: PUSH
5753: LD_INT 13
5755: PUSH
5756: LD_INT 14
5758: PUSH
5759: LD_INT 1
5761: PUSH
5762: LD_INT 2
5764: PUSH
5765: LD_INT 3
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: ST_TO_ADDR
5777: GO 5908
5779: LD_INT 1
5781: DOUBLE
5782: EQUAL
5783: IFTRUE 5787
5785: GO 5849
5787: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5788: LD_ADDR_VAR 0 3
5792: PUSH
5793: LD_INT 11
5795: PUSH
5796: LD_INT 12
5798: PUSH
5799: LD_INT 13
5801: PUSH
5802: LD_INT 14
5804: PUSH
5805: LD_INT 1
5807: PUSH
5808: LD_INT 2
5810: PUSH
5811: LD_INT 3
5813: PUSH
5814: LD_INT 4
5816: PUSH
5817: LD_INT 5
5819: PUSH
5820: LD_INT 21
5822: PUSH
5823: LD_INT 23
5825: PUSH
5826: LD_INT 22
5828: PUSH
5829: LD_INT 24
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: ST_TO_ADDR
5847: GO 5908
5849: LD_INT 3
5851: DOUBLE
5852: EQUAL
5853: IFTRUE 5857
5855: GO 5907
5857: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5858: LD_ADDR_VAR 0 3
5862: PUSH
5863: LD_INT 13
5865: PUSH
5866: LD_INT 14
5868: PUSH
5869: LD_INT 2
5871: PUSH
5872: LD_INT 3
5874: PUSH
5875: LD_INT 4
5877: PUSH
5878: LD_INT 5
5880: PUSH
5881: LD_INT 21
5883: PUSH
5884: LD_INT 22
5886: PUSH
5887: LD_INT 23
5889: PUSH
5890: LD_INT 24
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: ST_TO_ADDR
5905: GO 5908
5907: POP
// result := ( chassis in result ) ;
5908: LD_ADDR_VAR 0 3
5912: PUSH
5913: LD_VAR 0 1
5917: PUSH
5918: LD_VAR 0 3
5922: IN
5923: ST_TO_ADDR
// end ;
5924: LD_VAR 0 3
5928: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5929: LD_INT 0
5931: PPUSH
// if not chassis or not weapon then
5932: LD_VAR 0 1
5936: NOT
5937: PUSH
5938: LD_VAR 0 2
5942: NOT
5943: OR
5944: IFFALSE 5948
// exit ;
5946: GO 6974
// case weapon of us_machine_gun :
5948: LD_VAR 0 2
5952: PUSH
5953: LD_INT 2
5955: DOUBLE
5956: EQUAL
5957: IFTRUE 5961
5959: GO 5991
5961: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5962: LD_ADDR_VAR 0 3
5966: PUSH
5967: LD_INT 1
5969: PUSH
5970: LD_INT 2
5972: PUSH
5973: LD_INT 3
5975: PUSH
5976: LD_INT 4
5978: PUSH
5979: LD_INT 5
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: ST_TO_ADDR
5989: GO 6958
5991: LD_INT 3
5993: DOUBLE
5994: EQUAL
5995: IFTRUE 5999
5997: GO 6029
5999: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6000: LD_ADDR_VAR 0 3
6004: PUSH
6005: LD_INT 1
6007: PUSH
6008: LD_INT 2
6010: PUSH
6011: LD_INT 3
6013: PUSH
6014: LD_INT 4
6016: PUSH
6017: LD_INT 5
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: ST_TO_ADDR
6027: GO 6958
6029: LD_INT 11
6031: DOUBLE
6032: EQUAL
6033: IFTRUE 6037
6035: GO 6067
6037: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6038: LD_ADDR_VAR 0 3
6042: PUSH
6043: LD_INT 1
6045: PUSH
6046: LD_INT 2
6048: PUSH
6049: LD_INT 3
6051: PUSH
6052: LD_INT 4
6054: PUSH
6055: LD_INT 5
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: ST_TO_ADDR
6065: GO 6958
6067: LD_INT 4
6069: DOUBLE
6070: EQUAL
6071: IFTRUE 6075
6073: GO 6101
6075: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6076: LD_ADDR_VAR 0 3
6080: PUSH
6081: LD_INT 2
6083: PUSH
6084: LD_INT 3
6086: PUSH
6087: LD_INT 4
6089: PUSH
6090: LD_INT 5
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: ST_TO_ADDR
6099: GO 6958
6101: LD_INT 5
6103: DOUBLE
6104: EQUAL
6105: IFTRUE 6109
6107: GO 6135
6109: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6110: LD_ADDR_VAR 0 3
6114: PUSH
6115: LD_INT 2
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 4
6123: PUSH
6124: LD_INT 5
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: ST_TO_ADDR
6133: GO 6958
6135: LD_INT 9
6137: DOUBLE
6138: EQUAL
6139: IFTRUE 6143
6141: GO 6169
6143: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6144: LD_ADDR_VAR 0 3
6148: PUSH
6149: LD_INT 2
6151: PUSH
6152: LD_INT 3
6154: PUSH
6155: LD_INT 4
6157: PUSH
6158: LD_INT 5
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: ST_TO_ADDR
6167: GO 6958
6169: LD_INT 7
6171: DOUBLE
6172: EQUAL
6173: IFTRUE 6177
6175: GO 6203
6177: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6178: LD_ADDR_VAR 0 3
6182: PUSH
6183: LD_INT 2
6185: PUSH
6186: LD_INT 3
6188: PUSH
6189: LD_INT 4
6191: PUSH
6192: LD_INT 5
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: ST_TO_ADDR
6201: GO 6958
6203: LD_INT 12
6205: DOUBLE
6206: EQUAL
6207: IFTRUE 6211
6209: GO 6237
6211: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6212: LD_ADDR_VAR 0 3
6216: PUSH
6217: LD_INT 2
6219: PUSH
6220: LD_INT 3
6222: PUSH
6223: LD_INT 4
6225: PUSH
6226: LD_INT 5
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: ST_TO_ADDR
6235: GO 6958
6237: LD_INT 13
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6245
6243: GO 6271
6245: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6246: LD_ADDR_VAR 0 3
6250: PUSH
6251: LD_INT 2
6253: PUSH
6254: LD_INT 3
6256: PUSH
6257: LD_INT 4
6259: PUSH
6260: LD_INT 5
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: ST_TO_ADDR
6269: GO 6958
6271: LD_INT 14
6273: DOUBLE
6274: EQUAL
6275: IFTRUE 6279
6277: GO 6297
6279: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: LD_INT 4
6287: PUSH
6288: LD_INT 5
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: ST_TO_ADDR
6295: GO 6958
6297: LD_INT 6
6299: DOUBLE
6300: EQUAL
6301: IFTRUE 6305
6303: GO 6323
6305: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6306: LD_ADDR_VAR 0 3
6310: PUSH
6311: LD_INT 4
6313: PUSH
6314: LD_INT 5
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: ST_TO_ADDR
6321: GO 6958
6323: LD_INT 10
6325: DOUBLE
6326: EQUAL
6327: IFTRUE 6331
6329: GO 6349
6331: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6332: LD_ADDR_VAR 0 3
6336: PUSH
6337: LD_INT 4
6339: PUSH
6340: LD_INT 5
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: ST_TO_ADDR
6347: GO 6958
6349: LD_INT 22
6351: DOUBLE
6352: EQUAL
6353: IFTRUE 6357
6355: GO 6383
6357: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6358: LD_ADDR_VAR 0 3
6362: PUSH
6363: LD_INT 11
6365: PUSH
6366: LD_INT 12
6368: PUSH
6369: LD_INT 13
6371: PUSH
6372: LD_INT 14
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: ST_TO_ADDR
6381: GO 6958
6383: LD_INT 23
6385: DOUBLE
6386: EQUAL
6387: IFTRUE 6391
6389: GO 6417
6391: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6392: LD_ADDR_VAR 0 3
6396: PUSH
6397: LD_INT 11
6399: PUSH
6400: LD_INT 12
6402: PUSH
6403: LD_INT 13
6405: PUSH
6406: LD_INT 14
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: ST_TO_ADDR
6415: GO 6958
6417: LD_INT 24
6419: DOUBLE
6420: EQUAL
6421: IFTRUE 6425
6423: GO 6451
6425: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6426: LD_ADDR_VAR 0 3
6430: PUSH
6431: LD_INT 11
6433: PUSH
6434: LD_INT 12
6436: PUSH
6437: LD_INT 13
6439: PUSH
6440: LD_INT 14
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: ST_TO_ADDR
6449: GO 6958
6451: LD_INT 30
6453: DOUBLE
6454: EQUAL
6455: IFTRUE 6459
6457: GO 6485
6459: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6460: LD_ADDR_VAR 0 3
6464: PUSH
6465: LD_INT 11
6467: PUSH
6468: LD_INT 12
6470: PUSH
6471: LD_INT 13
6473: PUSH
6474: LD_INT 14
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: ST_TO_ADDR
6483: GO 6958
6485: LD_INT 25
6487: DOUBLE
6488: EQUAL
6489: IFTRUE 6493
6491: GO 6511
6493: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6494: LD_ADDR_VAR 0 3
6498: PUSH
6499: LD_INT 13
6501: PUSH
6502: LD_INT 14
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: ST_TO_ADDR
6509: GO 6958
6511: LD_INT 27
6513: DOUBLE
6514: EQUAL
6515: IFTRUE 6519
6517: GO 6537
6519: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6520: LD_ADDR_VAR 0 3
6524: PUSH
6525: LD_INT 13
6527: PUSH
6528: LD_INT 14
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: ST_TO_ADDR
6535: GO 6958
6537: LD_INT 28
6539: DOUBLE
6540: EQUAL
6541: IFTRUE 6545
6543: GO 6563
6545: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6546: LD_ADDR_VAR 0 3
6550: PUSH
6551: LD_INT 13
6553: PUSH
6554: LD_INT 14
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: ST_TO_ADDR
6561: GO 6958
6563: LD_INT 29
6565: DOUBLE
6566: EQUAL
6567: IFTRUE 6571
6569: GO 6589
6571: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6572: LD_ADDR_VAR 0 3
6576: PUSH
6577: LD_INT 13
6579: PUSH
6580: LD_INT 14
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: ST_TO_ADDR
6587: GO 6958
6589: LD_INT 31
6591: DOUBLE
6592: EQUAL
6593: IFTRUE 6597
6595: GO 6615
6597: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6598: LD_ADDR_VAR 0 3
6602: PUSH
6603: LD_INT 13
6605: PUSH
6606: LD_INT 14
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: ST_TO_ADDR
6613: GO 6958
6615: LD_INT 26
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6641
6623: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6624: LD_ADDR_VAR 0 3
6628: PUSH
6629: LD_INT 13
6631: PUSH
6632: LD_INT 14
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: ST_TO_ADDR
6639: GO 6958
6641: LD_INT 42
6643: DOUBLE
6644: EQUAL
6645: IFTRUE 6649
6647: GO 6675
6649: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6650: LD_ADDR_VAR 0 3
6654: PUSH
6655: LD_INT 21
6657: PUSH
6658: LD_INT 22
6660: PUSH
6661: LD_INT 23
6663: PUSH
6664: LD_INT 24
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: ST_TO_ADDR
6673: GO 6958
6675: LD_INT 43
6677: DOUBLE
6678: EQUAL
6679: IFTRUE 6683
6681: GO 6709
6683: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6684: LD_ADDR_VAR 0 3
6688: PUSH
6689: LD_INT 21
6691: PUSH
6692: LD_INT 22
6694: PUSH
6695: LD_INT 23
6697: PUSH
6698: LD_INT 24
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: ST_TO_ADDR
6707: GO 6958
6709: LD_INT 44
6711: DOUBLE
6712: EQUAL
6713: IFTRUE 6717
6715: GO 6743
6717: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6718: LD_ADDR_VAR 0 3
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 22
6728: PUSH
6729: LD_INT 23
6731: PUSH
6732: LD_INT 24
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: ST_TO_ADDR
6741: GO 6958
6743: LD_INT 45
6745: DOUBLE
6746: EQUAL
6747: IFTRUE 6751
6749: GO 6777
6751: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6752: LD_ADDR_VAR 0 3
6756: PUSH
6757: LD_INT 21
6759: PUSH
6760: LD_INT 22
6762: PUSH
6763: LD_INT 23
6765: PUSH
6766: LD_INT 24
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: ST_TO_ADDR
6775: GO 6958
6777: LD_INT 49
6779: DOUBLE
6780: EQUAL
6781: IFTRUE 6785
6783: GO 6811
6785: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6786: LD_ADDR_VAR 0 3
6790: PUSH
6791: LD_INT 21
6793: PUSH
6794: LD_INT 22
6796: PUSH
6797: LD_INT 23
6799: PUSH
6800: LD_INT 24
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: ST_TO_ADDR
6809: GO 6958
6811: LD_INT 51
6813: DOUBLE
6814: EQUAL
6815: IFTRUE 6819
6817: GO 6845
6819: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6820: LD_ADDR_VAR 0 3
6824: PUSH
6825: LD_INT 21
6827: PUSH
6828: LD_INT 22
6830: PUSH
6831: LD_INT 23
6833: PUSH
6834: LD_INT 24
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: ST_TO_ADDR
6843: GO 6958
6845: LD_INT 52
6847: DOUBLE
6848: EQUAL
6849: IFTRUE 6853
6851: GO 6879
6853: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6854: LD_ADDR_VAR 0 3
6858: PUSH
6859: LD_INT 21
6861: PUSH
6862: LD_INT 22
6864: PUSH
6865: LD_INT 23
6867: PUSH
6868: LD_INT 24
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: ST_TO_ADDR
6877: GO 6958
6879: LD_INT 53
6881: DOUBLE
6882: EQUAL
6883: IFTRUE 6887
6885: GO 6905
6887: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6888: LD_ADDR_VAR 0 3
6892: PUSH
6893: LD_INT 23
6895: PUSH
6896: LD_INT 24
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: ST_TO_ADDR
6903: GO 6958
6905: LD_INT 46
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 6931
6913: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6914: LD_ADDR_VAR 0 3
6918: PUSH
6919: LD_INT 23
6921: PUSH
6922: LD_INT 24
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: ST_TO_ADDR
6929: GO 6958
6931: LD_INT 47
6933: DOUBLE
6934: EQUAL
6935: IFTRUE 6939
6937: GO 6957
6939: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6940: LD_ADDR_VAR 0 3
6944: PUSH
6945: LD_INT 23
6947: PUSH
6948: LD_INT 24
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: ST_TO_ADDR
6955: GO 6958
6957: POP
// result := ( chassis in result ) ;
6958: LD_ADDR_VAR 0 3
6962: PUSH
6963: LD_VAR 0 1
6967: PUSH
6968: LD_VAR 0 3
6972: IN
6973: ST_TO_ADDR
// end ;
6974: LD_VAR 0 3
6978: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6979: LD_INT 0
6981: PPUSH
6982: PPUSH
6983: PPUSH
6984: PPUSH
6985: PPUSH
6986: PPUSH
6987: PPUSH
// result := array ;
6988: LD_ADDR_VAR 0 5
6992: PUSH
6993: LD_VAR 0 1
6997: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6998: LD_VAR 0 1
7002: NOT
7003: PUSH
7004: LD_VAR 0 2
7008: NOT
7009: OR
7010: PUSH
7011: LD_VAR 0 3
7015: NOT
7016: OR
7017: PUSH
7018: LD_VAR 0 2
7022: PUSH
7023: LD_VAR 0 1
7027: GREATER
7028: OR
7029: PUSH
7030: LD_VAR 0 3
7034: PUSH
7035: LD_VAR 0 1
7039: GREATER
7040: OR
7041: IFFALSE 7045
// exit ;
7043: GO 7341
// if direction then
7045: LD_VAR 0 4
7049: IFFALSE 7113
// begin d := 1 ;
7051: LD_ADDR_VAR 0 9
7055: PUSH
7056: LD_INT 1
7058: ST_TO_ADDR
// if i_from > i_to then
7059: LD_VAR 0 2
7063: PUSH
7064: LD_VAR 0 3
7068: GREATER
7069: IFFALSE 7095
// length := ( array - i_from ) + i_to else
7071: LD_ADDR_VAR 0 11
7075: PUSH
7076: LD_VAR 0 1
7080: PUSH
7081: LD_VAR 0 2
7085: MINUS
7086: PUSH
7087: LD_VAR 0 3
7091: PLUS
7092: ST_TO_ADDR
7093: GO 7111
// length := i_to - i_from ;
7095: LD_ADDR_VAR 0 11
7099: PUSH
7100: LD_VAR 0 3
7104: PUSH
7105: LD_VAR 0 2
7109: MINUS
7110: ST_TO_ADDR
// end else
7111: GO 7174
// begin d := - 1 ;
7113: LD_ADDR_VAR 0 9
7117: PUSH
7118: LD_INT 1
7120: NEG
7121: ST_TO_ADDR
// if i_from > i_to then
7122: LD_VAR 0 2
7126: PUSH
7127: LD_VAR 0 3
7131: GREATER
7132: IFFALSE 7152
// length := i_from - i_to else
7134: LD_ADDR_VAR 0 11
7138: PUSH
7139: LD_VAR 0 2
7143: PUSH
7144: LD_VAR 0 3
7148: MINUS
7149: ST_TO_ADDR
7150: GO 7174
// length := ( array - i_to ) + i_from ;
7152: LD_ADDR_VAR 0 11
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: LD_VAR 0 3
7166: MINUS
7167: PUSH
7168: LD_VAR 0 2
7172: PLUS
7173: ST_TO_ADDR
// end ; if not length then
7174: LD_VAR 0 11
7178: NOT
7179: IFFALSE 7183
// exit ;
7181: GO 7341
// tmp := array ;
7183: LD_ADDR_VAR 0 10
7187: PUSH
7188: LD_VAR 0 1
7192: ST_TO_ADDR
// for i = 1 to length do
7193: LD_ADDR_VAR 0 6
7197: PUSH
7198: DOUBLE
7199: LD_INT 1
7201: DEC
7202: ST_TO_ADDR
7203: LD_VAR 0 11
7207: PUSH
7208: FOR_TO
7209: IFFALSE 7329
// begin for j = 1 to array do
7211: LD_ADDR_VAR 0 7
7215: PUSH
7216: DOUBLE
7217: LD_INT 1
7219: DEC
7220: ST_TO_ADDR
7221: LD_VAR 0 1
7225: PUSH
7226: FOR_TO
7227: IFFALSE 7315
// begin k := j + d ;
7229: LD_ADDR_VAR 0 8
7233: PUSH
7234: LD_VAR 0 7
7238: PUSH
7239: LD_VAR 0 9
7243: PLUS
7244: ST_TO_ADDR
// if k > array then
7245: LD_VAR 0 8
7249: PUSH
7250: LD_VAR 0 1
7254: GREATER
7255: IFFALSE 7265
// k := 1 ;
7257: LD_ADDR_VAR 0 8
7261: PUSH
7262: LD_INT 1
7264: ST_TO_ADDR
// if not k then
7265: LD_VAR 0 8
7269: NOT
7270: IFFALSE 7282
// k := array ;
7272: LD_ADDR_VAR 0 8
7276: PUSH
7277: LD_VAR 0 1
7281: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7282: LD_ADDR_VAR 0 10
7286: PUSH
7287: LD_VAR 0 10
7291: PPUSH
7292: LD_VAR 0 8
7296: PPUSH
7297: LD_VAR 0 1
7301: PUSH
7302: LD_VAR 0 7
7306: ARRAY
7307: PPUSH
7308: CALL_OW 1
7312: ST_TO_ADDR
// end ;
7313: GO 7226
7315: POP
7316: POP
// array := tmp ;
7317: LD_ADDR_VAR 0 1
7321: PUSH
7322: LD_VAR 0 10
7326: ST_TO_ADDR
// end ;
7327: GO 7208
7329: POP
7330: POP
// result := array ;
7331: LD_ADDR_VAR 0 5
7335: PUSH
7336: LD_VAR 0 1
7340: ST_TO_ADDR
// end ;
7341: LD_VAR 0 5
7345: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7346: LD_INT 0
7348: PPUSH
7349: PPUSH
// result := 0 ;
7350: LD_ADDR_VAR 0 3
7354: PUSH
7355: LD_INT 0
7357: ST_TO_ADDR
// if not array or not value in array then
7358: LD_VAR 0 1
7362: NOT
7363: PUSH
7364: LD_VAR 0 2
7368: PUSH
7369: LD_VAR 0 1
7373: IN
7374: NOT
7375: OR
7376: IFFALSE 7380
// exit ;
7378: GO 7434
// for i = 1 to array do
7380: LD_ADDR_VAR 0 4
7384: PUSH
7385: DOUBLE
7386: LD_INT 1
7388: DEC
7389: ST_TO_ADDR
7390: LD_VAR 0 1
7394: PUSH
7395: FOR_TO
7396: IFFALSE 7432
// if value = array [ i ] then
7398: LD_VAR 0 2
7402: PUSH
7403: LD_VAR 0 1
7407: PUSH
7408: LD_VAR 0 4
7412: ARRAY
7413: EQUAL
7414: IFFALSE 7430
// begin result := i ;
7416: LD_ADDR_VAR 0 3
7420: PUSH
7421: LD_VAR 0 4
7425: ST_TO_ADDR
// exit ;
7426: POP
7427: POP
7428: GO 7434
// end ;
7430: GO 7395
7432: POP
7433: POP
// end ;
7434: LD_VAR 0 3
7438: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7439: LD_INT 0
7441: PPUSH
// vc_chassis := chassis ;
7442: LD_ADDR_OWVAR 37
7446: PUSH
7447: LD_VAR 0 1
7451: ST_TO_ADDR
// vc_engine := engine ;
7452: LD_ADDR_OWVAR 39
7456: PUSH
7457: LD_VAR 0 2
7461: ST_TO_ADDR
// vc_control := control ;
7462: LD_ADDR_OWVAR 38
7466: PUSH
7467: LD_VAR 0 3
7471: ST_TO_ADDR
// vc_weapon := weapon ;
7472: LD_ADDR_OWVAR 40
7476: PUSH
7477: LD_VAR 0 4
7481: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7482: LD_ADDR_OWVAR 41
7486: PUSH
7487: LD_VAR 0 5
7491: ST_TO_ADDR
// end ;
7492: LD_VAR 0 6
7496: RET
// export function WantPlant ( unit ) ; var task ; begin
7497: LD_INT 0
7499: PPUSH
7500: PPUSH
// result := false ;
7501: LD_ADDR_VAR 0 2
7505: PUSH
7506: LD_INT 0
7508: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7509: LD_ADDR_VAR 0 3
7513: PUSH
7514: LD_VAR 0 1
7518: PPUSH
7519: CALL_OW 437
7523: ST_TO_ADDR
// if task then
7524: LD_VAR 0 3
7528: IFFALSE 7556
// if task [ 1 ] [ 1 ] = p then
7530: LD_VAR 0 3
7534: PUSH
7535: LD_INT 1
7537: ARRAY
7538: PUSH
7539: LD_INT 1
7541: ARRAY
7542: PUSH
7543: LD_STRING p
7545: EQUAL
7546: IFFALSE 7556
// result := true ;
7548: LD_ADDR_VAR 0 2
7552: PUSH
7553: LD_INT 1
7555: ST_TO_ADDR
// end ;
7556: LD_VAR 0 2
7560: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7561: LD_INT 0
7563: PPUSH
7564: PPUSH
7565: PPUSH
7566: PPUSH
// if pos < 1 then
7567: LD_VAR 0 2
7571: PUSH
7572: LD_INT 1
7574: LESS
7575: IFFALSE 7579
// exit ;
7577: GO 7882
// if pos = 1 then
7579: LD_VAR 0 2
7583: PUSH
7584: LD_INT 1
7586: EQUAL
7587: IFFALSE 7620
// result := Replace ( arr , pos [ 1 ] , value ) else
7589: LD_ADDR_VAR 0 4
7593: PUSH
7594: LD_VAR 0 1
7598: PPUSH
7599: LD_VAR 0 2
7603: PUSH
7604: LD_INT 1
7606: ARRAY
7607: PPUSH
7608: LD_VAR 0 3
7612: PPUSH
7613: CALL_OW 1
7617: ST_TO_ADDR
7618: GO 7882
// begin tmp := arr ;
7620: LD_ADDR_VAR 0 6
7624: PUSH
7625: LD_VAR 0 1
7629: ST_TO_ADDR
// s_arr := [ tmp ] ;
7630: LD_ADDR_VAR 0 7
7634: PUSH
7635: LD_VAR 0 6
7639: PUSH
7640: EMPTY
7641: LIST
7642: ST_TO_ADDR
// for i = 1 to pos - 1 do
7643: LD_ADDR_VAR 0 5
7647: PUSH
7648: DOUBLE
7649: LD_INT 1
7651: DEC
7652: ST_TO_ADDR
7653: LD_VAR 0 2
7657: PUSH
7658: LD_INT 1
7660: MINUS
7661: PUSH
7662: FOR_TO
7663: IFFALSE 7708
// begin tmp := tmp [ pos [ i ] ] ;
7665: LD_ADDR_VAR 0 6
7669: PUSH
7670: LD_VAR 0 6
7674: PUSH
7675: LD_VAR 0 2
7679: PUSH
7680: LD_VAR 0 5
7684: ARRAY
7685: ARRAY
7686: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7687: LD_ADDR_VAR 0 7
7691: PUSH
7692: LD_VAR 0 7
7696: PUSH
7697: LD_VAR 0 6
7701: PUSH
7702: EMPTY
7703: LIST
7704: ADD
7705: ST_TO_ADDR
// end ;
7706: GO 7662
7708: POP
7709: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7710: LD_ADDR_VAR 0 6
7714: PUSH
7715: LD_VAR 0 6
7719: PPUSH
7720: LD_VAR 0 2
7724: PUSH
7725: LD_VAR 0 2
7729: ARRAY
7730: PPUSH
7731: LD_VAR 0 3
7735: PPUSH
7736: CALL_OW 1
7740: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7741: LD_ADDR_VAR 0 7
7745: PUSH
7746: LD_VAR 0 7
7750: PPUSH
7751: LD_VAR 0 7
7755: PPUSH
7756: LD_VAR 0 6
7760: PPUSH
7761: CALL_OW 1
7765: ST_TO_ADDR
// for i = s_arr downto 2 do
7766: LD_ADDR_VAR 0 5
7770: PUSH
7771: DOUBLE
7772: LD_VAR 0 7
7776: INC
7777: ST_TO_ADDR
7778: LD_INT 2
7780: PUSH
7781: FOR_DOWNTO
7782: IFFALSE 7866
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7784: LD_ADDR_VAR 0 6
7788: PUSH
7789: LD_VAR 0 7
7793: PUSH
7794: LD_VAR 0 5
7798: PUSH
7799: LD_INT 1
7801: MINUS
7802: ARRAY
7803: PPUSH
7804: LD_VAR 0 2
7808: PUSH
7809: LD_VAR 0 5
7813: PUSH
7814: LD_INT 1
7816: MINUS
7817: ARRAY
7818: PPUSH
7819: LD_VAR 0 7
7823: PUSH
7824: LD_VAR 0 5
7828: ARRAY
7829: PPUSH
7830: CALL_OW 1
7834: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7835: LD_ADDR_VAR 0 7
7839: PUSH
7840: LD_VAR 0 7
7844: PPUSH
7845: LD_VAR 0 5
7849: PUSH
7850: LD_INT 1
7852: MINUS
7853: PPUSH
7854: LD_VAR 0 6
7858: PPUSH
7859: CALL_OW 1
7863: ST_TO_ADDR
// end ;
7864: GO 7781
7866: POP
7867: POP
// result := s_arr [ 1 ] ;
7868: LD_ADDR_VAR 0 4
7872: PUSH
7873: LD_VAR 0 7
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: ST_TO_ADDR
// end ; end ;
7882: LD_VAR 0 4
7886: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7887: LD_INT 0
7889: PPUSH
7890: PPUSH
// if not list then
7891: LD_VAR 0 1
7895: NOT
7896: IFFALSE 7900
// exit ;
7898: GO 7991
// i := list [ pos1 ] ;
7900: LD_ADDR_VAR 0 5
7904: PUSH
7905: LD_VAR 0 1
7909: PUSH
7910: LD_VAR 0 2
7914: ARRAY
7915: ST_TO_ADDR
// if not i then
7916: LD_VAR 0 5
7920: NOT
7921: IFFALSE 7925
// exit ;
7923: GO 7991
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7925: LD_ADDR_VAR 0 1
7929: PUSH
7930: LD_VAR 0 1
7934: PPUSH
7935: LD_VAR 0 2
7939: PPUSH
7940: LD_VAR 0 1
7944: PUSH
7945: LD_VAR 0 3
7949: ARRAY
7950: PPUSH
7951: CALL_OW 1
7955: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7956: LD_ADDR_VAR 0 1
7960: PUSH
7961: LD_VAR 0 1
7965: PPUSH
7966: LD_VAR 0 3
7970: PPUSH
7971: LD_VAR 0 5
7975: PPUSH
7976: CALL_OW 1
7980: ST_TO_ADDR
// result := list ;
7981: LD_ADDR_VAR 0 4
7985: PUSH
7986: LD_VAR 0 1
7990: ST_TO_ADDR
// end ;
7991: LD_VAR 0 4
7995: RET
// export function Add ( list , pos , val ) ; begin
7996: LD_INT 0
7998: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
7999: LD_ADDR_VAR 0 4
8003: PUSH
8004: LD_VAR 0 1
8008: PPUSH
8009: LD_VAR 0 2
8013: PPUSH
8014: LD_VAR 0 3
8018: PPUSH
8019: CALL 7561 0 3
8023: ST_TO_ADDR
8024: LD_VAR 0 4
8028: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8029: LD_INT 0
8031: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8032: LD_ADDR_VAR 0 5
8036: PUSH
8037: LD_VAR 0 1
8041: PPUSH
8042: CALL_OW 250
8046: PPUSH
8047: LD_VAR 0 1
8051: PPUSH
8052: CALL_OW 251
8056: PPUSH
8057: LD_VAR 0 2
8061: PPUSH
8062: LD_VAR 0 3
8066: PPUSH
8067: LD_VAR 0 4
8071: PPUSH
8072: CALL 8082 0 5
8076: ST_TO_ADDR
// end ;
8077: LD_VAR 0 5
8081: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8082: LD_INT 0
8084: PPUSH
8085: PPUSH
8086: PPUSH
8087: PPUSH
// if not list then
8088: LD_VAR 0 3
8092: NOT
8093: IFFALSE 8097
// exit ;
8095: GO 8485
// result := [ ] ;
8097: LD_ADDR_VAR 0 6
8101: PUSH
8102: EMPTY
8103: ST_TO_ADDR
// for i in list do
8104: LD_ADDR_VAR 0 7
8108: PUSH
8109: LD_VAR 0 3
8113: PUSH
8114: FOR_IN
8115: IFFALSE 8317
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8117: LD_ADDR_VAR 0 9
8121: PUSH
8122: LD_VAR 0 7
8126: PPUSH
8127: LD_VAR 0 1
8131: PPUSH
8132: LD_VAR 0 2
8136: PPUSH
8137: CALL_OW 297
8141: ST_TO_ADDR
// if not result then
8142: LD_VAR 0 6
8146: NOT
8147: IFFALSE 8173
// result := [ [ i , tmp ] ] else
8149: LD_ADDR_VAR 0 6
8153: PUSH
8154: LD_VAR 0 7
8158: PUSH
8159: LD_VAR 0 9
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: ST_TO_ADDR
8171: GO 8315
// begin if result [ result ] [ 2 ] < tmp then
8173: LD_VAR 0 6
8177: PUSH
8178: LD_VAR 0 6
8182: ARRAY
8183: PUSH
8184: LD_INT 2
8186: ARRAY
8187: PUSH
8188: LD_VAR 0 9
8192: LESS
8193: IFFALSE 8235
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8195: LD_ADDR_VAR 0 6
8199: PUSH
8200: LD_VAR 0 6
8204: PPUSH
8205: LD_VAR 0 6
8209: PUSH
8210: LD_INT 1
8212: PLUS
8213: PPUSH
8214: LD_VAR 0 7
8218: PUSH
8219: LD_VAR 0 9
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PPUSH
8228: CALL_OW 2
8232: ST_TO_ADDR
8233: GO 8315
// for j = 1 to result do
8235: LD_ADDR_VAR 0 8
8239: PUSH
8240: DOUBLE
8241: LD_INT 1
8243: DEC
8244: ST_TO_ADDR
8245: LD_VAR 0 6
8249: PUSH
8250: FOR_TO
8251: IFFALSE 8313
// begin if tmp < result [ j ] [ 2 ] then
8253: LD_VAR 0 9
8257: PUSH
8258: LD_VAR 0 6
8262: PUSH
8263: LD_VAR 0 8
8267: ARRAY
8268: PUSH
8269: LD_INT 2
8271: ARRAY
8272: LESS
8273: IFFALSE 8311
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8275: LD_ADDR_VAR 0 6
8279: PUSH
8280: LD_VAR 0 6
8284: PPUSH
8285: LD_VAR 0 8
8289: PPUSH
8290: LD_VAR 0 7
8294: PUSH
8295: LD_VAR 0 9
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: PPUSH
8304: CALL_OW 2
8308: ST_TO_ADDR
// break ;
8309: GO 8313
// end ; end ;
8311: GO 8250
8313: POP
8314: POP
// end ; end ;
8315: GO 8114
8317: POP
8318: POP
// if result and not asc then
8319: LD_VAR 0 6
8323: PUSH
8324: LD_VAR 0 4
8328: NOT
8329: AND
8330: IFFALSE 8405
// begin tmp := result ;
8332: LD_ADDR_VAR 0 9
8336: PUSH
8337: LD_VAR 0 6
8341: ST_TO_ADDR
// for i = tmp downto 1 do
8342: LD_ADDR_VAR 0 7
8346: PUSH
8347: DOUBLE
8348: LD_VAR 0 9
8352: INC
8353: ST_TO_ADDR
8354: LD_INT 1
8356: PUSH
8357: FOR_DOWNTO
8358: IFFALSE 8403
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8360: LD_ADDR_VAR 0 6
8364: PUSH
8365: LD_VAR 0 6
8369: PPUSH
8370: LD_VAR 0 9
8374: PUSH
8375: LD_VAR 0 7
8379: MINUS
8380: PUSH
8381: LD_INT 1
8383: PLUS
8384: PPUSH
8385: LD_VAR 0 9
8389: PUSH
8390: LD_VAR 0 7
8394: ARRAY
8395: PPUSH
8396: CALL_OW 1
8400: ST_TO_ADDR
8401: GO 8357
8403: POP
8404: POP
// end ; tmp := [ ] ;
8405: LD_ADDR_VAR 0 9
8409: PUSH
8410: EMPTY
8411: ST_TO_ADDR
// if mode then
8412: LD_VAR 0 5
8416: IFFALSE 8485
// begin for i = 1 to result do
8418: LD_ADDR_VAR 0 7
8422: PUSH
8423: DOUBLE
8424: LD_INT 1
8426: DEC
8427: ST_TO_ADDR
8428: LD_VAR 0 6
8432: PUSH
8433: FOR_TO
8434: IFFALSE 8473
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8436: LD_ADDR_VAR 0 9
8440: PUSH
8441: LD_VAR 0 9
8445: PPUSH
8446: LD_VAR 0 7
8450: PPUSH
8451: LD_VAR 0 6
8455: PUSH
8456: LD_VAR 0 7
8460: ARRAY
8461: PUSH
8462: LD_INT 1
8464: ARRAY
8465: PPUSH
8466: CALL_OW 1
8470: ST_TO_ADDR
8471: GO 8433
8473: POP
8474: POP
// result := tmp ;
8475: LD_ADDR_VAR 0 6
8479: PUSH
8480: LD_VAR 0 9
8484: ST_TO_ADDR
// end ; end ;
8485: LD_VAR 0 6
8489: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8490: LD_INT 0
8492: PPUSH
8493: PPUSH
8494: PPUSH
8495: PPUSH
8496: PPUSH
8497: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8498: LD_ADDR_VAR 0 5
8502: PUSH
8503: LD_INT 0
8505: PUSH
8506: LD_INT 0
8508: PUSH
8509: LD_INT 0
8511: PUSH
8512: EMPTY
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: ST_TO_ADDR
// if not x or not y then
8520: LD_VAR 0 2
8524: NOT
8525: PUSH
8526: LD_VAR 0 3
8530: NOT
8531: OR
8532: IFFALSE 8536
// exit ;
8534: GO 10182
// if not range then
8536: LD_VAR 0 4
8540: NOT
8541: IFFALSE 8551
// range := 10 ;
8543: LD_ADDR_VAR 0 4
8547: PUSH
8548: LD_INT 10
8550: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8551: LD_ADDR_VAR 0 8
8555: PUSH
8556: LD_INT 81
8558: PUSH
8559: LD_VAR 0 1
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_INT 92
8570: PUSH
8571: LD_VAR 0 2
8575: PUSH
8576: LD_VAR 0 3
8580: PUSH
8581: LD_VAR 0 4
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: PUSH
8592: LD_INT 3
8594: PUSH
8595: LD_INT 21
8597: PUSH
8598: LD_INT 3
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: PPUSH
8614: CALL_OW 69
8618: ST_TO_ADDR
// if not tmp then
8619: LD_VAR 0 8
8623: NOT
8624: IFFALSE 8628
// exit ;
8626: GO 10182
// for i in tmp do
8628: LD_ADDR_VAR 0 6
8632: PUSH
8633: LD_VAR 0 8
8637: PUSH
8638: FOR_IN
8639: IFFALSE 10157
// begin points := [ 0 , 0 , 0 ] ;
8641: LD_ADDR_VAR 0 9
8645: PUSH
8646: LD_INT 0
8648: PUSH
8649: LD_INT 0
8651: PUSH
8652: LD_INT 0
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: LIST
8659: ST_TO_ADDR
// bpoints := 1 ;
8660: LD_ADDR_VAR 0 10
8664: PUSH
8665: LD_INT 1
8667: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8668: LD_VAR 0 6
8672: PPUSH
8673: CALL_OW 247
8677: PUSH
8678: LD_INT 1
8680: DOUBLE
8681: EQUAL
8682: IFTRUE 8686
8684: GO 9264
8686: POP
// begin if GetClass ( i ) = 1 then
8687: LD_VAR 0 6
8691: PPUSH
8692: CALL_OW 257
8696: PUSH
8697: LD_INT 1
8699: EQUAL
8700: IFFALSE 8721
// points := [ 10 , 5 , 3 ] ;
8702: LD_ADDR_VAR 0 9
8706: PUSH
8707: LD_INT 10
8709: PUSH
8710: LD_INT 5
8712: PUSH
8713: LD_INT 3
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: LIST
8720: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8721: LD_VAR 0 6
8725: PPUSH
8726: CALL_OW 257
8730: PUSH
8731: LD_INT 2
8733: PUSH
8734: LD_INT 3
8736: PUSH
8737: LD_INT 4
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: LIST
8744: IN
8745: IFFALSE 8766
// points := [ 3 , 2 , 1 ] ;
8747: LD_ADDR_VAR 0 9
8751: PUSH
8752: LD_INT 3
8754: PUSH
8755: LD_INT 2
8757: PUSH
8758: LD_INT 1
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: LIST
8765: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8766: LD_VAR 0 6
8770: PPUSH
8771: CALL_OW 257
8775: PUSH
8776: LD_INT 5
8778: EQUAL
8779: IFFALSE 8800
// points := [ 130 , 5 , 2 ] ;
8781: LD_ADDR_VAR 0 9
8785: PUSH
8786: LD_INT 130
8788: PUSH
8789: LD_INT 5
8791: PUSH
8792: LD_INT 2
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: LIST
8799: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8800: LD_VAR 0 6
8804: PPUSH
8805: CALL_OW 257
8809: PUSH
8810: LD_INT 8
8812: EQUAL
8813: IFFALSE 8834
// points := [ 35 , 35 , 30 ] ;
8815: LD_ADDR_VAR 0 9
8819: PUSH
8820: LD_INT 35
8822: PUSH
8823: LD_INT 35
8825: PUSH
8826: LD_INT 30
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: LIST
8833: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8834: LD_VAR 0 6
8838: PPUSH
8839: CALL_OW 257
8843: PUSH
8844: LD_INT 9
8846: EQUAL
8847: IFFALSE 8868
// points := [ 20 , 55 , 40 ] ;
8849: LD_ADDR_VAR 0 9
8853: PUSH
8854: LD_INT 20
8856: PUSH
8857: LD_INT 55
8859: PUSH
8860: LD_INT 40
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: LIST
8867: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8868: LD_VAR 0 6
8872: PPUSH
8873: CALL_OW 257
8877: PUSH
8878: LD_INT 12
8880: PUSH
8881: LD_INT 16
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: IN
8888: IFFALSE 8909
// points := [ 5 , 3 , 2 ] ;
8890: LD_ADDR_VAR 0 9
8894: PUSH
8895: LD_INT 5
8897: PUSH
8898: LD_INT 3
8900: PUSH
8901: LD_INT 2
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: LIST
8908: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8909: LD_VAR 0 6
8913: PPUSH
8914: CALL_OW 257
8918: PUSH
8919: LD_INT 17
8921: EQUAL
8922: IFFALSE 8943
// points := [ 100 , 50 , 75 ] ;
8924: LD_ADDR_VAR 0 9
8928: PUSH
8929: LD_INT 100
8931: PUSH
8932: LD_INT 50
8934: PUSH
8935: LD_INT 75
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8943: LD_VAR 0 6
8947: PPUSH
8948: CALL_OW 257
8952: PUSH
8953: LD_INT 15
8955: EQUAL
8956: IFFALSE 8977
// points := [ 10 , 5 , 3 ] ;
8958: LD_ADDR_VAR 0 9
8962: PUSH
8963: LD_INT 10
8965: PUSH
8966: LD_INT 5
8968: PUSH
8969: LD_INT 3
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: LIST
8976: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8977: LD_VAR 0 6
8981: PPUSH
8982: CALL_OW 257
8986: PUSH
8987: LD_INT 14
8989: EQUAL
8990: IFFALSE 9011
// points := [ 10 , 0 , 0 ] ;
8992: LD_ADDR_VAR 0 9
8996: PUSH
8997: LD_INT 10
8999: PUSH
9000: LD_INT 0
9002: PUSH
9003: LD_INT 0
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: LIST
9010: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9011: LD_VAR 0 6
9015: PPUSH
9016: CALL_OW 257
9020: PUSH
9021: LD_INT 11
9023: EQUAL
9024: IFFALSE 9045
// points := [ 30 , 10 , 5 ] ;
9026: LD_ADDR_VAR 0 9
9030: PUSH
9031: LD_INT 30
9033: PUSH
9034: LD_INT 10
9036: PUSH
9037: LD_INT 5
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: LIST
9044: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9045: LD_VAR 0 1
9049: PPUSH
9050: LD_INT 5
9052: PPUSH
9053: CALL_OW 321
9057: PUSH
9058: LD_INT 2
9060: EQUAL
9061: IFFALSE 9078
// bpoints := bpoints * 1.8 ;
9063: LD_ADDR_VAR 0 10
9067: PUSH
9068: LD_VAR 0 10
9072: PUSH
9073: LD_REAL  1.80000000000000E+0000
9076: MUL
9077: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9078: LD_VAR 0 6
9082: PPUSH
9083: CALL_OW 257
9087: PUSH
9088: LD_INT 1
9090: PUSH
9091: LD_INT 2
9093: PUSH
9094: LD_INT 3
9096: PUSH
9097: LD_INT 4
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: IN
9106: PUSH
9107: LD_VAR 0 1
9111: PPUSH
9112: LD_INT 51
9114: PPUSH
9115: CALL_OW 321
9119: PUSH
9120: LD_INT 2
9122: EQUAL
9123: AND
9124: IFFALSE 9141
// bpoints := bpoints * 1.2 ;
9126: LD_ADDR_VAR 0 10
9130: PUSH
9131: LD_VAR 0 10
9135: PUSH
9136: LD_REAL  1.20000000000000E+0000
9139: MUL
9140: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9141: LD_VAR 0 6
9145: PPUSH
9146: CALL_OW 257
9150: PUSH
9151: LD_INT 5
9153: PUSH
9154: LD_INT 7
9156: PUSH
9157: LD_INT 9
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: IN
9165: PUSH
9166: LD_VAR 0 1
9170: PPUSH
9171: LD_INT 52
9173: PPUSH
9174: CALL_OW 321
9178: PUSH
9179: LD_INT 2
9181: EQUAL
9182: AND
9183: IFFALSE 9200
// bpoints := bpoints * 1.5 ;
9185: LD_ADDR_VAR 0 10
9189: PUSH
9190: LD_VAR 0 10
9194: PUSH
9195: LD_REAL  1.50000000000000E+0000
9198: MUL
9199: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9200: LD_VAR 0 1
9204: PPUSH
9205: LD_INT 66
9207: PPUSH
9208: CALL_OW 321
9212: PUSH
9213: LD_INT 2
9215: EQUAL
9216: IFFALSE 9233
// bpoints := bpoints * 1.1 ;
9218: LD_ADDR_VAR 0 10
9222: PUSH
9223: LD_VAR 0 10
9227: PUSH
9228: LD_REAL  1.10000000000000E+0000
9231: MUL
9232: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9233: LD_ADDR_VAR 0 10
9237: PUSH
9238: LD_VAR 0 10
9242: PUSH
9243: LD_VAR 0 6
9247: PPUSH
9248: LD_INT 1
9250: PPUSH
9251: CALL_OW 259
9255: PUSH
9256: LD_REAL  1.15000000000000E+0000
9259: MUL
9260: MUL
9261: ST_TO_ADDR
// end ; unit_vehicle :
9262: GO 10086
9264: LD_INT 2
9266: DOUBLE
9267: EQUAL
9268: IFTRUE 9272
9270: GO 10074
9272: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9273: LD_VAR 0 6
9277: PPUSH
9278: CALL_OW 264
9282: PUSH
9283: LD_INT 2
9285: PUSH
9286: LD_INT 42
9288: PUSH
9289: LD_INT 24
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: LIST
9296: IN
9297: IFFALSE 9318
// points := [ 25 , 5 , 3 ] ;
9299: LD_ADDR_VAR 0 9
9303: PUSH
9304: LD_INT 25
9306: PUSH
9307: LD_INT 5
9309: PUSH
9310: LD_INT 3
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: LIST
9317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9318: LD_VAR 0 6
9322: PPUSH
9323: CALL_OW 264
9327: PUSH
9328: LD_INT 4
9330: PUSH
9331: LD_INT 43
9333: PUSH
9334: LD_INT 25
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: LIST
9341: IN
9342: IFFALSE 9363
// points := [ 40 , 15 , 5 ] ;
9344: LD_ADDR_VAR 0 9
9348: PUSH
9349: LD_INT 40
9351: PUSH
9352: LD_INT 15
9354: PUSH
9355: LD_INT 5
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: LIST
9362: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9363: LD_VAR 0 6
9367: PPUSH
9368: CALL_OW 264
9372: PUSH
9373: LD_INT 3
9375: PUSH
9376: LD_INT 23
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: IN
9383: IFFALSE 9404
// points := [ 7 , 25 , 8 ] ;
9385: LD_ADDR_VAR 0 9
9389: PUSH
9390: LD_INT 7
9392: PUSH
9393: LD_INT 25
9395: PUSH
9396: LD_INT 8
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: LIST
9403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9404: LD_VAR 0 6
9408: PPUSH
9409: CALL_OW 264
9413: PUSH
9414: LD_INT 5
9416: PUSH
9417: LD_INT 27
9419: PUSH
9420: LD_INT 44
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: IN
9428: IFFALSE 9449
// points := [ 14 , 50 , 16 ] ;
9430: LD_ADDR_VAR 0 9
9434: PUSH
9435: LD_INT 14
9437: PUSH
9438: LD_INT 50
9440: PUSH
9441: LD_INT 16
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: LIST
9448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9449: LD_VAR 0 6
9453: PPUSH
9454: CALL_OW 264
9458: PUSH
9459: LD_INT 6
9461: PUSH
9462: LD_INT 46
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: IN
9469: IFFALSE 9490
// points := [ 32 , 120 , 70 ] ;
9471: LD_ADDR_VAR 0 9
9475: PUSH
9476: LD_INT 32
9478: PUSH
9479: LD_INT 120
9481: PUSH
9482: LD_INT 70
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: LIST
9489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
9490: LD_VAR 0 6
9494: PPUSH
9495: CALL_OW 264
9499: PUSH
9500: LD_INT 7
9502: PUSH
9503: LD_INT 28
9505: PUSH
9506: LD_INT 45
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: LIST
9513: IN
9514: IFFALSE 9535
// points := [ 35 , 20 , 45 ] ;
9516: LD_ADDR_VAR 0 9
9520: PUSH
9521: LD_INT 35
9523: PUSH
9524: LD_INT 20
9526: PUSH
9527: LD_INT 45
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: LIST
9534: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9535: LD_VAR 0 6
9539: PPUSH
9540: CALL_OW 264
9544: PUSH
9545: LD_INT 47
9547: PUSH
9548: EMPTY
9549: LIST
9550: IN
9551: IFFALSE 9572
// points := [ 67 , 45 , 75 ] ;
9553: LD_ADDR_VAR 0 9
9557: PUSH
9558: LD_INT 67
9560: PUSH
9561: LD_INT 45
9563: PUSH
9564: LD_INT 75
9566: PUSH
9567: EMPTY
9568: LIST
9569: LIST
9570: LIST
9571: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9572: LD_VAR 0 6
9576: PPUSH
9577: CALL_OW 264
9581: PUSH
9582: LD_INT 26
9584: PUSH
9585: EMPTY
9586: LIST
9587: IN
9588: IFFALSE 9609
// points := [ 120 , 30 , 80 ] ;
9590: LD_ADDR_VAR 0 9
9594: PUSH
9595: LD_INT 120
9597: PUSH
9598: LD_INT 30
9600: PUSH
9601: LD_INT 80
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9609: LD_VAR 0 6
9613: PPUSH
9614: CALL_OW 264
9618: PUSH
9619: LD_INT 22
9621: PUSH
9622: EMPTY
9623: LIST
9624: IN
9625: IFFALSE 9646
// points := [ 40 , 1 , 1 ] ;
9627: LD_ADDR_VAR 0 9
9631: PUSH
9632: LD_INT 40
9634: PUSH
9635: LD_INT 1
9637: PUSH
9638: LD_INT 1
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: LIST
9645: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9646: LD_VAR 0 6
9650: PPUSH
9651: CALL_OW 264
9655: PUSH
9656: LD_INT 29
9658: PUSH
9659: EMPTY
9660: LIST
9661: IN
9662: IFFALSE 9683
// points := [ 70 , 200 , 400 ] ;
9664: LD_ADDR_VAR 0 9
9668: PUSH
9669: LD_INT 70
9671: PUSH
9672: LD_INT 200
9674: PUSH
9675: LD_INT 400
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: LIST
9682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9683: LD_VAR 0 6
9687: PPUSH
9688: CALL_OW 264
9692: PUSH
9693: LD_INT 14
9695: PUSH
9696: LD_INT 53
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: IN
9703: IFFALSE 9724
// points := [ 40 , 10 , 20 ] ;
9705: LD_ADDR_VAR 0 9
9709: PUSH
9710: LD_INT 40
9712: PUSH
9713: LD_INT 10
9715: PUSH
9716: LD_INT 20
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9724: LD_VAR 0 6
9728: PPUSH
9729: CALL_OW 264
9733: PUSH
9734: LD_INT 9
9736: PUSH
9737: EMPTY
9738: LIST
9739: IN
9740: IFFALSE 9761
// points := [ 5 , 70 , 20 ] ;
9742: LD_ADDR_VAR 0 9
9746: PUSH
9747: LD_INT 5
9749: PUSH
9750: LD_INT 70
9752: PUSH
9753: LD_INT 20
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: LIST
9760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9761: LD_VAR 0 6
9765: PPUSH
9766: CALL_OW 264
9770: PUSH
9771: LD_INT 10
9773: PUSH
9774: EMPTY
9775: LIST
9776: IN
9777: IFFALSE 9798
// points := [ 35 , 110 , 70 ] ;
9779: LD_ADDR_VAR 0 9
9783: PUSH
9784: LD_INT 35
9786: PUSH
9787: LD_INT 110
9789: PUSH
9790: LD_INT 70
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: LIST
9797: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9798: LD_VAR 0 6
9802: PPUSH
9803: CALL_OW 265
9807: PUSH
9808: LD_INT 25
9810: EQUAL
9811: IFFALSE 9832
// points := [ 80 , 65 , 100 ] ;
9813: LD_ADDR_VAR 0 9
9817: PUSH
9818: LD_INT 80
9820: PUSH
9821: LD_INT 65
9823: PUSH
9824: LD_INT 100
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: LIST
9831: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9832: LD_VAR 0 6
9836: PPUSH
9837: CALL_OW 263
9841: PUSH
9842: LD_INT 1
9844: EQUAL
9845: IFFALSE 9880
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9847: LD_ADDR_VAR 0 10
9851: PUSH
9852: LD_VAR 0 10
9856: PUSH
9857: LD_VAR 0 6
9861: PPUSH
9862: CALL_OW 311
9866: PPUSH
9867: LD_INT 3
9869: PPUSH
9870: CALL_OW 259
9874: PUSH
9875: LD_INT 4
9877: MUL
9878: MUL
9879: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9880: LD_VAR 0 6
9884: PPUSH
9885: CALL_OW 263
9889: PUSH
9890: LD_INT 2
9892: EQUAL
9893: IFFALSE 9944
// begin j := IsControledBy ( i ) ;
9895: LD_ADDR_VAR 0 7
9899: PUSH
9900: LD_VAR 0 6
9904: PPUSH
9905: CALL_OW 312
9909: ST_TO_ADDR
// if j then
9910: LD_VAR 0 7
9914: IFFALSE 9944
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9916: LD_ADDR_VAR 0 10
9920: PUSH
9921: LD_VAR 0 10
9925: PUSH
9926: LD_VAR 0 7
9930: PPUSH
9931: LD_INT 3
9933: PPUSH
9934: CALL_OW 259
9938: PUSH
9939: LD_INT 3
9941: MUL
9942: MUL
9943: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9944: LD_VAR 0 6
9948: PPUSH
9949: CALL_OW 264
9953: PUSH
9954: LD_INT 5
9956: PUSH
9957: LD_INT 6
9959: PUSH
9960: LD_INT 46
9962: PUSH
9963: LD_INT 44
9965: PUSH
9966: LD_INT 47
9968: PUSH
9969: LD_INT 45
9971: PUSH
9972: LD_INT 28
9974: PUSH
9975: LD_INT 7
9977: PUSH
9978: LD_INT 27
9980: PUSH
9981: LD_INT 29
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: IN
9996: PUSH
9997: LD_VAR 0 1
10001: PPUSH
10002: LD_INT 52
10004: PPUSH
10005: CALL_OW 321
10009: PUSH
10010: LD_INT 2
10012: EQUAL
10013: AND
10014: IFFALSE 10031
// bpoints := bpoints * 1.2 ;
10016: LD_ADDR_VAR 0 10
10020: PUSH
10021: LD_VAR 0 10
10025: PUSH
10026: LD_REAL  1.20000000000000E+0000
10029: MUL
10030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10031: LD_VAR 0 6
10035: PPUSH
10036: CALL_OW 264
10040: PUSH
10041: LD_INT 6
10043: PUSH
10044: LD_INT 46
10046: PUSH
10047: LD_INT 47
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: LIST
10054: IN
10055: IFFALSE 10072
// bpoints := bpoints * 1.2 ;
10057: LD_ADDR_VAR 0 10
10061: PUSH
10062: LD_VAR 0 10
10066: PUSH
10067: LD_REAL  1.20000000000000E+0000
10070: MUL
10071: ST_TO_ADDR
// end ; unit_building :
10072: GO 10086
10074: LD_INT 3
10076: DOUBLE
10077: EQUAL
10078: IFTRUE 10082
10080: GO 10085
10082: POP
// ; end ;
10083: GO 10086
10085: POP
// for j = 1 to 3 do
10086: LD_ADDR_VAR 0 7
10090: PUSH
10091: DOUBLE
10092: LD_INT 1
10094: DEC
10095: ST_TO_ADDR
10096: LD_INT 3
10098: PUSH
10099: FOR_TO
10100: IFFALSE 10153
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10102: LD_ADDR_VAR 0 5
10106: PUSH
10107: LD_VAR 0 5
10111: PPUSH
10112: LD_VAR 0 7
10116: PPUSH
10117: LD_VAR 0 5
10121: PUSH
10122: LD_VAR 0 7
10126: ARRAY
10127: PUSH
10128: LD_VAR 0 9
10132: PUSH
10133: LD_VAR 0 7
10137: ARRAY
10138: PUSH
10139: LD_VAR 0 10
10143: MUL
10144: PLUS
10145: PPUSH
10146: CALL_OW 1
10150: ST_TO_ADDR
10151: GO 10099
10153: POP
10154: POP
// end ;
10155: GO 8638
10157: POP
10158: POP
// result := Replace ( result , 4 , tmp ) ;
10159: LD_ADDR_VAR 0 5
10163: PUSH
10164: LD_VAR 0 5
10168: PPUSH
10169: LD_INT 4
10171: PPUSH
10172: LD_VAR 0 8
10176: PPUSH
10177: CALL_OW 1
10181: ST_TO_ADDR
// end ;
10182: LD_VAR 0 5
10186: RET
// export function DangerAtRange ( unit , range ) ; begin
10187: LD_INT 0
10189: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10190: LD_ADDR_VAR 0 3
10194: PUSH
10195: LD_VAR 0 1
10199: PPUSH
10200: CALL_OW 255
10204: PPUSH
10205: LD_VAR 0 1
10209: PPUSH
10210: CALL_OW 250
10214: PPUSH
10215: LD_VAR 0 1
10219: PPUSH
10220: CALL_OW 251
10224: PPUSH
10225: LD_VAR 0 2
10229: PPUSH
10230: CALL 8490 0 4
10234: ST_TO_ADDR
// end ;
10235: LD_VAR 0 3
10239: RET
// export function IsExtension ( b ) ; begin
10240: LD_INT 0
10242: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10243: LD_ADDR_VAR 0 2
10247: PUSH
10248: LD_VAR 0 1
10252: PPUSH
10253: CALL_OW 266
10257: PUSH
10258: LD_INT 23
10260: PUSH
10261: LD_INT 20
10263: PUSH
10264: LD_INT 22
10266: PUSH
10267: LD_INT 17
10269: PUSH
10270: LD_INT 24
10272: PUSH
10273: LD_INT 21
10275: PUSH
10276: LD_INT 19
10278: PUSH
10279: LD_INT 16
10281: PUSH
10282: LD_INT 25
10284: PUSH
10285: LD_INT 18
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: IN
10300: ST_TO_ADDR
// end ;
10301: LD_VAR 0 2
10305: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
10306: LD_INT 0
10308: PPUSH
10309: PPUSH
10310: PPUSH
// result := [ ] ;
10311: LD_ADDR_VAR 0 2
10315: PUSH
10316: EMPTY
10317: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
10318: LD_ADDR_VAR 0 3
10322: PUSH
10323: LD_INT 21
10325: PUSH
10326: LD_INT 3
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PPUSH
10333: CALL_OW 69
10337: ST_TO_ADDR
// if not tmp then
10338: LD_VAR 0 3
10342: NOT
10343: IFFALSE 10347
// exit ;
10345: GO 10397
// for i in tmp do
10347: LD_ADDR_VAR 0 4
10351: PUSH
10352: LD_VAR 0 3
10356: PUSH
10357: FOR_IN
10358: IFFALSE 10395
// if GetBase ( i ) = base then
10360: LD_VAR 0 4
10364: PPUSH
10365: CALL_OW 274
10369: PUSH
10370: LD_VAR 0 1
10374: EQUAL
10375: IFFALSE 10393
// result := result ^ i ;
10377: LD_ADDR_VAR 0 2
10381: PUSH
10382: LD_VAR 0 2
10386: PUSH
10387: LD_VAR 0 4
10391: ADD
10392: ST_TO_ADDR
10393: GO 10357
10395: POP
10396: POP
// end ;
10397: LD_VAR 0 2
10401: RET
// export function ComComplete ( unit , b ) ; var i ; begin
10402: LD_INT 0
10404: PPUSH
10405: PPUSH
// if BuildingStatus ( b ) = bs_build then
10406: LD_VAR 0 2
10410: PPUSH
10411: CALL_OW 461
10415: PUSH
10416: LD_INT 1
10418: EQUAL
10419: IFFALSE 10479
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10421: LD_VAR 0 1
10425: PPUSH
10426: LD_STRING h
10428: PUSH
10429: LD_VAR 0 2
10433: PPUSH
10434: CALL_OW 250
10438: PUSH
10439: LD_VAR 0 2
10443: PPUSH
10444: CALL_OW 251
10448: PUSH
10449: LD_VAR 0 2
10453: PUSH
10454: LD_INT 0
10456: PUSH
10457: LD_INT 0
10459: PUSH
10460: LD_INT 0
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: PUSH
10472: EMPTY
10473: LIST
10474: PPUSH
10475: CALL_OW 446
// end ;
10479: LD_VAR 0 3
10483: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10484: LD_INT 0
10486: PPUSH
10487: PPUSH
10488: PPUSH
10489: PPUSH
10490: PPUSH
10491: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
10492: LD_VAR 0 1
10496: NOT
10497: PUSH
10498: LD_VAR 0 1
10502: PPUSH
10503: CALL_OW 263
10507: PUSH
10508: LD_INT 2
10510: EQUAL
10511: NOT
10512: OR
10513: IFFALSE 10517
// exit ;
10515: GO 10833
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10517: LD_ADDR_VAR 0 6
10521: PUSH
10522: LD_INT 22
10524: PUSH
10525: LD_VAR 0 1
10529: PPUSH
10530: CALL_OW 255
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 2
10541: PUSH
10542: LD_INT 30
10544: PUSH
10545: LD_INT 36
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PUSH
10552: LD_INT 34
10554: PUSH
10555: LD_INT 31
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: LIST
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL_OW 69
10575: ST_TO_ADDR
// if not tmp then
10576: LD_VAR 0 6
10580: NOT
10581: IFFALSE 10585
// exit ;
10583: GO 10833
// result := [ ] ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: EMPTY
10591: ST_TO_ADDR
// for i in tmp do
10592: LD_ADDR_VAR 0 3
10596: PUSH
10597: LD_VAR 0 6
10601: PUSH
10602: FOR_IN
10603: IFFALSE 10674
// begin t := UnitsInside ( i ) ;
10605: LD_ADDR_VAR 0 4
10609: PUSH
10610: LD_VAR 0 3
10614: PPUSH
10615: CALL_OW 313
10619: ST_TO_ADDR
// if t then
10620: LD_VAR 0 4
10624: IFFALSE 10672
// for j in t do
10626: LD_ADDR_VAR 0 7
10630: PUSH
10631: LD_VAR 0 4
10635: PUSH
10636: FOR_IN
10637: IFFALSE 10670
// result := Insert ( result , result + 1 , j ) ;
10639: LD_ADDR_VAR 0 2
10643: PUSH
10644: LD_VAR 0 2
10648: PPUSH
10649: LD_VAR 0 2
10653: PUSH
10654: LD_INT 1
10656: PLUS
10657: PPUSH
10658: LD_VAR 0 7
10662: PPUSH
10663: CALL_OW 2
10667: ST_TO_ADDR
10668: GO 10636
10670: POP
10671: POP
// end ;
10672: GO 10602
10674: POP
10675: POP
// if not result then
10676: LD_VAR 0 2
10680: NOT
10681: IFFALSE 10685
// exit ;
10683: GO 10833
// mech := result [ 1 ] ;
10685: LD_ADDR_VAR 0 5
10689: PUSH
10690: LD_VAR 0 2
10694: PUSH
10695: LD_INT 1
10697: ARRAY
10698: ST_TO_ADDR
// if result > 1 then
10699: LD_VAR 0 2
10703: PUSH
10704: LD_INT 1
10706: GREATER
10707: IFFALSE 10819
// for i = 2 to result do
10709: LD_ADDR_VAR 0 3
10713: PUSH
10714: DOUBLE
10715: LD_INT 2
10717: DEC
10718: ST_TO_ADDR
10719: LD_VAR 0 2
10723: PUSH
10724: FOR_TO
10725: IFFALSE 10817
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10727: LD_ADDR_VAR 0 4
10731: PUSH
10732: LD_VAR 0 2
10736: PUSH
10737: LD_VAR 0 3
10741: ARRAY
10742: PPUSH
10743: LD_INT 3
10745: PPUSH
10746: CALL_OW 259
10750: PUSH
10751: LD_VAR 0 2
10755: PUSH
10756: LD_VAR 0 3
10760: ARRAY
10761: PPUSH
10762: CALL_OW 432
10766: MINUS
10767: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10768: LD_VAR 0 4
10772: PUSH
10773: LD_VAR 0 5
10777: PPUSH
10778: LD_INT 3
10780: PPUSH
10781: CALL_OW 259
10785: PUSH
10786: LD_VAR 0 5
10790: PPUSH
10791: CALL_OW 432
10795: MINUS
10796: GREATEREQUAL
10797: IFFALSE 10815
// mech := result [ i ] ;
10799: LD_ADDR_VAR 0 5
10803: PUSH
10804: LD_VAR 0 2
10808: PUSH
10809: LD_VAR 0 3
10813: ARRAY
10814: ST_TO_ADDR
// end ;
10815: GO 10724
10817: POP
10818: POP
// ComLinkTo ( vehicle , mech ) ;
10819: LD_VAR 0 1
10823: PPUSH
10824: LD_VAR 0 5
10828: PPUSH
10829: CALL_OW 135
// end ;
10833: LD_VAR 0 2
10837: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
10838: LD_INT 0
10840: PPUSH
10841: PPUSH
10842: PPUSH
10843: PPUSH
10844: PPUSH
10845: PPUSH
10846: PPUSH
10847: PPUSH
10848: PPUSH
10849: PPUSH
10850: PPUSH
10851: PPUSH
// result := [ ] ;
10852: LD_ADDR_VAR 0 6
10856: PUSH
10857: EMPTY
10858: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10859: LD_VAR 0 1
10863: PPUSH
10864: CALL_OW 266
10868: PUSH
10869: LD_INT 0
10871: PUSH
10872: LD_INT 1
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: IN
10879: NOT
10880: IFFALSE 10884
// exit ;
10882: GO 12293
// if name then
10884: LD_VAR 0 2
10888: IFFALSE 10904
// SetBName ( base_dep , name ) ;
10890: LD_VAR 0 1
10894: PPUSH
10895: LD_VAR 0 2
10899: PPUSH
10900: CALL_OW 500
// base := GetBase ( base_dep ) ;
10904: LD_ADDR_VAR 0 14
10908: PUSH
10909: LD_VAR 0 1
10913: PPUSH
10914: CALL_OW 274
10918: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10919: LD_ADDR_VAR 0 15
10923: PUSH
10924: LD_VAR 0 1
10928: PPUSH
10929: CALL_OW 255
10933: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10934: LD_ADDR_VAR 0 16
10938: PUSH
10939: LD_VAR 0 1
10943: PPUSH
10944: CALL_OW 248
10948: ST_TO_ADDR
// if sources then
10949: LD_VAR 0 4
10953: IFFALSE 11000
// for i = 1 to 3 do
10955: LD_ADDR_VAR 0 7
10959: PUSH
10960: DOUBLE
10961: LD_INT 1
10963: DEC
10964: ST_TO_ADDR
10965: LD_INT 3
10967: PUSH
10968: FOR_TO
10969: IFFALSE 10998
// AddResourceType ( base , i , sources [ i ] ) ;
10971: LD_VAR 0 14
10975: PPUSH
10976: LD_VAR 0 7
10980: PPUSH
10981: LD_VAR 0 4
10985: PUSH
10986: LD_VAR 0 7
10990: ARRAY
10991: PPUSH
10992: CALL_OW 276
10996: GO 10968
10998: POP
10999: POP
// buildings := GetBaseBuildings ( base ) ;
11000: LD_ADDR_VAR 0 17
11004: PUSH
11005: LD_VAR 0 14
11009: PPUSH
11010: CALL 10306 0 1
11014: ST_TO_ADDR
// InitHc ;
11015: CALL_OW 19
// InitUc ;
11019: CALL_OW 18
// uc_side := side ;
11023: LD_ADDR_OWVAR 20
11027: PUSH
11028: LD_VAR 0 15
11032: ST_TO_ADDR
// uc_nation := nation ;
11033: LD_ADDR_OWVAR 21
11037: PUSH
11038: LD_VAR 0 16
11042: ST_TO_ADDR
// if buildings then
11043: LD_VAR 0 17
11047: IFFALSE 12152
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11049: LD_VAR 0 17
11053: PPUSH
11054: LD_INT 2
11056: PUSH
11057: LD_INT 30
11059: PUSH
11060: LD_INT 32
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PUSH
11067: LD_INT 30
11069: PUSH
11070: LD_INT 33
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: LIST
11081: PPUSH
11082: CALL_OW 72
11086: IFFALSE 11169
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11088: LD_ADDR_VAR 0 7
11092: PUSH
11093: LD_VAR 0 17
11097: PPUSH
11098: LD_INT 2
11100: PUSH
11101: LD_INT 30
11103: PUSH
11104: LD_INT 32
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: LD_INT 30
11113: PUSH
11114: LD_INT 33
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: PPUSH
11126: CALL_OW 72
11130: PUSH
11131: FOR_IN
11132: IFFALSE 11167
// begin if not GetBWeapon ( i ) then
11134: LD_VAR 0 7
11138: PPUSH
11139: CALL_OW 269
11143: NOT
11144: IFFALSE 11165
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
11146: LD_VAR 0 7
11150: PPUSH
11151: LD_VAR 0 7
11155: PPUSH
11156: CALL 12298 0 1
11160: PPUSH
11161: CALL_OW 431
// end ;
11165: GO 11131
11167: POP
11168: POP
// end ; for i = 1 to personel do
11169: LD_ADDR_VAR 0 7
11173: PUSH
11174: DOUBLE
11175: LD_INT 1
11177: DEC
11178: ST_TO_ADDR
11179: LD_VAR 0 5
11183: PUSH
11184: FOR_TO
11185: IFFALSE 12132
// begin if i > 4 then
11187: LD_VAR 0 7
11191: PUSH
11192: LD_INT 4
11194: GREATER
11195: IFFALSE 11199
// break ;
11197: GO 12132
// case i of 1 :
11199: LD_VAR 0 7
11203: PUSH
11204: LD_INT 1
11206: DOUBLE
11207: EQUAL
11208: IFTRUE 11212
11210: GO 11285
11212: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11213: LD_ADDR_VAR 0 11
11217: PUSH
11218: LD_VAR 0 17
11222: PPUSH
11223: LD_INT 22
11225: PUSH
11226: LD_VAR 0 15
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 2
11237: PUSH
11238: LD_INT 30
11240: PUSH
11241: LD_INT 32
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 30
11250: PUSH
11251: LD_INT 4
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 30
11260: PUSH
11261: LD_INT 5
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PPUSH
11278: CALL_OW 72
11282: ST_TO_ADDR
11283: GO 11507
11285: LD_INT 2
11287: DOUBLE
11288: EQUAL
11289: IFTRUE 11293
11291: GO 11355
11293: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11294: LD_ADDR_VAR 0 11
11298: PUSH
11299: LD_VAR 0 17
11303: PPUSH
11304: LD_INT 22
11306: PUSH
11307: LD_VAR 0 15
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PUSH
11316: LD_INT 2
11318: PUSH
11319: LD_INT 30
11321: PUSH
11322: LD_INT 0
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: LD_INT 30
11331: PUSH
11332: LD_INT 1
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: LIST
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PPUSH
11348: CALL_OW 72
11352: ST_TO_ADDR
11353: GO 11507
11355: LD_INT 3
11357: DOUBLE
11358: EQUAL
11359: IFTRUE 11363
11361: GO 11425
11363: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11364: LD_ADDR_VAR 0 11
11368: PUSH
11369: LD_VAR 0 17
11373: PPUSH
11374: LD_INT 22
11376: PUSH
11377: LD_VAR 0 15
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PUSH
11386: LD_INT 2
11388: PUSH
11389: LD_INT 30
11391: PUSH
11392: LD_INT 2
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 30
11401: PUSH
11402: LD_INT 3
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: LIST
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: PPUSH
11418: CALL_OW 72
11422: ST_TO_ADDR
11423: GO 11507
11425: LD_INT 4
11427: DOUBLE
11428: EQUAL
11429: IFTRUE 11433
11431: GO 11506
11433: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11434: LD_ADDR_VAR 0 11
11438: PUSH
11439: LD_VAR 0 17
11443: PPUSH
11444: LD_INT 22
11446: PUSH
11447: LD_VAR 0 15
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 2
11458: PUSH
11459: LD_INT 30
11461: PUSH
11462: LD_INT 6
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 30
11471: PUSH
11472: LD_INT 7
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: LD_INT 30
11481: PUSH
11482: LD_INT 8
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PPUSH
11499: CALL_OW 72
11503: ST_TO_ADDR
11504: GO 11507
11506: POP
// if not f then
11507: LD_VAR 0 11
11511: NOT
11512: IFFALSE 11516
// continue ;
11514: GO 11184
// x := personel [ i ] ;
11516: LD_ADDR_VAR 0 12
11520: PUSH
11521: LD_VAR 0 5
11525: PUSH
11526: LD_VAR 0 7
11530: ARRAY
11531: ST_TO_ADDR
// if x = - 1 then
11532: LD_VAR 0 12
11536: PUSH
11537: LD_INT 1
11539: NEG
11540: EQUAL
11541: IFFALSE 11750
// begin for j in f do
11543: LD_ADDR_VAR 0 8
11547: PUSH
11548: LD_VAR 0 11
11552: PUSH
11553: FOR_IN
11554: IFFALSE 11746
// repeat InitHc ;
11556: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11560: LD_VAR 0 8
11564: PPUSH
11565: CALL_OW 266
11569: PUSH
11570: LD_INT 5
11572: EQUAL
11573: IFFALSE 11643
// begin if UnitsInside ( j ) < 3 then
11575: LD_VAR 0 8
11579: PPUSH
11580: CALL_OW 313
11584: PUSH
11585: LD_INT 3
11587: LESS
11588: IFFALSE 11624
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11590: LD_INT 0
11592: PPUSH
11593: LD_INT 5
11595: PUSH
11596: LD_INT 8
11598: PUSH
11599: LD_INT 9
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: LD_VAR 0 16
11611: ARRAY
11612: PPUSH
11613: LD_VAR 0 3
11617: PPUSH
11618: CALL_OW 380
11622: GO 11641
// PrepareHuman ( false , i , skill ) ;
11624: LD_INT 0
11626: PPUSH
11627: LD_VAR 0 7
11631: PPUSH
11632: LD_VAR 0 3
11636: PPUSH
11637: CALL_OW 380
// end else
11641: GO 11660
// PrepareHuman ( false , i , skill ) ;
11643: LD_INT 0
11645: PPUSH
11646: LD_VAR 0 7
11650: PPUSH
11651: LD_VAR 0 3
11655: PPUSH
11656: CALL_OW 380
// un := CreateHuman ;
11660: LD_ADDR_VAR 0 13
11664: PUSH
11665: CALL_OW 44
11669: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11670: LD_ADDR_VAR 0 6
11674: PUSH
11675: LD_VAR 0 6
11679: PPUSH
11680: LD_INT 1
11682: PPUSH
11683: LD_VAR 0 13
11687: PPUSH
11688: CALL_OW 2
11692: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11693: LD_VAR 0 13
11697: PPUSH
11698: LD_VAR 0 8
11702: PPUSH
11703: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11707: LD_VAR 0 8
11711: PPUSH
11712: CALL_OW 313
11716: PUSH
11717: LD_INT 6
11719: EQUAL
11720: PUSH
11721: LD_VAR 0 8
11725: PPUSH
11726: CALL_OW 266
11730: PUSH
11731: LD_INT 32
11733: PUSH
11734: LD_INT 31
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: IN
11741: OR
11742: IFFALSE 11556
11744: GO 11553
11746: POP
11747: POP
// end else
11748: GO 12130
// for j = 1 to x do
11750: LD_ADDR_VAR 0 8
11754: PUSH
11755: DOUBLE
11756: LD_INT 1
11758: DEC
11759: ST_TO_ADDR
11760: LD_VAR 0 12
11764: PUSH
11765: FOR_TO
11766: IFFALSE 12128
// begin InitHc ;
11768: CALL_OW 19
// if not f then
11772: LD_VAR 0 11
11776: NOT
11777: IFFALSE 11866
// begin PrepareHuman ( false , i , skill ) ;
11779: LD_INT 0
11781: PPUSH
11782: LD_VAR 0 7
11786: PPUSH
11787: LD_VAR 0 3
11791: PPUSH
11792: CALL_OW 380
// un := CreateHuman ;
11796: LD_ADDR_VAR 0 13
11800: PUSH
11801: CALL_OW 44
11805: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11806: LD_ADDR_VAR 0 6
11810: PUSH
11811: LD_VAR 0 6
11815: PPUSH
11816: LD_INT 1
11818: PPUSH
11819: LD_VAR 0 13
11823: PPUSH
11824: CALL_OW 2
11828: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11829: LD_VAR 0 13
11833: PPUSH
11834: LD_VAR 0 1
11838: PPUSH
11839: CALL_OW 250
11843: PPUSH
11844: LD_VAR 0 1
11848: PPUSH
11849: CALL_OW 251
11853: PPUSH
11854: LD_INT 10
11856: PPUSH
11857: LD_INT 0
11859: PPUSH
11860: CALL_OW 50
// continue ;
11864: GO 11765
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11866: LD_VAR 0 11
11870: PUSH
11871: LD_INT 1
11873: ARRAY
11874: PPUSH
11875: CALL_OW 313
11879: PUSH
11880: LD_VAR 0 11
11884: PUSH
11885: LD_INT 1
11887: ARRAY
11888: PPUSH
11889: CALL_OW 266
11893: PUSH
11894: LD_INT 32
11896: PUSH
11897: LD_INT 31
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: IN
11904: AND
11905: PUSH
11906: LD_VAR 0 11
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PPUSH
11915: CALL_OW 313
11919: PUSH
11920: LD_INT 6
11922: EQUAL
11923: OR
11924: IFFALSE 11944
// f := Delete ( f , 1 ) ;
11926: LD_ADDR_VAR 0 11
11930: PUSH
11931: LD_VAR 0 11
11935: PPUSH
11936: LD_INT 1
11938: PPUSH
11939: CALL_OW 3
11943: ST_TO_ADDR
// if not f then
11944: LD_VAR 0 11
11948: NOT
11949: IFFALSE 11967
// begin x := x + 2 ;
11951: LD_ADDR_VAR 0 12
11955: PUSH
11956: LD_VAR 0 12
11960: PUSH
11961: LD_INT 2
11963: PLUS
11964: ST_TO_ADDR
// continue ;
11965: GO 11765
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11967: LD_VAR 0 11
11971: PUSH
11972: LD_INT 1
11974: ARRAY
11975: PPUSH
11976: CALL_OW 266
11980: PUSH
11981: LD_INT 5
11983: EQUAL
11984: IFFALSE 12058
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11986: LD_VAR 0 11
11990: PUSH
11991: LD_INT 1
11993: ARRAY
11994: PPUSH
11995: CALL_OW 313
11999: PUSH
12000: LD_INT 3
12002: LESS
12003: IFFALSE 12039
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12005: LD_INT 0
12007: PPUSH
12008: LD_INT 5
12010: PUSH
12011: LD_INT 8
12013: PUSH
12014: LD_INT 9
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: LIST
12021: PUSH
12022: LD_VAR 0 16
12026: ARRAY
12027: PPUSH
12028: LD_VAR 0 3
12032: PPUSH
12033: CALL_OW 380
12037: GO 12056
// PrepareHuman ( false , i , skill ) ;
12039: LD_INT 0
12041: PPUSH
12042: LD_VAR 0 7
12046: PPUSH
12047: LD_VAR 0 3
12051: PPUSH
12052: CALL_OW 380
// end else
12056: GO 12075
// PrepareHuman ( false , i , skill ) ;
12058: LD_INT 0
12060: PPUSH
12061: LD_VAR 0 7
12065: PPUSH
12066: LD_VAR 0 3
12070: PPUSH
12071: CALL_OW 380
// un := CreateHuman ;
12075: LD_ADDR_VAR 0 13
12079: PUSH
12080: CALL_OW 44
12084: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12085: LD_ADDR_VAR 0 6
12089: PUSH
12090: LD_VAR 0 6
12094: PPUSH
12095: LD_INT 1
12097: PPUSH
12098: LD_VAR 0 13
12102: PPUSH
12103: CALL_OW 2
12107: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12108: LD_VAR 0 13
12112: PPUSH
12113: LD_VAR 0 11
12117: PUSH
12118: LD_INT 1
12120: ARRAY
12121: PPUSH
12122: CALL_OW 52
// end ;
12126: GO 11765
12128: POP
12129: POP
// end ;
12130: GO 11184
12132: POP
12133: POP
// result := result ^ buildings ;
12134: LD_ADDR_VAR 0 6
12138: PUSH
12139: LD_VAR 0 6
12143: PUSH
12144: LD_VAR 0 17
12148: ADD
12149: ST_TO_ADDR
// end else
12150: GO 12293
// begin for i = 1 to personel do
12152: LD_ADDR_VAR 0 7
12156: PUSH
12157: DOUBLE
12158: LD_INT 1
12160: DEC
12161: ST_TO_ADDR
12162: LD_VAR 0 5
12166: PUSH
12167: FOR_TO
12168: IFFALSE 12291
// begin if i > 4 then
12170: LD_VAR 0 7
12174: PUSH
12175: LD_INT 4
12177: GREATER
12178: IFFALSE 12182
// break ;
12180: GO 12291
// x := personel [ i ] ;
12182: LD_ADDR_VAR 0 12
12186: PUSH
12187: LD_VAR 0 5
12191: PUSH
12192: LD_VAR 0 7
12196: ARRAY
12197: ST_TO_ADDR
// if x = - 1 then
12198: LD_VAR 0 12
12202: PUSH
12203: LD_INT 1
12205: NEG
12206: EQUAL
12207: IFFALSE 12211
// continue ;
12209: GO 12167
// PrepareHuman ( false , i , skill ) ;
12211: LD_INT 0
12213: PPUSH
12214: LD_VAR 0 7
12218: PPUSH
12219: LD_VAR 0 3
12223: PPUSH
12224: CALL_OW 380
// un := CreateHuman ;
12228: LD_ADDR_VAR 0 13
12232: PUSH
12233: CALL_OW 44
12237: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12238: LD_VAR 0 13
12242: PPUSH
12243: LD_VAR 0 1
12247: PPUSH
12248: CALL_OW 250
12252: PPUSH
12253: LD_VAR 0 1
12257: PPUSH
12258: CALL_OW 251
12262: PPUSH
12263: LD_INT 10
12265: PPUSH
12266: LD_INT 0
12268: PPUSH
12269: CALL_OW 50
// result := result ^ un ;
12273: LD_ADDR_VAR 0 6
12277: PUSH
12278: LD_VAR 0 6
12282: PUSH
12283: LD_VAR 0 13
12287: ADD
12288: ST_TO_ADDR
// end ;
12289: GO 12167
12291: POP
12292: POP
// end ; end ;
12293: LD_VAR 0 6
12297: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12298: LD_INT 0
12300: PPUSH
12301: PPUSH
12302: PPUSH
12303: PPUSH
12304: PPUSH
12305: PPUSH
12306: PPUSH
12307: PPUSH
12308: PPUSH
12309: PPUSH
12310: PPUSH
12311: PPUSH
12312: PPUSH
12313: PPUSH
12314: PPUSH
12315: PPUSH
// result := false ;
12316: LD_ADDR_VAR 0 2
12320: PUSH
12321: LD_INT 0
12323: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12324: LD_VAR 0 1
12328: NOT
12329: PUSH
12330: LD_VAR 0 1
12334: PPUSH
12335: CALL_OW 266
12339: PUSH
12340: LD_INT 32
12342: PUSH
12343: LD_INT 33
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: IN
12350: NOT
12351: OR
12352: IFFALSE 12356
// exit ;
12354: GO 13589
// nat := GetNation ( tower ) ;
12356: LD_ADDR_VAR 0 11
12360: PUSH
12361: LD_VAR 0 1
12365: PPUSH
12366: CALL_OW 248
12370: ST_TO_ADDR
// side := GetSide ( tower ) ;
12371: LD_ADDR_VAR 0 15
12375: PUSH
12376: LD_VAR 0 1
12380: PPUSH
12381: CALL_OW 255
12385: ST_TO_ADDR
// x := GetX ( tower ) ;
12386: LD_ADDR_VAR 0 9
12390: PUSH
12391: LD_VAR 0 1
12395: PPUSH
12396: CALL_OW 250
12400: ST_TO_ADDR
// y := GetY ( tower ) ;
12401: LD_ADDR_VAR 0 10
12405: PUSH
12406: LD_VAR 0 1
12410: PPUSH
12411: CALL_OW 251
12415: ST_TO_ADDR
// if not x or not y then
12416: LD_VAR 0 9
12420: NOT
12421: PUSH
12422: LD_VAR 0 10
12426: NOT
12427: OR
12428: IFFALSE 12432
// exit ;
12430: GO 13589
// weapon := 0 ;
12432: LD_ADDR_VAR 0 17
12436: PUSH
12437: LD_INT 0
12439: ST_TO_ADDR
// fac_list := [ ] ;
12440: LD_ADDR_VAR 0 16
12444: PUSH
12445: EMPTY
12446: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
12447: LD_ADDR_VAR 0 5
12451: PUSH
12452: LD_VAR 0 1
12456: PPUSH
12457: CALL_OW 274
12461: PPUSH
12462: CALL 10306 0 1
12466: PPUSH
12467: LD_INT 30
12469: PUSH
12470: LD_INT 3
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PPUSH
12477: CALL_OW 72
12481: ST_TO_ADDR
// if not factories then
12482: LD_VAR 0 5
12486: NOT
12487: IFFALSE 12491
// exit ;
12489: GO 13589
// for i in factories do
12491: LD_ADDR_VAR 0 7
12495: PUSH
12496: LD_VAR 0 5
12500: PUSH
12501: FOR_IN
12502: IFFALSE 12527
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12504: LD_ADDR_VAR 0 16
12508: PUSH
12509: LD_VAR 0 16
12513: PUSH
12514: LD_VAR 0 7
12518: PPUSH
12519: CALL_OW 478
12523: UNION
12524: ST_TO_ADDR
12525: GO 12501
12527: POP
12528: POP
// if not fac_list then
12529: LD_VAR 0 16
12533: NOT
12534: IFFALSE 12538
// exit ;
12536: GO 13589
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12538: LD_ADDR_VAR 0 4
12542: PUSH
12543: LD_INT 4
12545: PUSH
12546: LD_INT 5
12548: PUSH
12549: LD_INT 9
12551: PUSH
12552: LD_INT 10
12554: PUSH
12555: LD_INT 6
12557: PUSH
12558: LD_INT 7
12560: PUSH
12561: LD_INT 11
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 27
12575: PUSH
12576: LD_INT 28
12578: PUSH
12579: LD_INT 26
12581: PUSH
12582: LD_INT 30
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 43
12593: PUSH
12594: LD_INT 44
12596: PUSH
12597: LD_INT 46
12599: PUSH
12600: LD_INT 45
12602: PUSH
12603: LD_INT 47
12605: PUSH
12606: LD_INT 49
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: LIST
12621: PUSH
12622: LD_VAR 0 11
12626: ARRAY
12627: ST_TO_ADDR
// for i in list do
12628: LD_ADDR_VAR 0 7
12632: PUSH
12633: LD_VAR 0 4
12637: PUSH
12638: FOR_IN
12639: IFFALSE 12672
// if not i in fac_list then
12641: LD_VAR 0 7
12645: PUSH
12646: LD_VAR 0 16
12650: IN
12651: NOT
12652: IFFALSE 12670
// list := list diff i ;
12654: LD_ADDR_VAR 0 4
12658: PUSH
12659: LD_VAR 0 4
12663: PUSH
12664: LD_VAR 0 7
12668: DIFF
12669: ST_TO_ADDR
12670: GO 12638
12672: POP
12673: POP
// if not list then
12674: LD_VAR 0 4
12678: NOT
12679: IFFALSE 12683
// exit ;
12681: GO 13589
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12683: LD_VAR 0 11
12687: PUSH
12688: LD_INT 3
12690: EQUAL
12691: PUSH
12692: LD_INT 49
12694: PUSH
12695: LD_VAR 0 4
12699: IN
12700: AND
12701: PUSH
12702: LD_INT 31
12704: PPUSH
12705: LD_VAR 0 15
12709: PPUSH
12710: CALL_OW 321
12714: PUSH
12715: LD_INT 2
12717: EQUAL
12718: AND
12719: IFFALSE 12779
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12721: LD_INT 22
12723: PUSH
12724: LD_VAR 0 15
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: LD_INT 35
12735: PUSH
12736: LD_INT 49
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: LD_INT 91
12745: PUSH
12746: LD_VAR 0 1
12750: PUSH
12751: LD_INT 10
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: LIST
12763: PPUSH
12764: CALL_OW 69
12768: NOT
12769: IFFALSE 12779
// weapon := ru_time_lapser ;
12771: LD_ADDR_VAR 0 17
12775: PUSH
12776: LD_INT 49
12778: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12779: LD_VAR 0 11
12783: PUSH
12784: LD_INT 1
12786: PUSH
12787: LD_INT 2
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: IN
12794: PUSH
12795: LD_INT 11
12797: PUSH
12798: LD_VAR 0 4
12802: IN
12803: PUSH
12804: LD_INT 30
12806: PUSH
12807: LD_VAR 0 4
12811: IN
12812: OR
12813: AND
12814: PUSH
12815: LD_INT 6
12817: PPUSH
12818: LD_VAR 0 15
12822: PPUSH
12823: CALL_OW 321
12827: PUSH
12828: LD_INT 2
12830: EQUAL
12831: AND
12832: IFFALSE 12997
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12834: LD_INT 22
12836: PUSH
12837: LD_VAR 0 15
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 2
12848: PUSH
12849: LD_INT 35
12851: PUSH
12852: LD_INT 11
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PUSH
12859: LD_INT 35
12861: PUSH
12862: LD_INT 30
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 91
12876: PUSH
12877: LD_VAR 0 1
12881: PUSH
12882: LD_INT 18
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: LIST
12894: PPUSH
12895: CALL_OW 69
12899: NOT
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_VAR 0 15
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 2
12915: PUSH
12916: LD_INT 30
12918: PUSH
12919: LD_INT 32
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 30
12928: PUSH
12929: LD_INT 33
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 91
12943: PUSH
12944: LD_VAR 0 1
12948: PUSH
12949: LD_INT 12
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: LIST
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: PPUSH
12965: CALL_OW 69
12969: PUSH
12970: LD_INT 2
12972: GREATER
12973: AND
12974: IFFALSE 12997
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12976: LD_ADDR_VAR 0 17
12980: PUSH
12981: LD_INT 11
12983: PUSH
12984: LD_INT 30
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PUSH
12991: LD_VAR 0 11
12995: ARRAY
12996: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12997: LD_VAR 0 17
13001: NOT
13002: PUSH
13003: LD_INT 40
13005: PPUSH
13006: LD_VAR 0 15
13010: PPUSH
13011: CALL_OW 321
13015: PUSH
13016: LD_INT 2
13018: EQUAL
13019: AND
13020: PUSH
13021: LD_INT 7
13023: PUSH
13024: LD_VAR 0 4
13028: IN
13029: PUSH
13030: LD_INT 28
13032: PUSH
13033: LD_VAR 0 4
13037: IN
13038: OR
13039: PUSH
13040: LD_INT 45
13042: PUSH
13043: LD_VAR 0 4
13047: IN
13048: OR
13049: AND
13050: IFFALSE 13304
// begin hex := GetHexInfo ( x , y ) ;
13052: LD_ADDR_VAR 0 3
13056: PUSH
13057: LD_VAR 0 9
13061: PPUSH
13062: LD_VAR 0 10
13066: PPUSH
13067: CALL_OW 546
13071: ST_TO_ADDR
// if hex [ 1 ] then
13072: LD_VAR 0 3
13076: PUSH
13077: LD_INT 1
13079: ARRAY
13080: IFFALSE 13084
// exit ;
13082: GO 13589
// height := hex [ 2 ] ;
13084: LD_ADDR_VAR 0 14
13088: PUSH
13089: LD_VAR 0 3
13093: PUSH
13094: LD_INT 2
13096: ARRAY
13097: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13098: LD_ADDR_VAR 0 13
13102: PUSH
13103: LD_INT 0
13105: PUSH
13106: LD_INT 2
13108: PUSH
13109: LD_INT 3
13111: PUSH
13112: LD_INT 5
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: ST_TO_ADDR
// for i in tmp do
13121: LD_ADDR_VAR 0 7
13125: PUSH
13126: LD_VAR 0 13
13130: PUSH
13131: FOR_IN
13132: IFFALSE 13302
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13134: LD_ADDR_VAR 0 8
13138: PUSH
13139: LD_VAR 0 9
13143: PPUSH
13144: LD_VAR 0 7
13148: PPUSH
13149: LD_INT 5
13151: PPUSH
13152: CALL_OW 272
13156: PUSH
13157: LD_VAR 0 10
13161: PPUSH
13162: LD_VAR 0 7
13166: PPUSH
13167: LD_INT 5
13169: PPUSH
13170: CALL_OW 273
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13179: LD_VAR 0 8
13183: PUSH
13184: LD_INT 1
13186: ARRAY
13187: PPUSH
13188: LD_VAR 0 8
13192: PUSH
13193: LD_INT 2
13195: ARRAY
13196: PPUSH
13197: CALL_OW 488
13201: IFFALSE 13300
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13203: LD_ADDR_VAR 0 3
13207: PUSH
13208: LD_VAR 0 8
13212: PUSH
13213: LD_INT 1
13215: ARRAY
13216: PPUSH
13217: LD_VAR 0 8
13221: PUSH
13222: LD_INT 2
13224: ARRAY
13225: PPUSH
13226: CALL_OW 546
13230: ST_TO_ADDR
// if hex [ 1 ] then
13231: LD_VAR 0 3
13235: PUSH
13236: LD_INT 1
13238: ARRAY
13239: IFFALSE 13243
// continue ;
13241: GO 13131
// h := hex [ 2 ] ;
13243: LD_ADDR_VAR 0 12
13247: PUSH
13248: LD_VAR 0 3
13252: PUSH
13253: LD_INT 2
13255: ARRAY
13256: ST_TO_ADDR
// if h + 7 < height then
13257: LD_VAR 0 12
13261: PUSH
13262: LD_INT 7
13264: PLUS
13265: PUSH
13266: LD_VAR 0 14
13270: LESS
13271: IFFALSE 13300
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13273: LD_ADDR_VAR 0 17
13277: PUSH
13278: LD_INT 7
13280: PUSH
13281: LD_INT 28
13283: PUSH
13284: LD_INT 45
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: LIST
13291: PUSH
13292: LD_VAR 0 11
13296: ARRAY
13297: ST_TO_ADDR
// break ;
13298: GO 13302
// end ; end ; end ;
13300: GO 13131
13302: POP
13303: POP
// end ; if not weapon then
13304: LD_VAR 0 17
13308: NOT
13309: IFFALSE 13471
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13311: LD_ADDR_VAR 0 4
13315: PUSH
13316: LD_VAR 0 4
13320: PUSH
13321: LD_INT 11
13323: PUSH
13324: LD_INT 30
13326: PUSH
13327: LD_INT 49
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: LIST
13334: DIFF
13335: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
13336: LD_ADDR_VAR 0 17
13340: PUSH
13341: LD_VAR 0 4
13345: PUSH
13346: LD_INT 1
13348: PPUSH
13349: LD_VAR 0 4
13353: PPUSH
13354: CALL_OW 12
13358: ARRAY
13359: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
13360: LD_ADDR_VAR 0 13
13364: PUSH
13365: LD_INT 22
13367: PUSH
13368: LD_VAR 0 15
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PUSH
13377: LD_INT 3
13379: PUSH
13380: LD_INT 35
13382: PUSH
13383: LD_INT 0
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PPUSH
13398: CALL_OW 69
13402: ST_TO_ADDR
// for i in tmp do
13403: LD_ADDR_VAR 0 7
13407: PUSH
13408: LD_VAR 0 13
13412: PUSH
13413: FOR_IN
13414: IFFALSE 13439
// list := list diff GetBWeapon ( i ) ;
13416: LD_ADDR_VAR 0 4
13420: PUSH
13421: LD_VAR 0 4
13425: PUSH
13426: LD_VAR 0 7
13430: PPUSH
13431: CALL_OW 269
13435: DIFF
13436: ST_TO_ADDR
13437: GO 13413
13439: POP
13440: POP
// if list then
13441: LD_VAR 0 4
13445: IFFALSE 13471
// weapon := list [ rand ( 1 , list ) ] ;
13447: LD_ADDR_VAR 0 17
13451: PUSH
13452: LD_VAR 0 4
13456: PUSH
13457: LD_INT 1
13459: PPUSH
13460: LD_VAR 0 4
13464: PPUSH
13465: CALL_OW 12
13469: ARRAY
13470: ST_TO_ADDR
// end ; if weapon then
13471: LD_VAR 0 17
13475: IFFALSE 13589
// begin tmp := CostOfWeapon ( weapon ) ;
13477: LD_ADDR_VAR 0 13
13481: PUSH
13482: LD_VAR 0 17
13486: PPUSH
13487: CALL_OW 451
13491: ST_TO_ADDR
// j := GetBase ( tower ) ;
13492: LD_ADDR_VAR 0 8
13496: PUSH
13497: LD_VAR 0 1
13501: PPUSH
13502: CALL_OW 274
13506: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13507: LD_VAR 0 8
13511: PPUSH
13512: LD_INT 1
13514: PPUSH
13515: CALL_OW 275
13519: PUSH
13520: LD_VAR 0 13
13524: PUSH
13525: LD_INT 1
13527: ARRAY
13528: GREATEREQUAL
13529: PUSH
13530: LD_VAR 0 8
13534: PPUSH
13535: LD_INT 2
13537: PPUSH
13538: CALL_OW 275
13542: PUSH
13543: LD_VAR 0 13
13547: PUSH
13548: LD_INT 2
13550: ARRAY
13551: GREATEREQUAL
13552: AND
13553: PUSH
13554: LD_VAR 0 8
13558: PPUSH
13559: LD_INT 3
13561: PPUSH
13562: CALL_OW 275
13566: PUSH
13567: LD_VAR 0 13
13571: PUSH
13572: LD_INT 3
13574: ARRAY
13575: GREATEREQUAL
13576: AND
13577: IFFALSE 13589
// result := weapon ;
13579: LD_ADDR_VAR 0 2
13583: PUSH
13584: LD_VAR 0 17
13588: ST_TO_ADDR
// end ; end ;
13589: LD_VAR 0 2
13593: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13594: LD_INT 0
13596: PPUSH
13597: PPUSH
// result := true ;
13598: LD_ADDR_VAR 0 3
13602: PUSH
13603: LD_INT 1
13605: ST_TO_ADDR
// if array1 = array2 then
13606: LD_VAR 0 1
13610: PUSH
13611: LD_VAR 0 2
13615: EQUAL
13616: IFFALSE 13676
// begin for i = 1 to array1 do
13618: LD_ADDR_VAR 0 4
13622: PUSH
13623: DOUBLE
13624: LD_INT 1
13626: DEC
13627: ST_TO_ADDR
13628: LD_VAR 0 1
13632: PUSH
13633: FOR_TO
13634: IFFALSE 13672
// if array1 [ i ] <> array2 [ i ] then
13636: LD_VAR 0 1
13640: PUSH
13641: LD_VAR 0 4
13645: ARRAY
13646: PUSH
13647: LD_VAR 0 2
13651: PUSH
13652: LD_VAR 0 4
13656: ARRAY
13657: NONEQUAL
13658: IFFALSE 13670
// begin result := false ;
13660: LD_ADDR_VAR 0 3
13664: PUSH
13665: LD_INT 0
13667: ST_TO_ADDR
// break ;
13668: GO 13672
// end ;
13670: GO 13633
13672: POP
13673: POP
// end else
13674: GO 13684
// result := false ;
13676: LD_ADDR_VAR 0 3
13680: PUSH
13681: LD_INT 0
13683: ST_TO_ADDR
// end ;
13684: LD_VAR 0 3
13688: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13689: LD_INT 0
13691: PPUSH
13692: PPUSH
13693: PPUSH
// pom := GetBase ( fac ) ;
13694: LD_ADDR_VAR 0 5
13698: PUSH
13699: LD_VAR 0 1
13703: PPUSH
13704: CALL_OW 274
13708: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13709: LD_ADDR_VAR 0 4
13713: PUSH
13714: LD_VAR 0 2
13718: PUSH
13719: LD_INT 1
13721: ARRAY
13722: PPUSH
13723: LD_VAR 0 2
13727: PUSH
13728: LD_INT 2
13730: ARRAY
13731: PPUSH
13732: LD_VAR 0 2
13736: PUSH
13737: LD_INT 3
13739: ARRAY
13740: PPUSH
13741: LD_VAR 0 2
13745: PUSH
13746: LD_INT 4
13748: ARRAY
13749: PPUSH
13750: CALL_OW 449
13754: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
13755: LD_VAR 0 5
13759: PPUSH
13760: LD_INT 1
13762: PPUSH
13763: CALL_OW 275
13767: PUSH
13768: LD_VAR 0 4
13772: PUSH
13773: LD_INT 1
13775: ARRAY
13776: GREATEREQUAL
13777: PUSH
13778: LD_VAR 0 5
13782: PPUSH
13783: LD_INT 2
13785: PPUSH
13786: CALL_OW 275
13790: PUSH
13791: LD_VAR 0 4
13795: PUSH
13796: LD_INT 2
13798: ARRAY
13799: GREATEREQUAL
13800: AND
13801: PUSH
13802: LD_VAR 0 5
13806: PPUSH
13807: LD_INT 3
13809: PPUSH
13810: CALL_OW 275
13814: PUSH
13815: LD_VAR 0 4
13819: PUSH
13820: LD_INT 3
13822: ARRAY
13823: GREATEREQUAL
13824: AND
13825: IFFALSE 13837
// result := true else
13827: LD_ADDR_VAR 0 3
13831: PUSH
13832: LD_INT 1
13834: ST_TO_ADDR
13835: GO 13845
// result := false ;
13837: LD_ADDR_VAR 0 3
13841: PUSH
13842: LD_INT 0
13844: ST_TO_ADDR
// end ;
13845: LD_VAR 0 3
13849: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13850: LD_INT 0
13852: PPUSH
13853: PPUSH
13854: PPUSH
13855: PPUSH
// pom := GetBase ( building ) ;
13856: LD_ADDR_VAR 0 3
13860: PUSH
13861: LD_VAR 0 1
13865: PPUSH
13866: CALL_OW 274
13870: ST_TO_ADDR
// if not pom then
13871: LD_VAR 0 3
13875: NOT
13876: IFFALSE 13880
// exit ;
13878: GO 14050
// btype := GetBType ( building ) ;
13880: LD_ADDR_VAR 0 5
13884: PUSH
13885: LD_VAR 0 1
13889: PPUSH
13890: CALL_OW 266
13894: ST_TO_ADDR
// if btype = b_armoury then
13895: LD_VAR 0 5
13899: PUSH
13900: LD_INT 4
13902: EQUAL
13903: IFFALSE 13913
// btype := b_barracks ;
13905: LD_ADDR_VAR 0 5
13909: PUSH
13910: LD_INT 5
13912: ST_TO_ADDR
// if btype = b_depot then
13913: LD_VAR 0 5
13917: PUSH
13918: LD_INT 0
13920: EQUAL
13921: IFFALSE 13931
// btype := b_warehouse ;
13923: LD_ADDR_VAR 0 5
13927: PUSH
13928: LD_INT 1
13930: ST_TO_ADDR
// if btype = b_workshop then
13931: LD_VAR 0 5
13935: PUSH
13936: LD_INT 2
13938: EQUAL
13939: IFFALSE 13949
// btype := b_factory ;
13941: LD_ADDR_VAR 0 5
13945: PUSH
13946: LD_INT 3
13948: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13949: LD_ADDR_VAR 0 4
13953: PUSH
13954: LD_VAR 0 5
13958: PPUSH
13959: LD_VAR 0 1
13963: PPUSH
13964: CALL_OW 248
13968: PPUSH
13969: CALL_OW 450
13973: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13974: LD_ADDR_VAR 0 2
13978: PUSH
13979: LD_VAR 0 3
13983: PPUSH
13984: LD_INT 1
13986: PPUSH
13987: CALL_OW 275
13991: PUSH
13992: LD_VAR 0 4
13996: PUSH
13997: LD_INT 1
13999: ARRAY
14000: GREATEREQUAL
14001: PUSH
14002: LD_VAR 0 3
14006: PPUSH
14007: LD_INT 2
14009: PPUSH
14010: CALL_OW 275
14014: PUSH
14015: LD_VAR 0 4
14019: PUSH
14020: LD_INT 2
14022: ARRAY
14023: GREATEREQUAL
14024: AND
14025: PUSH
14026: LD_VAR 0 3
14030: PPUSH
14031: LD_INT 3
14033: PPUSH
14034: CALL_OW 275
14038: PUSH
14039: LD_VAR 0 4
14043: PUSH
14044: LD_INT 3
14046: ARRAY
14047: GREATEREQUAL
14048: AND
14049: ST_TO_ADDR
// end ;
14050: LD_VAR 0 2
14054: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14055: LD_INT 0
14057: PPUSH
14058: PPUSH
14059: PPUSH
// pom := GetBase ( building ) ;
14060: LD_ADDR_VAR 0 4
14064: PUSH
14065: LD_VAR 0 1
14069: PPUSH
14070: CALL_OW 274
14074: ST_TO_ADDR
// if not pom then
14075: LD_VAR 0 4
14079: NOT
14080: IFFALSE 14084
// exit ;
14082: GO 14185
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14084: LD_ADDR_VAR 0 5
14088: PUSH
14089: LD_VAR 0 2
14093: PPUSH
14094: LD_VAR 0 1
14098: PPUSH
14099: CALL_OW 248
14103: PPUSH
14104: CALL_OW 450
14108: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14109: LD_ADDR_VAR 0 3
14113: PUSH
14114: LD_VAR 0 4
14118: PPUSH
14119: LD_INT 1
14121: PPUSH
14122: CALL_OW 275
14126: PUSH
14127: LD_VAR 0 5
14131: PUSH
14132: LD_INT 1
14134: ARRAY
14135: GREATEREQUAL
14136: PUSH
14137: LD_VAR 0 4
14141: PPUSH
14142: LD_INT 2
14144: PPUSH
14145: CALL_OW 275
14149: PUSH
14150: LD_VAR 0 5
14154: PUSH
14155: LD_INT 2
14157: ARRAY
14158: GREATEREQUAL
14159: AND
14160: PUSH
14161: LD_VAR 0 4
14165: PPUSH
14166: LD_INT 3
14168: PPUSH
14169: CALL_OW 275
14173: PUSH
14174: LD_VAR 0 5
14178: PUSH
14179: LD_INT 3
14181: ARRAY
14182: GREATEREQUAL
14183: AND
14184: ST_TO_ADDR
// end ;
14185: LD_VAR 0 3
14189: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes ; begin
14190: LD_INT 0
14192: PPUSH
14193: PPUSH
14194: PPUSH
14195: PPUSH
14196: PPUSH
14197: PPUSH
14198: PPUSH
// if not base or not btype or not x or not y then
14199: LD_VAR 0 1
14203: NOT
14204: PUSH
14205: LD_VAR 0 2
14209: NOT
14210: OR
14211: PUSH
14212: LD_VAR 0 3
14216: NOT
14217: OR
14218: PUSH
14219: LD_VAR 0 4
14223: NOT
14224: OR
14225: IFFALSE 14229
// exit ;
14227: GO 14501
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
14229: LD_ADDR_VAR 0 12
14233: PUSH
14234: LD_VAR 0 2
14238: PPUSH
14239: LD_VAR 0 3
14243: PPUSH
14244: LD_VAR 0 4
14248: PPUSH
14249: LD_VAR 0 5
14253: PPUSH
14254: LD_VAR 0 1
14258: PUSH
14259: LD_INT 1
14261: ARRAY
14262: PPUSH
14263: CALL_OW 248
14267: PPUSH
14268: LD_INT 0
14270: PPUSH
14271: CALL 15284 0 6
14275: ST_TO_ADDR
// if not hexes then
14276: LD_VAR 0 12
14280: NOT
14281: IFFALSE 14285
// exit ;
14283: GO 14501
// for i = 1 to hexes do
14285: LD_ADDR_VAR 0 7
14289: PUSH
14290: DOUBLE
14291: LD_INT 1
14293: DEC
14294: ST_TO_ADDR
14295: LD_VAR 0 12
14299: PUSH
14300: FOR_TO
14301: IFFALSE 14499
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14303: LD_ADDR_VAR 0 11
14307: PUSH
14308: LD_VAR 0 12
14312: PUSH
14313: LD_VAR 0 7
14317: ARRAY
14318: PUSH
14319: LD_INT 1
14321: ARRAY
14322: PPUSH
14323: LD_VAR 0 12
14327: PUSH
14328: LD_VAR 0 7
14332: ARRAY
14333: PUSH
14334: LD_INT 2
14336: ARRAY
14337: PPUSH
14338: CALL_OW 428
14342: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
14343: LD_VAR 0 11
14347: NOT
14348: PUSH
14349: LD_VAR 0 11
14353: PPUSH
14354: CALL_OW 247
14358: PUSH
14359: LD_INT 3
14361: EQUAL
14362: OR
14363: IFFALSE 14367
// continue ;
14365: GO 14300
// for j = 0 to 5 do
14367: LD_ADDR_VAR 0 8
14371: PUSH
14372: DOUBLE
14373: LD_INT 0
14375: DEC
14376: ST_TO_ADDR
14377: LD_INT 5
14379: PUSH
14380: FOR_TO
14381: IFFALSE 14495
// begin _x := ShiftX ( GetX ( tmp ) , j , 3 ) ;
14383: LD_ADDR_VAR 0 9
14387: PUSH
14388: LD_VAR 0 11
14392: PPUSH
14393: CALL_OW 250
14397: PPUSH
14398: LD_VAR 0 8
14402: PPUSH
14403: LD_INT 3
14405: PPUSH
14406: CALL_OW 272
14410: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 3 ) ;
14411: LD_ADDR_VAR 0 10
14415: PUSH
14416: LD_VAR 0 11
14420: PPUSH
14421: CALL_OW 251
14425: PPUSH
14426: LD_VAR 0 8
14430: PPUSH
14431: LD_INT 3
14433: PPUSH
14434: CALL_OW 273
14438: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14439: LD_VAR 0 9
14443: PPUSH
14444: LD_VAR 0 10
14448: PPUSH
14449: CALL_OW 488
14453: PUSH
14454: LD_VAR 0 9
14458: PPUSH
14459: LD_VAR 0 10
14463: PPUSH
14464: CALL_OW 428
14468: NOT
14469: AND
14470: IFFALSE 14493
// begin ComMoveXY ( tmp , _x , _y ) ;
14472: LD_VAR 0 11
14476: PPUSH
14477: LD_VAR 0 9
14481: PPUSH
14482: LD_VAR 0 10
14486: PPUSH
14487: CALL_OW 111
// break ;
14491: GO 14495
// end ; end ;
14493: GO 14380
14495: POP
14496: POP
// end ;
14497: GO 14300
14499: POP
14500: POP
// end ;
14501: LD_VAR 0 6
14505: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
14506: LD_INT 0
14508: PPUSH
14509: PPUSH
14510: PPUSH
14511: PPUSH
14512: PPUSH
14513: PPUSH
14514: PPUSH
14515: PPUSH
14516: PPUSH
// result := false ;
14517: LD_ADDR_VAR 0 6
14521: PUSH
14522: LD_INT 0
14524: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14525: LD_VAR 0 1
14529: NOT
14530: PUSH
14531: LD_VAR 0 1
14535: PPUSH
14536: CALL_OW 266
14540: PUSH
14541: LD_INT 0
14543: PUSH
14544: LD_INT 1
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: IN
14551: NOT
14552: OR
14553: PUSH
14554: LD_VAR 0 2
14558: NOT
14559: OR
14560: PUSH
14561: LD_VAR 0 5
14565: PUSH
14566: LD_INT 0
14568: PUSH
14569: LD_INT 1
14571: PUSH
14572: LD_INT 2
14574: PUSH
14575: LD_INT 3
14577: PUSH
14578: LD_INT 4
14580: PUSH
14581: LD_INT 5
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: IN
14592: NOT
14593: OR
14594: PUSH
14595: LD_VAR 0 3
14599: PPUSH
14600: LD_VAR 0 4
14604: PPUSH
14605: CALL_OW 488
14609: NOT
14610: OR
14611: IFFALSE 14615
// exit ;
14613: GO 15279
// pom := GetBase ( bdepot ) ;
14615: LD_ADDR_VAR 0 9
14619: PUSH
14620: LD_VAR 0 1
14624: PPUSH
14625: CALL_OW 274
14629: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
14630: LD_ADDR_VAR 0 10
14634: PUSH
14635: LD_VAR 0 2
14639: PPUSH
14640: LD_VAR 0 1
14644: PPUSH
14645: CALL_OW 248
14649: PPUSH
14650: CALL_OW 450
14654: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14655: LD_VAR 0 9
14659: PPUSH
14660: LD_INT 1
14662: PPUSH
14663: CALL_OW 275
14667: PUSH
14668: LD_VAR 0 10
14672: PUSH
14673: LD_INT 1
14675: ARRAY
14676: GREATEREQUAL
14677: PUSH
14678: LD_VAR 0 9
14682: PPUSH
14683: LD_INT 2
14685: PPUSH
14686: CALL_OW 275
14690: PUSH
14691: LD_VAR 0 10
14695: PUSH
14696: LD_INT 2
14698: ARRAY
14699: GREATEREQUAL
14700: AND
14701: PUSH
14702: LD_VAR 0 9
14706: PPUSH
14707: LD_INT 3
14709: PPUSH
14710: CALL_OW 275
14714: PUSH
14715: LD_VAR 0 10
14719: PUSH
14720: LD_INT 3
14722: ARRAY
14723: GREATEREQUAL
14724: AND
14725: NOT
14726: IFFALSE 14730
// exit ;
14728: GO 15279
// if GetBType ( bdepot ) = b_depot then
14730: LD_VAR 0 1
14734: PPUSH
14735: CALL_OW 266
14739: PUSH
14740: LD_INT 0
14742: EQUAL
14743: IFFALSE 14755
// dist := 28 else
14745: LD_ADDR_VAR 0 13
14749: PUSH
14750: LD_INT 28
14752: ST_TO_ADDR
14753: GO 14763
// dist := 36 ;
14755: LD_ADDR_VAR 0 13
14759: PUSH
14760: LD_INT 36
14762: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
14763: LD_VAR 0 1
14767: PPUSH
14768: LD_VAR 0 3
14772: PPUSH
14773: LD_VAR 0 4
14777: PPUSH
14778: CALL_OW 297
14782: PUSH
14783: LD_VAR 0 13
14787: GREATER
14788: IFFALSE 14792
// exit ;
14790: GO 15279
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
14792: LD_ADDR_VAR 0 11
14796: PUSH
14797: LD_VAR 0 2
14801: PPUSH
14802: LD_VAR 0 3
14806: PPUSH
14807: LD_VAR 0 4
14811: PPUSH
14812: LD_VAR 0 5
14816: PPUSH
14817: LD_VAR 0 1
14821: PPUSH
14822: CALL_OW 248
14826: PPUSH
14827: LD_INT 0
14829: PPUSH
14830: CALL 15284 0 6
14834: ST_TO_ADDR
// if not hexes then
14835: LD_VAR 0 11
14839: NOT
14840: IFFALSE 14844
// exit ;
14842: GO 15279
// hex := GetHexInfo ( x , y ) ;
14844: LD_ADDR_VAR 0 14
14848: PUSH
14849: LD_VAR 0 3
14853: PPUSH
14854: LD_VAR 0 4
14858: PPUSH
14859: CALL_OW 546
14863: ST_TO_ADDR
// if hex [ 1 ] then
14864: LD_VAR 0 14
14868: PUSH
14869: LD_INT 1
14871: ARRAY
14872: IFFALSE 14876
// exit ;
14874: GO 15279
// height := hex [ 2 ] ;
14876: LD_ADDR_VAR 0 12
14880: PUSH
14881: LD_VAR 0 14
14885: PUSH
14886: LD_INT 2
14888: ARRAY
14889: ST_TO_ADDR
// for i = 1 to hexes do
14890: LD_ADDR_VAR 0 7
14894: PUSH
14895: DOUBLE
14896: LD_INT 1
14898: DEC
14899: ST_TO_ADDR
14900: LD_VAR 0 11
14904: PUSH
14905: FOR_TO
14906: IFFALSE 15234
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14908: LD_VAR 0 11
14912: PUSH
14913: LD_VAR 0 7
14917: ARRAY
14918: PUSH
14919: LD_INT 1
14921: ARRAY
14922: PPUSH
14923: LD_VAR 0 11
14927: PUSH
14928: LD_VAR 0 7
14932: ARRAY
14933: PUSH
14934: LD_INT 2
14936: ARRAY
14937: PPUSH
14938: CALL_OW 488
14942: NOT
14943: IFFALSE 14947
// continue ;
14945: GO 14905
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14947: LD_ADDR_VAR 0 8
14951: PUSH
14952: LD_VAR 0 11
14956: PUSH
14957: LD_VAR 0 7
14961: ARRAY
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PPUSH
14967: LD_VAR 0 11
14971: PUSH
14972: LD_VAR 0 7
14976: ARRAY
14977: PUSH
14978: LD_INT 2
14980: ARRAY
14981: PPUSH
14982: CALL_OW 546
14986: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14987: LD_VAR 0 8
14991: PUSH
14992: LD_INT 1
14994: ARRAY
14995: PUSH
14996: LD_VAR 0 8
15000: PUSH
15001: LD_INT 2
15003: ARRAY
15004: PUSH
15005: LD_VAR 0 12
15009: PUSH
15010: LD_INT 2
15012: PLUS
15013: GREATER
15014: OR
15015: PUSH
15016: LD_VAR 0 8
15020: PUSH
15021: LD_INT 2
15023: ARRAY
15024: PUSH
15025: LD_VAR 0 12
15029: PUSH
15030: LD_INT 2
15032: MINUS
15033: LESS
15034: OR
15035: PUSH
15036: LD_VAR 0 8
15040: PUSH
15041: LD_INT 3
15043: ARRAY
15044: PUSH
15045: LD_INT 0
15047: PUSH
15048: LD_INT 8
15050: PUSH
15051: LD_INT 9
15053: PUSH
15054: LD_INT 10
15056: PUSH
15057: LD_INT 11
15059: PUSH
15060: LD_INT 12
15062: PUSH
15063: LD_INT 13
15065: PUSH
15066: LD_INT 16
15068: PUSH
15069: LD_INT 17
15071: PUSH
15072: LD_INT 18
15074: PUSH
15075: LD_INT 19
15077: PUSH
15078: LD_INT 20
15080: PUSH
15081: LD_INT 21
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: IN
15099: NOT
15100: OR
15101: PUSH
15102: LD_VAR 0 8
15106: PUSH
15107: LD_INT 5
15109: ARRAY
15110: NOT
15111: OR
15112: PUSH
15113: LD_VAR 0 8
15117: PUSH
15118: LD_INT 6
15120: ARRAY
15121: PUSH
15122: LD_INT 1
15124: PUSH
15125: LD_INT 2
15127: PUSH
15128: LD_INT 7
15130: PUSH
15131: LD_INT 9
15133: PUSH
15134: LD_INT 10
15136: PUSH
15137: LD_INT 11
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: IN
15148: NOT
15149: OR
15150: PUSH
15151: LD_VAR 0 11
15155: PUSH
15156: LD_VAR 0 7
15160: ARRAY
15161: PUSH
15162: LD_INT 1
15164: ARRAY
15165: PPUSH
15166: LD_VAR 0 11
15170: PUSH
15171: LD_VAR 0 7
15175: ARRAY
15176: PUSH
15177: LD_INT 2
15179: ARRAY
15180: PPUSH
15181: CALL_OW 428
15185: PUSH
15186: LD_INT 0
15188: GREATER
15189: OR
15190: PUSH
15191: LD_VAR 0 11
15195: PUSH
15196: LD_VAR 0 7
15200: ARRAY
15201: PUSH
15202: LD_INT 1
15204: ARRAY
15205: PPUSH
15206: LD_VAR 0 11
15210: PUSH
15211: LD_VAR 0 7
15215: ARRAY
15216: PUSH
15217: LD_INT 2
15219: ARRAY
15220: PPUSH
15221: CALL_OW 351
15225: OR
15226: IFFALSE 15232
// exit ;
15228: POP
15229: POP
15230: GO 15279
// end ;
15232: GO 14905
15234: POP
15235: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
15236: LD_VAR 0 1
15240: PPUSH
15241: CALL_OW 255
15245: PPUSH
15246: LD_VAR 0 3
15250: PPUSH
15251: LD_VAR 0 4
15255: PPUSH
15256: LD_INT 20
15258: PPUSH
15259: CALL 8490 0 4
15263: PUSH
15264: LD_INT 4
15266: ARRAY
15267: IFFALSE 15271
// exit ;
15269: GO 15279
// result := true ;
15271: LD_ADDR_VAR 0 6
15275: PUSH
15276: LD_INT 1
15278: ST_TO_ADDR
// end ;
15279: LD_VAR 0 6
15283: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
15284: LD_INT 0
15286: PPUSH
15287: PPUSH
15288: PPUSH
15289: PPUSH
15290: PPUSH
15291: PPUSH
15292: PPUSH
15293: PPUSH
15294: PPUSH
15295: PPUSH
15296: PPUSH
15297: PPUSH
15298: PPUSH
15299: PPUSH
15300: PPUSH
15301: PPUSH
15302: PPUSH
15303: PPUSH
15304: PPUSH
15305: PPUSH
15306: PPUSH
15307: PPUSH
15308: PPUSH
15309: PPUSH
15310: PPUSH
15311: PPUSH
15312: PPUSH
15313: PPUSH
15314: PPUSH
15315: PPUSH
15316: PPUSH
15317: PPUSH
15318: PPUSH
15319: PPUSH
15320: PPUSH
15321: PPUSH
15322: PPUSH
15323: PPUSH
15324: PPUSH
15325: PPUSH
15326: PPUSH
15327: PPUSH
15328: PPUSH
15329: PPUSH
15330: PPUSH
15331: PPUSH
15332: PPUSH
15333: PPUSH
15334: PPUSH
15335: PPUSH
15336: PPUSH
15337: PPUSH
15338: PPUSH
15339: PPUSH
15340: PPUSH
15341: PPUSH
15342: PPUSH
15343: PPUSH
// result = [ ] ;
15344: LD_ADDR_VAR 0 7
15348: PUSH
15349: EMPTY
15350: ST_TO_ADDR
// temp_list = [ ] ;
15351: LD_ADDR_VAR 0 9
15355: PUSH
15356: EMPTY
15357: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15358: LD_VAR 0 4
15362: PUSH
15363: LD_INT 0
15365: PUSH
15366: LD_INT 1
15368: PUSH
15369: LD_INT 2
15371: PUSH
15372: LD_INT 3
15374: PUSH
15375: LD_INT 4
15377: PUSH
15378: LD_INT 5
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: IN
15389: NOT
15390: PUSH
15391: LD_VAR 0 1
15395: PUSH
15396: LD_INT 0
15398: PUSH
15399: LD_INT 1
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: IN
15406: PUSH
15407: LD_VAR 0 5
15411: PUSH
15412: LD_INT 1
15414: PUSH
15415: LD_INT 2
15417: PUSH
15418: LD_INT 3
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: IN
15426: NOT
15427: AND
15428: OR
15429: IFFALSE 15433
// exit ;
15431: GO 33818
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15433: LD_VAR 0 1
15437: PUSH
15438: LD_INT 6
15440: PUSH
15441: LD_INT 7
15443: PUSH
15444: LD_INT 8
15446: PUSH
15447: LD_INT 13
15449: PUSH
15450: LD_INT 12
15452: PUSH
15453: LD_INT 15
15455: PUSH
15456: LD_INT 11
15458: PUSH
15459: LD_INT 14
15461: PUSH
15462: LD_INT 10
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: IN
15476: IFFALSE 15486
// btype = b_lab ;
15478: LD_ADDR_VAR 0 1
15482: PUSH
15483: LD_INT 6
15485: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15486: LD_VAR 0 6
15490: PUSH
15491: LD_INT 0
15493: PUSH
15494: LD_INT 1
15496: PUSH
15497: LD_INT 2
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: LIST
15504: IN
15505: NOT
15506: PUSH
15507: LD_VAR 0 1
15511: PUSH
15512: LD_INT 0
15514: PUSH
15515: LD_INT 1
15517: PUSH
15518: LD_INT 2
15520: PUSH
15521: LD_INT 3
15523: PUSH
15524: LD_INT 6
15526: PUSH
15527: LD_INT 36
15529: PUSH
15530: LD_INT 4
15532: PUSH
15533: LD_INT 5
15535: PUSH
15536: LD_INT 31
15538: PUSH
15539: LD_INT 32
15541: PUSH
15542: LD_INT 33
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: IN
15558: NOT
15559: PUSH
15560: LD_VAR 0 6
15564: PUSH
15565: LD_INT 1
15567: EQUAL
15568: AND
15569: OR
15570: PUSH
15571: LD_VAR 0 1
15575: PUSH
15576: LD_INT 2
15578: PUSH
15579: LD_INT 3
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: IN
15586: NOT
15587: PUSH
15588: LD_VAR 0 6
15592: PUSH
15593: LD_INT 2
15595: EQUAL
15596: AND
15597: OR
15598: IFFALSE 15608
// mode = 0 ;
15600: LD_ADDR_VAR 0 6
15604: PUSH
15605: LD_INT 0
15607: ST_TO_ADDR
// case mode of 0 :
15608: LD_VAR 0 6
15612: PUSH
15613: LD_INT 0
15615: DOUBLE
15616: EQUAL
15617: IFTRUE 15621
15619: GO 27074
15621: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15622: LD_ADDR_VAR 0 11
15626: PUSH
15627: LD_INT 0
15629: PUSH
15630: LD_INT 0
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 0
15639: PUSH
15640: LD_INT 1
15642: NEG
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: LD_INT 1
15650: PUSH
15651: LD_INT 0
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: LD_INT 1
15660: PUSH
15661: LD_INT 1
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 0
15670: PUSH
15671: LD_INT 1
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: LD_INT 1
15680: NEG
15681: PUSH
15682: LD_INT 0
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 1
15691: NEG
15692: PUSH
15693: LD_INT 1
15695: NEG
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 1
15703: NEG
15704: PUSH
15705: LD_INT 2
15707: NEG
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PUSH
15713: LD_INT 0
15715: PUSH
15716: LD_INT 2
15718: NEG
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 1
15726: PUSH
15727: LD_INT 1
15729: NEG
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 1
15737: PUSH
15738: LD_INT 2
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 0
15747: PUSH
15748: LD_INT 2
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 1
15757: NEG
15758: PUSH
15759: LD_INT 1
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: PUSH
15766: LD_INT 1
15768: PUSH
15769: LD_INT 3
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: LD_INT 0
15778: PUSH
15779: LD_INT 3
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 1
15788: NEG
15789: PUSH
15790: LD_INT 2
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15815: LD_ADDR_VAR 0 12
15819: PUSH
15820: LD_INT 0
15822: PUSH
15823: LD_INT 0
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 0
15832: PUSH
15833: LD_INT 1
15835: NEG
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 1
15843: PUSH
15844: LD_INT 0
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: LD_INT 1
15853: PUSH
15854: LD_INT 1
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: LD_INT 0
15863: PUSH
15864: LD_INT 1
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 1
15873: NEG
15874: PUSH
15875: LD_INT 0
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: LD_INT 1
15884: NEG
15885: PUSH
15886: LD_INT 1
15888: NEG
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 1
15896: PUSH
15897: LD_INT 1
15899: NEG
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: LD_INT 2
15907: PUSH
15908: LD_INT 0
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 2
15917: PUSH
15918: LD_INT 1
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 1
15927: NEG
15928: PUSH
15929: LD_INT 1
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: LD_INT 2
15938: NEG
15939: PUSH
15940: LD_INT 0
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: LD_INT 2
15949: NEG
15950: PUSH
15951: LD_INT 1
15953: NEG
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 2
15961: NEG
15962: PUSH
15963: LD_INT 1
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 3
15972: NEG
15973: PUSH
15974: LD_INT 0
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 3
15983: NEG
15984: PUSH
15985: LD_INT 1
15987: NEG
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16011: LD_ADDR_VAR 0 13
16015: PUSH
16016: LD_INT 0
16018: PUSH
16019: LD_INT 0
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 0
16028: PUSH
16029: LD_INT 1
16031: NEG
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 1
16039: PUSH
16040: LD_INT 0
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 1
16049: PUSH
16050: LD_INT 1
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: LD_INT 0
16059: PUSH
16060: LD_INT 1
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 1
16069: NEG
16070: PUSH
16071: LD_INT 0
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 1
16080: NEG
16081: PUSH
16082: LD_INT 1
16084: NEG
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 1
16092: NEG
16093: PUSH
16094: LD_INT 2
16096: NEG
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 2
16104: PUSH
16105: LD_INT 1
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 2
16114: PUSH
16115: LD_INT 2
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 1
16124: PUSH
16125: LD_INT 2
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 2
16134: NEG
16135: PUSH
16136: LD_INT 1
16138: NEG
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 2
16146: NEG
16147: PUSH
16148: LD_INT 2
16150: NEG
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 2
16158: NEG
16159: PUSH
16160: LD_INT 3
16162: NEG
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 3
16170: NEG
16171: PUSH
16172: LD_INT 2
16174: NEG
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: LD_INT 3
16182: NEG
16183: PUSH
16184: LD_INT 3
16186: NEG
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16210: LD_ADDR_VAR 0 14
16214: PUSH
16215: LD_INT 0
16217: PUSH
16218: LD_INT 0
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PUSH
16225: LD_INT 0
16227: PUSH
16228: LD_INT 1
16230: NEG
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: LD_INT 1
16238: PUSH
16239: LD_INT 0
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 1
16248: PUSH
16249: LD_INT 1
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: LD_INT 0
16258: PUSH
16259: LD_INT 1
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 1
16268: NEG
16269: PUSH
16270: LD_INT 0
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 1
16279: NEG
16280: PUSH
16281: LD_INT 1
16283: NEG
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 1
16291: NEG
16292: PUSH
16293: LD_INT 2
16295: NEG
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 0
16303: PUSH
16304: LD_INT 2
16306: NEG
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 1
16314: PUSH
16315: LD_INT 1
16317: NEG
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: LD_INT 2
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 0
16335: PUSH
16336: LD_INT 2
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: LD_INT 1
16345: NEG
16346: PUSH
16347: LD_INT 1
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: LD_INT 1
16356: NEG
16357: PUSH
16358: LD_INT 3
16360: NEG
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 0
16368: PUSH
16369: LD_INT 3
16371: NEG
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 1
16379: PUSH
16380: LD_INT 2
16382: NEG
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16406: LD_ADDR_VAR 0 15
16410: PUSH
16411: LD_INT 0
16413: PUSH
16414: LD_INT 0
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 0
16423: PUSH
16424: LD_INT 1
16426: NEG
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: LD_INT 1
16434: PUSH
16435: LD_INT 0
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 1
16444: PUSH
16445: LD_INT 1
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 0
16454: PUSH
16455: LD_INT 1
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 1
16464: NEG
16465: PUSH
16466: LD_INT 0
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 1
16475: NEG
16476: PUSH
16477: LD_INT 1
16479: NEG
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 1
16487: PUSH
16488: LD_INT 1
16490: NEG
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 2
16498: PUSH
16499: LD_INT 0
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 2
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 1
16518: NEG
16519: PUSH
16520: LD_INT 1
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 2
16529: NEG
16530: PUSH
16531: LD_INT 0
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 2
16540: NEG
16541: PUSH
16542: LD_INT 1
16544: NEG
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 2
16552: PUSH
16553: LD_INT 1
16555: NEG
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 3
16563: PUSH
16564: LD_INT 0
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 3
16573: PUSH
16574: LD_INT 1
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16599: LD_ADDR_VAR 0 16
16603: PUSH
16604: LD_INT 0
16606: PUSH
16607: LD_INT 0
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 0
16616: PUSH
16617: LD_INT 1
16619: NEG
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 1
16627: PUSH
16628: LD_INT 0
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: LD_INT 1
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: LD_INT 0
16647: PUSH
16648: LD_INT 1
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 1
16657: NEG
16658: PUSH
16659: LD_INT 0
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 1
16668: NEG
16669: PUSH
16670: LD_INT 1
16672: NEG
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 1
16680: NEG
16681: PUSH
16682: LD_INT 2
16684: NEG
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 2
16692: PUSH
16693: LD_INT 1
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 2
16702: PUSH
16703: LD_INT 2
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 1
16712: PUSH
16713: LD_INT 2
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 2
16722: NEG
16723: PUSH
16724: LD_INT 1
16726: NEG
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 2
16734: NEG
16735: PUSH
16736: LD_INT 2
16738: NEG
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 3
16746: PUSH
16747: LD_INT 2
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 3
16756: PUSH
16757: LD_INT 3
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: LD_INT 2
16766: PUSH
16767: LD_INT 3
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16792: LD_ADDR_VAR 0 17
16796: PUSH
16797: LD_INT 0
16799: PUSH
16800: LD_INT 0
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: LD_INT 0
16809: PUSH
16810: LD_INT 1
16812: NEG
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 1
16820: PUSH
16821: LD_INT 0
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 1
16830: PUSH
16831: LD_INT 1
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 0
16840: PUSH
16841: LD_INT 1
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 1
16850: NEG
16851: PUSH
16852: LD_INT 0
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 1
16861: NEG
16862: PUSH
16863: LD_INT 1
16865: NEG
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 1
16873: NEG
16874: PUSH
16875: LD_INT 2
16877: NEG
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 0
16885: PUSH
16886: LD_INT 2
16888: NEG
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 1
16896: PUSH
16897: LD_INT 1
16899: NEG
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 2
16907: PUSH
16908: LD_INT 0
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 2
16917: PUSH
16918: LD_INT 1
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 2
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 1
16937: PUSH
16938: LD_INT 2
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 0
16947: PUSH
16948: LD_INT 2
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 1
16957: NEG
16958: PUSH
16959: LD_INT 1
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 2
16968: NEG
16969: PUSH
16970: LD_INT 0
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 2
16979: NEG
16980: PUSH
16981: LD_INT 1
16983: NEG
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 2
16991: NEG
16992: PUSH
16993: LD_INT 2
16995: NEG
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17022: LD_ADDR_VAR 0 18
17026: PUSH
17027: LD_INT 0
17029: PUSH
17030: LD_INT 0
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 0
17039: PUSH
17040: LD_INT 1
17042: NEG
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 1
17050: PUSH
17051: LD_INT 0
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 1
17060: PUSH
17061: LD_INT 1
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 0
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 1
17080: NEG
17081: PUSH
17082: LD_INT 0
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 1
17091: NEG
17092: PUSH
17093: LD_INT 1
17095: NEG
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 1
17103: NEG
17104: PUSH
17105: LD_INT 2
17107: NEG
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 0
17115: PUSH
17116: LD_INT 2
17118: NEG
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 1
17126: PUSH
17127: LD_INT 1
17129: NEG
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 2
17137: PUSH
17138: LD_INT 0
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 2
17147: PUSH
17148: LD_INT 1
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 2
17157: PUSH
17158: LD_INT 2
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 1
17167: PUSH
17168: LD_INT 2
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 0
17177: PUSH
17178: LD_INT 2
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 1
17187: NEG
17188: PUSH
17189: LD_INT 1
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 2
17198: NEG
17199: PUSH
17200: LD_INT 0
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 2
17209: NEG
17210: PUSH
17211: LD_INT 1
17213: NEG
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 2
17221: NEG
17222: PUSH
17223: LD_INT 2
17225: NEG
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17252: LD_ADDR_VAR 0 19
17256: PUSH
17257: LD_INT 0
17259: PUSH
17260: LD_INT 0
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 0
17269: PUSH
17270: LD_INT 1
17272: NEG
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 1
17280: PUSH
17281: LD_INT 0
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 0
17300: PUSH
17301: LD_INT 1
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 1
17310: NEG
17311: PUSH
17312: LD_INT 0
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 1
17321: NEG
17322: PUSH
17323: LD_INT 1
17325: NEG
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 1
17333: NEG
17334: PUSH
17335: LD_INT 2
17337: NEG
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 0
17345: PUSH
17346: LD_INT 2
17348: NEG
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 1
17356: PUSH
17357: LD_INT 1
17359: NEG
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 2
17367: PUSH
17368: LD_INT 0
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 2
17377: PUSH
17378: LD_INT 1
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 2
17387: PUSH
17388: LD_INT 2
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 1
17397: PUSH
17398: LD_INT 2
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 0
17407: PUSH
17408: LD_INT 2
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 1
17417: NEG
17418: PUSH
17419: LD_INT 1
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 2
17428: NEG
17429: PUSH
17430: LD_INT 0
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 2
17439: NEG
17440: PUSH
17441: LD_INT 1
17443: NEG
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 2
17451: NEG
17452: PUSH
17453: LD_INT 2
17455: NEG
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17482: LD_ADDR_VAR 0 20
17486: PUSH
17487: LD_INT 0
17489: PUSH
17490: LD_INT 0
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 0
17499: PUSH
17500: LD_INT 1
17502: NEG
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 1
17510: PUSH
17511: LD_INT 0
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 1
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 0
17530: PUSH
17531: LD_INT 1
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 1
17540: NEG
17541: PUSH
17542: LD_INT 0
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 1
17551: NEG
17552: PUSH
17553: LD_INT 1
17555: NEG
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 1
17563: NEG
17564: PUSH
17565: LD_INT 2
17567: NEG
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 0
17575: PUSH
17576: LD_INT 2
17578: NEG
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 1
17586: PUSH
17587: LD_INT 1
17589: NEG
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 2
17597: PUSH
17598: LD_INT 0
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 2
17607: PUSH
17608: LD_INT 1
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 2
17617: PUSH
17618: LD_INT 2
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 1
17627: PUSH
17628: LD_INT 2
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 0
17637: PUSH
17638: LD_INT 2
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 1
17647: NEG
17648: PUSH
17649: LD_INT 1
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 2
17658: NEG
17659: PUSH
17660: LD_INT 0
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 2
17669: NEG
17670: PUSH
17671: LD_INT 1
17673: NEG
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 2
17681: NEG
17682: PUSH
17683: LD_INT 2
17685: NEG
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17712: LD_ADDR_VAR 0 21
17716: PUSH
17717: LD_INT 0
17719: PUSH
17720: LD_INT 0
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 0
17729: PUSH
17730: LD_INT 1
17732: NEG
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 1
17740: PUSH
17741: LD_INT 0
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 1
17750: PUSH
17751: LD_INT 1
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 0
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 1
17770: NEG
17771: PUSH
17772: LD_INT 0
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 1
17781: NEG
17782: PUSH
17783: LD_INT 1
17785: NEG
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 1
17793: NEG
17794: PUSH
17795: LD_INT 2
17797: NEG
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 0
17805: PUSH
17806: LD_INT 2
17808: NEG
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: LD_INT 1
17819: NEG
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 2
17827: PUSH
17828: LD_INT 0
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 2
17837: PUSH
17838: LD_INT 1
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 2
17847: PUSH
17848: LD_INT 2
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 0
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 1
17877: NEG
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 2
17888: NEG
17889: PUSH
17890: LD_INT 0
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 2
17899: NEG
17900: PUSH
17901: LD_INT 1
17903: NEG
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 2
17911: NEG
17912: PUSH
17913: LD_INT 2
17915: NEG
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17942: LD_ADDR_VAR 0 22
17946: PUSH
17947: LD_INT 0
17949: PUSH
17950: LD_INT 0
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 0
17959: PUSH
17960: LD_INT 1
17962: NEG
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 1
17970: PUSH
17971: LD_INT 0
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 1
17980: PUSH
17981: LD_INT 1
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 0
17990: PUSH
17991: LD_INT 1
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 1
18000: NEG
18001: PUSH
18002: LD_INT 0
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 1
18011: NEG
18012: PUSH
18013: LD_INT 1
18015: NEG
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 1
18023: NEG
18024: PUSH
18025: LD_INT 2
18027: NEG
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 0
18035: PUSH
18036: LD_INT 2
18038: NEG
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: LD_INT 1
18049: NEG
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 2
18057: PUSH
18058: LD_INT 0
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 2
18067: PUSH
18068: LD_INT 1
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 2
18077: PUSH
18078: LD_INT 2
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 1
18087: PUSH
18088: LD_INT 2
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 0
18097: PUSH
18098: LD_INT 2
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 1
18107: NEG
18108: PUSH
18109: LD_INT 1
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 2
18118: NEG
18119: PUSH
18120: LD_INT 0
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 2
18129: NEG
18130: PUSH
18131: LD_INT 1
18133: NEG
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 2
18141: NEG
18142: PUSH
18143: LD_INT 2
18145: NEG
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18172: LD_ADDR_VAR 0 23
18176: PUSH
18177: LD_INT 0
18179: PUSH
18180: LD_INT 0
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 0
18189: PUSH
18190: LD_INT 1
18192: NEG
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 1
18200: PUSH
18201: LD_INT 0
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: LD_INT 1
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 0
18220: PUSH
18221: LD_INT 1
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 1
18230: NEG
18231: PUSH
18232: LD_INT 0
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 1
18241: NEG
18242: PUSH
18243: LD_INT 1
18245: NEG
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 1
18253: NEG
18254: PUSH
18255: LD_INT 2
18257: NEG
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 0
18265: PUSH
18266: LD_INT 2
18268: NEG
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 1
18276: PUSH
18277: LD_INT 1
18279: NEG
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 2
18287: PUSH
18288: LD_INT 0
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 2
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 2
18307: PUSH
18308: LD_INT 2
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: LD_INT 2
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: LD_INT 2
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 1
18337: NEG
18338: PUSH
18339: LD_INT 1
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 2
18348: NEG
18349: PUSH
18350: LD_INT 0
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 2
18359: NEG
18360: PUSH
18361: LD_INT 1
18363: NEG
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 2
18371: NEG
18372: PUSH
18373: LD_INT 2
18375: NEG
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 2
18383: NEG
18384: PUSH
18385: LD_INT 3
18387: NEG
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 1
18395: NEG
18396: PUSH
18397: LD_INT 3
18399: NEG
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 1
18407: PUSH
18408: LD_INT 2
18410: NEG
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 2
18418: PUSH
18419: LD_INT 1
18421: NEG
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18452: LD_ADDR_VAR 0 24
18456: PUSH
18457: LD_INT 0
18459: PUSH
18460: LD_INT 0
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 0
18469: PUSH
18470: LD_INT 1
18472: NEG
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 1
18480: PUSH
18481: LD_INT 0
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 1
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 0
18500: PUSH
18501: LD_INT 1
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 1
18510: NEG
18511: PUSH
18512: LD_INT 0
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 1
18521: NEG
18522: PUSH
18523: LD_INT 1
18525: NEG
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 1
18533: NEG
18534: PUSH
18535: LD_INT 2
18537: NEG
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: LD_INT 2
18548: NEG
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: LD_INT 1
18559: NEG
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 2
18567: PUSH
18568: LD_INT 0
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 2
18577: PUSH
18578: LD_INT 1
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 2
18587: PUSH
18588: LD_INT 2
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 1
18597: PUSH
18598: LD_INT 2
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 0
18607: PUSH
18608: LD_INT 2
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 1
18617: NEG
18618: PUSH
18619: LD_INT 1
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 2
18628: NEG
18629: PUSH
18630: LD_INT 0
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 2
18639: NEG
18640: PUSH
18641: LD_INT 1
18643: NEG
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 2
18651: NEG
18652: PUSH
18653: LD_INT 2
18655: NEG
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: LD_INT 2
18666: NEG
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 2
18674: PUSH
18675: LD_INT 1
18677: NEG
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 3
18685: PUSH
18686: LD_INT 1
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 3
18695: PUSH
18696: LD_INT 2
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18728: LD_ADDR_VAR 0 25
18732: PUSH
18733: LD_INT 0
18735: PUSH
18736: LD_INT 0
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 0
18745: PUSH
18746: LD_INT 1
18748: NEG
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 1
18756: PUSH
18757: LD_INT 0
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 1
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 0
18776: PUSH
18777: LD_INT 1
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 1
18786: NEG
18787: PUSH
18788: LD_INT 0
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 1
18797: NEG
18798: PUSH
18799: LD_INT 1
18801: NEG
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 1
18809: NEG
18810: PUSH
18811: LD_INT 2
18813: NEG
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 0
18821: PUSH
18822: LD_INT 2
18824: NEG
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 1
18832: PUSH
18833: LD_INT 1
18835: NEG
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: LD_INT 0
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 2
18853: PUSH
18854: LD_INT 1
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 2
18863: PUSH
18864: LD_INT 2
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 1
18873: PUSH
18874: LD_INT 2
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 0
18883: PUSH
18884: LD_INT 2
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 1
18893: NEG
18894: PUSH
18895: LD_INT 1
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 2
18904: NEG
18905: PUSH
18906: LD_INT 0
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 2
18915: NEG
18916: PUSH
18917: LD_INT 1
18919: NEG
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 2
18927: NEG
18928: PUSH
18929: LD_INT 2
18931: NEG
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 3
18939: PUSH
18940: LD_INT 1
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 3
18949: PUSH
18950: LD_INT 2
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 2
18959: PUSH
18960: LD_INT 3
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: LD_INT 3
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19002: LD_ADDR_VAR 0 26
19006: PUSH
19007: LD_INT 0
19009: PUSH
19010: LD_INT 0
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 0
19019: PUSH
19020: LD_INT 1
19022: NEG
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: LD_INT 0
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 0
19050: PUSH
19051: LD_INT 1
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 1
19060: NEG
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 1
19071: NEG
19072: PUSH
19073: LD_INT 1
19075: NEG
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 1
19083: NEG
19084: PUSH
19085: LD_INT 2
19087: NEG
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 0
19095: PUSH
19096: LD_INT 2
19098: NEG
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: LD_INT 1
19109: NEG
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 2
19117: PUSH
19118: LD_INT 0
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 2
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 2
19137: PUSH
19138: LD_INT 2
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 1
19147: PUSH
19148: LD_INT 2
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 0
19157: PUSH
19158: LD_INT 2
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 1
19167: NEG
19168: PUSH
19169: LD_INT 1
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 2
19178: NEG
19179: PUSH
19180: LD_INT 0
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 2
19189: NEG
19190: PUSH
19191: LD_INT 1
19193: NEG
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 2
19201: NEG
19202: PUSH
19203: LD_INT 2
19205: NEG
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 2
19213: PUSH
19214: LD_INT 3
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 1
19223: PUSH
19224: LD_INT 3
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 1
19233: NEG
19234: PUSH
19235: LD_INT 2
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 2
19244: NEG
19245: PUSH
19246: LD_INT 1
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19278: LD_ADDR_VAR 0 27
19282: PUSH
19283: LD_INT 0
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 0
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 1
19306: PUSH
19307: LD_INT 0
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 1
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 0
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 1
19336: NEG
19337: PUSH
19338: LD_INT 0
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 1
19347: NEG
19348: PUSH
19349: LD_INT 1
19351: NEG
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 1
19359: NEG
19360: PUSH
19361: LD_INT 2
19363: NEG
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 0
19371: PUSH
19372: LD_INT 2
19374: NEG
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: LD_INT 1
19385: NEG
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 2
19393: PUSH
19394: LD_INT 0
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 2
19403: PUSH
19404: LD_INT 1
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 2
19413: PUSH
19414: LD_INT 2
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 1
19423: PUSH
19424: LD_INT 2
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 0
19433: PUSH
19434: LD_INT 2
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 1
19443: NEG
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 2
19454: NEG
19455: PUSH
19456: LD_INT 0
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 2
19465: NEG
19466: PUSH
19467: LD_INT 1
19469: NEG
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 2
19477: NEG
19478: PUSH
19479: LD_INT 2
19481: NEG
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 1
19489: NEG
19490: PUSH
19491: LD_INT 2
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 2
19500: NEG
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 3
19511: NEG
19512: PUSH
19513: LD_INT 1
19515: NEG
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 3
19523: NEG
19524: PUSH
19525: LD_INT 2
19527: NEG
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19558: LD_ADDR_VAR 0 28
19562: PUSH
19563: LD_INT 0
19565: PUSH
19566: LD_INT 0
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: LD_INT 1
19578: NEG
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: LD_INT 0
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: LD_INT 1
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 0
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 1
19616: NEG
19617: PUSH
19618: LD_INT 0
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 1
19627: NEG
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 1
19639: NEG
19640: PUSH
19641: LD_INT 2
19643: NEG
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 0
19651: PUSH
19652: LD_INT 2
19654: NEG
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: LD_INT 1
19665: NEG
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 2
19673: PUSH
19674: LD_INT 0
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 2
19683: PUSH
19684: LD_INT 1
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 2
19693: PUSH
19694: LD_INT 2
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 1
19703: PUSH
19704: LD_INT 2
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: LD_INT 2
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 2
19734: NEG
19735: PUSH
19736: LD_INT 0
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 2
19745: NEG
19746: PUSH
19747: LD_INT 1
19749: NEG
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 2
19757: NEG
19758: PUSH
19759: LD_INT 2
19761: NEG
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 2
19769: NEG
19770: PUSH
19771: LD_INT 3
19773: NEG
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 1
19781: NEG
19782: PUSH
19783: LD_INT 3
19785: NEG
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 3
19793: NEG
19794: PUSH
19795: LD_INT 1
19797: NEG
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 3
19805: NEG
19806: PUSH
19807: LD_INT 2
19809: NEG
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19840: LD_ADDR_VAR 0 29
19844: PUSH
19845: LD_INT 0
19847: PUSH
19848: LD_INT 0
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 0
19857: PUSH
19858: LD_INT 1
19860: NEG
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: LD_INT 0
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 1
19878: PUSH
19879: LD_INT 1
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 0
19888: PUSH
19889: LD_INT 1
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 1
19898: NEG
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 1
19909: NEG
19910: PUSH
19911: LD_INT 1
19913: NEG
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 1
19921: NEG
19922: PUSH
19923: LD_INT 2
19925: NEG
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 0
19933: PUSH
19934: LD_INT 2
19936: NEG
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 1
19944: PUSH
19945: LD_INT 1
19947: NEG
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: LD_INT 0
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 2
19965: PUSH
19966: LD_INT 1
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: LD_INT 2
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 0
19985: PUSH
19986: LD_INT 2
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 1
19995: NEG
19996: PUSH
19997: LD_INT 1
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 2
20006: NEG
20007: PUSH
20008: LD_INT 1
20010: NEG
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 2
20018: NEG
20019: PUSH
20020: LD_INT 2
20022: NEG
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 2
20030: NEG
20031: PUSH
20032: LD_INT 3
20034: NEG
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 2
20042: PUSH
20043: LD_INT 1
20045: NEG
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 3
20053: PUSH
20054: LD_INT 1
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: LD_INT 3
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 1
20073: NEG
20074: PUSH
20075: LD_INT 2
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 3
20084: NEG
20085: PUSH
20086: LD_INT 2
20088: NEG
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20119: LD_ADDR_VAR 0 30
20123: PUSH
20124: LD_INT 0
20126: PUSH
20127: LD_INT 0
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 0
20136: PUSH
20137: LD_INT 1
20139: NEG
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 1
20147: PUSH
20148: LD_INT 0
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 1
20157: PUSH
20158: LD_INT 1
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 0
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 1
20177: NEG
20178: PUSH
20179: LD_INT 0
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: NEG
20189: PUSH
20190: LD_INT 1
20192: NEG
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 1
20200: NEG
20201: PUSH
20202: LD_INT 2
20204: NEG
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 0
20212: PUSH
20213: LD_INT 2
20215: NEG
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 1
20223: PUSH
20224: LD_INT 1
20226: NEG
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 2
20234: PUSH
20235: LD_INT 0
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 2
20244: PUSH
20245: LD_INT 1
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 2
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: PUSH
20265: LD_INT 2
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 1
20274: NEG
20275: PUSH
20276: LD_INT 1
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 2
20285: NEG
20286: PUSH
20287: LD_INT 0
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 2
20296: NEG
20297: PUSH
20298: LD_INT 1
20300: NEG
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: LD_INT 3
20312: NEG
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 1
20320: PUSH
20321: LD_INT 2
20323: NEG
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 3
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 2
20341: PUSH
20342: LD_INT 3
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 2
20351: NEG
20352: PUSH
20353: LD_INT 1
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 3
20362: NEG
20363: PUSH
20364: LD_INT 1
20366: NEG
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20397: LD_ADDR_VAR 0 31
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: LD_INT 0
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 0
20414: PUSH
20415: LD_INT 1
20417: NEG
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 1
20425: PUSH
20426: LD_INT 0
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 1
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 0
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 1
20455: NEG
20456: PUSH
20457: LD_INT 0
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 1
20466: NEG
20467: PUSH
20468: LD_INT 1
20470: NEG
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 1
20478: NEG
20479: PUSH
20480: LD_INT 2
20482: NEG
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 1
20490: PUSH
20491: LD_INT 1
20493: NEG
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 2
20501: PUSH
20502: LD_INT 0
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 2
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 2
20521: PUSH
20522: LD_INT 2
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: LD_INT 2
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: LD_INT 2
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 1
20551: NEG
20552: PUSH
20553: LD_INT 1
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 2
20562: NEG
20563: PUSH
20564: LD_INT 1
20566: NEG
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 2
20574: NEG
20575: PUSH
20576: LD_INT 2
20578: NEG
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 2
20586: NEG
20587: PUSH
20588: LD_INT 3
20590: NEG
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 2
20598: PUSH
20599: LD_INT 1
20601: NEG
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 3
20609: PUSH
20610: LD_INT 1
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: PUSH
20620: LD_INT 3
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 1
20629: NEG
20630: PUSH
20631: LD_INT 2
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 3
20640: NEG
20641: PUSH
20642: LD_INT 2
20644: NEG
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20675: LD_ADDR_VAR 0 32
20679: PUSH
20680: LD_INT 0
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 0
20692: PUSH
20693: LD_INT 1
20695: NEG
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 1
20703: PUSH
20704: LD_INT 0
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 1
20713: PUSH
20714: LD_INT 1
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 0
20723: PUSH
20724: LD_INT 1
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 1
20733: NEG
20734: PUSH
20735: LD_INT 0
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 1
20744: NEG
20745: PUSH
20746: LD_INT 1
20748: NEG
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 1
20756: NEG
20757: PUSH
20758: LD_INT 2
20760: NEG
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 0
20768: PUSH
20769: LD_INT 2
20771: NEG
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 1
20779: PUSH
20780: LD_INT 1
20782: NEG
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 2
20790: PUSH
20791: LD_INT 1
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 2
20800: PUSH
20801: LD_INT 2
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: LD_INT 2
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 0
20820: PUSH
20821: LD_INT 2
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 1
20830: NEG
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 2
20841: NEG
20842: PUSH
20843: LD_INT 0
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 2
20852: NEG
20853: PUSH
20854: LD_INT 1
20856: NEG
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 1
20864: NEG
20865: PUSH
20866: LD_INT 3
20868: NEG
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 1
20876: PUSH
20877: LD_INT 2
20879: NEG
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 3
20887: PUSH
20888: LD_INT 2
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 2
20897: PUSH
20898: LD_INT 3
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 2
20907: NEG
20908: PUSH
20909: LD_INT 1
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 3
20918: NEG
20919: PUSH
20920: LD_INT 1
20922: NEG
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20953: LD_ADDR_VAR 0 33
20957: PUSH
20958: LD_INT 0
20960: PUSH
20961: LD_INT 0
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 0
20970: PUSH
20971: LD_INT 1
20973: NEG
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 1
20981: PUSH
20982: LD_INT 0
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 1
20991: PUSH
20992: LD_INT 1
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 0
21001: PUSH
21002: LD_INT 1
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 1
21011: NEG
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: NEG
21023: PUSH
21024: LD_INT 1
21026: NEG
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 1
21034: NEG
21035: PUSH
21036: LD_INT 2
21038: NEG
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: LD_INT 1
21049: NEG
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 2
21057: PUSH
21058: LD_INT 0
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 2
21067: PUSH
21068: LD_INT 1
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 1
21077: PUSH
21078: LD_INT 2
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 0
21087: PUSH
21088: LD_INT 2
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 1
21097: NEG
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 2
21108: NEG
21109: PUSH
21110: LD_INT 0
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 2
21119: NEG
21120: PUSH
21121: LD_INT 1
21123: NEG
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 2
21131: NEG
21132: PUSH
21133: LD_INT 2
21135: NEG
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 2
21143: NEG
21144: PUSH
21145: LD_INT 3
21147: NEG
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 2
21155: PUSH
21156: LD_INT 1
21158: NEG
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 3
21166: PUSH
21167: LD_INT 1
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 1
21176: PUSH
21177: LD_INT 3
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 1
21186: NEG
21187: PUSH
21188: LD_INT 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 3
21197: NEG
21198: PUSH
21199: LD_INT 2
21201: NEG
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21232: LD_ADDR_VAR 0 34
21236: PUSH
21237: LD_INT 0
21239: PUSH
21240: LD_INT 0
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 0
21249: PUSH
21250: LD_INT 1
21252: NEG
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 1
21260: PUSH
21261: LD_INT 0
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 1
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 0
21280: PUSH
21281: LD_INT 1
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 1
21290: NEG
21291: PUSH
21292: LD_INT 0
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: NEG
21302: PUSH
21303: LD_INT 1
21305: NEG
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 1
21313: NEG
21314: PUSH
21315: LD_INT 2
21317: NEG
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 0
21325: PUSH
21326: LD_INT 2
21328: NEG
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: LD_INT 1
21339: NEG
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 2
21347: PUSH
21348: LD_INT 1
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 2
21357: PUSH
21358: LD_INT 2
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 1
21367: PUSH
21368: LD_INT 2
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: NEG
21378: PUSH
21379: LD_INT 1
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 2
21388: NEG
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 2
21399: NEG
21400: PUSH
21401: LD_INT 1
21403: NEG
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 2
21411: NEG
21412: PUSH
21413: LD_INT 2
21415: NEG
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 1
21423: NEG
21424: PUSH
21425: LD_INT 3
21427: NEG
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 1
21435: PUSH
21436: LD_INT 2
21438: NEG
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 3
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 2
21456: PUSH
21457: LD_INT 3
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 2
21466: NEG
21467: PUSH
21468: LD_INT 1
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 3
21477: NEG
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21512: LD_ADDR_VAR 0 35
21516: PUSH
21517: LD_INT 0
21519: PUSH
21520: LD_INT 0
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 0
21529: PUSH
21530: LD_INT 1
21532: NEG
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 1
21540: PUSH
21541: LD_INT 0
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 1
21550: PUSH
21551: LD_INT 1
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 0
21560: PUSH
21561: LD_INT 1
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 1
21570: NEG
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 1
21581: NEG
21582: PUSH
21583: LD_INT 1
21585: NEG
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 2
21593: PUSH
21594: LD_INT 1
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 2
21603: NEG
21604: PUSH
21605: LD_INT 1
21607: NEG
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21624: LD_ADDR_VAR 0 36
21628: PUSH
21629: LD_INT 0
21631: PUSH
21632: LD_INT 0
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: LD_INT 1
21644: NEG
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: LD_INT 0
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 0
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 1
21682: NEG
21683: PUSH
21684: LD_INT 0
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 1
21693: NEG
21694: PUSH
21695: LD_INT 1
21697: NEG
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 1
21705: NEG
21706: PUSH
21707: LD_INT 2
21709: NEG
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21736: LD_ADDR_VAR 0 37
21740: PUSH
21741: LD_INT 0
21743: PUSH
21744: LD_INT 0
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 0
21753: PUSH
21754: LD_INT 1
21756: NEG
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 1
21764: PUSH
21765: LD_INT 0
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 1
21774: PUSH
21775: LD_INT 1
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 0
21784: PUSH
21785: LD_INT 1
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 1
21794: NEG
21795: PUSH
21796: LD_INT 0
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 1
21805: NEG
21806: PUSH
21807: LD_INT 1
21809: NEG
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: PUSH
21818: LD_INT 1
21820: NEG
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: NEG
21829: PUSH
21830: LD_INT 1
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21848: LD_ADDR_VAR 0 38
21852: PUSH
21853: LD_INT 0
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 0
21865: PUSH
21866: LD_INT 1
21868: NEG
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 1
21876: PUSH
21877: LD_INT 0
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 1
21886: PUSH
21887: LD_INT 1
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 0
21896: PUSH
21897: LD_INT 1
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 1
21906: NEG
21907: PUSH
21908: LD_INT 0
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 1
21917: NEG
21918: PUSH
21919: LD_INT 1
21921: NEG
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 2
21929: PUSH
21930: LD_INT 1
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 2
21939: NEG
21940: PUSH
21941: LD_INT 1
21943: NEG
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21960: LD_ADDR_VAR 0 39
21964: PUSH
21965: LD_INT 0
21967: PUSH
21968: LD_INT 0
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 0
21977: PUSH
21978: LD_INT 1
21980: NEG
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 1
21988: PUSH
21989: LD_INT 0
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 1
21998: PUSH
21999: LD_INT 1
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 0
22008: PUSH
22009: LD_INT 1
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 1
22018: NEG
22019: PUSH
22020: LD_INT 0
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 1
22029: NEG
22030: PUSH
22031: LD_INT 1
22033: NEG
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 1
22041: NEG
22042: PUSH
22043: LD_INT 2
22045: NEG
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 1
22053: PUSH
22054: LD_INT 2
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22072: LD_ADDR_VAR 0 40
22076: PUSH
22077: LD_INT 0
22079: PUSH
22080: LD_INT 0
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 0
22089: PUSH
22090: LD_INT 1
22092: NEG
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 1
22100: PUSH
22101: LD_INT 0
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 0
22120: PUSH
22121: LD_INT 1
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 1
22130: NEG
22131: PUSH
22132: LD_INT 0
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 1
22141: NEG
22142: PUSH
22143: LD_INT 1
22145: NEG
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 1
22153: PUSH
22154: LD_INT 1
22156: NEG
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 1
22164: NEG
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22184: LD_ADDR_VAR 0 41
22188: PUSH
22189: LD_INT 0
22191: PUSH
22192: LD_INT 0
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 0
22201: PUSH
22202: LD_INT 1
22204: NEG
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 1
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 1
22222: PUSH
22223: LD_INT 1
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 0
22232: PUSH
22233: LD_INT 1
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 1
22242: NEG
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 1
22253: NEG
22254: PUSH
22255: LD_INT 1
22257: NEG
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 1
22265: NEG
22266: PUSH
22267: LD_INT 2
22269: NEG
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: LD_INT 1
22280: NEG
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 2
22288: PUSH
22289: LD_INT 0
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 2
22298: PUSH
22299: LD_INT 1
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 2
22308: PUSH
22309: LD_INT 2
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 1
22318: PUSH
22319: LD_INT 2
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: LD_INT 1
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 2
22339: NEG
22340: PUSH
22341: LD_INT 0
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 2
22350: NEG
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 2
22362: NEG
22363: PUSH
22364: LD_INT 2
22366: NEG
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 2
22374: NEG
22375: PUSH
22376: LD_INT 3
22378: NEG
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: LD_INT 1
22389: NEG
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 3
22397: PUSH
22398: LD_INT 0
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 3
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 3
22417: PUSH
22418: LD_INT 2
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 3
22427: PUSH
22428: LD_INT 3
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 2
22437: PUSH
22438: LD_INT 3
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 2
22447: NEG
22448: PUSH
22449: LD_INT 1
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 3
22458: NEG
22459: PUSH
22460: LD_INT 0
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 3
22469: NEG
22470: PUSH
22471: LD_INT 1
22473: NEG
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 3
22481: NEG
22482: PUSH
22483: LD_INT 2
22485: NEG
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 3
22493: NEG
22494: PUSH
22495: LD_INT 3
22497: NEG
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22534: LD_ADDR_VAR 0 42
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: LD_INT 0
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 0
22551: PUSH
22552: LD_INT 1
22554: NEG
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: LD_INT 0
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 1
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 0
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 1
22592: NEG
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 1
22603: NEG
22604: PUSH
22605: LD_INT 1
22607: NEG
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 1
22615: NEG
22616: PUSH
22617: LD_INT 2
22619: NEG
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 0
22627: PUSH
22628: LD_INT 2
22630: NEG
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 1
22638: PUSH
22639: LD_INT 1
22641: NEG
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 2
22649: PUSH
22650: LD_INT 1
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 2
22659: PUSH
22660: LD_INT 2
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 1
22669: PUSH
22670: LD_INT 2
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 0
22679: PUSH
22680: LD_INT 2
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 1
22689: NEG
22690: PUSH
22691: LD_INT 1
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 2
22700: NEG
22701: PUSH
22702: LD_INT 1
22704: NEG
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 2
22712: NEG
22713: PUSH
22714: LD_INT 2
22716: NEG
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 2
22724: NEG
22725: PUSH
22726: LD_INT 3
22728: NEG
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 1
22736: NEG
22737: PUSH
22738: LD_INT 3
22740: NEG
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 0
22748: PUSH
22749: LD_INT 3
22751: NEG
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 1
22759: PUSH
22760: LD_INT 2
22762: NEG
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 3
22770: PUSH
22771: LD_INT 2
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 3
22780: PUSH
22781: LD_INT 3
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 2
22790: PUSH
22791: LD_INT 3
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 1
22800: PUSH
22801: LD_INT 3
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 0
22810: PUSH
22811: LD_INT 3
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 1
22820: NEG
22821: PUSH
22822: LD_INT 2
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 3
22831: NEG
22832: PUSH
22833: LD_INT 2
22835: NEG
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 3
22843: NEG
22844: PUSH
22845: LD_INT 3
22847: NEG
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22884: LD_ADDR_VAR 0 43
22888: PUSH
22889: LD_INT 0
22891: PUSH
22892: LD_INT 0
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 0
22901: PUSH
22902: LD_INT 1
22904: NEG
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 1
22912: PUSH
22913: LD_INT 0
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: LD_INT 1
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 0
22932: PUSH
22933: LD_INT 1
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 1
22942: NEG
22943: PUSH
22944: LD_INT 0
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 1
22953: NEG
22954: PUSH
22955: LD_INT 1
22957: NEG
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 1
22965: NEG
22966: PUSH
22967: LD_INT 2
22969: NEG
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 0
22977: PUSH
22978: LD_INT 2
22980: NEG
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 1
22988: PUSH
22989: LD_INT 1
22991: NEG
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 2
22999: PUSH
23000: LD_INT 0
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 2
23009: PUSH
23010: LD_INT 1
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: LD_INT 2
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 0
23029: PUSH
23030: LD_INT 2
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 1
23039: NEG
23040: PUSH
23041: LD_INT 1
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 2
23050: NEG
23051: PUSH
23052: LD_INT 0
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 2
23061: NEG
23062: PUSH
23063: LD_INT 1
23065: NEG
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 1
23073: NEG
23074: PUSH
23075: LD_INT 3
23077: NEG
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 0
23085: PUSH
23086: LD_INT 3
23088: NEG
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: LD_INT 2
23099: NEG
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 2
23107: PUSH
23108: LD_INT 1
23110: NEG
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 3
23118: PUSH
23119: LD_INT 0
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 3
23128: PUSH
23129: LD_INT 1
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 1
23138: PUSH
23139: LD_INT 3
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 0
23148: PUSH
23149: LD_INT 3
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 1
23158: NEG
23159: PUSH
23160: LD_INT 2
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 2
23169: NEG
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 3
23180: NEG
23181: PUSH
23182: LD_INT 0
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 3
23191: NEG
23192: PUSH
23193: LD_INT 1
23195: NEG
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23232: LD_ADDR_VAR 0 44
23236: PUSH
23237: LD_INT 0
23239: PUSH
23240: LD_INT 0
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: LD_INT 1
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: LD_INT 0
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: LD_INT 1
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 0
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 1
23290: NEG
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 1
23301: NEG
23302: PUSH
23303: LD_INT 1
23305: NEG
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 1
23313: NEG
23314: PUSH
23315: LD_INT 2
23317: NEG
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 1
23325: PUSH
23326: LD_INT 1
23328: NEG
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 2
23336: PUSH
23337: LD_INT 0
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 2
23346: PUSH
23347: LD_INT 1
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 2
23356: PUSH
23357: LD_INT 2
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 1
23366: PUSH
23367: LD_INT 2
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 1
23376: NEG
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 2
23387: NEG
23388: PUSH
23389: LD_INT 0
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 2
23398: NEG
23399: PUSH
23400: LD_INT 1
23402: NEG
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 2
23410: NEG
23411: PUSH
23412: LD_INT 2
23414: NEG
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 2
23422: NEG
23423: PUSH
23424: LD_INT 3
23426: NEG
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 2
23434: PUSH
23435: LD_INT 1
23437: NEG
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 3
23445: PUSH
23446: LD_INT 0
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 3
23455: PUSH
23456: LD_INT 1
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 3
23465: PUSH
23466: LD_INT 2
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 3
23475: PUSH
23476: LD_INT 3
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 2
23485: PUSH
23486: LD_INT 3
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 2
23495: NEG
23496: PUSH
23497: LD_INT 1
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 3
23506: NEG
23507: PUSH
23508: LD_INT 0
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 3
23517: NEG
23518: PUSH
23519: LD_INT 1
23521: NEG
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 3
23529: NEG
23530: PUSH
23531: LD_INT 2
23533: NEG
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 3
23541: NEG
23542: PUSH
23543: LD_INT 3
23545: NEG
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23582: LD_ADDR_VAR 0 45
23586: PUSH
23587: LD_INT 0
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 0
23599: PUSH
23600: LD_INT 1
23602: NEG
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 1
23610: PUSH
23611: LD_INT 0
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 1
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 0
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 1
23640: NEG
23641: PUSH
23642: LD_INT 0
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 1
23651: NEG
23652: PUSH
23653: LD_INT 1
23655: NEG
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: LD_INT 2
23667: NEG
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: LD_INT 2
23678: NEG
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 1
23686: PUSH
23687: LD_INT 1
23689: NEG
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 2
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 2
23707: PUSH
23708: LD_INT 2
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 1
23717: PUSH
23718: LD_INT 2
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: LD_INT 2
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 1
23737: NEG
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 2
23748: NEG
23749: PUSH
23750: LD_INT 1
23752: NEG
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 2
23760: NEG
23761: PUSH
23762: LD_INT 2
23764: NEG
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 2
23772: NEG
23773: PUSH
23774: LD_INT 3
23776: NEG
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: NEG
23785: PUSH
23786: LD_INT 3
23788: NEG
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 0
23796: PUSH
23797: LD_INT 3
23799: NEG
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 1
23807: PUSH
23808: LD_INT 2
23810: NEG
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 3
23818: PUSH
23819: LD_INT 2
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 3
23828: PUSH
23829: LD_INT 3
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: LD_INT 3
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: LD_INT 3
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 0
23858: PUSH
23859: LD_INT 3
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 1
23868: NEG
23869: PUSH
23870: LD_INT 2
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 3
23879: NEG
23880: PUSH
23881: LD_INT 2
23883: NEG
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 3
23891: NEG
23892: PUSH
23893: LD_INT 3
23895: NEG
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23932: LD_ADDR_VAR 0 46
23936: PUSH
23937: LD_INT 0
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: LD_INT 1
23952: NEG
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 1
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 0
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 1
23990: NEG
23991: PUSH
23992: LD_INT 0
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 1
24001: NEG
24002: PUSH
24003: LD_INT 1
24005: NEG
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 1
24013: NEG
24014: PUSH
24015: LD_INT 2
24017: NEG
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 0
24025: PUSH
24026: LD_INT 2
24028: NEG
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: LD_INT 1
24039: NEG
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 2
24047: PUSH
24048: LD_INT 0
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 2
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 1
24067: PUSH
24068: LD_INT 2
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 0
24077: PUSH
24078: LD_INT 2
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 1
24087: NEG
24088: PUSH
24089: LD_INT 1
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 2
24098: NEG
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 2
24109: NEG
24110: PUSH
24111: LD_INT 1
24113: NEG
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 1
24121: NEG
24122: PUSH
24123: LD_INT 3
24125: NEG
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 0
24133: PUSH
24134: LD_INT 3
24136: NEG
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 1
24144: PUSH
24145: LD_INT 2
24147: NEG
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 2
24155: PUSH
24156: LD_INT 1
24158: NEG
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 3
24166: PUSH
24167: LD_INT 0
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 3
24176: PUSH
24177: LD_INT 1
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 1
24186: PUSH
24187: LD_INT 3
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 0
24196: PUSH
24197: LD_INT 3
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 1
24206: NEG
24207: PUSH
24208: LD_INT 2
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 2
24217: NEG
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 3
24228: NEG
24229: PUSH
24230: LD_INT 0
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 3
24239: NEG
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24280: LD_ADDR_VAR 0 47
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: LD_INT 0
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 0
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 0
24328: PUSH
24329: LD_INT 1
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 1
24338: NEG
24339: PUSH
24340: LD_INT 0
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: LD_INT 1
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 1
24361: NEG
24362: PUSH
24363: LD_INT 2
24365: NEG
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 0
24373: PUSH
24374: LD_INT 2
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 2
24395: NEG
24396: PUSH
24397: LD_INT 1
24399: NEG
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 2
24407: NEG
24408: PUSH
24409: LD_INT 2
24411: NEG
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24431: LD_ADDR_VAR 0 48
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: LD_INT 1
24451: NEG
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: LD_INT 1
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 0
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 1
24489: NEG
24490: PUSH
24491: LD_INT 0
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 1
24500: NEG
24501: PUSH
24502: LD_INT 1
24504: NEG
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 1
24512: NEG
24513: PUSH
24514: LD_INT 2
24516: NEG
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 0
24524: PUSH
24525: LD_INT 2
24527: NEG
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: LD_INT 1
24538: NEG
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 2
24546: PUSH
24547: LD_INT 0
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 2
24556: PUSH
24557: LD_INT 1
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24578: LD_ADDR_VAR 0 49
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: LD_INT 0
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 0
24595: PUSH
24596: LD_INT 1
24598: NEG
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 1
24606: PUSH
24607: LD_INT 0
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 1
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: LD_INT 1
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 1
24636: NEG
24637: PUSH
24638: LD_INT 0
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 1
24647: NEG
24648: PUSH
24649: LD_INT 1
24651: NEG
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 1
24659: PUSH
24660: LD_INT 1
24662: NEG
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 2
24670: PUSH
24671: LD_INT 0
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 2
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 2
24690: PUSH
24691: LD_INT 2
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: LD_INT 2
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24722: LD_ADDR_VAR 0 50
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: LD_INT 0
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 0
24739: PUSH
24740: LD_INT 1
24742: NEG
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 1
24750: PUSH
24751: LD_INT 0
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 1
24760: PUSH
24761: LD_INT 1
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 0
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 1
24780: NEG
24781: PUSH
24782: LD_INT 0
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 1
24791: NEG
24792: PUSH
24793: LD_INT 1
24795: NEG
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 2
24803: PUSH
24804: LD_INT 1
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: LD_INT 2
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 1
24823: PUSH
24824: LD_INT 2
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 0
24833: PUSH
24834: LD_INT 2
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 1
24843: NEG
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24866: LD_ADDR_VAR 0 51
24870: PUSH
24871: LD_INT 0
24873: PUSH
24874: LD_INT 0
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 0
24883: PUSH
24884: LD_INT 1
24886: NEG
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: LD_INT 0
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 0
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 1
24924: NEG
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 1
24935: NEG
24936: PUSH
24937: LD_INT 1
24939: NEG
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 1
24947: PUSH
24948: LD_INT 2
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 0
24957: PUSH
24958: LD_INT 2
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 1
24967: NEG
24968: PUSH
24969: LD_INT 1
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 2
24978: NEG
24979: PUSH
24980: LD_INT 0
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 2
24989: NEG
24990: PUSH
24991: LD_INT 1
24993: NEG
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25013: LD_ADDR_VAR 0 52
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 0
25030: PUSH
25031: LD_INT 1
25033: NEG
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 1
25041: PUSH
25042: LD_INT 0
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 1
25051: PUSH
25052: LD_INT 1
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 0
25061: PUSH
25062: LD_INT 1
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 1
25071: NEG
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 1
25082: NEG
25083: PUSH
25084: LD_INT 1
25086: NEG
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 1
25094: NEG
25095: PUSH
25096: LD_INT 2
25098: NEG
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 1
25106: NEG
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 2
25117: NEG
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 2
25128: NEG
25129: PUSH
25130: LD_INT 1
25132: NEG
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 2
25140: NEG
25141: PUSH
25142: LD_INT 2
25144: NEG
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25164: LD_ADDR_VAR 0 53
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: LD_INT 0
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 0
25181: PUSH
25182: LD_INT 1
25184: NEG
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: LD_INT 0
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: LD_INT 1
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 1
25222: NEG
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: PUSH
25235: LD_INT 1
25237: NEG
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 1
25245: NEG
25246: PUSH
25247: LD_INT 2
25249: NEG
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: LD_INT 2
25260: NEG
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 1
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 0
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 2
25289: PUSH
25290: LD_INT 1
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: LD_INT 2
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: LD_INT 2
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: NEG
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 2
25340: NEG
25341: PUSH
25342: LD_INT 0
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 2
25351: NEG
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 2
25363: NEG
25364: PUSH
25365: LD_INT 2
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25394: LD_ADDR_VAR 0 54
25398: PUSH
25399: LD_INT 0
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 0
25411: PUSH
25412: LD_INT 1
25414: NEG
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 0
25442: PUSH
25443: LD_INT 1
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: NEG
25453: PUSH
25454: LD_INT 0
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: LD_INT 1
25467: NEG
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 1
25475: NEG
25476: PUSH
25477: LD_INT 2
25479: NEG
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 0
25487: PUSH
25488: LD_INT 2
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 1
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 2
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 2
25529: PUSH
25530: LD_INT 2
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: LD_INT 2
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 0
25549: PUSH
25550: LD_INT 2
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: NEG
25560: PUSH
25561: LD_INT 1
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 2
25570: NEG
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 2
25581: NEG
25582: PUSH
25583: LD_INT 1
25585: NEG
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 2
25593: NEG
25594: PUSH
25595: LD_INT 2
25597: NEG
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25624: LD_ADDR_VAR 0 55
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: LD_INT 1
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 1
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: LD_INT 1
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 1
25682: NEG
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: NEG
25694: PUSH
25695: LD_INT 1
25697: NEG
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 1
25705: NEG
25706: PUSH
25707: LD_INT 2
25709: NEG
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 0
25717: PUSH
25718: LD_INT 2
25720: NEG
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 1
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 2
25739: PUSH
25740: LD_INT 0
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 2
25749: PUSH
25750: LD_INT 1
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 2
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: LD_INT 2
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 1
25789: NEG
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 2
25800: NEG
25801: PUSH
25802: LD_INT 0
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 2
25811: NEG
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 2
25823: NEG
25824: PUSH
25825: LD_INT 2
25827: NEG
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25854: LD_ADDR_VAR 0 56
25858: PUSH
25859: LD_INT 0
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: LD_INT 1
25874: NEG
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 0
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: NEG
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 1
25923: NEG
25924: PUSH
25925: LD_INT 1
25927: NEG
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PUSH
25937: LD_INT 2
25939: NEG
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: LD_INT 2
25950: NEG
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 1
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 2
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 2
25979: PUSH
25980: LD_INT 1
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 2
25989: PUSH
25990: LD_INT 2
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 1
25999: PUSH
26000: LD_INT 2
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 0
26009: PUSH
26010: LD_INT 2
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 1
26019: NEG
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 2
26030: NEG
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 2
26041: NEG
26042: PUSH
26043: LD_INT 1
26045: NEG
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 2
26053: NEG
26054: PUSH
26055: LD_INT 2
26057: NEG
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26084: LD_ADDR_VAR 0 57
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 0
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 1
26142: NEG
26143: PUSH
26144: LD_INT 0
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 1
26165: NEG
26166: PUSH
26167: LD_INT 2
26169: NEG
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 0
26177: PUSH
26178: LD_INT 2
26180: NEG
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 2
26199: PUSH
26200: LD_INT 0
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 2
26209: PUSH
26210: LD_INT 1
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 2
26219: PUSH
26220: LD_INT 2
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: LD_INT 2
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: LD_INT 2
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 2
26260: NEG
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 2
26271: NEG
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 2
26283: NEG
26284: PUSH
26285: LD_INT 2
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26314: LD_ADDR_VAR 0 58
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: LD_INT 0
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: LD_INT 1
26334: NEG
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: LD_INT 0
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: NEG
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 1
26383: NEG
26384: PUSH
26385: LD_INT 1
26387: NEG
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: NEG
26396: PUSH
26397: LD_INT 2
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: LD_INT 2
26410: NEG
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 2
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 2
26439: PUSH
26440: LD_INT 1
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 2
26449: PUSH
26450: LD_INT 2
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: LD_INT 2
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 2
26490: NEG
26491: PUSH
26492: LD_INT 0
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 2
26501: NEG
26502: PUSH
26503: LD_INT 1
26505: NEG
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 2
26513: NEG
26514: PUSH
26515: LD_INT 2
26517: NEG
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26544: LD_ADDR_VAR 0 59
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 1
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: NEG
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: NEG
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26632: LD_ADDR_VAR 0 60
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 0
26649: PUSH
26650: LD_INT 1
26652: NEG
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 1
26670: PUSH
26671: LD_INT 1
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 0
26680: PUSH
26681: LD_INT 1
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: NEG
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 1
26701: NEG
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26720: LD_ADDR_VAR 0 61
26724: PUSH
26725: LD_INT 0
26727: PUSH
26728: LD_INT 0
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 0
26737: PUSH
26738: LD_INT 1
26740: NEG
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 1
26758: PUSH
26759: LD_INT 1
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 0
26768: PUSH
26769: LD_INT 1
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 1
26778: NEG
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 1
26789: NEG
26790: PUSH
26791: LD_INT 1
26793: NEG
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26808: LD_ADDR_VAR 0 62
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: LD_INT 0
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 0
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 1
26866: NEG
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 1
26877: NEG
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26896: LD_ADDR_VAR 0 63
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: LD_INT 0
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: LD_INT 1
26916: NEG
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: LD_INT 1
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: LD_INT 1
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 1
26954: NEG
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 1
26965: NEG
26966: PUSH
26967: LD_INT 1
26969: NEG
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26984: LD_ADDR_VAR 0 64
26988: PUSH
26989: LD_INT 0
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: LD_INT 1
27004: NEG
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: LD_INT 0
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 1
27022: PUSH
27023: LD_INT 1
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: LD_INT 0
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: LD_INT 1
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: ST_TO_ADDR
// end ; 1 :
27072: GO 32969
27074: LD_INT 1
27076: DOUBLE
27077: EQUAL
27078: IFTRUE 27082
27080: GO 29705
27082: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27083: LD_ADDR_VAR 0 11
27087: PUSH
27088: LD_INT 1
27090: NEG
27091: PUSH
27092: LD_INT 3
27094: NEG
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: LD_INT 3
27105: NEG
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 1
27113: PUSH
27114: LD_INT 2
27116: NEG
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: LIST
27126: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27127: LD_ADDR_VAR 0 12
27131: PUSH
27132: LD_INT 2
27134: PUSH
27135: LD_INT 1
27137: NEG
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 3
27145: PUSH
27146: LD_INT 0
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 3
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: LIST
27167: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27168: LD_ADDR_VAR 0 13
27172: PUSH
27173: LD_INT 3
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 3
27185: PUSH
27186: LD_INT 3
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: LD_INT 3
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: LIST
27207: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27208: LD_ADDR_VAR 0 14
27212: PUSH
27213: LD_INT 1
27215: PUSH
27216: LD_INT 3
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 0
27225: PUSH
27226: LD_INT 3
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: LD_INT 2
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: LIST
27248: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27249: LD_ADDR_VAR 0 15
27253: PUSH
27254: LD_INT 2
27256: NEG
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 3
27267: NEG
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 3
27278: NEG
27279: PUSH
27280: LD_INT 1
27282: NEG
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: LIST
27292: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27293: LD_ADDR_VAR 0 16
27297: PUSH
27298: LD_INT 2
27300: NEG
27301: PUSH
27302: LD_INT 3
27304: NEG
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 3
27312: NEG
27313: PUSH
27314: LD_INT 2
27316: NEG
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 3
27324: NEG
27325: PUSH
27326: LD_INT 3
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: LIST
27338: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27339: LD_ADDR_VAR 0 17
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: LD_INT 3
27350: NEG
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: LD_INT 3
27361: NEG
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 1
27369: PUSH
27370: LD_INT 2
27372: NEG
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: LIST
27382: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27383: LD_ADDR_VAR 0 18
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: LD_INT 1
27393: NEG
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 3
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 3
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: LIST
27423: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27424: LD_ADDR_VAR 0 19
27428: PUSH
27429: LD_INT 3
27431: PUSH
27432: LD_INT 2
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 3
27441: PUSH
27442: LD_INT 3
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 2
27451: PUSH
27452: LD_INT 3
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27464: LD_ADDR_VAR 0 20
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: LD_INT 3
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: LD_INT 3
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: LD_INT 2
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: LIST
27504: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27505: LD_ADDR_VAR 0 21
27509: PUSH
27510: LD_INT 2
27512: NEG
27513: PUSH
27514: LD_INT 1
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 3
27523: NEG
27524: PUSH
27525: LD_INT 0
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 3
27534: NEG
27535: PUSH
27536: LD_INT 1
27538: NEG
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: LIST
27548: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27549: LD_ADDR_VAR 0 22
27553: PUSH
27554: LD_INT 2
27556: NEG
27557: PUSH
27558: LD_INT 3
27560: NEG
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 3
27568: NEG
27569: PUSH
27570: LD_INT 2
27572: NEG
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 3
27580: NEG
27581: PUSH
27582: LD_INT 3
27584: NEG
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: LIST
27594: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27595: LD_ADDR_VAR 0 23
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: LD_INT 3
27605: NEG
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PUSH
27615: LD_INT 4
27617: NEG
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: LD_INT 3
27628: NEG
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: LIST
27638: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27639: LD_ADDR_VAR 0 24
27643: PUSH
27644: LD_INT 3
27646: PUSH
27647: LD_INT 0
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 3
27656: PUSH
27657: LD_INT 1
27659: NEG
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 4
27667: PUSH
27668: LD_INT 1
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: LIST
27679: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27680: LD_ADDR_VAR 0 25
27684: PUSH
27685: LD_INT 3
27687: PUSH
27688: LD_INT 3
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 4
27697: PUSH
27698: LD_INT 3
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 3
27707: PUSH
27708: LD_INT 4
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: LIST
27719: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27720: LD_ADDR_VAR 0 26
27724: PUSH
27725: LD_INT 0
27727: PUSH
27728: LD_INT 3
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 1
27737: PUSH
27738: LD_INT 4
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 1
27747: NEG
27748: PUSH
27749: LD_INT 3
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: LIST
27760: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27761: LD_ADDR_VAR 0 27
27765: PUSH
27766: LD_INT 3
27768: NEG
27769: PUSH
27770: LD_INT 0
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 3
27779: NEG
27780: PUSH
27781: LD_INT 1
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 4
27790: NEG
27791: PUSH
27792: LD_INT 1
27794: NEG
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27805: LD_ADDR_VAR 0 28
27809: PUSH
27810: LD_INT 3
27812: NEG
27813: PUSH
27814: LD_INT 3
27816: NEG
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 3
27824: NEG
27825: PUSH
27826: LD_INT 4
27828: NEG
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 4
27836: NEG
27837: PUSH
27838: LD_INT 3
27840: NEG
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: LIST
27850: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27851: LD_ADDR_VAR 0 29
27855: PUSH
27856: LD_INT 1
27858: NEG
27859: PUSH
27860: LD_INT 3
27862: NEG
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: LD_INT 3
27873: NEG
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 1
27881: PUSH
27882: LD_INT 2
27884: NEG
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 1
27892: NEG
27893: PUSH
27894: LD_INT 4
27896: NEG
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 0
27904: PUSH
27905: LD_INT 4
27907: NEG
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: LD_INT 3
27918: NEG
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 1
27926: NEG
27927: PUSH
27928: LD_INT 5
27930: NEG
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 0
27938: PUSH
27939: LD_INT 5
27941: NEG
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: PUSH
27950: LD_INT 4
27952: NEG
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: NEG
27961: PUSH
27962: LD_INT 6
27964: NEG
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: LD_INT 6
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: LD_INT 5
27986: NEG
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28006: LD_ADDR_VAR 0 30
28010: PUSH
28011: LD_INT 2
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 3
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 3
28034: PUSH
28035: LD_INT 1
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 3
28044: PUSH
28045: LD_INT 1
28047: NEG
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 4
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 4
28065: PUSH
28066: LD_INT 1
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 4
28075: PUSH
28076: LD_INT 1
28078: NEG
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 5
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 5
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 5
28106: PUSH
28107: LD_INT 1
28109: NEG
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 6
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 6
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28149: LD_ADDR_VAR 0 31
28153: PUSH
28154: LD_INT 3
28156: PUSH
28157: LD_INT 2
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 3
28166: PUSH
28167: LD_INT 3
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 2
28176: PUSH
28177: LD_INT 3
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 4
28186: PUSH
28187: LD_INT 3
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 4
28196: PUSH
28197: LD_INT 4
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 3
28206: PUSH
28207: LD_INT 4
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 5
28216: PUSH
28217: LD_INT 4
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 5
28226: PUSH
28227: LD_INT 5
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 4
28236: PUSH
28237: LD_INT 5
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 6
28246: PUSH
28247: LD_INT 5
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 6
28256: PUSH
28257: LD_INT 6
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 5
28266: PUSH
28267: LD_INT 6
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28288: LD_ADDR_VAR 0 32
28292: PUSH
28293: LD_INT 1
28295: PUSH
28296: LD_INT 3
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 0
28305: PUSH
28306: LD_INT 3
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 1
28315: NEG
28316: PUSH
28317: LD_INT 2
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 1
28326: PUSH
28327: LD_INT 4
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: LD_INT 4
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 1
28346: NEG
28347: PUSH
28348: LD_INT 3
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 1
28357: PUSH
28358: LD_INT 5
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: LD_INT 5
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 1
28377: NEG
28378: PUSH
28379: LD_INT 4
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 1
28388: PUSH
28389: LD_INT 6
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: LD_INT 6
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 1
28408: NEG
28409: PUSH
28410: LD_INT 5
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28431: LD_ADDR_VAR 0 33
28435: PUSH
28436: LD_INT 2
28438: NEG
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 3
28449: NEG
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 3
28460: NEG
28461: PUSH
28462: LD_INT 1
28464: NEG
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 3
28472: NEG
28473: PUSH
28474: LD_INT 1
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 4
28483: NEG
28484: PUSH
28485: LD_INT 0
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 4
28494: NEG
28495: PUSH
28496: LD_INT 1
28498: NEG
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 4
28506: NEG
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 5
28517: NEG
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 5
28528: NEG
28529: PUSH
28530: LD_INT 1
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 5
28540: NEG
28541: PUSH
28542: LD_INT 1
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 6
28551: NEG
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 6
28562: NEG
28563: PUSH
28564: LD_INT 1
28566: NEG
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28586: LD_ADDR_VAR 0 34
28590: PUSH
28591: LD_INT 2
28593: NEG
28594: PUSH
28595: LD_INT 3
28597: NEG
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 3
28605: NEG
28606: PUSH
28607: LD_INT 2
28609: NEG
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 3
28617: NEG
28618: PUSH
28619: LD_INT 3
28621: NEG
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 3
28629: NEG
28630: PUSH
28631: LD_INT 4
28633: NEG
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 4
28641: NEG
28642: PUSH
28643: LD_INT 3
28645: NEG
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 4
28653: NEG
28654: PUSH
28655: LD_INT 4
28657: NEG
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 4
28665: NEG
28666: PUSH
28667: LD_INT 5
28669: NEG
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 5
28677: NEG
28678: PUSH
28679: LD_INT 4
28681: NEG
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 5
28689: NEG
28690: PUSH
28691: LD_INT 5
28693: NEG
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 5
28701: NEG
28702: PUSH
28703: LD_INT 6
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 6
28713: NEG
28714: PUSH
28715: LD_INT 5
28717: NEG
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 6
28725: NEG
28726: PUSH
28727: LD_INT 6
28729: NEG
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28749: LD_ADDR_VAR 0 41
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: LD_INT 2
28759: NEG
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: LD_INT 3
28771: NEG
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 1
28779: PUSH
28780: LD_INT 2
28782: NEG
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: LIST
28792: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28793: LD_ADDR_VAR 0 42
28797: PUSH
28798: LD_INT 2
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 2
28810: PUSH
28811: LD_INT 1
28813: NEG
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 3
28821: PUSH
28822: LD_INT 1
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: LIST
28833: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28834: LD_ADDR_VAR 0 43
28838: PUSH
28839: LD_INT 2
28841: PUSH
28842: LD_INT 2
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 3
28851: PUSH
28852: LD_INT 2
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 2
28861: PUSH
28862: LD_INT 3
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: LIST
28873: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28874: LD_ADDR_VAR 0 44
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: LD_INT 2
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 1
28891: PUSH
28892: LD_INT 3
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: LD_INT 2
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: LIST
28914: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28915: LD_ADDR_VAR 0 45
28919: PUSH
28920: LD_INT 2
28922: NEG
28923: PUSH
28924: LD_INT 0
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 2
28933: NEG
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 3
28944: NEG
28945: PUSH
28946: LD_INT 1
28948: NEG
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: LIST
28958: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28959: LD_ADDR_VAR 0 46
28963: PUSH
28964: LD_INT 2
28966: NEG
28967: PUSH
28968: LD_INT 2
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 2
28978: NEG
28979: PUSH
28980: LD_INT 3
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 3
28990: NEG
28991: PUSH
28992: LD_INT 2
28994: NEG
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: LIST
29004: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29005: LD_ADDR_VAR 0 47
29009: PUSH
29010: LD_INT 2
29012: NEG
29013: PUSH
29014: LD_INT 3
29016: NEG
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 1
29024: NEG
29025: PUSH
29026: LD_INT 3
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29038: LD_ADDR_VAR 0 48
29042: PUSH
29043: LD_INT 1
29045: PUSH
29046: LD_INT 2
29048: NEG
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 2
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29069: LD_ADDR_VAR 0 49
29073: PUSH
29074: LD_INT 3
29076: PUSH
29077: LD_INT 1
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 3
29086: PUSH
29087: LD_INT 2
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29098: LD_ADDR_VAR 0 50
29102: PUSH
29103: LD_INT 2
29105: PUSH
29106: LD_INT 3
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: LD_INT 3
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29127: LD_ADDR_VAR 0 51
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: LD_INT 2
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 2
29145: NEG
29146: PUSH
29147: LD_INT 1
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29158: LD_ADDR_VAR 0 52
29162: PUSH
29163: LD_INT 3
29165: NEG
29166: PUSH
29167: LD_INT 1
29169: NEG
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 3
29177: NEG
29178: PUSH
29179: LD_INT 2
29181: NEG
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29191: LD_ADDR_VAR 0 53
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: LD_INT 3
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 0
29210: PUSH
29211: LD_INT 3
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: LD_INT 2
29224: NEG
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: LIST
29234: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29235: LD_ADDR_VAR 0 54
29239: PUSH
29240: LD_INT 2
29242: PUSH
29243: LD_INT 1
29245: NEG
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 3
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 3
29263: PUSH
29264: LD_INT 1
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: LIST
29275: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29276: LD_ADDR_VAR 0 55
29280: PUSH
29281: LD_INT 3
29283: PUSH
29284: LD_INT 2
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 3
29293: PUSH
29294: LD_INT 3
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 2
29303: PUSH
29304: LD_INT 3
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: LIST
29315: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29316: LD_ADDR_VAR 0 56
29320: PUSH
29321: LD_INT 1
29323: PUSH
29324: LD_INT 3
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 0
29333: PUSH
29334: LD_INT 3
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: LD_INT 2
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: LIST
29356: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29357: LD_ADDR_VAR 0 57
29361: PUSH
29362: LD_INT 2
29364: NEG
29365: PUSH
29366: LD_INT 1
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 3
29375: NEG
29376: PUSH
29377: LD_INT 0
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 3
29386: NEG
29387: PUSH
29388: LD_INT 1
29390: NEG
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: LIST
29400: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29401: LD_ADDR_VAR 0 58
29405: PUSH
29406: LD_INT 2
29408: NEG
29409: PUSH
29410: LD_INT 3
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 3
29420: NEG
29421: PUSH
29422: LD_INT 2
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 3
29432: NEG
29433: PUSH
29434: LD_INT 3
29436: NEG
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: LIST
29446: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29447: LD_ADDR_VAR 0 59
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: LD_INT 2
29458: NEG
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 0
29466: PUSH
29467: LD_INT 2
29469: NEG
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: LD_INT 1
29480: NEG
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: LIST
29490: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29491: LD_ADDR_VAR 0 60
29495: PUSH
29496: LD_INT 1
29498: PUSH
29499: LD_INT 1
29501: NEG
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: LIST
29531: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29532: LD_ADDR_VAR 0 61
29536: PUSH
29537: LD_INT 2
29539: PUSH
29540: LD_INT 1
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 2
29549: PUSH
29550: LD_INT 2
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: LD_INT 2
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: LIST
29571: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29572: LD_ADDR_VAR 0 62
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: LD_INT 2
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 1
29599: NEG
29600: PUSH
29601: LD_INT 1
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: LIST
29612: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29613: LD_ADDR_VAR 0 63
29617: PUSH
29618: LD_INT 1
29620: NEG
29621: PUSH
29622: LD_INT 1
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 2
29631: NEG
29632: PUSH
29633: LD_INT 0
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 2
29642: NEG
29643: PUSH
29644: LD_INT 1
29646: NEG
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: LIST
29656: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29657: LD_ADDR_VAR 0 64
29661: PUSH
29662: LD_INT 1
29664: NEG
29665: PUSH
29666: LD_INT 2
29668: NEG
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 2
29676: NEG
29677: PUSH
29678: LD_INT 1
29680: NEG
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 2
29688: NEG
29689: PUSH
29690: LD_INT 2
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: LIST
29702: ST_TO_ADDR
// end ; 2 :
29703: GO 32969
29705: LD_INT 2
29707: DOUBLE
29708: EQUAL
29709: IFTRUE 29713
29711: GO 32968
29713: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29714: LD_ADDR_VAR 0 29
29718: PUSH
29719: LD_INT 4
29721: PUSH
29722: LD_INT 0
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 4
29731: PUSH
29732: LD_INT 1
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 5
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 5
29752: PUSH
29753: LD_INT 1
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 4
29762: PUSH
29763: LD_INT 1
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 3
29772: PUSH
29773: LD_INT 0
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 3
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 3
29793: PUSH
29794: LD_INT 2
29796: NEG
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 5
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 3
29814: PUSH
29815: LD_INT 3
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 3
29824: PUSH
29825: LD_INT 2
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 4
29834: PUSH
29835: LD_INT 3
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 4
29844: PUSH
29845: LD_INT 4
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 3
29854: PUSH
29855: LD_INT 4
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 2
29864: PUSH
29865: LD_INT 3
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 2
29874: PUSH
29875: LD_INT 2
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 4
29884: PUSH
29885: LD_INT 2
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 2
29894: PUSH
29895: LD_INT 4
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 0
29904: PUSH
29905: LD_INT 4
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 0
29914: PUSH
29915: LD_INT 3
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 1
29924: PUSH
29925: LD_INT 4
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 1
29934: PUSH
29935: LD_INT 5
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 0
29944: PUSH
29945: LD_INT 5
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 1
29954: NEG
29955: PUSH
29956: LD_INT 4
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 1
29965: NEG
29966: PUSH
29967: LD_INT 3
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 2
29976: PUSH
29977: LD_INT 5
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 2
29986: NEG
29987: PUSH
29988: LD_INT 3
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 3
29997: NEG
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 3
30008: NEG
30009: PUSH
30010: LD_INT 1
30012: NEG
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 2
30020: NEG
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 2
30031: NEG
30032: PUSH
30033: LD_INT 1
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 3
30042: NEG
30043: PUSH
30044: LD_INT 1
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 4
30053: NEG
30054: PUSH
30055: LD_INT 0
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 4
30064: NEG
30065: PUSH
30066: LD_INT 1
30068: NEG
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 4
30076: NEG
30077: PUSH
30078: LD_INT 2
30080: NEG
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 2
30088: NEG
30089: PUSH
30090: LD_INT 2
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 4
30099: NEG
30100: PUSH
30101: LD_INT 4
30103: NEG
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 4
30111: NEG
30112: PUSH
30113: LD_INT 5
30115: NEG
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 3
30123: NEG
30124: PUSH
30125: LD_INT 4
30127: NEG
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 3
30135: NEG
30136: PUSH
30137: LD_INT 3
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 4
30147: NEG
30148: PUSH
30149: LD_INT 3
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 5
30159: NEG
30160: PUSH
30161: LD_INT 4
30163: NEG
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 5
30171: NEG
30172: PUSH
30173: LD_INT 5
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 3
30183: NEG
30184: PUSH
30185: LD_INT 5
30187: NEG
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 5
30195: NEG
30196: PUSH
30197: LD_INT 3
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30252: LD_ADDR_VAR 0 30
30256: PUSH
30257: LD_INT 4
30259: PUSH
30260: LD_INT 4
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 4
30269: PUSH
30270: LD_INT 3
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 5
30279: PUSH
30280: LD_INT 4
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 5
30289: PUSH
30290: LD_INT 5
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 4
30299: PUSH
30300: LD_INT 5
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 3
30309: PUSH
30310: LD_INT 4
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 3
30319: PUSH
30320: LD_INT 3
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 5
30329: PUSH
30330: LD_INT 3
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: LD_INT 5
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: LD_INT 3
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 0
30359: PUSH
30360: LD_INT 2
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 1
30369: PUSH
30370: LD_INT 3
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: LD_INT 4
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 0
30389: PUSH
30390: LD_INT 4
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 1
30399: NEG
30400: PUSH
30401: LD_INT 3
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 1
30410: NEG
30411: PUSH
30412: LD_INT 2
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 2
30421: PUSH
30422: LD_INT 4
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 2
30431: NEG
30432: PUSH
30433: LD_INT 2
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 4
30442: NEG
30443: PUSH
30444: LD_INT 0
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 4
30453: NEG
30454: PUSH
30455: LD_INT 1
30457: NEG
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 3
30465: NEG
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 3
30476: NEG
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 4
30487: NEG
30488: PUSH
30489: LD_INT 1
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 5
30498: NEG
30499: PUSH
30500: LD_INT 0
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 5
30509: NEG
30510: PUSH
30511: LD_INT 1
30513: NEG
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 5
30521: NEG
30522: PUSH
30523: LD_INT 2
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 3
30533: NEG
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 3
30544: NEG
30545: PUSH
30546: LD_INT 3
30548: NEG
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 3
30556: NEG
30557: PUSH
30558: LD_INT 4
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 2
30568: NEG
30569: PUSH
30570: LD_INT 3
30572: NEG
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 2
30580: NEG
30581: PUSH
30582: LD_INT 2
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 3
30592: NEG
30593: PUSH
30594: LD_INT 2
30596: NEG
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 4
30604: NEG
30605: PUSH
30606: LD_INT 3
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 4
30616: NEG
30617: PUSH
30618: LD_INT 4
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 2
30628: NEG
30629: PUSH
30630: LD_INT 4
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 4
30640: NEG
30641: PUSH
30642: LD_INT 2
30644: NEG
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 0
30652: PUSH
30653: LD_INT 4
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: LD_INT 5
30666: NEG
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: LD_INT 4
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: LD_INT 3
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 0
30696: PUSH
30697: LD_INT 3
30699: NEG
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 1
30707: NEG
30708: PUSH
30709: LD_INT 4
30711: NEG
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: LD_INT 5
30723: NEG
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 2
30731: PUSH
30732: LD_INT 3
30734: NEG
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 2
30742: NEG
30743: PUSH
30744: LD_INT 5
30746: NEG
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30799: LD_ADDR_VAR 0 31
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: LD_INT 4
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: LD_INT 3
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: LD_INT 4
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: LD_INT 5
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: LD_INT 5
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: LD_INT 4
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: LD_INT 3
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 2
30878: PUSH
30879: LD_INT 5
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 2
30888: NEG
30889: PUSH
30890: LD_INT 3
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 3
30899: NEG
30900: PUSH
30901: LD_INT 0
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 3
30910: NEG
30911: PUSH
30912: LD_INT 1
30914: NEG
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 2
30922: NEG
30923: PUSH
30924: LD_INT 0
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 2
30933: NEG
30934: PUSH
30935: LD_INT 1
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 3
30944: NEG
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 4
30955: NEG
30956: PUSH
30957: LD_INT 0
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 4
30966: NEG
30967: PUSH
30968: LD_INT 1
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 4
30978: NEG
30979: PUSH
30980: LD_INT 2
30982: NEG
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 2
30990: NEG
30991: PUSH
30992: LD_INT 2
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 4
31001: NEG
31002: PUSH
31003: LD_INT 4
31005: NEG
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 4
31013: NEG
31014: PUSH
31015: LD_INT 5
31017: NEG
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 3
31025: NEG
31026: PUSH
31027: LD_INT 4
31029: NEG
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 3
31037: NEG
31038: PUSH
31039: LD_INT 3
31041: NEG
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 4
31049: NEG
31050: PUSH
31051: LD_INT 3
31053: NEG
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 5
31061: NEG
31062: PUSH
31063: LD_INT 4
31065: NEG
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 5
31073: NEG
31074: PUSH
31075: LD_INT 5
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 3
31085: NEG
31086: PUSH
31087: LD_INT 5
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 5
31097: NEG
31098: PUSH
31099: LD_INT 3
31101: NEG
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: LD_INT 3
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: LD_INT 4
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: LD_INT 3
31134: NEG
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 1
31142: PUSH
31143: LD_INT 2
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 0
31153: PUSH
31154: LD_INT 2
31156: NEG
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 1
31164: NEG
31165: PUSH
31166: LD_INT 3
31168: NEG
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 1
31176: NEG
31177: PUSH
31178: LD_INT 4
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: LD_INT 2
31191: NEG
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 2
31199: NEG
31200: PUSH
31201: LD_INT 4
31203: NEG
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 4
31211: PUSH
31212: LD_INT 0
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 4
31221: PUSH
31222: LD_INT 1
31224: NEG
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 5
31232: PUSH
31233: LD_INT 0
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 5
31242: PUSH
31243: LD_INT 1
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 4
31252: PUSH
31253: LD_INT 1
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 3
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 3
31272: PUSH
31273: LD_INT 1
31275: NEG
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 3
31283: PUSH
31284: LD_INT 2
31286: NEG
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 5
31294: PUSH
31295: LD_INT 2
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31349: LD_ADDR_VAR 0 32
31353: PUSH
31354: LD_INT 4
31356: NEG
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 4
31367: NEG
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 3
31379: NEG
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 3
31390: NEG
31391: PUSH
31392: LD_INT 1
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 4
31401: NEG
31402: PUSH
31403: LD_INT 1
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 5
31412: NEG
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 5
31423: NEG
31424: PUSH
31425: LD_INT 1
31427: NEG
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 5
31435: NEG
31436: PUSH
31437: LD_INT 2
31439: NEG
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 3
31447: NEG
31448: PUSH
31449: LD_INT 2
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 3
31458: NEG
31459: PUSH
31460: LD_INT 3
31462: NEG
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 3
31470: NEG
31471: PUSH
31472: LD_INT 4
31474: NEG
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 2
31482: NEG
31483: PUSH
31484: LD_INT 3
31486: NEG
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 2
31494: NEG
31495: PUSH
31496: LD_INT 2
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 3
31506: NEG
31507: PUSH
31508: LD_INT 2
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 4
31518: NEG
31519: PUSH
31520: LD_INT 3
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 4
31530: NEG
31531: PUSH
31532: LD_INT 4
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 2
31542: NEG
31543: PUSH
31544: LD_INT 4
31546: NEG
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 4
31554: NEG
31555: PUSH
31556: LD_INT 2
31558: NEG
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 0
31566: PUSH
31567: LD_INT 4
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 0
31577: PUSH
31578: LD_INT 5
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 1
31588: PUSH
31589: LD_INT 4
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 1
31599: PUSH
31600: LD_INT 3
31602: NEG
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 0
31610: PUSH
31611: LD_INT 3
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 1
31621: NEG
31622: PUSH
31623: LD_INT 4
31625: NEG
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 1
31633: NEG
31634: PUSH
31635: LD_INT 5
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 2
31645: PUSH
31646: LD_INT 3
31648: NEG
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 2
31656: NEG
31657: PUSH
31658: LD_INT 5
31660: NEG
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 3
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 3
31678: PUSH
31679: LD_INT 1
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 4
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 4
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 3
31709: PUSH
31710: LD_INT 1
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: LD_INT 0
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 2
31729: PUSH
31730: LD_INT 1
31732: NEG
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 2
31740: PUSH
31741: LD_INT 2
31743: NEG
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 4
31751: PUSH
31752: LD_INT 2
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 4
31761: PUSH
31762: LD_INT 4
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 4
31771: PUSH
31772: LD_INT 3
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 5
31781: PUSH
31782: LD_INT 4
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 5
31791: PUSH
31792: LD_INT 5
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 4
31801: PUSH
31802: LD_INT 5
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 3
31811: PUSH
31812: LD_INT 4
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 3
31821: PUSH
31822: LD_INT 3
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 5
31831: PUSH
31832: LD_INT 3
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 3
31841: PUSH
31842: LD_INT 5
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31896: LD_ADDR_VAR 0 33
31900: PUSH
31901: LD_INT 4
31903: NEG
31904: PUSH
31905: LD_INT 4
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 4
31915: NEG
31916: PUSH
31917: LD_INT 5
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 3
31927: NEG
31928: PUSH
31929: LD_INT 4
31931: NEG
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 3
31939: NEG
31940: PUSH
31941: LD_INT 3
31943: NEG
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 4
31951: NEG
31952: PUSH
31953: LD_INT 3
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 5
31963: NEG
31964: PUSH
31965: LD_INT 4
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 5
31975: NEG
31976: PUSH
31977: LD_INT 5
31979: NEG
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 3
31987: NEG
31988: PUSH
31989: LD_INT 5
31991: NEG
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 5
31999: NEG
32000: PUSH
32001: LD_INT 3
32003: NEG
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: LD_INT 3
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: LD_INT 4
32025: NEG
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: PUSH
32034: LD_INT 3
32036: NEG
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 1
32044: PUSH
32045: LD_INT 2
32047: NEG
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 0
32055: PUSH
32056: LD_INT 2
32058: NEG
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 1
32066: NEG
32067: PUSH
32068: LD_INT 3
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: LD_INT 4
32082: NEG
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 2
32090: PUSH
32091: LD_INT 2
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 2
32101: NEG
32102: PUSH
32103: LD_INT 4
32105: NEG
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 4
32113: PUSH
32114: LD_INT 0
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 4
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 5
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 5
32144: PUSH
32145: LD_INT 1
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 4
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 3
32164: PUSH
32165: LD_INT 0
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 3
32174: PUSH
32175: LD_INT 1
32177: NEG
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 3
32185: PUSH
32186: LD_INT 2
32188: NEG
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 5
32196: PUSH
32197: LD_INT 2
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 3
32206: PUSH
32207: LD_INT 3
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 3
32216: PUSH
32217: LD_INT 2
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 4
32226: PUSH
32227: LD_INT 3
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 4
32236: PUSH
32237: LD_INT 4
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 3
32246: PUSH
32247: LD_INT 4
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 2
32256: PUSH
32257: LD_INT 3
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 2
32266: PUSH
32267: LD_INT 2
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 4
32276: PUSH
32277: LD_INT 2
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: LD_INT 4
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 0
32296: PUSH
32297: LD_INT 4
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 0
32306: PUSH
32307: LD_INT 3
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: PUSH
32317: LD_INT 4
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: LD_INT 5
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: LD_INT 5
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 1
32346: NEG
32347: PUSH
32348: LD_INT 4
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 1
32357: NEG
32358: PUSH
32359: LD_INT 3
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 2
32368: PUSH
32369: LD_INT 5
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 2
32378: NEG
32379: PUSH
32380: LD_INT 3
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32434: LD_ADDR_VAR 0 34
32438: PUSH
32439: LD_INT 0
32441: PUSH
32442: LD_INT 4
32444: NEG
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: LD_INT 5
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: LD_INT 4
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 1
32474: PUSH
32475: LD_INT 3
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: LD_INT 3
32488: NEG
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 1
32496: NEG
32497: PUSH
32498: LD_INT 4
32500: NEG
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 1
32508: NEG
32509: PUSH
32510: LD_INT 5
32512: NEG
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 2
32520: PUSH
32521: LD_INT 3
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 2
32531: NEG
32532: PUSH
32533: LD_INT 5
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 3
32543: PUSH
32544: LD_INT 0
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 3
32553: PUSH
32554: LD_INT 1
32556: NEG
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 4
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 4
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 3
32584: PUSH
32585: LD_INT 1
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 2
32594: PUSH
32595: LD_INT 0
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 2
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 2
32615: PUSH
32616: LD_INT 2
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 4
32626: PUSH
32627: LD_INT 2
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 4
32636: PUSH
32637: LD_INT 4
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 4
32646: PUSH
32647: LD_INT 3
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 5
32656: PUSH
32657: LD_INT 4
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 5
32666: PUSH
32667: LD_INT 5
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 4
32676: PUSH
32677: LD_INT 5
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 3
32686: PUSH
32687: LD_INT 4
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 3
32696: PUSH
32697: LD_INT 3
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 5
32706: PUSH
32707: LD_INT 3
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 3
32716: PUSH
32717: LD_INT 5
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 0
32726: PUSH
32727: LD_INT 3
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: LD_INT 2
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 1
32746: PUSH
32747: LD_INT 3
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: LD_INT 4
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: LD_INT 4
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: NEG
32777: PUSH
32778: LD_INT 3
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 1
32787: NEG
32788: PUSH
32789: LD_INT 2
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 2
32798: PUSH
32799: LD_INT 4
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 2
32808: NEG
32809: PUSH
32810: LD_INT 2
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 4
32819: NEG
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 4
32830: NEG
32831: PUSH
32832: LD_INT 1
32834: NEG
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 3
32842: NEG
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 3
32853: NEG
32854: PUSH
32855: LD_INT 1
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 4
32864: NEG
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 5
32875: NEG
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 5
32886: NEG
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 5
32898: NEG
32899: PUSH
32900: LD_INT 2
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 3
32910: NEG
32911: PUSH
32912: LD_INT 2
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: ST_TO_ADDR
// end ; end ;
32966: GO 32969
32968: POP
// case btype of b_depot , b_warehouse :
32969: LD_VAR 0 1
32973: PUSH
32974: LD_INT 0
32976: DOUBLE
32977: EQUAL
32978: IFTRUE 32988
32980: LD_INT 1
32982: DOUBLE
32983: EQUAL
32984: IFTRUE 32988
32986: GO 33189
32988: POP
// case nation of nation_american :
32989: LD_VAR 0 5
32993: PUSH
32994: LD_INT 1
32996: DOUBLE
32997: EQUAL
32998: IFTRUE 33002
33000: GO 33058
33002: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
33003: LD_ADDR_VAR 0 9
33007: PUSH
33008: LD_VAR 0 11
33012: PUSH
33013: LD_VAR 0 12
33017: PUSH
33018: LD_VAR 0 13
33022: PUSH
33023: LD_VAR 0 14
33027: PUSH
33028: LD_VAR 0 15
33032: PUSH
33033: LD_VAR 0 16
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: PUSH
33046: LD_VAR 0 4
33050: PUSH
33051: LD_INT 1
33053: PLUS
33054: ARRAY
33055: ST_TO_ADDR
33056: GO 33187
33058: LD_INT 2
33060: DOUBLE
33061: EQUAL
33062: IFTRUE 33066
33064: GO 33122
33066: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
33067: LD_ADDR_VAR 0 9
33071: PUSH
33072: LD_VAR 0 17
33076: PUSH
33077: LD_VAR 0 18
33081: PUSH
33082: LD_VAR 0 19
33086: PUSH
33087: LD_VAR 0 20
33091: PUSH
33092: LD_VAR 0 21
33096: PUSH
33097: LD_VAR 0 22
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: PUSH
33110: LD_VAR 0 4
33114: PUSH
33115: LD_INT 1
33117: PLUS
33118: ARRAY
33119: ST_TO_ADDR
33120: GO 33187
33122: LD_INT 3
33124: DOUBLE
33125: EQUAL
33126: IFTRUE 33130
33128: GO 33186
33130: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33131: LD_ADDR_VAR 0 9
33135: PUSH
33136: LD_VAR 0 23
33140: PUSH
33141: LD_VAR 0 24
33145: PUSH
33146: LD_VAR 0 25
33150: PUSH
33151: LD_VAR 0 26
33155: PUSH
33156: LD_VAR 0 27
33160: PUSH
33161: LD_VAR 0 28
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: PUSH
33174: LD_VAR 0 4
33178: PUSH
33179: LD_INT 1
33181: PLUS
33182: ARRAY
33183: ST_TO_ADDR
33184: GO 33187
33186: POP
33187: GO 33736
33189: LD_INT 2
33191: DOUBLE
33192: EQUAL
33193: IFTRUE 33203
33195: LD_INT 3
33197: DOUBLE
33198: EQUAL
33199: IFTRUE 33203
33201: GO 33259
33203: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33204: LD_ADDR_VAR 0 9
33208: PUSH
33209: LD_VAR 0 29
33213: PUSH
33214: LD_VAR 0 30
33218: PUSH
33219: LD_VAR 0 31
33223: PUSH
33224: LD_VAR 0 32
33228: PUSH
33229: LD_VAR 0 33
33233: PUSH
33234: LD_VAR 0 34
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: PUSH
33247: LD_VAR 0 4
33251: PUSH
33252: LD_INT 1
33254: PLUS
33255: ARRAY
33256: ST_TO_ADDR
33257: GO 33736
33259: LD_INT 16
33261: DOUBLE
33262: EQUAL
33263: IFTRUE 33315
33265: LD_INT 17
33267: DOUBLE
33268: EQUAL
33269: IFTRUE 33315
33271: LD_INT 18
33273: DOUBLE
33274: EQUAL
33275: IFTRUE 33315
33277: LD_INT 19
33279: DOUBLE
33280: EQUAL
33281: IFTRUE 33315
33283: LD_INT 20
33285: DOUBLE
33286: EQUAL
33287: IFTRUE 33315
33289: LD_INT 21
33291: DOUBLE
33292: EQUAL
33293: IFTRUE 33315
33295: LD_INT 23
33297: DOUBLE
33298: EQUAL
33299: IFTRUE 33315
33301: LD_INT 24
33303: DOUBLE
33304: EQUAL
33305: IFTRUE 33315
33307: LD_INT 25
33309: DOUBLE
33310: EQUAL
33311: IFTRUE 33315
33313: GO 33371
33315: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33316: LD_ADDR_VAR 0 9
33320: PUSH
33321: LD_VAR 0 35
33325: PUSH
33326: LD_VAR 0 36
33330: PUSH
33331: LD_VAR 0 37
33335: PUSH
33336: LD_VAR 0 38
33340: PUSH
33341: LD_VAR 0 39
33345: PUSH
33346: LD_VAR 0 40
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: PUSH
33359: LD_VAR 0 4
33363: PUSH
33364: LD_INT 1
33366: PLUS
33367: ARRAY
33368: ST_TO_ADDR
33369: GO 33736
33371: LD_INT 6
33373: DOUBLE
33374: EQUAL
33375: IFTRUE 33427
33377: LD_INT 7
33379: DOUBLE
33380: EQUAL
33381: IFTRUE 33427
33383: LD_INT 8
33385: DOUBLE
33386: EQUAL
33387: IFTRUE 33427
33389: LD_INT 13
33391: DOUBLE
33392: EQUAL
33393: IFTRUE 33427
33395: LD_INT 12
33397: DOUBLE
33398: EQUAL
33399: IFTRUE 33427
33401: LD_INT 15
33403: DOUBLE
33404: EQUAL
33405: IFTRUE 33427
33407: LD_INT 11
33409: DOUBLE
33410: EQUAL
33411: IFTRUE 33427
33413: LD_INT 14
33415: DOUBLE
33416: EQUAL
33417: IFTRUE 33427
33419: LD_INT 10
33421: DOUBLE
33422: EQUAL
33423: IFTRUE 33427
33425: GO 33483
33427: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
33428: LD_ADDR_VAR 0 9
33432: PUSH
33433: LD_VAR 0 41
33437: PUSH
33438: LD_VAR 0 42
33442: PUSH
33443: LD_VAR 0 43
33447: PUSH
33448: LD_VAR 0 44
33452: PUSH
33453: LD_VAR 0 45
33457: PUSH
33458: LD_VAR 0 46
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: PUSH
33471: LD_VAR 0 4
33475: PUSH
33476: LD_INT 1
33478: PLUS
33479: ARRAY
33480: ST_TO_ADDR
33481: GO 33736
33483: LD_INT 36
33485: DOUBLE
33486: EQUAL
33487: IFTRUE 33491
33489: GO 33547
33491: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33492: LD_ADDR_VAR 0 9
33496: PUSH
33497: LD_VAR 0 47
33501: PUSH
33502: LD_VAR 0 48
33506: PUSH
33507: LD_VAR 0 49
33511: PUSH
33512: LD_VAR 0 50
33516: PUSH
33517: LD_VAR 0 51
33521: PUSH
33522: LD_VAR 0 52
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: PUSH
33535: LD_VAR 0 4
33539: PUSH
33540: LD_INT 1
33542: PLUS
33543: ARRAY
33544: ST_TO_ADDR
33545: GO 33736
33547: LD_INT 4
33549: DOUBLE
33550: EQUAL
33551: IFTRUE 33573
33553: LD_INT 5
33555: DOUBLE
33556: EQUAL
33557: IFTRUE 33573
33559: LD_INT 34
33561: DOUBLE
33562: EQUAL
33563: IFTRUE 33573
33565: LD_INT 37
33567: DOUBLE
33568: EQUAL
33569: IFTRUE 33573
33571: GO 33629
33573: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33574: LD_ADDR_VAR 0 9
33578: PUSH
33579: LD_VAR 0 53
33583: PUSH
33584: LD_VAR 0 54
33588: PUSH
33589: LD_VAR 0 55
33593: PUSH
33594: LD_VAR 0 56
33598: PUSH
33599: LD_VAR 0 57
33603: PUSH
33604: LD_VAR 0 58
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: PUSH
33617: LD_VAR 0 4
33621: PUSH
33622: LD_INT 1
33624: PLUS
33625: ARRAY
33626: ST_TO_ADDR
33627: GO 33736
33629: LD_INT 31
33631: DOUBLE
33632: EQUAL
33633: IFTRUE 33679
33635: LD_INT 32
33637: DOUBLE
33638: EQUAL
33639: IFTRUE 33679
33641: LD_INT 33
33643: DOUBLE
33644: EQUAL
33645: IFTRUE 33679
33647: LD_INT 27
33649: DOUBLE
33650: EQUAL
33651: IFTRUE 33679
33653: LD_INT 26
33655: DOUBLE
33656: EQUAL
33657: IFTRUE 33679
33659: LD_INT 28
33661: DOUBLE
33662: EQUAL
33663: IFTRUE 33679
33665: LD_INT 29
33667: DOUBLE
33668: EQUAL
33669: IFTRUE 33679
33671: LD_INT 30
33673: DOUBLE
33674: EQUAL
33675: IFTRUE 33679
33677: GO 33735
33679: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
33680: LD_ADDR_VAR 0 9
33684: PUSH
33685: LD_VAR 0 59
33689: PUSH
33690: LD_VAR 0 60
33694: PUSH
33695: LD_VAR 0 61
33699: PUSH
33700: LD_VAR 0 62
33704: PUSH
33705: LD_VAR 0 63
33709: PUSH
33710: LD_VAR 0 64
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: PUSH
33723: LD_VAR 0 4
33727: PUSH
33728: LD_INT 1
33730: PLUS
33731: ARRAY
33732: ST_TO_ADDR
33733: GO 33736
33735: POP
// temp_list2 = [ ] ;
33736: LD_ADDR_VAR 0 10
33740: PUSH
33741: EMPTY
33742: ST_TO_ADDR
// for i in temp_list do
33743: LD_ADDR_VAR 0 8
33747: PUSH
33748: LD_VAR 0 9
33752: PUSH
33753: FOR_IN
33754: IFFALSE 33806
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33756: LD_ADDR_VAR 0 10
33760: PUSH
33761: LD_VAR 0 10
33765: PUSH
33766: LD_VAR 0 8
33770: PUSH
33771: LD_INT 1
33773: ARRAY
33774: PUSH
33775: LD_VAR 0 2
33779: PLUS
33780: PUSH
33781: LD_VAR 0 8
33785: PUSH
33786: LD_INT 2
33788: ARRAY
33789: PUSH
33790: LD_VAR 0 3
33794: PLUS
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: EMPTY
33801: LIST
33802: ADD
33803: ST_TO_ADDR
33804: GO 33753
33806: POP
33807: POP
// result = temp_list2 ;
33808: LD_ADDR_VAR 0 7
33812: PUSH
33813: LD_VAR 0 10
33817: ST_TO_ADDR
// end ;
33818: LD_VAR 0 7
33822: RET
// export function EnemyInRange ( unit , dist ) ; begin
33823: LD_INT 0
33825: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33826: LD_ADDR_VAR 0 3
33830: PUSH
33831: LD_VAR 0 1
33835: PPUSH
33836: CALL_OW 255
33840: PPUSH
33841: LD_VAR 0 1
33845: PPUSH
33846: CALL_OW 250
33850: PPUSH
33851: LD_VAR 0 1
33855: PPUSH
33856: CALL_OW 251
33860: PPUSH
33861: LD_VAR 0 2
33865: PPUSH
33866: CALL 8490 0 4
33870: PUSH
33871: LD_INT 4
33873: ARRAY
33874: ST_TO_ADDR
// end ;
33875: LD_VAR 0 3
33879: RET
// export function PlayerSeeMe ( unit ) ; begin
33880: LD_INT 0
33882: PPUSH
// result := See ( your_side , unit ) ;
33883: LD_ADDR_VAR 0 2
33887: PUSH
33888: LD_OWVAR 2
33892: PPUSH
33893: LD_VAR 0 1
33897: PPUSH
33898: CALL_OW 292
33902: ST_TO_ADDR
// end ;
33903: LD_VAR 0 2
33907: RET
// export function ReverseDir ( unit ) ; begin
33908: LD_INT 0
33910: PPUSH
// if not unit then
33911: LD_VAR 0 1
33915: NOT
33916: IFFALSE 33920
// exit ;
33918: GO 33966
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
33920: LD_ADDR_VAR 0 2
33924: PUSH
33925: LD_INT 3
33927: PUSH
33928: LD_INT 4
33930: PUSH
33931: LD_INT 5
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: LD_INT 2
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: PUSH
33951: LD_VAR 0 1
33955: PPUSH
33956: CALL_OW 254
33960: PUSH
33961: LD_INT 1
33963: PLUS
33964: ARRAY
33965: ST_TO_ADDR
// end ;
33966: LD_VAR 0 2
33970: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
33971: LD_INT 0
33973: PPUSH
33974: PPUSH
33975: PPUSH
33976: PPUSH
33977: PPUSH
// if not hexes then
33978: LD_VAR 0 2
33982: NOT
33983: IFFALSE 33987
// exit ;
33985: GO 34135
// dist := 9999 ;
33987: LD_ADDR_VAR 0 5
33991: PUSH
33992: LD_INT 9999
33994: ST_TO_ADDR
// for i = 1 to hexes do
33995: LD_ADDR_VAR 0 4
33999: PUSH
34000: DOUBLE
34001: LD_INT 1
34003: DEC
34004: ST_TO_ADDR
34005: LD_VAR 0 2
34009: PUSH
34010: FOR_TO
34011: IFFALSE 34123
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
34013: LD_VAR 0 1
34017: PPUSH
34018: LD_VAR 0 2
34022: PUSH
34023: LD_VAR 0 4
34027: ARRAY
34028: PUSH
34029: LD_INT 1
34031: ARRAY
34032: PPUSH
34033: LD_VAR 0 2
34037: PUSH
34038: LD_VAR 0 4
34042: ARRAY
34043: PUSH
34044: LD_INT 2
34046: ARRAY
34047: PPUSH
34048: CALL_OW 297
34052: PUSH
34053: LD_VAR 0 5
34057: LESS
34058: IFFALSE 34121
// begin hex := hexes [ i ] ;
34060: LD_ADDR_VAR 0 7
34064: PUSH
34065: LD_VAR 0 2
34069: PUSH
34070: LD_VAR 0 4
34074: ARRAY
34075: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34076: LD_ADDR_VAR 0 5
34080: PUSH
34081: LD_VAR 0 1
34085: PPUSH
34086: LD_VAR 0 2
34090: PUSH
34091: LD_VAR 0 4
34095: ARRAY
34096: PUSH
34097: LD_INT 1
34099: ARRAY
34100: PPUSH
34101: LD_VAR 0 2
34105: PUSH
34106: LD_VAR 0 4
34110: ARRAY
34111: PUSH
34112: LD_INT 2
34114: ARRAY
34115: PPUSH
34116: CALL_OW 297
34120: ST_TO_ADDR
// end ; end ;
34121: GO 34010
34123: POP
34124: POP
// result := hex ;
34125: LD_ADDR_VAR 0 3
34129: PUSH
34130: LD_VAR 0 7
34134: ST_TO_ADDR
// end ;
34135: LD_VAR 0 3
34139: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34140: LD_INT 0
34142: PPUSH
34143: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34144: LD_VAR 0 1
34148: NOT
34149: PUSH
34150: LD_VAR 0 1
34154: PUSH
34155: LD_INT 21
34157: PUSH
34158: LD_INT 2
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 23
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PPUSH
34179: CALL_OW 69
34183: IN
34184: NOT
34185: OR
34186: IFFALSE 34190
// exit ;
34188: GO 34237
// for i = 1 to 3 do
34190: LD_ADDR_VAR 0 3
34194: PUSH
34195: DOUBLE
34196: LD_INT 1
34198: DEC
34199: ST_TO_ADDR
34200: LD_INT 3
34202: PUSH
34203: FOR_TO
34204: IFFALSE 34235
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34206: LD_VAR 0 1
34210: PPUSH
34211: CALL_OW 250
34215: PPUSH
34216: LD_VAR 0 1
34220: PPUSH
34221: CALL_OW 251
34225: PPUSH
34226: LD_INT 1
34228: PPUSH
34229: CALL_OW 453
34233: GO 34203
34235: POP
34236: POP
// end ;
34237: LD_VAR 0 2
34241: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34242: LD_INT 0
34244: PPUSH
34245: PPUSH
34246: PPUSH
34247: PPUSH
34248: PPUSH
34249: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34250: LD_VAR 0 1
34254: NOT
34255: PUSH
34256: LD_VAR 0 2
34260: NOT
34261: OR
34262: PUSH
34263: LD_VAR 0 1
34267: PPUSH
34268: CALL_OW 314
34272: OR
34273: IFFALSE 34277
// exit ;
34275: GO 34718
// x := GetX ( enemy_unit ) ;
34277: LD_ADDR_VAR 0 7
34281: PUSH
34282: LD_VAR 0 2
34286: PPUSH
34287: CALL_OW 250
34291: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34292: LD_ADDR_VAR 0 8
34296: PUSH
34297: LD_VAR 0 2
34301: PPUSH
34302: CALL_OW 251
34306: ST_TO_ADDR
// if not x or not y then
34307: LD_VAR 0 7
34311: NOT
34312: PUSH
34313: LD_VAR 0 8
34317: NOT
34318: OR
34319: IFFALSE 34323
// exit ;
34321: GO 34718
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34323: LD_ADDR_VAR 0 6
34327: PUSH
34328: LD_VAR 0 7
34332: PPUSH
34333: LD_INT 0
34335: PPUSH
34336: LD_INT 4
34338: PPUSH
34339: CALL_OW 272
34343: PUSH
34344: LD_VAR 0 8
34348: PPUSH
34349: LD_INT 0
34351: PPUSH
34352: LD_INT 4
34354: PPUSH
34355: CALL_OW 273
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_VAR 0 7
34368: PPUSH
34369: LD_INT 1
34371: PPUSH
34372: LD_INT 4
34374: PPUSH
34375: CALL_OW 272
34379: PUSH
34380: LD_VAR 0 8
34384: PPUSH
34385: LD_INT 1
34387: PPUSH
34388: LD_INT 4
34390: PPUSH
34391: CALL_OW 273
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_VAR 0 7
34404: PPUSH
34405: LD_INT 2
34407: PPUSH
34408: LD_INT 4
34410: PPUSH
34411: CALL_OW 272
34415: PUSH
34416: LD_VAR 0 8
34420: PPUSH
34421: LD_INT 2
34423: PPUSH
34424: LD_INT 4
34426: PPUSH
34427: CALL_OW 273
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_VAR 0 7
34440: PPUSH
34441: LD_INT 3
34443: PPUSH
34444: LD_INT 4
34446: PPUSH
34447: CALL_OW 272
34451: PUSH
34452: LD_VAR 0 8
34456: PPUSH
34457: LD_INT 3
34459: PPUSH
34460: LD_INT 4
34462: PPUSH
34463: CALL_OW 273
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_VAR 0 7
34476: PPUSH
34477: LD_INT 4
34479: PPUSH
34480: LD_INT 4
34482: PPUSH
34483: CALL_OW 272
34487: PUSH
34488: LD_VAR 0 8
34492: PPUSH
34493: LD_INT 4
34495: PPUSH
34496: LD_INT 4
34498: PPUSH
34499: CALL_OW 273
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_VAR 0 7
34512: PPUSH
34513: LD_INT 5
34515: PPUSH
34516: LD_INT 4
34518: PPUSH
34519: CALL_OW 272
34523: PUSH
34524: LD_VAR 0 8
34528: PPUSH
34529: LD_INT 5
34531: PPUSH
34532: LD_INT 4
34534: PPUSH
34535: CALL_OW 273
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: ST_TO_ADDR
// for i = tmp downto 1 do
34552: LD_ADDR_VAR 0 4
34556: PUSH
34557: DOUBLE
34558: LD_VAR 0 6
34562: INC
34563: ST_TO_ADDR
34564: LD_INT 1
34566: PUSH
34567: FOR_DOWNTO
34568: IFFALSE 34669
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34570: LD_VAR 0 6
34574: PUSH
34575: LD_VAR 0 4
34579: ARRAY
34580: PUSH
34581: LD_INT 1
34583: ARRAY
34584: PPUSH
34585: LD_VAR 0 6
34589: PUSH
34590: LD_VAR 0 4
34594: ARRAY
34595: PUSH
34596: LD_INT 2
34598: ARRAY
34599: PPUSH
34600: CALL_OW 488
34604: NOT
34605: PUSH
34606: LD_VAR 0 6
34610: PUSH
34611: LD_VAR 0 4
34615: ARRAY
34616: PUSH
34617: LD_INT 1
34619: ARRAY
34620: PPUSH
34621: LD_VAR 0 6
34625: PUSH
34626: LD_VAR 0 4
34630: ARRAY
34631: PUSH
34632: LD_INT 2
34634: ARRAY
34635: PPUSH
34636: CALL_OW 428
34640: PUSH
34641: LD_INT 0
34643: NONEQUAL
34644: OR
34645: IFFALSE 34667
// tmp := Delete ( tmp , i ) ;
34647: LD_ADDR_VAR 0 6
34651: PUSH
34652: LD_VAR 0 6
34656: PPUSH
34657: LD_VAR 0 4
34661: PPUSH
34662: CALL_OW 3
34666: ST_TO_ADDR
34667: GO 34567
34669: POP
34670: POP
// j := GetClosestHex ( unit , tmp ) ;
34671: LD_ADDR_VAR 0 5
34675: PUSH
34676: LD_VAR 0 1
34680: PPUSH
34681: LD_VAR 0 6
34685: PPUSH
34686: CALL 33971 0 2
34690: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34691: LD_VAR 0 1
34695: PPUSH
34696: LD_VAR 0 5
34700: PUSH
34701: LD_INT 1
34703: ARRAY
34704: PPUSH
34705: LD_VAR 0 5
34709: PUSH
34710: LD_INT 2
34712: ARRAY
34713: PPUSH
34714: CALL_OW 111
// end ;
34718: LD_VAR 0 3
34722: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34723: LD_INT 0
34725: PPUSH
34726: PPUSH
34727: PPUSH
// uc_side = 0 ;
34728: LD_ADDR_OWVAR 20
34732: PUSH
34733: LD_INT 0
34735: ST_TO_ADDR
// uc_nation = 0 ;
34736: LD_ADDR_OWVAR 21
34740: PUSH
34741: LD_INT 0
34743: ST_TO_ADDR
// InitHc ;
34744: CALL_OW 19
// InitVc ;
34748: CALL_OW 20
// if mastodonts then
34752: LD_VAR 0 6
34756: IFFALSE 34823
// for i = 1 to mastodonts do
34758: LD_ADDR_VAR 0 11
34762: PUSH
34763: DOUBLE
34764: LD_INT 1
34766: DEC
34767: ST_TO_ADDR
34768: LD_VAR 0 6
34772: PUSH
34773: FOR_TO
34774: IFFALSE 34821
// begin vc_chassis := 31 ;
34776: LD_ADDR_OWVAR 37
34780: PUSH
34781: LD_INT 31
34783: ST_TO_ADDR
// vc_control := control_rider ;
34784: LD_ADDR_OWVAR 38
34788: PUSH
34789: LD_INT 4
34791: ST_TO_ADDR
// animal := CreateVehicle ;
34792: LD_ADDR_VAR 0 12
34796: PUSH
34797: CALL_OW 45
34801: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
34802: LD_VAR 0 12
34806: PPUSH
34807: LD_VAR 0 8
34811: PPUSH
34812: LD_INT 0
34814: PPUSH
34815: CALL_OW 49
// end ;
34819: GO 34773
34821: POP
34822: POP
// if horses then
34823: LD_VAR 0 5
34827: IFFALSE 34894
// for i = 1 to horses do
34829: LD_ADDR_VAR 0 11
34833: PUSH
34834: DOUBLE
34835: LD_INT 1
34837: DEC
34838: ST_TO_ADDR
34839: LD_VAR 0 5
34843: PUSH
34844: FOR_TO
34845: IFFALSE 34892
// begin hc_class := 21 ;
34847: LD_ADDR_OWVAR 28
34851: PUSH
34852: LD_INT 21
34854: ST_TO_ADDR
// hc_gallery :=  ;
34855: LD_ADDR_OWVAR 33
34859: PUSH
34860: LD_STRING 
34862: ST_TO_ADDR
// animal := CreateHuman ;
34863: LD_ADDR_VAR 0 12
34867: PUSH
34868: CALL_OW 44
34872: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
34873: LD_VAR 0 12
34877: PPUSH
34878: LD_VAR 0 8
34882: PPUSH
34883: LD_INT 0
34885: PPUSH
34886: CALL_OW 49
// end ;
34890: GO 34844
34892: POP
34893: POP
// if birds then
34894: LD_VAR 0 1
34898: IFFALSE 34965
// for i = 1 to birds do
34900: LD_ADDR_VAR 0 11
34904: PUSH
34905: DOUBLE
34906: LD_INT 1
34908: DEC
34909: ST_TO_ADDR
34910: LD_VAR 0 1
34914: PUSH
34915: FOR_TO
34916: IFFALSE 34963
// begin hc_class = 18 ;
34918: LD_ADDR_OWVAR 28
34922: PUSH
34923: LD_INT 18
34925: ST_TO_ADDR
// hc_gallery =  ;
34926: LD_ADDR_OWVAR 33
34930: PUSH
34931: LD_STRING 
34933: ST_TO_ADDR
// animal := CreateHuman ;
34934: LD_ADDR_VAR 0 12
34938: PUSH
34939: CALL_OW 44
34943: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
34944: LD_VAR 0 12
34948: PPUSH
34949: LD_VAR 0 8
34953: PPUSH
34954: LD_INT 0
34956: PPUSH
34957: CALL_OW 49
// end ;
34961: GO 34915
34963: POP
34964: POP
// if tigers then
34965: LD_VAR 0 2
34969: IFFALSE 35053
// for i = 1 to tigers do
34971: LD_ADDR_VAR 0 11
34975: PUSH
34976: DOUBLE
34977: LD_INT 1
34979: DEC
34980: ST_TO_ADDR
34981: LD_VAR 0 2
34985: PUSH
34986: FOR_TO
34987: IFFALSE 35051
// begin hc_class = class_tiger ;
34989: LD_ADDR_OWVAR 28
34993: PUSH
34994: LD_INT 14
34996: ST_TO_ADDR
// hc_gallery =  ;
34997: LD_ADDR_OWVAR 33
35001: PUSH
35002: LD_STRING 
35004: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35005: LD_ADDR_OWVAR 35
35009: PUSH
35010: LD_INT 7
35012: NEG
35013: PPUSH
35014: LD_INT 7
35016: PPUSH
35017: CALL_OW 12
35021: ST_TO_ADDR
// animal := CreateHuman ;
35022: LD_ADDR_VAR 0 12
35026: PUSH
35027: CALL_OW 44
35031: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
35032: LD_VAR 0 12
35036: PPUSH
35037: LD_VAR 0 8
35041: PPUSH
35042: LD_INT 0
35044: PPUSH
35045: CALL_OW 49
// end ;
35049: GO 34986
35051: POP
35052: POP
// if apemans then
35053: LD_VAR 0 3
35057: IFFALSE 35180
// for i = 1 to apemans do
35059: LD_ADDR_VAR 0 11
35063: PUSH
35064: DOUBLE
35065: LD_INT 1
35067: DEC
35068: ST_TO_ADDR
35069: LD_VAR 0 3
35073: PUSH
35074: FOR_TO
35075: IFFALSE 35178
// begin hc_class = class_apeman ;
35077: LD_ADDR_OWVAR 28
35081: PUSH
35082: LD_INT 12
35084: ST_TO_ADDR
// hc_gallery =  ;
35085: LD_ADDR_OWVAR 33
35089: PUSH
35090: LD_STRING 
35092: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
35093: LD_ADDR_OWVAR 35
35097: PUSH
35098: LD_INT 5
35100: NEG
35101: PPUSH
35102: LD_INT 5
35104: PPUSH
35105: CALL_OW 12
35109: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35110: LD_ADDR_OWVAR 31
35114: PUSH
35115: LD_INT 1
35117: PPUSH
35118: LD_INT 3
35120: PPUSH
35121: CALL_OW 12
35125: PUSH
35126: LD_INT 1
35128: PPUSH
35129: LD_INT 3
35131: PPUSH
35132: CALL_OW 12
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: LD_INT 0
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: ST_TO_ADDR
// animal := CreateHuman ;
35149: LD_ADDR_VAR 0 12
35153: PUSH
35154: CALL_OW 44
35158: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
35159: LD_VAR 0 12
35163: PPUSH
35164: LD_VAR 0 8
35168: PPUSH
35169: LD_INT 0
35171: PPUSH
35172: CALL_OW 49
// end ;
35176: GO 35074
35178: POP
35179: POP
// if enchidnas then
35180: LD_VAR 0 4
35184: IFFALSE 35251
// for i = 1 to enchidnas do
35186: LD_ADDR_VAR 0 11
35190: PUSH
35191: DOUBLE
35192: LD_INT 1
35194: DEC
35195: ST_TO_ADDR
35196: LD_VAR 0 4
35200: PUSH
35201: FOR_TO
35202: IFFALSE 35249
// begin hc_class = 13 ;
35204: LD_ADDR_OWVAR 28
35208: PUSH
35209: LD_INT 13
35211: ST_TO_ADDR
// hc_gallery =  ;
35212: LD_ADDR_OWVAR 33
35216: PUSH
35217: LD_STRING 
35219: ST_TO_ADDR
// animal := CreateHuman ;
35220: LD_ADDR_VAR 0 12
35224: PUSH
35225: CALL_OW 44
35229: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
35230: LD_VAR 0 12
35234: PPUSH
35235: LD_VAR 0 8
35239: PPUSH
35240: LD_INT 0
35242: PPUSH
35243: CALL_OW 49
// end ;
35247: GO 35201
35249: POP
35250: POP
// if not wat_area then
35251: LD_VAR 0 9
35255: NOT
35256: IFFALSE 35260
// exit ;
35258: GO 35331
// if fishes then
35260: LD_VAR 0 7
35264: IFFALSE 35331
// for i = 1 to fishes do
35266: LD_ADDR_VAR 0 11
35270: PUSH
35271: DOUBLE
35272: LD_INT 1
35274: DEC
35275: ST_TO_ADDR
35276: LD_VAR 0 7
35280: PUSH
35281: FOR_TO
35282: IFFALSE 35329
// begin hc_class = 20 ;
35284: LD_ADDR_OWVAR 28
35288: PUSH
35289: LD_INT 20
35291: ST_TO_ADDR
// hc_gallery =  ;
35292: LD_ADDR_OWVAR 33
35296: PUSH
35297: LD_STRING 
35299: ST_TO_ADDR
// animal := CreateHuman ;
35300: LD_ADDR_VAR 0 12
35304: PUSH
35305: CALL_OW 44
35309: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
35310: LD_VAR 0 12
35314: PPUSH
35315: LD_VAR 0 9
35319: PPUSH
35320: LD_INT 0
35322: PPUSH
35323: CALL_OW 49
// end ;
35327: GO 35281
35329: POP
35330: POP
// end ;
35331: LD_VAR 0 10
35335: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
35336: LD_INT 0
35338: PPUSH
35339: PPUSH
35340: PPUSH
35341: PPUSH
35342: PPUSH
35343: PPUSH
35344: PPUSH
35345: PPUSH
35346: PPUSH
35347: PPUSH
35348: PPUSH
35349: PPUSH
35350: PPUSH
35351: PPUSH
35352: PPUSH
35353: PPUSH
35354: PPUSH
35355: PPUSH
35356: PPUSH
35357: PPUSH
35358: PPUSH
35359: PPUSH
35360: PPUSH
35361: PPUSH
35362: PPUSH
35363: PPUSH
35364: PPUSH
35365: PPUSH
// if not list then
35366: LD_VAR 0 1
35370: NOT
35371: IFFALSE 35375
// exit ;
35373: GO 38618
// base := list [ 1 ] ;
35375: LD_ADDR_VAR 0 3
35379: PUSH
35380: LD_VAR 0 1
35384: PUSH
35385: LD_INT 1
35387: ARRAY
35388: ST_TO_ADDR
// group := list [ 2 ] ;
35389: LD_ADDR_VAR 0 4
35393: PUSH
35394: LD_VAR 0 1
35398: PUSH
35399: LD_INT 2
35401: ARRAY
35402: ST_TO_ADDR
// path := list [ 3 ] ;
35403: LD_ADDR_VAR 0 5
35407: PUSH
35408: LD_VAR 0 1
35412: PUSH
35413: LD_INT 3
35415: ARRAY
35416: ST_TO_ADDR
// flags := list [ 4 ] ;
35417: LD_ADDR_VAR 0 6
35421: PUSH
35422: LD_VAR 0 1
35426: PUSH
35427: LD_INT 4
35429: ARRAY
35430: ST_TO_ADDR
// mined := [ ] ;
35431: LD_ADDR_VAR 0 27
35435: PUSH
35436: EMPTY
35437: ST_TO_ADDR
// bombed := [ ] ;
35438: LD_ADDR_VAR 0 28
35442: PUSH
35443: EMPTY
35444: ST_TO_ADDR
// if not group or not path then
35445: LD_VAR 0 4
35449: NOT
35450: PUSH
35451: LD_VAR 0 5
35455: NOT
35456: OR
35457: IFFALSE 35461
// exit ;
35459: GO 38618
// if flags then
35461: LD_VAR 0 6
35465: IFFALSE 35609
// begin f_ignore_area := flags [ 1 ] ;
35467: LD_ADDR_VAR 0 17
35471: PUSH
35472: LD_VAR 0 6
35476: PUSH
35477: LD_INT 1
35479: ARRAY
35480: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
35481: LD_ADDR_VAR 0 18
35485: PUSH
35486: LD_VAR 0 6
35490: PUSH
35491: LD_INT 2
35493: ARRAY
35494: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
35495: LD_ADDR_VAR 0 19
35499: PUSH
35500: LD_VAR 0 6
35504: PUSH
35505: LD_INT 3
35507: ARRAY
35508: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
35509: LD_ADDR_VAR 0 20
35513: PUSH
35514: LD_VAR 0 6
35518: PUSH
35519: LD_INT 4
35521: ARRAY
35522: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
35523: LD_ADDR_VAR 0 21
35527: PUSH
35528: LD_VAR 0 6
35532: PUSH
35533: LD_INT 5
35535: ARRAY
35536: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
35537: LD_ADDR_VAR 0 22
35541: PUSH
35542: LD_VAR 0 6
35546: PUSH
35547: LD_INT 6
35549: ARRAY
35550: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
35551: LD_ADDR_VAR 0 23
35555: PUSH
35556: LD_VAR 0 6
35560: PUSH
35561: LD_INT 7
35563: ARRAY
35564: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
35565: LD_ADDR_VAR 0 24
35569: PUSH
35570: LD_VAR 0 6
35574: PUSH
35575: LD_INT 8
35577: ARRAY
35578: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
35579: LD_ADDR_VAR 0 25
35583: PUSH
35584: LD_VAR 0 6
35588: PUSH
35589: LD_INT 9
35591: ARRAY
35592: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
35593: LD_ADDR_VAR 0 26
35597: PUSH
35598: LD_VAR 0 6
35602: PUSH
35603: LD_INT 10
35605: ARRAY
35606: ST_TO_ADDR
// end else
35607: GO 35689
// begin f_ignore_area := false ;
35609: LD_ADDR_VAR 0 17
35613: PUSH
35614: LD_INT 0
35616: ST_TO_ADDR
// f_capture := false ;
35617: LD_ADDR_VAR 0 18
35621: PUSH
35622: LD_INT 0
35624: ST_TO_ADDR
// f_ignore_civ := false ;
35625: LD_ADDR_VAR 0 19
35629: PUSH
35630: LD_INT 0
35632: ST_TO_ADDR
// f_murder := false ;
35633: LD_ADDR_VAR 0 20
35637: PUSH
35638: LD_INT 0
35640: ST_TO_ADDR
// f_mines := false ;
35641: LD_ADDR_VAR 0 21
35645: PUSH
35646: LD_INT 0
35648: ST_TO_ADDR
// f_repair := false ;
35649: LD_ADDR_VAR 0 22
35653: PUSH
35654: LD_INT 0
35656: ST_TO_ADDR
// f_heal := false ;
35657: LD_ADDR_VAR 0 23
35661: PUSH
35662: LD_INT 0
35664: ST_TO_ADDR
// f_spacetime := false ;
35665: LD_ADDR_VAR 0 24
35669: PUSH
35670: LD_INT 0
35672: ST_TO_ADDR
// f_attack_depot := false ;
35673: LD_ADDR_VAR 0 25
35677: PUSH
35678: LD_INT 0
35680: ST_TO_ADDR
// f_crawl := false ;
35681: LD_ADDR_VAR 0 26
35685: PUSH
35686: LD_INT 0
35688: ST_TO_ADDR
// end ; units_path := [ ] ;
35689: LD_ADDR_VAR 0 16
35693: PUSH
35694: EMPTY
35695: ST_TO_ADDR
// for i = 1 to group do
35696: LD_ADDR_VAR 0 7
35700: PUSH
35701: DOUBLE
35702: LD_INT 1
35704: DEC
35705: ST_TO_ADDR
35706: LD_VAR 0 4
35710: PUSH
35711: FOR_TO
35712: IFFALSE 35741
// begin units_path := Replace ( units_path , i , path ) ;
35714: LD_ADDR_VAR 0 16
35718: PUSH
35719: LD_VAR 0 16
35723: PPUSH
35724: LD_VAR 0 7
35728: PPUSH
35729: LD_VAR 0 5
35733: PPUSH
35734: CALL_OW 1
35738: ST_TO_ADDR
// end ;
35739: GO 35711
35741: POP
35742: POP
// repeat for i = group downto 1 do
35743: LD_ADDR_VAR 0 7
35747: PUSH
35748: DOUBLE
35749: LD_VAR 0 4
35753: INC
35754: ST_TO_ADDR
35755: LD_INT 1
35757: PUSH
35758: FOR_DOWNTO
35759: IFFALSE 38600
// begin wait ( 0 0$1 ) ;
35761: LD_INT 35
35763: PPUSH
35764: CALL_OW 67
// tmp := [ ] ;
35768: LD_ADDR_VAR 0 14
35772: PUSH
35773: EMPTY
35774: ST_TO_ADDR
// attacking := false ;
35775: LD_ADDR_VAR 0 29
35779: PUSH
35780: LD_INT 0
35782: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
35783: LD_VAR 0 4
35787: PUSH
35788: LD_VAR 0 7
35792: ARRAY
35793: PPUSH
35794: CALL_OW 301
35798: PUSH
35799: LD_VAR 0 4
35803: PUSH
35804: LD_VAR 0 7
35808: ARRAY
35809: NOT
35810: OR
35811: IFFALSE 35855
// begin group := Delete ( group , i ) ;
35813: LD_ADDR_VAR 0 4
35817: PUSH
35818: LD_VAR 0 4
35822: PPUSH
35823: LD_VAR 0 7
35827: PPUSH
35828: CALL_OW 3
35832: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
35833: LD_ADDR_VAR 0 16
35837: PUSH
35838: LD_VAR 0 16
35842: PPUSH
35843: LD_VAR 0 7
35847: PPUSH
35848: CALL_OW 3
35852: ST_TO_ADDR
// continue ;
35853: GO 35758
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
35855: LD_VAR 0 4
35859: PUSH
35860: LD_VAR 0 7
35864: ARRAY
35865: PPUSH
35866: LD_INT 10
35868: PPUSH
35869: CALL 33823 0 2
35873: NOT
35874: PUSH
35875: LD_VAR 0 16
35879: PUSH
35880: LD_VAR 0 7
35884: ARRAY
35885: PUSH
35886: EMPTY
35887: EQUAL
35888: NOT
35889: AND
35890: IFFALSE 36156
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
35892: LD_VAR 0 4
35896: PUSH
35897: LD_VAR 0 7
35901: ARRAY
35902: PPUSH
35903: CALL_OW 262
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: LD_INT 2
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: IN
35918: IFFALSE 35959
// if GetFuel ( group [ i ] ) < 10 then
35920: LD_VAR 0 4
35924: PUSH
35925: LD_VAR 0 7
35929: ARRAY
35930: PPUSH
35931: CALL_OW 261
35935: PUSH
35936: LD_INT 10
35938: LESS
35939: IFFALSE 35959
// SetFuel ( group [ i ] , 12 ) ;
35941: LD_VAR 0 4
35945: PUSH
35946: LD_VAR 0 7
35950: ARRAY
35951: PPUSH
35952: LD_INT 12
35954: PPUSH
35955: CALL_OW 240
// if units_path [ i ] then
35959: LD_VAR 0 16
35963: PUSH
35964: LD_VAR 0 7
35968: ARRAY
35969: IFFALSE 36154
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
35971: LD_VAR 0 4
35975: PUSH
35976: LD_VAR 0 7
35980: ARRAY
35981: PPUSH
35982: LD_VAR 0 16
35986: PUSH
35987: LD_VAR 0 7
35991: ARRAY
35992: PUSH
35993: LD_INT 1
35995: ARRAY
35996: PUSH
35997: LD_INT 1
35999: ARRAY
36000: PPUSH
36001: LD_VAR 0 16
36005: PUSH
36006: LD_VAR 0 7
36010: ARRAY
36011: PUSH
36012: LD_INT 1
36014: ARRAY
36015: PUSH
36016: LD_INT 2
36018: ARRAY
36019: PPUSH
36020: CALL_OW 297
36024: PUSH
36025: LD_INT 6
36027: GREATER
36028: IFFALSE 36103
// begin if not HasTask ( group [ i ] ) then
36030: LD_VAR 0 4
36034: PUSH
36035: LD_VAR 0 7
36039: ARRAY
36040: PPUSH
36041: CALL_OW 314
36045: NOT
36046: IFFALSE 36101
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
36048: LD_VAR 0 4
36052: PUSH
36053: LD_VAR 0 7
36057: ARRAY
36058: PPUSH
36059: LD_VAR 0 16
36063: PUSH
36064: LD_VAR 0 7
36068: ARRAY
36069: PUSH
36070: LD_INT 1
36072: ARRAY
36073: PUSH
36074: LD_INT 1
36076: ARRAY
36077: PPUSH
36078: LD_VAR 0 16
36082: PUSH
36083: LD_VAR 0 7
36087: ARRAY
36088: PUSH
36089: LD_INT 1
36091: ARRAY
36092: PUSH
36093: LD_INT 2
36095: ARRAY
36096: PPUSH
36097: CALL_OW 114
// end else
36101: GO 36154
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
36103: LD_ADDR_VAR 0 15
36107: PUSH
36108: LD_VAR 0 16
36112: PUSH
36113: LD_VAR 0 7
36117: ARRAY
36118: PPUSH
36119: LD_INT 1
36121: PPUSH
36122: CALL_OW 3
36126: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
36127: LD_ADDR_VAR 0 16
36131: PUSH
36132: LD_VAR 0 16
36136: PPUSH
36137: LD_VAR 0 7
36141: PPUSH
36142: LD_VAR 0 15
36146: PPUSH
36147: CALL_OW 1
36151: ST_TO_ADDR
// continue ;
36152: GO 35758
// end ; end ; end else
36154: GO 38598
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
36156: LD_ADDR_VAR 0 14
36160: PUSH
36161: LD_INT 81
36163: PUSH
36164: LD_VAR 0 4
36168: PUSH
36169: LD_VAR 0 7
36173: ARRAY
36174: PPUSH
36175: CALL_OW 255
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PPUSH
36184: CALL_OW 69
36188: ST_TO_ADDR
// if not tmp then
36189: LD_VAR 0 14
36193: NOT
36194: IFFALSE 36198
// continue ;
36196: GO 35758
// if f_ignore_area then
36198: LD_VAR 0 17
36202: IFFALSE 36290
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
36204: LD_ADDR_VAR 0 15
36208: PUSH
36209: LD_VAR 0 14
36213: PPUSH
36214: LD_INT 3
36216: PUSH
36217: LD_INT 92
36219: PUSH
36220: LD_VAR 0 17
36224: PUSH
36225: LD_INT 1
36227: ARRAY
36228: PUSH
36229: LD_VAR 0 17
36233: PUSH
36234: LD_INT 2
36236: ARRAY
36237: PUSH
36238: LD_VAR 0 17
36242: PUSH
36243: LD_INT 3
36245: ARRAY
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PPUSH
36257: CALL_OW 72
36261: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
36262: LD_VAR 0 14
36266: PUSH
36267: LD_VAR 0 15
36271: DIFF
36272: IFFALSE 36290
// tmp := tmp diff tmp2 ;
36274: LD_ADDR_VAR 0 14
36278: PUSH
36279: LD_VAR 0 14
36283: PUSH
36284: LD_VAR 0 15
36288: DIFF
36289: ST_TO_ADDR
// end ; if not f_murder then
36290: LD_VAR 0 20
36294: NOT
36295: IFFALSE 36353
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
36297: LD_ADDR_VAR 0 15
36301: PUSH
36302: LD_VAR 0 14
36306: PPUSH
36307: LD_INT 3
36309: PUSH
36310: LD_INT 50
36312: PUSH
36313: EMPTY
36314: LIST
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PPUSH
36320: CALL_OW 72
36324: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
36325: LD_VAR 0 14
36329: PUSH
36330: LD_VAR 0 15
36334: DIFF
36335: IFFALSE 36353
// tmp := tmp diff tmp2 ;
36337: LD_ADDR_VAR 0 14
36341: PUSH
36342: LD_VAR 0 14
36346: PUSH
36347: LD_VAR 0 15
36351: DIFF
36352: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
36353: LD_ADDR_VAR 0 14
36357: PUSH
36358: LD_VAR 0 4
36362: PUSH
36363: LD_VAR 0 7
36367: ARRAY
36368: PPUSH
36369: LD_VAR 0 14
36373: PPUSH
36374: LD_INT 1
36376: PPUSH
36377: LD_INT 1
36379: PPUSH
36380: CALL 8029 0 4
36384: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
36385: LD_VAR 0 4
36389: PUSH
36390: LD_VAR 0 7
36394: ARRAY
36395: PPUSH
36396: CALL_OW 257
36400: PUSH
36401: LD_INT 1
36403: EQUAL
36404: IFFALSE 36852
// begin if WantPlant ( group [ i ] ) then
36406: LD_VAR 0 4
36410: PUSH
36411: LD_VAR 0 7
36415: ARRAY
36416: PPUSH
36417: CALL 7497 0 1
36421: IFFALSE 36425
// continue ;
36423: GO 35758
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
36425: LD_VAR 0 18
36429: PUSH
36430: LD_VAR 0 4
36434: PUSH
36435: LD_VAR 0 7
36439: ARRAY
36440: PPUSH
36441: CALL_OW 310
36445: NOT
36446: AND
36447: PUSH
36448: LD_VAR 0 14
36452: PUSH
36453: LD_INT 1
36455: ARRAY
36456: PUSH
36457: LD_VAR 0 14
36461: PPUSH
36462: LD_INT 21
36464: PUSH
36465: LD_INT 2
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 58
36474: PUSH
36475: EMPTY
36476: LIST
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PPUSH
36482: CALL_OW 72
36486: IN
36487: AND
36488: IFFALSE 36524
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
36490: LD_VAR 0 4
36494: PUSH
36495: LD_VAR 0 7
36499: ARRAY
36500: PPUSH
36501: LD_VAR 0 14
36505: PUSH
36506: LD_INT 1
36508: ARRAY
36509: PPUSH
36510: CALL_OW 120
// attacking := true ;
36514: LD_ADDR_VAR 0 29
36518: PUSH
36519: LD_INT 1
36521: ST_TO_ADDR
// continue ;
36522: GO 35758
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
36524: LD_VAR 0 26
36528: PUSH
36529: LD_VAR 0 4
36533: PUSH
36534: LD_VAR 0 7
36538: ARRAY
36539: PPUSH
36540: CALL_OW 257
36544: PUSH
36545: LD_INT 1
36547: EQUAL
36548: AND
36549: PUSH
36550: LD_VAR 0 4
36554: PUSH
36555: LD_VAR 0 7
36559: ARRAY
36560: PPUSH
36561: CALL_OW 256
36565: PUSH
36566: LD_INT 800
36568: LESS
36569: AND
36570: PUSH
36571: LD_VAR 0 4
36575: PUSH
36576: LD_VAR 0 7
36580: ARRAY
36581: PPUSH
36582: CALL_OW 318
36586: NOT
36587: AND
36588: IFFALSE 36605
// ComCrawl ( group [ i ] ) ;
36590: LD_VAR 0 4
36594: PUSH
36595: LD_VAR 0 7
36599: ARRAY
36600: PPUSH
36601: CALL_OW 137
// if f_mines then
36605: LD_VAR 0 21
36609: IFFALSE 36852
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
36611: LD_VAR 0 14
36615: PUSH
36616: LD_INT 1
36618: ARRAY
36619: PPUSH
36620: CALL_OW 247
36624: PUSH
36625: LD_INT 3
36627: EQUAL
36628: PUSH
36629: LD_VAR 0 14
36633: PUSH
36634: LD_INT 1
36636: ARRAY
36637: PUSH
36638: LD_VAR 0 27
36642: IN
36643: NOT
36644: AND
36645: IFFALSE 36852
// begin x := GetX ( tmp [ 1 ] ) ;
36647: LD_ADDR_VAR 0 10
36651: PUSH
36652: LD_VAR 0 14
36656: PUSH
36657: LD_INT 1
36659: ARRAY
36660: PPUSH
36661: CALL_OW 250
36665: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
36666: LD_ADDR_VAR 0 11
36670: PUSH
36671: LD_VAR 0 14
36675: PUSH
36676: LD_INT 1
36678: ARRAY
36679: PPUSH
36680: CALL_OW 251
36684: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
36685: LD_ADDR_VAR 0 12
36689: PUSH
36690: LD_VAR 0 4
36694: PUSH
36695: LD_VAR 0 7
36699: ARRAY
36700: PPUSH
36701: CALL 33908 0 1
36705: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
36706: LD_VAR 0 4
36710: PUSH
36711: LD_VAR 0 7
36715: ARRAY
36716: PPUSH
36717: LD_VAR 0 10
36721: PPUSH
36722: LD_VAR 0 11
36726: PPUSH
36727: LD_VAR 0 14
36731: PUSH
36732: LD_INT 1
36734: ARRAY
36735: PPUSH
36736: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
36740: LD_VAR 0 4
36744: PUSH
36745: LD_VAR 0 7
36749: ARRAY
36750: PPUSH
36751: LD_VAR 0 10
36755: PPUSH
36756: LD_VAR 0 12
36760: PPUSH
36761: LD_INT 7
36763: PPUSH
36764: CALL_OW 272
36768: PPUSH
36769: LD_VAR 0 11
36773: PPUSH
36774: LD_VAR 0 12
36778: PPUSH
36779: LD_INT 7
36781: PPUSH
36782: CALL_OW 273
36786: PPUSH
36787: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
36791: LD_VAR 0 4
36795: PUSH
36796: LD_VAR 0 7
36800: ARRAY
36801: PPUSH
36802: LD_INT 71
36804: PPUSH
36805: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
36809: LD_ADDR_VAR 0 27
36813: PUSH
36814: LD_VAR 0 27
36818: PPUSH
36819: LD_VAR 0 27
36823: PUSH
36824: LD_INT 1
36826: PLUS
36827: PPUSH
36828: LD_VAR 0 14
36832: PUSH
36833: LD_INT 1
36835: ARRAY
36836: PPUSH
36837: CALL_OW 1
36841: ST_TO_ADDR
// attacking := true ;
36842: LD_ADDR_VAR 0 29
36846: PUSH
36847: LD_INT 1
36849: ST_TO_ADDR
// continue ;
36850: GO 35758
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
36852: LD_VAR 0 4
36856: PUSH
36857: LD_VAR 0 7
36861: ARRAY
36862: PPUSH
36863: CALL_OW 257
36867: PUSH
36868: LD_INT 17
36870: EQUAL
36871: PUSH
36872: LD_VAR 0 4
36876: PUSH
36877: LD_VAR 0 7
36881: ARRAY
36882: PPUSH
36883: CALL_OW 110
36887: PUSH
36888: LD_INT 71
36890: EQUAL
36891: NOT
36892: AND
36893: IFFALSE 37039
// begin attacking := false ;
36895: LD_ADDR_VAR 0 29
36899: PUSH
36900: LD_INT 0
36902: ST_TO_ADDR
// k := 5 ;
36903: LD_ADDR_VAR 0 9
36907: PUSH
36908: LD_INT 5
36910: ST_TO_ADDR
// if tmp < k then
36911: LD_VAR 0 14
36915: PUSH
36916: LD_VAR 0 9
36920: LESS
36921: IFFALSE 36933
// k := tmp ;
36923: LD_ADDR_VAR 0 9
36927: PUSH
36928: LD_VAR 0 14
36932: ST_TO_ADDR
// for j = 1 to k do
36933: LD_ADDR_VAR 0 8
36937: PUSH
36938: DOUBLE
36939: LD_INT 1
36941: DEC
36942: ST_TO_ADDR
36943: LD_VAR 0 9
36947: PUSH
36948: FOR_TO
36949: IFFALSE 37037
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
36951: LD_VAR 0 14
36955: PUSH
36956: LD_VAR 0 8
36960: ARRAY
36961: PUSH
36962: LD_VAR 0 14
36966: PPUSH
36967: LD_INT 58
36969: PUSH
36970: EMPTY
36971: LIST
36972: PPUSH
36973: CALL_OW 72
36977: IN
36978: NOT
36979: IFFALSE 37035
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
36981: LD_VAR 0 4
36985: PUSH
36986: LD_VAR 0 7
36990: ARRAY
36991: PPUSH
36992: LD_VAR 0 14
36996: PUSH
36997: LD_VAR 0 8
37001: ARRAY
37002: PPUSH
37003: CALL_OW 115
// attacking := true ;
37007: LD_ADDR_VAR 0 29
37011: PUSH
37012: LD_INT 1
37014: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
37015: LD_VAR 0 4
37019: PUSH
37020: LD_VAR 0 7
37024: ARRAY
37025: PPUSH
37026: LD_INT 71
37028: PPUSH
37029: CALL_OW 109
// continue ;
37033: GO 36948
// end ; end ;
37035: GO 36948
37037: POP
37038: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
37039: LD_VAR 0 4
37043: PUSH
37044: LD_VAR 0 7
37048: ARRAY
37049: PPUSH
37050: CALL_OW 257
37054: PUSH
37055: LD_INT 8
37057: EQUAL
37058: PUSH
37059: LD_VAR 0 4
37063: PUSH
37064: LD_VAR 0 7
37068: ARRAY
37069: PPUSH
37070: CALL_OW 264
37074: PUSH
37075: LD_INT 28
37077: PUSH
37078: LD_INT 45
37080: PUSH
37081: LD_INT 7
37083: PUSH
37084: LD_INT 47
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: IN
37093: OR
37094: IFFALSE 37324
// begin attacking := false ;
37096: LD_ADDR_VAR 0 29
37100: PUSH
37101: LD_INT 0
37103: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
37104: LD_VAR 0 14
37108: PUSH
37109: LD_INT 1
37111: ARRAY
37112: PPUSH
37113: CALL_OW 266
37117: PUSH
37118: LD_INT 32
37120: PUSH
37121: LD_INT 31
37123: PUSH
37124: LD_INT 33
37126: PUSH
37127: LD_INT 4
37129: PUSH
37130: LD_INT 5
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: IN
37140: IFFALSE 37324
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
37142: LD_ADDR_VAR 0 9
37146: PUSH
37147: LD_VAR 0 14
37151: PUSH
37152: LD_INT 1
37154: ARRAY
37155: PPUSH
37156: CALL_OW 266
37160: PPUSH
37161: LD_VAR 0 14
37165: PUSH
37166: LD_INT 1
37168: ARRAY
37169: PPUSH
37170: CALL_OW 250
37174: PPUSH
37175: LD_VAR 0 14
37179: PUSH
37180: LD_INT 1
37182: ARRAY
37183: PPUSH
37184: CALL_OW 251
37188: PPUSH
37189: LD_VAR 0 14
37193: PUSH
37194: LD_INT 1
37196: ARRAY
37197: PPUSH
37198: CALL_OW 254
37202: PPUSH
37203: LD_VAR 0 14
37207: PUSH
37208: LD_INT 1
37210: ARRAY
37211: PPUSH
37212: CALL_OW 248
37216: PPUSH
37217: LD_INT 0
37219: PPUSH
37220: CALL 15284 0 6
37224: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
37225: LD_ADDR_VAR 0 8
37229: PUSH
37230: LD_VAR 0 4
37234: PUSH
37235: LD_VAR 0 7
37239: ARRAY
37240: PPUSH
37241: LD_VAR 0 9
37245: PPUSH
37246: CALL 33971 0 2
37250: ST_TO_ADDR
// if j then
37251: LD_VAR 0 8
37255: IFFALSE 37324
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37257: LD_VAR 0 8
37261: PUSH
37262: LD_INT 1
37264: ARRAY
37265: PPUSH
37266: LD_VAR 0 8
37270: PUSH
37271: LD_INT 2
37273: ARRAY
37274: PPUSH
37275: CALL_OW 488
37279: IFFALSE 37324
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
37281: LD_VAR 0 4
37285: PUSH
37286: LD_VAR 0 7
37290: ARRAY
37291: PPUSH
37292: LD_VAR 0 8
37296: PUSH
37297: LD_INT 1
37299: ARRAY
37300: PPUSH
37301: LD_VAR 0 8
37305: PUSH
37306: LD_INT 2
37308: ARRAY
37309: PPUSH
37310: CALL_OW 116
// attacking := true ;
37314: LD_ADDR_VAR 0 29
37318: PUSH
37319: LD_INT 1
37321: ST_TO_ADDR
// continue ;
37322: GO 35758
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
37324: LD_VAR 0 4
37328: PUSH
37329: LD_VAR 0 7
37333: ARRAY
37334: PPUSH
37335: CALL_OW 265
37339: PUSH
37340: LD_INT 11
37342: EQUAL
37343: IFFALSE 37621
// begin k := 10 ;
37345: LD_ADDR_VAR 0 9
37349: PUSH
37350: LD_INT 10
37352: ST_TO_ADDR
// x := 0 ;
37353: LD_ADDR_VAR 0 10
37357: PUSH
37358: LD_INT 0
37360: ST_TO_ADDR
// if tmp < k then
37361: LD_VAR 0 14
37365: PUSH
37366: LD_VAR 0 9
37370: LESS
37371: IFFALSE 37383
// k := tmp ;
37373: LD_ADDR_VAR 0 9
37377: PUSH
37378: LD_VAR 0 14
37382: ST_TO_ADDR
// for j = k downto 1 do
37383: LD_ADDR_VAR 0 8
37387: PUSH
37388: DOUBLE
37389: LD_VAR 0 9
37393: INC
37394: ST_TO_ADDR
37395: LD_INT 1
37397: PUSH
37398: FOR_DOWNTO
37399: IFFALSE 37474
// begin if GetType ( tmp [ j ] ) = unit_human then
37401: LD_VAR 0 14
37405: PUSH
37406: LD_VAR 0 8
37410: ARRAY
37411: PPUSH
37412: CALL_OW 247
37416: PUSH
37417: LD_INT 1
37419: EQUAL
37420: IFFALSE 37472
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
37422: LD_VAR 0 4
37426: PUSH
37427: LD_VAR 0 7
37431: ARRAY
37432: PPUSH
37433: LD_VAR 0 14
37437: PUSH
37438: LD_VAR 0 8
37442: ARRAY
37443: PPUSH
37444: CALL 34242 0 2
// x := tmp [ j ] ;
37448: LD_ADDR_VAR 0 10
37452: PUSH
37453: LD_VAR 0 14
37457: PUSH
37458: LD_VAR 0 8
37462: ARRAY
37463: ST_TO_ADDR
// attacking := true ;
37464: LD_ADDR_VAR 0 29
37468: PUSH
37469: LD_INT 1
37471: ST_TO_ADDR
// end ; end ;
37472: GO 37398
37474: POP
37475: POP
// if not x then
37476: LD_VAR 0 10
37480: NOT
37481: IFFALSE 37621
// begin attacking := true ;
37483: LD_ADDR_VAR 0 29
37487: PUSH
37488: LD_INT 1
37490: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
37491: LD_VAR 0 4
37495: PUSH
37496: LD_VAR 0 7
37500: ARRAY
37501: PPUSH
37502: CALL_OW 250
37506: PPUSH
37507: LD_VAR 0 4
37511: PUSH
37512: LD_VAR 0 7
37516: ARRAY
37517: PPUSH
37518: CALL_OW 251
37522: PPUSH
37523: CALL_OW 546
37527: PUSH
37528: LD_INT 2
37530: ARRAY
37531: PUSH
37532: LD_VAR 0 14
37536: PUSH
37537: LD_INT 1
37539: ARRAY
37540: PPUSH
37541: CALL_OW 250
37545: PPUSH
37546: LD_VAR 0 14
37550: PUSH
37551: LD_INT 1
37553: ARRAY
37554: PPUSH
37555: CALL_OW 251
37559: PPUSH
37560: CALL_OW 546
37564: PUSH
37565: LD_INT 2
37567: ARRAY
37568: EQUAL
37569: IFFALSE 37597
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
37571: LD_VAR 0 4
37575: PUSH
37576: LD_VAR 0 7
37580: ARRAY
37581: PPUSH
37582: LD_VAR 0 14
37586: PUSH
37587: LD_INT 1
37589: ARRAY
37590: PPUSH
37591: CALL 34242 0 2
37595: GO 37621
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
37597: LD_VAR 0 4
37601: PUSH
37602: LD_VAR 0 7
37606: ARRAY
37607: PPUSH
37608: LD_VAR 0 14
37612: PUSH
37613: LD_INT 1
37615: ARRAY
37616: PPUSH
37617: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
37621: LD_VAR 0 4
37625: PUSH
37626: LD_VAR 0 7
37630: ARRAY
37631: PPUSH
37632: CALL_OW 264
37636: PUSH
37637: LD_INT 29
37639: EQUAL
37640: IFFALSE 38006
// begin if WantsToAttack ( group [ i ] ) in bombed then
37642: LD_VAR 0 4
37646: PUSH
37647: LD_VAR 0 7
37651: ARRAY
37652: PPUSH
37653: CALL_OW 319
37657: PUSH
37658: LD_VAR 0 28
37662: IN
37663: IFFALSE 37667
// continue ;
37665: GO 35758
// k := 8 ;
37667: LD_ADDR_VAR 0 9
37671: PUSH
37672: LD_INT 8
37674: ST_TO_ADDR
// x := 0 ;
37675: LD_ADDR_VAR 0 10
37679: PUSH
37680: LD_INT 0
37682: ST_TO_ADDR
// if tmp < k then
37683: LD_VAR 0 14
37687: PUSH
37688: LD_VAR 0 9
37692: LESS
37693: IFFALSE 37705
// k := tmp ;
37695: LD_ADDR_VAR 0 9
37699: PUSH
37700: LD_VAR 0 14
37704: ST_TO_ADDR
// for j = 1 to k do
37705: LD_ADDR_VAR 0 8
37709: PUSH
37710: DOUBLE
37711: LD_INT 1
37713: DEC
37714: ST_TO_ADDR
37715: LD_VAR 0 9
37719: PUSH
37720: FOR_TO
37721: IFFALSE 37853
// begin if GetType ( tmp [ j ] ) = unit_building then
37723: LD_VAR 0 14
37727: PUSH
37728: LD_VAR 0 8
37732: ARRAY
37733: PPUSH
37734: CALL_OW 247
37738: PUSH
37739: LD_INT 3
37741: EQUAL
37742: IFFALSE 37851
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
37744: LD_VAR 0 14
37748: PUSH
37749: LD_VAR 0 8
37753: ARRAY
37754: PUSH
37755: LD_VAR 0 28
37759: IN
37760: NOT
37761: PUSH
37762: LD_VAR 0 14
37766: PUSH
37767: LD_VAR 0 8
37771: ARRAY
37772: PPUSH
37773: CALL_OW 313
37777: AND
37778: IFFALSE 37851
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
37780: LD_VAR 0 4
37784: PUSH
37785: LD_VAR 0 7
37789: ARRAY
37790: PPUSH
37791: LD_VAR 0 14
37795: PUSH
37796: LD_VAR 0 8
37800: ARRAY
37801: PPUSH
37802: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
37806: LD_ADDR_VAR 0 28
37810: PUSH
37811: LD_VAR 0 28
37815: PPUSH
37816: LD_VAR 0 28
37820: PUSH
37821: LD_INT 1
37823: PLUS
37824: PPUSH
37825: LD_VAR 0 14
37829: PUSH
37830: LD_VAR 0 8
37834: ARRAY
37835: PPUSH
37836: CALL_OW 1
37840: ST_TO_ADDR
// attacking := true ;
37841: LD_ADDR_VAR 0 29
37845: PUSH
37846: LD_INT 1
37848: ST_TO_ADDR
// break ;
37849: GO 37853
// end ; end ;
37851: GO 37720
37853: POP
37854: POP
// if not attacking and f_attack_depot then
37855: LD_VAR 0 29
37859: NOT
37860: PUSH
37861: LD_VAR 0 25
37865: AND
37866: IFFALSE 37961
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
37868: LD_ADDR_VAR 0 13
37872: PUSH
37873: LD_VAR 0 14
37877: PPUSH
37878: LD_INT 2
37880: PUSH
37881: LD_INT 30
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 30
37893: PUSH
37894: LD_INT 1
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: LIST
37905: PPUSH
37906: CALL_OW 72
37910: ST_TO_ADDR
// if z then
37911: LD_VAR 0 13
37915: IFFALSE 37961
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
37917: LD_VAR 0 4
37921: PUSH
37922: LD_VAR 0 7
37926: ARRAY
37927: PPUSH
37928: LD_VAR 0 13
37932: PPUSH
37933: LD_VAR 0 4
37937: PUSH
37938: LD_VAR 0 7
37942: ARRAY
37943: PPUSH
37944: CALL_OW 74
37948: PPUSH
37949: CALL_OW 115
// attacking := true ;
37953: LD_ADDR_VAR 0 29
37957: PUSH
37958: LD_INT 1
37960: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
37961: LD_VAR 0 4
37965: PUSH
37966: LD_VAR 0 7
37970: ARRAY
37971: PPUSH
37972: CALL_OW 256
37976: PUSH
37977: LD_INT 500
37979: LESS
37980: IFFALSE 38006
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
37982: LD_VAR 0 4
37986: PUSH
37987: LD_VAR 0 7
37991: ARRAY
37992: PPUSH
37993: LD_VAR 0 14
37997: PUSH
37998: LD_INT 1
38000: ARRAY
38001: PPUSH
38002: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
38006: LD_VAR 0 4
38010: PUSH
38011: LD_VAR 0 7
38015: ARRAY
38016: PPUSH
38017: CALL_OW 256
38021: PUSH
38022: LD_INT 250
38024: LESS
38025: PUSH
38026: LD_VAR 0 4
38030: PUSH
38031: LD_VAR 0 7
38035: ARRAY
38036: PUSH
38037: LD_INT 21
38039: PUSH
38040: LD_INT 2
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 23
38049: PUSH
38050: LD_INT 2
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PPUSH
38061: CALL_OW 69
38065: IN
38066: AND
38067: IFFALSE 38192
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
38069: LD_ADDR_VAR 0 9
38073: PUSH
38074: LD_OWVAR 3
38078: PUSH
38079: LD_VAR 0 4
38083: PUSH
38084: LD_VAR 0 7
38088: ARRAY
38089: DIFF
38090: PPUSH
38091: LD_VAR 0 4
38095: PUSH
38096: LD_VAR 0 7
38100: ARRAY
38101: PPUSH
38102: CALL_OW 74
38106: ST_TO_ADDR
// if not k then
38107: LD_VAR 0 9
38111: NOT
38112: IFFALSE 38116
// continue ;
38114: GO 35758
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
38116: LD_VAR 0 9
38120: PUSH
38121: LD_INT 81
38123: PUSH
38124: LD_VAR 0 4
38128: PUSH
38129: LD_VAR 0 7
38133: ARRAY
38134: PPUSH
38135: CALL_OW 255
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PPUSH
38144: CALL_OW 69
38148: IN
38149: PUSH
38150: LD_VAR 0 9
38154: PPUSH
38155: LD_VAR 0 4
38159: PUSH
38160: LD_VAR 0 7
38164: ARRAY
38165: PPUSH
38166: CALL_OW 296
38170: PUSH
38171: LD_INT 5
38173: LESS
38174: AND
38175: IFFALSE 38192
// ComAutodestruct ( group [ i ] ) ;
38177: LD_VAR 0 4
38181: PUSH
38182: LD_VAR 0 7
38186: ARRAY
38187: PPUSH
38188: CALL 34140 0 1
// end ; if f_attack_depot then
38192: LD_VAR 0 25
38196: IFFALSE 38308
// begin k := 6 ;
38198: LD_ADDR_VAR 0 9
38202: PUSH
38203: LD_INT 6
38205: ST_TO_ADDR
// if tmp < k then
38206: LD_VAR 0 14
38210: PUSH
38211: LD_VAR 0 9
38215: LESS
38216: IFFALSE 38228
// k := tmp ;
38218: LD_ADDR_VAR 0 9
38222: PUSH
38223: LD_VAR 0 14
38227: ST_TO_ADDR
// for j = 1 to k do
38228: LD_ADDR_VAR 0 8
38232: PUSH
38233: DOUBLE
38234: LD_INT 1
38236: DEC
38237: ST_TO_ADDR
38238: LD_VAR 0 9
38242: PUSH
38243: FOR_TO
38244: IFFALSE 38306
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
38246: LD_VAR 0 8
38250: PPUSH
38251: CALL_OW 266
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: IN
38266: IFFALSE 38304
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
38268: LD_VAR 0 4
38272: PUSH
38273: LD_VAR 0 7
38277: ARRAY
38278: PPUSH
38279: LD_VAR 0 14
38283: PUSH
38284: LD_VAR 0 8
38288: ARRAY
38289: PPUSH
38290: CALL_OW 115
// attacking := true ;
38294: LD_ADDR_VAR 0 29
38298: PUSH
38299: LD_INT 1
38301: ST_TO_ADDR
// break ;
38302: GO 38306
// end ;
38304: GO 38243
38306: POP
38307: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
38308: LD_VAR 0 4
38312: PUSH
38313: LD_VAR 0 7
38317: ARRAY
38318: PPUSH
38319: CALL_OW 302
38323: PUSH
38324: LD_VAR 0 29
38328: NOT
38329: AND
38330: IFFALSE 38598
// begin if GetTag ( group [ i ] ) = 71 then
38332: LD_VAR 0 4
38336: PUSH
38337: LD_VAR 0 7
38341: ARRAY
38342: PPUSH
38343: CALL_OW 110
38347: PUSH
38348: LD_INT 71
38350: EQUAL
38351: IFFALSE 38392
// begin if HasTask ( group [ i ] ) then
38353: LD_VAR 0 4
38357: PUSH
38358: LD_VAR 0 7
38362: ARRAY
38363: PPUSH
38364: CALL_OW 314
38368: IFFALSE 38374
// continue else
38370: GO 35758
38372: GO 38392
// SetTag ( group [ i ] , 0 ) ;
38374: LD_VAR 0 4
38378: PUSH
38379: LD_VAR 0 7
38383: ARRAY
38384: PPUSH
38385: LD_INT 0
38387: PPUSH
38388: CALL_OW 109
// end ; k := 8 ;
38392: LD_ADDR_VAR 0 9
38396: PUSH
38397: LD_INT 8
38399: ST_TO_ADDR
// x := 0 ;
38400: LD_ADDR_VAR 0 10
38404: PUSH
38405: LD_INT 0
38407: ST_TO_ADDR
// if tmp < k then
38408: LD_VAR 0 14
38412: PUSH
38413: LD_VAR 0 9
38417: LESS
38418: IFFALSE 38430
// k := tmp ;
38420: LD_ADDR_VAR 0 9
38424: PUSH
38425: LD_VAR 0 14
38429: ST_TO_ADDR
// for j = 1 to k do
38430: LD_ADDR_VAR 0 8
38434: PUSH
38435: DOUBLE
38436: LD_INT 1
38438: DEC
38439: ST_TO_ADDR
38440: LD_VAR 0 9
38444: PUSH
38445: FOR_TO
38446: IFFALSE 38544
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
38448: LD_VAR 0 14
38452: PUSH
38453: LD_VAR 0 8
38457: ARRAY
38458: PPUSH
38459: CALL_OW 247
38463: PUSH
38464: LD_INT 1
38466: EQUAL
38467: PUSH
38468: LD_VAR 0 14
38472: PUSH
38473: LD_VAR 0 8
38477: ARRAY
38478: PPUSH
38479: CALL_OW 256
38483: PUSH
38484: LD_INT 250
38486: LESS
38487: PUSH
38488: LD_VAR 0 20
38492: AND
38493: PUSH
38494: LD_VAR 0 20
38498: NOT
38499: PUSH
38500: LD_VAR 0 14
38504: PUSH
38505: LD_VAR 0 8
38509: ARRAY
38510: PPUSH
38511: CALL_OW 256
38515: PUSH
38516: LD_INT 250
38518: GREATEREQUAL
38519: AND
38520: OR
38521: AND
38522: IFFALSE 38542
// begin x := tmp [ j ] ;
38524: LD_ADDR_VAR 0 10
38528: PUSH
38529: LD_VAR 0 14
38533: PUSH
38534: LD_VAR 0 8
38538: ARRAY
38539: ST_TO_ADDR
// break ;
38540: GO 38544
// end ;
38542: GO 38445
38544: POP
38545: POP
// if x then
38546: LD_VAR 0 10
38550: IFFALSE 38574
// ComAttackUnit ( group [ i ] , x ) else
38552: LD_VAR 0 4
38556: PUSH
38557: LD_VAR 0 7
38561: ARRAY
38562: PPUSH
38563: LD_VAR 0 10
38567: PPUSH
38568: CALL_OW 115
38572: GO 38598
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
38574: LD_VAR 0 4
38578: PUSH
38579: LD_VAR 0 7
38583: ARRAY
38584: PPUSH
38585: LD_VAR 0 14
38589: PUSH
38590: LD_INT 1
38592: ARRAY
38593: PPUSH
38594: CALL_OW 115
// end ; end ; end ;
38598: GO 35758
38600: POP
38601: POP
// wait ( 0 0$1 ) ;
38602: LD_INT 35
38604: PPUSH
38605: CALL_OW 67
// until group = [ ] ;
38609: LD_VAR 0 4
38613: PUSH
38614: EMPTY
38615: EQUAL
38616: IFFALSE 35743
// end ;
38618: LD_VAR 0 2
38622: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38623: LD_INT 0
38625: PPUSH
38626: PPUSH
38627: PPUSH
38628: PPUSH
// if not base_units then
38629: LD_VAR 0 1
38633: NOT
38634: IFFALSE 38638
// exit ;
38636: GO 38725
// result := false ;
38638: LD_ADDR_VAR 0 2
38642: PUSH
38643: LD_INT 0
38645: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38646: LD_ADDR_VAR 0 5
38650: PUSH
38651: LD_VAR 0 1
38655: PPUSH
38656: LD_INT 21
38658: PUSH
38659: LD_INT 3
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PPUSH
38666: CALL_OW 72
38670: ST_TO_ADDR
// if not tmp then
38671: LD_VAR 0 5
38675: NOT
38676: IFFALSE 38680
// exit ;
38678: GO 38725
// for i in tmp do
38680: LD_ADDR_VAR 0 3
38684: PUSH
38685: LD_VAR 0 5
38689: PUSH
38690: FOR_IN
38691: IFFALSE 38723
// begin result := EnemyInRange ( i , 22 ) ;
38693: LD_ADDR_VAR 0 2
38697: PUSH
38698: LD_VAR 0 3
38702: PPUSH
38703: LD_INT 22
38705: PPUSH
38706: CALL 33823 0 2
38710: ST_TO_ADDR
// if result then
38711: LD_VAR 0 2
38715: IFFALSE 38721
// exit ;
38717: POP
38718: POP
38719: GO 38725
// end ;
38721: GO 38690
38723: POP
38724: POP
// end ;
38725: LD_VAR 0 2
38729: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
38730: LD_INT 0
38732: PPUSH
38733: PPUSH
// if not units then
38734: LD_VAR 0 1
38738: NOT
38739: IFFALSE 38743
// exit ;
38741: GO 38813
// result := [ ] ;
38743: LD_ADDR_VAR 0 3
38747: PUSH
38748: EMPTY
38749: ST_TO_ADDR
// for i in units do
38750: LD_ADDR_VAR 0 4
38754: PUSH
38755: LD_VAR 0 1
38759: PUSH
38760: FOR_IN
38761: IFFALSE 38811
// if GetTag ( i ) = tag then
38763: LD_VAR 0 4
38767: PPUSH
38768: CALL_OW 110
38772: PUSH
38773: LD_VAR 0 2
38777: EQUAL
38778: IFFALSE 38809
// result := Insert ( result , result + 1 , i ) ;
38780: LD_ADDR_VAR 0 3
38784: PUSH
38785: LD_VAR 0 3
38789: PPUSH
38790: LD_VAR 0 3
38794: PUSH
38795: LD_INT 1
38797: PLUS
38798: PPUSH
38799: LD_VAR 0 4
38803: PPUSH
38804: CALL_OW 2
38808: ST_TO_ADDR
38809: GO 38760
38811: POP
38812: POP
// end ;
38813: LD_VAR 0 3
38817: RET
// export function IsDriver ( un ) ; begin
38818: LD_INT 0
38820: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38821: LD_ADDR_VAR 0 2
38825: PUSH
38826: LD_VAR 0 1
38830: PUSH
38831: LD_INT 55
38833: PUSH
38834: EMPTY
38835: LIST
38836: PPUSH
38837: CALL_OW 69
38841: IN
38842: ST_TO_ADDR
// end ; end_of_file
38843: LD_VAR 0 2
38847: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade ; export function InitMacro ; var i ; begin
38848: LD_INT 0
38850: PPUSH
38851: PPUSH
// skirmish := false ;
38852: LD_ADDR_EXP 6
38856: PUSH
38857: LD_INT 0
38859: ST_TO_ADDR
// mc_bases := [ ] ;
38860: LD_ADDR_EXP 7
38864: PUSH
38865: EMPTY
38866: ST_TO_ADDR
// mc_sides := [ ] ;
38867: LD_ADDR_EXP 32
38871: PUSH
38872: EMPTY
38873: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
38874: LD_ADDR_EXP 8
38878: PUSH
38879: EMPTY
38880: ST_TO_ADDR
// mc_building_repairs := [ ] ;
38881: LD_ADDR_EXP 9
38885: PUSH
38886: EMPTY
38887: ST_TO_ADDR
// mc_need_heal := [ ] ;
38888: LD_ADDR_EXP 10
38892: PUSH
38893: EMPTY
38894: ST_TO_ADDR
// mc_healers := [ ] ;
38895: LD_ADDR_EXP 11
38899: PUSH
38900: EMPTY
38901: ST_TO_ADDR
// mc_build_list := [ ] ;
38902: LD_ADDR_EXP 12
38906: PUSH
38907: EMPTY
38908: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
38909: LD_ADDR_EXP 38
38913: PUSH
38914: EMPTY
38915: ST_TO_ADDR
// mc_builders := [ ] ;
38916: LD_ADDR_EXP 13
38920: PUSH
38921: EMPTY
38922: ST_TO_ADDR
// mc_construct_list := [ ] ;
38923: LD_ADDR_EXP 14
38927: PUSH
38928: EMPTY
38929: ST_TO_ADDR
// mc_turret_list := [ ] ;
38930: LD_ADDR_EXP 15
38934: PUSH
38935: EMPTY
38936: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
38937: LD_ADDR_EXP 16
38941: PUSH
38942: EMPTY
38943: ST_TO_ADDR
// mc_miners := [ ] ;
38944: LD_ADDR_EXP 21
38948: PUSH
38949: EMPTY
38950: ST_TO_ADDR
// mc_mines := [ ] ;
38951: LD_ADDR_EXP 20
38955: PUSH
38956: EMPTY
38957: ST_TO_ADDR
// mc_minefields := [ ] ;
38958: LD_ADDR_EXP 22
38962: PUSH
38963: EMPTY
38964: ST_TO_ADDR
// mc_crates := [ ] ;
38965: LD_ADDR_EXP 23
38969: PUSH
38970: EMPTY
38971: ST_TO_ADDR
// mc_crates_collector := [ ] ;
38972: LD_ADDR_EXP 24
38976: PUSH
38977: EMPTY
38978: ST_TO_ADDR
// mc_vehicles := [ ] ;
38979: LD_ADDR_EXP 25
38983: PUSH
38984: EMPTY
38985: ST_TO_ADDR
// mc_attack := [ ] ;
38986: LD_ADDR_EXP 26
38990: PUSH
38991: EMPTY
38992: ST_TO_ADDR
// mc_produce := [ ] ;
38993: LD_ADDR_EXP 27
38997: PUSH
38998: EMPTY
38999: ST_TO_ADDR
// mc_defender := [ ] ;
39000: LD_ADDR_EXP 28
39004: PUSH
39005: EMPTY
39006: ST_TO_ADDR
// mc_parking := [ ] ;
39007: LD_ADDR_EXP 30
39011: PUSH
39012: EMPTY
39013: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
39014: LD_ADDR_EXP 17
39018: PUSH
39019: EMPTY
39020: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
39021: LD_ADDR_EXP 19
39025: PUSH
39026: EMPTY
39027: ST_TO_ADDR
// mc_scan := [ ] ;
39028: LD_ADDR_EXP 29
39032: PUSH
39033: EMPTY
39034: ST_TO_ADDR
// mc_scan_area := [ ] ;
39035: LD_ADDR_EXP 31
39039: PUSH
39040: EMPTY
39041: ST_TO_ADDR
// mc_tech := [ ] ;
39042: LD_ADDR_EXP 33
39046: PUSH
39047: EMPTY
39048: ST_TO_ADDR
// end ;
39049: LD_VAR 0 1
39053: RET
// export function Skirmish_Start ; var i ; begin
39054: LD_INT 0
39056: PPUSH
39057: PPUSH
// for i = 1 to mc_bases do
39058: LD_ADDR_VAR 0 2
39062: PUSH
39063: DOUBLE
39064: LD_INT 1
39066: DEC
39067: ST_TO_ADDR
39068: LD_EXP 7
39072: PUSH
39073: FOR_TO
39074: IFFALSE 39875
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
39076: LD_ADDR_EXP 8
39080: PUSH
39081: LD_EXP 8
39085: PPUSH
39086: LD_VAR 0 2
39090: PPUSH
39091: EMPTY
39092: PPUSH
39093: CALL_OW 1
39097: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
39098: LD_ADDR_EXP 9
39102: PUSH
39103: LD_EXP 9
39107: PPUSH
39108: LD_VAR 0 2
39112: PPUSH
39113: EMPTY
39114: PPUSH
39115: CALL_OW 1
39119: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
39120: LD_ADDR_EXP 10
39124: PUSH
39125: LD_EXP 10
39129: PPUSH
39130: LD_VAR 0 2
39134: PPUSH
39135: EMPTY
39136: PPUSH
39137: CALL_OW 1
39141: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
39142: LD_ADDR_EXP 11
39146: PUSH
39147: LD_EXP 11
39151: PPUSH
39152: LD_VAR 0 2
39156: PPUSH
39157: EMPTY
39158: PUSH
39159: EMPTY
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PPUSH
39165: CALL_OW 1
39169: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
39170: LD_ADDR_EXP 12
39174: PUSH
39175: LD_EXP 12
39179: PPUSH
39180: LD_VAR 0 2
39184: PPUSH
39185: EMPTY
39186: PPUSH
39187: CALL_OW 1
39191: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
39192: LD_ADDR_EXP 38
39196: PUSH
39197: LD_EXP 38
39201: PPUSH
39202: LD_VAR 0 2
39206: PPUSH
39207: EMPTY
39208: PPUSH
39209: CALL_OW 1
39213: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
39214: LD_ADDR_EXP 13
39218: PUSH
39219: LD_EXP 13
39223: PPUSH
39224: LD_VAR 0 2
39228: PPUSH
39229: EMPTY
39230: PPUSH
39231: CALL_OW 1
39235: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
39236: LD_ADDR_EXP 14
39240: PUSH
39241: LD_EXP 14
39245: PPUSH
39246: LD_VAR 0 2
39250: PPUSH
39251: EMPTY
39252: PPUSH
39253: CALL_OW 1
39257: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
39258: LD_ADDR_EXP 15
39262: PUSH
39263: LD_EXP 15
39267: PPUSH
39268: LD_VAR 0 2
39272: PPUSH
39273: EMPTY
39274: PPUSH
39275: CALL_OW 1
39279: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
39280: LD_ADDR_EXP 16
39284: PUSH
39285: LD_EXP 16
39289: PPUSH
39290: LD_VAR 0 2
39294: PPUSH
39295: LD_EXP 7
39299: PUSH
39300: LD_VAR 0 2
39304: ARRAY
39305: PPUSH
39306: LD_INT 2
39308: PUSH
39309: LD_INT 30
39311: PUSH
39312: LD_INT 32
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 30
39321: PUSH
39322: LD_INT 31
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 58
39336: PUSH
39337: EMPTY
39338: LIST
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PPUSH
39344: CALL_OW 72
39348: PPUSH
39349: CALL_OW 1
39353: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
39354: LD_ADDR_EXP 17
39358: PUSH
39359: LD_EXP 17
39363: PPUSH
39364: LD_VAR 0 2
39368: PPUSH
39369: EMPTY
39370: PPUSH
39371: CALL_OW 1
39375: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
39376: LD_ADDR_EXP 21
39380: PUSH
39381: LD_EXP 21
39385: PPUSH
39386: LD_VAR 0 2
39390: PPUSH
39391: EMPTY
39392: PPUSH
39393: CALL_OW 1
39397: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
39398: LD_ADDR_EXP 20
39402: PUSH
39403: LD_EXP 20
39407: PPUSH
39408: LD_VAR 0 2
39412: PPUSH
39413: EMPTY
39414: PPUSH
39415: CALL_OW 1
39419: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
39420: LD_ADDR_EXP 22
39424: PUSH
39425: LD_EXP 22
39429: PPUSH
39430: LD_VAR 0 2
39434: PPUSH
39435: EMPTY
39436: PPUSH
39437: CALL_OW 1
39441: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
39442: LD_ADDR_EXP 23
39446: PUSH
39447: LD_EXP 23
39451: PPUSH
39452: LD_VAR 0 2
39456: PPUSH
39457: EMPTY
39458: PPUSH
39459: CALL_OW 1
39463: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
39464: LD_ADDR_EXP 24
39468: PUSH
39469: LD_EXP 24
39473: PPUSH
39474: LD_VAR 0 2
39478: PPUSH
39479: EMPTY
39480: PPUSH
39481: CALL_OW 1
39485: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
39486: LD_ADDR_EXP 25
39490: PUSH
39491: LD_EXP 25
39495: PPUSH
39496: LD_VAR 0 2
39500: PPUSH
39501: EMPTY
39502: PPUSH
39503: CALL_OW 1
39507: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
39508: LD_ADDR_EXP 26
39512: PUSH
39513: LD_EXP 26
39517: PPUSH
39518: LD_VAR 0 2
39522: PPUSH
39523: EMPTY
39524: PPUSH
39525: CALL_OW 1
39529: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
39530: LD_ADDR_EXP 27
39534: PUSH
39535: LD_EXP 27
39539: PPUSH
39540: LD_VAR 0 2
39544: PPUSH
39545: EMPTY
39546: PPUSH
39547: CALL_OW 1
39551: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
39552: LD_ADDR_EXP 28
39556: PUSH
39557: LD_EXP 28
39561: PPUSH
39562: LD_VAR 0 2
39566: PPUSH
39567: EMPTY
39568: PPUSH
39569: CALL_OW 1
39573: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
39574: LD_ADDR_EXP 18
39578: PUSH
39579: LD_EXP 18
39583: PPUSH
39584: LD_VAR 0 2
39588: PPUSH
39589: LD_INT 0
39591: PPUSH
39592: CALL_OW 1
39596: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
39597: LD_ADDR_EXP 30
39601: PUSH
39602: LD_EXP 30
39606: PPUSH
39607: LD_VAR 0 2
39611: PPUSH
39612: LD_INT 0
39614: PPUSH
39615: CALL_OW 1
39619: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
39620: LD_ADDR_EXP 19
39624: PUSH
39625: LD_EXP 19
39629: PPUSH
39630: LD_VAR 0 2
39634: PPUSH
39635: EMPTY
39636: PPUSH
39637: CALL_OW 1
39641: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
39642: LD_ADDR_EXP 29
39646: PUSH
39647: LD_EXP 29
39651: PPUSH
39652: LD_VAR 0 2
39656: PPUSH
39657: LD_INT 0
39659: PPUSH
39660: CALL_OW 1
39664: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
39665: LD_ADDR_EXP 31
39669: PUSH
39670: LD_EXP 31
39674: PPUSH
39675: LD_VAR 0 2
39679: PPUSH
39680: EMPTY
39681: PPUSH
39682: CALL_OW 1
39686: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
39687: LD_ADDR_EXP 34
39691: PUSH
39692: LD_EXP 34
39696: PPUSH
39697: LD_VAR 0 2
39701: PPUSH
39702: LD_INT 0
39704: PPUSH
39705: CALL_OW 1
39709: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
39710: LD_ADDR_EXP 35
39714: PUSH
39715: LD_EXP 35
39719: PPUSH
39720: LD_VAR 0 2
39724: PPUSH
39725: EMPTY
39726: PPUSH
39727: CALL_OW 1
39731: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
39732: LD_ADDR_EXP 36
39736: PUSH
39737: LD_EXP 36
39741: PPUSH
39742: LD_VAR 0 2
39746: PPUSH
39747: EMPTY
39748: PPUSH
39749: CALL_OW 1
39753: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
39754: LD_ADDR_EXP 37
39758: PUSH
39759: LD_EXP 37
39763: PPUSH
39764: LD_VAR 0 2
39768: PPUSH
39769: EMPTY
39770: PPUSH
39771: CALL_OW 1
39775: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
39776: LD_ADDR_EXP 39
39780: PUSH
39781: LD_EXP 39
39785: PPUSH
39786: LD_VAR 0 2
39790: PPUSH
39791: LD_EXP 7
39795: PUSH
39796: LD_VAR 0 2
39800: ARRAY
39801: PPUSH
39802: LD_INT 2
39804: PUSH
39805: LD_INT 30
39807: PUSH
39808: LD_INT 6
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 30
39817: PUSH
39818: LD_INT 7
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 30
39827: PUSH
39828: LD_INT 8
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: PPUSH
39841: CALL_OW 72
39845: PPUSH
39846: CALL_OW 1
39850: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
39851: LD_ADDR_EXP 40
39855: PUSH
39856: LD_EXP 40
39860: PPUSH
39861: LD_VAR 0 2
39865: PPUSH
39866: EMPTY
39867: PPUSH
39868: CALL_OW 1
39872: ST_TO_ADDR
// end ;
39873: GO 39073
39875: POP
39876: POP
// MC_InitSides ( ) ;
39877: CALL 47697 0 0
// MC_InitResearch ( ) ;
39881: CALL 47436 0 0
// CustomInitMacro ( ) ;
39885: CALL 135 0 0
// skirmish := true ;
39889: LD_ADDR_EXP 6
39893: PUSH
39894: LD_INT 1
39896: ST_TO_ADDR
// end ;
39897: LD_VAR 0 1
39901: RET
// every 0 0$01 trigger skirmish do
39902: LD_EXP 6
39906: IFFALSE 40025
39908: GO 39910
39910: DISABLE
// begin enable ;
39911: ENABLE
// MC_CheckBuildings ( ) ;
39912: CALL 40456 0 0
// MC_CheckPeopleLife ( ) ;
39916: CALL 40581 0 0
// RaiseSailEvent ( 103 ) ;
39920: LD_INT 103
39922: PPUSH
39923: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
39927: LD_INT 104
39929: PPUSH
39930: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
39934: LD_INT 105
39936: PPUSH
39937: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
39941: LD_INT 106
39943: PPUSH
39944: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
39948: LD_INT 107
39950: PPUSH
39951: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
39955: LD_INT 108
39957: PPUSH
39958: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
39962: LD_INT 109
39964: PPUSH
39965: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
39969: LD_INT 110
39971: PPUSH
39972: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
39976: LD_INT 111
39978: PPUSH
39979: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
39983: LD_INT 112
39985: PPUSH
39986: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
39990: LD_INT 120
39992: PPUSH
39993: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
39997: LD_INT 121
39999: PPUSH
40000: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
40004: LD_INT 122
40006: PPUSH
40007: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
40011: LD_INT 123
40013: PPUSH
40014: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
40018: LD_INT 200
40020: PPUSH
40021: CALL_OW 427
// end ;
40025: END
// every 10 trigger skirmish do var i ;
40026: LD_EXP 6
40030: IFFALSE 40129
40032: GO 40034
40034: DISABLE
40035: LD_INT 0
40037: PPUSH
// begin enable ;
40038: ENABLE
// if not mc_bases then
40039: LD_EXP 7
40043: NOT
40044: IFFALSE 40048
// exit ;
40046: GO 40129
// for i = 1 to mc_bases do
40048: LD_ADDR_VAR 0 1
40052: PUSH
40053: DOUBLE
40054: LD_INT 1
40056: DEC
40057: ST_TO_ADDR
40058: LD_EXP 7
40062: PUSH
40063: FOR_TO
40064: IFFALSE 40127
// if mc_mines [ i ] and mc_miners [ i ] then
40066: LD_EXP 20
40070: PUSH
40071: LD_VAR 0 1
40075: ARRAY
40076: PUSH
40077: LD_EXP 21
40081: PUSH
40082: LD_VAR 0 1
40086: ARRAY
40087: AND
40088: IFFALSE 40125
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
40090: LD_EXP 21
40094: PUSH
40095: LD_VAR 0 1
40099: ARRAY
40100: PUSH
40101: LD_INT 1
40103: ARRAY
40104: PPUSH
40105: CALL_OW 255
40109: PPUSH
40110: LD_EXP 20
40114: PUSH
40115: LD_VAR 0 1
40119: ARRAY
40120: PPUSH
40121: CALL 4654 0 2
40125: GO 40063
40127: POP
40128: POP
// end ;
40129: PPOPN 1
40131: END
// on SailEvent ( event ) do begin if event = 101 then
40132: LD_VAR 0 1
40136: PUSH
40137: LD_INT 101
40139: EQUAL
40140: IFFALSE 40146
// MC_RepairBuildings ( ) ;
40142: CALL 41139 0 0
// if event = 102 then
40146: LD_VAR 0 1
40150: PUSH
40151: LD_INT 102
40153: EQUAL
40154: IFFALSE 40160
// MC_Heal ( ) ;
40156: CALL 41545 0 0
// if event = 103 then
40160: LD_VAR 0 1
40164: PUSH
40165: LD_INT 103
40167: EQUAL
40168: IFFALSE 40174
// MC_Build ( ) ;
40170: CALL 41967 0 0
// if event = 104 then
40174: LD_VAR 0 1
40178: PUSH
40179: LD_INT 104
40181: EQUAL
40182: IFFALSE 40188
// MC_TurretWeapon ( ) ;
40184: CALL 43287 0 0
// if event = 105 then
40188: LD_VAR 0 1
40192: PUSH
40193: LD_INT 105
40195: EQUAL
40196: IFFALSE 40202
// MC_BuildUpgrade ( ) ;
40198: CALL 42884 0 0
// if event = 106 then
40202: LD_VAR 0 1
40206: PUSH
40207: LD_INT 106
40209: EQUAL
40210: IFFALSE 40216
// MC_PlantMines ( ) ;
40212: CALL 43606 0 0
// if event = 107 then
40216: LD_VAR 0 1
40220: PUSH
40221: LD_INT 107
40223: EQUAL
40224: IFFALSE 40230
// MC_CollectCrates ( ) ;
40226: CALL 44613 0 0
// if event = 108 then
40230: LD_VAR 0 1
40234: PUSH
40235: LD_INT 108
40237: EQUAL
40238: IFFALSE 40244
// MC_LinkRemoteControl ( ) ;
40240: CALL 45434 0 0
// if event = 109 then
40244: LD_VAR 0 1
40248: PUSH
40249: LD_INT 109
40251: EQUAL
40252: IFFALSE 40258
// MC_ProduceVehicle ( ) ;
40254: CALL 45615 0 0
// if event = 110 then
40258: LD_VAR 0 1
40262: PUSH
40263: LD_INT 110
40265: EQUAL
40266: IFFALSE 40272
// MC_SendAttack ( ) ;
40268: CALL 46096 0 0
// if event = 111 then
40272: LD_VAR 0 1
40276: PUSH
40277: LD_INT 111
40279: EQUAL
40280: IFFALSE 40286
// MC_Defend ( ) ;
40282: CALL 46204 0 0
// if event = 112 then
40286: LD_VAR 0 1
40290: PUSH
40291: LD_INT 112
40293: EQUAL
40294: IFFALSE 40300
// MC_Research ( ) ;
40296: CALL 46572 0 0
// if event = 120 then
40300: LD_VAR 0 1
40304: PUSH
40305: LD_INT 120
40307: EQUAL
40308: IFFALSE 40314
// MC_RepairVehicle ( ) ;
40310: CALL 47789 0 0
// if event = 121 then
40314: LD_VAR 0 1
40318: PUSH
40319: LD_INT 121
40321: EQUAL
40322: IFFALSE 40328
// MC_TameApe ( ) ;
40324: CALL 48458 0 0
// if event = 122 then
40328: LD_VAR 0 1
40332: PUSH
40333: LD_INT 122
40335: EQUAL
40336: IFFALSE 40342
// MC_ChangeApeClass ( ) ;
40338: CALL 49015 0 0
// if event = 123 then
40342: LD_VAR 0 1
40346: PUSH
40347: LD_INT 123
40349: EQUAL
40350: IFFALSE 40356
// MC_Bazooka ( ) ;
40352: CALL 49649 0 0
// if event = 200 then
40356: LD_VAR 0 1
40360: PUSH
40361: LD_INT 200
40363: EQUAL
40364: IFFALSE 40370
// MC_Idle ( ) ;
40366: CALL 50829 0 0
// end ;
40370: PPOPN 1
40372: END
// export function MC_Reset ( base , tag ) ; var i ; begin
40373: LD_INT 0
40375: PPUSH
40376: PPUSH
// if not mc_bases [ base ] or not tag then
40377: LD_EXP 7
40381: PUSH
40382: LD_VAR 0 1
40386: ARRAY
40387: NOT
40388: PUSH
40389: LD_VAR 0 2
40393: NOT
40394: OR
40395: IFFALSE 40399
// exit ;
40397: GO 40451
// for i in mc_bases [ base ] do
40399: LD_ADDR_VAR 0 4
40403: PUSH
40404: LD_EXP 7
40408: PUSH
40409: LD_VAR 0 1
40413: ARRAY
40414: PUSH
40415: FOR_IN
40416: IFFALSE 40449
// if GetTag ( i ) = tag then
40418: LD_VAR 0 4
40422: PPUSH
40423: CALL_OW 110
40427: PUSH
40428: LD_VAR 0 2
40432: EQUAL
40433: IFFALSE 40447
// SetTag ( i , 0 ) ;
40435: LD_VAR 0 4
40439: PPUSH
40440: LD_INT 0
40442: PPUSH
40443: CALL_OW 109
40447: GO 40415
40449: POP
40450: POP
// end ;
40451: LD_VAR 0 3
40455: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
40456: LD_INT 0
40458: PPUSH
40459: PPUSH
40460: PPUSH
// if not mc_bases then
40461: LD_EXP 7
40465: NOT
40466: IFFALSE 40470
// exit ;
40468: GO 40576
// for i = 1 to mc_bases do
40470: LD_ADDR_VAR 0 2
40474: PUSH
40475: DOUBLE
40476: LD_INT 1
40478: DEC
40479: ST_TO_ADDR
40480: LD_EXP 7
40484: PUSH
40485: FOR_TO
40486: IFFALSE 40567
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
40488: LD_ADDR_VAR 0 3
40492: PUSH
40493: LD_EXP 7
40497: PUSH
40498: LD_VAR 0 2
40502: ARRAY
40503: PPUSH
40504: LD_INT 21
40506: PUSH
40507: LD_INT 3
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 3
40516: PUSH
40517: LD_INT 24
40519: PUSH
40520: LD_INT 1000
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PPUSH
40535: CALL_OW 72
40539: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
40540: LD_ADDR_EXP 8
40544: PUSH
40545: LD_EXP 8
40549: PPUSH
40550: LD_VAR 0 2
40554: PPUSH
40555: LD_VAR 0 3
40559: PPUSH
40560: CALL_OW 1
40564: ST_TO_ADDR
// end ;
40565: GO 40485
40567: POP
40568: POP
// RaiseSailEvent ( 101 ) ;
40569: LD_INT 101
40571: PPUSH
40572: CALL_OW 427
// end ;
40576: LD_VAR 0 1
40580: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
40581: LD_INT 0
40583: PPUSH
40584: PPUSH
40585: PPUSH
40586: PPUSH
40587: PPUSH
40588: PPUSH
40589: PPUSH
// if not mc_bases then
40590: LD_EXP 7
40594: NOT
40595: IFFALSE 40599
// exit ;
40597: GO 41134
// for i = 1 to mc_bases do
40599: LD_ADDR_VAR 0 2
40603: PUSH
40604: DOUBLE
40605: LD_INT 1
40607: DEC
40608: ST_TO_ADDR
40609: LD_EXP 7
40613: PUSH
40614: FOR_TO
40615: IFFALSE 41125
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
40617: LD_ADDR_VAR 0 5
40621: PUSH
40622: LD_EXP 7
40626: PUSH
40627: LD_VAR 0 2
40631: ARRAY
40632: PUSH
40633: LD_EXP 35
40637: PUSH
40638: LD_VAR 0 2
40642: ARRAY
40643: UNION
40644: PPUSH
40645: LD_INT 21
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 1
40657: PUSH
40658: LD_INT 3
40660: PUSH
40661: LD_INT 54
40663: PUSH
40664: EMPTY
40665: LIST
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 3
40673: PUSH
40674: LD_INT 24
40676: PUSH
40677: LD_INT 700
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: LIST
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PPUSH
40697: CALL_OW 72
40701: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
40702: LD_ADDR_VAR 0 6
40706: PUSH
40707: LD_EXP 7
40711: PUSH
40712: LD_VAR 0 2
40716: ARRAY
40717: PPUSH
40718: LD_INT 21
40720: PUSH
40721: LD_INT 1
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: LD_INT 3
40733: PUSH
40734: LD_INT 54
40736: PUSH
40737: EMPTY
40738: LIST
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 3
40746: PUSH
40747: LD_INT 24
40749: PUSH
40750: LD_INT 250
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: LIST
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PPUSH
40770: CALL_OW 72
40774: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
40775: LD_ADDR_VAR 0 7
40779: PUSH
40780: LD_VAR 0 5
40784: PUSH
40785: LD_VAR 0 6
40789: DIFF
40790: ST_TO_ADDR
// if not need_heal_1 then
40791: LD_VAR 0 6
40795: NOT
40796: IFFALSE 40829
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
40798: LD_ADDR_EXP 10
40802: PUSH
40803: LD_EXP 10
40807: PPUSH
40808: LD_VAR 0 2
40812: PUSH
40813: LD_INT 1
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PPUSH
40820: EMPTY
40821: PPUSH
40822: CALL 7996 0 3
40826: ST_TO_ADDR
40827: GO 40861
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
40829: LD_ADDR_EXP 10
40833: PUSH
40834: LD_EXP 10
40838: PPUSH
40839: LD_VAR 0 2
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PPUSH
40851: LD_VAR 0 6
40855: PPUSH
40856: CALL 7996 0 3
40860: ST_TO_ADDR
// if not need_heal_2 then
40861: LD_VAR 0 7
40865: NOT
40866: IFFALSE 40899
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
40868: LD_ADDR_EXP 10
40872: PUSH
40873: LD_EXP 10
40877: PPUSH
40878: LD_VAR 0 2
40882: PUSH
40883: LD_INT 2
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PPUSH
40890: EMPTY
40891: PPUSH
40892: CALL 7996 0 3
40896: ST_TO_ADDR
40897: GO 40931
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
40899: LD_ADDR_EXP 10
40903: PUSH
40904: LD_EXP 10
40908: PPUSH
40909: LD_VAR 0 2
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PPUSH
40921: LD_VAR 0 7
40925: PPUSH
40926: CALL 7996 0 3
40930: ST_TO_ADDR
// if need_heal_2 then
40931: LD_VAR 0 7
40935: IFFALSE 41107
// for j in need_heal_2 do
40937: LD_ADDR_VAR 0 3
40941: PUSH
40942: LD_VAR 0 7
40946: PUSH
40947: FOR_IN
40948: IFFALSE 41105
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
40950: LD_ADDR_VAR 0 5
40954: PUSH
40955: LD_EXP 7
40959: PUSH
40960: LD_VAR 0 2
40964: ARRAY
40965: PPUSH
40966: LD_INT 2
40968: PUSH
40969: LD_INT 30
40971: PUSH
40972: LD_INT 6
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 30
40981: PUSH
40982: LD_INT 7
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 30
40991: PUSH
40992: LD_INT 8
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 30
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 30
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 25
41021: PUSH
41022: LD_INT 4
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: PPUSH
41038: CALL_OW 72
41042: ST_TO_ADDR
// if tmp then
41043: LD_VAR 0 5
41047: IFFALSE 41103
// begin k := NearestUnitToUnit ( tmp , j ) ;
41049: LD_ADDR_VAR 0 4
41053: PUSH
41054: LD_VAR 0 5
41058: PPUSH
41059: LD_VAR 0 3
41063: PPUSH
41064: CALL_OW 74
41068: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
41069: LD_VAR 0 3
41073: PPUSH
41074: LD_VAR 0 4
41078: PPUSH
41079: CALL_OW 296
41083: PUSH
41084: LD_INT 7
41086: GREATER
41087: IFFALSE 41103
// ComMoveUnit ( j , k ) ;
41089: LD_VAR 0 3
41093: PPUSH
41094: LD_VAR 0 4
41098: PPUSH
41099: CALL_OW 112
// end ; end ;
41103: GO 40947
41105: POP
41106: POP
// if not need_heal_1 and not need_heal_2 then
41107: LD_VAR 0 6
41111: NOT
41112: PUSH
41113: LD_VAR 0 7
41117: NOT
41118: AND
41119: IFFALSE 41123
// continue ;
41121: GO 40614
// end ;
41123: GO 40614
41125: POP
41126: POP
// RaiseSailEvent ( 102 ) ;
41127: LD_INT 102
41129: PPUSH
41130: CALL_OW 427
// end ;
41134: LD_VAR 0 1
41138: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
41139: LD_INT 0
41141: PPUSH
41142: PPUSH
41143: PPUSH
41144: PPUSH
41145: PPUSH
// if not mc_bases then
41146: LD_EXP 7
41150: NOT
41151: IFFALSE 41155
// exit ;
41153: GO 41540
// for i = 1 to mc_bases do
41155: LD_ADDR_VAR 0 2
41159: PUSH
41160: DOUBLE
41161: LD_INT 1
41163: DEC
41164: ST_TO_ADDR
41165: LD_EXP 7
41169: PUSH
41170: FOR_TO
41171: IFFALSE 41538
// begin if not mc_building_need_repair [ i ] then
41173: LD_EXP 8
41177: PUSH
41178: LD_VAR 0 2
41182: ARRAY
41183: NOT
41184: IFFALSE 41222
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
41186: LD_ADDR_EXP 9
41190: PUSH
41191: LD_EXP 9
41195: PPUSH
41196: LD_VAR 0 2
41200: PPUSH
41201: EMPTY
41202: PPUSH
41203: CALL_OW 1
41207: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
41208: LD_VAR 0 2
41212: PPUSH
41213: LD_INT 101
41215: PPUSH
41216: CALL 40373 0 2
// continue ;
41220: GO 41170
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
41222: LD_ADDR_EXP 13
41226: PUSH
41227: LD_EXP 13
41231: PPUSH
41232: LD_VAR 0 2
41236: PPUSH
41237: EMPTY
41238: PPUSH
41239: CALL_OW 1
41243: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
41244: LD_VAR 0 2
41248: PPUSH
41249: LD_INT 103
41251: PPUSH
41252: CALL 40373 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
41256: LD_ADDR_VAR 0 5
41260: PUSH
41261: LD_EXP 7
41265: PUSH
41266: LD_VAR 0 2
41270: ARRAY
41271: PUSH
41272: LD_EXP 35
41276: PUSH
41277: LD_VAR 0 2
41281: ARRAY
41282: UNION
41283: PPUSH
41284: LD_INT 2
41286: PUSH
41287: LD_INT 25
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 25
41299: PUSH
41300: LD_INT 16
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: LIST
41311: PUSH
41312: EMPTY
41313: LIST
41314: PPUSH
41315: CALL_OW 72
41319: ST_TO_ADDR
// if not tmp then
41320: LD_VAR 0 5
41324: NOT
41325: IFFALSE 41329
// continue ;
41327: GO 41170
// for j in tmp do
41329: LD_ADDR_VAR 0 3
41333: PUSH
41334: LD_VAR 0 5
41338: PUSH
41339: FOR_IN
41340: IFFALSE 41534
// begin if mc_need_heal [ i ] then
41342: LD_EXP 10
41346: PUSH
41347: LD_VAR 0 2
41351: ARRAY
41352: IFFALSE 41400
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
41354: LD_VAR 0 3
41358: PUSH
41359: LD_EXP 10
41363: PUSH
41364: LD_VAR 0 2
41368: ARRAY
41369: PUSH
41370: LD_INT 1
41372: ARRAY
41373: IN
41374: PUSH
41375: LD_VAR 0 3
41379: PUSH
41380: LD_EXP 10
41384: PUSH
41385: LD_VAR 0 2
41389: ARRAY
41390: PUSH
41391: LD_INT 2
41393: ARRAY
41394: IN
41395: OR
41396: IFFALSE 41400
// continue ;
41398: GO 41339
// if IsInUnit ( j ) then
41400: LD_VAR 0 3
41404: PPUSH
41405: CALL_OW 310
41409: IFFALSE 41420
// ComExitBuilding ( j ) ;
41411: LD_VAR 0 3
41415: PPUSH
41416: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
41420: LD_VAR 0 3
41424: PUSH
41425: LD_EXP 9
41429: PUSH
41430: LD_VAR 0 2
41434: ARRAY
41435: IN
41436: NOT
41437: IFFALSE 41495
// begin SetTag ( j , 101 ) ;
41439: LD_VAR 0 3
41443: PPUSH
41444: LD_INT 101
41446: PPUSH
41447: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
41451: LD_ADDR_EXP 9
41455: PUSH
41456: LD_EXP 9
41460: PPUSH
41461: LD_VAR 0 2
41465: PUSH
41466: LD_EXP 9
41470: PUSH
41471: LD_VAR 0 2
41475: ARRAY
41476: PUSH
41477: LD_INT 1
41479: PLUS
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PPUSH
41485: LD_VAR 0 3
41489: PPUSH
41490: CALL 7996 0 3
41494: ST_TO_ADDR
// end ; Wait ( 3 ) ;
41495: LD_INT 3
41497: PPUSH
41498: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
41502: LD_VAR 0 3
41506: PPUSH
41507: LD_EXP 8
41511: PUSH
41512: LD_VAR 0 2
41516: ARRAY
41517: PPUSH
41518: LD_VAR 0 3
41522: PPUSH
41523: CALL_OW 74
41527: PPUSH
41528: CALL_OW 130
// end ;
41532: GO 41339
41534: POP
41535: POP
// end ;
41536: GO 41170
41538: POP
41539: POP
// end ;
41540: LD_VAR 0 1
41544: RET
// export function MC_Heal ; var i , j , tmp ; begin
41545: LD_INT 0
41547: PPUSH
41548: PPUSH
41549: PPUSH
41550: PPUSH
// if not mc_bases then
41551: LD_EXP 7
41555: NOT
41556: IFFALSE 41560
// exit ;
41558: GO 41962
// for i = 1 to mc_bases do
41560: LD_ADDR_VAR 0 2
41564: PUSH
41565: DOUBLE
41566: LD_INT 1
41568: DEC
41569: ST_TO_ADDR
41570: LD_EXP 7
41574: PUSH
41575: FOR_TO
41576: IFFALSE 41960
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
41578: LD_EXP 10
41582: PUSH
41583: LD_VAR 0 2
41587: ARRAY
41588: PUSH
41589: LD_INT 1
41591: ARRAY
41592: NOT
41593: PUSH
41594: LD_EXP 10
41598: PUSH
41599: LD_VAR 0 2
41603: ARRAY
41604: PUSH
41605: LD_INT 2
41607: ARRAY
41608: NOT
41609: AND
41610: IFFALSE 41648
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
41612: LD_ADDR_EXP 11
41616: PUSH
41617: LD_EXP 11
41621: PPUSH
41622: LD_VAR 0 2
41626: PPUSH
41627: EMPTY
41628: PPUSH
41629: CALL_OW 1
41633: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
41634: LD_VAR 0 2
41638: PPUSH
41639: LD_INT 102
41641: PPUSH
41642: CALL 40373 0 2
// continue ;
41646: GO 41575
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
41648: LD_ADDR_VAR 0 4
41652: PUSH
41653: LD_EXP 7
41657: PUSH
41658: LD_VAR 0 2
41662: ARRAY
41663: PPUSH
41664: LD_INT 25
41666: PUSH
41667: LD_INT 4
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PPUSH
41674: CALL_OW 72
41678: ST_TO_ADDR
// if not tmp then
41679: LD_VAR 0 4
41683: NOT
41684: IFFALSE 41688
// continue ;
41686: GO 41575
// if mc_taming [ i ] then
41688: LD_EXP 37
41692: PUSH
41693: LD_VAR 0 2
41697: ARRAY
41698: IFFALSE 41722
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
41700: LD_ADDR_EXP 37
41704: PUSH
41705: LD_EXP 37
41709: PPUSH
41710: LD_VAR 0 2
41714: PPUSH
41715: EMPTY
41716: PPUSH
41717: CALL_OW 1
41721: ST_TO_ADDR
// for j in tmp do
41722: LD_ADDR_VAR 0 3
41726: PUSH
41727: LD_VAR 0 4
41731: PUSH
41732: FOR_IN
41733: IFFALSE 41956
// begin if IsInUnit ( j ) then
41735: LD_VAR 0 3
41739: PPUSH
41740: CALL_OW 310
41744: IFFALSE 41755
// ComExitBuilding ( j ) ;
41746: LD_VAR 0 3
41750: PPUSH
41751: CALL_OW 122
// if not j in mc_healers [ i ] then
41755: LD_VAR 0 3
41759: PUSH
41760: LD_EXP 11
41764: PUSH
41765: LD_VAR 0 2
41769: ARRAY
41770: IN
41771: NOT
41772: IFFALSE 41818
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
41774: LD_ADDR_EXP 11
41778: PUSH
41779: LD_EXP 11
41783: PPUSH
41784: LD_VAR 0 2
41788: PUSH
41789: LD_EXP 11
41793: PUSH
41794: LD_VAR 0 2
41798: ARRAY
41799: PUSH
41800: LD_INT 1
41802: PLUS
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PPUSH
41808: LD_VAR 0 3
41812: PPUSH
41813: CALL 7996 0 3
41817: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
41818: LD_VAR 0 3
41822: PPUSH
41823: CALL_OW 110
41827: PUSH
41828: LD_INT 102
41830: NONEQUAL
41831: IFFALSE 41845
// SetTag ( j , 102 ) ;
41833: LD_VAR 0 3
41837: PPUSH
41838: LD_INT 102
41840: PPUSH
41841: CALL_OW 109
// Wait ( 3 ) ;
41845: LD_INT 3
41847: PPUSH
41848: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
41852: LD_EXP 10
41856: PUSH
41857: LD_VAR 0 2
41861: ARRAY
41862: PUSH
41863: LD_INT 1
41865: ARRAY
41866: IFFALSE 41898
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
41868: LD_VAR 0 3
41872: PPUSH
41873: LD_EXP 10
41877: PUSH
41878: LD_VAR 0 2
41882: ARRAY
41883: PUSH
41884: LD_INT 1
41886: ARRAY
41887: PUSH
41888: LD_INT 1
41890: ARRAY
41891: PPUSH
41892: CALL_OW 128
41896: GO 41954
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
41898: LD_VAR 0 3
41902: PPUSH
41903: CALL_OW 314
41907: NOT
41908: PUSH
41909: LD_EXP 10
41913: PUSH
41914: LD_VAR 0 2
41918: ARRAY
41919: PUSH
41920: LD_INT 2
41922: ARRAY
41923: AND
41924: IFFALSE 41954
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
41926: LD_VAR 0 3
41930: PPUSH
41931: LD_EXP 10
41935: PUSH
41936: LD_VAR 0 2
41940: ARRAY
41941: PUSH
41942: LD_INT 2
41944: ARRAY
41945: PUSH
41946: LD_INT 1
41948: ARRAY
41949: PPUSH
41950: CALL_OW 128
// end ;
41954: GO 41732
41956: POP
41957: POP
// end ;
41958: GO 41575
41960: POP
41961: POP
// end ;
41962: LD_VAR 0 1
41966: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
41967: LD_INT 0
41969: PPUSH
41970: PPUSH
41971: PPUSH
41972: PPUSH
// if not mc_bases then
41973: LD_EXP 7
41977: NOT
41978: IFFALSE 41982
// exit ;
41980: GO 42879
// for i = 1 to mc_bases do
41982: LD_ADDR_VAR 0 2
41986: PUSH
41987: DOUBLE
41988: LD_INT 1
41990: DEC
41991: ST_TO_ADDR
41992: LD_EXP 7
41996: PUSH
41997: FOR_TO
41998: IFFALSE 42877
// begin if mc_scan [ i ] then
42000: LD_EXP 29
42004: PUSH
42005: LD_VAR 0 2
42009: ARRAY
42010: IFFALSE 42014
// continue ;
42012: GO 41997
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
42014: LD_EXP 12
42018: PUSH
42019: LD_VAR 0 2
42023: ARRAY
42024: NOT
42025: PUSH
42026: LD_EXP 14
42030: PUSH
42031: LD_VAR 0 2
42035: ARRAY
42036: NOT
42037: AND
42038: PUSH
42039: LD_EXP 13
42043: PUSH
42044: LD_VAR 0 2
42048: ARRAY
42049: AND
42050: IFFALSE 42088
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
42052: LD_ADDR_EXP 13
42056: PUSH
42057: LD_EXP 13
42061: PPUSH
42062: LD_VAR 0 2
42066: PPUSH
42067: EMPTY
42068: PPUSH
42069: CALL_OW 1
42073: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
42074: LD_VAR 0 2
42078: PPUSH
42079: LD_INT 103
42081: PPUSH
42082: CALL 40373 0 2
// continue ;
42086: GO 41997
// end ; if mc_construct_list [ i ] then
42088: LD_EXP 14
42092: PUSH
42093: LD_VAR 0 2
42097: ARRAY
42098: IFFALSE 42318
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
42100: LD_ADDR_VAR 0 4
42104: PUSH
42105: LD_EXP 7
42109: PUSH
42110: LD_VAR 0 2
42114: ARRAY
42115: PPUSH
42116: LD_INT 25
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PPUSH
42126: CALL_OW 72
42130: PUSH
42131: LD_EXP 9
42135: PUSH
42136: LD_VAR 0 2
42140: ARRAY
42141: DIFF
42142: ST_TO_ADDR
// if not tmp then
42143: LD_VAR 0 4
42147: NOT
42148: IFFALSE 42152
// continue ;
42150: GO 41997
// for j in tmp do
42152: LD_ADDR_VAR 0 3
42156: PUSH
42157: LD_VAR 0 4
42161: PUSH
42162: FOR_IN
42163: IFFALSE 42314
// begin if not mc_builders [ i ] then
42165: LD_EXP 13
42169: PUSH
42170: LD_VAR 0 2
42174: ARRAY
42175: NOT
42176: IFFALSE 42234
// begin SetTag ( j , 103 ) ;
42178: LD_VAR 0 3
42182: PPUSH
42183: LD_INT 103
42185: PPUSH
42186: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
42190: LD_ADDR_EXP 13
42194: PUSH
42195: LD_EXP 13
42199: PPUSH
42200: LD_VAR 0 2
42204: PUSH
42205: LD_EXP 13
42209: PUSH
42210: LD_VAR 0 2
42214: ARRAY
42215: PUSH
42216: LD_INT 1
42218: PLUS
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PPUSH
42224: LD_VAR 0 3
42228: PPUSH
42229: CALL 7996 0 3
42233: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
42234: LD_VAR 0 3
42238: PPUSH
42239: CALL_OW 310
42243: IFFALSE 42254
// ComExitBuilding ( j ) ;
42245: LD_VAR 0 3
42249: PPUSH
42250: CALL_OW 122
// wait ( 3 ) ;
42254: LD_INT 3
42256: PPUSH
42257: CALL_OW 67
// if not mc_construct_list [ i ] then
42261: LD_EXP 14
42265: PUSH
42266: LD_VAR 0 2
42270: ARRAY
42271: NOT
42272: IFFALSE 42276
// break ;
42274: GO 42314
// if not HasTask ( j ) then
42276: LD_VAR 0 3
42280: PPUSH
42281: CALL_OW 314
42285: NOT
42286: IFFALSE 42312
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
42288: LD_VAR 0 3
42292: PPUSH
42293: LD_EXP 14
42297: PUSH
42298: LD_VAR 0 2
42302: ARRAY
42303: PUSH
42304: LD_INT 1
42306: ARRAY
42307: PPUSH
42308: CALL 10402 0 2
// end ;
42312: GO 42162
42314: POP
42315: POP
// end else
42316: GO 42875
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
42318: LD_EXP 12
42322: PUSH
42323: LD_VAR 0 2
42327: ARRAY
42328: PUSH
42329: LD_EXP 7
42333: PUSH
42334: LD_VAR 0 2
42338: ARRAY
42339: PPUSH
42340: LD_INT 2
42342: PUSH
42343: LD_INT 30
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 30
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: LIST
42367: PPUSH
42368: CALL_OW 72
42372: AND
42373: IFFALSE 42875
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
42375: LD_EXP 7
42379: PUSH
42380: LD_VAR 0 2
42384: ARRAY
42385: PPUSH
42386: LD_INT 2
42388: PUSH
42389: LD_INT 30
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 30
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: LIST
42413: PPUSH
42414: CALL_OW 72
42418: PUSH
42419: LD_INT 1
42421: ARRAY
42422: PPUSH
42423: LD_EXP 12
42427: PUSH
42428: LD_VAR 0 2
42432: ARRAY
42433: PUSH
42434: LD_INT 1
42436: ARRAY
42437: PUSH
42438: LD_INT 1
42440: ARRAY
42441: PPUSH
42442: LD_EXP 12
42446: PUSH
42447: LD_VAR 0 2
42451: ARRAY
42452: PUSH
42453: LD_INT 1
42455: ARRAY
42456: PUSH
42457: LD_INT 2
42459: ARRAY
42460: PPUSH
42461: LD_EXP 12
42465: PUSH
42466: LD_VAR 0 2
42470: ARRAY
42471: PUSH
42472: LD_INT 1
42474: ARRAY
42475: PUSH
42476: LD_INT 3
42478: ARRAY
42479: PPUSH
42480: LD_EXP 12
42484: PUSH
42485: LD_VAR 0 2
42489: ARRAY
42490: PUSH
42491: LD_INT 1
42493: ARRAY
42494: PUSH
42495: LD_INT 4
42497: ARRAY
42498: PPUSH
42499: CALL 14506 0 5
42503: IFFALSE 42784
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
42505: LD_ADDR_VAR 0 4
42509: PUSH
42510: LD_EXP 7
42514: PUSH
42515: LD_VAR 0 2
42519: ARRAY
42520: PPUSH
42521: LD_INT 25
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PPUSH
42531: CALL_OW 72
42535: PUSH
42536: LD_EXP 9
42540: PUSH
42541: LD_VAR 0 2
42545: ARRAY
42546: DIFF
42547: ST_TO_ADDR
// if not tmp then
42548: LD_VAR 0 4
42552: NOT
42553: IFFALSE 42557
// continue ;
42555: GO 41997
// for j in tmp do
42557: LD_ADDR_VAR 0 3
42561: PUSH
42562: LD_VAR 0 4
42566: PUSH
42567: FOR_IN
42568: IFFALSE 42780
// begin if not mc_builders [ i ] then
42570: LD_EXP 13
42574: PUSH
42575: LD_VAR 0 2
42579: ARRAY
42580: NOT
42581: IFFALSE 42639
// begin SetTag ( j , 103 ) ;
42583: LD_VAR 0 3
42587: PPUSH
42588: LD_INT 103
42590: PPUSH
42591: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
42595: LD_ADDR_EXP 13
42599: PUSH
42600: LD_EXP 13
42604: PPUSH
42605: LD_VAR 0 2
42609: PUSH
42610: LD_EXP 13
42614: PUSH
42615: LD_VAR 0 2
42619: ARRAY
42620: PUSH
42621: LD_INT 1
42623: PLUS
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PPUSH
42629: LD_VAR 0 3
42633: PPUSH
42634: CALL 7996 0 3
42638: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
42639: LD_VAR 0 3
42643: PPUSH
42644: CALL_OW 310
42648: IFFALSE 42659
// ComExitBuilding ( j ) ;
42650: LD_VAR 0 3
42654: PPUSH
42655: CALL_OW 122
// wait ( 3 ) ;
42659: LD_INT 3
42661: PPUSH
42662: CALL_OW 67
// if not mc_build_list [ i ] then
42666: LD_EXP 12
42670: PUSH
42671: LD_VAR 0 2
42675: ARRAY
42676: NOT
42677: IFFALSE 42681
// break ;
42679: GO 42780
// if not HasTask ( j ) then
42681: LD_VAR 0 3
42685: PPUSH
42686: CALL_OW 314
42690: NOT
42691: IFFALSE 42778
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
42693: LD_VAR 0 3
42697: PPUSH
42698: LD_EXP 12
42702: PUSH
42703: LD_VAR 0 2
42707: ARRAY
42708: PUSH
42709: LD_INT 1
42711: ARRAY
42712: PUSH
42713: LD_INT 1
42715: ARRAY
42716: PPUSH
42717: LD_EXP 12
42721: PUSH
42722: LD_VAR 0 2
42726: ARRAY
42727: PUSH
42728: LD_INT 1
42730: ARRAY
42731: PUSH
42732: LD_INT 2
42734: ARRAY
42735: PPUSH
42736: LD_EXP 12
42740: PUSH
42741: LD_VAR 0 2
42745: ARRAY
42746: PUSH
42747: LD_INT 1
42749: ARRAY
42750: PUSH
42751: LD_INT 3
42753: ARRAY
42754: PPUSH
42755: LD_EXP 12
42759: PUSH
42760: LD_VAR 0 2
42764: ARRAY
42765: PUSH
42766: LD_INT 1
42768: ARRAY
42769: PUSH
42770: LD_INT 4
42772: ARRAY
42773: PPUSH
42774: CALL_OW 145
// end ;
42778: GO 42567
42780: POP
42781: POP
// end else
42782: GO 42875
// TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
42784: LD_EXP 7
42788: PUSH
42789: LD_VAR 0 2
42793: ARRAY
42794: PPUSH
42795: LD_EXP 12
42799: PUSH
42800: LD_VAR 0 2
42804: ARRAY
42805: PUSH
42806: LD_INT 1
42808: ARRAY
42809: PUSH
42810: LD_INT 1
42812: ARRAY
42813: PPUSH
42814: LD_EXP 12
42818: PUSH
42819: LD_VAR 0 2
42823: ARRAY
42824: PUSH
42825: LD_INT 1
42827: ARRAY
42828: PUSH
42829: LD_INT 2
42831: ARRAY
42832: PPUSH
42833: LD_EXP 12
42837: PUSH
42838: LD_VAR 0 2
42842: ARRAY
42843: PUSH
42844: LD_INT 1
42846: ARRAY
42847: PUSH
42848: LD_INT 3
42850: ARRAY
42851: PPUSH
42852: LD_EXP 12
42856: PUSH
42857: LD_VAR 0 2
42861: ARRAY
42862: PUSH
42863: LD_INT 1
42865: ARRAY
42866: PUSH
42867: LD_INT 4
42869: ARRAY
42870: PPUSH
42871: CALL 14190 0 5
// end ;
42875: GO 41997
42877: POP
42878: POP
// end ;
42879: LD_VAR 0 1
42883: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
42884: LD_INT 0
42886: PPUSH
42887: PPUSH
42888: PPUSH
42889: PPUSH
42890: PPUSH
42891: PPUSH
// if not mc_bases then
42892: LD_EXP 7
42896: NOT
42897: IFFALSE 42901
// exit ;
42899: GO 43282
// for i = 1 to mc_bases do
42901: LD_ADDR_VAR 0 2
42905: PUSH
42906: DOUBLE
42907: LD_INT 1
42909: DEC
42910: ST_TO_ADDR
42911: LD_EXP 7
42915: PUSH
42916: FOR_TO
42917: IFFALSE 43280
// begin tmp := mc_build_upgrade [ i ] ;
42919: LD_ADDR_VAR 0 4
42923: PUSH
42924: LD_EXP 38
42928: PUSH
42929: LD_VAR 0 2
42933: ARRAY
42934: ST_TO_ADDR
// lab := mc_lab [ i ] ;
42935: LD_ADDR_VAR 0 6
42939: PUSH
42940: LD_EXP 39
42944: PUSH
42945: LD_VAR 0 2
42949: ARRAY
42950: ST_TO_ADDR
// if not tmp and not lab then
42951: LD_VAR 0 4
42955: NOT
42956: PUSH
42957: LD_VAR 0 6
42961: NOT
42962: AND
42963: IFFALSE 42967
// continue ;
42965: GO 42916
// if tmp then
42967: LD_VAR 0 4
42971: IFFALSE 43091
// for j in tmp do
42973: LD_ADDR_VAR 0 3
42977: PUSH
42978: LD_VAR 0 4
42982: PUSH
42983: FOR_IN
42984: IFFALSE 43089
// begin if UpgradeCost ( j ) then
42986: LD_VAR 0 3
42990: PPUSH
42991: CALL 13850 0 1
42995: IFFALSE 43087
// begin ComUpgrade ( j ) ;
42997: LD_VAR 0 3
43001: PPUSH
43002: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
43006: LD_ADDR_EXP 38
43010: PUSH
43011: LD_EXP 38
43015: PPUSH
43016: LD_VAR 0 2
43020: PPUSH
43021: LD_EXP 38
43025: PUSH
43026: LD_VAR 0 2
43030: ARRAY
43031: PUSH
43032: LD_VAR 0 3
43036: DIFF
43037: PPUSH
43038: CALL_OW 1
43042: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
43043: LD_ADDR_EXP 14
43047: PUSH
43048: LD_EXP 14
43052: PPUSH
43053: LD_VAR 0 2
43057: PUSH
43058: LD_EXP 14
43062: PUSH
43063: LD_VAR 0 2
43067: ARRAY
43068: PUSH
43069: LD_INT 1
43071: PLUS
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PPUSH
43077: LD_VAR 0 3
43081: PPUSH
43082: CALL 7996 0 3
43086: ST_TO_ADDR
// end ; end ;
43087: GO 42983
43089: POP
43090: POP
// if not lab then
43091: LD_VAR 0 6
43095: NOT
43096: IFFALSE 43100
// continue ;
43098: GO 42916
// for j in lab do
43100: LD_ADDR_VAR 0 3
43104: PUSH
43105: LD_VAR 0 6
43109: PUSH
43110: FOR_IN
43111: IFFALSE 43276
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
43113: LD_VAR 0 3
43117: PPUSH
43118: CALL_OW 266
43122: PUSH
43123: LD_INT 6
43125: PUSH
43126: LD_INT 7
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: IN
43133: PUSH
43134: LD_VAR 0 3
43138: PPUSH
43139: CALL_OW 461
43143: PUSH
43144: LD_INT 1
43146: NONEQUAL
43147: AND
43148: IFFALSE 43274
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
43150: LD_VAR 0 3
43154: PPUSH
43155: LD_EXP 40
43159: PUSH
43160: LD_VAR 0 2
43164: ARRAY
43165: PUSH
43166: LD_INT 1
43168: ARRAY
43169: PPUSH
43170: CALL 14055 0 2
43174: IFFALSE 43274
// begin ComCancel ( j ) ;
43176: LD_VAR 0 3
43180: PPUSH
43181: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
43185: LD_VAR 0 3
43189: PPUSH
43190: LD_EXP 40
43194: PUSH
43195: LD_VAR 0 2
43199: ARRAY
43200: PUSH
43201: LD_INT 1
43203: ARRAY
43204: PPUSH
43205: CALL_OW 207
// if not j in mc_construct_list [ i ] then
43209: LD_VAR 0 3
43213: PUSH
43214: LD_EXP 14
43218: PUSH
43219: LD_VAR 0 2
43223: ARRAY
43224: IN
43225: NOT
43226: IFFALSE 43272
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
43228: LD_ADDR_EXP 14
43232: PUSH
43233: LD_EXP 14
43237: PPUSH
43238: LD_VAR 0 2
43242: PUSH
43243: LD_EXP 14
43247: PUSH
43248: LD_VAR 0 2
43252: ARRAY
43253: PUSH
43254: LD_INT 1
43256: PLUS
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PPUSH
43262: LD_VAR 0 3
43266: PPUSH
43267: CALL 7996 0 3
43271: ST_TO_ADDR
// break ;
43272: GO 43276
// end ; end ; end ;
43274: GO 43110
43276: POP
43277: POP
// end ;
43278: GO 42916
43280: POP
43281: POP
// end ;
43282: LD_VAR 0 1
43286: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
43287: LD_INT 0
43289: PPUSH
43290: PPUSH
43291: PPUSH
43292: PPUSH
43293: PPUSH
43294: PPUSH
43295: PPUSH
// if not mc_bases then
43296: LD_EXP 7
43300: NOT
43301: IFFALSE 43305
// exit ;
43303: GO 43601
// for i = 1 to mc_bases do
43305: LD_ADDR_VAR 0 2
43309: PUSH
43310: DOUBLE
43311: LD_INT 1
43313: DEC
43314: ST_TO_ADDR
43315: LD_EXP 7
43319: PUSH
43320: FOR_TO
43321: IFFALSE 43599
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
43323: LD_EXP 15
43327: PUSH
43328: LD_VAR 0 2
43332: ARRAY
43333: NOT
43334: PUSH
43335: LD_EXP 7
43339: PUSH
43340: LD_VAR 0 2
43344: ARRAY
43345: PPUSH
43346: LD_INT 30
43348: PUSH
43349: LD_INT 3
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PPUSH
43356: CALL_OW 72
43360: NOT
43361: OR
43362: IFFALSE 43366
// continue ;
43364: GO 43320
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
43366: LD_EXP 15
43370: PUSH
43371: LD_VAR 0 2
43375: ARRAY
43376: PUSH
43377: LD_INT 1
43379: ARRAY
43380: PPUSH
43381: CALL_OW 269
43385: IFFALSE 43451
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
43387: LD_ADDR_VAR 0 4
43391: PUSH
43392: LD_EXP 15
43396: PUSH
43397: LD_VAR 0 2
43401: ARRAY
43402: PPUSH
43403: LD_INT 1
43405: PPUSH
43406: CALL_OW 3
43410: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
43411: LD_ADDR_EXP 15
43415: PUSH
43416: LD_EXP 15
43420: PPUSH
43421: LD_VAR 0 2
43425: PPUSH
43426: LD_VAR 0 4
43430: PPUSH
43431: CALL_OW 1
43435: ST_TO_ADDR
// if not mc_turret_list [ i ] then
43436: LD_EXP 15
43440: PUSH
43441: LD_VAR 0 2
43445: ARRAY
43446: NOT
43447: IFFALSE 43451
// continue ;
43449: GO 43320
// end ; busy := false ;
43451: LD_ADDR_VAR 0 6
43455: PUSH
43456: LD_INT 0
43458: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
43459: LD_ADDR_VAR 0 4
43463: PUSH
43464: LD_EXP 7
43468: PUSH
43469: LD_VAR 0 2
43473: ARRAY
43474: PPUSH
43475: LD_INT 30
43477: PUSH
43478: LD_INT 3
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PPUSH
43485: CALL_OW 72
43489: ST_TO_ADDR
// for j in tmp do
43490: LD_ADDR_VAR 0 3
43494: PUSH
43495: LD_VAR 0 4
43499: PUSH
43500: FOR_IN
43501: IFFALSE 43529
// if not BuildingStatus ( j ) = bs_idle then
43503: LD_VAR 0 3
43507: PPUSH
43508: CALL_OW 461
43512: PUSH
43513: LD_INT 2
43515: EQUAL
43516: NOT
43517: IFFALSE 43527
// busy := true ;
43519: LD_ADDR_VAR 0 6
43523: PUSH
43524: LD_INT 1
43526: ST_TO_ADDR
43527: GO 43500
43529: POP
43530: POP
// if busy then
43531: LD_VAR 0 6
43535: IFFALSE 43539
// continue ;
43537: GO 43320
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
43539: LD_ADDR_VAR 0 7
43543: PUSH
43544: LD_EXP 15
43548: PUSH
43549: LD_VAR 0 2
43553: ARRAY
43554: PUSH
43555: LD_INT 1
43557: ARRAY
43558: PPUSH
43559: CALL 12298 0 1
43563: ST_TO_ADDR
// if not weapon then
43564: LD_VAR 0 7
43568: NOT
43569: IFFALSE 43573
// continue ;
43571: GO 43320
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
43573: LD_EXP 15
43577: PUSH
43578: LD_VAR 0 2
43582: ARRAY
43583: PUSH
43584: LD_INT 1
43586: ARRAY
43587: PPUSH
43588: LD_VAR 0 7
43592: PPUSH
43593: CALL_OW 148
// end ;
43597: GO 43320
43599: POP
43600: POP
// end ;
43601: LD_VAR 0 1
43605: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
43606: LD_INT 0
43608: PPUSH
43609: PPUSH
43610: PPUSH
43611: PPUSH
43612: PPUSH
43613: PPUSH
// if not mc_bases then
43614: LD_EXP 7
43618: NOT
43619: IFFALSE 43623
// exit ;
43621: GO 44608
// for i = 1 to mc_bases do
43623: LD_ADDR_VAR 0 2
43627: PUSH
43628: DOUBLE
43629: LD_INT 1
43631: DEC
43632: ST_TO_ADDR
43633: LD_EXP 7
43637: PUSH
43638: FOR_TO
43639: IFFALSE 44606
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
43641: LD_EXP 20
43645: PUSH
43646: LD_VAR 0 2
43650: ARRAY
43651: NOT
43652: PUSH
43653: LD_EXP 20
43657: PUSH
43658: LD_VAR 0 2
43662: ARRAY
43663: PUSH
43664: LD_EXP 21
43668: PUSH
43669: LD_VAR 0 2
43673: ARRAY
43674: EQUAL
43675: OR
43676: IFFALSE 43680
// continue ;
43678: GO 43638
// if mc_miners [ i ] then
43680: LD_EXP 21
43684: PUSH
43685: LD_VAR 0 2
43689: ARRAY
43690: IFFALSE 44293
// begin k := 1 ;
43692: LD_ADDR_VAR 0 4
43696: PUSH
43697: LD_INT 1
43699: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
43700: LD_ADDR_VAR 0 3
43704: PUSH
43705: DOUBLE
43706: LD_EXP 21
43710: PUSH
43711: LD_VAR 0 2
43715: ARRAY
43716: INC
43717: ST_TO_ADDR
43718: LD_INT 1
43720: PUSH
43721: FOR_DOWNTO
43722: IFFALSE 44291
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
43724: LD_EXP 21
43728: PUSH
43729: LD_VAR 0 2
43733: ARRAY
43734: PUSH
43735: LD_VAR 0 3
43739: ARRAY
43740: PPUSH
43741: CALL_OW 301
43745: IFFALSE 43808
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
43747: LD_ADDR_VAR 0 5
43751: PUSH
43752: LD_EXP 21
43756: PUSH
43757: LD_VAR 0 2
43761: ARRAY
43762: PUSH
43763: LD_EXP 21
43767: PUSH
43768: LD_VAR 0 2
43772: ARRAY
43773: PUSH
43774: LD_VAR 0 3
43778: ARRAY
43779: DIFF
43780: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
43781: LD_ADDR_EXP 21
43785: PUSH
43786: LD_EXP 21
43790: PPUSH
43791: LD_VAR 0 2
43795: PPUSH
43796: LD_VAR 0 5
43800: PPUSH
43801: CALL_OW 1
43805: ST_TO_ADDR
// continue ;
43806: GO 43721
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
43808: LD_EXP 21
43812: PUSH
43813: LD_VAR 0 2
43817: ARRAY
43818: PUSH
43819: LD_VAR 0 3
43823: ARRAY
43824: PPUSH
43825: CALL 7497 0 1
43829: PUSH
43830: LD_EXP 21
43834: PUSH
43835: LD_VAR 0 2
43839: ARRAY
43840: PUSH
43841: LD_VAR 0 3
43845: ARRAY
43846: PPUSH
43847: CALL_OW 255
43851: PPUSH
43852: LD_EXP 20
43856: PUSH
43857: LD_VAR 0 2
43861: ARRAY
43862: PUSH
43863: LD_VAR 0 4
43867: ARRAY
43868: PUSH
43869: LD_INT 1
43871: ARRAY
43872: PPUSH
43873: LD_EXP 20
43877: PUSH
43878: LD_VAR 0 2
43882: ARRAY
43883: PUSH
43884: LD_VAR 0 4
43888: ARRAY
43889: PUSH
43890: LD_INT 2
43892: ARRAY
43893: PPUSH
43894: LD_INT 15
43896: PPUSH
43897: CALL 8490 0 4
43901: PUSH
43902: LD_INT 4
43904: ARRAY
43905: PUSH
43906: LD_EXP 21
43910: PUSH
43911: LD_VAR 0 2
43915: ARRAY
43916: PUSH
43917: LD_VAR 0 3
43921: ARRAY
43922: PPUSH
43923: LD_INT 10
43925: PPUSH
43926: CALL 10187 0 2
43930: PUSH
43931: LD_INT 4
43933: ARRAY
43934: OR
43935: AND
43936: IFFALSE 43959
// ComStop ( mc_miners [ i ] [ j ] ) ;
43938: LD_EXP 21
43942: PUSH
43943: LD_VAR 0 2
43947: ARRAY
43948: PUSH
43949: LD_VAR 0 3
43953: ARRAY
43954: PPUSH
43955: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
43959: LD_EXP 21
43963: PUSH
43964: LD_VAR 0 2
43968: ARRAY
43969: PUSH
43970: LD_VAR 0 3
43974: ARRAY
43975: PPUSH
43976: CALL_OW 257
43980: PUSH
43981: LD_INT 1
43983: EQUAL
43984: PUSH
43985: LD_EXP 21
43989: PUSH
43990: LD_VAR 0 2
43994: ARRAY
43995: PUSH
43996: LD_VAR 0 3
44000: ARRAY
44001: PPUSH
44002: CALL_OW 459
44006: NOT
44007: AND
44008: PUSH
44009: LD_EXP 21
44013: PUSH
44014: LD_VAR 0 2
44018: ARRAY
44019: PUSH
44020: LD_VAR 0 3
44024: ARRAY
44025: PPUSH
44026: CALL_OW 255
44030: PPUSH
44031: LD_EXP 20
44035: PUSH
44036: LD_VAR 0 2
44040: ARRAY
44041: PUSH
44042: LD_VAR 0 4
44046: ARRAY
44047: PUSH
44048: LD_INT 1
44050: ARRAY
44051: PPUSH
44052: LD_EXP 20
44056: PUSH
44057: LD_VAR 0 2
44061: ARRAY
44062: PUSH
44063: LD_VAR 0 4
44067: ARRAY
44068: PUSH
44069: LD_INT 2
44071: ARRAY
44072: PPUSH
44073: LD_INT 15
44075: PPUSH
44076: CALL 8490 0 4
44080: PUSH
44081: LD_INT 4
44083: ARRAY
44084: PUSH
44085: LD_INT 0
44087: EQUAL
44088: AND
44089: PUSH
44090: LD_EXP 21
44094: PUSH
44095: LD_VAR 0 2
44099: ARRAY
44100: PUSH
44101: LD_VAR 0 3
44105: ARRAY
44106: PPUSH
44107: CALL_OW 314
44111: NOT
44112: AND
44113: IFFALSE 44289
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
44115: LD_EXP 21
44119: PUSH
44120: LD_VAR 0 2
44124: ARRAY
44125: PUSH
44126: LD_VAR 0 3
44130: ARRAY
44131: PPUSH
44132: CALL_OW 310
44136: IFFALSE 44159
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
44138: LD_EXP 21
44142: PUSH
44143: LD_VAR 0 2
44147: ARRAY
44148: PUSH
44149: LD_VAR 0 3
44153: ARRAY
44154: PPUSH
44155: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
44159: LD_EXP 21
44163: PUSH
44164: LD_VAR 0 2
44168: ARRAY
44169: PUSH
44170: LD_VAR 0 3
44174: ARRAY
44175: PPUSH
44176: CALL_OW 314
44180: NOT
44181: IFFALSE 44249
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
44183: LD_EXP 21
44187: PUSH
44188: LD_VAR 0 2
44192: ARRAY
44193: PUSH
44194: LD_VAR 0 3
44198: ARRAY
44199: PPUSH
44200: LD_EXP 20
44204: PUSH
44205: LD_VAR 0 2
44209: ARRAY
44210: PUSH
44211: LD_VAR 0 4
44215: ARRAY
44216: PUSH
44217: LD_INT 1
44219: ARRAY
44220: PPUSH
44221: LD_EXP 20
44225: PUSH
44226: LD_VAR 0 2
44230: ARRAY
44231: PUSH
44232: LD_VAR 0 4
44236: ARRAY
44237: PUSH
44238: LD_INT 2
44240: ARRAY
44241: PPUSH
44242: LD_INT 0
44244: PPUSH
44245: CALL_OW 193
// k := k + 1 ;
44249: LD_ADDR_VAR 0 4
44253: PUSH
44254: LD_VAR 0 4
44258: PUSH
44259: LD_INT 1
44261: PLUS
44262: ST_TO_ADDR
// if k > mc_mines [ i ] then
44263: LD_VAR 0 4
44267: PUSH
44268: LD_EXP 20
44272: PUSH
44273: LD_VAR 0 2
44277: ARRAY
44278: GREATER
44279: IFFALSE 44289
// k := 1 ;
44281: LD_ADDR_VAR 0 4
44285: PUSH
44286: LD_INT 1
44288: ST_TO_ADDR
// end ; end ;
44289: GO 43721
44291: POP
44292: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
44293: LD_ADDR_VAR 0 5
44297: PUSH
44298: LD_EXP 7
44302: PUSH
44303: LD_VAR 0 2
44307: ARRAY
44308: PPUSH
44309: LD_INT 2
44311: PUSH
44312: LD_INT 30
44314: PUSH
44315: LD_INT 4
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 30
44324: PUSH
44325: LD_INT 5
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 30
44334: PUSH
44335: LD_INT 32
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: PPUSH
44348: CALL_OW 72
44352: ST_TO_ADDR
// if not tmp then
44353: LD_VAR 0 5
44357: NOT
44358: IFFALSE 44362
// continue ;
44360: GO 43638
// list := [ ] ;
44362: LD_ADDR_VAR 0 6
44366: PUSH
44367: EMPTY
44368: ST_TO_ADDR
// for j in tmp do
44369: LD_ADDR_VAR 0 3
44373: PUSH
44374: LD_VAR 0 5
44378: PUSH
44379: FOR_IN
44380: IFFALSE 44449
// begin for k in UnitsInside ( j ) do
44382: LD_ADDR_VAR 0 4
44386: PUSH
44387: LD_VAR 0 3
44391: PPUSH
44392: CALL_OW 313
44396: PUSH
44397: FOR_IN
44398: IFFALSE 44445
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
44400: LD_VAR 0 4
44404: PPUSH
44405: CALL_OW 257
44409: PUSH
44410: LD_INT 1
44412: EQUAL
44413: PUSH
44414: LD_VAR 0 4
44418: PPUSH
44419: CALL_OW 459
44423: NOT
44424: AND
44425: IFFALSE 44443
// list := list ^ k ;
44427: LD_ADDR_VAR 0 6
44431: PUSH
44432: LD_VAR 0 6
44436: PUSH
44437: LD_VAR 0 4
44441: ADD
44442: ST_TO_ADDR
44443: GO 44397
44445: POP
44446: POP
// end ;
44447: GO 44379
44449: POP
44450: POP
// list := list diff mc_miners [ i ] ;
44451: LD_ADDR_VAR 0 6
44455: PUSH
44456: LD_VAR 0 6
44460: PUSH
44461: LD_EXP 21
44465: PUSH
44466: LD_VAR 0 2
44470: ARRAY
44471: DIFF
44472: ST_TO_ADDR
// if not list then
44473: LD_VAR 0 6
44477: NOT
44478: IFFALSE 44482
// continue ;
44480: GO 43638
// k := mc_mines [ i ] - mc_miners [ i ] ;
44482: LD_ADDR_VAR 0 4
44486: PUSH
44487: LD_EXP 20
44491: PUSH
44492: LD_VAR 0 2
44496: ARRAY
44497: PUSH
44498: LD_EXP 21
44502: PUSH
44503: LD_VAR 0 2
44507: ARRAY
44508: MINUS
44509: ST_TO_ADDR
// if k > list then
44510: LD_VAR 0 4
44514: PUSH
44515: LD_VAR 0 6
44519: GREATER
44520: IFFALSE 44532
// k := list ;
44522: LD_ADDR_VAR 0 4
44526: PUSH
44527: LD_VAR 0 6
44531: ST_TO_ADDR
// for j = 1 to k do
44532: LD_ADDR_VAR 0 3
44536: PUSH
44537: DOUBLE
44538: LD_INT 1
44540: DEC
44541: ST_TO_ADDR
44542: LD_VAR 0 4
44546: PUSH
44547: FOR_TO
44548: IFFALSE 44602
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
44550: LD_ADDR_EXP 21
44554: PUSH
44555: LD_EXP 21
44559: PPUSH
44560: LD_VAR 0 2
44564: PUSH
44565: LD_EXP 21
44569: PUSH
44570: LD_VAR 0 2
44574: ARRAY
44575: PUSH
44576: LD_INT 1
44578: PLUS
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PPUSH
44584: LD_VAR 0 6
44588: PUSH
44589: LD_VAR 0 3
44593: ARRAY
44594: PPUSH
44595: CALL 7996 0 3
44599: ST_TO_ADDR
44600: GO 44547
44602: POP
44603: POP
// end ;
44604: GO 43638
44606: POP
44607: POP
// end ;
44608: LD_VAR 0 1
44612: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
44613: LD_INT 0
44615: PPUSH
44616: PPUSH
44617: PPUSH
44618: PPUSH
44619: PPUSH
// if not mc_bases then
44620: LD_EXP 7
44624: NOT
44625: IFFALSE 44629
// exit ;
44627: GO 45429
// for i = 1 to mc_bases do
44629: LD_ADDR_VAR 0 2
44633: PUSH
44634: DOUBLE
44635: LD_INT 1
44637: DEC
44638: ST_TO_ADDR
44639: LD_EXP 7
44643: PUSH
44644: FOR_TO
44645: IFFALSE 45427
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
44647: LD_EXP 7
44651: PUSH
44652: LD_VAR 0 2
44656: ARRAY
44657: NOT
44658: PUSH
44659: LD_EXP 14
44663: PUSH
44664: LD_VAR 0 2
44668: ARRAY
44669: OR
44670: IFFALSE 44674
// continue ;
44672: GO 44644
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
44674: LD_EXP 23
44678: PUSH
44679: LD_VAR 0 2
44683: ARRAY
44684: NOT
44685: PUSH
44686: LD_EXP 24
44690: PUSH
44691: LD_VAR 0 2
44695: ARRAY
44696: AND
44697: IFFALSE 44735
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
44699: LD_ADDR_EXP 24
44703: PUSH
44704: LD_EXP 24
44708: PPUSH
44709: LD_VAR 0 2
44713: PPUSH
44714: EMPTY
44715: PPUSH
44716: CALL_OW 1
44720: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
44721: LD_VAR 0 2
44725: PPUSH
44726: LD_INT 107
44728: PPUSH
44729: CALL 40373 0 2
// continue ;
44733: GO 44644
// end ; target := [ ] ;
44735: LD_ADDR_VAR 0 5
44739: PUSH
44740: EMPTY
44741: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
44742: LD_ADDR_VAR 0 3
44746: PUSH
44747: DOUBLE
44748: LD_EXP 23
44752: PUSH
44753: LD_VAR 0 2
44757: ARRAY
44758: INC
44759: ST_TO_ADDR
44760: LD_INT 1
44762: PUSH
44763: FOR_DOWNTO
44764: IFFALSE 45024
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
44766: LD_EXP 23
44770: PUSH
44771: LD_VAR 0 2
44775: ARRAY
44776: PUSH
44777: LD_VAR 0 3
44781: ARRAY
44782: PUSH
44783: LD_INT 2
44785: ARRAY
44786: PPUSH
44787: LD_EXP 23
44791: PUSH
44792: LD_VAR 0 2
44796: ARRAY
44797: PUSH
44798: LD_VAR 0 3
44802: ARRAY
44803: PUSH
44804: LD_INT 3
44806: ARRAY
44807: PPUSH
44808: CALL_OW 488
44812: PUSH
44813: LD_EXP 23
44817: PUSH
44818: LD_VAR 0 2
44822: ARRAY
44823: PUSH
44824: LD_VAR 0 3
44828: ARRAY
44829: PUSH
44830: LD_INT 2
44832: ARRAY
44833: PPUSH
44834: LD_EXP 23
44838: PUSH
44839: LD_VAR 0 2
44843: ARRAY
44844: PUSH
44845: LD_VAR 0 3
44849: ARRAY
44850: PUSH
44851: LD_INT 3
44853: ARRAY
44854: PPUSH
44855: CALL_OW 284
44859: PUSH
44860: LD_INT 0
44862: EQUAL
44863: AND
44864: IFFALSE 44919
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
44866: LD_ADDR_VAR 0 4
44870: PUSH
44871: LD_EXP 23
44875: PUSH
44876: LD_VAR 0 2
44880: ARRAY
44881: PPUSH
44882: LD_VAR 0 3
44886: PPUSH
44887: CALL_OW 3
44891: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
44892: LD_ADDR_EXP 23
44896: PUSH
44897: LD_EXP 23
44901: PPUSH
44902: LD_VAR 0 2
44906: PPUSH
44907: LD_VAR 0 4
44911: PPUSH
44912: CALL_OW 1
44916: ST_TO_ADDR
// continue ;
44917: GO 44763
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
44919: LD_EXP 7
44923: PUSH
44924: LD_VAR 0 2
44928: ARRAY
44929: PUSH
44930: LD_INT 1
44932: ARRAY
44933: PPUSH
44934: CALL_OW 255
44938: PPUSH
44939: LD_EXP 23
44943: PUSH
44944: LD_VAR 0 2
44948: ARRAY
44949: PUSH
44950: LD_VAR 0 3
44954: ARRAY
44955: PUSH
44956: LD_INT 2
44958: ARRAY
44959: PPUSH
44960: LD_EXP 23
44964: PUSH
44965: LD_VAR 0 2
44969: ARRAY
44970: PUSH
44971: LD_VAR 0 3
44975: ARRAY
44976: PUSH
44977: LD_INT 3
44979: ARRAY
44980: PPUSH
44981: LD_INT 20
44983: PPUSH
44984: CALL 8490 0 4
44988: PUSH
44989: LD_INT 4
44991: ARRAY
44992: PUSH
44993: LD_INT 0
44995: EQUAL
44996: IFFALSE 45022
// begin target := mc_crates [ i ] [ j ] ;
44998: LD_ADDR_VAR 0 5
45002: PUSH
45003: LD_EXP 23
45007: PUSH
45008: LD_VAR 0 2
45012: ARRAY
45013: PUSH
45014: LD_VAR 0 3
45018: ARRAY
45019: ST_TO_ADDR
// break ;
45020: GO 45024
// end ; end ;
45022: GO 44763
45024: POP
45025: POP
// if not target then
45026: LD_VAR 0 5
45030: NOT
45031: IFFALSE 45035
// continue ;
45033: GO 44644
// if mc_crates_collector [ i ] < 5 then
45035: LD_EXP 24
45039: PUSH
45040: LD_VAR 0 2
45044: ARRAY
45045: PUSH
45046: LD_INT 5
45048: LESS
45049: IFFALSE 45241
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
45051: LD_ADDR_VAR 0 4
45055: PUSH
45056: LD_EXP 7
45060: PUSH
45061: LD_VAR 0 2
45065: ARRAY
45066: PUSH
45067: LD_EXP 35
45071: PUSH
45072: LD_VAR 0 2
45076: ARRAY
45077: UNION
45078: PPUSH
45079: LD_INT 2
45081: PUSH
45082: LD_INT 25
45084: PUSH
45085: LD_INT 2
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 25
45094: PUSH
45095: LD_INT 16
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 24
45109: PUSH
45110: LD_INT 750
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PPUSH
45121: CALL_OW 72
45125: ST_TO_ADDR
// if not tmp then
45126: LD_VAR 0 4
45130: NOT
45131: IFFALSE 45135
// continue ;
45133: GO 44644
// for j in tmp do
45135: LD_ADDR_VAR 0 3
45139: PUSH
45140: LD_VAR 0 4
45144: PUSH
45145: FOR_IN
45146: IFFALSE 45239
// if GetTag ( j ) = 0 then
45148: LD_VAR 0 3
45152: PPUSH
45153: CALL_OW 110
45157: PUSH
45158: LD_INT 0
45160: EQUAL
45161: IFFALSE 45237
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
45163: LD_ADDR_EXP 24
45167: PUSH
45168: LD_EXP 24
45172: PPUSH
45173: LD_VAR 0 2
45177: PUSH
45178: LD_EXP 24
45182: PUSH
45183: LD_VAR 0 2
45187: ARRAY
45188: PUSH
45189: LD_INT 1
45191: PLUS
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PPUSH
45197: LD_VAR 0 3
45201: PPUSH
45202: CALL 7996 0 3
45206: ST_TO_ADDR
// SetTag ( j , 107 ) ;
45207: LD_VAR 0 3
45211: PPUSH
45212: LD_INT 107
45214: PPUSH
45215: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
45219: LD_EXP 24
45223: PUSH
45224: LD_VAR 0 2
45228: ARRAY
45229: PUSH
45230: LD_INT 5
45232: GREATER
45233: IFFALSE 45237
// break ;
45235: GO 45239
// end ;
45237: GO 45145
45239: POP
45240: POP
// end ; if mc_crates_collector [ i ] and target then
45241: LD_EXP 24
45245: PUSH
45246: LD_VAR 0 2
45250: ARRAY
45251: PUSH
45252: LD_VAR 0 5
45256: AND
45257: IFFALSE 45425
// begin if mc_crates_collector [ i ] < target [ 1 ] then
45259: LD_EXP 24
45263: PUSH
45264: LD_VAR 0 2
45268: ARRAY
45269: PUSH
45270: LD_VAR 0 5
45274: PUSH
45275: LD_INT 1
45277: ARRAY
45278: LESS
45279: IFFALSE 45299
// tmp := mc_crates_collector [ i ] else
45281: LD_ADDR_VAR 0 4
45285: PUSH
45286: LD_EXP 24
45290: PUSH
45291: LD_VAR 0 2
45295: ARRAY
45296: ST_TO_ADDR
45297: GO 45313
// tmp := target [ 1 ] ;
45299: LD_ADDR_VAR 0 4
45303: PUSH
45304: LD_VAR 0 5
45308: PUSH
45309: LD_INT 1
45311: ARRAY
45312: ST_TO_ADDR
// for j = 1 to tmp do
45313: LD_ADDR_VAR 0 3
45317: PUSH
45318: DOUBLE
45319: LD_INT 1
45321: DEC
45322: ST_TO_ADDR
45323: LD_VAR 0 4
45327: PUSH
45328: FOR_TO
45329: IFFALSE 45423
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
45331: LD_EXP 24
45335: PUSH
45336: LD_VAR 0 2
45340: ARRAY
45341: PUSH
45342: LD_VAR 0 3
45346: ARRAY
45347: PPUSH
45348: CALL_OW 310
45352: IFFALSE 45375
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
45354: LD_EXP 24
45358: PUSH
45359: LD_VAR 0 2
45363: ARRAY
45364: PUSH
45365: LD_VAR 0 3
45369: ARRAY
45370: PPUSH
45371: CALL_OW 122
// wait ( 3 ) ;
45375: LD_INT 3
45377: PPUSH
45378: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
45382: LD_EXP 24
45386: PUSH
45387: LD_VAR 0 2
45391: ARRAY
45392: PUSH
45393: LD_VAR 0 3
45397: ARRAY
45398: PPUSH
45399: LD_VAR 0 5
45403: PUSH
45404: LD_INT 2
45406: ARRAY
45407: PPUSH
45408: LD_VAR 0 5
45412: PUSH
45413: LD_INT 3
45415: ARRAY
45416: PPUSH
45417: CALL_OW 117
// end ;
45421: GO 45328
45423: POP
45424: POP
// end ; end ;
45425: GO 44644
45427: POP
45428: POP
// end ;
45429: LD_VAR 0 1
45433: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
45434: LD_INT 0
45436: PPUSH
45437: PPUSH
45438: PPUSH
45439: PPUSH
// if not mc_bases then
45440: LD_EXP 7
45444: NOT
45445: IFFALSE 45449
// exit ;
45447: GO 45610
// for i = 1 to mc_bases do
45449: LD_ADDR_VAR 0 2
45453: PUSH
45454: DOUBLE
45455: LD_INT 1
45457: DEC
45458: ST_TO_ADDR
45459: LD_EXP 7
45463: PUSH
45464: FOR_TO
45465: IFFALSE 45608
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
45467: LD_ADDR_VAR 0 4
45471: PUSH
45472: LD_EXP 25
45476: PUSH
45477: LD_VAR 0 2
45481: ARRAY
45482: PUSH
45483: LD_EXP 28
45487: PUSH
45488: LD_VAR 0 2
45492: ARRAY
45493: ADD
45494: PPUSH
45495: LD_INT 33
45497: PUSH
45498: LD_INT 2
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PPUSH
45505: CALL_OW 72
45509: ST_TO_ADDR
// if tmp then
45510: LD_VAR 0 4
45514: IFFALSE 45606
// for j in tmp do
45516: LD_ADDR_VAR 0 3
45520: PUSH
45521: LD_VAR 0 4
45525: PUSH
45526: FOR_IN
45527: IFFALSE 45604
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
45529: LD_VAR 0 3
45533: PPUSH
45534: CALL_OW 312
45538: NOT
45539: PUSH
45540: LD_VAR 0 3
45544: PPUSH
45545: CALL_OW 256
45549: PUSH
45550: LD_INT 250
45552: GREATEREQUAL
45553: AND
45554: IFFALSE 45567
// Connect ( j ) else
45556: LD_VAR 0 3
45560: PPUSH
45561: CALL 10484 0 1
45565: GO 45602
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
45567: LD_VAR 0 3
45571: PPUSH
45572: CALL_OW 256
45576: PUSH
45577: LD_INT 250
45579: LESS
45580: PUSH
45581: LD_VAR 0 3
45585: PPUSH
45586: CALL_OW 312
45590: AND
45591: IFFALSE 45602
// ComUnlink ( j ) ;
45593: LD_VAR 0 3
45597: PPUSH
45598: CALL_OW 136
45602: GO 45526
45604: POP
45605: POP
// end ;
45606: GO 45464
45608: POP
45609: POP
// end ;
45610: LD_VAR 0 1
45614: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
45615: LD_INT 0
45617: PPUSH
45618: PPUSH
45619: PPUSH
45620: PPUSH
45621: PPUSH
// if not mc_bases then
45622: LD_EXP 7
45626: NOT
45627: IFFALSE 45631
// exit ;
45629: GO 46091
// for i = 1 to mc_bases do
45631: LD_ADDR_VAR 0 2
45635: PUSH
45636: DOUBLE
45637: LD_INT 1
45639: DEC
45640: ST_TO_ADDR
45641: LD_EXP 7
45645: PUSH
45646: FOR_TO
45647: IFFALSE 46089
// begin if not mc_produce [ i ] then
45649: LD_EXP 27
45653: PUSH
45654: LD_VAR 0 2
45658: ARRAY
45659: NOT
45660: IFFALSE 45664
// continue ;
45662: GO 45646
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
45664: LD_ADDR_VAR 0 5
45668: PUSH
45669: LD_EXP 7
45673: PUSH
45674: LD_VAR 0 2
45678: ARRAY
45679: PPUSH
45680: LD_INT 30
45682: PUSH
45683: LD_INT 3
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PPUSH
45690: CALL_OW 72
45694: ST_TO_ADDR
// if not fac then
45695: LD_VAR 0 5
45699: NOT
45700: IFFALSE 45704
// continue ;
45702: GO 45646
// for j in fac do
45704: LD_ADDR_VAR 0 3
45708: PUSH
45709: LD_VAR 0 5
45713: PUSH
45714: FOR_IN
45715: IFFALSE 46085
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
45717: LD_VAR 0 3
45721: PPUSH
45722: CALL_OW 461
45726: PUSH
45727: LD_INT 2
45729: NONEQUAL
45730: PUSH
45731: LD_VAR 0 3
45735: PPUSH
45736: LD_INT 15
45738: PPUSH
45739: CALL 10187 0 2
45743: PUSH
45744: LD_INT 4
45746: ARRAY
45747: OR
45748: PUSH
45749: LD_VAR 0 3
45753: PPUSH
45754: CALL_OW 313
45758: PUSH
45759: LD_INT 0
45761: EQUAL
45762: OR
45763: IFFALSE 45767
// continue ;
45765: GO 45714
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
45767: LD_VAR 0 3
45771: PPUSH
45772: LD_EXP 27
45776: PUSH
45777: LD_VAR 0 2
45781: ARRAY
45782: PUSH
45783: LD_INT 1
45785: ARRAY
45786: PUSH
45787: LD_INT 1
45789: ARRAY
45790: PPUSH
45791: LD_EXP 27
45795: PUSH
45796: LD_VAR 0 2
45800: ARRAY
45801: PUSH
45802: LD_INT 1
45804: ARRAY
45805: PUSH
45806: LD_INT 2
45808: ARRAY
45809: PPUSH
45810: LD_EXP 27
45814: PUSH
45815: LD_VAR 0 2
45819: ARRAY
45820: PUSH
45821: LD_INT 1
45823: ARRAY
45824: PUSH
45825: LD_INT 3
45827: ARRAY
45828: PPUSH
45829: LD_EXP 27
45833: PUSH
45834: LD_VAR 0 2
45838: ARRAY
45839: PUSH
45840: LD_INT 1
45842: ARRAY
45843: PUSH
45844: LD_INT 4
45846: ARRAY
45847: PPUSH
45848: CALL_OW 448
45852: PUSH
45853: LD_VAR 0 3
45857: PPUSH
45858: LD_EXP 27
45862: PUSH
45863: LD_VAR 0 2
45867: ARRAY
45868: PUSH
45869: LD_INT 1
45871: ARRAY
45872: PUSH
45873: LD_INT 1
45875: ARRAY
45876: PUSH
45877: LD_EXP 27
45881: PUSH
45882: LD_VAR 0 2
45886: ARRAY
45887: PUSH
45888: LD_INT 1
45890: ARRAY
45891: PUSH
45892: LD_INT 2
45894: ARRAY
45895: PUSH
45896: LD_EXP 27
45900: PUSH
45901: LD_VAR 0 2
45905: ARRAY
45906: PUSH
45907: LD_INT 1
45909: ARRAY
45910: PUSH
45911: LD_INT 3
45913: ARRAY
45914: PUSH
45915: LD_EXP 27
45919: PUSH
45920: LD_VAR 0 2
45924: ARRAY
45925: PUSH
45926: LD_INT 1
45928: ARRAY
45929: PUSH
45930: LD_INT 4
45932: ARRAY
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: PPUSH
45940: CALL 13689 0 2
45944: AND
45945: IFFALSE 46083
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
45947: LD_VAR 0 3
45951: PPUSH
45952: LD_EXP 27
45956: PUSH
45957: LD_VAR 0 2
45961: ARRAY
45962: PUSH
45963: LD_INT 1
45965: ARRAY
45966: PUSH
45967: LD_INT 1
45969: ARRAY
45970: PPUSH
45971: LD_EXP 27
45975: PUSH
45976: LD_VAR 0 2
45980: ARRAY
45981: PUSH
45982: LD_INT 1
45984: ARRAY
45985: PUSH
45986: LD_INT 2
45988: ARRAY
45989: PPUSH
45990: LD_EXP 27
45994: PUSH
45995: LD_VAR 0 2
45999: ARRAY
46000: PUSH
46001: LD_INT 1
46003: ARRAY
46004: PUSH
46005: LD_INT 3
46007: ARRAY
46008: PPUSH
46009: LD_EXP 27
46013: PUSH
46014: LD_VAR 0 2
46018: ARRAY
46019: PUSH
46020: LD_INT 1
46022: ARRAY
46023: PUSH
46024: LD_INT 4
46026: ARRAY
46027: PPUSH
46028: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
46032: LD_ADDR_VAR 0 4
46036: PUSH
46037: LD_EXP 27
46041: PUSH
46042: LD_VAR 0 2
46046: ARRAY
46047: PPUSH
46048: LD_INT 1
46050: PPUSH
46051: CALL_OW 3
46055: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
46056: LD_ADDR_EXP 27
46060: PUSH
46061: LD_EXP 27
46065: PPUSH
46066: LD_VAR 0 2
46070: PPUSH
46071: LD_VAR 0 4
46075: PPUSH
46076: CALL_OW 1
46080: ST_TO_ADDR
// break ;
46081: GO 46085
// end ; end ;
46083: GO 45714
46085: POP
46086: POP
// end ;
46087: GO 45646
46089: POP
46090: POP
// end ;
46091: LD_VAR 0 1
46095: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
46096: LD_INT 0
46098: PPUSH
46099: PPUSH
46100: PPUSH
// if not mc_bases then
46101: LD_EXP 7
46105: NOT
46106: IFFALSE 46110
// exit ;
46108: GO 46199
// for i = 1 to mc_bases do
46110: LD_ADDR_VAR 0 2
46114: PUSH
46115: DOUBLE
46116: LD_INT 1
46118: DEC
46119: ST_TO_ADDR
46120: LD_EXP 7
46124: PUSH
46125: FOR_TO
46126: IFFALSE 46197
// begin if mc_attack [ i ] then
46128: LD_EXP 26
46132: PUSH
46133: LD_VAR 0 2
46137: ARRAY
46138: IFFALSE 46195
// begin tmp := mc_attack [ i ] [ 1 ] ;
46140: LD_ADDR_VAR 0 3
46144: PUSH
46145: LD_EXP 26
46149: PUSH
46150: LD_VAR 0 2
46154: ARRAY
46155: PUSH
46156: LD_INT 1
46158: ARRAY
46159: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
46160: LD_ADDR_EXP 26
46164: PUSH
46165: LD_EXP 26
46169: PPUSH
46170: LD_VAR 0 2
46174: PPUSH
46175: EMPTY
46176: PPUSH
46177: CALL_OW 1
46181: ST_TO_ADDR
// Attack ( tmp ) ;
46182: LD_VAR 0 3
46186: PPUSH
46187: CALL 35336 0 1
// exit ;
46191: POP
46192: POP
46193: GO 46199
// end ; end ;
46195: GO 46125
46197: POP
46198: POP
// end ;
46199: LD_VAR 0 1
46203: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
46204: LD_INT 0
46206: PPUSH
46207: PPUSH
46208: PPUSH
46209: PPUSH
46210: PPUSH
46211: PPUSH
46212: PPUSH
// if not mc_bases then
46213: LD_EXP 7
46217: NOT
46218: IFFALSE 46222
// exit ;
46220: GO 46567
// class := AllowSpecClass ( mc_defender [ 1 ] ) ;
46222: LD_ADDR_VAR 0 7
46226: PUSH
46227: LD_EXP 28
46231: PUSH
46232: LD_INT 1
46234: ARRAY
46235: PPUSH
46236: CALL 4501 0 1
46240: ST_TO_ADDR
// for i = 1 to mc_bases do
46241: LD_ADDR_VAR 0 2
46245: PUSH
46246: DOUBLE
46247: LD_INT 1
46249: DEC
46250: ST_TO_ADDR
46251: LD_EXP 7
46255: PUSH
46256: FOR_TO
46257: IFFALSE 46565
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ 1 ] ) , mc_scan_area [ i ] ) ) ;
46259: LD_ADDR_EXP 29
46263: PUSH
46264: LD_EXP 29
46268: PPUSH
46269: LD_VAR 0 2
46273: PPUSH
46274: LD_EXP 7
46278: PUSH
46279: LD_INT 1
46281: ARRAY
46282: PPUSH
46283: CALL_OW 255
46287: PPUSH
46288: LD_EXP 31
46292: PUSH
46293: LD_VAR 0 2
46297: ARRAY
46298: PPUSH
46299: CALL 2959 0 2
46303: PPUSH
46304: CALL_OW 1
46308: ST_TO_ADDR
// if not mc_scan [ i ] then
46309: LD_EXP 29
46313: PUSH
46314: LD_VAR 0 2
46318: ARRAY
46319: NOT
46320: IFFALSE 46472
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
46322: LD_ADDR_VAR 0 4
46326: PUSH
46327: LD_EXP 7
46331: PUSH
46332: LD_VAR 0 2
46336: ARRAY
46337: PPUSH
46338: LD_INT 2
46340: PUSH
46341: LD_INT 25
46343: PUSH
46344: LD_INT 5
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 25
46353: PUSH
46354: LD_INT 8
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 25
46363: PUSH
46364: LD_INT 9
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: PPUSH
46377: CALL_OW 72
46381: ST_TO_ADDR
// if not tmp then
46382: LD_VAR 0 4
46386: NOT
46387: IFFALSE 46391
// continue ;
46389: GO 46256
// for j in tmp do
46391: LD_ADDR_VAR 0 3
46395: PUSH
46396: LD_VAR 0 4
46400: PUSH
46401: FOR_IN
46402: IFFALSE 46470
// if GetBType ( IsInUnit ( j ) ) in [ b_barracks ] and GetClass ( j ) = 1 and not MineOfUnit ( j ) then
46404: LD_VAR 0 3
46408: PPUSH
46409: CALL_OW 310
46413: PPUSH
46414: CALL_OW 266
46418: PUSH
46419: LD_INT 5
46421: PUSH
46422: EMPTY
46423: LIST
46424: IN
46425: PUSH
46426: LD_VAR 0 3
46430: PPUSH
46431: CALL_OW 257
46435: PUSH
46436: LD_INT 1
46438: EQUAL
46439: AND
46440: PUSH
46441: LD_VAR 0 3
46445: PPUSH
46446: CALL_OW 459
46450: NOT
46451: AND
46452: IFFALSE 46468
// ComChangeProfession ( j , class ) ;
46454: LD_VAR 0 3
46458: PPUSH
46459: LD_VAR 0 7
46463: PPUSH
46464: CALL_OW 123
46468: GO 46401
46470: POP
46471: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
46472: LD_EXP 29
46476: PUSH
46477: LD_VAR 0 2
46481: ARRAY
46482: PUSH
46483: LD_EXP 28
46487: PUSH
46488: LD_VAR 0 2
46492: ARRAY
46493: AND
46494: IFFALSE 46563
// begin tmp := mc_defender [ i ] ;
46496: LD_ADDR_VAR 0 4
46500: PUSH
46501: LD_EXP 28
46505: PUSH
46506: LD_VAR 0 2
46510: ARRAY
46511: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
46512: LD_ADDR_EXP 28
46516: PUSH
46517: LD_EXP 28
46521: PPUSH
46522: LD_VAR 0 2
46526: PPUSH
46527: EMPTY
46528: PPUSH
46529: CALL_OW 1
46533: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
46534: LD_VAR 0 2
46538: PPUSH
46539: LD_VAR 0 4
46543: PPUSH
46544: LD_EXP 29
46548: PUSH
46549: LD_VAR 0 2
46553: ARRAY
46554: PPUSH
46555: CALL 2994 0 3
// exit ;
46559: POP
46560: POP
46561: GO 46567
// end ; end ;
46563: GO 46256
46565: POP
46566: POP
// end ;
46567: LD_VAR 0 1
46571: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tech_temp , tmp2 ; begin
46572: LD_INT 0
46574: PPUSH
46575: PPUSH
46576: PPUSH
46577: PPUSH
46578: PPUSH
46579: PPUSH
46580: PPUSH
46581: PPUSH
46582: PPUSH
46583: PPUSH
// if not mc_bases then
46584: LD_EXP 7
46588: NOT
46589: IFFALSE 46593
// exit ;
46591: GO 47431
// for i = 1 to mc_bases do
46593: LD_ADDR_VAR 0 2
46597: PUSH
46598: DOUBLE
46599: LD_INT 1
46601: DEC
46602: ST_TO_ADDR
46603: LD_EXP 7
46607: PUSH
46608: FOR_TO
46609: IFFALSE 47429
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
46611: LD_ADDR_VAR 0 6
46615: PUSH
46616: LD_EXP 7
46620: PUSH
46621: LD_VAR 0 2
46625: ARRAY
46626: PPUSH
46627: LD_INT 2
46629: PUSH
46630: LD_INT 30
46632: PUSH
46633: LD_INT 6
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 30
46642: PUSH
46643: LD_INT 7
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 30
46652: PUSH
46653: LD_INT 8
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: PPUSH
46666: CALL_OW 72
46670: ST_TO_ADDR
// if not tmp then
46671: LD_VAR 0 6
46675: NOT
46676: IFFALSE 46680
// continue ;
46678: GO 46608
// for j in tmp do
46680: LD_ADDR_VAR 0 3
46684: PUSH
46685: LD_VAR 0 6
46689: PUSH
46690: FOR_IN
46691: IFFALSE 47425
// begin side := GetSide ( j ) ;
46693: LD_ADDR_VAR 0 4
46697: PUSH
46698: LD_VAR 0 3
46702: PPUSH
46703: CALL_OW 255
46707: ST_TO_ADDR
// if not mc_tech [ side ] then
46708: LD_EXP 33
46712: PUSH
46713: LD_VAR 0 4
46717: ARRAY
46718: NOT
46719: IFFALSE 46723
// continue ;
46721: GO 46690
// if BuildingStatus ( j ) = bs_idle then
46723: LD_VAR 0 3
46727: PPUSH
46728: CALL_OW 461
46732: PUSH
46733: LD_INT 2
46735: EQUAL
46736: IFFALSE 46793
// for t in mc_tech [ side ] do
46738: LD_ADDR_VAR 0 5
46742: PUSH
46743: LD_EXP 33
46747: PUSH
46748: LD_VAR 0 4
46752: ARRAY
46753: PUSH
46754: FOR_IN
46755: IFFALSE 46791
// if CanBeResearched ( j , t ) then
46757: LD_VAR 0 3
46761: PPUSH
46762: LD_VAR 0 5
46766: PPUSH
46767: CALL_OW 430
46771: IFFALSE 46789
// begin ComResearch ( j , t ) ;
46773: LD_VAR 0 3
46777: PPUSH
46778: LD_VAR 0 5
46782: PPUSH
46783: CALL_OW 124
// break ;
46787: GO 46791
// end ;
46789: GO 46754
46791: POP
46792: POP
// if BuildingStatus ( j ) = bs_need_ape then
46793: LD_VAR 0 3
46797: PPUSH
46798: CALL_OW 461
46802: PUSH
46803: LD_INT 10
46805: EQUAL
46806: IFFALSE 47260
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
46808: LD_EXP 35
46812: PUSH
46813: LD_VAR 0 2
46817: ARRAY
46818: NOT
46819: PUSH
46820: LD_EXP 36
46824: PUSH
46825: LD_VAR 0 2
46829: ARRAY
46830: NOT
46831: AND
46832: PUSH
46833: LD_EXP 33
46837: PUSH
46838: LD_VAR 0 4
46842: ARRAY
46843: PUSH
46844: LD_INT 1
46846: GREATER
46847: AND
46848: IFFALSE 46924
// begin ComCancel ( j ) ;
46850: LD_VAR 0 3
46854: PPUSH
46855: CALL_OW 127
// tech_temp := Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ;
46859: LD_ADDR_VAR 0 9
46863: PUSH
46864: LD_EXP 33
46868: PUSH
46869: LD_VAR 0 4
46873: ARRAY
46874: PPUSH
46875: LD_EXP 33
46879: PUSH
46880: LD_VAR 0 4
46884: ARRAY
46885: PPUSH
46886: LD_INT 1
46888: PPUSH
46889: LD_INT 0
46891: PPUSH
46892: CALL 6979 0 4
46896: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , tech_temp ) ;
46897: LD_ADDR_EXP 33
46901: PUSH
46902: LD_EXP 33
46906: PPUSH
46907: LD_VAR 0 4
46911: PPUSH
46912: LD_VAR 0 9
46916: PPUSH
46917: CALL_OW 1
46921: ST_TO_ADDR
// continue ;
46922: GO 46690
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
46924: LD_EXP 35
46928: PUSH
46929: LD_VAR 0 2
46933: ARRAY
46934: PUSH
46935: LD_EXP 36
46939: PUSH
46940: LD_VAR 0 2
46944: ARRAY
46945: NOT
46946: AND
46947: IFFALSE 47128
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
46949: LD_ADDR_EXP 36
46953: PUSH
46954: LD_EXP 36
46958: PPUSH
46959: LD_VAR 0 2
46963: PUSH
46964: LD_EXP 36
46968: PUSH
46969: LD_VAR 0 2
46973: ARRAY
46974: PUSH
46975: LD_INT 1
46977: PLUS
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PPUSH
46983: LD_EXP 35
46987: PUSH
46988: LD_VAR 0 2
46992: ARRAY
46993: PUSH
46994: LD_INT 1
46996: ARRAY
46997: PPUSH
46998: CALL 7996 0 3
47002: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
47003: LD_EXP 35
47007: PUSH
47008: LD_VAR 0 2
47012: ARRAY
47013: PUSH
47014: LD_INT 1
47016: ARRAY
47017: PPUSH
47018: LD_INT 112
47020: PPUSH
47021: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
47025: LD_ADDR_VAR 0 10
47029: PUSH
47030: LD_EXP 35
47034: PUSH
47035: LD_VAR 0 2
47039: ARRAY
47040: PPUSH
47041: LD_INT 1
47043: PPUSH
47044: CALL_OW 3
47048: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
47049: LD_ADDR_EXP 35
47053: PUSH
47054: LD_EXP 35
47058: PPUSH
47059: LD_VAR 0 2
47063: PPUSH
47064: LD_VAR 0 10
47068: PPUSH
47069: CALL_OW 1
47073: ST_TO_ADDR
// tmp2 := UnitsInside ( j ) ;
47074: LD_ADDR_VAR 0 10
47078: PUSH
47079: LD_VAR 0 3
47083: PPUSH
47084: CALL_OW 313
47088: ST_TO_ADDR
// if tmp2 = 6 then
47089: LD_VAR 0 10
47093: PUSH
47094: LD_INT 6
47096: EQUAL
47097: IFFALSE 47128
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
47099: LD_VAR 0 10
47103: PUSH
47104: LD_INT 1
47106: ARRAY
47107: PPUSH
47108: LD_INT 112
47110: PPUSH
47111: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
47115: LD_VAR 0 10
47119: PUSH
47120: LD_INT 1
47122: ARRAY
47123: PPUSH
47124: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) in mc_lab [ i ] then
47128: LD_EXP 36
47132: PUSH
47133: LD_VAR 0 2
47137: ARRAY
47138: PUSH
47139: LD_EXP 36
47143: PUSH
47144: LD_VAR 0 2
47148: ARRAY
47149: PUSH
47150: LD_INT 1
47152: ARRAY
47153: PPUSH
47154: CALL_OW 314
47158: NOT
47159: AND
47160: PUSH
47161: LD_EXP 36
47165: PUSH
47166: LD_VAR 0 2
47170: ARRAY
47171: PUSH
47172: LD_INT 1
47174: ARRAY
47175: PPUSH
47176: CALL_OW 310
47180: PUSH
47181: LD_EXP 39
47185: PUSH
47186: LD_VAR 0 2
47190: ARRAY
47191: IN
47192: NOT
47193: AND
47194: IFFALSE 47260
// begin if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
47196: LD_EXP 36
47200: PUSH
47201: LD_VAR 0 2
47205: ARRAY
47206: PUSH
47207: LD_INT 1
47209: ARRAY
47210: PPUSH
47211: CALL_OW 310
47215: IFFALSE 47236
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
47217: LD_EXP 36
47221: PUSH
47222: LD_VAR 0 2
47226: ARRAY
47227: PUSH
47228: LD_INT 1
47230: ARRAY
47231: PPUSH
47232: CALL_OW 122
// AddComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
47236: LD_EXP 36
47240: PUSH
47241: LD_VAR 0 2
47245: ARRAY
47246: PUSH
47247: LD_INT 1
47249: ARRAY
47250: PPUSH
47251: LD_VAR 0 3
47255: PPUSH
47256: CALL_OW 180
// end ; end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
47260: LD_VAR 0 3
47264: PPUSH
47265: CALL_OW 461
47269: PUSH
47270: LD_INT 6
47272: EQUAL
47273: PUSH
47274: LD_VAR 0 6
47278: PUSH
47279: LD_INT 1
47281: GREATER
47282: AND
47283: IFFALSE 47423
// begin sci := [ ] ;
47285: LD_ADDR_VAR 0 8
47289: PUSH
47290: EMPTY
47291: ST_TO_ADDR
// for x in tmp diff j do
47292: LD_ADDR_VAR 0 7
47296: PUSH
47297: LD_VAR 0 6
47301: PUSH
47302: LD_VAR 0 3
47306: DIFF
47307: PUSH
47308: FOR_IN
47309: IFFALSE 47349
// begin if BuildingStatus ( x ) = bs_idle then
47311: LD_VAR 0 7
47315: PPUSH
47316: CALL_OW 461
47320: PUSH
47321: LD_INT 2
47323: EQUAL
47324: IFFALSE 47347
// sci := sci ^ UnitsInside ( x ) ;
47326: LD_ADDR_VAR 0 8
47330: PUSH
47331: LD_VAR 0 8
47335: PUSH
47336: LD_VAR 0 7
47340: PPUSH
47341: CALL_OW 313
47345: ADD
47346: ST_TO_ADDR
// end ;
47347: GO 47308
47349: POP
47350: POP
// if not sci then
47351: LD_VAR 0 8
47355: NOT
47356: IFFALSE 47360
// continue ;
47358: GO 46690
// for x in sci do
47360: LD_ADDR_VAR 0 7
47364: PUSH
47365: LD_VAR 0 8
47369: PUSH
47370: FOR_IN
47371: IFFALSE 47421
// if IsInUnit ( x ) and not HasTask ( x ) then
47373: LD_VAR 0 7
47377: PPUSH
47378: CALL_OW 310
47382: PUSH
47383: LD_VAR 0 7
47387: PPUSH
47388: CALL_OW 314
47392: NOT
47393: AND
47394: IFFALSE 47419
// begin ComExitBuilding ( x ) ;
47396: LD_VAR 0 7
47400: PPUSH
47401: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
47405: LD_VAR 0 7
47409: PPUSH
47410: LD_VAR 0 3
47414: PPUSH
47415: CALL_OW 180
// end ;
47419: GO 47370
47421: POP
47422: POP
// end ; end ;
47423: GO 46690
47425: POP
47426: POP
// end ;
47427: GO 46608
47429: POP
47430: POP
// end ;
47431: LD_VAR 0 1
47435: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
47436: LD_INT 0
47438: PPUSH
47439: PPUSH
47440: PPUSH
47441: PPUSH
47442: PPUSH
47443: PPUSH
// if not mc_bases then
47444: LD_EXP 7
47448: NOT
47449: IFFALSE 47453
// exit ;
47451: GO 47692
// for i = 1 to 8 do
47453: LD_ADDR_VAR 0 2
47457: PUSH
47458: DOUBLE
47459: LD_INT 1
47461: DEC
47462: ST_TO_ADDR
47463: LD_INT 8
47465: PUSH
47466: FOR_TO
47467: IFFALSE 47493
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
47469: LD_ADDR_EXP 33
47473: PUSH
47474: LD_EXP 33
47478: PPUSH
47479: LD_VAR 0 2
47483: PPUSH
47484: EMPTY
47485: PPUSH
47486: CALL_OW 1
47490: ST_TO_ADDR
47491: GO 47466
47493: POP
47494: POP
// tmp := [ ] ;
47495: LD_ADDR_VAR 0 5
47499: PUSH
47500: EMPTY
47501: ST_TO_ADDR
// for i = 1 to mc_sides do
47502: LD_ADDR_VAR 0 2
47506: PUSH
47507: DOUBLE
47508: LD_INT 1
47510: DEC
47511: ST_TO_ADDR
47512: LD_EXP 32
47516: PUSH
47517: FOR_TO
47518: IFFALSE 47576
// if not mc_sides [ i ] in tmp then
47520: LD_EXP 32
47524: PUSH
47525: LD_VAR 0 2
47529: ARRAY
47530: PUSH
47531: LD_VAR 0 5
47535: IN
47536: NOT
47537: IFFALSE 47574
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
47539: LD_ADDR_VAR 0 5
47543: PUSH
47544: LD_VAR 0 5
47548: PPUSH
47549: LD_VAR 0 5
47553: PUSH
47554: LD_INT 1
47556: PLUS
47557: PPUSH
47558: LD_EXP 32
47562: PUSH
47563: LD_VAR 0 2
47567: ARRAY
47568: PPUSH
47569: CALL_OW 2
47573: ST_TO_ADDR
47574: GO 47517
47576: POP
47577: POP
// if not tmp then
47578: LD_VAR 0 5
47582: NOT
47583: IFFALSE 47587
// exit ;
47585: GO 47692
// for j in tmp do
47587: LD_ADDR_VAR 0 3
47591: PUSH
47592: LD_VAR 0 5
47596: PUSH
47597: FOR_IN
47598: IFFALSE 47690
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
47600: LD_ADDR_VAR 0 6
47604: PUSH
47605: LD_INT 22
47607: PUSH
47608: LD_VAR 0 3
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PPUSH
47617: CALL_OW 69
47621: ST_TO_ADDR
// if not un then
47622: LD_VAR 0 6
47626: NOT
47627: IFFALSE 47631
// continue ;
47629: GO 47597
// nation := GetNation ( un [ 1 ] ) ;
47631: LD_ADDR_VAR 0 4
47635: PUSH
47636: LD_VAR 0 6
47640: PUSH
47641: LD_INT 1
47643: ARRAY
47644: PPUSH
47645: CALL_OW 248
47649: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
47650: LD_ADDR_EXP 33
47654: PUSH
47655: LD_EXP 33
47659: PPUSH
47660: LD_VAR 0 3
47664: PPUSH
47665: LD_VAR 0 3
47669: PPUSH
47670: LD_VAR 0 4
47674: PPUSH
47675: LD_INT 1
47677: PPUSH
47678: CALL 1521 0 3
47682: PPUSH
47683: CALL_OW 1
47687: ST_TO_ADDR
// end ;
47688: GO 47597
47690: POP
47691: POP
// end ;
47692: LD_VAR 0 1
47696: RET
// export function MC_InitSides ( ) ; var i ; begin
47697: LD_INT 0
47699: PPUSH
47700: PPUSH
// if not mc_bases then
47701: LD_EXP 7
47705: NOT
47706: IFFALSE 47710
// exit ;
47708: GO 47784
// for i = 1 to mc_bases do
47710: LD_ADDR_VAR 0 2
47714: PUSH
47715: DOUBLE
47716: LD_INT 1
47718: DEC
47719: ST_TO_ADDR
47720: LD_EXP 7
47724: PUSH
47725: FOR_TO
47726: IFFALSE 47782
// if mc_bases [ i ] then
47728: LD_EXP 7
47732: PUSH
47733: LD_VAR 0 2
47737: ARRAY
47738: IFFALSE 47780
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
47740: LD_ADDR_EXP 32
47744: PUSH
47745: LD_EXP 32
47749: PPUSH
47750: LD_VAR 0 2
47754: PPUSH
47755: LD_EXP 7
47759: PUSH
47760: LD_VAR 0 2
47764: ARRAY
47765: PUSH
47766: LD_INT 1
47768: ARRAY
47769: PPUSH
47770: CALL_OW 255
47774: PPUSH
47775: CALL_OW 1
47779: ST_TO_ADDR
47780: GO 47725
47782: POP
47783: POP
// end ;
47784: LD_VAR 0 1
47788: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
47789: LD_INT 0
47791: PPUSH
47792: PPUSH
47793: PPUSH
47794: PPUSH
47795: PPUSH
47796: PPUSH
47797: PPUSH
47798: PPUSH
// if not mc_bases then
47799: LD_EXP 7
47803: NOT
47804: IFFALSE 47808
// exit ;
47806: GO 48453
// for i = 1 to mc_bases do
47808: LD_ADDR_VAR 0 2
47812: PUSH
47813: DOUBLE
47814: LD_INT 1
47816: DEC
47817: ST_TO_ADDR
47818: LD_EXP 7
47822: PUSH
47823: FOR_TO
47824: IFFALSE 48451
// begin if not mc_bases [ i ] then
47826: LD_EXP 7
47830: PUSH
47831: LD_VAR 0 2
47835: ARRAY
47836: NOT
47837: IFFALSE 47841
// continue ;
47839: GO 47823
// if mc_scan [ i ] then
47841: LD_EXP 29
47845: PUSH
47846: LD_VAR 0 2
47850: ARRAY
47851: IFFALSE 47877
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
47853: LD_ADDR_EXP 19
47857: PUSH
47858: LD_EXP 19
47862: PPUSH
47863: LD_VAR 0 2
47867: PPUSH
47868: EMPTY
47869: PPUSH
47870: CALL_OW 1
47874: ST_TO_ADDR
// continue ;
47875: GO 47823
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
47877: LD_ADDR_VAR 0 5
47881: PUSH
47882: LD_EXP 7
47886: PUSH
47887: LD_VAR 0 2
47891: ARRAY
47892: PUSH
47893: LD_INT 1
47895: ARRAY
47896: PPUSH
47897: CALL_OW 255
47901: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
47902: LD_ADDR_VAR 0 6
47906: PUSH
47907: LD_EXP 7
47911: PUSH
47912: LD_VAR 0 2
47916: ARRAY
47917: PPUSH
47918: LD_INT 30
47920: PUSH
47921: LD_INT 3
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PPUSH
47928: CALL_OW 72
47932: ST_TO_ADDR
// if not fac then
47933: LD_VAR 0 6
47937: NOT
47938: IFFALSE 47989
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
47940: LD_ADDR_VAR 0 6
47944: PUSH
47945: LD_EXP 7
47949: PUSH
47950: LD_VAR 0 2
47954: ARRAY
47955: PPUSH
47956: LD_INT 2
47958: PUSH
47959: LD_INT 30
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 30
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: LIST
47983: PPUSH
47984: CALL_OW 72
47988: ST_TO_ADDR
// if not fac then
47989: LD_VAR 0 6
47993: NOT
47994: IFFALSE 47998
// continue ;
47996: GO 47823
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
47998: LD_ADDR_VAR 0 7
48002: PUSH
48003: LD_EXP 30
48007: PUSH
48008: LD_VAR 0 2
48012: ARRAY
48013: PPUSH
48014: LD_INT 22
48016: PUSH
48017: LD_VAR 0 5
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 21
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 3
48038: PUSH
48039: LD_INT 24
48041: PUSH
48042: LD_INT 1000
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: LIST
48057: PPUSH
48058: CALL_OW 70
48062: PUSH
48063: LD_INT 22
48065: PUSH
48066: LD_VAR 0 5
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 91
48077: PUSH
48078: LD_VAR 0 6
48082: PUSH
48083: LD_INT 1
48085: ARRAY
48086: PUSH
48087: LD_INT 25
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 21
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 3
48107: PUSH
48108: LD_INT 24
48110: PUSH
48111: LD_INT 1000
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: PPUSH
48128: CALL_OW 69
48132: UNION
48133: ST_TO_ADDR
// if not vehs then
48134: LD_VAR 0 7
48138: NOT
48139: IFFALSE 48165
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
48141: LD_ADDR_EXP 19
48145: PUSH
48146: LD_EXP 19
48150: PPUSH
48151: LD_VAR 0 2
48155: PPUSH
48156: EMPTY
48157: PPUSH
48158: CALL_OW 1
48162: ST_TO_ADDR
// continue ;
48163: GO 47823
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
48165: LD_ADDR_VAR 0 8
48169: PUSH
48170: LD_EXP 7
48174: PUSH
48175: LD_VAR 0 2
48179: ARRAY
48180: PPUSH
48181: LD_INT 30
48183: PUSH
48184: LD_INT 3
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PPUSH
48191: CALL_OW 72
48195: ST_TO_ADDR
// if tmp then
48196: LD_VAR 0 8
48200: IFFALSE 48303
// begin for j in tmp do
48202: LD_ADDR_VAR 0 3
48206: PUSH
48207: LD_VAR 0 8
48211: PUSH
48212: FOR_IN
48213: IFFALSE 48301
// for k in UnitsInside ( j ) do
48215: LD_ADDR_VAR 0 4
48219: PUSH
48220: LD_VAR 0 3
48224: PPUSH
48225: CALL_OW 313
48229: PUSH
48230: FOR_IN
48231: IFFALSE 48297
// if k then
48233: LD_VAR 0 4
48237: IFFALSE 48295
// if not k in mc_repair_vehicle [ i ] then
48239: LD_VAR 0 4
48243: PUSH
48244: LD_EXP 19
48248: PUSH
48249: LD_VAR 0 2
48253: ARRAY
48254: IN
48255: NOT
48256: IFFALSE 48295
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
48258: LD_ADDR_EXP 19
48262: PUSH
48263: LD_EXP 19
48267: PPUSH
48268: LD_VAR 0 2
48272: PPUSH
48273: LD_EXP 19
48277: PUSH
48278: LD_VAR 0 2
48282: ARRAY
48283: PUSH
48284: LD_VAR 0 4
48288: UNION
48289: PPUSH
48290: CALL_OW 1
48294: ST_TO_ADDR
48295: GO 48230
48297: POP
48298: POP
48299: GO 48212
48301: POP
48302: POP
// end ; if not mc_repair_vehicle [ i ] then
48303: LD_EXP 19
48307: PUSH
48308: LD_VAR 0 2
48312: ARRAY
48313: NOT
48314: IFFALSE 48318
// continue ;
48316: GO 47823
// for j in mc_repair_vehicle [ i ] do
48318: LD_ADDR_VAR 0 3
48322: PUSH
48323: LD_EXP 19
48327: PUSH
48328: LD_VAR 0 2
48332: ARRAY
48333: PUSH
48334: FOR_IN
48335: IFFALSE 48447
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
48337: LD_VAR 0 3
48341: PPUSH
48342: CALL_OW 311
48346: NOT
48347: PUSH
48348: LD_VAR 0 3
48352: PUSH
48353: LD_EXP 10
48357: PUSH
48358: LD_VAR 0 2
48362: ARRAY
48363: PUSH
48364: LD_INT 1
48366: ARRAY
48367: IN
48368: NOT
48369: AND
48370: PUSH
48371: LD_VAR 0 3
48375: PUSH
48376: LD_EXP 10
48380: PUSH
48381: LD_VAR 0 2
48385: ARRAY
48386: PUSH
48387: LD_INT 2
48389: ARRAY
48390: IN
48391: NOT
48392: AND
48393: IFFALSE 48445
// begin if IsInUnit ( j ) then
48395: LD_VAR 0 3
48399: PPUSH
48400: CALL_OW 310
48404: IFFALSE 48415
// ComExitBuilding ( j ) ;
48406: LD_VAR 0 3
48410: PPUSH
48411: CALL_OW 122
// if not HasTask ( j ) then
48415: LD_VAR 0 3
48419: PPUSH
48420: CALL_OW 314
48424: NOT
48425: IFFALSE 48445
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
48427: LD_VAR 0 3
48431: PPUSH
48432: LD_VAR 0 7
48436: PUSH
48437: LD_INT 1
48439: ARRAY
48440: PPUSH
48441: CALL_OW 189
// end ; end ;
48445: GO 48334
48447: POP
48448: POP
// end ;
48449: GO 47823
48451: POP
48452: POP
// end ;
48453: LD_VAR 0 1
48457: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp ; begin
48458: LD_INT 0
48460: PPUSH
48461: PPUSH
48462: PPUSH
48463: PPUSH
48464: PPUSH
48465: PPUSH
48466: PPUSH
48467: PPUSH
// if not mc_bases then
48468: LD_EXP 7
48472: NOT
48473: IFFALSE 48477
// exit ;
48475: GO 49010
// for i = 1 to mc_bases do
48477: LD_ADDR_VAR 0 2
48481: PUSH
48482: DOUBLE
48483: LD_INT 1
48485: DEC
48486: ST_TO_ADDR
48487: LD_EXP 7
48491: PUSH
48492: FOR_TO
48493: IFFALSE 49008
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
48495: LD_EXP 34
48499: PUSH
48500: LD_VAR 0 2
48504: ARRAY
48505: NOT
48506: PUSH
48507: LD_EXP 10
48511: PUSH
48512: LD_VAR 0 2
48516: ARRAY
48517: PUSH
48518: LD_INT 1
48520: ARRAY
48521: OR
48522: PUSH
48523: LD_EXP 10
48527: PUSH
48528: LD_VAR 0 2
48532: ARRAY
48533: PUSH
48534: LD_INT 2
48536: ARRAY
48537: OR
48538: PUSH
48539: LD_EXP 32
48543: PUSH
48544: LD_VAR 0 2
48548: ARRAY
48549: PPUSH
48550: LD_INT 1
48552: PPUSH
48553: CALL_OW 325
48557: NOT
48558: OR
48559: PUSH
48560: LD_EXP 29
48564: PUSH
48565: LD_VAR 0 2
48569: ARRAY
48570: OR
48571: IFFALSE 48575
// continue ;
48573: GO 48492
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
48575: LD_ADDR_VAR 0 8
48579: PUSH
48580: LD_EXP 7
48584: PUSH
48585: LD_VAR 0 2
48589: ARRAY
48590: PPUSH
48591: LD_INT 25
48593: PUSH
48594: LD_INT 4
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 50
48603: PUSH
48604: EMPTY
48605: LIST
48606: PUSH
48607: LD_INT 3
48609: PUSH
48610: LD_INT 60
48612: PUSH
48613: EMPTY
48614: LIST
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: LIST
48624: PPUSH
48625: CALL_OW 72
48629: PUSH
48630: LD_EXP 11
48634: PUSH
48635: LD_VAR 0 2
48639: ARRAY
48640: DIFF
48641: ST_TO_ADDR
// if not tmp then
48642: LD_VAR 0 8
48646: NOT
48647: IFFALSE 48651
// continue ;
48649: GO 48492
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
48651: LD_ADDR_VAR 0 7
48655: PUSH
48656: LD_EXP 34
48660: PUSH
48661: LD_VAR 0 2
48665: ARRAY
48666: PPUSH
48667: LD_INT 22
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 25
48679: PUSH
48680: LD_INT 12
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PPUSH
48691: CALL_OW 70
48695: ST_TO_ADDR
// if not apes then
48696: LD_VAR 0 7
48700: NOT
48701: IFFALSE 48751
// begin if mc_taming [ i ] then
48703: LD_EXP 37
48707: PUSH
48708: LD_VAR 0 2
48712: ARRAY
48713: IFFALSE 48749
// begin MC_Reset ( i , 121 ) ;
48715: LD_VAR 0 2
48719: PPUSH
48720: LD_INT 121
48722: PPUSH
48723: CALL 40373 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
48727: LD_ADDR_EXP 37
48731: PUSH
48732: LD_EXP 37
48736: PPUSH
48737: LD_VAR 0 2
48741: PPUSH
48742: EMPTY
48743: PPUSH
48744: CALL_OW 1
48748: ST_TO_ADDR
// end ; continue ;
48749: GO 48492
// end ; for j in tmp do
48751: LD_ADDR_VAR 0 3
48755: PUSH
48756: LD_VAR 0 8
48760: PUSH
48761: FOR_IN
48762: IFFALSE 49004
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
48764: LD_VAR 0 3
48768: PUSH
48769: LD_EXP 37
48773: PUSH
48774: LD_VAR 0 2
48778: ARRAY
48779: IN
48780: NOT
48781: PUSH
48782: LD_EXP 37
48786: PUSH
48787: LD_VAR 0 2
48791: ARRAY
48792: PUSH
48793: LD_INT 3
48795: LESS
48796: AND
48797: IFFALSE 48855
// begin SetTag ( j , 121 ) ;
48799: LD_VAR 0 3
48803: PPUSH
48804: LD_INT 121
48806: PPUSH
48807: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
48811: LD_ADDR_EXP 37
48815: PUSH
48816: LD_EXP 37
48820: PPUSH
48821: LD_VAR 0 2
48825: PUSH
48826: LD_EXP 37
48830: PUSH
48831: LD_VAR 0 2
48835: ARRAY
48836: PUSH
48837: LD_INT 1
48839: PLUS
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PPUSH
48845: LD_VAR 0 3
48849: PPUSH
48850: CALL 7996 0 3
48854: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
48855: LD_VAR 0 3
48859: PUSH
48860: LD_EXP 37
48864: PUSH
48865: LD_VAR 0 2
48869: ARRAY
48870: IN
48871: IFFALSE 49002
// begin if IsInUnit ( j ) then
48873: LD_VAR 0 3
48877: PPUSH
48878: CALL_OW 310
48882: IFFALSE 48893
// ComExitBuilding ( j ) ;
48884: LD_VAR 0 3
48888: PPUSH
48889: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
48893: LD_ADDR_VAR 0 6
48897: PUSH
48898: LD_VAR 0 7
48902: PPUSH
48903: LD_VAR 0 3
48907: PPUSH
48908: CALL_OW 74
48912: ST_TO_ADDR
// if not ape then
48913: LD_VAR 0 6
48917: NOT
48918: IFFALSE 48922
// break ;
48920: GO 49004
// x := GetX ( ape ) ;
48922: LD_ADDR_VAR 0 4
48926: PUSH
48927: LD_VAR 0 6
48931: PPUSH
48932: CALL_OW 250
48936: ST_TO_ADDR
// y := GetY ( ape ) ;
48937: LD_ADDR_VAR 0 5
48941: PUSH
48942: LD_VAR 0 6
48946: PPUSH
48947: CALL_OW 251
48951: ST_TO_ADDR
// if not ValidHex ( x , y ) then
48952: LD_VAR 0 4
48956: PPUSH
48957: LD_VAR 0 5
48961: PPUSH
48962: CALL_OW 488
48966: NOT
48967: IFFALSE 48971
// break ;
48969: GO 49004
// if not HasTask ( j ) then
48971: LD_VAR 0 3
48975: PPUSH
48976: CALL_OW 314
48980: NOT
48981: IFFALSE 49002
// ComTameXY ( j , x , y ) ;
48983: LD_VAR 0 3
48987: PPUSH
48988: LD_VAR 0 4
48992: PPUSH
48993: LD_VAR 0 5
48997: PPUSH
48998: CALL_OW 131
// end ; end ;
49002: GO 48761
49004: POP
49005: POP
// end ;
49006: GO 48492
49008: POP
49009: POP
// end ;
49010: LD_VAR 0 1
49014: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
49015: LD_INT 0
49017: PPUSH
49018: PPUSH
49019: PPUSH
49020: PPUSH
49021: PPUSH
49022: PPUSH
49023: PPUSH
49024: PPUSH
// if not mc_bases then
49025: LD_EXP 7
49029: NOT
49030: IFFALSE 49034
// exit ;
49032: GO 49644
// for i = 1 to mc_bases do
49034: LD_ADDR_VAR 0 2
49038: PUSH
49039: DOUBLE
49040: LD_INT 1
49042: DEC
49043: ST_TO_ADDR
49044: LD_EXP 7
49048: PUSH
49049: FOR_TO
49050: IFFALSE 49642
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
49052: LD_EXP 35
49056: PUSH
49057: LD_VAR 0 2
49061: ARRAY
49062: NOT
49063: PUSH
49064: LD_EXP 35
49068: PUSH
49069: LD_VAR 0 2
49073: ARRAY
49074: PPUSH
49075: LD_INT 25
49077: PUSH
49078: LD_INT 12
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PPUSH
49085: CALL_OW 72
49089: NOT
49090: OR
49091: IFFALSE 49095
// continue ;
49093: GO 49049
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
49095: LD_ADDR_VAR 0 5
49099: PUSH
49100: LD_EXP 35
49104: PUSH
49105: LD_VAR 0 2
49109: ARRAY
49110: PUSH
49111: LD_INT 1
49113: ARRAY
49114: PPUSH
49115: CALL_OW 255
49119: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
49120: LD_VAR 0 5
49124: PPUSH
49125: LD_INT 2
49127: PPUSH
49128: CALL_OW 325
49132: IFFALSE 49377
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
49134: LD_ADDR_VAR 0 4
49138: PUSH
49139: LD_EXP 35
49143: PUSH
49144: LD_VAR 0 2
49148: ARRAY
49149: PPUSH
49150: LD_INT 25
49152: PUSH
49153: LD_INT 16
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PPUSH
49160: CALL_OW 72
49164: ST_TO_ADDR
// if tmp < 6 then
49165: LD_VAR 0 4
49169: PUSH
49170: LD_INT 6
49172: LESS
49173: IFFALSE 49377
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49175: LD_ADDR_VAR 0 6
49179: PUSH
49180: LD_EXP 7
49184: PUSH
49185: LD_VAR 0 2
49189: ARRAY
49190: PPUSH
49191: LD_INT 2
49193: PUSH
49194: LD_INT 30
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 30
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: LIST
49218: PPUSH
49219: CALL_OW 72
49223: ST_TO_ADDR
// if depot then
49224: LD_VAR 0 6
49228: IFFALSE 49377
// begin for j in depot do
49230: LD_ADDR_VAR 0 3
49234: PUSH
49235: LD_VAR 0 6
49239: PUSH
49240: FOR_IN
49241: IFFALSE 49272
// begin if UnitsInside ( j ) < 6 then
49243: LD_VAR 0 3
49247: PPUSH
49248: CALL_OW 313
49252: PUSH
49253: LD_INT 6
49255: LESS
49256: IFFALSE 49270
// begin selected := j ;
49258: LD_ADDR_VAR 0 7
49262: PUSH
49263: LD_VAR 0 3
49267: ST_TO_ADDR
// break ;
49268: GO 49272
// end ; end ;
49270: GO 49240
49272: POP
49273: POP
// if selected then
49274: LD_VAR 0 7
49278: IFFALSE 49377
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
49280: LD_ADDR_VAR 0 3
49284: PUSH
49285: LD_EXP 35
49289: PUSH
49290: LD_VAR 0 2
49294: ARRAY
49295: PPUSH
49296: LD_INT 25
49298: PUSH
49299: LD_INT 12
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PPUSH
49306: CALL_OW 72
49310: PUSH
49311: FOR_IN
49312: IFFALSE 49375
// if not HasTask ( j ) then
49314: LD_VAR 0 3
49318: PPUSH
49319: CALL_OW 314
49323: NOT
49324: IFFALSE 49373
// begin if not IsInUnit ( j ) then
49326: LD_VAR 0 3
49330: PPUSH
49331: CALL_OW 310
49335: NOT
49336: IFFALSE 49352
// ComEnterUnit ( j , selected ) ;
49338: LD_VAR 0 3
49342: PPUSH
49343: LD_VAR 0 7
49347: PPUSH
49348: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
49352: LD_VAR 0 3
49356: PPUSH
49357: LD_INT 16
49359: PPUSH
49360: CALL_OW 183
// AddComExitBuilding ( j ) ;
49364: LD_VAR 0 3
49368: PPUSH
49369: CALL_OW 182
// end ;
49373: GO 49311
49375: POP
49376: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
49377: LD_VAR 0 5
49381: PPUSH
49382: LD_INT 11
49384: PPUSH
49385: CALL_OW 325
49389: IFFALSE 49640
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
49391: LD_ADDR_VAR 0 4
49395: PUSH
49396: LD_EXP 35
49400: PUSH
49401: LD_VAR 0 2
49405: ARRAY
49406: PPUSH
49407: LD_INT 25
49409: PUSH
49410: LD_INT 16
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PPUSH
49417: CALL_OW 72
49421: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
49422: LD_VAR 0 4
49426: PUSH
49427: LD_INT 6
49429: GREATEREQUAL
49430: PUSH
49431: LD_VAR 0 5
49435: PPUSH
49436: LD_INT 2
49438: PPUSH
49439: CALL_OW 325
49443: NOT
49444: OR
49445: IFFALSE 49640
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
49447: LD_ADDR_VAR 0 8
49451: PUSH
49452: LD_EXP 7
49456: PUSH
49457: LD_VAR 0 2
49461: ARRAY
49462: PPUSH
49463: LD_INT 2
49465: PUSH
49466: LD_INT 30
49468: PUSH
49469: LD_INT 4
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 30
49478: PUSH
49479: LD_INT 5
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: LIST
49490: PPUSH
49491: CALL_OW 72
49495: ST_TO_ADDR
// if barracks then
49496: LD_VAR 0 8
49500: IFFALSE 49640
// begin for j in barracks do
49502: LD_ADDR_VAR 0 3
49506: PUSH
49507: LD_VAR 0 8
49511: PUSH
49512: FOR_IN
49513: IFFALSE 49544
// begin if UnitsInside ( j ) < 6 then
49515: LD_VAR 0 3
49519: PPUSH
49520: CALL_OW 313
49524: PUSH
49525: LD_INT 6
49527: LESS
49528: IFFALSE 49542
// begin selected := j ;
49530: LD_ADDR_VAR 0 7
49534: PUSH
49535: LD_VAR 0 3
49539: ST_TO_ADDR
// break ;
49540: GO 49544
// end ; end ;
49542: GO 49512
49544: POP
49545: POP
// if selected then
49546: LD_VAR 0 7
49550: IFFALSE 49640
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
49552: LD_ADDR_VAR 0 3
49556: PUSH
49557: LD_EXP 35
49561: PUSH
49562: LD_VAR 0 2
49566: ARRAY
49567: PPUSH
49568: LD_INT 25
49570: PUSH
49571: LD_INT 12
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PPUSH
49578: CALL_OW 72
49582: PUSH
49583: FOR_IN
49584: IFFALSE 49638
// if not IsInUnit ( j ) and not HasTask ( j ) then
49586: LD_VAR 0 3
49590: PPUSH
49591: CALL_OW 310
49595: NOT
49596: PUSH
49597: LD_VAR 0 3
49601: PPUSH
49602: CALL_OW 314
49606: NOT
49607: AND
49608: IFFALSE 49636
// begin ComEnterUnit ( j , selected ) ;
49610: LD_VAR 0 3
49614: PPUSH
49615: LD_VAR 0 7
49619: PPUSH
49620: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
49624: LD_VAR 0 3
49628: PPUSH
49629: LD_INT 15
49631: PPUSH
49632: CALL_OW 183
// end ;
49636: GO 49583
49638: POP
49639: POP
// end ; end ; end ; end ; end ;
49640: GO 49049
49642: POP
49643: POP
// end ;
49644: LD_VAR 0 1
49648: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
49649: LD_INT 0
49651: PPUSH
49652: PPUSH
49653: PPUSH
49654: PPUSH
// if not mc_bases then
49655: LD_EXP 7
49659: NOT
49660: IFFALSE 49664
// exit ;
49662: GO 49842
// for i = 1 to mc_bases do
49664: LD_ADDR_VAR 0 2
49668: PUSH
49669: DOUBLE
49670: LD_INT 1
49672: DEC
49673: ST_TO_ADDR
49674: LD_EXP 7
49678: PUSH
49679: FOR_TO
49680: IFFALSE 49840
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
49682: LD_ADDR_VAR 0 4
49686: PUSH
49687: LD_EXP 7
49691: PUSH
49692: LD_VAR 0 2
49696: ARRAY
49697: PPUSH
49698: LD_INT 25
49700: PUSH
49701: LD_INT 9
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PPUSH
49708: CALL_OW 72
49712: ST_TO_ADDR
// if not tmp then
49713: LD_VAR 0 4
49717: NOT
49718: IFFALSE 49722
// continue ;
49720: GO 49679
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
49722: LD_EXP 32
49726: PUSH
49727: LD_VAR 0 2
49731: ARRAY
49732: PPUSH
49733: LD_INT 29
49735: PPUSH
49736: CALL_OW 325
49740: NOT
49741: PUSH
49742: LD_EXP 32
49746: PUSH
49747: LD_VAR 0 2
49751: ARRAY
49752: PPUSH
49753: LD_INT 28
49755: PPUSH
49756: CALL_OW 325
49760: NOT
49761: AND
49762: IFFALSE 49766
// continue ;
49764: GO 49679
// for j in tmp do
49766: LD_ADDR_VAR 0 3
49770: PUSH
49771: LD_VAR 0 4
49775: PUSH
49776: FOR_IN
49777: IFFALSE 49836
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
49779: LD_VAR 0 3
49783: PUSH
49784: LD_EXP 10
49788: PUSH
49789: LD_VAR 0 2
49793: ARRAY
49794: PUSH
49795: LD_INT 1
49797: ARRAY
49798: IN
49799: NOT
49800: PUSH
49801: LD_VAR 0 3
49805: PUSH
49806: LD_EXP 10
49810: PUSH
49811: LD_VAR 0 2
49815: ARRAY
49816: PUSH
49817: LD_INT 2
49819: ARRAY
49820: IN
49821: NOT
49822: AND
49823: IFFALSE 49834
// ComSpaceTimeShoot ( j ) ;
49825: LD_VAR 0 3
49829: PPUSH
49830: CALL 2158 0 1
49834: GO 49776
49836: POP
49837: POP
// end ;
49838: GO 49679
49840: POP
49841: POP
// end ;
49842: LD_VAR 0 1
49846: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
49847: LD_INT 0
49849: PPUSH
49850: PPUSH
49851: PPUSH
49852: PPUSH
49853: PPUSH
49854: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
49855: LD_VAR 0 1
49859: NOT
49860: PUSH
49861: LD_VAR 0 2
49865: NOT
49866: OR
49867: PUSH
49868: LD_VAR 0 3
49872: NOT
49873: OR
49874: PUSH
49875: LD_VAR 0 4
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: LD_INT 3
49888: PUSH
49889: LD_INT 4
49891: PUSH
49892: LD_INT 5
49894: PUSH
49895: LD_INT 8
49897: PUSH
49898: LD_INT 9
49900: PUSH
49901: LD_INT 15
49903: PUSH
49904: LD_INT 16
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: IN
49918: NOT
49919: OR
49920: IFFALSE 49924
// exit ;
49922: GO 50824
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
49924: LD_ADDR_VAR 0 2
49928: PUSH
49929: LD_VAR 0 2
49933: PPUSH
49934: LD_INT 21
49936: PUSH
49937: LD_INT 3
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 24
49946: PUSH
49947: LD_INT 250
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PPUSH
49958: CALL_OW 72
49962: ST_TO_ADDR
// case class of 1 , 15 :
49963: LD_VAR 0 4
49967: PUSH
49968: LD_INT 1
49970: DOUBLE
49971: EQUAL
49972: IFTRUE 49982
49974: LD_INT 15
49976: DOUBLE
49977: EQUAL
49978: IFTRUE 49982
49980: GO 50067
49982: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
49983: LD_ADDR_VAR 0 8
49987: PUSH
49988: LD_VAR 0 2
49992: PPUSH
49993: LD_INT 2
49995: PUSH
49996: LD_INT 30
49998: PUSH
49999: LD_INT 32
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 30
50008: PUSH
50009: LD_INT 31
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: LIST
50020: PPUSH
50021: CALL_OW 72
50025: PUSH
50026: LD_VAR 0 2
50030: PPUSH
50031: LD_INT 2
50033: PUSH
50034: LD_INT 30
50036: PUSH
50037: LD_INT 4
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 30
50046: PUSH
50047: LD_INT 5
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: LIST
50058: PPUSH
50059: CALL_OW 72
50063: ADD
50064: ST_TO_ADDR
50065: GO 50313
50067: LD_INT 2
50069: DOUBLE
50070: EQUAL
50071: IFTRUE 50081
50073: LD_INT 16
50075: DOUBLE
50076: EQUAL
50077: IFTRUE 50081
50079: GO 50127
50081: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
50082: LD_ADDR_VAR 0 8
50086: PUSH
50087: LD_VAR 0 2
50091: PPUSH
50092: LD_INT 2
50094: PUSH
50095: LD_INT 30
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 30
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: LIST
50119: PPUSH
50120: CALL_OW 72
50124: ST_TO_ADDR
50125: GO 50313
50127: LD_INT 3
50129: DOUBLE
50130: EQUAL
50131: IFTRUE 50135
50133: GO 50181
50135: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
50136: LD_ADDR_VAR 0 8
50140: PUSH
50141: LD_VAR 0 2
50145: PPUSH
50146: LD_INT 2
50148: PUSH
50149: LD_INT 30
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 30
50161: PUSH
50162: LD_INT 3
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: LIST
50173: PPUSH
50174: CALL_OW 72
50178: ST_TO_ADDR
50179: GO 50313
50181: LD_INT 4
50183: DOUBLE
50184: EQUAL
50185: IFTRUE 50189
50187: GO 50246
50189: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
50190: LD_ADDR_VAR 0 8
50194: PUSH
50195: LD_VAR 0 2
50199: PPUSH
50200: LD_INT 2
50202: PUSH
50203: LD_INT 30
50205: PUSH
50206: LD_INT 6
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 30
50215: PUSH
50216: LD_INT 7
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 30
50225: PUSH
50226: LD_INT 8
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: PPUSH
50239: CALL_OW 72
50243: ST_TO_ADDR
50244: GO 50313
50246: LD_INT 5
50248: DOUBLE
50249: EQUAL
50250: IFTRUE 50266
50252: LD_INT 8
50254: DOUBLE
50255: EQUAL
50256: IFTRUE 50266
50258: LD_INT 9
50260: DOUBLE
50261: EQUAL
50262: IFTRUE 50266
50264: GO 50312
50266: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
50267: LD_ADDR_VAR 0 8
50271: PUSH
50272: LD_VAR 0 2
50276: PPUSH
50277: LD_INT 2
50279: PUSH
50280: LD_INT 30
50282: PUSH
50283: LD_INT 4
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 30
50292: PUSH
50293: LD_INT 5
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: LIST
50304: PPUSH
50305: CALL_OW 72
50309: ST_TO_ADDR
50310: GO 50313
50312: POP
// if not tmp then
50313: LD_VAR 0 8
50317: NOT
50318: IFFALSE 50322
// exit ;
50320: GO 50824
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
50322: LD_VAR 0 4
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: LD_INT 15
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: IN
50337: PUSH
50338: LD_EXP 16
50342: PUSH
50343: LD_VAR 0 1
50347: ARRAY
50348: AND
50349: IFFALSE 50505
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
50351: LD_ADDR_VAR 0 9
50355: PUSH
50356: LD_EXP 16
50360: PUSH
50361: LD_VAR 0 1
50365: ARRAY
50366: PUSH
50367: LD_INT 1
50369: ARRAY
50370: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
50371: LD_VAR 0 9
50375: PUSH
50376: LD_EXP 17
50380: PUSH
50381: LD_VAR 0 1
50385: ARRAY
50386: IN
50387: NOT
50388: IFFALSE 50503
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
50390: LD_ADDR_EXP 17
50394: PUSH
50395: LD_EXP 17
50399: PPUSH
50400: LD_VAR 0 1
50404: PUSH
50405: LD_EXP 17
50409: PUSH
50410: LD_VAR 0 1
50414: ARRAY
50415: PUSH
50416: LD_INT 1
50418: PLUS
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PPUSH
50424: LD_VAR 0 9
50428: PPUSH
50429: CALL 7996 0 3
50433: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
50434: LD_ADDR_EXP 16
50438: PUSH
50439: LD_EXP 16
50443: PPUSH
50444: LD_VAR 0 1
50448: PPUSH
50449: LD_EXP 16
50453: PUSH
50454: LD_VAR 0 1
50458: ARRAY
50459: PUSH
50460: LD_VAR 0 9
50464: DIFF
50465: PPUSH
50466: CALL_OW 1
50470: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
50471: LD_VAR 0 3
50475: PPUSH
50476: LD_EXP 17
50480: PUSH
50481: LD_VAR 0 1
50485: ARRAY
50486: PUSH
50487: LD_EXP 17
50491: PUSH
50492: LD_VAR 0 1
50496: ARRAY
50497: ARRAY
50498: PPUSH
50499: CALL_OW 120
// end ; exit ;
50503: GO 50824
// end ; if tmp > 1 then
50505: LD_VAR 0 8
50509: PUSH
50510: LD_INT 1
50512: GREATER
50513: IFFALSE 50617
// for i = 2 to tmp do
50515: LD_ADDR_VAR 0 6
50519: PUSH
50520: DOUBLE
50521: LD_INT 2
50523: DEC
50524: ST_TO_ADDR
50525: LD_VAR 0 8
50529: PUSH
50530: FOR_TO
50531: IFFALSE 50615
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
50533: LD_VAR 0 8
50537: PUSH
50538: LD_VAR 0 6
50542: ARRAY
50543: PPUSH
50544: CALL_OW 461
50548: PUSH
50549: LD_INT 6
50551: EQUAL
50552: IFFALSE 50613
// begin x := tmp [ i ] ;
50554: LD_ADDR_VAR 0 9
50558: PUSH
50559: LD_VAR 0 8
50563: PUSH
50564: LD_VAR 0 6
50568: ARRAY
50569: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
50570: LD_ADDR_VAR 0 8
50574: PUSH
50575: LD_VAR 0 8
50579: PPUSH
50580: LD_VAR 0 6
50584: PPUSH
50585: CALL_OW 3
50589: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
50590: LD_ADDR_VAR 0 8
50594: PUSH
50595: LD_VAR 0 8
50599: PPUSH
50600: LD_INT 1
50602: PPUSH
50603: LD_VAR 0 9
50607: PPUSH
50608: CALL_OW 2
50612: ST_TO_ADDR
// end ;
50613: GO 50530
50615: POP
50616: POP
// for i in tmp do
50617: LD_ADDR_VAR 0 6
50621: PUSH
50622: LD_VAR 0 8
50626: PUSH
50627: FOR_IN
50628: IFFALSE 50697
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
50630: LD_VAR 0 6
50634: PPUSH
50635: CALL_OW 313
50639: PUSH
50640: LD_INT 6
50642: LESS
50643: PUSH
50644: LD_VAR 0 6
50648: PPUSH
50649: CALL_OW 266
50653: PUSH
50654: LD_INT 31
50656: PUSH
50657: LD_INT 32
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: IN
50664: NOT
50665: AND
50666: PUSH
50667: LD_VAR 0 6
50671: PPUSH
50672: CALL_OW 313
50676: PUSH
50677: LD_INT 0
50679: EQUAL
50680: OR
50681: IFFALSE 50695
// begin j := i ;
50683: LD_ADDR_VAR 0 7
50687: PUSH
50688: LD_VAR 0 6
50692: ST_TO_ADDR
// break ;
50693: GO 50697
// end ; end ;
50695: GO 50627
50697: POP
50698: POP
// if j then
50699: LD_VAR 0 7
50703: IFFALSE 50721
// ComEnterUnit ( unit , j ) else
50705: LD_VAR 0 3
50709: PPUSH
50710: LD_VAR 0 7
50714: PPUSH
50715: CALL_OW 120
50719: GO 50824
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50721: LD_ADDR_VAR 0 10
50725: PUSH
50726: LD_VAR 0 2
50730: PPUSH
50731: LD_INT 2
50733: PUSH
50734: LD_INT 30
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 30
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: LIST
50758: PPUSH
50759: CALL_OW 72
50763: ST_TO_ADDR
// if depot then
50764: LD_VAR 0 10
50768: IFFALSE 50824
// begin depot := NearestUnitToUnit ( depot , unit ) ;
50770: LD_ADDR_VAR 0 10
50774: PUSH
50775: LD_VAR 0 10
50779: PPUSH
50780: LD_VAR 0 3
50784: PPUSH
50785: CALL_OW 74
50789: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
50790: LD_VAR 0 3
50794: PPUSH
50795: LD_VAR 0 10
50799: PPUSH
50800: CALL_OW 296
50804: PUSH
50805: LD_INT 10
50807: GREATER
50808: IFFALSE 50824
// ComStandNearbyBuilding ( unit , depot ) ;
50810: LD_VAR 0 3
50814: PPUSH
50815: LD_VAR 0 10
50819: PPUSH
50820: CALL 2775 0 2
// end ; end ; end ;
50824: LD_VAR 0 5
50828: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
50829: LD_INT 0
50831: PPUSH
50832: PPUSH
50833: PPUSH
50834: PPUSH
// if not mc_bases then
50835: LD_EXP 7
50839: NOT
50840: IFFALSE 50844
// exit ;
50842: GO 51083
// for i = 1 to mc_bases do
50844: LD_ADDR_VAR 0 2
50848: PUSH
50849: DOUBLE
50850: LD_INT 1
50852: DEC
50853: ST_TO_ADDR
50854: LD_EXP 7
50858: PUSH
50859: FOR_TO
50860: IFFALSE 51081
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
50862: LD_ADDR_VAR 0 4
50866: PUSH
50867: LD_EXP 7
50871: PUSH
50872: LD_VAR 0 2
50876: ARRAY
50877: PPUSH
50878: LD_INT 21
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PPUSH
50888: CALL_OW 72
50892: PUSH
50893: LD_EXP 35
50897: PUSH
50898: LD_VAR 0 2
50902: ARRAY
50903: UNION
50904: ST_TO_ADDR
// if not tmp then
50905: LD_VAR 0 4
50909: NOT
50910: IFFALSE 50914
// continue ;
50912: GO 50859
// for j in tmp do
50914: LD_ADDR_VAR 0 3
50918: PUSH
50919: LD_VAR 0 4
50923: PUSH
50924: FOR_IN
50925: IFFALSE 51077
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
50927: LD_VAR 0 3
50931: PPUSH
50932: CALL_OW 110
50936: NOT
50937: PUSH
50938: LD_VAR 0 3
50942: PPUSH
50943: CALL_OW 314
50947: NOT
50948: AND
50949: PUSH
50950: LD_VAR 0 3
50954: PPUSH
50955: CALL_OW 311
50959: NOT
50960: AND
50961: PUSH
50962: LD_VAR 0 3
50966: PPUSH
50967: CALL_OW 310
50971: NOT
50972: AND
50973: PUSH
50974: LD_VAR 0 3
50978: PUSH
50979: LD_EXP 10
50983: PUSH
50984: LD_VAR 0 2
50988: ARRAY
50989: PUSH
50990: LD_INT 1
50992: ARRAY
50993: IN
50994: NOT
50995: AND
50996: PUSH
50997: LD_VAR 0 3
51001: PUSH
51002: LD_EXP 10
51006: PUSH
51007: LD_VAR 0 2
51011: ARRAY
51012: PUSH
51013: LD_INT 2
51015: ARRAY
51016: IN
51017: NOT
51018: AND
51019: PUSH
51020: LD_VAR 0 3
51024: PUSH
51025: LD_EXP 19
51029: PUSH
51030: LD_VAR 0 2
51034: ARRAY
51035: IN
51036: NOT
51037: AND
51038: IFFALSE 51075
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
51040: LD_VAR 0 2
51044: PPUSH
51045: LD_EXP 7
51049: PUSH
51050: LD_VAR 0 2
51054: ARRAY
51055: PPUSH
51056: LD_VAR 0 3
51060: PPUSH
51061: LD_VAR 0 3
51065: PPUSH
51066: CALL_OW 257
51070: PPUSH
51071: CALL 49847 0 4
// end ;
51075: GO 50924
51077: POP
51078: POP
// end ;
51079: GO 50859
51081: POP
51082: POP
// end ;
51083: LD_VAR 0 1
51087: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
51088: LD_INT 0
51090: PPUSH
51091: PPUSH
51092: PPUSH
51093: PPUSH
51094: PPUSH
51095: PPUSH
// if not mc_bases [ base ] then
51096: LD_EXP 7
51100: PUSH
51101: LD_VAR 0 1
51105: ARRAY
51106: NOT
51107: IFFALSE 51111
// exit ;
51109: GO 51293
// tmp := [ ] ;
51111: LD_ADDR_VAR 0 6
51115: PUSH
51116: EMPTY
51117: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
51118: LD_ADDR_VAR 0 7
51122: PUSH
51123: LD_VAR 0 3
51127: PPUSH
51128: LD_INT 0
51130: PPUSH
51131: CALL_OW 517
51135: ST_TO_ADDR
// if not list then
51136: LD_VAR 0 7
51140: NOT
51141: IFFALSE 51145
// exit ;
51143: GO 51293
// for i = 1 to amount do
51145: LD_ADDR_VAR 0 5
51149: PUSH
51150: DOUBLE
51151: LD_INT 1
51153: DEC
51154: ST_TO_ADDR
51155: LD_VAR 0 2
51159: PUSH
51160: FOR_TO
51161: IFFALSE 51241
// begin x := rand ( 1 , list [ 1 ] ) ;
51163: LD_ADDR_VAR 0 8
51167: PUSH
51168: LD_INT 1
51170: PPUSH
51171: LD_VAR 0 7
51175: PUSH
51176: LD_INT 1
51178: ARRAY
51179: PPUSH
51180: CALL_OW 12
51184: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
51185: LD_ADDR_VAR 0 6
51189: PUSH
51190: LD_VAR 0 6
51194: PPUSH
51195: LD_VAR 0 5
51199: PPUSH
51200: LD_VAR 0 7
51204: PUSH
51205: LD_INT 1
51207: ARRAY
51208: PUSH
51209: LD_VAR 0 8
51213: ARRAY
51214: PUSH
51215: LD_VAR 0 7
51219: PUSH
51220: LD_INT 2
51222: ARRAY
51223: PUSH
51224: LD_VAR 0 8
51228: ARRAY
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PPUSH
51234: CALL_OW 1
51238: ST_TO_ADDR
// end ;
51239: GO 51160
51241: POP
51242: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
51243: LD_ADDR_EXP 20
51247: PUSH
51248: LD_EXP 20
51252: PPUSH
51253: LD_VAR 0 1
51257: PPUSH
51258: LD_VAR 0 6
51262: PPUSH
51263: CALL_OW 1
51267: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
51268: LD_ADDR_EXP 22
51272: PUSH
51273: LD_EXP 22
51277: PPUSH
51278: LD_VAR 0 1
51282: PPUSH
51283: LD_VAR 0 3
51287: PPUSH
51288: CALL_OW 1
51292: ST_TO_ADDR
// end ;
51293: LD_VAR 0 4
51297: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
51298: LD_INT 0
51300: PPUSH
// if not mc_bases [ base ] then
51301: LD_EXP 7
51305: PUSH
51306: LD_VAR 0 1
51310: ARRAY
51311: NOT
51312: IFFALSE 51316
// exit ;
51314: GO 51341
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
51316: LD_ADDR_EXP 12
51320: PUSH
51321: LD_EXP 12
51325: PPUSH
51326: LD_VAR 0 1
51330: PPUSH
51331: LD_VAR 0 2
51335: PPUSH
51336: CALL_OW 1
51340: ST_TO_ADDR
// end ;
51341: LD_VAR 0 3
51345: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
51346: LD_INT 0
51348: PPUSH
// if not mc_bases [ base ] then
51349: LD_EXP 7
51353: PUSH
51354: LD_VAR 0 1
51358: ARRAY
51359: NOT
51360: IFFALSE 51364
// exit ;
51362: GO 51389
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
51364: LD_ADDR_EXP 27
51368: PUSH
51369: LD_EXP 27
51373: PPUSH
51374: LD_VAR 0 1
51378: PPUSH
51379: LD_VAR 0 2
51383: PPUSH
51384: CALL_OW 1
51388: ST_TO_ADDR
// end ;
51389: LD_VAR 0 3
51393: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
51394: LD_INT 0
51396: PPUSH
// if not mc_bases [ base ] then
51397: LD_EXP 7
51401: PUSH
51402: LD_VAR 0 1
51406: ARRAY
51407: NOT
51408: IFFALSE 51412
// exit ;
51410: GO 51452
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
51412: LD_ADDR_EXP 27
51416: PUSH
51417: LD_EXP 27
51421: PPUSH
51422: LD_VAR 0 1
51426: PPUSH
51427: LD_EXP 27
51431: PUSH
51432: LD_VAR 0 1
51436: ARRAY
51437: PUSH
51438: LD_VAR 0 2
51442: PUSH
51443: EMPTY
51444: LIST
51445: ADD
51446: PPUSH
51447: CALL_OW 1
51451: ST_TO_ADDR
// end ;
51452: LD_VAR 0 3
51456: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
51457: LD_INT 0
51459: PPUSH
// if not mc_bases [ base ] then
51460: LD_EXP 7
51464: PUSH
51465: LD_VAR 0 1
51469: ARRAY
51470: NOT
51471: IFFALSE 51475
// exit ;
51473: GO 51587
// mc_defender := Replace ( mc_defender , base , deflist ) ;
51475: LD_ADDR_EXP 28
51479: PUSH
51480: LD_EXP 28
51484: PPUSH
51485: LD_VAR 0 1
51489: PPUSH
51490: LD_VAR 0 2
51494: PPUSH
51495: CALL_OW 1
51499: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
51500: LD_ADDR_EXP 18
51504: PUSH
51505: LD_EXP 18
51509: PPUSH
51510: LD_VAR 0 1
51514: PPUSH
51515: LD_VAR 0 2
51519: PUSH
51520: LD_INT 0
51522: PLUS
51523: PPUSH
51524: CALL_OW 1
51528: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
51529: LD_ADDR_EXP 25
51533: PUSH
51534: LD_EXP 25
51538: PPUSH
51539: LD_VAR 0 1
51543: PPUSH
51544: LD_EXP 25
51548: PUSH
51549: LD_VAR 0 1
51553: ARRAY
51554: PUSH
51555: LD_EXP 28
51559: PUSH
51560: LD_VAR 0 1
51564: ARRAY
51565: PPUSH
51566: LD_INT 21
51568: PUSH
51569: LD_INT 2
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PPUSH
51576: CALL_OW 72
51580: UNION
51581: PPUSH
51582: CALL_OW 1
51586: ST_TO_ADDR
// end ;
51587: LD_VAR 0 3
51591: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
51592: LD_INT 0
51594: PPUSH
51595: PPUSH
51596: PPUSH
51597: PPUSH
// if not mc_bases [ base ] then
51598: LD_EXP 7
51602: PUSH
51603: LD_VAR 0 1
51607: ARRAY
51608: NOT
51609: IFFALSE 51613
// exit ;
51611: GO 51678
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
51613: LD_ADDR_EXP 26
51617: PUSH
51618: LD_EXP 26
51622: PPUSH
51623: LD_VAR 0 1
51627: PUSH
51628: LD_EXP 26
51632: PUSH
51633: LD_VAR 0 1
51637: ARRAY
51638: PUSH
51639: LD_INT 1
51641: PLUS
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PPUSH
51647: LD_VAR 0 1
51651: PUSH
51652: LD_VAR 0 2
51656: PUSH
51657: LD_VAR 0 3
51661: PUSH
51662: LD_VAR 0 4
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: PPUSH
51673: CALL 7996 0 3
51677: ST_TO_ADDR
// end ;
51678: LD_VAR 0 5
51682: RET
// export function MC_GetMinesField ( base ) ; begin
51683: LD_INT 0
51685: PPUSH
// result := mc_mines [ base ] ;
51686: LD_ADDR_VAR 0 2
51690: PUSH
51691: LD_EXP 20
51695: PUSH
51696: LD_VAR 0 1
51700: ARRAY
51701: ST_TO_ADDR
// end ;
51702: LD_VAR 0 2
51706: RET
// export function MC_GetProduceList ( base ) ; begin
51707: LD_INT 0
51709: PPUSH
// result := mc_produce [ base ] ;
51710: LD_ADDR_VAR 0 2
51714: PUSH
51715: LD_EXP 27
51719: PUSH
51720: LD_VAR 0 1
51724: ARRAY
51725: ST_TO_ADDR
// end ;
51726: LD_VAR 0 2
51730: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
51731: LD_INT 0
51733: PPUSH
51734: PPUSH
// if not mc_bases then
51735: LD_EXP 7
51739: NOT
51740: IFFALSE 51744
// exit ;
51742: GO 51809
// if mc_bases [ base ] then
51744: LD_EXP 7
51748: PUSH
51749: LD_VAR 0 1
51753: ARRAY
51754: IFFALSE 51809
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
51756: LD_ADDR_VAR 0 3
51760: PUSH
51761: LD_EXP 7
51765: PUSH
51766: LD_VAR 0 1
51770: ARRAY
51771: PPUSH
51772: LD_INT 30
51774: PUSH
51775: LD_VAR 0 2
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PPUSH
51784: CALL_OW 72
51788: ST_TO_ADDR
// if result then
51789: LD_VAR 0 3
51793: IFFALSE 51809
// result := result [ 1 ] ;
51795: LD_ADDR_VAR 0 3
51799: PUSH
51800: LD_VAR 0 3
51804: PUSH
51805: LD_INT 1
51807: ARRAY
51808: ST_TO_ADDR
// end ; end ;
51809: LD_VAR 0 3
51813: RET
// export function MC_SetTame ( base , area ) ; begin
51814: LD_INT 0
51816: PPUSH
// if not mc_bases or not base then
51817: LD_EXP 7
51821: NOT
51822: PUSH
51823: LD_VAR 0 1
51827: NOT
51828: OR
51829: IFFALSE 51833
// exit ;
51831: GO 51858
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
51833: LD_ADDR_EXP 34
51837: PUSH
51838: LD_EXP 34
51842: PPUSH
51843: LD_VAR 0 1
51847: PPUSH
51848: LD_VAR 0 2
51852: PPUSH
51853: CALL_OW 1
51857: ST_TO_ADDR
// end ;
51858: LD_VAR 0 3
51862: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
51863: LD_INT 0
51865: PPUSH
51866: PPUSH
// if not mc_bases or not base or not kinds then
51867: LD_EXP 7
51871: NOT
51872: PUSH
51873: LD_VAR 0 1
51877: NOT
51878: OR
51879: PUSH
51880: LD_VAR 0 2
51884: NOT
51885: OR
51886: IFFALSE 51890
// exit ;
51888: GO 51951
// for i in kinds do
51890: LD_ADDR_VAR 0 4
51894: PUSH
51895: LD_VAR 0 2
51899: PUSH
51900: FOR_IN
51901: IFFALSE 51949
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
51903: LD_ADDR_EXP 40
51907: PUSH
51908: LD_EXP 40
51912: PPUSH
51913: LD_VAR 0 1
51917: PUSH
51918: LD_EXP 40
51922: PUSH
51923: LD_VAR 0 1
51927: ARRAY
51928: PUSH
51929: LD_INT 1
51931: PLUS
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PPUSH
51937: LD_VAR 0 4
51941: PPUSH
51942: CALL 7996 0 3
51946: ST_TO_ADDR
51947: GO 51900
51949: POP
51950: POP
// end ; end_of_file
51951: LD_VAR 0 3
51955: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
51956: LD_INT 0
51958: PPUSH
51959: PPUSH
51960: PPUSH
// if not mc_bases then
51961: LD_EXP 7
51965: NOT
51966: IFFALSE 51970
// exit ;
51968: GO 52135
// for i = 1 to mc_bases do
51970: LD_ADDR_VAR 0 4
51974: PUSH
51975: DOUBLE
51976: LD_INT 1
51978: DEC
51979: ST_TO_ADDR
51980: LD_EXP 7
51984: PUSH
51985: FOR_TO
51986: IFFALSE 52133
// begin if sci in mc_bases [ i ] then
51988: LD_VAR 0 2
51992: PUSH
51993: LD_EXP 7
51997: PUSH
51998: LD_VAR 0 4
52002: ARRAY
52003: IN
52004: IFFALSE 52131
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
52006: LD_ADDR_EXP 35
52010: PUSH
52011: LD_EXP 35
52015: PPUSH
52016: LD_VAR 0 4
52020: PUSH
52021: LD_EXP 35
52025: PUSH
52026: LD_VAR 0 4
52030: ARRAY
52031: PUSH
52032: LD_INT 1
52034: PLUS
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PPUSH
52040: LD_VAR 0 1
52044: PPUSH
52045: CALL 7996 0 3
52049: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
52050: LD_ADDR_VAR 0 5
52054: PUSH
52055: LD_EXP 7
52059: PUSH
52060: LD_VAR 0 4
52064: ARRAY
52065: PPUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 30
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 30
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: LIST
52093: PPUSH
52094: CALL_OW 72
52098: PPUSH
52099: LD_VAR 0 1
52103: PPUSH
52104: CALL_OW 74
52108: ST_TO_ADDR
// if tmp then
52109: LD_VAR 0 5
52113: IFFALSE 52129
// ComStandNearbyBuilding ( ape , tmp ) ;
52115: LD_VAR 0 1
52119: PPUSH
52120: LD_VAR 0 5
52124: PPUSH
52125: CALL 2775 0 2
// break ;
52129: GO 52133
// end ; end ;
52131: GO 51985
52133: POP
52134: POP
// end ;
52135: LD_VAR 0 3
52139: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
52140: LD_INT 0
52142: PPUSH
52143: PPUSH
52144: PPUSH
// if not mc_bases then
52145: LD_EXP 7
52149: NOT
52150: IFFALSE 52154
// exit ;
52152: GO 52243
// for i = 1 to mc_bases do
52154: LD_ADDR_VAR 0 4
52158: PUSH
52159: DOUBLE
52160: LD_INT 1
52162: DEC
52163: ST_TO_ADDR
52164: LD_EXP 7
52168: PUSH
52169: FOR_TO
52170: IFFALSE 52241
// begin if building in mc_busy_turret_list [ i ] then
52172: LD_VAR 0 1
52176: PUSH
52177: LD_EXP 17
52181: PUSH
52182: LD_VAR 0 4
52186: ARRAY
52187: IN
52188: IFFALSE 52239
// begin tmp := mc_busy_turret_list [ i ] diff building ;
52190: LD_ADDR_VAR 0 5
52194: PUSH
52195: LD_EXP 17
52199: PUSH
52200: LD_VAR 0 4
52204: ARRAY
52205: PUSH
52206: LD_VAR 0 1
52210: DIFF
52211: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
52212: LD_ADDR_EXP 17
52216: PUSH
52217: LD_EXP 17
52221: PPUSH
52222: LD_VAR 0 4
52226: PPUSH
52227: LD_VAR 0 5
52231: PPUSH
52232: CALL_OW 1
52236: ST_TO_ADDR
// break ;
52237: GO 52241
// end ; end ;
52239: GO 52169
52241: POP
52242: POP
// end ;
52243: LD_VAR 0 3
52247: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
52248: LD_INT 0
52250: PPUSH
52251: PPUSH
52252: PPUSH
// if not mc_bases then
52253: LD_EXP 7
52257: NOT
52258: IFFALSE 52262
// exit ;
52260: GO 52461
// for i = 1 to mc_bases do
52262: LD_ADDR_VAR 0 5
52266: PUSH
52267: DOUBLE
52268: LD_INT 1
52270: DEC
52271: ST_TO_ADDR
52272: LD_EXP 7
52276: PUSH
52277: FOR_TO
52278: IFFALSE 52459
// if building in mc_bases [ i ] then
52280: LD_VAR 0 1
52284: PUSH
52285: LD_EXP 7
52289: PUSH
52290: LD_VAR 0 5
52294: ARRAY
52295: IN
52296: IFFALSE 52457
// begin tmp := mc_bases [ i ] diff building ;
52298: LD_ADDR_VAR 0 6
52302: PUSH
52303: LD_EXP 7
52307: PUSH
52308: LD_VAR 0 5
52312: ARRAY
52313: PUSH
52314: LD_VAR 0 1
52318: DIFF
52319: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
52320: LD_ADDR_EXP 7
52324: PUSH
52325: LD_EXP 7
52329: PPUSH
52330: LD_VAR 0 5
52334: PPUSH
52335: LD_VAR 0 6
52339: PPUSH
52340: CALL_OW 1
52344: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
52345: LD_VAR 0 1
52349: PUSH
52350: LD_EXP 15
52354: PUSH
52355: LD_VAR 0 5
52359: ARRAY
52360: IN
52361: IFFALSE 52400
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
52363: LD_ADDR_EXP 15
52367: PUSH
52368: LD_EXP 15
52372: PPUSH
52373: LD_VAR 0 5
52377: PPUSH
52378: LD_EXP 15
52382: PUSH
52383: LD_VAR 0 5
52387: ARRAY
52388: PUSH
52389: LD_VAR 0 1
52393: DIFF
52394: PPUSH
52395: CALL_OW 1
52399: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
52400: LD_VAR 0 1
52404: PUSH
52405: LD_EXP 16
52409: PUSH
52410: LD_VAR 0 5
52414: ARRAY
52415: IN
52416: IFFALSE 52455
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
52418: LD_ADDR_EXP 16
52422: PUSH
52423: LD_EXP 16
52427: PPUSH
52428: LD_VAR 0 5
52432: PPUSH
52433: LD_EXP 16
52437: PUSH
52438: LD_VAR 0 5
52442: ARRAY
52443: PUSH
52444: LD_VAR 0 1
52448: DIFF
52449: PPUSH
52450: CALL_OW 1
52454: ST_TO_ADDR
// break ;
52455: GO 52459
// end ;
52457: GO 52277
52459: POP
52460: POP
// end ;
52461: LD_VAR 0 4
52465: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
52466: LD_INT 0
52468: PPUSH
52469: PPUSH
52470: PPUSH
// if not mc_bases or not side in mc_sides then
52471: LD_EXP 7
52475: NOT
52476: PUSH
52477: LD_VAR 0 3
52481: PUSH
52482: LD_EXP 32
52486: IN
52487: NOT
52488: OR
52489: IFFALSE 52493
// exit ;
52491: GO 52616
// for i = 1 to mc_vehicles do
52493: LD_ADDR_VAR 0 6
52497: PUSH
52498: DOUBLE
52499: LD_INT 1
52501: DEC
52502: ST_TO_ADDR
52503: LD_EXP 25
52507: PUSH
52508: FOR_TO
52509: IFFALSE 52614
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
52511: LD_VAR 0 2
52515: PUSH
52516: LD_EXP 25
52520: PUSH
52521: LD_VAR 0 6
52525: ARRAY
52526: IN
52527: PUSH
52528: LD_VAR 0 1
52532: PUSH
52533: LD_EXP 25
52537: PUSH
52538: LD_VAR 0 6
52542: ARRAY
52543: IN
52544: OR
52545: IFFALSE 52612
// begin tmp := mc_vehicles [ i ] diff old ;
52547: LD_ADDR_VAR 0 7
52551: PUSH
52552: LD_EXP 25
52556: PUSH
52557: LD_VAR 0 6
52561: ARRAY
52562: PUSH
52563: LD_VAR 0 2
52567: DIFF
52568: ST_TO_ADDR
// tmp := tmp diff new ;
52569: LD_ADDR_VAR 0 7
52573: PUSH
52574: LD_VAR 0 7
52578: PUSH
52579: LD_VAR 0 1
52583: DIFF
52584: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
52585: LD_ADDR_EXP 25
52589: PUSH
52590: LD_EXP 25
52594: PPUSH
52595: LD_VAR 0 6
52599: PPUSH
52600: LD_VAR 0 7
52604: PPUSH
52605: CALL_OW 1
52609: ST_TO_ADDR
// break ;
52610: GO 52614
// end ;
52612: GO 52508
52614: POP
52615: POP
// end ;
52616: LD_VAR 0 5
52620: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
52621: LD_INT 0
52623: PPUSH
52624: PPUSH
52625: PPUSH
52626: PPUSH
// if not mc_bases then
52627: LD_EXP 7
52631: NOT
52632: IFFALSE 52636
// exit ;
52634: GO 52928
// side := GetSide ( vehicle ) ;
52636: LD_ADDR_VAR 0 5
52640: PUSH
52641: LD_VAR 0 1
52645: PPUSH
52646: CALL_OW 255
52650: ST_TO_ADDR
// for i = 1 to mc_bases do
52651: LD_ADDR_VAR 0 4
52655: PUSH
52656: DOUBLE
52657: LD_INT 1
52659: DEC
52660: ST_TO_ADDR
52661: LD_EXP 7
52665: PUSH
52666: FOR_TO
52667: IFFALSE 52926
// begin if factory in mc_bases [ i ] then
52669: LD_VAR 0 2
52673: PUSH
52674: LD_EXP 7
52678: PUSH
52679: LD_VAR 0 4
52683: ARRAY
52684: IN
52685: IFFALSE 52924
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
52687: LD_EXP 28
52691: PUSH
52692: LD_VAR 0 4
52696: ARRAY
52697: PUSH
52698: LD_EXP 18
52702: PUSH
52703: LD_VAR 0 4
52707: ARRAY
52708: LESS
52709: IFFALSE 52880
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
52711: LD_ADDR_EXP 28
52715: PUSH
52716: LD_EXP 28
52720: PPUSH
52721: LD_VAR 0 4
52725: PPUSH
52726: LD_EXP 28
52730: PUSH
52731: LD_VAR 0 4
52735: ARRAY
52736: PUSH
52737: LD_VAR 0 1
52741: ADD
52742: PPUSH
52743: CALL_OW 1
52747: ST_TO_ADDR
// if not mc_scan [ i ] then
52748: LD_EXP 29
52752: PUSH
52753: LD_VAR 0 4
52757: ARRAY
52758: NOT
52759: IFFALSE 52878
// begin if GetControl ( vehicle ) = control_remote then
52761: LD_VAR 0 1
52765: PPUSH
52766: CALL_OW 263
52770: PUSH
52771: LD_INT 2
52773: EQUAL
52774: IFFALSE 52794
// repeat wait ( 0 0$1 ) ;
52776: LD_INT 35
52778: PPUSH
52779: CALL_OW 67
// until IsControledBy ( vehicle ) ;
52783: LD_VAR 0 1
52787: PPUSH
52788: CALL_OW 312
52792: IFFALSE 52776
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
52794: LD_VAR 0 1
52798: PPUSH
52799: LD_EXP 30
52803: PUSH
52804: LD_VAR 0 4
52808: ARRAY
52809: PPUSH
52810: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
52814: LD_VAR 0 1
52818: PPUSH
52819: CALL_OW 263
52823: PUSH
52824: LD_INT 1
52826: NONEQUAL
52827: IFFALSE 52831
// break ;
52829: GO 52926
// repeat wait ( 0 0$1 ) ;
52831: LD_INT 35
52833: PPUSH
52834: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
52838: LD_VAR 0 1
52842: PPUSH
52843: LD_EXP 30
52847: PUSH
52848: LD_VAR 0 4
52852: ARRAY
52853: PPUSH
52854: CALL_OW 308
52858: IFFALSE 52831
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
52860: LD_VAR 0 1
52864: PPUSH
52865: CALL_OW 311
52869: PPUSH
52870: CALL_OW 121
// exit ;
52874: POP
52875: POP
52876: GO 52928
// end ; end else
52878: GO 52924
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
52880: LD_ADDR_EXP 25
52884: PUSH
52885: LD_EXP 25
52889: PPUSH
52890: LD_VAR 0 4
52894: PUSH
52895: LD_EXP 25
52899: PUSH
52900: LD_VAR 0 4
52904: ARRAY
52905: PUSH
52906: LD_INT 1
52908: PLUS
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PPUSH
52914: LD_VAR 0 1
52918: PPUSH
52919: CALL 7996 0 3
52923: ST_TO_ADDR
// end ; end ;
52924: GO 52666
52926: POP
52927: POP
// end ;
52928: LD_VAR 0 3
52932: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , depot ; begin
52933: LD_INT 0
52935: PPUSH
52936: PPUSH
52937: PPUSH
// if not mc_bases then
52938: LD_EXP 7
52942: NOT
52943: IFFALSE 52947
// exit ;
52945: GO 53162
// repeat wait ( 0 0$1 ) ;
52947: LD_INT 35
52949: PPUSH
52950: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
52954: LD_VAR 0 2
52958: PPUSH
52959: LD_VAR 0 3
52963: PPUSH
52964: CALL_OW 284
52968: IFFALSE 52947
// if GetResourceTypeXY ( x , y ) = mat_artefact then
52970: LD_VAR 0 2
52974: PPUSH
52975: LD_VAR 0 3
52979: PPUSH
52980: CALL_OW 283
52984: PUSH
52985: LD_INT 4
52987: EQUAL
52988: IFFALSE 52992
// exit ;
52990: GO 53162
// for i = 1 to mc_bases do
52992: LD_ADDR_VAR 0 7
52996: PUSH
52997: DOUBLE
52998: LD_INT 1
53000: DEC
53001: ST_TO_ADDR
53002: LD_EXP 7
53006: PUSH
53007: FOR_TO
53008: IFFALSE 53160
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
53010: LD_ADDR_VAR 0 8
53014: PUSH
53015: LD_EXP 7
53019: PUSH
53020: LD_VAR 0 7
53024: ARRAY
53025: PPUSH
53026: LD_INT 2
53028: PUSH
53029: LD_INT 30
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 30
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: LIST
53053: PPUSH
53054: CALL_OW 72
53058: ST_TO_ADDR
// if not depot then
53059: LD_VAR 0 8
53063: NOT
53064: IFFALSE 53068
// continue ;
53066: GO 53007
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
53068: LD_VAR 0 8
53072: PUSH
53073: LD_INT 1
53075: ARRAY
53076: PPUSH
53077: LD_VAR 0 2
53081: PPUSH
53082: LD_VAR 0 3
53086: PPUSH
53087: CALL_OW 297
53091: PUSH
53092: LD_INT 30
53094: LESS
53095: IFFALSE 53158
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
53097: LD_ADDR_EXP 23
53101: PUSH
53102: LD_EXP 23
53106: PPUSH
53107: LD_VAR 0 7
53111: PUSH
53112: LD_EXP 23
53116: PUSH
53117: LD_VAR 0 7
53121: ARRAY
53122: PUSH
53123: LD_INT 1
53125: PLUS
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PPUSH
53131: LD_VAR 0 4
53135: PUSH
53136: LD_VAR 0 2
53140: PUSH
53141: LD_VAR 0 3
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: LIST
53150: PPUSH
53151: CALL 7996 0 3
53155: ST_TO_ADDR
// break ;
53156: GO 53160
// end ; end ;
53158: GO 53007
53160: POP
53161: POP
// end ;
53162: LD_VAR 0 6
53166: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
53167: LD_INT 0
53169: PPUSH
53170: PPUSH
53171: PPUSH
53172: PPUSH
// side := GetSide ( lab ) ;
53173: LD_ADDR_VAR 0 4
53177: PUSH
53178: LD_VAR 0 2
53182: PPUSH
53183: CALL_OW 255
53187: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
53188: LD_VAR 0 4
53192: PUSH
53193: LD_EXP 32
53197: IN
53198: NOT
53199: PUSH
53200: LD_EXP 33
53204: NOT
53205: OR
53206: PUSH
53207: LD_EXP 7
53211: NOT
53212: OR
53213: IFFALSE 53217
// exit ;
53215: GO 53486
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
53217: LD_ADDR_EXP 33
53221: PUSH
53222: LD_EXP 33
53226: PPUSH
53227: LD_VAR 0 4
53231: PPUSH
53232: LD_EXP 33
53236: PUSH
53237: LD_VAR 0 4
53241: ARRAY
53242: PUSH
53243: LD_VAR 0 1
53247: DIFF
53248: PPUSH
53249: CALL_OW 1
53253: ST_TO_ADDR
// for i = 1 to mc_bases do
53254: LD_ADDR_VAR 0 5
53258: PUSH
53259: DOUBLE
53260: LD_INT 1
53262: DEC
53263: ST_TO_ADDR
53264: LD_EXP 7
53268: PUSH
53269: FOR_TO
53270: IFFALSE 53484
// begin if lab in mc_bases [ i ] then
53272: LD_VAR 0 2
53276: PUSH
53277: LD_EXP 7
53281: PUSH
53282: LD_VAR 0 5
53286: ARRAY
53287: IN
53288: IFFALSE 53482
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] and not mc_tech [ side ] [ 2 ] in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] then
53290: LD_VAR 0 1
53294: PUSH
53295: LD_INT 11
53297: PUSH
53298: LD_INT 4
53300: PUSH
53301: LD_INT 3
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: IN
53313: PUSH
53314: LD_EXP 36
53318: PUSH
53319: LD_VAR 0 5
53323: ARRAY
53324: AND
53325: PUSH
53326: LD_EXP 33
53330: PUSH
53331: LD_VAR 0 4
53335: ARRAY
53336: PUSH
53337: LD_INT 2
53339: ARRAY
53340: PUSH
53341: LD_INT 11
53343: PUSH
53344: LD_INT 4
53346: PUSH
53347: LD_INT 3
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: IN
53359: NOT
53360: AND
53361: IFFALSE 53482
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
53363: LD_ADDR_VAR 0 6
53367: PUSH
53368: LD_EXP 36
53372: PUSH
53373: LD_VAR 0 5
53377: ARRAY
53378: PUSH
53379: LD_INT 1
53381: ARRAY
53382: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
53383: LD_ADDR_EXP 36
53387: PUSH
53388: LD_EXP 36
53392: PPUSH
53393: LD_VAR 0 5
53397: PPUSH
53398: EMPTY
53399: PPUSH
53400: CALL_OW 1
53404: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
53405: LD_VAR 0 6
53409: PPUSH
53410: LD_INT 0
53412: PPUSH
53413: CALL_OW 109
// ComExitBuilding ( tmp ) ;
53417: LD_VAR 0 6
53421: PPUSH
53422: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
53426: LD_ADDR_EXP 35
53430: PUSH
53431: LD_EXP 35
53435: PPUSH
53436: LD_VAR 0 5
53440: PPUSH
53441: LD_EXP 35
53445: PUSH
53446: LD_VAR 0 5
53450: ARRAY
53451: PPUSH
53452: LD_INT 1
53454: PPUSH
53455: LD_VAR 0 6
53459: PPUSH
53460: CALL_OW 2
53464: PPUSH
53465: CALL_OW 1
53469: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
53470: LD_VAR 0 5
53474: PPUSH
53475: LD_INT 112
53477: PPUSH
53478: CALL 40373 0 2
// end ; end ; end ;
53482: GO 53269
53484: POP
53485: POP
// end ;
53486: LD_VAR 0 3
53490: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
53491: LD_INT 0
53493: PPUSH
53494: PPUSH
53495: PPUSH
53496: PPUSH
53497: PPUSH
53498: PPUSH
53499: PPUSH
53500: PPUSH
// if not mc_bases then
53501: LD_EXP 7
53505: NOT
53506: IFFALSE 53510
// exit ;
53508: GO 54435
// for i = 1 to mc_bases do
53510: LD_ADDR_VAR 0 3
53514: PUSH
53515: DOUBLE
53516: LD_INT 1
53518: DEC
53519: ST_TO_ADDR
53520: LD_EXP 7
53524: PUSH
53525: FOR_TO
53526: IFFALSE 54433
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
53528: LD_VAR 0 1
53532: PUSH
53533: LD_EXP 7
53537: PUSH
53538: LD_VAR 0 3
53542: ARRAY
53543: IN
53544: PUSH
53545: LD_VAR 0 1
53549: PUSH
53550: LD_EXP 14
53554: PUSH
53555: LD_VAR 0 3
53559: ARRAY
53560: IN
53561: OR
53562: PUSH
53563: LD_VAR 0 1
53567: PUSH
53568: LD_EXP 25
53572: PUSH
53573: LD_VAR 0 3
53577: ARRAY
53578: IN
53579: OR
53580: PUSH
53581: LD_VAR 0 1
53585: PUSH
53586: LD_EXP 35
53590: PUSH
53591: LD_VAR 0 3
53595: ARRAY
53596: IN
53597: OR
53598: PUSH
53599: LD_VAR 0 1
53603: PUSH
53604: LD_EXP 36
53608: PUSH
53609: LD_VAR 0 3
53613: ARRAY
53614: IN
53615: OR
53616: IFFALSE 54431
// begin if un in mc_ape [ i ] then
53618: LD_VAR 0 1
53622: PUSH
53623: LD_EXP 35
53627: PUSH
53628: LD_VAR 0 3
53632: ARRAY
53633: IN
53634: IFFALSE 53673
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
53636: LD_ADDR_EXP 35
53640: PUSH
53641: LD_EXP 35
53645: PPUSH
53646: LD_VAR 0 3
53650: PPUSH
53651: LD_EXP 35
53655: PUSH
53656: LD_VAR 0 3
53660: ARRAY
53661: PUSH
53662: LD_VAR 0 1
53666: DIFF
53667: PPUSH
53668: CALL_OW 1
53672: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
53673: LD_VAR 0 1
53677: PUSH
53678: LD_EXP 36
53682: PUSH
53683: LD_VAR 0 3
53687: ARRAY
53688: IN
53689: IFFALSE 53713
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
53691: LD_ADDR_EXP 36
53695: PUSH
53696: LD_EXP 36
53700: PPUSH
53701: LD_VAR 0 3
53705: PPUSH
53706: EMPTY
53707: PPUSH
53708: CALL_OW 1
53712: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
53713: LD_VAR 0 1
53717: PPUSH
53718: CALL_OW 247
53722: PUSH
53723: LD_INT 2
53725: EQUAL
53726: PUSH
53727: LD_VAR 0 1
53731: PPUSH
53732: CALL_OW 110
53736: PUSH
53737: LD_INT 20
53739: EQUAL
53740: AND
53741: IFFALSE 53844
// begin fac := MC_GetBuilding ( i , b_factory ) ;
53743: LD_ADDR_VAR 0 8
53747: PUSH
53748: LD_VAR 0 3
53752: PPUSH
53753: LD_INT 3
53755: PPUSH
53756: CALL 51731 0 2
53760: ST_TO_ADDR
// if fac then
53761: LD_VAR 0 8
53765: IFFALSE 53844
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
53767: LD_ADDR_VAR 0 9
53771: PUSH
53772: LD_VAR 0 8
53776: PPUSH
53777: LD_VAR 0 1
53781: PPUSH
53782: CALL_OW 265
53786: PPUSH
53787: LD_VAR 0 1
53791: PPUSH
53792: CALL_OW 262
53796: PPUSH
53797: LD_VAR 0 1
53801: PPUSH
53802: CALL_OW 263
53806: PPUSH
53807: LD_VAR 0 1
53811: PPUSH
53812: CALL_OW 264
53816: PPUSH
53817: CALL 5161 0 5
53821: ST_TO_ADDR
// if components then
53822: LD_VAR 0 9
53826: IFFALSE 53842
// MC_InsertProduceList ( i , components ) ;
53828: LD_VAR 0 3
53832: PPUSH
53833: LD_VAR 0 9
53837: PPUSH
53838: CALL 51394 0 2
// break ;
53842: GO 54433
// end ; end ; if GetType ( un ) = unit_building then
53844: LD_VAR 0 1
53848: PPUSH
53849: CALL_OW 247
53853: PUSH
53854: LD_INT 3
53856: EQUAL
53857: IFFALSE 54154
// begin btype := GetBType ( un ) ;
53859: LD_ADDR_VAR 0 5
53863: PUSH
53864: LD_VAR 0 1
53868: PPUSH
53869: CALL_OW 266
53873: ST_TO_ADDR
// if btype = b_warehouse then
53874: LD_VAR 0 5
53878: PUSH
53879: LD_INT 1
53881: EQUAL
53882: IFFALSE 53900
// begin btype := b_depot ;
53884: LD_ADDR_VAR 0 5
53888: PUSH
53889: LD_INT 0
53891: ST_TO_ADDR
// pos := 1 ;
53892: LD_ADDR_VAR 0 6
53896: PUSH
53897: LD_INT 1
53899: ST_TO_ADDR
// end ; if btype = b_factory then
53900: LD_VAR 0 5
53904: PUSH
53905: LD_INT 3
53907: EQUAL
53908: IFFALSE 53926
// begin btype := b_workshop ;
53910: LD_ADDR_VAR 0 5
53914: PUSH
53915: LD_INT 2
53917: ST_TO_ADDR
// pos := 1 ;
53918: LD_ADDR_VAR 0 6
53922: PUSH
53923: LD_INT 1
53925: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
53926: LD_VAR 0 5
53930: PUSH
53931: LD_INT 7
53933: PUSH
53934: LD_INT 8
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: IN
53941: IFFALSE 53951
// btype := b_lab ;
53943: LD_ADDR_VAR 0 5
53947: PUSH
53948: LD_INT 6
53950: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
53951: LD_ADDR_EXP 12
53955: PUSH
53956: LD_EXP 12
53960: PPUSH
53961: LD_VAR 0 3
53965: PUSH
53966: LD_EXP 12
53970: PUSH
53971: LD_VAR 0 3
53975: ARRAY
53976: PUSH
53977: LD_INT 1
53979: PLUS
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PPUSH
53985: LD_VAR 0 5
53989: PUSH
53990: LD_VAR 0 1
53994: PPUSH
53995: CALL_OW 250
53999: PUSH
54000: LD_VAR 0 1
54004: PPUSH
54005: CALL_OW 251
54009: PUSH
54010: LD_VAR 0 1
54014: PPUSH
54015: CALL_OW 254
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: PPUSH
54026: CALL 7996 0 3
54030: ST_TO_ADDR
// if pos = 1 then
54031: LD_VAR 0 6
54035: PUSH
54036: LD_INT 1
54038: EQUAL
54039: IFFALSE 54154
// begin tmp := mc_build_list [ i ] ;
54041: LD_ADDR_VAR 0 7
54045: PUSH
54046: LD_EXP 12
54050: PUSH
54051: LD_VAR 0 3
54055: ARRAY
54056: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
54057: LD_VAR 0 7
54061: PPUSH
54062: LD_INT 2
54064: PUSH
54065: LD_INT 30
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 30
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: LIST
54089: PPUSH
54090: CALL_OW 72
54094: IFFALSE 54104
// pos := 2 ;
54096: LD_ADDR_VAR 0 6
54100: PUSH
54101: LD_INT 2
54103: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
54104: LD_ADDR_VAR 0 7
54108: PUSH
54109: LD_VAR 0 7
54113: PPUSH
54114: LD_VAR 0 6
54118: PPUSH
54119: LD_VAR 0 7
54123: PPUSH
54124: CALL 7887 0 3
54128: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
54129: LD_ADDR_EXP 12
54133: PUSH
54134: LD_EXP 12
54138: PPUSH
54139: LD_VAR 0 3
54143: PPUSH
54144: LD_VAR 0 7
54148: PPUSH
54149: CALL_OW 1
54153: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
54154: LD_VAR 0 1
54158: PUSH
54159: LD_EXP 7
54163: PUSH
54164: LD_VAR 0 3
54168: ARRAY
54169: IN
54170: IFFALSE 54209
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
54172: LD_ADDR_EXP 7
54176: PUSH
54177: LD_EXP 7
54181: PPUSH
54182: LD_VAR 0 3
54186: PPUSH
54187: LD_EXP 7
54191: PUSH
54192: LD_VAR 0 3
54196: ARRAY
54197: PUSH
54198: LD_VAR 0 1
54202: DIFF
54203: PPUSH
54204: CALL_OW 1
54208: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
54209: LD_VAR 0 1
54213: PUSH
54214: LD_EXP 14
54218: PUSH
54219: LD_VAR 0 3
54223: ARRAY
54224: IN
54225: IFFALSE 54264
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
54227: LD_ADDR_EXP 14
54231: PUSH
54232: LD_EXP 14
54236: PPUSH
54237: LD_VAR 0 3
54241: PPUSH
54242: LD_EXP 14
54246: PUSH
54247: LD_VAR 0 3
54251: ARRAY
54252: PUSH
54253: LD_VAR 0 1
54257: DIFF
54258: PPUSH
54259: CALL_OW 1
54263: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
54264: LD_VAR 0 1
54268: PUSH
54269: LD_EXP 25
54273: PUSH
54274: LD_VAR 0 3
54278: ARRAY
54279: IN
54280: IFFALSE 54319
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
54282: LD_ADDR_EXP 25
54286: PUSH
54287: LD_EXP 25
54291: PPUSH
54292: LD_VAR 0 3
54296: PPUSH
54297: LD_EXP 25
54301: PUSH
54302: LD_VAR 0 3
54306: ARRAY
54307: PUSH
54308: LD_VAR 0 1
54312: DIFF
54313: PPUSH
54314: CALL_OW 1
54318: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
54319: LD_VAR 0 1
54323: PUSH
54324: LD_EXP 16
54328: PUSH
54329: LD_VAR 0 3
54333: ARRAY
54334: IN
54335: IFFALSE 54374
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
54337: LD_ADDR_EXP 16
54341: PUSH
54342: LD_EXP 16
54346: PPUSH
54347: LD_VAR 0 3
54351: PPUSH
54352: LD_EXP 16
54356: PUSH
54357: LD_VAR 0 3
54361: ARRAY
54362: PUSH
54363: LD_VAR 0 1
54367: DIFF
54368: PPUSH
54369: CALL_OW 1
54373: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
54374: LD_VAR 0 1
54378: PUSH
54379: LD_EXP 15
54383: PUSH
54384: LD_VAR 0 3
54388: ARRAY
54389: IN
54390: IFFALSE 54429
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
54392: LD_ADDR_EXP 15
54396: PUSH
54397: LD_EXP 15
54401: PPUSH
54402: LD_VAR 0 3
54406: PPUSH
54407: LD_EXP 15
54411: PUSH
54412: LD_VAR 0 3
54416: ARRAY
54417: PUSH
54418: LD_VAR 0 1
54422: DIFF
54423: PPUSH
54424: CALL_OW 1
54428: ST_TO_ADDR
// end ; break ;
54429: GO 54433
// end ;
54431: GO 53525
54433: POP
54434: POP
// end ;
54435: LD_VAR 0 2
54439: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
54440: LD_INT 0
54442: PPUSH
54443: PPUSH
54444: PPUSH
// if not mc_bases then
54445: LD_EXP 7
54449: NOT
54450: IFFALSE 54454
// exit ;
54452: GO 54669
// for i = 1 to mc_bases do
54454: LD_ADDR_VAR 0 3
54458: PUSH
54459: DOUBLE
54460: LD_INT 1
54462: DEC
54463: ST_TO_ADDR
54464: LD_EXP 7
54468: PUSH
54469: FOR_TO
54470: IFFALSE 54667
// begin if building in mc_construct_list [ i ] then
54472: LD_VAR 0 1
54476: PUSH
54477: LD_EXP 14
54481: PUSH
54482: LD_VAR 0 3
54486: ARRAY
54487: IN
54488: IFFALSE 54665
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
54490: LD_ADDR_EXP 14
54494: PUSH
54495: LD_EXP 14
54499: PPUSH
54500: LD_VAR 0 3
54504: PPUSH
54505: LD_EXP 14
54509: PUSH
54510: LD_VAR 0 3
54514: ARRAY
54515: PUSH
54516: LD_VAR 0 1
54520: DIFF
54521: PPUSH
54522: CALL_OW 1
54526: ST_TO_ADDR
// if building in mc_lab [ i ] then
54527: LD_VAR 0 1
54531: PUSH
54532: LD_EXP 39
54536: PUSH
54537: LD_VAR 0 3
54541: ARRAY
54542: IN
54543: IFFALSE 54598
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
54545: LD_ADDR_EXP 40
54549: PUSH
54550: LD_EXP 40
54554: PPUSH
54555: LD_VAR 0 3
54559: PPUSH
54560: LD_EXP 40
54564: PUSH
54565: LD_VAR 0 3
54569: ARRAY
54570: PPUSH
54571: LD_INT 1
54573: PPUSH
54574: LD_EXP 40
54578: PUSH
54579: LD_VAR 0 3
54583: ARRAY
54584: PPUSH
54585: LD_INT 0
54587: PPUSH
54588: CALL 6979 0 4
54592: PPUSH
54593: CALL_OW 1
54597: ST_TO_ADDR
// if not building in mc_bases [ i ] then
54598: LD_VAR 0 1
54602: PUSH
54603: LD_EXP 7
54607: PUSH
54608: LD_VAR 0 3
54612: ARRAY
54613: IN
54614: NOT
54615: IFFALSE 54661
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
54617: LD_ADDR_EXP 7
54621: PUSH
54622: LD_EXP 7
54626: PPUSH
54627: LD_VAR 0 3
54631: PUSH
54632: LD_EXP 7
54636: PUSH
54637: LD_VAR 0 3
54641: ARRAY
54642: PUSH
54643: LD_INT 1
54645: PLUS
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PPUSH
54651: LD_VAR 0 1
54655: PPUSH
54656: CALL 7996 0 3
54660: ST_TO_ADDR
// exit ;
54661: POP
54662: POP
54663: GO 54669
// end ; end ;
54665: GO 54469
54667: POP
54668: POP
// end ;
54669: LD_VAR 0 2
54673: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
54674: LD_INT 0
54676: PPUSH
54677: PPUSH
54678: PPUSH
54679: PPUSH
54680: PPUSH
54681: PPUSH
54682: PPUSH
// if not mc_bases then
54683: LD_EXP 7
54687: NOT
54688: IFFALSE 54692
// exit ;
54690: GO 55353
// for i = 1 to mc_bases do
54692: LD_ADDR_VAR 0 3
54696: PUSH
54697: DOUBLE
54698: LD_INT 1
54700: DEC
54701: ST_TO_ADDR
54702: LD_EXP 7
54706: PUSH
54707: FOR_TO
54708: IFFALSE 55351
// begin if building in mc_construct_list [ i ] then
54710: LD_VAR 0 1
54714: PUSH
54715: LD_EXP 14
54719: PUSH
54720: LD_VAR 0 3
54724: ARRAY
54725: IN
54726: IFFALSE 55349
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
54728: LD_ADDR_EXP 14
54732: PUSH
54733: LD_EXP 14
54737: PPUSH
54738: LD_VAR 0 3
54742: PPUSH
54743: LD_EXP 14
54747: PUSH
54748: LD_VAR 0 3
54752: ARRAY
54753: PUSH
54754: LD_VAR 0 1
54758: DIFF
54759: PPUSH
54760: CALL_OW 1
54764: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
54765: LD_ADDR_EXP 7
54769: PUSH
54770: LD_EXP 7
54774: PPUSH
54775: LD_VAR 0 3
54779: PUSH
54780: LD_EXP 7
54784: PUSH
54785: LD_VAR 0 3
54789: ARRAY
54790: PUSH
54791: LD_INT 1
54793: PLUS
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PPUSH
54799: LD_VAR 0 1
54803: PPUSH
54804: CALL 7996 0 3
54808: ST_TO_ADDR
// btype := GetBType ( building ) ;
54809: LD_ADDR_VAR 0 5
54813: PUSH
54814: LD_VAR 0 1
54818: PPUSH
54819: CALL_OW 266
54823: ST_TO_ADDR
// side := GetSide ( building ) ;
54824: LD_ADDR_VAR 0 8
54828: PUSH
54829: LD_VAR 0 1
54833: PPUSH
54834: CALL_OW 255
54838: ST_TO_ADDR
// if btype = b_lab then
54839: LD_VAR 0 5
54843: PUSH
54844: LD_INT 6
54846: EQUAL
54847: IFFALSE 54897
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
54849: LD_ADDR_EXP 39
54853: PUSH
54854: LD_EXP 39
54858: PPUSH
54859: LD_VAR 0 3
54863: PUSH
54864: LD_EXP 39
54868: PUSH
54869: LD_VAR 0 3
54873: ARRAY
54874: PUSH
54875: LD_INT 1
54877: PLUS
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PPUSH
54883: LD_VAR 0 1
54887: PPUSH
54888: CALL 7996 0 3
54892: ST_TO_ADDR
// exit ;
54893: POP
54894: POP
54895: GO 55353
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
54897: LD_VAR 0 5
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: LD_INT 4
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: IN
54916: IFFALSE 55040
// begin if btype = b_armoury then
54918: LD_VAR 0 5
54922: PUSH
54923: LD_INT 4
54925: EQUAL
54926: IFFALSE 54936
// btype := b_barracks ;
54928: LD_ADDR_VAR 0 5
54932: PUSH
54933: LD_INT 5
54935: ST_TO_ADDR
// if btype = b_depot then
54936: LD_VAR 0 5
54940: PUSH
54941: LD_INT 0
54943: EQUAL
54944: IFFALSE 54954
// btype := b_warehouse ;
54946: LD_ADDR_VAR 0 5
54950: PUSH
54951: LD_INT 1
54953: ST_TO_ADDR
// if btype = b_workshop then
54954: LD_VAR 0 5
54958: PUSH
54959: LD_INT 2
54961: EQUAL
54962: IFFALSE 54972
// btype := b_factory ;
54964: LD_ADDR_VAR 0 5
54968: PUSH
54969: LD_INT 3
54971: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
54972: LD_VAR 0 5
54976: PPUSH
54977: LD_VAR 0 8
54981: PPUSH
54982: CALL_OW 323
54986: PUSH
54987: LD_INT 1
54989: EQUAL
54990: IFFALSE 55036
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
54992: LD_ADDR_EXP 38
54996: PUSH
54997: LD_EXP 38
55001: PPUSH
55002: LD_VAR 0 3
55006: PUSH
55007: LD_EXP 38
55011: PUSH
55012: LD_VAR 0 3
55016: ARRAY
55017: PUSH
55018: LD_INT 1
55020: PLUS
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PPUSH
55026: LD_VAR 0 1
55030: PPUSH
55031: CALL 7996 0 3
55035: ST_TO_ADDR
// exit ;
55036: POP
55037: POP
55038: GO 55353
// end ; if btype in [ b_bunker , b_turret ] then
55040: LD_VAR 0 5
55044: PUSH
55045: LD_INT 32
55047: PUSH
55048: LD_INT 33
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: IN
55055: IFFALSE 55345
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
55057: LD_ADDR_EXP 15
55061: PUSH
55062: LD_EXP 15
55066: PPUSH
55067: LD_VAR 0 3
55071: PUSH
55072: LD_EXP 15
55076: PUSH
55077: LD_VAR 0 3
55081: ARRAY
55082: PUSH
55083: LD_INT 1
55085: PLUS
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PPUSH
55091: LD_VAR 0 1
55095: PPUSH
55096: CALL 7996 0 3
55100: ST_TO_ADDR
// if btype = b_bunker then
55101: LD_VAR 0 5
55105: PUSH
55106: LD_INT 32
55108: EQUAL
55109: IFFALSE 55345
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
55111: LD_ADDR_EXP 16
55115: PUSH
55116: LD_EXP 16
55120: PPUSH
55121: LD_VAR 0 3
55125: PUSH
55126: LD_EXP 16
55130: PUSH
55131: LD_VAR 0 3
55135: ARRAY
55136: PUSH
55137: LD_INT 1
55139: PLUS
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PPUSH
55145: LD_VAR 0 1
55149: PPUSH
55150: CALL 7996 0 3
55154: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
55155: LD_ADDR_VAR 0 6
55159: PUSH
55160: LD_EXP 7
55164: PUSH
55165: LD_VAR 0 3
55169: ARRAY
55170: PPUSH
55171: LD_INT 25
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 3
55183: PUSH
55184: LD_INT 54
55186: PUSH
55187: EMPTY
55188: LIST
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PPUSH
55198: CALL_OW 72
55202: ST_TO_ADDR
// if tmp then
55203: LD_VAR 0 6
55207: IFFALSE 55213
// exit ;
55209: POP
55210: POP
55211: GO 55353
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
55213: LD_ADDR_VAR 0 6
55217: PUSH
55218: LD_EXP 7
55222: PUSH
55223: LD_VAR 0 3
55227: ARRAY
55228: PPUSH
55229: LD_INT 2
55231: PUSH
55232: LD_INT 30
55234: PUSH
55235: LD_INT 4
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 30
55244: PUSH
55245: LD_INT 5
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: LIST
55256: PPUSH
55257: CALL_OW 72
55261: ST_TO_ADDR
// if not tmp then
55262: LD_VAR 0 6
55266: NOT
55267: IFFALSE 55273
// exit ;
55269: POP
55270: POP
55271: GO 55353
// for j in tmp do
55273: LD_ADDR_VAR 0 4
55277: PUSH
55278: LD_VAR 0 6
55282: PUSH
55283: FOR_IN
55284: IFFALSE 55343
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
55286: LD_ADDR_VAR 0 7
55290: PUSH
55291: LD_VAR 0 4
55295: PPUSH
55296: CALL_OW 313
55300: PPUSH
55301: LD_INT 25
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PPUSH
55311: CALL_OW 72
55315: ST_TO_ADDR
// if units then
55316: LD_VAR 0 7
55320: IFFALSE 55341
// begin ComExitBuilding ( units [ 1 ] ) ;
55322: LD_VAR 0 7
55326: PUSH
55327: LD_INT 1
55329: ARRAY
55330: PPUSH
55331: CALL_OW 122
// exit ;
55335: POP
55336: POP
55337: POP
55338: POP
55339: GO 55353
// end ; end ;
55341: GO 55283
55343: POP
55344: POP
// end ; end ; exit ;
55345: POP
55346: POP
55347: GO 55353
// end ; end ;
55349: GO 54707
55351: POP
55352: POP
// end ;
55353: LD_VAR 0 2
55357: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
55358: LD_INT 0
55360: PPUSH
55361: PPUSH
55362: PPUSH
55363: PPUSH
55364: PPUSH
55365: PPUSH
55366: PPUSH
// if not mc_bases then
55367: LD_EXP 7
55371: NOT
55372: IFFALSE 55376
// exit ;
55374: GO 55607
// btype := GetBType ( building ) ;
55376: LD_ADDR_VAR 0 6
55380: PUSH
55381: LD_VAR 0 1
55385: PPUSH
55386: CALL_OW 266
55390: ST_TO_ADDR
// x := GetX ( building ) ;
55391: LD_ADDR_VAR 0 7
55395: PUSH
55396: LD_VAR 0 1
55400: PPUSH
55401: CALL_OW 250
55405: ST_TO_ADDR
// y := GetY ( building ) ;
55406: LD_ADDR_VAR 0 8
55410: PUSH
55411: LD_VAR 0 1
55415: PPUSH
55416: CALL_OW 251
55420: ST_TO_ADDR
// d := GetDir ( building ) ;
55421: LD_ADDR_VAR 0 9
55425: PUSH
55426: LD_VAR 0 1
55430: PPUSH
55431: CALL_OW 254
55435: ST_TO_ADDR
// for i = 1 to mc_bases do
55436: LD_ADDR_VAR 0 4
55440: PUSH
55441: DOUBLE
55442: LD_INT 1
55444: DEC
55445: ST_TO_ADDR
55446: LD_EXP 7
55450: PUSH
55451: FOR_TO
55452: IFFALSE 55605
// begin if not mc_build_list [ i ] then
55454: LD_EXP 12
55458: PUSH
55459: LD_VAR 0 4
55463: ARRAY
55464: NOT
55465: IFFALSE 55469
// continue ;
55467: GO 55451
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
55469: LD_VAR 0 6
55473: PUSH
55474: LD_VAR 0 7
55478: PUSH
55479: LD_VAR 0 8
55483: PUSH
55484: LD_VAR 0 9
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: PPUSH
55495: LD_EXP 12
55499: PUSH
55500: LD_VAR 0 4
55504: ARRAY
55505: PUSH
55506: LD_INT 1
55508: ARRAY
55509: PPUSH
55510: CALL 13594 0 2
55514: IFFALSE 55603
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
55516: LD_ADDR_EXP 12
55520: PUSH
55521: LD_EXP 12
55525: PPUSH
55526: LD_VAR 0 4
55530: PPUSH
55531: LD_EXP 12
55535: PUSH
55536: LD_VAR 0 4
55540: ARRAY
55541: PPUSH
55542: LD_INT 1
55544: PPUSH
55545: CALL_OW 3
55549: PPUSH
55550: CALL_OW 1
55554: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
55555: LD_ADDR_EXP 14
55559: PUSH
55560: LD_EXP 14
55564: PPUSH
55565: LD_VAR 0 4
55569: PUSH
55570: LD_EXP 14
55574: PUSH
55575: LD_VAR 0 4
55579: ARRAY
55580: PUSH
55581: LD_INT 1
55583: PLUS
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PPUSH
55589: LD_VAR 0 1
55593: PPUSH
55594: CALL 7996 0 3
55598: ST_TO_ADDR
// exit ;
55599: POP
55600: POP
55601: GO 55607
// end ; end ;
55603: GO 55451
55605: POP
55606: POP
// end ;
55607: LD_VAR 0 3
55611: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
55612: LD_INT 0
55614: PPUSH
55615: PPUSH
55616: PPUSH
// if not mc_bases then
55617: LD_EXP 7
55621: NOT
55622: IFFALSE 55626
// exit ;
55624: GO 55816
// for i = 1 to mc_bases do
55626: LD_ADDR_VAR 0 4
55630: PUSH
55631: DOUBLE
55632: LD_INT 1
55634: DEC
55635: ST_TO_ADDR
55636: LD_EXP 7
55640: PUSH
55641: FOR_TO
55642: IFFALSE 55729
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
55644: LD_VAR 0 1
55648: PUSH
55649: LD_EXP 15
55653: PUSH
55654: LD_VAR 0 4
55658: ARRAY
55659: IN
55660: PUSH
55661: LD_VAR 0 1
55665: PUSH
55666: LD_EXP 16
55670: PUSH
55671: LD_VAR 0 4
55675: ARRAY
55676: IN
55677: NOT
55678: AND
55679: IFFALSE 55727
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
55681: LD_ADDR_EXP 16
55685: PUSH
55686: LD_EXP 16
55690: PPUSH
55691: LD_VAR 0 4
55695: PUSH
55696: LD_EXP 16
55700: PUSH
55701: LD_VAR 0 4
55705: ARRAY
55706: PUSH
55707: LD_INT 1
55709: PLUS
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PPUSH
55715: LD_VAR 0 1
55719: PPUSH
55720: CALL 7996 0 3
55724: ST_TO_ADDR
// break ;
55725: GO 55729
// end ; end ;
55727: GO 55641
55729: POP
55730: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
55731: LD_VAR 0 1
55735: PPUSH
55736: CALL_OW 257
55740: PUSH
55741: LD_EXP 32
55745: IN
55746: PUSH
55747: LD_VAR 0 1
55751: PPUSH
55752: CALL_OW 266
55756: PUSH
55757: LD_INT 5
55759: EQUAL
55760: AND
55761: PUSH
55762: LD_VAR 0 2
55766: PPUSH
55767: CALL_OW 110
55771: PUSH
55772: LD_INT 18
55774: NONEQUAL
55775: AND
55776: IFFALSE 55816
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
55778: LD_VAR 0 2
55782: PPUSH
55783: CALL_OW 257
55787: PUSH
55788: LD_INT 5
55790: PUSH
55791: LD_INT 8
55793: PUSH
55794: LD_INT 9
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: LIST
55801: IN
55802: IFFALSE 55816
// SetClass ( unit , 1 ) ;
55804: LD_VAR 0 2
55808: PPUSH
55809: LD_INT 1
55811: PPUSH
55812: CALL_OW 336
// end ;
55816: LD_VAR 0 3
55820: RET
// export function MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
55821: LD_INT 0
55823: PPUSH
55824: PPUSH
// if not mc_bases then
55825: LD_EXP 7
55829: NOT
55830: IFFALSE 55834
// exit ;
55832: GO 55950
// if GetLives ( abandoned_vehicle ) > 250 then
55834: LD_VAR 0 2
55838: PPUSH
55839: CALL_OW 256
55843: PUSH
55844: LD_INT 250
55846: GREATER
55847: IFFALSE 55851
// exit ;
55849: GO 55950
// for i = 1 to mc_bases do
55851: LD_ADDR_VAR 0 6
55855: PUSH
55856: DOUBLE
55857: LD_INT 1
55859: DEC
55860: ST_TO_ADDR
55861: LD_EXP 7
55865: PUSH
55866: FOR_TO
55867: IFFALSE 55948
// begin if driver in mc_bases [ i ] then
55869: LD_VAR 0 1
55873: PUSH
55874: LD_EXP 7
55878: PUSH
55879: LD_VAR 0 6
55883: ARRAY
55884: IN
55885: IFFALSE 55946
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
55887: LD_VAR 0 1
55891: PPUSH
55892: LD_EXP 7
55896: PUSH
55897: LD_VAR 0 6
55901: ARRAY
55902: PPUSH
55903: LD_INT 2
55905: PUSH
55906: LD_INT 30
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 30
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: LIST
55930: PPUSH
55931: CALL_OW 72
55935: PUSH
55936: LD_INT 1
55938: ARRAY
55939: PPUSH
55940: CALL_OW 112
// break ;
55944: GO 55948
// end ; end ;
55946: GO 55866
55948: POP
55949: POP
// end ;
55950: LD_VAR 0 5
55954: RET
