// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitVariables ;
   8: CALL 587 0 0
// InitMacro ;
  12: CALL 52082 0 0
// PrepareNature ( 3 , 3 , 3 , 4 , 3 , 0 , 0 , nature_area , 0 ) ;
  16: LD_INT 3
  18: PPUSH
  19: LD_INT 3
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 4
  27: PPUSH
  28: LD_INT 3
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: LD_INT 5
  39: PPUSH
  40: LD_INT 0
  42: PPUSH
  43: CALL 47033 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_russian , 0 ) ;
  47: LD_INT 0
  49: PPUSH
  50: LD_INT 0
  52: PPUSH
  53: LD_INT 5
  55: PPUSH
  56: LD_INT 0
  58: PPUSH
  59: LD_INT 0
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: LD_INT 0
  67: PPUSH
  68: LD_INT 8
  70: PPUSH
  71: LD_INT 0
  73: PPUSH
  74: CALL 47033 0 9
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 1 , 0 , area_apeman_arabian , 0 ) ;
  78: LD_INT 0
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 6
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: LD_INT 0
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: LD_INT 6
 101: PPUSH
 102: LD_INT 0
 104: PPUSH
 105: CALL 47033 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_alliance , 0 ) ;
 109: LD_INT 0
 111: PPUSH
 112: LD_INT 0
 114: PPUSH
 115: LD_INT 5
 117: PPUSH
 118: LD_INT 0
 120: PPUSH
 121: LD_INT 0
 123: PPUSH
 124: LD_INT 0
 126: PPUSH
 127: LD_INT 0
 129: PPUSH
 130: LD_INT 12
 132: PPUSH
 133: LD_INT 0
 135: PPUSH
 136: CALL 47033 0 9
// PrepareArabian ;
 140: CALL 3421 0 0
// PrepareRussian ;
 144: CALL 2548 0 0
// PrepareAlliance ;
 148: CALL 697 0 0
// MC_Start ( ) ;
 152: CALL 53140 0 0
// if debug then
 156: LD_EXP 1
 160: IFFALSE 169
// FogOff ( 1 ) ;
 162: LD_INT 1
 164: PPUSH
 165: CALL_OW 344
// Action ;
 169: CALL 6615 0 0
// end ;
 173: END
// export function CustomInitMacro ; var i ; begin
 174: LD_INT 0
 176: PPUSH
 177: PPUSH
// mc_parking := [ parking_arabian , parking_russian ] ;
 178: LD_ADDR_EXP 81
 182: PUSH
 183: LD_INT 1
 185: PUSH
 186: LD_INT 2
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: ST_TO_ADDR
// mc_scan_area := [ area_base_arabian , area_base_russian ] ;
 193: LD_ADDR_EXP 82
 197: PUSH
 198: LD_INT 3
 200: PUSH
 201: LD_INT 4
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 12 , 15 , 18 ] [ Difficulty ] , minefield ) ;
 208: LD_INT 1
 210: PPUSH
 211: LD_INT 12
 213: PUSH
 214: LD_INT 15
 216: PUSH
 217: LD_INT 18
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: PUSH
 225: LD_OWVAR 67
 229: ARRAY
 230: PPUSH
 231: LD_INT 7
 233: PPUSH
 234: CALL 67714 0 3
// MC_SetDefenderList ( 1 , arabian_guard ) ;
 238: LD_INT 1
 240: PPUSH
 241: LD_EXP 53
 245: PPUSH
 246: CALL 68162 0 2
// MC_SetTame ( 1 , area_apeman_arabian ) ;
 250: LD_INT 1
 252: PPUSH
 253: LD_INT 6
 255: PPUSH
 256: CALL 68615 0 2
// MC_SetCratesArea ( 1 , [ area_collect_arabian ] ) ;
 260: LD_INT 1
 262: PPUSH
 263: LD_INT 9
 265: PUSH
 266: EMPTY
 267: LIST
 268: PPUSH
 269: CALL 68884 0 2
// MC_InsertProduceList ( 1 , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 13
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: LD_INT 2
 284: PUSH
 285: LD_INT 32
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL 68099 0 2
// MC_SetLabKind ( 2 , [ b_lab_computer , b_lab_spacetime , b_lab_weapon , b_lab_siberium ] ) ;
 298: LD_INT 2
 300: PPUSH
 301: LD_INT 12
 303: PUSH
 304: LD_INT 14
 306: PUSH
 307: LD_INT 10
 309: PUSH
 310: LD_INT 11
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: PPUSH
 319: CALL 68791 0 2
// MC_SetDefenderList ( 2 , russian_guard ) ;
 323: LD_INT 2
 325: PPUSH
 326: LD_EXP 50
 330: PPUSH
 331: CALL 68162 0 2
// MC_SetTame ( 2 , area_apeman_russian ) ;
 335: LD_INT 2
 337: PPUSH
 338: LD_INT 8
 340: PPUSH
 341: CALL 68615 0 2
// MC_SetCratesArea ( 2 , [ area_collect_russian ] ) ;
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 10
 350: PUSH
 351: EMPTY
 352: LIST
 353: PPUSH
 354: CALL 68884 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 71 , 116 , 4 ] , [ b_armoury , 85 , 116 , 4 ] , [ b_bunker , 83 , 111 , 4 ] , [ b_bunker , 87 , 121 , 4 ] , [ b_turret , 88 , 128 , 4 ] , [ b_bunker , 59 , 89 , 3 ] , [ b_turret , 69 , 98 , 3 ] , [ b_turret , 77 , 103 , 3 ] , [ b_turret , 83 , 105 , 3 ] , [ b_turret , 71 , 125 , 5 ] ] ) ;
 358: LD_INT 2
 360: PPUSH
 361: LD_INT 6
 363: PUSH
 364: LD_INT 71
 366: PUSH
 367: LD_INT 116
 369: PUSH
 370: LD_INT 4
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_INT 4
 381: PUSH
 382: LD_INT 85
 384: PUSH
 385: LD_INT 116
 387: PUSH
 388: LD_INT 4
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 32
 399: PUSH
 400: LD_INT 83
 402: PUSH
 403: LD_INT 111
 405: PUSH
 406: LD_INT 4
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 32
 417: PUSH
 418: LD_INT 87
 420: PUSH
 421: LD_INT 121
 423: PUSH
 424: LD_INT 4
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 33
 435: PUSH
 436: LD_INT 88
 438: PUSH
 439: LD_INT 128
 441: PUSH
 442: LD_INT 4
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 32
 453: PUSH
 454: LD_INT 59
 456: PUSH
 457: LD_INT 89
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 33
 471: PUSH
 472: LD_INT 69
 474: PUSH
 475: LD_INT 98
 477: PUSH
 478: LD_INT 3
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 33
 489: PUSH
 490: LD_INT 77
 492: PUSH
 493: LD_INT 103
 495: PUSH
 496: LD_INT 3
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_INT 33
 507: PUSH
 508: LD_INT 83
 510: PUSH
 511: LD_INT 105
 513: PUSH
 514: LD_INT 3
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 33
 525: PUSH
 526: LD_INT 71
 528: PUSH
 529: LD_INT 125
 531: PUSH
 532: LD_INT 5
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL 67924 0 2
// MC_InsertProduceList ( 2 , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ) ;
 557: LD_INT 2
 559: PPUSH
 560: LD_INT 21
 562: PUSH
 563: LD_INT 1
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 51
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL 68099 0 2
// end ;
 582: LD_VAR 0 1
 586: RET
// export debug , game , freedom , gossudarov_arrive , ru_lab_builded , player_spotted , first_attack , ar_base_spotted , ar_active_attack , ar_attackers , first_powell_attack , abdul_escaped , loss_counter ; function InitVariables ; begin
 587: LD_INT 0
 589: PPUSH
// debug := false ;
 590: LD_ADDR_EXP 1
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// game := true ;
 598: LD_ADDR_EXP 2
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// gossudarov_arrive := false ;
 606: LD_ADDR_EXP 4
 610: PUSH
 611: LD_INT 0
 613: ST_TO_ADDR
// ru_lab_builded := false ;
 614: LD_ADDR_EXP 5
 618: PUSH
 619: LD_INT 0
 621: ST_TO_ADDR
// player_spotted := false ;
 622: LD_ADDR_EXP 6
 626: PUSH
 627: LD_INT 0
 629: ST_TO_ADDR
// first_attack := false ;
 630: LD_ADDR_EXP 7
 634: PUSH
 635: LD_INT 0
 637: ST_TO_ADDR
// ru_attackers := [ ] ;
 638: LD_ADDR_EXP 51
 642: PUSH
 643: EMPTY
 644: ST_TO_ADDR
// ar_base_spotted := false ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_INT 0
 652: ST_TO_ADDR
// ar_active_attack := false ;
 653: LD_ADDR_EXP 9
 657: PUSH
 658: LD_INT 0
 660: ST_TO_ADDR
// ar_attackers := [ ] ;
 661: LD_ADDR_EXP 10
 665: PUSH
 666: EMPTY
 667: ST_TO_ADDR
// first_powell_attack := false ;
 668: LD_ADDR_EXP 11
 672: PUSH
 673: LD_INT 0
 675: ST_TO_ADDR
// abdul_escaped := true ;
 676: LD_ADDR_EXP 12
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// loss_counter := 0 ;
 684: LD_ADDR_EXP 13
 688: PUSH
 689: LD_INT 0
 691: ST_TO_ADDR
// end ; end_of_file
 692: LD_VAR 0 1
 696: RET
// export JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export Gossudarov , Kirilenkova , Titov , Fadeev , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov ; export Burlak , Belkov , Gnyevko ; export Masha ; export function PrepareAlliance ; var veh , i , tmp ; begin
 697: LD_INT 0
 699: PPUSH
 700: PPUSH
 701: PPUSH
 702: PPUSH
// uc_side := 7 ;
 703: LD_ADDR_OWVAR 20
 707: PUSH
 708: LD_INT 7
 710: ST_TO_ADDR
// uc_nation := 1 ;
 711: LD_ADDR_OWVAR 21
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 12a_ ) ;
 719: LD_ADDR_EXP 14
 723: PUSH
 724: LD_STRING JMM
 726: PPUSH
 727: LD_EXP 1
 731: NOT
 732: PPUSH
 733: LD_STRING 12a_
 735: PPUSH
 736: CALL 13495 0 3
 740: ST_TO_ADDR
// PlaceUnitXY ( JMM , 71 , 23 , false ) ;
 741: LD_EXP 14
 745: PPUSH
 746: LD_INT 71
 748: PPUSH
 749: LD_INT 23
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL_OW 48
// SetClass ( JMM , 2 ) ;
 759: LD_EXP 14
 763: PPUSH
 764: LD_INT 2
 766: PPUSH
 767: CALL_OW 336
// Roth := PrepareUnit ( Roth , ( not debug ) , 12a_ ) ;
 771: LD_ADDR_EXP 15
 775: PUSH
 776: LD_STRING Roth
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_STRING 12a_
 787: PPUSH
 788: CALL 13495 0 3
 792: ST_TO_ADDR
// if Roth then
 793: LD_EXP 15
 797: IFFALSE 817
// PlaceUnitXY ( Roth , 71 , 21 , false ) ;
 799: LD_EXP 15
 803: PPUSH
 804: LD_INT 71
 806: PPUSH
 807: LD_INT 21
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL_OW 48
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 12a_ ) ;
 817: LD_ADDR_EXP 16
 821: PUSH
 822: LD_STRING Lisa
 824: PPUSH
 825: LD_EXP 1
 829: NOT
 830: PPUSH
 831: LD_STRING 12a_
 833: PPUSH
 834: CALL 13495 0 3
 838: ST_TO_ADDR
// if Lisa then
 839: LD_EXP 16
 843: IFFALSE 860
// PlaceUnitArea ( Lisa , alliance_start , false ) ;
 845: LD_EXP 16
 849: PPUSH
 850: LD_INT 13
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 49
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 12a_ ) ;
 860: LD_ADDR_EXP 17
 864: PUSH
 865: LD_STRING Donaldson
 867: PPUSH
 868: LD_EXP 1
 872: NOT
 873: PPUSH
 874: LD_STRING 12a_
 876: PPUSH
 877: CALL 13495 0 3
 881: ST_TO_ADDR
// if Donaldson then
 882: LD_EXP 17
 886: IFFALSE 903
// PlaceUnitArea ( Donaldson , alliance_start , false ) ;
 888: LD_EXP 17
 892: PPUSH
 893: LD_INT 13
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 49
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 12a_ ) ;
 903: LD_ADDR_EXP 18
 907: PUSH
 908: LD_STRING Bobby
 910: PPUSH
 911: LD_EXP 1
 915: NOT
 916: PPUSH
 917: LD_STRING 12a_
 919: PPUSH
 920: CALL 13495 0 3
 924: ST_TO_ADDR
// if Bobby then
 925: LD_EXP 18
 929: IFFALSE 946
// PlaceUnitArea ( Bobby , alliance_start , false ) ;
 931: LD_EXP 18
 935: PPUSH
 936: LD_INT 13
 938: PPUSH
 939: LD_INT 0
 941: PPUSH
 942: CALL_OW 49
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 12a_ ) ;
 946: LD_ADDR_EXP 19
 950: PUSH
 951: LD_STRING Cyrus
 953: PPUSH
 954: LD_EXP 1
 958: NOT
 959: PPUSH
 960: LD_STRING 12a_
 962: PPUSH
 963: CALL 13495 0 3
 967: ST_TO_ADDR
// if Cyrus then
 968: LD_EXP 19
 972: IFFALSE 989
// PlaceUnitArea ( Cyrus , alliance_start , false ) ;
 974: LD_EXP 19
 978: PPUSH
 979: LD_INT 13
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 49
// Denis := PrepareUnit ( Denis , ( not debug ) , 12a_ ) ;
 989: LD_ADDR_EXP 20
 993: PUSH
 994: LD_STRING Denis
 996: PPUSH
 997: LD_EXP 1
1001: NOT
1002: PPUSH
1003: LD_STRING 12a_
1005: PPUSH
1006: CALL 13495 0 3
1010: ST_TO_ADDR
// if Denis then
1011: LD_EXP 20
1015: IFFALSE 1032
// PlaceUnitArea ( Denis , alliance_start , false ) ;
1017: LD_EXP 20
1021: PPUSH
1022: LD_INT 13
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// Brown := PrepareUnit ( Brown , ( not debug ) , 12a_ ) ;
1032: LD_ADDR_EXP 21
1036: PUSH
1037: LD_STRING Brown
1039: PPUSH
1040: LD_EXP 1
1044: NOT
1045: PPUSH
1046: LD_STRING 12a_
1048: PPUSH
1049: CALL 13495 0 3
1053: ST_TO_ADDR
// if Brown then
1054: LD_EXP 21
1058: IFFALSE 1075
// PlaceUnitArea ( Brown , alliance_start , false ) ;
1060: LD_EXP 21
1064: PPUSH
1065: LD_INT 13
1067: PPUSH
1068: LD_INT 0
1070: PPUSH
1071: CALL_OW 49
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 12a_ ) ;
1075: LD_ADDR_EXP 22
1079: PUSH
1080: LD_STRING Gladstone
1082: PPUSH
1083: LD_EXP 1
1087: NOT
1088: PPUSH
1089: LD_STRING 12a_
1091: PPUSH
1092: CALL 13495 0 3
1096: ST_TO_ADDR
// if Gladstone then
1097: LD_EXP 22
1101: IFFALSE 1118
// PlaceUnitArea ( Gladstone , alliance_start , false ) ;
1103: LD_EXP 22
1107: PPUSH
1108: LD_INT 13
1110: PPUSH
1111: LD_INT 0
1113: PPUSH
1114: CALL_OW 49
// Houten := PrepareUnit ( Houten , ( not debug ) , 12a_ ) ;
1118: LD_ADDR_EXP 23
1122: PUSH
1123: LD_STRING Houten
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_STRING 12a_
1134: PPUSH
1135: CALL 13495 0 3
1139: ST_TO_ADDR
// if Houten then
1140: LD_EXP 23
1144: IFFALSE 1161
// PlaceUnitArea ( Houten , alliance_start , false ) ;
1146: LD_EXP 23
1150: PPUSH
1151: LD_INT 13
1153: PPUSH
1154: LD_INT 0
1156: PPUSH
1157: CALL_OW 49
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 12a_ ) ;
1161: LD_ADDR_EXP 24
1165: PUSH
1166: LD_STRING Cornel
1168: PPUSH
1169: LD_EXP 1
1173: NOT
1174: PPUSH
1175: LD_STRING 12a_
1177: PPUSH
1178: CALL 13495 0 3
1182: ST_TO_ADDR
// if Cornel then
1183: LD_EXP 24
1187: IFFALSE 1204
// PlaceUnitArea ( Cornel , alliance_start , false ) ;
1189: LD_EXP 24
1193: PPUSH
1194: LD_INT 13
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 49
// Gary := PrepareUnit ( Gary , ( not debug ) , 12a_ ) ;
1204: LD_ADDR_EXP 25
1208: PUSH
1209: LD_STRING Gary
1211: PPUSH
1212: LD_EXP 1
1216: NOT
1217: PPUSH
1218: LD_STRING 12a_
1220: PPUSH
1221: CALL 13495 0 3
1225: ST_TO_ADDR
// if Gary then
1226: LD_EXP 25
1230: IFFALSE 1247
// PlaceUnitArea ( Gary , alliance_start , false ) ;
1232: LD_EXP 25
1236: PPUSH
1237: LD_INT 13
1239: PPUSH
1240: LD_INT 0
1242: PPUSH
1243: CALL_OW 49
// Frank := PrepareUnit ( Frank , ( not debug ) , 12a_ ) ;
1247: LD_ADDR_EXP 26
1251: PUSH
1252: LD_STRING Frank
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_STRING 12a_
1263: PPUSH
1264: CALL 13495 0 3
1268: ST_TO_ADDR
// if Frank then
1269: LD_EXP 26
1273: IFFALSE 1290
// PlaceUnitArea ( Frank , alliance_start , false ) ;
1275: LD_EXP 26
1279: PPUSH
1280: LD_INT 13
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 49
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 12a_ ) ;
1290: LD_ADDR_EXP 27
1294: PUSH
1295: LD_STRING Kikuchi
1297: PPUSH
1298: LD_EXP 1
1302: NOT
1303: PPUSH
1304: LD_STRING 12a_
1306: PPUSH
1307: CALL 13495 0 3
1311: ST_TO_ADDR
// if Kikuchi then
1312: LD_EXP 27
1316: IFFALSE 1333
// PlaceUnitArea ( Kikuchi , alliance_start , false ) ;
1318: LD_EXP 27
1322: PPUSH
1323: LD_INT 13
1325: PPUSH
1326: LD_INT 0
1328: PPUSH
1329: CALL_OW 49
// Simms := PrepareUnit ( Simms , ( not debug ) , 12a_ ) ;
1333: LD_ADDR_EXP 28
1337: PUSH
1338: LD_STRING Simms
1340: PPUSH
1341: LD_EXP 1
1345: NOT
1346: PPUSH
1347: LD_STRING 12a_
1349: PPUSH
1350: CALL 13495 0 3
1354: ST_TO_ADDR
// if Simms then
1355: LD_EXP 28
1359: IFFALSE 1376
// PlaceUnitArea ( Simms , alliance_start , false ) ;
1361: LD_EXP 28
1365: PPUSH
1366: LD_INT 13
1368: PPUSH
1369: LD_INT 0
1371: PPUSH
1372: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 12a_ ) ;
1376: LD_ADDR_EXP 29
1380: PUSH
1381: LD_STRING Joan
1383: PPUSH
1384: LD_EXP 1
1388: NOT
1389: PPUSH
1390: LD_STRING 12a_
1392: PPUSH
1393: CALL 13495 0 3
1397: ST_TO_ADDR
// if Joan then
1398: LD_EXP 29
1402: IFFALSE 1419
// PlaceUnitArea ( Joan , alliance_start , false ) ;
1404: LD_EXP 29
1408: PPUSH
1409: LD_INT 13
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 12a_ ) ;
1419: LD_ADDR_EXP 30
1423: PUSH
1424: LD_STRING DeltaDoctor
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_STRING 12a_
1435: PPUSH
1436: CALL 13495 0 3
1440: ST_TO_ADDR
// if DeltaDoctor then
1441: LD_EXP 30
1445: IFFALSE 1462
// PlaceUnitArea ( DeltaDoctor , alliance_start , false ) ;
1447: LD_EXP 30
1451: PPUSH
1452: LD_INT 13
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// tmp := CreateCharacterSet ( 12a_others ) ;
1462: LD_ADDR_VAR 0 4
1466: PUSH
1467: LD_STRING 12a_others
1469: PPUSH
1470: CALL_OW 31
1474: ST_TO_ADDR
// if tmp then
1475: LD_VAR 0 4
1479: IFFALSE 1513
// for i in tmp do
1481: LD_ADDR_VAR 0 3
1485: PUSH
1486: LD_VAR 0 4
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1511
// PlaceUnitArea ( i , alliance_start , false ) ;
1494: LD_VAR 0 3
1498: PPUSH
1499: LD_INT 13
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 49
1509: GO 1491
1511: POP
1512: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1513: LD_INT 3
1515: PPUSH
1516: LD_INT 3
1518: PPUSH
1519: LD_INT 3
1521: PPUSH
1522: LD_INT 12
1524: PPUSH
1525: LD_INT 100
1527: PPUSH
1528: CALL 19575 0 5
// veh := CreateVehicle ;
1532: LD_ADDR_VAR 0 2
1536: PUSH
1537: CALL_OW 45
1541: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1542: LD_VAR 0 2
1546: PPUSH
1547: LD_INT 2
1549: PPUSH
1550: CALL_OW 233
// PlaceUnitXY ( veh , 63 , 9 , false ) ;
1554: LD_VAR 0 2
1558: PPUSH
1559: LD_INT 63
1561: PPUSH
1562: LD_INT 9
1564: PPUSH
1565: LD_INT 0
1567: PPUSH
1568: CALL_OW 48
// SetCargo ( veh , mat_artifact , 30 ) ;
1572: LD_VAR 0 2
1576: PPUSH
1577: LD_INT 4
1579: PPUSH
1580: LD_INT 30
1582: PPUSH
1583: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
1587: LD_STRING 11_artifact_captured
1589: PPUSH
1590: LD_INT 0
1592: PPUSH
1593: CALL_OW 30
1597: IFFALSE 1673
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1599: LD_INT 3
1601: PPUSH
1602: LD_INT 3
1604: PPUSH
1605: LD_INT 3
1607: PPUSH
1608: LD_INT 12
1610: PPUSH
1611: LD_INT 100
1613: PPUSH
1614: CALL 19575 0 5
// veh := CreateVehicle ;
1618: LD_ADDR_VAR 0 2
1622: PUSH
1623: CALL_OW 45
1627: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1628: LD_VAR 0 2
1632: PPUSH
1633: LD_INT 2
1635: PPUSH
1636: CALL_OW 233
// PlaceUnitXY ( veh , 60 , 4 , false ) ;
1640: LD_VAR 0 2
1644: PPUSH
1645: LD_INT 60
1647: PPUSH
1648: LD_INT 4
1650: PPUSH
1651: LD_INT 0
1653: PPUSH
1654: CALL_OW 48
// SetCargo ( veh , mat_artifact , 50 ) ;
1658: LD_VAR 0 2
1662: PPUSH
1663: LD_INT 4
1665: PPUSH
1666: LD_INT 50
1668: PPUSH
1669: CALL_OW 290
// end ; end ;
1673: LD_VAR 0 1
1677: RET
// export function PrepareGossudarov ; var tmp , i ; begin
1678: LD_INT 0
1680: PPUSH
1681: PPUSH
1682: PPUSH
// uc_side := 6 ;
1683: LD_ADDR_OWVAR 20
1687: PUSH
1688: LD_INT 6
1690: ST_TO_ADDR
// uc_nation := 3 ;
1691: LD_ADDR_OWVAR 21
1695: PUSH
1696: LD_INT 3
1698: ST_TO_ADDR
// InitHc ;
1699: CALL_OW 19
// Gossudarov := NewCharacter ( Gossudarov ) ;
1703: LD_ADDR_EXP 31
1707: PUSH
1708: LD_STRING Gossudarov
1710: PPUSH
1711: CALL_OW 25
1715: ST_TO_ADDR
// Kirilenkova := NewCharacter ( Kirilenkova ) ;
1716: LD_ADDR_EXP 32
1720: PUSH
1721: LD_STRING Kirilenkova
1723: PPUSH
1724: CALL_OW 25
1728: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
1729: LD_ADDR_EXP 33
1733: PUSH
1734: LD_STRING Titov
1736: PPUSH
1737: CALL_OW 25
1741: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
1742: LD_ADDR_EXP 38
1746: PUSH
1747: LD_STRING Oblukov
1749: PPUSH
1750: CALL_OW 25
1754: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
1755: LD_ADDR_EXP 35
1759: PUSH
1760: LD_STRING Dolgov
1762: PPUSH
1763: CALL_OW 25
1767: ST_TO_ADDR
// Petrosyan := NewCharacter ( Petrosyan ) ;
1768: LD_ADDR_EXP 36
1772: PUSH
1773: LD_STRING Petrosyan
1775: PPUSH
1776: CALL_OW 25
1780: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
1781: LD_ADDR_EXP 37
1785: PUSH
1786: LD_STRING Scholtze
1788: PPUSH
1789: CALL_OW 25
1793: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
1794: LD_ADDR_EXP 39
1798: PUSH
1799: LD_STRING Kapitsova
1801: PPUSH
1802: CALL_OW 25
1806: ST_TO_ADDR
// tmp := [ Gossudarov , Kirilenkova , Titov , Oblukov , Dolgov , Petrosyan , Scholtze , Kapitsova ] ;
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: LD_EXP 31
1816: PUSH
1817: LD_EXP 32
1821: PUSH
1822: LD_EXP 33
1826: PUSH
1827: LD_EXP 38
1831: PUSH
1832: LD_EXP 35
1836: PUSH
1837: LD_EXP 36
1841: PUSH
1842: LD_EXP 37
1846: PUSH
1847: LD_EXP 39
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: ST_TO_ADDR
// for i in tmp do
1862: LD_ADDR_VAR 0 3
1866: PUSH
1867: LD_VAR 0 2
1871: PUSH
1872: FOR_IN
1873: IFFALSE 1892
// PlaceUnitArea ( i , gossudarov_spawn , false ) ;
1875: LD_VAR 0 3
1879: PPUSH
1880: LD_INT 14
1882: PPUSH
1883: LD_INT 0
1885: PPUSH
1886: CALL_OW 49
1890: GO 1872
1892: POP
1893: POP
// ComMoveXY ( tmp , GetX ( freedom ) , GetY ( freedom ) ) ;
1894: LD_VAR 0 2
1898: PPUSH
1899: LD_EXP 3
1903: PPUSH
1904: CALL_OW 250
1908: PPUSH
1909: LD_EXP 3
1913: PPUSH
1914: CALL_OW 251
1918: PPUSH
1919: CALL_OW 111
// end ;
1923: LD_VAR 0 1
1927: RET
// export function PrepareBelkov ; begin
1928: LD_INT 0
1930: PPUSH
// uc_side := 4 ;
1931: LD_ADDR_OWVAR 20
1935: PUSH
1936: LD_INT 4
1938: ST_TO_ADDR
// uc_nation := 3 ;
1939: LD_ADDR_OWVAR 21
1943: PUSH
1944: LD_INT 3
1946: ST_TO_ADDR
// InitHc ;
1947: CALL_OW 19
// Belkov := NewCharacter ( Belkov ) ;
1951: LD_ADDR_EXP 46
1955: PUSH
1956: LD_STRING Belkov
1958: PPUSH
1959: CALL_OW 25
1963: ST_TO_ADDR
// PlaceUnitArea ( Belkov , gossudarov_spawn , false ) ;
1964: LD_EXP 46
1968: PPUSH
1969: LD_INT 14
1971: PPUSH
1972: LD_INT 0
1974: PPUSH
1975: CALL_OW 49
// end ;
1979: LD_VAR 0 1
1983: RET
// export function PrepareGnyevko ; begin
1984: LD_INT 0
1986: PPUSH
// uc_side := 4 ;
1987: LD_ADDR_OWVAR 20
1991: PUSH
1992: LD_INT 4
1994: ST_TO_ADDR
// uc_nation := 3 ;
1995: LD_ADDR_OWVAR 21
1999: PUSH
2000: LD_INT 3
2002: ST_TO_ADDR
// InitHc ;
2003: CALL_OW 19
// Gnyevko := NewCharacter ( Gnyevko ) ;
2007: LD_ADDR_EXP 47
2011: PUSH
2012: LD_STRING Gnyevko
2014: PPUSH
2015: CALL_OW 25
2019: ST_TO_ADDR
// PlaceUnitArea ( Gnyevko , gossudarov_spawn , false ) ;
2020: LD_EXP 47
2024: PPUSH
2025: LD_INT 14
2027: PPUSH
2028: LD_INT 0
2030: PPUSH
2031: CALL_OW 49
// end ;
2035: LD_VAR 0 1
2039: RET
// export function PrepareBurlak ; var i , tmp ; begin
2040: LD_INT 0
2042: PPUSH
2043: PPUSH
2044: PPUSH
// uc_side := 4 ;
2045: LD_ADDR_OWVAR 20
2049: PUSH
2050: LD_INT 4
2052: ST_TO_ADDR
// uc_nation := 3 ;
2053: LD_ADDR_OWVAR 21
2057: PUSH
2058: LD_INT 3
2060: ST_TO_ADDR
// InitHc ;
2061: CALL_OW 19
// Burlak := NewCharacter ( Burlak ) ;
2065: LD_ADDR_EXP 45
2069: PUSH
2070: LD_STRING Burlak
2072: PPUSH
2073: CALL_OW 25
2077: ST_TO_ADDR
// PrepareVehicle ( [ ru_heavy_tracked , ru_heavy_wheeled , ru_medium_tracked ] [ Difficulty ] , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gun , ru_gatling_gun ] [ Difficulty ] , 0 ) ;
2078: LD_INT 24
2080: PUSH
2081: LD_INT 23
2083: PUSH
2084: LD_INT 22
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: PUSH
2092: LD_OWVAR 67
2096: ARRAY
2097: PPUSH
2098: LD_INT 1
2100: PPUSH
2101: LD_INT 1
2103: PPUSH
2104: LD_INT 45
2106: PUSH
2107: LD_INT 44
2109: PUSH
2110: LD_INT 43
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: LIST
2117: PUSH
2118: LD_OWVAR 67
2122: ARRAY
2123: PPUSH
2124: LD_INT 0
2126: PPUSH
2127: CALL 19575 0 5
// Masha := CreateVehicle ;
2131: LD_ADDR_EXP 48
2135: PUSH
2136: CALL_OW 45
2140: ST_TO_ADDR
// SetLives ( [ Masha , Burlak ] , 499 ) ;
2141: LD_EXP 48
2145: PUSH
2146: LD_EXP 45
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: PPUSH
2155: LD_INT 499
2157: PPUSH
2158: CALL_OW 234
// SetDir ( Masha , 3 ) ;
2162: LD_EXP 48
2166: PPUSH
2167: LD_INT 3
2169: PPUSH
2170: CALL_OW 233
// SetMark ( Masha , 1 ) ;
2174: LD_EXP 48
2178: PPUSH
2179: LD_INT 1
2181: PPUSH
2182: CALL_OW 242
// PlaceUnitArea ( Masha , burlak_spawn , false ) ;
2186: LD_EXP 48
2190: PPUSH
2191: LD_INT 18
2193: PPUSH
2194: LD_INT 0
2196: PPUSH
2197: CALL_OW 49
// PlaceUnitXY ( Burlak , 125 , 1 , false ) ;
2201: LD_EXP 45
2205: PPUSH
2206: LD_INT 125
2208: PPUSH
2209: LD_INT 1
2211: PPUSH
2212: LD_INT 0
2214: PPUSH
2215: CALL_OW 48
// ComMoveUnit ( Burlak , Masha ) ;
2219: LD_EXP 45
2223: PPUSH
2224: LD_EXP 48
2228: PPUSH
2229: CALL_OW 112
// wait ( 0 0$0.3 ) ;
2233: LD_INT 10
2235: PPUSH
2236: CALL_OW 67
// AddComMoveXY ( Masha , 110 , 10 ) ;
2240: LD_EXP 48
2244: PPUSH
2245: LD_INT 110
2247: PPUSH
2248: LD_INT 10
2250: PPUSH
2251: CALL_OW 171
// Petrovova := NewCharacter ( Petrovova ) ;
2255: LD_ADDR_EXP 41
2259: PUSH
2260: LD_STRING Petrovova
2262: PPUSH
2263: CALL_OW 25
2267: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
2268: LD_ADDR_EXP 43
2272: PUSH
2273: LD_STRING Kuzmov
2275: PPUSH
2276: CALL_OW 25
2280: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
2281: LD_ADDR_EXP 42
2285: PUSH
2286: LD_STRING Kovalyuk
2288: PPUSH
2289: CALL_OW 25
2293: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
2294: LD_ADDR_EXP 40
2298: PUSH
2299: LD_STRING Lipshchin
2301: PPUSH
2302: CALL_OW 25
2306: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
2307: LD_ADDR_EXP 44
2311: PUSH
2312: LD_STRING Karamazov
2314: PPUSH
2315: CALL_OW 25
2319: ST_TO_ADDR
// tmp := [ Petrovova , Kuzmov , Kovalyuk , Lipshchin , Karamazov ] ;
2320: LD_ADDR_VAR 0 3
2324: PUSH
2325: LD_EXP 41
2329: PUSH
2330: LD_EXP 43
2334: PUSH
2335: LD_EXP 42
2339: PUSH
2340: LD_EXP 40
2344: PUSH
2345: LD_EXP 44
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// for i in tmp do
2357: LD_ADDR_VAR 0 2
2361: PUSH
2362: LD_VAR 0 3
2366: PUSH
2367: FOR_IN
2368: IFFALSE 2407
// begin SetLives ( i , rand ( 399 , 799 ) ) ;
2370: LD_VAR 0 2
2374: PPUSH
2375: LD_INT 399
2377: PPUSH
2378: LD_INT 799
2380: PPUSH
2381: CALL_OW 12
2385: PPUSH
2386: CALL_OW 234
// PlaceUnitArea ( i , burlak_friends_spawn , false ) ;
2390: LD_VAR 0 2
2394: PPUSH
2395: LD_INT 19
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 49
// end ;
2405: GO 2367
2407: POP
2408: POP
// ComMoveXY ( tmp , 116 , 8 ) ;
2409: LD_VAR 0 3
2413: PPUSH
2414: LD_INT 116
2416: PPUSH
2417: LD_INT 8
2419: PPUSH
2420: CALL_OW 111
// AddComHold ( tmp ) ;
2424: LD_VAR 0 3
2428: PPUSH
2429: CALL_OW 200
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: LD_VAR 0 3
2442: PPUSH
2443: LD_INT 25
2445: PUSH
2446: LD_INT 1
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PPUSH
2453: CALL_OW 72
2457: PUSH
2458: FOR_IN
2459: IFFALSE 2499
// begin AddComMoveToArea ( i , burlak_crawl_area ) ;
2461: LD_VAR 0 2
2465: PPUSH
2466: LD_INT 20
2468: PPUSH
2469: CALL_OW 173
// AddComTurnXY ( i , 147 , 45 ) ;
2473: LD_VAR 0 2
2477: PPUSH
2478: LD_INT 147
2480: PPUSH
2481: LD_INT 45
2483: PPUSH
2484: CALL_OW 178
// AddComCrawl ( i ) ;
2488: LD_VAR 0 2
2492: PPUSH
2493: CALL_OW 197
// end ;
2497: GO 2458
2499: POP
2500: POP
// repeat wait ( 0 0$1 ) ;
2501: LD_INT 35
2503: PPUSH
2504: CALL_OW 67
// until IsAt ( Masha , 110 , 10 ) ;
2508: LD_EXP 48
2512: PPUSH
2513: LD_INT 110
2515: PPUSH
2516: LD_INT 10
2518: PPUSH
2519: CALL_OW 307
2523: IFFALSE 2501
// ComStop ( Burlak ) ;
2525: LD_EXP 45
2529: PPUSH
2530: CALL_OW 141
// AddComHold ( Burlak ) ;
2534: LD_EXP 45
2538: PPUSH
2539: CALL_OW 200
// end ; end_of_file
2543: LD_VAR 0 1
2547: RET
// export russian_force , russian_guard , ru_attackers ; export function PrepareRussian ; var i , veh , tmp ; begin
2548: LD_INT 0
2550: PPUSH
2551: PPUSH
2552: PPUSH
2553: PPUSH
// uc_side := 3 ;
2554: LD_ADDR_OWVAR 20
2558: PUSH
2559: LD_INT 3
2561: ST_TO_ADDR
// uc_nation := 3 ;
2562: LD_ADDR_OWVAR 21
2566: PUSH
2567: LD_INT 3
2569: ST_TO_ADDR
// russian_force := PrepareBase ( ru_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 10000 , 3000 , 300 ] , [ 9 , 5 , 6 , 6 ] ) ;
2570: LD_ADDR_EXP 49
2574: PUSH
2575: LD_INT 47
2577: PPUSH
2578: LD_STRING 
2580: PPUSH
2581: LD_INT 7
2583: PUSH
2584: LD_INT 8
2586: PUSH
2587: LD_INT 9
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: LIST
2594: PUSH
2595: LD_OWVAR 67
2599: ARRAY
2600: PPUSH
2601: LD_INT 10000
2603: PUSH
2604: LD_INT 3000
2606: PUSH
2607: LD_INT 300
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: LIST
2614: PPUSH
2615: LD_INT 9
2617: PUSH
2618: LD_INT 5
2620: PUSH
2621: LD_INT 6
2623: PUSH
2624: LD_INT 6
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: PPUSH
2633: CALL 22974 0 5
2637: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , russian_force ) ;
2638: LD_ADDR_EXP 57
2642: PUSH
2643: LD_EXP 57
2647: PPUSH
2648: LD_INT 2
2650: PPUSH
2651: LD_EXP 49
2655: PPUSH
2656: CALL_OW 1
2660: ST_TO_ADDR
// tmp := [ ] ;
2661: LD_ADDR_VAR 0 4
2665: PUSH
2666: EMPTY
2667: ST_TO_ADDR
// for i = 1 to 4 do
2668: LD_ADDR_VAR 0 2
2672: PUSH
2673: DOUBLE
2674: LD_INT 1
2676: DEC
2677: ST_TO_ADDR
2678: LD_INT 4
2680: PUSH
2681: FOR_TO
2682: IFFALSE 2775
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun ] [ i mod 4 + 1 ] , 100 ) ;
2684: LD_INT 22
2686: PPUSH
2687: LD_INT 3
2689: PPUSH
2690: LD_INT 3
2692: PPUSH
2693: LD_INT 43
2695: PUSH
2696: LD_INT 45
2698: PUSH
2699: LD_INT 45
2701: PUSH
2702: LD_INT 44
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: PUSH
2711: LD_VAR 0 2
2715: PUSH
2716: LD_INT 4
2718: MOD
2719: PUSH
2720: LD_INT 1
2722: PLUS
2723: ARRAY
2724: PPUSH
2725: LD_INT 100
2727: PPUSH
2728: CALL 19575 0 5
// veh := CreateVehicle ;
2732: LD_ADDR_VAR 0 3
2736: PUSH
2737: CALL_OW 45
2741: ST_TO_ADDR
// tmp := tmp ^ veh ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 4
2751: PUSH
2752: LD_VAR 0 3
2756: ADD
2757: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_russian , false ) ;
2758: LD_VAR 0 3
2762: PPUSH
2763: LD_INT 2
2765: PPUSH
2766: LD_INT 0
2768: PPUSH
2769: CALL_OW 49
// end ;
2773: GO 2681
2775: POP
2776: POP
// russian_guard := tmp ;
2777: LD_ADDR_EXP 50
2781: PUSH
2782: LD_VAR 0 4
2786: ST_TO_ADDR
// end ;
2787: LD_VAR 0 1
2791: RET
// every 9 9$00 + 2 2$00 trigger IsOk ( ru_depot ) and player_spotted do var i , base , tmp , flags , _target , attackers ;
2792: LD_INT 47
2794: PPUSH
2795: CALL_OW 302
2799: PUSH
2800: LD_EXP 6
2804: AND
2805: IFFALSE 3418
2807: GO 2809
2809: DISABLE
2810: LD_INT 0
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
2816: PPUSH
2817: PPUSH
// begin enable ;
2818: ENABLE
// base := 2 ;
2819: LD_ADDR_VAR 0 2
2823: PUSH
2824: LD_INT 2
2826: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
2827: LD_ADDR_VAR 0 4
2831: PUSH
2832: LD_INT 0
2834: PUSH
2835: LD_INT 0
2837: PUSH
2838: LD_INT 0
2840: PUSH
2841: LD_INT 0
2843: PUSH
2844: LD_INT 0
2846: PUSH
2847: LD_INT 0
2849: PUSH
2850: LD_INT 0
2852: PUSH
2853: LD_INT 0
2855: PUSH
2856: LD_INT 1
2858: PUSH
2859: LD_INT 0
2861: PUSH
2862: EMPTY
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: ST_TO_ADDR
// tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] ] ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 22
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: LD_INT 3
2887: PUSH
2888: LD_INT 45
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: PUSH
2897: LD_INT 21
2899: PUSH
2900: LD_INT 1
2902: PUSH
2903: LD_INT 3
2905: PUSH
2906: LD_INT 45
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: LD_INT 22
2917: PUSH
2918: LD_INT 1
2920: PUSH
2921: LD_INT 3
2923: PUSH
2924: LD_INT 45
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: LIST
2931: LIST
2932: PUSH
2933: LD_INT 23
2935: PUSH
2936: LD_INT 1
2938: PUSH
2939: LD_INT 3
2941: PUSH
2942: LD_INT 46
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
2957: LD_ADDR_VAR 0 1
2961: PUSH
2962: DOUBLE
2963: LD_INT 1
2965: DEC
2966: ST_TO_ADDR
2967: LD_OWVAR 67
2971: PUSH
2972: LD_OWVAR 1
2976: PUSH
2977: LD_INT 21000
2979: DIV
2980: PLUS
2981: PUSH
2982: FOR_TO
2983: IFFALSE 3071
// tmp := Insert ( tmp , tmp + 1 , [ [ ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
2985: LD_ADDR_VAR 0 3
2989: PUSH
2990: LD_VAR 0 3
2994: PPUSH
2995: LD_VAR 0 3
2999: PUSH
3000: LD_INT 1
3002: PLUS
3003: PPUSH
3004: LD_INT 23
3006: PUSH
3007: LD_INT 24
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PUSH
3014: LD_INT 1
3016: PPUSH
3017: LD_INT 2
3019: PPUSH
3020: CALL_OW 12
3024: ARRAY
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: LD_INT 3
3031: PUSH
3032: LD_INT 46
3034: PUSH
3035: LD_INT 47
3037: PUSH
3038: LD_INT 45
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: LIST
3045: PUSH
3046: LD_INT 1
3048: PPUSH
3049: LD_INT 3
3051: PPUSH
3052: CALL_OW 12
3056: ARRAY
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 2
3068: ST_TO_ADDR
3069: GO 2982
3071: POP
3072: POP
// MC_SetProduceList ( base , tmp ) ;
3073: LD_VAR 0 2
3077: PPUSH
3078: LD_VAR 0 3
3082: PPUSH
3083: CALL 68051 0 2
// repeat wait ( 0 0$1 ) ;
3087: LD_INT 35
3089: PPUSH
3090: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
3094: LD_VAR 0 2
3098: PPUSH
3099: CALL 68508 0 1
3103: PUSH
3104: LD_INT 0
3106: EQUAL
3107: IFFALSE 3087
// wait ( 0 0$20 ) ;
3109: LD_INT 700
3111: PPUSH
3112: CALL_OW 67
// _target := [ [ 71 , 19 ] , [ 91 , 67 ] , [ 52 , 44 ] , [ 68 , 48 ] ] ;
3116: LD_ADDR_VAR 0 5
3120: PUSH
3121: LD_INT 71
3123: PUSH
3124: LD_INT 19
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: LD_INT 91
3133: PUSH
3134: LD_INT 67
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: PUSH
3141: LD_INT 52
3143: PUSH
3144: LD_INT 44
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: PUSH
3151: LD_INT 68
3153: PUSH
3154: LD_INT 48
3156: PUSH
3157: EMPTY
3158: LIST
3159: LIST
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] ] ) ) ;
3167: LD_ADDR_VAR 0 6
3171: PUSH
3172: LD_EXP 76
3176: PUSH
3177: LD_VAR 0 2
3181: ARRAY
3182: PUSH
3183: LD_EXP 79
3187: PUSH
3188: LD_VAR 0 2
3192: ARRAY
3193: PUSH
3194: LD_EXP 76
3198: PUSH
3199: LD_VAR 0 2
3203: ARRAY
3204: PPUSH
3205: LD_INT 2
3207: PUSH
3208: LD_INT 34
3210: PUSH
3211: LD_INT 51
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: LD_INT 34
3220: PUSH
3221: LD_INT 52
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: LIST
3232: PPUSH
3233: CALL_OW 72
3237: UNION
3238: DIFF
3239: ST_TO_ADDR
// if not attackers then
3240: LD_VAR 0 6
3244: NOT
3245: IFFALSE 3249
// exit ;
3247: GO 3418
// ru_attackers := attackers ;
3249: LD_ADDR_EXP 51
3253: PUSH
3254: LD_VAR 0 6
3258: ST_TO_ADDR
// for i = 1 to attackers do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 6
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3352
// begin case i mod 3 of 0 :
3277: LD_VAR 0 1
3281: PUSH
3282: LD_INT 3
3284: MOD
3285: PUSH
3286: LD_INT 0
3288: DOUBLE
3289: EQUAL
3290: IFTRUE 3294
3292: GO 3297
3294: POP
// ; 1 :
3295: GO 3350
3297: LD_INT 1
3299: DOUBLE
3300: EQUAL
3301: IFTRUE 3305
3303: GO 3323
3305: POP
// ComAgressiveMove ( i , 32 , 49 ) ; 2 :
3306: LD_VAR 0 1
3310: PPUSH
3311: LD_INT 32
3313: PPUSH
3314: LD_INT 49
3316: PPUSH
3317: CALL_OW 114
3321: GO 3350
3323: LD_INT 2
3325: DOUBLE
3326: EQUAL
3327: IFTRUE 3331
3329: GO 3349
3331: POP
// ComAgressiveMove ( i , 117 , 107 ) ; end ;
3332: LD_VAR 0 1
3336: PPUSH
3337: LD_INT 117
3339: PPUSH
3340: LD_INT 107
3342: PPUSH
3343: CALL_OW 114
3347: GO 3350
3349: POP
// end ;
3350: GO 3274
3352: POP
3353: POP
// repeat wait ( 0 0$1 ) ;
3354: LD_INT 35
3356: PPUSH
3357: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
3361: LD_VAR 0 6
3365: PPUSH
3366: LD_INT 60
3368: PUSH
3369: EMPTY
3370: LIST
3371: PPUSH
3372: CALL_OW 72
3376: NOT
3377: IFFALSE 3354
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
3379: LD_VAR 0 2
3383: PPUSH
3384: LD_VAR 0 6
3388: PPUSH
3389: LD_VAR 0 5
3393: PPUSH
3394: LD_VAR 0 4
3398: PPUSH
3399: CALL 68345 0 4
// if not first_attack then
3403: LD_EXP 7
3407: NOT
3408: IFFALSE 3418
// first_attack := true ;
3410: LD_ADDR_EXP 7
3414: PUSH
3415: LD_INT 1
3417: ST_TO_ADDR
// end ; end_of_file
3418: PPOPN 6
3420: END
// export arabian_force , arabian_guard , Abdul , mastodont ; export function PrepareArabian ; var i , veh , tmp , xy , un , un2 ; begin
3421: LD_INT 0
3423: PPUSH
3424: PPUSH
3425: PPUSH
3426: PPUSH
3427: PPUSH
3428: PPUSH
3429: PPUSH
// uc_side := 2 ;
3430: LD_ADDR_OWVAR 20
3434: PUSH
3435: LD_INT 2
3437: ST_TO_ADDR
// uc_nation := 2 ;
3438: LD_ADDR_OWVAR 21
3442: PUSH
3443: LD_INT 2
3445: ST_TO_ADDR
// Abdul := NewCharacter ( Abdul ) ;
3446: LD_ADDR_EXP 54
3450: PUSH
3451: LD_STRING Abdul
3453: PPUSH
3454: CALL_OW 25
3458: ST_TO_ADDR
// SetClass ( Abdul , class_desert_warior ) ;
3459: LD_EXP 54
3463: PPUSH
3464: LD_INT 11
3466: PPUSH
3467: CALL_OW 336
// PlaceHumanInUnit ( Abdul , ar_depot ) ;
3471: LD_EXP 54
3475: PPUSH
3476: LD_INT 1
3478: PPUSH
3479: CALL_OW 52
// vc_chassis := 31 ;
3483: LD_ADDR_OWVAR 37
3487: PUSH
3488: LD_INT 31
3490: ST_TO_ADDR
// vc_control := control_rider ;
3491: LD_ADDR_OWVAR 38
3495: PUSH
3496: LD_INT 4
3498: ST_TO_ADDR
// mastodont := CreateVehicle ;
3499: LD_ADDR_EXP 55
3503: PUSH
3504: CALL_OW 45
3508: ST_TO_ADDR
// PlaceUnitXY ( mastodont , 153 , 71 , false ) ;
3509: LD_EXP 55
3513: PPUSH
3514: LD_INT 153
3516: PPUSH
3517: LD_INT 71
3519: PPUSH
3520: LD_INT 0
3522: PPUSH
3523: CALL_OW 48
// InitVc ;
3527: CALL_OW 20
// arabian_force := PrepareBase ( ar_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 5000 , 1000 , 300 ] , [ 22 , 5 , 6 , 9 ] ) ;
3531: LD_ADDR_EXP 52
3535: PUSH
3536: LD_INT 1
3538: PPUSH
3539: LD_STRING 
3541: PPUSH
3542: LD_INT 7
3544: PUSH
3545: LD_INT 8
3547: PUSH
3548: LD_INT 9
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: LIST
3555: PUSH
3556: LD_OWVAR 67
3560: ARRAY
3561: PPUSH
3562: LD_INT 5000
3564: PUSH
3565: LD_INT 1000
3567: PUSH
3568: LD_INT 300
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: PPUSH
3576: LD_INT 22
3578: PUSH
3579: LD_INT 5
3581: PUSH
3582: LD_INT 6
3584: PUSH
3585: LD_INT 9
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PPUSH
3594: CALL 22974 0 5
3598: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , arabian_force ) ;
3599: LD_ADDR_EXP 57
3603: PUSH
3604: LD_EXP 57
3608: PPUSH
3609: LD_INT 1
3611: PPUSH
3612: LD_EXP 52
3616: PPUSH
3617: CALL_OW 1
3621: ST_TO_ADDR
// tmp := [ ] ;
3622: LD_ADDR_VAR 0 4
3626: PUSH
3627: EMPTY
3628: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
3629: LD_ADDR_OWVAR 37
3633: PUSH
3634: LD_INT 14
3636: ST_TO_ADDR
// vc_engine := engine_siberite ;
3637: LD_ADDR_OWVAR 39
3641: PUSH
3642: LD_INT 3
3644: ST_TO_ADDR
// vc_control := control_manual ;
3645: LD_ADDR_OWVAR 38
3649: PUSH
3650: LD_INT 1
3652: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
3653: LD_ADDR_OWVAR 40
3657: PUSH
3658: LD_INT 31
3660: ST_TO_ADDR
// for i = 1 to 3 do
3661: LD_ADDR_VAR 0 2
3665: PUSH
3666: DOUBLE
3667: LD_INT 1
3669: DEC
3670: ST_TO_ADDR
3671: LD_INT 3
3673: PUSH
3674: FOR_TO
3675: IFFALSE 3919
// begin xy := [ [ 153 , 71 ] , [ 155 , 81 ] ] [ i mod 2 + 1 ] ;
3677: LD_ADDR_VAR 0 5
3681: PUSH
3682: LD_INT 153
3684: PUSH
3685: LD_INT 71
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PUSH
3692: LD_INT 155
3694: PUSH
3695: LD_INT 81
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_VAR 0 2
3710: PUSH
3711: LD_INT 2
3713: MOD
3714: PUSH
3715: LD_INT 1
3717: PLUS
3718: ARRAY
3719: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
3720: LD_INT 0
3722: PPUSH
3723: LD_INT 3
3725: PPUSH
3726: LD_INT 7
3728: PUSH
3729: LD_INT 8
3731: PUSH
3732: LD_INT 9
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: LIST
3739: PUSH
3740: LD_OWVAR 67
3744: ARRAY
3745: PPUSH
3746: CALL_OW 380
// un := CreateVehicle ;
3750: LD_ADDR_VAR 0 6
3754: PUSH
3755: CALL_OW 45
3759: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3760: LD_VAR 0 6
3764: PPUSH
3765: LD_INT 0
3767: PPUSH
3768: LD_INT 5
3770: PPUSH
3771: CALL_OW 12
3775: PPUSH
3776: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
3780: LD_VAR 0 6
3784: PPUSH
3785: LD_VAR 0 5
3789: PUSH
3790: LD_INT 1
3792: ARRAY
3793: PPUSH
3794: LD_VAR 0 5
3798: PUSH
3799: LD_INT 2
3801: ARRAY
3802: PPUSH
3803: LD_INT 6
3805: PPUSH
3806: LD_INT 0
3808: PPUSH
3809: CALL_OW 50
// un2 := CreateHuman ;
3813: LD_ADDR_VAR 0 7
3817: PUSH
3818: CALL_OW 44
3822: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
3823: LD_VAR 0 7
3827: PPUSH
3828: LD_VAR 0 6
3832: PPUSH
3833: CALL_OW 52
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un ) ;
3837: LD_ADDR_EXP 57
3841: PUSH
3842: LD_EXP 57
3846: PPUSH
3847: LD_INT 1
3849: PUSH
3850: LD_EXP 57
3854: PUSH
3855: LD_INT 1
3857: ARRAY
3858: PUSH
3859: LD_INT 1
3861: PLUS
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: PPUSH
3867: LD_VAR 0 6
3871: PPUSH
3872: CALL 20132 0 3
3876: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un2 ) ;
3877: LD_ADDR_EXP 57
3881: PUSH
3882: LD_EXP 57
3886: PPUSH
3887: LD_INT 1
3889: PUSH
3890: LD_EXP 57
3894: PUSH
3895: LD_INT 1
3897: ARRAY
3898: PUSH
3899: LD_INT 1
3901: PLUS
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: PPUSH
3907: LD_VAR 0 7
3911: PPUSH
3912: CALL 20132 0 3
3916: ST_TO_ADDR
// end ;
3917: GO 3674
3919: POP
3920: POP
// for i = 1 to 5 do
3921: LD_ADDR_VAR 0 2
3925: PUSH
3926: DOUBLE
3927: LD_INT 1
3929: DEC
3930: ST_TO_ADDR
3931: LD_INT 5
3933: PUSH
3934: FOR_TO
3935: IFFALSE 4028
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gatling_gun , ar_rocket_launcher , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 100 ) ;
3937: LD_INT 14
3939: PPUSH
3940: LD_INT 3
3942: PPUSH
3943: LD_INT 1
3945: PPUSH
3946: LD_INT 25
3948: PUSH
3949: LD_INT 28
3951: PUSH
3952: LD_INT 28
3954: PUSH
3955: LD_INT 26
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: PUSH
3964: LD_VAR 0 2
3968: PUSH
3969: LD_INT 4
3971: MOD
3972: PUSH
3973: LD_INT 1
3975: PLUS
3976: ARRAY
3977: PPUSH
3978: LD_INT 100
3980: PPUSH
3981: CALL 19575 0 5
// veh := CreateVehicle ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: CALL_OW 45
3994: ST_TO_ADDR
// tmp := tmp ^ veh ;
3995: LD_ADDR_VAR 0 4
3999: PUSH
4000: LD_VAR 0 4
4004: PUSH
4005: LD_VAR 0 3
4009: ADD
4010: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_arabian , false ) ;
4011: LD_VAR 0 3
4015: PPUSH
4016: LD_INT 1
4018: PPUSH
4019: LD_INT 0
4021: PPUSH
4022: CALL_OW 49
// end ;
4026: GO 3934
4028: POP
4029: POP
// arabian_guard := tmp ;
4030: LD_ADDR_EXP 53
4034: PUSH
4035: LD_VAR 0 4
4039: ST_TO_ADDR
// end ;
4040: LD_VAR 0 1
4044: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , ar_depot , 12 ] ] ) or GetLives ( Mastodont ) < 990 or GetLives ( Abdul ) < 990 do
4045: LD_INT 22
4047: PUSH
4048: LD_INT 7
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 91
4057: PUSH
4058: LD_INT 1
4060: PUSH
4061: LD_INT 12
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: LIST
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 69
4077: PUSH
4078: LD_EXP 55
4082: PPUSH
4083: CALL_OW 256
4087: PUSH
4088: LD_INT 990
4090: LESS
4091: OR
4092: PUSH
4093: LD_EXP 54
4097: PPUSH
4098: CALL_OW 256
4102: PUSH
4103: LD_INT 990
4105: LESS
4106: OR
4107: IFFALSE 4250
4109: GO 4111
4111: DISABLE
// begin if IsInUnit ( Abdul ) then
4112: LD_EXP 54
4116: PPUSH
4117: CALL_OW 310
4121: IFFALSE 4132
// ComExitBuilding ( Abdul ) ;
4123: LD_EXP 54
4127: PPUSH
4128: CALL_OW 122
// if Mastodont then
4132: LD_EXP 55
4136: IFFALSE 4153
// ComMoveXY ( Mastodont , 205 , 132 ) ;
4138: LD_EXP 55
4142: PPUSH
4143: LD_INT 205
4145: PPUSH
4146: LD_INT 132
4148: PPUSH
4149: CALL_OW 111
// AddComMoveXY ( Abdul , 205 , 132 ) ;
4153: LD_EXP 54
4157: PPUSH
4158: LD_INT 205
4160: PPUSH
4161: LD_INT 132
4163: PPUSH
4164: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4168: LD_INT 35
4170: PPUSH
4171: CALL_OW 67
// until IsInArea ( Abdul , escape_area ) ;
4175: LD_EXP 54
4179: PPUSH
4180: LD_INT 21
4182: PPUSH
4183: CALL_OW 308
4187: IFFALSE 4168
// RemoveUnit ( Abdul ) ;
4189: LD_EXP 54
4193: PPUSH
4194: CALL_OW 64
// repeat wait ( 0 0$1 ) ;
4198: LD_INT 35
4200: PPUSH
4201: CALL_OW 67
// until IsInArea ( Mastodont , escape_area ) or IsDead ( Mastodont ) ;
4205: LD_EXP 55
4209: PPUSH
4210: LD_INT 21
4212: PPUSH
4213: CALL_OW 308
4217: PUSH
4218: LD_EXP 55
4222: PPUSH
4223: CALL_OW 301
4227: OR
4228: IFFALSE 4198
// if IsOk ( Mastodont ) then
4230: LD_EXP 55
4234: PPUSH
4235: CALL_OW 302
4239: IFFALSE 4250
// RemoveUnit ( Mastodont ) ;
4241: LD_EXP 55
4245: PPUSH
4246: CALL_OW 64
// end ;
4250: END
// every 0 0$5 trigger IsDead ( Abdul ) or FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 8 ] ] ] ) < [ 16 , 19 , 22 ] [ Difficulty ] do var tmp_vehs , tmp , tmp_ape , tmp_empty , i , veh ;
4251: LD_EXP 54
4255: PPUSH
4256: CALL_OW 301
4260: PUSH
4261: LD_INT 22
4263: PUSH
4264: LD_INT 2
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PUSH
4271: LD_INT 2
4273: PUSH
4274: LD_INT 25
4276: PUSH
4277: LD_INT 1
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 25
4286: PUSH
4287: LD_INT 2
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: LD_INT 25
4296: PUSH
4297: LD_INT 3
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: PUSH
4304: LD_INT 25
4306: PUSH
4307: LD_INT 4
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PUSH
4314: LD_INT 25
4316: PUSH
4317: LD_INT 8
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PPUSH
4336: CALL_OW 69
4340: PUSH
4341: LD_INT 16
4343: PUSH
4344: LD_INT 19
4346: PUSH
4347: LD_INT 22
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: PUSH
4355: LD_OWVAR 67
4359: ARRAY
4360: LESS
4361: OR
4362: IFFALSE 5035
4364: GO 4366
4366: DISABLE
4367: LD_INT 0
4369: PPUSH
4370: PPUSH
4371: PPUSH
4372: PPUSH
4373: PPUSH
4374: PPUSH
// begin MC_Kill ( 1 ) ;
4375: LD_INT 1
4377: PPUSH
4378: CALL 52295 0 1
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 8 ] ] ] ) ;
4382: LD_ADDR_VAR 0 2
4386: PUSH
4387: LD_INT 22
4389: PUSH
4390: LD_INT 2
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: LD_INT 2
4399: PUSH
4400: LD_INT 25
4402: PUSH
4403: LD_INT 1
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 25
4412: PUSH
4413: LD_INT 2
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 25
4422: PUSH
4423: LD_INT 3
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: LD_INT 25
4432: PUSH
4433: LD_INT 4
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: LD_INT 25
4442: PUSH
4443: LD_INT 8
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: ST_TO_ADDR
// for i in tmp do
4467: LD_ADDR_VAR 0 5
4471: PUSH
4472: LD_VAR 0 2
4476: PUSH
4477: FOR_IN
4478: IFFALSE 4494
// SetTag ( i , 10 ) ;
4480: LD_VAR 0 5
4484: PPUSH
4485: LD_INT 10
4487: PPUSH
4488: CALL_OW 109
4492: GO 4477
4494: POP
4495: POP
// tmp_ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff tmp ;
4496: LD_ADDR_VAR 0 3
4500: PUSH
4501: LD_INT 22
4503: PUSH
4504: LD_INT 2
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: PUSH
4511: LD_INT 21
4513: PUSH
4514: LD_INT 1
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 69
4529: PUSH
4530: LD_VAR 0 2
4534: DIFF
4535: ST_TO_ADDR
// tmp_vehs := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_lives , 300 ] ] ) ;
4536: LD_ADDR_VAR 0 1
4540: PUSH
4541: LD_INT 22
4543: PUSH
4544: LD_INT 2
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: LD_INT 21
4553: PUSH
4554: LD_INT 2
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 24
4563: PUSH
4564: LD_INT 300
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: LIST
4575: PPUSH
4576: CALL_OW 69
4580: ST_TO_ADDR
// tmp_empty := UnitFilter ( tmp_vehs , [ [ f_control , control_manual ] , [ f_empty ] ] ) ;
4581: LD_ADDR_VAR 0 4
4585: PUSH
4586: LD_VAR 0 1
4590: PPUSH
4591: LD_INT 33
4593: PUSH
4594: LD_INT 1
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 58
4603: PUSH
4604: EMPTY
4605: LIST
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PPUSH
4611: CALL_OW 72
4615: ST_TO_ADDR
// for i in tmp do
4616: LD_ADDR_VAR 0 5
4620: PUSH
4621: LD_VAR 0 2
4625: PUSH
4626: FOR_IN
4627: IFFALSE 4811
// begin if i in FilterAllUnits ( [ f_driving ] ) then
4629: LD_VAR 0 5
4633: PUSH
4634: LD_INT 55
4636: PUSH
4637: EMPTY
4638: LIST
4639: PPUSH
4640: CALL_OW 69
4644: IN
4645: IFFALSE 4664
// begin AddComMoveXY ( i , 209 , 132 ) ;
4647: LD_VAR 0 5
4651: PPUSH
4652: LD_INT 209
4654: PPUSH
4655: LD_INT 132
4657: PPUSH
4658: CALL_OW 171
// continue ;
4662: GO 4626
// end ; if IsInUnit ( i ) then
4664: LD_VAR 0 5
4668: PPUSH
4669: CALL_OW 310
4673: IFFALSE 4691
// begin ComExitBuilding ( i ) ;
4675: LD_VAR 0 5
4679: PPUSH
4680: CALL_OW 122
// wait ( 3 ) ;
4684: LD_INT 3
4686: PPUSH
4687: CALL_OW 67
// end ; if tmp_empty then
4691: LD_VAR 0 4
4695: IFFALSE 4794
// if GetDistUnits ( i , NearestUnitToUnit ( tmp_empty , i ) ) < 25 then
4697: LD_VAR 0 5
4701: PPUSH
4702: LD_VAR 0 4
4706: PPUSH
4707: LD_VAR 0 5
4711: PPUSH
4712: CALL_OW 74
4716: PPUSH
4717: CALL_OW 296
4721: PUSH
4722: LD_INT 25
4724: LESS
4725: IFFALSE 4794
// begin veh := NearestUnitToUnit ( tmp_empty , i ) ;
4727: LD_ADDR_VAR 0 6
4731: PUSH
4732: LD_VAR 0 4
4736: PPUSH
4737: LD_VAR 0 5
4741: PPUSH
4742: CALL_OW 74
4746: ST_TO_ADDR
// AddComEnterUnit ( i , veh ) ;
4747: LD_VAR 0 5
4751: PPUSH
4752: LD_VAR 0 6
4756: PPUSH
4757: CALL_OW 180
// AddComMoveXY ( i , 209 , 132 ) ;
4761: LD_VAR 0 5
4765: PPUSH
4766: LD_INT 209
4768: PPUSH
4769: LD_INT 132
4771: PPUSH
4772: CALL_OW 171
// tmp_empty := tmp_empty diff veh ;
4776: LD_ADDR_VAR 0 4
4780: PUSH
4781: LD_VAR 0 4
4785: PUSH
4786: LD_VAR 0 6
4790: DIFF
4791: ST_TO_ADDR
// continue ;
4792: GO 4626
// end ; AddComMoveXY ( i , 201 , 132 ) ;
4794: LD_VAR 0 5
4798: PPUSH
4799: LD_INT 201
4801: PPUSH
4802: LD_INT 132
4804: PPUSH
4805: CALL_OW 171
// end ;
4809: GO 4626
4811: POP
4812: POP
// for i in tmp_ape do
4813: LD_ADDR_VAR 0 5
4817: PUSH
4818: LD_VAR 0 3
4822: PUSH
4823: FOR_IN
4824: IFFALSE 4863
// begin if IsInUnit ( i ) then
4826: LD_VAR 0 5
4830: PPUSH
4831: CALL_OW 310
4835: IFFALSE 4846
// ComExitBuilding ( i ) ;
4837: LD_VAR 0 5
4841: PPUSH
4842: CALL_OW 122
// AddComMoveXY ( i , 201 , 132 ) ;
4846: LD_VAR 0 5
4850: PPUSH
4851: LD_INT 201
4853: PPUSH
4854: LD_INT 132
4856: PPUSH
4857: CALL_OW 171
// end ;
4861: GO 4823
4863: POP
4864: POP
// repeat wait ( 0 0$1 ) ;
4865: LD_INT 35
4867: PPUSH
4868: CALL_OW 67
// for i in tmp union tmp_ape union tmp_vehs do
4872: LD_ADDR_VAR 0 5
4876: PUSH
4877: LD_VAR 0 2
4881: PUSH
4882: LD_VAR 0 3
4886: UNION
4887: PUSH
4888: LD_VAR 0 1
4892: UNION
4893: PUSH
4894: FOR_IN
4895: IFFALSE 4926
// if not HasTask ( i ) then
4897: LD_VAR 0 5
4901: PPUSH
4902: CALL_OW 314
4906: NOT
4907: IFFALSE 4924
// ComMoveXY ( i , 201 , 132 ) ;
4909: LD_VAR 0 5
4913: PPUSH
4914: LD_INT 201
4916: PPUSH
4917: LD_INT 132
4919: PPUSH
4920: CALL_OW 111
4924: GO 4894
4926: POP
4927: POP
// if FilterUnitsInArea ( escape_area , [ f_side , 2 ] ) then
4928: LD_INT 21
4930: PPUSH
4931: LD_INT 22
4933: PUSH
4934: LD_INT 2
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 70
4945: IFFALSE 4986
// for i in FilterUnitsInArea ( escape_area , [ f_side , 2 ] ) do
4947: LD_ADDR_VAR 0 5
4951: PUSH
4952: LD_INT 21
4954: PPUSH
4955: LD_INT 22
4957: PUSH
4958: LD_INT 2
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 70
4969: PUSH
4970: FOR_IN
4971: IFFALSE 4984
// RemoveUnit ( i ) ;
4973: LD_VAR 0 5
4977: PPUSH
4978: CALL_OW 64
4982: GO 4970
4984: POP
4985: POP
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
4986: LD_INT 22
4988: PUSH
4989: LD_INT 2
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: PUSH
4996: LD_INT 2
4998: PUSH
4999: LD_INT 21
5001: PUSH
5002: LD_INT 1
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: PUSH
5009: LD_INT 21
5011: PUSH
5012: LD_INT 2
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: LIST
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PPUSH
5028: CALL_OW 69
5032: NOT
5033: IFFALSE 4865
// end ;
5035: PPOPN 6
5037: END
// every 12 12$00 trigger ar_active_attack and GetBType ( HexInfo ( 92 , 40 ) ) = b_siberite_mine do var sci ;
5038: LD_EXP 9
5042: PUSH
5043: LD_INT 92
5045: PPUSH
5046: LD_INT 40
5048: PPUSH
5049: CALL_OW 428
5053: PPUSH
5054: CALL_OW 266
5058: PUSH
5059: LD_INT 30
5061: EQUAL
5062: AND
5063: IFFALSE 5259
5065: GO 5067
5067: DISABLE
5068: LD_INT 0
5070: PPUSH
// begin sci := UnitFilter ( mc_bases [ 1 ] , [ f_class , 4 ] ) ;
5071: LD_ADDR_VAR 0 1
5075: PUSH
5076: LD_EXP 57
5080: PUSH
5081: LD_INT 1
5083: ARRAY
5084: PPUSH
5085: LD_INT 25
5087: PUSH
5088: LD_INT 4
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: PPUSH
5095: CALL_OW 72
5099: ST_TO_ADDR
// if not sci then
5100: LD_VAR 0 1
5104: NOT
5105: IFFALSE 5109
// exit ;
5107: GO 5259
// mc_bases := Replace ( mc_bases , 1 , mc_bases [ 1 ] diff sci [ 1 ] ) ;
5109: LD_ADDR_EXP 57
5113: PUSH
5114: LD_EXP 57
5118: PPUSH
5119: LD_INT 1
5121: PPUSH
5122: LD_EXP 57
5126: PUSH
5127: LD_INT 1
5129: ARRAY
5130: PUSH
5131: LD_VAR 0 1
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: DIFF
5140: PPUSH
5141: CALL_OW 1
5145: ST_TO_ADDR
// if IsInUnit ( sci [ 1 ] ) then
5146: LD_VAR 0 1
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PPUSH
5155: CALL_OW 310
5159: IFFALSE 5174
// ComExitBuilding ( sci [ 1 ] ) ;
5161: LD_VAR 0 1
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: CALL_OW 122
// if DangerAtRangeXY ( 2 , 105 , 14 , 20 ) [ 4 ] < 10 then
5174: LD_INT 2
5176: PPUSH
5177: LD_INT 105
5179: PPUSH
5180: LD_INT 14
5182: PPUSH
5183: LD_INT 20
5185: PPUSH
5186: CALL 20626 0 4
5190: PUSH
5191: LD_INT 4
5193: ARRAY
5194: PUSH
5195: LD_INT 10
5197: LESS
5198: IFFALSE 5221
// AddComMoveXY ( sci [ 1 ] , 105 , 14 ) else
5200: LD_VAR 0 1
5204: PUSH
5205: LD_INT 1
5207: ARRAY
5208: PPUSH
5209: LD_INT 105
5211: PPUSH
5212: LD_INT 14
5214: PPUSH
5215: CALL_OW 171
5219: GO 5240
// AddComMoveXY ( sci [ 1 ] , 118 , 77 ) ;
5221: LD_VAR 0 1
5225: PUSH
5226: LD_INT 1
5228: ARRAY
5229: PPUSH
5230: LD_INT 118
5232: PPUSH
5233: LD_INT 77
5235: PPUSH
5236: CALL_OW 171
// AddComContaminate ( sci [ 1 ] , 92 , 40 ) ;
5240: LD_VAR 0 1
5244: PUSH
5245: LD_INT 1
5247: ARRAY
5248: PPUSH
5249: LD_INT 92
5251: PPUSH
5252: LD_INT 40
5254: PPUSH
5255: CALL_OW 218
// end ;
5259: PPOPN 1
5261: END
// every 14 14$00 trigger IsOk ( ar_depot ) and ar_active_attack do var i , base , tmp , flags , _target , attackers ;
5262: LD_INT 1
5264: PPUSH
5265: CALL_OW 302
5269: PUSH
5270: LD_EXP 9
5274: AND
5275: IFFALSE 5745
5277: GO 5279
5279: DISABLE
5280: LD_INT 0
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
5286: PPUSH
5287: PPUSH
// begin enable ;
5288: ENABLE
// base := 1 ;
5289: LD_ADDR_VAR 0 2
5293: PUSH
5294: LD_INT 1
5296: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
5297: LD_ADDR_VAR 0 4
5301: PUSH
5302: LD_INT 0
5304: PUSH
5305: LD_INT 0
5307: PUSH
5308: LD_INT 0
5310: PUSH
5311: LD_INT 0
5313: PUSH
5314: LD_INT 0
5316: PUSH
5317: LD_INT 0
5319: PUSH
5320: LD_INT 0
5322: PUSH
5323: LD_INT 0
5325: PUSH
5326: LD_INT 1
5328: PUSH
5329: LD_INT 0
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: ST_TO_ADDR
// tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_flame_thrower ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , ] ;
5344: LD_ADDR_VAR 0 3
5348: PUSH
5349: LD_INT 14
5351: PUSH
5352: LD_INT 1
5354: PUSH
5355: LD_INT 2
5357: PUSH
5358: LD_INT 26
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 14
5369: PUSH
5370: LD_INT 1
5372: PUSH
5373: LD_INT 2
5375: PUSH
5376: LD_INT 28
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: PUSH
5385: LD_INT 13
5387: PUSH
5388: LD_INT 1
5390: PUSH
5391: LD_INT 2
5393: PUSH
5394: LD_INT 29
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: LIST
5407: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
5408: LD_ADDR_VAR 0 1
5412: PUSH
5413: DOUBLE
5414: LD_INT 1
5416: DEC
5417: ST_TO_ADDR
5418: LD_OWVAR 67
5422: PUSH
5423: LD_OWVAR 1
5427: PUSH
5428: LD_INT 21000
5430: DIV
5431: PLUS
5432: PUSH
5433: FOR_TO
5434: IFFALSE 5526
// tmp := Insert ( tmp , tmp + 1 , [ [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_remote , [ ar_rocket_launcher , ar_selfpropelled_bomb , ar_gatling_gun , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ) ;
5436: LD_ADDR_VAR 0 3
5440: PUSH
5441: LD_VAR 0 3
5445: PPUSH
5446: LD_VAR 0 3
5450: PUSH
5451: LD_INT 1
5453: PLUS
5454: PPUSH
5455: LD_INT 13
5457: PUSH
5458: LD_INT 14
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: LD_INT 1
5467: PPUSH
5468: LD_INT 2
5470: PPUSH
5471: CALL_OW 12
5475: ARRAY
5476: PUSH
5477: LD_INT 1
5479: PUSH
5480: LD_INT 2
5482: PUSH
5483: LD_INT 28
5485: PUSH
5486: LD_INT 29
5488: PUSH
5489: LD_INT 25
5491: PUSH
5492: LD_INT 26
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 1
5503: PPUSH
5504: LD_INT 4
5506: PPUSH
5507: CALL_OW 12
5511: ARRAY
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: PPUSH
5519: CALL_OW 2
5523: ST_TO_ADDR
5524: GO 5433
5526: POP
5527: POP
// MC_SetProduceList ( base , tmp ) ;
5528: LD_VAR 0 2
5532: PPUSH
5533: LD_VAR 0 3
5537: PPUSH
5538: CALL 68051 0 2
// repeat wait ( 0 0$1 ) ;
5542: LD_INT 35
5544: PPUSH
5545: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
5549: LD_VAR 0 2
5553: PPUSH
5554: CALL 68508 0 1
5558: PUSH
5559: LD_INT 0
5561: EQUAL
5562: IFFALSE 5542
// wait ( 0 0$20 ) ;
5564: LD_INT 700
5566: PPUSH
5567: CALL_OW 67
// _target := [ [ 124 , 85 ] , [ 90 , 61 ] , [ 69 , 48 ] , [ 68 , 48 ] ] ;
5571: LD_ADDR_VAR 0 5
5575: PUSH
5576: LD_INT 124
5578: PUSH
5579: LD_INT 85
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 90
5588: PUSH
5589: LD_INT 61
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: PUSH
5596: LD_INT 69
5598: PUSH
5599: LD_INT 48
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PUSH
5606: LD_INT 68
5608: PUSH
5609: LD_INT 48
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , ar_cargo_bay ] ) ) ;
5622: LD_ADDR_VAR 0 6
5626: PUSH
5627: LD_EXP 76
5631: PUSH
5632: LD_VAR 0 2
5636: ARRAY
5637: PUSH
5638: LD_EXP 79
5642: PUSH
5643: LD_VAR 0 2
5647: ARRAY
5648: PUSH
5649: LD_EXP 76
5653: PUSH
5654: LD_VAR 0 2
5658: ARRAY
5659: PPUSH
5660: LD_INT 34
5662: PUSH
5663: LD_INT 32
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: PPUSH
5670: CALL_OW 72
5674: UNION
5675: DIFF
5676: ST_TO_ADDR
// if not attackers then
5677: LD_VAR 0 6
5681: NOT
5682: IFFALSE 5686
// exit ;
5684: GO 5745
// ar_attackers := attackers ;
5686: LD_ADDR_EXP 10
5690: PUSH
5691: LD_VAR 0 6
5695: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5696: LD_INT 35
5698: PPUSH
5699: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
5703: LD_VAR 0 6
5707: PPUSH
5708: LD_INT 60
5710: PUSH
5711: EMPTY
5712: LIST
5713: PPUSH
5714: CALL_OW 72
5718: NOT
5719: IFFALSE 5696
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
5721: LD_VAR 0 2
5725: PPUSH
5726: LD_VAR 0 6
5730: PPUSH
5731: LD_VAR 0 5
5735: PPUSH
5736: LD_VAR 0 4
5740: PPUSH
5741: CALL 68345 0 4
// end ;
5745: PPOPN 6
5747: END
// every 11 11$00 trigger IsOk ( ar_depot ) and ar_active_attack and IsInArea ( masha , masha_area ) and MC_GetProduceList ( 1 ) = 0 and not ar_attackers do var i , base , tmp , flags , _target , attackers , un ;
5748: LD_INT 1
5750: PPUSH
5751: CALL_OW 302
5755: PUSH
5756: LD_EXP 9
5760: AND
5761: PUSH
5762: LD_EXP 48
5766: PPUSH
5767: LD_INT 22
5769: PPUSH
5770: CALL_OW 308
5774: AND
5775: PUSH
5776: LD_INT 1
5778: PPUSH
5779: CALL 68508 0 1
5783: PUSH
5784: LD_INT 0
5786: EQUAL
5787: AND
5788: PUSH
5789: LD_EXP 10
5793: NOT
5794: AND
5795: IFFALSE 6270
5797: GO 5799
5799: DISABLE
5800: LD_INT 0
5802: PPUSH
5803: PPUSH
5804: PPUSH
5805: PPUSH
5806: PPUSH
5807: PPUSH
5808: PPUSH
// begin base := 1 ;
5809: LD_ADDR_VAR 0 2
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
5817: LD_ADDR_VAR 0 4
5821: PUSH
5822: LD_INT 0
5824: PUSH
5825: LD_INT 0
5827: PUSH
5828: LD_INT 0
5830: PUSH
5831: LD_INT 0
5833: PUSH
5834: LD_INT 0
5836: PUSH
5837: LD_INT 0
5839: PUSH
5840: LD_INT 0
5842: PUSH
5843: LD_INT 0
5845: PUSH
5846: LD_INT 1
5848: PUSH
5849: LD_INT 0
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: ST_TO_ADDR
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_hovercraft , engine_solar , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_solar , control_remote , ar_double_machine_gun ] ] ;
5864: LD_ADDR_VAR 0 3
5868: PUSH
5869: LD_INT 13
5871: PUSH
5872: LD_INT 1
5874: PUSH
5875: LD_INT 2
5877: PUSH
5878: LD_INT 28
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: PUSH
5887: LD_INT 13
5889: PUSH
5890: LD_INT 1
5892: PUSH
5893: LD_INT 2
5895: PUSH
5896: LD_INT 27
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: PUSH
5905: LD_INT 13
5907: PUSH
5908: LD_INT 1
5910: PUSH
5911: LD_INT 2
5913: PUSH
5914: LD_INT 25
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: PUSH
5923: LD_INT 11
5925: PUSH
5926: LD_INT 2
5928: PUSH
5929: LD_INT 2
5931: PUSH
5932: LD_INT 24
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: PUSH
5941: LD_INT 11
5943: PUSH
5944: LD_INT 2
5946: PUSH
5947: LD_INT 2
5949: PUSH
5950: LD_INT 24
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: ST_TO_ADDR
// MC_SetProduceList ( base , tmp ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_VAR 0 3
5975: PPUSH
5976: CALL 68051 0 2
// repeat wait ( 0 0$1 ) ;
5980: LD_INT 35
5982: PPUSH
5983: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
5987: LD_VAR 0 2
5991: PPUSH
5992: CALL 68508 0 1
5996: PUSH
5997: LD_INT 0
5999: EQUAL
6000: IFFALSE 5980
// wait ( 0 0$20 ) ;
6002: LD_INT 700
6004: PPUSH
6005: CALL_OW 67
// _target := [ [ 119 , 9 ] ] ;
6009: LD_ADDR_VAR 0 5
6013: PUSH
6014: LD_INT 119
6016: PUSH
6017: LD_INT 9
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , ar_cargo_bay ] ) ) ;
6027: LD_ADDR_VAR 0 6
6031: PUSH
6032: LD_EXP 76
6036: PUSH
6037: LD_VAR 0 2
6041: ARRAY
6042: PUSH
6043: LD_EXP 79
6047: PUSH
6048: LD_VAR 0 2
6052: ARRAY
6053: PUSH
6054: LD_EXP 76
6058: PUSH
6059: LD_VAR 0 2
6063: ARRAY
6064: PPUSH
6065: LD_INT 34
6067: PUSH
6068: LD_INT 32
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PPUSH
6075: CALL_OW 72
6079: UNION
6080: DIFF
6081: ST_TO_ADDR
// if not attackers then
6082: LD_VAR 0 6
6086: NOT
6087: IFFALSE 6091
// exit ;
6089: GO 6270
// uc_side := 2 ;
6091: LD_ADDR_OWVAR 20
6095: PUSH
6096: LD_INT 2
6098: ST_TO_ADDR
// uc_nation := 2 ;
6099: LD_ADDR_OWVAR 21
6103: PUSH
6104: LD_INT 2
6106: ST_TO_ADDR
// InitHc ;
6107: CALL_OW 19
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6111: LD_ADDR_VAR 0 1
6115: PUSH
6116: DOUBLE
6117: LD_INT 1
6119: DEC
6120: ST_TO_ADDR
6121: LD_INT 4
6123: PUSH
6124: LD_INT 5
6126: PUSH
6127: LD_INT 6
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: LIST
6134: PUSH
6135: LD_OWVAR 67
6139: ARRAY
6140: PUSH
6141: FOR_TO
6142: IFFALSE 6219
// begin PrepareHuman ( false , [ class_apeman_soldier , class_apeman_kamikaze ] [ rand ( 1 , 2 ) ] , 8 ) ;
6144: LD_INT 0
6146: PPUSH
6147: LD_INT 15
6149: PUSH
6150: LD_INT 17
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PUSH
6157: LD_INT 1
6159: PPUSH
6160: LD_INT 2
6162: PPUSH
6163: CALL_OW 12
6167: ARRAY
6168: PPUSH
6169: LD_INT 8
6171: PPUSH
6172: CALL_OW 380
// un := CreateHuman ;
6176: LD_ADDR_VAR 0 7
6180: PUSH
6181: CALL_OW 44
6185: ST_TO_ADDR
// PlaceUnitArea ( un , east_spawn , false ) ;
6186: LD_VAR 0 7
6190: PPUSH
6191: LD_INT 23
6193: PPUSH
6194: LD_INT 0
6196: PPUSH
6197: CALL_OW 49
// attackers := attackers union un ;
6201: LD_ADDR_VAR 0 6
6205: PUSH
6206: LD_VAR 0 6
6210: PUSH
6211: LD_VAR 0 7
6215: UNION
6216: ST_TO_ADDR
// end ;
6217: GO 6141
6219: POP
6220: POP
// repeat wait ( 0 0$1 ) ;
6221: LD_INT 35
6223: PPUSH
6224: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
6228: LD_VAR 0 6
6232: PPUSH
6233: LD_INT 60
6235: PUSH
6236: EMPTY
6237: LIST
6238: PPUSH
6239: CALL_OW 72
6243: NOT
6244: IFFALSE 6221
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
6246: LD_VAR 0 2
6250: PPUSH
6251: LD_VAR 0 6
6255: PPUSH
6256: LD_VAR 0 5
6260: PPUSH
6261: LD_VAR 0 4
6265: PPUSH
6266: CALL 68345 0 4
// end ; end_of_file
6270: PPOPN 7
6272: END
// export function PrepareAmericanAttack ; var i , tmp , veh , flags , _target ; begin
6273: LD_INT 0
6275: PPUSH
6276: PPUSH
6277: PPUSH
6278: PPUSH
6279: PPUSH
6280: PPUSH
// uc_side := 1 ;
6281: LD_ADDR_OWVAR 20
6285: PUSH
6286: LD_INT 1
6288: ST_TO_ADDR
// uc_nation := 1 ;
6289: LD_ADDR_OWVAR 21
6293: PUSH
6294: LD_INT 1
6296: ST_TO_ADDR
// InitHc ;
6297: CALL_OW 19
// InitVc ;
6301: CALL_OW 20
// tmp := [ ] ;
6305: LD_ADDR_VAR 0 3
6309: PUSH
6310: EMPTY
6311: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
6312: LD_ADDR_VAR 0 5
6316: PUSH
6317: LD_INT 0
6319: PUSH
6320: LD_INT 0
6322: PUSH
6323: LD_INT 0
6325: PUSH
6326: LD_INT 0
6328: PUSH
6329: LD_INT 0
6331: PUSH
6332: LD_INT 0
6334: PUSH
6335: LD_INT 0
6337: PUSH
6338: LD_INT 0
6340: PUSH
6341: LD_INT 1
6343: PUSH
6344: LD_INT 0
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: ST_TO_ADDR
// _target := [ [ 71 , 34 ] , [ 63 , 49 ] ] ;
6359: LD_ADDR_VAR 0 6
6363: PUSH
6364: LD_INT 71
6366: PUSH
6367: LD_INT 34
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: LD_INT 63
6376: PUSH
6377: LD_INT 49
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
6388: LD_ADDR_VAR 0 2
6392: PUSH
6393: DOUBLE
6394: LD_INT 1
6396: DEC
6397: ST_TO_ADDR
6398: LD_INT 5
6400: PUSH
6401: LD_INT 6
6403: PUSH
6404: LD_INT 6
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: LD_OWVAR 67
6416: ARRAY
6417: PUSH
6418: FOR_TO
6419: IFFALSE 6556
// begin PrepareVehicle ( [ us_medium_wheeled , us_heavy_tracked , us_morphling ] [ rand ( 1 , 3 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ us_laser , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 78 ) ;
6421: LD_INT 2
6423: PUSH
6424: LD_INT 4
6426: PUSH
6427: LD_INT 5
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: LIST
6434: PUSH
6435: LD_INT 1
6437: PPUSH
6438: LD_INT 3
6440: PPUSH
6441: CALL_OW 12
6445: ARRAY
6446: PPUSH
6447: LD_INT 1
6449: PUSH
6450: LD_INT 3
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: PUSH
6457: LD_INT 1
6459: PPUSH
6460: LD_INT 2
6462: PPUSH
6463: CALL_OW 12
6467: ARRAY
6468: PPUSH
6469: LD_INT 3
6471: PPUSH
6472: LD_INT 9
6474: PUSH
6475: LD_INT 7
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 1
6484: PPUSH
6485: LD_INT 2
6487: PPUSH
6488: CALL_OW 12
6492: ARRAY
6493: PPUSH
6494: LD_INT 78
6496: PPUSH
6497: CALL 19575 0 5
// veh := CreateVehicle ;
6501: LD_ADDR_VAR 0 4
6505: PUSH
6506: CALL_OW 45
6510: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 2
6518: PPUSH
6519: CALL_OW 233
// PlaceUnitArea ( veh , north_spawn , false ) ;
6523: LD_VAR 0 4
6527: PPUSH
6528: LD_INT 17
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: CALL_OW 49
// tmp := tmp ^ veh ;
6538: LD_ADDR_VAR 0 3
6542: PUSH
6543: LD_VAR 0 3
6547: PUSH
6548: LD_VAR 0 4
6552: ADD
6553: ST_TO_ADDR
// end ;
6554: GO 6418
6556: POP
6557: POP
// if not tmp then
6558: LD_VAR 0 3
6562: NOT
6563: IFFALSE 6567
// exit ;
6565: GO 6610
// if not first_powell_attack then
6567: LD_EXP 11
6571: NOT
6572: IFFALSE 6582
// first_powell_attack := true ;
6574: LD_ADDR_EXP 11
6578: PUSH
6579: LD_INT 1
6581: ST_TO_ADDR
// Attack ( [ 0 , tmp , _target , flags ] ) ;
6582: LD_INT 0
6584: PUSH
6585: LD_VAR 0 3
6589: PUSH
6590: LD_VAR 0 6
6594: PUSH
6595: LD_VAR 0 5
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: PPUSH
6606: CALL 47646 0 1
// end ; end_of_file
6610: LD_VAR 0 1
6614: RET
// export function Action ; var tmp , i , un ; begin
6615: LD_INT 0
6617: PPUSH
6618: PPUSH
6619: PPUSH
6620: PPUSH
// CenterNowOnXY ( 68 , 39 ) ;
6621: LD_INT 68
6623: PPUSH
6624: LD_INT 39
6626: PPUSH
6627: CALL_OW 86
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
6631: LD_ADDR_VAR 0 2
6635: PUSH
6636: LD_INT 22
6638: PUSH
6639: LD_INT 7
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PPUSH
6646: CALL_OW 69
6650: ST_TO_ADDR
// InGameOn ;
6651: CALL_OW 8
// ComMoveXY ( tmp , 71 , 49 ) ;
6655: LD_VAR 0 2
6659: PPUSH
6660: LD_INT 71
6662: PPUSH
6663: LD_INT 49
6665: PPUSH
6666: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6670: LD_INT 35
6672: PPUSH
6673: CALL_OW 67
// until SeeXY ( 7 , 71 , 51 ) ;
6677: LD_INT 7
6679: PPUSH
6680: LD_INT 71
6682: PPUSH
6683: LD_INT 51
6685: PPUSH
6686: CALL_OW 293
6690: IFFALSE 6670
// DialogueOn ;
6692: CALL_OW 6
// Say ( JMM , D1-JMM-1 ) ;
6696: LD_EXP 14
6700: PPUSH
6701: LD_STRING D1-JMM-1
6703: PPUSH
6704: CALL_OW 88
// if Joan then
6708: LD_EXP 29
6712: IFFALSE 6726
// Say ( Joan , D1-Joan-1 ) ;
6714: LD_EXP 29
6718: PPUSH
6719: LD_STRING D1-Joan-1
6721: PPUSH
6722: CALL_OW 88
// if Lisa then
6726: LD_EXP 16
6730: IFFALSE 6744
// Say ( Lisa , D1-Lisa-1 ) ;
6732: LD_EXP 16
6736: PPUSH
6737: LD_STRING D1-Lisa-1
6739: PPUSH
6740: CALL_OW 88
// if Joan or Lisa then
6744: LD_EXP 29
6748: PUSH
6749: LD_EXP 16
6753: OR
6754: IFFALSE 6768
// Say ( JMM , D1-JMM-2 ) ;
6756: LD_EXP 14
6760: PPUSH
6761: LD_STRING D1-JMM-2
6763: PPUSH
6764: CALL_OW 88
// DialogueOff ;
6768: CALL_OW 7
// InGameOff ;
6772: CALL_OW 9
// PlaceSeeing ( 71 , 50 , 7 , - 30 ) ;
6776: LD_INT 71
6778: PPUSH
6779: LD_INT 50
6781: PPUSH
6782: LD_INT 7
6784: PPUSH
6785: LD_INT 30
6787: NEG
6788: PPUSH
6789: CALL_OW 330
// RemoveSeeing ( 71 , 50 , 7 ) ;
6793: LD_INT 71
6795: PPUSH
6796: LD_INT 50
6798: PPUSH
6799: LD_INT 7
6801: PPUSH
6802: CALL_OW 331
// ChangeMissionObjectives ( M1 ) ;
6806: LD_STRING M1
6808: PPUSH
6809: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
6813: LD_INT 35
6815: PPUSH
6816: CALL_OW 67
// until freedom ;
6820: LD_EXP 3
6824: IFFALSE 6813
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
6826: LD_INT 350
6828: PPUSH
6829: LD_INT 700
6831: PPUSH
6832: CALL_OW 12
6836: PPUSH
6837: CALL_OW 67
// PrepareGossudarov ;
6841: CALL 1678 0 0
// repeat wait ( 0 0$1 ) ;
6845: LD_INT 35
6847: PPUSH
6848: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6852: LD_INT 22
6854: PUSH
6855: LD_INT 6
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PUSH
6862: LD_INT 3
6864: PUSH
6865: LD_INT 24
6867: PUSH
6868: LD_INT 1000
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PPUSH
6883: CALL_OW 69
6887: IFFALSE 6845
// tmp := FilterAllUnits ( [ f_side , 6 ] ) ;
6889: LD_ADDR_VAR 0 2
6893: PUSH
6894: LD_INT 22
6896: PUSH
6897: LD_INT 6
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PPUSH
6904: CALL_OW 69
6908: ST_TO_ADDR
// for i in tmp do
6909: LD_ADDR_VAR 0 3
6913: PUSH
6914: LD_VAR 0 2
6918: PUSH
6919: FOR_IN
6920: IFFALSE 6936
// SetSide ( i , 7 ) ;
6922: LD_VAR 0 3
6926: PPUSH
6927: LD_INT 7
6929: PPUSH
6930: CALL_OW 235
6934: GO 6919
6936: POP
6937: POP
// DialogueOn ;
6938: CALL_OW 6
// ComTurnUnit ( [ JMM , Roth ] , Gossudarov ) ;
6942: LD_EXP 14
6946: PUSH
6947: LD_EXP 15
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PPUSH
6956: LD_EXP 31
6960: PPUSH
6961: CALL_OW 119
// CenterNowOnUnits ( Gossudarov ) ;
6965: LD_EXP 31
6969: PPUSH
6970: CALL_OW 87
// if not Roth then
6974: LD_EXP 15
6978: NOT
6979: IFFALSE 7043
// begin Say ( JMM , D2-JMM-1 ) ;
6981: LD_EXP 14
6985: PPUSH
6986: LD_STRING D2-JMM-1
6988: PPUSH
6989: CALL_OW 88
// Say ( JMM , D2-JMM-1b ) ;
6993: LD_EXP 14
6997: PPUSH
6998: LD_STRING D2-JMM-1b
7000: PPUSH
7001: CALL_OW 88
// Say ( Gossudarov , D2-Gos-1 ) ;
7005: LD_EXP 31
7009: PPUSH
7010: LD_STRING D2-Gos-1
7012: PPUSH
7013: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7017: LD_EXP 14
7021: PPUSH
7022: LD_STRING D2-JMM-2
7024: PPUSH
7025: CALL_OW 88
// Say ( Gossudarov , D2-Gos-2 ) ;
7029: LD_EXP 31
7033: PPUSH
7034: LD_STRING D2-Gos-2
7036: PPUSH
7037: CALL_OW 88
// end else
7041: GO 7139
// begin Say ( Roth , D2-Roth-2 ) ;
7043: LD_EXP 15
7047: PPUSH
7048: LD_STRING D2-Roth-2
7050: PPUSH
7051: CALL_OW 88
// Say ( JMM , D2-JMM-1a ) ;
7055: LD_EXP 14
7059: PPUSH
7060: LD_STRING D2-JMM-1a
7062: PPUSH
7063: CALL_OW 88
// Say ( Roth , D2-Roth-2a ) ;
7067: LD_EXP 15
7071: PPUSH
7072: LD_STRING D2-Roth-2a
7074: PPUSH
7075: CALL_OW 88
// Say ( Roth , D2-Roth-2b ) ;
7079: LD_EXP 15
7083: PPUSH
7084: LD_STRING D2-Roth-2b
7086: PPUSH
7087: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7091: LD_EXP 14
7095: PPUSH
7096: LD_STRING D2-JMM-3
7098: PPUSH
7099: CALL_OW 88
// Say ( Gossudarov , D2-Gos-3 ) ;
7103: LD_EXP 31
7107: PPUSH
7108: LD_STRING D2-Gos-3
7110: PPUSH
7111: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
7115: LD_EXP 14
7119: PPUSH
7120: LD_STRING D2-JMM-4
7122: PPUSH
7123: CALL_OW 88
// Say ( Gossudarov , D2-Gos-4 ) ;
7127: LD_EXP 31
7131: PPUSH
7132: LD_STRING D2-Gos-4
7134: PPUSH
7135: CALL_OW 88
// end ; Say ( JMM , D2-JMM-5 ) ;
7139: LD_EXP 14
7143: PPUSH
7144: LD_STRING D2-JMM-5
7146: PPUSH
7147: CALL_OW 88
// Say ( Gossudarov , D2-Gos-5 ) ;
7151: LD_EXP 31
7155: PPUSH
7156: LD_STRING D2-Gos-5
7158: PPUSH
7159: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
7163: LD_EXP 14
7167: PPUSH
7168: LD_STRING D2-JMM-6
7170: PPUSH
7171: CALL_OW 88
// DialogueOff ;
7175: CALL_OW 7
// wait ( 0 0$2 ) ;
7179: LD_INT 70
7181: PPUSH
7182: CALL_OW 67
// if Kirilenkova then
7186: LD_EXP 32
7190: IFFALSE 7204
// Say ( Kirilenkova , D3-Kir-1 ) ;
7192: LD_EXP 32
7196: PPUSH
7197: LD_STRING D3-Kir-1
7199: PPUSH
7200: CALL_OW 88
// gossudarov_arrive := true ;
7204: LD_ADDR_EXP 4
7208: PUSH
7209: LD_INT 1
7211: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7212: LD_INT 35
7214: PPUSH
7215: CALL_OW 67
// until ru_lab_builded ;
7219: LD_EXP 5
7223: IFFALSE 7212
// if Kirilenkova then
7225: LD_EXP 32
7229: IFFALSE 7245
// Say ( Kirilenkova , D3a-Kir-1 ) else
7231: LD_EXP 32
7235: PPUSH
7236: LD_STRING D3a-Kir-1
7238: PPUSH
7239: CALL_OW 88
7243: GO 7267
// begin un := SciRu ;
7245: LD_ADDR_VAR 0 4
7249: PUSH
7250: CALL 12034 0 0
7254: ST_TO_ADDR
// Say ( un , D3a-Sci1-1 ) ;
7255: LD_VAR 0 4
7259: PPUSH
7260: LD_STRING D3a-Sci1-1
7262: PPUSH
7263: CALL_OW 88
// end ; if Kirilenkova or un then
7267: LD_EXP 32
7271: PUSH
7272: LD_VAR 0 4
7276: OR
7277: IFFALSE 7291
// Say ( JMM , D3a-JMM-1 ) ;
7279: LD_EXP 14
7283: PPUSH
7284: LD_STRING D3a-JMM-1
7286: PPUSH
7287: CALL_OW 88
// end ;
7291: LD_VAR 0 1
7295: RET
// every 0 0$1 trigger gossudarov_arrive and FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) < 6 do
7296: LD_EXP 4
7300: PUSH
7301: LD_INT 22
7303: PUSH
7304: LD_INT 7
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: PUSH
7311: LD_INT 2
7313: PUSH
7314: LD_INT 25
7316: PUSH
7317: LD_INT 1
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 25
7326: PUSH
7327: LD_INT 2
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: LD_INT 25
7336: PUSH
7337: LD_INT 3
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PUSH
7344: LD_INT 25
7346: PUSH
7347: LD_INT 4
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 25
7356: PUSH
7357: LD_INT 5
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 25
7366: PUSH
7367: LD_INT 8
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 25
7376: PUSH
7377: LD_INT 9
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PPUSH
7398: CALL_OW 69
7402: PUSH
7403: LD_INT 6
7405: LESS
7406: AND
7407: IFFALSE 7419
7409: GO 7411
7411: DISABLE
// YouLost ( TooMany ) ;
7412: LD_STRING TooMany
7414: PPUSH
7415: CALL_OW 104
7419: END
// every 0 0$40 trigger GetSide ( Gossudarov ) = 7 do var i , tmp , un ;
7420: LD_EXP 31
7424: PPUSH
7425: CALL_OW 255
7429: PUSH
7430: LD_INT 7
7432: EQUAL
7433: IFFALSE 7633
7435: GO 7437
7437: DISABLE
7438: LD_INT 0
7440: PPUSH
7441: PPUSH
7442: PPUSH
// begin uc_side := 3 ;
7443: LD_ADDR_OWVAR 20
7447: PUSH
7448: LD_INT 3
7450: ST_TO_ADDR
// uc_nation := 3 ;
7451: LD_ADDR_OWVAR 21
7455: PUSH
7456: LD_INT 3
7458: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_heavy_machine_gun , 100 ) ;
7459: LD_INT 21
7461: PPUSH
7462: LD_INT 3
7464: PPUSH
7465: LD_INT 3
7467: PPUSH
7468: LD_INT 42
7470: PPUSH
7471: LD_INT 100
7473: PPUSH
7474: CALL 19575 0 5
// un := CreateVehicle ;
7478: LD_ADDR_VAR 0 3
7482: PUSH
7483: CALL_OW 45
7487: ST_TO_ADDR
// PlaceUnitArea ( un , south_west_spawn , false ) ;
7488: LD_VAR 0 3
7492: PPUSH
7493: LD_INT 15
7495: PPUSH
7496: LD_INT 0
7498: PPUSH
7499: CALL_OW 49
// ComMoveXY ( un , 67 , 45 ) ;
7503: LD_VAR 0 3
7507: PPUSH
7508: LD_INT 67
7510: PPUSH
7511: LD_INT 45
7513: PPUSH
7514: CALL_OW 111
// AddComWait ( un , 0 0$2 ) ;
7518: LD_VAR 0 3
7522: PPUSH
7523: LD_INT 70
7525: PPUSH
7526: CALL_OW 202
// AddComMoveXY ( un , 69 , 18 ) ;
7530: LD_VAR 0 3
7534: PPUSH
7535: LD_INT 69
7537: PPUSH
7538: LD_INT 18
7540: PPUSH
7541: CALL_OW 171
// AddComMoveXY ( un , 60 , 2 ) ;
7545: LD_VAR 0 3
7549: PPUSH
7550: LD_INT 60
7552: PPUSH
7553: LD_INT 2
7555: PPUSH
7556: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7560: LD_INT 35
7562: PPUSH
7563: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , north_spawn ) ;
7567: LD_VAR 0 3
7571: PPUSH
7572: CALL_OW 302
7576: NOT
7577: PUSH
7578: LD_VAR 0 3
7582: PPUSH
7583: LD_INT 17
7585: PPUSH
7586: CALL_OW 308
7590: OR
7591: IFFALSE 7560
// if IsInArea ( un , north_spawn ) or IsAt ( un , 60 , 2 ) then
7593: LD_VAR 0 3
7597: PPUSH
7598: LD_INT 17
7600: PPUSH
7601: CALL_OW 308
7605: PUSH
7606: LD_VAR 0 3
7610: PPUSH
7611: LD_INT 60
7613: PPUSH
7614: LD_INT 2
7616: PPUSH
7617: CALL_OW 307
7621: OR
7622: IFFALSE 7633
// RemoveUnit ( un ) ;
7624: LD_VAR 0 3
7628: PPUSH
7629: CALL_OW 64
// end ;
7633: PPOPN 3
7635: END
// every 0 0$2 do var i , un , tmp ;
7636: GO 7638
7638: DISABLE
7639: LD_INT 0
7641: PPUSH
7642: PPUSH
7643: PPUSH
// begin repeat wait ( 0 0$2 ) ;
7644: LD_INT 70
7646: PPUSH
7647: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 3 ] ] ) ;
7651: LD_ADDR_VAR 0 3
7655: PUSH
7656: LD_INT 22
7658: PUSH
7659: LD_INT 7
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PUSH
7666: LD_INT 101
7668: PUSH
7669: LD_INT 3
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PPUSH
7680: CALL_OW 69
7684: ST_TO_ADDR
// until tmp ;
7685: LD_VAR 0 3
7689: IFFALSE 7644
// un := NearestUnitToUnit ( tmp , JMM ) ;
7691: LD_ADDR_VAR 0 2
7695: PUSH
7696: LD_VAR 0 3
7700: PPUSH
7701: LD_EXP 14
7705: PPUSH
7706: CALL_OW 74
7710: ST_TO_ADDR
// player_spotted := true ;
7711: LD_ADDR_EXP 6
7715: PUSH
7716: LD_INT 1
7718: ST_TO_ADDR
// tmp := SciRu ;
7719: LD_ADDR_VAR 0 3
7723: PUSH
7724: CALL 12034 0 0
7728: ST_TO_ADDR
// DialogueOn ;
7729: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 7 , - 8 ) ;
7733: LD_VAR 0 2
7737: PPUSH
7738: CALL_OW 250
7742: PPUSH
7743: LD_VAR 0 2
7747: PPUSH
7748: CALL_OW 251
7752: PPUSH
7753: LD_INT 7
7755: PPUSH
7756: LD_INT 8
7758: NEG
7759: PPUSH
7760: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7764: LD_VAR 0 2
7768: PPUSH
7769: CALL_OW 87
// if tmp then
7773: LD_VAR 0 3
7777: IFFALSE 7791
// Say ( tmp , D4-RSci1-1 ) ;
7779: LD_VAR 0 3
7783: PPUSH
7784: LD_STRING D4-RSci1-1
7786: PPUSH
7787: CALL_OW 88
// if Gossudarov then
7791: LD_EXP 31
7795: IFFALSE 7821
// begin Say ( Gossudarov , D4-Gos-1 ) ;
7797: LD_EXP 31
7801: PPUSH
7802: LD_STRING D4-Gos-1
7804: PPUSH
7805: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7809: LD_EXP 14
7813: PPUSH
7814: LD_STRING D4-JMM-1
7816: PPUSH
7817: CALL_OW 88
// end ; RemoveSeeing ( GetX ( un ) , GetY ( un ) , 7 ) ;
7821: LD_VAR 0 2
7825: PPUSH
7826: CALL_OW 250
7830: PPUSH
7831: LD_VAR 0 2
7835: PPUSH
7836: CALL_OW 251
7840: PPUSH
7841: LD_INT 7
7843: PPUSH
7844: CALL_OW 331
// DialogueOff ;
7848: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
7852: LD_STRING M5
7854: PPUSH
7855: CALL_OW 337
// end ;
7859: PPOPN 3
7861: END
// every 0 0$30 + 2 2$30 trigger player_spotted do
7862: LD_EXP 6
7866: IFFALSE 8325
7868: GO 7870
7870: DISABLE
// begin PrepareBelkov ;
7871: CALL 1928 0 0
// ComMoveXY ( Belkov , 118 , 106 ) ;
7875: LD_EXP 46
7879: PPUSH
7880: LD_INT 118
7882: PPUSH
7883: LD_INT 106
7885: PPUSH
7886: CALL_OW 111
// AddComHold ( Belkov ) ;
7890: LD_EXP 46
7894: PPUSH
7895: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
7899: LD_INT 35
7901: PPUSH
7902: CALL_OW 67
// until IsAt ( Belkov , 118 , 106 ) ;
7906: LD_EXP 46
7910: PPUSH
7911: LD_INT 118
7913: PPUSH
7914: LD_INT 106
7916: PPUSH
7917: CALL_OW 307
7921: IFFALSE 7899
// ChangeSideFog ( 4 , 7 ) ;
7923: LD_INT 4
7925: PPUSH
7926: LD_INT 7
7928: PPUSH
7929: CALL_OW 343
// if IsOk ( Belkov ) then
7933: LD_EXP 46
7937: PPUSH
7938: CALL_OW 302
7942: IFFALSE 8026
// begin InGameOn ;
7944: CALL_OW 8
// DialogueOn ;
7948: CALL_OW 6
// SayRadio ( Belkov , D5-Bel-1 ) ;
7952: LD_EXP 46
7956: PPUSH
7957: LD_STRING D5-Bel-1
7959: PPUSH
7960: CALL_OW 94
// if Gossudarov then
7964: LD_EXP 31
7968: IFFALSE 8018
// begin Say ( Gossudarov , D5-Gos-1 ) ;
7970: LD_EXP 31
7974: PPUSH
7975: LD_STRING D5-Gos-1
7977: PPUSH
7978: CALL_OW 88
// Say ( JMM , D5-JMM-1 ) ;
7982: LD_EXP 14
7986: PPUSH
7987: LD_STRING D5-JMM-1
7989: PPUSH
7990: CALL_OW 88
// Say ( Gossudarov , D5-Gos-2 ) ;
7994: LD_EXP 31
7998: PPUSH
7999: LD_STRING D5-Gos-2
8001: PPUSH
8002: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
8006: LD_EXP 14
8010: PPUSH
8011: LD_STRING D5-JMM-2
8013: PPUSH
8014: CALL_OW 88
// end ; DialogueOff ;
8018: CALL_OW 7
// InGameOff ;
8022: CALL_OW 9
// end ; case Query ( QSaveBelkov ) of 1 :
8026: LD_STRING QSaveBelkov
8028: PPUSH
8029: CALL_OW 97
8033: PUSH
8034: LD_INT 1
8036: DOUBLE
8037: EQUAL
8038: IFTRUE 8042
8040: GO 8092
8042: POP
// begin DialogueOn ;
8043: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
8047: LD_EXP 14
8051: PPUSH
8052: LD_STRING D5a-JMM-1
8054: PPUSH
8055: CALL_OW 88
// SayRadio ( Belkov , D5a-Bel-1 ) ;
8059: LD_EXP 46
8063: PPUSH
8064: LD_STRING D5a-Bel-1
8066: PPUSH
8067: CALL_OW 94
// DialogueOff ;
8071: CALL_OW 7
// ComMoveXY ( Belkov , 83 , 49 ) ;
8075: LD_EXP 46
8079: PPUSH
8080: LD_INT 83
8082: PPUSH
8083: LD_INT 49
8085: PPUSH
8086: CALL_OW 111
// end ; 2 :
8090: GO 8152
8092: LD_INT 2
8094: DOUBLE
8095: EQUAL
8096: IFTRUE 8100
8098: GO 8151
8100: POP
// begin Say ( JMM , D5a-JMM-2 ) ;
8101: LD_EXP 14
8105: PPUSH
8106: LD_STRING D5a-JMM-2
8108: PPUSH
8109: CALL_OW 88
// ComWait ( Belkov , 0 0$10 ) ;
8113: LD_EXP 46
8117: PPUSH
8118: LD_INT 350
8120: PPUSH
8121: CALL_OW 142
// AddComMoveXY ( Belkov , 107 , 109 ) ;
8125: LD_EXP 46
8129: PPUSH
8130: LD_INT 107
8132: PPUSH
8133: LD_INT 109
8135: PPUSH
8136: CALL_OW 171
// AddComHold ( Belkov ) ;
8140: LD_EXP 46
8144: PPUSH
8145: CALL_OW 200
// end ; end ;
8149: GO 8152
8151: POP
// repeat wait ( 0 0$1 ) ;
8152: LD_INT 35
8154: PPUSH
8155: CALL_OW 67
// until ( IsDead ( Belkov ) and GetSide ( Belkov ) = 4 ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Belkov ) , Belkov ) < 10 ;
8159: LD_EXP 46
8163: PPUSH
8164: CALL_OW 301
8168: PUSH
8169: LD_EXP 46
8173: PPUSH
8174: CALL_OW 255
8178: PUSH
8179: LD_INT 4
8181: EQUAL
8182: AND
8183: PUSH
8184: LD_INT 22
8186: PUSH
8187: LD_INT 7
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PPUSH
8194: CALL_OW 69
8198: PPUSH
8199: LD_EXP 46
8203: PPUSH
8204: CALL_OW 74
8208: PPUSH
8209: LD_EXP 46
8213: PPUSH
8214: CALL_OW 296
8218: PUSH
8219: LD_INT 10
8221: LESS
8222: OR
8223: IFFALSE 8152
// if IsDead ( Belkov ) then
8225: LD_EXP 46
8229: PPUSH
8230: CALL_OW 301
8234: IFFALSE 8259
// begin CenterNowOnUnits ( Belkov ) ;
8236: LD_EXP 46
8240: PPUSH
8241: CALL_OW 87
// Say ( JMM , D5a-JMM-2a ) ;
8245: LD_EXP 14
8249: PPUSH
8250: LD_STRING D5a-JMM-2a
8252: PPUSH
8253: CALL_OW 88
// exit ;
8257: GO 8325
// end ; if See ( 7 , Belkov ) then
8259: LD_INT 7
8261: PPUSH
8262: LD_EXP 46
8266: PPUSH
8267: CALL_OW 292
8271: IFFALSE 8285
// SetSide ( Belkov , 7 ) ;
8273: LD_EXP 46
8277: PPUSH
8278: LD_INT 7
8280: PPUSH
8281: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
8285: LD_INT 35
8287: PPUSH
8288: CALL_OW 67
// until GetDistUnitXY ( Belkov , 66 , 45 ) < 30 ;
8292: LD_EXP 46
8296: PPUSH
8297: LD_INT 66
8299: PPUSH
8300: LD_INT 45
8302: PPUSH
8303: CALL_OW 297
8307: PUSH
8308: LD_INT 30
8310: LESS
8311: IFFALSE 8285
// Say ( Belkov , D6-Bel-1 ) ;
8313: LD_EXP 46
8317: PPUSH
8318: LD_STRING D6-Bel-1
8320: PPUSH
8321: CALL_OW 88
// end ;
8325: END
// every 0 0$1 trigger IsOk ( Belkov ) and UnitShoot ( Belkov ) in FilterAllUnits ( [ f_or , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ) do
8326: LD_EXP 46
8330: PPUSH
8331: CALL_OW 302
8335: PUSH
8336: LD_EXP 46
8340: PPUSH
8341: CALL_OW 504
8345: PUSH
8346: LD_INT 2
8348: PUSH
8349: LD_INT 34
8351: PUSH
8352: LD_INT 47
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_INT 34
8361: PUSH
8362: LD_INT 45
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: PPUSH
8374: CALL_OW 69
8378: IN
8379: AND
8380: IFFALSE 8397
8382: GO 8384
8384: DISABLE
// Say ( Belkov , D7-Bel-1 ) ;
8385: LD_EXP 46
8389: PPUSH
8390: LD_STRING D7-Bel-1
8392: PPUSH
8393: CALL_OW 88
8397: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 2 ] ] ) and not ar_base_spotted and not IsPlaced ( Burlak ) do var tmp ;
8398: LD_INT 22
8400: PUSH
8401: LD_INT 7
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: LD_INT 101
8410: PUSH
8411: LD_INT 2
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PPUSH
8422: CALL_OW 69
8426: PUSH
8427: LD_EXP 8
8431: NOT
8432: AND
8433: PUSH
8434: LD_EXP 45
8438: PPUSH
8439: CALL_OW 305
8443: NOT
8444: AND
8445: IFFALSE 8915
8447: GO 8449
8449: DISABLE
8450: LD_INT 0
8452: PPUSH
// begin ar_base_spotted := true ;
8453: LD_ADDR_EXP 8
8457: PUSH
8458: LD_INT 1
8460: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) ;
8461: LD_ADDR_VAR 0 1
8465: PUSH
8466: LD_INT 22
8468: PUSH
8469: LD_INT 2
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: PUSH
8476: LD_INT 21
8478: PUSH
8479: LD_INT 3
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PPUSH
8490: CALL_OW 69
8494: ST_TO_ADDR
// tmp := NearestUnitToUnit ( tmp , JMM ) ;
8495: LD_ADDR_VAR 0 1
8499: PUSH
8500: LD_VAR 0 1
8504: PPUSH
8505: LD_EXP 14
8509: PPUSH
8510: CALL_OW 74
8514: ST_TO_ADDR
// RevealFogArea ( 7 , area_base_arabian ) ;
8515: LD_INT 7
8517: PPUSH
8518: LD_INT 3
8520: PPUSH
8521: CALL_OW 332
// DialogueOn ;
8525: CALL_OW 6
// CenterNowOnXY ( GetX ( tmp ) , GetY ( tmp ) ) ;
8529: LD_VAR 0 1
8533: PPUSH
8534: CALL_OW 250
8538: PPUSH
8539: LD_VAR 0 1
8543: PPUSH
8544: CALL_OW 251
8548: PPUSH
8549: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Frank , Roth , Cornel , Denis , Gladstone ] ;
8553: LD_ADDR_VAR 0 1
8557: PUSH
8558: LD_INT 22
8560: PUSH
8561: LD_INT 7
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_INT 23
8570: PUSH
8571: LD_INT 1
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: PUSH
8578: LD_INT 26
8580: PUSH
8581: LD_INT 1
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: LIST
8592: PPUSH
8593: CALL_OW 69
8597: PUSH
8598: LD_EXP 14
8602: PUSH
8603: LD_EXP 18
8607: PUSH
8608: LD_EXP 19
8612: PUSH
8613: LD_EXP 26
8617: PUSH
8618: LD_EXP 15
8622: PUSH
8623: LD_EXP 24
8627: PUSH
8628: LD_EXP 20
8632: PUSH
8633: LD_EXP 22
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: DIFF
8648: ST_TO_ADDR
// if not tmp then
8649: LD_VAR 0 1
8653: NOT
8654: IFFALSE 8728
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_female ] ] ) diff [ Joan , Lisa , Kikuchi , Simms ] ;
8656: LD_ADDR_VAR 0 1
8660: PUSH
8661: LD_INT 22
8663: PUSH
8664: LD_INT 7
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PUSH
8671: LD_INT 23
8673: PUSH
8674: LD_INT 1
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 26
8683: PUSH
8684: LD_INT 2
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: LIST
8695: PPUSH
8696: CALL_OW 69
8700: PUSH
8701: LD_EXP 29
8705: PUSH
8706: LD_EXP 16
8710: PUSH
8711: LD_EXP 27
8715: PUSH
8716: LD_EXP 28
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: DIFF
8727: ST_TO_ADDR
// if tmp then
8728: LD_VAR 0 1
8732: IFFALSE 8803
// case GetSex ( tmp [ 1 ] ) of sex_male :
8734: LD_VAR 0 1
8738: PUSH
8739: LD_INT 1
8741: ARRAY
8742: PPUSH
8743: CALL_OW 258
8747: PUSH
8748: LD_INT 1
8750: DOUBLE
8751: EQUAL
8752: IFTRUE 8756
8754: GO 8775
8756: POP
// Say ( tmp [ 1 ] , D9-Sol1-1 ) ; sex_female :
8757: LD_VAR 0 1
8761: PUSH
8762: LD_INT 1
8764: ARRAY
8765: PPUSH
8766: LD_STRING D9-Sol1-1
8768: PPUSH
8769: CALL_OW 88
8773: GO 8803
8775: LD_INT 2
8777: DOUBLE
8778: EQUAL
8779: IFTRUE 8783
8781: GO 8802
8783: POP
// Say ( tmp [ 1 ] , D9-FSol1-1 ) ; end ;
8784: LD_VAR 0 1
8788: PUSH
8789: LD_INT 1
8791: ARRAY
8792: PPUSH
8793: LD_STRING D9-FSol1-1
8795: PPUSH
8796: CALL_OW 88
8800: GO 8803
8802: POP
// if Frank then
8803: LD_EXP 26
8807: IFFALSE 8911
// begin PlaceSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 , 8 ) ;
8809: LD_EXP 55
8813: PPUSH
8814: CALL_OW 250
8818: PPUSH
8819: LD_EXP 55
8823: PPUSH
8824: CALL_OW 251
8828: PPUSH
8829: LD_INT 7
8831: PPUSH
8832: LD_INT 8
8834: PPUSH
8835: CALL_OW 330
// CenterNowOnUnits ( mastodont ) ;
8839: LD_EXP 55
8843: PPUSH
8844: CALL_OW 87
// Say ( Frank , D9-Frank-1 ) ;
8848: LD_EXP 26
8852: PPUSH
8853: LD_STRING D9-Frank-1
8855: PPUSH
8856: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
8860: LD_EXP 14
8864: PPUSH
8865: LD_STRING D9-JMM-1
8867: PPUSH
8868: CALL_OW 88
// Say ( Frank , D9-Frank-2 ) ;
8872: LD_EXP 26
8876: PPUSH
8877: LD_STRING D9-Frank-2
8879: PPUSH
8880: CALL_OW 88
// RemoveSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 ) ;
8884: LD_EXP 55
8888: PPUSH
8889: CALL_OW 250
8893: PPUSH
8894: LD_EXP 55
8898: PPUSH
8899: CALL_OW 251
8903: PPUSH
8904: LD_INT 7
8906: PPUSH
8907: CALL_OW 331
// end ; DialogueOff ;
8911: CALL_OW 7
// end ;
8915: PPOPN 1
8917: END
// every 0 0$20 trigger first_attack or tick >= 20 20$00 do var i , selected_option ;
8918: LD_EXP 7
8922: PUSH
8923: LD_OWVAR 1
8927: PUSH
8928: LD_INT 42000
8930: GREATEREQUAL
8931: OR
8932: IFFALSE 9959
8934: GO 8936
8936: DISABLE
8937: LD_INT 0
8939: PPUSH
8940: PPUSH
// begin selected_option := 1 ;
8941: LD_ADDR_VAR 0 2
8945: PUSH
8946: LD_INT 1
8948: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8949: LD_INT 10500
8951: PPUSH
8952: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8956: LD_INT 35
8958: PPUSH
8959: CALL_OW 67
// until not ru_attackers ;
8963: LD_EXP 51
8967: NOT
8968: IFFALSE 8956
// PrepareBurlak ;
8970: CALL 2040 0 0
// repeat wait ( 0 0$2 ) ;
8974: LD_INT 70
8976: PPUSH
8977: CALL_OW 67
// until not HasTask ( Burlak ) ;
8981: LD_EXP 45
8985: PPUSH
8986: CALL_OW 314
8990: NOT
8991: IFFALSE 8974
// InGameOn ;
8993: CALL_OW 8
// DialogueOn ;
8997: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
9001: LD_EXP 48
9005: PPUSH
9006: CALL_OW 87
// SayRadio ( Burlak , D10-Bur-1 ) ;
9010: LD_EXP 45
9014: PPUSH
9015: LD_STRING D10-Bur-1
9017: PPUSH
9018: CALL_OW 94
// if Belkov and GetSide ( Belkov ) = 7 then
9022: LD_EXP 46
9026: PUSH
9027: LD_EXP 46
9031: PPUSH
9032: CALL_OW 255
9036: PUSH
9037: LD_INT 7
9039: EQUAL
9040: AND
9041: IFFALSE 9055
// Say ( Belkov , D10-Bel-1 ) ;
9043: LD_EXP 46
9047: PPUSH
9048: LD_STRING D10-Bel-1
9050: PPUSH
9051: CALL_OW 88
// if Gossudarov then
9055: LD_EXP 31
9059: IFFALSE 9073
// Say ( Gossudarov , D10-Gos-1 ) ;
9061: LD_EXP 31
9065: PPUSH
9066: LD_STRING D10-Gos-1
9068: PPUSH
9069: CALL_OW 88
// if Kirilenkova then
9073: LD_EXP 32
9077: IFFALSE 9091
// Say ( Kirilenkova , D10-Kir-1 ) ;
9079: LD_EXP 32
9083: PPUSH
9084: LD_STRING D10-Kir-1
9086: PPUSH
9087: CALL_OW 88
// Say ( SolRu , D10-RSol1-1 ) ;
9091: CALL 12163 0 0
9095: PPUSH
9096: LD_STRING D10-RSol1-1
9098: PPUSH
9099: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-2 ) ;
9103: LD_EXP 45
9107: PPUSH
9108: LD_STRING D10-Bur-2
9110: PPUSH
9111: CALL_OW 94
// Say ( JMM , D10-JMM-2 ) ;
9115: LD_EXP 14
9119: PPUSH
9120: LD_STRING D10-JMM-2
9122: PPUSH
9123: CALL_OW 88
// if Kirilenkova then
9127: LD_EXP 32
9131: IFFALSE 9147
// Say ( Kirilenkova , D10-Kir-2 ) else
9133: LD_EXP 32
9137: PPUSH
9138: LD_STRING D10-Kir-2
9140: PPUSH
9141: CALL_OW 88
9145: GO 9159
// Say ( SolRu , D10-RSol1-2 ) ;
9147: CALL 12163 0 0
9151: PPUSH
9152: LD_STRING D10-RSol1-2
9154: PPUSH
9155: CALL_OW 88
// Say ( JMM , D10-JMM-3 ) ;
9159: LD_EXP 14
9163: PPUSH
9164: LD_STRING D10-JMM-3
9166: PPUSH
9167: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-3 ) ;
9171: LD_EXP 45
9175: PPUSH
9176: LD_STRING D10-Bur-3
9178: PPUSH
9179: CALL_OW 94
// Say ( JMM , D10-JMM-4 ) ;
9183: LD_EXP 14
9187: PPUSH
9188: LD_STRING D10-JMM-4
9190: PPUSH
9191: CALL_OW 88
// DialogueOff ;
9195: CALL_OW 7
// InGameOff ;
9199: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
9203: LD_STRING M2
9205: PPUSH
9206: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
9210: LD_INT 35
9212: PPUSH
9213: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , Burlak , 8 ] ] ) ;
9217: LD_INT 22
9219: PUSH
9220: LD_INT 7
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: LD_INT 91
9229: PUSH
9230: LD_EXP 45
9234: PUSH
9235: LD_INT 8
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: LIST
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PPUSH
9247: CALL_OW 69
9251: IFFALSE 9210
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9253: LD_ADDR_VAR 0 1
9257: PUSH
9258: LD_INT 22
9260: PUSH
9261: LD_INT 4
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: PPUSH
9268: CALL_OW 69
9272: PUSH
9273: FOR_IN
9274: IFFALSE 9290
// SetSide ( i , 7 ) ;
9276: LD_VAR 0 1
9280: PPUSH
9281: LD_INT 7
9283: PPUSH
9284: CALL_OW 235
9288: GO 9273
9290: POP
9291: POP
// ChangeMissionObjectives ( M3 ) ;
9292: LD_STRING M3
9294: PPUSH
9295: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
9299: LD_INT 35
9301: PPUSH
9302: CALL_OW 67
// until GetDistUnits ( JMM , Burlak ) < 8 ;
9306: LD_EXP 14
9310: PPUSH
9311: LD_EXP 45
9315: PPUSH
9316: CALL_OW 296
9320: PUSH
9321: LD_INT 8
9323: LESS
9324: IFFALSE 9299
// ComTurnUnit ( JMM , Burlak ) ;
9326: LD_EXP 14
9330: PPUSH
9331: LD_EXP 45
9335: PPUSH
9336: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
9340: LD_EXP 45
9344: PPUSH
9345: LD_EXP 14
9349: PPUSH
9350: CALL_OW 119
// wait ( 0 0$0.3 ) ;
9354: LD_INT 10
9356: PPUSH
9357: CALL_OW 67
// DialogueOn ;
9361: CALL_OW 6
// Say ( JMM , D11-JMM-1 ) ;
9365: LD_EXP 14
9369: PPUSH
9370: LD_STRING D11-JMM-1
9372: PPUSH
9373: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
9377: LD_EXP 45
9381: PPUSH
9382: LD_STRING D11-Bur-1
9384: PPUSH
9385: CALL_OW 88
// Say ( JMM , D11-JMM-2 ) ;
9389: LD_EXP 14
9393: PPUSH
9394: LD_STRING D11-JMM-2
9396: PPUSH
9397: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
9401: LD_EXP 45
9405: PPUSH
9406: LD_STRING D11-Bur-2
9408: PPUSH
9409: CALL_OW 88
// Say ( JMM , D11-JMM-3 ) ;
9413: LD_EXP 14
9417: PPUSH
9418: LD_STRING D11-JMM-3
9420: PPUSH
9421: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
9425: LD_EXP 45
9429: PPUSH
9430: LD_STRING D11-Bur-3
9432: PPUSH
9433: CALL_OW 88
// Say ( JMM , D11-JMM-4 ) ;
9437: LD_EXP 14
9441: PPUSH
9442: LD_STRING D11-JMM-4
9444: PPUSH
9445: CALL_OW 88
// if ar_base_spotted then
9449: LD_EXP 8
9453: IFFALSE 9469
// Say ( Burlak , D12-Bur-1 ) else
9455: LD_EXP 45
9459: PPUSH
9460: LD_STRING D12-Bur-1
9462: PPUSH
9463: CALL_OW 88
9467: GO 9508
// begin RevealFogArea ( 7 , area_base_arabian ) ;
9469: LD_INT 7
9471: PPUSH
9472: LD_INT 3
9474: PPUSH
9475: CALL_OW 332
// CenterNowOnXY ( 127 , 45 ) ;
9479: LD_INT 127
9481: PPUSH
9482: LD_INT 45
9484: PPUSH
9485: CALL_OW 86
// Say ( Burlak , D12-Bur-1a ) ;
9489: LD_EXP 45
9493: PPUSH
9494: LD_STRING D12-Bur-1a
9496: PPUSH
9497: CALL_OW 88
// dwait ( 0 0$2 ) ;
9501: LD_INT 70
9503: PPUSH
9504: CALL_OW 68
// end ; Say ( Burlak , D12-Bur-1b ) ;
9508: LD_EXP 45
9512: PPUSH
9513: LD_STRING D12-Bur-1b
9515: PPUSH
9516: CALL_OW 88
// Say ( JMM , D12-JMM-1 ) ;
9520: LD_EXP 14
9524: PPUSH
9525: LD_STRING D12-JMM-1
9527: PPUSH
9528: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
9532: LD_EXP 45
9536: PPUSH
9537: LD_STRING D12-Bur-2
9539: PPUSH
9540: CALL_OW 88
// if Roth then
9544: LD_EXP 15
9548: IFFALSE 9564
// Say ( Roth , D12-Roth-2 ) else
9550: LD_EXP 15
9554: PPUSH
9555: LD_STRING D12-Roth-2
9557: PPUSH
9558: CALL_OW 88
9562: GO 9576
// Say ( SciRu , D12-RSci1-2 ) ;
9564: CALL 12034 0 0
9568: PPUSH
9569: LD_STRING D12-RSci1-2
9571: PPUSH
9572: CALL_OW 88
// Say ( JMM , D12-JMM-2 ) ;
9576: LD_EXP 14
9580: PPUSH
9581: LD_STRING D12-JMM-2
9583: PPUSH
9584: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
9588: LD_EXP 45
9592: PPUSH
9593: LD_STRING D12-Bur-3
9595: PPUSH
9596: CALL_OW 88
// Say ( JMM , D12-JMM-3 ) ;
9600: LD_EXP 14
9604: PPUSH
9605: LD_STRING D12-JMM-3
9607: PPUSH
9608: CALL_OW 88
// Say ( Burlak , D12-Bur-4 ) ;
9612: LD_EXP 45
9616: PPUSH
9617: LD_STRING D12-Bur-4
9619: PPUSH
9620: CALL_OW 88
// case Query ( QBase ) of 1 :
9624: LD_STRING QBase
9626: PPUSH
9627: CALL_OW 97
9631: PUSH
9632: LD_INT 1
9634: DOUBLE
9635: EQUAL
9636: IFTRUE 9640
9638: GO 9758
9640: POP
// begin Say ( JMM , D13a-JMM-1 ) ;
9641: LD_EXP 14
9645: PPUSH
9646: LD_STRING D13a-JMM-1
9648: PPUSH
9649: CALL_OW 88
// Say ( Burlak , D13a-Bur-1 ) ;
9653: LD_EXP 45
9657: PPUSH
9658: LD_STRING D13a-Bur-1
9660: PPUSH
9661: CALL_OW 88
// if Roth then
9665: LD_EXP 15
9669: IFFALSE 9685
// Say ( Roth , D13a-Roth-1 ) else
9671: LD_EXP 15
9675: PPUSH
9676: LD_STRING D13a-Roth-1
9678: PPUSH
9679: CALL_OW 88
9683: GO 9697
// Say ( SciRu , D13a-RSci1-1 ) ;
9685: CALL 12034 0 0
9689: PPUSH
9690: LD_STRING D13a-RSci1-1
9692: PPUSH
9693: CALL_OW 88
// Say ( JMM , D13a-JMM-2 ) ;
9697: LD_EXP 14
9701: PPUSH
9702: LD_STRING D13a-JMM-2
9704: PPUSH
9705: CALL_OW 88
// case Query ( QBaseAgain ) of 1 :
9709: LD_STRING QBaseAgain
9711: PPUSH
9712: CALL_OW 97
9716: PUSH
9717: LD_INT 1
9719: DOUBLE
9720: EQUAL
9721: IFTRUE 9725
9723: GO 9736
9725: POP
// selected_option := 2 ; 2 :
9726: LD_ADDR_VAR 0 2
9730: PUSH
9731: LD_INT 2
9733: ST_TO_ADDR
9734: GO 9756
9736: LD_INT 2
9738: DOUBLE
9739: EQUAL
9740: IFTRUE 9744
9742: GO 9755
9744: POP
// selected_option := 3 ; end ;
9745: LD_ADDR_VAR 0 2
9749: PUSH
9750: LD_INT 3
9752: ST_TO_ADDR
9753: GO 9756
9755: POP
// end ; 2 :
9756: GO 9797
9758: LD_INT 2
9760: DOUBLE
9761: EQUAL
9762: IFTRUE 9766
9764: GO 9777
9766: POP
// selected_option := 2 ; 3 :
9767: LD_ADDR_VAR 0 2
9771: PUSH
9772: LD_INT 2
9774: ST_TO_ADDR
9775: GO 9797
9777: LD_INT 3
9779: DOUBLE
9780: EQUAL
9781: IFTRUE 9785
9783: GO 9796
9785: POP
// selected_option := 3 ; end ;
9786: LD_ADDR_VAR 0 2
9790: PUSH
9791: LD_INT 3
9793: ST_TO_ADDR
9794: GO 9797
9796: POP
// if selected_option = 2 then
9797: LD_VAR 0 2
9801: PUSH
9802: LD_INT 2
9804: EQUAL
9805: IFFALSE 9899
// begin Say ( JMM , D13b-JMM-1 ) ;
9807: LD_EXP 14
9811: PPUSH
9812: LD_STRING D13b-JMM-1
9814: PPUSH
9815: CALL_OW 88
// Say ( Burlak , D13b-Bur-1 ) ;
9819: LD_EXP 45
9823: PPUSH
9824: LD_STRING D13b-Bur-1
9826: PPUSH
9827: CALL_OW 88
// Say ( JMM , D13b-JMM-2 ) ;
9831: LD_EXP 14
9835: PPUSH
9836: LD_STRING D13b-JMM-2
9838: PPUSH
9839: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-2 ) ;
9843: LD_EXP 54
9847: PPUSH
9848: LD_STRING D13b-Abd-2
9850: PPUSH
9851: CALL_OW 94
// Say ( JMM , D13b-JMM-3 ) ;
9855: LD_EXP 14
9859: PPUSH
9860: LD_STRING D13b-JMM-3
9862: PPUSH
9863: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-3 ) ;
9867: LD_EXP 54
9871: PPUSH
9872: LD_STRING D13b-Abd-3
9874: PPUSH
9875: CALL_OW 94
// Say ( JMM , D13b-JMM-4 ) ;
9879: LD_EXP 14
9883: PPUSH
9884: LD_STRING D13b-JMM-4
9886: PPUSH
9887: CALL_OW 88
// ar_active_attack := true ;
9891: LD_ADDR_EXP 9
9895: PUSH
9896: LD_INT 1
9898: ST_TO_ADDR
// end ; if selected_option = 3 then
9899: LD_VAR 0 2
9903: PUSH
9904: LD_INT 3
9906: EQUAL
9907: IFFALSE 9933
// begin Say ( JMM , D13c-JMM-1 ) ;
9909: LD_EXP 14
9913: PPUSH
9914: LD_STRING D13c-JMM-1
9916: PPUSH
9917: CALL_OW 88
// Say ( Burlak , D13c-Bur-1 ) ;
9921: LD_EXP 45
9925: PPUSH
9926: LD_STRING D13c-Bur-1
9928: PPUSH
9929: CALL_OW 88
// end ; DialogueOff ;
9933: CALL_OW 7
// if not ar_active_attack then
9937: LD_EXP 9
9941: NOT
9942: IFFALSE 9959
// begin wait ( 6 6$00 ) ;
9944: LD_INT 12600
9946: PPUSH
9947: CALL_OW 67
// ar_active_attack := true ;
9951: LD_ADDR_EXP 9
9955: PUSH
9956: LD_INT 1
9958: ST_TO_ADDR
// end ; end ;
9959: PPOPN 2
9961: END
// every 0 0$1 trigger IsPlaced ( Burlak ) and GetSide ( Burlak ) = 7 do
9962: LD_EXP 45
9966: PPUSH
9967: CALL_OW 305
9971: PUSH
9972: LD_EXP 45
9976: PPUSH
9977: CALL_OW 255
9981: PUSH
9982: LD_INT 7
9984: EQUAL
9985: AND
9986: IFFALSE 10147
9988: GO 9990
9990: DISABLE
// begin wait ( 4 4$40 ) ;
9991: LD_INT 9800
9993: PPUSH
9994: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9998: LD_INT 35
10000: PPUSH
10001: CALL_OW 67
// until not ru_attackers ;
10005: LD_EXP 51
10009: NOT
10010: IFFALSE 9998
// PrepareGnyevko ;
10012: CALL 1984 0 0
// ComMoveXY ( Gnyevko , 124 , 118 ) ;
10016: LD_EXP 47
10020: PPUSH
10021: LD_INT 124
10023: PPUSH
10024: LD_INT 118
10026: PPUSH
10027: CALL_OW 111
// AddComHold ( Gnyevko ) ;
10031: LD_EXP 47
10035: PPUSH
10036: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10040: LD_INT 35
10042: PPUSH
10043: CALL_OW 67
// until IsAt ( Gnyevko , 124 , 118 ) ;
10047: LD_EXP 47
10051: PPUSH
10052: LD_INT 124
10054: PPUSH
10055: LD_INT 118
10057: PPUSH
10058: CALL_OW 307
10062: IFFALSE 10040
// SayRadio ( Gnyevko , DBelkov-Gny-1 ) ;
10064: LD_EXP 47
10068: PPUSH
10069: LD_STRING DBelkov-Gny-1
10071: PPUSH
10072: CALL_OW 94
// Say ( Burlak , DBelkov-Bur-1a ) ;
10076: LD_EXP 45
10080: PPUSH
10081: LD_STRING DBelkov-Bur-1a
10083: PPUSH
10084: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10088: LD_INT 35
10090: PPUSH
10091: CALL_OW 67
// until GetDistUnits ( Gnyevko , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Gnyevko ) ) < 8 ;
10095: LD_EXP 47
10099: PPUSH
10100: LD_INT 22
10102: PUSH
10103: LD_INT 7
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PPUSH
10110: CALL_OW 69
10114: PPUSH
10115: LD_EXP 47
10119: PPUSH
10120: CALL_OW 74
10124: PPUSH
10125: CALL_OW 296
10129: PUSH
10130: LD_INT 8
10132: LESS
10133: IFFALSE 10088
// SetSide ( Gnyevko , 7 ) ;
10135: LD_EXP 47
10139: PPUSH
10140: LD_INT 7
10142: PPUSH
10143: CALL_OW 235
// end ;
10147: END
// every 10 10$00 + 1 1$30 trigger GetSide ( Burlak ) = 7 do
10148: LD_EXP 45
10152: PPUSH
10153: CALL_OW 255
10157: PUSH
10158: LD_INT 7
10160: EQUAL
10161: IFFALSE 10171
10163: GO 10165
10165: DISABLE
// begin enable ;
10166: ENABLE
// PrepareAmericanAttack ;
10167: CALL 6273 0 0
// end ;
10171: END
// every 0 0$2 trigger FilterAllUnits ( [ f_side , 1 ] ) do var i , tmp ;
10172: LD_INT 22
10174: PUSH
10175: LD_INT 1
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 69
10186: IFFALSE 10370
10188: GO 10190
10190: DISABLE
10191: LD_INT 0
10193: PPUSH
10194: PPUSH
// begin while true do
10195: LD_INT 1
10197: IFFALSE 10254
// begin wait ( 0 0$1 ) ;
10199: LD_INT 35
10201: PPUSH
10202: CALL_OW 67
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , JMM ) ;
10206: LD_ADDR_VAR 0 2
10210: PUSH
10211: LD_INT 22
10213: PUSH
10214: LD_INT 1
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PPUSH
10221: CALL_OW 69
10225: PPUSH
10226: LD_EXP 14
10230: PPUSH
10231: CALL_OW 74
10235: ST_TO_ADDR
// if See ( 7 , tmp ) then
10236: LD_INT 7
10238: PPUSH
10239: LD_VAR 0 2
10243: PPUSH
10244: CALL_OW 292
10248: IFFALSE 10252
// break ;
10250: GO 10254
// end ;
10252: GO 10195
// DialogueOn ;
10254: CALL_OW 6
// CenterNowOnUnits ( tmp ) ;
10258: LD_VAR 0 2
10262: PPUSH
10263: CALL_OW 87
// PlaceSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 , 8 ) ;
10267: LD_VAR 0 2
10271: PPUSH
10272: CALL_OW 250
10276: PPUSH
10277: LD_VAR 0 2
10281: PPUSH
10282: CALL_OW 251
10286: PPUSH
10287: LD_INT 7
10289: PPUSH
10290: LD_INT 8
10292: PPUSH
10293: CALL_OW 330
// if Denis then
10297: LD_EXP 20
10301: IFFALSE 10315
// Say ( Denis , DAmerAttack-Pet-1 ) ;
10303: LD_EXP 20
10307: PPUSH
10308: LD_STRING DAmerAttack-Pet-1
10310: PPUSH
10311: CALL_OW 88
// Say ( JMM , DAmerAttack-JMM-1 ) ;
10315: LD_EXP 14
10319: PPUSH
10320: LD_STRING DAmerAttack-JMM-1
10322: PPUSH
10323: CALL_OW 88
// Say ( Burlak , DStop-Bur-1 ) ;
10327: LD_EXP 45
10331: PPUSH
10332: LD_STRING DStop-Bur-1
10334: PPUSH
10335: CALL_OW 88
// RemoveSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 ) ;
10339: LD_VAR 0 2
10343: PPUSH
10344: CALL_OW 250
10348: PPUSH
10349: LD_VAR 0 2
10353: PPUSH
10354: CALL_OW 251
10358: PPUSH
10359: LD_INT 7
10361: PPUSH
10362: CALL_OW 331
// DialogueOff ;
10366: CALL_OW 7
// end ;
10370: PPOPN 2
10372: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
10373: LD_INT 22
10375: PUSH
10376: LD_INT 3
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 21
10385: PUSH
10386: LD_INT 1
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PPUSH
10397: CALL_OW 69
10401: PUSH
10402: LD_INT 0
10404: EQUAL
10405: IFFALSE 10447
10407: GO 10409
10409: DISABLE
// begin ChangeMissionObjectives ( M5a ) ;
10410: LD_STRING M5a
10412: PPUSH
10413: CALL_OW 337
// Say ( JMM , D8-JMM-1 ) ;
10417: LD_EXP 14
10421: PPUSH
10422: LD_STRING D8-JMM-1
10424: PPUSH
10425: CALL_OW 88
// if Gossudarov then
10429: LD_EXP 31
10433: IFFALSE 10447
// Say ( Gossudarov , D8-Gos-1 ) ;
10435: LD_EXP 31
10439: PPUSH
10440: LD_STRING D8-Gos-1
10442: PPUSH
10443: CALL_OW 88
// end ;
10447: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 do
10448: LD_INT 22
10450: PUSH
10451: LD_INT 2
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: LD_INT 21
10460: PUSH
10461: LD_INT 1
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PPUSH
10472: CALL_OW 69
10476: PUSH
10477: LD_INT 0
10479: EQUAL
10480: IFFALSE 10530
10482: GO 10484
10484: DISABLE
// begin ChangeMissionObjectives ( M4c ) ;
10485: LD_STRING M4c
10487: PPUSH
10488: CALL_OW 337
// if Roth then
10492: LD_EXP 15
10496: IFFALSE 10512
// Say ( Roth , DStop-Roth-1 ) else
10498: LD_EXP 15
10502: PPUSH
10503: LD_STRING DStop-Roth-1
10505: PPUSH
10506: CALL_OW 88
10510: GO 10530
// if Gossudarov then
10512: LD_EXP 31
10516: IFFALSE 10530
// Say ( Gossudarov , D8-Gos-1a ) ;
10518: LD_EXP 31
10522: PPUSH
10523: LD_STRING D8-Gos-1a
10525: PPUSH
10526: CALL_OW 88
// end ;
10530: END
// every 0 0$01 trigger GetTechNation ( 7 , 1 , state_enabled ) = 0 and GetTechNation ( 7 , 3 , state_enabled ) = 0 do
10531: LD_INT 7
10533: PPUSH
10534: LD_INT 1
10536: PPUSH
10537: LD_INT 1
10539: PPUSH
10540: CALL 13558 0 3
10544: PUSH
10545: LD_INT 0
10547: EQUAL
10548: PUSH
10549: LD_INT 7
10551: PPUSH
10552: LD_INT 3
10554: PPUSH
10555: LD_INT 1
10557: PPUSH
10558: CALL 13558 0 3
10562: PUSH
10563: LD_INT 0
10565: EQUAL
10566: AND
10567: IFFALSE 10579
10569: GO 10571
10571: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
10572: LD_STRING M1a
10574: PPUSH
10575: CALL_OW 337
// end ;
10579: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ f_side , 3 ] ) = 0 and FilterAllUnits ( [ f_side , 1 ] ) = 0 and GetTechNation ( 7 , 1 , state_enabled ) = 0 and GetTechNation ( 7 , 3 , state_enabled ) = 0 do var i , tmp , tmp2 ;
10580: LD_INT 22
10582: PUSH
10583: LD_INT 2
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PUSH
10590: LD_INT 21
10592: PUSH
10593: LD_INT 1
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PPUSH
10604: CALL_OW 69
10608: PUSH
10609: LD_INT 0
10611: EQUAL
10612: PUSH
10613: LD_INT 22
10615: PUSH
10616: LD_INT 3
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: PPUSH
10623: CALL_OW 69
10627: PUSH
10628: LD_INT 0
10630: EQUAL
10631: AND
10632: PUSH
10633: LD_INT 22
10635: PUSH
10636: LD_INT 1
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 69
10647: PUSH
10648: LD_INT 0
10650: EQUAL
10651: AND
10652: PUSH
10653: LD_INT 7
10655: PPUSH
10656: LD_INT 1
10658: PPUSH
10659: LD_INT 1
10661: PPUSH
10662: CALL 13558 0 3
10666: PUSH
10667: LD_INT 0
10669: EQUAL
10670: AND
10671: PUSH
10672: LD_INT 7
10674: PPUSH
10675: LD_INT 3
10677: PPUSH
10678: LD_INT 1
10680: PPUSH
10681: CALL 13558 0 3
10685: PUSH
10686: LD_INT 0
10688: EQUAL
10689: AND
10690: IFFALSE 12031
10692: GO 10694
10694: DISABLE
10695: LD_INT 0
10697: PPUSH
10698: PPUSH
10699: PPUSH
// begin wait ( 0 0$3 ) ;
10700: LD_INT 105
10702: PPUSH
10703: CALL_OW 67
// if not IsDead ( Masha ) then
10707: LD_EXP 48
10711: PPUSH
10712: CALL_OW 301
10716: NOT
10717: IFFALSE 10731
// AddMedal ( Masha , 1 ) else
10719: LD_STRING Masha
10721: PPUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL_OW 101
10729: GO 10742
// AddMedal ( Masha , - 1 ) ;
10731: LD_STRING Masha
10733: PPUSH
10734: LD_INT 1
10736: NEG
10737: PPUSH
10738: CALL_OW 101
// if abdul_escaped then
10742: LD_EXP 12
10746: IFFALSE 10761
// AddMedal ( Abdul , - 1 ) else
10748: LD_STRING Abdul
10750: PPUSH
10751: LD_INT 1
10753: NEG
10754: PPUSH
10755: CALL_OW 101
10759: GO 10771
// AddMedal ( Abdul , 1 ) ;
10761: LD_STRING Abdul
10763: PPUSH
10764: LD_INT 1
10766: PPUSH
10767: CALL_OW 101
// if loss_counter = 0 then
10771: LD_EXP 13
10775: PUSH
10776: LD_INT 0
10778: EQUAL
10779: IFFALSE 10793
// AddMedal ( People , 2 ) else
10781: LD_STRING People
10783: PPUSH
10784: LD_INT 2
10786: PPUSH
10787: CALL_OW 101
10791: GO 10843
// if loss_counter <= [ 3 , 2 , 2 ] [ Difficulty ] then
10793: LD_EXP 13
10797: PUSH
10798: LD_INT 3
10800: PUSH
10801: LD_INT 2
10803: PUSH
10804: LD_INT 2
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: LIST
10811: PUSH
10812: LD_OWVAR 67
10816: ARRAY
10817: LESSEQUAL
10818: IFFALSE 10832
// AddMedal ( People , 1 ) else
10820: LD_STRING People
10822: PPUSH
10823: LD_INT 1
10825: PPUSH
10826: CALL_OW 101
10830: GO 10843
// AddMedal ( People , - 1 ) ;
10832: LD_STRING People
10834: PPUSH
10835: LD_INT 1
10837: NEG
10838: PPUSH
10839: CALL_OW 101
// GiveMedals ( MAIN ) ;
10843: LD_STRING MAIN
10845: PPUSH
10846: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10850: LD_ADDR_VAR 0 2
10854: PUSH
10855: LD_INT 22
10857: PUSH
10858: LD_INT 7
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 2
10867: PUSH
10868: LD_INT 25
10870: PUSH
10871: LD_INT 1
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: LD_INT 25
10880: PUSH
10881: LD_INT 2
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 25
10890: PUSH
10891: LD_INT 3
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 25
10900: PUSH
10901: LD_INT 4
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: LD_INT 25
10910: PUSH
10911: LD_INT 5
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 25
10920: PUSH
10921: LD_INT 8
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 25
10930: PUSH
10931: LD_INT 9
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PPUSH
10952: CALL_OW 69
10956: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10957: LD_VAR 0 2
10961: PPUSH
10962: CALL_OW 43
// tmp2 := [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Burlak , Belkov , Gnyevko ] ;
10966: LD_ADDR_VAR 0 3
10970: PUSH
10971: LD_EXP 14
10975: PUSH
10976: LD_EXP 15
10980: PUSH
10981: LD_EXP 16
10985: PUSH
10986: LD_EXP 17
10990: PUSH
10991: LD_EXP 18
10995: PUSH
10996: LD_EXP 19
11000: PUSH
11001: LD_EXP 20
11005: PUSH
11006: LD_EXP 21
11010: PUSH
11011: LD_EXP 22
11015: PUSH
11016: LD_EXP 23
11020: PUSH
11021: LD_EXP 24
11025: PUSH
11026: LD_EXP 25
11030: PUSH
11031: LD_EXP 26
11035: PUSH
11036: LD_EXP 27
11040: PUSH
11041: LD_EXP 28
11045: PUSH
11046: LD_EXP 29
11050: PUSH
11051: LD_EXP 30
11055: PUSH
11056: LD_EXP 31
11060: PUSH
11061: LD_EXP 32
11065: PUSH
11066: LD_EXP 33
11070: PUSH
11071: LD_EXP 35
11075: PUSH
11076: LD_EXP 36
11080: PUSH
11081: LD_EXP 37
11085: PUSH
11086: LD_EXP 38
11090: PUSH
11091: LD_EXP 39
11095: PUSH
11096: LD_EXP 40
11100: PUSH
11101: LD_EXP 41
11105: PUSH
11106: LD_EXP 42
11110: PUSH
11111: LD_EXP 43
11115: PUSH
11116: LD_EXP 44
11120: PUSH
11121: LD_EXP 45
11125: PUSH
11126: LD_EXP 46
11130: PUSH
11131: LD_EXP 47
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: ST_TO_ADDR
// if tmp diff tmp2 then
11171: LD_VAR 0 2
11175: PUSH
11176: LD_VAR 0 3
11180: DIFF
11181: IFFALSE 11201
// SaveCharacters ( tmp diff tmp2 , 13a_others ) ;
11183: LD_VAR 0 2
11187: PUSH
11188: LD_VAR 0 3
11192: DIFF
11193: PPUSH
11194: LD_STRING 13a_others
11196: PPUSH
11197: CALL_OW 38
// SaveCharacters ( JMM , 13a_JMM ) ;
11201: LD_EXP 14
11205: PPUSH
11206: LD_STRING 13a_JMM
11208: PPUSH
11209: CALL_OW 38
// if Titov then
11213: LD_EXP 33
11217: IFFALSE 11231
// SaveCharacters ( Titov , 13a_Titov ) ;
11219: LD_EXP 33
11223: PPUSH
11224: LD_STRING 13a_Titov
11226: PPUSH
11227: CALL_OW 38
// if Dolgov then
11231: LD_EXP 35
11235: IFFALSE 11249
// SaveCharacters ( Dolgov , 13a_Dolgov ) ;
11237: LD_EXP 35
11241: PPUSH
11242: LD_STRING 13a_Dolgov
11244: PPUSH
11245: CALL_OW 38
// if Petrosyan then
11249: LD_EXP 36
11253: IFFALSE 11267
// SaveCharacters ( Petrosyan , 13a_Petrosyan ) ;
11255: LD_EXP 36
11259: PPUSH
11260: LD_STRING 13a_Petrosyan
11262: PPUSH
11263: CALL_OW 38
// if Scholtze then
11267: LD_EXP 37
11271: IFFALSE 11285
// SaveCharacters ( Scholtze , 13a_Scholtze ) ;
11273: LD_EXP 37
11277: PPUSH
11278: LD_STRING 13a_Scholtze
11280: PPUSH
11281: CALL_OW 38
// if Oblukov then
11285: LD_EXP 38
11289: IFFALSE 11303
// SaveCharacters ( Oblukov , 13a_Oblukov ) ;
11291: LD_EXP 38
11295: PPUSH
11296: LD_STRING 13a_Oblukov
11298: PPUSH
11299: CALL_OW 38
// if Kapitsova then
11303: LD_EXP 39
11307: IFFALSE 11321
// SaveCharacters ( Kapitsova , 13a_Kapitsova ) ;
11309: LD_EXP 39
11313: PPUSH
11314: LD_STRING 13a_Kapitsova
11316: PPUSH
11317: CALL_OW 38
// if Lipshchin then
11321: LD_EXP 40
11325: IFFALSE 11339
// SaveCharacters ( Lipshchin , 13a_Lipshchin ) ;
11327: LD_EXP 40
11331: PPUSH
11332: LD_STRING 13a_Lipshchin
11334: PPUSH
11335: CALL_OW 38
// if Petrovova then
11339: LD_EXP 41
11343: IFFALSE 11357
// SaveCharacters ( Petrovova , 13a_Petrovova ) ;
11345: LD_EXP 41
11349: PPUSH
11350: LD_STRING 13a_Petrovova
11352: PPUSH
11353: CALL_OW 38
// if Kovalyuk then
11357: LD_EXP 42
11361: IFFALSE 11375
// SaveCharacters ( Kovalyuk , 13a_Kovalyuk ) ;
11363: LD_EXP 42
11367: PPUSH
11368: LD_STRING 13a_Kovalyuk
11370: PPUSH
11371: CALL_OW 38
// if Kuzmov then
11375: LD_EXP 43
11379: IFFALSE 11393
// SaveCharacters ( Kuzmov , 13a_Kuzmov ) ;
11381: LD_EXP 43
11385: PPUSH
11386: LD_STRING 13a_Kuzmov
11388: PPUSH
11389: CALL_OW 38
// if Karamazov then
11393: LD_EXP 44
11397: IFFALSE 11411
// SaveCharacters ( Karamazov , 13a_Karamazov ) ;
11399: LD_EXP 44
11403: PPUSH
11404: LD_STRING 13a_Karamazov
11406: PPUSH
11407: CALL_OW 38
// if Burlak then
11411: LD_EXP 45
11415: IFFALSE 11429
// SaveCharacters ( Burlak , 13a_Burlak ) ;
11417: LD_EXP 45
11421: PPUSH
11422: LD_STRING 13a_Burlak
11424: PPUSH
11425: CALL_OW 38
// if Belkov then
11429: LD_EXP 46
11433: IFFALSE 11447
// SaveCharacters ( Belkov , 13a_Belkov ) ;
11435: LD_EXP 46
11439: PPUSH
11440: LD_STRING 13a_Belkov
11442: PPUSH
11443: CALL_OW 38
// if Gnyevko then
11447: LD_EXP 47
11451: IFFALSE 11465
// SaveCharacters ( Gnyevko , 13a_Gnyevko ) ;
11453: LD_EXP 47
11457: PPUSH
11458: LD_STRING 13a_Gnyevko
11460: PPUSH
11461: CALL_OW 38
// if Lisa then
11465: LD_EXP 16
11469: IFFALSE 11483
// SaveCharacters ( Lisa , 13a_Lisa ) ;
11471: LD_EXP 16
11475: PPUSH
11476: LD_STRING 13a_Lisa
11478: PPUSH
11479: CALL_OW 38
// if Donaldson then
11483: LD_EXP 17
11487: IFFALSE 11501
// SaveCharacters ( Donaldson , 13a_Donaldson ) ;
11489: LD_EXP 17
11493: PPUSH
11494: LD_STRING 13a_Donaldson
11496: PPUSH
11497: CALL_OW 38
// if Bobby then
11501: LD_EXP 18
11505: IFFALSE 11519
// SaveCharacters ( Bobby , 13a_Bobby ) ;
11507: LD_EXP 18
11511: PPUSH
11512: LD_STRING 13a_Bobby
11514: PPUSH
11515: CALL_OW 38
// if Cyrus then
11519: LD_EXP 19
11523: IFFALSE 11537
// SaveCharacters ( Cyrus , 13a_Cyrus ) ;
11525: LD_EXP 19
11529: PPUSH
11530: LD_STRING 13a_Cyrus
11532: PPUSH
11533: CALL_OW 38
// if Denis then
11537: LD_EXP 20
11541: IFFALSE 11555
// SaveCharacters ( Denis , 13a_Denis ) ;
11543: LD_EXP 20
11547: PPUSH
11548: LD_STRING 13a_Denis
11550: PPUSH
11551: CALL_OW 38
// if Brown then
11555: LD_EXP 21
11559: IFFALSE 11573
// SaveCharacters ( Brown , 13a_Brown ) ;
11561: LD_EXP 21
11565: PPUSH
11566: LD_STRING 13a_Brown
11568: PPUSH
11569: CALL_OW 38
// if Gladstone then
11573: LD_EXP 22
11577: IFFALSE 11591
// SaveCharacters ( Gladstone , 13a_Gladstone ) ;
11579: LD_EXP 22
11583: PPUSH
11584: LD_STRING 13a_Gladstone
11586: PPUSH
11587: CALL_OW 38
// if Houten then
11591: LD_EXP 23
11595: IFFALSE 11609
// SaveCharacters ( Houten , 13a_Houten ) ;
11597: LD_EXP 23
11601: PPUSH
11602: LD_STRING 13a_Houten
11604: PPUSH
11605: CALL_OW 38
// if Cornel then
11609: LD_EXP 24
11613: IFFALSE 11627
// SaveCharacters ( Cornel , 13a_Cornel ) ;
11615: LD_EXP 24
11619: PPUSH
11620: LD_STRING 13a_Cornel
11622: PPUSH
11623: CALL_OW 38
// if Gary then
11627: LD_EXP 25
11631: IFFALSE 11645
// SaveCharacters ( Gary , 13a_Gary ) ;
11633: LD_EXP 25
11637: PPUSH
11638: LD_STRING 13a_Gary
11640: PPUSH
11641: CALL_OW 38
// if Frank then
11645: LD_EXP 26
11649: IFFALSE 11663
// SaveCharacters ( Frank , 13a_Frank ) ;
11651: LD_EXP 26
11655: PPUSH
11656: LD_STRING 13a_Frank
11658: PPUSH
11659: CALL_OW 38
// if Kikuchi then
11663: LD_EXP 27
11667: IFFALSE 11681
// SaveCharacters ( Kikuchi , 13a_Kikuchi ) ;
11669: LD_EXP 27
11673: PPUSH
11674: LD_STRING 13a_Kikuchi
11676: PPUSH
11677: CALL_OW 38
// if Simms then
11681: LD_EXP 28
11685: IFFALSE 11699
// SaveCharacters ( Simms , 13a_Simms ) ;
11687: LD_EXP 28
11691: PPUSH
11692: LD_STRING 13a_Simms
11694: PPUSH
11695: CALL_OW 38
// if Joan then
11699: LD_EXP 29
11703: IFFALSE 11717
// SaveCharacters ( Joan , 13a_Joan ) ;
11705: LD_EXP 29
11709: PPUSH
11710: LD_STRING 13a_Joan
11712: PPUSH
11713: CALL_OW 38
// if DeltaDoctor then
11717: LD_EXP 30
11721: IFFALSE 11735
// SaveCharacters ( DeltaDoctor , 13a_DeltaDoctor ) ;
11723: LD_EXP 30
11727: PPUSH
11728: LD_STRING 13a_DeltaDoctor
11730: PPUSH
11731: CALL_OW 38
// if Gossudarov then
11735: LD_EXP 31
11739: IFFALSE 11753
// SaveCharacters ( Gossudarov , 13a_Gossudarov ) ;
11741: LD_EXP 31
11745: PPUSH
11746: LD_STRING 13a_Gossudarov
11748: PPUSH
11749: CALL_OW 38
// if Kirilenkova then
11753: LD_EXP 32
11757: IFFALSE 11771
// SaveCharacters ( Kirilenkova , 13a_Kirilenkova ) ;
11759: LD_EXP 32
11763: PPUSH
11764: LD_STRING 13a_Kirilenkova
11766: PPUSH
11767: CALL_OW 38
// if Masha then
11771: LD_EXP 48
11775: IFFALSE 11830
// SaveVariable ( [ GetChassis ( Masha ) , GetEngine ( Masha ) , GetControl ( Masha ) , GetWeapon ( Masha ) ] , 13a_Masha ) ;
11777: LD_EXP 48
11781: PPUSH
11782: CALL_OW 265
11786: PUSH
11787: LD_EXP 48
11791: PPUSH
11792: CALL_OW 262
11796: PUSH
11797: LD_EXP 48
11801: PPUSH
11802: CALL_OW 263
11806: PUSH
11807: LD_EXP 48
11811: PPUSH
11812: CALL_OW 264
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: PPUSH
11823: LD_STRING 13a_Masha
11825: PPUSH
11826: CALL_OW 39
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
11830: LD_ADDR_VAR 0 2
11834: PUSH
11835: LD_INT 21
11837: PUSH
11838: LD_INT 3
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PPUSH
11845: CALL_OW 69
11849: ST_TO_ADDR
// tmp2 := [ ] ;
11850: LD_ADDR_VAR 0 3
11854: PUSH
11855: EMPTY
11856: ST_TO_ADDR
// if tmp then
11857: LD_VAR 0 2
11861: IFFALSE 12009
// for i in tmp do
11863: LD_ADDR_VAR 0 1
11867: PUSH
11868: LD_VAR 0 2
11872: PUSH
11873: FOR_IN
11874: IFFALSE 12007
// if IsOk ( i ) then
11876: LD_VAR 0 1
11880: PPUSH
11881: CALL_OW 302
11885: IFFALSE 12005
// tmp2 := tmp2 ^ [ GetSide ( i ) , GetNation ( i ) , GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ;
11887: LD_ADDR_VAR 0 3
11891: PUSH
11892: LD_VAR 0 3
11896: PUSH
11897: LD_VAR 0 1
11901: PPUSH
11902: CALL_OW 255
11906: PUSH
11907: LD_VAR 0 1
11911: PPUSH
11912: CALL_OW 248
11916: PUSH
11917: LD_VAR 0 1
11921: PPUSH
11922: CALL_OW 266
11926: PUSH
11927: LD_VAR 0 1
11931: PPUSH
11932: CALL_OW 250
11936: PUSH
11937: LD_VAR 0 1
11941: PPUSH
11942: CALL_OW 251
11946: PUSH
11947: LD_VAR 0 1
11951: PPUSH
11952: CALL_OW 254
11956: PUSH
11957: LD_VAR 0 1
11961: PPUSH
11962: CALL_OW 267
11966: PUSH
11967: LD_VAR 0 1
11971: PPUSH
11972: LD_INT 1
11974: PPUSH
11975: CALL_OW 268
11979: PUSH
11980: LD_VAR 0 1
11984: PPUSH
11985: LD_INT 2
11987: PPUSH
11988: CALL_OW 268
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: ADD
12004: ST_TO_ADDR
12005: GO 11873
12007: POP
12008: POP
// if tmp2 then
12009: LD_VAR 0 3
12013: IFFALSE 12027
// SaveVariable ( tmp2 , 13a_buildings ) ;
12015: LD_VAR 0 3
12019: PPUSH
12020: LD_STRING 13a_buildings
12022: PPUSH
12023: CALL_OW 39
// YouWin ;
12027: CALL_OW 103
// end ;
12031: PPOPN 3
12033: END
// export function SciRu ; var tmp , t ; begin
12034: LD_INT 0
12036: PPUSH
12037: PPUSH
12038: PPUSH
// t := [ Gossudarov , Burlak , Titov , Belkov , Gnyevko ] ;
12039: LD_ADDR_VAR 0 3
12043: PUSH
12044: LD_EXP 31
12048: PUSH
12049: LD_EXP 45
12053: PUSH
12054: LD_EXP 33
12058: PUSH
12059: LD_EXP 46
12063: PUSH
12064: LD_EXP 47
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff t ;
12076: LD_ADDR_VAR 0 2
12080: PUSH
12081: LD_INT 22
12083: PUSH
12084: LD_INT 7
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: LD_INT 23
12093: PUSH
12094: LD_INT 3
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 25
12103: PUSH
12104: LD_INT 4
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 26
12113: PUSH
12114: LD_INT 1
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: PPUSH
12127: CALL_OW 69
12131: PUSH
12132: LD_VAR 0 3
12136: DIFF
12137: ST_TO_ADDR
// if tmp then
12138: LD_VAR 0 2
12142: IFFALSE 12158
// result := tmp [ 1 ] ;
12144: LD_ADDR_VAR 0 1
12148: PUSH
12149: LD_VAR 0 2
12153: PUSH
12154: LD_INT 1
12156: ARRAY
12157: ST_TO_ADDR
// end ;
12158: LD_VAR 0 1
12162: RET
// export function SolRu ; var tmp , t ; begin
12163: LD_INT 0
12165: PPUSH
12166: PPUSH
12167: PPUSH
// t := [ Belkov , Burlak , Gossudarov ] ;
12168: LD_ADDR_VAR 0 3
12172: PUSH
12173: LD_EXP 46
12177: PUSH
12178: LD_EXP 45
12182: PUSH
12183: LD_EXP 31
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 1 ] , [ f_sex , sex_male ] ] ) diff t ;
12193: LD_ADDR_VAR 0 2
12197: PUSH
12198: LD_INT 22
12200: PUSH
12201: LD_INT 7
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 23
12210: PUSH
12211: LD_INT 3
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 25
12220: PUSH
12221: LD_INT 1
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 26
12230: PUSH
12231: LD_INT 1
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: PPUSH
12244: CALL_OW 69
12248: PUSH
12249: LD_VAR 0 3
12253: DIFF
12254: ST_TO_ADDR
// if tmp then
12255: LD_VAR 0 2
12259: IFFALSE 12275
// result := tmp [ 1 ] ;
12261: LD_ADDR_VAR 0 1
12265: PUSH
12266: LD_VAR 0 2
12270: PUSH
12271: LD_INT 1
12273: ARRAY
12274: ST_TO_ADDR
// end ; end_of_file
12275: LD_VAR 0 1
12279: RET
// on UnitDestroyed ( un ) do var i , side ;
12280: LD_INT 0
12282: PPUSH
12283: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) then
12284: LD_VAR 0 1
12288: PUSH
12289: LD_INT 22
12291: PUSH
12292: LD_INT 7
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: LD_INT 2
12301: PUSH
12302: LD_INT 25
12304: PUSH
12305: LD_INT 1
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 25
12314: PUSH
12315: LD_INT 2
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 25
12324: PUSH
12325: LD_INT 3
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 25
12334: PUSH
12335: LD_INT 4
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 25
12344: PUSH
12345: LD_INT 5
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 25
12354: PUSH
12355: LD_INT 8
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: LD_INT 25
12364: PUSH
12365: LD_INT 9
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PPUSH
12386: CALL_OW 69
12390: IN
12391: IFFALSE 12407
// loss_counter := loss_counter + 1 ;
12393: LD_ADDR_EXP 13
12397: PUSH
12398: LD_EXP 13
12402: PUSH
12403: LD_INT 1
12405: PLUS
12406: ST_TO_ADDR
// if un = Abdul then
12407: LD_VAR 0 1
12411: PUSH
12412: LD_EXP 54
12416: EQUAL
12417: IFFALSE 12427
// abdul_escaped := false ;
12419: LD_ADDR_EXP 12
12423: PUSH
12424: LD_INT 0
12426: ST_TO_ADDR
// if un in ru_attackers then
12427: LD_VAR 0 1
12431: PUSH
12432: LD_EXP 51
12436: IN
12437: IFFALSE 12455
// ru_attackers := ru_attackers diff un ;
12439: LD_ADDR_EXP 51
12443: PUSH
12444: LD_EXP 51
12448: PUSH
12449: LD_VAR 0 1
12453: DIFF
12454: ST_TO_ADDR
// if un in ar_attackers then
12455: LD_VAR 0 1
12459: PUSH
12460: LD_EXP 10
12464: IN
12465: IFFALSE 12483
// ar_attackers := ar_attackers diff un ;
12467: LD_ADDR_EXP 10
12471: PUSH
12472: LD_EXP 10
12476: PUSH
12477: LD_VAR 0 1
12481: DIFF
12482: ST_TO_ADDR
// if un = JMM then
12483: LD_VAR 0 1
12487: PUSH
12488: LD_EXP 14
12492: EQUAL
12493: IFFALSE 12504
// begin YouLost ( JMM ) ;
12495: LD_STRING JMM
12497: PPUSH
12498: CALL_OW 104
// exit ;
12502: GO 12593
// end ; if un = Burlak then
12504: LD_VAR 0 1
12508: PUSH
12509: LD_EXP 45
12513: EQUAL
12514: IFFALSE 12525
// begin YouLost ( Burlak ) ;
12516: LD_STRING Burlak
12518: PPUSH
12519: CALL_OW 104
// exit ;
12523: GO 12593
// end ; if un = freedom then
12525: LD_VAR 0 1
12529: PUSH
12530: LD_EXP 3
12534: EQUAL
12535: IFFALSE 12546
// begin YouLost ( Destroyed ) ;
12537: LD_STRING Destroyed
12539: PPUSH
12540: CALL_OW 104
// exit ;
12544: GO 12593
// end ; if un = Masha then
12546: LD_VAR 0 1
12550: PUSH
12551: LD_EXP 48
12555: EQUAL
12556: IFFALSE 12565
// ChangeMissionObjectives ( M4b ) ;
12558: LD_STRING M4b
12560: PPUSH
12561: CALL_OW 337
// if un = Mastodont then
12565: LD_VAR 0 1
12569: PUSH
12570: LD_EXP 55
12574: EQUAL
12575: IFFALSE 12584
// ChangeMissionObjectives ( M4a ) ;
12577: LD_STRING M4a
12579: PPUSH
12580: CALL_OW 337
// MCE_UnitDestroyed ( un ) ;
12584: LD_VAR 0 1
12588: PPUSH
12589: CALL 71066 0 1
// end ;
12593: PPOPN 3
12595: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
12596: LD_VAR 0 1
12600: PPUSH
12601: LD_VAR 0 2
12605: PPUSH
12606: CALL 72933 0 2
// end ;
12610: PPOPN 2
12612: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
12613: LD_VAR 0 1
12617: PPUSH
12618: CALL 72015 0 1
// end ;
12622: PPOPN 1
12624: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_depot ] ] ) then
12625: LD_VAR 0 1
12629: PUSH
12630: LD_INT 22
12632: PUSH
12633: LD_INT 7
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 30
12642: PUSH
12643: LD_INT 0
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PPUSH
12654: CALL_OW 69
12658: IN
12659: IFFALSE 12698
// begin SetBName ( building , freedom ) ;
12661: LD_VAR 0 1
12665: PPUSH
12666: LD_STRING freedom
12668: PPUSH
12669: CALL_OW 500
// SetRestrict ( b_depot , 7 , false ) ;
12673: LD_INT 0
12675: PPUSH
12676: LD_INT 7
12678: PPUSH
12679: LD_INT 0
12681: PPUSH
12682: CALL_OW 324
// freedom := building ;
12686: LD_ADDR_EXP 3
12690: PUSH
12691: LD_VAR 0 1
12695: ST_TO_ADDR
// exit ;
12696: GO 12764
// end ; if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_btype , b_lab ] ] ) then
12698: LD_VAR 0 1
12702: PUSH
12703: LD_INT 22
12705: PUSH
12706: LD_INT 7
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PUSH
12713: LD_INT 23
12715: PUSH
12716: LD_INT 3
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PUSH
12723: LD_INT 30
12725: PUSH
12726: LD_INT 6
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: PPUSH
12738: CALL_OW 69
12742: IN
12743: IFFALSE 12755
// begin ru_lab_builded := true ;
12745: LD_ADDR_EXP 5
12749: PUSH
12750: LD_INT 1
12752: ST_TO_ADDR
// exit ;
12753: GO 12764
// end ; MCE_BuildingComplete ( building ) ;
12755: LD_VAR 0 1
12759: PPUSH
12760: CALL 72249 0 1
// end ;
12764: PPOPN 1
12766: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
12767: LD_VAR 0 1
12771: PPUSH
12772: LD_VAR 0 2
12776: PPUSH
12777: CALL 70778 0 2
// end ;
12781: PPOPN 2
12783: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
12784: LD_VAR 0 1
12788: PPUSH
12789: LD_VAR 0 2
12793: PPUSH
12794: LD_VAR 0 3
12798: PPUSH
12799: LD_VAR 0 4
12803: PPUSH
12804: LD_VAR 0 5
12808: PPUSH
12809: CALL 70405 0 5
// end ;
12813: PPOPN 5
12815: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
12816: LD_VAR 0 1
12820: PPUSH
12821: LD_VAR 0 2
12825: PPUSH
12826: CALL 70093 0 2
// end ;
12830: PPOPN 2
12832: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
12833: LD_VAR 0 1
12837: PPUSH
12838: LD_VAR 0 2
12842: PPUSH
12843: LD_VAR 0 3
12847: PPUSH
12848: LD_VAR 0 4
12852: PPUSH
12853: CALL 69938 0 4
// end ;
12857: PPOPN 4
12859: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
12860: LD_VAR 0 1
12864: PPUSH
12865: LD_VAR 0 2
12869: PPUSH
12870: LD_VAR 0 3
12874: PPUSH
12875: CALL 69720 0 3
// end ;
12879: PPOPN 3
12881: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
12882: LD_VAR 0 1
12886: PPUSH
12887: LD_VAR 0 2
12891: PPUSH
12892: CALL 69612 0 2
// end ;
12896: PPOPN 2
12898: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
12899: LD_VAR 0 1
12903: PPUSH
12904: LD_VAR 0 2
12908: PPUSH
12909: CALL 73187 0 2
// end ;
12913: PPOPN 2
12915: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
12916: LD_VAR 0 1
12920: PPUSH
12921: LD_VAR 0 2
12925: PPUSH
12926: LD_VAR 0 3
12930: PPUSH
12931: LD_VAR 0 4
12935: PPUSH
12936: CALL 73396 0 4
// end ;
12940: PPOPN 4
12942: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
12943: LD_VAR 0 1
12947: PPUSH
12948: LD_VAR 0 2
12952: PPUSH
12953: CALL 69428 0 2
// end ; end_of_file
12957: PPOPN 2
12959: END
// every 0 0$30 do var cr , time ;
12960: GO 12962
12962: DISABLE
12963: LD_INT 0
12965: PPUSH
12966: PPUSH
// begin time := 0 0$10 ;
12967: LD_ADDR_VAR 0 2
12971: PUSH
12972: LD_INT 350
12974: ST_TO_ADDR
// while game do
12975: LD_EXP 2
12979: IFFALSE 13078
// begin wait ( time ) ;
12981: LD_VAR 0 2
12985: PPUSH
12986: CALL_OW 67
// if tick > 2 2$00 then
12990: LD_OWVAR 1
12994: PUSH
12995: LD_INT 4200
12997: GREATER
12998: IFFALSE 13031
// time := time + [ 0 0$06 , 0 0$07 , 0 0$08 ] [ Difficulty ] ;
13000: LD_ADDR_VAR 0 2
13004: PUSH
13005: LD_VAR 0 2
13009: PUSH
13010: LD_INT 210
13012: PUSH
13013: LD_INT 245
13015: PUSH
13016: LD_INT 280
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: LIST
13023: PUSH
13024: LD_OWVAR 67
13028: ARRAY
13029: PLUS
13030: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 70 , 49 , 25 , true ) ;
13031: LD_INT 1
13033: PPUSH
13034: LD_INT 5
13036: PPUSH
13037: CALL_OW 12
13041: PPUSH
13042: LD_INT 70
13044: PPUSH
13045: LD_INT 49
13047: PPUSH
13048: LD_INT 25
13050: PPUSH
13051: LD_INT 1
13053: PPUSH
13054: CALL_OW 56
// if time > 5 5$00 then
13058: LD_VAR 0 2
13062: PUSH
13063: LD_INT 10500
13065: GREATER
13066: IFFALSE 13076
// time := 0 0$30 ;
13068: LD_ADDR_VAR 0 2
13072: PUSH
13073: LD_INT 1050
13075: ST_TO_ADDR
// end ;
13076: GO 12975
// end ;
13078: PPOPN 2
13080: END
// every 0 0$30 do var cr , time ;
13081: GO 13083
13083: DISABLE
13084: LD_INT 0
13086: PPUSH
13087: PPUSH
// begin time := 0 0$01 ;
13088: LD_ADDR_VAR 0 2
13092: PUSH
13093: LD_INT 35
13095: ST_TO_ADDR
// while game do
13096: LD_EXP 2
13100: IFFALSE 13189
// begin wait ( time ) ;
13102: LD_VAR 0 2
13106: PPUSH
13107: CALL_OW 67
// time := time + [ 0 0$04 , 0 0$05 , 0 0$06 ] [ Difficulty ] ;
13111: LD_ADDR_VAR 0 2
13115: PUSH
13116: LD_VAR 0 2
13120: PUSH
13121: LD_INT 140
13123: PUSH
13124: LD_INT 175
13126: PUSH
13127: LD_INT 210
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: LIST
13134: PUSH
13135: LD_OWVAR 67
13139: ARRAY
13140: PLUS
13141: ST_TO_ADDR
// CreateCratesXYR ( rand ( 3 , 5 ) , 26 , 9 , 30 , true ) ;
13142: LD_INT 3
13144: PPUSH
13145: LD_INT 5
13147: PPUSH
13148: CALL_OW 12
13152: PPUSH
13153: LD_INT 26
13155: PPUSH
13156: LD_INT 9
13158: PPUSH
13159: LD_INT 30
13161: PPUSH
13162: LD_INT 1
13164: PPUSH
13165: CALL_OW 56
// if time > 3 3$00 then
13169: LD_VAR 0 2
13173: PUSH
13174: LD_INT 6300
13176: GREATER
13177: IFFALSE 13187
// time := 0 0$20 ;
13179: LD_ADDR_VAR 0 2
13183: PUSH
13184: LD_INT 700
13186: ST_TO_ADDR
// end ;
13187: GO 13096
// end ;
13189: PPOPN 2
13191: END
// every 0 0$30 do var cr , time ;
13192: GO 13194
13194: DISABLE
13195: LD_INT 0
13197: PPUSH
13198: PPUSH
// begin time := 0 0$20 ;
13199: LD_ADDR_VAR 0 2
13203: PUSH
13204: LD_INT 700
13206: ST_TO_ADDR
// while game do
13207: LD_EXP 2
13211: IFFALSE 13336
// begin wait ( time ) ;
13213: LD_VAR 0 2
13217: PPUSH
13218: CALL_OW 67
// time := time + [ 0 0$05 , 0 0$06 , 0 0$08 ] [ Difficulty ] ;
13222: LD_ADDR_VAR 0 2
13226: PUSH
13227: LD_VAR 0 2
13231: PUSH
13232: LD_INT 175
13234: PUSH
13235: LD_INT 210
13237: PUSH
13238: LD_INT 280
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: LIST
13245: PUSH
13246: LD_OWVAR 67
13250: ARRAY
13251: PLUS
13252: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 179 , 101 , 20 , true ) ;
13253: LD_INT 1
13255: PPUSH
13256: LD_INT 5
13258: PPUSH
13259: CALL_OW 12
13263: PPUSH
13264: LD_INT 179
13266: PPUSH
13267: LD_INT 101
13269: PPUSH
13270: LD_INT 20
13272: PPUSH
13273: LD_INT 1
13275: PPUSH
13276: CALL_OW 56
// wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
13280: LD_INT 350
13282: PPUSH
13283: LD_INT 525
13285: PPUSH
13286: CALL_OW 12
13290: PPUSH
13291: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area_collect_arabian , true ) ;
13295: LD_INT 1
13297: PPUSH
13298: LD_INT 5
13300: PPUSH
13301: CALL_OW 12
13305: PPUSH
13306: LD_INT 9
13308: PPUSH
13309: LD_INT 1
13311: PPUSH
13312: CALL_OW 55
// if time > 4 4$00 then
13316: LD_VAR 0 2
13320: PUSH
13321: LD_INT 8400
13323: GREATER
13324: IFFALSE 13334
// time := 0 0$30 ;
13326: LD_ADDR_VAR 0 2
13330: PUSH
13331: LD_INT 1050
13333: ST_TO_ADDR
// end ;
13334: GO 13207
// end ;
13336: PPOPN 2
13338: END
// every 0 0$30 do var cr , time ;
13339: GO 13341
13341: DISABLE
13342: LD_INT 0
13344: PPUSH
13345: PPUSH
// begin time := 0 0$10 ;
13346: LD_ADDR_VAR 0 2
13350: PUSH
13351: LD_INT 350
13353: ST_TO_ADDR
// while game do
13354: LD_EXP 2
13358: IFFALSE 13492
// begin wait ( time ) ;
13360: LD_VAR 0 2
13364: PPUSH
13365: CALL_OW 67
// time := time + 0 0$10 ;
13369: LD_ADDR_VAR 0 2
13373: PUSH
13374: LD_VAR 0 2
13378: PUSH
13379: LD_INT 350
13381: PLUS
13382: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , area_crates_russian , true ) ;
13383: LD_INT 1
13385: PPUSH
13386: LD_INT 5
13388: PPUSH
13389: CALL_OW 12
13393: PPUSH
13394: LD_INT 11
13396: PPUSH
13397: LD_INT 1
13399: PPUSH
13400: CALL_OW 55
// cr := rand ( 1 , 3 ) ;
13404: LD_ADDR_VAR 0 1
13408: PUSH
13409: LD_INT 1
13411: PPUSH
13412: LD_INT 3
13414: PPUSH
13415: CALL_OW 12
13419: ST_TO_ADDR
// if cr = 1 then
13420: LD_VAR 0 1
13424: PUSH
13425: LD_INT 1
13427: EQUAL
13428: IFFALSE 13472
// begin wait ( rand ( 0 0$20 , 0 0$45 ) ) ;
13430: LD_INT 700
13432: PPUSH
13433: LD_INT 1575
13435: PPUSH
13436: CALL_OW 12
13440: PPUSH
13441: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 34 , 50 , 7 , true ) ;
13445: LD_INT 1
13447: PPUSH
13448: LD_INT 5
13450: PPUSH
13451: CALL_OW 12
13455: PPUSH
13456: LD_INT 34
13458: PPUSH
13459: LD_INT 50
13461: PPUSH
13462: LD_INT 7
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 56
// end ; if time > 8 8$00 then
13472: LD_VAR 0 2
13476: PUSH
13477: LD_INT 16800
13479: GREATER
13480: IFFALSE 13490
// time := 0 0$40 ;
13482: LD_ADDR_VAR 0 2
13486: PUSH
13487: LD_INT 1400
13489: ST_TO_ADDR
// end ;
13490: GO 13354
// end ; end_of_file
13492: PPOPN 2
13494: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13495: LD_INT 0
13497: PPUSH
13498: PPUSH
// if exist_mode then
13499: LD_VAR 0 2
13503: IFFALSE 13528
// unit := CreateCharacter ( prefix & ident ) else
13505: LD_ADDR_VAR 0 5
13509: PUSH
13510: LD_VAR 0 3
13514: PUSH
13515: LD_VAR 0 1
13519: STR
13520: PPUSH
13521: CALL_OW 34
13525: ST_TO_ADDR
13526: GO 13543
// unit := NewCharacter ( ident ) ;
13528: LD_ADDR_VAR 0 5
13532: PUSH
13533: LD_VAR 0 1
13537: PPUSH
13538: CALL_OW 25
13542: ST_TO_ADDR
// result := unit ;
13543: LD_ADDR_VAR 0 4
13547: PUSH
13548: LD_VAR 0 5
13552: ST_TO_ADDR
// end ;
13553: LD_VAR 0 4
13557: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13558: LD_INT 0
13560: PPUSH
13561: PPUSH
// if not side or not nation then
13562: LD_VAR 0 1
13566: NOT
13567: PUSH
13568: LD_VAR 0 2
13572: NOT
13573: OR
13574: IFFALSE 13578
// exit ;
13576: GO 14198
// case nation of nation_american :
13578: LD_VAR 0 2
13582: PUSH
13583: LD_INT 1
13585: DOUBLE
13586: EQUAL
13587: IFTRUE 13591
13589: GO 13757
13591: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
13592: LD_ADDR_VAR 0 4
13596: PUSH
13597: LD_INT 35
13599: PUSH
13600: LD_INT 45
13602: PUSH
13603: LD_INT 46
13605: PUSH
13606: LD_INT 47
13608: PUSH
13609: LD_INT 1
13611: PUSH
13612: LD_INT 2
13614: PUSH
13615: LD_INT 6
13617: PUSH
13618: LD_INT 15
13620: PUSH
13621: LD_INT 16
13623: PUSH
13624: LD_INT 7
13626: PUSH
13627: LD_INT 12
13629: PUSH
13630: LD_INT 13
13632: PUSH
13633: LD_INT 10
13635: PUSH
13636: LD_INT 14
13638: PUSH
13639: LD_INT 20
13641: PUSH
13642: LD_INT 25
13644: PUSH
13645: LD_INT 32
13647: PUSH
13648: LD_INT 27
13650: PUSH
13651: LD_INT 36
13653: PUSH
13654: LD_INT 69
13656: PUSH
13657: LD_INT 39
13659: PUSH
13660: LD_INT 34
13662: PUSH
13663: LD_INT 40
13665: PUSH
13666: LD_INT 48
13668: PUSH
13669: LD_INT 49
13671: PUSH
13672: LD_INT 50
13674: PUSH
13675: LD_INT 51
13677: PUSH
13678: LD_INT 52
13680: PUSH
13681: LD_INT 53
13683: PUSH
13684: LD_INT 54
13686: PUSH
13687: LD_INT 55
13689: PUSH
13690: LD_INT 56
13692: PUSH
13693: LD_INT 57
13695: PUSH
13696: LD_INT 58
13698: PUSH
13699: LD_INT 59
13701: PUSH
13702: LD_INT 60
13704: PUSH
13705: LD_INT 61
13707: PUSH
13708: LD_INT 62
13710: PUSH
13711: LD_INT 80
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: ST_TO_ADDR
13755: GO 14122
13757: LD_INT 2
13759: DOUBLE
13760: EQUAL
13761: IFTRUE 13765
13763: GO 13935
13765: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
13766: LD_ADDR_VAR 0 4
13770: PUSH
13771: LD_INT 35
13773: PUSH
13774: LD_INT 45
13776: PUSH
13777: LD_INT 46
13779: PUSH
13780: LD_INT 47
13782: PUSH
13783: LD_INT 70
13785: PUSH
13786: LD_INT 1
13788: PUSH
13789: LD_INT 11
13791: PUSH
13792: LD_INT 3
13794: PUSH
13795: LD_INT 4
13797: PUSH
13798: LD_INT 5
13800: PUSH
13801: LD_INT 6
13803: PUSH
13804: LD_INT 15
13806: PUSH
13807: LD_INT 18
13809: PUSH
13810: LD_INT 7
13812: PUSH
13813: LD_INT 17
13815: PUSH
13816: LD_INT 8
13818: PUSH
13819: LD_INT 20
13821: PUSH
13822: LD_INT 72
13824: PUSH
13825: LD_INT 26
13827: PUSH
13828: LD_INT 69
13830: PUSH
13831: LD_INT 39
13833: PUSH
13834: LD_INT 40
13836: PUSH
13837: LD_INT 41
13839: PUSH
13840: LD_INT 42
13842: PUSH
13843: LD_INT 43
13845: PUSH
13846: LD_INT 48
13848: PUSH
13849: LD_INT 49
13851: PUSH
13852: LD_INT 50
13854: PUSH
13855: LD_INT 51
13857: PUSH
13858: LD_INT 52
13860: PUSH
13861: LD_INT 53
13863: PUSH
13864: LD_INT 54
13866: PUSH
13867: LD_INT 55
13869: PUSH
13870: LD_INT 56
13872: PUSH
13873: LD_INT 60
13875: PUSH
13876: LD_INT 61
13878: PUSH
13879: LD_INT 62
13881: PUSH
13882: LD_INT 66
13884: PUSH
13885: LD_INT 67
13887: PUSH
13888: LD_INT 68
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: ST_TO_ADDR
13933: GO 14122
13935: LD_INT 3
13937: DOUBLE
13938: EQUAL
13939: IFTRUE 13943
13941: GO 14121
13943: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
13944: LD_ADDR_VAR 0 4
13948: PUSH
13949: LD_INT 46
13951: PUSH
13952: LD_INT 47
13954: PUSH
13955: LD_INT 1
13957: PUSH
13958: LD_INT 2
13960: PUSH
13961: LD_INT 11
13963: PUSH
13964: LD_INT 9
13966: PUSH
13967: LD_INT 20
13969: PUSH
13970: LD_INT 19
13972: PUSH
13973: LD_INT 21
13975: PUSH
13976: LD_INT 24
13978: PUSH
13979: LD_INT 22
13981: PUSH
13982: LD_INT 25
13984: PUSH
13985: LD_INT 28
13987: PUSH
13988: LD_INT 29
13990: PUSH
13991: LD_INT 31
13993: PUSH
13994: LD_INT 37
13996: PUSH
13997: LD_INT 38
13999: PUSH
14000: LD_INT 32
14002: PUSH
14003: LD_INT 27
14005: PUSH
14006: LD_INT 33
14008: PUSH
14009: LD_INT 69
14011: PUSH
14012: LD_INT 39
14014: PUSH
14015: LD_INT 34
14017: PUSH
14018: LD_INT 40
14020: PUSH
14021: LD_INT 71
14023: PUSH
14024: LD_INT 23
14026: PUSH
14027: LD_INT 44
14029: PUSH
14030: LD_INT 48
14032: PUSH
14033: LD_INT 49
14035: PUSH
14036: LD_INT 50
14038: PUSH
14039: LD_INT 51
14041: PUSH
14042: LD_INT 52
14044: PUSH
14045: LD_INT 53
14047: PUSH
14048: LD_INT 54
14050: PUSH
14051: LD_INT 55
14053: PUSH
14054: LD_INT 56
14056: PUSH
14057: LD_INT 57
14059: PUSH
14060: LD_INT 58
14062: PUSH
14063: LD_INT 59
14065: PUSH
14066: LD_INT 63
14068: PUSH
14069: LD_INT 64
14071: PUSH
14072: LD_INT 65
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: ST_TO_ADDR
14119: GO 14122
14121: POP
// if state > - 1 and state < 3 then
14122: LD_VAR 0 3
14126: PUSH
14127: LD_INT 1
14129: NEG
14130: GREATER
14131: PUSH
14132: LD_VAR 0 3
14136: PUSH
14137: LD_INT 3
14139: LESS
14140: AND
14141: IFFALSE 14198
// for i in result do
14143: LD_ADDR_VAR 0 5
14147: PUSH
14148: LD_VAR 0 4
14152: PUSH
14153: FOR_IN
14154: IFFALSE 14196
// if GetTech ( i , side ) <> state then
14156: LD_VAR 0 5
14160: PPUSH
14161: LD_VAR 0 1
14165: PPUSH
14166: CALL_OW 321
14170: PUSH
14171: LD_VAR 0 3
14175: NONEQUAL
14176: IFFALSE 14194
// result := result diff i ;
14178: LD_ADDR_VAR 0 4
14182: PUSH
14183: LD_VAR 0 4
14187: PUSH
14188: LD_VAR 0 5
14192: DIFF
14193: ST_TO_ADDR
14194: GO 14153
14196: POP
14197: POP
// end ;
14198: LD_VAR 0 4
14202: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14203: LD_INT 0
14205: PPUSH
14206: PPUSH
14207: PPUSH
// result := true ;
14208: LD_ADDR_VAR 0 3
14212: PUSH
14213: LD_INT 1
14215: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14216: LD_ADDR_VAR 0 5
14220: PUSH
14221: LD_VAR 0 2
14225: PPUSH
14226: CALL_OW 480
14230: ST_TO_ADDR
// if not tmp then
14231: LD_VAR 0 5
14235: NOT
14236: IFFALSE 14240
// exit ;
14238: GO 14289
// for i in tmp do
14240: LD_ADDR_VAR 0 4
14244: PUSH
14245: LD_VAR 0 5
14249: PUSH
14250: FOR_IN
14251: IFFALSE 14287
// if GetTech ( i , side ) <> state_researched then
14253: LD_VAR 0 4
14257: PPUSH
14258: LD_VAR 0 1
14262: PPUSH
14263: CALL_OW 321
14267: PUSH
14268: LD_INT 2
14270: NONEQUAL
14271: IFFALSE 14285
// begin result := false ;
14273: LD_ADDR_VAR 0 3
14277: PUSH
14278: LD_INT 0
14280: ST_TO_ADDR
// exit ;
14281: POP
14282: POP
14283: GO 14289
// end ;
14285: GO 14250
14287: POP
14288: POP
// end ;
14289: LD_VAR 0 3
14293: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14294: LD_INT 0
14296: PPUSH
14297: PPUSH
14298: PPUSH
14299: PPUSH
14300: PPUSH
14301: PPUSH
14302: PPUSH
14303: PPUSH
14304: PPUSH
14305: PPUSH
14306: PPUSH
14307: PPUSH
14308: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14309: LD_VAR 0 1
14313: NOT
14314: PUSH
14315: LD_VAR 0 1
14319: PPUSH
14320: CALL_OW 257
14324: PUSH
14325: LD_INT 9
14327: NONEQUAL
14328: OR
14329: IFFALSE 14333
// exit ;
14331: GO 14906
// side := GetSide ( unit ) ;
14333: LD_ADDR_VAR 0 9
14337: PUSH
14338: LD_VAR 0 1
14342: PPUSH
14343: CALL_OW 255
14347: ST_TO_ADDR
// tech_space := tech_spacanom ;
14348: LD_ADDR_VAR 0 12
14352: PUSH
14353: LD_INT 29
14355: ST_TO_ADDR
// tech_time := tech_taurad ;
14356: LD_ADDR_VAR 0 13
14360: PUSH
14361: LD_INT 28
14363: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14364: LD_ADDR_VAR 0 11
14368: PUSH
14369: LD_VAR 0 1
14373: PPUSH
14374: CALL_OW 310
14378: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14379: LD_VAR 0 11
14383: PPUSH
14384: CALL_OW 247
14388: PUSH
14389: LD_INT 2
14391: EQUAL
14392: IFFALSE 14396
// exit ;
14394: GO 14906
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14396: LD_ADDR_VAR 0 8
14400: PUSH
14401: LD_INT 81
14403: PUSH
14404: LD_VAR 0 9
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 3
14415: PUSH
14416: LD_INT 21
14418: PUSH
14419: LD_INT 3
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PPUSH
14434: CALL_OW 69
14438: ST_TO_ADDR
// if not tmp then
14439: LD_VAR 0 8
14443: NOT
14444: IFFALSE 14448
// exit ;
14446: GO 14906
// if in_unit then
14448: LD_VAR 0 11
14452: IFFALSE 14476
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14454: LD_ADDR_VAR 0 10
14458: PUSH
14459: LD_VAR 0 8
14463: PPUSH
14464: LD_VAR 0 11
14468: PPUSH
14469: CALL_OW 74
14473: ST_TO_ADDR
14474: GO 14496
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14476: LD_ADDR_VAR 0 10
14480: PUSH
14481: LD_VAR 0 8
14485: PPUSH
14486: LD_VAR 0 1
14490: PPUSH
14491: CALL_OW 74
14495: ST_TO_ADDR
// if not enemy then
14496: LD_VAR 0 10
14500: NOT
14501: IFFALSE 14505
// exit ;
14503: GO 14906
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14505: LD_VAR 0 11
14509: PUSH
14510: LD_VAR 0 11
14514: PPUSH
14515: LD_VAR 0 10
14519: PPUSH
14520: CALL_OW 296
14524: PUSH
14525: LD_INT 13
14527: GREATER
14528: AND
14529: PUSH
14530: LD_VAR 0 1
14534: PPUSH
14535: LD_VAR 0 10
14539: PPUSH
14540: CALL_OW 296
14544: PUSH
14545: LD_INT 12
14547: GREATER
14548: OR
14549: IFFALSE 14553
// exit ;
14551: GO 14906
// missile := [ 1 ] ;
14553: LD_ADDR_VAR 0 14
14557: PUSH
14558: LD_INT 1
14560: PUSH
14561: EMPTY
14562: LIST
14563: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14564: LD_VAR 0 9
14568: PPUSH
14569: LD_VAR 0 12
14573: PPUSH
14574: CALL_OW 325
14578: IFFALSE 14607
// missile := Insert ( missile , missile + 1 , 2 ) ;
14580: LD_ADDR_VAR 0 14
14584: PUSH
14585: LD_VAR 0 14
14589: PPUSH
14590: LD_VAR 0 14
14594: PUSH
14595: LD_INT 1
14597: PLUS
14598: PPUSH
14599: LD_INT 2
14601: PPUSH
14602: CALL_OW 2
14606: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14607: LD_VAR 0 9
14611: PPUSH
14612: LD_VAR 0 13
14616: PPUSH
14617: CALL_OW 325
14621: PUSH
14622: LD_VAR 0 10
14626: PPUSH
14627: CALL_OW 255
14631: PPUSH
14632: LD_VAR 0 13
14636: PPUSH
14637: CALL_OW 325
14641: NOT
14642: AND
14643: IFFALSE 14672
// missile := Insert ( missile , missile + 1 , 3 ) ;
14645: LD_ADDR_VAR 0 14
14649: PUSH
14650: LD_VAR 0 14
14654: PPUSH
14655: LD_VAR 0 14
14659: PUSH
14660: LD_INT 1
14662: PLUS
14663: PPUSH
14664: LD_INT 3
14666: PPUSH
14667: CALL_OW 2
14671: ST_TO_ADDR
// if missile < 2 then
14672: LD_VAR 0 14
14676: PUSH
14677: LD_INT 2
14679: LESS
14680: IFFALSE 14684
// exit ;
14682: GO 14906
// x := GetX ( enemy ) ;
14684: LD_ADDR_VAR 0 4
14688: PUSH
14689: LD_VAR 0 10
14693: PPUSH
14694: CALL_OW 250
14698: ST_TO_ADDR
// y := GetY ( enemy ) ;
14699: LD_ADDR_VAR 0 5
14703: PUSH
14704: LD_VAR 0 10
14708: PPUSH
14709: CALL_OW 251
14713: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14714: LD_ADDR_VAR 0 6
14718: PUSH
14719: LD_VAR 0 4
14723: PUSH
14724: LD_INT 1
14726: NEG
14727: PPUSH
14728: LD_INT 1
14730: PPUSH
14731: CALL_OW 12
14735: PLUS
14736: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14737: LD_ADDR_VAR 0 7
14741: PUSH
14742: LD_VAR 0 5
14746: PUSH
14747: LD_INT 1
14749: NEG
14750: PPUSH
14751: LD_INT 1
14753: PPUSH
14754: CALL_OW 12
14758: PLUS
14759: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14760: LD_VAR 0 6
14764: PPUSH
14765: LD_VAR 0 7
14769: PPUSH
14770: CALL_OW 488
14774: NOT
14775: IFFALSE 14797
// begin _x := x ;
14777: LD_ADDR_VAR 0 6
14781: PUSH
14782: LD_VAR 0 4
14786: ST_TO_ADDR
// _y := y ;
14787: LD_ADDR_VAR 0 7
14791: PUSH
14792: LD_VAR 0 5
14796: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14797: LD_ADDR_VAR 0 3
14801: PUSH
14802: LD_INT 1
14804: PPUSH
14805: LD_VAR 0 14
14809: PPUSH
14810: CALL_OW 12
14814: ST_TO_ADDR
// case i of 1 :
14815: LD_VAR 0 3
14819: PUSH
14820: LD_INT 1
14822: DOUBLE
14823: EQUAL
14824: IFTRUE 14828
14826: GO 14845
14828: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14829: LD_VAR 0 1
14833: PPUSH
14834: LD_VAR 0 10
14838: PPUSH
14839: CALL_OW 115
14843: GO 14906
14845: LD_INT 2
14847: DOUBLE
14848: EQUAL
14849: IFTRUE 14853
14851: GO 14875
14853: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14854: LD_VAR 0 1
14858: PPUSH
14859: LD_VAR 0 6
14863: PPUSH
14864: LD_VAR 0 7
14868: PPUSH
14869: CALL_OW 153
14873: GO 14906
14875: LD_INT 3
14877: DOUBLE
14878: EQUAL
14879: IFTRUE 14883
14881: GO 14905
14883: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14884: LD_VAR 0 1
14888: PPUSH
14889: LD_VAR 0 6
14893: PPUSH
14894: LD_VAR 0 7
14898: PPUSH
14899: CALL_OW 154
14903: GO 14906
14905: POP
// end ;
14906: LD_VAR 0 2
14910: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14911: LD_INT 0
14913: PPUSH
14914: PPUSH
14915: PPUSH
14916: PPUSH
14917: PPUSH
14918: PPUSH
// if not unit or not building then
14919: LD_VAR 0 1
14923: NOT
14924: PUSH
14925: LD_VAR 0 2
14929: NOT
14930: OR
14931: IFFALSE 14935
// exit ;
14933: GO 15090
// x := GetX ( building ) ;
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: LD_VAR 0 2
14944: PPUSH
14945: CALL_OW 250
14949: ST_TO_ADDR
// y := GetY ( building ) ;
14950: LD_ADDR_VAR 0 6
14954: PUSH
14955: LD_VAR 0 2
14959: PPUSH
14960: CALL_OW 251
14964: ST_TO_ADDR
// for i = 0 to 5 do
14965: LD_ADDR_VAR 0 4
14969: PUSH
14970: DOUBLE
14971: LD_INT 0
14973: DEC
14974: ST_TO_ADDR
14975: LD_INT 5
14977: PUSH
14978: FOR_TO
14979: IFFALSE 15088
// begin _x := ShiftX ( x , i , 3 ) ;
14981: LD_ADDR_VAR 0 7
14985: PUSH
14986: LD_VAR 0 5
14990: PPUSH
14991: LD_VAR 0 4
14995: PPUSH
14996: LD_INT 3
14998: PPUSH
14999: CALL_OW 272
15003: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
15004: LD_ADDR_VAR 0 8
15008: PUSH
15009: LD_VAR 0 6
15013: PPUSH
15014: LD_VAR 0 4
15018: PPUSH
15019: LD_INT 3
15021: PPUSH
15022: CALL_OW 273
15026: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
15027: LD_VAR 0 7
15031: PPUSH
15032: LD_VAR 0 8
15036: PPUSH
15037: CALL_OW 428
15041: PUSH
15042: LD_INT 0
15044: EQUAL
15045: PUSH
15046: LD_VAR 0 7
15050: PPUSH
15051: LD_VAR 0 8
15055: PPUSH
15056: CALL_OW 488
15060: AND
15061: IFFALSE 15086
// begin ComMoveXY ( unit , _x , _y ) ;
15063: LD_VAR 0 1
15067: PPUSH
15068: LD_VAR 0 7
15072: PPUSH
15073: LD_VAR 0 8
15077: PPUSH
15078: CALL_OW 111
// exit ;
15082: POP
15083: POP
15084: GO 15090
// end ; end ;
15086: GO 14978
15088: POP
15089: POP
// end ;
15090: LD_VAR 0 3
15094: RET
// export function ScanBase ( side , base_area ) ; begin
15095: LD_INT 0
15097: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15098: LD_ADDR_VAR 0 3
15102: PUSH
15103: LD_VAR 0 2
15107: PPUSH
15108: LD_INT 81
15110: PUSH
15111: LD_VAR 0 1
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PPUSH
15120: CALL_OW 70
15124: ST_TO_ADDR
// end ;
15125: LD_VAR 0 3
15129: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
15130: LD_INT 0
15132: PPUSH
15133: PPUSH
15134: PPUSH
15135: PPUSH
15136: PPUSH
15137: PPUSH
15138: PPUSH
15139: PPUSH
15140: PPUSH
15141: PPUSH
15142: PPUSH
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
15147: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
15148: LD_ADDR_VAR 0 12
15152: PUSH
15153: LD_EXP 57
15157: PUSH
15158: LD_VAR 0 1
15162: ARRAY
15163: PPUSH
15164: LD_INT 25
15166: PUSH
15167: LD_INT 3
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 72
15178: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
15179: LD_ADDR_VAR 0 8
15183: PUSH
15184: LD_EXP 57
15188: PUSH
15189: LD_VAR 0 1
15193: ARRAY
15194: PPUSH
15195: LD_INT 2
15197: PUSH
15198: LD_INT 25
15200: PUSH
15201: LD_INT 1
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 25
15210: PUSH
15211: LD_INT 5
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 25
15220: PUSH
15221: LD_INT 8
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 25
15230: PUSH
15231: LD_INT 9
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: PPUSH
15245: CALL_OW 72
15249: ST_TO_ADDR
// if not defenders and not solds then
15250: LD_VAR 0 2
15254: NOT
15255: PUSH
15256: LD_VAR 0 8
15260: NOT
15261: AND
15262: IFFALSE 15266
// exit ;
15264: GO 16632
// depot_under_attack := false ;
15266: LD_ADDR_VAR 0 16
15270: PUSH
15271: LD_INT 0
15273: ST_TO_ADDR
// sold_defenders := [ ] ;
15274: LD_ADDR_VAR 0 17
15278: PUSH
15279: EMPTY
15280: ST_TO_ADDR
// if mechs then
15281: LD_VAR 0 12
15285: IFFALSE 15414
// for i in defenders do
15287: LD_ADDR_VAR 0 5
15291: PUSH
15292: LD_VAR 0 2
15296: PUSH
15297: FOR_IN
15298: IFFALSE 15412
// begin SetTag ( i , 20 ) ;
15300: LD_VAR 0 5
15304: PPUSH
15305: LD_INT 20
15307: PPUSH
15308: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
15312: LD_VAR 0 5
15316: PPUSH
15317: CALL_OW 263
15321: PUSH
15322: LD_INT 1
15324: EQUAL
15325: PUSH
15326: LD_VAR 0 5
15330: PPUSH
15331: CALL_OW 311
15335: NOT
15336: AND
15337: PUSH
15338: LD_VAR 0 12
15342: AND
15343: IFFALSE 15410
// begin un := mechs [ 1 ] ;
15345: LD_ADDR_VAR 0 10
15349: PUSH
15350: LD_VAR 0 12
15354: PUSH
15355: LD_INT 1
15357: ARRAY
15358: ST_TO_ADDR
// ComExitBuilding ( un ) ;
15359: LD_VAR 0 10
15363: PPUSH
15364: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
15368: LD_VAR 0 10
15372: PPUSH
15373: LD_VAR 0 5
15377: PPUSH
15378: CALL_OW 180
// SetTag ( un , 19 ) ;
15382: LD_VAR 0 10
15386: PPUSH
15387: LD_INT 19
15389: PPUSH
15390: CALL_OW 109
// mechs := mechs diff un ;
15394: LD_ADDR_VAR 0 12
15398: PUSH
15399: LD_VAR 0 12
15403: PUSH
15404: LD_VAR 0 10
15408: DIFF
15409: ST_TO_ADDR
// end ; end ;
15410: GO 15297
15412: POP
15413: POP
// if solds then
15414: LD_VAR 0 8
15418: IFFALSE 15477
// for i in solds do
15420: LD_ADDR_VAR 0 5
15424: PUSH
15425: LD_VAR 0 8
15429: PUSH
15430: FOR_IN
15431: IFFALSE 15475
// if not GetTag ( i ) then
15433: LD_VAR 0 5
15437: PPUSH
15438: CALL_OW 110
15442: NOT
15443: IFFALSE 15473
// begin defenders := defenders union i ;
15445: LD_ADDR_VAR 0 2
15449: PUSH
15450: LD_VAR 0 2
15454: PUSH
15455: LD_VAR 0 5
15459: UNION
15460: ST_TO_ADDR
// SetTag ( i , 18 ) ;
15461: LD_VAR 0 5
15465: PPUSH
15466: LD_INT 18
15468: PPUSH
15469: CALL_OW 109
// end ;
15473: GO 15430
15475: POP
15476: POP
// repeat wait ( 0 0$1 ) ;
15477: LD_INT 35
15479: PPUSH
15480: CALL_OW 67
// enemy := mc_scan [ base ] ;
15484: LD_ADDR_VAR 0 3
15488: PUSH
15489: LD_EXP 80
15493: PUSH
15494: LD_VAR 0 1
15498: ARRAY
15499: ST_TO_ADDR
// for i in defenders do
15500: LD_ADDR_VAR 0 5
15504: PUSH
15505: LD_VAR 0 2
15509: PUSH
15510: FOR_IN
15511: IFFALSE 16196
// begin e := NearestUnitToUnit ( enemy , i ) ;
15513: LD_ADDR_VAR 0 13
15517: PUSH
15518: LD_VAR 0 3
15522: PPUSH
15523: LD_VAR 0 5
15527: PPUSH
15528: CALL_OW 74
15532: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
15533: LD_ADDR_VAR 0 16
15537: PUSH
15538: LD_EXP 57
15542: PUSH
15543: LD_VAR 0 1
15547: ARRAY
15548: PPUSH
15549: LD_INT 2
15551: PUSH
15552: LD_INT 30
15554: PUSH
15555: LD_INT 0
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 30
15564: PUSH
15565: LD_INT 1
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: LIST
15576: PPUSH
15577: CALL_OW 72
15581: NOT
15582: PUSH
15583: LD_EXP 57
15587: PUSH
15588: LD_VAR 0 1
15592: ARRAY
15593: PPUSH
15594: LD_INT 2
15596: PUSH
15597: LD_INT 30
15599: PUSH
15600: LD_INT 0
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 30
15609: PUSH
15610: LD_INT 1
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: PPUSH
15622: CALL_OW 72
15626: PPUSH
15627: CALL_OW 256
15631: PUSH
15632: LD_INT 600
15634: LESS
15635: OR
15636: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
15637: LD_VAR 0 5
15641: PPUSH
15642: CALL_OW 247
15646: PUSH
15647: LD_INT 2
15649: DOUBLE
15650: EQUAL
15651: IFTRUE 15655
15653: GO 15902
15655: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
15656: LD_VAR 0 5
15660: PPUSH
15661: CALL_OW 256
15665: PUSH
15666: LD_INT 650
15668: GREATER
15669: PUSH
15670: LD_VAR 0 5
15674: PPUSH
15675: LD_VAR 0 13
15679: PPUSH
15680: CALL_OW 296
15684: PUSH
15685: LD_INT 40
15687: LESS
15688: AND
15689: IFFALSE 15707
// ComAttackUnit ( i , e ) else
15691: LD_VAR 0 5
15695: PPUSH
15696: LD_VAR 0 13
15700: PPUSH
15701: CALL_OW 115
15705: GO 15785
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
15707: LD_VAR 0 5
15711: PPUSH
15712: LD_VAR 0 13
15716: PPUSH
15717: CALL_OW 296
15721: PUSH
15722: LD_INT 30
15724: GREATEREQUAL
15725: PUSH
15726: LD_VAR 0 5
15730: PPUSH
15731: CALL_OW 256
15735: PUSH
15736: LD_INT 650
15738: LESSEQUAL
15739: OR
15740: PUSH
15741: LD_VAR 0 5
15745: PPUSH
15746: LD_EXP 81
15750: PUSH
15751: LD_VAR 0 1
15755: ARRAY
15756: PPUSH
15757: CALL_OW 308
15761: NOT
15762: AND
15763: IFFALSE 15785
// ComMoveToArea ( i , mc_parking [ base ] ) ;
15765: LD_VAR 0 5
15769: PPUSH
15770: LD_EXP 81
15774: PUSH
15775: LD_VAR 0 1
15779: ARRAY
15780: PPUSH
15781: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
15785: LD_VAR 0 5
15789: PPUSH
15790: CALL_OW 256
15794: PUSH
15795: LD_INT 998
15797: LESS
15798: PUSH
15799: LD_VAR 0 5
15803: PPUSH
15804: CALL_OW 263
15808: PUSH
15809: LD_INT 1
15811: EQUAL
15812: AND
15813: PUSH
15814: LD_VAR 0 5
15818: PPUSH
15819: CALL_OW 311
15823: AND
15824: PUSH
15825: LD_VAR 0 5
15829: PPUSH
15830: LD_EXP 81
15834: PUSH
15835: LD_VAR 0 1
15839: ARRAY
15840: PPUSH
15841: CALL_OW 308
15845: AND
15846: IFFALSE 15900
// begin mech := IsDrivenBy ( i ) ;
15848: LD_ADDR_VAR 0 9
15852: PUSH
15853: LD_VAR 0 5
15857: PPUSH
15858: CALL_OW 311
15862: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
15863: LD_VAR 0 9
15867: PPUSH
15868: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
15872: LD_VAR 0 9
15876: PPUSH
15877: LD_VAR 0 5
15881: PPUSH
15882: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
15886: LD_VAR 0 9
15890: PPUSH
15891: LD_VAR 0 5
15895: PPUSH
15896: CALL_OW 180
// end ; end ; unit_human :
15900: GO 16167
15902: LD_INT 1
15904: DOUBLE
15905: EQUAL
15906: IFTRUE 15910
15908: GO 16166
15910: POP
// begin b := IsInUnit ( i ) ;
15911: LD_ADDR_VAR 0 18
15915: PUSH
15916: LD_VAR 0 5
15920: PPUSH
15921: CALL_OW 310
15925: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
15926: LD_ADDR_VAR 0 19
15930: PUSH
15931: LD_VAR 0 18
15935: NOT
15936: PUSH
15937: LD_VAR 0 18
15941: PPUSH
15942: CALL_OW 266
15946: PUSH
15947: LD_INT 32
15949: PUSH
15950: LD_INT 31
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: IN
15957: OR
15958: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
15959: LD_VAR 0 16
15963: PUSH
15964: LD_VAR 0 2
15968: PPUSH
15969: LD_INT 21
15971: PUSH
15972: LD_INT 2
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PPUSH
15979: CALL_OW 72
15983: PUSH
15984: LD_INT 1
15986: LESSEQUAL
15987: OR
15988: PUSH
15989: LD_VAR 0 19
15993: AND
15994: PUSH
15995: LD_VAR 0 5
15999: PUSH
16000: LD_VAR 0 17
16004: IN
16005: NOT
16006: AND
16007: IFFALSE 16100
// begin if b then
16009: LD_VAR 0 18
16013: IFFALSE 16062
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
16015: LD_VAR 0 18
16019: PPUSH
16020: LD_VAR 0 3
16024: PPUSH
16025: LD_VAR 0 18
16029: PPUSH
16030: CALL_OW 74
16034: PPUSH
16035: CALL_OW 296
16039: PUSH
16040: LD_INT 10
16042: LESS
16043: PUSH
16044: LD_VAR 0 18
16048: PPUSH
16049: CALL_OW 461
16053: PUSH
16054: LD_INT 7
16056: NONEQUAL
16057: AND
16058: IFFALSE 16062
// continue ;
16060: GO 15510
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
16062: LD_ADDR_VAR 0 17
16066: PUSH
16067: LD_VAR 0 17
16071: PPUSH
16072: LD_VAR 0 17
16076: PUSH
16077: LD_INT 1
16079: PLUS
16080: PPUSH
16081: LD_VAR 0 5
16085: PPUSH
16086: CALL_OW 1
16090: ST_TO_ADDR
// ComExitBuilding ( i ) ;
16091: LD_VAR 0 5
16095: PPUSH
16096: CALL_OW 122
// end ; if sold_defenders then
16100: LD_VAR 0 17
16104: IFFALSE 16164
// if i in sold_defenders then
16106: LD_VAR 0 5
16110: PUSH
16111: LD_VAR 0 17
16115: IN
16116: IFFALSE 16164
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
16118: LD_VAR 0 5
16122: PPUSH
16123: CALL_OW 314
16127: NOT
16128: PUSH
16129: LD_VAR 0 5
16133: PPUSH
16134: LD_VAR 0 13
16138: PPUSH
16139: CALL_OW 296
16143: PUSH
16144: LD_INT 30
16146: LESS
16147: AND
16148: IFFALSE 16164
// ComAttackUnit ( i , e ) ;
16150: LD_VAR 0 5
16154: PPUSH
16155: LD_VAR 0 13
16159: PPUSH
16160: CALL_OW 115
// end ; end ; end ;
16164: GO 16167
16166: POP
// if IsDead ( i ) then
16167: LD_VAR 0 5
16171: PPUSH
16172: CALL_OW 301
16176: IFFALSE 16194
// defenders := defenders diff i ;
16178: LD_ADDR_VAR 0 2
16182: PUSH
16183: LD_VAR 0 2
16187: PUSH
16188: LD_VAR 0 5
16192: DIFF
16193: ST_TO_ADDR
// end ;
16194: GO 15510
16196: POP
16197: POP
// until not enemy or not defenders ;
16198: LD_VAR 0 3
16202: NOT
16203: PUSH
16204: LD_VAR 0 2
16208: NOT
16209: OR
16210: IFFALSE 15477
// MC_Reset ( base , 18 ) ;
16212: LD_VAR 0 1
16216: PPUSH
16217: LD_INT 18
16219: PPUSH
16220: CALL 55000 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
16224: LD_ADDR_VAR 0 2
16228: PUSH
16229: LD_VAR 0 2
16233: PUSH
16234: LD_VAR 0 2
16238: PPUSH
16239: LD_INT 2
16241: PUSH
16242: LD_INT 25
16244: PUSH
16245: LD_INT 1
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 25
16254: PUSH
16255: LD_INT 5
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 25
16264: PUSH
16265: LD_INT 8
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 25
16274: PUSH
16275: LD_INT 9
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: PPUSH
16289: CALL_OW 72
16293: DIFF
16294: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
16295: LD_VAR 0 3
16299: NOT
16300: PUSH
16301: LD_VAR 0 2
16305: PPUSH
16306: LD_INT 21
16308: PUSH
16309: LD_INT 2
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PPUSH
16316: CALL_OW 72
16320: AND
16321: IFFALSE 16583
// begin tmp := FilterByTag ( defenders , 19 ) ;
16323: LD_ADDR_VAR 0 11
16327: PUSH
16328: LD_VAR 0 2
16332: PPUSH
16333: LD_INT 19
16335: PPUSH
16336: CALL 51094 0 2
16340: ST_TO_ADDR
// if tmp then
16341: LD_VAR 0 11
16345: IFFALSE 16415
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
16347: LD_ADDR_VAR 0 11
16351: PUSH
16352: LD_VAR 0 11
16356: PPUSH
16357: LD_INT 25
16359: PUSH
16360: LD_INT 3
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PPUSH
16367: CALL_OW 72
16371: ST_TO_ADDR
// if tmp then
16372: LD_VAR 0 11
16376: IFFALSE 16415
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
16378: LD_ADDR_EXP 69
16382: PUSH
16383: LD_EXP 69
16387: PPUSH
16388: LD_VAR 0 1
16392: PPUSH
16393: LD_EXP 69
16397: PUSH
16398: LD_VAR 0 1
16402: ARRAY
16403: PUSH
16404: LD_VAR 0 11
16408: UNION
16409: PPUSH
16410: CALL_OW 1
16414: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
16415: LD_VAR 0 1
16419: PPUSH
16420: LD_INT 19
16422: PPUSH
16423: CALL 55000 0 2
// repeat wait ( 0 0$1 ) ;
16427: LD_INT 35
16429: PPUSH
16430: CALL_OW 67
// for i in defenders do
16434: LD_ADDR_VAR 0 5
16438: PUSH
16439: LD_VAR 0 2
16443: PUSH
16444: FOR_IN
16445: IFFALSE 16534
// begin if not IsInArea ( i , mc_parking [ base ] ) then
16447: LD_VAR 0 5
16451: PPUSH
16452: LD_EXP 81
16456: PUSH
16457: LD_VAR 0 1
16461: ARRAY
16462: PPUSH
16463: CALL_OW 308
16467: NOT
16468: IFFALSE 16492
// ComMoveToArea ( i , mc_parking [ base ] ) else
16470: LD_VAR 0 5
16474: PPUSH
16475: LD_EXP 81
16479: PUSH
16480: LD_VAR 0 1
16484: ARRAY
16485: PPUSH
16486: CALL_OW 113
16490: GO 16532
// if GetControl ( i ) = control_manual then
16492: LD_VAR 0 5
16496: PPUSH
16497: CALL_OW 263
16501: PUSH
16502: LD_INT 1
16504: EQUAL
16505: IFFALSE 16532
// if IsDrivenBy ( i ) then
16507: LD_VAR 0 5
16511: PPUSH
16512: CALL_OW 311
16516: IFFALSE 16532
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
16518: LD_VAR 0 5
16522: PPUSH
16523: CALL_OW 311
16527: PPUSH
16528: CALL_OW 121
// end ;
16532: GO 16444
16534: POP
16535: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
16536: LD_VAR 0 2
16540: PPUSH
16541: LD_INT 95
16543: PUSH
16544: LD_EXP 81
16548: PUSH
16549: LD_VAR 0 1
16553: ARRAY
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PPUSH
16559: CALL_OW 72
16563: PUSH
16564: LD_VAR 0 2
16568: EQUAL
16569: PUSH
16570: LD_EXP 80
16574: PUSH
16575: LD_VAR 0 1
16579: ARRAY
16580: OR
16581: IFFALSE 16427
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
16583: LD_ADDR_EXP 79
16587: PUSH
16588: LD_EXP 79
16592: PPUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: LD_EXP 79
16602: PUSH
16603: LD_VAR 0 1
16607: ARRAY
16608: PUSH
16609: LD_VAR 0 2
16613: UNION
16614: PPUSH
16615: CALL_OW 1
16619: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
16620: LD_VAR 0 1
16624: PPUSH
16625: LD_INT 20
16627: PPUSH
16628: CALL 55000 0 2
// end ;
16632: LD_VAR 0 4
16636: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16637: LD_INT 0
16639: PPUSH
16640: PPUSH
16641: PPUSH
16642: PPUSH
// result := false ;
16643: LD_ADDR_VAR 0 2
16647: PUSH
16648: LD_INT 0
16650: ST_TO_ADDR
// side := GetSide ( unit ) ;
16651: LD_ADDR_VAR 0 3
16655: PUSH
16656: LD_VAR 0 1
16660: PPUSH
16661: CALL_OW 255
16665: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16666: LD_ADDR_VAR 0 4
16670: PUSH
16671: LD_VAR 0 1
16675: PPUSH
16676: CALL_OW 248
16680: ST_TO_ADDR
// case nat of 1 :
16681: LD_VAR 0 4
16685: PUSH
16686: LD_INT 1
16688: DOUBLE
16689: EQUAL
16690: IFTRUE 16694
16692: GO 16705
16694: POP
// tech := tech_lassight ; 2 :
16695: LD_ADDR_VAR 0 5
16699: PUSH
16700: LD_INT 12
16702: ST_TO_ADDR
16703: GO 16744
16705: LD_INT 2
16707: DOUBLE
16708: EQUAL
16709: IFTRUE 16713
16711: GO 16724
16713: POP
// tech := tech_mortar ; 3 :
16714: LD_ADDR_VAR 0 5
16718: PUSH
16719: LD_INT 41
16721: ST_TO_ADDR
16722: GO 16744
16724: LD_INT 3
16726: DOUBLE
16727: EQUAL
16728: IFTRUE 16732
16730: GO 16743
16732: POP
// tech := tech_bazooka ; end ;
16733: LD_ADDR_VAR 0 5
16737: PUSH
16738: LD_INT 44
16740: ST_TO_ADDR
16741: GO 16744
16743: POP
// if Researched ( side , tech ) then
16744: LD_VAR 0 3
16748: PPUSH
16749: LD_VAR 0 5
16753: PPUSH
16754: CALL_OW 325
16758: IFFALSE 16785
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
16760: LD_ADDR_VAR 0 2
16764: PUSH
16765: LD_INT 5
16767: PUSH
16768: LD_INT 8
16770: PUSH
16771: LD_INT 9
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: LIST
16778: PUSH
16779: LD_VAR 0 4
16783: ARRAY
16784: ST_TO_ADDR
// end ;
16785: LD_VAR 0 2
16789: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
16790: LD_INT 0
16792: PPUSH
16793: PPUSH
16794: PPUSH
// if not mines then
16795: LD_VAR 0 2
16799: NOT
16800: IFFALSE 16804
// exit ;
16802: GO 16948
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16804: LD_ADDR_VAR 0 5
16808: PUSH
16809: LD_INT 81
16811: PUSH
16812: LD_VAR 0 1
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 3
16823: PUSH
16824: LD_INT 21
16826: PUSH
16827: LD_INT 3
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PPUSH
16842: CALL_OW 69
16846: ST_TO_ADDR
// for i in mines do
16847: LD_ADDR_VAR 0 4
16851: PUSH
16852: LD_VAR 0 2
16856: PUSH
16857: FOR_IN
16858: IFFALSE 16946
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
16860: LD_VAR 0 4
16864: PUSH
16865: LD_INT 1
16867: ARRAY
16868: PPUSH
16869: LD_VAR 0 4
16873: PUSH
16874: LD_INT 2
16876: ARRAY
16877: PPUSH
16878: CALL_OW 458
16882: NOT
16883: IFFALSE 16887
// continue ;
16885: GO 16857
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
16887: LD_VAR 0 4
16891: PUSH
16892: LD_INT 1
16894: ARRAY
16895: PPUSH
16896: LD_VAR 0 4
16900: PUSH
16901: LD_INT 2
16903: ARRAY
16904: PPUSH
16905: CALL_OW 428
16909: PUSH
16910: LD_VAR 0 5
16914: IN
16915: IFFALSE 16944
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
16917: LD_VAR 0 4
16921: PUSH
16922: LD_INT 1
16924: ARRAY
16925: PPUSH
16926: LD_VAR 0 4
16930: PUSH
16931: LD_INT 2
16933: ARRAY
16934: PPUSH
16935: LD_VAR 0 1
16939: PPUSH
16940: CALL_OW 456
// end ;
16944: GO 16857
16946: POP
16947: POP
// end ;
16948: LD_VAR 0 3
16952: RET
// export function Count ( array ) ; var i ; begin
16953: LD_INT 0
16955: PPUSH
16956: PPUSH
// result := 0 ;
16957: LD_ADDR_VAR 0 2
16961: PUSH
16962: LD_INT 0
16964: ST_TO_ADDR
// for i in array do
16965: LD_ADDR_VAR 0 3
16969: PUSH
16970: LD_VAR 0 1
16974: PUSH
16975: FOR_IN
16976: IFFALSE 17000
// if i then
16978: LD_VAR 0 3
16982: IFFALSE 16998
// result := result + 1 ;
16984: LD_ADDR_VAR 0 2
16988: PUSH
16989: LD_VAR 0 2
16993: PUSH
16994: LD_INT 1
16996: PLUS
16997: ST_TO_ADDR
16998: GO 16975
17000: POP
17001: POP
// end ;
17002: LD_VAR 0 2
17006: RET
// export function IsEmpty ( building ) ; begin
17007: LD_INT 0
17009: PPUSH
// if not building then
17010: LD_VAR 0 1
17014: NOT
17015: IFFALSE 17019
// exit ;
17017: GO 17062
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17019: LD_ADDR_VAR 0 2
17023: PUSH
17024: LD_VAR 0 1
17028: PUSH
17029: LD_INT 22
17031: PUSH
17032: LD_VAR 0 1
17036: PPUSH
17037: CALL_OW 255
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 58
17048: PUSH
17049: EMPTY
17050: LIST
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PPUSH
17056: CALL_OW 69
17060: IN
17061: ST_TO_ADDR
// end ;
17062: LD_VAR 0 2
17066: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17067: LD_INT 0
17069: PPUSH
17070: PPUSH
17071: PPUSH
17072: PPUSH
// tmp := [ ] ;
17073: LD_ADDR_VAR 0 3
17077: PUSH
17078: EMPTY
17079: ST_TO_ADDR
// list := [ ] ;
17080: LD_ADDR_VAR 0 5
17084: PUSH
17085: EMPTY
17086: ST_TO_ADDR
// for i = 16 to 25 do
17087: LD_ADDR_VAR 0 4
17091: PUSH
17092: DOUBLE
17093: LD_INT 16
17095: DEC
17096: ST_TO_ADDR
17097: LD_INT 25
17099: PUSH
17100: FOR_TO
17101: IFFALSE 17174
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17103: LD_ADDR_VAR 0 3
17107: PUSH
17108: LD_VAR 0 3
17112: PUSH
17113: LD_INT 22
17115: PUSH
17116: LD_VAR 0 1
17120: PPUSH
17121: CALL_OW 255
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 91
17132: PUSH
17133: LD_VAR 0 1
17137: PUSH
17138: LD_INT 6
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: LIST
17145: PUSH
17146: LD_INT 30
17148: PUSH
17149: LD_VAR 0 4
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: LIST
17162: PUSH
17163: EMPTY
17164: LIST
17165: PPUSH
17166: CALL_OW 69
17170: ADD
17171: ST_TO_ADDR
17172: GO 17100
17174: POP
17175: POP
// for i = 1 to tmp do
17176: LD_ADDR_VAR 0 4
17180: PUSH
17181: DOUBLE
17182: LD_INT 1
17184: DEC
17185: ST_TO_ADDR
17186: LD_VAR 0 3
17190: PUSH
17191: FOR_TO
17192: IFFALSE 17280
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17194: LD_ADDR_VAR 0 5
17198: PUSH
17199: LD_VAR 0 5
17203: PUSH
17204: LD_VAR 0 3
17208: PUSH
17209: LD_VAR 0 4
17213: ARRAY
17214: PPUSH
17215: CALL_OW 266
17219: PUSH
17220: LD_VAR 0 3
17224: PUSH
17225: LD_VAR 0 4
17229: ARRAY
17230: PPUSH
17231: CALL_OW 250
17235: PUSH
17236: LD_VAR 0 3
17240: PUSH
17241: LD_VAR 0 4
17245: ARRAY
17246: PPUSH
17247: CALL_OW 251
17251: PUSH
17252: LD_VAR 0 3
17256: PUSH
17257: LD_VAR 0 4
17261: ARRAY
17262: PPUSH
17263: CALL_OW 254
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: PUSH
17274: EMPTY
17275: LIST
17276: ADD
17277: ST_TO_ADDR
17278: GO 17191
17280: POP
17281: POP
// result := list ;
17282: LD_ADDR_VAR 0 2
17286: PUSH
17287: LD_VAR 0 5
17291: ST_TO_ADDR
// end ;
17292: LD_VAR 0 2
17296: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17297: LD_INT 0
17299: PPUSH
17300: PPUSH
17301: PPUSH
17302: PPUSH
17303: PPUSH
17304: PPUSH
17305: PPUSH
// if not factory then
17306: LD_VAR 0 1
17310: NOT
17311: IFFALSE 17315
// exit ;
17313: GO 17840
// if control = control_apeman then
17315: LD_VAR 0 4
17319: PUSH
17320: LD_INT 5
17322: EQUAL
17323: IFFALSE 17432
// begin tmp := UnitsInside ( factory ) ;
17325: LD_ADDR_VAR 0 8
17329: PUSH
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 313
17339: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17340: LD_VAR 0 8
17344: PPUSH
17345: LD_INT 25
17347: PUSH
17348: LD_INT 12
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PPUSH
17355: CALL_OW 72
17359: NOT
17360: IFFALSE 17370
// control := control_manual ;
17362: LD_ADDR_VAR 0 4
17366: PUSH
17367: LD_INT 1
17369: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17370: LD_ADDR_VAR 0 8
17374: PUSH
17375: LD_VAR 0 1
17379: PPUSH
17380: CALL 17067 0 1
17384: ST_TO_ADDR
// if tmp then
17385: LD_VAR 0 8
17389: IFFALSE 17432
// begin for i in tmp do
17391: LD_ADDR_VAR 0 7
17395: PUSH
17396: LD_VAR 0 8
17400: PUSH
17401: FOR_IN
17402: IFFALSE 17430
// if i [ 1 ] = b_ext_radar then
17404: LD_VAR 0 7
17408: PUSH
17409: LD_INT 1
17411: ARRAY
17412: PUSH
17413: LD_INT 20
17415: EQUAL
17416: IFFALSE 17428
// begin control := control_remote ;
17418: LD_ADDR_VAR 0 4
17422: PUSH
17423: LD_INT 2
17425: ST_TO_ADDR
// break ;
17426: GO 17430
// end ;
17428: GO 17401
17430: POP
17431: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17432: LD_VAR 0 1
17436: PPUSH
17437: LD_VAR 0 2
17441: PPUSH
17442: LD_VAR 0 3
17446: PPUSH
17447: LD_VAR 0 4
17451: PPUSH
17452: LD_VAR 0 5
17456: PPUSH
17457: CALL_OW 448
17461: IFFALSE 17496
// begin result := [ chassis , engine , control , weapon ] ;
17463: LD_ADDR_VAR 0 6
17467: PUSH
17468: LD_VAR 0 2
17472: PUSH
17473: LD_VAR 0 3
17477: PUSH
17478: LD_VAR 0 4
17482: PUSH
17483: LD_VAR 0 5
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: ST_TO_ADDR
// exit ;
17494: GO 17840
// end ; _chassis := AvailableChassisList ( factory ) ;
17496: LD_ADDR_VAR 0 9
17500: PUSH
17501: LD_VAR 0 1
17505: PPUSH
17506: CALL_OW 475
17510: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17511: LD_ADDR_VAR 0 11
17515: PUSH
17516: LD_VAR 0 1
17520: PPUSH
17521: CALL_OW 476
17525: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17526: LD_ADDR_VAR 0 12
17530: PUSH
17531: LD_VAR 0 1
17535: PPUSH
17536: CALL_OW 477
17540: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17541: LD_ADDR_VAR 0 10
17545: PUSH
17546: LD_VAR 0 1
17550: PPUSH
17551: CALL_OW 478
17555: ST_TO_ADDR
// if not chassis in _chassis then
17556: LD_VAR 0 2
17560: PUSH
17561: LD_VAR 0 9
17565: IN
17566: NOT
17567: IFFALSE 17593
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17569: LD_ADDR_VAR 0 2
17573: PUSH
17574: LD_VAR 0 9
17578: PUSH
17579: LD_INT 1
17581: PPUSH
17582: LD_VAR 0 9
17586: PPUSH
17587: CALL_OW 12
17591: ARRAY
17592: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17593: LD_VAR 0 2
17597: PPUSH
17598: LD_VAR 0 3
17602: PPUSH
17603: CALL 17845 0 2
17607: NOT
17608: IFFALSE 17667
// repeat engine := _engine [ 1 ] ;
17610: LD_ADDR_VAR 0 3
17614: PUSH
17615: LD_VAR 0 11
17619: PUSH
17620: LD_INT 1
17622: ARRAY
17623: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17624: LD_ADDR_VAR 0 11
17628: PUSH
17629: LD_VAR 0 11
17633: PPUSH
17634: LD_INT 1
17636: PPUSH
17637: CALL_OW 3
17641: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17642: LD_VAR 0 2
17646: PPUSH
17647: LD_VAR 0 3
17651: PPUSH
17652: CALL 17845 0 2
17656: PUSH
17657: LD_VAR 0 11
17661: PUSH
17662: EMPTY
17663: EQUAL
17664: OR
17665: IFFALSE 17610
// if not control in _control then
17667: LD_VAR 0 4
17671: PUSH
17672: LD_VAR 0 12
17676: IN
17677: NOT
17678: IFFALSE 17704
// control := _control [ rand ( 1 , _control ) ] ;
17680: LD_ADDR_VAR 0 4
17684: PUSH
17685: LD_VAR 0 12
17689: PUSH
17690: LD_INT 1
17692: PPUSH
17693: LD_VAR 0 12
17697: PPUSH
17698: CALL_OW 12
17702: ARRAY
17703: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
17704: LD_VAR 0 2
17708: PPUSH
17709: LD_VAR 0 5
17713: PPUSH
17714: CALL 18065 0 2
17718: NOT
17719: IFFALSE 17778
// repeat weapon := _weapon [ 1 ] ;
17721: LD_ADDR_VAR 0 5
17725: PUSH
17726: LD_VAR 0 10
17730: PUSH
17731: LD_INT 1
17733: ARRAY
17734: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
17735: LD_ADDR_VAR 0 10
17739: PUSH
17740: LD_VAR 0 10
17744: PPUSH
17745: LD_INT 1
17747: PPUSH
17748: CALL_OW 3
17752: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
17753: LD_VAR 0 2
17757: PPUSH
17758: LD_VAR 0 5
17762: PPUSH
17763: CALL 18065 0 2
17767: PUSH
17768: LD_VAR 0 10
17772: PUSH
17773: EMPTY
17774: EQUAL
17775: OR
17776: IFFALSE 17721
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17778: LD_VAR 0 1
17782: PPUSH
17783: LD_VAR 0 2
17787: PPUSH
17788: LD_VAR 0 3
17792: PPUSH
17793: LD_VAR 0 4
17797: PPUSH
17798: LD_VAR 0 5
17802: PPUSH
17803: CALL_OW 448
17807: IFFALSE 17840
// result := [ chassis , engine , control , weapon ] ;
17809: LD_ADDR_VAR 0 6
17813: PUSH
17814: LD_VAR 0 2
17818: PUSH
17819: LD_VAR 0 3
17823: PUSH
17824: LD_VAR 0 4
17828: PUSH
17829: LD_VAR 0 5
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: ST_TO_ADDR
// end ;
17840: LD_VAR 0 6
17844: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
17845: LD_INT 0
17847: PPUSH
// if not chassis or not engine then
17848: LD_VAR 0 1
17852: NOT
17853: PUSH
17854: LD_VAR 0 2
17858: NOT
17859: OR
17860: IFFALSE 17864
// exit ;
17862: GO 18060
// case engine of engine_solar :
17864: LD_VAR 0 2
17868: PUSH
17869: LD_INT 2
17871: DOUBLE
17872: EQUAL
17873: IFTRUE 17877
17875: GO 17915
17877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
17878: LD_ADDR_VAR 0 3
17882: PUSH
17883: LD_INT 11
17885: PUSH
17886: LD_INT 12
17888: PUSH
17889: LD_INT 13
17891: PUSH
17892: LD_INT 14
17894: PUSH
17895: LD_INT 1
17897: PUSH
17898: LD_INT 2
17900: PUSH
17901: LD_INT 3
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: ST_TO_ADDR
17913: GO 18044
17915: LD_INT 1
17917: DOUBLE
17918: EQUAL
17919: IFTRUE 17923
17921: GO 17985
17923: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
17924: LD_ADDR_VAR 0 3
17928: PUSH
17929: LD_INT 11
17931: PUSH
17932: LD_INT 12
17934: PUSH
17935: LD_INT 13
17937: PUSH
17938: LD_INT 14
17940: PUSH
17941: LD_INT 1
17943: PUSH
17944: LD_INT 2
17946: PUSH
17947: LD_INT 3
17949: PUSH
17950: LD_INT 4
17952: PUSH
17953: LD_INT 5
17955: PUSH
17956: LD_INT 21
17958: PUSH
17959: LD_INT 23
17961: PUSH
17962: LD_INT 22
17964: PUSH
17965: LD_INT 24
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: ST_TO_ADDR
17983: GO 18044
17985: LD_INT 3
17987: DOUBLE
17988: EQUAL
17989: IFTRUE 17993
17991: GO 18043
17993: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17994: LD_ADDR_VAR 0 3
17998: PUSH
17999: LD_INT 13
18001: PUSH
18002: LD_INT 14
18004: PUSH
18005: LD_INT 2
18007: PUSH
18008: LD_INT 3
18010: PUSH
18011: LD_INT 4
18013: PUSH
18014: LD_INT 5
18016: PUSH
18017: LD_INT 21
18019: PUSH
18020: LD_INT 22
18022: PUSH
18023: LD_INT 23
18025: PUSH
18026: LD_INT 24
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: ST_TO_ADDR
18041: GO 18044
18043: POP
// result := ( chassis in result ) ;
18044: LD_ADDR_VAR 0 3
18048: PUSH
18049: LD_VAR 0 1
18053: PUSH
18054: LD_VAR 0 3
18058: IN
18059: ST_TO_ADDR
// end ;
18060: LD_VAR 0 3
18064: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18065: LD_INT 0
18067: PPUSH
// if not chassis or not weapon then
18068: LD_VAR 0 1
18072: NOT
18073: PUSH
18074: LD_VAR 0 2
18078: NOT
18079: OR
18080: IFFALSE 18084
// exit ;
18082: GO 19110
// case weapon of us_machine_gun :
18084: LD_VAR 0 2
18088: PUSH
18089: LD_INT 2
18091: DOUBLE
18092: EQUAL
18093: IFTRUE 18097
18095: GO 18127
18097: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18098: LD_ADDR_VAR 0 3
18102: PUSH
18103: LD_INT 1
18105: PUSH
18106: LD_INT 2
18108: PUSH
18109: LD_INT 3
18111: PUSH
18112: LD_INT 4
18114: PUSH
18115: LD_INT 5
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: ST_TO_ADDR
18125: GO 19094
18127: LD_INT 3
18129: DOUBLE
18130: EQUAL
18131: IFTRUE 18135
18133: GO 18165
18135: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18136: LD_ADDR_VAR 0 3
18140: PUSH
18141: LD_INT 1
18143: PUSH
18144: LD_INT 2
18146: PUSH
18147: LD_INT 3
18149: PUSH
18150: LD_INT 4
18152: PUSH
18153: LD_INT 5
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: ST_TO_ADDR
18163: GO 19094
18165: LD_INT 11
18167: DOUBLE
18168: EQUAL
18169: IFTRUE 18173
18171: GO 18203
18173: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18174: LD_ADDR_VAR 0 3
18178: PUSH
18179: LD_INT 1
18181: PUSH
18182: LD_INT 2
18184: PUSH
18185: LD_INT 3
18187: PUSH
18188: LD_INT 4
18190: PUSH
18191: LD_INT 5
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: ST_TO_ADDR
18201: GO 19094
18203: LD_INT 4
18205: DOUBLE
18206: EQUAL
18207: IFTRUE 18211
18209: GO 18237
18211: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18212: LD_ADDR_VAR 0 3
18216: PUSH
18217: LD_INT 2
18219: PUSH
18220: LD_INT 3
18222: PUSH
18223: LD_INT 4
18225: PUSH
18226: LD_INT 5
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: ST_TO_ADDR
18235: GO 19094
18237: LD_INT 5
18239: DOUBLE
18240: EQUAL
18241: IFTRUE 18245
18243: GO 18271
18245: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18246: LD_ADDR_VAR 0 3
18250: PUSH
18251: LD_INT 2
18253: PUSH
18254: LD_INT 3
18256: PUSH
18257: LD_INT 4
18259: PUSH
18260: LD_INT 5
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: ST_TO_ADDR
18269: GO 19094
18271: LD_INT 9
18273: DOUBLE
18274: EQUAL
18275: IFTRUE 18279
18277: GO 18305
18279: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18280: LD_ADDR_VAR 0 3
18284: PUSH
18285: LD_INT 2
18287: PUSH
18288: LD_INT 3
18290: PUSH
18291: LD_INT 4
18293: PUSH
18294: LD_INT 5
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: ST_TO_ADDR
18303: GO 19094
18305: LD_INT 7
18307: DOUBLE
18308: EQUAL
18309: IFTRUE 18313
18311: GO 18339
18313: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18314: LD_ADDR_VAR 0 3
18318: PUSH
18319: LD_INT 2
18321: PUSH
18322: LD_INT 3
18324: PUSH
18325: LD_INT 4
18327: PUSH
18328: LD_INT 5
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: ST_TO_ADDR
18337: GO 19094
18339: LD_INT 12
18341: DOUBLE
18342: EQUAL
18343: IFTRUE 18347
18345: GO 18373
18347: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18348: LD_ADDR_VAR 0 3
18352: PUSH
18353: LD_INT 2
18355: PUSH
18356: LD_INT 3
18358: PUSH
18359: LD_INT 4
18361: PUSH
18362: LD_INT 5
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: ST_TO_ADDR
18371: GO 19094
18373: LD_INT 13
18375: DOUBLE
18376: EQUAL
18377: IFTRUE 18381
18379: GO 18407
18381: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18382: LD_ADDR_VAR 0 3
18386: PUSH
18387: LD_INT 2
18389: PUSH
18390: LD_INT 3
18392: PUSH
18393: LD_INT 4
18395: PUSH
18396: LD_INT 5
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: ST_TO_ADDR
18405: GO 19094
18407: LD_INT 14
18409: DOUBLE
18410: EQUAL
18411: IFTRUE 18415
18413: GO 18433
18415: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18416: LD_ADDR_VAR 0 3
18420: PUSH
18421: LD_INT 4
18423: PUSH
18424: LD_INT 5
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: ST_TO_ADDR
18431: GO 19094
18433: LD_INT 6
18435: DOUBLE
18436: EQUAL
18437: IFTRUE 18441
18439: GO 18459
18441: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18442: LD_ADDR_VAR 0 3
18446: PUSH
18447: LD_INT 4
18449: PUSH
18450: LD_INT 5
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: ST_TO_ADDR
18457: GO 19094
18459: LD_INT 10
18461: DOUBLE
18462: EQUAL
18463: IFTRUE 18467
18465: GO 18485
18467: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18468: LD_ADDR_VAR 0 3
18472: PUSH
18473: LD_INT 4
18475: PUSH
18476: LD_INT 5
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: ST_TO_ADDR
18483: GO 19094
18485: LD_INT 22
18487: DOUBLE
18488: EQUAL
18489: IFTRUE 18493
18491: GO 18519
18493: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18494: LD_ADDR_VAR 0 3
18498: PUSH
18499: LD_INT 11
18501: PUSH
18502: LD_INT 12
18504: PUSH
18505: LD_INT 13
18507: PUSH
18508: LD_INT 14
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: ST_TO_ADDR
18517: GO 19094
18519: LD_INT 23
18521: DOUBLE
18522: EQUAL
18523: IFTRUE 18527
18525: GO 18553
18527: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18528: LD_ADDR_VAR 0 3
18532: PUSH
18533: LD_INT 11
18535: PUSH
18536: LD_INT 12
18538: PUSH
18539: LD_INT 13
18541: PUSH
18542: LD_INT 14
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: ST_TO_ADDR
18551: GO 19094
18553: LD_INT 24
18555: DOUBLE
18556: EQUAL
18557: IFTRUE 18561
18559: GO 18587
18561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18562: LD_ADDR_VAR 0 3
18566: PUSH
18567: LD_INT 11
18569: PUSH
18570: LD_INT 12
18572: PUSH
18573: LD_INT 13
18575: PUSH
18576: LD_INT 14
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: ST_TO_ADDR
18585: GO 19094
18587: LD_INT 30
18589: DOUBLE
18590: EQUAL
18591: IFTRUE 18595
18593: GO 18621
18595: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18596: LD_ADDR_VAR 0 3
18600: PUSH
18601: LD_INT 11
18603: PUSH
18604: LD_INT 12
18606: PUSH
18607: LD_INT 13
18609: PUSH
18610: LD_INT 14
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: ST_TO_ADDR
18619: GO 19094
18621: LD_INT 25
18623: DOUBLE
18624: EQUAL
18625: IFTRUE 18629
18627: GO 18647
18629: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18630: LD_ADDR_VAR 0 3
18634: PUSH
18635: LD_INT 13
18637: PUSH
18638: LD_INT 14
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: ST_TO_ADDR
18645: GO 19094
18647: LD_INT 27
18649: DOUBLE
18650: EQUAL
18651: IFTRUE 18655
18653: GO 18673
18655: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
18656: LD_ADDR_VAR 0 3
18660: PUSH
18661: LD_INT 13
18663: PUSH
18664: LD_INT 14
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: ST_TO_ADDR
18671: GO 19094
18673: LD_INT 28
18675: DOUBLE
18676: EQUAL
18677: IFTRUE 18681
18679: GO 18699
18681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
18682: LD_ADDR_VAR 0 3
18686: PUSH
18687: LD_INT 13
18689: PUSH
18690: LD_INT 14
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: ST_TO_ADDR
18697: GO 19094
18699: LD_INT 29
18701: DOUBLE
18702: EQUAL
18703: IFTRUE 18707
18705: GO 18725
18707: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
18708: LD_ADDR_VAR 0 3
18712: PUSH
18713: LD_INT 13
18715: PUSH
18716: LD_INT 14
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: ST_TO_ADDR
18723: GO 19094
18725: LD_INT 31
18727: DOUBLE
18728: EQUAL
18729: IFTRUE 18733
18731: GO 18751
18733: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
18734: LD_ADDR_VAR 0 3
18738: PUSH
18739: LD_INT 13
18741: PUSH
18742: LD_INT 14
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: ST_TO_ADDR
18749: GO 19094
18751: LD_INT 26
18753: DOUBLE
18754: EQUAL
18755: IFTRUE 18759
18757: GO 18777
18759: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
18760: LD_ADDR_VAR 0 3
18764: PUSH
18765: LD_INT 13
18767: PUSH
18768: LD_INT 14
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: ST_TO_ADDR
18775: GO 19094
18777: LD_INT 42
18779: DOUBLE
18780: EQUAL
18781: IFTRUE 18785
18783: GO 18811
18785: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
18786: LD_ADDR_VAR 0 3
18790: PUSH
18791: LD_INT 21
18793: PUSH
18794: LD_INT 22
18796: PUSH
18797: LD_INT 23
18799: PUSH
18800: LD_INT 24
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: ST_TO_ADDR
18809: GO 19094
18811: LD_INT 43
18813: DOUBLE
18814: EQUAL
18815: IFTRUE 18819
18817: GO 18845
18819: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
18820: LD_ADDR_VAR 0 3
18824: PUSH
18825: LD_INT 21
18827: PUSH
18828: LD_INT 22
18830: PUSH
18831: LD_INT 23
18833: PUSH
18834: LD_INT 24
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: ST_TO_ADDR
18843: GO 19094
18845: LD_INT 44
18847: DOUBLE
18848: EQUAL
18849: IFTRUE 18853
18851: GO 18879
18853: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
18854: LD_ADDR_VAR 0 3
18858: PUSH
18859: LD_INT 21
18861: PUSH
18862: LD_INT 22
18864: PUSH
18865: LD_INT 23
18867: PUSH
18868: LD_INT 24
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: ST_TO_ADDR
18877: GO 19094
18879: LD_INT 45
18881: DOUBLE
18882: EQUAL
18883: IFTRUE 18887
18885: GO 18913
18887: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
18888: LD_ADDR_VAR 0 3
18892: PUSH
18893: LD_INT 21
18895: PUSH
18896: LD_INT 22
18898: PUSH
18899: LD_INT 23
18901: PUSH
18902: LD_INT 24
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: ST_TO_ADDR
18911: GO 19094
18913: LD_INT 49
18915: DOUBLE
18916: EQUAL
18917: IFTRUE 18921
18919: GO 18947
18921: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
18922: LD_ADDR_VAR 0 3
18926: PUSH
18927: LD_INT 21
18929: PUSH
18930: LD_INT 22
18932: PUSH
18933: LD_INT 23
18935: PUSH
18936: LD_INT 24
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: ST_TO_ADDR
18945: GO 19094
18947: LD_INT 51
18949: DOUBLE
18950: EQUAL
18951: IFTRUE 18955
18953: GO 18981
18955: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
18956: LD_ADDR_VAR 0 3
18960: PUSH
18961: LD_INT 21
18963: PUSH
18964: LD_INT 22
18966: PUSH
18967: LD_INT 23
18969: PUSH
18970: LD_INT 24
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: ST_TO_ADDR
18979: GO 19094
18981: LD_INT 52
18983: DOUBLE
18984: EQUAL
18985: IFTRUE 18989
18987: GO 19015
18989: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
18990: LD_ADDR_VAR 0 3
18994: PUSH
18995: LD_INT 21
18997: PUSH
18998: LD_INT 22
19000: PUSH
19001: LD_INT 23
19003: PUSH
19004: LD_INT 24
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: ST_TO_ADDR
19013: GO 19094
19015: LD_INT 53
19017: DOUBLE
19018: EQUAL
19019: IFTRUE 19023
19021: GO 19041
19023: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19024: LD_ADDR_VAR 0 3
19028: PUSH
19029: LD_INT 23
19031: PUSH
19032: LD_INT 24
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: ST_TO_ADDR
19039: GO 19094
19041: LD_INT 46
19043: DOUBLE
19044: EQUAL
19045: IFTRUE 19049
19047: GO 19067
19049: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19050: LD_ADDR_VAR 0 3
19054: PUSH
19055: LD_INT 23
19057: PUSH
19058: LD_INT 24
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: ST_TO_ADDR
19065: GO 19094
19067: LD_INT 47
19069: DOUBLE
19070: EQUAL
19071: IFTRUE 19075
19073: GO 19093
19075: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19076: LD_ADDR_VAR 0 3
19080: PUSH
19081: LD_INT 23
19083: PUSH
19084: LD_INT 24
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: ST_TO_ADDR
19091: GO 19094
19093: POP
// result := ( chassis in result ) ;
19094: LD_ADDR_VAR 0 3
19098: PUSH
19099: LD_VAR 0 1
19103: PUSH
19104: LD_VAR 0 3
19108: IN
19109: ST_TO_ADDR
// end ;
19110: LD_VAR 0 3
19114: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19115: LD_INT 0
19117: PPUSH
19118: PPUSH
19119: PPUSH
19120: PPUSH
19121: PPUSH
19122: PPUSH
19123: PPUSH
// result := array ;
19124: LD_ADDR_VAR 0 5
19128: PUSH
19129: LD_VAR 0 1
19133: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19134: LD_VAR 0 1
19138: NOT
19139: PUSH
19140: LD_VAR 0 2
19144: NOT
19145: OR
19146: PUSH
19147: LD_VAR 0 3
19151: NOT
19152: OR
19153: PUSH
19154: LD_VAR 0 2
19158: PUSH
19159: LD_VAR 0 1
19163: GREATER
19164: OR
19165: PUSH
19166: LD_VAR 0 3
19170: PUSH
19171: LD_VAR 0 1
19175: GREATER
19176: OR
19177: IFFALSE 19181
// exit ;
19179: GO 19477
// if direction then
19181: LD_VAR 0 4
19185: IFFALSE 19249
// begin d := 1 ;
19187: LD_ADDR_VAR 0 9
19191: PUSH
19192: LD_INT 1
19194: ST_TO_ADDR
// if i_from > i_to then
19195: LD_VAR 0 2
19199: PUSH
19200: LD_VAR 0 3
19204: GREATER
19205: IFFALSE 19231
// length := ( array - i_from ) + i_to else
19207: LD_ADDR_VAR 0 11
19211: PUSH
19212: LD_VAR 0 1
19216: PUSH
19217: LD_VAR 0 2
19221: MINUS
19222: PUSH
19223: LD_VAR 0 3
19227: PLUS
19228: ST_TO_ADDR
19229: GO 19247
// length := i_to - i_from ;
19231: LD_ADDR_VAR 0 11
19235: PUSH
19236: LD_VAR 0 3
19240: PUSH
19241: LD_VAR 0 2
19245: MINUS
19246: ST_TO_ADDR
// end else
19247: GO 19310
// begin d := - 1 ;
19249: LD_ADDR_VAR 0 9
19253: PUSH
19254: LD_INT 1
19256: NEG
19257: ST_TO_ADDR
// if i_from > i_to then
19258: LD_VAR 0 2
19262: PUSH
19263: LD_VAR 0 3
19267: GREATER
19268: IFFALSE 19288
// length := i_from - i_to else
19270: LD_ADDR_VAR 0 11
19274: PUSH
19275: LD_VAR 0 2
19279: PUSH
19280: LD_VAR 0 3
19284: MINUS
19285: ST_TO_ADDR
19286: GO 19310
// length := ( array - i_to ) + i_from ;
19288: LD_ADDR_VAR 0 11
19292: PUSH
19293: LD_VAR 0 1
19297: PUSH
19298: LD_VAR 0 3
19302: MINUS
19303: PUSH
19304: LD_VAR 0 2
19308: PLUS
19309: ST_TO_ADDR
// end ; if not length then
19310: LD_VAR 0 11
19314: NOT
19315: IFFALSE 19319
// exit ;
19317: GO 19477
// tmp := array ;
19319: LD_ADDR_VAR 0 10
19323: PUSH
19324: LD_VAR 0 1
19328: ST_TO_ADDR
// for i = 1 to length do
19329: LD_ADDR_VAR 0 6
19333: PUSH
19334: DOUBLE
19335: LD_INT 1
19337: DEC
19338: ST_TO_ADDR
19339: LD_VAR 0 11
19343: PUSH
19344: FOR_TO
19345: IFFALSE 19465
// begin for j = 1 to array do
19347: LD_ADDR_VAR 0 7
19351: PUSH
19352: DOUBLE
19353: LD_INT 1
19355: DEC
19356: ST_TO_ADDR
19357: LD_VAR 0 1
19361: PUSH
19362: FOR_TO
19363: IFFALSE 19451
// begin k := j + d ;
19365: LD_ADDR_VAR 0 8
19369: PUSH
19370: LD_VAR 0 7
19374: PUSH
19375: LD_VAR 0 9
19379: PLUS
19380: ST_TO_ADDR
// if k > array then
19381: LD_VAR 0 8
19385: PUSH
19386: LD_VAR 0 1
19390: GREATER
19391: IFFALSE 19401
// k := 1 ;
19393: LD_ADDR_VAR 0 8
19397: PUSH
19398: LD_INT 1
19400: ST_TO_ADDR
// if not k then
19401: LD_VAR 0 8
19405: NOT
19406: IFFALSE 19418
// k := array ;
19408: LD_ADDR_VAR 0 8
19412: PUSH
19413: LD_VAR 0 1
19417: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19418: LD_ADDR_VAR 0 10
19422: PUSH
19423: LD_VAR 0 10
19427: PPUSH
19428: LD_VAR 0 8
19432: PPUSH
19433: LD_VAR 0 1
19437: PUSH
19438: LD_VAR 0 7
19442: ARRAY
19443: PPUSH
19444: CALL_OW 1
19448: ST_TO_ADDR
// end ;
19449: GO 19362
19451: POP
19452: POP
// array := tmp ;
19453: LD_ADDR_VAR 0 1
19457: PUSH
19458: LD_VAR 0 10
19462: ST_TO_ADDR
// end ;
19463: GO 19344
19465: POP
19466: POP
// result := array ;
19467: LD_ADDR_VAR 0 5
19471: PUSH
19472: LD_VAR 0 1
19476: ST_TO_ADDR
// end ;
19477: LD_VAR 0 5
19481: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19482: LD_INT 0
19484: PPUSH
19485: PPUSH
// result := 0 ;
19486: LD_ADDR_VAR 0 3
19490: PUSH
19491: LD_INT 0
19493: ST_TO_ADDR
// if not array or not value in array then
19494: LD_VAR 0 1
19498: NOT
19499: PUSH
19500: LD_VAR 0 2
19504: PUSH
19505: LD_VAR 0 1
19509: IN
19510: NOT
19511: OR
19512: IFFALSE 19516
// exit ;
19514: GO 19570
// for i = 1 to array do
19516: LD_ADDR_VAR 0 4
19520: PUSH
19521: DOUBLE
19522: LD_INT 1
19524: DEC
19525: ST_TO_ADDR
19526: LD_VAR 0 1
19530: PUSH
19531: FOR_TO
19532: IFFALSE 19568
// if value = array [ i ] then
19534: LD_VAR 0 2
19538: PUSH
19539: LD_VAR 0 1
19543: PUSH
19544: LD_VAR 0 4
19548: ARRAY
19549: EQUAL
19550: IFFALSE 19566
// begin result := i ;
19552: LD_ADDR_VAR 0 3
19556: PUSH
19557: LD_VAR 0 4
19561: ST_TO_ADDR
// exit ;
19562: POP
19563: POP
19564: GO 19570
// end ;
19566: GO 19531
19568: POP
19569: POP
// end ;
19570: LD_VAR 0 3
19574: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19575: LD_INT 0
19577: PPUSH
// vc_chassis := chassis ;
19578: LD_ADDR_OWVAR 37
19582: PUSH
19583: LD_VAR 0 1
19587: ST_TO_ADDR
// vc_engine := engine ;
19588: LD_ADDR_OWVAR 39
19592: PUSH
19593: LD_VAR 0 2
19597: ST_TO_ADDR
// vc_control := control ;
19598: LD_ADDR_OWVAR 38
19602: PUSH
19603: LD_VAR 0 3
19607: ST_TO_ADDR
// vc_weapon := weapon ;
19608: LD_ADDR_OWVAR 40
19612: PUSH
19613: LD_VAR 0 4
19617: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19618: LD_ADDR_OWVAR 41
19622: PUSH
19623: LD_VAR 0 5
19627: ST_TO_ADDR
// end ;
19628: LD_VAR 0 6
19632: RET
// export function WantPlant ( unit ) ; var task ; begin
19633: LD_INT 0
19635: PPUSH
19636: PPUSH
// result := false ;
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: LD_INT 0
19644: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
19645: LD_ADDR_VAR 0 3
19649: PUSH
19650: LD_VAR 0 1
19654: PPUSH
19655: CALL_OW 437
19659: ST_TO_ADDR
// if task then
19660: LD_VAR 0 3
19664: IFFALSE 19692
// if task [ 1 ] [ 1 ] = p then
19666: LD_VAR 0 3
19670: PUSH
19671: LD_INT 1
19673: ARRAY
19674: PUSH
19675: LD_INT 1
19677: ARRAY
19678: PUSH
19679: LD_STRING p
19681: EQUAL
19682: IFFALSE 19692
// result := true ;
19684: LD_ADDR_VAR 0 2
19688: PUSH
19689: LD_INT 1
19691: ST_TO_ADDR
// end ;
19692: LD_VAR 0 2
19696: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
19697: LD_INT 0
19699: PPUSH
19700: PPUSH
19701: PPUSH
19702: PPUSH
// if pos < 1 then
19703: LD_VAR 0 2
19707: PUSH
19708: LD_INT 1
19710: LESS
19711: IFFALSE 19715
// exit ;
19713: GO 20018
// if pos = 1 then
19715: LD_VAR 0 2
19719: PUSH
19720: LD_INT 1
19722: EQUAL
19723: IFFALSE 19756
// result := Replace ( arr , pos [ 1 ] , value ) else
19725: LD_ADDR_VAR 0 4
19729: PUSH
19730: LD_VAR 0 1
19734: PPUSH
19735: LD_VAR 0 2
19739: PUSH
19740: LD_INT 1
19742: ARRAY
19743: PPUSH
19744: LD_VAR 0 3
19748: PPUSH
19749: CALL_OW 1
19753: ST_TO_ADDR
19754: GO 20018
// begin tmp := arr ;
19756: LD_ADDR_VAR 0 6
19760: PUSH
19761: LD_VAR 0 1
19765: ST_TO_ADDR
// s_arr := [ tmp ] ;
19766: LD_ADDR_VAR 0 7
19770: PUSH
19771: LD_VAR 0 6
19775: PUSH
19776: EMPTY
19777: LIST
19778: ST_TO_ADDR
// for i = 1 to pos - 1 do
19779: LD_ADDR_VAR 0 5
19783: PUSH
19784: DOUBLE
19785: LD_INT 1
19787: DEC
19788: ST_TO_ADDR
19789: LD_VAR 0 2
19793: PUSH
19794: LD_INT 1
19796: MINUS
19797: PUSH
19798: FOR_TO
19799: IFFALSE 19844
// begin tmp := tmp [ pos [ i ] ] ;
19801: LD_ADDR_VAR 0 6
19805: PUSH
19806: LD_VAR 0 6
19810: PUSH
19811: LD_VAR 0 2
19815: PUSH
19816: LD_VAR 0 5
19820: ARRAY
19821: ARRAY
19822: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
19823: LD_ADDR_VAR 0 7
19827: PUSH
19828: LD_VAR 0 7
19832: PUSH
19833: LD_VAR 0 6
19837: PUSH
19838: EMPTY
19839: LIST
19840: ADD
19841: ST_TO_ADDR
// end ;
19842: GO 19798
19844: POP
19845: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
19846: LD_ADDR_VAR 0 6
19850: PUSH
19851: LD_VAR 0 6
19855: PPUSH
19856: LD_VAR 0 2
19860: PUSH
19861: LD_VAR 0 2
19865: ARRAY
19866: PPUSH
19867: LD_VAR 0 3
19871: PPUSH
19872: CALL_OW 1
19876: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
19877: LD_ADDR_VAR 0 7
19881: PUSH
19882: LD_VAR 0 7
19886: PPUSH
19887: LD_VAR 0 7
19891: PPUSH
19892: LD_VAR 0 6
19896: PPUSH
19897: CALL_OW 1
19901: ST_TO_ADDR
// for i = s_arr downto 2 do
19902: LD_ADDR_VAR 0 5
19906: PUSH
19907: DOUBLE
19908: LD_VAR 0 7
19912: INC
19913: ST_TO_ADDR
19914: LD_INT 2
19916: PUSH
19917: FOR_DOWNTO
19918: IFFALSE 20002
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
19920: LD_ADDR_VAR 0 6
19924: PUSH
19925: LD_VAR 0 7
19929: PUSH
19930: LD_VAR 0 5
19934: PUSH
19935: LD_INT 1
19937: MINUS
19938: ARRAY
19939: PPUSH
19940: LD_VAR 0 2
19944: PUSH
19945: LD_VAR 0 5
19949: PUSH
19950: LD_INT 1
19952: MINUS
19953: ARRAY
19954: PPUSH
19955: LD_VAR 0 7
19959: PUSH
19960: LD_VAR 0 5
19964: ARRAY
19965: PPUSH
19966: CALL_OW 1
19970: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
19971: LD_ADDR_VAR 0 7
19975: PUSH
19976: LD_VAR 0 7
19980: PPUSH
19981: LD_VAR 0 5
19985: PUSH
19986: LD_INT 1
19988: MINUS
19989: PPUSH
19990: LD_VAR 0 6
19994: PPUSH
19995: CALL_OW 1
19999: ST_TO_ADDR
// end ;
20000: GO 19917
20002: POP
20003: POP
// result := s_arr [ 1 ] ;
20004: LD_ADDR_VAR 0 4
20008: PUSH
20009: LD_VAR 0 7
20013: PUSH
20014: LD_INT 1
20016: ARRAY
20017: ST_TO_ADDR
// end ; end ;
20018: LD_VAR 0 4
20022: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20023: LD_INT 0
20025: PPUSH
20026: PPUSH
// if not list then
20027: LD_VAR 0 1
20031: NOT
20032: IFFALSE 20036
// exit ;
20034: GO 20127
// i := list [ pos1 ] ;
20036: LD_ADDR_VAR 0 5
20040: PUSH
20041: LD_VAR 0 1
20045: PUSH
20046: LD_VAR 0 2
20050: ARRAY
20051: ST_TO_ADDR
// if not i then
20052: LD_VAR 0 5
20056: NOT
20057: IFFALSE 20061
// exit ;
20059: GO 20127
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20061: LD_ADDR_VAR 0 1
20065: PUSH
20066: LD_VAR 0 1
20070: PPUSH
20071: LD_VAR 0 2
20075: PPUSH
20076: LD_VAR 0 1
20080: PUSH
20081: LD_VAR 0 3
20085: ARRAY
20086: PPUSH
20087: CALL_OW 1
20091: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20092: LD_ADDR_VAR 0 1
20096: PUSH
20097: LD_VAR 0 1
20101: PPUSH
20102: LD_VAR 0 3
20106: PPUSH
20107: LD_VAR 0 5
20111: PPUSH
20112: CALL_OW 1
20116: ST_TO_ADDR
// result := list ;
20117: LD_ADDR_VAR 0 4
20121: PUSH
20122: LD_VAR 0 1
20126: ST_TO_ADDR
// end ;
20127: LD_VAR 0 4
20131: RET
// export function Add ( list , pos , val ) ; begin
20132: LD_INT 0
20134: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
20135: LD_ADDR_VAR 0 4
20139: PUSH
20140: LD_VAR 0 1
20144: PPUSH
20145: LD_VAR 0 2
20149: PPUSH
20150: LD_VAR 0 3
20154: PPUSH
20155: CALL 19697 0 3
20159: ST_TO_ADDR
20160: LD_VAR 0 4
20164: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20165: LD_INT 0
20167: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20168: LD_ADDR_VAR 0 5
20172: PUSH
20173: LD_VAR 0 1
20177: PPUSH
20178: CALL_OW 250
20182: PPUSH
20183: LD_VAR 0 1
20187: PPUSH
20188: CALL_OW 251
20192: PPUSH
20193: LD_VAR 0 2
20197: PPUSH
20198: LD_VAR 0 3
20202: PPUSH
20203: LD_VAR 0 4
20207: PPUSH
20208: CALL 20218 0 5
20212: ST_TO_ADDR
// end ;
20213: LD_VAR 0 5
20217: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20218: LD_INT 0
20220: PPUSH
20221: PPUSH
20222: PPUSH
20223: PPUSH
// if not list then
20224: LD_VAR 0 3
20228: NOT
20229: IFFALSE 20233
// exit ;
20231: GO 20621
// result := [ ] ;
20233: LD_ADDR_VAR 0 6
20237: PUSH
20238: EMPTY
20239: ST_TO_ADDR
// for i in list do
20240: LD_ADDR_VAR 0 7
20244: PUSH
20245: LD_VAR 0 3
20249: PUSH
20250: FOR_IN
20251: IFFALSE 20453
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20253: LD_ADDR_VAR 0 9
20257: PUSH
20258: LD_VAR 0 7
20262: PPUSH
20263: LD_VAR 0 1
20267: PPUSH
20268: LD_VAR 0 2
20272: PPUSH
20273: CALL_OW 297
20277: ST_TO_ADDR
// if not result then
20278: LD_VAR 0 6
20282: NOT
20283: IFFALSE 20309
// result := [ [ i , tmp ] ] else
20285: LD_ADDR_VAR 0 6
20289: PUSH
20290: LD_VAR 0 7
20294: PUSH
20295: LD_VAR 0 9
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: EMPTY
20305: LIST
20306: ST_TO_ADDR
20307: GO 20451
// begin if result [ result ] [ 2 ] < tmp then
20309: LD_VAR 0 6
20313: PUSH
20314: LD_VAR 0 6
20318: ARRAY
20319: PUSH
20320: LD_INT 2
20322: ARRAY
20323: PUSH
20324: LD_VAR 0 9
20328: LESS
20329: IFFALSE 20371
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20331: LD_ADDR_VAR 0 6
20335: PUSH
20336: LD_VAR 0 6
20340: PPUSH
20341: LD_VAR 0 6
20345: PUSH
20346: LD_INT 1
20348: PLUS
20349: PPUSH
20350: LD_VAR 0 7
20354: PUSH
20355: LD_VAR 0 9
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PPUSH
20364: CALL_OW 2
20368: ST_TO_ADDR
20369: GO 20451
// for j = 1 to result do
20371: LD_ADDR_VAR 0 8
20375: PUSH
20376: DOUBLE
20377: LD_INT 1
20379: DEC
20380: ST_TO_ADDR
20381: LD_VAR 0 6
20385: PUSH
20386: FOR_TO
20387: IFFALSE 20449
// begin if tmp < result [ j ] [ 2 ] then
20389: LD_VAR 0 9
20393: PUSH
20394: LD_VAR 0 6
20398: PUSH
20399: LD_VAR 0 8
20403: ARRAY
20404: PUSH
20405: LD_INT 2
20407: ARRAY
20408: LESS
20409: IFFALSE 20447
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20411: LD_ADDR_VAR 0 6
20415: PUSH
20416: LD_VAR 0 6
20420: PPUSH
20421: LD_VAR 0 8
20425: PPUSH
20426: LD_VAR 0 7
20430: PUSH
20431: LD_VAR 0 9
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PPUSH
20440: CALL_OW 2
20444: ST_TO_ADDR
// break ;
20445: GO 20449
// end ; end ;
20447: GO 20386
20449: POP
20450: POP
// end ; end ;
20451: GO 20250
20453: POP
20454: POP
// if result and not asc then
20455: LD_VAR 0 6
20459: PUSH
20460: LD_VAR 0 4
20464: NOT
20465: AND
20466: IFFALSE 20541
// begin tmp := result ;
20468: LD_ADDR_VAR 0 9
20472: PUSH
20473: LD_VAR 0 6
20477: ST_TO_ADDR
// for i = tmp downto 1 do
20478: LD_ADDR_VAR 0 7
20482: PUSH
20483: DOUBLE
20484: LD_VAR 0 9
20488: INC
20489: ST_TO_ADDR
20490: LD_INT 1
20492: PUSH
20493: FOR_DOWNTO
20494: IFFALSE 20539
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
20496: LD_ADDR_VAR 0 6
20500: PUSH
20501: LD_VAR 0 6
20505: PPUSH
20506: LD_VAR 0 9
20510: PUSH
20511: LD_VAR 0 7
20515: MINUS
20516: PUSH
20517: LD_INT 1
20519: PLUS
20520: PPUSH
20521: LD_VAR 0 9
20525: PUSH
20526: LD_VAR 0 7
20530: ARRAY
20531: PPUSH
20532: CALL_OW 1
20536: ST_TO_ADDR
20537: GO 20493
20539: POP
20540: POP
// end ; tmp := [ ] ;
20541: LD_ADDR_VAR 0 9
20545: PUSH
20546: EMPTY
20547: ST_TO_ADDR
// if mode then
20548: LD_VAR 0 5
20552: IFFALSE 20621
// begin for i = 1 to result do
20554: LD_ADDR_VAR 0 7
20558: PUSH
20559: DOUBLE
20560: LD_INT 1
20562: DEC
20563: ST_TO_ADDR
20564: LD_VAR 0 6
20568: PUSH
20569: FOR_TO
20570: IFFALSE 20609
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
20572: LD_ADDR_VAR 0 9
20576: PUSH
20577: LD_VAR 0 9
20581: PPUSH
20582: LD_VAR 0 7
20586: PPUSH
20587: LD_VAR 0 6
20591: PUSH
20592: LD_VAR 0 7
20596: ARRAY
20597: PUSH
20598: LD_INT 1
20600: ARRAY
20601: PPUSH
20602: CALL_OW 1
20606: ST_TO_ADDR
20607: GO 20569
20609: POP
20610: POP
// result := tmp ;
20611: LD_ADDR_VAR 0 6
20615: PUSH
20616: LD_VAR 0 9
20620: ST_TO_ADDR
// end ; end ;
20621: LD_VAR 0 6
20625: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
20626: LD_INT 0
20628: PPUSH
20629: PPUSH
20630: PPUSH
20631: PPUSH
20632: PPUSH
20633: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
20634: LD_ADDR_VAR 0 5
20638: PUSH
20639: LD_INT 0
20641: PUSH
20642: LD_INT 0
20644: PUSH
20645: LD_INT 0
20647: PUSH
20648: EMPTY
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: ST_TO_ADDR
// if not x or not y then
20656: LD_VAR 0 2
20660: NOT
20661: PUSH
20662: LD_VAR 0 3
20666: NOT
20667: OR
20668: IFFALSE 20672
// exit ;
20670: GO 22318
// if not range then
20672: LD_VAR 0 4
20676: NOT
20677: IFFALSE 20687
// range := 10 ;
20679: LD_ADDR_VAR 0 4
20683: PUSH
20684: LD_INT 10
20686: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20687: LD_ADDR_VAR 0 8
20691: PUSH
20692: LD_INT 81
20694: PUSH
20695: LD_VAR 0 1
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 92
20706: PUSH
20707: LD_VAR 0 2
20711: PUSH
20712: LD_VAR 0 3
20716: PUSH
20717: LD_VAR 0 4
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 3
20730: PUSH
20731: LD_INT 21
20733: PUSH
20734: LD_INT 3
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: PPUSH
20750: CALL_OW 69
20754: ST_TO_ADDR
// if not tmp then
20755: LD_VAR 0 8
20759: NOT
20760: IFFALSE 20764
// exit ;
20762: GO 22318
// for i in tmp do
20764: LD_ADDR_VAR 0 6
20768: PUSH
20769: LD_VAR 0 8
20773: PUSH
20774: FOR_IN
20775: IFFALSE 22293
// begin points := [ 0 , 0 , 0 ] ;
20777: LD_ADDR_VAR 0 9
20781: PUSH
20782: LD_INT 0
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: LIST
20795: ST_TO_ADDR
// bpoints := 1 ;
20796: LD_ADDR_VAR 0 10
20800: PUSH
20801: LD_INT 1
20803: ST_TO_ADDR
// case GetType ( i ) of unit_human :
20804: LD_VAR 0 6
20808: PPUSH
20809: CALL_OW 247
20813: PUSH
20814: LD_INT 1
20816: DOUBLE
20817: EQUAL
20818: IFTRUE 20822
20820: GO 21400
20822: POP
// begin if GetClass ( i ) = 1 then
20823: LD_VAR 0 6
20827: PPUSH
20828: CALL_OW 257
20832: PUSH
20833: LD_INT 1
20835: EQUAL
20836: IFFALSE 20857
// points := [ 10 , 5 , 3 ] ;
20838: LD_ADDR_VAR 0 9
20842: PUSH
20843: LD_INT 10
20845: PUSH
20846: LD_INT 5
20848: PUSH
20849: LD_INT 3
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: LIST
20856: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
20857: LD_VAR 0 6
20861: PPUSH
20862: CALL_OW 257
20866: PUSH
20867: LD_INT 2
20869: PUSH
20870: LD_INT 3
20872: PUSH
20873: LD_INT 4
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: LIST
20880: IN
20881: IFFALSE 20902
// points := [ 3 , 2 , 1 ] ;
20883: LD_ADDR_VAR 0 9
20887: PUSH
20888: LD_INT 3
20890: PUSH
20891: LD_INT 2
20893: PUSH
20894: LD_INT 1
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: LIST
20901: ST_TO_ADDR
// if GetClass ( i ) = 5 then
20902: LD_VAR 0 6
20906: PPUSH
20907: CALL_OW 257
20911: PUSH
20912: LD_INT 5
20914: EQUAL
20915: IFFALSE 20936
// points := [ 130 , 5 , 2 ] ;
20917: LD_ADDR_VAR 0 9
20921: PUSH
20922: LD_INT 130
20924: PUSH
20925: LD_INT 5
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: LIST
20935: ST_TO_ADDR
// if GetClass ( i ) = 8 then
20936: LD_VAR 0 6
20940: PPUSH
20941: CALL_OW 257
20945: PUSH
20946: LD_INT 8
20948: EQUAL
20949: IFFALSE 20970
// points := [ 35 , 35 , 30 ] ;
20951: LD_ADDR_VAR 0 9
20955: PUSH
20956: LD_INT 35
20958: PUSH
20959: LD_INT 35
20961: PUSH
20962: LD_INT 30
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: LIST
20969: ST_TO_ADDR
// if GetClass ( i ) = 9 then
20970: LD_VAR 0 6
20974: PPUSH
20975: CALL_OW 257
20979: PUSH
20980: LD_INT 9
20982: EQUAL
20983: IFFALSE 21004
// points := [ 20 , 55 , 40 ] ;
20985: LD_ADDR_VAR 0 9
20989: PUSH
20990: LD_INT 20
20992: PUSH
20993: LD_INT 55
20995: PUSH
20996: LD_INT 40
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: LIST
21003: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21004: LD_VAR 0 6
21008: PPUSH
21009: CALL_OW 257
21013: PUSH
21014: LD_INT 12
21016: PUSH
21017: LD_INT 16
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: IN
21024: IFFALSE 21045
// points := [ 5 , 3 , 2 ] ;
21026: LD_ADDR_VAR 0 9
21030: PUSH
21031: LD_INT 5
21033: PUSH
21034: LD_INT 3
21036: PUSH
21037: LD_INT 2
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: LIST
21044: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21045: LD_VAR 0 6
21049: PPUSH
21050: CALL_OW 257
21054: PUSH
21055: LD_INT 17
21057: EQUAL
21058: IFFALSE 21079
// points := [ 100 , 50 , 75 ] ;
21060: LD_ADDR_VAR 0 9
21064: PUSH
21065: LD_INT 100
21067: PUSH
21068: LD_INT 50
21070: PUSH
21071: LD_INT 75
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: LIST
21078: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21079: LD_VAR 0 6
21083: PPUSH
21084: CALL_OW 257
21088: PUSH
21089: LD_INT 15
21091: EQUAL
21092: IFFALSE 21113
// points := [ 10 , 5 , 3 ] ;
21094: LD_ADDR_VAR 0 9
21098: PUSH
21099: LD_INT 10
21101: PUSH
21102: LD_INT 5
21104: PUSH
21105: LD_INT 3
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: LIST
21112: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21113: LD_VAR 0 6
21117: PPUSH
21118: CALL_OW 257
21122: PUSH
21123: LD_INT 14
21125: EQUAL
21126: IFFALSE 21147
// points := [ 10 , 0 , 0 ] ;
21128: LD_ADDR_VAR 0 9
21132: PUSH
21133: LD_INT 10
21135: PUSH
21136: LD_INT 0
21138: PUSH
21139: LD_INT 0
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: LIST
21146: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21147: LD_VAR 0 6
21151: PPUSH
21152: CALL_OW 257
21156: PUSH
21157: LD_INT 11
21159: EQUAL
21160: IFFALSE 21181
// points := [ 30 , 10 , 5 ] ;
21162: LD_ADDR_VAR 0 9
21166: PUSH
21167: LD_INT 30
21169: PUSH
21170: LD_INT 10
21172: PUSH
21173: LD_INT 5
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21181: LD_VAR 0 1
21185: PPUSH
21186: LD_INT 5
21188: PPUSH
21189: CALL_OW 321
21193: PUSH
21194: LD_INT 2
21196: EQUAL
21197: IFFALSE 21214
// bpoints := bpoints * 1.8 ;
21199: LD_ADDR_VAR 0 10
21203: PUSH
21204: LD_VAR 0 10
21208: PUSH
21209: LD_REAL  1.80000000000000E+0000
21212: MUL
21213: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21214: LD_VAR 0 6
21218: PPUSH
21219: CALL_OW 257
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: LD_INT 2
21229: PUSH
21230: LD_INT 3
21232: PUSH
21233: LD_INT 4
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: IN
21242: PUSH
21243: LD_VAR 0 1
21247: PPUSH
21248: LD_INT 51
21250: PPUSH
21251: CALL_OW 321
21255: PUSH
21256: LD_INT 2
21258: EQUAL
21259: AND
21260: IFFALSE 21277
// bpoints := bpoints * 1.2 ;
21262: LD_ADDR_VAR 0 10
21266: PUSH
21267: LD_VAR 0 10
21271: PUSH
21272: LD_REAL  1.20000000000000E+0000
21275: MUL
21276: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21277: LD_VAR 0 6
21281: PPUSH
21282: CALL_OW 257
21286: PUSH
21287: LD_INT 5
21289: PUSH
21290: LD_INT 7
21292: PUSH
21293: LD_INT 9
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: LIST
21300: IN
21301: PUSH
21302: LD_VAR 0 1
21306: PPUSH
21307: LD_INT 52
21309: PPUSH
21310: CALL_OW 321
21314: PUSH
21315: LD_INT 2
21317: EQUAL
21318: AND
21319: IFFALSE 21336
// bpoints := bpoints * 1.5 ;
21321: LD_ADDR_VAR 0 10
21325: PUSH
21326: LD_VAR 0 10
21330: PUSH
21331: LD_REAL  1.50000000000000E+0000
21334: MUL
21335: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21336: LD_VAR 0 1
21340: PPUSH
21341: LD_INT 66
21343: PPUSH
21344: CALL_OW 321
21348: PUSH
21349: LD_INT 2
21351: EQUAL
21352: IFFALSE 21369
// bpoints := bpoints * 1.1 ;
21354: LD_ADDR_VAR 0 10
21358: PUSH
21359: LD_VAR 0 10
21363: PUSH
21364: LD_REAL  1.10000000000000E+0000
21367: MUL
21368: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21369: LD_ADDR_VAR 0 10
21373: PUSH
21374: LD_VAR 0 10
21378: PUSH
21379: LD_VAR 0 6
21383: PPUSH
21384: LD_INT 1
21386: PPUSH
21387: CALL_OW 259
21391: PUSH
21392: LD_REAL  1.15000000000000E+0000
21395: MUL
21396: MUL
21397: ST_TO_ADDR
// end ; unit_vehicle :
21398: GO 22222
21400: LD_INT 2
21402: DOUBLE
21403: EQUAL
21404: IFTRUE 21408
21406: GO 22210
21408: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21409: LD_VAR 0 6
21413: PPUSH
21414: CALL_OW 264
21418: PUSH
21419: LD_INT 2
21421: PUSH
21422: LD_INT 42
21424: PUSH
21425: LD_INT 24
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: LIST
21432: IN
21433: IFFALSE 21454
// points := [ 25 , 5 , 3 ] ;
21435: LD_ADDR_VAR 0 9
21439: PUSH
21440: LD_INT 25
21442: PUSH
21443: LD_INT 5
21445: PUSH
21446: LD_INT 3
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
21454: LD_VAR 0 6
21458: PPUSH
21459: CALL_OW 264
21463: PUSH
21464: LD_INT 4
21466: PUSH
21467: LD_INT 43
21469: PUSH
21470: LD_INT 25
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: LIST
21477: IN
21478: IFFALSE 21499
// points := [ 40 , 15 , 5 ] ;
21480: LD_ADDR_VAR 0 9
21484: PUSH
21485: LD_INT 40
21487: PUSH
21488: LD_INT 15
21490: PUSH
21491: LD_INT 5
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: LIST
21498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
21499: LD_VAR 0 6
21503: PPUSH
21504: CALL_OW 264
21508: PUSH
21509: LD_INT 3
21511: PUSH
21512: LD_INT 23
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: IN
21519: IFFALSE 21540
// points := [ 7 , 25 , 8 ] ;
21521: LD_ADDR_VAR 0 9
21525: PUSH
21526: LD_INT 7
21528: PUSH
21529: LD_INT 25
21531: PUSH
21532: LD_INT 8
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: LIST
21539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
21540: LD_VAR 0 6
21544: PPUSH
21545: CALL_OW 264
21549: PUSH
21550: LD_INT 5
21552: PUSH
21553: LD_INT 27
21555: PUSH
21556: LD_INT 44
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: LIST
21563: IN
21564: IFFALSE 21585
// points := [ 14 , 50 , 16 ] ;
21566: LD_ADDR_VAR 0 9
21570: PUSH
21571: LD_INT 14
21573: PUSH
21574: LD_INT 50
21576: PUSH
21577: LD_INT 16
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: LIST
21584: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
21585: LD_VAR 0 6
21589: PPUSH
21590: CALL_OW 264
21594: PUSH
21595: LD_INT 6
21597: PUSH
21598: LD_INT 46
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: IN
21605: IFFALSE 21626
// points := [ 32 , 120 , 70 ] ;
21607: LD_ADDR_VAR 0 9
21611: PUSH
21612: LD_INT 32
21614: PUSH
21615: LD_INT 120
21617: PUSH
21618: LD_INT 70
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: LIST
21625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
21626: LD_VAR 0 6
21630: PPUSH
21631: CALL_OW 264
21635: PUSH
21636: LD_INT 7
21638: PUSH
21639: LD_INT 28
21641: PUSH
21642: LD_INT 45
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: LIST
21649: IN
21650: IFFALSE 21671
// points := [ 35 , 20 , 45 ] ;
21652: LD_ADDR_VAR 0 9
21656: PUSH
21657: LD_INT 35
21659: PUSH
21660: LD_INT 20
21662: PUSH
21663: LD_INT 45
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
21671: LD_VAR 0 6
21675: PPUSH
21676: CALL_OW 264
21680: PUSH
21681: LD_INT 47
21683: PUSH
21684: EMPTY
21685: LIST
21686: IN
21687: IFFALSE 21708
// points := [ 67 , 45 , 75 ] ;
21689: LD_ADDR_VAR 0 9
21693: PUSH
21694: LD_INT 67
21696: PUSH
21697: LD_INT 45
21699: PUSH
21700: LD_INT 75
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: LIST
21707: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
21708: LD_VAR 0 6
21712: PPUSH
21713: CALL_OW 264
21717: PUSH
21718: LD_INT 26
21720: PUSH
21721: EMPTY
21722: LIST
21723: IN
21724: IFFALSE 21745
// points := [ 120 , 30 , 80 ] ;
21726: LD_ADDR_VAR 0 9
21730: PUSH
21731: LD_INT 120
21733: PUSH
21734: LD_INT 30
21736: PUSH
21737: LD_INT 80
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: LIST
21744: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
21745: LD_VAR 0 6
21749: PPUSH
21750: CALL_OW 264
21754: PUSH
21755: LD_INT 22
21757: PUSH
21758: EMPTY
21759: LIST
21760: IN
21761: IFFALSE 21782
// points := [ 40 , 1 , 1 ] ;
21763: LD_ADDR_VAR 0 9
21767: PUSH
21768: LD_INT 40
21770: PUSH
21771: LD_INT 1
21773: PUSH
21774: LD_INT 1
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: LIST
21781: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
21782: LD_VAR 0 6
21786: PPUSH
21787: CALL_OW 264
21791: PUSH
21792: LD_INT 29
21794: PUSH
21795: EMPTY
21796: LIST
21797: IN
21798: IFFALSE 21819
// points := [ 70 , 200 , 400 ] ;
21800: LD_ADDR_VAR 0 9
21804: PUSH
21805: LD_INT 70
21807: PUSH
21808: LD_INT 200
21810: PUSH
21811: LD_INT 400
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: LIST
21818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
21819: LD_VAR 0 6
21823: PPUSH
21824: CALL_OW 264
21828: PUSH
21829: LD_INT 14
21831: PUSH
21832: LD_INT 53
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: IN
21839: IFFALSE 21860
// points := [ 40 , 10 , 20 ] ;
21841: LD_ADDR_VAR 0 9
21845: PUSH
21846: LD_INT 40
21848: PUSH
21849: LD_INT 10
21851: PUSH
21852: LD_INT 20
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: LIST
21859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
21860: LD_VAR 0 6
21864: PPUSH
21865: CALL_OW 264
21869: PUSH
21870: LD_INT 9
21872: PUSH
21873: EMPTY
21874: LIST
21875: IN
21876: IFFALSE 21897
// points := [ 5 , 70 , 20 ] ;
21878: LD_ADDR_VAR 0 9
21882: PUSH
21883: LD_INT 5
21885: PUSH
21886: LD_INT 70
21888: PUSH
21889: LD_INT 20
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: LIST
21896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
21897: LD_VAR 0 6
21901: PPUSH
21902: CALL_OW 264
21906: PUSH
21907: LD_INT 10
21909: PUSH
21910: EMPTY
21911: LIST
21912: IN
21913: IFFALSE 21934
// points := [ 35 , 110 , 70 ] ;
21915: LD_ADDR_VAR 0 9
21919: PUSH
21920: LD_INT 35
21922: PUSH
21923: LD_INT 110
21925: PUSH
21926: LD_INT 70
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: LIST
21933: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
21934: LD_VAR 0 6
21938: PPUSH
21939: CALL_OW 265
21943: PUSH
21944: LD_INT 25
21946: EQUAL
21947: IFFALSE 21968
// points := [ 80 , 65 , 100 ] ;
21949: LD_ADDR_VAR 0 9
21953: PUSH
21954: LD_INT 80
21956: PUSH
21957: LD_INT 65
21959: PUSH
21960: LD_INT 100
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: LIST
21967: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
21968: LD_VAR 0 6
21972: PPUSH
21973: CALL_OW 263
21977: PUSH
21978: LD_INT 1
21980: EQUAL
21981: IFFALSE 22016
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
21983: LD_ADDR_VAR 0 10
21987: PUSH
21988: LD_VAR 0 10
21992: PUSH
21993: LD_VAR 0 6
21997: PPUSH
21998: CALL_OW 311
22002: PPUSH
22003: LD_INT 3
22005: PPUSH
22006: CALL_OW 259
22010: PUSH
22011: LD_INT 4
22013: MUL
22014: MUL
22015: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22016: LD_VAR 0 6
22020: PPUSH
22021: CALL_OW 263
22025: PUSH
22026: LD_INT 2
22028: EQUAL
22029: IFFALSE 22080
// begin j := IsControledBy ( i ) ;
22031: LD_ADDR_VAR 0 7
22035: PUSH
22036: LD_VAR 0 6
22040: PPUSH
22041: CALL_OW 312
22045: ST_TO_ADDR
// if j then
22046: LD_VAR 0 7
22050: IFFALSE 22080
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22052: LD_ADDR_VAR 0 10
22056: PUSH
22057: LD_VAR 0 10
22061: PUSH
22062: LD_VAR 0 7
22066: PPUSH
22067: LD_INT 3
22069: PPUSH
22070: CALL_OW 259
22074: PUSH
22075: LD_INT 3
22077: MUL
22078: MUL
22079: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22080: LD_VAR 0 6
22084: PPUSH
22085: CALL_OW 264
22089: PUSH
22090: LD_INT 5
22092: PUSH
22093: LD_INT 6
22095: PUSH
22096: LD_INT 46
22098: PUSH
22099: LD_INT 44
22101: PUSH
22102: LD_INT 47
22104: PUSH
22105: LD_INT 45
22107: PUSH
22108: LD_INT 28
22110: PUSH
22111: LD_INT 7
22113: PUSH
22114: LD_INT 27
22116: PUSH
22117: LD_INT 29
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: IN
22132: PUSH
22133: LD_VAR 0 1
22137: PPUSH
22138: LD_INT 52
22140: PPUSH
22141: CALL_OW 321
22145: PUSH
22146: LD_INT 2
22148: EQUAL
22149: AND
22150: IFFALSE 22167
// bpoints := bpoints * 1.2 ;
22152: LD_ADDR_VAR 0 10
22156: PUSH
22157: LD_VAR 0 10
22161: PUSH
22162: LD_REAL  1.20000000000000E+0000
22165: MUL
22166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22167: LD_VAR 0 6
22171: PPUSH
22172: CALL_OW 264
22176: PUSH
22177: LD_INT 6
22179: PUSH
22180: LD_INT 46
22182: PUSH
22183: LD_INT 47
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: LIST
22190: IN
22191: IFFALSE 22208
// bpoints := bpoints * 1.2 ;
22193: LD_ADDR_VAR 0 10
22197: PUSH
22198: LD_VAR 0 10
22202: PUSH
22203: LD_REAL  1.20000000000000E+0000
22206: MUL
22207: ST_TO_ADDR
// end ; unit_building :
22208: GO 22222
22210: LD_INT 3
22212: DOUBLE
22213: EQUAL
22214: IFTRUE 22218
22216: GO 22221
22218: POP
// ; end ;
22219: GO 22222
22221: POP
// for j = 1 to 3 do
22222: LD_ADDR_VAR 0 7
22226: PUSH
22227: DOUBLE
22228: LD_INT 1
22230: DEC
22231: ST_TO_ADDR
22232: LD_INT 3
22234: PUSH
22235: FOR_TO
22236: IFFALSE 22289
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22238: LD_ADDR_VAR 0 5
22242: PUSH
22243: LD_VAR 0 5
22247: PPUSH
22248: LD_VAR 0 7
22252: PPUSH
22253: LD_VAR 0 5
22257: PUSH
22258: LD_VAR 0 7
22262: ARRAY
22263: PUSH
22264: LD_VAR 0 9
22268: PUSH
22269: LD_VAR 0 7
22273: ARRAY
22274: PUSH
22275: LD_VAR 0 10
22279: MUL
22280: PLUS
22281: PPUSH
22282: CALL_OW 1
22286: ST_TO_ADDR
22287: GO 22235
22289: POP
22290: POP
// end ;
22291: GO 20774
22293: POP
22294: POP
// result := Replace ( result , 4 , tmp ) ;
22295: LD_ADDR_VAR 0 5
22299: PUSH
22300: LD_VAR 0 5
22304: PPUSH
22305: LD_INT 4
22307: PPUSH
22308: LD_VAR 0 8
22312: PPUSH
22313: CALL_OW 1
22317: ST_TO_ADDR
// end ;
22318: LD_VAR 0 5
22322: RET
// export function DangerAtRange ( unit , range ) ; begin
22323: LD_INT 0
22325: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22326: LD_ADDR_VAR 0 3
22330: PUSH
22331: LD_VAR 0 1
22335: PPUSH
22336: CALL_OW 255
22340: PPUSH
22341: LD_VAR 0 1
22345: PPUSH
22346: CALL_OW 250
22350: PPUSH
22351: LD_VAR 0 1
22355: PPUSH
22356: CALL_OW 251
22360: PPUSH
22361: LD_VAR 0 2
22365: PPUSH
22366: CALL 20626 0 4
22370: ST_TO_ADDR
// end ;
22371: LD_VAR 0 3
22375: RET
// export function IsExtension ( b ) ; begin
22376: LD_INT 0
22378: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22379: LD_ADDR_VAR 0 2
22383: PUSH
22384: LD_VAR 0 1
22388: PPUSH
22389: CALL_OW 266
22393: PUSH
22394: LD_INT 23
22396: PUSH
22397: LD_INT 20
22399: PUSH
22400: LD_INT 22
22402: PUSH
22403: LD_INT 17
22405: PUSH
22406: LD_INT 24
22408: PUSH
22409: LD_INT 21
22411: PUSH
22412: LD_INT 19
22414: PUSH
22415: LD_INT 16
22417: PUSH
22418: LD_INT 25
22420: PUSH
22421: LD_INT 18
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: IN
22436: ST_TO_ADDR
// end ;
22437: LD_VAR 0 2
22441: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
22442: LD_INT 0
22444: PPUSH
22445: PPUSH
22446: PPUSH
// result := [ ] ;
22447: LD_ADDR_VAR 0 2
22451: PUSH
22452: EMPTY
22453: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
22454: LD_ADDR_VAR 0 3
22458: PUSH
22459: LD_INT 21
22461: PUSH
22462: LD_INT 3
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PPUSH
22469: CALL_OW 69
22473: ST_TO_ADDR
// if not tmp then
22474: LD_VAR 0 3
22478: NOT
22479: IFFALSE 22483
// exit ;
22481: GO 22533
// for i in tmp do
22483: LD_ADDR_VAR 0 4
22487: PUSH
22488: LD_VAR 0 3
22492: PUSH
22493: FOR_IN
22494: IFFALSE 22531
// if GetBase ( i ) = base then
22496: LD_VAR 0 4
22500: PPUSH
22501: CALL_OW 274
22505: PUSH
22506: LD_VAR 0 1
22510: EQUAL
22511: IFFALSE 22529
// result := result ^ i ;
22513: LD_ADDR_VAR 0 2
22517: PUSH
22518: LD_VAR 0 2
22522: PUSH
22523: LD_VAR 0 4
22527: ADD
22528: ST_TO_ADDR
22529: GO 22493
22531: POP
22532: POP
// end ;
22533: LD_VAR 0 2
22537: RET
// export function ComComplete ( unit , b ) ; var i ; begin
22538: LD_INT 0
22540: PPUSH
22541: PPUSH
// if BuildingStatus ( b ) = bs_build then
22542: LD_VAR 0 2
22546: PPUSH
22547: CALL_OW 461
22551: PUSH
22552: LD_INT 1
22554: EQUAL
22555: IFFALSE 22615
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
22557: LD_VAR 0 1
22561: PPUSH
22562: LD_STRING h
22564: PUSH
22565: LD_VAR 0 2
22569: PPUSH
22570: CALL_OW 250
22574: PUSH
22575: LD_VAR 0 2
22579: PPUSH
22580: CALL_OW 251
22584: PUSH
22585: LD_VAR 0 2
22589: PUSH
22590: LD_INT 0
22592: PUSH
22593: LD_INT 0
22595: PUSH
22596: LD_INT 0
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: PUSH
22608: EMPTY
22609: LIST
22610: PPUSH
22611: CALL_OW 446
// end ;
22615: LD_VAR 0 3
22619: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
22620: LD_INT 0
22622: PPUSH
22623: PPUSH
22624: PPUSH
22625: PPUSH
22626: PPUSH
22627: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
22628: LD_VAR 0 1
22632: NOT
22633: PUSH
22634: LD_VAR 0 1
22638: PPUSH
22639: CALL_OW 263
22643: PUSH
22644: LD_INT 2
22646: EQUAL
22647: NOT
22648: OR
22649: IFFALSE 22653
// exit ;
22651: GO 22969
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
22653: LD_ADDR_VAR 0 6
22657: PUSH
22658: LD_INT 22
22660: PUSH
22661: LD_VAR 0 1
22665: PPUSH
22666: CALL_OW 255
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 2
22677: PUSH
22678: LD_INT 30
22680: PUSH
22681: LD_INT 36
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 34
22690: PUSH
22691: LD_INT 31
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: LIST
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PPUSH
22707: CALL_OW 69
22711: ST_TO_ADDR
// if not tmp then
22712: LD_VAR 0 6
22716: NOT
22717: IFFALSE 22721
// exit ;
22719: GO 22969
// result := [ ] ;
22721: LD_ADDR_VAR 0 2
22725: PUSH
22726: EMPTY
22727: ST_TO_ADDR
// for i in tmp do
22728: LD_ADDR_VAR 0 3
22732: PUSH
22733: LD_VAR 0 6
22737: PUSH
22738: FOR_IN
22739: IFFALSE 22810
// begin t := UnitsInside ( i ) ;
22741: LD_ADDR_VAR 0 4
22745: PUSH
22746: LD_VAR 0 3
22750: PPUSH
22751: CALL_OW 313
22755: ST_TO_ADDR
// if t then
22756: LD_VAR 0 4
22760: IFFALSE 22808
// for j in t do
22762: LD_ADDR_VAR 0 7
22766: PUSH
22767: LD_VAR 0 4
22771: PUSH
22772: FOR_IN
22773: IFFALSE 22806
// result := Insert ( result , result + 1 , j ) ;
22775: LD_ADDR_VAR 0 2
22779: PUSH
22780: LD_VAR 0 2
22784: PPUSH
22785: LD_VAR 0 2
22789: PUSH
22790: LD_INT 1
22792: PLUS
22793: PPUSH
22794: LD_VAR 0 7
22798: PPUSH
22799: CALL_OW 2
22803: ST_TO_ADDR
22804: GO 22772
22806: POP
22807: POP
// end ;
22808: GO 22738
22810: POP
22811: POP
// if not result then
22812: LD_VAR 0 2
22816: NOT
22817: IFFALSE 22821
// exit ;
22819: GO 22969
// mech := result [ 1 ] ;
22821: LD_ADDR_VAR 0 5
22825: PUSH
22826: LD_VAR 0 2
22830: PUSH
22831: LD_INT 1
22833: ARRAY
22834: ST_TO_ADDR
// if result > 1 then
22835: LD_VAR 0 2
22839: PUSH
22840: LD_INT 1
22842: GREATER
22843: IFFALSE 22955
// for i = 2 to result do
22845: LD_ADDR_VAR 0 3
22849: PUSH
22850: DOUBLE
22851: LD_INT 2
22853: DEC
22854: ST_TO_ADDR
22855: LD_VAR 0 2
22859: PUSH
22860: FOR_TO
22861: IFFALSE 22953
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
22863: LD_ADDR_VAR 0 4
22867: PUSH
22868: LD_VAR 0 2
22872: PUSH
22873: LD_VAR 0 3
22877: ARRAY
22878: PPUSH
22879: LD_INT 3
22881: PPUSH
22882: CALL_OW 259
22886: PUSH
22887: LD_VAR 0 2
22891: PUSH
22892: LD_VAR 0 3
22896: ARRAY
22897: PPUSH
22898: CALL_OW 432
22902: MINUS
22903: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
22904: LD_VAR 0 4
22908: PUSH
22909: LD_VAR 0 5
22913: PPUSH
22914: LD_INT 3
22916: PPUSH
22917: CALL_OW 259
22921: PUSH
22922: LD_VAR 0 5
22926: PPUSH
22927: CALL_OW 432
22931: MINUS
22932: GREATEREQUAL
22933: IFFALSE 22951
// mech := result [ i ] ;
22935: LD_ADDR_VAR 0 5
22939: PUSH
22940: LD_VAR 0 2
22944: PUSH
22945: LD_VAR 0 3
22949: ARRAY
22950: ST_TO_ADDR
// end ;
22951: GO 22860
22953: POP
22954: POP
// ComLinkTo ( vehicle , mech ) ;
22955: LD_VAR 0 1
22959: PPUSH
22960: LD_VAR 0 5
22964: PPUSH
22965: CALL_OW 135
// end ;
22969: LD_VAR 0 2
22973: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
22974: LD_INT 0
22976: PPUSH
22977: PPUSH
22978: PPUSH
22979: PPUSH
22980: PPUSH
22981: PPUSH
22982: PPUSH
22983: PPUSH
22984: PPUSH
22985: PPUSH
22986: PPUSH
22987: PPUSH
// result := [ ] ;
22988: LD_ADDR_VAR 0 6
22992: PUSH
22993: EMPTY
22994: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
22995: LD_VAR 0 1
22999: PPUSH
23000: CALL_OW 266
23004: PUSH
23005: LD_INT 0
23007: PUSH
23008: LD_INT 1
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: IN
23015: NOT
23016: IFFALSE 23020
// exit ;
23018: GO 24420
// if name then
23020: LD_VAR 0 2
23024: IFFALSE 23040
// SetBName ( base_dep , name ) ;
23026: LD_VAR 0 1
23030: PPUSH
23031: LD_VAR 0 2
23035: PPUSH
23036: CALL_OW 500
// base := GetBase ( base_dep ) ;
23040: LD_ADDR_VAR 0 14
23044: PUSH
23045: LD_VAR 0 1
23049: PPUSH
23050: CALL_OW 274
23054: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23055: LD_ADDR_VAR 0 15
23059: PUSH
23060: LD_VAR 0 1
23064: PPUSH
23065: CALL_OW 255
23069: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23070: LD_ADDR_VAR 0 16
23074: PUSH
23075: LD_VAR 0 1
23079: PPUSH
23080: CALL_OW 248
23084: ST_TO_ADDR
// if sources then
23085: LD_VAR 0 4
23089: IFFALSE 23136
// for i = 1 to 3 do
23091: LD_ADDR_VAR 0 7
23095: PUSH
23096: DOUBLE
23097: LD_INT 1
23099: DEC
23100: ST_TO_ADDR
23101: LD_INT 3
23103: PUSH
23104: FOR_TO
23105: IFFALSE 23134
// AddResourceType ( base , i , sources [ i ] ) ;
23107: LD_VAR 0 14
23111: PPUSH
23112: LD_VAR 0 7
23116: PPUSH
23117: LD_VAR 0 4
23121: PUSH
23122: LD_VAR 0 7
23126: ARRAY
23127: PPUSH
23128: CALL_OW 276
23132: GO 23104
23134: POP
23135: POP
// buildings := GetBaseBuildings ( base ) ;
23136: LD_ADDR_VAR 0 17
23140: PUSH
23141: LD_VAR 0 14
23145: PPUSH
23146: CALL 22442 0 1
23150: ST_TO_ADDR
// InitHc ;
23151: CALL_OW 19
// InitUc ;
23155: CALL_OW 18
// uc_side := side ;
23159: LD_ADDR_OWVAR 20
23163: PUSH
23164: LD_VAR 0 15
23168: ST_TO_ADDR
// uc_nation := nation ;
23169: LD_ADDR_OWVAR 21
23173: PUSH
23174: LD_VAR 0 16
23178: ST_TO_ADDR
// if buildings then
23179: LD_VAR 0 17
23183: IFFALSE 24279
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23185: LD_VAR 0 17
23189: PPUSH
23190: LD_INT 2
23192: PUSH
23193: LD_INT 30
23195: PUSH
23196: LD_INT 32
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 30
23205: PUSH
23206: LD_INT 33
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: LIST
23217: PPUSH
23218: CALL_OW 72
23222: IFFALSE 23305
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23224: LD_ADDR_VAR 0 7
23228: PUSH
23229: LD_VAR 0 17
23233: PPUSH
23234: LD_INT 2
23236: PUSH
23237: LD_INT 30
23239: PUSH
23240: LD_INT 32
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 30
23249: PUSH
23250: LD_INT 33
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: LIST
23261: PPUSH
23262: CALL_OW 72
23266: PUSH
23267: FOR_IN
23268: IFFALSE 23303
// begin if not GetBWeapon ( i ) then
23270: LD_VAR 0 7
23274: PPUSH
23275: CALL_OW 269
23279: NOT
23280: IFFALSE 23301
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
23282: LD_VAR 0 7
23286: PPUSH
23287: LD_VAR 0 7
23291: PPUSH
23292: CALL 24425 0 1
23296: PPUSH
23297: CALL_OW 431
// end ;
23301: GO 23267
23303: POP
23304: POP
// end ; for i = 1 to personel do
23305: LD_ADDR_VAR 0 7
23309: PUSH
23310: DOUBLE
23311: LD_INT 1
23313: DEC
23314: ST_TO_ADDR
23315: LD_VAR 0 5
23319: PUSH
23320: FOR_TO
23321: IFFALSE 24259
// begin if i > 4 then
23323: LD_VAR 0 7
23327: PUSH
23328: LD_INT 4
23330: GREATER
23331: IFFALSE 23335
// break ;
23333: GO 24259
// case i of 1 :
23335: LD_VAR 0 7
23339: PUSH
23340: LD_INT 1
23342: DOUBLE
23343: EQUAL
23344: IFTRUE 23348
23346: GO 23421
23348: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
23349: LD_ADDR_VAR 0 11
23353: PUSH
23354: LD_VAR 0 17
23358: PPUSH
23359: LD_INT 22
23361: PUSH
23362: LD_VAR 0 15
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 2
23373: PUSH
23374: LD_INT 30
23376: PUSH
23377: LD_INT 32
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 30
23386: PUSH
23387: LD_INT 4
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 30
23396: PUSH
23397: LD_INT 5
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PPUSH
23414: CALL_OW 72
23418: ST_TO_ADDR
23419: GO 23643
23421: LD_INT 2
23423: DOUBLE
23424: EQUAL
23425: IFTRUE 23429
23427: GO 23491
23429: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
23430: LD_ADDR_VAR 0 11
23434: PUSH
23435: LD_VAR 0 17
23439: PPUSH
23440: LD_INT 22
23442: PUSH
23443: LD_VAR 0 15
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 2
23454: PUSH
23455: LD_INT 30
23457: PUSH
23458: LD_INT 0
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 30
23467: PUSH
23468: LD_INT 1
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: LIST
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PPUSH
23484: CALL_OW 72
23488: ST_TO_ADDR
23489: GO 23643
23491: LD_INT 3
23493: DOUBLE
23494: EQUAL
23495: IFTRUE 23499
23497: GO 23561
23499: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
23500: LD_ADDR_VAR 0 11
23504: PUSH
23505: LD_VAR 0 17
23509: PPUSH
23510: LD_INT 22
23512: PUSH
23513: LD_VAR 0 15
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 2
23524: PUSH
23525: LD_INT 30
23527: PUSH
23528: LD_INT 2
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 30
23537: PUSH
23538: LD_INT 3
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: LIST
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PPUSH
23554: CALL_OW 72
23558: ST_TO_ADDR
23559: GO 23643
23561: LD_INT 4
23563: DOUBLE
23564: EQUAL
23565: IFTRUE 23569
23567: GO 23642
23569: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
23570: LD_ADDR_VAR 0 11
23574: PUSH
23575: LD_VAR 0 17
23579: PPUSH
23580: LD_INT 22
23582: PUSH
23583: LD_VAR 0 15
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 2
23594: PUSH
23595: LD_INT 30
23597: PUSH
23598: LD_INT 6
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 30
23607: PUSH
23608: LD_INT 7
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 30
23617: PUSH
23618: LD_INT 8
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PPUSH
23635: CALL_OW 72
23639: ST_TO_ADDR
23640: GO 23643
23642: POP
// x := personel [ i ] ;
23643: LD_ADDR_VAR 0 12
23647: PUSH
23648: LD_VAR 0 5
23652: PUSH
23653: LD_VAR 0 7
23657: ARRAY
23658: ST_TO_ADDR
// if x = - 1 then
23659: LD_VAR 0 12
23663: PUSH
23664: LD_INT 1
23666: NEG
23667: EQUAL
23668: IFFALSE 23877
// begin for j in f do
23670: LD_ADDR_VAR 0 8
23674: PUSH
23675: LD_VAR 0 11
23679: PUSH
23680: FOR_IN
23681: IFFALSE 23873
// repeat InitHc ;
23683: CALL_OW 19
// if GetBType ( j ) = b_barracks then
23687: LD_VAR 0 8
23691: PPUSH
23692: CALL_OW 266
23696: PUSH
23697: LD_INT 5
23699: EQUAL
23700: IFFALSE 23770
// begin if UnitsInside ( j ) < 3 then
23702: LD_VAR 0 8
23706: PPUSH
23707: CALL_OW 313
23711: PUSH
23712: LD_INT 3
23714: LESS
23715: IFFALSE 23751
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23717: LD_INT 0
23719: PPUSH
23720: LD_INT 5
23722: PUSH
23723: LD_INT 8
23725: PUSH
23726: LD_INT 9
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: LIST
23733: PUSH
23734: LD_VAR 0 16
23738: ARRAY
23739: PPUSH
23740: LD_VAR 0 3
23744: PPUSH
23745: CALL_OW 380
23749: GO 23768
// PrepareHuman ( false , i , skill ) ;
23751: LD_INT 0
23753: PPUSH
23754: LD_VAR 0 7
23758: PPUSH
23759: LD_VAR 0 3
23763: PPUSH
23764: CALL_OW 380
// end else
23768: GO 23787
// PrepareHuman ( false , i , skill ) ;
23770: LD_INT 0
23772: PPUSH
23773: LD_VAR 0 7
23777: PPUSH
23778: LD_VAR 0 3
23782: PPUSH
23783: CALL_OW 380
// un := CreateHuman ;
23787: LD_ADDR_VAR 0 13
23791: PUSH
23792: CALL_OW 44
23796: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23797: LD_ADDR_VAR 0 6
23801: PUSH
23802: LD_VAR 0 6
23806: PPUSH
23807: LD_INT 1
23809: PPUSH
23810: LD_VAR 0 13
23814: PPUSH
23815: CALL_OW 2
23819: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
23820: LD_VAR 0 13
23824: PPUSH
23825: LD_VAR 0 8
23829: PPUSH
23830: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
23834: LD_VAR 0 8
23838: PPUSH
23839: CALL_OW 313
23843: PUSH
23844: LD_INT 6
23846: EQUAL
23847: PUSH
23848: LD_VAR 0 8
23852: PPUSH
23853: CALL_OW 266
23857: PUSH
23858: LD_INT 32
23860: PUSH
23861: LD_INT 31
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: IN
23868: OR
23869: IFFALSE 23683
23871: GO 23680
23873: POP
23874: POP
// end else
23875: GO 24257
// for j = 1 to x do
23877: LD_ADDR_VAR 0 8
23881: PUSH
23882: DOUBLE
23883: LD_INT 1
23885: DEC
23886: ST_TO_ADDR
23887: LD_VAR 0 12
23891: PUSH
23892: FOR_TO
23893: IFFALSE 24255
// begin InitHc ;
23895: CALL_OW 19
// if not f then
23899: LD_VAR 0 11
23903: NOT
23904: IFFALSE 23993
// begin PrepareHuman ( false , i , skill ) ;
23906: LD_INT 0
23908: PPUSH
23909: LD_VAR 0 7
23913: PPUSH
23914: LD_VAR 0 3
23918: PPUSH
23919: CALL_OW 380
// un := CreateHuman ;
23923: LD_ADDR_VAR 0 13
23927: PUSH
23928: CALL_OW 44
23932: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23933: LD_ADDR_VAR 0 6
23937: PUSH
23938: LD_VAR 0 6
23942: PPUSH
23943: LD_INT 1
23945: PPUSH
23946: LD_VAR 0 13
23950: PPUSH
23951: CALL_OW 2
23955: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23956: LD_VAR 0 13
23960: PPUSH
23961: LD_VAR 0 1
23965: PPUSH
23966: CALL_OW 250
23970: PPUSH
23971: LD_VAR 0 1
23975: PPUSH
23976: CALL_OW 251
23980: PPUSH
23981: LD_INT 10
23983: PPUSH
23984: LD_INT 0
23986: PPUSH
23987: CALL_OW 50
// continue ;
23991: GO 23892
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
23993: LD_VAR 0 11
23997: PUSH
23998: LD_INT 1
24000: ARRAY
24001: PPUSH
24002: CALL_OW 313
24006: PUSH
24007: LD_VAR 0 11
24011: PUSH
24012: LD_INT 1
24014: ARRAY
24015: PPUSH
24016: CALL_OW 266
24020: PUSH
24021: LD_INT 32
24023: PUSH
24024: LD_INT 31
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: IN
24031: AND
24032: PUSH
24033: LD_VAR 0 11
24037: PUSH
24038: LD_INT 1
24040: ARRAY
24041: PPUSH
24042: CALL_OW 313
24046: PUSH
24047: LD_INT 6
24049: EQUAL
24050: OR
24051: IFFALSE 24071
// f := Delete ( f , 1 ) ;
24053: LD_ADDR_VAR 0 11
24057: PUSH
24058: LD_VAR 0 11
24062: PPUSH
24063: LD_INT 1
24065: PPUSH
24066: CALL_OW 3
24070: ST_TO_ADDR
// if not f then
24071: LD_VAR 0 11
24075: NOT
24076: IFFALSE 24094
// begin x := x + 2 ;
24078: LD_ADDR_VAR 0 12
24082: PUSH
24083: LD_VAR 0 12
24087: PUSH
24088: LD_INT 2
24090: PLUS
24091: ST_TO_ADDR
// continue ;
24092: GO 23892
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24094: LD_VAR 0 11
24098: PUSH
24099: LD_INT 1
24101: ARRAY
24102: PPUSH
24103: CALL_OW 266
24107: PUSH
24108: LD_INT 5
24110: EQUAL
24111: IFFALSE 24185
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24113: LD_VAR 0 11
24117: PUSH
24118: LD_INT 1
24120: ARRAY
24121: PPUSH
24122: CALL_OW 313
24126: PUSH
24127: LD_INT 3
24129: LESS
24130: IFFALSE 24166
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24132: LD_INT 0
24134: PPUSH
24135: LD_INT 5
24137: PUSH
24138: LD_INT 8
24140: PUSH
24141: LD_INT 9
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: LIST
24148: PUSH
24149: LD_VAR 0 16
24153: ARRAY
24154: PPUSH
24155: LD_VAR 0 3
24159: PPUSH
24160: CALL_OW 380
24164: GO 24183
// PrepareHuman ( false , i , skill ) ;
24166: LD_INT 0
24168: PPUSH
24169: LD_VAR 0 7
24173: PPUSH
24174: LD_VAR 0 3
24178: PPUSH
24179: CALL_OW 380
// end else
24183: GO 24202
// PrepareHuman ( false , i , skill ) ;
24185: LD_INT 0
24187: PPUSH
24188: LD_VAR 0 7
24192: PPUSH
24193: LD_VAR 0 3
24197: PPUSH
24198: CALL_OW 380
// un := CreateHuman ;
24202: LD_ADDR_VAR 0 13
24206: PUSH
24207: CALL_OW 44
24211: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24212: LD_ADDR_VAR 0 6
24216: PUSH
24217: LD_VAR 0 6
24221: PPUSH
24222: LD_INT 1
24224: PPUSH
24225: LD_VAR 0 13
24229: PPUSH
24230: CALL_OW 2
24234: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
24235: LD_VAR 0 13
24239: PPUSH
24240: LD_VAR 0 11
24244: PUSH
24245: LD_INT 1
24247: ARRAY
24248: PPUSH
24249: CALL_OW 52
// end ;
24253: GO 23892
24255: POP
24256: POP
// end ;
24257: GO 23320
24259: POP
24260: POP
// result := result ^ buildings ;
24261: LD_ADDR_VAR 0 6
24265: PUSH
24266: LD_VAR 0 6
24270: PUSH
24271: LD_VAR 0 17
24275: ADD
24276: ST_TO_ADDR
// end else
24277: GO 24420
// begin for i = 1 to personel do
24279: LD_ADDR_VAR 0 7
24283: PUSH
24284: DOUBLE
24285: LD_INT 1
24287: DEC
24288: ST_TO_ADDR
24289: LD_VAR 0 5
24293: PUSH
24294: FOR_TO
24295: IFFALSE 24418
// begin if i > 4 then
24297: LD_VAR 0 7
24301: PUSH
24302: LD_INT 4
24304: GREATER
24305: IFFALSE 24309
// break ;
24307: GO 24418
// x := personel [ i ] ;
24309: LD_ADDR_VAR 0 12
24313: PUSH
24314: LD_VAR 0 5
24318: PUSH
24319: LD_VAR 0 7
24323: ARRAY
24324: ST_TO_ADDR
// if x = - 1 then
24325: LD_VAR 0 12
24329: PUSH
24330: LD_INT 1
24332: NEG
24333: EQUAL
24334: IFFALSE 24338
// continue ;
24336: GO 24294
// PrepareHuman ( false , i , skill ) ;
24338: LD_INT 0
24340: PPUSH
24341: LD_VAR 0 7
24345: PPUSH
24346: LD_VAR 0 3
24350: PPUSH
24351: CALL_OW 380
// un := CreateHuman ;
24355: LD_ADDR_VAR 0 13
24359: PUSH
24360: CALL_OW 44
24364: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24365: LD_VAR 0 13
24369: PPUSH
24370: LD_VAR 0 1
24374: PPUSH
24375: CALL_OW 250
24379: PPUSH
24380: LD_VAR 0 1
24384: PPUSH
24385: CALL_OW 251
24389: PPUSH
24390: LD_INT 10
24392: PPUSH
24393: LD_INT 0
24395: PPUSH
24396: CALL_OW 50
// result := result ^ un ;
24400: LD_ADDR_VAR 0 6
24404: PUSH
24405: LD_VAR 0 6
24409: PUSH
24410: LD_VAR 0 13
24414: ADD
24415: ST_TO_ADDR
// end ;
24416: GO 24294
24418: POP
24419: POP
// end ; end ;
24420: LD_VAR 0 6
24424: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
24425: LD_INT 0
24427: PPUSH
24428: PPUSH
24429: PPUSH
24430: PPUSH
24431: PPUSH
24432: PPUSH
24433: PPUSH
24434: PPUSH
24435: PPUSH
24436: PPUSH
24437: PPUSH
24438: PPUSH
24439: PPUSH
24440: PPUSH
24441: PPUSH
24442: PPUSH
// result := false ;
24443: LD_ADDR_VAR 0 2
24447: PUSH
24448: LD_INT 0
24450: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
24451: LD_VAR 0 1
24455: NOT
24456: PUSH
24457: LD_VAR 0 1
24461: PPUSH
24462: CALL_OW 266
24466: PUSH
24467: LD_INT 32
24469: PUSH
24470: LD_INT 33
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: IN
24477: NOT
24478: OR
24479: IFFALSE 24483
// exit ;
24481: GO 25614
// nat := GetNation ( tower ) ;
24483: LD_ADDR_VAR 0 11
24487: PUSH
24488: LD_VAR 0 1
24492: PPUSH
24493: CALL_OW 248
24497: ST_TO_ADDR
// side := GetSide ( tower ) ;
24498: LD_ADDR_VAR 0 15
24502: PUSH
24503: LD_VAR 0 1
24507: PPUSH
24508: CALL_OW 255
24512: ST_TO_ADDR
// x := GetX ( tower ) ;
24513: LD_ADDR_VAR 0 9
24517: PUSH
24518: LD_VAR 0 1
24522: PPUSH
24523: CALL_OW 250
24527: ST_TO_ADDR
// y := GetY ( tower ) ;
24528: LD_ADDR_VAR 0 10
24532: PUSH
24533: LD_VAR 0 1
24537: PPUSH
24538: CALL_OW 251
24542: ST_TO_ADDR
// if not x or not y then
24543: LD_VAR 0 9
24547: NOT
24548: PUSH
24549: LD_VAR 0 10
24553: NOT
24554: OR
24555: IFFALSE 24559
// exit ;
24557: GO 25614
// weapon := 0 ;
24559: LD_ADDR_VAR 0 17
24563: PUSH
24564: LD_INT 0
24566: ST_TO_ADDR
// fac_list := [ ] ;
24567: LD_ADDR_VAR 0 16
24571: PUSH
24572: EMPTY
24573: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
24574: LD_ADDR_VAR 0 5
24578: PUSH
24579: LD_VAR 0 1
24583: PPUSH
24584: CALL_OW 274
24588: PPUSH
24589: CALL 22442 0 1
24593: PPUSH
24594: LD_INT 30
24596: PUSH
24597: LD_INT 3
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PPUSH
24604: CALL_OW 72
24608: ST_TO_ADDR
// if not factories then
24609: LD_VAR 0 5
24613: NOT
24614: IFFALSE 24618
// exit ;
24616: GO 25614
// for i in factories do
24618: LD_ADDR_VAR 0 7
24622: PUSH
24623: LD_VAR 0 5
24627: PUSH
24628: FOR_IN
24629: IFFALSE 24654
// fac_list := fac_list union AvailableWeaponList ( i ) ;
24631: LD_ADDR_VAR 0 16
24635: PUSH
24636: LD_VAR 0 16
24640: PUSH
24641: LD_VAR 0 7
24645: PPUSH
24646: CALL_OW 478
24650: UNION
24651: ST_TO_ADDR
24652: GO 24628
24654: POP
24655: POP
// if not fac_list then
24656: LD_VAR 0 16
24660: NOT
24661: IFFALSE 24665
// exit ;
24663: GO 25614
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
24665: LD_ADDR_VAR 0 4
24669: PUSH
24670: LD_INT 4
24672: PUSH
24673: LD_INT 5
24675: PUSH
24676: LD_INT 9
24678: PUSH
24679: LD_INT 10
24681: PUSH
24682: LD_INT 6
24684: PUSH
24685: LD_INT 7
24687: PUSH
24688: LD_INT 11
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 27
24702: PUSH
24703: LD_INT 28
24705: PUSH
24706: LD_INT 26
24708: PUSH
24709: LD_INT 30
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 43
24720: PUSH
24721: LD_INT 44
24723: PUSH
24724: LD_INT 46
24726: PUSH
24727: LD_INT 45
24729: PUSH
24730: LD_INT 47
24732: PUSH
24733: LD_INT 49
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: LIST
24748: PUSH
24749: LD_VAR 0 11
24753: ARRAY
24754: ST_TO_ADDR
// for i in list do
24755: LD_ADDR_VAR 0 7
24759: PUSH
24760: LD_VAR 0 4
24764: PUSH
24765: FOR_IN
24766: IFFALSE 24799
// if not i in fac_list then
24768: LD_VAR 0 7
24772: PUSH
24773: LD_VAR 0 16
24777: IN
24778: NOT
24779: IFFALSE 24797
// list := list diff i ;
24781: LD_ADDR_VAR 0 4
24785: PUSH
24786: LD_VAR 0 4
24790: PUSH
24791: LD_VAR 0 7
24795: DIFF
24796: ST_TO_ADDR
24797: GO 24765
24799: POP
24800: POP
// if not list then
24801: LD_VAR 0 4
24805: NOT
24806: IFFALSE 24810
// exit ;
24808: GO 25614
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
24810: LD_VAR 0 11
24814: PUSH
24815: LD_INT 3
24817: EQUAL
24818: PUSH
24819: LD_INT 49
24821: PUSH
24822: LD_VAR 0 4
24826: IN
24827: AND
24828: PUSH
24829: LD_INT 31
24831: PPUSH
24832: LD_VAR 0 15
24836: PPUSH
24837: CALL_OW 321
24841: PUSH
24842: LD_INT 2
24844: EQUAL
24845: AND
24846: IFFALSE 24906
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
24848: LD_INT 22
24850: PUSH
24851: LD_VAR 0 15
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 35
24862: PUSH
24863: LD_INT 49
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 91
24872: PUSH
24873: LD_VAR 0 1
24877: PUSH
24878: LD_INT 10
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: LIST
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: LIST
24890: PPUSH
24891: CALL_OW 69
24895: NOT
24896: IFFALSE 24906
// weapon := ru_time_lapser ;
24898: LD_ADDR_VAR 0 17
24902: PUSH
24903: LD_INT 49
24905: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
24906: LD_VAR 0 11
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: LD_INT 2
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: IN
24921: PUSH
24922: LD_INT 11
24924: PUSH
24925: LD_VAR 0 4
24929: IN
24930: PUSH
24931: LD_INT 30
24933: PUSH
24934: LD_VAR 0 4
24938: IN
24939: OR
24940: AND
24941: PUSH
24942: LD_INT 6
24944: PPUSH
24945: LD_VAR 0 15
24949: PPUSH
24950: CALL_OW 321
24954: PUSH
24955: LD_INT 2
24957: EQUAL
24958: AND
24959: IFFALSE 25124
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
24961: LD_INT 22
24963: PUSH
24964: LD_VAR 0 15
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 2
24975: PUSH
24976: LD_INT 35
24978: PUSH
24979: LD_INT 11
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 35
24988: PUSH
24989: LD_INT 30
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 91
25003: PUSH
25004: LD_VAR 0 1
25008: PUSH
25009: LD_INT 18
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: LIST
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: LIST
25021: PPUSH
25022: CALL_OW 69
25026: NOT
25027: PUSH
25028: LD_INT 22
25030: PUSH
25031: LD_VAR 0 15
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 2
25042: PUSH
25043: LD_INT 30
25045: PUSH
25046: LD_INT 32
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 30
25055: PUSH
25056: LD_INT 33
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 91
25070: PUSH
25071: LD_VAR 0 1
25075: PUSH
25076: LD_INT 12
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: LIST
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: PUSH
25089: EMPTY
25090: LIST
25091: PPUSH
25092: CALL_OW 69
25096: PUSH
25097: LD_INT 2
25099: GREATER
25100: AND
25101: IFFALSE 25124
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25103: LD_ADDR_VAR 0 17
25107: PUSH
25108: LD_INT 11
25110: PUSH
25111: LD_INT 30
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_VAR 0 11
25122: ARRAY
25123: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25124: LD_VAR 0 17
25128: NOT
25129: PUSH
25130: LD_INT 40
25132: PPUSH
25133: LD_VAR 0 15
25137: PPUSH
25138: CALL_OW 321
25142: PUSH
25143: LD_INT 2
25145: EQUAL
25146: AND
25147: PUSH
25148: LD_INT 7
25150: PUSH
25151: LD_VAR 0 4
25155: IN
25156: PUSH
25157: LD_INT 28
25159: PUSH
25160: LD_VAR 0 4
25164: IN
25165: OR
25166: PUSH
25167: LD_INT 45
25169: PUSH
25170: LD_VAR 0 4
25174: IN
25175: OR
25176: AND
25177: IFFALSE 25431
// begin hex := GetHexInfo ( x , y ) ;
25179: LD_ADDR_VAR 0 3
25183: PUSH
25184: LD_VAR 0 9
25188: PPUSH
25189: LD_VAR 0 10
25193: PPUSH
25194: CALL_OW 546
25198: ST_TO_ADDR
// if hex [ 1 ] then
25199: LD_VAR 0 3
25203: PUSH
25204: LD_INT 1
25206: ARRAY
25207: IFFALSE 25211
// exit ;
25209: GO 25614
// height := hex [ 2 ] ;
25211: LD_ADDR_VAR 0 14
25215: PUSH
25216: LD_VAR 0 3
25220: PUSH
25221: LD_INT 2
25223: ARRAY
25224: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
25225: LD_ADDR_VAR 0 13
25229: PUSH
25230: LD_INT 0
25232: PUSH
25233: LD_INT 2
25235: PUSH
25236: LD_INT 3
25238: PUSH
25239: LD_INT 5
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: ST_TO_ADDR
// for i in tmp do
25248: LD_ADDR_VAR 0 7
25252: PUSH
25253: LD_VAR 0 13
25257: PUSH
25258: FOR_IN
25259: IFFALSE 25429
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
25261: LD_ADDR_VAR 0 8
25265: PUSH
25266: LD_VAR 0 9
25270: PPUSH
25271: LD_VAR 0 7
25275: PPUSH
25276: LD_INT 5
25278: PPUSH
25279: CALL_OW 272
25283: PUSH
25284: LD_VAR 0 10
25288: PPUSH
25289: LD_VAR 0 7
25293: PPUSH
25294: LD_INT 5
25296: PPUSH
25297: CALL_OW 273
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
25306: LD_VAR 0 8
25310: PUSH
25311: LD_INT 1
25313: ARRAY
25314: PPUSH
25315: LD_VAR 0 8
25319: PUSH
25320: LD_INT 2
25322: ARRAY
25323: PPUSH
25324: CALL_OW 488
25328: IFFALSE 25427
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
25330: LD_ADDR_VAR 0 3
25334: PUSH
25335: LD_VAR 0 8
25339: PUSH
25340: LD_INT 1
25342: ARRAY
25343: PPUSH
25344: LD_VAR 0 8
25348: PUSH
25349: LD_INT 2
25351: ARRAY
25352: PPUSH
25353: CALL_OW 546
25357: ST_TO_ADDR
// if hex [ 1 ] then
25358: LD_VAR 0 3
25362: PUSH
25363: LD_INT 1
25365: ARRAY
25366: IFFALSE 25370
// continue ;
25368: GO 25258
// h := hex [ 2 ] ;
25370: LD_ADDR_VAR 0 12
25374: PUSH
25375: LD_VAR 0 3
25379: PUSH
25380: LD_INT 2
25382: ARRAY
25383: ST_TO_ADDR
// if h + 7 < height then
25384: LD_VAR 0 12
25388: PUSH
25389: LD_INT 7
25391: PLUS
25392: PUSH
25393: LD_VAR 0 14
25397: LESS
25398: IFFALSE 25427
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
25400: LD_ADDR_VAR 0 17
25404: PUSH
25405: LD_INT 7
25407: PUSH
25408: LD_INT 28
25410: PUSH
25411: LD_INT 45
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: LIST
25418: PUSH
25419: LD_VAR 0 11
25423: ARRAY
25424: ST_TO_ADDR
// break ;
25425: GO 25429
// end ; end ; end ;
25427: GO 25258
25429: POP
25430: POP
// end ; if not weapon then
25431: LD_VAR 0 17
25435: NOT
25436: IFFALSE 25496
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
25438: LD_ADDR_VAR 0 4
25442: PUSH
25443: LD_VAR 0 4
25447: PUSH
25448: LD_INT 11
25450: PUSH
25451: LD_INT 30
25453: PUSH
25454: LD_INT 49
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: LIST
25461: DIFF
25462: ST_TO_ADDR
// if not list then
25463: LD_VAR 0 4
25467: NOT
25468: IFFALSE 25472
// exit ;
25470: GO 25614
// weapon := list [ rand ( 1 , list ) ] ;
25472: LD_ADDR_VAR 0 17
25476: PUSH
25477: LD_VAR 0 4
25481: PUSH
25482: LD_INT 1
25484: PPUSH
25485: LD_VAR 0 4
25489: PPUSH
25490: CALL_OW 12
25494: ARRAY
25495: ST_TO_ADDR
// end ; if weapon then
25496: LD_VAR 0 17
25500: IFFALSE 25614
// begin tmp := CostOfWeapon ( weapon ) ;
25502: LD_ADDR_VAR 0 13
25506: PUSH
25507: LD_VAR 0 17
25511: PPUSH
25512: CALL_OW 451
25516: ST_TO_ADDR
// j := GetBase ( tower ) ;
25517: LD_ADDR_VAR 0 8
25521: PUSH
25522: LD_VAR 0 1
25526: PPUSH
25527: CALL_OW 274
25531: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
25532: LD_VAR 0 8
25536: PPUSH
25537: LD_INT 1
25539: PPUSH
25540: CALL_OW 275
25544: PUSH
25545: LD_VAR 0 13
25549: PUSH
25550: LD_INT 1
25552: ARRAY
25553: GREATEREQUAL
25554: PUSH
25555: LD_VAR 0 8
25559: PPUSH
25560: LD_INT 2
25562: PPUSH
25563: CALL_OW 275
25567: PUSH
25568: LD_VAR 0 13
25572: PUSH
25573: LD_INT 2
25575: ARRAY
25576: GREATEREQUAL
25577: AND
25578: PUSH
25579: LD_VAR 0 8
25583: PPUSH
25584: LD_INT 3
25586: PPUSH
25587: CALL_OW 275
25591: PUSH
25592: LD_VAR 0 13
25596: PUSH
25597: LD_INT 3
25599: ARRAY
25600: GREATEREQUAL
25601: AND
25602: IFFALSE 25614
// result := weapon ;
25604: LD_ADDR_VAR 0 2
25608: PUSH
25609: LD_VAR 0 17
25613: ST_TO_ADDR
// end ; end ;
25614: LD_VAR 0 2
25618: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
25619: LD_INT 0
25621: PPUSH
25622: PPUSH
// result := true ;
25623: LD_ADDR_VAR 0 3
25627: PUSH
25628: LD_INT 1
25630: ST_TO_ADDR
// if array1 = array2 then
25631: LD_VAR 0 1
25635: PUSH
25636: LD_VAR 0 2
25640: EQUAL
25641: IFFALSE 25701
// begin for i = 1 to array1 do
25643: LD_ADDR_VAR 0 4
25647: PUSH
25648: DOUBLE
25649: LD_INT 1
25651: DEC
25652: ST_TO_ADDR
25653: LD_VAR 0 1
25657: PUSH
25658: FOR_TO
25659: IFFALSE 25697
// if array1 [ i ] <> array2 [ i ] then
25661: LD_VAR 0 1
25665: PUSH
25666: LD_VAR 0 4
25670: ARRAY
25671: PUSH
25672: LD_VAR 0 2
25676: PUSH
25677: LD_VAR 0 4
25681: ARRAY
25682: NONEQUAL
25683: IFFALSE 25695
// begin result := false ;
25685: LD_ADDR_VAR 0 3
25689: PUSH
25690: LD_INT 0
25692: ST_TO_ADDR
// break ;
25693: GO 25697
// end ;
25695: GO 25658
25697: POP
25698: POP
// end else
25699: GO 25709
// result := false ;
25701: LD_ADDR_VAR 0 3
25705: PUSH
25706: LD_INT 0
25708: ST_TO_ADDR
// end ;
25709: LD_VAR 0 3
25713: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
25714: LD_INT 0
25716: PPUSH
25717: PPUSH
25718: PPUSH
// pom := GetBase ( fac ) ;
25719: LD_ADDR_VAR 0 5
25723: PUSH
25724: LD_VAR 0 1
25728: PPUSH
25729: CALL_OW 274
25733: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
25734: LD_ADDR_VAR 0 4
25738: PUSH
25739: LD_VAR 0 2
25743: PUSH
25744: LD_INT 1
25746: ARRAY
25747: PPUSH
25748: LD_VAR 0 2
25752: PUSH
25753: LD_INT 2
25755: ARRAY
25756: PPUSH
25757: LD_VAR 0 2
25761: PUSH
25762: LD_INT 3
25764: ARRAY
25765: PPUSH
25766: LD_VAR 0 2
25770: PUSH
25771: LD_INT 4
25773: ARRAY
25774: PPUSH
25775: CALL_OW 449
25779: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25780: LD_ADDR_VAR 0 3
25784: PUSH
25785: LD_VAR 0 5
25789: PPUSH
25790: LD_INT 1
25792: PPUSH
25793: CALL_OW 275
25797: PUSH
25798: LD_VAR 0 4
25802: PUSH
25803: LD_INT 1
25805: ARRAY
25806: GREATEREQUAL
25807: PUSH
25808: LD_VAR 0 5
25812: PPUSH
25813: LD_INT 2
25815: PPUSH
25816: CALL_OW 275
25820: PUSH
25821: LD_VAR 0 4
25825: PUSH
25826: LD_INT 2
25828: ARRAY
25829: GREATEREQUAL
25830: AND
25831: PUSH
25832: LD_VAR 0 5
25836: PPUSH
25837: LD_INT 3
25839: PPUSH
25840: CALL_OW 275
25844: PUSH
25845: LD_VAR 0 4
25849: PUSH
25850: LD_INT 3
25852: ARRAY
25853: GREATEREQUAL
25854: AND
25855: ST_TO_ADDR
// end ;
25856: LD_VAR 0 3
25860: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
25861: LD_INT 0
25863: PPUSH
25864: PPUSH
25865: PPUSH
25866: PPUSH
// pom := GetBase ( building ) ;
25867: LD_ADDR_VAR 0 3
25871: PUSH
25872: LD_VAR 0 1
25876: PPUSH
25877: CALL_OW 274
25881: ST_TO_ADDR
// if not pom then
25882: LD_VAR 0 3
25886: NOT
25887: IFFALSE 25891
// exit ;
25889: GO 26061
// btype := GetBType ( building ) ;
25891: LD_ADDR_VAR 0 5
25895: PUSH
25896: LD_VAR 0 1
25900: PPUSH
25901: CALL_OW 266
25905: ST_TO_ADDR
// if btype = b_armoury then
25906: LD_VAR 0 5
25910: PUSH
25911: LD_INT 4
25913: EQUAL
25914: IFFALSE 25924
// btype := b_barracks ;
25916: LD_ADDR_VAR 0 5
25920: PUSH
25921: LD_INT 5
25923: ST_TO_ADDR
// if btype = b_depot then
25924: LD_VAR 0 5
25928: PUSH
25929: LD_INT 0
25931: EQUAL
25932: IFFALSE 25942
// btype := b_warehouse ;
25934: LD_ADDR_VAR 0 5
25938: PUSH
25939: LD_INT 1
25941: ST_TO_ADDR
// if btype = b_workshop then
25942: LD_VAR 0 5
25946: PUSH
25947: LD_INT 2
25949: EQUAL
25950: IFFALSE 25960
// btype := b_factory ;
25952: LD_ADDR_VAR 0 5
25956: PUSH
25957: LD_INT 3
25959: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25960: LD_ADDR_VAR 0 4
25964: PUSH
25965: LD_VAR 0 5
25969: PPUSH
25970: LD_VAR 0 1
25974: PPUSH
25975: CALL_OW 248
25979: PPUSH
25980: CALL_OW 450
25984: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25985: LD_ADDR_VAR 0 2
25989: PUSH
25990: LD_VAR 0 3
25994: PPUSH
25995: LD_INT 1
25997: PPUSH
25998: CALL_OW 275
26002: PUSH
26003: LD_VAR 0 4
26007: PUSH
26008: LD_INT 1
26010: ARRAY
26011: GREATEREQUAL
26012: PUSH
26013: LD_VAR 0 3
26017: PPUSH
26018: LD_INT 2
26020: PPUSH
26021: CALL_OW 275
26025: PUSH
26026: LD_VAR 0 4
26030: PUSH
26031: LD_INT 2
26033: ARRAY
26034: GREATEREQUAL
26035: AND
26036: PUSH
26037: LD_VAR 0 3
26041: PPUSH
26042: LD_INT 3
26044: PPUSH
26045: CALL_OW 275
26049: PUSH
26050: LD_VAR 0 4
26054: PUSH
26055: LD_INT 3
26057: ARRAY
26058: GREATEREQUAL
26059: AND
26060: ST_TO_ADDR
// end ;
26061: LD_VAR 0 2
26065: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
26066: LD_INT 0
26068: PPUSH
26069: PPUSH
26070: PPUSH
// pom := GetBase ( building ) ;
26071: LD_ADDR_VAR 0 4
26075: PUSH
26076: LD_VAR 0 1
26080: PPUSH
26081: CALL_OW 274
26085: ST_TO_ADDR
// if not pom then
26086: LD_VAR 0 4
26090: NOT
26091: IFFALSE 26095
// exit ;
26093: GO 26196
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26095: LD_ADDR_VAR 0 5
26099: PUSH
26100: LD_VAR 0 2
26104: PPUSH
26105: LD_VAR 0 1
26109: PPUSH
26110: CALL_OW 248
26114: PPUSH
26115: CALL_OW 450
26119: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26120: LD_ADDR_VAR 0 3
26124: PUSH
26125: LD_VAR 0 4
26129: PPUSH
26130: LD_INT 1
26132: PPUSH
26133: CALL_OW 275
26137: PUSH
26138: LD_VAR 0 5
26142: PUSH
26143: LD_INT 1
26145: ARRAY
26146: GREATEREQUAL
26147: PUSH
26148: LD_VAR 0 4
26152: PPUSH
26153: LD_INT 2
26155: PPUSH
26156: CALL_OW 275
26160: PUSH
26161: LD_VAR 0 5
26165: PUSH
26166: LD_INT 2
26168: ARRAY
26169: GREATEREQUAL
26170: AND
26171: PUSH
26172: LD_VAR 0 4
26176: PPUSH
26177: LD_INT 3
26179: PPUSH
26180: CALL_OW 275
26184: PUSH
26185: LD_VAR 0 5
26189: PUSH
26190: LD_INT 3
26192: ARRAY
26193: GREATEREQUAL
26194: AND
26195: ST_TO_ADDR
// end ;
26196: LD_VAR 0 3
26200: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
26201: LD_INT 0
26203: PPUSH
26204: PPUSH
26205: PPUSH
26206: PPUSH
26207: PPUSH
26208: PPUSH
26209: PPUSH
26210: PPUSH
26211: PPUSH
26212: PPUSH
// result := false ;
26213: LD_ADDR_VAR 0 6
26217: PUSH
26218: LD_INT 0
26220: ST_TO_ADDR
// if not base or not btype or not x or not y then
26221: LD_VAR 0 1
26225: NOT
26226: PUSH
26227: LD_VAR 0 2
26231: NOT
26232: OR
26233: PUSH
26234: LD_VAR 0 3
26238: NOT
26239: OR
26240: PUSH
26241: LD_VAR 0 4
26245: NOT
26246: OR
26247: IFFALSE 26251
// exit ;
26249: GO 26765
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
26251: LD_ADDR_VAR 0 12
26255: PUSH
26256: LD_VAR 0 2
26260: PPUSH
26261: LD_VAR 0 3
26265: PPUSH
26266: LD_VAR 0 4
26270: PPUSH
26271: LD_VAR 0 5
26275: PPUSH
26276: LD_VAR 0 1
26280: PUSH
26281: LD_INT 1
26283: ARRAY
26284: PPUSH
26285: CALL_OW 248
26289: PPUSH
26290: LD_INT 0
26292: PPUSH
26293: CALL 27594 0 6
26297: ST_TO_ADDR
// if not hexes then
26298: LD_VAR 0 12
26302: NOT
26303: IFFALSE 26307
// exit ;
26305: GO 26765
// for i = 1 to hexes do
26307: LD_ADDR_VAR 0 7
26311: PUSH
26312: DOUBLE
26313: LD_INT 1
26315: DEC
26316: ST_TO_ADDR
26317: LD_VAR 0 12
26321: PUSH
26322: FOR_TO
26323: IFFALSE 26763
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26325: LD_ADDR_VAR 0 11
26329: PUSH
26330: LD_VAR 0 12
26334: PUSH
26335: LD_VAR 0 7
26339: ARRAY
26340: PUSH
26341: LD_INT 1
26343: ARRAY
26344: PPUSH
26345: LD_VAR 0 12
26349: PUSH
26350: LD_VAR 0 7
26354: ARRAY
26355: PUSH
26356: LD_INT 2
26358: ARRAY
26359: PPUSH
26360: CALL_OW 428
26364: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
26365: LD_VAR 0 11
26369: NOT
26370: PUSH
26371: LD_VAR 0 11
26375: PPUSH
26376: CALL_OW 247
26380: PUSH
26381: LD_INT 3
26383: EQUAL
26384: OR
26385: IFFALSE 26389
// continue ;
26387: GO 26322
// result := true ;
26389: LD_ADDR_VAR 0 6
26393: PUSH
26394: LD_INT 1
26396: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26397: LD_ADDR_VAR 0 15
26401: PUSH
26402: LD_INT 22
26404: PUSH
26405: LD_VAR 0 11
26409: PPUSH
26410: CALL_OW 255
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 2
26421: PUSH
26422: LD_INT 30
26424: PUSH
26425: LD_INT 0
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 30
26434: PUSH
26435: LD_INT 1
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: LIST
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PPUSH
26451: CALL_OW 69
26455: ST_TO_ADDR
// if dep then
26456: LD_VAR 0 15
26460: IFFALSE 26596
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
26462: LD_ADDR_VAR 0 14
26466: PUSH
26467: LD_VAR 0 15
26471: PUSH
26472: LD_INT 1
26474: ARRAY
26475: PPUSH
26476: CALL_OW 250
26480: PPUSH
26481: LD_VAR 0 15
26485: PUSH
26486: LD_INT 1
26488: ARRAY
26489: PPUSH
26490: CALL_OW 254
26494: PPUSH
26495: LD_INT 5
26497: PPUSH
26498: CALL_OW 272
26502: PUSH
26503: LD_VAR 0 15
26507: PUSH
26508: LD_INT 1
26510: ARRAY
26511: PPUSH
26512: CALL_OW 251
26516: PPUSH
26517: LD_VAR 0 15
26521: PUSH
26522: LD_INT 1
26524: ARRAY
26525: PPUSH
26526: CALL_OW 254
26530: PPUSH
26531: LD_INT 5
26533: PPUSH
26534: CALL_OW 273
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
26543: LD_VAR 0 14
26547: PUSH
26548: LD_INT 1
26550: ARRAY
26551: PPUSH
26552: LD_VAR 0 14
26556: PUSH
26557: LD_INT 2
26559: ARRAY
26560: PPUSH
26561: CALL_OW 488
26565: IFFALSE 26596
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
26567: LD_VAR 0 11
26571: PPUSH
26572: LD_VAR 0 14
26576: PUSH
26577: LD_INT 1
26579: ARRAY
26580: PPUSH
26581: LD_VAR 0 14
26585: PUSH
26586: LD_INT 2
26588: ARRAY
26589: PPUSH
26590: CALL_OW 111
// continue ;
26594: GO 26322
// end ; end ; r := GetDir ( tmp ) ;
26596: LD_ADDR_VAR 0 13
26600: PUSH
26601: LD_VAR 0 11
26605: PPUSH
26606: CALL_OW 254
26610: ST_TO_ADDR
// if r = 5 then
26611: LD_VAR 0 13
26615: PUSH
26616: LD_INT 5
26618: EQUAL
26619: IFFALSE 26629
// r := 0 ;
26621: LD_ADDR_VAR 0 13
26625: PUSH
26626: LD_INT 0
26628: ST_TO_ADDR
// for j = r to 5 do
26629: LD_ADDR_VAR 0 8
26633: PUSH
26634: DOUBLE
26635: LD_VAR 0 13
26639: DEC
26640: ST_TO_ADDR
26641: LD_INT 5
26643: PUSH
26644: FOR_TO
26645: IFFALSE 26759
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
26647: LD_ADDR_VAR 0 9
26651: PUSH
26652: LD_VAR 0 11
26656: PPUSH
26657: CALL_OW 250
26661: PPUSH
26662: LD_VAR 0 8
26666: PPUSH
26667: LD_INT 2
26669: PPUSH
26670: CALL_OW 272
26674: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
26675: LD_ADDR_VAR 0 10
26679: PUSH
26680: LD_VAR 0 11
26684: PPUSH
26685: CALL_OW 251
26689: PPUSH
26690: LD_VAR 0 8
26694: PPUSH
26695: LD_INT 2
26697: PPUSH
26698: CALL_OW 273
26702: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
26703: LD_VAR 0 9
26707: PPUSH
26708: LD_VAR 0 10
26712: PPUSH
26713: CALL_OW 488
26717: PUSH
26718: LD_VAR 0 9
26722: PPUSH
26723: LD_VAR 0 10
26727: PPUSH
26728: CALL_OW 428
26732: NOT
26733: AND
26734: IFFALSE 26757
// begin ComMoveXY ( tmp , _x , _y ) ;
26736: LD_VAR 0 11
26740: PPUSH
26741: LD_VAR 0 9
26745: PPUSH
26746: LD_VAR 0 10
26750: PPUSH
26751: CALL_OW 111
// break ;
26755: GO 26759
// end ; end ;
26757: GO 26644
26759: POP
26760: POP
// end ;
26761: GO 26322
26763: POP
26764: POP
// end ;
26765: LD_VAR 0 6
26769: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
26770: LD_INT 0
26772: PPUSH
26773: PPUSH
26774: PPUSH
26775: PPUSH
26776: PPUSH
26777: PPUSH
26778: PPUSH
26779: PPUSH
26780: PPUSH
// result := false ;
26781: LD_ADDR_VAR 0 6
26785: PUSH
26786: LD_INT 0
26788: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
26789: LD_VAR 0 1
26793: NOT
26794: PUSH
26795: LD_VAR 0 1
26799: PPUSH
26800: CALL_OW 266
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: IN
26815: NOT
26816: OR
26817: PUSH
26818: LD_VAR 0 2
26822: NOT
26823: OR
26824: PUSH
26825: LD_VAR 0 5
26829: PUSH
26830: LD_INT 0
26832: PUSH
26833: LD_INT 1
26835: PUSH
26836: LD_INT 2
26838: PUSH
26839: LD_INT 3
26841: PUSH
26842: LD_INT 4
26844: PUSH
26845: LD_INT 5
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: IN
26856: NOT
26857: OR
26858: PUSH
26859: LD_VAR 0 3
26863: PPUSH
26864: LD_VAR 0 4
26868: PPUSH
26869: CALL_OW 488
26873: NOT
26874: OR
26875: IFFALSE 26879
// exit ;
26877: GO 27589
// pom := GetBase ( bdepot ) ;
26879: LD_ADDR_VAR 0 9
26883: PUSH
26884: LD_VAR 0 1
26888: PPUSH
26889: CALL_OW 274
26893: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
26894: LD_ADDR_VAR 0 10
26898: PUSH
26899: LD_VAR 0 2
26903: PPUSH
26904: LD_VAR 0 1
26908: PPUSH
26909: CALL_OW 248
26913: PPUSH
26914: CALL_OW 450
26918: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26919: LD_VAR 0 9
26923: PPUSH
26924: LD_INT 1
26926: PPUSH
26927: CALL_OW 275
26931: PUSH
26932: LD_VAR 0 10
26936: PUSH
26937: LD_INT 1
26939: ARRAY
26940: GREATEREQUAL
26941: PUSH
26942: LD_VAR 0 9
26946: PPUSH
26947: LD_INT 2
26949: PPUSH
26950: CALL_OW 275
26954: PUSH
26955: LD_VAR 0 10
26959: PUSH
26960: LD_INT 2
26962: ARRAY
26963: GREATEREQUAL
26964: AND
26965: PUSH
26966: LD_VAR 0 9
26970: PPUSH
26971: LD_INT 3
26973: PPUSH
26974: CALL_OW 275
26978: PUSH
26979: LD_VAR 0 10
26983: PUSH
26984: LD_INT 3
26986: ARRAY
26987: GREATEREQUAL
26988: AND
26989: NOT
26990: IFFALSE 26994
// exit ;
26992: GO 27589
// if GetBType ( bdepot ) = b_depot then
26994: LD_VAR 0 1
26998: PPUSH
26999: CALL_OW 266
27003: PUSH
27004: LD_INT 0
27006: EQUAL
27007: IFFALSE 27019
// dist := 28 else
27009: LD_ADDR_VAR 0 13
27013: PUSH
27014: LD_INT 28
27016: ST_TO_ADDR
27017: GO 27027
// dist := 36 ;
27019: LD_ADDR_VAR 0 13
27023: PUSH
27024: LD_INT 36
27026: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
27027: LD_VAR 0 1
27031: PPUSH
27032: LD_VAR 0 3
27036: PPUSH
27037: LD_VAR 0 4
27041: PPUSH
27042: CALL_OW 297
27046: PUSH
27047: LD_VAR 0 13
27051: GREATER
27052: IFFALSE 27056
// exit ;
27054: GO 27589
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
27056: LD_ADDR_VAR 0 11
27060: PUSH
27061: LD_VAR 0 2
27065: PPUSH
27066: LD_VAR 0 3
27070: PPUSH
27071: LD_VAR 0 4
27075: PPUSH
27076: LD_VAR 0 5
27080: PPUSH
27081: LD_VAR 0 1
27085: PPUSH
27086: CALL_OW 248
27090: PPUSH
27091: LD_INT 0
27093: PPUSH
27094: CALL 27594 0 6
27098: ST_TO_ADDR
// if not hexes then
27099: LD_VAR 0 11
27103: NOT
27104: IFFALSE 27108
// exit ;
27106: GO 27589
// hex := GetHexInfo ( x , y ) ;
27108: LD_ADDR_VAR 0 14
27112: PUSH
27113: LD_VAR 0 3
27117: PPUSH
27118: LD_VAR 0 4
27122: PPUSH
27123: CALL_OW 546
27127: ST_TO_ADDR
// if hex [ 1 ] then
27128: LD_VAR 0 14
27132: PUSH
27133: LD_INT 1
27135: ARRAY
27136: IFFALSE 27140
// exit ;
27138: GO 27589
// height := hex [ 2 ] ;
27140: LD_ADDR_VAR 0 12
27144: PUSH
27145: LD_VAR 0 14
27149: PUSH
27150: LD_INT 2
27152: ARRAY
27153: ST_TO_ADDR
// for i = 1 to hexes do
27154: LD_ADDR_VAR 0 7
27158: PUSH
27159: DOUBLE
27160: LD_INT 1
27162: DEC
27163: ST_TO_ADDR
27164: LD_VAR 0 11
27168: PUSH
27169: FOR_TO
27170: IFFALSE 27498
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27172: LD_VAR 0 11
27176: PUSH
27177: LD_VAR 0 7
27181: ARRAY
27182: PUSH
27183: LD_INT 1
27185: ARRAY
27186: PPUSH
27187: LD_VAR 0 11
27191: PUSH
27192: LD_VAR 0 7
27196: ARRAY
27197: PUSH
27198: LD_INT 2
27200: ARRAY
27201: PPUSH
27202: CALL_OW 488
27206: NOT
27207: IFFALSE 27211
// continue ;
27209: GO 27169
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27211: LD_ADDR_VAR 0 8
27215: PUSH
27216: LD_VAR 0 11
27220: PUSH
27221: LD_VAR 0 7
27225: ARRAY
27226: PUSH
27227: LD_INT 1
27229: ARRAY
27230: PPUSH
27231: LD_VAR 0 11
27235: PUSH
27236: LD_VAR 0 7
27240: ARRAY
27241: PUSH
27242: LD_INT 2
27244: ARRAY
27245: PPUSH
27246: CALL_OW 546
27250: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27251: LD_VAR 0 8
27255: PUSH
27256: LD_INT 1
27258: ARRAY
27259: PUSH
27260: LD_VAR 0 8
27264: PUSH
27265: LD_INT 2
27267: ARRAY
27268: PUSH
27269: LD_VAR 0 12
27273: PUSH
27274: LD_INT 2
27276: PLUS
27277: GREATER
27278: OR
27279: PUSH
27280: LD_VAR 0 8
27284: PUSH
27285: LD_INT 2
27287: ARRAY
27288: PUSH
27289: LD_VAR 0 12
27293: PUSH
27294: LD_INT 2
27296: MINUS
27297: LESS
27298: OR
27299: PUSH
27300: LD_VAR 0 8
27304: PUSH
27305: LD_INT 3
27307: ARRAY
27308: PUSH
27309: LD_INT 0
27311: PUSH
27312: LD_INT 8
27314: PUSH
27315: LD_INT 9
27317: PUSH
27318: LD_INT 10
27320: PUSH
27321: LD_INT 11
27323: PUSH
27324: LD_INT 12
27326: PUSH
27327: LD_INT 13
27329: PUSH
27330: LD_INT 16
27332: PUSH
27333: LD_INT 17
27335: PUSH
27336: LD_INT 18
27338: PUSH
27339: LD_INT 19
27341: PUSH
27342: LD_INT 20
27344: PUSH
27345: LD_INT 21
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: IN
27363: NOT
27364: OR
27365: PUSH
27366: LD_VAR 0 8
27370: PUSH
27371: LD_INT 5
27373: ARRAY
27374: NOT
27375: OR
27376: PUSH
27377: LD_VAR 0 8
27381: PUSH
27382: LD_INT 6
27384: ARRAY
27385: PUSH
27386: LD_INT 1
27388: PUSH
27389: LD_INT 2
27391: PUSH
27392: LD_INT 7
27394: PUSH
27395: LD_INT 9
27397: PUSH
27398: LD_INT 10
27400: PUSH
27401: LD_INT 11
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: IN
27412: NOT
27413: OR
27414: PUSH
27415: LD_VAR 0 11
27419: PUSH
27420: LD_VAR 0 7
27424: ARRAY
27425: PUSH
27426: LD_INT 1
27428: ARRAY
27429: PPUSH
27430: LD_VAR 0 11
27434: PUSH
27435: LD_VAR 0 7
27439: ARRAY
27440: PUSH
27441: LD_INT 2
27443: ARRAY
27444: PPUSH
27445: CALL_OW 428
27449: PUSH
27450: LD_INT 0
27452: GREATER
27453: OR
27454: PUSH
27455: LD_VAR 0 11
27459: PUSH
27460: LD_VAR 0 7
27464: ARRAY
27465: PUSH
27466: LD_INT 1
27468: ARRAY
27469: PPUSH
27470: LD_VAR 0 11
27474: PUSH
27475: LD_VAR 0 7
27479: ARRAY
27480: PUSH
27481: LD_INT 2
27483: ARRAY
27484: PPUSH
27485: CALL_OW 351
27489: OR
27490: IFFALSE 27496
// exit ;
27492: POP
27493: POP
27494: GO 27589
// end ;
27496: GO 27169
27498: POP
27499: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
27500: LD_VAR 0 1
27504: PPUSH
27505: CALL_OW 255
27509: PPUSH
27510: LD_VAR 0 3
27514: PPUSH
27515: LD_VAR 0 4
27519: PPUSH
27520: LD_INT 20
27522: PPUSH
27523: CALL 20626 0 4
27527: PUSH
27528: LD_INT 4
27530: ARRAY
27531: IFFALSE 27535
// exit ;
27533: GO 27589
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
27535: LD_VAR 0 2
27539: PUSH
27540: LD_INT 29
27542: PUSH
27543: LD_INT 30
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: IN
27550: PUSH
27551: LD_VAR 0 3
27555: PPUSH
27556: LD_VAR 0 4
27560: PPUSH
27561: LD_VAR 0 1
27565: PPUSH
27566: CALL_OW 255
27570: PPUSH
27571: CALL_OW 440
27575: NOT
27576: AND
27577: IFFALSE 27581
// exit ;
27579: GO 27589
// result := true ;
27581: LD_ADDR_VAR 0 6
27585: PUSH
27586: LD_INT 1
27588: ST_TO_ADDR
// end ;
27589: LD_VAR 0 6
27593: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
27594: LD_INT 0
27596: PPUSH
27597: PPUSH
27598: PPUSH
27599: PPUSH
27600: PPUSH
27601: PPUSH
27602: PPUSH
27603: PPUSH
27604: PPUSH
27605: PPUSH
27606: PPUSH
27607: PPUSH
27608: PPUSH
27609: PPUSH
27610: PPUSH
27611: PPUSH
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
27616: PPUSH
27617: PPUSH
27618: PPUSH
27619: PPUSH
27620: PPUSH
27621: PPUSH
27622: PPUSH
27623: PPUSH
27624: PPUSH
27625: PPUSH
27626: PPUSH
27627: PPUSH
27628: PPUSH
27629: PPUSH
27630: PPUSH
27631: PPUSH
27632: PPUSH
27633: PPUSH
27634: PPUSH
27635: PPUSH
27636: PPUSH
27637: PPUSH
27638: PPUSH
27639: PPUSH
27640: PPUSH
27641: PPUSH
27642: PPUSH
27643: PPUSH
27644: PPUSH
27645: PPUSH
27646: PPUSH
27647: PPUSH
27648: PPUSH
27649: PPUSH
27650: PPUSH
27651: PPUSH
27652: PPUSH
27653: PPUSH
// result = [ ] ;
27654: LD_ADDR_VAR 0 7
27658: PUSH
27659: EMPTY
27660: ST_TO_ADDR
// temp_list = [ ] ;
27661: LD_ADDR_VAR 0 9
27665: PUSH
27666: EMPTY
27667: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
27668: LD_VAR 0 4
27672: PUSH
27673: LD_INT 0
27675: PUSH
27676: LD_INT 1
27678: PUSH
27679: LD_INT 2
27681: PUSH
27682: LD_INT 3
27684: PUSH
27685: LD_INT 4
27687: PUSH
27688: LD_INT 5
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: IN
27699: NOT
27700: PUSH
27701: LD_VAR 0 1
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: IN
27716: PUSH
27717: LD_VAR 0 5
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: LD_INT 2
27727: PUSH
27728: LD_INT 3
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: LIST
27735: IN
27736: NOT
27737: AND
27738: OR
27739: IFFALSE 27743
// exit ;
27741: GO 46128
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
27743: LD_VAR 0 1
27747: PUSH
27748: LD_INT 6
27750: PUSH
27751: LD_INT 7
27753: PUSH
27754: LD_INT 8
27756: PUSH
27757: LD_INT 13
27759: PUSH
27760: LD_INT 12
27762: PUSH
27763: LD_INT 15
27765: PUSH
27766: LD_INT 11
27768: PUSH
27769: LD_INT 14
27771: PUSH
27772: LD_INT 10
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: IN
27786: IFFALSE 27796
// btype = b_lab ;
27788: LD_ADDR_VAR 0 1
27792: PUSH
27793: LD_INT 6
27795: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
27796: LD_VAR 0 6
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: LD_INT 2
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: LIST
27814: IN
27815: NOT
27816: PUSH
27817: LD_VAR 0 1
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: LD_INT 2
27830: PUSH
27831: LD_INT 3
27833: PUSH
27834: LD_INT 6
27836: PUSH
27837: LD_INT 36
27839: PUSH
27840: LD_INT 4
27842: PUSH
27843: LD_INT 5
27845: PUSH
27846: LD_INT 31
27848: PUSH
27849: LD_INT 32
27851: PUSH
27852: LD_INT 33
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: IN
27868: NOT
27869: PUSH
27870: LD_VAR 0 6
27874: PUSH
27875: LD_INT 1
27877: EQUAL
27878: AND
27879: OR
27880: PUSH
27881: LD_VAR 0 1
27885: PUSH
27886: LD_INT 2
27888: PUSH
27889: LD_INT 3
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: IN
27896: NOT
27897: PUSH
27898: LD_VAR 0 6
27902: PUSH
27903: LD_INT 2
27905: EQUAL
27906: AND
27907: OR
27908: IFFALSE 27918
// mode = 0 ;
27910: LD_ADDR_VAR 0 6
27914: PUSH
27915: LD_INT 0
27917: ST_TO_ADDR
// case mode of 0 :
27918: LD_VAR 0 6
27922: PUSH
27923: LD_INT 0
27925: DOUBLE
27926: EQUAL
27927: IFTRUE 27931
27929: GO 39384
27931: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27932: LD_ADDR_VAR 0 11
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: LD_INT 0
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: LD_INT 1
27952: NEG
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: PUSH
27961: LD_INT 0
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: LD_INT 0
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 1
28001: NEG
28002: PUSH
28003: LD_INT 1
28005: NEG
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 1
28013: NEG
28014: PUSH
28015: LD_INT 2
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 0
28025: PUSH
28026: LD_INT 2
28028: NEG
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 1
28036: PUSH
28037: LD_INT 1
28039: NEG
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: LD_INT 2
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 0
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 1
28067: NEG
28068: PUSH
28069: LD_INT 1
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 1
28078: PUSH
28079: LD_INT 3
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 0
28088: PUSH
28089: LD_INT 3
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 1
28098: NEG
28099: PUSH
28100: LD_INT 2
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28125: LD_ADDR_VAR 0 12
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: LD_INT 0
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 0
28142: PUSH
28143: LD_INT 1
28145: NEG
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 1
28153: PUSH
28154: LD_INT 0
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 1
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 0
28173: PUSH
28174: LD_INT 1
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 1
28183: NEG
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 1
28194: NEG
28195: PUSH
28196: LD_INT 1
28198: NEG
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 1
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 2
28217: PUSH
28218: LD_INT 0
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 2
28227: PUSH
28228: LD_INT 1
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 1
28237: NEG
28238: PUSH
28239: LD_INT 1
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 2
28248: NEG
28249: PUSH
28250: LD_INT 0
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 2
28259: NEG
28260: PUSH
28261: LD_INT 1
28263: NEG
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 2
28271: NEG
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 3
28282: NEG
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 3
28293: NEG
28294: PUSH
28295: LD_INT 1
28297: NEG
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28321: LD_ADDR_VAR 0 13
28325: PUSH
28326: LD_INT 0
28328: PUSH
28329: LD_INT 0
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: LD_INT 1
28341: NEG
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: LD_INT 1
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: LD_INT 0
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 1
28390: NEG
28391: PUSH
28392: LD_INT 1
28394: NEG
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 1
28402: NEG
28403: PUSH
28404: LD_INT 2
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 2
28414: PUSH
28415: LD_INT 1
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 2
28424: PUSH
28425: LD_INT 2
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: LD_INT 2
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 2
28444: NEG
28445: PUSH
28446: LD_INT 1
28448: NEG
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 2
28456: NEG
28457: PUSH
28458: LD_INT 2
28460: NEG
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 2
28468: NEG
28469: PUSH
28470: LD_INT 3
28472: NEG
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 3
28480: NEG
28481: PUSH
28482: LD_INT 2
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 3
28492: NEG
28493: PUSH
28494: LD_INT 3
28496: NEG
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28520: LD_ADDR_VAR 0 14
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: LD_INT 0
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 0
28537: PUSH
28538: LD_INT 1
28540: NEG
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 1
28548: PUSH
28549: LD_INT 0
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: LD_INT 1
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 0
28568: PUSH
28569: LD_INT 1
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 1
28578: NEG
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 1
28589: NEG
28590: PUSH
28591: LD_INT 1
28593: NEG
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 1
28601: NEG
28602: PUSH
28603: LD_INT 2
28605: NEG
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: LD_INT 2
28616: NEG
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 1
28624: PUSH
28625: LD_INT 1
28627: NEG
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 1
28635: PUSH
28636: LD_INT 2
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: LD_INT 2
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: LD_INT 1
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 1
28666: NEG
28667: PUSH
28668: LD_INT 3
28670: NEG
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 0
28678: PUSH
28679: LD_INT 3
28681: NEG
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 1
28689: PUSH
28690: LD_INT 2
28692: NEG
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28716: LD_ADDR_VAR 0 15
28720: PUSH
28721: LD_INT 0
28723: PUSH
28724: LD_INT 0
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 0
28733: PUSH
28734: LD_INT 1
28736: NEG
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 1
28744: PUSH
28745: LD_INT 0
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 1
28754: PUSH
28755: LD_INT 1
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: LD_INT 1
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 1
28774: NEG
28775: PUSH
28776: LD_INT 0
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: NEG
28786: PUSH
28787: LD_INT 1
28789: NEG
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 1
28797: PUSH
28798: LD_INT 1
28800: NEG
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: LD_INT 0
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 2
28818: PUSH
28819: LD_INT 1
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 1
28828: NEG
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 2
28839: NEG
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 2
28850: NEG
28851: PUSH
28852: LD_INT 1
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 2
28862: PUSH
28863: LD_INT 1
28865: NEG
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 3
28873: PUSH
28874: LD_INT 0
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 3
28883: PUSH
28884: LD_INT 1
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28909: LD_ADDR_VAR 0 16
28913: PUSH
28914: LD_INT 0
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 0
28926: PUSH
28927: LD_INT 1
28929: NEG
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: LD_INT 0
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 0
28957: PUSH
28958: LD_INT 1
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: LD_INT 0
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: NEG
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 1
28990: NEG
28991: PUSH
28992: LD_INT 2
28994: NEG
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 2
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 2
29012: PUSH
29013: LD_INT 2
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 1
29022: PUSH
29023: LD_INT 2
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 2
29032: NEG
29033: PUSH
29034: LD_INT 1
29036: NEG
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 2
29044: NEG
29045: PUSH
29046: LD_INT 2
29048: NEG
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 3
29056: PUSH
29057: LD_INT 2
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 3
29066: PUSH
29067: LD_INT 3
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 2
29076: PUSH
29077: LD_INT 3
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29102: LD_ADDR_VAR 0 17
29106: PUSH
29107: LD_INT 0
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: LD_INT 1
29122: NEG
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: LD_INT 0
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: LD_INT 1
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: LD_INT 1
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: PUSH
29173: LD_INT 1
29175: NEG
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: LD_INT 2
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: LD_INT 2
29198: NEG
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: LD_INT 1
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 2
29217: PUSH
29218: LD_INT 0
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 2
29227: PUSH
29228: LD_INT 1
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 2
29237: PUSH
29238: LD_INT 2
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: LD_INT 2
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: LD_INT 2
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: LD_INT 1
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 2
29278: NEG
29279: PUSH
29280: LD_INT 0
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 2
29289: NEG
29290: PUSH
29291: LD_INT 1
29293: NEG
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 2
29301: NEG
29302: PUSH
29303: LD_INT 2
29305: NEG
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29332: LD_ADDR_VAR 0 18
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: LD_INT 0
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 0
29349: PUSH
29350: LD_INT 1
29352: NEG
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: LD_INT 0
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: LD_INT 1
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 0
29380: PUSH
29381: LD_INT 1
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 1
29390: NEG
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: LD_INT 1
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: LD_INT 2
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: LD_INT 2
29428: NEG
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 1
29436: PUSH
29437: LD_INT 1
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 2
29447: PUSH
29448: LD_INT 0
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 2
29467: PUSH
29468: LD_INT 2
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: LD_INT 2
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 0
29487: PUSH
29488: LD_INT 2
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: NEG
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 2
29508: NEG
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 2
29519: NEG
29520: PUSH
29521: LD_INT 1
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 2
29531: NEG
29532: PUSH
29533: LD_INT 2
29535: NEG
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29562: LD_ADDR_VAR 0 19
29566: PUSH
29567: LD_INT 0
29569: PUSH
29570: LD_INT 0
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 0
29579: PUSH
29580: LD_INT 1
29582: NEG
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 1
29590: PUSH
29591: LD_INT 0
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 1
29600: PUSH
29601: LD_INT 1
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 0
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 1
29620: NEG
29621: PUSH
29622: LD_INT 0
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 1
29631: NEG
29632: PUSH
29633: LD_INT 1
29635: NEG
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 1
29643: NEG
29644: PUSH
29645: LD_INT 2
29647: NEG
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: LD_INT 2
29658: NEG
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: LD_INT 1
29669: NEG
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 2
29677: PUSH
29678: LD_INT 0
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 2
29687: PUSH
29688: LD_INT 1
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 2
29697: PUSH
29698: LD_INT 2
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: LD_INT 2
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: LD_INT 2
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: LD_INT 1
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 2
29738: NEG
29739: PUSH
29740: LD_INT 0
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 2
29749: NEG
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 2
29761: NEG
29762: PUSH
29763: LD_INT 2
29765: NEG
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29792: LD_ADDR_VAR 0 20
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: LD_INT 0
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 0
29809: PUSH
29810: LD_INT 1
29812: NEG
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 1
29820: PUSH
29821: LD_INT 0
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 1
29830: PUSH
29831: LD_INT 1
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 1
29850: NEG
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 1
29861: NEG
29862: PUSH
29863: LD_INT 1
29865: NEG
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 1
29873: NEG
29874: PUSH
29875: LD_INT 2
29877: NEG
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: LD_INT 2
29888: NEG
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: LD_INT 1
29899: NEG
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 2
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 2
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 2
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: LD_INT 2
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 0
29947: PUSH
29948: LD_INT 2
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 1
29957: NEG
29958: PUSH
29959: LD_INT 1
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 2
29968: NEG
29969: PUSH
29970: LD_INT 0
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 2
29979: NEG
29980: PUSH
29981: LD_INT 1
29983: NEG
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 2
29991: NEG
29992: PUSH
29993: LD_INT 2
29995: NEG
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30022: LD_ADDR_VAR 0 21
30026: PUSH
30027: LD_INT 0
30029: PUSH
30030: LD_INT 0
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: LD_INT 1
30042: NEG
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 1
30050: PUSH
30051: LD_INT 0
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 0
30070: PUSH
30071: LD_INT 1
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 1
30080: NEG
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 1
30091: NEG
30092: PUSH
30093: LD_INT 1
30095: NEG
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 1
30103: NEG
30104: PUSH
30105: LD_INT 2
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 0
30115: PUSH
30116: LD_INT 2
30118: NEG
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: LD_INT 1
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 2
30137: PUSH
30138: LD_INT 0
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 2
30147: PUSH
30148: LD_INT 1
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 2
30157: PUSH
30158: LD_INT 2
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: LD_INT 2
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: LD_INT 2
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 1
30187: NEG
30188: PUSH
30189: LD_INT 1
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 2
30198: NEG
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 2
30209: NEG
30210: PUSH
30211: LD_INT 1
30213: NEG
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 2
30221: NEG
30222: PUSH
30223: LD_INT 2
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30252: LD_ADDR_VAR 0 22
30256: PUSH
30257: LD_INT 0
30259: PUSH
30260: LD_INT 0
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 0
30269: PUSH
30270: LD_INT 1
30272: NEG
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 1
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 1
30290: PUSH
30291: LD_INT 1
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: LD_INT 1
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 1
30310: NEG
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 1
30321: NEG
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 1
30333: NEG
30334: PUSH
30335: LD_INT 2
30337: NEG
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 0
30345: PUSH
30346: LD_INT 2
30348: NEG
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: LD_INT 1
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 2
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 2
30387: PUSH
30388: LD_INT 2
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: LD_INT 2
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 1
30417: NEG
30418: PUSH
30419: LD_INT 1
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 2
30428: NEG
30429: PUSH
30430: LD_INT 0
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 2
30439: NEG
30440: PUSH
30441: LD_INT 1
30443: NEG
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 2
30451: NEG
30452: PUSH
30453: LD_INT 2
30455: NEG
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30482: LD_ADDR_VAR 0 23
30486: PUSH
30487: LD_INT 0
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 0
30499: PUSH
30500: LD_INT 1
30502: NEG
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 1
30520: PUSH
30521: LD_INT 1
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 0
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 1
30540: NEG
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 1
30551: NEG
30552: PUSH
30553: LD_INT 1
30555: NEG
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 1
30563: NEG
30564: PUSH
30565: LD_INT 2
30567: NEG
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 0
30575: PUSH
30576: LD_INT 2
30578: NEG
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 1
30586: PUSH
30587: LD_INT 1
30589: NEG
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 2
30597: PUSH
30598: LD_INT 0
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 2
30607: PUSH
30608: LD_INT 1
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 2
30617: PUSH
30618: LD_INT 2
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 1
30627: PUSH
30628: LD_INT 2
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 0
30637: PUSH
30638: LD_INT 2
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: NEG
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 2
30658: NEG
30659: PUSH
30660: LD_INT 0
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 2
30669: NEG
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 2
30681: NEG
30682: PUSH
30683: LD_INT 2
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 2
30693: NEG
30694: PUSH
30695: LD_INT 3
30697: NEG
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 1
30705: NEG
30706: PUSH
30707: LD_INT 3
30709: NEG
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 1
30717: PUSH
30718: LD_INT 2
30720: NEG
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: LD_INT 1
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
30762: LD_ADDR_VAR 0 24
30766: PUSH
30767: LD_INT 0
30769: PUSH
30770: LD_INT 0
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 0
30779: PUSH
30780: LD_INT 1
30782: NEG
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 1
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: LD_INT 1
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 0
30810: PUSH
30811: LD_INT 1
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 1
30820: NEG
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 1
30831: NEG
30832: PUSH
30833: LD_INT 1
30835: NEG
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 1
30843: NEG
30844: PUSH
30845: LD_INT 2
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: LD_INT 2
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 2
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 2
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 2
30897: PUSH
30898: LD_INT 2
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 0
30917: PUSH
30918: LD_INT 2
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 2
30938: NEG
30939: PUSH
30940: LD_INT 0
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 2
30949: NEG
30950: PUSH
30951: LD_INT 1
30953: NEG
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 2
30961: NEG
30962: PUSH
30963: LD_INT 2
30965: NEG
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: LD_INT 2
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 2
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 3
30995: PUSH
30996: LD_INT 1
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 3
31005: PUSH
31006: LD_INT 2
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
31038: LD_ADDR_VAR 0 25
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 0
31055: PUSH
31056: LD_INT 1
31058: NEG
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 1
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 0
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 1
31096: NEG
31097: PUSH
31098: LD_INT 0
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 1
31107: NEG
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 1
31119: NEG
31120: PUSH
31121: LD_INT 2
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: LD_INT 2
31134: NEG
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 1
31142: PUSH
31143: LD_INT 1
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 2
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: LD_INT 1
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 2
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 1
31183: PUSH
31184: LD_INT 2
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: LD_INT 2
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: NEG
31204: PUSH
31205: LD_INT 1
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 2
31214: NEG
31215: PUSH
31216: LD_INT 0
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 2
31225: NEG
31226: PUSH
31227: LD_INT 1
31229: NEG
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 2
31237: NEG
31238: PUSH
31239: LD_INT 2
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 3
31249: PUSH
31250: LD_INT 1
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 3
31259: PUSH
31260: LD_INT 2
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 2
31269: PUSH
31270: LD_INT 3
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 1
31279: PUSH
31280: LD_INT 3
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31312: LD_ADDR_VAR 0 26
31316: PUSH
31317: LD_INT 0
31319: PUSH
31320: LD_INT 0
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: LD_INT 1
31332: NEG
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: LD_INT 0
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: LD_INT 1
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: LD_INT 1
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 1
31370: NEG
31371: PUSH
31372: LD_INT 0
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 1
31381: NEG
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: LD_INT 2
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 0
31405: PUSH
31406: LD_INT 2
31408: NEG
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 2
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 2
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 2
31447: PUSH
31448: LD_INT 2
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 0
31467: PUSH
31468: LD_INT 2
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 1
31477: NEG
31478: PUSH
31479: LD_INT 1
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 2
31488: NEG
31489: PUSH
31490: LD_INT 0
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 2
31499: NEG
31500: PUSH
31501: LD_INT 1
31503: NEG
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 2
31511: NEG
31512: PUSH
31513: LD_INT 2
31515: NEG
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 2
31523: PUSH
31524: LD_INT 3
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: LD_INT 3
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 1
31543: NEG
31544: PUSH
31545: LD_INT 2
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 2
31554: NEG
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31588: LD_ADDR_VAR 0 27
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 0
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: LD_INT 1
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: LD_INT 0
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: LD_INT 1
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 1
31669: NEG
31670: PUSH
31671: LD_INT 2
31673: NEG
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: LD_INT 2
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: LD_INT 1
31695: NEG
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 2
31703: PUSH
31704: LD_INT 0
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 2
31713: PUSH
31714: LD_INT 1
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 2
31723: PUSH
31724: LD_INT 2
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 1
31733: PUSH
31734: LD_INT 2
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: LD_INT 2
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 1
31753: NEG
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 2
31764: NEG
31765: PUSH
31766: LD_INT 0
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 2
31775: NEG
31776: PUSH
31777: LD_INT 1
31779: NEG
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 2
31787: NEG
31788: PUSH
31789: LD_INT 2
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 1
31799: NEG
31800: PUSH
31801: LD_INT 2
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 2
31810: NEG
31811: PUSH
31812: LD_INT 1
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 3
31821: NEG
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 3
31833: NEG
31834: PUSH
31835: LD_INT 2
31837: NEG
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31868: LD_ADDR_VAR 0 28
31872: PUSH
31873: LD_INT 0
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: LD_INT 1
31888: NEG
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 1
31896: PUSH
31897: LD_INT 0
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 1
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: LD_INT 1
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 1
31926: NEG
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 1
31937: NEG
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 1
31949: NEG
31950: PUSH
31951: LD_INT 2
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: LD_INT 2
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 1
31972: PUSH
31973: LD_INT 1
31975: NEG
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 2
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 2
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 2
32003: PUSH
32004: LD_INT 2
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 1
32013: PUSH
32014: LD_INT 2
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 0
32023: PUSH
32024: LD_INT 2
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: LD_INT 1
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 2
32044: NEG
32045: PUSH
32046: LD_INT 0
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 2
32055: NEG
32056: PUSH
32057: LD_INT 1
32059: NEG
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 2
32067: NEG
32068: PUSH
32069: LD_INT 2
32071: NEG
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 2
32079: NEG
32080: PUSH
32081: LD_INT 3
32083: NEG
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 1
32091: NEG
32092: PUSH
32093: LD_INT 3
32095: NEG
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 3
32103: NEG
32104: PUSH
32105: LD_INT 1
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 3
32115: NEG
32116: PUSH
32117: LD_INT 2
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32150: LD_ADDR_VAR 0 29
32154: PUSH
32155: LD_INT 0
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 0
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 1
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 1
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 1
32208: NEG
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 1
32219: NEG
32220: PUSH
32221: LD_INT 1
32223: NEG
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: LD_INT 2
32235: NEG
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: LD_INT 2
32246: NEG
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 1
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 2
32265: PUSH
32266: LD_INT 0
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 2
32275: PUSH
32276: LD_INT 1
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: LD_INT 2
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: LD_INT 2
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: LD_INT 1
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 2
32316: NEG
32317: PUSH
32318: LD_INT 1
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 2
32328: NEG
32329: PUSH
32330: LD_INT 2
32332: NEG
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 2
32340: NEG
32341: PUSH
32342: LD_INT 3
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 2
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 3
32363: PUSH
32364: LD_INT 1
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: LD_INT 3
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: LD_INT 2
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 3
32394: NEG
32395: PUSH
32396: LD_INT 2
32398: NEG
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32429: LD_ADDR_VAR 0 30
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 0
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 1
32487: NEG
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PUSH
32512: LD_INT 2
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: LD_INT 2
32525: NEG
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 1
32533: PUSH
32534: LD_INT 1
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 2
32544: PUSH
32545: LD_INT 0
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 2
32554: PUSH
32555: LD_INT 1
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 2
32564: PUSH
32565: LD_INT 2
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 1
32574: PUSH
32575: LD_INT 2
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 1
32584: NEG
32585: PUSH
32586: LD_INT 1
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 2
32595: NEG
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 2
32606: NEG
32607: PUSH
32608: LD_INT 1
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 1
32618: NEG
32619: PUSH
32620: LD_INT 3
32622: NEG
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: LD_INT 2
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 3
32641: PUSH
32642: LD_INT 2
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 2
32651: PUSH
32652: LD_INT 3
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 2
32661: NEG
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 3
32672: NEG
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32707: LD_ADDR_VAR 0 31
32711: PUSH
32712: LD_INT 0
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: LD_INT 1
32727: NEG
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: LD_INT 0
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 1
32745: PUSH
32746: LD_INT 1
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: LD_INT 1
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: NEG
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 1
32788: NEG
32789: PUSH
32790: LD_INT 2
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: LD_INT 1
32803: NEG
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 2
32811: PUSH
32812: LD_INT 0
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 2
32831: PUSH
32832: LD_INT 2
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 1
32841: PUSH
32842: LD_INT 2
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 0
32851: PUSH
32852: LD_INT 2
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 1
32861: NEG
32862: PUSH
32863: LD_INT 1
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 2
32872: NEG
32873: PUSH
32874: LD_INT 1
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 2
32884: NEG
32885: PUSH
32886: LD_INT 2
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 2
32896: NEG
32897: PUSH
32898: LD_INT 3
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 2
32908: PUSH
32909: LD_INT 1
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 3
32919: PUSH
32920: LD_INT 1
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 1
32929: PUSH
32930: LD_INT 3
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 1
32939: NEG
32940: PUSH
32941: LD_INT 2
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 3
32950: NEG
32951: PUSH
32952: LD_INT 2
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32985: LD_ADDR_VAR 0 32
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: LD_INT 1
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 1
33043: NEG
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: LD_INT 2
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 2
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 2
33100: PUSH
33101: LD_INT 1
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 2
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 1
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: LD_INT 2
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 1
33140: NEG
33141: PUSH
33142: LD_INT 1
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 2
33151: NEG
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 2
33162: NEG
33163: PUSH
33164: LD_INT 1
33166: NEG
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: NEG
33175: PUSH
33176: LD_INT 3
33178: NEG
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: PUSH
33187: LD_INT 2
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 3
33197: PUSH
33198: LD_INT 2
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 2
33207: PUSH
33208: LD_INT 3
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 2
33217: NEG
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 3
33228: NEG
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33263: LD_ADDR_VAR 0 33
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: LD_INT 0
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: LD_INT 1
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 1
33301: PUSH
33302: LD_INT 1
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: LD_INT 1
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: LD_INT 0
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 1
33332: NEG
33333: PUSH
33334: LD_INT 1
33336: NEG
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: LD_INT 2
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: LD_INT 1
33359: NEG
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 2
33367: PUSH
33368: LD_INT 0
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 2
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 1
33387: PUSH
33388: LD_INT 2
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 0
33397: PUSH
33398: LD_INT 2
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 1
33407: NEG
33408: PUSH
33409: LD_INT 1
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 2
33418: NEG
33419: PUSH
33420: LD_INT 0
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 2
33429: NEG
33430: PUSH
33431: LD_INT 1
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 2
33441: NEG
33442: PUSH
33443: LD_INT 2
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 2
33453: NEG
33454: PUSH
33455: LD_INT 3
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 2
33465: PUSH
33466: LD_INT 1
33468: NEG
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 3
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: LD_INT 3
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: LD_INT 2
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 3
33507: NEG
33508: PUSH
33509: LD_INT 2
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33542: LD_ADDR_VAR 0 34
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: LD_INT 0
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: LD_INT 1
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: LD_INT 1
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: NEG
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 1
33611: NEG
33612: PUSH
33613: LD_INT 1
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: LD_INT 2
33627: NEG
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 0
33635: PUSH
33636: LD_INT 2
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: LD_INT 1
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 2
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 2
33698: NEG
33699: PUSH
33700: LD_INT 0
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 2
33709: NEG
33710: PUSH
33711: LD_INT 1
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 2
33721: NEG
33722: PUSH
33723: LD_INT 2
33725: NEG
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 1
33733: NEG
33734: PUSH
33735: LD_INT 3
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: LD_INT 2
33748: NEG
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 3
33756: PUSH
33757: LD_INT 2
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 2
33766: PUSH
33767: LD_INT 3
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 2
33776: NEG
33777: PUSH
33778: LD_INT 1
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 3
33787: NEG
33788: PUSH
33789: LD_INT 1
33791: NEG
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33822: LD_ADDR_VAR 0 35
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: LD_INT 0
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: LD_INT 1
33842: NEG
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 1
33850: PUSH
33851: LD_INT 0
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: LD_INT 1
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 1
33880: NEG
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 1
33891: NEG
33892: PUSH
33893: LD_INT 1
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 2
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 2
33913: NEG
33914: PUSH
33915: LD_INT 1
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33934: LD_ADDR_VAR 0 36
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 0
33951: PUSH
33952: LD_INT 1
33954: NEG
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 1
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 1
33972: PUSH
33973: LD_INT 1
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: LD_INT 1
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 1
34003: NEG
34004: PUSH
34005: LD_INT 1
34007: NEG
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 1
34015: NEG
34016: PUSH
34017: LD_INT 2
34019: NEG
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: LD_INT 2
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34046: LD_ADDR_VAR 0 37
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: LD_INT 0
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 0
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 1
34074: PUSH
34075: LD_INT 0
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 1
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 0
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 1
34104: NEG
34105: PUSH
34106: LD_INT 0
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 1
34115: NEG
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 1
34127: PUSH
34128: LD_INT 1
34130: NEG
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 1
34138: NEG
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34158: LD_ADDR_VAR 0 38
34162: PUSH
34163: LD_INT 0
34165: PUSH
34166: LD_INT 0
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 0
34175: PUSH
34176: LD_INT 1
34178: NEG
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 1
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: LD_INT 1
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: LD_INT 1
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 1
34216: NEG
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: LD_INT 1
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 2
34239: PUSH
34240: LD_INT 1
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 2
34249: NEG
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34270: LD_ADDR_VAR 0 39
34274: PUSH
34275: LD_INT 0
34277: PUSH
34278: LD_INT 0
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 0
34287: PUSH
34288: LD_INT 1
34290: NEG
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 1
34298: PUSH
34299: LD_INT 0
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 1
34308: PUSH
34309: LD_INT 1
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 0
34318: PUSH
34319: LD_INT 1
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 1
34328: NEG
34329: PUSH
34330: LD_INT 0
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 1
34351: NEG
34352: PUSH
34353: LD_INT 2
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 1
34363: PUSH
34364: LD_INT 2
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34382: LD_ADDR_VAR 0 40
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: LD_INT 0
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: LD_INT 1
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: LD_INT 0
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 1
34420: PUSH
34421: LD_INT 1
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 0
34430: PUSH
34431: LD_INT 1
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 1
34440: NEG
34441: PUSH
34442: LD_INT 0
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: PUSH
34453: LD_INT 1
34455: NEG
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 1
34474: NEG
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34494: LD_ADDR_VAR 0 41
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: LD_INT 0
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: LD_INT 1
34514: NEG
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 1
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 1
34532: PUSH
34533: LD_INT 1
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: LD_INT 1
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 1
34552: NEG
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 1
34563: NEG
34564: PUSH
34565: LD_INT 1
34567: NEG
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 1
34575: NEG
34576: PUSH
34577: LD_INT 2
34579: NEG
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: LD_INT 1
34590: NEG
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 2
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 2
34608: PUSH
34609: LD_INT 1
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 2
34618: PUSH
34619: LD_INT 2
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: LD_INT 2
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 1
34638: NEG
34639: PUSH
34640: LD_INT 1
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 2
34649: NEG
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 2
34660: NEG
34661: PUSH
34662: LD_INT 1
34664: NEG
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 2
34672: NEG
34673: PUSH
34674: LD_INT 2
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 2
34684: NEG
34685: PUSH
34686: LD_INT 3
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: LD_INT 1
34699: NEG
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 3
34707: PUSH
34708: LD_INT 0
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 3
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 3
34727: PUSH
34728: LD_INT 2
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 3
34737: PUSH
34738: LD_INT 3
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 2
34747: PUSH
34748: LD_INT 3
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 2
34757: NEG
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 3
34768: NEG
34769: PUSH
34770: LD_INT 0
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 3
34779: NEG
34780: PUSH
34781: LD_INT 1
34783: NEG
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 3
34791: NEG
34792: PUSH
34793: LD_INT 2
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 3
34803: NEG
34804: PUSH
34805: LD_INT 3
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34844: LD_ADDR_VAR 0 42
34848: PUSH
34849: LD_INT 0
34851: PUSH
34852: LD_INT 0
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: LD_INT 1
34864: NEG
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 1
34872: PUSH
34873: LD_INT 0
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 1
34882: PUSH
34883: LD_INT 1
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 0
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: LD_INT 0
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 1
34913: NEG
34914: PUSH
34915: LD_INT 1
34917: NEG
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 1
34925: NEG
34926: PUSH
34927: LD_INT 2
34929: NEG
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 0
34937: PUSH
34938: LD_INT 2
34940: NEG
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 1
34948: PUSH
34949: LD_INT 1
34951: NEG
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 2
34959: PUSH
34960: LD_INT 1
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 2
34969: PUSH
34970: LD_INT 2
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: LD_INT 2
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 0
34989: PUSH
34990: LD_INT 2
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 1
34999: NEG
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 2
35010: NEG
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: NEG
35023: PUSH
35024: LD_INT 2
35026: NEG
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 2
35034: NEG
35035: PUSH
35036: LD_INT 3
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 1
35046: NEG
35047: PUSH
35048: LD_INT 3
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 3
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: LD_INT 2
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 3
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 3
35090: PUSH
35091: LD_INT 3
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 2
35100: PUSH
35101: LD_INT 3
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: PUSH
35111: LD_INT 3
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: LD_INT 3
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 1
35130: NEG
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 3
35141: NEG
35142: PUSH
35143: LD_INT 2
35145: NEG
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 3
35153: NEG
35154: PUSH
35155: LD_INT 3
35157: NEG
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35194: LD_ADDR_VAR 0 43
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: LD_INT 1
35214: NEG
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 1
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: LD_INT 1
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: NEG
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: LD_INT 1
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 1
35275: NEG
35276: PUSH
35277: LD_INT 2
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 0
35287: PUSH
35288: LD_INT 2
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 2
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 2
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: LD_INT 2
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 0
35339: PUSH
35340: LD_INT 2
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 1
35349: NEG
35350: PUSH
35351: LD_INT 1
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 2
35360: NEG
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 2
35371: NEG
35372: PUSH
35373: LD_INT 1
35375: NEG
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 1
35383: NEG
35384: PUSH
35385: LD_INT 3
35387: NEG
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: LD_INT 3
35398: NEG
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: LD_INT 2
35409: NEG
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 2
35417: PUSH
35418: LD_INT 1
35420: NEG
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 3
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 3
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: LD_INT 3
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: LD_INT 3
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: NEG
35469: PUSH
35470: LD_INT 2
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 2
35479: NEG
35480: PUSH
35481: LD_INT 1
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 3
35490: NEG
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 3
35501: NEG
35502: PUSH
35503: LD_INT 1
35505: NEG
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35542: LD_ADDR_VAR 0 44
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: LD_INT 1
35562: NEG
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 1
35580: PUSH
35581: LD_INT 1
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 1
35600: NEG
35601: PUSH
35602: LD_INT 0
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: LD_INT 1
35615: NEG
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 1
35623: NEG
35624: PUSH
35625: LD_INT 2
35627: NEG
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: LD_INT 1
35638: NEG
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 2
35646: PUSH
35647: LD_INT 0
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 2
35656: PUSH
35657: LD_INT 1
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 2
35666: PUSH
35667: LD_INT 2
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 1
35676: PUSH
35677: LD_INT 2
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 1
35686: NEG
35687: PUSH
35688: LD_INT 1
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 2
35697: NEG
35698: PUSH
35699: LD_INT 0
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 2
35708: NEG
35709: PUSH
35710: LD_INT 1
35712: NEG
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 2
35720: NEG
35721: PUSH
35722: LD_INT 2
35724: NEG
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 2
35732: NEG
35733: PUSH
35734: LD_INT 3
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 2
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 3
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 3
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 3
35775: PUSH
35776: LD_INT 2
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 3
35785: PUSH
35786: LD_INT 3
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 2
35795: PUSH
35796: LD_INT 3
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 2
35805: NEG
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 3
35816: NEG
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 3
35827: NEG
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 3
35839: NEG
35840: PUSH
35841: LD_INT 2
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 3
35851: NEG
35852: PUSH
35853: LD_INT 3
35855: NEG
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35892: LD_ADDR_VAR 0 45
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: LD_INT 1
35912: NEG
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: PUSH
35931: LD_INT 1
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 1
35961: NEG
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: LD_INT 2
35977: NEG
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 0
35985: PUSH
35986: LD_INT 2
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 1
35996: PUSH
35997: LD_INT 1
35999: NEG
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 2
36007: PUSH
36008: LD_INT 1
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 2
36017: PUSH
36018: LD_INT 2
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: LD_INT 2
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 2
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 2
36058: NEG
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 2
36070: NEG
36071: PUSH
36072: LD_INT 2
36074: NEG
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 2
36082: NEG
36083: PUSH
36084: LD_INT 3
36086: NEG
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: NEG
36095: PUSH
36096: LD_INT 3
36098: NEG
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: LD_INT 3
36109: NEG
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: PUSH
36118: LD_INT 2
36120: NEG
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 3
36128: PUSH
36129: LD_INT 2
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 3
36138: PUSH
36139: LD_INT 3
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 2
36148: PUSH
36149: LD_INT 3
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 1
36158: PUSH
36159: LD_INT 3
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: LD_INT 3
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 1
36178: NEG
36179: PUSH
36180: LD_INT 2
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 3
36189: NEG
36190: PUSH
36191: LD_INT 2
36193: NEG
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 3
36201: NEG
36202: PUSH
36203: LD_INT 3
36205: NEG
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36242: LD_ADDR_VAR 0 46
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: LD_INT 1
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: NEG
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: NEG
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: LD_INT 2
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: LD_INT 2
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: LD_INT 1
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: LD_INT 2
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 1
36397: NEG
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 2
36408: NEG
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 2
36419: NEG
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: LD_INT 3
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 3
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: PUSH
36455: LD_INT 2
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 2
36465: PUSH
36466: LD_INT 1
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 3
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 3
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 1
36496: PUSH
36497: LD_INT 3
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: LD_INT 3
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 1
36516: NEG
36517: PUSH
36518: LD_INT 2
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 2
36527: NEG
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 3
36538: NEG
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 3
36549: NEG
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36590: LD_ADDR_VAR 0 47
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 1
36618: PUSH
36619: LD_INT 0
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 1
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: NEG
36649: PUSH
36650: LD_INT 0
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 1
36659: NEG
36660: PUSH
36661: LD_INT 1
36663: NEG
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 1
36671: NEG
36672: PUSH
36673: LD_INT 2
36675: NEG
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 0
36683: PUSH
36684: LD_INT 2
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: LD_INT 1
36697: NEG
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 2
36705: NEG
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 2
36717: NEG
36718: PUSH
36719: LD_INT 2
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36741: LD_ADDR_VAR 0 48
36745: PUSH
36746: LD_INT 0
36748: PUSH
36749: LD_INT 0
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 0
36758: PUSH
36759: LD_INT 1
36761: NEG
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 0
36789: PUSH
36790: LD_INT 1
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 1
36799: NEG
36800: PUSH
36801: LD_INT 0
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 1
36810: NEG
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 1
36822: NEG
36823: PUSH
36824: LD_INT 2
36826: NEG
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: LD_INT 2
36837: NEG
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 1
36845: PUSH
36846: LD_INT 1
36848: NEG
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 2
36856: PUSH
36857: LD_INT 0
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 2
36866: PUSH
36867: LD_INT 1
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36888: LD_ADDR_VAR 0 49
36892: PUSH
36893: LD_INT 0
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: LD_INT 1
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 1
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: LD_INT 1
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: NEG
36947: PUSH
36948: LD_INT 0
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: LD_INT 1
36961: NEG
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 1
36969: PUSH
36970: LD_INT 1
36972: NEG
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 2
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 2
36990: PUSH
36991: LD_INT 1
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 2
37000: PUSH
37001: LD_INT 2
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 1
37010: PUSH
37011: LD_INT 2
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37032: LD_ADDR_VAR 0 50
37036: PUSH
37037: LD_INT 0
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 0
37049: PUSH
37050: LD_INT 1
37052: NEG
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 1
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 1
37070: PUSH
37071: LD_INT 1
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: LD_INT 1
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: NEG
37091: PUSH
37092: LD_INT 0
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 1
37101: NEG
37102: PUSH
37103: LD_INT 1
37105: NEG
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 2
37123: PUSH
37124: LD_INT 2
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: LD_INT 2
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: LD_INT 1
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37176: LD_ADDR_VAR 0 51
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 1
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 1
37234: NEG
37235: PUSH
37236: LD_INT 0
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: NEG
37246: PUSH
37247: LD_INT 1
37249: NEG
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: LD_INT 2
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: LD_INT 2
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: LD_INT 1
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 2
37288: NEG
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 2
37299: NEG
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37323: LD_ADDR_VAR 0 52
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 0
37340: PUSH
37341: LD_INT 1
37343: NEG
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 1
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: LD_INT 1
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 1
37392: NEG
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: LD_INT 2
37408: NEG
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: LD_INT 1
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 2
37427: NEG
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 2
37438: NEG
37439: PUSH
37440: LD_INT 1
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 2
37450: NEG
37451: PUSH
37452: LD_INT 2
37454: NEG
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37474: LD_ADDR_VAR 0 53
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 0
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 0
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: NEG
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 1
37543: NEG
37544: PUSH
37545: LD_INT 1
37547: NEG
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: NEG
37556: PUSH
37557: LD_INT 2
37559: NEG
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: LD_INT 2
37570: NEG
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 1
37578: PUSH
37579: LD_INT 1
37581: NEG
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 2
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 2
37599: PUSH
37600: LD_INT 1
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: LD_INT 2
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: LD_INT 2
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: LD_INT 2
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: LD_INT 1
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 2
37650: NEG
37651: PUSH
37652: LD_INT 0
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 2
37661: NEG
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 2
37673: NEG
37674: PUSH
37675: LD_INT 2
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37704: LD_ADDR_VAR 0 54
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 0
37721: PUSH
37722: LD_INT 1
37724: NEG
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 1
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 0
37752: PUSH
37753: LD_INT 1
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 1
37773: NEG
37774: PUSH
37775: LD_INT 1
37777: NEG
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 1
37785: NEG
37786: PUSH
37787: LD_INT 2
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: LD_INT 2
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 2
37819: PUSH
37820: LD_INT 0
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 2
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 2
37839: PUSH
37840: LD_INT 2
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: PUSH
37850: LD_INT 2
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: LD_INT 1
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 2
37880: NEG
37881: PUSH
37882: LD_INT 0
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 2
37891: NEG
37892: PUSH
37893: LD_INT 1
37895: NEG
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 2
37903: NEG
37904: PUSH
37905: LD_INT 2
37907: NEG
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37934: LD_ADDR_VAR 0 55
37938: PUSH
37939: LD_INT 0
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: LD_INT 1
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 1
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 1
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 0
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 1
37992: NEG
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 1
38003: NEG
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 1
38015: NEG
38016: PUSH
38017: LD_INT 2
38019: NEG
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: LD_INT 2
38030: NEG
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 1
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 2
38049: PUSH
38050: LD_INT 0
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 2
38059: PUSH
38060: LD_INT 1
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 2
38069: PUSH
38070: LD_INT 2
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: LD_INT 2
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: LD_INT 2
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: LD_INT 1
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 2
38110: NEG
38111: PUSH
38112: LD_INT 0
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 2
38121: NEG
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 2
38133: NEG
38134: PUSH
38135: LD_INT 2
38137: NEG
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38164: LD_ADDR_VAR 0 56
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 0
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: NEG
38223: PUSH
38224: LD_INT 0
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 1
38233: NEG
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: NEG
38246: PUSH
38247: LD_INT 2
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: LD_INT 2
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: LD_INT 1
38271: NEG
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 2
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 2
38289: PUSH
38290: LD_INT 1
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 2
38299: PUSH
38300: LD_INT 2
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: LD_INT 2
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 2
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 2
38340: NEG
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 2
38351: NEG
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 2
38363: NEG
38364: PUSH
38365: LD_INT 2
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38394: LD_ADDR_VAR 0 57
38398: PUSH
38399: LD_INT 0
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 0
38411: PUSH
38412: LD_INT 1
38414: NEG
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 1
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: LD_INT 1
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 0
38442: PUSH
38443: LD_INT 1
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 1
38452: NEG
38453: PUSH
38454: LD_INT 0
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 1
38463: NEG
38464: PUSH
38465: LD_INT 1
38467: NEG
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 1
38475: NEG
38476: PUSH
38477: LD_INT 2
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 0
38487: PUSH
38488: LD_INT 2
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 1
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 2
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 2
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 2
38529: PUSH
38530: LD_INT 2
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 1
38539: PUSH
38540: LD_INT 2
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 1
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 2
38570: NEG
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 2
38581: NEG
38582: PUSH
38583: LD_INT 1
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 2
38593: NEG
38594: PUSH
38595: LD_INT 2
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38624: LD_ADDR_VAR 0 58
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 1
38693: NEG
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 1
38705: NEG
38706: PUSH
38707: LD_INT 2
38709: NEG
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: LD_INT 2
38720: NEG
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 2
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 2
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 2
38759: PUSH
38760: LD_INT 2
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: LD_INT 2
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 2
38800: NEG
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 2
38811: NEG
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 2
38823: NEG
38824: PUSH
38825: LD_INT 2
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38854: LD_ADDR_VAR 0 59
38858: PUSH
38859: LD_INT 0
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 0
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 0
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 1
38923: NEG
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38942: LD_ADDR_VAR 0 60
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: LD_INT 0
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 0
38959: PUSH
38960: LD_INT 1
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 1
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: NEG
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: NEG
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39030: LD_ADDR_VAR 0 61
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 0
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 1
39099: NEG
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39118: LD_ADDR_VAR 0 62
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: NEG
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 1
39187: NEG
39188: PUSH
39189: LD_INT 1
39191: NEG
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39206: LD_ADDR_VAR 0 63
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 1
39264: NEG
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39294: LD_ADDR_VAR 0 64
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 1
39314: NEG
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: LD_INT 1
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: NEG
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: ST_TO_ADDR
// end ; 1 :
39382: GO 45279
39384: LD_INT 1
39386: DOUBLE
39387: EQUAL
39388: IFTRUE 39392
39390: GO 42015
39392: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39393: LD_ADDR_VAR 0 11
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: LD_INT 3
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: LD_INT 3
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: LD_INT 2
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: LIST
39436: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39437: LD_ADDR_VAR 0 12
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 3
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 3
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: LIST
39477: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39478: LD_ADDR_VAR 0 13
39482: PUSH
39483: LD_INT 3
39485: PUSH
39486: LD_INT 2
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 3
39495: PUSH
39496: LD_INT 3
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: LD_INT 3
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: LIST
39517: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39518: LD_ADDR_VAR 0 14
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: LD_INT 3
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: LD_INT 3
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: PUSH
39547: LD_INT 2
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: LIST
39558: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39559: LD_ADDR_VAR 0 15
39563: PUSH
39564: LD_INT 2
39566: NEG
39567: PUSH
39568: LD_INT 1
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 3
39577: NEG
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 3
39588: NEG
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: LIST
39602: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39603: LD_ADDR_VAR 0 16
39607: PUSH
39608: LD_INT 2
39610: NEG
39611: PUSH
39612: LD_INT 3
39614: NEG
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 3
39622: NEG
39623: PUSH
39624: LD_INT 2
39626: NEG
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 3
39634: NEG
39635: PUSH
39636: LD_INT 3
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: LIST
39648: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39649: LD_ADDR_VAR 0 17
39653: PUSH
39654: LD_INT 1
39656: NEG
39657: PUSH
39658: LD_INT 3
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: LD_INT 3
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: LD_INT 2
39682: NEG
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: LIST
39692: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39693: LD_ADDR_VAR 0 18
39697: PUSH
39698: LD_INT 2
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 3
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 3
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: LIST
39733: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39734: LD_ADDR_VAR 0 19
39738: PUSH
39739: LD_INT 3
39741: PUSH
39742: LD_INT 2
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 3
39751: PUSH
39752: LD_INT 3
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 2
39761: PUSH
39762: LD_INT 3
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: LIST
39773: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39774: LD_ADDR_VAR 0 20
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: LD_INT 3
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: LD_INT 3
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: LIST
39814: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39815: LD_ADDR_VAR 0 21
39819: PUSH
39820: LD_INT 2
39822: NEG
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 3
39833: NEG
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 3
39844: NEG
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: LIST
39858: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39859: LD_ADDR_VAR 0 22
39863: PUSH
39864: LD_INT 2
39866: NEG
39867: PUSH
39868: LD_INT 3
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 3
39878: NEG
39879: PUSH
39880: LD_INT 2
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 3
39890: NEG
39891: PUSH
39892: LD_INT 3
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: LIST
39904: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39905: LD_ADDR_VAR 0 23
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 3
39915: NEG
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: LD_INT 4
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: LD_INT 3
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: LIST
39948: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39949: LD_ADDR_VAR 0 24
39953: PUSH
39954: LD_INT 3
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 3
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 4
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: LIST
39989: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39990: LD_ADDR_VAR 0 25
39994: PUSH
39995: LD_INT 3
39997: PUSH
39998: LD_INT 3
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 4
40007: PUSH
40008: LD_INT 3
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 3
40017: PUSH
40018: LD_INT 4
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: LIST
40029: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
40030: LD_ADDR_VAR 0 26
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: LD_INT 3
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 4
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: LD_INT 3
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: LIST
40070: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
40071: LD_ADDR_VAR 0 27
40075: PUSH
40076: LD_INT 3
40078: NEG
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 3
40089: NEG
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 4
40100: NEG
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
40115: LD_ADDR_VAR 0 28
40119: PUSH
40120: LD_INT 3
40122: NEG
40123: PUSH
40124: LD_INT 3
40126: NEG
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 3
40134: NEG
40135: PUSH
40136: LD_INT 4
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 4
40146: NEG
40147: PUSH
40148: LD_INT 3
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: LIST
40160: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
40161: LD_ADDR_VAR 0 29
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: LD_INT 3
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: LD_INT 3
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: LD_INT 2
40194: NEG
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: LD_INT 4
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: LD_INT 4
40217: NEG
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: LD_INT 3
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 1
40236: NEG
40237: PUSH
40238: LD_INT 5
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: LD_INT 5
40251: NEG
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: LD_INT 4
40262: NEG
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: NEG
40271: PUSH
40272: LD_INT 6
40274: NEG
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: LD_INT 6
40285: NEG
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 1
40293: PUSH
40294: LD_INT 5
40296: NEG
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
40316: LD_ADDR_VAR 0 30
40320: PUSH
40321: LD_INT 2
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 3
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 3
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 3
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 4
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 4
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 4
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 5
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 5
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 5
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 6
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 6
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
40459: LD_ADDR_VAR 0 31
40463: PUSH
40464: LD_INT 3
40466: PUSH
40467: LD_INT 2
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 3
40476: PUSH
40477: LD_INT 3
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 2
40486: PUSH
40487: LD_INT 3
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 4
40496: PUSH
40497: LD_INT 3
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 4
40506: PUSH
40507: LD_INT 4
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 3
40516: PUSH
40517: LD_INT 4
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 5
40526: PUSH
40527: LD_INT 4
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 5
40536: PUSH
40537: LD_INT 5
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 4
40546: PUSH
40547: LD_INT 5
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 6
40556: PUSH
40557: LD_INT 5
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 6
40566: PUSH
40567: LD_INT 6
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 5
40576: PUSH
40577: LD_INT 6
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
40598: LD_ADDR_VAR 0 32
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: LD_INT 3
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 3
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: LD_INT 2
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 4
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: LD_INT 4
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 3
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: LD_INT 5
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 0
40677: PUSH
40678: LD_INT 5
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: LD_INT 4
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: LD_INT 6
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: LD_INT 6
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: LD_INT 5
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
40741: LD_ADDR_VAR 0 33
40745: PUSH
40746: LD_INT 2
40748: NEG
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 3
40759: NEG
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 3
40770: NEG
40771: PUSH
40772: LD_INT 1
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 3
40782: NEG
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 4
40793: NEG
40794: PUSH
40795: LD_INT 0
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 4
40804: NEG
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 4
40816: NEG
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 5
40827: NEG
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 5
40838: NEG
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 5
40850: NEG
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 6
40861: NEG
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 6
40872: NEG
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40896: LD_ADDR_VAR 0 34
40900: PUSH
40901: LD_INT 2
40903: NEG
40904: PUSH
40905: LD_INT 3
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 3
40915: NEG
40916: PUSH
40917: LD_INT 2
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 3
40927: NEG
40928: PUSH
40929: LD_INT 3
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 3
40939: NEG
40940: PUSH
40941: LD_INT 4
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 4
40951: NEG
40952: PUSH
40953: LD_INT 3
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 4
40963: NEG
40964: PUSH
40965: LD_INT 4
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 4
40975: NEG
40976: PUSH
40977: LD_INT 5
40979: NEG
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 5
40987: NEG
40988: PUSH
40989: LD_INT 4
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 5
40999: NEG
41000: PUSH
41001: LD_INT 5
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 5
41011: NEG
41012: PUSH
41013: LD_INT 6
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 6
41023: NEG
41024: PUSH
41025: LD_INT 5
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 6
41035: NEG
41036: PUSH
41037: LD_INT 6
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
41059: LD_ADDR_VAR 0 41
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: LD_INT 2
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: LD_INT 3
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: LD_INT 2
41092: NEG
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: LIST
41102: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
41103: LD_ADDR_VAR 0 42
41107: PUSH
41108: LD_INT 2
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 2
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 3
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: LIST
41143: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
41144: LD_ADDR_VAR 0 43
41148: PUSH
41149: LD_INT 2
41151: PUSH
41152: LD_INT 2
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 3
41161: PUSH
41162: LD_INT 2
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 2
41171: PUSH
41172: LD_INT 3
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: LIST
41183: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
41184: LD_ADDR_VAR 0 44
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: LD_INT 2
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: LD_INT 3
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: LD_INT 2
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: LIST
41224: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41225: LD_ADDR_VAR 0 45
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 2
41243: NEG
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 3
41254: NEG
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: LIST
41268: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
41269: LD_ADDR_VAR 0 46
41273: PUSH
41274: LD_INT 2
41276: NEG
41277: PUSH
41278: LD_INT 2
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 2
41288: NEG
41289: PUSH
41290: LD_INT 3
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 3
41300: NEG
41301: PUSH
41302: LD_INT 2
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: LIST
41314: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
41315: LD_ADDR_VAR 0 47
41319: PUSH
41320: LD_INT 2
41322: NEG
41323: PUSH
41324: LD_INT 3
41326: NEG
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: PUSH
41336: LD_INT 3
41338: NEG
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41348: LD_ADDR_VAR 0 48
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: LD_INT 2
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
41379: LD_ADDR_VAR 0 49
41383: PUSH
41384: LD_INT 3
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 3
41396: PUSH
41397: LD_INT 2
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
41408: LD_ADDR_VAR 0 50
41412: PUSH
41413: LD_INT 2
41415: PUSH
41416: LD_INT 3
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: LD_INT 3
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41437: LD_ADDR_VAR 0 51
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: LD_INT 2
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41468: LD_ADDR_VAR 0 52
41472: PUSH
41473: LD_INT 3
41475: NEG
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 3
41487: NEG
41488: PUSH
41489: LD_INT 2
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41501: LD_ADDR_VAR 0 53
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: LD_INT 3
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: LD_INT 3
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: LD_INT 2
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: LIST
41544: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41545: LD_ADDR_VAR 0 54
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 3
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 3
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: LIST
41585: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41586: LD_ADDR_VAR 0 55
41590: PUSH
41591: LD_INT 3
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 3
41603: PUSH
41604: LD_INT 3
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 2
41613: PUSH
41614: LD_INT 3
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: LIST
41625: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41626: LD_ADDR_VAR 0 56
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 3
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: LD_INT 3
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: LD_INT 2
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: LIST
41666: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41667: LD_ADDR_VAR 0 57
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 3
41685: NEG
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 3
41696: NEG
41697: PUSH
41698: LD_INT 1
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: LIST
41710: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41711: LD_ADDR_VAR 0 58
41715: PUSH
41716: LD_INT 2
41718: NEG
41719: PUSH
41720: LD_INT 3
41722: NEG
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 3
41730: NEG
41731: PUSH
41732: LD_INT 2
41734: NEG
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 3
41742: NEG
41743: PUSH
41744: LD_INT 3
41746: NEG
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: LIST
41756: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
41757: LD_ADDR_VAR 0 59
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: LD_INT 2
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: LD_INT 2
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: LIST
41800: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41801: LD_ADDR_VAR 0 60
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 2
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 2
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: LIST
41841: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41842: LD_ADDR_VAR 0 61
41846: PUSH
41847: LD_INT 2
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 2
41859: PUSH
41860: LD_INT 2
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: LIST
41881: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41882: LD_ADDR_VAR 0 62
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 2
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: LD_INT 2
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: NEG
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: LIST
41922: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41923: LD_ADDR_VAR 0 63
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: NEG
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 2
41952: NEG
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: LIST
41966: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41967: LD_ADDR_VAR 0 64
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: PUSH
41976: LD_INT 2
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 2
41986: NEG
41987: PUSH
41988: LD_INT 1
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: LD_INT 2
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: LIST
42012: ST_TO_ADDR
// end ; 2 :
42013: GO 45279
42015: LD_INT 2
42017: DOUBLE
42018: EQUAL
42019: IFTRUE 42023
42021: GO 45278
42023: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
42024: LD_ADDR_VAR 0 29
42028: PUSH
42029: LD_INT 4
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 4
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 5
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 5
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 4
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 3
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 3
42092: PUSH
42093: LD_INT 1
42095: NEG
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 3
42103: PUSH
42104: LD_INT 2
42106: NEG
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 5
42114: PUSH
42115: LD_INT 2
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 3
42124: PUSH
42125: LD_INT 3
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 3
42134: PUSH
42135: LD_INT 2
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 4
42144: PUSH
42145: LD_INT 3
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 4
42154: PUSH
42155: LD_INT 4
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 3
42164: PUSH
42165: LD_INT 4
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: LD_INT 3
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: LD_INT 2
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 4
42194: PUSH
42195: LD_INT 2
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: PUSH
42205: LD_INT 4
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: LD_INT 4
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: LD_INT 3
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: LD_INT 4
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: LD_INT 5
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: LD_INT 5
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: LD_INT 4
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: LD_INT 3
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: LD_INT 5
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 2
42296: NEG
42297: PUSH
42298: LD_INT 3
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 3
42307: NEG
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 3
42318: NEG
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 2
42330: NEG
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: LD_INT 1
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 3
42352: NEG
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 4
42363: NEG
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 4
42374: NEG
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 4
42386: NEG
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 2
42398: NEG
42399: PUSH
42400: LD_INT 2
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 4
42409: NEG
42410: PUSH
42411: LD_INT 4
42413: NEG
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 4
42421: NEG
42422: PUSH
42423: LD_INT 5
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 3
42433: NEG
42434: PUSH
42435: LD_INT 4
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 3
42445: NEG
42446: PUSH
42447: LD_INT 3
42449: NEG
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 4
42457: NEG
42458: PUSH
42459: LD_INT 3
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 5
42469: NEG
42470: PUSH
42471: LD_INT 4
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 5
42481: NEG
42482: PUSH
42483: LD_INT 5
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 3
42493: NEG
42494: PUSH
42495: LD_INT 5
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 5
42505: NEG
42506: PUSH
42507: LD_INT 3
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
42562: LD_ADDR_VAR 0 30
42566: PUSH
42567: LD_INT 4
42569: PUSH
42570: LD_INT 4
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 4
42579: PUSH
42580: LD_INT 3
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 5
42589: PUSH
42590: LD_INT 4
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 5
42599: PUSH
42600: LD_INT 5
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 4
42609: PUSH
42610: LD_INT 5
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 3
42619: PUSH
42620: LD_INT 4
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 3
42629: PUSH
42630: LD_INT 3
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 5
42639: PUSH
42640: LD_INT 3
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 3
42649: PUSH
42650: LD_INT 5
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: LD_INT 3
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: LD_INT 2
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: LD_INT 3
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: LD_INT 4
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: LD_INT 4
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: LD_INT 3
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: LD_INT 2
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 2
42731: PUSH
42732: LD_INT 4
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 4
42752: NEG
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 4
42763: NEG
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 3
42775: NEG
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 3
42786: NEG
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 4
42797: NEG
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 5
42808: NEG
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 5
42819: NEG
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 5
42831: NEG
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 3
42843: NEG
42844: PUSH
42845: LD_INT 2
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 3
42854: NEG
42855: PUSH
42856: LD_INT 3
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 3
42866: NEG
42867: PUSH
42868: LD_INT 4
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: LD_INT 3
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 2
42890: NEG
42891: PUSH
42892: LD_INT 2
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 3
42902: NEG
42903: PUSH
42904: LD_INT 2
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 4
42914: NEG
42915: PUSH
42916: LD_INT 3
42918: NEG
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 4
42926: NEG
42927: PUSH
42928: LD_INT 4
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 2
42938: NEG
42939: PUSH
42940: LD_INT 4
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 4
42950: NEG
42951: PUSH
42952: LD_INT 2
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: LD_INT 4
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: LD_INT 5
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 4
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: LD_INT 3
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: LD_INT 3
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: LD_INT 4
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 5
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 2
43041: PUSH
43042: LD_INT 3
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: LD_INT 5
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
43109: LD_ADDR_VAR 0 31
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: LD_INT 4
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: LD_INT 3
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: LD_INT 4
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: LD_INT 5
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 0
43156: PUSH
43157: LD_INT 5
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: NEG
43167: PUSH
43168: LD_INT 4
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 1
43177: NEG
43178: PUSH
43179: LD_INT 3
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: LD_INT 5
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 2
43198: NEG
43199: PUSH
43200: LD_INT 3
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 3
43209: NEG
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 3
43220: NEG
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 2
43232: NEG
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 2
43243: NEG
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 3
43254: NEG
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 4
43265: NEG
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 4
43276: NEG
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 4
43288: NEG
43289: PUSH
43290: LD_INT 2
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 2
43300: NEG
43301: PUSH
43302: LD_INT 2
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 4
43311: NEG
43312: PUSH
43313: LD_INT 4
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 4
43323: NEG
43324: PUSH
43325: LD_INT 5
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 3
43335: NEG
43336: PUSH
43337: LD_INT 4
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: NEG
43348: PUSH
43349: LD_INT 3
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 4
43359: NEG
43360: PUSH
43361: LD_INT 3
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 5
43371: NEG
43372: PUSH
43373: LD_INT 4
43375: NEG
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 5
43383: NEG
43384: PUSH
43385: LD_INT 5
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 3
43395: NEG
43396: PUSH
43397: LD_INT 5
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 5
43407: NEG
43408: PUSH
43409: LD_INT 3
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: LD_INT 3
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: LD_INT 4
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: LD_INT 3
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: LD_INT 2
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: LD_INT 2
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: LD_INT 3
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: LD_INT 4
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: PUSH
43499: LD_INT 2
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 2
43509: NEG
43510: PUSH
43511: LD_INT 4
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 4
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 4
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 5
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 5
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 4
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 3
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 3
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 3
43593: PUSH
43594: LD_INT 2
43596: NEG
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 5
43604: PUSH
43605: LD_INT 2
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
43659: LD_ADDR_VAR 0 32
43663: PUSH
43664: LD_INT 4
43666: NEG
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 4
43677: NEG
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 3
43689: NEG
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 3
43700: NEG
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 4
43711: NEG
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 5
43722: NEG
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 5
43733: NEG
43734: PUSH
43735: LD_INT 1
43737: NEG
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 5
43745: NEG
43746: PUSH
43747: LD_INT 2
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 3
43757: NEG
43758: PUSH
43759: LD_INT 2
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 3
43768: NEG
43769: PUSH
43770: LD_INT 3
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 3
43780: NEG
43781: PUSH
43782: LD_INT 4
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: LD_INT 3
43796: NEG
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 2
43804: NEG
43805: PUSH
43806: LD_INT 2
43808: NEG
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 3
43816: NEG
43817: PUSH
43818: LD_INT 2
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 4
43828: NEG
43829: PUSH
43830: LD_INT 3
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 4
43840: NEG
43841: PUSH
43842: LD_INT 4
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: NEG
43853: PUSH
43854: LD_INT 4
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 4
43864: NEG
43865: PUSH
43866: LD_INT 2
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: LD_INT 4
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: LD_INT 5
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: LD_INT 4
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: LD_INT 3
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 3
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: LD_INT 4
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: LD_INT 5
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: LD_INT 3
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 2
43966: NEG
43967: PUSH
43968: LD_INT 5
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 3
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 3
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 4
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 4
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 3
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 4
44061: PUSH
44062: LD_INT 2
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 4
44071: PUSH
44072: LD_INT 4
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 4
44081: PUSH
44082: LD_INT 3
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 5
44091: PUSH
44092: LD_INT 4
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 5
44101: PUSH
44102: LD_INT 5
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 4
44111: PUSH
44112: LD_INT 5
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 3
44121: PUSH
44122: LD_INT 4
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 3
44131: PUSH
44132: LD_INT 3
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 5
44141: PUSH
44142: LD_INT 3
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 3
44151: PUSH
44152: LD_INT 5
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
44206: LD_ADDR_VAR 0 33
44210: PUSH
44211: LD_INT 4
44213: NEG
44214: PUSH
44215: LD_INT 4
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 4
44225: NEG
44226: PUSH
44227: LD_INT 5
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 3
44237: NEG
44238: PUSH
44239: LD_INT 4
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 3
44249: NEG
44250: PUSH
44251: LD_INT 3
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 4
44261: NEG
44262: PUSH
44263: LD_INT 3
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 5
44273: NEG
44274: PUSH
44275: LD_INT 4
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 5
44285: NEG
44286: PUSH
44287: LD_INT 5
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 3
44297: NEG
44298: PUSH
44299: LD_INT 5
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 5
44309: NEG
44310: PUSH
44311: LD_INT 3
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: LD_INT 3
44324: NEG
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: LD_INT 4
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: LD_INT 3
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: LD_INT 2
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: LD_INT 2
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: LD_INT 3
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 4
44392: NEG
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: LD_INT 2
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 2
44411: NEG
44412: PUSH
44413: LD_INT 4
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 4
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 4
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 5
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 5
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 4
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 3
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 3
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 3
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 5
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 3
44516: PUSH
44517: LD_INT 3
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 3
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 4
44536: PUSH
44537: LD_INT 3
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 4
44546: PUSH
44547: LD_INT 4
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 3
44556: PUSH
44557: LD_INT 4
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 2
44566: PUSH
44567: LD_INT 3
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 2
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 4
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: LD_INT 4
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: LD_INT 4
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 3
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: LD_INT 4
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: LD_INT 5
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: LD_INT 5
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: NEG
44657: PUSH
44658: LD_INT 4
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: NEG
44668: PUSH
44669: LD_INT 3
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 2
44678: PUSH
44679: LD_INT 5
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 2
44688: NEG
44689: PUSH
44690: LD_INT 3
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
44744: LD_ADDR_VAR 0 34
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 4
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: LD_INT 5
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: LD_INT 4
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: LD_INT 3
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 3
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: LD_INT 4
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 5
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: LD_INT 3
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 2
44841: NEG
44842: PUSH
44843: LD_INT 5
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 3
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 3
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 4
44874: PUSH
44875: LD_INT 0
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 4
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 3
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: LD_INT 2
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 4
44936: PUSH
44937: LD_INT 2
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 4
44946: PUSH
44947: LD_INT 4
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 4
44956: PUSH
44957: LD_INT 3
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 5
44966: PUSH
44967: LD_INT 4
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 5
44976: PUSH
44977: LD_INT 5
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 4
44986: PUSH
44987: LD_INT 5
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 3
44996: PUSH
44997: LD_INT 4
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 3
45006: PUSH
45007: LD_INT 3
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 5
45016: PUSH
45017: LD_INT 3
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 3
45026: PUSH
45027: LD_INT 5
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 3
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: LD_INT 3
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: LD_INT 4
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 4
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: LD_INT 3
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: LD_INT 4
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 4
45129: NEG
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 4
45140: NEG
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 3
45152: NEG
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 3
45163: NEG
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 4
45174: NEG
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 5
45185: NEG
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 5
45196: NEG
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 5
45208: NEG
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 3
45220: NEG
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: ST_TO_ADDR
// end ; end ;
45276: GO 45279
45278: POP
// case btype of b_depot , b_warehouse :
45279: LD_VAR 0 1
45283: PUSH
45284: LD_INT 0
45286: DOUBLE
45287: EQUAL
45288: IFTRUE 45298
45290: LD_INT 1
45292: DOUBLE
45293: EQUAL
45294: IFTRUE 45298
45296: GO 45499
45298: POP
// case nation of nation_american :
45299: LD_VAR 0 5
45303: PUSH
45304: LD_INT 1
45306: DOUBLE
45307: EQUAL
45308: IFTRUE 45312
45310: GO 45368
45312: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
45313: LD_ADDR_VAR 0 9
45317: PUSH
45318: LD_VAR 0 11
45322: PUSH
45323: LD_VAR 0 12
45327: PUSH
45328: LD_VAR 0 13
45332: PUSH
45333: LD_VAR 0 14
45337: PUSH
45338: LD_VAR 0 15
45342: PUSH
45343: LD_VAR 0 16
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: PUSH
45356: LD_VAR 0 4
45360: PUSH
45361: LD_INT 1
45363: PLUS
45364: ARRAY
45365: ST_TO_ADDR
45366: GO 45497
45368: LD_INT 2
45370: DOUBLE
45371: EQUAL
45372: IFTRUE 45376
45374: GO 45432
45376: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
45377: LD_ADDR_VAR 0 9
45381: PUSH
45382: LD_VAR 0 17
45386: PUSH
45387: LD_VAR 0 18
45391: PUSH
45392: LD_VAR 0 19
45396: PUSH
45397: LD_VAR 0 20
45401: PUSH
45402: LD_VAR 0 21
45406: PUSH
45407: LD_VAR 0 22
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: PUSH
45420: LD_VAR 0 4
45424: PUSH
45425: LD_INT 1
45427: PLUS
45428: ARRAY
45429: ST_TO_ADDR
45430: GO 45497
45432: LD_INT 3
45434: DOUBLE
45435: EQUAL
45436: IFTRUE 45440
45438: GO 45496
45440: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
45441: LD_ADDR_VAR 0 9
45445: PUSH
45446: LD_VAR 0 23
45450: PUSH
45451: LD_VAR 0 24
45455: PUSH
45456: LD_VAR 0 25
45460: PUSH
45461: LD_VAR 0 26
45465: PUSH
45466: LD_VAR 0 27
45470: PUSH
45471: LD_VAR 0 28
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: PUSH
45484: LD_VAR 0 4
45488: PUSH
45489: LD_INT 1
45491: PLUS
45492: ARRAY
45493: ST_TO_ADDR
45494: GO 45497
45496: POP
45497: GO 46046
45499: LD_INT 2
45501: DOUBLE
45502: EQUAL
45503: IFTRUE 45513
45505: LD_INT 3
45507: DOUBLE
45508: EQUAL
45509: IFTRUE 45513
45511: GO 45569
45513: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
45514: LD_ADDR_VAR 0 9
45518: PUSH
45519: LD_VAR 0 29
45523: PUSH
45524: LD_VAR 0 30
45528: PUSH
45529: LD_VAR 0 31
45533: PUSH
45534: LD_VAR 0 32
45538: PUSH
45539: LD_VAR 0 33
45543: PUSH
45544: LD_VAR 0 34
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: PUSH
45557: LD_VAR 0 4
45561: PUSH
45562: LD_INT 1
45564: PLUS
45565: ARRAY
45566: ST_TO_ADDR
45567: GO 46046
45569: LD_INT 16
45571: DOUBLE
45572: EQUAL
45573: IFTRUE 45625
45575: LD_INT 17
45577: DOUBLE
45578: EQUAL
45579: IFTRUE 45625
45581: LD_INT 18
45583: DOUBLE
45584: EQUAL
45585: IFTRUE 45625
45587: LD_INT 19
45589: DOUBLE
45590: EQUAL
45591: IFTRUE 45625
45593: LD_INT 20
45595: DOUBLE
45596: EQUAL
45597: IFTRUE 45625
45599: LD_INT 21
45601: DOUBLE
45602: EQUAL
45603: IFTRUE 45625
45605: LD_INT 23
45607: DOUBLE
45608: EQUAL
45609: IFTRUE 45625
45611: LD_INT 24
45613: DOUBLE
45614: EQUAL
45615: IFTRUE 45625
45617: LD_INT 25
45619: DOUBLE
45620: EQUAL
45621: IFTRUE 45625
45623: GO 45681
45625: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
45626: LD_ADDR_VAR 0 9
45630: PUSH
45631: LD_VAR 0 35
45635: PUSH
45636: LD_VAR 0 36
45640: PUSH
45641: LD_VAR 0 37
45645: PUSH
45646: LD_VAR 0 38
45650: PUSH
45651: LD_VAR 0 39
45655: PUSH
45656: LD_VAR 0 40
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: PUSH
45669: LD_VAR 0 4
45673: PUSH
45674: LD_INT 1
45676: PLUS
45677: ARRAY
45678: ST_TO_ADDR
45679: GO 46046
45681: LD_INT 6
45683: DOUBLE
45684: EQUAL
45685: IFTRUE 45737
45687: LD_INT 7
45689: DOUBLE
45690: EQUAL
45691: IFTRUE 45737
45693: LD_INT 8
45695: DOUBLE
45696: EQUAL
45697: IFTRUE 45737
45699: LD_INT 13
45701: DOUBLE
45702: EQUAL
45703: IFTRUE 45737
45705: LD_INT 12
45707: DOUBLE
45708: EQUAL
45709: IFTRUE 45737
45711: LD_INT 15
45713: DOUBLE
45714: EQUAL
45715: IFTRUE 45737
45717: LD_INT 11
45719: DOUBLE
45720: EQUAL
45721: IFTRUE 45737
45723: LD_INT 14
45725: DOUBLE
45726: EQUAL
45727: IFTRUE 45737
45729: LD_INT 10
45731: DOUBLE
45732: EQUAL
45733: IFTRUE 45737
45735: GO 45793
45737: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
45738: LD_ADDR_VAR 0 9
45742: PUSH
45743: LD_VAR 0 41
45747: PUSH
45748: LD_VAR 0 42
45752: PUSH
45753: LD_VAR 0 43
45757: PUSH
45758: LD_VAR 0 44
45762: PUSH
45763: LD_VAR 0 45
45767: PUSH
45768: LD_VAR 0 46
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: PUSH
45781: LD_VAR 0 4
45785: PUSH
45786: LD_INT 1
45788: PLUS
45789: ARRAY
45790: ST_TO_ADDR
45791: GO 46046
45793: LD_INT 36
45795: DOUBLE
45796: EQUAL
45797: IFTRUE 45801
45799: GO 45857
45801: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
45802: LD_ADDR_VAR 0 9
45806: PUSH
45807: LD_VAR 0 47
45811: PUSH
45812: LD_VAR 0 48
45816: PUSH
45817: LD_VAR 0 49
45821: PUSH
45822: LD_VAR 0 50
45826: PUSH
45827: LD_VAR 0 51
45831: PUSH
45832: LD_VAR 0 52
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: PUSH
45845: LD_VAR 0 4
45849: PUSH
45850: LD_INT 1
45852: PLUS
45853: ARRAY
45854: ST_TO_ADDR
45855: GO 46046
45857: LD_INT 4
45859: DOUBLE
45860: EQUAL
45861: IFTRUE 45883
45863: LD_INT 5
45865: DOUBLE
45866: EQUAL
45867: IFTRUE 45883
45869: LD_INT 34
45871: DOUBLE
45872: EQUAL
45873: IFTRUE 45883
45875: LD_INT 37
45877: DOUBLE
45878: EQUAL
45879: IFTRUE 45883
45881: GO 45939
45883: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45884: LD_ADDR_VAR 0 9
45888: PUSH
45889: LD_VAR 0 53
45893: PUSH
45894: LD_VAR 0 54
45898: PUSH
45899: LD_VAR 0 55
45903: PUSH
45904: LD_VAR 0 56
45908: PUSH
45909: LD_VAR 0 57
45913: PUSH
45914: LD_VAR 0 58
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: PUSH
45927: LD_VAR 0 4
45931: PUSH
45932: LD_INT 1
45934: PLUS
45935: ARRAY
45936: ST_TO_ADDR
45937: GO 46046
45939: LD_INT 31
45941: DOUBLE
45942: EQUAL
45943: IFTRUE 45989
45945: LD_INT 32
45947: DOUBLE
45948: EQUAL
45949: IFTRUE 45989
45951: LD_INT 33
45953: DOUBLE
45954: EQUAL
45955: IFTRUE 45989
45957: LD_INT 27
45959: DOUBLE
45960: EQUAL
45961: IFTRUE 45989
45963: LD_INT 26
45965: DOUBLE
45966: EQUAL
45967: IFTRUE 45989
45969: LD_INT 28
45971: DOUBLE
45972: EQUAL
45973: IFTRUE 45989
45975: LD_INT 29
45977: DOUBLE
45978: EQUAL
45979: IFTRUE 45989
45981: LD_INT 30
45983: DOUBLE
45984: EQUAL
45985: IFTRUE 45989
45987: GO 46045
45989: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
45990: LD_ADDR_VAR 0 9
45994: PUSH
45995: LD_VAR 0 59
45999: PUSH
46000: LD_VAR 0 60
46004: PUSH
46005: LD_VAR 0 61
46009: PUSH
46010: LD_VAR 0 62
46014: PUSH
46015: LD_VAR 0 63
46019: PUSH
46020: LD_VAR 0 64
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: PUSH
46033: LD_VAR 0 4
46037: PUSH
46038: LD_INT 1
46040: PLUS
46041: ARRAY
46042: ST_TO_ADDR
46043: GO 46046
46045: POP
// temp_list2 = [ ] ;
46046: LD_ADDR_VAR 0 10
46050: PUSH
46051: EMPTY
46052: ST_TO_ADDR
// for i in temp_list do
46053: LD_ADDR_VAR 0 8
46057: PUSH
46058: LD_VAR 0 9
46062: PUSH
46063: FOR_IN
46064: IFFALSE 46116
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
46066: LD_ADDR_VAR 0 10
46070: PUSH
46071: LD_VAR 0 10
46075: PUSH
46076: LD_VAR 0 8
46080: PUSH
46081: LD_INT 1
46083: ARRAY
46084: PUSH
46085: LD_VAR 0 2
46089: PLUS
46090: PUSH
46091: LD_VAR 0 8
46095: PUSH
46096: LD_INT 2
46098: ARRAY
46099: PUSH
46100: LD_VAR 0 3
46104: PLUS
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: EMPTY
46111: LIST
46112: ADD
46113: ST_TO_ADDR
46114: GO 46063
46116: POP
46117: POP
// result = temp_list2 ;
46118: LD_ADDR_VAR 0 7
46122: PUSH
46123: LD_VAR 0 10
46127: ST_TO_ADDR
// end ;
46128: LD_VAR 0 7
46132: RET
// export function EnemyInRange ( unit , dist ) ; begin
46133: LD_INT 0
46135: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
46136: LD_ADDR_VAR 0 3
46140: PUSH
46141: LD_VAR 0 1
46145: PPUSH
46146: CALL_OW 255
46150: PPUSH
46151: LD_VAR 0 1
46155: PPUSH
46156: CALL_OW 250
46160: PPUSH
46161: LD_VAR 0 1
46165: PPUSH
46166: CALL_OW 251
46170: PPUSH
46171: LD_VAR 0 2
46175: PPUSH
46176: CALL 20626 0 4
46180: PUSH
46181: LD_INT 4
46183: ARRAY
46184: ST_TO_ADDR
// end ;
46185: LD_VAR 0 3
46189: RET
// export function PlayerSeeMe ( unit ) ; begin
46190: LD_INT 0
46192: PPUSH
// result := See ( your_side , unit ) ;
46193: LD_ADDR_VAR 0 2
46197: PUSH
46198: LD_OWVAR 2
46202: PPUSH
46203: LD_VAR 0 1
46207: PPUSH
46208: CALL_OW 292
46212: ST_TO_ADDR
// end ;
46213: LD_VAR 0 2
46217: RET
// export function ReverseDir ( unit ) ; begin
46218: LD_INT 0
46220: PPUSH
// if not unit then
46221: LD_VAR 0 1
46225: NOT
46226: IFFALSE 46230
// exit ;
46228: GO 46276
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
46230: LD_ADDR_VAR 0 2
46234: PUSH
46235: LD_INT 3
46237: PUSH
46238: LD_INT 4
46240: PUSH
46241: LD_INT 5
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: PUSH
46261: LD_VAR 0 1
46265: PPUSH
46266: CALL_OW 254
46270: PUSH
46271: LD_INT 1
46273: PLUS
46274: ARRAY
46275: ST_TO_ADDR
// end ;
46276: LD_VAR 0 2
46280: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
46281: LD_INT 0
46283: PPUSH
46284: PPUSH
46285: PPUSH
46286: PPUSH
46287: PPUSH
// if not hexes then
46288: LD_VAR 0 2
46292: NOT
46293: IFFALSE 46297
// exit ;
46295: GO 46445
// dist := 9999 ;
46297: LD_ADDR_VAR 0 5
46301: PUSH
46302: LD_INT 9999
46304: ST_TO_ADDR
// for i = 1 to hexes do
46305: LD_ADDR_VAR 0 4
46309: PUSH
46310: DOUBLE
46311: LD_INT 1
46313: DEC
46314: ST_TO_ADDR
46315: LD_VAR 0 2
46319: PUSH
46320: FOR_TO
46321: IFFALSE 46433
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
46323: LD_VAR 0 1
46327: PPUSH
46328: LD_VAR 0 2
46332: PUSH
46333: LD_VAR 0 4
46337: ARRAY
46338: PUSH
46339: LD_INT 1
46341: ARRAY
46342: PPUSH
46343: LD_VAR 0 2
46347: PUSH
46348: LD_VAR 0 4
46352: ARRAY
46353: PUSH
46354: LD_INT 2
46356: ARRAY
46357: PPUSH
46358: CALL_OW 297
46362: PUSH
46363: LD_VAR 0 5
46367: LESS
46368: IFFALSE 46431
// begin hex := hexes [ i ] ;
46370: LD_ADDR_VAR 0 7
46374: PUSH
46375: LD_VAR 0 2
46379: PUSH
46380: LD_VAR 0 4
46384: ARRAY
46385: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46386: LD_ADDR_VAR 0 5
46390: PUSH
46391: LD_VAR 0 1
46395: PPUSH
46396: LD_VAR 0 2
46400: PUSH
46401: LD_VAR 0 4
46405: ARRAY
46406: PUSH
46407: LD_INT 1
46409: ARRAY
46410: PPUSH
46411: LD_VAR 0 2
46415: PUSH
46416: LD_VAR 0 4
46420: ARRAY
46421: PUSH
46422: LD_INT 2
46424: ARRAY
46425: PPUSH
46426: CALL_OW 297
46430: ST_TO_ADDR
// end ; end ;
46431: GO 46320
46433: POP
46434: POP
// result := hex ;
46435: LD_ADDR_VAR 0 3
46439: PUSH
46440: LD_VAR 0 7
46444: ST_TO_ADDR
// end ;
46445: LD_VAR 0 3
46449: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
46450: LD_INT 0
46452: PPUSH
46453: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
46454: LD_VAR 0 1
46458: NOT
46459: PUSH
46460: LD_VAR 0 1
46464: PUSH
46465: LD_INT 21
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 23
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PPUSH
46489: CALL_OW 69
46493: IN
46494: NOT
46495: OR
46496: IFFALSE 46500
// exit ;
46498: GO 46547
// for i = 1 to 3 do
46500: LD_ADDR_VAR 0 3
46504: PUSH
46505: DOUBLE
46506: LD_INT 1
46508: DEC
46509: ST_TO_ADDR
46510: LD_INT 3
46512: PUSH
46513: FOR_TO
46514: IFFALSE 46545
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
46516: LD_VAR 0 1
46520: PPUSH
46521: CALL_OW 250
46525: PPUSH
46526: LD_VAR 0 1
46530: PPUSH
46531: CALL_OW 251
46535: PPUSH
46536: LD_INT 1
46538: PPUSH
46539: CALL_OW 453
46543: GO 46513
46545: POP
46546: POP
// end ;
46547: LD_VAR 0 2
46551: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
46552: LD_INT 0
46554: PPUSH
46555: PPUSH
46556: PPUSH
46557: PPUSH
46558: PPUSH
46559: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
46560: LD_VAR 0 1
46564: NOT
46565: PUSH
46566: LD_VAR 0 2
46570: NOT
46571: OR
46572: PUSH
46573: LD_VAR 0 1
46577: PPUSH
46578: CALL_OW 314
46582: OR
46583: IFFALSE 46587
// exit ;
46585: GO 47028
// x := GetX ( enemy_unit ) ;
46587: LD_ADDR_VAR 0 7
46591: PUSH
46592: LD_VAR 0 2
46596: PPUSH
46597: CALL_OW 250
46601: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
46602: LD_ADDR_VAR 0 8
46606: PUSH
46607: LD_VAR 0 2
46611: PPUSH
46612: CALL_OW 251
46616: ST_TO_ADDR
// if not x or not y then
46617: LD_VAR 0 7
46621: NOT
46622: PUSH
46623: LD_VAR 0 8
46627: NOT
46628: OR
46629: IFFALSE 46633
// exit ;
46631: GO 47028
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
46633: LD_ADDR_VAR 0 6
46637: PUSH
46638: LD_VAR 0 7
46642: PPUSH
46643: LD_INT 0
46645: PPUSH
46646: LD_INT 4
46648: PPUSH
46649: CALL_OW 272
46653: PUSH
46654: LD_VAR 0 8
46658: PPUSH
46659: LD_INT 0
46661: PPUSH
46662: LD_INT 4
46664: PPUSH
46665: CALL_OW 273
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_VAR 0 7
46678: PPUSH
46679: LD_INT 1
46681: PPUSH
46682: LD_INT 4
46684: PPUSH
46685: CALL_OW 272
46689: PUSH
46690: LD_VAR 0 8
46694: PPUSH
46695: LD_INT 1
46697: PPUSH
46698: LD_INT 4
46700: PPUSH
46701: CALL_OW 273
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_VAR 0 7
46714: PPUSH
46715: LD_INT 2
46717: PPUSH
46718: LD_INT 4
46720: PPUSH
46721: CALL_OW 272
46725: PUSH
46726: LD_VAR 0 8
46730: PPUSH
46731: LD_INT 2
46733: PPUSH
46734: LD_INT 4
46736: PPUSH
46737: CALL_OW 273
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_VAR 0 7
46750: PPUSH
46751: LD_INT 3
46753: PPUSH
46754: LD_INT 4
46756: PPUSH
46757: CALL_OW 272
46761: PUSH
46762: LD_VAR 0 8
46766: PPUSH
46767: LD_INT 3
46769: PPUSH
46770: LD_INT 4
46772: PPUSH
46773: CALL_OW 273
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_VAR 0 7
46786: PPUSH
46787: LD_INT 4
46789: PPUSH
46790: LD_INT 4
46792: PPUSH
46793: CALL_OW 272
46797: PUSH
46798: LD_VAR 0 8
46802: PPUSH
46803: LD_INT 4
46805: PPUSH
46806: LD_INT 4
46808: PPUSH
46809: CALL_OW 273
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_VAR 0 7
46822: PPUSH
46823: LD_INT 5
46825: PPUSH
46826: LD_INT 4
46828: PPUSH
46829: CALL_OW 272
46833: PUSH
46834: LD_VAR 0 8
46838: PPUSH
46839: LD_INT 5
46841: PPUSH
46842: LD_INT 4
46844: PPUSH
46845: CALL_OW 273
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: ST_TO_ADDR
// for i = tmp downto 1 do
46862: LD_ADDR_VAR 0 4
46866: PUSH
46867: DOUBLE
46868: LD_VAR 0 6
46872: INC
46873: ST_TO_ADDR
46874: LD_INT 1
46876: PUSH
46877: FOR_DOWNTO
46878: IFFALSE 46979
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
46880: LD_VAR 0 6
46884: PUSH
46885: LD_VAR 0 4
46889: ARRAY
46890: PUSH
46891: LD_INT 1
46893: ARRAY
46894: PPUSH
46895: LD_VAR 0 6
46899: PUSH
46900: LD_VAR 0 4
46904: ARRAY
46905: PUSH
46906: LD_INT 2
46908: ARRAY
46909: PPUSH
46910: CALL_OW 488
46914: NOT
46915: PUSH
46916: LD_VAR 0 6
46920: PUSH
46921: LD_VAR 0 4
46925: ARRAY
46926: PUSH
46927: LD_INT 1
46929: ARRAY
46930: PPUSH
46931: LD_VAR 0 6
46935: PUSH
46936: LD_VAR 0 4
46940: ARRAY
46941: PUSH
46942: LD_INT 2
46944: ARRAY
46945: PPUSH
46946: CALL_OW 428
46950: PUSH
46951: LD_INT 0
46953: NONEQUAL
46954: OR
46955: IFFALSE 46977
// tmp := Delete ( tmp , i ) ;
46957: LD_ADDR_VAR 0 6
46961: PUSH
46962: LD_VAR 0 6
46966: PPUSH
46967: LD_VAR 0 4
46971: PPUSH
46972: CALL_OW 3
46976: ST_TO_ADDR
46977: GO 46877
46979: POP
46980: POP
// j := GetClosestHex ( unit , tmp ) ;
46981: LD_ADDR_VAR 0 5
46985: PUSH
46986: LD_VAR 0 1
46990: PPUSH
46991: LD_VAR 0 6
46995: PPUSH
46996: CALL 46281 0 2
47000: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
47001: LD_VAR 0 1
47005: PPUSH
47006: LD_VAR 0 5
47010: PUSH
47011: LD_INT 1
47013: ARRAY
47014: PPUSH
47015: LD_VAR 0 5
47019: PUSH
47020: LD_INT 2
47022: ARRAY
47023: PPUSH
47024: CALL_OW 111
// end ;
47028: LD_VAR 0 3
47032: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
47033: LD_INT 0
47035: PPUSH
47036: PPUSH
47037: PPUSH
// uc_side = 0 ;
47038: LD_ADDR_OWVAR 20
47042: PUSH
47043: LD_INT 0
47045: ST_TO_ADDR
// uc_nation = 0 ;
47046: LD_ADDR_OWVAR 21
47050: PUSH
47051: LD_INT 0
47053: ST_TO_ADDR
// InitHc ;
47054: CALL_OW 19
// InitVc ;
47058: CALL_OW 20
// if mastodonts then
47062: LD_VAR 0 6
47066: IFFALSE 47133
// for i = 1 to mastodonts do
47068: LD_ADDR_VAR 0 11
47072: PUSH
47073: DOUBLE
47074: LD_INT 1
47076: DEC
47077: ST_TO_ADDR
47078: LD_VAR 0 6
47082: PUSH
47083: FOR_TO
47084: IFFALSE 47131
// begin vc_chassis := 31 ;
47086: LD_ADDR_OWVAR 37
47090: PUSH
47091: LD_INT 31
47093: ST_TO_ADDR
// vc_control := control_rider ;
47094: LD_ADDR_OWVAR 38
47098: PUSH
47099: LD_INT 4
47101: ST_TO_ADDR
// animal := CreateVehicle ;
47102: LD_ADDR_VAR 0 12
47106: PUSH
47107: CALL_OW 45
47111: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47112: LD_VAR 0 12
47116: PPUSH
47117: LD_VAR 0 8
47121: PPUSH
47122: LD_INT 0
47124: PPUSH
47125: CALL_OW 49
// end ;
47129: GO 47083
47131: POP
47132: POP
// if horses then
47133: LD_VAR 0 5
47137: IFFALSE 47204
// for i = 1 to horses do
47139: LD_ADDR_VAR 0 11
47143: PUSH
47144: DOUBLE
47145: LD_INT 1
47147: DEC
47148: ST_TO_ADDR
47149: LD_VAR 0 5
47153: PUSH
47154: FOR_TO
47155: IFFALSE 47202
// begin hc_class := 21 ;
47157: LD_ADDR_OWVAR 28
47161: PUSH
47162: LD_INT 21
47164: ST_TO_ADDR
// hc_gallery :=  ;
47165: LD_ADDR_OWVAR 33
47169: PUSH
47170: LD_STRING 
47172: ST_TO_ADDR
// animal := CreateHuman ;
47173: LD_ADDR_VAR 0 12
47177: PUSH
47178: CALL_OW 44
47182: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47183: LD_VAR 0 12
47187: PPUSH
47188: LD_VAR 0 8
47192: PPUSH
47193: LD_INT 0
47195: PPUSH
47196: CALL_OW 49
// end ;
47200: GO 47154
47202: POP
47203: POP
// if birds then
47204: LD_VAR 0 1
47208: IFFALSE 47275
// for i = 1 to birds do
47210: LD_ADDR_VAR 0 11
47214: PUSH
47215: DOUBLE
47216: LD_INT 1
47218: DEC
47219: ST_TO_ADDR
47220: LD_VAR 0 1
47224: PUSH
47225: FOR_TO
47226: IFFALSE 47273
// begin hc_class = 18 ;
47228: LD_ADDR_OWVAR 28
47232: PUSH
47233: LD_INT 18
47235: ST_TO_ADDR
// hc_gallery =  ;
47236: LD_ADDR_OWVAR 33
47240: PUSH
47241: LD_STRING 
47243: ST_TO_ADDR
// animal := CreateHuman ;
47244: LD_ADDR_VAR 0 12
47248: PUSH
47249: CALL_OW 44
47253: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47254: LD_VAR 0 12
47258: PPUSH
47259: LD_VAR 0 8
47263: PPUSH
47264: LD_INT 0
47266: PPUSH
47267: CALL_OW 49
// end ;
47271: GO 47225
47273: POP
47274: POP
// if tigers then
47275: LD_VAR 0 2
47279: IFFALSE 47363
// for i = 1 to tigers do
47281: LD_ADDR_VAR 0 11
47285: PUSH
47286: DOUBLE
47287: LD_INT 1
47289: DEC
47290: ST_TO_ADDR
47291: LD_VAR 0 2
47295: PUSH
47296: FOR_TO
47297: IFFALSE 47361
// begin hc_class = class_tiger ;
47299: LD_ADDR_OWVAR 28
47303: PUSH
47304: LD_INT 14
47306: ST_TO_ADDR
// hc_gallery =  ;
47307: LD_ADDR_OWVAR 33
47311: PUSH
47312: LD_STRING 
47314: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
47315: LD_ADDR_OWVAR 35
47319: PUSH
47320: LD_INT 7
47322: NEG
47323: PPUSH
47324: LD_INT 7
47326: PPUSH
47327: CALL_OW 12
47331: ST_TO_ADDR
// animal := CreateHuman ;
47332: LD_ADDR_VAR 0 12
47336: PUSH
47337: CALL_OW 44
47341: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47342: LD_VAR 0 12
47346: PPUSH
47347: LD_VAR 0 8
47351: PPUSH
47352: LD_INT 0
47354: PPUSH
47355: CALL_OW 49
// end ;
47359: GO 47296
47361: POP
47362: POP
// if apemans then
47363: LD_VAR 0 3
47367: IFFALSE 47490
// for i = 1 to apemans do
47369: LD_ADDR_VAR 0 11
47373: PUSH
47374: DOUBLE
47375: LD_INT 1
47377: DEC
47378: ST_TO_ADDR
47379: LD_VAR 0 3
47383: PUSH
47384: FOR_TO
47385: IFFALSE 47488
// begin hc_class = class_apeman ;
47387: LD_ADDR_OWVAR 28
47391: PUSH
47392: LD_INT 12
47394: ST_TO_ADDR
// hc_gallery =  ;
47395: LD_ADDR_OWVAR 33
47399: PUSH
47400: LD_STRING 
47402: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
47403: LD_ADDR_OWVAR 35
47407: PUSH
47408: LD_INT 5
47410: NEG
47411: PPUSH
47412: LD_INT 5
47414: PPUSH
47415: CALL_OW 12
47419: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
47420: LD_ADDR_OWVAR 31
47424: PUSH
47425: LD_INT 1
47427: PPUSH
47428: LD_INT 3
47430: PPUSH
47431: CALL_OW 12
47435: PUSH
47436: LD_INT 1
47438: PPUSH
47439: LD_INT 3
47441: PPUSH
47442: CALL_OW 12
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: ST_TO_ADDR
// animal := CreateHuman ;
47459: LD_ADDR_VAR 0 12
47463: PUSH
47464: CALL_OW 44
47468: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47469: LD_VAR 0 12
47473: PPUSH
47474: LD_VAR 0 8
47478: PPUSH
47479: LD_INT 0
47481: PPUSH
47482: CALL_OW 49
// end ;
47486: GO 47384
47488: POP
47489: POP
// if enchidnas then
47490: LD_VAR 0 4
47494: IFFALSE 47561
// for i = 1 to enchidnas do
47496: LD_ADDR_VAR 0 11
47500: PUSH
47501: DOUBLE
47502: LD_INT 1
47504: DEC
47505: ST_TO_ADDR
47506: LD_VAR 0 4
47510: PUSH
47511: FOR_TO
47512: IFFALSE 47559
// begin hc_class = 13 ;
47514: LD_ADDR_OWVAR 28
47518: PUSH
47519: LD_INT 13
47521: ST_TO_ADDR
// hc_gallery =  ;
47522: LD_ADDR_OWVAR 33
47526: PUSH
47527: LD_STRING 
47529: ST_TO_ADDR
// animal := CreateHuman ;
47530: LD_ADDR_VAR 0 12
47534: PUSH
47535: CALL_OW 44
47539: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47540: LD_VAR 0 12
47544: PPUSH
47545: LD_VAR 0 8
47549: PPUSH
47550: LD_INT 0
47552: PPUSH
47553: CALL_OW 49
// end ;
47557: GO 47511
47559: POP
47560: POP
// if not wat_area then
47561: LD_VAR 0 9
47565: NOT
47566: IFFALSE 47570
// exit ;
47568: GO 47641
// if fishes then
47570: LD_VAR 0 7
47574: IFFALSE 47641
// for i = 1 to fishes do
47576: LD_ADDR_VAR 0 11
47580: PUSH
47581: DOUBLE
47582: LD_INT 1
47584: DEC
47585: ST_TO_ADDR
47586: LD_VAR 0 7
47590: PUSH
47591: FOR_TO
47592: IFFALSE 47639
// begin hc_class = 20 ;
47594: LD_ADDR_OWVAR 28
47598: PUSH
47599: LD_INT 20
47601: ST_TO_ADDR
// hc_gallery =  ;
47602: LD_ADDR_OWVAR 33
47606: PUSH
47607: LD_STRING 
47609: ST_TO_ADDR
// animal := CreateHuman ;
47610: LD_ADDR_VAR 0 12
47614: PUSH
47615: CALL_OW 44
47619: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
47620: LD_VAR 0 12
47624: PPUSH
47625: LD_VAR 0 9
47629: PPUSH
47630: LD_INT 0
47632: PPUSH
47633: CALL_OW 49
// end ;
47637: GO 47591
47639: POP
47640: POP
// end ;
47641: LD_VAR 0 10
47645: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
47646: LD_INT 0
47648: PPUSH
47649: PPUSH
47650: PPUSH
47651: PPUSH
47652: PPUSH
47653: PPUSH
47654: PPUSH
47655: PPUSH
47656: PPUSH
47657: PPUSH
47658: PPUSH
47659: PPUSH
47660: PPUSH
47661: PPUSH
47662: PPUSH
47663: PPUSH
47664: PPUSH
47665: PPUSH
47666: PPUSH
47667: PPUSH
47668: PPUSH
47669: PPUSH
47670: PPUSH
47671: PPUSH
47672: PPUSH
47673: PPUSH
47674: PPUSH
47675: PPUSH
// if not list then
47676: LD_VAR 0 1
47680: NOT
47681: IFFALSE 47685
// exit ;
47683: GO 50982
// base := list [ 1 ] ;
47685: LD_ADDR_VAR 0 3
47689: PUSH
47690: LD_VAR 0 1
47694: PUSH
47695: LD_INT 1
47697: ARRAY
47698: ST_TO_ADDR
// group := list [ 2 ] ;
47699: LD_ADDR_VAR 0 4
47703: PUSH
47704: LD_VAR 0 1
47708: PUSH
47709: LD_INT 2
47711: ARRAY
47712: ST_TO_ADDR
// path := list [ 3 ] ;
47713: LD_ADDR_VAR 0 5
47717: PUSH
47718: LD_VAR 0 1
47722: PUSH
47723: LD_INT 3
47725: ARRAY
47726: ST_TO_ADDR
// flags := list [ 4 ] ;
47727: LD_ADDR_VAR 0 6
47731: PUSH
47732: LD_VAR 0 1
47736: PUSH
47737: LD_INT 4
47739: ARRAY
47740: ST_TO_ADDR
// mined := [ ] ;
47741: LD_ADDR_VAR 0 27
47745: PUSH
47746: EMPTY
47747: ST_TO_ADDR
// bombed := [ ] ;
47748: LD_ADDR_VAR 0 28
47752: PUSH
47753: EMPTY
47754: ST_TO_ADDR
// if not group or not path then
47755: LD_VAR 0 4
47759: NOT
47760: PUSH
47761: LD_VAR 0 5
47765: NOT
47766: OR
47767: IFFALSE 47771
// exit ;
47769: GO 50982
// if flags then
47771: LD_VAR 0 6
47775: IFFALSE 47919
// begin f_ignore_area := flags [ 1 ] ;
47777: LD_ADDR_VAR 0 17
47781: PUSH
47782: LD_VAR 0 6
47786: PUSH
47787: LD_INT 1
47789: ARRAY
47790: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
47791: LD_ADDR_VAR 0 18
47795: PUSH
47796: LD_VAR 0 6
47800: PUSH
47801: LD_INT 2
47803: ARRAY
47804: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
47805: LD_ADDR_VAR 0 19
47809: PUSH
47810: LD_VAR 0 6
47814: PUSH
47815: LD_INT 3
47817: ARRAY
47818: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
47819: LD_ADDR_VAR 0 20
47823: PUSH
47824: LD_VAR 0 6
47828: PUSH
47829: LD_INT 4
47831: ARRAY
47832: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
47833: LD_ADDR_VAR 0 21
47837: PUSH
47838: LD_VAR 0 6
47842: PUSH
47843: LD_INT 5
47845: ARRAY
47846: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
47847: LD_ADDR_VAR 0 22
47851: PUSH
47852: LD_VAR 0 6
47856: PUSH
47857: LD_INT 6
47859: ARRAY
47860: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
47861: LD_ADDR_VAR 0 23
47865: PUSH
47866: LD_VAR 0 6
47870: PUSH
47871: LD_INT 7
47873: ARRAY
47874: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
47875: LD_ADDR_VAR 0 24
47879: PUSH
47880: LD_VAR 0 6
47884: PUSH
47885: LD_INT 8
47887: ARRAY
47888: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
47889: LD_ADDR_VAR 0 25
47893: PUSH
47894: LD_VAR 0 6
47898: PUSH
47899: LD_INT 9
47901: ARRAY
47902: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
47903: LD_ADDR_VAR 0 26
47907: PUSH
47908: LD_VAR 0 6
47912: PUSH
47913: LD_INT 10
47915: ARRAY
47916: ST_TO_ADDR
// end else
47917: GO 47999
// begin f_ignore_area := false ;
47919: LD_ADDR_VAR 0 17
47923: PUSH
47924: LD_INT 0
47926: ST_TO_ADDR
// f_capture := false ;
47927: LD_ADDR_VAR 0 18
47931: PUSH
47932: LD_INT 0
47934: ST_TO_ADDR
// f_ignore_civ := false ;
47935: LD_ADDR_VAR 0 19
47939: PUSH
47940: LD_INT 0
47942: ST_TO_ADDR
// f_murder := false ;
47943: LD_ADDR_VAR 0 20
47947: PUSH
47948: LD_INT 0
47950: ST_TO_ADDR
// f_mines := false ;
47951: LD_ADDR_VAR 0 21
47955: PUSH
47956: LD_INT 0
47958: ST_TO_ADDR
// f_repair := false ;
47959: LD_ADDR_VAR 0 22
47963: PUSH
47964: LD_INT 0
47966: ST_TO_ADDR
// f_heal := false ;
47967: LD_ADDR_VAR 0 23
47971: PUSH
47972: LD_INT 0
47974: ST_TO_ADDR
// f_spacetime := false ;
47975: LD_ADDR_VAR 0 24
47979: PUSH
47980: LD_INT 0
47982: ST_TO_ADDR
// f_attack_depot := false ;
47983: LD_ADDR_VAR 0 25
47987: PUSH
47988: LD_INT 0
47990: ST_TO_ADDR
// f_crawl := false ;
47991: LD_ADDR_VAR 0 26
47995: PUSH
47996: LD_INT 0
47998: ST_TO_ADDR
// end ; units_path := [ ] ;
47999: LD_ADDR_VAR 0 16
48003: PUSH
48004: EMPTY
48005: ST_TO_ADDR
// for i = 1 to group do
48006: LD_ADDR_VAR 0 7
48010: PUSH
48011: DOUBLE
48012: LD_INT 1
48014: DEC
48015: ST_TO_ADDR
48016: LD_VAR 0 4
48020: PUSH
48021: FOR_TO
48022: IFFALSE 48051
// begin units_path := Replace ( units_path , i , path ) ;
48024: LD_ADDR_VAR 0 16
48028: PUSH
48029: LD_VAR 0 16
48033: PPUSH
48034: LD_VAR 0 7
48038: PPUSH
48039: LD_VAR 0 5
48043: PPUSH
48044: CALL_OW 1
48048: ST_TO_ADDR
// end ;
48049: GO 48021
48051: POP
48052: POP
// repeat for i = group downto 1 do
48053: LD_ADDR_VAR 0 7
48057: PUSH
48058: DOUBLE
48059: LD_VAR 0 4
48063: INC
48064: ST_TO_ADDR
48065: LD_INT 1
48067: PUSH
48068: FOR_DOWNTO
48069: IFFALSE 50964
// begin wait ( 0 0$1 ) ;
48071: LD_INT 35
48073: PPUSH
48074: CALL_OW 67
// tmp := [ ] ;
48078: LD_ADDR_VAR 0 14
48082: PUSH
48083: EMPTY
48084: ST_TO_ADDR
// attacking := false ;
48085: LD_ADDR_VAR 0 29
48089: PUSH
48090: LD_INT 0
48092: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
48093: LD_VAR 0 4
48097: PUSH
48098: LD_VAR 0 7
48102: ARRAY
48103: PPUSH
48104: CALL_OW 301
48108: PUSH
48109: LD_VAR 0 4
48113: PUSH
48114: LD_VAR 0 7
48118: ARRAY
48119: NOT
48120: OR
48121: IFFALSE 48165
// begin group := Delete ( group , i ) ;
48123: LD_ADDR_VAR 0 4
48127: PUSH
48128: LD_VAR 0 4
48132: PPUSH
48133: LD_VAR 0 7
48137: PPUSH
48138: CALL_OW 3
48142: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
48143: LD_ADDR_VAR 0 16
48147: PUSH
48148: LD_VAR 0 16
48152: PPUSH
48153: LD_VAR 0 7
48157: PPUSH
48158: CALL_OW 3
48162: ST_TO_ADDR
// continue ;
48163: GO 48068
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
48165: LD_VAR 0 4
48169: PUSH
48170: LD_VAR 0 7
48174: ARRAY
48175: PPUSH
48176: LD_INT 10
48178: PPUSH
48179: CALL 46133 0 2
48183: NOT
48184: PUSH
48185: LD_VAR 0 16
48189: PUSH
48190: LD_VAR 0 7
48194: ARRAY
48195: PUSH
48196: EMPTY
48197: EQUAL
48198: NOT
48199: AND
48200: IFFALSE 48466
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
48202: LD_VAR 0 4
48206: PUSH
48207: LD_VAR 0 7
48211: ARRAY
48212: PPUSH
48213: CALL_OW 262
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: IN
48228: IFFALSE 48269
// if GetFuel ( group [ i ] ) < 10 then
48230: LD_VAR 0 4
48234: PUSH
48235: LD_VAR 0 7
48239: ARRAY
48240: PPUSH
48241: CALL_OW 261
48245: PUSH
48246: LD_INT 10
48248: LESS
48249: IFFALSE 48269
// SetFuel ( group [ i ] , 12 ) ;
48251: LD_VAR 0 4
48255: PUSH
48256: LD_VAR 0 7
48260: ARRAY
48261: PPUSH
48262: LD_INT 12
48264: PPUSH
48265: CALL_OW 240
// if units_path [ i ] then
48269: LD_VAR 0 16
48273: PUSH
48274: LD_VAR 0 7
48278: ARRAY
48279: IFFALSE 48464
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
48281: LD_VAR 0 4
48285: PUSH
48286: LD_VAR 0 7
48290: ARRAY
48291: PPUSH
48292: LD_VAR 0 16
48296: PUSH
48297: LD_VAR 0 7
48301: ARRAY
48302: PUSH
48303: LD_INT 1
48305: ARRAY
48306: PUSH
48307: LD_INT 1
48309: ARRAY
48310: PPUSH
48311: LD_VAR 0 16
48315: PUSH
48316: LD_VAR 0 7
48320: ARRAY
48321: PUSH
48322: LD_INT 1
48324: ARRAY
48325: PUSH
48326: LD_INT 2
48328: ARRAY
48329: PPUSH
48330: CALL_OW 297
48334: PUSH
48335: LD_INT 6
48337: GREATER
48338: IFFALSE 48413
// begin if not HasTask ( group [ i ] ) then
48340: LD_VAR 0 4
48344: PUSH
48345: LD_VAR 0 7
48349: ARRAY
48350: PPUSH
48351: CALL_OW 314
48355: NOT
48356: IFFALSE 48411
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
48358: LD_VAR 0 4
48362: PUSH
48363: LD_VAR 0 7
48367: ARRAY
48368: PPUSH
48369: LD_VAR 0 16
48373: PUSH
48374: LD_VAR 0 7
48378: ARRAY
48379: PUSH
48380: LD_INT 1
48382: ARRAY
48383: PUSH
48384: LD_INT 1
48386: ARRAY
48387: PPUSH
48388: LD_VAR 0 16
48392: PUSH
48393: LD_VAR 0 7
48397: ARRAY
48398: PUSH
48399: LD_INT 1
48401: ARRAY
48402: PUSH
48403: LD_INT 2
48405: ARRAY
48406: PPUSH
48407: CALL_OW 114
// end else
48411: GO 48464
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
48413: LD_ADDR_VAR 0 15
48417: PUSH
48418: LD_VAR 0 16
48422: PUSH
48423: LD_VAR 0 7
48427: ARRAY
48428: PPUSH
48429: LD_INT 1
48431: PPUSH
48432: CALL_OW 3
48436: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
48437: LD_ADDR_VAR 0 16
48441: PUSH
48442: LD_VAR 0 16
48446: PPUSH
48447: LD_VAR 0 7
48451: PPUSH
48452: LD_VAR 0 15
48456: PPUSH
48457: CALL_OW 1
48461: ST_TO_ADDR
// continue ;
48462: GO 48068
// end ; end ; end else
48464: GO 50962
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
48466: LD_ADDR_VAR 0 14
48470: PUSH
48471: LD_INT 81
48473: PUSH
48474: LD_VAR 0 4
48478: PUSH
48479: LD_VAR 0 7
48483: ARRAY
48484: PPUSH
48485: CALL_OW 255
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PPUSH
48494: CALL_OW 69
48498: ST_TO_ADDR
// if not tmp then
48499: LD_VAR 0 14
48503: NOT
48504: IFFALSE 48508
// continue ;
48506: GO 48068
// if f_ignore_area then
48508: LD_VAR 0 17
48512: IFFALSE 48600
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
48514: LD_ADDR_VAR 0 15
48518: PUSH
48519: LD_VAR 0 14
48523: PPUSH
48524: LD_INT 3
48526: PUSH
48527: LD_INT 92
48529: PUSH
48530: LD_VAR 0 17
48534: PUSH
48535: LD_INT 1
48537: ARRAY
48538: PUSH
48539: LD_VAR 0 17
48543: PUSH
48544: LD_INT 2
48546: ARRAY
48547: PUSH
48548: LD_VAR 0 17
48552: PUSH
48553: LD_INT 3
48555: ARRAY
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PPUSH
48567: CALL_OW 72
48571: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48572: LD_VAR 0 14
48576: PUSH
48577: LD_VAR 0 15
48581: DIFF
48582: IFFALSE 48600
// tmp := tmp diff tmp2 ;
48584: LD_ADDR_VAR 0 14
48588: PUSH
48589: LD_VAR 0 14
48593: PUSH
48594: LD_VAR 0 15
48598: DIFF
48599: ST_TO_ADDR
// end ; if not f_murder then
48600: LD_VAR 0 20
48604: NOT
48605: IFFALSE 48663
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
48607: LD_ADDR_VAR 0 15
48611: PUSH
48612: LD_VAR 0 14
48616: PPUSH
48617: LD_INT 3
48619: PUSH
48620: LD_INT 50
48622: PUSH
48623: EMPTY
48624: LIST
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PPUSH
48630: CALL_OW 72
48634: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48635: LD_VAR 0 14
48639: PUSH
48640: LD_VAR 0 15
48644: DIFF
48645: IFFALSE 48663
// tmp := tmp diff tmp2 ;
48647: LD_ADDR_VAR 0 14
48651: PUSH
48652: LD_VAR 0 14
48656: PUSH
48657: LD_VAR 0 15
48661: DIFF
48662: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
48663: LD_ADDR_VAR 0 14
48667: PUSH
48668: LD_VAR 0 4
48672: PUSH
48673: LD_VAR 0 7
48677: ARRAY
48678: PPUSH
48679: LD_VAR 0 14
48683: PPUSH
48684: LD_INT 1
48686: PPUSH
48687: LD_INT 1
48689: PPUSH
48690: CALL 20165 0 4
48694: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
48695: LD_VAR 0 4
48699: PUSH
48700: LD_VAR 0 7
48704: ARRAY
48705: PPUSH
48706: CALL_OW 257
48710: PUSH
48711: LD_INT 1
48713: EQUAL
48714: IFFALSE 49162
// begin if WantPlant ( group [ i ] ) then
48716: LD_VAR 0 4
48720: PUSH
48721: LD_VAR 0 7
48725: ARRAY
48726: PPUSH
48727: CALL 19633 0 1
48731: IFFALSE 48735
// continue ;
48733: GO 48068
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
48735: LD_VAR 0 18
48739: PUSH
48740: LD_VAR 0 4
48744: PUSH
48745: LD_VAR 0 7
48749: ARRAY
48750: PPUSH
48751: CALL_OW 310
48755: NOT
48756: AND
48757: PUSH
48758: LD_VAR 0 14
48762: PUSH
48763: LD_INT 1
48765: ARRAY
48766: PUSH
48767: LD_VAR 0 14
48771: PPUSH
48772: LD_INT 21
48774: PUSH
48775: LD_INT 2
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 58
48784: PUSH
48785: EMPTY
48786: LIST
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PPUSH
48792: CALL_OW 72
48796: IN
48797: AND
48798: IFFALSE 48834
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
48800: LD_VAR 0 4
48804: PUSH
48805: LD_VAR 0 7
48809: ARRAY
48810: PPUSH
48811: LD_VAR 0 14
48815: PUSH
48816: LD_INT 1
48818: ARRAY
48819: PPUSH
48820: CALL_OW 120
// attacking := true ;
48824: LD_ADDR_VAR 0 29
48828: PUSH
48829: LD_INT 1
48831: ST_TO_ADDR
// continue ;
48832: GO 48068
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
48834: LD_VAR 0 26
48838: PUSH
48839: LD_VAR 0 4
48843: PUSH
48844: LD_VAR 0 7
48848: ARRAY
48849: PPUSH
48850: CALL_OW 257
48854: PUSH
48855: LD_INT 1
48857: EQUAL
48858: AND
48859: PUSH
48860: LD_VAR 0 4
48864: PUSH
48865: LD_VAR 0 7
48869: ARRAY
48870: PPUSH
48871: CALL_OW 256
48875: PUSH
48876: LD_INT 800
48878: LESS
48879: AND
48880: PUSH
48881: LD_VAR 0 4
48885: PUSH
48886: LD_VAR 0 7
48890: ARRAY
48891: PPUSH
48892: CALL_OW 318
48896: NOT
48897: AND
48898: IFFALSE 48915
// ComCrawl ( group [ i ] ) ;
48900: LD_VAR 0 4
48904: PUSH
48905: LD_VAR 0 7
48909: ARRAY
48910: PPUSH
48911: CALL_OW 137
// if f_mines then
48915: LD_VAR 0 21
48919: IFFALSE 49162
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
48921: LD_VAR 0 14
48925: PUSH
48926: LD_INT 1
48928: ARRAY
48929: PPUSH
48930: CALL_OW 247
48934: PUSH
48935: LD_INT 3
48937: EQUAL
48938: PUSH
48939: LD_VAR 0 14
48943: PUSH
48944: LD_INT 1
48946: ARRAY
48947: PUSH
48948: LD_VAR 0 27
48952: IN
48953: NOT
48954: AND
48955: IFFALSE 49162
// begin x := GetX ( tmp [ 1 ] ) ;
48957: LD_ADDR_VAR 0 10
48961: PUSH
48962: LD_VAR 0 14
48966: PUSH
48967: LD_INT 1
48969: ARRAY
48970: PPUSH
48971: CALL_OW 250
48975: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
48976: LD_ADDR_VAR 0 11
48980: PUSH
48981: LD_VAR 0 14
48985: PUSH
48986: LD_INT 1
48988: ARRAY
48989: PPUSH
48990: CALL_OW 251
48994: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
48995: LD_ADDR_VAR 0 12
48999: PUSH
49000: LD_VAR 0 4
49004: PUSH
49005: LD_VAR 0 7
49009: ARRAY
49010: PPUSH
49011: CALL 46218 0 1
49015: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
49016: LD_VAR 0 4
49020: PUSH
49021: LD_VAR 0 7
49025: ARRAY
49026: PPUSH
49027: LD_VAR 0 10
49031: PPUSH
49032: LD_VAR 0 11
49036: PPUSH
49037: LD_VAR 0 14
49041: PUSH
49042: LD_INT 1
49044: ARRAY
49045: PPUSH
49046: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
49050: LD_VAR 0 4
49054: PUSH
49055: LD_VAR 0 7
49059: ARRAY
49060: PPUSH
49061: LD_VAR 0 10
49065: PPUSH
49066: LD_VAR 0 12
49070: PPUSH
49071: LD_INT 7
49073: PPUSH
49074: CALL_OW 272
49078: PPUSH
49079: LD_VAR 0 11
49083: PPUSH
49084: LD_VAR 0 12
49088: PPUSH
49089: LD_INT 7
49091: PPUSH
49092: CALL_OW 273
49096: PPUSH
49097: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
49101: LD_VAR 0 4
49105: PUSH
49106: LD_VAR 0 7
49110: ARRAY
49111: PPUSH
49112: LD_INT 71
49114: PPUSH
49115: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
49119: LD_ADDR_VAR 0 27
49123: PUSH
49124: LD_VAR 0 27
49128: PPUSH
49129: LD_VAR 0 27
49133: PUSH
49134: LD_INT 1
49136: PLUS
49137: PPUSH
49138: LD_VAR 0 14
49142: PUSH
49143: LD_INT 1
49145: ARRAY
49146: PPUSH
49147: CALL_OW 1
49151: ST_TO_ADDR
// attacking := true ;
49152: LD_ADDR_VAR 0 29
49156: PUSH
49157: LD_INT 1
49159: ST_TO_ADDR
// continue ;
49160: GO 48068
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
49162: LD_VAR 0 4
49166: PUSH
49167: LD_VAR 0 7
49171: ARRAY
49172: PPUSH
49173: CALL_OW 257
49177: PUSH
49178: LD_INT 17
49180: EQUAL
49181: PUSH
49182: LD_VAR 0 4
49186: PUSH
49187: LD_VAR 0 7
49191: ARRAY
49192: PPUSH
49193: CALL_OW 110
49197: PUSH
49198: LD_INT 71
49200: EQUAL
49201: NOT
49202: AND
49203: IFFALSE 49349
// begin attacking := false ;
49205: LD_ADDR_VAR 0 29
49209: PUSH
49210: LD_INT 0
49212: ST_TO_ADDR
// k := 5 ;
49213: LD_ADDR_VAR 0 9
49217: PUSH
49218: LD_INT 5
49220: ST_TO_ADDR
// if tmp < k then
49221: LD_VAR 0 14
49225: PUSH
49226: LD_VAR 0 9
49230: LESS
49231: IFFALSE 49243
// k := tmp ;
49233: LD_ADDR_VAR 0 9
49237: PUSH
49238: LD_VAR 0 14
49242: ST_TO_ADDR
// for j = 1 to k do
49243: LD_ADDR_VAR 0 8
49247: PUSH
49248: DOUBLE
49249: LD_INT 1
49251: DEC
49252: ST_TO_ADDR
49253: LD_VAR 0 9
49257: PUSH
49258: FOR_TO
49259: IFFALSE 49347
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
49261: LD_VAR 0 14
49265: PUSH
49266: LD_VAR 0 8
49270: ARRAY
49271: PUSH
49272: LD_VAR 0 14
49276: PPUSH
49277: LD_INT 58
49279: PUSH
49280: EMPTY
49281: LIST
49282: PPUSH
49283: CALL_OW 72
49287: IN
49288: NOT
49289: IFFALSE 49345
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49291: LD_VAR 0 4
49295: PUSH
49296: LD_VAR 0 7
49300: ARRAY
49301: PPUSH
49302: LD_VAR 0 14
49306: PUSH
49307: LD_VAR 0 8
49311: ARRAY
49312: PPUSH
49313: CALL_OW 115
// attacking := true ;
49317: LD_ADDR_VAR 0 29
49321: PUSH
49322: LD_INT 1
49324: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
49325: LD_VAR 0 4
49329: PUSH
49330: LD_VAR 0 7
49334: ARRAY
49335: PPUSH
49336: LD_INT 71
49338: PPUSH
49339: CALL_OW 109
// continue ;
49343: GO 49258
// end ; end ;
49345: GO 49258
49347: POP
49348: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
49349: LD_VAR 0 4
49353: PUSH
49354: LD_VAR 0 7
49358: ARRAY
49359: PPUSH
49360: CALL_OW 257
49364: PUSH
49365: LD_INT 8
49367: EQUAL
49368: PUSH
49369: LD_VAR 0 4
49373: PUSH
49374: LD_VAR 0 7
49378: ARRAY
49379: PPUSH
49380: CALL_OW 264
49384: PUSH
49385: LD_INT 28
49387: PUSH
49388: LD_INT 45
49390: PUSH
49391: LD_INT 7
49393: PUSH
49394: LD_INT 47
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: IN
49403: OR
49404: IFFALSE 49634
// begin attacking := false ;
49406: LD_ADDR_VAR 0 29
49410: PUSH
49411: LD_INT 0
49413: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
49414: LD_VAR 0 14
49418: PUSH
49419: LD_INT 1
49421: ARRAY
49422: PPUSH
49423: CALL_OW 266
49427: PUSH
49428: LD_INT 32
49430: PUSH
49431: LD_INT 31
49433: PUSH
49434: LD_INT 33
49436: PUSH
49437: LD_INT 4
49439: PUSH
49440: LD_INT 5
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: IN
49450: IFFALSE 49634
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
49452: LD_ADDR_VAR 0 9
49456: PUSH
49457: LD_VAR 0 14
49461: PUSH
49462: LD_INT 1
49464: ARRAY
49465: PPUSH
49466: CALL_OW 266
49470: PPUSH
49471: LD_VAR 0 14
49475: PUSH
49476: LD_INT 1
49478: ARRAY
49479: PPUSH
49480: CALL_OW 250
49484: PPUSH
49485: LD_VAR 0 14
49489: PUSH
49490: LD_INT 1
49492: ARRAY
49493: PPUSH
49494: CALL_OW 251
49498: PPUSH
49499: LD_VAR 0 14
49503: PUSH
49504: LD_INT 1
49506: ARRAY
49507: PPUSH
49508: CALL_OW 254
49512: PPUSH
49513: LD_VAR 0 14
49517: PUSH
49518: LD_INT 1
49520: ARRAY
49521: PPUSH
49522: CALL_OW 248
49526: PPUSH
49527: LD_INT 0
49529: PPUSH
49530: CALL 27594 0 6
49534: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
49535: LD_ADDR_VAR 0 8
49539: PUSH
49540: LD_VAR 0 4
49544: PUSH
49545: LD_VAR 0 7
49549: ARRAY
49550: PPUSH
49551: LD_VAR 0 9
49555: PPUSH
49556: CALL 46281 0 2
49560: ST_TO_ADDR
// if j then
49561: LD_VAR 0 8
49565: IFFALSE 49634
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49567: LD_VAR 0 8
49571: PUSH
49572: LD_INT 1
49574: ARRAY
49575: PPUSH
49576: LD_VAR 0 8
49580: PUSH
49581: LD_INT 2
49583: ARRAY
49584: PPUSH
49585: CALL_OW 488
49589: IFFALSE 49634
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
49591: LD_VAR 0 4
49595: PUSH
49596: LD_VAR 0 7
49600: ARRAY
49601: PPUSH
49602: LD_VAR 0 8
49606: PUSH
49607: LD_INT 1
49609: ARRAY
49610: PPUSH
49611: LD_VAR 0 8
49615: PUSH
49616: LD_INT 2
49618: ARRAY
49619: PPUSH
49620: CALL_OW 116
// attacking := true ;
49624: LD_ADDR_VAR 0 29
49628: PUSH
49629: LD_INT 1
49631: ST_TO_ADDR
// continue ;
49632: GO 48068
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
49634: LD_VAR 0 4
49638: PUSH
49639: LD_VAR 0 7
49643: ARRAY
49644: PPUSH
49645: CALL_OW 265
49649: PUSH
49650: LD_INT 11
49652: EQUAL
49653: IFFALSE 49931
// begin k := 10 ;
49655: LD_ADDR_VAR 0 9
49659: PUSH
49660: LD_INT 10
49662: ST_TO_ADDR
// x := 0 ;
49663: LD_ADDR_VAR 0 10
49667: PUSH
49668: LD_INT 0
49670: ST_TO_ADDR
// if tmp < k then
49671: LD_VAR 0 14
49675: PUSH
49676: LD_VAR 0 9
49680: LESS
49681: IFFALSE 49693
// k := tmp ;
49683: LD_ADDR_VAR 0 9
49687: PUSH
49688: LD_VAR 0 14
49692: ST_TO_ADDR
// for j = k downto 1 do
49693: LD_ADDR_VAR 0 8
49697: PUSH
49698: DOUBLE
49699: LD_VAR 0 9
49703: INC
49704: ST_TO_ADDR
49705: LD_INT 1
49707: PUSH
49708: FOR_DOWNTO
49709: IFFALSE 49784
// begin if GetType ( tmp [ j ] ) = unit_human then
49711: LD_VAR 0 14
49715: PUSH
49716: LD_VAR 0 8
49720: ARRAY
49721: PPUSH
49722: CALL_OW 247
49726: PUSH
49727: LD_INT 1
49729: EQUAL
49730: IFFALSE 49782
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
49732: LD_VAR 0 4
49736: PUSH
49737: LD_VAR 0 7
49741: ARRAY
49742: PPUSH
49743: LD_VAR 0 14
49747: PUSH
49748: LD_VAR 0 8
49752: ARRAY
49753: PPUSH
49754: CALL 46552 0 2
// x := tmp [ j ] ;
49758: LD_ADDR_VAR 0 10
49762: PUSH
49763: LD_VAR 0 14
49767: PUSH
49768: LD_VAR 0 8
49772: ARRAY
49773: ST_TO_ADDR
// attacking := true ;
49774: LD_ADDR_VAR 0 29
49778: PUSH
49779: LD_INT 1
49781: ST_TO_ADDR
// end ; end ;
49782: GO 49708
49784: POP
49785: POP
// if not x then
49786: LD_VAR 0 10
49790: NOT
49791: IFFALSE 49931
// begin attacking := true ;
49793: LD_ADDR_VAR 0 29
49797: PUSH
49798: LD_INT 1
49800: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
49801: LD_VAR 0 4
49805: PUSH
49806: LD_VAR 0 7
49810: ARRAY
49811: PPUSH
49812: CALL_OW 250
49816: PPUSH
49817: LD_VAR 0 4
49821: PUSH
49822: LD_VAR 0 7
49826: ARRAY
49827: PPUSH
49828: CALL_OW 251
49832: PPUSH
49833: CALL_OW 546
49837: PUSH
49838: LD_INT 2
49840: ARRAY
49841: PUSH
49842: LD_VAR 0 14
49846: PUSH
49847: LD_INT 1
49849: ARRAY
49850: PPUSH
49851: CALL_OW 250
49855: PPUSH
49856: LD_VAR 0 14
49860: PUSH
49861: LD_INT 1
49863: ARRAY
49864: PPUSH
49865: CALL_OW 251
49869: PPUSH
49870: CALL_OW 546
49874: PUSH
49875: LD_INT 2
49877: ARRAY
49878: EQUAL
49879: IFFALSE 49907
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
49881: LD_VAR 0 4
49885: PUSH
49886: LD_VAR 0 7
49890: ARRAY
49891: PPUSH
49892: LD_VAR 0 14
49896: PUSH
49897: LD_INT 1
49899: ARRAY
49900: PPUSH
49901: CALL 46552 0 2
49905: GO 49931
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49907: LD_VAR 0 4
49911: PUSH
49912: LD_VAR 0 7
49916: ARRAY
49917: PPUSH
49918: LD_VAR 0 14
49922: PUSH
49923: LD_INT 1
49925: ARRAY
49926: PPUSH
49927: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
49931: LD_VAR 0 4
49935: PUSH
49936: LD_VAR 0 7
49940: ARRAY
49941: PPUSH
49942: CALL_OW 264
49946: PUSH
49947: LD_INT 29
49949: EQUAL
49950: IFFALSE 50316
// begin if WantsToAttack ( group [ i ] ) in bombed then
49952: LD_VAR 0 4
49956: PUSH
49957: LD_VAR 0 7
49961: ARRAY
49962: PPUSH
49963: CALL_OW 319
49967: PUSH
49968: LD_VAR 0 28
49972: IN
49973: IFFALSE 49977
// continue ;
49975: GO 48068
// k := 8 ;
49977: LD_ADDR_VAR 0 9
49981: PUSH
49982: LD_INT 8
49984: ST_TO_ADDR
// x := 0 ;
49985: LD_ADDR_VAR 0 10
49989: PUSH
49990: LD_INT 0
49992: ST_TO_ADDR
// if tmp < k then
49993: LD_VAR 0 14
49997: PUSH
49998: LD_VAR 0 9
50002: LESS
50003: IFFALSE 50015
// k := tmp ;
50005: LD_ADDR_VAR 0 9
50009: PUSH
50010: LD_VAR 0 14
50014: ST_TO_ADDR
// for j = 1 to k do
50015: LD_ADDR_VAR 0 8
50019: PUSH
50020: DOUBLE
50021: LD_INT 1
50023: DEC
50024: ST_TO_ADDR
50025: LD_VAR 0 9
50029: PUSH
50030: FOR_TO
50031: IFFALSE 50163
// begin if GetType ( tmp [ j ] ) = unit_building then
50033: LD_VAR 0 14
50037: PUSH
50038: LD_VAR 0 8
50042: ARRAY
50043: PPUSH
50044: CALL_OW 247
50048: PUSH
50049: LD_INT 3
50051: EQUAL
50052: IFFALSE 50161
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
50054: LD_VAR 0 14
50058: PUSH
50059: LD_VAR 0 8
50063: ARRAY
50064: PUSH
50065: LD_VAR 0 28
50069: IN
50070: NOT
50071: PUSH
50072: LD_VAR 0 14
50076: PUSH
50077: LD_VAR 0 8
50081: ARRAY
50082: PPUSH
50083: CALL_OW 313
50087: AND
50088: IFFALSE 50161
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50090: LD_VAR 0 4
50094: PUSH
50095: LD_VAR 0 7
50099: ARRAY
50100: PPUSH
50101: LD_VAR 0 14
50105: PUSH
50106: LD_VAR 0 8
50110: ARRAY
50111: PPUSH
50112: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
50116: LD_ADDR_VAR 0 28
50120: PUSH
50121: LD_VAR 0 28
50125: PPUSH
50126: LD_VAR 0 28
50130: PUSH
50131: LD_INT 1
50133: PLUS
50134: PPUSH
50135: LD_VAR 0 14
50139: PUSH
50140: LD_VAR 0 8
50144: ARRAY
50145: PPUSH
50146: CALL_OW 1
50150: ST_TO_ADDR
// attacking := true ;
50151: LD_ADDR_VAR 0 29
50155: PUSH
50156: LD_INT 1
50158: ST_TO_ADDR
// break ;
50159: GO 50163
// end ; end ;
50161: GO 50030
50163: POP
50164: POP
// if not attacking and f_attack_depot then
50165: LD_VAR 0 29
50169: NOT
50170: PUSH
50171: LD_VAR 0 25
50175: AND
50176: IFFALSE 50271
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50178: LD_ADDR_VAR 0 13
50182: PUSH
50183: LD_VAR 0 14
50187: PPUSH
50188: LD_INT 2
50190: PUSH
50191: LD_INT 30
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 30
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: LIST
50215: PPUSH
50216: CALL_OW 72
50220: ST_TO_ADDR
// if z then
50221: LD_VAR 0 13
50225: IFFALSE 50271
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
50227: LD_VAR 0 4
50231: PUSH
50232: LD_VAR 0 7
50236: ARRAY
50237: PPUSH
50238: LD_VAR 0 13
50242: PPUSH
50243: LD_VAR 0 4
50247: PUSH
50248: LD_VAR 0 7
50252: ARRAY
50253: PPUSH
50254: CALL_OW 74
50258: PPUSH
50259: CALL_OW 115
// attacking := true ;
50263: LD_ADDR_VAR 0 29
50267: PUSH
50268: LD_INT 1
50270: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
50271: LD_VAR 0 4
50275: PUSH
50276: LD_VAR 0 7
50280: ARRAY
50281: PPUSH
50282: CALL_OW 256
50286: PUSH
50287: LD_INT 500
50289: LESS
50290: IFFALSE 50316
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50292: LD_VAR 0 4
50296: PUSH
50297: LD_VAR 0 7
50301: ARRAY
50302: PPUSH
50303: LD_VAR 0 14
50307: PUSH
50308: LD_INT 1
50310: ARRAY
50311: PPUSH
50312: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50316: LD_VAR 0 4
50320: PUSH
50321: LD_VAR 0 7
50325: ARRAY
50326: PPUSH
50327: CALL_OW 256
50331: PUSH
50332: LD_INT 250
50334: LESS
50335: PUSH
50336: LD_VAR 0 4
50340: PUSH
50341: LD_VAR 0 7
50345: ARRAY
50346: PUSH
50347: LD_INT 21
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 23
50359: PUSH
50360: LD_INT 2
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PPUSH
50371: CALL_OW 69
50375: IN
50376: AND
50377: IFFALSE 50502
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
50379: LD_ADDR_VAR 0 9
50383: PUSH
50384: LD_OWVAR 3
50388: PUSH
50389: LD_VAR 0 4
50393: PUSH
50394: LD_VAR 0 7
50398: ARRAY
50399: DIFF
50400: PPUSH
50401: LD_VAR 0 4
50405: PUSH
50406: LD_VAR 0 7
50410: ARRAY
50411: PPUSH
50412: CALL_OW 74
50416: ST_TO_ADDR
// if not k then
50417: LD_VAR 0 9
50421: NOT
50422: IFFALSE 50426
// continue ;
50424: GO 48068
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
50426: LD_VAR 0 9
50430: PUSH
50431: LD_INT 81
50433: PUSH
50434: LD_VAR 0 4
50438: PUSH
50439: LD_VAR 0 7
50443: ARRAY
50444: PPUSH
50445: CALL_OW 255
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PPUSH
50454: CALL_OW 69
50458: IN
50459: PUSH
50460: LD_VAR 0 9
50464: PPUSH
50465: LD_VAR 0 4
50469: PUSH
50470: LD_VAR 0 7
50474: ARRAY
50475: PPUSH
50476: CALL_OW 296
50480: PUSH
50481: LD_INT 5
50483: LESS
50484: AND
50485: IFFALSE 50502
// ComAutodestruct ( group [ i ] ) ;
50487: LD_VAR 0 4
50491: PUSH
50492: LD_VAR 0 7
50496: ARRAY
50497: PPUSH
50498: CALL 46450 0 1
// end ; if f_attack_depot then
50502: LD_VAR 0 25
50506: IFFALSE 50618
// begin k := 6 ;
50508: LD_ADDR_VAR 0 9
50512: PUSH
50513: LD_INT 6
50515: ST_TO_ADDR
// if tmp < k then
50516: LD_VAR 0 14
50520: PUSH
50521: LD_VAR 0 9
50525: LESS
50526: IFFALSE 50538
// k := tmp ;
50528: LD_ADDR_VAR 0 9
50532: PUSH
50533: LD_VAR 0 14
50537: ST_TO_ADDR
// for j = 1 to k do
50538: LD_ADDR_VAR 0 8
50542: PUSH
50543: DOUBLE
50544: LD_INT 1
50546: DEC
50547: ST_TO_ADDR
50548: LD_VAR 0 9
50552: PUSH
50553: FOR_TO
50554: IFFALSE 50616
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
50556: LD_VAR 0 8
50560: PPUSH
50561: CALL_OW 266
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: IN
50576: IFFALSE 50614
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50578: LD_VAR 0 4
50582: PUSH
50583: LD_VAR 0 7
50587: ARRAY
50588: PPUSH
50589: LD_VAR 0 14
50593: PUSH
50594: LD_VAR 0 8
50598: ARRAY
50599: PPUSH
50600: CALL_OW 115
// attacking := true ;
50604: LD_ADDR_VAR 0 29
50608: PUSH
50609: LD_INT 1
50611: ST_TO_ADDR
// break ;
50612: GO 50616
// end ;
50614: GO 50553
50616: POP
50617: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
50618: LD_VAR 0 4
50622: PUSH
50623: LD_VAR 0 7
50627: ARRAY
50628: PPUSH
50629: CALL_OW 302
50633: PUSH
50634: LD_VAR 0 29
50638: NOT
50639: AND
50640: IFFALSE 50962
// begin if GetTag ( group [ i ] ) = 71 then
50642: LD_VAR 0 4
50646: PUSH
50647: LD_VAR 0 7
50651: ARRAY
50652: PPUSH
50653: CALL_OW 110
50657: PUSH
50658: LD_INT 71
50660: EQUAL
50661: IFFALSE 50702
// begin if HasTask ( group [ i ] ) then
50663: LD_VAR 0 4
50667: PUSH
50668: LD_VAR 0 7
50672: ARRAY
50673: PPUSH
50674: CALL_OW 314
50678: IFFALSE 50684
// continue else
50680: GO 48068
50682: GO 50702
// SetTag ( group [ i ] , 0 ) ;
50684: LD_VAR 0 4
50688: PUSH
50689: LD_VAR 0 7
50693: ARRAY
50694: PPUSH
50695: LD_INT 0
50697: PPUSH
50698: CALL_OW 109
// end ; k := 8 ;
50702: LD_ADDR_VAR 0 9
50706: PUSH
50707: LD_INT 8
50709: ST_TO_ADDR
// x := 0 ;
50710: LD_ADDR_VAR 0 10
50714: PUSH
50715: LD_INT 0
50717: ST_TO_ADDR
// if tmp < k then
50718: LD_VAR 0 14
50722: PUSH
50723: LD_VAR 0 9
50727: LESS
50728: IFFALSE 50740
// k := tmp ;
50730: LD_ADDR_VAR 0 9
50734: PUSH
50735: LD_VAR 0 14
50739: ST_TO_ADDR
// for j = 1 to k do
50740: LD_ADDR_VAR 0 8
50744: PUSH
50745: DOUBLE
50746: LD_INT 1
50748: DEC
50749: ST_TO_ADDR
50750: LD_VAR 0 9
50754: PUSH
50755: FOR_TO
50756: IFFALSE 50854
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
50758: LD_VAR 0 14
50762: PUSH
50763: LD_VAR 0 8
50767: ARRAY
50768: PPUSH
50769: CALL_OW 247
50773: PUSH
50774: LD_INT 1
50776: EQUAL
50777: PUSH
50778: LD_VAR 0 14
50782: PUSH
50783: LD_VAR 0 8
50787: ARRAY
50788: PPUSH
50789: CALL_OW 256
50793: PUSH
50794: LD_INT 250
50796: LESS
50797: PUSH
50798: LD_VAR 0 20
50802: AND
50803: PUSH
50804: LD_VAR 0 20
50808: NOT
50809: PUSH
50810: LD_VAR 0 14
50814: PUSH
50815: LD_VAR 0 8
50819: ARRAY
50820: PPUSH
50821: CALL_OW 256
50825: PUSH
50826: LD_INT 250
50828: GREATEREQUAL
50829: AND
50830: OR
50831: AND
50832: IFFALSE 50852
// begin x := tmp [ j ] ;
50834: LD_ADDR_VAR 0 10
50838: PUSH
50839: LD_VAR 0 14
50843: PUSH
50844: LD_VAR 0 8
50848: ARRAY
50849: ST_TO_ADDR
// break ;
50850: GO 50854
// end ;
50852: GO 50755
50854: POP
50855: POP
// if x then
50856: LD_VAR 0 10
50860: IFFALSE 50884
// ComAttackUnit ( group [ i ] , x ) else
50862: LD_VAR 0 4
50866: PUSH
50867: LD_VAR 0 7
50871: ARRAY
50872: PPUSH
50873: LD_VAR 0 10
50877: PPUSH
50878: CALL_OW 115
50882: GO 50908
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50884: LD_VAR 0 4
50888: PUSH
50889: LD_VAR 0 7
50893: ARRAY
50894: PPUSH
50895: LD_VAR 0 14
50899: PUSH
50900: LD_INT 1
50902: ARRAY
50903: PPUSH
50904: CALL_OW 115
// if not HasTask ( group [ i ] ) then
50908: LD_VAR 0 4
50912: PUSH
50913: LD_VAR 0 7
50917: ARRAY
50918: PPUSH
50919: CALL_OW 314
50923: NOT
50924: IFFALSE 50962
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
50926: LD_VAR 0 4
50930: PUSH
50931: LD_VAR 0 7
50935: ARRAY
50936: PPUSH
50937: LD_VAR 0 14
50941: PPUSH
50942: LD_VAR 0 4
50946: PUSH
50947: LD_VAR 0 7
50951: ARRAY
50952: PPUSH
50953: CALL_OW 74
50957: PPUSH
50958: CALL_OW 115
// end ; end ; end ;
50962: GO 48068
50964: POP
50965: POP
// wait ( 0 0$1 ) ;
50966: LD_INT 35
50968: PPUSH
50969: CALL_OW 67
// until group = [ ] ;
50973: LD_VAR 0 4
50977: PUSH
50978: EMPTY
50979: EQUAL
50980: IFFALSE 48053
// end ;
50982: LD_VAR 0 2
50986: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50987: LD_INT 0
50989: PPUSH
50990: PPUSH
50991: PPUSH
50992: PPUSH
// if not base_units then
50993: LD_VAR 0 1
50997: NOT
50998: IFFALSE 51002
// exit ;
51000: GO 51089
// result := false ;
51002: LD_ADDR_VAR 0 2
51006: PUSH
51007: LD_INT 0
51009: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51010: LD_ADDR_VAR 0 5
51014: PUSH
51015: LD_VAR 0 1
51019: PPUSH
51020: LD_INT 21
51022: PUSH
51023: LD_INT 3
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PPUSH
51030: CALL_OW 72
51034: ST_TO_ADDR
// if not tmp then
51035: LD_VAR 0 5
51039: NOT
51040: IFFALSE 51044
// exit ;
51042: GO 51089
// for i in tmp do
51044: LD_ADDR_VAR 0 3
51048: PUSH
51049: LD_VAR 0 5
51053: PUSH
51054: FOR_IN
51055: IFFALSE 51087
// begin result := EnemyInRange ( i , 22 ) ;
51057: LD_ADDR_VAR 0 2
51061: PUSH
51062: LD_VAR 0 3
51066: PPUSH
51067: LD_INT 22
51069: PPUSH
51070: CALL 46133 0 2
51074: ST_TO_ADDR
// if result then
51075: LD_VAR 0 2
51079: IFFALSE 51085
// exit ;
51081: POP
51082: POP
51083: GO 51089
// end ;
51085: GO 51054
51087: POP
51088: POP
// end ;
51089: LD_VAR 0 2
51093: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
51094: LD_INT 0
51096: PPUSH
51097: PPUSH
// if not units then
51098: LD_VAR 0 1
51102: NOT
51103: IFFALSE 51107
// exit ;
51105: GO 51177
// result := [ ] ;
51107: LD_ADDR_VAR 0 3
51111: PUSH
51112: EMPTY
51113: ST_TO_ADDR
// for i in units do
51114: LD_ADDR_VAR 0 4
51118: PUSH
51119: LD_VAR 0 1
51123: PUSH
51124: FOR_IN
51125: IFFALSE 51175
// if GetTag ( i ) = tag then
51127: LD_VAR 0 4
51131: PPUSH
51132: CALL_OW 110
51136: PUSH
51137: LD_VAR 0 2
51141: EQUAL
51142: IFFALSE 51173
// result := Insert ( result , result + 1 , i ) ;
51144: LD_ADDR_VAR 0 3
51148: PUSH
51149: LD_VAR 0 3
51153: PPUSH
51154: LD_VAR 0 3
51158: PUSH
51159: LD_INT 1
51161: PLUS
51162: PPUSH
51163: LD_VAR 0 4
51167: PPUSH
51168: CALL_OW 2
51172: ST_TO_ADDR
51173: GO 51124
51175: POP
51176: POP
// end ;
51177: LD_VAR 0 3
51181: RET
// export function IsDriver ( un ) ; begin
51182: LD_INT 0
51184: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51185: LD_ADDR_VAR 0 2
51189: PUSH
51190: LD_VAR 0 1
51194: PUSH
51195: LD_INT 55
51197: PUSH
51198: EMPTY
51199: LIST
51200: PPUSH
51201: CALL_OW 69
51205: IN
51206: ST_TO_ADDR
// end ;
51207: LD_VAR 0 2
51211: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51212: LD_INT 0
51214: PPUSH
51215: PPUSH
// list := [ ] ;
51216: LD_ADDR_VAR 0 5
51220: PUSH
51221: EMPTY
51222: ST_TO_ADDR
// case d of 0 :
51223: LD_VAR 0 3
51227: PUSH
51228: LD_INT 0
51230: DOUBLE
51231: EQUAL
51232: IFTRUE 51236
51234: GO 51369
51236: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51237: LD_ADDR_VAR 0 5
51241: PUSH
51242: LD_VAR 0 1
51246: PUSH
51247: LD_INT 4
51249: MINUS
51250: PUSH
51251: LD_VAR 0 2
51255: PUSH
51256: LD_INT 4
51258: MINUS
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: LIST
51267: PUSH
51268: LD_VAR 0 1
51272: PUSH
51273: LD_INT 3
51275: MINUS
51276: PUSH
51277: LD_VAR 0 2
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: LIST
51289: PUSH
51290: LD_VAR 0 1
51294: PUSH
51295: LD_INT 4
51297: PLUS
51298: PUSH
51299: LD_VAR 0 2
51303: PUSH
51304: LD_INT 4
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: LIST
51311: PUSH
51312: LD_VAR 0 1
51316: PUSH
51317: LD_INT 3
51319: PLUS
51320: PUSH
51321: LD_VAR 0 2
51325: PUSH
51326: LD_INT 3
51328: PLUS
51329: PUSH
51330: LD_INT 5
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: LIST
51337: PUSH
51338: LD_VAR 0 1
51342: PUSH
51343: LD_VAR 0 2
51347: PUSH
51348: LD_INT 4
51350: PLUS
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: LIST
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: ST_TO_ADDR
// end ; 1 :
51367: GO 52067
51369: LD_INT 1
51371: DOUBLE
51372: EQUAL
51373: IFTRUE 51377
51375: GO 51510
51377: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51378: LD_ADDR_VAR 0 5
51382: PUSH
51383: LD_VAR 0 1
51387: PUSH
51388: LD_VAR 0 2
51392: PUSH
51393: LD_INT 4
51395: MINUS
51396: PUSH
51397: LD_INT 3
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: LIST
51404: PUSH
51405: LD_VAR 0 1
51409: PUSH
51410: LD_INT 3
51412: MINUS
51413: PUSH
51414: LD_VAR 0 2
51418: PUSH
51419: LD_INT 3
51421: MINUS
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: LIST
51430: PUSH
51431: LD_VAR 0 1
51435: PUSH
51436: LD_INT 4
51438: MINUS
51439: PUSH
51440: LD_VAR 0 2
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: LIST
51452: PUSH
51453: LD_VAR 0 1
51457: PUSH
51458: LD_VAR 0 2
51462: PUSH
51463: LD_INT 3
51465: PLUS
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: LIST
51474: PUSH
51475: LD_VAR 0 1
51479: PUSH
51480: LD_INT 4
51482: PLUS
51483: PUSH
51484: LD_VAR 0 2
51488: PUSH
51489: LD_INT 4
51491: PLUS
51492: PUSH
51493: LD_INT 5
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: LIST
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: ST_TO_ADDR
// end ; 2 :
51508: GO 52067
51510: LD_INT 2
51512: DOUBLE
51513: EQUAL
51514: IFTRUE 51518
51516: GO 51647
51518: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51519: LD_ADDR_VAR 0 5
51523: PUSH
51524: LD_VAR 0 1
51528: PUSH
51529: LD_VAR 0 2
51533: PUSH
51534: LD_INT 3
51536: MINUS
51537: PUSH
51538: LD_INT 3
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: LIST
51545: PUSH
51546: LD_VAR 0 1
51550: PUSH
51551: LD_INT 4
51553: PLUS
51554: PUSH
51555: LD_VAR 0 2
51559: PUSH
51560: LD_INT 4
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: LIST
51567: PUSH
51568: LD_VAR 0 1
51572: PUSH
51573: LD_VAR 0 2
51577: PUSH
51578: LD_INT 4
51580: PLUS
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: LIST
51589: PUSH
51590: LD_VAR 0 1
51594: PUSH
51595: LD_INT 3
51597: MINUS
51598: PUSH
51599: LD_VAR 0 2
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: PUSH
51612: LD_VAR 0 1
51616: PUSH
51617: LD_INT 4
51619: MINUS
51620: PUSH
51621: LD_VAR 0 2
51625: PUSH
51626: LD_INT 4
51628: MINUS
51629: PUSH
51630: LD_INT 2
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: LIST
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: ST_TO_ADDR
// end ; 3 :
51645: GO 52067
51647: LD_INT 3
51649: DOUBLE
51650: EQUAL
51651: IFTRUE 51655
51653: GO 51788
51655: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51656: LD_ADDR_VAR 0 5
51660: PUSH
51661: LD_VAR 0 1
51665: PUSH
51666: LD_INT 3
51668: PLUS
51669: PUSH
51670: LD_VAR 0 2
51674: PUSH
51675: LD_INT 4
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: LIST
51682: PUSH
51683: LD_VAR 0 1
51687: PUSH
51688: LD_INT 4
51690: PLUS
51691: PUSH
51692: LD_VAR 0 2
51696: PUSH
51697: LD_INT 4
51699: PLUS
51700: PUSH
51701: LD_INT 5
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: LIST
51708: PUSH
51709: LD_VAR 0 1
51713: PUSH
51714: LD_INT 4
51716: MINUS
51717: PUSH
51718: LD_VAR 0 2
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: LIST
51730: PUSH
51731: LD_VAR 0 1
51735: PUSH
51736: LD_VAR 0 2
51740: PUSH
51741: LD_INT 4
51743: MINUS
51744: PUSH
51745: LD_INT 3
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: LIST
51752: PUSH
51753: LD_VAR 0 1
51757: PUSH
51758: LD_INT 3
51760: MINUS
51761: PUSH
51762: LD_VAR 0 2
51766: PUSH
51767: LD_INT 3
51769: MINUS
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: LIST
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: ST_TO_ADDR
// end ; 4 :
51786: GO 52067
51788: LD_INT 4
51790: DOUBLE
51791: EQUAL
51792: IFTRUE 51796
51794: GO 51929
51796: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51797: LD_ADDR_VAR 0 5
51801: PUSH
51802: LD_VAR 0 1
51806: PUSH
51807: LD_VAR 0 2
51811: PUSH
51812: LD_INT 4
51814: PLUS
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: LIST
51823: PUSH
51824: LD_VAR 0 1
51828: PUSH
51829: LD_INT 3
51831: PLUS
51832: PUSH
51833: LD_VAR 0 2
51837: PUSH
51838: LD_INT 3
51840: PLUS
51841: PUSH
51842: LD_INT 5
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: LIST
51849: PUSH
51850: LD_VAR 0 1
51854: PUSH
51855: LD_INT 4
51857: PLUS
51858: PUSH
51859: LD_VAR 0 2
51863: PUSH
51864: LD_INT 4
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: LIST
51871: PUSH
51872: LD_VAR 0 1
51876: PUSH
51877: LD_VAR 0 2
51881: PUSH
51882: LD_INT 3
51884: MINUS
51885: PUSH
51886: LD_INT 3
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: LIST
51893: PUSH
51894: LD_VAR 0 1
51898: PUSH
51899: LD_INT 4
51901: MINUS
51902: PUSH
51903: LD_VAR 0 2
51907: PUSH
51908: LD_INT 4
51910: MINUS
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: LIST
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: ST_TO_ADDR
// end ; 5 :
51927: GO 52067
51929: LD_INT 5
51931: DOUBLE
51932: EQUAL
51933: IFTRUE 51937
51935: GO 52066
51937: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51938: LD_ADDR_VAR 0 5
51942: PUSH
51943: LD_VAR 0 1
51947: PUSH
51948: LD_INT 4
51950: MINUS
51951: PUSH
51952: LD_VAR 0 2
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: LIST
51964: PUSH
51965: LD_VAR 0 1
51969: PUSH
51970: LD_VAR 0 2
51974: PUSH
51975: LD_INT 4
51977: MINUS
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: LIST
51986: PUSH
51987: LD_VAR 0 1
51991: PUSH
51992: LD_INT 4
51994: PLUS
51995: PUSH
51996: LD_VAR 0 2
52000: PUSH
52001: LD_INT 4
52003: PLUS
52004: PUSH
52005: LD_INT 5
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: LIST
52012: PUSH
52013: LD_VAR 0 1
52017: PUSH
52018: LD_INT 3
52020: PLUS
52021: PUSH
52022: LD_VAR 0 2
52026: PUSH
52027: LD_INT 4
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: LIST
52034: PUSH
52035: LD_VAR 0 1
52039: PUSH
52040: LD_VAR 0 2
52044: PUSH
52045: LD_INT 3
52047: PLUS
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: ST_TO_ADDR
// end ; end ;
52064: GO 52067
52066: POP
// result := list ;
52067: LD_ADDR_VAR 0 4
52071: PUSH
52072: LD_VAR 0 5
52076: ST_TO_ADDR
// end ; end_of_file
52077: LD_VAR 0 4
52081: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver ; export function InitMacro ; var i ; begin
52082: LD_INT 0
52084: PPUSH
52085: PPUSH
// skirmish := false ;
52086: LD_ADDR_EXP 56
52090: PUSH
52091: LD_INT 0
52093: ST_TO_ADDR
// mc_bases := [ ] ;
52094: LD_ADDR_EXP 57
52098: PUSH
52099: EMPTY
52100: ST_TO_ADDR
// mc_sides := [ ] ;
52101: LD_ADDR_EXP 83
52105: PUSH
52106: EMPTY
52107: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
52108: LD_ADDR_EXP 58
52112: PUSH
52113: EMPTY
52114: ST_TO_ADDR
// mc_building_repairs := [ ] ;
52115: LD_ADDR_EXP 59
52119: PUSH
52120: EMPTY
52121: ST_TO_ADDR
// mc_need_heal := [ ] ;
52122: LD_ADDR_EXP 60
52126: PUSH
52127: EMPTY
52128: ST_TO_ADDR
// mc_healers := [ ] ;
52129: LD_ADDR_EXP 61
52133: PUSH
52134: EMPTY
52135: ST_TO_ADDR
// mc_build_list := [ ] ;
52136: LD_ADDR_EXP 62
52140: PUSH
52141: EMPTY
52142: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
52143: LD_ADDR_EXP 89
52147: PUSH
52148: EMPTY
52149: ST_TO_ADDR
// mc_builders := [ ] ;
52150: LD_ADDR_EXP 63
52154: PUSH
52155: EMPTY
52156: ST_TO_ADDR
// mc_construct_list := [ ] ;
52157: LD_ADDR_EXP 64
52161: PUSH
52162: EMPTY
52163: ST_TO_ADDR
// mc_turret_list := [ ] ;
52164: LD_ADDR_EXP 65
52168: PUSH
52169: EMPTY
52170: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
52171: LD_ADDR_EXP 66
52175: PUSH
52176: EMPTY
52177: ST_TO_ADDR
// mc_miners := [ ] ;
52178: LD_ADDR_EXP 71
52182: PUSH
52183: EMPTY
52184: ST_TO_ADDR
// mc_mines := [ ] ;
52185: LD_ADDR_EXP 70
52189: PUSH
52190: EMPTY
52191: ST_TO_ADDR
// mc_minefields := [ ] ;
52192: LD_ADDR_EXP 72
52196: PUSH
52197: EMPTY
52198: ST_TO_ADDR
// mc_crates := [ ] ;
52199: LD_ADDR_EXP 73
52203: PUSH
52204: EMPTY
52205: ST_TO_ADDR
// mc_crates_collector := [ ] ;
52206: LD_ADDR_EXP 74
52210: PUSH
52211: EMPTY
52212: ST_TO_ADDR
// mc_crates_area := [ ] ;
52213: LD_ADDR_EXP 75
52217: PUSH
52218: EMPTY
52219: ST_TO_ADDR
// mc_vehicles := [ ] ;
52220: LD_ADDR_EXP 76
52224: PUSH
52225: EMPTY
52226: ST_TO_ADDR
// mc_attack := [ ] ;
52227: LD_ADDR_EXP 77
52231: PUSH
52232: EMPTY
52233: ST_TO_ADDR
// mc_produce := [ ] ;
52234: LD_ADDR_EXP 78
52238: PUSH
52239: EMPTY
52240: ST_TO_ADDR
// mc_defender := [ ] ;
52241: LD_ADDR_EXP 79
52245: PUSH
52246: EMPTY
52247: ST_TO_ADDR
// mc_parking := [ ] ;
52248: LD_ADDR_EXP 81
52252: PUSH
52253: EMPTY
52254: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
52255: LD_ADDR_EXP 67
52259: PUSH
52260: EMPTY
52261: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
52262: LD_ADDR_EXP 69
52266: PUSH
52267: EMPTY
52268: ST_TO_ADDR
// mc_scan := [ ] ;
52269: LD_ADDR_EXP 80
52273: PUSH
52274: EMPTY
52275: ST_TO_ADDR
// mc_scan_area := [ ] ;
52276: LD_ADDR_EXP 82
52280: PUSH
52281: EMPTY
52282: ST_TO_ADDR
// mc_tech := [ ] ;
52283: LD_ADDR_EXP 84
52287: PUSH
52288: EMPTY
52289: ST_TO_ADDR
// end ;
52290: LD_VAR 0 1
52294: RET
// export function MC_Kill ( base ) ; begin
52295: LD_INT 0
52297: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
52298: LD_ADDR_EXP 57
52302: PUSH
52303: LD_EXP 57
52307: PPUSH
52308: LD_VAR 0 1
52312: PPUSH
52313: EMPTY
52314: PPUSH
52315: CALL_OW 1
52319: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
52320: LD_ADDR_EXP 58
52324: PUSH
52325: LD_EXP 58
52329: PPUSH
52330: LD_VAR 0 1
52334: PPUSH
52335: EMPTY
52336: PPUSH
52337: CALL_OW 1
52341: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
52342: LD_ADDR_EXP 59
52346: PUSH
52347: LD_EXP 59
52351: PPUSH
52352: LD_VAR 0 1
52356: PPUSH
52357: EMPTY
52358: PPUSH
52359: CALL_OW 1
52363: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
52364: LD_ADDR_EXP 60
52368: PUSH
52369: LD_EXP 60
52373: PPUSH
52374: LD_VAR 0 1
52378: PPUSH
52379: EMPTY
52380: PPUSH
52381: CALL_OW 1
52385: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
52386: LD_ADDR_EXP 61
52390: PUSH
52391: LD_EXP 61
52395: PPUSH
52396: LD_VAR 0 1
52400: PPUSH
52401: EMPTY
52402: PPUSH
52403: CALL_OW 1
52407: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
52408: LD_ADDR_EXP 62
52412: PUSH
52413: LD_EXP 62
52417: PPUSH
52418: LD_VAR 0 1
52422: PPUSH
52423: EMPTY
52424: PPUSH
52425: CALL_OW 1
52429: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
52430: LD_ADDR_EXP 63
52434: PUSH
52435: LD_EXP 63
52439: PPUSH
52440: LD_VAR 0 1
52444: PPUSH
52445: EMPTY
52446: PPUSH
52447: CALL_OW 1
52451: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
52452: LD_ADDR_EXP 64
52456: PUSH
52457: LD_EXP 64
52461: PPUSH
52462: LD_VAR 0 1
52466: PPUSH
52467: EMPTY
52468: PPUSH
52469: CALL_OW 1
52473: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
52474: LD_ADDR_EXP 65
52478: PUSH
52479: LD_EXP 65
52483: PPUSH
52484: LD_VAR 0 1
52488: PPUSH
52489: EMPTY
52490: PPUSH
52491: CALL_OW 1
52495: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
52496: LD_ADDR_EXP 66
52500: PUSH
52501: LD_EXP 66
52505: PPUSH
52506: LD_VAR 0 1
52510: PPUSH
52511: EMPTY
52512: PPUSH
52513: CALL_OW 1
52517: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
52518: LD_ADDR_EXP 67
52522: PUSH
52523: LD_EXP 67
52527: PPUSH
52528: LD_VAR 0 1
52532: PPUSH
52533: EMPTY
52534: PPUSH
52535: CALL_OW 1
52539: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
52540: LD_ADDR_EXP 68
52544: PUSH
52545: LD_EXP 68
52549: PPUSH
52550: LD_VAR 0 1
52554: PPUSH
52555: LD_INT 0
52557: PPUSH
52558: CALL_OW 1
52562: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
52563: LD_ADDR_EXP 69
52567: PUSH
52568: LD_EXP 69
52572: PPUSH
52573: LD_VAR 0 1
52577: PPUSH
52578: EMPTY
52579: PPUSH
52580: CALL_OW 1
52584: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
52585: LD_ADDR_EXP 70
52589: PUSH
52590: LD_EXP 70
52594: PPUSH
52595: LD_VAR 0 1
52599: PPUSH
52600: EMPTY
52601: PPUSH
52602: CALL_OW 1
52606: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
52607: LD_ADDR_EXP 71
52611: PUSH
52612: LD_EXP 71
52616: PPUSH
52617: LD_VAR 0 1
52621: PPUSH
52622: EMPTY
52623: PPUSH
52624: CALL_OW 1
52628: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
52629: LD_ADDR_EXP 72
52633: PUSH
52634: LD_EXP 72
52638: PPUSH
52639: LD_VAR 0 1
52643: PPUSH
52644: EMPTY
52645: PPUSH
52646: CALL_OW 1
52650: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
52651: LD_ADDR_EXP 73
52655: PUSH
52656: LD_EXP 73
52660: PPUSH
52661: LD_VAR 0 1
52665: PPUSH
52666: EMPTY
52667: PPUSH
52668: CALL_OW 1
52672: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
52673: LD_ADDR_EXP 74
52677: PUSH
52678: LD_EXP 74
52682: PPUSH
52683: LD_VAR 0 1
52687: PPUSH
52688: EMPTY
52689: PPUSH
52690: CALL_OW 1
52694: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
52695: LD_ADDR_EXP 75
52699: PUSH
52700: LD_EXP 75
52704: PPUSH
52705: LD_VAR 0 1
52709: PPUSH
52710: EMPTY
52711: PPUSH
52712: CALL_OW 1
52716: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
52717: LD_ADDR_EXP 76
52721: PUSH
52722: LD_EXP 76
52726: PPUSH
52727: LD_VAR 0 1
52731: PPUSH
52732: EMPTY
52733: PPUSH
52734: CALL_OW 1
52738: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
52739: LD_ADDR_EXP 77
52743: PUSH
52744: LD_EXP 77
52748: PPUSH
52749: LD_VAR 0 1
52753: PPUSH
52754: EMPTY
52755: PPUSH
52756: CALL_OW 1
52760: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
52761: LD_ADDR_EXP 78
52765: PUSH
52766: LD_EXP 78
52770: PPUSH
52771: LD_VAR 0 1
52775: PPUSH
52776: EMPTY
52777: PPUSH
52778: CALL_OW 1
52782: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
52783: LD_ADDR_EXP 79
52787: PUSH
52788: LD_EXP 79
52792: PPUSH
52793: LD_VAR 0 1
52797: PPUSH
52798: EMPTY
52799: PPUSH
52800: CALL_OW 1
52804: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
52805: LD_ADDR_EXP 80
52809: PUSH
52810: LD_EXP 80
52814: PPUSH
52815: LD_VAR 0 1
52819: PPUSH
52820: EMPTY
52821: PPUSH
52822: CALL_OW 1
52826: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
52827: LD_ADDR_EXP 81
52831: PUSH
52832: LD_EXP 81
52836: PPUSH
52837: LD_VAR 0 1
52841: PPUSH
52842: EMPTY
52843: PPUSH
52844: CALL_OW 1
52848: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
52849: LD_ADDR_EXP 82
52853: PUSH
52854: LD_EXP 82
52858: PPUSH
52859: LD_VAR 0 1
52863: PPUSH
52864: EMPTY
52865: PPUSH
52866: CALL_OW 1
52870: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
52871: LD_ADDR_EXP 84
52875: PUSH
52876: LD_EXP 84
52880: PPUSH
52881: LD_VAR 0 1
52885: PPUSH
52886: EMPTY
52887: PPUSH
52888: CALL_OW 1
52892: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
52893: LD_ADDR_EXP 86
52897: PUSH
52898: LD_EXP 86
52902: PPUSH
52903: LD_VAR 0 1
52907: PPUSH
52908: EMPTY
52909: PPUSH
52910: CALL_OW 1
52914: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
52915: LD_ADDR_EXP 87
52919: PUSH
52920: LD_EXP 87
52924: PPUSH
52925: LD_VAR 0 1
52929: PPUSH
52930: EMPTY
52931: PPUSH
52932: CALL_OW 1
52936: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
52937: LD_ADDR_EXP 88
52941: PUSH
52942: LD_EXP 88
52946: PPUSH
52947: LD_VAR 0 1
52951: PPUSH
52952: EMPTY
52953: PPUSH
52954: CALL_OW 1
52958: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
52959: LD_ADDR_EXP 89
52963: PUSH
52964: LD_EXP 89
52968: PPUSH
52969: LD_VAR 0 1
52973: PPUSH
52974: EMPTY
52975: PPUSH
52976: CALL_OW 1
52980: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
52981: LD_ADDR_EXP 90
52985: PUSH
52986: LD_EXP 90
52990: PPUSH
52991: LD_VAR 0 1
52995: PPUSH
52996: EMPTY
52997: PPUSH
52998: CALL_OW 1
53002: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
53003: LD_ADDR_EXP 91
53007: PUSH
53008: LD_EXP 91
53012: PPUSH
53013: LD_VAR 0 1
53017: PPUSH
53018: EMPTY
53019: PPUSH
53020: CALL_OW 1
53024: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
53025: LD_ADDR_EXP 92
53029: PUSH
53030: LD_EXP 92
53034: PPUSH
53035: LD_VAR 0 1
53039: PPUSH
53040: EMPTY
53041: PPUSH
53042: CALL_OW 1
53046: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
53047: LD_ADDR_EXP 93
53051: PUSH
53052: LD_EXP 93
53056: PPUSH
53057: LD_VAR 0 1
53061: PPUSH
53062: EMPTY
53063: PPUSH
53064: CALL_OW 1
53068: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
53069: LD_ADDR_EXP 94
53073: PUSH
53074: LD_EXP 94
53078: PPUSH
53079: LD_VAR 0 1
53083: PPUSH
53084: EMPTY
53085: PPUSH
53086: CALL_OW 1
53090: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
53091: LD_ADDR_EXP 95
53095: PUSH
53096: LD_EXP 95
53100: PPUSH
53101: LD_VAR 0 1
53105: PPUSH
53106: EMPTY
53107: PPUSH
53108: CALL_OW 1
53112: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
53113: LD_ADDR_EXP 96
53117: PUSH
53118: LD_EXP 96
53122: PPUSH
53123: LD_VAR 0 1
53127: PPUSH
53128: EMPTY
53129: PPUSH
53130: CALL_OW 1
53134: ST_TO_ADDR
// end ;
53135: LD_VAR 0 2
53139: RET
// export function MC_Start ( ) ; var i ; begin
53140: LD_INT 0
53142: PPUSH
53143: PPUSH
// for i = 1 to mc_bases do
53144: LD_ADDR_VAR 0 2
53148: PUSH
53149: DOUBLE
53150: LD_INT 1
53152: DEC
53153: ST_TO_ADDR
53154: LD_EXP 57
53158: PUSH
53159: FOR_TO
53160: IFFALSE 54093
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
53162: LD_ADDR_EXP 58
53166: PUSH
53167: LD_EXP 58
53171: PPUSH
53172: LD_VAR 0 2
53176: PPUSH
53177: EMPTY
53178: PPUSH
53179: CALL_OW 1
53183: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
53184: LD_ADDR_EXP 59
53188: PUSH
53189: LD_EXP 59
53193: PPUSH
53194: LD_VAR 0 2
53198: PPUSH
53199: EMPTY
53200: PPUSH
53201: CALL_OW 1
53205: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
53206: LD_ADDR_EXP 60
53210: PUSH
53211: LD_EXP 60
53215: PPUSH
53216: LD_VAR 0 2
53220: PPUSH
53221: EMPTY
53222: PPUSH
53223: CALL_OW 1
53227: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
53228: LD_ADDR_EXP 61
53232: PUSH
53233: LD_EXP 61
53237: PPUSH
53238: LD_VAR 0 2
53242: PPUSH
53243: EMPTY
53244: PUSH
53245: EMPTY
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PPUSH
53251: CALL_OW 1
53255: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
53256: LD_ADDR_EXP 62
53260: PUSH
53261: LD_EXP 62
53265: PPUSH
53266: LD_VAR 0 2
53270: PPUSH
53271: EMPTY
53272: PPUSH
53273: CALL_OW 1
53277: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
53278: LD_ADDR_EXP 89
53282: PUSH
53283: LD_EXP 89
53287: PPUSH
53288: LD_VAR 0 2
53292: PPUSH
53293: EMPTY
53294: PPUSH
53295: CALL_OW 1
53299: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
53300: LD_ADDR_EXP 63
53304: PUSH
53305: LD_EXP 63
53309: PPUSH
53310: LD_VAR 0 2
53314: PPUSH
53315: EMPTY
53316: PPUSH
53317: CALL_OW 1
53321: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
53322: LD_ADDR_EXP 64
53326: PUSH
53327: LD_EXP 64
53331: PPUSH
53332: LD_VAR 0 2
53336: PPUSH
53337: EMPTY
53338: PPUSH
53339: CALL_OW 1
53343: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
53344: LD_ADDR_EXP 65
53348: PUSH
53349: LD_EXP 65
53353: PPUSH
53354: LD_VAR 0 2
53358: PPUSH
53359: EMPTY
53360: PPUSH
53361: CALL_OW 1
53365: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
53366: LD_ADDR_EXP 66
53370: PUSH
53371: LD_EXP 66
53375: PPUSH
53376: LD_VAR 0 2
53380: PPUSH
53381: LD_EXP 57
53385: PUSH
53386: LD_VAR 0 2
53390: ARRAY
53391: PPUSH
53392: LD_INT 2
53394: PUSH
53395: LD_INT 30
53397: PUSH
53398: LD_INT 32
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 30
53407: PUSH
53408: LD_INT 31
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 58
53422: PUSH
53423: EMPTY
53424: LIST
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PPUSH
53430: CALL_OW 72
53434: PPUSH
53435: CALL_OW 1
53439: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
53440: LD_ADDR_EXP 67
53444: PUSH
53445: LD_EXP 67
53449: PPUSH
53450: LD_VAR 0 2
53454: PPUSH
53455: EMPTY
53456: PPUSH
53457: CALL_OW 1
53461: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
53462: LD_ADDR_EXP 71
53466: PUSH
53467: LD_EXP 71
53471: PPUSH
53472: LD_VAR 0 2
53476: PPUSH
53477: EMPTY
53478: PPUSH
53479: CALL_OW 1
53483: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
53484: LD_ADDR_EXP 70
53488: PUSH
53489: LD_EXP 70
53493: PPUSH
53494: LD_VAR 0 2
53498: PPUSH
53499: EMPTY
53500: PPUSH
53501: CALL_OW 1
53505: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
53506: LD_ADDR_EXP 72
53510: PUSH
53511: LD_EXP 72
53515: PPUSH
53516: LD_VAR 0 2
53520: PPUSH
53521: EMPTY
53522: PPUSH
53523: CALL_OW 1
53527: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
53528: LD_ADDR_EXP 73
53532: PUSH
53533: LD_EXP 73
53537: PPUSH
53538: LD_VAR 0 2
53542: PPUSH
53543: EMPTY
53544: PPUSH
53545: CALL_OW 1
53549: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
53550: LD_ADDR_EXP 74
53554: PUSH
53555: LD_EXP 74
53559: PPUSH
53560: LD_VAR 0 2
53564: PPUSH
53565: EMPTY
53566: PPUSH
53567: CALL_OW 1
53571: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
53572: LD_ADDR_EXP 75
53576: PUSH
53577: LD_EXP 75
53581: PPUSH
53582: LD_VAR 0 2
53586: PPUSH
53587: EMPTY
53588: PPUSH
53589: CALL_OW 1
53593: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
53594: LD_ADDR_EXP 76
53598: PUSH
53599: LD_EXP 76
53603: PPUSH
53604: LD_VAR 0 2
53608: PPUSH
53609: EMPTY
53610: PPUSH
53611: CALL_OW 1
53615: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
53616: LD_ADDR_EXP 77
53620: PUSH
53621: LD_EXP 77
53625: PPUSH
53626: LD_VAR 0 2
53630: PPUSH
53631: EMPTY
53632: PPUSH
53633: CALL_OW 1
53637: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
53638: LD_ADDR_EXP 78
53642: PUSH
53643: LD_EXP 78
53647: PPUSH
53648: LD_VAR 0 2
53652: PPUSH
53653: EMPTY
53654: PPUSH
53655: CALL_OW 1
53659: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
53660: LD_ADDR_EXP 79
53664: PUSH
53665: LD_EXP 79
53669: PPUSH
53670: LD_VAR 0 2
53674: PPUSH
53675: EMPTY
53676: PPUSH
53677: CALL_OW 1
53681: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
53682: LD_ADDR_EXP 68
53686: PUSH
53687: LD_EXP 68
53691: PPUSH
53692: LD_VAR 0 2
53696: PPUSH
53697: LD_INT 0
53699: PPUSH
53700: CALL_OW 1
53704: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
53705: LD_ADDR_EXP 81
53709: PUSH
53710: LD_EXP 81
53714: PPUSH
53715: LD_VAR 0 2
53719: PPUSH
53720: LD_INT 0
53722: PPUSH
53723: CALL_OW 1
53727: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
53728: LD_ADDR_EXP 69
53732: PUSH
53733: LD_EXP 69
53737: PPUSH
53738: LD_VAR 0 2
53742: PPUSH
53743: EMPTY
53744: PPUSH
53745: CALL_OW 1
53749: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
53750: LD_ADDR_EXP 80
53754: PUSH
53755: LD_EXP 80
53759: PPUSH
53760: LD_VAR 0 2
53764: PPUSH
53765: LD_INT 0
53767: PPUSH
53768: CALL_OW 1
53772: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
53773: LD_ADDR_EXP 82
53777: PUSH
53778: LD_EXP 82
53782: PPUSH
53783: LD_VAR 0 2
53787: PPUSH
53788: EMPTY
53789: PPUSH
53790: CALL_OW 1
53794: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
53795: LD_ADDR_EXP 85
53799: PUSH
53800: LD_EXP 85
53804: PPUSH
53805: LD_VAR 0 2
53809: PPUSH
53810: LD_INT 0
53812: PPUSH
53813: CALL_OW 1
53817: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
53818: LD_ADDR_EXP 86
53822: PUSH
53823: LD_EXP 86
53827: PPUSH
53828: LD_VAR 0 2
53832: PPUSH
53833: EMPTY
53834: PPUSH
53835: CALL_OW 1
53839: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
53840: LD_ADDR_EXP 87
53844: PUSH
53845: LD_EXP 87
53849: PPUSH
53850: LD_VAR 0 2
53854: PPUSH
53855: EMPTY
53856: PPUSH
53857: CALL_OW 1
53861: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
53862: LD_ADDR_EXP 88
53866: PUSH
53867: LD_EXP 88
53871: PPUSH
53872: LD_VAR 0 2
53876: PPUSH
53877: EMPTY
53878: PPUSH
53879: CALL_OW 1
53883: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
53884: LD_ADDR_EXP 90
53888: PUSH
53889: LD_EXP 90
53893: PPUSH
53894: LD_VAR 0 2
53898: PPUSH
53899: LD_EXP 57
53903: PUSH
53904: LD_VAR 0 2
53908: ARRAY
53909: PPUSH
53910: LD_INT 2
53912: PUSH
53913: LD_INT 30
53915: PUSH
53916: LD_INT 6
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 30
53925: PUSH
53926: LD_INT 7
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 30
53935: PUSH
53936: LD_INT 8
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: PPUSH
53949: CALL_OW 72
53953: PPUSH
53954: CALL_OW 1
53958: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
53959: LD_ADDR_EXP 91
53963: PUSH
53964: LD_EXP 91
53968: PPUSH
53969: LD_VAR 0 2
53973: PPUSH
53974: EMPTY
53975: PPUSH
53976: CALL_OW 1
53980: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
53981: LD_ADDR_EXP 92
53985: PUSH
53986: LD_EXP 92
53990: PPUSH
53991: LD_VAR 0 2
53995: PPUSH
53996: EMPTY
53997: PPUSH
53998: CALL_OW 1
54002: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
54003: LD_ADDR_EXP 93
54007: PUSH
54008: LD_EXP 93
54012: PPUSH
54013: LD_VAR 0 2
54017: PPUSH
54018: EMPTY
54019: PPUSH
54020: CALL_OW 1
54024: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
54025: LD_ADDR_EXP 94
54029: PUSH
54030: LD_EXP 94
54034: PPUSH
54035: LD_VAR 0 2
54039: PPUSH
54040: EMPTY
54041: PPUSH
54042: CALL_OW 1
54046: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
54047: LD_ADDR_EXP 95
54051: PUSH
54052: LD_EXP 95
54056: PPUSH
54057: LD_VAR 0 2
54061: PPUSH
54062: EMPTY
54063: PPUSH
54064: CALL_OW 1
54068: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
54069: LD_ADDR_EXP 96
54073: PUSH
54074: LD_EXP 96
54078: PPUSH
54079: LD_VAR 0 2
54083: PPUSH
54084: EMPTY
54085: PPUSH
54086: CALL_OW 1
54090: ST_TO_ADDR
// end ;
54091: GO 53159
54093: POP
54094: POP
// MC_InitSides ( ) ;
54095: CALL 54381 0 0
// MC_InitResearch ( ) ;
54099: CALL 54120 0 0
// CustomInitMacro ( ) ;
54103: CALL 174 0 0
// skirmish := true ;
54107: LD_ADDR_EXP 56
54111: PUSH
54112: LD_INT 1
54114: ST_TO_ADDR
// end ;
54115: LD_VAR 0 1
54119: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
54120: LD_INT 0
54122: PPUSH
54123: PPUSH
54124: PPUSH
54125: PPUSH
54126: PPUSH
54127: PPUSH
// if not mc_bases then
54128: LD_EXP 57
54132: NOT
54133: IFFALSE 54137
// exit ;
54135: GO 54376
// for i = 1 to 8 do
54137: LD_ADDR_VAR 0 2
54141: PUSH
54142: DOUBLE
54143: LD_INT 1
54145: DEC
54146: ST_TO_ADDR
54147: LD_INT 8
54149: PUSH
54150: FOR_TO
54151: IFFALSE 54177
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
54153: LD_ADDR_EXP 84
54157: PUSH
54158: LD_EXP 84
54162: PPUSH
54163: LD_VAR 0 2
54167: PPUSH
54168: EMPTY
54169: PPUSH
54170: CALL_OW 1
54174: ST_TO_ADDR
54175: GO 54150
54177: POP
54178: POP
// tmp := [ ] ;
54179: LD_ADDR_VAR 0 5
54183: PUSH
54184: EMPTY
54185: ST_TO_ADDR
// for i = 1 to mc_sides do
54186: LD_ADDR_VAR 0 2
54190: PUSH
54191: DOUBLE
54192: LD_INT 1
54194: DEC
54195: ST_TO_ADDR
54196: LD_EXP 83
54200: PUSH
54201: FOR_TO
54202: IFFALSE 54260
// if not mc_sides [ i ] in tmp then
54204: LD_EXP 83
54208: PUSH
54209: LD_VAR 0 2
54213: ARRAY
54214: PUSH
54215: LD_VAR 0 5
54219: IN
54220: NOT
54221: IFFALSE 54258
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
54223: LD_ADDR_VAR 0 5
54227: PUSH
54228: LD_VAR 0 5
54232: PPUSH
54233: LD_VAR 0 5
54237: PUSH
54238: LD_INT 1
54240: PLUS
54241: PPUSH
54242: LD_EXP 83
54246: PUSH
54247: LD_VAR 0 2
54251: ARRAY
54252: PPUSH
54253: CALL_OW 2
54257: ST_TO_ADDR
54258: GO 54201
54260: POP
54261: POP
// if not tmp then
54262: LD_VAR 0 5
54266: NOT
54267: IFFALSE 54271
// exit ;
54269: GO 54376
// for j in tmp do
54271: LD_ADDR_VAR 0 3
54275: PUSH
54276: LD_VAR 0 5
54280: PUSH
54281: FOR_IN
54282: IFFALSE 54374
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
54284: LD_ADDR_VAR 0 6
54288: PUSH
54289: LD_INT 22
54291: PUSH
54292: LD_VAR 0 3
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PPUSH
54301: CALL_OW 69
54305: ST_TO_ADDR
// if not un then
54306: LD_VAR 0 6
54310: NOT
54311: IFFALSE 54315
// continue ;
54313: GO 54281
// nation := GetNation ( un [ 1 ] ) ;
54315: LD_ADDR_VAR 0 4
54319: PUSH
54320: LD_VAR 0 6
54324: PUSH
54325: LD_INT 1
54327: ARRAY
54328: PPUSH
54329: CALL_OW 248
54333: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
54334: LD_ADDR_EXP 84
54338: PUSH
54339: LD_EXP 84
54343: PPUSH
54344: LD_VAR 0 3
54348: PPUSH
54349: LD_VAR 0 3
54353: PPUSH
54354: LD_VAR 0 4
54358: PPUSH
54359: LD_INT 1
54361: PPUSH
54362: CALL 13558 0 3
54366: PPUSH
54367: CALL_OW 1
54371: ST_TO_ADDR
// end ;
54372: GO 54281
54374: POP
54375: POP
// end ;
54376: LD_VAR 0 1
54380: RET
// export function MC_InitSides ( ) ; var i ; begin
54381: LD_INT 0
54383: PPUSH
54384: PPUSH
// if not mc_bases then
54385: LD_EXP 57
54389: NOT
54390: IFFALSE 54394
// exit ;
54392: GO 54468
// for i = 1 to mc_bases do
54394: LD_ADDR_VAR 0 2
54398: PUSH
54399: DOUBLE
54400: LD_INT 1
54402: DEC
54403: ST_TO_ADDR
54404: LD_EXP 57
54408: PUSH
54409: FOR_TO
54410: IFFALSE 54466
// if mc_bases [ i ] then
54412: LD_EXP 57
54416: PUSH
54417: LD_VAR 0 2
54421: ARRAY
54422: IFFALSE 54464
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
54424: LD_ADDR_EXP 83
54428: PUSH
54429: LD_EXP 83
54433: PPUSH
54434: LD_VAR 0 2
54438: PPUSH
54439: LD_EXP 57
54443: PUSH
54444: LD_VAR 0 2
54448: ARRAY
54449: PUSH
54450: LD_INT 1
54452: ARRAY
54453: PPUSH
54454: CALL_OW 255
54458: PPUSH
54459: CALL_OW 1
54463: ST_TO_ADDR
54464: GO 54409
54466: POP
54467: POP
// end ;
54468: LD_VAR 0 1
54472: RET
// every 0 0$01 trigger skirmish do
54473: LD_EXP 56
54477: IFFALSE 54610
54479: GO 54481
54481: DISABLE
// begin enable ;
54482: ENABLE
// MC_CheckBuildings ( ) ;
54483: CALL 55095 0 0
// MC_CheckPeopleLife ( ) ;
54487: CALL 55220 0 0
// RaiseSailEvent ( 103 ) ;
54491: LD_INT 103
54493: PPUSH
54494: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
54498: LD_INT 104
54500: PPUSH
54501: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
54505: LD_INT 105
54507: PPUSH
54508: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
54512: LD_INT 106
54514: PPUSH
54515: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
54519: LD_INT 107
54521: PPUSH
54522: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
54526: LD_INT 108
54528: PPUSH
54529: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
54533: LD_INT 109
54535: PPUSH
54536: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
54540: LD_INT 110
54542: PPUSH
54543: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
54547: LD_INT 111
54549: PPUSH
54550: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
54554: LD_INT 112
54556: PPUSH
54557: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
54561: LD_INT 120
54563: PPUSH
54564: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
54568: LD_INT 121
54570: PPUSH
54571: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
54575: LD_INT 122
54577: PPUSH
54578: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
54582: LD_INT 123
54584: PPUSH
54585: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
54589: LD_INT 125
54591: PPUSH
54592: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
54596: LD_INT 126
54598: PPUSH
54599: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
54603: LD_INT 200
54605: PPUSH
54606: CALL_OW 427
// end ;
54610: END
// every 10 trigger skirmish do var i ;
54611: LD_EXP 56
54615: IFFALSE 54714
54617: GO 54619
54619: DISABLE
54620: LD_INT 0
54622: PPUSH
// begin enable ;
54623: ENABLE
// if not mc_bases then
54624: LD_EXP 57
54628: NOT
54629: IFFALSE 54633
// exit ;
54631: GO 54714
// for i = 1 to mc_bases do
54633: LD_ADDR_VAR 0 1
54637: PUSH
54638: DOUBLE
54639: LD_INT 1
54641: DEC
54642: ST_TO_ADDR
54643: LD_EXP 57
54647: PUSH
54648: FOR_TO
54649: IFFALSE 54712
// if mc_mines [ i ] and mc_miners [ i ] then
54651: LD_EXP 70
54655: PUSH
54656: LD_VAR 0 1
54660: ARRAY
54661: PUSH
54662: LD_EXP 71
54666: PUSH
54667: LD_VAR 0 1
54671: ARRAY
54672: AND
54673: IFFALSE 54710
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
54675: LD_EXP 71
54679: PUSH
54680: LD_VAR 0 1
54684: ARRAY
54685: PUSH
54686: LD_INT 1
54688: ARRAY
54689: PPUSH
54690: CALL_OW 255
54694: PPUSH
54695: LD_EXP 70
54699: PUSH
54700: LD_VAR 0 1
54704: ARRAY
54705: PPUSH
54706: CALL 16790 0 2
54710: GO 54648
54712: POP
54713: POP
// end ;
54714: PPOPN 1
54716: END
// on SailEvent ( event ) do begin if event = 101 then
54717: LD_VAR 0 1
54721: PUSH
54722: LD_INT 101
54724: EQUAL
54725: IFFALSE 54731
// MC_RepairBuildings ( ) ;
54727: CALL 55778 0 0
// if event = 102 then
54731: LD_VAR 0 1
54735: PUSH
54736: LD_INT 102
54738: EQUAL
54739: IFFALSE 54745
// MC_Heal ( ) ;
54741: CALL 56184 0 0
// if event = 103 then
54745: LD_VAR 0 1
54749: PUSH
54750: LD_INT 103
54752: EQUAL
54753: IFFALSE 54759
// MC_Build ( ) ;
54755: CALL 56606 0 0
// if event = 104 then
54759: LD_VAR 0 1
54763: PUSH
54764: LD_INT 104
54766: EQUAL
54767: IFFALSE 54773
// MC_TurretWeapon ( ) ;
54769: CALL 58045 0 0
// if event = 105 then
54773: LD_VAR 0 1
54777: PUSH
54778: LD_INT 105
54780: EQUAL
54781: IFFALSE 54787
// MC_BuildUpgrade ( ) ;
54783: CALL 57596 0 0
// if event = 106 then
54787: LD_VAR 0 1
54791: PUSH
54792: LD_INT 106
54794: EQUAL
54795: IFFALSE 54801
// MC_PlantMines ( ) ;
54797: CALL 58397 0 0
// if event = 107 then
54801: LD_VAR 0 1
54805: PUSH
54806: LD_INT 107
54808: EQUAL
54809: IFFALSE 54815
// MC_CollectCrates ( ) ;
54811: CALL 59404 0 0
// if event = 108 then
54815: LD_VAR 0 1
54819: PUSH
54820: LD_INT 108
54822: EQUAL
54823: IFFALSE 54829
// MC_LinkRemoteControl ( ) ;
54825: CALL 60908 0 0
// if event = 109 then
54829: LD_VAR 0 1
54833: PUSH
54834: LD_INT 109
54836: EQUAL
54837: IFFALSE 54843
// MC_ProduceVehicle ( ) ;
54839: CALL 61089 0 0
// if event = 110 then
54843: LD_VAR 0 1
54847: PUSH
54848: LD_INT 110
54850: EQUAL
54851: IFFALSE 54857
// MC_SendAttack ( ) ;
54853: CALL 61570 0 0
// if event = 111 then
54857: LD_VAR 0 1
54861: PUSH
54862: LD_INT 111
54864: EQUAL
54865: IFFALSE 54871
// MC_Defend ( ) ;
54867: CALL 61678 0 0
// if event = 112 then
54871: LD_VAR 0 1
54875: PUSH
54876: LD_INT 112
54878: EQUAL
54879: IFFALSE 54885
// MC_Research ( ) ;
54881: CALL 62076 0 0
// if event = 120 then
54885: LD_VAR 0 1
54889: PUSH
54890: LD_INT 120
54892: EQUAL
54893: IFFALSE 54899
// MC_RepairVehicle ( ) ;
54895: CALL 63045 0 0
// if event = 121 then
54899: LD_VAR 0 1
54903: PUSH
54904: LD_INT 121
54906: EQUAL
54907: IFFALSE 54913
// MC_TameApe ( ) ;
54909: CALL 63734 0 0
// if event = 122 then
54913: LD_VAR 0 1
54917: PUSH
54918: LD_INT 122
54920: EQUAL
54921: IFFALSE 54927
// MC_ChangeApeClass ( ) ;
54923: CALL 64497 0 0
// if event = 123 then
54927: LD_VAR 0 1
54931: PUSH
54932: LD_INT 123
54934: EQUAL
54935: IFFALSE 54941
// MC_Bazooka ( ) ;
54937: CALL 65131 0 0
// if event = 124 then
54941: LD_VAR 0 1
54945: PUSH
54946: LD_INT 124
54948: EQUAL
54949: IFFALSE 54955
// MC_TeleportExit ( ) ;
54951: CALL 65329 0 0
// if event = 125 then
54955: LD_VAR 0 1
54959: PUSH
54960: LD_INT 125
54962: EQUAL
54963: IFFALSE 54969
// MC_Deposits ( ) ;
54965: CALL 65371 0 0
// if event = 126 then
54969: LD_VAR 0 1
54973: PUSH
54974: LD_INT 126
54976: EQUAL
54977: IFFALSE 54983
// MC_RemoteDriver ( ) ;
54979: CALL 65950 0 0
// if event = 200 then
54983: LD_VAR 0 1
54987: PUSH
54988: LD_INT 200
54990: EQUAL
54991: IFFALSE 54997
// MC_Idle ( ) ;
54993: CALL 67455 0 0
// end ;
54997: PPOPN 1
54999: END
// export function MC_Reset ( base , tag ) ; var i ; begin
55000: LD_INT 0
55002: PPUSH
55003: PPUSH
// if not mc_bases [ base ] or not tag then
55004: LD_EXP 57
55008: PUSH
55009: LD_VAR 0 1
55013: ARRAY
55014: NOT
55015: PUSH
55016: LD_VAR 0 2
55020: NOT
55021: OR
55022: IFFALSE 55026
// exit ;
55024: GO 55090
// for i in mc_bases [ base ] union mc_ape [ base ] do
55026: LD_ADDR_VAR 0 4
55030: PUSH
55031: LD_EXP 57
55035: PUSH
55036: LD_VAR 0 1
55040: ARRAY
55041: PUSH
55042: LD_EXP 86
55046: PUSH
55047: LD_VAR 0 1
55051: ARRAY
55052: UNION
55053: PUSH
55054: FOR_IN
55055: IFFALSE 55088
// if GetTag ( i ) = tag then
55057: LD_VAR 0 4
55061: PPUSH
55062: CALL_OW 110
55066: PUSH
55067: LD_VAR 0 2
55071: EQUAL
55072: IFFALSE 55086
// SetTag ( i , 0 ) ;
55074: LD_VAR 0 4
55078: PPUSH
55079: LD_INT 0
55081: PPUSH
55082: CALL_OW 109
55086: GO 55054
55088: POP
55089: POP
// end ;
55090: LD_VAR 0 3
55094: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
55095: LD_INT 0
55097: PPUSH
55098: PPUSH
55099: PPUSH
// if not mc_bases then
55100: LD_EXP 57
55104: NOT
55105: IFFALSE 55109
// exit ;
55107: GO 55215
// for i = 1 to mc_bases do
55109: LD_ADDR_VAR 0 2
55113: PUSH
55114: DOUBLE
55115: LD_INT 1
55117: DEC
55118: ST_TO_ADDR
55119: LD_EXP 57
55123: PUSH
55124: FOR_TO
55125: IFFALSE 55206
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
55127: LD_ADDR_VAR 0 3
55131: PUSH
55132: LD_EXP 57
55136: PUSH
55137: LD_VAR 0 2
55141: ARRAY
55142: PPUSH
55143: LD_INT 21
55145: PUSH
55146: LD_INT 3
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 3
55155: PUSH
55156: LD_INT 24
55158: PUSH
55159: LD_INT 1000
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PPUSH
55174: CALL_OW 72
55178: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
55179: LD_ADDR_EXP 58
55183: PUSH
55184: LD_EXP 58
55188: PPUSH
55189: LD_VAR 0 2
55193: PPUSH
55194: LD_VAR 0 3
55198: PPUSH
55199: CALL_OW 1
55203: ST_TO_ADDR
// end ;
55204: GO 55124
55206: POP
55207: POP
// RaiseSailEvent ( 101 ) ;
55208: LD_INT 101
55210: PPUSH
55211: CALL_OW 427
// end ;
55215: LD_VAR 0 1
55219: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
55220: LD_INT 0
55222: PPUSH
55223: PPUSH
55224: PPUSH
55225: PPUSH
55226: PPUSH
55227: PPUSH
55228: PPUSH
// if not mc_bases then
55229: LD_EXP 57
55233: NOT
55234: IFFALSE 55238
// exit ;
55236: GO 55773
// for i = 1 to mc_bases do
55238: LD_ADDR_VAR 0 2
55242: PUSH
55243: DOUBLE
55244: LD_INT 1
55246: DEC
55247: ST_TO_ADDR
55248: LD_EXP 57
55252: PUSH
55253: FOR_TO
55254: IFFALSE 55764
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
55256: LD_ADDR_VAR 0 5
55260: PUSH
55261: LD_EXP 57
55265: PUSH
55266: LD_VAR 0 2
55270: ARRAY
55271: PUSH
55272: LD_EXP 86
55276: PUSH
55277: LD_VAR 0 2
55281: ARRAY
55282: UNION
55283: PPUSH
55284: LD_INT 21
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: LD_INT 54
55302: PUSH
55303: EMPTY
55304: LIST
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 3
55312: PUSH
55313: LD_INT 24
55315: PUSH
55316: LD_INT 700
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: LIST
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PPUSH
55336: CALL_OW 72
55340: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
55341: LD_ADDR_VAR 0 6
55345: PUSH
55346: LD_EXP 57
55350: PUSH
55351: LD_VAR 0 2
55355: ARRAY
55356: PPUSH
55357: LD_INT 21
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: LD_INT 3
55372: PUSH
55373: LD_INT 54
55375: PUSH
55376: EMPTY
55377: LIST
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 3
55385: PUSH
55386: LD_INT 24
55388: PUSH
55389: LD_INT 250
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: LIST
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PPUSH
55409: CALL_OW 72
55413: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
55414: LD_ADDR_VAR 0 7
55418: PUSH
55419: LD_VAR 0 5
55423: PUSH
55424: LD_VAR 0 6
55428: DIFF
55429: ST_TO_ADDR
// if not need_heal_1 then
55430: LD_VAR 0 6
55434: NOT
55435: IFFALSE 55468
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
55437: LD_ADDR_EXP 60
55441: PUSH
55442: LD_EXP 60
55446: PPUSH
55447: LD_VAR 0 2
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PPUSH
55459: EMPTY
55460: PPUSH
55461: CALL 20132 0 3
55465: ST_TO_ADDR
55466: GO 55500
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
55468: LD_ADDR_EXP 60
55472: PUSH
55473: LD_EXP 60
55477: PPUSH
55478: LD_VAR 0 2
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PPUSH
55490: LD_VAR 0 6
55494: PPUSH
55495: CALL 20132 0 3
55499: ST_TO_ADDR
// if not need_heal_2 then
55500: LD_VAR 0 7
55504: NOT
55505: IFFALSE 55538
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
55507: LD_ADDR_EXP 60
55511: PUSH
55512: LD_EXP 60
55516: PPUSH
55517: LD_VAR 0 2
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PPUSH
55529: EMPTY
55530: PPUSH
55531: CALL 20132 0 3
55535: ST_TO_ADDR
55536: GO 55570
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
55538: LD_ADDR_EXP 60
55542: PUSH
55543: LD_EXP 60
55547: PPUSH
55548: LD_VAR 0 2
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PPUSH
55560: LD_VAR 0 7
55564: PPUSH
55565: CALL 20132 0 3
55569: ST_TO_ADDR
// if need_heal_2 then
55570: LD_VAR 0 7
55574: IFFALSE 55746
// for j in need_heal_2 do
55576: LD_ADDR_VAR 0 3
55580: PUSH
55581: LD_VAR 0 7
55585: PUSH
55586: FOR_IN
55587: IFFALSE 55744
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
55589: LD_ADDR_VAR 0 5
55593: PUSH
55594: LD_EXP 57
55598: PUSH
55599: LD_VAR 0 2
55603: ARRAY
55604: PPUSH
55605: LD_INT 2
55607: PUSH
55608: LD_INT 30
55610: PUSH
55611: LD_INT 6
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 30
55620: PUSH
55621: LD_INT 7
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 30
55630: PUSH
55631: LD_INT 8
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 30
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 30
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 25
55660: PUSH
55661: LD_INT 4
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: PPUSH
55677: CALL_OW 72
55681: ST_TO_ADDR
// if tmp then
55682: LD_VAR 0 5
55686: IFFALSE 55742
// begin k := NearestUnitToUnit ( tmp , j ) ;
55688: LD_ADDR_VAR 0 4
55692: PUSH
55693: LD_VAR 0 5
55697: PPUSH
55698: LD_VAR 0 3
55702: PPUSH
55703: CALL_OW 74
55707: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
55708: LD_VAR 0 3
55712: PPUSH
55713: LD_VAR 0 4
55717: PPUSH
55718: CALL_OW 296
55722: PUSH
55723: LD_INT 7
55725: GREATER
55726: IFFALSE 55742
// ComMoveUnit ( j , k ) ;
55728: LD_VAR 0 3
55732: PPUSH
55733: LD_VAR 0 4
55737: PPUSH
55738: CALL_OW 112
// end ; end ;
55742: GO 55586
55744: POP
55745: POP
// if not need_heal_1 and not need_heal_2 then
55746: LD_VAR 0 6
55750: NOT
55751: PUSH
55752: LD_VAR 0 7
55756: NOT
55757: AND
55758: IFFALSE 55762
// continue ;
55760: GO 55253
// end ;
55762: GO 55253
55764: POP
55765: POP
// RaiseSailEvent ( 102 ) ;
55766: LD_INT 102
55768: PPUSH
55769: CALL_OW 427
// end ;
55773: LD_VAR 0 1
55777: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
55778: LD_INT 0
55780: PPUSH
55781: PPUSH
55782: PPUSH
55783: PPUSH
55784: PPUSH
// if not mc_bases then
55785: LD_EXP 57
55789: NOT
55790: IFFALSE 55794
// exit ;
55792: GO 56179
// for i = 1 to mc_bases do
55794: LD_ADDR_VAR 0 2
55798: PUSH
55799: DOUBLE
55800: LD_INT 1
55802: DEC
55803: ST_TO_ADDR
55804: LD_EXP 57
55808: PUSH
55809: FOR_TO
55810: IFFALSE 56177
// begin if not mc_building_need_repair [ i ] then
55812: LD_EXP 58
55816: PUSH
55817: LD_VAR 0 2
55821: ARRAY
55822: NOT
55823: IFFALSE 55861
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
55825: LD_ADDR_EXP 59
55829: PUSH
55830: LD_EXP 59
55834: PPUSH
55835: LD_VAR 0 2
55839: PPUSH
55840: EMPTY
55841: PPUSH
55842: CALL_OW 1
55846: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
55847: LD_VAR 0 2
55851: PPUSH
55852: LD_INT 101
55854: PPUSH
55855: CALL 55000 0 2
// continue ;
55859: GO 55809
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
55861: LD_ADDR_EXP 63
55865: PUSH
55866: LD_EXP 63
55870: PPUSH
55871: LD_VAR 0 2
55875: PPUSH
55876: EMPTY
55877: PPUSH
55878: CALL_OW 1
55882: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
55883: LD_VAR 0 2
55887: PPUSH
55888: LD_INT 103
55890: PPUSH
55891: CALL 55000 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
55895: LD_ADDR_VAR 0 5
55899: PUSH
55900: LD_EXP 57
55904: PUSH
55905: LD_VAR 0 2
55909: ARRAY
55910: PUSH
55911: LD_EXP 86
55915: PUSH
55916: LD_VAR 0 2
55920: ARRAY
55921: UNION
55922: PPUSH
55923: LD_INT 2
55925: PUSH
55926: LD_INT 25
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 25
55938: PUSH
55939: LD_INT 16
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: LIST
55950: PUSH
55951: EMPTY
55952: LIST
55953: PPUSH
55954: CALL_OW 72
55958: ST_TO_ADDR
// if not tmp then
55959: LD_VAR 0 5
55963: NOT
55964: IFFALSE 55968
// continue ;
55966: GO 55809
// for j in tmp do
55968: LD_ADDR_VAR 0 3
55972: PUSH
55973: LD_VAR 0 5
55977: PUSH
55978: FOR_IN
55979: IFFALSE 56173
// begin if mc_need_heal [ i ] then
55981: LD_EXP 60
55985: PUSH
55986: LD_VAR 0 2
55990: ARRAY
55991: IFFALSE 56039
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
55993: LD_VAR 0 3
55997: PUSH
55998: LD_EXP 60
56002: PUSH
56003: LD_VAR 0 2
56007: ARRAY
56008: PUSH
56009: LD_INT 1
56011: ARRAY
56012: IN
56013: PUSH
56014: LD_VAR 0 3
56018: PUSH
56019: LD_EXP 60
56023: PUSH
56024: LD_VAR 0 2
56028: ARRAY
56029: PUSH
56030: LD_INT 2
56032: ARRAY
56033: IN
56034: OR
56035: IFFALSE 56039
// continue ;
56037: GO 55978
// if IsInUnit ( j ) then
56039: LD_VAR 0 3
56043: PPUSH
56044: CALL_OW 310
56048: IFFALSE 56059
// ComExitBuilding ( j ) ;
56050: LD_VAR 0 3
56054: PPUSH
56055: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
56059: LD_VAR 0 3
56063: PUSH
56064: LD_EXP 59
56068: PUSH
56069: LD_VAR 0 2
56073: ARRAY
56074: IN
56075: NOT
56076: IFFALSE 56134
// begin SetTag ( j , 101 ) ;
56078: LD_VAR 0 3
56082: PPUSH
56083: LD_INT 101
56085: PPUSH
56086: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
56090: LD_ADDR_EXP 59
56094: PUSH
56095: LD_EXP 59
56099: PPUSH
56100: LD_VAR 0 2
56104: PUSH
56105: LD_EXP 59
56109: PUSH
56110: LD_VAR 0 2
56114: ARRAY
56115: PUSH
56116: LD_INT 1
56118: PLUS
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PPUSH
56124: LD_VAR 0 3
56128: PPUSH
56129: CALL 20132 0 3
56133: ST_TO_ADDR
// end ; Wait ( 3 ) ;
56134: LD_INT 3
56136: PPUSH
56137: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
56141: LD_VAR 0 3
56145: PPUSH
56146: LD_EXP 58
56150: PUSH
56151: LD_VAR 0 2
56155: ARRAY
56156: PPUSH
56157: LD_VAR 0 3
56161: PPUSH
56162: CALL_OW 74
56166: PPUSH
56167: CALL_OW 130
// end ;
56171: GO 55978
56173: POP
56174: POP
// end ;
56175: GO 55809
56177: POP
56178: POP
// end ;
56179: LD_VAR 0 1
56183: RET
// export function MC_Heal ; var i , j , tmp ; begin
56184: LD_INT 0
56186: PPUSH
56187: PPUSH
56188: PPUSH
56189: PPUSH
// if not mc_bases then
56190: LD_EXP 57
56194: NOT
56195: IFFALSE 56199
// exit ;
56197: GO 56601
// for i = 1 to mc_bases do
56199: LD_ADDR_VAR 0 2
56203: PUSH
56204: DOUBLE
56205: LD_INT 1
56207: DEC
56208: ST_TO_ADDR
56209: LD_EXP 57
56213: PUSH
56214: FOR_TO
56215: IFFALSE 56599
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
56217: LD_EXP 60
56221: PUSH
56222: LD_VAR 0 2
56226: ARRAY
56227: PUSH
56228: LD_INT 1
56230: ARRAY
56231: NOT
56232: PUSH
56233: LD_EXP 60
56237: PUSH
56238: LD_VAR 0 2
56242: ARRAY
56243: PUSH
56244: LD_INT 2
56246: ARRAY
56247: NOT
56248: AND
56249: IFFALSE 56287
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
56251: LD_ADDR_EXP 61
56255: PUSH
56256: LD_EXP 61
56260: PPUSH
56261: LD_VAR 0 2
56265: PPUSH
56266: EMPTY
56267: PPUSH
56268: CALL_OW 1
56272: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
56273: LD_VAR 0 2
56277: PPUSH
56278: LD_INT 102
56280: PPUSH
56281: CALL 55000 0 2
// continue ;
56285: GO 56214
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
56287: LD_ADDR_VAR 0 4
56291: PUSH
56292: LD_EXP 57
56296: PUSH
56297: LD_VAR 0 2
56301: ARRAY
56302: PPUSH
56303: LD_INT 25
56305: PUSH
56306: LD_INT 4
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PPUSH
56313: CALL_OW 72
56317: ST_TO_ADDR
// if not tmp then
56318: LD_VAR 0 4
56322: NOT
56323: IFFALSE 56327
// continue ;
56325: GO 56214
// if mc_taming [ i ] then
56327: LD_EXP 88
56331: PUSH
56332: LD_VAR 0 2
56336: ARRAY
56337: IFFALSE 56361
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
56339: LD_ADDR_EXP 88
56343: PUSH
56344: LD_EXP 88
56348: PPUSH
56349: LD_VAR 0 2
56353: PPUSH
56354: EMPTY
56355: PPUSH
56356: CALL_OW 1
56360: ST_TO_ADDR
// for j in tmp do
56361: LD_ADDR_VAR 0 3
56365: PUSH
56366: LD_VAR 0 4
56370: PUSH
56371: FOR_IN
56372: IFFALSE 56595
// begin if IsInUnit ( j ) then
56374: LD_VAR 0 3
56378: PPUSH
56379: CALL_OW 310
56383: IFFALSE 56394
// ComExitBuilding ( j ) ;
56385: LD_VAR 0 3
56389: PPUSH
56390: CALL_OW 122
// if not j in mc_healers [ i ] then
56394: LD_VAR 0 3
56398: PUSH
56399: LD_EXP 61
56403: PUSH
56404: LD_VAR 0 2
56408: ARRAY
56409: IN
56410: NOT
56411: IFFALSE 56457
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
56413: LD_ADDR_EXP 61
56417: PUSH
56418: LD_EXP 61
56422: PPUSH
56423: LD_VAR 0 2
56427: PUSH
56428: LD_EXP 61
56432: PUSH
56433: LD_VAR 0 2
56437: ARRAY
56438: PUSH
56439: LD_INT 1
56441: PLUS
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PPUSH
56447: LD_VAR 0 3
56451: PPUSH
56452: CALL 20132 0 3
56456: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
56457: LD_VAR 0 3
56461: PPUSH
56462: CALL_OW 110
56466: PUSH
56467: LD_INT 102
56469: NONEQUAL
56470: IFFALSE 56484
// SetTag ( j , 102 ) ;
56472: LD_VAR 0 3
56476: PPUSH
56477: LD_INT 102
56479: PPUSH
56480: CALL_OW 109
// Wait ( 3 ) ;
56484: LD_INT 3
56486: PPUSH
56487: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
56491: LD_EXP 60
56495: PUSH
56496: LD_VAR 0 2
56500: ARRAY
56501: PUSH
56502: LD_INT 1
56504: ARRAY
56505: IFFALSE 56537
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
56507: LD_VAR 0 3
56511: PPUSH
56512: LD_EXP 60
56516: PUSH
56517: LD_VAR 0 2
56521: ARRAY
56522: PUSH
56523: LD_INT 1
56525: ARRAY
56526: PUSH
56527: LD_INT 1
56529: ARRAY
56530: PPUSH
56531: CALL_OW 128
56535: GO 56593
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
56537: LD_VAR 0 3
56541: PPUSH
56542: CALL_OW 314
56546: NOT
56547: PUSH
56548: LD_EXP 60
56552: PUSH
56553: LD_VAR 0 2
56557: ARRAY
56558: PUSH
56559: LD_INT 2
56561: ARRAY
56562: AND
56563: IFFALSE 56593
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
56565: LD_VAR 0 3
56569: PPUSH
56570: LD_EXP 60
56574: PUSH
56575: LD_VAR 0 2
56579: ARRAY
56580: PUSH
56581: LD_INT 2
56583: ARRAY
56584: PUSH
56585: LD_INT 1
56587: ARRAY
56588: PPUSH
56589: CALL_OW 128
// end ;
56593: GO 56371
56595: POP
56596: POP
// end ;
56597: GO 56214
56599: POP
56600: POP
// end ;
56601: LD_VAR 0 1
56605: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
56606: LD_INT 0
56608: PPUSH
56609: PPUSH
56610: PPUSH
56611: PPUSH
56612: PPUSH
// if not mc_bases then
56613: LD_EXP 57
56617: NOT
56618: IFFALSE 56622
// exit ;
56620: GO 57591
// for i = 1 to mc_bases do
56622: LD_ADDR_VAR 0 2
56626: PUSH
56627: DOUBLE
56628: LD_INT 1
56630: DEC
56631: ST_TO_ADDR
56632: LD_EXP 57
56636: PUSH
56637: FOR_TO
56638: IFFALSE 57589
// begin if mc_scan [ i ] then
56640: LD_EXP 80
56644: PUSH
56645: LD_VAR 0 2
56649: ARRAY
56650: IFFALSE 56654
// continue ;
56652: GO 56637
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
56654: LD_EXP 62
56658: PUSH
56659: LD_VAR 0 2
56663: ARRAY
56664: NOT
56665: PUSH
56666: LD_EXP 64
56670: PUSH
56671: LD_VAR 0 2
56675: ARRAY
56676: NOT
56677: AND
56678: PUSH
56679: LD_EXP 63
56683: PUSH
56684: LD_VAR 0 2
56688: ARRAY
56689: AND
56690: IFFALSE 56728
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
56692: LD_ADDR_EXP 63
56696: PUSH
56697: LD_EXP 63
56701: PPUSH
56702: LD_VAR 0 2
56706: PPUSH
56707: EMPTY
56708: PPUSH
56709: CALL_OW 1
56713: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
56714: LD_VAR 0 2
56718: PPUSH
56719: LD_INT 103
56721: PPUSH
56722: CALL 55000 0 2
// continue ;
56726: GO 56637
// end ; if mc_construct_list [ i ] then
56728: LD_EXP 64
56732: PUSH
56733: LD_VAR 0 2
56737: ARRAY
56738: IFFALSE 56958
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
56740: LD_ADDR_VAR 0 4
56744: PUSH
56745: LD_EXP 57
56749: PUSH
56750: LD_VAR 0 2
56754: ARRAY
56755: PPUSH
56756: LD_INT 25
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PPUSH
56766: CALL_OW 72
56770: PUSH
56771: LD_EXP 59
56775: PUSH
56776: LD_VAR 0 2
56780: ARRAY
56781: DIFF
56782: ST_TO_ADDR
// if not tmp then
56783: LD_VAR 0 4
56787: NOT
56788: IFFALSE 56792
// continue ;
56790: GO 56637
// for j in tmp do
56792: LD_ADDR_VAR 0 3
56796: PUSH
56797: LD_VAR 0 4
56801: PUSH
56802: FOR_IN
56803: IFFALSE 56954
// begin if not mc_builders [ i ] then
56805: LD_EXP 63
56809: PUSH
56810: LD_VAR 0 2
56814: ARRAY
56815: NOT
56816: IFFALSE 56874
// begin SetTag ( j , 103 ) ;
56818: LD_VAR 0 3
56822: PPUSH
56823: LD_INT 103
56825: PPUSH
56826: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
56830: LD_ADDR_EXP 63
56834: PUSH
56835: LD_EXP 63
56839: PPUSH
56840: LD_VAR 0 2
56844: PUSH
56845: LD_EXP 63
56849: PUSH
56850: LD_VAR 0 2
56854: ARRAY
56855: PUSH
56856: LD_INT 1
56858: PLUS
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PPUSH
56864: LD_VAR 0 3
56868: PPUSH
56869: CALL 20132 0 3
56873: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
56874: LD_VAR 0 3
56878: PPUSH
56879: CALL_OW 310
56883: IFFALSE 56894
// ComExitBuilding ( j ) ;
56885: LD_VAR 0 3
56889: PPUSH
56890: CALL_OW 122
// wait ( 3 ) ;
56894: LD_INT 3
56896: PPUSH
56897: CALL_OW 67
// if not mc_construct_list [ i ] then
56901: LD_EXP 64
56905: PUSH
56906: LD_VAR 0 2
56910: ARRAY
56911: NOT
56912: IFFALSE 56916
// break ;
56914: GO 56954
// if not HasTask ( j ) then
56916: LD_VAR 0 3
56920: PPUSH
56921: CALL_OW 314
56925: NOT
56926: IFFALSE 56952
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
56928: LD_VAR 0 3
56932: PPUSH
56933: LD_EXP 64
56937: PUSH
56938: LD_VAR 0 2
56942: ARRAY
56943: PUSH
56944: LD_INT 1
56946: ARRAY
56947: PPUSH
56948: CALL 22538 0 2
// end ;
56952: GO 56802
56954: POP
56955: POP
// end else
56956: GO 57587
// if mc_build_list [ i ] then
56958: LD_EXP 62
56962: PUSH
56963: LD_VAR 0 2
56967: ARRAY
56968: IFFALSE 57587
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56970: LD_ADDR_VAR 0 5
56974: PUSH
56975: LD_EXP 57
56979: PUSH
56980: LD_VAR 0 2
56984: ARRAY
56985: PPUSH
56986: LD_INT 2
56988: PUSH
56989: LD_INT 30
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 30
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: LIST
57013: PPUSH
57014: CALL_OW 72
57018: ST_TO_ADDR
// if depot then
57019: LD_VAR 0 5
57023: IFFALSE 57041
// depot := depot [ 1 ] else
57025: LD_ADDR_VAR 0 5
57029: PUSH
57030: LD_VAR 0 5
57034: PUSH
57035: LD_INT 1
57037: ARRAY
57038: ST_TO_ADDR
57039: GO 57049
// depot := 0 ;
57041: LD_ADDR_VAR 0 5
57045: PUSH
57046: LD_INT 0
57048: ST_TO_ADDR
// if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
57049: LD_EXP 62
57053: PUSH
57054: LD_VAR 0 2
57058: ARRAY
57059: PUSH
57060: LD_INT 1
57062: ARRAY
57063: PUSH
57064: LD_INT 1
57066: ARRAY
57067: PUSH
57068: LD_INT 0
57070: EQUAL
57071: PUSH
57072: LD_VAR 0 5
57076: PUSH
57077: LD_VAR 0 5
57081: PPUSH
57082: LD_EXP 62
57086: PUSH
57087: LD_VAR 0 2
57091: ARRAY
57092: PUSH
57093: LD_INT 1
57095: ARRAY
57096: PUSH
57097: LD_INT 1
57099: ARRAY
57100: PPUSH
57101: LD_EXP 62
57105: PUSH
57106: LD_VAR 0 2
57110: ARRAY
57111: PUSH
57112: LD_INT 1
57114: ARRAY
57115: PUSH
57116: LD_INT 2
57118: ARRAY
57119: PPUSH
57120: LD_EXP 62
57124: PUSH
57125: LD_VAR 0 2
57129: ARRAY
57130: PUSH
57131: LD_INT 1
57133: ARRAY
57134: PUSH
57135: LD_INT 3
57137: ARRAY
57138: PPUSH
57139: LD_EXP 62
57143: PUSH
57144: LD_VAR 0 2
57148: ARRAY
57149: PUSH
57150: LD_INT 1
57152: ARRAY
57153: PUSH
57154: LD_INT 4
57156: ARRAY
57157: PPUSH
57158: CALL 26770 0 5
57162: AND
57163: OR
57164: IFFALSE 57445
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
57166: LD_ADDR_VAR 0 4
57170: PUSH
57171: LD_EXP 57
57175: PUSH
57176: LD_VAR 0 2
57180: ARRAY
57181: PPUSH
57182: LD_INT 25
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PPUSH
57192: CALL_OW 72
57196: PUSH
57197: LD_EXP 59
57201: PUSH
57202: LD_VAR 0 2
57206: ARRAY
57207: DIFF
57208: ST_TO_ADDR
// if not tmp then
57209: LD_VAR 0 4
57213: NOT
57214: IFFALSE 57218
// continue ;
57216: GO 56637
// for j in tmp do
57218: LD_ADDR_VAR 0 3
57222: PUSH
57223: LD_VAR 0 4
57227: PUSH
57228: FOR_IN
57229: IFFALSE 57441
// begin if not mc_builders [ i ] then
57231: LD_EXP 63
57235: PUSH
57236: LD_VAR 0 2
57240: ARRAY
57241: NOT
57242: IFFALSE 57300
// begin SetTag ( j , 103 ) ;
57244: LD_VAR 0 3
57248: PPUSH
57249: LD_INT 103
57251: PPUSH
57252: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
57256: LD_ADDR_EXP 63
57260: PUSH
57261: LD_EXP 63
57265: PPUSH
57266: LD_VAR 0 2
57270: PUSH
57271: LD_EXP 63
57275: PUSH
57276: LD_VAR 0 2
57280: ARRAY
57281: PUSH
57282: LD_INT 1
57284: PLUS
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PPUSH
57290: LD_VAR 0 3
57294: PPUSH
57295: CALL 20132 0 3
57299: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
57300: LD_VAR 0 3
57304: PPUSH
57305: CALL_OW 310
57309: IFFALSE 57320
// ComExitBuilding ( j ) ;
57311: LD_VAR 0 3
57315: PPUSH
57316: CALL_OW 122
// wait ( 3 ) ;
57320: LD_INT 3
57322: PPUSH
57323: CALL_OW 67
// if not mc_build_list [ i ] then
57327: LD_EXP 62
57331: PUSH
57332: LD_VAR 0 2
57336: ARRAY
57337: NOT
57338: IFFALSE 57342
// break ;
57340: GO 57441
// if not HasTask ( j ) then
57342: LD_VAR 0 3
57346: PPUSH
57347: CALL_OW 314
57351: NOT
57352: IFFALSE 57439
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
57354: LD_VAR 0 3
57358: PPUSH
57359: LD_EXP 62
57363: PUSH
57364: LD_VAR 0 2
57368: ARRAY
57369: PUSH
57370: LD_INT 1
57372: ARRAY
57373: PUSH
57374: LD_INT 1
57376: ARRAY
57377: PPUSH
57378: LD_EXP 62
57382: PUSH
57383: LD_VAR 0 2
57387: ARRAY
57388: PUSH
57389: LD_INT 1
57391: ARRAY
57392: PUSH
57393: LD_INT 2
57395: ARRAY
57396: PPUSH
57397: LD_EXP 62
57401: PUSH
57402: LD_VAR 0 2
57406: ARRAY
57407: PUSH
57408: LD_INT 1
57410: ARRAY
57411: PUSH
57412: LD_INT 3
57414: ARRAY
57415: PPUSH
57416: LD_EXP 62
57420: PUSH
57421: LD_VAR 0 2
57425: ARRAY
57426: PUSH
57427: LD_INT 1
57429: ARRAY
57430: PUSH
57431: LD_INT 4
57433: ARRAY
57434: PPUSH
57435: CALL_OW 145
// end ;
57439: GO 57228
57441: POP
57442: POP
// end else
57443: GO 57587
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
57445: LD_EXP 57
57449: PUSH
57450: LD_VAR 0 2
57454: ARRAY
57455: PPUSH
57456: LD_EXP 62
57460: PUSH
57461: LD_VAR 0 2
57465: ARRAY
57466: PUSH
57467: LD_INT 1
57469: ARRAY
57470: PUSH
57471: LD_INT 1
57473: ARRAY
57474: PPUSH
57475: LD_EXP 62
57479: PUSH
57480: LD_VAR 0 2
57484: ARRAY
57485: PUSH
57486: LD_INT 1
57488: ARRAY
57489: PUSH
57490: LD_INT 2
57492: ARRAY
57493: PPUSH
57494: LD_EXP 62
57498: PUSH
57499: LD_VAR 0 2
57503: ARRAY
57504: PUSH
57505: LD_INT 1
57507: ARRAY
57508: PUSH
57509: LD_INT 3
57511: ARRAY
57512: PPUSH
57513: LD_EXP 62
57517: PUSH
57518: LD_VAR 0 2
57522: ARRAY
57523: PUSH
57524: LD_INT 1
57526: ARRAY
57527: PUSH
57528: LD_INT 4
57530: ARRAY
57531: PPUSH
57532: CALL 26201 0 5
57536: NOT
57537: IFFALSE 57587
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
57539: LD_ADDR_EXP 62
57543: PUSH
57544: LD_EXP 62
57548: PPUSH
57549: LD_VAR 0 2
57553: PPUSH
57554: LD_EXP 62
57558: PUSH
57559: LD_VAR 0 2
57563: ARRAY
57564: PPUSH
57565: LD_INT 1
57567: PPUSH
57568: LD_INT 1
57570: NEG
57571: PPUSH
57572: LD_INT 0
57574: PPUSH
57575: CALL 19115 0 4
57579: PPUSH
57580: CALL_OW 1
57584: ST_TO_ADDR
// continue ;
57585: GO 56637
// end ; end ; end ;
57587: GO 56637
57589: POP
57590: POP
// end ;
57591: LD_VAR 0 1
57595: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
57596: LD_INT 0
57598: PPUSH
57599: PPUSH
57600: PPUSH
57601: PPUSH
57602: PPUSH
57603: PPUSH
// if not mc_bases then
57604: LD_EXP 57
57608: NOT
57609: IFFALSE 57613
// exit ;
57611: GO 58040
// for i = 1 to mc_bases do
57613: LD_ADDR_VAR 0 2
57617: PUSH
57618: DOUBLE
57619: LD_INT 1
57621: DEC
57622: ST_TO_ADDR
57623: LD_EXP 57
57627: PUSH
57628: FOR_TO
57629: IFFALSE 58038
// begin tmp := mc_build_upgrade [ i ] ;
57631: LD_ADDR_VAR 0 4
57635: PUSH
57636: LD_EXP 89
57640: PUSH
57641: LD_VAR 0 2
57645: ARRAY
57646: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
57647: LD_ADDR_VAR 0 6
57651: PUSH
57652: LD_EXP 90
57656: PUSH
57657: LD_VAR 0 2
57661: ARRAY
57662: PPUSH
57663: LD_INT 2
57665: PUSH
57666: LD_INT 30
57668: PUSH
57669: LD_INT 6
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 30
57678: PUSH
57679: LD_INT 7
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: LIST
57690: PPUSH
57691: CALL_OW 72
57695: ST_TO_ADDR
// if not tmp and not lab then
57696: LD_VAR 0 4
57700: NOT
57701: PUSH
57702: LD_VAR 0 6
57706: NOT
57707: AND
57708: IFFALSE 57712
// continue ;
57710: GO 57628
// if tmp then
57712: LD_VAR 0 4
57716: IFFALSE 57836
// for j in tmp do
57718: LD_ADDR_VAR 0 3
57722: PUSH
57723: LD_VAR 0 4
57727: PUSH
57728: FOR_IN
57729: IFFALSE 57834
// begin if UpgradeCost ( j ) then
57731: LD_VAR 0 3
57735: PPUSH
57736: CALL 25861 0 1
57740: IFFALSE 57832
// begin ComUpgrade ( j ) ;
57742: LD_VAR 0 3
57746: PPUSH
57747: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
57751: LD_ADDR_EXP 89
57755: PUSH
57756: LD_EXP 89
57760: PPUSH
57761: LD_VAR 0 2
57765: PPUSH
57766: LD_EXP 89
57770: PUSH
57771: LD_VAR 0 2
57775: ARRAY
57776: PUSH
57777: LD_VAR 0 3
57781: DIFF
57782: PPUSH
57783: CALL_OW 1
57787: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
57788: LD_ADDR_EXP 64
57792: PUSH
57793: LD_EXP 64
57797: PPUSH
57798: LD_VAR 0 2
57802: PUSH
57803: LD_EXP 64
57807: PUSH
57808: LD_VAR 0 2
57812: ARRAY
57813: PUSH
57814: LD_INT 1
57816: PLUS
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PPUSH
57822: LD_VAR 0 3
57826: PPUSH
57827: CALL 20132 0 3
57831: ST_TO_ADDR
// end ; end ;
57832: GO 57728
57834: POP
57835: POP
// if not lab or not mc_lab_upgrade [ i ] then
57836: LD_VAR 0 6
57840: NOT
57841: PUSH
57842: LD_EXP 91
57846: PUSH
57847: LD_VAR 0 2
57851: ARRAY
57852: NOT
57853: OR
57854: IFFALSE 57858
// continue ;
57856: GO 57628
// for j in lab do
57858: LD_ADDR_VAR 0 3
57862: PUSH
57863: LD_VAR 0 6
57867: PUSH
57868: FOR_IN
57869: IFFALSE 58034
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
57871: LD_VAR 0 3
57875: PPUSH
57876: CALL_OW 266
57880: PUSH
57881: LD_INT 6
57883: PUSH
57884: LD_INT 7
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: IN
57891: PUSH
57892: LD_VAR 0 3
57896: PPUSH
57897: CALL_OW 461
57901: PUSH
57902: LD_INT 1
57904: NONEQUAL
57905: AND
57906: IFFALSE 58032
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
57908: LD_VAR 0 3
57912: PPUSH
57913: LD_EXP 91
57917: PUSH
57918: LD_VAR 0 2
57922: ARRAY
57923: PUSH
57924: LD_INT 1
57926: ARRAY
57927: PPUSH
57928: CALL 26066 0 2
57932: IFFALSE 58032
// begin ComCancel ( j ) ;
57934: LD_VAR 0 3
57938: PPUSH
57939: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
57943: LD_VAR 0 3
57947: PPUSH
57948: LD_EXP 91
57952: PUSH
57953: LD_VAR 0 2
57957: ARRAY
57958: PUSH
57959: LD_INT 1
57961: ARRAY
57962: PPUSH
57963: CALL_OW 207
// if not j in mc_construct_list [ i ] then
57967: LD_VAR 0 3
57971: PUSH
57972: LD_EXP 64
57976: PUSH
57977: LD_VAR 0 2
57981: ARRAY
57982: IN
57983: NOT
57984: IFFALSE 58030
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
57986: LD_ADDR_EXP 64
57990: PUSH
57991: LD_EXP 64
57995: PPUSH
57996: LD_VAR 0 2
58000: PUSH
58001: LD_EXP 64
58005: PUSH
58006: LD_VAR 0 2
58010: ARRAY
58011: PUSH
58012: LD_INT 1
58014: PLUS
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PPUSH
58020: LD_VAR 0 3
58024: PPUSH
58025: CALL 20132 0 3
58029: ST_TO_ADDR
// break ;
58030: GO 58034
// end ; end ; end ;
58032: GO 57868
58034: POP
58035: POP
// end ;
58036: GO 57628
58038: POP
58039: POP
// end ;
58040: LD_VAR 0 1
58044: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
58045: LD_INT 0
58047: PPUSH
58048: PPUSH
58049: PPUSH
58050: PPUSH
58051: PPUSH
58052: PPUSH
58053: PPUSH
// if not mc_bases then
58054: LD_EXP 57
58058: NOT
58059: IFFALSE 58063
// exit ;
58061: GO 58392
// for i = 1 to mc_bases do
58063: LD_ADDR_VAR 0 2
58067: PUSH
58068: DOUBLE
58069: LD_INT 1
58071: DEC
58072: ST_TO_ADDR
58073: LD_EXP 57
58077: PUSH
58078: FOR_TO
58079: IFFALSE 58390
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
58081: LD_EXP 65
58085: PUSH
58086: LD_VAR 0 2
58090: ARRAY
58091: NOT
58092: PUSH
58093: LD_EXP 57
58097: PUSH
58098: LD_VAR 0 2
58102: ARRAY
58103: PPUSH
58104: LD_INT 30
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PPUSH
58114: CALL_OW 72
58118: NOT
58119: OR
58120: IFFALSE 58124
// continue ;
58122: GO 58078
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
58124: LD_EXP 65
58128: PUSH
58129: LD_VAR 0 2
58133: ARRAY
58134: PUSH
58135: LD_INT 1
58137: ARRAY
58138: PPUSH
58139: CALL_OW 269
58143: IFFALSE 58209
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
58145: LD_ADDR_VAR 0 4
58149: PUSH
58150: LD_EXP 65
58154: PUSH
58155: LD_VAR 0 2
58159: ARRAY
58160: PPUSH
58161: LD_INT 1
58163: PPUSH
58164: CALL_OW 3
58168: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
58169: LD_ADDR_EXP 65
58173: PUSH
58174: LD_EXP 65
58178: PPUSH
58179: LD_VAR 0 2
58183: PPUSH
58184: LD_VAR 0 4
58188: PPUSH
58189: CALL_OW 1
58193: ST_TO_ADDR
// if not mc_turret_list [ i ] then
58194: LD_EXP 65
58198: PUSH
58199: LD_VAR 0 2
58203: ARRAY
58204: NOT
58205: IFFALSE 58209
// continue ;
58207: GO 58078
// end ; busy := false ;
58209: LD_ADDR_VAR 0 6
58213: PUSH
58214: LD_INT 0
58216: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
58217: LD_ADDR_VAR 0 4
58221: PUSH
58222: LD_EXP 57
58226: PUSH
58227: LD_VAR 0 2
58231: ARRAY
58232: PPUSH
58233: LD_INT 30
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PPUSH
58243: CALL_OW 72
58247: ST_TO_ADDR
// for j in tmp do
58248: LD_ADDR_VAR 0 3
58252: PUSH
58253: LD_VAR 0 4
58257: PUSH
58258: FOR_IN
58259: IFFALSE 58287
// if not BuildingStatus ( j ) = bs_idle then
58261: LD_VAR 0 3
58265: PPUSH
58266: CALL_OW 461
58270: PUSH
58271: LD_INT 2
58273: EQUAL
58274: NOT
58275: IFFALSE 58285
// busy := true ;
58277: LD_ADDR_VAR 0 6
58281: PUSH
58282: LD_INT 1
58284: ST_TO_ADDR
58285: GO 58258
58287: POP
58288: POP
// if busy then
58289: LD_VAR 0 6
58293: IFFALSE 58297
// continue ;
58295: GO 58078
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
58297: LD_ADDR_VAR 0 7
58301: PUSH
58302: LD_EXP 65
58306: PUSH
58307: LD_VAR 0 2
58311: ARRAY
58312: PUSH
58313: LD_INT 1
58315: ARRAY
58316: PPUSH
58317: CALL 24425 0 1
58321: ST_TO_ADDR
// if not weapon then
58322: LD_VAR 0 7
58326: NOT
58327: IFFALSE 58331
// continue ;
58329: GO 58078
// if mc_allowed_tower_weapons [ i ] then
58331: LD_EXP 95
58335: PUSH
58336: LD_VAR 0 2
58340: ARRAY
58341: IFFALSE 58364
// if not weapon in mc_allowed_tower_weapons [ i ] then
58343: LD_VAR 0 7
58347: PUSH
58348: LD_EXP 95
58352: PUSH
58353: LD_VAR 0 2
58357: ARRAY
58358: IN
58359: NOT
58360: IFFALSE 58364
// continue ;
58362: GO 58078
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
58364: LD_EXP 65
58368: PUSH
58369: LD_VAR 0 2
58373: ARRAY
58374: PUSH
58375: LD_INT 1
58377: ARRAY
58378: PPUSH
58379: LD_VAR 0 7
58383: PPUSH
58384: CALL_OW 148
// end ;
58388: GO 58078
58390: POP
58391: POP
// end ;
58392: LD_VAR 0 1
58396: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
58397: LD_INT 0
58399: PPUSH
58400: PPUSH
58401: PPUSH
58402: PPUSH
58403: PPUSH
58404: PPUSH
// if not mc_bases then
58405: LD_EXP 57
58409: NOT
58410: IFFALSE 58414
// exit ;
58412: GO 59399
// for i = 1 to mc_bases do
58414: LD_ADDR_VAR 0 2
58418: PUSH
58419: DOUBLE
58420: LD_INT 1
58422: DEC
58423: ST_TO_ADDR
58424: LD_EXP 57
58428: PUSH
58429: FOR_TO
58430: IFFALSE 59397
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
58432: LD_EXP 70
58436: PUSH
58437: LD_VAR 0 2
58441: ARRAY
58442: NOT
58443: PUSH
58444: LD_EXP 70
58448: PUSH
58449: LD_VAR 0 2
58453: ARRAY
58454: PUSH
58455: LD_EXP 71
58459: PUSH
58460: LD_VAR 0 2
58464: ARRAY
58465: EQUAL
58466: OR
58467: IFFALSE 58471
// continue ;
58469: GO 58429
// if mc_miners [ i ] then
58471: LD_EXP 71
58475: PUSH
58476: LD_VAR 0 2
58480: ARRAY
58481: IFFALSE 59084
// begin k := 1 ;
58483: LD_ADDR_VAR 0 4
58487: PUSH
58488: LD_INT 1
58490: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
58491: LD_ADDR_VAR 0 3
58495: PUSH
58496: DOUBLE
58497: LD_EXP 71
58501: PUSH
58502: LD_VAR 0 2
58506: ARRAY
58507: INC
58508: ST_TO_ADDR
58509: LD_INT 1
58511: PUSH
58512: FOR_DOWNTO
58513: IFFALSE 59082
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
58515: LD_EXP 71
58519: PUSH
58520: LD_VAR 0 2
58524: ARRAY
58525: PUSH
58526: LD_VAR 0 3
58530: ARRAY
58531: PPUSH
58532: CALL_OW 301
58536: IFFALSE 58599
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
58538: LD_ADDR_VAR 0 5
58542: PUSH
58543: LD_EXP 71
58547: PUSH
58548: LD_VAR 0 2
58552: ARRAY
58553: PUSH
58554: LD_EXP 71
58558: PUSH
58559: LD_VAR 0 2
58563: ARRAY
58564: PUSH
58565: LD_VAR 0 3
58569: ARRAY
58570: DIFF
58571: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
58572: LD_ADDR_EXP 71
58576: PUSH
58577: LD_EXP 71
58581: PPUSH
58582: LD_VAR 0 2
58586: PPUSH
58587: LD_VAR 0 5
58591: PPUSH
58592: CALL_OW 1
58596: ST_TO_ADDR
// continue ;
58597: GO 58512
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
58599: LD_EXP 71
58603: PUSH
58604: LD_VAR 0 2
58608: ARRAY
58609: PUSH
58610: LD_VAR 0 3
58614: ARRAY
58615: PPUSH
58616: CALL 19633 0 1
58620: PUSH
58621: LD_EXP 71
58625: PUSH
58626: LD_VAR 0 2
58630: ARRAY
58631: PUSH
58632: LD_VAR 0 3
58636: ARRAY
58637: PPUSH
58638: CALL_OW 255
58642: PPUSH
58643: LD_EXP 70
58647: PUSH
58648: LD_VAR 0 2
58652: ARRAY
58653: PUSH
58654: LD_VAR 0 4
58658: ARRAY
58659: PUSH
58660: LD_INT 1
58662: ARRAY
58663: PPUSH
58664: LD_EXP 70
58668: PUSH
58669: LD_VAR 0 2
58673: ARRAY
58674: PUSH
58675: LD_VAR 0 4
58679: ARRAY
58680: PUSH
58681: LD_INT 2
58683: ARRAY
58684: PPUSH
58685: LD_INT 15
58687: PPUSH
58688: CALL 20626 0 4
58692: PUSH
58693: LD_INT 4
58695: ARRAY
58696: PUSH
58697: LD_EXP 71
58701: PUSH
58702: LD_VAR 0 2
58706: ARRAY
58707: PUSH
58708: LD_VAR 0 3
58712: ARRAY
58713: PPUSH
58714: LD_INT 10
58716: PPUSH
58717: CALL 22323 0 2
58721: PUSH
58722: LD_INT 4
58724: ARRAY
58725: OR
58726: AND
58727: IFFALSE 58750
// ComStop ( mc_miners [ i ] [ j ] ) ;
58729: LD_EXP 71
58733: PUSH
58734: LD_VAR 0 2
58738: ARRAY
58739: PUSH
58740: LD_VAR 0 3
58744: ARRAY
58745: PPUSH
58746: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
58750: LD_EXP 71
58754: PUSH
58755: LD_VAR 0 2
58759: ARRAY
58760: PUSH
58761: LD_VAR 0 3
58765: ARRAY
58766: PPUSH
58767: CALL_OW 257
58771: PUSH
58772: LD_INT 1
58774: EQUAL
58775: PUSH
58776: LD_EXP 71
58780: PUSH
58781: LD_VAR 0 2
58785: ARRAY
58786: PUSH
58787: LD_VAR 0 3
58791: ARRAY
58792: PPUSH
58793: CALL_OW 459
58797: NOT
58798: AND
58799: PUSH
58800: LD_EXP 71
58804: PUSH
58805: LD_VAR 0 2
58809: ARRAY
58810: PUSH
58811: LD_VAR 0 3
58815: ARRAY
58816: PPUSH
58817: CALL_OW 255
58821: PPUSH
58822: LD_EXP 70
58826: PUSH
58827: LD_VAR 0 2
58831: ARRAY
58832: PUSH
58833: LD_VAR 0 4
58837: ARRAY
58838: PUSH
58839: LD_INT 1
58841: ARRAY
58842: PPUSH
58843: LD_EXP 70
58847: PUSH
58848: LD_VAR 0 2
58852: ARRAY
58853: PUSH
58854: LD_VAR 0 4
58858: ARRAY
58859: PUSH
58860: LD_INT 2
58862: ARRAY
58863: PPUSH
58864: LD_INT 15
58866: PPUSH
58867: CALL 20626 0 4
58871: PUSH
58872: LD_INT 4
58874: ARRAY
58875: PUSH
58876: LD_INT 0
58878: EQUAL
58879: AND
58880: PUSH
58881: LD_EXP 71
58885: PUSH
58886: LD_VAR 0 2
58890: ARRAY
58891: PUSH
58892: LD_VAR 0 3
58896: ARRAY
58897: PPUSH
58898: CALL_OW 314
58902: NOT
58903: AND
58904: IFFALSE 59080
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
58906: LD_EXP 71
58910: PUSH
58911: LD_VAR 0 2
58915: ARRAY
58916: PUSH
58917: LD_VAR 0 3
58921: ARRAY
58922: PPUSH
58923: CALL_OW 310
58927: IFFALSE 58950
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
58929: LD_EXP 71
58933: PUSH
58934: LD_VAR 0 2
58938: ARRAY
58939: PUSH
58940: LD_VAR 0 3
58944: ARRAY
58945: PPUSH
58946: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
58950: LD_EXP 71
58954: PUSH
58955: LD_VAR 0 2
58959: ARRAY
58960: PUSH
58961: LD_VAR 0 3
58965: ARRAY
58966: PPUSH
58967: CALL_OW 314
58971: NOT
58972: IFFALSE 59040
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
58974: LD_EXP 71
58978: PUSH
58979: LD_VAR 0 2
58983: ARRAY
58984: PUSH
58985: LD_VAR 0 3
58989: ARRAY
58990: PPUSH
58991: LD_EXP 70
58995: PUSH
58996: LD_VAR 0 2
59000: ARRAY
59001: PUSH
59002: LD_VAR 0 4
59006: ARRAY
59007: PUSH
59008: LD_INT 1
59010: ARRAY
59011: PPUSH
59012: LD_EXP 70
59016: PUSH
59017: LD_VAR 0 2
59021: ARRAY
59022: PUSH
59023: LD_VAR 0 4
59027: ARRAY
59028: PUSH
59029: LD_INT 2
59031: ARRAY
59032: PPUSH
59033: LD_INT 0
59035: PPUSH
59036: CALL_OW 193
// k := k + 1 ;
59040: LD_ADDR_VAR 0 4
59044: PUSH
59045: LD_VAR 0 4
59049: PUSH
59050: LD_INT 1
59052: PLUS
59053: ST_TO_ADDR
// if k > mc_mines [ i ] then
59054: LD_VAR 0 4
59058: PUSH
59059: LD_EXP 70
59063: PUSH
59064: LD_VAR 0 2
59068: ARRAY
59069: GREATER
59070: IFFALSE 59080
// k := 1 ;
59072: LD_ADDR_VAR 0 4
59076: PUSH
59077: LD_INT 1
59079: ST_TO_ADDR
// end ; end ;
59080: GO 58512
59082: POP
59083: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
59084: LD_ADDR_VAR 0 5
59088: PUSH
59089: LD_EXP 57
59093: PUSH
59094: LD_VAR 0 2
59098: ARRAY
59099: PPUSH
59100: LD_INT 2
59102: PUSH
59103: LD_INT 30
59105: PUSH
59106: LD_INT 4
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 30
59115: PUSH
59116: LD_INT 5
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 30
59125: PUSH
59126: LD_INT 32
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: PPUSH
59139: CALL_OW 72
59143: ST_TO_ADDR
// if not tmp then
59144: LD_VAR 0 5
59148: NOT
59149: IFFALSE 59153
// continue ;
59151: GO 58429
// list := [ ] ;
59153: LD_ADDR_VAR 0 6
59157: PUSH
59158: EMPTY
59159: ST_TO_ADDR
// for j in tmp do
59160: LD_ADDR_VAR 0 3
59164: PUSH
59165: LD_VAR 0 5
59169: PUSH
59170: FOR_IN
59171: IFFALSE 59240
// begin for k in UnitsInside ( j ) do
59173: LD_ADDR_VAR 0 4
59177: PUSH
59178: LD_VAR 0 3
59182: PPUSH
59183: CALL_OW 313
59187: PUSH
59188: FOR_IN
59189: IFFALSE 59236
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
59191: LD_VAR 0 4
59195: PPUSH
59196: CALL_OW 257
59200: PUSH
59201: LD_INT 1
59203: EQUAL
59204: PUSH
59205: LD_VAR 0 4
59209: PPUSH
59210: CALL_OW 459
59214: NOT
59215: AND
59216: IFFALSE 59234
// list := list ^ k ;
59218: LD_ADDR_VAR 0 6
59222: PUSH
59223: LD_VAR 0 6
59227: PUSH
59228: LD_VAR 0 4
59232: ADD
59233: ST_TO_ADDR
59234: GO 59188
59236: POP
59237: POP
// end ;
59238: GO 59170
59240: POP
59241: POP
// list := list diff mc_miners [ i ] ;
59242: LD_ADDR_VAR 0 6
59246: PUSH
59247: LD_VAR 0 6
59251: PUSH
59252: LD_EXP 71
59256: PUSH
59257: LD_VAR 0 2
59261: ARRAY
59262: DIFF
59263: ST_TO_ADDR
// if not list then
59264: LD_VAR 0 6
59268: NOT
59269: IFFALSE 59273
// continue ;
59271: GO 58429
// k := mc_mines [ i ] - mc_miners [ i ] ;
59273: LD_ADDR_VAR 0 4
59277: PUSH
59278: LD_EXP 70
59282: PUSH
59283: LD_VAR 0 2
59287: ARRAY
59288: PUSH
59289: LD_EXP 71
59293: PUSH
59294: LD_VAR 0 2
59298: ARRAY
59299: MINUS
59300: ST_TO_ADDR
// if k > list then
59301: LD_VAR 0 4
59305: PUSH
59306: LD_VAR 0 6
59310: GREATER
59311: IFFALSE 59323
// k := list ;
59313: LD_ADDR_VAR 0 4
59317: PUSH
59318: LD_VAR 0 6
59322: ST_TO_ADDR
// for j = 1 to k do
59323: LD_ADDR_VAR 0 3
59327: PUSH
59328: DOUBLE
59329: LD_INT 1
59331: DEC
59332: ST_TO_ADDR
59333: LD_VAR 0 4
59337: PUSH
59338: FOR_TO
59339: IFFALSE 59393
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
59341: LD_ADDR_EXP 71
59345: PUSH
59346: LD_EXP 71
59350: PPUSH
59351: LD_VAR 0 2
59355: PUSH
59356: LD_EXP 71
59360: PUSH
59361: LD_VAR 0 2
59365: ARRAY
59366: PUSH
59367: LD_INT 1
59369: PLUS
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PPUSH
59375: LD_VAR 0 6
59379: PUSH
59380: LD_VAR 0 3
59384: ARRAY
59385: PPUSH
59386: CALL 20132 0 3
59390: ST_TO_ADDR
59391: GO 59338
59393: POP
59394: POP
// end ;
59395: GO 58429
59397: POP
59398: POP
// end ;
59399: LD_VAR 0 1
59403: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
59404: LD_INT 0
59406: PPUSH
59407: PPUSH
59408: PPUSH
59409: PPUSH
59410: PPUSH
59411: PPUSH
59412: PPUSH
59413: PPUSH
59414: PPUSH
// if not mc_bases then
59415: LD_EXP 57
59419: NOT
59420: IFFALSE 59424
// exit ;
59422: GO 60903
// for i = 1 to mc_bases do
59424: LD_ADDR_VAR 0 2
59428: PUSH
59429: DOUBLE
59430: LD_INT 1
59432: DEC
59433: ST_TO_ADDR
59434: LD_EXP 57
59438: PUSH
59439: FOR_TO
59440: IFFALSE 60901
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
59442: LD_EXP 57
59446: PUSH
59447: LD_VAR 0 2
59451: ARRAY
59452: NOT
59453: PUSH
59454: LD_EXP 64
59458: PUSH
59459: LD_VAR 0 2
59463: ARRAY
59464: OR
59465: IFFALSE 59469
// continue ;
59467: GO 59439
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
59469: LD_EXP 73
59473: PUSH
59474: LD_VAR 0 2
59478: ARRAY
59479: NOT
59480: PUSH
59481: LD_EXP 74
59485: PUSH
59486: LD_VAR 0 2
59490: ARRAY
59491: AND
59492: IFFALSE 59530
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
59494: LD_ADDR_EXP 74
59498: PUSH
59499: LD_EXP 74
59503: PPUSH
59504: LD_VAR 0 2
59508: PPUSH
59509: EMPTY
59510: PPUSH
59511: CALL_OW 1
59515: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
59516: LD_VAR 0 2
59520: PPUSH
59521: LD_INT 107
59523: PPUSH
59524: CALL 55000 0 2
// continue ;
59528: GO 59439
// end ; target := [ ] ;
59530: LD_ADDR_VAR 0 5
59534: PUSH
59535: EMPTY
59536: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
59537: LD_ADDR_VAR 0 3
59541: PUSH
59542: DOUBLE
59543: LD_EXP 73
59547: PUSH
59548: LD_VAR 0 2
59552: ARRAY
59553: INC
59554: ST_TO_ADDR
59555: LD_INT 1
59557: PUSH
59558: FOR_DOWNTO
59559: IFFALSE 59819
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
59561: LD_EXP 73
59565: PUSH
59566: LD_VAR 0 2
59570: ARRAY
59571: PUSH
59572: LD_VAR 0 3
59576: ARRAY
59577: PUSH
59578: LD_INT 2
59580: ARRAY
59581: PPUSH
59582: LD_EXP 73
59586: PUSH
59587: LD_VAR 0 2
59591: ARRAY
59592: PUSH
59593: LD_VAR 0 3
59597: ARRAY
59598: PUSH
59599: LD_INT 3
59601: ARRAY
59602: PPUSH
59603: CALL_OW 488
59607: PUSH
59608: LD_EXP 73
59612: PUSH
59613: LD_VAR 0 2
59617: ARRAY
59618: PUSH
59619: LD_VAR 0 3
59623: ARRAY
59624: PUSH
59625: LD_INT 2
59627: ARRAY
59628: PPUSH
59629: LD_EXP 73
59633: PUSH
59634: LD_VAR 0 2
59638: ARRAY
59639: PUSH
59640: LD_VAR 0 3
59644: ARRAY
59645: PUSH
59646: LD_INT 3
59648: ARRAY
59649: PPUSH
59650: CALL_OW 284
59654: PUSH
59655: LD_INT 0
59657: EQUAL
59658: AND
59659: IFFALSE 59714
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
59661: LD_ADDR_VAR 0 4
59665: PUSH
59666: LD_EXP 73
59670: PUSH
59671: LD_VAR 0 2
59675: ARRAY
59676: PPUSH
59677: LD_VAR 0 3
59681: PPUSH
59682: CALL_OW 3
59686: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
59687: LD_ADDR_EXP 73
59691: PUSH
59692: LD_EXP 73
59696: PPUSH
59697: LD_VAR 0 2
59701: PPUSH
59702: LD_VAR 0 4
59706: PPUSH
59707: CALL_OW 1
59711: ST_TO_ADDR
// continue ;
59712: GO 59558
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
59714: LD_EXP 57
59718: PUSH
59719: LD_VAR 0 2
59723: ARRAY
59724: PUSH
59725: LD_INT 1
59727: ARRAY
59728: PPUSH
59729: CALL_OW 255
59733: PPUSH
59734: LD_EXP 73
59738: PUSH
59739: LD_VAR 0 2
59743: ARRAY
59744: PUSH
59745: LD_VAR 0 3
59749: ARRAY
59750: PUSH
59751: LD_INT 2
59753: ARRAY
59754: PPUSH
59755: LD_EXP 73
59759: PUSH
59760: LD_VAR 0 2
59764: ARRAY
59765: PUSH
59766: LD_VAR 0 3
59770: ARRAY
59771: PUSH
59772: LD_INT 3
59774: ARRAY
59775: PPUSH
59776: LD_INT 20
59778: PPUSH
59779: CALL 20626 0 4
59783: PUSH
59784: LD_INT 4
59786: ARRAY
59787: PUSH
59788: LD_INT 0
59790: EQUAL
59791: IFFALSE 59817
// begin target := mc_crates [ i ] [ j ] ;
59793: LD_ADDR_VAR 0 5
59797: PUSH
59798: LD_EXP 73
59802: PUSH
59803: LD_VAR 0 2
59807: ARRAY
59808: PUSH
59809: LD_VAR 0 3
59813: ARRAY
59814: ST_TO_ADDR
// break ;
59815: GO 59819
// end ; end ;
59817: GO 59558
59819: POP
59820: POP
// if not target then
59821: LD_VAR 0 5
59825: NOT
59826: IFFALSE 59830
// continue ;
59828: GO 59439
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
59830: LD_ADDR_VAR 0 6
59834: PUSH
59835: LD_EXP 76
59839: PUSH
59840: LD_VAR 0 2
59844: ARRAY
59845: PPUSH
59846: LD_INT 2
59848: PUSH
59849: LD_INT 3
59851: PUSH
59852: LD_INT 58
59854: PUSH
59855: EMPTY
59856: LIST
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 61
59864: PUSH
59865: EMPTY
59866: LIST
59867: PUSH
59868: LD_INT 33
59870: PUSH
59871: LD_INT 5
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 33
59880: PUSH
59881: LD_INT 3
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: LD_INT 34
59900: PUSH
59901: LD_INT 32
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 34
59910: PUSH
59911: LD_INT 51
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 34
59920: PUSH
59921: LD_INT 12
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PPUSH
59938: CALL_OW 72
59942: ST_TO_ADDR
// if not cargo then
59943: LD_VAR 0 6
59947: NOT
59948: IFFALSE 60436
// begin if mc_crates_collector [ i ] < 5 then
59950: LD_EXP 74
59954: PUSH
59955: LD_VAR 0 2
59959: ARRAY
59960: PUSH
59961: LD_INT 5
59963: LESS
59964: IFFALSE 60250
// begin if mc_ape [ i ] then
59966: LD_EXP 86
59970: PUSH
59971: LD_VAR 0 2
59975: ARRAY
59976: IFFALSE 60023
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
59978: LD_ADDR_VAR 0 4
59982: PUSH
59983: LD_EXP 86
59987: PUSH
59988: LD_VAR 0 2
59992: ARRAY
59993: PPUSH
59994: LD_INT 25
59996: PUSH
59997: LD_INT 16
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 24
60006: PUSH
60007: LD_INT 750
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PPUSH
60018: CALL_OW 72
60022: ST_TO_ADDR
// if not tmp then
60023: LD_VAR 0 4
60027: NOT
60028: IFFALSE 60077
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) else
60030: LD_ADDR_VAR 0 4
60034: PUSH
60035: LD_EXP 57
60039: PUSH
60040: LD_VAR 0 2
60044: ARRAY
60045: PPUSH
60046: LD_INT 25
60048: PUSH
60049: LD_INT 2
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 24
60058: PUSH
60059: LD_INT 750
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PPUSH
60070: CALL_OW 72
60074: ST_TO_ADDR
60075: GO 60138
// if tmp < 5 then
60077: LD_VAR 0 4
60081: PUSH
60082: LD_INT 5
60084: LESS
60085: IFFALSE 60138
// tmp := tmp union UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
60087: LD_ADDR_VAR 0 4
60091: PUSH
60092: LD_VAR 0 4
60096: PUSH
60097: LD_EXP 57
60101: PUSH
60102: LD_VAR 0 2
60106: ARRAY
60107: PPUSH
60108: LD_INT 25
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 24
60120: PUSH
60121: LD_INT 750
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PPUSH
60132: CALL_OW 72
60136: UNION
60137: ST_TO_ADDR
// if not tmp then
60138: LD_VAR 0 4
60142: NOT
60143: IFFALSE 60147
// continue ;
60145: GO 59439
// for j in tmp do
60147: LD_ADDR_VAR 0 3
60151: PUSH
60152: LD_VAR 0 4
60156: PUSH
60157: FOR_IN
60158: IFFALSE 60248
// if not GetTag ( j ) then
60160: LD_VAR 0 3
60164: PPUSH
60165: CALL_OW 110
60169: NOT
60170: IFFALSE 60246
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
60172: LD_ADDR_EXP 74
60176: PUSH
60177: LD_EXP 74
60181: PPUSH
60182: LD_VAR 0 2
60186: PUSH
60187: LD_EXP 74
60191: PUSH
60192: LD_VAR 0 2
60196: ARRAY
60197: PUSH
60198: LD_INT 1
60200: PLUS
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PPUSH
60206: LD_VAR 0 3
60210: PPUSH
60211: CALL 20132 0 3
60215: ST_TO_ADDR
// SetTag ( j , 107 ) ;
60216: LD_VAR 0 3
60220: PPUSH
60221: LD_INT 107
60223: PPUSH
60224: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
60228: LD_EXP 74
60232: PUSH
60233: LD_VAR 0 2
60237: ARRAY
60238: PUSH
60239: LD_INT 5
60241: GREATEREQUAL
60242: IFFALSE 60246
// break ;
60244: GO 60248
// end ;
60246: GO 60157
60248: POP
60249: POP
// end ; if mc_crates_collector [ i ] and target then
60250: LD_EXP 74
60254: PUSH
60255: LD_VAR 0 2
60259: ARRAY
60260: PUSH
60261: LD_VAR 0 5
60265: AND
60266: IFFALSE 60434
// begin if mc_crates_collector [ i ] < target [ 1 ] then
60268: LD_EXP 74
60272: PUSH
60273: LD_VAR 0 2
60277: ARRAY
60278: PUSH
60279: LD_VAR 0 5
60283: PUSH
60284: LD_INT 1
60286: ARRAY
60287: LESS
60288: IFFALSE 60308
// tmp := mc_crates_collector [ i ] else
60290: LD_ADDR_VAR 0 4
60294: PUSH
60295: LD_EXP 74
60299: PUSH
60300: LD_VAR 0 2
60304: ARRAY
60305: ST_TO_ADDR
60306: GO 60322
// tmp := target [ 1 ] ;
60308: LD_ADDR_VAR 0 4
60312: PUSH
60313: LD_VAR 0 5
60317: PUSH
60318: LD_INT 1
60320: ARRAY
60321: ST_TO_ADDR
// for j = 1 to tmp do
60322: LD_ADDR_VAR 0 3
60326: PUSH
60327: DOUBLE
60328: LD_INT 1
60330: DEC
60331: ST_TO_ADDR
60332: LD_VAR 0 4
60336: PUSH
60337: FOR_TO
60338: IFFALSE 60432
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
60340: LD_EXP 74
60344: PUSH
60345: LD_VAR 0 2
60349: ARRAY
60350: PUSH
60351: LD_VAR 0 3
60355: ARRAY
60356: PPUSH
60357: CALL_OW 310
60361: IFFALSE 60384
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
60363: LD_EXP 74
60367: PUSH
60368: LD_VAR 0 2
60372: ARRAY
60373: PUSH
60374: LD_VAR 0 3
60378: ARRAY
60379: PPUSH
60380: CALL_OW 122
// wait ( 3 ) ;
60384: LD_INT 3
60386: PPUSH
60387: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
60391: LD_EXP 74
60395: PUSH
60396: LD_VAR 0 2
60400: ARRAY
60401: PUSH
60402: LD_VAR 0 3
60406: ARRAY
60407: PPUSH
60408: LD_VAR 0 5
60412: PUSH
60413: LD_INT 2
60415: ARRAY
60416: PPUSH
60417: LD_VAR 0 5
60421: PUSH
60422: LD_INT 3
60424: ARRAY
60425: PPUSH
60426: CALL_OW 117
// end ;
60430: GO 60337
60432: POP
60433: POP
// end ; end else
60434: GO 60899
// begin for j in cargo do
60436: LD_ADDR_VAR 0 3
60440: PUSH
60441: LD_VAR 0 6
60445: PUSH
60446: FOR_IN
60447: IFFALSE 60897
// begin if GetTag ( j ) <> 0 then
60449: LD_VAR 0 3
60453: PPUSH
60454: CALL_OW 110
60458: PUSH
60459: LD_INT 0
60461: NONEQUAL
60462: IFFALSE 60466
// continue ;
60464: GO 60446
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
60466: LD_VAR 0 3
60470: PPUSH
60471: CALL_OW 262
60475: PUSH
60476: LD_INT 2
60478: EQUAL
60479: PUSH
60480: LD_VAR 0 3
60484: PPUSH
60485: CALL_OW 261
60489: PUSH
60490: LD_INT 15
60492: LESS
60493: AND
60494: IFFALSE 60498
// continue ;
60496: GO 60446
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
60498: LD_VAR 0 3
60502: PPUSH
60503: CALL_OW 262
60507: PUSH
60508: LD_INT 1
60510: EQUAL
60511: PUSH
60512: LD_VAR 0 3
60516: PPUSH
60517: CALL_OW 261
60521: PUSH
60522: LD_INT 10
60524: LESS
60525: AND
60526: IFFALSE 60836
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
60528: LD_ADDR_VAR 0 7
60532: PUSH
60533: LD_EXP 57
60537: PUSH
60538: LD_VAR 0 2
60542: ARRAY
60543: PPUSH
60544: LD_INT 2
60546: PUSH
60547: LD_INT 30
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 30
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: LIST
60571: PPUSH
60572: CALL_OW 72
60576: ST_TO_ADDR
// if not depot then
60577: LD_VAR 0 7
60581: NOT
60582: IFFALSE 60586
// continue ;
60584: GO 60446
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
60586: LD_VAR 0 3
60590: PPUSH
60591: LD_VAR 0 7
60595: PPUSH
60596: LD_VAR 0 3
60600: PPUSH
60601: CALL_OW 74
60605: PPUSH
60606: CALL_OW 296
60610: PUSH
60611: LD_INT 6
60613: LESS
60614: IFFALSE 60630
// SetFuel ( j , 100 ) else
60616: LD_VAR 0 3
60620: PPUSH
60621: LD_INT 100
60623: PPUSH
60624: CALL_OW 240
60628: GO 60836
// if GetFuel ( j ) = 0 then
60630: LD_VAR 0 3
60634: PPUSH
60635: CALL_OW 261
60639: PUSH
60640: LD_INT 0
60642: EQUAL
60643: IFFALSE 60836
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
60645: LD_ADDR_EXP 76
60649: PUSH
60650: LD_EXP 76
60654: PPUSH
60655: LD_VAR 0 2
60659: PPUSH
60660: LD_EXP 76
60664: PUSH
60665: LD_VAR 0 2
60669: ARRAY
60670: PUSH
60671: LD_VAR 0 3
60675: DIFF
60676: PPUSH
60677: CALL_OW 1
60681: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
60682: LD_VAR 0 3
60686: PPUSH
60687: CALL_OW 263
60691: PUSH
60692: LD_INT 1
60694: EQUAL
60695: IFFALSE 60711
// ComExitVehicle ( IsInUnit ( j ) ) ;
60697: LD_VAR 0 3
60701: PPUSH
60702: CALL_OW 310
60706: PPUSH
60707: CALL_OW 121
// if GetControl ( j ) = control_remote then
60711: LD_VAR 0 3
60715: PPUSH
60716: CALL_OW 263
60720: PUSH
60721: LD_INT 2
60723: EQUAL
60724: IFFALSE 60735
// ComUnlink ( j ) ;
60726: LD_VAR 0 3
60730: PPUSH
60731: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
60735: LD_ADDR_VAR 0 8
60739: PUSH
60740: LD_VAR 0 2
60744: PPUSH
60745: LD_INT 3
60747: PPUSH
60748: CALL 68532 0 2
60752: ST_TO_ADDR
// if fac then
60753: LD_VAR 0 8
60757: IFFALSE 60834
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
60759: LD_ADDR_VAR 0 9
60763: PUSH
60764: LD_VAR 0 8
60768: PPUSH
60769: LD_VAR 0 3
60773: PPUSH
60774: CALL_OW 265
60778: PPUSH
60779: LD_VAR 0 3
60783: PPUSH
60784: CALL_OW 262
60788: PPUSH
60789: LD_VAR 0 3
60793: PPUSH
60794: CALL_OW 263
60798: PPUSH
60799: LD_VAR 0 3
60803: PPUSH
60804: CALL_OW 264
60808: PPUSH
60809: CALL 17297 0 5
60813: ST_TO_ADDR
// if components then
60814: LD_VAR 0 9
60818: IFFALSE 60834
// MC_InsertProduceList ( i , components ) ;
60820: LD_VAR 0 2
60824: PPUSH
60825: LD_VAR 0 9
60829: PPUSH
60830: CALL 68099 0 2
// end ; continue ;
60834: GO 60446
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
60836: LD_VAR 0 3
60840: PPUSH
60841: LD_INT 1
60843: PPUSH
60844: CALL_OW 289
60848: PUSH
60849: LD_INT 100
60851: LESS
60852: PUSH
60853: LD_VAR 0 3
60857: PPUSH
60858: CALL_OW 314
60862: NOT
60863: AND
60864: IFFALSE 60893
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
60866: LD_VAR 0 3
60870: PPUSH
60871: LD_VAR 0 5
60875: PUSH
60876: LD_INT 2
60878: ARRAY
60879: PPUSH
60880: LD_VAR 0 5
60884: PUSH
60885: LD_INT 3
60887: ARRAY
60888: PPUSH
60889: CALL_OW 117
// break ;
60893: GO 60897
// end ;
60895: GO 60446
60897: POP
60898: POP
// end ; end ;
60899: GO 59439
60901: POP
60902: POP
// end ;
60903: LD_VAR 0 1
60907: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
60908: LD_INT 0
60910: PPUSH
60911: PPUSH
60912: PPUSH
60913: PPUSH
// if not mc_bases then
60914: LD_EXP 57
60918: NOT
60919: IFFALSE 60923
// exit ;
60921: GO 61084
// for i = 1 to mc_bases do
60923: LD_ADDR_VAR 0 2
60927: PUSH
60928: DOUBLE
60929: LD_INT 1
60931: DEC
60932: ST_TO_ADDR
60933: LD_EXP 57
60937: PUSH
60938: FOR_TO
60939: IFFALSE 61082
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
60941: LD_ADDR_VAR 0 4
60945: PUSH
60946: LD_EXP 76
60950: PUSH
60951: LD_VAR 0 2
60955: ARRAY
60956: PUSH
60957: LD_EXP 79
60961: PUSH
60962: LD_VAR 0 2
60966: ARRAY
60967: ADD
60968: PPUSH
60969: LD_INT 33
60971: PUSH
60972: LD_INT 2
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PPUSH
60979: CALL_OW 72
60983: ST_TO_ADDR
// if tmp then
60984: LD_VAR 0 4
60988: IFFALSE 61080
// for j in tmp do
60990: LD_ADDR_VAR 0 3
60994: PUSH
60995: LD_VAR 0 4
60999: PUSH
61000: FOR_IN
61001: IFFALSE 61078
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
61003: LD_VAR 0 3
61007: PPUSH
61008: CALL_OW 312
61012: NOT
61013: PUSH
61014: LD_VAR 0 3
61018: PPUSH
61019: CALL_OW 256
61023: PUSH
61024: LD_INT 250
61026: GREATEREQUAL
61027: AND
61028: IFFALSE 61041
// Connect ( j ) else
61030: LD_VAR 0 3
61034: PPUSH
61035: CALL 22620 0 1
61039: GO 61076
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
61041: LD_VAR 0 3
61045: PPUSH
61046: CALL_OW 256
61050: PUSH
61051: LD_INT 250
61053: LESS
61054: PUSH
61055: LD_VAR 0 3
61059: PPUSH
61060: CALL_OW 312
61064: AND
61065: IFFALSE 61076
// ComUnlink ( j ) ;
61067: LD_VAR 0 3
61071: PPUSH
61072: CALL_OW 136
61076: GO 61000
61078: POP
61079: POP
// end ;
61080: GO 60938
61082: POP
61083: POP
// end ;
61084: LD_VAR 0 1
61088: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
61089: LD_INT 0
61091: PPUSH
61092: PPUSH
61093: PPUSH
61094: PPUSH
61095: PPUSH
// if not mc_bases then
61096: LD_EXP 57
61100: NOT
61101: IFFALSE 61105
// exit ;
61103: GO 61565
// for i = 1 to mc_bases do
61105: LD_ADDR_VAR 0 2
61109: PUSH
61110: DOUBLE
61111: LD_INT 1
61113: DEC
61114: ST_TO_ADDR
61115: LD_EXP 57
61119: PUSH
61120: FOR_TO
61121: IFFALSE 61563
// begin if not mc_produce [ i ] then
61123: LD_EXP 78
61127: PUSH
61128: LD_VAR 0 2
61132: ARRAY
61133: NOT
61134: IFFALSE 61138
// continue ;
61136: GO 61120
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
61138: LD_ADDR_VAR 0 5
61142: PUSH
61143: LD_EXP 57
61147: PUSH
61148: LD_VAR 0 2
61152: ARRAY
61153: PPUSH
61154: LD_INT 30
61156: PUSH
61157: LD_INT 3
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PPUSH
61164: CALL_OW 72
61168: ST_TO_ADDR
// if not fac then
61169: LD_VAR 0 5
61173: NOT
61174: IFFALSE 61178
// continue ;
61176: GO 61120
// for j in fac do
61178: LD_ADDR_VAR 0 3
61182: PUSH
61183: LD_VAR 0 5
61187: PUSH
61188: FOR_IN
61189: IFFALSE 61559
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
61191: LD_VAR 0 3
61195: PPUSH
61196: CALL_OW 461
61200: PUSH
61201: LD_INT 2
61203: NONEQUAL
61204: PUSH
61205: LD_VAR 0 3
61209: PPUSH
61210: LD_INT 15
61212: PPUSH
61213: CALL 22323 0 2
61217: PUSH
61218: LD_INT 4
61220: ARRAY
61221: OR
61222: PUSH
61223: LD_VAR 0 3
61227: PPUSH
61228: CALL_OW 313
61232: PUSH
61233: LD_INT 0
61235: EQUAL
61236: OR
61237: IFFALSE 61241
// continue ;
61239: GO 61188
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
61241: LD_VAR 0 3
61245: PPUSH
61246: LD_EXP 78
61250: PUSH
61251: LD_VAR 0 2
61255: ARRAY
61256: PUSH
61257: LD_INT 1
61259: ARRAY
61260: PUSH
61261: LD_INT 1
61263: ARRAY
61264: PPUSH
61265: LD_EXP 78
61269: PUSH
61270: LD_VAR 0 2
61274: ARRAY
61275: PUSH
61276: LD_INT 1
61278: ARRAY
61279: PUSH
61280: LD_INT 2
61282: ARRAY
61283: PPUSH
61284: LD_EXP 78
61288: PUSH
61289: LD_VAR 0 2
61293: ARRAY
61294: PUSH
61295: LD_INT 1
61297: ARRAY
61298: PUSH
61299: LD_INT 3
61301: ARRAY
61302: PPUSH
61303: LD_EXP 78
61307: PUSH
61308: LD_VAR 0 2
61312: ARRAY
61313: PUSH
61314: LD_INT 1
61316: ARRAY
61317: PUSH
61318: LD_INT 4
61320: ARRAY
61321: PPUSH
61322: CALL_OW 448
61326: PUSH
61327: LD_VAR 0 3
61331: PPUSH
61332: LD_EXP 78
61336: PUSH
61337: LD_VAR 0 2
61341: ARRAY
61342: PUSH
61343: LD_INT 1
61345: ARRAY
61346: PUSH
61347: LD_INT 1
61349: ARRAY
61350: PUSH
61351: LD_EXP 78
61355: PUSH
61356: LD_VAR 0 2
61360: ARRAY
61361: PUSH
61362: LD_INT 1
61364: ARRAY
61365: PUSH
61366: LD_INT 2
61368: ARRAY
61369: PUSH
61370: LD_EXP 78
61374: PUSH
61375: LD_VAR 0 2
61379: ARRAY
61380: PUSH
61381: LD_INT 1
61383: ARRAY
61384: PUSH
61385: LD_INT 3
61387: ARRAY
61388: PUSH
61389: LD_EXP 78
61393: PUSH
61394: LD_VAR 0 2
61398: ARRAY
61399: PUSH
61400: LD_INT 1
61402: ARRAY
61403: PUSH
61404: LD_INT 4
61406: ARRAY
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: PPUSH
61414: CALL 25714 0 2
61418: AND
61419: IFFALSE 61557
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
61421: LD_VAR 0 3
61425: PPUSH
61426: LD_EXP 78
61430: PUSH
61431: LD_VAR 0 2
61435: ARRAY
61436: PUSH
61437: LD_INT 1
61439: ARRAY
61440: PUSH
61441: LD_INT 1
61443: ARRAY
61444: PPUSH
61445: LD_EXP 78
61449: PUSH
61450: LD_VAR 0 2
61454: ARRAY
61455: PUSH
61456: LD_INT 1
61458: ARRAY
61459: PUSH
61460: LD_INT 2
61462: ARRAY
61463: PPUSH
61464: LD_EXP 78
61468: PUSH
61469: LD_VAR 0 2
61473: ARRAY
61474: PUSH
61475: LD_INT 1
61477: ARRAY
61478: PUSH
61479: LD_INT 3
61481: ARRAY
61482: PPUSH
61483: LD_EXP 78
61487: PUSH
61488: LD_VAR 0 2
61492: ARRAY
61493: PUSH
61494: LD_INT 1
61496: ARRAY
61497: PUSH
61498: LD_INT 4
61500: ARRAY
61501: PPUSH
61502: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
61506: LD_ADDR_VAR 0 4
61510: PUSH
61511: LD_EXP 78
61515: PUSH
61516: LD_VAR 0 2
61520: ARRAY
61521: PPUSH
61522: LD_INT 1
61524: PPUSH
61525: CALL_OW 3
61529: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
61530: LD_ADDR_EXP 78
61534: PUSH
61535: LD_EXP 78
61539: PPUSH
61540: LD_VAR 0 2
61544: PPUSH
61545: LD_VAR 0 4
61549: PPUSH
61550: CALL_OW 1
61554: ST_TO_ADDR
// break ;
61555: GO 61559
// end ; end ;
61557: GO 61188
61559: POP
61560: POP
// end ;
61561: GO 61120
61563: POP
61564: POP
// end ;
61565: LD_VAR 0 1
61569: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
61570: LD_INT 0
61572: PPUSH
61573: PPUSH
61574: PPUSH
// if not mc_bases then
61575: LD_EXP 57
61579: NOT
61580: IFFALSE 61584
// exit ;
61582: GO 61673
// for i = 1 to mc_bases do
61584: LD_ADDR_VAR 0 2
61588: PUSH
61589: DOUBLE
61590: LD_INT 1
61592: DEC
61593: ST_TO_ADDR
61594: LD_EXP 57
61598: PUSH
61599: FOR_TO
61600: IFFALSE 61671
// begin if mc_attack [ i ] then
61602: LD_EXP 77
61606: PUSH
61607: LD_VAR 0 2
61611: ARRAY
61612: IFFALSE 61669
// begin tmp := mc_attack [ i ] [ 1 ] ;
61614: LD_ADDR_VAR 0 3
61618: PUSH
61619: LD_EXP 77
61623: PUSH
61624: LD_VAR 0 2
61628: ARRAY
61629: PUSH
61630: LD_INT 1
61632: ARRAY
61633: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
61634: LD_ADDR_EXP 77
61638: PUSH
61639: LD_EXP 77
61643: PPUSH
61644: LD_VAR 0 2
61648: PPUSH
61649: EMPTY
61650: PPUSH
61651: CALL_OW 1
61655: ST_TO_ADDR
// Attack ( tmp ) ;
61656: LD_VAR 0 3
61660: PPUSH
61661: CALL 47646 0 1
// exit ;
61665: POP
61666: POP
61667: GO 61673
// end ; end ;
61669: GO 61599
61671: POP
61672: POP
// end ;
61673: LD_VAR 0 1
61677: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
61678: LD_INT 0
61680: PPUSH
61681: PPUSH
61682: PPUSH
61683: PPUSH
61684: PPUSH
61685: PPUSH
61686: PPUSH
// if not mc_bases then
61687: LD_EXP 57
61691: NOT
61692: IFFALSE 61696
// exit ;
61694: GO 62071
// for i = 1 to mc_bases do
61696: LD_ADDR_VAR 0 2
61700: PUSH
61701: DOUBLE
61702: LD_INT 1
61704: DEC
61705: ST_TO_ADDR
61706: LD_EXP 57
61710: PUSH
61711: FOR_TO
61712: IFFALSE 62069
// begin if not mc_bases [ i ] then
61714: LD_EXP 57
61718: PUSH
61719: LD_VAR 0 2
61723: ARRAY
61724: NOT
61725: IFFALSE 61729
// continue ;
61727: GO 61711
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
61729: LD_ADDR_VAR 0 7
61733: PUSH
61734: LD_EXP 57
61738: PUSH
61739: LD_VAR 0 2
61743: ARRAY
61744: PUSH
61745: LD_INT 1
61747: ARRAY
61748: PPUSH
61749: CALL 16637 0 1
61753: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
61754: LD_ADDR_EXP 80
61758: PUSH
61759: LD_EXP 80
61763: PPUSH
61764: LD_VAR 0 2
61768: PPUSH
61769: LD_EXP 57
61773: PUSH
61774: LD_VAR 0 2
61778: ARRAY
61779: PUSH
61780: LD_INT 1
61782: ARRAY
61783: PPUSH
61784: CALL_OW 255
61788: PPUSH
61789: LD_EXP 82
61793: PUSH
61794: LD_VAR 0 2
61798: ARRAY
61799: PPUSH
61800: CALL 15095 0 2
61804: PPUSH
61805: CALL_OW 1
61809: ST_TO_ADDR
// if not mc_scan [ i ] then
61810: LD_EXP 80
61814: PUSH
61815: LD_VAR 0 2
61819: ARRAY
61820: NOT
61821: IFFALSE 61976
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
61823: LD_ADDR_VAR 0 4
61827: PUSH
61828: LD_EXP 57
61832: PUSH
61833: LD_VAR 0 2
61837: ARRAY
61838: PPUSH
61839: LD_INT 2
61841: PUSH
61842: LD_INT 25
61844: PUSH
61845: LD_INT 5
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 25
61854: PUSH
61855: LD_INT 8
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 25
61864: PUSH
61865: LD_INT 9
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: PPUSH
61878: CALL_OW 72
61882: ST_TO_ADDR
// if not tmp then
61883: LD_VAR 0 4
61887: NOT
61888: IFFALSE 61892
// continue ;
61890: GO 61711
// for j in tmp do
61892: LD_ADDR_VAR 0 3
61896: PUSH
61897: LD_VAR 0 4
61901: PUSH
61902: FOR_IN
61903: IFFALSE 61974
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
61905: LD_VAR 0 3
61909: PPUSH
61910: CALL_OW 310
61914: PPUSH
61915: CALL_OW 266
61919: PUSH
61920: LD_INT 5
61922: EQUAL
61923: PUSH
61924: LD_VAR 0 3
61928: PPUSH
61929: CALL_OW 257
61933: PUSH
61934: LD_INT 1
61936: EQUAL
61937: AND
61938: PUSH
61939: LD_VAR 0 3
61943: PPUSH
61944: CALL_OW 459
61948: NOT
61949: AND
61950: PUSH
61951: LD_VAR 0 7
61955: AND
61956: IFFALSE 61972
// ComChangeProfession ( j , class ) ;
61958: LD_VAR 0 3
61962: PPUSH
61963: LD_VAR 0 7
61967: PPUSH
61968: CALL_OW 123
61972: GO 61902
61974: POP
61975: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
61976: LD_EXP 80
61980: PUSH
61981: LD_VAR 0 2
61985: ARRAY
61986: PUSH
61987: LD_EXP 79
61991: PUSH
61992: LD_VAR 0 2
61996: ARRAY
61997: AND
61998: IFFALSE 62067
// begin tmp := mc_defender [ i ] ;
62000: LD_ADDR_VAR 0 4
62004: PUSH
62005: LD_EXP 79
62009: PUSH
62010: LD_VAR 0 2
62014: ARRAY
62015: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
62016: LD_ADDR_EXP 79
62020: PUSH
62021: LD_EXP 79
62025: PPUSH
62026: LD_VAR 0 2
62030: PPUSH
62031: EMPTY
62032: PPUSH
62033: CALL_OW 1
62037: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
62038: LD_VAR 0 2
62042: PPUSH
62043: LD_VAR 0 4
62047: PPUSH
62048: LD_EXP 80
62052: PUSH
62053: LD_VAR 0 2
62057: ARRAY
62058: PPUSH
62059: CALL 15130 0 3
// exit ;
62063: POP
62064: POP
62065: GO 62071
// end ; end ;
62067: GO 61711
62069: POP
62070: POP
// end ;
62071: LD_VAR 0 1
62075: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
62076: LD_INT 0
62078: PPUSH
62079: PPUSH
62080: PPUSH
62081: PPUSH
62082: PPUSH
62083: PPUSH
62084: PPUSH
62085: PPUSH
62086: PPUSH
// if not mc_bases then
62087: LD_EXP 57
62091: NOT
62092: IFFALSE 62096
// exit ;
62094: GO 63040
// for i = 1 to mc_bases do
62096: LD_ADDR_VAR 0 2
62100: PUSH
62101: DOUBLE
62102: LD_INT 1
62104: DEC
62105: ST_TO_ADDR
62106: LD_EXP 57
62110: PUSH
62111: FOR_TO
62112: IFFALSE 63038
// begin tmp := mc_lab [ i ] ;
62114: LD_ADDR_VAR 0 6
62118: PUSH
62119: LD_EXP 90
62123: PUSH
62124: LD_VAR 0 2
62128: ARRAY
62129: ST_TO_ADDR
// if not tmp then
62130: LD_VAR 0 6
62134: NOT
62135: IFFALSE 62139
// continue ;
62137: GO 62111
// for j in tmp do
62139: LD_ADDR_VAR 0 3
62143: PUSH
62144: LD_VAR 0 6
62148: PUSH
62149: FOR_IN
62150: IFFALSE 63034
// begin side := GetSide ( j ) ;
62152: LD_ADDR_VAR 0 4
62156: PUSH
62157: LD_VAR 0 3
62161: PPUSH
62162: CALL_OW 255
62166: ST_TO_ADDR
// if not mc_tech [ side ] then
62167: LD_EXP 84
62171: PUSH
62172: LD_VAR 0 4
62176: ARRAY
62177: NOT
62178: IFFALSE 62182
// continue ;
62180: GO 62149
// if BuildingStatus ( j ) = bs_idle then
62182: LD_VAR 0 3
62186: PPUSH
62187: CALL_OW 461
62191: PUSH
62192: LD_INT 2
62194: EQUAL
62195: IFFALSE 62268
// for t in mc_tech [ side ] do
62197: LD_ADDR_VAR 0 5
62201: PUSH
62202: LD_EXP 84
62206: PUSH
62207: LD_VAR 0 4
62211: ARRAY
62212: PUSH
62213: FOR_IN
62214: IFFALSE 62266
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
62216: LD_VAR 0 3
62220: PPUSH
62221: LD_VAR 0 5
62225: PPUSH
62226: CALL_OW 430
62230: PUSH
62231: LD_VAR 0 4
62235: PPUSH
62236: LD_VAR 0 5
62240: PPUSH
62241: CALL 14203 0 2
62245: AND
62246: IFFALSE 62264
// begin ComResearch ( j , t ) ;
62248: LD_VAR 0 3
62252: PPUSH
62253: LD_VAR 0 5
62257: PPUSH
62258: CALL_OW 124
// break ;
62262: GO 62266
// end ;
62264: GO 62213
62266: POP
62267: POP
// if BuildingStatus ( j ) = bs_need_ape then
62268: LD_VAR 0 3
62272: PPUSH
62273: CALL_OW 461
62277: PUSH
62278: LD_INT 10
62280: EQUAL
62281: IFFALSE 62869
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
62283: LD_EXP 86
62287: PUSH
62288: LD_VAR 0 2
62292: ARRAY
62293: NOT
62294: PUSH
62295: LD_EXP 87
62299: PUSH
62300: LD_VAR 0 2
62304: ARRAY
62305: NOT
62306: AND
62307: PUSH
62308: LD_EXP 84
62312: PUSH
62313: LD_VAR 0 4
62317: ARRAY
62318: PUSH
62319: LD_INT 1
62321: GREATER
62322: AND
62323: IFFALSE 62454
// begin ComCancel ( j ) ;
62325: LD_VAR 0 3
62329: PPUSH
62330: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
62334: LD_ADDR_EXP 84
62338: PUSH
62339: LD_EXP 84
62343: PPUSH
62344: LD_VAR 0 4
62348: PPUSH
62349: LD_EXP 84
62353: PUSH
62354: LD_VAR 0 4
62358: ARRAY
62359: PPUSH
62360: LD_EXP 84
62364: PUSH
62365: LD_VAR 0 4
62369: ARRAY
62370: PUSH
62371: LD_INT 1
62373: MINUS
62374: PPUSH
62375: LD_EXP 84
62379: PUSH
62380: LD_VAR 0 4
62384: ARRAY
62385: PPUSH
62386: LD_INT 0
62388: PPUSH
62389: CALL 19115 0 4
62393: PPUSH
62394: CALL_OW 1
62398: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
62399: LD_ADDR_EXP 84
62403: PUSH
62404: LD_EXP 84
62408: PPUSH
62409: LD_VAR 0 4
62413: PPUSH
62414: LD_EXP 84
62418: PUSH
62419: LD_VAR 0 4
62423: ARRAY
62424: PPUSH
62425: LD_EXP 84
62429: PUSH
62430: LD_VAR 0 4
62434: ARRAY
62435: PPUSH
62436: LD_INT 1
62438: PPUSH
62439: LD_INT 0
62441: PPUSH
62442: CALL 19115 0 4
62446: PPUSH
62447: CALL_OW 1
62451: ST_TO_ADDR
// continue ;
62452: GO 62149
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
62454: LD_EXP 86
62458: PUSH
62459: LD_VAR 0 2
62463: ARRAY
62464: PUSH
62465: LD_EXP 87
62469: PUSH
62470: LD_VAR 0 2
62474: ARRAY
62475: NOT
62476: AND
62477: IFFALSE 62604
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
62479: LD_ADDR_EXP 87
62483: PUSH
62484: LD_EXP 87
62488: PPUSH
62489: LD_VAR 0 2
62493: PUSH
62494: LD_EXP 87
62498: PUSH
62499: LD_VAR 0 2
62503: ARRAY
62504: PUSH
62505: LD_INT 1
62507: PLUS
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PPUSH
62513: LD_EXP 86
62517: PUSH
62518: LD_VAR 0 2
62522: ARRAY
62523: PUSH
62524: LD_INT 1
62526: ARRAY
62527: PPUSH
62528: CALL 20132 0 3
62532: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
62533: LD_EXP 86
62537: PUSH
62538: LD_VAR 0 2
62542: ARRAY
62543: PUSH
62544: LD_INT 1
62546: ARRAY
62547: PPUSH
62548: LD_INT 112
62550: PPUSH
62551: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
62555: LD_ADDR_VAR 0 9
62559: PUSH
62560: LD_EXP 86
62564: PUSH
62565: LD_VAR 0 2
62569: ARRAY
62570: PPUSH
62571: LD_INT 1
62573: PPUSH
62574: CALL_OW 3
62578: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
62579: LD_ADDR_EXP 86
62583: PUSH
62584: LD_EXP 86
62588: PPUSH
62589: LD_VAR 0 2
62593: PPUSH
62594: LD_VAR 0 9
62598: PPUSH
62599: CALL_OW 1
62603: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
62604: LD_EXP 86
62608: PUSH
62609: LD_VAR 0 2
62613: ARRAY
62614: PUSH
62615: LD_EXP 87
62619: PUSH
62620: LD_VAR 0 2
62624: ARRAY
62625: AND
62626: PUSH
62627: LD_EXP 87
62631: PUSH
62632: LD_VAR 0 2
62636: ARRAY
62637: PUSH
62638: LD_INT 1
62640: ARRAY
62641: PPUSH
62642: CALL_OW 310
62646: NOT
62647: AND
62648: PUSH
62649: LD_VAR 0 3
62653: PPUSH
62654: CALL_OW 313
62658: PUSH
62659: LD_INT 6
62661: EQUAL
62662: AND
62663: IFFALSE 62719
// begin tmp2 := UnitsInside ( j ) ;
62665: LD_ADDR_VAR 0 9
62669: PUSH
62670: LD_VAR 0 3
62674: PPUSH
62675: CALL_OW 313
62679: ST_TO_ADDR
// if tmp2 = 6 then
62680: LD_VAR 0 9
62684: PUSH
62685: LD_INT 6
62687: EQUAL
62688: IFFALSE 62719
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
62690: LD_VAR 0 9
62694: PUSH
62695: LD_INT 1
62697: ARRAY
62698: PPUSH
62699: LD_INT 112
62701: PPUSH
62702: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
62706: LD_VAR 0 9
62710: PUSH
62711: LD_INT 1
62713: ARRAY
62714: PPUSH
62715: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
62719: LD_EXP 87
62723: PUSH
62724: LD_VAR 0 2
62728: ARRAY
62729: PUSH
62730: LD_EXP 87
62734: PUSH
62735: LD_VAR 0 2
62739: ARRAY
62740: PUSH
62741: LD_INT 1
62743: ARRAY
62744: PPUSH
62745: CALL_OW 314
62749: NOT
62750: AND
62751: PUSH
62752: LD_EXP 87
62756: PUSH
62757: LD_VAR 0 2
62761: ARRAY
62762: PUSH
62763: LD_INT 1
62765: ARRAY
62766: PPUSH
62767: CALL_OW 310
62771: NOT
62772: AND
62773: IFFALSE 62799
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
62775: LD_EXP 87
62779: PUSH
62780: LD_VAR 0 2
62784: ARRAY
62785: PUSH
62786: LD_INT 1
62788: ARRAY
62789: PPUSH
62790: LD_VAR 0 3
62794: PPUSH
62795: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
62799: LD_EXP 87
62803: PUSH
62804: LD_VAR 0 2
62808: ARRAY
62809: PUSH
62810: LD_INT 1
62812: ARRAY
62813: PPUSH
62814: CALL_OW 310
62818: PUSH
62819: LD_EXP 87
62823: PUSH
62824: LD_VAR 0 2
62828: ARRAY
62829: PUSH
62830: LD_INT 1
62832: ARRAY
62833: PPUSH
62834: CALL_OW 310
62838: PPUSH
62839: CALL_OW 461
62843: PUSH
62844: LD_INT 3
62846: NONEQUAL
62847: AND
62848: IFFALSE 62869
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
62850: LD_EXP 87
62854: PUSH
62855: LD_VAR 0 2
62859: ARRAY
62860: PUSH
62861: LD_INT 1
62863: ARRAY
62864: PPUSH
62865: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
62869: LD_VAR 0 3
62873: PPUSH
62874: CALL_OW 461
62878: PUSH
62879: LD_INT 6
62881: EQUAL
62882: PUSH
62883: LD_VAR 0 6
62887: PUSH
62888: LD_INT 1
62890: GREATER
62891: AND
62892: IFFALSE 63032
// begin sci := [ ] ;
62894: LD_ADDR_VAR 0 8
62898: PUSH
62899: EMPTY
62900: ST_TO_ADDR
// for x in tmp diff j do
62901: LD_ADDR_VAR 0 7
62905: PUSH
62906: LD_VAR 0 6
62910: PUSH
62911: LD_VAR 0 3
62915: DIFF
62916: PUSH
62917: FOR_IN
62918: IFFALSE 62958
// begin if BuildingStatus ( x ) = bs_idle then
62920: LD_VAR 0 7
62924: PPUSH
62925: CALL_OW 461
62929: PUSH
62930: LD_INT 2
62932: EQUAL
62933: IFFALSE 62956
// sci := sci ^ UnitsInside ( x ) ;
62935: LD_ADDR_VAR 0 8
62939: PUSH
62940: LD_VAR 0 8
62944: PUSH
62945: LD_VAR 0 7
62949: PPUSH
62950: CALL_OW 313
62954: ADD
62955: ST_TO_ADDR
// end ;
62956: GO 62917
62958: POP
62959: POP
// if not sci then
62960: LD_VAR 0 8
62964: NOT
62965: IFFALSE 62969
// continue ;
62967: GO 62149
// for x in sci do
62969: LD_ADDR_VAR 0 7
62973: PUSH
62974: LD_VAR 0 8
62978: PUSH
62979: FOR_IN
62980: IFFALSE 63030
// if IsInUnit ( x ) and not HasTask ( x ) then
62982: LD_VAR 0 7
62986: PPUSH
62987: CALL_OW 310
62991: PUSH
62992: LD_VAR 0 7
62996: PPUSH
62997: CALL_OW 314
63001: NOT
63002: AND
63003: IFFALSE 63028
// begin ComExitBuilding ( x ) ;
63005: LD_VAR 0 7
63009: PPUSH
63010: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
63014: LD_VAR 0 7
63018: PPUSH
63019: LD_VAR 0 3
63023: PPUSH
63024: CALL_OW 180
// end ;
63028: GO 62979
63030: POP
63031: POP
// end ; end ;
63032: GO 62149
63034: POP
63035: POP
// end ;
63036: GO 62111
63038: POP
63039: POP
// end ;
63040: LD_VAR 0 1
63044: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
63045: LD_INT 0
63047: PPUSH
63048: PPUSH
63049: PPUSH
63050: PPUSH
63051: PPUSH
63052: PPUSH
63053: PPUSH
63054: PPUSH
// if not mc_bases or not mc_parking then
63055: LD_EXP 57
63059: NOT
63060: PUSH
63061: LD_EXP 81
63065: NOT
63066: OR
63067: IFFALSE 63071
// exit ;
63069: GO 63729
// for i = 1 to mc_bases do
63071: LD_ADDR_VAR 0 2
63075: PUSH
63076: DOUBLE
63077: LD_INT 1
63079: DEC
63080: ST_TO_ADDR
63081: LD_EXP 57
63085: PUSH
63086: FOR_TO
63087: IFFALSE 63727
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
63089: LD_EXP 57
63093: PUSH
63094: LD_VAR 0 2
63098: ARRAY
63099: NOT
63100: PUSH
63101: LD_EXP 81
63105: PUSH
63106: LD_VAR 0 2
63110: ARRAY
63111: NOT
63112: OR
63113: IFFALSE 63117
// continue ;
63115: GO 63086
// if mc_scan [ i ] then
63117: LD_EXP 80
63121: PUSH
63122: LD_VAR 0 2
63126: ARRAY
63127: IFFALSE 63153
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
63129: LD_ADDR_EXP 69
63133: PUSH
63134: LD_EXP 69
63138: PPUSH
63139: LD_VAR 0 2
63143: PPUSH
63144: EMPTY
63145: PPUSH
63146: CALL_OW 1
63150: ST_TO_ADDR
// continue ;
63151: GO 63086
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
63153: LD_ADDR_VAR 0 5
63157: PUSH
63158: LD_EXP 57
63162: PUSH
63163: LD_VAR 0 2
63167: ARRAY
63168: PUSH
63169: LD_INT 1
63171: ARRAY
63172: PPUSH
63173: CALL_OW 255
63177: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
63178: LD_ADDR_VAR 0 6
63182: PUSH
63183: LD_EXP 57
63187: PUSH
63188: LD_VAR 0 2
63192: ARRAY
63193: PPUSH
63194: LD_INT 30
63196: PUSH
63197: LD_INT 3
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PPUSH
63204: CALL_OW 72
63208: ST_TO_ADDR
// if not fac then
63209: LD_VAR 0 6
63213: NOT
63214: IFFALSE 63265
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63216: LD_ADDR_VAR 0 6
63220: PUSH
63221: LD_EXP 57
63225: PUSH
63226: LD_VAR 0 2
63230: ARRAY
63231: PPUSH
63232: LD_INT 2
63234: PUSH
63235: LD_INT 30
63237: PUSH
63238: LD_INT 0
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 30
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: LIST
63259: PPUSH
63260: CALL_OW 72
63264: ST_TO_ADDR
// if not fac then
63265: LD_VAR 0 6
63269: NOT
63270: IFFALSE 63274
// continue ;
63272: GO 63086
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
63274: LD_ADDR_VAR 0 7
63278: PUSH
63279: LD_EXP 81
63283: PUSH
63284: LD_VAR 0 2
63288: ARRAY
63289: PPUSH
63290: LD_INT 22
63292: PUSH
63293: LD_VAR 0 5
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 21
63304: PUSH
63305: LD_INT 2
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 3
63314: PUSH
63315: LD_INT 24
63317: PUSH
63318: LD_INT 1000
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: LIST
63333: PPUSH
63334: CALL_OW 70
63338: PUSH
63339: LD_INT 22
63341: PUSH
63342: LD_VAR 0 5
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 91
63353: PUSH
63354: LD_VAR 0 6
63358: PUSH
63359: LD_INT 1
63361: ARRAY
63362: PUSH
63363: LD_INT 25
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 21
63373: PUSH
63374: LD_INT 2
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 3
63383: PUSH
63384: LD_INT 24
63386: PUSH
63387: LD_INT 1000
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: PPUSH
63404: CALL_OW 69
63408: UNION
63409: ST_TO_ADDR
// if not vehs then
63410: LD_VAR 0 7
63414: NOT
63415: IFFALSE 63441
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
63417: LD_ADDR_EXP 69
63421: PUSH
63422: LD_EXP 69
63426: PPUSH
63427: LD_VAR 0 2
63431: PPUSH
63432: EMPTY
63433: PPUSH
63434: CALL_OW 1
63438: ST_TO_ADDR
// continue ;
63439: GO 63086
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
63441: LD_ADDR_VAR 0 8
63445: PUSH
63446: LD_EXP 57
63450: PUSH
63451: LD_VAR 0 2
63455: ARRAY
63456: PPUSH
63457: LD_INT 30
63459: PUSH
63460: LD_INT 3
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PPUSH
63467: CALL_OW 72
63471: ST_TO_ADDR
// if tmp then
63472: LD_VAR 0 8
63476: IFFALSE 63579
// begin for j in tmp do
63478: LD_ADDR_VAR 0 3
63482: PUSH
63483: LD_VAR 0 8
63487: PUSH
63488: FOR_IN
63489: IFFALSE 63577
// for k in UnitsInside ( j ) do
63491: LD_ADDR_VAR 0 4
63495: PUSH
63496: LD_VAR 0 3
63500: PPUSH
63501: CALL_OW 313
63505: PUSH
63506: FOR_IN
63507: IFFALSE 63573
// if k then
63509: LD_VAR 0 4
63513: IFFALSE 63571
// if not k in mc_repair_vehicle [ i ] then
63515: LD_VAR 0 4
63519: PUSH
63520: LD_EXP 69
63524: PUSH
63525: LD_VAR 0 2
63529: ARRAY
63530: IN
63531: NOT
63532: IFFALSE 63571
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
63534: LD_ADDR_EXP 69
63538: PUSH
63539: LD_EXP 69
63543: PPUSH
63544: LD_VAR 0 2
63548: PPUSH
63549: LD_EXP 69
63553: PUSH
63554: LD_VAR 0 2
63558: ARRAY
63559: PUSH
63560: LD_VAR 0 4
63564: UNION
63565: PPUSH
63566: CALL_OW 1
63570: ST_TO_ADDR
63571: GO 63506
63573: POP
63574: POP
63575: GO 63488
63577: POP
63578: POP
// end ; if not mc_repair_vehicle [ i ] then
63579: LD_EXP 69
63583: PUSH
63584: LD_VAR 0 2
63588: ARRAY
63589: NOT
63590: IFFALSE 63594
// continue ;
63592: GO 63086
// for j in mc_repair_vehicle [ i ] do
63594: LD_ADDR_VAR 0 3
63598: PUSH
63599: LD_EXP 69
63603: PUSH
63604: LD_VAR 0 2
63608: ARRAY
63609: PUSH
63610: FOR_IN
63611: IFFALSE 63723
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
63613: LD_VAR 0 3
63617: PPUSH
63618: CALL_OW 311
63622: NOT
63623: PUSH
63624: LD_VAR 0 3
63628: PUSH
63629: LD_EXP 60
63633: PUSH
63634: LD_VAR 0 2
63638: ARRAY
63639: PUSH
63640: LD_INT 1
63642: ARRAY
63643: IN
63644: NOT
63645: AND
63646: PUSH
63647: LD_VAR 0 3
63651: PUSH
63652: LD_EXP 60
63656: PUSH
63657: LD_VAR 0 2
63661: ARRAY
63662: PUSH
63663: LD_INT 2
63665: ARRAY
63666: IN
63667: NOT
63668: AND
63669: IFFALSE 63721
// begin if IsInUnit ( j ) then
63671: LD_VAR 0 3
63675: PPUSH
63676: CALL_OW 310
63680: IFFALSE 63691
// ComExitBuilding ( j ) ;
63682: LD_VAR 0 3
63686: PPUSH
63687: CALL_OW 122
// if not HasTask ( j ) then
63691: LD_VAR 0 3
63695: PPUSH
63696: CALL_OW 314
63700: NOT
63701: IFFALSE 63721
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
63703: LD_VAR 0 3
63707: PPUSH
63708: LD_VAR 0 7
63712: PUSH
63713: LD_INT 1
63715: ARRAY
63716: PPUSH
63717: CALL_OW 189
// end ; end ;
63721: GO 63610
63723: POP
63724: POP
// end ;
63725: GO 63086
63727: POP
63728: POP
// end ;
63729: LD_VAR 0 1
63733: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
63734: LD_INT 0
63736: PPUSH
63737: PPUSH
63738: PPUSH
63739: PPUSH
63740: PPUSH
63741: PPUSH
63742: PPUSH
63743: PPUSH
63744: PPUSH
63745: PPUSH
63746: PPUSH
// if not mc_bases then
63747: LD_EXP 57
63751: NOT
63752: IFFALSE 63756
// exit ;
63754: GO 64492
// for i = 1 to mc_bases do
63756: LD_ADDR_VAR 0 2
63760: PUSH
63761: DOUBLE
63762: LD_INT 1
63764: DEC
63765: ST_TO_ADDR
63766: LD_EXP 57
63770: PUSH
63771: FOR_TO
63772: IFFALSE 64490
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
63774: LD_EXP 85
63778: PUSH
63779: LD_VAR 0 2
63783: ARRAY
63784: NOT
63785: PUSH
63786: LD_EXP 60
63790: PUSH
63791: LD_VAR 0 2
63795: ARRAY
63796: PUSH
63797: LD_INT 1
63799: ARRAY
63800: OR
63801: PUSH
63802: LD_EXP 60
63806: PUSH
63807: LD_VAR 0 2
63811: ARRAY
63812: PUSH
63813: LD_INT 2
63815: ARRAY
63816: OR
63817: PUSH
63818: LD_EXP 83
63822: PUSH
63823: LD_VAR 0 2
63827: ARRAY
63828: PPUSH
63829: LD_INT 1
63831: PPUSH
63832: CALL_OW 325
63836: NOT
63837: OR
63838: PUSH
63839: LD_EXP 80
63843: PUSH
63844: LD_VAR 0 2
63848: ARRAY
63849: OR
63850: IFFALSE 63854
// continue ;
63852: GO 63771
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
63854: LD_ADDR_VAR 0 8
63858: PUSH
63859: LD_EXP 57
63863: PUSH
63864: LD_VAR 0 2
63868: ARRAY
63869: PPUSH
63870: LD_INT 25
63872: PUSH
63873: LD_INT 4
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 50
63882: PUSH
63883: EMPTY
63884: LIST
63885: PUSH
63886: LD_INT 3
63888: PUSH
63889: LD_INT 60
63891: PUSH
63892: EMPTY
63893: LIST
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: LIST
63903: PPUSH
63904: CALL_OW 72
63908: PUSH
63909: LD_EXP 61
63913: PUSH
63914: LD_VAR 0 2
63918: ARRAY
63919: DIFF
63920: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63921: LD_ADDR_VAR 0 9
63925: PUSH
63926: LD_EXP 57
63930: PUSH
63931: LD_VAR 0 2
63935: ARRAY
63936: PPUSH
63937: LD_INT 2
63939: PUSH
63940: LD_INT 30
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 30
63952: PUSH
63953: LD_INT 1
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: LIST
63964: PPUSH
63965: CALL_OW 72
63969: ST_TO_ADDR
// if not tmp or not dep then
63970: LD_VAR 0 8
63974: NOT
63975: PUSH
63976: LD_VAR 0 9
63980: NOT
63981: OR
63982: IFFALSE 63986
// continue ;
63984: GO 63771
// side := GetSide ( tmp [ 1 ] ) ;
63986: LD_ADDR_VAR 0 11
63990: PUSH
63991: LD_VAR 0 8
63995: PUSH
63996: LD_INT 1
63998: ARRAY
63999: PPUSH
64000: CALL_OW 255
64004: ST_TO_ADDR
// dep := dep [ 1 ] ;
64005: LD_ADDR_VAR 0 9
64009: PUSH
64010: LD_VAR 0 9
64014: PUSH
64015: LD_INT 1
64017: ARRAY
64018: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
64019: LD_ADDR_VAR 0 7
64023: PUSH
64024: LD_EXP 85
64028: PUSH
64029: LD_VAR 0 2
64033: ARRAY
64034: PPUSH
64035: LD_INT 22
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 25
64047: PUSH
64048: LD_INT 12
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PPUSH
64059: CALL_OW 70
64063: PUSH
64064: LD_INT 22
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 25
64076: PUSH
64077: LD_INT 12
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 91
64086: PUSH
64087: LD_VAR 0 9
64091: PUSH
64092: LD_INT 20
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: LIST
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: LIST
64104: PPUSH
64105: CALL_OW 69
64109: UNION
64110: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
64111: LD_ADDR_VAR 0 10
64115: PUSH
64116: LD_EXP 85
64120: PUSH
64121: LD_VAR 0 2
64125: ARRAY
64126: PPUSH
64127: LD_INT 81
64129: PUSH
64130: LD_VAR 0 11
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PPUSH
64139: CALL_OW 70
64143: ST_TO_ADDR
// if not apes or danger_at_area then
64144: LD_VAR 0 7
64148: NOT
64149: PUSH
64150: LD_VAR 0 10
64154: OR
64155: IFFALSE 64205
// begin if mc_taming [ i ] then
64157: LD_EXP 88
64161: PUSH
64162: LD_VAR 0 2
64166: ARRAY
64167: IFFALSE 64203
// begin MC_Reset ( i , 121 ) ;
64169: LD_VAR 0 2
64173: PPUSH
64174: LD_INT 121
64176: PPUSH
64177: CALL 55000 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
64181: LD_ADDR_EXP 88
64185: PUSH
64186: LD_EXP 88
64190: PPUSH
64191: LD_VAR 0 2
64195: PPUSH
64196: EMPTY
64197: PPUSH
64198: CALL_OW 1
64202: ST_TO_ADDR
// end ; continue ;
64203: GO 63771
// end ; for j in tmp do
64205: LD_ADDR_VAR 0 3
64209: PUSH
64210: LD_VAR 0 8
64214: PUSH
64215: FOR_IN
64216: IFFALSE 64486
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
64218: LD_VAR 0 3
64222: PUSH
64223: LD_EXP 88
64227: PUSH
64228: LD_VAR 0 2
64232: ARRAY
64233: IN
64234: NOT
64235: PUSH
64236: LD_EXP 88
64240: PUSH
64241: LD_VAR 0 2
64245: ARRAY
64246: PUSH
64247: LD_INT 3
64249: LESS
64250: AND
64251: IFFALSE 64309
// begin SetTag ( j , 121 ) ;
64253: LD_VAR 0 3
64257: PPUSH
64258: LD_INT 121
64260: PPUSH
64261: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
64265: LD_ADDR_EXP 88
64269: PUSH
64270: LD_EXP 88
64274: PPUSH
64275: LD_VAR 0 2
64279: PUSH
64280: LD_EXP 88
64284: PUSH
64285: LD_VAR 0 2
64289: ARRAY
64290: PUSH
64291: LD_INT 1
64293: PLUS
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PPUSH
64299: LD_VAR 0 3
64303: PPUSH
64304: CALL 20132 0 3
64308: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
64309: LD_VAR 0 3
64313: PUSH
64314: LD_EXP 88
64318: PUSH
64319: LD_VAR 0 2
64323: ARRAY
64324: IN
64325: IFFALSE 64484
// begin if IsInUnit ( j ) then
64327: LD_VAR 0 3
64331: PPUSH
64332: CALL_OW 310
64336: IFFALSE 64347
// ComExitBuilding ( j ) ;
64338: LD_VAR 0 3
64342: PPUSH
64343: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
64347: LD_ADDR_VAR 0 6
64351: PUSH
64352: LD_VAR 0 7
64356: PPUSH
64357: LD_VAR 0 3
64361: PPUSH
64362: CALL_OW 74
64366: ST_TO_ADDR
// if not ape then
64367: LD_VAR 0 6
64371: NOT
64372: IFFALSE 64376
// break ;
64374: GO 64486
// x := GetX ( ape ) ;
64376: LD_ADDR_VAR 0 4
64380: PUSH
64381: LD_VAR 0 6
64385: PPUSH
64386: CALL_OW 250
64390: ST_TO_ADDR
// y := GetY ( ape ) ;
64391: LD_ADDR_VAR 0 5
64395: PUSH
64396: LD_VAR 0 6
64400: PPUSH
64401: CALL_OW 251
64405: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
64406: LD_VAR 0 4
64410: PPUSH
64411: LD_VAR 0 5
64415: PPUSH
64416: CALL_OW 488
64420: NOT
64421: PUSH
64422: LD_VAR 0 11
64426: PPUSH
64427: LD_VAR 0 4
64431: PPUSH
64432: LD_VAR 0 5
64436: PPUSH
64437: LD_INT 20
64439: PPUSH
64440: CALL 20626 0 4
64444: PUSH
64445: LD_INT 4
64447: ARRAY
64448: OR
64449: IFFALSE 64453
// break ;
64451: GO 64486
// if not HasTask ( j ) then
64453: LD_VAR 0 3
64457: PPUSH
64458: CALL_OW 314
64462: NOT
64463: IFFALSE 64484
// ComTameXY ( j , x , y ) ;
64465: LD_VAR 0 3
64469: PPUSH
64470: LD_VAR 0 4
64474: PPUSH
64475: LD_VAR 0 5
64479: PPUSH
64480: CALL_OW 131
// end ; end ;
64484: GO 64215
64486: POP
64487: POP
// end ;
64488: GO 63771
64490: POP
64491: POP
// end ;
64492: LD_VAR 0 1
64496: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
64497: LD_INT 0
64499: PPUSH
64500: PPUSH
64501: PPUSH
64502: PPUSH
64503: PPUSH
64504: PPUSH
64505: PPUSH
64506: PPUSH
// if not mc_bases then
64507: LD_EXP 57
64511: NOT
64512: IFFALSE 64516
// exit ;
64514: GO 65126
// for i = 1 to mc_bases do
64516: LD_ADDR_VAR 0 2
64520: PUSH
64521: DOUBLE
64522: LD_INT 1
64524: DEC
64525: ST_TO_ADDR
64526: LD_EXP 57
64530: PUSH
64531: FOR_TO
64532: IFFALSE 65124
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
64534: LD_EXP 86
64538: PUSH
64539: LD_VAR 0 2
64543: ARRAY
64544: NOT
64545: PUSH
64546: LD_EXP 86
64550: PUSH
64551: LD_VAR 0 2
64555: ARRAY
64556: PPUSH
64557: LD_INT 25
64559: PUSH
64560: LD_INT 12
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PPUSH
64567: CALL_OW 72
64571: NOT
64572: OR
64573: IFFALSE 64577
// continue ;
64575: GO 64531
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
64577: LD_ADDR_VAR 0 5
64581: PUSH
64582: LD_EXP 86
64586: PUSH
64587: LD_VAR 0 2
64591: ARRAY
64592: PUSH
64593: LD_INT 1
64595: ARRAY
64596: PPUSH
64597: CALL_OW 255
64601: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
64602: LD_VAR 0 5
64606: PPUSH
64607: LD_INT 2
64609: PPUSH
64610: CALL_OW 325
64614: IFFALSE 64859
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
64616: LD_ADDR_VAR 0 4
64620: PUSH
64621: LD_EXP 86
64625: PUSH
64626: LD_VAR 0 2
64630: ARRAY
64631: PPUSH
64632: LD_INT 25
64634: PUSH
64635: LD_INT 16
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PPUSH
64642: CALL_OW 72
64646: ST_TO_ADDR
// if tmp < 6 then
64647: LD_VAR 0 4
64651: PUSH
64652: LD_INT 6
64654: LESS
64655: IFFALSE 64859
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64657: LD_ADDR_VAR 0 6
64661: PUSH
64662: LD_EXP 57
64666: PUSH
64667: LD_VAR 0 2
64671: ARRAY
64672: PPUSH
64673: LD_INT 2
64675: PUSH
64676: LD_INT 30
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 30
64688: PUSH
64689: LD_INT 1
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: LIST
64700: PPUSH
64701: CALL_OW 72
64705: ST_TO_ADDR
// if depot then
64706: LD_VAR 0 6
64710: IFFALSE 64859
// begin for j in depot do
64712: LD_ADDR_VAR 0 3
64716: PUSH
64717: LD_VAR 0 6
64721: PUSH
64722: FOR_IN
64723: IFFALSE 64754
// begin if UnitsInside ( j ) < 6 then
64725: LD_VAR 0 3
64729: PPUSH
64730: CALL_OW 313
64734: PUSH
64735: LD_INT 6
64737: LESS
64738: IFFALSE 64752
// begin selected := j ;
64740: LD_ADDR_VAR 0 7
64744: PUSH
64745: LD_VAR 0 3
64749: ST_TO_ADDR
// break ;
64750: GO 64754
// end ; end ;
64752: GO 64722
64754: POP
64755: POP
// if selected then
64756: LD_VAR 0 7
64760: IFFALSE 64859
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
64762: LD_ADDR_VAR 0 3
64766: PUSH
64767: LD_EXP 86
64771: PUSH
64772: LD_VAR 0 2
64776: ARRAY
64777: PPUSH
64778: LD_INT 25
64780: PUSH
64781: LD_INT 12
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PPUSH
64788: CALL_OW 72
64792: PUSH
64793: FOR_IN
64794: IFFALSE 64857
// if not HasTask ( j ) then
64796: LD_VAR 0 3
64800: PPUSH
64801: CALL_OW 314
64805: NOT
64806: IFFALSE 64855
// begin if not IsInUnit ( j ) then
64808: LD_VAR 0 3
64812: PPUSH
64813: CALL_OW 310
64817: NOT
64818: IFFALSE 64834
// ComEnterUnit ( j , selected ) ;
64820: LD_VAR 0 3
64824: PPUSH
64825: LD_VAR 0 7
64829: PPUSH
64830: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
64834: LD_VAR 0 3
64838: PPUSH
64839: LD_INT 16
64841: PPUSH
64842: CALL_OW 183
// AddComExitBuilding ( j ) ;
64846: LD_VAR 0 3
64850: PPUSH
64851: CALL_OW 182
// end ;
64855: GO 64793
64857: POP
64858: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
64859: LD_VAR 0 5
64863: PPUSH
64864: LD_INT 11
64866: PPUSH
64867: CALL_OW 325
64871: IFFALSE 65122
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
64873: LD_ADDR_VAR 0 4
64877: PUSH
64878: LD_EXP 86
64882: PUSH
64883: LD_VAR 0 2
64887: ARRAY
64888: PPUSH
64889: LD_INT 25
64891: PUSH
64892: LD_INT 16
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PPUSH
64899: CALL_OW 72
64903: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
64904: LD_VAR 0 4
64908: PUSH
64909: LD_INT 6
64911: GREATEREQUAL
64912: PUSH
64913: LD_VAR 0 5
64917: PPUSH
64918: LD_INT 2
64920: PPUSH
64921: CALL_OW 325
64925: NOT
64926: OR
64927: IFFALSE 65122
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
64929: LD_ADDR_VAR 0 8
64933: PUSH
64934: LD_EXP 57
64938: PUSH
64939: LD_VAR 0 2
64943: ARRAY
64944: PPUSH
64945: LD_INT 2
64947: PUSH
64948: LD_INT 30
64950: PUSH
64951: LD_INT 4
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 30
64960: PUSH
64961: LD_INT 5
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: LIST
64972: PPUSH
64973: CALL_OW 72
64977: ST_TO_ADDR
// if barracks then
64978: LD_VAR 0 8
64982: IFFALSE 65122
// begin for j in barracks do
64984: LD_ADDR_VAR 0 3
64988: PUSH
64989: LD_VAR 0 8
64993: PUSH
64994: FOR_IN
64995: IFFALSE 65026
// begin if UnitsInside ( j ) < 6 then
64997: LD_VAR 0 3
65001: PPUSH
65002: CALL_OW 313
65006: PUSH
65007: LD_INT 6
65009: LESS
65010: IFFALSE 65024
// begin selected := j ;
65012: LD_ADDR_VAR 0 7
65016: PUSH
65017: LD_VAR 0 3
65021: ST_TO_ADDR
// break ;
65022: GO 65026
// end ; end ;
65024: GO 64994
65026: POP
65027: POP
// if selected then
65028: LD_VAR 0 7
65032: IFFALSE 65122
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
65034: LD_ADDR_VAR 0 3
65038: PUSH
65039: LD_EXP 86
65043: PUSH
65044: LD_VAR 0 2
65048: ARRAY
65049: PPUSH
65050: LD_INT 25
65052: PUSH
65053: LD_INT 12
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PPUSH
65060: CALL_OW 72
65064: PUSH
65065: FOR_IN
65066: IFFALSE 65120
// if not IsInUnit ( j ) and not HasTask ( j ) then
65068: LD_VAR 0 3
65072: PPUSH
65073: CALL_OW 310
65077: NOT
65078: PUSH
65079: LD_VAR 0 3
65083: PPUSH
65084: CALL_OW 314
65088: NOT
65089: AND
65090: IFFALSE 65118
// begin ComEnterUnit ( j , selected ) ;
65092: LD_VAR 0 3
65096: PPUSH
65097: LD_VAR 0 7
65101: PPUSH
65102: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
65106: LD_VAR 0 3
65110: PPUSH
65111: LD_INT 15
65113: PPUSH
65114: CALL_OW 183
// end ;
65118: GO 65065
65120: POP
65121: POP
// end ; end ; end ; end ; end ;
65122: GO 64531
65124: POP
65125: POP
// end ;
65126: LD_VAR 0 1
65130: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
65131: LD_INT 0
65133: PPUSH
65134: PPUSH
65135: PPUSH
65136: PPUSH
// if not mc_bases then
65137: LD_EXP 57
65141: NOT
65142: IFFALSE 65146
// exit ;
65144: GO 65324
// for i = 1 to mc_bases do
65146: LD_ADDR_VAR 0 2
65150: PUSH
65151: DOUBLE
65152: LD_INT 1
65154: DEC
65155: ST_TO_ADDR
65156: LD_EXP 57
65160: PUSH
65161: FOR_TO
65162: IFFALSE 65322
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
65164: LD_ADDR_VAR 0 4
65168: PUSH
65169: LD_EXP 57
65173: PUSH
65174: LD_VAR 0 2
65178: ARRAY
65179: PPUSH
65180: LD_INT 25
65182: PUSH
65183: LD_INT 9
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PPUSH
65190: CALL_OW 72
65194: ST_TO_ADDR
// if not tmp then
65195: LD_VAR 0 4
65199: NOT
65200: IFFALSE 65204
// continue ;
65202: GO 65161
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
65204: LD_EXP 83
65208: PUSH
65209: LD_VAR 0 2
65213: ARRAY
65214: PPUSH
65215: LD_INT 29
65217: PPUSH
65218: CALL_OW 325
65222: NOT
65223: PUSH
65224: LD_EXP 83
65228: PUSH
65229: LD_VAR 0 2
65233: ARRAY
65234: PPUSH
65235: LD_INT 28
65237: PPUSH
65238: CALL_OW 325
65242: NOT
65243: AND
65244: IFFALSE 65248
// continue ;
65246: GO 65161
// for j in tmp do
65248: LD_ADDR_VAR 0 3
65252: PUSH
65253: LD_VAR 0 4
65257: PUSH
65258: FOR_IN
65259: IFFALSE 65318
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
65261: LD_VAR 0 3
65265: PUSH
65266: LD_EXP 60
65270: PUSH
65271: LD_VAR 0 2
65275: ARRAY
65276: PUSH
65277: LD_INT 1
65279: ARRAY
65280: IN
65281: NOT
65282: PUSH
65283: LD_VAR 0 3
65287: PUSH
65288: LD_EXP 60
65292: PUSH
65293: LD_VAR 0 2
65297: ARRAY
65298: PUSH
65299: LD_INT 2
65301: ARRAY
65302: IN
65303: NOT
65304: AND
65305: IFFALSE 65316
// ComSpaceTimeShoot ( j ) ;
65307: LD_VAR 0 3
65311: PPUSH
65312: CALL 14294 0 1
65316: GO 65258
65318: POP
65319: POP
// end ;
65320: GO 65161
65322: POP
65323: POP
// end ;
65324: LD_VAR 0 1
65328: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
65329: LD_INT 0
65331: PPUSH
65332: PPUSH
65333: PPUSH
65334: PPUSH
// if not mc_bases then
65335: LD_EXP 57
65339: NOT
65340: IFFALSE 65344
// exit ;
65342: GO 65366
// for i = 1 to mc_bases do
65344: LD_ADDR_VAR 0 2
65348: PUSH
65349: DOUBLE
65350: LD_INT 1
65352: DEC
65353: ST_TO_ADDR
65354: LD_EXP 57
65358: PUSH
65359: FOR_TO
65360: IFFALSE 65364
// begin end ;
65362: GO 65359
65364: POP
65365: POP
// end ;
65366: LD_VAR 0 1
65370: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
65371: LD_INT 0
65373: PPUSH
65374: PPUSH
65375: PPUSH
// if not mc_bases then
65376: LD_EXP 57
65380: NOT
65381: IFFALSE 65385
// exit ;
65383: GO 65945
// for i = 1 to mc_bases do
65385: LD_ADDR_VAR 0 2
65389: PUSH
65390: DOUBLE
65391: LD_INT 1
65393: DEC
65394: ST_TO_ADDR
65395: LD_EXP 57
65399: PUSH
65400: FOR_TO
65401: IFFALSE 65943
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
65403: LD_ADDR_VAR 0 3
65407: PUSH
65408: LD_EXP 57
65412: PUSH
65413: LD_VAR 0 2
65417: ARRAY
65418: PPUSH
65419: LD_INT 25
65421: PUSH
65422: LD_INT 4
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PPUSH
65429: CALL_OW 72
65433: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] then
65434: LD_VAR 0 3
65438: NOT
65439: PUSH
65440: LD_EXP 93
65444: PUSH
65445: LD_VAR 0 2
65449: ARRAY
65450: NOT
65451: OR
65452: IFFALSE 65502
// begin if mc_deposits_finder [ i ] then
65454: LD_EXP 94
65458: PUSH
65459: LD_VAR 0 2
65463: ARRAY
65464: IFFALSE 65500
// begin MC_Reset ( i , 125 ) ;
65466: LD_VAR 0 2
65470: PPUSH
65471: LD_INT 125
65473: PPUSH
65474: CALL 55000 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65478: LD_ADDR_EXP 94
65482: PUSH
65483: LD_EXP 94
65487: PPUSH
65488: LD_VAR 0 2
65492: PPUSH
65493: EMPTY
65494: PPUSH
65495: CALL_OW 1
65499: ST_TO_ADDR
// end ; continue ;
65500: GO 65400
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
65502: LD_EXP 93
65506: PUSH
65507: LD_VAR 0 2
65511: ARRAY
65512: PUSH
65513: LD_INT 1
65515: ARRAY
65516: PUSH
65517: LD_INT 3
65519: ARRAY
65520: PUSH
65521: LD_INT 1
65523: EQUAL
65524: PUSH
65525: LD_INT 20
65527: PPUSH
65528: LD_EXP 83
65532: PUSH
65533: LD_VAR 0 2
65537: ARRAY
65538: PPUSH
65539: CALL_OW 321
65543: PUSH
65544: LD_INT 2
65546: NONEQUAL
65547: AND
65548: IFFALSE 65598
// begin if mc_deposits_finder [ i ] then
65550: LD_EXP 94
65554: PUSH
65555: LD_VAR 0 2
65559: ARRAY
65560: IFFALSE 65596
// begin MC_Reset ( i , 125 ) ;
65562: LD_VAR 0 2
65566: PPUSH
65567: LD_INT 125
65569: PPUSH
65570: CALL 55000 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65574: LD_ADDR_EXP 94
65578: PUSH
65579: LD_EXP 94
65583: PPUSH
65584: LD_VAR 0 2
65588: PPUSH
65589: EMPTY
65590: PPUSH
65591: CALL_OW 1
65595: ST_TO_ADDR
// end ; continue ;
65596: GO 65400
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
65598: LD_EXP 93
65602: PUSH
65603: LD_VAR 0 2
65607: ARRAY
65608: PUSH
65609: LD_INT 1
65611: ARRAY
65612: PUSH
65613: LD_INT 1
65615: ARRAY
65616: PPUSH
65617: LD_EXP 93
65621: PUSH
65622: LD_VAR 0 2
65626: ARRAY
65627: PUSH
65628: LD_INT 1
65630: ARRAY
65631: PUSH
65632: LD_INT 2
65634: ARRAY
65635: PPUSH
65636: LD_EXP 83
65640: PUSH
65641: LD_VAR 0 2
65645: ARRAY
65646: PPUSH
65647: CALL_OW 440
65651: IFFALSE 65694
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
65653: LD_ADDR_EXP 93
65657: PUSH
65658: LD_EXP 93
65662: PPUSH
65663: LD_VAR 0 2
65667: PPUSH
65668: LD_EXP 93
65672: PUSH
65673: LD_VAR 0 2
65677: ARRAY
65678: PPUSH
65679: LD_INT 1
65681: PPUSH
65682: CALL_OW 3
65686: PPUSH
65687: CALL_OW 1
65691: ST_TO_ADDR
65692: GO 65941
// begin if not mc_deposits_finder [ i ] then
65694: LD_EXP 94
65698: PUSH
65699: LD_VAR 0 2
65703: ARRAY
65704: NOT
65705: IFFALSE 65757
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
65707: LD_ADDR_EXP 94
65711: PUSH
65712: LD_EXP 94
65716: PPUSH
65717: LD_VAR 0 2
65721: PPUSH
65722: LD_VAR 0 3
65726: PUSH
65727: LD_INT 1
65729: ARRAY
65730: PUSH
65731: EMPTY
65732: LIST
65733: PPUSH
65734: CALL_OW 1
65738: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
65739: LD_VAR 0 3
65743: PUSH
65744: LD_INT 1
65746: ARRAY
65747: PPUSH
65748: LD_INT 125
65750: PPUSH
65751: CALL_OW 109
// end else
65755: GO 65941
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
65757: LD_EXP 94
65761: PUSH
65762: LD_VAR 0 2
65766: ARRAY
65767: PUSH
65768: LD_INT 1
65770: ARRAY
65771: PPUSH
65772: CALL_OW 310
65776: IFFALSE 65799
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
65778: LD_EXP 94
65782: PUSH
65783: LD_VAR 0 2
65787: ARRAY
65788: PUSH
65789: LD_INT 1
65791: ARRAY
65792: PPUSH
65793: CALL_OW 122
65797: GO 65941
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
65799: LD_EXP 94
65803: PUSH
65804: LD_VAR 0 2
65808: ARRAY
65809: PUSH
65810: LD_INT 1
65812: ARRAY
65813: PPUSH
65814: CALL_OW 314
65818: NOT
65819: PUSH
65820: LD_EXP 94
65824: PUSH
65825: LD_VAR 0 2
65829: ARRAY
65830: PUSH
65831: LD_INT 1
65833: ARRAY
65834: PPUSH
65835: LD_EXP 93
65839: PUSH
65840: LD_VAR 0 2
65844: ARRAY
65845: PUSH
65846: LD_INT 1
65848: ARRAY
65849: PUSH
65850: LD_INT 1
65852: ARRAY
65853: PPUSH
65854: LD_EXP 93
65858: PUSH
65859: LD_VAR 0 2
65863: ARRAY
65864: PUSH
65865: LD_INT 1
65867: ARRAY
65868: PUSH
65869: LD_INT 2
65871: ARRAY
65872: PPUSH
65873: CALL_OW 297
65877: PUSH
65878: LD_INT 6
65880: GREATER
65881: AND
65882: IFFALSE 65941
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
65884: LD_EXP 94
65888: PUSH
65889: LD_VAR 0 2
65893: ARRAY
65894: PUSH
65895: LD_INT 1
65897: ARRAY
65898: PPUSH
65899: LD_EXP 93
65903: PUSH
65904: LD_VAR 0 2
65908: ARRAY
65909: PUSH
65910: LD_INT 1
65912: ARRAY
65913: PUSH
65914: LD_INT 1
65916: ARRAY
65917: PPUSH
65918: LD_EXP 93
65922: PUSH
65923: LD_VAR 0 2
65927: ARRAY
65928: PUSH
65929: LD_INT 1
65931: ARRAY
65932: PUSH
65933: LD_INT 2
65935: ARRAY
65936: PPUSH
65937: CALL_OW 111
// end ; end ; end ;
65941: GO 65400
65943: POP
65944: POP
// end ;
65945: LD_VAR 0 1
65949: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts ; begin
65950: LD_INT 0
65952: PPUSH
65953: PPUSH
65954: PPUSH
65955: PPUSH
65956: PPUSH
65957: PPUSH
65958: PPUSH
65959: PPUSH
65960: PPUSH
// if not mc_bases then
65961: LD_EXP 57
65965: NOT
65966: IFFALSE 65970
// exit ;
65968: GO 66468
// for i = 1 to mc_bases do
65970: LD_ADDR_VAR 0 2
65974: PUSH
65975: DOUBLE
65976: LD_INT 1
65978: DEC
65979: ST_TO_ADDR
65980: LD_EXP 57
65984: PUSH
65985: FOR_TO
65986: IFFALSE 66466
// begin if not mc_bases [ i ] then
65988: LD_EXP 57
65992: PUSH
65993: LD_VAR 0 2
65997: ARRAY
65998: NOT
65999: IFFALSE 66003
// continue ;
66001: GO 65985
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
66003: LD_ADDR_VAR 0 7
66007: PUSH
66008: LD_EXP 57
66012: PUSH
66013: LD_VAR 0 2
66017: ARRAY
66018: PUSH
66019: LD_INT 1
66021: ARRAY
66022: PPUSH
66023: CALL_OW 248
66027: ST_TO_ADDR
// if nation <> 1 or not UnitFilter ( ( mc_vehicles [ i ] union mc_defender [ i ] ) , [ f_control , control_remote ] ) then
66028: LD_VAR 0 7
66032: PUSH
66033: LD_INT 1
66035: NONEQUAL
66036: PUSH
66037: LD_EXP 76
66041: PUSH
66042: LD_VAR 0 2
66046: ARRAY
66047: PUSH
66048: LD_EXP 79
66052: PUSH
66053: LD_VAR 0 2
66057: ARRAY
66058: UNION
66059: PPUSH
66060: LD_INT 33
66062: PUSH
66063: LD_INT 2
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PPUSH
66070: CALL_OW 72
66074: NOT
66075: OR
66076: IFFALSE 66080
// continue ;
66078: GO 65985
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
66080: LD_ADDR_VAR 0 9
66084: PUSH
66085: LD_EXP 57
66089: PUSH
66090: LD_VAR 0 2
66094: ARRAY
66095: PPUSH
66096: LD_INT 30
66098: PUSH
66099: LD_INT 36
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PPUSH
66106: CALL_OW 72
66110: ST_TO_ADDR
// if not cts then
66111: LD_VAR 0 9
66115: NOT
66116: IFFALSE 66120
// continue ;
66118: GO 65985
// if mc_remote_driver [ i ] then
66120: LD_EXP 96
66124: PUSH
66125: LD_VAR 0 2
66129: ARRAY
66130: IFFALSE 66279
// for j in mc_remote_driver [ i ] do
66132: LD_ADDR_VAR 0 3
66136: PUSH
66137: LD_EXP 96
66141: PUSH
66142: LD_VAR 0 2
66146: ARRAY
66147: PUSH
66148: FOR_IN
66149: IFFALSE 66277
// if not IsInUnit ( j ) or GetBType ( IsInUnit ( j ) ) <> b_control_tower then
66151: LD_VAR 0 3
66155: PPUSH
66156: CALL_OW 310
66160: NOT
66161: PUSH
66162: LD_VAR 0 3
66166: PPUSH
66167: CALL_OW 310
66171: PPUSH
66172: CALL_OW 266
66176: PUSH
66177: LD_INT 36
66179: NONEQUAL
66180: OR
66181: IFFALSE 66275
// begin if IsInUnit ( j ) then
66183: LD_VAR 0 3
66187: PPUSH
66188: CALL_OW 310
66192: IFFALSE 66203
// ComExitBuilding ( j ) ;
66194: LD_VAR 0 3
66198: PPUSH
66199: CALL_OW 122
// ct := 0 ;
66203: LD_ADDR_VAR 0 8
66207: PUSH
66208: LD_INT 0
66210: ST_TO_ADDR
// for k in cts do
66211: LD_ADDR_VAR 0 4
66215: PUSH
66216: LD_VAR 0 9
66220: PUSH
66221: FOR_IN
66222: IFFALSE 66253
// if UnitsInside ( k ) < 3 then
66224: LD_VAR 0 4
66228: PPUSH
66229: CALL_OW 313
66233: PUSH
66234: LD_INT 3
66236: LESS
66237: IFFALSE 66251
// begin ct := k ;
66239: LD_ADDR_VAR 0 8
66243: PUSH
66244: LD_VAR 0 4
66248: ST_TO_ADDR
// break ;
66249: GO 66253
// end ;
66251: GO 66221
66253: POP
66254: POP
// if ct then
66255: LD_VAR 0 8
66259: IFFALSE 66275
// AddComEnterUnit ( j , ct ) ;
66261: LD_VAR 0 3
66265: PPUSH
66266: LD_VAR 0 8
66270: PPUSH
66271: CALL_OW 180
// end ;
66275: GO 66148
66277: POP
66278: POP
// places := 0 ;
66279: LD_ADDR_VAR 0 5
66283: PUSH
66284: LD_INT 0
66286: ST_TO_ADDR
// for j = 1 to cts do
66287: LD_ADDR_VAR 0 3
66291: PUSH
66292: DOUBLE
66293: LD_INT 1
66295: DEC
66296: ST_TO_ADDR
66297: LD_VAR 0 9
66301: PUSH
66302: FOR_TO
66303: IFFALSE 66321
// places := places + 3 ;
66305: LD_ADDR_VAR 0 5
66309: PUSH
66310: LD_VAR 0 5
66314: PUSH
66315: LD_INT 3
66317: PLUS
66318: ST_TO_ADDR
66319: GO 66302
66321: POP
66322: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] ;
66323: LD_ADDR_VAR 0 6
66327: PUSH
66328: LD_EXP 57
66332: PUSH
66333: LD_VAR 0 2
66337: ARRAY
66338: PPUSH
66339: LD_INT 25
66341: PUSH
66342: LD_INT 3
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PPUSH
66349: CALL_OW 72
66353: PUSH
66354: LD_EXP 96
66358: PUSH
66359: LD_VAR 0 2
66363: ARRAY
66364: DIFF
66365: ST_TO_ADDR
// if not tmp then
66366: LD_VAR 0 6
66370: NOT
66371: IFFALSE 66375
// continue ;
66373: GO 65985
// places := places - ( mc_remote_driver [ i ] + 1 ) ;
66375: LD_ADDR_VAR 0 5
66379: PUSH
66380: LD_VAR 0 5
66384: PUSH
66385: LD_EXP 96
66389: PUSH
66390: LD_VAR 0 2
66394: ARRAY
66395: PUSH
66396: LD_INT 1
66398: PLUS
66399: MINUS
66400: ST_TO_ADDR
// if places then
66401: LD_VAR 0 5
66405: IFFALSE 66464
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
66407: LD_ADDR_EXP 96
66411: PUSH
66412: LD_EXP 96
66416: PPUSH
66417: LD_VAR 0 2
66421: PPUSH
66422: LD_EXP 96
66426: PUSH
66427: LD_VAR 0 2
66431: ARRAY
66432: PUSH
66433: LD_VAR 0 6
66437: PUSH
66438: LD_INT 1
66440: ARRAY
66441: UNION
66442: PPUSH
66443: CALL_OW 1
66447: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
66448: LD_VAR 0 6
66452: PUSH
66453: LD_INT 1
66455: ARRAY
66456: PPUSH
66457: LD_INT 126
66459: PPUSH
66460: CALL_OW 109
// end ; end ;
66464: GO 65985
66466: POP
66467: POP
// end ;
66468: LD_VAR 0 1
66472: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
66473: LD_INT 0
66475: PPUSH
66476: PPUSH
66477: PPUSH
66478: PPUSH
66479: PPUSH
66480: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
66481: LD_VAR 0 1
66485: NOT
66486: PUSH
66487: LD_VAR 0 2
66491: NOT
66492: OR
66493: PUSH
66494: LD_VAR 0 3
66498: NOT
66499: OR
66500: PUSH
66501: LD_VAR 0 4
66505: PUSH
66506: LD_INT 1
66508: PUSH
66509: LD_INT 2
66511: PUSH
66512: LD_INT 3
66514: PUSH
66515: LD_INT 4
66517: PUSH
66518: LD_INT 5
66520: PUSH
66521: LD_INT 8
66523: PUSH
66524: LD_INT 9
66526: PUSH
66527: LD_INT 15
66529: PUSH
66530: LD_INT 16
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: IN
66544: NOT
66545: OR
66546: IFFALSE 66550
// exit ;
66548: GO 67450
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
66550: LD_ADDR_VAR 0 2
66554: PUSH
66555: LD_VAR 0 2
66559: PPUSH
66560: LD_INT 21
66562: PUSH
66563: LD_INT 3
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 24
66572: PUSH
66573: LD_INT 250
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PPUSH
66584: CALL_OW 72
66588: ST_TO_ADDR
// case class of 1 , 15 :
66589: LD_VAR 0 4
66593: PUSH
66594: LD_INT 1
66596: DOUBLE
66597: EQUAL
66598: IFTRUE 66608
66600: LD_INT 15
66602: DOUBLE
66603: EQUAL
66604: IFTRUE 66608
66606: GO 66693
66608: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
66609: LD_ADDR_VAR 0 8
66613: PUSH
66614: LD_VAR 0 2
66618: PPUSH
66619: LD_INT 2
66621: PUSH
66622: LD_INT 30
66624: PUSH
66625: LD_INT 32
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 30
66634: PUSH
66635: LD_INT 31
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: LIST
66646: PPUSH
66647: CALL_OW 72
66651: PUSH
66652: LD_VAR 0 2
66656: PPUSH
66657: LD_INT 2
66659: PUSH
66660: LD_INT 30
66662: PUSH
66663: LD_INT 4
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 30
66672: PUSH
66673: LD_INT 5
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: LIST
66684: PPUSH
66685: CALL_OW 72
66689: ADD
66690: ST_TO_ADDR
66691: GO 66939
66693: LD_INT 2
66695: DOUBLE
66696: EQUAL
66697: IFTRUE 66707
66699: LD_INT 16
66701: DOUBLE
66702: EQUAL
66703: IFTRUE 66707
66705: GO 66753
66707: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
66708: LD_ADDR_VAR 0 8
66712: PUSH
66713: LD_VAR 0 2
66717: PPUSH
66718: LD_INT 2
66720: PUSH
66721: LD_INT 30
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 30
66733: PUSH
66734: LD_INT 1
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: LIST
66745: PPUSH
66746: CALL_OW 72
66750: ST_TO_ADDR
66751: GO 66939
66753: LD_INT 3
66755: DOUBLE
66756: EQUAL
66757: IFTRUE 66761
66759: GO 66807
66761: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
66762: LD_ADDR_VAR 0 8
66766: PUSH
66767: LD_VAR 0 2
66771: PPUSH
66772: LD_INT 2
66774: PUSH
66775: LD_INT 30
66777: PUSH
66778: LD_INT 2
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 30
66787: PUSH
66788: LD_INT 3
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: LIST
66799: PPUSH
66800: CALL_OW 72
66804: ST_TO_ADDR
66805: GO 66939
66807: LD_INT 4
66809: DOUBLE
66810: EQUAL
66811: IFTRUE 66815
66813: GO 66872
66815: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
66816: LD_ADDR_VAR 0 8
66820: PUSH
66821: LD_VAR 0 2
66825: PPUSH
66826: LD_INT 2
66828: PUSH
66829: LD_INT 30
66831: PUSH
66832: LD_INT 6
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 30
66841: PUSH
66842: LD_INT 7
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 30
66851: PUSH
66852: LD_INT 8
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: PPUSH
66865: CALL_OW 72
66869: ST_TO_ADDR
66870: GO 66939
66872: LD_INT 5
66874: DOUBLE
66875: EQUAL
66876: IFTRUE 66892
66878: LD_INT 8
66880: DOUBLE
66881: EQUAL
66882: IFTRUE 66892
66884: LD_INT 9
66886: DOUBLE
66887: EQUAL
66888: IFTRUE 66892
66890: GO 66938
66892: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
66893: LD_ADDR_VAR 0 8
66897: PUSH
66898: LD_VAR 0 2
66902: PPUSH
66903: LD_INT 2
66905: PUSH
66906: LD_INT 30
66908: PUSH
66909: LD_INT 4
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 30
66918: PUSH
66919: LD_INT 5
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: LIST
66930: PPUSH
66931: CALL_OW 72
66935: ST_TO_ADDR
66936: GO 66939
66938: POP
// if not tmp then
66939: LD_VAR 0 8
66943: NOT
66944: IFFALSE 66948
// exit ;
66946: GO 67450
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
66948: LD_VAR 0 4
66952: PUSH
66953: LD_INT 1
66955: PUSH
66956: LD_INT 15
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: IN
66963: PUSH
66964: LD_EXP 66
66968: PUSH
66969: LD_VAR 0 1
66973: ARRAY
66974: AND
66975: IFFALSE 67131
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
66977: LD_ADDR_VAR 0 9
66981: PUSH
66982: LD_EXP 66
66986: PUSH
66987: LD_VAR 0 1
66991: ARRAY
66992: PUSH
66993: LD_INT 1
66995: ARRAY
66996: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
66997: LD_VAR 0 9
67001: PUSH
67002: LD_EXP 67
67006: PUSH
67007: LD_VAR 0 1
67011: ARRAY
67012: IN
67013: NOT
67014: IFFALSE 67129
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
67016: LD_ADDR_EXP 67
67020: PUSH
67021: LD_EXP 67
67025: PPUSH
67026: LD_VAR 0 1
67030: PUSH
67031: LD_EXP 67
67035: PUSH
67036: LD_VAR 0 1
67040: ARRAY
67041: PUSH
67042: LD_INT 1
67044: PLUS
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PPUSH
67050: LD_VAR 0 9
67054: PPUSH
67055: CALL 20132 0 3
67059: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
67060: LD_ADDR_EXP 66
67064: PUSH
67065: LD_EXP 66
67069: PPUSH
67070: LD_VAR 0 1
67074: PPUSH
67075: LD_EXP 66
67079: PUSH
67080: LD_VAR 0 1
67084: ARRAY
67085: PUSH
67086: LD_VAR 0 9
67090: DIFF
67091: PPUSH
67092: CALL_OW 1
67096: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
67097: LD_VAR 0 3
67101: PPUSH
67102: LD_EXP 67
67106: PUSH
67107: LD_VAR 0 1
67111: ARRAY
67112: PUSH
67113: LD_EXP 67
67117: PUSH
67118: LD_VAR 0 1
67122: ARRAY
67123: ARRAY
67124: PPUSH
67125: CALL_OW 120
// end ; exit ;
67129: GO 67450
// end ; if tmp > 1 then
67131: LD_VAR 0 8
67135: PUSH
67136: LD_INT 1
67138: GREATER
67139: IFFALSE 67243
// for i = 2 to tmp do
67141: LD_ADDR_VAR 0 6
67145: PUSH
67146: DOUBLE
67147: LD_INT 2
67149: DEC
67150: ST_TO_ADDR
67151: LD_VAR 0 8
67155: PUSH
67156: FOR_TO
67157: IFFALSE 67241
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
67159: LD_VAR 0 8
67163: PUSH
67164: LD_VAR 0 6
67168: ARRAY
67169: PPUSH
67170: CALL_OW 461
67174: PUSH
67175: LD_INT 6
67177: EQUAL
67178: IFFALSE 67239
// begin x := tmp [ i ] ;
67180: LD_ADDR_VAR 0 9
67184: PUSH
67185: LD_VAR 0 8
67189: PUSH
67190: LD_VAR 0 6
67194: ARRAY
67195: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
67196: LD_ADDR_VAR 0 8
67200: PUSH
67201: LD_VAR 0 8
67205: PPUSH
67206: LD_VAR 0 6
67210: PPUSH
67211: CALL_OW 3
67215: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
67216: LD_ADDR_VAR 0 8
67220: PUSH
67221: LD_VAR 0 8
67225: PPUSH
67226: LD_INT 1
67228: PPUSH
67229: LD_VAR 0 9
67233: PPUSH
67234: CALL_OW 2
67238: ST_TO_ADDR
// end ;
67239: GO 67156
67241: POP
67242: POP
// for i in tmp do
67243: LD_ADDR_VAR 0 6
67247: PUSH
67248: LD_VAR 0 8
67252: PUSH
67253: FOR_IN
67254: IFFALSE 67323
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
67256: LD_VAR 0 6
67260: PPUSH
67261: CALL_OW 313
67265: PUSH
67266: LD_INT 6
67268: LESS
67269: PUSH
67270: LD_VAR 0 6
67274: PPUSH
67275: CALL_OW 266
67279: PUSH
67280: LD_INT 31
67282: PUSH
67283: LD_INT 32
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: IN
67290: NOT
67291: AND
67292: PUSH
67293: LD_VAR 0 6
67297: PPUSH
67298: CALL_OW 313
67302: PUSH
67303: LD_INT 0
67305: EQUAL
67306: OR
67307: IFFALSE 67321
// begin j := i ;
67309: LD_ADDR_VAR 0 7
67313: PUSH
67314: LD_VAR 0 6
67318: ST_TO_ADDR
// break ;
67319: GO 67323
// end ; end ;
67321: GO 67253
67323: POP
67324: POP
// if j then
67325: LD_VAR 0 7
67329: IFFALSE 67347
// ComEnterUnit ( unit , j ) else
67331: LD_VAR 0 3
67335: PPUSH
67336: LD_VAR 0 7
67340: PPUSH
67341: CALL_OW 120
67345: GO 67450
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67347: LD_ADDR_VAR 0 10
67351: PUSH
67352: LD_VAR 0 2
67356: PPUSH
67357: LD_INT 2
67359: PUSH
67360: LD_INT 30
67362: PUSH
67363: LD_INT 0
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 30
67372: PUSH
67373: LD_INT 1
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: LIST
67384: PPUSH
67385: CALL_OW 72
67389: ST_TO_ADDR
// if depot then
67390: LD_VAR 0 10
67394: IFFALSE 67450
// begin depot := NearestUnitToUnit ( depot , unit ) ;
67396: LD_ADDR_VAR 0 10
67400: PUSH
67401: LD_VAR 0 10
67405: PPUSH
67406: LD_VAR 0 3
67410: PPUSH
67411: CALL_OW 74
67415: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
67416: LD_VAR 0 3
67420: PPUSH
67421: LD_VAR 0 10
67425: PPUSH
67426: CALL_OW 296
67430: PUSH
67431: LD_INT 10
67433: GREATER
67434: IFFALSE 67450
// ComStandNearbyBuilding ( unit , depot ) ;
67436: LD_VAR 0 3
67440: PPUSH
67441: LD_VAR 0 10
67445: PPUSH
67446: CALL 14911 0 2
// end ; end ; end ;
67450: LD_VAR 0 5
67454: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
67455: LD_INT 0
67457: PPUSH
67458: PPUSH
67459: PPUSH
67460: PPUSH
// if not mc_bases then
67461: LD_EXP 57
67465: NOT
67466: IFFALSE 67470
// exit ;
67468: GO 67709
// for i = 1 to mc_bases do
67470: LD_ADDR_VAR 0 2
67474: PUSH
67475: DOUBLE
67476: LD_INT 1
67478: DEC
67479: ST_TO_ADDR
67480: LD_EXP 57
67484: PUSH
67485: FOR_TO
67486: IFFALSE 67707
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
67488: LD_ADDR_VAR 0 4
67492: PUSH
67493: LD_EXP 57
67497: PUSH
67498: LD_VAR 0 2
67502: ARRAY
67503: PPUSH
67504: LD_INT 21
67506: PUSH
67507: LD_INT 1
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PPUSH
67514: CALL_OW 72
67518: PUSH
67519: LD_EXP 86
67523: PUSH
67524: LD_VAR 0 2
67528: ARRAY
67529: UNION
67530: ST_TO_ADDR
// if not tmp then
67531: LD_VAR 0 4
67535: NOT
67536: IFFALSE 67540
// continue ;
67538: GO 67485
// for j in tmp do
67540: LD_ADDR_VAR 0 3
67544: PUSH
67545: LD_VAR 0 4
67549: PUSH
67550: FOR_IN
67551: IFFALSE 67703
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
67553: LD_VAR 0 3
67557: PPUSH
67558: CALL_OW 110
67562: NOT
67563: PUSH
67564: LD_VAR 0 3
67568: PPUSH
67569: CALL_OW 314
67573: NOT
67574: AND
67575: PUSH
67576: LD_VAR 0 3
67580: PPUSH
67581: CALL_OW 311
67585: NOT
67586: AND
67587: PUSH
67588: LD_VAR 0 3
67592: PPUSH
67593: CALL_OW 310
67597: NOT
67598: AND
67599: PUSH
67600: LD_VAR 0 3
67604: PUSH
67605: LD_EXP 60
67609: PUSH
67610: LD_VAR 0 2
67614: ARRAY
67615: PUSH
67616: LD_INT 1
67618: ARRAY
67619: IN
67620: NOT
67621: AND
67622: PUSH
67623: LD_VAR 0 3
67627: PUSH
67628: LD_EXP 60
67632: PUSH
67633: LD_VAR 0 2
67637: ARRAY
67638: PUSH
67639: LD_INT 2
67641: ARRAY
67642: IN
67643: NOT
67644: AND
67645: PUSH
67646: LD_VAR 0 3
67650: PUSH
67651: LD_EXP 69
67655: PUSH
67656: LD_VAR 0 2
67660: ARRAY
67661: IN
67662: NOT
67663: AND
67664: IFFALSE 67701
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
67666: LD_VAR 0 2
67670: PPUSH
67671: LD_EXP 57
67675: PUSH
67676: LD_VAR 0 2
67680: ARRAY
67681: PPUSH
67682: LD_VAR 0 3
67686: PPUSH
67687: LD_VAR 0 3
67691: PPUSH
67692: CALL_OW 257
67696: PPUSH
67697: CALL 66473 0 4
// end ;
67701: GO 67550
67703: POP
67704: POP
// end ;
67705: GO 67485
67707: POP
67708: POP
// end ;
67709: LD_VAR 0 1
67713: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
67714: LD_INT 0
67716: PPUSH
67717: PPUSH
67718: PPUSH
67719: PPUSH
67720: PPUSH
67721: PPUSH
// if not mc_bases [ base ] then
67722: LD_EXP 57
67726: PUSH
67727: LD_VAR 0 1
67731: ARRAY
67732: NOT
67733: IFFALSE 67737
// exit ;
67735: GO 67919
// tmp := [ ] ;
67737: LD_ADDR_VAR 0 6
67741: PUSH
67742: EMPTY
67743: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
67744: LD_ADDR_VAR 0 7
67748: PUSH
67749: LD_VAR 0 3
67753: PPUSH
67754: LD_INT 0
67756: PPUSH
67757: CALL_OW 517
67761: ST_TO_ADDR
// if not list then
67762: LD_VAR 0 7
67766: NOT
67767: IFFALSE 67771
// exit ;
67769: GO 67919
// for i = 1 to amount do
67771: LD_ADDR_VAR 0 5
67775: PUSH
67776: DOUBLE
67777: LD_INT 1
67779: DEC
67780: ST_TO_ADDR
67781: LD_VAR 0 2
67785: PUSH
67786: FOR_TO
67787: IFFALSE 67867
// begin x := rand ( 1 , list [ 1 ] ) ;
67789: LD_ADDR_VAR 0 8
67793: PUSH
67794: LD_INT 1
67796: PPUSH
67797: LD_VAR 0 7
67801: PUSH
67802: LD_INT 1
67804: ARRAY
67805: PPUSH
67806: CALL_OW 12
67810: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
67811: LD_ADDR_VAR 0 6
67815: PUSH
67816: LD_VAR 0 6
67820: PPUSH
67821: LD_VAR 0 5
67825: PPUSH
67826: LD_VAR 0 7
67830: PUSH
67831: LD_INT 1
67833: ARRAY
67834: PUSH
67835: LD_VAR 0 8
67839: ARRAY
67840: PUSH
67841: LD_VAR 0 7
67845: PUSH
67846: LD_INT 2
67848: ARRAY
67849: PUSH
67850: LD_VAR 0 8
67854: ARRAY
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PPUSH
67860: CALL_OW 1
67864: ST_TO_ADDR
// end ;
67865: GO 67786
67867: POP
67868: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
67869: LD_ADDR_EXP 70
67873: PUSH
67874: LD_EXP 70
67878: PPUSH
67879: LD_VAR 0 1
67883: PPUSH
67884: LD_VAR 0 6
67888: PPUSH
67889: CALL_OW 1
67893: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
67894: LD_ADDR_EXP 72
67898: PUSH
67899: LD_EXP 72
67903: PPUSH
67904: LD_VAR 0 1
67908: PPUSH
67909: LD_VAR 0 3
67913: PPUSH
67914: CALL_OW 1
67918: ST_TO_ADDR
// end ;
67919: LD_VAR 0 4
67923: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
67924: LD_INT 0
67926: PPUSH
// if not mc_bases [ base ] then
67927: LD_EXP 57
67931: PUSH
67932: LD_VAR 0 1
67936: ARRAY
67937: NOT
67938: IFFALSE 67942
// exit ;
67940: GO 67967
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
67942: LD_ADDR_EXP 62
67946: PUSH
67947: LD_EXP 62
67951: PPUSH
67952: LD_VAR 0 1
67956: PPUSH
67957: LD_VAR 0 2
67961: PPUSH
67962: CALL_OW 1
67966: ST_TO_ADDR
// end ;
67967: LD_VAR 0 3
67971: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
67972: LD_INT 0
67974: PPUSH
// if not mc_bases [ base ] then
67975: LD_EXP 57
67979: PUSH
67980: LD_VAR 0 1
67984: ARRAY
67985: NOT
67986: IFFALSE 67990
// exit ;
67988: GO 68046
// mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , list ) ) ;
67990: LD_ADDR_EXP 62
67994: PUSH
67995: LD_EXP 62
67999: PPUSH
68000: LD_VAR 0 1
68004: PPUSH
68005: LD_EXP 62
68009: PUSH
68010: LD_VAR 0 1
68014: ARRAY
68015: PPUSH
68016: LD_EXP 62
68020: PUSH
68021: LD_VAR 0 1
68025: ARRAY
68026: PUSH
68027: LD_INT 1
68029: PLUS
68030: PPUSH
68031: LD_VAR 0 2
68035: PPUSH
68036: CALL_OW 2
68040: PPUSH
68041: CALL_OW 1
68045: ST_TO_ADDR
// end ;
68046: LD_VAR 0 3
68050: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
68051: LD_INT 0
68053: PPUSH
// if not mc_bases [ base ] then
68054: LD_EXP 57
68058: PUSH
68059: LD_VAR 0 1
68063: ARRAY
68064: NOT
68065: IFFALSE 68069
// exit ;
68067: GO 68094
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
68069: LD_ADDR_EXP 78
68073: PUSH
68074: LD_EXP 78
68078: PPUSH
68079: LD_VAR 0 1
68083: PPUSH
68084: LD_VAR 0 2
68088: PPUSH
68089: CALL_OW 1
68093: ST_TO_ADDR
// end ;
68094: LD_VAR 0 3
68098: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
68099: LD_INT 0
68101: PPUSH
// if not mc_bases [ base ] then
68102: LD_EXP 57
68106: PUSH
68107: LD_VAR 0 1
68111: ARRAY
68112: NOT
68113: IFFALSE 68117
// exit ;
68115: GO 68157
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
68117: LD_ADDR_EXP 78
68121: PUSH
68122: LD_EXP 78
68126: PPUSH
68127: LD_VAR 0 1
68131: PPUSH
68132: LD_EXP 78
68136: PUSH
68137: LD_VAR 0 1
68141: ARRAY
68142: PUSH
68143: LD_VAR 0 2
68147: PUSH
68148: EMPTY
68149: LIST
68150: ADD
68151: PPUSH
68152: CALL_OW 1
68156: ST_TO_ADDR
// end ;
68157: LD_VAR 0 3
68161: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
68162: LD_INT 0
68164: PPUSH
// if not mc_bases [ base ] then
68165: LD_EXP 57
68169: PUSH
68170: LD_VAR 0 1
68174: ARRAY
68175: NOT
68176: IFFALSE 68180
// exit ;
68178: GO 68292
// mc_defender := Replace ( mc_defender , base , deflist ) ;
68180: LD_ADDR_EXP 79
68184: PUSH
68185: LD_EXP 79
68189: PPUSH
68190: LD_VAR 0 1
68194: PPUSH
68195: LD_VAR 0 2
68199: PPUSH
68200: CALL_OW 1
68204: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
68205: LD_ADDR_EXP 68
68209: PUSH
68210: LD_EXP 68
68214: PPUSH
68215: LD_VAR 0 1
68219: PPUSH
68220: LD_VAR 0 2
68224: PUSH
68225: LD_INT 0
68227: PLUS
68228: PPUSH
68229: CALL_OW 1
68233: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
68234: LD_ADDR_EXP 76
68238: PUSH
68239: LD_EXP 76
68243: PPUSH
68244: LD_VAR 0 1
68248: PPUSH
68249: LD_EXP 76
68253: PUSH
68254: LD_VAR 0 1
68258: ARRAY
68259: PUSH
68260: LD_EXP 79
68264: PUSH
68265: LD_VAR 0 1
68269: ARRAY
68270: PPUSH
68271: LD_INT 21
68273: PUSH
68274: LD_INT 2
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PPUSH
68281: CALL_OW 72
68285: UNION
68286: PPUSH
68287: CALL_OW 1
68291: ST_TO_ADDR
// end ;
68292: LD_VAR 0 3
68296: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
68297: LD_INT 0
68299: PPUSH
// if not mc_bases [ base ] then
68300: LD_EXP 57
68304: PUSH
68305: LD_VAR 0 1
68309: ARRAY
68310: NOT
68311: IFFALSE 68315
// exit ;
68313: GO 68340
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
68315: LD_ADDR_EXP 68
68319: PUSH
68320: LD_EXP 68
68324: PPUSH
68325: LD_VAR 0 1
68329: PPUSH
68330: LD_VAR 0 2
68334: PPUSH
68335: CALL_OW 1
68339: ST_TO_ADDR
// end ;
68340: LD_VAR 0 3
68344: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
68345: LD_INT 0
68347: PPUSH
68348: PPUSH
68349: PPUSH
68350: PPUSH
// if not mc_bases [ base ] then
68351: LD_EXP 57
68355: PUSH
68356: LD_VAR 0 1
68360: ARRAY
68361: NOT
68362: IFFALSE 68366
// exit ;
68364: GO 68431
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
68366: LD_ADDR_EXP 77
68370: PUSH
68371: LD_EXP 77
68375: PPUSH
68376: LD_VAR 0 1
68380: PUSH
68381: LD_EXP 77
68385: PUSH
68386: LD_VAR 0 1
68390: ARRAY
68391: PUSH
68392: LD_INT 1
68394: PLUS
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PPUSH
68400: LD_VAR 0 1
68404: PUSH
68405: LD_VAR 0 2
68409: PUSH
68410: LD_VAR 0 3
68414: PUSH
68415: LD_VAR 0 4
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: PPUSH
68426: CALL 20132 0 3
68430: ST_TO_ADDR
// end ;
68431: LD_VAR 0 5
68435: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
68436: LD_INT 0
68438: PPUSH
// if not mc_bases [ base ] then
68439: LD_EXP 57
68443: PUSH
68444: LD_VAR 0 1
68448: ARRAY
68449: NOT
68450: IFFALSE 68454
// exit ;
68452: GO 68479
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
68454: LD_ADDR_EXP 93
68458: PUSH
68459: LD_EXP 93
68463: PPUSH
68464: LD_VAR 0 1
68468: PPUSH
68469: LD_VAR 0 2
68473: PPUSH
68474: CALL_OW 1
68478: ST_TO_ADDR
// end ;
68479: LD_VAR 0 3
68483: RET
// export function MC_GetMinesField ( base ) ; begin
68484: LD_INT 0
68486: PPUSH
// result := mc_mines [ base ] ;
68487: LD_ADDR_VAR 0 2
68491: PUSH
68492: LD_EXP 70
68496: PUSH
68497: LD_VAR 0 1
68501: ARRAY
68502: ST_TO_ADDR
// end ;
68503: LD_VAR 0 2
68507: RET
// export function MC_GetProduceList ( base ) ; begin
68508: LD_INT 0
68510: PPUSH
// result := mc_produce [ base ] ;
68511: LD_ADDR_VAR 0 2
68515: PUSH
68516: LD_EXP 78
68520: PUSH
68521: LD_VAR 0 1
68525: ARRAY
68526: ST_TO_ADDR
// end ;
68527: LD_VAR 0 2
68531: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
68532: LD_INT 0
68534: PPUSH
68535: PPUSH
// if not mc_bases then
68536: LD_EXP 57
68540: NOT
68541: IFFALSE 68545
// exit ;
68543: GO 68610
// if mc_bases [ base ] then
68545: LD_EXP 57
68549: PUSH
68550: LD_VAR 0 1
68554: ARRAY
68555: IFFALSE 68610
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
68557: LD_ADDR_VAR 0 3
68561: PUSH
68562: LD_EXP 57
68566: PUSH
68567: LD_VAR 0 1
68571: ARRAY
68572: PPUSH
68573: LD_INT 30
68575: PUSH
68576: LD_VAR 0 2
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PPUSH
68585: CALL_OW 72
68589: ST_TO_ADDR
// if result then
68590: LD_VAR 0 3
68594: IFFALSE 68610
// result := result [ 1 ] ;
68596: LD_ADDR_VAR 0 3
68600: PUSH
68601: LD_VAR 0 3
68605: PUSH
68606: LD_INT 1
68608: ARRAY
68609: ST_TO_ADDR
// end ; end ;
68610: LD_VAR 0 3
68614: RET
// export function MC_SetTame ( base , area ) ; begin
68615: LD_INT 0
68617: PPUSH
// if not mc_bases or not base then
68618: LD_EXP 57
68622: NOT
68623: PUSH
68624: LD_VAR 0 1
68628: NOT
68629: OR
68630: IFFALSE 68634
// exit ;
68632: GO 68659
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
68634: LD_ADDR_EXP 85
68638: PUSH
68639: LD_EXP 85
68643: PPUSH
68644: LD_VAR 0 1
68648: PPUSH
68649: LD_VAR 0 2
68653: PPUSH
68654: CALL_OW 1
68658: ST_TO_ADDR
// end ;
68659: LD_VAR 0 3
68663: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
68664: LD_INT 0
68666: PPUSH
68667: PPUSH
// if not mc_bases or not base then
68668: LD_EXP 57
68672: NOT
68673: PUSH
68674: LD_VAR 0 1
68678: NOT
68679: OR
68680: IFFALSE 68684
// exit ;
68682: GO 68786
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
68684: LD_ADDR_VAR 0 4
68688: PUSH
68689: LD_EXP 57
68693: PUSH
68694: LD_VAR 0 1
68698: ARRAY
68699: PPUSH
68700: LD_INT 30
68702: PUSH
68703: LD_VAR 0 2
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PPUSH
68712: CALL_OW 72
68716: ST_TO_ADDR
// if not tmp then
68717: LD_VAR 0 4
68721: NOT
68722: IFFALSE 68726
// exit ;
68724: GO 68786
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
68726: LD_ADDR_EXP 89
68730: PUSH
68731: LD_EXP 89
68735: PPUSH
68736: LD_VAR 0 1
68740: PPUSH
68741: LD_EXP 89
68745: PUSH
68746: LD_VAR 0 1
68750: ARRAY
68751: PPUSH
68752: LD_EXP 89
68756: PUSH
68757: LD_VAR 0 1
68761: ARRAY
68762: PUSH
68763: LD_INT 1
68765: PLUS
68766: PPUSH
68767: LD_VAR 0 4
68771: PUSH
68772: LD_INT 1
68774: ARRAY
68775: PPUSH
68776: CALL_OW 2
68780: PPUSH
68781: CALL_OW 1
68785: ST_TO_ADDR
// end ;
68786: LD_VAR 0 3
68790: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
68791: LD_INT 0
68793: PPUSH
68794: PPUSH
// if not mc_bases or not base or not kinds then
68795: LD_EXP 57
68799: NOT
68800: PUSH
68801: LD_VAR 0 1
68805: NOT
68806: OR
68807: PUSH
68808: LD_VAR 0 2
68812: NOT
68813: OR
68814: IFFALSE 68818
// exit ;
68816: GO 68879
// for i in kinds do
68818: LD_ADDR_VAR 0 4
68822: PUSH
68823: LD_VAR 0 2
68827: PUSH
68828: FOR_IN
68829: IFFALSE 68877
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
68831: LD_ADDR_EXP 91
68835: PUSH
68836: LD_EXP 91
68840: PPUSH
68841: LD_VAR 0 1
68845: PUSH
68846: LD_EXP 91
68850: PUSH
68851: LD_VAR 0 1
68855: ARRAY
68856: PUSH
68857: LD_INT 1
68859: PLUS
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PPUSH
68865: LD_VAR 0 4
68869: PPUSH
68870: CALL 20132 0 3
68874: ST_TO_ADDR
68875: GO 68828
68877: POP
68878: POP
// end ;
68879: LD_VAR 0 3
68883: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
68884: LD_INT 0
68886: PPUSH
// if not mc_bases or not base or not areas then
68887: LD_EXP 57
68891: NOT
68892: PUSH
68893: LD_VAR 0 1
68897: NOT
68898: OR
68899: PUSH
68900: LD_VAR 0 2
68904: NOT
68905: OR
68906: IFFALSE 68910
// exit ;
68908: GO 68935
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
68910: LD_ADDR_EXP 75
68914: PUSH
68915: LD_EXP 75
68919: PPUSH
68920: LD_VAR 0 1
68924: PPUSH
68925: LD_VAR 0 2
68929: PPUSH
68930: CALL_OW 1
68934: ST_TO_ADDR
// end ;
68935: LD_VAR 0 3
68939: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
68940: LD_INT 0
68942: PPUSH
// if not mc_bases or not base then
68943: LD_EXP 57
68947: NOT
68948: PUSH
68949: LD_VAR 0 1
68953: NOT
68954: OR
68955: IFFALSE 68959
// exit ;
68957: GO 68993
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
68959: LD_ADDR_EXP 92
68963: PUSH
68964: LD_EXP 92
68968: PPUSH
68969: LD_VAR 0 1
68973: PPUSH
68974: LD_VAR 0 2
68978: PUSH
68979: LD_VAR 0 3
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PPUSH
68988: CALL_OW 1
68992: ST_TO_ADDR
// end ;
68993: LD_VAR 0 4
68997: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
68998: LD_INT 0
69000: PPUSH
69001: PPUSH
69002: PPUSH
// if not mc_bases or not base or not ext_list then
69003: LD_EXP 57
69007: NOT
69008: PUSH
69009: LD_VAR 0 1
69013: NOT
69014: OR
69015: PUSH
69016: LD_VAR 0 5
69020: NOT
69021: OR
69022: IFFALSE 69026
// exit ;
69024: GO 69199
// tmp := GetFacExtXYD ( x , y , d ) ;
69026: LD_ADDR_VAR 0 8
69030: PUSH
69031: LD_VAR 0 2
69035: PPUSH
69036: LD_VAR 0 3
69040: PPUSH
69041: LD_VAR 0 4
69045: PPUSH
69046: CALL 51212 0 3
69050: ST_TO_ADDR
// if not tmp then
69051: LD_VAR 0 8
69055: NOT
69056: IFFALSE 69060
// exit ;
69058: GO 69199
// for i in tmp do
69060: LD_ADDR_VAR 0 7
69064: PUSH
69065: LD_VAR 0 8
69069: PUSH
69070: FOR_IN
69071: IFFALSE 69197
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
69073: LD_ADDR_EXP 62
69077: PUSH
69078: LD_EXP 62
69082: PPUSH
69083: LD_VAR 0 1
69087: PPUSH
69088: LD_EXP 62
69092: PUSH
69093: LD_VAR 0 1
69097: ARRAY
69098: PPUSH
69099: LD_EXP 62
69103: PUSH
69104: LD_VAR 0 1
69108: ARRAY
69109: PUSH
69110: LD_INT 1
69112: PLUS
69113: PPUSH
69114: LD_VAR 0 5
69118: PUSH
69119: LD_INT 1
69121: ARRAY
69122: PUSH
69123: LD_VAR 0 7
69127: PUSH
69128: LD_INT 1
69130: ARRAY
69131: PUSH
69132: LD_VAR 0 7
69136: PUSH
69137: LD_INT 2
69139: ARRAY
69140: PUSH
69141: LD_VAR 0 7
69145: PUSH
69146: LD_INT 3
69148: ARRAY
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: PPUSH
69156: CALL_OW 2
69160: PPUSH
69161: CALL_OW 1
69165: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
69166: LD_ADDR_VAR 0 5
69170: PUSH
69171: LD_VAR 0 5
69175: PPUSH
69176: LD_INT 1
69178: PPUSH
69179: CALL_OW 3
69183: ST_TO_ADDR
// if not ext_list then
69184: LD_VAR 0 5
69188: NOT
69189: IFFALSE 69195
// exit ;
69191: POP
69192: POP
69193: GO 69199
// end ;
69195: GO 69070
69197: POP
69198: POP
// end ;
69199: LD_VAR 0 6
69203: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
69204: LD_INT 0
69206: PPUSH
// if not mc_bases or not base or not weapon_list then
69207: LD_EXP 57
69211: NOT
69212: PUSH
69213: LD_VAR 0 1
69217: NOT
69218: OR
69219: PUSH
69220: LD_VAR 0 2
69224: NOT
69225: OR
69226: IFFALSE 69230
// exit ;
69228: GO 69255
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
69230: LD_ADDR_EXP 95
69234: PUSH
69235: LD_EXP 95
69239: PPUSH
69240: LD_VAR 0 1
69244: PPUSH
69245: LD_VAR 0 2
69249: PPUSH
69250: CALL_OW 1
69254: ST_TO_ADDR
// end ;
69255: LD_VAR 0 3
69259: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
69260: LD_INT 0
69262: PPUSH
// if not mc_bases or not base or not tech_list then
69263: LD_EXP 57
69267: NOT
69268: PUSH
69269: LD_VAR 0 1
69273: NOT
69274: OR
69275: PUSH
69276: LD_VAR 0 2
69280: NOT
69281: OR
69282: IFFALSE 69286
// exit ;
69284: GO 69311
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
69286: LD_ADDR_EXP 84
69290: PUSH
69291: LD_EXP 84
69295: PPUSH
69296: LD_VAR 0 1
69300: PPUSH
69301: LD_VAR 0 2
69305: PPUSH
69306: CALL_OW 1
69310: ST_TO_ADDR
// end ;
69311: LD_VAR 0 3
69315: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
69316: LD_INT 0
69318: PPUSH
// if not mc_bases or not parking_area or not base then
69319: LD_EXP 57
69323: NOT
69324: PUSH
69325: LD_VAR 0 2
69329: NOT
69330: OR
69331: PUSH
69332: LD_VAR 0 1
69336: NOT
69337: OR
69338: IFFALSE 69342
// exit ;
69340: GO 69367
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
69342: LD_ADDR_EXP 81
69346: PUSH
69347: LD_EXP 81
69351: PPUSH
69352: LD_VAR 0 1
69356: PPUSH
69357: LD_VAR 0 2
69361: PPUSH
69362: CALL_OW 1
69366: ST_TO_ADDR
// end ;
69367: LD_VAR 0 3
69371: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
69372: LD_INT 0
69374: PPUSH
// if not mc_bases or not base or not scan_area then
69375: LD_EXP 57
69379: NOT
69380: PUSH
69381: LD_VAR 0 1
69385: NOT
69386: OR
69387: PUSH
69388: LD_VAR 0 2
69392: NOT
69393: OR
69394: IFFALSE 69398
// exit ;
69396: GO 69423
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
69398: LD_ADDR_EXP 82
69402: PUSH
69403: LD_EXP 82
69407: PPUSH
69408: LD_VAR 0 1
69412: PPUSH
69413: LD_VAR 0 2
69417: PPUSH
69418: CALL_OW 1
69422: ST_TO_ADDR
// end ; end_of_file
69423: LD_VAR 0 3
69427: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
69428: LD_INT 0
69430: PPUSH
69431: PPUSH
69432: PPUSH
// if not mc_bases then
69433: LD_EXP 57
69437: NOT
69438: IFFALSE 69442
// exit ;
69440: GO 69607
// for i = 1 to mc_bases do
69442: LD_ADDR_VAR 0 4
69446: PUSH
69447: DOUBLE
69448: LD_INT 1
69450: DEC
69451: ST_TO_ADDR
69452: LD_EXP 57
69456: PUSH
69457: FOR_TO
69458: IFFALSE 69605
// begin if sci in mc_bases [ i ] then
69460: LD_VAR 0 2
69464: PUSH
69465: LD_EXP 57
69469: PUSH
69470: LD_VAR 0 4
69474: ARRAY
69475: IN
69476: IFFALSE 69603
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
69478: LD_ADDR_EXP 86
69482: PUSH
69483: LD_EXP 86
69487: PPUSH
69488: LD_VAR 0 4
69492: PUSH
69493: LD_EXP 86
69497: PUSH
69498: LD_VAR 0 4
69502: ARRAY
69503: PUSH
69504: LD_INT 1
69506: PLUS
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PPUSH
69512: LD_VAR 0 1
69516: PPUSH
69517: CALL 20132 0 3
69521: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
69522: LD_ADDR_VAR 0 5
69526: PUSH
69527: LD_EXP 57
69531: PUSH
69532: LD_VAR 0 4
69536: ARRAY
69537: PPUSH
69538: LD_INT 2
69540: PUSH
69541: LD_INT 30
69543: PUSH
69544: LD_INT 0
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 30
69553: PUSH
69554: LD_INT 1
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: LIST
69565: PPUSH
69566: CALL_OW 72
69570: PPUSH
69571: LD_VAR 0 1
69575: PPUSH
69576: CALL_OW 74
69580: ST_TO_ADDR
// if tmp then
69581: LD_VAR 0 5
69585: IFFALSE 69601
// ComStandNearbyBuilding ( ape , tmp ) ;
69587: LD_VAR 0 1
69591: PPUSH
69592: LD_VAR 0 5
69596: PPUSH
69597: CALL 14911 0 2
// break ;
69601: GO 69605
// end ; end ;
69603: GO 69457
69605: POP
69606: POP
// end ;
69607: LD_VAR 0 3
69611: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
69612: LD_INT 0
69614: PPUSH
69615: PPUSH
69616: PPUSH
// if not mc_bases then
69617: LD_EXP 57
69621: NOT
69622: IFFALSE 69626
// exit ;
69624: GO 69715
// for i = 1 to mc_bases do
69626: LD_ADDR_VAR 0 4
69630: PUSH
69631: DOUBLE
69632: LD_INT 1
69634: DEC
69635: ST_TO_ADDR
69636: LD_EXP 57
69640: PUSH
69641: FOR_TO
69642: IFFALSE 69713
// begin if building in mc_busy_turret_list [ i ] then
69644: LD_VAR 0 1
69648: PUSH
69649: LD_EXP 67
69653: PUSH
69654: LD_VAR 0 4
69658: ARRAY
69659: IN
69660: IFFALSE 69711
// begin tmp := mc_busy_turret_list [ i ] diff building ;
69662: LD_ADDR_VAR 0 5
69666: PUSH
69667: LD_EXP 67
69671: PUSH
69672: LD_VAR 0 4
69676: ARRAY
69677: PUSH
69678: LD_VAR 0 1
69682: DIFF
69683: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
69684: LD_ADDR_EXP 67
69688: PUSH
69689: LD_EXP 67
69693: PPUSH
69694: LD_VAR 0 4
69698: PPUSH
69699: LD_VAR 0 5
69703: PPUSH
69704: CALL_OW 1
69708: ST_TO_ADDR
// break ;
69709: GO 69713
// end ; end ;
69711: GO 69641
69713: POP
69714: POP
// end ;
69715: LD_VAR 0 3
69719: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
69720: LD_INT 0
69722: PPUSH
69723: PPUSH
69724: PPUSH
// if not mc_bases then
69725: LD_EXP 57
69729: NOT
69730: IFFALSE 69734
// exit ;
69732: GO 69933
// for i = 1 to mc_bases do
69734: LD_ADDR_VAR 0 5
69738: PUSH
69739: DOUBLE
69740: LD_INT 1
69742: DEC
69743: ST_TO_ADDR
69744: LD_EXP 57
69748: PUSH
69749: FOR_TO
69750: IFFALSE 69931
// if building in mc_bases [ i ] then
69752: LD_VAR 0 1
69756: PUSH
69757: LD_EXP 57
69761: PUSH
69762: LD_VAR 0 5
69766: ARRAY
69767: IN
69768: IFFALSE 69929
// begin tmp := mc_bases [ i ] diff building ;
69770: LD_ADDR_VAR 0 6
69774: PUSH
69775: LD_EXP 57
69779: PUSH
69780: LD_VAR 0 5
69784: ARRAY
69785: PUSH
69786: LD_VAR 0 1
69790: DIFF
69791: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
69792: LD_ADDR_EXP 57
69796: PUSH
69797: LD_EXP 57
69801: PPUSH
69802: LD_VAR 0 5
69806: PPUSH
69807: LD_VAR 0 6
69811: PPUSH
69812: CALL_OW 1
69816: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
69817: LD_VAR 0 1
69821: PUSH
69822: LD_EXP 65
69826: PUSH
69827: LD_VAR 0 5
69831: ARRAY
69832: IN
69833: IFFALSE 69872
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
69835: LD_ADDR_EXP 65
69839: PUSH
69840: LD_EXP 65
69844: PPUSH
69845: LD_VAR 0 5
69849: PPUSH
69850: LD_EXP 65
69854: PUSH
69855: LD_VAR 0 5
69859: ARRAY
69860: PUSH
69861: LD_VAR 0 1
69865: DIFF
69866: PPUSH
69867: CALL_OW 1
69871: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
69872: LD_VAR 0 1
69876: PUSH
69877: LD_EXP 66
69881: PUSH
69882: LD_VAR 0 5
69886: ARRAY
69887: IN
69888: IFFALSE 69927
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
69890: LD_ADDR_EXP 66
69894: PUSH
69895: LD_EXP 66
69899: PPUSH
69900: LD_VAR 0 5
69904: PPUSH
69905: LD_EXP 66
69909: PUSH
69910: LD_VAR 0 5
69914: ARRAY
69915: PUSH
69916: LD_VAR 0 1
69920: DIFF
69921: PPUSH
69922: CALL_OW 1
69926: ST_TO_ADDR
// break ;
69927: GO 69931
// end ;
69929: GO 69749
69931: POP
69932: POP
// end ;
69933: LD_VAR 0 4
69937: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
69938: LD_INT 0
69940: PPUSH
69941: PPUSH
69942: PPUSH
// if not mc_bases or not side in mc_sides then
69943: LD_EXP 57
69947: NOT
69948: PUSH
69949: LD_VAR 0 3
69953: PUSH
69954: LD_EXP 83
69958: IN
69959: NOT
69960: OR
69961: IFFALSE 69965
// exit ;
69963: GO 70088
// for i = 1 to mc_vehicles do
69965: LD_ADDR_VAR 0 6
69969: PUSH
69970: DOUBLE
69971: LD_INT 1
69973: DEC
69974: ST_TO_ADDR
69975: LD_EXP 76
69979: PUSH
69980: FOR_TO
69981: IFFALSE 70086
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
69983: LD_VAR 0 2
69987: PUSH
69988: LD_EXP 76
69992: PUSH
69993: LD_VAR 0 6
69997: ARRAY
69998: IN
69999: PUSH
70000: LD_VAR 0 1
70004: PUSH
70005: LD_EXP 76
70009: PUSH
70010: LD_VAR 0 6
70014: ARRAY
70015: IN
70016: OR
70017: IFFALSE 70084
// begin tmp := mc_vehicles [ i ] diff old ;
70019: LD_ADDR_VAR 0 7
70023: PUSH
70024: LD_EXP 76
70028: PUSH
70029: LD_VAR 0 6
70033: ARRAY
70034: PUSH
70035: LD_VAR 0 2
70039: DIFF
70040: ST_TO_ADDR
// tmp := tmp diff new ;
70041: LD_ADDR_VAR 0 7
70045: PUSH
70046: LD_VAR 0 7
70050: PUSH
70051: LD_VAR 0 1
70055: DIFF
70056: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
70057: LD_ADDR_EXP 76
70061: PUSH
70062: LD_EXP 76
70066: PPUSH
70067: LD_VAR 0 6
70071: PPUSH
70072: LD_VAR 0 7
70076: PPUSH
70077: CALL_OW 1
70081: ST_TO_ADDR
// break ;
70082: GO 70086
// end ;
70084: GO 69980
70086: POP
70087: POP
// end ;
70088: LD_VAR 0 5
70092: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
70093: LD_INT 0
70095: PPUSH
70096: PPUSH
70097: PPUSH
70098: PPUSH
// if not mc_bases then
70099: LD_EXP 57
70103: NOT
70104: IFFALSE 70108
// exit ;
70106: GO 70400
// side := GetSide ( vehicle ) ;
70108: LD_ADDR_VAR 0 5
70112: PUSH
70113: LD_VAR 0 1
70117: PPUSH
70118: CALL_OW 255
70122: ST_TO_ADDR
// for i = 1 to mc_bases do
70123: LD_ADDR_VAR 0 4
70127: PUSH
70128: DOUBLE
70129: LD_INT 1
70131: DEC
70132: ST_TO_ADDR
70133: LD_EXP 57
70137: PUSH
70138: FOR_TO
70139: IFFALSE 70398
// begin if factory in mc_bases [ i ] then
70141: LD_VAR 0 2
70145: PUSH
70146: LD_EXP 57
70150: PUSH
70151: LD_VAR 0 4
70155: ARRAY
70156: IN
70157: IFFALSE 70396
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
70159: LD_EXP 79
70163: PUSH
70164: LD_VAR 0 4
70168: ARRAY
70169: PUSH
70170: LD_EXP 68
70174: PUSH
70175: LD_VAR 0 4
70179: ARRAY
70180: LESS
70181: IFFALSE 70352
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
70183: LD_ADDR_EXP 79
70187: PUSH
70188: LD_EXP 79
70192: PPUSH
70193: LD_VAR 0 4
70197: PPUSH
70198: LD_EXP 79
70202: PUSH
70203: LD_VAR 0 4
70207: ARRAY
70208: PUSH
70209: LD_VAR 0 1
70213: ADD
70214: PPUSH
70215: CALL_OW 1
70219: ST_TO_ADDR
// if not mc_scan [ i ] then
70220: LD_EXP 80
70224: PUSH
70225: LD_VAR 0 4
70229: ARRAY
70230: NOT
70231: IFFALSE 70350
// begin if GetControl ( vehicle ) = control_remote then
70233: LD_VAR 0 1
70237: PPUSH
70238: CALL_OW 263
70242: PUSH
70243: LD_INT 2
70245: EQUAL
70246: IFFALSE 70266
// repeat wait ( 0 0$1 ) ;
70248: LD_INT 35
70250: PPUSH
70251: CALL_OW 67
// until IsControledBy ( vehicle ) ;
70255: LD_VAR 0 1
70259: PPUSH
70260: CALL_OW 312
70264: IFFALSE 70248
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
70266: LD_VAR 0 1
70270: PPUSH
70271: LD_EXP 81
70275: PUSH
70276: LD_VAR 0 4
70280: ARRAY
70281: PPUSH
70282: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
70286: LD_VAR 0 1
70290: PPUSH
70291: CALL_OW 263
70295: PUSH
70296: LD_INT 1
70298: NONEQUAL
70299: IFFALSE 70303
// break ;
70301: GO 70398
// repeat wait ( 0 0$1 ) ;
70303: LD_INT 35
70305: PPUSH
70306: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
70310: LD_VAR 0 1
70314: PPUSH
70315: LD_EXP 81
70319: PUSH
70320: LD_VAR 0 4
70324: ARRAY
70325: PPUSH
70326: CALL_OW 308
70330: IFFALSE 70303
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
70332: LD_VAR 0 1
70336: PPUSH
70337: CALL_OW 311
70341: PPUSH
70342: CALL_OW 121
// exit ;
70346: POP
70347: POP
70348: GO 70400
// end ; end else
70350: GO 70396
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
70352: LD_ADDR_EXP 76
70356: PUSH
70357: LD_EXP 76
70361: PPUSH
70362: LD_VAR 0 4
70366: PUSH
70367: LD_EXP 76
70371: PUSH
70372: LD_VAR 0 4
70376: ARRAY
70377: PUSH
70378: LD_INT 1
70380: PLUS
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PPUSH
70386: LD_VAR 0 1
70390: PPUSH
70391: CALL 20132 0 3
70395: ST_TO_ADDR
// end ; end ;
70396: GO 70138
70398: POP
70399: POP
// end ;
70400: LD_VAR 0 3
70404: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
70405: LD_INT 0
70407: PPUSH
70408: PPUSH
70409: PPUSH
70410: PPUSH
// if not mc_bases then
70411: LD_EXP 57
70415: NOT
70416: IFFALSE 70420
// exit ;
70418: GO 70773
// repeat wait ( 0 0$1 ) ;
70420: LD_INT 35
70422: PPUSH
70423: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
70427: LD_VAR 0 2
70431: PPUSH
70432: LD_VAR 0 3
70436: PPUSH
70437: CALL_OW 284
70441: IFFALSE 70420
// if GetResourceTypeXY ( x , y ) = mat_artefact then
70443: LD_VAR 0 2
70447: PPUSH
70448: LD_VAR 0 3
70452: PPUSH
70453: CALL_OW 283
70457: PUSH
70458: LD_INT 4
70460: EQUAL
70461: IFFALSE 70465
// exit ;
70463: GO 70773
// for i = 1 to mc_bases do
70465: LD_ADDR_VAR 0 7
70469: PUSH
70470: DOUBLE
70471: LD_INT 1
70473: DEC
70474: ST_TO_ADDR
70475: LD_EXP 57
70479: PUSH
70480: FOR_TO
70481: IFFALSE 70771
// begin if mc_crates_area [ i ] then
70483: LD_EXP 75
70487: PUSH
70488: LD_VAR 0 7
70492: ARRAY
70493: IFFALSE 70604
// for j in mc_crates_area [ i ] do
70495: LD_ADDR_VAR 0 8
70499: PUSH
70500: LD_EXP 75
70504: PUSH
70505: LD_VAR 0 7
70509: ARRAY
70510: PUSH
70511: FOR_IN
70512: IFFALSE 70602
// if InArea ( x , y , j ) then
70514: LD_VAR 0 2
70518: PPUSH
70519: LD_VAR 0 3
70523: PPUSH
70524: LD_VAR 0 8
70528: PPUSH
70529: CALL_OW 309
70533: IFFALSE 70600
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
70535: LD_ADDR_EXP 73
70539: PUSH
70540: LD_EXP 73
70544: PPUSH
70545: LD_VAR 0 7
70549: PUSH
70550: LD_EXP 73
70554: PUSH
70555: LD_VAR 0 7
70559: ARRAY
70560: PUSH
70561: LD_INT 1
70563: PLUS
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PPUSH
70569: LD_VAR 0 4
70573: PUSH
70574: LD_VAR 0 2
70578: PUSH
70579: LD_VAR 0 3
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: LIST
70588: PPUSH
70589: CALL 20132 0 3
70593: ST_TO_ADDR
// exit ;
70594: POP
70595: POP
70596: POP
70597: POP
70598: GO 70773
// end ;
70600: GO 70511
70602: POP
70603: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70604: LD_ADDR_VAR 0 9
70608: PUSH
70609: LD_EXP 57
70613: PUSH
70614: LD_VAR 0 7
70618: ARRAY
70619: PPUSH
70620: LD_INT 2
70622: PUSH
70623: LD_INT 30
70625: PUSH
70626: LD_INT 0
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 30
70635: PUSH
70636: LD_INT 1
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: LIST
70647: PPUSH
70648: CALL_OW 72
70652: ST_TO_ADDR
// if not depot then
70653: LD_VAR 0 9
70657: NOT
70658: IFFALSE 70662
// continue ;
70660: GO 70480
// for j in depot do
70662: LD_ADDR_VAR 0 8
70666: PUSH
70667: LD_VAR 0 9
70671: PUSH
70672: FOR_IN
70673: IFFALSE 70767
// if GetDistUnitXY ( j , x , y ) < 30 then
70675: LD_VAR 0 8
70679: PPUSH
70680: LD_VAR 0 2
70684: PPUSH
70685: LD_VAR 0 3
70689: PPUSH
70690: CALL_OW 297
70694: PUSH
70695: LD_INT 30
70697: LESS
70698: IFFALSE 70765
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
70700: LD_ADDR_EXP 73
70704: PUSH
70705: LD_EXP 73
70709: PPUSH
70710: LD_VAR 0 7
70714: PUSH
70715: LD_EXP 73
70719: PUSH
70720: LD_VAR 0 7
70724: ARRAY
70725: PUSH
70726: LD_INT 1
70728: PLUS
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PPUSH
70734: LD_VAR 0 4
70738: PUSH
70739: LD_VAR 0 2
70743: PUSH
70744: LD_VAR 0 3
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: LIST
70753: PPUSH
70754: CALL 20132 0 3
70758: ST_TO_ADDR
// exit ;
70759: POP
70760: POP
70761: POP
70762: POP
70763: GO 70773
// end ;
70765: GO 70672
70767: POP
70768: POP
// end ;
70769: GO 70480
70771: POP
70772: POP
// end ;
70773: LD_VAR 0 6
70777: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
70778: LD_INT 0
70780: PPUSH
70781: PPUSH
70782: PPUSH
70783: PPUSH
// side := GetSide ( lab ) ;
70784: LD_ADDR_VAR 0 4
70788: PUSH
70789: LD_VAR 0 2
70793: PPUSH
70794: CALL_OW 255
70798: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
70799: LD_VAR 0 4
70803: PUSH
70804: LD_EXP 83
70808: IN
70809: NOT
70810: PUSH
70811: LD_EXP 84
70815: NOT
70816: OR
70817: PUSH
70818: LD_EXP 57
70822: NOT
70823: OR
70824: IFFALSE 70828
// exit ;
70826: GO 71061
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
70828: LD_ADDR_EXP 84
70832: PUSH
70833: LD_EXP 84
70837: PPUSH
70838: LD_VAR 0 4
70842: PPUSH
70843: LD_EXP 84
70847: PUSH
70848: LD_VAR 0 4
70852: ARRAY
70853: PUSH
70854: LD_VAR 0 1
70858: DIFF
70859: PPUSH
70860: CALL_OW 1
70864: ST_TO_ADDR
// for i = 1 to mc_bases do
70865: LD_ADDR_VAR 0 5
70869: PUSH
70870: DOUBLE
70871: LD_INT 1
70873: DEC
70874: ST_TO_ADDR
70875: LD_EXP 57
70879: PUSH
70880: FOR_TO
70881: IFFALSE 71059
// begin if lab in mc_bases [ i ] then
70883: LD_VAR 0 2
70887: PUSH
70888: LD_EXP 57
70892: PUSH
70893: LD_VAR 0 5
70897: ARRAY
70898: IN
70899: IFFALSE 71057
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
70901: LD_VAR 0 1
70905: PUSH
70906: LD_INT 11
70908: PUSH
70909: LD_INT 4
70911: PUSH
70912: LD_INT 3
70914: PUSH
70915: LD_INT 2
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: IN
70924: PUSH
70925: LD_EXP 87
70929: PUSH
70930: LD_VAR 0 5
70934: ARRAY
70935: AND
70936: IFFALSE 71057
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
70938: LD_ADDR_VAR 0 6
70942: PUSH
70943: LD_EXP 87
70947: PUSH
70948: LD_VAR 0 5
70952: ARRAY
70953: PUSH
70954: LD_INT 1
70956: ARRAY
70957: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
70958: LD_ADDR_EXP 87
70962: PUSH
70963: LD_EXP 87
70967: PPUSH
70968: LD_VAR 0 5
70972: PPUSH
70973: EMPTY
70974: PPUSH
70975: CALL_OW 1
70979: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
70980: LD_VAR 0 6
70984: PPUSH
70985: LD_INT 0
70987: PPUSH
70988: CALL_OW 109
// ComExitBuilding ( tmp ) ;
70992: LD_VAR 0 6
70996: PPUSH
70997: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
71001: LD_ADDR_EXP 86
71005: PUSH
71006: LD_EXP 86
71010: PPUSH
71011: LD_VAR 0 5
71015: PPUSH
71016: LD_EXP 86
71020: PUSH
71021: LD_VAR 0 5
71025: ARRAY
71026: PPUSH
71027: LD_INT 1
71029: PPUSH
71030: LD_VAR 0 6
71034: PPUSH
71035: CALL_OW 2
71039: PPUSH
71040: CALL_OW 1
71044: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
71045: LD_VAR 0 5
71049: PPUSH
71050: LD_INT 112
71052: PPUSH
71053: CALL 55000 0 2
// end ; end ; end ;
71057: GO 70880
71059: POP
71060: POP
// end ;
71061: LD_VAR 0 3
71065: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
71066: LD_INT 0
71068: PPUSH
71069: PPUSH
71070: PPUSH
71071: PPUSH
71072: PPUSH
71073: PPUSH
71074: PPUSH
71075: PPUSH
// if not mc_bases then
71076: LD_EXP 57
71080: NOT
71081: IFFALSE 71085
// exit ;
71083: GO 72010
// for i = 1 to mc_bases do
71085: LD_ADDR_VAR 0 3
71089: PUSH
71090: DOUBLE
71091: LD_INT 1
71093: DEC
71094: ST_TO_ADDR
71095: LD_EXP 57
71099: PUSH
71100: FOR_TO
71101: IFFALSE 72008
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
71103: LD_VAR 0 1
71107: PUSH
71108: LD_EXP 57
71112: PUSH
71113: LD_VAR 0 3
71117: ARRAY
71118: IN
71119: PUSH
71120: LD_VAR 0 1
71124: PUSH
71125: LD_EXP 64
71129: PUSH
71130: LD_VAR 0 3
71134: ARRAY
71135: IN
71136: OR
71137: PUSH
71138: LD_VAR 0 1
71142: PUSH
71143: LD_EXP 76
71147: PUSH
71148: LD_VAR 0 3
71152: ARRAY
71153: IN
71154: OR
71155: PUSH
71156: LD_VAR 0 1
71160: PUSH
71161: LD_EXP 86
71165: PUSH
71166: LD_VAR 0 3
71170: ARRAY
71171: IN
71172: OR
71173: PUSH
71174: LD_VAR 0 1
71178: PUSH
71179: LD_EXP 87
71183: PUSH
71184: LD_VAR 0 3
71188: ARRAY
71189: IN
71190: OR
71191: IFFALSE 72006
// begin if un in mc_ape [ i ] then
71193: LD_VAR 0 1
71197: PUSH
71198: LD_EXP 86
71202: PUSH
71203: LD_VAR 0 3
71207: ARRAY
71208: IN
71209: IFFALSE 71248
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
71211: LD_ADDR_EXP 86
71215: PUSH
71216: LD_EXP 86
71220: PPUSH
71221: LD_VAR 0 3
71225: PPUSH
71226: LD_EXP 86
71230: PUSH
71231: LD_VAR 0 3
71235: ARRAY
71236: PUSH
71237: LD_VAR 0 1
71241: DIFF
71242: PPUSH
71243: CALL_OW 1
71247: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
71248: LD_VAR 0 1
71252: PUSH
71253: LD_EXP 87
71257: PUSH
71258: LD_VAR 0 3
71262: ARRAY
71263: IN
71264: IFFALSE 71288
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
71266: LD_ADDR_EXP 87
71270: PUSH
71271: LD_EXP 87
71275: PPUSH
71276: LD_VAR 0 3
71280: PPUSH
71281: EMPTY
71282: PPUSH
71283: CALL_OW 1
71287: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
71288: LD_VAR 0 1
71292: PPUSH
71293: CALL_OW 247
71297: PUSH
71298: LD_INT 2
71300: EQUAL
71301: PUSH
71302: LD_VAR 0 1
71306: PPUSH
71307: CALL_OW 110
71311: PUSH
71312: LD_INT 20
71314: EQUAL
71315: AND
71316: IFFALSE 71419
// begin fac := MC_GetBuilding ( i , b_factory ) ;
71318: LD_ADDR_VAR 0 8
71322: PUSH
71323: LD_VAR 0 3
71327: PPUSH
71328: LD_INT 3
71330: PPUSH
71331: CALL 68532 0 2
71335: ST_TO_ADDR
// if fac then
71336: LD_VAR 0 8
71340: IFFALSE 71419
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
71342: LD_ADDR_VAR 0 9
71346: PUSH
71347: LD_VAR 0 8
71351: PPUSH
71352: LD_VAR 0 1
71356: PPUSH
71357: CALL_OW 265
71361: PPUSH
71362: LD_VAR 0 1
71366: PPUSH
71367: CALL_OW 262
71371: PPUSH
71372: LD_VAR 0 1
71376: PPUSH
71377: CALL_OW 263
71381: PPUSH
71382: LD_VAR 0 1
71386: PPUSH
71387: CALL_OW 264
71391: PPUSH
71392: CALL 17297 0 5
71396: ST_TO_ADDR
// if components then
71397: LD_VAR 0 9
71401: IFFALSE 71417
// MC_InsertProduceList ( i , components ) ;
71403: LD_VAR 0 3
71407: PPUSH
71408: LD_VAR 0 9
71412: PPUSH
71413: CALL 68099 0 2
// break ;
71417: GO 72008
// end ; end ; if GetType ( un ) = unit_building then
71419: LD_VAR 0 1
71423: PPUSH
71424: CALL_OW 247
71428: PUSH
71429: LD_INT 3
71431: EQUAL
71432: IFFALSE 71729
// begin btype := GetBType ( un ) ;
71434: LD_ADDR_VAR 0 5
71438: PUSH
71439: LD_VAR 0 1
71443: PPUSH
71444: CALL_OW 266
71448: ST_TO_ADDR
// if btype = b_warehouse then
71449: LD_VAR 0 5
71453: PUSH
71454: LD_INT 1
71456: EQUAL
71457: IFFALSE 71475
// begin btype := b_depot ;
71459: LD_ADDR_VAR 0 5
71463: PUSH
71464: LD_INT 0
71466: ST_TO_ADDR
// pos := 1 ;
71467: LD_ADDR_VAR 0 6
71471: PUSH
71472: LD_INT 1
71474: ST_TO_ADDR
// end ; if btype = b_factory then
71475: LD_VAR 0 5
71479: PUSH
71480: LD_INT 3
71482: EQUAL
71483: IFFALSE 71501
// begin btype := b_workshop ;
71485: LD_ADDR_VAR 0 5
71489: PUSH
71490: LD_INT 2
71492: ST_TO_ADDR
// pos := 1 ;
71493: LD_ADDR_VAR 0 6
71497: PUSH
71498: LD_INT 1
71500: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
71501: LD_VAR 0 5
71505: PUSH
71506: LD_INT 7
71508: PUSH
71509: LD_INT 8
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: IN
71516: IFFALSE 71526
// btype := b_lab ;
71518: LD_ADDR_VAR 0 5
71522: PUSH
71523: LD_INT 6
71525: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
71526: LD_ADDR_EXP 62
71530: PUSH
71531: LD_EXP 62
71535: PPUSH
71536: LD_VAR 0 3
71540: PUSH
71541: LD_EXP 62
71545: PUSH
71546: LD_VAR 0 3
71550: ARRAY
71551: PUSH
71552: LD_INT 1
71554: PLUS
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PPUSH
71560: LD_VAR 0 5
71564: PUSH
71565: LD_VAR 0 1
71569: PPUSH
71570: CALL_OW 250
71574: PUSH
71575: LD_VAR 0 1
71579: PPUSH
71580: CALL_OW 251
71584: PUSH
71585: LD_VAR 0 1
71589: PPUSH
71590: CALL_OW 254
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: PPUSH
71601: CALL 20132 0 3
71605: ST_TO_ADDR
// if pos = 1 then
71606: LD_VAR 0 6
71610: PUSH
71611: LD_INT 1
71613: EQUAL
71614: IFFALSE 71729
// begin tmp := mc_build_list [ i ] ;
71616: LD_ADDR_VAR 0 7
71620: PUSH
71621: LD_EXP 62
71625: PUSH
71626: LD_VAR 0 3
71630: ARRAY
71631: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
71632: LD_VAR 0 7
71636: PPUSH
71637: LD_INT 2
71639: PUSH
71640: LD_INT 30
71642: PUSH
71643: LD_INT 0
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 30
71652: PUSH
71653: LD_INT 1
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: LIST
71664: PPUSH
71665: CALL_OW 72
71669: IFFALSE 71679
// pos := 2 ;
71671: LD_ADDR_VAR 0 6
71675: PUSH
71676: LD_INT 2
71678: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
71679: LD_ADDR_VAR 0 7
71683: PUSH
71684: LD_VAR 0 7
71688: PPUSH
71689: LD_VAR 0 6
71693: PPUSH
71694: LD_VAR 0 7
71698: PPUSH
71699: CALL 20023 0 3
71703: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
71704: LD_ADDR_EXP 62
71708: PUSH
71709: LD_EXP 62
71713: PPUSH
71714: LD_VAR 0 3
71718: PPUSH
71719: LD_VAR 0 7
71723: PPUSH
71724: CALL_OW 1
71728: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
71729: LD_VAR 0 1
71733: PUSH
71734: LD_EXP 57
71738: PUSH
71739: LD_VAR 0 3
71743: ARRAY
71744: IN
71745: IFFALSE 71784
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
71747: LD_ADDR_EXP 57
71751: PUSH
71752: LD_EXP 57
71756: PPUSH
71757: LD_VAR 0 3
71761: PPUSH
71762: LD_EXP 57
71766: PUSH
71767: LD_VAR 0 3
71771: ARRAY
71772: PUSH
71773: LD_VAR 0 1
71777: DIFF
71778: PPUSH
71779: CALL_OW 1
71783: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
71784: LD_VAR 0 1
71788: PUSH
71789: LD_EXP 64
71793: PUSH
71794: LD_VAR 0 3
71798: ARRAY
71799: IN
71800: IFFALSE 71839
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
71802: LD_ADDR_EXP 64
71806: PUSH
71807: LD_EXP 64
71811: PPUSH
71812: LD_VAR 0 3
71816: PPUSH
71817: LD_EXP 64
71821: PUSH
71822: LD_VAR 0 3
71826: ARRAY
71827: PUSH
71828: LD_VAR 0 1
71832: DIFF
71833: PPUSH
71834: CALL_OW 1
71838: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
71839: LD_VAR 0 1
71843: PUSH
71844: LD_EXP 76
71848: PUSH
71849: LD_VAR 0 3
71853: ARRAY
71854: IN
71855: IFFALSE 71894
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
71857: LD_ADDR_EXP 76
71861: PUSH
71862: LD_EXP 76
71866: PPUSH
71867: LD_VAR 0 3
71871: PPUSH
71872: LD_EXP 76
71876: PUSH
71877: LD_VAR 0 3
71881: ARRAY
71882: PUSH
71883: LD_VAR 0 1
71887: DIFF
71888: PPUSH
71889: CALL_OW 1
71893: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
71894: LD_VAR 0 1
71898: PUSH
71899: LD_EXP 66
71903: PUSH
71904: LD_VAR 0 3
71908: ARRAY
71909: IN
71910: IFFALSE 71949
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
71912: LD_ADDR_EXP 66
71916: PUSH
71917: LD_EXP 66
71921: PPUSH
71922: LD_VAR 0 3
71926: PPUSH
71927: LD_EXP 66
71931: PUSH
71932: LD_VAR 0 3
71936: ARRAY
71937: PUSH
71938: LD_VAR 0 1
71942: DIFF
71943: PPUSH
71944: CALL_OW 1
71948: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
71949: LD_VAR 0 1
71953: PUSH
71954: LD_EXP 65
71958: PUSH
71959: LD_VAR 0 3
71963: ARRAY
71964: IN
71965: IFFALSE 72004
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
71967: LD_ADDR_EXP 65
71971: PUSH
71972: LD_EXP 65
71976: PPUSH
71977: LD_VAR 0 3
71981: PPUSH
71982: LD_EXP 65
71986: PUSH
71987: LD_VAR 0 3
71991: ARRAY
71992: PUSH
71993: LD_VAR 0 1
71997: DIFF
71998: PPUSH
71999: CALL_OW 1
72003: ST_TO_ADDR
// end ; break ;
72004: GO 72008
// end ;
72006: GO 71100
72008: POP
72009: POP
// end ;
72010: LD_VAR 0 2
72014: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
72015: LD_INT 0
72017: PPUSH
72018: PPUSH
72019: PPUSH
// if not mc_bases then
72020: LD_EXP 57
72024: NOT
72025: IFFALSE 72029
// exit ;
72027: GO 72244
// for i = 1 to mc_bases do
72029: LD_ADDR_VAR 0 3
72033: PUSH
72034: DOUBLE
72035: LD_INT 1
72037: DEC
72038: ST_TO_ADDR
72039: LD_EXP 57
72043: PUSH
72044: FOR_TO
72045: IFFALSE 72242
// begin if building in mc_construct_list [ i ] then
72047: LD_VAR 0 1
72051: PUSH
72052: LD_EXP 64
72056: PUSH
72057: LD_VAR 0 3
72061: ARRAY
72062: IN
72063: IFFALSE 72240
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
72065: LD_ADDR_EXP 64
72069: PUSH
72070: LD_EXP 64
72074: PPUSH
72075: LD_VAR 0 3
72079: PPUSH
72080: LD_EXP 64
72084: PUSH
72085: LD_VAR 0 3
72089: ARRAY
72090: PUSH
72091: LD_VAR 0 1
72095: DIFF
72096: PPUSH
72097: CALL_OW 1
72101: ST_TO_ADDR
// if building in mc_lab [ i ] then
72102: LD_VAR 0 1
72106: PUSH
72107: LD_EXP 90
72111: PUSH
72112: LD_VAR 0 3
72116: ARRAY
72117: IN
72118: IFFALSE 72173
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
72120: LD_ADDR_EXP 91
72124: PUSH
72125: LD_EXP 91
72129: PPUSH
72130: LD_VAR 0 3
72134: PPUSH
72135: LD_EXP 91
72139: PUSH
72140: LD_VAR 0 3
72144: ARRAY
72145: PPUSH
72146: LD_INT 1
72148: PPUSH
72149: LD_EXP 91
72153: PUSH
72154: LD_VAR 0 3
72158: ARRAY
72159: PPUSH
72160: LD_INT 0
72162: PPUSH
72163: CALL 19115 0 4
72167: PPUSH
72168: CALL_OW 1
72172: ST_TO_ADDR
// if not building in mc_bases [ i ] then
72173: LD_VAR 0 1
72177: PUSH
72178: LD_EXP 57
72182: PUSH
72183: LD_VAR 0 3
72187: ARRAY
72188: IN
72189: NOT
72190: IFFALSE 72236
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
72192: LD_ADDR_EXP 57
72196: PUSH
72197: LD_EXP 57
72201: PPUSH
72202: LD_VAR 0 3
72206: PUSH
72207: LD_EXP 57
72211: PUSH
72212: LD_VAR 0 3
72216: ARRAY
72217: PUSH
72218: LD_INT 1
72220: PLUS
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PPUSH
72226: LD_VAR 0 1
72230: PPUSH
72231: CALL 20132 0 3
72235: ST_TO_ADDR
// exit ;
72236: POP
72237: POP
72238: GO 72244
// end ; end ;
72240: GO 72044
72242: POP
72243: POP
// end ;
72244: LD_VAR 0 2
72248: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
72249: LD_INT 0
72251: PPUSH
72252: PPUSH
72253: PPUSH
72254: PPUSH
72255: PPUSH
72256: PPUSH
72257: PPUSH
// if not mc_bases then
72258: LD_EXP 57
72262: NOT
72263: IFFALSE 72267
// exit ;
72265: GO 72928
// for i = 1 to mc_bases do
72267: LD_ADDR_VAR 0 3
72271: PUSH
72272: DOUBLE
72273: LD_INT 1
72275: DEC
72276: ST_TO_ADDR
72277: LD_EXP 57
72281: PUSH
72282: FOR_TO
72283: IFFALSE 72926
// begin if building in mc_construct_list [ i ] then
72285: LD_VAR 0 1
72289: PUSH
72290: LD_EXP 64
72294: PUSH
72295: LD_VAR 0 3
72299: ARRAY
72300: IN
72301: IFFALSE 72924
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
72303: LD_ADDR_EXP 64
72307: PUSH
72308: LD_EXP 64
72312: PPUSH
72313: LD_VAR 0 3
72317: PPUSH
72318: LD_EXP 64
72322: PUSH
72323: LD_VAR 0 3
72327: ARRAY
72328: PUSH
72329: LD_VAR 0 1
72333: DIFF
72334: PPUSH
72335: CALL_OW 1
72339: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
72340: LD_ADDR_EXP 57
72344: PUSH
72345: LD_EXP 57
72349: PPUSH
72350: LD_VAR 0 3
72354: PUSH
72355: LD_EXP 57
72359: PUSH
72360: LD_VAR 0 3
72364: ARRAY
72365: PUSH
72366: LD_INT 1
72368: PLUS
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PPUSH
72374: LD_VAR 0 1
72378: PPUSH
72379: CALL 20132 0 3
72383: ST_TO_ADDR
// btype := GetBType ( building ) ;
72384: LD_ADDR_VAR 0 5
72388: PUSH
72389: LD_VAR 0 1
72393: PPUSH
72394: CALL_OW 266
72398: ST_TO_ADDR
// side := GetSide ( building ) ;
72399: LD_ADDR_VAR 0 8
72403: PUSH
72404: LD_VAR 0 1
72408: PPUSH
72409: CALL_OW 255
72413: ST_TO_ADDR
// if btype = b_lab then
72414: LD_VAR 0 5
72418: PUSH
72419: LD_INT 6
72421: EQUAL
72422: IFFALSE 72472
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
72424: LD_ADDR_EXP 90
72428: PUSH
72429: LD_EXP 90
72433: PPUSH
72434: LD_VAR 0 3
72438: PUSH
72439: LD_EXP 90
72443: PUSH
72444: LD_VAR 0 3
72448: ARRAY
72449: PUSH
72450: LD_INT 1
72452: PLUS
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PPUSH
72458: LD_VAR 0 1
72462: PPUSH
72463: CALL 20132 0 3
72467: ST_TO_ADDR
// exit ;
72468: POP
72469: POP
72470: GO 72928
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
72472: LD_VAR 0 5
72476: PUSH
72477: LD_INT 0
72479: PUSH
72480: LD_INT 2
72482: PUSH
72483: LD_INT 4
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: LIST
72490: IN
72491: IFFALSE 72615
// begin if btype = b_armoury then
72493: LD_VAR 0 5
72497: PUSH
72498: LD_INT 4
72500: EQUAL
72501: IFFALSE 72511
// btype := b_barracks ;
72503: LD_ADDR_VAR 0 5
72507: PUSH
72508: LD_INT 5
72510: ST_TO_ADDR
// if btype = b_depot then
72511: LD_VAR 0 5
72515: PUSH
72516: LD_INT 0
72518: EQUAL
72519: IFFALSE 72529
// btype := b_warehouse ;
72521: LD_ADDR_VAR 0 5
72525: PUSH
72526: LD_INT 1
72528: ST_TO_ADDR
// if btype = b_workshop then
72529: LD_VAR 0 5
72533: PUSH
72534: LD_INT 2
72536: EQUAL
72537: IFFALSE 72547
// btype := b_factory ;
72539: LD_ADDR_VAR 0 5
72543: PUSH
72544: LD_INT 3
72546: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
72547: LD_VAR 0 5
72551: PPUSH
72552: LD_VAR 0 8
72556: PPUSH
72557: CALL_OW 323
72561: PUSH
72562: LD_INT 1
72564: EQUAL
72565: IFFALSE 72611
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
72567: LD_ADDR_EXP 89
72571: PUSH
72572: LD_EXP 89
72576: PPUSH
72577: LD_VAR 0 3
72581: PUSH
72582: LD_EXP 89
72586: PUSH
72587: LD_VAR 0 3
72591: ARRAY
72592: PUSH
72593: LD_INT 1
72595: PLUS
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: PPUSH
72601: LD_VAR 0 1
72605: PPUSH
72606: CALL 20132 0 3
72610: ST_TO_ADDR
// exit ;
72611: POP
72612: POP
72613: GO 72928
// end ; if btype in [ b_bunker , b_turret ] then
72615: LD_VAR 0 5
72619: PUSH
72620: LD_INT 32
72622: PUSH
72623: LD_INT 33
72625: PUSH
72626: EMPTY
72627: LIST
72628: LIST
72629: IN
72630: IFFALSE 72920
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
72632: LD_ADDR_EXP 65
72636: PUSH
72637: LD_EXP 65
72641: PPUSH
72642: LD_VAR 0 3
72646: PUSH
72647: LD_EXP 65
72651: PUSH
72652: LD_VAR 0 3
72656: ARRAY
72657: PUSH
72658: LD_INT 1
72660: PLUS
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PPUSH
72666: LD_VAR 0 1
72670: PPUSH
72671: CALL 20132 0 3
72675: ST_TO_ADDR
// if btype = b_bunker then
72676: LD_VAR 0 5
72680: PUSH
72681: LD_INT 32
72683: EQUAL
72684: IFFALSE 72920
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
72686: LD_ADDR_EXP 66
72690: PUSH
72691: LD_EXP 66
72695: PPUSH
72696: LD_VAR 0 3
72700: PUSH
72701: LD_EXP 66
72705: PUSH
72706: LD_VAR 0 3
72710: ARRAY
72711: PUSH
72712: LD_INT 1
72714: PLUS
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: PPUSH
72720: LD_VAR 0 1
72724: PPUSH
72725: CALL 20132 0 3
72729: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
72730: LD_ADDR_VAR 0 6
72734: PUSH
72735: LD_EXP 57
72739: PUSH
72740: LD_VAR 0 3
72744: ARRAY
72745: PPUSH
72746: LD_INT 25
72748: PUSH
72749: LD_INT 1
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 3
72758: PUSH
72759: LD_INT 54
72761: PUSH
72762: EMPTY
72763: LIST
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: PPUSH
72773: CALL_OW 72
72777: ST_TO_ADDR
// if tmp then
72778: LD_VAR 0 6
72782: IFFALSE 72788
// exit ;
72784: POP
72785: POP
72786: GO 72928
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
72788: LD_ADDR_VAR 0 6
72792: PUSH
72793: LD_EXP 57
72797: PUSH
72798: LD_VAR 0 3
72802: ARRAY
72803: PPUSH
72804: LD_INT 2
72806: PUSH
72807: LD_INT 30
72809: PUSH
72810: LD_INT 4
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: PUSH
72817: LD_INT 30
72819: PUSH
72820: LD_INT 5
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: LIST
72831: PPUSH
72832: CALL_OW 72
72836: ST_TO_ADDR
// if not tmp then
72837: LD_VAR 0 6
72841: NOT
72842: IFFALSE 72848
// exit ;
72844: POP
72845: POP
72846: GO 72928
// for j in tmp do
72848: LD_ADDR_VAR 0 4
72852: PUSH
72853: LD_VAR 0 6
72857: PUSH
72858: FOR_IN
72859: IFFALSE 72918
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
72861: LD_ADDR_VAR 0 7
72865: PUSH
72866: LD_VAR 0 4
72870: PPUSH
72871: CALL_OW 313
72875: PPUSH
72876: LD_INT 25
72878: PUSH
72879: LD_INT 1
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PPUSH
72886: CALL_OW 72
72890: ST_TO_ADDR
// if units then
72891: LD_VAR 0 7
72895: IFFALSE 72916
// begin ComExitBuilding ( units [ 1 ] ) ;
72897: LD_VAR 0 7
72901: PUSH
72902: LD_INT 1
72904: ARRAY
72905: PPUSH
72906: CALL_OW 122
// exit ;
72910: POP
72911: POP
72912: POP
72913: POP
72914: GO 72928
// end ; end ;
72916: GO 72858
72918: POP
72919: POP
// end ; end ; exit ;
72920: POP
72921: POP
72922: GO 72928
// end ; end ;
72924: GO 72282
72926: POP
72927: POP
// end ;
72928: LD_VAR 0 2
72932: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
72933: LD_INT 0
72935: PPUSH
72936: PPUSH
72937: PPUSH
72938: PPUSH
72939: PPUSH
72940: PPUSH
72941: PPUSH
// if not mc_bases then
72942: LD_EXP 57
72946: NOT
72947: IFFALSE 72951
// exit ;
72949: GO 73182
// btype := GetBType ( building ) ;
72951: LD_ADDR_VAR 0 6
72955: PUSH
72956: LD_VAR 0 1
72960: PPUSH
72961: CALL_OW 266
72965: ST_TO_ADDR
// x := GetX ( building ) ;
72966: LD_ADDR_VAR 0 7
72970: PUSH
72971: LD_VAR 0 1
72975: PPUSH
72976: CALL_OW 250
72980: ST_TO_ADDR
// y := GetY ( building ) ;
72981: LD_ADDR_VAR 0 8
72985: PUSH
72986: LD_VAR 0 1
72990: PPUSH
72991: CALL_OW 251
72995: ST_TO_ADDR
// d := GetDir ( building ) ;
72996: LD_ADDR_VAR 0 9
73000: PUSH
73001: LD_VAR 0 1
73005: PPUSH
73006: CALL_OW 254
73010: ST_TO_ADDR
// for i = 1 to mc_bases do
73011: LD_ADDR_VAR 0 4
73015: PUSH
73016: DOUBLE
73017: LD_INT 1
73019: DEC
73020: ST_TO_ADDR
73021: LD_EXP 57
73025: PUSH
73026: FOR_TO
73027: IFFALSE 73180
// begin if not mc_build_list [ i ] then
73029: LD_EXP 62
73033: PUSH
73034: LD_VAR 0 4
73038: ARRAY
73039: NOT
73040: IFFALSE 73044
// continue ;
73042: GO 73026
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
73044: LD_VAR 0 6
73048: PUSH
73049: LD_VAR 0 7
73053: PUSH
73054: LD_VAR 0 8
73058: PUSH
73059: LD_VAR 0 9
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: LIST
73068: LIST
73069: PPUSH
73070: LD_EXP 62
73074: PUSH
73075: LD_VAR 0 4
73079: ARRAY
73080: PUSH
73081: LD_INT 1
73083: ARRAY
73084: PPUSH
73085: CALL 25619 0 2
73089: IFFALSE 73178
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
73091: LD_ADDR_EXP 62
73095: PUSH
73096: LD_EXP 62
73100: PPUSH
73101: LD_VAR 0 4
73105: PPUSH
73106: LD_EXP 62
73110: PUSH
73111: LD_VAR 0 4
73115: ARRAY
73116: PPUSH
73117: LD_INT 1
73119: PPUSH
73120: CALL_OW 3
73124: PPUSH
73125: CALL_OW 1
73129: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
73130: LD_ADDR_EXP 64
73134: PUSH
73135: LD_EXP 64
73139: PPUSH
73140: LD_VAR 0 4
73144: PUSH
73145: LD_EXP 64
73149: PUSH
73150: LD_VAR 0 4
73154: ARRAY
73155: PUSH
73156: LD_INT 1
73158: PLUS
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: PPUSH
73164: LD_VAR 0 1
73168: PPUSH
73169: CALL 20132 0 3
73173: ST_TO_ADDR
// exit ;
73174: POP
73175: POP
73176: GO 73182
// end ; end ;
73178: GO 73026
73180: POP
73181: POP
// end ;
73182: LD_VAR 0 3
73186: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
73187: LD_INT 0
73189: PPUSH
73190: PPUSH
73191: PPUSH
// if not mc_bases then
73192: LD_EXP 57
73196: NOT
73197: IFFALSE 73201
// exit ;
73199: GO 73391
// for i = 1 to mc_bases do
73201: LD_ADDR_VAR 0 4
73205: PUSH
73206: DOUBLE
73207: LD_INT 1
73209: DEC
73210: ST_TO_ADDR
73211: LD_EXP 57
73215: PUSH
73216: FOR_TO
73217: IFFALSE 73304
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
73219: LD_VAR 0 1
73223: PUSH
73224: LD_EXP 65
73228: PUSH
73229: LD_VAR 0 4
73233: ARRAY
73234: IN
73235: PUSH
73236: LD_VAR 0 1
73240: PUSH
73241: LD_EXP 66
73245: PUSH
73246: LD_VAR 0 4
73250: ARRAY
73251: IN
73252: NOT
73253: AND
73254: IFFALSE 73302
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
73256: LD_ADDR_EXP 66
73260: PUSH
73261: LD_EXP 66
73265: PPUSH
73266: LD_VAR 0 4
73270: PUSH
73271: LD_EXP 66
73275: PUSH
73276: LD_VAR 0 4
73280: ARRAY
73281: PUSH
73282: LD_INT 1
73284: PLUS
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: PPUSH
73290: LD_VAR 0 1
73294: PPUSH
73295: CALL 20132 0 3
73299: ST_TO_ADDR
// break ;
73300: GO 73304
// end ; end ;
73302: GO 73216
73304: POP
73305: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
73306: LD_VAR 0 1
73310: PPUSH
73311: CALL_OW 257
73315: PUSH
73316: LD_EXP 83
73320: IN
73321: PUSH
73322: LD_VAR 0 1
73326: PPUSH
73327: CALL_OW 266
73331: PUSH
73332: LD_INT 5
73334: EQUAL
73335: AND
73336: PUSH
73337: LD_VAR 0 2
73341: PPUSH
73342: CALL_OW 110
73346: PUSH
73347: LD_INT 18
73349: NONEQUAL
73350: AND
73351: IFFALSE 73391
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
73353: LD_VAR 0 2
73357: PPUSH
73358: CALL_OW 257
73362: PUSH
73363: LD_INT 5
73365: PUSH
73366: LD_INT 8
73368: PUSH
73369: LD_INT 9
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: LIST
73376: IN
73377: IFFALSE 73391
// SetClass ( unit , 1 ) ;
73379: LD_VAR 0 2
73383: PPUSH
73384: LD_INT 1
73386: PPUSH
73387: CALL_OW 336
// end ;
73391: LD_VAR 0 3
73395: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
73396: LD_INT 0
73398: PPUSH
73399: PPUSH
// if not mc_bases then
73400: LD_EXP 57
73404: NOT
73405: IFFALSE 73409
// exit ;
73407: GO 73525
// if GetLives ( abandoned_vehicle ) > 250 then
73409: LD_VAR 0 2
73413: PPUSH
73414: CALL_OW 256
73418: PUSH
73419: LD_INT 250
73421: GREATER
73422: IFFALSE 73426
// exit ;
73424: GO 73525
// for i = 1 to mc_bases do
73426: LD_ADDR_VAR 0 6
73430: PUSH
73431: DOUBLE
73432: LD_INT 1
73434: DEC
73435: ST_TO_ADDR
73436: LD_EXP 57
73440: PUSH
73441: FOR_TO
73442: IFFALSE 73523
// begin if driver in mc_bases [ i ] then
73444: LD_VAR 0 1
73448: PUSH
73449: LD_EXP 57
73453: PUSH
73454: LD_VAR 0 6
73458: ARRAY
73459: IN
73460: IFFALSE 73521
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
73462: LD_VAR 0 1
73466: PPUSH
73467: LD_EXP 57
73471: PUSH
73472: LD_VAR 0 6
73476: ARRAY
73477: PPUSH
73478: LD_INT 2
73480: PUSH
73481: LD_INT 30
73483: PUSH
73484: LD_INT 0
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: PUSH
73491: LD_INT 30
73493: PUSH
73494: LD_INT 1
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: PUSH
73501: EMPTY
73502: LIST
73503: LIST
73504: LIST
73505: PPUSH
73506: CALL_OW 72
73510: PUSH
73511: LD_INT 1
73513: ARRAY
73514: PPUSH
73515: CALL_OW 112
// break ;
73519: GO 73523
// end ; end ;
73521: GO 73441
73523: POP
73524: POP
// end ;
73525: LD_VAR 0 5
73529: RET
