// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitVariables ;
   8: CALL 587 0 0
// InitMacro ;
  12: CALL 46650 0 0
// PrepareNature ( 3 , 3 , 3 , 4 , 3 , 0 , 0 , nature_area , 0 ) ;
  16: LD_INT 3
  18: PPUSH
  19: LD_INT 3
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 4
  27: PPUSH
  28: LD_INT 3
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: LD_INT 5
  39: PPUSH
  40: LD_INT 0
  42: PPUSH
  43: CALL 42525 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_russian , 0 ) ;
  47: LD_INT 0
  49: PPUSH
  50: LD_INT 0
  52: PPUSH
  53: LD_INT 5
  55: PPUSH
  56: LD_INT 0
  58: PPUSH
  59: LD_INT 0
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: LD_INT 0
  67: PPUSH
  68: LD_INT 8
  70: PPUSH
  71: LD_INT 0
  73: PPUSH
  74: CALL 42525 0 9
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 1 , 0 , area_apeman_arabian , 0 ) ;
  78: LD_INT 0
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 6
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: LD_INT 0
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: LD_INT 6
 101: PPUSH
 102: LD_INT 0
 104: PPUSH
 105: CALL 42525 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_alliance , 0 ) ;
 109: LD_INT 0
 111: PPUSH
 112: LD_INT 0
 114: PPUSH
 115: LD_INT 5
 117: PPUSH
 118: LD_INT 0
 120: PPUSH
 121: LD_INT 0
 123: PPUSH
 124: LD_INT 0
 126: PPUSH
 127: LD_INT 0
 129: PPUSH
 130: LD_INT 12
 132: PPUSH
 133: LD_INT 0
 135: PPUSH
 136: CALL 42525 0 9
// PrepareArabian ;
 140: CALL 3442 0 0
// PrepareRussian ;
 144: CALL 2517 0 0
// PrepareAlliance ;
 148: CALL 681 0 0
// MC_Start ( ) ;
 152: CALL 46863 0 0
// if debug then
 156: LD_EXP 1
 160: IFFALSE 169
// FogOff ( 1 ) ;
 162: LD_INT 1
 164: PPUSH
 165: CALL_OW 344
// Action ;
 169: CALL 4054 0 0
// end ;
 173: END
// export function CustomInitMacro ; var i ; begin
 174: LD_INT 0
 176: PPUSH
 177: PPUSH
// mc_parking := [ parking_arabian , parking_russian ] ;
 178: LD_ADDR_EXP 79
 182: PUSH
 183: LD_INT 1
 185: PUSH
 186: LD_INT 2
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: ST_TO_ADDR
// mc_scan_area := [ area_base_arabian , area_base_russian ] ;
 193: LD_ADDR_EXP 80
 197: PUSH
 198: LD_INT 3
 200: PUSH
 201: LD_INT 4
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 12 , 15 , 18 ] [ Difficulty ] , minefield ) ;
 208: LD_INT 1
 210: PPUSH
 211: LD_INT 12
 213: PUSH
 214: LD_INT 15
 216: PUSH
 217: LD_INT 18
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: PUSH
 225: LD_OWVAR 67
 229: ARRAY
 230: PPUSH
 231: LD_INT 7
 233: PPUSH
 234: CALL 59693 0 3
// MC_SetDefenderList ( 1 , arabian_guard ) ;
 238: LD_INT 1
 240: PPUSH
 241: LD_EXP 51
 245: PPUSH
 246: CALL 60062 0 2
// MC_SetTame ( 1 , area_apeman_arabian ) ;
 250: LD_INT 1
 252: PPUSH
 253: LD_INT 6
 255: PPUSH
 256: CALL 60419 0 2
// MC_SetCratesArea ( 1 , [ area_collect_arabian ] ) ;
 260: LD_INT 1
 262: PPUSH
 263: LD_INT 9
 265: PUSH
 266: EMPTY
 267: LIST
 268: PPUSH
 269: CALL 60561 0 2
// MC_InsertProduceList ( 1 , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 13
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: LD_INT 2
 284: PUSH
 285: LD_INT 32
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL 59999 0 2
// MC_SetLabKind ( 2 , [ b_lab_computer , b_lab_spacetime , b_lab_weapon , b_lab_siberium ] ) ;
 298: LD_INT 2
 300: PPUSH
 301: LD_INT 12
 303: PUSH
 304: LD_INT 14
 306: PUSH
 307: LD_INT 10
 309: PUSH
 310: LD_INT 11
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: PPUSH
 319: CALL 60468 0 2
// MC_SetDefenderList ( 2 , russian_guard ) ;
 323: LD_INT 2
 325: PPUSH
 326: LD_EXP 48
 330: PPUSH
 331: CALL 60062 0 2
// MC_SetTame ( 2 , area_apeman_russian ) ;
 335: LD_INT 2
 337: PPUSH
 338: LD_INT 8
 340: PPUSH
 341: CALL 60419 0 2
// MC_SetCratesArea ( 2 , [ area_collect_russian ] ) ;
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 10
 350: PUSH
 351: EMPTY
 352: LIST
 353: PPUSH
 354: CALL 60561 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 71 , 116 , 4 ] , [ b_armoury , 85 , 116 , 4 ] , [ b_bunker , 83 , 111 , 4 ] , [ b_bunker , 87 , 121 , 4 ] , [ b_turret , 88 , 128 , 4 ] , [ b_bunker , 59 , 89 , 3 ] , [ b_turret , 69 , 98 , 3 ] , [ b_turret , 77 , 103 , 3 ] , [ b_turret , 83 , 105 , 3 ] , [ b_turret , 71 , 125 , 5 ] ] ) ;
 358: LD_INT 2
 360: PPUSH
 361: LD_INT 6
 363: PUSH
 364: LD_INT 71
 366: PUSH
 367: LD_INT 116
 369: PUSH
 370: LD_INT 4
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_INT 4
 381: PUSH
 382: LD_INT 85
 384: PUSH
 385: LD_INT 116
 387: PUSH
 388: LD_INT 4
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 32
 399: PUSH
 400: LD_INT 83
 402: PUSH
 403: LD_INT 111
 405: PUSH
 406: LD_INT 4
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 32
 417: PUSH
 418: LD_INT 87
 420: PUSH
 421: LD_INT 121
 423: PUSH
 424: LD_INT 4
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 33
 435: PUSH
 436: LD_INT 88
 438: PUSH
 439: LD_INT 128
 441: PUSH
 442: LD_INT 4
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 32
 453: PUSH
 454: LD_INT 59
 456: PUSH
 457: LD_INT 89
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 33
 471: PUSH
 472: LD_INT 69
 474: PUSH
 475: LD_INT 98
 477: PUSH
 478: LD_INT 3
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 33
 489: PUSH
 490: LD_INT 77
 492: PUSH
 493: LD_INT 103
 495: PUSH
 496: LD_INT 3
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_INT 33
 507: PUSH
 508: LD_INT 83
 510: PUSH
 511: LD_INT 105
 513: PUSH
 514: LD_INT 3
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 33
 525: PUSH
 526: LD_INT 71
 528: PUSH
 529: LD_INT 125
 531: PUSH
 532: LD_INT 5
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL 59903 0 2
// MC_InsertProduceList ( 2 , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ) ;
 557: LD_INT 2
 559: PPUSH
 560: LD_INT 21
 562: PUSH
 563: LD_INT 1
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 51
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL 59999 0 2
// end ;
 582: LD_VAR 0 1
 586: RET
// export debug , game , freedom , gossudarov_arrive , ru_lab_builded , player_spotted , first_attack , ar_base_spotted , ar_active_attack , ar_attackers , first_powell_attack ; function InitVariables ; begin
 587: LD_INT 0
 589: PPUSH
// debug := true ;
 590: LD_ADDR_EXP 1
 594: PUSH
 595: LD_INT 1
 597: ST_TO_ADDR
// game := true ;
 598: LD_ADDR_EXP 2
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// gossudarov_arrive := false ;
 606: LD_ADDR_EXP 4
 610: PUSH
 611: LD_INT 0
 613: ST_TO_ADDR
// ru_lab_builded := false ;
 614: LD_ADDR_EXP 5
 618: PUSH
 619: LD_INT 0
 621: ST_TO_ADDR
// player_spotted := false ;
 622: LD_ADDR_EXP 6
 626: PUSH
 627: LD_INT 0
 629: ST_TO_ADDR
// first_attack := false ;
 630: LD_ADDR_EXP 7
 634: PUSH
 635: LD_INT 0
 637: ST_TO_ADDR
// ru_attackers := [ ] ;
 638: LD_ADDR_EXP 49
 642: PUSH
 643: EMPTY
 644: ST_TO_ADDR
// ar_base_spotted := false ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_INT 0
 652: ST_TO_ADDR
// ar_active_attack := false ;
 653: LD_ADDR_EXP 9
 657: PUSH
 658: LD_INT 0
 660: ST_TO_ADDR
// ar_attackers := [ ] ;
 661: LD_ADDR_EXP 10
 665: PUSH
 666: EMPTY
 667: ST_TO_ADDR
// first_powell_attack := false ;
 668: LD_ADDR_EXP 11
 672: PUSH
 673: LD_INT 0
 675: ST_TO_ADDR
// end ; end_of_file
 676: LD_VAR 0 1
 680: RET
// export JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export Gossudarov , Kirilenkova , Titov , Fadeev , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov ; export Burlak , Belkov , Gnyevko ; export Masha ; export function PrepareAlliance ; var veh , i , tmp ; begin
 681: LD_INT 0
 683: PPUSH
 684: PPUSH
 685: PPUSH
 686: PPUSH
// uc_side := 7 ;
 687: LD_ADDR_OWVAR 20
 691: PUSH
 692: LD_INT 7
 694: ST_TO_ADDR
// uc_nation := 1 ;
 695: LD_ADDR_OWVAR 21
 699: PUSH
 700: LD_INT 1
 702: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 12a_ ) ;
 703: LD_ADDR_EXP 12
 707: PUSH
 708: LD_STRING JMM
 710: PPUSH
 711: LD_EXP 1
 715: NOT
 716: PPUSH
 717: LD_STRING 12a_
 719: PPUSH
 720: CALL 9260 0 3
 724: ST_TO_ADDR
// PlaceUnitXY ( JMM , 71 , 23 , false ) ;
 725: LD_EXP 12
 729: PPUSH
 730: LD_INT 71
 732: PPUSH
 733: LD_INT 23
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL_OW 48
// SetClass ( JMM , 2 ) ;
 743: LD_EXP 12
 747: PPUSH
 748: LD_INT 2
 750: PPUSH
 751: CALL_OW 336
// Roth := PrepareUnit ( Roth , ( not debug ) , 12a_ ) ;
 755: LD_ADDR_EXP 13
 759: PUSH
 760: LD_STRING Roth
 762: PPUSH
 763: LD_EXP 1
 767: NOT
 768: PPUSH
 769: LD_STRING 12a_
 771: PPUSH
 772: CALL 9260 0 3
 776: ST_TO_ADDR
// if Roth then
 777: LD_EXP 13
 781: IFFALSE 801
// PlaceUnitXY ( Roth , 71 , 21 , false ) ;
 783: LD_EXP 13
 787: PPUSH
 788: LD_INT 71
 790: PPUSH
 791: LD_INT 21
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: CALL_OW 48
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 12a_ ) ;
 801: LD_ADDR_EXP 14
 805: PUSH
 806: LD_STRING Lisa
 808: PPUSH
 809: LD_EXP 1
 813: NOT
 814: PPUSH
 815: LD_STRING 12a_
 817: PPUSH
 818: CALL 9260 0 3
 822: ST_TO_ADDR
// if Lisa then
 823: LD_EXP 14
 827: IFFALSE 844
// PlaceUnitArea ( Lisa , alliance_start , false ) ;
 829: LD_EXP 14
 833: PPUSH
 834: LD_INT 13
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 49
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 12a_ ) ;
 844: LD_ADDR_EXP 15
 848: PUSH
 849: LD_STRING Donaldson
 851: PPUSH
 852: LD_EXP 1
 856: NOT
 857: PPUSH
 858: LD_STRING 12a_
 860: PPUSH
 861: CALL 9260 0 3
 865: ST_TO_ADDR
// if Donaldson then
 866: LD_EXP 15
 870: IFFALSE 887
// PlaceUnitArea ( Donaldson , alliance_start , false ) ;
 872: LD_EXP 15
 876: PPUSH
 877: LD_INT 13
 879: PPUSH
 880: LD_INT 0
 882: PPUSH
 883: CALL_OW 49
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 12a_ ) ;
 887: LD_ADDR_EXP 16
 891: PUSH
 892: LD_STRING Bobby
 894: PPUSH
 895: LD_EXP 1
 899: NOT
 900: PPUSH
 901: LD_STRING 12a_
 903: PPUSH
 904: CALL 9260 0 3
 908: ST_TO_ADDR
// if Bobby then
 909: LD_EXP 16
 913: IFFALSE 930
// PlaceUnitArea ( Bobby , alliance_start , false ) ;
 915: LD_EXP 16
 919: PPUSH
 920: LD_INT 13
 922: PPUSH
 923: LD_INT 0
 925: PPUSH
 926: CALL_OW 49
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 12a_ ) ;
 930: LD_ADDR_EXP 17
 934: PUSH
 935: LD_STRING Cyrus
 937: PPUSH
 938: LD_EXP 1
 942: NOT
 943: PPUSH
 944: LD_STRING 12a_
 946: PPUSH
 947: CALL 9260 0 3
 951: ST_TO_ADDR
// if Cyrus then
 952: LD_EXP 17
 956: IFFALSE 973
// PlaceUnitArea ( Cyrus , alliance_start , false ) ;
 958: LD_EXP 17
 962: PPUSH
 963: LD_INT 13
 965: PPUSH
 966: LD_INT 0
 968: PPUSH
 969: CALL_OW 49
// Denis := PrepareUnit ( Denis , ( not debug ) , 12a_ ) ;
 973: LD_ADDR_EXP 18
 977: PUSH
 978: LD_STRING Denis
 980: PPUSH
 981: LD_EXP 1
 985: NOT
 986: PPUSH
 987: LD_STRING 12a_
 989: PPUSH
 990: CALL 9260 0 3
 994: ST_TO_ADDR
// if Denis then
 995: LD_EXP 18
 999: IFFALSE 1016
// PlaceUnitArea ( Denis , alliance_start , false ) ;
1001: LD_EXP 18
1005: PPUSH
1006: LD_INT 13
1008: PPUSH
1009: LD_INT 0
1011: PPUSH
1012: CALL_OW 49
// Brown := PrepareUnit ( Brown , ( not debug ) , 12a_ ) ;
1016: LD_ADDR_EXP 19
1020: PUSH
1021: LD_STRING Brown
1023: PPUSH
1024: LD_EXP 1
1028: NOT
1029: PPUSH
1030: LD_STRING 12a_
1032: PPUSH
1033: CALL 9260 0 3
1037: ST_TO_ADDR
// if Brown then
1038: LD_EXP 19
1042: IFFALSE 1059
// PlaceUnitArea ( Brown , alliance_start , false ) ;
1044: LD_EXP 19
1048: PPUSH
1049: LD_INT 13
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL_OW 49
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 12a_ ) ;
1059: LD_ADDR_EXP 20
1063: PUSH
1064: LD_STRING Gladstone
1066: PPUSH
1067: LD_EXP 1
1071: NOT
1072: PPUSH
1073: LD_STRING 12a_
1075: PPUSH
1076: CALL 9260 0 3
1080: ST_TO_ADDR
// if Gladstone then
1081: LD_EXP 20
1085: IFFALSE 1102
// PlaceUnitArea ( Gladstone , alliance_start , false ) ;
1087: LD_EXP 20
1091: PPUSH
1092: LD_INT 13
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// Houten := PrepareUnit ( Houten , ( not debug ) , 12a_ ) ;
1102: LD_ADDR_EXP 21
1106: PUSH
1107: LD_STRING Houten
1109: PPUSH
1110: LD_EXP 1
1114: NOT
1115: PPUSH
1116: LD_STRING 12a_
1118: PPUSH
1119: CALL 9260 0 3
1123: ST_TO_ADDR
// if Houten then
1124: LD_EXP 21
1128: IFFALSE 1145
// PlaceUnitArea ( Houten , alliance_start , false ) ;
1130: LD_EXP 21
1134: PPUSH
1135: LD_INT 13
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL_OW 49
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 12a_ ) ;
1145: LD_ADDR_EXP 22
1149: PUSH
1150: LD_STRING Cornel
1152: PPUSH
1153: LD_EXP 1
1157: NOT
1158: PPUSH
1159: LD_STRING 12a_
1161: PPUSH
1162: CALL 9260 0 3
1166: ST_TO_ADDR
// if Cornel then
1167: LD_EXP 22
1171: IFFALSE 1188
// PlaceUnitArea ( Cornel , alliance_start , false ) ;
1173: LD_EXP 22
1177: PPUSH
1178: LD_INT 13
1180: PPUSH
1181: LD_INT 0
1183: PPUSH
1184: CALL_OW 49
// Gary := PrepareUnit ( Gary , ( not debug ) , 12a_ ) ;
1188: LD_ADDR_EXP 23
1192: PUSH
1193: LD_STRING Gary
1195: PPUSH
1196: LD_EXP 1
1200: NOT
1201: PPUSH
1202: LD_STRING 12a_
1204: PPUSH
1205: CALL 9260 0 3
1209: ST_TO_ADDR
// if Gary then
1210: LD_EXP 23
1214: IFFALSE 1231
// PlaceUnitArea ( Gary , alliance_start , false ) ;
1216: LD_EXP 23
1220: PPUSH
1221: LD_INT 13
1223: PPUSH
1224: LD_INT 0
1226: PPUSH
1227: CALL_OW 49
// Frank := PrepareUnit ( Frank , ( not debug ) , 12a_ ) ;
1231: LD_ADDR_EXP 24
1235: PUSH
1236: LD_STRING Frank
1238: PPUSH
1239: LD_EXP 1
1243: NOT
1244: PPUSH
1245: LD_STRING 12a_
1247: PPUSH
1248: CALL 9260 0 3
1252: ST_TO_ADDR
// if Frank then
1253: LD_EXP 24
1257: IFFALSE 1274
// PlaceUnitArea ( Frank , alliance_start , false ) ;
1259: LD_EXP 24
1263: PPUSH
1264: LD_INT 13
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: CALL_OW 49
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 12a_ ) ;
1274: LD_ADDR_EXP 25
1278: PUSH
1279: LD_STRING Kikuchi
1281: PPUSH
1282: LD_EXP 1
1286: NOT
1287: PPUSH
1288: LD_STRING 12a_
1290: PPUSH
1291: CALL 9260 0 3
1295: ST_TO_ADDR
// if Kikuchi then
1296: LD_EXP 25
1300: IFFALSE 1317
// PlaceUnitArea ( Kikuchi , alliance_start , false ) ;
1302: LD_EXP 25
1306: PPUSH
1307: LD_INT 13
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL_OW 49
// Simms := PrepareUnit ( Simms , ( not debug ) , 12a_ ) ;
1317: LD_ADDR_EXP 26
1321: PUSH
1322: LD_STRING Simms
1324: PPUSH
1325: LD_EXP 1
1329: NOT
1330: PPUSH
1331: LD_STRING 12a_
1333: PPUSH
1334: CALL 9260 0 3
1338: ST_TO_ADDR
// if Simms then
1339: LD_EXP 26
1343: IFFALSE 1360
// PlaceUnitArea ( Simms , alliance_start , false ) ;
1345: LD_EXP 26
1349: PPUSH
1350: LD_INT 13
1352: PPUSH
1353: LD_INT 0
1355: PPUSH
1356: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 12a_ ) ;
1360: LD_ADDR_EXP 27
1364: PUSH
1365: LD_STRING Joan
1367: PPUSH
1368: LD_EXP 1
1372: NOT
1373: PPUSH
1374: LD_STRING 12a_
1376: PPUSH
1377: CALL 9260 0 3
1381: ST_TO_ADDR
// if Joan then
1382: LD_EXP 27
1386: IFFALSE 1403
// PlaceUnitArea ( Joan , alliance_start , false ) ;
1388: LD_EXP 27
1392: PPUSH
1393: LD_INT 13
1395: PPUSH
1396: LD_INT 0
1398: PPUSH
1399: CALL_OW 49
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 12a_ ) ;
1403: LD_ADDR_EXP 28
1407: PUSH
1408: LD_STRING DeltaDoctor
1410: PPUSH
1411: LD_EXP 1
1415: NOT
1416: PPUSH
1417: LD_STRING 12a_
1419: PPUSH
1420: CALL 9260 0 3
1424: ST_TO_ADDR
// if DeltaDoctor then
1425: LD_EXP 28
1429: IFFALSE 1446
// PlaceUnitArea ( DeltaDoctor , alliance_start , false ) ;
1431: LD_EXP 28
1435: PPUSH
1436: LD_INT 13
1438: PPUSH
1439: LD_INT 0
1441: PPUSH
1442: CALL_OW 49
// tmp := CreateCharacterSet ( 12a_others ) ;
1446: LD_ADDR_VAR 0 4
1450: PUSH
1451: LD_STRING 12a_others
1453: PPUSH
1454: CALL_OW 31
1458: ST_TO_ADDR
// if tmp then
1459: LD_VAR 0 4
1463: IFFALSE 1497
// for i in tmp do
1465: LD_ADDR_VAR 0 3
1469: PUSH
1470: LD_VAR 0 4
1474: PUSH
1475: FOR_IN
1476: IFFALSE 1495
// PlaceUnitArea ( i , alliance_start , false ) ;
1478: LD_VAR 0 3
1482: PPUSH
1483: LD_INT 13
1485: PPUSH
1486: LD_INT 0
1488: PPUSH
1489: CALL_OW 49
1493: GO 1475
1495: POP
1496: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1497: LD_INT 3
1499: PPUSH
1500: LD_INT 3
1502: PPUSH
1503: LD_INT 3
1505: PPUSH
1506: LD_INT 12
1508: PPUSH
1509: LD_INT 100
1511: PPUSH
1512: CALL 15241 0 5
// veh := CreateVehicle ;
1516: LD_ADDR_VAR 0 2
1520: PUSH
1521: CALL_OW 45
1525: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1526: LD_VAR 0 2
1530: PPUSH
1531: LD_INT 2
1533: PPUSH
1534: CALL_OW 233
// PlaceUnitXY ( veh , 63 , 9 , false ) ;
1538: LD_VAR 0 2
1542: PPUSH
1543: LD_INT 63
1545: PPUSH
1546: LD_INT 9
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 48
// SetCargo ( veh , mat_artifact , 30 ) ;
1556: LD_VAR 0 2
1560: PPUSH
1561: LD_INT 4
1563: PPUSH
1564: LD_INT 30
1566: PPUSH
1567: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , debug ) then
1571: LD_STRING 11_artifact_captured
1573: PPUSH
1574: LD_EXP 1
1578: PPUSH
1579: CALL_OW 30
1583: IFFALSE 1659
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1585: LD_INT 3
1587: PPUSH
1588: LD_INT 3
1590: PPUSH
1591: LD_INT 3
1593: PPUSH
1594: LD_INT 12
1596: PPUSH
1597: LD_INT 100
1599: PPUSH
1600: CALL 15241 0 5
// veh := CreateVehicle ;
1604: LD_ADDR_VAR 0 2
1608: PUSH
1609: CALL_OW 45
1613: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1614: LD_VAR 0 2
1618: PPUSH
1619: LD_INT 2
1621: PPUSH
1622: CALL_OW 233
// PlaceUnitXY ( veh , 60 , 4 , false ) ;
1626: LD_VAR 0 2
1630: PPUSH
1631: LD_INT 60
1633: PPUSH
1634: LD_INT 4
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL_OW 48
// SetCargo ( veh , mat_artifact , 50 ) ;
1644: LD_VAR 0 2
1648: PPUSH
1649: LD_INT 4
1651: PPUSH
1652: LD_INT 50
1654: PPUSH
1655: CALL_OW 290
// end ; end ;
1659: LD_VAR 0 1
1663: RET
// export function PrepareGossudarov ; var tmp , i ; begin
1664: LD_INT 0
1666: PPUSH
1667: PPUSH
1668: PPUSH
// uc_side := 6 ;
1669: LD_ADDR_OWVAR 20
1673: PUSH
1674: LD_INT 6
1676: ST_TO_ADDR
// uc_nation := 3 ;
1677: LD_ADDR_OWVAR 21
1681: PUSH
1682: LD_INT 3
1684: ST_TO_ADDR
// InitHc ;
1685: CALL_OW 19
// Gossudarov := NewCharacter ( Gossudarov ) ;
1689: LD_ADDR_EXP 29
1693: PUSH
1694: LD_STRING Gossudarov
1696: PPUSH
1697: CALL_OW 25
1701: ST_TO_ADDR
// Kirilenkova := NewCharacter ( Kirilenkova ) ;
1702: LD_ADDR_EXP 30
1706: PUSH
1707: LD_STRING Kirilenkova
1709: PPUSH
1710: CALL_OW 25
1714: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
1715: LD_ADDR_EXP 31
1719: PUSH
1720: LD_STRING Titov
1722: PPUSH
1723: CALL_OW 25
1727: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
1728: LD_ADDR_EXP 36
1732: PUSH
1733: LD_STRING Oblukov
1735: PPUSH
1736: CALL_OW 25
1740: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
1741: LD_ADDR_EXP 33
1745: PUSH
1746: LD_STRING Dolgov
1748: PPUSH
1749: CALL_OW 25
1753: ST_TO_ADDR
// Petrosyan := NewCharacter ( Petrosyan ) ;
1754: LD_ADDR_EXP 34
1758: PUSH
1759: LD_STRING Petrosyan
1761: PPUSH
1762: CALL_OW 25
1766: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
1767: LD_ADDR_EXP 35
1771: PUSH
1772: LD_STRING Scholtze
1774: PPUSH
1775: CALL_OW 25
1779: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
1780: LD_ADDR_EXP 37
1784: PUSH
1785: LD_STRING Kapitsova
1787: PPUSH
1788: CALL_OW 25
1792: ST_TO_ADDR
// tmp := [ Gossudarov , Kirilenkova , Titov , Oblukov , Dolgov , Petrosyan , Scholtze , Kapitsova ] ;
1793: LD_ADDR_VAR 0 2
1797: PUSH
1798: LD_EXP 29
1802: PUSH
1803: LD_EXP 30
1807: PUSH
1808: LD_EXP 31
1812: PUSH
1813: LD_EXP 36
1817: PUSH
1818: LD_EXP 33
1822: PUSH
1823: LD_EXP 34
1827: PUSH
1828: LD_EXP 35
1832: PUSH
1833: LD_EXP 37
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: ST_TO_ADDR
// for i in tmp do
1848: LD_ADDR_VAR 0 3
1852: PUSH
1853: LD_VAR 0 2
1857: PUSH
1858: FOR_IN
1859: IFFALSE 1878
// PlaceUnitArea ( i , gossudarov_spawn , false ) ;
1861: LD_VAR 0 3
1865: PPUSH
1866: LD_INT 14
1868: PPUSH
1869: LD_INT 0
1871: PPUSH
1872: CALL_OW 49
1876: GO 1858
1878: POP
1879: POP
// ComMoveXY ( tmp , GetX ( freedom ) , GetY ( freedom ) ) ;
1880: LD_VAR 0 2
1884: PPUSH
1885: LD_EXP 3
1889: PPUSH
1890: CALL_OW 250
1894: PPUSH
1895: LD_EXP 3
1899: PPUSH
1900: CALL_OW 251
1904: PPUSH
1905: CALL_OW 111
// end ;
1909: LD_VAR 0 1
1913: RET
// export function PrepareBelkov ; begin
1914: LD_INT 0
1916: PPUSH
// uc_side := 4 ;
1917: LD_ADDR_OWVAR 20
1921: PUSH
1922: LD_INT 4
1924: ST_TO_ADDR
// uc_nation := 3 ;
1925: LD_ADDR_OWVAR 21
1929: PUSH
1930: LD_INT 3
1932: ST_TO_ADDR
// InitHc ;
1933: CALL_OW 19
// Belkov := NewCharacter ( Belkov ) ;
1937: LD_ADDR_EXP 44
1941: PUSH
1942: LD_STRING Belkov
1944: PPUSH
1945: CALL_OW 25
1949: ST_TO_ADDR
// PlaceUnitArea ( Belkov , gossudarov_spawn , false ) ;
1950: LD_EXP 44
1954: PPUSH
1955: LD_INT 14
1957: PPUSH
1958: LD_INT 0
1960: PPUSH
1961: CALL_OW 49
// end ;
1965: LD_VAR 0 1
1969: RET
// export function PrepareGnyevko ; begin
1970: LD_INT 0
1972: PPUSH
// uc_side := 4 ;
1973: LD_ADDR_OWVAR 20
1977: PUSH
1978: LD_INT 4
1980: ST_TO_ADDR
// uc_nation := 3 ;
1981: LD_ADDR_OWVAR 21
1985: PUSH
1986: LD_INT 3
1988: ST_TO_ADDR
// InitHc ;
1989: CALL_OW 19
// Gnyevko := NewCharacter ( Gnyevko ) ;
1993: LD_ADDR_EXP 45
1997: PUSH
1998: LD_STRING Gnyevko
2000: PPUSH
2001: CALL_OW 25
2005: ST_TO_ADDR
// PlaceUnitArea ( Gnyevko , gossudarov_spawn , false ) ;
2006: LD_EXP 45
2010: PPUSH
2011: LD_INT 14
2013: PPUSH
2014: LD_INT 0
2016: PPUSH
2017: CALL_OW 49
// end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareBurlak ; var i , tmp ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 4 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 4
2038: ST_TO_ADDR
// uc_nation := 3 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 3
2046: ST_TO_ADDR
// InitHc ;
2047: CALL_OW 19
// Burlak := NewCharacter ( Burlak ) ;
2051: LD_ADDR_EXP 43
2055: PUSH
2056: LD_STRING Burlak
2058: PPUSH
2059: CALL_OW 25
2063: ST_TO_ADDR
// PrepareVehicle ( [ ru_heavy_tracked , ru_heavy_wheeled , ru_medium_tracked ] [ Difficulty ] , engine_combustion , control_manual , ru_rocket_launcher , 0 ) ;
2064: LD_INT 24
2066: PUSH
2067: LD_INT 23
2069: PUSH
2070: LD_INT 22
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: LD_OWVAR 67
2082: ARRAY
2083: PPUSH
2084: LD_INT 1
2086: PPUSH
2087: LD_INT 1
2089: PPUSH
2090: LD_INT 45
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: CALL 15241 0 5
// Masha := CreateVehicle ;
2100: LD_ADDR_EXP 46
2104: PUSH
2105: CALL_OW 45
2109: ST_TO_ADDR
// SetLives ( [ Masha , Burlak ] , 499 ) ;
2110: LD_EXP 46
2114: PUSH
2115: LD_EXP 43
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PPUSH
2124: LD_INT 499
2126: PPUSH
2127: CALL_OW 234
// SetDir ( Masha , 3 ) ;
2131: LD_EXP 46
2135: PPUSH
2136: LD_INT 3
2138: PPUSH
2139: CALL_OW 233
// SetMark ( Masha , 1 ) ;
2143: LD_EXP 46
2147: PPUSH
2148: LD_INT 1
2150: PPUSH
2151: CALL_OW 242
// PlaceUnitArea ( Masha , burlak_spawn , false ) ;
2155: LD_EXP 46
2159: PPUSH
2160: LD_INT 18
2162: PPUSH
2163: LD_INT 0
2165: PPUSH
2166: CALL_OW 49
// PlaceUnitXY ( Burlak , 125 , 1 , false ) ;
2170: LD_EXP 43
2174: PPUSH
2175: LD_INT 125
2177: PPUSH
2178: LD_INT 1
2180: PPUSH
2181: LD_INT 0
2183: PPUSH
2184: CALL_OW 48
// ComMoveUnit ( Burlak , Masha ) ;
2188: LD_EXP 43
2192: PPUSH
2193: LD_EXP 46
2197: PPUSH
2198: CALL_OW 112
// wait ( 0 0$0.3 ) ;
2202: LD_INT 10
2204: PPUSH
2205: CALL_OW 67
// AddComMoveXY ( Masha , 110 , 10 ) ;
2209: LD_EXP 46
2213: PPUSH
2214: LD_INT 110
2216: PPUSH
2217: LD_INT 10
2219: PPUSH
2220: CALL_OW 171
// Petrovova := NewCharacter ( Petrovova ) ;
2224: LD_ADDR_EXP 39
2228: PUSH
2229: LD_STRING Petrovova
2231: PPUSH
2232: CALL_OW 25
2236: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
2237: LD_ADDR_EXP 41
2241: PUSH
2242: LD_STRING Kuzmov
2244: PPUSH
2245: CALL_OW 25
2249: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
2250: LD_ADDR_EXP 40
2254: PUSH
2255: LD_STRING Kovalyuk
2257: PPUSH
2258: CALL_OW 25
2262: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
2263: LD_ADDR_EXP 38
2267: PUSH
2268: LD_STRING Lipshchin
2270: PPUSH
2271: CALL_OW 25
2275: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
2276: LD_ADDR_EXP 42
2280: PUSH
2281: LD_STRING Karamazov
2283: PPUSH
2284: CALL_OW 25
2288: ST_TO_ADDR
// tmp := [ Petrovova , Kuzmov , Kovalyuk , Lipshchin , Karamazov ] ;
2289: LD_ADDR_VAR 0 3
2293: PUSH
2294: LD_EXP 39
2298: PUSH
2299: LD_EXP 41
2303: PUSH
2304: LD_EXP 40
2308: PUSH
2309: LD_EXP 38
2313: PUSH
2314: LD_EXP 42
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: ST_TO_ADDR
// for i in tmp do
2326: LD_ADDR_VAR 0 2
2330: PUSH
2331: LD_VAR 0 3
2335: PUSH
2336: FOR_IN
2337: IFFALSE 2376
// begin SetLives ( i , rand ( 399 , 799 ) ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: LD_INT 399
2346: PPUSH
2347: LD_INT 799
2349: PPUSH
2350: CALL_OW 12
2354: PPUSH
2355: CALL_OW 234
// PlaceUnitArea ( i , burlak_friends_spawn , false ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_INT 19
2366: PPUSH
2367: LD_INT 0
2369: PPUSH
2370: CALL_OW 49
// end ;
2374: GO 2336
2376: POP
2377: POP
// ComMoveXY ( tmp , 116 , 8 ) ;
2378: LD_VAR 0 3
2382: PPUSH
2383: LD_INT 116
2385: PPUSH
2386: LD_INT 8
2388: PPUSH
2389: CALL_OW 111
// AddComHold ( tmp ) ;
2393: LD_VAR 0 3
2397: PPUSH
2398: CALL_OW 200
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
2402: LD_ADDR_VAR 0 2
2406: PUSH
2407: LD_VAR 0 3
2411: PPUSH
2412: LD_INT 25
2414: PUSH
2415: LD_INT 1
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL_OW 72
2426: PUSH
2427: FOR_IN
2428: IFFALSE 2468
// begin AddComMoveToArea ( i , burlak_crawl_area ) ;
2430: LD_VAR 0 2
2434: PPUSH
2435: LD_INT 20
2437: PPUSH
2438: CALL_OW 173
// AddComTurnXY ( i , 147 , 45 ) ;
2442: LD_VAR 0 2
2446: PPUSH
2447: LD_INT 147
2449: PPUSH
2450: LD_INT 45
2452: PPUSH
2453: CALL_OW 178
// AddComCrawl ( i ) ;
2457: LD_VAR 0 2
2461: PPUSH
2462: CALL_OW 197
// end ;
2466: GO 2427
2468: POP
2469: POP
// repeat wait ( 0 0$1 ) ;
2470: LD_INT 35
2472: PPUSH
2473: CALL_OW 67
// until IsAt ( Masha , 110 , 10 ) ;
2477: LD_EXP 46
2481: PPUSH
2482: LD_INT 110
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 307
2492: IFFALSE 2470
// ComStop ( Burlak ) ;
2494: LD_EXP 43
2498: PPUSH
2499: CALL_OW 141
// AddComHold ( Burlak ) ;
2503: LD_EXP 43
2507: PPUSH
2508: CALL_OW 200
// end ; end_of_file
2512: LD_VAR 0 1
2516: RET
// export russian_force , russian_guard , ru_attackers ; export function PrepareRussian ; var i , veh , tmp ; begin
2517: LD_INT 0
2519: PPUSH
2520: PPUSH
2521: PPUSH
2522: PPUSH
// uc_side := 3 ;
2523: LD_ADDR_OWVAR 20
2527: PUSH
2528: LD_INT 3
2530: ST_TO_ADDR
// uc_nation := 3 ;
2531: LD_ADDR_OWVAR 21
2535: PUSH
2536: LD_INT 3
2538: ST_TO_ADDR
// russian_force := PrepareBase ( ru_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 10000 , 3000 , 300 ] , [ 9 , 5 , 6 , 6 ] ) ;
2539: LD_ADDR_EXP 47
2543: PUSH
2544: LD_INT 47
2546: PPUSH
2547: LD_STRING 
2549: PPUSH
2550: LD_INT 7
2552: PUSH
2553: LD_INT 8
2555: PUSH
2556: LD_INT 9
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: LD_OWVAR 67
2568: ARRAY
2569: PPUSH
2570: LD_INT 10000
2572: PUSH
2573: LD_INT 3000
2575: PUSH
2576: LD_INT 300
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: LIST
2583: PPUSH
2584: LD_INT 9
2586: PUSH
2587: LD_INT 5
2589: PUSH
2590: LD_INT 6
2592: PUSH
2593: LD_INT 6
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: PPUSH
2602: CALL 18640 0 5
2606: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , russian_force ) ;
2607: LD_ADDR_EXP 55
2611: PUSH
2612: LD_EXP 55
2616: PPUSH
2617: LD_INT 2
2619: PPUSH
2620: LD_EXP 47
2624: PPUSH
2625: CALL_OW 1
2629: ST_TO_ADDR
// tmp := [ ] ;
2630: LD_ADDR_VAR 0 4
2634: PUSH
2635: EMPTY
2636: ST_TO_ADDR
// for i = 1 to 4 do
2637: LD_ADDR_VAR 0 2
2641: PUSH
2642: DOUBLE
2643: LD_INT 1
2645: DEC
2646: ST_TO_ADDR
2647: LD_INT 4
2649: PUSH
2650: FOR_TO
2651: IFFALSE 2744
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun ] [ i mod 4 + 1 ] , 100 ) ;
2653: LD_INT 22
2655: PPUSH
2656: LD_INT 3
2658: PPUSH
2659: LD_INT 3
2661: PPUSH
2662: LD_INT 43
2664: PUSH
2665: LD_INT 45
2667: PUSH
2668: LD_INT 45
2670: PUSH
2671: LD_INT 44
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: LIST
2678: LIST
2679: PUSH
2680: LD_VAR 0 2
2684: PUSH
2685: LD_INT 4
2687: MOD
2688: PUSH
2689: LD_INT 1
2691: PLUS
2692: ARRAY
2693: PPUSH
2694: LD_INT 100
2696: PPUSH
2697: CALL 15241 0 5
// veh := CreateVehicle ;
2701: LD_ADDR_VAR 0 3
2705: PUSH
2706: CALL_OW 45
2710: ST_TO_ADDR
// tmp := tmp ^ veh ;
2711: LD_ADDR_VAR 0 4
2715: PUSH
2716: LD_VAR 0 4
2720: PUSH
2721: LD_VAR 0 3
2725: ADD
2726: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_russian , false ) ;
2727: LD_VAR 0 3
2731: PPUSH
2732: LD_INT 2
2734: PPUSH
2735: LD_INT 0
2737: PPUSH
2738: CALL_OW 49
// end ;
2742: GO 2650
2744: POP
2745: POP
// russian_guard := tmp ;
2746: LD_ADDR_EXP 48
2750: PUSH
2751: LD_VAR 0 4
2755: ST_TO_ADDR
// end ;
2756: LD_VAR 0 1
2760: RET
// every 6 6$00 + 2 2$00 trigger IsOk ( ru_depot ) and player_spotted do var i , base , tmp , coords , flags , _target , attackers ;
2761: LD_INT 47
2763: PPUSH
2764: CALL_OW 302
2768: PUSH
2769: LD_EXP 6
2773: AND
2774: IFFALSE 3439
2776: GO 2778
2778: DISABLE
2779: LD_INT 0
2781: PPUSH
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
2786: PPUSH
2787: PPUSH
// begin enable ;
2788: ENABLE
// base := 2 ;
2789: LD_ADDR_VAR 0 2
2793: PUSH
2794: LD_INT 2
2796: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
2797: LD_ADDR_VAR 0 5
2801: PUSH
2802: LD_INT 0
2804: PUSH
2805: LD_INT 0
2807: PUSH
2808: LD_INT 0
2810: PUSH
2811: LD_INT 0
2813: PUSH
2814: LD_INT 0
2816: PUSH
2817: LD_INT 0
2819: PUSH
2820: LD_INT 0
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: LD_INT 1
2828: PUSH
2829: LD_INT 0
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: LIST
2843: ST_TO_ADDR
// coords := [ [ 28 , 14 ] , [ 107 , 119 ] , [ 127 , 97 ] , [ 185 , 127 ] ] ;
2844: LD_ADDR_VAR 0 4
2848: PUSH
2849: LD_INT 28
2851: PUSH
2852: LD_INT 14
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: PUSH
2859: LD_INT 107
2861: PUSH
2862: LD_INT 119
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PUSH
2869: LD_INT 127
2871: PUSH
2872: LD_INT 97
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PUSH
2879: LD_INT 185
2881: PUSH
2882: LD_INT 127
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: ST_TO_ADDR
// tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] ] ;
2895: LD_ADDR_VAR 0 3
2899: PUSH
2900: LD_INT 22
2902: PUSH
2903: LD_INT 1
2905: PUSH
2906: LD_INT 3
2908: PUSH
2909: LD_INT 45
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 21
2920: PUSH
2921: LD_INT 1
2923: PUSH
2924: LD_INT 3
2926: PUSH
2927: LD_INT 45
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: PUSH
2936: LD_INT 22
2938: PUSH
2939: LD_INT 1
2941: PUSH
2942: LD_INT 3
2944: PUSH
2945: LD_INT 45
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: LIST
2952: LIST
2953: PUSH
2954: LD_INT 23
2956: PUSH
2957: LD_INT 1
2959: PUSH
2960: LD_INT 3
2962: PUSH
2963: LD_INT 46
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: LIST
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: LIST
2976: LIST
2977: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
2978: LD_ADDR_VAR 0 1
2982: PUSH
2983: DOUBLE
2984: LD_INT 1
2986: DEC
2987: ST_TO_ADDR
2988: LD_OWVAR 67
2992: PUSH
2993: LD_OWVAR 1
2997: PUSH
2998: LD_INT 21000
3000: DIV
3001: PLUS
3002: PUSH
3003: FOR_TO
3004: IFFALSE 3092
// tmp := Insert ( tmp , tmp + 1 , [ [ ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
3006: LD_ADDR_VAR 0 3
3010: PUSH
3011: LD_VAR 0 3
3015: PPUSH
3016: LD_VAR 0 3
3020: PUSH
3021: LD_INT 1
3023: PLUS
3024: PPUSH
3025: LD_INT 23
3027: PUSH
3028: LD_INT 24
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 1
3037: PPUSH
3038: LD_INT 2
3040: PPUSH
3041: CALL_OW 12
3045: ARRAY
3046: PUSH
3047: LD_INT 1
3049: PUSH
3050: LD_INT 3
3052: PUSH
3053: LD_INT 46
3055: PUSH
3056: LD_INT 47
3058: PUSH
3059: LD_INT 45
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: LIST
3066: PUSH
3067: LD_INT 1
3069: PPUSH
3070: LD_INT 3
3072: PPUSH
3073: CALL_OW 12
3077: ARRAY
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: PPUSH
3085: CALL_OW 2
3089: ST_TO_ADDR
3090: GO 3003
3092: POP
3093: POP
// MC_SetProduceList ( base , tmp ) ;
3094: LD_VAR 0 2
3098: PPUSH
3099: LD_VAR 0 3
3103: PPUSH
3104: CALL 59951 0 2
// repeat wait ( 0 0$1 ) ;
3108: LD_INT 35
3110: PPUSH
3111: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
3115: LD_VAR 0 2
3119: PPUSH
3120: CALL 60312 0 1
3124: PUSH
3125: LD_INT 0
3127: EQUAL
3128: IFFALSE 3108
// wait ( 0 0$20 ) ;
3130: LD_INT 700
3132: PPUSH
3133: CALL_OW 67
// _target := [ [ 71 , 19 ] , [ 91 , 67 ] , [ 52 , 44 ] , [ 68 , 48 ] ] ;
3137: LD_ADDR_VAR 0 6
3141: PUSH
3142: LD_INT 71
3144: PUSH
3145: LD_INT 19
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 91
3154: PUSH
3155: LD_INT 67
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 52
3164: PUSH
3165: LD_INT 44
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 68
3174: PUSH
3175: LD_INT 48
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] ] ) ) ;
3188: LD_ADDR_VAR 0 7
3192: PUSH
3193: LD_EXP 74
3197: PUSH
3198: LD_VAR 0 2
3202: ARRAY
3203: PUSH
3204: LD_EXP 77
3208: PUSH
3209: LD_VAR 0 2
3213: ARRAY
3214: PUSH
3215: LD_EXP 74
3219: PUSH
3220: LD_VAR 0 2
3224: ARRAY
3225: PPUSH
3226: LD_INT 2
3228: PUSH
3229: LD_INT 34
3231: PUSH
3232: LD_INT 51
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PUSH
3239: LD_INT 34
3241: PUSH
3242: LD_INT 52
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: LIST
3253: PPUSH
3254: CALL_OW 72
3258: UNION
3259: DIFF
3260: ST_TO_ADDR
// if not attackers then
3261: LD_VAR 0 7
3265: NOT
3266: IFFALSE 3270
// exit ;
3268: GO 3439
// ru_attackers := attackers ;
3270: LD_ADDR_EXP 49
3274: PUSH
3275: LD_VAR 0 7
3279: ST_TO_ADDR
// for i = 1 to attackers do
3280: LD_ADDR_VAR 0 1
3284: PUSH
3285: DOUBLE
3286: LD_INT 1
3288: DEC
3289: ST_TO_ADDR
3290: LD_VAR 0 7
3294: PUSH
3295: FOR_TO
3296: IFFALSE 3373
// begin case i mod 3 of 0 :
3298: LD_VAR 0 1
3302: PUSH
3303: LD_INT 3
3305: MOD
3306: PUSH
3307: LD_INT 0
3309: DOUBLE
3310: EQUAL
3311: IFTRUE 3315
3313: GO 3318
3315: POP
// ; 1 :
3316: GO 3371
3318: LD_INT 1
3320: DOUBLE
3321: EQUAL
3322: IFTRUE 3326
3324: GO 3344
3326: POP
// ComAgressiveMove ( i , 32 , 49 ) ; 2 :
3327: LD_VAR 0 1
3331: PPUSH
3332: LD_INT 32
3334: PPUSH
3335: LD_INT 49
3337: PPUSH
3338: CALL_OW 114
3342: GO 3371
3344: LD_INT 2
3346: DOUBLE
3347: EQUAL
3348: IFTRUE 3352
3350: GO 3370
3352: POP
// ComAgressiveMove ( i , 117 , 107 ) ; end ;
3353: LD_VAR 0 1
3357: PPUSH
3358: LD_INT 117
3360: PPUSH
3361: LD_INT 107
3363: PPUSH
3364: CALL_OW 114
3368: GO 3371
3370: POP
// end ;
3371: GO 3295
3373: POP
3374: POP
// repeat wait ( 0 0$1 ) ;
3375: LD_INT 35
3377: PPUSH
3378: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
3382: LD_VAR 0 7
3386: PPUSH
3387: LD_INT 60
3389: PUSH
3390: EMPTY
3391: LIST
3392: PPUSH
3393: CALL_OW 72
3397: NOT
3398: IFFALSE 3375
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
3400: LD_VAR 0 2
3404: PPUSH
3405: LD_VAR 0 7
3409: PPUSH
3410: LD_VAR 0 6
3414: PPUSH
3415: LD_VAR 0 5
3419: PPUSH
3420: CALL 60197 0 4
// if not first_attack then
3424: LD_EXP 7
3428: NOT
3429: IFFALSE 3439
// first_attack := true ;
3431: LD_ADDR_EXP 7
3435: PUSH
3436: LD_INT 1
3438: ST_TO_ADDR
// end ; end_of_file
3439: PPOPN 7
3441: END
// export arabian_force , arabian_guard , Abdul , mastodont ; export function PrepareArabian ; var i , veh , tmp , xy , un , un2 ; begin
3442: LD_INT 0
3444: PPUSH
3445: PPUSH
3446: PPUSH
3447: PPUSH
3448: PPUSH
3449: PPUSH
3450: PPUSH
// uc_side := 2 ;
3451: LD_ADDR_OWVAR 20
3455: PUSH
3456: LD_INT 2
3458: ST_TO_ADDR
// uc_nation := 2 ;
3459: LD_ADDR_OWVAR 21
3463: PUSH
3464: LD_INT 2
3466: ST_TO_ADDR
// Abdul := NewCharacter ( Abdul ) ;
3467: LD_ADDR_EXP 52
3471: PUSH
3472: LD_STRING Abdul
3474: PPUSH
3475: CALL_OW 25
3479: ST_TO_ADDR
// PlaceHumanInUnit ( Abdul , ar_depot ) ;
3480: LD_EXP 52
3484: PPUSH
3485: LD_INT 1
3487: PPUSH
3488: CALL_OW 52
// vc_chassis := 31 ;
3492: LD_ADDR_OWVAR 37
3496: PUSH
3497: LD_INT 31
3499: ST_TO_ADDR
// vc_control := control_rider ;
3500: LD_ADDR_OWVAR 38
3504: PUSH
3505: LD_INT 4
3507: ST_TO_ADDR
// mastodont := CreateVehicle ;
3508: LD_ADDR_EXP 53
3512: PUSH
3513: CALL_OW 45
3517: ST_TO_ADDR
// PlaceUnitXY ( mastodont , 153 , 71 , false ) ;
3518: LD_EXP 53
3522: PPUSH
3523: LD_INT 153
3525: PPUSH
3526: LD_INT 71
3528: PPUSH
3529: LD_INT 0
3531: PPUSH
3532: CALL_OW 48
// InitVc ;
3536: CALL_OW 20
// arabian_force := PrepareBase ( ar_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 5000 , 1000 , 300 ] , [ 22 , 5 , 6 , 9 ] ) ;
3540: LD_ADDR_EXP 50
3544: PUSH
3545: LD_INT 1
3547: PPUSH
3548: LD_STRING 
3550: PPUSH
3551: LD_INT 7
3553: PUSH
3554: LD_INT 8
3556: PUSH
3557: LD_INT 9
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: LD_OWVAR 67
3569: ARRAY
3570: PPUSH
3571: LD_INT 5000
3573: PUSH
3574: LD_INT 1000
3576: PUSH
3577: LD_INT 300
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: LIST
3584: PPUSH
3585: LD_INT 22
3587: PUSH
3588: LD_INT 5
3590: PUSH
3591: LD_INT 6
3593: PUSH
3594: LD_INT 9
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: PPUSH
3603: CALL 18640 0 5
3607: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , arabian_force ) ;
3608: LD_ADDR_EXP 55
3612: PUSH
3613: LD_EXP 55
3617: PPUSH
3618: LD_INT 1
3620: PPUSH
3621: LD_EXP 50
3625: PPUSH
3626: CALL_OW 1
3630: ST_TO_ADDR
// tmp := [ ] ;
3631: LD_ADDR_VAR 0 4
3635: PUSH
3636: EMPTY
3637: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
3638: LD_ADDR_OWVAR 37
3642: PUSH
3643: LD_INT 14
3645: ST_TO_ADDR
// vc_engine := engine_siberite ;
3646: LD_ADDR_OWVAR 39
3650: PUSH
3651: LD_INT 3
3653: ST_TO_ADDR
// vc_control := control_manual ;
3654: LD_ADDR_OWVAR 38
3658: PUSH
3659: LD_INT 1
3661: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
3662: LD_ADDR_OWVAR 40
3666: PUSH
3667: LD_INT 31
3669: ST_TO_ADDR
// for i = 1 to 3 do
3670: LD_ADDR_VAR 0 2
3674: PUSH
3675: DOUBLE
3676: LD_INT 1
3678: DEC
3679: ST_TO_ADDR
3680: LD_INT 3
3682: PUSH
3683: FOR_TO
3684: IFFALSE 3928
// begin xy := [ [ 153 , 71 ] , [ 155 , 81 ] ] [ i mod 2 + 1 ] ;
3686: LD_ADDR_VAR 0 5
3690: PUSH
3691: LD_INT 153
3693: PUSH
3694: LD_INT 71
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: LD_INT 155
3703: PUSH
3704: LD_INT 81
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PUSH
3715: LD_VAR 0 2
3719: PUSH
3720: LD_INT 2
3722: MOD
3723: PUSH
3724: LD_INT 1
3726: PLUS
3727: ARRAY
3728: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
3729: LD_INT 0
3731: PPUSH
3732: LD_INT 3
3734: PPUSH
3735: LD_INT 7
3737: PUSH
3738: LD_INT 8
3740: PUSH
3741: LD_INT 9
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: LIST
3748: PUSH
3749: LD_OWVAR 67
3753: ARRAY
3754: PPUSH
3755: CALL_OW 380
// un := CreateVehicle ;
3759: LD_ADDR_VAR 0 6
3763: PUSH
3764: CALL_OW 45
3768: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3769: LD_VAR 0 6
3773: PPUSH
3774: LD_INT 0
3776: PPUSH
3777: LD_INT 5
3779: PPUSH
3780: CALL_OW 12
3784: PPUSH
3785: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
3789: LD_VAR 0 6
3793: PPUSH
3794: LD_VAR 0 5
3798: PUSH
3799: LD_INT 1
3801: ARRAY
3802: PPUSH
3803: LD_VAR 0 5
3807: PUSH
3808: LD_INT 2
3810: ARRAY
3811: PPUSH
3812: LD_INT 6
3814: PPUSH
3815: LD_INT 0
3817: PPUSH
3818: CALL_OW 50
// un2 := CreateHuman ;
3822: LD_ADDR_VAR 0 7
3826: PUSH
3827: CALL_OW 44
3831: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
3832: LD_VAR 0 7
3836: PPUSH
3837: LD_VAR 0 6
3841: PPUSH
3842: CALL_OW 52
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un ) ;
3846: LD_ADDR_EXP 55
3850: PUSH
3851: LD_EXP 55
3855: PPUSH
3856: LD_INT 1
3858: PUSH
3859: LD_EXP 55
3863: PUSH
3864: LD_INT 1
3866: ARRAY
3867: PUSH
3868: LD_INT 1
3870: PLUS
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: PPUSH
3876: LD_VAR 0 6
3880: PPUSH
3881: CALL 15798 0 3
3885: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un2 ) ;
3886: LD_ADDR_EXP 55
3890: PUSH
3891: LD_EXP 55
3895: PPUSH
3896: LD_INT 1
3898: PUSH
3899: LD_EXP 55
3903: PUSH
3904: LD_INT 1
3906: ARRAY
3907: PUSH
3908: LD_INT 1
3910: PLUS
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: PPUSH
3916: LD_VAR 0 7
3920: PPUSH
3921: CALL 15798 0 3
3925: ST_TO_ADDR
// end ;
3926: GO 3683
3928: POP
3929: POP
// for i = 1 to 5 do
3930: LD_ADDR_VAR 0 2
3934: PUSH
3935: DOUBLE
3936: LD_INT 1
3938: DEC
3939: ST_TO_ADDR
3940: LD_INT 5
3942: PUSH
3943: FOR_TO
3944: IFFALSE 4037
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gatling_gun , ar_rocket_launcher , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] , 100 ) ;
3946: LD_INT 14
3948: PPUSH
3949: LD_INT 3
3951: PPUSH
3952: LD_INT 1
3954: PPUSH
3955: LD_INT 25
3957: PUSH
3958: LD_INT 28
3960: PUSH
3961: LD_INT 28
3963: PUSH
3964: LD_INT 27
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: PUSH
3973: LD_VAR 0 2
3977: PUSH
3978: LD_INT 4
3980: MOD
3981: PUSH
3982: LD_INT 1
3984: PLUS
3985: ARRAY
3986: PPUSH
3987: LD_INT 100
3989: PPUSH
3990: CALL 15241 0 5
// veh := CreateVehicle ;
3994: LD_ADDR_VAR 0 3
3998: PUSH
3999: CALL_OW 45
4003: ST_TO_ADDR
// tmp := tmp ^ veh ;
4004: LD_ADDR_VAR 0 4
4008: PUSH
4009: LD_VAR 0 4
4013: PUSH
4014: LD_VAR 0 3
4018: ADD
4019: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_arabian , false ) ;
4020: LD_VAR 0 3
4024: PPUSH
4025: LD_INT 1
4027: PPUSH
4028: LD_INT 0
4030: PPUSH
4031: CALL_OW 49
// end ;
4035: GO 3943
4037: POP
4038: POP
// arabian_guard := tmp ;
4039: LD_ADDR_EXP 51
4043: PUSH
4044: LD_VAR 0 4
4048: ST_TO_ADDR
// end ; end_of_file
4049: LD_VAR 0 1
4053: RET
// export function Action ; var tmp , i , un ; begin
4054: LD_INT 0
4056: PPUSH
4057: PPUSH
4058: PPUSH
4059: PPUSH
// CenterNowOnXY ( 68 , 39 ) ;
4060: LD_INT 68
4062: PPUSH
4063: LD_INT 39
4065: PPUSH
4066: CALL_OW 86
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
4070: LD_ADDR_VAR 0 2
4074: PUSH
4075: LD_INT 22
4077: PUSH
4078: LD_INT 7
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: PPUSH
4085: CALL_OW 69
4089: ST_TO_ADDR
// InGameOn ;
4090: CALL_OW 8
// ComMoveXY ( tmp , 71 , 49 ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_INT 71
4101: PPUSH
4102: LD_INT 49
4104: PPUSH
4105: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4109: LD_INT 35
4111: PPUSH
4112: CALL_OW 67
// until SeeXY ( 7 , 71 , 51 ) ;
4116: LD_INT 7
4118: PPUSH
4119: LD_INT 71
4121: PPUSH
4122: LD_INT 51
4124: PPUSH
4125: CALL_OW 293
4129: IFFALSE 4109
// DialogueOn ;
4131: CALL_OW 6
// Say ( JMM , D1-JMM-1 ) ;
4135: LD_EXP 12
4139: PPUSH
4140: LD_STRING D1-JMM-1
4142: PPUSH
4143: CALL_OW 88
// if Joan then
4147: LD_EXP 27
4151: IFFALSE 4165
// Say ( Joan , D1-Joan-1 ) ;
4153: LD_EXP 27
4157: PPUSH
4158: LD_STRING D1-Joan-1
4160: PPUSH
4161: CALL_OW 88
// if Lisa then
4165: LD_EXP 14
4169: IFFALSE 4183
// Say ( Lisa , D1-Lisa-1 ) ;
4171: LD_EXP 14
4175: PPUSH
4176: LD_STRING D1-Lisa-1
4178: PPUSH
4179: CALL_OW 88
// if Joan or Lisa then
4183: LD_EXP 27
4187: PUSH
4188: LD_EXP 14
4192: OR
4193: IFFALSE 4207
// Say ( JMM , D1-JMM-2 ) ;
4195: LD_EXP 12
4199: PPUSH
4200: LD_STRING D1-JMM-2
4202: PPUSH
4203: CALL_OW 88
// DialogueOff ;
4207: CALL_OW 7
// InGameOff ;
4211: CALL_OW 9
// PlaceSeeing ( 71 , 50 , 7 , - 30 ) ;
4215: LD_INT 71
4217: PPUSH
4218: LD_INT 50
4220: PPUSH
4221: LD_INT 7
4223: PPUSH
4224: LD_INT 30
4226: NEG
4227: PPUSH
4228: CALL_OW 330
// RemoveSeeing ( 71 , 50 , 7 ) ;
4232: LD_INT 71
4234: PPUSH
4235: LD_INT 50
4237: PPUSH
4238: LD_INT 7
4240: PPUSH
4241: CALL_OW 331
// ChangeMissionObjectives ( M1 ) ;
4245: LD_STRING M1
4247: PPUSH
4248: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
4252: LD_INT 35
4254: PPUSH
4255: CALL_OW 67
// until freedom ;
4259: LD_EXP 3
4263: IFFALSE 4252
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
4265: LD_INT 350
4267: PPUSH
4268: LD_INT 700
4270: PPUSH
4271: CALL_OW 12
4275: PPUSH
4276: CALL_OW 67
// PrepareGossudarov ;
4280: CALL 1664 0 0
// repeat wait ( 0 0$1 ) ;
4284: LD_INT 35
4286: PPUSH
4287: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4291: LD_INT 22
4293: PUSH
4294: LD_INT 6
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: LD_INT 3
4303: PUSH
4304: LD_INT 24
4306: PUSH
4307: LD_INT 1000
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 69
4326: IFFALSE 4284
// tmp := FilterAllUnits ( [ f_side , 6 ] ) ;
4328: LD_ADDR_VAR 0 2
4332: PUSH
4333: LD_INT 22
4335: PUSH
4336: LD_INT 6
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: PPUSH
4343: CALL_OW 69
4347: ST_TO_ADDR
// for i in tmp do
4348: LD_ADDR_VAR 0 3
4352: PUSH
4353: LD_VAR 0 2
4357: PUSH
4358: FOR_IN
4359: IFFALSE 4375
// SetSide ( i , 7 ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: LD_INT 7
4368: PPUSH
4369: CALL_OW 235
4373: GO 4358
4375: POP
4376: POP
// DialogueOn ;
4377: CALL_OW 6
// ComTurnUnit ( [ JMM , Roth ] , Gossudarov ) ;
4381: LD_EXP 12
4385: PUSH
4386: LD_EXP 13
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PPUSH
4395: LD_EXP 29
4399: PPUSH
4400: CALL_OW 119
// CenterNowOnUnits ( Gossudarov ) ;
4404: LD_EXP 29
4408: PPUSH
4409: CALL_OW 87
// if not Roth then
4413: LD_EXP 13
4417: NOT
4418: IFFALSE 4482
// begin Say ( JMM , D2-JMM-1 ) ;
4420: LD_EXP 12
4424: PPUSH
4425: LD_STRING D2-JMM-1
4427: PPUSH
4428: CALL_OW 88
// Say ( JMM , D2-JMM-1b ) ;
4432: LD_EXP 12
4436: PPUSH
4437: LD_STRING D2-JMM-1b
4439: PPUSH
4440: CALL_OW 88
// Say ( Gossudarov , D2-Gos-1 ) ;
4444: LD_EXP 29
4448: PPUSH
4449: LD_STRING D2-Gos-1
4451: PPUSH
4452: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
4456: LD_EXP 12
4460: PPUSH
4461: LD_STRING D2-JMM-2
4463: PPUSH
4464: CALL_OW 88
// Say ( Gossudarov , D2-Gos-2 ) ;
4468: LD_EXP 29
4472: PPUSH
4473: LD_STRING D2-Gos-2
4475: PPUSH
4476: CALL_OW 88
// end else
4480: GO 4578
// begin Say ( Roth , D2-Roth-2 ) ;
4482: LD_EXP 13
4486: PPUSH
4487: LD_STRING D2-Roth-2
4489: PPUSH
4490: CALL_OW 88
// Say ( JMM , D2-JMM-1a ) ;
4494: LD_EXP 12
4498: PPUSH
4499: LD_STRING D2-JMM-1a
4501: PPUSH
4502: CALL_OW 88
// Say ( Roth , D2-Roth-2a ) ;
4506: LD_EXP 13
4510: PPUSH
4511: LD_STRING D2-Roth-2a
4513: PPUSH
4514: CALL_OW 88
// Say ( Roth , D2-Roth-2b ) ;
4518: LD_EXP 13
4522: PPUSH
4523: LD_STRING D2-Roth-2b
4525: PPUSH
4526: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
4530: LD_EXP 12
4534: PPUSH
4535: LD_STRING D2-JMM-3
4537: PPUSH
4538: CALL_OW 88
// Say ( Gossudarov , D2-Gos-3 ) ;
4542: LD_EXP 29
4546: PPUSH
4547: LD_STRING D2-Gos-3
4549: PPUSH
4550: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
4554: LD_EXP 12
4558: PPUSH
4559: LD_STRING D2-JMM-4
4561: PPUSH
4562: CALL_OW 88
// Say ( Gossudarov , D2-Gos-4 ) ;
4566: LD_EXP 29
4570: PPUSH
4571: LD_STRING D2-Gos-4
4573: PPUSH
4574: CALL_OW 88
// end ; Say ( JMM , D2-JMM-5 ) ;
4578: LD_EXP 12
4582: PPUSH
4583: LD_STRING D2-JMM-5
4585: PPUSH
4586: CALL_OW 88
// Say ( Gossudarov , D2-Gos-5 ) ;
4590: LD_EXP 29
4594: PPUSH
4595: LD_STRING D2-Gos-5
4597: PPUSH
4598: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4602: LD_EXP 12
4606: PPUSH
4607: LD_STRING D2-JMM-6
4609: PPUSH
4610: CALL_OW 88
// DialogueOff ;
4614: CALL_OW 7
// wait ( 0 0$2 ) ;
4618: LD_INT 70
4620: PPUSH
4621: CALL_OW 67
// if Kirilenkova then
4625: LD_EXP 30
4629: IFFALSE 4643
// Say ( Kirilenkova , D3-Kir-1 ) ;
4631: LD_EXP 30
4635: PPUSH
4636: LD_STRING D3-Kir-1
4638: PPUSH
4639: CALL_OW 88
// gossudarov_arrive := true ;
4643: LD_ADDR_EXP 4
4647: PUSH
4648: LD_INT 1
4650: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4651: LD_INT 35
4653: PPUSH
4654: CALL_OW 67
// until ru_lab_builded ;
4658: LD_EXP 5
4662: IFFALSE 4651
// if Kirilenkova then
4664: LD_EXP 30
4668: IFFALSE 4684
// Say ( Kirilenkova , D3a-Kir-1 ) else
4670: LD_EXP 30
4674: PPUSH
4675: LD_STRING D3a-Kir-1
4677: PPUSH
4678: CALL_OW 88
4682: GO 4706
// begin un := SciRu ;
4684: LD_ADDR_VAR 0 4
4688: PUSH
4689: CALL 7639 0 0
4693: ST_TO_ADDR
// Say ( un , D3a-Sci1-1 ) ;
4694: LD_VAR 0 4
4698: PPUSH
4699: LD_STRING D3a-Sci1-1
4701: PPUSH
4702: CALL_OW 88
// end ; if Kirilenkova or un then
4706: LD_EXP 30
4710: PUSH
4711: LD_VAR 0 4
4715: OR
4716: IFFALSE 4730
// Say ( JMM , D3a-JMM-1 ) ;
4718: LD_EXP 12
4722: PPUSH
4723: LD_STRING D3a-JMM-1
4725: PPUSH
4726: CALL_OW 88
// end ;
4730: LD_VAR 0 1
4734: RET
// every 0 0$40 trigger GetSide ( Gossudarov ) = 7 do var i , tmp , un ;
4735: LD_EXP 29
4739: PPUSH
4740: CALL_OW 255
4744: PUSH
4745: LD_INT 7
4747: EQUAL
4748: IFFALSE 4931
4750: GO 4752
4752: DISABLE
4753: LD_INT 0
4755: PPUSH
4756: PPUSH
4757: PPUSH
// begin uc_side := 3 ;
4758: LD_ADDR_OWVAR 20
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// uc_nation := 3 ;
4766: LD_ADDR_OWVAR 21
4770: PUSH
4771: LD_INT 3
4773: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_heavy_machine_gun , 100 ) ;
4774: LD_INT 21
4776: PPUSH
4777: LD_INT 3
4779: PPUSH
4780: LD_INT 3
4782: PPUSH
4783: LD_INT 42
4785: PPUSH
4786: LD_INT 100
4788: PPUSH
4789: CALL 15241 0 5
// un := CreateVehicle ;
4793: LD_ADDR_VAR 0 3
4797: PUSH
4798: CALL_OW 45
4802: ST_TO_ADDR
// PlaceUnitArea ( un , south_west_spawn , false ) ;
4803: LD_VAR 0 3
4807: PPUSH
4808: LD_INT 15
4810: PPUSH
4811: LD_INT 0
4813: PPUSH
4814: CALL_OW 49
// ComMoveXY ( un , 67 , 45 ) ;
4818: LD_VAR 0 3
4822: PPUSH
4823: LD_INT 67
4825: PPUSH
4826: LD_INT 45
4828: PPUSH
4829: CALL_OW 111
// AddComWait ( un , 0 0$2 ) ;
4833: LD_VAR 0 3
4837: PPUSH
4838: LD_INT 70
4840: PPUSH
4841: CALL_OW 202
// AddComMoveXY ( un , 69 , 18 ) ;
4845: LD_VAR 0 3
4849: PPUSH
4850: LD_INT 69
4852: PPUSH
4853: LD_INT 18
4855: PPUSH
4856: CALL_OW 171
// AddComMoveXY ( un , 60 , 2 ) ;
4860: LD_VAR 0 3
4864: PPUSH
4865: LD_INT 60
4867: PPUSH
4868: LD_INT 2
4870: PPUSH
4871: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4875: LD_INT 35
4877: PPUSH
4878: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , north_spawn ) ;
4882: LD_VAR 0 3
4886: PPUSH
4887: CALL_OW 302
4891: NOT
4892: PUSH
4893: LD_VAR 0 3
4897: PPUSH
4898: LD_INT 17
4900: PPUSH
4901: CALL_OW 308
4905: OR
4906: IFFALSE 4875
// if IsInArea ( un , north_spawn ) then
4908: LD_VAR 0 3
4912: PPUSH
4913: LD_INT 17
4915: PPUSH
4916: CALL_OW 308
4920: IFFALSE 4931
// RemoveUnit ( un ) ;
4922: LD_VAR 0 3
4926: PPUSH
4927: CALL_OW 64
// end ;
4931: PPOPN 3
4933: END
// every 0 0$2 do var i , un , tmp ;
4934: GO 4936
4936: DISABLE
4937: LD_INT 0
4939: PPUSH
4940: PPUSH
4941: PPUSH
// begin repeat wait ( 0 0$2 ) ;
4942: LD_INT 70
4944: PPUSH
4945: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 3 ] ] ) ;
4949: LD_ADDR_VAR 0 3
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 7
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: LD_INT 101
4966: PUSH
4967: LD_INT 3
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PPUSH
4978: CALL_OW 69
4982: ST_TO_ADDR
// until tmp ;
4983: LD_VAR 0 3
4987: IFFALSE 4942
// un := NearestUnitToUnit ( tmp , JMM ) ;
4989: LD_ADDR_VAR 0 2
4993: PUSH
4994: LD_VAR 0 3
4998: PPUSH
4999: LD_EXP 12
5003: PPUSH
5004: CALL_OW 74
5008: ST_TO_ADDR
// player_spotted := true ;
5009: LD_ADDR_EXP 6
5013: PUSH
5014: LD_INT 1
5016: ST_TO_ADDR
// tmp := SciRu ;
5017: LD_ADDR_VAR 0 3
5021: PUSH
5022: CALL 7639 0 0
5026: ST_TO_ADDR
// DialogueOn ;
5027: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 7 , - 8 ) ;
5031: LD_VAR 0 2
5035: PPUSH
5036: CALL_OW 250
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: CALL_OW 251
5050: PPUSH
5051: LD_INT 7
5053: PPUSH
5054: LD_INT 8
5056: NEG
5057: PPUSH
5058: CALL_OW 330
// CenterNowOnUnits ( un ) ;
5062: LD_VAR 0 2
5066: PPUSH
5067: CALL_OW 87
// if tmp then
5071: LD_VAR 0 3
5075: IFFALSE 5089
// Say ( tmp , D4-RSci1-1 ) ;
5077: LD_VAR 0 3
5081: PPUSH
5082: LD_STRING D4-RSci1-1
5084: PPUSH
5085: CALL_OW 88
// if Gossudarov then
5089: LD_EXP 29
5093: IFFALSE 5119
// begin Say ( Gossudarov , D4-Gos-1 ) ;
5095: LD_EXP 29
5099: PPUSH
5100: LD_STRING D4-Gos-1
5102: PPUSH
5103: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5107: LD_EXP 12
5111: PPUSH
5112: LD_STRING D4-JMM-1
5114: PPUSH
5115: CALL_OW 88
// end ; RemoveSeeing ( GetX ( un ) , GetY ( un ) , 7 ) ;
5119: LD_VAR 0 2
5123: PPUSH
5124: CALL_OW 250
5128: PPUSH
5129: LD_VAR 0 2
5133: PPUSH
5134: CALL_OW 251
5138: PPUSH
5139: LD_INT 7
5141: PPUSH
5142: CALL_OW 331
// DialogueOff ;
5146: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
5150: LD_STRING M5
5152: PPUSH
5153: CALL_OW 337
// end ;
5157: PPOPN 3
5159: END
// every 0 0$30 + 1 1$30 trigger player_spotted do
5160: LD_EXP 6
5164: IFFALSE 5623
5166: GO 5168
5168: DISABLE
// begin PrepareBelkov ;
5169: CALL 1914 0 0
// ComMoveXY ( Belkov , 118 , 106 ) ;
5173: LD_EXP 44
5177: PPUSH
5178: LD_INT 118
5180: PPUSH
5181: LD_INT 106
5183: PPUSH
5184: CALL_OW 111
// AddComHold ( Belkov ) ;
5188: LD_EXP 44
5192: PPUSH
5193: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
5197: LD_INT 35
5199: PPUSH
5200: CALL_OW 67
// until IsAt ( Belkov , 118 , 106 ) ;
5204: LD_EXP 44
5208: PPUSH
5209: LD_INT 118
5211: PPUSH
5212: LD_INT 106
5214: PPUSH
5215: CALL_OW 307
5219: IFFALSE 5197
// ChangeSideFog ( 4 , 7 ) ;
5221: LD_INT 4
5223: PPUSH
5224: LD_INT 7
5226: PPUSH
5227: CALL_OW 343
// if IsOk ( Belkov ) then
5231: LD_EXP 44
5235: PPUSH
5236: CALL_OW 302
5240: IFFALSE 5324
// begin InGameOn ;
5242: CALL_OW 8
// DialogueOn ;
5246: CALL_OW 6
// SayRadio ( Belkov , D5-Bel-1 ) ;
5250: LD_EXP 44
5254: PPUSH
5255: LD_STRING D5-Bel-1
5257: PPUSH
5258: CALL_OW 94
// if Gossudarov then
5262: LD_EXP 29
5266: IFFALSE 5316
// begin Say ( Gossudarov , D5-Gos-1 ) ;
5268: LD_EXP 29
5272: PPUSH
5273: LD_STRING D5-Gos-1
5275: PPUSH
5276: CALL_OW 88
// Say ( JMM , D5-JMM-1 ) ;
5280: LD_EXP 12
5284: PPUSH
5285: LD_STRING D5-JMM-1
5287: PPUSH
5288: CALL_OW 88
// Say ( Gossudarov , D5-Gos-2 ) ;
5292: LD_EXP 29
5296: PPUSH
5297: LD_STRING D5-Gos-2
5299: PPUSH
5300: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
5304: LD_EXP 12
5308: PPUSH
5309: LD_STRING D5-JMM-2
5311: PPUSH
5312: CALL_OW 88
// end ; DialogueOff ;
5316: CALL_OW 7
// InGameOff ;
5320: CALL_OW 9
// end ; case Query ( QSaveBelkov ) of 1 :
5324: LD_STRING QSaveBelkov
5326: PPUSH
5327: CALL_OW 97
5331: PUSH
5332: LD_INT 1
5334: DOUBLE
5335: EQUAL
5336: IFTRUE 5340
5338: GO 5390
5340: POP
// begin DialogueOn ;
5341: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5345: LD_EXP 12
5349: PPUSH
5350: LD_STRING D5a-JMM-1
5352: PPUSH
5353: CALL_OW 88
// SayRadio ( Belkov , D5a-Bel-1 ) ;
5357: LD_EXP 44
5361: PPUSH
5362: LD_STRING D5a-Bel-1
5364: PPUSH
5365: CALL_OW 94
// DialogueOff ;
5369: CALL_OW 7
// ComMoveXY ( Belkov , 83 , 49 ) ;
5373: LD_EXP 44
5377: PPUSH
5378: LD_INT 83
5380: PPUSH
5381: LD_INT 49
5383: PPUSH
5384: CALL_OW 111
// end ; 2 :
5388: GO 5450
5390: LD_INT 2
5392: DOUBLE
5393: EQUAL
5394: IFTRUE 5398
5396: GO 5449
5398: POP
// begin Say ( JMM , D5a-JMM-2 ) ;
5399: LD_EXP 12
5403: PPUSH
5404: LD_STRING D5a-JMM-2
5406: PPUSH
5407: CALL_OW 88
// ComWait ( Belkov , 0 0$10 ) ;
5411: LD_EXP 44
5415: PPUSH
5416: LD_INT 350
5418: PPUSH
5419: CALL_OW 142
// AddComMoveXY ( Belkov , 107 , 109 ) ;
5423: LD_EXP 44
5427: PPUSH
5428: LD_INT 107
5430: PPUSH
5431: LD_INT 109
5433: PPUSH
5434: CALL_OW 171
// AddComHold ( Belkov ) ;
5438: LD_EXP 44
5442: PPUSH
5443: CALL_OW 200
// end ; end ;
5447: GO 5450
5449: POP
// repeat wait ( 0 0$1 ) ;
5450: LD_INT 35
5452: PPUSH
5453: CALL_OW 67
// until ( IsDead ( Belkov ) and GetSide ( Belkov ) = 4 ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Belkov ) , Belkov ) < 10 ;
5457: LD_EXP 44
5461: PPUSH
5462: CALL_OW 301
5466: PUSH
5467: LD_EXP 44
5471: PPUSH
5472: CALL_OW 255
5476: PUSH
5477: LD_INT 4
5479: EQUAL
5480: AND
5481: PUSH
5482: LD_INT 22
5484: PUSH
5485: LD_INT 7
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PPUSH
5492: CALL_OW 69
5496: PPUSH
5497: LD_EXP 44
5501: PPUSH
5502: CALL_OW 74
5506: PPUSH
5507: LD_EXP 44
5511: PPUSH
5512: CALL_OW 296
5516: PUSH
5517: LD_INT 10
5519: LESS
5520: OR
5521: IFFALSE 5450
// if IsDead ( Belkov ) then
5523: LD_EXP 44
5527: PPUSH
5528: CALL_OW 301
5532: IFFALSE 5557
// begin CenterNowOnUnits ( Belkov ) ;
5534: LD_EXP 44
5538: PPUSH
5539: CALL_OW 87
// Say ( JMM , D5a-JMM-2a ) ;
5543: LD_EXP 12
5547: PPUSH
5548: LD_STRING D5a-JMM-2a
5550: PPUSH
5551: CALL_OW 88
// exit ;
5555: GO 5623
// end ; if See ( 7 , Belkov ) then
5557: LD_INT 7
5559: PPUSH
5560: LD_EXP 44
5564: PPUSH
5565: CALL_OW 292
5569: IFFALSE 5583
// SetSide ( Belkov , 7 ) ;
5571: LD_EXP 44
5575: PPUSH
5576: LD_INT 7
5578: PPUSH
5579: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
5583: LD_INT 35
5585: PPUSH
5586: CALL_OW 67
// until GetDistUnitXY ( Belkov , 66 , 45 ) < 30 ;
5590: LD_EXP 44
5594: PPUSH
5595: LD_INT 66
5597: PPUSH
5598: LD_INT 45
5600: PPUSH
5601: CALL_OW 297
5605: PUSH
5606: LD_INT 30
5608: LESS
5609: IFFALSE 5583
// Say ( Belkov , D6-Bel-1 ) ;
5611: LD_EXP 44
5615: PPUSH
5616: LD_STRING D6-Bel-1
5618: PPUSH
5619: CALL_OW 88
// end ;
5623: END
// every 0 0$1 trigger IsOk ( Belkov ) and UnitShoot ( Belkov ) in FilterAllUnits ( [ f_or , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ) do
5624: LD_EXP 44
5628: PPUSH
5629: CALL_OW 302
5633: PUSH
5634: LD_EXP 44
5638: PPUSH
5639: CALL_OW 504
5643: PUSH
5644: LD_INT 2
5646: PUSH
5647: LD_INT 34
5649: PUSH
5650: LD_INT 47
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PUSH
5657: LD_INT 34
5659: PUSH
5660: LD_INT 45
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: LIST
5671: PPUSH
5672: CALL_OW 69
5676: IN
5677: AND
5678: IFFALSE 5695
5680: GO 5682
5682: DISABLE
// Say ( Belkov , D7-Bel-1 ) ;
5683: LD_EXP 44
5687: PPUSH
5688: LD_STRING D7-Bel-1
5690: PPUSH
5691: CALL_OW 88
5695: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 2 ] ] ) and not ar_base_spotted and not IsPlaced ( Burlak ) do var tmp ;
5696: LD_INT 22
5698: PUSH
5699: LD_INT 7
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: LD_INT 101
5708: PUSH
5709: LD_INT 2
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PPUSH
5720: CALL_OW 69
5724: PUSH
5725: LD_EXP 8
5729: NOT
5730: AND
5731: PUSH
5732: LD_EXP 43
5736: PPUSH
5737: CALL_OW 305
5741: NOT
5742: AND
5743: IFFALSE 6213
5745: GO 5747
5747: DISABLE
5748: LD_INT 0
5750: PPUSH
// begin ar_base_spotted := true ;
5751: LD_ADDR_EXP 8
5755: PUSH
5756: LD_INT 1
5758: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) ;
5759: LD_ADDR_VAR 0 1
5763: PUSH
5764: LD_INT 22
5766: PUSH
5767: LD_INT 2
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: LD_INT 21
5776: PUSH
5777: LD_INT 3
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PPUSH
5788: CALL_OW 69
5792: ST_TO_ADDR
// tmp := NearestUnitToUnit ( tmp , JMM ) ;
5793: LD_ADDR_VAR 0 1
5797: PUSH
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_EXP 12
5807: PPUSH
5808: CALL_OW 74
5812: ST_TO_ADDR
// RevealFogArea ( 7 , area_base_arabian ) ;
5813: LD_INT 7
5815: PPUSH
5816: LD_INT 3
5818: PPUSH
5819: CALL_OW 332
// DialogueOn ;
5823: CALL_OW 6
// CenterNowOnXY ( GetX ( tmp ) , GetY ( tmp ) ) ;
5827: LD_VAR 0 1
5831: PPUSH
5832: CALL_OW 250
5836: PPUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 251
5846: PPUSH
5847: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Frank , Roth , Cornel , Denis , Gladstone ] ;
5851: LD_ADDR_VAR 0 1
5855: PUSH
5856: LD_INT 22
5858: PUSH
5859: LD_INT 7
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: PUSH
5866: LD_INT 23
5868: PUSH
5869: LD_INT 1
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 26
5878: PUSH
5879: LD_INT 1
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: PPUSH
5891: CALL_OW 69
5895: PUSH
5896: LD_EXP 12
5900: PUSH
5901: LD_EXP 16
5905: PUSH
5906: LD_EXP 17
5910: PUSH
5911: LD_EXP 24
5915: PUSH
5916: LD_EXP 13
5920: PUSH
5921: LD_EXP 22
5925: PUSH
5926: LD_EXP 18
5930: PUSH
5931: LD_EXP 20
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: DIFF
5946: ST_TO_ADDR
// if not tmp then
5947: LD_VAR 0 1
5951: NOT
5952: IFFALSE 6026
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_female ] ] ) diff [ Joan , Lisa , Kikuchi , Simms ] ;
5954: LD_ADDR_VAR 0 1
5958: PUSH
5959: LD_INT 22
5961: PUSH
5962: LD_INT 7
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: LD_INT 23
5971: PUSH
5972: LD_INT 1
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: LD_INT 26
5981: PUSH
5982: LD_INT 2
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: LIST
5993: PPUSH
5994: CALL_OW 69
5998: PUSH
5999: LD_EXP 27
6003: PUSH
6004: LD_EXP 14
6008: PUSH
6009: LD_EXP 25
6013: PUSH
6014: LD_EXP 26
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: DIFF
6025: ST_TO_ADDR
// if tmp then
6026: LD_VAR 0 1
6030: IFFALSE 6101
// case GetSex ( tmp [ 1 ] ) of sex_male :
6032: LD_VAR 0 1
6036: PUSH
6037: LD_INT 1
6039: ARRAY
6040: PPUSH
6041: CALL_OW 258
6045: PUSH
6046: LD_INT 1
6048: DOUBLE
6049: EQUAL
6050: IFTRUE 6054
6052: GO 6073
6054: POP
// Say ( tmp [ 1 ] , D9-Sol1-1 ) ; sex_female :
6055: LD_VAR 0 1
6059: PUSH
6060: LD_INT 1
6062: ARRAY
6063: PPUSH
6064: LD_STRING D9-Sol1-1
6066: PPUSH
6067: CALL_OW 88
6071: GO 6101
6073: LD_INT 2
6075: DOUBLE
6076: EQUAL
6077: IFTRUE 6081
6079: GO 6100
6081: POP
// Say ( tmp [ 1 ] , D9-FSol1-1 ) ; end ;
6082: LD_VAR 0 1
6086: PUSH
6087: LD_INT 1
6089: ARRAY
6090: PPUSH
6091: LD_STRING D9-FSol1-1
6093: PPUSH
6094: CALL_OW 88
6098: GO 6101
6100: POP
// if Frank then
6101: LD_EXP 24
6105: IFFALSE 6209
// begin PlaceSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 , 8 ) ;
6107: LD_EXP 53
6111: PPUSH
6112: CALL_OW 250
6116: PPUSH
6117: LD_EXP 53
6121: PPUSH
6122: CALL_OW 251
6126: PPUSH
6127: LD_INT 7
6129: PPUSH
6130: LD_INT 8
6132: PPUSH
6133: CALL_OW 330
// CenterNowOnUnits ( mastodont ) ;
6137: LD_EXP 53
6141: PPUSH
6142: CALL_OW 87
// Say ( Frank , D9-Frank-1 ) ;
6146: LD_EXP 24
6150: PPUSH
6151: LD_STRING D9-Frank-1
6153: PPUSH
6154: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
6158: LD_EXP 12
6162: PPUSH
6163: LD_STRING D9-JMM-1
6165: PPUSH
6166: CALL_OW 88
// Say ( Frank , D9-Frank-2 ) ;
6170: LD_EXP 24
6174: PPUSH
6175: LD_STRING D9-Frank-2
6177: PPUSH
6178: CALL_OW 88
// RemoveSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 ) ;
6182: LD_EXP 53
6186: PPUSH
6187: CALL_OW 250
6191: PPUSH
6192: LD_EXP 53
6196: PPUSH
6197: CALL_OW 251
6201: PPUSH
6202: LD_INT 7
6204: PPUSH
6205: CALL_OW 331
// end ; DialogueOff ;
6209: CALL_OW 7
// end ;
6213: PPOPN 1
6215: END
// every 0 0$20 trigger first_attack do var i , selected_option ;
6216: LD_EXP 7
6220: IFFALSE 7225
6222: GO 6224
6224: DISABLE
6225: LD_INT 0
6227: PPUSH
6228: PPUSH
// begin selected_option := 1 ;
6229: LD_ADDR_VAR 0 2
6233: PUSH
6234: LD_INT 1
6236: ST_TO_ADDR
// wait ( 5 5$00 ) ;
6237: LD_INT 10500
6239: PPUSH
6240: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6244: LD_INT 35
6246: PPUSH
6247: CALL_OW 67
// until not ru_attackers ;
6251: LD_EXP 49
6255: NOT
6256: IFFALSE 6244
// PrepareBurlak ;
6258: CALL 2026 0 0
// repeat wait ( 0 0$2 ) ;
6262: LD_INT 70
6264: PPUSH
6265: CALL_OW 67
// until not HasTask ( Burlak ) ;
6269: LD_EXP 43
6273: PPUSH
6274: CALL_OW 314
6278: NOT
6279: IFFALSE 6262
// InGameOn ;
6281: CALL_OW 8
// DialogueOn ;
6285: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
6289: LD_EXP 46
6293: PPUSH
6294: CALL_OW 87
// SayRadio ( Burlak , D10-Bur-1 ) ;
6298: LD_EXP 43
6302: PPUSH
6303: LD_STRING D10-Bur-1
6305: PPUSH
6306: CALL_OW 94
// if Belkov and GetSide ( Belkov ) = 7 then
6310: LD_EXP 44
6314: PUSH
6315: LD_EXP 44
6319: PPUSH
6320: CALL_OW 255
6324: PUSH
6325: LD_INT 7
6327: EQUAL
6328: AND
6329: IFFALSE 6343
// Say ( Belkov , D10-Bel-1 ) ;
6331: LD_EXP 44
6335: PPUSH
6336: LD_STRING D10-Bel-1
6338: PPUSH
6339: CALL_OW 88
// if Gossudarov then
6343: LD_EXP 29
6347: IFFALSE 6361
// Say ( Gossudarov , D10-Gos-1 ) ;
6349: LD_EXP 29
6353: PPUSH
6354: LD_STRING D10-Gos-1
6356: PPUSH
6357: CALL_OW 88
// if Kirilenkova then
6361: LD_EXP 30
6365: IFFALSE 6379
// Say ( Kirilenkova , D10-Kir-1 ) ;
6367: LD_EXP 30
6371: PPUSH
6372: LD_STRING D10-Kir-1
6374: PPUSH
6375: CALL_OW 88
// Say ( SolRu , D10-RSol1-1 ) ;
6379: CALL 7768 0 0
6383: PPUSH
6384: LD_STRING D10-RSol1-1
6386: PPUSH
6387: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-2 ) ;
6391: LD_EXP 43
6395: PPUSH
6396: LD_STRING D10-Bur-2
6398: PPUSH
6399: CALL_OW 94
// Say ( JMM , D10-JMM-2 ) ;
6403: LD_EXP 12
6407: PPUSH
6408: LD_STRING D10-JMM-2
6410: PPUSH
6411: CALL_OW 88
// if Kirilenkova then
6415: LD_EXP 30
6419: IFFALSE 6435
// Say ( Kirilenkova , D10-Kir-2 ) else
6421: LD_EXP 30
6425: PPUSH
6426: LD_STRING D10-Kir-2
6428: PPUSH
6429: CALL_OW 88
6433: GO 6447
// Say ( SolRu , D10-RSol1-2 ) ;
6435: CALL 7768 0 0
6439: PPUSH
6440: LD_STRING D10-RSol1-2
6442: PPUSH
6443: CALL_OW 88
// Say ( JMM , D10-JMM-3 ) ;
6447: LD_EXP 12
6451: PPUSH
6452: LD_STRING D10-JMM-3
6454: PPUSH
6455: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-3 ) ;
6459: LD_EXP 43
6463: PPUSH
6464: LD_STRING D10-Bur-3
6466: PPUSH
6467: CALL_OW 94
// Say ( JMM , D10-JMM-4 ) ;
6471: LD_EXP 12
6475: PPUSH
6476: LD_STRING D10-JMM-4
6478: PPUSH
6479: CALL_OW 88
// DialogueOff ;
6483: CALL_OW 7
// InGameOff ;
6487: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
6491: LD_STRING M2
6493: PPUSH
6494: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
6498: LD_INT 35
6500: PPUSH
6501: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , Burlak , 8 ] ] ) ;
6505: LD_INT 22
6507: PUSH
6508: LD_INT 7
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 91
6517: PUSH
6518: LD_EXP 43
6522: PUSH
6523: LD_INT 8
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 69
6539: IFFALSE 6498
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
6541: LD_ADDR_VAR 0 1
6545: PUSH
6546: LD_INT 22
6548: PUSH
6549: LD_INT 4
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PPUSH
6556: CALL_OW 69
6560: PUSH
6561: FOR_IN
6562: IFFALSE 6578
// SetSide ( i , 7 ) ;
6564: LD_VAR 0 1
6568: PPUSH
6569: LD_INT 7
6571: PPUSH
6572: CALL_OW 235
6576: GO 6561
6578: POP
6579: POP
// ChangeMissionObjectives ( M3 ) ;
6580: LD_STRING M3
6582: PPUSH
6583: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
6587: LD_INT 35
6589: PPUSH
6590: CALL_OW 67
// until GetDistUnits ( JMM , Burlak ) < 8 ;
6594: LD_EXP 12
6598: PPUSH
6599: LD_EXP 43
6603: PPUSH
6604: CALL_OW 296
6608: PUSH
6609: LD_INT 8
6611: LESS
6612: IFFALSE 6587
// ComTurnUnit ( JMM , Burlak ) ;
6614: LD_EXP 12
6618: PPUSH
6619: LD_EXP 43
6623: PPUSH
6624: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
6628: LD_EXP 43
6632: PPUSH
6633: LD_EXP 12
6637: PPUSH
6638: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6642: LD_INT 10
6644: PPUSH
6645: CALL_OW 67
// DialogueOn ;
6649: CALL_OW 6
// Say ( JMM , D11-JMM-1 ) ;
6653: LD_EXP 12
6657: PPUSH
6658: LD_STRING D11-JMM-1
6660: PPUSH
6661: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
6665: LD_EXP 43
6669: PPUSH
6670: LD_STRING D11-Bur-1
6672: PPUSH
6673: CALL_OW 88
// Say ( JMM , D11-JMM-2 ) ;
6677: LD_EXP 12
6681: PPUSH
6682: LD_STRING D11-JMM-2
6684: PPUSH
6685: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
6689: LD_EXP 43
6693: PPUSH
6694: LD_STRING D11-Bur-2
6696: PPUSH
6697: CALL_OW 88
// Say ( JMM , D11-JMM-3 ) ;
6701: LD_EXP 12
6705: PPUSH
6706: LD_STRING D11-JMM-3
6708: PPUSH
6709: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
6713: LD_EXP 43
6717: PPUSH
6718: LD_STRING D11-Bur-3
6720: PPUSH
6721: CALL_OW 88
// Say ( JMM , D11-JMM-4 ) ;
6725: LD_EXP 12
6729: PPUSH
6730: LD_STRING D11-JMM-4
6732: PPUSH
6733: CALL_OW 88
// if ar_base_spotted then
6737: LD_EXP 8
6741: IFFALSE 6757
// Say ( Burlak , D12-Bur-1 ) else
6743: LD_EXP 43
6747: PPUSH
6748: LD_STRING D12-Bur-1
6750: PPUSH
6751: CALL_OW 88
6755: GO 6796
// begin RevealFogArea ( 7 , area_base_arabian ) ;
6757: LD_INT 7
6759: PPUSH
6760: LD_INT 3
6762: PPUSH
6763: CALL_OW 332
// CenterNowOnXY ( 127 , 45 ) ;
6767: LD_INT 127
6769: PPUSH
6770: LD_INT 45
6772: PPUSH
6773: CALL_OW 86
// Say ( Burlak , D12-Bur-1a ) ;
6777: LD_EXP 43
6781: PPUSH
6782: LD_STRING D12-Bur-1a
6784: PPUSH
6785: CALL_OW 88
// dwait ( 0 0$2 ) ;
6789: LD_INT 70
6791: PPUSH
6792: CALL_OW 68
// end ; Say ( Burlak , D12-Bur-1b ) ;
6796: LD_EXP 43
6800: PPUSH
6801: LD_STRING D12-Bur-1b
6803: PPUSH
6804: CALL_OW 88
// Say ( JMM , D12-JMM-1 ) ;
6808: LD_EXP 12
6812: PPUSH
6813: LD_STRING D12-JMM-1
6815: PPUSH
6816: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
6820: LD_EXP 43
6824: PPUSH
6825: LD_STRING D12-Bur-2
6827: PPUSH
6828: CALL_OW 88
// if Roth then
6832: LD_EXP 13
6836: IFFALSE 6852
// Say ( Roth , D12-Roth-2 ) else
6838: LD_EXP 13
6842: PPUSH
6843: LD_STRING D12-Roth-2
6845: PPUSH
6846: CALL_OW 88
6850: GO 6864
// Say ( SciRu , D12-RSci1-2 ) ;
6852: CALL 7639 0 0
6856: PPUSH
6857: LD_STRING D12-RSci1-2
6859: PPUSH
6860: CALL_OW 88
// Say ( JMM , D12-JMM-2 ) ;
6864: LD_EXP 12
6868: PPUSH
6869: LD_STRING D12-JMM-2
6871: PPUSH
6872: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
6876: LD_EXP 43
6880: PPUSH
6881: LD_STRING D12-Bur-3
6883: PPUSH
6884: CALL_OW 88
// Say ( JMM , D12-JMM-3 ) ;
6888: LD_EXP 12
6892: PPUSH
6893: LD_STRING D12-JMM-3
6895: PPUSH
6896: CALL_OW 88
// Say ( Burlak , D12-Bur-4 ) ;
6900: LD_EXP 43
6904: PPUSH
6905: LD_STRING D12-Bur-4
6907: PPUSH
6908: CALL_OW 88
// case Query ( QBase ) of 1 :
6912: LD_STRING QBase
6914: PPUSH
6915: CALL_OW 97
6919: PUSH
6920: LD_INT 1
6922: DOUBLE
6923: EQUAL
6924: IFTRUE 6928
6926: GO 7046
6928: POP
// begin Say ( JMM , D13a-JMM-1 ) ;
6929: LD_EXP 12
6933: PPUSH
6934: LD_STRING D13a-JMM-1
6936: PPUSH
6937: CALL_OW 88
// Say ( Burlak , D13a-Bur-1 ) ;
6941: LD_EXP 43
6945: PPUSH
6946: LD_STRING D13a-Bur-1
6948: PPUSH
6949: CALL_OW 88
// if Roth then
6953: LD_EXP 13
6957: IFFALSE 6973
// Say ( Roth , D13a-Roth-1 ) else
6959: LD_EXP 13
6963: PPUSH
6964: LD_STRING D13a-Roth-1
6966: PPUSH
6967: CALL_OW 88
6971: GO 6985
// Say ( SciRu , D13a-RSci1-1 ) ;
6973: CALL 7639 0 0
6977: PPUSH
6978: LD_STRING D13a-RSci1-1
6980: PPUSH
6981: CALL_OW 88
// Say ( JMM , D13a-JMM-2 ) ;
6985: LD_EXP 12
6989: PPUSH
6990: LD_STRING D13a-JMM-2
6992: PPUSH
6993: CALL_OW 88
// case Query ( QBaseAgain ) of 1 :
6997: LD_STRING QBaseAgain
6999: PPUSH
7000: CALL_OW 97
7004: PUSH
7005: LD_INT 1
7007: DOUBLE
7008: EQUAL
7009: IFTRUE 7013
7011: GO 7024
7013: POP
// selected_option := 2 ; 2 :
7014: LD_ADDR_VAR 0 2
7018: PUSH
7019: LD_INT 2
7021: ST_TO_ADDR
7022: GO 7044
7024: LD_INT 2
7026: DOUBLE
7027: EQUAL
7028: IFTRUE 7032
7030: GO 7043
7032: POP
// selected_option := 3 ; end ;
7033: LD_ADDR_VAR 0 2
7037: PUSH
7038: LD_INT 3
7040: ST_TO_ADDR
7041: GO 7044
7043: POP
// end ; 2 :
7044: GO 7085
7046: LD_INT 2
7048: DOUBLE
7049: EQUAL
7050: IFTRUE 7054
7052: GO 7065
7054: POP
// selected_option := 2 ; 3 :
7055: LD_ADDR_VAR 0 2
7059: PUSH
7060: LD_INT 2
7062: ST_TO_ADDR
7063: GO 7085
7065: LD_INT 3
7067: DOUBLE
7068: EQUAL
7069: IFTRUE 7073
7071: GO 7084
7073: POP
// selected_option := 3 ; end ;
7074: LD_ADDR_VAR 0 2
7078: PUSH
7079: LD_INT 3
7081: ST_TO_ADDR
7082: GO 7085
7084: POP
// if selected_option = 2 then
7085: LD_VAR 0 2
7089: PUSH
7090: LD_INT 2
7092: EQUAL
7093: IFFALSE 7187
// begin Say ( JMM , D13b-JMM-1 ) ;
7095: LD_EXP 12
7099: PPUSH
7100: LD_STRING D13b-JMM-1
7102: PPUSH
7103: CALL_OW 88
// Say ( Burlak , D13b-Bur-1 ) ;
7107: LD_EXP 43
7111: PPUSH
7112: LD_STRING D13b-Bur-1
7114: PPUSH
7115: CALL_OW 88
// Say ( JMM , D13b-JMM-2 ) ;
7119: LD_EXP 12
7123: PPUSH
7124: LD_STRING D13b-JMM-2
7126: PPUSH
7127: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-2 ) ;
7131: LD_EXP 52
7135: PPUSH
7136: LD_STRING D13b-Abd-2
7138: PPUSH
7139: CALL_OW 94
// Say ( JMM , D13b-JMM-3 ) ;
7143: LD_EXP 12
7147: PPUSH
7148: LD_STRING D13b-JMM-3
7150: PPUSH
7151: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-3 ) ;
7155: LD_EXP 52
7159: PPUSH
7160: LD_STRING D13b-Abd-3
7162: PPUSH
7163: CALL_OW 94
// Say ( JMM , D13b-JMM-4 ) ;
7167: LD_EXP 12
7171: PPUSH
7172: LD_STRING D13b-JMM-4
7174: PPUSH
7175: CALL_OW 88
// ar_active_attack := true ;
7179: LD_ADDR_EXP 9
7183: PUSH
7184: LD_INT 1
7186: ST_TO_ADDR
// end ; if selected_option = 3 then
7187: LD_VAR 0 2
7191: PUSH
7192: LD_INT 3
7194: EQUAL
7195: IFFALSE 7221
// begin Say ( JMM , D13c-JMM-1 ) ;
7197: LD_EXP 12
7201: PPUSH
7202: LD_STRING D13c-JMM-1
7204: PPUSH
7205: CALL_OW 88
// Say ( Burlak , D13c-Bur-1 ) ;
7209: LD_EXP 43
7213: PPUSH
7214: LD_STRING D13c-Bur-1
7216: PPUSH
7217: CALL_OW 88
// end ; DialogueOff ;
7221: CALL_OW 7
// end ;
7225: PPOPN 2
7227: END
// every 0 0$1 trigger IsPlaced ( Burlak ) and GetSide ( Burlak ) = 7 do
7228: LD_EXP 43
7232: PPUSH
7233: CALL_OW 305
7237: PUSH
7238: LD_EXP 43
7242: PPUSH
7243: CALL_OW 255
7247: PUSH
7248: LD_INT 7
7250: EQUAL
7251: AND
7252: IFFALSE 7413
7254: GO 7256
7256: DISABLE
// begin wait ( 4 4$40 ) ;
7257: LD_INT 9800
7259: PPUSH
7260: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7264: LD_INT 35
7266: PPUSH
7267: CALL_OW 67
// until not ru_attackers ;
7271: LD_EXP 49
7275: NOT
7276: IFFALSE 7264
// PrepareGnyevko ;
7278: CALL 1970 0 0
// ComMoveXY ( Gnyevko , 124 , 118 ) ;
7282: LD_EXP 45
7286: PPUSH
7287: LD_INT 124
7289: PPUSH
7290: LD_INT 118
7292: PPUSH
7293: CALL_OW 111
// AddComHold ( Gnyevko ) ;
7297: LD_EXP 45
7301: PPUSH
7302: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
7306: LD_INT 35
7308: PPUSH
7309: CALL_OW 67
// until IsAt ( Gnyevko , 124 , 118 ) ;
7313: LD_EXP 45
7317: PPUSH
7318: LD_INT 124
7320: PPUSH
7321: LD_INT 118
7323: PPUSH
7324: CALL_OW 307
7328: IFFALSE 7306
// SayRadio ( Gnyevko , DBelkov-Gny-1 ) ;
7330: LD_EXP 45
7334: PPUSH
7335: LD_STRING DBelkov-Gny-1
7337: PPUSH
7338: CALL_OW 94
// Say ( Burlak , DBelkov-Bur-1a ) ;
7342: LD_EXP 43
7346: PPUSH
7347: LD_STRING DBelkov-Bur-1a
7349: PPUSH
7350: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7354: LD_INT 35
7356: PPUSH
7357: CALL_OW 67
// until GetDistUnits ( Gnyevko , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Gnyevko ) ) < 8 ;
7361: LD_EXP 45
7365: PPUSH
7366: LD_INT 22
7368: PUSH
7369: LD_INT 7
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PPUSH
7376: CALL_OW 69
7380: PPUSH
7381: LD_EXP 45
7385: PPUSH
7386: CALL_OW 74
7390: PPUSH
7391: CALL_OW 296
7395: PUSH
7396: LD_INT 8
7398: LESS
7399: IFFALSE 7354
// SetSide ( Gnyevko , 7 ) ;
7401: LD_EXP 45
7405: PPUSH
7406: LD_INT 7
7408: PPUSH
7409: CALL_OW 235
// end ;
7413: END
// every 10 10$00 + 1 1$30 trigger GetSide ( Burlak ) = 7 do
7414: LD_EXP 43
7418: PPUSH
7419: CALL_OW 255
7423: PUSH
7424: LD_INT 7
7426: EQUAL
7427: IFFALSE 7437
7429: GO 7431
7431: DISABLE
// begin enable ;
7432: ENABLE
// PrepareAmericanAttack ;
7433: CALL 8957 0 0
// end ;
7437: END
// every 0 0$2 trigger FilterAllUnits ( [ f_side , 1 ] ) do var i , tmp ;
7438: LD_INT 22
7440: PUSH
7441: LD_INT 1
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PPUSH
7448: CALL_OW 69
7452: IFFALSE 7636
7454: GO 7456
7456: DISABLE
7457: LD_INT 0
7459: PPUSH
7460: PPUSH
// begin while true do
7461: LD_INT 1
7463: IFFALSE 7520
// begin wait ( 0 0$1 ) ;
7465: LD_INT 35
7467: PPUSH
7468: CALL_OW 67
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , JMM ) ;
7472: LD_ADDR_VAR 0 2
7476: PUSH
7477: LD_INT 22
7479: PUSH
7480: LD_INT 1
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: PPUSH
7487: CALL_OW 69
7491: PPUSH
7492: LD_EXP 12
7496: PPUSH
7497: CALL_OW 74
7501: ST_TO_ADDR
// if See ( 7 , tmp ) then
7502: LD_INT 7
7504: PPUSH
7505: LD_VAR 0 2
7509: PPUSH
7510: CALL_OW 292
7514: IFFALSE 7518
// break ;
7516: GO 7520
// end ;
7518: GO 7461
// DialogueOn ;
7520: CALL_OW 6
// CenterNowOnUnits ( tmp ) ;
7524: LD_VAR 0 2
7528: PPUSH
7529: CALL_OW 87
// PlaceSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 , 8 ) ;
7533: LD_VAR 0 2
7537: PPUSH
7538: CALL_OW 250
7542: PPUSH
7543: LD_VAR 0 2
7547: PPUSH
7548: CALL_OW 251
7552: PPUSH
7553: LD_INT 7
7555: PPUSH
7556: LD_INT 8
7558: PPUSH
7559: CALL_OW 330
// if Denis then
7563: LD_EXP 18
7567: IFFALSE 7581
// Say ( Denis , DAmerAttack-Pet-1 ) ;
7569: LD_EXP 18
7573: PPUSH
7574: LD_STRING DAmerAttack-Pet-1
7576: PPUSH
7577: CALL_OW 88
// Say ( JMM , DAmerAttack-JMM-1 ) ;
7581: LD_EXP 12
7585: PPUSH
7586: LD_STRING DAmerAttack-JMM-1
7588: PPUSH
7589: CALL_OW 88
// Say ( Burlak , DStop-Bur-1 ) ;
7593: LD_EXP 43
7597: PPUSH
7598: LD_STRING DStop-Bur-1
7600: PPUSH
7601: CALL_OW 88
// RemoveSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 ) ;
7605: LD_VAR 0 2
7609: PPUSH
7610: CALL_OW 250
7614: PPUSH
7615: LD_VAR 0 2
7619: PPUSH
7620: CALL_OW 251
7624: PPUSH
7625: LD_INT 7
7627: PPUSH
7628: CALL_OW 331
// DialogueOff ;
7632: CALL_OW 7
// end ;
7636: PPOPN 2
7638: END
// export function SciRu ; var tmp , t ; begin
7639: LD_INT 0
7641: PPUSH
7642: PPUSH
7643: PPUSH
// t := [ Gossudarov , Burlak , Titov , Belkov , Gnyevko ] ;
7644: LD_ADDR_VAR 0 3
7648: PUSH
7649: LD_EXP 29
7653: PUSH
7654: LD_EXP 43
7658: PUSH
7659: LD_EXP 31
7663: PUSH
7664: LD_EXP 44
7668: PUSH
7669: LD_EXP 45
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff t ;
7681: LD_ADDR_VAR 0 2
7685: PUSH
7686: LD_INT 22
7688: PUSH
7689: LD_INT 7
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: PUSH
7696: LD_INT 23
7698: PUSH
7699: LD_INT 3
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PUSH
7706: LD_INT 25
7708: PUSH
7709: LD_INT 4
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PUSH
7716: LD_INT 26
7718: PUSH
7719: LD_INT 1
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: PPUSH
7732: CALL_OW 69
7736: PUSH
7737: LD_VAR 0 3
7741: DIFF
7742: ST_TO_ADDR
// if tmp then
7743: LD_VAR 0 2
7747: IFFALSE 7763
// result := tmp [ 1 ] ;
7749: LD_ADDR_VAR 0 1
7753: PUSH
7754: LD_VAR 0 2
7758: PUSH
7759: LD_INT 1
7761: ARRAY
7762: ST_TO_ADDR
// end ;
7763: LD_VAR 0 1
7767: RET
// export function SolRu ; var tmp , t ; begin
7768: LD_INT 0
7770: PPUSH
7771: PPUSH
7772: PPUSH
// t := [ Belkov , Burlak , Gossudarov ] ;
7773: LD_ADDR_VAR 0 3
7777: PUSH
7778: LD_EXP 44
7782: PUSH
7783: LD_EXP 43
7787: PUSH
7788: LD_EXP 29
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 1 ] , [ f_sex , sex_male ] ] ) diff t ;
7798: LD_ADDR_VAR 0 2
7802: PUSH
7803: LD_INT 22
7805: PUSH
7806: LD_INT 7
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: PUSH
7813: LD_INT 23
7815: PUSH
7816: LD_INT 3
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PUSH
7823: LD_INT 25
7825: PUSH
7826: LD_INT 1
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: LD_INT 26
7835: PUSH
7836: LD_INT 1
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: PPUSH
7849: CALL_OW 69
7853: PUSH
7854: LD_VAR 0 3
7858: DIFF
7859: ST_TO_ADDR
// if tmp then
7860: LD_VAR 0 2
7864: IFFALSE 7880
// result := tmp [ 1 ] ;
7866: LD_ADDR_VAR 0 1
7870: PUSH
7871: LD_VAR 0 2
7875: PUSH
7876: LD_INT 1
7878: ARRAY
7879: ST_TO_ADDR
// end ; end_of_file
7880: LD_VAR 0 1
7884: RET
// on UnitDestroyed ( un ) do var i , side ;
7885: LD_INT 0
7887: PPUSH
7888: PPUSH
// begin if un in ru_attackers then
7889: LD_VAR 0 1
7893: PUSH
7894: LD_EXP 49
7898: IN
7899: IFFALSE 7917
// ru_attackers := ru_attackers diff un ;
7901: LD_ADDR_EXP 49
7905: PUSH
7906: LD_EXP 49
7910: PUSH
7911: LD_VAR 0 1
7915: DIFF
7916: ST_TO_ADDR
// if un in ar_attackers then
7917: LD_VAR 0 1
7921: PUSH
7922: LD_EXP 10
7926: IN
7927: IFFALSE 7945
// ar_attackers := ar_attackers diff un ;
7929: LD_ADDR_EXP 10
7933: PUSH
7934: LD_EXP 10
7938: PUSH
7939: LD_VAR 0 1
7943: DIFF
7944: ST_TO_ADDR
// if un = JMM then
7945: LD_VAR 0 1
7949: PUSH
7950: LD_EXP 12
7954: EQUAL
7955: IFFALSE 7966
// begin YouLost ( JMM ) ;
7957: LD_STRING JMM
7959: PPUSH
7960: CALL_OW 104
// exit ;
7964: GO 8055
// end ; if un = Burlak then
7966: LD_VAR 0 1
7970: PUSH
7971: LD_EXP 43
7975: EQUAL
7976: IFFALSE 7987
// begin YouLost ( Burlak ) ;
7978: LD_STRING Burlak
7980: PPUSH
7981: CALL_OW 104
// exit ;
7985: GO 8055
// end ; if un = freedom then
7987: LD_VAR 0 1
7991: PUSH
7992: LD_EXP 3
7996: EQUAL
7997: IFFALSE 8008
// begin YouLost ( Destroyed ) ;
7999: LD_STRING Destroyed
8001: PPUSH
8002: CALL_OW 104
// exit ;
8006: GO 8055
// end ; if un = Masha then
8008: LD_VAR 0 1
8012: PUSH
8013: LD_EXP 46
8017: EQUAL
8018: IFFALSE 8027
// ChangeMissionObjectives ( M4b ) ;
8020: LD_STRING M4b
8022: PPUSH
8023: CALL_OW 337
// if un = Mastodont then
8027: LD_VAR 0 1
8031: PUSH
8032: LD_EXP 53
8036: EQUAL
8037: IFFALSE 8046
// ChangeMissionObjectives ( M4a ) ;
8039: LD_STRING M4a
8041: PPUSH
8042: CALL_OW 337
// MCE_UnitDestroyed ( un ) ;
8046: LD_VAR 0 1
8050: PPUSH
8051: CALL 62349 0 1
// end ;
8055: PPOPN 3
8057: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
8058: LD_VAR 0 1
8062: PPUSH
8063: LD_VAR 0 2
8067: PPUSH
8068: CALL 64216 0 2
// end ;
8072: PPOPN 2
8074: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
8075: LD_VAR 0 1
8079: PPUSH
8080: CALL 63298 0 1
// end ;
8084: PPOPN 1
8086: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_depot ] ] ) then
8087: LD_VAR 0 1
8091: PUSH
8092: LD_INT 22
8094: PUSH
8095: LD_INT 7
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 30
8104: PUSH
8105: LD_INT 0
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: PPUSH
8116: CALL_OW 69
8120: IN
8121: IFFALSE 8160
// begin SetBName ( building , freedom ) ;
8123: LD_VAR 0 1
8127: PPUSH
8128: LD_STRING freedom
8130: PPUSH
8131: CALL_OW 500
// SetRestrict ( b_depot , 7 , false ) ;
8135: LD_INT 0
8137: PPUSH
8138: LD_INT 7
8140: PPUSH
8141: LD_INT 0
8143: PPUSH
8144: CALL_OW 324
// freedom := building ;
8148: LD_ADDR_EXP 3
8152: PUSH
8153: LD_VAR 0 1
8157: ST_TO_ADDR
// exit ;
8158: GO 8226
// end ; if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_btype , b_lab ] ] ) then
8160: LD_VAR 0 1
8164: PUSH
8165: LD_INT 22
8167: PUSH
8168: LD_INT 7
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: PUSH
8175: LD_INT 23
8177: PUSH
8178: LD_INT 3
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: PUSH
8185: LD_INT 30
8187: PUSH
8188: LD_INT 6
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: PPUSH
8200: CALL_OW 69
8204: IN
8205: IFFALSE 8217
// begin ru_lab_builded := true ;
8207: LD_ADDR_EXP 5
8211: PUSH
8212: LD_INT 1
8214: ST_TO_ADDR
// exit ;
8215: GO 8226
// end ; MCE_BuildingComplete ( building ) ;
8217: LD_VAR 0 1
8221: PPUSH
8222: CALL 63532 0 1
// end ;
8226: PPOPN 1
8228: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
8229: LD_VAR 0 1
8233: PPUSH
8234: LD_VAR 0 2
8238: PPUSH
8239: CALL 62025 0 2
// end ;
8243: PPOPN 2
8245: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
8246: LD_VAR 0 1
8250: PPUSH
8251: LD_VAR 0 2
8255: PPUSH
8256: LD_VAR 0 3
8260: PPUSH
8261: LD_VAR 0 4
8265: PPUSH
8266: LD_VAR 0 5
8270: PPUSH
8271: CALL 61652 0 5
// end ;
8275: PPOPN 5
8277: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
8278: LD_VAR 0 1
8282: PPUSH
8283: LD_VAR 0 2
8287: PPUSH
8288: CALL 61340 0 2
// end ;
8292: PPOPN 2
8294: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
8295: LD_VAR 0 1
8299: PPUSH
8300: LD_VAR 0 2
8304: PPUSH
8305: LD_VAR 0 3
8309: PPUSH
8310: LD_VAR 0 4
8314: PPUSH
8315: CALL 61185 0 4
// end ;
8319: PPOPN 4
8321: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
8322: LD_VAR 0 1
8326: PPUSH
8327: LD_VAR 0 2
8331: PPUSH
8332: LD_VAR 0 3
8336: PPUSH
8337: CALL 60967 0 3
// end ;
8341: PPOPN 3
8343: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
8344: LD_VAR 0 1
8348: PPUSH
8349: LD_VAR 0 2
8353: PPUSH
8354: CALL 60859 0 2
// end ;
8358: PPOPN 2
8360: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
8361: LD_VAR 0 1
8365: PPUSH
8366: LD_VAR 0 2
8370: PPUSH
8371: CALL 64470 0 2
// end ;
8375: PPOPN 2
8377: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
8378: LD_VAR 0 1
8382: PPUSH
8383: LD_VAR 0 2
8387: PPUSH
8388: LD_VAR 0 3
8392: PPUSH
8393: LD_VAR 0 4
8397: PPUSH
8398: CALL 64679 0 4
// end ;
8402: PPOPN 4
8404: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
8405: LD_VAR 0 1
8409: PPUSH
8410: LD_VAR 0 2
8414: PPUSH
8415: CALL 60675 0 2
// end ; end_of_file
8419: PPOPN 2
8421: END
// every 0 0$30 do var cr , time ;
8422: GO 8424
8424: DISABLE
8425: LD_INT 0
8427: PPUSH
8428: PPUSH
// begin time := 0 0$10 ;
8429: LD_ADDR_VAR 0 2
8433: PUSH
8434: LD_INT 350
8436: ST_TO_ADDR
// while game do
8437: LD_EXP 2
8441: IFFALSE 8540
// begin wait ( time ) ;
8443: LD_VAR 0 2
8447: PPUSH
8448: CALL_OW 67
// if tick > 2 2$00 then
8452: LD_OWVAR 1
8456: PUSH
8457: LD_INT 4200
8459: GREATER
8460: IFFALSE 8493
// time := time + [ 0 0$05 , 0 0$06 , 0 0$07 ] [ Difficulty ] ;
8462: LD_ADDR_VAR 0 2
8466: PUSH
8467: LD_VAR 0 2
8471: PUSH
8472: LD_INT 175
8474: PUSH
8475: LD_INT 210
8477: PUSH
8478: LD_INT 245
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: PUSH
8486: LD_OWVAR 67
8490: ARRAY
8491: PLUS
8492: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 70 , 49 , 25 , true ) ;
8493: LD_INT 1
8495: PPUSH
8496: LD_INT 5
8498: PPUSH
8499: CALL_OW 12
8503: PPUSH
8504: LD_INT 70
8506: PPUSH
8507: LD_INT 49
8509: PPUSH
8510: LD_INT 25
8512: PPUSH
8513: LD_INT 1
8515: PPUSH
8516: CALL_OW 56
// if time > 5 5$00 then
8520: LD_VAR 0 2
8524: PUSH
8525: LD_INT 10500
8527: GREATER
8528: IFFALSE 8538
// time := 0 0$30 ;
8530: LD_ADDR_VAR 0 2
8534: PUSH
8535: LD_INT 1050
8537: ST_TO_ADDR
// end ;
8538: GO 8437
// end ;
8540: PPOPN 2
8542: END
// every 0 0$30 do var cr , time ;
8543: GO 8545
8545: DISABLE
8546: LD_INT 0
8548: PPUSH
8549: PPUSH
// begin time := 0 0$01 ;
8550: LD_ADDR_VAR 0 2
8554: PUSH
8555: LD_INT 35
8557: ST_TO_ADDR
// while game do
8558: LD_EXP 2
8562: IFFALSE 8651
// begin wait ( time ) ;
8564: LD_VAR 0 2
8568: PPUSH
8569: CALL_OW 67
// time := time + [ 0 0$04 , 0 0$05 , 0 0$06 ] [ Difficulty ] ;
8573: LD_ADDR_VAR 0 2
8577: PUSH
8578: LD_VAR 0 2
8582: PUSH
8583: LD_INT 140
8585: PUSH
8586: LD_INT 175
8588: PUSH
8589: LD_INT 210
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: LIST
8596: PUSH
8597: LD_OWVAR 67
8601: ARRAY
8602: PLUS
8603: ST_TO_ADDR
// CreateCratesXYR ( rand ( 3 , 5 ) , 26 , 9 , 30 , true ) ;
8604: LD_INT 3
8606: PPUSH
8607: LD_INT 5
8609: PPUSH
8610: CALL_OW 12
8614: PPUSH
8615: LD_INT 26
8617: PPUSH
8618: LD_INT 9
8620: PPUSH
8621: LD_INT 30
8623: PPUSH
8624: LD_INT 1
8626: PPUSH
8627: CALL_OW 56
// if time > 3 3$00 then
8631: LD_VAR 0 2
8635: PUSH
8636: LD_INT 6300
8638: GREATER
8639: IFFALSE 8649
// time := 0 0$20 ;
8641: LD_ADDR_VAR 0 2
8645: PUSH
8646: LD_INT 700
8648: ST_TO_ADDR
// end ;
8649: GO 8558
// end ;
8651: PPOPN 2
8653: END
// every 0 0$30 do var cr , time ;
8654: GO 8656
8656: DISABLE
8657: LD_INT 0
8659: PPUSH
8660: PPUSH
// begin time := 0 0$20 ;
8661: LD_ADDR_VAR 0 2
8665: PUSH
8666: LD_INT 700
8668: ST_TO_ADDR
// while game do
8669: LD_EXP 2
8673: IFFALSE 8798
// begin wait ( time ) ;
8675: LD_VAR 0 2
8679: PPUSH
8680: CALL_OW 67
// time := time + [ 0 0$05 , 0 0$06 , 0 0$08 ] [ Difficulty ] ;
8684: LD_ADDR_VAR 0 2
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: LD_INT 175
8696: PUSH
8697: LD_INT 210
8699: PUSH
8700: LD_INT 280
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: LIST
8707: PUSH
8708: LD_OWVAR 67
8712: ARRAY
8713: PLUS
8714: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 179 , 101 , 20 , true ) ;
8715: LD_INT 1
8717: PPUSH
8718: LD_INT 5
8720: PPUSH
8721: CALL_OW 12
8725: PPUSH
8726: LD_INT 179
8728: PPUSH
8729: LD_INT 101
8731: PPUSH
8732: LD_INT 20
8734: PPUSH
8735: LD_INT 1
8737: PPUSH
8738: CALL_OW 56
// wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
8742: LD_INT 350
8744: PPUSH
8745: LD_INT 525
8747: PPUSH
8748: CALL_OW 12
8752: PPUSH
8753: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area_collect_arabian , true ) ;
8757: LD_INT 1
8759: PPUSH
8760: LD_INT 5
8762: PPUSH
8763: CALL_OW 12
8767: PPUSH
8768: LD_INT 9
8770: PPUSH
8771: LD_INT 1
8773: PPUSH
8774: CALL_OW 55
// if time > 4 4$00 then
8778: LD_VAR 0 2
8782: PUSH
8783: LD_INT 8400
8785: GREATER
8786: IFFALSE 8796
// time := 0 0$30 ;
8788: LD_ADDR_VAR 0 2
8792: PUSH
8793: LD_INT 1050
8795: ST_TO_ADDR
// end ;
8796: GO 8669
// end ;
8798: PPOPN 2
8800: END
// every 0 0$30 do var cr , time ;
8801: GO 8803
8803: DISABLE
8804: LD_INT 0
8806: PPUSH
8807: PPUSH
// begin time := 0 0$10 ;
8808: LD_ADDR_VAR 0 2
8812: PUSH
8813: LD_INT 350
8815: ST_TO_ADDR
// while game do
8816: LD_EXP 2
8820: IFFALSE 8954
// begin wait ( time ) ;
8822: LD_VAR 0 2
8826: PPUSH
8827: CALL_OW 67
// time := time + 0 0$10 ;
8831: LD_ADDR_VAR 0 2
8835: PUSH
8836: LD_VAR 0 2
8840: PUSH
8841: LD_INT 350
8843: PLUS
8844: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , area_crates_russian , true ) ;
8845: LD_INT 1
8847: PPUSH
8848: LD_INT 5
8850: PPUSH
8851: CALL_OW 12
8855: PPUSH
8856: LD_INT 11
8858: PPUSH
8859: LD_INT 1
8861: PPUSH
8862: CALL_OW 55
// cr := rand ( 1 , 3 ) ;
8866: LD_ADDR_VAR 0 1
8870: PUSH
8871: LD_INT 1
8873: PPUSH
8874: LD_INT 3
8876: PPUSH
8877: CALL_OW 12
8881: ST_TO_ADDR
// if cr = 1 then
8882: LD_VAR 0 1
8886: PUSH
8887: LD_INT 1
8889: EQUAL
8890: IFFALSE 8934
// begin wait ( rand ( 0 0$20 , 0 0$45 ) ) ;
8892: LD_INT 700
8894: PPUSH
8895: LD_INT 1575
8897: PPUSH
8898: CALL_OW 12
8902: PPUSH
8903: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 34 , 50 , 7 , true ) ;
8907: LD_INT 1
8909: PPUSH
8910: LD_INT 5
8912: PPUSH
8913: CALL_OW 12
8917: PPUSH
8918: LD_INT 34
8920: PPUSH
8921: LD_INT 50
8923: PPUSH
8924: LD_INT 7
8926: PPUSH
8927: LD_INT 1
8929: PPUSH
8930: CALL_OW 56
// end ; if time > 8 8$00 then
8934: LD_VAR 0 2
8938: PUSH
8939: LD_INT 16800
8941: GREATER
8942: IFFALSE 8952
// time := 0 0$40 ;
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_INT 1400
8951: ST_TO_ADDR
// end ;
8952: GO 8816
// end ; end_of_file
8954: PPOPN 2
8956: END
// export function PrepareAmericanAttack ; var i , tmp , veh , flags , _target ; begin
8957: LD_INT 0
8959: PPUSH
8960: PPUSH
8961: PPUSH
8962: PPUSH
8963: PPUSH
8964: PPUSH
// tmp := [ ] ;
8965: LD_ADDR_VAR 0 3
8969: PUSH
8970: EMPTY
8971: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8972: LD_ADDR_VAR 0 5
8976: PUSH
8977: LD_INT 0
8979: PUSH
8980: LD_INT 0
8982: PUSH
8983: LD_INT 0
8985: PUSH
8986: LD_INT 0
8988: PUSH
8989: LD_INT 0
8991: PUSH
8992: LD_INT 0
8994: PUSH
8995: LD_INT 0
8997: PUSH
8998: LD_INT 0
9000: PUSH
9001: LD_INT 1
9003: PUSH
9004: LD_INT 0
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: ST_TO_ADDR
// _target := [ [ 71 , 34 ] , [ 63 , 49 ] ] ;
9019: LD_ADDR_VAR 0 6
9023: PUSH
9024: LD_INT 71
9026: PUSH
9027: LD_INT 34
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: PUSH
9034: LD_INT 63
9036: PUSH
9037: LD_INT 49
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
9048: LD_ADDR_VAR 0 2
9052: PUSH
9053: DOUBLE
9054: LD_INT 1
9056: DEC
9057: ST_TO_ADDR
9058: LD_INT 4
9060: PUSH
9061: LD_INT 5
9063: PUSH
9064: LD_INT 6
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: LIST
9071: PUSH
9072: LD_OWVAR 67
9076: ARRAY
9077: PUSH
9078: FOR_TO
9079: IFFALSE 9201
// begin PrepareVehicle ( [ us_medium_wheeled , us_heavy_tracked , us_morphling ] [ rand ( 1 , 3 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ us_laser , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 78 ) ;
9081: LD_INT 2
9083: PUSH
9084: LD_INT 4
9086: PUSH
9087: LD_INT 5
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: LIST
9094: PUSH
9095: LD_INT 1
9097: PPUSH
9098: LD_INT 3
9100: PPUSH
9101: CALL_OW 12
9105: ARRAY
9106: PPUSH
9107: LD_INT 1
9109: PUSH
9110: LD_INT 3
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 1
9119: PPUSH
9120: LD_INT 2
9122: PPUSH
9123: CALL_OW 12
9127: ARRAY
9128: PPUSH
9129: LD_INT 3
9131: PPUSH
9132: LD_INT 9
9134: PUSH
9135: LD_INT 7
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: LD_INT 1
9144: PPUSH
9145: LD_INT 2
9147: PPUSH
9148: CALL_OW 12
9152: ARRAY
9153: PPUSH
9154: LD_INT 78
9156: PPUSH
9157: CALL 15241 0 5
// veh := CreateVehicle ;
9161: LD_ADDR_VAR 0 4
9165: PUSH
9166: CALL_OW 45
9170: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
9171: LD_VAR 0 4
9175: PPUSH
9176: LD_INT 2
9178: PPUSH
9179: CALL_OW 233
// tmp := tmp union veh ;
9183: LD_ADDR_VAR 0 3
9187: PUSH
9188: LD_VAR 0 3
9192: PUSH
9193: LD_VAR 0 4
9197: UNION
9198: ST_TO_ADDR
// end ;
9199: GO 9078
9201: POP
9202: POP
// if not tmp then
9203: LD_VAR 0 3
9207: NOT
9208: IFFALSE 9212
// exit ;
9210: GO 9255
// if not first_powell_attack then
9212: LD_EXP 11
9216: NOT
9217: IFFALSE 9227
// first_powell_attack := true ;
9219: LD_ADDR_EXP 11
9223: PUSH
9224: LD_INT 1
9226: ST_TO_ADDR
// Attack ( [ 0 , tmp , _target , flags ] ) ;
9227: LD_INT 0
9229: PUSH
9230: LD_VAR 0 3
9234: PUSH
9235: LD_VAR 0 6
9239: PUSH
9240: LD_VAR 0 5
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: PPUSH
9251: CALL 43138 0 1
// end ; end_of_file
9255: LD_VAR 0 1
9259: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9260: LD_INT 0
9262: PPUSH
9263: PPUSH
// if exist_mode then
9264: LD_VAR 0 2
9268: IFFALSE 9293
// unit := CreateCharacter ( prefix & ident ) else
9270: LD_ADDR_VAR 0 5
9274: PUSH
9275: LD_VAR 0 3
9279: PUSH
9280: LD_VAR 0 1
9284: STR
9285: PPUSH
9286: CALL_OW 34
9290: ST_TO_ADDR
9291: GO 9308
// unit := NewCharacter ( ident ) ;
9293: LD_ADDR_VAR 0 5
9297: PUSH
9298: LD_VAR 0 1
9302: PPUSH
9303: CALL_OW 25
9307: ST_TO_ADDR
// result := unit ;
9308: LD_ADDR_VAR 0 4
9312: PUSH
9313: LD_VAR 0 5
9317: ST_TO_ADDR
// end ;
9318: LD_VAR 0 4
9322: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9323: LD_INT 0
9325: PPUSH
9326: PPUSH
// if not side or not nation then
9327: LD_VAR 0 1
9331: NOT
9332: PUSH
9333: LD_VAR 0 2
9337: NOT
9338: OR
9339: IFFALSE 9343
// exit ;
9341: GO 9955
// case nation of nation_american :
9343: LD_VAR 0 2
9347: PUSH
9348: LD_INT 1
9350: DOUBLE
9351: EQUAL
9352: IFTRUE 9356
9354: GO 9514
9356: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
9357: LD_ADDR_VAR 0 4
9361: PUSH
9362: LD_INT 35
9364: PUSH
9365: LD_INT 45
9367: PUSH
9368: LD_INT 46
9370: PUSH
9371: LD_INT 47
9373: PUSH
9374: LD_INT 1
9376: PUSH
9377: LD_INT 2
9379: PUSH
9380: LD_INT 6
9382: PUSH
9383: LD_INT 15
9385: PUSH
9386: LD_INT 16
9388: PUSH
9389: LD_INT 7
9391: PUSH
9392: LD_INT 12
9394: PUSH
9395: LD_INT 13
9397: PUSH
9398: LD_INT 10
9400: PUSH
9401: LD_INT 14
9403: PUSH
9404: LD_INT 20
9406: PUSH
9407: LD_INT 25
9409: PUSH
9410: LD_INT 36
9412: PUSH
9413: LD_INT 69
9415: PUSH
9416: LD_INT 39
9418: PUSH
9419: LD_INT 34
9421: PUSH
9422: LD_INT 40
9424: PUSH
9425: LD_INT 48
9427: PUSH
9428: LD_INT 49
9430: PUSH
9431: LD_INT 50
9433: PUSH
9434: LD_INT 51
9436: PUSH
9437: LD_INT 52
9439: PUSH
9440: LD_INT 53
9442: PUSH
9443: LD_INT 54
9445: PUSH
9446: LD_INT 55
9448: PUSH
9449: LD_INT 56
9451: PUSH
9452: LD_INT 57
9454: PUSH
9455: LD_INT 58
9457: PUSH
9458: LD_INT 59
9460: PUSH
9461: LD_INT 60
9463: PUSH
9464: LD_INT 61
9466: PUSH
9467: LD_INT 62
9469: PUSH
9470: LD_INT 80
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: ST_TO_ADDR
9512: GO 9879
9514: LD_INT 2
9516: DOUBLE
9517: EQUAL
9518: IFTRUE 9522
9520: GO 9692
9522: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
9523: LD_ADDR_VAR 0 4
9527: PUSH
9528: LD_INT 35
9530: PUSH
9531: LD_INT 45
9533: PUSH
9534: LD_INT 46
9536: PUSH
9537: LD_INT 47
9539: PUSH
9540: LD_INT 70
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: LD_INT 11
9548: PUSH
9549: LD_INT 3
9551: PUSH
9552: LD_INT 4
9554: PUSH
9555: LD_INT 5
9557: PUSH
9558: LD_INT 6
9560: PUSH
9561: LD_INT 15
9563: PUSH
9564: LD_INT 18
9566: PUSH
9567: LD_INT 7
9569: PUSH
9570: LD_INT 17
9572: PUSH
9573: LD_INT 8
9575: PUSH
9576: LD_INT 20
9578: PUSH
9579: LD_INT 72
9581: PUSH
9582: LD_INT 26
9584: PUSH
9585: LD_INT 69
9587: PUSH
9588: LD_INT 39
9590: PUSH
9591: LD_INT 40
9593: PUSH
9594: LD_INT 41
9596: PUSH
9597: LD_INT 42
9599: PUSH
9600: LD_INT 43
9602: PUSH
9603: LD_INT 48
9605: PUSH
9606: LD_INT 49
9608: PUSH
9609: LD_INT 50
9611: PUSH
9612: LD_INT 51
9614: PUSH
9615: LD_INT 52
9617: PUSH
9618: LD_INT 53
9620: PUSH
9621: LD_INT 54
9623: PUSH
9624: LD_INT 55
9626: PUSH
9627: LD_INT 56
9629: PUSH
9630: LD_INT 60
9632: PUSH
9633: LD_INT 61
9635: PUSH
9636: LD_INT 62
9638: PUSH
9639: LD_INT 66
9641: PUSH
9642: LD_INT 67
9644: PUSH
9645: LD_INT 68
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: ST_TO_ADDR
9690: GO 9879
9692: LD_INT 3
9694: DOUBLE
9695: EQUAL
9696: IFTRUE 9700
9698: GO 9878
9700: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
9701: LD_ADDR_VAR 0 4
9705: PUSH
9706: LD_INT 46
9708: PUSH
9709: LD_INT 47
9711: PUSH
9712: LD_INT 1
9714: PUSH
9715: LD_INT 2
9717: PUSH
9718: LD_INT 11
9720: PUSH
9721: LD_INT 9
9723: PUSH
9724: LD_INT 20
9726: PUSH
9727: LD_INT 19
9729: PUSH
9730: LD_INT 21
9732: PUSH
9733: LD_INT 24
9735: PUSH
9736: LD_INT 22
9738: PUSH
9739: LD_INT 25
9741: PUSH
9742: LD_INT 28
9744: PUSH
9745: LD_INT 29
9747: PUSH
9748: LD_INT 31
9750: PUSH
9751: LD_INT 37
9753: PUSH
9754: LD_INT 38
9756: PUSH
9757: LD_INT 32
9759: PUSH
9760: LD_INT 27
9762: PUSH
9763: LD_INT 33
9765: PUSH
9766: LD_INT 69
9768: PUSH
9769: LD_INT 39
9771: PUSH
9772: LD_INT 34
9774: PUSH
9775: LD_INT 40
9777: PUSH
9778: LD_INT 71
9780: PUSH
9781: LD_INT 23
9783: PUSH
9784: LD_INT 44
9786: PUSH
9787: LD_INT 48
9789: PUSH
9790: LD_INT 49
9792: PUSH
9793: LD_INT 50
9795: PUSH
9796: LD_INT 51
9798: PUSH
9799: LD_INT 52
9801: PUSH
9802: LD_INT 53
9804: PUSH
9805: LD_INT 54
9807: PUSH
9808: LD_INT 55
9810: PUSH
9811: LD_INT 56
9813: PUSH
9814: LD_INT 57
9816: PUSH
9817: LD_INT 58
9819: PUSH
9820: LD_INT 59
9822: PUSH
9823: LD_INT 63
9825: PUSH
9826: LD_INT 64
9828: PUSH
9829: LD_INT 65
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: ST_TO_ADDR
9876: GO 9879
9878: POP
// if state > - 1 and state < 3 then
9879: LD_VAR 0 3
9883: PUSH
9884: LD_INT 1
9886: NEG
9887: GREATER
9888: PUSH
9889: LD_VAR 0 3
9893: PUSH
9894: LD_INT 3
9896: LESS
9897: AND
9898: IFFALSE 9955
// for i in result do
9900: LD_ADDR_VAR 0 5
9904: PUSH
9905: LD_VAR 0 4
9909: PUSH
9910: FOR_IN
9911: IFFALSE 9953
// if GetTech ( i , side ) <> state then
9913: LD_VAR 0 5
9917: PPUSH
9918: LD_VAR 0 1
9922: PPUSH
9923: CALL_OW 321
9927: PUSH
9928: LD_VAR 0 3
9932: NONEQUAL
9933: IFFALSE 9951
// result := result diff i ;
9935: LD_ADDR_VAR 0 4
9939: PUSH
9940: LD_VAR 0 4
9944: PUSH
9945: LD_VAR 0 5
9949: DIFF
9950: ST_TO_ADDR
9951: GO 9910
9953: POP
9954: POP
// end ;
9955: LD_VAR 0 4
9959: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9960: LD_INT 0
9962: PPUSH
9963: PPUSH
9964: PPUSH
9965: PPUSH
9966: PPUSH
9967: PPUSH
9968: PPUSH
9969: PPUSH
9970: PPUSH
9971: PPUSH
9972: PPUSH
9973: PPUSH
9974: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9975: LD_VAR 0 1
9979: NOT
9980: PUSH
9981: LD_VAR 0 1
9985: PPUSH
9986: CALL_OW 257
9990: PUSH
9991: LD_INT 9
9993: NONEQUAL
9994: OR
9995: IFFALSE 9999
// exit ;
9997: GO 10572
// side := GetSide ( unit ) ;
9999: LD_ADDR_VAR 0 9
10003: PUSH
10004: LD_VAR 0 1
10008: PPUSH
10009: CALL_OW 255
10013: ST_TO_ADDR
// tech_space := tech_spacanom ;
10014: LD_ADDR_VAR 0 12
10018: PUSH
10019: LD_INT 29
10021: ST_TO_ADDR
// tech_time := tech_taurad ;
10022: LD_ADDR_VAR 0 13
10026: PUSH
10027: LD_INT 28
10029: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10030: LD_ADDR_VAR 0 11
10034: PUSH
10035: LD_VAR 0 1
10039: PPUSH
10040: CALL_OW 310
10044: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10045: LD_VAR 0 11
10049: PPUSH
10050: CALL_OW 247
10054: PUSH
10055: LD_INT 2
10057: EQUAL
10058: IFFALSE 10062
// exit ;
10060: GO 10572
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10062: LD_ADDR_VAR 0 8
10066: PUSH
10067: LD_INT 81
10069: PUSH
10070: LD_VAR 0 9
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: LD_INT 3
10081: PUSH
10082: LD_INT 21
10084: PUSH
10085: LD_INT 3
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PPUSH
10100: CALL_OW 69
10104: ST_TO_ADDR
// if not tmp then
10105: LD_VAR 0 8
10109: NOT
10110: IFFALSE 10114
// exit ;
10112: GO 10572
// if in_unit then
10114: LD_VAR 0 11
10118: IFFALSE 10142
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10120: LD_ADDR_VAR 0 10
10124: PUSH
10125: LD_VAR 0 8
10129: PPUSH
10130: LD_VAR 0 11
10134: PPUSH
10135: CALL_OW 74
10139: ST_TO_ADDR
10140: GO 10162
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10142: LD_ADDR_VAR 0 10
10146: PUSH
10147: LD_VAR 0 8
10151: PPUSH
10152: LD_VAR 0 1
10156: PPUSH
10157: CALL_OW 74
10161: ST_TO_ADDR
// if not enemy then
10162: LD_VAR 0 10
10166: NOT
10167: IFFALSE 10171
// exit ;
10169: GO 10572
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10171: LD_VAR 0 11
10175: PUSH
10176: LD_VAR 0 11
10180: PPUSH
10181: LD_VAR 0 10
10185: PPUSH
10186: CALL_OW 296
10190: PUSH
10191: LD_INT 13
10193: GREATER
10194: AND
10195: PUSH
10196: LD_VAR 0 1
10200: PPUSH
10201: LD_VAR 0 10
10205: PPUSH
10206: CALL_OW 296
10210: PUSH
10211: LD_INT 12
10213: GREATER
10214: OR
10215: IFFALSE 10219
// exit ;
10217: GO 10572
// missile := [ 1 ] ;
10219: LD_ADDR_VAR 0 14
10223: PUSH
10224: LD_INT 1
10226: PUSH
10227: EMPTY
10228: LIST
10229: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10230: LD_VAR 0 9
10234: PPUSH
10235: LD_VAR 0 12
10239: PPUSH
10240: CALL_OW 325
10244: IFFALSE 10273
// missile := Insert ( missile , missile + 1 , 2 ) ;
10246: LD_ADDR_VAR 0 14
10250: PUSH
10251: LD_VAR 0 14
10255: PPUSH
10256: LD_VAR 0 14
10260: PUSH
10261: LD_INT 1
10263: PLUS
10264: PPUSH
10265: LD_INT 2
10267: PPUSH
10268: CALL_OW 2
10272: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10273: LD_VAR 0 9
10277: PPUSH
10278: LD_VAR 0 13
10282: PPUSH
10283: CALL_OW 325
10287: PUSH
10288: LD_VAR 0 10
10292: PPUSH
10293: CALL_OW 255
10297: PPUSH
10298: LD_VAR 0 13
10302: PPUSH
10303: CALL_OW 325
10307: NOT
10308: AND
10309: IFFALSE 10338
// missile := Insert ( missile , missile + 1 , 3 ) ;
10311: LD_ADDR_VAR 0 14
10315: PUSH
10316: LD_VAR 0 14
10320: PPUSH
10321: LD_VAR 0 14
10325: PUSH
10326: LD_INT 1
10328: PLUS
10329: PPUSH
10330: LD_INT 3
10332: PPUSH
10333: CALL_OW 2
10337: ST_TO_ADDR
// if missile < 2 then
10338: LD_VAR 0 14
10342: PUSH
10343: LD_INT 2
10345: LESS
10346: IFFALSE 10350
// exit ;
10348: GO 10572
// x := GetX ( enemy ) ;
10350: LD_ADDR_VAR 0 4
10354: PUSH
10355: LD_VAR 0 10
10359: PPUSH
10360: CALL_OW 250
10364: ST_TO_ADDR
// y := GetY ( enemy ) ;
10365: LD_ADDR_VAR 0 5
10369: PUSH
10370: LD_VAR 0 10
10374: PPUSH
10375: CALL_OW 251
10379: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10380: LD_ADDR_VAR 0 6
10384: PUSH
10385: LD_VAR 0 4
10389: PUSH
10390: LD_INT 1
10392: NEG
10393: PPUSH
10394: LD_INT 1
10396: PPUSH
10397: CALL_OW 12
10401: PLUS
10402: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10403: LD_ADDR_VAR 0 7
10407: PUSH
10408: LD_VAR 0 5
10412: PUSH
10413: LD_INT 1
10415: NEG
10416: PPUSH
10417: LD_INT 1
10419: PPUSH
10420: CALL_OW 12
10424: PLUS
10425: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10426: LD_VAR 0 6
10430: PPUSH
10431: LD_VAR 0 7
10435: PPUSH
10436: CALL_OW 488
10440: NOT
10441: IFFALSE 10463
// begin _x := x ;
10443: LD_ADDR_VAR 0 6
10447: PUSH
10448: LD_VAR 0 4
10452: ST_TO_ADDR
// _y := y ;
10453: LD_ADDR_VAR 0 7
10457: PUSH
10458: LD_VAR 0 5
10462: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10463: LD_ADDR_VAR 0 3
10467: PUSH
10468: LD_INT 1
10470: PPUSH
10471: LD_VAR 0 14
10475: PPUSH
10476: CALL_OW 12
10480: ST_TO_ADDR
// case i of 1 :
10481: LD_VAR 0 3
10485: PUSH
10486: LD_INT 1
10488: DOUBLE
10489: EQUAL
10490: IFTRUE 10494
10492: GO 10511
10494: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10495: LD_VAR 0 1
10499: PPUSH
10500: LD_VAR 0 10
10504: PPUSH
10505: CALL_OW 115
10509: GO 10572
10511: LD_INT 2
10513: DOUBLE
10514: EQUAL
10515: IFTRUE 10519
10517: GO 10541
10519: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10520: LD_VAR 0 1
10524: PPUSH
10525: LD_VAR 0 6
10529: PPUSH
10530: LD_VAR 0 7
10534: PPUSH
10535: CALL_OW 153
10539: GO 10572
10541: LD_INT 3
10543: DOUBLE
10544: EQUAL
10545: IFTRUE 10549
10547: GO 10571
10549: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10550: LD_VAR 0 1
10554: PPUSH
10555: LD_VAR 0 6
10559: PPUSH
10560: LD_VAR 0 7
10564: PPUSH
10565: CALL_OW 154
10569: GO 10572
10571: POP
// end ;
10572: LD_VAR 0 2
10576: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10577: LD_INT 0
10579: PPUSH
10580: PPUSH
10581: PPUSH
10582: PPUSH
10583: PPUSH
10584: PPUSH
// if not unit or not building then
10585: LD_VAR 0 1
10589: NOT
10590: PUSH
10591: LD_VAR 0 2
10595: NOT
10596: OR
10597: IFFALSE 10601
// exit ;
10599: GO 10756
// x := GetX ( building ) ;
10601: LD_ADDR_VAR 0 5
10605: PUSH
10606: LD_VAR 0 2
10610: PPUSH
10611: CALL_OW 250
10615: ST_TO_ADDR
// y := GetY ( building ) ;
10616: LD_ADDR_VAR 0 6
10620: PUSH
10621: LD_VAR 0 2
10625: PPUSH
10626: CALL_OW 251
10630: ST_TO_ADDR
// for i = 0 to 5 do
10631: LD_ADDR_VAR 0 4
10635: PUSH
10636: DOUBLE
10637: LD_INT 0
10639: DEC
10640: ST_TO_ADDR
10641: LD_INT 5
10643: PUSH
10644: FOR_TO
10645: IFFALSE 10754
// begin _x := ShiftX ( x , i , 3 ) ;
10647: LD_ADDR_VAR 0 7
10651: PUSH
10652: LD_VAR 0 5
10656: PPUSH
10657: LD_VAR 0 4
10661: PPUSH
10662: LD_INT 3
10664: PPUSH
10665: CALL_OW 272
10669: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10670: LD_ADDR_VAR 0 8
10674: PUSH
10675: LD_VAR 0 6
10679: PPUSH
10680: LD_VAR 0 4
10684: PPUSH
10685: LD_INT 3
10687: PPUSH
10688: CALL_OW 273
10692: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
10693: LD_VAR 0 7
10697: PPUSH
10698: LD_VAR 0 8
10702: PPUSH
10703: CALL_OW 428
10707: PUSH
10708: LD_INT 0
10710: EQUAL
10711: PUSH
10712: LD_VAR 0 7
10716: PPUSH
10717: LD_VAR 0 8
10721: PPUSH
10722: CALL_OW 488
10726: AND
10727: IFFALSE 10752
// begin ComMoveXY ( unit , _x , _y ) ;
10729: LD_VAR 0 1
10733: PPUSH
10734: LD_VAR 0 7
10738: PPUSH
10739: LD_VAR 0 8
10743: PPUSH
10744: CALL_OW 111
// exit ;
10748: POP
10749: POP
10750: GO 10756
// end ; end ;
10752: GO 10644
10754: POP
10755: POP
// end ;
10756: LD_VAR 0 3
10760: RET
// export function ScanBase ( side , base_area ) ; begin
10761: LD_INT 0
10763: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10764: LD_ADDR_VAR 0 3
10768: PUSH
10769: LD_VAR 0 2
10773: PPUSH
10774: LD_INT 81
10776: PUSH
10777: LD_VAR 0 1
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PPUSH
10786: CALL_OW 70
10790: ST_TO_ADDR
// end ;
10791: LD_VAR 0 3
10795: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
10796: LD_INT 0
10798: PPUSH
10799: PPUSH
10800: PPUSH
10801: PPUSH
10802: PPUSH
10803: PPUSH
10804: PPUSH
10805: PPUSH
10806: PPUSH
10807: PPUSH
10808: PPUSH
10809: PPUSH
10810: PPUSH
10811: PPUSH
10812: PPUSH
10813: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
10814: LD_ADDR_VAR 0 12
10818: PUSH
10819: LD_EXP 55
10823: PUSH
10824: LD_VAR 0 1
10828: ARRAY
10829: PPUSH
10830: LD_INT 25
10832: PUSH
10833: LD_INT 3
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PPUSH
10840: CALL_OW 72
10844: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
10845: LD_ADDR_VAR 0 8
10849: PUSH
10850: LD_EXP 55
10854: PUSH
10855: LD_VAR 0 1
10859: ARRAY
10860: PPUSH
10861: LD_INT 2
10863: PUSH
10864: LD_INT 25
10866: PUSH
10867: LD_INT 1
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: LD_INT 25
10876: PUSH
10877: LD_INT 5
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PUSH
10884: LD_INT 25
10886: PUSH
10887: LD_INT 8
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PUSH
10894: LD_INT 25
10896: PUSH
10897: LD_INT 9
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: PPUSH
10911: CALL_OW 72
10915: ST_TO_ADDR
// if not defenders and not solds then
10916: LD_VAR 0 2
10920: NOT
10921: PUSH
10922: LD_VAR 0 8
10926: NOT
10927: AND
10928: IFFALSE 10932
// exit ;
10930: GO 12298
// depot_under_attack := false ;
10932: LD_ADDR_VAR 0 16
10936: PUSH
10937: LD_INT 0
10939: ST_TO_ADDR
// sold_defenders := [ ] ;
10940: LD_ADDR_VAR 0 17
10944: PUSH
10945: EMPTY
10946: ST_TO_ADDR
// if mechs then
10947: LD_VAR 0 12
10951: IFFALSE 11080
// for i in defenders do
10953: LD_ADDR_VAR 0 5
10957: PUSH
10958: LD_VAR 0 2
10962: PUSH
10963: FOR_IN
10964: IFFALSE 11078
// begin SetTag ( i , 20 ) ;
10966: LD_VAR 0 5
10970: PPUSH
10971: LD_INT 20
10973: PPUSH
10974: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
10978: LD_VAR 0 5
10982: PPUSH
10983: CALL_OW 263
10987: PUSH
10988: LD_INT 1
10990: EQUAL
10991: PUSH
10992: LD_VAR 0 5
10996: PPUSH
10997: CALL_OW 311
11001: NOT
11002: AND
11003: PUSH
11004: LD_VAR 0 12
11008: AND
11009: IFFALSE 11076
// begin un := mechs [ 1 ] ;
11011: LD_ADDR_VAR 0 10
11015: PUSH
11016: LD_VAR 0 12
11020: PUSH
11021: LD_INT 1
11023: ARRAY
11024: ST_TO_ADDR
// ComExitBuilding ( un ) ;
11025: LD_VAR 0 10
11029: PPUSH
11030: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
11034: LD_VAR 0 10
11038: PPUSH
11039: LD_VAR 0 5
11043: PPUSH
11044: CALL_OW 180
// SetTag ( un , 19 ) ;
11048: LD_VAR 0 10
11052: PPUSH
11053: LD_INT 19
11055: PPUSH
11056: CALL_OW 109
// mechs := mechs diff un ;
11060: LD_ADDR_VAR 0 12
11064: PUSH
11065: LD_VAR 0 12
11069: PUSH
11070: LD_VAR 0 10
11074: DIFF
11075: ST_TO_ADDR
// end ; end ;
11076: GO 10963
11078: POP
11079: POP
// if solds then
11080: LD_VAR 0 8
11084: IFFALSE 11143
// for i in solds do
11086: LD_ADDR_VAR 0 5
11090: PUSH
11091: LD_VAR 0 8
11095: PUSH
11096: FOR_IN
11097: IFFALSE 11141
// if not GetTag ( i ) then
11099: LD_VAR 0 5
11103: PPUSH
11104: CALL_OW 110
11108: NOT
11109: IFFALSE 11139
// begin defenders := defenders union i ;
11111: LD_ADDR_VAR 0 2
11115: PUSH
11116: LD_VAR 0 2
11120: PUSH
11121: LD_VAR 0 5
11125: UNION
11126: ST_TO_ADDR
// SetTag ( i , 18 ) ;
11127: LD_VAR 0 5
11131: PPUSH
11132: LD_INT 18
11134: PPUSH
11135: CALL_OW 109
// end ;
11139: GO 11096
11141: POP
11142: POP
// repeat wait ( 0 0$1 ) ;
11143: LD_INT 35
11145: PPUSH
11146: CALL_OW 67
// enemy := mc_scan [ base ] ;
11150: LD_ADDR_VAR 0 3
11154: PUSH
11155: LD_EXP 78
11159: PUSH
11160: LD_VAR 0 1
11164: ARRAY
11165: ST_TO_ADDR
// for i in defenders do
11166: LD_ADDR_VAR 0 5
11170: PUSH
11171: LD_VAR 0 2
11175: PUSH
11176: FOR_IN
11177: IFFALSE 11862
// begin e := NearestUnitToUnit ( enemy , i ) ;
11179: LD_ADDR_VAR 0 13
11183: PUSH
11184: LD_VAR 0 3
11188: PPUSH
11189: LD_VAR 0 5
11193: PPUSH
11194: CALL_OW 74
11198: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
11199: LD_ADDR_VAR 0 16
11203: PUSH
11204: LD_EXP 55
11208: PUSH
11209: LD_VAR 0 1
11213: ARRAY
11214: PPUSH
11215: LD_INT 2
11217: PUSH
11218: LD_INT 30
11220: PUSH
11221: LD_INT 0
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: LD_INT 30
11230: PUSH
11231: LD_INT 1
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 72
11247: NOT
11248: PUSH
11249: LD_EXP 55
11253: PUSH
11254: LD_VAR 0 1
11258: ARRAY
11259: PPUSH
11260: LD_INT 2
11262: PUSH
11263: LD_INT 30
11265: PUSH
11266: LD_INT 0
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PUSH
11273: LD_INT 30
11275: PUSH
11276: LD_INT 1
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: LIST
11287: PPUSH
11288: CALL_OW 72
11292: PPUSH
11293: CALL_OW 256
11297: PUSH
11298: LD_INT 600
11300: LESS
11301: OR
11302: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
11303: LD_VAR 0 5
11307: PPUSH
11308: CALL_OW 247
11312: PUSH
11313: LD_INT 2
11315: DOUBLE
11316: EQUAL
11317: IFTRUE 11321
11319: GO 11568
11321: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
11322: LD_VAR 0 5
11326: PPUSH
11327: CALL_OW 256
11331: PUSH
11332: LD_INT 650
11334: GREATER
11335: PUSH
11336: LD_VAR 0 5
11340: PPUSH
11341: LD_VAR 0 13
11345: PPUSH
11346: CALL_OW 296
11350: PUSH
11351: LD_INT 40
11353: LESS
11354: AND
11355: IFFALSE 11373
// ComAttackUnit ( i , e ) else
11357: LD_VAR 0 5
11361: PPUSH
11362: LD_VAR 0 13
11366: PPUSH
11367: CALL_OW 115
11371: GO 11451
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
11373: LD_VAR 0 5
11377: PPUSH
11378: LD_VAR 0 13
11382: PPUSH
11383: CALL_OW 296
11387: PUSH
11388: LD_INT 30
11390: GREATEREQUAL
11391: PUSH
11392: LD_VAR 0 5
11396: PPUSH
11397: CALL_OW 256
11401: PUSH
11402: LD_INT 650
11404: LESSEQUAL
11405: OR
11406: PUSH
11407: LD_VAR 0 5
11411: PPUSH
11412: LD_EXP 79
11416: PUSH
11417: LD_VAR 0 1
11421: ARRAY
11422: PPUSH
11423: CALL_OW 308
11427: NOT
11428: AND
11429: IFFALSE 11451
// ComMoveToArea ( i , mc_parking [ base ] ) ;
11431: LD_VAR 0 5
11435: PPUSH
11436: LD_EXP 79
11440: PUSH
11441: LD_VAR 0 1
11445: ARRAY
11446: PPUSH
11447: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
11451: LD_VAR 0 5
11455: PPUSH
11456: CALL_OW 256
11460: PUSH
11461: LD_INT 998
11463: LESS
11464: PUSH
11465: LD_VAR 0 5
11469: PPUSH
11470: CALL_OW 263
11474: PUSH
11475: LD_INT 1
11477: EQUAL
11478: AND
11479: PUSH
11480: LD_VAR 0 5
11484: PPUSH
11485: CALL_OW 311
11489: AND
11490: PUSH
11491: LD_VAR 0 5
11495: PPUSH
11496: LD_EXP 79
11500: PUSH
11501: LD_VAR 0 1
11505: ARRAY
11506: PPUSH
11507: CALL_OW 308
11511: AND
11512: IFFALSE 11566
// begin mech := IsDrivenBy ( i ) ;
11514: LD_ADDR_VAR 0 9
11518: PUSH
11519: LD_VAR 0 5
11523: PPUSH
11524: CALL_OW 311
11528: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
11529: LD_VAR 0 9
11533: PPUSH
11534: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
11538: LD_VAR 0 9
11542: PPUSH
11543: LD_VAR 0 5
11547: PPUSH
11548: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
11552: LD_VAR 0 9
11556: PPUSH
11557: LD_VAR 0 5
11561: PPUSH
11562: CALL_OW 180
// end ; end ; unit_human :
11566: GO 11833
11568: LD_INT 1
11570: DOUBLE
11571: EQUAL
11572: IFTRUE 11576
11574: GO 11832
11576: POP
// begin b := IsInUnit ( i ) ;
11577: LD_ADDR_VAR 0 18
11581: PUSH
11582: LD_VAR 0 5
11586: PPUSH
11587: CALL_OW 310
11591: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
11592: LD_ADDR_VAR 0 19
11596: PUSH
11597: LD_VAR 0 18
11601: NOT
11602: PUSH
11603: LD_VAR 0 18
11607: PPUSH
11608: CALL_OW 266
11612: PUSH
11613: LD_INT 32
11615: PUSH
11616: LD_INT 31
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: IN
11623: OR
11624: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
11625: LD_VAR 0 16
11629: PUSH
11630: LD_VAR 0 2
11634: PPUSH
11635: LD_INT 21
11637: PUSH
11638: LD_INT 2
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PPUSH
11645: CALL_OW 72
11649: PUSH
11650: LD_INT 1
11652: LESSEQUAL
11653: OR
11654: PUSH
11655: LD_VAR 0 19
11659: AND
11660: PUSH
11661: LD_VAR 0 5
11665: PUSH
11666: LD_VAR 0 17
11670: IN
11671: NOT
11672: AND
11673: IFFALSE 11766
// begin if b then
11675: LD_VAR 0 18
11679: IFFALSE 11728
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
11681: LD_VAR 0 18
11685: PPUSH
11686: LD_VAR 0 3
11690: PPUSH
11691: LD_VAR 0 18
11695: PPUSH
11696: CALL_OW 74
11700: PPUSH
11701: CALL_OW 296
11705: PUSH
11706: LD_INT 10
11708: LESS
11709: PUSH
11710: LD_VAR 0 18
11714: PPUSH
11715: CALL_OW 461
11719: PUSH
11720: LD_INT 7
11722: NONEQUAL
11723: AND
11724: IFFALSE 11728
// continue ;
11726: GO 11176
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
11728: LD_ADDR_VAR 0 17
11732: PUSH
11733: LD_VAR 0 17
11737: PPUSH
11738: LD_VAR 0 17
11742: PUSH
11743: LD_INT 1
11745: PLUS
11746: PPUSH
11747: LD_VAR 0 5
11751: PPUSH
11752: CALL_OW 1
11756: ST_TO_ADDR
// ComExitBuilding ( i ) ;
11757: LD_VAR 0 5
11761: PPUSH
11762: CALL_OW 122
// end ; if sold_defenders then
11766: LD_VAR 0 17
11770: IFFALSE 11830
// if i in sold_defenders then
11772: LD_VAR 0 5
11776: PUSH
11777: LD_VAR 0 17
11781: IN
11782: IFFALSE 11830
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
11784: LD_VAR 0 5
11788: PPUSH
11789: CALL_OW 314
11793: NOT
11794: PUSH
11795: LD_VAR 0 5
11799: PPUSH
11800: LD_VAR 0 13
11804: PPUSH
11805: CALL_OW 296
11809: PUSH
11810: LD_INT 30
11812: LESS
11813: AND
11814: IFFALSE 11830
// ComAttackUnit ( i , e ) ;
11816: LD_VAR 0 5
11820: PPUSH
11821: LD_VAR 0 13
11825: PPUSH
11826: CALL_OW 115
// end ; end ; end ;
11830: GO 11833
11832: POP
// if IsDead ( i ) then
11833: LD_VAR 0 5
11837: PPUSH
11838: CALL_OW 301
11842: IFFALSE 11860
// defenders := defenders diff i ;
11844: LD_ADDR_VAR 0 2
11848: PUSH
11849: LD_VAR 0 2
11853: PUSH
11854: LD_VAR 0 5
11858: DIFF
11859: ST_TO_ADDR
// end ;
11860: GO 11176
11862: POP
11863: POP
// until not enemy or not defenders ;
11864: LD_VAR 0 3
11868: NOT
11869: PUSH
11870: LD_VAR 0 2
11874: NOT
11875: OR
11876: IFFALSE 11143
// MC_Reset ( base , 18 ) ;
11878: LD_VAR 0 1
11882: PPUSH
11883: LD_INT 18
11885: PPUSH
11886: CALL 48240 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
11890: LD_ADDR_VAR 0 2
11894: PUSH
11895: LD_VAR 0 2
11899: PUSH
11900: LD_VAR 0 2
11904: PPUSH
11905: LD_INT 2
11907: PUSH
11908: LD_INT 25
11910: PUSH
11911: LD_INT 1
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 25
11920: PUSH
11921: LD_INT 5
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 25
11930: PUSH
11931: LD_INT 8
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 25
11940: PUSH
11941: LD_INT 9
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 72
11959: DIFF
11960: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
11961: LD_VAR 0 3
11965: NOT
11966: PUSH
11967: LD_VAR 0 2
11971: PPUSH
11972: LD_INT 21
11974: PUSH
11975: LD_INT 2
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PPUSH
11982: CALL_OW 72
11986: AND
11987: IFFALSE 12249
// begin tmp := FilterByTag ( defenders , 19 ) ;
11989: LD_ADDR_VAR 0 11
11993: PUSH
11994: LD_VAR 0 2
11998: PPUSH
11999: LD_INT 19
12001: PPUSH
12002: CALL 46532 0 2
12006: ST_TO_ADDR
// if tmp then
12007: LD_VAR 0 11
12011: IFFALSE 12081
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
12013: LD_ADDR_VAR 0 11
12017: PUSH
12018: LD_VAR 0 11
12022: PPUSH
12023: LD_INT 25
12025: PUSH
12026: LD_INT 3
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PPUSH
12033: CALL_OW 72
12037: ST_TO_ADDR
// if tmp then
12038: LD_VAR 0 11
12042: IFFALSE 12081
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
12044: LD_ADDR_EXP 67
12048: PUSH
12049: LD_EXP 67
12053: PPUSH
12054: LD_VAR 0 1
12058: PPUSH
12059: LD_EXP 67
12063: PUSH
12064: LD_VAR 0 1
12068: ARRAY
12069: PUSH
12070: LD_VAR 0 11
12074: UNION
12075: PPUSH
12076: CALL_OW 1
12080: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
12081: LD_VAR 0 1
12085: PPUSH
12086: LD_INT 19
12088: PPUSH
12089: CALL 48240 0 2
// repeat wait ( 0 0$1 ) ;
12093: LD_INT 35
12095: PPUSH
12096: CALL_OW 67
// for i in defenders do
12100: LD_ADDR_VAR 0 5
12104: PUSH
12105: LD_VAR 0 2
12109: PUSH
12110: FOR_IN
12111: IFFALSE 12200
// begin if not IsInArea ( i , mc_parking [ base ] ) then
12113: LD_VAR 0 5
12117: PPUSH
12118: LD_EXP 79
12122: PUSH
12123: LD_VAR 0 1
12127: ARRAY
12128: PPUSH
12129: CALL_OW 308
12133: NOT
12134: IFFALSE 12158
// ComMoveToArea ( i , mc_parking [ base ] ) else
12136: LD_VAR 0 5
12140: PPUSH
12141: LD_EXP 79
12145: PUSH
12146: LD_VAR 0 1
12150: ARRAY
12151: PPUSH
12152: CALL_OW 113
12156: GO 12198
// if GetControl ( i ) = control_manual then
12158: LD_VAR 0 5
12162: PPUSH
12163: CALL_OW 263
12167: PUSH
12168: LD_INT 1
12170: EQUAL
12171: IFFALSE 12198
// if IsDrivenBy ( i ) then
12173: LD_VAR 0 5
12177: PPUSH
12178: CALL_OW 311
12182: IFFALSE 12198
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
12184: LD_VAR 0 5
12188: PPUSH
12189: CALL_OW 311
12193: PPUSH
12194: CALL_OW 121
// end ;
12198: GO 12110
12200: POP
12201: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
12202: LD_VAR 0 2
12206: PPUSH
12207: LD_INT 95
12209: PUSH
12210: LD_EXP 79
12214: PUSH
12215: LD_VAR 0 1
12219: ARRAY
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PPUSH
12225: CALL_OW 72
12229: PUSH
12230: LD_VAR 0 2
12234: EQUAL
12235: PUSH
12236: LD_EXP 78
12240: PUSH
12241: LD_VAR 0 1
12245: ARRAY
12246: OR
12247: IFFALSE 12093
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
12249: LD_ADDR_EXP 77
12253: PUSH
12254: LD_EXP 77
12258: PPUSH
12259: LD_VAR 0 1
12263: PPUSH
12264: LD_EXP 77
12268: PUSH
12269: LD_VAR 0 1
12273: ARRAY
12274: PUSH
12275: LD_VAR 0 2
12279: UNION
12280: PPUSH
12281: CALL_OW 1
12285: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
12286: LD_VAR 0 1
12290: PPUSH
12291: LD_INT 20
12293: PPUSH
12294: CALL 48240 0 2
// end ;
12298: LD_VAR 0 4
12302: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12303: LD_INT 0
12305: PPUSH
12306: PPUSH
12307: PPUSH
12308: PPUSH
// result := false ;
12309: LD_ADDR_VAR 0 2
12313: PUSH
12314: LD_INT 0
12316: ST_TO_ADDR
// side := GetSide ( unit ) ;
12317: LD_ADDR_VAR 0 3
12321: PUSH
12322: LD_VAR 0 1
12326: PPUSH
12327: CALL_OW 255
12331: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12332: LD_ADDR_VAR 0 4
12336: PUSH
12337: LD_VAR 0 1
12341: PPUSH
12342: CALL_OW 248
12346: ST_TO_ADDR
// case nat of 1 :
12347: LD_VAR 0 4
12351: PUSH
12352: LD_INT 1
12354: DOUBLE
12355: EQUAL
12356: IFTRUE 12360
12358: GO 12371
12360: POP
// tech := tech_lassight ; 2 :
12361: LD_ADDR_VAR 0 5
12365: PUSH
12366: LD_INT 12
12368: ST_TO_ADDR
12369: GO 12410
12371: LD_INT 2
12373: DOUBLE
12374: EQUAL
12375: IFTRUE 12379
12377: GO 12390
12379: POP
// tech := tech_mortar ; 3 :
12380: LD_ADDR_VAR 0 5
12384: PUSH
12385: LD_INT 41
12387: ST_TO_ADDR
12388: GO 12410
12390: LD_INT 3
12392: DOUBLE
12393: EQUAL
12394: IFTRUE 12398
12396: GO 12409
12398: POP
// tech := tech_bazooka ; end ;
12399: LD_ADDR_VAR 0 5
12403: PUSH
12404: LD_INT 44
12406: ST_TO_ADDR
12407: GO 12410
12409: POP
// if Researched ( side , tech ) then
12410: LD_VAR 0 3
12414: PPUSH
12415: LD_VAR 0 5
12419: PPUSH
12420: CALL_OW 325
12424: IFFALSE 12451
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12426: LD_ADDR_VAR 0 2
12430: PUSH
12431: LD_INT 5
12433: PUSH
12434: LD_INT 8
12436: PUSH
12437: LD_INT 9
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: LIST
12444: PUSH
12445: LD_VAR 0 4
12449: ARRAY
12450: ST_TO_ADDR
// end ;
12451: LD_VAR 0 2
12455: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12456: LD_INT 0
12458: PPUSH
12459: PPUSH
12460: PPUSH
// if not mines then
12461: LD_VAR 0 2
12465: NOT
12466: IFFALSE 12470
// exit ;
12468: GO 12614
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12470: LD_ADDR_VAR 0 5
12474: PUSH
12475: LD_INT 81
12477: PUSH
12478: LD_VAR 0 1
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 3
12489: PUSH
12490: LD_INT 21
12492: PUSH
12493: LD_INT 3
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PPUSH
12508: CALL_OW 69
12512: ST_TO_ADDR
// for i in mines do
12513: LD_ADDR_VAR 0 4
12517: PUSH
12518: LD_VAR 0 2
12522: PUSH
12523: FOR_IN
12524: IFFALSE 12612
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12526: LD_VAR 0 4
12530: PUSH
12531: LD_INT 1
12533: ARRAY
12534: PPUSH
12535: LD_VAR 0 4
12539: PUSH
12540: LD_INT 2
12542: ARRAY
12543: PPUSH
12544: CALL_OW 458
12548: NOT
12549: IFFALSE 12553
// continue ;
12551: GO 12523
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12553: LD_VAR 0 4
12557: PUSH
12558: LD_INT 1
12560: ARRAY
12561: PPUSH
12562: LD_VAR 0 4
12566: PUSH
12567: LD_INT 2
12569: ARRAY
12570: PPUSH
12571: CALL_OW 428
12575: PUSH
12576: LD_VAR 0 5
12580: IN
12581: IFFALSE 12610
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12583: LD_VAR 0 4
12587: PUSH
12588: LD_INT 1
12590: ARRAY
12591: PPUSH
12592: LD_VAR 0 4
12596: PUSH
12597: LD_INT 2
12599: ARRAY
12600: PPUSH
12601: LD_VAR 0 1
12605: PPUSH
12606: CALL_OW 456
// end ;
12610: GO 12523
12612: POP
12613: POP
// end ;
12614: LD_VAR 0 3
12618: RET
// export function Count ( array ) ; var i ; begin
12619: LD_INT 0
12621: PPUSH
12622: PPUSH
// result := 0 ;
12623: LD_ADDR_VAR 0 2
12627: PUSH
12628: LD_INT 0
12630: ST_TO_ADDR
// for i in array do
12631: LD_ADDR_VAR 0 3
12635: PUSH
12636: LD_VAR 0 1
12640: PUSH
12641: FOR_IN
12642: IFFALSE 12666
// if i then
12644: LD_VAR 0 3
12648: IFFALSE 12664
// result := result + 1 ;
12650: LD_ADDR_VAR 0 2
12654: PUSH
12655: LD_VAR 0 2
12659: PUSH
12660: LD_INT 1
12662: PLUS
12663: ST_TO_ADDR
12664: GO 12641
12666: POP
12667: POP
// end ;
12668: LD_VAR 0 2
12672: RET
// export function IsEmpty ( building ) ; begin
12673: LD_INT 0
12675: PPUSH
// if not building then
12676: LD_VAR 0 1
12680: NOT
12681: IFFALSE 12685
// exit ;
12683: GO 12728
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12685: LD_ADDR_VAR 0 2
12689: PUSH
12690: LD_VAR 0 1
12694: PUSH
12695: LD_INT 22
12697: PUSH
12698: LD_VAR 0 1
12702: PPUSH
12703: CALL_OW 255
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 58
12714: PUSH
12715: EMPTY
12716: LIST
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PPUSH
12722: CALL_OW 69
12726: IN
12727: ST_TO_ADDR
// end ;
12728: LD_VAR 0 2
12732: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12733: LD_INT 0
12735: PPUSH
12736: PPUSH
12737: PPUSH
12738: PPUSH
// tmp := [ ] ;
12739: LD_ADDR_VAR 0 3
12743: PUSH
12744: EMPTY
12745: ST_TO_ADDR
// list := [ ] ;
12746: LD_ADDR_VAR 0 5
12750: PUSH
12751: EMPTY
12752: ST_TO_ADDR
// for i = 16 to 25 do
12753: LD_ADDR_VAR 0 4
12757: PUSH
12758: DOUBLE
12759: LD_INT 16
12761: DEC
12762: ST_TO_ADDR
12763: LD_INT 25
12765: PUSH
12766: FOR_TO
12767: IFFALSE 12840
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12769: LD_ADDR_VAR 0 3
12773: PUSH
12774: LD_VAR 0 3
12778: PUSH
12779: LD_INT 22
12781: PUSH
12782: LD_VAR 0 1
12786: PPUSH
12787: CALL_OW 255
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: LD_INT 91
12798: PUSH
12799: LD_VAR 0 1
12803: PUSH
12804: LD_INT 6
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 30
12814: PUSH
12815: LD_VAR 0 4
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: LIST
12828: PUSH
12829: EMPTY
12830: LIST
12831: PPUSH
12832: CALL_OW 69
12836: ADD
12837: ST_TO_ADDR
12838: GO 12766
12840: POP
12841: POP
// for i = 1 to tmp do
12842: LD_ADDR_VAR 0 4
12846: PUSH
12847: DOUBLE
12848: LD_INT 1
12850: DEC
12851: ST_TO_ADDR
12852: LD_VAR 0 3
12856: PUSH
12857: FOR_TO
12858: IFFALSE 12946
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12860: LD_ADDR_VAR 0 5
12864: PUSH
12865: LD_VAR 0 5
12869: PUSH
12870: LD_VAR 0 3
12874: PUSH
12875: LD_VAR 0 4
12879: ARRAY
12880: PPUSH
12881: CALL_OW 266
12885: PUSH
12886: LD_VAR 0 3
12890: PUSH
12891: LD_VAR 0 4
12895: ARRAY
12896: PPUSH
12897: CALL_OW 250
12901: PUSH
12902: LD_VAR 0 3
12906: PUSH
12907: LD_VAR 0 4
12911: ARRAY
12912: PPUSH
12913: CALL_OW 251
12917: PUSH
12918: LD_VAR 0 3
12922: PUSH
12923: LD_VAR 0 4
12927: ARRAY
12928: PPUSH
12929: CALL_OW 254
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: ADD
12943: ST_TO_ADDR
12944: GO 12857
12946: POP
12947: POP
// result := list ;
12948: LD_ADDR_VAR 0 2
12952: PUSH
12953: LD_VAR 0 5
12957: ST_TO_ADDR
// end ;
12958: LD_VAR 0 2
12962: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12963: LD_INT 0
12965: PPUSH
12966: PPUSH
12967: PPUSH
12968: PPUSH
12969: PPUSH
12970: PPUSH
12971: PPUSH
// if not factory then
12972: LD_VAR 0 1
12976: NOT
12977: IFFALSE 12981
// exit ;
12979: GO 13506
// if control = control_apeman then
12981: LD_VAR 0 4
12985: PUSH
12986: LD_INT 5
12988: EQUAL
12989: IFFALSE 13098
// begin tmp := UnitsInside ( factory ) ;
12991: LD_ADDR_VAR 0 8
12995: PUSH
12996: LD_VAR 0 1
13000: PPUSH
13001: CALL_OW 313
13005: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13006: LD_VAR 0 8
13010: PPUSH
13011: LD_INT 25
13013: PUSH
13014: LD_INT 12
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PPUSH
13021: CALL_OW 72
13025: NOT
13026: IFFALSE 13036
// control := control_manual ;
13028: LD_ADDR_VAR 0 4
13032: PUSH
13033: LD_INT 1
13035: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13036: LD_ADDR_VAR 0 8
13040: PUSH
13041: LD_VAR 0 1
13045: PPUSH
13046: CALL 12733 0 1
13050: ST_TO_ADDR
// if tmp then
13051: LD_VAR 0 8
13055: IFFALSE 13098
// begin for i in tmp do
13057: LD_ADDR_VAR 0 7
13061: PUSH
13062: LD_VAR 0 8
13066: PUSH
13067: FOR_IN
13068: IFFALSE 13096
// if i [ 1 ] = b_ext_radar then
13070: LD_VAR 0 7
13074: PUSH
13075: LD_INT 1
13077: ARRAY
13078: PUSH
13079: LD_INT 20
13081: EQUAL
13082: IFFALSE 13094
// begin control := control_remote ;
13084: LD_ADDR_VAR 0 4
13088: PUSH
13089: LD_INT 2
13091: ST_TO_ADDR
// break ;
13092: GO 13096
// end ;
13094: GO 13067
13096: POP
13097: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13098: LD_VAR 0 1
13102: PPUSH
13103: LD_VAR 0 2
13107: PPUSH
13108: LD_VAR 0 3
13112: PPUSH
13113: LD_VAR 0 4
13117: PPUSH
13118: LD_VAR 0 5
13122: PPUSH
13123: CALL_OW 448
13127: IFFALSE 13162
// begin result := [ chassis , engine , control , weapon ] ;
13129: LD_ADDR_VAR 0 6
13133: PUSH
13134: LD_VAR 0 2
13138: PUSH
13139: LD_VAR 0 3
13143: PUSH
13144: LD_VAR 0 4
13148: PUSH
13149: LD_VAR 0 5
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: ST_TO_ADDR
// exit ;
13160: GO 13506
// end ; _chassis := AvailableChassisList ( factory ) ;
13162: LD_ADDR_VAR 0 9
13166: PUSH
13167: LD_VAR 0 1
13171: PPUSH
13172: CALL_OW 475
13176: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13177: LD_ADDR_VAR 0 11
13181: PUSH
13182: LD_VAR 0 1
13186: PPUSH
13187: CALL_OW 476
13191: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13192: LD_ADDR_VAR 0 12
13196: PUSH
13197: LD_VAR 0 1
13201: PPUSH
13202: CALL_OW 477
13206: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13207: LD_ADDR_VAR 0 10
13211: PUSH
13212: LD_VAR 0 1
13216: PPUSH
13217: CALL_OW 478
13221: ST_TO_ADDR
// if not chassis in _chassis then
13222: LD_VAR 0 2
13226: PUSH
13227: LD_VAR 0 9
13231: IN
13232: NOT
13233: IFFALSE 13259
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13235: LD_ADDR_VAR 0 2
13239: PUSH
13240: LD_VAR 0 9
13244: PUSH
13245: LD_INT 1
13247: PPUSH
13248: LD_VAR 0 9
13252: PPUSH
13253: CALL_OW 12
13257: ARRAY
13258: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13259: LD_VAR 0 2
13263: PPUSH
13264: LD_VAR 0 3
13268: PPUSH
13269: CALL 13511 0 2
13273: NOT
13274: IFFALSE 13333
// repeat engine := _engine [ 1 ] ;
13276: LD_ADDR_VAR 0 3
13280: PUSH
13281: LD_VAR 0 11
13285: PUSH
13286: LD_INT 1
13288: ARRAY
13289: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13290: LD_ADDR_VAR 0 11
13294: PUSH
13295: LD_VAR 0 11
13299: PPUSH
13300: LD_INT 1
13302: PPUSH
13303: CALL_OW 3
13307: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13308: LD_VAR 0 2
13312: PPUSH
13313: LD_VAR 0 3
13317: PPUSH
13318: CALL 13511 0 2
13322: PUSH
13323: LD_VAR 0 11
13327: PUSH
13328: EMPTY
13329: EQUAL
13330: OR
13331: IFFALSE 13276
// if not control in _control then
13333: LD_VAR 0 4
13337: PUSH
13338: LD_VAR 0 12
13342: IN
13343: NOT
13344: IFFALSE 13370
// control := _control [ rand ( 1 , _control ) ] ;
13346: LD_ADDR_VAR 0 4
13350: PUSH
13351: LD_VAR 0 12
13355: PUSH
13356: LD_INT 1
13358: PPUSH
13359: LD_VAR 0 12
13363: PPUSH
13364: CALL_OW 12
13368: ARRAY
13369: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13370: LD_VAR 0 2
13374: PPUSH
13375: LD_VAR 0 5
13379: PPUSH
13380: CALL 13731 0 2
13384: NOT
13385: IFFALSE 13444
// repeat weapon := _weapon [ 1 ] ;
13387: LD_ADDR_VAR 0 5
13391: PUSH
13392: LD_VAR 0 10
13396: PUSH
13397: LD_INT 1
13399: ARRAY
13400: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13401: LD_ADDR_VAR 0 10
13405: PUSH
13406: LD_VAR 0 10
13410: PPUSH
13411: LD_INT 1
13413: PPUSH
13414: CALL_OW 3
13418: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13419: LD_VAR 0 2
13423: PPUSH
13424: LD_VAR 0 5
13428: PPUSH
13429: CALL 13731 0 2
13433: PUSH
13434: LD_VAR 0 10
13438: PUSH
13439: EMPTY
13440: EQUAL
13441: OR
13442: IFFALSE 13387
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13444: LD_VAR 0 1
13448: PPUSH
13449: LD_VAR 0 2
13453: PPUSH
13454: LD_VAR 0 3
13458: PPUSH
13459: LD_VAR 0 4
13463: PPUSH
13464: LD_VAR 0 5
13468: PPUSH
13469: CALL_OW 448
13473: IFFALSE 13506
// result := [ chassis , engine , control , weapon ] ;
13475: LD_ADDR_VAR 0 6
13479: PUSH
13480: LD_VAR 0 2
13484: PUSH
13485: LD_VAR 0 3
13489: PUSH
13490: LD_VAR 0 4
13494: PUSH
13495: LD_VAR 0 5
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: ST_TO_ADDR
// end ;
13506: LD_VAR 0 6
13510: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13511: LD_INT 0
13513: PPUSH
// if not chassis or not engine then
13514: LD_VAR 0 1
13518: NOT
13519: PUSH
13520: LD_VAR 0 2
13524: NOT
13525: OR
13526: IFFALSE 13530
// exit ;
13528: GO 13726
// case engine of engine_solar :
13530: LD_VAR 0 2
13534: PUSH
13535: LD_INT 2
13537: DOUBLE
13538: EQUAL
13539: IFTRUE 13543
13541: GO 13581
13543: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13544: LD_ADDR_VAR 0 3
13548: PUSH
13549: LD_INT 11
13551: PUSH
13552: LD_INT 12
13554: PUSH
13555: LD_INT 13
13557: PUSH
13558: LD_INT 14
13560: PUSH
13561: LD_INT 1
13563: PUSH
13564: LD_INT 2
13566: PUSH
13567: LD_INT 3
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: ST_TO_ADDR
13579: GO 13710
13581: LD_INT 1
13583: DOUBLE
13584: EQUAL
13585: IFTRUE 13589
13587: GO 13651
13589: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13590: LD_ADDR_VAR 0 3
13594: PUSH
13595: LD_INT 11
13597: PUSH
13598: LD_INT 12
13600: PUSH
13601: LD_INT 13
13603: PUSH
13604: LD_INT 14
13606: PUSH
13607: LD_INT 1
13609: PUSH
13610: LD_INT 2
13612: PUSH
13613: LD_INT 3
13615: PUSH
13616: LD_INT 4
13618: PUSH
13619: LD_INT 5
13621: PUSH
13622: LD_INT 21
13624: PUSH
13625: LD_INT 23
13627: PUSH
13628: LD_INT 22
13630: PUSH
13631: LD_INT 24
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: ST_TO_ADDR
13649: GO 13710
13651: LD_INT 3
13653: DOUBLE
13654: EQUAL
13655: IFTRUE 13659
13657: GO 13709
13659: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13660: LD_ADDR_VAR 0 3
13664: PUSH
13665: LD_INT 13
13667: PUSH
13668: LD_INT 14
13670: PUSH
13671: LD_INT 2
13673: PUSH
13674: LD_INT 3
13676: PUSH
13677: LD_INT 4
13679: PUSH
13680: LD_INT 5
13682: PUSH
13683: LD_INT 21
13685: PUSH
13686: LD_INT 22
13688: PUSH
13689: LD_INT 23
13691: PUSH
13692: LD_INT 24
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: ST_TO_ADDR
13707: GO 13710
13709: POP
// result := ( chassis in result ) ;
13710: LD_ADDR_VAR 0 3
13714: PUSH
13715: LD_VAR 0 1
13719: PUSH
13720: LD_VAR 0 3
13724: IN
13725: ST_TO_ADDR
// end ;
13726: LD_VAR 0 3
13730: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13731: LD_INT 0
13733: PPUSH
// if not chassis or not weapon then
13734: LD_VAR 0 1
13738: NOT
13739: PUSH
13740: LD_VAR 0 2
13744: NOT
13745: OR
13746: IFFALSE 13750
// exit ;
13748: GO 14776
// case weapon of us_machine_gun :
13750: LD_VAR 0 2
13754: PUSH
13755: LD_INT 2
13757: DOUBLE
13758: EQUAL
13759: IFTRUE 13763
13761: GO 13793
13763: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13764: LD_ADDR_VAR 0 3
13768: PUSH
13769: LD_INT 1
13771: PUSH
13772: LD_INT 2
13774: PUSH
13775: LD_INT 3
13777: PUSH
13778: LD_INT 4
13780: PUSH
13781: LD_INT 5
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: ST_TO_ADDR
13791: GO 14760
13793: LD_INT 3
13795: DOUBLE
13796: EQUAL
13797: IFTRUE 13801
13799: GO 13831
13801: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13802: LD_ADDR_VAR 0 3
13806: PUSH
13807: LD_INT 1
13809: PUSH
13810: LD_INT 2
13812: PUSH
13813: LD_INT 3
13815: PUSH
13816: LD_INT 4
13818: PUSH
13819: LD_INT 5
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: ST_TO_ADDR
13829: GO 14760
13831: LD_INT 11
13833: DOUBLE
13834: EQUAL
13835: IFTRUE 13839
13837: GO 13869
13839: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13840: LD_ADDR_VAR 0 3
13844: PUSH
13845: LD_INT 1
13847: PUSH
13848: LD_INT 2
13850: PUSH
13851: LD_INT 3
13853: PUSH
13854: LD_INT 4
13856: PUSH
13857: LD_INT 5
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: ST_TO_ADDR
13867: GO 14760
13869: LD_INT 4
13871: DOUBLE
13872: EQUAL
13873: IFTRUE 13877
13875: GO 13903
13877: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13878: LD_ADDR_VAR 0 3
13882: PUSH
13883: LD_INT 2
13885: PUSH
13886: LD_INT 3
13888: PUSH
13889: LD_INT 4
13891: PUSH
13892: LD_INT 5
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: ST_TO_ADDR
13901: GO 14760
13903: LD_INT 5
13905: DOUBLE
13906: EQUAL
13907: IFTRUE 13911
13909: GO 13937
13911: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13912: LD_ADDR_VAR 0 3
13916: PUSH
13917: LD_INT 2
13919: PUSH
13920: LD_INT 3
13922: PUSH
13923: LD_INT 4
13925: PUSH
13926: LD_INT 5
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: ST_TO_ADDR
13935: GO 14760
13937: LD_INT 9
13939: DOUBLE
13940: EQUAL
13941: IFTRUE 13945
13943: GO 13971
13945: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13946: LD_ADDR_VAR 0 3
13950: PUSH
13951: LD_INT 2
13953: PUSH
13954: LD_INT 3
13956: PUSH
13957: LD_INT 4
13959: PUSH
13960: LD_INT 5
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: ST_TO_ADDR
13969: GO 14760
13971: LD_INT 7
13973: DOUBLE
13974: EQUAL
13975: IFTRUE 13979
13977: GO 14005
13979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13980: LD_ADDR_VAR 0 3
13984: PUSH
13985: LD_INT 2
13987: PUSH
13988: LD_INT 3
13990: PUSH
13991: LD_INT 4
13993: PUSH
13994: LD_INT 5
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: ST_TO_ADDR
14003: GO 14760
14005: LD_INT 12
14007: DOUBLE
14008: EQUAL
14009: IFTRUE 14013
14011: GO 14039
14013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14014: LD_ADDR_VAR 0 3
14018: PUSH
14019: LD_INT 2
14021: PUSH
14022: LD_INT 3
14024: PUSH
14025: LD_INT 4
14027: PUSH
14028: LD_INT 5
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: ST_TO_ADDR
14037: GO 14760
14039: LD_INT 13
14041: DOUBLE
14042: EQUAL
14043: IFTRUE 14047
14045: GO 14073
14047: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14048: LD_ADDR_VAR 0 3
14052: PUSH
14053: LD_INT 2
14055: PUSH
14056: LD_INT 3
14058: PUSH
14059: LD_INT 4
14061: PUSH
14062: LD_INT 5
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: ST_TO_ADDR
14071: GO 14760
14073: LD_INT 14
14075: DOUBLE
14076: EQUAL
14077: IFTRUE 14081
14079: GO 14099
14081: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14082: LD_ADDR_VAR 0 3
14086: PUSH
14087: LD_INT 4
14089: PUSH
14090: LD_INT 5
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: ST_TO_ADDR
14097: GO 14760
14099: LD_INT 6
14101: DOUBLE
14102: EQUAL
14103: IFTRUE 14107
14105: GO 14125
14107: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14108: LD_ADDR_VAR 0 3
14112: PUSH
14113: LD_INT 4
14115: PUSH
14116: LD_INT 5
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: ST_TO_ADDR
14123: GO 14760
14125: LD_INT 10
14127: DOUBLE
14128: EQUAL
14129: IFTRUE 14133
14131: GO 14151
14133: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14134: LD_ADDR_VAR 0 3
14138: PUSH
14139: LD_INT 4
14141: PUSH
14142: LD_INT 5
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: ST_TO_ADDR
14149: GO 14760
14151: LD_INT 22
14153: DOUBLE
14154: EQUAL
14155: IFTRUE 14159
14157: GO 14185
14159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14160: LD_ADDR_VAR 0 3
14164: PUSH
14165: LD_INT 11
14167: PUSH
14168: LD_INT 12
14170: PUSH
14171: LD_INT 13
14173: PUSH
14174: LD_INT 14
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: ST_TO_ADDR
14183: GO 14760
14185: LD_INT 23
14187: DOUBLE
14188: EQUAL
14189: IFTRUE 14193
14191: GO 14219
14193: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14194: LD_ADDR_VAR 0 3
14198: PUSH
14199: LD_INT 11
14201: PUSH
14202: LD_INT 12
14204: PUSH
14205: LD_INT 13
14207: PUSH
14208: LD_INT 14
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: ST_TO_ADDR
14217: GO 14760
14219: LD_INT 24
14221: DOUBLE
14222: EQUAL
14223: IFTRUE 14227
14225: GO 14253
14227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14228: LD_ADDR_VAR 0 3
14232: PUSH
14233: LD_INT 11
14235: PUSH
14236: LD_INT 12
14238: PUSH
14239: LD_INT 13
14241: PUSH
14242: LD_INT 14
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: ST_TO_ADDR
14251: GO 14760
14253: LD_INT 30
14255: DOUBLE
14256: EQUAL
14257: IFTRUE 14261
14259: GO 14287
14261: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14262: LD_ADDR_VAR 0 3
14266: PUSH
14267: LD_INT 11
14269: PUSH
14270: LD_INT 12
14272: PUSH
14273: LD_INT 13
14275: PUSH
14276: LD_INT 14
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: ST_TO_ADDR
14285: GO 14760
14287: LD_INT 25
14289: DOUBLE
14290: EQUAL
14291: IFTRUE 14295
14293: GO 14313
14295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14296: LD_ADDR_VAR 0 3
14300: PUSH
14301: LD_INT 13
14303: PUSH
14304: LD_INT 14
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: ST_TO_ADDR
14311: GO 14760
14313: LD_INT 27
14315: DOUBLE
14316: EQUAL
14317: IFTRUE 14321
14319: GO 14339
14321: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14322: LD_ADDR_VAR 0 3
14326: PUSH
14327: LD_INT 13
14329: PUSH
14330: LD_INT 14
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: ST_TO_ADDR
14337: GO 14760
14339: LD_INT 28
14341: DOUBLE
14342: EQUAL
14343: IFTRUE 14347
14345: GO 14365
14347: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14348: LD_ADDR_VAR 0 3
14352: PUSH
14353: LD_INT 13
14355: PUSH
14356: LD_INT 14
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: ST_TO_ADDR
14363: GO 14760
14365: LD_INT 29
14367: DOUBLE
14368: EQUAL
14369: IFTRUE 14373
14371: GO 14391
14373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14374: LD_ADDR_VAR 0 3
14378: PUSH
14379: LD_INT 13
14381: PUSH
14382: LD_INT 14
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: ST_TO_ADDR
14389: GO 14760
14391: LD_INT 31
14393: DOUBLE
14394: EQUAL
14395: IFTRUE 14399
14397: GO 14417
14399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14400: LD_ADDR_VAR 0 3
14404: PUSH
14405: LD_INT 13
14407: PUSH
14408: LD_INT 14
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: ST_TO_ADDR
14415: GO 14760
14417: LD_INT 26
14419: DOUBLE
14420: EQUAL
14421: IFTRUE 14425
14423: GO 14443
14425: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14426: LD_ADDR_VAR 0 3
14430: PUSH
14431: LD_INT 13
14433: PUSH
14434: LD_INT 14
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: ST_TO_ADDR
14441: GO 14760
14443: LD_INT 42
14445: DOUBLE
14446: EQUAL
14447: IFTRUE 14451
14449: GO 14477
14451: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14452: LD_ADDR_VAR 0 3
14456: PUSH
14457: LD_INT 21
14459: PUSH
14460: LD_INT 22
14462: PUSH
14463: LD_INT 23
14465: PUSH
14466: LD_INT 24
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: ST_TO_ADDR
14475: GO 14760
14477: LD_INT 43
14479: DOUBLE
14480: EQUAL
14481: IFTRUE 14485
14483: GO 14511
14485: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14486: LD_ADDR_VAR 0 3
14490: PUSH
14491: LD_INT 21
14493: PUSH
14494: LD_INT 22
14496: PUSH
14497: LD_INT 23
14499: PUSH
14500: LD_INT 24
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: ST_TO_ADDR
14509: GO 14760
14511: LD_INT 44
14513: DOUBLE
14514: EQUAL
14515: IFTRUE 14519
14517: GO 14545
14519: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14520: LD_ADDR_VAR 0 3
14524: PUSH
14525: LD_INT 21
14527: PUSH
14528: LD_INT 22
14530: PUSH
14531: LD_INT 23
14533: PUSH
14534: LD_INT 24
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: ST_TO_ADDR
14543: GO 14760
14545: LD_INT 45
14547: DOUBLE
14548: EQUAL
14549: IFTRUE 14553
14551: GO 14579
14553: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14554: LD_ADDR_VAR 0 3
14558: PUSH
14559: LD_INT 21
14561: PUSH
14562: LD_INT 22
14564: PUSH
14565: LD_INT 23
14567: PUSH
14568: LD_INT 24
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: ST_TO_ADDR
14577: GO 14760
14579: LD_INT 49
14581: DOUBLE
14582: EQUAL
14583: IFTRUE 14587
14585: GO 14613
14587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14588: LD_ADDR_VAR 0 3
14592: PUSH
14593: LD_INT 21
14595: PUSH
14596: LD_INT 22
14598: PUSH
14599: LD_INT 23
14601: PUSH
14602: LD_INT 24
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: ST_TO_ADDR
14611: GO 14760
14613: LD_INT 51
14615: DOUBLE
14616: EQUAL
14617: IFTRUE 14621
14619: GO 14647
14621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14622: LD_ADDR_VAR 0 3
14626: PUSH
14627: LD_INT 21
14629: PUSH
14630: LD_INT 22
14632: PUSH
14633: LD_INT 23
14635: PUSH
14636: LD_INT 24
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: ST_TO_ADDR
14645: GO 14760
14647: LD_INT 52
14649: DOUBLE
14650: EQUAL
14651: IFTRUE 14655
14653: GO 14681
14655: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14656: LD_ADDR_VAR 0 3
14660: PUSH
14661: LD_INT 21
14663: PUSH
14664: LD_INT 22
14666: PUSH
14667: LD_INT 23
14669: PUSH
14670: LD_INT 24
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: ST_TO_ADDR
14679: GO 14760
14681: LD_INT 53
14683: DOUBLE
14684: EQUAL
14685: IFTRUE 14689
14687: GO 14707
14689: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14690: LD_ADDR_VAR 0 3
14694: PUSH
14695: LD_INT 23
14697: PUSH
14698: LD_INT 24
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: ST_TO_ADDR
14705: GO 14760
14707: LD_INT 46
14709: DOUBLE
14710: EQUAL
14711: IFTRUE 14715
14713: GO 14733
14715: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14716: LD_ADDR_VAR 0 3
14720: PUSH
14721: LD_INT 23
14723: PUSH
14724: LD_INT 24
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: ST_TO_ADDR
14731: GO 14760
14733: LD_INT 47
14735: DOUBLE
14736: EQUAL
14737: IFTRUE 14741
14739: GO 14759
14741: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14742: LD_ADDR_VAR 0 3
14746: PUSH
14747: LD_INT 23
14749: PUSH
14750: LD_INT 24
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: ST_TO_ADDR
14757: GO 14760
14759: POP
// result := ( chassis in result ) ;
14760: LD_ADDR_VAR 0 3
14764: PUSH
14765: LD_VAR 0 1
14769: PUSH
14770: LD_VAR 0 3
14774: IN
14775: ST_TO_ADDR
// end ;
14776: LD_VAR 0 3
14780: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14781: LD_INT 0
14783: PPUSH
14784: PPUSH
14785: PPUSH
14786: PPUSH
14787: PPUSH
14788: PPUSH
14789: PPUSH
// result := array ;
14790: LD_ADDR_VAR 0 5
14794: PUSH
14795: LD_VAR 0 1
14799: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14800: LD_VAR 0 1
14804: NOT
14805: PUSH
14806: LD_VAR 0 2
14810: NOT
14811: OR
14812: PUSH
14813: LD_VAR 0 3
14817: NOT
14818: OR
14819: PUSH
14820: LD_VAR 0 2
14824: PUSH
14825: LD_VAR 0 1
14829: GREATER
14830: OR
14831: PUSH
14832: LD_VAR 0 3
14836: PUSH
14837: LD_VAR 0 1
14841: GREATER
14842: OR
14843: IFFALSE 14847
// exit ;
14845: GO 15143
// if direction then
14847: LD_VAR 0 4
14851: IFFALSE 14915
// begin d := 1 ;
14853: LD_ADDR_VAR 0 9
14857: PUSH
14858: LD_INT 1
14860: ST_TO_ADDR
// if i_from > i_to then
14861: LD_VAR 0 2
14865: PUSH
14866: LD_VAR 0 3
14870: GREATER
14871: IFFALSE 14897
// length := ( array - i_from ) + i_to else
14873: LD_ADDR_VAR 0 11
14877: PUSH
14878: LD_VAR 0 1
14882: PUSH
14883: LD_VAR 0 2
14887: MINUS
14888: PUSH
14889: LD_VAR 0 3
14893: PLUS
14894: ST_TO_ADDR
14895: GO 14913
// length := i_to - i_from ;
14897: LD_ADDR_VAR 0 11
14901: PUSH
14902: LD_VAR 0 3
14906: PUSH
14907: LD_VAR 0 2
14911: MINUS
14912: ST_TO_ADDR
// end else
14913: GO 14976
// begin d := - 1 ;
14915: LD_ADDR_VAR 0 9
14919: PUSH
14920: LD_INT 1
14922: NEG
14923: ST_TO_ADDR
// if i_from > i_to then
14924: LD_VAR 0 2
14928: PUSH
14929: LD_VAR 0 3
14933: GREATER
14934: IFFALSE 14954
// length := i_from - i_to else
14936: LD_ADDR_VAR 0 11
14940: PUSH
14941: LD_VAR 0 2
14945: PUSH
14946: LD_VAR 0 3
14950: MINUS
14951: ST_TO_ADDR
14952: GO 14976
// length := ( array - i_to ) + i_from ;
14954: LD_ADDR_VAR 0 11
14958: PUSH
14959: LD_VAR 0 1
14963: PUSH
14964: LD_VAR 0 3
14968: MINUS
14969: PUSH
14970: LD_VAR 0 2
14974: PLUS
14975: ST_TO_ADDR
// end ; if not length then
14976: LD_VAR 0 11
14980: NOT
14981: IFFALSE 14985
// exit ;
14983: GO 15143
// tmp := array ;
14985: LD_ADDR_VAR 0 10
14989: PUSH
14990: LD_VAR 0 1
14994: ST_TO_ADDR
// for i = 1 to length do
14995: LD_ADDR_VAR 0 6
14999: PUSH
15000: DOUBLE
15001: LD_INT 1
15003: DEC
15004: ST_TO_ADDR
15005: LD_VAR 0 11
15009: PUSH
15010: FOR_TO
15011: IFFALSE 15131
// begin for j = 1 to array do
15013: LD_ADDR_VAR 0 7
15017: PUSH
15018: DOUBLE
15019: LD_INT 1
15021: DEC
15022: ST_TO_ADDR
15023: LD_VAR 0 1
15027: PUSH
15028: FOR_TO
15029: IFFALSE 15117
// begin k := j + d ;
15031: LD_ADDR_VAR 0 8
15035: PUSH
15036: LD_VAR 0 7
15040: PUSH
15041: LD_VAR 0 9
15045: PLUS
15046: ST_TO_ADDR
// if k > array then
15047: LD_VAR 0 8
15051: PUSH
15052: LD_VAR 0 1
15056: GREATER
15057: IFFALSE 15067
// k := 1 ;
15059: LD_ADDR_VAR 0 8
15063: PUSH
15064: LD_INT 1
15066: ST_TO_ADDR
// if not k then
15067: LD_VAR 0 8
15071: NOT
15072: IFFALSE 15084
// k := array ;
15074: LD_ADDR_VAR 0 8
15078: PUSH
15079: LD_VAR 0 1
15083: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15084: LD_ADDR_VAR 0 10
15088: PUSH
15089: LD_VAR 0 10
15093: PPUSH
15094: LD_VAR 0 8
15098: PPUSH
15099: LD_VAR 0 1
15103: PUSH
15104: LD_VAR 0 7
15108: ARRAY
15109: PPUSH
15110: CALL_OW 1
15114: ST_TO_ADDR
// end ;
15115: GO 15028
15117: POP
15118: POP
// array := tmp ;
15119: LD_ADDR_VAR 0 1
15123: PUSH
15124: LD_VAR 0 10
15128: ST_TO_ADDR
// end ;
15129: GO 15010
15131: POP
15132: POP
// result := array ;
15133: LD_ADDR_VAR 0 5
15137: PUSH
15138: LD_VAR 0 1
15142: ST_TO_ADDR
// end ;
15143: LD_VAR 0 5
15147: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15148: LD_INT 0
15150: PPUSH
15151: PPUSH
// result := 0 ;
15152: LD_ADDR_VAR 0 3
15156: PUSH
15157: LD_INT 0
15159: ST_TO_ADDR
// if not array or not value in array then
15160: LD_VAR 0 1
15164: NOT
15165: PUSH
15166: LD_VAR 0 2
15170: PUSH
15171: LD_VAR 0 1
15175: IN
15176: NOT
15177: OR
15178: IFFALSE 15182
// exit ;
15180: GO 15236
// for i = 1 to array do
15182: LD_ADDR_VAR 0 4
15186: PUSH
15187: DOUBLE
15188: LD_INT 1
15190: DEC
15191: ST_TO_ADDR
15192: LD_VAR 0 1
15196: PUSH
15197: FOR_TO
15198: IFFALSE 15234
// if value = array [ i ] then
15200: LD_VAR 0 2
15204: PUSH
15205: LD_VAR 0 1
15209: PUSH
15210: LD_VAR 0 4
15214: ARRAY
15215: EQUAL
15216: IFFALSE 15232
// begin result := i ;
15218: LD_ADDR_VAR 0 3
15222: PUSH
15223: LD_VAR 0 4
15227: ST_TO_ADDR
// exit ;
15228: POP
15229: POP
15230: GO 15236
// end ;
15232: GO 15197
15234: POP
15235: POP
// end ;
15236: LD_VAR 0 3
15240: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15241: LD_INT 0
15243: PPUSH
// vc_chassis := chassis ;
15244: LD_ADDR_OWVAR 37
15248: PUSH
15249: LD_VAR 0 1
15253: ST_TO_ADDR
// vc_engine := engine ;
15254: LD_ADDR_OWVAR 39
15258: PUSH
15259: LD_VAR 0 2
15263: ST_TO_ADDR
// vc_control := control ;
15264: LD_ADDR_OWVAR 38
15268: PUSH
15269: LD_VAR 0 3
15273: ST_TO_ADDR
// vc_weapon := weapon ;
15274: LD_ADDR_OWVAR 40
15278: PUSH
15279: LD_VAR 0 4
15283: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15284: LD_ADDR_OWVAR 41
15288: PUSH
15289: LD_VAR 0 5
15293: ST_TO_ADDR
// end ;
15294: LD_VAR 0 6
15298: RET
// export function WantPlant ( unit ) ; var task ; begin
15299: LD_INT 0
15301: PPUSH
15302: PPUSH
// result := false ;
15303: LD_ADDR_VAR 0 2
15307: PUSH
15308: LD_INT 0
15310: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15311: LD_ADDR_VAR 0 3
15315: PUSH
15316: LD_VAR 0 1
15320: PPUSH
15321: CALL_OW 437
15325: ST_TO_ADDR
// if task then
15326: LD_VAR 0 3
15330: IFFALSE 15358
// if task [ 1 ] [ 1 ] = p then
15332: LD_VAR 0 3
15336: PUSH
15337: LD_INT 1
15339: ARRAY
15340: PUSH
15341: LD_INT 1
15343: ARRAY
15344: PUSH
15345: LD_STRING p
15347: EQUAL
15348: IFFALSE 15358
// result := true ;
15350: LD_ADDR_VAR 0 2
15354: PUSH
15355: LD_INT 1
15357: ST_TO_ADDR
// end ;
15358: LD_VAR 0 2
15362: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15363: LD_INT 0
15365: PPUSH
15366: PPUSH
15367: PPUSH
15368: PPUSH
// if pos < 1 then
15369: LD_VAR 0 2
15373: PUSH
15374: LD_INT 1
15376: LESS
15377: IFFALSE 15381
// exit ;
15379: GO 15684
// if pos = 1 then
15381: LD_VAR 0 2
15385: PUSH
15386: LD_INT 1
15388: EQUAL
15389: IFFALSE 15422
// result := Replace ( arr , pos [ 1 ] , value ) else
15391: LD_ADDR_VAR 0 4
15395: PUSH
15396: LD_VAR 0 1
15400: PPUSH
15401: LD_VAR 0 2
15405: PUSH
15406: LD_INT 1
15408: ARRAY
15409: PPUSH
15410: LD_VAR 0 3
15414: PPUSH
15415: CALL_OW 1
15419: ST_TO_ADDR
15420: GO 15684
// begin tmp := arr ;
15422: LD_ADDR_VAR 0 6
15426: PUSH
15427: LD_VAR 0 1
15431: ST_TO_ADDR
// s_arr := [ tmp ] ;
15432: LD_ADDR_VAR 0 7
15436: PUSH
15437: LD_VAR 0 6
15441: PUSH
15442: EMPTY
15443: LIST
15444: ST_TO_ADDR
// for i = 1 to pos - 1 do
15445: LD_ADDR_VAR 0 5
15449: PUSH
15450: DOUBLE
15451: LD_INT 1
15453: DEC
15454: ST_TO_ADDR
15455: LD_VAR 0 2
15459: PUSH
15460: LD_INT 1
15462: MINUS
15463: PUSH
15464: FOR_TO
15465: IFFALSE 15510
// begin tmp := tmp [ pos [ i ] ] ;
15467: LD_ADDR_VAR 0 6
15471: PUSH
15472: LD_VAR 0 6
15476: PUSH
15477: LD_VAR 0 2
15481: PUSH
15482: LD_VAR 0 5
15486: ARRAY
15487: ARRAY
15488: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15489: LD_ADDR_VAR 0 7
15493: PUSH
15494: LD_VAR 0 7
15498: PUSH
15499: LD_VAR 0 6
15503: PUSH
15504: EMPTY
15505: LIST
15506: ADD
15507: ST_TO_ADDR
// end ;
15508: GO 15464
15510: POP
15511: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15512: LD_ADDR_VAR 0 6
15516: PUSH
15517: LD_VAR 0 6
15521: PPUSH
15522: LD_VAR 0 2
15526: PUSH
15527: LD_VAR 0 2
15531: ARRAY
15532: PPUSH
15533: LD_VAR 0 3
15537: PPUSH
15538: CALL_OW 1
15542: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15543: LD_ADDR_VAR 0 7
15547: PUSH
15548: LD_VAR 0 7
15552: PPUSH
15553: LD_VAR 0 7
15557: PPUSH
15558: LD_VAR 0 6
15562: PPUSH
15563: CALL_OW 1
15567: ST_TO_ADDR
// for i = s_arr downto 2 do
15568: LD_ADDR_VAR 0 5
15572: PUSH
15573: DOUBLE
15574: LD_VAR 0 7
15578: INC
15579: ST_TO_ADDR
15580: LD_INT 2
15582: PUSH
15583: FOR_DOWNTO
15584: IFFALSE 15668
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15586: LD_ADDR_VAR 0 6
15590: PUSH
15591: LD_VAR 0 7
15595: PUSH
15596: LD_VAR 0 5
15600: PUSH
15601: LD_INT 1
15603: MINUS
15604: ARRAY
15605: PPUSH
15606: LD_VAR 0 2
15610: PUSH
15611: LD_VAR 0 5
15615: PUSH
15616: LD_INT 1
15618: MINUS
15619: ARRAY
15620: PPUSH
15621: LD_VAR 0 7
15625: PUSH
15626: LD_VAR 0 5
15630: ARRAY
15631: PPUSH
15632: CALL_OW 1
15636: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15637: LD_ADDR_VAR 0 7
15641: PUSH
15642: LD_VAR 0 7
15646: PPUSH
15647: LD_VAR 0 5
15651: PUSH
15652: LD_INT 1
15654: MINUS
15655: PPUSH
15656: LD_VAR 0 6
15660: PPUSH
15661: CALL_OW 1
15665: ST_TO_ADDR
// end ;
15666: GO 15583
15668: POP
15669: POP
// result := s_arr [ 1 ] ;
15670: LD_ADDR_VAR 0 4
15674: PUSH
15675: LD_VAR 0 7
15679: PUSH
15680: LD_INT 1
15682: ARRAY
15683: ST_TO_ADDR
// end ; end ;
15684: LD_VAR 0 4
15688: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15689: LD_INT 0
15691: PPUSH
15692: PPUSH
// if not list then
15693: LD_VAR 0 1
15697: NOT
15698: IFFALSE 15702
// exit ;
15700: GO 15793
// i := list [ pos1 ] ;
15702: LD_ADDR_VAR 0 5
15706: PUSH
15707: LD_VAR 0 1
15711: PUSH
15712: LD_VAR 0 2
15716: ARRAY
15717: ST_TO_ADDR
// if not i then
15718: LD_VAR 0 5
15722: NOT
15723: IFFALSE 15727
// exit ;
15725: GO 15793
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15727: LD_ADDR_VAR 0 1
15731: PUSH
15732: LD_VAR 0 1
15736: PPUSH
15737: LD_VAR 0 2
15741: PPUSH
15742: LD_VAR 0 1
15746: PUSH
15747: LD_VAR 0 3
15751: ARRAY
15752: PPUSH
15753: CALL_OW 1
15757: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15758: LD_ADDR_VAR 0 1
15762: PUSH
15763: LD_VAR 0 1
15767: PPUSH
15768: LD_VAR 0 3
15772: PPUSH
15773: LD_VAR 0 5
15777: PPUSH
15778: CALL_OW 1
15782: ST_TO_ADDR
// result := list ;
15783: LD_ADDR_VAR 0 4
15787: PUSH
15788: LD_VAR 0 1
15792: ST_TO_ADDR
// end ;
15793: LD_VAR 0 4
15797: RET
// export function Add ( list , pos , val ) ; begin
15798: LD_INT 0
15800: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
15801: LD_ADDR_VAR 0 4
15805: PUSH
15806: LD_VAR 0 1
15810: PPUSH
15811: LD_VAR 0 2
15815: PPUSH
15816: LD_VAR 0 3
15820: PPUSH
15821: CALL 15363 0 3
15825: ST_TO_ADDR
15826: LD_VAR 0 4
15830: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15831: LD_INT 0
15833: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15834: LD_ADDR_VAR 0 5
15838: PUSH
15839: LD_VAR 0 1
15843: PPUSH
15844: CALL_OW 250
15848: PPUSH
15849: LD_VAR 0 1
15853: PPUSH
15854: CALL_OW 251
15858: PPUSH
15859: LD_VAR 0 2
15863: PPUSH
15864: LD_VAR 0 3
15868: PPUSH
15869: LD_VAR 0 4
15873: PPUSH
15874: CALL 15884 0 5
15878: ST_TO_ADDR
// end ;
15879: LD_VAR 0 5
15883: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15884: LD_INT 0
15886: PPUSH
15887: PPUSH
15888: PPUSH
15889: PPUSH
// if not list then
15890: LD_VAR 0 3
15894: NOT
15895: IFFALSE 15899
// exit ;
15897: GO 16287
// result := [ ] ;
15899: LD_ADDR_VAR 0 6
15903: PUSH
15904: EMPTY
15905: ST_TO_ADDR
// for i in list do
15906: LD_ADDR_VAR 0 7
15910: PUSH
15911: LD_VAR 0 3
15915: PUSH
15916: FOR_IN
15917: IFFALSE 16119
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15919: LD_ADDR_VAR 0 9
15923: PUSH
15924: LD_VAR 0 7
15928: PPUSH
15929: LD_VAR 0 1
15933: PPUSH
15934: LD_VAR 0 2
15938: PPUSH
15939: CALL_OW 297
15943: ST_TO_ADDR
// if not result then
15944: LD_VAR 0 6
15948: NOT
15949: IFFALSE 15975
// result := [ [ i , tmp ] ] else
15951: LD_ADDR_VAR 0 6
15955: PUSH
15956: LD_VAR 0 7
15960: PUSH
15961: LD_VAR 0 9
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: EMPTY
15971: LIST
15972: ST_TO_ADDR
15973: GO 16117
// begin if result [ result ] [ 2 ] < tmp then
15975: LD_VAR 0 6
15979: PUSH
15980: LD_VAR 0 6
15984: ARRAY
15985: PUSH
15986: LD_INT 2
15988: ARRAY
15989: PUSH
15990: LD_VAR 0 9
15994: LESS
15995: IFFALSE 16037
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15997: LD_ADDR_VAR 0 6
16001: PUSH
16002: LD_VAR 0 6
16006: PPUSH
16007: LD_VAR 0 6
16011: PUSH
16012: LD_INT 1
16014: PLUS
16015: PPUSH
16016: LD_VAR 0 7
16020: PUSH
16021: LD_VAR 0 9
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PPUSH
16030: CALL_OW 2
16034: ST_TO_ADDR
16035: GO 16117
// for j = 1 to result do
16037: LD_ADDR_VAR 0 8
16041: PUSH
16042: DOUBLE
16043: LD_INT 1
16045: DEC
16046: ST_TO_ADDR
16047: LD_VAR 0 6
16051: PUSH
16052: FOR_TO
16053: IFFALSE 16115
// begin if tmp < result [ j ] [ 2 ] then
16055: LD_VAR 0 9
16059: PUSH
16060: LD_VAR 0 6
16064: PUSH
16065: LD_VAR 0 8
16069: ARRAY
16070: PUSH
16071: LD_INT 2
16073: ARRAY
16074: LESS
16075: IFFALSE 16113
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16077: LD_ADDR_VAR 0 6
16081: PUSH
16082: LD_VAR 0 6
16086: PPUSH
16087: LD_VAR 0 8
16091: PPUSH
16092: LD_VAR 0 7
16096: PUSH
16097: LD_VAR 0 9
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PPUSH
16106: CALL_OW 2
16110: ST_TO_ADDR
// break ;
16111: GO 16115
// end ; end ;
16113: GO 16052
16115: POP
16116: POP
// end ; end ;
16117: GO 15916
16119: POP
16120: POP
// if result and not asc then
16121: LD_VAR 0 6
16125: PUSH
16126: LD_VAR 0 4
16130: NOT
16131: AND
16132: IFFALSE 16207
// begin tmp := result ;
16134: LD_ADDR_VAR 0 9
16138: PUSH
16139: LD_VAR 0 6
16143: ST_TO_ADDR
// for i = tmp downto 1 do
16144: LD_ADDR_VAR 0 7
16148: PUSH
16149: DOUBLE
16150: LD_VAR 0 9
16154: INC
16155: ST_TO_ADDR
16156: LD_INT 1
16158: PUSH
16159: FOR_DOWNTO
16160: IFFALSE 16205
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16162: LD_ADDR_VAR 0 6
16166: PUSH
16167: LD_VAR 0 6
16171: PPUSH
16172: LD_VAR 0 9
16176: PUSH
16177: LD_VAR 0 7
16181: MINUS
16182: PUSH
16183: LD_INT 1
16185: PLUS
16186: PPUSH
16187: LD_VAR 0 9
16191: PUSH
16192: LD_VAR 0 7
16196: ARRAY
16197: PPUSH
16198: CALL_OW 1
16202: ST_TO_ADDR
16203: GO 16159
16205: POP
16206: POP
// end ; tmp := [ ] ;
16207: LD_ADDR_VAR 0 9
16211: PUSH
16212: EMPTY
16213: ST_TO_ADDR
// if mode then
16214: LD_VAR 0 5
16218: IFFALSE 16287
// begin for i = 1 to result do
16220: LD_ADDR_VAR 0 7
16224: PUSH
16225: DOUBLE
16226: LD_INT 1
16228: DEC
16229: ST_TO_ADDR
16230: LD_VAR 0 6
16234: PUSH
16235: FOR_TO
16236: IFFALSE 16275
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16238: LD_ADDR_VAR 0 9
16242: PUSH
16243: LD_VAR 0 9
16247: PPUSH
16248: LD_VAR 0 7
16252: PPUSH
16253: LD_VAR 0 6
16257: PUSH
16258: LD_VAR 0 7
16262: ARRAY
16263: PUSH
16264: LD_INT 1
16266: ARRAY
16267: PPUSH
16268: CALL_OW 1
16272: ST_TO_ADDR
16273: GO 16235
16275: POP
16276: POP
// result := tmp ;
16277: LD_ADDR_VAR 0 6
16281: PUSH
16282: LD_VAR 0 9
16286: ST_TO_ADDR
// end ; end ;
16287: LD_VAR 0 6
16291: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16292: LD_INT 0
16294: PPUSH
16295: PPUSH
16296: PPUSH
16297: PPUSH
16298: PPUSH
16299: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16300: LD_ADDR_VAR 0 5
16304: PUSH
16305: LD_INT 0
16307: PUSH
16308: LD_INT 0
16310: PUSH
16311: LD_INT 0
16313: PUSH
16314: EMPTY
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: ST_TO_ADDR
// if not x or not y then
16322: LD_VAR 0 2
16326: NOT
16327: PUSH
16328: LD_VAR 0 3
16332: NOT
16333: OR
16334: IFFALSE 16338
// exit ;
16336: GO 17984
// if not range then
16338: LD_VAR 0 4
16342: NOT
16343: IFFALSE 16353
// range := 10 ;
16345: LD_ADDR_VAR 0 4
16349: PUSH
16350: LD_INT 10
16352: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16353: LD_ADDR_VAR 0 8
16357: PUSH
16358: LD_INT 81
16360: PUSH
16361: LD_VAR 0 1
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 92
16372: PUSH
16373: LD_VAR 0 2
16377: PUSH
16378: LD_VAR 0 3
16382: PUSH
16383: LD_VAR 0 4
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 3
16396: PUSH
16397: LD_INT 21
16399: PUSH
16400: LD_INT 3
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: LIST
16415: PPUSH
16416: CALL_OW 69
16420: ST_TO_ADDR
// if not tmp then
16421: LD_VAR 0 8
16425: NOT
16426: IFFALSE 16430
// exit ;
16428: GO 17984
// for i in tmp do
16430: LD_ADDR_VAR 0 6
16434: PUSH
16435: LD_VAR 0 8
16439: PUSH
16440: FOR_IN
16441: IFFALSE 17959
// begin points := [ 0 , 0 , 0 ] ;
16443: LD_ADDR_VAR 0 9
16447: PUSH
16448: LD_INT 0
16450: PUSH
16451: LD_INT 0
16453: PUSH
16454: LD_INT 0
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: LIST
16461: ST_TO_ADDR
// bpoints := 1 ;
16462: LD_ADDR_VAR 0 10
16466: PUSH
16467: LD_INT 1
16469: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16470: LD_VAR 0 6
16474: PPUSH
16475: CALL_OW 247
16479: PUSH
16480: LD_INT 1
16482: DOUBLE
16483: EQUAL
16484: IFTRUE 16488
16486: GO 17066
16488: POP
// begin if GetClass ( i ) = 1 then
16489: LD_VAR 0 6
16493: PPUSH
16494: CALL_OW 257
16498: PUSH
16499: LD_INT 1
16501: EQUAL
16502: IFFALSE 16523
// points := [ 10 , 5 , 3 ] ;
16504: LD_ADDR_VAR 0 9
16508: PUSH
16509: LD_INT 10
16511: PUSH
16512: LD_INT 5
16514: PUSH
16515: LD_INT 3
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: LIST
16522: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16523: LD_VAR 0 6
16527: PPUSH
16528: CALL_OW 257
16532: PUSH
16533: LD_INT 2
16535: PUSH
16536: LD_INT 3
16538: PUSH
16539: LD_INT 4
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: LIST
16546: IN
16547: IFFALSE 16568
// points := [ 3 , 2 , 1 ] ;
16549: LD_ADDR_VAR 0 9
16553: PUSH
16554: LD_INT 3
16556: PUSH
16557: LD_INT 2
16559: PUSH
16560: LD_INT 1
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: LIST
16567: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16568: LD_VAR 0 6
16572: PPUSH
16573: CALL_OW 257
16577: PUSH
16578: LD_INT 5
16580: EQUAL
16581: IFFALSE 16602
// points := [ 130 , 5 , 2 ] ;
16583: LD_ADDR_VAR 0 9
16587: PUSH
16588: LD_INT 130
16590: PUSH
16591: LD_INT 5
16593: PUSH
16594: LD_INT 2
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16602: LD_VAR 0 6
16606: PPUSH
16607: CALL_OW 257
16611: PUSH
16612: LD_INT 8
16614: EQUAL
16615: IFFALSE 16636
// points := [ 35 , 35 , 30 ] ;
16617: LD_ADDR_VAR 0 9
16621: PUSH
16622: LD_INT 35
16624: PUSH
16625: LD_INT 35
16627: PUSH
16628: LD_INT 30
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: LIST
16635: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16636: LD_VAR 0 6
16640: PPUSH
16641: CALL_OW 257
16645: PUSH
16646: LD_INT 9
16648: EQUAL
16649: IFFALSE 16670
// points := [ 20 , 55 , 40 ] ;
16651: LD_ADDR_VAR 0 9
16655: PUSH
16656: LD_INT 20
16658: PUSH
16659: LD_INT 55
16661: PUSH
16662: LD_INT 40
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: LIST
16669: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16670: LD_VAR 0 6
16674: PPUSH
16675: CALL_OW 257
16679: PUSH
16680: LD_INT 12
16682: PUSH
16683: LD_INT 16
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: IN
16690: IFFALSE 16711
// points := [ 5 , 3 , 2 ] ;
16692: LD_ADDR_VAR 0 9
16696: PUSH
16697: LD_INT 5
16699: PUSH
16700: LD_INT 3
16702: PUSH
16703: LD_INT 2
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: LIST
16710: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16711: LD_VAR 0 6
16715: PPUSH
16716: CALL_OW 257
16720: PUSH
16721: LD_INT 17
16723: EQUAL
16724: IFFALSE 16745
// points := [ 100 , 50 , 75 ] ;
16726: LD_ADDR_VAR 0 9
16730: PUSH
16731: LD_INT 100
16733: PUSH
16734: LD_INT 50
16736: PUSH
16737: LD_INT 75
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: LIST
16744: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16745: LD_VAR 0 6
16749: PPUSH
16750: CALL_OW 257
16754: PUSH
16755: LD_INT 15
16757: EQUAL
16758: IFFALSE 16779
// points := [ 10 , 5 , 3 ] ;
16760: LD_ADDR_VAR 0 9
16764: PUSH
16765: LD_INT 10
16767: PUSH
16768: LD_INT 5
16770: PUSH
16771: LD_INT 3
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: LIST
16778: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16779: LD_VAR 0 6
16783: PPUSH
16784: CALL_OW 257
16788: PUSH
16789: LD_INT 14
16791: EQUAL
16792: IFFALSE 16813
// points := [ 10 , 0 , 0 ] ;
16794: LD_ADDR_VAR 0 9
16798: PUSH
16799: LD_INT 10
16801: PUSH
16802: LD_INT 0
16804: PUSH
16805: LD_INT 0
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: LIST
16812: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16813: LD_VAR 0 6
16817: PPUSH
16818: CALL_OW 257
16822: PUSH
16823: LD_INT 11
16825: EQUAL
16826: IFFALSE 16847
// points := [ 30 , 10 , 5 ] ;
16828: LD_ADDR_VAR 0 9
16832: PUSH
16833: LD_INT 30
16835: PUSH
16836: LD_INT 10
16838: PUSH
16839: LD_INT 5
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: LIST
16846: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16847: LD_VAR 0 1
16851: PPUSH
16852: LD_INT 5
16854: PPUSH
16855: CALL_OW 321
16859: PUSH
16860: LD_INT 2
16862: EQUAL
16863: IFFALSE 16880
// bpoints := bpoints * 1.8 ;
16865: LD_ADDR_VAR 0 10
16869: PUSH
16870: LD_VAR 0 10
16874: PUSH
16875: LD_REAL  1.80000000000000E+0000
16878: MUL
16879: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16880: LD_VAR 0 6
16884: PPUSH
16885: CALL_OW 257
16889: PUSH
16890: LD_INT 1
16892: PUSH
16893: LD_INT 2
16895: PUSH
16896: LD_INT 3
16898: PUSH
16899: LD_INT 4
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: IN
16908: PUSH
16909: LD_VAR 0 1
16913: PPUSH
16914: LD_INT 51
16916: PPUSH
16917: CALL_OW 321
16921: PUSH
16922: LD_INT 2
16924: EQUAL
16925: AND
16926: IFFALSE 16943
// bpoints := bpoints * 1.2 ;
16928: LD_ADDR_VAR 0 10
16932: PUSH
16933: LD_VAR 0 10
16937: PUSH
16938: LD_REAL  1.20000000000000E+0000
16941: MUL
16942: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16943: LD_VAR 0 6
16947: PPUSH
16948: CALL_OW 257
16952: PUSH
16953: LD_INT 5
16955: PUSH
16956: LD_INT 7
16958: PUSH
16959: LD_INT 9
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: LIST
16966: IN
16967: PUSH
16968: LD_VAR 0 1
16972: PPUSH
16973: LD_INT 52
16975: PPUSH
16976: CALL_OW 321
16980: PUSH
16981: LD_INT 2
16983: EQUAL
16984: AND
16985: IFFALSE 17002
// bpoints := bpoints * 1.5 ;
16987: LD_ADDR_VAR 0 10
16991: PUSH
16992: LD_VAR 0 10
16996: PUSH
16997: LD_REAL  1.50000000000000E+0000
17000: MUL
17001: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17002: LD_VAR 0 1
17006: PPUSH
17007: LD_INT 66
17009: PPUSH
17010: CALL_OW 321
17014: PUSH
17015: LD_INT 2
17017: EQUAL
17018: IFFALSE 17035
// bpoints := bpoints * 1.1 ;
17020: LD_ADDR_VAR 0 10
17024: PUSH
17025: LD_VAR 0 10
17029: PUSH
17030: LD_REAL  1.10000000000000E+0000
17033: MUL
17034: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17035: LD_ADDR_VAR 0 10
17039: PUSH
17040: LD_VAR 0 10
17044: PUSH
17045: LD_VAR 0 6
17049: PPUSH
17050: LD_INT 1
17052: PPUSH
17053: CALL_OW 259
17057: PUSH
17058: LD_REAL  1.15000000000000E+0000
17061: MUL
17062: MUL
17063: ST_TO_ADDR
// end ; unit_vehicle :
17064: GO 17888
17066: LD_INT 2
17068: DOUBLE
17069: EQUAL
17070: IFTRUE 17074
17072: GO 17876
17074: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17075: LD_VAR 0 6
17079: PPUSH
17080: CALL_OW 264
17084: PUSH
17085: LD_INT 2
17087: PUSH
17088: LD_INT 42
17090: PUSH
17091: LD_INT 24
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: LIST
17098: IN
17099: IFFALSE 17120
// points := [ 25 , 5 , 3 ] ;
17101: LD_ADDR_VAR 0 9
17105: PUSH
17106: LD_INT 25
17108: PUSH
17109: LD_INT 5
17111: PUSH
17112: LD_INT 3
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: LIST
17119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17120: LD_VAR 0 6
17124: PPUSH
17125: CALL_OW 264
17129: PUSH
17130: LD_INT 4
17132: PUSH
17133: LD_INT 43
17135: PUSH
17136: LD_INT 25
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: LIST
17143: IN
17144: IFFALSE 17165
// points := [ 40 , 15 , 5 ] ;
17146: LD_ADDR_VAR 0 9
17150: PUSH
17151: LD_INT 40
17153: PUSH
17154: LD_INT 15
17156: PUSH
17157: LD_INT 5
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17165: LD_VAR 0 6
17169: PPUSH
17170: CALL_OW 264
17174: PUSH
17175: LD_INT 3
17177: PUSH
17178: LD_INT 23
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: IN
17185: IFFALSE 17206
// points := [ 7 , 25 , 8 ] ;
17187: LD_ADDR_VAR 0 9
17191: PUSH
17192: LD_INT 7
17194: PUSH
17195: LD_INT 25
17197: PUSH
17198: LD_INT 8
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: LIST
17205: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17206: LD_VAR 0 6
17210: PPUSH
17211: CALL_OW 264
17215: PUSH
17216: LD_INT 5
17218: PUSH
17219: LD_INT 27
17221: PUSH
17222: LD_INT 44
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: LIST
17229: IN
17230: IFFALSE 17251
// points := [ 14 , 50 , 16 ] ;
17232: LD_ADDR_VAR 0 9
17236: PUSH
17237: LD_INT 14
17239: PUSH
17240: LD_INT 50
17242: PUSH
17243: LD_INT 16
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: LIST
17250: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17251: LD_VAR 0 6
17255: PPUSH
17256: CALL_OW 264
17260: PUSH
17261: LD_INT 6
17263: PUSH
17264: LD_INT 46
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: IN
17271: IFFALSE 17292
// points := [ 32 , 120 , 70 ] ;
17273: LD_ADDR_VAR 0 9
17277: PUSH
17278: LD_INT 32
17280: PUSH
17281: LD_INT 120
17283: PUSH
17284: LD_INT 70
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: LIST
17291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
17292: LD_VAR 0 6
17296: PPUSH
17297: CALL_OW 264
17301: PUSH
17302: LD_INT 7
17304: PUSH
17305: LD_INT 28
17307: PUSH
17308: LD_INT 45
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: IN
17316: IFFALSE 17337
// points := [ 35 , 20 , 45 ] ;
17318: LD_ADDR_VAR 0 9
17322: PUSH
17323: LD_INT 35
17325: PUSH
17326: LD_INT 20
17328: PUSH
17329: LD_INT 45
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: LIST
17336: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17337: LD_VAR 0 6
17341: PPUSH
17342: CALL_OW 264
17346: PUSH
17347: LD_INT 47
17349: PUSH
17350: EMPTY
17351: LIST
17352: IN
17353: IFFALSE 17374
// points := [ 67 , 45 , 75 ] ;
17355: LD_ADDR_VAR 0 9
17359: PUSH
17360: LD_INT 67
17362: PUSH
17363: LD_INT 45
17365: PUSH
17366: LD_INT 75
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: LIST
17373: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17374: LD_VAR 0 6
17378: PPUSH
17379: CALL_OW 264
17383: PUSH
17384: LD_INT 26
17386: PUSH
17387: EMPTY
17388: LIST
17389: IN
17390: IFFALSE 17411
// points := [ 120 , 30 , 80 ] ;
17392: LD_ADDR_VAR 0 9
17396: PUSH
17397: LD_INT 120
17399: PUSH
17400: LD_INT 30
17402: PUSH
17403: LD_INT 80
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: LIST
17410: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17411: LD_VAR 0 6
17415: PPUSH
17416: CALL_OW 264
17420: PUSH
17421: LD_INT 22
17423: PUSH
17424: EMPTY
17425: LIST
17426: IN
17427: IFFALSE 17448
// points := [ 40 , 1 , 1 ] ;
17429: LD_ADDR_VAR 0 9
17433: PUSH
17434: LD_INT 40
17436: PUSH
17437: LD_INT 1
17439: PUSH
17440: LD_INT 1
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17448: LD_VAR 0 6
17452: PPUSH
17453: CALL_OW 264
17457: PUSH
17458: LD_INT 29
17460: PUSH
17461: EMPTY
17462: LIST
17463: IN
17464: IFFALSE 17485
// points := [ 70 , 200 , 400 ] ;
17466: LD_ADDR_VAR 0 9
17470: PUSH
17471: LD_INT 70
17473: PUSH
17474: LD_INT 200
17476: PUSH
17477: LD_INT 400
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17485: LD_VAR 0 6
17489: PPUSH
17490: CALL_OW 264
17494: PUSH
17495: LD_INT 14
17497: PUSH
17498: LD_INT 53
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: IN
17505: IFFALSE 17526
// points := [ 40 , 10 , 20 ] ;
17507: LD_ADDR_VAR 0 9
17511: PUSH
17512: LD_INT 40
17514: PUSH
17515: LD_INT 10
17517: PUSH
17518: LD_INT 20
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: LIST
17525: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17526: LD_VAR 0 6
17530: PPUSH
17531: CALL_OW 264
17535: PUSH
17536: LD_INT 9
17538: PUSH
17539: EMPTY
17540: LIST
17541: IN
17542: IFFALSE 17563
// points := [ 5 , 70 , 20 ] ;
17544: LD_ADDR_VAR 0 9
17548: PUSH
17549: LD_INT 5
17551: PUSH
17552: LD_INT 70
17554: PUSH
17555: LD_INT 20
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: LIST
17562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17563: LD_VAR 0 6
17567: PPUSH
17568: CALL_OW 264
17572: PUSH
17573: LD_INT 10
17575: PUSH
17576: EMPTY
17577: LIST
17578: IN
17579: IFFALSE 17600
// points := [ 35 , 110 , 70 ] ;
17581: LD_ADDR_VAR 0 9
17585: PUSH
17586: LD_INT 35
17588: PUSH
17589: LD_INT 110
17591: PUSH
17592: LD_INT 70
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17600: LD_VAR 0 6
17604: PPUSH
17605: CALL_OW 265
17609: PUSH
17610: LD_INT 25
17612: EQUAL
17613: IFFALSE 17634
// points := [ 80 , 65 , 100 ] ;
17615: LD_ADDR_VAR 0 9
17619: PUSH
17620: LD_INT 80
17622: PUSH
17623: LD_INT 65
17625: PUSH
17626: LD_INT 100
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: LIST
17633: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17634: LD_VAR 0 6
17638: PPUSH
17639: CALL_OW 263
17643: PUSH
17644: LD_INT 1
17646: EQUAL
17647: IFFALSE 17682
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17649: LD_ADDR_VAR 0 10
17653: PUSH
17654: LD_VAR 0 10
17658: PUSH
17659: LD_VAR 0 6
17663: PPUSH
17664: CALL_OW 311
17668: PPUSH
17669: LD_INT 3
17671: PPUSH
17672: CALL_OW 259
17676: PUSH
17677: LD_INT 4
17679: MUL
17680: MUL
17681: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17682: LD_VAR 0 6
17686: PPUSH
17687: CALL_OW 263
17691: PUSH
17692: LD_INT 2
17694: EQUAL
17695: IFFALSE 17746
// begin j := IsControledBy ( i ) ;
17697: LD_ADDR_VAR 0 7
17701: PUSH
17702: LD_VAR 0 6
17706: PPUSH
17707: CALL_OW 312
17711: ST_TO_ADDR
// if j then
17712: LD_VAR 0 7
17716: IFFALSE 17746
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17718: LD_ADDR_VAR 0 10
17722: PUSH
17723: LD_VAR 0 10
17727: PUSH
17728: LD_VAR 0 7
17732: PPUSH
17733: LD_INT 3
17735: PPUSH
17736: CALL_OW 259
17740: PUSH
17741: LD_INT 3
17743: MUL
17744: MUL
17745: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17746: LD_VAR 0 6
17750: PPUSH
17751: CALL_OW 264
17755: PUSH
17756: LD_INT 5
17758: PUSH
17759: LD_INT 6
17761: PUSH
17762: LD_INT 46
17764: PUSH
17765: LD_INT 44
17767: PUSH
17768: LD_INT 47
17770: PUSH
17771: LD_INT 45
17773: PUSH
17774: LD_INT 28
17776: PUSH
17777: LD_INT 7
17779: PUSH
17780: LD_INT 27
17782: PUSH
17783: LD_INT 29
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: IN
17798: PUSH
17799: LD_VAR 0 1
17803: PPUSH
17804: LD_INT 52
17806: PPUSH
17807: CALL_OW 321
17811: PUSH
17812: LD_INT 2
17814: EQUAL
17815: AND
17816: IFFALSE 17833
// bpoints := bpoints * 1.2 ;
17818: LD_ADDR_VAR 0 10
17822: PUSH
17823: LD_VAR 0 10
17827: PUSH
17828: LD_REAL  1.20000000000000E+0000
17831: MUL
17832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17833: LD_VAR 0 6
17837: PPUSH
17838: CALL_OW 264
17842: PUSH
17843: LD_INT 6
17845: PUSH
17846: LD_INT 46
17848: PUSH
17849: LD_INT 47
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: LIST
17856: IN
17857: IFFALSE 17874
// bpoints := bpoints * 1.2 ;
17859: LD_ADDR_VAR 0 10
17863: PUSH
17864: LD_VAR 0 10
17868: PUSH
17869: LD_REAL  1.20000000000000E+0000
17872: MUL
17873: ST_TO_ADDR
// end ; unit_building :
17874: GO 17888
17876: LD_INT 3
17878: DOUBLE
17879: EQUAL
17880: IFTRUE 17884
17882: GO 17887
17884: POP
// ; end ;
17885: GO 17888
17887: POP
// for j = 1 to 3 do
17888: LD_ADDR_VAR 0 7
17892: PUSH
17893: DOUBLE
17894: LD_INT 1
17896: DEC
17897: ST_TO_ADDR
17898: LD_INT 3
17900: PUSH
17901: FOR_TO
17902: IFFALSE 17955
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17904: LD_ADDR_VAR 0 5
17908: PUSH
17909: LD_VAR 0 5
17913: PPUSH
17914: LD_VAR 0 7
17918: PPUSH
17919: LD_VAR 0 5
17923: PUSH
17924: LD_VAR 0 7
17928: ARRAY
17929: PUSH
17930: LD_VAR 0 9
17934: PUSH
17935: LD_VAR 0 7
17939: ARRAY
17940: PUSH
17941: LD_VAR 0 10
17945: MUL
17946: PLUS
17947: PPUSH
17948: CALL_OW 1
17952: ST_TO_ADDR
17953: GO 17901
17955: POP
17956: POP
// end ;
17957: GO 16440
17959: POP
17960: POP
// result := Replace ( result , 4 , tmp ) ;
17961: LD_ADDR_VAR 0 5
17965: PUSH
17966: LD_VAR 0 5
17970: PPUSH
17971: LD_INT 4
17973: PPUSH
17974: LD_VAR 0 8
17978: PPUSH
17979: CALL_OW 1
17983: ST_TO_ADDR
// end ;
17984: LD_VAR 0 5
17988: RET
// export function DangerAtRange ( unit , range ) ; begin
17989: LD_INT 0
17991: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17992: LD_ADDR_VAR 0 3
17996: PUSH
17997: LD_VAR 0 1
18001: PPUSH
18002: CALL_OW 255
18006: PPUSH
18007: LD_VAR 0 1
18011: PPUSH
18012: CALL_OW 250
18016: PPUSH
18017: LD_VAR 0 1
18021: PPUSH
18022: CALL_OW 251
18026: PPUSH
18027: LD_VAR 0 2
18031: PPUSH
18032: CALL 16292 0 4
18036: ST_TO_ADDR
// end ;
18037: LD_VAR 0 3
18041: RET
// export function IsExtension ( b ) ; begin
18042: LD_INT 0
18044: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18045: LD_ADDR_VAR 0 2
18049: PUSH
18050: LD_VAR 0 1
18054: PPUSH
18055: CALL_OW 266
18059: PUSH
18060: LD_INT 23
18062: PUSH
18063: LD_INT 20
18065: PUSH
18066: LD_INT 22
18068: PUSH
18069: LD_INT 17
18071: PUSH
18072: LD_INT 24
18074: PUSH
18075: LD_INT 21
18077: PUSH
18078: LD_INT 19
18080: PUSH
18081: LD_INT 16
18083: PUSH
18084: LD_INT 25
18086: PUSH
18087: LD_INT 18
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: IN
18102: ST_TO_ADDR
// end ;
18103: LD_VAR 0 2
18107: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
18108: LD_INT 0
18110: PPUSH
18111: PPUSH
18112: PPUSH
// result := [ ] ;
18113: LD_ADDR_VAR 0 2
18117: PUSH
18118: EMPTY
18119: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
18120: LD_ADDR_VAR 0 3
18124: PUSH
18125: LD_INT 21
18127: PUSH
18128: LD_INT 3
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PPUSH
18135: CALL_OW 69
18139: ST_TO_ADDR
// if not tmp then
18140: LD_VAR 0 3
18144: NOT
18145: IFFALSE 18149
// exit ;
18147: GO 18199
// for i in tmp do
18149: LD_ADDR_VAR 0 4
18153: PUSH
18154: LD_VAR 0 3
18158: PUSH
18159: FOR_IN
18160: IFFALSE 18197
// if GetBase ( i ) = base then
18162: LD_VAR 0 4
18166: PPUSH
18167: CALL_OW 274
18171: PUSH
18172: LD_VAR 0 1
18176: EQUAL
18177: IFFALSE 18195
// result := result ^ i ;
18179: LD_ADDR_VAR 0 2
18183: PUSH
18184: LD_VAR 0 2
18188: PUSH
18189: LD_VAR 0 4
18193: ADD
18194: ST_TO_ADDR
18195: GO 18159
18197: POP
18198: POP
// end ;
18199: LD_VAR 0 2
18203: RET
// export function ComComplete ( unit , b ) ; var i ; begin
18204: LD_INT 0
18206: PPUSH
18207: PPUSH
// if BuildingStatus ( b ) = bs_build then
18208: LD_VAR 0 2
18212: PPUSH
18213: CALL_OW 461
18217: PUSH
18218: LD_INT 1
18220: EQUAL
18221: IFFALSE 18281
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18223: LD_VAR 0 1
18227: PPUSH
18228: LD_STRING h
18230: PUSH
18231: LD_VAR 0 2
18235: PPUSH
18236: CALL_OW 250
18240: PUSH
18241: LD_VAR 0 2
18245: PPUSH
18246: CALL_OW 251
18250: PUSH
18251: LD_VAR 0 2
18255: PUSH
18256: LD_INT 0
18258: PUSH
18259: LD_INT 0
18261: PUSH
18262: LD_INT 0
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: PUSH
18274: EMPTY
18275: LIST
18276: PPUSH
18277: CALL_OW 446
// end ;
18281: LD_VAR 0 3
18285: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18286: LD_INT 0
18288: PPUSH
18289: PPUSH
18290: PPUSH
18291: PPUSH
18292: PPUSH
18293: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
18294: LD_VAR 0 1
18298: NOT
18299: PUSH
18300: LD_VAR 0 1
18304: PPUSH
18305: CALL_OW 263
18309: PUSH
18310: LD_INT 2
18312: EQUAL
18313: NOT
18314: OR
18315: IFFALSE 18319
// exit ;
18317: GO 18635
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18319: LD_ADDR_VAR 0 6
18323: PUSH
18324: LD_INT 22
18326: PUSH
18327: LD_VAR 0 1
18331: PPUSH
18332: CALL_OW 255
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 2
18343: PUSH
18344: LD_INT 30
18346: PUSH
18347: LD_INT 36
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 34
18356: PUSH
18357: LD_INT 31
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PPUSH
18373: CALL_OW 69
18377: ST_TO_ADDR
// if not tmp then
18378: LD_VAR 0 6
18382: NOT
18383: IFFALSE 18387
// exit ;
18385: GO 18635
// result := [ ] ;
18387: LD_ADDR_VAR 0 2
18391: PUSH
18392: EMPTY
18393: ST_TO_ADDR
// for i in tmp do
18394: LD_ADDR_VAR 0 3
18398: PUSH
18399: LD_VAR 0 6
18403: PUSH
18404: FOR_IN
18405: IFFALSE 18476
// begin t := UnitsInside ( i ) ;
18407: LD_ADDR_VAR 0 4
18411: PUSH
18412: LD_VAR 0 3
18416: PPUSH
18417: CALL_OW 313
18421: ST_TO_ADDR
// if t then
18422: LD_VAR 0 4
18426: IFFALSE 18474
// for j in t do
18428: LD_ADDR_VAR 0 7
18432: PUSH
18433: LD_VAR 0 4
18437: PUSH
18438: FOR_IN
18439: IFFALSE 18472
// result := Insert ( result , result + 1 , j ) ;
18441: LD_ADDR_VAR 0 2
18445: PUSH
18446: LD_VAR 0 2
18450: PPUSH
18451: LD_VAR 0 2
18455: PUSH
18456: LD_INT 1
18458: PLUS
18459: PPUSH
18460: LD_VAR 0 7
18464: PPUSH
18465: CALL_OW 2
18469: ST_TO_ADDR
18470: GO 18438
18472: POP
18473: POP
// end ;
18474: GO 18404
18476: POP
18477: POP
// if not result then
18478: LD_VAR 0 2
18482: NOT
18483: IFFALSE 18487
// exit ;
18485: GO 18635
// mech := result [ 1 ] ;
18487: LD_ADDR_VAR 0 5
18491: PUSH
18492: LD_VAR 0 2
18496: PUSH
18497: LD_INT 1
18499: ARRAY
18500: ST_TO_ADDR
// if result > 1 then
18501: LD_VAR 0 2
18505: PUSH
18506: LD_INT 1
18508: GREATER
18509: IFFALSE 18621
// for i = 2 to result do
18511: LD_ADDR_VAR 0 3
18515: PUSH
18516: DOUBLE
18517: LD_INT 2
18519: DEC
18520: ST_TO_ADDR
18521: LD_VAR 0 2
18525: PUSH
18526: FOR_TO
18527: IFFALSE 18619
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18529: LD_ADDR_VAR 0 4
18533: PUSH
18534: LD_VAR 0 2
18538: PUSH
18539: LD_VAR 0 3
18543: ARRAY
18544: PPUSH
18545: LD_INT 3
18547: PPUSH
18548: CALL_OW 259
18552: PUSH
18553: LD_VAR 0 2
18557: PUSH
18558: LD_VAR 0 3
18562: ARRAY
18563: PPUSH
18564: CALL_OW 432
18568: MINUS
18569: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18570: LD_VAR 0 4
18574: PUSH
18575: LD_VAR 0 5
18579: PPUSH
18580: LD_INT 3
18582: PPUSH
18583: CALL_OW 259
18587: PUSH
18588: LD_VAR 0 5
18592: PPUSH
18593: CALL_OW 432
18597: MINUS
18598: GREATEREQUAL
18599: IFFALSE 18617
// mech := result [ i ] ;
18601: LD_ADDR_VAR 0 5
18605: PUSH
18606: LD_VAR 0 2
18610: PUSH
18611: LD_VAR 0 3
18615: ARRAY
18616: ST_TO_ADDR
// end ;
18617: GO 18526
18619: POP
18620: POP
// ComLinkTo ( vehicle , mech ) ;
18621: LD_VAR 0 1
18625: PPUSH
18626: LD_VAR 0 5
18630: PPUSH
18631: CALL_OW 135
// end ;
18635: LD_VAR 0 2
18639: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
18640: LD_INT 0
18642: PPUSH
18643: PPUSH
18644: PPUSH
18645: PPUSH
18646: PPUSH
18647: PPUSH
18648: PPUSH
18649: PPUSH
18650: PPUSH
18651: PPUSH
18652: PPUSH
18653: PPUSH
// result := [ ] ;
18654: LD_ADDR_VAR 0 6
18658: PUSH
18659: EMPTY
18660: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18661: LD_VAR 0 1
18665: PPUSH
18666: CALL_OW 266
18670: PUSH
18671: LD_INT 0
18673: PUSH
18674: LD_INT 1
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: IN
18681: NOT
18682: IFFALSE 18686
// exit ;
18684: GO 20095
// if name then
18686: LD_VAR 0 2
18690: IFFALSE 18706
// SetBName ( base_dep , name ) ;
18692: LD_VAR 0 1
18696: PPUSH
18697: LD_VAR 0 2
18701: PPUSH
18702: CALL_OW 500
// base := GetBase ( base_dep ) ;
18706: LD_ADDR_VAR 0 14
18710: PUSH
18711: LD_VAR 0 1
18715: PPUSH
18716: CALL_OW 274
18720: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18721: LD_ADDR_VAR 0 15
18725: PUSH
18726: LD_VAR 0 1
18730: PPUSH
18731: CALL_OW 255
18735: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18736: LD_ADDR_VAR 0 16
18740: PUSH
18741: LD_VAR 0 1
18745: PPUSH
18746: CALL_OW 248
18750: ST_TO_ADDR
// if sources then
18751: LD_VAR 0 4
18755: IFFALSE 18802
// for i = 1 to 3 do
18757: LD_ADDR_VAR 0 7
18761: PUSH
18762: DOUBLE
18763: LD_INT 1
18765: DEC
18766: ST_TO_ADDR
18767: LD_INT 3
18769: PUSH
18770: FOR_TO
18771: IFFALSE 18800
// AddResourceType ( base , i , sources [ i ] ) ;
18773: LD_VAR 0 14
18777: PPUSH
18778: LD_VAR 0 7
18782: PPUSH
18783: LD_VAR 0 4
18787: PUSH
18788: LD_VAR 0 7
18792: ARRAY
18793: PPUSH
18794: CALL_OW 276
18798: GO 18770
18800: POP
18801: POP
// buildings := GetBaseBuildings ( base ) ;
18802: LD_ADDR_VAR 0 17
18806: PUSH
18807: LD_VAR 0 14
18811: PPUSH
18812: CALL 18108 0 1
18816: ST_TO_ADDR
// InitHc ;
18817: CALL_OW 19
// InitUc ;
18821: CALL_OW 18
// uc_side := side ;
18825: LD_ADDR_OWVAR 20
18829: PUSH
18830: LD_VAR 0 15
18834: ST_TO_ADDR
// uc_nation := nation ;
18835: LD_ADDR_OWVAR 21
18839: PUSH
18840: LD_VAR 0 16
18844: ST_TO_ADDR
// if buildings then
18845: LD_VAR 0 17
18849: IFFALSE 19954
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18851: LD_VAR 0 17
18855: PPUSH
18856: LD_INT 2
18858: PUSH
18859: LD_INT 30
18861: PUSH
18862: LD_INT 32
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 30
18871: PUSH
18872: LD_INT 33
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: LIST
18883: PPUSH
18884: CALL_OW 72
18888: IFFALSE 18971
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18890: LD_ADDR_VAR 0 7
18894: PUSH
18895: LD_VAR 0 17
18899: PPUSH
18900: LD_INT 2
18902: PUSH
18903: LD_INT 30
18905: PUSH
18906: LD_INT 32
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 30
18915: PUSH
18916: LD_INT 33
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: LIST
18927: PPUSH
18928: CALL_OW 72
18932: PUSH
18933: FOR_IN
18934: IFFALSE 18969
// begin if not GetBWeapon ( i ) then
18936: LD_VAR 0 7
18940: PPUSH
18941: CALL_OW 269
18945: NOT
18946: IFFALSE 18967
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
18948: LD_VAR 0 7
18952: PPUSH
18953: LD_VAR 0 7
18957: PPUSH
18958: CALL 20100 0 1
18962: PPUSH
18963: CALL_OW 431
// end ;
18967: GO 18933
18969: POP
18970: POP
// end ; for i = 1 to personel do
18971: LD_ADDR_VAR 0 7
18975: PUSH
18976: DOUBLE
18977: LD_INT 1
18979: DEC
18980: ST_TO_ADDR
18981: LD_VAR 0 5
18985: PUSH
18986: FOR_TO
18987: IFFALSE 19934
// begin if i > 4 then
18989: LD_VAR 0 7
18993: PUSH
18994: LD_INT 4
18996: GREATER
18997: IFFALSE 19001
// break ;
18999: GO 19934
// case i of 1 :
19001: LD_VAR 0 7
19005: PUSH
19006: LD_INT 1
19008: DOUBLE
19009: EQUAL
19010: IFTRUE 19014
19012: GO 19087
19014: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19015: LD_ADDR_VAR 0 11
19019: PUSH
19020: LD_VAR 0 17
19024: PPUSH
19025: LD_INT 22
19027: PUSH
19028: LD_VAR 0 15
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 2
19039: PUSH
19040: LD_INT 30
19042: PUSH
19043: LD_INT 32
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 30
19052: PUSH
19053: LD_INT 4
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 30
19062: PUSH
19063: LD_INT 5
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PPUSH
19080: CALL_OW 72
19084: ST_TO_ADDR
19085: GO 19309
19087: LD_INT 2
19089: DOUBLE
19090: EQUAL
19091: IFTRUE 19095
19093: GO 19157
19095: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19096: LD_ADDR_VAR 0 11
19100: PUSH
19101: LD_VAR 0 17
19105: PPUSH
19106: LD_INT 22
19108: PUSH
19109: LD_VAR 0 15
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 2
19120: PUSH
19121: LD_INT 30
19123: PUSH
19124: LD_INT 0
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 30
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PPUSH
19150: CALL_OW 72
19154: ST_TO_ADDR
19155: GO 19309
19157: LD_INT 3
19159: DOUBLE
19160: EQUAL
19161: IFTRUE 19165
19163: GO 19227
19165: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19166: LD_ADDR_VAR 0 11
19170: PUSH
19171: LD_VAR 0 17
19175: PPUSH
19176: LD_INT 22
19178: PUSH
19179: LD_VAR 0 15
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 2
19190: PUSH
19191: LD_INT 30
19193: PUSH
19194: LD_INT 2
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 30
19203: PUSH
19204: LD_INT 3
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PPUSH
19220: CALL_OW 72
19224: ST_TO_ADDR
19225: GO 19309
19227: LD_INT 4
19229: DOUBLE
19230: EQUAL
19231: IFTRUE 19235
19233: GO 19308
19235: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19236: LD_ADDR_VAR 0 11
19240: PUSH
19241: LD_VAR 0 17
19245: PPUSH
19246: LD_INT 22
19248: PUSH
19249: LD_VAR 0 15
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 2
19260: PUSH
19261: LD_INT 30
19263: PUSH
19264: LD_INT 6
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 30
19273: PUSH
19274: LD_INT 7
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 30
19283: PUSH
19284: LD_INT 8
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PPUSH
19301: CALL_OW 72
19305: ST_TO_ADDR
19306: GO 19309
19308: POP
// if not f then
19309: LD_VAR 0 11
19313: NOT
19314: IFFALSE 19318
// continue ;
19316: GO 18986
// x := personel [ i ] ;
19318: LD_ADDR_VAR 0 12
19322: PUSH
19323: LD_VAR 0 5
19327: PUSH
19328: LD_VAR 0 7
19332: ARRAY
19333: ST_TO_ADDR
// if x = - 1 then
19334: LD_VAR 0 12
19338: PUSH
19339: LD_INT 1
19341: NEG
19342: EQUAL
19343: IFFALSE 19552
// begin for j in f do
19345: LD_ADDR_VAR 0 8
19349: PUSH
19350: LD_VAR 0 11
19354: PUSH
19355: FOR_IN
19356: IFFALSE 19548
// repeat InitHc ;
19358: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19362: LD_VAR 0 8
19366: PPUSH
19367: CALL_OW 266
19371: PUSH
19372: LD_INT 5
19374: EQUAL
19375: IFFALSE 19445
// begin if UnitsInside ( j ) < 3 then
19377: LD_VAR 0 8
19381: PPUSH
19382: CALL_OW 313
19386: PUSH
19387: LD_INT 3
19389: LESS
19390: IFFALSE 19426
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19392: LD_INT 0
19394: PPUSH
19395: LD_INT 5
19397: PUSH
19398: LD_INT 8
19400: PUSH
19401: LD_INT 9
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: LIST
19408: PUSH
19409: LD_VAR 0 16
19413: ARRAY
19414: PPUSH
19415: LD_VAR 0 3
19419: PPUSH
19420: CALL_OW 380
19424: GO 19443
// PrepareHuman ( false , i , skill ) ;
19426: LD_INT 0
19428: PPUSH
19429: LD_VAR 0 7
19433: PPUSH
19434: LD_VAR 0 3
19438: PPUSH
19439: CALL_OW 380
// end else
19443: GO 19462
// PrepareHuman ( false , i , skill ) ;
19445: LD_INT 0
19447: PPUSH
19448: LD_VAR 0 7
19452: PPUSH
19453: LD_VAR 0 3
19457: PPUSH
19458: CALL_OW 380
// un := CreateHuman ;
19462: LD_ADDR_VAR 0 13
19466: PUSH
19467: CALL_OW 44
19471: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19472: LD_ADDR_VAR 0 6
19476: PUSH
19477: LD_VAR 0 6
19481: PPUSH
19482: LD_INT 1
19484: PPUSH
19485: LD_VAR 0 13
19489: PPUSH
19490: CALL_OW 2
19494: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19495: LD_VAR 0 13
19499: PPUSH
19500: LD_VAR 0 8
19504: PPUSH
19505: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19509: LD_VAR 0 8
19513: PPUSH
19514: CALL_OW 313
19518: PUSH
19519: LD_INT 6
19521: EQUAL
19522: PUSH
19523: LD_VAR 0 8
19527: PPUSH
19528: CALL_OW 266
19532: PUSH
19533: LD_INT 32
19535: PUSH
19536: LD_INT 31
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: IN
19543: OR
19544: IFFALSE 19358
19546: GO 19355
19548: POP
19549: POP
// end else
19550: GO 19932
// for j = 1 to x do
19552: LD_ADDR_VAR 0 8
19556: PUSH
19557: DOUBLE
19558: LD_INT 1
19560: DEC
19561: ST_TO_ADDR
19562: LD_VAR 0 12
19566: PUSH
19567: FOR_TO
19568: IFFALSE 19930
// begin InitHc ;
19570: CALL_OW 19
// if not f then
19574: LD_VAR 0 11
19578: NOT
19579: IFFALSE 19668
// begin PrepareHuman ( false , i , skill ) ;
19581: LD_INT 0
19583: PPUSH
19584: LD_VAR 0 7
19588: PPUSH
19589: LD_VAR 0 3
19593: PPUSH
19594: CALL_OW 380
// un := CreateHuman ;
19598: LD_ADDR_VAR 0 13
19602: PUSH
19603: CALL_OW 44
19607: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19608: LD_ADDR_VAR 0 6
19612: PUSH
19613: LD_VAR 0 6
19617: PPUSH
19618: LD_INT 1
19620: PPUSH
19621: LD_VAR 0 13
19625: PPUSH
19626: CALL_OW 2
19630: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19631: LD_VAR 0 13
19635: PPUSH
19636: LD_VAR 0 1
19640: PPUSH
19641: CALL_OW 250
19645: PPUSH
19646: LD_VAR 0 1
19650: PPUSH
19651: CALL_OW 251
19655: PPUSH
19656: LD_INT 10
19658: PPUSH
19659: LD_INT 0
19661: PPUSH
19662: CALL_OW 50
// continue ;
19666: GO 19567
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19668: LD_VAR 0 11
19672: PUSH
19673: LD_INT 1
19675: ARRAY
19676: PPUSH
19677: CALL_OW 313
19681: PUSH
19682: LD_VAR 0 11
19686: PUSH
19687: LD_INT 1
19689: ARRAY
19690: PPUSH
19691: CALL_OW 266
19695: PUSH
19696: LD_INT 32
19698: PUSH
19699: LD_INT 31
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: IN
19706: AND
19707: PUSH
19708: LD_VAR 0 11
19712: PUSH
19713: LD_INT 1
19715: ARRAY
19716: PPUSH
19717: CALL_OW 313
19721: PUSH
19722: LD_INT 6
19724: EQUAL
19725: OR
19726: IFFALSE 19746
// f := Delete ( f , 1 ) ;
19728: LD_ADDR_VAR 0 11
19732: PUSH
19733: LD_VAR 0 11
19737: PPUSH
19738: LD_INT 1
19740: PPUSH
19741: CALL_OW 3
19745: ST_TO_ADDR
// if not f then
19746: LD_VAR 0 11
19750: NOT
19751: IFFALSE 19769
// begin x := x + 2 ;
19753: LD_ADDR_VAR 0 12
19757: PUSH
19758: LD_VAR 0 12
19762: PUSH
19763: LD_INT 2
19765: PLUS
19766: ST_TO_ADDR
// continue ;
19767: GO 19567
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19769: LD_VAR 0 11
19773: PUSH
19774: LD_INT 1
19776: ARRAY
19777: PPUSH
19778: CALL_OW 266
19782: PUSH
19783: LD_INT 5
19785: EQUAL
19786: IFFALSE 19860
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19788: LD_VAR 0 11
19792: PUSH
19793: LD_INT 1
19795: ARRAY
19796: PPUSH
19797: CALL_OW 313
19801: PUSH
19802: LD_INT 3
19804: LESS
19805: IFFALSE 19841
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19807: LD_INT 0
19809: PPUSH
19810: LD_INT 5
19812: PUSH
19813: LD_INT 8
19815: PUSH
19816: LD_INT 9
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: LIST
19823: PUSH
19824: LD_VAR 0 16
19828: ARRAY
19829: PPUSH
19830: LD_VAR 0 3
19834: PPUSH
19835: CALL_OW 380
19839: GO 19858
// PrepareHuman ( false , i , skill ) ;
19841: LD_INT 0
19843: PPUSH
19844: LD_VAR 0 7
19848: PPUSH
19849: LD_VAR 0 3
19853: PPUSH
19854: CALL_OW 380
// end else
19858: GO 19877
// PrepareHuman ( false , i , skill ) ;
19860: LD_INT 0
19862: PPUSH
19863: LD_VAR 0 7
19867: PPUSH
19868: LD_VAR 0 3
19872: PPUSH
19873: CALL_OW 380
// un := CreateHuman ;
19877: LD_ADDR_VAR 0 13
19881: PUSH
19882: CALL_OW 44
19886: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19887: LD_ADDR_VAR 0 6
19891: PUSH
19892: LD_VAR 0 6
19896: PPUSH
19897: LD_INT 1
19899: PPUSH
19900: LD_VAR 0 13
19904: PPUSH
19905: CALL_OW 2
19909: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19910: LD_VAR 0 13
19914: PPUSH
19915: LD_VAR 0 11
19919: PUSH
19920: LD_INT 1
19922: ARRAY
19923: PPUSH
19924: CALL_OW 52
// end ;
19928: GO 19567
19930: POP
19931: POP
// end ;
19932: GO 18986
19934: POP
19935: POP
// result := result ^ buildings ;
19936: LD_ADDR_VAR 0 6
19940: PUSH
19941: LD_VAR 0 6
19945: PUSH
19946: LD_VAR 0 17
19950: ADD
19951: ST_TO_ADDR
// end else
19952: GO 20095
// begin for i = 1 to personel do
19954: LD_ADDR_VAR 0 7
19958: PUSH
19959: DOUBLE
19960: LD_INT 1
19962: DEC
19963: ST_TO_ADDR
19964: LD_VAR 0 5
19968: PUSH
19969: FOR_TO
19970: IFFALSE 20093
// begin if i > 4 then
19972: LD_VAR 0 7
19976: PUSH
19977: LD_INT 4
19979: GREATER
19980: IFFALSE 19984
// break ;
19982: GO 20093
// x := personel [ i ] ;
19984: LD_ADDR_VAR 0 12
19988: PUSH
19989: LD_VAR 0 5
19993: PUSH
19994: LD_VAR 0 7
19998: ARRAY
19999: ST_TO_ADDR
// if x = - 1 then
20000: LD_VAR 0 12
20004: PUSH
20005: LD_INT 1
20007: NEG
20008: EQUAL
20009: IFFALSE 20013
// continue ;
20011: GO 19969
// PrepareHuman ( false , i , skill ) ;
20013: LD_INT 0
20015: PPUSH
20016: LD_VAR 0 7
20020: PPUSH
20021: LD_VAR 0 3
20025: PPUSH
20026: CALL_OW 380
// un := CreateHuman ;
20030: LD_ADDR_VAR 0 13
20034: PUSH
20035: CALL_OW 44
20039: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20040: LD_VAR 0 13
20044: PPUSH
20045: LD_VAR 0 1
20049: PPUSH
20050: CALL_OW 250
20054: PPUSH
20055: LD_VAR 0 1
20059: PPUSH
20060: CALL_OW 251
20064: PPUSH
20065: LD_INT 10
20067: PPUSH
20068: LD_INT 0
20070: PPUSH
20071: CALL_OW 50
// result := result ^ un ;
20075: LD_ADDR_VAR 0 6
20079: PUSH
20080: LD_VAR 0 6
20084: PUSH
20085: LD_VAR 0 13
20089: ADD
20090: ST_TO_ADDR
// end ;
20091: GO 19969
20093: POP
20094: POP
// end ; end ;
20095: LD_VAR 0 6
20099: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20100: LD_INT 0
20102: PPUSH
20103: PPUSH
20104: PPUSH
20105: PPUSH
20106: PPUSH
20107: PPUSH
20108: PPUSH
20109: PPUSH
20110: PPUSH
20111: PPUSH
20112: PPUSH
20113: PPUSH
20114: PPUSH
20115: PPUSH
20116: PPUSH
20117: PPUSH
// result := false ;
20118: LD_ADDR_VAR 0 2
20122: PUSH
20123: LD_INT 0
20125: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20126: LD_VAR 0 1
20130: NOT
20131: PUSH
20132: LD_VAR 0 1
20136: PPUSH
20137: CALL_OW 266
20141: PUSH
20142: LD_INT 32
20144: PUSH
20145: LD_INT 33
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: IN
20152: NOT
20153: OR
20154: IFFALSE 20158
// exit ;
20156: GO 21391
// nat := GetNation ( tower ) ;
20158: LD_ADDR_VAR 0 11
20162: PUSH
20163: LD_VAR 0 1
20167: PPUSH
20168: CALL_OW 248
20172: ST_TO_ADDR
// side := GetSide ( tower ) ;
20173: LD_ADDR_VAR 0 15
20177: PUSH
20178: LD_VAR 0 1
20182: PPUSH
20183: CALL_OW 255
20187: ST_TO_ADDR
// x := GetX ( tower ) ;
20188: LD_ADDR_VAR 0 9
20192: PUSH
20193: LD_VAR 0 1
20197: PPUSH
20198: CALL_OW 250
20202: ST_TO_ADDR
// y := GetY ( tower ) ;
20203: LD_ADDR_VAR 0 10
20207: PUSH
20208: LD_VAR 0 1
20212: PPUSH
20213: CALL_OW 251
20217: ST_TO_ADDR
// if not x or not y then
20218: LD_VAR 0 9
20222: NOT
20223: PUSH
20224: LD_VAR 0 10
20228: NOT
20229: OR
20230: IFFALSE 20234
// exit ;
20232: GO 21391
// weapon := 0 ;
20234: LD_ADDR_VAR 0 17
20238: PUSH
20239: LD_INT 0
20241: ST_TO_ADDR
// fac_list := [ ] ;
20242: LD_ADDR_VAR 0 16
20246: PUSH
20247: EMPTY
20248: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
20249: LD_ADDR_VAR 0 5
20253: PUSH
20254: LD_VAR 0 1
20258: PPUSH
20259: CALL_OW 274
20263: PPUSH
20264: CALL 18108 0 1
20268: PPUSH
20269: LD_INT 30
20271: PUSH
20272: LD_INT 3
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PPUSH
20279: CALL_OW 72
20283: ST_TO_ADDR
// if not factories then
20284: LD_VAR 0 5
20288: NOT
20289: IFFALSE 20293
// exit ;
20291: GO 21391
// for i in factories do
20293: LD_ADDR_VAR 0 7
20297: PUSH
20298: LD_VAR 0 5
20302: PUSH
20303: FOR_IN
20304: IFFALSE 20329
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20306: LD_ADDR_VAR 0 16
20310: PUSH
20311: LD_VAR 0 16
20315: PUSH
20316: LD_VAR 0 7
20320: PPUSH
20321: CALL_OW 478
20325: UNION
20326: ST_TO_ADDR
20327: GO 20303
20329: POP
20330: POP
// if not fac_list then
20331: LD_VAR 0 16
20335: NOT
20336: IFFALSE 20340
// exit ;
20338: GO 21391
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20340: LD_ADDR_VAR 0 4
20344: PUSH
20345: LD_INT 4
20347: PUSH
20348: LD_INT 5
20350: PUSH
20351: LD_INT 9
20353: PUSH
20354: LD_INT 10
20356: PUSH
20357: LD_INT 6
20359: PUSH
20360: LD_INT 7
20362: PUSH
20363: LD_INT 11
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 27
20377: PUSH
20378: LD_INT 28
20380: PUSH
20381: LD_INT 26
20383: PUSH
20384: LD_INT 30
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 43
20395: PUSH
20396: LD_INT 44
20398: PUSH
20399: LD_INT 46
20401: PUSH
20402: LD_INT 45
20404: PUSH
20405: LD_INT 47
20407: PUSH
20408: LD_INT 49
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: LIST
20423: PUSH
20424: LD_VAR 0 11
20428: ARRAY
20429: ST_TO_ADDR
// for i in list do
20430: LD_ADDR_VAR 0 7
20434: PUSH
20435: LD_VAR 0 4
20439: PUSH
20440: FOR_IN
20441: IFFALSE 20474
// if not i in fac_list then
20443: LD_VAR 0 7
20447: PUSH
20448: LD_VAR 0 16
20452: IN
20453: NOT
20454: IFFALSE 20472
// list := list diff i ;
20456: LD_ADDR_VAR 0 4
20460: PUSH
20461: LD_VAR 0 4
20465: PUSH
20466: LD_VAR 0 7
20470: DIFF
20471: ST_TO_ADDR
20472: GO 20440
20474: POP
20475: POP
// if not list then
20476: LD_VAR 0 4
20480: NOT
20481: IFFALSE 20485
// exit ;
20483: GO 21391
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20485: LD_VAR 0 11
20489: PUSH
20490: LD_INT 3
20492: EQUAL
20493: PUSH
20494: LD_INT 49
20496: PUSH
20497: LD_VAR 0 4
20501: IN
20502: AND
20503: PUSH
20504: LD_INT 31
20506: PPUSH
20507: LD_VAR 0 15
20511: PPUSH
20512: CALL_OW 321
20516: PUSH
20517: LD_INT 2
20519: EQUAL
20520: AND
20521: IFFALSE 20581
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20523: LD_INT 22
20525: PUSH
20526: LD_VAR 0 15
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 35
20537: PUSH
20538: LD_INT 49
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 91
20547: PUSH
20548: LD_VAR 0 1
20552: PUSH
20553: LD_INT 10
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: LIST
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: LIST
20565: PPUSH
20566: CALL_OW 69
20570: NOT
20571: IFFALSE 20581
// weapon := ru_time_lapser ;
20573: LD_ADDR_VAR 0 17
20577: PUSH
20578: LD_INT 49
20580: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20581: LD_VAR 0 11
20585: PUSH
20586: LD_INT 1
20588: PUSH
20589: LD_INT 2
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: IN
20596: PUSH
20597: LD_INT 11
20599: PUSH
20600: LD_VAR 0 4
20604: IN
20605: PUSH
20606: LD_INT 30
20608: PUSH
20609: LD_VAR 0 4
20613: IN
20614: OR
20615: AND
20616: PUSH
20617: LD_INT 6
20619: PPUSH
20620: LD_VAR 0 15
20624: PPUSH
20625: CALL_OW 321
20629: PUSH
20630: LD_INT 2
20632: EQUAL
20633: AND
20634: IFFALSE 20799
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20636: LD_INT 22
20638: PUSH
20639: LD_VAR 0 15
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 2
20650: PUSH
20651: LD_INT 35
20653: PUSH
20654: LD_INT 11
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 35
20663: PUSH
20664: LD_INT 30
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 91
20678: PUSH
20679: LD_VAR 0 1
20683: PUSH
20684: LD_INT 18
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: LIST
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: LIST
20696: PPUSH
20697: CALL_OW 69
20701: NOT
20702: PUSH
20703: LD_INT 22
20705: PUSH
20706: LD_VAR 0 15
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: LD_INT 30
20720: PUSH
20721: LD_INT 32
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 30
20730: PUSH
20731: LD_INT 33
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 91
20745: PUSH
20746: LD_VAR 0 1
20750: PUSH
20751: LD_INT 12
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: LIST
20763: PUSH
20764: EMPTY
20765: LIST
20766: PPUSH
20767: CALL_OW 69
20771: PUSH
20772: LD_INT 2
20774: GREATER
20775: AND
20776: IFFALSE 20799
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20778: LD_ADDR_VAR 0 17
20782: PUSH
20783: LD_INT 11
20785: PUSH
20786: LD_INT 30
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_VAR 0 11
20797: ARRAY
20798: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20799: LD_VAR 0 17
20803: NOT
20804: PUSH
20805: LD_INT 40
20807: PPUSH
20808: LD_VAR 0 15
20812: PPUSH
20813: CALL_OW 321
20817: PUSH
20818: LD_INT 2
20820: EQUAL
20821: AND
20822: PUSH
20823: LD_INT 7
20825: PUSH
20826: LD_VAR 0 4
20830: IN
20831: PUSH
20832: LD_INT 28
20834: PUSH
20835: LD_VAR 0 4
20839: IN
20840: OR
20841: PUSH
20842: LD_INT 45
20844: PUSH
20845: LD_VAR 0 4
20849: IN
20850: OR
20851: AND
20852: IFFALSE 21106
// begin hex := GetHexInfo ( x , y ) ;
20854: LD_ADDR_VAR 0 3
20858: PUSH
20859: LD_VAR 0 9
20863: PPUSH
20864: LD_VAR 0 10
20868: PPUSH
20869: CALL_OW 546
20873: ST_TO_ADDR
// if hex [ 1 ] then
20874: LD_VAR 0 3
20878: PUSH
20879: LD_INT 1
20881: ARRAY
20882: IFFALSE 20886
// exit ;
20884: GO 21391
// height := hex [ 2 ] ;
20886: LD_ADDR_VAR 0 14
20890: PUSH
20891: LD_VAR 0 3
20895: PUSH
20896: LD_INT 2
20898: ARRAY
20899: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20900: LD_ADDR_VAR 0 13
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: LD_INT 3
20913: PUSH
20914: LD_INT 5
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: ST_TO_ADDR
// for i in tmp do
20923: LD_ADDR_VAR 0 7
20927: PUSH
20928: LD_VAR 0 13
20932: PUSH
20933: FOR_IN
20934: IFFALSE 21104
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20936: LD_ADDR_VAR 0 8
20940: PUSH
20941: LD_VAR 0 9
20945: PPUSH
20946: LD_VAR 0 7
20950: PPUSH
20951: LD_INT 5
20953: PPUSH
20954: CALL_OW 272
20958: PUSH
20959: LD_VAR 0 10
20963: PPUSH
20964: LD_VAR 0 7
20968: PPUSH
20969: LD_INT 5
20971: PPUSH
20972: CALL_OW 273
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20981: LD_VAR 0 8
20985: PUSH
20986: LD_INT 1
20988: ARRAY
20989: PPUSH
20990: LD_VAR 0 8
20994: PUSH
20995: LD_INT 2
20997: ARRAY
20998: PPUSH
20999: CALL_OW 488
21003: IFFALSE 21102
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21005: LD_ADDR_VAR 0 3
21009: PUSH
21010: LD_VAR 0 8
21014: PUSH
21015: LD_INT 1
21017: ARRAY
21018: PPUSH
21019: LD_VAR 0 8
21023: PUSH
21024: LD_INT 2
21026: ARRAY
21027: PPUSH
21028: CALL_OW 546
21032: ST_TO_ADDR
// if hex [ 1 ] then
21033: LD_VAR 0 3
21037: PUSH
21038: LD_INT 1
21040: ARRAY
21041: IFFALSE 21045
// continue ;
21043: GO 20933
// h := hex [ 2 ] ;
21045: LD_ADDR_VAR 0 12
21049: PUSH
21050: LD_VAR 0 3
21054: PUSH
21055: LD_INT 2
21057: ARRAY
21058: ST_TO_ADDR
// if h + 7 < height then
21059: LD_VAR 0 12
21063: PUSH
21064: LD_INT 7
21066: PLUS
21067: PUSH
21068: LD_VAR 0 14
21072: LESS
21073: IFFALSE 21102
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21075: LD_ADDR_VAR 0 17
21079: PUSH
21080: LD_INT 7
21082: PUSH
21083: LD_INT 28
21085: PUSH
21086: LD_INT 45
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: LIST
21093: PUSH
21094: LD_VAR 0 11
21098: ARRAY
21099: ST_TO_ADDR
// break ;
21100: GO 21104
// end ; end ; end ;
21102: GO 20933
21104: POP
21105: POP
// end ; if not weapon then
21106: LD_VAR 0 17
21110: NOT
21111: IFFALSE 21273
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21113: LD_ADDR_VAR 0 4
21117: PUSH
21118: LD_VAR 0 4
21122: PUSH
21123: LD_INT 11
21125: PUSH
21126: LD_INT 30
21128: PUSH
21129: LD_INT 49
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: LIST
21136: DIFF
21137: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
21138: LD_ADDR_VAR 0 17
21142: PUSH
21143: LD_VAR 0 4
21147: PUSH
21148: LD_INT 1
21150: PPUSH
21151: LD_VAR 0 4
21155: PPUSH
21156: CALL_OW 12
21160: ARRAY
21161: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
21162: LD_ADDR_VAR 0 13
21166: PUSH
21167: LD_INT 22
21169: PUSH
21170: LD_VAR 0 15
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 3
21181: PUSH
21182: LD_INT 35
21184: PUSH
21185: LD_INT 0
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PPUSH
21200: CALL_OW 69
21204: ST_TO_ADDR
// for i in tmp do
21205: LD_ADDR_VAR 0 7
21209: PUSH
21210: LD_VAR 0 13
21214: PUSH
21215: FOR_IN
21216: IFFALSE 21241
// list := list diff GetBWeapon ( i ) ;
21218: LD_ADDR_VAR 0 4
21222: PUSH
21223: LD_VAR 0 4
21227: PUSH
21228: LD_VAR 0 7
21232: PPUSH
21233: CALL_OW 269
21237: DIFF
21238: ST_TO_ADDR
21239: GO 21215
21241: POP
21242: POP
// if list then
21243: LD_VAR 0 4
21247: IFFALSE 21273
// weapon := list [ rand ( 1 , list ) ] ;
21249: LD_ADDR_VAR 0 17
21253: PUSH
21254: LD_VAR 0 4
21258: PUSH
21259: LD_INT 1
21261: PPUSH
21262: LD_VAR 0 4
21266: PPUSH
21267: CALL_OW 12
21271: ARRAY
21272: ST_TO_ADDR
// end ; if weapon then
21273: LD_VAR 0 17
21277: IFFALSE 21391
// begin tmp := CostOfWeapon ( weapon ) ;
21279: LD_ADDR_VAR 0 13
21283: PUSH
21284: LD_VAR 0 17
21288: PPUSH
21289: CALL_OW 451
21293: ST_TO_ADDR
// j := GetBase ( tower ) ;
21294: LD_ADDR_VAR 0 8
21298: PUSH
21299: LD_VAR 0 1
21303: PPUSH
21304: CALL_OW 274
21308: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21309: LD_VAR 0 8
21313: PPUSH
21314: LD_INT 1
21316: PPUSH
21317: CALL_OW 275
21321: PUSH
21322: LD_VAR 0 13
21326: PUSH
21327: LD_INT 1
21329: ARRAY
21330: GREATEREQUAL
21331: PUSH
21332: LD_VAR 0 8
21336: PPUSH
21337: LD_INT 2
21339: PPUSH
21340: CALL_OW 275
21344: PUSH
21345: LD_VAR 0 13
21349: PUSH
21350: LD_INT 2
21352: ARRAY
21353: GREATEREQUAL
21354: AND
21355: PUSH
21356: LD_VAR 0 8
21360: PPUSH
21361: LD_INT 3
21363: PPUSH
21364: CALL_OW 275
21368: PUSH
21369: LD_VAR 0 13
21373: PUSH
21374: LD_INT 3
21376: ARRAY
21377: GREATEREQUAL
21378: AND
21379: IFFALSE 21391
// result := weapon ;
21381: LD_ADDR_VAR 0 2
21385: PUSH
21386: LD_VAR 0 17
21390: ST_TO_ADDR
// end ; end ;
21391: LD_VAR 0 2
21395: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21396: LD_INT 0
21398: PPUSH
21399: PPUSH
// result := true ;
21400: LD_ADDR_VAR 0 3
21404: PUSH
21405: LD_INT 1
21407: ST_TO_ADDR
// if array1 = array2 then
21408: LD_VAR 0 1
21412: PUSH
21413: LD_VAR 0 2
21417: EQUAL
21418: IFFALSE 21478
// begin for i = 1 to array1 do
21420: LD_ADDR_VAR 0 4
21424: PUSH
21425: DOUBLE
21426: LD_INT 1
21428: DEC
21429: ST_TO_ADDR
21430: LD_VAR 0 1
21434: PUSH
21435: FOR_TO
21436: IFFALSE 21474
// if array1 [ i ] <> array2 [ i ] then
21438: LD_VAR 0 1
21442: PUSH
21443: LD_VAR 0 4
21447: ARRAY
21448: PUSH
21449: LD_VAR 0 2
21453: PUSH
21454: LD_VAR 0 4
21458: ARRAY
21459: NONEQUAL
21460: IFFALSE 21472
// begin result := false ;
21462: LD_ADDR_VAR 0 3
21466: PUSH
21467: LD_INT 0
21469: ST_TO_ADDR
// break ;
21470: GO 21474
// end ;
21472: GO 21435
21474: POP
21475: POP
// end else
21476: GO 21486
// result := false ;
21478: LD_ADDR_VAR 0 3
21482: PUSH
21483: LD_INT 0
21485: ST_TO_ADDR
// end ;
21486: LD_VAR 0 3
21490: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21491: LD_INT 0
21493: PPUSH
21494: PPUSH
21495: PPUSH
// pom := GetBase ( fac ) ;
21496: LD_ADDR_VAR 0 5
21500: PUSH
21501: LD_VAR 0 1
21505: PPUSH
21506: CALL_OW 274
21510: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21511: LD_ADDR_VAR 0 4
21515: PUSH
21516: LD_VAR 0 2
21520: PUSH
21521: LD_INT 1
21523: ARRAY
21524: PPUSH
21525: LD_VAR 0 2
21529: PUSH
21530: LD_INT 2
21532: ARRAY
21533: PPUSH
21534: LD_VAR 0 2
21538: PUSH
21539: LD_INT 3
21541: ARRAY
21542: PPUSH
21543: LD_VAR 0 2
21547: PUSH
21548: LD_INT 4
21550: ARRAY
21551: PPUSH
21552: CALL_OW 449
21556: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
21557: LD_VAR 0 5
21561: PPUSH
21562: LD_INT 1
21564: PPUSH
21565: CALL_OW 275
21569: PUSH
21570: LD_VAR 0 4
21574: PUSH
21575: LD_INT 1
21577: ARRAY
21578: GREATEREQUAL
21579: PUSH
21580: LD_VAR 0 5
21584: PPUSH
21585: LD_INT 2
21587: PPUSH
21588: CALL_OW 275
21592: PUSH
21593: LD_VAR 0 4
21597: PUSH
21598: LD_INT 2
21600: ARRAY
21601: GREATEREQUAL
21602: AND
21603: PUSH
21604: LD_VAR 0 5
21608: PPUSH
21609: LD_INT 3
21611: PPUSH
21612: CALL_OW 275
21616: PUSH
21617: LD_VAR 0 4
21621: PUSH
21622: LD_INT 3
21624: ARRAY
21625: GREATEREQUAL
21626: AND
21627: IFFALSE 21639
// result := true else
21629: LD_ADDR_VAR 0 3
21633: PUSH
21634: LD_INT 1
21636: ST_TO_ADDR
21637: GO 21647
// result := false ;
21639: LD_ADDR_VAR 0 3
21643: PUSH
21644: LD_INT 0
21646: ST_TO_ADDR
// end ;
21647: LD_VAR 0 3
21651: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21652: LD_INT 0
21654: PPUSH
21655: PPUSH
21656: PPUSH
21657: PPUSH
// pom := GetBase ( building ) ;
21658: LD_ADDR_VAR 0 3
21662: PUSH
21663: LD_VAR 0 1
21667: PPUSH
21668: CALL_OW 274
21672: ST_TO_ADDR
// if not pom then
21673: LD_VAR 0 3
21677: NOT
21678: IFFALSE 21682
// exit ;
21680: GO 21852
// btype := GetBType ( building ) ;
21682: LD_ADDR_VAR 0 5
21686: PUSH
21687: LD_VAR 0 1
21691: PPUSH
21692: CALL_OW 266
21696: ST_TO_ADDR
// if btype = b_armoury then
21697: LD_VAR 0 5
21701: PUSH
21702: LD_INT 4
21704: EQUAL
21705: IFFALSE 21715
// btype := b_barracks ;
21707: LD_ADDR_VAR 0 5
21711: PUSH
21712: LD_INT 5
21714: ST_TO_ADDR
// if btype = b_depot then
21715: LD_VAR 0 5
21719: PUSH
21720: LD_INT 0
21722: EQUAL
21723: IFFALSE 21733
// btype := b_warehouse ;
21725: LD_ADDR_VAR 0 5
21729: PUSH
21730: LD_INT 1
21732: ST_TO_ADDR
// if btype = b_workshop then
21733: LD_VAR 0 5
21737: PUSH
21738: LD_INT 2
21740: EQUAL
21741: IFFALSE 21751
// btype := b_factory ;
21743: LD_ADDR_VAR 0 5
21747: PUSH
21748: LD_INT 3
21750: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21751: LD_ADDR_VAR 0 4
21755: PUSH
21756: LD_VAR 0 5
21760: PPUSH
21761: LD_VAR 0 1
21765: PPUSH
21766: CALL_OW 248
21770: PPUSH
21771: CALL_OW 450
21775: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21776: LD_ADDR_VAR 0 2
21780: PUSH
21781: LD_VAR 0 3
21785: PPUSH
21786: LD_INT 1
21788: PPUSH
21789: CALL_OW 275
21793: PUSH
21794: LD_VAR 0 4
21798: PUSH
21799: LD_INT 1
21801: ARRAY
21802: GREATEREQUAL
21803: PUSH
21804: LD_VAR 0 3
21808: PPUSH
21809: LD_INT 2
21811: PPUSH
21812: CALL_OW 275
21816: PUSH
21817: LD_VAR 0 4
21821: PUSH
21822: LD_INT 2
21824: ARRAY
21825: GREATEREQUAL
21826: AND
21827: PUSH
21828: LD_VAR 0 3
21832: PPUSH
21833: LD_INT 3
21835: PPUSH
21836: CALL_OW 275
21840: PUSH
21841: LD_VAR 0 4
21845: PUSH
21846: LD_INT 3
21848: ARRAY
21849: GREATEREQUAL
21850: AND
21851: ST_TO_ADDR
// end ;
21852: LD_VAR 0 2
21856: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21857: LD_INT 0
21859: PPUSH
21860: PPUSH
21861: PPUSH
// pom := GetBase ( building ) ;
21862: LD_ADDR_VAR 0 4
21866: PUSH
21867: LD_VAR 0 1
21871: PPUSH
21872: CALL_OW 274
21876: ST_TO_ADDR
// if not pom then
21877: LD_VAR 0 4
21881: NOT
21882: IFFALSE 21886
// exit ;
21884: GO 21987
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21886: LD_ADDR_VAR 0 5
21890: PUSH
21891: LD_VAR 0 2
21895: PPUSH
21896: LD_VAR 0 1
21900: PPUSH
21901: CALL_OW 248
21905: PPUSH
21906: CALL_OW 450
21910: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21911: LD_ADDR_VAR 0 3
21915: PUSH
21916: LD_VAR 0 4
21920: PPUSH
21921: LD_INT 1
21923: PPUSH
21924: CALL_OW 275
21928: PUSH
21929: LD_VAR 0 5
21933: PUSH
21934: LD_INT 1
21936: ARRAY
21937: GREATEREQUAL
21938: PUSH
21939: LD_VAR 0 4
21943: PPUSH
21944: LD_INT 2
21946: PPUSH
21947: CALL_OW 275
21951: PUSH
21952: LD_VAR 0 5
21956: PUSH
21957: LD_INT 2
21959: ARRAY
21960: GREATEREQUAL
21961: AND
21962: PUSH
21963: LD_VAR 0 4
21967: PPUSH
21968: LD_INT 3
21970: PPUSH
21971: CALL_OW 275
21975: PUSH
21976: LD_VAR 0 5
21980: PUSH
21981: LD_INT 3
21983: ARRAY
21984: GREATEREQUAL
21985: AND
21986: ST_TO_ADDR
// end ;
21987: LD_VAR 0 3
21991: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes ; begin
21992: LD_INT 0
21994: PPUSH
21995: PPUSH
21996: PPUSH
21997: PPUSH
21998: PPUSH
21999: PPUSH
22000: PPUSH
// if not base or not btype or not x or not y then
22001: LD_VAR 0 1
22005: NOT
22006: PUSH
22007: LD_VAR 0 2
22011: NOT
22012: OR
22013: PUSH
22014: LD_VAR 0 3
22018: NOT
22019: OR
22020: PUSH
22021: LD_VAR 0 4
22025: NOT
22026: OR
22027: IFFALSE 22031
// exit ;
22029: GO 22303
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
22031: LD_ADDR_VAR 0 12
22035: PUSH
22036: LD_VAR 0 2
22040: PPUSH
22041: LD_VAR 0 3
22045: PPUSH
22046: LD_VAR 0 4
22050: PPUSH
22051: LD_VAR 0 5
22055: PPUSH
22056: LD_VAR 0 1
22060: PUSH
22061: LD_INT 1
22063: ARRAY
22064: PPUSH
22065: CALL_OW 248
22069: PPUSH
22070: LD_INT 0
22072: PPUSH
22073: CALL 23086 0 6
22077: ST_TO_ADDR
// if not hexes then
22078: LD_VAR 0 12
22082: NOT
22083: IFFALSE 22087
// exit ;
22085: GO 22303
// for i = 1 to hexes do
22087: LD_ADDR_VAR 0 7
22091: PUSH
22092: DOUBLE
22093: LD_INT 1
22095: DEC
22096: ST_TO_ADDR
22097: LD_VAR 0 12
22101: PUSH
22102: FOR_TO
22103: IFFALSE 22301
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22105: LD_ADDR_VAR 0 11
22109: PUSH
22110: LD_VAR 0 12
22114: PUSH
22115: LD_VAR 0 7
22119: ARRAY
22120: PUSH
22121: LD_INT 1
22123: ARRAY
22124: PPUSH
22125: LD_VAR 0 12
22129: PUSH
22130: LD_VAR 0 7
22134: ARRAY
22135: PUSH
22136: LD_INT 2
22138: ARRAY
22139: PPUSH
22140: CALL_OW 428
22144: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
22145: LD_VAR 0 11
22149: NOT
22150: PUSH
22151: LD_VAR 0 11
22155: PPUSH
22156: CALL_OW 247
22160: PUSH
22161: LD_INT 3
22163: EQUAL
22164: OR
22165: IFFALSE 22169
// continue ;
22167: GO 22102
// for j = 0 to 5 do
22169: LD_ADDR_VAR 0 8
22173: PUSH
22174: DOUBLE
22175: LD_INT 0
22177: DEC
22178: ST_TO_ADDR
22179: LD_INT 5
22181: PUSH
22182: FOR_TO
22183: IFFALSE 22297
// begin _x := ShiftX ( GetX ( tmp ) , j , 3 ) ;
22185: LD_ADDR_VAR 0 9
22189: PUSH
22190: LD_VAR 0 11
22194: PPUSH
22195: CALL_OW 250
22199: PPUSH
22200: LD_VAR 0 8
22204: PPUSH
22205: LD_INT 3
22207: PPUSH
22208: CALL_OW 272
22212: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 3 ) ;
22213: LD_ADDR_VAR 0 10
22217: PUSH
22218: LD_VAR 0 11
22222: PPUSH
22223: CALL_OW 251
22227: PPUSH
22228: LD_VAR 0 8
22232: PPUSH
22233: LD_INT 3
22235: PPUSH
22236: CALL_OW 273
22240: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22241: LD_VAR 0 9
22245: PPUSH
22246: LD_VAR 0 10
22250: PPUSH
22251: CALL_OW 488
22255: PUSH
22256: LD_VAR 0 9
22260: PPUSH
22261: LD_VAR 0 10
22265: PPUSH
22266: CALL_OW 428
22270: NOT
22271: AND
22272: IFFALSE 22295
// begin ComMoveXY ( tmp , _x , _y ) ;
22274: LD_VAR 0 11
22278: PPUSH
22279: LD_VAR 0 9
22283: PPUSH
22284: LD_VAR 0 10
22288: PPUSH
22289: CALL_OW 111
// break ;
22293: GO 22297
// end ; end ;
22295: GO 22182
22297: POP
22298: POP
// end ;
22299: GO 22102
22301: POP
22302: POP
// end ;
22303: LD_VAR 0 6
22307: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
22308: LD_INT 0
22310: PPUSH
22311: PPUSH
22312: PPUSH
22313: PPUSH
22314: PPUSH
22315: PPUSH
22316: PPUSH
22317: PPUSH
22318: PPUSH
// result := false ;
22319: LD_ADDR_VAR 0 6
22323: PUSH
22324: LD_INT 0
22326: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22327: LD_VAR 0 1
22331: NOT
22332: PUSH
22333: LD_VAR 0 1
22337: PPUSH
22338: CALL_OW 266
22342: PUSH
22343: LD_INT 0
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: IN
22353: NOT
22354: OR
22355: PUSH
22356: LD_VAR 0 2
22360: NOT
22361: OR
22362: PUSH
22363: LD_VAR 0 5
22367: PUSH
22368: LD_INT 0
22370: PUSH
22371: LD_INT 1
22373: PUSH
22374: LD_INT 2
22376: PUSH
22377: LD_INT 3
22379: PUSH
22380: LD_INT 4
22382: PUSH
22383: LD_INT 5
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: IN
22394: NOT
22395: OR
22396: PUSH
22397: LD_VAR 0 3
22401: PPUSH
22402: LD_VAR 0 4
22406: PPUSH
22407: CALL_OW 488
22411: NOT
22412: OR
22413: IFFALSE 22417
// exit ;
22415: GO 23081
// pom := GetBase ( bdepot ) ;
22417: LD_ADDR_VAR 0 9
22421: PUSH
22422: LD_VAR 0 1
22426: PPUSH
22427: CALL_OW 274
22431: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
22432: LD_ADDR_VAR 0 10
22436: PUSH
22437: LD_VAR 0 2
22441: PPUSH
22442: LD_VAR 0 1
22446: PPUSH
22447: CALL_OW 248
22451: PPUSH
22452: CALL_OW 450
22456: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22457: LD_VAR 0 9
22461: PPUSH
22462: LD_INT 1
22464: PPUSH
22465: CALL_OW 275
22469: PUSH
22470: LD_VAR 0 10
22474: PUSH
22475: LD_INT 1
22477: ARRAY
22478: GREATEREQUAL
22479: PUSH
22480: LD_VAR 0 9
22484: PPUSH
22485: LD_INT 2
22487: PPUSH
22488: CALL_OW 275
22492: PUSH
22493: LD_VAR 0 10
22497: PUSH
22498: LD_INT 2
22500: ARRAY
22501: GREATEREQUAL
22502: AND
22503: PUSH
22504: LD_VAR 0 9
22508: PPUSH
22509: LD_INT 3
22511: PPUSH
22512: CALL_OW 275
22516: PUSH
22517: LD_VAR 0 10
22521: PUSH
22522: LD_INT 3
22524: ARRAY
22525: GREATEREQUAL
22526: AND
22527: NOT
22528: IFFALSE 22532
// exit ;
22530: GO 23081
// if GetBType ( bdepot ) = b_depot then
22532: LD_VAR 0 1
22536: PPUSH
22537: CALL_OW 266
22541: PUSH
22542: LD_INT 0
22544: EQUAL
22545: IFFALSE 22557
// dist := 28 else
22547: LD_ADDR_VAR 0 13
22551: PUSH
22552: LD_INT 28
22554: ST_TO_ADDR
22555: GO 22565
// dist := 36 ;
22557: LD_ADDR_VAR 0 13
22561: PUSH
22562: LD_INT 36
22564: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
22565: LD_VAR 0 1
22569: PPUSH
22570: LD_VAR 0 3
22574: PPUSH
22575: LD_VAR 0 4
22579: PPUSH
22580: CALL_OW 297
22584: PUSH
22585: LD_VAR 0 13
22589: GREATER
22590: IFFALSE 22594
// exit ;
22592: GO 23081
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
22594: LD_ADDR_VAR 0 11
22598: PUSH
22599: LD_VAR 0 2
22603: PPUSH
22604: LD_VAR 0 3
22608: PPUSH
22609: LD_VAR 0 4
22613: PPUSH
22614: LD_VAR 0 5
22618: PPUSH
22619: LD_VAR 0 1
22623: PPUSH
22624: CALL_OW 248
22628: PPUSH
22629: LD_INT 0
22631: PPUSH
22632: CALL 23086 0 6
22636: ST_TO_ADDR
// if not hexes then
22637: LD_VAR 0 11
22641: NOT
22642: IFFALSE 22646
// exit ;
22644: GO 23081
// hex := GetHexInfo ( x , y ) ;
22646: LD_ADDR_VAR 0 14
22650: PUSH
22651: LD_VAR 0 3
22655: PPUSH
22656: LD_VAR 0 4
22660: PPUSH
22661: CALL_OW 546
22665: ST_TO_ADDR
// if hex [ 1 ] then
22666: LD_VAR 0 14
22670: PUSH
22671: LD_INT 1
22673: ARRAY
22674: IFFALSE 22678
// exit ;
22676: GO 23081
// height := hex [ 2 ] ;
22678: LD_ADDR_VAR 0 12
22682: PUSH
22683: LD_VAR 0 14
22687: PUSH
22688: LD_INT 2
22690: ARRAY
22691: ST_TO_ADDR
// for i = 1 to hexes do
22692: LD_ADDR_VAR 0 7
22696: PUSH
22697: DOUBLE
22698: LD_INT 1
22700: DEC
22701: ST_TO_ADDR
22702: LD_VAR 0 11
22706: PUSH
22707: FOR_TO
22708: IFFALSE 23036
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22710: LD_VAR 0 11
22714: PUSH
22715: LD_VAR 0 7
22719: ARRAY
22720: PUSH
22721: LD_INT 1
22723: ARRAY
22724: PPUSH
22725: LD_VAR 0 11
22729: PUSH
22730: LD_VAR 0 7
22734: ARRAY
22735: PUSH
22736: LD_INT 2
22738: ARRAY
22739: PPUSH
22740: CALL_OW 488
22744: NOT
22745: IFFALSE 22749
// continue ;
22747: GO 22707
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22749: LD_ADDR_VAR 0 8
22753: PUSH
22754: LD_VAR 0 11
22758: PUSH
22759: LD_VAR 0 7
22763: ARRAY
22764: PUSH
22765: LD_INT 1
22767: ARRAY
22768: PPUSH
22769: LD_VAR 0 11
22773: PUSH
22774: LD_VAR 0 7
22778: ARRAY
22779: PUSH
22780: LD_INT 2
22782: ARRAY
22783: PPUSH
22784: CALL_OW 546
22788: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22789: LD_VAR 0 8
22793: PUSH
22794: LD_INT 1
22796: ARRAY
22797: PUSH
22798: LD_VAR 0 8
22802: PUSH
22803: LD_INT 2
22805: ARRAY
22806: PUSH
22807: LD_VAR 0 12
22811: PUSH
22812: LD_INT 2
22814: PLUS
22815: GREATER
22816: OR
22817: PUSH
22818: LD_VAR 0 8
22822: PUSH
22823: LD_INT 2
22825: ARRAY
22826: PUSH
22827: LD_VAR 0 12
22831: PUSH
22832: LD_INT 2
22834: MINUS
22835: LESS
22836: OR
22837: PUSH
22838: LD_VAR 0 8
22842: PUSH
22843: LD_INT 3
22845: ARRAY
22846: PUSH
22847: LD_INT 0
22849: PUSH
22850: LD_INT 8
22852: PUSH
22853: LD_INT 9
22855: PUSH
22856: LD_INT 10
22858: PUSH
22859: LD_INT 11
22861: PUSH
22862: LD_INT 12
22864: PUSH
22865: LD_INT 13
22867: PUSH
22868: LD_INT 16
22870: PUSH
22871: LD_INT 17
22873: PUSH
22874: LD_INT 18
22876: PUSH
22877: LD_INT 19
22879: PUSH
22880: LD_INT 20
22882: PUSH
22883: LD_INT 21
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: IN
22901: NOT
22902: OR
22903: PUSH
22904: LD_VAR 0 8
22908: PUSH
22909: LD_INT 5
22911: ARRAY
22912: NOT
22913: OR
22914: PUSH
22915: LD_VAR 0 8
22919: PUSH
22920: LD_INT 6
22922: ARRAY
22923: PUSH
22924: LD_INT 1
22926: PUSH
22927: LD_INT 2
22929: PUSH
22930: LD_INT 7
22932: PUSH
22933: LD_INT 9
22935: PUSH
22936: LD_INT 10
22938: PUSH
22939: LD_INT 11
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: IN
22950: NOT
22951: OR
22952: PUSH
22953: LD_VAR 0 11
22957: PUSH
22958: LD_VAR 0 7
22962: ARRAY
22963: PUSH
22964: LD_INT 1
22966: ARRAY
22967: PPUSH
22968: LD_VAR 0 11
22972: PUSH
22973: LD_VAR 0 7
22977: ARRAY
22978: PUSH
22979: LD_INT 2
22981: ARRAY
22982: PPUSH
22983: CALL_OW 428
22987: PUSH
22988: LD_INT 0
22990: GREATER
22991: OR
22992: PUSH
22993: LD_VAR 0 11
22997: PUSH
22998: LD_VAR 0 7
23002: ARRAY
23003: PUSH
23004: LD_INT 1
23006: ARRAY
23007: PPUSH
23008: LD_VAR 0 11
23012: PUSH
23013: LD_VAR 0 7
23017: ARRAY
23018: PUSH
23019: LD_INT 2
23021: ARRAY
23022: PPUSH
23023: CALL_OW 351
23027: OR
23028: IFFALSE 23034
// exit ;
23030: POP
23031: POP
23032: GO 23081
// end ;
23034: GO 22707
23036: POP
23037: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
23038: LD_VAR 0 1
23042: PPUSH
23043: CALL_OW 255
23047: PPUSH
23048: LD_VAR 0 3
23052: PPUSH
23053: LD_VAR 0 4
23057: PPUSH
23058: LD_INT 20
23060: PPUSH
23061: CALL 16292 0 4
23065: PUSH
23066: LD_INT 4
23068: ARRAY
23069: IFFALSE 23073
// exit ;
23071: GO 23081
// result := true ;
23073: LD_ADDR_VAR 0 6
23077: PUSH
23078: LD_INT 1
23080: ST_TO_ADDR
// end ;
23081: LD_VAR 0 6
23085: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
23086: LD_INT 0
23088: PPUSH
23089: PPUSH
23090: PPUSH
23091: PPUSH
23092: PPUSH
23093: PPUSH
23094: PPUSH
23095: PPUSH
23096: PPUSH
23097: PPUSH
23098: PPUSH
23099: PPUSH
23100: PPUSH
23101: PPUSH
23102: PPUSH
23103: PPUSH
23104: PPUSH
23105: PPUSH
23106: PPUSH
23107: PPUSH
23108: PPUSH
23109: PPUSH
23110: PPUSH
23111: PPUSH
23112: PPUSH
23113: PPUSH
23114: PPUSH
23115: PPUSH
23116: PPUSH
23117: PPUSH
23118: PPUSH
23119: PPUSH
23120: PPUSH
23121: PPUSH
23122: PPUSH
23123: PPUSH
23124: PPUSH
23125: PPUSH
23126: PPUSH
23127: PPUSH
23128: PPUSH
23129: PPUSH
23130: PPUSH
23131: PPUSH
23132: PPUSH
23133: PPUSH
23134: PPUSH
23135: PPUSH
23136: PPUSH
23137: PPUSH
23138: PPUSH
23139: PPUSH
23140: PPUSH
23141: PPUSH
23142: PPUSH
23143: PPUSH
23144: PPUSH
23145: PPUSH
// result = [ ] ;
23146: LD_ADDR_VAR 0 7
23150: PUSH
23151: EMPTY
23152: ST_TO_ADDR
// temp_list = [ ] ;
23153: LD_ADDR_VAR 0 9
23157: PUSH
23158: EMPTY
23159: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23160: LD_VAR 0 4
23164: PUSH
23165: LD_INT 0
23167: PUSH
23168: LD_INT 1
23170: PUSH
23171: LD_INT 2
23173: PUSH
23174: LD_INT 3
23176: PUSH
23177: LD_INT 4
23179: PUSH
23180: LD_INT 5
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: IN
23191: NOT
23192: PUSH
23193: LD_VAR 0 1
23197: PUSH
23198: LD_INT 0
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: IN
23208: PUSH
23209: LD_VAR 0 5
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: LD_INT 2
23219: PUSH
23220: LD_INT 3
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: LIST
23227: IN
23228: NOT
23229: AND
23230: OR
23231: IFFALSE 23235
// exit ;
23233: GO 41620
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23235: LD_VAR 0 1
23239: PUSH
23240: LD_INT 6
23242: PUSH
23243: LD_INT 7
23245: PUSH
23246: LD_INT 8
23248: PUSH
23249: LD_INT 13
23251: PUSH
23252: LD_INT 12
23254: PUSH
23255: LD_INT 15
23257: PUSH
23258: LD_INT 11
23260: PUSH
23261: LD_INT 14
23263: PUSH
23264: LD_INT 10
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: IN
23278: IFFALSE 23288
// btype = b_lab ;
23280: LD_ADDR_VAR 0 1
23284: PUSH
23285: LD_INT 6
23287: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23288: LD_VAR 0 6
23292: PUSH
23293: LD_INT 0
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: LD_INT 2
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: LIST
23306: IN
23307: NOT
23308: PUSH
23309: LD_VAR 0 1
23313: PUSH
23314: LD_INT 0
23316: PUSH
23317: LD_INT 1
23319: PUSH
23320: LD_INT 2
23322: PUSH
23323: LD_INT 3
23325: PUSH
23326: LD_INT 6
23328: PUSH
23329: LD_INT 36
23331: PUSH
23332: LD_INT 4
23334: PUSH
23335: LD_INT 5
23337: PUSH
23338: LD_INT 31
23340: PUSH
23341: LD_INT 32
23343: PUSH
23344: LD_INT 33
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: IN
23360: NOT
23361: PUSH
23362: LD_VAR 0 6
23366: PUSH
23367: LD_INT 1
23369: EQUAL
23370: AND
23371: OR
23372: PUSH
23373: LD_VAR 0 1
23377: PUSH
23378: LD_INT 2
23380: PUSH
23381: LD_INT 3
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: IN
23388: NOT
23389: PUSH
23390: LD_VAR 0 6
23394: PUSH
23395: LD_INT 2
23397: EQUAL
23398: AND
23399: OR
23400: IFFALSE 23410
// mode = 0 ;
23402: LD_ADDR_VAR 0 6
23406: PUSH
23407: LD_INT 0
23409: ST_TO_ADDR
// case mode of 0 :
23410: LD_VAR 0 6
23414: PUSH
23415: LD_INT 0
23417: DOUBLE
23418: EQUAL
23419: IFTRUE 23423
23421: GO 34876
23423: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23424: LD_ADDR_VAR 0 11
23428: PUSH
23429: LD_INT 0
23431: PUSH
23432: LD_INT 0
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 0
23441: PUSH
23442: LD_INT 1
23444: NEG
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 1
23452: PUSH
23453: LD_INT 0
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 1
23462: PUSH
23463: LD_INT 1
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 0
23472: PUSH
23473: LD_INT 1
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 1
23482: NEG
23483: PUSH
23484: LD_INT 0
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 1
23493: NEG
23494: PUSH
23495: LD_INT 1
23497: NEG
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 1
23505: NEG
23506: PUSH
23507: LD_INT 2
23509: NEG
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 0
23517: PUSH
23518: LD_INT 2
23520: NEG
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 1
23528: PUSH
23529: LD_INT 1
23531: NEG
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 1
23539: PUSH
23540: LD_INT 2
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 0
23549: PUSH
23550: LD_INT 2
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 1
23559: NEG
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 1
23570: PUSH
23571: LD_INT 3
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 0
23580: PUSH
23581: LD_INT 3
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 1
23590: NEG
23591: PUSH
23592: LD_INT 2
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23617: LD_ADDR_VAR 0 12
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: LD_INT 0
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 0
23634: PUSH
23635: LD_INT 1
23637: NEG
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: LD_INT 0
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 1
23655: PUSH
23656: LD_INT 1
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: LD_INT 1
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 1
23675: NEG
23676: PUSH
23677: LD_INT 0
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 1
23686: NEG
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 1
23698: PUSH
23699: LD_INT 1
23701: NEG
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 2
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 2
23719: PUSH
23720: LD_INT 1
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 1
23729: NEG
23730: PUSH
23731: LD_INT 1
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 2
23740: NEG
23741: PUSH
23742: LD_INT 0
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 2
23751: NEG
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 2
23763: NEG
23764: PUSH
23765: LD_INT 1
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 3
23774: NEG
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 3
23785: NEG
23786: PUSH
23787: LD_INT 1
23789: NEG
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23813: LD_ADDR_VAR 0 13
23817: PUSH
23818: LD_INT 0
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: LD_INT 1
23833: NEG
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 1
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 1
23851: PUSH
23852: LD_INT 1
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 0
23861: PUSH
23862: LD_INT 1
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 1
23871: NEG
23872: PUSH
23873: LD_INT 0
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 1
23882: NEG
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 1
23894: NEG
23895: PUSH
23896: LD_INT 2
23898: NEG
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 2
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 2
23916: PUSH
23917: LD_INT 2
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: LD_INT 2
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 2
23936: NEG
23937: PUSH
23938: LD_INT 1
23940: NEG
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 2
23948: NEG
23949: PUSH
23950: LD_INT 2
23952: NEG
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 2
23960: NEG
23961: PUSH
23962: LD_INT 3
23964: NEG
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 3
23972: NEG
23973: PUSH
23974: LD_INT 2
23976: NEG
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 3
23984: NEG
23985: PUSH
23986: LD_INT 3
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24012: LD_ADDR_VAR 0 14
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: LD_INT 0
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: LD_INT 1
24032: NEG
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: LD_INT 0
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: LD_INT 1
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 0
24060: PUSH
24061: LD_INT 1
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: NEG
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 1
24081: NEG
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 1
24093: NEG
24094: PUSH
24095: LD_INT 2
24097: NEG
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: LD_INT 2
24108: NEG
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 1
24116: PUSH
24117: LD_INT 1
24119: NEG
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 1
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: LD_INT 2
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 1
24147: NEG
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 1
24158: NEG
24159: PUSH
24160: LD_INT 3
24162: NEG
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: LD_INT 3
24173: NEG
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: LD_INT 2
24184: NEG
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24208: LD_ADDR_VAR 0 15
24212: PUSH
24213: LD_INT 0
24215: PUSH
24216: LD_INT 0
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 0
24225: PUSH
24226: LD_INT 1
24228: NEG
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 1
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: LD_INT 1
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 0
24256: PUSH
24257: LD_INT 1
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 1
24266: NEG
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 1
24277: NEG
24278: PUSH
24279: LD_INT 1
24281: NEG
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 1
24289: PUSH
24290: LD_INT 1
24292: NEG
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 2
24300: PUSH
24301: LD_INT 0
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 2
24310: PUSH
24311: LD_INT 1
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 1
24320: NEG
24321: PUSH
24322: LD_INT 1
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 2
24331: NEG
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 2
24342: NEG
24343: PUSH
24344: LD_INT 1
24346: NEG
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 2
24354: PUSH
24355: LD_INT 1
24357: NEG
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 3
24365: PUSH
24366: LD_INT 0
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 3
24375: PUSH
24376: LD_INT 1
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24401: LD_ADDR_VAR 0 16
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: LD_INT 1
24421: NEG
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: LD_INT 0
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 1
24439: PUSH
24440: LD_INT 1
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 0
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 1
24459: NEG
24460: PUSH
24461: LD_INT 0
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 1
24470: NEG
24471: PUSH
24472: LD_INT 1
24474: NEG
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: NEG
24483: PUSH
24484: LD_INT 2
24486: NEG
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 2
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 2
24504: PUSH
24505: LD_INT 2
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: PUSH
24515: LD_INT 2
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 2
24524: NEG
24525: PUSH
24526: LD_INT 1
24528: NEG
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 2
24536: NEG
24537: PUSH
24538: LD_INT 2
24540: NEG
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 3
24548: PUSH
24549: LD_INT 2
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 3
24558: PUSH
24559: LD_INT 3
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 2
24568: PUSH
24569: LD_INT 3
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24594: LD_ADDR_VAR 0 17
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 0
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 0
24611: PUSH
24612: LD_INT 1
24614: NEG
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 1
24622: PUSH
24623: LD_INT 0
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 1
24632: PUSH
24633: LD_INT 1
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 0
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 1
24652: NEG
24653: PUSH
24654: LD_INT 0
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 1
24663: NEG
24664: PUSH
24665: LD_INT 1
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: LD_INT 2
24679: NEG
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 0
24687: PUSH
24688: LD_INT 2
24690: NEG
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: LD_INT 1
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 2
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 2
24719: PUSH
24720: LD_INT 1
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 2
24729: PUSH
24730: LD_INT 2
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 1
24739: PUSH
24740: LD_INT 2
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 0
24749: PUSH
24750: LD_INT 2
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 1
24759: NEG
24760: PUSH
24761: LD_INT 1
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 2
24770: NEG
24771: PUSH
24772: LD_INT 0
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 2
24781: NEG
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 2
24793: NEG
24794: PUSH
24795: LD_INT 2
24797: NEG
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24824: LD_ADDR_VAR 0 18
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 0
24841: PUSH
24842: LD_INT 1
24844: NEG
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 0
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 1
24882: NEG
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 1
24893: NEG
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 1
24905: NEG
24906: PUSH
24907: LD_INT 2
24909: NEG
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: LD_INT 2
24920: NEG
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 1
24928: PUSH
24929: LD_INT 1
24931: NEG
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 2
24939: PUSH
24940: LD_INT 0
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 2
24949: PUSH
24950: LD_INT 1
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 2
24959: PUSH
24960: LD_INT 2
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 0
24979: PUSH
24980: LD_INT 2
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 1
24989: NEG
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 2
25000: NEG
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 2
25011: NEG
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 2
25023: NEG
25024: PUSH
25025: LD_INT 2
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25054: LD_ADDR_VAR 0 19
25058: PUSH
25059: LD_INT 0
25061: PUSH
25062: LD_INT 0
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: LD_INT 1
25074: NEG
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: PUSH
25093: LD_INT 1
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 1
25112: NEG
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 1
25123: NEG
25124: PUSH
25125: LD_INT 1
25127: NEG
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: NEG
25136: PUSH
25137: LD_INT 2
25139: NEG
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 0
25147: PUSH
25148: LD_INT 2
25150: NEG
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: LD_INT 1
25161: NEG
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 2
25169: PUSH
25170: LD_INT 0
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 2
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 2
25189: PUSH
25190: LD_INT 2
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: LD_INT 2
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 0
25209: PUSH
25210: LD_INT 2
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 1
25219: NEG
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 2
25230: NEG
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 2
25241: NEG
25242: PUSH
25243: LD_INT 1
25245: NEG
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 2
25253: NEG
25254: PUSH
25255: LD_INT 2
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25284: LD_ADDR_VAR 0 20
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: LD_INT 0
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 0
25301: PUSH
25302: LD_INT 1
25304: NEG
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 1
25322: PUSH
25323: LD_INT 1
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 0
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 1
25342: NEG
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 1
25353: NEG
25354: PUSH
25355: LD_INT 1
25357: NEG
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: PUSH
25367: LD_INT 2
25369: NEG
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: LD_INT 2
25380: NEG
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 1
25388: PUSH
25389: LD_INT 1
25391: NEG
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 2
25399: PUSH
25400: LD_INT 0
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 2
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 2
25419: PUSH
25420: LD_INT 2
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: LD_INT 2
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 0
25439: PUSH
25440: LD_INT 2
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 1
25449: NEG
25450: PUSH
25451: LD_INT 1
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 2
25460: NEG
25461: PUSH
25462: LD_INT 0
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 2
25471: NEG
25472: PUSH
25473: LD_INT 1
25475: NEG
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 2
25483: NEG
25484: PUSH
25485: LD_INT 2
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25514: LD_ADDR_VAR 0 21
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: LD_INT 0
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 0
25531: PUSH
25532: LD_INT 1
25534: NEG
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 1
25552: PUSH
25553: LD_INT 1
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 0
25562: PUSH
25563: LD_INT 1
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 1
25572: NEG
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PUSH
25585: LD_INT 1
25587: NEG
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: LD_INT 2
25599: NEG
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 0
25607: PUSH
25608: LD_INT 2
25610: NEG
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: LD_INT 1
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 2
25629: PUSH
25630: LD_INT 0
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 2
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 2
25649: PUSH
25650: LD_INT 2
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 1
25659: PUSH
25660: LD_INT 2
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 0
25669: PUSH
25670: LD_INT 2
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 1
25679: NEG
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 2
25690: NEG
25691: PUSH
25692: LD_INT 0
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 2
25701: NEG
25702: PUSH
25703: LD_INT 1
25705: NEG
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 2
25713: NEG
25714: PUSH
25715: LD_INT 2
25717: NEG
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25744: LD_ADDR_VAR 0 22
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: LD_INT 1
25764: NEG
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: LD_INT 1
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 1
25802: NEG
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 1
25813: NEG
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: LD_INT 2
25829: NEG
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 0
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 1
25848: PUSH
25849: LD_INT 1
25851: NEG
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 2
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 2
25869: PUSH
25870: LD_INT 1
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 2
25879: PUSH
25880: LD_INT 2
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 1
25889: PUSH
25890: LD_INT 2
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 0
25899: PUSH
25900: LD_INT 2
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 1
25909: NEG
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 2
25920: NEG
25921: PUSH
25922: LD_INT 0
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 2
25931: NEG
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 2
25943: NEG
25944: PUSH
25945: LD_INT 2
25947: NEG
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
25974: LD_ADDR_VAR 0 23
25978: PUSH
25979: LD_INT 0
25981: PUSH
25982: LD_INT 0
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: LD_INT 1
25994: NEG
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 1
26002: PUSH
26003: LD_INT 0
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: LD_INT 1
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: LD_INT 1
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 1
26032: NEG
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 1
26043: NEG
26044: PUSH
26045: LD_INT 1
26047: NEG
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 1
26055: NEG
26056: PUSH
26057: LD_INT 2
26059: NEG
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: LD_INT 2
26070: NEG
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 2
26089: PUSH
26090: LD_INT 0
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 2
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 2
26109: PUSH
26110: LD_INT 2
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: LD_INT 2
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 0
26129: PUSH
26130: LD_INT 2
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 1
26139: NEG
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 2
26150: NEG
26151: PUSH
26152: LD_INT 0
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 2
26161: NEG
26162: PUSH
26163: LD_INT 1
26165: NEG
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 2
26173: NEG
26174: PUSH
26175: LD_INT 2
26177: NEG
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 2
26185: NEG
26186: PUSH
26187: LD_INT 3
26189: NEG
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: LD_INT 3
26201: NEG
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 1
26209: PUSH
26210: LD_INT 2
26212: NEG
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 2
26220: PUSH
26221: LD_INT 1
26223: NEG
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26254: LD_ADDR_VAR 0 24
26258: PUSH
26259: LD_INT 0
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: LD_INT 1
26274: NEG
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 1
26282: PUSH
26283: LD_INT 0
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 1
26292: PUSH
26293: LD_INT 1
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 1
26312: NEG
26313: PUSH
26314: LD_INT 0
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 1
26335: NEG
26336: PUSH
26337: LD_INT 2
26339: NEG
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 0
26347: PUSH
26348: LD_INT 2
26350: NEG
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 1
26358: PUSH
26359: LD_INT 1
26361: NEG
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 2
26369: PUSH
26370: LD_INT 0
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 2
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 2
26389: PUSH
26390: LD_INT 2
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: LD_INT 2
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 0
26409: PUSH
26410: LD_INT 2
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: NEG
26420: PUSH
26421: LD_INT 1
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 2
26430: NEG
26431: PUSH
26432: LD_INT 0
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 2
26441: NEG
26442: PUSH
26443: LD_INT 1
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 2
26453: NEG
26454: PUSH
26455: LD_INT 2
26457: NEG
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: LD_INT 2
26468: NEG
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 2
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 3
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 3
26497: PUSH
26498: LD_INT 2
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26530: LD_ADDR_VAR 0 25
26534: PUSH
26535: LD_INT 0
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: LD_INT 1
26550: NEG
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 1
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: LD_INT 1
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 1
26599: NEG
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 1
26611: NEG
26612: PUSH
26613: LD_INT 2
26615: NEG
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 0
26623: PUSH
26624: LD_INT 2
26626: NEG
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 2
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 2
26655: PUSH
26656: LD_INT 1
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 2
26665: PUSH
26666: LD_INT 2
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 1
26675: PUSH
26676: LD_INT 2
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 0
26685: PUSH
26686: LD_INT 2
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 2
26706: NEG
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 2
26717: NEG
26718: PUSH
26719: LD_INT 1
26721: NEG
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 2
26729: NEG
26730: PUSH
26731: LD_INT 2
26733: NEG
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 3
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 3
26751: PUSH
26752: LD_INT 2
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 2
26761: PUSH
26762: LD_INT 3
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 1
26771: PUSH
26772: LD_INT 3
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26804: LD_ADDR_VAR 0 26
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: LD_INT 1
26824: NEG
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 1
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 1
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: LD_INT 1
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 1
26862: NEG
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: LD_INT 1
26877: NEG
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: NEG
26886: PUSH
26887: LD_INT 2
26889: NEG
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: LD_INT 2
26900: NEG
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 1
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 2
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 2
26929: PUSH
26930: LD_INT 1
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 2
26939: PUSH
26940: LD_INT 2
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 1
26949: PUSH
26950: LD_INT 2
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 0
26959: PUSH
26960: LD_INT 2
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 1
26969: NEG
26970: PUSH
26971: LD_INT 1
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 2
26980: NEG
26981: PUSH
26982: LD_INT 0
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 2
26991: NEG
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 2
27003: NEG
27004: PUSH
27005: LD_INT 2
27007: NEG
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 2
27015: PUSH
27016: LD_INT 3
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 1
27025: PUSH
27026: LD_INT 3
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: NEG
27036: PUSH
27037: LD_INT 2
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 2
27046: NEG
27047: PUSH
27048: LD_INT 1
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27080: LD_ADDR_VAR 0 27
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 0
27097: PUSH
27098: LD_INT 1
27100: NEG
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: LD_INT 0
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 1
27149: NEG
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: LD_INT 2
27165: NEG
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: LD_INT 2
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 1
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 2
27205: PUSH
27206: LD_INT 1
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 2
27215: PUSH
27216: LD_INT 2
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 1
27225: PUSH
27226: LD_INT 2
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 0
27235: PUSH
27236: LD_INT 2
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 1
27245: NEG
27246: PUSH
27247: LD_INT 1
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 2
27256: NEG
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 2
27267: NEG
27268: PUSH
27269: LD_INT 1
27271: NEG
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 2
27279: NEG
27280: PUSH
27281: LD_INT 2
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 1
27291: NEG
27292: PUSH
27293: LD_INT 2
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 2
27302: NEG
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 3
27313: NEG
27314: PUSH
27315: LD_INT 1
27317: NEG
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 3
27325: NEG
27326: PUSH
27327: LD_INT 2
27329: NEG
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27360: LD_ADDR_VAR 0 28
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: LD_INT 0
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 0
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 1
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: LD_INT 0
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 1
27429: NEG
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: LD_INT 2
27445: NEG
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: LD_INT 2
27456: NEG
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 1
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 2
27475: PUSH
27476: LD_INT 0
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 2
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 2
27495: PUSH
27496: LD_INT 2
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: LD_INT 2
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: LD_INT 2
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 2
27536: NEG
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 2
27547: NEG
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 2
27559: NEG
27560: PUSH
27561: LD_INT 2
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 2
27571: NEG
27572: PUSH
27573: LD_INT 3
27575: NEG
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 1
27583: NEG
27584: PUSH
27585: LD_INT 3
27587: NEG
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 3
27595: NEG
27596: PUSH
27597: LD_INT 1
27599: NEG
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 3
27607: NEG
27608: PUSH
27609: LD_INT 2
27611: NEG
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27642: LD_ADDR_VAR 0 29
27646: PUSH
27647: LD_INT 0
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: LD_INT 1
27662: NEG
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 1
27670: PUSH
27671: LD_INT 0
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 1
27680: PUSH
27681: LD_INT 1
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: LD_INT 1
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 1
27700: NEG
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 1
27711: NEG
27712: PUSH
27713: LD_INT 1
27715: NEG
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: LD_INT 2
27727: NEG
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: LD_INT 2
27738: NEG
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 1
27746: PUSH
27747: LD_INT 1
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 2
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 2
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 1
27777: PUSH
27778: LD_INT 2
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 0
27787: PUSH
27788: LD_INT 2
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 1
27797: NEG
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 2
27808: NEG
27809: PUSH
27810: LD_INT 1
27812: NEG
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 2
27820: NEG
27821: PUSH
27822: LD_INT 2
27824: NEG
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 2
27832: NEG
27833: PUSH
27834: LD_INT 3
27836: NEG
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 2
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 3
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: LD_INT 3
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: NEG
27876: PUSH
27877: LD_INT 2
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 3
27886: NEG
27887: PUSH
27888: LD_INT 2
27890: NEG
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27921: LD_ADDR_VAR 0 30
27925: PUSH
27926: LD_INT 0
27928: PUSH
27929: LD_INT 0
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 0
27938: PUSH
27939: LD_INT 1
27941: NEG
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 1
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: LD_INT 1
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 1
27979: NEG
27980: PUSH
27981: LD_INT 0
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: LD_INT 1
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: NEG
28003: PUSH
28004: LD_INT 2
28006: NEG
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: LD_INT 2
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 1
28025: PUSH
28026: LD_INT 1
28028: NEG
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 2
28036: PUSH
28037: LD_INT 0
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 2
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 2
28056: PUSH
28057: LD_INT 2
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 1
28066: PUSH
28067: LD_INT 2
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 1
28076: NEG
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 2
28087: NEG
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 2
28098: NEG
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 1
28110: NEG
28111: PUSH
28112: LD_INT 3
28114: NEG
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 1
28122: PUSH
28123: LD_INT 2
28125: NEG
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 3
28133: PUSH
28134: LD_INT 2
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 2
28143: PUSH
28144: LD_INT 3
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 2
28153: NEG
28154: PUSH
28155: LD_INT 1
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 3
28164: NEG
28165: PUSH
28166: LD_INT 1
28168: NEG
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28199: LD_ADDR_VAR 0 31
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: LD_INT 0
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 1
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: LD_INT 1
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: LD_INT 1
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: NEG
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 1
28268: NEG
28269: PUSH
28270: LD_INT 1
28272: NEG
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 1
28280: NEG
28281: PUSH
28282: LD_INT 2
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: LD_INT 1
28295: NEG
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 2
28303: PUSH
28304: LD_INT 0
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: LD_INT 1
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: LD_INT 2
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: LD_INT 2
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: LD_INT 2
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: LD_INT 1
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 2
28364: NEG
28365: PUSH
28366: LD_INT 1
28368: NEG
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 2
28376: NEG
28377: PUSH
28378: LD_INT 2
28380: NEG
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 2
28388: NEG
28389: PUSH
28390: LD_INT 3
28392: NEG
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 2
28400: PUSH
28401: LD_INT 1
28403: NEG
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 3
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 1
28421: PUSH
28422: LD_INT 3
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 1
28431: NEG
28432: PUSH
28433: LD_INT 2
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 3
28442: NEG
28443: PUSH
28444: LD_INT 2
28446: NEG
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28477: LD_ADDR_VAR 0 32
28481: PUSH
28482: LD_INT 0
28484: PUSH
28485: LD_INT 0
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 0
28494: PUSH
28495: LD_INT 1
28497: NEG
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 1
28505: PUSH
28506: LD_INT 0
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: LD_INT 1
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 0
28525: PUSH
28526: LD_INT 1
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 1
28535: NEG
28536: PUSH
28537: LD_INT 0
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 1
28546: NEG
28547: PUSH
28548: LD_INT 1
28550: NEG
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 1
28558: NEG
28559: PUSH
28560: LD_INT 2
28562: NEG
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: LD_INT 2
28573: NEG
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: LD_INT 1
28584: NEG
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 2
28592: PUSH
28593: LD_INT 1
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 2
28602: PUSH
28603: LD_INT 2
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 1
28612: PUSH
28613: LD_INT 2
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: LD_INT 2
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 1
28632: NEG
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 2
28643: NEG
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 2
28654: NEG
28655: PUSH
28656: LD_INT 1
28658: NEG
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 1
28666: NEG
28667: PUSH
28668: LD_INT 3
28670: NEG
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: LD_INT 2
28681: NEG
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 3
28689: PUSH
28690: LD_INT 2
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 2
28699: PUSH
28700: LD_INT 3
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 2
28709: NEG
28710: PUSH
28711: LD_INT 1
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 3
28720: NEG
28721: PUSH
28722: LD_INT 1
28724: NEG
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28755: LD_ADDR_VAR 0 33
28759: PUSH
28760: LD_INT 0
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 1
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: LD_INT 1
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 1
28813: NEG
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 1
28824: NEG
28825: PUSH
28826: LD_INT 1
28828: NEG
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 1
28836: NEG
28837: PUSH
28838: LD_INT 2
28840: NEG
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 1
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 2
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: LD_INT 2
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 1
28899: NEG
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 2
28910: NEG
28911: PUSH
28912: LD_INT 0
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 2
28921: NEG
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 2
28933: NEG
28934: PUSH
28935: LD_INT 2
28937: NEG
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 2
28945: NEG
28946: PUSH
28947: LD_INT 3
28949: NEG
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 2
28957: PUSH
28958: LD_INT 1
28960: NEG
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 3
28968: PUSH
28969: LD_INT 1
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: LD_INT 3
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: NEG
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 3
28999: NEG
29000: PUSH
29001: LD_INT 2
29003: NEG
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29034: LD_ADDR_VAR 0 34
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: LD_INT 0
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 0
29051: PUSH
29052: LD_INT 1
29054: NEG
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 1
29062: PUSH
29063: LD_INT 0
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: LD_INT 1
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: LD_INT 1
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 1
29092: NEG
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 1
29103: NEG
29104: PUSH
29105: LD_INT 1
29107: NEG
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 1
29115: NEG
29116: PUSH
29117: LD_INT 2
29119: NEG
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: LD_INT 2
29130: NEG
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 1
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 2
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 2
29159: PUSH
29160: LD_INT 2
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: LD_INT 2
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 1
29179: NEG
29180: PUSH
29181: LD_INT 1
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 2
29190: NEG
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 2
29201: NEG
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 2
29213: NEG
29214: PUSH
29215: LD_INT 2
29217: NEG
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: LD_INT 3
29229: NEG
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 1
29237: PUSH
29238: LD_INT 2
29240: NEG
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 3
29248: PUSH
29249: LD_INT 2
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 2
29258: PUSH
29259: LD_INT 3
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 2
29268: NEG
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 3
29279: NEG
29280: PUSH
29281: LD_INT 1
29283: NEG
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29314: LD_ADDR_VAR 0 35
29318: PUSH
29319: LD_INT 0
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: LD_INT 1
29334: NEG
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 1
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 1
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 0
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 1
29372: NEG
29373: PUSH
29374: LD_INT 0
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: LD_INT 1
29387: NEG
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 2
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 2
29405: NEG
29406: PUSH
29407: LD_INT 1
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29426: LD_ADDR_VAR 0 36
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: LD_INT 1
29446: NEG
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 1
29454: PUSH
29455: LD_INT 0
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: LD_INT 1
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 1
29484: NEG
29485: PUSH
29486: LD_INT 0
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 1
29495: NEG
29496: PUSH
29497: LD_INT 1
29499: NEG
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 1
29507: NEG
29508: PUSH
29509: LD_INT 2
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: LD_INT 2
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29538: LD_ADDR_VAR 0 37
29542: PUSH
29543: LD_INT 0
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 0
29555: PUSH
29556: LD_INT 1
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 1
29566: PUSH
29567: LD_INT 0
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 1
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 0
29586: PUSH
29587: LD_INT 1
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 1
29596: NEG
29597: PUSH
29598: LD_INT 0
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 1
29607: NEG
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: LD_INT 1
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 1
29630: NEG
29631: PUSH
29632: LD_INT 1
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29650: LD_ADDR_VAR 0 38
29654: PUSH
29655: LD_INT 0
29657: PUSH
29658: LD_INT 0
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 0
29667: PUSH
29668: LD_INT 1
29670: NEG
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 1
29678: PUSH
29679: LD_INT 0
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 1
29688: PUSH
29689: LD_INT 1
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: LD_INT 1
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 1
29708: NEG
29709: PUSH
29710: LD_INT 0
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 1
29719: NEG
29720: PUSH
29721: LD_INT 1
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 2
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 2
29741: NEG
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29762: LD_ADDR_VAR 0 39
29766: PUSH
29767: LD_INT 0
29769: PUSH
29770: LD_INT 0
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 0
29779: PUSH
29780: LD_INT 1
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: LD_INT 0
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 1
29820: NEG
29821: PUSH
29822: LD_INT 0
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: LD_INT 2
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: LD_INT 2
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29874: LD_ADDR_VAR 0 40
29878: PUSH
29879: LD_INT 0
29881: PUSH
29882: LD_INT 0
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 0
29891: PUSH
29892: LD_INT 1
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 1
29902: PUSH
29903: LD_INT 0
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: LD_INT 1
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 1
29932: NEG
29933: PUSH
29934: LD_INT 0
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 1
29943: NEG
29944: PUSH
29945: LD_INT 1
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: LD_INT 1
29958: NEG
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 1
29966: NEG
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29986: LD_ADDR_VAR 0 41
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 0
30003: PUSH
30004: LD_INT 1
30006: NEG
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 1
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: LD_INT 1
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: LD_INT 0
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: NEG
30056: PUSH
30057: LD_INT 1
30059: NEG
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 1
30067: NEG
30068: PUSH
30069: LD_INT 2
30071: NEG
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: LD_INT 1
30082: NEG
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: LD_INT 0
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 2
30100: PUSH
30101: LD_INT 1
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 2
30110: PUSH
30111: LD_INT 2
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: LD_INT 2
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 1
30130: NEG
30131: PUSH
30132: LD_INT 1
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 2
30141: NEG
30142: PUSH
30143: LD_INT 0
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 2
30152: NEG
30153: PUSH
30154: LD_INT 1
30156: NEG
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 2
30164: NEG
30165: PUSH
30166: LD_INT 2
30168: NEG
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 2
30176: NEG
30177: PUSH
30178: LD_INT 3
30180: NEG
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 2
30188: PUSH
30189: LD_INT 1
30191: NEG
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 3
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 3
30209: PUSH
30210: LD_INT 1
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 3
30219: PUSH
30220: LD_INT 2
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 3
30229: PUSH
30230: LD_INT 3
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 2
30239: PUSH
30240: LD_INT 3
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 2
30249: NEG
30250: PUSH
30251: LD_INT 1
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 3
30260: NEG
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 3
30271: NEG
30272: PUSH
30273: LD_INT 1
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 3
30283: NEG
30284: PUSH
30285: LD_INT 2
30287: NEG
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 3
30295: NEG
30296: PUSH
30297: LD_INT 3
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30336: LD_ADDR_VAR 0 42
30340: PUSH
30341: LD_INT 0
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: LD_INT 1
30356: NEG
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: LD_INT 1
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 1
30394: NEG
30395: PUSH
30396: LD_INT 0
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: NEG
30406: PUSH
30407: LD_INT 1
30409: NEG
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 1
30417: NEG
30418: PUSH
30419: LD_INT 2
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 0
30429: PUSH
30430: LD_INT 2
30432: NEG
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 1
30440: PUSH
30441: LD_INT 1
30443: NEG
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 2
30451: PUSH
30452: LD_INT 1
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 2
30461: PUSH
30462: LD_INT 2
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 1
30471: PUSH
30472: LD_INT 2
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 0
30481: PUSH
30482: LD_INT 2
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 1
30491: NEG
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 2
30502: NEG
30503: PUSH
30504: LD_INT 1
30506: NEG
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 2
30514: NEG
30515: PUSH
30516: LD_INT 2
30518: NEG
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 2
30526: NEG
30527: PUSH
30528: LD_INT 3
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: LD_INT 3
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: LD_INT 3
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: LD_INT 2
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 3
30572: PUSH
30573: LD_INT 2
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 3
30582: PUSH
30583: LD_INT 3
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 2
30592: PUSH
30593: LD_INT 3
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 1
30602: PUSH
30603: LD_INT 3
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: NEG
30623: PUSH
30624: LD_INT 2
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 3
30633: NEG
30634: PUSH
30635: LD_INT 2
30637: NEG
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 3
30645: NEG
30646: PUSH
30647: LD_INT 3
30649: NEG
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30686: LD_ADDR_VAR 0 43
30690: PUSH
30691: LD_INT 0
30693: PUSH
30694: LD_INT 0
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 0
30703: PUSH
30704: LD_INT 1
30706: NEG
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 1
30714: PUSH
30715: LD_INT 0
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: LD_INT 1
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 0
30734: PUSH
30735: LD_INT 1
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 1
30744: NEG
30745: PUSH
30746: LD_INT 0
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 1
30755: NEG
30756: PUSH
30757: LD_INT 1
30759: NEG
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 1
30767: NEG
30768: PUSH
30769: LD_INT 2
30771: NEG
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 0
30779: PUSH
30780: LD_INT 2
30782: NEG
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 1
30790: PUSH
30791: LD_INT 1
30793: NEG
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 2
30801: PUSH
30802: LD_INT 0
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: LD_INT 1
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 1
30821: PUSH
30822: LD_INT 2
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: LD_INT 2
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 1
30841: NEG
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 2
30852: NEG
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 2
30863: NEG
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 1
30875: NEG
30876: PUSH
30877: LD_INT 3
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 0
30887: PUSH
30888: LD_INT 3
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 1
30898: PUSH
30899: LD_INT 2
30901: NEG
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 2
30909: PUSH
30910: LD_INT 1
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 3
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 3
30930: PUSH
30931: LD_INT 1
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: LD_INT 3
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 1
30960: NEG
30961: PUSH
30962: LD_INT 2
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 2
30971: NEG
30972: PUSH
30973: LD_INT 1
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 3
30982: NEG
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 3
30993: NEG
30994: PUSH
30995: LD_INT 1
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31034: LD_ADDR_VAR 0 44
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: LD_INT 1
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 1
31062: PUSH
31063: LD_INT 0
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 1
31072: PUSH
31073: LD_INT 1
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 0
31082: PUSH
31083: LD_INT 1
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 1
31092: NEG
31093: PUSH
31094: LD_INT 0
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 1
31103: NEG
31104: PUSH
31105: LD_INT 1
31107: NEG
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 1
31115: NEG
31116: PUSH
31117: LD_INT 2
31119: NEG
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: LD_INT 1
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: LD_INT 0
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 2
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 2
31158: PUSH
31159: LD_INT 2
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: LD_INT 2
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 1
31178: NEG
31179: PUSH
31180: LD_INT 1
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 2
31189: NEG
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 2
31200: NEG
31201: PUSH
31202: LD_INT 1
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 2
31212: NEG
31213: PUSH
31214: LD_INT 2
31216: NEG
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 2
31224: NEG
31225: PUSH
31226: LD_INT 3
31228: NEG
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: LD_INT 1
31239: NEG
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 3
31247: PUSH
31248: LD_INT 0
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 3
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 3
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 3
31277: PUSH
31278: LD_INT 3
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 2
31287: PUSH
31288: LD_INT 3
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 2
31297: NEG
31298: PUSH
31299: LD_INT 1
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 3
31308: NEG
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 3
31319: NEG
31320: PUSH
31321: LD_INT 1
31323: NEG
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 3
31331: NEG
31332: PUSH
31333: LD_INT 2
31335: NEG
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 3
31343: NEG
31344: PUSH
31345: LD_INT 3
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31384: LD_ADDR_VAR 0 45
31388: PUSH
31389: LD_INT 0
31391: PUSH
31392: LD_INT 0
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: LD_INT 1
31404: NEG
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 1
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: LD_INT 1
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 1
31442: NEG
31443: PUSH
31444: LD_INT 0
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 1
31453: NEG
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 1
31465: NEG
31466: PUSH
31467: LD_INT 2
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 0
31477: PUSH
31478: LD_INT 2
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: LD_INT 1
31491: NEG
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 2
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 2
31509: PUSH
31510: LD_INT 2
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: LD_INT 2
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: LD_INT 2
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: NEG
31540: PUSH
31541: LD_INT 1
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 2
31550: NEG
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 2
31562: NEG
31563: PUSH
31564: LD_INT 2
31566: NEG
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: LD_INT 3
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: LD_INT 3
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 0
31598: PUSH
31599: LD_INT 3
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: LD_INT 2
31612: NEG
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 3
31620: PUSH
31621: LD_INT 2
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 3
31630: PUSH
31631: LD_INT 3
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 2
31640: PUSH
31641: LD_INT 3
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 1
31650: PUSH
31651: LD_INT 3
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 0
31660: PUSH
31661: LD_INT 3
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: LD_INT 2
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 3
31681: NEG
31682: PUSH
31683: LD_INT 2
31685: NEG
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 3
31693: NEG
31694: PUSH
31695: LD_INT 3
31697: NEG
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31734: LD_ADDR_VAR 0 46
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: LD_INT 0
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 0
31751: PUSH
31752: LD_INT 1
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 1
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: LD_INT 1
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 0
31782: PUSH
31783: LD_INT 1
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: NEG
31793: PUSH
31794: LD_INT 0
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 1
31803: NEG
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 1
31815: NEG
31816: PUSH
31817: LD_INT 2
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 0
31827: PUSH
31828: LD_INT 2
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 1
31838: PUSH
31839: LD_INT 1
31841: NEG
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 2
31849: PUSH
31850: LD_INT 0
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 2
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 1
31869: PUSH
31870: LD_INT 2
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: LD_INT 2
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 1
31889: NEG
31890: PUSH
31891: LD_INT 1
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 2
31900: NEG
31901: PUSH
31902: LD_INT 0
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 2
31911: NEG
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PUSH
31925: LD_INT 3
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 0
31935: PUSH
31936: LD_INT 3
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 1
31946: PUSH
31947: LD_INT 2
31949: NEG
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 2
31957: PUSH
31958: LD_INT 1
31960: NEG
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 3
31968: PUSH
31969: LD_INT 0
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 3
31978: PUSH
31979: LD_INT 1
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: LD_INT 3
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: LD_INT 2
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 2
32019: NEG
32020: PUSH
32021: LD_INT 1
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 3
32030: NEG
32031: PUSH
32032: LD_INT 0
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 3
32041: NEG
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32082: LD_ADDR_VAR 0 47
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 0
32099: PUSH
32100: LD_INT 1
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 1
32120: PUSH
32121: LD_INT 1
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: LD_INT 1
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 1
32140: NEG
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 1
32151: NEG
32152: PUSH
32153: LD_INT 1
32155: NEG
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 1
32163: NEG
32164: PUSH
32165: LD_INT 2
32167: NEG
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: LD_INT 2
32178: NEG
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 1
32186: PUSH
32187: LD_INT 1
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 2
32197: NEG
32198: PUSH
32199: LD_INT 1
32201: NEG
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 2
32209: NEG
32210: PUSH
32211: LD_INT 2
32213: NEG
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32233: LD_ADDR_VAR 0 48
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: LD_INT 0
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 1
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: LD_INT 1
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 1
32302: NEG
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: LD_INT 2
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: LD_INT 2
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: LD_INT 1
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 2
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 2
32358: PUSH
32359: LD_INT 1
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32380: LD_ADDR_VAR 0 49
32384: PUSH
32385: LD_INT 0
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 0
32397: PUSH
32398: LD_INT 1
32400: NEG
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 1
32418: PUSH
32419: LD_INT 1
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 0
32428: PUSH
32429: LD_INT 1
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 1
32438: NEG
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: LD_INT 1
32453: NEG
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: LD_INT 1
32464: NEG
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 2
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 2
32482: PUSH
32483: LD_INT 1
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 2
32492: PUSH
32493: LD_INT 2
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 1
32502: PUSH
32503: LD_INT 2
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32524: LD_ADDR_VAR 0 50
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 0
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 0
32572: PUSH
32573: LD_INT 1
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 1
32582: NEG
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: LD_INT 1
32597: NEG
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 2
32605: PUSH
32606: LD_INT 1
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 2
32615: PUSH
32616: LD_INT 2
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 1
32625: PUSH
32626: LD_INT 2
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 0
32635: PUSH
32636: LD_INT 2
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 1
32645: NEG
32646: PUSH
32647: LD_INT 1
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32668: LD_ADDR_VAR 0 51
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: LD_INT 0
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 0
32685: PUSH
32686: LD_INT 1
32688: NEG
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 1
32696: PUSH
32697: LD_INT 0
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 1
32706: PUSH
32707: LD_INT 1
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 0
32716: PUSH
32717: LD_INT 1
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 1
32726: NEG
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: LD_INT 1
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 1
32749: PUSH
32750: LD_INT 2
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: LD_INT 2
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 1
32769: NEG
32770: PUSH
32771: LD_INT 1
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 2
32780: NEG
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 2
32791: NEG
32792: PUSH
32793: LD_INT 1
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32815: LD_ADDR_VAR 0 52
32819: PUSH
32820: LD_INT 0
32822: PUSH
32823: LD_INT 0
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 0
32832: PUSH
32833: LD_INT 1
32835: NEG
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: LD_INT 1
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 0
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 1
32884: NEG
32885: PUSH
32886: LD_INT 1
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: NEG
32897: PUSH
32898: LD_INT 2
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 2
32919: NEG
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 2
32930: NEG
32931: PUSH
32932: LD_INT 1
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 2
32942: NEG
32943: PUSH
32944: LD_INT 2
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32966: LD_ADDR_VAR 0 53
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: LD_INT 1
32986: NEG
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: PUSH
33005: LD_INT 1
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 0
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: NEG
33025: PUSH
33026: LD_INT 0
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: LD_INT 1
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: LD_INT 2
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: LD_INT 2
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 1
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 2
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: LD_INT 2
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 1
33111: PUSH
33112: LD_INT 2
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: LD_INT 2
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: NEG
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 2
33142: NEG
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 2
33153: NEG
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 2
33165: NEG
33166: PUSH
33167: LD_INT 2
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33196: LD_ADDR_VAR 0 54
33200: PUSH
33201: LD_INT 0
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 0
33213: PUSH
33214: LD_INT 1
33216: NEG
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 1
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: LD_INT 1
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 0
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 1
33265: NEG
33266: PUSH
33267: LD_INT 1
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 1
33277: NEG
33278: PUSH
33279: LD_INT 2
33281: NEG
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: LD_INT 2
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: LD_INT 1
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 2
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 2
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 2
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: LD_INT 2
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 0
33351: PUSH
33352: LD_INT 2
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 1
33361: NEG
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 2
33372: NEG
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 2
33383: NEG
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: LD_INT 2
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33426: LD_ADDR_VAR 0 55
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: LD_INT 0
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 0
33443: PUSH
33444: LD_INT 1
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 1
33464: PUSH
33465: LD_INT 1
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 0
33474: PUSH
33475: LD_INT 1
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 1
33484: NEG
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 1
33495: NEG
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 1
33507: NEG
33508: PUSH
33509: LD_INT 2
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: LD_INT 2
33522: NEG
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 1
33530: PUSH
33531: LD_INT 1
33533: NEG
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 2
33541: PUSH
33542: LD_INT 0
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 1
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 2
33561: PUSH
33562: LD_INT 2
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 1
33571: PUSH
33572: LD_INT 2
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: LD_INT 2
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 1
33591: NEG
33592: PUSH
33593: LD_INT 1
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 2
33602: NEG
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 2
33613: NEG
33614: PUSH
33615: LD_INT 1
33617: NEG
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 2
33625: NEG
33626: PUSH
33627: LD_INT 2
33629: NEG
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33656: LD_ADDR_VAR 0 56
33660: PUSH
33661: LD_INT 0
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: LD_INT 1
33676: NEG
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: LD_INT 1
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 0
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 1
33714: NEG
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 1
33725: NEG
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: LD_INT 2
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: LD_INT 2
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: LD_INT 1
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 2
33771: PUSH
33772: LD_INT 0
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 2
33781: PUSH
33782: LD_INT 1
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 2
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: LD_INT 2
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 0
33811: PUSH
33812: LD_INT 2
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 1
33821: NEG
33822: PUSH
33823: LD_INT 1
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 2
33832: NEG
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 2
33843: NEG
33844: PUSH
33845: LD_INT 1
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 2
33855: NEG
33856: PUSH
33857: LD_INT 2
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33886: LD_ADDR_VAR 0 57
33890: PUSH
33891: LD_INT 0
33893: PUSH
33894: LD_INT 0
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 0
33903: PUSH
33904: LD_INT 1
33906: NEG
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: LD_INT 1
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 0
33934: PUSH
33935: LD_INT 1
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: NEG
33945: PUSH
33946: LD_INT 0
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 1
33955: NEG
33956: PUSH
33957: LD_INT 1
33959: NEG
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: LD_INT 2
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: LD_INT 2
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 1
33990: PUSH
33991: LD_INT 1
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 2
34001: PUSH
34002: LD_INT 0
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 2
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 2
34021: PUSH
34022: LD_INT 2
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: PUSH
34032: LD_INT 2
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: LD_INT 2
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 1
34051: NEG
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 2
34062: NEG
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 2
34073: NEG
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 2
34085: NEG
34086: PUSH
34087: LD_INT 2
34089: NEG
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34116: LD_ADDR_VAR 0 58
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: LD_INT 0
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 0
34133: PUSH
34134: LD_INT 1
34136: NEG
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: LD_INT 0
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 1
34154: PUSH
34155: LD_INT 1
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 0
34164: PUSH
34165: LD_INT 1
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 1
34174: NEG
34175: PUSH
34176: LD_INT 0
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 1
34185: NEG
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: LD_INT 2
34201: NEG
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: LD_INT 2
34212: NEG
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 1
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 2
34231: PUSH
34232: LD_INT 0
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 2
34241: PUSH
34242: LD_INT 1
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 2
34251: PUSH
34252: LD_INT 2
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 1
34261: PUSH
34262: LD_INT 2
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: LD_INT 2
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 1
34281: NEG
34282: PUSH
34283: LD_INT 1
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 2
34292: NEG
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 2
34303: NEG
34304: PUSH
34305: LD_INT 1
34307: NEG
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 2
34315: NEG
34316: PUSH
34317: LD_INT 2
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34346: LD_ADDR_VAR 0 59
34350: PUSH
34351: LD_INT 0
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 0
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 1
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 1
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 0
34394: PUSH
34395: LD_INT 1
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 1
34404: NEG
34405: PUSH
34406: LD_INT 0
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: PUSH
34417: LD_INT 1
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34434: LD_ADDR_VAR 0 60
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: LD_INT 0
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: LD_INT 1
34454: NEG
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 1
34462: PUSH
34463: LD_INT 0
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 1
34472: PUSH
34473: LD_INT 1
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 1
34492: NEG
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 1
34503: NEG
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34522: LD_ADDR_VAR 0 61
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 0
34539: PUSH
34540: LD_INT 1
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 0
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 0
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 1
34580: NEG
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 1
34591: NEG
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34610: LD_ADDR_VAR 0 62
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: LD_INT 0
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: LD_INT 1
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 1
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 1
34668: NEG
34669: PUSH
34670: LD_INT 0
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 1
34679: NEG
34680: PUSH
34681: LD_INT 1
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34698: LD_ADDR_VAR 0 63
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 0
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: NEG
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: NEG
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34786: LD_ADDR_VAR 0 64
34790: PUSH
34791: LD_INT 0
34793: PUSH
34794: LD_INT 0
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: LD_INT 1
34806: NEG
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 1
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: LD_INT 1
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: LD_INT 1
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 1
34844: NEG
34845: PUSH
34846: LD_INT 0
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: NEG
34856: PUSH
34857: LD_INT 1
34859: NEG
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: ST_TO_ADDR
// end ; 1 :
34874: GO 40771
34876: LD_INT 1
34878: DOUBLE
34879: EQUAL
34880: IFTRUE 34884
34882: GO 37507
34884: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34885: LD_ADDR_VAR 0 11
34889: PUSH
34890: LD_INT 1
34892: NEG
34893: PUSH
34894: LD_INT 3
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 0
34904: PUSH
34905: LD_INT 3
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: LIST
34928: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34929: LD_ADDR_VAR 0 12
34933: PUSH
34934: LD_INT 2
34936: PUSH
34937: LD_INT 1
34939: NEG
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 3
34947: PUSH
34948: LD_INT 0
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 3
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: LIST
34969: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34970: LD_ADDR_VAR 0 13
34974: PUSH
34975: LD_INT 3
34977: PUSH
34978: LD_INT 2
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 3
34987: PUSH
34988: LD_INT 3
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 2
34997: PUSH
34998: LD_INT 3
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: LIST
35009: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35010: LD_ADDR_VAR 0 14
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: LD_INT 3
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: LD_INT 3
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: LD_INT 2
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: LIST
35050: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35051: LD_ADDR_VAR 0 15
35055: PUSH
35056: LD_INT 2
35058: NEG
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 3
35069: NEG
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 3
35080: NEG
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: LIST
35094: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35095: LD_ADDR_VAR 0 16
35099: PUSH
35100: LD_INT 2
35102: NEG
35103: PUSH
35104: LD_INT 3
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 3
35114: NEG
35115: PUSH
35116: LD_INT 2
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 3
35126: NEG
35127: PUSH
35128: LD_INT 3
35130: NEG
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: LIST
35140: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35141: LD_ADDR_VAR 0 17
35145: PUSH
35146: LD_INT 1
35148: NEG
35149: PUSH
35150: LD_INT 3
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: LD_INT 3
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 1
35171: PUSH
35172: LD_INT 2
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: LIST
35184: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35185: LD_ADDR_VAR 0 18
35189: PUSH
35190: LD_INT 2
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 3
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 3
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: LIST
35225: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35226: LD_ADDR_VAR 0 19
35230: PUSH
35231: LD_INT 3
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 3
35243: PUSH
35244: LD_INT 3
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 2
35253: PUSH
35254: LD_INT 3
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: LIST
35265: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35266: LD_ADDR_VAR 0 20
35270: PUSH
35271: LD_INT 1
35273: PUSH
35274: LD_INT 3
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: LD_INT 3
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 1
35293: NEG
35294: PUSH
35295: LD_INT 2
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35307: LD_ADDR_VAR 0 21
35311: PUSH
35312: LD_INT 2
35314: NEG
35315: PUSH
35316: LD_INT 1
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 3
35325: NEG
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 3
35336: NEG
35337: PUSH
35338: LD_INT 1
35340: NEG
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: LIST
35350: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35351: LD_ADDR_VAR 0 22
35355: PUSH
35356: LD_INT 2
35358: NEG
35359: PUSH
35360: LD_INT 3
35362: NEG
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 3
35370: NEG
35371: PUSH
35372: LD_INT 2
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 3
35382: NEG
35383: PUSH
35384: LD_INT 3
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: LIST
35396: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35397: LD_ADDR_VAR 0 23
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: LD_INT 3
35407: NEG
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 1
35415: NEG
35416: PUSH
35417: LD_INT 4
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: LD_INT 3
35430: NEG
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: LIST
35440: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35441: LD_ADDR_VAR 0 24
35445: PUSH
35446: LD_INT 3
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 3
35458: PUSH
35459: LD_INT 1
35461: NEG
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 4
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: LIST
35481: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35482: LD_ADDR_VAR 0 25
35486: PUSH
35487: LD_INT 3
35489: PUSH
35490: LD_INT 3
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 4
35499: PUSH
35500: LD_INT 3
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 3
35509: PUSH
35510: LD_INT 4
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: LIST
35521: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35522: LD_ADDR_VAR 0 26
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: LD_INT 3
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 1
35539: PUSH
35540: LD_INT 4
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: LD_INT 3
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35563: LD_ADDR_VAR 0 27
35567: PUSH
35568: LD_INT 3
35570: NEG
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 3
35581: NEG
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 4
35592: NEG
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35607: LD_ADDR_VAR 0 28
35611: PUSH
35612: LD_INT 3
35614: NEG
35615: PUSH
35616: LD_INT 3
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 3
35626: NEG
35627: PUSH
35628: LD_INT 4
35630: NEG
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 4
35638: NEG
35639: PUSH
35640: LD_INT 3
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: LIST
35652: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35653: LD_ADDR_VAR 0 29
35657: PUSH
35658: LD_INT 1
35660: NEG
35661: PUSH
35662: LD_INT 3
35664: NEG
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 0
35672: PUSH
35673: LD_INT 3
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: LD_INT 2
35686: NEG
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 1
35694: NEG
35695: PUSH
35696: LD_INT 4
35698: NEG
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: LD_INT 4
35709: NEG
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 1
35717: PUSH
35718: LD_INT 3
35720: NEG
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: LD_INT 5
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: LD_INT 5
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: LD_INT 4
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: PUSH
35764: LD_INT 6
35766: NEG
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 0
35774: PUSH
35775: LD_INT 6
35777: NEG
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: PUSH
35786: LD_INT 5
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35808: LD_ADDR_VAR 0 30
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: LD_INT 1
35818: NEG
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 3
35826: PUSH
35827: LD_INT 0
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 3
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 3
35846: PUSH
35847: LD_INT 1
35849: NEG
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 4
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 4
35867: PUSH
35868: LD_INT 1
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 4
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 5
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 5
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 5
35908: PUSH
35909: LD_INT 1
35911: NEG
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 6
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 6
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
35951: LD_ADDR_VAR 0 31
35955: PUSH
35956: LD_INT 3
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 3
35968: PUSH
35969: LD_INT 3
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 2
35978: PUSH
35979: LD_INT 3
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 4
35988: PUSH
35989: LD_INT 3
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 4
35998: PUSH
35999: LD_INT 4
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 3
36008: PUSH
36009: LD_INT 4
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 5
36018: PUSH
36019: LD_INT 4
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 5
36028: PUSH
36029: LD_INT 5
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 4
36038: PUSH
36039: LD_INT 5
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 6
36048: PUSH
36049: LD_INT 5
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 6
36058: PUSH
36059: LD_INT 6
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 5
36068: PUSH
36069: LD_INT 6
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36090: LD_ADDR_VAR 0 32
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: LD_INT 3
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: LD_INT 3
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: LD_INT 4
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: LD_INT 4
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: LD_INT 3
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: LD_INT 5
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 0
36169: PUSH
36170: LD_INT 5
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 1
36179: NEG
36180: PUSH
36181: LD_INT 4
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 1
36190: PUSH
36191: LD_INT 6
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 0
36200: PUSH
36201: LD_INT 6
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 1
36210: NEG
36211: PUSH
36212: LD_INT 5
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36233: LD_ADDR_VAR 0 33
36237: PUSH
36238: LD_INT 2
36240: NEG
36241: PUSH
36242: LD_INT 1
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 3
36251: NEG
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 3
36262: NEG
36263: PUSH
36264: LD_INT 1
36266: NEG
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 3
36274: NEG
36275: PUSH
36276: LD_INT 1
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 4
36285: NEG
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 4
36296: NEG
36297: PUSH
36298: LD_INT 1
36300: NEG
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 4
36308: NEG
36309: PUSH
36310: LD_INT 1
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 5
36319: NEG
36320: PUSH
36321: LD_INT 0
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 5
36330: NEG
36331: PUSH
36332: LD_INT 1
36334: NEG
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 5
36342: NEG
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 6
36353: NEG
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 6
36364: NEG
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36388: LD_ADDR_VAR 0 34
36392: PUSH
36393: LD_INT 2
36395: NEG
36396: PUSH
36397: LD_INT 3
36399: NEG
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 3
36407: NEG
36408: PUSH
36409: LD_INT 2
36411: NEG
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 3
36419: NEG
36420: PUSH
36421: LD_INT 3
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 3
36431: NEG
36432: PUSH
36433: LD_INT 4
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 4
36443: NEG
36444: PUSH
36445: LD_INT 3
36447: NEG
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 4
36455: NEG
36456: PUSH
36457: LD_INT 4
36459: NEG
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 4
36467: NEG
36468: PUSH
36469: LD_INT 5
36471: NEG
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 5
36479: NEG
36480: PUSH
36481: LD_INT 4
36483: NEG
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 5
36491: NEG
36492: PUSH
36493: LD_INT 5
36495: NEG
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 5
36503: NEG
36504: PUSH
36505: LD_INT 6
36507: NEG
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 6
36515: NEG
36516: PUSH
36517: LD_INT 5
36519: NEG
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 6
36527: NEG
36528: PUSH
36529: LD_INT 6
36531: NEG
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36551: LD_ADDR_VAR 0 41
36555: PUSH
36556: LD_INT 0
36558: PUSH
36559: LD_INT 2
36561: NEG
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 1
36569: NEG
36570: PUSH
36571: LD_INT 3
36573: NEG
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: LD_INT 2
36584: NEG
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: LIST
36594: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36595: LD_ADDR_VAR 0 42
36599: PUSH
36600: LD_INT 2
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 2
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 3
36623: PUSH
36624: LD_INT 1
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: LIST
36635: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36636: LD_ADDR_VAR 0 43
36640: PUSH
36641: LD_INT 2
36643: PUSH
36644: LD_INT 2
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 3
36653: PUSH
36654: LD_INT 2
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: LD_INT 3
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: LIST
36675: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36676: LD_ADDR_VAR 0 44
36680: PUSH
36681: LD_INT 0
36683: PUSH
36684: LD_INT 2
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 1
36693: PUSH
36694: LD_INT 3
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 1
36703: NEG
36704: PUSH
36705: LD_INT 2
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: LIST
36716: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36717: LD_ADDR_VAR 0 45
36721: PUSH
36722: LD_INT 2
36724: NEG
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 2
36735: NEG
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 3
36746: NEG
36747: PUSH
36748: LD_INT 1
36750: NEG
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36761: LD_ADDR_VAR 0 46
36765: PUSH
36766: LD_INT 2
36768: NEG
36769: PUSH
36770: LD_INT 2
36772: NEG
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 2
36780: NEG
36781: PUSH
36782: LD_INT 3
36784: NEG
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 3
36792: NEG
36793: PUSH
36794: LD_INT 2
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: LIST
36806: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36807: LD_ADDR_VAR 0 47
36811: PUSH
36812: LD_INT 2
36814: NEG
36815: PUSH
36816: LD_INT 3
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: LD_INT 3
36830: NEG
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36840: LD_ADDR_VAR 0 48
36844: PUSH
36845: LD_INT 1
36847: PUSH
36848: LD_INT 2
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 2
36858: PUSH
36859: LD_INT 1
36861: NEG
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36871: LD_ADDR_VAR 0 49
36875: PUSH
36876: LD_INT 3
36878: PUSH
36879: LD_INT 1
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 3
36888: PUSH
36889: LD_INT 2
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
36900: LD_ADDR_VAR 0 50
36904: PUSH
36905: LD_INT 2
36907: PUSH
36908: LD_INT 3
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: LD_INT 3
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36929: LD_ADDR_VAR 0 51
36933: PUSH
36934: LD_INT 1
36936: NEG
36937: PUSH
36938: LD_INT 2
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 2
36947: NEG
36948: PUSH
36949: LD_INT 1
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36960: LD_ADDR_VAR 0 52
36964: PUSH
36965: LD_INT 3
36967: NEG
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 3
36979: NEG
36980: PUSH
36981: LD_INT 2
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36993: LD_ADDR_VAR 0 53
36997: PUSH
36998: LD_INT 1
37000: NEG
37001: PUSH
37002: LD_INT 3
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: LD_INT 3
37015: NEG
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: LD_INT 2
37026: NEG
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: LIST
37036: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37037: LD_ADDR_VAR 0 54
37041: PUSH
37042: LD_INT 2
37044: PUSH
37045: LD_INT 1
37047: NEG
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 3
37055: PUSH
37056: LD_INT 0
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 3
37065: PUSH
37066: LD_INT 1
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: LIST
37077: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37078: LD_ADDR_VAR 0 55
37082: PUSH
37083: LD_INT 3
37085: PUSH
37086: LD_INT 2
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 3
37095: PUSH
37096: LD_INT 3
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: LD_INT 3
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: LIST
37117: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37118: LD_ADDR_VAR 0 56
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: LD_INT 3
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: LD_INT 3
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 1
37145: NEG
37146: PUSH
37147: LD_INT 2
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: LIST
37158: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37159: LD_ADDR_VAR 0 57
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: LD_INT 1
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 3
37177: NEG
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 3
37188: NEG
37189: PUSH
37190: LD_INT 1
37192: NEG
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: LIST
37202: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37203: LD_ADDR_VAR 0 58
37207: PUSH
37208: LD_INT 2
37210: NEG
37211: PUSH
37212: LD_INT 3
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 3
37222: NEG
37223: PUSH
37224: LD_INT 2
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 3
37234: NEG
37235: PUSH
37236: LD_INT 3
37238: NEG
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: LIST
37248: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37249: LD_ADDR_VAR 0 59
37253: PUSH
37254: LD_INT 1
37256: NEG
37257: PUSH
37258: LD_INT 2
37260: NEG
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: LD_INT 2
37271: NEG
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 1
37282: NEG
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: LIST
37292: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37293: LD_ADDR_VAR 0 60
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 2
37311: PUSH
37312: LD_INT 0
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 2
37321: PUSH
37322: LD_INT 1
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: LIST
37333: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37334: LD_ADDR_VAR 0 61
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 2
37351: PUSH
37352: LD_INT 2
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 1
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: LIST
37373: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37374: LD_ADDR_VAR 0 62
37378: PUSH
37379: LD_INT 1
37381: PUSH
37382: LD_INT 2
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: LD_INT 2
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: LIST
37414: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37415: LD_ADDR_VAR 0 63
37419: PUSH
37420: LD_INT 1
37422: NEG
37423: PUSH
37424: LD_INT 1
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 2
37433: NEG
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 2
37444: NEG
37445: PUSH
37446: LD_INT 1
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: LIST
37458: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37459: LD_ADDR_VAR 0 64
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: LD_INT 2
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 2
37478: NEG
37479: PUSH
37480: LD_INT 1
37482: NEG
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 2
37490: NEG
37491: PUSH
37492: LD_INT 2
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: LIST
37504: ST_TO_ADDR
// end ; 2 :
37505: GO 40771
37507: LD_INT 2
37509: DOUBLE
37510: EQUAL
37511: IFTRUE 37515
37513: GO 40770
37515: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37516: LD_ADDR_VAR 0 29
37520: PUSH
37521: LD_INT 4
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 4
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 5
37544: PUSH
37545: LD_INT 0
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 5
37554: PUSH
37555: LD_INT 1
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 4
37564: PUSH
37565: LD_INT 1
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 3
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 3
37584: PUSH
37585: LD_INT 1
37587: NEG
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 3
37595: PUSH
37596: LD_INT 2
37598: NEG
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 5
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 3
37616: PUSH
37617: LD_INT 3
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 3
37626: PUSH
37627: LD_INT 2
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 4
37636: PUSH
37637: LD_INT 3
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 4
37646: PUSH
37647: LD_INT 4
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 3
37656: PUSH
37657: LD_INT 4
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: LD_INT 3
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 2
37676: PUSH
37677: LD_INT 2
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 4
37686: PUSH
37687: LD_INT 2
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 2
37696: PUSH
37697: LD_INT 4
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: LD_INT 4
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: LD_INT 3
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: LD_INT 4
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: LD_INT 5
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 0
37746: PUSH
37747: LD_INT 5
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: NEG
37757: PUSH
37758: LD_INT 4
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 1
37767: NEG
37768: PUSH
37769: LD_INT 3
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 2
37778: PUSH
37779: LD_INT 5
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: LD_INT 3
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 3
37799: NEG
37800: PUSH
37801: LD_INT 0
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 3
37810: NEG
37811: PUSH
37812: LD_INT 1
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: LD_INT 0
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 2
37833: NEG
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 3
37844: NEG
37845: PUSH
37846: LD_INT 1
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 4
37855: NEG
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 4
37866: NEG
37867: PUSH
37868: LD_INT 1
37870: NEG
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 4
37878: NEG
37879: PUSH
37880: LD_INT 2
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 2
37890: NEG
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 4
37901: NEG
37902: PUSH
37903: LD_INT 4
37905: NEG
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 4
37913: NEG
37914: PUSH
37915: LD_INT 5
37917: NEG
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 3
37925: NEG
37926: PUSH
37927: LD_INT 4
37929: NEG
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 3
37937: NEG
37938: PUSH
37939: LD_INT 3
37941: NEG
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 4
37949: NEG
37950: PUSH
37951: LD_INT 3
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 5
37961: NEG
37962: PUSH
37963: LD_INT 4
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 5
37973: NEG
37974: PUSH
37975: LD_INT 5
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 3
37985: NEG
37986: PUSH
37987: LD_INT 5
37989: NEG
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 5
37997: NEG
37998: PUSH
37999: LD_INT 3
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38054: LD_ADDR_VAR 0 30
38058: PUSH
38059: LD_INT 4
38061: PUSH
38062: LD_INT 4
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 4
38071: PUSH
38072: LD_INT 3
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 5
38081: PUSH
38082: LD_INT 4
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 5
38091: PUSH
38092: LD_INT 5
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 4
38101: PUSH
38102: LD_INT 5
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 3
38111: PUSH
38112: LD_INT 4
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 3
38121: PUSH
38122: LD_INT 3
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 5
38131: PUSH
38132: LD_INT 3
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 3
38141: PUSH
38142: LD_INT 5
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: LD_INT 3
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: LD_INT 2
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: LD_INT 3
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: LD_INT 4
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: LD_INT 4
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: LD_INT 3
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: LD_INT 2
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: LD_INT 4
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 2
38233: NEG
38234: PUSH
38235: LD_INT 2
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 4
38244: NEG
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 4
38255: NEG
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 3
38267: NEG
38268: PUSH
38269: LD_INT 0
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 3
38278: NEG
38279: PUSH
38280: LD_INT 1
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 4
38289: NEG
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 5
38300: NEG
38301: PUSH
38302: LD_INT 0
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 5
38311: NEG
38312: PUSH
38313: LD_INT 1
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 5
38323: NEG
38324: PUSH
38325: LD_INT 2
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 3
38335: NEG
38336: PUSH
38337: LD_INT 2
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 3
38346: NEG
38347: PUSH
38348: LD_INT 3
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 3
38358: NEG
38359: PUSH
38360: LD_INT 4
38362: NEG
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 2
38370: NEG
38371: PUSH
38372: LD_INT 3
38374: NEG
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 2
38382: NEG
38383: PUSH
38384: LD_INT 2
38386: NEG
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 3
38394: NEG
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 4
38406: NEG
38407: PUSH
38408: LD_INT 3
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 4
38418: NEG
38419: PUSH
38420: LD_INT 4
38422: NEG
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 2
38430: NEG
38431: PUSH
38432: LD_INT 4
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 4
38442: NEG
38443: PUSH
38444: LD_INT 2
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: LD_INT 4
38457: NEG
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: LD_INT 5
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: LD_INT 4
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: PUSH
38488: LD_INT 3
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: LD_INT 3
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: LD_INT 4
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: LD_INT 5
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 2
38533: PUSH
38534: LD_INT 3
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 2
38544: NEG
38545: PUSH
38546: LD_INT 5
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38601: LD_ADDR_VAR 0 31
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: LD_INT 4
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: LD_INT 3
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: LD_INT 4
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: LD_INT 5
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: LD_INT 5
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: LD_INT 4
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 1
38669: NEG
38670: PUSH
38671: LD_INT 3
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 2
38680: PUSH
38681: LD_INT 5
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 2
38690: NEG
38691: PUSH
38692: LD_INT 3
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 3
38701: NEG
38702: PUSH
38703: LD_INT 0
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 3
38712: NEG
38713: PUSH
38714: LD_INT 1
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 2
38724: NEG
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 2
38735: NEG
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 3
38746: NEG
38747: PUSH
38748: LD_INT 1
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 4
38757: NEG
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 4
38768: NEG
38769: PUSH
38770: LD_INT 1
38772: NEG
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 4
38780: NEG
38781: PUSH
38782: LD_INT 2
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 2
38792: NEG
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 4
38803: NEG
38804: PUSH
38805: LD_INT 4
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 4
38815: NEG
38816: PUSH
38817: LD_INT 5
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 3
38827: NEG
38828: PUSH
38829: LD_INT 4
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 3
38839: NEG
38840: PUSH
38841: LD_INT 3
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 4
38851: NEG
38852: PUSH
38853: LD_INT 3
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 5
38863: NEG
38864: PUSH
38865: LD_INT 4
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 5
38875: NEG
38876: PUSH
38877: LD_INT 5
38879: NEG
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 3
38887: NEG
38888: PUSH
38889: LD_INT 5
38891: NEG
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 5
38899: NEG
38900: PUSH
38901: LD_INT 3
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: LD_INT 3
38914: NEG
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: LD_INT 4
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: LD_INT 3
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: LD_INT 2
38947: NEG
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: LD_INT 2
38958: NEG
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: LD_INT 3
38970: NEG
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 1
38978: NEG
38979: PUSH
38980: LD_INT 4
38982: NEG
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: LD_INT 2
38993: NEG
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 2
39001: NEG
39002: PUSH
39003: LD_INT 4
39005: NEG
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 4
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 4
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 5
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 5
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 4
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 3
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 3
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 3
39085: PUSH
39086: LD_INT 2
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 5
39096: PUSH
39097: LD_INT 2
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39151: LD_ADDR_VAR 0 32
39155: PUSH
39156: LD_INT 4
39158: NEG
39159: PUSH
39160: LD_INT 0
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 4
39169: NEG
39170: PUSH
39171: LD_INT 1
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 3
39181: NEG
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 3
39192: NEG
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 4
39203: NEG
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 5
39214: NEG
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 5
39225: NEG
39226: PUSH
39227: LD_INT 1
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 5
39237: NEG
39238: PUSH
39239: LD_INT 2
39241: NEG
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 3
39249: NEG
39250: PUSH
39251: LD_INT 2
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 3
39260: NEG
39261: PUSH
39262: LD_INT 3
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 3
39272: NEG
39273: PUSH
39274: LD_INT 4
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 2
39284: NEG
39285: PUSH
39286: LD_INT 3
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 2
39296: NEG
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 3
39308: NEG
39309: PUSH
39310: LD_INT 2
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 4
39320: NEG
39321: PUSH
39322: LD_INT 3
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 4
39332: NEG
39333: PUSH
39334: LD_INT 4
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 2
39344: NEG
39345: PUSH
39346: LD_INT 4
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 4
39356: NEG
39357: PUSH
39358: LD_INT 2
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: LD_INT 4
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: LD_INT 5
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: LD_INT 4
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: LD_INT 3
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: LD_INT 3
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: LD_INT 4
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: LD_INT 5
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: LD_INT 3
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 2
39458: NEG
39459: PUSH
39460: LD_INT 5
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 3
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 3
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 4
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 4
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 3
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 2
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 2
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: LD_INT 2
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 4
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 4
39563: PUSH
39564: LD_INT 4
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 4
39573: PUSH
39574: LD_INT 3
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 5
39583: PUSH
39584: LD_INT 4
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 5
39593: PUSH
39594: LD_INT 5
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 4
39603: PUSH
39604: LD_INT 5
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 3
39613: PUSH
39614: LD_INT 4
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 3
39623: PUSH
39624: LD_INT 3
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 5
39633: PUSH
39634: LD_INT 3
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 3
39643: PUSH
39644: LD_INT 5
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39698: LD_ADDR_VAR 0 33
39702: PUSH
39703: LD_INT 4
39705: NEG
39706: PUSH
39707: LD_INT 4
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 4
39717: NEG
39718: PUSH
39719: LD_INT 5
39721: NEG
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 3
39729: NEG
39730: PUSH
39731: LD_INT 4
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 3
39741: NEG
39742: PUSH
39743: LD_INT 3
39745: NEG
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 4
39753: NEG
39754: PUSH
39755: LD_INT 3
39757: NEG
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 5
39765: NEG
39766: PUSH
39767: LD_INT 4
39769: NEG
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 5
39777: NEG
39778: PUSH
39779: LD_INT 5
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 3
39789: NEG
39790: PUSH
39791: LD_INT 5
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 5
39801: NEG
39802: PUSH
39803: LD_INT 3
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: LD_INT 3
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: LD_INT 4
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: LD_INT 3
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: LD_INT 2
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: LD_INT 2
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: LD_INT 3
39872: NEG
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: LD_INT 4
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 2
39892: PUSH
39893: LD_INT 2
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 2
39903: NEG
39904: PUSH
39905: LD_INT 4
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 4
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 4
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 5
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 5
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 4
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 3
39966: PUSH
39967: LD_INT 0
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 3
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 3
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 5
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 3
40008: PUSH
40009: LD_INT 3
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 3
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 4
40028: PUSH
40029: LD_INT 3
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 4
40038: PUSH
40039: LD_INT 4
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 3
40048: PUSH
40049: LD_INT 4
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 2
40058: PUSH
40059: LD_INT 3
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 2
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 4
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: LD_INT 4
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: LD_INT 4
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: LD_INT 3
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: LD_INT 4
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: LD_INT 5
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: LD_INT 5
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: NEG
40149: PUSH
40150: LD_INT 4
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: LD_INT 3
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: PUSH
40171: LD_INT 5
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: NEG
40181: PUSH
40182: LD_INT 3
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40236: LD_ADDR_VAR 0 34
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: LD_INT 4
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: LD_INT 5
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: LD_INT 4
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: LD_INT 3
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: LD_INT 3
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: LD_INT 4
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 1
40310: NEG
40311: PUSH
40312: LD_INT 5
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 2
40322: PUSH
40323: LD_INT 3
40325: NEG
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 2
40333: NEG
40334: PUSH
40335: LD_INT 5
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 3
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 3
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 4
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 4
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 3
40386: PUSH
40387: LD_INT 1
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: LD_INT 1
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 2
40417: PUSH
40418: LD_INT 2
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 4
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 4
40438: PUSH
40439: LD_INT 4
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 4
40448: PUSH
40449: LD_INT 3
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 5
40458: PUSH
40459: LD_INT 4
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 5
40468: PUSH
40469: LD_INT 5
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 4
40478: PUSH
40479: LD_INT 5
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 3
40488: PUSH
40489: LD_INT 4
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 3
40498: PUSH
40499: LD_INT 3
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 5
40508: PUSH
40509: LD_INT 3
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 3
40518: PUSH
40519: LD_INT 5
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: LD_INT 3
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: LD_INT 2
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: PUSH
40549: LD_INT 3
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: LD_INT 4
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: LD_INT 4
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 1
40578: NEG
40579: PUSH
40580: LD_INT 3
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: NEG
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: LD_INT 4
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: NEG
40611: PUSH
40612: LD_INT 2
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 4
40621: NEG
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 4
40632: NEG
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 3
40644: NEG
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 3
40655: NEG
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 4
40666: NEG
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 5
40677: NEG
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 5
40688: NEG
40689: PUSH
40690: LD_INT 1
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 5
40700: NEG
40701: PUSH
40702: LD_INT 2
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 3
40712: NEG
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: ST_TO_ADDR
// end ; end ;
40768: GO 40771
40770: POP
// case btype of b_depot , b_warehouse :
40771: LD_VAR 0 1
40775: PUSH
40776: LD_INT 0
40778: DOUBLE
40779: EQUAL
40780: IFTRUE 40790
40782: LD_INT 1
40784: DOUBLE
40785: EQUAL
40786: IFTRUE 40790
40788: GO 40991
40790: POP
// case nation of nation_american :
40791: LD_VAR 0 5
40795: PUSH
40796: LD_INT 1
40798: DOUBLE
40799: EQUAL
40800: IFTRUE 40804
40802: GO 40860
40804: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
40805: LD_ADDR_VAR 0 9
40809: PUSH
40810: LD_VAR 0 11
40814: PUSH
40815: LD_VAR 0 12
40819: PUSH
40820: LD_VAR 0 13
40824: PUSH
40825: LD_VAR 0 14
40829: PUSH
40830: LD_VAR 0 15
40834: PUSH
40835: LD_VAR 0 16
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: PUSH
40848: LD_VAR 0 4
40852: PUSH
40853: LD_INT 1
40855: PLUS
40856: ARRAY
40857: ST_TO_ADDR
40858: GO 40989
40860: LD_INT 2
40862: DOUBLE
40863: EQUAL
40864: IFTRUE 40868
40866: GO 40924
40868: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
40869: LD_ADDR_VAR 0 9
40873: PUSH
40874: LD_VAR 0 17
40878: PUSH
40879: LD_VAR 0 18
40883: PUSH
40884: LD_VAR 0 19
40888: PUSH
40889: LD_VAR 0 20
40893: PUSH
40894: LD_VAR 0 21
40898: PUSH
40899: LD_VAR 0 22
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: PUSH
40912: LD_VAR 0 4
40916: PUSH
40917: LD_INT 1
40919: PLUS
40920: ARRAY
40921: ST_TO_ADDR
40922: GO 40989
40924: LD_INT 3
40926: DOUBLE
40927: EQUAL
40928: IFTRUE 40932
40930: GO 40988
40932: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
40933: LD_ADDR_VAR 0 9
40937: PUSH
40938: LD_VAR 0 23
40942: PUSH
40943: LD_VAR 0 24
40947: PUSH
40948: LD_VAR 0 25
40952: PUSH
40953: LD_VAR 0 26
40957: PUSH
40958: LD_VAR 0 27
40962: PUSH
40963: LD_VAR 0 28
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: PUSH
40976: LD_VAR 0 4
40980: PUSH
40981: LD_INT 1
40983: PLUS
40984: ARRAY
40985: ST_TO_ADDR
40986: GO 40989
40988: POP
40989: GO 41538
40991: LD_INT 2
40993: DOUBLE
40994: EQUAL
40995: IFTRUE 41005
40997: LD_INT 3
40999: DOUBLE
41000: EQUAL
41001: IFTRUE 41005
41003: GO 41061
41005: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41006: LD_ADDR_VAR 0 9
41010: PUSH
41011: LD_VAR 0 29
41015: PUSH
41016: LD_VAR 0 30
41020: PUSH
41021: LD_VAR 0 31
41025: PUSH
41026: LD_VAR 0 32
41030: PUSH
41031: LD_VAR 0 33
41035: PUSH
41036: LD_VAR 0 34
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: PUSH
41049: LD_VAR 0 4
41053: PUSH
41054: LD_INT 1
41056: PLUS
41057: ARRAY
41058: ST_TO_ADDR
41059: GO 41538
41061: LD_INT 16
41063: DOUBLE
41064: EQUAL
41065: IFTRUE 41117
41067: LD_INT 17
41069: DOUBLE
41070: EQUAL
41071: IFTRUE 41117
41073: LD_INT 18
41075: DOUBLE
41076: EQUAL
41077: IFTRUE 41117
41079: LD_INT 19
41081: DOUBLE
41082: EQUAL
41083: IFTRUE 41117
41085: LD_INT 20
41087: DOUBLE
41088: EQUAL
41089: IFTRUE 41117
41091: LD_INT 21
41093: DOUBLE
41094: EQUAL
41095: IFTRUE 41117
41097: LD_INT 23
41099: DOUBLE
41100: EQUAL
41101: IFTRUE 41117
41103: LD_INT 24
41105: DOUBLE
41106: EQUAL
41107: IFTRUE 41117
41109: LD_INT 25
41111: DOUBLE
41112: EQUAL
41113: IFTRUE 41117
41115: GO 41173
41117: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41118: LD_ADDR_VAR 0 9
41122: PUSH
41123: LD_VAR 0 35
41127: PUSH
41128: LD_VAR 0 36
41132: PUSH
41133: LD_VAR 0 37
41137: PUSH
41138: LD_VAR 0 38
41142: PUSH
41143: LD_VAR 0 39
41147: PUSH
41148: LD_VAR 0 40
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: PUSH
41161: LD_VAR 0 4
41165: PUSH
41166: LD_INT 1
41168: PLUS
41169: ARRAY
41170: ST_TO_ADDR
41171: GO 41538
41173: LD_INT 6
41175: DOUBLE
41176: EQUAL
41177: IFTRUE 41229
41179: LD_INT 7
41181: DOUBLE
41182: EQUAL
41183: IFTRUE 41229
41185: LD_INT 8
41187: DOUBLE
41188: EQUAL
41189: IFTRUE 41229
41191: LD_INT 13
41193: DOUBLE
41194: EQUAL
41195: IFTRUE 41229
41197: LD_INT 12
41199: DOUBLE
41200: EQUAL
41201: IFTRUE 41229
41203: LD_INT 15
41205: DOUBLE
41206: EQUAL
41207: IFTRUE 41229
41209: LD_INT 11
41211: DOUBLE
41212: EQUAL
41213: IFTRUE 41229
41215: LD_INT 14
41217: DOUBLE
41218: EQUAL
41219: IFTRUE 41229
41221: LD_INT 10
41223: DOUBLE
41224: EQUAL
41225: IFTRUE 41229
41227: GO 41285
41229: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
41230: LD_ADDR_VAR 0 9
41234: PUSH
41235: LD_VAR 0 41
41239: PUSH
41240: LD_VAR 0 42
41244: PUSH
41245: LD_VAR 0 43
41249: PUSH
41250: LD_VAR 0 44
41254: PUSH
41255: LD_VAR 0 45
41259: PUSH
41260: LD_VAR 0 46
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: PUSH
41273: LD_VAR 0 4
41277: PUSH
41278: LD_INT 1
41280: PLUS
41281: ARRAY
41282: ST_TO_ADDR
41283: GO 41538
41285: LD_INT 36
41287: DOUBLE
41288: EQUAL
41289: IFTRUE 41293
41291: GO 41349
41293: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41294: LD_ADDR_VAR 0 9
41298: PUSH
41299: LD_VAR 0 47
41303: PUSH
41304: LD_VAR 0 48
41308: PUSH
41309: LD_VAR 0 49
41313: PUSH
41314: LD_VAR 0 50
41318: PUSH
41319: LD_VAR 0 51
41323: PUSH
41324: LD_VAR 0 52
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: PUSH
41337: LD_VAR 0 4
41341: PUSH
41342: LD_INT 1
41344: PLUS
41345: ARRAY
41346: ST_TO_ADDR
41347: GO 41538
41349: LD_INT 4
41351: DOUBLE
41352: EQUAL
41353: IFTRUE 41375
41355: LD_INT 5
41357: DOUBLE
41358: EQUAL
41359: IFTRUE 41375
41361: LD_INT 34
41363: DOUBLE
41364: EQUAL
41365: IFTRUE 41375
41367: LD_INT 37
41369: DOUBLE
41370: EQUAL
41371: IFTRUE 41375
41373: GO 41431
41375: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41376: LD_ADDR_VAR 0 9
41380: PUSH
41381: LD_VAR 0 53
41385: PUSH
41386: LD_VAR 0 54
41390: PUSH
41391: LD_VAR 0 55
41395: PUSH
41396: LD_VAR 0 56
41400: PUSH
41401: LD_VAR 0 57
41405: PUSH
41406: LD_VAR 0 58
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: PUSH
41419: LD_VAR 0 4
41423: PUSH
41424: LD_INT 1
41426: PLUS
41427: ARRAY
41428: ST_TO_ADDR
41429: GO 41538
41431: LD_INT 31
41433: DOUBLE
41434: EQUAL
41435: IFTRUE 41481
41437: LD_INT 32
41439: DOUBLE
41440: EQUAL
41441: IFTRUE 41481
41443: LD_INT 33
41445: DOUBLE
41446: EQUAL
41447: IFTRUE 41481
41449: LD_INT 27
41451: DOUBLE
41452: EQUAL
41453: IFTRUE 41481
41455: LD_INT 26
41457: DOUBLE
41458: EQUAL
41459: IFTRUE 41481
41461: LD_INT 28
41463: DOUBLE
41464: EQUAL
41465: IFTRUE 41481
41467: LD_INT 29
41469: DOUBLE
41470: EQUAL
41471: IFTRUE 41481
41473: LD_INT 30
41475: DOUBLE
41476: EQUAL
41477: IFTRUE 41481
41479: GO 41537
41481: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
41482: LD_ADDR_VAR 0 9
41486: PUSH
41487: LD_VAR 0 59
41491: PUSH
41492: LD_VAR 0 60
41496: PUSH
41497: LD_VAR 0 61
41501: PUSH
41502: LD_VAR 0 62
41506: PUSH
41507: LD_VAR 0 63
41511: PUSH
41512: LD_VAR 0 64
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: PUSH
41525: LD_VAR 0 4
41529: PUSH
41530: LD_INT 1
41532: PLUS
41533: ARRAY
41534: ST_TO_ADDR
41535: GO 41538
41537: POP
// temp_list2 = [ ] ;
41538: LD_ADDR_VAR 0 10
41542: PUSH
41543: EMPTY
41544: ST_TO_ADDR
// for i in temp_list do
41545: LD_ADDR_VAR 0 8
41549: PUSH
41550: LD_VAR 0 9
41554: PUSH
41555: FOR_IN
41556: IFFALSE 41608
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41558: LD_ADDR_VAR 0 10
41562: PUSH
41563: LD_VAR 0 10
41567: PUSH
41568: LD_VAR 0 8
41572: PUSH
41573: LD_INT 1
41575: ARRAY
41576: PUSH
41577: LD_VAR 0 2
41581: PLUS
41582: PUSH
41583: LD_VAR 0 8
41587: PUSH
41588: LD_INT 2
41590: ARRAY
41591: PUSH
41592: LD_VAR 0 3
41596: PLUS
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: EMPTY
41603: LIST
41604: ADD
41605: ST_TO_ADDR
41606: GO 41555
41608: POP
41609: POP
// result = temp_list2 ;
41610: LD_ADDR_VAR 0 7
41614: PUSH
41615: LD_VAR 0 10
41619: ST_TO_ADDR
// end ;
41620: LD_VAR 0 7
41624: RET
// export function EnemyInRange ( unit , dist ) ; begin
41625: LD_INT 0
41627: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41628: LD_ADDR_VAR 0 3
41632: PUSH
41633: LD_VAR 0 1
41637: PPUSH
41638: CALL_OW 255
41642: PPUSH
41643: LD_VAR 0 1
41647: PPUSH
41648: CALL_OW 250
41652: PPUSH
41653: LD_VAR 0 1
41657: PPUSH
41658: CALL_OW 251
41662: PPUSH
41663: LD_VAR 0 2
41667: PPUSH
41668: CALL 16292 0 4
41672: PUSH
41673: LD_INT 4
41675: ARRAY
41676: ST_TO_ADDR
// end ;
41677: LD_VAR 0 3
41681: RET
// export function PlayerSeeMe ( unit ) ; begin
41682: LD_INT 0
41684: PPUSH
// result := See ( your_side , unit ) ;
41685: LD_ADDR_VAR 0 2
41689: PUSH
41690: LD_OWVAR 2
41694: PPUSH
41695: LD_VAR 0 1
41699: PPUSH
41700: CALL_OW 292
41704: ST_TO_ADDR
// end ;
41705: LD_VAR 0 2
41709: RET
// export function ReverseDir ( unit ) ; begin
41710: LD_INT 0
41712: PPUSH
// if not unit then
41713: LD_VAR 0 1
41717: NOT
41718: IFFALSE 41722
// exit ;
41720: GO 41768
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
41722: LD_ADDR_VAR 0 2
41726: PUSH
41727: LD_INT 3
41729: PUSH
41730: LD_INT 4
41732: PUSH
41733: LD_INT 5
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: LD_INT 1
41741: PUSH
41742: LD_INT 2
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: PUSH
41753: LD_VAR 0 1
41757: PPUSH
41758: CALL_OW 254
41762: PUSH
41763: LD_INT 1
41765: PLUS
41766: ARRAY
41767: ST_TO_ADDR
// end ;
41768: LD_VAR 0 2
41772: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
41773: LD_INT 0
41775: PPUSH
41776: PPUSH
41777: PPUSH
41778: PPUSH
41779: PPUSH
// if not hexes then
41780: LD_VAR 0 2
41784: NOT
41785: IFFALSE 41789
// exit ;
41787: GO 41937
// dist := 9999 ;
41789: LD_ADDR_VAR 0 5
41793: PUSH
41794: LD_INT 9999
41796: ST_TO_ADDR
// for i = 1 to hexes do
41797: LD_ADDR_VAR 0 4
41801: PUSH
41802: DOUBLE
41803: LD_INT 1
41805: DEC
41806: ST_TO_ADDR
41807: LD_VAR 0 2
41811: PUSH
41812: FOR_TO
41813: IFFALSE 41925
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
41815: LD_VAR 0 1
41819: PPUSH
41820: LD_VAR 0 2
41824: PUSH
41825: LD_VAR 0 4
41829: ARRAY
41830: PUSH
41831: LD_INT 1
41833: ARRAY
41834: PPUSH
41835: LD_VAR 0 2
41839: PUSH
41840: LD_VAR 0 4
41844: ARRAY
41845: PUSH
41846: LD_INT 2
41848: ARRAY
41849: PPUSH
41850: CALL_OW 297
41854: PUSH
41855: LD_VAR 0 5
41859: LESS
41860: IFFALSE 41923
// begin hex := hexes [ i ] ;
41862: LD_ADDR_VAR 0 7
41866: PUSH
41867: LD_VAR 0 2
41871: PUSH
41872: LD_VAR 0 4
41876: ARRAY
41877: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41878: LD_ADDR_VAR 0 5
41882: PUSH
41883: LD_VAR 0 1
41887: PPUSH
41888: LD_VAR 0 2
41892: PUSH
41893: LD_VAR 0 4
41897: ARRAY
41898: PUSH
41899: LD_INT 1
41901: ARRAY
41902: PPUSH
41903: LD_VAR 0 2
41907: PUSH
41908: LD_VAR 0 4
41912: ARRAY
41913: PUSH
41914: LD_INT 2
41916: ARRAY
41917: PPUSH
41918: CALL_OW 297
41922: ST_TO_ADDR
// end ; end ;
41923: GO 41812
41925: POP
41926: POP
// result := hex ;
41927: LD_ADDR_VAR 0 3
41931: PUSH
41932: LD_VAR 0 7
41936: ST_TO_ADDR
// end ;
41937: LD_VAR 0 3
41941: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
41942: LD_INT 0
41944: PPUSH
41945: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
41946: LD_VAR 0 1
41950: NOT
41951: PUSH
41952: LD_VAR 0 1
41956: PUSH
41957: LD_INT 21
41959: PUSH
41960: LD_INT 2
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 23
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PPUSH
41981: CALL_OW 69
41985: IN
41986: NOT
41987: OR
41988: IFFALSE 41992
// exit ;
41990: GO 42039
// for i = 1 to 3 do
41992: LD_ADDR_VAR 0 3
41996: PUSH
41997: DOUBLE
41998: LD_INT 1
42000: DEC
42001: ST_TO_ADDR
42002: LD_INT 3
42004: PUSH
42005: FOR_TO
42006: IFFALSE 42037
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42008: LD_VAR 0 1
42012: PPUSH
42013: CALL_OW 250
42017: PPUSH
42018: LD_VAR 0 1
42022: PPUSH
42023: CALL_OW 251
42027: PPUSH
42028: LD_INT 1
42030: PPUSH
42031: CALL_OW 453
42035: GO 42005
42037: POP
42038: POP
// end ;
42039: LD_VAR 0 2
42043: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42044: LD_INT 0
42046: PPUSH
42047: PPUSH
42048: PPUSH
42049: PPUSH
42050: PPUSH
42051: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
42052: LD_VAR 0 1
42056: NOT
42057: PUSH
42058: LD_VAR 0 2
42062: NOT
42063: OR
42064: PUSH
42065: LD_VAR 0 1
42069: PPUSH
42070: CALL_OW 314
42074: OR
42075: IFFALSE 42079
// exit ;
42077: GO 42520
// x := GetX ( enemy_unit ) ;
42079: LD_ADDR_VAR 0 7
42083: PUSH
42084: LD_VAR 0 2
42088: PPUSH
42089: CALL_OW 250
42093: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42094: LD_ADDR_VAR 0 8
42098: PUSH
42099: LD_VAR 0 2
42103: PPUSH
42104: CALL_OW 251
42108: ST_TO_ADDR
// if not x or not y then
42109: LD_VAR 0 7
42113: NOT
42114: PUSH
42115: LD_VAR 0 8
42119: NOT
42120: OR
42121: IFFALSE 42125
// exit ;
42123: GO 42520
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42125: LD_ADDR_VAR 0 6
42129: PUSH
42130: LD_VAR 0 7
42134: PPUSH
42135: LD_INT 0
42137: PPUSH
42138: LD_INT 4
42140: PPUSH
42141: CALL_OW 272
42145: PUSH
42146: LD_VAR 0 8
42150: PPUSH
42151: LD_INT 0
42153: PPUSH
42154: LD_INT 4
42156: PPUSH
42157: CALL_OW 273
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_VAR 0 7
42170: PPUSH
42171: LD_INT 1
42173: PPUSH
42174: LD_INT 4
42176: PPUSH
42177: CALL_OW 272
42181: PUSH
42182: LD_VAR 0 8
42186: PPUSH
42187: LD_INT 1
42189: PPUSH
42190: LD_INT 4
42192: PPUSH
42193: CALL_OW 273
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_VAR 0 7
42206: PPUSH
42207: LD_INT 2
42209: PPUSH
42210: LD_INT 4
42212: PPUSH
42213: CALL_OW 272
42217: PUSH
42218: LD_VAR 0 8
42222: PPUSH
42223: LD_INT 2
42225: PPUSH
42226: LD_INT 4
42228: PPUSH
42229: CALL_OW 273
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_VAR 0 7
42242: PPUSH
42243: LD_INT 3
42245: PPUSH
42246: LD_INT 4
42248: PPUSH
42249: CALL_OW 272
42253: PUSH
42254: LD_VAR 0 8
42258: PPUSH
42259: LD_INT 3
42261: PPUSH
42262: LD_INT 4
42264: PPUSH
42265: CALL_OW 273
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_VAR 0 7
42278: PPUSH
42279: LD_INT 4
42281: PPUSH
42282: LD_INT 4
42284: PPUSH
42285: CALL_OW 272
42289: PUSH
42290: LD_VAR 0 8
42294: PPUSH
42295: LD_INT 4
42297: PPUSH
42298: LD_INT 4
42300: PPUSH
42301: CALL_OW 273
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_VAR 0 7
42314: PPUSH
42315: LD_INT 5
42317: PPUSH
42318: LD_INT 4
42320: PPUSH
42321: CALL_OW 272
42325: PUSH
42326: LD_VAR 0 8
42330: PPUSH
42331: LD_INT 5
42333: PPUSH
42334: LD_INT 4
42336: PPUSH
42337: CALL_OW 273
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: ST_TO_ADDR
// for i = tmp downto 1 do
42354: LD_ADDR_VAR 0 4
42358: PUSH
42359: DOUBLE
42360: LD_VAR 0 6
42364: INC
42365: ST_TO_ADDR
42366: LD_INT 1
42368: PUSH
42369: FOR_DOWNTO
42370: IFFALSE 42471
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42372: LD_VAR 0 6
42376: PUSH
42377: LD_VAR 0 4
42381: ARRAY
42382: PUSH
42383: LD_INT 1
42385: ARRAY
42386: PPUSH
42387: LD_VAR 0 6
42391: PUSH
42392: LD_VAR 0 4
42396: ARRAY
42397: PUSH
42398: LD_INT 2
42400: ARRAY
42401: PPUSH
42402: CALL_OW 488
42406: NOT
42407: PUSH
42408: LD_VAR 0 6
42412: PUSH
42413: LD_VAR 0 4
42417: ARRAY
42418: PUSH
42419: LD_INT 1
42421: ARRAY
42422: PPUSH
42423: LD_VAR 0 6
42427: PUSH
42428: LD_VAR 0 4
42432: ARRAY
42433: PUSH
42434: LD_INT 2
42436: ARRAY
42437: PPUSH
42438: CALL_OW 428
42442: PUSH
42443: LD_INT 0
42445: NONEQUAL
42446: OR
42447: IFFALSE 42469
// tmp := Delete ( tmp , i ) ;
42449: LD_ADDR_VAR 0 6
42453: PUSH
42454: LD_VAR 0 6
42458: PPUSH
42459: LD_VAR 0 4
42463: PPUSH
42464: CALL_OW 3
42468: ST_TO_ADDR
42469: GO 42369
42471: POP
42472: POP
// j := GetClosestHex ( unit , tmp ) ;
42473: LD_ADDR_VAR 0 5
42477: PUSH
42478: LD_VAR 0 1
42482: PPUSH
42483: LD_VAR 0 6
42487: PPUSH
42488: CALL 41773 0 2
42492: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42493: LD_VAR 0 1
42497: PPUSH
42498: LD_VAR 0 5
42502: PUSH
42503: LD_INT 1
42505: ARRAY
42506: PPUSH
42507: LD_VAR 0 5
42511: PUSH
42512: LD_INT 2
42514: ARRAY
42515: PPUSH
42516: CALL_OW 111
// end ;
42520: LD_VAR 0 3
42524: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
42525: LD_INT 0
42527: PPUSH
42528: PPUSH
42529: PPUSH
// uc_side = 0 ;
42530: LD_ADDR_OWVAR 20
42534: PUSH
42535: LD_INT 0
42537: ST_TO_ADDR
// uc_nation = 0 ;
42538: LD_ADDR_OWVAR 21
42542: PUSH
42543: LD_INT 0
42545: ST_TO_ADDR
// InitHc ;
42546: CALL_OW 19
// InitVc ;
42550: CALL_OW 20
// if mastodonts then
42554: LD_VAR 0 6
42558: IFFALSE 42625
// for i = 1 to mastodonts do
42560: LD_ADDR_VAR 0 11
42564: PUSH
42565: DOUBLE
42566: LD_INT 1
42568: DEC
42569: ST_TO_ADDR
42570: LD_VAR 0 6
42574: PUSH
42575: FOR_TO
42576: IFFALSE 42623
// begin vc_chassis := 31 ;
42578: LD_ADDR_OWVAR 37
42582: PUSH
42583: LD_INT 31
42585: ST_TO_ADDR
// vc_control := control_rider ;
42586: LD_ADDR_OWVAR 38
42590: PUSH
42591: LD_INT 4
42593: ST_TO_ADDR
// animal := CreateVehicle ;
42594: LD_ADDR_VAR 0 12
42598: PUSH
42599: CALL_OW 45
42603: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
42604: LD_VAR 0 12
42608: PPUSH
42609: LD_VAR 0 8
42613: PPUSH
42614: LD_INT 0
42616: PPUSH
42617: CALL_OW 49
// end ;
42621: GO 42575
42623: POP
42624: POP
// if horses then
42625: LD_VAR 0 5
42629: IFFALSE 42696
// for i = 1 to horses do
42631: LD_ADDR_VAR 0 11
42635: PUSH
42636: DOUBLE
42637: LD_INT 1
42639: DEC
42640: ST_TO_ADDR
42641: LD_VAR 0 5
42645: PUSH
42646: FOR_TO
42647: IFFALSE 42694
// begin hc_class := 21 ;
42649: LD_ADDR_OWVAR 28
42653: PUSH
42654: LD_INT 21
42656: ST_TO_ADDR
// hc_gallery :=  ;
42657: LD_ADDR_OWVAR 33
42661: PUSH
42662: LD_STRING 
42664: ST_TO_ADDR
// animal := CreateHuman ;
42665: LD_ADDR_VAR 0 12
42669: PUSH
42670: CALL_OW 44
42674: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
42675: LD_VAR 0 12
42679: PPUSH
42680: LD_VAR 0 8
42684: PPUSH
42685: LD_INT 0
42687: PPUSH
42688: CALL_OW 49
// end ;
42692: GO 42646
42694: POP
42695: POP
// if birds then
42696: LD_VAR 0 1
42700: IFFALSE 42767
// for i = 1 to birds do
42702: LD_ADDR_VAR 0 11
42706: PUSH
42707: DOUBLE
42708: LD_INT 1
42710: DEC
42711: ST_TO_ADDR
42712: LD_VAR 0 1
42716: PUSH
42717: FOR_TO
42718: IFFALSE 42765
// begin hc_class = 18 ;
42720: LD_ADDR_OWVAR 28
42724: PUSH
42725: LD_INT 18
42727: ST_TO_ADDR
// hc_gallery =  ;
42728: LD_ADDR_OWVAR 33
42732: PUSH
42733: LD_STRING 
42735: ST_TO_ADDR
// animal := CreateHuman ;
42736: LD_ADDR_VAR 0 12
42740: PUSH
42741: CALL_OW 44
42745: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
42746: LD_VAR 0 12
42750: PPUSH
42751: LD_VAR 0 8
42755: PPUSH
42756: LD_INT 0
42758: PPUSH
42759: CALL_OW 49
// end ;
42763: GO 42717
42765: POP
42766: POP
// if tigers then
42767: LD_VAR 0 2
42771: IFFALSE 42855
// for i = 1 to tigers do
42773: LD_ADDR_VAR 0 11
42777: PUSH
42778: DOUBLE
42779: LD_INT 1
42781: DEC
42782: ST_TO_ADDR
42783: LD_VAR 0 2
42787: PUSH
42788: FOR_TO
42789: IFFALSE 42853
// begin hc_class = class_tiger ;
42791: LD_ADDR_OWVAR 28
42795: PUSH
42796: LD_INT 14
42798: ST_TO_ADDR
// hc_gallery =  ;
42799: LD_ADDR_OWVAR 33
42803: PUSH
42804: LD_STRING 
42806: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
42807: LD_ADDR_OWVAR 35
42811: PUSH
42812: LD_INT 7
42814: NEG
42815: PPUSH
42816: LD_INT 7
42818: PPUSH
42819: CALL_OW 12
42823: ST_TO_ADDR
// animal := CreateHuman ;
42824: LD_ADDR_VAR 0 12
42828: PUSH
42829: CALL_OW 44
42833: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
42834: LD_VAR 0 12
42838: PPUSH
42839: LD_VAR 0 8
42843: PPUSH
42844: LD_INT 0
42846: PPUSH
42847: CALL_OW 49
// end ;
42851: GO 42788
42853: POP
42854: POP
// if apemans then
42855: LD_VAR 0 3
42859: IFFALSE 42982
// for i = 1 to apemans do
42861: LD_ADDR_VAR 0 11
42865: PUSH
42866: DOUBLE
42867: LD_INT 1
42869: DEC
42870: ST_TO_ADDR
42871: LD_VAR 0 3
42875: PUSH
42876: FOR_TO
42877: IFFALSE 42980
// begin hc_class = class_apeman ;
42879: LD_ADDR_OWVAR 28
42883: PUSH
42884: LD_INT 12
42886: ST_TO_ADDR
// hc_gallery =  ;
42887: LD_ADDR_OWVAR 33
42891: PUSH
42892: LD_STRING 
42894: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
42895: LD_ADDR_OWVAR 35
42899: PUSH
42900: LD_INT 5
42902: NEG
42903: PPUSH
42904: LD_INT 5
42906: PPUSH
42907: CALL_OW 12
42911: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
42912: LD_ADDR_OWVAR 31
42916: PUSH
42917: LD_INT 1
42919: PPUSH
42920: LD_INT 3
42922: PPUSH
42923: CALL_OW 12
42927: PUSH
42928: LD_INT 1
42930: PPUSH
42931: LD_INT 3
42933: PPUSH
42934: CALL_OW 12
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: ST_TO_ADDR
// animal := CreateHuman ;
42951: LD_ADDR_VAR 0 12
42955: PUSH
42956: CALL_OW 44
42960: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
42961: LD_VAR 0 12
42965: PPUSH
42966: LD_VAR 0 8
42970: PPUSH
42971: LD_INT 0
42973: PPUSH
42974: CALL_OW 49
// end ;
42978: GO 42876
42980: POP
42981: POP
// if enchidnas then
42982: LD_VAR 0 4
42986: IFFALSE 43053
// for i = 1 to enchidnas do
42988: LD_ADDR_VAR 0 11
42992: PUSH
42993: DOUBLE
42994: LD_INT 1
42996: DEC
42997: ST_TO_ADDR
42998: LD_VAR 0 4
43002: PUSH
43003: FOR_TO
43004: IFFALSE 43051
// begin hc_class = 13 ;
43006: LD_ADDR_OWVAR 28
43010: PUSH
43011: LD_INT 13
43013: ST_TO_ADDR
// hc_gallery =  ;
43014: LD_ADDR_OWVAR 33
43018: PUSH
43019: LD_STRING 
43021: ST_TO_ADDR
// animal := CreateHuman ;
43022: LD_ADDR_VAR 0 12
43026: PUSH
43027: CALL_OW 44
43031: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
43032: LD_VAR 0 12
43036: PPUSH
43037: LD_VAR 0 8
43041: PPUSH
43042: LD_INT 0
43044: PPUSH
43045: CALL_OW 49
// end ;
43049: GO 43003
43051: POP
43052: POP
// if not wat_area then
43053: LD_VAR 0 9
43057: NOT
43058: IFFALSE 43062
// exit ;
43060: GO 43133
// if fishes then
43062: LD_VAR 0 7
43066: IFFALSE 43133
// for i = 1 to fishes do
43068: LD_ADDR_VAR 0 11
43072: PUSH
43073: DOUBLE
43074: LD_INT 1
43076: DEC
43077: ST_TO_ADDR
43078: LD_VAR 0 7
43082: PUSH
43083: FOR_TO
43084: IFFALSE 43131
// begin hc_class = 20 ;
43086: LD_ADDR_OWVAR 28
43090: PUSH
43091: LD_INT 20
43093: ST_TO_ADDR
// hc_gallery =  ;
43094: LD_ADDR_OWVAR 33
43098: PUSH
43099: LD_STRING 
43101: ST_TO_ADDR
// animal := CreateHuman ;
43102: LD_ADDR_VAR 0 12
43106: PUSH
43107: CALL_OW 44
43111: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
43112: LD_VAR 0 12
43116: PPUSH
43117: LD_VAR 0 9
43121: PPUSH
43122: LD_INT 0
43124: PPUSH
43125: CALL_OW 49
// end ;
43129: GO 43083
43131: POP
43132: POP
// end ;
43133: LD_VAR 0 10
43137: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
43138: LD_INT 0
43140: PPUSH
43141: PPUSH
43142: PPUSH
43143: PPUSH
43144: PPUSH
43145: PPUSH
43146: PPUSH
43147: PPUSH
43148: PPUSH
43149: PPUSH
43150: PPUSH
43151: PPUSH
43152: PPUSH
43153: PPUSH
43154: PPUSH
43155: PPUSH
43156: PPUSH
43157: PPUSH
43158: PPUSH
43159: PPUSH
43160: PPUSH
43161: PPUSH
43162: PPUSH
43163: PPUSH
43164: PPUSH
43165: PPUSH
43166: PPUSH
43167: PPUSH
// if not list then
43168: LD_VAR 0 1
43172: NOT
43173: IFFALSE 43177
// exit ;
43175: GO 46420
// base := list [ 1 ] ;
43177: LD_ADDR_VAR 0 3
43181: PUSH
43182: LD_VAR 0 1
43186: PUSH
43187: LD_INT 1
43189: ARRAY
43190: ST_TO_ADDR
// group := list [ 2 ] ;
43191: LD_ADDR_VAR 0 4
43195: PUSH
43196: LD_VAR 0 1
43200: PUSH
43201: LD_INT 2
43203: ARRAY
43204: ST_TO_ADDR
// path := list [ 3 ] ;
43205: LD_ADDR_VAR 0 5
43209: PUSH
43210: LD_VAR 0 1
43214: PUSH
43215: LD_INT 3
43217: ARRAY
43218: ST_TO_ADDR
// flags := list [ 4 ] ;
43219: LD_ADDR_VAR 0 6
43223: PUSH
43224: LD_VAR 0 1
43228: PUSH
43229: LD_INT 4
43231: ARRAY
43232: ST_TO_ADDR
// mined := [ ] ;
43233: LD_ADDR_VAR 0 27
43237: PUSH
43238: EMPTY
43239: ST_TO_ADDR
// bombed := [ ] ;
43240: LD_ADDR_VAR 0 28
43244: PUSH
43245: EMPTY
43246: ST_TO_ADDR
// if not group or not path then
43247: LD_VAR 0 4
43251: NOT
43252: PUSH
43253: LD_VAR 0 5
43257: NOT
43258: OR
43259: IFFALSE 43263
// exit ;
43261: GO 46420
// if flags then
43263: LD_VAR 0 6
43267: IFFALSE 43411
// begin f_ignore_area := flags [ 1 ] ;
43269: LD_ADDR_VAR 0 17
43273: PUSH
43274: LD_VAR 0 6
43278: PUSH
43279: LD_INT 1
43281: ARRAY
43282: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
43283: LD_ADDR_VAR 0 18
43287: PUSH
43288: LD_VAR 0 6
43292: PUSH
43293: LD_INT 2
43295: ARRAY
43296: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
43297: LD_ADDR_VAR 0 19
43301: PUSH
43302: LD_VAR 0 6
43306: PUSH
43307: LD_INT 3
43309: ARRAY
43310: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
43311: LD_ADDR_VAR 0 20
43315: PUSH
43316: LD_VAR 0 6
43320: PUSH
43321: LD_INT 4
43323: ARRAY
43324: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
43325: LD_ADDR_VAR 0 21
43329: PUSH
43330: LD_VAR 0 6
43334: PUSH
43335: LD_INT 5
43337: ARRAY
43338: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
43339: LD_ADDR_VAR 0 22
43343: PUSH
43344: LD_VAR 0 6
43348: PUSH
43349: LD_INT 6
43351: ARRAY
43352: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
43353: LD_ADDR_VAR 0 23
43357: PUSH
43358: LD_VAR 0 6
43362: PUSH
43363: LD_INT 7
43365: ARRAY
43366: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
43367: LD_ADDR_VAR 0 24
43371: PUSH
43372: LD_VAR 0 6
43376: PUSH
43377: LD_INT 8
43379: ARRAY
43380: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
43381: LD_ADDR_VAR 0 25
43385: PUSH
43386: LD_VAR 0 6
43390: PUSH
43391: LD_INT 9
43393: ARRAY
43394: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
43395: LD_ADDR_VAR 0 26
43399: PUSH
43400: LD_VAR 0 6
43404: PUSH
43405: LD_INT 10
43407: ARRAY
43408: ST_TO_ADDR
// end else
43409: GO 43491
// begin f_ignore_area := false ;
43411: LD_ADDR_VAR 0 17
43415: PUSH
43416: LD_INT 0
43418: ST_TO_ADDR
// f_capture := false ;
43419: LD_ADDR_VAR 0 18
43423: PUSH
43424: LD_INT 0
43426: ST_TO_ADDR
// f_ignore_civ := false ;
43427: LD_ADDR_VAR 0 19
43431: PUSH
43432: LD_INT 0
43434: ST_TO_ADDR
// f_murder := false ;
43435: LD_ADDR_VAR 0 20
43439: PUSH
43440: LD_INT 0
43442: ST_TO_ADDR
// f_mines := false ;
43443: LD_ADDR_VAR 0 21
43447: PUSH
43448: LD_INT 0
43450: ST_TO_ADDR
// f_repair := false ;
43451: LD_ADDR_VAR 0 22
43455: PUSH
43456: LD_INT 0
43458: ST_TO_ADDR
// f_heal := false ;
43459: LD_ADDR_VAR 0 23
43463: PUSH
43464: LD_INT 0
43466: ST_TO_ADDR
// f_spacetime := false ;
43467: LD_ADDR_VAR 0 24
43471: PUSH
43472: LD_INT 0
43474: ST_TO_ADDR
// f_attack_depot := false ;
43475: LD_ADDR_VAR 0 25
43479: PUSH
43480: LD_INT 0
43482: ST_TO_ADDR
// f_crawl := false ;
43483: LD_ADDR_VAR 0 26
43487: PUSH
43488: LD_INT 0
43490: ST_TO_ADDR
// end ; units_path := [ ] ;
43491: LD_ADDR_VAR 0 16
43495: PUSH
43496: EMPTY
43497: ST_TO_ADDR
// for i = 1 to group do
43498: LD_ADDR_VAR 0 7
43502: PUSH
43503: DOUBLE
43504: LD_INT 1
43506: DEC
43507: ST_TO_ADDR
43508: LD_VAR 0 4
43512: PUSH
43513: FOR_TO
43514: IFFALSE 43543
// begin units_path := Replace ( units_path , i , path ) ;
43516: LD_ADDR_VAR 0 16
43520: PUSH
43521: LD_VAR 0 16
43525: PPUSH
43526: LD_VAR 0 7
43530: PPUSH
43531: LD_VAR 0 5
43535: PPUSH
43536: CALL_OW 1
43540: ST_TO_ADDR
// end ;
43541: GO 43513
43543: POP
43544: POP
// repeat for i = group downto 1 do
43545: LD_ADDR_VAR 0 7
43549: PUSH
43550: DOUBLE
43551: LD_VAR 0 4
43555: INC
43556: ST_TO_ADDR
43557: LD_INT 1
43559: PUSH
43560: FOR_DOWNTO
43561: IFFALSE 46402
// begin wait ( 0 0$1 ) ;
43563: LD_INT 35
43565: PPUSH
43566: CALL_OW 67
// tmp := [ ] ;
43570: LD_ADDR_VAR 0 14
43574: PUSH
43575: EMPTY
43576: ST_TO_ADDR
// attacking := false ;
43577: LD_ADDR_VAR 0 29
43581: PUSH
43582: LD_INT 0
43584: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
43585: LD_VAR 0 4
43589: PUSH
43590: LD_VAR 0 7
43594: ARRAY
43595: PPUSH
43596: CALL_OW 301
43600: PUSH
43601: LD_VAR 0 4
43605: PUSH
43606: LD_VAR 0 7
43610: ARRAY
43611: NOT
43612: OR
43613: IFFALSE 43657
// begin group := Delete ( group , i ) ;
43615: LD_ADDR_VAR 0 4
43619: PUSH
43620: LD_VAR 0 4
43624: PPUSH
43625: LD_VAR 0 7
43629: PPUSH
43630: CALL_OW 3
43634: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
43635: LD_ADDR_VAR 0 16
43639: PUSH
43640: LD_VAR 0 16
43644: PPUSH
43645: LD_VAR 0 7
43649: PPUSH
43650: CALL_OW 3
43654: ST_TO_ADDR
// continue ;
43655: GO 43560
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
43657: LD_VAR 0 4
43661: PUSH
43662: LD_VAR 0 7
43666: ARRAY
43667: PPUSH
43668: LD_INT 10
43670: PPUSH
43671: CALL 41625 0 2
43675: NOT
43676: PUSH
43677: LD_VAR 0 16
43681: PUSH
43682: LD_VAR 0 7
43686: ARRAY
43687: PUSH
43688: EMPTY
43689: EQUAL
43690: NOT
43691: AND
43692: IFFALSE 43958
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
43694: LD_VAR 0 4
43698: PUSH
43699: LD_VAR 0 7
43703: ARRAY
43704: PPUSH
43705: CALL_OW 262
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: IN
43720: IFFALSE 43761
// if GetFuel ( group [ i ] ) < 10 then
43722: LD_VAR 0 4
43726: PUSH
43727: LD_VAR 0 7
43731: ARRAY
43732: PPUSH
43733: CALL_OW 261
43737: PUSH
43738: LD_INT 10
43740: LESS
43741: IFFALSE 43761
// SetFuel ( group [ i ] , 12 ) ;
43743: LD_VAR 0 4
43747: PUSH
43748: LD_VAR 0 7
43752: ARRAY
43753: PPUSH
43754: LD_INT 12
43756: PPUSH
43757: CALL_OW 240
// if units_path [ i ] then
43761: LD_VAR 0 16
43765: PUSH
43766: LD_VAR 0 7
43770: ARRAY
43771: IFFALSE 43956
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
43773: LD_VAR 0 4
43777: PUSH
43778: LD_VAR 0 7
43782: ARRAY
43783: PPUSH
43784: LD_VAR 0 16
43788: PUSH
43789: LD_VAR 0 7
43793: ARRAY
43794: PUSH
43795: LD_INT 1
43797: ARRAY
43798: PUSH
43799: LD_INT 1
43801: ARRAY
43802: PPUSH
43803: LD_VAR 0 16
43807: PUSH
43808: LD_VAR 0 7
43812: ARRAY
43813: PUSH
43814: LD_INT 1
43816: ARRAY
43817: PUSH
43818: LD_INT 2
43820: ARRAY
43821: PPUSH
43822: CALL_OW 297
43826: PUSH
43827: LD_INT 6
43829: GREATER
43830: IFFALSE 43905
// begin if not HasTask ( group [ i ] ) then
43832: LD_VAR 0 4
43836: PUSH
43837: LD_VAR 0 7
43841: ARRAY
43842: PPUSH
43843: CALL_OW 314
43847: NOT
43848: IFFALSE 43903
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
43850: LD_VAR 0 4
43854: PUSH
43855: LD_VAR 0 7
43859: ARRAY
43860: PPUSH
43861: LD_VAR 0 16
43865: PUSH
43866: LD_VAR 0 7
43870: ARRAY
43871: PUSH
43872: LD_INT 1
43874: ARRAY
43875: PUSH
43876: LD_INT 1
43878: ARRAY
43879: PPUSH
43880: LD_VAR 0 16
43884: PUSH
43885: LD_VAR 0 7
43889: ARRAY
43890: PUSH
43891: LD_INT 1
43893: ARRAY
43894: PUSH
43895: LD_INT 2
43897: ARRAY
43898: PPUSH
43899: CALL_OW 114
// end else
43903: GO 43956
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
43905: LD_ADDR_VAR 0 15
43909: PUSH
43910: LD_VAR 0 16
43914: PUSH
43915: LD_VAR 0 7
43919: ARRAY
43920: PPUSH
43921: LD_INT 1
43923: PPUSH
43924: CALL_OW 3
43928: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
43929: LD_ADDR_VAR 0 16
43933: PUSH
43934: LD_VAR 0 16
43938: PPUSH
43939: LD_VAR 0 7
43943: PPUSH
43944: LD_VAR 0 15
43948: PPUSH
43949: CALL_OW 1
43953: ST_TO_ADDR
// continue ;
43954: GO 43560
// end ; end ; end else
43956: GO 46400
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
43958: LD_ADDR_VAR 0 14
43962: PUSH
43963: LD_INT 81
43965: PUSH
43966: LD_VAR 0 4
43970: PUSH
43971: LD_VAR 0 7
43975: ARRAY
43976: PPUSH
43977: CALL_OW 255
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PPUSH
43986: CALL_OW 69
43990: ST_TO_ADDR
// if not tmp then
43991: LD_VAR 0 14
43995: NOT
43996: IFFALSE 44000
// continue ;
43998: GO 43560
// if f_ignore_area then
44000: LD_VAR 0 17
44004: IFFALSE 44092
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
44006: LD_ADDR_VAR 0 15
44010: PUSH
44011: LD_VAR 0 14
44015: PPUSH
44016: LD_INT 3
44018: PUSH
44019: LD_INT 92
44021: PUSH
44022: LD_VAR 0 17
44026: PUSH
44027: LD_INT 1
44029: ARRAY
44030: PUSH
44031: LD_VAR 0 17
44035: PUSH
44036: LD_INT 2
44038: ARRAY
44039: PUSH
44040: LD_VAR 0 17
44044: PUSH
44045: LD_INT 3
44047: ARRAY
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PPUSH
44059: CALL_OW 72
44063: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
44064: LD_VAR 0 14
44068: PUSH
44069: LD_VAR 0 15
44073: DIFF
44074: IFFALSE 44092
// tmp := tmp diff tmp2 ;
44076: LD_ADDR_VAR 0 14
44080: PUSH
44081: LD_VAR 0 14
44085: PUSH
44086: LD_VAR 0 15
44090: DIFF
44091: ST_TO_ADDR
// end ; if not f_murder then
44092: LD_VAR 0 20
44096: NOT
44097: IFFALSE 44155
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
44099: LD_ADDR_VAR 0 15
44103: PUSH
44104: LD_VAR 0 14
44108: PPUSH
44109: LD_INT 3
44111: PUSH
44112: LD_INT 50
44114: PUSH
44115: EMPTY
44116: LIST
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PPUSH
44122: CALL_OW 72
44126: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
44127: LD_VAR 0 14
44131: PUSH
44132: LD_VAR 0 15
44136: DIFF
44137: IFFALSE 44155
// tmp := tmp diff tmp2 ;
44139: LD_ADDR_VAR 0 14
44143: PUSH
44144: LD_VAR 0 14
44148: PUSH
44149: LD_VAR 0 15
44153: DIFF
44154: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
44155: LD_ADDR_VAR 0 14
44159: PUSH
44160: LD_VAR 0 4
44164: PUSH
44165: LD_VAR 0 7
44169: ARRAY
44170: PPUSH
44171: LD_VAR 0 14
44175: PPUSH
44176: LD_INT 1
44178: PPUSH
44179: LD_INT 1
44181: PPUSH
44182: CALL 15831 0 4
44186: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
44187: LD_VAR 0 4
44191: PUSH
44192: LD_VAR 0 7
44196: ARRAY
44197: PPUSH
44198: CALL_OW 257
44202: PUSH
44203: LD_INT 1
44205: EQUAL
44206: IFFALSE 44654
// begin if WantPlant ( group [ i ] ) then
44208: LD_VAR 0 4
44212: PUSH
44213: LD_VAR 0 7
44217: ARRAY
44218: PPUSH
44219: CALL 15299 0 1
44223: IFFALSE 44227
// continue ;
44225: GO 43560
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
44227: LD_VAR 0 18
44231: PUSH
44232: LD_VAR 0 4
44236: PUSH
44237: LD_VAR 0 7
44241: ARRAY
44242: PPUSH
44243: CALL_OW 310
44247: NOT
44248: AND
44249: PUSH
44250: LD_VAR 0 14
44254: PUSH
44255: LD_INT 1
44257: ARRAY
44258: PUSH
44259: LD_VAR 0 14
44263: PPUSH
44264: LD_INT 21
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 58
44276: PUSH
44277: EMPTY
44278: LIST
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PPUSH
44284: CALL_OW 72
44288: IN
44289: AND
44290: IFFALSE 44326
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
44292: LD_VAR 0 4
44296: PUSH
44297: LD_VAR 0 7
44301: ARRAY
44302: PPUSH
44303: LD_VAR 0 14
44307: PUSH
44308: LD_INT 1
44310: ARRAY
44311: PPUSH
44312: CALL_OW 120
// attacking := true ;
44316: LD_ADDR_VAR 0 29
44320: PUSH
44321: LD_INT 1
44323: ST_TO_ADDR
// continue ;
44324: GO 43560
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
44326: LD_VAR 0 26
44330: PUSH
44331: LD_VAR 0 4
44335: PUSH
44336: LD_VAR 0 7
44340: ARRAY
44341: PPUSH
44342: CALL_OW 257
44346: PUSH
44347: LD_INT 1
44349: EQUAL
44350: AND
44351: PUSH
44352: LD_VAR 0 4
44356: PUSH
44357: LD_VAR 0 7
44361: ARRAY
44362: PPUSH
44363: CALL_OW 256
44367: PUSH
44368: LD_INT 800
44370: LESS
44371: AND
44372: PUSH
44373: LD_VAR 0 4
44377: PUSH
44378: LD_VAR 0 7
44382: ARRAY
44383: PPUSH
44384: CALL_OW 318
44388: NOT
44389: AND
44390: IFFALSE 44407
// ComCrawl ( group [ i ] ) ;
44392: LD_VAR 0 4
44396: PUSH
44397: LD_VAR 0 7
44401: ARRAY
44402: PPUSH
44403: CALL_OW 137
// if f_mines then
44407: LD_VAR 0 21
44411: IFFALSE 44654
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
44413: LD_VAR 0 14
44417: PUSH
44418: LD_INT 1
44420: ARRAY
44421: PPUSH
44422: CALL_OW 247
44426: PUSH
44427: LD_INT 3
44429: EQUAL
44430: PUSH
44431: LD_VAR 0 14
44435: PUSH
44436: LD_INT 1
44438: ARRAY
44439: PUSH
44440: LD_VAR 0 27
44444: IN
44445: NOT
44446: AND
44447: IFFALSE 44654
// begin x := GetX ( tmp [ 1 ] ) ;
44449: LD_ADDR_VAR 0 10
44453: PUSH
44454: LD_VAR 0 14
44458: PUSH
44459: LD_INT 1
44461: ARRAY
44462: PPUSH
44463: CALL_OW 250
44467: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
44468: LD_ADDR_VAR 0 11
44472: PUSH
44473: LD_VAR 0 14
44477: PUSH
44478: LD_INT 1
44480: ARRAY
44481: PPUSH
44482: CALL_OW 251
44486: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
44487: LD_ADDR_VAR 0 12
44491: PUSH
44492: LD_VAR 0 4
44496: PUSH
44497: LD_VAR 0 7
44501: ARRAY
44502: PPUSH
44503: CALL 41710 0 1
44507: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
44508: LD_VAR 0 4
44512: PUSH
44513: LD_VAR 0 7
44517: ARRAY
44518: PPUSH
44519: LD_VAR 0 10
44523: PPUSH
44524: LD_VAR 0 11
44528: PPUSH
44529: LD_VAR 0 14
44533: PUSH
44534: LD_INT 1
44536: ARRAY
44537: PPUSH
44538: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
44542: LD_VAR 0 4
44546: PUSH
44547: LD_VAR 0 7
44551: ARRAY
44552: PPUSH
44553: LD_VAR 0 10
44557: PPUSH
44558: LD_VAR 0 12
44562: PPUSH
44563: LD_INT 7
44565: PPUSH
44566: CALL_OW 272
44570: PPUSH
44571: LD_VAR 0 11
44575: PPUSH
44576: LD_VAR 0 12
44580: PPUSH
44581: LD_INT 7
44583: PPUSH
44584: CALL_OW 273
44588: PPUSH
44589: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
44593: LD_VAR 0 4
44597: PUSH
44598: LD_VAR 0 7
44602: ARRAY
44603: PPUSH
44604: LD_INT 71
44606: PPUSH
44607: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
44611: LD_ADDR_VAR 0 27
44615: PUSH
44616: LD_VAR 0 27
44620: PPUSH
44621: LD_VAR 0 27
44625: PUSH
44626: LD_INT 1
44628: PLUS
44629: PPUSH
44630: LD_VAR 0 14
44634: PUSH
44635: LD_INT 1
44637: ARRAY
44638: PPUSH
44639: CALL_OW 1
44643: ST_TO_ADDR
// attacking := true ;
44644: LD_ADDR_VAR 0 29
44648: PUSH
44649: LD_INT 1
44651: ST_TO_ADDR
// continue ;
44652: GO 43560
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
44654: LD_VAR 0 4
44658: PUSH
44659: LD_VAR 0 7
44663: ARRAY
44664: PPUSH
44665: CALL_OW 257
44669: PUSH
44670: LD_INT 17
44672: EQUAL
44673: PUSH
44674: LD_VAR 0 4
44678: PUSH
44679: LD_VAR 0 7
44683: ARRAY
44684: PPUSH
44685: CALL_OW 110
44689: PUSH
44690: LD_INT 71
44692: EQUAL
44693: NOT
44694: AND
44695: IFFALSE 44841
// begin attacking := false ;
44697: LD_ADDR_VAR 0 29
44701: PUSH
44702: LD_INT 0
44704: ST_TO_ADDR
// k := 5 ;
44705: LD_ADDR_VAR 0 9
44709: PUSH
44710: LD_INT 5
44712: ST_TO_ADDR
// if tmp < k then
44713: LD_VAR 0 14
44717: PUSH
44718: LD_VAR 0 9
44722: LESS
44723: IFFALSE 44735
// k := tmp ;
44725: LD_ADDR_VAR 0 9
44729: PUSH
44730: LD_VAR 0 14
44734: ST_TO_ADDR
// for j = 1 to k do
44735: LD_ADDR_VAR 0 8
44739: PUSH
44740: DOUBLE
44741: LD_INT 1
44743: DEC
44744: ST_TO_ADDR
44745: LD_VAR 0 9
44749: PUSH
44750: FOR_TO
44751: IFFALSE 44839
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
44753: LD_VAR 0 14
44757: PUSH
44758: LD_VAR 0 8
44762: ARRAY
44763: PUSH
44764: LD_VAR 0 14
44768: PPUSH
44769: LD_INT 58
44771: PUSH
44772: EMPTY
44773: LIST
44774: PPUSH
44775: CALL_OW 72
44779: IN
44780: NOT
44781: IFFALSE 44837
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
44783: LD_VAR 0 4
44787: PUSH
44788: LD_VAR 0 7
44792: ARRAY
44793: PPUSH
44794: LD_VAR 0 14
44798: PUSH
44799: LD_VAR 0 8
44803: ARRAY
44804: PPUSH
44805: CALL_OW 115
// attacking := true ;
44809: LD_ADDR_VAR 0 29
44813: PUSH
44814: LD_INT 1
44816: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
44817: LD_VAR 0 4
44821: PUSH
44822: LD_VAR 0 7
44826: ARRAY
44827: PPUSH
44828: LD_INT 71
44830: PPUSH
44831: CALL_OW 109
// continue ;
44835: GO 44750
// end ; end ;
44837: GO 44750
44839: POP
44840: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
44841: LD_VAR 0 4
44845: PUSH
44846: LD_VAR 0 7
44850: ARRAY
44851: PPUSH
44852: CALL_OW 257
44856: PUSH
44857: LD_INT 8
44859: EQUAL
44860: PUSH
44861: LD_VAR 0 4
44865: PUSH
44866: LD_VAR 0 7
44870: ARRAY
44871: PPUSH
44872: CALL_OW 264
44876: PUSH
44877: LD_INT 28
44879: PUSH
44880: LD_INT 45
44882: PUSH
44883: LD_INT 7
44885: PUSH
44886: LD_INT 47
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: IN
44895: OR
44896: IFFALSE 45126
// begin attacking := false ;
44898: LD_ADDR_VAR 0 29
44902: PUSH
44903: LD_INT 0
44905: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
44906: LD_VAR 0 14
44910: PUSH
44911: LD_INT 1
44913: ARRAY
44914: PPUSH
44915: CALL_OW 266
44919: PUSH
44920: LD_INT 32
44922: PUSH
44923: LD_INT 31
44925: PUSH
44926: LD_INT 33
44928: PUSH
44929: LD_INT 4
44931: PUSH
44932: LD_INT 5
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: IN
44942: IFFALSE 45126
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
44944: LD_ADDR_VAR 0 9
44948: PUSH
44949: LD_VAR 0 14
44953: PUSH
44954: LD_INT 1
44956: ARRAY
44957: PPUSH
44958: CALL_OW 266
44962: PPUSH
44963: LD_VAR 0 14
44967: PUSH
44968: LD_INT 1
44970: ARRAY
44971: PPUSH
44972: CALL_OW 250
44976: PPUSH
44977: LD_VAR 0 14
44981: PUSH
44982: LD_INT 1
44984: ARRAY
44985: PPUSH
44986: CALL_OW 251
44990: PPUSH
44991: LD_VAR 0 14
44995: PUSH
44996: LD_INT 1
44998: ARRAY
44999: PPUSH
45000: CALL_OW 254
45004: PPUSH
45005: LD_VAR 0 14
45009: PUSH
45010: LD_INT 1
45012: ARRAY
45013: PPUSH
45014: CALL_OW 248
45018: PPUSH
45019: LD_INT 0
45021: PPUSH
45022: CALL 23086 0 6
45026: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
45027: LD_ADDR_VAR 0 8
45031: PUSH
45032: LD_VAR 0 4
45036: PUSH
45037: LD_VAR 0 7
45041: ARRAY
45042: PPUSH
45043: LD_VAR 0 9
45047: PPUSH
45048: CALL 41773 0 2
45052: ST_TO_ADDR
// if j then
45053: LD_VAR 0 8
45057: IFFALSE 45126
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45059: LD_VAR 0 8
45063: PUSH
45064: LD_INT 1
45066: ARRAY
45067: PPUSH
45068: LD_VAR 0 8
45072: PUSH
45073: LD_INT 2
45075: ARRAY
45076: PPUSH
45077: CALL_OW 488
45081: IFFALSE 45126
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
45083: LD_VAR 0 4
45087: PUSH
45088: LD_VAR 0 7
45092: ARRAY
45093: PPUSH
45094: LD_VAR 0 8
45098: PUSH
45099: LD_INT 1
45101: ARRAY
45102: PPUSH
45103: LD_VAR 0 8
45107: PUSH
45108: LD_INT 2
45110: ARRAY
45111: PPUSH
45112: CALL_OW 116
// attacking := true ;
45116: LD_ADDR_VAR 0 29
45120: PUSH
45121: LD_INT 1
45123: ST_TO_ADDR
// continue ;
45124: GO 43560
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
45126: LD_VAR 0 4
45130: PUSH
45131: LD_VAR 0 7
45135: ARRAY
45136: PPUSH
45137: CALL_OW 265
45141: PUSH
45142: LD_INT 11
45144: EQUAL
45145: IFFALSE 45423
// begin k := 10 ;
45147: LD_ADDR_VAR 0 9
45151: PUSH
45152: LD_INT 10
45154: ST_TO_ADDR
// x := 0 ;
45155: LD_ADDR_VAR 0 10
45159: PUSH
45160: LD_INT 0
45162: ST_TO_ADDR
// if tmp < k then
45163: LD_VAR 0 14
45167: PUSH
45168: LD_VAR 0 9
45172: LESS
45173: IFFALSE 45185
// k := tmp ;
45175: LD_ADDR_VAR 0 9
45179: PUSH
45180: LD_VAR 0 14
45184: ST_TO_ADDR
// for j = k downto 1 do
45185: LD_ADDR_VAR 0 8
45189: PUSH
45190: DOUBLE
45191: LD_VAR 0 9
45195: INC
45196: ST_TO_ADDR
45197: LD_INT 1
45199: PUSH
45200: FOR_DOWNTO
45201: IFFALSE 45276
// begin if GetType ( tmp [ j ] ) = unit_human then
45203: LD_VAR 0 14
45207: PUSH
45208: LD_VAR 0 8
45212: ARRAY
45213: PPUSH
45214: CALL_OW 247
45218: PUSH
45219: LD_INT 1
45221: EQUAL
45222: IFFALSE 45274
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
45224: LD_VAR 0 4
45228: PUSH
45229: LD_VAR 0 7
45233: ARRAY
45234: PPUSH
45235: LD_VAR 0 14
45239: PUSH
45240: LD_VAR 0 8
45244: ARRAY
45245: PPUSH
45246: CALL 42044 0 2
// x := tmp [ j ] ;
45250: LD_ADDR_VAR 0 10
45254: PUSH
45255: LD_VAR 0 14
45259: PUSH
45260: LD_VAR 0 8
45264: ARRAY
45265: ST_TO_ADDR
// attacking := true ;
45266: LD_ADDR_VAR 0 29
45270: PUSH
45271: LD_INT 1
45273: ST_TO_ADDR
// end ; end ;
45274: GO 45200
45276: POP
45277: POP
// if not x then
45278: LD_VAR 0 10
45282: NOT
45283: IFFALSE 45423
// begin attacking := true ;
45285: LD_ADDR_VAR 0 29
45289: PUSH
45290: LD_INT 1
45292: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
45293: LD_VAR 0 4
45297: PUSH
45298: LD_VAR 0 7
45302: ARRAY
45303: PPUSH
45304: CALL_OW 250
45308: PPUSH
45309: LD_VAR 0 4
45313: PUSH
45314: LD_VAR 0 7
45318: ARRAY
45319: PPUSH
45320: CALL_OW 251
45324: PPUSH
45325: CALL_OW 546
45329: PUSH
45330: LD_INT 2
45332: ARRAY
45333: PUSH
45334: LD_VAR 0 14
45338: PUSH
45339: LD_INT 1
45341: ARRAY
45342: PPUSH
45343: CALL_OW 250
45347: PPUSH
45348: LD_VAR 0 14
45352: PUSH
45353: LD_INT 1
45355: ARRAY
45356: PPUSH
45357: CALL_OW 251
45361: PPUSH
45362: CALL_OW 546
45366: PUSH
45367: LD_INT 2
45369: ARRAY
45370: EQUAL
45371: IFFALSE 45399
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
45373: LD_VAR 0 4
45377: PUSH
45378: LD_VAR 0 7
45382: ARRAY
45383: PPUSH
45384: LD_VAR 0 14
45388: PUSH
45389: LD_INT 1
45391: ARRAY
45392: PPUSH
45393: CALL 42044 0 2
45397: GO 45423
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
45399: LD_VAR 0 4
45403: PUSH
45404: LD_VAR 0 7
45408: ARRAY
45409: PPUSH
45410: LD_VAR 0 14
45414: PUSH
45415: LD_INT 1
45417: ARRAY
45418: PPUSH
45419: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
45423: LD_VAR 0 4
45427: PUSH
45428: LD_VAR 0 7
45432: ARRAY
45433: PPUSH
45434: CALL_OW 264
45438: PUSH
45439: LD_INT 29
45441: EQUAL
45442: IFFALSE 45808
// begin if WantsToAttack ( group [ i ] ) in bombed then
45444: LD_VAR 0 4
45448: PUSH
45449: LD_VAR 0 7
45453: ARRAY
45454: PPUSH
45455: CALL_OW 319
45459: PUSH
45460: LD_VAR 0 28
45464: IN
45465: IFFALSE 45469
// continue ;
45467: GO 43560
// k := 8 ;
45469: LD_ADDR_VAR 0 9
45473: PUSH
45474: LD_INT 8
45476: ST_TO_ADDR
// x := 0 ;
45477: LD_ADDR_VAR 0 10
45481: PUSH
45482: LD_INT 0
45484: ST_TO_ADDR
// if tmp < k then
45485: LD_VAR 0 14
45489: PUSH
45490: LD_VAR 0 9
45494: LESS
45495: IFFALSE 45507
// k := tmp ;
45497: LD_ADDR_VAR 0 9
45501: PUSH
45502: LD_VAR 0 14
45506: ST_TO_ADDR
// for j = 1 to k do
45507: LD_ADDR_VAR 0 8
45511: PUSH
45512: DOUBLE
45513: LD_INT 1
45515: DEC
45516: ST_TO_ADDR
45517: LD_VAR 0 9
45521: PUSH
45522: FOR_TO
45523: IFFALSE 45655
// begin if GetType ( tmp [ j ] ) = unit_building then
45525: LD_VAR 0 14
45529: PUSH
45530: LD_VAR 0 8
45534: ARRAY
45535: PPUSH
45536: CALL_OW 247
45540: PUSH
45541: LD_INT 3
45543: EQUAL
45544: IFFALSE 45653
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
45546: LD_VAR 0 14
45550: PUSH
45551: LD_VAR 0 8
45555: ARRAY
45556: PUSH
45557: LD_VAR 0 28
45561: IN
45562: NOT
45563: PUSH
45564: LD_VAR 0 14
45568: PUSH
45569: LD_VAR 0 8
45573: ARRAY
45574: PPUSH
45575: CALL_OW 313
45579: AND
45580: IFFALSE 45653
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
45582: LD_VAR 0 4
45586: PUSH
45587: LD_VAR 0 7
45591: ARRAY
45592: PPUSH
45593: LD_VAR 0 14
45597: PUSH
45598: LD_VAR 0 8
45602: ARRAY
45603: PPUSH
45604: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
45608: LD_ADDR_VAR 0 28
45612: PUSH
45613: LD_VAR 0 28
45617: PPUSH
45618: LD_VAR 0 28
45622: PUSH
45623: LD_INT 1
45625: PLUS
45626: PPUSH
45627: LD_VAR 0 14
45631: PUSH
45632: LD_VAR 0 8
45636: ARRAY
45637: PPUSH
45638: CALL_OW 1
45642: ST_TO_ADDR
// attacking := true ;
45643: LD_ADDR_VAR 0 29
45647: PUSH
45648: LD_INT 1
45650: ST_TO_ADDR
// break ;
45651: GO 45655
// end ; end ;
45653: GO 45522
45655: POP
45656: POP
// if not attacking and f_attack_depot then
45657: LD_VAR 0 29
45661: NOT
45662: PUSH
45663: LD_VAR 0 25
45667: AND
45668: IFFALSE 45763
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
45670: LD_ADDR_VAR 0 13
45674: PUSH
45675: LD_VAR 0 14
45679: PPUSH
45680: LD_INT 2
45682: PUSH
45683: LD_INT 30
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 30
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: LIST
45707: PPUSH
45708: CALL_OW 72
45712: ST_TO_ADDR
// if z then
45713: LD_VAR 0 13
45717: IFFALSE 45763
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
45719: LD_VAR 0 4
45723: PUSH
45724: LD_VAR 0 7
45728: ARRAY
45729: PPUSH
45730: LD_VAR 0 13
45734: PPUSH
45735: LD_VAR 0 4
45739: PUSH
45740: LD_VAR 0 7
45744: ARRAY
45745: PPUSH
45746: CALL_OW 74
45750: PPUSH
45751: CALL_OW 115
// attacking := true ;
45755: LD_ADDR_VAR 0 29
45759: PUSH
45760: LD_INT 1
45762: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
45763: LD_VAR 0 4
45767: PUSH
45768: LD_VAR 0 7
45772: ARRAY
45773: PPUSH
45774: CALL_OW 256
45778: PUSH
45779: LD_INT 500
45781: LESS
45782: IFFALSE 45808
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
45784: LD_VAR 0 4
45788: PUSH
45789: LD_VAR 0 7
45793: ARRAY
45794: PPUSH
45795: LD_VAR 0 14
45799: PUSH
45800: LD_INT 1
45802: ARRAY
45803: PPUSH
45804: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45808: LD_VAR 0 4
45812: PUSH
45813: LD_VAR 0 7
45817: ARRAY
45818: PPUSH
45819: CALL_OW 256
45823: PUSH
45824: LD_INT 250
45826: LESS
45827: PUSH
45828: LD_VAR 0 4
45832: PUSH
45833: LD_VAR 0 7
45837: ARRAY
45838: PUSH
45839: LD_INT 21
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 23
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PPUSH
45863: CALL_OW 69
45867: IN
45868: AND
45869: IFFALSE 45994
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
45871: LD_ADDR_VAR 0 9
45875: PUSH
45876: LD_OWVAR 3
45880: PUSH
45881: LD_VAR 0 4
45885: PUSH
45886: LD_VAR 0 7
45890: ARRAY
45891: DIFF
45892: PPUSH
45893: LD_VAR 0 4
45897: PUSH
45898: LD_VAR 0 7
45902: ARRAY
45903: PPUSH
45904: CALL_OW 74
45908: ST_TO_ADDR
// if not k then
45909: LD_VAR 0 9
45913: NOT
45914: IFFALSE 45918
// continue ;
45916: GO 43560
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
45918: LD_VAR 0 9
45922: PUSH
45923: LD_INT 81
45925: PUSH
45926: LD_VAR 0 4
45930: PUSH
45931: LD_VAR 0 7
45935: ARRAY
45936: PPUSH
45937: CALL_OW 255
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PPUSH
45946: CALL_OW 69
45950: IN
45951: PUSH
45952: LD_VAR 0 9
45956: PPUSH
45957: LD_VAR 0 4
45961: PUSH
45962: LD_VAR 0 7
45966: ARRAY
45967: PPUSH
45968: CALL_OW 296
45972: PUSH
45973: LD_INT 5
45975: LESS
45976: AND
45977: IFFALSE 45994
// ComAutodestruct ( group [ i ] ) ;
45979: LD_VAR 0 4
45983: PUSH
45984: LD_VAR 0 7
45988: ARRAY
45989: PPUSH
45990: CALL 41942 0 1
// end ; if f_attack_depot then
45994: LD_VAR 0 25
45998: IFFALSE 46110
// begin k := 6 ;
46000: LD_ADDR_VAR 0 9
46004: PUSH
46005: LD_INT 6
46007: ST_TO_ADDR
// if tmp < k then
46008: LD_VAR 0 14
46012: PUSH
46013: LD_VAR 0 9
46017: LESS
46018: IFFALSE 46030
// k := tmp ;
46020: LD_ADDR_VAR 0 9
46024: PUSH
46025: LD_VAR 0 14
46029: ST_TO_ADDR
// for j = 1 to k do
46030: LD_ADDR_VAR 0 8
46034: PUSH
46035: DOUBLE
46036: LD_INT 1
46038: DEC
46039: ST_TO_ADDR
46040: LD_VAR 0 9
46044: PUSH
46045: FOR_TO
46046: IFFALSE 46108
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
46048: LD_VAR 0 8
46052: PPUSH
46053: CALL_OW 266
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: IN
46068: IFFALSE 46106
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
46070: LD_VAR 0 4
46074: PUSH
46075: LD_VAR 0 7
46079: ARRAY
46080: PPUSH
46081: LD_VAR 0 14
46085: PUSH
46086: LD_VAR 0 8
46090: ARRAY
46091: PPUSH
46092: CALL_OW 115
// attacking := true ;
46096: LD_ADDR_VAR 0 29
46100: PUSH
46101: LD_INT 1
46103: ST_TO_ADDR
// break ;
46104: GO 46108
// end ;
46106: GO 46045
46108: POP
46109: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
46110: LD_VAR 0 4
46114: PUSH
46115: LD_VAR 0 7
46119: ARRAY
46120: PPUSH
46121: CALL_OW 302
46125: PUSH
46126: LD_VAR 0 29
46130: NOT
46131: AND
46132: IFFALSE 46400
// begin if GetTag ( group [ i ] ) = 71 then
46134: LD_VAR 0 4
46138: PUSH
46139: LD_VAR 0 7
46143: ARRAY
46144: PPUSH
46145: CALL_OW 110
46149: PUSH
46150: LD_INT 71
46152: EQUAL
46153: IFFALSE 46194
// begin if HasTask ( group [ i ] ) then
46155: LD_VAR 0 4
46159: PUSH
46160: LD_VAR 0 7
46164: ARRAY
46165: PPUSH
46166: CALL_OW 314
46170: IFFALSE 46176
// continue else
46172: GO 43560
46174: GO 46194
// SetTag ( group [ i ] , 0 ) ;
46176: LD_VAR 0 4
46180: PUSH
46181: LD_VAR 0 7
46185: ARRAY
46186: PPUSH
46187: LD_INT 0
46189: PPUSH
46190: CALL_OW 109
// end ; k := 8 ;
46194: LD_ADDR_VAR 0 9
46198: PUSH
46199: LD_INT 8
46201: ST_TO_ADDR
// x := 0 ;
46202: LD_ADDR_VAR 0 10
46206: PUSH
46207: LD_INT 0
46209: ST_TO_ADDR
// if tmp < k then
46210: LD_VAR 0 14
46214: PUSH
46215: LD_VAR 0 9
46219: LESS
46220: IFFALSE 46232
// k := tmp ;
46222: LD_ADDR_VAR 0 9
46226: PUSH
46227: LD_VAR 0 14
46231: ST_TO_ADDR
// for j = 1 to k do
46232: LD_ADDR_VAR 0 8
46236: PUSH
46237: DOUBLE
46238: LD_INT 1
46240: DEC
46241: ST_TO_ADDR
46242: LD_VAR 0 9
46246: PUSH
46247: FOR_TO
46248: IFFALSE 46346
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
46250: LD_VAR 0 14
46254: PUSH
46255: LD_VAR 0 8
46259: ARRAY
46260: PPUSH
46261: CALL_OW 247
46265: PUSH
46266: LD_INT 1
46268: EQUAL
46269: PUSH
46270: LD_VAR 0 14
46274: PUSH
46275: LD_VAR 0 8
46279: ARRAY
46280: PPUSH
46281: CALL_OW 256
46285: PUSH
46286: LD_INT 250
46288: LESS
46289: PUSH
46290: LD_VAR 0 20
46294: AND
46295: PUSH
46296: LD_VAR 0 20
46300: NOT
46301: PUSH
46302: LD_VAR 0 14
46306: PUSH
46307: LD_VAR 0 8
46311: ARRAY
46312: PPUSH
46313: CALL_OW 256
46317: PUSH
46318: LD_INT 250
46320: GREATEREQUAL
46321: AND
46322: OR
46323: AND
46324: IFFALSE 46344
// begin x := tmp [ j ] ;
46326: LD_ADDR_VAR 0 10
46330: PUSH
46331: LD_VAR 0 14
46335: PUSH
46336: LD_VAR 0 8
46340: ARRAY
46341: ST_TO_ADDR
// break ;
46342: GO 46346
// end ;
46344: GO 46247
46346: POP
46347: POP
// if x then
46348: LD_VAR 0 10
46352: IFFALSE 46376
// ComAttackUnit ( group [ i ] , x ) else
46354: LD_VAR 0 4
46358: PUSH
46359: LD_VAR 0 7
46363: ARRAY
46364: PPUSH
46365: LD_VAR 0 10
46369: PPUSH
46370: CALL_OW 115
46374: GO 46400
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
46376: LD_VAR 0 4
46380: PUSH
46381: LD_VAR 0 7
46385: ARRAY
46386: PPUSH
46387: LD_VAR 0 14
46391: PUSH
46392: LD_INT 1
46394: ARRAY
46395: PPUSH
46396: CALL_OW 115
// end ; end ; end ;
46400: GO 43560
46402: POP
46403: POP
// wait ( 0 0$1 ) ;
46404: LD_INT 35
46406: PPUSH
46407: CALL_OW 67
// until group = [ ] ;
46411: LD_VAR 0 4
46415: PUSH
46416: EMPTY
46417: EQUAL
46418: IFFALSE 43545
// end ;
46420: LD_VAR 0 2
46424: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46425: LD_INT 0
46427: PPUSH
46428: PPUSH
46429: PPUSH
46430: PPUSH
// if not base_units then
46431: LD_VAR 0 1
46435: NOT
46436: IFFALSE 46440
// exit ;
46438: GO 46527
// result := false ;
46440: LD_ADDR_VAR 0 2
46444: PUSH
46445: LD_INT 0
46447: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46448: LD_ADDR_VAR 0 5
46452: PUSH
46453: LD_VAR 0 1
46457: PPUSH
46458: LD_INT 21
46460: PUSH
46461: LD_INT 3
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PPUSH
46468: CALL_OW 72
46472: ST_TO_ADDR
// if not tmp then
46473: LD_VAR 0 5
46477: NOT
46478: IFFALSE 46482
// exit ;
46480: GO 46527
// for i in tmp do
46482: LD_ADDR_VAR 0 3
46486: PUSH
46487: LD_VAR 0 5
46491: PUSH
46492: FOR_IN
46493: IFFALSE 46525
// begin result := EnemyInRange ( i , 22 ) ;
46495: LD_ADDR_VAR 0 2
46499: PUSH
46500: LD_VAR 0 3
46504: PPUSH
46505: LD_INT 22
46507: PPUSH
46508: CALL 41625 0 2
46512: ST_TO_ADDR
// if result then
46513: LD_VAR 0 2
46517: IFFALSE 46523
// exit ;
46519: POP
46520: POP
46521: GO 46527
// end ;
46523: GO 46492
46525: POP
46526: POP
// end ;
46527: LD_VAR 0 2
46531: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
46532: LD_INT 0
46534: PPUSH
46535: PPUSH
// if not units then
46536: LD_VAR 0 1
46540: NOT
46541: IFFALSE 46545
// exit ;
46543: GO 46615
// result := [ ] ;
46545: LD_ADDR_VAR 0 3
46549: PUSH
46550: EMPTY
46551: ST_TO_ADDR
// for i in units do
46552: LD_ADDR_VAR 0 4
46556: PUSH
46557: LD_VAR 0 1
46561: PUSH
46562: FOR_IN
46563: IFFALSE 46613
// if GetTag ( i ) = tag then
46565: LD_VAR 0 4
46569: PPUSH
46570: CALL_OW 110
46574: PUSH
46575: LD_VAR 0 2
46579: EQUAL
46580: IFFALSE 46611
// result := Insert ( result , result + 1 , i ) ;
46582: LD_ADDR_VAR 0 3
46586: PUSH
46587: LD_VAR 0 3
46591: PPUSH
46592: LD_VAR 0 3
46596: PUSH
46597: LD_INT 1
46599: PLUS
46600: PPUSH
46601: LD_VAR 0 4
46605: PPUSH
46606: CALL_OW 2
46610: ST_TO_ADDR
46611: GO 46562
46613: POP
46614: POP
// end ;
46615: LD_VAR 0 3
46619: RET
// export function IsDriver ( un ) ; begin
46620: LD_INT 0
46622: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46623: LD_ADDR_VAR 0 2
46627: PUSH
46628: LD_VAR 0 1
46632: PUSH
46633: LD_INT 55
46635: PUSH
46636: EMPTY
46637: LIST
46638: PPUSH
46639: CALL_OW 69
46643: IN
46644: ST_TO_ADDR
// end ; end_of_file
46645: LD_VAR 0 2
46649: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit ; export function InitMacro ; var i ; begin
46650: LD_INT 0
46652: PPUSH
46653: PPUSH
// skirmish := false ;
46654: LD_ADDR_EXP 54
46658: PUSH
46659: LD_INT 0
46661: ST_TO_ADDR
// mc_bases := [ ] ;
46662: LD_ADDR_EXP 55
46666: PUSH
46667: EMPTY
46668: ST_TO_ADDR
// mc_sides := [ ] ;
46669: LD_ADDR_EXP 81
46673: PUSH
46674: EMPTY
46675: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
46676: LD_ADDR_EXP 56
46680: PUSH
46681: EMPTY
46682: ST_TO_ADDR
// mc_building_repairs := [ ] ;
46683: LD_ADDR_EXP 57
46687: PUSH
46688: EMPTY
46689: ST_TO_ADDR
// mc_need_heal := [ ] ;
46690: LD_ADDR_EXP 58
46694: PUSH
46695: EMPTY
46696: ST_TO_ADDR
// mc_healers := [ ] ;
46697: LD_ADDR_EXP 59
46701: PUSH
46702: EMPTY
46703: ST_TO_ADDR
// mc_build_list := [ ] ;
46704: LD_ADDR_EXP 60
46708: PUSH
46709: EMPTY
46710: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
46711: LD_ADDR_EXP 87
46715: PUSH
46716: EMPTY
46717: ST_TO_ADDR
// mc_builders := [ ] ;
46718: LD_ADDR_EXP 61
46722: PUSH
46723: EMPTY
46724: ST_TO_ADDR
// mc_construct_list := [ ] ;
46725: LD_ADDR_EXP 62
46729: PUSH
46730: EMPTY
46731: ST_TO_ADDR
// mc_turret_list := [ ] ;
46732: LD_ADDR_EXP 63
46736: PUSH
46737: EMPTY
46738: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
46739: LD_ADDR_EXP 64
46743: PUSH
46744: EMPTY
46745: ST_TO_ADDR
// mc_miners := [ ] ;
46746: LD_ADDR_EXP 69
46750: PUSH
46751: EMPTY
46752: ST_TO_ADDR
// mc_mines := [ ] ;
46753: LD_ADDR_EXP 68
46757: PUSH
46758: EMPTY
46759: ST_TO_ADDR
// mc_minefields := [ ] ;
46760: LD_ADDR_EXP 70
46764: PUSH
46765: EMPTY
46766: ST_TO_ADDR
// mc_crates := [ ] ;
46767: LD_ADDR_EXP 71
46771: PUSH
46772: EMPTY
46773: ST_TO_ADDR
// mc_crates_collector := [ ] ;
46774: LD_ADDR_EXP 72
46778: PUSH
46779: EMPTY
46780: ST_TO_ADDR
// mc_crates_area := [ ] ;
46781: LD_ADDR_EXP 73
46785: PUSH
46786: EMPTY
46787: ST_TO_ADDR
// mc_vehicles := [ ] ;
46788: LD_ADDR_EXP 74
46792: PUSH
46793: EMPTY
46794: ST_TO_ADDR
// mc_attack := [ ] ;
46795: LD_ADDR_EXP 75
46799: PUSH
46800: EMPTY
46801: ST_TO_ADDR
// mc_produce := [ ] ;
46802: LD_ADDR_EXP 76
46806: PUSH
46807: EMPTY
46808: ST_TO_ADDR
// mc_defender := [ ] ;
46809: LD_ADDR_EXP 77
46813: PUSH
46814: EMPTY
46815: ST_TO_ADDR
// mc_parking := [ ] ;
46816: LD_ADDR_EXP 79
46820: PUSH
46821: EMPTY
46822: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
46823: LD_ADDR_EXP 65
46827: PUSH
46828: EMPTY
46829: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
46830: LD_ADDR_EXP 67
46834: PUSH
46835: EMPTY
46836: ST_TO_ADDR
// mc_scan := [ ] ;
46837: LD_ADDR_EXP 78
46841: PUSH
46842: EMPTY
46843: ST_TO_ADDR
// mc_scan_area := [ ] ;
46844: LD_ADDR_EXP 80
46848: PUSH
46849: EMPTY
46850: ST_TO_ADDR
// mc_tech := [ ] ;
46851: LD_ADDR_EXP 82
46855: PUSH
46856: EMPTY
46857: ST_TO_ADDR
// end ;
46858: LD_VAR 0 1
46862: RET
// export function MC_Start ( ) ; var i ; begin
46863: LD_INT 0
46865: PPUSH
46866: PPUSH
// for i = 1 to mc_bases do
46867: LD_ADDR_VAR 0 2
46871: PUSH
46872: DOUBLE
46873: LD_INT 1
46875: DEC
46876: ST_TO_ADDR
46877: LD_EXP 55
46881: PUSH
46882: FOR_TO
46883: IFFALSE 47728
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
46885: LD_ADDR_EXP 56
46889: PUSH
46890: LD_EXP 56
46894: PPUSH
46895: LD_VAR 0 2
46899: PPUSH
46900: EMPTY
46901: PPUSH
46902: CALL_OW 1
46906: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
46907: LD_ADDR_EXP 57
46911: PUSH
46912: LD_EXP 57
46916: PPUSH
46917: LD_VAR 0 2
46921: PPUSH
46922: EMPTY
46923: PPUSH
46924: CALL_OW 1
46928: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
46929: LD_ADDR_EXP 58
46933: PUSH
46934: LD_EXP 58
46938: PPUSH
46939: LD_VAR 0 2
46943: PPUSH
46944: EMPTY
46945: PPUSH
46946: CALL_OW 1
46950: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
46951: LD_ADDR_EXP 59
46955: PUSH
46956: LD_EXP 59
46960: PPUSH
46961: LD_VAR 0 2
46965: PPUSH
46966: EMPTY
46967: PUSH
46968: EMPTY
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PPUSH
46974: CALL_OW 1
46978: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
46979: LD_ADDR_EXP 60
46983: PUSH
46984: LD_EXP 60
46988: PPUSH
46989: LD_VAR 0 2
46993: PPUSH
46994: EMPTY
46995: PPUSH
46996: CALL_OW 1
47000: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
47001: LD_ADDR_EXP 87
47005: PUSH
47006: LD_EXP 87
47010: PPUSH
47011: LD_VAR 0 2
47015: PPUSH
47016: EMPTY
47017: PPUSH
47018: CALL_OW 1
47022: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
47023: LD_ADDR_EXP 61
47027: PUSH
47028: LD_EXP 61
47032: PPUSH
47033: LD_VAR 0 2
47037: PPUSH
47038: EMPTY
47039: PPUSH
47040: CALL_OW 1
47044: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
47045: LD_ADDR_EXP 62
47049: PUSH
47050: LD_EXP 62
47054: PPUSH
47055: LD_VAR 0 2
47059: PPUSH
47060: EMPTY
47061: PPUSH
47062: CALL_OW 1
47066: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
47067: LD_ADDR_EXP 63
47071: PUSH
47072: LD_EXP 63
47076: PPUSH
47077: LD_VAR 0 2
47081: PPUSH
47082: EMPTY
47083: PPUSH
47084: CALL_OW 1
47088: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
47089: LD_ADDR_EXP 64
47093: PUSH
47094: LD_EXP 64
47098: PPUSH
47099: LD_VAR 0 2
47103: PPUSH
47104: LD_EXP 55
47108: PUSH
47109: LD_VAR 0 2
47113: ARRAY
47114: PPUSH
47115: LD_INT 2
47117: PUSH
47118: LD_INT 30
47120: PUSH
47121: LD_INT 32
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 30
47130: PUSH
47131: LD_INT 31
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 58
47145: PUSH
47146: EMPTY
47147: LIST
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PPUSH
47153: CALL_OW 72
47157: PPUSH
47158: CALL_OW 1
47162: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
47163: LD_ADDR_EXP 65
47167: PUSH
47168: LD_EXP 65
47172: PPUSH
47173: LD_VAR 0 2
47177: PPUSH
47178: EMPTY
47179: PPUSH
47180: CALL_OW 1
47184: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
47185: LD_ADDR_EXP 69
47189: PUSH
47190: LD_EXP 69
47194: PPUSH
47195: LD_VAR 0 2
47199: PPUSH
47200: EMPTY
47201: PPUSH
47202: CALL_OW 1
47206: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
47207: LD_ADDR_EXP 68
47211: PUSH
47212: LD_EXP 68
47216: PPUSH
47217: LD_VAR 0 2
47221: PPUSH
47222: EMPTY
47223: PPUSH
47224: CALL_OW 1
47228: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
47229: LD_ADDR_EXP 70
47233: PUSH
47234: LD_EXP 70
47238: PPUSH
47239: LD_VAR 0 2
47243: PPUSH
47244: EMPTY
47245: PPUSH
47246: CALL_OW 1
47250: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
47251: LD_ADDR_EXP 71
47255: PUSH
47256: LD_EXP 71
47260: PPUSH
47261: LD_VAR 0 2
47265: PPUSH
47266: EMPTY
47267: PPUSH
47268: CALL_OW 1
47272: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
47273: LD_ADDR_EXP 72
47277: PUSH
47278: LD_EXP 72
47282: PPUSH
47283: LD_VAR 0 2
47287: PPUSH
47288: EMPTY
47289: PPUSH
47290: CALL_OW 1
47294: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
47295: LD_ADDR_EXP 73
47299: PUSH
47300: LD_EXP 73
47304: PPUSH
47305: LD_VAR 0 2
47309: PPUSH
47310: EMPTY
47311: PPUSH
47312: CALL_OW 1
47316: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
47317: LD_ADDR_EXP 74
47321: PUSH
47322: LD_EXP 74
47326: PPUSH
47327: LD_VAR 0 2
47331: PPUSH
47332: EMPTY
47333: PPUSH
47334: CALL_OW 1
47338: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
47339: LD_ADDR_EXP 75
47343: PUSH
47344: LD_EXP 75
47348: PPUSH
47349: LD_VAR 0 2
47353: PPUSH
47354: EMPTY
47355: PPUSH
47356: CALL_OW 1
47360: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
47361: LD_ADDR_EXP 76
47365: PUSH
47366: LD_EXP 76
47370: PPUSH
47371: LD_VAR 0 2
47375: PPUSH
47376: EMPTY
47377: PPUSH
47378: CALL_OW 1
47382: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
47383: LD_ADDR_EXP 77
47387: PUSH
47388: LD_EXP 77
47392: PPUSH
47393: LD_VAR 0 2
47397: PPUSH
47398: EMPTY
47399: PPUSH
47400: CALL_OW 1
47404: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
47405: LD_ADDR_EXP 66
47409: PUSH
47410: LD_EXP 66
47414: PPUSH
47415: LD_VAR 0 2
47419: PPUSH
47420: LD_INT 0
47422: PPUSH
47423: CALL_OW 1
47427: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
47428: LD_ADDR_EXP 79
47432: PUSH
47433: LD_EXP 79
47437: PPUSH
47438: LD_VAR 0 2
47442: PPUSH
47443: LD_INT 0
47445: PPUSH
47446: CALL_OW 1
47450: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
47451: LD_ADDR_EXP 67
47455: PUSH
47456: LD_EXP 67
47460: PPUSH
47461: LD_VAR 0 2
47465: PPUSH
47466: EMPTY
47467: PPUSH
47468: CALL_OW 1
47472: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
47473: LD_ADDR_EXP 78
47477: PUSH
47478: LD_EXP 78
47482: PPUSH
47483: LD_VAR 0 2
47487: PPUSH
47488: LD_INT 0
47490: PPUSH
47491: CALL_OW 1
47495: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
47496: LD_ADDR_EXP 80
47500: PUSH
47501: LD_EXP 80
47505: PPUSH
47506: LD_VAR 0 2
47510: PPUSH
47511: EMPTY
47512: PPUSH
47513: CALL_OW 1
47517: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
47518: LD_ADDR_EXP 83
47522: PUSH
47523: LD_EXP 83
47527: PPUSH
47528: LD_VAR 0 2
47532: PPUSH
47533: LD_INT 0
47535: PPUSH
47536: CALL_OW 1
47540: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
47541: LD_ADDR_EXP 84
47545: PUSH
47546: LD_EXP 84
47550: PPUSH
47551: LD_VAR 0 2
47555: PPUSH
47556: EMPTY
47557: PPUSH
47558: CALL_OW 1
47562: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
47563: LD_ADDR_EXP 85
47567: PUSH
47568: LD_EXP 85
47572: PPUSH
47573: LD_VAR 0 2
47577: PPUSH
47578: EMPTY
47579: PPUSH
47580: CALL_OW 1
47584: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
47585: LD_ADDR_EXP 86
47589: PUSH
47590: LD_EXP 86
47594: PPUSH
47595: LD_VAR 0 2
47599: PPUSH
47600: EMPTY
47601: PPUSH
47602: CALL_OW 1
47606: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
47607: LD_ADDR_EXP 88
47611: PUSH
47612: LD_EXP 88
47616: PPUSH
47617: LD_VAR 0 2
47621: PPUSH
47622: LD_EXP 55
47626: PUSH
47627: LD_VAR 0 2
47631: ARRAY
47632: PPUSH
47633: LD_INT 2
47635: PUSH
47636: LD_INT 30
47638: PUSH
47639: LD_INT 6
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 30
47648: PUSH
47649: LD_INT 7
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 30
47658: PUSH
47659: LD_INT 8
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: PPUSH
47672: CALL_OW 72
47676: PPUSH
47677: CALL_OW 1
47681: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
47682: LD_ADDR_EXP 89
47686: PUSH
47687: LD_EXP 89
47691: PPUSH
47692: LD_VAR 0 2
47696: PPUSH
47697: EMPTY
47698: PPUSH
47699: CALL_OW 1
47703: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
47704: LD_ADDR_EXP 90
47708: PUSH
47709: LD_EXP 90
47713: PPUSH
47714: LD_VAR 0 2
47718: PPUSH
47719: EMPTY
47720: PPUSH
47721: CALL_OW 1
47725: ST_TO_ADDR
// end ;
47726: GO 46882
47728: POP
47729: POP
// MC_InitSides ( ) ;
47730: CALL 56260 0 0
// MC_InitResearch ( ) ;
47734: CALL 55999 0 0
// CustomInitMacro ( ) ;
47738: CALL 174 0 0
// skirmish := true ;
47742: LD_ADDR_EXP 54
47746: PUSH
47747: LD_INT 1
47749: ST_TO_ADDR
// end ;
47750: LD_VAR 0 1
47754: RET
// every 0 0$01 trigger skirmish do
47755: LD_EXP 54
47759: IFFALSE 47878
47761: GO 47763
47763: DISABLE
// begin enable ;
47764: ENABLE
// MC_CheckBuildings ( ) ;
47765: CALL 48323 0 0
// MC_CheckPeopleLife ( ) ;
47769: CALL 48448 0 0
// RaiseSailEvent ( 103 ) ;
47773: LD_INT 103
47775: PPUSH
47776: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
47780: LD_INT 104
47782: PPUSH
47783: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
47787: LD_INT 105
47789: PPUSH
47790: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
47794: LD_INT 106
47796: PPUSH
47797: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
47801: LD_INT 107
47803: PPUSH
47804: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
47808: LD_INT 108
47810: PPUSH
47811: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
47815: LD_INT 109
47817: PPUSH
47818: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
47822: LD_INT 110
47824: PPUSH
47825: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
47829: LD_INT 111
47831: PPUSH
47832: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
47836: LD_INT 112
47838: PPUSH
47839: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
47843: LD_INT 120
47845: PPUSH
47846: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
47850: LD_INT 121
47852: PPUSH
47853: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
47857: LD_INT 122
47859: PPUSH
47860: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
47864: LD_INT 123
47866: PPUSH
47867: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
47871: LD_INT 200
47873: PPUSH
47874: CALL_OW 427
// end ;
47878: END
// every 10 trigger skirmish do var i ;
47879: LD_EXP 54
47883: IFFALSE 47982
47885: GO 47887
47887: DISABLE
47888: LD_INT 0
47890: PPUSH
// begin enable ;
47891: ENABLE
// if not mc_bases then
47892: LD_EXP 55
47896: NOT
47897: IFFALSE 47901
// exit ;
47899: GO 47982
// for i = 1 to mc_bases do
47901: LD_ADDR_VAR 0 1
47905: PUSH
47906: DOUBLE
47907: LD_INT 1
47909: DEC
47910: ST_TO_ADDR
47911: LD_EXP 55
47915: PUSH
47916: FOR_TO
47917: IFFALSE 47980
// if mc_mines [ i ] and mc_miners [ i ] then
47919: LD_EXP 68
47923: PUSH
47924: LD_VAR 0 1
47928: ARRAY
47929: PUSH
47930: LD_EXP 69
47934: PUSH
47935: LD_VAR 0 1
47939: ARRAY
47940: AND
47941: IFFALSE 47978
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
47943: LD_EXP 69
47947: PUSH
47948: LD_VAR 0 1
47952: ARRAY
47953: PUSH
47954: LD_INT 1
47956: ARRAY
47957: PPUSH
47958: CALL_OW 255
47962: PPUSH
47963: LD_EXP 68
47967: PUSH
47968: LD_VAR 0 1
47972: ARRAY
47973: PPUSH
47974: CALL 12456 0 2
47978: GO 47916
47980: POP
47981: POP
// end ;
47982: PPOPN 1
47984: END
// on SailEvent ( event ) do begin if event = 101 then
47985: LD_VAR 0 1
47989: PUSH
47990: LD_INT 101
47992: EQUAL
47993: IFFALSE 47999
// MC_RepairBuildings ( ) ;
47995: CALL 49006 0 0
// if event = 102 then
47999: LD_VAR 0 1
48003: PUSH
48004: LD_INT 102
48006: EQUAL
48007: IFFALSE 48013
// MC_Heal ( ) ;
48009: CALL 49412 0 0
// if event = 103 then
48013: LD_VAR 0 1
48017: PUSH
48018: LD_INT 103
48020: EQUAL
48021: IFFALSE 48027
// MC_Build ( ) ;
48023: CALL 49834 0 0
// if event = 104 then
48027: LD_VAR 0 1
48031: PUSH
48032: LD_INT 104
48034: EQUAL
48035: IFFALSE 48041
// MC_TurretWeapon ( ) ;
48037: CALL 51200 0 0
// if event = 105 then
48041: LD_VAR 0 1
48045: PUSH
48046: LD_INT 105
48048: EQUAL
48049: IFFALSE 48055
// MC_BuildUpgrade ( ) ;
48051: CALL 50751 0 0
// if event = 106 then
48055: LD_VAR 0 1
48059: PUSH
48060: LD_INT 106
48062: EQUAL
48063: IFFALSE 48069
// MC_PlantMines ( ) ;
48065: CALL 51519 0 0
// if event = 107 then
48069: LD_VAR 0 1
48073: PUSH
48074: LD_INT 107
48076: EQUAL
48077: IFFALSE 48083
// MC_CollectCrates ( ) ;
48079: CALL 52526 0 0
// if event = 108 then
48083: LD_VAR 0 1
48087: PUSH
48088: LD_INT 108
48090: EQUAL
48091: IFFALSE 48097
// MC_LinkRemoteControl ( ) ;
48093: CALL 53936 0 0
// if event = 109 then
48097: LD_VAR 0 1
48101: PUSH
48102: LD_INT 109
48104: EQUAL
48105: IFFALSE 48111
// MC_ProduceVehicle ( ) ;
48107: CALL 54117 0 0
// if event = 110 then
48111: LD_VAR 0 1
48115: PUSH
48116: LD_INT 110
48118: EQUAL
48119: IFFALSE 48125
// MC_SendAttack ( ) ;
48121: CALL 54598 0 0
// if event = 111 then
48125: LD_VAR 0 1
48129: PUSH
48130: LD_INT 111
48132: EQUAL
48133: IFFALSE 48139
// MC_Defend ( ) ;
48135: CALL 54706 0 0
// if event = 112 then
48139: LD_VAR 0 1
48143: PUSH
48144: LD_INT 112
48146: EQUAL
48147: IFFALSE 48153
// MC_Research ( ) ;
48149: CALL 55074 0 0
// if event = 120 then
48153: LD_VAR 0 1
48157: PUSH
48158: LD_INT 120
48160: EQUAL
48161: IFFALSE 48167
// MC_RepairVehicle ( ) ;
48163: CALL 56352 0 0
// if event = 121 then
48167: LD_VAR 0 1
48171: PUSH
48172: LD_INT 121
48174: EQUAL
48175: IFFALSE 48181
// MC_TameApe ( ) ;
48177: CALL 57021 0 0
// if event = 122 then
48181: LD_VAR 0 1
48185: PUSH
48186: LD_INT 122
48188: EQUAL
48189: IFFALSE 48195
// MC_ChangeApeClass ( ) ;
48191: CALL 57578 0 0
// if event = 123 then
48195: LD_VAR 0 1
48199: PUSH
48200: LD_INT 123
48202: EQUAL
48203: IFFALSE 48209
// MC_Bazooka ( ) ;
48205: CALL 58212 0 0
// if event = 124 then
48209: LD_VAR 0 1
48213: PUSH
48214: LD_INT 124
48216: EQUAL
48217: IFFALSE 48223
// MC_TeleportExit ( ) ;
48219: CALL 58410 0 0
// if event = 200 then
48223: LD_VAR 0 1
48227: PUSH
48228: LD_INT 200
48230: EQUAL
48231: IFFALSE 48237
// MC_Idle ( ) ;
48233: CALL 59434 0 0
// end ;
48237: PPOPN 1
48239: END
// export function MC_Reset ( base , tag ) ; var i ; begin
48240: LD_INT 0
48242: PPUSH
48243: PPUSH
// if not mc_bases [ base ] or not tag then
48244: LD_EXP 55
48248: PUSH
48249: LD_VAR 0 1
48253: ARRAY
48254: NOT
48255: PUSH
48256: LD_VAR 0 2
48260: NOT
48261: OR
48262: IFFALSE 48266
// exit ;
48264: GO 48318
// for i in mc_bases [ base ] do
48266: LD_ADDR_VAR 0 4
48270: PUSH
48271: LD_EXP 55
48275: PUSH
48276: LD_VAR 0 1
48280: ARRAY
48281: PUSH
48282: FOR_IN
48283: IFFALSE 48316
// if GetTag ( i ) = tag then
48285: LD_VAR 0 4
48289: PPUSH
48290: CALL_OW 110
48294: PUSH
48295: LD_VAR 0 2
48299: EQUAL
48300: IFFALSE 48314
// SetTag ( i , 0 ) ;
48302: LD_VAR 0 4
48306: PPUSH
48307: LD_INT 0
48309: PPUSH
48310: CALL_OW 109
48314: GO 48282
48316: POP
48317: POP
// end ;
48318: LD_VAR 0 3
48322: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
48323: LD_INT 0
48325: PPUSH
48326: PPUSH
48327: PPUSH
// if not mc_bases then
48328: LD_EXP 55
48332: NOT
48333: IFFALSE 48337
// exit ;
48335: GO 48443
// for i = 1 to mc_bases do
48337: LD_ADDR_VAR 0 2
48341: PUSH
48342: DOUBLE
48343: LD_INT 1
48345: DEC
48346: ST_TO_ADDR
48347: LD_EXP 55
48351: PUSH
48352: FOR_TO
48353: IFFALSE 48434
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
48355: LD_ADDR_VAR 0 3
48359: PUSH
48360: LD_EXP 55
48364: PUSH
48365: LD_VAR 0 2
48369: ARRAY
48370: PPUSH
48371: LD_INT 21
48373: PUSH
48374: LD_INT 3
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 3
48383: PUSH
48384: LD_INT 24
48386: PUSH
48387: LD_INT 1000
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PPUSH
48402: CALL_OW 72
48406: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
48407: LD_ADDR_EXP 56
48411: PUSH
48412: LD_EXP 56
48416: PPUSH
48417: LD_VAR 0 2
48421: PPUSH
48422: LD_VAR 0 3
48426: PPUSH
48427: CALL_OW 1
48431: ST_TO_ADDR
// end ;
48432: GO 48352
48434: POP
48435: POP
// RaiseSailEvent ( 101 ) ;
48436: LD_INT 101
48438: PPUSH
48439: CALL_OW 427
// end ;
48443: LD_VAR 0 1
48447: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
48448: LD_INT 0
48450: PPUSH
48451: PPUSH
48452: PPUSH
48453: PPUSH
48454: PPUSH
48455: PPUSH
48456: PPUSH
// if not mc_bases then
48457: LD_EXP 55
48461: NOT
48462: IFFALSE 48466
// exit ;
48464: GO 49001
// for i = 1 to mc_bases do
48466: LD_ADDR_VAR 0 2
48470: PUSH
48471: DOUBLE
48472: LD_INT 1
48474: DEC
48475: ST_TO_ADDR
48476: LD_EXP 55
48480: PUSH
48481: FOR_TO
48482: IFFALSE 48992
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
48484: LD_ADDR_VAR 0 5
48488: PUSH
48489: LD_EXP 55
48493: PUSH
48494: LD_VAR 0 2
48498: ARRAY
48499: PUSH
48500: LD_EXP 84
48504: PUSH
48505: LD_VAR 0 2
48509: ARRAY
48510: UNION
48511: PPUSH
48512: LD_INT 21
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: LD_INT 3
48527: PUSH
48528: LD_INT 54
48530: PUSH
48531: EMPTY
48532: LIST
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 3
48540: PUSH
48541: LD_INT 24
48543: PUSH
48544: LD_INT 700
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: LIST
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PPUSH
48564: CALL_OW 72
48568: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
48569: LD_ADDR_VAR 0 6
48573: PUSH
48574: LD_EXP 55
48578: PUSH
48579: LD_VAR 0 2
48583: ARRAY
48584: PPUSH
48585: LD_INT 21
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: LD_INT 3
48600: PUSH
48601: LD_INT 54
48603: PUSH
48604: EMPTY
48605: LIST
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 3
48613: PUSH
48614: LD_INT 24
48616: PUSH
48617: LD_INT 250
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: LIST
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PPUSH
48637: CALL_OW 72
48641: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
48642: LD_ADDR_VAR 0 7
48646: PUSH
48647: LD_VAR 0 5
48651: PUSH
48652: LD_VAR 0 6
48656: DIFF
48657: ST_TO_ADDR
// if not need_heal_1 then
48658: LD_VAR 0 6
48662: NOT
48663: IFFALSE 48696
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
48665: LD_ADDR_EXP 58
48669: PUSH
48670: LD_EXP 58
48674: PPUSH
48675: LD_VAR 0 2
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PPUSH
48687: EMPTY
48688: PPUSH
48689: CALL 15798 0 3
48693: ST_TO_ADDR
48694: GO 48728
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
48696: LD_ADDR_EXP 58
48700: PUSH
48701: LD_EXP 58
48705: PPUSH
48706: LD_VAR 0 2
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PPUSH
48718: LD_VAR 0 6
48722: PPUSH
48723: CALL 15798 0 3
48727: ST_TO_ADDR
// if not need_heal_2 then
48728: LD_VAR 0 7
48732: NOT
48733: IFFALSE 48766
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
48735: LD_ADDR_EXP 58
48739: PUSH
48740: LD_EXP 58
48744: PPUSH
48745: LD_VAR 0 2
48749: PUSH
48750: LD_INT 2
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PPUSH
48757: EMPTY
48758: PPUSH
48759: CALL 15798 0 3
48763: ST_TO_ADDR
48764: GO 48798
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
48766: LD_ADDR_EXP 58
48770: PUSH
48771: LD_EXP 58
48775: PPUSH
48776: LD_VAR 0 2
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PPUSH
48788: LD_VAR 0 7
48792: PPUSH
48793: CALL 15798 0 3
48797: ST_TO_ADDR
// if need_heal_2 then
48798: LD_VAR 0 7
48802: IFFALSE 48974
// for j in need_heal_2 do
48804: LD_ADDR_VAR 0 3
48808: PUSH
48809: LD_VAR 0 7
48813: PUSH
48814: FOR_IN
48815: IFFALSE 48972
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
48817: LD_ADDR_VAR 0 5
48821: PUSH
48822: LD_EXP 55
48826: PUSH
48827: LD_VAR 0 2
48831: ARRAY
48832: PPUSH
48833: LD_INT 2
48835: PUSH
48836: LD_INT 30
48838: PUSH
48839: LD_INT 6
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 30
48848: PUSH
48849: LD_INT 7
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 30
48858: PUSH
48859: LD_INT 8
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 30
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 30
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 25
48888: PUSH
48889: LD_INT 4
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: PPUSH
48905: CALL_OW 72
48909: ST_TO_ADDR
// if tmp then
48910: LD_VAR 0 5
48914: IFFALSE 48970
// begin k := NearestUnitToUnit ( tmp , j ) ;
48916: LD_ADDR_VAR 0 4
48920: PUSH
48921: LD_VAR 0 5
48925: PPUSH
48926: LD_VAR 0 3
48930: PPUSH
48931: CALL_OW 74
48935: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
48936: LD_VAR 0 3
48940: PPUSH
48941: LD_VAR 0 4
48945: PPUSH
48946: CALL_OW 296
48950: PUSH
48951: LD_INT 7
48953: GREATER
48954: IFFALSE 48970
// ComMoveUnit ( j , k ) ;
48956: LD_VAR 0 3
48960: PPUSH
48961: LD_VAR 0 4
48965: PPUSH
48966: CALL_OW 112
// end ; end ;
48970: GO 48814
48972: POP
48973: POP
// if not need_heal_1 and not need_heal_2 then
48974: LD_VAR 0 6
48978: NOT
48979: PUSH
48980: LD_VAR 0 7
48984: NOT
48985: AND
48986: IFFALSE 48990
// continue ;
48988: GO 48481
// end ;
48990: GO 48481
48992: POP
48993: POP
// RaiseSailEvent ( 102 ) ;
48994: LD_INT 102
48996: PPUSH
48997: CALL_OW 427
// end ;
49001: LD_VAR 0 1
49005: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
49006: LD_INT 0
49008: PPUSH
49009: PPUSH
49010: PPUSH
49011: PPUSH
49012: PPUSH
// if not mc_bases then
49013: LD_EXP 55
49017: NOT
49018: IFFALSE 49022
// exit ;
49020: GO 49407
// for i = 1 to mc_bases do
49022: LD_ADDR_VAR 0 2
49026: PUSH
49027: DOUBLE
49028: LD_INT 1
49030: DEC
49031: ST_TO_ADDR
49032: LD_EXP 55
49036: PUSH
49037: FOR_TO
49038: IFFALSE 49405
// begin if not mc_building_need_repair [ i ] then
49040: LD_EXP 56
49044: PUSH
49045: LD_VAR 0 2
49049: ARRAY
49050: NOT
49051: IFFALSE 49089
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
49053: LD_ADDR_EXP 57
49057: PUSH
49058: LD_EXP 57
49062: PPUSH
49063: LD_VAR 0 2
49067: PPUSH
49068: EMPTY
49069: PPUSH
49070: CALL_OW 1
49074: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
49075: LD_VAR 0 2
49079: PPUSH
49080: LD_INT 101
49082: PPUSH
49083: CALL 48240 0 2
// continue ;
49087: GO 49037
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
49089: LD_ADDR_EXP 61
49093: PUSH
49094: LD_EXP 61
49098: PPUSH
49099: LD_VAR 0 2
49103: PPUSH
49104: EMPTY
49105: PPUSH
49106: CALL_OW 1
49110: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
49111: LD_VAR 0 2
49115: PPUSH
49116: LD_INT 103
49118: PPUSH
49119: CALL 48240 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
49123: LD_ADDR_VAR 0 5
49127: PUSH
49128: LD_EXP 55
49132: PUSH
49133: LD_VAR 0 2
49137: ARRAY
49138: PUSH
49139: LD_EXP 84
49143: PUSH
49144: LD_VAR 0 2
49148: ARRAY
49149: UNION
49150: PPUSH
49151: LD_INT 2
49153: PUSH
49154: LD_INT 25
49156: PUSH
49157: LD_INT 2
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 25
49166: PUSH
49167: LD_INT 16
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: LIST
49178: PUSH
49179: EMPTY
49180: LIST
49181: PPUSH
49182: CALL_OW 72
49186: ST_TO_ADDR
// if not tmp then
49187: LD_VAR 0 5
49191: NOT
49192: IFFALSE 49196
// continue ;
49194: GO 49037
// for j in tmp do
49196: LD_ADDR_VAR 0 3
49200: PUSH
49201: LD_VAR 0 5
49205: PUSH
49206: FOR_IN
49207: IFFALSE 49401
// begin if mc_need_heal [ i ] then
49209: LD_EXP 58
49213: PUSH
49214: LD_VAR 0 2
49218: ARRAY
49219: IFFALSE 49267
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
49221: LD_VAR 0 3
49225: PUSH
49226: LD_EXP 58
49230: PUSH
49231: LD_VAR 0 2
49235: ARRAY
49236: PUSH
49237: LD_INT 1
49239: ARRAY
49240: IN
49241: PUSH
49242: LD_VAR 0 3
49246: PUSH
49247: LD_EXP 58
49251: PUSH
49252: LD_VAR 0 2
49256: ARRAY
49257: PUSH
49258: LD_INT 2
49260: ARRAY
49261: IN
49262: OR
49263: IFFALSE 49267
// continue ;
49265: GO 49206
// if IsInUnit ( j ) then
49267: LD_VAR 0 3
49271: PPUSH
49272: CALL_OW 310
49276: IFFALSE 49287
// ComExitBuilding ( j ) ;
49278: LD_VAR 0 3
49282: PPUSH
49283: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
49287: LD_VAR 0 3
49291: PUSH
49292: LD_EXP 57
49296: PUSH
49297: LD_VAR 0 2
49301: ARRAY
49302: IN
49303: NOT
49304: IFFALSE 49362
// begin SetTag ( j , 101 ) ;
49306: LD_VAR 0 3
49310: PPUSH
49311: LD_INT 101
49313: PPUSH
49314: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
49318: LD_ADDR_EXP 57
49322: PUSH
49323: LD_EXP 57
49327: PPUSH
49328: LD_VAR 0 2
49332: PUSH
49333: LD_EXP 57
49337: PUSH
49338: LD_VAR 0 2
49342: ARRAY
49343: PUSH
49344: LD_INT 1
49346: PLUS
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PPUSH
49352: LD_VAR 0 3
49356: PPUSH
49357: CALL 15798 0 3
49361: ST_TO_ADDR
// end ; Wait ( 3 ) ;
49362: LD_INT 3
49364: PPUSH
49365: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
49369: LD_VAR 0 3
49373: PPUSH
49374: LD_EXP 56
49378: PUSH
49379: LD_VAR 0 2
49383: ARRAY
49384: PPUSH
49385: LD_VAR 0 3
49389: PPUSH
49390: CALL_OW 74
49394: PPUSH
49395: CALL_OW 130
// end ;
49399: GO 49206
49401: POP
49402: POP
// end ;
49403: GO 49037
49405: POP
49406: POP
// end ;
49407: LD_VAR 0 1
49411: RET
// export function MC_Heal ; var i , j , tmp ; begin
49412: LD_INT 0
49414: PPUSH
49415: PPUSH
49416: PPUSH
49417: PPUSH
// if not mc_bases then
49418: LD_EXP 55
49422: NOT
49423: IFFALSE 49427
// exit ;
49425: GO 49829
// for i = 1 to mc_bases do
49427: LD_ADDR_VAR 0 2
49431: PUSH
49432: DOUBLE
49433: LD_INT 1
49435: DEC
49436: ST_TO_ADDR
49437: LD_EXP 55
49441: PUSH
49442: FOR_TO
49443: IFFALSE 49827
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
49445: LD_EXP 58
49449: PUSH
49450: LD_VAR 0 2
49454: ARRAY
49455: PUSH
49456: LD_INT 1
49458: ARRAY
49459: NOT
49460: PUSH
49461: LD_EXP 58
49465: PUSH
49466: LD_VAR 0 2
49470: ARRAY
49471: PUSH
49472: LD_INT 2
49474: ARRAY
49475: NOT
49476: AND
49477: IFFALSE 49515
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
49479: LD_ADDR_EXP 59
49483: PUSH
49484: LD_EXP 59
49488: PPUSH
49489: LD_VAR 0 2
49493: PPUSH
49494: EMPTY
49495: PPUSH
49496: CALL_OW 1
49500: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
49501: LD_VAR 0 2
49505: PPUSH
49506: LD_INT 102
49508: PPUSH
49509: CALL 48240 0 2
// continue ;
49513: GO 49442
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
49515: LD_ADDR_VAR 0 4
49519: PUSH
49520: LD_EXP 55
49524: PUSH
49525: LD_VAR 0 2
49529: ARRAY
49530: PPUSH
49531: LD_INT 25
49533: PUSH
49534: LD_INT 4
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PPUSH
49541: CALL_OW 72
49545: ST_TO_ADDR
// if not tmp then
49546: LD_VAR 0 4
49550: NOT
49551: IFFALSE 49555
// continue ;
49553: GO 49442
// if mc_taming [ i ] then
49555: LD_EXP 86
49559: PUSH
49560: LD_VAR 0 2
49564: ARRAY
49565: IFFALSE 49589
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
49567: LD_ADDR_EXP 86
49571: PUSH
49572: LD_EXP 86
49576: PPUSH
49577: LD_VAR 0 2
49581: PPUSH
49582: EMPTY
49583: PPUSH
49584: CALL_OW 1
49588: ST_TO_ADDR
// for j in tmp do
49589: LD_ADDR_VAR 0 3
49593: PUSH
49594: LD_VAR 0 4
49598: PUSH
49599: FOR_IN
49600: IFFALSE 49823
// begin if IsInUnit ( j ) then
49602: LD_VAR 0 3
49606: PPUSH
49607: CALL_OW 310
49611: IFFALSE 49622
// ComExitBuilding ( j ) ;
49613: LD_VAR 0 3
49617: PPUSH
49618: CALL_OW 122
// if not j in mc_healers [ i ] then
49622: LD_VAR 0 3
49626: PUSH
49627: LD_EXP 59
49631: PUSH
49632: LD_VAR 0 2
49636: ARRAY
49637: IN
49638: NOT
49639: IFFALSE 49685
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
49641: LD_ADDR_EXP 59
49645: PUSH
49646: LD_EXP 59
49650: PPUSH
49651: LD_VAR 0 2
49655: PUSH
49656: LD_EXP 59
49660: PUSH
49661: LD_VAR 0 2
49665: ARRAY
49666: PUSH
49667: LD_INT 1
49669: PLUS
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PPUSH
49675: LD_VAR 0 3
49679: PPUSH
49680: CALL 15798 0 3
49684: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
49685: LD_VAR 0 3
49689: PPUSH
49690: CALL_OW 110
49694: PUSH
49695: LD_INT 102
49697: NONEQUAL
49698: IFFALSE 49712
// SetTag ( j , 102 ) ;
49700: LD_VAR 0 3
49704: PPUSH
49705: LD_INT 102
49707: PPUSH
49708: CALL_OW 109
// Wait ( 3 ) ;
49712: LD_INT 3
49714: PPUSH
49715: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
49719: LD_EXP 58
49723: PUSH
49724: LD_VAR 0 2
49728: ARRAY
49729: PUSH
49730: LD_INT 1
49732: ARRAY
49733: IFFALSE 49765
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
49735: LD_VAR 0 3
49739: PPUSH
49740: LD_EXP 58
49744: PUSH
49745: LD_VAR 0 2
49749: ARRAY
49750: PUSH
49751: LD_INT 1
49753: ARRAY
49754: PUSH
49755: LD_INT 1
49757: ARRAY
49758: PPUSH
49759: CALL_OW 128
49763: GO 49821
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
49765: LD_VAR 0 3
49769: PPUSH
49770: CALL_OW 314
49774: NOT
49775: PUSH
49776: LD_EXP 58
49780: PUSH
49781: LD_VAR 0 2
49785: ARRAY
49786: PUSH
49787: LD_INT 2
49789: ARRAY
49790: AND
49791: IFFALSE 49821
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
49793: LD_VAR 0 3
49797: PPUSH
49798: LD_EXP 58
49802: PUSH
49803: LD_VAR 0 2
49807: ARRAY
49808: PUSH
49809: LD_INT 2
49811: ARRAY
49812: PUSH
49813: LD_INT 1
49815: ARRAY
49816: PPUSH
49817: CALL_OW 128
// end ;
49821: GO 49599
49823: POP
49824: POP
// end ;
49825: GO 49442
49827: POP
49828: POP
// end ;
49829: LD_VAR 0 1
49833: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
49834: LD_INT 0
49836: PPUSH
49837: PPUSH
49838: PPUSH
49839: PPUSH
// if not mc_bases then
49840: LD_EXP 55
49844: NOT
49845: IFFALSE 49849
// exit ;
49847: GO 50746
// for i = 1 to mc_bases do
49849: LD_ADDR_VAR 0 2
49853: PUSH
49854: DOUBLE
49855: LD_INT 1
49857: DEC
49858: ST_TO_ADDR
49859: LD_EXP 55
49863: PUSH
49864: FOR_TO
49865: IFFALSE 50744
// begin if mc_scan [ i ] then
49867: LD_EXP 78
49871: PUSH
49872: LD_VAR 0 2
49876: ARRAY
49877: IFFALSE 49881
// continue ;
49879: GO 49864
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
49881: LD_EXP 60
49885: PUSH
49886: LD_VAR 0 2
49890: ARRAY
49891: NOT
49892: PUSH
49893: LD_EXP 62
49897: PUSH
49898: LD_VAR 0 2
49902: ARRAY
49903: NOT
49904: AND
49905: PUSH
49906: LD_EXP 61
49910: PUSH
49911: LD_VAR 0 2
49915: ARRAY
49916: AND
49917: IFFALSE 49955
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
49919: LD_ADDR_EXP 61
49923: PUSH
49924: LD_EXP 61
49928: PPUSH
49929: LD_VAR 0 2
49933: PPUSH
49934: EMPTY
49935: PPUSH
49936: CALL_OW 1
49940: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
49941: LD_VAR 0 2
49945: PPUSH
49946: LD_INT 103
49948: PPUSH
49949: CALL 48240 0 2
// continue ;
49953: GO 49864
// end ; if mc_construct_list [ i ] then
49955: LD_EXP 62
49959: PUSH
49960: LD_VAR 0 2
49964: ARRAY
49965: IFFALSE 50185
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
49967: LD_ADDR_VAR 0 4
49971: PUSH
49972: LD_EXP 55
49976: PUSH
49977: LD_VAR 0 2
49981: ARRAY
49982: PPUSH
49983: LD_INT 25
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PPUSH
49993: CALL_OW 72
49997: PUSH
49998: LD_EXP 57
50002: PUSH
50003: LD_VAR 0 2
50007: ARRAY
50008: DIFF
50009: ST_TO_ADDR
// if not tmp then
50010: LD_VAR 0 4
50014: NOT
50015: IFFALSE 50019
// continue ;
50017: GO 49864
// for j in tmp do
50019: LD_ADDR_VAR 0 3
50023: PUSH
50024: LD_VAR 0 4
50028: PUSH
50029: FOR_IN
50030: IFFALSE 50181
// begin if not mc_builders [ i ] then
50032: LD_EXP 61
50036: PUSH
50037: LD_VAR 0 2
50041: ARRAY
50042: NOT
50043: IFFALSE 50101
// begin SetTag ( j , 103 ) ;
50045: LD_VAR 0 3
50049: PPUSH
50050: LD_INT 103
50052: PPUSH
50053: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
50057: LD_ADDR_EXP 61
50061: PUSH
50062: LD_EXP 61
50066: PPUSH
50067: LD_VAR 0 2
50071: PUSH
50072: LD_EXP 61
50076: PUSH
50077: LD_VAR 0 2
50081: ARRAY
50082: PUSH
50083: LD_INT 1
50085: PLUS
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PPUSH
50091: LD_VAR 0 3
50095: PPUSH
50096: CALL 15798 0 3
50100: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
50101: LD_VAR 0 3
50105: PPUSH
50106: CALL_OW 310
50110: IFFALSE 50121
// ComExitBuilding ( j ) ;
50112: LD_VAR 0 3
50116: PPUSH
50117: CALL_OW 122
// wait ( 3 ) ;
50121: LD_INT 3
50123: PPUSH
50124: CALL_OW 67
// if not mc_construct_list [ i ] then
50128: LD_EXP 62
50132: PUSH
50133: LD_VAR 0 2
50137: ARRAY
50138: NOT
50139: IFFALSE 50143
// break ;
50141: GO 50181
// if not HasTask ( j ) then
50143: LD_VAR 0 3
50147: PPUSH
50148: CALL_OW 314
50152: NOT
50153: IFFALSE 50179
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
50155: LD_VAR 0 3
50159: PPUSH
50160: LD_EXP 62
50164: PUSH
50165: LD_VAR 0 2
50169: ARRAY
50170: PUSH
50171: LD_INT 1
50173: ARRAY
50174: PPUSH
50175: CALL 18204 0 2
// end ;
50179: GO 50029
50181: POP
50182: POP
// end else
50183: GO 50742
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
50185: LD_EXP 60
50189: PUSH
50190: LD_VAR 0 2
50194: ARRAY
50195: PUSH
50196: LD_EXP 55
50200: PUSH
50201: LD_VAR 0 2
50205: ARRAY
50206: PPUSH
50207: LD_INT 2
50209: PUSH
50210: LD_INT 30
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 30
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: LIST
50234: PPUSH
50235: CALL_OW 72
50239: AND
50240: IFFALSE 50742
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
50242: LD_EXP 55
50246: PUSH
50247: LD_VAR 0 2
50251: ARRAY
50252: PPUSH
50253: LD_INT 2
50255: PUSH
50256: LD_INT 30
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 30
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: LIST
50280: PPUSH
50281: CALL_OW 72
50285: PUSH
50286: LD_INT 1
50288: ARRAY
50289: PPUSH
50290: LD_EXP 60
50294: PUSH
50295: LD_VAR 0 2
50299: ARRAY
50300: PUSH
50301: LD_INT 1
50303: ARRAY
50304: PUSH
50305: LD_INT 1
50307: ARRAY
50308: PPUSH
50309: LD_EXP 60
50313: PUSH
50314: LD_VAR 0 2
50318: ARRAY
50319: PUSH
50320: LD_INT 1
50322: ARRAY
50323: PUSH
50324: LD_INT 2
50326: ARRAY
50327: PPUSH
50328: LD_EXP 60
50332: PUSH
50333: LD_VAR 0 2
50337: ARRAY
50338: PUSH
50339: LD_INT 1
50341: ARRAY
50342: PUSH
50343: LD_INT 3
50345: ARRAY
50346: PPUSH
50347: LD_EXP 60
50351: PUSH
50352: LD_VAR 0 2
50356: ARRAY
50357: PUSH
50358: LD_INT 1
50360: ARRAY
50361: PUSH
50362: LD_INT 4
50364: ARRAY
50365: PPUSH
50366: CALL 22308 0 5
50370: IFFALSE 50651
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
50372: LD_ADDR_VAR 0 4
50376: PUSH
50377: LD_EXP 55
50381: PUSH
50382: LD_VAR 0 2
50386: ARRAY
50387: PPUSH
50388: LD_INT 25
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PPUSH
50398: CALL_OW 72
50402: PUSH
50403: LD_EXP 57
50407: PUSH
50408: LD_VAR 0 2
50412: ARRAY
50413: DIFF
50414: ST_TO_ADDR
// if not tmp then
50415: LD_VAR 0 4
50419: NOT
50420: IFFALSE 50424
// continue ;
50422: GO 49864
// for j in tmp do
50424: LD_ADDR_VAR 0 3
50428: PUSH
50429: LD_VAR 0 4
50433: PUSH
50434: FOR_IN
50435: IFFALSE 50647
// begin if not mc_builders [ i ] then
50437: LD_EXP 61
50441: PUSH
50442: LD_VAR 0 2
50446: ARRAY
50447: NOT
50448: IFFALSE 50506
// begin SetTag ( j , 103 ) ;
50450: LD_VAR 0 3
50454: PPUSH
50455: LD_INT 103
50457: PPUSH
50458: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
50462: LD_ADDR_EXP 61
50466: PUSH
50467: LD_EXP 61
50471: PPUSH
50472: LD_VAR 0 2
50476: PUSH
50477: LD_EXP 61
50481: PUSH
50482: LD_VAR 0 2
50486: ARRAY
50487: PUSH
50488: LD_INT 1
50490: PLUS
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PPUSH
50496: LD_VAR 0 3
50500: PPUSH
50501: CALL 15798 0 3
50505: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
50506: LD_VAR 0 3
50510: PPUSH
50511: CALL_OW 310
50515: IFFALSE 50526
// ComExitBuilding ( j ) ;
50517: LD_VAR 0 3
50521: PPUSH
50522: CALL_OW 122
// wait ( 3 ) ;
50526: LD_INT 3
50528: PPUSH
50529: CALL_OW 67
// if not mc_build_list [ i ] then
50533: LD_EXP 60
50537: PUSH
50538: LD_VAR 0 2
50542: ARRAY
50543: NOT
50544: IFFALSE 50548
// break ;
50546: GO 50647
// if not HasTask ( j ) then
50548: LD_VAR 0 3
50552: PPUSH
50553: CALL_OW 314
50557: NOT
50558: IFFALSE 50645
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
50560: LD_VAR 0 3
50564: PPUSH
50565: LD_EXP 60
50569: PUSH
50570: LD_VAR 0 2
50574: ARRAY
50575: PUSH
50576: LD_INT 1
50578: ARRAY
50579: PUSH
50580: LD_INT 1
50582: ARRAY
50583: PPUSH
50584: LD_EXP 60
50588: PUSH
50589: LD_VAR 0 2
50593: ARRAY
50594: PUSH
50595: LD_INT 1
50597: ARRAY
50598: PUSH
50599: LD_INT 2
50601: ARRAY
50602: PPUSH
50603: LD_EXP 60
50607: PUSH
50608: LD_VAR 0 2
50612: ARRAY
50613: PUSH
50614: LD_INT 1
50616: ARRAY
50617: PUSH
50618: LD_INT 3
50620: ARRAY
50621: PPUSH
50622: LD_EXP 60
50626: PUSH
50627: LD_VAR 0 2
50631: ARRAY
50632: PUSH
50633: LD_INT 1
50635: ARRAY
50636: PUSH
50637: LD_INT 4
50639: ARRAY
50640: PPUSH
50641: CALL_OW 145
// end ;
50645: GO 50434
50647: POP
50648: POP
// end else
50649: GO 50742
// TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
50651: LD_EXP 55
50655: PUSH
50656: LD_VAR 0 2
50660: ARRAY
50661: PPUSH
50662: LD_EXP 60
50666: PUSH
50667: LD_VAR 0 2
50671: ARRAY
50672: PUSH
50673: LD_INT 1
50675: ARRAY
50676: PUSH
50677: LD_INT 1
50679: ARRAY
50680: PPUSH
50681: LD_EXP 60
50685: PUSH
50686: LD_VAR 0 2
50690: ARRAY
50691: PUSH
50692: LD_INT 1
50694: ARRAY
50695: PUSH
50696: LD_INT 2
50698: ARRAY
50699: PPUSH
50700: LD_EXP 60
50704: PUSH
50705: LD_VAR 0 2
50709: ARRAY
50710: PUSH
50711: LD_INT 1
50713: ARRAY
50714: PUSH
50715: LD_INT 3
50717: ARRAY
50718: PPUSH
50719: LD_EXP 60
50723: PUSH
50724: LD_VAR 0 2
50728: ARRAY
50729: PUSH
50730: LD_INT 1
50732: ARRAY
50733: PUSH
50734: LD_INT 4
50736: ARRAY
50737: PPUSH
50738: CALL 21992 0 5
// end ;
50742: GO 49864
50744: POP
50745: POP
// end ;
50746: LD_VAR 0 1
50750: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
50751: LD_INT 0
50753: PPUSH
50754: PPUSH
50755: PPUSH
50756: PPUSH
50757: PPUSH
50758: PPUSH
// if not mc_bases then
50759: LD_EXP 55
50763: NOT
50764: IFFALSE 50768
// exit ;
50766: GO 51195
// for i = 1 to mc_bases do
50768: LD_ADDR_VAR 0 2
50772: PUSH
50773: DOUBLE
50774: LD_INT 1
50776: DEC
50777: ST_TO_ADDR
50778: LD_EXP 55
50782: PUSH
50783: FOR_TO
50784: IFFALSE 51193
// begin tmp := mc_build_upgrade [ i ] ;
50786: LD_ADDR_VAR 0 4
50790: PUSH
50791: LD_EXP 87
50795: PUSH
50796: LD_VAR 0 2
50800: ARRAY
50801: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
50802: LD_ADDR_VAR 0 6
50806: PUSH
50807: LD_EXP 88
50811: PUSH
50812: LD_VAR 0 2
50816: ARRAY
50817: PPUSH
50818: LD_INT 2
50820: PUSH
50821: LD_INT 30
50823: PUSH
50824: LD_INT 6
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 30
50833: PUSH
50834: LD_INT 7
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: LIST
50845: PPUSH
50846: CALL_OW 72
50850: ST_TO_ADDR
// if not tmp and not lab then
50851: LD_VAR 0 4
50855: NOT
50856: PUSH
50857: LD_VAR 0 6
50861: NOT
50862: AND
50863: IFFALSE 50867
// continue ;
50865: GO 50783
// if tmp then
50867: LD_VAR 0 4
50871: IFFALSE 50991
// for j in tmp do
50873: LD_ADDR_VAR 0 3
50877: PUSH
50878: LD_VAR 0 4
50882: PUSH
50883: FOR_IN
50884: IFFALSE 50989
// begin if UpgradeCost ( j ) then
50886: LD_VAR 0 3
50890: PPUSH
50891: CALL 21652 0 1
50895: IFFALSE 50987
// begin ComUpgrade ( j ) ;
50897: LD_VAR 0 3
50901: PPUSH
50902: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
50906: LD_ADDR_EXP 87
50910: PUSH
50911: LD_EXP 87
50915: PPUSH
50916: LD_VAR 0 2
50920: PPUSH
50921: LD_EXP 87
50925: PUSH
50926: LD_VAR 0 2
50930: ARRAY
50931: PUSH
50932: LD_VAR 0 3
50936: DIFF
50937: PPUSH
50938: CALL_OW 1
50942: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
50943: LD_ADDR_EXP 62
50947: PUSH
50948: LD_EXP 62
50952: PPUSH
50953: LD_VAR 0 2
50957: PUSH
50958: LD_EXP 62
50962: PUSH
50963: LD_VAR 0 2
50967: ARRAY
50968: PUSH
50969: LD_INT 1
50971: PLUS
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PPUSH
50977: LD_VAR 0 3
50981: PPUSH
50982: CALL 15798 0 3
50986: ST_TO_ADDR
// end ; end ;
50987: GO 50883
50989: POP
50990: POP
// if not lab or not mc_lab_upgrade [ i ] then
50991: LD_VAR 0 6
50995: NOT
50996: PUSH
50997: LD_EXP 89
51001: PUSH
51002: LD_VAR 0 2
51006: ARRAY
51007: NOT
51008: OR
51009: IFFALSE 51013
// continue ;
51011: GO 50783
// for j in lab do
51013: LD_ADDR_VAR 0 3
51017: PUSH
51018: LD_VAR 0 6
51022: PUSH
51023: FOR_IN
51024: IFFALSE 51189
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
51026: LD_VAR 0 3
51030: PPUSH
51031: CALL_OW 266
51035: PUSH
51036: LD_INT 6
51038: PUSH
51039: LD_INT 7
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: IN
51046: PUSH
51047: LD_VAR 0 3
51051: PPUSH
51052: CALL_OW 461
51056: PUSH
51057: LD_INT 1
51059: NONEQUAL
51060: AND
51061: IFFALSE 51187
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
51063: LD_VAR 0 3
51067: PPUSH
51068: LD_EXP 89
51072: PUSH
51073: LD_VAR 0 2
51077: ARRAY
51078: PUSH
51079: LD_INT 1
51081: ARRAY
51082: PPUSH
51083: CALL 21857 0 2
51087: IFFALSE 51187
// begin ComCancel ( j ) ;
51089: LD_VAR 0 3
51093: PPUSH
51094: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
51098: LD_VAR 0 3
51102: PPUSH
51103: LD_EXP 89
51107: PUSH
51108: LD_VAR 0 2
51112: ARRAY
51113: PUSH
51114: LD_INT 1
51116: ARRAY
51117: PPUSH
51118: CALL_OW 207
// if not j in mc_construct_list [ i ] then
51122: LD_VAR 0 3
51126: PUSH
51127: LD_EXP 62
51131: PUSH
51132: LD_VAR 0 2
51136: ARRAY
51137: IN
51138: NOT
51139: IFFALSE 51185
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
51141: LD_ADDR_EXP 62
51145: PUSH
51146: LD_EXP 62
51150: PPUSH
51151: LD_VAR 0 2
51155: PUSH
51156: LD_EXP 62
51160: PUSH
51161: LD_VAR 0 2
51165: ARRAY
51166: PUSH
51167: LD_INT 1
51169: PLUS
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PPUSH
51175: LD_VAR 0 3
51179: PPUSH
51180: CALL 15798 0 3
51184: ST_TO_ADDR
// break ;
51185: GO 51189
// end ; end ; end ;
51187: GO 51023
51189: POP
51190: POP
// end ;
51191: GO 50783
51193: POP
51194: POP
// end ;
51195: LD_VAR 0 1
51199: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
51200: LD_INT 0
51202: PPUSH
51203: PPUSH
51204: PPUSH
51205: PPUSH
51206: PPUSH
51207: PPUSH
51208: PPUSH
// if not mc_bases then
51209: LD_EXP 55
51213: NOT
51214: IFFALSE 51218
// exit ;
51216: GO 51514
// for i = 1 to mc_bases do
51218: LD_ADDR_VAR 0 2
51222: PUSH
51223: DOUBLE
51224: LD_INT 1
51226: DEC
51227: ST_TO_ADDR
51228: LD_EXP 55
51232: PUSH
51233: FOR_TO
51234: IFFALSE 51512
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
51236: LD_EXP 63
51240: PUSH
51241: LD_VAR 0 2
51245: ARRAY
51246: NOT
51247: PUSH
51248: LD_EXP 55
51252: PUSH
51253: LD_VAR 0 2
51257: ARRAY
51258: PPUSH
51259: LD_INT 30
51261: PUSH
51262: LD_INT 3
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PPUSH
51269: CALL_OW 72
51273: NOT
51274: OR
51275: IFFALSE 51279
// continue ;
51277: GO 51233
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
51279: LD_EXP 63
51283: PUSH
51284: LD_VAR 0 2
51288: ARRAY
51289: PUSH
51290: LD_INT 1
51292: ARRAY
51293: PPUSH
51294: CALL_OW 269
51298: IFFALSE 51364
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
51300: LD_ADDR_VAR 0 4
51304: PUSH
51305: LD_EXP 63
51309: PUSH
51310: LD_VAR 0 2
51314: ARRAY
51315: PPUSH
51316: LD_INT 1
51318: PPUSH
51319: CALL_OW 3
51323: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
51324: LD_ADDR_EXP 63
51328: PUSH
51329: LD_EXP 63
51333: PPUSH
51334: LD_VAR 0 2
51338: PPUSH
51339: LD_VAR 0 4
51343: PPUSH
51344: CALL_OW 1
51348: ST_TO_ADDR
// if not mc_turret_list [ i ] then
51349: LD_EXP 63
51353: PUSH
51354: LD_VAR 0 2
51358: ARRAY
51359: NOT
51360: IFFALSE 51364
// continue ;
51362: GO 51233
// end ; busy := false ;
51364: LD_ADDR_VAR 0 6
51368: PUSH
51369: LD_INT 0
51371: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
51372: LD_ADDR_VAR 0 4
51376: PUSH
51377: LD_EXP 55
51381: PUSH
51382: LD_VAR 0 2
51386: ARRAY
51387: PPUSH
51388: LD_INT 30
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PPUSH
51398: CALL_OW 72
51402: ST_TO_ADDR
// for j in tmp do
51403: LD_ADDR_VAR 0 3
51407: PUSH
51408: LD_VAR 0 4
51412: PUSH
51413: FOR_IN
51414: IFFALSE 51442
// if not BuildingStatus ( j ) = bs_idle then
51416: LD_VAR 0 3
51420: PPUSH
51421: CALL_OW 461
51425: PUSH
51426: LD_INT 2
51428: EQUAL
51429: NOT
51430: IFFALSE 51440
// busy := true ;
51432: LD_ADDR_VAR 0 6
51436: PUSH
51437: LD_INT 1
51439: ST_TO_ADDR
51440: GO 51413
51442: POP
51443: POP
// if busy then
51444: LD_VAR 0 6
51448: IFFALSE 51452
// continue ;
51450: GO 51233
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
51452: LD_ADDR_VAR 0 7
51456: PUSH
51457: LD_EXP 63
51461: PUSH
51462: LD_VAR 0 2
51466: ARRAY
51467: PUSH
51468: LD_INT 1
51470: ARRAY
51471: PPUSH
51472: CALL 20100 0 1
51476: ST_TO_ADDR
// if not weapon then
51477: LD_VAR 0 7
51481: NOT
51482: IFFALSE 51486
// continue ;
51484: GO 51233
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
51486: LD_EXP 63
51490: PUSH
51491: LD_VAR 0 2
51495: ARRAY
51496: PUSH
51497: LD_INT 1
51499: ARRAY
51500: PPUSH
51501: LD_VAR 0 7
51505: PPUSH
51506: CALL_OW 148
// end ;
51510: GO 51233
51512: POP
51513: POP
// end ;
51514: LD_VAR 0 1
51518: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
51519: LD_INT 0
51521: PPUSH
51522: PPUSH
51523: PPUSH
51524: PPUSH
51525: PPUSH
51526: PPUSH
// if not mc_bases then
51527: LD_EXP 55
51531: NOT
51532: IFFALSE 51536
// exit ;
51534: GO 52521
// for i = 1 to mc_bases do
51536: LD_ADDR_VAR 0 2
51540: PUSH
51541: DOUBLE
51542: LD_INT 1
51544: DEC
51545: ST_TO_ADDR
51546: LD_EXP 55
51550: PUSH
51551: FOR_TO
51552: IFFALSE 52519
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
51554: LD_EXP 68
51558: PUSH
51559: LD_VAR 0 2
51563: ARRAY
51564: NOT
51565: PUSH
51566: LD_EXP 68
51570: PUSH
51571: LD_VAR 0 2
51575: ARRAY
51576: PUSH
51577: LD_EXP 69
51581: PUSH
51582: LD_VAR 0 2
51586: ARRAY
51587: EQUAL
51588: OR
51589: IFFALSE 51593
// continue ;
51591: GO 51551
// if mc_miners [ i ] then
51593: LD_EXP 69
51597: PUSH
51598: LD_VAR 0 2
51602: ARRAY
51603: IFFALSE 52206
// begin k := 1 ;
51605: LD_ADDR_VAR 0 4
51609: PUSH
51610: LD_INT 1
51612: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
51613: LD_ADDR_VAR 0 3
51617: PUSH
51618: DOUBLE
51619: LD_EXP 69
51623: PUSH
51624: LD_VAR 0 2
51628: ARRAY
51629: INC
51630: ST_TO_ADDR
51631: LD_INT 1
51633: PUSH
51634: FOR_DOWNTO
51635: IFFALSE 52204
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
51637: LD_EXP 69
51641: PUSH
51642: LD_VAR 0 2
51646: ARRAY
51647: PUSH
51648: LD_VAR 0 3
51652: ARRAY
51653: PPUSH
51654: CALL_OW 301
51658: IFFALSE 51721
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
51660: LD_ADDR_VAR 0 5
51664: PUSH
51665: LD_EXP 69
51669: PUSH
51670: LD_VAR 0 2
51674: ARRAY
51675: PUSH
51676: LD_EXP 69
51680: PUSH
51681: LD_VAR 0 2
51685: ARRAY
51686: PUSH
51687: LD_VAR 0 3
51691: ARRAY
51692: DIFF
51693: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
51694: LD_ADDR_EXP 69
51698: PUSH
51699: LD_EXP 69
51703: PPUSH
51704: LD_VAR 0 2
51708: PPUSH
51709: LD_VAR 0 5
51713: PPUSH
51714: CALL_OW 1
51718: ST_TO_ADDR
// continue ;
51719: GO 51634
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
51721: LD_EXP 69
51725: PUSH
51726: LD_VAR 0 2
51730: ARRAY
51731: PUSH
51732: LD_VAR 0 3
51736: ARRAY
51737: PPUSH
51738: CALL 15299 0 1
51742: PUSH
51743: LD_EXP 69
51747: PUSH
51748: LD_VAR 0 2
51752: ARRAY
51753: PUSH
51754: LD_VAR 0 3
51758: ARRAY
51759: PPUSH
51760: CALL_OW 255
51764: PPUSH
51765: LD_EXP 68
51769: PUSH
51770: LD_VAR 0 2
51774: ARRAY
51775: PUSH
51776: LD_VAR 0 4
51780: ARRAY
51781: PUSH
51782: LD_INT 1
51784: ARRAY
51785: PPUSH
51786: LD_EXP 68
51790: PUSH
51791: LD_VAR 0 2
51795: ARRAY
51796: PUSH
51797: LD_VAR 0 4
51801: ARRAY
51802: PUSH
51803: LD_INT 2
51805: ARRAY
51806: PPUSH
51807: LD_INT 15
51809: PPUSH
51810: CALL 16292 0 4
51814: PUSH
51815: LD_INT 4
51817: ARRAY
51818: PUSH
51819: LD_EXP 69
51823: PUSH
51824: LD_VAR 0 2
51828: ARRAY
51829: PUSH
51830: LD_VAR 0 3
51834: ARRAY
51835: PPUSH
51836: LD_INT 10
51838: PPUSH
51839: CALL 17989 0 2
51843: PUSH
51844: LD_INT 4
51846: ARRAY
51847: OR
51848: AND
51849: IFFALSE 51872
// ComStop ( mc_miners [ i ] [ j ] ) ;
51851: LD_EXP 69
51855: PUSH
51856: LD_VAR 0 2
51860: ARRAY
51861: PUSH
51862: LD_VAR 0 3
51866: ARRAY
51867: PPUSH
51868: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
51872: LD_EXP 69
51876: PUSH
51877: LD_VAR 0 2
51881: ARRAY
51882: PUSH
51883: LD_VAR 0 3
51887: ARRAY
51888: PPUSH
51889: CALL_OW 257
51893: PUSH
51894: LD_INT 1
51896: EQUAL
51897: PUSH
51898: LD_EXP 69
51902: PUSH
51903: LD_VAR 0 2
51907: ARRAY
51908: PUSH
51909: LD_VAR 0 3
51913: ARRAY
51914: PPUSH
51915: CALL_OW 459
51919: NOT
51920: AND
51921: PUSH
51922: LD_EXP 69
51926: PUSH
51927: LD_VAR 0 2
51931: ARRAY
51932: PUSH
51933: LD_VAR 0 3
51937: ARRAY
51938: PPUSH
51939: CALL_OW 255
51943: PPUSH
51944: LD_EXP 68
51948: PUSH
51949: LD_VAR 0 2
51953: ARRAY
51954: PUSH
51955: LD_VAR 0 4
51959: ARRAY
51960: PUSH
51961: LD_INT 1
51963: ARRAY
51964: PPUSH
51965: LD_EXP 68
51969: PUSH
51970: LD_VAR 0 2
51974: ARRAY
51975: PUSH
51976: LD_VAR 0 4
51980: ARRAY
51981: PUSH
51982: LD_INT 2
51984: ARRAY
51985: PPUSH
51986: LD_INT 15
51988: PPUSH
51989: CALL 16292 0 4
51993: PUSH
51994: LD_INT 4
51996: ARRAY
51997: PUSH
51998: LD_INT 0
52000: EQUAL
52001: AND
52002: PUSH
52003: LD_EXP 69
52007: PUSH
52008: LD_VAR 0 2
52012: ARRAY
52013: PUSH
52014: LD_VAR 0 3
52018: ARRAY
52019: PPUSH
52020: CALL_OW 314
52024: NOT
52025: AND
52026: IFFALSE 52202
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
52028: LD_EXP 69
52032: PUSH
52033: LD_VAR 0 2
52037: ARRAY
52038: PUSH
52039: LD_VAR 0 3
52043: ARRAY
52044: PPUSH
52045: CALL_OW 310
52049: IFFALSE 52072
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
52051: LD_EXP 69
52055: PUSH
52056: LD_VAR 0 2
52060: ARRAY
52061: PUSH
52062: LD_VAR 0 3
52066: ARRAY
52067: PPUSH
52068: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
52072: LD_EXP 69
52076: PUSH
52077: LD_VAR 0 2
52081: ARRAY
52082: PUSH
52083: LD_VAR 0 3
52087: ARRAY
52088: PPUSH
52089: CALL_OW 314
52093: NOT
52094: IFFALSE 52162
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
52096: LD_EXP 69
52100: PUSH
52101: LD_VAR 0 2
52105: ARRAY
52106: PUSH
52107: LD_VAR 0 3
52111: ARRAY
52112: PPUSH
52113: LD_EXP 68
52117: PUSH
52118: LD_VAR 0 2
52122: ARRAY
52123: PUSH
52124: LD_VAR 0 4
52128: ARRAY
52129: PUSH
52130: LD_INT 1
52132: ARRAY
52133: PPUSH
52134: LD_EXP 68
52138: PUSH
52139: LD_VAR 0 2
52143: ARRAY
52144: PUSH
52145: LD_VAR 0 4
52149: ARRAY
52150: PUSH
52151: LD_INT 2
52153: ARRAY
52154: PPUSH
52155: LD_INT 0
52157: PPUSH
52158: CALL_OW 193
// k := k + 1 ;
52162: LD_ADDR_VAR 0 4
52166: PUSH
52167: LD_VAR 0 4
52171: PUSH
52172: LD_INT 1
52174: PLUS
52175: ST_TO_ADDR
// if k > mc_mines [ i ] then
52176: LD_VAR 0 4
52180: PUSH
52181: LD_EXP 68
52185: PUSH
52186: LD_VAR 0 2
52190: ARRAY
52191: GREATER
52192: IFFALSE 52202
// k := 1 ;
52194: LD_ADDR_VAR 0 4
52198: PUSH
52199: LD_INT 1
52201: ST_TO_ADDR
// end ; end ;
52202: GO 51634
52204: POP
52205: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
52206: LD_ADDR_VAR 0 5
52210: PUSH
52211: LD_EXP 55
52215: PUSH
52216: LD_VAR 0 2
52220: ARRAY
52221: PPUSH
52222: LD_INT 2
52224: PUSH
52225: LD_INT 30
52227: PUSH
52228: LD_INT 4
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 30
52237: PUSH
52238: LD_INT 5
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 30
52247: PUSH
52248: LD_INT 32
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: PPUSH
52261: CALL_OW 72
52265: ST_TO_ADDR
// if not tmp then
52266: LD_VAR 0 5
52270: NOT
52271: IFFALSE 52275
// continue ;
52273: GO 51551
// list := [ ] ;
52275: LD_ADDR_VAR 0 6
52279: PUSH
52280: EMPTY
52281: ST_TO_ADDR
// for j in tmp do
52282: LD_ADDR_VAR 0 3
52286: PUSH
52287: LD_VAR 0 5
52291: PUSH
52292: FOR_IN
52293: IFFALSE 52362
// begin for k in UnitsInside ( j ) do
52295: LD_ADDR_VAR 0 4
52299: PUSH
52300: LD_VAR 0 3
52304: PPUSH
52305: CALL_OW 313
52309: PUSH
52310: FOR_IN
52311: IFFALSE 52358
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
52313: LD_VAR 0 4
52317: PPUSH
52318: CALL_OW 257
52322: PUSH
52323: LD_INT 1
52325: EQUAL
52326: PUSH
52327: LD_VAR 0 4
52331: PPUSH
52332: CALL_OW 459
52336: NOT
52337: AND
52338: IFFALSE 52356
// list := list ^ k ;
52340: LD_ADDR_VAR 0 6
52344: PUSH
52345: LD_VAR 0 6
52349: PUSH
52350: LD_VAR 0 4
52354: ADD
52355: ST_TO_ADDR
52356: GO 52310
52358: POP
52359: POP
// end ;
52360: GO 52292
52362: POP
52363: POP
// list := list diff mc_miners [ i ] ;
52364: LD_ADDR_VAR 0 6
52368: PUSH
52369: LD_VAR 0 6
52373: PUSH
52374: LD_EXP 69
52378: PUSH
52379: LD_VAR 0 2
52383: ARRAY
52384: DIFF
52385: ST_TO_ADDR
// if not list then
52386: LD_VAR 0 6
52390: NOT
52391: IFFALSE 52395
// continue ;
52393: GO 51551
// k := mc_mines [ i ] - mc_miners [ i ] ;
52395: LD_ADDR_VAR 0 4
52399: PUSH
52400: LD_EXP 68
52404: PUSH
52405: LD_VAR 0 2
52409: ARRAY
52410: PUSH
52411: LD_EXP 69
52415: PUSH
52416: LD_VAR 0 2
52420: ARRAY
52421: MINUS
52422: ST_TO_ADDR
// if k > list then
52423: LD_VAR 0 4
52427: PUSH
52428: LD_VAR 0 6
52432: GREATER
52433: IFFALSE 52445
// k := list ;
52435: LD_ADDR_VAR 0 4
52439: PUSH
52440: LD_VAR 0 6
52444: ST_TO_ADDR
// for j = 1 to k do
52445: LD_ADDR_VAR 0 3
52449: PUSH
52450: DOUBLE
52451: LD_INT 1
52453: DEC
52454: ST_TO_ADDR
52455: LD_VAR 0 4
52459: PUSH
52460: FOR_TO
52461: IFFALSE 52515
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
52463: LD_ADDR_EXP 69
52467: PUSH
52468: LD_EXP 69
52472: PPUSH
52473: LD_VAR 0 2
52477: PUSH
52478: LD_EXP 69
52482: PUSH
52483: LD_VAR 0 2
52487: ARRAY
52488: PUSH
52489: LD_INT 1
52491: PLUS
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PPUSH
52497: LD_VAR 0 6
52501: PUSH
52502: LD_VAR 0 3
52506: ARRAY
52507: PPUSH
52508: CALL 15798 0 3
52512: ST_TO_ADDR
52513: GO 52460
52515: POP
52516: POP
// end ;
52517: GO 51551
52519: POP
52520: POP
// end ;
52521: LD_VAR 0 1
52525: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
52526: LD_INT 0
52528: PPUSH
52529: PPUSH
52530: PPUSH
52531: PPUSH
52532: PPUSH
52533: PPUSH
52534: PPUSH
52535: PPUSH
52536: PPUSH
// if not mc_bases then
52537: LD_EXP 55
52541: NOT
52542: IFFALSE 52546
// exit ;
52544: GO 53931
// for i = 1 to mc_bases do
52546: LD_ADDR_VAR 0 2
52550: PUSH
52551: DOUBLE
52552: LD_INT 1
52554: DEC
52555: ST_TO_ADDR
52556: LD_EXP 55
52560: PUSH
52561: FOR_TO
52562: IFFALSE 53929
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
52564: LD_EXP 55
52568: PUSH
52569: LD_VAR 0 2
52573: ARRAY
52574: NOT
52575: PUSH
52576: LD_EXP 62
52580: PUSH
52581: LD_VAR 0 2
52585: ARRAY
52586: OR
52587: IFFALSE 52591
// continue ;
52589: GO 52561
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
52591: LD_EXP 71
52595: PUSH
52596: LD_VAR 0 2
52600: ARRAY
52601: NOT
52602: PUSH
52603: LD_EXP 72
52607: PUSH
52608: LD_VAR 0 2
52612: ARRAY
52613: AND
52614: IFFALSE 52652
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
52616: LD_ADDR_EXP 72
52620: PUSH
52621: LD_EXP 72
52625: PPUSH
52626: LD_VAR 0 2
52630: PPUSH
52631: EMPTY
52632: PPUSH
52633: CALL_OW 1
52637: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
52638: LD_VAR 0 2
52642: PPUSH
52643: LD_INT 107
52645: PPUSH
52646: CALL 48240 0 2
// continue ;
52650: GO 52561
// end ; target := [ ] ;
52652: LD_ADDR_VAR 0 5
52656: PUSH
52657: EMPTY
52658: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
52659: LD_ADDR_VAR 0 3
52663: PUSH
52664: DOUBLE
52665: LD_EXP 71
52669: PUSH
52670: LD_VAR 0 2
52674: ARRAY
52675: INC
52676: ST_TO_ADDR
52677: LD_INT 1
52679: PUSH
52680: FOR_DOWNTO
52681: IFFALSE 52941
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
52683: LD_EXP 71
52687: PUSH
52688: LD_VAR 0 2
52692: ARRAY
52693: PUSH
52694: LD_VAR 0 3
52698: ARRAY
52699: PUSH
52700: LD_INT 2
52702: ARRAY
52703: PPUSH
52704: LD_EXP 71
52708: PUSH
52709: LD_VAR 0 2
52713: ARRAY
52714: PUSH
52715: LD_VAR 0 3
52719: ARRAY
52720: PUSH
52721: LD_INT 3
52723: ARRAY
52724: PPUSH
52725: CALL_OW 488
52729: PUSH
52730: LD_EXP 71
52734: PUSH
52735: LD_VAR 0 2
52739: ARRAY
52740: PUSH
52741: LD_VAR 0 3
52745: ARRAY
52746: PUSH
52747: LD_INT 2
52749: ARRAY
52750: PPUSH
52751: LD_EXP 71
52755: PUSH
52756: LD_VAR 0 2
52760: ARRAY
52761: PUSH
52762: LD_VAR 0 3
52766: ARRAY
52767: PUSH
52768: LD_INT 3
52770: ARRAY
52771: PPUSH
52772: CALL_OW 284
52776: PUSH
52777: LD_INT 0
52779: EQUAL
52780: AND
52781: IFFALSE 52836
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
52783: LD_ADDR_VAR 0 4
52787: PUSH
52788: LD_EXP 71
52792: PUSH
52793: LD_VAR 0 2
52797: ARRAY
52798: PPUSH
52799: LD_VAR 0 3
52803: PPUSH
52804: CALL_OW 3
52808: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
52809: LD_ADDR_EXP 71
52813: PUSH
52814: LD_EXP 71
52818: PPUSH
52819: LD_VAR 0 2
52823: PPUSH
52824: LD_VAR 0 4
52828: PPUSH
52829: CALL_OW 1
52833: ST_TO_ADDR
// continue ;
52834: GO 52680
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
52836: LD_EXP 55
52840: PUSH
52841: LD_VAR 0 2
52845: ARRAY
52846: PUSH
52847: LD_INT 1
52849: ARRAY
52850: PPUSH
52851: CALL_OW 255
52855: PPUSH
52856: LD_EXP 71
52860: PUSH
52861: LD_VAR 0 2
52865: ARRAY
52866: PUSH
52867: LD_VAR 0 3
52871: ARRAY
52872: PUSH
52873: LD_INT 2
52875: ARRAY
52876: PPUSH
52877: LD_EXP 71
52881: PUSH
52882: LD_VAR 0 2
52886: ARRAY
52887: PUSH
52888: LD_VAR 0 3
52892: ARRAY
52893: PUSH
52894: LD_INT 3
52896: ARRAY
52897: PPUSH
52898: LD_INT 20
52900: PPUSH
52901: CALL 16292 0 4
52905: PUSH
52906: LD_INT 4
52908: ARRAY
52909: PUSH
52910: LD_INT 0
52912: EQUAL
52913: IFFALSE 52939
// begin target := mc_crates [ i ] [ j ] ;
52915: LD_ADDR_VAR 0 5
52919: PUSH
52920: LD_EXP 71
52924: PUSH
52925: LD_VAR 0 2
52929: ARRAY
52930: PUSH
52931: LD_VAR 0 3
52935: ARRAY
52936: ST_TO_ADDR
// break ;
52937: GO 52941
// end ; end ;
52939: GO 52680
52941: POP
52942: POP
// if not target then
52943: LD_VAR 0 5
52947: NOT
52948: IFFALSE 52952
// continue ;
52950: GO 52561
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
52952: LD_ADDR_VAR 0 6
52956: PUSH
52957: LD_EXP 74
52961: PUSH
52962: LD_VAR 0 2
52966: ARRAY
52967: PPUSH
52968: LD_INT 2
52970: PUSH
52971: LD_INT 3
52973: PUSH
52974: LD_INT 58
52976: PUSH
52977: EMPTY
52978: LIST
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 61
52986: PUSH
52987: EMPTY
52988: LIST
52989: PUSH
52990: LD_INT 33
52992: PUSH
52993: LD_INT 5
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 33
53002: PUSH
53003: LD_INT 3
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 2
53019: PUSH
53020: LD_INT 34
53022: PUSH
53023: LD_INT 32
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 34
53032: PUSH
53033: LD_INT 51
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 34
53042: PUSH
53043: LD_INT 12
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PPUSH
53060: CALL_OW 72
53064: ST_TO_ADDR
// if not cargo then
53065: LD_VAR 0 6
53069: NOT
53070: IFFALSE 53464
// begin if mc_crates_collector [ i ] < 5 then
53072: LD_EXP 72
53076: PUSH
53077: LD_VAR 0 2
53081: ARRAY
53082: PUSH
53083: LD_INT 5
53085: LESS
53086: IFFALSE 53278
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
53088: LD_ADDR_VAR 0 4
53092: PUSH
53093: LD_EXP 55
53097: PUSH
53098: LD_VAR 0 2
53102: ARRAY
53103: PUSH
53104: LD_EXP 84
53108: PUSH
53109: LD_VAR 0 2
53113: ARRAY
53114: UNION
53115: PPUSH
53116: LD_INT 2
53118: PUSH
53119: LD_INT 25
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 25
53131: PUSH
53132: LD_INT 16
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 24
53146: PUSH
53147: LD_INT 750
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PPUSH
53158: CALL_OW 72
53162: ST_TO_ADDR
// if not tmp then
53163: LD_VAR 0 4
53167: NOT
53168: IFFALSE 53172
// continue ;
53170: GO 52561
// for j in tmp do
53172: LD_ADDR_VAR 0 3
53176: PUSH
53177: LD_VAR 0 4
53181: PUSH
53182: FOR_IN
53183: IFFALSE 53276
// if GetTag ( j ) = 0 then
53185: LD_VAR 0 3
53189: PPUSH
53190: CALL_OW 110
53194: PUSH
53195: LD_INT 0
53197: EQUAL
53198: IFFALSE 53274
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
53200: LD_ADDR_EXP 72
53204: PUSH
53205: LD_EXP 72
53209: PPUSH
53210: LD_VAR 0 2
53214: PUSH
53215: LD_EXP 72
53219: PUSH
53220: LD_VAR 0 2
53224: ARRAY
53225: PUSH
53226: LD_INT 1
53228: PLUS
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PPUSH
53234: LD_VAR 0 3
53238: PPUSH
53239: CALL 15798 0 3
53243: ST_TO_ADDR
// SetTag ( j , 107 ) ;
53244: LD_VAR 0 3
53248: PPUSH
53249: LD_INT 107
53251: PPUSH
53252: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
53256: LD_EXP 72
53260: PUSH
53261: LD_VAR 0 2
53265: ARRAY
53266: PUSH
53267: LD_INT 5
53269: GREATER
53270: IFFALSE 53274
// break ;
53272: GO 53276
// end ;
53274: GO 53182
53276: POP
53277: POP
// end ; if mc_crates_collector [ i ] and target then
53278: LD_EXP 72
53282: PUSH
53283: LD_VAR 0 2
53287: ARRAY
53288: PUSH
53289: LD_VAR 0 5
53293: AND
53294: IFFALSE 53462
// begin if mc_crates_collector [ i ] < target [ 1 ] then
53296: LD_EXP 72
53300: PUSH
53301: LD_VAR 0 2
53305: ARRAY
53306: PUSH
53307: LD_VAR 0 5
53311: PUSH
53312: LD_INT 1
53314: ARRAY
53315: LESS
53316: IFFALSE 53336
// tmp := mc_crates_collector [ i ] else
53318: LD_ADDR_VAR 0 4
53322: PUSH
53323: LD_EXP 72
53327: PUSH
53328: LD_VAR 0 2
53332: ARRAY
53333: ST_TO_ADDR
53334: GO 53350
// tmp := target [ 1 ] ;
53336: LD_ADDR_VAR 0 4
53340: PUSH
53341: LD_VAR 0 5
53345: PUSH
53346: LD_INT 1
53348: ARRAY
53349: ST_TO_ADDR
// for j = 1 to tmp do
53350: LD_ADDR_VAR 0 3
53354: PUSH
53355: DOUBLE
53356: LD_INT 1
53358: DEC
53359: ST_TO_ADDR
53360: LD_VAR 0 4
53364: PUSH
53365: FOR_TO
53366: IFFALSE 53460
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
53368: LD_EXP 72
53372: PUSH
53373: LD_VAR 0 2
53377: ARRAY
53378: PUSH
53379: LD_VAR 0 3
53383: ARRAY
53384: PPUSH
53385: CALL_OW 310
53389: IFFALSE 53412
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
53391: LD_EXP 72
53395: PUSH
53396: LD_VAR 0 2
53400: ARRAY
53401: PUSH
53402: LD_VAR 0 3
53406: ARRAY
53407: PPUSH
53408: CALL_OW 122
// wait ( 3 ) ;
53412: LD_INT 3
53414: PPUSH
53415: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
53419: LD_EXP 72
53423: PUSH
53424: LD_VAR 0 2
53428: ARRAY
53429: PUSH
53430: LD_VAR 0 3
53434: ARRAY
53435: PPUSH
53436: LD_VAR 0 5
53440: PUSH
53441: LD_INT 2
53443: ARRAY
53444: PPUSH
53445: LD_VAR 0 5
53449: PUSH
53450: LD_INT 3
53452: ARRAY
53453: PPUSH
53454: CALL_OW 117
// end ;
53458: GO 53365
53460: POP
53461: POP
// end ; end else
53462: GO 53927
// begin for j in cargo do
53464: LD_ADDR_VAR 0 3
53468: PUSH
53469: LD_VAR 0 6
53473: PUSH
53474: FOR_IN
53475: IFFALSE 53925
// begin if GetTag ( j ) <> 0 then
53477: LD_VAR 0 3
53481: PPUSH
53482: CALL_OW 110
53486: PUSH
53487: LD_INT 0
53489: NONEQUAL
53490: IFFALSE 53494
// continue ;
53492: GO 53474
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
53494: LD_VAR 0 3
53498: PPUSH
53499: CALL_OW 262
53503: PUSH
53504: LD_INT 2
53506: EQUAL
53507: PUSH
53508: LD_VAR 0 3
53512: PPUSH
53513: CALL_OW 261
53517: PUSH
53518: LD_INT 15
53520: LESS
53521: AND
53522: IFFALSE 53526
// continue ;
53524: GO 53474
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
53526: LD_VAR 0 3
53530: PPUSH
53531: CALL_OW 262
53535: PUSH
53536: LD_INT 1
53538: EQUAL
53539: PUSH
53540: LD_VAR 0 3
53544: PPUSH
53545: CALL_OW 261
53549: PUSH
53550: LD_INT 10
53552: LESS
53553: AND
53554: IFFALSE 53864
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
53556: LD_ADDR_VAR 0 7
53560: PUSH
53561: LD_EXP 55
53565: PUSH
53566: LD_VAR 0 2
53570: ARRAY
53571: PPUSH
53572: LD_INT 2
53574: PUSH
53575: LD_INT 30
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 30
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: LIST
53599: PPUSH
53600: CALL_OW 72
53604: ST_TO_ADDR
// if not depot then
53605: LD_VAR 0 7
53609: NOT
53610: IFFALSE 53614
// continue ;
53612: GO 53474
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
53614: LD_VAR 0 3
53618: PPUSH
53619: LD_VAR 0 7
53623: PPUSH
53624: LD_VAR 0 3
53628: PPUSH
53629: CALL_OW 74
53633: PPUSH
53634: CALL_OW 296
53638: PUSH
53639: LD_INT 6
53641: LESS
53642: IFFALSE 53658
// SetFuel ( j , 100 ) else
53644: LD_VAR 0 3
53648: PPUSH
53649: LD_INT 100
53651: PPUSH
53652: CALL_OW 240
53656: GO 53864
// if GetFuel ( j ) = 0 then
53658: LD_VAR 0 3
53662: PPUSH
53663: CALL_OW 261
53667: PUSH
53668: LD_INT 0
53670: EQUAL
53671: IFFALSE 53864
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
53673: LD_ADDR_EXP 74
53677: PUSH
53678: LD_EXP 74
53682: PPUSH
53683: LD_VAR 0 2
53687: PPUSH
53688: LD_EXP 74
53692: PUSH
53693: LD_VAR 0 2
53697: ARRAY
53698: PUSH
53699: LD_VAR 0 3
53703: DIFF
53704: PPUSH
53705: CALL_OW 1
53709: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
53710: LD_VAR 0 3
53714: PPUSH
53715: CALL_OW 263
53719: PUSH
53720: LD_INT 1
53722: EQUAL
53723: IFFALSE 53739
// ComExitVehicle ( IsInUnit ( j ) ) ;
53725: LD_VAR 0 3
53729: PPUSH
53730: CALL_OW 310
53734: PPUSH
53735: CALL_OW 121
// if GetControl ( j ) = control_remote then
53739: LD_VAR 0 3
53743: PPUSH
53744: CALL_OW 263
53748: PUSH
53749: LD_INT 2
53751: EQUAL
53752: IFFALSE 53763
// ComUnlink ( j ) ;
53754: LD_VAR 0 3
53758: PPUSH
53759: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
53763: LD_ADDR_VAR 0 8
53767: PUSH
53768: LD_VAR 0 2
53772: PPUSH
53773: LD_INT 3
53775: PPUSH
53776: CALL 60336 0 2
53780: ST_TO_ADDR
// if fac then
53781: LD_VAR 0 8
53785: IFFALSE 53862
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
53787: LD_ADDR_VAR 0 9
53791: PUSH
53792: LD_VAR 0 8
53796: PPUSH
53797: LD_VAR 0 3
53801: PPUSH
53802: CALL_OW 265
53806: PPUSH
53807: LD_VAR 0 3
53811: PPUSH
53812: CALL_OW 262
53816: PPUSH
53817: LD_VAR 0 3
53821: PPUSH
53822: CALL_OW 263
53826: PPUSH
53827: LD_VAR 0 3
53831: PPUSH
53832: CALL_OW 264
53836: PPUSH
53837: CALL 12963 0 5
53841: ST_TO_ADDR
// if components then
53842: LD_VAR 0 9
53846: IFFALSE 53862
// MC_InsertProduceList ( i , components ) ;
53848: LD_VAR 0 2
53852: PPUSH
53853: LD_VAR 0 9
53857: PPUSH
53858: CALL 59999 0 2
// end ; continue ;
53862: GO 53474
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
53864: LD_VAR 0 3
53868: PPUSH
53869: LD_INT 1
53871: PPUSH
53872: CALL_OW 289
53876: PUSH
53877: LD_INT 100
53879: LESS
53880: PUSH
53881: LD_VAR 0 3
53885: PPUSH
53886: CALL_OW 314
53890: NOT
53891: AND
53892: IFFALSE 53921
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
53894: LD_VAR 0 3
53898: PPUSH
53899: LD_VAR 0 5
53903: PUSH
53904: LD_INT 2
53906: ARRAY
53907: PPUSH
53908: LD_VAR 0 5
53912: PUSH
53913: LD_INT 3
53915: ARRAY
53916: PPUSH
53917: CALL_OW 117
// break ;
53921: GO 53925
// end ;
53923: GO 53474
53925: POP
53926: POP
// end ; end ;
53927: GO 52561
53929: POP
53930: POP
// end ;
53931: LD_VAR 0 1
53935: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
53936: LD_INT 0
53938: PPUSH
53939: PPUSH
53940: PPUSH
53941: PPUSH
// if not mc_bases then
53942: LD_EXP 55
53946: NOT
53947: IFFALSE 53951
// exit ;
53949: GO 54112
// for i = 1 to mc_bases do
53951: LD_ADDR_VAR 0 2
53955: PUSH
53956: DOUBLE
53957: LD_INT 1
53959: DEC
53960: ST_TO_ADDR
53961: LD_EXP 55
53965: PUSH
53966: FOR_TO
53967: IFFALSE 54110
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
53969: LD_ADDR_VAR 0 4
53973: PUSH
53974: LD_EXP 74
53978: PUSH
53979: LD_VAR 0 2
53983: ARRAY
53984: PUSH
53985: LD_EXP 77
53989: PUSH
53990: LD_VAR 0 2
53994: ARRAY
53995: ADD
53996: PPUSH
53997: LD_INT 33
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PPUSH
54007: CALL_OW 72
54011: ST_TO_ADDR
// if tmp then
54012: LD_VAR 0 4
54016: IFFALSE 54108
// for j in tmp do
54018: LD_ADDR_VAR 0 3
54022: PUSH
54023: LD_VAR 0 4
54027: PUSH
54028: FOR_IN
54029: IFFALSE 54106
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
54031: LD_VAR 0 3
54035: PPUSH
54036: CALL_OW 312
54040: NOT
54041: PUSH
54042: LD_VAR 0 3
54046: PPUSH
54047: CALL_OW 256
54051: PUSH
54052: LD_INT 250
54054: GREATEREQUAL
54055: AND
54056: IFFALSE 54069
// Connect ( j ) else
54058: LD_VAR 0 3
54062: PPUSH
54063: CALL 18286 0 1
54067: GO 54104
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
54069: LD_VAR 0 3
54073: PPUSH
54074: CALL_OW 256
54078: PUSH
54079: LD_INT 250
54081: LESS
54082: PUSH
54083: LD_VAR 0 3
54087: PPUSH
54088: CALL_OW 312
54092: AND
54093: IFFALSE 54104
// ComUnlink ( j ) ;
54095: LD_VAR 0 3
54099: PPUSH
54100: CALL_OW 136
54104: GO 54028
54106: POP
54107: POP
// end ;
54108: GO 53966
54110: POP
54111: POP
// end ;
54112: LD_VAR 0 1
54116: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
54117: LD_INT 0
54119: PPUSH
54120: PPUSH
54121: PPUSH
54122: PPUSH
54123: PPUSH
// if not mc_bases then
54124: LD_EXP 55
54128: NOT
54129: IFFALSE 54133
// exit ;
54131: GO 54593
// for i = 1 to mc_bases do
54133: LD_ADDR_VAR 0 2
54137: PUSH
54138: DOUBLE
54139: LD_INT 1
54141: DEC
54142: ST_TO_ADDR
54143: LD_EXP 55
54147: PUSH
54148: FOR_TO
54149: IFFALSE 54591
// begin if not mc_produce [ i ] then
54151: LD_EXP 76
54155: PUSH
54156: LD_VAR 0 2
54160: ARRAY
54161: NOT
54162: IFFALSE 54166
// continue ;
54164: GO 54148
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
54166: LD_ADDR_VAR 0 5
54170: PUSH
54171: LD_EXP 55
54175: PUSH
54176: LD_VAR 0 2
54180: ARRAY
54181: PPUSH
54182: LD_INT 30
54184: PUSH
54185: LD_INT 3
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PPUSH
54192: CALL_OW 72
54196: ST_TO_ADDR
// if not fac then
54197: LD_VAR 0 5
54201: NOT
54202: IFFALSE 54206
// continue ;
54204: GO 54148
// for j in fac do
54206: LD_ADDR_VAR 0 3
54210: PUSH
54211: LD_VAR 0 5
54215: PUSH
54216: FOR_IN
54217: IFFALSE 54587
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
54219: LD_VAR 0 3
54223: PPUSH
54224: CALL_OW 461
54228: PUSH
54229: LD_INT 2
54231: NONEQUAL
54232: PUSH
54233: LD_VAR 0 3
54237: PPUSH
54238: LD_INT 15
54240: PPUSH
54241: CALL 17989 0 2
54245: PUSH
54246: LD_INT 4
54248: ARRAY
54249: OR
54250: PUSH
54251: LD_VAR 0 3
54255: PPUSH
54256: CALL_OW 313
54260: PUSH
54261: LD_INT 0
54263: EQUAL
54264: OR
54265: IFFALSE 54269
// continue ;
54267: GO 54216
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
54269: LD_VAR 0 3
54273: PPUSH
54274: LD_EXP 76
54278: PUSH
54279: LD_VAR 0 2
54283: ARRAY
54284: PUSH
54285: LD_INT 1
54287: ARRAY
54288: PUSH
54289: LD_INT 1
54291: ARRAY
54292: PPUSH
54293: LD_EXP 76
54297: PUSH
54298: LD_VAR 0 2
54302: ARRAY
54303: PUSH
54304: LD_INT 1
54306: ARRAY
54307: PUSH
54308: LD_INT 2
54310: ARRAY
54311: PPUSH
54312: LD_EXP 76
54316: PUSH
54317: LD_VAR 0 2
54321: ARRAY
54322: PUSH
54323: LD_INT 1
54325: ARRAY
54326: PUSH
54327: LD_INT 3
54329: ARRAY
54330: PPUSH
54331: LD_EXP 76
54335: PUSH
54336: LD_VAR 0 2
54340: ARRAY
54341: PUSH
54342: LD_INT 1
54344: ARRAY
54345: PUSH
54346: LD_INT 4
54348: ARRAY
54349: PPUSH
54350: CALL_OW 448
54354: PUSH
54355: LD_VAR 0 3
54359: PPUSH
54360: LD_EXP 76
54364: PUSH
54365: LD_VAR 0 2
54369: ARRAY
54370: PUSH
54371: LD_INT 1
54373: ARRAY
54374: PUSH
54375: LD_INT 1
54377: ARRAY
54378: PUSH
54379: LD_EXP 76
54383: PUSH
54384: LD_VAR 0 2
54388: ARRAY
54389: PUSH
54390: LD_INT 1
54392: ARRAY
54393: PUSH
54394: LD_INT 2
54396: ARRAY
54397: PUSH
54398: LD_EXP 76
54402: PUSH
54403: LD_VAR 0 2
54407: ARRAY
54408: PUSH
54409: LD_INT 1
54411: ARRAY
54412: PUSH
54413: LD_INT 3
54415: ARRAY
54416: PUSH
54417: LD_EXP 76
54421: PUSH
54422: LD_VAR 0 2
54426: ARRAY
54427: PUSH
54428: LD_INT 1
54430: ARRAY
54431: PUSH
54432: LD_INT 4
54434: ARRAY
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: PPUSH
54442: CALL 21491 0 2
54446: AND
54447: IFFALSE 54585
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
54449: LD_VAR 0 3
54453: PPUSH
54454: LD_EXP 76
54458: PUSH
54459: LD_VAR 0 2
54463: ARRAY
54464: PUSH
54465: LD_INT 1
54467: ARRAY
54468: PUSH
54469: LD_INT 1
54471: ARRAY
54472: PPUSH
54473: LD_EXP 76
54477: PUSH
54478: LD_VAR 0 2
54482: ARRAY
54483: PUSH
54484: LD_INT 1
54486: ARRAY
54487: PUSH
54488: LD_INT 2
54490: ARRAY
54491: PPUSH
54492: LD_EXP 76
54496: PUSH
54497: LD_VAR 0 2
54501: ARRAY
54502: PUSH
54503: LD_INT 1
54505: ARRAY
54506: PUSH
54507: LD_INT 3
54509: ARRAY
54510: PPUSH
54511: LD_EXP 76
54515: PUSH
54516: LD_VAR 0 2
54520: ARRAY
54521: PUSH
54522: LD_INT 1
54524: ARRAY
54525: PUSH
54526: LD_INT 4
54528: ARRAY
54529: PPUSH
54530: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
54534: LD_ADDR_VAR 0 4
54538: PUSH
54539: LD_EXP 76
54543: PUSH
54544: LD_VAR 0 2
54548: ARRAY
54549: PPUSH
54550: LD_INT 1
54552: PPUSH
54553: CALL_OW 3
54557: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
54558: LD_ADDR_EXP 76
54562: PUSH
54563: LD_EXP 76
54567: PPUSH
54568: LD_VAR 0 2
54572: PPUSH
54573: LD_VAR 0 4
54577: PPUSH
54578: CALL_OW 1
54582: ST_TO_ADDR
// break ;
54583: GO 54587
// end ; end ;
54585: GO 54216
54587: POP
54588: POP
// end ;
54589: GO 54148
54591: POP
54592: POP
// end ;
54593: LD_VAR 0 1
54597: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
54598: LD_INT 0
54600: PPUSH
54601: PPUSH
54602: PPUSH
// if not mc_bases then
54603: LD_EXP 55
54607: NOT
54608: IFFALSE 54612
// exit ;
54610: GO 54701
// for i = 1 to mc_bases do
54612: LD_ADDR_VAR 0 2
54616: PUSH
54617: DOUBLE
54618: LD_INT 1
54620: DEC
54621: ST_TO_ADDR
54622: LD_EXP 55
54626: PUSH
54627: FOR_TO
54628: IFFALSE 54699
// begin if mc_attack [ i ] then
54630: LD_EXP 75
54634: PUSH
54635: LD_VAR 0 2
54639: ARRAY
54640: IFFALSE 54697
// begin tmp := mc_attack [ i ] [ 1 ] ;
54642: LD_ADDR_VAR 0 3
54646: PUSH
54647: LD_EXP 75
54651: PUSH
54652: LD_VAR 0 2
54656: ARRAY
54657: PUSH
54658: LD_INT 1
54660: ARRAY
54661: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
54662: LD_ADDR_EXP 75
54666: PUSH
54667: LD_EXP 75
54671: PPUSH
54672: LD_VAR 0 2
54676: PPUSH
54677: EMPTY
54678: PPUSH
54679: CALL_OW 1
54683: ST_TO_ADDR
// Attack ( tmp ) ;
54684: LD_VAR 0 3
54688: PPUSH
54689: CALL 43138 0 1
// exit ;
54693: POP
54694: POP
54695: GO 54701
// end ; end ;
54697: GO 54627
54699: POP
54700: POP
// end ;
54701: LD_VAR 0 1
54705: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
54706: LD_INT 0
54708: PPUSH
54709: PPUSH
54710: PPUSH
54711: PPUSH
54712: PPUSH
54713: PPUSH
54714: PPUSH
// if not mc_bases then
54715: LD_EXP 55
54719: NOT
54720: IFFALSE 54724
// exit ;
54722: GO 55069
// class := AllowSpecClass ( mc_defender [ 1 ] ) ;
54724: LD_ADDR_VAR 0 7
54728: PUSH
54729: LD_EXP 77
54733: PUSH
54734: LD_INT 1
54736: ARRAY
54737: PPUSH
54738: CALL 12303 0 1
54742: ST_TO_ADDR
// for i = 1 to mc_bases do
54743: LD_ADDR_VAR 0 2
54747: PUSH
54748: DOUBLE
54749: LD_INT 1
54751: DEC
54752: ST_TO_ADDR
54753: LD_EXP 55
54757: PUSH
54758: FOR_TO
54759: IFFALSE 55067
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ 1 ] ) , mc_scan_area [ i ] ) ) ;
54761: LD_ADDR_EXP 78
54765: PUSH
54766: LD_EXP 78
54770: PPUSH
54771: LD_VAR 0 2
54775: PPUSH
54776: LD_EXP 55
54780: PUSH
54781: LD_INT 1
54783: ARRAY
54784: PPUSH
54785: CALL_OW 255
54789: PPUSH
54790: LD_EXP 80
54794: PUSH
54795: LD_VAR 0 2
54799: ARRAY
54800: PPUSH
54801: CALL 10761 0 2
54805: PPUSH
54806: CALL_OW 1
54810: ST_TO_ADDR
// if not mc_scan [ i ] then
54811: LD_EXP 78
54815: PUSH
54816: LD_VAR 0 2
54820: ARRAY
54821: NOT
54822: IFFALSE 54974
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
54824: LD_ADDR_VAR 0 4
54828: PUSH
54829: LD_EXP 55
54833: PUSH
54834: LD_VAR 0 2
54838: ARRAY
54839: PPUSH
54840: LD_INT 2
54842: PUSH
54843: LD_INT 25
54845: PUSH
54846: LD_INT 5
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 25
54855: PUSH
54856: LD_INT 8
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 25
54865: PUSH
54866: LD_INT 9
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: PPUSH
54879: CALL_OW 72
54883: ST_TO_ADDR
// if not tmp then
54884: LD_VAR 0 4
54888: NOT
54889: IFFALSE 54893
// continue ;
54891: GO 54758
// for j in tmp do
54893: LD_ADDR_VAR 0 3
54897: PUSH
54898: LD_VAR 0 4
54902: PUSH
54903: FOR_IN
54904: IFFALSE 54972
// if GetBType ( IsInUnit ( j ) ) in [ b_barracks ] and GetClass ( j ) = 1 and not MineOfUnit ( j ) then
54906: LD_VAR 0 3
54910: PPUSH
54911: CALL_OW 310
54915: PPUSH
54916: CALL_OW 266
54920: PUSH
54921: LD_INT 5
54923: PUSH
54924: EMPTY
54925: LIST
54926: IN
54927: PUSH
54928: LD_VAR 0 3
54932: PPUSH
54933: CALL_OW 257
54937: PUSH
54938: LD_INT 1
54940: EQUAL
54941: AND
54942: PUSH
54943: LD_VAR 0 3
54947: PPUSH
54948: CALL_OW 459
54952: NOT
54953: AND
54954: IFFALSE 54970
// ComChangeProfession ( j , class ) ;
54956: LD_VAR 0 3
54960: PPUSH
54961: LD_VAR 0 7
54965: PPUSH
54966: CALL_OW 123
54970: GO 54903
54972: POP
54973: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
54974: LD_EXP 78
54978: PUSH
54979: LD_VAR 0 2
54983: ARRAY
54984: PUSH
54985: LD_EXP 77
54989: PUSH
54990: LD_VAR 0 2
54994: ARRAY
54995: AND
54996: IFFALSE 55065
// begin tmp := mc_defender [ i ] ;
54998: LD_ADDR_VAR 0 4
55002: PUSH
55003: LD_EXP 77
55007: PUSH
55008: LD_VAR 0 2
55012: ARRAY
55013: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
55014: LD_ADDR_EXP 77
55018: PUSH
55019: LD_EXP 77
55023: PPUSH
55024: LD_VAR 0 2
55028: PPUSH
55029: EMPTY
55030: PPUSH
55031: CALL_OW 1
55035: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
55036: LD_VAR 0 2
55040: PPUSH
55041: LD_VAR 0 4
55045: PPUSH
55046: LD_EXP 78
55050: PUSH
55051: LD_VAR 0 2
55055: ARRAY
55056: PPUSH
55057: CALL 10796 0 3
// exit ;
55061: POP
55062: POP
55063: GO 55069
// end ; end ;
55065: GO 54758
55067: POP
55068: POP
// end ;
55069: LD_VAR 0 1
55073: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tech_temp , tmp2 ; begin
55074: LD_INT 0
55076: PPUSH
55077: PPUSH
55078: PPUSH
55079: PPUSH
55080: PPUSH
55081: PPUSH
55082: PPUSH
55083: PPUSH
55084: PPUSH
55085: PPUSH
// if not mc_bases then
55086: LD_EXP 55
55090: NOT
55091: IFFALSE 55095
// exit ;
55093: GO 55994
// for i = 1 to mc_bases do
55095: LD_ADDR_VAR 0 2
55099: PUSH
55100: DOUBLE
55101: LD_INT 1
55103: DEC
55104: ST_TO_ADDR
55105: LD_EXP 55
55109: PUSH
55110: FOR_TO
55111: IFFALSE 55992
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
55113: LD_ADDR_VAR 0 6
55117: PUSH
55118: LD_EXP 55
55122: PUSH
55123: LD_VAR 0 2
55127: ARRAY
55128: PPUSH
55129: LD_INT 2
55131: PUSH
55132: LD_INT 30
55134: PUSH
55135: LD_INT 6
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 30
55144: PUSH
55145: LD_INT 7
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 30
55154: PUSH
55155: LD_INT 8
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: PPUSH
55168: CALL_OW 72
55172: ST_TO_ADDR
// if not tmp then
55173: LD_VAR 0 6
55177: NOT
55178: IFFALSE 55182
// continue ;
55180: GO 55110
// for j in tmp do
55182: LD_ADDR_VAR 0 3
55186: PUSH
55187: LD_VAR 0 6
55191: PUSH
55192: FOR_IN
55193: IFFALSE 55988
// begin side := GetSide ( j ) ;
55195: LD_ADDR_VAR 0 4
55199: PUSH
55200: LD_VAR 0 3
55204: PPUSH
55205: CALL_OW 255
55209: ST_TO_ADDR
// if not mc_tech [ side ] then
55210: LD_EXP 82
55214: PUSH
55215: LD_VAR 0 4
55219: ARRAY
55220: NOT
55221: IFFALSE 55225
// continue ;
55223: GO 55192
// if BuildingStatus ( j ) = bs_idle then
55225: LD_VAR 0 3
55229: PPUSH
55230: CALL_OW 461
55234: PUSH
55235: LD_INT 2
55237: EQUAL
55238: IFFALSE 55295
// for t in mc_tech [ side ] do
55240: LD_ADDR_VAR 0 5
55244: PUSH
55245: LD_EXP 82
55249: PUSH
55250: LD_VAR 0 4
55254: ARRAY
55255: PUSH
55256: FOR_IN
55257: IFFALSE 55293
// if CanBeResearched ( j , t ) then
55259: LD_VAR 0 3
55263: PPUSH
55264: LD_VAR 0 5
55268: PPUSH
55269: CALL_OW 430
55273: IFFALSE 55291
// begin ComResearch ( j , t ) ;
55275: LD_VAR 0 3
55279: PPUSH
55280: LD_VAR 0 5
55284: PPUSH
55285: CALL_OW 124
// break ;
55289: GO 55293
// end ;
55291: GO 55256
55293: POP
55294: POP
// if BuildingStatus ( j ) = bs_need_ape then
55295: LD_VAR 0 3
55299: PPUSH
55300: CALL_OW 461
55304: PUSH
55305: LD_INT 10
55307: EQUAL
55308: IFFALSE 55823
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
55310: LD_EXP 84
55314: PUSH
55315: LD_VAR 0 2
55319: ARRAY
55320: NOT
55321: PUSH
55322: LD_EXP 85
55326: PUSH
55327: LD_VAR 0 2
55331: ARRAY
55332: NOT
55333: AND
55334: PUSH
55335: LD_EXP 82
55339: PUSH
55340: LD_VAR 0 4
55344: ARRAY
55345: PUSH
55346: LD_INT 1
55348: GREATER
55349: AND
55350: IFFALSE 55426
// begin ComCancel ( j ) ;
55352: LD_VAR 0 3
55356: PPUSH
55357: CALL_OW 127
// tech_temp := Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ;
55361: LD_ADDR_VAR 0 9
55365: PUSH
55366: LD_EXP 82
55370: PUSH
55371: LD_VAR 0 4
55375: ARRAY
55376: PPUSH
55377: LD_EXP 82
55381: PUSH
55382: LD_VAR 0 4
55386: ARRAY
55387: PPUSH
55388: LD_INT 1
55390: PPUSH
55391: LD_INT 0
55393: PPUSH
55394: CALL 14781 0 4
55398: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , tech_temp ) ;
55399: LD_ADDR_EXP 82
55403: PUSH
55404: LD_EXP 82
55408: PPUSH
55409: LD_VAR 0 4
55413: PPUSH
55414: LD_VAR 0 9
55418: PPUSH
55419: CALL_OW 1
55423: ST_TO_ADDR
// continue ;
55424: GO 55192
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
55426: LD_EXP 84
55430: PUSH
55431: LD_VAR 0 2
55435: ARRAY
55436: PUSH
55437: LD_EXP 85
55441: PUSH
55442: LD_VAR 0 2
55446: ARRAY
55447: NOT
55448: AND
55449: IFFALSE 55576
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
55451: LD_ADDR_EXP 85
55455: PUSH
55456: LD_EXP 85
55460: PPUSH
55461: LD_VAR 0 2
55465: PUSH
55466: LD_EXP 85
55470: PUSH
55471: LD_VAR 0 2
55475: ARRAY
55476: PUSH
55477: LD_INT 1
55479: PLUS
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PPUSH
55485: LD_EXP 84
55489: PUSH
55490: LD_VAR 0 2
55494: ARRAY
55495: PUSH
55496: LD_INT 1
55498: ARRAY
55499: PPUSH
55500: CALL 15798 0 3
55504: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
55505: LD_EXP 84
55509: PUSH
55510: LD_VAR 0 2
55514: ARRAY
55515: PUSH
55516: LD_INT 1
55518: ARRAY
55519: PPUSH
55520: LD_INT 112
55522: PPUSH
55523: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
55527: LD_ADDR_VAR 0 10
55531: PUSH
55532: LD_EXP 84
55536: PUSH
55537: LD_VAR 0 2
55541: ARRAY
55542: PPUSH
55543: LD_INT 1
55545: PPUSH
55546: CALL_OW 3
55550: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
55551: LD_ADDR_EXP 84
55555: PUSH
55556: LD_EXP 84
55560: PPUSH
55561: LD_VAR 0 2
55565: PPUSH
55566: LD_VAR 0 10
55570: PPUSH
55571: CALL_OW 1
55575: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
55576: LD_EXP 84
55580: PUSH
55581: LD_VAR 0 2
55585: ARRAY
55586: PUSH
55587: LD_EXP 85
55591: PUSH
55592: LD_VAR 0 2
55596: ARRAY
55597: AND
55598: PUSH
55599: LD_EXP 85
55603: PUSH
55604: LD_VAR 0 2
55608: ARRAY
55609: PUSH
55610: LD_INT 1
55612: ARRAY
55613: PPUSH
55614: CALL_OW 310
55618: NOT
55619: AND
55620: PUSH
55621: LD_VAR 0 3
55625: PPUSH
55626: CALL_OW 313
55630: PUSH
55631: LD_INT 6
55633: EQUAL
55634: AND
55635: IFFALSE 55691
// begin tmp2 := UnitsInside ( j ) ;
55637: LD_ADDR_VAR 0 10
55641: PUSH
55642: LD_VAR 0 3
55646: PPUSH
55647: CALL_OW 313
55651: ST_TO_ADDR
// if tmp2 = 6 then
55652: LD_VAR 0 10
55656: PUSH
55657: LD_INT 6
55659: EQUAL
55660: IFFALSE 55691
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
55662: LD_VAR 0 10
55666: PUSH
55667: LD_INT 1
55669: ARRAY
55670: PPUSH
55671: LD_INT 112
55673: PPUSH
55674: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
55678: LD_VAR 0 10
55682: PUSH
55683: LD_INT 1
55685: ARRAY
55686: PPUSH
55687: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) in mc_lab [ i ] then
55691: LD_EXP 85
55695: PUSH
55696: LD_VAR 0 2
55700: ARRAY
55701: PUSH
55702: LD_EXP 85
55706: PUSH
55707: LD_VAR 0 2
55711: ARRAY
55712: PUSH
55713: LD_INT 1
55715: ARRAY
55716: PPUSH
55717: CALL_OW 314
55721: NOT
55722: AND
55723: PUSH
55724: LD_EXP 85
55728: PUSH
55729: LD_VAR 0 2
55733: ARRAY
55734: PUSH
55735: LD_INT 1
55737: ARRAY
55738: PPUSH
55739: CALL_OW 310
55743: PUSH
55744: LD_EXP 88
55748: PUSH
55749: LD_VAR 0 2
55753: ARRAY
55754: IN
55755: NOT
55756: AND
55757: IFFALSE 55823
// begin if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
55759: LD_EXP 85
55763: PUSH
55764: LD_VAR 0 2
55768: ARRAY
55769: PUSH
55770: LD_INT 1
55772: ARRAY
55773: PPUSH
55774: CALL_OW 310
55778: IFFALSE 55799
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
55780: LD_EXP 85
55784: PUSH
55785: LD_VAR 0 2
55789: ARRAY
55790: PUSH
55791: LD_INT 1
55793: ARRAY
55794: PPUSH
55795: CALL_OW 122
// AddComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
55799: LD_EXP 85
55803: PUSH
55804: LD_VAR 0 2
55808: ARRAY
55809: PUSH
55810: LD_INT 1
55812: ARRAY
55813: PPUSH
55814: LD_VAR 0 3
55818: PPUSH
55819: CALL_OW 180
// end ; end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
55823: LD_VAR 0 3
55827: PPUSH
55828: CALL_OW 461
55832: PUSH
55833: LD_INT 6
55835: EQUAL
55836: PUSH
55837: LD_VAR 0 6
55841: PUSH
55842: LD_INT 1
55844: GREATER
55845: AND
55846: IFFALSE 55986
// begin sci := [ ] ;
55848: LD_ADDR_VAR 0 8
55852: PUSH
55853: EMPTY
55854: ST_TO_ADDR
// for x in tmp diff j do
55855: LD_ADDR_VAR 0 7
55859: PUSH
55860: LD_VAR 0 6
55864: PUSH
55865: LD_VAR 0 3
55869: DIFF
55870: PUSH
55871: FOR_IN
55872: IFFALSE 55912
// begin if BuildingStatus ( x ) = bs_idle then
55874: LD_VAR 0 7
55878: PPUSH
55879: CALL_OW 461
55883: PUSH
55884: LD_INT 2
55886: EQUAL
55887: IFFALSE 55910
// sci := sci ^ UnitsInside ( x ) ;
55889: LD_ADDR_VAR 0 8
55893: PUSH
55894: LD_VAR 0 8
55898: PUSH
55899: LD_VAR 0 7
55903: PPUSH
55904: CALL_OW 313
55908: ADD
55909: ST_TO_ADDR
// end ;
55910: GO 55871
55912: POP
55913: POP
// if not sci then
55914: LD_VAR 0 8
55918: NOT
55919: IFFALSE 55923
// continue ;
55921: GO 55192
// for x in sci do
55923: LD_ADDR_VAR 0 7
55927: PUSH
55928: LD_VAR 0 8
55932: PUSH
55933: FOR_IN
55934: IFFALSE 55984
// if IsInUnit ( x ) and not HasTask ( x ) then
55936: LD_VAR 0 7
55940: PPUSH
55941: CALL_OW 310
55945: PUSH
55946: LD_VAR 0 7
55950: PPUSH
55951: CALL_OW 314
55955: NOT
55956: AND
55957: IFFALSE 55982
// begin ComExitBuilding ( x ) ;
55959: LD_VAR 0 7
55963: PPUSH
55964: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
55968: LD_VAR 0 7
55972: PPUSH
55973: LD_VAR 0 3
55977: PPUSH
55978: CALL_OW 180
// end ;
55982: GO 55933
55984: POP
55985: POP
// end ; end ;
55986: GO 55192
55988: POP
55989: POP
// end ;
55990: GO 55110
55992: POP
55993: POP
// end ;
55994: LD_VAR 0 1
55998: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
55999: LD_INT 0
56001: PPUSH
56002: PPUSH
56003: PPUSH
56004: PPUSH
56005: PPUSH
56006: PPUSH
// if not mc_bases then
56007: LD_EXP 55
56011: NOT
56012: IFFALSE 56016
// exit ;
56014: GO 56255
// for i = 1 to 8 do
56016: LD_ADDR_VAR 0 2
56020: PUSH
56021: DOUBLE
56022: LD_INT 1
56024: DEC
56025: ST_TO_ADDR
56026: LD_INT 8
56028: PUSH
56029: FOR_TO
56030: IFFALSE 56056
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
56032: LD_ADDR_EXP 82
56036: PUSH
56037: LD_EXP 82
56041: PPUSH
56042: LD_VAR 0 2
56046: PPUSH
56047: EMPTY
56048: PPUSH
56049: CALL_OW 1
56053: ST_TO_ADDR
56054: GO 56029
56056: POP
56057: POP
// tmp := [ ] ;
56058: LD_ADDR_VAR 0 5
56062: PUSH
56063: EMPTY
56064: ST_TO_ADDR
// for i = 1 to mc_sides do
56065: LD_ADDR_VAR 0 2
56069: PUSH
56070: DOUBLE
56071: LD_INT 1
56073: DEC
56074: ST_TO_ADDR
56075: LD_EXP 81
56079: PUSH
56080: FOR_TO
56081: IFFALSE 56139
// if not mc_sides [ i ] in tmp then
56083: LD_EXP 81
56087: PUSH
56088: LD_VAR 0 2
56092: ARRAY
56093: PUSH
56094: LD_VAR 0 5
56098: IN
56099: NOT
56100: IFFALSE 56137
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
56102: LD_ADDR_VAR 0 5
56106: PUSH
56107: LD_VAR 0 5
56111: PPUSH
56112: LD_VAR 0 5
56116: PUSH
56117: LD_INT 1
56119: PLUS
56120: PPUSH
56121: LD_EXP 81
56125: PUSH
56126: LD_VAR 0 2
56130: ARRAY
56131: PPUSH
56132: CALL_OW 2
56136: ST_TO_ADDR
56137: GO 56080
56139: POP
56140: POP
// if not tmp then
56141: LD_VAR 0 5
56145: NOT
56146: IFFALSE 56150
// exit ;
56148: GO 56255
// for j in tmp do
56150: LD_ADDR_VAR 0 3
56154: PUSH
56155: LD_VAR 0 5
56159: PUSH
56160: FOR_IN
56161: IFFALSE 56253
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
56163: LD_ADDR_VAR 0 6
56167: PUSH
56168: LD_INT 22
56170: PUSH
56171: LD_VAR 0 3
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PPUSH
56180: CALL_OW 69
56184: ST_TO_ADDR
// if not un then
56185: LD_VAR 0 6
56189: NOT
56190: IFFALSE 56194
// continue ;
56192: GO 56160
// nation := GetNation ( un [ 1 ] ) ;
56194: LD_ADDR_VAR 0 4
56198: PUSH
56199: LD_VAR 0 6
56203: PUSH
56204: LD_INT 1
56206: ARRAY
56207: PPUSH
56208: CALL_OW 248
56212: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
56213: LD_ADDR_EXP 82
56217: PUSH
56218: LD_EXP 82
56222: PPUSH
56223: LD_VAR 0 3
56227: PPUSH
56228: LD_VAR 0 3
56232: PPUSH
56233: LD_VAR 0 4
56237: PPUSH
56238: LD_INT 1
56240: PPUSH
56241: CALL 9323 0 3
56245: PPUSH
56246: CALL_OW 1
56250: ST_TO_ADDR
// end ;
56251: GO 56160
56253: POP
56254: POP
// end ;
56255: LD_VAR 0 1
56259: RET
// export function MC_InitSides ( ) ; var i ; begin
56260: LD_INT 0
56262: PPUSH
56263: PPUSH
// if not mc_bases then
56264: LD_EXP 55
56268: NOT
56269: IFFALSE 56273
// exit ;
56271: GO 56347
// for i = 1 to mc_bases do
56273: LD_ADDR_VAR 0 2
56277: PUSH
56278: DOUBLE
56279: LD_INT 1
56281: DEC
56282: ST_TO_ADDR
56283: LD_EXP 55
56287: PUSH
56288: FOR_TO
56289: IFFALSE 56345
// if mc_bases [ i ] then
56291: LD_EXP 55
56295: PUSH
56296: LD_VAR 0 2
56300: ARRAY
56301: IFFALSE 56343
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
56303: LD_ADDR_EXP 81
56307: PUSH
56308: LD_EXP 81
56312: PPUSH
56313: LD_VAR 0 2
56317: PPUSH
56318: LD_EXP 55
56322: PUSH
56323: LD_VAR 0 2
56327: ARRAY
56328: PUSH
56329: LD_INT 1
56331: ARRAY
56332: PPUSH
56333: CALL_OW 255
56337: PPUSH
56338: CALL_OW 1
56342: ST_TO_ADDR
56343: GO 56288
56345: POP
56346: POP
// end ;
56347: LD_VAR 0 1
56351: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
56352: LD_INT 0
56354: PPUSH
56355: PPUSH
56356: PPUSH
56357: PPUSH
56358: PPUSH
56359: PPUSH
56360: PPUSH
56361: PPUSH
// if not mc_bases then
56362: LD_EXP 55
56366: NOT
56367: IFFALSE 56371
// exit ;
56369: GO 57016
// for i = 1 to mc_bases do
56371: LD_ADDR_VAR 0 2
56375: PUSH
56376: DOUBLE
56377: LD_INT 1
56379: DEC
56380: ST_TO_ADDR
56381: LD_EXP 55
56385: PUSH
56386: FOR_TO
56387: IFFALSE 57014
// begin if not mc_bases [ i ] then
56389: LD_EXP 55
56393: PUSH
56394: LD_VAR 0 2
56398: ARRAY
56399: NOT
56400: IFFALSE 56404
// continue ;
56402: GO 56386
// if mc_scan [ i ] then
56404: LD_EXP 78
56408: PUSH
56409: LD_VAR 0 2
56413: ARRAY
56414: IFFALSE 56440
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
56416: LD_ADDR_EXP 67
56420: PUSH
56421: LD_EXP 67
56425: PPUSH
56426: LD_VAR 0 2
56430: PPUSH
56431: EMPTY
56432: PPUSH
56433: CALL_OW 1
56437: ST_TO_ADDR
// continue ;
56438: GO 56386
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
56440: LD_ADDR_VAR 0 5
56444: PUSH
56445: LD_EXP 55
56449: PUSH
56450: LD_VAR 0 2
56454: ARRAY
56455: PUSH
56456: LD_INT 1
56458: ARRAY
56459: PPUSH
56460: CALL_OW 255
56464: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
56465: LD_ADDR_VAR 0 6
56469: PUSH
56470: LD_EXP 55
56474: PUSH
56475: LD_VAR 0 2
56479: ARRAY
56480: PPUSH
56481: LD_INT 30
56483: PUSH
56484: LD_INT 3
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PPUSH
56491: CALL_OW 72
56495: ST_TO_ADDR
// if not fac then
56496: LD_VAR 0 6
56500: NOT
56501: IFFALSE 56552
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56503: LD_ADDR_VAR 0 6
56507: PUSH
56508: LD_EXP 55
56512: PUSH
56513: LD_VAR 0 2
56517: ARRAY
56518: PPUSH
56519: LD_INT 2
56521: PUSH
56522: LD_INT 30
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 30
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: LIST
56546: PPUSH
56547: CALL_OW 72
56551: ST_TO_ADDR
// if not fac then
56552: LD_VAR 0 6
56556: NOT
56557: IFFALSE 56561
// continue ;
56559: GO 56386
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
56561: LD_ADDR_VAR 0 7
56565: PUSH
56566: LD_EXP 79
56570: PUSH
56571: LD_VAR 0 2
56575: ARRAY
56576: PPUSH
56577: LD_INT 22
56579: PUSH
56580: LD_VAR 0 5
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 21
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 3
56601: PUSH
56602: LD_INT 24
56604: PUSH
56605: LD_INT 1000
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: LIST
56620: PPUSH
56621: CALL_OW 70
56625: PUSH
56626: LD_INT 22
56628: PUSH
56629: LD_VAR 0 5
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 91
56640: PUSH
56641: LD_VAR 0 6
56645: PUSH
56646: LD_INT 1
56648: ARRAY
56649: PUSH
56650: LD_INT 25
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 21
56660: PUSH
56661: LD_INT 2
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 3
56670: PUSH
56671: LD_INT 24
56673: PUSH
56674: LD_INT 1000
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: PPUSH
56691: CALL_OW 69
56695: UNION
56696: ST_TO_ADDR
// if not vehs then
56697: LD_VAR 0 7
56701: NOT
56702: IFFALSE 56728
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
56704: LD_ADDR_EXP 67
56708: PUSH
56709: LD_EXP 67
56713: PPUSH
56714: LD_VAR 0 2
56718: PPUSH
56719: EMPTY
56720: PPUSH
56721: CALL_OW 1
56725: ST_TO_ADDR
// continue ;
56726: GO 56386
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
56728: LD_ADDR_VAR 0 8
56732: PUSH
56733: LD_EXP 55
56737: PUSH
56738: LD_VAR 0 2
56742: ARRAY
56743: PPUSH
56744: LD_INT 30
56746: PUSH
56747: LD_INT 3
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PPUSH
56754: CALL_OW 72
56758: ST_TO_ADDR
// if tmp then
56759: LD_VAR 0 8
56763: IFFALSE 56866
// begin for j in tmp do
56765: LD_ADDR_VAR 0 3
56769: PUSH
56770: LD_VAR 0 8
56774: PUSH
56775: FOR_IN
56776: IFFALSE 56864
// for k in UnitsInside ( j ) do
56778: LD_ADDR_VAR 0 4
56782: PUSH
56783: LD_VAR 0 3
56787: PPUSH
56788: CALL_OW 313
56792: PUSH
56793: FOR_IN
56794: IFFALSE 56860
// if k then
56796: LD_VAR 0 4
56800: IFFALSE 56858
// if not k in mc_repair_vehicle [ i ] then
56802: LD_VAR 0 4
56806: PUSH
56807: LD_EXP 67
56811: PUSH
56812: LD_VAR 0 2
56816: ARRAY
56817: IN
56818: NOT
56819: IFFALSE 56858
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
56821: LD_ADDR_EXP 67
56825: PUSH
56826: LD_EXP 67
56830: PPUSH
56831: LD_VAR 0 2
56835: PPUSH
56836: LD_EXP 67
56840: PUSH
56841: LD_VAR 0 2
56845: ARRAY
56846: PUSH
56847: LD_VAR 0 4
56851: UNION
56852: PPUSH
56853: CALL_OW 1
56857: ST_TO_ADDR
56858: GO 56793
56860: POP
56861: POP
56862: GO 56775
56864: POP
56865: POP
// end ; if not mc_repair_vehicle [ i ] then
56866: LD_EXP 67
56870: PUSH
56871: LD_VAR 0 2
56875: ARRAY
56876: NOT
56877: IFFALSE 56881
// continue ;
56879: GO 56386
// for j in mc_repair_vehicle [ i ] do
56881: LD_ADDR_VAR 0 3
56885: PUSH
56886: LD_EXP 67
56890: PUSH
56891: LD_VAR 0 2
56895: ARRAY
56896: PUSH
56897: FOR_IN
56898: IFFALSE 57010
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
56900: LD_VAR 0 3
56904: PPUSH
56905: CALL_OW 311
56909: NOT
56910: PUSH
56911: LD_VAR 0 3
56915: PUSH
56916: LD_EXP 58
56920: PUSH
56921: LD_VAR 0 2
56925: ARRAY
56926: PUSH
56927: LD_INT 1
56929: ARRAY
56930: IN
56931: NOT
56932: AND
56933: PUSH
56934: LD_VAR 0 3
56938: PUSH
56939: LD_EXP 58
56943: PUSH
56944: LD_VAR 0 2
56948: ARRAY
56949: PUSH
56950: LD_INT 2
56952: ARRAY
56953: IN
56954: NOT
56955: AND
56956: IFFALSE 57008
// begin if IsInUnit ( j ) then
56958: LD_VAR 0 3
56962: PPUSH
56963: CALL_OW 310
56967: IFFALSE 56978
// ComExitBuilding ( j ) ;
56969: LD_VAR 0 3
56973: PPUSH
56974: CALL_OW 122
// if not HasTask ( j ) then
56978: LD_VAR 0 3
56982: PPUSH
56983: CALL_OW 314
56987: NOT
56988: IFFALSE 57008
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
56990: LD_VAR 0 3
56994: PPUSH
56995: LD_VAR 0 7
56999: PUSH
57000: LD_INT 1
57002: ARRAY
57003: PPUSH
57004: CALL_OW 189
// end ; end ;
57008: GO 56897
57010: POP
57011: POP
// end ;
57012: GO 56386
57014: POP
57015: POP
// end ;
57016: LD_VAR 0 1
57020: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp ; begin
57021: LD_INT 0
57023: PPUSH
57024: PPUSH
57025: PPUSH
57026: PPUSH
57027: PPUSH
57028: PPUSH
57029: PPUSH
57030: PPUSH
// if not mc_bases then
57031: LD_EXP 55
57035: NOT
57036: IFFALSE 57040
// exit ;
57038: GO 57573
// for i = 1 to mc_bases do
57040: LD_ADDR_VAR 0 2
57044: PUSH
57045: DOUBLE
57046: LD_INT 1
57048: DEC
57049: ST_TO_ADDR
57050: LD_EXP 55
57054: PUSH
57055: FOR_TO
57056: IFFALSE 57571
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
57058: LD_EXP 83
57062: PUSH
57063: LD_VAR 0 2
57067: ARRAY
57068: NOT
57069: PUSH
57070: LD_EXP 58
57074: PUSH
57075: LD_VAR 0 2
57079: ARRAY
57080: PUSH
57081: LD_INT 1
57083: ARRAY
57084: OR
57085: PUSH
57086: LD_EXP 58
57090: PUSH
57091: LD_VAR 0 2
57095: ARRAY
57096: PUSH
57097: LD_INT 2
57099: ARRAY
57100: OR
57101: PUSH
57102: LD_EXP 81
57106: PUSH
57107: LD_VAR 0 2
57111: ARRAY
57112: PPUSH
57113: LD_INT 1
57115: PPUSH
57116: CALL_OW 325
57120: NOT
57121: OR
57122: PUSH
57123: LD_EXP 78
57127: PUSH
57128: LD_VAR 0 2
57132: ARRAY
57133: OR
57134: IFFALSE 57138
// continue ;
57136: GO 57055
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
57138: LD_ADDR_VAR 0 8
57142: PUSH
57143: LD_EXP 55
57147: PUSH
57148: LD_VAR 0 2
57152: ARRAY
57153: PPUSH
57154: LD_INT 25
57156: PUSH
57157: LD_INT 4
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 50
57166: PUSH
57167: EMPTY
57168: LIST
57169: PUSH
57170: LD_INT 3
57172: PUSH
57173: LD_INT 60
57175: PUSH
57176: EMPTY
57177: LIST
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: LIST
57187: PPUSH
57188: CALL_OW 72
57192: PUSH
57193: LD_EXP 59
57197: PUSH
57198: LD_VAR 0 2
57202: ARRAY
57203: DIFF
57204: ST_TO_ADDR
// if not tmp then
57205: LD_VAR 0 8
57209: NOT
57210: IFFALSE 57214
// continue ;
57212: GO 57055
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
57214: LD_ADDR_VAR 0 7
57218: PUSH
57219: LD_EXP 83
57223: PUSH
57224: LD_VAR 0 2
57228: ARRAY
57229: PPUSH
57230: LD_INT 22
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 25
57242: PUSH
57243: LD_INT 12
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PPUSH
57254: CALL_OW 70
57258: ST_TO_ADDR
// if not apes then
57259: LD_VAR 0 7
57263: NOT
57264: IFFALSE 57314
// begin if mc_taming [ i ] then
57266: LD_EXP 86
57270: PUSH
57271: LD_VAR 0 2
57275: ARRAY
57276: IFFALSE 57312
// begin MC_Reset ( i , 121 ) ;
57278: LD_VAR 0 2
57282: PPUSH
57283: LD_INT 121
57285: PPUSH
57286: CALL 48240 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
57290: LD_ADDR_EXP 86
57294: PUSH
57295: LD_EXP 86
57299: PPUSH
57300: LD_VAR 0 2
57304: PPUSH
57305: EMPTY
57306: PPUSH
57307: CALL_OW 1
57311: ST_TO_ADDR
// end ; continue ;
57312: GO 57055
// end ; for j in tmp do
57314: LD_ADDR_VAR 0 3
57318: PUSH
57319: LD_VAR 0 8
57323: PUSH
57324: FOR_IN
57325: IFFALSE 57567
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
57327: LD_VAR 0 3
57331: PUSH
57332: LD_EXP 86
57336: PUSH
57337: LD_VAR 0 2
57341: ARRAY
57342: IN
57343: NOT
57344: PUSH
57345: LD_EXP 86
57349: PUSH
57350: LD_VAR 0 2
57354: ARRAY
57355: PUSH
57356: LD_INT 3
57358: LESS
57359: AND
57360: IFFALSE 57418
// begin SetTag ( j , 121 ) ;
57362: LD_VAR 0 3
57366: PPUSH
57367: LD_INT 121
57369: PPUSH
57370: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
57374: LD_ADDR_EXP 86
57378: PUSH
57379: LD_EXP 86
57383: PPUSH
57384: LD_VAR 0 2
57388: PUSH
57389: LD_EXP 86
57393: PUSH
57394: LD_VAR 0 2
57398: ARRAY
57399: PUSH
57400: LD_INT 1
57402: PLUS
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PPUSH
57408: LD_VAR 0 3
57412: PPUSH
57413: CALL 15798 0 3
57417: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
57418: LD_VAR 0 3
57422: PUSH
57423: LD_EXP 86
57427: PUSH
57428: LD_VAR 0 2
57432: ARRAY
57433: IN
57434: IFFALSE 57565
// begin if IsInUnit ( j ) then
57436: LD_VAR 0 3
57440: PPUSH
57441: CALL_OW 310
57445: IFFALSE 57456
// ComExitBuilding ( j ) ;
57447: LD_VAR 0 3
57451: PPUSH
57452: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
57456: LD_ADDR_VAR 0 6
57460: PUSH
57461: LD_VAR 0 7
57465: PPUSH
57466: LD_VAR 0 3
57470: PPUSH
57471: CALL_OW 74
57475: ST_TO_ADDR
// if not ape then
57476: LD_VAR 0 6
57480: NOT
57481: IFFALSE 57485
// break ;
57483: GO 57567
// x := GetX ( ape ) ;
57485: LD_ADDR_VAR 0 4
57489: PUSH
57490: LD_VAR 0 6
57494: PPUSH
57495: CALL_OW 250
57499: ST_TO_ADDR
// y := GetY ( ape ) ;
57500: LD_ADDR_VAR 0 5
57504: PUSH
57505: LD_VAR 0 6
57509: PPUSH
57510: CALL_OW 251
57514: ST_TO_ADDR
// if not ValidHex ( x , y ) then
57515: LD_VAR 0 4
57519: PPUSH
57520: LD_VAR 0 5
57524: PPUSH
57525: CALL_OW 488
57529: NOT
57530: IFFALSE 57534
// break ;
57532: GO 57567
// if not HasTask ( j ) then
57534: LD_VAR 0 3
57538: PPUSH
57539: CALL_OW 314
57543: NOT
57544: IFFALSE 57565
// ComTameXY ( j , x , y ) ;
57546: LD_VAR 0 3
57550: PPUSH
57551: LD_VAR 0 4
57555: PPUSH
57556: LD_VAR 0 5
57560: PPUSH
57561: CALL_OW 131
// end ; end ;
57565: GO 57324
57567: POP
57568: POP
// end ;
57569: GO 57055
57571: POP
57572: POP
// end ;
57573: LD_VAR 0 1
57577: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
57578: LD_INT 0
57580: PPUSH
57581: PPUSH
57582: PPUSH
57583: PPUSH
57584: PPUSH
57585: PPUSH
57586: PPUSH
57587: PPUSH
// if not mc_bases then
57588: LD_EXP 55
57592: NOT
57593: IFFALSE 57597
// exit ;
57595: GO 58207
// for i = 1 to mc_bases do
57597: LD_ADDR_VAR 0 2
57601: PUSH
57602: DOUBLE
57603: LD_INT 1
57605: DEC
57606: ST_TO_ADDR
57607: LD_EXP 55
57611: PUSH
57612: FOR_TO
57613: IFFALSE 58205
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
57615: LD_EXP 84
57619: PUSH
57620: LD_VAR 0 2
57624: ARRAY
57625: NOT
57626: PUSH
57627: LD_EXP 84
57631: PUSH
57632: LD_VAR 0 2
57636: ARRAY
57637: PPUSH
57638: LD_INT 25
57640: PUSH
57641: LD_INT 12
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PPUSH
57648: CALL_OW 72
57652: NOT
57653: OR
57654: IFFALSE 57658
// continue ;
57656: GO 57612
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
57658: LD_ADDR_VAR 0 5
57662: PUSH
57663: LD_EXP 84
57667: PUSH
57668: LD_VAR 0 2
57672: ARRAY
57673: PUSH
57674: LD_INT 1
57676: ARRAY
57677: PPUSH
57678: CALL_OW 255
57682: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
57683: LD_VAR 0 5
57687: PPUSH
57688: LD_INT 2
57690: PPUSH
57691: CALL_OW 325
57695: IFFALSE 57940
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
57697: LD_ADDR_VAR 0 4
57701: PUSH
57702: LD_EXP 84
57706: PUSH
57707: LD_VAR 0 2
57711: ARRAY
57712: PPUSH
57713: LD_INT 25
57715: PUSH
57716: LD_INT 16
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PPUSH
57723: CALL_OW 72
57727: ST_TO_ADDR
// if tmp < 6 then
57728: LD_VAR 0 4
57732: PUSH
57733: LD_INT 6
57735: LESS
57736: IFFALSE 57940
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
57738: LD_ADDR_VAR 0 6
57742: PUSH
57743: LD_EXP 55
57747: PUSH
57748: LD_VAR 0 2
57752: ARRAY
57753: PPUSH
57754: LD_INT 2
57756: PUSH
57757: LD_INT 30
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 30
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: LIST
57781: PPUSH
57782: CALL_OW 72
57786: ST_TO_ADDR
// if depot then
57787: LD_VAR 0 6
57791: IFFALSE 57940
// begin for j in depot do
57793: LD_ADDR_VAR 0 3
57797: PUSH
57798: LD_VAR 0 6
57802: PUSH
57803: FOR_IN
57804: IFFALSE 57835
// begin if UnitsInside ( j ) < 6 then
57806: LD_VAR 0 3
57810: PPUSH
57811: CALL_OW 313
57815: PUSH
57816: LD_INT 6
57818: LESS
57819: IFFALSE 57833
// begin selected := j ;
57821: LD_ADDR_VAR 0 7
57825: PUSH
57826: LD_VAR 0 3
57830: ST_TO_ADDR
// break ;
57831: GO 57835
// end ; end ;
57833: GO 57803
57835: POP
57836: POP
// if selected then
57837: LD_VAR 0 7
57841: IFFALSE 57940
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
57843: LD_ADDR_VAR 0 3
57847: PUSH
57848: LD_EXP 84
57852: PUSH
57853: LD_VAR 0 2
57857: ARRAY
57858: PPUSH
57859: LD_INT 25
57861: PUSH
57862: LD_INT 12
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PPUSH
57869: CALL_OW 72
57873: PUSH
57874: FOR_IN
57875: IFFALSE 57938
// if not HasTask ( j ) then
57877: LD_VAR 0 3
57881: PPUSH
57882: CALL_OW 314
57886: NOT
57887: IFFALSE 57936
// begin if not IsInUnit ( j ) then
57889: LD_VAR 0 3
57893: PPUSH
57894: CALL_OW 310
57898: NOT
57899: IFFALSE 57915
// ComEnterUnit ( j , selected ) ;
57901: LD_VAR 0 3
57905: PPUSH
57906: LD_VAR 0 7
57910: PPUSH
57911: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
57915: LD_VAR 0 3
57919: PPUSH
57920: LD_INT 16
57922: PPUSH
57923: CALL_OW 183
// AddComExitBuilding ( j ) ;
57927: LD_VAR 0 3
57931: PPUSH
57932: CALL_OW 182
// end ;
57936: GO 57874
57938: POP
57939: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
57940: LD_VAR 0 5
57944: PPUSH
57945: LD_INT 11
57947: PPUSH
57948: CALL_OW 325
57952: IFFALSE 58203
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
57954: LD_ADDR_VAR 0 4
57958: PUSH
57959: LD_EXP 84
57963: PUSH
57964: LD_VAR 0 2
57968: ARRAY
57969: PPUSH
57970: LD_INT 25
57972: PUSH
57973: LD_INT 16
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PPUSH
57980: CALL_OW 72
57984: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
57985: LD_VAR 0 4
57989: PUSH
57990: LD_INT 6
57992: GREATEREQUAL
57993: PUSH
57994: LD_VAR 0 5
57998: PPUSH
57999: LD_INT 2
58001: PPUSH
58002: CALL_OW 325
58006: NOT
58007: OR
58008: IFFALSE 58203
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
58010: LD_ADDR_VAR 0 8
58014: PUSH
58015: LD_EXP 55
58019: PUSH
58020: LD_VAR 0 2
58024: ARRAY
58025: PPUSH
58026: LD_INT 2
58028: PUSH
58029: LD_INT 30
58031: PUSH
58032: LD_INT 4
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 30
58041: PUSH
58042: LD_INT 5
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: LIST
58053: PPUSH
58054: CALL_OW 72
58058: ST_TO_ADDR
// if barracks then
58059: LD_VAR 0 8
58063: IFFALSE 58203
// begin for j in barracks do
58065: LD_ADDR_VAR 0 3
58069: PUSH
58070: LD_VAR 0 8
58074: PUSH
58075: FOR_IN
58076: IFFALSE 58107
// begin if UnitsInside ( j ) < 6 then
58078: LD_VAR 0 3
58082: PPUSH
58083: CALL_OW 313
58087: PUSH
58088: LD_INT 6
58090: LESS
58091: IFFALSE 58105
// begin selected := j ;
58093: LD_ADDR_VAR 0 7
58097: PUSH
58098: LD_VAR 0 3
58102: ST_TO_ADDR
// break ;
58103: GO 58107
// end ; end ;
58105: GO 58075
58107: POP
58108: POP
// if selected then
58109: LD_VAR 0 7
58113: IFFALSE 58203
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
58115: LD_ADDR_VAR 0 3
58119: PUSH
58120: LD_EXP 84
58124: PUSH
58125: LD_VAR 0 2
58129: ARRAY
58130: PPUSH
58131: LD_INT 25
58133: PUSH
58134: LD_INT 12
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PPUSH
58141: CALL_OW 72
58145: PUSH
58146: FOR_IN
58147: IFFALSE 58201
// if not IsInUnit ( j ) and not HasTask ( j ) then
58149: LD_VAR 0 3
58153: PPUSH
58154: CALL_OW 310
58158: NOT
58159: PUSH
58160: LD_VAR 0 3
58164: PPUSH
58165: CALL_OW 314
58169: NOT
58170: AND
58171: IFFALSE 58199
// begin ComEnterUnit ( j , selected ) ;
58173: LD_VAR 0 3
58177: PPUSH
58178: LD_VAR 0 7
58182: PPUSH
58183: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
58187: LD_VAR 0 3
58191: PPUSH
58192: LD_INT 15
58194: PPUSH
58195: CALL_OW 183
// end ;
58199: GO 58146
58201: POP
58202: POP
// end ; end ; end ; end ; end ;
58203: GO 57612
58205: POP
58206: POP
// end ;
58207: LD_VAR 0 1
58211: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
58212: LD_INT 0
58214: PPUSH
58215: PPUSH
58216: PPUSH
58217: PPUSH
// if not mc_bases then
58218: LD_EXP 55
58222: NOT
58223: IFFALSE 58227
// exit ;
58225: GO 58405
// for i = 1 to mc_bases do
58227: LD_ADDR_VAR 0 2
58231: PUSH
58232: DOUBLE
58233: LD_INT 1
58235: DEC
58236: ST_TO_ADDR
58237: LD_EXP 55
58241: PUSH
58242: FOR_TO
58243: IFFALSE 58403
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
58245: LD_ADDR_VAR 0 4
58249: PUSH
58250: LD_EXP 55
58254: PUSH
58255: LD_VAR 0 2
58259: ARRAY
58260: PPUSH
58261: LD_INT 25
58263: PUSH
58264: LD_INT 9
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PPUSH
58271: CALL_OW 72
58275: ST_TO_ADDR
// if not tmp then
58276: LD_VAR 0 4
58280: NOT
58281: IFFALSE 58285
// continue ;
58283: GO 58242
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
58285: LD_EXP 81
58289: PUSH
58290: LD_VAR 0 2
58294: ARRAY
58295: PPUSH
58296: LD_INT 29
58298: PPUSH
58299: CALL_OW 325
58303: NOT
58304: PUSH
58305: LD_EXP 81
58309: PUSH
58310: LD_VAR 0 2
58314: ARRAY
58315: PPUSH
58316: LD_INT 28
58318: PPUSH
58319: CALL_OW 325
58323: NOT
58324: AND
58325: IFFALSE 58329
// continue ;
58327: GO 58242
// for j in tmp do
58329: LD_ADDR_VAR 0 3
58333: PUSH
58334: LD_VAR 0 4
58338: PUSH
58339: FOR_IN
58340: IFFALSE 58399
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
58342: LD_VAR 0 3
58346: PUSH
58347: LD_EXP 58
58351: PUSH
58352: LD_VAR 0 2
58356: ARRAY
58357: PUSH
58358: LD_INT 1
58360: ARRAY
58361: IN
58362: NOT
58363: PUSH
58364: LD_VAR 0 3
58368: PUSH
58369: LD_EXP 58
58373: PUSH
58374: LD_VAR 0 2
58378: ARRAY
58379: PUSH
58380: LD_INT 2
58382: ARRAY
58383: IN
58384: NOT
58385: AND
58386: IFFALSE 58397
// ComSpaceTimeShoot ( j ) ;
58388: LD_VAR 0 3
58392: PPUSH
58393: CALL 9960 0 1
58397: GO 58339
58399: POP
58400: POP
// end ;
58401: GO 58242
58403: POP
58404: POP
// end ;
58405: LD_VAR 0 1
58409: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
58410: LD_INT 0
58412: PPUSH
58413: PPUSH
58414: PPUSH
58415: PPUSH
// if not mc_bases then
58416: LD_EXP 55
58420: NOT
58421: IFFALSE 58425
// exit ;
58423: GO 58447
// for i = 1 to mc_bases do
58425: LD_ADDR_VAR 0 2
58429: PUSH
58430: DOUBLE
58431: LD_INT 1
58433: DEC
58434: ST_TO_ADDR
58435: LD_EXP 55
58439: PUSH
58440: FOR_TO
58441: IFFALSE 58445
// begin end ;
58443: GO 58440
58445: POP
58446: POP
// end ;
58447: LD_VAR 0 1
58451: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
58452: LD_INT 0
58454: PPUSH
58455: PPUSH
58456: PPUSH
58457: PPUSH
58458: PPUSH
58459: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
58460: LD_VAR 0 1
58464: NOT
58465: PUSH
58466: LD_VAR 0 2
58470: NOT
58471: OR
58472: PUSH
58473: LD_VAR 0 3
58477: NOT
58478: OR
58479: PUSH
58480: LD_VAR 0 4
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: LD_INT 2
58490: PUSH
58491: LD_INT 3
58493: PUSH
58494: LD_INT 4
58496: PUSH
58497: LD_INT 5
58499: PUSH
58500: LD_INT 8
58502: PUSH
58503: LD_INT 9
58505: PUSH
58506: LD_INT 15
58508: PUSH
58509: LD_INT 16
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: IN
58523: NOT
58524: OR
58525: IFFALSE 58529
// exit ;
58527: GO 59429
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
58529: LD_ADDR_VAR 0 2
58533: PUSH
58534: LD_VAR 0 2
58538: PPUSH
58539: LD_INT 21
58541: PUSH
58542: LD_INT 3
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 24
58551: PUSH
58552: LD_INT 250
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PPUSH
58563: CALL_OW 72
58567: ST_TO_ADDR
// case class of 1 , 15 :
58568: LD_VAR 0 4
58572: PUSH
58573: LD_INT 1
58575: DOUBLE
58576: EQUAL
58577: IFTRUE 58587
58579: LD_INT 15
58581: DOUBLE
58582: EQUAL
58583: IFTRUE 58587
58585: GO 58672
58587: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
58588: LD_ADDR_VAR 0 8
58592: PUSH
58593: LD_VAR 0 2
58597: PPUSH
58598: LD_INT 2
58600: PUSH
58601: LD_INT 30
58603: PUSH
58604: LD_INT 32
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 30
58613: PUSH
58614: LD_INT 31
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: LIST
58625: PPUSH
58626: CALL_OW 72
58630: PUSH
58631: LD_VAR 0 2
58635: PPUSH
58636: LD_INT 2
58638: PUSH
58639: LD_INT 30
58641: PUSH
58642: LD_INT 4
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 30
58651: PUSH
58652: LD_INT 5
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: LIST
58663: PPUSH
58664: CALL_OW 72
58668: ADD
58669: ST_TO_ADDR
58670: GO 58918
58672: LD_INT 2
58674: DOUBLE
58675: EQUAL
58676: IFTRUE 58686
58678: LD_INT 16
58680: DOUBLE
58681: EQUAL
58682: IFTRUE 58686
58684: GO 58732
58686: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
58687: LD_ADDR_VAR 0 8
58691: PUSH
58692: LD_VAR 0 2
58696: PPUSH
58697: LD_INT 2
58699: PUSH
58700: LD_INT 30
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 30
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: LIST
58724: PPUSH
58725: CALL_OW 72
58729: ST_TO_ADDR
58730: GO 58918
58732: LD_INT 3
58734: DOUBLE
58735: EQUAL
58736: IFTRUE 58740
58738: GO 58786
58740: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
58741: LD_ADDR_VAR 0 8
58745: PUSH
58746: LD_VAR 0 2
58750: PPUSH
58751: LD_INT 2
58753: PUSH
58754: LD_INT 30
58756: PUSH
58757: LD_INT 2
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 30
58766: PUSH
58767: LD_INT 3
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: LIST
58778: PPUSH
58779: CALL_OW 72
58783: ST_TO_ADDR
58784: GO 58918
58786: LD_INT 4
58788: DOUBLE
58789: EQUAL
58790: IFTRUE 58794
58792: GO 58851
58794: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
58795: LD_ADDR_VAR 0 8
58799: PUSH
58800: LD_VAR 0 2
58804: PPUSH
58805: LD_INT 2
58807: PUSH
58808: LD_INT 30
58810: PUSH
58811: LD_INT 6
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 30
58820: PUSH
58821: LD_INT 7
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 30
58830: PUSH
58831: LD_INT 8
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: PPUSH
58844: CALL_OW 72
58848: ST_TO_ADDR
58849: GO 58918
58851: LD_INT 5
58853: DOUBLE
58854: EQUAL
58855: IFTRUE 58871
58857: LD_INT 8
58859: DOUBLE
58860: EQUAL
58861: IFTRUE 58871
58863: LD_INT 9
58865: DOUBLE
58866: EQUAL
58867: IFTRUE 58871
58869: GO 58917
58871: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
58872: LD_ADDR_VAR 0 8
58876: PUSH
58877: LD_VAR 0 2
58881: PPUSH
58882: LD_INT 2
58884: PUSH
58885: LD_INT 30
58887: PUSH
58888: LD_INT 4
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 30
58897: PUSH
58898: LD_INT 5
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: LIST
58909: PPUSH
58910: CALL_OW 72
58914: ST_TO_ADDR
58915: GO 58918
58917: POP
// if not tmp then
58918: LD_VAR 0 8
58922: NOT
58923: IFFALSE 58927
// exit ;
58925: GO 59429
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
58927: LD_VAR 0 4
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: LD_INT 15
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: IN
58942: PUSH
58943: LD_EXP 64
58947: PUSH
58948: LD_VAR 0 1
58952: ARRAY
58953: AND
58954: IFFALSE 59110
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
58956: LD_ADDR_VAR 0 9
58960: PUSH
58961: LD_EXP 64
58965: PUSH
58966: LD_VAR 0 1
58970: ARRAY
58971: PUSH
58972: LD_INT 1
58974: ARRAY
58975: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
58976: LD_VAR 0 9
58980: PUSH
58981: LD_EXP 65
58985: PUSH
58986: LD_VAR 0 1
58990: ARRAY
58991: IN
58992: NOT
58993: IFFALSE 59108
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
58995: LD_ADDR_EXP 65
58999: PUSH
59000: LD_EXP 65
59004: PPUSH
59005: LD_VAR 0 1
59009: PUSH
59010: LD_EXP 65
59014: PUSH
59015: LD_VAR 0 1
59019: ARRAY
59020: PUSH
59021: LD_INT 1
59023: PLUS
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PPUSH
59029: LD_VAR 0 9
59033: PPUSH
59034: CALL 15798 0 3
59038: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
59039: LD_ADDR_EXP 64
59043: PUSH
59044: LD_EXP 64
59048: PPUSH
59049: LD_VAR 0 1
59053: PPUSH
59054: LD_EXP 64
59058: PUSH
59059: LD_VAR 0 1
59063: ARRAY
59064: PUSH
59065: LD_VAR 0 9
59069: DIFF
59070: PPUSH
59071: CALL_OW 1
59075: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
59076: LD_VAR 0 3
59080: PPUSH
59081: LD_EXP 65
59085: PUSH
59086: LD_VAR 0 1
59090: ARRAY
59091: PUSH
59092: LD_EXP 65
59096: PUSH
59097: LD_VAR 0 1
59101: ARRAY
59102: ARRAY
59103: PPUSH
59104: CALL_OW 120
// end ; exit ;
59108: GO 59429
// end ; if tmp > 1 then
59110: LD_VAR 0 8
59114: PUSH
59115: LD_INT 1
59117: GREATER
59118: IFFALSE 59222
// for i = 2 to tmp do
59120: LD_ADDR_VAR 0 6
59124: PUSH
59125: DOUBLE
59126: LD_INT 2
59128: DEC
59129: ST_TO_ADDR
59130: LD_VAR 0 8
59134: PUSH
59135: FOR_TO
59136: IFFALSE 59220
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
59138: LD_VAR 0 8
59142: PUSH
59143: LD_VAR 0 6
59147: ARRAY
59148: PPUSH
59149: CALL_OW 461
59153: PUSH
59154: LD_INT 6
59156: EQUAL
59157: IFFALSE 59218
// begin x := tmp [ i ] ;
59159: LD_ADDR_VAR 0 9
59163: PUSH
59164: LD_VAR 0 8
59168: PUSH
59169: LD_VAR 0 6
59173: ARRAY
59174: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
59175: LD_ADDR_VAR 0 8
59179: PUSH
59180: LD_VAR 0 8
59184: PPUSH
59185: LD_VAR 0 6
59189: PPUSH
59190: CALL_OW 3
59194: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
59195: LD_ADDR_VAR 0 8
59199: PUSH
59200: LD_VAR 0 8
59204: PPUSH
59205: LD_INT 1
59207: PPUSH
59208: LD_VAR 0 9
59212: PPUSH
59213: CALL_OW 2
59217: ST_TO_ADDR
// end ;
59218: GO 59135
59220: POP
59221: POP
// for i in tmp do
59222: LD_ADDR_VAR 0 6
59226: PUSH
59227: LD_VAR 0 8
59231: PUSH
59232: FOR_IN
59233: IFFALSE 59302
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
59235: LD_VAR 0 6
59239: PPUSH
59240: CALL_OW 313
59244: PUSH
59245: LD_INT 6
59247: LESS
59248: PUSH
59249: LD_VAR 0 6
59253: PPUSH
59254: CALL_OW 266
59258: PUSH
59259: LD_INT 31
59261: PUSH
59262: LD_INT 32
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: IN
59269: NOT
59270: AND
59271: PUSH
59272: LD_VAR 0 6
59276: PPUSH
59277: CALL_OW 313
59281: PUSH
59282: LD_INT 0
59284: EQUAL
59285: OR
59286: IFFALSE 59300
// begin j := i ;
59288: LD_ADDR_VAR 0 7
59292: PUSH
59293: LD_VAR 0 6
59297: ST_TO_ADDR
// break ;
59298: GO 59302
// end ; end ;
59300: GO 59232
59302: POP
59303: POP
// if j then
59304: LD_VAR 0 7
59308: IFFALSE 59326
// ComEnterUnit ( unit , j ) else
59310: LD_VAR 0 3
59314: PPUSH
59315: LD_VAR 0 7
59319: PPUSH
59320: CALL_OW 120
59324: GO 59429
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
59326: LD_ADDR_VAR 0 10
59330: PUSH
59331: LD_VAR 0 2
59335: PPUSH
59336: LD_INT 2
59338: PUSH
59339: LD_INT 30
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 30
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: LIST
59363: PPUSH
59364: CALL_OW 72
59368: ST_TO_ADDR
// if depot then
59369: LD_VAR 0 10
59373: IFFALSE 59429
// begin depot := NearestUnitToUnit ( depot , unit ) ;
59375: LD_ADDR_VAR 0 10
59379: PUSH
59380: LD_VAR 0 10
59384: PPUSH
59385: LD_VAR 0 3
59389: PPUSH
59390: CALL_OW 74
59394: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
59395: LD_VAR 0 3
59399: PPUSH
59400: LD_VAR 0 10
59404: PPUSH
59405: CALL_OW 296
59409: PUSH
59410: LD_INT 10
59412: GREATER
59413: IFFALSE 59429
// ComStandNearbyBuilding ( unit , depot ) ;
59415: LD_VAR 0 3
59419: PPUSH
59420: LD_VAR 0 10
59424: PPUSH
59425: CALL 10577 0 2
// end ; end ; end ;
59429: LD_VAR 0 5
59433: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
59434: LD_INT 0
59436: PPUSH
59437: PPUSH
59438: PPUSH
59439: PPUSH
// if not mc_bases then
59440: LD_EXP 55
59444: NOT
59445: IFFALSE 59449
// exit ;
59447: GO 59688
// for i = 1 to mc_bases do
59449: LD_ADDR_VAR 0 2
59453: PUSH
59454: DOUBLE
59455: LD_INT 1
59457: DEC
59458: ST_TO_ADDR
59459: LD_EXP 55
59463: PUSH
59464: FOR_TO
59465: IFFALSE 59686
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
59467: LD_ADDR_VAR 0 4
59471: PUSH
59472: LD_EXP 55
59476: PUSH
59477: LD_VAR 0 2
59481: ARRAY
59482: PPUSH
59483: LD_INT 21
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PPUSH
59493: CALL_OW 72
59497: PUSH
59498: LD_EXP 84
59502: PUSH
59503: LD_VAR 0 2
59507: ARRAY
59508: UNION
59509: ST_TO_ADDR
// if not tmp then
59510: LD_VAR 0 4
59514: NOT
59515: IFFALSE 59519
// continue ;
59517: GO 59464
// for j in tmp do
59519: LD_ADDR_VAR 0 3
59523: PUSH
59524: LD_VAR 0 4
59528: PUSH
59529: FOR_IN
59530: IFFALSE 59682
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
59532: LD_VAR 0 3
59536: PPUSH
59537: CALL_OW 110
59541: NOT
59542: PUSH
59543: LD_VAR 0 3
59547: PPUSH
59548: CALL_OW 314
59552: NOT
59553: AND
59554: PUSH
59555: LD_VAR 0 3
59559: PPUSH
59560: CALL_OW 311
59564: NOT
59565: AND
59566: PUSH
59567: LD_VAR 0 3
59571: PPUSH
59572: CALL_OW 310
59576: NOT
59577: AND
59578: PUSH
59579: LD_VAR 0 3
59583: PUSH
59584: LD_EXP 58
59588: PUSH
59589: LD_VAR 0 2
59593: ARRAY
59594: PUSH
59595: LD_INT 1
59597: ARRAY
59598: IN
59599: NOT
59600: AND
59601: PUSH
59602: LD_VAR 0 3
59606: PUSH
59607: LD_EXP 58
59611: PUSH
59612: LD_VAR 0 2
59616: ARRAY
59617: PUSH
59618: LD_INT 2
59620: ARRAY
59621: IN
59622: NOT
59623: AND
59624: PUSH
59625: LD_VAR 0 3
59629: PUSH
59630: LD_EXP 67
59634: PUSH
59635: LD_VAR 0 2
59639: ARRAY
59640: IN
59641: NOT
59642: AND
59643: IFFALSE 59680
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
59645: LD_VAR 0 2
59649: PPUSH
59650: LD_EXP 55
59654: PUSH
59655: LD_VAR 0 2
59659: ARRAY
59660: PPUSH
59661: LD_VAR 0 3
59665: PPUSH
59666: LD_VAR 0 3
59670: PPUSH
59671: CALL_OW 257
59675: PPUSH
59676: CALL 58452 0 4
// end ;
59680: GO 59529
59682: POP
59683: POP
// end ;
59684: GO 59464
59686: POP
59687: POP
// end ;
59688: LD_VAR 0 1
59692: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
59693: LD_INT 0
59695: PPUSH
59696: PPUSH
59697: PPUSH
59698: PPUSH
59699: PPUSH
59700: PPUSH
// if not mc_bases [ base ] then
59701: LD_EXP 55
59705: PUSH
59706: LD_VAR 0 1
59710: ARRAY
59711: NOT
59712: IFFALSE 59716
// exit ;
59714: GO 59898
// tmp := [ ] ;
59716: LD_ADDR_VAR 0 6
59720: PUSH
59721: EMPTY
59722: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
59723: LD_ADDR_VAR 0 7
59727: PUSH
59728: LD_VAR 0 3
59732: PPUSH
59733: LD_INT 0
59735: PPUSH
59736: CALL_OW 517
59740: ST_TO_ADDR
// if not list then
59741: LD_VAR 0 7
59745: NOT
59746: IFFALSE 59750
// exit ;
59748: GO 59898
// for i = 1 to amount do
59750: LD_ADDR_VAR 0 5
59754: PUSH
59755: DOUBLE
59756: LD_INT 1
59758: DEC
59759: ST_TO_ADDR
59760: LD_VAR 0 2
59764: PUSH
59765: FOR_TO
59766: IFFALSE 59846
// begin x := rand ( 1 , list [ 1 ] ) ;
59768: LD_ADDR_VAR 0 8
59772: PUSH
59773: LD_INT 1
59775: PPUSH
59776: LD_VAR 0 7
59780: PUSH
59781: LD_INT 1
59783: ARRAY
59784: PPUSH
59785: CALL_OW 12
59789: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
59790: LD_ADDR_VAR 0 6
59794: PUSH
59795: LD_VAR 0 6
59799: PPUSH
59800: LD_VAR 0 5
59804: PPUSH
59805: LD_VAR 0 7
59809: PUSH
59810: LD_INT 1
59812: ARRAY
59813: PUSH
59814: LD_VAR 0 8
59818: ARRAY
59819: PUSH
59820: LD_VAR 0 7
59824: PUSH
59825: LD_INT 2
59827: ARRAY
59828: PUSH
59829: LD_VAR 0 8
59833: ARRAY
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PPUSH
59839: CALL_OW 1
59843: ST_TO_ADDR
// end ;
59844: GO 59765
59846: POP
59847: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
59848: LD_ADDR_EXP 68
59852: PUSH
59853: LD_EXP 68
59857: PPUSH
59858: LD_VAR 0 1
59862: PPUSH
59863: LD_VAR 0 6
59867: PPUSH
59868: CALL_OW 1
59872: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
59873: LD_ADDR_EXP 70
59877: PUSH
59878: LD_EXP 70
59882: PPUSH
59883: LD_VAR 0 1
59887: PPUSH
59888: LD_VAR 0 3
59892: PPUSH
59893: CALL_OW 1
59897: ST_TO_ADDR
// end ;
59898: LD_VAR 0 4
59902: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
59903: LD_INT 0
59905: PPUSH
// if not mc_bases [ base ] then
59906: LD_EXP 55
59910: PUSH
59911: LD_VAR 0 1
59915: ARRAY
59916: NOT
59917: IFFALSE 59921
// exit ;
59919: GO 59946
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
59921: LD_ADDR_EXP 60
59925: PUSH
59926: LD_EXP 60
59930: PPUSH
59931: LD_VAR 0 1
59935: PPUSH
59936: LD_VAR 0 2
59940: PPUSH
59941: CALL_OW 1
59945: ST_TO_ADDR
// end ;
59946: LD_VAR 0 3
59950: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
59951: LD_INT 0
59953: PPUSH
// if not mc_bases [ base ] then
59954: LD_EXP 55
59958: PUSH
59959: LD_VAR 0 1
59963: ARRAY
59964: NOT
59965: IFFALSE 59969
// exit ;
59967: GO 59994
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
59969: LD_ADDR_EXP 76
59973: PUSH
59974: LD_EXP 76
59978: PPUSH
59979: LD_VAR 0 1
59983: PPUSH
59984: LD_VAR 0 2
59988: PPUSH
59989: CALL_OW 1
59993: ST_TO_ADDR
// end ;
59994: LD_VAR 0 3
59998: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
59999: LD_INT 0
60001: PPUSH
// if not mc_bases [ base ] then
60002: LD_EXP 55
60006: PUSH
60007: LD_VAR 0 1
60011: ARRAY
60012: NOT
60013: IFFALSE 60017
// exit ;
60015: GO 60057
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
60017: LD_ADDR_EXP 76
60021: PUSH
60022: LD_EXP 76
60026: PPUSH
60027: LD_VAR 0 1
60031: PPUSH
60032: LD_EXP 76
60036: PUSH
60037: LD_VAR 0 1
60041: ARRAY
60042: PUSH
60043: LD_VAR 0 2
60047: PUSH
60048: EMPTY
60049: LIST
60050: ADD
60051: PPUSH
60052: CALL_OW 1
60056: ST_TO_ADDR
// end ;
60057: LD_VAR 0 3
60061: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
60062: LD_INT 0
60064: PPUSH
// if not mc_bases [ base ] then
60065: LD_EXP 55
60069: PUSH
60070: LD_VAR 0 1
60074: ARRAY
60075: NOT
60076: IFFALSE 60080
// exit ;
60078: GO 60192
// mc_defender := Replace ( mc_defender , base , deflist ) ;
60080: LD_ADDR_EXP 77
60084: PUSH
60085: LD_EXP 77
60089: PPUSH
60090: LD_VAR 0 1
60094: PPUSH
60095: LD_VAR 0 2
60099: PPUSH
60100: CALL_OW 1
60104: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
60105: LD_ADDR_EXP 66
60109: PUSH
60110: LD_EXP 66
60114: PPUSH
60115: LD_VAR 0 1
60119: PPUSH
60120: LD_VAR 0 2
60124: PUSH
60125: LD_INT 0
60127: PLUS
60128: PPUSH
60129: CALL_OW 1
60133: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
60134: LD_ADDR_EXP 74
60138: PUSH
60139: LD_EXP 74
60143: PPUSH
60144: LD_VAR 0 1
60148: PPUSH
60149: LD_EXP 74
60153: PUSH
60154: LD_VAR 0 1
60158: ARRAY
60159: PUSH
60160: LD_EXP 77
60164: PUSH
60165: LD_VAR 0 1
60169: ARRAY
60170: PPUSH
60171: LD_INT 21
60173: PUSH
60174: LD_INT 2
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PPUSH
60181: CALL_OW 72
60185: UNION
60186: PPUSH
60187: CALL_OW 1
60191: ST_TO_ADDR
// end ;
60192: LD_VAR 0 3
60196: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
60197: LD_INT 0
60199: PPUSH
60200: PPUSH
60201: PPUSH
60202: PPUSH
// if not mc_bases [ base ] then
60203: LD_EXP 55
60207: PUSH
60208: LD_VAR 0 1
60212: ARRAY
60213: NOT
60214: IFFALSE 60218
// exit ;
60216: GO 60283
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
60218: LD_ADDR_EXP 75
60222: PUSH
60223: LD_EXP 75
60227: PPUSH
60228: LD_VAR 0 1
60232: PUSH
60233: LD_EXP 75
60237: PUSH
60238: LD_VAR 0 1
60242: ARRAY
60243: PUSH
60244: LD_INT 1
60246: PLUS
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PPUSH
60252: LD_VAR 0 1
60256: PUSH
60257: LD_VAR 0 2
60261: PUSH
60262: LD_VAR 0 3
60266: PUSH
60267: LD_VAR 0 4
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: PPUSH
60278: CALL 15798 0 3
60282: ST_TO_ADDR
// end ;
60283: LD_VAR 0 5
60287: RET
// export function MC_GetMinesField ( base ) ; begin
60288: LD_INT 0
60290: PPUSH
// result := mc_mines [ base ] ;
60291: LD_ADDR_VAR 0 2
60295: PUSH
60296: LD_EXP 68
60300: PUSH
60301: LD_VAR 0 1
60305: ARRAY
60306: ST_TO_ADDR
// end ;
60307: LD_VAR 0 2
60311: RET
// export function MC_GetProduceList ( base ) ; begin
60312: LD_INT 0
60314: PPUSH
// result := mc_produce [ base ] ;
60315: LD_ADDR_VAR 0 2
60319: PUSH
60320: LD_EXP 76
60324: PUSH
60325: LD_VAR 0 1
60329: ARRAY
60330: ST_TO_ADDR
// end ;
60331: LD_VAR 0 2
60335: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
60336: LD_INT 0
60338: PPUSH
60339: PPUSH
// if not mc_bases then
60340: LD_EXP 55
60344: NOT
60345: IFFALSE 60349
// exit ;
60347: GO 60414
// if mc_bases [ base ] then
60349: LD_EXP 55
60353: PUSH
60354: LD_VAR 0 1
60358: ARRAY
60359: IFFALSE 60414
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
60361: LD_ADDR_VAR 0 3
60365: PUSH
60366: LD_EXP 55
60370: PUSH
60371: LD_VAR 0 1
60375: ARRAY
60376: PPUSH
60377: LD_INT 30
60379: PUSH
60380: LD_VAR 0 2
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PPUSH
60389: CALL_OW 72
60393: ST_TO_ADDR
// if result then
60394: LD_VAR 0 3
60398: IFFALSE 60414
// result := result [ 1 ] ;
60400: LD_ADDR_VAR 0 3
60404: PUSH
60405: LD_VAR 0 3
60409: PUSH
60410: LD_INT 1
60412: ARRAY
60413: ST_TO_ADDR
// end ; end ;
60414: LD_VAR 0 3
60418: RET
// export function MC_SetTame ( base , area ) ; begin
60419: LD_INT 0
60421: PPUSH
// if not mc_bases or not base then
60422: LD_EXP 55
60426: NOT
60427: PUSH
60428: LD_VAR 0 1
60432: NOT
60433: OR
60434: IFFALSE 60438
// exit ;
60436: GO 60463
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
60438: LD_ADDR_EXP 83
60442: PUSH
60443: LD_EXP 83
60447: PPUSH
60448: LD_VAR 0 1
60452: PPUSH
60453: LD_VAR 0 2
60457: PPUSH
60458: CALL_OW 1
60462: ST_TO_ADDR
// end ;
60463: LD_VAR 0 3
60467: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
60468: LD_INT 0
60470: PPUSH
60471: PPUSH
// if not mc_bases or not base or not kinds then
60472: LD_EXP 55
60476: NOT
60477: PUSH
60478: LD_VAR 0 1
60482: NOT
60483: OR
60484: PUSH
60485: LD_VAR 0 2
60489: NOT
60490: OR
60491: IFFALSE 60495
// exit ;
60493: GO 60556
// for i in kinds do
60495: LD_ADDR_VAR 0 4
60499: PUSH
60500: LD_VAR 0 2
60504: PUSH
60505: FOR_IN
60506: IFFALSE 60554
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
60508: LD_ADDR_EXP 89
60512: PUSH
60513: LD_EXP 89
60517: PPUSH
60518: LD_VAR 0 1
60522: PUSH
60523: LD_EXP 89
60527: PUSH
60528: LD_VAR 0 1
60532: ARRAY
60533: PUSH
60534: LD_INT 1
60536: PLUS
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PPUSH
60542: LD_VAR 0 4
60546: PPUSH
60547: CALL 15798 0 3
60551: ST_TO_ADDR
60552: GO 60505
60554: POP
60555: POP
// end ;
60556: LD_VAR 0 3
60560: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
60561: LD_INT 0
60563: PPUSH
// if not mc_bases or not base or not areas then
60564: LD_EXP 55
60568: NOT
60569: PUSH
60570: LD_VAR 0 1
60574: NOT
60575: OR
60576: PUSH
60577: LD_VAR 0 2
60581: NOT
60582: OR
60583: IFFALSE 60587
// exit ;
60585: GO 60612
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
60587: LD_ADDR_EXP 73
60591: PUSH
60592: LD_EXP 73
60596: PPUSH
60597: LD_VAR 0 1
60601: PPUSH
60602: LD_VAR 0 2
60606: PPUSH
60607: CALL_OW 1
60611: ST_TO_ADDR
// end ;
60612: LD_VAR 0 3
60616: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
60617: LD_INT 0
60619: PPUSH
// if not mc_bases or not base then
60620: LD_EXP 55
60624: NOT
60625: PUSH
60626: LD_VAR 0 1
60630: NOT
60631: OR
60632: IFFALSE 60636
// exit ;
60634: GO 60670
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
60636: LD_ADDR_EXP 90
60640: PUSH
60641: LD_EXP 90
60645: PPUSH
60646: LD_VAR 0 1
60650: PPUSH
60651: LD_VAR 0 2
60655: PUSH
60656: LD_VAR 0 3
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PPUSH
60665: CALL_OW 1
60669: ST_TO_ADDR
// end ; end_of_file
60670: LD_VAR 0 4
60674: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
60675: LD_INT 0
60677: PPUSH
60678: PPUSH
60679: PPUSH
// if not mc_bases then
60680: LD_EXP 55
60684: NOT
60685: IFFALSE 60689
// exit ;
60687: GO 60854
// for i = 1 to mc_bases do
60689: LD_ADDR_VAR 0 4
60693: PUSH
60694: DOUBLE
60695: LD_INT 1
60697: DEC
60698: ST_TO_ADDR
60699: LD_EXP 55
60703: PUSH
60704: FOR_TO
60705: IFFALSE 60852
// begin if sci in mc_bases [ i ] then
60707: LD_VAR 0 2
60711: PUSH
60712: LD_EXP 55
60716: PUSH
60717: LD_VAR 0 4
60721: ARRAY
60722: IN
60723: IFFALSE 60850
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
60725: LD_ADDR_EXP 84
60729: PUSH
60730: LD_EXP 84
60734: PPUSH
60735: LD_VAR 0 4
60739: PUSH
60740: LD_EXP 84
60744: PUSH
60745: LD_VAR 0 4
60749: ARRAY
60750: PUSH
60751: LD_INT 1
60753: PLUS
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PPUSH
60759: LD_VAR 0 1
60763: PPUSH
60764: CALL 15798 0 3
60768: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
60769: LD_ADDR_VAR 0 5
60773: PUSH
60774: LD_EXP 55
60778: PUSH
60779: LD_VAR 0 4
60783: ARRAY
60784: PPUSH
60785: LD_INT 2
60787: PUSH
60788: LD_INT 30
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 30
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: LIST
60812: PPUSH
60813: CALL_OW 72
60817: PPUSH
60818: LD_VAR 0 1
60822: PPUSH
60823: CALL_OW 74
60827: ST_TO_ADDR
// if tmp then
60828: LD_VAR 0 5
60832: IFFALSE 60848
// ComStandNearbyBuilding ( ape , tmp ) ;
60834: LD_VAR 0 1
60838: PPUSH
60839: LD_VAR 0 5
60843: PPUSH
60844: CALL 10577 0 2
// break ;
60848: GO 60852
// end ; end ;
60850: GO 60704
60852: POP
60853: POP
// end ;
60854: LD_VAR 0 3
60858: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
60859: LD_INT 0
60861: PPUSH
60862: PPUSH
60863: PPUSH
// if not mc_bases then
60864: LD_EXP 55
60868: NOT
60869: IFFALSE 60873
// exit ;
60871: GO 60962
// for i = 1 to mc_bases do
60873: LD_ADDR_VAR 0 4
60877: PUSH
60878: DOUBLE
60879: LD_INT 1
60881: DEC
60882: ST_TO_ADDR
60883: LD_EXP 55
60887: PUSH
60888: FOR_TO
60889: IFFALSE 60960
// begin if building in mc_busy_turret_list [ i ] then
60891: LD_VAR 0 1
60895: PUSH
60896: LD_EXP 65
60900: PUSH
60901: LD_VAR 0 4
60905: ARRAY
60906: IN
60907: IFFALSE 60958
// begin tmp := mc_busy_turret_list [ i ] diff building ;
60909: LD_ADDR_VAR 0 5
60913: PUSH
60914: LD_EXP 65
60918: PUSH
60919: LD_VAR 0 4
60923: ARRAY
60924: PUSH
60925: LD_VAR 0 1
60929: DIFF
60930: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
60931: LD_ADDR_EXP 65
60935: PUSH
60936: LD_EXP 65
60940: PPUSH
60941: LD_VAR 0 4
60945: PPUSH
60946: LD_VAR 0 5
60950: PPUSH
60951: CALL_OW 1
60955: ST_TO_ADDR
// break ;
60956: GO 60960
// end ; end ;
60958: GO 60888
60960: POP
60961: POP
// end ;
60962: LD_VAR 0 3
60966: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
60967: LD_INT 0
60969: PPUSH
60970: PPUSH
60971: PPUSH
// if not mc_bases then
60972: LD_EXP 55
60976: NOT
60977: IFFALSE 60981
// exit ;
60979: GO 61180
// for i = 1 to mc_bases do
60981: LD_ADDR_VAR 0 5
60985: PUSH
60986: DOUBLE
60987: LD_INT 1
60989: DEC
60990: ST_TO_ADDR
60991: LD_EXP 55
60995: PUSH
60996: FOR_TO
60997: IFFALSE 61178
// if building in mc_bases [ i ] then
60999: LD_VAR 0 1
61003: PUSH
61004: LD_EXP 55
61008: PUSH
61009: LD_VAR 0 5
61013: ARRAY
61014: IN
61015: IFFALSE 61176
// begin tmp := mc_bases [ i ] diff building ;
61017: LD_ADDR_VAR 0 6
61021: PUSH
61022: LD_EXP 55
61026: PUSH
61027: LD_VAR 0 5
61031: ARRAY
61032: PUSH
61033: LD_VAR 0 1
61037: DIFF
61038: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
61039: LD_ADDR_EXP 55
61043: PUSH
61044: LD_EXP 55
61048: PPUSH
61049: LD_VAR 0 5
61053: PPUSH
61054: LD_VAR 0 6
61058: PPUSH
61059: CALL_OW 1
61063: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
61064: LD_VAR 0 1
61068: PUSH
61069: LD_EXP 63
61073: PUSH
61074: LD_VAR 0 5
61078: ARRAY
61079: IN
61080: IFFALSE 61119
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
61082: LD_ADDR_EXP 63
61086: PUSH
61087: LD_EXP 63
61091: PPUSH
61092: LD_VAR 0 5
61096: PPUSH
61097: LD_EXP 63
61101: PUSH
61102: LD_VAR 0 5
61106: ARRAY
61107: PUSH
61108: LD_VAR 0 1
61112: DIFF
61113: PPUSH
61114: CALL_OW 1
61118: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
61119: LD_VAR 0 1
61123: PUSH
61124: LD_EXP 64
61128: PUSH
61129: LD_VAR 0 5
61133: ARRAY
61134: IN
61135: IFFALSE 61174
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
61137: LD_ADDR_EXP 64
61141: PUSH
61142: LD_EXP 64
61146: PPUSH
61147: LD_VAR 0 5
61151: PPUSH
61152: LD_EXP 64
61156: PUSH
61157: LD_VAR 0 5
61161: ARRAY
61162: PUSH
61163: LD_VAR 0 1
61167: DIFF
61168: PPUSH
61169: CALL_OW 1
61173: ST_TO_ADDR
// break ;
61174: GO 61178
// end ;
61176: GO 60996
61178: POP
61179: POP
// end ;
61180: LD_VAR 0 4
61184: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
61185: LD_INT 0
61187: PPUSH
61188: PPUSH
61189: PPUSH
// if not mc_bases or not side in mc_sides then
61190: LD_EXP 55
61194: NOT
61195: PUSH
61196: LD_VAR 0 3
61200: PUSH
61201: LD_EXP 81
61205: IN
61206: NOT
61207: OR
61208: IFFALSE 61212
// exit ;
61210: GO 61335
// for i = 1 to mc_vehicles do
61212: LD_ADDR_VAR 0 6
61216: PUSH
61217: DOUBLE
61218: LD_INT 1
61220: DEC
61221: ST_TO_ADDR
61222: LD_EXP 74
61226: PUSH
61227: FOR_TO
61228: IFFALSE 61333
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
61230: LD_VAR 0 2
61234: PUSH
61235: LD_EXP 74
61239: PUSH
61240: LD_VAR 0 6
61244: ARRAY
61245: IN
61246: PUSH
61247: LD_VAR 0 1
61251: PUSH
61252: LD_EXP 74
61256: PUSH
61257: LD_VAR 0 6
61261: ARRAY
61262: IN
61263: OR
61264: IFFALSE 61331
// begin tmp := mc_vehicles [ i ] diff old ;
61266: LD_ADDR_VAR 0 7
61270: PUSH
61271: LD_EXP 74
61275: PUSH
61276: LD_VAR 0 6
61280: ARRAY
61281: PUSH
61282: LD_VAR 0 2
61286: DIFF
61287: ST_TO_ADDR
// tmp := tmp diff new ;
61288: LD_ADDR_VAR 0 7
61292: PUSH
61293: LD_VAR 0 7
61297: PUSH
61298: LD_VAR 0 1
61302: DIFF
61303: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
61304: LD_ADDR_EXP 74
61308: PUSH
61309: LD_EXP 74
61313: PPUSH
61314: LD_VAR 0 6
61318: PPUSH
61319: LD_VAR 0 7
61323: PPUSH
61324: CALL_OW 1
61328: ST_TO_ADDR
// break ;
61329: GO 61333
// end ;
61331: GO 61227
61333: POP
61334: POP
// end ;
61335: LD_VAR 0 5
61339: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
61340: LD_INT 0
61342: PPUSH
61343: PPUSH
61344: PPUSH
61345: PPUSH
// if not mc_bases then
61346: LD_EXP 55
61350: NOT
61351: IFFALSE 61355
// exit ;
61353: GO 61647
// side := GetSide ( vehicle ) ;
61355: LD_ADDR_VAR 0 5
61359: PUSH
61360: LD_VAR 0 1
61364: PPUSH
61365: CALL_OW 255
61369: ST_TO_ADDR
// for i = 1 to mc_bases do
61370: LD_ADDR_VAR 0 4
61374: PUSH
61375: DOUBLE
61376: LD_INT 1
61378: DEC
61379: ST_TO_ADDR
61380: LD_EXP 55
61384: PUSH
61385: FOR_TO
61386: IFFALSE 61645
// begin if factory in mc_bases [ i ] then
61388: LD_VAR 0 2
61392: PUSH
61393: LD_EXP 55
61397: PUSH
61398: LD_VAR 0 4
61402: ARRAY
61403: IN
61404: IFFALSE 61643
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
61406: LD_EXP 77
61410: PUSH
61411: LD_VAR 0 4
61415: ARRAY
61416: PUSH
61417: LD_EXP 66
61421: PUSH
61422: LD_VAR 0 4
61426: ARRAY
61427: LESS
61428: IFFALSE 61599
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
61430: LD_ADDR_EXP 77
61434: PUSH
61435: LD_EXP 77
61439: PPUSH
61440: LD_VAR 0 4
61444: PPUSH
61445: LD_EXP 77
61449: PUSH
61450: LD_VAR 0 4
61454: ARRAY
61455: PUSH
61456: LD_VAR 0 1
61460: ADD
61461: PPUSH
61462: CALL_OW 1
61466: ST_TO_ADDR
// if not mc_scan [ i ] then
61467: LD_EXP 78
61471: PUSH
61472: LD_VAR 0 4
61476: ARRAY
61477: NOT
61478: IFFALSE 61597
// begin if GetControl ( vehicle ) = control_remote then
61480: LD_VAR 0 1
61484: PPUSH
61485: CALL_OW 263
61489: PUSH
61490: LD_INT 2
61492: EQUAL
61493: IFFALSE 61513
// repeat wait ( 0 0$1 ) ;
61495: LD_INT 35
61497: PPUSH
61498: CALL_OW 67
// until IsControledBy ( vehicle ) ;
61502: LD_VAR 0 1
61506: PPUSH
61507: CALL_OW 312
61511: IFFALSE 61495
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
61513: LD_VAR 0 1
61517: PPUSH
61518: LD_EXP 79
61522: PUSH
61523: LD_VAR 0 4
61527: ARRAY
61528: PPUSH
61529: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
61533: LD_VAR 0 1
61537: PPUSH
61538: CALL_OW 263
61542: PUSH
61543: LD_INT 1
61545: NONEQUAL
61546: IFFALSE 61550
// break ;
61548: GO 61645
// repeat wait ( 0 0$1 ) ;
61550: LD_INT 35
61552: PPUSH
61553: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
61557: LD_VAR 0 1
61561: PPUSH
61562: LD_EXP 79
61566: PUSH
61567: LD_VAR 0 4
61571: ARRAY
61572: PPUSH
61573: CALL_OW 308
61577: IFFALSE 61550
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
61579: LD_VAR 0 1
61583: PPUSH
61584: CALL_OW 311
61588: PPUSH
61589: CALL_OW 121
// exit ;
61593: POP
61594: POP
61595: GO 61647
// end ; end else
61597: GO 61643
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
61599: LD_ADDR_EXP 74
61603: PUSH
61604: LD_EXP 74
61608: PPUSH
61609: LD_VAR 0 4
61613: PUSH
61614: LD_EXP 74
61618: PUSH
61619: LD_VAR 0 4
61623: ARRAY
61624: PUSH
61625: LD_INT 1
61627: PLUS
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PPUSH
61633: LD_VAR 0 1
61637: PPUSH
61638: CALL 15798 0 3
61642: ST_TO_ADDR
// end ; end ;
61643: GO 61385
61645: POP
61646: POP
// end ;
61647: LD_VAR 0 3
61651: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
61652: LD_INT 0
61654: PPUSH
61655: PPUSH
61656: PPUSH
61657: PPUSH
// if not mc_bases then
61658: LD_EXP 55
61662: NOT
61663: IFFALSE 61667
// exit ;
61665: GO 62020
// repeat wait ( 0 0$1 ) ;
61667: LD_INT 35
61669: PPUSH
61670: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
61674: LD_VAR 0 2
61678: PPUSH
61679: LD_VAR 0 3
61683: PPUSH
61684: CALL_OW 284
61688: IFFALSE 61667
// if GetResourceTypeXY ( x , y ) = mat_artefact then
61690: LD_VAR 0 2
61694: PPUSH
61695: LD_VAR 0 3
61699: PPUSH
61700: CALL_OW 283
61704: PUSH
61705: LD_INT 4
61707: EQUAL
61708: IFFALSE 61712
// exit ;
61710: GO 62020
// for i = 1 to mc_bases do
61712: LD_ADDR_VAR 0 7
61716: PUSH
61717: DOUBLE
61718: LD_INT 1
61720: DEC
61721: ST_TO_ADDR
61722: LD_EXP 55
61726: PUSH
61727: FOR_TO
61728: IFFALSE 62018
// begin if mc_crates_area [ i ] then
61730: LD_EXP 73
61734: PUSH
61735: LD_VAR 0 7
61739: ARRAY
61740: IFFALSE 61851
// for j in mc_crates_area [ i ] do
61742: LD_ADDR_VAR 0 8
61746: PUSH
61747: LD_EXP 73
61751: PUSH
61752: LD_VAR 0 7
61756: ARRAY
61757: PUSH
61758: FOR_IN
61759: IFFALSE 61849
// if InArea ( x , y , j ) then
61761: LD_VAR 0 2
61765: PPUSH
61766: LD_VAR 0 3
61770: PPUSH
61771: LD_VAR 0 8
61775: PPUSH
61776: CALL_OW 309
61780: IFFALSE 61847
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
61782: LD_ADDR_EXP 71
61786: PUSH
61787: LD_EXP 71
61791: PPUSH
61792: LD_VAR 0 7
61796: PUSH
61797: LD_EXP 71
61801: PUSH
61802: LD_VAR 0 7
61806: ARRAY
61807: PUSH
61808: LD_INT 1
61810: PLUS
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PPUSH
61816: LD_VAR 0 4
61820: PUSH
61821: LD_VAR 0 2
61825: PUSH
61826: LD_VAR 0 3
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: LIST
61835: PPUSH
61836: CALL 15798 0 3
61840: ST_TO_ADDR
// exit ;
61841: POP
61842: POP
61843: POP
61844: POP
61845: GO 62020
// end ;
61847: GO 61758
61849: POP
61850: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
61851: LD_ADDR_VAR 0 9
61855: PUSH
61856: LD_EXP 55
61860: PUSH
61861: LD_VAR 0 7
61865: ARRAY
61866: PPUSH
61867: LD_INT 2
61869: PUSH
61870: LD_INT 30
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 30
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: LIST
61894: PPUSH
61895: CALL_OW 72
61899: ST_TO_ADDR
// if not depot then
61900: LD_VAR 0 9
61904: NOT
61905: IFFALSE 61909
// continue ;
61907: GO 61727
// for j in depot do
61909: LD_ADDR_VAR 0 8
61913: PUSH
61914: LD_VAR 0 9
61918: PUSH
61919: FOR_IN
61920: IFFALSE 62014
// if GetDistUnitXY ( j , x , y ) < 30 then
61922: LD_VAR 0 8
61926: PPUSH
61927: LD_VAR 0 2
61931: PPUSH
61932: LD_VAR 0 3
61936: PPUSH
61937: CALL_OW 297
61941: PUSH
61942: LD_INT 30
61944: LESS
61945: IFFALSE 62012
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
61947: LD_ADDR_EXP 71
61951: PUSH
61952: LD_EXP 71
61956: PPUSH
61957: LD_VAR 0 7
61961: PUSH
61962: LD_EXP 71
61966: PUSH
61967: LD_VAR 0 7
61971: ARRAY
61972: PUSH
61973: LD_INT 1
61975: PLUS
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PPUSH
61981: LD_VAR 0 4
61985: PUSH
61986: LD_VAR 0 2
61990: PUSH
61991: LD_VAR 0 3
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: LIST
62000: PPUSH
62001: CALL 15798 0 3
62005: ST_TO_ADDR
// exit ;
62006: POP
62007: POP
62008: POP
62009: POP
62010: GO 62020
// end ;
62012: GO 61919
62014: POP
62015: POP
// end ;
62016: GO 61727
62018: POP
62019: POP
// end ;
62020: LD_VAR 0 6
62024: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
62025: LD_INT 0
62027: PPUSH
62028: PPUSH
62029: PPUSH
62030: PPUSH
// side := GetSide ( lab ) ;
62031: LD_ADDR_VAR 0 4
62035: PUSH
62036: LD_VAR 0 2
62040: PPUSH
62041: CALL_OW 255
62045: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
62046: LD_VAR 0 4
62050: PUSH
62051: LD_EXP 81
62055: IN
62056: NOT
62057: PUSH
62058: LD_EXP 82
62062: NOT
62063: OR
62064: PUSH
62065: LD_EXP 55
62069: NOT
62070: OR
62071: IFFALSE 62075
// exit ;
62073: GO 62344
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
62075: LD_ADDR_EXP 82
62079: PUSH
62080: LD_EXP 82
62084: PPUSH
62085: LD_VAR 0 4
62089: PPUSH
62090: LD_EXP 82
62094: PUSH
62095: LD_VAR 0 4
62099: ARRAY
62100: PUSH
62101: LD_VAR 0 1
62105: DIFF
62106: PPUSH
62107: CALL_OW 1
62111: ST_TO_ADDR
// for i = 1 to mc_bases do
62112: LD_ADDR_VAR 0 5
62116: PUSH
62117: DOUBLE
62118: LD_INT 1
62120: DEC
62121: ST_TO_ADDR
62122: LD_EXP 55
62126: PUSH
62127: FOR_TO
62128: IFFALSE 62342
// begin if lab in mc_bases [ i ] then
62130: LD_VAR 0 2
62134: PUSH
62135: LD_EXP 55
62139: PUSH
62140: LD_VAR 0 5
62144: ARRAY
62145: IN
62146: IFFALSE 62340
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] and not mc_tech [ side ] [ 2 ] in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] then
62148: LD_VAR 0 1
62152: PUSH
62153: LD_INT 11
62155: PUSH
62156: LD_INT 4
62158: PUSH
62159: LD_INT 3
62161: PUSH
62162: LD_INT 2
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: IN
62171: PUSH
62172: LD_EXP 85
62176: PUSH
62177: LD_VAR 0 5
62181: ARRAY
62182: AND
62183: PUSH
62184: LD_EXP 82
62188: PUSH
62189: LD_VAR 0 4
62193: ARRAY
62194: PUSH
62195: LD_INT 2
62197: ARRAY
62198: PUSH
62199: LD_INT 11
62201: PUSH
62202: LD_INT 4
62204: PUSH
62205: LD_INT 3
62207: PUSH
62208: LD_INT 2
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: IN
62217: NOT
62218: AND
62219: IFFALSE 62340
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
62221: LD_ADDR_VAR 0 6
62225: PUSH
62226: LD_EXP 85
62230: PUSH
62231: LD_VAR 0 5
62235: ARRAY
62236: PUSH
62237: LD_INT 1
62239: ARRAY
62240: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
62241: LD_ADDR_EXP 85
62245: PUSH
62246: LD_EXP 85
62250: PPUSH
62251: LD_VAR 0 5
62255: PPUSH
62256: EMPTY
62257: PPUSH
62258: CALL_OW 1
62262: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
62263: LD_VAR 0 6
62267: PPUSH
62268: LD_INT 0
62270: PPUSH
62271: CALL_OW 109
// ComExitBuilding ( tmp ) ;
62275: LD_VAR 0 6
62279: PPUSH
62280: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
62284: LD_ADDR_EXP 84
62288: PUSH
62289: LD_EXP 84
62293: PPUSH
62294: LD_VAR 0 5
62298: PPUSH
62299: LD_EXP 84
62303: PUSH
62304: LD_VAR 0 5
62308: ARRAY
62309: PPUSH
62310: LD_INT 1
62312: PPUSH
62313: LD_VAR 0 6
62317: PPUSH
62318: CALL_OW 2
62322: PPUSH
62323: CALL_OW 1
62327: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
62328: LD_VAR 0 5
62332: PPUSH
62333: LD_INT 112
62335: PPUSH
62336: CALL 48240 0 2
// end ; end ; end ;
62340: GO 62127
62342: POP
62343: POP
// end ;
62344: LD_VAR 0 3
62348: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
62349: LD_INT 0
62351: PPUSH
62352: PPUSH
62353: PPUSH
62354: PPUSH
62355: PPUSH
62356: PPUSH
62357: PPUSH
62358: PPUSH
// if not mc_bases then
62359: LD_EXP 55
62363: NOT
62364: IFFALSE 62368
// exit ;
62366: GO 63293
// for i = 1 to mc_bases do
62368: LD_ADDR_VAR 0 3
62372: PUSH
62373: DOUBLE
62374: LD_INT 1
62376: DEC
62377: ST_TO_ADDR
62378: LD_EXP 55
62382: PUSH
62383: FOR_TO
62384: IFFALSE 63291
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
62386: LD_VAR 0 1
62390: PUSH
62391: LD_EXP 55
62395: PUSH
62396: LD_VAR 0 3
62400: ARRAY
62401: IN
62402: PUSH
62403: LD_VAR 0 1
62407: PUSH
62408: LD_EXP 62
62412: PUSH
62413: LD_VAR 0 3
62417: ARRAY
62418: IN
62419: OR
62420: PUSH
62421: LD_VAR 0 1
62425: PUSH
62426: LD_EXP 74
62430: PUSH
62431: LD_VAR 0 3
62435: ARRAY
62436: IN
62437: OR
62438: PUSH
62439: LD_VAR 0 1
62443: PUSH
62444: LD_EXP 84
62448: PUSH
62449: LD_VAR 0 3
62453: ARRAY
62454: IN
62455: OR
62456: PUSH
62457: LD_VAR 0 1
62461: PUSH
62462: LD_EXP 85
62466: PUSH
62467: LD_VAR 0 3
62471: ARRAY
62472: IN
62473: OR
62474: IFFALSE 63289
// begin if un in mc_ape [ i ] then
62476: LD_VAR 0 1
62480: PUSH
62481: LD_EXP 84
62485: PUSH
62486: LD_VAR 0 3
62490: ARRAY
62491: IN
62492: IFFALSE 62531
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
62494: LD_ADDR_EXP 84
62498: PUSH
62499: LD_EXP 84
62503: PPUSH
62504: LD_VAR 0 3
62508: PPUSH
62509: LD_EXP 84
62513: PUSH
62514: LD_VAR 0 3
62518: ARRAY
62519: PUSH
62520: LD_VAR 0 1
62524: DIFF
62525: PPUSH
62526: CALL_OW 1
62530: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
62531: LD_VAR 0 1
62535: PUSH
62536: LD_EXP 85
62540: PUSH
62541: LD_VAR 0 3
62545: ARRAY
62546: IN
62547: IFFALSE 62571
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
62549: LD_ADDR_EXP 85
62553: PUSH
62554: LD_EXP 85
62558: PPUSH
62559: LD_VAR 0 3
62563: PPUSH
62564: EMPTY
62565: PPUSH
62566: CALL_OW 1
62570: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
62571: LD_VAR 0 1
62575: PPUSH
62576: CALL_OW 247
62580: PUSH
62581: LD_INT 2
62583: EQUAL
62584: PUSH
62585: LD_VAR 0 1
62589: PPUSH
62590: CALL_OW 110
62594: PUSH
62595: LD_INT 20
62597: EQUAL
62598: AND
62599: IFFALSE 62702
// begin fac := MC_GetBuilding ( i , b_factory ) ;
62601: LD_ADDR_VAR 0 8
62605: PUSH
62606: LD_VAR 0 3
62610: PPUSH
62611: LD_INT 3
62613: PPUSH
62614: CALL 60336 0 2
62618: ST_TO_ADDR
// if fac then
62619: LD_VAR 0 8
62623: IFFALSE 62702
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
62625: LD_ADDR_VAR 0 9
62629: PUSH
62630: LD_VAR 0 8
62634: PPUSH
62635: LD_VAR 0 1
62639: PPUSH
62640: CALL_OW 265
62644: PPUSH
62645: LD_VAR 0 1
62649: PPUSH
62650: CALL_OW 262
62654: PPUSH
62655: LD_VAR 0 1
62659: PPUSH
62660: CALL_OW 263
62664: PPUSH
62665: LD_VAR 0 1
62669: PPUSH
62670: CALL_OW 264
62674: PPUSH
62675: CALL 12963 0 5
62679: ST_TO_ADDR
// if components then
62680: LD_VAR 0 9
62684: IFFALSE 62700
// MC_InsertProduceList ( i , components ) ;
62686: LD_VAR 0 3
62690: PPUSH
62691: LD_VAR 0 9
62695: PPUSH
62696: CALL 59999 0 2
// break ;
62700: GO 63291
// end ; end ; if GetType ( un ) = unit_building then
62702: LD_VAR 0 1
62706: PPUSH
62707: CALL_OW 247
62711: PUSH
62712: LD_INT 3
62714: EQUAL
62715: IFFALSE 63012
// begin btype := GetBType ( un ) ;
62717: LD_ADDR_VAR 0 5
62721: PUSH
62722: LD_VAR 0 1
62726: PPUSH
62727: CALL_OW 266
62731: ST_TO_ADDR
// if btype = b_warehouse then
62732: LD_VAR 0 5
62736: PUSH
62737: LD_INT 1
62739: EQUAL
62740: IFFALSE 62758
// begin btype := b_depot ;
62742: LD_ADDR_VAR 0 5
62746: PUSH
62747: LD_INT 0
62749: ST_TO_ADDR
// pos := 1 ;
62750: LD_ADDR_VAR 0 6
62754: PUSH
62755: LD_INT 1
62757: ST_TO_ADDR
// end ; if btype = b_factory then
62758: LD_VAR 0 5
62762: PUSH
62763: LD_INT 3
62765: EQUAL
62766: IFFALSE 62784
// begin btype := b_workshop ;
62768: LD_ADDR_VAR 0 5
62772: PUSH
62773: LD_INT 2
62775: ST_TO_ADDR
// pos := 1 ;
62776: LD_ADDR_VAR 0 6
62780: PUSH
62781: LD_INT 1
62783: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
62784: LD_VAR 0 5
62788: PUSH
62789: LD_INT 7
62791: PUSH
62792: LD_INT 8
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: IN
62799: IFFALSE 62809
// btype := b_lab ;
62801: LD_ADDR_VAR 0 5
62805: PUSH
62806: LD_INT 6
62808: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
62809: LD_ADDR_EXP 60
62813: PUSH
62814: LD_EXP 60
62818: PPUSH
62819: LD_VAR 0 3
62823: PUSH
62824: LD_EXP 60
62828: PUSH
62829: LD_VAR 0 3
62833: ARRAY
62834: PUSH
62835: LD_INT 1
62837: PLUS
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PPUSH
62843: LD_VAR 0 5
62847: PUSH
62848: LD_VAR 0 1
62852: PPUSH
62853: CALL_OW 250
62857: PUSH
62858: LD_VAR 0 1
62862: PPUSH
62863: CALL_OW 251
62867: PUSH
62868: LD_VAR 0 1
62872: PPUSH
62873: CALL_OW 254
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: PPUSH
62884: CALL 15798 0 3
62888: ST_TO_ADDR
// if pos = 1 then
62889: LD_VAR 0 6
62893: PUSH
62894: LD_INT 1
62896: EQUAL
62897: IFFALSE 63012
// begin tmp := mc_build_list [ i ] ;
62899: LD_ADDR_VAR 0 7
62903: PUSH
62904: LD_EXP 60
62908: PUSH
62909: LD_VAR 0 3
62913: ARRAY
62914: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
62915: LD_VAR 0 7
62919: PPUSH
62920: LD_INT 2
62922: PUSH
62923: LD_INT 30
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 30
62935: PUSH
62936: LD_INT 1
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: LIST
62947: PPUSH
62948: CALL_OW 72
62952: IFFALSE 62962
// pos := 2 ;
62954: LD_ADDR_VAR 0 6
62958: PUSH
62959: LD_INT 2
62961: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
62962: LD_ADDR_VAR 0 7
62966: PUSH
62967: LD_VAR 0 7
62971: PPUSH
62972: LD_VAR 0 6
62976: PPUSH
62977: LD_VAR 0 7
62981: PPUSH
62982: CALL 15689 0 3
62986: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
62987: LD_ADDR_EXP 60
62991: PUSH
62992: LD_EXP 60
62996: PPUSH
62997: LD_VAR 0 3
63001: PPUSH
63002: LD_VAR 0 7
63006: PPUSH
63007: CALL_OW 1
63011: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
63012: LD_VAR 0 1
63016: PUSH
63017: LD_EXP 55
63021: PUSH
63022: LD_VAR 0 3
63026: ARRAY
63027: IN
63028: IFFALSE 63067
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
63030: LD_ADDR_EXP 55
63034: PUSH
63035: LD_EXP 55
63039: PPUSH
63040: LD_VAR 0 3
63044: PPUSH
63045: LD_EXP 55
63049: PUSH
63050: LD_VAR 0 3
63054: ARRAY
63055: PUSH
63056: LD_VAR 0 1
63060: DIFF
63061: PPUSH
63062: CALL_OW 1
63066: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
63067: LD_VAR 0 1
63071: PUSH
63072: LD_EXP 62
63076: PUSH
63077: LD_VAR 0 3
63081: ARRAY
63082: IN
63083: IFFALSE 63122
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
63085: LD_ADDR_EXP 62
63089: PUSH
63090: LD_EXP 62
63094: PPUSH
63095: LD_VAR 0 3
63099: PPUSH
63100: LD_EXP 62
63104: PUSH
63105: LD_VAR 0 3
63109: ARRAY
63110: PUSH
63111: LD_VAR 0 1
63115: DIFF
63116: PPUSH
63117: CALL_OW 1
63121: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
63122: LD_VAR 0 1
63126: PUSH
63127: LD_EXP 74
63131: PUSH
63132: LD_VAR 0 3
63136: ARRAY
63137: IN
63138: IFFALSE 63177
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
63140: LD_ADDR_EXP 74
63144: PUSH
63145: LD_EXP 74
63149: PPUSH
63150: LD_VAR 0 3
63154: PPUSH
63155: LD_EXP 74
63159: PUSH
63160: LD_VAR 0 3
63164: ARRAY
63165: PUSH
63166: LD_VAR 0 1
63170: DIFF
63171: PPUSH
63172: CALL_OW 1
63176: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
63177: LD_VAR 0 1
63181: PUSH
63182: LD_EXP 64
63186: PUSH
63187: LD_VAR 0 3
63191: ARRAY
63192: IN
63193: IFFALSE 63232
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
63195: LD_ADDR_EXP 64
63199: PUSH
63200: LD_EXP 64
63204: PPUSH
63205: LD_VAR 0 3
63209: PPUSH
63210: LD_EXP 64
63214: PUSH
63215: LD_VAR 0 3
63219: ARRAY
63220: PUSH
63221: LD_VAR 0 1
63225: DIFF
63226: PPUSH
63227: CALL_OW 1
63231: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
63232: LD_VAR 0 1
63236: PUSH
63237: LD_EXP 63
63241: PUSH
63242: LD_VAR 0 3
63246: ARRAY
63247: IN
63248: IFFALSE 63287
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
63250: LD_ADDR_EXP 63
63254: PUSH
63255: LD_EXP 63
63259: PPUSH
63260: LD_VAR 0 3
63264: PPUSH
63265: LD_EXP 63
63269: PUSH
63270: LD_VAR 0 3
63274: ARRAY
63275: PUSH
63276: LD_VAR 0 1
63280: DIFF
63281: PPUSH
63282: CALL_OW 1
63286: ST_TO_ADDR
// end ; break ;
63287: GO 63291
// end ;
63289: GO 62383
63291: POP
63292: POP
// end ;
63293: LD_VAR 0 2
63297: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
63298: LD_INT 0
63300: PPUSH
63301: PPUSH
63302: PPUSH
// if not mc_bases then
63303: LD_EXP 55
63307: NOT
63308: IFFALSE 63312
// exit ;
63310: GO 63527
// for i = 1 to mc_bases do
63312: LD_ADDR_VAR 0 3
63316: PUSH
63317: DOUBLE
63318: LD_INT 1
63320: DEC
63321: ST_TO_ADDR
63322: LD_EXP 55
63326: PUSH
63327: FOR_TO
63328: IFFALSE 63525
// begin if building in mc_construct_list [ i ] then
63330: LD_VAR 0 1
63334: PUSH
63335: LD_EXP 62
63339: PUSH
63340: LD_VAR 0 3
63344: ARRAY
63345: IN
63346: IFFALSE 63523
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
63348: LD_ADDR_EXP 62
63352: PUSH
63353: LD_EXP 62
63357: PPUSH
63358: LD_VAR 0 3
63362: PPUSH
63363: LD_EXP 62
63367: PUSH
63368: LD_VAR 0 3
63372: ARRAY
63373: PUSH
63374: LD_VAR 0 1
63378: DIFF
63379: PPUSH
63380: CALL_OW 1
63384: ST_TO_ADDR
// if building in mc_lab [ i ] then
63385: LD_VAR 0 1
63389: PUSH
63390: LD_EXP 88
63394: PUSH
63395: LD_VAR 0 3
63399: ARRAY
63400: IN
63401: IFFALSE 63456
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
63403: LD_ADDR_EXP 89
63407: PUSH
63408: LD_EXP 89
63412: PPUSH
63413: LD_VAR 0 3
63417: PPUSH
63418: LD_EXP 89
63422: PUSH
63423: LD_VAR 0 3
63427: ARRAY
63428: PPUSH
63429: LD_INT 1
63431: PPUSH
63432: LD_EXP 89
63436: PUSH
63437: LD_VAR 0 3
63441: ARRAY
63442: PPUSH
63443: LD_INT 0
63445: PPUSH
63446: CALL 14781 0 4
63450: PPUSH
63451: CALL_OW 1
63455: ST_TO_ADDR
// if not building in mc_bases [ i ] then
63456: LD_VAR 0 1
63460: PUSH
63461: LD_EXP 55
63465: PUSH
63466: LD_VAR 0 3
63470: ARRAY
63471: IN
63472: NOT
63473: IFFALSE 63519
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
63475: LD_ADDR_EXP 55
63479: PUSH
63480: LD_EXP 55
63484: PPUSH
63485: LD_VAR 0 3
63489: PUSH
63490: LD_EXP 55
63494: PUSH
63495: LD_VAR 0 3
63499: ARRAY
63500: PUSH
63501: LD_INT 1
63503: PLUS
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PPUSH
63509: LD_VAR 0 1
63513: PPUSH
63514: CALL 15798 0 3
63518: ST_TO_ADDR
// exit ;
63519: POP
63520: POP
63521: GO 63527
// end ; end ;
63523: GO 63327
63525: POP
63526: POP
// end ;
63527: LD_VAR 0 2
63531: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
63532: LD_INT 0
63534: PPUSH
63535: PPUSH
63536: PPUSH
63537: PPUSH
63538: PPUSH
63539: PPUSH
63540: PPUSH
// if not mc_bases then
63541: LD_EXP 55
63545: NOT
63546: IFFALSE 63550
// exit ;
63548: GO 64211
// for i = 1 to mc_bases do
63550: LD_ADDR_VAR 0 3
63554: PUSH
63555: DOUBLE
63556: LD_INT 1
63558: DEC
63559: ST_TO_ADDR
63560: LD_EXP 55
63564: PUSH
63565: FOR_TO
63566: IFFALSE 64209
// begin if building in mc_construct_list [ i ] then
63568: LD_VAR 0 1
63572: PUSH
63573: LD_EXP 62
63577: PUSH
63578: LD_VAR 0 3
63582: ARRAY
63583: IN
63584: IFFALSE 64207
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
63586: LD_ADDR_EXP 62
63590: PUSH
63591: LD_EXP 62
63595: PPUSH
63596: LD_VAR 0 3
63600: PPUSH
63601: LD_EXP 62
63605: PUSH
63606: LD_VAR 0 3
63610: ARRAY
63611: PUSH
63612: LD_VAR 0 1
63616: DIFF
63617: PPUSH
63618: CALL_OW 1
63622: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
63623: LD_ADDR_EXP 55
63627: PUSH
63628: LD_EXP 55
63632: PPUSH
63633: LD_VAR 0 3
63637: PUSH
63638: LD_EXP 55
63642: PUSH
63643: LD_VAR 0 3
63647: ARRAY
63648: PUSH
63649: LD_INT 1
63651: PLUS
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PPUSH
63657: LD_VAR 0 1
63661: PPUSH
63662: CALL 15798 0 3
63666: ST_TO_ADDR
// btype := GetBType ( building ) ;
63667: LD_ADDR_VAR 0 5
63671: PUSH
63672: LD_VAR 0 1
63676: PPUSH
63677: CALL_OW 266
63681: ST_TO_ADDR
// side := GetSide ( building ) ;
63682: LD_ADDR_VAR 0 8
63686: PUSH
63687: LD_VAR 0 1
63691: PPUSH
63692: CALL_OW 255
63696: ST_TO_ADDR
// if btype = b_lab then
63697: LD_VAR 0 5
63701: PUSH
63702: LD_INT 6
63704: EQUAL
63705: IFFALSE 63755
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
63707: LD_ADDR_EXP 88
63711: PUSH
63712: LD_EXP 88
63716: PPUSH
63717: LD_VAR 0 3
63721: PUSH
63722: LD_EXP 88
63726: PUSH
63727: LD_VAR 0 3
63731: ARRAY
63732: PUSH
63733: LD_INT 1
63735: PLUS
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PPUSH
63741: LD_VAR 0 1
63745: PPUSH
63746: CALL 15798 0 3
63750: ST_TO_ADDR
// exit ;
63751: POP
63752: POP
63753: GO 64211
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
63755: LD_VAR 0 5
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: LD_INT 2
63765: PUSH
63766: LD_INT 4
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: LIST
63773: IN
63774: IFFALSE 63898
// begin if btype = b_armoury then
63776: LD_VAR 0 5
63780: PUSH
63781: LD_INT 4
63783: EQUAL
63784: IFFALSE 63794
// btype := b_barracks ;
63786: LD_ADDR_VAR 0 5
63790: PUSH
63791: LD_INT 5
63793: ST_TO_ADDR
// if btype = b_depot then
63794: LD_VAR 0 5
63798: PUSH
63799: LD_INT 0
63801: EQUAL
63802: IFFALSE 63812
// btype := b_warehouse ;
63804: LD_ADDR_VAR 0 5
63808: PUSH
63809: LD_INT 1
63811: ST_TO_ADDR
// if btype = b_workshop then
63812: LD_VAR 0 5
63816: PUSH
63817: LD_INT 2
63819: EQUAL
63820: IFFALSE 63830
// btype := b_factory ;
63822: LD_ADDR_VAR 0 5
63826: PUSH
63827: LD_INT 3
63829: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
63830: LD_VAR 0 5
63834: PPUSH
63835: LD_VAR 0 8
63839: PPUSH
63840: CALL_OW 323
63844: PUSH
63845: LD_INT 1
63847: EQUAL
63848: IFFALSE 63894
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
63850: LD_ADDR_EXP 87
63854: PUSH
63855: LD_EXP 87
63859: PPUSH
63860: LD_VAR 0 3
63864: PUSH
63865: LD_EXP 87
63869: PUSH
63870: LD_VAR 0 3
63874: ARRAY
63875: PUSH
63876: LD_INT 1
63878: PLUS
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PPUSH
63884: LD_VAR 0 1
63888: PPUSH
63889: CALL 15798 0 3
63893: ST_TO_ADDR
// exit ;
63894: POP
63895: POP
63896: GO 64211
// end ; if btype in [ b_bunker , b_turret ] then
63898: LD_VAR 0 5
63902: PUSH
63903: LD_INT 32
63905: PUSH
63906: LD_INT 33
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: IN
63913: IFFALSE 64203
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
63915: LD_ADDR_EXP 63
63919: PUSH
63920: LD_EXP 63
63924: PPUSH
63925: LD_VAR 0 3
63929: PUSH
63930: LD_EXP 63
63934: PUSH
63935: LD_VAR 0 3
63939: ARRAY
63940: PUSH
63941: LD_INT 1
63943: PLUS
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PPUSH
63949: LD_VAR 0 1
63953: PPUSH
63954: CALL 15798 0 3
63958: ST_TO_ADDR
// if btype = b_bunker then
63959: LD_VAR 0 5
63963: PUSH
63964: LD_INT 32
63966: EQUAL
63967: IFFALSE 64203
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
63969: LD_ADDR_EXP 64
63973: PUSH
63974: LD_EXP 64
63978: PPUSH
63979: LD_VAR 0 3
63983: PUSH
63984: LD_EXP 64
63988: PUSH
63989: LD_VAR 0 3
63993: ARRAY
63994: PUSH
63995: LD_INT 1
63997: PLUS
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PPUSH
64003: LD_VAR 0 1
64007: PPUSH
64008: CALL 15798 0 3
64012: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
64013: LD_ADDR_VAR 0 6
64017: PUSH
64018: LD_EXP 55
64022: PUSH
64023: LD_VAR 0 3
64027: ARRAY
64028: PPUSH
64029: LD_INT 25
64031: PUSH
64032: LD_INT 1
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 3
64041: PUSH
64042: LD_INT 54
64044: PUSH
64045: EMPTY
64046: LIST
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PPUSH
64056: CALL_OW 72
64060: ST_TO_ADDR
// if tmp then
64061: LD_VAR 0 6
64065: IFFALSE 64071
// exit ;
64067: POP
64068: POP
64069: GO 64211
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
64071: LD_ADDR_VAR 0 6
64075: PUSH
64076: LD_EXP 55
64080: PUSH
64081: LD_VAR 0 3
64085: ARRAY
64086: PPUSH
64087: LD_INT 2
64089: PUSH
64090: LD_INT 30
64092: PUSH
64093: LD_INT 4
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 30
64102: PUSH
64103: LD_INT 5
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: LIST
64114: PPUSH
64115: CALL_OW 72
64119: ST_TO_ADDR
// if not tmp then
64120: LD_VAR 0 6
64124: NOT
64125: IFFALSE 64131
// exit ;
64127: POP
64128: POP
64129: GO 64211
// for j in tmp do
64131: LD_ADDR_VAR 0 4
64135: PUSH
64136: LD_VAR 0 6
64140: PUSH
64141: FOR_IN
64142: IFFALSE 64201
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
64144: LD_ADDR_VAR 0 7
64148: PUSH
64149: LD_VAR 0 4
64153: PPUSH
64154: CALL_OW 313
64158: PPUSH
64159: LD_INT 25
64161: PUSH
64162: LD_INT 1
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PPUSH
64169: CALL_OW 72
64173: ST_TO_ADDR
// if units then
64174: LD_VAR 0 7
64178: IFFALSE 64199
// begin ComExitBuilding ( units [ 1 ] ) ;
64180: LD_VAR 0 7
64184: PUSH
64185: LD_INT 1
64187: ARRAY
64188: PPUSH
64189: CALL_OW 122
// exit ;
64193: POP
64194: POP
64195: POP
64196: POP
64197: GO 64211
// end ; end ;
64199: GO 64141
64201: POP
64202: POP
// end ; end ; exit ;
64203: POP
64204: POP
64205: GO 64211
// end ; end ;
64207: GO 63565
64209: POP
64210: POP
// end ;
64211: LD_VAR 0 2
64215: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
64216: LD_INT 0
64218: PPUSH
64219: PPUSH
64220: PPUSH
64221: PPUSH
64222: PPUSH
64223: PPUSH
64224: PPUSH
// if not mc_bases then
64225: LD_EXP 55
64229: NOT
64230: IFFALSE 64234
// exit ;
64232: GO 64465
// btype := GetBType ( building ) ;
64234: LD_ADDR_VAR 0 6
64238: PUSH
64239: LD_VAR 0 1
64243: PPUSH
64244: CALL_OW 266
64248: ST_TO_ADDR
// x := GetX ( building ) ;
64249: LD_ADDR_VAR 0 7
64253: PUSH
64254: LD_VAR 0 1
64258: PPUSH
64259: CALL_OW 250
64263: ST_TO_ADDR
// y := GetY ( building ) ;
64264: LD_ADDR_VAR 0 8
64268: PUSH
64269: LD_VAR 0 1
64273: PPUSH
64274: CALL_OW 251
64278: ST_TO_ADDR
// d := GetDir ( building ) ;
64279: LD_ADDR_VAR 0 9
64283: PUSH
64284: LD_VAR 0 1
64288: PPUSH
64289: CALL_OW 254
64293: ST_TO_ADDR
// for i = 1 to mc_bases do
64294: LD_ADDR_VAR 0 4
64298: PUSH
64299: DOUBLE
64300: LD_INT 1
64302: DEC
64303: ST_TO_ADDR
64304: LD_EXP 55
64308: PUSH
64309: FOR_TO
64310: IFFALSE 64463
// begin if not mc_build_list [ i ] then
64312: LD_EXP 60
64316: PUSH
64317: LD_VAR 0 4
64321: ARRAY
64322: NOT
64323: IFFALSE 64327
// continue ;
64325: GO 64309
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
64327: LD_VAR 0 6
64331: PUSH
64332: LD_VAR 0 7
64336: PUSH
64337: LD_VAR 0 8
64341: PUSH
64342: LD_VAR 0 9
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: PPUSH
64353: LD_EXP 60
64357: PUSH
64358: LD_VAR 0 4
64362: ARRAY
64363: PUSH
64364: LD_INT 1
64366: ARRAY
64367: PPUSH
64368: CALL 21396 0 2
64372: IFFALSE 64461
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
64374: LD_ADDR_EXP 60
64378: PUSH
64379: LD_EXP 60
64383: PPUSH
64384: LD_VAR 0 4
64388: PPUSH
64389: LD_EXP 60
64393: PUSH
64394: LD_VAR 0 4
64398: ARRAY
64399: PPUSH
64400: LD_INT 1
64402: PPUSH
64403: CALL_OW 3
64407: PPUSH
64408: CALL_OW 1
64412: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
64413: LD_ADDR_EXP 62
64417: PUSH
64418: LD_EXP 62
64422: PPUSH
64423: LD_VAR 0 4
64427: PUSH
64428: LD_EXP 62
64432: PUSH
64433: LD_VAR 0 4
64437: ARRAY
64438: PUSH
64439: LD_INT 1
64441: PLUS
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PPUSH
64447: LD_VAR 0 1
64451: PPUSH
64452: CALL 15798 0 3
64456: ST_TO_ADDR
// exit ;
64457: POP
64458: POP
64459: GO 64465
// end ; end ;
64461: GO 64309
64463: POP
64464: POP
// end ;
64465: LD_VAR 0 3
64469: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
64470: LD_INT 0
64472: PPUSH
64473: PPUSH
64474: PPUSH
// if not mc_bases then
64475: LD_EXP 55
64479: NOT
64480: IFFALSE 64484
// exit ;
64482: GO 64674
// for i = 1 to mc_bases do
64484: LD_ADDR_VAR 0 4
64488: PUSH
64489: DOUBLE
64490: LD_INT 1
64492: DEC
64493: ST_TO_ADDR
64494: LD_EXP 55
64498: PUSH
64499: FOR_TO
64500: IFFALSE 64587
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
64502: LD_VAR 0 1
64506: PUSH
64507: LD_EXP 63
64511: PUSH
64512: LD_VAR 0 4
64516: ARRAY
64517: IN
64518: PUSH
64519: LD_VAR 0 1
64523: PUSH
64524: LD_EXP 64
64528: PUSH
64529: LD_VAR 0 4
64533: ARRAY
64534: IN
64535: NOT
64536: AND
64537: IFFALSE 64585
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
64539: LD_ADDR_EXP 64
64543: PUSH
64544: LD_EXP 64
64548: PPUSH
64549: LD_VAR 0 4
64553: PUSH
64554: LD_EXP 64
64558: PUSH
64559: LD_VAR 0 4
64563: ARRAY
64564: PUSH
64565: LD_INT 1
64567: PLUS
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PPUSH
64573: LD_VAR 0 1
64577: PPUSH
64578: CALL 15798 0 3
64582: ST_TO_ADDR
// break ;
64583: GO 64587
// end ; end ;
64585: GO 64499
64587: POP
64588: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
64589: LD_VAR 0 1
64593: PPUSH
64594: CALL_OW 257
64598: PUSH
64599: LD_EXP 81
64603: IN
64604: PUSH
64605: LD_VAR 0 1
64609: PPUSH
64610: CALL_OW 266
64614: PUSH
64615: LD_INT 5
64617: EQUAL
64618: AND
64619: PUSH
64620: LD_VAR 0 2
64624: PPUSH
64625: CALL_OW 110
64629: PUSH
64630: LD_INT 18
64632: NONEQUAL
64633: AND
64634: IFFALSE 64674
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
64636: LD_VAR 0 2
64640: PPUSH
64641: CALL_OW 257
64645: PUSH
64646: LD_INT 5
64648: PUSH
64649: LD_INT 8
64651: PUSH
64652: LD_INT 9
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: LIST
64659: IN
64660: IFFALSE 64674
// SetClass ( unit , 1 ) ;
64662: LD_VAR 0 2
64666: PPUSH
64667: LD_INT 1
64669: PPUSH
64670: CALL_OW 336
// end ;
64674: LD_VAR 0 3
64678: RET
// export function MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
64679: LD_INT 0
64681: PPUSH
64682: PPUSH
// if not mc_bases then
64683: LD_EXP 55
64687: NOT
64688: IFFALSE 64692
// exit ;
64690: GO 64808
// if GetLives ( abandoned_vehicle ) > 250 then
64692: LD_VAR 0 2
64696: PPUSH
64697: CALL_OW 256
64701: PUSH
64702: LD_INT 250
64704: GREATER
64705: IFFALSE 64709
// exit ;
64707: GO 64808
// for i = 1 to mc_bases do
64709: LD_ADDR_VAR 0 6
64713: PUSH
64714: DOUBLE
64715: LD_INT 1
64717: DEC
64718: ST_TO_ADDR
64719: LD_EXP 55
64723: PUSH
64724: FOR_TO
64725: IFFALSE 64806
// begin if driver in mc_bases [ i ] then
64727: LD_VAR 0 1
64731: PUSH
64732: LD_EXP 55
64736: PUSH
64737: LD_VAR 0 6
64741: ARRAY
64742: IN
64743: IFFALSE 64804
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
64745: LD_VAR 0 1
64749: PPUSH
64750: LD_EXP 55
64754: PUSH
64755: LD_VAR 0 6
64759: ARRAY
64760: PPUSH
64761: LD_INT 2
64763: PUSH
64764: LD_INT 30
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 30
64776: PUSH
64777: LD_INT 1
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: LIST
64788: PPUSH
64789: CALL_OW 72
64793: PUSH
64794: LD_INT 1
64796: ARRAY
64797: PPUSH
64798: CALL_OW 112
// break ;
64802: GO 64806
// end ; end ;
64804: GO 64724
64806: POP
64807: POP
// end ;
64808: LD_VAR 0 5
64812: RET
