// export al , rus , ar , oth ; export maxlidi ; export ars0 , ars1 , ars2 , ars3 , ars4 , ars5 , ars6 , ars7 , ars8 , ars9 , ars10 , arm0 ; export arv1_ch , arv1_wp , arm1_sk , arv2_ch , arv2_wp , arm2_sk , arv3_ch , arv3_wp , arm3_sk , arv4_ch , arv4_wp , arm4_sk , arv5_ch , arv5_wp , arm5_sk , arv6_ch , arv6_wp , arm6_sk , arv7_ch , arv7_wp , arv8_ch , arv8_wp , arv9_ch , arv9_wp , arv10_ch , arv10_wp ; export ruv0_ch , ruv0_wp , ruv1_ch , ruv1_wp , ruv2_ch , ruv2_wp , ruv3_ch , ruv3_wp , ruv4_ch , ruv4_wp , ruv5_ch , ruv5_wp , ruv6_ch , ruv6_wp , ruv7_ch , ruv7_wp , ruv8_ch , ruv8_wp ; export rumech1_sk , rumech2_sk , rumech3_sk , rumech4_sk , rumech5_sk , rumech6_sk , rumech7_sk , rumech8_sk ; export hr_auta , time2wait , delay , arab_artef_zdrh , time2destmasha_ , time2destmasha ; export koncime , debug , artef_out , base_out ; function set_vars ; begin
   0: LD_INT 0
   2: PPUSH
// al = 7 ;
   3: LD_ADDR_EXP 1
   7: PUSH
   8: LD_INT 7
  10: ST_TO_ADDR
// rus = 3 ;
  11: LD_ADDR_EXP 2
  15: PUSH
  16: LD_INT 3
  18: ST_TO_ADDR
// ar = 2 ;
  19: LD_ADDR_EXP 3
  23: PUSH
  24: LD_INT 2
  26: ST_TO_ADDR
// oth = 4 ;
  27: LD_ADDR_EXP 4
  31: PUSH
  32: LD_INT 4
  34: ST_TO_ADDR
// rusove = [ ] ;
  35: LD_ADDR_EXP 115
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// rusoveu = [ ] ;
  42: LD_ADDR_EXP 116
  46: PUSH
  47: EMPTY
  48: ST_TO_ADDR
// maxlidi = 13 ;
  49: LD_ADDR_EXP 5
  53: PUSH
  54: LD_INT 13
  56: ST_TO_ADDR
// burlakmet = false ;
  57: LD_ADDR_EXP 113
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// ar_base_spotted = false ;
  65: LD_ADDR_EXP 153
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// vyjednavalo_se = false ;
  73: LD_ADDR_EXP 114
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// base_out = false ;
  81: LD_ADDR_EXP 79
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// lb1 = false ;
  89: LD_ADDR_EXP 111
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// supplies = 30 ;
  97: LD_ADDR_LOC 3
 101: PUSH
 102: LD_INT 30
 104: ST_TO_ADDR
// cperiode = [ 1 1$30 , 1 1$30 , 1 1$45 ] [ difficulty ] ;
 105: LD_ADDR_LOC 2
 109: PUSH
 110: LD_INT 3150
 112: PUSH
 113: LD_INT 3150
 115: PUSH
 116: LD_INT 3675
 118: PUSH
 119: EMPTY
 120: LIST
 121: LIST
 122: LIST
 123: PUSH
 124: LD_OWVAR 67
 128: ARRAY
 129: ST_TO_ADDR
// hr_auta = [ 500 , 500 , 500 ] [ difficulty ] ;
 130: LD_ADDR_EXP 70
 134: PUSH
 135: LD_INT 500
 137: PUSH
 138: LD_INT 500
 140: PUSH
 141: LD_INT 500
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: PUSH
 149: LD_OWVAR 67
 153: ARRAY
 154: ST_TO_ADDR
// time2wait = [ 3 3$0 , 1 1$30 , 0 0$30 ] [ difficulty ] ;
 155: LD_ADDR_EXP 71
 159: PUSH
 160: LD_INT 6300
 162: PUSH
 163: LD_INT 3150
 165: PUSH
 166: LD_INT 1050
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: LIST
 173: PUSH
 174: LD_OWVAR 67
 178: ARRAY
 179: ST_TO_ADDR
// arab_artef_zdrh = [ 30 30$0 , 15 15$0 , 5 5$0 ] [ difficulty ] ;
 180: LD_ADDR_EXP 73
 184: PUSH
 185: LD_INT 63000
 187: PUSH
 188: LD_INT 31500
 190: PUSH
 191: LD_INT 10500
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_OWVAR 67
 203: ARRAY
 204: ST_TO_ADDR
// time2destmasha = [ 10 10$0 , 7 7$0 , 5 5$0 ] [ difficulty ] ;
 205: LD_ADDR_EXP 75
 209: PUSH
 210: LD_INT 21000
 212: PUSH
 213: LD_INT 14700
 215: PUSH
 216: LD_INT 10500
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_OWVAR 67
 228: ARRAY
 229: ST_TO_ADDR
// ars0 = [ 3 , 5 , 7 ] [ difficulty ] ;
 230: LD_ADDR_EXP 6
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 5
 240: PUSH
 241: LD_INT 7
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// ars1 = [ 4 , 6 , 8 ] [ difficulty ] ;
 255: LD_ADDR_EXP 7
 259: PUSH
 260: LD_INT 4
 262: PUSH
 263: LD_INT 6
 265: PUSH
 266: LD_INT 8
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_OWVAR 67
 278: ARRAY
 279: ST_TO_ADDR
// ars2 = [ 4 , 6 , 8 ] [ difficulty ] ;
 280: LD_ADDR_EXP 8
 284: PUSH
 285: LD_INT 4
 287: PUSH
 288: LD_INT 6
 290: PUSH
 291: LD_INT 8
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: LIST
 298: PUSH
 299: LD_OWVAR 67
 303: ARRAY
 304: ST_TO_ADDR
// ars3 = [ 3 , 5 , 7 ] [ difficulty ] ;
 305: LD_ADDR_EXP 9
 309: PUSH
 310: LD_INT 3
 312: PUSH
 313: LD_INT 5
 315: PUSH
 316: LD_INT 7
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: LIST
 323: PUSH
 324: LD_OWVAR 67
 328: ARRAY
 329: ST_TO_ADDR
// ars4 = [ 5 , 7 , 9 ] [ difficulty ] ;
 330: LD_ADDR_EXP 10
 334: PUSH
 335: LD_INT 5
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: LD_INT 9
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: LIST
 348: PUSH
 349: LD_OWVAR 67
 353: ARRAY
 354: ST_TO_ADDR
// ars5 = [ 4 , 6 , 8 ] [ difficulty ] ;
 355: LD_ADDR_EXP 11
 359: PUSH
 360: LD_INT 4
 362: PUSH
 363: LD_INT 6
 365: PUSH
 366: LD_INT 8
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: LD_OWVAR 67
 378: ARRAY
 379: ST_TO_ADDR
// ars6 = [ 4 , 6 , 8 ] [ difficulty ] ;
 380: LD_ADDR_EXP 12
 384: PUSH
 385: LD_INT 4
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 8
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: LIST
 398: PUSH
 399: LD_OWVAR 67
 403: ARRAY
 404: ST_TO_ADDR
// ars7 = [ 3 , 5 , 7 ] [ difficulty ] ;
 405: LD_ADDR_EXP 13
 409: PUSH
 410: LD_INT 3
 412: PUSH
 413: LD_INT 5
 415: PUSH
 416: LD_INT 7
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: LIST
 423: PUSH
 424: LD_OWVAR 67
 428: ARRAY
 429: ST_TO_ADDR
// ars8 = [ 4 , 6 , 8 ] [ difficulty ] ;
 430: LD_ADDR_EXP 14
 434: PUSH
 435: LD_INT 4
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 8
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: LD_OWVAR 67
 453: ARRAY
 454: ST_TO_ADDR
// ars9 = [ 4 , 6 , 8 ] [ difficulty ] ;
 455: LD_ADDR_EXP 15
 459: PUSH
 460: LD_INT 4
 462: PUSH
 463: LD_INT 6
 465: PUSH
 466: LD_INT 8
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_OWVAR 67
 478: ARRAY
 479: ST_TO_ADDR
// ars10 = [ 4 , 6 , 8 ] [ difficulty ] ;
 480: LD_ADDR_EXP 16
 484: PUSH
 485: LD_INT 4
 487: PUSH
 488: LD_INT 6
 490: PUSH
 491: LD_INT 8
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: LD_OWVAR 67
 503: ARRAY
 504: ST_TO_ADDR
// ruv0_ch = [ ru_medium_wheeled , ru_medium_wheeled , ru_medium_wheeled ] [ difficulty ] ;
 505: LD_ADDR_EXP 44
 509: PUSH
 510: LD_INT 21
 512: PUSH
 513: LD_INT 21
 515: PUSH
 516: LD_INT 21
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: LIST
 523: PUSH
 524: LD_OWVAR 67
 528: ARRAY
 529: ST_TO_ADDR
// ruv0_wp = [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ difficulty ] ;
 530: LD_ADDR_EXP 45
 534: PUSH
 535: LD_INT 42
 537: PUSH
 538: LD_INT 42
 540: PUSH
 541: LD_INT 42
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: LD_OWVAR 67
 553: ARRAY
 554: ST_TO_ADDR
// ruv1_ch = [ ru_medium_wheeled , ru_medium_wheeled , ru_medium_wheeled ] [ difficulty ] ;
 555: LD_ADDR_EXP 46
 559: PUSH
 560: LD_INT 21
 562: PUSH
 563: LD_INT 21
 565: PUSH
 566: LD_INT 21
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_OWVAR 67
 578: ARRAY
 579: ST_TO_ADDR
// ruv1_wp = [ ru_gatling_gun , ru_gatling_gun , ru_gun ] [ difficulty ] ;
 580: LD_ADDR_EXP 47
 584: PUSH
 585: LD_INT 43
 587: PUSH
 588: LD_INT 43
 590: PUSH
 591: LD_INT 44
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: PUSH
 599: LD_OWVAR 67
 603: ARRAY
 604: ST_TO_ADDR
// rumech1_sk = [ 4 , 6 , 7 ] [ difficulty ] ;
 605: LD_ADDR_EXP 62
 609: PUSH
 610: LD_INT 4
 612: PUSH
 613: LD_INT 6
 615: PUSH
 616: LD_INT 7
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_OWVAR 67
 628: ARRAY
 629: ST_TO_ADDR
// ruv2_ch = [ ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_wheeled ] [ difficulty ] ;
 630: LD_ADDR_EXP 48
 634: PUSH
 635: LD_INT 23
 637: PUSH
 638: LD_INT 23
 640: PUSH
 641: LD_INT 23
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: LD_OWVAR 67
 653: ARRAY
 654: ST_TO_ADDR
// ruv2_wp = [ ru_heavy_gun , ru_heavy_gun , ru_heavy_gun ] [ difficulty ] ;
 655: LD_ADDR_EXP 49
 659: PUSH
 660: LD_INT 46
 662: PUSH
 663: LD_INT 46
 665: PUSH
 666: LD_INT 46
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: PUSH
 674: LD_OWVAR 67
 678: ARRAY
 679: ST_TO_ADDR
// rumech2_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 680: LD_ADDR_EXP 63
 684: PUSH
 685: LD_INT 3
 687: PUSH
 688: LD_INT 5
 690: PUSH
 691: LD_INT 7
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: LIST
 698: PUSH
 699: LD_OWVAR 67
 703: ARRAY
 704: ST_TO_ADDR
// ruv3_ch = [ ru_medium_tracked , ru_medium_tracked , ru_medium_tracked ] [ difficulty ] ;
 705: LD_ADDR_EXP 50
 709: PUSH
 710: LD_INT 22
 712: PUSH
 713: LD_INT 22
 715: PUSH
 716: LD_INT 22
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: LIST
 723: PUSH
 724: LD_OWVAR 67
 728: ARRAY
 729: ST_TO_ADDR
// ruv3_wp = [ ru_gatling_gun , ru_gatling_gun , ru_gatling_gun ] [ difficulty ] ;
 730: LD_ADDR_EXP 51
 734: PUSH
 735: LD_INT 43
 737: PUSH
 738: LD_INT 43
 740: PUSH
 741: LD_INT 43
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: LD_OWVAR 67
 753: ARRAY
 754: ST_TO_ADDR
// rumech3_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 755: LD_ADDR_EXP 64
 759: PUSH
 760: LD_INT 5
 762: PUSH
 763: LD_INT 7
 765: PUSH
 766: LD_INT 9
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_OWVAR 67
 778: ARRAY
 779: ST_TO_ADDR
// ruv4_ch = [ ru_medium_wheeled , ru_medium_wheeled , ru_medium_tracked ] [ difficulty ] ;
 780: LD_ADDR_EXP 52
 784: PUSH
 785: LD_INT 21
 787: PUSH
 788: LD_INT 21
 790: PUSH
 791: LD_INT 22
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: LD_OWVAR 67
 803: ARRAY
 804: ST_TO_ADDR
// ruv4_wp = [ ru_gatling_gun , ru_gatling_gun , ru_gatling_gun ] [ difficulty ] ;
 805: LD_ADDR_EXP 53
 809: PUSH
 810: LD_INT 43
 812: PUSH
 813: LD_INT 43
 815: PUSH
 816: LD_INT 43
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: LIST
 823: PUSH
 824: LD_OWVAR 67
 828: ARRAY
 829: ST_TO_ADDR
// rumech4_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
 830: LD_ADDR_EXP 65
 834: PUSH
 835: LD_INT 4
 837: PUSH
 838: LD_INT 6
 840: PUSH
 841: LD_INT 8
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PUSH
 849: LD_OWVAR 67
 853: ARRAY
 854: ST_TO_ADDR
// ruv5_ch = [ ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_wheeled ] [ difficulty ] ;
 855: LD_ADDR_EXP 54
 859: PUSH
 860: LD_INT 23
 862: PUSH
 863: LD_INT 23
 865: PUSH
 866: LD_INT 23
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: PUSH
 874: LD_OWVAR 67
 878: ARRAY
 879: ST_TO_ADDR
// ruv5_wp = [ ru_gun , ru_heavy_gun , ru_heavy_gun ] [ difficulty ] ;
 880: LD_ADDR_EXP 55
 884: PUSH
 885: LD_INT 44
 887: PUSH
 888: LD_INT 46
 890: PUSH
 891: LD_INT 46
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: LIST
 898: PUSH
 899: LD_OWVAR 67
 903: ARRAY
 904: ST_TO_ADDR
// rumech5_sk = [ 4 , 5 , 8 ] [ difficulty ] ;
 905: LD_ADDR_EXP 66
 909: PUSH
 910: LD_INT 4
 912: PUSH
 913: LD_INT 5
 915: PUSH
 916: LD_INT 8
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_OWVAR 67
 928: ARRAY
 929: ST_TO_ADDR
// ruv6_ch = [ ru_medium_tracked , ru_medium_tracked , ru_medium_tracked ] [ difficulty ] ;
 930: LD_ADDR_EXP 56
 934: PUSH
 935: LD_INT 22
 937: PUSH
 938: LD_INT 22
 940: PUSH
 941: LD_INT 22
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: PUSH
 949: LD_OWVAR 67
 953: ARRAY
 954: ST_TO_ADDR
// ruv6_wp = [ ru_rocket_launcher , ru_rocket_launcher , ru_rocket_launcher ] [ difficulty ] ;
 955: LD_ADDR_EXP 57
 959: PUSH
 960: LD_INT 45
 962: PUSH
 963: LD_INT 45
 965: PUSH
 966: LD_INT 45
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: PUSH
 974: LD_OWVAR 67
 978: ARRAY
 979: ST_TO_ADDR
// rumech6_sk = [ 4 , 7 , 9 ] [ difficulty ] ;
 980: LD_ADDR_EXP 67
 984: PUSH
 985: LD_INT 4
 987: PUSH
 988: LD_INT 7
 990: PUSH
 991: LD_INT 9
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: PUSH
 999: LD_OWVAR 67
1003: ARRAY
1004: ST_TO_ADDR
// ruv7_ch = [ ru_medium_tracked , ru_medium_tracked , ru_medium_tracked ] [ difficulty ] ;
1005: LD_ADDR_EXP 58
1009: PUSH
1010: LD_INT 22
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: LD_OWVAR 67
1028: ARRAY
1029: ST_TO_ADDR
// ruv7_wp = [ ru_gun , ru_gun , ru_gun ] [ difficulty ] ;
1030: LD_ADDR_EXP 59
1034: PUSH
1035: LD_INT 44
1037: PUSH
1038: LD_INT 44
1040: PUSH
1041: LD_INT 44
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: LIST
1048: PUSH
1049: LD_OWVAR 67
1053: ARRAY
1054: ST_TO_ADDR
// rumech7_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
1055: LD_ADDR_EXP 68
1059: PUSH
1060: LD_INT 5
1062: PUSH
1063: LD_INT 7
1065: PUSH
1066: LD_INT 9
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_OWVAR 67
1078: ARRAY
1079: ST_TO_ADDR
// ruv8_ch = [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ difficulty ] ;
1080: LD_ADDR_EXP 60
1084: PUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 23
1090: PUSH
1091: LD_INT 24
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: LD_OWVAR 67
1103: ARRAY
1104: ST_TO_ADDR
// ruv8_wp = [ ru_gatling_gun , ru_gatling_gun , ru_gatling_gun ] [ difficulty ] ;
1105: LD_ADDR_EXP 61
1109: PUSH
1110: LD_INT 43
1112: PUSH
1113: LD_INT 43
1115: PUSH
1116: LD_INT 43
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_OWVAR 67
1128: ARRAY
1129: ST_TO_ADDR
// rumech8_sk = [ 5 , 7 , 8 ] [ difficulty ] ;
1130: LD_ADDR_EXP 69
1134: PUSH
1135: LD_INT 5
1137: PUSH
1138: LD_INT 7
1140: PUSH
1141: LD_INT 8
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: PUSH
1149: LD_OWVAR 67
1153: ARRAY
1154: ST_TO_ADDR
// arm0 = [ 6 , 8 , 10 ] [ difficulty ] ;
1155: LD_ADDR_EXP 17
1159: PUSH
1160: LD_INT 6
1162: PUSH
1163: LD_INT 8
1165: PUSH
1166: LD_INT 10
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_OWVAR 67
1178: ARRAY
1179: ST_TO_ADDR
// arv1_ch = [ ar_medium_trike , ar_half_tracked , ar_half_tracked ] [ difficulty ] ;
1180: LD_ADDR_EXP 18
1184: PUSH
1185: LD_INT 13
1187: PUSH
1188: LD_INT 14
1190: PUSH
1191: LD_INT 14
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_OWVAR 67
1203: ARRAY
1204: ST_TO_ADDR
// arv1_wp = [ ar_flame_thrower , ar_flame_thrower , ar_flame_thrower ] [ difficulty ] ;
1205: LD_ADDR_EXP 19
1209: PUSH
1210: LD_INT 26
1212: PUSH
1213: LD_INT 26
1215: PUSH
1216: LD_INT 26
1218: PUSH
1219: EMPTY
1220: LIST
1221: LIST
1222: LIST
1223: PUSH
1224: LD_OWVAR 67
1228: ARRAY
1229: ST_TO_ADDR
// arm1_sk = [ 3 , 6 , 8 ] [ difficulty ] ;
1230: LD_ADDR_EXP 20
1234: PUSH
1235: LD_INT 3
1237: PUSH
1238: LD_INT 6
1240: PUSH
1241: LD_INT 8
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: PUSH
1249: LD_OWVAR 67
1253: ARRAY
1254: ST_TO_ADDR
// arv2_ch = [ ar_medium_trike , ar_medium_trike , ar_medium_trike ] [ difficulty ] ;
1255: LD_ADDR_EXP 21
1259: PUSH
1260: LD_INT 13
1262: PUSH
1263: LD_INT 13
1265: PUSH
1266: LD_INT 13
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: LIST
1273: PUSH
1274: LD_OWVAR 67
1278: ARRAY
1279: ST_TO_ADDR
// arv2_wp = [ ar_double_machine_gun , ar_gatling_gun , ar_gatling_gun ] [ difficulty ] ;
1280: LD_ADDR_EXP 22
1284: PUSH
1285: LD_INT 24
1287: PUSH
1288: LD_INT 25
1290: PUSH
1291: LD_INT 25
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: PUSH
1299: LD_OWVAR 67
1303: ARRAY
1304: ST_TO_ADDR
// arm2_sk = [ 4 , 6 , 9 ] [ difficulty ] ;
1305: LD_ADDR_EXP 23
1309: PUSH
1310: LD_INT 4
1312: PUSH
1313: LD_INT 6
1315: PUSH
1316: LD_INT 9
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: PUSH
1324: LD_OWVAR 67
1328: ARRAY
1329: ST_TO_ADDR
// arv3_ch = [ ar_medium_trike , ar_half_tracked , ar_half_tracked ] [ difficulty ] ;
1330: LD_ADDR_EXP 24
1334: PUSH
1335: LD_INT 13
1337: PUSH
1338: LD_INT 14
1340: PUSH
1341: LD_INT 14
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: ST_TO_ADDR
// arv3_wp = [ ar_gun , ar_gun , ar_gun ] [ difficulty ] ;
1355: LD_ADDR_EXP 25
1359: PUSH
1360: LD_INT 27
1362: PUSH
1363: LD_INT 27
1365: PUSH
1366: LD_INT 27
1368: PUSH
1369: EMPTY
1370: LIST
1371: LIST
1372: LIST
1373: PUSH
1374: LD_OWVAR 67
1378: ARRAY
1379: ST_TO_ADDR
// arm3_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1380: LD_ADDR_EXP 26
1384: PUSH
1385: LD_INT 4
1387: PUSH
1388: LD_INT 6
1390: PUSH
1391: LD_INT 8
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: ST_TO_ADDR
// arv4_ch = [ ar_medium_trike , ar_medium_trike , ar_half_tracked ] [ difficulty ] ;
1405: LD_ADDR_EXP 27
1409: PUSH
1410: LD_INT 13
1412: PUSH
1413: LD_INT 13
1415: PUSH
1416: LD_INT 14
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: PUSH
1424: LD_OWVAR 67
1428: ARRAY
1429: ST_TO_ADDR
// arv4_wp = [ ar_double_machine_gun , ar_gatling_gun , ar_gatling_gun ] [ difficulty ] ;
1430: LD_ADDR_EXP 28
1434: PUSH
1435: LD_INT 24
1437: PUSH
1438: LD_INT 25
1440: PUSH
1441: LD_INT 25
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: PUSH
1449: LD_OWVAR 67
1453: ARRAY
1454: ST_TO_ADDR
// arm4_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1455: LD_ADDR_EXP 29
1459: PUSH
1460: LD_INT 4
1462: PUSH
1463: LD_INT 6
1465: PUSH
1466: LD_INT 8
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: PUSH
1474: LD_OWVAR 67
1478: ARRAY
1479: ST_TO_ADDR
// arv5_ch = [ ar_hovercraft , ar_hovercraft , ar_hovercraft ] [ difficulty ] ;
1480: LD_ADDR_EXP 30
1484: PUSH
1485: LD_INT 11
1487: PUSH
1488: LD_INT 11
1490: PUSH
1491: LD_INT 11
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: LIST
1498: PUSH
1499: LD_OWVAR 67
1503: ARRAY
1504: ST_TO_ADDR
// arv5_wp = [ ar_multimissile_ballista , ar_double_machine_gun , ar_double_machine_gun ] [ difficulty ] ;
1505: LD_ADDR_EXP 31
1509: PUSH
1510: LD_INT 22
1512: PUSH
1513: LD_INT 24
1515: PUSH
1516: LD_INT 24
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: LIST
1523: PUSH
1524: LD_OWVAR 67
1528: ARRAY
1529: ST_TO_ADDR
// arm5_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
1530: LD_ADDR_EXP 32
1534: PUSH
1535: LD_INT 5
1537: PUSH
1538: LD_INT 7
1540: PUSH
1541: LD_INT 9
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: LIST
1548: PUSH
1549: LD_OWVAR 67
1553: ARRAY
1554: ST_TO_ADDR
// arv6_ch = [ ar_medium_trike , ar_medium_trike , ar_half_tracked ] [ difficulty ] ;
1555: LD_ADDR_EXP 33
1559: PUSH
1560: LD_INT 13
1562: PUSH
1563: LD_INT 13
1565: PUSH
1566: LD_INT 14
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: LIST
1573: PUSH
1574: LD_OWVAR 67
1578: ARRAY
1579: ST_TO_ADDR
// arv6_wp = [ ar_double_machine_gun , ar_gatling_gun , ar_gatling_gun ] [ difficulty ] ;
1580: LD_ADDR_EXP 34
1584: PUSH
1585: LD_INT 24
1587: PUSH
1588: LD_INT 25
1590: PUSH
1591: LD_INT 25
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: LIST
1598: PUSH
1599: LD_OWVAR 67
1603: ARRAY
1604: ST_TO_ADDR
// arm6_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1605: LD_ADDR_EXP 35
1609: PUSH
1610: LD_INT 4
1612: PUSH
1613: LD_INT 6
1615: PUSH
1616: LD_INT 8
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_OWVAR 67
1628: ARRAY
1629: ST_TO_ADDR
// arv7_ch = [ 0 , ar_medium_trike , ar_half_tracked ] [ difficulty ] ;
1630: LD_ADDR_EXP 36
1634: PUSH
1635: LD_INT 0
1637: PUSH
1638: LD_INT 13
1640: PUSH
1641: LD_INT 14
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: LIST
1648: PUSH
1649: LD_OWVAR 67
1653: ARRAY
1654: ST_TO_ADDR
// arv7_wp = [ 0 , ar_rocket_launcher , ar_rocket_launcher ] [ difficulty ] ;
1655: LD_ADDR_EXP 37
1659: PUSH
1660: LD_INT 0
1662: PUSH
1663: LD_INT 28
1665: PUSH
1666: LD_INT 28
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: LIST
1673: PUSH
1674: LD_OWVAR 67
1678: ARRAY
1679: ST_TO_ADDR
// arv8_ch = [ 0 , ar_medium_trike , ar_half_tracked ] [ difficulty ] ;
1680: LD_ADDR_EXP 38
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 13
1690: PUSH
1691: LD_INT 14
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: PUSH
1699: LD_OWVAR 67
1703: ARRAY
1704: ST_TO_ADDR
// arv8_wp = [ 0 , ar_gun , ar_gun ] [ difficulty ] ;
1705: LD_ADDR_EXP 39
1709: PUSH
1710: LD_INT 0
1712: PUSH
1713: LD_INT 27
1715: PUSH
1716: LD_INT 27
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_OWVAR 67
1728: ARRAY
1729: ST_TO_ADDR
// arv9_ch = ar_half_tracked ;
1730: LD_ADDR_EXP 40
1734: PUSH
1735: LD_INT 14
1737: ST_TO_ADDR
// arv9_wp = ar_flame_thrower ;
1738: LD_ADDR_EXP 41
1742: PUSH
1743: LD_INT 26
1745: ST_TO_ADDR
// arv10_ch = ar_medium_trike ;
1746: LD_ADDR_EXP 42
1750: PUSH
1751: LD_INT 13
1753: ST_TO_ADDR
// arv10_wp = ar_flame_thrower ;
1754: LD_ADDR_EXP 43
1758: PUSH
1759: LD_INT 26
1761: ST_TO_ADDR
// setblevel ( [ arbunk0 , arbunk1 , arbunk2 , arbunk3 , arbunk4 , arbunk5 ] , [ 5 , 7 , 9 ] [ difficulty ] ) ;
1762: LD_INT 14
1764: PUSH
1765: LD_INT 15
1767: PUSH
1768: LD_INT 13
1770: PUSH
1771: LD_INT 16
1773: PUSH
1774: LD_INT 17
1776: PUSH
1777: LD_INT 18
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: PPUSH
1788: LD_INT 5
1790: PUSH
1791: LD_INT 7
1793: PUSH
1794: LD_INT 9
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: LIST
1801: PUSH
1802: LD_OWVAR 67
1806: ARRAY
1807: PPUSH
1808: CALL_OW 241
// setblevel ( [ arbarr ] , [ 4 , 6 , 8 ] [ difficulty ] ) ;
1812: LD_INT 2
1814: PUSH
1815: EMPTY
1816: LIST
1817: PPUSH
1818: LD_INT 4
1820: PUSH
1821: LD_INT 6
1823: PUSH
1824: LD_INT 8
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: LIST
1831: PUSH
1832: LD_OWVAR 67
1836: ARRAY
1837: PPUSH
1838: CALL_OW 241
// time2destmasha_ = time2destmasha ;
1842: LD_ADDR_EXP 74
1846: PUSH
1847: LD_EXP 75
1851: ST_TO_ADDR
// end ;
1852: LD_VAR 0 1
1856: RET
// starting begin debug = false ;
1857: LD_ADDR_EXP 77
1861: PUSH
1862: LD_INT 0
1864: ST_TO_ADDR
// koncime = false ;
1865: LD_ADDR_EXP 76
1869: PUSH
1870: LD_INT 0
1872: ST_TO_ADDR
// set_vars ;
1873: CALL 0 0 0
// cper = cperiode ;
1877: LD_ADDR_LOC 1
1881: PUSH
1882: LD_LOC 2
1886: ST_TO_ADDR
// delay = time2wait ;
1887: LD_ADDR_EXP 72
1891: PUSH
1892: LD_EXP 71
1896: ST_TO_ADDR
// artef_out = false ;
1897: LD_ADDR_EXP 78
1901: PUSH
1902: LD_INT 0
1904: ST_TO_ADDR
// disable ( 01 ) ;
1905: LD_INT 1
1907: DISABLE_MARKED
// disable ( 02 ) ;
1908: LD_INT 2
1910: DISABLE_MARKED
// disable ( 03 ) ;
1911: LD_INT 3
1913: DISABLE_MARKED
// disable ( 04 ) ;
1914: LD_INT 4
1916: DISABLE_MARKED
// disable ( 05 ) ;
1917: LD_INT 5
1919: DISABLE_MARKED
// disable ( 07 ) ;
1920: LD_INT 7
1922: DISABLE_MARKED
// disable ( 09 ) ;
1923: LD_INT 9
1925: DISABLE_MARKED
// disable ( 10 ) ;
1926: LD_INT 10
1928: DISABLE_MARKED
// disable ( 12 ) ;
1929: LD_INT 12
1931: DISABLE_MARKED
// disable ( 13 ) ;
1932: LD_INT 13
1934: DISABLE_MARKED
// disable ( 14 ) ;
1935: LD_INT 14
1937: DISABLE_MARKED
// disable ( 15 ) ;
1938: LD_INT 15
1940: DISABLE_MARKED
// disable ( 37 ) ;
1941: LD_INT 37
1943: DISABLE_MARKED
// revealfogarea ( al , revfog ) ;
1944: LD_EXP 1
1948: PPUSH
1949: LD_INT 8
1951: PPUSH
1952: CALL_OW 332
// if debug then
1956: LD_EXP 77
1960: IFFALSE 1969
// msg ( Bacha debug je on! ) ;
1962: LD_STRING Bacha debug je on!
1964: PPUSH
1965: CALL_OW 100
// prepare_arabians ;
1969: CALL 11417 0 0
// prepare_americans ;
1973: CALL 2153 0 0
// end ;
1977: END
// var cper , cperiode , supplies ; every 0 0$15 + 0 0$45 do
1978: GO 1980
1980: DISABLE
// begin cper = cper - 0 0$15 ;
1981: LD_ADDR_LOC 1
1985: PUSH
1986: LD_LOC 1
1990: PUSH
1991: LD_INT 525
1993: MINUS
1994: ST_TO_ADDR
// if cper = 0 then
1995: LD_LOC 1
1999: PUSH
2000: LD_INT 0
2002: EQUAL
2003: IFFALSE 2055
// begin createcratesarea ( 5 , dropzone , true ) ;
2005: LD_INT 5
2007: PPUSH
2008: LD_INT 1
2010: PPUSH
2011: LD_INT 1
2013: PPUSH
2014: CALL_OW 55
// if ( supplies > 1 ) then
2018: LD_LOC 3
2022: PUSH
2023: LD_INT 1
2025: GREATER
2026: IFFALSE 2043
// begin supplies = supplies - 1 ;
2028: LD_ADDR_LOC 3
2032: PUSH
2033: LD_LOC 3
2037: PUSH
2038: LD_INT 1
2040: MINUS
2041: ST_TO_ADDR
// enable ;
2042: ENABLE
// end ; cper = cperiode ;
2043: LD_ADDR_LOC 1
2047: PUSH
2048: LD_LOC 2
2052: ST_TO_ADDR
// end else
2053: GO 2056
// enable ;
2055: ENABLE
// end ;
2056: END
// every 0 0$7 do
2057: GO 2059
2059: DISABLE
// begin randomize ;
2060: CALL_OW 10
// if debug then
2064: LD_EXP 77
2068: IFFALSE 2083
// debug_strings = [ cper ] ;
2070: LD_ADDR_OWVAR 48
2074: PUSH
2075: LD_LOC 1
2079: PUSH
2080: EMPTY
2081: LIST
2082: ST_TO_ADDR
// enable ;
2083: ENABLE
// end ;
2084: END
// every 0 0$20 do
2085: GO 2087
2087: DISABLE
// createcratesarea ( 5 , stred , true ) ;
2088: LD_INT 5
2090: PPUSH
2091: LD_INT 2
2093: PPUSH
2094: LD_INT 1
2096: PPUSH
2097: CALL_OW 55
2101: END
// every 0 0$30 do
2102: GO 2104
2104: DISABLE
// createcratesarea ( 5 , stred , true ) ;
2105: LD_INT 5
2107: PPUSH
2108: LD_INT 2
2110: PPUSH
2111: LD_INT 1
2113: PPUSH
2114: CALL_OW 55
2118: END
// every 0 0$45 do
2119: GO 2121
2121: DISABLE
// createcratesarea ( 5 , stred , true ) ;
2122: LD_INT 5
2124: PPUSH
2125: LD_INT 2
2127: PPUSH
2128: LD_INT 1
2130: PPUSH
2131: CALL_OW 55
2135: END
// every 0 0$55 do
2136: GO 2138
2138: DISABLE
// createcratesarea ( 5 , stred , true ) ; end_of_file
2139: LD_INT 5
2141: PPUSH
2142: LD_INT 2
2144: PPUSH
2145: LD_INT 1
2147: PPUSH
2148: CALL_OW 55
2152: END
// export john , roth , joan , bobby , cyrus , lisa , frank , markc , tim , denis , yamoko , gary , simms , zbytekze12 ; export brown , lucy ; var plidi ; export function prepare_americans ; var tmp , old_al , lidi ; begin
2153: LD_INT 0
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
// uc_side = al ;
2159: LD_ADDR_OWVAR 20
2163: PUSH
2164: LD_EXP 1
2168: ST_TO_ADDR
// old_al = 7 ;
2169: LD_ADDR_VAR 0 3
2173: PUSH
2174: LD_INT 7
2176: ST_TO_ADDR
// if checkcharacterset ( JMM ) then
2177: LD_STRING JMM
2179: PPUSH
2180: CALL_OW 29
2184: IFFALSE 2204
// john = createcharacterwithclass ( JMM , class_engineer ) else
2186: LD_ADDR_EXP 80
2190: PUSH
2191: LD_STRING JMM
2193: PPUSH
2194: LD_INT 2
2196: PPUSH
2197: CALL_OW 35
2201: ST_TO_ADDR
2202: GO 2217
// buildquery ( neny JMM , [ OK ] ) ;
2204: LD_STRING neny JMM
2206: PPUSH
2207: LD_STRING OK
2209: PUSH
2210: EMPTY
2211: LIST
2212: PPUSH
2213: CALL_OW 99
// placeunitxyr ( john , 62 , 25 , 3 , false ) ;
2217: LD_EXP 80
2221: PPUSH
2222: LD_INT 62
2224: PPUSH
2225: LD_INT 25
2227: PPUSH
2228: LD_INT 3
2230: PPUSH
2231: LD_INT 0
2233: PPUSH
2234: CALL_OW 50
// roth = newcharacter ( Roth ) ;
2238: LD_ADDR_EXP 81
2242: PUSH
2243: LD_STRING Roth
2245: PPUSH
2246: CALL_OW 25
2250: ST_TO_ADDR
// if not roth then
2251: LD_EXP 81
2255: NOT
2256: IFFALSE 2271
// buildquery ( neny Roth , [ OK ] ) ;
2258: LD_STRING neny Roth
2260: PPUSH
2261: LD_STRING OK
2263: PUSH
2264: EMPTY
2265: LIST
2266: PPUSH
2267: CALL_OW 99
// placeunitxyr ( roth , 62 , 25 , 3 , false ) ;
2271: LD_EXP 81
2275: PPUSH
2276: LD_INT 62
2278: PPUSH
2279: LD_INT 25
2281: PPUSH
2282: LD_INT 3
2284: PPUSH
2285: LD_INT 0
2287: PPUSH
2288: CALL_OW 50
// joan = 0 ;
2292: LD_ADDR_EXP 82
2296: PUSH
2297: LD_INT 0
2299: ST_TO_ADDR
// if checkcharacterset ( Joan ) then
2300: LD_STRING Joan
2302: PPUSH
2303: CALL_OW 29
2307: IFFALSE 2396
// begin if testvariable ( joan_side ) then
2309: LD_STRING joan_side
2311: PPUSH
2312: CALL_OW 27
2316: IFFALSE 2337
// tmp = loadvariable ( joan_side , - 1 ) else
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: LD_STRING joan_side
2325: PPUSH
2326: LD_INT 1
2328: NEG
2329: PPUSH
2330: CALL_OW 30
2334: ST_TO_ADDR
2335: GO 2350
// buildquery ( neny joan_side , [ OK ] ) ;
2337: LD_STRING neny joan_side
2339: PPUSH
2340: LD_STRING OK
2342: PUSH
2343: EMPTY
2344: LIST
2345: PPUSH
2346: CALL_OW 99
// if tmp = old_al then
2350: LD_VAR 0 2
2354: PUSH
2355: LD_VAR 0 3
2359: EQUAL
2360: IFFALSE 2375
// joan = createcharacter ( Joan ) ;
2362: LD_ADDR_EXP 82
2366: PUSH
2367: LD_STRING Joan
2369: PPUSH
2370: CALL_OW 34
2374: ST_TO_ADDR
// placeunitxyr ( joan , 62 , 25 , 3 , false ) ;
2375: LD_EXP 82
2379: PPUSH
2380: LD_INT 62
2382: PPUSH
2383: LD_INT 25
2385: PPUSH
2386: LD_INT 3
2388: PPUSH
2389: LD_INT 0
2391: PPUSH
2392: CALL_OW 50
// end ; bobby = 0 ;
2396: LD_ADDR_EXP 83
2400: PUSH
2401: LD_INT 0
2403: ST_TO_ADDR
// if checkcharacterset ( Bobby ) then
2404: LD_STRING Bobby
2406: PPUSH
2407: CALL_OW 29
2411: IFFALSE 2500
// begin if testvariable ( bobby_side ) then
2413: LD_STRING bobby_side
2415: PPUSH
2416: CALL_OW 27
2420: IFFALSE 2441
// tmp = loadvariable ( bobby_side , - 1 ) else
2422: LD_ADDR_VAR 0 2
2426: PUSH
2427: LD_STRING bobby_side
2429: PPUSH
2430: LD_INT 1
2432: NEG
2433: PPUSH
2434: CALL_OW 30
2438: ST_TO_ADDR
2439: GO 2454
// buildquery ( neny bobby_side , [ OK ] ) ;
2441: LD_STRING neny bobby_side
2443: PPUSH
2444: LD_STRING OK
2446: PUSH
2447: EMPTY
2448: LIST
2449: PPUSH
2450: CALL_OW 99
// if tmp = old_al then
2454: LD_VAR 0 2
2458: PUSH
2459: LD_VAR 0 3
2463: EQUAL
2464: IFFALSE 2479
// bobby = createcharacter ( Bobby ) ;
2466: LD_ADDR_EXP 83
2470: PUSH
2471: LD_STRING Bobby
2473: PPUSH
2474: CALL_OW 34
2478: ST_TO_ADDR
// placeunitxyr ( bobby , 62 , 25 , 3 , false ) ;
2479: LD_EXP 83
2483: PPUSH
2484: LD_INT 62
2486: PPUSH
2487: LD_INT 25
2489: PPUSH
2490: LD_INT 3
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 50
// end ; cyrus = 0 ;
2500: LD_ADDR_EXP 84
2504: PUSH
2505: LD_INT 0
2507: ST_TO_ADDR
// if checkcharacterset ( Cyrus ) then
2508: LD_STRING Cyrus
2510: PPUSH
2511: CALL_OW 29
2515: IFFALSE 2604
// begin if testvariable ( cyrus_side ) then
2517: LD_STRING cyrus_side
2519: PPUSH
2520: CALL_OW 27
2524: IFFALSE 2545
// tmp = loadvariable ( cyrus_side , - 1 ) else
2526: LD_ADDR_VAR 0 2
2530: PUSH
2531: LD_STRING cyrus_side
2533: PPUSH
2534: LD_INT 1
2536: NEG
2537: PPUSH
2538: CALL_OW 30
2542: ST_TO_ADDR
2543: GO 2558
// buildquery ( neny cyrus_side , [ OK ] ) ;
2545: LD_STRING neny cyrus_side
2547: PPUSH
2548: LD_STRING OK
2550: PUSH
2551: EMPTY
2552: LIST
2553: PPUSH
2554: CALL_OW 99
// if tmp = old_al then
2558: LD_VAR 0 2
2562: PUSH
2563: LD_VAR 0 3
2567: EQUAL
2568: IFFALSE 2583
// cyrus = createcharacter ( Cyrus ) ;
2570: LD_ADDR_EXP 84
2574: PUSH
2575: LD_STRING Cyrus
2577: PPUSH
2578: CALL_OW 34
2582: ST_TO_ADDR
// placeunitxyr ( cyrus , 62 , 25 , 3 , false ) ;
2583: LD_EXP 84
2587: PPUSH
2588: LD_INT 62
2590: PPUSH
2591: LD_INT 25
2593: PPUSH
2594: LD_INT 3
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 50
// end ; lisa = 0 ;
2604: LD_ADDR_EXP 85
2608: PUSH
2609: LD_INT 0
2611: ST_TO_ADDR
// if checkcharacterset ( Lisa ) then
2612: LD_STRING Lisa
2614: PPUSH
2615: CALL_OW 29
2619: IFFALSE 2708
// begin if testvariable ( lisa_side ) then
2621: LD_STRING lisa_side
2623: PPUSH
2624: CALL_OW 27
2628: IFFALSE 2649
// tmp = loadvariable ( lisa_side , - 1 ) else
2630: LD_ADDR_VAR 0 2
2634: PUSH
2635: LD_STRING lisa_side
2637: PPUSH
2638: LD_INT 1
2640: NEG
2641: PPUSH
2642: CALL_OW 30
2646: ST_TO_ADDR
2647: GO 2662
// buildquery ( neny lisa_side , [ OK ] ) ;
2649: LD_STRING neny lisa_side
2651: PPUSH
2652: LD_STRING OK
2654: PUSH
2655: EMPTY
2656: LIST
2657: PPUSH
2658: CALL_OW 99
// if tmp = old_al then
2662: LD_VAR 0 2
2666: PUSH
2667: LD_VAR 0 3
2671: EQUAL
2672: IFFALSE 2687
// lisa = createcharacter ( Lisa ) ;
2674: LD_ADDR_EXP 85
2678: PUSH
2679: LD_STRING Lisa
2681: PPUSH
2682: CALL_OW 34
2686: ST_TO_ADDR
// placeunitxyr ( lisa , 62 , 25 , 3 , false ) ;
2687: LD_EXP 85
2691: PPUSH
2692: LD_INT 62
2694: PPUSH
2695: LD_INT 25
2697: PPUSH
2698: LD_INT 3
2700: PPUSH
2701: LD_INT 0
2703: PPUSH
2704: CALL_OW 50
// end ; frank = 0 ;
2708: LD_ADDR_EXP 86
2712: PUSH
2713: LD_INT 0
2715: ST_TO_ADDR
// if checkcharacterset ( Frank ) then
2716: LD_STRING Frank
2718: PPUSH
2719: CALL_OW 29
2723: IFFALSE 2812
// begin if testvariable ( frank_side ) then
2725: LD_STRING frank_side
2727: PPUSH
2728: CALL_OW 27
2732: IFFALSE 2753
// tmp = loadvariable ( frank_side , - 1 ) else
2734: LD_ADDR_VAR 0 2
2738: PUSH
2739: LD_STRING frank_side
2741: PPUSH
2742: LD_INT 1
2744: NEG
2745: PPUSH
2746: CALL_OW 30
2750: ST_TO_ADDR
2751: GO 2766
// buildquery ( neny frank_side , [ OK ] ) ;
2753: LD_STRING neny frank_side
2755: PPUSH
2756: LD_STRING OK
2758: PUSH
2759: EMPTY
2760: LIST
2761: PPUSH
2762: CALL_OW 99
// if tmp = old_al then
2766: LD_VAR 0 2
2770: PUSH
2771: LD_VAR 0 3
2775: EQUAL
2776: IFFALSE 2791
// frank = createcharacter ( Frank ) ;
2778: LD_ADDR_EXP 86
2782: PUSH
2783: LD_STRING Frank
2785: PPUSH
2786: CALL_OW 34
2790: ST_TO_ADDR
// placeunitxyr ( frank , 62 , 25 , 3 , false ) ;
2791: LD_EXP 86
2795: PPUSH
2796: LD_INT 62
2798: PPUSH
2799: LD_INT 25
2801: PPUSH
2802: LD_INT 3
2804: PPUSH
2805: LD_INT 0
2807: PPUSH
2808: CALL_OW 50
// end ; markc = 0 ;
2812: LD_ADDR_EXP 87
2816: PUSH
2817: LD_INT 0
2819: ST_TO_ADDR
// if checkcharacterset ( Cornell ) then
2820: LD_STRING Cornell
2822: PPUSH
2823: CALL_OW 29
2827: IFFALSE 2916
// begin if testvariable ( markc_side ) then
2829: LD_STRING markc_side
2831: PPUSH
2832: CALL_OW 27
2836: IFFALSE 2857
// tmp = loadvariable ( markc_side , - 1 ) else
2838: LD_ADDR_VAR 0 2
2842: PUSH
2843: LD_STRING markc_side
2845: PPUSH
2846: LD_INT 1
2848: NEG
2849: PPUSH
2850: CALL_OW 30
2854: ST_TO_ADDR
2855: GO 2870
// buildquery ( neny markc_side , [ OK ] ) ;
2857: LD_STRING neny markc_side
2859: PPUSH
2860: LD_STRING OK
2862: PUSH
2863: EMPTY
2864: LIST
2865: PPUSH
2866: CALL_OW 99
// if tmp = old_al then
2870: LD_VAR 0 2
2874: PUSH
2875: LD_VAR 0 3
2879: EQUAL
2880: IFFALSE 2895
// markc = createcharacter ( Cornell ) ;
2882: LD_ADDR_EXP 87
2886: PUSH
2887: LD_STRING Cornell
2889: PPUSH
2890: CALL_OW 34
2894: ST_TO_ADDR
// placeunitxyr ( markc , 62 , 25 , 3 , false ) ;
2895: LD_EXP 87
2899: PPUSH
2900: LD_INT 62
2902: PPUSH
2903: LD_INT 25
2905: PPUSH
2906: LD_INT 3
2908: PPUSH
2909: LD_INT 0
2911: PPUSH
2912: CALL_OW 50
// end ; brown = 0 ;
2916: LD_ADDR_EXP 94
2920: PUSH
2921: LD_INT 0
2923: ST_TO_ADDR
// if checkcharacterset ( Brown ) then
2924: LD_STRING Brown
2926: PPUSH
2927: CALL_OW 29
2931: IFFALSE 3020
// begin if testvariable ( brown_side ) then
2933: LD_STRING brown_side
2935: PPUSH
2936: CALL_OW 27
2940: IFFALSE 2961
// tmp = loadvariable ( brown_side , - 1 ) else
2942: LD_ADDR_VAR 0 2
2946: PUSH
2947: LD_STRING brown_side
2949: PPUSH
2950: LD_INT 1
2952: NEG
2953: PPUSH
2954: CALL_OW 30
2958: ST_TO_ADDR
2959: GO 2974
// buildquery ( neny brown_side , [ OK ] ) ;
2961: LD_STRING neny brown_side
2963: PPUSH
2964: LD_STRING OK
2966: PUSH
2967: EMPTY
2968: LIST
2969: PPUSH
2970: CALL_OW 99
// if tmp = old_al then
2974: LD_VAR 0 2
2978: PUSH
2979: LD_VAR 0 3
2983: EQUAL
2984: IFFALSE 2999
// brown = createcharacter ( Brown ) ;
2986: LD_ADDR_EXP 94
2990: PUSH
2991: LD_STRING Brown
2993: PPUSH
2994: CALL_OW 34
2998: ST_TO_ADDR
// placeunitxyr ( brown , 62 , 25 , 3 , false ) ;
2999: LD_EXP 94
3003: PPUSH
3004: LD_INT 62
3006: PPUSH
3007: LD_INT 25
3009: PPUSH
3010: LD_INT 3
3012: PPUSH
3013: LD_INT 0
3015: PPUSH
3016: CALL_OW 50
// end ; lucy = 0 ;
3020: LD_ADDR_EXP 95
3024: PUSH
3025: LD_INT 0
3027: ST_TO_ADDR
// if checkcharacterset ( Donaldson ) then
3028: LD_STRING Donaldson
3030: PPUSH
3031: CALL_OW 29
3035: IFFALSE 3124
// begin if testvariable ( lucy_side ) then
3037: LD_STRING lucy_side
3039: PPUSH
3040: CALL_OW 27
3044: IFFALSE 3065
// tmp = loadvariable ( lucy_side , - 1 ) else
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: LD_STRING lucy_side
3053: PPUSH
3054: LD_INT 1
3056: NEG
3057: PPUSH
3058: CALL_OW 30
3062: ST_TO_ADDR
3063: GO 3078
// buildquery ( neny lucy_side , [ OK ] ) ;
3065: LD_STRING neny lucy_side
3067: PPUSH
3068: LD_STRING OK
3070: PUSH
3071: EMPTY
3072: LIST
3073: PPUSH
3074: CALL_OW 99
// if tmp = old_al then
3078: LD_VAR 0 2
3082: PUSH
3083: LD_VAR 0 3
3087: EQUAL
3088: IFFALSE 3103
// lucy = createcharacter ( Donaldson ) ;
3090: LD_ADDR_EXP 95
3094: PUSH
3095: LD_STRING Donaldson
3097: PPUSH
3098: CALL_OW 34
3102: ST_TO_ADDR
// placeunitxyr ( lucy , 62 , 25 , 3 , false ) ;
3103: LD_EXP 95
3107: PPUSH
3108: LD_INT 62
3110: PPUSH
3111: LD_INT 25
3113: PPUSH
3114: LD_INT 3
3116: PPUSH
3117: LD_INT 0
3119: PPUSH
3120: CALL_OW 50
// end ; tim = 0 ;
3124: LD_ADDR_EXP 88
3128: PUSH
3129: LD_INT 0
3131: ST_TO_ADDR
// if checkcharacterset ( Gladstone ) then
3132: LD_STRING Gladstone
3134: PPUSH
3135: CALL_OW 29
3139: IFFALSE 3228
// begin if testvariable ( tim_side ) then
3141: LD_STRING tim_side
3143: PPUSH
3144: CALL_OW 27
3148: IFFALSE 3169
// tmp = loadvariable ( tim_side , - 1 ) else
3150: LD_ADDR_VAR 0 2
3154: PUSH
3155: LD_STRING tim_side
3157: PPUSH
3158: LD_INT 1
3160: NEG
3161: PPUSH
3162: CALL_OW 30
3166: ST_TO_ADDR
3167: GO 3182
// buildquery ( neny tim_side , [ OK ] ) ;
3169: LD_STRING neny tim_side
3171: PPUSH
3172: LD_STRING OK
3174: PUSH
3175: EMPTY
3176: LIST
3177: PPUSH
3178: CALL_OW 99
// if tmp = old_al then
3182: LD_VAR 0 2
3186: PUSH
3187: LD_VAR 0 3
3191: EQUAL
3192: IFFALSE 3207
// tim = createcharacter ( Gladstone ) ;
3194: LD_ADDR_EXP 88
3198: PUSH
3199: LD_STRING Gladstone
3201: PPUSH
3202: CALL_OW 34
3206: ST_TO_ADDR
// placeunitxyr ( tim , 62 , 25 , 3 , false ) ;
3207: LD_EXP 88
3211: PPUSH
3212: LD_INT 62
3214: PPUSH
3215: LD_INT 25
3217: PPUSH
3218: LD_INT 3
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 50
// end ; denis = 0 ;
3228: LD_ADDR_EXP 89
3232: PUSH
3233: LD_INT 0
3235: ST_TO_ADDR
// if checkcharacterset ( Denis ) then
3236: LD_STRING Denis
3238: PPUSH
3239: CALL_OW 29
3243: IFFALSE 3332
// begin if testvariable ( denis_side ) then
3245: LD_STRING denis_side
3247: PPUSH
3248: CALL_OW 27
3252: IFFALSE 3273
// tmp = loadvariable ( denis_side , - 1 ) else
3254: LD_ADDR_VAR 0 2
3258: PUSH
3259: LD_STRING denis_side
3261: PPUSH
3262: LD_INT 1
3264: NEG
3265: PPUSH
3266: CALL_OW 30
3270: ST_TO_ADDR
3271: GO 3286
// buildquery ( neny denis_side , [ OK ] ) ;
3273: LD_STRING neny denis_side
3275: PPUSH
3276: LD_STRING OK
3278: PUSH
3279: EMPTY
3280: LIST
3281: PPUSH
3282: CALL_OW 99
// if tmp = old_al then
3286: LD_VAR 0 2
3290: PUSH
3291: LD_VAR 0 3
3295: EQUAL
3296: IFFALSE 3311
// denis = createcharacter ( Denis ) ;
3298: LD_ADDR_EXP 89
3302: PUSH
3303: LD_STRING Denis
3305: PPUSH
3306: CALL_OW 34
3310: ST_TO_ADDR
// placeunitxyr ( denis , 62 , 25 , 3 , false ) ;
3311: LD_EXP 89
3315: PPUSH
3316: LD_INT 62
3318: PPUSH
3319: LD_INT 25
3321: PPUSH
3322: LD_INT 3
3324: PPUSH
3325: LD_INT 0
3327: PPUSH
3328: CALL_OW 50
// end ; yamoko = 0 ;
3332: LD_ADDR_EXP 90
3336: PUSH
3337: LD_INT 0
3339: ST_TO_ADDR
// if not frank then
3340: LD_EXP 86
3344: NOT
3345: IFFALSE 3445
// if checkcharacterset ( Yamoko ) then
3347: LD_STRING Yamoko
3349: PPUSH
3350: CALL_OW 29
3354: IFFALSE 3445
// begin if testvariable ( yamoko_side ) then
3356: LD_STRING yamoko_side
3358: PPUSH
3359: CALL_OW 27
3363: IFFALSE 3384
// tmp = loadvariable ( yamoko_side , - 1 ) else
3365: LD_ADDR_VAR 0 2
3369: PUSH
3370: LD_STRING yamoko_side
3372: PPUSH
3373: LD_INT 1
3375: NEG
3376: PPUSH
3377: CALL_OW 30
3381: ST_TO_ADDR
3382: GO 3397
// buildquery ( neny yamoko_side , [ OK ] ) ;
3384: LD_STRING neny yamoko_side
3386: PPUSH
3387: LD_STRING OK
3389: PUSH
3390: EMPTY
3391: LIST
3392: PPUSH
3393: CALL_OW 99
// if tmp = old_al then
3397: LD_VAR 0 2
3401: PUSH
3402: LD_VAR 0 3
3406: EQUAL
3407: IFFALSE 3422
// yamoko = createcharacter ( Yamoko ) ;
3409: LD_ADDR_EXP 90
3413: PUSH
3414: LD_STRING Yamoko
3416: PPUSH
3417: CALL_OW 34
3421: ST_TO_ADDR
// placeunitxyr ( yamoko , 62 , 25 , 3 , false ) ;
3422: LD_EXP 90
3426: PPUSH
3427: LD_INT 62
3429: PPUSH
3430: LD_INT 25
3432: PPUSH
3433: LD_INT 3
3435: PPUSH
3436: LD_INT 0
3438: PPUSH
3439: CALL_OW 50
// end else
3443: GO 3445
// ; gary = 0 ;
3445: LD_ADDR_EXP 91
3449: PUSH
3450: LD_INT 0
3452: ST_TO_ADDR
// if checkcharacterset ( Gary ) then
3453: LD_STRING Gary
3455: PPUSH
3456: CALL_OW 29
3460: IFFALSE 3549
// begin if testvariable ( gary_side ) then
3462: LD_STRING gary_side
3464: PPUSH
3465: CALL_OW 27
3469: IFFALSE 3490
// tmp = loadvariable ( gary_side , - 1 ) else
3471: LD_ADDR_VAR 0 2
3475: PUSH
3476: LD_STRING gary_side
3478: PPUSH
3479: LD_INT 1
3481: NEG
3482: PPUSH
3483: CALL_OW 30
3487: ST_TO_ADDR
3488: GO 3503
// buildquery ( neny gary_side , [ OK ] ) ;
3490: LD_STRING neny gary_side
3492: PPUSH
3493: LD_STRING OK
3495: PUSH
3496: EMPTY
3497: LIST
3498: PPUSH
3499: CALL_OW 99
// if tmp = old_al then
3503: LD_VAR 0 2
3507: PUSH
3508: LD_VAR 0 3
3512: EQUAL
3513: IFFALSE 3528
// gary = createcharacter ( Gary ) ;
3515: LD_ADDR_EXP 91
3519: PUSH
3520: LD_STRING Gary
3522: PPUSH
3523: CALL_OW 34
3527: ST_TO_ADDR
// placeunitxyr ( gary , 62 , 25 , 3 , false ) ;
3528: LD_EXP 91
3532: PPUSH
3533: LD_INT 62
3535: PPUSH
3536: LD_INT 25
3538: PPUSH
3539: LD_INT 3
3541: PPUSH
3542: LD_INT 0
3544: PPUSH
3545: CALL_OW 50
// end ; simms = 0 ;
3549: LD_ADDR_EXP 92
3553: PUSH
3554: LD_INT 0
3556: ST_TO_ADDR
// if checkcharacterset ( Simms ) then
3557: LD_STRING Simms
3559: PPUSH
3560: CALL_OW 29
3564: IFFALSE 3653
// begin if testvariable ( simms_side ) then
3566: LD_STRING simms_side
3568: PPUSH
3569: CALL_OW 27
3573: IFFALSE 3594
// tmp = loadvariable ( simms_side , - 1 ) else
3575: LD_ADDR_VAR 0 2
3579: PUSH
3580: LD_STRING simms_side
3582: PPUSH
3583: LD_INT 1
3585: NEG
3586: PPUSH
3587: CALL_OW 30
3591: ST_TO_ADDR
3592: GO 3607
// buildquery ( neny simms_side , [ OK ] ) ;
3594: LD_STRING neny simms_side
3596: PPUSH
3597: LD_STRING OK
3599: PUSH
3600: EMPTY
3601: LIST
3602: PPUSH
3603: CALL_OW 99
// if tmp = old_al then
3607: LD_VAR 0 2
3611: PUSH
3612: LD_VAR 0 3
3616: EQUAL
3617: IFFALSE 3632
// simms = createcharacter ( Simms ) ;
3619: LD_ADDR_EXP 92
3623: PUSH
3624: LD_STRING Simms
3626: PPUSH
3627: CALL_OW 34
3631: ST_TO_ADDR
// placeunitxyr ( simms , 62 , 25 , 3 , false ) ;
3632: LD_EXP 92
3636: PPUSH
3637: LD_INT 62
3639: PPUSH
3640: LD_INT 25
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: LD_INT 0
3648: PPUSH
3649: CALL_OW 50
// end ; if testcharacters ( otherwithJMM ) then
3653: LD_STRING otherwithJMM
3655: PPUSH
3656: CALL_OW 28
3660: IFFALSE 3695
// if checkcharacterset ( otherwithJMM ) then
3662: LD_STRING otherwithJMM
3664: PPUSH
3665: CALL_OW 29
3669: IFFALSE 3686
// zbytekze12 = createcharacterset ( otherwithJMM ) else
3671: LD_ADDR_EXP 93
3675: PUSH
3676: LD_STRING otherwithJMM
3678: PPUSH
3679: CALL_OW 31
3683: ST_TO_ADDR
3684: GO 3693
// zbytekze12 = [ ] else
3686: LD_ADDR_EXP 93
3690: PUSH
3691: EMPTY
3692: ST_TO_ADDR
3693: GO 3708
// buildquery ( neny otherwithJMM , [ OK ] ) ;
3695: LD_STRING neny otherwithJMM
3697: PPUSH
3698: LD_STRING OK
3700: PUSH
3701: EMPTY
3702: LIST
3703: PPUSH
3704: CALL_OW 99
// for tmp in zbytekze12 do
3708: LD_ADDR_VAR 0 2
3712: PUSH
3713: LD_EXP 93
3717: PUSH
3718: FOR_IN
3719: IFFALSE 3744
// placeunitxyr ( tmp , 62 , 25 , 3 , false ) ;
3721: LD_VAR 0 2
3725: PPUSH
3726: LD_INT 62
3728: PPUSH
3729: LD_INT 25
3731: PPUSH
3732: LD_INT 3
3734: PPUSH
3735: LD_INT 0
3737: PPUSH
3738: CALL_OW 50
3742: GO 3718
3744: POP
3745: POP
// lidi = [ john , roth , joan , bobby , cyrus , lisa , frank , markc , tim , denis , yamoko , gary , simms , brown , lucy ] ^ zbytekze12 ;
3746: LD_ADDR_VAR 0 4
3750: PUSH
3751: LD_EXP 80
3755: PUSH
3756: LD_EXP 81
3760: PUSH
3761: LD_EXP 82
3765: PUSH
3766: LD_EXP 83
3770: PUSH
3771: LD_EXP 84
3775: PUSH
3776: LD_EXP 85
3780: PUSH
3781: LD_EXP 86
3785: PUSH
3786: LD_EXP 87
3790: PUSH
3791: LD_EXP 88
3795: PUSH
3796: LD_EXP 89
3800: PUSH
3801: LD_EXP 90
3805: PUSH
3806: LD_EXP 91
3810: PUSH
3811: LD_EXP 92
3815: PUSH
3816: LD_EXP 94
3820: PUSH
3821: LD_EXP 95
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_EXP 93
3847: ADD
3848: ST_TO_ADDR
// lidi = lidi diff [ 0 ] ;
3849: LD_ADDR_VAR 0 4
3853: PUSH
3854: LD_VAR 0 4
3858: PUSH
3859: LD_INT 0
3861: PUSH
3862: EMPTY
3863: LIST
3864: DIFF
3865: ST_TO_ADDR
// plidi = 0 + lidi ;
3866: LD_ADDR_LOC 4
3870: PUSH
3871: LD_INT 0
3873: PUSH
3874: LD_VAR 0 4
3878: PLUS
3879: ST_TO_ADDR
// ingameon ;
3880: CALL_OW 8
// centernowonunits ( john ) ;
3884: LD_EXP 80
3888: PPUSH
3889: CALL_OW 87
// commovexy ( lidi , 61 , 49 ) ;
3893: LD_VAR 0 4
3897: PPUSH
3898: LD_INT 61
3900: PPUSH
3901: LD_INT 49
3903: PPUSH
3904: CALL_OW 111
// while getdistunitxy ( john , 61 , 49 ) > 5 do
3908: LD_EXP 80
3912: PPUSH
3913: LD_INT 61
3915: PPUSH
3916: LD_INT 49
3918: PPUSH
3919: CALL_OW 297
3923: PUSH
3924: LD_INT 5
3926: GREATER
3927: IFFALSE 3947
// begin wait ( 1 ) ;
3929: LD_INT 1
3931: PPUSH
3932: CALL_OW 67
// centeronunits ( john ) ;
3936: LD_EXP 80
3940: PPUSH
3941: CALL_OW 85
// end ;
3945: GO 3908
// ingameoff ;
3947: CALL_OW 9
// dialogueon ;
3951: CALL_OW 6
// say ( john , D1-JMM-1 ) ;
3955: LD_EXP 80
3959: PPUSH
3960: LD_STRING D1-JMM-1
3962: PPUSH
3963: CALL_OW 88
// if joan then
3967: LD_EXP 82
3971: IFFALSE 3985
// say ( joan , D1-Joan-1 ) ;
3973: LD_EXP 82
3977: PPUSH
3978: LD_STRING D1-Joan-1
3980: PPUSH
3981: CALL_OW 88
// if lisa then
3985: LD_EXP 85
3989: IFFALSE 4003
// say ( lisa , D1-Lisa-1 ) ;
3991: LD_EXP 85
3995: PPUSH
3996: LD_STRING D1-Lisa-1
3998: PPUSH
3999: CALL_OW 88
// say ( john , D1-JMM-2 ) ;
4003: LD_EXP 80
4007: PPUSH
4008: LD_STRING D1-JMM-2
4010: PPUSH
4011: CALL_OW 88
// dialogueoff ;
4015: CALL_OW 7
// saveforquickrestart ;
4019: CALL_OW 22
// wait ( 0 0$0.5 ) ;
4023: LD_INT 18
4025: PPUSH
4026: CALL_OW 67
// changemissionobjectives ( M1 ) ;
4030: LD_STRING M1
4032: PPUSH
4033: CALL_OW 337
// end ;
4037: LD_VAR 0 1
4041: RET
// export gossud , kiril , jahoda , burlak , arusove ; export gnyevko , dolgov , kapitsova , gleb , kovalyuk , scholtze , titov , oblukov , bystrov , lipshchin ; every 1 1$30 do var tmp , tmp1 , tmp2 , pomrusaci ;
4042: GO 4044
4044: DISABLE
4045: LD_INT 0
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
// begin uc_side = rus ;
4051: LD_ADDR_OWVAR 20
4055: PUSH
4056: LD_EXP 2
4060: ST_TO_ADDR
// pomrusaci = [ ] ;
4061: LD_ADDR_VAR 0 4
4065: PUSH
4066: EMPTY
4067: ST_TO_ADDR
// gossud = newcharacter ( Gossudarov ) ;
4068: LD_ADDR_EXP 96
4072: PUSH
4073: LD_STRING Gossudarov
4075: PPUSH
4076: CALL_OW 25
4080: ST_TO_ADDR
// if not gossud then
4081: LD_EXP 96
4085: NOT
4086: IFFALSE 4101
// buildquery ( neny Gossudarov , [ OK ] ) ;
4088: LD_STRING neny Gossudarov
4090: PPUSH
4091: LD_STRING OK
4093: PUSH
4094: EMPTY
4095: LIST
4096: PPUSH
4097: CALL_OW 99
// kiril = newcharacter ( Kirilenkova ) ;
4101: LD_ADDR_EXP 97
4105: PUSH
4106: LD_STRING Kirilenkova
4108: PPUSH
4109: CALL_OW 25
4113: ST_TO_ADDR
// if not kiril then
4114: LD_EXP 97
4118: NOT
4119: IFFALSE 4134
// buildquery ( neny Kirilenkova , [ OK ] ) ;
4121: LD_STRING neny Kirilenkova
4123: PPUSH
4124: LD_STRING OK
4126: PUSH
4127: EMPTY
4128: LIST
4129: PPUSH
4130: CALL_OW 99
// gnyevko = newcharacter ( Gnyevko ) ;
4134: LD_ADDR_EXP 101
4138: PUSH
4139: LD_STRING Gnyevko
4141: PPUSH
4142: CALL_OW 25
4146: ST_TO_ADDR
// if not gnyevko then
4147: LD_EXP 101
4151: NOT
4152: IFFALSE 4167
// buildquery ( neny Gnyevko , [ OK ] ) ;
4154: LD_STRING neny Gnyevko
4156: PPUSH
4157: LD_STRING OK
4159: PUSH
4160: EMPTY
4161: LIST
4162: PPUSH
4163: CALL_OW 99
// pomrusaci = pomrusaci ^ [ gnyevko ] ;
4167: LD_ADDR_VAR 0 4
4171: PUSH
4172: LD_VAR 0 4
4176: PUSH
4177: LD_EXP 101
4181: PUSH
4182: EMPTY
4183: LIST
4184: ADD
4185: ST_TO_ADDR
// dolgov = newcharacter ( Dolgov ) ;
4186: LD_ADDR_EXP 102
4190: PUSH
4191: LD_STRING Dolgov
4193: PPUSH
4194: CALL_OW 25
4198: ST_TO_ADDR
// if not dolgov then
4199: LD_EXP 102
4203: NOT
4204: IFFALSE 4219
// buildquery ( neny Dolgov , [ OK ] ) ;
4206: LD_STRING neny Dolgov
4208: PPUSH
4209: LD_STRING OK
4211: PUSH
4212: EMPTY
4213: LIST
4214: PPUSH
4215: CALL_OW 99
// pomrusaci = pomrusaci ^ [ dolgov ] ;
4219: LD_ADDR_VAR 0 4
4223: PUSH
4224: LD_VAR 0 4
4228: PUSH
4229: LD_EXP 102
4233: PUSH
4234: EMPTY
4235: LIST
4236: ADD
4237: ST_TO_ADDR
// kapitsova = newcharacter ( Kapitsova ) ;
4238: LD_ADDR_EXP 103
4242: PUSH
4243: LD_STRING Kapitsova
4245: PPUSH
4246: CALL_OW 25
4250: ST_TO_ADDR
// if not kapitsova then
4251: LD_EXP 103
4255: NOT
4256: IFFALSE 4271
// buildquery ( neny Kapitsova , [ OK ] ) ;
4258: LD_STRING neny Kapitsova
4260: PPUSH
4261: LD_STRING OK
4263: PUSH
4264: EMPTY
4265: LIST
4266: PPUSH
4267: CALL_OW 99
// pomrusaci = pomrusaci ^ [ kapitsova ] ;
4271: LD_ADDR_VAR 0 4
4275: PUSH
4276: LD_VAR 0 4
4280: PUSH
4281: LD_EXP 103
4285: PUSH
4286: EMPTY
4287: LIST
4288: ADD
4289: ST_TO_ADDR
// gleb = newcharacter ( Gleb ) ;
4290: LD_ADDR_EXP 104
4294: PUSH
4295: LD_STRING Gleb
4297: PPUSH
4298: CALL_OW 25
4302: ST_TO_ADDR
// if not gleb then
4303: LD_EXP 104
4307: NOT
4308: IFFALSE 4323
// buildquery ( neny Gleb , [ OK ] ) ;
4310: LD_STRING neny Gleb
4312: PPUSH
4313: LD_STRING OK
4315: PUSH
4316: EMPTY
4317: LIST
4318: PPUSH
4319: CALL_OW 99
// pomrusaci = pomrusaci ^ [ gleb ] ;
4323: LD_ADDR_VAR 0 4
4327: PUSH
4328: LD_VAR 0 4
4332: PUSH
4333: LD_EXP 104
4337: PUSH
4338: EMPTY
4339: LIST
4340: ADD
4341: ST_TO_ADDR
// kovalyuk = newcharacter ( Kovalyuk ) ;
4342: LD_ADDR_EXP 105
4346: PUSH
4347: LD_STRING Kovalyuk
4349: PPUSH
4350: CALL_OW 25
4354: ST_TO_ADDR
// if not kovalyuk then
4355: LD_EXP 105
4359: NOT
4360: IFFALSE 4375
// buildquery ( neny Kovalyuk , [ OK ] ) ;
4362: LD_STRING neny Kovalyuk
4364: PPUSH
4365: LD_STRING OK
4367: PUSH
4368: EMPTY
4369: LIST
4370: PPUSH
4371: CALL_OW 99
// pomrusaci = pomrusaci ^ [ kovalyuk ] ;
4375: LD_ADDR_VAR 0 4
4379: PUSH
4380: LD_VAR 0 4
4384: PUSH
4385: LD_EXP 105
4389: PUSH
4390: EMPTY
4391: LIST
4392: ADD
4393: ST_TO_ADDR
// scholtze = newcharacter ( Scholtze ) ;
4394: LD_ADDR_EXP 106
4398: PUSH
4399: LD_STRING Scholtze
4401: PPUSH
4402: CALL_OW 25
4406: ST_TO_ADDR
// if not scholtze then
4407: LD_EXP 106
4411: NOT
4412: IFFALSE 4427
// buildquery ( neny Scholtze , [ OK ] ) ;
4414: LD_STRING neny Scholtze
4416: PPUSH
4417: LD_STRING OK
4419: PUSH
4420: EMPTY
4421: LIST
4422: PPUSH
4423: CALL_OW 99
// pomrusaci = pomrusaci ^ [ scholtze ] ;
4427: LD_ADDR_VAR 0 4
4431: PUSH
4432: LD_VAR 0 4
4436: PUSH
4437: LD_EXP 106
4441: PUSH
4442: EMPTY
4443: LIST
4444: ADD
4445: ST_TO_ADDR
// titov = newcharacter ( Titov ) ;
4446: LD_ADDR_EXP 107
4450: PUSH
4451: LD_STRING Titov
4453: PPUSH
4454: CALL_OW 25
4458: ST_TO_ADDR
// if not titov then
4459: LD_EXP 107
4463: NOT
4464: IFFALSE 4479
// buildquery ( neny Titov , [ OK ] ) ;
4466: LD_STRING neny Titov
4468: PPUSH
4469: LD_STRING OK
4471: PUSH
4472: EMPTY
4473: LIST
4474: PPUSH
4475: CALL_OW 99
// pomrusaci = pomrusaci ^ [ titov ] ;
4479: LD_ADDR_VAR 0 4
4483: PUSH
4484: LD_VAR 0 4
4488: PUSH
4489: LD_EXP 107
4493: PUSH
4494: EMPTY
4495: LIST
4496: ADD
4497: ST_TO_ADDR
// oblukov = newcharacter ( Oblukov ) ;
4498: LD_ADDR_EXP 108
4502: PUSH
4503: LD_STRING Oblukov
4505: PPUSH
4506: CALL_OW 25
4510: ST_TO_ADDR
// if not oblukov then
4511: LD_EXP 108
4515: NOT
4516: IFFALSE 4531
// buildquery ( neny Oblukov , [ OK ] ) ;
4518: LD_STRING neny Oblukov
4520: PPUSH
4521: LD_STRING OK
4523: PUSH
4524: EMPTY
4525: LIST
4526: PPUSH
4527: CALL_OW 99
// pomrusaci = pomrusaci ^ [ oblukov ] ;
4531: LD_ADDR_VAR 0 4
4535: PUSH
4536: LD_VAR 0 4
4540: PUSH
4541: LD_EXP 108
4545: PUSH
4546: EMPTY
4547: LIST
4548: ADD
4549: ST_TO_ADDR
// bystrov = newcharacter ( Bystrov ) ;
4550: LD_ADDR_EXP 109
4554: PUSH
4555: LD_STRING Bystrov
4557: PPUSH
4558: CALL_OW 25
4562: ST_TO_ADDR
// if not bystrov then
4563: LD_EXP 109
4567: NOT
4568: IFFALSE 4583
// buildquery ( neny Bystrov , [ OK ] ) ;
4570: LD_STRING neny Bystrov
4572: PPUSH
4573: LD_STRING OK
4575: PUSH
4576: EMPTY
4577: LIST
4578: PPUSH
4579: CALL_OW 99
// pomrusaci = pomrusaci ^ [ bystrov ] ;
4583: LD_ADDR_VAR 0 4
4587: PUSH
4588: LD_VAR 0 4
4592: PUSH
4593: LD_EXP 109
4597: PUSH
4598: EMPTY
4599: LIST
4600: ADD
4601: ST_TO_ADDR
// lipshchin = newcharacter ( Lipshchin ) ;
4602: LD_ADDR_EXP 110
4606: PUSH
4607: LD_STRING Lipshchin
4609: PPUSH
4610: CALL_OW 25
4614: ST_TO_ADDR
// if not lipshchin then
4615: LD_EXP 110
4619: NOT
4620: IFFALSE 4635
// buildquery ( neny Lipshchin , [ OK ] ) ;
4622: LD_STRING neny Lipshchin
4624: PPUSH
4625: LD_STRING OK
4627: PUSH
4628: EMPTY
4629: LIST
4630: PPUSH
4631: CALL_OW 99
// pomrusaci = pomrusaci ^ [ lipshchin ] ;
4635: LD_ADDR_VAR 0 4
4639: PUSH
4640: LD_VAR 0 4
4644: PUSH
4645: LD_EXP 110
4649: PUSH
4650: EMPTY
4651: LIST
4652: ADD
4653: ST_TO_ADDR
// changesidefog ( oth , al ) ;
4654: LD_EXP 4
4658: PPUSH
4659: LD_EXP 1
4663: PPUSH
4664: CALL_OW 343
// uc_side = oth ;
4668: LD_ADDR_OWVAR 20
4672: PUSH
4673: LD_EXP 4
4677: ST_TO_ADDR
// jahoda = newcharacter ( Belkov ) ;
4678: LD_ADDR_EXP 98
4682: PUSH
4683: LD_STRING Belkov
4685: PPUSH
4686: CALL_OW 25
4690: ST_TO_ADDR
// if not jahoda then
4691: LD_EXP 98
4695: NOT
4696: IFFALSE 4705
// msg ( neny Belkov ) ;
4698: LD_STRING neny Belkov
4700: PPUSH
4701: CALL_OW 100
// burlak = newcharacter ( Burlak ) ;
4705: LD_ADDR_EXP 99
4709: PUSH
4710: LD_STRING Burlak
4712: PPUSH
4713: CALL_OW 25
4717: ST_TO_ADDR
// if not burlak then
4718: LD_EXP 99
4722: NOT
4723: IFFALSE 4738
// buildquery ( neny Burlak , [ OK ] ) ;
4725: LD_STRING neny Burlak
4727: PPUSH
4728: LD_STRING OK
4730: PUSH
4731: EMPTY
4732: LIST
4733: PPUSH
4734: CALL_OW 99
// uc_side = rus ;
4738: LD_ADDR_OWVAR 20
4742: PUSH
4743: LD_EXP 2
4747: ST_TO_ADDR
// placeunitxyr ( gossud , 70 , 96 , 2 , false ) ;
4748: LD_EXP 96
4752: PPUSH
4753: LD_INT 70
4755: PPUSH
4756: LD_INT 96
4758: PPUSH
4759: LD_INT 2
4761: PPUSH
4762: LD_INT 0
4764: PPUSH
4765: CALL_OW 50
// placeunitxyr ( kiril , 70 , 96 , 2 , false ) ;
4769: LD_EXP 97
4773: PPUSH
4774: LD_INT 70
4776: PPUSH
4777: LD_INT 96
4779: PPUSH
4780: LD_INT 2
4782: PPUSH
4783: LD_INT 0
4785: PPUSH
4786: CALL_OW 50
// tmp = maxlidi - ( 0 + plidi ) - 2 ;
4790: LD_ADDR_VAR 0 1
4794: PUSH
4795: LD_EXP 5
4799: PUSH
4800: LD_INT 0
4802: PUSH
4803: LD_LOC 4
4807: PLUS
4808: MINUS
4809: PUSH
4810: LD_INT 2
4812: MINUS
4813: ST_TO_ADDR
// tmp2 = 0 + pomrusaci ;
4814: LD_ADDR_VAR 0 3
4818: PUSH
4819: LD_INT 0
4821: PUSH
4822: LD_VAR 0 4
4826: PLUS
4827: ST_TO_ADDR
// uc_nation = nation_russian ;
4828: LD_ADDR_OWVAR 21
4832: PUSH
4833: LD_INT 3
4835: ST_TO_ADDR
// for tmp1 = 1 to tmp do
4836: LD_ADDR_VAR 0 2
4840: PUSH
4841: DOUBLE
4842: LD_INT 1
4844: DEC
4845: ST_TO_ADDR
4846: LD_VAR 0 1
4850: PUSH
4851: FOR_TO
4852: IFFALSE 4928
// if tmp1 > tmp2 then
4854: LD_VAR 0 2
4858: PUSH
4859: LD_VAR 0 3
4863: GREATER
4864: IFFALSE 4899
// begin preparescientist ( sex_male , 8 ) ;
4866: LD_INT 1
4868: PPUSH
4869: LD_INT 8
4871: PPUSH
4872: CALL_OW 384
// placeunitxyr ( createhuman , 70 , 96 , 2 , false ) ;
4876: CALL_OW 44
4880: PPUSH
4881: LD_INT 70
4883: PPUSH
4884: LD_INT 96
4886: PPUSH
4887: LD_INT 2
4889: PPUSH
4890: LD_INT 0
4892: PPUSH
4893: CALL_OW 50
// end else
4897: GO 4926
// placeunitxyr ( pomrusaci [ tmp1 ] , 70 , 96 , 2 , false ) ;
4899: LD_VAR 0 4
4903: PUSH
4904: LD_VAR 0 2
4908: ARRAY
4909: PPUSH
4910: LD_INT 70
4912: PPUSH
4913: LD_INT 96
4915: PPUSH
4916: LD_INT 2
4918: PPUSH
4919: LD_INT 0
4921: PPUSH
4922: CALL_OW 50
4926: GO 4851
4928: POP
4929: POP
// arusove = filterallunits ( [ [ f_side , rus ] ] ) ;
4930: LD_ADDR_EXP 100
4934: PUSH
4935: LD_INT 22
4937: PUSH
4938: LD_EXP 2
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: PPUSH
4950: CALL_OW 69
4954: ST_TO_ADDR
// commovexy ( arusove , 64 , 54 ) ;
4955: LD_EXP 100
4959: PPUSH
4960: LD_INT 64
4962: PPUSH
4963: LD_INT 54
4965: PPUSH
4966: CALL_OW 111
// setattitude ( rus , al , att_friend , false ) ;
4970: LD_EXP 2
4974: PPUSH
4975: LD_EXP 1
4979: PPUSH
4980: LD_INT 1
4982: PPUSH
4983: LD_INT 0
4985: PPUSH
4986: CALL_OW 80
// hint ( CombinedForces ) ;
4990: LD_STRING CombinedForces
4992: PPUSH
4993: CALL_OW 339
// end ;
4997: PPOPN 4
4999: END
// var r_seen ; function side_sees_side ( sidea , sideb ) ; var tmp , tmp2 ; begin
5000: LD_INT 0
5002: PPUSH
5003: PPUSH
5004: PPUSH
// tmp2 = filterallunits ( [ [ f_side , sideb ] ] ) ;
5005: LD_ADDR_VAR 0 5
5009: PUSH
5010: LD_INT 22
5012: PUSH
5013: LD_VAR 0 2
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: PPUSH
5025: CALL_OW 69
5029: ST_TO_ADDR
// result = 0 ;
5030: LD_ADDR_VAR 0 3
5034: PUSH
5035: LD_INT 0
5037: ST_TO_ADDR
// for tmp in tmp2 do
5038: LD_ADDR_VAR 0 4
5042: PUSH
5043: LD_VAR 0 5
5047: PUSH
5048: FOR_IN
5049: IFFALSE 5091
// if see ( sidea , tmp ) then
5051: LD_VAR 0 1
5055: PPUSH
5056: LD_VAR 0 4
5060: PPUSH
5061: CALL_OW 292
5065: IFFALSE 5089
// begin r_seen = tmp ;
5067: LD_ADDR_LOC 5
5071: PUSH
5072: LD_VAR 0 4
5076: ST_TO_ADDR
// result = tmp ;
5077: LD_ADDR_VAR 0 3
5081: PUSH
5082: LD_VAR 0 4
5086: ST_TO_ADDR
// break ;
5087: GO 5091
// end ;
5089: GO 5048
5091: POP
5092: POP
// end ;
5093: LD_VAR 0 3
5097: RET
// every 0 0$1 + 1 1$30 trigger side_sees_side ( al , rus ) do var tmp , tmp2 , tmp1 , utoci ;
5098: LD_EXP 1
5102: PPUSH
5103: LD_EXP 2
5107: PPUSH
5108: CALL 5000 0 2
5112: IFFALSE 5709
5114: GO 5116
5116: DISABLE
5117: LD_INT 0
5119: PPUSH
5120: PPUSH
5121: PPUSH
5122: PPUSH
// begin utoci = false ;
5123: LD_ADDR_VAR 0 4
5127: PUSH
5128: LD_INT 0
5130: ST_TO_ADDR
// tmp2 = filterallunits ( [ [ f_side , al ] , [ f_type , unit_human ] ] ) ;
5131: LD_ADDR_VAR 0 2
5135: PUSH
5136: LD_INT 22
5138: PUSH
5139: LD_EXP 1
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: LD_INT 21
5150: PUSH
5151: LD_INT 1
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PPUSH
5162: CALL_OW 69
5166: ST_TO_ADDR
// repeat for tmp in tmp2 do
5167: LD_ADDR_VAR 0 1
5171: PUSH
5172: LD_VAR 0 2
5176: PUSH
5177: FOR_IN
5178: IFFALSE 5674
// if ( attacks ( tmp ) ) then
5180: LD_VAR 0 1
5184: PPUSH
5185: CALL_OW 320
5189: IFFALSE 5672
// begin wait ( 0 0$0.5 ) ;
5191: LD_INT 18
5193: PPUSH
5194: CALL_OW 67
// ingameon ;
5198: CALL_OW 8
// utoci = true ;
5202: LD_ADDR_VAR 0 4
5206: PUSH
5207: LD_INT 1
5209: ST_TO_ADDR
// if islive ( roth ) then
5210: LD_EXP 81
5214: PPUSH
5215: CALL_OW 300
5219: IFFALSE 5410
// begin setside ( arusove , al ) ;
5221: LD_EXP 100
5225: PPUSH
5226: LD_EXP 1
5230: PPUSH
5231: CALL_OW 235
// comstop ( tmp ) ;
5235: LD_VAR 0 1
5239: PPUSH
5240: CALL_OW 141
// comstop ( arusove ) ;
5244: LD_EXP 100
5248: PPUSH
5249: CALL_OW 141
// say ( roth , D2-Roth-2 ) ;
5253: LD_EXP 81
5257: PPUSH
5258: LD_STRING D2-Roth-2
5260: PPUSH
5261: CALL_OW 88
// say ( roth , D2-Roth-2a ) ;
5265: LD_EXP 81
5269: PPUSH
5270: LD_STRING D2-Roth-2a
5272: PPUSH
5273: CALL_OW 88
// commovexy ( [ john , roth ] , getx ( gossud ) , gety ( gossud ) ) ;
5277: LD_EXP 80
5281: PUSH
5282: LD_EXP 81
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PPUSH
5291: LD_EXP 96
5295: PPUSH
5296: CALL_OW 250
5300: PPUSH
5301: LD_EXP 96
5305: PPUSH
5306: CALL_OW 251
5310: PPUSH
5311: CALL_OW 111
// while ( getdistunits ( john , gossud ) + getdistunits ( roth , gossud ) ) > 19 do
5315: LD_EXP 80
5319: PPUSH
5320: LD_EXP 96
5324: PPUSH
5325: CALL_OW 296
5329: PUSH
5330: LD_EXP 81
5334: PPUSH
5335: LD_EXP 96
5339: PPUSH
5340: CALL_OW 296
5344: PLUS
5345: PUSH
5346: LD_INT 19
5348: GREATER
5349: IFFALSE 5384
// begin centeronunits ( [ roth , gossud , john ] ) ;
5351: LD_EXP 81
5355: PUSH
5356: LD_EXP 96
5360: PUSH
5361: LD_EXP 80
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: PPUSH
5371: CALL_OW 85
// wait ( 1 ) ;
5375: LD_INT 1
5377: PPUSH
5378: CALL_OW 67
// end ;
5382: GO 5315
// say ( roth , D2-Roth-2b ) ;
5384: LD_EXP 81
5388: PPUSH
5389: LD_STRING D2-Roth-2b
5391: PPUSH
5392: CALL_OW 88
// say ( john , D2-JMM-3 ) ;
5396: LD_EXP 80
5400: PPUSH
5401: LD_STRING D2-JMM-3
5403: PPUSH
5404: CALL_OW 88
// end else
5408: GO 5596
// begin setside ( arusove , al ) ;
5410: LD_EXP 100
5414: PPUSH
5415: LD_EXP 1
5419: PPUSH
5420: CALL_OW 235
// comstop ( tmp ) ;
5424: LD_VAR 0 1
5428: PPUSH
5429: CALL_OW 141
// comstop ( arusove ) ;
5433: LD_EXP 100
5437: PPUSH
5438: CALL_OW 141
// say ( john , D2-JMM-1 ) ;
5442: LD_EXP 80
5446: PPUSH
5447: LD_STRING D2-JMM-1
5449: PPUSH
5450: CALL_OW 88
// say ( john , D2-JMM-1a ) ;
5454: LD_EXP 80
5458: PPUSH
5459: LD_STRING D2-JMM-1a
5461: PPUSH
5462: CALL_OW 88
// commovexy ( john , getx ( gossud ) , gety ( gossud ) ) ;
5466: LD_EXP 80
5470: PPUSH
5471: LD_EXP 96
5475: PPUSH
5476: CALL_OW 250
5480: PPUSH
5481: LD_EXP 96
5485: PPUSH
5486: CALL_OW 251
5490: PPUSH
5491: CALL_OW 111
// while getdistunits ( john , gossud ) > 11 do
5495: LD_EXP 80
5499: PPUSH
5500: LD_EXP 96
5504: PPUSH
5505: CALL_OW 296
5509: PUSH
5510: LD_INT 11
5512: GREATER
5513: IFFALSE 5548
// begin centeronunits ( [ roth , gossud , john ] ) ;
5515: LD_EXP 81
5519: PUSH
5520: LD_EXP 96
5524: PUSH
5525: LD_EXP 80
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: LIST
5534: PPUSH
5535: CALL_OW 85
// wait ( 1 ) ;
5539: LD_INT 1
5541: PPUSH
5542: CALL_OW 67
// end ;
5546: GO 5495
// say ( john , D2-JMM-1b ) ;
5548: LD_EXP 80
5552: PPUSH
5553: LD_STRING D2-JMM-1b
5555: PPUSH
5556: CALL_OW 88
// say ( gossud , D2-Gos-1 ) ;
5560: LD_EXP 96
5564: PPUSH
5565: LD_STRING D2-Gos-1
5567: PPUSH
5568: CALL_OW 88
// say ( john , D2-JMM-2 ) ;
5572: LD_EXP 80
5576: PPUSH
5577: LD_STRING D2-JMM-2
5579: PPUSH
5580: CALL_OW 88
// say ( gossud , D2-Gos-2 ) ;
5584: LD_EXP 96
5588: PPUSH
5589: LD_STRING D2-Gos-2
5591: PPUSH
5592: CALL_OW 88
// end ; say ( gossud , D2-Gos-3 ) ;
5596: LD_EXP 96
5600: PPUSH
5601: LD_STRING D2-Gos-3
5603: PPUSH
5604: CALL_OW 88
// say ( john , D2-JMM-4 ) ;
5608: LD_EXP 80
5612: PPUSH
5613: LD_STRING D2-JMM-4
5615: PPUSH
5616: CALL_OW 88
// say ( gossud , D2-Gos-4 ) ;
5620: LD_EXP 96
5624: PPUSH
5625: LD_STRING D2-Gos-4
5627: PPUSH
5628: CALL_OW 88
// say ( john , D2-JMM-5 ) ;
5632: LD_EXP 80
5636: PPUSH
5637: LD_STRING D2-JMM-5
5639: PPUSH
5640: CALL_OW 88
// say ( gossud , D2-Gos-5 ) ;
5644: LD_EXP 96
5648: PPUSH
5649: LD_STRING D2-Gos-5
5651: PPUSH
5652: CALL_OW 88
// say ( john , D2-JMM-6 ) ;
5656: LD_EXP 80
5660: PPUSH
5661: LD_STRING D2-JMM-6
5663: PPUSH
5664: CALL_OW 88
// ingameoff ;
5668: CALL_OW 9
// end ;
5672: GO 5177
5674: POP
5675: POP
// wait ( 0 0$0.1 ) ;
5676: LD_INT 4
5678: PPUSH
5679: CALL_OW 67
// until utoci ;
5683: LD_VAR 0 4
5687: IFFALSE 5167
// setattitude ( al , rus , att_enemy , true ) ;
5689: LD_EXP 1
5693: PPUSH
5694: LD_EXP 2
5698: PPUSH
5699: LD_INT 2
5701: PPUSH
5702: LD_INT 1
5704: PPUSH
5705: CALL_OW 80
// end ;
5709: PPOPN 4
5711: END
// export lb1 ; on buildingcomplete ( b ) do if ( getbtype ( b ) = b_lab ) and ( getnation ( b ) <> nation_russian ) and not lb1 then
5712: LD_VAR 0 1
5716: PPUSH
5717: CALL_OW 266
5721: PUSH
5722: LD_INT 6
5724: EQUAL
5725: PUSH
5726: LD_VAR 0 1
5730: PPUSH
5731: CALL_OW 248
5735: PUSH
5736: LD_INT 3
5738: NONEQUAL
5739: AND
5740: PUSH
5741: LD_EXP 111
5745: NOT
5746: AND
5747: IFFALSE 5762
// begin lb1 = true ;
5749: LD_ADDR_EXP 111
5753: PUSH
5754: LD_INT 1
5756: ST_TO_ADDR
// enable ( 01 ) ;
5757: LD_INT 1
5759: ENABLE_MARKED
// end else
5760: GO 5796
// if ( getbtype ( b ) = b_lab ) and ( getnation ( b ) = nation_russian ) then
5762: LD_VAR 0 1
5766: PPUSH
5767: CALL_OW 266
5771: PUSH
5772: LD_INT 6
5774: EQUAL
5775: PUSH
5776: LD_VAR 0 1
5780: PPUSH
5781: CALL_OW 248
5785: PUSH
5786: LD_INT 3
5788: EQUAL
5789: AND
5790: IFFALSE 5796
// begin disable ;
5792: DISABLE
// enable ( 02 ) ;
5793: LD_INT 2
5795: ENABLE_MARKED
// end ;
5796: PPOPN 1
5798: END
// every 0 0$1 + 1 1$45 marked 01 do var tmp ;
5799: GO 5801
5801: DISABLE
5802: LD_INT 0
5804: PPUSH
// begin dialogueon ;
5805: CALL_OW 6
// if isok ( kiril ) then
5809: LD_EXP 97
5813: PPUSH
5814: CALL_OW 302
5818: IFFALSE 5834
// say ( kiril , D3-Kir-1 ) else
5820: LD_EXP 97
5824: PPUSH
5825: LD_STRING D3-Kir-1
5827: PPUSH
5828: CALL_OW 88
5832: GO 5922
// if isok ( gossud ) then
5834: LD_EXP 96
5838: PPUSH
5839: CALL_OW 302
5843: IFFALSE 5859
// say ( gossud , D3-Kir-1 ) else
5845: LD_EXP 96
5849: PPUSH
5850: LD_STRING D3-Kir-1
5852: PPUSH
5853: CALL_OW 88
5857: GO 5922
// begin tmp = filterallunits ( [ [ f_nation , nation_russian ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
5859: LD_ADDR_VAR 0 1
5863: PUSH
5864: LD_INT 23
5866: PUSH
5867: LD_INT 3
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: LD_INT 21
5876: PUSH
5877: LD_INT 1
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: PUSH
5884: LD_INT 50
5886: PUSH
5887: EMPTY
5888: LIST
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 69
5899: ST_TO_ADDR
// if tmp then
5900: LD_VAR 0 1
5904: IFFALSE 5922
// say ( tmp [ 1 ] , D3-Kir-1 ) end ;
5906: LD_VAR 0 1
5910: PUSH
5911: LD_INT 1
5913: ARRAY
5914: PPUSH
5915: LD_STRING D3-Kir-1
5917: PPUSH
5918: CALL_OW 88
// dialogueoff ;
5922: CALL_OW 7
// end ;
5926: PPOPN 1
5928: END
// every 0 0$1 + 2 2$0 marked 02 do var tmp ;
5929: GO 5931
5931: DISABLE
5932: LD_INT 0
5934: PPUSH
// begin tmp = filterallunits ( [ [ f_nation , nation_russian ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
5935: LD_ADDR_VAR 0 1
5939: PUSH
5940: LD_INT 23
5942: PUSH
5943: LD_INT 3
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: PUSH
5950: LD_INT 21
5952: PUSH
5953: LD_INT 1
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PUSH
5960: LD_INT 50
5962: PUSH
5963: EMPTY
5964: LIST
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: LIST
5970: PPUSH
5971: CALL_OW 69
5975: ST_TO_ADDR
// dialogueon ;
5976: CALL_OW 6
// if isok ( kiril ) then
5980: LD_EXP 97
5984: PPUSH
5985: CALL_OW 302
5989: IFFALSE 6005
// say ( kiril , D3a-Kir-1 ) else
5991: LD_EXP 97
5995: PPUSH
5996: LD_STRING D3a-Kir-1
5998: PPUSH
5999: CALL_OW 88
6003: GO 6071
// begin tmp = tmp diff [ gossud ] ;
6005: LD_ADDR_VAR 0 1
6009: PUSH
6010: LD_VAR 0 1
6014: PUSH
6015: LD_EXP 96
6019: PUSH
6020: EMPTY
6021: LIST
6022: DIFF
6023: ST_TO_ADDR
// if tmp then
6024: LD_VAR 0 1
6028: IFFALSE 6048
// say ( tmp [ 1 ] , D3a-Sci1-1 ) else
6030: LD_VAR 0 1
6034: PUSH
6035: LD_INT 1
6037: ARRAY
6038: PPUSH
6039: LD_STRING D3a-Sci1-1
6041: PPUSH
6042: CALL_OW 88
6046: GO 6071
// if isok ( gossud ) then
6048: LD_EXP 96
6052: PPUSH
6053: CALL_OW 302
6057: IFFALSE 6071
// say ( gossud , D3a-Sci1-1 ) ;
6059: LD_EXP 96
6063: PPUSH
6064: LD_STRING D3a-Sci1-1
6066: PPUSH
6067: CALL_OW 88
// end ; say ( john , D3a-JMM-1 ) ;
6071: LD_EXP 80
6075: PPUSH
6076: LD_STRING D3a-JMM-1
6078: PPUSH
6079: CALL_OW 88
// dialogueoff ;
6083: CALL_OW 7
// end ;
6087: PPOPN 1
6089: END
// every 0 0$1 + 2 2$30 trigger see ( al , ruv0 ) do var tmp ;
6090: LD_EXP 1
6094: PPUSH
6095: LD_EXP 117
6099: PPUSH
6100: CALL_OW 292
6104: IFFALSE 6257
6106: GO 6108
6108: DISABLE
6109: LD_INT 0
6111: PPUSH
// begin tmp = unitfilter ( arusove , [ [ f_ok ] , [ f_sex , sex_male ] ] ) ;
6112: LD_ADDR_VAR 0 1
6116: PUSH
6117: LD_EXP 100
6121: PPUSH
6122: LD_INT 50
6124: PUSH
6125: EMPTY
6126: LIST
6127: PUSH
6128: LD_INT 26
6130: PUSH
6131: LD_INT 1
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PPUSH
6142: CALL_OW 72
6146: ST_TO_ADDR
// if 0 = tmp then
6147: LD_INT 0
6149: PUSH
6150: LD_VAR 0 1
6154: EQUAL
6155: IFFALSE 6159
// exit ;
6157: GO 6257
// tmp = tmp diff [ gossud ] ;
6159: LD_ADDR_VAR 0 1
6163: PUSH
6164: LD_VAR 0 1
6168: PUSH
6169: LD_EXP 96
6173: PUSH
6174: EMPTY
6175: LIST
6176: DIFF
6177: ST_TO_ADDR
// dialogueon ;
6178: CALL_OW 6
// if tmp then
6182: LD_VAR 0 1
6186: IFFALSE 6206
// say ( tmp [ 1 ] , D4-RSci1-1 ) else
6188: LD_VAR 0 1
6192: PUSH
6193: LD_INT 1
6195: ARRAY
6196: PPUSH
6197: LD_STRING D4-RSci1-1
6199: PPUSH
6200: CALL_OW 88
6204: GO 6218
// say ( gossud , D4-RSci1-1 ) ;
6206: LD_EXP 96
6210: PPUSH
6211: LD_STRING D4-RSci1-1
6213: PPUSH
6214: CALL_OW 88
// if isok ( gossud ) then
6218: LD_EXP 96
6222: PPUSH
6223: CALL_OW 302
6227: IFFALSE 6241
// say ( gossud , D4-Gos-1 ) ;
6229: LD_EXP 96
6233: PPUSH
6234: LD_STRING D4-Gos-1
6236: PPUSH
6237: CALL_OW 88
// say ( john , D4-JMM-1 ) ;
6241: LD_EXP 80
6245: PPUSH
6246: LD_STRING D4-JMM-1
6248: PPUSH
6249: CALL_OW 88
// dialogueoff ;
6253: CALL_OW 7
// end ;
6257: PPOPN 1
6259: END
// every 4 4$10 do
6260: GO 6262
6262: DISABLE
// begin if debug then
6263: LD_EXP 77
6267: IFFALSE 6306
// begin uc_side = oth ;
6269: LD_ADDR_OWVAR 20
6273: PUSH
6274: LD_EXP 4
6278: ST_TO_ADDR
// changesidefog ( oth , al ) ;
6279: LD_EXP 4
6283: PPUSH
6284: LD_EXP 1
6288: PPUSH
6289: CALL_OW 343
// jahoda = newcharacter ( Belkov ) ;
6293: LD_ADDR_EXP 98
6297: PUSH
6298: LD_STRING Belkov
6300: PPUSH
6301: CALL_OW 25
6305: ST_TO_ADDR
// end ; placeunitxyr ( jahoda , 113 , 97 , 2 , false ) ;
6306: LD_EXP 98
6310: PPUSH
6311: LD_INT 113
6313: PPUSH
6314: LD_INT 97
6316: PPUSH
6317: LD_INT 2
6319: PPUSH
6320: LD_INT 0
6322: PPUSH
6323: CALL_OW 50
// commovexy ( jahoda , 79 , 65 ) ;
6327: LD_EXP 98
6331: PPUSH
6332: LD_INT 79
6334: PPUSH
6335: LD_INT 65
6337: PPUSH
6338: CALL_OW 111
// end ;
6342: END
// every 0 0$2 + 4 4$28 trigger isinarea ( jahoda , stred ) do var tmp ;
6343: LD_EXP 98
6347: PPUSH
6348: LD_INT 2
6350: PPUSH
6351: CALL_OW 308
6355: IFFALSE 6631
6357: GO 6359
6359: DISABLE
6360: LD_INT 0
6362: PPUSH
// begin tmp = unitfilter ( arusove , [ [ f_ok ] ] ) ;
6363: LD_ADDR_VAR 0 1
6367: PUSH
6368: LD_EXP 100
6372: PPUSH
6373: LD_INT 50
6375: PUSH
6376: EMPTY
6377: LIST
6378: PUSH
6379: EMPTY
6380: LIST
6381: PPUSH
6382: CALL_OW 72
6386: ST_TO_ADDR
// dialogueon ;
6387: CALL_OW 6
// sayradio ( jahoda , D5-Bel-1 ) ;
6391: LD_EXP 98
6395: PPUSH
6396: LD_STRING D5-Bel-1
6398: PPUSH
6399: CALL_OW 94
// if isok ( gossud ) then
6403: LD_EXP 96
6407: PPUSH
6408: CALL_OW 302
6412: IFFALSE 6464
// begin say ( gossud , D5-Gos-1 ) ;
6414: LD_EXP 96
6418: PPUSH
6419: LD_STRING D5-Gos-1
6421: PPUSH
6422: CALL_OW 88
// say ( john , D5-JMM-1 ) ;
6426: LD_EXP 80
6430: PPUSH
6431: LD_STRING D5-JMM-1
6433: PPUSH
6434: CALL_OW 88
// say ( gossud , D5-Gos-2 ) ;
6438: LD_EXP 96
6442: PPUSH
6443: LD_STRING D5-Gos-2
6445: PPUSH
6446: CALL_OW 88
// say ( john , D5-JMM-2 ) ;
6450: LD_EXP 80
6454: PPUSH
6455: LD_STRING D5-JMM-2
6457: PPUSH
6458: CALL_OW 88
// end else
6462: GO 6526
// if tmp then
6464: LD_VAR 0 1
6468: IFFALSE 6526
// begin say ( tmp [ 1 ] , D5-Gos-1 ) ;
6470: LD_VAR 0 1
6474: PUSH
6475: LD_INT 1
6477: ARRAY
6478: PPUSH
6479: LD_STRING D5-Gos-1
6481: PPUSH
6482: CALL_OW 88
// say ( john , D5-JMM-1 ) ;
6486: LD_EXP 80
6490: PPUSH
6491: LD_STRING D5-JMM-1
6493: PPUSH
6494: CALL_OW 88
// say ( tmp [ 1 ] , D5-Gos-2 ) ;
6498: LD_VAR 0 1
6502: PUSH
6503: LD_INT 1
6505: ARRAY
6506: PPUSH
6507: LD_STRING D5-Gos-2
6509: PPUSH
6510: CALL_OW 88
// say ( john , D5-JMM-2 ) ;
6514: LD_EXP 80
6518: PPUSH
6519: LD_STRING D5-JMM-2
6521: PPUSH
6522: CALL_OW 88
// end ; dialogueoff ;
6526: CALL_OW 7
// case query ( QSaveBelkov ) of 1 :
6530: LD_STRING QSaveBelkov
6532: PPUSH
6533: CALL_OW 97
6537: PUSH
6538: LD_INT 1
6540: DOUBLE
6541: EQUAL
6542: IFTRUE 6546
6544: GO 6581
6546: POP
// begin dialogueon ;
6547: CALL_OW 6
// say ( john , D5a-JMM-1 ) ;
6551: LD_EXP 80
6555: PPUSH
6556: LD_STRING D5a-JMM-1
6558: PPUSH
6559: CALL_OW 88
// sayradio ( jahoda , D5a-Bel-1 ) ;
6563: LD_EXP 98
6567: PPUSH
6568: LD_STRING D5a-Bel-1
6570: PPUSH
6571: CALL_OW 94
// dialogueoff ;
6575: CALL_OW 7
// end ; 2 :
6579: GO 6631
6581: LD_INT 2
6583: DOUBLE
6584: EQUAL
6585: IFTRUE 6589
6587: GO 6630
6589: POP
// begin dialogueon ;
6590: CALL_OW 6
// say ( john , D5a-JMM-2 ) ;
6594: LD_EXP 80
6598: PPUSH
6599: LD_STRING D5a-JMM-2
6601: PPUSH
6602: CALL_OW 88
// dialogueoff ;
6606: CALL_OW 7
// commovexy ( jahoda , 117 , 97 ) ;
6610: LD_EXP 98
6614: PPUSH
6615: LD_INT 117
6617: PPUSH
6618: LD_INT 97
6620: PPUSH
6621: CALL_OW 111
// enable ( 04 ) ;
6625: LD_INT 4
6627: ENABLE_MARKED
// end ; end ;
6628: GO 6631
6630: POP
// end ;
6631: PPOPN 1
6633: END
// every 0 0$1 + 4 4$33 trigger filterallunits ( [ [ f_side , al ] , [ f_dist , jahoda , 6 ] ] ) do
6634: LD_INT 22
6636: PUSH
6637: LD_EXP 1
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PUSH
6646: LD_INT 91
6648: PUSH
6649: LD_EXP 98
6653: PUSH
6654: LD_INT 6
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PPUSH
6666: CALL_OW 69
6670: IFFALSE 6689
6672: GO 6674
6674: DISABLE
// begin setside ( jahoda , al ) ;
6675: LD_EXP 98
6679: PPUSH
6680: LD_EXP 1
6684: PPUSH
6685: CALL_OW 235
// end ;
6689: END
// every 0 0$1 + 8 8$03 trigger see ( al , ruv1 ) or see ( al , ruv2 ) or see ( al , ruv3 ) marked 03 do var tmp ;
6690: LD_EXP 1
6694: PPUSH
6695: LD_EXP 118
6699: PPUSH
6700: CALL_OW 292
6704: PUSH
6705: LD_EXP 1
6709: PPUSH
6710: LD_EXP 119
6714: PPUSH
6715: CALL_OW 292
6719: OR
6720: PUSH
6721: LD_EXP 1
6725: PPUSH
6726: LD_EXP 120
6730: PPUSH
6731: CALL_OW 292
6735: OR
6736: IFFALSE 6782
6738: GO 6740
6740: DISABLE
6741: LD_INT 0
6743: PPUSH
// begin if islive ( jahoda ) then
6744: LD_EXP 98
6748: PPUSH
6749: CALL_OW 300
6753: IFFALSE 6782
// begin wait ( 0 0$2 ) ;
6755: LD_INT 70
6757: PPUSH
6758: CALL_OW 67
// dialogueon ;
6762: CALL_OW 6
// say ( jahoda , D6-Bel-1 ) ;
6766: LD_EXP 98
6770: PPUSH
6771: LD_STRING D6-Bel-1
6773: PPUSH
6774: CALL_OW 88
// dialogueoff ;
6778: CALL_OW 7
// end ; end ;
6782: PPOPN 1
6784: END
// export masha ; every 10 10$05 do
6785: GO 6787
6787: DISABLE
// begin uc_side = oth ;
6788: LD_ADDR_OWVAR 20
6792: PUSH
6793: LD_EXP 4
6797: ST_TO_ADDR
// uc_nation = nation_russian ;
6798: LD_ADDR_OWVAR 21
6802: PUSH
6803: LD_INT 3
6805: ST_TO_ADDR
// vc_control = control_manual ;
6806: LD_ADDR_OWVAR 38
6810: PUSH
6811: LD_INT 1
6813: ST_TO_ADDR
// vc_engine = engine_combustion ;
6814: LD_ADDR_OWVAR 39
6818: PUSH
6819: LD_INT 1
6821: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
6822: LD_ADDR_OWVAR 37
6826: PUSH
6827: LD_INT 21
6829: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
6830: LD_ADDR_OWVAR 40
6834: PUSH
6835: LD_INT 43
6837: ST_TO_ADDR
// masha = createvehicle ;
6838: LD_ADDR_EXP 112
6842: PUSH
6843: CALL_OW 45
6847: ST_TO_ADDR
// setmark ( masha , 1 ) ;
6848: LD_EXP 112
6852: PPUSH
6853: LD_INT 1
6855: PPUSH
6856: CALL_OW 242
// setfuel ( masha , 0 ) ;
6860: LD_EXP 112
6864: PPUSH
6865: LD_INT 0
6867: PPUSH
6868: CALL_OW 240
// setdir ( masha , 3 ) ;
6872: LD_EXP 112
6876: PPUSH
6877: LD_INT 3
6879: PPUSH
6880: CALL_OW 233
// setlives ( [ masha , burlak ] , 499 ) ;
6884: LD_EXP 112
6888: PUSH
6889: LD_EXP 99
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PPUSH
6898: LD_INT 499
6900: PPUSH
6901: CALL_OW 234
// placeunitxy ( masha , 116 , 4 , false ) ;
6905: LD_EXP 112
6909: PPUSH
6910: LD_INT 116
6912: PPUSH
6913: LD_INT 4
6915: PPUSH
6916: LD_INT 0
6918: PPUSH
6919: CALL_OW 48
// placeunitxy ( burlak , 116 , 2 , false ) ;
6923: LD_EXP 99
6927: PPUSH
6928: LD_INT 116
6930: PPUSH
6931: LD_INT 2
6933: PPUSH
6934: LD_INT 0
6936: PPUSH
6937: CALL_OW 48
// commoveunit ( burlak , masha ) ;
6941: LD_EXP 99
6945: PPUSH
6946: LD_EXP 112
6950: PPUSH
6951: CALL_OW 112
// wait ( 0 0$0.3 ) ;
6955: LD_INT 10
6957: PPUSH
6958: CALL_OW 67
// commovexy ( masha , 109 , 9 ) ;
6962: LD_EXP 112
6966: PPUSH
6967: LD_INT 109
6969: PPUSH
6970: LD_INT 9
6972: PPUSH
6973: CALL_OW 111
// end ;
6977: END
// every 0 0$0.51 + 10 10$08 trigger isinarea ( masha , burlakarriv ) do var tmp ;
6978: LD_EXP 112
6982: PPUSH
6983: LD_INT 6
6985: PPUSH
6986: CALL_OW 308
6990: IFFALSE 7582
6992: GO 6994
6994: DISABLE
6995: LD_INT 0
6997: PPUSH
// begin tmp = filterallunits ( [ [ f_side , al ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ;
6998: LD_ADDR_VAR 0 1
7002: PUSH
7003: LD_INT 22
7005: PUSH
7006: LD_EXP 1
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 23
7017: PUSH
7018: LD_INT 3
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: LD_INT 50
7027: PUSH
7028: EMPTY
7029: LIST
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 69
7040: ST_TO_ADDR
// commovexy ( burlak , 110 , 8 ) ;
7041: LD_EXP 99
7045: PPUSH
7046: LD_INT 110
7048: PPUSH
7049: LD_INT 8
7051: PPUSH
7052: CALL_OW 111
// wait ( 0 0$1 ) ;
7056: LD_INT 35
7058: PPUSH
7059: CALL_OW 67
// dialogueon ;
7063: CALL_OW 6
// sayradio ( burlak , D10-Bur-1 ) ;
7067: LD_EXP 99
7071: PPUSH
7072: LD_STRING D10-Bur-1
7074: PPUSH
7075: CALL_OW 94
// if isok ( jahoda ) then
7079: LD_EXP 98
7083: PPUSH
7084: CALL_OW 302
7088: IFFALSE 7104
// say ( jahoda , D10-Bel-1 ) else
7090: LD_EXP 98
7094: PPUSH
7095: LD_STRING D10-Bel-1
7097: PPUSH
7098: CALL_OW 88
7102: GO 7201
// if isok ( gossud ) then
7104: LD_EXP 96
7108: PPUSH
7109: CALL_OW 302
7113: IFFALSE 7129
// say ( gossud , D10-Gos-1 ) else
7115: LD_EXP 96
7119: PPUSH
7120: LD_STRING D10-Gos-1
7122: PPUSH
7123: CALL_OW 88
7127: GO 7201
// if isok ( kiril ) then
7129: LD_EXP 97
7133: PPUSH
7134: CALL_OW 302
7138: IFFALSE 7154
// say ( kiril , D10-Kir-1 ) else
7140: LD_EXP 97
7144: PPUSH
7145: LD_STRING D10-Kir-1
7147: PPUSH
7148: CALL_OW 88
7152: GO 7201
// if tmp then
7154: LD_VAR 0 1
7158: IFFALSE 7178
// say ( tmp [ 1 ] , D10-RSol1-1 ) else
7160: LD_VAR 0 1
7164: PUSH
7165: LD_INT 1
7167: ARRAY
7168: PPUSH
7169: LD_STRING D10-RSol1-1
7171: PPUSH
7172: CALL_OW 88
7176: GO 7201
// if isok ( roth ) then
7178: LD_EXP 81
7182: PPUSH
7183: CALL_OW 302
7187: IFFALSE 7201
// say ( roth , D10-RSol1-1 ) ;
7189: LD_EXP 81
7193: PPUSH
7194: LD_STRING D10-RSol1-1
7196: PPUSH
7197: CALL_OW 88
// sayradio ( burlak , D10-Bur-2 ) ;
7201: LD_EXP 99
7205: PPUSH
7206: LD_STRING D10-Bur-2
7208: PPUSH
7209: CALL_OW 94
// say ( john , D10-JMM-2 ) ;
7213: LD_EXP 80
7217: PPUSH
7218: LD_STRING D10-JMM-2
7220: PPUSH
7221: CALL_OW 88
// tmp = tmp diff gossud ;
7225: LD_ADDR_VAR 0 1
7229: PUSH
7230: LD_VAR 0 1
7234: PUSH
7235: LD_EXP 96
7239: DIFF
7240: ST_TO_ADDR
// if isok ( kiril ) then
7241: LD_EXP 97
7245: PPUSH
7246: CALL_OW 302
7250: IFFALSE 7266
// say ( kiril , D10-Kir-2 ) else
7252: LD_EXP 97
7256: PPUSH
7257: LD_STRING D10-Kir-2
7259: PPUSH
7260: CALL_OW 88
7264: GO 7288
// if tmp then
7266: LD_VAR 0 1
7270: IFFALSE 7288
// say ( tmp [ 1 ] , D10-RSol1-2 ) ;
7272: LD_VAR 0 1
7276: PUSH
7277: LD_INT 1
7279: ARRAY
7280: PPUSH
7281: LD_STRING D10-RSol1-2
7283: PPUSH
7284: CALL_OW 88
// say ( john , D10-JMM-3 ) ;
7288: LD_EXP 80
7292: PPUSH
7293: LD_STRING D10-JMM-3
7295: PPUSH
7296: CALL_OW 88
// sayradio ( burlak , D10-Bur-3 ) ;
7300: LD_EXP 99
7304: PPUSH
7305: LD_STRING D10-Bur-3
7307: PPUSH
7308: CALL_OW 94
// say ( john , D10-JMM-4 ) ;
7312: LD_EXP 80
7316: PPUSH
7317: LD_STRING D10-JMM-4
7319: PPUSH
7320: CALL_OW 88
// dialogueoff ;
7324: CALL_OW 7
// changemissionobjectives ( M2 ) ;
7328: LD_STRING M2
7330: PPUSH
7331: CALL_OW 337
// update_display ( 1 ) ;
7335: LD_INT 1
7337: PPUSH
7338: CALL 14103 0 1
// case difficulty of 1 :
7342: LD_OWVAR 67
7346: PUSH
7347: LD_INT 1
7349: DOUBLE
7350: EQUAL
7351: IFTRUE 7355
7353: GO 7365
7355: POP
// wait ( 20 20$0 ) ; 2 :
7356: LD_INT 42000
7358: PPUSH
7359: CALL_OW 67
7363: GO 7402
7365: LD_INT 2
7367: DOUBLE
7368: EQUAL
7369: IFTRUE 7373
7371: GO 7383
7373: POP
// wait ( 15 15$0 ) ; 3 :
7374: LD_INT 31500
7376: PPUSH
7377: CALL_OW 67
7381: GO 7402
7383: LD_INT 3
7385: DOUBLE
7386: EQUAL
7387: IFTRUE 7391
7389: GO 7401
7391: POP
// wait ( 7 7$0 ) ; end ;
7392: LD_INT 14700
7394: PPUSH
7395: CALL_OW 67
7399: GO 7402
7401: POP
// hiddencamera ( 117 , 15 , ar ) ;
7402: LD_INT 117
7404: PPUSH
7405: LD_INT 15
7407: PPUSH
7408: LD_EXP 3
7412: PPUSH
7413: CALL_OW 244
// hiddencamera ( 111 , 18 , ar ) ;
7417: LD_INT 111
7419: PPUSH
7420: LD_INT 18
7422: PPUSH
7423: LD_EXP 3
7427: PPUSH
7428: CALL_OW 244
// hiddencamera ( 107 , 18 , ar ) ;
7432: LD_INT 107
7434: PPUSH
7435: LD_INT 18
7437: PPUSH
7438: LD_EXP 3
7442: PPUSH
7443: CALL_OW 244
// hiddencamera ( 108 , 23 , ar ) ;
7447: LD_INT 108
7449: PPUSH
7450: LD_INT 23
7452: PPUSH
7453: LD_EXP 3
7457: PPUSH
7458: CALL_OW 244
// hiddencamera ( 122 , 18 , ar ) ;
7462: LD_INT 122
7464: PPUSH
7465: LD_INT 18
7467: PPUSH
7468: LD_EXP 3
7472: PPUSH
7473: CALL_OW 244
// hiddencamera ( 102 , 22 , ar ) ;
7477: LD_INT 102
7479: PPUSH
7480: LD_INT 22
7482: PPUSH
7483: LD_EXP 3
7487: PPUSH
7488: CALL_OW 244
// hiddencamera ( 107 , 29 , ar ) ;
7492: LD_INT 107
7494: PPUSH
7495: LD_INT 29
7497: PPUSH
7498: LD_EXP 3
7502: PPUSH
7503: CALL_OW 244
// defid = mcdefend ( 100 , regid , [ ars3 , ars4 , ars5 , arm1 , arm4 , arm5 , arm6 ] , [ [ mc_area_dont_leave , area4reg ] ] ) ;
7507: LD_ADDR_EXP 152
7511: PUSH
7512: LD_INT 100
7514: PPUSH
7515: LD_EXP 151
7519: PPUSH
7520: LD_EXP 9
7524: PUSH
7525: LD_EXP 10
7529: PUSH
7530: LD_EXP 11
7534: PUSH
7535: LD_EXP 136
7539: PUSH
7540: LD_EXP 142
7544: PUSH
7545: LD_EXP 144
7549: PUSH
7550: LD_EXP 146
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PPUSH
7564: LD_INT 2
7566: PUSH
7567: LD_INT 25
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: EMPTY
7575: LIST
7576: PPUSH
7577: CALL_OW 401
7581: ST_TO_ADDR
// end ;
7582: PPOPN 1
7584: END
// export burlakmet ; every 0 0$1 + 10 10$15 trigger filterallunits ( [ [ f_side , al ] , [ f_dist , burlak , 6 ] ] ) marked 08 do
7585: LD_INT 22
7587: PUSH
7588: LD_EXP 1
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: LD_INT 91
7599: PUSH
7600: LD_EXP 99
7604: PUSH
7605: LD_INT 6
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PPUSH
7617: CALL_OW 69
7621: IFFALSE 7651
7623: GO 7625
7625: DISABLE
// begin setside ( burlak , al ) ;
7626: LD_EXP 99
7630: PPUSH
7631: LD_EXP 1
7635: PPUSH
7636: CALL_OW 235
// burlakmet = true ;
7640: LD_ADDR_EXP 113
7644: PUSH
7645: LD_INT 1
7647: ST_TO_ADDR
// enable ( 13 ) ;
7648: LD_INT 13
7650: ENABLE_MARKED
// end ;
7651: END
// every 0 0$1 + 10 10$15 trigger getdistunits ( john , burlak ) < 11 do var tmp , tmp2 ;
7652: LD_EXP 80
7656: PPUSH
7657: LD_EXP 99
7661: PPUSH
7662: CALL_OW 296
7666: PUSH
7667: LD_INT 11
7669: LESS
7670: IFFALSE 8312
7672: GO 7674
7674: DISABLE
7675: LD_INT 0
7677: PPUSH
7678: PPUSH
// begin disable ( 08 ) ;
7679: LD_INT 8
7681: DISABLE_MARKED
// setside ( burlak , al ) ;
7682: LD_EXP 99
7686: PPUSH
7687: LD_EXP 1
7691: PPUSH
7692: CALL_OW 235
// burlakmet = true ;
7696: LD_ADDR_EXP 113
7700: PUSH
7701: LD_INT 1
7703: ST_TO_ADDR
// enable ( 13 ) ;
7704: LD_INT 13
7706: ENABLE_MARKED
// tmp = filterallunits ( [ [ f_side , al ] , [ f_ok ] , f_not , [ f_nation , nation_nature ] ] ) ;
7707: LD_ADDR_VAR 0 1
7711: PUSH
7712: LD_INT 22
7714: PUSH
7715: LD_EXP 1
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 50
7726: PUSH
7727: EMPTY
7728: LIST
7729: PUSH
7730: LD_INT 3
7732: PUSH
7733: LD_INT 23
7735: PUSH
7736: LD_INT 0
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: PPUSH
7749: CALL_OW 69
7753: ST_TO_ADDR
// tmp2 = unitfilter ( tmp , [ [ f_class , class_scientistic ] ] ) ;
7754: LD_ADDR_VAR 0 2
7758: PUSH
7759: LD_VAR 0 1
7763: PPUSH
7764: LD_INT 25
7766: PUSH
7767: LD_INT 4
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: PPUSH
7777: CALL_OW 72
7781: ST_TO_ADDR
// dialogueon ;
7782: CALL_OW 6
// say ( john , D11-JMM-1 ) ;
7786: LD_EXP 80
7790: PPUSH
7791: LD_STRING D11-JMM-1
7793: PPUSH
7794: CALL_OW 88
// say ( burlak , D11-Bur-1 ) ;
7798: LD_EXP 99
7802: PPUSH
7803: LD_STRING D11-Bur-1
7805: PPUSH
7806: CALL_OW 88
// say ( john , D11-JMM-2 ) ;
7810: LD_EXP 80
7814: PPUSH
7815: LD_STRING D11-JMM-2
7817: PPUSH
7818: CALL_OW 88
// say ( burlak , D11-Bur-2 ) ;
7822: LD_EXP 99
7826: PPUSH
7827: LD_STRING D11-Bur-2
7829: PPUSH
7830: CALL_OW 88
// say ( john , D11-JMM-3 ) ;
7834: LD_EXP 80
7838: PPUSH
7839: LD_STRING D11-JMM-3
7841: PPUSH
7842: CALL_OW 88
// say ( burlak , D11-Bur-3 ) ;
7846: LD_EXP 99
7850: PPUSH
7851: LD_STRING D11-Bur-3
7853: PPUSH
7854: CALL_OW 88
// say ( john , D11-JMM-4 ) ;
7858: LD_EXP 80
7862: PPUSH
7863: LD_STRING D11-JMM-4
7865: PPUSH
7866: CALL_OW 88
// dialogueoff ;
7870: CALL_OW 7
// changemissionobjectives ( M3 ) ;
7874: LD_STRING M3
7876: PPUSH
7877: CALL_OW 337
// dialogueon ;
7881: CALL_OW 6
// if ar_base_spotted then
7885: LD_EXP 153
7889: IFFALSE 7905
// say ( burlak , D12-Bur-1 ) else
7891: LD_EXP 99
7895: PPUSH
7896: LD_STRING D12-Bur-1
7898: PPUSH
7899: CALL_OW 88
7903: GO 7942
// begin disable ( 06 ) ;
7905: LD_INT 6
7907: DISABLE_MARKED
// say ( burlak , D12-Bur-1a ) ;
7908: LD_EXP 99
7912: PPUSH
7913: LD_STRING D12-Bur-1a
7915: PPUSH
7916: CALL_OW 88
// revealfogarea ( al , arab_base_reveal ) ;
7920: LD_EXP 1
7924: PPUSH
7925: LD_INT 11
7927: PPUSH
7928: CALL_OW 332
// centernowonunits ( [ abduluv ] ) ;
7932: LD_INT 22
7934: PUSH
7935: EMPTY
7936: LIST
7937: PPUSH
7938: CALL_OW 87
// end ; say ( burlak , D12-Bur-1b ) ;
7942: LD_EXP 99
7946: PPUSH
7947: LD_STRING D12-Bur-1b
7949: PPUSH
7950: CALL_OW 88
// say ( john , D12-JMM-1 ) ;
7954: LD_EXP 80
7958: PPUSH
7959: LD_STRING D12-JMM-1
7961: PPUSH
7962: CALL_OW 88
// say ( burlak , D12-Bur-2 ) ;
7966: LD_EXP 99
7970: PPUSH
7971: LD_STRING D12-Bur-2
7973: PPUSH
7974: CALL_OW 88
// if isok ( roth ) then
7978: LD_EXP 81
7982: PPUSH
7983: CALL_OW 302
7987: IFFALSE 8003
// say ( roth , D12-Roth-2 ) else
7989: LD_EXP 81
7993: PPUSH
7994: LD_STRING D12-Roth-2
7996: PPUSH
7997: CALL_OW 88
8001: GO 8049
// if tmp2 then
8003: LD_VAR 0 2
8007: IFFALSE 8027
// say ( tmp2 [ 1 ] , D12-RSci1-2 ) else
8009: LD_VAR 0 2
8013: PUSH
8014: LD_INT 1
8016: ARRAY
8017: PPUSH
8018: LD_STRING D12-RSci1-2
8020: PPUSH
8021: CALL_OW 88
8025: GO 8049
// if tmp then
8027: LD_VAR 0 1
8031: IFFALSE 8049
// say ( tmp [ 1 ] , D12-RSci1-2 ) ;
8033: LD_VAR 0 1
8037: PUSH
8038: LD_INT 1
8040: ARRAY
8041: PPUSH
8042: LD_STRING D12-RSci1-2
8044: PPUSH
8045: CALL_OW 88
// say ( john , D12-JMM-2 ) ;
8049: LD_EXP 80
8053: PPUSH
8054: LD_STRING D12-JMM-2
8056: PPUSH
8057: CALL_OW 88
// say ( burlak , D12-Bur-3 ) ;
8061: LD_EXP 99
8065: PPUSH
8066: LD_STRING D12-Bur-3
8068: PPUSH
8069: CALL_OW 88
// say ( john , D12-JMM-3 ) ;
8073: LD_EXP 80
8077: PPUSH
8078: LD_STRING D12-JMM-3
8080: PPUSH
8081: CALL_OW 88
// say ( burlak , D12-Bur-4 ) ;
8085: LD_EXP 99
8089: PPUSH
8090: LD_STRING D12-Bur-4
8092: PPUSH
8093: CALL_OW 88
// dialogueoff ;
8097: CALL_OW 7
// case query ( QBase ) of 1 :
8101: LD_STRING QBase
8103: PPUSH
8104: CALL_OW 97
8108: PUSH
8109: LD_INT 1
8111: DOUBLE
8112: EQUAL
8113: IFTRUE 8117
8115: GO 8274
8117: POP
// begin dialogueon ;
8118: CALL_OW 6
// say ( john , D13a-JMM-1 ) ;
8122: LD_EXP 80
8126: PPUSH
8127: LD_STRING D13a-JMM-1
8129: PPUSH
8130: CALL_OW 88
// say ( burlak , D13a-Bur-1 ) ;
8134: LD_EXP 99
8138: PPUSH
8139: LD_STRING D13a-Bur-1
8141: PPUSH
8142: CALL_OW 88
// if isok ( roth ) then
8146: LD_EXP 81
8150: PPUSH
8151: CALL_OW 302
8155: IFFALSE 8171
// say ( roth , D13a-Roth-1 ) else
8157: LD_EXP 81
8161: PPUSH
8162: LD_STRING D13a-Roth-1
8164: PPUSH
8165: CALL_OW 88
8169: GO 8217
// if tmp2 then
8171: LD_VAR 0 2
8175: IFFALSE 8195
// say ( tmp2 [ 1 ] , D13a-RSci1-1 ) else
8177: LD_VAR 0 2
8181: PUSH
8182: LD_INT 1
8184: ARRAY
8185: PPUSH
8186: LD_STRING D13a-RSci1-1
8188: PPUSH
8189: CALL_OW 88
8193: GO 8217
// if tmp then
8195: LD_VAR 0 1
8199: IFFALSE 8217
// say ( tmp [ 1 ] , D13a-RSci1-1 ) ;
8201: LD_VAR 0 1
8205: PUSH
8206: LD_INT 1
8208: ARRAY
8209: PPUSH
8210: LD_STRING D13a-RSci1-1
8212: PPUSH
8213: CALL_OW 88
// say ( john , D13a-JMM-2 ) ;
8217: LD_EXP 80
8221: PPUSH
8222: LD_STRING D13a-JMM-2
8224: PPUSH
8225: CALL_OW 88
// dialogueoff ;
8229: CALL_OW 7
// case query ( QBaseAgain ) of 1 :
8233: LD_STRING QBaseAgain
8235: PPUSH
8236: CALL_OW 97
8240: PUSH
8241: LD_INT 1
8243: DOUBLE
8244: EQUAL
8245: IFTRUE 8249
8247: GO 8256
8249: POP
// pokec1 ; 2 :
8250: CALL 8315 0 0
8254: GO 8272
8256: LD_INT 2
8258: DOUBLE
8259: EQUAL
8260: IFTRUE 8264
8262: GO 8271
8264: POP
// pokec2 ; end ;
8265: CALL 8426 0 0
8269: GO 8272
8271: POP
// end ; 2 :
8272: GO 8305
8274: LD_INT 2
8276: DOUBLE
8277: EQUAL
8278: IFTRUE 8282
8280: GO 8289
8282: POP
// pokec1 ; 3 :
8283: CALL 8315 0 0
8287: GO 8305
8289: LD_INT 3
8291: DOUBLE
8292: EQUAL
8293: IFTRUE 8297
8295: GO 8304
8297: POP
// pokec2 ; end ;
8298: CALL 8426 0 0
8302: GO 8305
8304: POP
// changemissionobjectives ( M4 ) ;
8305: LD_STRING M4
8307: PPUSH
8308: CALL_OW 337
// end ;
8312: PPOPN 2
8314: END
// export vyjednavalo_se ; function pokec1 ; begin
8315: LD_INT 0
8317: PPUSH
// dialogueon ;
8318: CALL_OW 6
// say ( john , D13b-JMM-1 ) ;
8322: LD_EXP 80
8326: PPUSH
8327: LD_STRING D13b-JMM-1
8329: PPUSH
8330: CALL_OW 88
// say ( burlak , D13b-Bur-1 ) ;
8334: LD_EXP 99
8338: PPUSH
8339: LD_STRING D13b-Bur-1
8341: PPUSH
8342: CALL_OW 88
// say ( john , D13b-JMM-2 ) ;
8346: LD_EXP 80
8350: PPUSH
8351: LD_STRING D13b-JMM-2
8353: PPUSH
8354: CALL_OW 88
// sayradio ( abdul , D13b-Abd-2 ) ;
8358: LD_EXP 134
8362: PPUSH
8363: LD_STRING D13b-Abd-2
8365: PPUSH
8366: CALL_OW 94
// say ( john , D13b-JMM-3 ) ;
8370: LD_EXP 80
8374: PPUSH
8375: LD_STRING D13b-JMM-3
8377: PPUSH
8378: CALL_OW 88
// sayradio ( abdul , D13b-Abd-3 ) ;
8382: LD_EXP 134
8386: PPUSH
8387: LD_STRING D13b-Abd-3
8389: PPUSH
8390: CALL_OW 94
// say ( john , D13b-JMM-4 ) ;
8394: LD_EXP 80
8398: PPUSH
8399: LD_STRING D13b-JMM-4
8401: PPUSH
8402: CALL_OW 88
// dialogueoff ;
8406: CALL_OW 7
// vyjednavalo_se = true ;
8410: LD_ADDR_EXP 114
8414: PUSH
8415: LD_INT 1
8417: ST_TO_ADDR
// enable ( 07 ) ;
8418: LD_INT 7
8420: ENABLE_MARKED
// end ;
8421: LD_VAR 0 1
8425: RET
// function pokec2 ; begin
8426: LD_INT 0
8428: PPUSH
// dialogueon ;
8429: CALL_OW 6
// say ( john , D13c-JMM-1 ) ;
8433: LD_EXP 80
8437: PPUSH
8438: LD_STRING D13c-JMM-1
8440: PPUSH
8441: CALL_OW 88
// say ( burlak , D13c-Bur-1 ) ;
8445: LD_EXP 99
8449: PPUSH
8450: LD_STRING D13c-Bur-1
8452: PPUSH
8453: CALL_OW 88
// dialogueoff ;
8457: CALL_OW 7
// end ; end_of_file
8461: LD_VAR 0 1
8465: RET
// export rusove , rusoveu ; export ruv0 , ruv1 , ruv2 , ruv3 , ruv4 , ruv5 , ruv6 , ruv7 , ruv8 ; export rumech1 , rumech2 , rumech3 , rumech4 , rumech5 , rumech6 , rumech7 , rumech8 ; every 2 2$30 do
8466: GO 8468
8468: DISABLE
// begin uc_side = rus ;
8469: LD_ADDR_OWVAR 20
8473: PUSH
8474: LD_EXP 2
8478: ST_TO_ADDR
// uc_nation = nation_russian ;
8479: LD_ADDR_OWVAR 21
8483: PUSH
8484: LD_INT 3
8486: ST_TO_ADDR
// vc_engine = engine_siberite ;
8487: LD_ADDR_OWVAR 39
8491: PUSH
8492: LD_INT 3
8494: ST_TO_ADDR
// vc_control = control_computer ;
8495: LD_ADDR_OWVAR 38
8499: PUSH
8500: LD_INT 3
8502: ST_TO_ADDR
// vc_chassis = ruv0_ch ;
8503: LD_ADDR_OWVAR 37
8507: PUSH
8508: LD_EXP 44
8512: ST_TO_ADDR
// vc_weapon = ruv0_wp ;
8513: LD_ADDR_OWVAR 40
8517: PUSH
8518: LD_EXP 45
8522: ST_TO_ADDR
// ruv0 = createvehicle ;
8523: LD_ADDR_EXP 117
8527: PUSH
8528: CALL_OW 45
8532: ST_TO_ADDR
// setdir ( ruv0 , 0 ) ;
8533: LD_EXP 117
8537: PPUSH
8538: LD_INT 0
8540: PPUSH
8541: CALL_OW 233
// placeunitxy ( ruv0 , 70 , 96 , false ) ;
8545: LD_EXP 117
8549: PPUSH
8550: LD_INT 70
8552: PPUSH
8553: LD_INT 96
8555: PPUSH
8556: LD_INT 0
8558: PPUSH
8559: CALL_OW 48
// commovexy ( ruv0 , 60 , 48 ) ;
8563: LD_EXP 117
8567: PPUSH
8568: LD_INT 60
8570: PPUSH
8571: LD_INT 48
8573: PPUSH
8574: CALL_OW 111
// addcommovexy ( ruv0 , 70 , 97 ) ;
8578: LD_EXP 117
8582: PPUSH
8583: LD_INT 70
8585: PPUSH
8586: LD_INT 97
8588: PPUSH
8589: CALL_OW 171
// end ;
8593: END
// every 0 0$1 + 2 2$35 trigger isinarea ( ruv0 , south_exit_0 ) do
8594: LD_EXP 117
8598: PPUSH
8599: LD_INT 3
8601: PPUSH
8602: CALL_OW 308
8606: IFFALSE 8628
8608: GO 8610
8610: DISABLE
// begin destroyunit ( ruv0 ) ;
8611: LD_EXP 117
8615: PPUSH
8616: CALL_OW 65
// ruv0 = 0 ;
8620: LD_ADDR_EXP 117
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// end ;
8628: END
// var erasers , cile ; every 0 0$10 + 2 2$30 marked 11 do var pom ;
8629: GO 8631
8631: DISABLE
8632: LD_INT 0
8634: PPUSH
// begin cile = filterunitsexceptarea ( stred , [ [ f_side , al ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] ] ] ) ;
8635: LD_ADDR_LOC 7
8639: PUSH
8640: LD_INT 2
8642: PPUSH
8643: LD_INT 22
8645: PUSH
8646: LD_EXP 1
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 2
8657: PUSH
8658: LD_INT 30
8660: PUSH
8661: LD_INT 0
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 30
8670: PUSH
8671: LD_INT 31
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 30
8680: PUSH
8681: LD_INT 32
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 30
8690: PUSH
8691: LD_INT 33
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: LD_INT 30
8700: PUSH
8701: LD_INT 4
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PPUSH
8720: CALL_OW 71
8724: ST_TO_ADDR
// erasers = [ ] ;
8725: LD_ADDR_LOC 6
8729: PUSH
8730: EMPTY
8731: ST_TO_ADDR
// if not cile then
8732: LD_LOC 7
8736: NOT
8737: IFFALSE 8742
// begin enable ;
8739: ENABLE
// exit ;
8740: GO 9031
// end ; uc_side = rus ;
8742: LD_ADDR_OWVAR 20
8746: PUSH
8747: LD_EXP 2
8751: ST_TO_ADDR
// uc_nation = nation_russian ;
8752: LD_ADDR_OWVAR 21
8756: PUSH
8757: LD_INT 3
8759: ST_TO_ADDR
// vc_engine = engine_siberite ;
8760: LD_ADDR_OWVAR 39
8764: PUSH
8765: LD_INT 3
8767: ST_TO_ADDR
// vc_control = control_computer ;
8768: LD_ADDR_OWVAR 38
8772: PUSH
8773: LD_INT 3
8775: ST_TO_ADDR
// vc_chassis = ru_heavy_wheeled ;
8776: LD_ADDR_OWVAR 37
8780: PUSH
8781: LD_INT 23
8783: ST_TO_ADDR
// vc_weapon = ru_heavy_gun ;
8784: LD_ADDR_OWVAR 40
8788: PUSH
8789: LD_INT 46
8791: ST_TO_ADDR
// pom = createvehicle ;
8792: LD_ADDR_VAR 0 1
8796: PUSH
8797: CALL_OW 45
8801: ST_TO_ADDR
// setdir ( pom , 0 ) ;
8802: LD_VAR 0 1
8806: PPUSH
8807: LD_INT 0
8809: PPUSH
8810: CALL_OW 233
// placeunitxyr ( pom , 113 , 96 , 5 , false ) ;
8814: LD_VAR 0 1
8818: PPUSH
8819: LD_INT 113
8821: PPUSH
8822: LD_INT 96
8824: PPUSH
8825: LD_INT 5
8827: PPUSH
8828: LD_INT 0
8830: PPUSH
8831: CALL_OW 50
// erasers = erasers ^ [ pom ] ;
8835: LD_ADDR_LOC 6
8839: PUSH
8840: LD_LOC 6
8844: PUSH
8845: LD_VAR 0 1
8849: PUSH
8850: EMPTY
8851: LIST
8852: ADD
8853: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8854: LD_ADDR_OWVAR 37
8858: PUSH
8859: LD_INT 21
8861: ST_TO_ADDR
// vc_weapon = ru_rocket_launcher ;
8862: LD_ADDR_OWVAR 40
8866: PUSH
8867: LD_INT 45
8869: ST_TO_ADDR
// pom = createvehicle ;
8870: LD_ADDR_VAR 0 1
8874: PUSH
8875: CALL_OW 45
8879: ST_TO_ADDR
// setdir ( pom , 0 ) ;
8880: LD_VAR 0 1
8884: PPUSH
8885: LD_INT 0
8887: PPUSH
8888: CALL_OW 233
// placeunitxyr ( pom , 113 , 96 , 5 , false ) ;
8892: LD_VAR 0 1
8896: PPUSH
8897: LD_INT 113
8899: PPUSH
8900: LD_INT 96
8902: PPUSH
8903: LD_INT 5
8905: PPUSH
8906: LD_INT 0
8908: PPUSH
8909: CALL_OW 50
// erasers = erasers ^ [ pom ] ;
8913: LD_ADDR_LOC 6
8917: PUSH
8918: LD_LOC 6
8922: PUSH
8923: LD_VAR 0 1
8927: PUSH
8928: EMPTY
8929: LIST
8930: ADD
8931: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8932: LD_ADDR_OWVAR 37
8936: PUSH
8937: LD_INT 21
8939: ST_TO_ADDR
// vc_weapon = ru_rocket_launcher ;
8940: LD_ADDR_OWVAR 40
8944: PUSH
8945: LD_INT 45
8947: ST_TO_ADDR
// pom = createvehicle ;
8948: LD_ADDR_VAR 0 1
8952: PUSH
8953: CALL_OW 45
8957: ST_TO_ADDR
// setdir ( pom , 0 ) ;
8958: LD_VAR 0 1
8962: PPUSH
8963: LD_INT 0
8965: PPUSH
8966: CALL_OW 233
// placeunitxyr ( pom , 113 , 96 , 5 , false ) ;
8970: LD_VAR 0 1
8974: PPUSH
8975: LD_INT 113
8977: PPUSH
8978: LD_INT 96
8980: PPUSH
8981: LD_INT 5
8983: PPUSH
8984: LD_INT 0
8986: PPUSH
8987: CALL_OW 50
// erasers = erasers ^ [ pom ] ;
8991: LD_ADDR_LOC 6
8995: PUSH
8996: LD_LOC 6
9000: PUSH
9001: LD_VAR 0 1
9005: PUSH
9006: EMPTY
9007: LIST
9008: ADD
9009: ST_TO_ADDR
// comattackunit ( erasers , cile [ 1 ] ) ;
9010: LD_LOC 6
9014: PPUSH
9015: LD_LOC 7
9019: PUSH
9020: LD_INT 1
9022: ARRAY
9023: PPUSH
9024: CALL_OW 115
// enable ( 09 ) ;
9028: LD_INT 9
9030: ENABLE_MARKED
// end ;
9031: PPOPN 1
9033: END
// every 0 0$10 marked 09 do
9034: GO 9036
9036: DISABLE
// begin erasers = unitfilter ( erasers , [ [ f_ok ] ] ) ;
9037: LD_ADDR_LOC 6
9041: PUSH
9042: LD_LOC 6
9046: PPUSH
9047: LD_INT 50
9049: PUSH
9050: EMPTY
9051: LIST
9052: PUSH
9053: EMPTY
9054: LIST
9055: PPUSH
9056: CALL_OW 72
9060: ST_TO_ADDR
// if erasers = 0 then
9061: LD_LOC 6
9065: PUSH
9066: LD_INT 0
9068: EQUAL
9069: IFFALSE 9076
// begin enable ( 11 ) ;
9071: LD_INT 11
9073: ENABLE_MARKED
// exit ;
9074: GO 9233
// end ; cile = filterunitsexceptarea ( stred , [ [ f_side , al ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
9076: LD_ADDR_LOC 7
9080: PUSH
9081: LD_INT 2
9083: PPUSH
9084: LD_INT 22
9086: PUSH
9087: LD_EXP 1
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: LD_INT 2
9098: PUSH
9099: LD_INT 30
9101: PUSH
9102: LD_INT 0
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: LD_INT 30
9111: PUSH
9112: LD_INT 1
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PUSH
9119: LD_INT 30
9121: PUSH
9122: LD_INT 31
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PUSH
9129: LD_INT 30
9131: PUSH
9132: LD_INT 32
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: LD_INT 33
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 30
9151: PUSH
9152: LD_INT 4
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: LD_INT 30
9161: PUSH
9162: LD_INT 5
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: PPUSH
9183: CALL_OW 71
9187: ST_TO_ADDR
// if cile then
9188: LD_LOC 7
9192: IFFALSE 9215
// begin comattackunit ( erasers , cile [ 1 ] ) ;
9194: LD_LOC 6
9198: PPUSH
9199: LD_LOC 7
9203: PUSH
9204: LD_INT 1
9206: ARRAY
9207: PPUSH
9208: CALL_OW 115
// enable ;
9212: ENABLE
// end else
9213: GO 9233
// begin commovexy ( erasers , 79 , 2 ) ;
9215: LD_LOC 6
9219: PPUSH
9220: LD_INT 79
9222: PPUSH
9223: LD_INT 2
9225: PPUSH
9226: CALL_OW 111
// enable ( 10 ) ;
9230: LD_INT 10
9232: ENABLE_MARKED
// end ; end ;
9233: END
// every 0 0$0.3 trigger isinareaex ( erasers , north_exit_0 ) marked 10 do
9234: LD_LOC 6
9238: PPUSH
9239: LD_INT 9
9241: PPUSH
9242: CALL 10473 0 2
9246: IFFALSE 9280
9248: GO 9250
9250: DISABLE
// begin destroyunit ( rusinarea ) ;
9251: LD_LOC 9
9255: PPUSH
9256: CALL_OW 65
// erasers = erasers diff [ rusinarea ] ;
9260: LD_ADDR_LOC 6
9264: PUSH
9265: LD_LOC 6
9269: PUSH
9270: LD_LOC 9
9274: PUSH
9275: EMPTY
9276: LIST
9277: DIFF
9278: ST_TO_ADDR
// enable ;
9279: ENABLE
// end ;
9280: END
// var ruvzj ; every 0 0$1 marked 04 do
9281: GO 9283
9283: DISABLE
// begin uc_side = rus ;
9284: LD_ADDR_OWVAR 20
9288: PUSH
9289: LD_EXP 2
9293: ST_TO_ADDR
// uc_nation = nation_russian ;
9294: LD_ADDR_OWVAR 21
9298: PUSH
9299: LD_INT 3
9301: ST_TO_ADDR
// vc_engine = engine_siberite ;
9302: LD_ADDR_OWVAR 39
9306: PUSH
9307: LD_INT 3
9309: ST_TO_ADDR
// vc_control = control_manual ;
9310: LD_ADDR_OWVAR 38
9314: PUSH
9315: LD_INT 1
9317: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
9318: LD_ADDR_OWVAR 37
9322: PUSH
9323: LD_INT 24
9325: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
9326: LD_ADDR_OWVAR 40
9330: PUSH
9331: LD_INT 43
9333: ST_TO_ADDR
// ruvzj = createvehicle ;
9334: LD_ADDR_LOC 8
9338: PUSH
9339: CALL_OW 45
9343: ST_TO_ADDR
// setdir ( ruvzj , 0 ) ;
9344: LD_LOC 8
9348: PPUSH
9349: LD_INT 0
9351: PPUSH
9352: CALL_OW 233
// placeunitxyr ( ruvzj , 112 , 96 , 5 , false ) ;
9356: LD_LOC 8
9360: PPUSH
9361: LD_INT 112
9363: PPUSH
9364: LD_INT 96
9366: PPUSH
9367: LD_INT 5
9369: PPUSH
9370: LD_INT 0
9372: PPUSH
9373: CALL_OW 50
// preparemechanic ( sex_male , 8 ) ;
9377: LD_INT 1
9379: PPUSH
9380: LD_INT 8
9382: PPUSH
9383: CALL_OW 383
// placehumaninunit ( createhuman , ruvzj ) ;
9387: CALL_OW 44
9391: PPUSH
9392: LD_LOC 8
9396: PPUSH
9397: CALL_OW 52
// comattackunit ( ruvzj , jahoda ) ;
9401: LD_LOC 8
9405: PPUSH
9406: LD_EXP 98
9410: PPUSH
9411: CALL_OW 115
// end ;
9415: END
// on unitgoestored ( un ) do if un = jahoda then
9416: LD_VAR 0 1
9420: PUSH
9421: LD_EXP 98
9425: EQUAL
9426: IFFALSE 9442
// comattackunit ( ruvzj , jahoda ) ;
9428: LD_LOC 8
9432: PPUSH
9433: LD_EXP 98
9437: PPUSH
9438: CALL_OW 115
9442: PPOPN 1
9444: END
// on unitdestroyed ( un ) do if un = jahoda then
9445: LD_VAR 0 1
9449: PUSH
9450: LD_EXP 98
9454: EQUAL
9455: IFFALSE 9477
// begin commovexy ( ruvzj , 112 , 96 ) ;
9457: LD_LOC 8
9461: PPUSH
9462: LD_INT 112
9464: PPUSH
9465: LD_INT 96
9467: PPUSH
9468: CALL_OW 111
// enable ( 12 ) ;
9472: LD_INT 12
9474: ENABLE_MARKED
// end else
9475: GO 9646
// if un = john then
9477: LD_VAR 0 1
9481: PUSH
9482: LD_EXP 80
9486: EQUAL
9487: IFFALSE 9498
// youlost ( JMM ) else
9489: LD_STRING JMM
9491: PPUSH
9492: CALL_OW 104
9496: GO 9646
// if ( un = burlak ) and burlakmet then
9498: LD_VAR 0 1
9502: PUSH
9503: LD_EXP 99
9507: EQUAL
9508: PUSH
9509: LD_EXP 113
9513: AND
9514: IFFALSE 9525
// youlost ( Burlak ) else
9516: LD_STRING Burlak
9518: PPUSH
9519: CALL_OW 104
9523: GO 9646
// if ( un = abdul ) and isdead ( abduluv ) then
9525: LD_VAR 0 1
9529: PUSH
9530: LD_EXP 134
9534: EQUAL
9535: PUSH
9536: LD_INT 22
9538: PPUSH
9539: CALL_OW 301
9543: AND
9544: IFFALSE 9555
// changemissionobjectives ( M4a ) else
9546: LD_STRING M4a
9548: PPUSH
9549: CALL_OW 337
9553: GO 9646
// if ( un = abduluv ) and isdead ( abdul ) then
9555: LD_VAR 0 1
9559: PUSH
9560: LD_INT 22
9562: EQUAL
9563: PUSH
9564: LD_EXP 134
9568: PPUSH
9569: CALL_OW 301
9573: AND
9574: IFFALSE 9585
// changemissionobjectives ( M4a ) else
9576: LD_STRING M4a
9578: PPUSH
9579: CALL_OW 337
9583: GO 9646
// if ( un = nakladak ) then
9585: LD_VAR 0 1
9589: PUSH
9590: LD_INT 23
9592: EQUAL
9593: IFFALSE 9608
// begin artef_out = true ;
9595: LD_ADDR_EXP 78
9599: PUSH
9600: LD_INT 1
9602: ST_TO_ADDR
// enable ( 15 ) ;
9603: LD_INT 15
9605: ENABLE_MARKED
// end else
9606: GO 9646
// if ( un = arbarr ) then
9608: LD_VAR 0 1
9612: PUSH
9613: LD_INT 2
9615: EQUAL
9616: IFFALSE 9628
// base_out = true else
9618: LD_ADDR_EXP 79
9622: PUSH
9623: LD_INT 1
9625: ST_TO_ADDR
9626: GO 9646
// if ( un = ar_depot ) then
9628: LD_VAR 0 1
9632: PUSH
9633: LD_INT 1
9635: EQUAL
9636: IFFALSE 9646
// base_out = true ;
9638: LD_ADDR_EXP 79
9642: PUSH
9643: LD_INT 1
9645: ST_TO_ADDR
9646: PPOPN 1
9648: END
// every 0 0$1 trigger isinarea ( ruvzj , south_exit_2 ) marked 12 do
9649: LD_LOC 8
9653: PPUSH
9654: LD_INT 10
9656: PPUSH
9657: CALL_OW 308
9661: IFFALSE 9683
9663: GO 9665
9665: DISABLE
// begin destroyunit ( ruvzj ) ;
9666: LD_LOC 8
9670: PPUSH
9671: CALL_OW 65
// ruvzj = 0 ;
9675: LD_ADDR_LOC 8
9679: PUSH
9680: LD_INT 0
9682: ST_TO_ADDR
// end ;
9683: END
// every 0 0$15 + 7 7$45 do var tmp ;
9684: GO 9686
9686: DISABLE
9687: LD_INT 0
9689: PPUSH
// begin delay = delay - 0 0$15 ;
9690: LD_ADDR_EXP 72
9694: PUSH
9695: LD_EXP 72
9699: PUSH
9700: LD_INT 525
9702: MINUS
9703: ST_TO_ADDR
// if delay then
9704: LD_EXP 72
9708: IFFALSE 9713
// begin enable ;
9710: ENABLE
// exit ;
9711: GO 10193
// end ; case difficulty of 1 :
9713: LD_OWVAR 67
9717: PUSH
9718: LD_INT 1
9720: DOUBLE
9721: EQUAL
9722: IFTRUE 9726
9724: GO 9737
9726: POP
// time2wait = 3 3$00 ; 2 :
9727: LD_ADDR_EXP 71
9731: PUSH
9732: LD_INT 6300
9734: ST_TO_ADDR
9735: GO 9776
9737: LD_INT 2
9739: DOUBLE
9740: EQUAL
9741: IFTRUE 9745
9743: GO 9756
9745: POP
// time2wait = 1 1$30 ; 3 :
9746: LD_ADDR_EXP 71
9750: PUSH
9751: LD_INT 3150
9753: ST_TO_ADDR
9754: GO 9776
9756: LD_INT 3
9758: DOUBLE
9759: EQUAL
9760: IFTRUE 9764
9762: GO 9775
9764: POP
// time2wait = 0 0$30 ; end ;
9765: LD_ADDR_EXP 71
9769: PUSH
9770: LD_INT 1050
9772: ST_TO_ADDR
9773: GO 9776
9775: POP
// delay = time2wait ;
9776: LD_ADDR_EXP 72
9780: PUSH
9781: LD_EXP 71
9785: ST_TO_ADDR
// uc_side = rus ;
9786: LD_ADDR_OWVAR 20
9790: PUSH
9791: LD_EXP 2
9795: ST_TO_ADDR
// uc_nation = nation_russian ;
9796: LD_ADDR_OWVAR 21
9800: PUSH
9801: LD_INT 3
9803: ST_TO_ADDR
// vc_engine = engine_siberite ;
9804: LD_ADDR_OWVAR 39
9808: PUSH
9809: LD_INT 3
9811: ST_TO_ADDR
// vc_control = control_manual ;
9812: LD_ADDR_OWVAR 38
9816: PUSH
9817: LD_INT 1
9819: ST_TO_ADDR
// vc_chassis = ruv1_ch ;
9820: LD_ADDR_OWVAR 37
9824: PUSH
9825: LD_EXP 46
9829: ST_TO_ADDR
// vc_weapon = ruv1_wp ;
9830: LD_ADDR_OWVAR 40
9834: PUSH
9835: LD_EXP 47
9839: ST_TO_ADDR
// ruv1 = createvehicle ;
9840: LD_ADDR_EXP 118
9844: PUSH
9845: CALL_OW 45
9849: ST_TO_ADDR
// setdir ( ruv1 , 0 ) ;
9850: LD_EXP 118
9854: PPUSH
9855: LD_INT 0
9857: PPUSH
9858: CALL_OW 233
// placeunitxy ( ruv1 , 70 , 95 , false ) ;
9862: LD_EXP 118
9866: PPUSH
9867: LD_INT 70
9869: PPUSH
9870: LD_INT 95
9872: PPUSH
9873: LD_INT 0
9875: PPUSH
9876: CALL_OW 48
// preparemechanic ( sex_male , rumech1_sk ) ;
9880: LD_INT 1
9882: PPUSH
9883: LD_EXP 62
9887: PPUSH
9888: CALL_OW 383
// rumech1 = createhuman ;
9892: LD_ADDR_EXP 126
9896: PUSH
9897: CALL_OW 44
9901: ST_TO_ADDR
// placehumaninunit ( rumech1 , ruv1 ) ;
9902: LD_EXP 126
9906: PPUSH
9907: LD_EXP 118
9911: PPUSH
9912: CALL_OW 52
// vc_chassis = ruv2_ch ;
9916: LD_ADDR_OWVAR 37
9920: PUSH
9921: LD_EXP 48
9925: ST_TO_ADDR
// vc_weapon = ruv2_wp ;
9926: LD_ADDR_OWVAR 40
9930: PUSH
9931: LD_EXP 49
9935: ST_TO_ADDR
// ruv2 = createvehicle ;
9936: LD_ADDR_EXP 119
9940: PUSH
9941: CALL_OW 45
9945: ST_TO_ADDR
// setdir ( ruv2 , 0 ) ;
9946: LD_EXP 119
9950: PPUSH
9951: LD_INT 0
9953: PPUSH
9954: CALL_OW 233
// placeunitxy ( ruv2 , 35 , 63 , false ) ;
9958: LD_EXP 119
9962: PPUSH
9963: LD_INT 35
9965: PPUSH
9966: LD_INT 63
9968: PPUSH
9969: LD_INT 0
9971: PPUSH
9972: CALL_OW 48
// preparemechanic ( sex_male , rumech2_sk ) ;
9976: LD_INT 1
9978: PPUSH
9979: LD_EXP 63
9983: PPUSH
9984: CALL_OW 383
// rumech2 = createhuman ;
9988: LD_ADDR_EXP 127
9992: PUSH
9993: CALL_OW 44
9997: ST_TO_ADDR
// placehumaninunit ( rumech2 , ruv2 ) ;
9998: LD_EXP 127
10002: PPUSH
10003: LD_EXP 119
10007: PPUSH
10008: CALL_OW 52
// vc_chassis = ruv3_ch ;
10012: LD_ADDR_OWVAR 37
10016: PUSH
10017: LD_EXP 50
10021: ST_TO_ADDR
// vc_weapon = ruv3_wp ;
10022: LD_ADDR_OWVAR 40
10026: PUSH
10027: LD_EXP 51
10031: ST_TO_ADDR
// ruv3 = createvehicle ;
10032: LD_ADDR_EXP 120
10036: PUSH
10037: CALL_OW 45
10041: ST_TO_ADDR
// setdir ( ruv3 , 0 ) ;
10042: LD_EXP 120
10046: PPUSH
10047: LD_INT 0
10049: PPUSH
10050: CALL_OW 233
// placeunitxy ( ruv3 , 99 , 95 , false ) ;
10054: LD_EXP 120
10058: PPUSH
10059: LD_INT 99
10061: PPUSH
10062: LD_INT 95
10064: PPUSH
10065: LD_INT 0
10067: PPUSH
10068: CALL_OW 48
// preparemechanic ( sex_male , rumech3_sk ) ;
10072: LD_INT 1
10074: PPUSH
10075: LD_EXP 64
10079: PPUSH
10080: CALL_OW 383
// rumech3 = createhuman ;
10084: LD_ADDR_EXP 128
10088: PUSH
10089: CALL_OW 44
10093: ST_TO_ADDR
// placehumaninunit ( rumech3 , ruv3 ) ;
10094: LD_EXP 128
10098: PPUSH
10099: LD_EXP 120
10103: PPUSH
10104: CALL_OW 52
// rusove = [ ruv1 , ruv2 , ruv3 ] ;
10108: LD_ADDR_EXP 115
10112: PUSH
10113: LD_EXP 118
10117: PUSH
10118: LD_EXP 119
10122: PUSH
10123: LD_EXP 120
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: LIST
10132: ST_TO_ADDR
// comremember ( rusove ) ;
10133: LD_EXP 115
10137: PPUSH
10138: CALL_OW 143
// commovexy ( ruv1 , 64 , 66 ) ;
10142: LD_EXP 118
10146: PPUSH
10147: LD_INT 64
10149: PPUSH
10150: LD_INT 66
10152: PPUSH
10153: CALL_OW 111
// commovexy ( ruv2 , 42 , 44 ) ;
10157: LD_EXP 119
10161: PPUSH
10162: LD_INT 42
10164: PPUSH
10165: LD_INT 44
10167: PPUSH
10168: CALL_OW 111
// commovexy ( ruv3 , 74 , 61 ) ;
10172: LD_EXP 120
10176: PPUSH
10177: LD_INT 74
10179: PPUSH
10180: LD_INT 61
10182: PPUSH
10183: CALL_OW 111
// enable ( 03 ) ;
10187: LD_INT 3
10189: ENABLE_MARKED
// enable ( 05 ) ;
10190: LD_INT 5
10192: ENABLE_MARKED
// end ;
10193: PPOPN 1
10195: END
// on destinationunreachable ( un ) do if ( un = ruv1 ) or ( un = ruv2 ) or ( un = ruv3 ) then
10196: LD_VAR 0 1
10200: PUSH
10201: LD_EXP 118
10205: EQUAL
10206: PUSH
10207: LD_VAR 0 1
10211: PUSH
10212: LD_EXP 119
10216: EQUAL
10217: OR
10218: PUSH
10219: LD_VAR 0 1
10223: PUSH
10224: LD_EXP 120
10228: EQUAL
10229: OR
10230: IFFALSE 10281
// begin effectteleport ( getx ( un ) , gety ( un ) ) ;
10232: LD_VAR 0 1
10236: PPUSH
10237: CALL_OW 250
10241: PPUSH
10242: LD_VAR 0 1
10246: PPUSH
10247: CALL_OW 251
10251: PPUSH
10252: CALL_OW 494
// comhold ( un ) ;
10256: LD_VAR 0 1
10260: PPUSH
10261: CALL_OW 140
// wait ( 50 ) ;
10265: LD_INT 50
10267: PPUSH
10268: CALL_OW 67
// destroyunit ( un ) ;
10272: LD_VAR 0 1
10276: PPUSH
10277: CALL_OW 65
// end ;
10281: PPOPN 1
10283: END
// every 0 0$0.3 + 8 8$0 trigger not hastask ( ruv1 ) marked 05 do
10284: LD_EXP 118
10288: PPUSH
10289: CALL_OW 314
10293: NOT
10294: IFFALSE 10314
10296: GO 10298
10298: DISABLE
// commovexy ( ruv1 , 60 , 48 ) ;
10299: LD_EXP 118
10303: PPUSH
10304: LD_INT 60
10306: PPUSH
10307: LD_INT 48
10309: PPUSH
10310: CALL_OW 111
10314: END
// every 0 0$0.3 + 8 8$0 trigger not hastask ( ruv2 ) marked 05 do
10315: LD_EXP 119
10319: PPUSH
10320: CALL_OW 314
10324: NOT
10325: IFFALSE 10345
10327: GO 10329
10329: DISABLE
// commovexy ( ruv2 , 56 , 49 ) ;
10330: LD_EXP 119
10334: PPUSH
10335: LD_INT 56
10337: PPUSH
10338: LD_INT 49
10340: PPUSH
10341: CALL_OW 111
10345: END
// every 0 0$0.3 + 8 8$0 trigger not hastask ( ruv3 ) marked 05 do
10346: LD_EXP 120
10350: PPUSH
10351: CALL_OW 314
10355: NOT
10356: IFFALSE 10376
10358: GO 10360
10360: DISABLE
// commovexy ( ruv3 , 62 , 50 ) ;
10361: LD_EXP 120
10365: PPUSH
10366: LD_INT 62
10368: PPUSH
10369: LD_INT 50
10371: PPUSH
10372: CALL_OW 111
10376: END
// every 0 0$0.33 do var tmp , tmp2 ;
10377: GO 10379
10379: DISABLE
10380: LD_INT 0
10382: PPUSH
10383: PPUSH
// begin tmp2 = rusove ;
10384: LD_ADDR_VAR 0 2
10388: PUSH
10389: LD_EXP 115
10393: ST_TO_ADDR
// for tmp in tmp2 do
10394: LD_ADDR_VAR 0 1
10398: PUSH
10399: LD_VAR 0 2
10403: PUSH
10404: FOR_IN
10405: IFFALSE 10467
// if getlives ( tmp ) <= hr_auta then
10407: LD_VAR 0 1
10411: PPUSH
10412: CALL_OW 256
10416: PUSH
10417: LD_EXP 70
10421: LESSEQUAL
10422: IFFALSE 10465
// begin rusove = rusove diff tmp ;
10424: LD_ADDR_EXP 115
10428: PUSH
10429: LD_EXP 115
10433: PUSH
10434: LD_VAR 0 1
10438: DIFF
10439: ST_TO_ADDR
// rusoveu = rusoveu union tmp ;
10440: LD_ADDR_EXP 116
10444: PUSH
10445: LD_EXP 116
10449: PUSH
10450: LD_VAR 0 1
10454: UNION
10455: ST_TO_ADDR
// comreturn ( tmp ) ;
10456: LD_VAR 0 1
10460: PPUSH
10461: CALL_OW 144
// end ;
10465: GO 10404
10467: POP
10468: POP
// enable ;
10469: ENABLE
// end ;
10470: PPOPN 2
10472: END
// var rusinarea ; function isinareaex ( units , area ) ; var tmp ; begin
10473: LD_INT 0
10475: PPUSH
10476: PPUSH
// result = 0 ;
10477: LD_ADDR_VAR 0 3
10481: PUSH
10482: LD_INT 0
10484: ST_TO_ADDR
// for tmp in units do
10485: LD_ADDR_VAR 0 4
10489: PUSH
10490: LD_VAR 0 1
10494: PUSH
10495: FOR_IN
10496: IFFALSE 10538
// if isinarea ( tmp , area ) then
10498: LD_VAR 0 4
10502: PPUSH
10503: LD_VAR 0 2
10507: PPUSH
10508: CALL_OW 308
10512: IFFALSE 10536
// begin result = tmp ;
10514: LD_ADDR_VAR 0 3
10518: PUSH
10519: LD_VAR 0 4
10523: ST_TO_ADDR
// rusinarea = tmp ;
10524: LD_ADDR_LOC 9
10528: PUSH
10529: LD_VAR 0 4
10533: ST_TO_ADDR
// break ;
10534: GO 10538
// end ;
10536: GO 10495
10538: POP
10539: POP
// end ;
10540: LD_VAR 0 3
10544: RET
// every 0 0$0.3 trigger isinareaex ( rusoveu , south_exit_0 ) do
10545: LD_EXP 116
10549: PPUSH
10550: LD_INT 3
10552: PPUSH
10553: CALL 10473 0 2
10557: IFFALSE 10572
10559: GO 10561
10561: DISABLE
// begin destroyunit ( rusinarea ) ;
10562: LD_LOC 9
10566: PPUSH
10567: CALL_OW 65
// enable ;
10571: ENABLE
// end ;
10572: END
// every 0 0$0.3 trigger isinareaex ( rusoveu , west_exit_0 ) do
10573: LD_EXP 116
10577: PPUSH
10578: LD_INT 4
10580: PPUSH
10581: CALL 10473 0 2
10585: IFFALSE 10600
10587: GO 10589
10589: DISABLE
// begin destroyunit ( rusinarea ) ;
10590: LD_LOC 9
10594: PPUSH
10595: CALL_OW 65
// enable ;
10599: ENABLE
// end ;
10600: END
// every 0 0$0.3 trigger isinareaex ( rusoveu , south_exit_1 ) do
10601: LD_EXP 116
10605: PPUSH
10606: LD_INT 5
10608: PPUSH
10609: CALL 10473 0 2
10613: IFFALSE 10628
10615: GO 10617
10617: DISABLE
// begin destroyunit ( rusinarea ) ;
10618: LD_LOC 9
10622: PPUSH
10623: CALL_OW 65
// enable ;
10627: ENABLE
// end ;
10628: END
// every 0 0$15 + 12 12$45 do
10629: GO 10631
10631: DISABLE
// begin delay = delay - 0 0$15 ;
10632: LD_ADDR_EXP 72
10636: PUSH
10637: LD_EXP 72
10641: PUSH
10642: LD_INT 525
10644: MINUS
10645: ST_TO_ADDR
// if delay then
10646: LD_EXP 72
10650: IFFALSE 10655
// begin enable ;
10652: ENABLE
// exit ;
10653: GO 11056
// end ; uc_side = rus ;
10655: LD_ADDR_OWVAR 20
10659: PUSH
10660: LD_EXP 2
10664: ST_TO_ADDR
// uc_nation = nation_russian ;
10665: LD_ADDR_OWVAR 21
10669: PUSH
10670: LD_INT 3
10672: ST_TO_ADDR
// vc_engine = engine_siberite ;
10673: LD_ADDR_OWVAR 39
10677: PUSH
10678: LD_INT 3
10680: ST_TO_ADDR
// vc_control = control_manual ;
10681: LD_ADDR_OWVAR 38
10685: PUSH
10686: LD_INT 1
10688: ST_TO_ADDR
// vc_chassis = ruv4_ch ;
10689: LD_ADDR_OWVAR 37
10693: PUSH
10694: LD_EXP 52
10698: ST_TO_ADDR
// vc_weapon = ruv4_wp ;
10699: LD_ADDR_OWVAR 40
10703: PUSH
10704: LD_EXP 53
10708: ST_TO_ADDR
// ruv4 = createvehicle ;
10709: LD_ADDR_EXP 121
10713: PUSH
10714: CALL_OW 45
10718: ST_TO_ADDR
// setdir ( ruv4 , 0 ) ;
10719: LD_EXP 121
10723: PPUSH
10724: LD_INT 0
10726: PPUSH
10727: CALL_OW 233
// placeunitxy ( ruv4 , 70 , 95 , false ) ;
10731: LD_EXP 121
10735: PPUSH
10736: LD_INT 70
10738: PPUSH
10739: LD_INT 95
10741: PPUSH
10742: LD_INT 0
10744: PPUSH
10745: CALL_OW 48
// preparemechanic ( sex_male , rumech4_sk ) ;
10749: LD_INT 1
10751: PPUSH
10752: LD_EXP 65
10756: PPUSH
10757: CALL_OW 383
// rumech4 = createhuman ;
10761: LD_ADDR_EXP 129
10765: PUSH
10766: CALL_OW 44
10770: ST_TO_ADDR
// placehumaninunit ( rumech4 , ruv4 ) ;
10771: LD_EXP 129
10775: PPUSH
10776: LD_EXP 121
10780: PPUSH
10781: CALL_OW 52
// vc_chassis = ruv5_ch ;
10785: LD_ADDR_OWVAR 37
10789: PUSH
10790: LD_EXP 54
10794: ST_TO_ADDR
// vc_weapon = ruv5_wp ;
10795: LD_ADDR_OWVAR 40
10799: PUSH
10800: LD_EXP 55
10804: ST_TO_ADDR
// ruv5 = createvehicle ;
10805: LD_ADDR_EXP 122
10809: PUSH
10810: CALL_OW 45
10814: ST_TO_ADDR
// setdir ( ruv5 , 0 ) ;
10815: LD_EXP 122
10819: PPUSH
10820: LD_INT 0
10822: PPUSH
10823: CALL_OW 233
// placeunitxy ( ruv5 , 35 , 63 , false ) ;
10827: LD_EXP 122
10831: PPUSH
10832: LD_INT 35
10834: PPUSH
10835: LD_INT 63
10837: PPUSH
10838: LD_INT 0
10840: PPUSH
10841: CALL_OW 48
// preparemechanic ( sex_male , rumech5_sk ) ;
10845: LD_INT 1
10847: PPUSH
10848: LD_EXP 66
10852: PPUSH
10853: CALL_OW 383
// rumech5 = createhuman ;
10857: LD_ADDR_EXP 130
10861: PUSH
10862: CALL_OW 44
10866: ST_TO_ADDR
// placehumaninunit ( rumech5 , ruv5 ) ;
10867: LD_EXP 130
10871: PPUSH
10872: LD_EXP 122
10876: PPUSH
10877: CALL_OW 52
// vc_chassis = ruv6_ch ;
10881: LD_ADDR_OWVAR 37
10885: PUSH
10886: LD_EXP 56
10890: ST_TO_ADDR
// vc_weapon = ruv6_wp ;
10891: LD_ADDR_OWVAR 40
10895: PUSH
10896: LD_EXP 57
10900: ST_TO_ADDR
// ruv6 = createvehicle ;
10901: LD_ADDR_EXP 123
10905: PUSH
10906: CALL_OW 45
10910: ST_TO_ADDR
// setdir ( ruv6 , 0 ) ;
10911: LD_EXP 123
10915: PPUSH
10916: LD_INT 0
10918: PPUSH
10919: CALL_OW 233
// placeunitxy ( ruv6 , 99 , 95 , false ) ;
10923: LD_EXP 123
10927: PPUSH
10928: LD_INT 99
10930: PPUSH
10931: LD_INT 95
10933: PPUSH
10934: LD_INT 0
10936: PPUSH
10937: CALL_OW 48
// preparemechanic ( sex_male , rumech6_sk ) ;
10941: LD_INT 1
10943: PPUSH
10944: LD_EXP 67
10948: PPUSH
10949: CALL_OW 383
// rumech6 = createhuman ;
10953: LD_ADDR_EXP 131
10957: PUSH
10958: CALL_OW 44
10962: ST_TO_ADDR
// placehumaninunit ( rumech6 , ruv6 ) ;
10963: LD_EXP 131
10967: PPUSH
10968: LD_EXP 123
10972: PPUSH
10973: CALL_OW 52
// rusove = [ ruv4 , ruv5 , ruv6 ] ;
10977: LD_ADDR_EXP 115
10981: PUSH
10982: LD_EXP 121
10986: PUSH
10987: LD_EXP 122
10991: PUSH
10992: LD_EXP 123
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: LIST
11001: ST_TO_ADDR
// comremember ( rusove ) ;
11002: LD_EXP 115
11006: PPUSH
11007: CALL_OW 143
// commovexy ( ruv4 , 61 , 56 ) ;
11011: LD_EXP 121
11015: PPUSH
11016: LD_INT 61
11018: PPUSH
11019: LD_INT 56
11021: PPUSH
11022: CALL_OW 111
// commovexy ( ruv5 , 50 , 45 ) ;
11026: LD_EXP 122
11030: PPUSH
11031: LD_INT 50
11033: PPUSH
11034: LD_INT 45
11036: PPUSH
11037: CALL_OW 111
// commovexy ( ruv6 , 69 , 56 ) ;
11041: LD_EXP 123
11045: PPUSH
11046: LD_INT 69
11048: PPUSH
11049: LD_INT 56
11051: PPUSH
11052: CALL_OW 111
// end ;
11056: END
// every 0 0$15 + 12 12$55 do
11057: GO 11059
11059: DISABLE
// begin if delay then
11060: LD_EXP 72
11064: IFFALSE 11069
// begin enable ;
11066: ENABLE
// exit ;
11067: GO 11416
// end ; uc_side = rus ;
11069: LD_ADDR_OWVAR 20
11073: PUSH
11074: LD_EXP 2
11078: ST_TO_ADDR
// uc_nation = nation_russian ;
11079: LD_ADDR_OWVAR 21
11083: PUSH
11084: LD_INT 3
11086: ST_TO_ADDR
// vc_engine = engine_siberite ;
11087: LD_ADDR_OWVAR 39
11091: PUSH
11092: LD_INT 3
11094: ST_TO_ADDR
// vc_control = control_manual ;
11095: LD_ADDR_OWVAR 38
11099: PUSH
11100: LD_INT 1
11102: ST_TO_ADDR
// if difficulty >= 2 then
11103: LD_OWVAR 67
11107: PUSH
11108: LD_INT 2
11110: GREATEREQUAL
11111: IFFALSE 11267
// begin vc_chassis = ruv7_ch ;
11113: LD_ADDR_OWVAR 37
11117: PUSH
11118: LD_EXP 58
11122: ST_TO_ADDR
// vc_weapon = ruv7_wp ;
11123: LD_ADDR_OWVAR 40
11127: PUSH
11128: LD_EXP 59
11132: ST_TO_ADDR
// ruv7 = createvehicle ;
11133: LD_ADDR_EXP 124
11137: PUSH
11138: CALL_OW 45
11142: ST_TO_ADDR
// setdir ( ruv7 , 0 ) ;
11143: LD_EXP 124
11147: PPUSH
11148: LD_INT 0
11150: PPUSH
11151: CALL_OW 233
// placeunitxy ( ruv7 , 99 , 95 , false ) ;
11155: LD_EXP 124
11159: PPUSH
11160: LD_INT 99
11162: PPUSH
11163: LD_INT 95
11165: PPUSH
11166: LD_INT 0
11168: PPUSH
11169: CALL_OW 48
// preparemechanic ( sex_male , rumech7_sk ) ;
11173: LD_INT 1
11175: PPUSH
11176: LD_EXP 68
11180: PPUSH
11181: CALL_OW 383
// rumech7 = createhuman ;
11185: LD_ADDR_EXP 132
11189: PUSH
11190: CALL_OW 44
11194: ST_TO_ADDR
// placehumaninunit ( rumech7 , ruv7 ) ;
11195: LD_EXP 132
11199: PPUSH
11200: LD_EXP 124
11204: PPUSH
11205: CALL_OW 52
// rusove = rusove ^ [ ruv7 ] ;
11209: LD_ADDR_EXP 115
11213: PUSH
11214: LD_EXP 115
11218: PUSH
11219: LD_EXP 124
11223: PUSH
11224: EMPTY
11225: LIST
11226: ADD
11227: ST_TO_ADDR
// comremember ( ruv7 ) ;
11228: LD_EXP 124
11232: PPUSH
11233: CALL_OW 143
// commovexy ( ruv7 , 97 , 55 ) ;
11237: LD_EXP 124
11241: PPUSH
11242: LD_INT 97
11244: PPUSH
11245: LD_INT 55
11247: PPUSH
11248: CALL_OW 111
// addcommovexy ( ruv7 , 67 , 50 ) ;
11252: LD_EXP 124
11256: PPUSH
11257: LD_INT 67
11259: PPUSH
11260: LD_INT 50
11262: PPUSH
11263: CALL_OW 171
// end ; if difficulty > 2 then
11267: LD_OWVAR 67
11271: PUSH
11272: LD_INT 2
11274: GREATER
11275: IFFALSE 11416
// begin vc_chassis = ruv8_ch ;
11277: LD_ADDR_OWVAR 37
11281: PUSH
11282: LD_EXP 60
11286: ST_TO_ADDR
// vc_weapon = ruv8_wp ;
11287: LD_ADDR_OWVAR 40
11291: PUSH
11292: LD_EXP 61
11296: ST_TO_ADDR
// ruv8 = createvehicle ;
11297: LD_ADDR_EXP 125
11301: PUSH
11302: CALL_OW 45
11306: ST_TO_ADDR
// setdir ( ruv8 , 0 ) ;
11307: LD_EXP 125
11311: PPUSH
11312: LD_INT 0
11314: PPUSH
11315: CALL_OW 233
// placeunitxy ( ruv8 , 70 , 95 , false ) ;
11319: LD_EXP 125
11323: PPUSH
11324: LD_INT 70
11326: PPUSH
11327: LD_INT 95
11329: PPUSH
11330: LD_INT 0
11332: PPUSH
11333: CALL_OW 48
// preparemechanic ( sex_male , rumech8_sk ) ;
11337: LD_INT 1
11339: PPUSH
11340: LD_EXP 69
11344: PPUSH
11345: CALL_OW 383
// rumech8 = createhuman ;
11349: LD_ADDR_EXP 133
11353: PUSH
11354: CALL_OW 44
11358: ST_TO_ADDR
// placehumaninunit ( rumech8 , ruv8 ) ;
11359: LD_EXP 133
11363: PPUSH
11364: LD_EXP 125
11368: PPUSH
11369: CALL_OW 52
// rusove = rusove ^ [ ruv8 ] ;
11373: LD_ADDR_EXP 115
11377: PUSH
11378: LD_EXP 115
11382: PUSH
11383: LD_EXP 125
11387: PUSH
11388: EMPTY
11389: LIST
11390: ADD
11391: ST_TO_ADDR
// comremember ( ruv8 ) ;
11392: LD_EXP 125
11396: PPUSH
11397: CALL_OW 143
// commovexy ( ruv8 , 61 , 56 ) ;
11401: LD_EXP 125
11405: PPUSH
11406: LD_INT 61
11408: PPUSH
11409: LD_INT 56
11411: PPUSH
11412: CALL_OW 111
// end ; end ; end_of_file
11416: END
// export abdul ; export arv1 , arm1 , arv2 , arm2 , arv3 , arm3 , arv4 , arm4 , arv5 , arm5 , arv6 , arm6 , arv7 , arv8 , arv9 , arv10 ; var inzinyrka , typitomybodovy , ar_mech_ctrl ; export function prepare_arabians ; var tmp ; begin
11417: LD_INT 0
11419: PPUSH
11420: PPUSH
// uc_side = ar ;
11421: LD_ADDR_OWVAR 20
11425: PUSH
11426: LD_EXP 3
11430: ST_TO_ADDR
// uc_nation = nation_arabian ;
11431: LD_ADDR_OWVAR 21
11435: PUSH
11436: LD_INT 2
11438: ST_TO_ADDR
// preparesoldier ( sex_male , ars0 ) ;
11439: LD_INT 1
11441: PPUSH
11442: LD_EXP 6
11446: PPUSH
11447: CALL_OW 381
// tmp = createhuman ;
11451: LD_ADDR_VAR 0 2
11455: PUSH
11456: CALL_OW 44
11460: ST_TO_ADDR
// placeunitxy ( tmp , 135 , 91 , false ) ;
11461: LD_VAR 0 2
11465: PPUSH
11466: LD_INT 135
11468: PPUSH
11469: LD_INT 91
11471: PPUSH
11472: LD_INT 0
11474: PPUSH
11475: CALL_OW 48
// comenterunit ( tmp , arbunk0 ) ;
11479: LD_VAR 0 2
11483: PPUSH
11484: LD_INT 14
11486: PPUSH
11487: CALL_OW 120
// preparesoldier ( sex_male , ars1 ) ;
11491: LD_INT 1
11493: PPUSH
11494: LD_EXP 7
11498: PPUSH
11499: CALL_OW 381
// tmp = createhuman ;
11503: LD_ADDR_VAR 0 2
11507: PUSH
11508: CALL_OW 44
11512: ST_TO_ADDR
// placeunitxy ( tmp , 138 , 85 , false ) ;
11513: LD_VAR 0 2
11517: PPUSH
11518: LD_INT 138
11520: PPUSH
11521: LD_INT 85
11523: PPUSH
11524: LD_INT 0
11526: PPUSH
11527: CALL_OW 48
// comenterunit ( tmp , arbunk1 ) ;
11531: LD_VAR 0 2
11535: PPUSH
11536: LD_INT 15
11538: PPUSH
11539: CALL_OW 120
// preparesoldier ( sex_male , ars2 ) ;
11543: LD_INT 1
11545: PPUSH
11546: LD_EXP 8
11550: PPUSH
11551: CALL_OW 381
// tmp = createhuman ;
11555: LD_ADDR_VAR 0 2
11559: PUSH
11560: CALL_OW 44
11564: ST_TO_ADDR
// placeunitxy ( tmp , 129 , 78 , false ) ;
11565: LD_VAR 0 2
11569: PPUSH
11570: LD_INT 129
11572: PPUSH
11573: LD_INT 78
11575: PPUSH
11576: LD_INT 0
11578: PPUSH
11579: CALL_OW 48
// comenterunit ( tmp , arbunk2 ) ;
11583: LD_VAR 0 2
11587: PPUSH
11588: LD_INT 13
11590: PPUSH
11591: CALL_OW 120
// preparesoldier ( sex_male , ars3 ) ;
11595: LD_INT 1
11597: PPUSH
11598: LD_EXP 9
11602: PPUSH
11603: CALL_OW 381
// tmp = createhuman ;
11607: LD_ADDR_VAR 0 2
11611: PUSH
11612: CALL_OW 44
11616: ST_TO_ADDR
// placeunitxy ( tmp , 115 , 44 , false ) ;
11617: LD_VAR 0 2
11621: PPUSH
11622: LD_INT 115
11624: PPUSH
11625: LD_INT 44
11627: PPUSH
11628: LD_INT 0
11630: PPUSH
11631: CALL_OW 48
// comenterunit ( tmp , arbunk3 ) ;
11635: LD_VAR 0 2
11639: PPUSH
11640: LD_INT 16
11642: PPUSH
11643: CALL_OW 120
// preparesoldier ( sex_male , ars4 ) ;
11647: LD_INT 1
11649: PPUSH
11650: LD_EXP 10
11654: PPUSH
11655: CALL_OW 381
// tmp = createhuman ;
11659: LD_ADDR_VAR 0 2
11663: PUSH
11664: CALL_OW 44
11668: ST_TO_ADDR
// placeunitxy ( tmp , 125 , 37 , false ) ;
11669: LD_VAR 0 2
11673: PPUSH
11674: LD_INT 125
11676: PPUSH
11677: LD_INT 37
11679: PPUSH
11680: LD_INT 0
11682: PPUSH
11683: CALL_OW 48
// comenterunit ( tmp , arbunk4 ) ;
11687: LD_VAR 0 2
11691: PPUSH
11692: LD_INT 17
11694: PPUSH
11695: CALL_OW 120
// preparesoldier ( sex_male , ars5 ) ;
11699: LD_INT 1
11701: PPUSH
11702: LD_EXP 11
11706: PPUSH
11707: CALL_OW 381
// tmp = createhuman ;
11711: LD_ADDR_VAR 0 2
11715: PUSH
11716: CALL_OW 44
11720: ST_TO_ADDR
// placeunitxy ( tmp , 132 , 33 , false ) ;
11721: LD_VAR 0 2
11725: PPUSH
11726: LD_INT 132
11728: PPUSH
11729: LD_INT 33
11731: PPUSH
11732: LD_INT 0
11734: PPUSH
11735: CALL_OW 48
// comenterunit ( tmp , arbunk5 ) ;
11739: LD_VAR 0 2
11743: PPUSH
11744: LD_INT 18
11746: PPUSH
11747: CALL_OW 120
// if difficulty = 1 then
11751: LD_OWVAR 67
11755: PUSH
11756: LD_INT 1
11758: EQUAL
11759: IFFALSE 12053
// begin preparehuman ( sex_male , class_soldier , ars6 ) ;
11761: LD_INT 1
11763: PPUSH
11764: LD_INT 1
11766: PPUSH
11767: LD_EXP 12
11771: PPUSH
11772: CALL_OW 380
// tmp = createhuman ;
11776: LD_ADDR_VAR 0 2
11780: PUSH
11781: CALL_OW 44
11785: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11786: LD_VAR 0 2
11790: PPUSH
11791: LD_INT 134
11793: PPUSH
11794: LD_INT 75
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: LD_INT 0
11802: PPUSH
11803: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11807: LD_VAR 0 2
11811: PPUSH
11812: LD_INT 2
11814: PPUSH
11815: CALL_OW 120
// preparehuman ( sex_male , class_soldier , ars7 ) ;
11819: LD_INT 1
11821: PPUSH
11822: LD_INT 1
11824: PPUSH
11825: LD_EXP 13
11829: PPUSH
11830: CALL_OW 380
// tmp = createhuman ;
11834: LD_ADDR_VAR 0 2
11838: PUSH
11839: CALL_OW 44
11843: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11844: LD_VAR 0 2
11848: PPUSH
11849: LD_INT 134
11851: PPUSH
11852: LD_INT 75
11854: PPUSH
11855: LD_INT 1
11857: PPUSH
11858: LD_INT 0
11860: PPUSH
11861: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11865: LD_VAR 0 2
11869: PPUSH
11870: LD_INT 2
11872: PPUSH
11873: CALL_OW 120
// preparehuman ( sex_male , class_soldier , ars8 ) ;
11877: LD_INT 1
11879: PPUSH
11880: LD_INT 1
11882: PPUSH
11883: LD_EXP 14
11887: PPUSH
11888: CALL_OW 380
// tmp = createhuman ;
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: CALL_OW 44
11901: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11902: LD_VAR 0 2
11906: PPUSH
11907: LD_INT 134
11909: PPUSH
11910: LD_INT 75
11912: PPUSH
11913: LD_INT 1
11915: PPUSH
11916: LD_INT 0
11918: PPUSH
11919: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11923: LD_VAR 0 2
11927: PPUSH
11928: LD_INT 2
11930: PPUSH
11931: CALL_OW 120
// preparehuman ( sex_male , class_soldier , ars9 ) ;
11935: LD_INT 1
11937: PPUSH
11938: LD_INT 1
11940: PPUSH
11941: LD_EXP 15
11945: PPUSH
11946: CALL_OW 380
// tmp = createhuman ;
11950: LD_ADDR_VAR 0 2
11954: PUSH
11955: CALL_OW 44
11959: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11960: LD_VAR 0 2
11964: PPUSH
11965: LD_INT 134
11967: PPUSH
11968: LD_INT 75
11970: PPUSH
11971: LD_INT 1
11973: PPUSH
11974: LD_INT 0
11976: PPUSH
11977: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11981: LD_VAR 0 2
11985: PPUSH
11986: LD_INT 2
11988: PPUSH
11989: CALL_OW 120
// preparehuman ( sex_male , class_soldier , ars10 ) ;
11993: LD_INT 1
11995: PPUSH
11996: LD_INT 1
11998: PPUSH
11999: LD_EXP 16
12003: PPUSH
12004: CALL_OW 380
// tmp = createhuman ;
12008: LD_ADDR_VAR 0 2
12012: PUSH
12013: CALL_OW 44
12017: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
12018: LD_VAR 0 2
12022: PPUSH
12023: LD_INT 134
12025: PPUSH
12026: LD_INT 75
12028: PPUSH
12029: LD_INT 1
12031: PPUSH
12032: LD_INT 0
12034: PPUSH
12035: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
12039: LD_VAR 0 2
12043: PPUSH
12044: LD_INT 2
12046: PPUSH
12047: CALL_OW 120
// end else
12051: GO 12353
// begin preparehuman ( sex_male , class_mortar , ars6 ) ;
12053: LD_INT 1
12055: PPUSH
12056: LD_INT 8
12058: PPUSH
12059: LD_EXP 12
12063: PPUSH
12064: CALL_OW 380
// tmp = createhuman ;
12068: LD_ADDR_VAR 0 2
12072: PUSH
12073: CALL_OW 44
12077: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
12078: LD_VAR 0 2
12082: PPUSH
12083: LD_INT 134
12085: PPUSH
12086: LD_INT 75
12088: PPUSH
12089: LD_INT 1
12091: PPUSH
12092: LD_INT 0
12094: PPUSH
12095: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
12099: LD_VAR 0 2
12103: PPUSH
12104: LD_INT 2
12106: PPUSH
12107: CALL_OW 120
// preparehuman ( sex_male , class_mortar , ars7 ) ;
12111: LD_INT 1
12113: PPUSH
12114: LD_INT 8
12116: PPUSH
12117: LD_EXP 13
12121: PPUSH
12122: CALL_OW 380
// tmp = createhuman ;
12126: LD_ADDR_VAR 0 2
12130: PUSH
12131: CALL_OW 44
12135: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
12136: LD_VAR 0 2
12140: PPUSH
12141: LD_INT 134
12143: PPUSH
12144: LD_INT 75
12146: PPUSH
12147: LD_INT 1
12149: PPUSH
12150: LD_INT 0
12152: PPUSH
12153: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
12157: LD_VAR 0 2
12161: PPUSH
12162: LD_INT 2
12164: PPUSH
12165: CALL_OW 120
// preparehuman ( sex_male , class_mortar , ars8 ) ;
12169: LD_INT 1
12171: PPUSH
12172: LD_INT 8
12174: PPUSH
12175: LD_EXP 14
12179: PPUSH
12180: CALL_OW 380
// tmp = createhuman ;
12184: LD_ADDR_VAR 0 2
12188: PUSH
12189: CALL_OW 44
12193: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
12194: LD_VAR 0 2
12198: PPUSH
12199: LD_INT 134
12201: PPUSH
12202: LD_INT 75
12204: PPUSH
12205: LD_INT 1
12207: PPUSH
12208: LD_INT 0
12210: PPUSH
12211: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
12215: LD_VAR 0 2
12219: PPUSH
12220: LD_INT 2
12222: PPUSH
12223: CALL_OW 120
// if difficulty > 2 then
12227: LD_OWVAR 67
12231: PUSH
12232: LD_INT 2
12234: GREATER
12235: IFFALSE 12353
// begin preparehuman ( sex_male , class_mortar , ars9 ) ;
12237: LD_INT 1
12239: PPUSH
12240: LD_INT 8
12242: PPUSH
12243: LD_EXP 15
12247: PPUSH
12248: CALL_OW 380
// tmp = createhuman ;
12252: LD_ADDR_VAR 0 2
12256: PUSH
12257: CALL_OW 44
12261: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
12262: LD_VAR 0 2
12266: PPUSH
12267: LD_INT 134
12269: PPUSH
12270: LD_INT 75
12272: PPUSH
12273: LD_INT 1
12275: PPUSH
12276: LD_INT 0
12278: PPUSH
12279: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
12283: LD_VAR 0 2
12287: PPUSH
12288: LD_INT 2
12290: PPUSH
12291: CALL_OW 120
// preparehuman ( sex_male , class_mortar , ars10 ) ;
12295: LD_INT 1
12297: PPUSH
12298: LD_INT 8
12300: PPUSH
12301: LD_EXP 16
12305: PPUSH
12306: CALL_OW 380
// tmp = createhuman ;
12310: LD_ADDR_VAR 0 2
12314: PUSH
12315: CALL_OW 44
12319: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
12320: LD_VAR 0 2
12324: PPUSH
12325: LD_INT 134
12327: PPUSH
12328: LD_INT 75
12330: PPUSH
12331: LD_INT 1
12333: PPUSH
12334: LD_INT 0
12336: PPUSH
12337: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
12341: LD_VAR 0 2
12345: PPUSH
12346: LD_INT 2
12348: PPUSH
12349: CALL_OW 120
// end ; end ; preparemechanic ( sex_female , 8 ) ;
12353: LD_INT 2
12355: PPUSH
12356: LD_INT 8
12358: PPUSH
12359: CALL_OW 383
// inzinyrka = createhuman ;
12363: LD_ADDR_LOC 10
12367: PUSH
12368: CALL_OW 44
12372: ST_TO_ADDR
// placeunitxy ( inzinyrka , 133 , 54 , false ) ;
12373: LD_LOC 10
12377: PPUSH
12378: LD_INT 133
12380: PPUSH
12381: LD_INT 54
12383: PPUSH
12384: LD_INT 0
12386: PPUSH
12387: CALL_OW 48
// comenterunit ( inzinyrka , arfact00 ) ;
12391: LD_LOC 10
12395: PPUSH
12396: LD_INT 4
12398: PPUSH
12399: CALL_OW 120
// prepareengineer ( sex_female , 7 ) ;
12403: LD_INT 2
12405: PPUSH
12406: LD_INT 7
12408: PPUSH
12409: CALL_OW 382
// inzinyrka = createhuman ;
12413: LD_ADDR_LOC 10
12417: PUSH
12418: CALL_OW 44
12422: ST_TO_ADDR
// placeunitxy ( inzinyrka , 134 , 61 , false ) ;
12423: LD_LOC 10
12427: PPUSH
12428: LD_INT 134
12430: PPUSH
12431: LD_INT 61
12433: PPUSH
12434: LD_INT 0
12436: PPUSH
12437: CALL_OW 48
// comenterunit ( inzinyrka , ar_depot ) ;
12441: LD_LOC 10
12445: PPUSH
12446: LD_INT 1
12448: PPUSH
12449: CALL_OW 120
// abdul = newcharacter ( Abdul ) ;
12453: LD_ADDR_EXP 134
12457: PUSH
12458: LD_STRING Abdul
12460: PPUSH
12461: CALL_OW 25
12465: ST_TO_ADDR
// if not abdul then
12466: LD_EXP 134
12470: NOT
12471: IFFALSE 12486
// buildquery ( neny Abdul , [ OK ] ) ;
12473: LD_STRING neny Abdul
12475: PPUSH
12476: LD_STRING OK
12478: PUSH
12479: EMPTY
12480: LIST
12481: PPUSH
12482: CALL_OW 99
// setclass ( abdul , class_desert_warior ) ;
12486: LD_EXP 134
12490: PPUSH
12491: LD_INT 11
12493: PPUSH
12494: CALL_OW 336
// placeunitxyr ( abdul , 140 , 65 , 3 , false ) ;
12498: LD_EXP 134
12502: PPUSH
12503: LD_INT 140
12505: PPUSH
12506: LD_INT 65
12508: PPUSH
12509: LD_INT 3
12511: PPUSH
12512: LD_INT 0
12514: PPUSH
12515: CALL_OW 50
// preparemechanic ( sex_female , arm0 ) ;
12519: LD_INT 2
12521: PPUSH
12522: LD_EXP 17
12526: PPUSH
12527: CALL_OW 383
// tmp = createhuman ;
12531: LD_ADDR_VAR 0 2
12535: PUSH
12536: CALL_OW 44
12540: ST_TO_ADDR
// ar_mech_ctrl = tmp ;
12541: LD_ADDR_LOC 12
12545: PUSH
12546: LD_VAR 0 2
12550: ST_TO_ADDR
// placehumaninunit ( tmp , ctrl_twr ) ;
12551: LD_VAR 0 2
12555: PPUSH
12556: LD_INT 24
12558: PPUSH
12559: CALL_OW 52
// setcargo ( nakladak , mat_artefact , 50 ) ;
12563: LD_INT 23
12565: PPUSH
12566: LD_INT 4
12568: PPUSH
12569: LD_INT 50
12571: PPUSH
12572: CALL_OW 290
// preparemechanic ( sex_male , 7 ) ;
12576: LD_INT 1
12578: PPUSH
12579: LD_INT 7
12581: PPUSH
12582: CALL_OW 383
// placehumaninunit ( createhuman , nakladak ) ;
12586: CALL_OW 44
12590: PPUSH
12591: LD_INT 23
12593: PPUSH
12594: CALL_OW 52
// vc_engine = engine_siberite ;
12598: LD_ADDR_OWVAR 39
12602: PUSH
12603: LD_INT 3
12605: ST_TO_ADDR
// vc_control = control_manual ;
12606: LD_ADDR_OWVAR 38
12610: PUSH
12611: LD_INT 1
12613: ST_TO_ADDR
// vc_chassis = arv1_ch ;
12614: LD_ADDR_OWVAR 37
12618: PUSH
12619: LD_EXP 18
12623: ST_TO_ADDR
// vc_weapon = arv1_wp ;
12624: LD_ADDR_OWVAR 40
12628: PUSH
12629: LD_EXP 19
12633: ST_TO_ADDR
// arv1 = createvehicle ;
12634: LD_ADDR_EXP 135
12638: PUSH
12639: CALL_OW 45
12643: ST_TO_ADDR
// setdir ( arv1 , 5 ) ;
12644: LD_EXP 135
12648: PPUSH
12649: LD_INT 5
12651: PPUSH
12652: CALL_OW 233
// placeunitxy ( arv1 , 128 , 38 , false ) ;
12656: LD_EXP 135
12660: PPUSH
12661: LD_INT 128
12663: PPUSH
12664: LD_INT 38
12666: PPUSH
12667: LD_INT 0
12669: PPUSH
12670: CALL_OW 48
// preparemechanic ( sex_male , arm1_sk ) ;
12674: LD_INT 1
12676: PPUSH
12677: LD_EXP 20
12681: PPUSH
12682: CALL_OW 383
// arm1 = createhuman ;
12686: LD_ADDR_EXP 136
12690: PUSH
12691: CALL_OW 44
12695: ST_TO_ADDR
// placehumaninunit ( arm1 , arv1 ) ;
12696: LD_EXP 136
12700: PPUSH
12701: LD_EXP 135
12705: PPUSH
12706: CALL_OW 52
// vc_chassis = arv2_ch ;
12710: LD_ADDR_OWVAR 37
12714: PUSH
12715: LD_EXP 21
12719: ST_TO_ADDR
// vc_weapon = arv2_wp ;
12720: LD_ADDR_OWVAR 40
12724: PUSH
12725: LD_EXP 22
12729: ST_TO_ADDR
// arv2 = createvehicle ;
12730: LD_ADDR_EXP 137
12734: PUSH
12735: CALL_OW 45
12739: ST_TO_ADDR
// setdir ( arv2 , 4 ) ;
12740: LD_EXP 137
12744: PPUSH
12745: LD_INT 4
12747: PPUSH
12748: CALL_OW 233
// placeunitxy ( arv2 , 141 , 89 , false ) ;
12752: LD_EXP 137
12756: PPUSH
12757: LD_INT 141
12759: PPUSH
12760: LD_INT 89
12762: PPUSH
12763: LD_INT 0
12765: PPUSH
12766: CALL_OW 48
// preparemechanic ( sex_male , arm2_sk ) ;
12770: LD_INT 1
12772: PPUSH
12773: LD_EXP 23
12777: PPUSH
12778: CALL_OW 383
// arm2 = createhuman ;
12782: LD_ADDR_EXP 138
12786: PUSH
12787: CALL_OW 44
12791: ST_TO_ADDR
// placehumaninunit ( arm2 , arv2 ) ;
12792: LD_EXP 138
12796: PPUSH
12797: LD_EXP 137
12801: PPUSH
12802: CALL_OW 52
// if difficulty = 2 then
12806: LD_OWVAR 67
12810: PUSH
12811: LD_INT 2
12813: EQUAL
12814: IFFALSE 12912
// begin vc_chassis = arv3_ch ;
12816: LD_ADDR_OWVAR 37
12820: PUSH
12821: LD_EXP 24
12825: ST_TO_ADDR
// vc_weapon = arv3_wp ;
12826: LD_ADDR_OWVAR 40
12830: PUSH
12831: LD_EXP 25
12835: ST_TO_ADDR
// arv3 = createvehicle ;
12836: LD_ADDR_EXP 139
12840: PUSH
12841: CALL_OW 45
12845: ST_TO_ADDR
// setdir ( arv3 , 3 ) ;
12846: LD_EXP 139
12850: PPUSH
12851: LD_INT 3
12853: PPUSH
12854: CALL_OW 233
// placeunitxy ( arv3 , 126 , 74 , false ) ;
12858: LD_EXP 139
12862: PPUSH
12863: LD_INT 126
12865: PPUSH
12866: LD_INT 74
12868: PPUSH
12869: LD_INT 0
12871: PPUSH
12872: CALL_OW 48
// preparemechanic ( sex_male , arm3_sk ) ;
12876: LD_INT 1
12878: PPUSH
12879: LD_EXP 26
12883: PPUSH
12884: CALL_OW 383
// arm3 = createhuman ;
12888: LD_ADDR_EXP 140
12892: PUSH
12893: CALL_OW 44
12897: ST_TO_ADDR
// placehumaninunit ( arm3 , arv3 ) ;
12898: LD_EXP 140
12902: PPUSH
12903: LD_EXP 139
12907: PPUSH
12908: CALL_OW 52
// end ; vc_chassis = arv4_ch ;
12912: LD_ADDR_OWVAR 37
12916: PUSH
12917: LD_EXP 27
12921: ST_TO_ADDR
// vc_weapon = arv4_wp ;
12922: LD_ADDR_OWVAR 40
12926: PUSH
12927: LD_EXP 28
12931: ST_TO_ADDR
// arv4 = createvehicle ;
12932: LD_ADDR_EXP 141
12936: PUSH
12937: CALL_OW 45
12941: ST_TO_ADDR
// setdir ( arv4 , 5 ) ;
12942: LD_EXP 141
12946: PPUSH
12947: LD_INT 5
12949: PPUSH
12950: CALL_OW 233
// placeunitxy ( arv4 , 121 , 41 , false ) ;
12954: LD_EXP 141
12958: PPUSH
12959: LD_INT 121
12961: PPUSH
12962: LD_INT 41
12964: PPUSH
12965: LD_INT 0
12967: PPUSH
12968: CALL_OW 48
// preparemechanic ( sex_male , arm4_sk ) ;
12972: LD_INT 1
12974: PPUSH
12975: LD_EXP 29
12979: PPUSH
12980: CALL_OW 383
// arm4 = createhuman ;
12984: LD_ADDR_EXP 142
12988: PUSH
12989: CALL_OW 44
12993: ST_TO_ADDR
// placehumaninunit ( arm4 , arv4 ) ;
12994: LD_EXP 142
12998: PPUSH
12999: LD_EXP 141
13003: PPUSH
13004: CALL_OW 52
// vc_engine = engine_solar ;
13008: LD_ADDR_OWVAR 39
13012: PUSH
13013: LD_INT 2
13015: ST_TO_ADDR
// vc_chassis = arv5_ch ;
13016: LD_ADDR_OWVAR 37
13020: PUSH
13021: LD_EXP 30
13025: ST_TO_ADDR
// vc_weapon = arv5_wp ;
13026: LD_ADDR_OWVAR 40
13030: PUSH
13031: LD_EXP 31
13035: ST_TO_ADDR
// arv5 = createvehicle ;
13036: LD_ADDR_EXP 143
13040: PUSH
13041: CALL_OW 45
13045: ST_TO_ADDR
// setdir ( arv5 , 0 ) ;
13046: LD_EXP 143
13050: PPUSH
13051: LD_INT 0
13053: PPUSH
13054: CALL_OW 233
// placeunitxy ( arv5 , 118 , 44 , false ) ;
13058: LD_EXP 143
13062: PPUSH
13063: LD_INT 118
13065: PPUSH
13066: LD_INT 44
13068: PPUSH
13069: LD_INT 0
13071: PPUSH
13072: CALL_OW 48
// preparemechanic ( sex_male , arm5_sk ) ;
13076: LD_INT 1
13078: PPUSH
13079: LD_EXP 32
13083: PPUSH
13084: CALL_OW 383
// arm5 = createhuman ;
13088: LD_ADDR_EXP 144
13092: PUSH
13093: CALL_OW 44
13097: ST_TO_ADDR
// placehumaninunit ( arm5 , arv5 ) ;
13098: LD_EXP 144
13102: PPUSH
13103: LD_EXP 143
13107: PPUSH
13108: CALL_OW 52
// vc_engine = engine_siberite ;
13112: LD_ADDR_OWVAR 39
13116: PUSH
13117: LD_INT 3
13119: ST_TO_ADDR
// vc_chassis = arv6_ch ;
13120: LD_ADDR_OWVAR 37
13124: PUSH
13125: LD_EXP 33
13129: ST_TO_ADDR
// vc_weapon = arv6_wp ;
13130: LD_ADDR_OWVAR 40
13134: PUSH
13135: LD_EXP 34
13139: ST_TO_ADDR
// arv6 = createvehicle ;
13140: LD_ADDR_EXP 145
13144: PUSH
13145: CALL_OW 45
13149: ST_TO_ADDR
// setdir ( arv6 , 5 ) ;
13150: LD_EXP 145
13154: PPUSH
13155: LD_INT 5
13157: PPUSH
13158: CALL_OW 233
// placeunitxy ( arv6 , 129 , 35 , false ) ;
13162: LD_EXP 145
13166: PPUSH
13167: LD_INT 129
13169: PPUSH
13170: LD_INT 35
13172: PPUSH
13173: LD_INT 0
13175: PPUSH
13176: CALL_OW 48
// preparemechanic ( sex_male , arm6_sk ) ;
13180: LD_INT 1
13182: PPUSH
13183: LD_EXP 35
13187: PPUSH
13188: CALL_OW 383
// arm6 = createhuman ;
13192: LD_ADDR_EXP 146
13196: PUSH
13197: CALL_OW 44
13201: ST_TO_ADDR
// placehumaninunit ( arm6 , arv6 ) ;
13202: LD_EXP 146
13206: PPUSH
13207: LD_EXP 145
13211: PPUSH
13212: CALL_OW 52
// comremember ( [ arv1 , arv2 , arv3 , arv4 , arv5 , arv6 ] ) ;
13216: LD_EXP 135
13220: PUSH
13221: LD_EXP 137
13225: PUSH
13226: LD_EXP 139
13230: PUSH
13231: LD_EXP 141
13235: PUSH
13236: LD_EXP 143
13240: PUSH
13241: LD_EXP 145
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: PPUSH
13254: CALL_OW 143
// vc_control = control_remote ;
13258: LD_ADDR_OWVAR 38
13262: PUSH
13263: LD_INT 2
13265: ST_TO_ADDR
// if difficulty > 2 then
13266: LD_OWVAR 67
13270: PUSH
13271: LD_INT 2
13273: GREATER
13274: IFFALSE 13442
// begin vc_chassis = arv7_ch ;
13276: LD_ADDR_OWVAR 37
13280: PUSH
13281: LD_EXP 36
13285: ST_TO_ADDR
// vc_weapon = arv7_wp ;
13286: LD_ADDR_OWVAR 40
13290: PUSH
13291: LD_EXP 37
13295: ST_TO_ADDR
// arv7 = createvehicle ;
13296: LD_ADDR_EXP 147
13300: PUSH
13301: CALL_OW 45
13305: ST_TO_ADDR
// setdir ( arv7 , 4 ) ;
13306: LD_EXP 147
13310: PPUSH
13311: LD_INT 4
13313: PPUSH
13314: CALL_OW 233
// placeunitxy ( arv7 , 136 , 88 , false ) ;
13318: LD_EXP 147
13322: PPUSH
13323: LD_INT 136
13325: PPUSH
13326: LD_INT 88
13328: PPUSH
13329: LD_INT 0
13331: PPUSH
13332: CALL_OW 48
// linkvehicletohuman ( arv7 , tmp ) ;
13336: LD_EXP 147
13340: PPUSH
13341: LD_VAR 0 2
13345: PPUSH
13346: CALL_OW 53
// vc_chassis = arv8_ch ;
13350: LD_ADDR_OWVAR 37
13354: PUSH
13355: LD_EXP 38
13359: ST_TO_ADDR
// vc_weapon = arv8_wp ;
13360: LD_ADDR_OWVAR 40
13364: PUSH
13365: LD_EXP 39
13369: ST_TO_ADDR
// arv8 = createvehicle ;
13370: LD_ADDR_EXP 148
13374: PUSH
13375: CALL_OW 45
13379: ST_TO_ADDR
// setdir ( arv8 , 3 ) ;
13380: LD_EXP 148
13384: PPUSH
13385: LD_INT 3
13387: PPUSH
13388: CALL_OW 233
// placeunitxy ( arv8 , 132 , 81 , false ) ;
13392: LD_EXP 148
13396: PPUSH
13397: LD_INT 132
13399: PPUSH
13400: LD_INT 81
13402: PPUSH
13403: LD_INT 0
13405: PPUSH
13406: CALL_OW 48
// linkvehicletohuman ( arv8 , tmp ) ;
13410: LD_EXP 148
13414: PPUSH
13415: LD_VAR 0 2
13419: PPUSH
13420: CALL_OW 53
// comremember ( [ arv7 , arv8 ] ) ;
13424: LD_EXP 147
13428: PUSH
13429: LD_EXP 148
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PPUSH
13438: CALL_OW 143
// end ; if difficulty > 2 then
13442: LD_OWVAR 67
13446: PUSH
13447: LD_INT 2
13449: GREATER
13450: IFFALSE 13544
// begin vc_chassis = arv10_ch ;
13452: LD_ADDR_OWVAR 37
13456: PUSH
13457: LD_EXP 42
13461: ST_TO_ADDR
// vc_weapon = arv10_wp ;
13462: LD_ADDR_OWVAR 40
13466: PUSH
13467: LD_EXP 43
13471: ST_TO_ADDR
// arv10 = createvehicle ;
13472: LD_ADDR_EXP 150
13476: PUSH
13477: CALL_OW 45
13481: ST_TO_ADDR
// setdir ( arv10 , 5 ) ;
13482: LD_EXP 150
13486: PPUSH
13487: LD_INT 5
13489: PPUSH
13490: CALL_OW 233
// placeunitxy ( arv10 , 125 , 40 , false ) ;
13494: LD_EXP 150
13498: PPUSH
13499: LD_INT 125
13501: PPUSH
13502: LD_INT 40
13504: PPUSH
13505: LD_INT 0
13507: PPUSH
13508: CALL_OW 48
// linkvehicletohuman ( arv10 , tmp ) ;
13512: LD_EXP 150
13516: PPUSH
13517: LD_VAR 0 2
13521: PPUSH
13522: CALL_OW 53
// comremember ( [ arv9 , arv10 ] ) ;
13526: LD_EXP 149
13530: PUSH
13531: LD_EXP 150
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PPUSH
13540: CALL_OW 143
// end ; typitomybodovy = filterallunits ( [ [ f_side , ar ] , [ f_type , unit_building ] ] ) ;
13544: LD_ADDR_LOC 11
13548: PUSH
13549: LD_INT 22
13551: PUSH
13552: LD_EXP 3
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: LD_INT 21
13563: PUSH
13564: LD_INT 3
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PPUSH
13575: CALL_OW 69
13579: ST_TO_ADDR
// regid = mcregistry ( ar , [ [ mc_reg_area_to_guard , area4reg ] , [ mc_reg_refresh_time , 13 ] ] ) ;
13580: LD_ADDR_EXP 151
13584: PUSH
13585: LD_EXP 3
13589: PPUSH
13590: LD_INT 2
13592: PUSH
13593: LD_INT 25
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 1
13602: PUSH
13603: LD_INT 13
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PPUSH
13614: CALL_OW 399
13618: ST_TO_ADDR
// end ;
13619: LD_VAR 0 1
13623: RET
// export regid , defid ; function vidi_ar_base ; var tmp ; begin
13624: LD_INT 0
13626: PPUSH
13627: PPUSH
// for tmp in typitomybodovy do
13628: LD_ADDR_VAR 0 2
13632: PUSH
13633: LD_LOC 11
13637: PUSH
13638: FOR_IN
13639: IFFALSE 13671
// if see ( al , tmp ) then
13641: LD_EXP 1
13645: PPUSH
13646: LD_VAR 0 2
13650: PPUSH
13651: CALL_OW 292
13655: IFFALSE 13669
// begin result = true ;
13657: LD_ADDR_VAR 0 1
13661: PUSH
13662: LD_INT 1
13664: ST_TO_ADDR
// exit ;
13665: POP
13666: POP
13667: GO 13681
// end ;
13669: GO 13638
13671: POP
13672: POP
// result = false ;
13673: LD_ADDR_VAR 0 1
13677: PUSH
13678: LD_INT 0
13680: ST_TO_ADDR
// end ;
13681: LD_VAR 0 1
13685: RET
// export ar_base_spotted ; every 0 0$0.3 trigger vidi_ar_base marked 06 do var tmp , tmp2 , tmpx , tmpy ;
13686: CALL 13624 0 0
13690: IFFALSE 14100
13692: GO 13694
13694: DISABLE
13695: LD_INT 0
13697: PPUSH
13698: PPUSH
13699: PPUSH
13700: PPUSH
// begin tmp = nearestunittoxy ( filterallunits ( [ [ f_side , al ] , [ f_type , unit_human ] , [ f_or , [ f_outside ] , [ f_driving ] ] , f_not , [ f_nation , nation_nature ] ] ) , 138 , 65 ) ;
13701: LD_ADDR_VAR 0 1
13705: PUSH
13706: LD_INT 22
13708: PUSH
13709: LD_EXP 1
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 21
13720: PUSH
13721: LD_INT 1
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 2
13730: PUSH
13731: LD_INT 56
13733: PUSH
13734: EMPTY
13735: LIST
13736: PUSH
13737: LD_INT 55
13739: PUSH
13740: EMPTY
13741: LIST
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: LIST
13747: PUSH
13748: LD_INT 3
13750: PUSH
13751: LD_INT 23
13753: PUSH
13754: LD_INT 0
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: PPUSH
13768: CALL_OW 69
13772: PPUSH
13773: LD_INT 138
13775: PPUSH
13776: LD_INT 65
13778: PPUSH
13779: CALL_OW 73
13783: ST_TO_ADDR
// tmp2 = filterallunits ( [ [ f_side , al ] , [ f_type , unit_human ] , [ f_ok ] , f_not , [ f_nation , nation_nature ] ] ) diff john ;
13784: LD_ADDR_VAR 0 2
13788: PUSH
13789: LD_INT 22
13791: PUSH
13792: LD_EXP 1
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 21
13803: PUSH
13804: LD_INT 1
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 50
13813: PUSH
13814: EMPTY
13815: LIST
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: LD_INT 23
13822: PUSH
13823: LD_INT 0
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: PPUSH
13837: CALL_OW 69
13841: PUSH
13842: LD_EXP 80
13846: DIFF
13847: ST_TO_ADDR
// dialogueon ;
13848: CALL_OW 6
// if getsex ( tmp ) = sex_female then
13852: LD_VAR 0 1
13856: PPUSH
13857: CALL_OW 258
13861: PUSH
13862: LD_INT 2
13864: EQUAL
13865: IFFALSE 13881
// say ( tmp , D9-FSol1-1 ) else
13867: LD_VAR 0 1
13871: PPUSH
13872: LD_STRING D9-FSol1-1
13874: PPUSH
13875: CALL_OW 88
13879: GO 13893
// say ( tmp , D9-Sol1-1 ) ;
13881: LD_VAR 0 1
13885: PPUSH
13886: LD_STRING D9-Sol1-1
13888: PPUSH
13889: CALL_OW 88
// revealfogarea ( al , arab_base_reveal ) ;
13893: LD_EXP 1
13897: PPUSH
13898: LD_INT 11
13900: PPUSH
13901: CALL_OW 332
// centernowonunits ( [ abduluv ] ) ;
13905: LD_INT 22
13907: PUSH
13908: EMPTY
13909: LIST
13910: PPUSH
13911: CALL_OW 87
// tmpx = getx ( abduluv ) ;
13915: LD_ADDR_VAR 0 3
13919: PUSH
13920: LD_INT 22
13922: PPUSH
13923: CALL_OW 250
13927: ST_TO_ADDR
// tmpy = gety ( abduluv ) ;
13928: LD_ADDR_VAR 0 4
13932: PUSH
13933: LD_INT 22
13935: PPUSH
13936: CALL_OW 251
13940: ST_TO_ADDR
// placeseeing ( tmpx , tmpy , al , 2 ) ;
13941: LD_VAR 0 3
13945: PPUSH
13946: LD_VAR 0 4
13950: PPUSH
13951: LD_EXP 1
13955: PPUSH
13956: LD_INT 2
13958: PPUSH
13959: CALL_OW 330
// if islive ( frank ) then
13963: LD_EXP 86
13967: PPUSH
13968: CALL_OW 300
13972: IFFALSE 14012
// begin say ( frank , D9-Frank-1 ) ;
13974: LD_EXP 86
13978: PPUSH
13979: LD_STRING D9-Frank-1
13981: PPUSH
13982: CALL_OW 88
// say ( john , D9-JMM-1 ) ;
13986: LD_EXP 80
13990: PPUSH
13991: LD_STRING D9-JMM-1
13993: PPUSH
13994: CALL_OW 88
// say ( frank , D9-Frank-2 ) ;
13998: LD_EXP 86
14002: PPUSH
14003: LD_STRING D9-Frank-2
14005: PPUSH
14006: CALL_OW 88
// end else
14010: GO 14062
// if tmp2 then
14012: LD_VAR 0 2
14016: IFFALSE 14062
// begin say ( tmp2 [ 1 ] , D9-Frank-1 ) ;
14018: LD_VAR 0 2
14022: PUSH
14023: LD_INT 1
14025: ARRAY
14026: PPUSH
14027: LD_STRING D9-Frank-1
14029: PPUSH
14030: CALL_OW 88
// say ( john , D9-JMM-1 ) ;
14034: LD_EXP 80
14038: PPUSH
14039: LD_STRING D9-JMM-1
14041: PPUSH
14042: CALL_OW 88
// say ( tmp2 [ 1 ] , D9-Frank-2 ) ;
14046: LD_VAR 0 2
14050: PUSH
14051: LD_INT 1
14053: ARRAY
14054: PPUSH
14055: LD_STRING D9-Frank-2
14057: PPUSH
14058: CALL_OW 88
// end ; dialogueoff ;
14062: CALL_OW 7
// removeseeing ( tmpx , tmpy , al ) ;
14066: LD_VAR 0 3
14070: PPUSH
14071: LD_VAR 0 4
14075: PPUSH
14076: LD_EXP 1
14080: PPUSH
14081: CALL_OW 331
// ar_base_spotted = true ;
14085: LD_ADDR_EXP 153
14089: PUSH
14090: LD_INT 1
14092: ST_TO_ADDR
// update_display ( 1 ) ;
14093: LD_INT 1
14095: PPUSH
14096: CALL 14103 0 1
// end ;
14100: PPOPN 4
14102: END
// var act_time ; export function update_display ( flag ) ; var tmp ; begin
14103: LD_INT 0
14105: PPUSH
14106: PPUSH
// tmp = tick div ( 35 * 60 ) ;
14107: LD_ADDR_VAR 0 3
14111: PUSH
14112: LD_OWVAR 1
14116: PUSH
14117: LD_INT 35
14119: PUSH
14120: LD_INT 60
14122: MUL
14123: DIV
14124: ST_TO_ADDR
// act_time = tmp * 35 * 60 ;
14125: LD_ADDR_LOC 13
14129: PUSH
14130: LD_VAR 0 3
14134: PUSH
14135: LD_INT 35
14137: MUL
14138: PUSH
14139: LD_INT 60
14141: MUL
14142: ST_TO_ADDR
// display_strings = [ #Am17-1 , arab_artef_zdrh + 25 25$0 - act_time ] ;
14143: LD_ADDR_OWVAR 47
14147: PUSH
14148: LD_STRING #Am17-1
14150: PUSH
14151: LD_EXP 73
14155: PUSH
14156: LD_INT 52500
14158: PLUS
14159: PUSH
14160: LD_LOC 13
14164: MINUS
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: ST_TO_ADDR
// if flag then
14170: LD_VAR 0 1
14174: IFFALSE 14179
// enable ( 37 ) ;
14176: LD_INT 37
14178: ENABLE_MARKED
// end ;
14179: LD_VAR 0 2
14183: RET
// every 1 1$0 marked 37 do
14184: GO 14186
14186: DISABLE
// begin update_display ( 0 ) ;
14187: LD_INT 0
14189: PPUSH
14190: CALL 14103 0 1
// enable ;
14194: ENABLE
// end ;
14195: END
// every 0 0$30 marked 13 do
14196: GO 14198
14198: DISABLE
// begin time2destmasha_ = time2destmasha_ - 0 0$30 ;
14199: LD_ADDR_EXP 74
14203: PUSH
14204: LD_EXP 74
14208: PUSH
14209: LD_INT 1050
14211: MINUS
14212: ST_TO_ADDR
// if time2destmasha_ > 0 then
14213: LD_EXP 74
14217: PUSH
14218: LD_INT 0
14220: GREATER
14221: IFFALSE 14226
// begin enable ;
14223: ENABLE
// exit ;
14224: GO 14282
// end ; comenterunit ( abdul , abduluv ) ;
14226: LD_EXP 134
14230: PPUSH
14231: LD_INT 22
14233: PPUSH
14234: CALL_OW 120
// while not isinunit ( abdul ) do
14238: LD_EXP 134
14242: PPUSH
14243: CALL_OW 310
14247: NOT
14248: IFFALSE 14259
// wait ( 0 0$1 ) ;
14250: LD_INT 35
14252: PPUSH
14253: CALL_OW 67
14257: GO 14238
// comremember ( abduluv ) ;
14259: LD_INT 22
14261: PPUSH
14262: CALL_OW 143
// commovexy ( abduluv , 111 , 10 ) ;
14266: LD_INT 22
14268: PPUSH
14269: LD_INT 111
14271: PPUSH
14272: LD_INT 10
14274: PPUSH
14275: CALL_OW 111
// enable ( 14 ) ;
14279: LD_INT 14
14281: ENABLE_MARKED
// end ;
14282: END
// every 0 0$2 trigger see ( ar , masha ) marked 14 do var tmp ;
14283: LD_EXP 3
14287: PPUSH
14288: LD_EXP 112
14292: PPUSH
14293: CALL_OW 292
14297: IFFALSE 14467
14299: GO 14301
14301: DISABLE
14302: LD_INT 0
14304: PPUSH
// begin comreturn ( abduluv ) ;
14305: LD_INT 22
14307: PPUSH
14308: CALL_OW 144
// uc_side = ar ;
14312: LD_ADDR_OWVAR 20
14316: PUSH
14317: LD_EXP 3
14321: ST_TO_ADDR
// uc_nation = nation_arabian ;
14322: LD_ADDR_OWVAR 21
14326: PUSH
14327: LD_INT 2
14329: ST_TO_ADDR
// preparesoldier ( sex_male , 7 ) ;
14330: LD_INT 1
14332: PPUSH
14333: LD_INT 7
14335: PPUSH
14336: CALL_OW 381
// tmp = createhuman ;
14340: LD_ADDR_VAR 0 1
14344: PUSH
14345: CALL_OW 44
14349: ST_TO_ADDR
// placeunitxy ( tmp , 133 , 32 , false ) ;
14350: LD_VAR 0 1
14354: PPUSH
14355: LD_INT 133
14357: PPUSH
14358: LD_INT 32
14360: PPUSH
14361: LD_INT 0
14363: PPUSH
14364: CALL_OW 48
// commovexy ( tmp , 123 , 15 ) ;
14368: LD_VAR 0 1
14372: PPUSH
14373: LD_INT 123
14375: PPUSH
14376: LD_INT 15
14378: PPUSH
14379: CALL_OW 111
// addcomplacedelayedcharge ( tmp , 0 , 0 , masha ) ;
14383: LD_VAR 0 1
14387: PPUSH
14388: LD_INT 0
14390: PPUSH
14391: LD_INT 0
14393: PPUSH
14394: LD_EXP 112
14398: PPUSH
14399: CALL_OW 192
// addcommovexy ( tmp , 133 , 32 ) ;
14403: LD_VAR 0 1
14407: PPUSH
14408: LD_INT 133
14410: PPUSH
14411: LD_INT 32
14413: PPUSH
14414: CALL_OW 171
// addcomhold ( tmp ) ;
14418: LD_VAR 0 1
14422: PPUSH
14423: CALL_OW 200
// addcommoveunit ( tmp , arbarr ) ;
14427: LD_VAR 0 1
14431: PPUSH
14432: LD_INT 2
14434: PPUSH
14435: CALL_OW 172
// while not isdead ( masha ) do
14439: LD_EXP 112
14443: PPUSH
14444: CALL_OW 301
14448: NOT
14449: IFFALSE 14460
// wait ( 0 0$1 ) ;
14451: LD_INT 35
14453: PPUSH
14454: CALL_OW 67
14458: GO 14439
// changemissionobjectives ( M4b ) ;
14460: LD_STRING M4b
14462: PPUSH
14463: CALL_OW 337
// end ;
14467: PPOPN 1
14469: END
// function isinareaex ( list , area ) ; var tmp ; begin
14470: LD_INT 0
14472: PPUSH
14473: PPUSH
// for tmp in list do
14474: LD_ADDR_VAR 0 4
14478: PUSH
14479: LD_VAR 0 1
14483: PUSH
14484: FOR_IN
14485: IFFALSE 14518
// if not isinarea ( tmp , area ) then
14487: LD_VAR 0 4
14491: PPUSH
14492: LD_VAR 0 2
14496: PPUSH
14497: CALL_OW 308
14501: NOT
14502: IFFALSE 14516
// begin result = false ;
14504: LD_ADDR_VAR 0 3
14508: PUSH
14509: LD_INT 0
14511: ST_TO_ADDR
// exit ;
14512: POP
14513: POP
14514: GO 14528
// end ;
14516: GO 14484
14518: POP
14519: POP
// result = true ;
14520: LD_ADDR_VAR 0 3
14524: PUSH
14525: LD_INT 1
14527: ST_TO_ADDR
// end ;
14528: LD_VAR 0 3
14532: RET
// every 0 0$1 marked 07 do var tmp , tmp2 ;
14533: GO 14535
14535: DISABLE
14536: LD_INT 0
14538: PPUSH
14539: PPUSH
// begin wait ( 7 7$0 ) ;
14540: LD_INT 14700
14542: PPUSH
14543: CALL_OW 67
// uc_side = ar ;
14547: LD_ADDR_OWVAR 20
14551: PUSH
14552: LD_EXP 3
14556: ST_TO_ADDR
// uc_nation = nation_arabian ;
14557: LD_ADDR_OWVAR 21
14561: PUSH
14562: LD_INT 2
14564: ST_TO_ADDR
// vc_engine = engine_siberite ;
14565: LD_ADDR_OWVAR 39
14569: PUSH
14570: LD_INT 3
14572: ST_TO_ADDR
// vc_control = control_manual ;
14573: LD_ADDR_OWVAR 38
14577: PUSH
14578: LD_INT 1
14580: ST_TO_ADDR
// tmp2 = [ ] ;
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: EMPTY
14587: ST_TO_ADDR
// vc_chassis = arv1_ch ;
14588: LD_ADDR_OWVAR 37
14592: PUSH
14593: LD_EXP 18
14597: ST_TO_ADDR
// vc_weapon = arv1_wp ;
14598: LD_ADDR_OWVAR 40
14602: PUSH
14603: LD_EXP 19
14607: ST_TO_ADDR
// tmp = createvehicle ;
14608: LD_ADDR_VAR 0 1
14612: PUSH
14613: CALL_OW 45
14617: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
14618: LD_VAR 0 1
14622: PPUSH
14623: LD_INT 5
14625: PPUSH
14626: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
14630: LD_VAR 0 1
14634: PPUSH
14635: LD_INT 12
14637: PPUSH
14638: LD_INT 0
14640: PPUSH
14641: CALL_OW 49
// preparemechanic ( sex_male , arm1_sk ) ;
14645: LD_INT 1
14647: PPUSH
14648: LD_EXP 20
14652: PPUSH
14653: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
14657: CALL_OW 44
14661: PPUSH
14662: LD_VAR 0 1
14666: PPUSH
14667: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
14671: LD_ADDR_VAR 0 2
14675: PUSH
14676: LD_VAR 0 2
14680: PUSH
14681: LD_VAR 0 1
14685: PUSH
14686: EMPTY
14687: LIST
14688: ADD
14689: ST_TO_ADDR
// vc_chassis = arv2_ch ;
14690: LD_ADDR_OWVAR 37
14694: PUSH
14695: LD_EXP 21
14699: ST_TO_ADDR
// vc_weapon = arv2_wp ;
14700: LD_ADDR_OWVAR 40
14704: PUSH
14705: LD_EXP 22
14709: ST_TO_ADDR
// tmp = createvehicle ;
14710: LD_ADDR_VAR 0 1
14714: PUSH
14715: CALL_OW 45
14719: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
14720: LD_VAR 0 1
14724: PPUSH
14725: LD_INT 4
14727: PPUSH
14728: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
14732: LD_VAR 0 1
14736: PPUSH
14737: LD_INT 12
14739: PPUSH
14740: LD_INT 0
14742: PPUSH
14743: CALL_OW 49
// preparemechanic ( sex_male , arm2_sk ) ;
14747: LD_INT 1
14749: PPUSH
14750: LD_EXP 23
14754: PPUSH
14755: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
14759: CALL_OW 44
14763: PPUSH
14764: LD_VAR 0 1
14768: PPUSH
14769: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
14773: LD_ADDR_VAR 0 2
14777: PUSH
14778: LD_VAR 0 2
14782: PUSH
14783: LD_VAR 0 1
14787: PUSH
14788: EMPTY
14789: LIST
14790: ADD
14791: ST_TO_ADDR
// vc_chassis = arv3_ch ;
14792: LD_ADDR_OWVAR 37
14796: PUSH
14797: LD_EXP 24
14801: ST_TO_ADDR
// vc_weapon = arv3_wp ;
14802: LD_ADDR_OWVAR 40
14806: PUSH
14807: LD_EXP 25
14811: ST_TO_ADDR
// tmp = createvehicle ;
14812: LD_ADDR_VAR 0 1
14816: PUSH
14817: CALL_OW 45
14821: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
14822: LD_VAR 0 1
14826: PPUSH
14827: LD_INT 5
14829: PPUSH
14830: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
14834: LD_VAR 0 1
14838: PPUSH
14839: LD_INT 12
14841: PPUSH
14842: LD_INT 0
14844: PPUSH
14845: CALL_OW 49
// preparemechanic ( sex_male , arm3_sk ) ;
14849: LD_INT 1
14851: PPUSH
14852: LD_EXP 26
14856: PPUSH
14857: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
14861: CALL_OW 44
14865: PPUSH
14866: LD_VAR 0 1
14870: PPUSH
14871: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
14875: LD_ADDR_VAR 0 2
14879: PUSH
14880: LD_VAR 0 2
14884: PUSH
14885: LD_VAR 0 1
14889: PUSH
14890: EMPTY
14891: LIST
14892: ADD
14893: ST_TO_ADDR
// vc_chassis = arv4_ch ;
14894: LD_ADDR_OWVAR 37
14898: PUSH
14899: LD_EXP 27
14903: ST_TO_ADDR
// vc_weapon = arv4_wp ;
14904: LD_ADDR_OWVAR 40
14908: PUSH
14909: LD_EXP 28
14913: ST_TO_ADDR
// tmp = createvehicle ;
14914: LD_ADDR_VAR 0 1
14918: PUSH
14919: CALL_OW 45
14923: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
14924: LD_VAR 0 1
14928: PPUSH
14929: LD_INT 5
14931: PPUSH
14932: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
14936: LD_VAR 0 1
14940: PPUSH
14941: LD_INT 12
14943: PPUSH
14944: LD_INT 0
14946: PPUSH
14947: CALL_OW 49
// preparemechanic ( sex_male , arm4_sk ) ;
14951: LD_INT 1
14953: PPUSH
14954: LD_EXP 29
14958: PPUSH
14959: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
14963: CALL_OW 44
14967: PPUSH
14968: LD_VAR 0 1
14972: PPUSH
14973: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
14977: LD_ADDR_VAR 0 2
14981: PUSH
14982: LD_VAR 0 2
14986: PUSH
14987: LD_VAR 0 1
14991: PUSH
14992: EMPTY
14993: LIST
14994: ADD
14995: ST_TO_ADDR
// vc_engine = engine_combustion ;
14996: LD_ADDR_OWVAR 39
15000: PUSH
15001: LD_INT 1
15003: ST_TO_ADDR
// vc_chassis = arv5_ch ;
15004: LD_ADDR_OWVAR 37
15008: PUSH
15009: LD_EXP 30
15013: ST_TO_ADDR
// vc_weapon = arv5_wp ;
15014: LD_ADDR_OWVAR 40
15018: PUSH
15019: LD_EXP 31
15023: ST_TO_ADDR
// tmp = createvehicle ;
15024: LD_ADDR_VAR 0 1
15028: PUSH
15029: CALL_OW 45
15033: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
15034: LD_VAR 0 1
15038: PPUSH
15039: LD_INT 4
15041: PPUSH
15042: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
15046: LD_VAR 0 1
15050: PPUSH
15051: LD_INT 12
15053: PPUSH
15054: LD_INT 0
15056: PPUSH
15057: CALL_OW 49
// preparemechanic ( sex_male , arm5_sk ) ;
15061: LD_INT 1
15063: PPUSH
15064: LD_EXP 32
15068: PPUSH
15069: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
15073: CALL_OW 44
15077: PPUSH
15078: LD_VAR 0 1
15082: PPUSH
15083: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
15087: LD_ADDR_VAR 0 2
15091: PUSH
15092: LD_VAR 0 2
15096: PUSH
15097: LD_VAR 0 1
15101: PUSH
15102: EMPTY
15103: LIST
15104: ADD
15105: ST_TO_ADDR
// vc_engine = engine_siberite ;
15106: LD_ADDR_OWVAR 39
15110: PUSH
15111: LD_INT 3
15113: ST_TO_ADDR
// vc_chassis = arv6_ch ;
15114: LD_ADDR_OWVAR 37
15118: PUSH
15119: LD_EXP 33
15123: ST_TO_ADDR
// vc_weapon = arv6_wp ;
15124: LD_ADDR_OWVAR 40
15128: PUSH
15129: LD_EXP 34
15133: ST_TO_ADDR
// tmp = createvehicle ;
15134: LD_ADDR_VAR 0 1
15138: PUSH
15139: CALL_OW 45
15143: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
15144: LD_VAR 0 1
15148: PPUSH
15149: LD_INT 5
15151: PPUSH
15152: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
15156: LD_VAR 0 1
15160: PPUSH
15161: LD_INT 12
15163: PPUSH
15164: LD_INT 0
15166: PPUSH
15167: CALL_OW 49
// preparemechanic ( sex_male , arm6_sk ) ;
15171: LD_INT 1
15173: PPUSH
15174: LD_EXP 35
15178: PPUSH
15179: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
15183: CALL_OW 44
15187: PPUSH
15188: LD_VAR 0 1
15192: PPUSH
15193: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
15197: LD_ADDR_VAR 0 2
15201: PUSH
15202: LD_VAR 0 2
15206: PUSH
15207: LD_VAR 0 1
15211: PUSH
15212: EMPTY
15213: LIST
15214: ADD
15215: ST_TO_ADDR
// vc_control = control_remote ;
15216: LD_ADDR_OWVAR 38
15220: PUSH
15221: LD_INT 2
15223: ST_TO_ADDR
// if difficulty >= 2 then
15224: LD_OWVAR 67
15228: PUSH
15229: LD_INT 2
15231: GREATEREQUAL
15232: IFFALSE 15414
// begin vc_chassis = arv7_ch ;
15234: LD_ADDR_OWVAR 37
15238: PUSH
15239: LD_EXP 36
15243: ST_TO_ADDR
// vc_weapon = arv7_wp ;
15244: LD_ADDR_OWVAR 40
15248: PUSH
15249: LD_EXP 37
15253: ST_TO_ADDR
// tmp = createvehicle ;
15254: LD_ADDR_VAR 0 1
15258: PUSH
15259: CALL_OW 45
15263: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
15264: LD_VAR 0 1
15268: PPUSH
15269: LD_INT 4
15271: PPUSH
15272: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
15276: LD_VAR 0 1
15280: PPUSH
15281: LD_INT 12
15283: PPUSH
15284: LD_INT 0
15286: PPUSH
15287: CALL_OW 49
// linkvehicletohuman ( tmp , ar_mech_ctrl ) ;
15291: LD_VAR 0 1
15295: PPUSH
15296: LD_LOC 12
15300: PPUSH
15301: CALL_OW 53
// tmp2 = tmp2 ^ [ tmp ] ;
15305: LD_ADDR_VAR 0 2
15309: PUSH
15310: LD_VAR 0 2
15314: PUSH
15315: LD_VAR 0 1
15319: PUSH
15320: EMPTY
15321: LIST
15322: ADD
15323: ST_TO_ADDR
// vc_chassis = arv8_ch ;
15324: LD_ADDR_OWVAR 37
15328: PUSH
15329: LD_EXP 38
15333: ST_TO_ADDR
// vc_weapon = arv8_wp ;
15334: LD_ADDR_OWVAR 40
15338: PUSH
15339: LD_EXP 39
15343: ST_TO_ADDR
// tmp = createvehicle ;
15344: LD_ADDR_VAR 0 1
15348: PUSH
15349: CALL_OW 45
15353: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
15354: LD_VAR 0 1
15358: PPUSH
15359: LD_INT 5
15361: PPUSH
15362: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
15366: LD_VAR 0 1
15370: PPUSH
15371: LD_INT 12
15373: PPUSH
15374: LD_INT 0
15376: PPUSH
15377: CALL_OW 49
// linkvehicletohuman ( tmp , ar_mech_ctrl ) ;
15381: LD_VAR 0 1
15385: PPUSH
15386: LD_LOC 12
15390: PPUSH
15391: CALL_OW 53
// tmp2 = tmp2 ^ [ tmp ] ;
15395: LD_ADDR_VAR 0 2
15399: PUSH
15400: LD_VAR 0 2
15404: PUSH
15405: LD_VAR 0 1
15409: PUSH
15410: EMPTY
15411: LIST
15412: ADD
15413: ST_TO_ADDR
// end ; if difficulty > 2 then
15414: LD_OWVAR 67
15418: PUSH
15419: LD_INT 2
15421: GREATER
15422: IFFALSE 15604
// begin vc_chassis = arv9_ch ;
15424: LD_ADDR_OWVAR 37
15428: PUSH
15429: LD_EXP 40
15433: ST_TO_ADDR
// vc_weapon = arv9_wp ;
15434: LD_ADDR_OWVAR 40
15438: PUSH
15439: LD_EXP 41
15443: ST_TO_ADDR
// tmp = createvehicle ;
15444: LD_ADDR_VAR 0 1
15448: PUSH
15449: CALL_OW 45
15453: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
15454: LD_VAR 0 1
15458: PPUSH
15459: LD_INT 4
15461: PPUSH
15462: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
15466: LD_VAR 0 1
15470: PPUSH
15471: LD_INT 12
15473: PPUSH
15474: LD_INT 0
15476: PPUSH
15477: CALL_OW 49
// linkvehicletohuman ( tmp , ar_mech_ctrl ) ;
15481: LD_VAR 0 1
15485: PPUSH
15486: LD_LOC 12
15490: PPUSH
15491: CALL_OW 53
// tmp2 = tmp2 ^ [ tmp ] ;
15495: LD_ADDR_VAR 0 2
15499: PUSH
15500: LD_VAR 0 2
15504: PUSH
15505: LD_VAR 0 1
15509: PUSH
15510: EMPTY
15511: LIST
15512: ADD
15513: ST_TO_ADDR
// vc_chassis = arv10_ch ;
15514: LD_ADDR_OWVAR 37
15518: PUSH
15519: LD_EXP 42
15523: ST_TO_ADDR
// vc_weapon = arv10_wp ;
15524: LD_ADDR_OWVAR 40
15528: PUSH
15529: LD_EXP 43
15533: ST_TO_ADDR
// tmp = createvehicle ;
15534: LD_ADDR_VAR 0 1
15538: PUSH
15539: CALL_OW 45
15543: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
15544: LD_VAR 0 1
15548: PPUSH
15549: LD_INT 5
15551: PPUSH
15552: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
15556: LD_VAR 0 1
15560: PPUSH
15561: LD_INT 12
15563: PPUSH
15564: LD_INT 0
15566: PPUSH
15567: CALL_OW 49
// linkvehicletohuman ( tmp , ar_mech_ctrl ) ;
15571: LD_VAR 0 1
15575: PPUSH
15576: LD_LOC 12
15580: PPUSH
15581: CALL_OW 53
// tmp2 = tmp2 ^ [ tmp ] ;
15585: LD_ADDR_VAR 0 2
15589: PUSH
15590: LD_VAR 0 2
15594: PUSH
15595: LD_VAR 0 1
15599: PUSH
15600: EMPTY
15601: LIST
15602: ADD
15603: ST_TO_ADDR
// end ; commovetoarea ( tmp2 , wayp ) ;
15604: LD_VAR 0 2
15608: PPUSH
15609: LD_INT 13
15611: PPUSH
15612: CALL_OW 113
// tmp = 1 ;
15616: LD_ADDR_VAR 0 1
15620: PUSH
15621: LD_INT 1
15623: ST_TO_ADDR
// while not isinareaex ( tmp2 , wayp ) do
15624: LD_VAR 0 2
15628: PPUSH
15629: LD_INT 13
15631: PPUSH
15632: CALL 14470 0 2
15636: NOT
15637: IFFALSE 15688
// begin wait ( 0 0$1 ) ;
15639: LD_INT 35
15641: PPUSH
15642: CALL_OW 67
// tmp = tmp + 1 ;
15646: LD_ADDR_VAR 0 1
15650: PUSH
15651: LD_VAR 0 1
15655: PUSH
15656: LD_INT 1
15658: PLUS
15659: ST_TO_ADDR
// if ( tmp mod 5 ) = 0 then
15660: LD_VAR 0 1
15664: PUSH
15665: LD_INT 5
15667: MOD
15668: PUSH
15669: LD_INT 0
15671: EQUAL
15672: IFFALSE 15686
// commovetoarea ( tmp2 , wayp ) ;
15674: LD_VAR 0 2
15678: PPUSH
15679: LD_INT 13
15681: PPUSH
15682: CALL_OW 113
// end ;
15686: GO 15624
// comagressivemove ( tmp2 , 61 , 50 ) ;
15688: LD_VAR 0 2
15692: PPUSH
15693: LD_INT 61
15695: PPUSH
15696: LD_INT 50
15698: PPUSH
15699: CALL_OW 114
// end ;
15703: PPOPN 2
15705: END
// every 25 25$0 do
15706: GO 15708
15708: DISABLE
// begin wait ( arab_artef_zdrh ) ;
15709: LD_EXP 73
15713: PPUSH
15714: CALL_OW 67
// commovexy ( nakladak , 161 , 87 ) ;
15718: LD_INT 23
15720: PPUSH
15721: LD_INT 161
15723: PPUSH
15724: LD_INT 87
15726: PPUSH
15727: CALL_OW 111
// wait ( 0 0$5 ) ;
15731: LD_INT 175
15733: PPUSH
15734: CALL_OW 67
// destroyunit ( nakladak ) ;
15738: LD_INT 23
15740: PPUSH
15741: CALL_OW 65
// youlost ( Destroyed ) ;
15745: LD_STRING Destroyed
15747: PPUSH
15748: CALL_OW 104
// end ;
15752: END
// on vehiclecaptured ( vehnew , vehold , origside , hum ) do if vehold = nakladak then
15753: LD_VAR 0 2
15757: PUSH
15758: LD_INT 23
15760: EQUAL
15761: IFFALSE 15773
// koncime = true else
15763: LD_ADDR_EXP 76
15767: PUSH
15768: LD_INT 1
15770: ST_TO_ADDR
15771: GO 15795
// if vehold = masha then
15773: LD_VAR 0 2
15777: PUSH
15778: LD_EXP 112
15782: EQUAL
15783: IFFALSE 15795
// masha = vehnew ;
15785: LD_ADDR_EXP 112
15789: PUSH
15790: LD_VAR 0 1
15794: ST_TO_ADDR
15795: PPOPN 4
15797: END
// on artifactloaded ( un , size ) marked 15 do if getside ( un ) = al then
15798: LD_VAR 0 1
15802: PPUSH
15803: CALL_OW 255
15807: PUSH
15808: LD_EXP 1
15812: EQUAL
15813: IFFALSE 15823
// koncime = true ;
15815: LD_ADDR_EXP 76
15819: PUSH
15820: LD_INT 1
15822: ST_TO_ADDR
15823: PPOPN 2
15825: END
// every 0 0$1 trigger koncime or base_out or artef_out do
15826: LD_EXP 76
15830: PUSH
15831: LD_EXP 79
15835: OR
15836: PUSH
15837: LD_EXP 78
15841: OR
15842: IFFALSE 16042
15844: GO 15846
15846: DISABLE
// begin if ( getside ( masha ) = al ) or ( getside ( masha ) = oth ) then
15847: LD_EXP 112
15851: PPUSH
15852: CALL_OW 255
15856: PUSH
15857: LD_EXP 1
15861: EQUAL
15862: PUSH
15863: LD_EXP 112
15867: PPUSH
15868: CALL_OW 255
15872: PUSH
15873: LD_EXP 4
15877: EQUAL
15878: OR
15879: IFFALSE 15893
// addmedal ( Masha , 1 ) else
15881: LD_STRING Masha
15883: PPUSH
15884: LD_INT 1
15886: PPUSH
15887: CALL_OW 101
15891: GO 15904
// addmedal ( Masha , - 1 ) ;
15893: LD_STRING Masha
15895: PPUSH
15896: LD_INT 1
15898: NEG
15899: PPUSH
15900: CALL_OW 101
// if isdead ( abdul ) then
15904: LD_EXP 134
15908: PPUSH
15909: CALL_OW 301
15913: IFFALSE 15927
// addmedal ( Abdul , 1 ) else
15915: LD_STRING Abdul
15917: PPUSH
15918: LD_INT 1
15920: PPUSH
15921: CALL_OW 101
15925: GO 15938
// addmedal ( Abdul , - 1 ) ;
15927: LD_STRING Abdul
15929: PPUSH
15930: LD_INT 1
15932: NEG
15933: PPUSH
15934: CALL_OW 101
// if isdead ( abduluv ) then
15938: LD_INT 22
15940: PPUSH
15941: CALL_OW 301
15945: IFFALSE 15959
// addmedal ( Mast , 1 ) else
15947: LD_STRING Mast
15949: PPUSH
15950: LD_INT 1
15952: PPUSH
15953: CALL_OW 101
15957: GO 15970
// addmedal ( Mast , - 1 ) ;
15959: LD_STRING Mast
15961: PPUSH
15962: LD_INT 1
15964: NEG
15965: PPUSH
15966: CALL_OW 101
// givemedals ( Main ) ;
15970: LD_STRING Main
15972: PPUSH
15973: CALL_OW 102
// rewardpeople ( filterallunits ( [ [ f_alive ] , [ f_side , al ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ) ;
15977: LD_INT 51
15979: PUSH
15980: EMPTY
15981: LIST
15982: PUSH
15983: LD_INT 22
15985: PUSH
15986: LD_EXP 1
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 21
15997: PUSH
15998: LD_INT 1
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: LD_INT 3
16007: PUSH
16008: LD_INT 23
16010: PUSH
16011: LD_INT 0
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: PPUSH
16025: CALL_OW 69
16029: PPUSH
16030: CALL_OW 43
// saveitall ;
16034: CALL 16043 0 0
// youwin ;
16038: CALL_OW 103
// end ;
16042: END
// function saveitall ; var bz , tmz , tmzo ; begin
16043: LD_INT 0
16045: PPUSH
16046: PPUSH
16047: PPUSH
16048: PPUSH
// savevariable ( vyjednavalo_se , NegotiationsOffered ) ;
16049: LD_EXP 114
16053: PPUSH
16054: LD_STRING NegotiationsOffered
16056: PPUSH
16057: CALL_OW 39
// savevariable ( getside ( masha ) = al , masha_saved ) ;
16061: LD_EXP 112
16065: PPUSH
16066: CALL_OW 255
16070: PUSH
16071: LD_EXP 1
16075: EQUAL
16076: PPUSH
16077: LD_STRING masha_saved
16079: PPUSH
16080: CALL_OW 39
// savevariable ( isdead ( abdul ) , AbdulKilled ) ;
16084: LD_EXP 134
16088: PPUSH
16089: CALL_OW 301
16093: PPUSH
16094: LD_STRING AbdulKilled
16096: PPUSH
16097: CALL_OW 39
// savecharacters ( john , JMM ) ;
16101: LD_EXP 80
16105: PPUSH
16106: LD_STRING JMM
16108: PPUSH
16109: CALL_OW 38
// savecharacters ( roth , Roth ) ;
16113: LD_EXP 81
16117: PPUSH
16118: LD_STRING Roth
16120: PPUSH
16121: CALL_OW 38
// if joan then
16125: LD_EXP 82
16129: IFFALSE 16143
// savecharacters ( joan , Joan ) ;
16131: LD_EXP 82
16135: PPUSH
16136: LD_STRING Joan
16138: PPUSH
16139: CALL_OW 38
// if bobby then
16143: LD_EXP 83
16147: IFFALSE 16161
// savecharacters ( bobby , Bobby ) ;
16149: LD_EXP 83
16153: PPUSH
16154: LD_STRING Bobby
16156: PPUSH
16157: CALL_OW 38
// if cyrus then
16161: LD_EXP 84
16165: IFFALSE 16179
// savecharacters ( cyrus , Cyrus ) ;
16167: LD_EXP 84
16171: PPUSH
16172: LD_STRING Cyrus
16174: PPUSH
16175: CALL_OW 38
// if lisa then
16179: LD_EXP 85
16183: IFFALSE 16197
// savecharacters ( lisa , Lisa ) ;
16185: LD_EXP 85
16189: PPUSH
16190: LD_STRING Lisa
16192: PPUSH
16193: CALL_OW 38
// if frank then
16197: LD_EXP 86
16201: IFFALSE 16215
// savecharacters ( frank , Frank ) ;
16203: LD_EXP 86
16207: PPUSH
16208: LD_STRING Frank
16210: PPUSH
16211: CALL_OW 38
// if markc then
16215: LD_EXP 87
16219: IFFALSE 16233
// savecharacters ( markc , Cornell ) ;
16221: LD_EXP 87
16225: PPUSH
16226: LD_STRING Cornell
16228: PPUSH
16229: CALL_OW 38
// if brown then
16233: LD_EXP 94
16237: IFFALSE 16251
// savecharacters ( brown , Brown ) ;
16239: LD_EXP 94
16243: PPUSH
16244: LD_STRING Brown
16246: PPUSH
16247: CALL_OW 38
// if lucy then
16251: LD_EXP 95
16255: IFFALSE 16269
// savecharacters ( lucy , Donaldson ) ;
16257: LD_EXP 95
16261: PPUSH
16262: LD_STRING Donaldson
16264: PPUSH
16265: CALL_OW 38
// if tim then
16269: LD_EXP 88
16273: IFFALSE 16287
// savecharacters ( tim , Gladstone ) ;
16275: LD_EXP 88
16279: PPUSH
16280: LD_STRING Gladstone
16282: PPUSH
16283: CALL_OW 38
// if denis then
16287: LD_EXP 89
16291: IFFALSE 16305
// savecharacters ( denis , Denis ) ;
16293: LD_EXP 89
16297: PPUSH
16298: LD_STRING Denis
16300: PPUSH
16301: CALL_OW 38
// if yamoko then
16305: LD_EXP 90
16309: IFFALSE 16323
// savecharacters ( yamoko , Yamoko ) ;
16311: LD_EXP 90
16315: PPUSH
16316: LD_STRING Yamoko
16318: PPUSH
16319: CALL_OW 38
// if gary then
16323: LD_EXP 91
16327: IFFALSE 16341
// savecharacters ( gary , Gary ) ;
16329: LD_EXP 91
16333: PPUSH
16334: LD_STRING Gary
16336: PPUSH
16337: CALL_OW 38
// if simms then
16341: LD_EXP 92
16345: IFFALSE 16359
// savecharacters ( simms , Simms ) ;
16347: LD_EXP 92
16351: PPUSH
16352: LD_STRING Simms
16354: PPUSH
16355: CALL_OW 38
// savecharacters ( gossud , Gossudarov ) ;
16359: LD_EXP 96
16363: PPUSH
16364: LD_STRING Gossudarov
16366: PPUSH
16367: CALL_OW 38
// savecharacters ( kiril , Kirilenkova ) ;
16371: LD_EXP 97
16375: PPUSH
16376: LD_STRING Kirilenkova
16378: PPUSH
16379: CALL_OW 38
// savecharacters ( jahoda , Belkov ) ;
16383: LD_EXP 98
16387: PPUSH
16388: LD_STRING Belkov
16390: PPUSH
16391: CALL_OW 38
// savecharacters ( burlak , Burlak ) ;
16395: LD_EXP 99
16399: PPUSH
16400: LD_STRING Burlak
16402: PPUSH
16403: CALL_OW 38
// savecharacters ( gnyevko , Gnyevko ) ;
16407: LD_EXP 101
16411: PPUSH
16412: LD_STRING Gnyevko
16414: PPUSH
16415: CALL_OW 38
// savecharacters ( dolgov , Dolgov ) ;
16419: LD_EXP 102
16423: PPUSH
16424: LD_STRING Dolgov
16426: PPUSH
16427: CALL_OW 38
// savecharacters ( kapitsova , Kapitsova ) ;
16431: LD_EXP 103
16435: PPUSH
16436: LD_STRING Kapitsova
16438: PPUSH
16439: CALL_OW 38
// savecharacters ( gleb , Gleb ) ;
16443: LD_EXP 104
16447: PPUSH
16448: LD_STRING Gleb
16450: PPUSH
16451: CALL_OW 38
// savecharacters ( kovalyuk , Kovalyuk ) ;
16455: LD_EXP 105
16459: PPUSH
16460: LD_STRING Kovalyuk
16462: PPUSH
16463: CALL_OW 38
// savecharacters ( scholtze , Scholtze ) ;
16467: LD_EXP 106
16471: PPUSH
16472: LD_STRING Scholtze
16474: PPUSH
16475: CALL_OW 38
// savecharacters ( titov , Titov ) ;
16479: LD_EXP 107
16483: PPUSH
16484: LD_STRING Titov
16486: PPUSH
16487: CALL_OW 38
// savecharacters ( oblukov , Oblukov ) ;
16491: LD_EXP 108
16495: PPUSH
16496: LD_STRING Oblukov
16498: PPUSH
16499: CALL_OW 38
// savecharacters ( bystrov , Bystrov ) ;
16503: LD_EXP 109
16507: PPUSH
16508: LD_STRING Bystrov
16510: PPUSH
16511: CALL_OW 38
// savecharacters ( lipshchin , Lipshchin ) ;
16515: LD_EXP 110
16519: PPUSH
16520: LD_STRING Lipshchin
16522: PPUSH
16523: CALL_OW 38
// savecharacters ( filterallunits ( [ [ f_alive ] , [ f_side , al ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) diff [ john , roth , joan , bobby , cyrus , lisa , frank , markc , tim , denis , yamoko , gary , simms , brown , lucy , gossud , kiril , jahoda , burlak ] , otherwithJMM ) ;
16527: LD_INT 51
16529: PUSH
16530: EMPTY
16531: LIST
16532: PUSH
16533: LD_INT 22
16535: PUSH
16536: LD_EXP 1
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 21
16547: PUSH
16548: LD_INT 1
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 3
16557: PUSH
16558: LD_INT 23
16560: PUSH
16561: LD_INT 0
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: PPUSH
16575: CALL_OW 69
16579: PUSH
16580: LD_EXP 80
16584: PUSH
16585: LD_EXP 81
16589: PUSH
16590: LD_EXP 82
16594: PUSH
16595: LD_EXP 83
16599: PUSH
16600: LD_EXP 84
16604: PUSH
16605: LD_EXP 85
16609: PUSH
16610: LD_EXP 86
16614: PUSH
16615: LD_EXP 87
16619: PUSH
16620: LD_EXP 88
16624: PUSH
16625: LD_EXP 89
16629: PUSH
16630: LD_EXP 90
16634: PUSH
16635: LD_EXP 91
16639: PUSH
16640: LD_EXP 92
16644: PUSH
16645: LD_EXP 94
16649: PUSH
16650: LD_EXP 95
16654: PUSH
16655: LD_EXP 96
16659: PUSH
16660: LD_EXP 97
16664: PUSH
16665: LD_EXP 98
16669: PUSH
16670: LD_EXP 99
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: DIFF
16696: PPUSH
16697: LD_STRING otherwithJMM
16699: PPUSH
16700: CALL_OW 38
// tmz = filterunitsinarea ( stred , [ [ f_side , al ] , f_not , [ f_nation , nation_arabian ] , [ f_btype , b_factory ] ] ) ;
16704: LD_ADDR_VAR 0 3
16708: PUSH
16709: LD_INT 2
16711: PPUSH
16712: LD_INT 22
16714: PUSH
16715: LD_EXP 1
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 3
16726: PUSH
16727: LD_INT 23
16729: PUSH
16730: LD_INT 2
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 30
16739: PUSH
16740: LD_INT 3
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: PPUSH
16753: CALL_OW 70
16757: ST_TO_ADDR
// tmz = tmz ^ filterunitsinarea ( stred , [ [ f_side , al ] , f_not , [ f_nation , nation_arabian ] , [ f_type , unit_building ] , f_not , [ f_btype , b_factory ] ] ) ;
16758: LD_ADDR_VAR 0 3
16762: PUSH
16763: LD_VAR 0 3
16767: PUSH
16768: LD_INT 2
16770: PPUSH
16771: LD_INT 22
16773: PUSH
16774: LD_EXP 1
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 3
16785: PUSH
16786: LD_INT 23
16788: PUSH
16789: LD_INT 2
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 21
16798: PUSH
16799: LD_INT 3
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 3
16808: PUSH
16809: LD_INT 30
16811: PUSH
16812: LD_INT 3
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: PPUSH
16827: CALL_OW 70
16831: ADD
16832: ST_TO_ADDR
// tmzo = [ ] ;
16833: LD_ADDR_VAR 0 4
16837: PUSH
16838: EMPTY
16839: ST_TO_ADDR
// for bz in tmz do
16840: LD_ADDR_VAR 0 2
16844: PUSH
16845: LD_VAR 0 3
16849: PUSH
16850: FOR_IN
16851: IFFALSE 17238
// case getbtype ( bz ) of b_lab_basic , b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_biological , b_lab_spacetime , b_lab_opto :
16853: LD_VAR 0 2
16857: PPUSH
16858: CALL_OW 266
16862: PUSH
16863: LD_INT 9
16865: DOUBLE
16866: EQUAL
16867: IFTRUE 16907
16869: LD_INT 10
16871: DOUBLE
16872: EQUAL
16873: IFTRUE 16907
16875: LD_INT 11
16877: DOUBLE
16878: EQUAL
16879: IFTRUE 16907
16881: LD_INT 12
16883: DOUBLE
16884: EQUAL
16885: IFTRUE 16907
16887: LD_INT 13
16889: DOUBLE
16890: EQUAL
16891: IFTRUE 16907
16893: LD_INT 14
16895: DOUBLE
16896: EQUAL
16897: IFTRUE 16907
16899: LD_INT 15
16901: DOUBLE
16902: EQUAL
16903: IFTRUE 16907
16905: GO 16910
16907: POP
// begin end ; b_lab , b_lab_half , b_lab_full :
16908: GO 17236
16910: LD_INT 6
16912: DOUBLE
16913: EQUAL
16914: IFTRUE 16930
16916: LD_INT 7
16918: DOUBLE
16919: EQUAL
16920: IFTRUE 16930
16922: LD_INT 8
16924: DOUBLE
16925: EQUAL
16926: IFTRUE 16930
16928: GO 17043
16930: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) , getlabkind ( bz , 1 ) , getlabkind ( bz , 2 ) ] ] ; b_bunker , b_turret :
16931: LD_ADDR_VAR 0 4
16935: PUSH
16936: LD_VAR 0 4
16940: PUSH
16941: LD_VAR 0 2
16945: PPUSH
16946: CALL_OW 250
16950: PUSH
16951: LD_VAR 0 2
16955: PPUSH
16956: CALL_OW 251
16960: PUSH
16961: LD_VAR 0 2
16965: PPUSH
16966: CALL_OW 254
16970: PUSH
16971: LD_VAR 0 2
16975: PPUSH
16976: CALL_OW 266
16980: PUSH
16981: LD_VAR 0 2
16985: PPUSH
16986: CALL_OW 267
16990: PUSH
16991: LD_VAR 0 2
16995: PPUSH
16996: CALL_OW 248
17000: PUSH
17001: LD_VAR 0 2
17005: PPUSH
17006: LD_INT 1
17008: PPUSH
17009: CALL_OW 268
17013: PUSH
17014: LD_VAR 0 2
17018: PPUSH
17019: LD_INT 2
17021: PPUSH
17022: CALL_OW 268
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: PUSH
17037: EMPTY
17038: LIST
17039: ADD
17040: ST_TO_ADDR
17041: GO 17236
17043: LD_INT 32
17045: DOUBLE
17046: EQUAL
17047: IFTRUE 17057
17049: LD_INT 33
17051: DOUBLE
17052: EQUAL
17053: IFTRUE 17057
17055: GO 17153
17057: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) , getbweapon ( bz ) ] ] ; else
17058: LD_ADDR_VAR 0 4
17062: PUSH
17063: LD_VAR 0 4
17067: PUSH
17068: LD_VAR 0 2
17072: PPUSH
17073: CALL_OW 250
17077: PUSH
17078: LD_VAR 0 2
17082: PPUSH
17083: CALL_OW 251
17087: PUSH
17088: LD_VAR 0 2
17092: PPUSH
17093: CALL_OW 254
17097: PUSH
17098: LD_VAR 0 2
17102: PPUSH
17103: CALL_OW 266
17107: PUSH
17108: LD_VAR 0 2
17112: PPUSH
17113: CALL_OW 267
17117: PUSH
17118: LD_VAR 0 2
17122: PPUSH
17123: CALL_OW 248
17127: PUSH
17128: LD_VAR 0 2
17132: PPUSH
17133: CALL_OW 269
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: ADD
17150: ST_TO_ADDR
17151: GO 17236
17153: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) ] ] ; end ;
17154: LD_ADDR_VAR 0 4
17158: PUSH
17159: LD_VAR 0 4
17163: PUSH
17164: LD_VAR 0 2
17168: PPUSH
17169: CALL_OW 250
17173: PUSH
17174: LD_VAR 0 2
17178: PPUSH
17179: CALL_OW 251
17183: PUSH
17184: LD_VAR 0 2
17188: PPUSH
17189: CALL_OW 254
17193: PUSH
17194: LD_VAR 0 2
17198: PPUSH
17199: CALL_OW 266
17203: PUSH
17204: LD_VAR 0 2
17208: PPUSH
17209: CALL_OW 267
17213: PUSH
17214: LD_VAR 0 2
17218: PPUSH
17219: CALL_OW 248
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: PUSH
17232: EMPTY
17233: LIST
17234: ADD
17235: ST_TO_ADDR
17236: GO 16850
17238: POP
17239: POP
// savevariable ( tmzo , Freedom ) ;
17240: LD_VAR 0 4
17244: PPUSH
17245: LD_STRING Freedom
17247: PPUSH
17248: CALL_OW 39
// end ;
17252: LD_VAR 0 1
17256: RET
